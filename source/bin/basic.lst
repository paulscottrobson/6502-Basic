
; 64tass Turbo Assembler Macro V1.55.2200 listing file
; 64tass -D autorun=0 -D coldstartnew=0 -Walias -Wmacro-prefix -Wall -q -c -L ../source/bin/basic.lst -l ../source/bin/basic.lbl -Wall -o ../source/bin/stub.prg basic.asm
; Thu Mar 11 17:07:41 2021

;Offset	;Hex		;Monitor	;Source

;******  Command line definitions

=0					autorun=0
=0					coldstartnew=0

;******  Processing input file: basic.asm


;******  Processing file: header/01common.inc


;******  Processing file: header/../generated/installed.inc

=1					installed_header = 1
=1					installed_main = 1
=1					installed_variable = 1
=1					installed_assembler = 1
=1					installed_error = 1
=1					installed_extension = 1
=1					installed_string = 1
=1					installed_device = 1
=0					installed_floatingpoint = 0
=1					installed_interaction = 1
=1					installed_tokeniser = 1
=1					installed_footer = 1

;******  Return to file: header/01common.inc

=$1000					CodeStart = $1000
=$800					MemoryStorage = $800
=$28					ZeroPageStorage = $28
=8					StackSize = 8
=512					retStackSize = 512
=8					hashTableSize = 8			; if this changes, the calculation is AccessSetup has to match it.
="G"					markerGOSUB = 'G'
="R"					markerREPEAT = 'R'
="F"					markerFOR = 'F'
="W"					markerWHILE = 'W'
="P"					markerPROC = 'P'
="$"					markerSTRING = '$'
="#"					markerFLOAT = '#'
="%"					markerINT = '%'
=5					VarHSize = 5 								; header (2 link, 2 name, 1 hash)
=5					VarASize = 5 								; array [address,size,byteSize]
=4					VarISize = 4 								; integer (32 bit)
=6					VarFSize = 6 								; float (4 mantissa, 1 exponent 1 sign/zero)
=2					VarSSize = 2 								; address (2 bytes)

;******  Return to file: basic.asm


;******  Processing file: header/02macros.inc


;******  Return to file: basic.asm


;******  Processing file: header/03data.inc

>0028					codePtr:.fill 	2							; (codePtr),y points to code.
>002a					temp0: 	.fill 	2							; working variables.
>002c					temp1: 	.fill 	2
>002e					temp2: 	.fill 	2
>0030					temp3: 	.fill 	2
.0032					tempshort:
>0032							.fill 	1
.0033					highMemory:
>0033							.fill 	2
.0035					lowMemory:
>0035							.fill 	2
>0040					esType:	.fill 	StackSize  					; type byte (see above)
>0048					esInt0:	.fill 	StackSize 					; integer or mantissa
>0050					esInt1:	.fill 	StackSize
>0058					esInt2:	.fill 	StackSize
>0060					esInt3:	.fill 	StackSize
>0068					esExp:	.fill 	StackSize 					; exponent ($80 = 0)
>0070					esZSign:.fill 	StackSize 					; for floating point - sign (bit 7) isZero (bit 6)
=$48					esMant0 = esInt0 							; synonyms.
=$50					esMant1 = esInt1
=$58					esMant2 = esInt2
=$60					esMant3 = esInt3
>0800							.align	256
.0800					returnStack:
>0800							.fill 	retStackSize
>0a00							.align	256
.0a00					SingleLetterVar:
>0a00					 		.fill 	26*4
.0a68					hashTables:
>0a68							.fill 	6*2*hashTableSize
.0ac8					basePage:
>0ac8							.fill 	2
.0aca					endProgram:
>0aca							.fill 	2
.0acc					endMemory:
>0acc							.fill 	2
.0ace					NullString:
>0ace							.fill 	1							; don't waste memory concreting null strings.
.0acf					convertBuffer:
>0acf							.fill 	35

;******  Processing file: header/../generated/tokenconst.inc

=$80					TOK_EOL=$80
=$81					TOK_SHIFT1=$81
=$82					TOK_SHIFT2=$82
=$83					TOK_SHIFT3=$83
=$84					TOK_FPC=$84
=$85					TOK_STR=$85
=$86					TOK_BINARYST=$86
=$99					TOK_STRUCTST=$99
=$a4					TOK_UNARYST=$a4
=$c6					TOK_TOKENS=$c6
=$86					TKW_AND                      = $86 ; and
=$87					TKW_OR                       = $87 ; or
=$88					TKW_XOR                      = $88 ; xor
=$89					TKW_GREATEREQUAL             = $89 ; >=
=$8a					TKW_LESSEQUAL                = $8a ; <=
=$8b					TKW_GREATER                  = $8b ; >
=$8c					TKW_LESS                     = $8c ; <
=$8d					TKW_EQUAL                    = $8d ; =
=$8e					TKW_LESSGREATER              = $8e ; <>
=$8f					TKW_PLUS                     = $8f ; +
=$90					TKW_MINUS                    = $90 ; -
=$91					TKW_GREATERGREATER           = $91 ; >>
=$92					TKW_LESSLESS                 = $92 ; <<
=$93					TKW_STAR                     = $93 ; *
=$94					TKW_SLASH                    = $94 ; /
=$95					TKW_MOD                      = $95 ; mod
=$96					TKW_HAT                      = $96 ; ^
=$97					TKW_PLING                    = $97 ; !
=$98					TKW_QMARK                    = $98 ; ?
=$99					TKW_REPEAT                   = $99 ; repeat
=$9a					TKW_WHILE                    = $9a ; while
=$9b					TKW_FOR                      = $9b ; for
=$9c					TKW_IF                       = $9c ; if
=$9d					TKW_DEFPROC                  = $9d ; defproc
=$9e					TKW_UNTIL                    = $9e ; until
=$9f					TKW_WEND                     = $9f ; wend
=$a0					TKW_NEXT                     = $a0 ; next
=$a1					TKW_THEN                     = $a1 ; then
=$a2					TKW_ENDIF                    = $a2 ; endif
=$a3					TKW_ENDPROC                  = $a3 ; endproc
=$a4					TKW_LPAREN                   = $a4 ; (
=$a5					TKW_LENLPAREN                = $a5 ; len(
=$a6					TKW_SGNLPAREN                = $a6 ; sgn(
=$a7					TKW_ABSLPAREN                = $a7 ; abs(
=$a8					TKW_RANDOMLPAREN             = $a8 ; random(
=$a9					TKW_PAGE                     = $a9 ; page
=$aa					TKW_TRUE                     = $aa ; true
=$ab					TKW_FALSE                    = $ab ; false
=$ac					TKW_MINLPAREN                = $ac ; min(
=$ad					TKW_MAXLPAREN                = $ad ; max(
=$ae					TKW_SYSLPAREN                = $ae ; sys(
=$af					TKW_TIMERLPAREN              = $af ; timer(
=$b0					TKW_EVENTLPAREN              = $b0 ; event(
=$b1					TKW_GETLPAREN                = $b1 ; get(
=$b2					TKW_INKEYLPAREN              = $b2 ; inkey(
=$b3					TKW_ALLOCLPAREN              = $b3 ; alloc(
=$b4					TKW_CHRDOLLARLPAREN          = $b4 ; chr$(
=$b5					TKW_LEFTDOLLARLPAREN         = $b5 ; left$(
=$b6					TKW_MIDDOLLARLPAREN          = $b6 ; mid$(
=$b7					TKW_RIGHTDOLLARLPAREN        = $b7 ; right$(
=$b8					TKW_STRDOLLARLPAREN          = $b8 ; str$(
=$b9					TKW_VALLPAREN                = $b9 ; val(
=$ba					TKW_PEEKLPAREN               = $ba ; peek(
=$bb					TKW_DEEKLPAREN               = $bb ; deek(
=$bc					TKW_LEEKLPAREN               = $bc ; leek(
=$bd					TKW_ASCLPAREN                = $bd ; asc(
=$be					TKW_INTLPAREN                = $be ; int(
=$bf					TKW_FLOATLPAREN              = $bf ; float(
=$c0					TKW_ISVALLPAREN              = $c0 ; isval(
=$c1					TKW_UPPERDOLLARLPAREN        = $c1 ; upper$(
=$c2					TKW_LOWERDOLLARLPAREN        = $c2 ; lower$(
=$c3					TKW_AT                       = $c3 ; @
=$c4					TKW_WAVY                     = $c4 ; ~
=$c5					TKW_AMP                      = $c5 ; &
=$c6					TKW_RPAREN                   = $c6 ; )
=$c7					TKW_COLON                    = $c7 ; :
=$c8					TKW_COMMA                    = $c8 ; ,
=$c9					TKW_SEMICOLON                = $c9 ; ;
=$ca					TKW_QUOTE                    = $ca ; '
=$cb					TKW_TO                       = $cb ; to
=$cc					TKW_STEP                     = $cc ; step
=$cd					TKW_PROC                     = $cd ; proc
=$ce					TKW_LOCAL                    = $ce ; local
=$cf					TKW_DIM                      = $cf ; dim
=$d0					TKW_REM                      = $d0 ; rem
=$d1					TKW_LET                      = $d1 ; let
=$d2					TKW_INPUT                    = $d2 ; input
=$d3					TKW_ELSE                     = $d3 ; else
=$d4					TKW_VDU                      = $d4 ; vdu
=$d5					TKW_PRINT                    = $d5 ; print
=$d6					TKW_GOTO                     = $d6 ; goto
=$d7					TKW_GOSUB                    = $d7 ; gosub
=$d8					TKW_RETURN                   = $d8 ; return
=$d9					TKW_DATA                     = $d9 ; data
=$da					TKW_ASSERT                   = $da ; assert
=$db					TKW_POKE                     = $db ; poke
=$dc					TKW_DOKE                     = $dc ; doke
=$dd					TKW_LOKE                     = $dd ; loke
=$de					TKW_INK                      = $de ; ink
=$df					TKW_PAPER                    = $df ; paper
=$e0					TKW_CLS                      = $e0 ; cls
=$e1					TKW_LOCATE                   = $e1 ; locate
=$86					TKW_CLEAR                    = $86 ; clear
=$87					TKW_LOAD                     = $87 ; load
=$88					TKW_SAVE                     = $88 ; save
=$89					TKW_LIST                     = $89 ; list
=$8a					TKW_NEW                      = $8a ; new
=$8b					TKW_RUN                      = $8b ; run
=$8c					TKW_READ                     = $8c ; read
=$8d					TKW_RESTORE                  = $8d ; restore
=$8e					TKW_END                      = $8e ; end
=$8f					TKW_STOP                     = $8f ; stop
=$90					TKW_XEMU                     = $90 ; xemu
=$86					TKW_VPOKE                    = $86 ; vpoke
=$87					TKW_VDOKE                    = $87 ; vdoke
=$86					TKW_VPEEKLPAREN              = $86 ; vpeek(
=$87					TKW_VDEEKLPAREN              = $87 ; vdeek(

;******  Return to file: header/03data.inc

=$3a					TYPE_INT =		($3A) 						; type bytes that end identifier.
=$3b					TYPE_INTARRAY =	($3B)
=$3c					TYPE_STR =		($3C)
=$3d					TYPE_STRARRAY =	($3D)
=$3e					TYPE_FLOAT =	($3E)
=$3f					TYPE_FLOATARRAY=($3F)

;******  Return to file: basic.asm


;******  Processing file: header/header.inc


;******  Return to file: basic.asm


;******  Processing file: assembler/assembler.inc


;******  Return to file: basic.asm


;******  Processing file: device/device.inc


;******  Return to file: basic.asm


;******  Processing file: error/error.inc


;******  Return to file: basic.asm


;******  Processing file: error/errorhandler.inc


;******  Processing file: error/../generated/errorid.inc

=1					ErrorID_Missing = 1 ; Feature not Present
=2					ErrorID_Syntax = 2 ; Syntax Error
=3					ErrorID_NoModule = 3 ; Module disabled
=4					ErrorID_Assert = 4 ; Assertion failed
=5					ErrorID_DivZero = 5 ; Divide By Zero
=6					ErrorID_Stop = 6 ; Stop
=7					ErrorID_BadType = 7 ; Type Mismatch
=8					ErrorID_BadValue = 8 ; Illegal Value
=9					ErrorID_MissingRP = 9 ; Missing right bracket
=10					ErrorID_MissingComma = 10 ; Missing comma
=11					ErrorID_NoReference = 11 ; Missing reference
=12					ErrorID_LineNumber = 12 ; Line Number not found
=13					ErrorID_StrLen = 13 ; String too long.
=14					ErrorID_ReturnErr = 14 ; RETURN without GOSUB
=15					ErrorID_UntilErr = 15 ; UNTIL without REPEAT
=16					ErrorID_NextErr = 16 ; NEXT without FOR
=17					ErrorID_WendErr = 17 ; WEND without WHILE
=18					ErrorID_endprocErr = 18 ; ENDPROC without PROC
=19					ErrorID_BadIndex = 19 ; Bad NEXT index
=20					ErrorID_Struct = 20 ; Structures nested wrong
=21					ErrorID_NoAuto = 21 ; Cannot create variable
=22					ErrorID_RetStack = 22 ; Return stack out of space.
=23					ErrorID_NoProc = 23 ; Unknown Procedure
=24					ErrorID_Params = 24 ; Parameters do not match.
=25					ErrorID_DupArray = 25 ; Array already defined
=26					ErrorID_NotArray = 26 ; DIM requires array
=27					ErrorID_ArrayIndex = 27 ; Bad array index.
=28					ErrorID_DataError = 28 ; Out of data
=29					ErrorID_Tokenise = 29 ; Cannot tokenise line.
=30					ErrorID_Save = 30 ; Save failed
=31					ErrorID_Load = 31 ; Load failed

;******  Return to file: error/errorhandler.inc


;******  Return to file: basic.asm


;******  Processing file: extension/extension.inc


;******  Return to file: basic.asm


;******  Processing file: floatingpoint/floatingpoint.inc


;******  Return to file: basic.asm


;******  Processing file: interaction/interaction.inc


;******  Return to file: basic.asm


;******  Processing file: main/main.inc


;******  Return to file: basic.asm


;******  Processing file: string/memory.inc

=252					MaxStringSize = 252

;******  Return to file: basic.asm


;******  Processing file: string/string.inc


;******  Return to file: basic.asm


;******  Processing file: tokeniser/detokenise/colouring.inc

=$84					LTYLineNumber = $84
=$82					LTYPunctuation = $82
=$87					LTYIdentifier = $87
=$86					LTYConstant = $86
=$83					LTYKeyword = $83
=$81					LTYString = $81

;******  Return to file: basic.asm


;******  Processing file: tokeniser/tokeniser.inc


;******  Return to file: basic.asm


;******  Processing file: variable/variable.inc


;******  Return to file: basic.asm


;******  Processing file: footer/footer.inc


;******  Return to file: basic.asm

.1000					section_start_header:

;******  Processing file: header/header.asm


;******  Processing file: header/00start.asm

.1000					Start:
.1000	4c 0a 10	jmp $100a			jmp 	GoColdStart 				; +0 	boot BASIC
.1003	4c 28 10	jmp $1028			jmp 	GoTokTest					; +3 	run tokeniser test code.
>1006	93 33						.word 	TokenTableAddress
.1008							else
>1008	00 00						.word 	0
.100a					GoColdStart:
.100a	a9 00		lda #$00			lda 	#(programMemory) & $FF
.100c	8d c8 0a	sta $0ac8			sta 	basePage
.100f	a9 39		lda #$39			lda 	#(programMemory) >> 8
.1011	8d c9 0a	sta $0ac9			sta 	1+(basePage)
.1014	a9 00		lda #$00			lda 	#($9E00) & $FF
.1016	8d cc 0a	sta $0acc			sta 	endMemory
.1019	a9 9e		lda #$9e			lda 	#($9E00) >> 8
.101b	8d cd 0a	sta $0acd			sta 	1+(endMemory)
.101e	a2 04		ldx #$04		ldx	#4
.1020	20 59 11	jsr $1159		jsr	deviceHandler
.1023	a2 00		ldx #$00		ldx	#0
.1025	20 75 16	jsr $1675		jsr	interactionHandler
.1028					GoTokTest:
.1028	a2 04		ldx #$04		ldx	#4
.102a	20 a1 35	jsr $35a1		jsr	tokeniserHandler

;******  Return to file: header/header.asm


;******  Return to file: basic.asm

.102d					section_end_header:
.102d					section_start_assembler:

;******  Processing file: assembler/assembler.asm

.102d					assemblerHandler:
.102d	7c 30 10	jmp ($1030,x)			jmp 	(assemblerVectors,x)
.1030					assemblerVectors:

;******  Return to file: basic.asm

.1030					section_end_assembler:
.1030					section_start_device:

;******  Processing file: device/device.asm


;******  Processing file: device/option_x16/x16file.asm

.1030					ExternSave:
.1030	98		tya				tya
.1031	48		pha				pha
.1032	20 80 10	jsr $1080			jsr 	ExternGetLength 			; get length of file into A name YX
.1035	20 bd ff	jsr $ffbd			jsr 	$FFBD 						; set name
.1038	a9 01		lda #$01			lda 	#1
.103a	a2 08		ldx #$08			ldx 	#8	 						; device #8
.103c	a0 00		ldy #$00			ldy 	#0
.103e	20 ba ff	jsr $ffba			jsr 	$FFBA 						; set LFS
.1041	a5 49		lda $49				lda 	esInt0+1 					; copy start of save address to temp0
.1043	85 2a		sta $2a				sta 	temp0
.1045	a5 51		lda $51				lda 	esInt1+1
.1047	85 2b		sta $2b				sta 	temp0+1
.1049	a6 4a		ldx $4a				ldx 	esInt0+2 					; end address
.104b	a4 52		ldy $52				ldy 	esInt1+2
.104d	a9 2a		lda #$2a			lda 	#temp0 						; ref to start address
.104f	20 d8 ff	jsr $ffd8			jsr 	$FFD8 						; save
.1052	b0 03		bcs $1057			bcs 	_ESSave
.1054	68		pla				pla
.1055	a8		tay				tay
.1056	60		rts				rts
.1057					_ESSave:
.1057	a2 1e		ldx #$1e			ldx 	#ErrorID_Save
.1059	20 76 11	jsr $1176		jsr	errorHandler
.105c					ExternLoad:
.105c	98		tya				tya
.105d	48		pha				pha
.105e	20 80 10	jsr $1080			jsr 	ExternGetLength 			; get length of file into A name YX
.1061	20 bd ff	jsr $ffbd			jsr 	$FFBD 						; set name
.1064	a9 01		lda #$01			lda 	#1
.1066	a2 08		ldx #$08			ldx 	#8	 						; device #8
.1068	a0 00		ldy #$00			ldy 	#0
.106a	20 ba ff	jsr $ffba			jsr 	$FFBA 						; set LFS
.106d	a6 49		ldx $49				ldx 	esInt0+1 					; load address
.106f	a4 51		ldy $51				ldy 	esInt1+1
.1071	a9 00		lda #$00			lda 	#0 							; load command
.1073	20 d5 ff	jsr $ffd5			jsr 	$FFD5
.1076	b0 03		bcs $107b			bcs 	_ESLoad
.1078	68		pla				pla
.1079	a8		tay				tay
.107a	60		rts				rts
.107b					_ESLoad:
.107b	a2 1f		ldx #$1f			ldx 	#ErrorID_Load
.107d	20 76 11	jsr $1176		jsr	errorHandler
.1080					ExternGetLength:
.1080	a5 48		lda $48				lda 	esInt0 						; length into A.
.1082	85 2a		sta $2a				sta 	temp0
.1084	a5 50		lda $50				lda 	esInt1
.1086	85 2b		sta $2b				sta 	temp0+1
.1088	a0 00		ldy #$00			ldy 	#0
.108a	b1 2a		lda ($2a),y			lda 	(temp0),y
.108c	a6 48		ldx $48				ldx 	esInt0 						; name into YX
.108e	a4 50		ldy $50				ldy 	esInt1
.1090	e8		inx				inx 								; advance over the length pointer.
.1091	d0 01		bne $1094			bne 	_ESNoCarry
.1093	c8		iny				iny
.1094					_ESNoCarry:
.1094	60		rts				rts

;******  Return to file: device/device.asm


;******  Processing file: device/option_x16/x16io.asm

=240					MaxLineInputSize = 240
.0af2					bufferCount:
>0af2							.fill 	0
.0af2					bufferStorage:
>0af2							.fill 	MaxLineInputSize
.1095					IOInitialise:
.1095	a9 0f		lda #$0f			lda 	#15 						; switch to upper/lower case mode
.1097	20 c0 10	jsr $10c0			jsr 	IOPrintChar
.109a	a9 02		lda #$02			lda 	#2 							; green on black and clear screen
.109c	20 ec 10	jsr $10ec			jsr 	IOInk
.109f	a9 00		lda #$00			lda 	#0
.10a1	20 00 11	jsr $1100			jsr 	IOPaper
.10a4	20 a8 10	jsr $10a8			jsr 	IOClearScreen
.10a7	60		rts				rts
.10a8					IOClearScreen:
.10a8	48		pha				pha
.10a9	a9 93		lda #$93			lda	 	#147 						; char code $93 clears screen
.10ab	20 c0 10	jsr $10c0			jsr 	IOPrintChar
.10ae	68		pla				pla
.10af	60		rts				rts
.10b0					IONewLine:
.10b0	48		pha				pha
.10b1	a9 0d		lda #$0d			lda 	#13
.10b3	20 c0 10	jsr $10c0			jsr 	IOPrintChar
.10b6	68		pla				pla
.10b7	60		rts				rts
.10b8					IOTab:
.10b8	48		pha				pha
.10b9	a9 20		lda #$20			lda 	#32
.10bb	20 c0 10	jsr $10c0			jsr 	IOPrintChar
.10be	68		pla				pla
.10bf	60		rts				rts
.10c0					IOPrintChar:
.10c0	aa		tax				tax 								; save in X so we can save Y
.10c1	5a		phy				phy
.10c2	8a		txa				txa
.10c3	c9 08		cmp #$08			cmp 	#8 							; make BS (8) onto CHR$(14) which is the
.10c5	d0 02		bne $10c9			bne 	_IOPCNotBS 					; Commodore/X16 backspace code.
.10c7	a9 14		lda #$14			lda 	#$14
.10c9					_IOPCNotBS:
.10c9	20 d2 ff	jsr $ffd2			jsr 	$FFD2 						; CBM OS Call.
.10cc	7a		ply				ply
.10cd	60		rts				rts
.10ce					IOInkey:
.10ce	98		tya				tya
.10cf	48		pha				pha
.10d0	20 e4 ff	jsr $ffe4			jsr 	$FFE4
.10d3	85 32		sta $32				sta 	tempShort
.10d5	68		pla				pla
.10d6	a8		tay				tay
.10d7	a5 32		lda $32				lda 	tempShort					; no key pressed.
.10d9	f0 10		beq $10eb			beq 	_IOIExit
.10db	c9 0d		cmp #$0d			cmp 	#13 						; allow CR (13)
.10dd	f0 0c		beq $10eb			beq 	_IOIExit
.10df	c9 14		cmp #$14			cmp 	#$14 						; backspace code ($14) returns 8.
.10e1	f0 06		beq $10e9			beq 	_IOIBackspace
.10e3	c9 20		cmp #$20			cmp 	#32 						; no other control allowed.
.10e5	90 e7		bcc $10ce			bcc 	IOInkey
.10e7	b0 02		bcs $10eb			bcs 	_IOIExit
.10e9					_IOIBackspace:
.10e9	a9 08		lda #$08			lda 	#8 							; return chr(8)
.10eb					_IOIExit:
.10eb	60		rts				rts
.10ec					IOInk:
.10ec	48		pha				pha
.10ed	29 07		and #$07			and 	#7 							; 8 primaries
.10ef	aa		tax				tax
.10f0	bd f8 10	lda $10f8,x			lda 	_IOColourTable,x 			; look up CBM code and print it.
.10f3	20 c0 10	jsr $10c0			jsr 	IOPrintChar
.10f6	68		pla				pla
.10f7	60		rts				rts
.10f8					_IOColourTable:
>10f8	90						.byte 	$90 					; 0 Black
>10f9	96						.byte 	$96 					; 1 Red
>10fa	1e						.byte 	$1E 					; 2 Green
>10fb	9e						.byte 	$9E 					; 3 Yellow
>10fc	9a						.byte 	$9A 					; 4 Blue
>10fd	9c						.byte 	$9C 					; 5 Magenta
>10fe	9f						.byte 	$9F 					; 6 Cyan
>10ff	05						.byte 	$05 					; 7 White
.1100					IOPaper:
.1100	48		pha				pha
.1101	48		pha				pha
.1102	a9 01		lda #$01			lda 	#1 						; 1 swaps fgr/bgr, so we swap them, set fgr
.1104	20 c0 10	jsr $10c0			jsr 	IOPrintChar 			; and then swap them again.
.1107	68		pla				pla
.1108	20 ec 10	jsr $10ec			jsr 	IOInk
.110b	a9 01		lda #$01			lda 	#1
.110d	20 c0 10	jsr $10c0			jsr 	IOPrintChar
.1110	68		pla				pla
.1111	60		rts				rts
.1112					IOLocate:
.1112	48		pha				pha
.1113	a9 13		lda #$13			lda 	#$13 					; home cursor code
.1115	20 c0 10	jsr $10c0			jsr 	IOPrintChar
.1118	a9 11		lda #$11			lda 	#$11 	 				; print Y x $11 (down)
.111a	20 21 11	jsr $1121			jsr 	_IOLoc2
.111d	68		pla				pla
.111e	a8		tay				tay
.111f	a9 1d		lda #$1d			lda 	#$1D 					; print Y x $1D (right)
.1121					_IOLoc2:
.1121	c0 00		cpy #$00			cpy 	#0
.1123	f0 06		beq $112b			beq 	_IOLocExit
.1125	20 c0 10	jsr $10c0			jsr 	IOPrintChar
.1128	88		dey				dey
.1129	d0 f6		bne $1121			bne 	_IOLoc2
.112b					_IOLocExit:
.112b	60		rts				rts
.112c					IOInput:
.112c	a9 00		lda #$00			lda 	#0
.112e	8d f2 0a	sta $0af2			sta 	bufferCount
.1131					_IOILoop:
.1131	20 cf ff	jsr $ffcf			jsr 	$FFCF
.1134	c9 0d		cmp #$0d			cmp 	#13
.1136	f0 10		beq $1148			beq 	_IOIExit
.1138	ae f2 0a	ldx $0af2			ldx 	bufferCount
.113b	e0 f0		cpx #$f0			cpx 	#MaxLineInputSize
.113d	f0 f2		beq $1131			beq 	_IOILoop
.113f	ee f2 0a	inc $0af2			inc 	bufferCount
.1142	9d f3 0a	sta $0af3,x			sta 	bufferStorage+1,x
.1145	4c 31 11	jmp $1131			jmp 	_IOILoop
.1148					_IOIExit:
.1148	a9 f2		lda #$f2			lda 	#(bufferCount) & $FF
.114a	85 2a		sta $2a				sta 	temp0
.114c	a9 0a		lda #$0a			lda 	#(bufferCount) >> 8
.114e	85 2b		sta $2b				sta 	1+(temp0)
.1150	60		rts				rts

;******  Return to file: device/device.asm


;******  Processing file: device/option_x16/x16timer.asm

.1151					IOReadTimer:
.1151	20 de ff	jsr $ffde			jsr 	$FFDE 						; reads timer into YXA so we want only YA
.1154	48		pha				pha
.1155	8a		txa				txa
.1156	a8		tay				tay
.1157	68		pla				pla
.1158	60		rts				rts

;******  Return to file: device/device.asm

.1159					deviceHandler:
.1159	7c 5c 11	jmp ($115c,x)			jmp 	(deviceVectors,x)
.115c					deviceVectors:
>115c	a8 10					.word IOClearScreen        ; index 0
>115e	b0 10					.word IONewLine            ; index 2
>1160	95 10					.word IOInitialise         ; index 4
>1162	ec 10					.word IOInk                ; index 6
>1164	ce 10					.word IOInkey              ; index 8
>1166	2c 11					.word IOInput              ; index 10
>1168	5c 10					.word ExternLoad           ; index 12
>116a	12 11					.word IOLocate             ; index 14
>116c	00 11					.word IOPaper              ; index 16
>116e	c0 10					.word IOPrintChar          ; index 18
>1170	30 10					.word ExternSave           ; index 20
>1172	b8 10					.word IOTab                ; index 22
>1174	51 11					.word IOReadTimer          ; index 24

;******  Return to file: basic.asm

.1176					section_end_device:
.1176					section_start_error:

;******  Processing file: error/error.asm


;******  Processing file: error/errorhandler.asm

.1176					ErrorHandler:
.1176	8a		txa				txa
.1177	48		pha				pha
.1178	a9 01		lda #$01			lda 	#1 							; red
.117a	a2 06		ldx #$06		ldx	#6
.117c	20 59 11	jsr $1159		jsr	deviceHandler
.117f	68		pla				pla
.1180	aa		tax				tax
.1181	a9 f2		lda #$f2			lda 	#(ErrorTextList) & $FF
.1183	85 2a		sta $2a				sta 	temp0
.1185	a9 11		lda #$11			lda 	#(ErrorTextList) >> 8
.1187	85 2b		sta $2b				sta 	1+(temp0)
.1189	ca		dex		_EHFind:dex									; errors start at 1
.118a	f0 10		beq $119c			beq 	_EHFound
.118c	a0 00		ldy #$00			ldy 	#0 							; goto next text message, add length + 1 to the pointer.
.118e	38		sec				sec
.118f	a5 2a		lda $2a				lda 	temp0
.1191	71 2a		adc ($2a),y			adc 	(temp0),y
.1193	85 2a		sta $2a				sta 	temp0
.1195	90 f2		bcc $1189			bcc 	_EHFind
.1197	e6 2b		inc $2b				inc 	temp0+1
.1199	4c 89 11	jmp $1189			jmp 	_EHFind
.119c					_EHFound:
.119c	a2 10		ldx #$10		ldx	#16
.119e	20 45 2c	jsr $2c45		jsr	mainHandler
.11a1	a0 00		ldy #$00			ldy 	#0 							; in a line, e.g. the offset to next is non zero.
.11a3	b1 28		lda ($28),y			lda 	(codePtr),y
.11a5	f0 3d		beq $11e4			beq 	_EHNoLine
.11a7	a5 29		lda $29				lda 	codePtr+1 					; code running from the command line.
.11a9	cd c9 0a	cmp $0ac9			cmp 	basePage+1
.11ac	90 36		bcc $11e4			bcc 	_EHNoLine
.11ae	a9 ee		lda #$ee			lda 	#(EHAtMsg) & $FF
.11b0	85 2a		sta $2a				sta 	temp0
.11b2	a9 11		lda #$11			lda 	#(EHAtMsg) >> 8
.11b4	85 2b		sta $2b				sta 	1+(temp0)
.11b6	a2 10		ldx #$10		ldx	#16
.11b8	20 45 2c	jsr $2c45		jsr	mainHandler
.11bb	a0 01		ldy #$01			ldy 	#1 							; set up line number in TOS
.11bd	a2 00		ldx #$00			ldx 	#0
.11bf	b1 28		lda ($28),y			lda 	(codePtr),y
.11c1	95 48		sta $48,x			sta 	esInt0,x
.11c3	c8		iny				iny
.11c4	b1 28		lda ($28),y			lda 	(codePtr),y
.11c6	95 50		sta $50,x			sta 	esInt1,x
.11c8	a9 00		lda #$00			lda 	#0
.11ca	95 58		sta $58,x			sta 	esInt2,x
.11cc	95 60		sta $60,x			sta 	esInt3,x
.11ce	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.11d0	85 2a		sta $2a				sta 	temp0
.11d2	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.11d4	85 2b		sta $2b				sta 	1+(temp0)
.11d6	a0 0a		ldy #$0a			ldy 	#10 						; in base 10.
.11d8	a9 00		lda #$00			lda 	#0							; stack position zero.
.11da	a2 0c		ldx #$0c		ldx	#12
.11dc	20 45 2c	jsr $2c45		jsr	mainHandler
.11df	a2 10		ldx #$10		ldx	#16
.11e1	20 45 2c	jsr $2c45		jsr	mainHandler
.11e4					_EHNoLine:
.11e4	a2 02		ldx #$02		ldx	#2
.11e6	20 59 11	jsr $1159		jsr	deviceHandler
.11e9	a2 02		ldx #$02		ldx	#2
.11eb	20 75 16	jsr $1675		jsr	interactionHandler
.11ee					EHAtMsg:
>11ee	03 20 40 20					.text 	3," @ "

;******  Processing file: error/../generated/errortext.inc

.11f2					ErrorTextList:
>11f2	13 46 65 61 74 75 72 65			.text 19,"Feature not Present"
>11fa	20 6e 6f 74 20 50 72 65 73 65 6e 74
>1206	0c 53 79 6e 74 61 78 20			.text 12,"Syntax Error"
>120e	45 72 72 6f 72
>1213	0f 4d 6f 64 75 6c 65 20			.text 15,"Module disabled"
>121b	64 69 73 61 62 6c 65 64
>1223	10 41 73 73 65 72 74 69			.text 16,"Assertion failed"
>122b	6f 6e 20 66 61 69 6c 65 64
>1234	0e 44 69 76 69 64 65 20			.text 14,"Divide By Zero"
>123c	42 79 20 5a 65 72 6f
>1243	04 53 74 6f 70				.text 4,"Stop"
>1248	0d 54 79 70 65 20 4d 69			.text 13,"Type Mismatch"
>1250	73 6d 61 74 63 68
>1256	0d 49 6c 6c 65 67 61 6c			.text 13,"Illegal Value"
>125e	20 56 61 6c 75 65
>1264	15 4d 69 73 73 69 6e 67			.text 21,"Missing right bracket"
>126c	20 72 69 67 68 74 20 62 72 61 63 6b 65 74
>127a	0d 4d 69 73 73 69 6e 67			.text 13,"Missing comma"
>1282	20 63 6f 6d 6d 61
>1288	11 4d 69 73 73 69 6e 67			.text 17,"Missing reference"
>1290	20 72 65 66 65 72 65 6e 63 65
>129a	15 4c 69 6e 65 20 4e 75			.text 21,"Line Number not found"
>12a2	6d 62 65 72 20 6e 6f 74 20 66 6f 75 6e 64
>12b0	10 53 74 72 69 6e 67 20			.text 16,"String too long."
>12b8	74 6f 6f 20 6c 6f 6e 67 2e
>12c1	14 52 45 54 55 52 4e 20			.text 20,"RETURN without GOSUB"
>12c9	77 69 74 68 6f 75 74 20 47 4f 53 55 42
>12d6	14 55 4e 54 49 4c 20 77			.text 20,"UNTIL without REPEAT"
>12de	69 74 68 6f 75 74 20 52 45 50 45 41 54
>12eb	10 4e 45 58 54 20 77 69			.text 16,"NEXT without FOR"
>12f3	74 68 6f 75 74 20 46 4f 52
>12fc	12 57 45 4e 44 20 77 69			.text 18,"WEND without WHILE"
>1304	74 68 6f 75 74 20 57 48 49 4c 45
>130f	14 45 4e 44 50 52 4f 43			.text 20,"ENDPROC without PROC"
>1317	20 77 69 74 68 6f 75 74 20 50 52 4f 43
>1324	0e 42 61 64 20 4e 45 58			.text 14,"Bad NEXT index"
>132c	54 20 69 6e 64 65 78
>1333	17 53 74 72 75 63 74 75			.text 23,"Structures nested wrong"
>133b	72 65 73 20 6e 65 73 74 65 64 20 77 72 6f 6e 67
>134b	16 43 61 6e 6e 6f 74 20			.text 22,"Cannot create variable"
>1353	63 72 65 61 74 65 20 76 61 72 69 61 62 6c 65
>1362	1a 52 65 74 75 72 6e 20			.text 26,"Return stack out of space."
>136a	73 74 61 63 6b 20 6f 75 74 20 6f 66 20 73 70 61
>137a	63 65 2e
>137d	11 55 6e 6b 6e 6f 77 6e			.text 17,"Unknown Procedure"
>1385	20 50 72 6f 63 65 64 75 72 65
>138f	18 50 61 72 61 6d 65 74			.text 24,"Parameters do not match."
>1397	65 72 73 20 64 6f 20 6e 6f 74 20 6d 61 74 63 68
>13a7	2e
>13a8	15 41 72 72 61 79 20 61			.text 21,"Array already defined"
>13b0	6c 72 65 61 64 79 20 64 65 66 69 6e 65 64
>13be	12 44 49 4d 20 72 65 71			.text 18,"DIM requires array"
>13c6	75 69 72 65 73 20 61 72 72 61 79
>13d1	10 42 61 64 20 61 72 72			.text 16,"Bad array index."
>13d9	61 79 20 69 6e 64 65 78 2e
>13e2	0b 4f 75 74 20 6f 66 20			.text 11,"Out of data"
>13ea	64 61 74 61
>13ee	15 43 61 6e 6e 6f 74 20			.text 21,"Cannot tokenise line."
>13f6	74 6f 6b 65 6e 69 73 65 20 6c 69 6e 65 2e
>1404	0b 53 61 76 65 20 66 61			.text 11,"Save failed"
>140c	69 6c 65 64
>1410	0b 4c 6f 61 64 20 66 61			.text 11,"Load failed"
>1418	69 6c 65 64
>141c	00					.byte 0

;******  Return to file: error/errorhandler.asm


;******  Return to file: error/error.asm


;******  Return to file: basic.asm

.141d					section_end_error:
.141d					section_start_extension:

;******  Processing file: extension/extension.asm


;******  Processing file: extension/extensionhandler.asm

.141d					ExtensionHandler:
.141d	c9 ff		cmp #$ff			cmp 	#$FF						; A = $FF command, otherwise unary function stack level.
.141f	d0 08		bne $1429			bne 	_ExtensionUnary 			; is passed in A.
.1421	b1 28		lda ($28),y			lda 	(codePtr),y 				; so this is a command, using Group 2.
.1423	c8		iny				iny
.1424	0a		asl a				asl 	a
.1425	aa		tax				tax
.1426	7c 27 14	jmp ($1427,x)			jmp 	(Group2Vectors-12,x)
.1429					_ExtensionUnary:
.1429	48		pha				pha 								; save stack pos in A
.142a	b1 28		lda ($28),y			lda 	(codePtr),y 				; get shifted token, double into X
.142c	c8		iny				iny
.142d	0a		asl a				asl 	a
.142e	aa		tax				tax
.142f	68		pla				pla 								; restore stack pos and call group3 command.
.1430	7c 2b 14	jmp ($142b,x)			jmp 	(Group3Vectors-12,X)

;******  Processing file: extension/../generated/tokenvectors2.inc

.1433					Group2Vectors:
>1433	43 14					.word	Command_VPoke            ; $86 vpoke
>1435	46 14					.word	Command_VDoke            ; $87 vdoke

;******  Return to file: extension/extensionhandler.asm


;******  Processing file: extension/../generated/tokenvectors3.inc

.1437					Group3Vectors:
>1437	87 14					.word	Command_VPeek            ; $86 vpeek(
>1439	8a 14					.word	Command_VDeek            ; $87 vdeek(

;******  Return to file: extension/extensionhandler.asm

.143b					XEvaluateInteger:
.143b	8a		txa				txa
.143c	a2 06		ldx #$06		ldx	#6
.143e	20 45 2c	jsr $2c45		jsr	mainHandler
.1441	aa		tax				tax
.1442	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/vpeekpoke.asm

.1443					Command_VPoke:
.1443	38		sec				sec 						; one byte , CS
.1444	b0 01		bcs $1447			bcs 	CmdVideoWrite
.1446					Command_VDoke:
.1446	18		clc				clc 						; two bytes, CC
.1447					CmdVideoWrite:
.1447	08		php				php 						; save one or two btes
.1448	a2 00		ldx #$00			ldx 	#0  				; get address and value into levels 0,1
.144a	20 3b 14	jsr $143b			jsr 	XEvaluateInteger
.144d	20 42 2b	jsr $2b42			jsr 	CheckComma
.1450	e8		inx				inx
.1451	20 3b 14	jsr $143b			jsr 	XEvaluateInteger
.1454	ca		dex				dex
.1455	20 66 14	jsr $1466			jsr 	SetUpTOSVRamAddress ; copy target address to VRAM address registers
.1458	a5 49		lda $49				lda 	esInt0+1 			; get MSB of write value
.145a	8d 23 9f	sta $9f23			sta 	$9F23
.145d	28		plp				plp 						; if it was Poke then exit
.145e	b0 05		bcs $1465			bcs 	_CVWExit
.1460	a5 51		lda $51				lda 	esInt1+1 			; doke, write the MSB.
.1462	8d 23 9f	sta $9f23			sta 	$9F23
.1465					_CVWExit:
.1465	60		rts				rts
.1466					SetUpTOSVRamAddress:
.1466	b5 58		lda $58,x			lda 	esInt2,x 			; check range of address, data to $FFFF
.1468	29 01		and #$01			and 	#1
.146a	15 60		ora $60,x			ora 	esInt3,x
.146c	d0 14		bne $1482			bne 	CVWValue
.146e	b5 48		lda $48,x			lda 	esInt0,x			; set address up
.1470	8d 20 9f	sta $9f20			sta 	$9F20
.1473	b5 50		lda $50,x			lda 	esInt1,x
.1475	8d 21 9f	sta $9f21			sta	 	$9F21
.1478	b5 58		lda $58,x			lda 	esInt2,x
.147a	29 01		and #$01			and 	#1
.147c	09 10		ora #$10			ora 	#$10 				; step 1.
.147e	8d 22 9f	sta $9f22			sta 	$9F22
.1481	60		rts				rts
.1482					CVWValue:
.1482	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.1484	20 76 11	jsr $1176		jsr	errorHandler
.1487					Command_VPeek:
.1487	38		sec				sec 						; one byte , CS
.1488	b0 01		bcs $148b			bcs 	CmdVideoRead
.148a					Command_VDeek:
.148a	18		clc				clc 						; two bytes, CC
.148b					CmdVideoRead:
.148b	08		php				php 						; save action on stack.
.148c	aa		tax				tax 						; save stack position
.148d	20 3b 14	jsr $143b			jsr 	XEvaluateInteger 	; address
.1490	20 35 2b	jsr $2b35			jsr 	CheckRightParen 	; closing right bracket.
.1493	20 66 14	jsr $1466			jsr 	SetUpTOSVRamAddress	; set up VRAM address.
.1496	20 c2 2a	jsr $2ac2			jsr 	MInt32False 		; zero return.
.1499	ad 23 9f	lda $9f23			lda 	$9F23				; copy 1st byte
.149c	95 48		sta $48,x			sta 	esInt0,x
.149e	28		plp				plp 						; check if DOKE (carry was clear)
.149f	b0 05		bcs $14a6			bcs 	_CVRExit
.14a1	ad 23 9f	lda $9f23			lda 	$9F23 				; copy 2nd byte
.14a4	95 50		sta $50,x			sta 	esInt1,x
.14a6					_CVRExit:
.14a6	8a		txa				txa 						; return X position.
.14a7	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Return to file: basic.asm

.14a8					section_end_extension:
.14a8					section_start_floatingpoint:

;******  Processing file: floatingpoint/floatingpoint.asm

.14a8					floatingpointHandler:
.14a8	a2 03		ldx #$03			ldx 	#ErrorID_NoModule
.14aa	20 76 11	jsr $1176		jsr	errorHandler

;******  Return to file: basic.asm

.14ad					section_end_floatingpoint:
.14ad					section_start_interaction:

;******  Processing file: interaction/interaction.asm


;******  Processing file: interaction/cold.asm

.14ad					ColdStartEntry:
.14ad	a2 ff		ldx #$ff			ldx 	#$FF
.14af	9a		txs				txs
.14b0	a2 00		ldx #$00		ldx	#0
.14b2	20 59 11	jsr $1159		jsr	deviceHandler
.14b5	a0 ff		ldy #$ff			ldy 	#255
.14b7					_CSBanner:
.14b7	c8		iny				iny
.14b8	b9 d9 14	lda $14d9,y			lda 	Intro,y
.14bb	f0 14		beq $14d1			beq 	_CSStart
.14bd	c9 08		cmp #$08			cmp 	#8
.14bf	90 08		bcc $14c9			bcc 	_CSInk
.14c1	a2 12		ldx #$12		ldx	#18
.14c3	20 59 11	jsr $1159		jsr	deviceHandler
.14c6	4c b7 14	jmp $14b7			jmp 	_CSBanner
.14c9					_CSInk:
.14c9	a2 06		ldx #$06		ldx	#6
.14cb	20 59 11	jsr $1159		jsr	deviceHandler
.14ce	4c b7 14	jmp $14b7			jmp 	_CSBanner
.14d1					_CSStart:
.14d1	a2 02		ldx #$02		ldx	#2
.14d3	20 45 2c	jsr $2c45		jsr	mainHandler
.14d6	4c ed 15	jmp $15ed			jmp 	WarmStartEntry
>14d9	06 2a 2a 2a 20 36 35 30		Intro:	.text 	6,"*** 6502 Extended BASIC ***",13,13
>14e1	32 20 45 78 74 65 6e 64 65 64 20 42 41 53 49 43
>14f1	20 2a 2a 2a 0d 0d
>14f7	03 57 72 69 74 74 65 6e				.text 	3,"Written by Paul Robson 2021",13,13
>14ff	20 62 79 20 50 61 75 6c 20 52 6f 62 73 6f 6e 20
>150f	32 30 32 31 0d 0d
>1515	02 42 61 73 69 63 20				.text 	2,"Basic "
>151c	30 2e 31 33					.text "0.13"
>1520	20 28						.text 	" ("
>1522	31 31 2d 4d 61 72 2d 32				.text "11-Mar-21"
>152a	31
>152b	29 0d 0d 00					.text 	")",13,13,0

;******  Return to file: interaction/interaction.asm


;******  Processing file: interaction/delete.asm

.152f					DeleteLine:
.152f	ad c8 0a	lda $0ac8			lda 	basePage 					; copy program base to temp0
.1532	85 2a		sta $2a				sta 	temp0
.1534	ad c9 0a	lda $0ac9			lda 	basePage+1
.1537	85 2b		sta $2b				sta 	temp0+1
.1539	a0 01		ldy #$01	_DLLoop:ldy 	#1 							; see if found line ?
.153b	a5 48		lda $48				lda 	esInt0
.153d	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.153f	d0 07		bne $1548			bne 	_DLNext
.1541	c8		iny				iny
.1542	a5 50		lda $50				lda 	esInt1
.1544	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.1546	f0 0a		beq $1552			beq 	_DLFound
.1548	20 70 15	jsr $1570	_DLNext:jsr 	IAdvanceTemp0 				; shift temp0 forward, return Z flag set if end.
.154b	d0 ec		bne $1539			bne 	_DLLoop
.154d	a0 00		ldy #$00			ldy 	#0 							; size of chunk to cut out.
.154f	b1 2a		lda ($2a),y			lda 	(temp0),y
.1551	60		rts				rts
.1552					_DLFound:
.1552	a0 00		ldy #$00			ldy 	#0 							; from here (temp0),y
.1554	b1 2a		lda ($2a),y			lda 	(temp0),y
.1556	a8		tay				tay
.1557	a2 00		ldx #$00			ldx 	#0  						; to (temp0,x)
.1559					_DLCopyDown:
.1559	b1 2a		lda ($2a),y			lda 	(temp0),y
.155b	81 2a		sta ($2a,x)			sta 	(temp0,x)
.155d	e6 2a		inc $2a				inc 	temp0 						; advance pointer
.155f	d0 02		bne $1563			bne 	_DLNoCarry
.1561	e6 2b		inc $2b				inc 	temp0+1
.1563					_DLNoCarry:
.1563	a5 2a		lda $2a				lda 	temp0 						; until hit low memory
.1565	c5 35		cmp $35				cmp 	lowMemory
.1567	d0 f0		bne $1559			bne 	_DLCopyDown
.1569	a5 2b		lda $2b				lda 	temp0+1
.156b	c5 36		cmp $36				cmp 	lowMemory+1
.156d	d0 ea		bne $1559			bne 	_DLCopyDown
.156f	60		rts				rts
.1570					IAdvanceTemp0:
.1570	84 32		sty $32				sty 	tempShort
.1572	18		clc				clc
.1573	a0 00		ldy #$00			ldy 	#0
.1575	b1 2a		lda ($2a),y			lda 	(temp0),y
.1577	65 2a		adc $2a				adc 	temp0
.1579	85 2a		sta $2a				sta 	temp0
.157b	90 02		bcc $157f			bcc 	_IATNoCarry
.157d	e6 2b		inc $2b				inc 	temp0+1
.157f					_IATNoCarry:
.157f	b1 2a		lda ($2a),y			lda 	(temp0),y
.1581	a4 32		ldy $32				ldy 	tempShort
.1583	c9 00		cmp #$00			cmp		#0
.1585	60		rts				rts

;******  Return to file: interaction/interaction.asm


;******  Processing file: interaction/insert.asm

.1586					InsertLine:
.1586	ad c8 0a	lda $0ac8			lda 	basePage 					; copy program base to temp0
.1589	85 2a		sta $2a				sta 	temp0
.158b	ad c9 0a	lda $0ac9			lda 	basePage+1
.158e	85 2b		sta $2b				sta 	temp0+1
.1590					_ILLoop:
.1590	a0 01		ldy #$01			ldy 	#1
.1592	b1 2a		lda ($2a),y			lda 	(temp0),y
.1594	c5 48		cmp $48				cmp 	esInt0
.1596	c8		iny				iny
.1597	b1 2a		lda ($2a),y			lda 	(temp0),y
.1599	e5 50		sbc $50				sbc 	esInt1
.159b	b0 05		bcs $15a2			bcs 	_ILFound 					; we know it cannot be equal, it would have been deleted
.159d	20 70 15	jsr $1570			jsr 	IAdvanceTemp0 				; shift temp0 forward, return Z flag set if end.
.15a0	d0 ee		bne $1590			bne 	_ILLoop
.15a2					_ILFound:
.15a2	a5 35		lda $35				lda 	lowMemory 					; shift lowMemory up to make space for it.
.15a4	85 2c		sta $2c				sta 	temp1
.15a6	a5 36		lda $36				lda 	lowMemory+1
.15a8	85 2d		sta $2d				sta 	temp1+1
.15aa	ad 1a 0d	lda $0d1a			lda 	tokenBufferIndex 			; space to make in Y, 0 in X.
.15ad	18		clc				clc
.15ae	69 03		adc #$03			adc 	#3
.15b0	a8		tay				tay
.15b1	a2 00		ldx #$00			ldx 	#0
.15b3	a1 2c		lda ($2c,x)	_ILMove:lda 	(temp1,x)
.15b5	91 2c		sta ($2c),y			sta 	(temp1),y
.15b7	a5 2c		lda $2c				lda 	temp1
.15b9	c5 2a		cmp $2a				cmp 	temp0
.15bb	d0 06		bne $15c3			bne 	_ILMNext
.15bd	a5 2d		lda $2d				lda 	temp1+1
.15bf	c5 2b		cmp $2b				cmp 	temp0+1
.15c1	f0 0b		beq $15ce			beq 	_ILMCopy
.15c3					_ILMNext:
.15c3	a5 2c		lda $2c				lda 	temp1
.15c5	d0 02		bne $15c9			bne 	_ILNoBorrow
.15c7	c6 2d		dec $2d				dec 	temp1+1
.15c9					_ILNoBorrow:
.15c9	c6 2c		dec $2c				dec 	temp1
.15cb	4c b3 15	jmp $15b3			jmp 	_ILMove
.15ce					_ILMCopy:
.15ce	98		tya				tya 								; Y is the offset of the new line.
.15cf	81 2a		sta ($2a,x)			sta 	(temp0,x)					; X = 0 still.
.15d1	a0 01		ldy #$01			ldy 	#1 							; copy in line number.
.15d3	a5 48		lda $48				lda 	esInt0
.15d5	91 2a		sta ($2a),y			sta 	(temp0),y
.15d7	c8		iny				iny
.15d8	a5 50		lda $50				lda 	esInt1
.15da	91 2a		sta ($2a),y			sta 	(temp0),y
.15dc	a0 00		ldy #$00			ldy 	#0 							; copy the body in
.15de					_ILMCopy2:
.15de	b1 28		lda ($28),y			lda 	(codePtr),y
.15e0	c8		iny				iny
.15e1	c8		iny				iny
.15e2	c8		iny				iny
.15e3	91 2a		sta ($2a),y			sta 	(temp0),y
.15e5	88		dey				dey
.15e6	88		dey				dey
.15e7	cc 1a 0d	cpy $0d1a			cpy 	tokenBufferIndex
.15ea	d0 f2		bne $15de			bne 	_ILMCopy2
.15ec	60		rts				rts

;******  Return to file: interaction/interaction.asm


;******  Processing file: interaction/warm.asm

.15ed					WarmStartEntry:
.15ed	a2 ff		ldx #$ff			ldx 	#$FF
.15ef	9a		txs				txs
.15f0	a9 02		lda #$02			lda 	#2							; green text.
.15f2	a2 06		ldx #$06		ldx	#6
.15f4	20 59 11	jsr $1159		jsr	deviceHandler
.15f7	a2 0a		ldx #$0a		ldx	#10
.15f9	20 59 11	jsr $1159		jsr	deviceHandler
.15fc	a5 2a		lda $2a				lda 	temp0	 					; copy temp0 to codePtr
.15fe	85 28		sta $28				sta 	codePtr
.1600	a5 2b		lda $2b				lda 	temp0+1
.1602	85 29		sta $29				sta 	codePtr+1
.1604	a2 02		ldx #$02		ldx	#2
.1606	20 59 11	jsr $1159		jsr	deviceHandler
.1609	a2 06		ldx #$06		ldx	#6
.160b	20 a1 35	jsr $35a1		jsr	tokeniserHandler
.160e	90 25		bcc $1635			bcc 	WSEError 					; failed.
.1610	a9 17		lda #$17			lda 	#(tokenHeader) & $FF
.1612	85 28		sta $28				sta 	codePtr
.1614	a9 0c		lda #$0c			lda 	#(tokenHeader) >> 8
.1616	85 29		sta $29				sta 	1+(codePtr)
.1618	ad 1a 0c	lda $0c1a			lda 	tokenBuffer 				; is it a blank line, go get another line.
.161b	c9 80		cmp #$80			cmp 	#$80
.161d	f0 ce		beq $15ed			beq 	WarmStartEntry
.161f	29 c0		and #$c0			and 	#$C0						; does it start with a number
.1621	c9 40		cmp #$40			cmp 	#$40
.1623	f0 15		beq $163a			beq 	HasLineNumber
.1625	a9 00		lda #$00			lda 	#0 							; zero the token header, so it will look like a
.1627	8d 17 0c	sta $0c17			sta 	tokenHeader 				; fake program line.
.162a	8d 18 0c	sta $0c18			sta 	tokenHeader+1
.162d	8d 19 0c	sta $0c19			sta 	tokenHeader+2
.1630	a2 12		ldx #$12		ldx	#18
.1632	20 45 2c	jsr $2c45		jsr	mainHandler
.1635					WSEError:
.1635	a2 1d		ldx #$1d			ldx 	#ErrorID_Tokenise
.1637	20 76 11	jsr $1176		jsr	errorHandler
.163a					HasLineNumber:
.163a	a0 03		ldy #$03			ldy 	#3 							; get line number
.163c	a9 00		lda #$00			lda 	#0
.163e	a2 06		ldx #$06		ldx	#6
.1640	20 45 2c	jsr $2c45		jsr	mainHandler
.1643	a5 58		lda $58				lda 	esInt2		 				; check in range.
.1645	05 60		ora $60				ora 	esInt3
.1647	d0 ec		bne $1635			bne 	WSEError
.1649	98		tya				tya 								; make codePtr point to code after the line number.
.164a	18		clc				clc
.164b	65 28		adc $28				adc 	codePtr
.164d	85 28		sta $28				sta 	codePtr
.164f	90 02		bcc $1653			bcc		_HLNNoCarry
.1651	e6 29		inc $29				inc 	codePtr+1
.1653					_HLNNoCarry:
.1653	98		tya				tya 								; subtract that offset from the code buffer index
.1654	38		sec				sec
.1655	49 ff		eor #$ff			eor 	#$FF
.1657	6d 1a 0d	adc $0d1a			adc 	tokenBufferIndex
.165a	18		clc				clc 								; add space allowing for header & $80 trailer
.165b	69 04		adc #$04			adc 	#4
.165d	8d 1a 0d	sta $0d1a			sta 	tokenBufferIndex 			; this is the number of bytes occupied.
.1660	20 2f 15	jsr $152f			jsr 	DeleteLine 					; always delete the line, it's deleted and reinserted.
.1663					_HLNNoDelete:
.1663	ad 1a 0d	lda $0d1a			lda 	tokenBufferIndex 			; if line was empty, then don't insert
.1666	c9 01		cmp #$01			cmp 	#1 							; (the one character is the EOL marker)
.1668	f0 03		beq $166d			beq 	_HLMEditDone
.166a	20 86 15	jsr $1586			jsr 	InsertLine 					; insert the line in
.166d					_HLMEditDone:
.166d	a2 02		ldx #$02		ldx	#2
.166f	20 45 2c	jsr $2c45		jsr	mainHandler
.1672	4c ed 15	jmp $15ed			jmp 	WarmStartEntry

;******  Return to file: interaction/interaction.asm

.1675					interactionHandler:
.1675	7c 78 16	jmp ($1678,x)			jmp 	(interactionVectors,x)
.1678					interactionVectors:
>1678	ad 14					.word ColdStartEntry       ; index 0
>167a	ed 15					.word WarmStartEntry       ; index 2

;******  Return to file: basic.asm

.167c					section_end_interaction:
.167c					section_start_main:

;******  Processing file: main/main.asm


;******  Processing file: main/commands/assert.asm

.167c					Command_Assert:
.167c	20 5e 25	jsr $255e			jsr 	EvaluateRootInteger 		; what is being asserted.
.167f	20 e9 2a	jsr $2ae9			jsr 	MInt32Zero 					; is it true ?
.1682	f0 01		beq $1685			beq 	_CAError
.1684	60		rts				rts
.1685					_CAError:
.1685	a2 04		ldx #$04			ldx 	#ErrorID_Assert
.1687	20 76 11	jsr $1176		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/commands/clear.asm

.168a					CommandClear:
.168a					XCommandClear:
.168a	98		tya				tya
.168b	48		pha				pha
.168c	ad cc 0a	lda $0acc			lda 	endMemory					; set high memory = end of memory
.168f	85 33		sta $33				sta 	highMemory
.1691	ad cd 0a	lda $0acd			lda 	endMemory+1
.1694	85 34		sta $34				sta 	highMemory+1
.1696	ad c8 0a	lda $0ac8			lda 	basePage 					; work out where the program ends.
.1699	85 2a		sta $2a				sta 	temp0
.169b	ad c9 0a	lda $0ac9			lda 	basePage+1
.169e	85 2b		sta $2b				sta 	temp0+1
.16a0					_CCFindEnd:
.16a0	a0 00		ldy #$00			ldy 	#0
.16a2	b1 2a		lda ($2a),y			lda 	(temp0),y
.16a4	f0 0c		beq $16b2			beq 	_CCFoundEnd 				; offset zero is end.
.16a6	18		clc				clc
.16a7	65 2a		adc $2a				adc 	temp0 						; move to next line
.16a9	85 2a		sta $2a				sta 	temp0
.16ab	90 f3		bcc $16a0			bcc 	_CCFindEnd
.16ad	e6 2b		inc $2b				inc 	temp0+1
.16af	4c a0 16	jmp $16a0			jmp 	_CCFindEnd
.16b2					_CCFoundEnd:
.16b2	a5 2a		lda $2a				lda 	temp0 						; put temp0 in lowMemory
.16b4	85 35		sta $35				sta 	lowMemory
.16b6	a5 2b		lda $2b				lda 	temp0+1
.16b8	85 36		sta $36				sta 	lowMemory+1
.16ba	18		clc				clc 								; put temp0+1 in endProgram
.16bb	a5 2a		lda $2a				lda 	temp0
.16bd	69 01		adc #$01			adc 	#1
.16bf	8d ca 0a	sta $0aca			sta 	endProgram
.16c2	a5 2b		lda $2b				lda 	temp0+1
.16c4	69 00		adc #$00			adc 	#0
.16c6	8d cb 0a	sta $0acb			sta 	endProgram+1
.16c9	a9 04		lda #$04			lda 	#4 							; skip low free memory clear, leave a gap.
.16cb	20 df 16	jsr $16df			jsr 	AdvanceLowMemoryByte		; need at least one here, to skip the end of program zero offset.
.16ce	20 e9 2b	jsr $2be9			jsr 	RSReset 					; reset the return stack.
.16d1	a2 04		ldx #$04		ldx	#4
.16d3	20 9a 38	jsr $389a		jsr	variableHandler
.16d6	20 14 1f	jsr $1f14			jsr 	ScanProc 					; scan for procedures
.16d9	20 f0 1c	jsr $1cf0			jsr 	CommandRestore 				; do a restore
.16dc	68		pla				pla
.16dd	a8		tay				tay
.16de	60		rts				rts
.16df					AdvanceLowMemoryByte:
.16df	18		clc				clc
.16e0	65 35		adc $35				adc 	lowMemory
.16e2	85 35		sta $35				sta 	lowMemory
.16e4	90 02		bcc $16e8			bcc 	_ALMBExit
.16e6	e6 36		inc $36				inc 	lowMemory+1
.16e8					_ALMBExit:
.16e8	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/dim.asm

.16e9					Command_Dim:
.16e9	a2 02		ldx #$02		ldx	#2
.16eb	20 9a 38	jsr $389a		jsr	variableHandler
.16ee	b1 28		lda ($28),y			lda 	(codePtr),y 				; see what follows.
.16f0	c8		iny				iny
.16f1	c9 c8		cmp #$c8			cmp 	#TKW_COMMA 					; comma follows, go back and do next
.16f3	f0 f4		beq $16e9			beq 	Command_Dim
.16f5	88		dey				dey 								; unpick get
.16f6	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/for.asm

.16f7					Command_FOR:
.16f7	a9 46		lda #$46			lda 	#markerFOR 					; allocate the space and set the marker
.16f9	a2 0b		ldx #$0b			ldx 	#11
.16fb	20 f7 2b	jsr $2bf7			jsr 	RSClaim
.16fe	20 f3 18	jsr $18f3			jsr 	CommandLET 					; do the same as LET FOR [a = 4]
.1701	a5 40		lda $40				lda 	esType 						; check type should be integer reference.
.1703	c9 80		cmp #$80			cmp 	#$80 						; we do not do FOR floats.
.1705	d0 4c		bne $1753			bne 	_CFType
.1707	a9 cb		lda #$cb			lda 	#TKW_TO 					; check TO present.
.1709	20 2a 2b	jsr $2b2a			jsr 	CheckToken
.170c	a2 01		ldx #$01			ldx 	#1 							; keep the variable address in stack 0
.170e	20 60 25	jsr $2560			jsr 	EvaluateInteger				; get terminal value in stack 1
.1711	98		tya				tya
.1712	48		pha				pha
.1713	a0 04		ldy #$04			ldy 	#4
.1715	a5 48		lda $48				lda		esInt0 						; copy the address of the index variable into 4 and 5
.1717	91 78		sta ($78),y			sta 	(rsPointer),y
.1719	c8		iny				iny
.171a	a5 50		lda $50				lda		esInt1
.171c	91 78		sta ($78),y			sta 	(rsPointer),y
.171e	c8		iny				iny
.171f	a9 01		lda #$01			lda 	#1  						; the default step in 6, (-128 .. 127 only)
.1721	91 78		sta ($78),y			sta 	(rsPointer),y
.1723	c8		iny				iny
.1724	a5 49		lda $49				lda		esInt0+1 					; terminal value in 7 to 11.
.1726	91 78		sta ($78),y			sta 	(rsPointer),y
.1728	c8		iny				iny
.1729	a5 51		lda $51				lda		esInt1+1
.172b	91 78		sta ($78),y			sta 	(rsPointer),y
.172d	c8		iny				iny
.172e	a5 59		lda $59				lda		esInt2+1
.1730	91 78		sta ($78),y			sta 	(rsPointer),y
.1732	c8		iny				iny
.1733	a5 61		lda $61				lda		esInt3+1
.1735	91 78		sta ($78),y			sta 	(rsPointer),y
.1737	68		pla				pla
.1738	a8		tay				tay
.1739	b1 28		lda ($28),y			lda 	(codePtr),y 				; followed by STEP.
.173b	c9 cc		cmp #$cc			cmp 	#TKW_STEP
.173d	d0 0e		bne $174d			bne 	_CFDone
.173f	c8		iny				iny									; skip over step.
.1740	20 60 25	jsr $2560			jsr 	EvaluateInteger 			; get step
.1743	98		tya				tya
.1744	48		pha				pha
.1745	b5 48		lda $48,x			lda 	esInt0,x 					; copy it into step (bit lazy here)
.1747	a0 06		ldy #$06			ldy 	#6
.1749	91 78		sta ($78),y			sta 	(rsPointer),y
.174b	68		pla				pla
.174c	a8		tay				tay
.174d					_CFDone:
.174d	a9 01		lda #$01			lda 	#1
.174f	20 23 2c	jsr $2c23			jsr 	RSSavePosition 				; save position.
.1752	60		rts				rts
.1753					_CFType:
.1753	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.1755	20 76 11	jsr $1176		jsr	errorHandler
.1758					Command_NEXT:
.1758	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.175a	a1 78		lda ($78,x)			lda 	(rsPointer,x)
.175c	c9 46		cmp #$46			cmp 	#markerFOR 						; does it match
.175e	f0 05		beq $1765			beq 	_isok
.1760	a2 10		ldx #$10			ldx 	#ErrorID_nextErr
.1762	20 76 11	jsr $1176		jsr	errorHandler
.1765					_isok:
.1765	b1 28		lda ($28),y			lda 	(codePtr),y 				; is it NEXT <index>
.1767	c9 40		cmp #$40			cmp 	#$40 						; e.g. a variable follows 00-3F
.1769	b0 18		bcs $1783			bcs 	_CNNoIndex
.176b	a2 00		ldx #$00			ldx 	#0 							; start on stack
.176d	20 93 25	jsr $2593			jsr 	EvaluateReference 			; this is the variable/parameter to localise.
.1770	98		tya				tya
.1771	48		pha				pha
.1772	a0 04		ldy #$04			ldy 	#4 							; check same variable as that stored at +4,+5
.1774	b1 78		lda ($78),y			lda 	(rsPointer),y
.1776	d5 48		cmp $48,x			cmp 	esInt0,x
.1778	d0 76		bne $17f0			bne 	_CNBadIndex
.177a	c8		iny				iny
.177b	b1 78		lda ($78),y			lda 	(rsPointer),y
.177d	d5 50		cmp $50,x			cmp 	esInt1,x
.177f	d0 6f		bne $17f0			bne 	_CNBadIndex
.1781	68		pla				pla
.1782	a8		tay				tay
.1783					_CNNoIndex:
.1783	98		tya				tya
.1784	48		pha				pha
.1785	a0 04		ldy #$04			ldy 	#4 							; make temp0 point to the index
.1787	b1 78		lda ($78),y			lda 	(rsPointer),y
.1789	85 2a		sta $2a				sta 	temp0
.178b	c8		iny				iny
.178c	b1 78		lda ($78),y			lda 	(rsPointer),y
.178e	85 2b		sta $2b				sta 	temp0+1
.1790	c8		iny				iny
.1791	a2 00		ldx #$00			ldx 	#0 							; X is the sign extend part of the step.
.1793	b1 78		lda ($78),y			lda 	(rsPointer),y 				; get the step.
.1795	85 2f		sta $2f				sta 	temp2+1 					; save for later.
.1797	10 01		bpl $179a			bpl 	_CNSignX
.1799	ca		dex				dex  								; X = $FF
.179a					_CNSignX:
.179a	18		clc				clc 								; add to the LSB
.179b	a0 00		ldy #$00			ldy 	#0
.179d	71 2a		adc ($2a),y			adc 	(temp0),y
.179f	91 2a		sta ($2a),y			sta 	(temp0),y
.17a1					_CNPropogate:
.17a1	c8		iny				iny  								; add the sign extended in X to the rest.
.17a2	8a		txa				txa
.17a3	71 2a		adc ($2a),y			adc 	(temp0),y
.17a5	91 2a		sta ($2a),y			sta 	(temp0),y
.17a7	c8		iny				iny
.17a8	8a		txa				txa
.17a9	71 2a		adc ($2a),y			adc 	(temp0),y
.17ab	91 2a		sta ($2a),y			sta 	(temp0),y
.17ad	c8		iny				iny
.17ae	8a		txa				txa
.17af	71 2a		adc ($2a),y			adc 	(temp0),y
.17b1	91 2a		sta ($2a),y			sta 	(temp0),y
.17b3	18		clc				clc 								; point temp1 to the terminal value stored in the stack.
.17b4	a5 78		lda $78				lda 	rsPointer
.17b6	69 07		adc #$07			adc 	#7
.17b8	85 2c		sta $2c				sta 	temp1
.17ba	a9 00		lda #$00			lda 	#0
.17bc	85 2e		sta $2e				sta 	temp2 						; clear temp2, which is the OR of all the subtractions.
.17be	a8		tay				tay 								; and clear the Y register again.
.17bf	65 79		adc $79				adc 	rsPointer+1
.17c1	85 2d		sta $2d				sta 	temp1+1
.17c3	38		sec				sec 								; calculate current - limit oring interim values.
.17c4	20 fc 17	jsr $17fc			jsr 	_CNCompare 					; each of these does a byte.
.17c7	20 fc 17	jsr $17fc			jsr 	_CNCompare 					; we calculate the OR of all these subtractions.
.17ca	20 fc 17	jsr $17fc			jsr 	_CNCompare 					; and the carry of the subtraction.
.17cd	20 fc 17	jsr $17fc			jsr 	_CNCompare
.17d0	50 02		bvc $17d4			bvc 	_CNNoOverflow 				; converts to a signed comparison on the sign bit.
.17d2	49 80		eor #$80			eor 	#$80
.17d4					_CNNoOverflow:
.17d4	a4 2f		ldy $2f				ldy 	temp2+1						; get step back
.17d6	30 1d		bmi $17f5			bmi 	_CNCheckDownto
.17d8	c9 00		cmp #$00			cmp 	#0
.17da	30 0c		bmi $17e8			bmi 	_CNLoopRound 				; loop round if < =
.17dc	a5 2e		lda $2e				lda 	temp2
.17de	f0 08		beq $17e8			beq 	_CNLoopRound
.17e0					_CNLoopExit:
.17e0	68		pla				pla
.17e1	a8		tay				tay
.17e2	a9 0b		lda #$0b			lda 	#11
.17e4	20 19 2c	jsr $2c19			jsr 	RSFree
.17e7	60		rts				rts
.17e8					_CNLoopRound:
.17e8	68		pla				pla
.17e9	a8		tay				tay
.17ea	a9 01		lda #$01			lda 	#1
.17ec	20 36 2c	jsr $2c36			jsr 	RSLoadPosition				; go back to the loop top
.17ef	60		rts				rts
.17f0					_CNBadIndex:
.17f0	a2 13		ldx #$13			ldx 	#ErrorID_BadIndex
.17f2	20 76 11	jsr $1176		jsr	errorHandler
.17f5					_CNCheckDownto:
.17f5	c9 00		cmp #$00			cmp 	#0
.17f7	10 ef		bpl $17e8			bpl 	_CNLoopRound
.17f9	4c e0 17	jmp $17e0			jmp 	_CNLoopExit
.17fc					_CNCompare:
.17fc	b1 2a		lda ($2a),y			lda 	(temp0),y 					; do the subtraction - compare don't care about answer
.17fe	f1 2c		sbc ($2c),y			sbc 	(temp1),y
.1800	05 2e		ora $2e				ora 	temp2 						; Or into temp2 (does not affect carry)
.1802	85 2e		sta $2e				sta 	temp2
.1804	c8		iny				iny
.1805	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/if.asm

.1806					CommandIf:
.1806	20 5e 25	jsr $255e			jsr 	EvaluateRootInteger 		; get what's being tested.
.1809	b1 28		lda ($28),y			lda 	(codePtr),y 				; check for IF .. THEN or IF .. GOTO which are single lines.
.180b	c9 d6		cmp #$d6			cmp 	#TKW_GOTO
.180d	f0 04		beq $1813			beq 	_IfSimple
.180f	c9 a1		cmp #$a1			cmp 	#TKW_THEN
.1811	d0 1b		bne $182e			bne 	_IfComplex
.1813					_IfSimple:
.1813	20 e9 2a	jsr $2ae9			jsr 	MInt32Zero					; check if TOS zero
.1816	f0 10		beq $1828			beq 	_IfEOL 						; go to next line.
.1818	b1 28		lda ($28),y			lda 	(codePtr),y 				; get and skip token.
.181a	c8		iny				iny
.181b	c9 d6		cmp #$d6			cmp 	#TKW_GOTO 					; was it if GOTO ?
.181d	f0 0c		beq $182b			beq 	_IfGoto 					; do the Goto code
.181f	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows the THEN ?
.1821	29 c0		and #$c0			and 	#$C0 						; check $40-$7F
.1823	c9 40		cmp #$40			cmp 	#$40 						; e.g. number IF x = 0 THEN 170
.1825	f0 04		beq $182b			beq 	_IfGoto
.1827	60		rts				rts 								; else continue on this line.
.1828					_IfEOL:
.1828	4c 89 1f	jmp $1f89			jmp 	AdvanceNextLine 			; go to next line
.182b					_IfGoto:
.182b	4c fe 1f	jmp $1ffe			jmp 	CommandGoto
.182e					_IfComplex:
.182e	20 e9 2a	jsr $2ae9			jsr 	MInt32Zero 					; is it true ?
.1831	f0 01		beq $1834			beq 	_IFSkip 					; if non-zero then skip to ELSE/ENDIF
.1833	60		rts				rts 								; else continue.
.1834					_IFSkip:
.1834	a9 d3		lda #$d3			lda	 	#TKW_ELSE 					; test failed, go to ELSE or ENDIF whichever comes first.
.1836	a2 a2		ldx #$a2			ldx 	#TKW_ENDIF
.1838	4c 75 2b	jmp $2b75			jmp		ScanForward
.183b					Command_ELSE:
.183b	a2 a2		ldx #$a2			ldx 	#TKW_ENDIF
.183d	8a		txa				txa
.183e	4c 75 2b	jmp $2b75			jmp		ScanForward
.1841					Command_ENDIF:
.1841	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/input.asm

=32					MaxInputSize = 32
.0be2					InputBuffer:
>0be2							.fill 	MaxInputSize+1
.1842					Command_Input:
.1842	b1 28		lda ($28),y			lda 	(codePtr),y 			; see what's next.
.1844	c8		iny				iny
.1845	c9 c8		cmp #$c8			cmp 	#TKW_COMMA 				; ignore commas.
.1847	f0 f9		beq $1842			beq 	Command_Input
.1849	88		dey				dey 							; undo consume
.184a	c9 c7		cmp #$c7			cmp 	#TKW_COLON
.184c	f0 54		beq $18a2			beq 	_CIExit 				; : or EOL, exit
.184e	c9 80		cmp #$80			cmp 	#TOK_EOL
.1850	f0 50		beq $18a2			beq 	_CIExit
.1852	c9 40		cmp #$40			cmp 	#$40 					; variable ?
.1854	90 12		bcc $1868			bcc 	_CIVariable
.1856	c9 85		cmp #$85			cmp 	#TOK_STR 				; if not quoted string syntax error.
.1858	d0 43		bne $189d			bne 	_CISyntax
.185a	a2 00		ldx #$00			ldx 	#0
.185c	20 55 25	jsr $2555			jsr 	EvaluateString 			; evaluate and print string
.185f	20 68 19	jsr $1968			jsr 	TOSToTemp0
.1862	20 12 1c	jsr $1c12			jsr 	PrintString
.1865	4c 42 18	jmp $1842			jmp 	Command_Input
.1868					_CIVariable:
.1868	a2 00		ldx #$00			ldx 	#0 						; evaluate a reference.
.186a	20 93 25	jsr $2593			jsr 	EvaluateReference  		; this is where its going
.186d					_CIRetry:
.186d	a9 3f		lda #$3f			lda 	#"?"					; print prompt
.186f	a2 12		ldx #$12		ldx	#18
.1871	20 59 11	jsr $1159		jsr	deviceHandler
.1874	98		tya				tya
.1875	48		pha				pha
.1876	20 b6 18	jsr $18b6			jsr 	InputString 			; input a string (manually)
.1879	a2 01		ldx #$01			ldx 	#1
.187b	20 a3 18	jsr $18a3			jsr 	BufferToStackX 			; make stack,x ref input string.
.187e	a5 40		lda $40				lda 	esType 					; if target type numeric
.1880	29 40		and #$40			and 	#$40 					; then convert to number
.1882	d0 11		bne $1895			bne 	_CIWrite
.1884	a2 01		ldx #$01			ldx 	#1
.1886	20 68 19	jsr $1968			jsr 	TOSToTemp0 				; string address in temp0, goes here.
.1889	a9 0a		lda #$0a			lda 	#10
.188b	20 30 29	jsr $2930			jsr 	MInt32FromString 		; convert it back from a string.
.188e	68		pla				pla
.188f	a8		tay				tay
.1890	b0 03		bcs $1895			bcs 	_CIWrite 				; successfully converted.
.1892	18		clc				clc 							; default fail FP conversion
.1893	90 d8		bcc $186d			bcc		_CIRetry				; failed, try again.
.1895					_CIWrite:
.1895	a2 00		ldx #$00			ldx 	#0
.1897	20 06 19	jsr $1906			jsr 	WriteValue
.189a	4c 42 18	jmp $1842			jmp 	Command_Input
.189d					_CISyntax:
.189d	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.189f	20 76 11	jsr $1176		jsr	errorHandler
.18a2					_CIExit:
.18a2	60		rts				rts
.18a3					BufferToStackX:
.18a3	a9 e2		lda #$e2			lda 	#InputBuffer & $FF
.18a5	95 48		sta $48,x			sta 	esInt0,x
.18a7	a9 0b		lda #$0b			lda 	#InputBuffer >> 8
.18a9	95 50		sta $50,x			sta 	esInt1,x
.18ab	a9 00		lda #$00			lda 	#0
.18ad	95 58		sta $58,x			sta 	esInt2,x
.18af	95 60		sta $60,x			sta 	esInt3,x
.18b1	a9 40		lda #$40			lda 	#$40
.18b3	95 40		sta $40,x			sta 	esType,x
.18b5	60		rts				rts
.18b6					InputString:
.18b6	a9 00		lda #$00			lda 	#0
.18b8	8d e2 0b	sta $0be2			sta 	InputBuffer
.18bb					_InputLoop:
.18bb	a2 08		ldx #$08		ldx	#8
.18bd	20 59 11	jsr $1159		jsr	deviceHandler
.18c0	c9 00		cmp #$00			cmp 	#0
.18c2	f0 f7		beq $18bb			beq 	_InputLoop
.18c4	c9 08		cmp #$08			cmp 	#8
.18c6	f0 19		beq $18e1			beq 	_InputBackspace
.18c8	c9 0d		cmp #$0d			cmp 	#13
.18ca	f0 21		beq $18ed			beq 	_InputExit
.18cc	ae e2 0b	ldx $0be2			ldx 	InputBuffer
.18cf	e0 20		cpx #$20			cpx 	#MaxInputSize 			; too many characters
.18d1	f0 e8		beq $18bb			beq 	_InputLoop
.18d3	9d e3 0b	sta $0be3,x			sta 	InputBuffer+1,x 		; write char
.18d6	ee e2 0b	inc $0be2			inc 	InputBuffer 			; advance count.
.18d9					_InputPrintLoop:
.18d9	a2 12		ldx #$12		ldx	#18
.18db	20 59 11	jsr $1159		jsr	deviceHandler
.18de	4c bb 18	jmp $18bb			jmp	 	_InputLoop
.18e1					_InputBackspace:
.18e1	ad e2 0b	lda $0be2			lda 	InputBuffer 			; at start
.18e4	f0 d5		beq $18bb			beq 	_InputLoop
.18e6	ce e2 0b	dec $0be2			dec 	InputBuffer
.18e9	a9 08		lda #$08			lda 	#8
.18eb	d0 ec		bne $18d9			bne 	_InputPrintLoop
.18ed					_InputExit:
.18ed	a2 02		ldx #$02		ldx	#2
.18ef	20 59 11	jsr $1159		jsr	deviceHandler
.18f2	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/let.asm

.18f3					CommandLet:
.18f3	a2 00		ldx #$00			ldx 	#0  						; get address to write.
.18f5	20 93 25	jsr $2593			jsr 	EvaluateReference
.18f8	a9 8d		lda #$8d			lda 	#TKW_EQUAL 					; check for equals
.18fa	20 2a 2b	jsr $2b2a			jsr 	CheckToken
.18fd	e8		inx				inx 								; do RHS
.18fe	20 41 25	jsr $2541			jsr 	Evaluate 					; evaluate and dereference
.1901	ca		dex				dex
.1902	20 06 19	jsr $1906			jsr 	WriteValue 					; write it out
.1905	60		rts				rts
.1906					WriteValue:
.1906	98		tya				tya
.1907	48		pha				pha
.1908	20 68 19	jsr $1968			jsr 	TOSToTemp0 					; set temp0 to point to target address.
.190b	b5 40		lda $40,x			lda 	esType,x 					; check the string flags match
.190d	55 41		eor $41,x			eor 	esType+1,x 					; one string, one number causes an error.
.190f	29 40		and #$40			and 	#$40
.1911	d0 50		bne $1963			bne		_WVType
.1913	a0 01		ldy #$01			ldy 	#1 							; for string, copy 0 and 1.
.1915	b5 40		lda $40,x			lda 	esType,x 					; check for string assignment
.1917	29 40		and #$40			and 	#$40
.1919	d0 1f		bne $193a			bne 	_WVCopyString
.191b	b5 40		lda $40,x			lda 	esType,x 					; check both are integer.
.191d	15 41		ora $41,x			ora 	esType+1,x
.191f	4a		lsr a				lsr 	a
.1920	90 22		bcc $1944			bcc 	_WVCopyData4 				; copy 4 data bytes.
.1922	b5 40		lda $40,x			lda 	esType,x
.1924	4a		lsr a				lsr 	a
.1925	90 3c		bcc $1963			bcc 	_WVType
.1927	e8		inx				inx 								; force the value being written to be a float.
.1928	20 ab 20	jsr $20ab			jsr 	BPMakeFloat
.192b	ca		dex				dex
.192c	20 68 19	jsr $1968			jsr 	TOSToTemp0 					; set Temp0 to write address
.192f	e8		inx				inx
.1930	8a		txa				txa
.1931	a2 20		ldx #$20		ldx	#32
.1933	20 a8 14	jsr $14a8		jsr	floatingpointHandler
.1936	aa		tax				tax
.1937	4c 60 19	jmp $1960			jmp 	_WVCopyExit
.193a					_WVCopyString:
.193a	8a		txa				txa
.193b	a2 0c		ldx #$0c		ldx	#12
.193d	20 f2 2e	jsr $2ef2		jsr	stringHandler
.1940	aa		tax				tax
.1941	4c 60 19	jmp $1960			jmp 	_WVCopyExit
.1944					_WVCopyData4:
.1944	b5 40		lda $40,x			lda 	esType,x 					; is the int ref a byte ref ?
.1946	29 20		and #$20			and 	#$20 						; (e.g. is bit 5 set)
.1948	d0 10		bne $195a			bne 	_WVCopyData1
.194a	a0 03		ldy #$03			ldy 	#3
.194c	b5 61		lda $61,x			lda 	esInt3+1,x
.194e	91 2a		sta ($2a),y			sta 	(temp0),y
.1950	88		dey				dey
.1951	b5 59		lda $59,x			lda 	esInt2+1,x
.1953	91 2a		sta ($2a),y			sta 	(temp0),y
.1955	88		dey				dey
.1956	b5 51		lda $51,x			lda 	esInt1+1,x
.1958	91 2a		sta ($2a),y			sta 	(temp0),y
.195a					_WVCopyData1:
.195a	a0 00		ldy #$00			ldy 	#0
.195c	b5 49		lda $49,x			lda 	esInt0+1,x
.195e	91 2a		sta ($2a),y			sta 	(temp0),y
.1960					_WVCopyExit:
.1960	68		pla				pla
.1961	a8		tay				tay
.1962	60		rts				rts
.1963					_WVType:
.1963	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.1965	20 76 11	jsr $1176		jsr	errorHandler
.1968					TOSToTemp0:
.1968	b5 48		lda $48,x			lda 	esInt0,x
.196a	85 2a		sta $2a				sta 	temp0
.196c	b5 50		lda $50,x			lda 	esInt1,x
.196e	85 2b		sta $2b				sta 	temp0+1
.1970	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/list.asm

.1971					CommandList:
.1971	a2 00		ldx #$00			ldx		#0 							; set start/end lines in stack 0/1 to 0 and $FFFF
.1973	20 c2 2a	jsr $2ac2			jsr 	MInt32False
.1976	e8		inx				inx
.1977	20 be 2a	jsr $2abe			jsr 	MInt32True
.197a	b1 28		lda ($28),y			lda 	(codePtr),y 				; look at first token
.197c	c9 c8		cmp #$c8			cmp 	#TKW_COMMA 					; list ,xxxx
.197e	f0 15		beq $1995			beq 	_CLEndLine
.1980	c9 00		cmp #$00			cmp 	#0 							; list ... on its own.
.1982	30 1b		bmi $199f			bmi 	_CLDoListing 				; do the whole lot.
.1984	a2 00		ldx #$00			ldx 	#0 							; get start line at stack:0
.1986	20 60 25	jsr $2560			jsr 	EvaluateInteger
.1989	b1 28		lda ($28),y			lda 	(codePtr),y 				; , follows ?
.198b	c9 c8		cmp #$c8			cmp 	#TKW_COMMA
.198d	f0 06		beq $1995			beq 	_CLEndLine
.198f	20 00 2a	jsr $2a00			jsr 	MInt32CopyUp 				; copy first to second if just a line number on its
.1992	4c 9f 19	jmp $199f			jmp 	_CLDoListing 				; own e.g. list 1100
.1995					_CLEndLine:
.1995	c8		iny				iny 								; skip comma
.1996	b1 28		lda ($28),y			lda 	(codePtr),y  				; no number follows, then its list 1000,
.1998	30 05		bmi $199f			bmi 	_CLDoListing
.199a	a2 01		ldx #$01			ldx 	#1 							; get the last line to list
.199c	20 60 25	jsr $2560			jsr 	EvaluateInteger				; get end
.199f					_CLDoListing:
.199f	20 b7 1d	jsr $1db7			jsr 	ResetCodeAddress 			; back to the start.
.19a2					_CLCheckLoop:
.19a2	a0 00		ldy #$00			ldy 	#0							; check end.
.19a4	b1 28		lda ($28),y			lda 	(codePtr),y
.19a6	f0 26		beq $19ce			beq 	_CLEnd
.19a8	a2 00		ldx #$00			ldx 	#0 							; compare vs lower.
.19aa	20 d1 19	jsr $19d1			jsr 	CLCompareLineTOS
.19ad	c9 ff		cmp #$ff			cmp 	#255 						; if < skip
.19af	f0 0d		beq $19be			beq 	_CLNext
.19b1	e8		inx				inx
.19b2	20 d1 19	jsr $19d1			jsr 	CLCompareLineTOS 			; compare vs higher
.19b5	c9 01		cmp #$01			cmp 	#1
.19b7	f0 05		beq $19be			beq 	_CLNext
.19b9	a2 02		ldx #$02		ldx	#2
.19bb	20 a1 35	jsr $35a1		jsr	tokeniserHandler
.19be					_CLNext:
.19be	a0 00		ldy #$00			ldy 	#0 							; go to next line.
.19c0	b1 28		lda ($28),y			lda 	(codePtr),y
.19c2	18		clc				clc
.19c3	65 28		adc $28				adc 	codePtr
.19c5	85 28		sta $28				sta 	codePtr
.19c7	90 d9		bcc $19a2			bcc 	_CLCheckLoop
.19c9	e6 29		inc $29				inc 	codePtr+1
.19cb	4c a2 19	jmp $19a2			jmp 	_CLCheckLoop
.19ce					_CLEnd:
.19ce	4c 70 2b	jmp $2b70			jmp 	WarmStart 					; warm start after list.
.19d1					CLCompareLineTOS:
.19d1	a0 01		ldy #$01			ldy 	#1
.19d3	b1 28		lda ($28),y			lda 	(codePtr),y
.19d5	55 48		eor $48,x			eor 	esInt0,x
.19d7	85 2a		sta $2a				sta 	temp0
.19d9	c8		iny				iny
.19da	b1 28		lda ($28),y			lda 	(codePtr),y
.19dc	55 50		eor $50,x			eor 	esInt1,x
.19de	05 2a		ora $2a				ora 	temp0
.19e0	f0 10		beq $19f2			beq 	_CLCLTExit
.19e2	88		dey				dey
.19e3	b1 28		lda ($28),y			lda 	(codePtr),y
.19e5	d5 48		cmp $48,x			cmp 	esInt0,x
.19e7	c8		iny				iny
.19e8	b1 28		lda ($28),y			lda 	(codePtr),y
.19ea	f5 50		sbc $50,x			sbc 	esInt1,x
.19ec	a9 ff		lda #$ff			lda 	#255
.19ee	90 02		bcc $19f2			bcc 	_CLCLTExit
.19f0	a9 01		lda #$01			lda 	#1
.19f2					_CLCLTExit:
.19f2	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/loadsave.asm

.19f3					CommandLoad:
.19f3	20 1b 1a	jsr $1a1b			jsr 	CLSParameters 					; get parameters for load.
.19f6	08		php				php
.19f7	a2 0c		ldx #$0c		ldx	#12
.19f9	20 59 11	jsr $1159		jsr	deviceHandler
.19fc	28		plp				plp
.19fd	b0 08		bcs $1a07			bcs 	_CLExit 						; if CC then load a program, so warm start.
.19ff	20 8a 16	jsr $168a			jsr 	CommandClear
.1a02	a2 02		ldx #$02		ldx	#2
.1a04	20 75 16	jsr $1675		jsr	interactionHandler
.1a07					_CLExit
.1a07	60		rts				rts
.1a08					CommandSave:
.1a08	20 1b 1a	jsr $1a1b			jsr 	CLSParameters					; get parameters for save
.1a0b	90 08		bcc $1a15			bcc 	_CSNoOverrideAddress
.1a0d	20 42 2b	jsr $2b42			jsr 	CheckComma 						; should be a comma.
.1a10	a2 02		ldx #$02			ldx 	#2
.1a12	20 60 25	jsr $2560			jsr 	EvaluateInteger 				; get save end address.
.1a15					_CSNoOverrideAddress:
.1a15	a2 14		ldx #$14		ldx	#20
.1a17	20 59 11	jsr $1159		jsr	deviceHandler
.1a1a	60		rts				rts
.1a1b					CLSParameters:
.1a1b	a2 00		ldx #$00			ldx 	#0 								; string
.1a1d	20 55 25	jsr $2555			jsr 	EvaluateString
.1a20	e8		inx				inx 									; erase out +1 +2
.1a21	20 c2 2a	jsr $2ac2			jsr 	MInt32False
.1a24	e8		inx				inx
.1a25	20 c2 2a	jsr $2ac2			jsr 	MInt32False
.1a28	ad c8 0a	lda $0ac8			lda 	basePage 						; default start address.
.1a2b	85 49		sta $49				sta 	esInt0+1
.1a2d	ad c9 0a	lda $0ac9			lda 	basePage+1
.1a30	85 51		sta $51				sta 	esInt1+1
.1a32	ad ca 0a	lda $0aca			lda 	endProgram 						; default end address
.1a35	85 4a		sta $4a				sta 	esInt0+2
.1a37	ad cb 0a	lda $0acb			lda 	endProgram+1
.1a3a	85 52		sta $52				sta 	esInt1+2
.1a3c	b1 28		lda ($28),y			lda 	(codePtr),y 					; , following
.1a3e	c9 c8		cmp #$c8			cmp 	#TKW_COMMA
.1a40	d0 08		bne $1a4a			bne 	_CLSDefault
.1a42	c8		iny				iny 									; skip comma
.1a43	a2 01		ldx #$01			ldx 	#1 								; get numeric value.
.1a45	20 60 25	jsr $2560			jsr 	EvaluateInteger
.1a48	38		sec				sec
.1a49	60		rts				rts
.1a4a					_CLSDefault:
.1a4a	18		clc				clc
.1a4b	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/local.asm

.0c03					storeSize:
>0c03							.fill 	1
.1a4c					CommandLocal:
.1a4c	a2 00		ldx #$00			ldx 	#0
.1a4e	20 6a 1a	jsr $1a6a			jsr 	LocaliseVariable 			; localise one.
.1a51					_CLCheckNext:
.1a51	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows ?
.1a53	c8		iny				iny
.1a54	c9 8d		cmp #$8d			cmp 	#TKW_EQUAL 					; something local "x = 2" ?
.1a56	f0 06		beq $1a5e			beq 	_CLAssignment
.1a58	c9 c8		cmp #$c8			cmp 	#TKW_COMMA 					; comma try again.
.1a5a	f0 f0		beq $1a4c			beq 	CommandLocal
.1a5c	88		dey				dey
.1a5d	60		rts				rts
.1a5e					_CLAssignment:
.1a5e	a2 01		ldx #$01			ldx 	#1
.1a60	20 41 25	jsr $2541			jsr 	Evaluate 					; evaluate RHS
.1a63	ca		dex				dex
.1a64	20 06 19	jsr $1906			jsr 	WriteValue
.1a67	4c 51 1a	jmp $1a51			jmp 	_CLCheckNext
.1a6a					LocaliseVariable:
.1a6a	b1 28		lda ($28),y			lda 	(codePtr),y 				; check it's a variable.
.1a6c	c9 40		cmp #$40			cmp 	#$40
.1a6e	b0 67		bcs $1ad7			bcs 	_LVSyntax
.1a70	8a		txa				txa 								; get the address of that variable.
.1a71	a2 00		ldx #$00		ldx	#0
.1a73	20 9a 38	jsr $389a		jsr	variableHandler
.1a76	aa		tax				tax
.1a77	8a		txa				txa
.1a78	48		pha				pha
.1a79	98		tya				tya
.1a7a	48		pha				pha
.1a7b	20 68 19	jsr $1968			jsr 	TOSToTemp0 					; the address of the variable is now in temp0.
.1a7e	b5 40		lda $40,x			lda 	esType,x 					; get the type
.1a80	0a		asl a				asl 	a
.1a81	10 16		bpl $1a99			bpl 	_LVPushNumber
.1a83	a0 00		ldy #$00			ldy 	#0 							; put address of data in temp1
.1a85	b1 2a		lda ($2a),y			lda 	(temp0),y
.1a87	c8		iny				iny
.1a88	85 2c		sta $2c				sta 	temp1
.1a8a	b1 2a		lda ($2a),y			lda 	(temp0),y
.1a8c	85 2d		sta $2d				sta 	temp1+1
.1a8e	a0 00		ldy #$00			ldy 	#0 	 						; get length
.1a90	b1 2c		lda ($2c),y			lda 	(temp1),y
.1a92	aa		tax				tax 								; into X
.1a93	e8		inx				inx 								; +1 for length.
.1a94	a9 24		lda #$24			lda 	#markerString
.1a96	4c ae 1a	jmp $1aae			jmp 	_LVWriteFrame
.1a99					_LVPushNumber:
.1a99	a5 2a		lda $2a				lda 	temp0 						; storage address and data source are the same
.1a9b	85 2c		sta $2c				sta 	temp1
.1a9d	a5 2b		lda $2b				lda 	temp0+1
.1a9f	85 2d		sta $2d				sta 	temp1+1
.1aa1	b5 40		lda $40,x			lda 	esType,x 					; put float flag into carry.
.1aa3	4a		lsr a				lsr 	a
.1aa4	a9 25		lda #$25			lda 	#markerInt 					; get marker and size.
.1aa6	a2 04		ldx #$04			ldx 	#VarISize
.1aa8	90 04		bcc $1aae			bcc 	_LVIsInteger
.1aaa	a9 23		lda #$23			lda 	#markerFloat
.1aac	a2 06		ldx #$06			ldx 	#VarFSize
.1aae					_LVIsInteger:
.1aae					_LVWriteFrame:
.1aae	8e 03 0c	stx $0c03			stx 	storeSize 					; number of bytes to copy from (temp0)
.1ab1	e8		inx				inx 								; allocate 3 bytes, 2 for the address, 1 for the marker.
.1ab2	e8		inx				inx
.1ab3	e8		inx				inx
.1ab4	20 f7 2b	jsr $2bf7			jsr 	RSClaim 					; create the stack frame.
.1ab7	a5 2a		lda $2a				lda 	temp0 						; copy the target address to slots 1 & 2
.1ab9	a0 01		ldy #$01			ldy 	#1
.1abb	91 78		sta ($78),y			sta 	(rsPointer),y
.1abd	c8		iny				iny
.1abe	a5 2b		lda $2b				lda 	temp0+1
.1ac0	91 78		sta ($78),y			sta 	(rsPointer),y
.1ac2	a0 00		ldy #$00			ldy 	#0
.1ac4					_LVCopyData:
.1ac4	b1 2c		lda ($2c),y			lda 	(temp1),y 					; get data from source, temp1
.1ac6	c8		iny				iny 								; write allowing for the header bit.
.1ac7	c8		iny				iny
.1ac8	c8		iny				iny
.1ac9	91 78		sta ($78),y			sta 	(rsPointer),y
.1acb	88		dey				dey
.1acc	88		dey				dey
.1acd	ce 03 0c	dec $0c03			dec 	storeSize 					; do it storesize times
.1ad0	d0 f2		bne $1ac4			bne 	_LVCopyData
.1ad2	68		pla				pla
.1ad3	a8		tay				tay
.1ad4	68		pla				pla
.1ad5	aa		tax				tax
.1ad6	60		rts				rts
.1ad7					_LVSyntax:
.1ad7	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.1ad9	20 76 11	jsr $1176		jsr	errorHandler
.1adc					RestoreLocals:
.1adc	a2 00		ldx #$00			ldx 	#0
.1ade	a1 78		lda ($78,x)			lda 	(rsPointer,x)
.1ae0	c9 40		cmp #$40			cmp	 	#64
.1ae2	90 01		bcc $1ae5			bcc 	_RLocal
.1ae4	60		rts				rts
.1ae5					_RLocal:
.1ae5	8a		txa				txa
.1ae6	48		pha				pha
.1ae7	98		tya				tya
.1ae8	48		pha				pha
.1ae9	a0 01		ldy #$01			ldy 	#1 							; copy target address to temp0
.1aeb	b1 78		lda ($78),y			lda 	(rsPointer),y
.1aed	85 2a		sta $2a				sta 	temp0
.1aef	c8		iny				iny
.1af0	b1 78		lda ($78),y			lda 	(rsPointer),y
.1af2	85 2b		sta $2b				sta 	temp0+1
.1af4	a0 00		ldy #$00			ldy 	#0 							; get type back.
.1af6	b1 78		lda ($78),y			lda 	(rsPointer),y
.1af8	c9 24		cmp #$24			cmp 	#markerString 				; string is ... different :)
.1afa	f0 28		beq $1b24			beq 	_RString
.1afc	a2 04		ldx #$04			ldx		#VARISize 					; size integer
.1afe	c9 25		cmp #$25			cmp 	#markerInt
.1b00	f0 02		beq $1b04			beq 	_RIsInteger
.1b02	a2 06		ldx #$06			ldx 	#VARFSize 					; size float
.1b04					_RIsInteger:
.1b04	8a		txa				txa
.1b05	48		pha				pha
.1b06	a0 03		ldy #$03			ldy 	#3							; start size to copy back from pointer.
.1b08					_RCopyBack:
.1b08	b1 78		lda ($78),y			lda 	(rsPointer),y
.1b0a	88		dey				dey
.1b0b	88		dey				dey
.1b0c	88		dey				dey
.1b0d	91 2a		sta ($2a),y			sta 	(temp0),y
.1b0f	c8		iny				iny
.1b10	c8		iny				iny
.1b11	c8		iny				iny
.1b12	c8		iny				iny
.1b13	ca		dex				dex
.1b14	d0 f2		bne $1b08			bne 	_RCopyBack
.1b16	68		pla				pla 								; get size add 3
.1b17	18		clc				clc
.1b18	69 03		adc #$03			adc 	#3 							; (2 for address one for marker)
.1b1a					_RRestoreAAndLoop:
.1b1a	20 19 2c	jsr $2c19			jsr 	RSFree
.1b1d	68		pla				pla
.1b1e	a8		tay				tay
.1b1f	68		pla				pla
.1b20	aa		tax				tax
.1b21	4c dc 1a	jmp $1adc			jmp 	RestoreLocals 				; go see if there are any more locals.
.1b24					_RString:
.1b24	a2 00		ldx #$00			ldx 	#0
.1b26	a0 01		ldy #$01			ldy 	#1 							; set up for a string write.
.1b28	b1 78		lda ($78),y			lda 	(rsPointer),y
.1b2a	95 48		sta $48,x			sta 	esInt0,x
.1b2c	c8		iny				iny
.1b2d	b1 78		lda ($78),y			lda 	(rsPointer),y
.1b2f	95 50		sta $50,x			sta 	esInt1,x
.1b31	18		clc				clc
.1b32	a5 78		lda $78				lda 	rsPointer
.1b34	69 03		adc #$03			adc 	#3
.1b36	95 49		sta $49,x			sta 	esInt0+1,x
.1b38	a5 79		lda $79				lda 	rsPointer+1
.1b3a	69 00		adc #$00			adc 	#0
.1b3c	95 51		sta $51,x			sta 	esInt1+1,x
.1b3e	8a		txa				txa
.1b3f	a2 0c		ldx #$0c		ldx	#12
.1b41	20 f2 2e	jsr $2ef2		jsr	stringHandler
.1b44	a0 03		ldy #$03			ldy 	#3 							; get string length
.1b46	b1 78		lda ($78),y			lda 	(rsPointer),y
.1b48	18		clc				clc
.1b49	69 04		adc #$04			adc 	#4 							; add 4 (pointer, marker, length) to restore.
.1b4b	4c 1a 1b	jmp $1b1a			jmp 	_RRestoreAAndLoop

;******  Return to file: main/main.asm


;******  Processing file: main/commands/new.asm

.1b4e					Command_New:
.1b4e					Command_XNew:
.1b4e	20 b7 1d	jsr $1db7			jsr 	ResetCodeAddress 			; point to first line
.1b51	a0 00		ldy #$00			ldy 	#0 							; and zap it.
.1b53	98		tya				tya
.1b54	91 28		sta ($28),y			sta 	(codePtr),y
.1b56	20 8a 16	jsr $168a			jsr 	CommandClear 				; clear everything down.
.1b59	4c 83 1f	jmp $1f83			jmp 	CommandEND 					; do END code, as there's nothing to run.

;******  Return to file: main/main.asm


;******  Processing file: main/commands/poke.asm

.1b5c					Command_Poke:
.1b5c	a9 01		lda #$01			lda 	#1
.1b5e	d0 06		bne $1b66			bne 	PokeGeneral
.1b60					Command_Doke:
.1b60	a9 02		lda #$02			lda 	#2
.1b62	d0 02		bne $1b66			bne 	PokeGeneral
.1b64					Command_Loke:
.1b64	a9 03		lda #$03			lda 	#3
.1b66					PokeGeneral:
.1b66	48		pha				pha 								; save id (PDL = 123)
.1b67	20 5e 25	jsr $255e			jsr 	EvaluateRootInteger 		; target address
.1b6a	20 42 2b	jsr $2b42			jsr	 	CheckComma
.1b6d	e8		inx				inx
.1b6e	20 60 25	jsr $2560			jsr 	EvaluateInteger 			; what value to POKE ?
.1b71	ca		dex				dex
.1b72	20 68 19	jsr $1968			jsr 	TOSToTemp0 					; temp0 points to the target address
.1b75	84 32		sty $32				sty 	tempShort 					; save Y
.1b77	68		pla				pla 								; get copy type (1-3) and dispatch
.1b78	aa		tax				tax
.1b79	ca		dex				dex
.1b7a	f0 14		beq $1b90			beq 	_Poke1
.1b7c	ca		dex				dex
.1b7d	f0 0b		beq $1b8a			beq 	_Poke2
.1b7f	a0 03		ldy #$03			ldy 	#3							; put 4 bytes
.1b81	a5 61		lda $61				lda 	esInt3+1
.1b83	91 2a		sta ($2a),y			sta 	(temp0),y
.1b85	88		dey				dey
.1b86	a5 59		lda $59				lda 	esInt2+1
.1b88	91 2a		sta ($2a),y			sta 	(temp0),y
.1b8a					_Poke2:
.1b8a	a0 01		ldy #$01			ldy 	#1
.1b8c	a5 51		lda $51				lda 	esInt1+1
.1b8e	91 2a		sta ($2a),y			sta 	(temp0),y
.1b90					_Poke1:
.1b90	a0 00		ldy #$00			ldy 	#0
.1b92	a5 49		lda $49				lda 	esInt0+1
.1b94	91 2a		sta ($2a),y			sta 	(temp0),y
.1b96	a4 32		ldy $32				ldy 	tempShort 					; restore Y and exit
.1b98	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/print.asm

.0c04					lastPrintToken:
>0c04							.fill 	1
.1b99					Command_Print:
.1b99	a9 00		lda #$00			lda 	#0 							; clear LPT to a non token
.1b9b	8d 04 0c	sta $0c04			sta 	lastPrintToken
.1b9e	88		dey				dey
.1b9f					_PrintLoopSkip:
.1b9f	c8		iny				iny
.1ba0					_PrintLoop:
.1ba0	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows
.1ba2	c9 80		cmp #$80			cmp 	#TOK_EOL  					; done if end of line or colon
.1ba4	f0 5b		beq $1c01			beq 	_PrintExit
.1ba6	c9 c7		cmp #$c7			cmp 	#TKW_COLON
.1ba8	f0 57		beq $1c01			beq 	_PrintExit
.1baa	8d 04 0c	sta $0c04			sta 	lastPrintToken 				; update Last print token, so we check ; and ,
.1bad	c9 c9		cmp #$c9			cmp 	#TKW_SEMICOLON 				; ignore semicolon
.1baf	f0 ee		beq $1b9f			beq 	_PrintLoopSkip
.1bb1	c9 ca		cmp #$ca			cmp 	#TKW_QUOTE 					; ' is new line
.1bb3	f0 3c		beq $1bf1			beq	 	_PrintNewLine
.1bb5	c9 c8		cmp #$c8			cmp 	#TKW_COMMA 					; , is print tab
.1bb7	f0 40		beq $1bf9			beq 	_PrintTab
.1bb9	20 3f 25	jsr $253f			jsr 	EvaluateRoot 				; evaluate something at the root
.1bbc	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.1bbe	85 2a		sta $2a				sta 	temp0
.1bc0	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.1bc2	85 2b		sta $2b				sta 	1+(temp0)
.1bc4	a5 40		lda $40				lda 	esType 						; get type
.1bc6	f0 15		beq $1bdd			beq		_PrintInteger
.1bc8	4a		lsr a				lsr 	a 							; check for floating point
.1bc9	b0 08		bcs $1bd3			bcs 	_PrintFloat
.1bcb					_PrintString:
.1bcb	a2 00		ldx #$00			ldx 	#0 							; bottom string to temp0
.1bcd	20 68 19	jsr $1968			jsr 	TOSToTemp0
.1bd0	4c eb 1b	jmp $1beb			jmp 	_PrintTemp0 				; print no leading space.
.1bd3					_PrintFloat:
.1bd3	a9 00		lda #$00			lda 	#0 							; stack level.
.1bd5	a2 14		ldx #$14		ldx	#20
.1bd7	20 a8 14	jsr $14a8		jsr	floatingpointHandler
.1bda	4c e4 1b	jmp $1be4			jmp 	_PrintSpaceTemp0
.1bdd					_PrintInteger:
.1bdd	a9 8a		lda #$8a			lda 	#10+$80 					; base 10 signed
.1bdf	a2 00		ldx #$00			ldx 	#0 							; bottom stack element
.1be1	20 18 2a	jsr $2a18			jsr 	MInt32ToString				; convert to text
.1be4					_PrintSpaceTemp0:
.1be4	a9 20		lda #$20			lda 	#32
.1be6	a2 12		ldx #$12		ldx	#18
.1be8	20 59 11	jsr $1159		jsr	deviceHandler
.1beb					_PrintTemp0:
.1beb	20 12 1c	jsr $1c12			jsr 	PrintString
.1bee	4c a0 1b	jmp $1ba0			jmp 	_PrintLoop
.1bf1					_PrintNewLine:
.1bf1	a2 02		ldx #$02		ldx	#2
.1bf3	20 59 11	jsr $1159		jsr	deviceHandler
.1bf6	4c 9f 1b	jmp $1b9f			jmp 	_PrintLoopSkip
.1bf9					_PrintTab:
.1bf9	a2 16		ldx #$16		ldx	#22
.1bfb	20 59 11	jsr $1159		jsr	deviceHandler
.1bfe	4c 9f 1b	jmp $1b9f			jmp 	_PrintLoopSkip
.1c01					_PrintExit:
.1c01	ad 04 0c	lda $0c04			lda		lastPrintToken 				; check last token
.1c04	c9 c9		cmp #$c9			cmp 	#TKW_SEMICOLON 				; if , or ; do not print NL
.1c06	f0 09		beq $1c11			beq 	_PrintExit2
.1c08	c9 c8		cmp #$c8			cmp 	#TKW_COMMA
.1c0a	f0 05		beq $1c11			beq 	_PrintExit2
.1c0c	a2 02		ldx #$02		ldx	#2
.1c0e	20 59 11	jsr $1159		jsr	deviceHandler
.1c11					_PrintExit2:
.1c11	60		rts				rts
.1c12					PrintString:
.1c12	8a		txa				txa
.1c13	48		pha				pha
.1c14	98		tya				tya
.1c15	48		pha				pha
.1c16	a0 00		ldy #$00			ldy 	#0							; get length
.1c18	b1 2a		lda ($2a),y			lda 	(temp0),y
.1c1a	aa		tax				tax 								; into X
.1c1b	e0 00		cpx #$00	_PSLoop:cpx 	#0 							; finished ?
.1c1d	f0 10		beq $1c2f			beq 	_PSExit
.1c1f	ca		dex				dex
.1c20	8a		txa				txa
.1c21	48		pha				pha
.1c22	c8		iny				iny
.1c23	b1 2a		lda ($2a),y			lda 	(temp0),y
.1c25	a2 12		ldx #$12		ldx	#18
.1c27	20 59 11	jsr $1159		jsr	deviceHandler
.1c2a	68		pla				pla
.1c2b	aa		tax				tax
.1c2c	4c 1b 1c	jmp $1c1b			jmp 	_PSLoop
.1c2f					_PSExit:
.1c2f	68		pla				pla
.1c30	a8		tay				tay
.1c31	68		pla				pla
.1c32	aa		tax				tax
.1c33	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/proc.asm

.0c05					paramCount:
>0c05							.fill 	1
.1c34					CallProc:
.1c34	20 a8 1e	jsr $1ea8			jsr 	FindProcedure 				; find procedure, put in temp0. A contains name length.
.1c37	48		pha				pha 								; save length on stack
.1c38	85 32		sta $32				sta 	tempShort 					; save length in tempShort
.1c3a	a5 2b		lda $2b				lda 	temp0+1 					; save procedure target on stack.
.1c3c	48		pha				pha
.1c3d	a5 2a		lda $2a				lda 	temp0
.1c3f	48		pha				pha
.1c40	98		tya				tya 								; calculate Y + length
.1c41	18		clc				clc
.1c42	65 32		adc $32				adc 	tempShort
.1c44	a8		tay				tay
.1c45	a2 00		ldx #$00			ldx 	#0 							; where the first parameter goes - 1
.1c47					_CallProcEvalParams:
.1c47	e8		inx				inx
.1c48	b1 28		lda ($28),y			lda 	(codePtr),y 				; do we have ) , e.g. the end of the parameters ?
.1c4a	c9 c6		cmp #$c6			cmp 	#TKW_RPAREN
.1c4c	f0 0b		beq $1c59			beq 	_CPDoneParams
.1c4e	20 41 25	jsr $2541			jsr 	Evaluate 					; evaluate a parameter
.1c51	b1 28		lda ($28),y			lda 	(codePtr),Y 				; get what's next, preconsume
.1c53	c8		iny				iny
.1c54	c9 c8		cmp #$c8			cmp 	#TKW_COMMA 					; if comma, go get another parameter
.1c56	f0 ef		beq $1c47			beq 	_CallProcEvalParams
.1c58	88		dey				dey 								; undo consumption.
.1c59					_CPDoneParams:
.1c59	20 35 2b	jsr $2b35			jsr 	CheckRightParen 			; check closing parenthesis.
.1c5c	8e 05 0c	stx $0c05			stx 	paramCount 					; store parameter count+1
.1c5f	a2 04		ldx #$04			ldx 	#4							; make space on stack
.1c61	a9 50		lda #$50			lda 	#markerPROC
.1c63	20 f7 2b	jsr $2bf7			jsr 	RSClaim
.1c66	a9 01		lda #$01			lda 	#1 							; store return address.
.1c68	20 23 2c	jsr $2c23			jsr 	RSSavePosition
.1c6b	68		pla				pla 								; get the new code Ptr
.1c6c	85 28		sta $28				sta 	codePtr
.1c6e	68		pla				pla
.1c6f	85 29		sta $29				sta 	codePtr+1
.1c71	68		pla				pla 								; length of name + 4 is the param start.
.1c72	18		clc				clc
.1c73	69 04		adc #$04			adc 	#4
.1c75	a8		tay				tay
.1c76	a2 ff		ldx #$ff			ldx 	#$FF
.1c78					_CPLoadParameters:
.1c78	e8		inx				inx 								; point to where the address should be loaded.
.1c79	ec 05 0c	cpx $0c05			cpx 	paramCount 					; too many parameters in definition ?
.1c7c	f0 1e		beq $1c9c			beq 	_CPParamError
.1c7e	b1 28		lda ($28),y			lda 	(codePtr),y					; what follows
.1c80	c9 c6		cmp #$c6			cmp 	#TKW_RPAREN 				; is it the right bracket
.1c82	f0 0e		beq $1c92			beq 	_CPParamComplete 			; done all the parameters, perhaps.
.1c84	20 6a 1a	jsr $1a6a			jsr 	LocaliseVariable 			; make following variable local, ref in tos,x
.1c87	20 06 19	jsr $1906			jsr 	WriteValue 					; copy the evaluated parameter into there.
.1c8a	b1 28		lda ($28),y			lda 	(codePtr),y 				; followed by a comma ?
.1c8c	c8		iny				iny
.1c8d	c9 c8		cmp #$c8			cmp 	#TKW_COMMA
.1c8f	f0 e7		beq $1c78			beq 	_CPLoadParameters
.1c91	88		dey				dey 								; no, unconsume and check for )
.1c92					_CPParamComplete:
.1c92	20 35 2b	jsr $2b35			jsr 	CheckRightParen 			; check )
.1c95	e8		inx				inx 								; check right number of parameters have been consumed
.1c96	ec 05 0c	cpx $0c05			cpx 	paramCount
.1c99	d0 01		bne $1c9c			bne 	_CPParamError
.1c9b	60		rts				rts
.1c9c					_CPParamError:
.1c9c	a2 18		ldx #$18			ldx 	#ErrorID_Params
.1c9e	20 76 11	jsr $1176		jsr	errorHandler
.1ca1					ReturnProc:
.1ca1	20 dc 1a	jsr $1adc			jsr 	RestoreLocals 				; get the locals back.
.1ca4	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.1ca6	a1 78		lda ($78,x)			lda 	(rsPointer,x)
.1ca8	c9 50		cmp #$50			cmp 	#markerPROC 						; does it match
.1caa	f0 05		beq $1cb1			beq 	_isok
.1cac	a2 12		ldx #$12			ldx 	#ErrorID_endProcErr
.1cae	20 76 11	jsr $1176		jsr	errorHandler
.1cb1					_isok:
.1cb1	a9 01		lda #$01			lda 	#1
.1cb3	20 36 2c	jsr $2c36			jsr 	RSLoadPosition 				; reload the position from offset 1.
.1cb6	a9 04		lda #$04			lda 	#4 							; throw 4 bytes from stack.
.1cb8	20 19 2c	jsr $2c19			jsr 	RSFree
.1cbb	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/readdata.asm

.0c06					dataPtr:
>0c06							.fill 	2
.0c08					dataIndex:
>0c08							.fill 	1
.1cbc					CommandRead:
.1cbc	a2 00		ldx #$00			ldx 	#0 							; get a reference to a variable in stack:0
.1cbe	20 93 25	jsr $2593			jsr 	EvaluateReference
.1cc1	20 02 1d	jsr $1d02			jsr 	SwapDPCP 					; use the data pointer.
.1cc4	b1 28		lda ($28),y			lda 	(codePtr),y 				; see where it is.
.1cc6	c8		iny				iny
.1cc7	c9 c8		cmp #$c8			cmp 	#TKW_COMMA 					; if it is on a comma, it is in data.
.1cc9	f0 07		beq $1cd2			beq 	_CRInData
.1ccb	88		dey				dey
.1ccc	a9 d9		lda #$d9			lda 	#TKW_DATA 					; scan forward to a DATA statement.
.1cce	aa		tax				tax
.1ccf	20 75 2b	jsr $2b75			jsr 	ScanForward
.1cd2					_CRInData:
.1cd2	a2 01		ldx #$01			ldx 	#1 							; evaluate a value at Stack,1
.1cd4	20 41 25	jsr $2541			jsr 	Evaluate
.1cd7	ca		dex				dex 								; and write the value.
.1cd8	20 06 19	jsr $1906			jsr 	WriteValue
.1cdb	20 02 1d	jsr $1d02			jsr 	SwapDPCP 					; get the code pointer back.
.1cde	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows ?
.1ce0	c8		iny				iny
.1ce1	c9 c8		cmp #$c8			cmp 	#TKW_COMMA 					; if comma, another variable
.1ce3	f0 d7		beq $1cbc			beq 	CommandRead
.1ce5	88		dey				dey
.1ce6	60		rts				rts
.1ce7					CommandData:
.1ce7	a9 80		lda #$80			lda 	#TOK_EOL 					; go forward to end of line or colon.
.1ce9	a2 c7		ldx #$c7			ldx 	#TKW_COLON
.1ceb	20 75 2b	jsr $2b75			jsr 	ScanForward
.1cee	88		dey				dey 								; ending on EOL is a scan issue, as it increments
.1cef	60		rts				rts
.1cf0					CommandRestore:
.1cf0	ad c8 0a	lda $0ac8			lda 	basePage
.1cf3	8d 06 0c	sta $0c06			sta 	dataPtr
.1cf6	ad c9 0a	lda $0ac9			lda 	basePage+1
.1cf9	8d 07 0c	sta $0c07			sta 	dataPtr+1
.1cfc	a9 03		lda #$03			lda 	#3
.1cfe	8d 08 0c	sta $0c08			sta 	dataIndex
.1d01	60		rts				rts
.1d02					SwapDPCP:
.1d02	8a		txa				txa
.1d03	48		pha				pha
.1d04	98		tya				tya 								; swap Y, DataIndex
.1d05	ac 08 0c	ldy $0c08			ldy 	DataIndex
.1d08	8d 08 0c	sta $0c08			sta 	DataIndex
.1d0b	a5 28		lda $28				lda 	codePtr 					; swap code/dataptr low
.1d0d	ae 06 0c	ldx $0c06			ldx 	dataptr
.1d10	8d 06 0c	sta $0c06			sta 	dataPtr
.1d13	86 28		stx $28				stx 	codePtr
.1d15	a5 29		lda $29				lda 	codePtr+1 					; swap code/dataptr high.
.1d17	ae 07 0c	ldx $0c07			ldx 	dataptr+1
.1d1a	8d 07 0c	sta $0c07			sta 	dataPtr+1
.1d1d	86 29		stx $29				stx 	codePtr+1
.1d1f	68		pla				pla
.1d20	aa		tax				tax
.1d21	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/rem.asm

.1d22					Command_Rem:
.1d22					Command_Rem2:
.1d22	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows
.1d24	c9 85		cmp #$85			cmp 	#TOK_STR 					; if it is a string then skip it.
.1d26	d0 06		bne $1d2e			bne 	_CRNotString
.1d28	c8		iny				iny
.1d29	98		tya				tya
.1d2a	38		sec				sec
.1d2b	71 28		adc ($28),y			adc 	(codePtr),y 				; get string size, add to Y, +1 for the length
.1d2d	a8		tay				tay
.1d2e					_CRNotString:
.1d2e	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/repeat.asm

.1d2f					Command_Repeat:
.1d2f	a2 04		ldx #$04			ldx 	#4 							; allocate 4 bytes on stack for REPEAT
.1d31	a9 52		lda #$52			lda 	#markerREPEAT 				; repeat marker allocate 4 bytes
.1d33	20 f7 2b	jsr $2bf7			jsr 	RSClaim
.1d36	a9 01		lda #$01			lda 	#1 							; save position at offset 1.
.1d38	20 23 2c	jsr $2c23			jsr 	RSSavePosition
.1d3b	60		rts				rts
.1d3c					Command_Until:
.1d3c	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.1d3e	a1 78		lda ($78,x)			lda 	(rsPointer,x)
.1d40	c9 52		cmp #$52			cmp 	#markerREPEAT 						; does it match
.1d42	f0 05		beq $1d49			beq 	_isok
.1d44	a2 0f		ldx #$0f			ldx 	#ErrorID_untilErr
.1d46	20 76 11	jsr $1176		jsr	errorHandler
.1d49					_isok:
.1d49	20 5e 25	jsr $255e			jsr 	EvaluateRootInteger 		; at the bottom.
.1d4c	20 e9 2a	jsr $2ae9			jsr 	MInt32Zero					; check if TOS zero
.1d4f	d0 06		bne $1d57			bne 	_CUExit
.1d51	a9 01		lda #$01			lda 	#1
.1d53	20 36 2c	jsr $2c36			jsr 	RSLoadPosition 				; reload the position from offset 1.
.1d56	60		rts				rts
.1d57					_CUExit:
.1d57	a9 04		lda #$04			lda 	#4 							; throw 4 bytes from stack.
.1d59	20 19 2c	jsr $2c19			jsr 	RSFree
.1d5c	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/run.asm

.1d5d					Command_Run:
.1d5d	a2 ff		ldx #$ff			ldx 	#$FF
.1d5f	9a		txs				txs
.1d60	20 8a 16	jsr $168a			jsr 	CommandClear 				; clear everything.
.1d63	20 b7 1d	jsr $1db7			jsr 	ResetCodeAddress 			; back to the start.
.1d66					Command_RunFrom:
.1d66	a0 03		ldy #$03			ldy 	#3 							; over offset/line #
.1d68					CRNextInstruction:
.1d68	64 7b		stz $7b				stz 	softMemAlloc+1
.1d6a	b1 28		lda ($28),y			lda 	(codePtr),y 				; get next token.
.1d6c	10 1c		bpl $1d8a			bpl 	_CRNotToken
.1d6e	c9 c6		cmp #$c6			cmp 	#TOK_TOKENS 				; if in the tokens then do that token.
.1d70	b0 0c		bcs $1d7e			bcs 	_CRExecute
.1d72	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST 				; unary is ignored.
.1d74	b0 4e		bcs $1dc4			bcs 	Unimplemented
.1d76	c9 99		cmp #$99			cmp 	#TOK_STRUCTST 				; execute structures.
.1d78	b0 04		bcs $1d7e			bcs 	_CRExecute
.1d7a	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; if one of the system tokens $80-$85 do that
.1d7c	b0 16		bcs $1d94			bcs 	_CRCheckIndirect 			; if in that unused range check for ! or ?
.1d7e					_CRExecute:
.1d7e	c8		iny				iny 								; consume it.
.1d7f	0a		asl a				asl 	a 							; double it, losing most significant bit.
.1d80	aa		tax				tax
.1d81	20 87 1d	jsr $1d87			jsr 	_CRRunRoutine 				; we want to do jsr (group0vectors,x)
.1d84	4c 68 1d	jmp $1d68			jmp 	CRNextInstruction
.1d87					_CRRunRoutine:
.1d87	7c ce 1d	jmp ($1dce,x)			jmp 	(Group0Vectors,x)
.1d8a					_CRNotToken:
.1d8a	c9 40		cmp #$40			cmp 	#$40 						; if 0-3F then it is a letter
.1d8c	b0 36		bcs $1dc4			bcs 	Unimplemented
.1d8e					_CRDefaultLet:
.1d8e	20 f3 18	jsr $18f3			jsr 	CommandLet 					; do the default, LET
.1d91	4c 68 1d	jmp $1d68			jmp 	CRNextInstruction
.1d94					_CRCheckIndirect:
.1d94	c9 97		cmp #$97			cmp 	#TKW_PLING 					; !<term> =
.1d96	f0 f6		beq $1d8e			beq 	_CRDefaultLet
.1d98	c9 98		cmp #$98			cmp 	#TKW_QMARK 					; ?<term> =
.1d9a	f0 f2		beq $1d8e			beq 	_CRDefaultLet
.1d9c	d0 26		bne $1dc4			bne 	Unimplemented
.1d9e					CommandShift1:
.1d9e	b1 28		lda ($28),y			lda 	(codePtr),y 				; get shifted value
.1da0	10 22		bpl $1dc4			bpl 	Unimplemented 				; we have an error as this should not happen.
.1da2	0a		asl a				asl 	a 							; double into X
.1da3	aa		tax				tax
.1da4	c8		iny				iny 								; advance over it.
.1da5	20 ab 1d	jsr $1dab			jsr 	_RunIt 						; we have no jsr (aaaa,X)
.1da8	4c 68 1d	jmp $1d68			jmp 	CRNextInstruction
.1dab					_RunIt:
.1dab	7c 86 1e	jmp ($1e86,x)			jmp 	(Group1Vectors-12,x) 		; and do the code.
.1dae					CommandShift2:
.1dae	a9 ff		lda #$ff			lda 	#$FF 						; $FF means command not unary function.
.1db0	20 1d 14	jsr $141d		jsr	extensionHandler
.1db3	4c 68 1d	jmp $1d68			jmp 	CRNextInstruction
.1db6					CommandColon:
.1db6	60		rts				rts
.1db7					ResetCodeAddress:
.1db7	ad c8 0a	lda $0ac8			lda 	basePage 					; copy basePage to code Pointer
.1dba	85 28		sta $28				sta 	codePtr
.1dbc	ad c9 0a	lda $0ac9			lda 	basePage+1
.1dbf	85 29		sta $29				sta 	codePtr+1
.1dc1	a0 03		ldy #$03			ldy 	#3 							; offset after offset link and line#
.1dc3	60		rts				rts
.1dc4					Unimplemented:
.1dc4	a2 01		ldx #$01			ldx 	#ErrorID_Missing
.1dc6	20 76 11	jsr $1176		jsr	errorHandler
.1dc9					TKErr01:
.1dc9					TKErr02:
.1dc9					TKErr03:
.1dc9					TKErr04:
.1dc9					TKErr05:
.1dc9					TKErr06:
.1dc9					TKErr07:
.1dc9					TKErr08:
.1dc9					TKErr09:
.1dc9					TKErr10:
.1dc9	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.1dcb	20 76 11	jsr $1176		jsr	errorHandler

;******  Processing file: main/commands/../../generated/tokenvectors0.inc

.1dce					Group0Vectors:
>1dce	89 1f					.word	AdvanceNextLine          ; $80 [[eol]]
>1dd0	9e 1d					.word	CommandShift1            ; $81 [[sh1]]
>1dd2	ae 1d					.word	CommandShift2            ; $82 [[sh2]]
>1dd4	c9 1d					.word	TKErr09                  ; $83 [[sh3]]
>1dd6	c9 1d					.word	TKErr10                  ; $84 [[fpc]]
>1dd8	c9 1d					.word	TKErr08                  ; $85 [[str]]
>1dda	4d 21					.word	AndHandler               ; $86 and
>1ddc	3a 21					.word	OrHandler                ; $87 or
>1dde	27 21					.word	XorHandler               ; $88 xor
>1de0	6f 22					.word	CompareGreaterEq         ; $89 >=
>1de2	79 22					.word	CompareLessEq            ; $8a <=
>1de4	5b 22					.word	CompareGreater           ; $8b >
>1de6	51 22					.word	CompareLess              ; $8c <
>1de8	47 22					.word	CompareEquals            ; $8d =
>1dea	65 22					.word	CompareNotEquals         ; $8e <>
>1dec	b8 20					.word	AddHandler               ; $8f +
>1dee	db 20					.word	SubHandler               ; $90 -
>1df0	73 21					.word	ShrHandler               ; $91 >>
>1df2	60 21					.word	ShlHandler               ; $92 <<
>1df4	ee 20					.word	MulHandler               ; $93 *
>1df6	01 21					.word	DivHandler               ; $94 /
>1df8	14 21					.word	ModHandler               ; $95 mod
>1dfa	ac 21					.word	PowerHandler             ; $96 ^
>1dfc	86 21					.word	WordRefHandler           ; $97 !
>1dfe	99 21					.word	ByteRefHandler           ; $98 ?
>1e00	2f 1d					.word	Command_Repeat           ; $99 repeat
>1e02	51 20					.word	Command_While            ; $9a while
>1e04	f7 16					.word	Command_FOR              ; $9b for
>1e06	06 18					.word	CommandIf                ; $9c if
>1e08	c9 1d					.word	TKErr04                  ; $9d defproc
>1e0a	3c 1d					.word	Command_Until            ; $9e until
>1e0c	74 20					.word	Command_Wend             ; $9f wend
>1e0e	58 17					.word	Command_NEXT             ; $a0 next
>1e10	c9 1d					.word	TKErr06                  ; $a1 then
>1e12	41 18					.word	Command_ENDIF            ; $a2 endif
>1e14	a1 1c					.word	ReturnProc               ; $a3 endproc
>1e16	48 24					.word	UnaryParenthesis         ; $a4 (
>1e18	a6 25					.word	UnaryLen                 ; $a5 len(
>1e1a	ea 25					.word	UnarySgn                 ; $a6 sgn(
>1e1c	d3 25					.word	UnaryAbs                 ; $a7 abs(
>1e1e	43 26					.word	Unary_Random             ; $a8 random(
>1e20	8d 26					.word	Unary_Page               ; $a9 page
>1e22	be 2a					.word	MInt32True               ; $aa true
>1e24	c2 2a					.word	MInt32False              ; $ab false
>1e26	58 26					.word	Unary_Min                ; $ac min(
>1e28	5c 26					.word	Unary_Max                ; $ad max(
>1e2a	47 27					.word	UnarySys                 ; $ae sys(
>1e2c	0a 27					.word	UnaryTimer               ; $af timer(
>1e2e	9d 24					.word	EventFunction            ; $b0 event(
>1e30	33 27					.word	UnaryGet                 ; $b1 get(
>1e32	23 27					.word	UnaryInkey               ; $b2 inkey(
>1e34	de 26					.word	UnaryAlloc               ; $b3 alloc(
>1e36	6f 27					.word	ExecChr                  ; $b4 chr$(
>1e38	9f 27					.word	ExecLeft                 ; $b5 left$(
>1e3a	bc 27					.word	ExecMid                  ; $b6 mid$(
>1e3c	e4 27					.word	ExecRight                ; $b7 right$(
>1e3e	89 22					.word	Event_Str                ; $b8 str$(
>1e40	b8 22					.word	UnaryVal                 ; $b9 val(
>1e42	01 26					.word	UnaryPeek                ; $ba peek(
>1e44	07 26					.word	UnaryDeek                ; $bb deek(
>1e46	0d 26					.word	UnaryLeek                ; $bc leek(
>1e48	c4 25					.word	UnaryAsc                 ; $bd asc(
>1e4a	b8 26					.word	UnaryIntToFloat          ; $be int(
>1e4c	cb 26					.word	UnaryFloatToInt          ; $bf float(
>1e4e	bb 22					.word	UnaryIsVal               ; $c0 isval(
>1e50	86 27					.word	ExecUpper                ; $c1 upper$(
>1e52	83 27					.word	ExecLower                ; $c2 lower$(
>1e54	9b 26					.word	UnaryReference           ; $c3 @
>1e56	b1 26					.word	UnaryComplement          ; $c4 ~
>1e58	ae 26					.word	UnaryHexMarker           ; $c5 &
>1e5a	c9 1d					.word	TKErr01                  ; $c6 )
>1e5c	b6 1d					.word	CommandColon             ; $c7 :
>1e5e	c9 1d					.word	TKErr02                  ; $c8 ,
>1e60	c9 1d					.word	TKErr03                  ; $c9 ;
>1e62	22 1d					.word	Command_Rem2             ; $ca '
>1e64	c9 1d					.word	TKErr07                  ; $cb to
>1e66	c9 1d					.word	TKErr05                  ; $cc step
>1e68	34 1c					.word	CallProc                 ; $cd proc
>1e6a	4c 1a					.word	CommandLocal             ; $ce local
>1e6c	e9 16					.word	Command_Dim              ; $cf dim
>1e6e	22 1d					.word	Command_Rem              ; $d0 rem
>1e70	f3 18					.word	CommandLet               ; $d1 let
>1e72	42 18					.word	Command_Input            ; $d2 input
>1e74	3b 18					.word	Command_ELSE             ; $d3 else
>1e76	30 20					.word	Command_VDU              ; $d4 vdu
>1e78	99 1b					.word	Command_Print            ; $d5 print
>1e7a	fe 1f					.word	CommandGOTO              ; $d6 goto
>1e7c	d3 1f					.word	CommandGOSUB             ; $d7 gosub
>1e7e	e6 1f					.word	CommandRETURN            ; $d8 return
>1e80	e7 1c					.word	CommandData              ; $d9 data
>1e82	7c 16					.word	Command_Assert           ; $da assert
>1e84	5c 1b					.word	Command_Poke             ; $db poke
>1e86	60 1b					.word	Command_Doke             ; $dc doke
>1e88	64 1b					.word	Command_Loke             ; $dd loke
>1e8a	a3 1f					.word	Command_Ink              ; $de ink
>1e8c	ae 1f					.word	Command_Paper            ; $df paper
>1e8e	9d 1f					.word	Command_CLS              ; $e0 cls
>1e90	b9 1f					.word	Command_Locate           ; $e1 locate

;******  Return to file: main/commands/run.asm


;******  Processing file: main/commands/../../generated/tokenvectors1.inc

.1e92					Group1Vectors:
>1e92	8a 16					.word	CommandClear             ; $86 clear
>1e94	f3 19					.word	CommandLoad              ; $87 load
>1e96	08 1a					.word	CommandSave              ; $88 save
>1e98	71 19					.word	CommandList              ; $89 list
>1e9a	4e 1b					.word	Command_New              ; $8a new
>1e9c	5d 1d					.word	Command_Run              ; $8b run
>1e9e	bc 1c					.word	CommandRead              ; $8c read
>1ea0	f0 1c					.word	CommandRestore           ; $8d restore
>1ea2	83 1f					.word	CommandEnd               ; $8e end
>1ea4	7e 1f					.word	CommandStop              ; $8f stop
>1ea6	86 1f					.word	CommandXemu              ; $90 xemu

;******  Return to file: main/commands/run.asm


;******  Return to file: main/main.asm


;******  Processing file: main/commands/scanner.asm

.0c09					procList:
>0c09							.fill 	2		 					; terminated by name high being zero.
.0c0b					yInLine:
>0c0b							.fill 	1
.1ea8					FindProcedure:
.1ea8	8c 0b 0c	sty $0c0b			sty 	yInLine 					; save current position.
.1eab	20 66 1f	jsr $1f66			jsr 	CalculateProcedureHash		; calculate the hash of the procedure.
.1eae	85 2c		sta $2c				sta 	temp1
.1eb0	ad 09 0c	lda $0c09			lda		procList 					; put procList address in temp2
.1eb3	85 2e		sta $2e				sta 	temp2
.1eb5	ad 0a 0c	lda $0c0a			lda 	procList+1
.1eb8	85 2f		sta $2f				sta 	temp2+1
.1eba	a0 00		ldy #$00			ldy 	#0 							; position in this table.
.1ebc					_FPLoop:
.1ebc	b1 2e		lda ($2e),y			lda 	(temp2),y
.1ebe	f0 4f		beq $1f0f			beq 	_FPError 					; if so, we don't know this procedure.
.1ec0	85 2b		sta $2b				sta 	temp0+1 					; copy MSB/LSB to temp0 as we go.
.1ec2	c8		iny				iny
.1ec3	b1 2e		lda ($2e),y			lda 	(temp2),y
.1ec5	85 2a		sta $2a				sta 	temp0
.1ec7	c8		iny				iny
.1ec8	b1 2e		lda ($2e),y			lda 	(temp2),y					; check the procedure hash.
.1eca	c5 2c		cmp $2c				cmp 	temp1
.1ecc	d0 2b		bne $1ef9			bne 	_FPNext 					; hash is different, go to next.
.1ece	38		sec				sec
.1ecf	ad 0b 0c	lda $0c0b			lda 	yInLine 					; position in line must be at least 4
.1ed2	e9 04		sbc #$04			sbc 	#4
.1ed4	18		clc				clc
.1ed5	65 28		adc $28				adc 	codePtr
.1ed7	85 30		sta $30				sta 	temp3
.1ed9	a5 29		lda $29				lda 	codePtr+1
.1edb	69 00		adc #$00			adc 	#0
.1edd	85 31		sta $31				sta 	temp3+1
.1edf	98		tya				tya
.1ee0	48		pha				pha
.1ee1	a0 04		ldy #$04			ldy 	#4
.1ee3					_FPCName:
.1ee3	b1 30		lda ($30),y			lda 	(temp3),y 					; check the same
.1ee5	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.1ee7	d0 0e		bne $1ef7			bne 	_FPpulYNext 				; if different go to next one.
.1ee9	c8		iny				iny
.1eea	c9 3a		cmp #$3a			cmp 	#$3A
.1eec	90 f5		bcc $1ee3			bcc 	_FPCName 					; compare the whole lot....
.1eee	68		pla				pla 								; throw away the saved Y
.1eef	98		tya				tya 								; length of name is Y-4
.1ef0	38		sec				sec
.1ef1	e9 04		sbc #$04			sbc 	#4
.1ef3	ac 0b 0c	ldy $0c0b			ldy 	yInLine  					; get the original Y back
.1ef6	60		rts				rts
.1ef7					_FPpulYNext:
.1ef7	68		pla				pla
.1ef8	a8		tay				tay
.1ef9					_FPNext:
.1ef9	c8		iny				iny 								; next procedure record.
.1efa	10 c0		bpl $1ebc			bpl 	_FPLoop 					; if done 128 already ... e.g. Y -ve
.1efc	98		tya				tya 								; subtract 128 from Y
.1efd	38		sec				sec
.1efe	e9 80		sbc #$80			sbc 	#128
.1f00	a8		tay				tay
.1f01	18		clc				clc 								; add 128 to temp2, so we can have more than
.1f02	a5 2e		lda $2e				lda 	temp2 						; 255/3 = 85 procedures
.1f04	69 80		adc #$80			adc 	#128
.1f06	85 2e		sta $2e				sta 	temp2
.1f08	90 b2		bcc $1ebc			bcc 	_FPLoop
.1f0a	e6 2f		inc $2f				inc 	temp2+1
.1f0c	4c bc 1e	jmp $1ebc			jmp 	_FPLoop
.1f0f					_FPError:
.1f0f	a2 17		ldx #$17			ldx 	#ErrorID_NoProc
.1f11	20 76 11	jsr $1176		jsr	errorHandler
.1f14					ScanProc:
.1f14	98		tya				tya
.1f15	48		pha				pha
.1f16	a5 35		lda $35				lda 	lowMemory 					; copy the start of the procList, at low memory
.1f18	8d 09 0c	sta $0c09			sta 	procList
.1f1b	a5 36		lda $36				lda 	lowMemory+1
.1f1d	8d 0a 0c	sta $0c0a			sta 	procList+1
.1f20	20 b7 1d	jsr $1db7			jsr 	ResetCodeAddress 			; back to the start.
.1f23					_ScanLoop:
.1f23	a0 00		ldy #$00			ldy 	#0 							; check reached program end
.1f25	b1 28		lda ($28),y			lda 	(codePtr),y
.1f27	f0 2a		beq $1f53			beq 	_ScanExit
.1f29	a0 03		ldy #$03			ldy 	#3							; get first token
.1f2b	b1 28		lda ($28),y			lda 	(codePtr),y
.1f2d	c9 9d		cmp #$9d			cmp 	#TKW_DEFPROC				; skip to next if not DEFPROC
.1f2f	d0 12		bne $1f43			bne 	_ScanNext
.1f31	a5 29		lda $29				lda 	codePtr+1 					; write high and low address of this line.
.1f33	20 5b 1f	jsr $1f5b			jsr 	_ScanWrite
.1f36	a5 28		lda $28				lda 	codePtr
.1f38	20 5b 1f	jsr $1f5b			jsr 	_ScanWrite
.1f3b	a0 04		ldy #$04			ldy 	#4 							; start of name part
.1f3d	20 66 1f	jsr $1f66			jsr 	CalculateProcedureHash 		; calculate procedure hash
.1f40	20 5b 1f	jsr $1f5b			jsr 	_ScanWrite					; and write that
.1f43					_ScanNext:
.1f43	18		clc				clc
.1f44	a0 00		ldy #$00			ldy 	#0
.1f46	b1 28		lda ($28),y			lda 	(codePtr),y
.1f48	65 28		adc $28				adc 	codePtr
.1f4a	85 28		sta $28				sta 	codePtr
.1f4c	90 d5		bcc $1f23			bcc 	_ScanLoop
.1f4e	e6 29		inc $29				inc 	codePtr+1
.1f50	4c 23 1f	jmp $1f23			jmp 	_ScanLoop
.1f53					_ScanExit:
.1f53	a9 00		lda #$00			lda 	#0 							; write ending zero.
.1f55	20 5b 1f	jsr $1f5b			jsr 	_ScanWrite
.1f58	68		pla				pla
.1f59	a8		tay				tay
.1f5a	60		rts				rts
.1f5b					_ScanWrite:
.1f5b	a0 00		ldy #$00			ldy 	#0
.1f5d	91 35		sta ($35),y			sta 	(lowMemory),y
.1f5f	e6 35		inc $35				inc 	lowMemory
.1f61	d0 02		bne $1f65			bne 	_SWNoCarry
.1f63	e6 36		inc $36				inc 	lowMemory+1
.1f65					_SWNoCarry:
.1f65	60		rts				rts
.1f66					CalculateProcedureHash:
.1f66	a9 00		lda #$00			lda 	#0 							; clear hash.
.1f68	85 2a		sta $2a				sta 	temp0
.1f6a					_CPHLoop:
.1f6a	18		clc				clc 								; add character and rotate and add carry back in
.1f6b	b1 28		lda ($28),y			lda 	(codePtr),y
.1f6d	65 2a		adc $2a				adc 	temp0
.1f6f	6a		ror a				ror 	a
.1f70	69 0d		adc #$0d			adc 	#13 						; primes usually good for this sort of thing.
.1f72	85 2a		sta $2a				sta 	temp0 						; (down with this sort of thing)
.1f74	b1 28		lda ($28),y			lda 	(codePtr),y
.1f76	c8		iny				iny 								; advance incase we go round again.
.1f77	c9 3a		cmp #$3a			cmp 	#$3A
.1f79	90 ef		bcc $1f6a			bcc 	_CPHLoop
.1f7b	a5 2a		lda $2a				lda 	temp0
.1f7d	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/stopend.asm

.1f7e					CommandStop:
.1f7e	a2 06		ldx #$06			ldx 	#ErrorID_Stop
.1f80	20 76 11	jsr $1176		jsr	errorHandler
.1f83					CommandEnd:
.1f83	4c 70 2b	jmp $2b70			jmp 	WarmStart
.1f86					CommandXemu:
.1f86	4c ff ff	jmp $ffff			jmp 	$FFFF 						; fudge to crash out of emulator
.1f89					AdvanceNextLine:
.1f89	a0 00		ldy #$00			ldy 	#0 							; get offset
.1f8b	b1 28		lda ($28),y			lda 	(codePtr),y
.1f8d	18		clc				clc 								; add to codePtr
.1f8e	65 28		adc $28				adc 	codePtr
.1f90	85 28		sta $28				sta 	codePtr
.1f92	90 02		bcc $1f96			bcc 	_ANLNoCarry
.1f94	e6 29		inc $29				inc 	codePtr+1
.1f96					_ANLNoCarry:
.1f96	b1 28		lda ($28),y			lda 	(codePtr),y 				; if end of program (or was just stand alone.
.1f98	f0 e9		beq $1f83			beq 	CommandEnd 					; execute END
.1f9a	a0 03		ldy #$03			ldy 	#3 							; start of tokens on line.
.1f9c	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/text.asm

.1f9d					Command_CLS:
.1f9d	a2 00		ldx #$00		ldx	#0
.1f9f	20 59 11	jsr $1159		jsr	deviceHandler
.1fa2	60		rts				rts
.1fa3					Command_Ink:
.1fa3	a2 00		ldx #$00			ldx 	#0
.1fa5	20 68 25	jsr $2568			jsr 	EvaluateSmallInteger
.1fa8	a2 06		ldx #$06		ldx	#6
.1faa	20 59 11	jsr $1159		jsr	deviceHandler
.1fad	60		rts				rts
.1fae					Command_Paper:
.1fae	a2 00		ldx #$00			ldx 	#0
.1fb0	20 68 25	jsr $2568			jsr 	EvaluateSmallInteger
.1fb3	a2 10		ldx #$10		ldx	#16
.1fb5	20 59 11	jsr $1159		jsr	deviceHandler
.1fb8	60		rts				rts
.1fb9					Command_Locate:
.1fb9	a2 00		ldx #$00			ldx 	#0
.1fbb	20 68 25	jsr $2568			jsr 	EvaluateSmallInteger
.1fbe	20 42 2b	jsr $2b42			jsr 	CheckComma
.1fc1	e8		inx				inx
.1fc2	20 68 25	jsr $2568			jsr 	EvaluateSmallInteger
.1fc5	98		tya				tya
.1fc6	48		pha				pha
.1fc7	a4 49		ldy $49				ldy 	esInt0+1
.1fc9	a5 48		lda $48				lda 	esInt0
.1fcb	a2 0e		ldx #$0e		ldx	#14
.1fcd	20 59 11	jsr $1159		jsr	deviceHandler
.1fd0	68		pla				pla
.1fd1	a8		tay				tay
.1fd2	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/transfer.asm

.1fd3					CommandGOSUB:
.1fd3	20 5e 25	jsr $255e			jsr 	EvaluateRootInteger			; get GOSUB line on stack top.
.1fd6	a2 04		ldx #$04			ldx 	#4 							; allocate 4 bytes on stack for GOSUB
.1fd8	a9 47		lda #$47			lda 	#markerGOSUB  				; <marker> <return addr/offset>
.1fda	20 f7 2b	jsr $2bf7			jsr 	RSClaim
.1fdd	a9 01		lda #$01			lda 	#1 							; save position at offset 1.
.1fdf	20 23 2c	jsr $2c23			jsr 	RSSavePosition
.1fe2	a2 00		ldx #$00			ldx 	#0 							; point back at GOSUB line
.1fe4	f0 1b		beq $2001			beq 	GotoTOS 					; and do a GOTO there.
.1fe6					CommandRETURN:
.1fe6	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.1fe8	a1 78		lda ($78,x)			lda 	(rsPointer,x)
.1fea	c9 47		cmp #$47			cmp 	#markerGOSUB 						; does it match
.1fec	f0 05		beq $1ff3			beq 	_isok
.1fee	a2 0e		ldx #$0e			ldx 	#ErrorID_returnErr
.1ff0	20 76 11	jsr $1176		jsr	errorHandler
.1ff3					_isok:
.1ff3	a9 01		lda #$01			lda 	#1
.1ff5	20 36 2c	jsr $2c36			jsr 	RSLoadPosition 				; reload the position from offset 1.
.1ff8	a9 04		lda #$04			lda 	#4 							; throw 4 bytes from stack.
.1ffa	20 19 2c	jsr $2c19			jsr 	RSFree
.1ffd	60		rts				rts
.1ffe					CommandGOTO:
.1ffe	20 5e 25	jsr $255e			jsr 	EvaluateRootInteger 		; get GOTO line on stack top.
.2001					GotoTOS:
.2001	20 b7 1d	jsr $1db7			jsr 	ResetCodeAddress 			; simple search.
.2004					_GotoSearch:
.2004	a0 00		ldy #$00			ldy 	#0 							; get offset
.2006	b1 28		lda ($28),y			lda 	(codePtr),y
.2008	f0 21		beq $202b			beq 	_GotoError 					; not found.
.200a	c8		iny				iny									; check LSB match
.200b	b1 28		lda ($28),y			lda 	(codePtr),y
.200d	d5 48		cmp $48,x			cmp 	esInt0,x
.200f	d0 07		bne $2018			bne 	_GotoNext
.2011	c8		iny				iny
.2012	b1 28		lda ($28),y			lda 	(codePtr),y
.2014	d5 50		cmp $50,x			cmp 	esInt1,x
.2016	f0 10		beq $2028			beq 	_GotoFound
.2018					_GotoNext:
.2018	a0 00		ldy #$00			ldy 	#0 							; go next line
.201a	b1 28		lda ($28),y			lda 	(codePtr),y
.201c	18		clc				clc
.201d	65 28		adc $28				adc 	codePtr
.201f	85 28		sta $28				sta 	codePtr
.2021	90 e1		bcc $2004			bcc 	_GotoSearch
.2023	e6 29		inc $29				inc 	codePtr+1
.2025	4c 04 20	jmp $2004			jmp 	_GotoSearch
.2028					_GotoFound:
.2028	a0 03		ldy #$03			ldy 	#3 							; continue from that line
.202a	60		rts				rts
.202b					_GotoError:
.202b	a2 0c		ldx #$0c			ldx 	#ErrorID_LineNumber
.202d	20 76 11	jsr $1176		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/commands/vdu.asm

.2030					Command_VDU:
.2030	20 5e 25	jsr $255e			jsr 	EvaluateRootInteger 			; get integer at root.
.2033	a5 48		lda $48				lda 	esInt0
.2035	a2 12		ldx #$12		ldx	#18
.2037	20 59 11	jsr $1159		jsr	deviceHandler
.203a					_CVNext:
.203a	b1 28		lda ($28),y			lda 	(codePtr),y 					; what follows ?
.203c	c8		iny				iny
.203d	c9 c8		cmp #$c8			cmp 	#TKW_COMMA 						; comma, do again
.203f	f0 ef		beq $2030			beq 	Command_VDU
.2041	c9 c9		cmp #$c9			cmp 	#TKW_SEMICOLON 					; semicolon, print MSB
.2043	d0 0a		bne $204f			bne 	_CVExit
.2045	a5 50		lda $50				lda 	esInt1
.2047	a2 12		ldx #$12		ldx	#18
.2049	20 59 11	jsr $1159		jsr	deviceHandler
.204c	4c 3a 20	jmp $203a			jmp 	_CVNext
.204f	88		dey		_CVExit:dey
.2050	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/while.asm

.2051					Command_While:
.2051	a9 57		lda #$57			lda 	#markerWhile 				; gosub marker allocate 4 bytes.
.2053	a2 04		ldx #$04			ldx 	#4
.2055	20 f7 2b	jsr $2bf7			jsr 	RSClaim 					; create on stack.
.2058	88		dey				dey
.2059	a9 01		lda #$01			lda 	#1
.205b	20 23 2c	jsr $2c23			jsr 	RSSavePosition 				; save position before the WHILE keyword.
.205e	c8		iny				iny
.205f	20 60 25	jsr $2560			jsr 	EvaluateInteger				; get the conditional
.2062	20 e9 2a	jsr $2ae9			jsr 	MInt32Zero 	 				; if zero, skip forward to the fail code.
.2065	f0 01		beq $2068			beq 	_CWFail
.2067	60		rts				rts
.2068					_CWFail:
.2068	a9 04		lda #$04			lda 	#4
.206a	20 19 2c	jsr $2c19			jsr 	RSFree 						; close the just opened position.
.206d	a9 9f		lda #$9f			lda 	#TKW_WEND 					; scan forward past WEND.
.206f	aa		tax				tax
.2070	20 75 2b	jsr $2b75			jsr 	ScanForward
.2073	60		rts				rts
.2074					Command_Wend:
.2074	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.2076	a1 78		lda ($78,x)			lda 	(rsPointer,x)
.2078	c9 57		cmp #$57			cmp 	#markerWHILE 						; does it match
.207a	f0 05		beq $2081			beq 	_isok
.207c	a2 11		ldx #$11			ldx 	#ErrorID_wendErr
.207e	20 76 11	jsr $1176		jsr	errorHandler
.2081					_isok:
.2081	a9 01		lda #$01			lda 	#1
.2083	20 36 2c	jsr $2c36			jsr 	RSLoadPosition				; go back until true
.2086	a9 04		lda #$04			lda 	#4
.2088	20 19 2c	jsr $2c19			jsr 	RSFree 						; close the loop
.208b	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/binary.asm

.208c					BinaryProcess:
.208c	b5 40		lda $40,x			lda 	esType,x 					; or type bytes together and check bit 6.
.208e	15 41		ora $41,x			ora 	esType+1,x 					; (the float bit)
.2090	0a		asl a				asl 	a
.2091	30 0e		bmi $20a1			bmi 	_BPStringType 				; if bit 6 is set, then string type, error
.2093	18		clc				clc 								; return CC for integer
.2094	29 02		and #$02			and 	#$02 						; $02 because of ASL A. check original bit 1.
.2096	f0 08		beq $20a0			beq 	_BPExit 					; if both integer then return with CC.
.2098	20 a6 20	jsr $20a6			jsr 	BPMakeBothFloat 			; make both float
.209b	a9 01		lda #$01			lda 	#$01 						; set result type to float
.209d	95 40		sta $40,x			sta 	esType,x
.209f	38		sec				sec 								; and return with carry set.
.20a0					_BPExit:
.20a0	60		rts				rts
.20a1					_BPStringType:
.20a1	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.20a3	20 76 11	jsr $1176		jsr	errorHandler
.20a6					BPMakeBothFloat:
.20a6	e8		inx				inx
.20a7	20 ab 20	jsr $20ab			jsr 	BPMakeFloat 				; one is a float, so we do both as floats.
.20aa	ca		dex				dex
.20ab					BPMakeFloat:
.20ab	b5 40		lda $40,x			lda 	esType,x 					; get type bit which is in bit 0
.20ad	4a		lsr a				lsr 	a
.20ae	b0 07		bcs $20b7			bcs 	_BPIsFloat 					; already a float if set.
.20b0	8a		txa				txa
.20b1	a2 1a		ldx #$1a		ldx	#26
.20b3	20 a8 14	jsr $14a8		jsr	floatingpointHandler
.20b6	aa		tax				tax
.20b7					_BPIsFloat:
.20b7	60		rts				rts
.20b8					AddHandler:
.20b8	20 07 23	jsr $2307			jsr 	DereferenceTwo 				; dereference top two on stack.
.20bb	b5 40		lda $40,x			lda 	esType,x 					; check two strings.
.20bd	35 41		and $41,x			and 	esType+1,x
.20bf	29 40		and #$40			and 	#$40 						; if both have bit 6 set ... we have two strings
.20c1	d0 10		bne $20d3			bne 	_AHStringConcat				; concatenate strings.
.20c3	20 8c 20	jsr $208c			jsr 	BinaryProcess 				; check to see if either is float
.20c6	b0 03		bcs $20cb			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.20c8	4c a6 29	jmp $29a6			jmp 	MInt32Add 							; else do it as integer.
.20cb					_IsFPOperation:
.20cb	8a		txa				txa 								; call the relevant fp routine
.20cc	a2 02		ldx #$02		ldx	#2
.20ce	20 a8 14	jsr $14a8		jsr	floatingpointHandler
.20d1	aa		tax				tax
.20d2	60		rts				rts
.20d3					_AHStringConcat:
.20d3	8a		txa				txa 								; handled by the string module.
.20d4	a2 04		ldx #$04		ldx	#4
.20d6	20 f2 2e	jsr $2ef2		jsr	stringHandler
.20d9	aa		tax				tax
.20da	60		rts				rts
.20db					SubHandler:
.20db	20 07 23	jsr $2307			jsr 	DereferenceTwo
.20de	20 8c 20	jsr $208c			jsr 	BinaryProcess 				; check to see if either is float
.20e1	b0 03		bcs $20e6			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.20e3	4c c0 29	jmp $29c0			jmp 	MInt32Sub 							; else do it as integer.
.20e6					_IsFPOperation:
.20e6	8a		txa				txa 								; call the relevant fp routine
.20e7	a2 10		ldx #$10		ldx	#16
.20e9	20 a8 14	jsr $14a8		jsr	floatingpointHandler
.20ec	aa		tax				tax
.20ed	60		rts				rts
.20ee					MulHandler:
.20ee	20 07 23	jsr $2307			jsr 	DereferenceTwo
.20f1	20 8c 20	jsr $208c			jsr 	BinaryProcess 				; check to see if either is float
.20f4	b0 03		bcs $20f9			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.20f6	4c da 29	jmp $29da			jmp 	MInt32Multiply 							; else do it as integer.
.20f9					_IsFPOperation:
.20f9	8a		txa				txa 								; call the relevant fp routine
.20fa	a2 0a		ldx #$0a		ldx	#10
.20fc	20 a8 14	jsr $14a8		jsr	floatingpointHandler
.20ff	aa		tax				tax
.2100	60		rts				rts
.2101					DivHandler:
.2101	20 07 23	jsr $2307			jsr 	DereferenceTwo
.2104	20 8c 20	jsr $208c			jsr 	BinaryProcess 				; check to see if either is float
.2107	b0 03		bcs $210c			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.2109	4c 97 28	jmp $2897			jmp 	MInt32SDivide 							; else do it as integer.
.210c					_IsFPOperation:
.210c	8a		txa				txa 								; call the relevant fp routine
.210d	a2 06		ldx #$06		ldx	#6
.210f	20 a8 14	jsr $14a8		jsr	floatingpointHandler
.2112	aa		tax				tax
.2113	60		rts				rts
.2114					ModHandler:
.2114	20 07 23	jsr $2307			jsr 	DereferenceTwo
.2117	20 8c 20	jsr $208c			jsr 	BinaryProcess 				; check to see if either is float
.211a	b0 03		bcs $211f			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.211c	4c 15 29	jmp $2915			jmp 	MInt32Modulus 							; else do it as integer.
.211f					_IsFPOperation:
.211f	8a		txa				txa 								; call the relevant fp routine
.2120	a2 08		ldx #$08		ldx	#8
.2122	20 a8 14	jsr $14a8		jsr	floatingpointHandler
.2125	aa		tax				tax
.2126	60		rts				rts
.2127					XorHandler:
.2127	20 07 23	jsr $2307			jsr 	DereferenceTwo
.212a	20 8c 20	jsr $208c			jsr 	BinaryProcess 				; check to see if either is float
.212d	b0 03		bcs $2132			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.212f	4c 49 28	jmp $2849			jmp 	MInt32Xor 							; else do it as integer.
.2132					_IsFPOperation:
.2132	8a		txa				txa 								; call the relevant fp routine
.2133	a2 08		ldx #$08		ldx	#8
.2135	20 a8 14	jsr $14a8		jsr	floatingpointHandler
.2138	aa		tax				tax
.2139	60		rts				rts
.213a					OrHandler:
.213a	20 07 23	jsr $2307			jsr 	DereferenceTwo
.213d	20 8c 20	jsr $208c			jsr 	BinaryProcess 				; check to see if either is float
.2140	b0 03		bcs $2145			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.2142	4c 30 28	jmp $2830			jmp 	MInt32Or 							; else do it as integer.
.2145					_IsFPOperation:
.2145	8a		txa				txa 								; call the relevant fp routine
.2146	a2 08		ldx #$08		ldx	#8
.2148	20 a8 14	jsr $14a8		jsr	floatingpointHandler
.214b	aa		tax				tax
.214c	60		rts				rts
.214d					AndHandler:
.214d	20 07 23	jsr $2307			jsr 	DereferenceTwo
.2150	20 8c 20	jsr $208c			jsr 	BinaryProcess 				; check to see if either is float
.2153	b0 03		bcs $2158			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.2155	4c 17 28	jmp $2817			jmp 	MInt32And 							; else do it as integer.
.2158					_IsFPOperation:
.2158	8a		txa				txa 								; call the relevant fp routine
.2159	a2 08		ldx #$08		ldx	#8
.215b	20 a8 14	jsr $14a8		jsr	floatingpointHandler
.215e	aa		tax				tax
.215f	60		rts				rts
.2160					ShlHandler:
.2160	20 07 23	jsr $2307			jsr 	DereferenceTwo
.2163	20 8c 20	jsr $208c			jsr 	BinaryProcess 				; check to see if either is float
.2166	b0 03		bcs $216b			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.2168	4c e1 21	jmp $21e1			jmp 	Mint32ShiftLeftX 							; else do it as integer.
.216b					_IsFPOperation:
.216b	8a		txa				txa 								; call the relevant fp routine
.216c	a2 08		ldx #$08		ldx	#8
.216e	20 a8 14	jsr $14a8		jsr	floatingpointHandler
.2171	aa		tax				tax
.2172	60		rts				rts
.2173					ShrHandler:
.2173	20 07 23	jsr $2307			jsr 	DereferenceTwo
.2176	20 8c 20	jsr $208c			jsr 	BinaryProcess 				; check to see if either is float
.2179	b0 03		bcs $217e			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.217b	4c e4 21	jmp $21e4			jmp 	MInt32ShiftRightX 							; else do it as integer.
.217e					_IsFPOperation:
.217e	8a		txa				txa 								; call the relevant fp routine
.217f	a2 08		ldx #$08		ldx	#8
.2181	20 a8 14	jsr $14a8		jsr	floatingpointHandler
.2184	aa		tax				tax
.2185	60		rts				rts
.2186					WordRefHandler:
.2186	20 07 23	jsr $2307			jsr 	DereferenceTwo
.2189	20 8c 20	jsr $208c			jsr 	BinaryProcess 				; check to see if either is float
.218c	b0 03		bcs $2191			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.218e	4c d3 21	jmp $21d3			jmp 	MInt32WordIndirect 							; else do it as integer.
.2191					_IsFPOperation:
.2191	8a		txa				txa 								; call the relevant fp routine
.2192	a2 08		ldx #$08		ldx	#8
.2194	20 a8 14	jsr $14a8		jsr	floatingpointHandler
.2197	aa		tax				tax
.2198	60		rts				rts
.2199					ByteRefHandler:
.2199	20 07 23	jsr $2307			jsr 	DereferenceTwo
.219c	20 8c 20	jsr $208c			jsr 	BinaryProcess 				; check to see if either is float
.219f	b0 03		bcs $21a4			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.21a1	4c d7 21	jmp $21d7			jmp 	MInt32ByteIndirect 							; else do it as integer.
.21a4					_IsFPOperation:
.21a4	8a		txa				txa 								; call the relevant fp routine
.21a5	a2 08		ldx #$08		ldx	#8
.21a7	20 a8 14	jsr $14a8		jsr	floatingpointHandler
.21aa	aa		tax				tax
.21ab	60		rts				rts
.21ac					PowerHandler:
.21ac	20 07 23	jsr $2307			jsr 	DereferenceTwo
.21af	20 8c 20	jsr $208c			jsr 	BinaryProcess 				; check to see if either is float
.21b2	b0 03		bcs $21b7			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.21b4	4c bf 21	jmp $21bf			jmp 	PowerInteger 							; else do it as integer.
.21b7					_IsFPOperation:
.21b7	8a		txa				txa 								; call the relevant fp routine
.21b8	a2 16		ldx #$16		ldx	#22
.21ba	20 a8 14	jsr $14a8		jsr	floatingpointHandler
.21bd	aa		tax				tax
.21be	60		rts				rts
.21bf					PowerInteger:
.21bf	20 a6 20	jsr $20a6			jsr 	BPMakeBothFloat				; make them float.
.21c2	8a		txa				txa
.21c3	a2 16		ldx #$16		ldx	#22
.21c5	20 a8 14	jsr $14a8		jsr	floatingpointHandler
.21c8	a2 12		ldx #$12		ldx	#18
.21ca	20 a8 14	jsr $14a8		jsr	floatingpointHandler
.21cd	aa		tax				tax
.21ce	a9 00		lda #$00			lda 	#0 							; make type integer
.21d0	95 40		sta $40,x			sta 	esType,x
.21d2	60		rts				rts
.21d3					Mint32WordIndirect:
.21d3	a9 80		lda #$80	 		lda 	#$80 				 		; word reference type (bit 7 set)
.21d5	d0 02		bne $21d9			bne 	Min32Indirect
.21d7					Mint32ByteIndirect:
.21d7	a9 a0		lda #$a0			lda 	#$A0 						; byte reference type (bit 7, bit 5 set)
.21d9					Min32Indirect:
.21d9	48		pha				pha 								; save the indirection
.21da	20 a6 29	jsr $29a6			jsr 	MInt32Add 					; add a!b a?b
.21dd	68		pla				pla 								; and set the type to reference.
.21de	95 40		sta $40,x			sta 	esType,x 	 				; so a!b => a+b and it's a reference....
.21e0	60		rts				rts
.21e1					Mint32ShiftLeftX:
.21e1	18		clc				clc 								; CC shift left
.21e2	90 01		bcc $21e5			bcc 	Mint32Shift
.21e4					Mint32ShiftRightX:
.21e4	38		sec				sec 								; CS shift right
.21e5					Mint32Shift:
.21e5	08		php				php 								; save carry flag on stack.
.21e6	b5 51		lda $51,x			lda 	esInt1+1,x 					; if shift >= 32 then it is zero.
.21e8	15 59		ora $59,x			ora 	esInt2+1,x
.21ea	15 61		ora $61,x			ora 	esInt3+1,x
.21ec	d0 1e		bne $220c			bne 	_MShiftZero
.21ee	b5 49		lda $49,x			lda 	esInt0+1,x
.21f0	c9 20		cmp #$20			cmp 	#32
.21f2	b0 18		bcs $220c			bcs 	_MShiftZero
.21f4					_MShiftLoop:
.21f4	b5 49		lda $49,x			lda 	esInt0+1,x 					; check count is zero
.21f6	f0 12		beq $220a			beq 	_MShiftExit
.21f8	d6 49		dec $49,x			dec 	esInt0+1,x
.21fa	28		plp				plp 								; restore and save carry
.21fb	08		php				php
.21fc	90 06		bcc $2204			bcc 	_MShiftLeft 				; and shift left/right accordingly.
.21fe	20 e0 2a	jsr $2ae0			jsr 	Mint32ShiftRight
.2201	4c f4 21	jmp $21f4			jmp 	_MShiftLoop
.2204					_MShiftLeft:
.2204	20 d7 2a	jsr $2ad7			jsr 	Mint32ShiftLeft
.2207	4c f4 21	jmp $21f4			jmp 	_MShiftLoop
.220a					_MShiftExit:
.220a	28		plp				plp	 								; throw saved carry and exit
.220b	60		rts				rts
.220c					_MShiftZero:
.220c	4c c2 2a	jmp $2ac2			jmp 	MInt32False 				; return 0 as shifted >= 32 times.

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/compare.asm

.220f					PerformComparison:
.220f	20 07 23	jsr $2307			jsr 	DereferenceTwo 				; make both values.
.2212	b5 40		lda $40,x			lda 	esType,x 					; check for two strings.
.2214	35 41		and $41,x			and 	esType+1,x
.2216	0a		asl a				asl 	a 							; bit 7 set if both bit 6s were set.
.2217	30 1d		bmi $2236			bmi 	_PCIsString
.2219	b5 40		lda $40,x			lda 	esType,x 					; check either is floating point.
.221b	15 41		ora $41,x			ora 	esType+1,x
.221d	0a		asl a				asl 	a 							; shift bit 6 (string) to bit 7, mixed types
.221e	30 22		bmi $2242			bmi 	_PCError
.2220	29 02		and #$02			and 	#$02 						; because of ASL, check type in bit 0
.2222	f0 0f		beq $2233			beq 	_PCIsInteger 				; if not two integers, e.g. 1 of the bits is set
.2224	20 a6 20	jsr $20a6			jsr 	BPMakeBothFloat 			; make both float
.2227	8a		txa				txa
.2228	a2 04		ldx #$04		ldx	#4
.222a	20 a8 14	jsr $14a8		jsr	floatingpointHandler
.222d	86 32		stx $32				stx 	tempShort 					; save result
.222f	aa		tax				tax
.2230	a5 32		lda $32				lda 	tempShort
.2232	60		rts				rts
.2233					_PCIsInteger:
.2233	4c 62 28	jmp $2862			jmp 	MInt32Compare
.2236					_PCIsString:
.2236	8a		txa				txa 								; A has SP
.2237	a2 06		ldx #$06		ldx	#6
.2239	20 f2 2e	jsr $2ef2		jsr	stringHandler
.223c	86 32		stx $32				stx 	tempShort 					; save result
.223e	aa		tax				tax 								; put SP back in X and get result.
.223f	a5 32		lda $32				lda 	tempShort
.2241	60		rts				rts
.2242					_PCError:
.2242	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.2244	20 76 11	jsr $1176		jsr	errorHandler
.2247					CompareEquals:
.2247	20 0f 22	jsr $220f			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.224a	c9 00		cmp #$00			cmp 	#$00 						; and we do something if it is = or <> a value.
.224c	f0 35		beq $2283			beq  	CompareTrue
.224e	4c 86 22	jmp $2286			jmp 	CompareFalse
.2251					CompareLess:
.2251	20 0f 22	jsr $220f			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.2254	c9 ff		cmp #$ff			cmp 	#$FF 						; and we do something if it is = or <> a value.
.2256	f0 2b		beq $2283			beq  	CompareTrue
.2258	4c 86 22	jmp $2286			jmp 	CompareFalse
.225b					CompareGreater:
.225b	20 0f 22	jsr $220f			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.225e	c9 01		cmp #$01			cmp 	#$01 						; and we do something if it is = or <> a value.
.2260	f0 21		beq $2283			beq  	CompareTrue
.2262	4c 86 22	jmp $2286			jmp 	CompareFalse
.2265					CompareNotEquals:
.2265	20 0f 22	jsr $220f			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.2268	c9 00		cmp #$00			cmp 	#$00 						; and we do something if it is = or <> a value.
.226a	d0 17		bne $2283			bne  	CompareTrue
.226c	4c 86 22	jmp $2286			jmp 	CompareFalse
.226f					CompareGreaterEq:
.226f	20 0f 22	jsr $220f			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.2272	c9 ff		cmp #$ff			cmp 	#$FF 						; and we do something if it is = or <> a value.
.2274	d0 0d		bne $2283			bne  	CompareTrue
.2276	4c 86 22	jmp $2286			jmp 	CompareFalse
.2279					CompareLessEq:
.2279	20 0f 22	jsr $220f			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.227c	c9 01		cmp #$01			cmp 	#$01 						; and we do something if it is = or <> a value.
.227e	d0 03		bne $2283			bne  	CompareTrue
.2280	4c 86 22	jmp $2286			jmp 	CompareFalse
.2283					CompareTrue:
.2283	4c be 2a	jmp $2abe			jmp 	MInt32True
.2286					CompareFalse:
.2286	4c c2 2a	jmp $2ac2			jmp 	MInt32False

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/convert.asm

.2289					Event_Str:
.2289	20 4a 25	jsr $254a			jsr 	EvaluateNumeric 			; get a number.
.228c	b5 40		lda $40,x			lda 	esType,x 					; is it floating point
.228e	d0 13		bne $22a3			bne 	_ESFloat
.2290	20 e6 22	jsr $22e6			jsr 	ConvertGetBase 				; get base, or default.
.2293	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.2295	85 2a		sta $2a				sta 	temp0
.2297	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.2299	85 2b		sta $2b				sta 	1+(temp0)
.229b	b5 49		lda $49,x			lda 	esInt0+1,x 					; get the base
.229d	20 18 2a	jsr $2a18			jsr 	MInt32ToString 				; convert to string.
.22a0	4c b0 22	jmp $22b0			jmp 	_ESCloneExit 				; clone and exit.
.22a3					_ESFloat:
.22a3	20 35 2b	jsr $2b35			jsr 	CheckRightParen 			; check closing )
.22a6	20 68 19	jsr $1968			jsr 	TOSToTemp0 					; string address in temp0, goes here.
.22a9	8a		txa				txa
.22aa	a2 14		ldx #$14		ldx	#20
.22ac	20 a8 14	jsr $14a8		jsr	floatingpointHandler
.22af	aa		tax				tax
.22b0					_ESCloneExit:
.22b0	8a		txa				txa
.22b1	a2 02		ldx #$02		ldx	#2
.22b3	20 f2 2e	jsr $2ef2		jsr	stringHandler
.22b6	aa		tax				tax
.22b7	60		rts				rts
.22b8					UnaryVal:
.22b8	38		sec				sec 								; Carry set to return value
.22b9	b0 01		bcs $22bc			bcs 	ValueMain
.22bb					UnaryIsVal:
.22bb	18		clc				clc									; Carry clear to return legitimacy
.22bc					ValueMain:
.22bc	08		php				php 								; save results (CS is value, CC is validation)
.22bd	20 55 25	jsr $2555			jsr 	EvaluateString
.22c0	20 e6 22	jsr $22e6			jsr 	ConvertGetBase 				; get base, if any.
.22c3	98		tya				tya
.22c4	48		pha				pha
.22c5	20 68 19	jsr $1968			jsr 	TOSToTemp0 					; string address in temp0, goes here.
.22c8	b5 49		lda $49,x			lda 	esInt0+1,x 					; get the base
.22ca	29 7f		and #$7f			and 	#$7F 						; ignore the sign bit.
.22cc	20 30 29	jsr $2930			jsr 	MInt32FromString 			; convert it back from a string.
.22cf	b0 0c		bcs $22dd			bcs 	_VMSuccess 					; successfully converted.
.22d1	b5 49		lda $49,x			lda 	esInt0+1,x 					; is base the default
.22d3	c9 8a		cmp #$8a			cmp 	#$80+10 					; if no, then it is integer only.
.22d5	f0 00		beq $22d7			beq 	_VMFailed 	 				; so we failed.
.22d7					_VMFailed:
.22d7	68		pla				pla
.22d8	a8		tay				tay
.22d9	28		plp				plp
.22da	4c c2 2a	jmp $2ac2			jmp 	MInt32False 				; return 0 whatever.
.22dd					_VMSuccess:
.22dd	68		pla				pla
.22de	a8		tay				tay
.22df	28		plp				plp 								; if CS the it was val() so we want the value.
.22e0	b0 03		bcs $22e5			bcs 	_VMExit
.22e2	4c be 2a	jmp $2abe			jmp 	MInt32True 					; otherwise return true as successful.
.22e5					_VMExit:
.22e5	60		rts				rts
.22e6					ConvertGetBase:
.22e6	a9 8a		lda #$8a			lda 	#10+$80 					; default base 10 signed.
.22e8	95 49		sta $49,x			sta 	esInt0+1,x
.22ea	b1 28		lda ($28),y			lda 	(codePtr),y 				; check for ,base)
.22ec	c9 c8		cmp #$c8			cmp 	#TKW_COMMA
.22ee	d0 0e		bne $22fe			bne 	_CGBDone 					; not found, should be )
.22f0	e8		inx				inx 								; next level
.22f1	c8		iny				iny 								; skip comma.
.22f2	20 68 25	jsr $2568			jsr 	EvaluateSmallInteger		; evaluate the base.
.22f5	ca		dex				dex
.22f6	c9 02		cmp #$02			cmp 	#2 							; base range is 2..16
.22f8	90 08		bcc $2302			bcc 	_CGBValue 					; (it should work as high as 37)
.22fa	c9 11		cmp #$11			cmp 	#17
.22fc	b0 04		bcs $2302			bcs 	_CGBValue
.22fe					_CGBDone:
.22fe	20 35 2b	jsr $2b35			jsr 	CheckRightParen
.2301	60		rts				rts
.2302					_CGBValue:
.2302	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.2304	20 76 11	jsr $1176		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/dereference.asm

.2307					DereferenceTwo:
.2307	e8		inx				inx
.2308	20 0c 23	jsr $230c			jsr 	DereferenceOne
.230b	ca		dex				dex
.230c					DereferenceOne:
.230c	b5 40		lda $40,x			lda 	esType,x
.230e	10 3d		bpl $234d			bpl 	_DRNotReference 			; is it a reference ? if not, we don't need to do anything
.2310	4a		lsr a				lsr 	a 							; do float dereference if bit 0 set.
.2311	b0 3b		bcs $234e			bcs 	_DRFloatDeReference
.2313	98		tya				tya
.2314	48		pha				pha
.2315	b5 48		lda $48,x			lda 	esInt0,x 					; copy address to temp0
.2317	85 2a		sta $2a				sta 	temp0
.2319	b5 50		lda $50,x			lda 	esInt1,x
.231b	85 2b		sta $2b				sta 	temp0+1
.231d	a9 00		lda #$00			lda 	#0 							; clear esInt1..3
.231f	95 50		sta $50,x			sta 	esInt1,x
.2321	95 58		sta $58,x			sta 	esInt2,x
.2323	95 60		sta $60,x			sta 	esInt3,x
.2325	b5 40		lda $40,x			lda 	esType,x 					; get the type byte.
.2327	29 60		and #$60			and 	#$60 						; get string flag ($40) and byte flag ($20)
.2329	0a		asl a				asl 	a 							; now string ($80) byte ($40)
.232a	30 0d		bmi $2339			bmi 	_DeRefString 				; string, 2 bytes only
.232c	d0 11		bne $233f			bne 	_DeRefByte 					; byte 1 byte only
.232e					_DeRefLong:
.232e	a0 03		ldy #$03			ldy 	#3
.2330	b1 2a		lda ($2a),y			lda 	(temp0),y
.2332	95 60		sta $60,x			sta 	esInt3,x
.2334	88		dey				dey
.2335	b1 2a		lda ($2a),y			lda 	(temp0),y
.2337	95 58		sta $58,x			sta 	esInt2,x
.2339					_DeRefString:
.2339	a0 01		ldy #$01			ldy 	#1
.233b	b1 2a		lda ($2a),y			lda 	(temp0),y
.233d	95 50		sta $50,x			sta 	esInt1,x
.233f					_DeRefByte:
.233f	a0 00		ldy #$00			ldy 	#0
.2341	b1 2a		lda ($2a),y			lda 	(temp0),y
.2343	95 48		sta $48,x			sta 	esInt0,x
.2345	b5 40		lda $40,x			lda 	esType,x 					; clear byte and deref bits.
.2347	29 40		and #$40			and 	#$40
.2349	95 40		sta $40,x			sta 	esType,x
.234b	68		pla				pla
.234c	a8		tay				tay
.234d					_DRNotReference
.234d	60		rts				rts
.234e					_DRFloatDereference:
.234e	20 68 19	jsr $1968			jsr 	TOSToTemp0 					; address to deref in temp0
.2351	8a		txa				txa
.2352	a2 1c		ldx #$1c		ldx	#28
.2354	20 a8 14	jsr $14a8		jsr	floatingpointHandler
.2357	aa		tax				tax
.2358	a9 01		lda #$01			lda 	#$01 						; type to FP (float)
.235a	95 40		sta $40,x			sta 	esType,x
.235c	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/evaluate.asm

.235d					EvaluateLevel:
.235d	48		pha				pha 								; save precedence level.
.235e	a9 00		lda #$00			lda 	#0 							; zero the current stack level.
.2360	95 48		sta $48,x			sta 	esInt0,x
.2362	95 50		sta $50,x			sta 	esInt1,x
.2364	95 58		sta $58,x			sta 	esInt2,x
.2366	95 60		sta $60,x			sta 	esInt3,x
.2368	95 40		sta $40,x			sta 	esType,x 					; zero the type (integer value)
.236a	b1 28		lda ($28),y			lda 	(codePtr),y	 				; look at first token/character
.236c	30 21		bmi $238f			bmi 	_ELIsToken 					; if -ve could be string, float, or unary function.
.236e	0a		asl a				asl 	a 							; if 00-3F then will now be PL and it's a variable.
.236f	30 0a		bmi $237b			bmi 	_ELIsConstant 				; 40-7F will be -ve and that's an integer constant.
.2371	8a		txa				txa 								; stack level in X
.2372	a2 00		ldx #$00		ldx	#0
.2374	20 9a 38	jsr $389a		jsr	variableHandler
.2377	aa		tax				tax
.2378	4c b8 23	jmp $23b8			jmp		_ELHasTerm
.237b					_ELIsConstant:
.237b	4a		lsr a				lsr 	a 							; get the value back
.237c	29 3f		and #$3f			and 	#$3F 						; force into range 0-63
.237e	95 48		sta $48,x			sta 	esInt0,x 					; and put in LSB.
.2380					_ELCheckNext:
.2380	c8		iny				iny 								; look at next
.2381	b1 28		lda ($28),y			lda 	(codePtr),y
.2383	49 40		eor #$40			eor 	#$40 						; shift around so 40-7F => 00-3F
.2385	c9 40		cmp #$40			cmp 	#$40 						; out of range ?
.2387	b0 2f		bcs $23b8			bcs 	_ELHasTerm 					; done getting the constant.
.2389	20 51 24	jsr $2451			jsr 	ELShiftByteIn 				; shift byte into position.
.238c	4c 80 23	jmp $2380			jmp 	_ELCheckNext
.238f					_ELIsToken:
.238f	c9 85		cmp #$85			cmp 	#TOK_STR 					; handle strings.
.2391	f0 0f		beq $23a2			beq 	_ELIsString
.2393	c9 84		cmp #$84			cmp 	#TOK_FPC 					; if no, then check unary.
.2395	d0 5f		bne $23f6			bne 	_ELCheckUnary
.2397	8a		txa				txa 								; put X into A
.2398	c8		iny				iny 								; skip over the float marker
.2399	a2 18		ldx #$18		ldx	#24
.239b	20 a8 14	jsr $14a8		jsr	floatingpointHandler
.239e	aa		tax				tax 								; restore X
.239f	4c b8 23	jmp $23b8			jmp 	_ELHasTerm
.23a2					_ELIsString:
.23a2	98		tya				tya 								; address of string is codePtr+y+1
.23a3	38		sec				sec
.23a4	65 28		adc $28				adc 	codePtr
.23a6	95 48		sta $48,x			sta 	esInt0,x
.23a8	a5 29		lda $29				lda 	codePtr+1
.23aa	69 00		adc #$00			adc 	#0
.23ac	95 50		sta $50,x			sta 	esInt1,x
.23ae	a9 40		lda #$40			lda 	#$40 						; set type to string value
.23b0	95 40		sta $40,x			sta 	esType,x
.23b2	c8		iny				iny 								; skip over string.
.23b3	98		tya				tya
.23b4	38		sec				sec									; +1 for the length itself.
.23b5	71 28		adc ($28),y			adc 	(codePtr),y
.23b7	a8		tay				tay 								; and fall through to term loop code.
.23b8					_ELHasTerm:
.23b8	b1 28		lda ($28),y			lda 	(codePtr),y
.23ba	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; check in the correct range for binary tokens.
.23bc	90 04		bcc $23c2			bcc 	_ELPopExit
.23be	c9 99		cmp #$99			cmp 	#TOK_STRUCTST
.23c0	90 02		bcc $23c4			bcc 	_ELHasBinaryTerm
.23c2					_ELPopExit:
.23c2	68		pla				pla
.23c3					_ELExit:
.23c3	60		rts				rts
.23c4					_ELHasBinaryTerm:
.23c4	84 32		sty $32				sty 	tempShort 					; save position
.23c6	a8		tay				tay 								; use token as an index and get the precedence.
.23c7	b9 f9 23	lda $23f9,y			lda 	ELBinaryOperatorInfo-TOK_BINARYST,y
.23ca	a4 32		ldy $32				ldy 	tempShort 					; restore Y
.23cc	85 32		sta $32				sta 	tempShort 					; save precedence in memory.
.23ce	68		pla				pla 								; restore current level.
.23cf	c5 32		cmp $32				cmp 	tempShort 					; if current >= operator then exit
.23d1	b0 f0		bcs $23c3			bcs 	_ELExit
.23d3	48		pha				pha 								; save current level back on the stack.
.23d4	b1 28		lda ($28),y			lda 	(codePtr),y 				; save the binary operator on the stack and skip it.
.23d6	48		pha				pha
.23d7	c8		iny				iny
.23d8	e8		inx				inx 								; calculate the RHS at the operator precedence.
.23d9	a5 32		lda $32				lda 	tempShort
.23db	20 5d 23	jsr $235d			jsr 	EvaluateLevel
.23de	ca		dex				dex
.23df	68		pla				pla 								; get the operator back out.
.23e0					_ELExecuteA:
.23e0	86 32		stx $32				stx 	tempShort 					; upload the vectors. Would be nice to use jmp (aaaa,x)
.23e2	0a		asl a				asl 	a 							; but not practical. May use push/rts later.
.23e3	aa		tax				tax
.23e4	bd ce 1d	lda $1dce,x			lda 	Group0Vectors,x
.23e7	85 2a		sta $2a				sta 	temp0
.23e9	bd cf 1d	lda $1dcf,x			lda 	Group0Vectors+1,x
.23ec	85 2b		sta $2b				sta 	temp0+1
.23ee	a6 32		ldx $32				ldx 	tempShort
.23f0	20 3d 24	jsr $243d			jsr 	_ELCallTemp0
.23f3	4c b8 23	jmp $23b8			jmp 	_ELHasTerm 					; and loop back round.
.23f6					_ELCheckUnary:
.23f6	c8		iny				iny 								; skip over token.
.23f7	c9 90		cmp #$90			cmp 	#TKW_MINUS 					; is it - term
.23f9	f0 19		beq $2414			beq 	_ELMinus
.23fb	c9 97		cmp #$97			cmp 	#TKW_PLING 					; is it ! or ? term
.23fd	f0 2c		beq $242b			beq 	_ELIndirect
.23ff	c9 98		cmp #$98			cmp 	#TKW_QMARK
.2401	f0 28		beq $242b			beq 	_ELIndirect
.2403	c9 83		cmp #$83			cmp 	#TOK_SHIFT3 				; is it the unary extension.
.2405	f0 39		beq $2440			beq 	_ELExtension
.2407	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST 				; must be TOK_UNARYST ... TOK_TOKENS
.2409	90 04		bcc $240f			bcc 	_ELUSyntax
.240b	c9 c6		cmp #$c6			cmp 	#TOK_TOKENS
.240d	90 d1		bcc $23e0			bcc 	_ELExecuteA 				; if so do that token.
.240f					_ELUSyntax:
.240f	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.2411	20 76 11	jsr $1176		jsr	errorHandler
.2414					_ELMinus:
.2414	20 29 25	jsr $2529			jsr 	EvaluateNumericTerm 		; get a number to negate.
.2417	b5 40		lda $40,x			lda 	esType,x 					; is it integer
.2419	f0 0a		beq $2425			beq 	_ELMinusInteger
.241b	8a		txa				txa
.241c	a2 0c		ldx #$0c		ldx	#12
.241e	20 a8 14	jsr $14a8		jsr	floatingpointHandler
.2421	aa		tax				tax
.2422	4c b8 23	jmp $23b8			jmp 	_ELHasTerm
.2425					_ELMinusInteger:
.2425	20 7c 2a	jsr $2a7c			jsr 	MInt32Negate 				; do int negate
.2428	4c b8 23	jmp $23b8			jmp 	_ELHasTerm
.242b					_ELIndirect:
.242b	48		pha				pha 								; save what we want (TKW_QMARK TWK_PLING)
.242c	20 32 25	jsr $2532			jsr 	EvaluateIntegerTerm 		; integer address
.242f	68		pla				pla
.2430	49 97		eor #$97			eor 	#TKW_PLING 					; now $00 if !
.2432	f0 02		beq $2436			beq 	_ELHaveModifier
.2434	a9 20		lda #$20			lda 	#$20 						; now $00 if !, $20 if ?
.2436					_ELHaveModifier:
.2436	09 80		ora #$80			ora 	#$80						; make it the appropriate reference.
.2438	95 40		sta $40,x			sta 	esType,x 					; $80 for ! $A0 for ?
.243a	4c b8 23	jmp $23b8			jmp 	_ELHasTerm
.243d					_ELCallTemp0:
.243d	6c 2a 00	jmp ($002a)			jmp 	(temp0)
.2440					_ELExtension:
.2440	8a		txa				txa 								; stack pos in A
.2441	20 1d 14	jsr $141d		jsr	extensionHandler
.2444	aa		tax				tax 								; restore stack
.2445	4c b8 23	jmp $23b8			jmp 	_ELHasTerm
.2448					UnaryParenthesis:
.2448	a9 00		lda #$00			lda 	#0 							; ( is a unary function ....
.244a	20 5d 23	jsr $235d			jsr 	EvaluateLevel
.244d	20 35 2b	jsr $2b35			jsr 	CheckRightParen 			; check for )
.2450	60		rts				rts
.2451					ELShiftByteIn:
.2451	48		pha				pha 								; save bits to shift in.
.2452	b5 60		lda $60,x			lda 	esInt3,x 					; save top most byte
.2454	48		pha				pha
.2455	b5 58		lda $58,x			lda 	esInt2,x 					; shift everything left 8 bits
.2457	95 60		sta $60,x			sta 	esInt3,x
.2459	b5 50		lda $50,x			lda 	esInt1,x
.245b	95 58		sta $58,x			sta 	esInt2,x
.245d	b5 48		lda $48,x			lda 	esInt0,x
.245f	95 50		sta $50,x			sta 	esInt1,x
.2461	a9 00		lda #$00			lda 	#0
.2463	95 48		sta $48,x			sta 	esInt0,x
.2465	68		pla				pla 								; now A:TOS is a 5 byte register, shift right twice.
.2466	29 03		and #$03			and 	#3 							; only want lower 2 bits
.2468	09 04		ora #$04			ora 	#4  						; set bit 2 - when 1 we are done
.246a					_ELShiftLoop:
.246a	4a		lsr a				lsr 	a
.246b	76 60		ror $60,x			ror 	esInt3,x
.246d	76 58		ror $58,x			ror 	esInt2,x
.246f	76 50		ror $50,x			ror 	esInt1,x
.2471	76 48		ror $48,x			ror 	esInt0,x
.2473	c9 01		cmp #$01			cmp 	#1
.2475	d0 f3		bne $246a			bne 	_ELShiftLoop
.2477	68		pla				pla 								; get original 6 bit value and OR in.
.2478	29 3f		and #$3f			and 	#$3F
.247a	15 48		ora $48,x			ora 	esInt0,x
.247c	95 48		sta $48,x			sta 	esInt0,x
.247e	60		rts				rts
.247f					ELBinaryOperatorInfo:

;******  Processing file: main/evaluate/../../generated/binarystructinfo.inc

>247f	01					.byte	$01			; $86 and
>2480	01					.byte	$01			; $87 or
>2481	01					.byte	$01			; $88 xor
>2482	02					.byte	$02			; $89 >=
>2483	02					.byte	$02			; $8a <=
>2484	02					.byte	$02			; $8b >
>2485	02					.byte	$02			; $8c <
>2486	02					.byte	$02			; $8d =
>2487	02					.byte	$02			; $8e <>
>2488	03					.byte	$03			; $8f +
>2489	03					.byte	$03			; $90 -
>248a	04					.byte	$04			; $91 >>
>248b	04					.byte	$04			; $92 <<
>248c	04					.byte	$04			; $93 *
>248d	04					.byte	$04			; $94 /
>248e	04					.byte	$04			; $95 mod
>248f	05					.byte	$05			; $96 ^
>2490	06					.byte	$06			; $97 !
>2491	06					.byte	$06			; $98 ?
>2492	82					.byte	$82			; $99 repeat
>2493	82					.byte	$82			; $9a while
>2494	82					.byte	$82			; $9b for
>2495	82					.byte	$82			; $9c if
>2496	82					.byte	$82			; $9d defproc
>2497	80					.byte	$80			; $9e until
>2498	80					.byte	$80			; $9f wend
>2499	80					.byte	$80			; $a0 next
>249a	80					.byte	$80			; $a1 then
>249b	80					.byte	$80			; $a2 endif
>249c	80					.byte	$80			; $a3 endproc

;******  Return to file: main/evaluate/evaluate.asm


;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/event.asm

.249d					EventFunction:
.249d	20 93 25	jsr $2593			jsr 	EvaluateReference			; get the variable reference that tracks the event
.24a0	b5 40		lda $40,x			lda 	esType,x
.24a2	c9 80		cmp #$80			cmp 	#$80 						; must be integer reference
.24a4	d0 5b		bne $2501			bne 	_EFType
.24a6	20 42 2b	jsr $2b42			jsr 	CheckComma
.24a9	e8		inx				inx
.24aa	20 60 25	jsr $2560			jsr 	EvaluateInteger		 		; get the elapsed time between firing.
.24ad	20 35 2b	jsr $2b35			jsr 	CheckRightParen 			; finish off with the right bracket
.24b0	ca		dex				dex
.24b1	b5 50		lda $50,x			lda 	esInt1,x 					; check max of 32767, we use 16 bit for timers and
.24b3	29 80		and #$80			and 	#$80 						; it doesn't work > 32767
.24b5	15 58		ora $58,x			ora 	esInt2,x
.24b7	15 60		ora $60,x			ora 	esInt3,x
.24b9	d0 41		bne $24fc			bne 	_EFValue
.24bb	98		tya				tya
.24bc	48		pha				pha
.24bd	8a		txa				txa
.24be	48		pha				pha
.24bf	a2 18		ldx #$18		ldx	#24
.24c1	20 59 11	jsr $1159		jsr	deviceHandler
.24c4	84 2d		sty $2d				sty 	temp1+1
.24c6	85 2c		sta $2c				sta 	temp1
.24c8	68		pla				pla
.24c9	aa		tax				tax
.24ca	20 68 19	jsr $1968			jsr 	TOSToTemp0 					; set temp0 to the address of the event variable
.24cd	a0 03		ldy #$03			ldy 	#3							; if -ve
.24cf	b1 2a		lda ($2a),y			lda 	(temp0),y
.24d1	30 23		bmi $24f6			bmi 	_EFFail 	 				; straight out with fail, means "on pause".
.24d3	a0 00		ldy #$00			ldy 	#0 							; is the fire time zero ?
.24d5	b1 2a		lda ($2a),y			lda 	(temp0),y
.24d7	c8		iny				iny
.24d8	11 2a		ora ($2a),y			ora 	(temp0),y
.24da	f0 17		beq $24f3			beq 	_EFInitialise 				; if so, initialise the value but return false.
.24dc	a0 00		ldy #$00			ldy 	#0 							; calculate trigger - timer
.24de	38		sec				sec
.24df	b1 2a		lda ($2a),y			lda 	(temp0),y
.24e1	e5 2c		sbc $2c				sbc 	temp1
.24e3	c8		iny				iny
.24e4	b1 2a		lda ($2a),y			lda 	(temp0),y
.24e6	e5 2d		sbc $2d				sbc 	temp1+1
.24e8	10 0c		bpl $24f6			bpl 	_EFFail 					; if trigger >= timer then return False
.24ea	20 06 25	jsr $2506			jsr 	SetEventTimer 				; reset the timer for next time.
.24ed	20 be 2a	jsr $2abe			jsr	 	MInt32True 					; and treutn true as fired.
.24f0	68		pla				pla
.24f1	a8		tay				tay
.24f2	60		rts				rts
.24f3					_EFInitialise:
.24f3	20 06 25	jsr $2506			jsr		SetEventTimer 				; set trigger time to time + elapsed
.24f6					_EFFail:
.24f6	68		pla				pla
.24f7	a8		tay				tay
.24f8	20 c2 2a	jsr $2ac2			jsr 	MInt32False
.24fb	60		rts				rts
.24fc					_EFValue:
.24fc	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.24fe	20 76 11	jsr $1176		jsr	errorHandler
.2501					_EFType:
.2501	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.2503	20 76 11	jsr $1176		jsr	errorHandler
.2506					SetEventTimer:
.2506	a0 00		ldy #$00			ldy 	#0
.2508	18		clc				clc
.2509	a5 2c		lda $2c				lda 	temp1
.250b	75 49		adc $49,x			adc 	esInt0+1,x
.250d	91 2a		sta ($2a),y			sta		(temp0),y
.250f	c8		iny				iny
.2510	a5 2d		lda $2d				lda 	temp1+1
.2512	75 51		adc $51,x			adc 	esInt1+1,x
.2514	91 2a		sta ($2a),y			sta		(temp0),y
.2516	88		dey				dey
.2517	11 2a		ora ($2a),y			ora 	(temp0),y 					; if the result is non zero, exit
.2519	d0 04		bne $251f			bne 	_SETExit 					; zero means initialise.....
.251b	a9 01		lda #$01			lda 	#1 							; timer zero won't work, so make it 1, which is
.251d	91 2a		sta ($2a),y			sta 	(temp0),y 					; near enough.
.251f					_SETExit:
.251f	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/support.asm

.2520					EvaluateTerm:
.2520	a9 0f		lda #$0f			lda 	#15 						; no binary operator has this high a precedence.
.2522	20 5d 23	jsr $235d			jsr 	EvaluateLevel
.2525	20 0c 23	jsr $230c			jsr 	DereferenceOne
.2528	60		rts				rts
.2529					EvaluateNumericTerm:
.2529	20 20 25	jsr $2520			jsr 	EvaluateTerm
.252c	b5 40		lda $40,x			lda 	esType,x
.252e	0a		asl a				asl 	a 							; see if it's a string.
.252f	30 09		bmi $253a			bmi 	ENTType
.2531	60		rts				rts
.2532					EvaluateIntegerTerm:
.2532	20 20 25	jsr $2520			jsr 	EvaluateTerm
.2535	b5 40		lda $40,x			lda 	esType,x
.2537	d0 01		bne $253a			bne 	ENTType
.2539	60		rts				rts
.253a					ENTType:
.253a	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.253c	20 76 11	jsr $1176		jsr	errorHandler
.253f					EvaluateRoot:
.253f	a2 00		ldx #$00			ldx 	#0
.2541					Evaluate:
.2541	a9 00		lda #$00			lda 	#0
.2543	20 5d 23	jsr $235d			jsr 	EvaluateLevel
.2546	20 0c 23	jsr $230c			jsr 	DereferenceOne
.2549	60		rts				rts
.254a					EvaluateNumeric:
.254a	20 41 25	jsr $2541			jsr 	Evaluate
.254d	b5 40		lda $40,x			lda 	esType,x
.254f	0a		asl a				asl 	a 							; see if it's a string.
.2550	30 e8		bmi $253a			bmi 	ENTType
.2552	4a		lsr a				lsr 	a 							; shift float flag into carry.
.2553	4a		lsr a				lsr 	a
.2554	60		rts				rts
.2555					EvaluateString:
.2555	20 41 25	jsr $2541			jsr 	Evaluate
.2558	b5 40		lda $40,x			lda 	esType,x
.255a	0a		asl a				asl 	a 							; see if it's a string.
.255b	10 dd		bpl $253a			bpl 	ENTType
.255d	60		rts				rts
.255e					EvaluateRootInteger:
.255e	a2 00		ldx #$00			ldx 	#0
.2560					EvaluateInteger:
.2560	20 41 25	jsr $2541			jsr 	Evaluate
.2563	b5 40		lda $40,x			lda 	esType,x
.2565	d0 d3		bne $253a			bne 	ENTType
.2567	60		rts				rts
.2568					EvaluateSmallInteger:
.2568	20 60 25	jsr $2560			jsr 	EvaluateInteger
.256b	b5 50		lda $50,x			lda 	esInt1,x
.256d	15 58		ora $58,x			ora 	esInt2,x
.256f	15 60		ora $60,x			ora 	esInt3,x
.2571	d0 03		bne $2576			bne 	_ESIValue
.2573	b5 48		lda $48,x			lda 	esInt0,x
.2575	60		rts				rts
.2576					_ESIValue:
.2576	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.2578	20 76 11	jsr $1176		jsr	errorHandler
.257b					LinkEvaluate:
.257b	aa		tax				tax
.257c	20 41 25	jsr $2541			jsr 	Evaluate
.257f	8a		txa				txa
.2580	60		rts				rts
.2581					LinkEvaluateTerm:
.2581	aa		tax				tax
.2582	20 20 25	jsr $2520			jsr 	EvaluateTerm
.2585	8a		txa				txa
.2586	60		rts				rts
.2587					LinkEvaluateInteger:
.2587	aa		tax				tax
.2588	20 60 25	jsr $2560			jsr 	EvaluateInteger
.258b	8a		txa				txa
.258c	60		rts				rts
.258d					LinkEvaluateSmallInt:
.258d	aa		tax				tax
.258e	20 68 25	jsr $2568			jsr 	EvaluateSmallInteger
.2591	8a		txa				txa
.2592	60		rts				rts
.2593					EvaluateReference:
.2593	ad 90 24	lda $2490			lda 	ELBinaryOperatorInfo+TKW_PLING-TOK_BINARYST
.2596	38		sec				sec 								; sub 1 to allow a!x b?x to work.
.2597	e9 01		sbc #$01			sbc 	#1
.2599	20 5d 23	jsr $235d			jsr 	EvaluateLevel
.259c	b5 40		lda $40,x			lda 	esType,x
.259e	10 01		bpl $25a1			bpl 	_ERFail
.25a0	60		rts				rts
.25a1					_ERFail:
.25a1	a2 0b		ldx #$0b			ldx 	#ErrorID_NoReference
.25a3	20 76 11	jsr $1176		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary.asm

.25a6					UnaryLen:
.25a6	20 b4 25	jsr $25b4			jsr 	ULStart
.25a9					ULFinish:
.25a9	b1 2a		lda ($2a),y			lda 	(temp0),y 					; get length prefix
.25ab	a4 32		ldy $32				ldy 	tempShort 					; get Y back
.25ad	20 d1 2a	jsr $2ad1			jsr 	MInt32Set8Bit 				; write it out.
.25b0	20 35 2b	jsr $2b35			jsr 	CheckRightParen
.25b3	60		rts				rts
.25b4	20 55 25	jsr $2555	ULStart:jsr 	EvaluateString
.25b7	b5 48		lda $48,x			lda 	esInt0,x 					; copy address of string to temp0
.25b9	85 2a		sta $2a				sta 	temp0
.25bb	b5 50		lda $50,x			lda 	esInt1,x
.25bd	85 2b		sta $2b				sta 	temp0+1
.25bf	84 32		sty $32				sty 	tempShort 					; get length
.25c1	a0 00		ldy #$00			ldy 	#0
.25c3	60		rts				rts
.25c4					UnaryAsc:
.25c4	20 b4 25	jsr $25b4			jsr 	ULStart 					; same as LEN() get string, save Y, point to length.
.25c7	b1 2a		lda ($2a),y			lda 	(temp0),y 					; read length
.25c9	c8		iny				iny 		 						; point to first character, we can do LEN code after that
.25ca	c9 00		cmp #$00			cmp 	#0
.25cc	d0 db		bne $25a9			bne 	ULFinish 					; if length = 0 then error : asc("") -> error.
.25ce	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.25d0	20 76 11	jsr $1176		jsr	errorHandler
.25d3					UnaryAbs:
.25d3	20 4a 25	jsr $254a			jsr 	EvaluateNumeric 			; some numeric value
.25d6	b0 07		bcs $25df			bcs 	_UAFloat 					; CS then float, so use that function
.25d8	20 77 2a	jsr $2a77			jsr 	MInt32Absolute 				; int version
.25db	20 35 2b	jsr $2b35			jsr 	CheckRightParen
.25de	60		rts				rts
.25df					_UAFloat:
.25df	8a		txa				txa 								; float version
.25e0	a2 00		ldx #$00		ldx	#0
.25e2	20 a8 14	jsr $14a8		jsr	floatingpointHandler
.25e5	aa		tax				tax
.25e6	20 35 2b	jsr $2b35			jsr 	CheckRightParen
.25e9	60		rts				rts
.25ea					UnarySgn:
.25ea	20 4a 25	jsr $254a			jsr 	EvaluateNumeric 			; same as above but sign of value
.25ed	b0 07		bcs $25f6			bcs 	_USFloat
.25ef	20 af 2a	jsr $2aaf			jsr 	MInt32Sign
.25f2	20 35 2b	jsr $2b35			jsr 	CheckRightParen
.25f5	60		rts				rts
.25f6					_USFloat:
.25f6	8a		txa				txa
.25f7	a2 0e		ldx #$0e		ldx	#14
.25f9	20 a8 14	jsr $14a8		jsr	floatingpointHandler
.25fc	aa		tax				tax
.25fd	20 35 2b	jsr $2b35			jsr 	CheckRightParen
.2600	60		rts				rts
.2601					UnaryPeek:
.2601	20 2d 26	jsr $262d			jsr 	PDLCode 					; each has common setup code put reads 1,2 or 4 bytes
.2604	4c 21 26	jmp $2621			jmp 	PDLByte0
.2607					UnaryDeek:
.2607	20 2d 26	jsr $262d			jsr 	PDLCode
.260a	4c 1b 26	jmp $261b			jmp 	PDLByte1
.260d					UnaryLeek:
.260d	20 2d 26	jsr $262d			jsr 	PDLCode
.2610	a0 03		ldy #$03			ldy 	#3							; read 3-2
.2612	b1 2a		lda ($2a),y			lda 	(temp0),y
.2614	95 60		sta $60,x			sta 	esInt3,x
.2616	88		dey				dey
.2617	b1 2a		lda ($2a),y			lda 	(temp0),y
.2619	95 58		sta $58,x			sta 	esInt2,x
.261b					PDLByte1:
.261b	a0 01		ldy #$01			ldy 	#1
.261d	b1 2a		lda ($2a),y			lda 	(temp0),y
.261f	95 50		sta $50,x			sta 	esInt1,x
.2621					PDLByte0:
.2621	a0 00		ldy #$00			ldy 	#0
.2623	b1 2a		lda ($2a),y			lda 	(temp0),y
.2625	95 48		sta $48,x			sta 	esInt0,x
.2627	a4 32		ldy $32				ldy 	tempShort 					; restore Y
.2629	20 35 2b	jsr $2b35			jsr 	CheckRightParen 			; check right and return
.262c	60		rts				rts
.262d					PDLCode:
.262d	20 60 25	jsr $2560			jsr 	EvaluateInteger 			; some address
.2630	b5 48		lda $48,x			lda 	esInt0,x 					; copy address of string to temp0
.2632	85 2a		sta $2a				sta 	temp0
.2634	b5 50		lda $50,x			lda 	esInt1,x
.2636	85 2b		sta $2b				sta 	temp0+1
.2638	a9 00		lda #$00			lda 	#0 							; zero upper 3 bytes of result, type okay.
.263a	95 50		sta $50,x			sta 	esInt1,x 					; PEEK needs upper 3 cleared
.263c	95 58		sta $58,x			sta 	esInt2,x
.263e	95 60		sta $60,x			sta 	esInt3,x
.2640	84 32		sty $32				sty 	tempShort 					; save Y
.2642	60		rts				rts
.2643					Unary_Random:
.2643	20 f2 2a	jsr $2af2			jsr 	MInt32Random 				; generate random number.
.2646	b1 28		lda ($28),y			lda 	(codePtr),y 				; check followed by )
.2648	c9 c6		cmp #$c6			cmp 	#TKW_RPAREN
.264a	f0 08		beq $2654			beq 	_URExit
.264c	e8		inx				inx 								; load range 0..r-1 into +1
.264d	20 60 25	jsr $2560			jsr 	EvaluateInteger
.2650	ca		dex				dex
.2651	20 15 29	jsr $2915			jsr 	MInt32Modulus 				; calculate random % modulus
.2654					_URExit:
.2654	20 35 2b	jsr $2b35			jsr 	CheckRightParen 			; check right and return
.2657	60		rts				rts
.2658					Unary_Min:
.2658	a9 01		lda #$01			lda 	#1 							; c1 cmp c2 needs to be > e.g. c1 > c2
.265a	d0 02		bne $265e			bne 	UnaryMBody
.265c					Unary_Max:
.265c	a9 ff		lda #$ff			lda 	#$FF 						; c1 cmp c2 needs to be < e.g. c1 < c2
.265e					UnaryMBody:
.265e	48		pha				pha 								; save comparator on stack, shows min or max
.265f	20 41 25	jsr $2541			jsr 	Evaluate 					; get the first thing to check
.2662					_UnaryMLoop:
.2662	b1 28		lda ($28),y			lda 	(codePtr),y 				; found ), indicates end.
.2664	c8		iny				iny
.2665	c9 c6		cmp #$c6			cmp 	#TKW_RPAREN
.2667	f0 09		beq $2672			beq 	_UnaryMExit
.2669	c9 c8		cmp #$c8			cmp 	#TKW_COMMA 					; found , indicates more.
.266b	f0 07		beq $2674			beq 	_UnaryMCompare
.266d	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.266f	20 76 11	jsr $1176		jsr	errorHandler
.2672					_UnaryMExit:
.2672	68		pla				pla 								; done so throw comparator and return.
.2673	60		rts				rts
.2674					_UnaryMCompare:
.2674	e8		inx				inx 								; get the 2nd thing to evaluate
.2675	20 41 25	jsr $2541			jsr 	Evaluate
.2678	ca		dex				dex
.2679	20 0f 22	jsr $220f			jsr 	PerformComparison 			; this is part of evaluate/compare.asm
.267c	85 32		sta $32				sta 	tempShort 					; save result
.267e	68		pla				pla 								; get what we need
.267f	48		pha				pha
.2680	c5 32		cmp $32				cmp 	tempShort 					; did we get it
.2682	d0 de		bne $2662			bne 	_UnaryMLoop 				; no, try another value.
.2684	20 c2 2a	jsr $2ac2			jsr 	MInt32False 				; promote 2nd to 1st.
.2687	20 a6 29	jsr $29a6			jsr 	MInt32Add
.268a	4c 62 26	jmp $2662			jmp 	_UnaryMLoop
.268d					Unary_Page:
.268d	20 c2 2a	jsr $2ac2			jsr 	MInt32False 				; zero
.2690	ad c8 0a	lda $0ac8			lda 	basePage 					; copy base page address in.
.2693	95 48		sta $48,x			sta 	esInt0,x
.2695	ad c9 0a	lda $0ac9			lda 	basePage+1
.2698	95 50		sta $50,x			sta 	esInt1,x
.269a	60		rts				rts
.269b					UnaryReference:
.269b	a9 0f		lda #$0f			lda 	#15
.269d	20 5d 23	jsr $235d			jsr 	EvaluateLevel 				; evaluate term and don't deference.
.26a0	b5 40		lda $40,x			lda 	esType,x 					; check it's a reference.
.26a2	10 05		bpl $26a9			bpl 	UType
.26a4	a9 00		lda #$00			lda 	#0 							; make it an integer
.26a6	95 40		sta $40,x			sta 	esType,x
.26a8	60		rts				rts
.26a9					UType:
.26a9	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.26ab	20 76 11	jsr $1176		jsr	errorHandler
.26ae					UnaryHexMarker:
.26ae	4c 32 25	jmp $2532			jmp 	EvaluateIntegerTerm
.26b1					UnaryComplement:
.26b1	20 32 25	jsr $2532			jsr 	EvaluateIntegerTerm
.26b4	20 96 2a	jsr $2a96			jsr 	MInt32Not
.26b7	60		rts				rts
.26b8					UnaryIntToFloat:
.26b8	20 4a 25	jsr $254a			jsr 	EvaluateNumeric				; some number
.26bb	b5 40		lda $40,x			lda 	esType,x 					; if float already, exit
.26bd	d0 0b		bne $26ca			bne 	_UIFExit
.26bf	8a		txa				txa 								; convert and set type
.26c0	a2 1a		ldx #$1a		ldx	#26
.26c2	20 a8 14	jsr $14a8		jsr	floatingpointHandler
.26c5	aa		tax				tax
.26c6	a9 01		lda #$01			lda 	#1
.26c8	95 40		sta $40,x			sta 	esType,x
.26ca					_UIFExit:
.26ca	60		rts				rts
.26cb					UnaryFloatToInt:
.26cb	20 4a 25	jsr $254a			jsr 	EvaluateNumeric 			; the number
.26ce	b5 40		lda $40,x			lda 	esType,x 					; if int already exit
.26d0	f0 0b		beq $26dd			beq 	_UFIExit
.26d2	8a		txa				txa 								; convert to int
.26d3	a2 12		ldx #$12		ldx	#18
.26d5	20 a8 14	jsr $14a8		jsr	floatingpointHandler
.26d8	aa		tax				tax
.26d9	a9 00		lda #$00			lda 	#0 							; set type
.26db	95 40		sta $40,x			sta 	esType,x
.26dd					_UFIExit:
.26dd	60		rts				rts
.26de					UnaryAlloc:
.26de	e8		inx				inx 								; evaluate memory required
.26df	20 60 25	jsr $2560			jsr 	EvaluateInteger
.26e2	20 35 2b	jsr $2b35			jsr 	CheckRightParen
.26e5	ca		dex				dex
.26e6	b5 59		lda $59,x			lda 	esInt2+1,x 					; check at least in 64k range.
.26e8	15 61		ora $61,x			ora 	esInt3+1,x
.26ea	d0 19		bne $2705			bne 	_UABadValue
.26ec	20 c2 2a	jsr $2ac2			jsr 	MInt32False					; zero return.
.26ef	a5 36		lda $36				lda 	lowMemory+1 				; copy low memory in
.26f1	95 50		sta $50,x			sta 	esInt1,x
.26f3	a5 35		lda $35				lda 	lowMemory
.26f5	95 48		sta $48,x			sta 	esInt0,x
.26f7	18		clc				clc 								; add alloc required.
.26f8	75 49		adc $49,x			adc 	esInt0+1,x
.26fa	85 35		sta $35				sta 	lowMemory
.26fc	a5 36		lda $36				lda 	lowMemory+1
.26fe	75 51		adc $51,x			adc 	esInt1+1,x
.2700	85 36		sta $36				sta 	lowMemory+1
.2702	b0 01		bcs $2705			bcs		_UABadValue 				; overflow definitely bad.
.2704	60		rts				rts
.2705					_UABadValue:
.2705	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.2707	20 76 11	jsr $1176		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary2.asm

.270a					UnaryTimer:
.270a	20 35 2b	jsr $2b35			jsr 	CheckRightParen 			; no parameters
.270d	98		tya				tya
.270e	48		pha				pha
.270f	20 e9 2a	jsr $2ae9			jsr 	MInt32Zero 					; zero result
.2712	86 2a		stx $2a				stx 	temp0 						; returning in YA so can't use .pshx
.2714	a2 18		ldx #$18		ldx	#24
.2716	20 59 11	jsr $1159		jsr	deviceHandler
.2719	a6 2a		ldx $2a				ldx 	temp0						; restore X and update 16 bit result
.271b	95 48		sta $48,x			sta 	esInt0,x
.271d	98		tya				tya
.271e	95 50		sta $50,x			sta 	esInt1,x
.2720	68		pla				pla
.2721	a8		tay				tay
.2722	60		rts				rts
.2723					UnaryInkey:
.2723	20 35 2b	jsr $2b35			jsr 	CheckRightParen
.2726	86 2a		stx $2a				stx 	temp0
.2728	a2 08		ldx #$08		ldx	#8
.272a	20 59 11	jsr $1159		jsr	deviceHandler
.272d	a6 2a		ldx $2a				ldx 	temp0
.272f	20 d1 2a	jsr $2ad1			jsr 	MInt32Set8Bit
.2732	60		rts				rts
.2733					UnaryGet:
.2733	20 35 2b	jsr $2b35			jsr 	CheckRightParen
.2736	86 2a		stx $2a				stx 	temp0
.2738					_UGLoop:
.2738	a2 08		ldx #$08		ldx	#8
.273a	20 59 11	jsr $1159		jsr	deviceHandler
.273d	c9 00		cmp #$00			cmp 	#0
.273f	f0 f7		beq $2738			beq 	_UGLoop
.2741	a6 2a		ldx $2a				ldx 	temp0
.2743	20 d1 2a	jsr $2ad1			jsr 	MInt32Set8Bit
.2746	60		rts				rts
.2747					UnarySys:
.2747	20 60 25	jsr $2560			jsr 	EvaluateInteger 				; get the address
.274a	20 35 2b	jsr $2b35			jsr 	CheckRightParen
.274d	20 68 19	jsr $1968			jsr 	TOSToTemp0 						; copy call address to temp0
.2750	8a		txa				txa
.2751	48		pha				pha
.2752	98		tya				tya
.2753	48		pha				pha
.2754	ad 00 0a	lda $0a00			lda 	("A"-"A")*4+SingleLetterVar 	; load AXY
.2757	ae 5c 0a	ldx $0a5c			ldx 	("X"-"A")*4+SingleLetterVar
.275a	ac 60 0a	ldy $0a60			ldy 	("Y"-"A")*4+SingleLetterVar
.275d	20 6c 27	jsr $276c			jsr 	_CallTemp0
.2760	85 32		sta $32				sta 	tempShort 						; restore YX
.2762	68		pla				pla
.2763	a8		tay				tay
.2764	68		pla				pla
.2765	aa		tax				tax
.2766	a5 32		lda $32				lda 	tempShort
.2768	20 d1 2a	jsr $2ad1			jsr 	MInt32Set8Bit 					; return result.
.276b	60		rts				rts
.276c					_CallTemp0:
.276c	6c 2a 00	jmp ($002a)			jmp 	(temp0)

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unarystr.asm

.276f					ExecChr:
.276f	20 68 25	jsr $2568			jsr 	EvaluateSmallInteger		; character number 0-255
.2772	20 35 2b	jsr $2b35			jsr 	CheckRightParen				; right bracket
.2775	98		tya				tya
.2776	48		pha				pha
.2777	8a		txa				txa 								; A = stack
.2778	b4 48		ldy $48,x			ldy 	esInt0,x					; Y = character
.277a	a2 00		ldx #$00		ldx	#0
.277c	20 f2 2e	jsr $2ef2		jsr	stringHandler
.277f	aa		tax				tax 								; X = stack
.2780	68		pla				pla
.2781	a8		tay				tay
.2782	60		rts				rts
.2783					ExecLower:
.2783	38		sec				sec 								; set carry is lower
.2784	b0 01		bcs $2787			bcs 	ExecUpperLower
.2786					ExecUpper:
.2786	18		clc				clc 								; clear carry is upper
.2787					ExecUpperLower:
.2787	08		php				php 								; save carry
.2788	20 55 25	jsr $2555			jsr 	EvaluateString 				; string to stack,X
.278b	20 35 2b	jsr $2b35			jsr 	CheckRightParen 			; check closing right bracket.
.278e	28		plp				plp 								; restore carry, save Y
.278f	98		tya				tya
.2790	48		pha				pha
.2791	a9 00		lda #$00			lda 	#0 							; A zero if upper, 1 if lower.
.2793	2a		rol a				rol 	a
.2794	a8		tay				tay 								; now in Y
.2795	8a		txa				txa 								; do the substring and exit.
.2796	a2 08		ldx #$08		ldx	#8
.2798	20 f2 2e	jsr $2ef2		jsr	stringHandler
.279b	aa		tax				tax
.279c	68		pla				pla
.279d	a8		tay				tay
.279e	60		rts				rts
.279f					ExecLeft:
.279f	20 55 25	jsr $2555			jsr 	EvaluateString 				; string to stack,X
.27a2	20 42 2b	jsr $2b42			jsr 	CheckComma
.27a5	e8		inx				inx
.27a6	a9 01		lda #$01			lda 	#1 							; 1 for 2nd parameter.
.27a8	20 d1 2a	jsr $2ad1			jsr 	MInt32Set8Bit
.27ab	e8		inx				inx
.27ac	20 68 25	jsr $2568			jsr 	EvaluateSmallInteger 		; smallint 3rd parameter
.27af					ExecSubstring:
.27af	ca		dex				dex 								; fix up X
.27b0	ca		dex				dex
.27b1	20 35 2b	jsr $2b35			jsr 	CheckRightParen 			; check closing right bracket.
.27b4	8a		txa				txa 								; do the substring and exit.
.27b5	a2 0a		ldx #$0a		ldx	#10
.27b7	20 f2 2e	jsr $2ef2		jsr	stringHandler
.27ba	aa		tax				tax
.27bb	60		rts				rts
.27bc					ExecMid:
.27bc	20 55 25	jsr $2555			jsr 	EvaluateString 				; string to stack,X
.27bf	20 42 2b	jsr $2b42			jsr 	CheckComma
.27c2	e8		inx				inx
.27c3	20 68 25	jsr $2568			jsr 	EvaluateSmallInteger 		; smallint 2nd parameter
.27c6	c9 00		cmp #$00			cmp 	#0
.27c8	f0 15		beq $27df			beq 	_EMValue
.27ca	e8		inx				inx
.27cb	a9 ff		lda #$ff			lda 	#255 						; 255 default for 3nd parameter - this is optional.
.27cd	20 d1 2a	jsr $2ad1			jsr 	MInt32Set8Bit
.27d0	b1 28		lda ($28),y			lda 	(codePtr),y 				; is there a ) next
.27d2	c9 c6		cmp #$c6			cmp 	#TKW_RPAREN 				; if so, just MID$(a$,2)
.27d4	f0 d9		beq $27af			beq 	ExecSubString
.27d6	20 42 2b	jsr $2b42			jsr 	CheckComma
.27d9	20 68 25	jsr $2568			jsr 	EvaluateSmallInteger 		; smallint 2nd parameter
.27dc	4c af 27	jmp $27af			jmp 	ExecSubString
.27df					_EMValue:
.27df	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.27e1	20 76 11	jsr $1176		jsr	errorHandler
.27e4					ExecRight:
.27e4	20 55 25	jsr $2555			jsr 	EvaluateString 				; string to stack,X
.27e7	20 42 2b	jsr $2b42			jsr 	CheckComma
.27ea	e8		inx				inx
.27eb	20 68 25	jsr $2568			jsr 	EvaluateSmallInteger 		; smallint 2nd parameter.
.27ee	ca		dex				dex
.27ef	98		tya				tya
.27f0	48		pha				pha
.27f1	b5 48		lda $48,x			lda 	esInt0,x 					; copy address of string to temp0
.27f3	85 2a		sta $2a				sta 	temp0
.27f5	b5 50		lda $50,x			lda 	esInt1,x
.27f7	85 2b		sta $2b				sta 	temp0+1
.27f9	a0 00		ldy #$00			ldy 	#0 							; point to length
.27fb	b1 2a		lda ($2a),y			lda 	(temp0),y 					; get the length.
.27fd	18		clc				clc 								; add 1.
.27fe	69 01		adc #$01			adc 	#1
.2800	38		sec				sec
.2801	f5 49		sbc $49,x			sbc 	esInt0+1,x  				; subtract right count.
.2803	f0 02		beq $2807			beq		_ERMake1 					; if zero, make it 1.
.2805	b0 02		bcs $2809			bcs		_EROkay
.2807					_ERMake1:
.2807	a9 01		lda #$01			lda 	#1 							; start position.
.2809					_EROkay:
.2809	e8		inx				inx 								; set start pos.
.280a	95 48		sta $48,x			sta 	esInt0,x
.280c	e8		inx				inx
.280d	a9 ff		lda #$ff			lda 	#255 						; 255 default for 3nd parameter.
.280f	20 d1 2a	jsr $2ad1			jsr 	MInt32Set8Bit
.2812	68		pla				pla
.2813	a8		tay				tay
.2814	4c af 27	jmp $27af			jmp 	ExecSubString 				; do the substring code.

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32binary.asm

.2817					MInt32And:
.2817	b5 48		lda $48,x			lda 	esInt0,x
.2819	35 49		and $49,x			and 	esInt0+1,x
.281b	95 48		sta $48,x			sta 	esInt0,x
.281d	b5 50		lda $50,x			lda 	esInt1,x
.281f	35 51		and $51,x			and 	esInt1+1,x
.2821	95 50		sta $50,x			sta 	esInt1,x
.2823	b5 58		lda $58,x			lda 	esInt2,x
.2825	35 59		and $59,x			and 	esInt2+1,x
.2827	95 58		sta $58,x			sta 	esInt2,x
.2829	b5 60		lda $60,x			lda 	esInt3,x
.282b	35 61		and $61,x			and 	esInt3+1,x
.282d	95 60		sta $60,x			sta 	esInt3,x
.282f	60		rts				rts
.2830					MInt32Or:
.2830	b5 48		lda $48,x			lda 	esInt0,x
.2832	15 49		ora $49,x			ora 	esInt0+1,x
.2834	95 48		sta $48,x			sta 	esInt0,x
.2836	b5 50		lda $50,x			lda 	esInt1,x
.2838	15 51		ora $51,x			ora 	esInt1+1,x
.283a	95 50		sta $50,x			sta 	esInt1,x
.283c	b5 58		lda $58,x			lda 	esInt2,x
.283e	15 59		ora $59,x			ora 	esInt2+1,x
.2840	95 58		sta $58,x			sta 	esInt2,x
.2842	b5 60		lda $60,x			lda 	esInt3,x
.2844	15 61		ora $61,x			ora 	esInt3+1,x
.2846	95 60		sta $60,x			sta 	esInt3,x
.2848	60		rts				rts
.2849					MInt32Xor:
.2849	b5 48		lda $48,x			lda 	esInt0,x
.284b	55 49		eor $49,x			eor 	esInt0+1,x
.284d	95 48		sta $48,x			sta 	esInt0,x
.284f	b5 50		lda $50,x			lda 	esInt1,x
.2851	55 51		eor $51,x			eor 	esInt1+1,x
.2853	95 50		sta $50,x			sta 	esInt1,x
.2855	b5 58		lda $58,x			lda 	esInt2,x
.2857	55 59		eor $59,x			eor 	esInt2+1,x
.2859	95 58		sta $58,x			sta 	esInt2,x
.285b	b5 60		lda $60,x			lda 	esInt3,x
.285d	55 61		eor $61,x			eor 	esInt3+1,x
.285f	95 60		sta $60,x			sta 	esInt3,x
.2861	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32compare.asm

.2862					MInt32Compare:
.2862	b5 48		lda $48,x			lda 	esInt0,x 					; equality check first.
.2864	d5 49		cmp $49,x			cmp 	esInt0+1,x
.2866	d0 13		bne $287b			bne 	MInt32Compare2
.2868	b5 50		lda $50,x			lda 	esInt1,x
.286a	d5 51		cmp $51,x			cmp 	esInt1+1,x
.286c	d0 0d		bne $287b			bne 	MInt32Compare2
.286e	b5 58		lda $58,x			lda 	esInt2,x
.2870	d5 59		cmp $59,x			cmp 	esInt2+1,x
.2872	d0 07		bne $287b			bne 	MInt32Compare2
.2874	b5 60		lda $60,x			lda 	esInt3,x
.2876	55 61		eor $61,x			eor 	esInt3+1,x 					; EOR will return 0 if the same.
.2878	d0 01		bne $287b			bne 	MInt32Compare2
.287a	60		rts				rts
.287b					MInt32Compare2:
.287b	b5 48		lda $48,x			lda		esInt0,x 					; unsigned 32 bit comparison.
.287d	d5 49		cmp $49,x			cmp 	esInt0+1,x
.287f	b5 50		lda $50,x			lda		esInt1,x
.2881	f5 51		sbc $51,x			sbc 	esInt1+1,x
.2883	b5 58		lda $58,x			lda		esInt2,x
.2885	f5 59		sbc $59,x			sbc 	esInt2+1,x
.2887	b5 60		lda $60,x			lda		esInt3,x
.2889	f5 61		sbc $61,x			sbc 	esInt3+1,x
.288b	50 02		bvc $288f			bvc 	_I32LNoOverflow 			; make it signed 32 bit comparison
.288d	49 80		eor #$80			eor 	#$80
.288f					_I32LNoOverflow
.288f	30 03		bmi $2894			bmi 	MInt32CLess					; if -ve then return $FF
.2891	a9 01		lda #$01			lda 	#$01						; else return $01
.2893	60		rts				rts
.2894					MInt32CLess:
.2894	a9 ff		lda #$ff			lda 	#$FF
.2896	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32divide.asm

.2897					MInt32SDivide:
.2897	98		tya				tya  								; save Y, which is the count of negations
.2898	48		pha				pha
.2899	a0 00		ldy #$00			ldy 	#0 							; zero count
.289b	20 b3 28	jsr $28b3			jsr 	_MInt32SRemSign 			; unsign TOS
.289e	e8		inx				inx 								; unsign TOS+1
.289f	20 b3 28	jsr $28b3			jsr 	_MInt32SRemSign
.28a2	ca		dex				dex
.28a3	98		tya				tya 								; save sign count on stack
.28a4	48		pha				pha
.28a5	20 bc 28	jsr $28bc			jsr 	MInt32UDivide 				; unsigned division
.28a8	68		pla				pla 								; get sign count back
.28a9	29 01		and #$01			and 	#1 							; if it is odd, then negate result
.28ab	f0 03		beq $28b0			beq 	_I32SNoNeg
.28ad	20 7c 2a	jsr $2a7c			jsr 	MInt32Negate
.28b0					_I32SNoNeg:
.28b0	68		pla				pla 								; restoe Y and exit
.28b1	a8		tay				tay
.28b2	60		rts				rts
.28b3					_MInt32SRemSign:
.28b3	b5 60		lda $60,x			lda 	esInt3,x 					; is it -ve
.28b5	10 04		bpl $28bb			bpl 	_MInt32SRSExit
.28b7	c8		iny				iny 								; increment the sign count
.28b8	20 7c 2a	jsr $2a7c			jsr 	MInt32Negate 				; negate the value.
.28bb					_MInt32SRSExit:
.28bb	60		rts				rts
.28bc					MInt32UDivide:
.28bc	b5 49		lda $49,x			lda 	esInt0+1,x 					; check for division by zero
.28be	15 51		ora $51,x			ora 	esInt1+1,x
.28c0	15 52		ora $52,x			ora 	esInt1+2,x
.28c2	15 53		ora $53,x			ora 	esInt1+3,x
.28c4	f0 4a		beq $2910			beq 	_MInt32DZero
.28c6	e8		inx				inx 								; clear A
.28c7	e8		inx				inx
.28c8	20 c2 2a	jsr $2ac2			jsr 	MInt32False
.28cb	ca		dex				dex
.28cc	ca		dex				dex
.28cd	98		tya				tya 								; save Y on the stack
.28ce	48		pha				pha
.28cf	a0 20		ldy #$20			ldy 	#32 						; number of division passes
.28d1					_MInt32UDLoop:
.28d1	16 48		asl $48,x			asl 	esInt0,x					; shift QA left. First Q
.28d3	36 50		rol $50,x			rol 	esInt1,x
.28d5	36 58		rol $58,x			rol 	esInt2,x
.28d7	36 60		rol $60,x			rol 	esInt3,x
.28d9	36 4a		rol $4a,x			rol 	esInt0+2,x 					; then A.
.28db	36 52		rol $52,x			rol 	esInt1+2,x
.28dd	36 5a		rol $5a,x			rol 	esInt2+2,x
.28df	36 62		rol $62,x			rol 	esInt3+2,x
.28e1	38		sec				sec 								; calculate A-M saving result on the stack
.28e2	b5 4a		lda $4a,x			lda 	esInt0+2,x
.28e4	f5 49		sbc $49,x			sbc 	esInt0+1,x
.28e6	48		pha				pha
.28e7	b5 52		lda $52,x			lda 	esInt1+2,x
.28e9	f5 51		sbc $51,x			sbc 	esInt1+1,x
.28eb	48		pha				pha
.28ec	b5 5a		lda $5a,x			lda 	esInt2+2,x
.28ee	f5 59		sbc $59,x			sbc 	esInt2+1,x
.28f0	48		pha				pha
.28f1	b5 62		lda $62,x			lda 	esInt3+2,x
.28f3	f5 61		sbc $61,x			sbc 	esInt3+1,x
.28f5	90 10		bcc $2907			bcc		_MInt32NoSubtract 			; if A < M (e.g. carry clear) then reject this.
.28f7	95 62		sta $62,x			sta 	esInt3+2,x 					; write result back to A
.28f9	68		pla				pla
.28fa	95 5a		sta $5a,x			sta 	esInt2+2,x
.28fc	68		pla				pla
.28fd	95 52		sta $52,x			sta 	esInt1+2,x
.28ff	68		pla				pla
.2900	95 4a		sta $4a,x			sta 	esInt0+2,x
.2902	f6 48		inc $48,x			inc 	esInt0,x 					; sets bit 0 of Q - it was shifted left previously.
.2904	4c 0a 29	jmp $290a			jmp 	_MInt32Next 					; do the next iteration
.2907					_MInt32NoSubtract:
.2907	68		pla				pla
.2908	68		pla				pla
.2909	68		pla				pla
.290a					_MInt32Next:
.290a	88		dey				dey 								; do this 32 times.
.290b	d0 c4		bne $28d1			bne 	_MInt32UDLoop
.290d	68		pla				pla 								; restore Y and exit
.290e	a8		tay				tay
.290f	60		rts				rts
.2910					_MInt32DZero:
.2910	a2 05		ldx #$05			ldx 	#ErrorID_DivZero
.2912	20 76 11	jsr $1176		jsr	errorHandler
.2915					MInt32Modulus:
.2915	20 bc 28	jsr $28bc			jsr 	MInt32UDivide 				; do the division.
.2918	b5 62		lda $62,x			lda 	esInt3+2,x 					; copy 2nd on stack (the remainder) to the top.
.291a	95 60		sta $60,x			sta 	esInt3,x
.291c	b5 5a		lda $5a,x			lda 	esInt2+2,x
.291e	95 58		sta $58,x			sta 	esInt2,x
.2920	b5 52		lda $52,x			lda 	esInt1+2,x
.2922	95 50		sta $50,x			sta 	esInt1,x
.2924	b5 4a		lda $4a,x			lda 	esInt0+2,x
.2926	95 48		sta $48,x			sta 	esInt0,x
.2928	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32fromstr.asm

.0c0c					fs32Length:
>0c0c							.fill 	1
.2929					LinkInt32FromString:
.2929	aa		tax				tax
.292a	98		tya				tya
.292b	20 30 29	jsr $2930			jsr 	MInt32FromString
.292e	8a		txa				txa
.292f	60		rts				rts
.2930					MInt32FromString:
.2930	85 32		sta $32				sta 	tempShort 					; save base
.2932	98		tya				tya
.2933	48		pha				pha
.2934	a0 00		ldy #$00			ldy 	#0 							; get length of string to convert
.2936	b1 2a		lda ($2a),y			lda 	(temp0),y
.2938	8d 0c 0c	sta $0c0c			sta 	fs32Length
.293b	f0 65		beq $29a2			beq 	_I32FSFail2					; fail if length zero.
.293d	a0 01		ldy #$01			ldy 	#1 							; set index into string being read
.293f	b1 2a		lda ($2a),y			lda 	(temp0),y 					; look at first character
.2941	c9 2d		cmp #$2d			cmp 	#"-"						; is it a - character
.2943	d0 09		bne $294e			bne 	_I32FSNotNegative
.2945	ad 0c 0c	lda $0c0c			lda 	fs32Length 					; get length back.
.2948	c9 01		cmp #$01			cmp 	#1 							; if 1 it is just a - on its own so fail.
.294a	f0 56		beq $29a2			beq 	_I32FSFail2
.294c	a0 02		ldy #$02			ldy 	#2 							; first digit of the number.
.294e					_I32FSNotNegative:
.294e	a5 32		lda $32				lda 	tempShort 					; get the base back.
.2950	c0 02		cpy #$02			cpy 	#2 							; if we read a -ve (e.g. Y == 2)
.2952	d0 02		bne $2956			bne 	_I32FSNN2
.2954	09 80		ora #$80			ora 	#$80						; set bit 7, this indicates a negated result.
.2956					_I32FSNN2:
.2956	48		pha				pha 								; save base + final sign on stack.
.2957	20 c2 2a	jsr $2ac2			jsr 	MInt32False 				; zero the return value.
.295a					_I32FSMainLoop:
.295a	68		pla				pla 								; get the base back into tempShort
.295b	48		pha				pha
.295c	29 7f		and #$7f			and 	#$7F
.295e	85 32		sta $32				sta 	tempShort
.2960	b1 2a		lda ($2a),y			lda 	(temp0),y 					; look at next character.
.2962	c9 61		cmp #$61			cmp 	#"a" 						; fix up case.
.2964	90 02		bcc $2968			bcc 	_I32FSNotLC
.2966	e9 20		sbc #$20			sbc 	#32
.2968					_I32FSNotLC:
.2968	38		sec				sec 								; subtract 48 (ASCII "0") - ASCII to Hex conversion
.2969	e9 30		sbc #$30			sbc 	#"0"
.296b	90 34		bcc $29a1			bcc 	_I32FSFail 					; nothing more to do.
.296d	c9 0a		cmp #$0a			cmp 	#9+1 						; if it is 0-9 validate vs base.
.296f	90 06		bcc $2977			bcc 	_I32FSValidate
.2971	c9 11		cmp #$11			cmp 	#17 						; is it between 58 and 64 ? if so bad.
.2973	90 2c		bcc $29a1			bcc 	_I32FSFail
.2975	e9 07		sbc #$07			sbc 	#7 							; adjust into range so now character is 0->nnn
.2977					_I32FSValidate:
.2977	c5 32		cmp $32				cmp 	tempShort 					; compare against the base.
.2979	b0 26		bcs $29a1			bcs 	_I32FSFail 					; sorry, too large for this base, so fail.
.297b	48		pha				pha 								; save the new digit value.
.297c	e8		inx				inx 								; put base into next slot up on stack
.297d	a5 32		lda $32				lda 	tempShort
.297f	20 d1 2a	jsr $2ad1			jsr 	MInt32Set8Bit
.2982	ca		dex				dex
.2983	20 da 29	jsr $29da			jsr 	MInt32Multiply 				; multiply current by the base
.2986	e8		inx				inx
.2987	68		pla				pla  								; put additive into next slot
.2988	20 d1 2a	jsr $2ad1			jsr 	MInt32Set8Bit
.298b	ca		dex				dex
.298c	20 a6 29	jsr $29a6			jsr 	MInt32Add 					; and add it
.298f	c8		iny				iny 								; bump the character pointer
.2990	cc 0c 0c	cpy $0c0c			cpy 	fs32Length 					; until > length.
.2993	f0 c5		beq $295a			beq 	_I32FSMainLoop
.2995	90 c3		bcc $295a			bcc 	_I32FSMainLoop
.2997					_I32FSDone:
.2997	68		pla				pla 								; get base/final sign back
.2998	10 03		bpl $299d			bpl 	_I32FSNN3
.299a	20 7c 2a	jsr $2a7c			jsr 	MInt32Negate 				; negate the result.
.299d					_I32FSNN3:
.299d	68		pla				pla
.299e	a8		tay				tay
.299f	38		sec				sec
.29a0	60		rts				rts
.29a1					_I32FSFail:
.29a1	68		pla				pla
.29a2					_I32FSFail2:
.29a2	68		pla				pla
.29a3	a8		tay				tay
.29a4	18		clc				clc
.29a5	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32math.asm

.29a6					MInt32Add:
.29a6	18		clc				clc
.29a7	b5 48		lda $48,x			lda 	esInt0,x
.29a9	75 49		adc $49,x			adc 	esInt0+1,x
.29ab	95 48		sta $48,x			sta 	esInt0,x
.29ad	b5 50		lda $50,x			lda 	esInt1,x
.29af	75 51		adc $51,x			adc 	esInt1+1,x
.29b1	95 50		sta $50,x			sta 	esInt1,x
.29b3	b5 58		lda $58,x			lda 	esInt2,x
.29b5	75 59		adc $59,x			adc 	esInt2+1,x
.29b7	95 58		sta $58,x			sta 	esInt2,x
.29b9	b5 60		lda $60,x			lda 	esInt3,x
.29bb	75 61		adc $61,x			adc 	esInt3+1,x
.29bd	95 60		sta $60,x			sta 	esInt3,x
.29bf	60		rts				rts
.29c0					MInt32Sub:
.29c0	38		sec				sec
.29c1	b5 48		lda $48,x			lda 	esInt0,x
.29c3	f5 49		sbc $49,x			sbc 	esInt0+1,x
.29c5	95 48		sta $48,x			sta 	esInt0,x
.29c7	b5 50		lda $50,x			lda 	esInt1,x
.29c9	f5 51		sbc $51,x			sbc 	esInt1+1,x
.29cb	95 50		sta $50,x			sta 	esInt1,x
.29cd	b5 58		lda $58,x			lda 	esInt2,x
.29cf	f5 59		sbc $59,x			sbc 	esInt2+1,x
.29d1	95 58		sta $58,x			sta 	esInt2,x
.29d3	b5 60		lda $60,x			lda 	esInt3,x
.29d5	f5 61		sbc $61,x			sbc 	esInt3+1,x
.29d7	95 60		sta $60,x			sta 	esInt3,x
.29d9	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32multiply.asm

.29da					MInt32Multiply:
.29da	e8		inx				inx 								; copy 2nd -> 3rd
.29db	20 00 2a	jsr $2a00			jsr 	MInt32CopyUp
.29de	ca		dex				dex
.29df	20 00 2a	jsr $2a00			jsr 	MInt32CopyUp 				; copy 1st -> 2nd
.29e2	20 c2 2a	jsr $2ac2			jsr 	MInt32False 				; zero 1st.
.29e5					_I32Loop:
.29e5	b5 4a		lda $4a,x			lda 	esInt0+2,x 					; get low bit of 3rd
.29e7	29 01		and #$01			and 	#1
.29e9	f0 03		beq $29ee			beq 	_I32NoAdd 					; if set
.29eb	20 a6 29	jsr $29a6			jsr 	MInt32Add 					; add 2nd to 1st.
.29ee					_I32NoAdd:
.29ee	e8		inx				inx 								; shift 2nd left
.29ef	20 d7 2a	jsr $2ad7			jsr 	MInt32ShiftLeft
.29f2	e8		inx				inx  								; shift 3rd right
.29f3	20 e0 2a	jsr $2ae0			jsr 	MInt32ShiftRight
.29f6	20 e9 2a	jsr $2ae9			jsr 	MInt32Zero 					; check if zero.
.29f9	08		php				php 								; save status bits
.29fa	ca		dex				dex 	 							; point back to 1st
.29fb	ca		dex				dex
.29fc	28		plp				plp 								; get status bits
.29fd	d0 e6		bne $29e5			bne 	_I32Loop 					; if non-zero keep going.
.29ff	60		rts				rts
.2a00					MInt32CopyUp:
.2a00	b5 48		lda $48,x			lda 	esInt0,x
.2a02	95 49		sta $49,x			sta 	esInt0+1,x
.2a04	b5 50		lda $50,x			lda 	esInt1,x
.2a06	95 51		sta $51,x			sta 	esInt1+1,x
.2a08	b5 58		lda $58,x			lda 	esInt2,x
.2a0a	95 59		sta $59,x			sta 	esInt2+1,x
.2a0c	b5 60		lda $60,x			lda 	esInt3,x
.2a0e	95 61		sta $61,x			sta 	esInt3+1,x
.2a10	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32tostr.asm

>0c0d					MCharCount:	.fill 	1						; count of converted characters
.2a11					MLInt32ToString:
.2a11	aa		tax				tax									; module passes stack in A, base in Y
.2a12	98		tya				tya
.2a13	20 18 2a	jsr $2a18			jsr 	MInt32ToString
.2a16	8a		txa				txa
.2a17	60		rts				rts
.2a18					MInt32ToString:
.2a18	48		pha				pha 								; save base
.2a19	85 32		sta $32				sta 	tempShort 					; save target base.
.2a1b	a9 00		lda #$00			lda 	#0
.2a1d	8d 0d 0c	sta $0c0d			sta 	MCharCount 					; clear character count to 0
.2a20	98		tya				tya
.2a21	48		pha				pha
.2a22	a5 32		lda $32				lda 	tempShort 					; check if we are signed conversion
.2a24	10 10		bpl $2a36			bpl 	_I32TSUnsigned
.2a26	48		pha				pha 								; save base on stack.
.2a27	b5 60		lda $60,x			lda 	esInt3,x 					; is it actually negative
.2a29	10 08		bpl $2a33			bpl 	_I32TSNoFlip
.2a2b	a9 2d		lda #$2d			lda 	#"-" 						; write a '-' prefix out.
.2a2d	20 69 2a	jsr $2a69			jsr 	MI32WriteCharacter
.2a30	20 7c 2a	jsr $2a7c			jsr 	MInt32Negate 				; negate the value, so now it's positive.
.2a33					_I32TSNoFlip:
.2a33	68		pla				pla 								; get the base back
.2a34	29 7f		and #$7f			and 	#$7F 						; clear the sign flag so it's just a base now.
.2a36					_I32TSUnsigned:
.2a36	20 44 2a	jsr $2a44			jsr 	MI32DivideWrite 			; recursive code to output string.
.2a39	a0 00		ldy #$00			ldy 	#0 							; write charcount to first character.
.2a3b	ad 0d 0c	lda $0c0d			lda 	MCharCount
.2a3e	91 2a		sta ($2a),y			sta 	(temp0),y
.2a40	68		pla				pla
.2a41	a8		tay				tay
.2a42	68		pla				pla
.2a43	60		rts				rts
.2a44					MI32DivideWrite:
.2a44	48		pha				pha 								; save the divisor/base
.2a45	e8		inx				inx 								; write in the dividing position.
.2a46	20 d1 2a	jsr $2ad1			jsr 	MInt32Set8Bit
.2a49	ca		dex				dex
.2a4a	20 bc 28	jsr $28bc			jsr 	MInt32UDivide 				; divide number by base.
.2a4d	68		pla				pla 								; get the base into Y
.2a4e	a8		tay				tay
.2a4f	b5 4a		lda $4a,x			lda 	esInt0+2,x 					; get the remainder and push on the stack.
.2a51	48		pha				pha
.2a52	20 e9 2a	jsr $2ae9			jsr 	MInt32Zero 					; is the result zero ?
.2a55	f0 04		beq $2a5b			beq 	_I32NoRecurse 				; if so, don't recurse.
.2a57	98		tya				tya 								; put base into A
.2a58	20 44 2a	jsr $2a44			jsr 	MI32DivideWrite 				; and jsr the dividor recursively.
.2a5b					_I32NoRecurse:
.2a5b	68		pla				pla 								; get the remainder back
.2a5c	c9 0a		cmp #$0a			cmp 	#10  						; handle hexadecimals, now converting to ASCII
.2a5e	90 02		bcc $2a62			bcc 	_I32NotHex
.2a60	69 06		adc #$06			adc 	#7-1
.2a62					_I32NotHex:
.2a62	18		clc				clc 								; make it ASCII
.2a63	69 30		adc #$30			adc 	#48
.2a65	20 69 2a	jsr $2a69			jsr 	MI32WriteCharacter 			; write the character out
.2a68	60		rts				rts 								; and exit.
.2a69					MI32WriteCharacter:
.2a69	ee 0d 0c	inc $0c0d			inc 	MCharCount 					; bump count (space for leading count)
.2a6c	ac 0d 0c	ldy $0c0d			ldy 	MCharCount 					; get position
.2a6f	91 2a		sta ($2a),y			sta 	(temp0),y 					; write out with trailing 0
.2a71	c8		iny				iny
.2a72	a9 00		lda #$00			lda 	#0
.2a74	91 2a		sta ($2a),y			sta 	(temp0),y
.2a76	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32unary.asm

>0c0e					MSeed32:	.fill 	4							; random number seed.
.2a77					MInt32Absolute:
.2a77	b5 60		lda $60,x			lda 	esInt3,x 					; use negate code if -ve.
.2a79	30 01		bmi $2a7c			bmi 	MInt32Negate
.2a7b	60		rts				rts
.2a7c					MInt32Negate:
.2a7c	38		sec				sec 								; subtract from zero.
.2a7d	a9 00		lda #$00			lda 	#0
.2a7f	f5 48		sbc $48,x			sbc 	esInt0,x
.2a81	95 48		sta $48,x			sta 	esInt0,x
.2a83	a9 00		lda #$00			lda 	#0
.2a85	f5 50		sbc $50,x			sbc 	esInt1,x
.2a87	95 50		sta $50,x			sta 	esInt1,x
.2a89	a9 00		lda #$00			lda 	#0
.2a8b	f5 58		sbc $58,x			sbc 	esInt2,x
.2a8d	95 58		sta $58,x			sta 	esInt2,x
.2a8f	a9 00		lda #$00			lda 	#0
.2a91	f5 60		sbc $60,x			sbc 	esInt3,x
.2a93	95 60		sta $60,x			sta 	esInt3,x
.2a95	60		rts				rts
.2a96					MInt32Not:
.2a96	b5 48		lda $48,x			lda 	esInt0,x 					; one's complement all four.
.2a98	49 ff		eor #$ff			eor 	#$FF
.2a9a	95 48		sta $48,x			sta 	esInt0,x
.2a9c	b5 50		lda $50,x			lda 	esInt1,x
.2a9e	49 ff		eor #$ff			eor 	#$FF
.2aa0	95 50		sta $50,x			sta 	esInt1,x
.2aa2	b5 58		lda $58,x			lda 	esInt2,x
.2aa4	49 ff		eor #$ff			eor 	#$FF
.2aa6	95 58		sta $58,x			sta 	esInt2,x
.2aa8	b5 60		lda $60,x			lda 	esInt3,x
.2aaa	49 ff		eor #$ff			eor 	#$FF
.2aac	95 60		sta $60,x			sta 	esInt3,x
.2aae	60		rts				rts
.2aaf					MInt32Sign:
.2aaf	b5 60		lda $60,x			lda 	esInt3,x					; look at MSB
.2ab1	30 0b		bmi $2abe			bmi 	MInt32True 					; if set return -1 (true)
.2ab3	20 e9 2a	jsr $2ae9			jsr 	MInt32Zero 					; is it zero ?
.2ab6	f0 0a		beq $2ac2			beq 	MInt32False 				; if zero return 0 (false)
.2ab8	20 c2 2a	jsr $2ac2			jsr 	MInt32False 				; > 0 return 1, by setting it to zero
.2abb	f6 48		inc $48,x			inc 	esInt0,x  					; and bumping the LSB.
.2abd	60		rts				rts
.2abe					MInt32True:
.2abe	a9 ff		lda #$ff			lda 	#$FF 						; set to $FFFFFFFF
.2ac0	d0 02		bne $2ac4			bne 	MInt32WriteAll
.2ac2					MInt32False:
.2ac2	a9 00		lda #$00			lda 	#0
.2ac4					MInt32WriteAll:
.2ac4	95 48		sta $48,x			sta 	esInt0,x
.2ac6					MInt32Write123:
.2ac6	95 50		sta $50,x			sta 	esInt1,x
.2ac8	95 58		sta $58,x			sta 	esInt2,x
.2aca	95 60		sta $60,x			sta 	esInt3,x
.2acc	a9 00		lda #$00			lda 	#$00						; and make it an integer
.2ace	95 40		sta $40,x			sta 	esType,x
.2ad0	60		rts				rts
.2ad1					MInt32Set8Bit:
.2ad1	95 48		sta $48,x			sta 	esInt0,x 					; coopt above function to write
.2ad3	a9 00		lda #$00			lda 	#0 							; a value 0-255
.2ad5	f0 ef		beq $2ac6			beq		MInt32Write123
.2ad7					MInt32ShiftLeft:
.2ad7	16 48		asl $48,x			asl 	esInt0,x
.2ad9	36 50		rol $50,x			rol	 	esInt1,x
.2adb	36 58		rol $58,x			rol	 	esInt2,x
.2add	36 60		rol $60,x			rol	 	esInt3,x
.2adf	60		rts				rts
.2ae0					MInt32ShiftRight:
.2ae0	56 60		lsr $60,x			lsr 	esInt3,x
.2ae2	76 58		ror $58,x			ror 	esInt2,x
.2ae4	76 50		ror $50,x			ror 	esInt1,x
.2ae6	76 48		ror $48,x			ror 	esInt0,x
.2ae8	60		rts				rts
.2ae9					MInt32Zero:
.2ae9	b5 48		lda $48,x			lda 	esInt0,x
.2aeb	15 50		ora $50,x			ora 	esInt1,x
.2aed	15 58		ora $58,x			ora 	esInt2,x
.2aef	15 60		ora $60,x			ora 	esInt3,x
.2af1	60		rts				rts
.2af2					MInt32Random:
.2af2	98		tya				tya
.2af3	48		pha				pha
.2af4	a0 07		ldy #$07			ldy 	#7 							; do it 7 times
.2af6	ad 0e 0c	lda $0c0e			lda 	MSeed32+0 					; check the seed isn't zero
.2af9	d0 03		bne $2afe			bne 	_Random1
.2afb	a8		tay				tay 								; if so do it 256 times
.2afc	a9 aa		lda #$aa			lda		#$AA 						; and use this to seed the seed....
.2afe					_Random1:
.2afe	0a		asl a				asl 	a
.2aff	2e 0f 0c	rol $0c0f			rol 	MSeed32+1
.2b02	2e 10 0c	rol $0c10			rol 	MSeed32+2
.2b05	2e 11 0c	rol $0c11			rol 	MSeed32+3
.2b08	90 02		bcc $2b0c			bcc 	_Random2
.2b0a	49 c5		eor #$c5			eor 	#$C5
.2b0c					_Random2:
.2b0c	88		dey				dey
.2b0d	d0 ef		bne $2afe			bne 	_Random1
.2b0f	8d 0e 0c	sta $0c0e			sta 	MSeed32+0 					; copy the seed in.
.2b12	95 48		sta $48,x			sta 	esInt0,x
.2b14	ad 0f 0c	lda $0c0f			lda 	MSeed32+1
.2b17	95 50		sta $50,x			sta 	esInt1,x
.2b19	ad 10 0c	lda $0c10			lda 	MSeed32+2
.2b1c	95 58		sta $58,x			sta 	esInt2,x
.2b1e	ad 11 0c	lda $0c11			lda 	MSeed32+3
.2b21	95 60		sta $60,x			sta 	esInt3,x
.2b23	68		pla				pla
.2b24	a8		tay				tay
.2b25	a9 00		lda #$00			lda 	#0
.2b27	95 40		sta $40,x			sta 	esType,x
.2b29	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/utility/check.asm

.2b2a					CheckToken:
.2b2a	d1 28		cmp ($28),y			cmp 	(codePtr),y
.2b2c	d0 02		bne $2b30			bne 	_CTError
.2b2e	c8		iny				iny
.2b2f	60		rts				rts
.2b30					_CTError:
.2b30	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.2b32	20 76 11	jsr $1176		jsr	errorHandler
.2b35					CheckRightParen:
.2b35	b1 28		lda ($28),y			lda 	(codePtr),y
.2b37	c8		iny				iny
.2b38	c9 c6		cmp #$c6			cmp 	#TKW_RPAREN
.2b3a	d0 01		bne $2b3d			bne 	_CRPError
.2b3c	60		rts				rts
.2b3d					_CRPError:
.2b3d	a2 09		ldx #$09			ldx 	#ErrorID_MissingRP
.2b3f	20 76 11	jsr $1176		jsr	errorHandler
.2b42					CheckComma:
.2b42	b1 28		lda ($28),y			lda 	(codePtr),y
.2b44	c8		iny				iny
.2b45	c9 c8		cmp #$c8			cmp 	#TKW_COMMA
.2b47	d0 01		bne $2b4a			bne 	_CCError
.2b49	60		rts				rts
.2b4a					_CCError:
.2b4a	a2 0a		ldx #$0a			ldx 	#ErrorID_MissingComma
.2b4c	20 76 11	jsr $1176		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/utility/coldwarmstart.asm

.2b4f					ColdStart:
.2b4f	a2 ff		ldx #$ff			ldx 	#$FF 						; clear the stack
.2b51	9a		txs				txs
.2b52	a2 04		ldx #$04		ldx	#4
.2b54	20 59 11	jsr $1159		jsr	deviceHandler
.2b57	a9 00		lda #$00			lda 	#(programMemory) & $FF
.2b59	8d c8 0a	sta $0ac8			sta 	basePage
.2b5c	a9 39		lda #$39			lda 	#(programMemory) >> 8
.2b5e	8d c9 0a	sta $0ac9			sta 	1+(basePage)
.2b61	a9 00		lda #$00			lda 	#($9800) & $FF
.2b63	8d cc 0a	sta $0acc			sta 	endMemory
.2b66	a9 98		lda #$98			lda 	#($9800) >> 8
.2b68	8d cd 0a	sta $0acd			sta 	1+(endMemory)
.2b6b	a2 00		ldx #$00		ldx	#0
.2b6d	20 75 16	jsr $1675		jsr	interactionHandler
.2b70					WarmStart:
.2b70	a2 02		ldx #$02		ldx	#2
.2b72	20 75 16	jsr $1675		jsr	interactionHandler

;******  Return to file: main/main.asm


;******  Processing file: main/utility/scanner.asm

.2b75					ScanForward:
.2b75	85 2c		sta $2c				sta 	temp1 						; save tokens to search in temp1/temp1+1
.2b77	86 2d		stx $2d				stx 	temp1+1
.2b79	a9 00		lda #$00			lda 	#0 							; temp2 counts structure levels.
.2b7b	85 2e		sta $2e				sta 	temp2
.2b7d	b1 28		lda ($28),y	_SFLoop:lda 	(codePtr),y 				; look at the next token.
.2b7f	c8		iny				iny
.2b80	a6 2e		ldx $2e				ldx 	temp2 						; check structure levels are zero.
.2b82	d0 08		bne $2b8c			bne 	_SFNoCheck 					; if so, check token against entered values.
.2b84	c5 2c		cmp $2c				cmp 	temp1 						; if either matches, we've reached the token
.2b86	f0 24		beq $2bac			beq 	_SFExit 					; at the same strcture depth.
.2b88	c5 2d		cmp $2d				cmp 	temp1+1
.2b8a	f0 20		beq $2bac			beq 	_SFExit
.2b8c					_SFNoCheck:
.2b8c	c9 80		cmp #$80			cmp 	#$80 						; if it is 00-7F (variable/number) just skip it.
.2b8e	90 ed		bcc $2b7d			bcc 	_SFLoop
.2b90	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; $80-$85 is various specials.
.2b92	90 19		bcc $2bad			bcc 	_SFSpecials
.2b94	c9 99		cmp #$99			cmp 	#TOK_STRUCTST 				; if < structure start then continue
.2b96	90 e5		bcc $2b7d			bcc 	_SFLoop
.2b98	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST 				; if >= unary start (after structure) then continue.
.2b9a	b0 e1		bcs $2b7d			bcs 	_SFLoop
.2b9c	aa		tax				tax  								; token in X, and look up the adjuster.
.2b9d	bd f9 23	lda $23f9,x			lda 	ELBinaryOperatorInfo-TOK_BINARYST,x
.2ba0	38		sec				sec 								; convert to an offset ($FF,$01)
.2ba1	e9 81		sbc #$81			sbc 	#$81
.2ba3	18		clc				clc 								; add to depth
.2ba4	65 2e		adc $2e				adc 	temp2
.2ba6	85 2e		sta $2e				sta 	temp2
.2ba8	10 d3		bpl $2b7d			bpl 	_SFLoop 					; +ve okay to continue
.2baa	30 35		bmi $2be1			bmi 	_SFError 					; if gone -ve then we have a nesting error
.2bac	60		rts		_SFExit:rts
.2bad					_SFSpecials:
.2bad	c9 80		cmp #$80			cmp 	#TOK_EOL 					; $80, advance to next line.
.2baf	f0 14		beq $2bc5			beq 	_SFNextLine
.2bb1	c9 84		cmp #$84			cmp 	#TOK_FPC					; $84, skip embedded float
.2bb3	f0 31		beq $2be6			beq 	_SFFloatSkip
.2bb5	c9 85		cmp #$85			cmp 	#TOK_STR 					; $85, skip string
.2bb7	f0 04		beq $2bbd			beq 	_SFSkipString
.2bb9	c8		iny				iny									; $81,$82,$83 shift, so just advance over the shifted
.2bba	4c 7d 2b	jmp $2b7d			jmp 	_SFLoop 					; token.
.2bbd					_SFSkipString:
.2bbd	98		tya				tya
.2bbe	38		sec				sec
.2bbf	71 28		adc ($28),y			adc 	(codePtr),y
.2bc1	a8		tay				tay
.2bc2	4c 7d 2b	jmp $2b7d			jmp 	_SFLoop
.2bc5					_SFNextLine:
.2bc5	a0 00		ldy #$00			ldy 	#0 							; get offset
.2bc7	b1 28		lda ($28),y			lda 	(codePtr),y
.2bc9	18		clc				clc 								; add to code pointer.
.2bca	65 28		adc $28				adc 	codePtr
.2bcc	85 28		sta $28				sta 	codePtr
.2bce	90 02		bcc $2bd2			bcc		_SFNLNoCarry
.2bd0	e6 29		inc $29				inc 	codePtr+1
.2bd2					_SFNLNoCarry:
.2bd2	b1 28		lda ($28),y			lda 	(codePtr),y 				; reached the end of the program.
.2bd4	d0 a7		bne $2b7d			bne		_SFLoop 					; no go round again
.2bd6	a5 2c		lda $2c				lda 	temp1
.2bd8	c9 d9		cmp #$d9			cmp 	#TKW_DATA 					; if searching for Data different error.
.2bda	d0 05		bne $2be1			bne 	_SFError 					; read uses this to search for data statements
.2bdc	a2 1c		ldx #$1c			ldx 	#ErrorID_DataError
.2bde	20 76 11	jsr $1176		jsr	errorHandler
.2be1					_SFError:
.2be1	a2 14		ldx #$14			ldx 	#ErrorID_Struct
.2be3	20 76 11	jsr $1176		jsr	errorHandler
.2be6					_SFFloatSkip:
.2be6	4c c4 1d	jmp $1dc4			jmp 	Unimplemented

;******  Return to file: main/main.asm


;******  Processing file: main/utility/stack.asm

.0078					rsPointer:
>0078							.fill 	2							; to TOS, which is the current top-token.
.2be9					RSReset:
.2be9	a9 ff		lda #$ff			lda 	#(returnStack+retStackSize-1) & $FF
.2beb	85 78		sta $78				sta 	rsPointer
.2bed	a9 09		lda #$09			lda 	#(returnStack+retStackSize-1) >> 8
.2bef	85 79		sta $79				sta 	1+(rsPointer)
.2bf1	a9 ff		lda #$ff			lda 	#$FF 						; put a duff marker on TOS, so nothing will pop
.2bf3	8d ff 09	sta $09ff			sta 	returnStack+retStackSize-1
.2bf6	60		rts				rts
.2bf7					RSClaim:
.2bf7	84 32		sty $32				sty 	tempShort 					; preserve Y
.2bf9	48		pha				pha 								; save marker on stack.
.2bfa	8a		txa				txa 								; get bytes required.
.2bfb	38		sec				sec
.2bfc	49 ff		eor #$ff			eor 	#$FF 						; add to rsPointer using 2's complement.
.2bfe	65 78		adc $78				adc 	rsPointer
.2c00	85 78		sta $78				sta 	rsPointer
.2c02	a5 79		lda $79				lda 	rsPointer+1
.2c04	69 ff		adc #$ff			adc 	#$FF
.2c06	85 79		sta $79				sta 	rsPointer+1
.2c08	c9 08		cmp #$08			cmp 	#returnStack>>8 			; overflow. underflow actually :)
.2c0a	90 08		bcc $2c14			bcc 	_RSCOverflow
.2c0c	68		pla				pla 								; get marker back
.2c0d	a0 00		ldy #$00			ldy 	#0 							; write marker out.
.2c0f	91 78		sta ($78),y			sta 	(rsPointer),y
.2c11	a4 32		ldy $32				ldy 	tempShort 					; restore Y and exit
.2c13	60		rts				rts
.2c14					_RSCOverflow:
.2c14	a2 16		ldx #$16			ldx 	#ErrorID_RetStack
.2c16	20 76 11	jsr $1176		jsr	errorHandler
.2c19					RSFree:
.2c19	18		clc				clc
.2c1a	65 78		adc $78				adc 	rsPointer
.2c1c	85 78		sta $78				sta 	rsPointer
.2c1e	90 02		bcc $2c22			bcc 	_RSFExit
.2c20	e6 79		inc $79				inc 	rsPointer+1
.2c22					_RSFExit:
.2c22	60		rts				rts
.2c23					RSSavePosition:
.2c23	84 32		sty $32				sty 	tempShort 					; save Y position
.2c25	a8		tay				tay 								; this is where we write it.
.2c26	a5 28		lda $28				lda 	codePtr 					; write codePointer out
.2c28	91 78		sta ($78),y			sta 	(rsPointer),y
.2c2a	c8		iny				iny
.2c2b	a5 29		lda $29				lda 	codePtr+1
.2c2d	91 78		sta ($78),y			sta 	(rsPointer),y
.2c2f	c8		iny				iny
.2c30	a5 32		lda $32				lda 	tempShort 					; write the Y position out.
.2c32	91 78		sta ($78),y			sta 	(rsPointer),y
.2c34	a8		tay				tay 								; fix Y back again to original value
.2c35	60		rts				rts
.2c36					RSLoadPosition:
.2c36	a8		tay				tay
.2c37	b1 78		lda ($78),y			lda 	(rsPointer),y 				; read codePointer back
.2c39	85 28		sta $28				sta 	codePtr
.2c3b	c8		iny				iny
.2c3c	b1 78		lda ($78),y			lda 	(rsPointer),y
.2c3e	85 29		sta $29				sta 	codePtr+1
.2c40	c8		iny				iny
.2c41	b1 78		lda ($78),y			lda 	(rsPointer),y 				; and the offset
.2c43	a8		tay				tay 								; to Y
.2c44	60		rts				rts

;******  Return to file: main/main.asm

.2c45					mainHandler:
.2c45	7c 48 2c	jmp ($2c48,x)			jmp 	(mainVectors,x)
.2c48					mainVectors:
>2c48	35 2b					.word CheckRightParen      ; index 0
>2c4a	8a 16					.word XCommandClear        ; index 2
>2c4c	7b 25					.word LinkEvaluate         ; index 4
>2c4e	87 25					.word LinkEvaluateInteger  ; index 6
>2c50	8d 25					.word LinkEvaluateSmallInt ; index 8
>2c52	81 25					.word LinkEvaluateTerm     ; index 10
>2c54	11 2a					.word MLInt32ToString      ; index 12
>2c56	4e 1b					.word Command_XNew         ; index 14
>2c58	12 1c					.word PrintString          ; index 16
>2c5a	66 1d					.word Command_RunFrom      ; index 18
>2c5c	29 29					.word LinkInt32FromString  ; index 20

;******  Return to file: basic.asm

.2c5e					section_end_main:
.2c5e					section_start_string:

;******  Processing file: string/string.asm


;******  Processing file: string/chr.asm

.2c5e					StringChrs:
.2c5e	aa		tax				tax 								; set up stack
.2c5f	a9 02		lda #$02			lda 	#2
.2c61	20 18 2d	jsr $2d18			jsr 	AllocateSoftString
.2c64	98		tya				tya
.2c65	20 3e 2d	jsr $2d3e			jsr 	WriteSoftString
.2c68	20 6d 2c	jsr $2c6d			jsr 	ReturnSoftString
.2c6b	8a		txa				txa
.2c6c	60		rts				rts
.2c6d					ReturnSoftString:
.2c6d	a5 7a		lda $7a				lda 	softMemAlloc 				; copy address
.2c6f	95 48		sta $48,x			sta 	esInt0,x
.2c71	a5 7b		lda $7b				lda 	softMemAlloc+1
.2c73	95 50		sta $50,x			sta 	esInt1,x
.2c75	a9 00		lda #$00			lda 	#0 							; zero upper bytes
.2c77	95 58		sta $58,x			sta 	esInt2,x
.2c79	95 60		sta $60,x			sta 	esInt3,x
.2c7b	a9 40		lda #$40			lda 	#$40 						; type string.
.2c7d	95 40		sta $40,x			sta 	esType,x
.2c7f	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/compare.asm

.2c80					STRCompare:
.2c80	48		pha				pha 								; save A
.2c81	aa		tax				tax 								; put stack pos in X
.2c82	98		tya				tya
.2c83	48		pha				pha
.2c84	20 b8 2c	jsr $2cb8			jsr 	CopyStringPair 				; copy strings to temp0,temp1
.2c87	a0 00		ldy #$00			ldy 	#0 							; get the smaller of the two string sizes.
.2c89	b1 2a		lda ($2a),y			lda 	(temp0),y
.2c8b	d1 2c		cmp ($2c),y			cmp 	(temp1),y
.2c8d	90 02		bcc $2c91			bcc 	_SCNotSmaller
.2c8f	b1 2c		lda ($2c),y			lda 	(temp1),y
.2c91					_SCNotSmaller:
.2c91	aa		tax				tax 								; put that in X. We compare this many chars first.
.2c92					_SCCompareLoop:
.2c92	e0 00		cpx #$00			cpx 	#0 							; if compared all the smaller, then it is the shorter
.2c94	f0 0c		beq $2ca2			beq 	_SCSameToEndShortest 		; one that is the smallest if they are different lengths.
.2c96	ca		dex				dex 								; decrement chars to compare.
.2c97	c8		iny				iny 								; move to next character
.2c98	38		sec				sec 								; calculate s1[y]-s2[y]
.2c99	b1 2a		lda ($2a),y			lda 	(temp0),y
.2c9b	f1 2c		sbc ($2c),y			sbc 	(temp1),y
.2c9d	d0 0a		bne $2ca9			bne 	_SCReturnResult 			; if different return sign of A
.2c9f	4c 92 2c	jmp $2c92			jmp 	_SCCompareLoop
.2ca2					_SCSameToEndShortest
.2ca2	a0 00		ldy #$00			ldy 	#0 							; compare len(s1) - len(s2)
.2ca4	38		sec				sec
.2ca5	b1 2a		lda ($2a),y			lda 	(temp0),y
.2ca7	f1 2c		sbc ($2c),y			sbc 	(temp1),y
.2ca9					_SCReturnResult:
.2ca9	08		php				php 								; set return to zero preserving PSW.
.2caa	a2 00		ldx #$00			ldx 	#0
.2cac	28		plp				plp
.2cad	f0 05		beq $2cb4			beq 	_SCExit 					; two values equal, then exit
.2caf	ca		dex				dex 								; X = $FF
.2cb0	90 02		bcc $2cb4			bcc 	_SCExit 					; if 1st < 2nd then -1
.2cb2	a2 01		ldx #$01			ldx 	#1 							; X = $01 if greater
.2cb4					_SCExit:
.2cb4	68		pla				pla
.2cb5	a8		tay				tay
.2cb6	68		pla				pla
.2cb7	60		rts				rts
.2cb8					CopyStringPair:
.2cb8	b5 49		lda $49,x			lda 	esInt0+1,x
.2cba	85 2c		sta $2c				sta 	temp1
.2cbc	b5 51		lda $51,x			lda 	esInt1+1,x
.2cbe	85 2d		sta $2d				sta 	temp1+1
.2cc0					CopyStringTop:
.2cc0	b5 48		lda $48,x			lda 	esInt0,x
.2cc2	85 2a		sta $2a				sta 	temp0
.2cc4	b5 50		lda $50,x			lda 	esInt1,x
.2cc6	85 2b		sta $2b				sta 	temp0+1
.2cc8	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/concat.asm

.2cc9					StringConcat:
.2cc9	aa		tax				tax									; stack pos in X
.2cca	98		tya				tya
.2ccb	48		pha				pha
.2ccc	20 b8 2c	jsr $2cb8			jsr 	CopyStringPair 				; temp0 and temp1 point to strings to concat.
.2ccf	38		sec				sec 								; calculate alloc strings. lengths added + 1 for size.
.2cd0	a0 00		ldy #$00			ldy 	#0
.2cd2	b1 2a		lda ($2a),y			lda 	(temp0),y
.2cd4	71 2c		adc ($2c),y			adc 	(temp1),y
.2cd6	b0 1c		bcs $2cf4			bcs 	_SCError 					; just too many characters here.
.2cd8	c9 fc		cmp #$fc			cmp 	#MaxStringSize
.2cda	b0 18		bcs $2cf4			bcs 	_SCError
.2cdc	20 18 2d	jsr $2d18			jsr 	AllocateSoftString 			; allocate soft string memory, set pointer.
.2cdf	20 0f 2d	jsr $2d0f			jsr 	CopySoftToStack 			; copy that to the stack.
.2ce2	20 f9 2c	jsr $2cf9			jsr 	SCCopyTemp0 				; copy temp0
.2ce5	a5 2c		lda $2c				lda 	temp1 						; copy temp1 to temp0
.2ce7	85 2a		sta $2a				sta 	temp0
.2ce9	a5 2d		lda $2d				lda 	temp1+1
.2ceb	85 2b		sta $2b				sta 	temp0+1
.2ced	20 f9 2c	jsr $2cf9			jsr 	SCCopyTemp0 				; copy temp0 e.g. what was temp1.
.2cf0	68		pla				pla
.2cf1	a8		tay				tay
.2cf2	8a		txa				txa 								; and A
.2cf3	60		rts				rts
.2cf4					_SCError:
.2cf4	a2 0d		ldx #$0d			ldx 	#ErrorID_StrLen
.2cf6	20 76 11	jsr $1176		jsr	errorHandler
.2cf9					SCCopyTemp0:
.2cf9	a0 00		ldy #$00			ldy 	#0 							; put count in temp2
.2cfb	b1 2a		lda ($2a),y			lda 	(temp0),y
.2cfd	85 2e		sta $2e				sta 	temp2
.2cff					_SCCopyLoop:
.2cff	a5 2e		lda $2e				lda 	temp2 						; done the lot
.2d01	f0 0b		beq $2d0e			beq 	_SCCopyExit
.2d03	c6 2e		dec $2e				dec 	temp2
.2d05	c8		iny				iny 								; get next char
.2d06	b1 2a		lda ($2a),y			lda 	(temp0),y
.2d08	20 3e 2d	jsr $2d3e			jsr 	WriteSoftString 			; write to soft string.
.2d0b	4c ff 2c	jmp $2cff			jmp 	_SCCopyLoop
.2d0e					_SCCopyExit:
.2d0e	60		rts				rts
.2d0f					CopySoftToStack:
.2d0f	a5 7a		lda $7a				lda 	SoftMemAlloc 				; copy the memory allocation pointer to the stack.
.2d11	95 48		sta $48,x			sta 	esInt0,x 					; type is already string.
.2d13	a5 7b		lda $7b				lda 	SoftMemAlloc+1
.2d15	95 50		sta $50,x			sta 	esInt1,x
.2d17	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/memory.asm

.007a					softMemAlloc:
>007a							.fill 	2  							; if MSB is zero needs resetting on allocation.
.2d18					AllocateSoftString:
.2d18	85 32		sta $32				sta 	tempShort 					; save count
.2d1a	98		tya				tya
.2d1b	48		pha				pha
.2d1c	a5 7b		lda $7b				lda 	softMemAlloc+1 				; if the high byte is zero, it needs allocating.
.2d1e	d0 09		bne $2d29			bne 	_ASSDone
.2d20	a5 33		lda $33				lda 	highMemory 					; reset the soft memory alloc pointer.
.2d22	85 7a		sta $7a				sta 	softMemAlloc 				; to speed up slightly, we only reset this when we first need it
.2d24	a4 34		ldy $34				ldy 	highMemory+1 				; but it needs to be reset before each command.
.2d26	88		dey				dey 								; it is set to 1/4k below high memory, allowing space
.2d27	84 7b		sty $7b				sty 	softMemAlloc+1 				; for a concreted string.
.2d29					_ASSDone:
.2d29	38		sec				sec 								; allocate downwards enough memory
.2d2a	a5 7a		lda $7a				lda 	softMemAlloc 				; subtract the memory requirements in A from
.2d2c	e5 32		sbc $32				sbc 	tempShort 					; the soft memory pointer
.2d2e	85 7a		sta $7a				sta 	softMemAlloc
.2d30	a5 7b		lda $7b				lda 	softMemAlloc+1
.2d32	e9 00		sbc #$00			sbc 	#0
.2d34	85 7b		sta $7b				sta 	softMemAlloc+1
.2d36	a9 00		lda #$00			lda 	#0 							; empty that string, set the length = 0.
.2d38	a8		tay				tay
.2d39	91 7a		sta ($7a),y			sta 	(softMemAlloc),y
.2d3b	68		pla				pla
.2d3c	a8		tay				tay
.2d3d	60		rts				rts
.2d3e					WriteSoftString:
.2d3e	84 32		sty $32				sty 	tempShort 					; save Y
.2d40	48		pha				pha 								; save character on stack
.2d41	a0 00		ldy #$00			ldy 	#0 							; get and bump length
.2d43	b1 7a		lda ($7a),y			lda 	(softMemAlloc),y
.2d45	18		clc				clc
.2d46	69 01		adc #$01			adc 	#1
.2d48	91 7a		sta ($7a),y			sta 	(softMemAlloc),y
.2d4a	a8		tay				tay 								; offset in Y
.2d4b	68		pla				pla 								; get char and write.
.2d4c	91 7a		sta ($7a),y			sta 	(softMemAlloc),y
.2d4e	a4 32		ldy $32				ldy 	tempShort 					; restore Y and exit.
.2d50	60		rts				rts
.2d51					StrClone:
.2d51	aa		tax				tax 								; set up stack.
.2d52	98		tya				tya
.2d53	48		pha				pha
.2d54	a0 00		ldy #$00			ldy 	#0 							; get length, add 1 for length
.2d56	b1 2a		lda ($2a),y			lda 	(temp0),y 					; this is the bytes required.
.2d58	18		clc				clc
.2d59	69 01		adc #$01			adc 	#1
.2d5b	20 18 2d	jsr $2d18			jsr 	AllocateSoftString 			; allocate soft memory
.2d5e	a5 7a		lda $7a				lda 	softMemAlloc 				; copy that address to TOS
.2d60	95 48		sta $48,x			sta 	esInt0,x
.2d62	a5 7b		lda $7b				lda 	softMemAlloc+1
.2d64	95 50		sta $50,x			sta 	esInt1,x
.2d66	a9 00		lda #$00			lda 	#0 							; zero upper 2 bytes
.2d68	95 58		sta $58,x			sta 	esInt2,x
.2d6a	95 60		sta $60,x			sta 	esInt3,x
.2d6c	a9 40		lda #$40			lda 	#$40 						; set type to string.
.2d6e	95 40		sta $40,x			sta 	esType,x
.2d70	20 f9 2c	jsr $2cf9			jsr 	SCCopyTemp0 				; copy temp0 string to soft memory copy (concat.asm)
.2d73	68		pla				pla
.2d74	a8		tay				tay
.2d75	8a		txa				txa
.2d76	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/setcase.asm

.2d77					CaseString:
.2d77	48		pha				pha 								; save A and copy to X
.2d78	aa		tax				tax
.2d79	98		tya				tya
.2d7a	48		pha				pha
.2d7b	20 c0 2c	jsr $2cc0			jsr 	CopyStringTop 				; target string -> temp0
.2d7e	a0 00		ldy #$00			ldy 	#0
.2d80	b1 2a		lda ($2a),y			lda 	(temp0),y  					; get length,
.2d82	18		clc				clc
.2d83	69 01		adc #$01			adc 	#1 							; one more for length byte
.2d85	20 18 2d	jsr $2d18			jsr 	AllocateSoftString 			; allocate soft string memory, set pointer.
.2d88	20 0f 2d	jsr $2d0f			jsr 	CopySoftToStack 			; copy that to the stack.
.2d8b	a0 00		ldy #$00			ldy 	#0
.2d8d	b1 2a		lda ($2a),y			lda 	(temp0),y 					; count to copy in X
.2d8f	aa		tax				tax
.2d90					_CSCopy:
.2d90	e0 00		cpx #$00			cpx 	#0 							; finished if 0.
.2d92	f0 24		beq $2db8			beq 	_CSExit
.2d94	ca		dex				dex
.2d95	c8		iny				iny
.2d96	68		pla				pla 								; check direction
.2d97	48		pha				pha
.2d98	f0 0c		beq $2da6			beq 	_CSUpper
.2d9a	b1 2a		lda ($2a),y			lda 	(temp0),y 					; lower$() code
.2d9c	c9 41		cmp #$41			cmp 	#"A"
.2d9e	90 12		bcc $2db2			bcc 	_CSWrite
.2da0	c9 5b		cmp #$5b			cmp 	#"Z"+1
.2da2	b0 0e		bcs $2db2			bcs 	_CSWrite
.2da4	90 0a		bcc $2db0			bcc 	_CSFlipWrite
.2da6					_CSUpper:
.2da6	b1 2a		lda ($2a),y			lda 	(temp0),y 					; upper$() code
.2da8	c9 61		cmp #$61			cmp 	#"a"
.2daa	90 06		bcc $2db2			bcc 	_CSWrite
.2dac	c9 7b		cmp #$7b			cmp 	#"z"+1
.2dae	b0 02		bcs $2db2			bcs 	_CSWrite
.2db0					_CSFlipWrite:
.2db0	49 20		eor #$20			eor 	#"A"^"a" 					; switch case.
.2db2					_CSWrite:
.2db2	20 3e 2d	jsr $2d3e			jsr 	WriteSoftString 			; add to soft string.
.2db5	4c 90 2d	jmp $2d90			jmp 	_CSCopy
.2db8					_CSExit:
.2db8	68		pla				pla
.2db9	a8		tay				tay
.2dba	68		pla				pla
.2dbb	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/substring.asm

.2dbc					StringSubstring:
.2dbc	48		pha				pha
.2dbd	aa		tax				tax 								; access stack.
.2dbe	98		tya				tya
.2dbf	48		pha				pha
.2dc0	20 c0 2c	jsr $2cc0			jsr 	CopyStringTop 				; point temp0 to the string.
.2dc3	a0 00		ldy #$00			ldy 	#0 							; get length.
.2dc5	b1 2a		lda ($2a),y			lda 	(temp0),Y
.2dc7	85 2c		sta $2c				sta 	temp1
.2dc9	b5 49		lda $49,x			lda 	esInt0+1,x 					; get the initial offset
.2dcb	c5 2c		cmp $2c				cmp 	temp1 						; return "" if > length.
.2dcd	f0 02		beq $2dd1			beq 	_SSBOkay
.2dcf	b0 2a		bcs $2dfb			bcs 	_SSBReturnNull
.2dd1					_SSBOkay:
.2dd1	a5 2c		lda $2c				lda 	temp1 						; get the total length +1
.2dd3	18		clc				clc
.2dd4	69 01		adc #$01			adc 	#1
.2dd6	38		sec				sec
.2dd7	f5 49		sbc $49,x			sbc 	esInt0+1,x 					; the anything >= this is bad - max size
.2dd9	d5 4a		cmp $4a,x			cmp 	esInt0+2,x  				; check bad >= required
.2ddb	90 02		bcc $2ddf			bcc		_SSBTrunc
.2ddd	b5 4a		lda $4a,x			lda 	esInt0+2,x
.2ddf					_SSBTrunc:
.2ddf	85 2d		sta $2d				sta 	temp1+1 					; characters to copy.
.2de1	18		clc				clc
.2de2	69 01		adc #$01			adc 	#1 							; add 1
.2de4	20 18 2d	jsr $2d18			jsr 	AllocateSoftString 			; allocate soft string memory, set pointer.
.2de7	20 0f 2d	jsr $2d0f			jsr 	CopySoftToStack 			; copy that to the stack.
.2dea	b4 49		ldy $49,x			ldy 	esInt0+1,x 					; get initial position of char to copy
.2dec					_SSBCopyLoop:
.2dec	a5 2d		lda $2d				lda 	temp1+1 					; done them all
.2dee	f0 0e		beq $2dfe			beq 	_SSBExit
.2df0	c6 2d		dec $2d				dec 	temp1+1
.2df2	b1 2a		lda ($2a),y			lda 	(temp0),y 					; get and write character
.2df4	20 3e 2d	jsr $2d3e			jsr 	WriteSoftString
.2df7	c8		iny				iny
.2df8	4c ec 2d	jmp $2dec			jmp 	_SSBCopyLoop
.2dfb					_SSBReturnNull:
.2dfb	20 02 2e	jsr $2e02			jsr 	ReturnNull
.2dfe					_SSBExit:
.2dfe	68		pla				pla
.2dff	a8		tay				tay
.2e00	68		pla				pla
.2e01	60		rts				rts
.2e02					ReturnNull:
.2e02	a9 00		lda #$00			lda 	#0 							; clear null string
.2e04	8d ce 0a	sta $0ace			sta 	NullString
.2e07	a9 ce		lda #$ce			lda 	#NullString & $FF 			; set a pointer to it
.2e09	95 48		sta $48,x			sta 	esInt0,x
.2e0b	a9 0a		lda #$0a			lda 	#NullString >> 8
.2e0d	95 50		sta $50,x			sta 	esInt1,x
.2e0f	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/write.asm

.0c12					srcStrLen:
>0c12							.fill 	1
.2e10					StringWrite:
.2e10	aa		tax				tax
.2e11	48		pha				pha
.2e12	98		tya				tya
.2e13	48		pha				pha
.2e14	20 3b 2e	jsr $2e3b			jsr 	CheckOverwriteCurrent
.2e17	b0 0d		bcs $2e26			bcs		_SWCopyCurrent
.2e19	20 79 2e	jsr $2e79			jsr 	RequiresConcretion
.2e1c	90 0e		bcc $2e2c			bcc 	_SWWriteReference
.2e1e	20 dc 2e	jsr $2edc			jsr 	CheckSpecialConcretion
.2e21	b0 09		bcs $2e2c			bcs 	_SWWriteReference
.2e23	20 8d 2e	jsr $2e8d			jsr 	AllocateHardMemory
.2e26					_SWCopyCurrent:
.2e26	20 c0 2e	jsr $2ec0			jsr 	CopyStringToHardMemory
.2e29	4c 37 2e	jmp $2e37			jmp 	_SWExit
.2e2c					_SWWriteReference
.2e2c	a0 00		ldy #$00			ldy 	#0
.2e2e	a5 2a		lda $2a				lda 	temp0
.2e30	91 2c		sta ($2c),y			sta 	(temp1),y
.2e32	c8		iny				iny
.2e33	a5 2b		lda $2b				lda 	temp0+1
.2e35	91 2c		sta ($2c),y			sta 	(temp1),y
.2e37					_SWExit:
.2e37	68		pla				pla
.2e38	a8		tay				tay
.2e39	68		pla				pla
.2e3a	60		rts				rts
.2e3b					CheckOverwriteCurrent:
.2e3b	a0 00		ldy #$00			ldy 	#0 						; get address of string being written to temp0
.2e3d	b5 51		lda $51,x			lda 	esInt1+1,x
.2e3f	85 2b		sta $2b				sta 	temp0+1
.2e41	b5 49		lda $49,x			lda 	esInt0+1,x
.2e43	85 2a		sta $2a				sta 	temp0
.2e45	b1 2a		lda ($2a),y			lda 	(temp0),y 				; get length of string being copied and save it.
.2e47	8d 12 0c	sta $0c12			sta 	srcStrLen
.2e4a	b5 48		lda $48,x			lda 	esInt0,x 				; copy where the final address it being written to temp1.
.2e4c	85 2c		sta $2c				sta 	temp1 					; e.g. if it is ax$ then temp1 will point to the ax$
.2e4e	b5 50		lda $50,x			lda 	esInt1,x 				; data record + 5
.2e50	85 2d		sta $2d				sta 	temp1+1
.2e52	a0 01		ldy #$01			ldy 	#1 						; get the MSB of the address of string currently stored there.
.2e54	b1 2c		lda ($2c),y			lda 	(temp1),y
.2e56	c5 34		cmp $34				cmp 	highMemory+1 			; if < high memory then it cannot be something stored
.2e58	90 1b		bcc $2e75			bcc 	_COCFail 				; in hard memory.
.2e5a	a0 00		ldy #$00			ldy 	#0 						; copy target address - 1 into temp2
.2e5c	b1 2c		lda ($2c),y			lda 	(temp1),y 				; when allocating hard memory, the overall size is
.2e5e	e9 01		sbc #$01			sbc 	#1 						; in the previous byte.
.2e60	85 2e		sta $2e				sta 	temp2
.2e62	c8		iny				iny
.2e63	b1 2c		lda ($2c),y			lda 	(temp1),y
.2e65	e9 00		sbc #$00			sbc 	#0
.2e67	85 2f		sta $2f				sta 	temp2+1
.2e69	a0 00		ldy #$00			ldy 	#0 						; how large is this physical chunk.
.2e6b	b1 2e		lda ($2e),y			lda 	(temp2),y
.2e6d	38		sec				sec  							; maximum character capacity.
.2e6e	e9 02		sbc #$02			sbc 	#2
.2e70	cd 12 0c	cmp $0c12			cmp 	srcStrLen 				; if >= the required length
.2e73	b0 02		bcs $2e77			bcs 	_COCCanReuse
.2e75					_COCFail:
.2e75	18		clc				clc
.2e76	60		rts				rts
.2e77					_COCCanReuse:
.2e77	38		sec				sec
.2e78	60		rts				rts
.2e79					RequiresConcretion:
.2e79	a5 2b		lda $2b				lda 	temp0+1 				; get MSB of address of string to be written
.2e7b	c5 34		cmp $34				cmp 	highMemory+1 			; if >= high memory it is concreted
.2e7d	b0 0a		bcs $2e89			bcs 	_RCSucceed 				; so it needs concreting again - duplication.
.2e7f	a5 7b		lda $7b				lda 	softMemAlloc+1 			; have we allocated any soft memory yet ?
.2e81	f0 08		beq $2e8b			beq 	_RCFail 				; if not, this cannot be soft memory.
.2e83	a5 2b		lda $2b				lda 	temp0+1 				; get MSB of address of string to be written
.2e85	c5 7b		cmp $7b				cmp 	softMemAlloc+1 			; if >= soft mem alloc it is either soft
.2e87	90 02		bcc $2e8b			bcc 	_RCFail 				; so concreting
.2e89					_RCSucceed:
.2e89	38		sec				sec
.2e8a	60		rts				rts
.2e8b					_RCFail:
.2e8b	18		clc				clc
.2e8c	60		rts				rts
.2e8d					AllocateHardMemory:
.2e8d	98		tya				tya
.2e8e	48		pha				pha
.2e8f	ad 12 0c	lda $0c12			lda 	srcStrLen 				; characters in string
.2e92	69 0a		adc #$0a			adc 	#1+1+8 					; one for hard memory size, one for string size, extra for expansion
.2e94	b0 04		bcs $2e9a			bcs 	_AHMSetMax 				; max out that amount.
.2e96	c9 fe		cmp #$fe			cmp 	#MaxStringSize+2
.2e98	90 02		bcc $2e9c			bcc 	_AHMIsOkay
.2e9a					_AHMSetMax:
.2e9a	a9 fe		lda #$fe			lda 	#MaxStringSize+2
.2e9c					_AHMIsOkay:
.2e9c	48		pha				pha	 							; save size to be allocated
.2e9d	49 ff		eor #$ff			eor 	#$FF 					; complement and add to high Memory
.2e9f	38		sec				sec  							; and copy result to TOS as target address.
.2ea0	65 33		adc $33				adc 	highMemory
.2ea2	85 33		sta $33				sta 	highMemory
.2ea4	a5 34		lda $34				lda 	highMemory+1
.2ea6	69 ff		adc #$ff			adc 	#$FF
.2ea8	85 34		sta $34				sta 	highMemory+1
.2eaa	a0 00		ldy #$00			ldy 	#0 						; Y = 0
.2eac	68		pla				pla 							; get the total size of the storage block
.2ead	91 33		sta ($33),y			sta 	(highMemory),y 			; and set it
.2eaf	18		clc				clc
.2eb0	a5 33		lda $33				lda		highMemory 				; point the target address to the byte after this.
.2eb2	69 01		adc #$01			adc 	#1
.2eb4	91 2c		sta ($2c),y			sta 	(temp1),y
.2eb6	a5 34		lda $34				lda 	highMemory+1
.2eb8	69 00		adc #$00			adc 	#0
.2eba	c8		iny				iny
.2ebb	91 2c		sta ($2c),y			sta 	(temp1),y
.2ebd	68		pla				pla
.2ebe	a8		tay				tay
.2ebf	60		rts				rts
.2ec0					CopyStringToHardMemory:
.2ec0	98		tya				tya
.2ec1	48		pha				pha
.2ec2	a0 00		ldy #$00			ldy 	#0 						; copy target address to temp2
.2ec4	b1 2c		lda ($2c),y			lda 	(temp1),y
.2ec6	85 2e		sta $2e				sta 	temp2
.2ec8	c8		iny				iny
.2ec9	b1 2c		lda ($2c),y			lda 	(temp1),y
.2ecb	85 2f		sta $2f				sta 	temp2+1
.2ecd	ac 12 0c	ldy $0c12			ldy 	srcStrLen 				; copy this + 1 characters, (length too) hence $FF compare
.2ed0					_CSTHMLoop:
.2ed0	b1 2a		lda ($2a),y			lda 	(temp0),y
.2ed2	91 2e		sta ($2e),y			sta 	(temp2),y
.2ed4	88		dey				dey
.2ed5	c0 ff		cpy #$ff			cpy 	#$FF 					; this does the +1
.2ed7	d0 f7		bne $2ed0			bne 	_CSTHMLoop
.2ed9	68		pla				pla
.2eda	a8		tay				tay
.2edb	60		rts				rts
.2edc					CheckSpecialConcretion:
.2edc	ad 12 0c	lda $0c12			lda 	srcStrLen 				; check string is null e.g. length = 0
.2edf	f0 02		beq $2ee3			beq 	_CSCNullString
.2ee1	18		clc				clc
.2ee2	60		rts				rts
.2ee3					_CSCNullString:
.2ee3	a9 00		lda #$00			lda 	#0 						; by always returning this address we don't waste
.2ee5	8d ce 0a	sta $0ace			sta 	NullString		 		; storage on null strings.
.2ee8	a9 ce		lda #$ce			lda 	#(NullString) & $FF
.2eea	85 2a		sta $2a				sta 	temp0
.2eec	a9 0a		lda #$0a			lda 	#(NullString) >> 8
.2eee	85 2b		sta $2b				sta 	1+(temp0)
.2ef0	38		sec				sec
.2ef1	60		rts				rts

;******  Return to file: string/string.asm

.2ef2					stringHandler:
.2ef2	7c f5 2e	jmp ($2ef5,x)			jmp 	(stringVectors,x)
.2ef5					stringVectors:
>2ef5	5e 2c					.word StringChrs           ; index 0
>2ef7	51 2d					.word StrClone             ; index 2
>2ef9	c9 2c					.word StringConcat         ; index 4
>2efb	80 2c					.word STRCompare           ; index 6
>2efd	77 2d					.word CaseString           ; index 8
>2eff	bc 2d					.word StringSubstring      ; index 10
>2f01	10 2e					.word StringWrite          ; index 12

;******  Return to file: basic.asm

.2f03					section_end_string:
.2f03					section_start_tokeniser:

;******  Processing file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/detokenise/detokenise.asm

.0c13					deTokeniseVector:
>0c13							.fill 	2
.0c15					lastCharacterClass:
>0c15							.fill 	1
.2f03					ListLine:
.2f03	a9 13		lda #$13			lda 	#(deTokenPrint) & $FF
.2f05	8d 13 0c	sta $0c13			sta 	deTokeniseVector
.2f08	a9 30		lda #$30			lda 	#(deTokenPrint) >> 8
.2f0a	8d 14 0c	sta $0c14			sta 	1+(deTokeniseVector)
.2f0d					Detokenise:
.2f0d	a9 ff		lda #$ff			lda 	#$FF 					; last thing printed is a dummy value.
.2f0f	8d 15 0c	sta $0c15			sta 	lastCharacterClass
.2f12	a2 02		ldx #$02			ldx 	#2
.2f14	20 c2 2a	jsr $2ac2			jsr 	MInt32False
.2f17	a0 01		ldy #$01			ldy 	#1 						; copy line number to stack,2 (as using stack 0,1)
.2f19	b1 28		lda ($28),y			lda 	(codePtr),y
.2f1b	95 48		sta $48,x			sta 	esInt0,x
.2f1d	c8		iny				iny
.2f1e	b1 28		lda ($28),y			lda 	(codePtr),y
.2f20	95 50		sta $50,x			sta 	esInt1,x
.2f22	a9 84		lda #$84			lda 	#LTYLineNumber
.2f24	20 ee 2f	jsr $2fee			jsr 	ListOutputCharacter
.2f27	a9 0a		lda #$0a			lda 	#10 					; base 10
.2f29	20 c5 2f	jsr $2fc5			jsr 	DTPrintInteger 			; print as integer.
.2f2c	a0 00		ldy #$00			ldy 	#0 						; get length
.2f2e	b1 2a		lda ($2a),y			lda 	(temp0),y 				; into X
.2f30	aa		tax				tax
.2f31					_DTPadOut:
.2f31	a9 20		lda #$20			lda 	#" "
.2f33	20 ee 2f	jsr $2fee			jsr 	ListOutputCharacter
.2f36	e8		inx				inx
.2f37	e0 06		cpx #$06			cpx 	#6
.2f39	d0 f6		bne $2f31			bne 	_DTPadOut
.2f3b	a0 03		ldy #$03			ldy 	#3 						; start position.
.2f3d					_DTListLoop
.2f3d	b1 28		lda ($28),y			lda 	(codePtr),y
.2f3f	c9 85		cmp #$85			cmp 	#TOK_STR 				; Inline string.
.2f41	f0 58		beq $2f9b			beq 	_DTIsString
.2f43	c9 84		cmp #$84			cmp 	#TOK_FPC 				; Floating point
.2f45	f0 7a		beq $2fc1			beq 	_DTIsFloat
.2f47	c9 c5		cmp #$c5			cmp 	#TKW_AMP 				; & hex marker
.2f49	f0 16		beq $2f61			beq 	_DTHexConstant
.2f4b	c9 80		cmp #$80			cmp 	#TOK_EOL 				; End of Line
.2f4d	d0 06		bne $2f55			bne 	_DTNotEnd
.2f4f	a9 ff		lda #$ff			lda 	#255 					; print CR
.2f51	20 ee 2f	jsr $2fee			jsr 	ListOutputCharacter
.2f54	60		rts				rts
.2f55					_DTNotEnd:
.2f55	c9 00		cmp #$00			cmp 	#0
.2f57	30 36		bmi $2f8f			bmi 	_DTIsToken
.2f59	c9 40		cmp #$40			cmp 	#$40
.2f5b	90 38		bcc $2f95			bcc 	_DTIsIdentifier
.2f5d	a9 0a		lda #$0a			lda 	#10 					; this is the base
.2f5f	d0 08		bne $2f69			bne 	_DTConstant
.2f61					_DTHexConstant:
.2f61	a9 26		lda #$26			lda 	#"&"
.2f63	20 ee 2f	jsr $2fee			jsr 	ListOutputCharacter
.2f66	c8		iny				iny
.2f67	a9 10		lda #$10			lda 	#16
.2f69					_DTConstant:
.2f69	48		pha				pha
.2f6a	a9 00		lda #$00			lda 	#0 							; now constant, may need spaces
.2f6c	20 2f 30	jsr $302f			jsr 	DTSwitchMode
.2f6f	a9 86		lda #$86			lda 	#LTYConstant
.2f71	20 ee 2f	jsr $2fee			jsr 	ListOutputCharacter
.2f74	a2 02		ldx #$02			ldx 	#2
.2f76	8a		txa				txa
.2f77	a2 0a		ldx #$0a		ldx	#10
.2f79	20 45 2c	jsr $2c45		jsr	mainHandler
.2f7c	aa		tax				tax
.2f7d	20 68 19	jsr $1968			jsr 	TOSToTemp0
.2f80	68		pla				pla
.2f81	85 32		sta $32				sta 	tempShort
.2f83	98		tya				tya
.2f84	48		pha				pha
.2f85	a5 32		lda $32				lda 	tempShort
.2f87	20 c5 2f	jsr $2fc5			jsr 	DTPrintInteger
.2f8a	68		pla				pla
.2f8b	a8		tay				tay
.2f8c	4c 3d 2f	jmp $2f3d			jmp 	_DTListLoop
.2f8f					_DTIsToken:
.2f8f	20 88 30	jsr $3088			jsr 	DTDecodeToken
.2f92	4c 3d 2f	jmp $2f3d			jmp 	_DTListLoop
.2f95					_DTIsIdentifier:
.2f95	20 41 30	jsr $3041			jsr 	DTIdentifier
.2f98	4c 3d 2f	jmp $2f3d			jmp 	_DTListLoop
.2f9b					_DTIsString:
.2f9b	a9 01		lda #$01			lda 	#1 							; now punctuation, may need spaces
.2f9d	20 2f 30	jsr $302f			jsr 	DTSwitchMode
.2fa0	a9 81		lda #$81			lda 	#LTYString
.2fa2	20 ee 2f	jsr $2fee			jsr 	ListOutputCharacter
.2fa5	a9 22		lda #$22			lda 	#'"'						; open quote
.2fa7	20 ee 2f	jsr $2fee			jsr 	ListOutputCharacter
.2faa	a2 02		ldx #$02			ldx 	#2 							; evaluate string to TOS2.
.2fac	8a		txa				txa
.2fad	a2 0a		ldx #$0a		ldx	#10
.2faf	20 45 2c	jsr $2c45		jsr	mainHandler
.2fb2	aa		tax				tax
.2fb3	20 68 19	jsr $1968			jsr 	TOSToTemp0
.2fb6	20 d7 2f	jsr $2fd7			jsr 	DTPrintLengthPrefix
.2fb9	a9 22		lda #$22			lda 	#'"'
.2fbb	20 ee 2f	jsr $2fee			jsr 	ListOutputCharacter
.2fbe	4c 3d 2f	jmp $2f3d			jmp 	_DTListLoop
.2fc1					_DTIsFloat:
>2fc1	db						.byte 	$DB
.2fc2	4c c1 2f	jmp $2fc1			jmp 	_DTIsFloat

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/detokenise/dtprint.asm

.2fc5					DTPrintInteger:
.2fc5	48		pha				pha
.2fc6	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.2fc8	85 2a		sta $2a				sta 	temp0
.2fca	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.2fcc	85 2b		sta $2b				sta 	1+(temp0)
.2fce	68		pla				pla
.2fcf	a8		tay				tay
.2fd0	8a		txa				txa
.2fd1	a2 0c		ldx #$0c		ldx	#12
.2fd3	20 45 2c	jsr $2c45		jsr	mainHandler
.2fd6	aa		tax				tax
.2fd7					DTPrintLengthPrefix:
.2fd7	98		tya				tya
.2fd8	48		pha				pha
.2fd9	a0 00		ldy #$00			ldy 	#0
.2fdb	b1 2a		lda ($2a),y			lda 	(temp0),y
.2fdd	aa		tax				tax
.2fde	f0 0b		beq $2feb			beq 	_DTPLPExit
.2fe0					_DTPLPLoop:
.2fe0	c8		iny				iny
.2fe1	b1 2a		lda ($2a),y			lda 	(temp0),y
.2fe3	29 7f		and #$7f			and 	#$7F
.2fe5	20 ee 2f	jsr $2fee			jsr 	ListOutputCharacter
.2fe8	ca		dex				dex
.2fe9	d0 f5		bne $2fe0			bne 	_DTPLPLoop
.2feb					_DTPLPExit:
.2feb	68		pla				pla
.2fec	a8		tay				tay
.2fed	60		rts				rts
.2fee					ListOutputCharacter:
.2fee	85 32		sta $32				sta 	tempShort
.2ff0	48		pha				pha
.2ff1	8a		txa				txa
.2ff2	48		pha				pha
.2ff3	98		tya				tya
.2ff4	48		pha				pha
.2ff5	a5 32		lda $32				lda 	tempShort
.2ff7	c9 20		cmp #$20			cmp 	#32
.2ff9	b0 0c		bcs $3007			bcs		_LOCHiBit
.2ffb	09 40		ora #$40			ora 	#64
.2ffd	c9 40		cmp #$40			cmp 	#64
.2fff	f0 06		beq $3007			beq 	_LOCHiBit
.3001	c9 5b		cmp #$5b			cmp 	#65+26
.3003	b0 02		bcs $3007			bcs 	_LOCHiBit
.3005	69 20		adc #$20			adc 	#32
.3007					_LOCHiBit:
.3007	20 10 30	jsr $3010			jsr 	_LOCCallVector
.300a	68		pla				pla
.300b	a8		tay				tay
.300c	68		pla				pla
.300d	aa		tax				tax
.300e	68		pla				pla
.300f					_LOCExit:
.300f	60		rts				rts
.3010					_LOCCallVector:
.3010	6c 13 0c	jmp ($0c13)			jmp 	(deTokeniseVector)
.3013					deTokenPrint:
.3013	c9 00		cmp #$00			cmp 	#0
.3015	30 06		bmi $301d			bmi 	_dtpInk
.3017	a2 12		ldx #$12		ldx	#18
.3019	20 59 11	jsr $1159		jsr	deviceHandler
.301c	60		rts				rts
.301d	c9 ff		cmp #$ff	_dtpInk:cmp 	#255
.301f	f0 08		beq $3029			beq 	_dtpCR
.3021	29 07		and #$07			and 	#7
.3023	a2 06		ldx #$06		ldx	#6
.3025	20 59 11	jsr $1159		jsr	deviceHandler
.3028	60		rts				rts
.3029					_dtpCR:
.3029	a2 02		ldx #$02		ldx	#2
.302b	20 59 11	jsr $1159		jsr	deviceHandler
.302e	60		rts				rts
.302f					DTSwitchMode:
.302f	cd 15 0c	cmp $0c15			cmp 	LastCharacterClass
.3032	f0 04		beq $3038			beq 	_DTSMNoChange
.3034	8d 15 0c	sta $0c15			sta 	LastCharacterClass
.3037					_DTSMExit:
.3037	60		rts				rts
.3038					_DTSMNoChange:
.3038	c9 01		cmp #$01			cmp 	#1
.303a	f0 fb		beq $3037			beq 	_DTSMExit
.303c	a9 20		lda #$20			lda 	#" "
.303e	4c ee 2f	jmp $2fee			jmp 	ListOutputCharacter

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/detokenise/identifier.asm

.3041					DTIdentifier:
.3041	a9 00		lda #$00			lda 	#0 							; now text, may need spaces
.3043	20 2f 30	jsr $302f			jsr 	DTSwitchMode
.3046	a9 87		lda #$87			lda 	#LTYIdentifier
.3048	20 ee 2f	jsr $2fee			jsr 	ListOutputCharacter
.304b					_DTILoop:
.304b	b1 28		lda ($28),y			lda 	(codePtr),y 				; output main bit of identifier.
.304d	c9 2d		cmp #$2d			cmp 	#"-"						; make - back to _
.304f	d0 02		bne $3053			bne 	_DTINotUS
.3051	a9 5f		lda #$5f			lda 	#"_"
.3053					_DTINotUS:
.3053	20 ee 2f	jsr $2fee			jsr 	ListOutputCharacter
.3056	c8		iny				iny
.3057	b1 28		lda ($28),y			lda 	(codePtr),y 				; until end identifier marker.
.3059	c9 3a		cmp #$3a			cmp 	#$3A
.305b	90 ee		bcc $304b			bcc 	_DTILoop
.305d	c8		iny				iny
.305e	c9 3a		cmp #$3a			cmp 	#$3A 						; is it integer non array
.3060	f0 25		beq $3087			beq 	_DTIExit 					; no postfix.
.3062	48		pha				pha
.3063	a9 01		lda #$01			lda  	#1 							; it ends in punctuation
.3065	8d 15 0c	sta $0c15			sta 	LastCharacterClass
.3068	a9 82		lda #$82			lda 	#LTYPunctuation
.306a	20 ee 2f	jsr $2fee			jsr 	ListOutputCharacter
.306d	68		pla				pla
.306e	c9 3b		cmp #$3b			cmp 	#$3B
.3070	f0 10		beq $3082			beq 	_DTIArray
.3072	4a		lsr a				lsr 	a 							; array flag in C
.3073	08		php				php
.3074	49 1e		eor #$1e			eor 	#$3C/2 						; check if $
.3076	f0 02		beq $307a			beq 	_DTIDollar
.3078	a9 07		lda #$07			lda 	#"$"^"#" 					; this if #, 0 if $
.307a					_DTIDollar:
.307a	49 24		eor #$24			eor 	#"$"
.307c	20 ee 2f	jsr $2fee			jsr 	ListOutputCharacter
.307f	28		plp				plp
.3080	90 05		bcc $3087			bcc 	_DTIExit
.3082					_DTIArray:
.3082	a9 28		lda #$28			lda 	#"("
.3084	20 ee 2f	jsr $2fee			jsr 	ListOutputCharacter
.3087					_DTIExit:
.3087	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/detokenise/token.asm

.3088					DTDecodeToken:
.3088	a2 00		ldx #$00			ldx 	#0 							; table number to use
.308a	b1 28		lda ($28),y			lda 	(codePtr),y
.308c	c9 84		cmp #$84			cmp 	#$84
.308e	b0 05		bcs $3095			bcs 	_DTNotShift
.3090	29 03		and #$03			and 	#3 							; get the shift 1..3
.3092	0a		asl a				asl 	a 							; put 2 x in X
.3093	aa		tax				tax
.3094	c8		iny				iny
.3095					_DTNotShift:
.3095	bd 93 33	lda $3393,x			lda 	TokenTableAddress,x 		; get the token table to use to decode it.
.3098	85 2a		sta $2a				sta 	temp0 						; point into temp0
.309a	bd 94 33	lda $3394,x			lda 	TokenTableAddress+1,x
.309d	85 2b		sta $2b				sta 	temp0+1
.309f	b1 28		lda ($28),y			lda 	(codePtr),y 				; get the token value.
.30a1	c8		iny				iny 								; consume it.
.30a2	aa		tax				tax
.30a3	98		tya				tya
.30a4	48		pha				pha
.30a5					_DTFindText:
.30a5	e0 86		cpx #$86			cpx 	#$86 						; finished ?
.30a7	f0 11		beq $30ba			beq 	_DTFoundText
.30a9	ca		dex				dex
.30aa	a0 00		ldy #$00			ldy 	#0
.30ac	38		sec				sec
.30ad	b1 2a		lda ($2a),y			lda 	(temp0),y
.30af	65 2a		adc $2a				adc 	temp0
.30b1	85 2a		sta $2a				sta 	temp0
.30b3	90 f0		bcc $30a5			bcc 	_DTFindText
.30b5	e6 2b		inc $2b				inc 	temp0+1
.30b7	4c a5 30	jmp $30a5			jmp 	_DTFindText
.30ba					_DTFoundText:
.30ba	a0 01		ldy #$01			ldy 	#1 							; get first character
.30bc	b1 2a		lda ($2a),y			lda 	(temp0),y
.30be	29 7f		and #$7f			and 	#$7F 						; will have bit 7 set.
.30c0	c9 41		cmp #$41			cmp 	#"A" 						; check for punctuation.
.30c2	90 11		bcc $30d5			bcc 	_DTIsPunctuation
.30c4	c9 5b		cmp #$5b			cmp 	#"Z"+1
.30c6	b0 0d		bcs $30d5			bcs 	_DTIsPunctuation
.30c8	a9 00		lda #$00			lda 	#0 							; now text, may need spaces
.30ca	20 2f 30	jsr $302f			jsr 	DTSwitchMode
.30cd	a9 83		lda #$83			lda 	#LTYKeyword
.30cf	20 ee 2f	jsr $2fee			jsr 	ListOutputCharacter
.30d2	4c df 30	jmp $30df			jmp 	_DTPrint
.30d5					_DTIsPunctuation:
.30d5	a9 01		lda #$01			lda 	#1 							; now punctuation, may need spaces
.30d7	20 2f 30	jsr $302f			jsr 	DTSwitchMode
.30da	a9 82		lda #$82			lda 	#LTYPunctuation
.30dc	20 ee 2f	jsr $2fee			jsr 	ListOutputCharacter
.30df					_DTPrint:
.30df	20 d7 2f	jsr $2fd7			jsr 	DTPrintLengthPrefix 		; print it out.
.30e2	a0 00		ldy #$00			ldy 	#0 							; get last character
.30e4	b1 2a		lda ($2a),y			lda 	(temp0),y
.30e6	a8		tay				tay
.30e7	b1 2a		lda ($2a),y			lda 	(temp0),y
.30e9	29 7f		and #$7f			and 	#$7F 						; will have bit 7 set.
.30eb	c9 41		cmp #$41			cmp 	#"A" 						; check for punctuation.
.30ed	90 04		bcc $30f3			bcc 	_DTIsNowPunctuation
.30ef	c9 5b		cmp #$5b			cmp 	#"Z"+1
.30f1	90 05		bcc $30f8			bcc 	_DTPExit
.30f3					_DTIsNowPunctuation:
.30f3	a9 01		lda #$01			lda 	#1
.30f5	8d 15 0c	sta $0c15			sta		LastCharacterClass
.30f8					_DTPExit:
.30f8	68		pla				pla
.30f9	a8		tay				tay
.30fa	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/search.asm

.0c16					currentSet:
>0c16							.fill 	1
.30fb					TokenSearch:
.30fb	8a		txa				txa
.30fc	48		pha				pha
.30fd	98		tya				tya
.30fe	48		pha				pha
.30ff	a9 00		lda #$00			lda 	#0
.3101	8d 16 0c	sta $0c16			sta 	currentSet
.3104					_TSLoop:
.3104	ad 16 0c	lda $0c16			lda 	currentSet 					; 2 x currentset in X
.3107	0a		asl a				asl 	a
.3108	aa		tax				tax
.3109	bd 93 33	lda $3393,x			lda 	TokenTableAddress,x 		; set temp0 to the table address
.310c	85 2a		sta $2a				sta 	temp0
.310e	bd 94 33	lda $3394,x			lda 	TokenTableAddress+1,x
.3111	85 2b		sta $2b				sta 	temp0+1
.3113	20 3a 31	jsr $313a			jsr 	TokenSearchOne 				; search one table
.3116	b0 0d		bcs $3125			bcs 	_TSFound 					; found a token.
.3118	ee 16 0c	inc $0c16			inc 	currentSet 					; next set
.311b	ad 16 0c	lda $0c16			lda 	currentSet
.311e	c9 04		cmp #$04			cmp 	#4
.3120	d0 e2		bne $3104			bne 	_TSLoop 					; back if not done all four.
.3122	18		clc				clc 								; clear carry and exit
.3123	90 10		bcc $3135			bcc 	_TSExit
.3125					_TSFound:
.3125	48		pha				pha 								; save token
.3126	ad 16 0c	lda $0c16			lda 	currentSet					; if set zero no shift
.3129	f0 05		beq $3130			beq 	_TSNoShift
.312b	09 80		ora #$80			ora 	#$80 						; Write as $81-$83
.312d	20 e9 31	jsr $31e9			jsr 	TokenWrite
.3130					_TSNoShift:
.3130	68		pla				pla 								; get token back
.3131	20 e9 31	jsr $31e9			jsr 	TokenWrite 					; write it
.3134	38		sec				sec 								; carry set indicating success
.3135					_TSExit:
.3135	68		pla				pla
.3136	a8		tay				tay
.3137	68		pla				pla
.3138	aa		tax				tax
.3139	60		rts				rts
.313a					TokenSearchOne:
.313a	a2 86		ldx #$86			ldx 	#$86 						; current token being tested.
.313c					_TSOLoop:
.313c	a0 00		ldy #$00			ldy 	#0
.313e	b1 2a		lda ($2a),y			lda 	(temp0),y 					; get length of token
.3140	f0 26		beq $3168			beq 	_TSOFail 					; if zero, end of table
.3142	cd cf 0a	cmp $0acf			cmp 	convertBuffer 				; length is the same, compare the text matches.
.3145	f0 11		beq $3158			beq 	_TSOCheckText
.3147					_TSONext:
.3147	e8		inx				inx 								; bump token
.3148	a0 00		ldy #$00			ldy 	#0							; get length
.314a	b1 2a		lda ($2a),y			lda 	(temp0),y
.314c	38		sec				sec
.314d	65 2a		adc $2a				adc 	temp0 						; add to temp0 + 1
.314f	85 2a		sta $2a				sta 	temp0
.3151	90 e9		bcc $313c			bcc 	_TSOLoop
.3153	e6 2b		inc $2b				inc 	temp0+1
.3155	4c 3c 31	jmp $313c			jmp 	_TSOLoop
.3158					_TSOCheckText:
.3158	a8		tay				tay 								; compare length downto 1.
.3159					_TSOCheckLoop:
.3159	b1 2a		lda ($2a),y			lda 	(temp0),y 					; use EOR to compare
.315b	59 cf 0a	eor $0acf,y			eor 	convertBuffer,y
.315e	29 7f		and #$7f			and 	#$7F 						; ignore bit 7
.3160	d0 e5		bne $3147			bne 	_TSONext 					; different goto next.
.3162	88		dey				dey 								; do all
.3163	d0 f4		bne $3159			bne 	_TSOCheckLoop
.3165	8a		txa				txa 								; return token in A and carry set
.3166	38		sec				sec
.3167	60		rts				rts
.3168					_TSOFail:
.3168	18		clc				clc
.3169	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/test.asm

.316a					TokTest:
.316a	a2 ff		ldx #$ff				ldx 	#$FF
.316c	9a		txs					txs
.316d	a9 8a		lda #$8a			lda 	#(TokenText1) & $FF
.316f	85 28		sta $28				sta 	codePtr
.3171	a9 31		lda #$31			lda 	#(TokenText1) >> 8
.3173	85 29		sta $29				sta 	1+(codePtr)
.3175	20 8a 31	jsr $318a				jsr 	Tokenise
.3178	a2 00		ldx #$00	TokStop:	ldx 	#0
.317a	bd 8a 31	lda $318a,x	_TokCheck:	lda 	TokenBytes1,x
.317d	dd 1a 0c	cmp $0c1a,x				cmp 	tokenBuffer,x
.3180	d0 fe		bne $3180	_TokFail:	bne 	_TokFail
.3182	e8		inx					inx
.3183	c9 80		cmp #$80				cmp 	#$80
.3185	d0 f3		bne $317a				bne 	_TokCheck
.3187	4c ff ff	jmp $ffff				jmp 	$FFFF

;******  Processing file: tokeniser/tokenise/../../generated/toktest.inc

.318a					TokenText1:
.318a					TokenBytes1:

;******  Return to file: tokeniser/tokenise/test.asm


;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokenise.asm

.0c17					tokenHeader:
>0c17							.fill 	3
.0c1a					tokenBuffer:
>0c1a							.fill 	256
.0d1a					tokenBufferIndex:
>0d1a							.fill 	1
.318a					Tokenise:
.318a	20 02 32	jsr $3202			jsr 	TokeniseMakeASCIIZ 			; convert to ASCIIZ string.
.318d					TokeniseASCIIZ:
.318d	20 13 32	jsr $3213			jsr 	TokeniseFixCase 			; remove controls and lower case outside quotes.
.3190	a9 00		lda #$00			lda 	#0 							; reset the token buffer index
.3192	8d 1a 0d	sta $0d1a			sta 	tokenBufferIndex
.3195	a8		tay				tay 								; start pointer
.3196	a9 80		lda #$80			lda 	#$80 						; empty token buffer ($80 ends it)
.3198	8d 1a 0c	sta $0c1a			sta 	tokenBuffer
.319b					_TokLoop:
.319b	b1 28		lda ($28),y			lda 	(codePtr),y 				; get next character
.319d	f0 46		beq $31e5			beq 	_TokExit 					; if zero, then exit.
.319f	c8		iny				iny 								; skip over spaces.
.31a0	c9 20		cmp #$20			cmp 	#" "
.31a2	f0 f7		beq $319b			beq 	_TokLoop
.31a4	88		dey				dey 								; point back to character.
.31a5	c9 26		cmp #$26			cmp 	#"&"						; Hexadecimal constant.
.31a7	f0 18		beq $31c1			beq 	_TokHexConst
.31a9	c9 22		cmp #$22			cmp 	#'"'						; Quoted String
.31ab	f0 23		beq $31d0			beq 	_TokQString
.31ad	c9 5b		cmp #$5b			cmp 	#"Z"+1 						; > 'Z' is punctuation
.31af	b0 26		bcs $31d7			bcs 	_TokPunctuation
.31b1	c9 41		cmp #$41			cmp 	#"A" 						; A..Z identifier
.31b3	b0 29		bcs $31de			bcs 	_TokIdentifier
.31b5	c9 3a		cmp #$3a			cmp 	#"9"+1
.31b7	b0 1e		bcs $31d7			bcs 	_TokPunctuation 			; between 9 and A exclusive, punctuation
.31b9	c9 30		cmp #$30			cmp 	#"0"
.31bb	90 1a		bcc $31d7			bcc 	_TokPunctuation 			; < 0, punctuation.
.31bd	a9 0a		lda #$0a			lda 	#10  						; 0..9 constant in base 10.
.31bf	d0 08		bne $31c9			bne 	_TokConst
.31c1					_TokHexConst:
.31c1	c8		iny				iny									; consume token.
.31c2	a9 c5		lda #$c5			lda 	#TKW_AMP 					; Write ampersand token out
.31c4	20 e9 31	jsr $31e9			jsr 	TokenWrite
.31c7	a9 10		lda #$10			lda 	#16
.31c9					_TokConst:
.31c9	20 d1 32	jsr $32d1			jsr 	TokeniseInteger
.31cc	b0 cd		bcs $319b			bcs 	_TokLoop
.31ce	90 17		bcc $31e7			bcc 	_TokFail
.31d0					_TokQString:
.31d0	20 67 33	jsr $3367			jsr 	TokeniseString
.31d3	b0 c6		bcs $319b			bcs 	_TokLoop
.31d5	90 10		bcc $31e7			bcc 	_TokFail
.31d7					_TokPunctuation:
.31d7	20 46 33	jsr $3346			jsr 	TokenisePunctuation
.31da	b0 bf		bcs $319b			bcs 	_TokLoop
.31dc	90 09		bcc $31e7			bcc 	_TokFail
.31de					_TokIdentifier:
.31de	20 42 32	jsr $3242			jsr 	TokeniseIdentifier
.31e1	b0 b8		bcs $319b			bcs 	_TokLoop
.31e3	90 02		bcc $31e7			bcc 	_TokFail
.31e5					_TokExit:
.31e5	38		sec				sec
.31e6	60		rts				rts
.31e7					_TokFail:
.31e7	18		clc				clc
.31e8	60		rts				rts
.31e9					TokenWrite:
.31e9	85 32		sta $32				sta 	tempShort 					; save XA
.31eb	48		pha				pha
.31ec	8a		txa				txa
.31ed	48		pha				pha
.31ee	a5 32		lda $32				lda 	tempShort
.31f0	ae 1a 0d	ldx $0d1a			ldx 	tokenBufferIndex 			; geet index
.31f3	9d 1a 0c	sta $0c1a,x			sta 	tokenBuffer,x 				; write byte to buffer
.31f6	a9 80		lda #$80			lda 	#TOK_EOL 					; pre-emptively write EOL marker after
.31f8	9d 1b 0c	sta $0c1b,x			sta 	tokenBuffer+1,x
.31fb	ee 1a 0d	inc $0d1a			inc 	tokenBufferIndex 			; bump index
.31fe	68		pla				pla
.31ff	aa		tax				tax
.3200	68		pla				pla
.3201	60		rts				rts
.3202					TokeniseMakeASCIIZ:
.3202	a0 00		ldy #$00			ldy 	#0							; get length of string.
.3204	b1 28		lda ($28),y			lda 	(codePtr),y
.3206	a8		tay				tay
.3207	c8		iny				iny 								; +1, the NULL goes here.
.3208	a9 00		lda #$00			lda 	#0
.320a	91 28		sta ($28),y			sta 	(codePtr),y 				; write the trailing NULL.
.320c	e6 28		inc $28				inc 	codePtr 					; bump the pointer.
.320e	d0 02		bne $3212			bne 	_TMKAExit
.3210	e6 29		inc $29				inc 	codePtr+1
.3212					_TMKAExit:
.3212	60		rts				rts
.3213					TokeniseFixCase:
.3213	a0 00		ldy #$00			ldy 	#0 							; position in buffer.
.3215	a2 01		ldx #$01			ldx 	#1 							; bit 0 of this is 'in quotes'
.3217					_TFCFlipQ:
.3217	8a		txa				txa
.3218	49 01		eor #$01			eor 	#1
.321a	aa		tax				tax
.321b					_TFCLoop:
.321b	b1 28		lda ($28),y			lda 	(codePtr),y 				; get character
.321d	f0 22		beq $3241			beq 	_TFCExit 					; if zero exit.
.321f	c9 20		cmp #$20			cmp 	#32 						; if control
.3221	90 1a		bcc $323d			bcc 	_TFCControl
.3223	c8		iny				iny 								; preconsume
.3224	c9 22		cmp #$22			cmp 	#'"'
.3226	f0 ef		beq $3217			beq 	_TFCFlipQ
.3228	c9 61		cmp #$61			cmp 	#"a"						; check if L/C
.322a	90 ef		bcc $321b			bcc 	_TFCLoop
.322c	c9 7b		cmp #$7b			cmp 	#"z"+1
.322e	b0 eb		bcs $321b			bcs 	_TFCLoop
.3230	e0 00		cpx #$00			cpx 	#0 							; in quotes, if so, leave alone.
.3232	d0 e7		bne $321b			bne 	_TFCLoop
.3234	88		dey				dey
.3235	49 20		eor #$20			eor 	#"A"^"a"					; make U/C
.3237					_TFCWrite:
.3237	91 28		sta ($28),y			sta 	(codePtr),y
.3239	c8		iny				iny
.323a	4c 1b 32	jmp $321b			jmp 	_TFCLoop
.323d					_TFCControl:
.323d	a9 20		lda #$20			lda 	#" "
.323f	d0 f6		bne $3237			bne 	_TFCWrite
.3241					_TFCExit:
.3241	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokident.asm

.3242					TokeniseIdentifier:
.3242	a2 00		ldx #$00			ldx 	#0
.3244					_TICopyID:
.3244	b1 28		lda ($28),y			lda 	(codePtr),y					; get characters
.3246	c9 5f		cmp #$5f			cmp 	#"_" 						; underscore converted to minus internally.
.3248	f0 16		beq $3260			beq 	_TICopyUnderscore
.324a	c9 2e		cmp #$2e			cmp 	#"."
.324c	f0 14		beq $3262			beq 	_TICopyIn
.324e	c9 30		cmp #$30			cmp 	#"0"
.3250	90 1b		bcc $326d			bcc 	_TIEndCopy
.3252	c9 3a		cmp #$3a			cmp 	#"9"+1
.3254	90 0c		bcc $3262			bcc 	_TICopyIn
.3256	c9 41		cmp #$41			cmp 	#"A"
.3258	90 13		bcc $326d			bcc 	_TIEndCopy
.325a	c9 5b		cmp #$5b			cmp 	#"Z"+1
.325c	b0 0f		bcs $326d			bcs		_TIEndCopy
.325e	90 02		bcc $3262			bcc 	_TICopyIn
.3260					_TICopyUnderScore:
.3260	a9 2d		lda #$2d			lda 	#"-"						; _ is mapped to -
.3262					_TICopyIn:
.3262	e8		inx				inx 								; write into buffer in 7 bit ASCII form
.3263	9d cf 0a	sta $0acf,x			sta 	convertBuffer,x
.3266	8e cf 0a	stx $0acf			stx 	convertBuffer
.3269	c8		iny				iny 								; next character
.326a	4c 44 32	jmp $3244			jmp 	_TICopyID 					; loop round
.326d					_TIEndCopy:
.326d	a9 24		lda #$24			lda 	#"$"
.326f	20 c4 32	jsr $32c4			jsr 	TIDCheckCopy
.3272	a9 23		lda #$23			lda 	#"#"
.3274	20 c4 32	jsr $32c4			jsr 	TIDCheckCopy
.3277	a9 28		lda #$28			lda 	#"("
.3279	20 c4 32	jsr $32c4			jsr 	TIDCheckCopy
.327c	20 fb 30	jsr $30fb			jsr 	TokenSearch 				; is it a token
.327f	b0 41		bcs $32c2			bcs 	_TIExit 					; if so, then exit.
.3281	98		tya				tya
.3282	48		pha				pha
.3283	a0 3a		ldy #$3a			ldy 	#$3A 						; default type.
.3285	ae cf 0a	ldx $0acf			ldx 	convertBuffer 				; is last character (
.3288	bd cf 0a	lda $0acf,x			lda 	convertBuffer,x
.328b	c9 28		cmp #$28			cmp 	#"("
.328d	d0 02		bne $3291			bne 	_TINotArray
.328f	ca		dex				dex 								; yes, remove it and convert to array.
.3290	c8		iny				iny
.3291					_TINotArray:
.3291	bd cf 0a	lda $0acf,x			lda 	convertBuffer,x 			; check for $
.3294	c9 24		cmp #$24			cmp 	#"$"
.3296	d0 03		bne $329b			bne 	_TINotString
.3298	ca		dex				dex
.3299	c8		iny				iny
.329a	c8		iny				iny
.329b					_TINotString:
.329b	bd cf 0a	lda $0acf,x			lda 	convertBuffer,x 			; check for #
.329e	c9 23		cmp #$23			cmp 	#"#"
.32a0	d0 05		bne $32a7			bne 	_TINotFloat
.32a2	ca		dex				dex
.32a3	c8		iny				iny
.32a4	c8		iny				iny
.32a5	c8		iny				iny
.32a6	c8		iny				iny
.32a7					_TINotFloat:
.32a7	e8		inx				inx 								; write end marker for identifier.
.32a8	98		tya				tya
.32a9	9d cf 0a	sta $0acf,x			sta 	convertBuffer,x
.32ac	8e cf 0a	stx $0acf			stx 	convertBuffer 				; update length.
.32af	a2 01		ldx #$01			ldx 	#1
.32b1					_TIOutput:
.32b1	bd cf 0a	lda $0acf,x			lda 	convertBuffer,x
.32b4	29 3f		and #$3f			and 	#$3F
.32b6	48		pha				pha
.32b7	20 e9 31	jsr $31e9			jsr 	TokenWrite
.32ba	e8		inx				inx
.32bb	68		pla				pla
.32bc	c9 3a		cmp #$3a			cmp 	#$3A
.32be	90 f1		bcc $32b1			bcc 	_TIOutput
.32c0	68		pla				pla
.32c1	a8		tay				tay
.32c2					_TIExit:
.32c2	38		sec				sec 								; this can't fail.
.32c3	60		rts				rts
.32c4					TIDCheckCopy:
.32c4	d1 28		cmp ($28),y			cmp 	(codePtr),y
.32c6	d0 08		bne $32d0			bne 	_TIDCCExit
.32c8	e8		inx				inx
.32c9	9d cf 0a	sta $0acf,x			sta 	convertBuffer,x
.32cc	8e cf 0a	stx $0acf			stx 	convertBuffer
.32cf	c8		iny				iny
.32d0					_TIDCCExit:
.32d0	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokinteger.asm

.32d1					TokeniseInteger:
.32d1	85 2c		sta $2c				sta 	temp1 						; save base
.32d3	a2 00		ldx #$00			ldx 	#0							; count of chars so far
.32d5	8e cf 0a	stx $0acf			stx 	convertBuffer
.32d8					_TIGetChars:
.32d8	b1 28		lda ($28),y			lda 	(codePtr),y 				; check character is numeric
.32da	c9 30		cmp #$30			cmp 	#"0"
.32dc	90 1f		bcc $32fd			bcc 	_TIEndGet
.32de	c9 3a		cmp #$3a			cmp 	#"9"+1
.32e0	90 10		bcc $32f2			bcc 	_TIHaveChar
.32e2	a5 2c		lda $2c				lda 	temp1 						; fail if not hex mode
.32e4	c9 0a		cmp #$0a			cmp 	#10
.32e6	f0 15		beq $32fd			beq 	_TIEndGet
.32e8	b1 28		lda ($28),y			lda 	(codePtr),y 				; check legitimate hex.
.32ea	c9 41		cmp #$41			cmp 	#"A"
.32ec	90 0f		bcc $32fd			bcc 	_TIEndGet
.32ee	c9 5b		cmp #$5b			cmp 	#"Z"+1
.32f0	b0 0b		bcs $32fd			bcs 	_TIEndGet
.32f2					_TIHaveChar:
.32f2	e8		inx				inx 								; write into buffer.
.32f3	8e cf 0a	stx $0acf			stx 	convertBuffer
.32f6	9d cf 0a	sta $0acf,x			sta 	convertBuffer,x
.32f9	c8		iny				iny 								; next char
.32fa	4c d8 32	jmp $32d8			jmp 	_TIGetChars
.32fd					_TIEndGet:
.32fd	e0 00		cpx #$00			cpx 	#0 							; no char acquired.
.32ff	f0 1c		beq $331d			beq 	_TIFail
.3301	98		tya				tya
.3302	48		pha				pha
.3303	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.3305	85 2a		sta $2a				sta 	temp0
.3307	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.3309	85 2b		sta $2b				sta 	1+(temp0)
.330b	a9 00		lda #$00			lda 	#0 							; stack 0
.330d	a4 2c		ldy $2c				ldy 	temp1 						; base Y
.330f	a2 14		ldx #$14		ldx	#20
.3311	20 45 2c	jsr $2c45		jsr	mainHandler
.3314	68		pla				pla
.3315	a8		tay				tay
.3316	90 05		bcc $331d			bcc 	_TIFail 					; didn't convert.
.3318	20 1f 33	jsr $331f			jsr 	TIRecursiveOut 				; recursive output ?
.331b	38		sec				sec
.331c	60		rts				rts
.331d					_TIFail:
.331d	18		clc				clc
.331e	60		rts				rts
.331f					TIRecursiveOut:
.331f	a5 48		lda $48				lda 	esInt0 						; get value to output after possible recursion
.3321	29 3f		and #$3f			and 	#$3F
.3323	09 40		ora #$40			ora 	#$40
.3325	48		pha				pha
.3326	a5 48		lda $48				lda 	esInt0 						; are we recursing ?
.3328	29 c0		and #$c0			and 	#$C0
.332a	05 50		ora $50				ora 	esInt1
.332c	05 58		ora $58				ora 	esInt2
.332e	05 60		ora $60				ora 	esInt3
.3330	f0 10		beq $3342			beq 	_TIRONoRecursion
.3332	a2 06		ldx #$06			ldx 	#6 							; shift right x 6
.3334					_TIROShift:
.3334	46 60		lsr $60				lsr 	esInt3
.3336	66 58		ror $58				ror 	esInt2
.3338	66 50		ror $50				ror 	esInt1
.333a	66 48		ror $48				ror 	esInt0
.333c	ca		dex				dex
.333d	d0 f5		bne $3334			bne 	_TIROShift
.333f	20 1f 33	jsr $331f			jsr 	TIRecursiveOut 				; call recursively
.3342					_TIRONoRecursion:
.3342	68		pla				pla 								; pull the old bit.
.3343	4c e9 31	jmp $31e9			jmp 	TokenWrite

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokpunct.asm

.3346					TokenisePunctuation:
.3346	b1 28		lda ($28),y			lda	 	(codePtr),y 				; copy next 2 chars into convertBuffer
.3348	8d d0 0a	sta $0ad0			sta 	convertBuffer+1
.334b	c8		iny				iny
.334c	b1 28		lda ($28),y			lda 	(codePtr),y
.334e	8d d1 0a	sta $0ad1			sta 	convertBuffer+2
.3351	c8		iny				iny 								; Y is +2
.3352	a9 02		lda #$02			lda 	#2 							; 2 character string.
.3354	8d cf 0a	sta $0acf			sta 	convertBuffer
.3357	20 fb 30	jsr $30fb			jsr 	TokenSearch 				; search for that token.
.335a	b0 0a		bcs $3366			bcs 	_TIFound
.335c	ce cf 0a	dec $0acf			dec 	convertBuffer 				; make it a 1 character string
.335f	88		dey				dey 								; Y is now +1
.3360	20 fb 30	jsr $30fb			jsr 	TokenSearch 				; search for that token.
.3363	b0 01		bcs $3366			bcs 	_TIFound
.3365	88		dey				dey 								; Y is now +0, carry clear indicating failure.
.3366					_TIFound:
.3366	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokstring.asm

.3367					TokeniseString:
.3367	c8		iny				iny 								; skip opening quote
.3368	a2 ff		ldx #$ff			ldx 	#255 						; count length of string.
.336a	84 2a		sty $2a				sty 	temp0 						; save start.
.336c					_TSGetLength:
.336c	b1 28		lda ($28),y			lda 	(codePtr),y 				; get next
.336e	f0 21		beq $3391			beq 	_TSFail						; end of line, fail
.3370	c8		iny				iny
.3371	e8		inx				inx
.3372	c9 22		cmp #$22			cmp 	#'"' 						; until end quote found.
.3374	d0 f6		bne $336c			bne 	_TSGetLength
.3376	a9 85		lda #$85			lda 	#TOK_STR 					; write string token out
.3378	20 e9 31	jsr $31e9			jsr 	TokenWrite
.337b	8a		txa				txa 								; output length
.337c	20 e9 31	jsr $31e9			jsr 	TokenWrite
.337f	a4 2a		ldy $2a				ldy 	temp0 						; get original position
.3381	e0 00		cpx #$00			cpx 	#0 							; check ended
.3383	f0 09		beq $338e			beq 	_TSExit
.3385					_TSOutput:
.3385	b1 28		lda ($28),y			lda 	(codePtr),y					; output character
.3387	20 e9 31	jsr $31e9			jsr 	TokenWrite
.338a	c8		iny				iny
.338b	ca		dex				dex
.338c	d0 f7		bne $3385			bne 	_TSOutput
.338e					_TSExit:
.338e	c8		iny				iny 								; skip ending quote
.338f	38		sec				sec 								; return CS.
.3390	60		rts				rts
.3391					_TSFail:
.3391	18		clc				clc
.3392	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokentext.asm

.3393					TokenTableAddress:
>3393	9b 33						.word 	Group0Text
>3395	4c 35						.word 	Group1Text
>3397	85 35						.word 	Group2Text
>3399	92 35						.word 	Group3Text

;******  Processing file: tokeniser/../generated/tokentext0.inc

.339b					Group0Text:
>339b	03 41 4e c4				.byte $03,$41,$4e,$c4                  ; $86 and
>339f	02 4f d2				.byte $02,$4f,$d2                      ; $87 or
>33a2	03 58 4f d2				.byte $03,$58,$4f,$d2                  ; $88 xor
>33a6	02 3e bd				.byte $02,$3e,$bd                      ; $89 >=
>33a9	02 3c bd				.byte $02,$3c,$bd                      ; $8a <=
>33ac	01 be					.byte $01,$be                          ; $8b >
>33ae	01 bc					.byte $01,$bc                          ; $8c <
>33b0	01 bd					.byte $01,$bd                          ; $8d =
>33b2	02 3c be				.byte $02,$3c,$be                      ; $8e <>
>33b5	01 ab					.byte $01,$ab                          ; $8f +
>33b7	01 ad					.byte $01,$ad                          ; $90 -
>33b9	02 3e be				.byte $02,$3e,$be                      ; $91 >>
>33bc	02 3c bc				.byte $02,$3c,$bc                      ; $92 <<
>33bf	01 aa					.byte $01,$aa                          ; $93 *
>33c1	01 af					.byte $01,$af                          ; $94 /
>33c3	03 4d 4f c4				.byte $03,$4d,$4f,$c4                  ; $95 mod
>33c7	01 de					.byte $01,$de                          ; $96 ^
>33c9	01 a1					.byte $01,$a1                          ; $97 !
>33cb	01 bf					.byte $01,$bf                          ; $98 ?
>33cd	06 52 45 50 45 41 d4			.byte $06,$52,$45,$50,$45,$41,$d4      ; $99 repeat
>33d4	05 57 48 49 4c c5			.byte $05,$57,$48,$49,$4c,$c5          ; $9a while
>33da	03 46 4f d2				.byte $03,$46,$4f,$d2                  ; $9b for
>33de	02 49 c6				.byte $02,$49,$c6                      ; $9c if
>33e1	07 44 45 46 50 52 4f c3			.byte $07,$44,$45,$46,$50,$52,$4f,$c3  ; $9d defproc
>33e9	05 55 4e 54 49 cc			.byte $05,$55,$4e,$54,$49,$cc          ; $9e until
>33ef	04 57 45 4e c4				.byte $04,$57,$45,$4e,$c4              ; $9f wend
>33f4	04 4e 45 58 d4				.byte $04,$4e,$45,$58,$d4              ; $a0 next
>33f9	04 54 48 45 ce				.byte $04,$54,$48,$45,$ce              ; $a1 then
>33fe	05 45 4e 44 49 c6			.byte $05,$45,$4e,$44,$49,$c6          ; $a2 endif
>3404	07 45 4e 44 50 52 4f c3			.byte $07,$45,$4e,$44,$50,$52,$4f,$c3  ; $a3 endproc
>340c	01 a8					.byte $01,$a8                          ; $a4 (
>340e	04 4c 45 4e a8				.byte $04,$4c,$45,$4e,$a8              ; $a5 len(
>3413	04 53 47 4e a8				.byte $04,$53,$47,$4e,$a8              ; $a6 sgn(
>3418	04 41 42 53 a8				.byte $04,$41,$42,$53,$a8              ; $a7 abs(
>341d	07 52 41 4e 44 4f 4d a8			.byte $07,$52,$41,$4e,$44,$4f,$4d,$a8  ; $a8 random(
>3425	04 50 41 47 c5				.byte $04,$50,$41,$47,$c5              ; $a9 page
>342a	04 54 52 55 c5				.byte $04,$54,$52,$55,$c5              ; $aa true
>342f	05 46 41 4c 53 c5			.byte $05,$46,$41,$4c,$53,$c5          ; $ab false
>3435	04 4d 49 4e a8				.byte $04,$4d,$49,$4e,$a8              ; $ac min(
>343a	04 4d 41 58 a8				.byte $04,$4d,$41,$58,$a8              ; $ad max(
>343f	04 53 59 53 a8				.byte $04,$53,$59,$53,$a8              ; $ae sys(
>3444	06 54 49 4d 45 52 a8			.byte $06,$54,$49,$4d,$45,$52,$a8      ; $af timer(
>344b	06 45 56 45 4e 54 a8			.byte $06,$45,$56,$45,$4e,$54,$a8      ; $b0 event(
>3452	04 47 45 54 a8				.byte $04,$47,$45,$54,$a8              ; $b1 get(
>3457	06 49 4e 4b 45 59 a8			.byte $06,$49,$4e,$4b,$45,$59,$a8      ; $b2 inkey(
>345e	06 41 4c 4c 4f 43 a8			.byte $06,$41,$4c,$4c,$4f,$43,$a8      ; $b3 alloc(
>3465	05 43 48 52 24 a8			.byte $05,$43,$48,$52,$24,$a8          ; $b4 chr$(
>346b	06 4c 45 46 54 24 a8			.byte $06,$4c,$45,$46,$54,$24,$a8      ; $b5 left$(
>3472	05 4d 49 44 24 a8			.byte $05,$4d,$49,$44,$24,$a8          ; $b6 mid$(
>3478	07 52 49 47 48 54 24 a8			.byte $07,$52,$49,$47,$48,$54,$24,$a8  ; $b7 right$(
>3480	05 53 54 52 24 a8			.byte $05,$53,$54,$52,$24,$a8          ; $b8 str$(
>3486	04 56 41 4c a8				.byte $04,$56,$41,$4c,$a8              ; $b9 val(
>348b	05 50 45 45 4b a8			.byte $05,$50,$45,$45,$4b,$a8          ; $ba peek(
>3491	05 44 45 45 4b a8			.byte $05,$44,$45,$45,$4b,$a8          ; $bb deek(
>3497	05 4c 45 45 4b a8			.byte $05,$4c,$45,$45,$4b,$a8          ; $bc leek(
>349d	04 41 53 43 a8				.byte $04,$41,$53,$43,$a8              ; $bd asc(
>34a2	04 49 4e 54 a8				.byte $04,$49,$4e,$54,$a8              ; $be int(
>34a7	06 46 4c 4f 41 54 a8			.byte $06,$46,$4c,$4f,$41,$54,$a8      ; $bf float(
>34ae	06 49 53 56 41 4c a8			.byte $06,$49,$53,$56,$41,$4c,$a8      ; $c0 isval(
>34b5	07 55 50 50 45 52 24 a8			.byte $07,$55,$50,$50,$45,$52,$24,$a8  ; $c1 upper$(
>34bd	07 4c 4f 57 45 52 24 a8			.byte $07,$4c,$4f,$57,$45,$52,$24,$a8  ; $c2 lower$(
>34c5	01 c0					.byte $01,$c0                          ; $c3 @
>34c7	01 fe					.byte $01,$fe                          ; $c4 ~
>34c9	01 a6					.byte $01,$a6                          ; $c5 &
>34cb	01 a9					.byte $01,$a9                          ; $c6 )
>34cd	01 ba					.byte $01,$ba                          ; $c7 :
>34cf	01 ac					.byte $01,$ac                          ; $c8 ,
>34d1	01 bb					.byte $01,$bb                          ; $c9 ;
>34d3	01 a7					.byte $01,$a7                          ; $ca '
>34d5	02 54 cf				.byte $02,$54,$cf                      ; $cb to
>34d8	04 53 54 45 d0				.byte $04,$53,$54,$45,$d0              ; $cc step
>34dd	04 50 52 4f c3				.byte $04,$50,$52,$4f,$c3              ; $cd proc
>34e2	05 4c 4f 43 41 cc			.byte $05,$4c,$4f,$43,$41,$cc          ; $ce local
>34e8	03 44 49 cd				.byte $03,$44,$49,$cd                  ; $cf dim
>34ec	03 52 45 cd				.byte $03,$52,$45,$cd                  ; $d0 rem
>34f0	03 4c 45 d4				.byte $03,$4c,$45,$d4                  ; $d1 let
>34f4	05 49 4e 50 55 d4			.byte $05,$49,$4e,$50,$55,$d4          ; $d2 input
>34fa	04 45 4c 53 c5				.byte $04,$45,$4c,$53,$c5              ; $d3 else
>34ff	03 56 44 d5				.byte $03,$56,$44,$d5                  ; $d4 vdu
>3503	05 50 52 49 4e d4			.byte $05,$50,$52,$49,$4e,$d4          ; $d5 print
>3509	04 47 4f 54 cf				.byte $04,$47,$4f,$54,$cf              ; $d6 goto
>350e	05 47 4f 53 55 c2			.byte $05,$47,$4f,$53,$55,$c2          ; $d7 gosub
>3514	06 52 45 54 55 52 ce			.byte $06,$52,$45,$54,$55,$52,$ce      ; $d8 return
>351b	04 44 41 54 c1				.byte $04,$44,$41,$54,$c1              ; $d9 data
>3520	06 41 53 53 45 52 d4			.byte $06,$41,$53,$53,$45,$52,$d4      ; $da assert
>3527	04 50 4f 4b c5				.byte $04,$50,$4f,$4b,$c5              ; $db poke
>352c	04 44 4f 4b c5				.byte $04,$44,$4f,$4b,$c5              ; $dc doke
>3531	04 4c 4f 4b c5				.byte $04,$4c,$4f,$4b,$c5              ; $dd loke
>3536	03 49 4e cb				.byte $03,$49,$4e,$cb                  ; $de ink
>353a	05 50 41 50 45 d2			.byte $05,$50,$41,$50,$45,$d2          ; $df paper
>3540	03 43 4c d3				.byte $03,$43,$4c,$d3                  ; $e0 cls
>3544	06 4c 4f 43 41 54 c5			.byte $06,$4c,$4f,$43,$41,$54,$c5      ; $e1 locate
>354b	00					.byte $00

;******  Return to file: tokeniser/tokentext.asm


;******  Processing file: tokeniser/../generated/tokentext1.inc

.354c					Group1Text:
>354c	05 43 4c 45 41 d2			.byte $05,$43,$4c,$45,$41,$d2          ; $86 clear
>3552	04 4c 4f 41 c4				.byte $04,$4c,$4f,$41,$c4              ; $87 load
>3557	04 53 41 56 c5				.byte $04,$53,$41,$56,$c5              ; $88 save
>355c	04 4c 49 53 d4				.byte $04,$4c,$49,$53,$d4              ; $89 list
>3561	03 4e 45 d7				.byte $03,$4e,$45,$d7                  ; $8a new
>3565	03 52 55 ce				.byte $03,$52,$55,$ce                  ; $8b run
>3569	04 52 45 41 c4				.byte $04,$52,$45,$41,$c4              ; $8c read
>356e	07 52 45 53 54 4f 52 c5			.byte $07,$52,$45,$53,$54,$4f,$52,$c5  ; $8d restore
>3576	03 45 4e c4				.byte $03,$45,$4e,$c4                  ; $8e end
>357a	04 53 54 4f d0				.byte $04,$53,$54,$4f,$d0              ; $8f stop
>357f	04 58 45 4d d5				.byte $04,$58,$45,$4d,$d5              ; $90 xemu
>3584	00					.byte $00

;******  Return to file: tokeniser/tokentext.asm


;******  Processing file: tokeniser/../generated/tokentext2.inc

.3585					Group2Text:
>3585	05 56 50 4f 4b c5			.byte $05,$56,$50,$4f,$4b,$c5          ; $86 vpoke
>358b	05 56 44 4f 4b c5			.byte $05,$56,$44,$4f,$4b,$c5          ; $87 vdoke
>3591	00					.byte $00

;******  Return to file: tokeniser/tokentext.asm


;******  Processing file: tokeniser/../generated/tokentext3.inc

.3592					Group3Text:
>3592	06 56 50 45 45 4b a8			.byte $06,$56,$50,$45,$45,$4b,$a8      ; $86 vpeek(
>3599	06 56 44 45 45 4b a8			.byte $06,$56,$44,$45,$45,$4b,$a8      ; $87 vdeek(
>35a0	00					.byte $00

;******  Return to file: tokeniser/tokentext.asm


;******  Return to file: tokeniser/tokeniser.asm

.35a1					tokeniserHandler:
.35a1	7c a4 35	jmp ($35a4,x)			jmp 	(tokeniserVectors,x)
.35a4					tokeniserVectors:
>35a4	0d 2f					.word Detokenise           ; index 0
>35a6	03 2f					.word ListLine             ; index 2
>35a8	6a 31					.word TokTest              ; index 4
>35aa	8a 31					.word Tokenise             ; index 6
>35ac	8d 31					.word TokeniseASCIIZ       ; index 8

;******  Return to file: basic.asm

.35ae					section_end_tokeniser:
.35ae					section_start_variable:

;******  Processing file: variable/variable.asm


;******  Processing file: variable/access.asm

.0d1b					varHash:
>0d1b							.fill	1
.0d1c					varType:
>0d1c							.fill 	1
.0d1d					varEnd:
>0d1d							.fill 	1
.007c					hashList:
>007c							.fill 	2
.35ae					AccessVariable:
.35ae	aa		tax				tax 								; stack in X
.35af	c8		iny				iny									; look at second character
.35b0	b1 28		lda ($28),y			lda 	(codePtr),y
.35b2	88		dey				dey
.35b3	c9 3a		cmp #$3a			cmp 	#TYPE_INT 					; is it the integer marker ($3A)
.35b5	d0 15		bne $35cc			bne 	_AVLong 					; no, always use the hash tables.
.35b7	b1 28		lda ($28),y			lda 	(codePtr),y 				; this is the 6 bit ASCII of A-Z 1-26
.35b9	38		sec				sec 	 							; make it 0-25
.35ba	e9 01		sbc #$01			sbc 	#1
.35bc	0a		asl a				asl 	a 							; x 4 as 4 bytes / variable.
.35bd	0a		asl a				asl 	a
.35be	95 48		sta $48,x			sta 	esInt0,x
.35c0	a9 0a		lda #$0a			lda 	#SingleLetterVar >> 8 		; make it an address
.35c2	95 50		sta $50,x			sta 	esInt1,x
.35c4	a9 80		lda #$80			lda 	#$80 						; type is an integer reference.
.35c6	95 40		sta $40,x			sta 	esType,x
.35c8	c8		iny				iny 								; skip over the variable reference in the code.
.35c9	c8		iny				iny  								; (1 letter, 1 type)
.35ca	8a		txa				txa 								; stack in A to return.
.35cb	60		rts				rts
.35cc					_AVLong:
.35cc	8a		txa				txa
.35cd	48		pha				pha
.35ce	20 15 36	jsr $3615			jsr 	AccessSetup 				; set up the basic information we need for later
.35d1	20 41 38	jsr $3841			jsr 	FindVariable 				; does the variable exist already ?
.35d4	b0 0e		bcs $35e4			bcs 	_AVFound 					; yes, then its found
.35d6	ad 1c 0d	lda $0d1c			lda 	varType 					; otherwise, is the variable type an array
.35d9	4a		lsr a				lsr 	a
.35da	90 05		bcc $35e1			bcc 	_AVCanCreate 				; if not, we can autocreate
.35dc	a2 15		ldx #$15			ldx 	#ErrorID_noauto
.35de	20 76 11	jsr $1176		jsr	errorHandler
.35e1					_AVCanCreate:
.35e1	20 c8 36	jsr $36c8			jsr 	CreateVariable 				; variable does not exist, create it.
.35e4					_AVFound:
.35e4	68		pla				pla
.35e5	aa		tax				tax
.35e6	18		clc				clc 								; copy temp0 (variable record address)
.35e7	a5 2a		lda $2a				lda 	temp0 						; +5 (to point to the data)
.35e9	69 05		adc #$05			adc 	#5 							; (first 5 bytes are link, name, hash)
.35eb	95 48		sta $48,x			sta 	esInt0,x
.35ed	a5 2b		lda $2b				lda 	temp0+1
.35ef	69 00		adc #$00			adc 	#0
.35f1	95 50		sta $50,x			sta 	esInt1,x
.35f3	a9 00		lda #$00			lda 	#0
.35f5	95 58		sta $58,x			sta 	esInt2,x
.35f7	95 60		sta $60,x			sta 	esInt3,x
.35f9	ac 1c 0d	ldy $0d1c			ldy 	varType 					; get the type ID from the type.
.35fc	b9 d5 35	lda $35d5,y			lda 	_AVTypeTable-$3A,y 			; e.g. a reference to int/float/string.
.35ff	95 40		sta $40,x			sta 	esType,x
.3601	ac 1d 0d	ldy $0d1d			ldy 	varEnd 						; restore Y
.3604	ad 1c 0d	lda $0d1c			lda 	VarType 					; get variable type, put LSB into C
.3607	4a		lsr a				lsr 	a
.3608	90 03		bcc $360d			bcc 	_AVNotArray 				; if carry set,it is an array variable.
.360a	20 52 36	jsr $3652			jsr 	AccessArray 				; array lookup. if LSB was set.
.360d					_AVNotArray:
.360d	8a		txa				txa 								; return stack in A and return
.360e	60		rts				rts
.360f					_AVTypeTable:
>360f	80 80						.byte 	$80,$80						; integer
>3611	c0 c0						.byte 	$C0,$C0 					; string
>3613	81 81						.byte 	$81,$81 					; float
.3615					AccessSetup:
.3615	a9 00		lda #$00			lda 	#0 							; zero the hash byte.
.3617	8d 1b 0d	sta $0d1b			sta 	varHash
.361a	98		tya				tya
.361b	48		pha				pha
.361c	b1 28		lda ($28),y	_ASLoop:lda 	(codePtr),y					; get next identifier character
.361e	c9 3a		cmp #$3a			cmp 	#$3A 						; is it 3A-3F which end all identifiers ?
.3620	b0 0b		bcs $362d			bcs 	_ASComplete
.3622	18		clc				clc 								; add to the hash. Might improve this.
.3623	6d 1b 0d	adc $0d1b			adc 	varHash
.3626	8d 1b 0d	sta $0d1b			sta 	varHash
.3629	c8		iny				iny 								; next character
.362a	4c 1c 36	jmp $361c			jmp 	_ASLoop
.362d					_ASComplete:
.362d	8d 1c 0d	sta $0d1c			sta 	varType 					; save variable type byte
.3630	c8		iny				iny
.3631	8c 1d 0d	sty $0d1d			sty 	varEnd 						; save the ending position.
.3634	38		sec				sec 								; convert type byte from $3A-$3F to 0..5
.3635	e9 3a		sbc #$3a			sbc 	#$3A
.3637	0a		asl a				asl 	a 							; multiply by hashTableSize (8 in this case)
.3638	0a		asl a				asl 	a
.3639	0a		asl a				asl 	a
.363a	0a		asl a				asl 	a 							; 2 bytes/word
.363b	85 2a		sta $2a				sta 	temp0 						; this is the offset to the start of the table.
.363d	ad 1b 0d	lda $0d1b			lda 	varHash 					; get hash
.3640	29 07		and #$07			and 	#(hashTableSize-1)			; force into range (for 8,0..7)
.3642	0a		asl a				asl  	a 							; x 2 (for word) and clear carry
.3643	65 2a		adc $2a				adc 	temp0 						; now offset from the start of the hash table.
.3645	69 68		adc #$68			adc 	#hashTables & $FF 			; add to hash table base address
.3647	85 7c		sta $7c				sta 	hashList 					; making hashLists point to the head of the link list.
.3649	a9 0a		lda #$0a			lda 	#hashTables >> 8
.364b	69 00		adc #$00			adc 	#0
.364d	85 7d		sta $7d				sta 	hashList+1
.364f	68		pla				pla
.3650	a8		tay				tay
.3651	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/accessarray.asm

.3652					AccessArray:
.3652	e8		inx				inx
.3653	8a		txa				txa
.3654	a2 06		ldx #$06		ldx	#6
.3656	20 45 2c	jsr $2c45		jsr	mainHandler
.3659	aa		tax				tax
.365a	ca		dex				dex
.365b	a2 00		ldx #$00		ldx	#0
.365d	20 45 2c	jsr $2c45		jsr	mainHandler
.3660	b5 61		lda $61,x			lda 	esInt3+1,x 					; check index value at least < 64k
.3662	15 59		ora $59,x			ora 	esInt2+1,x
.3664	d0 33		bne $3699			bne 	_AABadIndex
.3666	98		tya				tya
.3667	48		pha				pha
.3668	b5 48		lda $48,x			lda 	esInt0,x 					; put array info ptr in temp0 - this points to the
.366a	85 2a		sta $2a				sta 	temp0 						; address (+0) max (+2) and size (+4)
.366c	b5 50		lda $50,x			lda 	esInt1,x
.366e	85 2b		sta $2b				sta 	temp0+1
.3670	a0 02		ldy #$02			ldy 	#2 							; check out of range, compare against max index.
.3672	b5 49		lda $49,x			lda 	esInt0+1,x
.3674	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.3676	c8		iny				iny
.3677	b5 51		lda $51,x			lda 	esInt1+1,x
.3679	f1 2a		sbc ($2a),y			sbc 	(temp0),y
.367b	b0 1c		bcs $3699			bcs 	_AABadIndex 				; if >= then fail.
.367d	e8		inx				inx 								; point to index
.367e	a0 04		ldy #$04			ldy 	#4 							; get the size byte.
.3680	b1 2a		lda ($2a),y			lda 	(temp0),y
.3682	20 9e 36	jsr $369e			jsr 	MultiplyTOSByA 				; specialist multiplier.
.3685	ca		dex				dex
.3686	a0 00		ldy #$00			ldy 	#0 							; add this to the array base as the new address
.3688	18		clc				clc
.3689	b5 49		lda $49,x			lda 	esInt0+1,x
.368b	71 2a		adc ($2a),y			adc 	(temp0),y
.368d	95 48		sta $48,x			sta 	esInt0,x
.368f	b5 51		lda $51,x			lda 	esInt1+1,x
.3691	c8		iny				iny
.3692	71 2a		adc ($2a),y			adc 	(temp0),y
.3694	95 50		sta $50,x			sta 	esInt1,x
.3696	68		pla				pla
.3697	a8		tay				tay
.3698	60		rts				rts
.3699					_AABadIndex:
.3699	a2 1b		ldx #$1b			ldx 	#ErrorID_ArrayIndex
.369b	20 76 11	jsr $1176		jsr	errorHandler
.369e					MultiplyTOSByA:
.369e	48		pha				pha
.369f	b5 48		lda $48,x			lda 	esInt0,x 					; copy index to temp1
.36a1	85 2c		sta $2c				sta 	temp1
.36a3	b5 50		lda $50,x			lda 	esInt1,x
.36a5	85 2d		sta $2d				sta 	temp1+1
.36a7	68		pla				pla
.36a8	16 48		asl $48,x			asl 	esInt0,x 					; double it.
.36aa	36 50		rol $50,x			rol 	esInt1,x
.36ac	c9 02		cmp #$02			cmp 	#2 							; if x 2 then exit.
.36ae	f0 17		beq $36c7			beq 	_MTBAExit
.36b0	c9 06		cmp #$06			cmp 	#6 							; if x 6 then add temp1 to index
.36b2	d0 0f		bne $36c3			bne 	_MTBANotFloat
.36b4	48		pha				pha
.36b5	18		clc				clc 								; so this will make it x 3
.36b6	b5 48		lda $48,x			lda 	esInt0,x
.36b8	65 2c		adc $2c				adc 	temp1
.36ba	95 48		sta $48,x			sta 	esInt0,x
.36bc	b5 50		lda $50,x			lda 	esInt1,x
.36be	65 2d		adc $2d				adc 	temp1+1
.36c0	95 50		sta $50,x			sta 	esInt1,x
.36c2	68		pla				pla
.36c3					_MTBANotFloat:
.36c3	16 48		asl $48,x			asl 	esInt0,x					; now it is x 4 or x 6
.36c5	36 50		rol $50,x			rol 	esInt1,x
.36c7					_MTBAExit:
.36c7	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/create.asm

.36c8					CreateVariable:
.36c8	98		tya				tya 								; push Y on the stack twice.
.36c9	48		pha				pha									; position in code of the new variable.
.36ca	48		pha				pha
.36cb	ae 1c 0d	ldx $0d1c			ldx 	varType 					; get var type 0-5 from the var type
.36ce	bd e7 36	lda $36e7,x			lda		_CVSize-$3A,x 				; the bytes required for this new variable.
.36d1	48		pha				pha 								; save length
.36d2	a5 35		lda $35				lda 	lowMemory 					; set low Memory ptr to temp0
.36d4	85 2a		sta $2a				sta 	temp0 						; (address of the new variable)
.36d6	a5 36		lda $36				lda 	lowMemory+1
.36d8	85 2b		sta $2b				sta 	temp0+1
.36da	68		pla				pla 								; get length
.36db	18		clc				clc 								; add to low memory.
.36dc	65 35		adc $35				adc 	lowMemory
.36de	85 35		sta $35				sta 	lowMemory
.36e0	90 02		bcc $36e4			bcc 	_CVNoCarry
.36e2	e6 36		inc $36				inc 	lowMemory+1
.36e4					_CVNoCarry:
.36e4	ad 1b 0d	lda $0d1b			lda 	varHash 					; store hash at offset 4.
.36e7	a0 04		ldy #$04			ldy 	#4
.36e9	91 2a		sta ($2a),y			sta 	(temp0),y
.36eb	68		pla				pla 								; offset, work out where the variable name is.
.36ec	18		clc				clc
.36ed	65 28		adc $28				adc 	codePtr
.36ef	a0 02		ldy #$02			ldy 	#2 							; copy that into slots 2 + 3.
.36f1	91 2a		sta ($2a),y			sta 	(temp0),y
.36f3	a5 29		lda $29				lda 	codePtr+1
.36f5	69 00		adc #$00			adc 	#0
.36f7	c8		iny				iny
.36f8	91 2a		sta ($2a),y			sta 	(temp0),y
.36fa	cd c9 0a	cmp $0ac9			cmp 	basePage+1 					; compare against the program base.
.36fd	b0 03		bcs $3702			bcs 	_CVNotImmediate
.36ff	20 5f 37	jsr $375f			jsr 	CloneVariableName 			; we need to clone the variable name (immediate mode)
.3702					_CVNotImmediate:
.3702	a0 00		ldy #$00			ldy 	#0 							; copy current hash pointer in link
.3704	b1 7c		lda ($7c),y			lda 	(hashList),y 				; so we're inserting it in the front of a linked list
.3706	91 2a		sta ($2a),y			sta 	(temp0),y
.3708	c8		iny				iny
.3709	b1 7c		lda ($7c),y			lda 	(hashList),y
.370b	91 2a		sta ($2a),y			sta 	(temp0),y
.370d	a5 2b		lda $2b				lda 	temp0+1 					; set new link
.370f	91 7c		sta ($7c),y			sta 	(hashList),y
.3711	88		dey				dey
.3712	a5 2a		lda $2a				lda 	temp0
.3714	91 7c		sta ($7c),y			sta 	(hashList),y
.3716	ad 1c 0d	lda $0d1c			lda 	varType 					; type in A
.3719	a0 05		ldy #$05			ldy 	#5 							; offset in Y
.371b	20 27 37	jsr $3727			jsr 	ZeroTemp0Y 					; zero (temp0),y with whatever type.
.371e	68		pla				pla
.371f	a8		tay				tay
.3720	60		rts				rts
>3721	09 0a				_CVSize:.byte 	VarHSize+VarISize,VarHSize+VarASize 					; <storage for integer>
>3723	07 0a						.byte 	VarHSize+VarSSize,VarHSize+VarASize 					; <storage for string>
>3725	0b 0a						.byte 	VarHSize+VarFSize,VarHSize+VarASize 					; <storage for float>
.3727					ZeroTemp0Y:
.3727	4a		lsr a				lsr 	a 							; bit 0 in carry
.3728	0a		asl a				asl 	a
.3729	b0 19		bcs $3744			bcs 	_ZTExit 					; we don't initialise arrays.
.372b	c9 3c		cmp #$3c			cmp 	#$3C 						; check string
.372d	f0 16		beq $3745			beq 	_ZTWriteNullString 			; write "" string
.372f	c9 3e		cmp #$3e			cmp 	#$3E 						; check float
.3731	f0 22		beq $3755			beq 	_ZTWriteFloat
.3733	98		tya				tya
.3734	48		pha				pha
.3735	a9 00		lda #$00			lda 	#0
.3737	91 2a		sta ($2a),y			sta 	(temp0),y
.3739	c8		iny				iny
.373a	91 2a		sta ($2a),y			sta 	(temp0),y
.373c	c8		iny				iny
.373d	91 2a		sta ($2a),y			sta 	(temp0),y
.373f	c8		iny				iny
.3740	91 2a		sta ($2a),y			sta 	(temp0),y
.3742	68		pla				pla
.3743	a8		tay				tay
.3744					_ZTExit:
.3744	60		rts				rts
.3745					_ZTWriteNullString:
.3745	a9 00		lda #$00			lda 	#0 							; put a reference to null string as the default value.
.3747	8d ce 0a	sta $0ace			sta 	NullString
.374a	a9 ce		lda #$ce			lda 	#NullString & $FF
.374c	91 2a		sta ($2a),y			sta 	(temp0),y
.374e	a9 0a		lda #$0a			lda 	#NullString >> 8
.3750	c8		iny				iny
.3751	91 2a		sta ($2a),y			sta 	(temp0),y
.3753	88		dey				dey
.3754	60		rts				rts
.3755					_ZTWriteFloat:
.3755	8a		txa				txa
.3756	48		pha				pha
.3757	a2 1e		ldx #$1e		ldx	#30
.3759	20 a8 14	jsr $14a8		jsr	floatingpointHandler
.375c	68		pla				pla
.375d	aa		tax				tax
.375e	60		rts				rts
.375f					CloneVariableName:
.375f	a0 02		ldy #$02			ldy 	#2 							; copy vname address to temp2
.3761	b1 2a		lda ($2a),y			lda 	(temp0),y
.3763	85 2e		sta $2e				sta 	temp2
.3765	c8		iny				iny
.3766	b1 2a		lda ($2a),y			lda 	(temp0),y
.3768	85 2f		sta $2f				sta 	temp2+1
.376a	a5 36		lda $36				lda 	lowMemory+1 				; copy lowMemory address to (temp0),2/3
.376c	91 2a		sta ($2a),y			sta 	(temp0),y
.376e	88		dey				dey
.376f	a5 35		lda $35				lda 	lowMemory
.3771	91 2a		sta ($2a),y			sta 	(temp0),y
.3773	a0 00		ldy #$00			ldy 	#0 							; copy data from (temp2) to (lowMemory)
.3775					_CVNCopy:
.3775	b1 2e		lda ($2e),y			lda		(temp2),y
.3777	91 35		sta ($35),y			sta 	(lowMemory),y
.3779	c8		iny				iny
.377a	c9 3a		cmp #$3a			cmp 	#$3A 						; until the whole name has been copied.
.377c	90 f7		bcc $3775			bcc 	_CVNCopy
.377e	98		tya				tya 								; add Y to low memory
.377f	18		clc				clc
.3780	65 35		adc $35				adc 	lowMemory
.3782	85 35		sta $35				sta 	lowMemory
.3784	90 02		bcc $3788			bcc 	_CVNNoCarry
.3786	e6 36		inc $36				inc 	lowMemory+1
.3788					_CVNNoCarry:
.3788	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/createarray.asm

.3789					CreateArray:
.3789	20 15 36	jsr $3615			jsr 	AccessSetup 				; set up the basic stuff.
.378c	ad 1c 0d	lda $0d1c			lda 	varType 					; is the variable type an array
.378f	4a		lsr a				lsr 	a
.3790	90 3f		bcc $37d1			bcc 	_CANotArray 				; no, cause an error.
.3792	20 41 38	jsr $3841			jsr 	FindVariable 				; does the variable exist already
.3795	b0 35		bcs $37cc			bcs 	_CAFound 					; cannot redefine it.
.3797	20 c8 36	jsr $36c8			jsr 	CreateVariable 				; create the variable entry.
.379a	ac 1d 0d	ldy $0d1d			ldy 	varEnd 						; point Y to the end of the variable entry.
.379d	a5 2a		lda $2a				lda 	temp0 						; push address of new variable entry on the stack
.379f	48		pha				pha
.37a0	a5 2b		lda $2b				lda 	temp0+1
.37a2	48		pha				pha
.37a3	ad 1c 0d	lda $0d1c			lda 	varType 					; push variable type on the stack.
.37a6	48		pha				pha
.37a7	a9 00		lda #$00			lda 	#0 							; work out the array dimension on TOS.
.37a9	a2 06		ldx #$06		ldx	#6
.37ab	20 45 2c	jsr $2c45		jsr	mainHandler
.37ae	a2 00		ldx #$00		ldx	#0
.37b0	20 45 2c	jsr $2c45		jsr	mainHandler
.37b3	68		pla				pla 		 						; restore type and position.
.37b4	8d 1c 0d	sta $0d1c			sta 	varType
.37b7	68		pla				pla
.37b8	85 2b		sta $2b				sta 	temp0+1
.37ba	68		pla				pla
.37bb	85 2a		sta $2a				sta 	temp0
.37bd	a5 50		lda $50				lda 	esInt1 						; limit array max to 4096.
.37bf	29 e0		and #$e0			and 	#$E0
.37c1	05 58		ora $58				ora 	esInt2
.37c3	05 60		ora $60				ora 	esInt3
.37c5	f0 0f		beq $37d6			beq 	_CASizeOk
.37c7					_CASize:
.37c7	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.37c9	20 76 11	jsr $1176		jsr	errorHandler
.37cc					_CAFound:
.37cc	a2 19		ldx #$19			ldx 	#ErrorID_DupArray
.37ce	20 76 11	jsr $1176		jsr	errorHandler
.37d1					_CANotArray:
.37d1	a2 1a		ldx #$1a			ldx 	#ErrorID_NotArray
.37d3	20 76 11	jsr $1176		jsr	errorHandler
.37d6					_CASizeOk:
.37d6	e6 48		inc $48				inc 	esInt0 						; bump it by one, as we index from 0
.37d8	d0 02		bne $37dc			bne 	_CANoCarry 					; e.g. DIM A(10) ... A(0) - A(10)
.37da	e6 49		inc $49				inc 	esInt0+1
.37dc					_CANoCarry:
.37dc	98		tya				tya
.37dd	48		pha				pha
.37de	a0 05		ldy #$05			ldy 	#5
.37e0	a5 35		lda $35				lda 	lowMemory 					; copy low memory address in +5,+6
.37e2	91 2a		sta ($2a),y			sta 	(temp0),y 					; this is where it will come from
.37e4	c8		iny				iny
.37e5	a5 36		lda $36				lda 	lowMemory+1
.37e7	91 2a		sta ($2a),y			sta 	(temp0),y
.37e9	c8		iny				iny
.37ea	a5 48		lda $48				lda 	esInt0 						; copy maximum index value to +7,+8
.37ec	91 2a		sta ($2a),y			sta 	(temp0),y
.37ee	c8		iny				iny
.37ef	a5 50		lda $50				lda 	esInt1
.37f1	91 2a		sta ($2a),y			sta 	(temp0),y
.37f3	c8		iny				iny
.37f4	ae 1c 0d	ldx $0d1c			ldx 	varType 					; get the length per element
.37f7	bd ff 37	lda $37ff,x			lda 	_CAActualSize-$3A-1,x
.37fa	91 2a		sta ($2a),y			sta 	(temp0),y
.37fc	aa		tax				tax 								; save size in X
.37fd	a5 35		lda $35				lda 	lowMemory 					; set temp0 to low memory.
.37ff	85 2a		sta $2a				sta 	temp0
.3801	a5 36		lda $36				lda 	lowMemory+1
.3803	85 2b		sta $2b				sta 	temp0+1
.3805	a9 00		lda #$00			lda 	#0 							; temp1 is the counter.
.3807	85 2c		sta $2c				sta 	temp1
.3809	85 2d		sta $2d				sta 	temp1+1
.380b					_CAInitialiseArray:
.380b	a0 00		ldy #$00			ldy 	#0 							; write a null record at temp0
.380d	ad 1c 0d	lda $0d1c			lda 	varType 					; base type of array in A.
.3810	29 fe		and #$fe			and 	#$FE
.3812	20 27 37	jsr $3727			jsr 	ZeroTemp0Y
.3815	8a		txa				txa 								; add X to temp0, also updating lowMemory
.3816	18		clc				clc
.3817	65 2a		adc $2a				adc 	temp0
.3819	85 2a		sta $2a				sta 	temp0
.381b	85 35		sta $35				sta 	lowMemory
.381d	a5 2b		lda $2b				lda 	temp0+1
.381f	69 00		adc #$00			adc 	#0
.3821	85 2b		sta $2b				sta 	temp0+1
.3823	85 36		sta $36				sta 	lowMemory+1
.3825	e6 2c		inc $2c				inc 	temp1 						; bump the counter.
.3827	d0 02		bne $382b			bne 	_CAIANoCarry
.3829	e6 2d		inc $2d				inc 	temp1+1
.382b					_CAIANoCarry:
.382b	a5 48		lda $48				lda 	esInt0 						; counter reached max index
.382d	c5 2c		cmp $2c				cmp 	temp1
.382f	d0 da		bne $380b			bne 	_CAInitialiseArray
.3831	a5 50		lda $50				lda 	esInt1
.3833	c5 2d		cmp $2d				cmp 	temp1+1
.3835	d0 d4		bne $380b			bne 	_CAInitialiseArray
.3837	68		pla				pla
.3838	a8		tay				tay
.3839	60		rts				rts
.383a					_CAActualSize:
>383a	04 00						.byte 	VarISize,0
>383c	02 00						.byte 	VarSSize,0
>383e	06 00						.byte 	VarFSize,0
>3840	db						.byte 	$DB

;******  Return to file: variable/variable.asm


;******  Processing file: variable/find.asm

.3841					FindVariable:
.3841	98		tya				tya
.3842	48		pha				pha
.3843	98		tya				tya 								; point temp2 to the actual name
.3844	18		clc				clc 								; in memory of the variable being created
.3845	65 28		adc $28				adc 	codePtr
.3847	85 2e		sta $2e				sta 	temp2
.3849	a5 29		lda $29				lda 	codePtr+1
.384b	69 00		adc #$00			adc 	#0
.384d	85 2f		sta $2f				sta 	temp2+1
.384f	a0 00		ldy #$00			ldy 	#0
.3851	a5 7c		lda $7c				lda 	hashList 					; copy hashlist to temp0
.3853	85 2a		sta $2a				sta 	temp0
.3855	a5 7d		lda $7d				lda 	hashList+1
.3857	85 2b		sta $2b				sta 	temp0+1
.3859	a0 01		ldy #$01	_FVNext:ldy 	#1 							; get MSB
.385b	b1 2a		lda ($2a),y			lda 	(temp0),y
.385d	f0 2c		beq $388b			beq 	_FVFail
.385f	aa		tax				tax
.3860	88		dey				dey		 							; get LSB
.3861	b1 2a		lda ($2a),y			lda 	(temp0),y
.3863	85 2a		sta $2a				sta 	temp0 						; update pointer.
.3865	86 2b		stx $2b				stx 	temp0+1
.3867	a0 04		ldy #$04			ldy 	#4 							; check hashes match
.3869	b1 2a		lda ($2a),y			lda 	(temp0),y
.386b	cd 1b 0d	cmp $0d1b			cmp 	varHash
.386e	d0 e9		bne $3859			bne 	_FVNext 					; if not, no point in checking the name.
.3870	88		dey				dey 								; copy name pointer (+2,+3) to temp1.
.3871	b1 2a		lda ($2a),y			lda 	(temp0),y
.3873	85 2d		sta $2d				sta 	temp1+1
.3875	88		dey				dey
.3876	b1 2a		lda ($2a),y			lda 	(temp0),y
.3878	85 2c		sta $2c				sta 	temp1
.387a	a0 00		ldy #$00			ldy 	#0
.387c					_FVCheck:
.387c	b1 2c		lda ($2c),y			lda 	(temp1),y 					; compare names
.387e	d1 2e		cmp ($2e),y			cmp 	(temp2),y
.3880	d0 d7		bne $3859			bne 	_FVNext		 				; fail if different.
.3882	c8		iny				iny
.3883	c9 3a		cmp #$3a			cmp 	#$3A 						; until reached the end marker.
.3885	90 f5		bcc $387c			bcc 	_FVCheck
.3887	68		pla				pla
.3888	a8		tay				tay
.3889	38		sec				sec
.388a	60		rts				rts
.388b					_FVFail:
.388b	68		pla				pla
.388c	a8		tay				tay
.388d	18		clc				clc
.388e	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/reset.asm

.388f					HashTableReset:
.388f	a2 60		ldx #$60			ldx 	#6*2*hashTableSize			; 6 types, 2 bytes per table entry.
.3891	a9 00		lda #$00			lda 	#0
.3893					_HTRClear:
.3893	9d 67 0a	sta $0a67,x			sta 	hashTables-1,x
.3896	ca		dex				dex
.3897	d0 fa		bne $3893			bne 	_HTRClear
.3899	60		rts				rts

;******  Return to file: variable/variable.asm

.389a					variableHandler:
.389a	7c 9d 38	jmp ($389d,x)			jmp 	(variableVectors,x)
.389d					variableVectors:
>389d	ae 35					.word AccessVariable       ; index 0
>389f	89 37					.word CreateArray          ; index 2
>38a1	8f 38					.word HashTableReset       ; index 4

;******  Return to file: basic.asm

.38a3					section_end_variable:
.38a3					section_start_footer:

;******  Processing file: footer/footer.asm


;******  Processing file: footer/99end.asm

>38a3							.align 	256
.3900					programMemory:
>38ff	ff						.byte 	$FF

;******  Return to file: footer/footer.asm


;******  Return to file: basic.asm

.3900					section_end_footer:

;******  End of listing
