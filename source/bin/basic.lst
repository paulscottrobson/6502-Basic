
; 64tass Turbo Assembler Macro V1.55.2200 listing file
; 64tass -Wall -q -c -L ../source/bin/basic.lst -l ../source/bin/basic.lbl -Wall -o ../source/bin/basic.prg basic.asm
; Thu Mar  4 16:11:04 2021

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: basic.asm


;******  Processing file: main/01common.inc


;******  Processing file: main/../generated/installed.inc

=1					installed_main = 1
=1					installed_variable = 1
=1					installed_assembler = 1
=1					installed_error = 1
=1					installed_string = 1
=1					installed_device = 1
=0					installed_floatingpoint = 0
=1					installed_interaction = 1
=1					installed_tokeniser = 1

;******  Return to file: main/01common.inc

=$1000					CodeStart = $1000
=$800					MemoryStorage = $800
=$02					ZeroPageStorage = $02
=8					StackSize = 8
=512					retStackSize = 512
=8					hashTableSize = 8			; if this changes, the calculation is AccessSetup has to match it.
="G"					markerGOSUB = 'G'
="R"					markerREPEAT = 'R'
="F"					markerFOR = 'F'
="W"					markerWHILE = 'W'
="P"					markerPROC = 'P'
="$"					markerSTRING = '$'
="#"					markerFLOAT = '#'
="%"					markerINT = '%'
=5					VarHSize = 5 								; header (2 link, 2 name, 1 hash)
=4					VarISize = 4 								; integer (32 bit)
=6					VarFSize = 6 								; float (4 mantissa, 1 exponent 1 sign/zero)
=2					VarSSize = 2 								; address (2 bytes)

;******  Return to file: basic.asm


;******  Processing file: main/02macros.inc


;******  Return to file: basic.asm


;******  Processing file: main/03data.inc

>0002					codePtr:.fill 	2							; (codePtr),y points to code.
>0004					temp0: 	.fill 	2							; working variables.
>0006					temp1: 	.fill 	2
>0008					temp2: 	.fill 	2
>000a					temp3: 	.fill 	2
.000c					tempShort:
>000c							.fill 	1
.000d					highMemory:
>000d							.fill 	2
.000f					lowMemory:
>000f							.fill 	2
>0040					esType:	.fill 	StackSize  					; type byte (see above)
>0048					esInt0:	.fill 	StackSize 					; integer or mantissa
>0050					esInt1:	.fill 	StackSize
>0058					esInt2:	.fill 	StackSize
>0060					esInt3:	.fill 	StackSize
>0068					esExp:	.fill 	StackSize 					; exponent ($80 = 0)
>0070					esZSign:.fill 	StackSize 					; for floating point - sign (bit 7) isZero (bit 6)
=$48					esMant0 = esInt0 							; synonyms.
=$50					esMant1 = esInt1
=$58					esMant2 = esInt2
=$60					esMant3 = esInt3
>0800							.align	256
.0800					returnStack:
>0800							.fill 	retStackSize
>0a00							.align	256
.0a00					SingleLetterVar:
>0a00					 		.fill 	26*4
.0a68					hashTables:
>0a68							.fill 	6*2*hashTableSize
.0ac8					basePage:
>0ac8							.fill 	2
.0aca					endMemory:
>0aca							.fill 	2
.0acc					NullString:
>0acc							.fill 	1							; don't waste memory concreting null strings.
.0acd					convertBuffer:
>0acd							.fill 	35

;******  Processing file: main/../generated/tokenconst.inc

=$80					TOK_EOL=$80
=$81					TOK_SHIFT1=$81
=$82					TOK_SHIFT2=$82
=$83					TOK_SHIFT3=$83
=$84					TOK_FPC=$84
=$85					TOK_STR=$85
=$86					TOK_BINARYST=$86
=$99					TOK_STRUCTST=$99
=$a4					TOK_UNARYST=$a4
=$c4					TOK_TOKENS=$c4
=$86					TKW_AND                      = $86 ; and
=$87					TKW_OR                       = $87 ; or
=$88					TKW_XOR                      = $88 ; xor
=$89					TKW_GREATEREQUAL             = $89 ; >=
=$8a					TKW_LESSEQUAL                = $8a ; <=
=$8b					TKW_GREATER                  = $8b ; >
=$8c					TKW_LESS                     = $8c ; <
=$8d					TKW_EQUAL                    = $8d ; =
=$8e					TKW_LESSGREATER              = $8e ; <>
=$8f					TKW_PLUS                     = $8f ; +
=$90					TKW_MINUS                    = $90 ; -
=$91					TKW_GREATERGREATER           = $91 ; >>
=$92					TKW_LESSLESS                 = $92 ; <<
=$93					TKW_STAR                     = $93 ; *
=$94					TKW_SLASH                    = $94 ; /
=$95					TKW_MOD                      = $95 ; mod
=$96					TKW_HAT                      = $96 ; ^
=$97					TKW_PLING                    = $97 ; !
=$98					TKW_QMARK                    = $98 ; ?
=$99					TKW_REPEAT                   = $99 ; repeat
=$9a					TKW_WHILE                    = $9a ; while
=$9b					TKW_FOR                      = $9b ; for
=$9c					TKW_IF                       = $9c ; if
=$9d					TKW_DEFPROC                  = $9d ; defproc
=$9e					TKW_UNTIL                    = $9e ; until
=$9f					TKW_WEND                     = $9f ; wend
=$a0					TKW_NEXT                     = $a0 ; next
=$a1					TKW_THEN                     = $a1 ; then
=$a2					TKW_ENDIF                    = $a2 ; endif
=$a3					TKW_ENDPROC                  = $a3 ; endproc
=$a4					TKW_LPAREN                   = $a4 ; (
=$a5					TKW_LENLPAREN                = $a5 ; len(
=$a6					TKW_SGNLPAREN                = $a6 ; sgn(
=$a7					TKW_ABSLPAREN                = $a7 ; abs(
=$a8					TKW_RANDOMLPAREN             = $a8 ; random(
=$a9					TKW_PAGE                     = $a9 ; page
=$aa					TKW_TRUE                     = $aa ; true
=$ab					TKW_FALSE                    = $ab ; false
=$ac					TKW_MINLPAREN                = $ac ; min(
=$ad					TKW_MAXLPAREN                = $ad ; max(
=$ae					TKW_SYSLPAREN                = $ae ; sys(
=$af					TKW_TIMERLPAREN              = $af ; timer(
=$b0					TKW_EVENTLPAREN              = $b0 ; event(
=$b1					TKW_GETLPAREN                = $b1 ; get(
=$b2					TKW_INKEYLPAREN              = $b2 ; inkey(
=$b3					TKW_ALLOCLPAREN              = $b3 ; alloc(
=$b4					TKW_CHRDOLLARLPAREN          = $b4 ; chr$(
=$b5					TKW_LEFTDOLLARLPAREN         = $b5 ; left$(
=$b6					TKW_MIDDOLLARLPAREN          = $b6 ; mid$(
=$b7					TKW_RIGHTDOLLARLPAREN        = $b7 ; right$(
=$b8					TKW_STRDOLLARLPAREN          = $b8 ; str$(
=$b9					TKW_VALLPAREN                = $b9 ; val(
=$ba					TKW_PEEKLPAREN               = $ba ; peek(
=$bb					TKW_DEEKLPAREN               = $bb ; deek(
=$bc					TKW_LEEKLPAREN               = $bc ; leek(
=$bd					TKW_ASCLPAREN                = $bd ; asc(
=$be					TKW_INTLPAREN                = $be ; int(
=$bf					TKW_FLOATLPAREN              = $bf ; float(
=$c0					TKW_ISVALLPAREN              = $c0 ; isval(
=$c1					TKW_AT                       = $c1 ; @
=$c2					TKW_WAVY                     = $c2 ; ~
=$c3					TKW_AMP                      = $c3 ; &
=$c4					TKW_RPAREN                   = $c4 ; )
=$c5					TKW_COLON                    = $c5 ; :
=$c6					TKW_COMMA                    = $c6 ; ,
=$c7					TKW_SEMICOLON                = $c7 ; ;
=$c8					TKW_QUOTE                    = $c8 ; '
=$c9					TKW_TO                       = $c9 ; to
=$ca					TKW_STEP                     = $ca ; step
=$cb					TKW_PROC                     = $cb ; proc
=$cc					TKW_LOCAL                    = $cc ; local
=$cd					TKW_DIM                      = $cd ; dim
=$ce					TKW_REM                      = $ce ; rem
=$cf					TKW_LET                      = $cf ; let
=$d0					TKW_INPUT                    = $d0 ; input
=$d1					TKW_ELSE                     = $d1 ; else
=$d2					TKW_VDU                      = $d2 ; vdu
=$d3					TKW_PRINT                    = $d3 ; print
=$d4					TKW_GOTO                     = $d4 ; goto
=$d5					TKW_GOSUB                    = $d5 ; gosub
=$d6					TKW_RETURN                   = $d6 ; return
=$d7					TKW_DATA                     = $d7 ; data
=$d8					TKW_ASSERT                   = $d8 ; assert
=$d9					TKW_POKE                     = $d9 ; poke
=$da					TKW_DOKE                     = $da ; doke
=$db					TKW_LOKE                     = $db ; loke
=$86					TKW_CLEAR                    = $86 ; clear
=$87					TKW_LOAD                     = $87 ; load
=$88					TKW_SAVE                     = $88 ; save
=$89					TKW_LIST                     = $89 ; list
=$8a					TKW_NEW                      = $8a ; new
=$8b					TKW_RUN                      = $8b ; run
=$8c					TKW_READ                     = $8c ; read
=$8d					TKW_RESTORE                  = $8d ; restore
=$8e					TKW_END                      = $8e ; end
=$8f					TKW_STOP                     = $8f ; stop
=$86					TKW_VPOKE                    = $86 ; vpoke
=$86					TKW_VPEEKLPAREN              = $86 ; vpeek(

;******  Return to file: main/03data.inc

=$3a					TYPE_INT =		($3A) 						; type bytes that end identifier.
=$3b					TYPE_INTARRAY =	($3B)
=$3c					TYPE_STR =		($3C)
=$3d					TYPE_STRARRAY =	($3D)
=$3e					TYPE_FLOAT =	($3E)
=$3f					TYPE_FLOATARRAY=($3F)

;******  Return to file: basic.asm


;******  Processing file: main/imath/intmacros.inc


;******  Return to file: basic.asm


;******  Processing file: main/main.inc


;******  Return to file: basic.asm


;******  Processing file: assembler/assembler.inc


;******  Return to file: basic.asm


;******  Processing file: device/device.inc


;******  Return to file: basic.asm


;******  Processing file: error/error.inc


;******  Return to file: basic.asm


;******  Processing file: error/errorhandler.inc


;******  Processing file: error/../generated/errorid.inc

=1					ErrorID_Missing = 1 ; Feature not Present
=2					ErrorID_Syntax = 2 ; Syntax Error
=3					ErrorID_NoModule = 3 ; Module disabled
=4					ErrorID_Assert = 4 ; Assertion failed
=5					ErrorID_DivZero = 5 ; Divide By Zero
=6					ErrorID_Stop = 6 ; Stop
=7					ErrorID_BadType = 7 ; Type Mismatch
=8					ErrorID_BadValue = 8 ; Illegal Value
=9					ErrorID_MissingRP = 9 ; Missing right bracket
=10					ErrorID_MissingComma = 10 ; Missing comma
=11					ErrorID_NoReference = 11 ; Missing reference
=12					ErrorID_LineNumber = 12 ; Line Number not found
=13					ErrorID_StrLen = 13 ; String too long.
=14					ErrorID_ReturnErr = 14 ; RETURN without GOSUB
=15					ErrorID_UntilErr = 15 ; UNTIL without REPEAT
=16					ErrorID_NextErr = 16 ; NEXT without FOR
=17					ErrorID_WendErr = 17 ; WEND without WHILE
=18					ErrorID_endprocErr = 18 ; ENDPROC without PROC
=19					ErrorID_BadIndex = 19 ; Bad NEXT index
=20					ErrorID_Struct = 20 ; Structures nested wrong
=21					ErrorID_NoAuto = 21 ; Cannot create variable
=22					ErrorID_RetStack = 22 ; Return stack out of space.
=23					ErrorID_NoProc = 23 ; Unknown Procedure
=24					ErrorID_Params = 24 ; Parameters do not match.

;******  Return to file: error/errorhandler.inc


;******  Return to file: basic.asm


;******  Processing file: floatingpoint/floatingpoint.inc


;******  Return to file: basic.asm


;******  Processing file: interaction/interaction.inc


;******  Return to file: basic.asm


;******  Processing file: string/memory.inc

=252					MaxStringSize = 252

;******  Return to file: basic.asm


;******  Processing file: string/string.inc


;******  Return to file: basic.asm


;******  Processing file: tokeniser/tokeniser.inc


;******  Return to file: basic.asm


;******  Processing file: variable/variable.inc


;******  Return to file: basic.asm

.1000					section_start_main:

;******  Processing file: main/main.asm


;******  Processing file: main/00start.asm

.1000	a2 ff		ldx #$ff	Start:	ldx 	#$FF
.1002	9a		txs				txs
.1003	a9 00		lda #$00			lda 	#(testBaseAddress) & $FF
.1005	8d c8 0a	sta $0ac8			sta 	basePage
.1008	a9 50		lda #$50			lda 	#(testBaseAddress) >> 8
.100a	8d c9 0a	sta $0ac9			sta 	1+(basePage)
.100d	a9 00		lda #$00			lda 	#($9800) & $FF
.100f	8d ca 0a	sta $0aca			sta 	endMemory
.1012	a9 98		lda #$98			lda 	#($9800) >> 8
.1014	8d cb 0a	sta $0acb			sta 	1+(endMemory)
.1017	4c 23 13	jmp $1323			jmp 	Command_Run
.24c5					ReturnPos:
.5000					testBaseAddress:

;******  Processing file: main/../generated/testcode.inc

>5000	0b 0a 00 01 31 3a 8d 90			.byte 11,10,0,1,49,58,141,144,65,99,128,9,11,0,24,58,141,144,65,128,16,12,0,3,49,60,141,133,6,83,65,86,69,77,69,128,23,13,0,211,133,5,83,84,65,82,84,198,1,49,58,198,3,49,60,198,24,58,128,19,14,0,203,4,5,13,15,59,106,198,195,82,77,69,89,120,196,128,21,15,0,211,133,3,69,78,68,198,1,49,58,198,3,49,60,198,24,58,128,8,16,0,153,197,158,171,128,4,17,0,128,17,18,0,157,4,5,13,15,59,1,49,58,198,24,58,196,128,38,19,0,211,133,12,82,85,78,78,73,78,71,32,68,69,77,79,198,1,49,58,198,3,49,60,198,133,1,36,199,184,24,58,198,80,196,128,8,20,0,153,197,158,171,128,5,21,0,163,128,4,22,0,128,10,23,0,157,24,15,50,59,196,128,10,24,0,211,133,3,88,79,50,128,5,25,0,163,128,0
>5008	41 63 80 09 0b 00 18 3a 8d 90 41 80 10 0c 00 03
>5018	31 3c 8d 85 06 53 41 56 45 4d 45 80 17 0d 00 d3
>5028	85 05 53 54 41 52 54 c6 01 31 3a c6 03 31 3c c6
>5038	18 3a 80 13 0e 00 cb 04 05 0d 0f 3b 6a c6 c3 52
>5048	4d 45 59 78 c4 80 15 0f 00 d3 85 03 45 4e 44 c6
>5058	01 31 3a c6 03 31 3c c6 18 3a 80 08 10 00 99 c5
>5068	9e ab 80 04 11 00 80 11 12 00 9d 04 05 0d 0f 3b
>5078	01 31 3a c6 18 3a c4 80 26 13 00 d3 85 0c 52 55
>5088	4e 4e 49 4e 47 20 44 45 4d 4f c6 01 31 3a c6 03
>5098	31 3c c6 85 01 24 c7 b8 18 3a c6 50 c4 80 08 14
>50a8	00 99 c5 9e ab 80 05 15 00 a3 80 04 16 00 80 0a
>50b8	17 00 9d 18 0f 32 3b c4 80 0a 18 00 d3 85 03 58
>50c8	4f 32 80 05 19 00 a3 80 00

;******  Return to file: main/00start.asm


;******  Return to file: main/main.asm


;******  Processing file: main/commands/assert.asm

.101a					Command_Assert:
.101a	20 cb 19	jsr $19cb			jsr 	EvaluateRootInteger 		; what is being asserted.
.101d	20 eb 1f	jsr $1feb			jsr 	MInt32Zero 					; is it true ?
.1020	f0 01		beq $1023			beq 	_CAError
.1022	60		rts				rts
.1023					_CAError:
.1023	a2 04		ldx #$04			ldx 	#ErrorID_Assert
.1025	20 f2 20	jsr $20f2			jsr 	ErrorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/commands/clear.asm

.1028					CommandClear:
.1028	98		tya				tya
.1029	48		pha				pha
.102a	ad ca 0a	lda $0aca			lda 	endMemory					; set high memory = end of memory
.102d	85 0d		sta $0d				sta 	highMemory
.102f	ad cb 0a	lda $0acb			lda 	endMemory+1
.1032	85 0e		sta $0e				sta 	highMemory+1
.1034	ad c8 0a	lda $0ac8			lda 	basePage 					; work out where the program ends.
.1037	85 04		sta $04				sta 	temp0
.1039	ad c9 0a	lda $0ac9			lda 	basePage+1
.103c	85 05		sta $05				sta 	temp0+1
.103e					_CCFindEnd:
.103e	a0 00		ldy #$00			ldy 	#0
.1040	b1 04		lda ($04),y			lda 	(temp0),y
.1042	f0 0c		beq $1050			beq 	_CCFoundEnd 				; offset zero is end.
.1044	18		clc				clc
.1045	65 04		adc $04				adc 	temp0 						; move to next line
.1047	85 04		sta $04				sta 	temp0
.1049	90 f3		bcc $103e			bcc 	_CCFindEnd
.104b	e6 05		inc $05				inc 	temp0+1
.104d	4c 3e 10	jmp $103e			jmp 	_CCFindEnd
.1050					_CCFoundEnd:
.1050	a5 04		lda $04				lda 	temp0 						; put temp0 in lowMemory
.1052	85 0f		sta $0f				sta 	lowMemory
.1054	a5 05		lda $05				lda 	temp0+1
.1056	85 10		sta $10				sta 	lowMemory+1
.1058	a9 04		lda #$04			lda 	#4 							; skip low free memory clear, leave a gap.
.105a	20 6b 10	jsr $106b			jsr 	AdvanceLowMemoryByte		; need at least one here, to skip the end of program zero offset.
.105d	20 51 20	jsr $2051			jsr 	RSReset 					; reset the return stack.
.1060	a2 02		ldx #$02		ldx	#2
.1062	20 be 24	jsr $24be		jsr	variableHandler
.1065	20 d6 14	jsr $14d6			jsr 	ScanProc 					; scan for procedures
.1068	68		pla				pla
.1069	a8		tay				tay
.106a	60		rts				rts
.106b					AdvanceLowMemoryByte:
.106b	18		clc				clc
.106c	65 0f		adc $0f				adc 	lowMemory
.106e	85 0f		sta $0f				sta 	lowMemory
.1070	90 02		bcc $1074			bcc 	_ALMBExit
.1072	e6 10		inc $10				inc 	lowMemory+1
.1074					_ALMBExit:
.1074	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/for.asm

.24c5					Command_FOR:
.24c5	a9 46		lda #$46			lda 	#markerFOR 					; allocate the space.
.24c7	a2 0b		ldx #$0b			ldx 	#11
.24c9	20 5f 20	jsr $205f			jsr 	RSClaim
.24cc	20 b1 10	jsr $10b1			jsr 	CommandLET 					; do the same as LET.
.24cf	a5 40		lda $40				lda 	esType 						; check type should be integer reference.
.24d1	c9 80		cmp #$80			cmp 	#$80
.24d3	d0 4c		bne $2521			bne 	_CFType
.24d5	a9 c9		lda #$c9			lda 	#TKW_TO 					; check TO present.
.24d7	20 2c 20	jsr $202c			jsr 	CheckToken
.24da	a2 01		ldx #$01			ldx 	#1 							; keep the variable address in stack 0
.24dc	20 cd 19	jsr $19cd			jsr 	EvaluateInteger				; get terminal value in stack 1
.24df	98		tya				tya
.24e0	48		pha				pha
.24e1	a0 04		ldy #$04			ldy 	#4
.24e3	a5 48		lda $48				lda		esInt0 						; the address of the index into 4 and 5
.24e5	91 78		sta ($78),y			sta 	(rsPointer),y
.24e7	c8		iny				iny
.24e8	a5 50		lda $50				lda		esInt1
.24ea	91 78		sta ($78),y			sta 	(rsPointer),y
.24ec	c8		iny				iny
.24ed	a9 01		lda #$01			lda 	#1  						; the default step in 6
.24ef	91 78		sta ($78),y			sta 	(rsPointer),y
.24f1	c8		iny				iny
.24f2	a5 49		lda $49				lda		esInt0+1 					; terminal value in 7 to 11.
.24f4	91 78		sta ($78),y			sta 	(rsPointer),y
.24f6	c8		iny				iny
.24f7	a5 51		lda $51				lda		esInt1+1
.24f9	91 78		sta ($78),y			sta 	(rsPointer),y
.24fb	c8		iny				iny
.24fc	a5 59		lda $59				lda		esInt2+1
.24fe	91 78		sta ($78),y			sta 	(rsPointer),y
.2500	c8		iny				iny
.2501	a5 61		lda $61				lda		esInt3+1
.2503	91 78		sta ($78),y			sta 	(rsPointer),y
.2505	68		pla				pla
.2506	a8		tay				tay
.2507	b1 02		lda ($02),y			lda 	(codePtr),y 				; followed by STEP.
.2509	c9 ca		cmp #$ca			cmp 	#TKW_STEP
.250b	d0 0e		bne $251b			bne 	_CFDone
.250d	c8		iny				iny									; skip over step.
.250e	20 cd 19	jsr $19cd			jsr 	EvaluateInteger 			; get step
.2511	98		tya				tya
.2512	48		pha				pha
.2513	b5 48		lda $48,x			lda 	esInt0,x 					; copy it into step (bit lazy here)
.2515	a0 06		ldy #$06			ldy 	#6
.2517	91 78		sta ($78),y			sta 	(rsPointer),y
.2519	68		pla				pla
.251a	a8		tay				tay
.251b					_CFDone:
.251b	a9 01		lda #$01			lda 	#1
.251d	20 8b 20	jsr $208b			jsr 	RSSavePosition 				; save position.
.2520	60		rts				rts
.2521					_CFType:
.2521	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.2523	20 f2 20	jsr $20f2			jsr 	ErrorHandler
.2526					Command_NEXT:
.2526	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.2528	a1 78		lda ($78,x)			lda 	(rsPointer,x)
.252a	c9 46		cmp #$46			cmp 	#markerFOR 						; does it match
.252c	f0 05		beq $2533			beq 	_isok
.252e	a2 10		ldx #$10			ldx 	#ErrorID_nextErr
.2530	20 f2 20	jsr $20f2			jsr 	ErrorHandler
.2533					_isok:
.2533	b1 02		lda ($02),y			lda 	(codePtr),y 				; is it NEXT <index>
.2535	c9 40		cmp #$40			cmp 	#$40 						; e.g. a variable follows 00-3F
.2537	b0 18		bcs $2551			bcs 	_CNNoIndex
.2539	a2 00		ldx #$00			ldx 	#0 							; start on stack
.253b	20 fa 19	jsr $19fa			jsr 	EvaluateReference 			; this is the variable/parameter to localise.
.253e	98		tya				tya
.253f	48		pha				pha
.2540	a0 04		ldy #$04			ldy 	#4 							; check same variable
.2542	b1 78		lda ($78),y			lda 	(rsPointer),y
.2544	d5 48		cmp $48,x			cmp 	esInt0,x
.2546	d0 76		bne $25be			bne 	_CNBadIndex
.2548	c8		iny				iny
.2549	b1 78		lda ($78),y			lda 	(rsPointer),y
.254b	d5 50		cmp $50,x			cmp 	esInt1,x
.254d	d0 6f		bne $25be			bne 	_CNBadIndex
.254f	68		pla				pla
.2550	a8		tay				tay
.2551					_CNNoIndex:
.2551	98		tya				tya
.2552	48		pha				pha
.2553	a0 04		ldy #$04			ldy 	#4 							; make temp0 point to the index
.2555	b1 78		lda ($78),y			lda 	(rsPointer),y
.2557	85 04		sta $04				sta 	temp0
.2559	c8		iny				iny
.255a	b1 78		lda ($78),y			lda 	(rsPointer),y
.255c	85 05		sta $05				sta 	temp0+1
.255e	c8		iny				iny
.255f	a2 00		ldx #$00			ldx 	#0 							; X is the sign extend part of the step.
.2561	b1 78		lda ($78),y			lda 	(rsPointer),y 				; get the step.
.2563	85 09		sta $09				sta 	temp2+1 					; save for later.
.2565	10 01		bpl $2568			bpl 	_CNSignX
.2567	ca		dex				dex  								; X = $FF
.2568					_CNSignX:
.2568	18		clc				clc 								; add to the LSB
.2569	a0 00		ldy #$00			ldy 	#0
.256b	71 04		adc ($04),y			adc 	(temp0),y
.256d	91 04		sta ($04),y			sta 	(temp0),y
.256f					_CNPropogate:
.256f	c8		iny				iny  								; add the sign extended in X to the rest.
.2570	8a		txa				txa
.2571	71 04		adc ($04),y			adc 	(temp0),y
.2573	91 04		sta ($04),y			sta 	(temp0),y
.2575	c8		iny				iny
.2576	8a		txa				txa
.2577	71 04		adc ($04),y			adc 	(temp0),y
.2579	91 04		sta ($04),y			sta 	(temp0),y
.257b	c8		iny				iny
.257c	8a		txa				txa
.257d	71 04		adc ($04),y			adc 	(temp0),y
.257f	91 04		sta ($04),y			sta 	(temp0),y
.2581	18		clc				clc 								; point temp1 to the terminal value stored in the stack.
.2582	a5 78		lda $78				lda 	rsPointer
.2584	69 07		adc #$07			adc 	#7
.2586	85 06		sta $06				sta 	temp1
.2588	a9 00		lda #$00			lda 	#0
.258a	85 08		sta $08				sta 	temp2 						; clear temp2, which is the OR of all the subtractions.
.258c	a8		tay				tay 								; and clear the Y register again.
.258d	65 79		adc $79				adc 	rsPointer+1
.258f	85 07		sta $07				sta 	temp1+1
.2591	38		sec				sec 								; calculate current - limit oring interim values.
.2592	20 ca 25	jsr $25ca			jsr 	_CNCompare
.2595	20 ca 25	jsr $25ca			jsr 	_CNCompare
.2598	20 ca 25	jsr $25ca			jsr 	_CNCompare
.259b	20 ca 25	jsr $25ca			jsr 	_CNCompare
.259e	50 02		bvc $25a2			bvc 	_CNNoOverflow 				; converts to a signed comparison on the sign bit.
.25a0	49 80		eor #$80			eor 	#$80
.25a2					_CNNoOverflow:
.25a2	a4 09		ldy $09				ldy 	temp2+1						; get step back
.25a4	30 1d		bmi $25c3			bmi 	_CNCheckDownto
.25a6	c9 00		cmp #$00			cmp 	#0
.25a8	30 0c		bmi $25b6			bmi 	_CNLoopRound 				; loop round if < =
.25aa	a5 08		lda $08				lda 	temp2
.25ac	f0 08		beq $25b6			beq 	_CNLoopRound
.25ae					_CNLoopExit:
.25ae	68		pla				pla
.25af	a8		tay				tay
.25b0	a9 0b		lda #$0b			lda 	#11
.25b2	20 81 20	jsr $2081			jsr 	RSFree
.25b5	60		rts				rts
.25b6					_CNLoopRound:
.25b6	68		pla				pla
.25b7	a8		tay				tay
.25b8	a9 01		lda #$01			lda 	#1
.25ba	20 9e 20	jsr $209e			jsr 	RSLoadPosition				; go back to the loop top
.25bd	60		rts				rts
.25be					_CNBadIndex:
.25be	a2 13		ldx #$13			ldx 	#ErrorID_BadIndex
.25c0	20 f2 20	jsr $20f2			jsr 	ErrorHandler
.25c3					_CNCheckDownto:
.25c3	c9 00		cmp #$00			cmp 	#0
.25c5	10 ef		bpl $25b6			bpl 	_CNLoopRound
.25c7	4c ae 25	jmp $25ae			jmp 	_CNLoopExit
.25ca					_CNCompare:
.25ca	b1 04		lda ($04),y			lda 	(temp0),y 					; do the subtraction - compare don't care about answer
.25cc	f1 06		sbc ($06),y			sbc 	(temp1),y
.25ce	05 08		ora $08				ora 	temp2 						; Or into temp2 (does not affect carry)
.25d0	85 08		sta $08				sta 	temp2
.25d2	c8		iny				iny
.25d3	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/if.asm

.1075					CommandIf:
.1075	20 cb 19	jsr $19cb			jsr 	EvaluateRootInteger 		; if what ?
.1078	b1 02		lda ($02),y			lda 	(codePtr),y 				; check for IF .. THEN or IF .. GOTO which are single lines.
.107a	c9 d4		cmp #$d4			cmp 	#TKW_GOTO
.107c	f0 04		beq $1082			beq 	_IfSimple
.107e	c9 a1		cmp #$a1			cmp 	#TKW_THEN
.1080	d0 1b		bne $109d			bne 	_IfComplex
.1082					_IfSimple:
.1082	20 eb 1f	jsr $1feb			jsr 	MInt32Zero					; check if TOS zero
.1085	f0 10		beq $1097			beq 	_IfEOL 						; go to next line.
.1087	b1 02		lda ($02),y			lda 	(codePtr),y 				; get and skip token.
.1089	c8		iny				iny
.108a	c9 d4		cmp #$d4			cmp 	#TKW_GOTO 					; was it if GOTO ?
.108c	f0 0c		beq $109a			beq 	_IfGoto 					; do the Goto code
.108e	b1 02		lda ($02),y			lda 	(codePtr),y 				; what follows the THEN ?
.1090	29 c0		and #$c0			and 	#$C0 						; check $40-$7F
.1092	c9 40		cmp #$40			cmp 	#$40 						; e.g. number IF x = 0 THEN 170
.1094	f0 04		beq $109a			beq 	_IfGoto
.1096	60		rts				rts 								; else continue on this line.
.1097					_IfEOL:
.1097	4c 4a 15	jmp $154a			jmp 	AdvanceNextLine 			; go to next line
.109a					_IfGoto:
.109a	4c 89 15	jmp $1589			jmp 	CommandGoto
.109d					_IfComplex:
.109d	20 eb 1f	jsr $1feb			jsr 	MInt32Zero 					; is it true ?
.10a0	f0 01		beq $10a3			beq 	_IFSkip 					; if non-zero then skip to ELSE/ENDIF
.10a2	60		rts				rts 								; else continue.
.10a3					_IFSkip:
.10a3	a9 d1		lda #$d1			lda	 	#TKW_ELSE 					; test failed, go to ELSE or ENDIF whichever comes first.
.10a5	a2 a2		ldx #$a2			ldx 	#TKW_ENDIF
.10a7	4c 3d 26	jmp $263d			jmp		ScanForward
.10aa					Command_ELSE:
.10aa	a2 a2		ldx #$a2			ldx 	#TKW_ENDIF
.10ac	8a		txa				txa
.10ad	4c 3d 26	jmp $263d			jmp		ScanForward
.10b0					Command_ENDIF:
.10b0	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/let.asm

.10b1					CommandLet:
.10b1	a2 00		ldx #$00			ldx 	#0  						; get address to write.
.10b3	20 fa 19	jsr $19fa			jsr 	EvaluateReference
.10b6	a9 8d		lda #$8d			lda 	#TKW_EQUAL 					; check for equals
.10b8	20 2c 20	jsr $202c			jsr 	CheckToken
.10bb	e8		inx				inx 								; do RHS
.10bc	20 ae 19	jsr $19ae			jsr 	Evaluate 					; evaluate and derefernce
.10bf	ca		dex				dex
.10c0	20 c4 10	jsr $10c4			jsr 	WriteValue 					; write it out
.10c3	60		rts				rts
.10c4					WriteValue:
.10c4	98		tya				tya
.10c5	48		pha				pha
.10c6	20 26 11	jsr $1126			jsr 	TOSToTemp0 					; set temp0 to point to target address.
.10c9	b5 40		lda $40,x			lda 	esType,x 					; check the string/integer flags match
.10cb	55 41		eor $41,x			eor 	esType+1,x
.10cd	29 40		and #$40			and 	#$40
.10cf	d0 50		bne $1121			bne		_WVType
.10d1	a0 01		ldy #$01			ldy 	#1 							; for string, copy 0 and 1.
.10d3	b5 40		lda $40,x			lda 	esType,x 					; check for string assignment
.10d5	29 40		and #$40			and 	#$40
.10d7	d0 1f		bne $10f8			bne 	_WVCopyString
.10d9	b5 40		lda $40,x			lda 	esType,x 					; check both are integer.
.10db	15 41		ora $41,x			ora 	esType+1,x
.10dd	4a		lsr a				lsr 	a
.10de	90 22		bcc $1102			bcc 	_WVCopyData4
.10e0	b5 40		lda $40,x			lda 	esType,x
.10e2	4a		lsr a				lsr 	a
.10e3	90 3c		bcc $1121			bcc 	_WVType
.10e5	e8		inx				inx 								; force the value being written to be a float.
.10e6	20 fb 15	jsr $15fb			jsr 	BPMakeFloat
.10e9	ca		dex				dex
.10ea	20 26 11	jsr $1126			jsr 	TOSToTemp0 					; set Temp0 to write address
.10ed	e8		inx				inx
.10ee	8a		txa				txa
.10ef	a2 1e		ldx #$1e		ldx	#30
.10f1	20 f9 20	jsr $20f9		jsr	floatingpointHandler
.10f4	aa		tax				tax
.10f5	4c 1e 11	jmp $111e			jmp 	_WVCopyExit
.10f8					_WVCopyString:
.10f8	8a		txa				txa
.10f9	a2 0a		ldx #$0a		ldx	#10
.10fb	20 50 23	jsr $2350		jsr	stringHandler
.10fe	aa		tax				tax
.10ff	4c 1e 11	jmp $111e			jmp 	_WVCopyExit
.1102					_WVCopyData4:
.1102	b5 40		lda $40,x			lda 	esType,x 					; is the int ref a byte ref ?
.1104	29 20		and #$20			and 	#$20
.1106	d0 10		bne $1118			bne 	_WVCopyData1
.1108	a0 03		ldy #$03			ldy 	#3
.110a	b5 61		lda $61,x			lda 	esInt3+1,x
.110c	91 04		sta ($04),y			sta 	(temp0),y
.110e	88		dey				dey
.110f	b5 59		lda $59,x			lda 	esInt2+1,x
.1111	91 04		sta ($04),y			sta 	(temp0),y
.1113	88		dey				dey
.1114	b5 51		lda $51,x			lda 	esInt1+1,x
.1116	91 04		sta ($04),y			sta 	(temp0),y
.1118					_WVCopyData1:
.1118	a0 00		ldy #$00			ldy 	#0
.111a	b5 49		lda $49,x			lda 	esInt0+1,x
.111c	91 04		sta ($04),y			sta 	(temp0),y
.111e					_WVCopyExit:
.111e	68		pla				pla
.111f	a8		tay				tay
.1120	60		rts				rts
.1121					_WVType:
.1121	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.1123	20 f2 20	jsr $20f2			jsr 	ErrorHandler
.1126					TOSToTemp0:
.1126	b5 48		lda $48,x			lda 	esInt0,x
.1128	85 04		sta $04				sta 	temp0
.112a	b5 50		lda $50,x			lda 	esInt1,x
.112c	85 05		sta $05				sta 	temp0+1
.112e	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/local.asm

.0af0					storeSize:
>0af0							.fill 	1
.112f					LocaliseVariable:
.112f	b1 02		lda ($02),y			lda 	(codePtr),y 				; check it's a variable.
.1131	c9 40		cmp #$40			cmp 	#$40
.1133	b0 6c		bcs $11a1			bcs 	_LVSyntax
.1135	8a		txa				txa 								; get the address of that variable.
.1136	a2 00		ldx #$00		ldx	#0
.1138	20 be 24	jsr $24be		jsr	variableHandler
.113b	aa		tax				tax
.113c	8a		txa				txa
.113d	48		pha				pha
.113e	98		tya				tya
.113f	48		pha				pha
.1140	20 26 11	jsr $1126			jsr 	TOSToTemp0 					; the address of the variable is now in temp0.
.1143	b5 40		lda $40,x			lda 	esType,x 					; get the type
.1145	0a		asl a				asl 	a
.1146	10 07		bpl $114f			bpl 	_LVPushNumber
.1148	a2 02		ldx #$02			ldx 	#2 							; save that address
.114a	a9 24		lda #$24			lda 	#markerString
.114c	4c 64 11	jmp $1164			jmp 	_LVWriteFrame
.114f					_LVPushNumber:
.114f	a5 04		lda $04				lda 	temp0 						; storage address and data source are the same
.1151	85 06		sta $06				sta 	temp1
.1153	a5 05		lda $05				lda 	temp0+1
.1155	85 07		sta $07				sta 	temp1+1
.1157	b5 40		lda $40,x			lda 	esType,x 					; put float flag into carry.
.1159	4a		lsr a				lsr 	a
.115a	a9 25		lda #$25			lda 	#markerInt 					; get marker and size.
.115c	a2 04		ldx #$04			ldx 	#VarISize
.115e	90 04		bcc $1164			bcc 	_LVIsInteger
.1160	a9 23		lda #$23			lda 	#markerFloat
.1162	a2 06		ldx #$06			ldx 	#VarFSize
.1164					_LVIsInteger:
.1164					_LVWriteFrame:
.1164	8e f0 0a	stx $0af0			stx 	storeSize 					; number of bytes to copy from (temp0)
.1167	e8		inx				inx 								; allocate 3 bytes, 2 for the address, 1 for the marker.
.1168	e8		inx				inx
.1169	e8		inx				inx
.116a	20 5f 20	jsr $205f			jsr 	RSClaim 					; create the stack frame.
.116d	a5 04		lda $04				lda 	temp0 						; copy the target address to slots 1 & 2
.116f	a0 01		ldy #$01			ldy 	#1
.1171	91 78		sta ($78),y			sta 	(rsPointer),y
.1173	c8		iny				iny
.1174	a5 05		lda $05				lda 	temp0+1
.1176	91 78		sta ($78),y			sta 	(rsPointer),y
.1178	a0 00		ldy #$00			ldy 	#0
.117a					_LVCopyData:
.117a	b1 06		lda ($06),y			lda 	(temp1),y 					; get data from source, temp1
.117c	c8		iny				iny 								; write allowing for the header bit.
.117d	c8		iny				iny
.117e	c8		iny				iny
.117f	91 78		sta ($78),y			sta 	(rsPointer),y
.1181	88		dey				dey
.1182	88		dey				dey
.1183	ce f0 0a	dec $0af0			dec 	storeSize 					; do it storesize times
.1186	d0 f2		bne $117a			bne 	_LVCopyData
.1188	a0 00		ldy #$00			ldy 	#0 							; was it a string ?
.118a	b1 78		lda ($78),y			lda 	(rsPointer),y
.118c	c9 24		cmp #$24			cmp 	#markerString
.118e	d0 0c		bne $119c			bne 	_LVExit
.1190	8c cc 0a	sty $0acc			sty 	nullString 					; erase that string just in case
.1193	a9 cc		lda #$cc			lda 	#nullString & $FF
.1195	91 04		sta ($04),y			sta 	(temp0),y
.1197	a9 0a		lda #$0a			lda 	#nullString >> 8
.1199	c8		iny				iny
.119a	91 04		sta ($04),y			sta 	(temp0),y
.119c					_LVExit:
.119c	68		pla				pla
.119d	a8		tay				tay
.119e	68		pla				pla
.119f	aa		tax				tax
.11a0	60		rts				rts
.11a1					_LVSyntax:
.11a1	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.11a3	20 f2 20	jsr $20f2			jsr 	ErrorHandler
.11a6					RestoreLocals:
.11a6	b1 78		lda ($78),y			lda 	(rsPointer),y
.11a8	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/new.asm

.11a9					Command_New:
.11a9	20 85 13	jsr $1385			jsr 	ResetCodeAddress 			; point to first line
.11ac	a0 00		ldy #$00			ldy 	#0 							; and zap it.
.11ae	98		tya				tya
.11af	91 02		sta ($02),y			sta 	(codePtr),y
.11b1	20 28 10	jsr $1028			jsr 	CommandClear 				; clear everything down.
.11b4	4c 47 15	jmp $1547			jmp 	CommandEND 					; do END code, as there's nothing to run.

;******  Return to file: main/main.asm


;******  Processing file: main/commands/poke.asm

.11b7					Command_Poke:
.11b7	a9 01		lda #$01			lda 	#1
.11b9	d0 06		bne $11c1			bne 	PokeGeneral
.11bb					Command_Doke:
.11bb	a9 02		lda #$02			lda 	#2
.11bd	d0 02		bne $11c1			bne 	PokeGeneral
.11bf					Command_Loke:
.11bf	a9 03		lda #$03			lda 	#3
.11c1					PokeGeneral:
.11c1	48		pha				pha 								; save size
.11c2	20 cb 19	jsr $19cb			jsr 	EvaluateRootInteger 		; target address
.11c5	20 44 20	jsr $2044			jsr	 	CheckComma
.11c8	e8		inx				inx
.11c9	20 cd 19	jsr $19cd			jsr 	EvaluateInteger 			; what value to POKE ?
.11cc	ca		dex				dex
.11cd	20 26 11	jsr $1126			jsr 	TOSToTemp0 					; temp0 points to the target address
.11d0	84 0c		sty $0c				sty 	tempShort 					; save Y
.11d2	68		pla				pla 								; get copy type and dispatch
.11d3	aa		tax				tax
.11d4	ca		dex				dex
.11d5	f0 14		beq $11eb			beq 	_Poke1
.11d7	ca		dex				dex
.11d8	f0 0b		beq $11e5			beq 	_Poke2
.11da	a0 03		ldy #$03			ldy 	#3
.11dc	a5 61		lda $61				lda 	esInt3+1
.11de	91 04		sta ($04),y			sta 	(temp0),y
.11e0	88		dey				dey
.11e1	a5 59		lda $59				lda 	esInt2+1
.11e3	91 04		sta ($04),y			sta 	(temp0),y
.11e5					_Poke2:
.11e5	a0 01		ldy #$01			ldy 	#1
.11e7	a5 51		lda $51				lda 	esInt1+1
.11e9	91 04		sta ($04),y			sta 	(temp0),y
.11eb					_Poke1:
.11eb	a0 00		ldy #$00			ldy 	#0
.11ed	a5 49		lda $49				lda 	esInt0+1
.11ef	91 04		sta ($04),y			sta 	(temp0),y
.11f1	a4 0c		ldy $0c				ldy 	tempShort 					; restore Y and exit
.11f3	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/print.asm

.0af1					lastPrintToken:
>0af1							.fill 	1
.11f4					Command_Print:
.11f4	a9 00		lda #$00			lda 	#0 							; clear LPT flag
.11f6	8d f1 0a	sta $0af1			sta 	lastPrintToken
.11f9	88		dey				dey
.11fa					_PrintLoopSkip:
.11fa	c8		iny				iny
.11fb					_PrintLoop:
.11fb	b1 02		lda ($02),y			lda 	(codePtr),y 				; what follows
.11fd	c9 80		cmp #$80			cmp 	#TOK_EOL  					; done if end of line or colon
.11ff	f0 5b		beq $125c			beq 	_PrintExit
.1201	c9 c5		cmp #$c5			cmp 	#TKW_COLON
.1203	f0 57		beq $125c			beq 	_PrintExit
.1205	8d f1 0a	sta $0af1			sta 	lastPrintToken 				; update LPT
.1208	c9 c7		cmp #$c7			cmp 	#TKW_SEMICOLON 				; ignore semicolon
.120a	f0 ee		beq $11fa			beq 	_PrintLoopSkip
.120c	c9 c8		cmp #$c8			cmp 	#TKW_QUOTE 					; ' is new line
.120e	f0 3c		beq $124c			beq	 	_PrintNewLine
.1210	c9 c6		cmp #$c6			cmp 	#TKW_COMMA 					; , is print tab
.1212	f0 40		beq $1254			beq 	_PrintTab
.1214	20 ac 19	jsr $19ac			jsr 	EvaluateRoot 				; evaluate something at the root
.1217	a9 cd		lda #$cd			lda 	#(convertBuffer) & $FF
.1219	85 04		sta $04				sta 	temp0
.121b	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.121d	85 05		sta $05				sta 	1+(temp0)
.121f	a5 40		lda $40				lda 	esType 						; get type
.1221	f0 15		beq $1238			beq		_PrintInteger
.1223	4a		lsr a				lsr 	a 							; check for floating point
.1224	b0 08		bcs $122e			bcs 	_PrintFloat
.1226					_PrintString:
.1226	a2 00		ldx #$00			ldx 	#0 							; bottom string to temp0
.1228	20 26 11	jsr $1126			jsr 	TOSToTemp0
.122b	4c 46 12	jmp $1246			jmp 	_PrintTemp0 				; print no leading space.
.122e					_PrintFloat:
.122e	a9 00		lda #$00			lda 	#0 							; stack level.
.1230	a2 14		ldx #$14		ldx	#20
.1232	20 f9 20	jsr $20f9		jsr	floatingpointHandler
.1235	4c 3f 12	jmp $123f			jmp 	_PrintSpaceTemp0
.1238					_PrintInteger:
.1238	a9 8a		lda #$8a			lda 	#10+$80 					; base 10 signed
.123a	a2 00		ldx #$00			ldx 	#0 							; bottom stack element
.123c	20 1a 1f	jsr $1f1a			jsr 	MInt32ToString				; convert to text
.123f					_PrintSpaceTemp0:
.123f	a9 20		lda #$20			lda 	#32
.1241	a2 04		ldx #$04		ldx	#4
.1243	20 e5 20	jsr $20e5		jsr	deviceHandler
.1246					_PrintTemp0:
.1246	20 6d 12	jsr $126d			jsr 	PrintString
.1249	4c fb 11	jmp $11fb			jmp 	_PrintLoop
.124c					_PrintNewLine:
.124c	a2 00		ldx #$00		ldx	#0
.124e	20 e5 20	jsr $20e5		jsr	deviceHandler
.1251	4c fa 11	jmp $11fa			jmp 	_PrintLoopSkip
.1254					_PrintTab:
.1254	a2 06		ldx #$06		ldx	#6
.1256	20 e5 20	jsr $20e5		jsr	deviceHandler
.1259	4c fa 11	jmp $11fa			jmp 	_PrintLoopSkip
.125c					_PrintExit:
.125c	ad f1 0a	lda $0af1			lda		lastPrintToken 				; check last token
.125f	c9 c7		cmp #$c7			cmp 	#TKW_SEMICOLON 				; if , or ; do not print NL
.1261	f0 09		beq $126c			beq 	_PrintExit2
.1263	c9 c6		cmp #$c6			cmp 	#TKW_COMMA
.1265	f0 05		beq $126c			beq 	_PrintExit2
.1267	a2 00		ldx #$00		ldx	#0
.1269	20 e5 20	jsr $20e5		jsr	deviceHandler
.126c					_PrintExit2:
.126c	60		rts				rts
.126d					PrintString:
.126d	8a		txa				txa
.126e	48		pha				pha
.126f	98		tya				tya
.1270	48		pha				pha
.1271	a0 00		ldy #$00			ldy 	#0							; get length
.1273	b1 04		lda ($04),y			lda 	(temp0),y
.1275	aa		tax				tax 								; into X
.1276	e0 00		cpx #$00	_PSLoop:cpx 	#0 							; finished ?
.1278	f0 10		beq $128a			beq 	_PSExit
.127a	ca		dex				dex
.127b	8a		txa				txa
.127c	48		pha				pha
.127d	c8		iny				iny
.127e	b1 04		lda ($04),y			lda 	(temp0),y
.1280	a2 04		ldx #$04		ldx	#4
.1282	20 e5 20	jsr $20e5		jsr	deviceHandler
.1285	68		pla				pla
.1286	aa		tax				tax
.1287	4c 76 12	jmp $1276			jmp 	_PSLoop
.128a					_PSExit:
.128a	68		pla				pla
.128b	a8		tay				tay
.128c	68		pla				pla
.128d	aa		tax				tax
.128e	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/proc.asm

.0af2					paramCount:
>0af2							.fill 	1
.128f					CallProc:
.128f	20 6a 14	jsr $146a			jsr 	FindProcedure 				; find procedure, put in temp0. A contains name length.
.1292	48		pha				pha 								; save length on stack
.1293	85 0c		sta $0c				sta 	tempShort 					; save length in tempshort
.1295	a5 05		lda $05				lda 	temp0+1 					; save procedure target on stack.
.1297	48		pha				pha
.1298	a5 04		lda $04				lda 	temp0
.129a	48		pha				pha
.129b	98		tya				tya 								; calculate Y + length
.129c	18		clc				clc
.129d	65 0c		adc $0c				adc 	tempShort
.129f	a8		tay				tay
.12a0	a2 00		ldx #$00			ldx 	#0 							; where the first parameter goes - 1
.12a2					_CallProcEvalParams:
.12a2	e8		inx				inx
.12a3	b1 02		lda ($02),y			lda 	(codePtr),y 				; do we have ) ?
.12a5	c9 c4		cmp #$c4			cmp 	#TKW_RPAREN
.12a7	f0 0b		beq $12b4			beq 	_CPDoneParams
.12a9	20 ae 19	jsr $19ae			jsr 	Evaluate 					; evaluate a parameter
.12ac	b1 02		lda ($02),y			lda 	(codePtr),Y 				; get what's next, preconsume
.12ae	c8		iny				iny
.12af	c9 c6		cmp #$c6			cmp 	#TKW_COMMA 					; if comma, go get another parameter
.12b1	f0 ef		beq $12a2			beq 	_CallProcEvalParams
.12b3	88		dey				dey 								; undo consumption.
.12b4					_CPDoneParams:
.12b4	20 37 20	jsr $2037			jsr 	CheckRightParen 			; check closing parenthesis.
.12b7	8e f2 0a	stx $0af2			stx 	paramCount 					; store parameter count+1
.12ba	a2 04		ldx #$04			ldx 	#4							; make space on stack
.12bc	a9 50		lda #$50			lda 	#markerPROC
.12be	20 5f 20	jsr $205f			jsr 	RSClaim
.12c1	a9 01		lda #$01			lda 	#1 							; store return address.
.12c3	20 8b 20	jsr $208b			jsr 	RSSavePosition
.12c6	68		pla				pla 								; get the new code Ptr
.12c7	85 02		sta $02				sta 	codePtr
.12c9	68		pla				pla
.12ca	85 03		sta $03				sta 	codePtr+1
.12cc	68		pla				pla 								; length of name + 4 is the param start.
.12cd	18		clc				clc
.12ce	69 04		adc #$04			adc 	#4
.12d0	a8		tay				tay
.12d1	a2 ff		ldx #$ff			ldx 	#$FF
.12d3					_CPLoadParameters:
.12d3	e8		inx				inx 								; point to where the address should be loaded.
.12d4	ec f2 0a	cpx $0af2			cpx 	paramCount 					; too many parameters in definition ?
.12d7	f0 1e		beq $12f7			beq 	_CPParamError
.12d9	b1 02		lda ($02),y			lda 	(codePtr),y					; what follows
.12db	c9 c4		cmp #$c4			cmp 	#TKW_RPAREN 				; is it the right bracket
.12dd	f0 0e		beq $12ed			beq 	_CPParamComplete 			; done all the parameters
.12df	20 2f 11	jsr $112f			jsr 	LocaliseVariable 			; make following variable local, ref in tos,x
.12e2	20 c4 10	jsr $10c4			jsr 	WriteValue 					; copy the evaluated parameter into there.
.12e5	b1 02		lda ($02),y			lda 	(codePtr),y 				; followed by a comma ?
.12e7	c8		iny				iny
.12e8	c9 c6		cmp #$c6			cmp 	#TKW_COMMA
.12ea	f0 e7		beq $12d3			beq 	_CPLoadParameters
.12ec	88		dey				dey 								; no, unconsume and check for )
.12ed					_CPParamComplete:
.12ed	20 37 20	jsr $2037			jsr 	CheckRightParen 			; check )
.12f0	e8		inx				inx 								; check right number of parameters
.12f1	ec f2 0a	cpx $0af2			cpx 	paramCount
.12f4	d0 01		bne $12f7			bne 	_CPParamError
.12f6	60		rts				rts
.12f7					_CPParamError:
.12f7	a2 18		ldx #$18			ldx 	#ErrorID_Params
.12f9	20 f2 20	jsr $20f2			jsr 	ErrorHandler
.12fc					ReturnProc:
.12fc	20 a6 11	jsr $11a6			jsr 	RestoreLocals 				; get the locals back.
.12ff	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.1301	a1 78		lda ($78,x)			lda 	(rsPointer,x)
.1303	c9 50		cmp #$50			cmp 	#markerPROC 						; does it match
.1305	f0 05		beq $130c			beq 	_isok
.1307	a2 12		ldx #$12			ldx 	#ErrorID_endProcErr
.1309	20 f2 20	jsr $20f2			jsr 	ErrorHandler
.130c					_isok:
.130c	a9 01		lda #$01			lda 	#1
.130e	20 9e 20	jsr $209e			jsr 	RSLoadPosition 				; reload the position from offset 1.
.1311	a9 04		lda #$04			lda 	#4 							; throw 4 bytes from stack.
.1313	20 81 20	jsr $2081			jsr 	RSFree

;******  Return to file: main/main.asm


;******  Processing file: main/commands/rem.asm

.1316					Command_Rem:
.1316					Command_Rem2:
.1316	b1 02		lda ($02),y			lda 	(codePtr),y 				; what follows
.1318	c9 85		cmp #$85			cmp 	#TOK_STR 					; if it is a string then skip it.
.131a	d0 06		bne $1322			bne 	_CRNotString
.131c	c8		iny				iny
.131d	98		tya				tya
.131e	38		sec				sec
.131f	71 02		adc ($02),y			adc 	(codePtr),y 				; get string size, add to Y, +1 for the length
.1321	a8		tay				tay
.1322					_CRNotString:
.1322	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/repeat.asm

.25d4					Command_Repeat:
.25d4	a2 04		ldx #$04			ldx 	#4 							; allocate 4 bytes on stack for REPEAT
.25d6	a9 52		lda #$52			lda 	#markerREPEAT 				; repeat marker allocate 4 bytes
.25d8	20 5f 20	jsr $205f			jsr 	RSClaim
.25db	a9 01		lda #$01			lda 	#1 							; save position at offset 1.
.25dd	20 8b 20	jsr $208b			jsr 	RSSavePosition
.25e0	60		rts				rts
.25e1					Command_Until:
.25e1	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.25e3	a1 78		lda ($78,x)			lda 	(rsPointer,x)
.25e5	c9 52		cmp #$52			cmp 	#markerREPEAT 						; does it match
.25e7	f0 05		beq $25ee			beq 	_isok
.25e9	a2 0f		ldx #$0f			ldx 	#ErrorID_untilErr
.25eb	20 f2 20	jsr $20f2			jsr 	ErrorHandler
.25ee					_isok:
.25ee	20 cb 19	jsr $19cb			jsr 	EvaluateRootInteger 		; at the bottom.
.25f1	20 eb 1f	jsr $1feb			jsr 	MInt32Zero					; check if TOS zero
.25f4	d0 06		bne $25fc			bne 	_CUExit
.25f6	a9 01		lda #$01			lda 	#1
.25f8	20 9e 20	jsr $209e			jsr 	RSLoadPosition 				; reload the position from offset 1.
.25fb	60		rts				rts
.25fc					_CUExit:
.25fc	a9 04		lda #$04			lda 	#4 							; throw 4 bytes from stack.
.25fe	20 81 20	jsr $2081			jsr 	RSFree
.2601	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/run.asm

.1323					Command_Run:
.1323	a2 ff		ldx #$ff			ldx 	#$FF
.1325	9a		txs				txs
.1326	20 28 10	jsr $1028			jsr 	CommandClear 				; clear everything.
.1329	20 85 13	jsr $1385			jsr 	ResetCodeAddress 			; back to the start.
.132c	a0 03		ldy #$03			ldy 	#3
.132e					CRNextInstruction:
.132e	64 7b		stz $7b				stz 	softMemAlloc+1
.1330	b1 02		lda ($02),y			lda 	(codePtr),y 				; get next token.
.1332	10 1c		bpl $1350			bpl 	_CRNotToken
.1334	c9 c4		cmp #$c4			cmp 	#TOK_TOKENS 				; if in the tokens then do that token.
.1336	b0 0c		bcs $1344			bcs 	_CRExecute
.1338	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST 				; unary is ignored.
.133a	b0 56		bcs $1392			bcs 	Unimplemented
.133c	c9 99		cmp #$99			cmp 	#TOK_STRUCTST 				; execute structures.
.133e	b0 04		bcs $1344			bcs 	_CRExecute
.1340	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; if one of the system tokens $80-$85 do that
.1342	b0 16		bcs $135a			bcs 	_CRCheckIndirect 			; if in that unused range check for ! or ?
.1344					_CRExecute:
.1344	c8		iny				iny 								; consume it.
.1345	0a		asl a				asl 	a 							; double it, losing most significant bit.
.1346	aa		tax				tax
.1347	20 4d 13	jsr $134d			jsr 	_CRRunRoutine 				; we want to do jsr (group0vectors,x)
.134a	4c 2e 13	jmp $132e			jmp 	CRNextInstruction
.134d					_CRRunRoutine:
.134d	7c 9c 13	jmp ($139c,x)			jmp 	(Group0Vectors,x)
.1350					_CRNotToken:
.1350	c9 40		cmp #$40			cmp 	#$40 						; if 0-3F then it is a letter
.1352	b0 3e		bcs $1392			bcs 	Unimplemented
.1354					_CRDefaultLet:
.1354	20 b1 10	jsr $10b1			jsr 	CommandLet 					; do the default, LET
.1357	4c 2e 13	jmp $132e			jmp 	CRNextInstruction
.135a					_CRCheckIndirect:
.135a	c9 97		cmp #$97			cmp 	#TKW_PLING 					; !<term> =
.135c	f0 f6		beq $1354			beq 	_CRDefaultLet
.135e	c9 98		cmp #$98			cmp 	#TKW_QMARK 					; ?<term> =
.1360	f0 f2		beq $1354			beq 	_CRDefaultLet
.1362	d0 2e		bne $1392			bne 	Unimplemented
.1364					CommandShift1:
.1364	b1 02		lda ($02),y			lda 	(codePtr),y 				; get shifted value
.1366	10 2a		bpl $1392			bpl 	Unimplemented 				; we have an error as this should not happen.
.1368	0a		asl a				asl 	a 							; double into X
.1369	aa		tax				tax
.136a	c8		iny				iny 								; advance over it.
.136b	20 71 13	jsr $1371			jsr 	_RunIt 						; we have no jsr (aaaa,X)
.136e	4c 2e 13	jmp $132e			jmp 	CRNextInstruction
.1371					_RunIt:
.1371	7c 48 14	jmp ($1448,x)			jmp 	(Group1Vectors-6*2,x) 					; and do the code.
.1374					CommandShift2:
.1374	b1 02		lda ($02),y			lda 	(codePtr),y 				; get shifted value
.1376	10 1a		bpl $1392			bpl 	Unimplemented 				; we have an error as this should not happen.
.1378	0a		asl a				asl 	a 							; double into X
.1379	aa		tax				tax
.137a	c8		iny				iny 								; advance over it.
.137b	20 81 13	jsr $1381			jsr 	_RunIt 						; we have no jsr (aaaa,X)
.137e	4c 2e 13	jmp $132e			jmp 	CRNextInstruction
.1381					_RunIt:
.1381	7c 5c 14	jmp ($145c,x)			jmp 	(Group2Vectors-6*2,x) 					; and do the code.
.1384					CommandColon:
.1384	60		rts				rts
.1385					ResetCodeAddress:
.1385	ad c8 0a	lda $0ac8			lda 	basePage 					; copy basePage to code Pointer
.1388	85 02		sta $02				sta 	codePtr
.138a	ad c9 0a	lda $0ac9			lda 	basePage+1
.138d	85 03		sta $03				sta 	codePtr+1
.138f	a0 03		ldy #$03			ldy 	#3 							; offset after offset link and line#
.1391	60		rts				rts
.1392					Unimplemented:
.1392	a2 01		ldx #$01			ldx 	#ErrorID_Missing
.1394	20 f2 20	jsr $20f2			jsr 	ErrorHandler
.1397					TKErr01:
.1397					TKErr02:
.1397					TKErr03:
.1397					TKErr04:
.1397					TKErr05:
.1397					TKErr06:
.1397					TKErr07:
.1397					TKErr08:
.1397	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.1399	20 f2 20	jsr $20f2			jsr 	ErrorHandler

;******  Processing file: main/commands/../../generated/tokenvectors0.inc

.139c					Group0Vectors:
>139c	4a 15					.word	AdvanceNextLine          ; $80 [[eol]]
>139e	64 13					.word	CommandShift1            ; $81 [[sh1]]
>13a0	74 13					.word	CommandShift2            ; $82 [[sh2]]
>13a2	92 13					.word	Unimplemented            ; $83 [[sh3]]
>13a4	92 13					.word	Unimplemented            ; $84 [[fpc]]
>13a6	97 13					.word	TKErr08                  ; $85 [[str]]
>13a8	9d 16					.word	AndHandler               ; $86 and
>13aa	8a 16					.word	OrHandler                ; $87 or
>13ac	77 16					.word	XorHandler               ; $88 xor
>13ae	bf 17					.word	CompareGreaterEq         ; $89 >=
>13b0	c9 17					.word	CompareLessEq            ; $8a <=
>13b2	ab 17					.word	CompareGreater           ; $8b >
>13b4	a1 17					.word	CompareLess              ; $8c <
>13b6	97 17					.word	CompareEquals            ; $8d =
>13b8	b5 17					.word	CompareNotEquals         ; $8e <>
>13ba	08 16					.word	AddHandler               ; $8f +
>13bc	2b 16					.word	SubHandler               ; $90 -
>13be	c3 16					.word	ShrHandler               ; $91 >>
>13c0	b0 16					.word	ShlHandler               ; $92 <<
>13c2	3e 16					.word	MulHandler               ; $93 *
>13c4	51 16					.word	DivHandler               ; $94 /
>13c6	64 16					.word	ModHandler               ; $95 mod
>13c8	fc 16					.word	PowerHandler             ; $96 ^
>13ca	d6 16					.word	WordRefHandler           ; $97 !
>13cc	e9 16					.word	ByteRefHandler           ; $98 ?
>13ce	d4 25					.word	Command_Repeat           ; $99 repeat
>13d0	02 26					.word	Command_While            ; $9a while
>13d2	c5 24					.word	Command_FOR              ; $9b for
>13d4	75 10					.word	CommandIf                ; $9c if
>13d6	97 13					.word	TKErr04                  ; $9d defproc
>13d8	e1 25					.word	Command_Until            ; $9e until
>13da	25 26					.word	Command_Wend             ; $9f wend
>13dc	26 25					.word	Command_NEXT             ; $a0 next
>13de	97 13					.word	TKErr06                  ; $a1 then
>13e0	b0 10					.word	Command_ENDIF            ; $a2 endif
>13e2	fc 12					.word	ReturnProc               ; $a3 endproc
>13e4	84 19					.word	UnaryParenthesis         ; $a4 (
>13e6	d6 1a					.word	UnaryLen                 ; $a5 len(
>13e8	1a 1b					.word	UnarySgn                 ; $a6 sgn(
>13ea	03 1b					.word	UnaryAbs                 ; $a7 abs(
>13ec	73 1b					.word	Unary_Random             ; $a8 random(
>13ee	bd 1b					.word	Unary_Page               ; $a9 page
>13f0	c0 1f					.word	MInt32True               ; $aa true
>13f2	c4 1f					.word	MInt32False              ; $ab false
>13f4	88 1b					.word	Unary_Min                ; $ac min(
>13f6	8c 1b					.word	Unary_Max                ; $ad max(
>13f8	73 1c					.word	UnarySys                 ; $ae sys(
>13fa	36 1c					.word	UnaryTimer               ; $af timer(
>13fc	59 1a					.word	EventFunction            ; $b0 event(
>13fe	5f 1c					.word	UnaryGet                 ; $b1 get(
>1400	4f 1c					.word	UnaryInkey               ; $b2 inkey(
>1402	0a 1c					.word	UnaryAlloc               ; $b3 alloc(
>1404	9b 1c					.word	ExecChr                  ; $b4 chr$(
>1406	af 1c					.word	ExecLeft                 ; $b5 left$(
>1408	cc 1c					.word	ExecMid                  ; $b6 mid$(
>140a	f4 1c					.word	ExecRight                ; $b7 right$(
>140c	d9 17					.word	Event_Str                ; $b8 str$(
>140e	08 18					.word	UnaryVal                 ; $b9 val(
>1410	31 1b					.word	UnaryPeek                ; $ba peek(
>1412	37 1b					.word	UnaryDeek                ; $bb deek(
>1414	3d 1b					.word	UnaryLeek                ; $bc leek(
>1416	f4 1a					.word	UnaryAsc                 ; $bd asc(
>1418	e8 1b					.word	UnaryIntToFloat          ; $be int(
>141a	fb 1b					.word	UnaryFloatToInt          ; $bf float(
>141c	0b 18					.word	UnaryIsVal               ; $c0 isval(
>141e	cb 1b					.word	UnaryReference           ; $c1 @
>1420	e1 1b					.word	UnaryComplement          ; $c2 ~
>1422	de 1b					.word	UnaryHexMarker           ; $c3 &
>1424	97 13					.word	TKErr01                  ; $c4 )
>1426	84 13					.word	CommandColon             ; $c5 :
>1428	97 13					.word	TKErr02                  ; $c6 ,
>142a	97 13					.word	TKErr03                  ; $c7 ;
>142c	16 13					.word	Command_Rem2             ; $c8 '
>142e	97 13					.word	TKErr07                  ; $c9 to
>1430	97 13					.word	TKErr05                  ; $ca step
>1432	8f 12					.word	CallProc                 ; $cb proc
>1434	92 13					.word	Unimplemented            ; $cc local
>1436	92 13					.word	Unimplemented            ; $cd dim
>1438	16 13					.word	Command_Rem              ; $ce rem
>143a	b1 10					.word	CommandLet               ; $cf let
>143c	92 13					.word	Unimplemented            ; $d0 input
>143e	aa 10					.word	Command_ELSE             ; $d1 else
>1440	bb 15					.word	Command_VDU              ; $d2 vdu
>1442	f4 11					.word	Command_Print            ; $d3 print
>1444	89 15					.word	CommandGOTO              ; $d4 goto
>1446	5e 15					.word	CommandGOSUB             ; $d5 gosub
>1448	71 15					.word	CommandRETURN            ; $d6 return
>144a	92 13					.word	Unimplemented            ; $d7 data
>144c	1a 10					.word	Command_Assert           ; $d8 assert
>144e	b7 11					.word	Command_Poke             ; $d9 poke
>1450	bb 11					.word	Command_Doke             ; $da doke
>1452	bf 11					.word	Command_Loke             ; $db loke

;******  Return to file: main/commands/run.asm


;******  Processing file: main/commands/../../generated/tokenvectors1.inc

.1454					Group1Vectors:
>1454	28 10					.word	CommandClear             ; $86 clear
>1456	92 13					.word	Unimplemented            ; $87 load
>1458	92 13					.word	Unimplemented            ; $88 save
>145a	92 13					.word	Unimplemented            ; $89 list
>145c	a9 11					.word	Command_New              ; $8a new
>145e	23 13					.word	Command_Run              ; $8b run
>1460	92 13					.word	Unimplemented            ; $8c read
>1462	92 13					.word	Unimplemented            ; $8d restore
>1464	47 15					.word	CommandEnd               ; $8e end
>1466	42 15					.word	CommandStop              ; $8f stop

;******  Return to file: main/commands/run.asm


;******  Processing file: main/commands/../../generated/tokenvectors2.inc

.1468					Group2Vectors:
>1468	92 13					.word	Unimplemented            ; $86 vpoke

;******  Return to file: main/commands/run.asm


;******  Return to file: main/main.asm


;******  Processing file: main/commands/scanner.asm

.0af3					procList:
>0af3							.fill 	2		 					; terminated by name high.
.0af5					yInLine:
>0af5							.fill 	1
.146a					FindProcedure:
.146a	8c f5 0a	sty $0af5			sty 	yInLine
.146d	20 28 15	jsr $1528			jsr 	CalculateProcedureHash		; calculate the hash of the procedure.
.1470	85 06		sta $06				sta 	temp1
.1472	ad f3 0a	lda $0af3			lda		procList 					; put procList address in temp2
.1475	85 08		sta $08				sta 	temp2
.1477	ad f4 0a	lda $0af4			lda 	procList+1
.147a	85 09		sta $09				sta 	temp2+1
.147c	a0 00		ldy #$00			ldy 	#0 							; position in this table.
.147e					_FPLoop:
.147e	b1 08		lda ($08),y			lda 	(temp2),y
.1480	f0 4f		beq $14d1			beq 	_FPError 					; if so, we don't know this procedure.
.1482	85 05		sta $05				sta 	temp0+1 					; copy MSB/LSB to temp0 as we go.
.1484	c8		iny				iny
.1485	b1 08		lda ($08),y			lda 	(temp2),y
.1487	85 04		sta $04				sta 	temp0
.1489	c8		iny				iny
.148a	b1 08		lda ($08),y			lda 	(temp2),y					; check the procedure hash.
.148c	c5 06		cmp $06				cmp 	temp1
.148e	d0 2b		bne $14bb			bne 	_FPNext 					; hash is different, go to next.
.1490	38		sec				sec
.1491	ad f5 0a	lda $0af5			lda 	yInLine 					; position in line must be at least 4
.1494	e9 04		sbc #$04			sbc 	#4
.1496	18		clc				clc
.1497	65 02		adc $02				adc 	codePtr
.1499	85 0a		sta $0a				sta 	temp3
.149b	a5 03		lda $03				lda 	codePtr+1
.149d	69 00		adc #$00			adc 	#0
.149f	85 0b		sta $0b				sta 	temp3+1
.14a1	98		tya				tya
.14a2	48		pha				pha
.14a3	a0 04		ldy #$04			ldy 	#4
.14a5					_FPCName:
.14a5	b1 0a		lda ($0a),y			lda 	(temp3),y 					; check the same
.14a7	d1 04		cmp ($04),y			cmp 	(temp0),y
.14a9	d0 0e		bne $14b9			bne 	_FPPulYNext 				; if different go to next one.
.14ab	c8		iny				iny
.14ac	c9 3a		cmp #$3a			cmp 	#$3A
.14ae	90 f5		bcc $14a5			bcc 	_FPCName 					; compare the whole lot....
.14b0	68		pla				pla 								; throw away the saved Y
.14b1	98		tya				tya 								; length of name is Y-4
.14b2	38		sec				sec
.14b3	e9 04		sbc #$04			sbc 	#4
.14b5	ac f5 0a	ldy $0af5			ldy 	yInLine  					; get the original Y back
.14b8	60		rts				rts
.14b9					_FPPulYNext:
.14b9	68		pla				pla
.14ba	a8		tay				tay
.14bb					_FPNext:
.14bb	c8		iny				iny 								; next procedure record.
.14bc	10 c0		bpl $147e			bpl 	_FPLoop 					; if done 128 already ... e.g. Y -ve
.14be	98		tya				tya 								; subtract 128 from Y
.14bf	38		sec				sec
.14c0	e9 80		sbc #$80			sbc 	#128
.14c2	a8		tay				tay
.14c3	18		clc				clc 								; add 128 to temp2, so we can have more than
.14c4	a5 08		lda $08				lda 	temp2 						; 255/3 = 85 procedures
.14c6	69 80		adc #$80			adc 	#128
.14c8	85 08		sta $08				sta 	temp2
.14ca	90 b2		bcc $147e			bcc 	_FPLoop
.14cc	e6 09		inc $09				inc 	temp2+1
.14ce	4c 7e 14	jmp $147e			jmp 	_FPLoop
.14d1					_FPError:
.14d1	a2 17		ldx #$17			ldx 	#ErrorID_NoProc
.14d3	20 f2 20	jsr $20f2			jsr 	ErrorHandler
.14d6					ScanProc:
.14d6	98		tya				tya
.14d7	48		pha				pha
.14d8	a5 0f		lda $0f				lda 	lowMemory 					; copy the start of the procList, at low memory
.14da	8d f3 0a	sta $0af3			sta 	procList
.14dd	a5 10		lda $10				lda 	lowMemory+1
.14df	8d f4 0a	sta $0af4			sta 	procList+1
.14e2	20 85 13	jsr $1385			jsr 	ResetCodeAddress 			; back to the start.
.14e5					_ScanLoop:
.14e5	a0 00		ldy #$00			ldy 	#0 							; check reached program end
.14e7	b1 02		lda ($02),y			lda 	(codePtr),y
.14e9	f0 2a		beq $1515			beq 	_ScanExit
.14eb	a0 03		ldy #$03			ldy 	#3							; get first token
.14ed	b1 02		lda ($02),y			lda 	(codePtr),y
.14ef	c9 9d		cmp #$9d			cmp 	#TKW_DEFPROC				; skip next if not DEFPROC
.14f1	d0 12		bne $1505			bne 	_ScanNext
.14f3	a5 03		lda $03				lda 	codePtr+1 					; write high and low
.14f5	20 1d 15	jsr $151d			jsr 	_ScanWrite
.14f8	a5 02		lda $02				lda 	codePtr
.14fa	20 1d 15	jsr $151d			jsr 	_ScanWrite
.14fd	a0 04		ldy #$04			ldy 	#4 							; start of name part
.14ff	20 28 15	jsr $1528			jsr 	CalculateProcedureHash 		; calculate procedure hash
.1502	20 1d 15	jsr $151d			jsr 	_ScanWrite
.1505					_ScanNext:
.1505	18		clc				clc
.1506	a0 00		ldy #$00			ldy 	#0
.1508	b1 02		lda ($02),y			lda 	(codePtr),y
.150a	65 02		adc $02				adc 	codePtr
.150c	85 02		sta $02				sta 	codePtr
.150e	90 d5		bcc $14e5			bcc 	_ScanLoop
.1510	e6 03		inc $03				inc 	codePtr+1
.1512	4c e5 14	jmp $14e5			jmp 	_ScanLoop
.1515					_ScanExit:
.1515	a9 00		lda #$00			lda 	#0 							; write ending zero.
.1517	20 1d 15	jsr $151d			jsr 	_ScanWrite
.151a	68		pla				pla
.151b	a8		tay				tay
.151c	60		rts				rts
.151d					_ScanWrite:
.151d	a0 00		ldy #$00			ldy 	#0
.151f	91 0f		sta ($0f),y			sta 	(lowMemory),y
.1521	e6 0f		inc $0f				inc 	lowMemory
.1523	d0 02		bne $1527			bne 	_SWNoCarry
.1525	e6 10		inc $10				inc 	lowMemory+1
.1527					_SWNoCarry:
.1527	60		rts				rts
.1528					CalculateProcedureHash:
.1528	a9 00		lda #$00			lda 	#0 							; clear hash.
.152a	85 04		sta $04				sta 	temp0
.152c					_CPHLoop:
.152c	18		clc				clc 								; add character and rotate and add carry back in
.152d	b1 02		lda ($02),y			lda 	(codePtr),y
.152f	65 04		adc $04				adc 	temp0
.1531	6a		ror a				ror 	a
.1532	69 0d		adc #$0d			adc 	#13 						; primes usually good for this sort of thing.
.1534	85 04		sta $04				sta 	temp0 						; (down with this sort of thing)
.1536	b1 02		lda ($02),y			lda 	(codePtr),y
.1538	c8		iny				iny 								; advance incase we go round again.
.1539	c9 3a		cmp #$3a			cmp 	#$3A
.153b	90 ef		bcc $152c			bcc 	_CPHLoop
.153d	a5 04		lda $04				lda 	temp0
.153f	a9 aa		lda #$aa			lda 	#$AA
.1541	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/stopend.asm

.1542					CommandStop:
.1542	a2 06		ldx #$06			ldx 	#ErrorID_Stop
.1544	20 f2 20	jsr $20f2			jsr 	ErrorHandler
.1547					CommandEnd:
.1547	4c ff ff	jmp $ffff			jmp 	$FFFF 						; fudge to crash out of emulator
.154a					AdvanceNextLine:
.154a	a0 00		ldy #$00			ldy 	#0 							; get offset
.154c	b1 02		lda ($02),y			lda 	(codePtr),y
.154e	18		clc				clc 								; add to codePtr
.154f	65 02		adc $02				adc 	codePtr
.1551	85 02		sta $02				sta 	codePtr
.1553	90 02		bcc $1557			bcc 	_ANLNoCarry
.1555	e6 03		inc $03				inc 	codePtr+1
.1557					_ANLNoCarry:
.1557	b1 02		lda ($02),y			lda 	(codePtr),y 				; if end of program (or was just stand alone.
.1559	f0 ec		beq $1547			beq 	CommandEnd 					; execute END
.155b	a0 03		ldy #$03			ldy 	#3 							; start of tokens on line.
.155d	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/transfer.asm

.155e					CommandGOSUB:
.155e	20 cb 19	jsr $19cb			jsr 	EvaluateRootInteger			; get GOSUB line on stack top.
.1561	a2 04		ldx #$04			ldx 	#4 							; allocate 4 bytes on stack for GOSUB
.1563	a9 47		lda #$47			lda 	#markerGOSUB  				; <marker> <return addr/offset>
.1565	20 5f 20	jsr $205f			jsr 	RSClaim
.1568	a9 01		lda #$01			lda 	#1 							; save position at offset 1.
.156a	20 8b 20	jsr $208b			jsr 	RSSavePosition
.156d	a2 00		ldx #$00			ldx 	#0 							; point back at GOSUB line
.156f	f0 1b		beq $158c			beq 	GotoTOS 					; and do a GOTO there.
.1571					CommandRETURN:
.1571	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.1573	a1 78		lda ($78,x)			lda 	(rsPointer,x)
.1575	c9 47		cmp #$47			cmp 	#markerGOSUB 						; does it match
.1577	f0 05		beq $157e			beq 	_isok
.1579	a2 0e		ldx #$0e			ldx 	#ErrorID_returnErr
.157b	20 f2 20	jsr $20f2			jsr 	ErrorHandler
.157e					_isok:
.157e	a9 01		lda #$01			lda 	#1
.1580	20 9e 20	jsr $209e			jsr 	RSLoadPosition 				; reload the position from offset 1.
.1583	a9 04		lda #$04			lda 	#4 							; throw 4 bytes from stack.
.1585	20 81 20	jsr $2081			jsr 	RSFree
.1588	60		rts				rts
.1589					CommandGOTO:
.1589	20 cb 19	jsr $19cb			jsr 	EvaluateRootInteger 		; get GOTO line on stack top.
.158c					GotoTOS:
.158c	20 85 13	jsr $1385			jsr 	ResetCodeAddress 			; simple search.
.158f					_GotoSearch:
.158f	a0 00		ldy #$00			ldy 	#0 							; get offset
.1591	b1 02		lda ($02),y			lda 	(codePtr),y
.1593	f0 21		beq $15b6			beq 	_GotoError 					; not found.
.1595	c8		iny				iny									; check LSB match
.1596	b1 02		lda ($02),y			lda 	(codePtr),y
.1598	d5 48		cmp $48,x			cmp 	esInt0,x
.159a	d0 07		bne $15a3			bne 	_GotoNext
.159c	c8		iny				iny
.159d	b1 02		lda ($02),y			lda 	(codePtr),y
.159f	d5 50		cmp $50,x			cmp 	esInt1,x
.15a1	f0 10		beq $15b3			beq 	_GotoFound
.15a3					_GotoNext:
.15a3	a0 00		ldy #$00			ldy 	#0 							; go next line
.15a5	b1 02		lda ($02),y			lda 	(codePtr),y
.15a7	18		clc				clc
.15a8	65 02		adc $02				adc 	codePtr
.15aa	85 02		sta $02				sta 	codePtr
.15ac	90 e1		bcc $158f			bcc 	_GotoSearch
.15ae	e6 03		inc $03				inc 	codePtr+1
.15b0	4c 8f 15	jmp $158f			jmp 	_GotoSearch
.15b3					_GotoFound:
.15b3	a0 03		ldy #$03			ldy 	#3 							; continue from that line
.15b5	60		rts				rts
.15b6					_GotoError:
.15b6	a2 0c		ldx #$0c			ldx 	#ErrorID_LineNumber
.15b8	20 f2 20	jsr $20f2			jsr 	ErrorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/commands/vdu.asm

.15bb					Command_VDU:
.15bb	20 cb 19	jsr $19cb			jsr 	EvaluateRootInteger 			; get integer at root.
.15be	a5 48		lda $48				lda 	esInt0
.15c0	a2 04		ldx #$04		ldx	#4
.15c2	20 e5 20	jsr $20e5		jsr	deviceHandler
.15c5					_CVNext:
.15c5	b1 02		lda ($02),y			lda 	(codePtr),y 					; what follows ?
.15c7	c8		iny				iny
.15c8	c9 c6		cmp #$c6			cmp 	#TKW_COMMA 						; comma, do again
.15ca	f0 ef		beq $15bb			beq 	Command_VDU
.15cc	c9 c7		cmp #$c7			cmp 	#TKW_SEMICOLON 					; semicolon, print MSB
.15ce	d0 0a		bne $15da			bne 	_CVExit
.15d0	a5 50		lda $50				lda 	esInt1
.15d2	a2 04		ldx #$04		ldx	#4
.15d4	20 e5 20	jsr $20e5		jsr	deviceHandler
.15d7	4c c5 15	jmp $15c5			jmp 	_CVNext
.15da	88		dey		_CVExit:dey
.15db	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/while.asm

.2602					Command_While:
.2602	a9 57		lda #$57			lda 	#markerWhile 				; gosub marker allocate 4 bytes.
.2604	a2 04		ldx #$04			ldx 	#4
.2606	20 5f 20	jsr $205f			jsr 	RSClaim 					; create on stack.
.2609	88		dey				dey
.260a	a9 01		lda #$01			lda 	#1
.260c	20 8b 20	jsr $208b			jsr 	RSSavePosition 				; save position before the WHILE keyword.
.260f	c8		iny				iny
.2610	20 cd 19	jsr $19cd			jsr 	EvaluateInteger				; get the conditional
.2613	20 eb 1f	jsr $1feb			jsr 	MInt32Zero 	 				; if zero, skip forward.
.2616	f0 01		beq $2619			beq 	_CWFail
.2618	60		rts				rts
.2619					_CWFail:
.2619	a9 04		lda #$04			lda 	#4
.261b	20 81 20	jsr $2081			jsr 	RSFree 						; close the just opened position.
.261e	a9 9f		lda #$9f			lda 	#TKW_WEND 					; scan forward past WEND.
.2620	aa		tax				tax
.2621	20 3d 26	jsr $263d			jsr 	ScanForward
.2624	60		rts				rts
.2625					Command_Wend:
.2625	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.2627	a1 78		lda ($78,x)			lda 	(rsPointer,x)
.2629	c9 57		cmp #$57			cmp 	#markerWHILE 						; does it match
.262b	f0 05		beq $2632			beq 	_isok
.262d	a2 11		ldx #$11			ldx 	#ErrorID_wendErr
.262f	20 f2 20	jsr $20f2			jsr 	ErrorHandler
.2632					_isok:
.2632	a9 01		lda #$01			lda 	#1
.2634	20 9e 20	jsr $209e			jsr 	RSLoadPosition				; go back until true
.2637	a9 04		lda #$04			lda 	#4
.2639	20 81 20	jsr $2081			jsr 	RSFree 						; close the loop
.263c	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/binary.asm

.15dc					BinaryProcess:
.15dc	b5 40		lda $40,x			lda 	esType,x 					; or type bytes together and check bit 6.
.15de	15 41		ora $41,x			ora 	esType+1,x
.15e0	0a		asl a				asl 	a
.15e1	30 0e		bmi $15f1			bmi 	_BPStringType 				; if one is set, then string type.
.15e3	18		clc				clc 								; return CC for integer
.15e4	29 02		and #$02			and 	#$02 						; $02 because of ASL A.
.15e6	f0 08		beq $15f0			beq 	_BPExit 					; if both integer then return with CC.
.15e8	20 f6 15	jsr $15f6			jsr 	BPMakeBothFloat 			; make both float
.15eb	a9 01		lda #$01			lda 	#$01 						; set result type to float
.15ed	95 40		sta $40,x			sta 	esType,x
.15ef	38		sec				sec 								; and return with carry set.
.15f0					_BPExit:
.15f0	60		rts				rts
.15f1					_BPStringType:
.15f1	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.15f3	20 f2 20	jsr $20f2			jsr 	ErrorHandler
.15f6					BPMakeBothFloat:
.15f6	e8		inx				inx
.15f7	20 fb 15	jsr $15fb			jsr 	BPMakeFloat 				; one is a float, so we do both as floats.
.15fa	ca		dex				dex
.15fb					BPMakeFloat:
.15fb	b5 40		lda $40,x			lda 	esType,x 					; get type bit.
.15fd	4a		lsr a				lsr 	a
.15fe	b0 07		bcs $1607			bcs 	_BPIsFloat
.1600	8a		txa				txa
.1601	a2 1a		ldx #$1a		ldx	#26
.1603	20 f9 20	jsr $20f9		jsr	floatingpointHandler
.1606	aa		tax				tax
.1607					_BPIsFloat:
.1607	60		rts				rts
.1608					AddHandler:
.1608	20 57 18	jsr $1857			jsr 	DereferenceTwo 				; dereference top two on stack.
.160b	b5 40		lda $40,x			lda 	esType,x 					; check two strings.
.160d	35 41		and $41,x			and 	esType+1,x
.160f	29 40		and #$40			and 	#$40 						; if both have bit 6 set ...
.1611	d0 10		bne $1623			bne 	_AHStringConcat				; concatenate strings.
.1613	20 dc 15	jsr $15dc			jsr 	BinaryProcess 				; check to see if either is float
.1616	b0 03		bcs $161b			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.1618	4c af 1e	jmp $1eaf			jmp 	MInt32Add 							; else do it as integer.
.161b					_IsFPOperation:
.161b	8a		txa				txa 								; call the relevant fp routine
.161c	a2 02		ldx #$02		ldx	#2
.161e	20 f9 20	jsr $20f9		jsr	floatingpointHandler
.1621	aa		tax				tax
.1622	60		rts				rts
.1623					_AHStringConcat:
.1623	8a		txa				txa
.1624	a2 04		ldx #$04		ldx	#4
.1626	20 50 23	jsr $2350		jsr	stringHandler
.1629	aa		tax				tax
.162a	60		rts				rts
.162b					SubHandler:
.162b	20 57 18	jsr $1857			jsr 	DereferenceTwo
.162e	20 dc 15	jsr $15dc			jsr 	BinaryProcess 				; check to see if either is float
.1631	b0 03		bcs $1636			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.1633	4c c9 1e	jmp $1ec9			jmp 	MInt32Sub 							; else do it as integer.
.1636					_IsFPOperation:
.1636	8a		txa				txa 								; call the relevant fp routine
.1637	a2 10		ldx #$10		ldx	#16
.1639	20 f9 20	jsr $20f9		jsr	floatingpointHandler
.163c	aa		tax				tax
.163d	60		rts				rts
.163e					MulHandler:
.163e	20 57 18	jsr $1857			jsr 	DereferenceTwo
.1641	20 dc 15	jsr $15dc			jsr 	BinaryProcess 				; check to see if either is float
.1644	b0 03		bcs $1649			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.1646	4c e3 1e	jmp $1ee3			jmp 	MInt32Multiply 							; else do it as integer.
.1649					_IsFPOperation:
.1649	8a		txa				txa 								; call the relevant fp routine
.164a	a2 0a		ldx #$0a		ldx	#10
.164c	20 f9 20	jsr $20f9		jsr	floatingpointHandler
.164f	aa		tax				tax
.1650	60		rts				rts
.1651					DivHandler:
.1651	20 57 18	jsr $1857			jsr 	DereferenceTwo
.1654	20 dc 15	jsr $15dc			jsr 	BinaryProcess 				; check to see if either is float
.1657	b0 03		bcs $165c			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.1659	4c a7 1d	jmp $1da7			jmp 	MInt32SDivide 							; else do it as integer.
.165c					_IsFPOperation:
.165c	8a		txa				txa 								; call the relevant fp routine
.165d	a2 06		ldx #$06		ldx	#6
.165f	20 f9 20	jsr $20f9		jsr	floatingpointHandler
.1662	aa		tax				tax
.1663	60		rts				rts
.1664					ModHandler:
.1664	20 57 18	jsr $1857			jsr 	DereferenceTwo
.1667	20 dc 15	jsr $15dc			jsr 	BinaryProcess 				; check to see if either is float
.166a	b0 03		bcs $166f			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.166c	4c 25 1e	jmp $1e25			jmp 	MInt32Modulus 							; else do it as integer.
.166f					_IsFPOperation:
.166f	8a		txa				txa 								; call the relevant fp routine
.1670	a2 08		ldx #$08		ldx	#8
.1672	20 f9 20	jsr $20f9		jsr	floatingpointHandler
.1675	aa		tax				tax
.1676	60		rts				rts
.1677					XorHandler:
.1677	20 57 18	jsr $1857			jsr 	DereferenceTwo
.167a	20 dc 15	jsr $15dc			jsr 	BinaryProcess 				; check to see if either is float
.167d	b0 03		bcs $1682			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.167f	4c 59 1d	jmp $1d59			jmp 	MInt32Xor 							; else do it as integer.
.1682					_IsFPOperation:
.1682	8a		txa				txa 								; call the relevant fp routine
.1683	a2 08		ldx #$08		ldx	#8
.1685	20 f9 20	jsr $20f9		jsr	floatingpointHandler
.1688	aa		tax				tax
.1689	60		rts				rts
.168a					OrHandler:
.168a	20 57 18	jsr $1857			jsr 	DereferenceTwo
.168d	20 dc 15	jsr $15dc			jsr 	BinaryProcess 				; check to see if either is float
.1690	b0 03		bcs $1695			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.1692	4c 40 1d	jmp $1d40			jmp 	MInt32Or 							; else do it as integer.
.1695					_IsFPOperation:
.1695	8a		txa				txa 								; call the relevant fp routine
.1696	a2 08		ldx #$08		ldx	#8
.1698	20 f9 20	jsr $20f9		jsr	floatingpointHandler
.169b	aa		tax				tax
.169c	60		rts				rts
.169d					AndHandler:
.169d	20 57 18	jsr $1857			jsr 	DereferenceTwo
.16a0	20 dc 15	jsr $15dc			jsr 	BinaryProcess 				; check to see if either is float
.16a3	b0 03		bcs $16a8			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.16a5	4c 27 1d	jmp $1d27			jmp 	MInt32And 							; else do it as integer.
.16a8					_IsFPOperation:
.16a8	8a		txa				txa 								; call the relevant fp routine
.16a9	a2 08		ldx #$08		ldx	#8
.16ab	20 f9 20	jsr $20f9		jsr	floatingpointHandler
.16ae	aa		tax				tax
.16af	60		rts				rts
.16b0					ShlHandler:
.16b0	20 57 18	jsr $1857			jsr 	DereferenceTwo
.16b3	20 dc 15	jsr $15dc			jsr 	BinaryProcess 				; check to see if either is float
.16b6	b0 03		bcs $16bb			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.16b8	4c 31 17	jmp $1731			jmp 	Mint32ShiftLeftX 							; else do it as integer.
.16bb					_IsFPOperation:
.16bb	8a		txa				txa 								; call the relevant fp routine
.16bc	a2 08		ldx #$08		ldx	#8
.16be	20 f9 20	jsr $20f9		jsr	floatingpointHandler
.16c1	aa		tax				tax
.16c2	60		rts				rts
.16c3					ShrHandler:
.16c3	20 57 18	jsr $1857			jsr 	DereferenceTwo
.16c6	20 dc 15	jsr $15dc			jsr 	BinaryProcess 				; check to see if either is float
.16c9	b0 03		bcs $16ce			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.16cb	4c 34 17	jmp $1734			jmp 	MInt32ShiftRightX 							; else do it as integer.
.16ce					_IsFPOperation:
.16ce	8a		txa				txa 								; call the relevant fp routine
.16cf	a2 08		ldx #$08		ldx	#8
.16d1	20 f9 20	jsr $20f9		jsr	floatingpointHandler
.16d4	aa		tax				tax
.16d5	60		rts				rts
.16d6					WordRefHandler:
.16d6	20 57 18	jsr $1857			jsr 	DereferenceTwo
.16d9	20 dc 15	jsr $15dc			jsr 	BinaryProcess 				; check to see if either is float
.16dc	b0 03		bcs $16e1			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.16de	4c 23 17	jmp $1723			jmp 	MInt32WordIndirect 							; else do it as integer.
.16e1					_IsFPOperation:
.16e1	8a		txa				txa 								; call the relevant fp routine
.16e2	a2 08		ldx #$08		ldx	#8
.16e4	20 f9 20	jsr $20f9		jsr	floatingpointHandler
.16e7	aa		tax				tax
.16e8	60		rts				rts
.16e9					ByteRefHandler:
.16e9	20 57 18	jsr $1857			jsr 	DereferenceTwo
.16ec	20 dc 15	jsr $15dc			jsr 	BinaryProcess 				; check to see if either is float
.16ef	b0 03		bcs $16f4			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.16f1	4c 27 17	jmp $1727			jmp 	MInt32ByteIndirect 							; else do it as integer.
.16f4					_IsFPOperation:
.16f4	8a		txa				txa 								; call the relevant fp routine
.16f5	a2 08		ldx #$08		ldx	#8
.16f7	20 f9 20	jsr $20f9		jsr	floatingpointHandler
.16fa	aa		tax				tax
.16fb	60		rts				rts
.16fc					PowerHandler:
.16fc	20 57 18	jsr $1857			jsr 	DereferenceTwo
.16ff	20 dc 15	jsr $15dc			jsr 	BinaryProcess 				; check to see if either is float
.1702	b0 03		bcs $1707			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.1704	4c 0f 17	jmp $170f			jmp 	PowerInteger 							; else do it as integer.
.1707					_IsFPOperation:
.1707	8a		txa				txa 								; call the relevant fp routine
.1708	a2 16		ldx #$16		ldx	#22
.170a	20 f9 20	jsr $20f9		jsr	floatingpointHandler
.170d	aa		tax				tax
.170e	60		rts				rts
.170f					PowerInteger:
.170f	20 f6 15	jsr $15f6			jsr 	BPMakeBothFloat				; make them float.
.1712	8a		txa				txa
.1713	a2 16		ldx #$16		ldx	#22
.1715	20 f9 20	jsr $20f9		jsr	floatingpointHandler
.1718	a2 12		ldx #$12		ldx	#18
.171a	20 f9 20	jsr $20f9		jsr	floatingpointHandler
.171d	aa		tax				tax
.171e	a9 00		lda #$00			lda 	#0 							; make type integer
.1720	95 40		sta $40,x			sta 	esType,x
.1722	60		rts				rts
.1723					Mint32WordIndirect:
.1723	a9 80		lda #$80			lda 	#$80 				 		; word reference type
.1725	d0 02		bne $1729			bne 	Min32Indirect
.1727					Mint32ByteIndirect:
.1727	a9 a0		lda #$a0			lda 	#$A0 						; byte reference type
.1729					Min32Indirect:
.1729	48		pha				pha 								; save the indirection
.172a	20 af 1e	jsr $1eaf			jsr 	MInt32Add 					; add a!b a?b
.172d	68		pla				pla 								; and set the type to reference.
.172e	95 40		sta $40,x			sta 	esType,x
.1730	60		rts				rts
.1731					Mint32ShiftLeftX:
.1731	18		clc				clc
.1732	90 01		bcc $1735			bcc 	Mint32Shift
.1734					Mint32ShiftRightX:
.1734	38		sec				sec
.1735					Mint32Shift:
.1735	08		php				php 								; save carry flag on stack.
.1736	b5 51		lda $51,x			lda 	esInt1+1,x 					; if shift >= 32 then it is zero.
.1738	15 59		ora $59,x			ora 	esInt2+1,x
.173a	15 61		ora $61,x			ora 	esInt3+1,x
.173c	d0 1e		bne $175c			bne 	_MShiftZero
.173e	b5 49		lda $49,x			lda 	esInt0+1,x
.1740	c9 20		cmp #$20			cmp 	#32
.1742	b0 18		bcs $175c			bcs 	_MShiftZero
.1744					_MShiftLoop:
.1744	b5 49		lda $49,x			lda 	esInt0+1,x 					; check count is zero
.1746	f0 12		beq $175a			beq 	_MShiftExit
.1748	d6 49		dec $49,x			dec 	esInt0+1,x
.174a	28		plp				plp 								; restore and save carry
.174b	08		php				php
.174c	90 06		bcc $1754			bcc 	_MShiftLeft
.174e	20 e2 1f	jsr $1fe2			jsr 	Mint32ShiftRight
.1751	4c 44 17	jmp $1744			jmp 	_MShiftLoop
.1754					_MShiftLeft:
.1754	20 d9 1f	jsr $1fd9			jsr 	Mint32ShiftLeft
.1757	4c 44 17	jmp $1744			jmp 	_MShiftLoop
.175a					_MShiftExit:
.175a	28		plp				plp	 								; throw saved carry and exit
.175b	60		rts				rts
.175c					_MShiftZero:
.175c	4c c4 1f	jmp $1fc4			jmp 	MInt32False 				; return 0.

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/compare.asm

.175f					PerformComparison:
.175f	20 57 18	jsr $1857			jsr 	DereferenceTwo 				; make both values.
.1762	b5 40		lda $40,x			lda 	esType,x 					; check for two strings.
.1764	35 41		and $41,x			and 	esType+1,x
.1766	0a		asl a				asl 	a
.1767	30 1d		bmi $1786			bmi 	_PCIsString
.1769	b5 40		lda $40,x			lda 	esType,x 					; check either is floating point.
.176b	15 41		ora $41,x			ora 	esType+1,x
.176d	0a		asl a				asl 	a 							; shift bit 6 (string) to bit 7
.176e	30 22		bmi $1792			bmi 	_PCError
.1770	29 02		and #$02			and 	#$02 						; because of ASL, check type in bit 0
.1772	f0 0f		beq $1783			beq 	_PCIsInteger 				; if not two integers
.1774	20 f6 15	jsr $15f6			jsr 	BPMakeBothFloat 			; make both float
.1777	8a		txa				txa
.1778	a2 04		ldx #$04		ldx	#4
.177a	20 f9 20	jsr $20f9		jsr	floatingpointHandler
.177d	86 0c		stx $0c				stx 	tempShort 					; save result
.177f	aa		tax				tax
.1780	a5 0c		lda $0c				lda 	tempShort
.1782	60		rts				rts
.1783					_PCIsInteger:
.1783	4c 72 1d	jmp $1d72			jmp 	MInt32Compare
.1786					_PCIsString:
.1786	8a		txa				txa 								; A has SP
.1787	a2 06		ldx #$06		ldx	#6
.1789	20 50 23	jsr $2350		jsr	stringHandler
.178c	86 0c		stx $0c				stx 	tempShort 					; save result
.178e	aa		tax				tax 								; put SP back in X and get result.
.178f	a5 0c		lda $0c				lda 	tempShort
.1791	60		rts				rts
.1792					_PCError:
.1792	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.1794	20 f2 20	jsr $20f2			jsr 	ErrorHandler
.1797					CompareEquals:
.1797	20 5f 17	jsr $175f			jsr 	PerformComparison
.179a	c9 00		cmp #$00			cmp 	#$00
.179c	f0 35		beq $17d3			beq  	CompareTrue
.179e	4c d6 17	jmp $17d6			jmp 	CompareFalse
.17a1					CompareLess:
.17a1	20 5f 17	jsr $175f			jsr 	PerformComparison
.17a4	c9 ff		cmp #$ff			cmp 	#$FF
.17a6	f0 2b		beq $17d3			beq  	CompareTrue
.17a8	4c d6 17	jmp $17d6			jmp 	CompareFalse
.17ab					CompareGreater:
.17ab	20 5f 17	jsr $175f			jsr 	PerformComparison
.17ae	c9 01		cmp #$01			cmp 	#$01
.17b0	f0 21		beq $17d3			beq  	CompareTrue
.17b2	4c d6 17	jmp $17d6			jmp 	CompareFalse
.17b5					CompareNotEquals:
.17b5	20 5f 17	jsr $175f			jsr 	PerformComparison
.17b8	c9 00		cmp #$00			cmp 	#$00
.17ba	d0 17		bne $17d3			bne  	CompareTrue
.17bc	4c d6 17	jmp $17d6			jmp 	CompareFalse
.17bf					CompareGreaterEq:
.17bf	20 5f 17	jsr $175f			jsr 	PerformComparison
.17c2	c9 ff		cmp #$ff			cmp 	#$FF
.17c4	d0 0d		bne $17d3			bne  	CompareTrue
.17c6	4c d6 17	jmp $17d6			jmp 	CompareFalse
.17c9					CompareLessEq:
.17c9	20 5f 17	jsr $175f			jsr 	PerformComparison
.17cc	c9 01		cmp #$01			cmp 	#$01
.17ce	d0 03		bne $17d3			bne  	CompareTrue
.17d0	4c d6 17	jmp $17d6			jmp 	CompareFalse
.17d3					CompareTrue:
.17d3	4c c0 1f	jmp $1fc0			jmp 	MInt32True
.17d6					CompareFalse:
.17d6	4c c4 1f	jmp $1fc4			jmp 	MInt32False

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/convert.asm

.17d9					Event_Str:
.17d9	20 b7 19	jsr $19b7			jsr 	EvaluateNumeric 			; get a number.
.17dc	b5 40		lda $40,x			lda 	esType,x 					; is it floating point
.17de	d0 13		bne $17f3			bne 	_ESFloat
.17e0	20 36 18	jsr $1836			jsr 	ConvertGetBase
.17e3	a9 cd		lda #$cd			lda 	#(convertBuffer) & $FF
.17e5	85 04		sta $04				sta 	temp0
.17e7	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.17e9	85 05		sta $05				sta 	1+(temp0)
.17eb	b5 49		lda $49,x			lda 	esInt0+1,x 					; get the base
.17ed	20 1a 1f	jsr $1f1a			jsr 	MInt32ToString 				; convert to string.
.17f0	4c 00 18	jmp $1800			jmp 	_ESCloneExit 				; clone and exit.
.17f3					_ESFloat:
.17f3	20 37 20	jsr $2037			jsr 	CheckRightParen 			; check closing )
.17f6	20 26 11	jsr $1126			jsr 	TOSToTemp0 					; string address in temp0, goes here.
.17f9	8a		txa				txa
.17fa	a2 14		ldx #$14		ldx	#20
.17fc	20 f9 20	jsr $20f9		jsr	floatingpointHandler
.17ff	aa		tax				tax
.1800					_ESCloneExit:
.1800	8a		txa				txa
.1801	a2 02		ldx #$02		ldx	#2
.1803	20 50 23	jsr $2350		jsr	stringHandler
.1806	aa		tax				tax
.1807	60		rts				rts
.1808					UnaryVal:
.1808	38		sec				sec
.1809	b0 01		bcs $180c			bcs 	ValueMain
.180b					UnaryIsVal:
.180b	18		clc				clc
.180c					ValueMain:
.180c	08		php				php 								; save results (CS is value, CC is validation)
.180d	20 c2 19	jsr $19c2			jsr 	EvaluateString
.1810	20 36 18	jsr $1836			jsr 	ConvertGetBase 				; get base, if any.
.1813	98		tya				tya
.1814	48		pha				pha
.1815	20 26 11	jsr $1126			jsr 	TOSToTemp0 					; string address in temp0, goes here.
.1818	b5 49		lda $49,x			lda 	esInt0+1,x 					; get the base
.181a	29 7f		and #$7f			and 	#$7F 						; ignore the sign bit.
.181c	20 39 1e	jsr $1e39			jsr 	MInt32FromString 			; convert it back from a string.
.181f	b0 0c		bcs $182d			bcs 	_VMSuccess 					; successfully converted.
.1821	b5 49		lda $49,x			lda 	esInt0+1,x 					; is base the default
.1823	c9 8a		cmp #$8a			cmp 	#$80+10 					; if no, then it is integer only.
.1825	f0 00		beq $1827			beq 	_VMFailed 	 				; so we failed.
.1827					_VMFailed:
.1827	68		pla				pla
.1828	a8		tay				tay
.1829	28		plp				plp
.182a	4c c4 1f	jmp $1fc4			jmp 	MInt32False 				; return 0 whatever.
.182d					_VMSuccess:
.182d	68		pla				pla
.182e	a8		tay				tay
.182f	28		plp				plp 								; if CS the it was val() so we want the value.
.1830	b0 03		bcs $1835			bcs 	_VMExit
.1832	4c c0 1f	jmp $1fc0			jmp 	MInt32True 					; otherwise return true as successful.
.1835					_VMExit:
.1835	60		rts				rts
.1836					ConvertGetBase:
.1836	a9 8a		lda #$8a			lda 	#10+$80 					; default base 10 signed.
.1838	95 49		sta $49,x			sta 	esInt0+1,x
.183a	b1 02		lda ($02),y			lda 	(codePtr),y
.183c	c9 c6		cmp #$c6			cmp 	#TKW_COMMA
.183e	d0 0e		bne $184e			bne 	_CGBDone
.1840	e8		inx				inx 								; next level
.1841	c8		iny				iny 								; skip comma.
.1842	20 d5 19	jsr $19d5			jsr 	EvaluateSmallInteger		; evaluate the base.
.1845	ca		dex				dex
.1846	c9 02		cmp #$02			cmp 	#2
.1848	90 08		bcc $1852			bcc 	_CGBValue
.184a	c9 11		cmp #$11			cmp 	#17
.184c	b0 04		bcs $1852			bcs 	_CGBValue
.184e					_CGBDone:
.184e	20 37 20	jsr $2037			jsr 	CheckRightParen
.1851	60		rts				rts
.1852					_CGBValue:
.1852	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.1854	20 f2 20	jsr $20f2			jsr 	ErrorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/dereference.asm

.1857					DereferenceTwo:
.1857	e8		inx				inx
.1858	20 5c 18	jsr $185c			jsr 	DereferenceOne
.185b	ca		dex				dex
.185c					DereferenceOne:
.185c	b5 40		lda $40,x			lda 	esType,x
.185e	10 3d		bpl $189d			bpl 	_DRNotReference 			; is it a reference ?
.1860	4a		lsr a				lsr 	a 							; do float dereference if bit 0 set.
.1861	b0 3b		bcs $189e			bcs 	_DRFloatDeReference
.1863	98		tya				tya
.1864	48		pha				pha
.1865	b5 48		lda $48,x			lda 	esInt0,x 					; copy address to temp0
.1867	85 04		sta $04				sta 	temp0
.1869	b5 50		lda $50,x			lda 	esInt1,x
.186b	85 05		sta $05				sta 	temp0+1
.186d	a9 00		lda #$00			lda 	#0 							; clear esInt1..3
.186f	95 50		sta $50,x			sta 	esInt1,x
.1871	95 58		sta $58,x			sta 	esInt2,x
.1873	95 60		sta $60,x			sta 	esInt3,x
.1875	b5 40		lda $40,x			lda 	esType,x 					; get the type byte.
.1877	29 60		and #$60			and 	#$60 						; get string flag ($40) and byte flag ($20)
.1879	0a		asl a				asl 	a 							; now string ($80) byte ($40)
.187a	30 0d		bmi $1889			bmi 	_DeRefString 				; string, 2 bytes only
.187c	d0 11		bne $188f			bne 	_DeRefByte 					; byte 1 byte only
.187e					_DeRefLong:
.187e	a0 03		ldy #$03			ldy 	#3
.1880	b1 04		lda ($04),y			lda 	(temp0),y
.1882	95 60		sta $60,x			sta 	esInt3,x
.1884	88		dey				dey
.1885	b1 04		lda ($04),y			lda 	(temp0),y
.1887	95 58		sta $58,x			sta 	esInt2,x
.1889					_DeRefString:
.1889	a0 01		ldy #$01			ldy 	#1
.188b	b1 04		lda ($04),y			lda 	(temp0),y
.188d	95 50		sta $50,x			sta 	esInt1,x
.188f					_DeRefByte:
.188f	a0 00		ldy #$00			ldy 	#0
.1891	b1 04		lda ($04),y			lda 	(temp0),y
.1893	95 48		sta $48,x			sta 	esInt0,x
.1895	b5 40		lda $40,x			lda 	esType,x 					; clear byte and deref bits.
.1897	29 40		and #$40			and 	#$40
.1899	95 40		sta $40,x			sta 	esType,x
.189b	68		pla				pla
.189c	a8		tay				tay
.189d					_DRNotReference
.189d	60		rts				rts
.189e					_DRFloatDereference:
.189e	8a		txa				txa
.189f							floatingpoint_deref
.189f	aa		tax				tax
.18a0	a9 01		lda #$01			lda 	#$01 						; type to FP (float)
.18a2	95 40		sta $40,x			sta 	esType,x
.18a4	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/evaluate.asm

.18a5					EvaluateLevel:
.18a5	48		pha				pha 								; save precedence level.
.18a6	a9 00		lda #$00			lda 	#0 							; zero the current stack level.
.18a8	95 48		sta $48,x			sta 	esInt0,x
.18aa	95 50		sta $50,x			sta 	esInt1,x
.18ac	95 58		sta $58,x			sta 	esInt2,x
.18ae	95 60		sta $60,x			sta 	esInt3,x
.18b0	95 40		sta $40,x			sta 	esType,x 					; zero the type (integer value)
.18b2	b1 02		lda ($02),y			lda 	(codePtr),y	 				; look at first token/character
.18b4	30 21		bmi $18d7			bmi 	_ELIsToken 					; if -ve could be string, float, or unary function.
.18b6	0a		asl a				asl 	a 							; if 00-3F then will now be PL and it's a variable.
.18b7	30 0a		bmi $18c3			bmi 	_ELIsConstant 				; 40-7F will be -ve and that's an integer constant.
.18b9	8a		txa				txa 								; stack level in X
.18ba	a2 00		ldx #$00		ldx	#0
.18bc	20 be 24	jsr $24be		jsr	variableHandler
.18bf	aa		tax				tax
.18c0	4c 00 19	jmp $1900			jmp		_ELHasTerm
.18c3					_ELIsConstant:
.18c3	4a		lsr a				lsr 	a 							; get the value back
.18c4	29 3f		and #$3f			and 	#$3F 						; force into range 0-63
.18c6	95 48		sta $48,x			sta 	esInt0,x 					; and put in LSB.
.18c8					_ELCheckNext:
.18c8	c8		iny				iny 								; look at next
.18c9	b1 02		lda ($02),y			lda 	(codePtr),y
.18cb	49 40		eor #$40			eor 	#$40 						; shift around so 40-7F => 00-3F
.18cd	c9 40		cmp #$40			cmp 	#$40 						; out of range ?
.18cf	b0 2f		bcs $1900			bcs 	_ELHasTerm 					; done getting the constant.
.18d1	20 0d 1a	jsr $1a0d			jsr 	ELShiftByteIn 				; shift byte into position.
.18d4	4c c8 18	jmp $18c8			jmp 	_ELCheckNext
.18d7					_ELIsToken:
.18d7	c9 85		cmp #$85			cmp 	#TOK_STR 					; handle strings.
.18d9	f0 0f		beq $18ea			beq 	_ELIsString
.18db	c9 84		cmp #$84			cmp 	#TOK_FPC 					; if no, then check unary.
.18dd	d0 5f		bne $193e			bne 	_ELCheckUnary
.18df	8a		txa				txa 								; put X into A
.18e0	c8		iny				iny 								; skip over the float marker
.18e1	a2 18		ldx #$18		ldx	#24
.18e3	20 f9 20	jsr $20f9		jsr	floatingpointHandler
.18e6	aa		tax				tax 								; restore X
.18e7	4c 00 19	jmp $1900			jmp 	_ELHasTerm
.18ea					_ELIsString:
.18ea	98		tya				tya 								; address of string is codePtr+y+1
.18eb	38		sec				sec
.18ec	65 02		adc $02				adc 	codePtr
.18ee	95 48		sta $48,x			sta 	esInt0,x
.18f0	a5 03		lda $03				lda 	codePtr+1
.18f2	69 00		adc #$00			adc 	#0
.18f4	95 50		sta $50,x			sta 	esInt1,x
.18f6	a9 40		lda #$40			lda 	#$40 						; set type to string value
.18f8	95 40		sta $40,x			sta 	esType,x
.18fa	c8		iny				iny 								; skip over string.
.18fb	98		tya				tya
.18fc	38		sec				sec									; +1 for the length itself.
.18fd	71 02		adc ($02),y			adc 	(codePtr),y
.18ff	a8		tay				tay 								; and fall through to term loop code.
.1900					_ELHasTerm:
.1900	b1 02		lda ($02),y			lda 	(codePtr),y
.1902	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; check in the correct range for binary tokens.
.1904	90 04		bcc $190a			bcc 	_ELPopExit
.1906	c9 99		cmp #$99			cmp 	#TOK_STRUCTST
.1908	90 02		bcc $190c			bcc 	_ELHasBinaryTerm
.190a					_ELPopExit:
.190a	68		pla				pla
.190b					_ELExit:
.190b	60		rts				rts
.190c					_ELHasBinaryTerm:
.190c	84 0c		sty $0c				sty 	tempShort 					; save position
.190e	a8		tay				tay 								; use token as an index and get the precedence.
.190f	b9 b5 19	lda $19b5,y			lda 	ELBinaryOperatorInfo-TOK_BINARYST,y
.1912	a4 0c		ldy $0c				ldy 	tempShort 					; restore Y
.1914	85 0c		sta $0c				sta 	tempShort 					; save precedence in memory.
.1916	68		pla				pla 								; restore current level.
.1917	c5 0c		cmp $0c				cmp 	tempShort 					; if current >= operator then exit
.1919	b0 f0		bcs $190b			bcs 	_ELExit
.191b	48		pha				pha 								; save current level back on the stack.
.191c	b1 02		lda ($02),y			lda 	(codePtr),y 				; save the binary operator on the stack and skip it.
.191e	48		pha				pha
.191f	c8		iny				iny
.1920	e8		inx				inx 								; calculate the RHS at the operator precedence.
.1921	a5 0c		lda $0c				lda 	tempShort
.1923	20 a5 18	jsr $18a5			jsr 	EvaluateLevel
.1926	ca		dex				dex
.1927	68		pla				pla 								; get the operator back out.
.1928					_ELExecuteA:
.1928	86 0c		stx $0c				stx 	tempShort 					; upload the vectors. Would be nice to use jmp (aaaa,x)
.192a	0a		asl a				asl 	a 							; but not practical. May use push/rts later.
.192b	aa		tax				tax
.192c	bd 9c 13	lda $139c,x			lda 	Group0Vectors,x
.192f	85 04		sta $04				sta 	temp0
.1931	bd 9d 13	lda $139d,x			lda 	Group0Vectors+1,x
.1934	85 05		sta $05				sta 	temp0+1
.1936	a6 0c		ldx $0c				ldx 	tempShort
.1938	20 81 19	jsr $1981			jsr 	_ELCallTemp0
.193b	4c 00 19	jmp $1900			jmp 	_ELHasTerm 					; and loop back round.
.193e					_ELCheckUnary:
.193e	c8		iny				iny 								; skip over token.
.193f	c9 90		cmp #$90			cmp 	#TKW_MINUS 					; is it - term
.1941	f0 15		beq $1958			beq 	_ELMinus
.1943	c9 97		cmp #$97			cmp 	#TKW_PLING 					; is it ! or ? term
.1945	f0 28		beq $196f			beq 	_ELIndirect
.1947	c9 98		cmp #$98			cmp 	#TKW_QMARK
.1949	f0 24		beq $196f			beq 	_ELIndirect
.194b	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST 				; must be TOK_UNARYST ... TOK_TOKENS
.194d	90 04		bcc $1953			bcc 	_ELUSyntax
.194f	c9 c4		cmp #$c4			cmp 	#TOK_TOKENS
.1951	90 d5		bcc $1928			bcc 	_ELExecuteA 				; if so do that token.
.1953					_ELUSyntax:
.1953	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.1955	20 f2 20	jsr $20f2			jsr 	ErrorHandler
.1958					_ELMinus:
.1958	20 96 19	jsr $1996			jsr 	EvaluateNumericTerm 		; get a number to negate.
.195b	b5 40		lda $40,x			lda 	esType,x 					; is it integer
.195d	f0 0a		beq $1969			beq 	_ELMinusInteger
.195f	8a		txa				txa
.1960	a2 0c		ldx #$0c		ldx	#12
.1962	20 f9 20	jsr $20f9		jsr	floatingpointHandler
.1965	aa		tax				tax
.1966	4c 00 19	jmp $1900			jmp 	_ELHasTerm
.1969					_ELMinusInteger:
.1969	20 7e 1f	jsr $1f7e			jsr 	MInt32Negate 				; do int negate
.196c	4c 00 19	jmp $1900			jmp 	_ELHasTerm
.196f					_ELIndirect:
.196f	48		pha				pha 								; save what we want (TKW_QMARK TWK_PLING)
.1970	20 9f 19	jsr $199f			jsr 	EvaluateIntegerTerm 		; integer address
.1973	68		pla				pla
.1974	49 97		eor #$97			eor 	#TKW_PLING 					; now $00 if !
.1976	f0 02		beq $197a			beq 	_ELHaveModifier
.1978	a9 20		lda #$20			lda 	#$20 						; now $00 if !, $20 if ?
.197a					_ELHaveModifier:
.197a	09 80		ora #$80			ora 	#$80						; make it the appropriate reference.
.197c	95 40		sta $40,x			sta 	esType,x
.197e	4c 00 19	jmp $1900			jmp 	_ELHasTerm
.1981					_ELCallTemp0:
.1981	6c 04 00	jmp ($0004)			jmp 	(temp0)
.1984					UnaryParenthesis:
.1984	a9 00		lda #$00			lda 	#0 							; ( is a unary function ....
.1986	20 a5 18	jsr $18a5			jsr 	EvaluateLevel
.1989	20 37 20	jsr $2037			jsr 	CheckRightParen 			; check for )
.198c	60		rts				rts
.198d					EvaluateTerm:
.198d	a9 0f		lda #$0f			lda 	#15
.198f	20 a5 18	jsr $18a5			jsr 	EvaluateLevel
.1992	20 5c 18	jsr $185c			jsr 	DereferenceOne
.1995	60		rts				rts
.1996					EvaluateNumericTerm:
.1996	20 8d 19	jsr $198d			jsr 	EvaluateTerm
.1999	b5 40		lda $40,x			lda 	esType,x
.199b	0a		asl a				asl 	a 							; see if it's a string.
.199c	30 09		bmi $19a7			bmi 	ENTType
.199e	60		rts				rts
.199f					EvaluateIntegerTerm:
.199f	20 8d 19	jsr $198d			jsr 	EvaluateTerm
.19a2	b5 40		lda $40,x			lda 	esType,x
.19a4	d0 01		bne $19a7			bne 	ENTType
.19a6	60		rts				rts
.19a7					ENTType:
.19a7	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.19a9	20 f2 20	jsr $20f2			jsr 	ErrorHandler
.19ac					EvaluateRoot:
.19ac	a2 00		ldx #$00			ldx 	#0
.19ae					Evaluate:
.19ae	a9 00		lda #$00			lda 	#0
.19b0	20 a5 18	jsr $18a5			jsr 	EvaluateLevel
.19b3	20 5c 18	jsr $185c			jsr 	DereferenceOne
.19b6	60		rts				rts
.19b7					EvaluateNumeric:
.19b7	20 ae 19	jsr $19ae			jsr 	Evaluate
.19ba	b5 40		lda $40,x			lda 	esType,x
.19bc	0a		asl a				asl 	a 							; see if it's a string.
.19bd	30 e8		bmi $19a7			bmi 	ENTType
.19bf	4a		lsr a				lsr 	a 							; shift float flag into carry.
.19c0	4a		lsr a				lsr 	a
.19c1	60		rts				rts
.19c2					EvaluateString:
.19c2	20 ae 19	jsr $19ae			jsr 	Evaluate
.19c5	b5 40		lda $40,x			lda 	esType,x
.19c7	0a		asl a				asl 	a 							; see if it's a string.
.19c8	10 dd		bpl $19a7			bpl 	ENTType
.19ca	60		rts				rts
.19cb					EvaluateRootInteger:
.19cb	a2 00		ldx #$00			ldx 	#0
.19cd					EvaluateInteger:
.19cd	20 ae 19	jsr $19ae			jsr 	Evaluate
.19d0	b5 40		lda $40,x			lda 	esType,x
.19d2	d0 d3		bne $19a7			bne 	ENTType
.19d4	60		rts				rts
.19d5					EvaluateSmallInteger:
.19d5	20 cd 19	jsr $19cd			jsr 	EvaluateInteger
.19d8	b5 50		lda $50,x			lda 	esInt1,x
.19da	15 58		ora $58,x			ora 	esInt2,x
.19dc	15 60		ora $60,x			ora 	esInt3,x
.19de	d0 03		bne $19e3			bne 	_ESIValue
.19e0	b5 48		lda $48,x			lda 	esInt0,x
.19e2	60		rts				rts
.19e3					_ESIValue:
.19e3	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.19e5	20 f2 20	jsr $20f2			jsr 	ErrorHandler
.19e8					LinkEvaluate:
.19e8	aa		tax				tax
.19e9	20 ae 19	jsr $19ae			jsr 	Evaluate
.19ec	8a		txa				txa
.19ed	60		rts				rts
.19ee					LinkEvaluateInteger:
.19ee	aa		tax				tax
.19ef	20 cd 19	jsr $19cd			jsr 	EvaluateInteger
.19f2	8a		txa				txa
.19f3	60		rts				rts
.19f4					LinkEvaluateSmallInt:
.19f4	aa		tax				tax
.19f5	20 d5 19	jsr $19d5			jsr 	EvaluateSmallInteger
.19f8	8a		txa				txa
.19f9	60		rts				rts
.19fa					EvaluateReference:
.19fa	ad 4c 1a	lda $1a4c			lda 	ELBinaryOperatorInfo+TKW_PLING-TOK_BINARYST
.19fd	38		sec				sec 								; sub 1 to allow a!x b?x to work.
.19fe	e9 01		sbc #$01			sbc 	#1
.1a00	20 a5 18	jsr $18a5			jsr 	EvaluateLevel
.1a03	b5 40		lda $40,x			lda 	esType,x
.1a05	10 01		bpl $1a08			bpl 	_ERFail
.1a07	60		rts				rts
.1a08					_ERFail:
.1a08	a2 0b		ldx #$0b			ldx 	#ErrorID_NoReference
.1a0a	20 f2 20	jsr $20f2			jsr 	ErrorHandler
.1a0d					ELShiftByteIn:
.1a0d	48		pha				pha 								; save bits to shift in.
.1a0e	b5 60		lda $60,x			lda 	esInt3,x 					; save top most byte
.1a10	48		pha				pha
.1a11	b5 58		lda $58,x			lda 	esInt2,x 					; shift everything left 8 bits
.1a13	95 60		sta $60,x			sta 	esInt3,x
.1a15	b5 50		lda $50,x			lda 	esInt1,x
.1a17	95 58		sta $58,x			sta 	esInt2,x
.1a19	b5 48		lda $48,x			lda 	esInt0,x
.1a1b	95 50		sta $50,x			sta 	esInt1,x
.1a1d	a9 00		lda #$00			lda 	#0
.1a1f	95 48		sta $48,x			sta 	esInt0,x
.1a21	68		pla				pla 								; now A:TOS is a 5 byte register, shift right twice.
.1a22	29 03		and #$03			and 	#3 							; only want lower 2 bits
.1a24	09 04		ora #$04			ora 	#4  						; set bit 2 - when 1 we are done
.1a26					_ELShiftLoop:
.1a26	4a		lsr a				lsr 	a
.1a27	76 60		ror $60,x			ror 	esInt3,x
.1a29	76 58		ror $58,x			ror 	esInt2,x
.1a2b	76 50		ror $50,x			ror 	esInt1,x
.1a2d	76 48		ror $48,x			ror 	esInt0,x
.1a2f	c9 01		cmp #$01			cmp 	#1
.1a31	d0 f3		bne $1a26			bne 	_ELShiftLoop
.1a33	68		pla				pla 								; get original 6 bit value and OR in.
.1a34	29 3f		and #$3f			and 	#$3F
.1a36	15 48		ora $48,x			ora 	esInt0,x
.1a38	95 48		sta $48,x			sta 	esInt0,x
.1a3a	60		rts				rts
.1a3b					ELBinaryOperatorInfo:

;******  Processing file: main/evaluate/../../generated/binarystructinfo.inc

>1a3b	01					.byte	$01			; $86 and
>1a3c	01					.byte	$01			; $87 or
>1a3d	01					.byte	$01			; $88 xor
>1a3e	02					.byte	$02			; $89 >=
>1a3f	02					.byte	$02			; $8a <=
>1a40	02					.byte	$02			; $8b >
>1a41	02					.byte	$02			; $8c <
>1a42	02					.byte	$02			; $8d =
>1a43	02					.byte	$02			; $8e <>
>1a44	03					.byte	$03			; $8f +
>1a45	03					.byte	$03			; $90 -
>1a46	04					.byte	$04			; $91 >>
>1a47	04					.byte	$04			; $92 <<
>1a48	04					.byte	$04			; $93 *
>1a49	04					.byte	$04			; $94 /
>1a4a	04					.byte	$04			; $95 mod
>1a4b	05					.byte	$05			; $96 ^
>1a4c	06					.byte	$06			; $97 !
>1a4d	06					.byte	$06			; $98 ?
>1a4e	82					.byte	$82			; $99 repeat
>1a4f	82					.byte	$82			; $9a while
>1a50	82					.byte	$82			; $9b for
>1a51	82					.byte	$82			; $9c if
>1a52	82					.byte	$82			; $9d defproc
>1a53	80					.byte	$80			; $9e until
>1a54	80					.byte	$80			; $9f wend
>1a55	80					.byte	$80			; $a0 next
>1a56	80					.byte	$80			; $a1 then
>1a57	80					.byte	$80			; $a2 endif
>1a58	80					.byte	$80			; $a3 endproc

;******  Return to file: main/evaluate/evaluate.asm


;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/event.asm

.1a59					EventFunction:
.1a59	20 fa 19	jsr $19fa			jsr 	EvaluateReference			; get the variable reference.
.1a5c	b5 40		lda $40,x			lda 	esType,x
.1a5e	c9 80		cmp #$80			cmp 	#$80 						; must be int ref
.1a60	d0 55		bne $1ab7			bne 	_EFType
.1a62	20 44 20	jsr $2044			jsr 	CheckComma
.1a65	e8		inx				inx
.1a66	20 cd 19	jsr $19cd			jsr 	EvaluateInteger		 		; get the elapsed time between firing.
.1a69	20 37 20	jsr $2037			jsr 	CheckRightParen 			; finish off with the
.1a6c	ca		dex				dex
.1a6d	b5 50		lda $50,x			lda 	esInt1,x 					; check max of 32767
.1a6f	29 80		and #$80			and 	#$80
.1a71	15 58		ora $58,x			ora 	esInt2,x
.1a73	15 60		ora $60,x			ora 	esInt3,x
.1a75	d0 3b		bne $1ab2			bne 	_EFValue
.1a77	98		tya				tya
.1a78	48		pha				pha
.1a79	8a		txa				txa
.1a7a	48		pha				pha
.1a7b	a2 08		ldx #$08		ldx	#8
.1a7d	20 e5 20	jsr $20e5		jsr	deviceHandler
.1a80	84 07		sty $07				sty 	temp1+1
.1a82	85 06		sta $06				sta 	temp1
.1a84	68		pla				pla
.1a85	aa		tax				tax
.1a86	20 26 11	jsr $1126			jsr 	TOSToTemp0 					; point temp0 to the variable.
.1a89	a0 00		ldy #$00			ldy 	#0 							; is the fire time zero ?
.1a8b	b1 04		lda ($04),y			lda 	(temp0),y
.1a8d	c8		iny				iny
.1a8e	11 04		ora ($04),y			ora 	(temp0),y
.1a90	f0 17		beq $1aa9			beq 	_EFInitialise 				; if so, initialise the value but return false.
.1a92	a0 00		ldy #$00			ldy 	#0 							; calculate trigger - timer
.1a94	38		sec				sec
.1a95	b1 04		lda ($04),y			lda 	(temp0),y
.1a97	e5 06		sbc $06				sbc 	temp1
.1a99	c8		iny				iny
.1a9a	b1 04		lda ($04),y			lda 	(temp0),y
.1a9c	e5 07		sbc $07				sbc 	temp1+1
.1a9e	10 0c		bpl $1aac			bpl 	_EFFail 					; if trigger >= timer then return False
.1aa0	20 bc 1a	jsr $1abc			jsr 	SetEventTimer 				; reset the timer for next time.
.1aa3	20 c0 1f	jsr $1fc0			jsr	 	MInt32True 					; and treutn true as fired.
.1aa6	68		pla				pla
.1aa7	a8		tay				tay
.1aa8	60		rts				rts
.1aa9					_EFInitialise:
.1aa9	20 bc 1a	jsr $1abc			jsr		SetEventTimer 				; set trigger time to time + elapsed
.1aac					_EFFail:
.1aac	20 c4 1f	jsr $1fc4			jsr 	MInt32False
.1aaf	68		pla				pla
.1ab0	a8		tay				tay
.1ab1	60		rts				rts
.1ab2					_EFValue:
.1ab2	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.1ab4	20 f2 20	jsr $20f2			jsr 	ErrorHandler
.1ab7					_EFType:
.1ab7	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.1ab9	20 f2 20	jsr $20f2			jsr 	ErrorHandler
.1abc					SetEventTimer:
.1abc	a0 00		ldy #$00			ldy 	#0 							; add elapsed to current time, store in variable
.1abe	18		clc				clc
.1abf	a5 06		lda $06				lda 	temp1
.1ac1	75 49		adc $49,x			adc 	esInt0+1,x
.1ac3	91 04		sta ($04),y			sta		(temp0),y
.1ac5	c8		iny				iny
.1ac6	a5 07		lda $07				lda 	temp1+1
.1ac8	75 51		adc $51,x			adc 	esInt1+1,x
.1aca	91 04		sta ($04),y			sta		(temp0),y
.1acc	88		dey				dey
.1acd	11 04		ora ($04),y			ora 	(temp0),y 					; if the result is non zero, exit
.1acf	d0 04		bne $1ad5			bne 	_SETExit
.1ad1	a9 01		lda #$01			lda 	#1 							; timer zero won't work, so make it 1, which is
.1ad3	91 04		sta ($04),y			sta 	(temp0),y 					; near enough.
.1ad5					_SETExit:
.1ad5	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary.asm

.1ad6					UnaryLen:
.1ad6	20 e4 1a	jsr $1ae4			jsr 	ULStart
.1ad9					ULFinish:
.1ad9	b1 04		lda ($04),y			lda 	(temp0),y
.1adb	a4 0c		ldy $0c				ldy 	tempShort
.1add	20 d3 1f	jsr $1fd3			jsr 	MInt32Set8Bit
.1ae0	20 37 20	jsr $2037			jsr 	CheckRightParen
.1ae3	60		rts				rts
.1ae4	20 c2 19	jsr $19c2	ULStart:jsr 	EvaluateString
.1ae7	b5 48		lda $48,x			lda 	esInt0,x 					; copy address of string to temp0
.1ae9	85 04		sta $04				sta 	temp0
.1aeb	b5 50		lda $50,x			lda 	esInt1,x
.1aed	85 05		sta $05				sta 	temp0+1
.1aef	84 0c		sty $0c				sty 	tempShort 					; get length
.1af1	a0 00		ldy #$00			ldy 	#0
.1af3	60		rts				rts
.1af4					UnaryAsc:
.1af4	20 e4 1a	jsr $1ae4			jsr 	ULStart 					; same as LEN() get string, save Y, point to length.
.1af7	b1 04		lda ($04),y			lda 	(temp0),y
.1af9	c8		iny				iny 		 						; point to first character, we can do LEN code after that
.1afa	c9 00		cmp #$00			cmp 	#0
.1afc	d0 db		bne $1ad9			bne 	ULFinish
.1afe	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.1b00	20 f2 20	jsr $20f2			jsr 	ErrorHandler
.1b03					UnaryAbs:
.1b03	20 b7 19	jsr $19b7			jsr 	EvaluateNumeric
.1b06	b0 07		bcs $1b0f			bcs 	_UAFloat
.1b08	20 79 1f	jsr $1f79			jsr 	MInt32Absolute
.1b0b	20 37 20	jsr $2037			jsr 	CheckRightParen
.1b0e	60		rts				rts
.1b0f					_UAFloat:
.1b0f	8a		txa				txa
.1b10	a2 00		ldx #$00		ldx	#0
.1b12	20 f9 20	jsr $20f9		jsr	floatingpointHandler
.1b15	aa		tax				tax
.1b16	20 37 20	jsr $2037			jsr 	CheckRightParen
.1b19	60		rts				rts
.1b1a					UnarySgn:
.1b1a	20 b7 19	jsr $19b7			jsr 	EvaluateNumeric
.1b1d	b0 07		bcs $1b26			bcs 	_USFloat
.1b1f	20 b1 1f	jsr $1fb1			jsr 	MInt32Sign
.1b22	20 37 20	jsr $2037			jsr 	CheckRightParen
.1b25	60		rts				rts
.1b26					_USFloat:
.1b26	8a		txa				txa
.1b27	a2 0e		ldx #$0e		ldx	#14
.1b29	20 f9 20	jsr $20f9		jsr	floatingpointHandler
.1b2c	aa		tax				tax
.1b2d	20 37 20	jsr $2037			jsr 	CheckRightParen
.1b30	60		rts				rts
.1b31					UnaryPeek:
.1b31	20 5d 1b	jsr $1b5d			jsr 	PDLCode
.1b34	4c 51 1b	jmp $1b51			jmp 	PDLByte0
.1b37					UnaryDeek:
.1b37	20 5d 1b	jsr $1b5d			jsr 	PDLCode
.1b3a	4c 4b 1b	jmp $1b4b			jmp 	PDLByte1
.1b3d					UnaryLeek:
.1b3d	20 5d 1b	jsr $1b5d			jsr 	PDLCode
.1b40	a0 03		ldy #$03			ldy 	#3
.1b42	b1 04		lda ($04),y			lda 	(temp0),y
.1b44	95 60		sta $60,x			sta 	esInt3,x
.1b46	88		dey				dey
.1b47	b1 04		lda ($04),y			lda 	(temp0),y
.1b49	95 58		sta $58,x			sta 	esInt2,x
.1b4b					PDLByte1:
.1b4b	a0 01		ldy #$01			ldy 	#1
.1b4d	b1 04		lda ($04),y			lda 	(temp0),y
.1b4f	95 50		sta $50,x			sta 	esInt1,x
.1b51					PDLByte0:
.1b51	a0 00		ldy #$00			ldy 	#0
.1b53	b1 04		lda ($04),y			lda 	(temp0),y
.1b55	95 48		sta $48,x			sta 	esInt0,x
.1b57	a4 0c		ldy $0c				ldy 	tempShort 					; restore Y
.1b59	20 37 20	jsr $2037			jsr 	CheckRightParen 			; check right and return
.1b5c	60		rts				rts
.1b5d					PDLCode:
.1b5d	20 cd 19	jsr $19cd			jsr 	EvaluateInteger
.1b60	b5 48		lda $48,x			lda 	esInt0,x 					; copy address of string to temp0
.1b62	85 04		sta $04				sta 	temp0
.1b64	b5 50		lda $50,x			lda 	esInt1,x
.1b66	85 05		sta $05				sta 	temp0+1
.1b68	a9 00		lda #$00			lda 	#0 							; zero upper 3 bytes of result, type okay.
.1b6a	95 50		sta $50,x			sta 	esInt1,x
.1b6c	95 58		sta $58,x			sta 	esInt2,x
.1b6e	95 60		sta $60,x			sta 	esInt3,x
.1b70	84 0c		sty $0c				sty 	tempShort 					; save Y
.1b72	60		rts				rts
.1b73					Unary_Random:
.1b73	20 f4 1f	jsr $1ff4			jsr 	MInt32Random 				; generate random number.
.1b76	b1 02		lda ($02),y			lda 	(codePtr),y 				; check followed by )
.1b78	c9 c4		cmp #$c4			cmp 	#TKW_RPAREN
.1b7a	f0 08		beq $1b84			beq 	_URExit
.1b7c	e8		inx				inx 								; load range 0..r-1 into +1
.1b7d	20 cd 19	jsr $19cd			jsr 	EvaluateInteger
.1b80	ca		dex				dex
.1b81	20 25 1e	jsr $1e25			jsr 	MInt32Modulus 				; calculate random % modulus
.1b84					_URExit:
.1b84	20 37 20	jsr $2037			jsr 	CheckRightParen 			; check right and return
.1b87	60		rts				rts
.1b88					Unary_Min:
.1b88	a9 01		lda #$01			lda 	#1 							; c1 cmp c2 needs to be > e.g. c1 > c2
.1b8a	d0 02		bne $1b8e			bne 	UnaryMBody
.1b8c					Unary_Max:
.1b8c	a9 ff		lda #$ff			lda 	#$FF 						; c1 cmp c2 needs to be < e.g. c1 < c2
.1b8e					UnaryMBody:
.1b8e	48		pha				pha 								; save comparator on stack.
.1b8f	20 ae 19	jsr $19ae			jsr 	Evaluate 					; get the first thing to check
.1b92					_UnaryMLoop:
.1b92	b1 02		lda ($02),y			lda 	(codePtr),y 				; found ), indicates end.
.1b94	c8		iny				iny
.1b95	c9 c4		cmp #$c4			cmp 	#TKW_RPAREN
.1b97	f0 09		beq $1ba2			beq 	_UnaryMExit
.1b99	c9 c6		cmp #$c6			cmp 	#TKW_COMMA 					; found , indicates more.
.1b9b	f0 07		beq $1ba4			beq 	_UnaryMCompare
.1b9d	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.1b9f	20 f2 20	jsr $20f2			jsr 	ErrorHandler
.1ba2					_UnaryMExit:
.1ba2	68		pla				pla 								; throw comparator and return.
.1ba3	60		rts				rts
.1ba4					_UnaryMCompare:
.1ba4	e8		inx				inx 								; get the 2nd thing to evaluate
.1ba5	20 ae 19	jsr $19ae			jsr 	Evaluate
.1ba8	ca		dex				dex
.1ba9	20 5f 17	jsr $175f			jsr 	PerformComparison 			; this is part of evaluate/compare.asm
.1bac	85 0c		sta $0c				sta 	tempShort 					; save result
.1bae	68		pla				pla 								; get what we need
.1baf	48		pha				pha
.1bb0	c5 0c		cmp $0c				cmp 	tempShort 					; did we get it
.1bb2	d0 de		bne $1b92			bne 	_UnaryMLoop 				; no, try another value.
.1bb4	20 c4 1f	jsr $1fc4			jsr 	MInt32False 				; promote 2nd to 1st.
.1bb7	20 af 1e	jsr $1eaf			jsr 	MInt32Add
.1bba	4c 92 1b	jmp $1b92			jmp 	_UnaryMLoop
.1bbd					Unary_Page:
.1bbd	20 c4 1f	jsr $1fc4			jsr 	MInt32False 				; zero
.1bc0	ad c8 0a	lda $0ac8			lda 	basePage 					; copy base page address in.
.1bc3	95 48		sta $48,x			sta 	esInt0,x
.1bc5	ad c9 0a	lda $0ac9			lda 	basePage+1
.1bc8	95 50		sta $50,x			sta 	esInt1,x
.1bca	60		rts				rts
.1bcb					UnaryReference:
.1bcb	a9 0f		lda #$0f			lda 	#15
.1bcd	20 a5 18	jsr $18a5			jsr 	EvaluateLevel 				; evaluate term and don't deference.
.1bd0	b5 40		lda $40,x			lda 	esType,x 					; check it's a reference.
.1bd2	10 05		bpl $1bd9			bpl 	UType
.1bd4	a9 00		lda #$00			lda 	#0 							; make it an integer
.1bd6	95 40		sta $40,x			sta 	esType,x
.1bd8	60		rts				rts
.1bd9					UType:
.1bd9	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.1bdb	20 f2 20	jsr $20f2			jsr 	ErrorHandler
.1bde					UnaryHexMarker:
.1bde	4c 9f 19	jmp $199f			jmp 	EvaluateIntegerTerm
.1be1					UnaryComplement:
.1be1	20 9f 19	jsr $199f			jsr 	EvaluateIntegerTerm
.1be4	20 98 1f	jsr $1f98			jsr 	MInt32Not
.1be7	60		rts				rts
.1be8					UnaryIntToFloat:
.1be8	20 b7 19	jsr $19b7			jsr 	EvaluateNumeric
.1beb	b5 40		lda $40,x			lda 	esType,x
.1bed	d0 0b		bne $1bfa			bne 	_UIFExit
.1bef	8a		txa				txa
.1bf0	a2 1a		ldx #$1a		ldx	#26
.1bf2	20 f9 20	jsr $20f9		jsr	floatingpointHandler
.1bf5	aa		tax				tax
.1bf6	a9 01		lda #$01			lda 	#1
.1bf8	95 40		sta $40,x			sta 	esType,x
.1bfa					_UIFExit:
.1bfa	60		rts				rts
.1bfb					UnaryFloatToInt:
.1bfb	20 b7 19	jsr $19b7			jsr 	EvaluateNumeric
.1bfe	b5 40		lda $40,x			lda 	esType,x
.1c00	f0 07		beq $1c09			beq 	_UFIExit
.1c02	8a		txa				txa
.1c03	a2 12		ldx #$12		ldx	#18
.1c05	20 f9 20	jsr $20f9		jsr	floatingpointHandler
.1c08	aa		tax				tax
.1c09					_UFIExit:
.1c09	60		rts				rts
.1c0a					UnaryAlloc:
.1c0a	e8		inx				inx 								; evaluate memory required
.1c0b	20 cd 19	jsr $19cd			jsr 	EvaluateInteger
.1c0e	20 37 20	jsr $2037			jsr 	CheckRightParen
.1c11	ca		dex				dex
.1c12	b5 59		lda $59,x			lda 	esInt2+1,x 					; check at least in 64k range.
.1c14	15 61		ora $61,x			ora 	esInt3+1,x
.1c16	d0 19		bne $1c31			bne 	_UABadValue
.1c18	20 c4 1f	jsr $1fc4			jsr 	MInt32False					; zero return.
.1c1b	a5 10		lda $10				lda 	lowMemory+1 				; copy low memory in
.1c1d	95 50		sta $50,x			sta 	esInt1,x
.1c1f	a5 0f		lda $0f				lda 	lowMemory
.1c21	95 48		sta $48,x			sta 	esInt0,x
.1c23	18		clc				clc 								; add alloc required.
.1c24	75 49		adc $49,x			adc 	esInt0+1,x
.1c26	85 0f		sta $0f				sta 	lowMemory
.1c28	a5 10		lda $10				lda 	lowMemory+1
.1c2a	75 51		adc $51,x			adc 	esInt1+1,x
.1c2c	85 10		sta $10				sta 	lowMemory+1
.1c2e	b0 01		bcs $1c31			bcs		_UABadValue 				; overflow definitely bad.
.1c30	60		rts				rts
.1c31					_UABadValue:
.1c31	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.1c33	20 f2 20	jsr $20f2			jsr 	ErrorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary2.asm

.1c36					UnaryTimer:
.1c36	20 37 20	jsr $2037			jsr 	CheckRightParen
.1c39	98		tya				tya
.1c3a	48		pha				pha
.1c3b	20 eb 1f	jsr $1feb			jsr 	MInt32Zero 					; zero result
.1c3e	86 04		stx $04				stx 	temp0 						; returning in YA so can't use pshx
.1c40	a2 08		ldx #$08		ldx	#8
.1c42	20 e5 20	jsr $20e5		jsr	deviceHandler
.1c45	a6 04		ldx $04				ldx 	temp0						; restore X and update 16 bit result
.1c47	95 48		sta $48,x			sta 	esInt0,x
.1c49	98		tya				tya
.1c4a	95 50		sta $50,x			sta 	esInt1,x
.1c4c	68		pla				pla
.1c4d	a8		tay				tay
.1c4e	60		rts				rts
.1c4f					UnaryInkey:
.1c4f	20 37 20	jsr $2037			jsr 	CheckRightParen
.1c52	86 04		stx $04				stx 	temp0
.1c54	a2 02		ldx #$02		ldx	#2
.1c56	20 e5 20	jsr $20e5		jsr	deviceHandler
.1c59	a6 04		ldx $04				ldx 	temp0
.1c5b	20 d3 1f	jsr $1fd3			jsr 	MInt32Set8Bit
.1c5e	60		rts				rts
.1c5f					UnaryGet:
.1c5f	20 37 20	jsr $2037			jsr 	CheckRightParen
.1c62	86 04		stx $04				stx 	temp0
.1c64					_UGLoop:
.1c64	a2 02		ldx #$02		ldx	#2
.1c66	20 e5 20	jsr $20e5		jsr	deviceHandler
.1c69	c9 00		cmp #$00			cmp 	#0
.1c6b	f0 f7		beq $1c64			beq 	_UGLoop
.1c6d	a6 04		ldx $04				ldx 	temp0
.1c6f	20 d3 1f	jsr $1fd3			jsr 	MInt32Set8Bit
.1c72	60		rts				rts
.1c73					UnarySys:
.1c73	20 cd 19	jsr $19cd			jsr 	EvaluateInteger 				; get the address
.1c76	20 37 20	jsr $2037			jsr 	CheckRightParen
.1c79	20 26 11	jsr $1126			jsr 	TOSToTemp0 						; copy to temp0
.1c7c	8a		txa				txa
.1c7d	48		pha				pha
.1c7e	98		tya				tya
.1c7f	48		pha				pha
.1c80	ad 00 0a	lda $0a00			lda 	("A"-"A")*4+SingleLetterVar 	; load AXY
.1c83	ae 5c 0a	ldx $0a5c			ldx 	("X"-"A")*4+SingleLetterVar
.1c86	ac 60 0a	ldy $0a60			ldy 	("Y"-"A")*4+SingleLetterVar
.1c89	20 98 1c	jsr $1c98			jsr 	_CallTemp0
.1c8c	85 0c		sta $0c				sta 	tempShort 						; restore YX
.1c8e	68		pla				pla
.1c8f	a8		tay				tay
.1c90	68		pla				pla
.1c91	aa		tax				tax
.1c92	a5 0c		lda $0c				lda 	tempShort
.1c94	20 d3 1f	jsr $1fd3			jsr 	MInt32Set8Bit 					; return result.
.1c97	60		rts				rts
.1c98					_CallTemp0:
.1c98	6c 04 00	jmp ($0004)			jmp 	(temp0)

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unarystr.asm

.1c9b					ExecChr:
.1c9b	20 d5 19	jsr $19d5			jsr 	EvaluateSmallInteger		; character number
.1c9e	20 37 20	jsr $2037			jsr 	CheckRightParen				; right bracket
.1ca1	98		tya				tya
.1ca2	48		pha				pha
.1ca3	8a		txa				txa 								; A = stack
.1ca4	b4 48		ldy $48,x			ldy 	esInt0,x					; Y = character
.1ca6	a2 00		ldx #$00		ldx	#0
.1ca8	20 50 23	jsr $2350		jsr	stringHandler
.1cab	aa		tax				tax 								; X = stack
.1cac	68		pla				pla
.1cad	a8		tay				tay
.1cae	60		rts				rts
.1caf					ExecLeft:
.1caf	20 c2 19	jsr $19c2			jsr 	EvaluateString 				; string to stack,X
.1cb2	20 44 20	jsr $2044			jsr 	CheckComma
.1cb5	e8		inx				inx
.1cb6	a9 01		lda #$01			lda 	#1 							; 1 for 2nd parameter.
.1cb8	20 d3 1f	jsr $1fd3			jsr 	MInt32Set8Bit
.1cbb	e8		inx				inx
.1cbc	20 d5 19	jsr $19d5			jsr 	EvaluateSmallInteger 		; smallint 3rd parameter
.1cbf					ExecSubstring:
.1cbf	ca		dex				dex 								; fix up X
.1cc0	ca		dex				dex
.1cc1	20 37 20	jsr $2037			jsr 	CheckRightParen 			; check closing right bracket.
.1cc4	8a		txa				txa 								; do the substring and exit.
.1cc5	a2 08		ldx #$08		ldx	#8
.1cc7	20 50 23	jsr $2350		jsr	stringHandler
.1cca	aa		tax				tax
.1ccb	60		rts				rts
.1ccc					ExecMid:
.1ccc	20 c2 19	jsr $19c2			jsr 	EvaluateString 				; string to stack,X
.1ccf	20 44 20	jsr $2044			jsr 	CheckComma
.1cd2	e8		inx				inx
.1cd3	20 d5 19	jsr $19d5			jsr 	EvaluateSmallInteger 		; smallint 2nd parameter
.1cd6	c9 00		cmp #$00			cmp 	#0
.1cd8	f0 15		beq $1cef			beq 	_EMValue
.1cda	e8		inx				inx
.1cdb	a9 ff		lda #$ff			lda 	#255 						; 255 default for 3nd parameter.
.1cdd	20 d3 1f	jsr $1fd3			jsr 	MInt32Set8Bit
.1ce0	b1 02		lda ($02),y			lda 	(codePtr),y 				; is there a ) next
.1ce2	c9 c4		cmp #$c4			cmp 	#TKW_RPAREN 				; if so, just MID$(a$,2)
.1ce4	f0 d9		beq $1cbf			beq 	ExecSubString
.1ce6	20 44 20	jsr $2044			jsr 	CheckComma
.1ce9	20 d5 19	jsr $19d5			jsr 	EvaluateSmallInteger 		; smallint 2nd parameter
.1cec	4c bf 1c	jmp $1cbf			jmp 	ExecSubString
.1cef					_EMValue:
.1cef	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.1cf1	20 f2 20	jsr $20f2			jsr 	ErrorHandler
.1cf4					ExecRight:
.1cf4	20 c2 19	jsr $19c2			jsr 	EvaluateString 				; string to stack,X
.1cf7	20 44 20	jsr $2044			jsr 	CheckComma
.1cfa	e8		inx				inx
.1cfb	20 d5 19	jsr $19d5			jsr 	EvaluateSmallInteger 		; smallint 2nd parameter.
.1cfe	ca		dex				dex
.1cff	98		tya				tya
.1d00	48		pha				pha
.1d01	b5 48		lda $48,x			lda 	esInt0,x 					; copy address of string to temp0
.1d03	85 04		sta $04				sta 	temp0
.1d05	b5 50		lda $50,x			lda 	esInt1,x
.1d07	85 05		sta $05				sta 	temp0+1
.1d09	a0 00		ldy #$00			ldy 	#0 							; point to length
.1d0b	b1 04		lda ($04),y			lda 	(temp0),y 					; get the length.
.1d0d	18		clc				clc 								; add 1.
.1d0e	69 01		adc #$01			adc 	#1
.1d10	38		sec				sec
.1d11	f5 49		sbc $49,x			sbc 	esInt0+1,x  				; subtract right count.
.1d13	f0 02		beq $1d17			beq		_ERMake1 					; if zero, make it 1.
.1d15	b0 02		bcs $1d19			bcs		_EROkay
.1d17					_ERMake1:
.1d17	a9 01		lda #$01			lda 	#1 							; start position.
.1d19					_EROkay:
.1d19	e8		inx				inx 								; set start pos.
.1d1a	95 48		sta $48,x			sta 	esInt0,x
.1d1c	e8		inx				inx
.1d1d	a9 ff		lda #$ff			lda 	#255 						; 255 default for 3nd parameter.
.1d1f	20 d3 1f	jsr $1fd3			jsr 	MInt32Set8Bit
.1d22	68		pla				pla
.1d23	a8		tay				tay
.1d24	4c bf 1c	jmp $1cbf			jmp 	ExecSubString 				; do the substring code.

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32binary.asm

.1d27					MInt32And:
.1d27	b5 48		lda $48,x			lda 	esInt0,x
.1d29	35 49		and $49,x			and 	esInt0+1,x
.1d2b	95 48		sta $48,x			sta 	esInt0,x
.1d2d	b5 50		lda $50,x			lda 	esInt1,x
.1d2f	35 51		and $51,x			and 	esInt1+1,x
.1d31	95 50		sta $50,x			sta 	esInt1,x
.1d33	b5 58		lda $58,x			lda 	esInt2,x
.1d35	35 59		and $59,x			and 	esInt2+1,x
.1d37	95 58		sta $58,x			sta 	esInt2,x
.1d39	b5 60		lda $60,x			lda 	esInt3,x
.1d3b	35 61		and $61,x			and 	esInt3+1,x
.1d3d	95 60		sta $60,x			sta 	esInt3,x
.1d3f	60		rts				rts
.1d40					MInt32Or:
.1d40	b5 48		lda $48,x			lda 	esInt0,x
.1d42	15 49		ora $49,x			ora 	esInt0+1,x
.1d44	95 48		sta $48,x			sta 	esInt0,x
.1d46	b5 50		lda $50,x			lda 	esInt1,x
.1d48	15 51		ora $51,x			ora 	esInt1+1,x
.1d4a	95 50		sta $50,x			sta 	esInt1,x
.1d4c	b5 58		lda $58,x			lda 	esInt2,x
.1d4e	15 59		ora $59,x			ora 	esInt2+1,x
.1d50	95 58		sta $58,x			sta 	esInt2,x
.1d52	b5 60		lda $60,x			lda 	esInt3,x
.1d54	15 61		ora $61,x			ora 	esInt3+1,x
.1d56	95 60		sta $60,x			sta 	esInt3,x
.1d58	60		rts				rts
.1d59					MInt32Xor:
.1d59	b5 48		lda $48,x			lda 	esInt0,x
.1d5b	55 49		eor $49,x			eor 	esInt0+1,x
.1d5d	95 48		sta $48,x			sta 	esInt0,x
.1d5f	b5 50		lda $50,x			lda 	esInt1,x
.1d61	55 51		eor $51,x			eor 	esInt1+1,x
.1d63	95 50		sta $50,x			sta 	esInt1,x
.1d65	b5 58		lda $58,x			lda 	esInt2,x
.1d67	55 59		eor $59,x			eor 	esInt2+1,x
.1d69	95 58		sta $58,x			sta 	esInt2,x
.1d6b	b5 60		lda $60,x			lda 	esInt3,x
.1d6d	55 61		eor $61,x			eor 	esInt3+1,x
.1d6f	95 60		sta $60,x			sta 	esInt3,x
.1d71	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32compare.asm

.1d72					MInt32Compare:
.1d72	b5 48		lda $48,x			lda 	esInt0,x 					; equality check.
.1d74	d5 49		cmp $49,x			cmp 	esInt0+1,x
.1d76	d0 13		bne $1d8b			bne 	MInt32Compare2
.1d78	b5 50		lda $50,x			lda 	esInt1,x
.1d7a	d5 51		cmp $51,x			cmp 	esInt1+1,x
.1d7c	d0 0d		bne $1d8b			bne 	MInt32Compare2
.1d7e	b5 58		lda $58,x			lda 	esInt2,x
.1d80	d5 59		cmp $59,x			cmp 	esInt2+1,x
.1d82	d0 07		bne $1d8b			bne 	MInt32Compare2
.1d84	b5 60		lda $60,x			lda 	esInt3,x
.1d86	55 61		eor $61,x			eor 	esInt3+1,x 					; will return 0 if the same.
.1d88	d0 01		bne $1d8b			bne 	MInt32Compare2
.1d8a	60		rts				rts
.1d8b					MInt32Compare2:
.1d8b	b5 48		lda $48,x			lda		esInt0,x 					; unsigned 32 bit comparison.
.1d8d	d5 49		cmp $49,x			cmp 	esInt0+1,x
.1d8f	b5 50		lda $50,x			lda		esInt1,x
.1d91	f5 51		sbc $51,x			sbc 	esInt1+1,x
.1d93	b5 58		lda $58,x			lda		esInt2,x
.1d95	f5 59		sbc $59,x			sbc 	esInt2+1,x
.1d97	b5 60		lda $60,x			lda		esInt3,x
.1d99	f5 61		sbc $61,x			sbc 	esInt3+1,x
.1d9b	50 02		bvc $1d9f			bvc 	_I32LNoOverflow 			; make it signed 32 bi comparison
.1d9d	49 80		eor #$80			eor 	#$80
.1d9f					_I32LNoOverflow
.1d9f	30 03		bmi $1da4			bmi 	MInt32CLess					; if -ve then return $FF
.1da1	a9 01		lda #$01			lda 	#$01						; else return $01
.1da3	60		rts				rts
.1da4					MInt32CLess:
.1da4	a9 ff		lda #$ff			lda 	#$FF
.1da6	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32divide.asm

.1da7					MInt32SDivide:
.1da7	98		tya				tya  								; save Y, which is the count of negations
.1da8	48		pha				pha
.1da9	a0 00		ldy #$00			ldy 	#0 							; zero count
.1dab	20 c3 1d	jsr $1dc3			jsr 	_MInt32SRemSign 			; unsign TOS
.1dae	e8		inx				inx 								; unsign TOS+1
.1daf	20 c3 1d	jsr $1dc3			jsr 	_MInt32SRemSign
.1db2	ca		dex				dex
.1db3	98		tya				tya 								; save sign count on stack
.1db4	48		pha				pha
.1db5	20 cc 1d	jsr $1dcc			jsr 	MInt32UDivide 				; unsigned division
.1db8	68		pla				pla 								; get sign count back
.1db9	29 01		and #$01			and 	#1 							; if it is odd, then negate result
.1dbb	f0 03		beq $1dc0			beq 	_I32SNoNeg
.1dbd	20 7e 1f	jsr $1f7e			jsr 	MInt32Negate
.1dc0					_I32SNoNeg:
.1dc0	68		pla				pla 								; restoe Y and exit
.1dc1	a8		tay				tay
.1dc2	60		rts				rts
.1dc3					_MInt32SRemSign:
.1dc3	b5 60		lda $60,x			lda 	esInt3,x 					; is it -ve
.1dc5	10 04		bpl $1dcb			bpl 	_MInt32SRSExit
.1dc7	c8		iny				iny 								; increment the sign count
.1dc8	20 7e 1f	jsr $1f7e			jsr 	MInt32Negate 				; negate the value.
.1dcb					_MInt32SRSExit:
.1dcb	60		rts				rts
.1dcc					MInt32UDivide:
.1dcc	b5 49		lda $49,x			lda 	esInt0+1,x 					; check for division by zero
.1dce	15 51		ora $51,x			ora 	esInt1+1,x
.1dd0	15 52		ora $52,x			ora 	esInt1+2,x
.1dd2	15 53		ora $53,x			ora 	esInt1+3,x
.1dd4	f0 4a		beq $1e20			beq 	_MInt32DZero
.1dd6	e8		inx				inx 								; clear A
.1dd7	e8		inx				inx
.1dd8	20 c4 1f	jsr $1fc4			jsr 	MInt32False
.1ddb	ca		dex				dex
.1ddc	ca		dex				dex
.1ddd	98		tya				tya 								; save Y on the stack
.1dde	48		pha				pha
.1ddf	a0 20		ldy #$20			ldy 	#32 						; number of division passes
.1de1					_MInt32UDLoop:
.1de1	16 48		asl $48,x			asl 	esInt0,x					; shift QA left. First Q
.1de3	36 50		rol $50,x			rol 	esInt1,x
.1de5	36 58		rol $58,x			rol 	esInt2,x
.1de7	36 60		rol $60,x			rol 	esInt3,x
.1de9	36 4a		rol $4a,x			rol 	esInt0+2,x 					; then A.
.1deb	36 52		rol $52,x			rol 	esInt1+2,x
.1ded	36 5a		rol $5a,x			rol 	esInt2+2,x
.1def	36 62		rol $62,x			rol 	esInt3+2,x
.1df1	38		sec				sec 								; calculate A-M saving result on the stack
.1df2	b5 4a		lda $4a,x			lda 	esInt0+2,x
.1df4	f5 49		sbc $49,x			sbc 	esInt0+1,x
.1df6	48		pha				pha
.1df7	b5 52		lda $52,x			lda 	esInt1+2,x
.1df9	f5 51		sbc $51,x			sbc 	esInt1+1,x
.1dfb	48		pha				pha
.1dfc	b5 5a		lda $5a,x			lda 	esInt2+2,x
.1dfe	f5 59		sbc $59,x			sbc 	esInt2+1,x
.1e00	48		pha				pha
.1e01	b5 62		lda $62,x			lda 	esInt3+2,x
.1e03	f5 61		sbc $61,x			sbc 	esInt3+1,x
.1e05	90 10		bcc $1e17			bcc		_MInt32NoSubtract 			; if A < M (e.g. carry clear) then reject this.
.1e07	95 62		sta $62,x			sta 	esInt3+2,x 					; write result back to A
.1e09	68		pla				pla
.1e0a	95 5a		sta $5a,x			sta 	esInt2+2,x
.1e0c	68		pla				pla
.1e0d	95 52		sta $52,x			sta 	esInt1+2,x
.1e0f	68		pla				pla
.1e10	95 4a		sta $4a,x			sta 	esInt0+2,x
.1e12	f6 48		inc $48,x			inc 	esInt0,x 					; sets bit 0 of Q - it was shifted left previously.
.1e14	4c 1a 1e	jmp $1e1a			jmp 	_MInt32Next 					; do the next iteration
.1e17					_MInt32NoSubtract:
.1e17	68		pla				pla
.1e18	68		pla				pla
.1e19	68		pla				pla
.1e1a					_MInt32Next:
.1e1a	88		dey				dey 								; do this 32 times.
.1e1b	d0 c4		bne $1de1			bne 	_MInt32UDLoop
.1e1d	68		pla				pla 								; restore Y and exit
.1e1e	a8		tay				tay
.1e1f	60		rts				rts
.1e20					_MInt32DZero:
.1e20	a2 05		ldx #$05			ldx 	#ErrorID_DivZero
.1e22	20 f2 20	jsr $20f2			jsr 	ErrorHandler
.1e25					MInt32Modulus:
.1e25	20 cc 1d	jsr $1dcc			jsr 	MInt32UDivide 				; do the division.
.1e28	b5 62		lda $62,x			lda 	esInt3+2,x 					; copy 2nd on stack (the remainder) to the top.
.1e2a	95 60		sta $60,x			sta 	esInt3,x
.1e2c	b5 5a		lda $5a,x			lda 	esInt2+2,x
.1e2e	95 58		sta $58,x			sta 	esInt2,x
.1e30	b5 52		lda $52,x			lda 	esInt1+2,x
.1e32	95 50		sta $50,x			sta 	esInt1,x
.1e34	b5 4a		lda $4a,x			lda 	esInt0+2,x
.1e36	95 48		sta $48,x			sta 	esInt0,x
.1e38	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32fromstr.asm

.0af6					fs32Length:
>0af6							.fill 	1
.1e39					MInt32FromString:
.1e39	85 0c		sta $0c				sta 	tempShort 					; save base
.1e3b	98		tya				tya
.1e3c	48		pha				pha
.1e3d	a0 00		ldy #$00			ldy 	#0 							; get length
.1e3f	b1 04		lda ($04),y			lda 	(temp0),y
.1e41	8d f6 0a	sta $0af6			sta 	fs32Length
.1e44	f0 65		beq $1eab			beq 	_I32FSFail2					; fail if length zero.
.1e46	a0 01		ldy #$01			ldy 	#1 							; set index into string being read
.1e48	b1 04		lda ($04),y			lda 	(temp0),y 					; look at first character
.1e4a	c9 2d		cmp #$2d			cmp 	#"-"						; is it a - character
.1e4c	d0 09		bne $1e57			bne 	_I32FSNotNegative
.1e4e	ad f6 0a	lda $0af6			lda 	fs32Length 					; get length back.
.1e51	c9 01		cmp #$01			cmp 	#1 							; if 1 it is just a '-; so fail.'
.1e53	f0 56		beq $1eab			beq 	_I32FSFail2
.1e55	a0 02		ldy #$02			ldy 	#2 							; first digit of the number.
.1e57					_I32FSNotNegative:
.1e57	a5 0c		lda $0c				lda 	tempShort 					; get the base back.
.1e59	c0 02		cpy #$02			cpy 	#2 							; if we read a -ve (e.g. Y == 2)
.1e5b	d0 02		bne $1e5f			bne 	_I32FSNN2
.1e5d	09 80		ora #$80			ora 	#$80						; set bit 7, this indicates a negated result.
.1e5f					_I32FSNN2:
.1e5f	48		pha				pha 								; save base + final sign on stack.
.1e60	20 c4 1f	jsr $1fc4			jsr 	MInt32False 				; zero the return value.
.1e63					_I32FSMainLoop:
.1e63	68		pla				pla 								; get the base back into tempshort
.1e64	48		pha				pha
.1e65	29 7f		and #$7f			and 	#$7F
.1e67	85 0c		sta $0c				sta 	tempShort
.1e69	b1 04		lda ($04),y			lda 	(temp0),y 					; look at next character.
.1e6b	c9 61		cmp #$61			cmp 	#"a" 						; fix up case.
.1e6d	90 02		bcc $1e71			bcc 	_I32FSNotLC
.1e6f	e9 20		sbc #$20			sbc 	#32
.1e71					_I32FSNotLC:
.1e71	38		sec				sec 								; subtract 48 (ASCII "0")
.1e72	e9 30		sbc #$30			sbc 	#"0"
.1e74	90 34		bcc $1eaa			bcc 	_I32FSFail 					; nothing more to do.
.1e76	c9 0a		cmp #$0a			cmp 	#9+1 						; if it is 0-9 validate vs base.
.1e78	90 06		bcc $1e80			bcc 	_I32FSValidate
.1e7a	c9 11		cmp #$11			cmp 	#17 						; is it between 58 and 64 ? if so bad.
.1e7c	90 2c		bcc $1eaa			bcc 	_I32FSFail
.1e7e	e9 07		sbc #$07			sbc 	#7 							; adjust into range so now character is 0->nnn
.1e80					_I32FSValidate:
.1e80	c5 0c		cmp $0c				cmp 	tempShort 					; compare against the base.
.1e82	b0 26		bcs $1eaa			bcs 	_I32FSFail 					; sorry, too large for this base.
.1e84	48		pha				pha 								; save the new digit value.
.1e85	e8		inx				inx 								; put base into next slot.
.1e86	a5 0c		lda $0c				lda 	tempShort
.1e88	20 d3 1f	jsr $1fd3			jsr 	MInt32Set8Bit
.1e8b	ca		dex				dex
.1e8c	20 e3 1e	jsr $1ee3			jsr 	MInt32Multiply 				; multiply current by the base
.1e8f	e8		inx				inx
.1e90	68		pla				pla  								; put additive into next slot
.1e91	20 d3 1f	jsr $1fd3			jsr 	MInt32Set8Bit
.1e94	ca		dex				dex
.1e95	20 af 1e	jsr $1eaf			jsr 	MInt32Add 					; and add it
.1e98	c8		iny				iny 								; look at next character
.1e99	cc f6 0a	cpy $0af6			cpy 	fs32Length 					; until > length.
.1e9c	f0 c5		beq $1e63			beq 	_I32FSMainLoop
.1e9e	90 c3		bcc $1e63			bcc 	_I32FSMainLoop
.1ea0					_I32FSDone:
.1ea0	68		pla				pla 								; get base/final sign back
.1ea1	10 03		bpl $1ea6			bpl 	_I32FSNN3
.1ea3	20 7e 1f	jsr $1f7e			jsr 	MInt32Negate 				; negate the result.
.1ea6					_I32FSNN3:
.1ea6	68		pla				pla
.1ea7	a8		tay				tay
.1ea8	38		sec				sec
.1ea9	60		rts				rts
.1eaa					_I32FSFail:
.1eaa	68		pla				pla
.1eab					_I32FSFail2:
.1eab	68		pla				pla
.1eac	a8		tay				tay
.1ead	18		clc				clc
.1eae	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32math.asm

.1eaf					MInt32Add:
.1eaf	18		clc				clc
.1eb0	b5 48		lda $48,x			lda 	esInt0,x
.1eb2	75 49		adc $49,x			adc 	esInt0+1,x
.1eb4	95 48		sta $48,x			sta 	esInt0,x
.1eb6	b5 50		lda $50,x			lda 	esInt1,x
.1eb8	75 51		adc $51,x			adc 	esInt1+1,x
.1eba	95 50		sta $50,x			sta 	esInt1,x
.1ebc	b5 58		lda $58,x			lda 	esInt2,x
.1ebe	75 59		adc $59,x			adc 	esInt2+1,x
.1ec0	95 58		sta $58,x			sta 	esInt2,x
.1ec2	b5 60		lda $60,x			lda 	esInt3,x
.1ec4	75 61		adc $61,x			adc 	esInt3+1,x
.1ec6	95 60		sta $60,x			sta 	esInt3,x
.1ec8	60		rts				rts
.1ec9					MInt32Sub:
.1ec9	38		sec				sec
.1eca	b5 48		lda $48,x			lda 	esInt0,x
.1ecc	f5 49		sbc $49,x			sbc 	esInt0+1,x
.1ece	95 48		sta $48,x			sta 	esInt0,x
.1ed0	b5 50		lda $50,x			lda 	esInt1,x
.1ed2	f5 51		sbc $51,x			sbc 	esInt1+1,x
.1ed4	95 50		sta $50,x			sta 	esInt1,x
.1ed6	b5 58		lda $58,x			lda 	esInt2,x
.1ed8	f5 59		sbc $59,x			sbc 	esInt2+1,x
.1eda	95 58		sta $58,x			sta 	esInt2,x
.1edc	b5 60		lda $60,x			lda 	esInt3,x
.1ede	f5 61		sbc $61,x			sbc 	esInt3+1,x
.1ee0	95 60		sta $60,x			sta 	esInt3,x
.1ee2	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32multiply.asm

.1ee3					MInt32Multiply:
.1ee3	e8		inx				inx 								; copy 2nd -> 3rd
.1ee4	20 09 1f	jsr $1f09			jsr 	MInt32CopyUp
.1ee7	ca		dex				dex
.1ee8	20 09 1f	jsr $1f09			jsr 	MInt32CopyUp 				; copy 1st -> 2nd
.1eeb	20 c4 1f	jsr $1fc4			jsr 	MInt32False 					; zero 1st.
.1eee					_I32Loop:
.1eee	b5 4a		lda $4a,x			lda 	esInt0+2,x 					; get low bit of 3rd
.1ef0	29 01		and #$01			and 	#1
.1ef2	f0 03		beq $1ef7			beq 	_I32NoAdd 					; if set
.1ef4	20 af 1e	jsr $1eaf			jsr 	MInt32Add 					; add 2nd to 1st.
.1ef7					_I32NoAdd:
.1ef7	e8		inx				inx 								; shift 2nd left
.1ef8	20 d9 1f	jsr $1fd9			jsr 	MInt32ShiftLeft
.1efb	e8		inx				inx  								; shift 3rd right
.1efc	20 e2 1f	jsr $1fe2			jsr 	MInt32ShiftRight
.1eff	20 eb 1f	jsr $1feb			jsr 	MInt32Zero 					; check if zero.
.1f02	08		php				php 								; save status bits
.1f03	ca		dex				dex 	 							; point back to 1st
.1f04	ca		dex				dex
.1f05	28		plp				plp 								; get status bits
.1f06	d0 e6		bne $1eee			bne 	_I32Loop 					; if non-zero keep going.
.1f08	60		rts				rts
.1f09					MInt32CopyUp:
.1f09	b5 48		lda $48,x			lda 	esInt0,x
.1f0b	95 49		sta $49,x			sta 	esInt0+1,x
.1f0d	b5 50		lda $50,x			lda 	esInt1,x
.1f0f	95 51		sta $51,x			sta 	esInt1+1,x
.1f11	b5 58		lda $58,x			lda 	esInt2,x
.1f13	95 59		sta $59,x			sta 	esInt2+1,x
.1f15	b5 60		lda $60,x			lda 	esInt3,x
.1f17	95 61		sta $61,x			sta 	esInt3+1,x
.1f19	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32tostr.asm

>0af7					MCharCount:	.fill 	1						; count of converted characters
.1f1a					MInt32ToString:
.1f1a	48		pha				pha 								; save base
.1f1b	85 0c		sta $0c				sta 	tempShort 					; save target base.
.1f1d	a9 00		lda #$00			lda 	#0
.1f1f	8d f7 0a	sta $0af7			sta 	MCharCount 					; clear character count to 0
.1f22	98		tya				tya
.1f23	48		pha				pha
.1f24	a5 0c		lda $0c				lda 	tempShort 					; check if we are signed conversion
.1f26	10 10		bpl $1f38			bpl 	_I32TSUnsigned
.1f28	48		pha				pha 								; save base on stack.
.1f29	b5 60		lda $60,x			lda 	esInt3,x 					; is it actually negative
.1f2b	10 08		bpl $1f35			bpl 	_I32TSNoFlip
.1f2d	a9 2d		lda #$2d			lda 	#"-" 						; write a '-' prefix out.
.1f2f	20 6b 1f	jsr $1f6b			jsr 	MI32WriteCharacter
.1f32	20 7e 1f	jsr $1f7e			jsr 	MInt32Negate 				; negate the value.
.1f35					_I32TSNoFlip:
.1f35	68		pla				pla 								; get the base back
.1f36	29 7f		and #$7f			and 	#$7F 						; clear the sign flag so it's just a base now.
.1f38					_I32TSUnsigned:
.1f38	20 46 1f	jsr $1f46			jsr 	MI32DivideWrite 			; recursive code to output string.
.1f3b	a0 00		ldy #$00			ldy 	#0 							; write charcount to first character.
.1f3d	ad f7 0a	lda $0af7			lda 	MCharCount
.1f40	91 04		sta ($04),y			sta 	(temp0),y
.1f42	68		pla				pla
.1f43	a8		tay				tay
.1f44	68		pla				pla
.1f45	60		rts				rts
.1f46					MI32DivideWrite:
.1f46	48		pha				pha 								; save the divisor/base
.1f47	e8		inx				inx 								; write in the dividing position.
.1f48	20 d3 1f	jsr $1fd3			jsr 	MInt32Set8Bit
.1f4b	ca		dex				dex
.1f4c	20 cc 1d	jsr $1dcc			jsr 	MInt32UDivide 				; divide number by base.
.1f4f	68		pla				pla 								; get the base into Y
.1f50	a8		tay				tay
.1f51	b5 4a		lda $4a,x			lda 	esInt0+2,x 					; get the remainder and push on the stack.
.1f53	48		pha				pha
.1f54	20 eb 1f	jsr $1feb			jsr 	MInt32Zero 					; is the result zero ?
.1f57	f0 04		beq $1f5d			beq 	_I32NoRecurse 				; if so, don't recurse.
.1f59	98		tya				tya 								; put base into A
.1f5a	20 46 1f	jsr $1f46			jsr 	MI32DivideWrite 				; and jsr the dividor recursively.
.1f5d					_I32NoRecurse:
.1f5d	68		pla				pla 								; get the remainder back
.1f5e	c9 0a		cmp #$0a			cmp 	#10  						; handle hexadecimals.
.1f60	90 02		bcc $1f64			bcc 	_I32NotHex
.1f62	69 06		adc #$06			adc 	#7-1
.1f64					_I32NotHex:
.1f64	18		clc				clc 								; make it ASCII
.1f65	69 30		adc #$30			adc 	#48
.1f67	20 6b 1f	jsr $1f6b			jsr 	MI32WriteCharacter 			; write the character out
.1f6a	60		rts				rts 								; and exit.
.1f6b					MI32WriteCharacter:
.1f6b	ee f7 0a	inc $0af7			inc 	MCharCount 					; bump count (space for leading count)
.1f6e	ac f7 0a	ldy $0af7			ldy 	MCharCount 					; get position
.1f71	91 04		sta ($04),y			sta 	(temp0),y 					; write out with trailing 0
.1f73	c8		iny				iny
.1f74	a9 00		lda #$00			lda 	#0
.1f76	91 04		sta ($04),y			sta 	(temp0),y
.1f78	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32unary.asm

>0af8					MSeed32:	.fill 	4							; random number seed.
.1f79					MInt32Absolute:
.1f79	b5 60		lda $60,x			lda 	esInt3,x 					; use negate code if -ve.
.1f7b	30 01		bmi $1f7e			bmi 	MInt32Negate
.1f7d	60		rts				rts
.1f7e					MInt32Negate:
.1f7e	38		sec				sec
.1f7f	a9 00		lda #$00			lda 	#0
.1f81	f5 48		sbc $48,x			sbc 	esInt0,x
.1f83	95 48		sta $48,x			sta 	esInt0,x
.1f85	a9 00		lda #$00			lda 	#0
.1f87	f5 50		sbc $50,x			sbc 	esInt1,x
.1f89	95 50		sta $50,x			sta 	esInt1,x
.1f8b	a9 00		lda #$00			lda 	#0
.1f8d	f5 58		sbc $58,x			sbc 	esInt2,x
.1f8f	95 58		sta $58,x			sta 	esInt2,x
.1f91	a9 00		lda #$00			lda 	#0
.1f93	f5 60		sbc $60,x			sbc 	esInt3,x
.1f95	95 60		sta $60,x			sta 	esInt3,x
.1f97	60		rts				rts
.1f98					MInt32Not:
.1f98	b5 48		lda $48,x			lda 	esInt0,x
.1f9a	49 ff		eor #$ff			eor 	#$FF
.1f9c	95 48		sta $48,x			sta 	esInt0,x
.1f9e	b5 50		lda $50,x			lda 	esInt1,x
.1fa0	49 ff		eor #$ff			eor 	#$FF
.1fa2	95 50		sta $50,x			sta 	esInt1,x
.1fa4	b5 58		lda $58,x			lda 	esInt2,x
.1fa6	49 ff		eor #$ff			eor 	#$FF
.1fa8	95 58		sta $58,x			sta 	esInt2,x
.1faa	b5 60		lda $60,x			lda 	esInt3,x
.1fac	49 ff		eor #$ff			eor 	#$FF
.1fae	95 60		sta $60,x			sta 	esInt3,x
.1fb0	60		rts				rts
.1fb1					MInt32Sign:
.1fb1	b5 60		lda $60,x			lda 	esInt3,x					; look at MSB
.1fb3	30 0b		bmi $1fc0			bmi 	MInt32True 					; if set return -1 (true)
.1fb5	20 eb 1f	jsr $1feb			jsr 	MInt32Zero 					; is it zero ?
.1fb8	f0 0a		beq $1fc4			beq 	MInt32False 					; if zero return 0 (false)
.1fba	20 c4 1f	jsr $1fc4			jsr 	MInt32False 					; > 0 return 1
.1fbd	f6 48		inc $48,x			inc 	esInt0,x
.1fbf	60		rts				rts
.1fc0					MInt32True:
.1fc0	a9 ff		lda #$ff			lda 	#$FF 						; set to $FFFFFFFF
.1fc2	d0 02		bne $1fc6			bne 	MInt32WriteAll
.1fc4					MInt32False:
.1fc4	a9 00		lda #$00			lda 	#0
.1fc6					MInt32WriteAll:
.1fc6	95 48		sta $48,x			sta 	esInt0,x
.1fc8					MInt32Write123:
.1fc8	95 50		sta $50,x			sta 	esInt1,x
.1fca	95 58		sta $58,x			sta 	esInt2,x
.1fcc	95 60		sta $60,x			sta 	esInt3,x
.1fce	a9 00		lda #$00			lda 	#$00						; and make it an integer
.1fd0	95 40		sta $40,x			sta 	esType,x
.1fd2	60		rts				rts
.1fd3					MInt32Set8Bit:
.1fd3	95 48		sta $48,x			sta 	esInt0,x
.1fd5	a9 00		lda #$00			lda 	#0
.1fd7	f0 ef		beq $1fc8			beq		MInt32Write123
.1fd9					MInt32ShiftLeft:
.1fd9	16 48		asl $48,x			asl 	esInt0,x
.1fdb	36 50		rol $50,x			rol	 	esInt1,x
.1fdd	36 58		rol $58,x			rol	 	esInt2,x
.1fdf	36 60		rol $60,x			rol	 	esInt3,x
.1fe1	60		rts				rts
.1fe2					MInt32ShiftRight:
.1fe2	56 60		lsr $60,x			lsr 	esInt3,x
.1fe4	76 58		ror $58,x			ror 	esInt2,x
.1fe6	76 50		ror $50,x			ror 	esInt1,x
.1fe8	76 48		ror $48,x			ror 	esInt0,x
.1fea	60		rts				rts
.1feb					MInt32Zero:
.1feb	b5 48		lda $48,x			lda 	esInt0,x
.1fed	15 50		ora $50,x			ora 	esInt1,x
.1fef	15 58		ora $58,x			ora 	esInt2,x
.1ff1	15 60		ora $60,x			ora 	esInt3,x
.1ff3	60		rts				rts
.1ff4					MInt32Random:
.1ff4	98		tya				tya
.1ff5	48		pha				pha
.1ff6	a0 07		ldy #$07			ldy 	#7
.1ff8	ad f8 0a	lda $0af8			lda 	MSeed32+0
.1ffb	d0 03		bne $2000			bne 	_Random1
.1ffd	a8		tay				tay
.1ffe	a9 aa		lda #$aa			lda		#$AA
.2000					_Random1:
.2000	0a		asl a				asl 	a
.2001	2e f9 0a	rol $0af9			rol 	MSeed32+1
.2004	2e fa 0a	rol $0afa			rol 	MSeed32+2
.2007	2e fb 0a	rol $0afb			rol 	MSeed32+3
.200a	90 02		bcc $200e			bcc 	_Random2
.200c	49 c5		eor #$c5			eor 	#$C5
.200e					_Random2:
.200e	88		dey				dey
.200f	d0 ef		bne $2000			bne 	_Random1
.2011	8d f8 0a	sta $0af8			sta 	MSeed32+0
.2014	95 48		sta $48,x			sta 	esInt0,x
.2016	ad f9 0a	lda $0af9			lda 	MSeed32+1
.2019	95 50		sta $50,x			sta 	esInt1,x
.201b	ad fa 0a	lda $0afa			lda 	MSeed32+2
.201e	95 58		sta $58,x			sta 	esInt2,x
.2020	ad fb 0a	lda $0afb			lda 	MSeed32+3
.2023	95 60		sta $60,x			sta 	esInt3,x
.2025	68		pla				pla
.2026	a8		tay				tay
.2027	a9 00		lda #$00			lda 	#0
.2029	95 40		sta $40,x			sta 	esType,x
.202b	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/utility/check.asm

.202c					CheckToken:
.202c	d1 02		cmp ($02),y			cmp 	(codePtr),y
.202e	d0 02		bne $2032			bne 	_CTError
.2030	c8		iny				iny
.2031	60		rts				rts
.2032					_CTError:
.2032	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.2034	20 f2 20	jsr $20f2			jsr 	ErrorHandler
.2037					CheckRightParen:
.2037	b1 02		lda ($02),y			lda 	(codePtr),y
.2039	c8		iny				iny
.203a	c9 c4		cmp #$c4			cmp 	#TKW_RPAREN
.203c	d0 01		bne $203f			bne 	_CRPError
.203e	60		rts				rts
.203f					_CRPError:
.203f	a2 09		ldx #$09			ldx 	#ErrorID_MissingRP
.2041	20 f2 20	jsr $20f2			jsr 	ErrorHandler
.2044					CheckComma:
.2044	b1 02		lda ($02),y			lda 	(codePtr),y
.2046	c8		iny				iny
.2047	c9 c6		cmp #$c6			cmp 	#TKW_COMMA
.2049	d0 01		bne $204c			bne 	_CCError
.204b	60		rts				rts
.204c					_CCError:
.204c	a2 0a		ldx #$0a			ldx 	#ErrorID_MissingComma
.204e	20 f2 20	jsr $20f2			jsr 	ErrorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/utility/scanner.asm

.263d					ScanForward:
.263d	85 06		sta $06				sta 	temp1 						; save tokens to search in temp1/temp1+1
.263f	86 07		stx $07				stx 	temp1+1
.2641	a9 00		lda #$00			lda 	#0 							; temp2 counts structure levels.
.2643	85 08		sta $08				sta 	temp2
.2645	b1 02		lda ($02),y	_SFLoop:lda 	(codePtr),y 				; look at the next token.
.2647	c8		iny				iny
.2648	a6 08		ldx $08				ldx 	temp2 						; check structure levels are zero.
.264a	d0 08		bne $2654			bne 	_SFNoCheck 					; if so, check token against entered values.
.264c	c5 06		cmp $06				cmp 	temp1
.264e	f0 24		beq $2674			beq 	_SFExit
.2650	c5 07		cmp $07				cmp 	temp1+1
.2652	f0 20		beq $2674			beq 	_SFExit
.2654					_SFNoCheck:
.2654	c9 80		cmp #$80			cmp 	#$80 						; if it is 00-7F (variable/number) just skip it.
.2656	90 ed		bcc $2645			bcc 	_SFLoop
.2658	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; $80-$85 is various specials.
.265a	90 19		bcc $2675			bcc 	_SFSpecials
.265c	c9 99		cmp #$99			cmp 	#TOK_STRUCTST 				; if < structure start then continue
.265e	90 e5		bcc $2645			bcc 	_SFLoop
.2660	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST 				; if >= unary start (after structure) then continue.
.2662	b0 e1		bcs $2645			bcs 	_SFLoop
.2664	aa		tax				tax  								; token in X, and look up the adjuster.
.2665	bd b5 19	lda $19b5,x			lda 	ELBinaryOperatorInfo-TOK_BINARYST,x
.2668	38		sec				sec 								; convert to an offset
.2669	e9 81		sbc #$81			sbc 	#$81
.266b	18		clc				clc 								; add to depth
.266c	65 08		adc $08				adc 	temp2
.266e	85 08		sta $08				sta 	temp2
.2670	10 d3		bpl $2645			bpl 	_SFLoop 					; +ve okay to continue
.2672	30 2a		bmi $269e			bmi 	_SFError 					; if gone -ve then we have a nesting error
.2674	60		rts		_SFExit:rts
.2675					_SFSpecials:
.2675	c9 80		cmp #$80			cmp 	#TOK_EOL 					; $80, advance to next line.
.2677	f0 14		beq $268d			beq 	_SFNextLine
.2679	c9 84		cmp #$84			cmp 	#TOK_FPC					; $84, skip embedded float
.267b	f0 26		beq $26a3			beq 	_SFFloatSkip
.267d	c9 85		cmp #$85			cmp 	#TOK_STR 					; $85, skip string
.267f	f0 04		beq $2685			beq 	_SFSkipString
.2681	c8		iny				iny									; $81,$82,$83 shift, so just advance over the shifted
.2682	4c 45 26	jmp $2645			jmp 	_SFLoop 					; token.
.2685					_SFSkipString:
.2685	98		tya				tya
.2686	38		sec				sec
.2687	71 02		adc ($02),y			adc 	(codePtr),y
.2689	a8		tay				tay
.268a	4c 45 26	jmp $2645			jmp 	_SFLoop
.268d					_SFNextLine:
.268d	a0 00		ldy #$00			ldy 	#0 							; get offset
.268f	b1 02		lda ($02),y			lda 	(codePtr),y
.2691	18		clc				clc 								; add to code pointer.
.2692	65 02		adc $02				adc 	codePtr
.2694	85 02		sta $02				sta 	codePtr
.2696	90 02		bcc $269a			bcc		_SFNLNoCarry
.2698	e6 03		inc $03				inc 	codePtr+1
.269a					_SFNLNoCarry:
.269a	b1 02		lda ($02),y			lda 	(codePtr),y 				; reached the end of the program.
.269c	d0 a7		bne $2645			bne		_SFLoop 					; no go round again
.269e					_SFError:
.269e	a2 14		ldx #$14			ldx 	#ErrorID_Struct
.26a0	20 f2 20	jsr $20f2			jsr 	ErrorHandler
.26a3					_SFFloatSkip:
.26a3	4c 92 13	jmp $1392			jmp 	Unimplemented

;******  Return to file: main/main.asm


;******  Processing file: main/utility/stack.asm

.0078					rsPointer:
>0078							.fill 	2							; to TOS, which is the current top-token.
.2051					RSReset:
.2051	a9 ff		lda #$ff			lda 	#(returnStack+retStackSize-1) & $FF
.2053	85 78		sta $78				sta 	rsPointer
.2055	a9 09		lda #$09			lda 	#(returnStack+retStackSize-1) >> 8
.2057	85 79		sta $79				sta 	1+(rsPointer)
.2059	a9 ff		lda #$ff			lda 	#$FF 						; put a duff marker on TOS, so nothing will pop
.205b	8d ff 09	sta $09ff			sta 	returnStack+retStackSize-1
.205e	60		rts				rts
.205f					RSClaim:
.205f	84 0c		sty $0c				sty 	tempShort 					; preserve Y
.2061	48		pha				pha 								; save marker on stack.
.2062	8a		txa				txa 								; get bytes required.
.2063	38		sec				sec
.2064	49 ff		eor #$ff			eor 	#$FF 						; add to rsPointer using 2's complement.
.2066	65 78		adc $78				adc 	rsPointer
.2068	85 78		sta $78				sta 	rsPointer
.206a	a5 79		lda $79				lda 	rsPointer+1
.206c	69 ff		adc #$ff			adc 	#$FF
.206e	85 79		sta $79				sta 	rsPointer+1
.2070	c9 08		cmp #$08			cmp 	#returnStack>>8 			; overflow. underflow actually :)
.2072	90 08		bcc $207c			bcc 	_RSCOverflow
.2074	68		pla				pla 								; get marker back
.2075	a0 00		ldy #$00			ldy 	#0 							; write marker out.
.2077	91 78		sta ($78),y			sta 	(rsPointer),y
.2079	a4 0c		ldy $0c				ldy 	tempShort 					; restore Y and exit
.207b	60		rts				rts
.207c					_RSCOverflow:
.207c	a2 16		ldx #$16			ldx 	#ErrorID_RetStack
.207e	20 f2 20	jsr $20f2			jsr 	ErrorHandler
.2081					RSFree:
.2081	18		clc				clc
.2082	65 78		adc $78				adc 	rsPointer
.2084	85 78		sta $78				sta 	rsPointer
.2086	90 02		bcc $208a			bcc 	_RSFExit
.2088	e6 79		inc $79				inc 	rsPointer+1
.208a					_RSFExit:
.208a	60		rts				rts
.208b					RSSavePosition:
.208b	84 0c		sty $0c				sty 	tempShort 					; save Y position
.208d	a8		tay				tay 								; this is where we write it.
.208e	a5 02		lda $02				lda 	codePtr 					; write codePointer out
.2090	91 78		sta ($78),y			sta 	(rsPointer),y
.2092	c8		iny				iny
.2093	a5 03		lda $03				lda 	codePtr+1
.2095	91 78		sta ($78),y			sta 	(rsPointer),y
.2097	c8		iny				iny
.2098	a5 0c		lda $0c				lda 	tempShort 					; write the Y position out.
.209a	91 78		sta ($78),y			sta 	(rsPointer),y
.209c	a8		tay				tay 								; fix Y back again to original value
.209d	60		rts				rts
.209e					RSLoadPosition:
.209e	a8		tay				tay
.209f	b1 78		lda ($78),y			lda 	(rsPointer),y 				; read codePointer back
.20a1	85 02		sta $02				sta 	codePtr
.20a3	c8		iny				iny
.20a4	b1 78		lda ($78),y			lda 	(rsPointer),y
.20a6	85 03		sta $03				sta 	codePtr+1
.20a8	c8		iny				iny
.20a9	b1 78		lda ($78),y			lda 	(rsPointer),y 				; and the offset
.20ab	a8		tay				tay 								; to Y
.20ac	60		rts				rts

;******  Return to file: main/main.asm

.20ad					mainHandler:
.20ad	7c b0 20	jmp ($20b0,x)			jmp 	(mainVectors,x)
.20b0					mainVectors:
>20b0	e8 19					.word LinkEvaluate         ; index 0
>20b2	ee 19					.word LinkEvaluateInteger  ; index 2
>20b4	f4 19					.word LinkEvaluateSmallInt ; index 4

;******  Return to file: basic.asm

.20b6					section_end_main:
.20b6					section_start_assembler:

;******  Processing file: assembler/assembler.asm

.20b6					assemblerHandler:
.20b6	7c b9 20	jmp ($20b9,x)			jmp 	(assemblerVectors,x)
.20b9					assemblerVectors:

;******  Return to file: basic.asm

.20b9					section_end_assembler:
.20b9					section_start_device:

;******  Processing file: device/device.asm


;******  Processing file: device/x16/x16io.asm

.20b9					IONewLine:
.20b9	48		pha				pha
.20ba	a9 0d		lda #$0d			lda 	#13
.20bc	20 c9 20	jsr $20c9			jsr 	IOPrintChar
.20bf	68		pla				pla
.20c0	60		rts				rts
.20c1					IOTab:
.20c1	48		pha				pha
.20c2	a9 20		lda #$20			lda 	#32
.20c4	20 c9 20	jsr $20c9			jsr 	IOPrintChar
.20c7	68		pla				pla
.20c8	60		rts				rts
.20c9					IOPrintChar:
.20c9	aa		tax				tax
.20ca	5a		phy				phy
.20cb	8a		txa				txa
.20cc	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.20cf	7a		ply				ply
.20d0	60		rts				rts
.20d1					IOInkey:
.20d1	98		tya				tya
.20d2	48		pha				pha
.20d3	20 e4 ff	jsr $ffe4			jsr 	$FFE4
.20d6	85 0c		sta $0c				sta 	tempShort
.20d8	68		pla				pla
.20d9	a8		tay				tay
.20da	a5 0c		lda $0c				lda 	tempShort
.20dc	60		rts				rts

;******  Return to file: device/device.asm


;******  Processing file: device/x16/x16timer.asm

.20dd					IOReadTimer:
.20dd	20 de ff	jsr $ffde			jsr 	$FFDE
.20e0	48		pha				pha
.20e1	8a		txa				txa
.20e2	a8		tay				tay
.20e3	68		pla				pla
.20e4	60		rts				rts

;******  Return to file: device/device.asm

.20e5					deviceHandler:
.20e5	7c e8 20	jmp ($20e8,x)			jmp 	(deviceVectors,x)
.20e8					deviceVectors:
>20e8	b9 20					.word IONewLine            ; index 0
>20ea	d1 20					.word IOInkey              ; index 2
>20ec	c9 20					.word IOPrintChar          ; index 4
>20ee	c1 20					.word IOTab                ; index 6
>20f0	dd 20					.word IOReadTimer          ; index 8

;******  Return to file: basic.asm

.20f2					section_end_device:
.20f2					section_start_error:

;******  Processing file: error/error.asm


;******  Processing file: error/errorhandler.asm

.20f2					ErrorHandler:
.20f2	a9 ee		lda #$ee			lda 	#$EE
.20f4	a8		tay				tay
>20f5	db						.byte 	$DB
.20f6	4c f6 20	jmp $20f6	_EHHalt:jmp 	_EHHalt

;******  Return to file: error/error.asm


;******  Return to file: basic.asm

.20f9					section_end_error:
.20f9					section_start_floatingpoint:

;******  Processing file: floatingpoint/floatingpoint.asm

.20f9					floatingpointHandler:
.20f9	a2 03		ldx #$03			ldx 	#ErrorID_NoModule
.20fb	20 f2 20	jsr $20f2			jsr 	ErrorHandler

;******  Return to file: basic.asm

.20fe					section_end_floatingpoint:
.20fe					section_start_interaction:

;******  Processing file: interaction/interaction.asm

.20fe					interactionHandler:
.20fe	7c 01 21	jmp ($2101,x)			jmp 	(interactionVectors,x)
.2101					interactionVectors:

;******  Return to file: basic.asm

.2101					section_end_interaction:
.2101					section_start_string:

;******  Processing file: string/string.asm


;******  Processing file: string/chr.asm

.2101					StringChrs:
.2101	aa		tax				tax 								; set up stack
.2102	a9 02		lda #$02			lda 	#2
.2104	20 bb 21	jsr $21bb			jsr 	AllocateSoftString
.2107	98		tya				tya
.2108	20 e1 21	jsr $21e1			jsr 	WriteSoftString
.210b	20 10 21	jsr $2110			jsr 	ReturnSoftString
.210e	8a		txa				txa
.210f	60		rts				rts
.2110					ReturnSoftString:
.2110	a5 7a		lda $7a				lda 	softMemAlloc
.2112	95 48		sta $48,x			sta 	esInt0,x
.2114	a5 7b		lda $7b				lda 	softMemAlloc+1
.2116	95 50		sta $50,x			sta 	esInt1,x
.2118	a9 00		lda #$00			lda 	#0
.211a	95 58		sta $58,x			sta 	esInt2,x
.211c	95 60		sta $60,x			sta 	esInt3,x
.211e	a9 40		lda #$40			lda 	#$40
.2120	95 40		sta $40,x			sta 	esType,x
.2122	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/compare.asm

.2123					STRCompare:
.2123	48		pha				pha 								; save A
.2124	aa		tax				tax 								; put stack pos in X
.2125	98		tya				tya
.2126	48		pha				pha
.2127	20 5b 21	jsr $215b			jsr 	CopyStringPair
.212a	a0 00		ldy #$00			ldy 	#0 							; get the smaller of the two string sizes.
.212c	b1 04		lda ($04),y			lda 	(temp0),y
.212e	d1 06		cmp ($06),y			cmp 	(temp1),y
.2130	90 02		bcc $2134			bcc 	_SCNotSmaller
.2132	b1 06		lda ($06),y			lda 	(temp1),y
.2134					_SCNotSmaller:
.2134	aa		tax				tax 								; put that in X. We compare this many chars first.
.2135					_SCCompareLoop:
.2135	e0 00		cpx #$00			cpx 	#0 							; if compared all the smaller, then it is the shorter
.2137	f0 0c		beq $2145			beq 	_SCSameToEndShortest 		; one that is the smallest if they are different lengths.
.2139	ca		dex				dex 								; decrement chars to compare.
.213a	c8		iny				iny 								; move to next character
.213b	38		sec				sec 								; calculate s1[y]-s2[y]
.213c	b1 04		lda ($04),y			lda 	(temp0),y
.213e	f1 06		sbc ($06),y			sbc 	(temp1),y
.2140	d0 0a		bne $214c			bne 	_SCReturnResult 			; if different return sign of A
.2142	4c 35 21	jmp $2135			jmp 	_SCCompareLoop
.2145					_SCSameToEndShortest
.2145	a0 00		ldy #$00			ldy 	#0 							; compare len(s1) - len(s2)
.2147	38		sec				sec
.2148	b1 04		lda ($04),y			lda 	(temp0),y
.214a	f1 06		sbc ($06),y			sbc 	(temp1),y
.214c					_SCReturnResult:
.214c	08		php				php 								; set return to zero preserving PSW.
.214d	a2 00		ldx #$00			ldx 	#0
.214f	28		plp				plp
.2150	f0 05		beq $2157			beq 	_SCExit 					; two values equal, then exit
.2152	ca		dex				dex 								; X = $FF
.2153	90 02		bcc $2157			bcc 	_SCExit 					; if 1st < 2nd then -1
.2155	a2 01		ldx #$01			ldx 	#1 							; X = $01 if greater
.2157					_SCExit:
.2157	68		pla				pla
.2158	a8		tay				tay
.2159	68		pla				pla
.215a	60		rts				rts
.215b					CopyStringPair:
.215b	b5 49		lda $49,x			lda 	esInt0+1,x
.215d	85 06		sta $06				sta 	temp1
.215f	b5 51		lda $51,x			lda 	esInt1+1,x
.2161	85 07		sta $07				sta 	temp1+1
.2163					CopyStringTop:
.2163	b5 48		lda $48,x			lda 	esInt0,x
.2165	85 04		sta $04				sta 	temp0
.2167	b5 50		lda $50,x			lda 	esInt1,x
.2169	85 05		sta $05				sta 	temp0+1
.216b	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/concat.asm

.216c					StringConcat:
.216c	aa		tax				tax									; stack pos in X
.216d	98		tya				tya
.216e	48		pha				pha
.216f	20 5b 21	jsr $215b			jsr 	CopyStringPair 				; temp0 and temp1 point to strings to concat.
.2172	38		sec				sec 								; calculate alloc strings. lengths added + 1 for size.
.2173	a0 00		ldy #$00			ldy 	#0
.2175	b1 04		lda ($04),y			lda 	(temp0),y
.2177	71 06		adc ($06),y			adc 	(temp1),y
.2179	b0 1c		bcs $2197			bcs 	_SCError 					; just too many characters here.
.217b	c9 fc		cmp #$fc			cmp 	#MaxStringSize
.217d	b0 18		bcs $2197			bcs 	_SCError
.217f	20 bb 21	jsr $21bb			jsr 	AllocateSoftString 			; allocate soft string memory, set pointer.
.2182	20 b2 21	jsr $21b2			jsr 	CopySoftToStack 			; copy that to the stack.
.2185	20 9c 21	jsr $219c			jsr 	SCCopyTemp0 				; copy temp0
.2188	a5 06		lda $06				lda 	temp1 						; copy temp1 to temp0
.218a	85 04		sta $04				sta 	temp0
.218c	a5 07		lda $07				lda 	temp1+1
.218e	85 05		sta $05				sta 	temp0+1
.2190	20 9c 21	jsr $219c			jsr 	SCCopyTemp0 				; copy temp0 e.g. what was temp1.
.2193	68		pla				pla
.2194	a8		tay				tay
.2195	8a		txa				txa 								; and A
.2196	60		rts				rts
.2197					_SCError:
.2197	a2 0d		ldx #$0d			ldx 	#ErrorID_StrLen
.2199	20 f2 20	jsr $20f2			jsr 	ErrorHandler
.219c					SCCopyTemp0:
.219c	a0 00		ldy #$00			ldy 	#0 							; put count in temp2
.219e	b1 04		lda ($04),y			lda 	(temp0),y
.21a0	85 08		sta $08				sta 	temp2
.21a2					_SCCopyLoop:
.21a2	a5 08		lda $08				lda 	temp2 						; done the lot
.21a4	f0 0b		beq $21b1			beq 	_SCCopyExit
.21a6	c6 08		dec $08				dec 	temp2
.21a8	c8		iny				iny 								; get next char
.21a9	b1 04		lda ($04),y			lda 	(temp0),y
.21ab	20 e1 21	jsr $21e1			jsr 	WriteSoftString 			; write to soft string.
.21ae	4c a2 21	jmp $21a2			jmp 	_SCCopyLoop
.21b1					_SCCopyExit:
.21b1	60		rts				rts
.21b2					CopySoftToStack:
.21b2	a5 7a		lda $7a				lda 	SoftMemAlloc 				; copy the memory allocation pointer to the stack.
.21b4	95 48		sta $48,x			sta 	esInt0,x 					; type is already string.
.21b6	a5 7b		lda $7b				lda 	SoftMemAlloc+1
.21b8	95 50		sta $50,x			sta 	esInt1,x
.21ba	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/memory.asm

.007a					softMemAlloc:
>007a							.fill 	2  							; if MSB is zero needs resetting on allocation.
.21bb					AllocateSoftString:
.21bb	85 0c		sta $0c				sta 	tempShort 					; save count
.21bd	98		tya				tya
.21be	48		pha				pha
.21bf	a5 7b		lda $7b				lda 	softMemAlloc+1 				; if the high byte is zero, it needs allocating.
.21c1	d0 09		bne $21cc			bne 	_ASSDone
.21c3	a5 0d		lda $0d				lda 	highMemory 					; reset the soft memory alloc pointer.
.21c5	85 7a		sta $7a				sta 	softMemAlloc 				; to speed up slightly, we only reset this when we first need it
.21c7	a4 0e		ldy $0e				ldy 	highMemory+1 				; but it needs to be reset before each command.
.21c9	88		dey				dey
.21ca	84 7b		sty $7b				sty 	softMemAlloc+1
.21cc					_ASSDone:
.21cc	38		sec				sec 								; allocate downwards enough memory
.21cd	a5 7a		lda $7a				lda 	softMemAlloc
.21cf	e5 0c		sbc $0c				sbc 	tempShort
.21d1	85 7a		sta $7a				sta 	softMemAlloc
.21d3	a5 7b		lda $7b				lda 	softMemAlloc+1
.21d5	e9 00		sbc #$00			sbc 	#0
.21d7	85 7b		sta $7b				sta 	softMemAlloc+1
.21d9	a9 00		lda #$00			lda 	#0 							; empty that string, set the length = 0.
.21db	a8		tay				tay
.21dc	91 7a		sta ($7a),y			sta 	(softMemAlloc),y
.21de	68		pla				pla
.21df	a8		tay				tay
.21e0	60		rts				rts
.21e1					WriteSoftString:
.21e1	84 0c		sty $0c				sty 	tempShort 					; save Y
.21e3	48		pha				pha
.21e4	a0 00		ldy #$00			ldy 	#0 							; get and bump length
.21e6	b1 7a		lda ($7a),y			lda 	(softMemAlloc),y
.21e8	18		clc				clc
.21e9	69 01		adc #$01			adc 	#1
.21eb	91 7a		sta ($7a),y			sta 	(softMemAlloc),y
.21ed	a8		tay				tay 								; pointer in Y
.21ee	68		pla				pla 								; get char and write.
.21ef	91 7a		sta ($7a),y			sta 	(softMemAlloc),y
.21f1	a4 0c		ldy $0c				ldy 	tempShort 					; restore Y and exit.
.21f3	60		rts				rts
.21f4					StrClone:
.21f4	aa		tax				tax 								; set up stack.
.21f5	98		tya				tya
.21f6	48		pha				pha
.21f7	a0 00		ldy #$00			ldy 	#0 							; get length, add 1 for length
.21f9	b1 04		lda ($04),y			lda 	(temp0),y
.21fb	18		clc				clc
.21fc	69 01		adc #$01			adc 	#1
.21fe	20 bb 21	jsr $21bb			jsr 	AllocateSoftString 			; allocate soft memory
.2201	a5 7a		lda $7a				lda 	softMemAlloc 				; copy that address to TOS
.2203	95 48		sta $48,x			sta 	esInt0,x
.2205	a5 7b		lda $7b				lda 	softMemAlloc+1
.2207	95 50		sta $50,x			sta 	esInt1,x
.2209	a9 00		lda #$00			lda 	#0
.220b	95 58		sta $58,x			sta 	esInt2,x
.220d	95 60		sta $60,x			sta 	esInt3,x
.220f	a9 40		lda #$40			lda 	#$40 						; set type to string.
.2211	95 40		sta $40,x			sta 	esType,x
.2213	20 9c 21	jsr $219c			jsr 	SCCopyTemp0 				; copy temp0 string to soft memory copy (concat.asm)
.2216	68		pla				pla
.2217	a8		tay				tay
.2218	8a		txa				txa
.2219	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/substring.asm

.221a					StringSubstring:
.221a	48		pha				pha
.221b	aa		tax				tax 								; access stack.
.221c	98		tya				tya
.221d	48		pha				pha
.221e	20 63 21	jsr $2163			jsr 	CopyStringTop 				; point temp0 to the string.
.2221	a0 00		ldy #$00			ldy 	#0 							; get length.
.2223	b1 04		lda ($04),y			lda 	(temp0),Y
.2225	85 06		sta $06				sta 	temp1
.2227	b5 49		lda $49,x			lda 	esInt0+1,x 					; get the initial offset
.2229	c5 06		cmp $06				cmp 	temp1 						;
.222b	f0 02		beq $222f			beq 	_SSBOkay
.222d	b0 2a		bcs $2259			bcs 	_SSBReturnNull
.222f					_SSBOkay:
.222f	a5 06		lda $06				lda 	temp1 						; get the total length +1
.2231	18		clc				clc
.2232	69 01		adc #$01			adc 	#1
.2234	38		sec				sec
.2235	f5 49		sbc $49,x			sbc 	esInt0+1,x 					; the anything >= this is bad.
.2237	d5 4a		cmp $4a,x			cmp 	esInt0+2,x  				; check bad >= required
.2239	90 02		bcc $223d			bcc		_SSBTrunc
.223b	b5 4a		lda $4a,x			lda 	esInt0+2,x
.223d					_SSBTrunc:
.223d	85 07		sta $07				sta 	temp1+1 					; characters to copy.
.223f	18		clc				clc
.2240	69 01		adc #$01			adc 	#1 							; add 1
.2242	20 bb 21	jsr $21bb			jsr 	AllocateSoftString 			; allocate soft string memory, set pointer.
.2245	20 b2 21	jsr $21b2			jsr 	CopySoftToStack 			; copy that to the stack.
.2248	b4 49		ldy $49,x			ldy 	esInt0+1,x 					; get initial position of char to copy
.224a					_SSBCopyLoop:
.224a	a5 07		lda $07				lda 	temp1+1 					; done them all
.224c	f0 0e		beq $225c			beq 	_SSBExit
.224e	c6 07		dec $07				dec 	temp1+1
.2250	b1 04		lda ($04),y			lda 	(temp0),y 					; get and write character
.2252	20 e1 21	jsr $21e1			jsr 	WriteSoftString
.2255	c8		iny				iny
.2256	4c 4a 22	jmp $224a			jmp 	_SSBCopyLoop
.2259					_SSBReturnNull:
.2259	20 60 22	jsr $2260			jsr 	ReturnNull
.225c					_SSBExit:
.225c	68		pla				pla
.225d	a8		tay				tay
.225e	68		pla				pla
.225f	60		rts				rts
.2260					ReturnNull:
.2260	a9 00		lda #$00			lda 	#0 							; clear null string
.2262	8d cc 0a	sta $0acc			sta 	NullString
.2265	a9 cc		lda #$cc			lda 	#NullString & $FF 			; set a pointer to it
.2267	95 48		sta $48,x			sta 	esInt0,x
.2269	a9 0a		lda #$0a			lda 	#NullString >> 8
.226b	95 50		sta $50,x			sta 	esInt1,x
.226d	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/write.asm

.0afc					srcStrLen:
>0afc							.fill 	1
.226e					StringWrite:
.226e	aa		tax				tax
.226f	48		pha				pha
.2270	98		tya				tya
.2271	48		pha				pha
.2272	20 99 22	jsr $2299			jsr 	CheckOverwriteCurrent
.2275	b0 0d		bcs $2284			bcs		_SWCopyCurrent
.2277	20 d7 22	jsr $22d7			jsr 	RequiresConcretion
.227a	90 0e		bcc $228a			bcc 	_SWWriteReference
.227c	20 3a 23	jsr $233a			jsr 	CheckSpecialConcretion
.227f	b0 09		bcs $228a			bcs 	_SWWriteReference
.2281	20 eb 22	jsr $22eb			jsr 	AllocateHardMemory
.2284					_SWCopyCurrent:
.2284	20 1e 23	jsr $231e			jsr 	CopyStringToHardMemory
.2287	4c 95 22	jmp $2295			jmp 	_SWExit
.228a					_SWWriteReference
.228a	a0 00		ldy #$00			ldy 	#0
.228c	a5 04		lda $04				lda 	temp0
.228e	91 06		sta ($06),y			sta 	(temp1),y
.2290	c8		iny				iny
.2291	a5 05		lda $05				lda 	temp0+1
.2293	91 06		sta ($06),y			sta 	(temp1),y
.2295					_SWExit:
.2295	68		pla				pla
.2296	a8		tay				tay
.2297	68		pla				pla
.2298	60		rts				rts
.2299					CheckOverwriteCurrent:
.2299	a0 00		ldy #$00			ldy 	#0 						; get address of string being written to temp0
.229b	b5 51		lda $51,x			lda 	esInt1+1,x
.229d	85 05		sta $05				sta 	temp0+1
.229f	b5 49		lda $49,x			lda 	esInt0+1,x
.22a1	85 04		sta $04				sta 	temp0
.22a3	b1 04		lda ($04),y			lda 	(temp0),y 				; get length of string being copied.
.22a5	8d fc 0a	sta $0afc			sta 	srcStrLen
.22a8	b5 48		lda $48,x			lda 	esInt0,x 				; copy where the final address it being written to temp1.
.22aa	85 06		sta $06				sta 	temp1 					; e.g. if it is ax$ then temp1 will point to the ax$
.22ac	b5 50		lda $50,x			lda 	esInt1,x 				; data record + 5
.22ae	85 07		sta $07				sta 	temp1+1
.22b0	a0 01		ldy #$01			ldy 	#1 						; get the MSB of the address of string currently stored there.
.22b2	b1 06		lda ($06),y			lda 	(temp1),y
.22b4	c5 0e		cmp $0e				cmp 	highMemory+1 			; if < high memory then it cannot be something stored
.22b6	90 1b		bcc $22d3			bcc 	_COCFail 				; in hard memory.
.22b8	a0 00		ldy #$00			ldy 	#0 						; copy target address - 1 into temp2
.22ba	b1 06		lda ($06),y			lda 	(temp1),y
.22bc	e9 01		sbc #$01			sbc 	#1
.22be	85 08		sta $08				sta 	temp2
.22c0	c8		iny				iny
.22c1	b1 06		lda ($06),y			lda 	(temp1),y
.22c3	e9 00		sbc #$00			sbc 	#0
.22c5	85 09		sta $09				sta 	temp2+1
.22c7	a0 00		ldy #$00			ldy 	#0 						; how large is this physical chunk.
.22c9	b1 08		lda ($08),y			lda 	(temp2),y
.22cb	38		sec				sec  							; maximum character capacity.
.22cc	e9 02		sbc #$02			sbc 	#2
.22ce	cd fc 0a	cmp $0afc			cmp 	srcStrLen 				; if >= the required length
.22d1	b0 02		bcs $22d5			bcs 	_COCCanReuse
.22d3					_COCFail:
.22d3	18		clc				clc
.22d4	60		rts				rts
.22d5					_COCCanReuse:
.22d5	38		sec				sec
.22d6	60		rts				rts
.22d7					RequiresConcretion:
.22d7	a5 05		lda $05				lda 	temp0+1 				; get MSB of address of string to be written
.22d9	c5 0e		cmp $0e				cmp 	highMemory+1 			; if >= high memory it is concreted
.22db	b0 0a		bcs $22e7			bcs 	_RCSucceed 				; so it needs concreting again - duplication.
.22dd	a5 7b		lda $7b				lda 	softMemAlloc+1 			; have we allocated any soft memory yet ?
.22df	f0 08		beq $22e9			beq 	_RCFail 				; if not, this cannot be soft memory.
.22e1	a5 05		lda $05				lda 	temp0+1 				; get MSB of address of string to be written
.22e3	c5 7b		cmp $7b				cmp 	softMemAlloc+1 			; if >= soft mem alloc it is either soft
.22e5	90 02		bcc $22e9			bcc 	_RCFail 				; so concreting
.22e7					_RCSucceed:
.22e7	38		sec				sec
.22e8	60		rts				rts
.22e9					_RCFail:
.22e9	18		clc				clc
.22ea	60		rts				rts
.22eb					AllocateHardMemory:
.22eb	98		tya				tya
.22ec	48		pha				pha
.22ed	ad fc 0a	lda $0afc			lda 	srcStrLen 				; characters in string
.22f0	69 0a		adc #$0a			adc 	#1+1+8 					; one for hard memory size, one for string size, extra for expansion
.22f2	b0 04		bcs $22f8			bcs 	_AHMSetMax 				; max out that amount.
.22f4	c9 fe		cmp #$fe			cmp 	#MaxStringSize+2
.22f6	90 02		bcc $22fa			bcc 	_AHMIsOkay
.22f8					_AHMSetMax:
.22f8	a9 fe		lda #$fe			lda 	#MaxStringSize+2
.22fa					_AHMIsOkay:
.22fa	48		pha				pha
.22fb	49 ff		eor #$ff			eor 	#$FF 					; complement and add to high Memory
.22fd	38		sec				sec  							; and copy result to TOS as target address.
.22fe	65 0d		adc $0d				adc 	highMemory
.2300	85 0d		sta $0d				sta 	highMemory
.2302	a5 0e		lda $0e				lda 	highMemory+1
.2304	69 ff		adc #$ff			adc 	#$FF
.2306	85 0e		sta $0e				sta 	highMemory+1
.2308	a0 00		ldy #$00			ldy 	#0 						; Y = 0
.230a	68		pla				pla 							; get the total size of the storage block
.230b	91 0d		sta ($0d),y			sta 	(highMemory),y
.230d	18		clc				clc
.230e	a5 0d		lda $0d				lda		highMemory 				; point the target address to the byte after this.
.2310	69 01		adc #$01			adc 	#1
.2312	91 06		sta ($06),y			sta 	(temp1),y
.2314	a5 0e		lda $0e				lda 	highMemory+1
.2316	69 00		adc #$00			adc 	#0
.2318	c8		iny				iny
.2319	91 06		sta ($06),y			sta 	(temp1),y
.231b	68		pla				pla
.231c	a8		tay				tay
.231d	60		rts				rts
.231e					CopyStringToHardMemory:
.231e	98		tya				tya
.231f	48		pha				pha
.2320	a0 00		ldy #$00			ldy 	#0 						; copy target address to temp2
.2322	b1 06		lda ($06),y			lda 	(temp1),y
.2324	85 08		sta $08				sta 	temp2
.2326	c8		iny				iny
.2327	b1 06		lda ($06),y			lda 	(temp1),y
.2329	85 09		sta $09				sta 	temp2+1
.232b	ac fc 0a	ldy $0afc			ldy 	srcStrLen 				; copy this + 1 characters, (length too) hence $FF compare
.232e					_CSTHMLoop:
.232e	b1 04		lda ($04),y			lda 	(temp0),y
.2330	91 08		sta ($08),y			sta 	(temp2),y
.2332	88		dey				dey
.2333	c0 ff		cpy #$ff			cpy 	#$FF
.2335	d0 f7		bne $232e			bne 	_CSTHMLoop
.2337	68		pla				pla
.2338	a8		tay				tay
.2339	60		rts				rts
.233a					CheckSpecialConcretion:
.233a	ad fc 0a	lda $0afc			lda 	srcStrLen 				; check string is null.
.233d	f0 02		beq $2341			beq 	_CSCNullString
.233f	18		clc				clc
.2340	60		rts				rts
.2341					_CSCNullString:
.2341	a9 00		lda #$00			lda 	#0
.2343	8d cc 0a	sta $0acc			sta 	NullString
.2346	a9 cc		lda #$cc			lda 	#(NullString) & $FF
.2348	85 04		sta $04				sta 	temp0
.234a	a9 0a		lda #$0a			lda 	#(NullString) >> 8
.234c	85 05		sta $05				sta 	1+(temp0)
.234e	38		sec				sec
.234f	60		rts				rts

;******  Return to file: string/string.asm

.2350					stringHandler:
.2350	7c 53 23	jmp ($2353,x)			jmp 	(stringVectors,x)
.2353					stringVectors:
>2353	01 21					.word StringChrs           ; index 0
>2355	f4 21					.word StrClone             ; index 2
>2357	6c 21					.word StringConcat         ; index 4
>2359	23 21					.word STRCompare           ; index 6
>235b	1a 22					.word StringSubstring      ; index 8
>235d	6e 22					.word StringWrite          ; index 10

;******  Return to file: basic.asm

.235f					section_end_string:
.235f					section_start_tokeniser:

;******  Processing file: tokeniser/tokeniser.asm

.235f					tokeniserHandler:
.235f	7c 62 23	jmp ($2362,x)			jmp 	(tokeniserVectors,x)
.2362					tokeniserVectors:

;******  Return to file: basic.asm

.2362					section_end_tokeniser:
.2362					section_start_variable:

;******  Processing file: variable/variable.asm


;******  Processing file: variable/access.asm

.0afd					varHash:
>0afd							.fill	1
.0afe					varType:
>0afe							.fill 	1
.0aff					varEnd:
>0aff							.fill 	1
.007c					hashList:
>007c							.fill 	2
.2362					AccessVariable:
.2362	aa		tax				tax 								; stack in X
.2363	c8		iny				iny
.2364	b1 02		lda ($02),y			lda 	(codePtr),y
.2366	88		dey				dey
.2367	c9 3a		cmp #$3a			cmp 	#TYPE_INT 					; is it one of the end markers ?
.2369	d0 15		bne $2380			bne 	_AVLong
.236b	b1 02		lda ($02),y			lda 	(codePtr),y 				; this is the 6 bit ASCII of A-Z 1-26
.236d	38		sec				sec 	 							; make it 0-25
.236e	e9 01		sbc #$01			sbc 	#1
.2370	0a		asl a				asl 	a 							; x 4 is LSB of address
.2371	0a		asl a				asl 	a
.2372	95 48		sta $48,x			sta 	esInt0,x
.2374	a9 0a		lda #$0a			lda 	#SingleLetterVar >> 8 		; make it an address
.2376	95 50		sta $50,x			sta 	esInt1,x
.2378	a9 80		lda #$80			lda 	#$80 						; type is integer reference.
.237a	95 40		sta $40,x			sta 	esType,x
.237c	c8		iny				iny 								; skip over the variable reference in the code.
.237d	c8		iny				iny
.237e	8a		txa				txa 								; stack in A to return.
.237f	60		rts				rts
.2380					_AVLong:
.2380	8a		txa				txa
.2381	48		pha				pha
.2382	20 c0 23	jsr $23c0			jsr 	AccessSetup 				; set up the basic stuff.
.2385	20 65 24	jsr $2465			jsr 	FindVariable 				; does the variable exist already
.2388	b0 0e		bcs $2398			bcs 	_AVFound
.238a	ad fe 0a	lda $0afe			lda 	varType 					; is the variable type an array
.238d	4a		lsr a				lsr 	a
.238e	90 05		bcc $2395			bcc 	_AVCanCreate
.2390	a2 15		ldx #$15			ldx 	#ErrorID_noauto
.2392	20 f2 20	jsr $20f2			jsr 	ErrorHandler
.2395					_AVCanCreate:
.2395	20 fd 23	jsr $23fd			jsr 	CreateVariable 				; no, create it.
.2398					_AVFound:
.2398	68		pla				pla
.2399	aa		tax				tax
.239a	18		clc				clc 								; copy temp0 (variable record address)
.239b	a5 04		lda $04				lda 	temp0 						; +5 (to point to the data)
.239d	69 05		adc #$05			adc 	#5
.239f	95 48		sta $48,x			sta 	esInt0,x
.23a1	a5 05		lda $05				lda 	temp0+1
.23a3	69 00		adc #$00			adc 	#0
.23a5	95 50		sta $50,x			sta 	esInt1,x
.23a7	a9 00		lda #$00			lda 	#0
.23a9	95 58		sta $58,x			sta 	esInt2,x
.23ab	95 60		sta $60,x			sta 	esInt3,x
.23ad	ac fe 0a	ldy $0afe			ldy 	varType 					; get the type ID from the type.
.23b0	b9 80 23	lda $2380,y			lda 	_AVTypeTable-$3A,y
.23b3	95 40		sta $40,x			sta 	esType,x
.23b5	ac ff 0a	ldy $0aff			ldy 	varEnd 						; restore Y
.23b8	8a		txa				txa 								; return stack in A and return
.23b9	60		rts				rts
.23ba					_AVTypeTable:
>23ba	80 80						.byte 	$80,$80						; integer
>23bc	c0 c0						.byte 	$C0,$C0 					; string
>23be	81 81						.byte 	$81,$81 					; float
.23c0					AccessSetup:
.23c0	a9 00		lda #$00			lda 	#0 							; zero the hash byte.
.23c2	8d fd 0a	sta $0afd			sta 	varHash
.23c5	98		tya				tya
.23c6	48		pha				pha
.23c7	b1 02		lda ($02),y	_ASLoop:lda 	(codePtr),y					; get next identifier character
.23c9	c9 3a		cmp #$3a			cmp 	#$3A 						; is it 3A-3F which end all identifiers ?
.23cb	b0 0b		bcs $23d8			bcs 	_ASComplete
.23cd	18		clc				clc 								; add to the hash. Might improve this.
.23ce	6d fd 0a	adc $0afd			adc 	varHash
.23d1	8d fd 0a	sta $0afd			sta 	varHash
.23d4	c8		iny				iny 								; next character
.23d5	4c c7 23	jmp $23c7			jmp 	_ASLoop
.23d8					_ASComplete:
.23d8	8d fe 0a	sta $0afe			sta 	varType 					; save variable type byte
.23db	c8		iny				iny
.23dc	8c ff 0a	sty $0aff			sty 	varEnd 						; save the ending position.
.23df	38		sec				sec 								; convert type byte from $3A-$3F to 0..5
.23e0	e9 3a		sbc #$3a			sbc 	#$3A
.23e2	0a		asl a				asl 	a 							; multiply by hashTableSize (8 in this case)
.23e3	0a		asl a				asl 	a
.23e4	0a		asl a				asl 	a
.23e5	0a		asl a				asl 	a 							; 2 bytes/word
.23e6	85 04		sta $04				sta 	temp0 						; this is the offset to the start of the table.
.23e8	ad fd 0a	lda $0afd			lda 	varHash 					; get hash
.23eb	29 07		and #$07			and 	#(hashTableSize-1)			; force into range
.23ed	0a		asl a				asl  	a 							; x 2 (for word) and CC
.23ee	65 04		adc $04				adc 	temp0 						; now offset from the start of the hash table.
.23f0	69 68		adc #$68			adc 	#hashTables & $FF 			; add to hash table base address
.23f2	85 7c		sta $7c				sta 	hashList
.23f4	a9 0a		lda #$0a			lda 	#hashTables >> 8
.23f6	69 00		adc #$00			adc 	#0
.23f8	85 7d		sta $7d				sta 	hashList+1
.23fa	68		pla				pla
.23fb	a8		tay				tay
.23fc	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/create.asm

.23fd					CreateVariable:
.23fd	98		tya				tya 								; push Y on the stack twice.
.23fe	48		pha				pha
.23ff	48		pha				pha
.2400	ae fe 0a	ldx $0afe			ldx 	varType 					; get var type 0-5
.2403	bd 25 24	lda $2425,x			lda		_CVSize-$3A,x 				; the bytes for this new variable.
.2406	48		pha				pha 								; save length
.2407	a8		tay				tay 								; put into Y.
.2408	a5 0f		lda $0f				lda 	lowMemory 					; set low Memory ptr to temp0
.240a	85 04		sta $04				sta 	temp0
.240c	a5 10		lda $10				lda 	lowMemory+1
.240e	85 05		sta $05				sta 	temp0+1
.2410	68		pla				pla 								; get length
.2411	20 6b 10	jsr $106b			jsr 	AdvanceLowMemoryByte 		; shift alloc memory forward by the length.
.2414					_CVClear:
.2414	88		dey				dey
.2415	a9 00		lda #$00			lda 	#0
.2417	91 04		sta ($04),y			sta 	(temp0),y
.2419	c0 04		cpy #$04			cpy 	#4
.241b	d0 f7		bne $2414			bne 	_CVClear
.241d	ad fd 0a	lda $0afd			lda 	varHash 					; store hash at offset 4.
.2420	91 04		sta ($04),y			sta 	(temp0),y
.2422	68		pla				pla 								; offset, work out where the variable name is.
.2423	18		clc				clc
.2424	65 02		adc $02				adc 	codePtr
.2426	a0 02		ldy #$02			ldy 	#2 							; copy that into slots 2 + 3.
.2428	91 04		sta ($04),y			sta 	(temp0),y
.242a	a5 03		lda $03				lda 	codePtr+1
.242c	69 00		adc #$00			adc 	#0
.242e	c8		iny				iny
.242f	91 04		sta ($04),y			sta 	(temp0),y
.2431	a0 00		ldy #$00			ldy 	#0 							; copy current hash pointer in link
.2433	b1 7c		lda ($7c),y			lda 	(hashList),y
.2435	91 04		sta ($04),y			sta 	(temp0),y
.2437	c8		iny				iny
.2438	b1 7c		lda ($7c),y			lda 	(hashList),y
.243a	91 04		sta ($04),y			sta 	(temp0),y
.243c	a5 05		lda $05				lda 	temp0+1 					; set new link
.243e	91 7c		sta ($7c),y			sta 	(hashList),y
.2440	88		dey				dey
.2441	a5 04		lda $04				lda 	temp0
.2443	91 7c		sta ($7c),y			sta 	(hashList),y
.2445	ad fe 0a	lda $0afe			lda 	varType 					; is it a string ($3C)
.2448	c9 3c		cmp #$3c			cmp 	#$3C
.244a	d0 10		bne $245c			bne 	_CVNoDefaultNull
.244c	a9 00		lda #$00			lda 	#0 							; put a reference to null string as the default value.
.244e	8d cc 0a	sta $0acc			sta 	NullString
.2451	a0 05		ldy #$05			ldy 	#5
.2453	a9 cc		lda #$cc			lda 	#NullString & $FF
.2455	91 04		sta ($04),y			sta 	(temp0),y
.2457	a9 0a		lda #$0a			lda 	#NullString >> 8
.2459	c8		iny				iny
.245a	91 04		sta ($04),y			sta 	(temp0),y
.245c					_CVNoDefaultNull:
.245c	68		pla				pla
.245d	a8		tay				tay
.245e	60		rts				rts
>245f	09 09				_CVSize:.byte 	VarHSize+VarISize,VarHSize+VarISize 					; <storage for integer>
>2461	07 07						.byte 	VarHSize+VarSSize,VarHSize+VarSSize 					; <storage for string>
>2463	0b 0b						.byte 	VarHSize+VarFSize,VarHSize+VarFSize 					; <storage for float>

;******  Return to file: variable/variable.asm


;******  Processing file: variable/find.asm

.2465					FindVariable:
.2465	98		tya				tya
.2466	48		pha				pha
.2467	98		tya				tya 								; point temp2 to the actual name.
.2468	18		clc				clc
.2469	65 02		adc $02				adc 	codePtr
.246b	85 08		sta $08				sta 	temp2
.246d	a5 03		lda $03				lda 	codePtr+1
.246f	69 00		adc #$00			adc 	#0
.2471	85 09		sta $09				sta 	temp2+1
.2473	a0 00		ldy #$00			ldy 	#0
.2475	a5 7c		lda $7c				lda 	hashList 					; copy hashlist to temp0
.2477	85 04		sta $04				sta 	temp0
.2479	a5 7d		lda $7d				lda 	hashList+1
.247b	85 05		sta $05				sta 	temp0+1
.247d	a0 01		ldy #$01	_FVNext:ldy 	#1 							; get MSB
.247f	b1 04		lda ($04),y			lda 	(temp0),y
.2481	f0 2c		beq $24af			beq 	_FVFail
.2483	aa		tax				tax
.2484	88		dey				dey		 							; get LSB
.2485	b1 04		lda ($04),y			lda 	(temp0),y
.2487	85 04		sta $04				sta 	temp0 						; update pointer.
.2489	86 05		stx $05				stx 	temp0+1
.248b	a0 04		ldy #$04			ldy 	#4 							; check hashes match
.248d	b1 04		lda ($04),y			lda 	(temp0),y
.248f	cd fd 0a	cmp $0afd			cmp 	varHash
.2492	d0 e9		bne $247d			bne 	_FVNext 					; if not, no point in checking the name.
.2494	88		dey				dey 								; copy name pointer to temp1.
.2495	b1 04		lda ($04),y			lda 	(temp0),y
.2497	85 07		sta $07				sta 	temp1+1
.2499	88		dey				dey
.249a	b1 04		lda ($04),y			lda 	(temp0),y
.249c	85 06		sta $06				sta 	temp1
.249e	a0 00		ldy #$00			ldy 	#0
.24a0					_FVCheck:
.24a0	b1 06		lda ($06),y			lda 	(temp1),y 					; compare names
.24a2	d1 08		cmp ($08),y			cmp 	(temp2),y
.24a4	d0 d7		bne $247d			bne 	_FVNext		 				; fail if different.
.24a6	c8		iny				iny
.24a7	c9 3a		cmp #$3a			cmp 	#$3A 						; until reached the end marker.
.24a9	90 f5		bcc $24a0			bcc 	_FVCheck
.24ab	68		pla				pla
.24ac	a8		tay				tay
.24ad	38		sec				sec
.24ae	60		rts				rts
.24af					_FVFail:
.24af	68		pla				pla
.24b0	a8		tay				tay
.24b1	18		clc				clc
.24b2	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/reset.asm

.24b3					HashTableReset:
.24b3	a2 60		ldx #$60			ldx 	#6*2*hashTableSize
.24b5	a9 00		lda #$00			lda 	#0
.24b7					_HTRClear:
.24b7	9d 67 0a	sta $0a67,x			sta 	hashTables-1,x
.24ba	ca		dex				dex
.24bb	d0 fa		bne $24b7			bne 	_HTRClear
.24bd	60		rts				rts

;******  Return to file: variable/variable.asm

.24be					variableHandler:
.24be	7c c1 24	jmp ($24c1,x)			jmp 	(variableVectors,x)
.24c1					variableVectors:
>24c1	62 23					.word AccessVariable       ; index 0
>24c3	b3 24					.word HashTableReset       ; index 2

;******  Return to file: basic.asm

.24c5					section_end_variable:

;******  End of listing
