
; 64tass Turbo Assembler Macro V1.55.2200 listing file
; 64tass -D autorun=1 -D coldstartnew=0 -Walias -Wmacro-prefix -Wall -q -c -L ../source/bin/basic.lst -l ../source/bin/basic.lbl -Wall -o ../source/bin/stub.prg basic.asm
; Thu Mar 18 19:59:32 2021

;Offset	;Hex		;Monitor	;Source

;******  Command line definitions

=1					autorun=1
=0					coldstartnew=0

;******  Processing input file: basic.asm


;******  Processing file: header/01common.inc


;******  Processing file: header/../generated/installed.inc

=1					installed_header = 1
=1					installed_main = 1
=1					installed_variable = 1
=1					installed_assembler = 1
=1					installed_error = 1
=1					installed_extension = 1
=1					installed_string = 1
=1					installed_device = 1
=0					installed_floatingpoint = 0
=1					installed_interaction = 1
=1					installed_tokeniser = 1
=1					installed_footer = 1

;******  Return to file: header/01common.inc

=$1000					CodeStart = $1000
=$800					MemoryStorage = $800
=$9f00					EndOfMemory = $9F00
=$28					ZeroPageStorage = $28
=$48					StackAddress = $48
=8					StackSize = 8
=2					retStackSizePages = 2
=8					hashTableSize = 8			; if this changes, the calculation is AccessSetup has to match it.
="G"					markerGOSUB = 'G'
="R"					markerREPEAT = 'R'
="F"					markerFOR = 'F'
="W"					markerWHILE = 'W'
="P"					markerPROC = 'P'
="$"					markerSTRING = '$'
="#"					markerFLOAT = '#'
="%"					markerINT = '%'
=5					VarHSize = 5 								; header (2 link, 2 name, 1 hash)
=2					VarASize = 2 								; array [address of first level]
=4					VarISize = 4 								; integer (32 bit)
=6					VarFSize = 6 								; float (4 mantissa, 1 exponent 1 sign/zero)
=2					VarSSize = 2 								; address (2 bytes)

;******  Return to file: basic.asm


;******  Processing file: header/02macros.inc


;******  Return to file: basic.asm


;******  Processing file: header/03data.inc

>0028					codePtr:.fill 	2							; (codePtr),y points to code.
>002a					temp0: 	.fill 	2							; working variables.
>002c					temp1: 	.fill 	2
>002e					temp2: 	.fill 	2
>0030					temp3: 	.fill 	2
.0032					tempshort:
>0032							.fill 	1
.0033					highMemory:
>0033							.fill 	2
.0035					lowMemory:
>0035							.fill 	2
>0800							.align	256
.0800					returnStack:
>0800							.fill 	retStackSizePages * 256
=512					retStackSize = retStackSizePages * 256
.0a00					SingleLetterVar:
>0a00					 		.fill 	26*4
.0a68					currentStorage:
>0048					esType:	.fill 	StackSize  					; type byte (see above)
>0050					esInt0:	.fill 	StackSize 					; integer or mantissa
>0058					esInt1:	.fill 	StackSize
>0060					esInt2:	.fill 	StackSize
>0068					esInt3:	.fill 	StackSize
>0070					esExp:	.fill 	StackSize 					; exponent ($80 = 0)
>0078					esZSign:.fill 	StackSize 					; for floating point - sign (bit 7) isZero (bit 6)
.0080					endOfStack:
=$50					esMant0 = esInt0 							; synonyms.
=$58					esMant1 = esInt1
=$60					esMant2 = esInt2
=$68					esMant3 = esInt3
.0a68					hashTables:
>0a68							.fill 	6*2*hashTableSize
.0ac8					basePage:
>0ac8							.fill 	2
.0aca					endProgram:
>0aca							.fill 	2
.0acc					endMemory:
>0acc							.fill 	2
.0ace					NullString:
>0ace							.fill 	1							; don't waste memory concreting null strings.
.0acf					convertBuffer:
>0acf							.fill 	35

;******  Processing file: header/../generated/tokenconst.inc

=$80					TOK_EOL=$80
=$81					TOK_SHIFT1=$81
=$82					TOK_SHIFT2=$82
=$83					TOK_SHIFT3=$83
=$84					TOK_FPC=$84
=$85					TOK_STR=$85
=$86					TOK_BINARYST=$86
=$99					TOK_STRUCTST=$99
=$a4					TOK_UNARYST=$a4
=$c9					TOK_TOKENS=$c9
=$86					TKW_AND                      = $86 ; and
=$87					TKW_OR                       = $87 ; or
=$88					TKW_XOR                      = $88 ; xor
=$89					TKW_GREATEREQUAL             = $89 ; >=
=$8a					TKW_LESSEQUAL                = $8a ; <=
=$8b					TKW_GREATER                  = $8b ; >
=$8c					TKW_LESS                     = $8c ; <
=$8d					TKW_EQUAL                    = $8d ; =
=$8e					TKW_LESSGREATER              = $8e ; <>
=$8f					TKW_PLUS                     = $8f ; +
=$90					TKW_MINUS                    = $90 ; -
=$91					TKW_GREATERGREATER           = $91 ; >>
=$92					TKW_LESSLESS                 = $92 ; <<
=$93					TKW_STAR                     = $93 ; *
=$94					TKW_SLASH                    = $94 ; /
=$95					TKW_MOD                      = $95 ; mod
=$96					TKW_HAT                      = $96 ; ^
=$97					TKW_PLING                    = $97 ; !
=$98					TKW_QMARK                    = $98 ; ?
=$99					TKW_REPEAT                   = $99 ; repeat
=$9a					TKW_WHILE                    = $9a ; while
=$9b					TKW_FOR                      = $9b ; for
=$9c					TKW_IF                       = $9c ; if
=$9d					TKW_DEFPROC                  = $9d ; defproc
=$9e					TKW_UNTIL                    = $9e ; until
=$9f					TKW_WEND                     = $9f ; wend
=$a0					TKW_NEXT                     = $a0 ; next
=$a1					TKW_THEN                     = $a1 ; then
=$a2					TKW_ENDIF                    = $a2 ; endif
=$a3					TKW_ENDPROC                  = $a3 ; endproc
=$a4					TKW_LPAREN                   = $a4 ; (
=$a5					TKW_LENLPAREN                = $a5 ; len(
=$a6					TKW_SGNLPAREN                = $a6 ; sgn(
=$a7					TKW_ABSLPAREN                = $a7 ; abs(
=$a8					TKW_RANDOMLPAREN             = $a8 ; random(
=$a9					TKW_PAGE                     = $a9 ; page
=$aa					TKW_TRUE                     = $aa ; true
=$ab					TKW_FALSE                    = $ab ; false
=$ac					TKW_MINLPAREN                = $ac ; min(
=$ad					TKW_MAXLPAREN                = $ad ; max(
=$ae					TKW_SYSLPAREN                = $ae ; sys(
=$af					TKW_TIMERLPAREN              = $af ; timer(
=$b0					TKW_EVENTLPAREN              = $b0 ; event(
=$b1					TKW_GETLPAREN                = $b1 ; get(
=$b2					TKW_INKEYLPAREN              = $b2 ; inkey(
=$b3					TKW_ALLOCLPAREN              = $b3 ; alloc(
=$b4					TKW_CHRDOLLARLPAREN          = $b4 ; chr$(
=$b5					TKW_LEFTDOLLARLPAREN         = $b5 ; left$(
=$b6					TKW_MIDDOLLARLPAREN          = $b6 ; mid$(
=$b7					TKW_RIGHTDOLLARLPAREN        = $b7 ; right$(
=$b8					TKW_STRDOLLARLPAREN          = $b8 ; str$(
=$b9					TKW_VALLPAREN                = $b9 ; val(
=$ba					TKW_PEEKLPAREN               = $ba ; peek(
=$bb					TKW_DEEKLPAREN               = $bb ; deek(
=$bc					TKW_LEEKLPAREN               = $bc ; leek(
=$bd					TKW_ASCLPAREN                = $bd ; asc(
=$be					TKW_INTLPAREN                = $be ; int(
=$bf					TKW_FLOATLPAREN              = $bf ; float(
=$c0					TKW_ISVALLPAREN              = $c0 ; isval(
=$c1					TKW_UPPERDOLLARLPAREN        = $c1 ; upper$(
=$c2					TKW_LOWERDOLLARLPAREN        = $c2 ; lower$(
=$c3					TKW_AT                       = $c3 ; @
=$c4					TKW_WAVY                     = $c4 ; ~
=$c5					TKW_AMP                      = $c5 ; &
=$c6					TKW_GETDOLLARLPAREN          = $c6 ; get$(
=$c7					TKW_INKEYDOLLARLPAREN        = $c7 ; inkey$(
=$c8					TKW_MEM                      = $c8 ; mem
=$c9					TKW_RPAREN                   = $c9 ; )
=$ca					TKW_COLON                    = $ca ; :
=$cb					TKW_COMMA                    = $cb ; ,
=$cc					TKW_SEMICOLON                = $cc ; ;
=$cd					TKW_QUOTE                    = $cd ; '
=$ce					TKW_TO                       = $ce ; to
=$cf					TKW_STEP                     = $cf ; step
=$d0					TKW_PROC                     = $d0 ; proc
=$d1					TKW_LOCAL                    = $d1 ; local
=$d2					TKW_DIM                      = $d2 ; dim
=$d3					TKW_REM                      = $d3 ; rem
=$d4					TKW_LET                      = $d4 ; let
=$d5					TKW_INPUT                    = $d5 ; input
=$d6					TKW_ELSE                     = $d6 ; else
=$d7					TKW_VDU                      = $d7 ; vdu
=$d8					TKW_PRINT                    = $d8 ; print
=$d9					TKW_GOTO                     = $d9 ; goto
=$da					TKW_GOSUB                    = $da ; gosub
=$db					TKW_RETURN                   = $db ; return
=$dc					TKW_DATA                     = $dc ; data
=$dd					TKW_ASSERT                   = $dd ; assert
=$de					TKW_POKE                     = $de ; poke
=$df					TKW_DOKE                     = $df ; doke
=$e0					TKW_LOKE                     = $e0 ; loke
=$e1					TKW_INK                      = $e1 ; ink
=$e2					TKW_PAPER                    = $e2 ; paper
=$e3					TKW_CLS                      = $e3 ; cls
=$e4					TKW_LOCATE                   = $e4 ; locate
=$e5					TKW_BREAK                    = $e5 ; break
=$e6					TKW_PERIOD                   = $e6 ; .
=$e7					TKW_HASH                     = $e7 ; #
=$86					TKW_CLEAR                    = $86 ; clear
=$87					TKW_LOAD                     = $87 ; load
=$88					TKW_SAVE                     = $88 ; save
=$89					TKW_LIST                     = $89 ; list
=$8a					TKW_NEW                      = $8a ; new
=$8b					TKW_RUN                      = $8b ; run
=$8c					TKW_READ                     = $8c ; read
=$8d					TKW_RESTORE                  = $8d ; restore
=$8e					TKW_END                      = $8e ; end
=$8f					TKW_STOP                     = $8f ; stop
=$90					TKW_XEMU                     = $90 ; xemu
=$91					TKW_ORA                      = $91 ; ora
=$92					TKW_LPARENANDRPAREN          = $92 ; (and)
=$93					TKW_EOR                      = $93 ; eor
=$94					TKW_ADC                      = $94 ; adc
=$95					TKW_STA                      = $95 ; sta
=$96					TKW_LDA                      = $96 ; lda
=$97					TKW_CMP                      = $97 ; cmp
=$98					TKW_SBC                      = $98 ; sbc
=$99					TKW_ASL                      = $99 ; asl
=$9a					TKW_ROL                      = $9a ; rol
=$9b					TKW_LSR                      = $9b ; lsr
=$9c					TKW_ROR                      = $9c ; ror
=$9d					TKW_STX                      = $9d ; stx
=$9e					TKW_LDX                      = $9e ; ldx
=$9f					TKW_DEC                      = $9f ; dec
=$a0					TKW_INC                      = $a0 ; inc
=$a1					TKW_STZ                      = $a1 ; stz
=$a2					TKW_BIT                      = $a2 ; bit
=$a3					TKW_STY                      = $a3 ; sty
=$a4					TKW_LDY                      = $a4 ; ldy
=$a5					TKW_CPY                      = $a5 ; cpy
=$a6					TKW_CPX                      = $a6 ; cpx
=$a7					TKW_TSB                      = $a7 ; tsb
=$a8					TKW_TRB                      = $a8 ; trb
=$a9					TKW_JSR                      = $a9 ; jsr
=$aa					TKW_JMP                      = $aa ; jmp
=$ab					TKW_BPL                      = $ab ; bpl
=$ac					TKW_BMI                      = $ac ; bmi
=$ad					TKW_BVC                      = $ad ; bvc
=$ae					TKW_BVS                      = $ae ; bvs
=$af					TKW_BCC                      = $af ; bcc
=$b0					TKW_BCS                      = $b0 ; bcs
=$b1					TKW_BNE                      = $b1 ; bne
=$b2					TKW_BEQ                      = $b2 ; beq
=$b3					TKW_BRA                      = $b3 ; bra
=$b4					TKW_BRK                      = $b4 ; brk
=$b5					TKW_PHP                      = $b5 ; php
=$b6					TKW_CLC                      = $b6 ; clc
=$b7					TKW_PLP                      = $b7 ; plp
=$b8					TKW_SEC                      = $b8 ; sec
=$b9					TKW_RTI                      = $b9 ; rti
=$ba					TKW_PHA                      = $ba ; pha
=$bb					TKW_CLI                      = $bb ; cli
=$bc					TKW_PHY                      = $bc ; phy
=$bd					TKW_RTS                      = $bd ; rts
=$be					TKW_PLA                      = $be ; pla
=$bf					TKW_SEI                      = $bf ; sei
=$c0					TKW_PLY                      = $c0 ; ply
=$c1					TKW_DEY                      = $c1 ; dey
=$c2					TKW_TXA                      = $c2 ; txa
=$c3					TKW_TYA                      = $c3 ; tya
=$c4					TKW_TXS                      = $c4 ; txs
=$c5					TKW_TAY                      = $c5 ; tay
=$c6					TKW_TAX                      = $c6 ; tax
=$c7					TKW_CLV                      = $c7 ; clv
=$c8					TKW_TSX                      = $c8 ; tsx
=$c9					TKW_INY                      = $c9 ; iny
=$ca					TKW_DEX                      = $ca ; dex
=$cb					TKW_CLD                      = $cb ; cld
=$cc					TKW_PHX                      = $cc ; phx
=$cd					TKW_INX                      = $cd ; inx
=$ce					TKW_NOP                      = $ce ; nop
=$cf					TKW_SED                      = $cf ; sed
=$d0					TKW_PLX                      = $d0 ; plx
=$86					TKW_VPOKE                    = $86 ; vpoke
=$87					TKW_VDOKE                    = $87 ; vdoke
=$88					TKW_VLOAD                    = $88 ; vload
=$89					TKW_MODE                     = $89 ; mode
=$86					TKW_VPEEKLPAREN              = $86 ; vpeek(
=$87					TKW_VDEEKLPAREN              = $87 ; vdeek(

;******  Return to file: header/03data.inc

=$3a					TYPE_INT =		($3A) 						; type bytes that end identifier.
=$3b					TYPE_INTARRAY =	($3B)
=$3c					TYPE_STR =		($3C)
=$3d					TYPE_STRARRAY =	($3D)
=$3e					TYPE_FLOAT =	($3E)
=$3f					TYPE_FLOATARRAY=($3F)

;******  Processing file: header/../generated/asmconst.inc

=$91					TKA_GROUP1 = $91
=$99					TKA_GROUP2 = $99
=$ab					TKA_GROUP3 = $ab
=$b4					TKA_GROUP4 = $b4
=$d1					TKA_END4 = $d1

;******  Return to file: header/03data.inc


;******  Return to file: basic.asm


;******  Processing file: header/header.inc


;******  Return to file: basic.asm


;******  Processing file: assembler/asmconst.inc

=0					AMD_IMM		= 0					; Immediate mode.
=1					AMD_ZERO 	= 1					; Zero Page
=2					AMD_ACCIMP	= 2					; Accumulator/Implied
=3					AMD_ABS 	= 3					; Absolute
=4					AMD_ZEROINDY= 4					; Zero Indirect,Y
=5					AMD_ZEROX 	= 5					; Zero Page,X
=6					AMD_ABSY 	= 6					; Absolute,Y
=7					AMD_ABSX 	= 7					; Absolute,X
=8					AMD_ZEROIND = 8					; Zero Indirect
=9					AMD_ZEROY 	= 9					; Zero Page,Y
=10					AMD_ABSIND 	= 10				; Absolute Indirect
=11					AMD_ABSINDX	= 11				; Absolute Indirect Indexed
=12					AMD_REL		= 12				; Relative
=13					AMD_ZEROINDX= 13 				; Zero Indirect,X

;******  Return to file: basic.asm


;******  Processing file: assembler/assembler.inc


;******  Return to file: basic.asm


;******  Processing file: device/device.inc


;******  Return to file: basic.asm


;******  Processing file: error/error.inc


;******  Return to file: basic.asm


;******  Processing file: error/errorhandler.inc


;******  Processing file: error/../generated/errorid.inc

=1					ErrorID_Missing = 1 ; Feature not Present
=2					ErrorID_Syntax = 2 ; Syntax Error
=3					ErrorID_NoModule = 3 ; Module disabled
=4					ErrorID_Assert = 4 ; Assertion failed
=5					ErrorID_DivZero = 5 ; Divide By Zero
=6					ErrorID_Stop = 6 ; Stop
=7					ErrorID_BadType = 7 ; Type Mismatch
=8					ErrorID_BadValue = 8 ; Illegal Value
=9					ErrorID_MissingRP = 9 ; Missing right bracket
=10					ErrorID_MissingComma = 10 ; Missing comma
=11					ErrorID_NoReference = 11 ; Missing reference
=12					ErrorID_LineNumber = 12 ; Line Number not found
=13					ErrorID_StrLen = 13 ; String too long
=14					ErrorID_ReturnErr = 14 ; RETURN without GOSUB
=15					ErrorID_UntilErr = 15 ; UNTIL without REPEAT
=16					ErrorID_NextErr = 16 ; NEXT without FOR
=17					ErrorID_WendErr = 17 ; WEND without WHILE
=18					ErrorID_endprocErr = 18 ; ENDPROC without PROC
=19					ErrorID_BadIndex = 19 ; Bad NEXT index
=20					ErrorID_Struct = 20 ; Structures nested wrong
=21					ErrorID_NoAuto = 21 ; Cannot create variable
=22					ErrorID_RetStack = 22 ; Return stack out of space
=23					ErrorID_NoProc = 23 ; Unknown Procedure
=24					ErrorID_Params = 24 ; Parameters do not match
=25					ErrorID_DupArray = 25 ; Array already defined
=26					ErrorID_NotArray = 26 ; DIM requires array
=27					ErrorID_ArrayIndex = 27 ; Bad array index
=28					ErrorID_ArrayDepth = 28 ; Wrong number of array indices
=29					ErrorID_DataError = 29 ; Out of data
=30					ErrorID_Tokenise = 30 ; Cannot tokenise line
=31					ErrorID_Save = 31 ; Save failed
=32					ErrorID_Load = 32 ; Load failed
=33					ErrorID_Break = 33 ; Break
=34					ErrorID_Memory = 34 ; Out of memory
=35					ErrorID_NumStack = 35 ; Expression too complex
=36					ErrorID_Assembler = 36 ; Bad Operand/Mode
=37					ErrorID_Branch = 37 ; Branch out of range
=38					ErrorID_Label = 38 ; Label changed value

;******  Return to file: error/errorhandler.inc


;******  Return to file: basic.asm


;******  Processing file: extension/extension.inc


;******  Return to file: basic.asm


;******  Processing file: floatingpoint/float.inc

=5					FloatEmbeddedSize = 5

;******  Return to file: basic.asm


;******  Processing file: floatingpoint/floatingpoint.inc


;******  Return to file: basic.asm


;******  Processing file: interaction/interaction.inc


;******  Return to file: basic.asm


;******  Processing file: main/main.inc


;******  Return to file: basic.asm


;******  Processing file: string/functions/memory.inc

=252					MaxStringSize = 252

;******  Return to file: basic.asm


;******  Processing file: string/string.inc


;******  Return to file: basic.asm


;******  Processing file: tokeniser/detokenise/colouring.inc

=$84					LTYLineNumber = $84
=$82					LTYPunctuation = $82
=$87					LTYIdentifier = $87
=$86					LTYConstant = $86
=$83					LTYKeyword = $83
=$81					LTYString = $81

;******  Return to file: basic.asm


;******  Processing file: tokeniser/tokeniser.inc


;******  Return to file: basic.asm


;******  Processing file: variable/variable.inc


;******  Return to file: basic.asm


;******  Processing file: footer/footer.inc


;******  Return to file: basic.asm

.1000					section_start_header:

;******  Processing file: header/header.asm


;******  Processing file: header/00start.asm

.1000					Start:
.1000	4c 0a 10	jmp $100a			jmp 	GoColdStart 				; +0 	boot BASIC
.1003	4c 28 10	jmp $1028			jmp 	GoTokTest					; +3 	run tokeniser test code.
>1006	da 39						.word 	TokenTableAddress
.1008							else
>1008	00 00						.word 	0
.100a					GoColdStart:
.100a	a9 00		lda #$00			lda 	#(programMemory) & $FF
.100c	8d c8 0a	sta $0ac8			sta 	basePage
.100f	a9 41		lda #$41			lda 	#(programMemory) >> 8
.1011	8d c9 0a	sta $0ac9			sta 	1+(basePage)
.1014	a9 00		lda #$00			lda 	#(endOfMemory) & $FF
.1016	8d cc 0a	sta $0acc			sta 	endMemory
.1019	a9 9f		lda #$9f			lda 	#(endOfMemory) >> 8
.101b	8d cd 0a	sta $0acd			sta 	1+(endMemory)
.101e	a2 06		ldx #$06		ldx	#6
.1020	20 bf 14	jsr $14bf		jsr	deviceHandler
.1023	a2 00		ldx #$00		ldx	#0
.1025	20 cd 1b	jsr $1bcd		jsr	interactionHandler
.1028					GoTokTest:
.1028	a2 04		ldx #$04		ldx	#4
.102a	20 11 3d	jsr $3d11		jsr	tokeniserHandler

;******  Return to file: header/header.asm


;******  Return to file: basic.asm

.102d					section_end_header:
.102d					section_start_assembler:

;******  Processing file: assembler/assembler.asm


;******  Processing file: assembler/asmoperand.asm

.102d					AsmGetOperand:
.102d	a2 00		ldx #$00			ldx 	#0 							; clear the operand.
.102f	8a		txa				txa
.1030	95 50		sta $50,x			sta 	esInt0,x
.1032	95 58		sta $58,x			sta 	esInt1,x
.1034	95 60		sta $60,x			sta 	esInt2,x
.1036	95 68		sta $68,x			sta 	esInt3,x
.1038	b1 28		lda ($28),y			lda 	(codePtr),y 				; first into X
.103a	aa		tax				tax
.103b	a9 02		lda #$02			lda 	#AMD_ACCIMP
.103d	e0 80		cpx #$80			cpx 	#TOK_EOL 					; if end of line or colon, return implied mode.
.103f	f0 41		beq $1082			beq 	_AGOExit
.1041	e0 ca		cpx #$ca			cpx 	#TKW_COLON
.1043	f0 3d		beq $1082			beq 	_AGOExit
.1045	c8		iny				iny 								; consume the token
.1046	a9 00		lda #$00			lda 	#AMD_IMM
.1048	e0 e7		cpx #$e7			cpx 	#TKW_HASH 					; if a hash present, then immediate mode.
.104a	f0 2d		beq $1079			beq		_AGOEvalExit 				; with an operand.
.104c	e0 a4		cpx #$a4			cpx 	#TKW_LPAREN 				; left bracket ?
.104e	f0 40		beq $1090			beq 	_AGOIndirect
.1050	e0 01		cpx #$01			cpx 	#$01 						; is it "A" e.g. the variable A.
.1052	d0 0b		bne $105f			bne 	_AGOZeroPage1 				; if not it is zero zero,x zero,y, unpick 1 iny
.1054	b1 28		lda ($28),y			lda 	(codePtr),y 				; get the second character & consume it
.1056	c8		iny				iny
.1057	aa		tax				tax
.1058	a9 02		lda #$02			lda 	#AMD_ACCIMP 				; and return Acc/Implied if it is just A
.105a	e0 3a		cpx #$3a			cpx 	#$3A
.105c	f0 24		beq $1082			beq 	_AGOExit
.105e	88		dey				dey 								; unpick 2 iny
.105f					_AGOZeroPage1:
.105f	88		dey				dey
.1060	a9 00		lda #$00			lda 	#0 							; get the address into esInt0/1
.1062	a2 06		ldx #$06		ldx	#6
.1064	20 58 32	jsr $3258		jsr	mainHandler
.1067	20 bf 10	jsr $10bf			jsr 	AsmGetIndexing
.106a	a9 01		lda #$01			lda 	#AMD_ZERO
.106c	90 14		bcc $1082			bcc 	_AGOExit
.106e	a9 05		lda #$05			lda 	#AMD_ZEROX
.1070	e0 00		cpx #$00			cpx 	#0
.1072	f0 0e		beq $1082			beq 	_AGOExit
.1074	a9 09		lda #$09			lda 	#AMD_ZEROY
.1076	4c 82 10	jmp $1082			jmp 	_AGOExit
.1079					_AGOEvalExit:
.1079	48		pha				pha
.107a	a9 00		lda #$00			lda 	#0 							; evaluate operand in root.
.107c	a2 06		ldx #$06		ldx	#6
.107e	20 58 32	jsr $3258		jsr	mainHandler
.1081	68		pla				pla
.1082					_AGOExit:
.1082	48		pha				pha 								; save the mode
.1083	a5 60		lda $60				lda 	esInt2 						; check the operand is zero.
.1085	05 68		ora $68				ora 	esInt3
.1087	d0 02		bne $108b			bne 	_AGOValue
.1089	68		pla				pla
.108a	60		rts				rts
.108b					_AGOValue:
.108b	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.108d	20 e0 14	jsr $14e0		jsr	errorHandler
.1090					_AGOIndirect:
.1090	a9 00		lda #$00			lda 	#0 							; evaluate operand in root.
.1092	a2 06		ldx #$06		ldx	#6
.1094	20 58 32	jsr $3258		jsr	mainHandler
.1097	b1 28		lda ($28),y			lda 	(codePtr),y 				; does ) follow ? if so might be ) or ),Y
.1099	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.109b	f0 11		beq $10ae			beq 	_AGOIndIndY
.109d	20 bf 10	jsr $10bf			jsr 	ASMGetIndexing 				; must be ,X)
.10a0	90 39		bcc $10db			bcc 	AGISyntax
.10a2	e0 00		cpx #$00			cpx 	#0
.10a4	d0 35		bne $10db			bne 	AGISyntax
.10a6	a2 00		ldx #$00		ldx	#0
.10a8	20 58 32	jsr $3258		jsr	mainHandler
.10ab	a9 0d		lda #$0d			lda 	#AMD_ZEROINDX
.10ad	60		rts				rts
.10ae					_AGOIndIndY:
.10ae	c8		iny				iny
.10af	20 bf 10	jsr $10bf			jsr 	ASMGetIndexing 				; get indexing if any
.10b2	a9 08		lda #$08			lda 	#AMD_ZEROIND
.10b4	90 cc		bcc $1082			bcc 	_AGOExit 					; none then exit
.10b6	e0 00		cpx #$00			cpx 	#0 							; must be ,Y
.10b8	f0 21		beq $10db			beq 	AGISyntax
.10ba	a9 04		lda #$04			lda 	#AMD_ZEROINDY
.10bc	4c 82 10	jmp $1082			jmp 	_AGOExit
.10bf					AsmGetIndexing:
.10bf	b1 28		lda ($28),y			lda 	(codePtr),y 				; check for comma
.10c1	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.10c3	18		clc				clc
.10c4	d0 14		bne $10da			bne 	_AGIExit 					; no comma, return with CC
.10c6	c8		iny				iny 								; get what SHOULD be X or Y
.10c7	b1 28		lda ($28),y			lda 	(codePtr),y  				; read it
.10c9	38		sec				sec 								; subtract 6 bit ASCII of X
.10ca	e9 18		sbc #$18			sbc 	#"X" & $3F
.10cc	c9 02		cmp #$02			cmp 	#2 							; if unsigned >= 2 then error
.10ce	b0 0b		bcs $10db			bcs 	AGISyntax
.10d0	aa		tax				tax 								; put in index
.10d1	c8		iny				iny 								; get what follows that, should be the $3A marker
.10d2	b1 28		lda ($28),y			lda 	(codePtr),y
.10d4	c8		iny				iny
.10d5	c9 3a		cmp #$3a			cmp 	#$3A
.10d7	d0 02		bne $10db			bne 	AGISyntax
.10d9	38		sec				sec 								; return CS and index mode in X
.10da					_AGIExit:
.10da	60		rts				rts
.10db					AGISyntax:
.10db	a2 02		ldx #$02			ldx 	#ErrorID_syntax
.10dd	20 e0 14	jsr $14e0		jsr	errorHandler

;******  Return to file: assembler/assembler.asm


;******  Processing file: assembler/asmwrite.asm

.0af2					finalOpcode:
>0af2							.fill 	1
.10e0					AsmWriteInstruction:
.10e0	8d f2 0a	sta $0af2			sta 	finalOpcode					; save opcode.
.10e3	98		tya				tya
.10e4	48		pha				pha
.10e5	ad 38 0a	lda $0a38			lda 	SingleLetterVar+("O"-"A")*4	; check O
.10e8	29 02		and #$02			and 	#2
.10ea	f0 2d		beq $1119			beq 	_ASMWNoEcho 				; if zero then don't echo.
.10ec	ad 3d 0a	lda $0a3d			lda 	SingleLetterVar+("P"-"A")*4+1 ; write address in P
.10ef	20 54 11	jsr $1154			jsr 	AWIWriteHex
.10f2	ad 3c 0a	lda $0a3c			lda 	SingleLetterVar+("P"-"A")*4
.10f5	20 54 11	jsr $1154			jsr 	AWIWriteHex
.10f8	ad f2 0a	lda $0af2			lda 	finalOpcode 				; write opcode
.10fb	20 4d 11	jsr $114d			jsr 	AWIWriteHexSpace
.10fe	e0 00		cpx #$00			cpx 	#0
.1100	f0 0e		beq $1110			beq 	_ASMWEchoExit
.1102	a5 50		lda $50				lda 	esInt0
.1104	20 4d 11	jsr $114d			jsr 	AWIWriteHexSpace
.1107	e0 01		cpx #$01			cpx 	#1
.1109	f0 05		beq $1110			beq 	_ASMWEchoExit
.110b	a5 58		lda $58				lda 	esInt1
.110d	20 4d 11	jsr $114d			jsr 	AWIWriteHexSpace
.1110					_ASMWEchoExit:
.1110	8a		txa				txa
.1111	48		pha				pha
.1112	a2 04		ldx #$04		ldx	#4
.1114	20 bf 14	jsr $14bf		jsr	deviceHandler
.1117	68		pla				pla
.1118	aa		tax				tax
.1119					_ASMWNoEcho:
.1119	ad f2 0a	lda $0af2			lda 	finalOpcode
.111c	20 34 11	jsr $1134			jsr 	AsmWriteByte
.111f	e0 00		cpx #$00			cpx 	#0
.1121	f0 0e		beq $1131			beq 	_ASMWExit
.1123	a5 50		lda $50				lda 	esInt0
.1125	20 34 11	jsr $1134			jsr 	AsmWriteByte
.1128	e0 01		cpx #$01			cpx 	#1
.112a	f0 05		beq $1131			beq 	_ASMWExit
.112c	a5 58		lda $58				lda 	esInt1
.112e	20 34 11	jsr $1134			jsr 	AsmWriteByte
.1131					_ASMWExit:
.1131	68		pla				pla
.1132	a8		tay				tay
.1133	60		rts				rts
.1134					AsmWriteByte:
.1134	a0 00		ldy #$00			ldy 	#0
.1136	48		pha				pha
.1137	ad 3c 0a	lda $0a3c			lda 	SingleLetterVar+("P"-"A")*4 ; copy address to temp0
.113a	85 2a		sta $2a				sta 	temp0
.113c	ad 3d 0a	lda $0a3d			lda 	SingleLetterVar+("P"-"A")*4+1
.113f	85 2b		sta $2b				sta 	temp0+1
.1141	68		pla				pla 								; write out the byte.
.1142	91 2a		sta ($2a),y			sta 	(temp0),y
.1144	ee 3c 0a	inc $0a3c			inc 	SingleLetterVar+("P"-"A")*4	; increment P
.1147	d0 03		bne $114c			bne 	_AWBNoCarry
.1149	ee 3d 0a	inc $0a3d			inc 	SingleLetterVar+("P"-"A")*4+1
.114c					_AWBNoCarry:
.114c	60		rts				rts
.114d					AWIWriteHexSpace:
.114d	48		pha				pha
.114e	a9 20		lda #$20			lda 	#" "
.1150	20 67 11	jsr $1167			jsr 	AWIPrintChar
.1153	68		pla				pla
.1154					AWIWriteHex:
.1154	48		pha				pha
.1155	4a		lsr a				lsr 	a
.1156	4a		lsr a				lsr 	a
.1157	4a		lsr a				lsr 	a
.1158	4a		lsr a				lsr 	a
.1159	20 5d 11	jsr $115d			jsr 	AWIPrintNibble
.115c	68		pla				pla
.115d					AWIPrintNibble:
.115d	29 0f		and #$0f			and 	#15
.115f	c9 0a		cmp #$0a			cmp 	#10
.1161	90 02		bcc $1165			bcc 	_AWIPNDigit
.1163	69 06		adc #$06			adc 	#6
.1165					_AWIPNDigit:
.1165	69 30		adc #$30			adc 	#48
.1167					AWIPrintChar:
.1167	85 32		sta $32				sta 	tempShort
.1169	8a		txa				txa
.116a	48		pha				pha
.116b	a5 32		lda $32				lda 	tempShort
.116d	a2 16		ldx #$16		ldx	#22
.116f	20 bf 14	jsr $14bf		jsr	deviceHandler
.1172	68		pla				pla
.1173	aa		tax				tax
.1174	60		rts				rts

;******  Return to file: assembler/assembler.asm


;******  Processing file: assembler/assemblecmd.asm

.0af3					asmToken:
>0af3							.fill 	1
.0af4					asmMode:
>0af4							.fill 	1 							; esInt0/1
.0af5					asmBaseOpcode:
>0af5							.fill 	1
.1175					AssembleOneInstruction:
.1175	8d f3 0a	sta $0af3			sta 	asmToken 					; save the token
.1178	aa		tax				tax
.1179	bd 45 11	lda $1145,x			lda 	OpcodeTable-TKA_GROUP1,x 	; get the base opcode.
.117c	8d f5 0a	sta $0af5			sta 	asmBaseOpcode
.117f	20 2d 10	jsr $102d			jsr 	AsmGetOperand 				; identify the address mode and operand where applicable.
.1182	8d f4 0a	sta $0af4			sta 	asmMode
.1185	a5 58		lda $58				lda 	esInt1 						; check if this is a three byte operand.
.1187	d0 05		bne $118e			bne 	_AOIThreeBytes 				; if so, we have to use three byte
.1189	20 a4 11	jsr $11a4			jsr 	AssembleAttempt 			; try to assemble token/mode/operand (2 bytes)
.118c	b0 10		bcs $119e			bcs 	_AOISuccess 				; worked ok.
.118e					_AOIThreeBytes:
.118e	ae f4 0a	ldx $0af4			ldx 	asmMode 					; convert mode to 3 byte version, where possible.
.1191	bd c8 11	lda $11c8,x			lda 	AbsoluteVersionTable,x
.1194	30 09		bmi $119f			bmi 	_AOIError					; not possible, no equivalent.
.1196	8d f4 0a	sta $0af4			sta 	asmMode
.1199	20 a4 11	jsr $11a4			jsr 	AssembleAttempt 			; try to assemble token/mode/operand (3 bytes)
.119c	90 01		bcc $119f			bcc 	_AOIError 					; didn't work.
.119e					_AOISuccess:
.119e	60		rts				rts
.119f					_AOIError:
.119f	a2 24		ldx #$24			ldx 	#ErrorID_Assembler
.11a1	20 e0 14	jsr $14e0		jsr	errorHandler
.11a4					AssembleAttempt:
.11a4	20 ad 11	jsr $11ad			jsr 	_AADispatch 				; go to the code which dispatches to the appropriate
.11a7	b0 03		bcs $11ac			bcs 	_AAExit 					; exit if carry set, e.g. was successful
.11a9	20 57 13	jsr $1357			jsr 	AssembleSpecialCase
.11ac					_AAExit:
.11ac	60		rts				rts
.11ad					_AADispatch:
.11ad	ad f3 0a	lda $0af3			lda 	asmToken
.11b0	c9 b4		cmp #$b4			cmp 	#TKA_GROUP4
.11b2	b0 11		bcs $11c5			bcs 	_AAGroup4
.11b4	c9 ab		cmp #$ab			cmp 	#TKA_GROUP3
.11b6	b0 0a		bcs $11c2			bcs 	_AAGroup3
.11b8	c9 99		cmp #$99			cmp 	#TKA_GROUP2
.11ba	b0 03		bcs $11bf			bcs 	_AAGroup2
.11bc	4c 9d 12	jmp $129d			jmp 	AssembleGroup1
.11bf					_AAGroup2:
.11bf	4c f8 12	jmp $12f8			jmp 	AssembleGroup2
.11c2					_AAGroup3:
.11c2	4c 19 13	jmp $1319			jmp 	AssembleGroup3
.11c5					_AAGroup4:
.11c5	4c 4d 13	jmp $134d			jmp 	AssembleGroup4
.11c8					AbsoluteVersionTable:
>11c8	ff						.byte	$FF 			; fail AMD_IMM
>11c9	03						.byte	AMD_ABS 		; absolute AMD_ZERO
>11ca	ff						.byte	$FF 			; fail AMD_ACCIMP
>11cb	ff						.byte	$FF 			; fail AMD_ABS
>11cc	ff						.byte 	$FF 			; fail AMD_ZEROINDY
>11cd	07						.byte	AMD_ABSX 		; absolute AMD_ZEROX
>11ce	ff						.byte	$FF 			; fail AMD_ABSY
>11cf	ff						.byte	$FF 			; fail AMD_ABSX
>11d0	0a						.byte	AMD_ABSIND 		; absolute AMD_ZEROIND
>11d1	06						.byte	AMD_ABSY 		; absolute AMD_ZEROY
>11d2	ff						.byte	$FF 			; fail AMD_ABSIND
>11d3	ff						.byte	$FF 			; fail AMD_ABSINDX
>11d4	ff						.byte	$FF 			; fail AMD_REL
>11d5	0b						.byte 	AMD_ABSINDX 	; absolute AMD_ZEROINDX

;******  Processing file: assembler/../generated/asmtables.inc

.11d6					OpcodeTable:
>11d6	01					.byte	$01			; $91 ora
>11d7	21					.byte	$21			; $92 (and)
>11d8	41					.byte	$41			; $93 eor
>11d9	61					.byte	$61			; $94 adc
>11da	81					.byte	$81			; $95 sta
>11db	a1					.byte	$a1			; $96 lda
>11dc	c1					.byte	$c1			; $97 cmp
>11dd	e1					.byte	$e1			; $98 sbc
>11de	02					.byte	$02			; $99 asl
>11df	22					.byte	$22			; $9a rol
>11e0	42					.byte	$42			; $9b lsr
>11e1	62					.byte	$62			; $9c ror
>11e2	82					.byte	$82			; $9d stx
>11e3	a2					.byte	$a2			; $9e ldx
>11e4	c2					.byte	$c2			; $9f dec
>11e5	e2					.byte	$e2			; $a0 inc
>11e6	60					.byte	$60			; $a1 stz
>11e7	20					.byte	$20			; $a2 bit
>11e8	80					.byte	$80			; $a3 sty
>11e9	a0					.byte	$a0			; $a4 ldy
>11ea	c0					.byte	$c0			; $a5 cpy
>11eb	e0					.byte	$e0			; $a6 cpx
>11ec	00					.byte	$00			; $a7 tsb
>11ed	10					.byte	$10			; $a8 trb
>11ee	14					.byte	$14			; $a9 jsr
>11ef	40					.byte	$40			; $aa jmp
>11f0	10					.byte	$10			; $ab bpl
>11f1	30					.byte	$30			; $ac bmi
>11f2	50					.byte	$50			; $ad bvc
>11f3	70					.byte	$70			; $ae bvs
>11f4	90					.byte	$90			; $af bcc
>11f5	b0					.byte	$b0			; $b0 bcs
>11f6	d0					.byte	$d0			; $b1 bne
>11f7	f0					.byte	$f0			; $b2 beq
>11f8	80					.byte	$80			; $b3 bra
>11f9	00					.byte	$00			; $b4 brk
>11fa	08					.byte	$08			; $b5 php
>11fb	18					.byte	$18			; $b6 clc
>11fc	28					.byte	$28			; $b7 plp
>11fd	38					.byte	$38			; $b8 sec
>11fe	40					.byte	$40			; $b9 rti
>11ff	48					.byte	$48			; $ba pha
>1200	58					.byte	$58			; $bb cli
>1201	5a					.byte	$5a			; $bc phy
>1202	60					.byte	$60			; $bd rts
>1203	68					.byte	$68			; $be pla
>1204	78					.byte	$78			; $bf sei
>1205	7a					.byte	$7a			; $c0 ply
>1206	88					.byte	$88			; $c1 dey
>1207	8a					.byte	$8a			; $c2 txa
>1208	98					.byte	$98			; $c3 tya
>1209	9a					.byte	$9a			; $c4 txs
>120a	a8					.byte	$a8			; $c5 tay
>120b	aa					.byte	$aa			; $c6 tax
>120c	b8					.byte	$b8			; $c7 clv
>120d	ba					.byte	$ba			; $c8 tsx
>120e	c8					.byte	$c8			; $c9 iny
>120f	ca					.byte	$ca			; $ca dex
>1210	d8					.byte	$d8			; $cb cld
>1211	da					.byte	$da			; $cc phx
>1212	e8					.byte	$e8			; $cd inx
>1213	ea					.byte	$ea			; $ce nop
>1214	f8					.byte	$f8			; $cf sed
>1215	fa					.byte	$fa			; $d0 plx
.1216					Group2OpcodeAvailability:
>1216	ae					.byte	$ae			; $99 asl $02
>1217	ae					.byte	$ae			; $9a rol $22
>1218	ae					.byte	$ae			; $9b lsr $42
>1219	ae					.byte	$ae			; $9c ror $62
>121a	0a					.byte	$0a			; $9d stx $82
>121b	0b					.byte	$0b			; $9e ldx $a2
>121c	aa					.byte	$aa			; $9f dec $c2
>121d	aa					.byte	$aa			; $a0 inc $e2
>121e	22					.byte	$22			; $a1 stz $60
>121f	aa					.byte	$aa			; $a2 bit $20
>1220	2a					.byte	$2a			; $a3 sty $80
>1221	ab					.byte	$ab			; $a4 ldy $a0
>1222	2b					.byte	$2b			; $a5 cpy $c0
>1223	0b					.byte	$0b			; $a6 cpx $e0
>1224	0a					.byte	$0a			; $a7 tsb $00
>1225	0a					.byte	$0a			; $a8 trb $10
>1226	08					.byte	$08			; $a9 jsr $14
>1227	08					.byte	$08			; $aa jmp $40
.1228					AssemblerSpecialCases:
>1228	aa 0a 6c				.byte	$aa,10,$6c		; jmp (abs)
>122b	aa 0b 7c				.byte	$aa,11,$7c		; jmp (abs,x)
>122e	9e 06 be				.byte	$9e,6,$be		; ldx abs,y
>1231	9e 09 b6				.byte	$9e,9,$b6		; ldx zp,y
>1234	9d 09 96				.byte	$9d,9,$96		; stx zp,y
>1237	a0 02 1a				.byte	$a0,2,$1a		; inc acc
>123a	9f 02 3a				.byte	$9f,2,$3a		; dec acc
>123d	a2 00 89				.byte	$a2,0,$89		; bit #
>1240	a1 03 9c				.byte	$a1,3,$9c		; stz abs
>1243	a1 07 9e				.byte	$a1,7,$9e		; stz abs,x
>1246	00					.byte	0

;******  Return to file: assembler/assemblecmd.asm


;******  Return to file: assembler/assembler.asm


;******  Processing file: assembler/assemblelabel.asm

.1247					AssembleLabel:
.1247	b1 28		lda ($28),y			lda 	(codePtr),y 				; check it's followed by a variable name.
.1249	c9 3a		cmp #$3a			cmp 	#$3A
.124b	b0 4b		bcs $1298			bcs 	_ALSyntax
.124d	a9 00		lda #$00			lda 	#0							; get a variable name on to stack:0
.124f	a2 00		ldx #$00		ldx	#0
.1251	20 df 40	jsr $40df		jsr	variableHandler
.1254	a5 48		lda $48				lda 	esType 						; check integer reference
.1256	c9 80		cmp #$80			cmp 	#$80
.1258	d0 3e		bne $1298			bne 	_ALSyntax
.125a	a5 50		lda $50				lda 	esInt0 						; copy that reference address to temp0
.125c	85 2a		sta $2a				sta 	temp0
.125e	a5 58		lda $58				lda 	esInt1
.1260	85 2b		sta $2b				sta 	temp0+1
.1262	98		tya				tya
.1263	48		pha				pha
.1264	ad 38 0a	lda $0a38			lda 	SingleLetterVar+("O"-"A")*4	; are we in Pass 2
.1267	4a		lsr a				lsr 	a
.1268	90 11		bcc $127b			bcc 	_ALWrite
.126a	a0 00		ldy #$00			ldy 	#0
.126c	ad 3c 0a	lda $0a3c			lda 	SingleLetterVar+("P"-"A")*4 ; compare the value in P to the variable
.126f	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.1271	d0 20		bne $1293			bne 	_ALChanged
.1273	c8		iny				iny
.1274	ad 3d 0a	lda $0a3d			lda 	SingleLetterVar+("P"-"A")*4+1
.1277	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.1279	d0 18		bne $1293			bne 	_ALChanged
.127b					_ALWrite:
.127b	a0 00		ldy #$00			ldy 	#0
.127d	ad 3c 0a	lda $0a3c			lda 	SingleLetterVar+("P"-"A")*4 ; copy the value in P into the variable
.1280	91 2a		sta ($2a),y			sta 	(temp0),y
.1282	ad 3d 0a	lda $0a3d			lda 	SingleLetterVar+("P"-"A")*4+1
.1285	c8		iny				iny
.1286	91 2a		sta ($2a),y			sta 	(temp0),y
.1288	a9 00		lda #$00			lda 	#0
.128a	c8		iny				iny
.128b	91 2a		sta ($2a),y			sta 	(temp0),y
.128d	c8		iny				iny
.128e	91 2a		sta ($2a),y			sta 	(temp0),y
.1290	68		pla				pla
.1291	a8		tay				tay
.1292	60		rts				rts
.1293					_ALChanged:
.1293	a2 26		ldx #$26			ldx 	#ErrorID_Label
.1295	20 e0 14	jsr $14e0		jsr	errorHandler
.1298					_ALSyntax:
.1298	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.129a	20 e0 14	jsr $14e0		jsr	errorHandler

;******  Return to file: assembler/assembler.asm


;******  Processing file: assembler/subgroup.asm

.129d					AssembleGroup1:
.129d	ad f3 0a	lda $0af3			lda 	asmToken 					; firstly, we throw out STA immediate
.12a0	c9 95		cmp #$95			cmp 	#TKW_STA
.12a2	d0 07		bne $12ab			bne 	_AG1NotStoreImm
.12a4	ad f4 0a	lda $0af4			lda 	asmMode
.12a7	c9 00		cmp #$00			cmp 	#AMD_IMM
.12a9	f0 2c		beq $12d7			beq 	AG1ModeError
.12ab					_AG1NotStoreImm:
.12ab	ae f4 0a	ldx $0af4			ldx 	asmMode						; get mode into X.
.12ae	bd dc 12	lda $12dc,x			lda		AMDOperandSize,X 			; get the size of the operand and push on stack
.12b1	48		pha				pha
.12b2	f0 23		beq $12d7			beq 	AG1ModeError 				; if the size is zero, the mode must be Accumulator
.12b4	e0 00		cpx #$00			cpx 	#0 							; if the mode is zero, e.g. immediate
.12b6	d0 02		bne $12ba			bne 	_AG1NotImmediate
.12b8	a2 02		ldx #$02			ldx 	#2 							; then we use offset 2 here. This is how the 6502
.12ba					_AG1NotImmediate:
.12ba	e0 0d		cpx #$0d			cpx 	#AMD_ZEROINDX 				; (zero,x) uses slot 0.
.12bc	d0 02		bne $12c0			bne 	_AG1NotZX
.12be	a2 00		ldx #$00			ldx 	#0
.12c0					_AG1NotZX:
.12c0	68		pla				pla 								; restore length
.12c1	e0 09		cpx #$09			cpx 	#9 							; anything > 8 fails.
.12c3	b0 10		bcs $12d5			bcs 	AG1Fail
.12c5					AG1ReturnValue:
.12c5	85 32		sta $32				sta 	tempShort 					; save size of operand
.12c7	18		clc				clc
.12c8	bd ea 12	lda $12ea,x			lda 	AMDOffsetFromBase,X 		; get the offset for the address mode.
.12cb	6d f5 0a	adc $0af5			adc 	asmBaseOpcode 				; add the base opcode.
.12ce	a6 32		ldx $32				ldx 	tempShort 					; length in X
.12d0	20 e0 10	jsr $10e0			jsr 	AsmWriteInstruction 		; output instruction.
.12d3	38		sec				sec
.12d4	60		rts				rts
.12d5					AG1Fail:
.12d5	18		clc				clc
.12d6	60		rts				rts
.12d7					AG1ModeError:
.12d7	a2 24		ldx #$24			ldx 	#ErrorID_Assembler
.12d9	20 e0 14	jsr $14e0		jsr	errorHandler
.12dc					AMDOperandSize:
>12dc	01 01 00 02					.byte 	1,1,0,2
>12e0	01 01 02 02					.byte 	1,1,2,2
>12e4	01 01 02 02					.byte 	1,1,2,2
>12e8	01 01						.byte 	1,1
.12ea					AMDOffsetFromBase:
>12ea	00 04 08 0c					.byte 	0,4,8,12
>12ee	10 14 18 1c					.byte	16,20,24,28
>12f2	11 00 00 00					.byte 	17,0,0,0
>12f6	00 00						.byte 	0,0
.12f8					AssembleGroup2:
.12f8	ad f4 0a	lda $0af4			lda 	asmMode 					; get the mode; if >= 8 cannot be a legit group 2
.12fb	c9 08		cmp #$08			cmp 	#8
.12fd	b0 18		bcs $1317			bcs 	_AG2Fail
.12ff	85 2a		sta $2a				sta 	temp0 						; save in temp9
.1301	ae f3 0a	ldx $0af3			ldx 	asmToken					; get token in X, then get the availability flags for it
.1304	bd 7d 11	lda $117d,x			lda 	Group2OpcodeAvailability-TKA_GROUP2,x
.1307					_AG2Shift:
.1307	4a		lsr a				lsr 	a
.1308	c6 2a		dec $2a				dec 	temp0
.130a	10 fb		bpl $1307			bpl 	_AG2Shift
.130c	90 09		bcc $1317			bcc 	_AG2Fail 					; cannot do that instruction w/that opcode.
.130e	ae f4 0a	ldx $0af4			ldx  	asmMode 					; mode in X
.1311	bd dc 12	lda $12dc,x			lda		AMDOperandSize,X 			; get the size of the operand in A
.1314	4c c5 12	jmp $12c5			jmp 	AG1ReturnValue 				; and use that with Group 1's exit code
.1317					_AG2Fail:
.1317	18		clc				clc
.1318	60		rts				rts
.1319					AssembleGroup3:
.1319	ad 38 0a	lda $0a38			lda 	SingleLetterVar+("O"-"A")*4	; check bit 0 (pass) of O
.131c	4a		lsr a				lsr 	a
.131d	a9 00		lda #$00			lda 	#0 							; if clear, e.g. pass 1, use default zero.
.131f	90 21		bcc $1342			bcc 	_AG3Default
.1321	38		sec				sec	 								; calculate branch offset
.1322	a5 50		lda $50				lda		esInt0
.1324	ed 3c 0a	sbc $0a3c			sbc 	SingleLetterVar+("P"-"A")*4
.1327	aa		tax				tax
.1328	a5 58		lda $58				lda		esInt1
.132a	ed 3d 0a	sbc $0a3d			sbc 	SingleLetterVar+("P"-"A")*4+1
.132d	85 58		sta $58				sta 	esInt1
.132f	8a		txa				txa 								; add 126, now 128 too many.
.1330	18		clc				clc 								; we can use this to check the range
.1331	69 7e		adc #$7e			adc 	#126
.1333	85 50		sta $50				sta 	esInt0
.1335	90 02		bcc $1339			bcc 	_AG3NoCarry
.1337	e6 58		inc $58				inc 	esInt1
.1339					_AG3NoCarry:
.1339	a5 58		lda $58				lda 	esInt1 						; check in range.
.133b	d0 0b		bne $1348			bne 	_AG3Range
.133d	a5 50		lda $50				lda 	esInt0 						; fix up branch distance
.133f	38		sec				sec
.1340	e9 80		sbc #$80			sbc 	#128
.1342					_AG3Default:
.1342	85 50		sta $50				sta 	esInt0
.1344					_AG3ExitOk:
.1344	a2 01		ldx #$01			ldx 	#1 							; one opcode, use AG4 Code
.1346	d0 07		bne $134f			bne 	AG4Write
.1348					_AG3Range:
.1348	a2 25		ldx #$25			ldx 	#ErrorID_Branch
.134a	20 e0 14	jsr $14e0		jsr	errorHandler
.134d					AssembleGroup4:
.134d	a2 00		ldx #$00			ldx 	#0 							; no parameters in the opcode.
.134f					AG4Write:
.134f	ad f5 0a	lda $0af5			lda 	asmBaseOpcode				; the opcode is the opcode base.
.1352	20 e0 10	jsr $10e0			jsr 	AsmWriteInstruction 		; output instruction.
.1355	38		sec				sec
.1356	60		rts				rts
.1357					AssembleSpecialCase:
.1357	a2 00		ldx #$00			ldx 	#0
.1359					_ASCScan:
.1359	bd 28 12	lda $1228,x			lda 	AssemblerSpecialCases,x 	; scan token and mode for match
.135c	cd f3 0a	cmp $0af3			cmp 	asmToken
.135f	d0 08		bne $1369			bne 	_ASCNext
.1361	bd 29 12	lda $1229,x			lda 	AssemblerSpecialCases+1,x
.1364	cd f4 0a	cmp $0af4			cmp 	asmMode
.1367	f0 0a		beq $1373			beq 	_ASCFound
.1369					_ASCNext:
.1369	e8		inx				inx									; next entry
.136a	e8		inx				inx
.136b	e8		inx				inx
.136c	bd 28 12	lda $1228,x			lda 	AssemblerSpecialCases,x 	; until table ends
.136f	d0 e8		bne $1359			bne 	_ASCScan
.1371	18		clc				clc
.1372	60		rts				rts
.1373					_ASCFound:
.1373	bd 2a 12	lda $122a,x			lda 	AssemblerSpecialCases+2,x 	; get the new opcode.
.1376	48		pha				pha
.1377	ae f4 0a	ldx $0af4			ldx  	asmMode 					; mode in X
.137a	bd dc 12	lda $12dc,x			lda		AMDOperandSize,X 			; get the size of the operand in X
.137d	aa		tax				tax
.137e	68		pla				pla 								; opcode back
.137f	20 e0 10	jsr $10e0			jsr 	AsmWriteInstruction 		; output instruction.
.1382	38		sec				sec
.1383	60		rts				rts

;******  Return to file: assembler/assembler.asm

.1384					assemblerHandler:
.1384	7c 87 13	jmp ($1387,x)			jmp 	(assemblerVectors,x)
.1387					assemblerVectors:
>1387	75 11					.word AssembleOneInstruction ; index 0
>1389	47 12					.word AssembleLabel        ; index 2

;******  Return to file: basic.asm

.138b					section_end_assembler:
.138b					section_start_device:

;******  Processing file: device/device.asm


;******  Processing file: device/option_x16/x16break.asm

.138b					X16Break:
.138b	20 e1 ff	jsr $ffe1			jsr 	$FFE1
.138e	f0 01		beq $1391			beq 	_IsBreak
.1390	60		rts				rts
.1391					_IsBreak:
.1391	a2 21		ldx #$21			ldx 	#ErrorID_Break
.1393	20 e0 14	jsr $14e0		jsr	errorHandler

;******  Return to file: device/device.asm


;******  Processing file: device/option_x16/x16file.asm

.1396					ExternSave:
.1396	98		tya				tya
.1397	48		pha				pha
.1398	20 e6 13	jsr $13e6			jsr 	ExternGetLength 			; get length of file into A name YX
.139b	20 bd ff	jsr $ffbd			jsr 	$FFBD 						; set name
.139e	a9 01		lda #$01			lda 	#1
.13a0	a2 08		ldx #$08			ldx 	#8	 						; device #8
.13a2	a0 00		ldy #$00			ldy 	#0
.13a4	20 ba ff	jsr $ffba			jsr 	$FFBA 						; set LFS
.13a7	a5 51		lda $51				lda 	esInt0+1 					; copy start of save address to temp0
.13a9	85 2a		sta $2a				sta 	temp0
.13ab	a5 59		lda $59				lda 	esInt1+1
.13ad	85 2b		sta $2b				sta 	temp0+1
.13af	a6 52		ldx $52				ldx 	esInt0+2 					; end address
.13b1	a4 5a		ldy $5a				ldy 	esInt1+2
.13b3	a9 2a		lda #$2a			lda 	#temp0 						; ref to start address
.13b5	20 d8 ff	jsr $ffd8			jsr 	$FFD8 						; save
.13b8	b0 03		bcs $13bd			bcs 	_ESSave
.13ba	68		pla				pla
.13bb	a8		tay				tay
.13bc	60		rts				rts
.13bd					_ESSave:
.13bd	a2 1f		ldx #$1f			ldx 	#ErrorID_Save
.13bf	20 e0 14	jsr $14e0		jsr	errorHandler
.13c2					ExternLoad:
.13c2	98		tya				tya
.13c3	48		pha				pha
.13c4	20 e6 13	jsr $13e6			jsr 	ExternGetLength 			; get length of file into A name YX
.13c7	20 bd ff	jsr $ffbd			jsr 	$FFBD 						; set name
.13ca	a9 01		lda #$01			lda 	#1
.13cc	a2 08		ldx #$08			ldx 	#8	 						; device #8
.13ce	a0 00		ldy #$00			ldy 	#0
.13d0	20 ba ff	jsr $ffba			jsr 	$FFBA 						; set LFS
.13d3	a6 51		ldx $51				ldx 	esInt0+1 					; load address
.13d5	a4 59		ldy $59				ldy 	esInt1+1
.13d7	a9 00		lda #$00			lda 	#0 							; load command
.13d9	20 d5 ff	jsr $ffd5			jsr 	$FFD5
.13dc	b0 03		bcs $13e1			bcs 	_ESLoad
.13de	68		pla				pla
.13df	a8		tay				tay
.13e0	60		rts				rts
.13e1					_ESLoad:
.13e1	a2 20		ldx #$20			ldx 	#ErrorID_Load
.13e3	20 e0 14	jsr $14e0		jsr	errorHandler
.13e6					ExternGetLength:
.13e6	a5 50		lda $50				lda 	esInt0 						; length into A.
.13e8	85 2a		sta $2a				sta 	temp0
.13ea	a5 58		lda $58				lda 	esInt1
.13ec	85 2b		sta $2b				sta 	temp0+1
.13ee	a0 00		ldy #$00			ldy 	#0
.13f0	b1 2a		lda ($2a),y			lda 	(temp0),y
.13f2	a6 50		ldx $50				ldx 	esInt0 						; name into YX
.13f4	a4 58		ldy $58				ldy 	esInt1
.13f6	e8		inx				inx 								; advance over the length pointer.
.13f7	d0 01		bne $13fa			bne 	_ESNoCarry
.13f9	c8		iny				iny
.13fa					_ESNoCarry:
.13fa	60		rts				rts

;******  Return to file: device/device.asm


;******  Processing file: device/option_x16/x16io.asm

=240					MaxLineInputSize = 240
.0af6					bufferCount:
>0af6							.fill 	0
.0af6					bufferStorage:
>0af6							.fill 	MaxLineInputSize
.13fb					IOInitialise:
.13fb	a9 0f		lda #$0f			lda 	#15 						; switch to upper/lower case mode
.13fd	20 26 14	jsr $1426			jsr 	IOPrintChar
.1400	a9 02		lda #$02			lda 	#2 							; green on black and clear screen
.1402	20 52 14	jsr $1452			jsr 	IOInk
.1405	a9 00		lda #$00			lda 	#0
.1407	20 66 14	jsr $1466			jsr 	IOPaper
.140a	20 0e 14	jsr $140e			jsr 	IOClearScreen
.140d	60		rts				rts
.140e					IOClearScreen:
.140e	48		pha				pha
.140f	a9 93		lda #$93			lda	 	#147 						; char code $93 clears screen
.1411	20 26 14	jsr $1426			jsr 	IOPrintChar
.1414	68		pla				pla
.1415	60		rts				rts
.1416					IONewLine:
.1416	48		pha				pha
.1417	a9 0d		lda #$0d			lda 	#13
.1419	20 26 14	jsr $1426			jsr 	IOPrintChar
.141c	68		pla				pla
.141d	60		rts				rts
.141e					IOTab:
.141e	48		pha				pha
.141f	a9 20		lda #$20			lda 	#32
.1421	20 26 14	jsr $1426			jsr 	IOPrintChar
.1424	68		pla				pla
.1425	60		rts				rts
.1426					IOPrintAscii:
.1426					IOPrintChar:
.1426	aa		tax				tax 								; save in X so we can save Y
.1427	5a		phy				phy
.1428	8a		txa				txa
.1429	c9 08		cmp #$08			cmp 	#8 							; make BS (8) onto CHR$(14) which is the
.142b	d0 02		bne $142f			bne 	_IOPCNotBS 					; Commodore/X16 backspace code.
.142d	a9 14		lda #$14			lda 	#$14
.142f					_IOPCNotBS:
.142f	20 d2 ff	jsr $ffd2			jsr 	$FFD2 						; CBM OS Call.
.1432	7a		ply				ply
.1433	60		rts				rts
.1434					IOInkey:
.1434	98		tya				tya
.1435	48		pha				pha
.1436	20 e4 ff	jsr $ffe4			jsr 	$FFE4
.1439	85 32		sta $32				sta 	tempShort
.143b	68		pla				pla
.143c	a8		tay				tay
.143d	a5 32		lda $32				lda 	tempShort					; no key pressed.
.143f	f0 10		beq $1451			beq 	_IOIExit
.1441	c9 0d		cmp #$0d			cmp 	#13 						; allow CR (13)
.1443	f0 0c		beq $1451			beq 	_IOIExit
.1445	c9 14		cmp #$14			cmp 	#$14 						; backspace code ($14) returns 8.
.1447	f0 06		beq $144f			beq 	_IOIBackspace
.1449	c9 20		cmp #$20			cmp 	#32 						; no other control allowed.
.144b	90 e7		bcc $1434			bcc 	IOInkey
.144d	b0 02		bcs $1451			bcs 	_IOIExit
.144f					_IOIBackspace:
.144f	a9 08		lda #$08			lda 	#8 							; return chr(8)
.1451					_IOIExit:
.1451	60		rts				rts
.1452					IOInk:
.1452	48		pha				pha
.1453	29 07		and #$07			and 	#7 							; 8 primaries
.1455	aa		tax				tax
.1456	bd 5e 14	lda $145e,x			lda 	_IOColourTable,x 			; look up CBM code and print it.
.1459	20 26 14	jsr $1426			jsr 	IOPrintChar
.145c	68		pla				pla
.145d	60		rts				rts
.145e					_IOColourTable:
>145e	90						.byte 	$90 					; 0 Black
>145f	96						.byte 	$96 					; 1 Red
>1460	1e						.byte 	$1E 					; 2 Green
>1461	9e						.byte 	$9E 					; 3 Yellow
>1462	9a						.byte 	$9A 					; 4 Blue
>1463	9c						.byte 	$9C 					; 5 Magenta
>1464	9f						.byte 	$9F 					; 6 Cyan
>1465	05						.byte 	$05 					; 7 White
.1466					IOPaper:
.1466	48		pha				pha
.1467	48		pha				pha
.1468	a9 01		lda #$01			lda 	#1 						; 1 swaps fgr/bgr, so we swap them, set fgr
.146a	20 26 14	jsr $1426			jsr 	IOPrintChar 			; and then swap them again.
.146d	68		pla				pla
.146e	20 52 14	jsr $1452			jsr 	IOInk
.1471	a9 01		lda #$01			lda 	#1
.1473	20 26 14	jsr $1426			jsr 	IOPrintChar
.1476	68		pla				pla
.1477	60		rts				rts
.1478					IOLocate:
.1478	48		pha				pha
.1479	a9 13		lda #$13			lda 	#$13 					; home cursor code
.147b	20 26 14	jsr $1426			jsr 	IOPrintChar
.147e	a9 11		lda #$11			lda 	#$11 	 				; print Y x $11 (down)
.1480	20 87 14	jsr $1487			jsr 	_IOLoc2
.1483	68		pla				pla
.1484	a8		tay				tay
.1485	a9 1d		lda #$1d			lda 	#$1D 					; print Y x $1D (right)
.1487					_IOLoc2:
.1487	c0 00		cpy #$00			cpy 	#0
.1489	f0 06		beq $1491			beq 	_IOLocExit
.148b	20 26 14	jsr $1426			jsr 	IOPrintChar
.148e	88		dey				dey
.148f	d0 f6		bne $1487			bne 	_IOLoc2
.1491					_IOLocExit:
.1491	60		rts				rts
.1492					IOInput:
.1492	a9 00		lda #$00			lda 	#0
.1494	8d f6 0a	sta $0af6			sta 	bufferCount
.1497					_IOILoop:
.1497	20 cf ff	jsr $ffcf			jsr 	$FFCF
.149a	c9 0d		cmp #$0d			cmp 	#13
.149c	f0 10		beq $14ae			beq 	_IOIExit
.149e	ae f6 0a	ldx $0af6			ldx 	bufferCount
.14a1	e0 f0		cpx #$f0			cpx 	#MaxLineInputSize
.14a3	f0 f2		beq $1497			beq 	_IOILoop
.14a5	ee f6 0a	inc $0af6			inc 	bufferCount
.14a8	9d f7 0a	sta $0af7,x			sta 	bufferStorage+1,x
.14ab	4c 97 14	jmp $1497			jmp 	_IOILoop
.14ae					_IOIExit:
.14ae	a9 f6		lda #$f6			lda 	#(bufferCount) & $FF
.14b0	85 2a		sta $2a				sta 	temp0
.14b2	a9 0a		lda #$0a			lda 	#(bufferCount) >> 8
.14b4	85 2b		sta $2b				sta 	1+(temp0)
.14b6	60		rts				rts

;******  Return to file: device/device.asm


;******  Processing file: device/option_x16/x16timer.asm

.14b7					IOReadTimer:
.14b7	20 de ff	jsr $ffde			jsr 	$FFDE 						; reads timer into YXA so we want only YA
.14ba	48		pha				pha
.14bb	8a		txa				txa
.14bc	a8		tay				tay
.14bd	68		pla				pla
.14be	60		rts				rts

;******  Return to file: device/device.asm

.14bf					deviceHandler:
.14bf	7c c2 14	jmp ($14c2,x)			jmp 	(deviceVectors,x)
.14c2					deviceVectors:
>14c2	8b 13					.word X16Break             ; index 0
>14c4	0e 14					.word IOClearScreen        ; index 2
>14c6	16 14					.word IONewLine            ; index 4
>14c8	fb 13					.word IOInitialise         ; index 6
>14ca	52 14					.word IOInk                ; index 8
>14cc	34 14					.word IOInkey              ; index 10
>14ce	92 14					.word IOInput              ; index 12
>14d0	c2 13					.word ExternLoad           ; index 14
>14d2	78 14					.word IOLocate             ; index 16
>14d4	66 14					.word IOPaper              ; index 18
>14d6	26 14					.word IOPrintChar          ; index 20
>14d8	26 14					.word IOPrintAscii         ; index 22
>14da	96 13					.word ExternSave           ; index 24
>14dc	1e 14					.word IOTab                ; index 26
>14de	b7 14					.word IOReadTimer          ; index 28

;******  Return to file: basic.asm

.14e0					section_end_device:
.14e0					section_start_error:

;******  Processing file: error/error.asm


;******  Processing file: error/errorhandler.asm

.14e0					ErrorHandler:
.14e0	8a		txa				txa
.14e1	48		pha				pha
.14e2	a9 01		lda #$01			lda 	#1 							; red
.14e4	a2 08		ldx #$08		ldx	#8
.14e6	20 bf 14	jsr $14bf		jsr	deviceHandler
.14e9	68		pla				pla
.14ea	aa		tax				tax
.14eb	a9 56		lda #$56			lda 	#(ErrorTextList) & $FF
.14ed	85 2a		sta $2a				sta 	temp0
.14ef	a9 15		lda #$15			lda 	#(ErrorTextList) >> 8
.14f1	85 2b		sta $2b				sta 	1+(temp0)
.14f3	ca		dex		_EHFind:dex									; errors start at 1
.14f4	f0 10		beq $1506			beq 	_EHFound
.14f6	a0 00		ldy #$00			ldy 	#0 							; goto next text message, add length + 1 to the pointer.
.14f8	38		sec				sec
.14f9	a5 2a		lda $2a				lda 	temp0
.14fb	71 2a		adc ($2a),y			adc 	(temp0),y
.14fd	85 2a		sta $2a				sta 	temp0
.14ff	90 f2		bcc $14f3			bcc 	_EHFind
.1501	e6 2b		inc $2b				inc 	temp0+1
.1503	4c f3 14	jmp $14f3			jmp 	_EHFind
.1506					_EHFound:
.1506	20 fe 17	jsr $17fe			jsr 	EHPrintAscii 				; print the string "temp0" now points to.
.1509	a0 00		ldy #$00			ldy 	#0 							; in a line, e.g. the offset to next is non zero.
.150b	b1 28		lda ($28),y			lda 	(codePtr),y
.150d	f0 39		beq $1548			beq 	_EHNoLine
.150f	a5 29		lda $29				lda 	codePtr+1 					; code running from the command line.
.1511	cd c9 0a	cmp $0ac9			cmp 	basePage+1
.1514	90 32		bcc $1548			bcc 	_EHNoLine
.1516	a9 52		lda #$52			lda 	#(EHAtMsg) & $FF
.1518	85 2a		sta $2a				sta 	temp0
.151a	a9 15		lda #$15			lda 	#(EHAtMsg) >> 8
.151c	85 2b		sta $2b				sta 	1+(temp0)
.151e	20 fe 17	jsr $17fe			jsr 	EHPrintAscii
.1521	a0 01		ldy #$01			ldy 	#1 							; set up line number in TOS
.1523	a2 00		ldx #$00			ldx 	#0
.1525	b1 28		lda ($28),y			lda 	(codePtr),y
.1527	95 50		sta $50,x			sta 	esInt0,x
.1529	c8		iny				iny
.152a	b1 28		lda ($28),y			lda 	(codePtr),y
.152c	95 58		sta $58,x			sta 	esInt1,x
.152e	a9 00		lda #$00			lda 	#0
.1530	95 60		sta $60,x			sta 	esInt2,x
.1532	95 68		sta $68,x			sta 	esInt3,x
.1534	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.1536	85 2a		sta $2a				sta 	temp0
.1538	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.153a	85 2b		sta $2b				sta 	1+(temp0)
.153c	a0 0a		ldy #$0a			ldy 	#10 						; in base 10.
.153e	a9 00		lda #$00			lda 	#0							; stack position zero.
.1540	a2 0c		ldx #$0c		ldx	#12
.1542	20 58 32	jsr $3258		jsr	mainHandler
.1545	20 fe 17	jsr $17fe			jsr 	EHPrintAscii
.1548					_EHNoLine:
.1548	a2 04		ldx #$04		ldx	#4
.154a	20 bf 14	jsr $14bf		jsr	deviceHandler
.154d	a2 02		ldx #$02		ldx	#2
.154f	20 cd 1b	jsr $1bcd		jsr	interactionHandler
.1552					EHAtMsg:
>1552	03 20 40 20					.text 	3," @ "

;******  Processing file: error/../generated/errortext.inc

.1556					ErrorTextList:
>1556	13 46 65 61 74 75 72 65			.text 19,"Feature not Present"
>155e	20 6e 6f 74 20 50 72 65 73 65 6e 74
>156a	0c 53 79 6e 74 61 78 20			.text 12,"Syntax Error"
>1572	45 72 72 6f 72
>1577	0f 4d 6f 64 75 6c 65 20			.text 15,"Module disabled"
>157f	64 69 73 61 62 6c 65 64
>1587	10 41 73 73 65 72 74 69			.text 16,"Assertion failed"
>158f	6f 6e 20 66 61 69 6c 65 64
>1598	0e 44 69 76 69 64 65 20			.text 14,"Divide By Zero"
>15a0	42 79 20 5a 65 72 6f
>15a7	04 53 74 6f 70				.text 4,"Stop"
>15ac	0d 54 79 70 65 20 4d 69			.text 13,"Type Mismatch"
>15b4	73 6d 61 74 63 68
>15ba	0d 49 6c 6c 65 67 61 6c			.text 13,"Illegal Value"
>15c2	20 56 61 6c 75 65
>15c8	15 4d 69 73 73 69 6e 67			.text 21,"Missing right bracket"
>15d0	20 72 69 67 68 74 20 62 72 61 63 6b 65 74
>15de	0d 4d 69 73 73 69 6e 67			.text 13,"Missing comma"
>15e6	20 63 6f 6d 6d 61
>15ec	11 4d 69 73 73 69 6e 67			.text 17,"Missing reference"
>15f4	20 72 65 66 65 72 65 6e 63 65
>15fe	15 4c 69 6e 65 20 4e 75			.text 21,"Line Number not found"
>1606	6d 62 65 72 20 6e 6f 74 20 66 6f 75 6e 64
>1614	0f 53 74 72 69 6e 67 20			.text 15,"String too long"
>161c	74 6f 6f 20 6c 6f 6e 67
>1624	14 52 45 54 55 52 4e 20			.text 20,"RETURN without GOSUB"
>162c	77 69 74 68 6f 75 74 20 47 4f 53 55 42
>1639	14 55 4e 54 49 4c 20 77			.text 20,"UNTIL without REPEAT"
>1641	69 74 68 6f 75 74 20 52 45 50 45 41 54
>164e	10 4e 45 58 54 20 77 69			.text 16,"NEXT without FOR"
>1656	74 68 6f 75 74 20 46 4f 52
>165f	12 57 45 4e 44 20 77 69			.text 18,"WEND without WHILE"
>1667	74 68 6f 75 74 20 57 48 49 4c 45
>1672	14 45 4e 44 50 52 4f 43			.text 20,"ENDPROC without PROC"
>167a	20 77 69 74 68 6f 75 74 20 50 52 4f 43
>1687	0e 42 61 64 20 4e 45 58			.text 14,"Bad NEXT index"
>168f	54 20 69 6e 64 65 78
>1696	17 53 74 72 75 63 74 75			.text 23,"Structures nested wrong"
>169e	72 65 73 20 6e 65 73 74 65 64 20 77 72 6f 6e 67
>16ae	16 43 61 6e 6e 6f 74 20			.text 22,"Cannot create variable"
>16b6	63 72 65 61 74 65 20 76 61 72 69 61 62 6c 65
>16c5	19 52 65 74 75 72 6e 20			.text 25,"Return stack out of space"
>16cd	73 74 61 63 6b 20 6f 75 74 20 6f 66 20 73 70 61
>16dd	63 65
>16df	11 55 6e 6b 6e 6f 77 6e			.text 17,"Unknown Procedure"
>16e7	20 50 72 6f 63 65 64 75 72 65
>16f1	17 50 61 72 61 6d 65 74			.text 23,"Parameters do not match"
>16f9	65 72 73 20 64 6f 20 6e 6f 74 20 6d 61 74 63 68
>1709	15 41 72 72 61 79 20 61			.text 21,"Array already defined"
>1711	6c 72 65 61 64 79 20 64 65 66 69 6e 65 64
>171f	12 44 49 4d 20 72 65 71			.text 18,"DIM requires array"
>1727	75 69 72 65 73 20 61 72 72 61 79
>1732	0f 42 61 64 20 61 72 72			.text 15,"Bad array index"
>173a	61 79 20 69 6e 64 65 78
>1742	1d 57 72 6f 6e 67 20 6e			.text 29,"Wrong number of array indices"
>174a	75 6d 62 65 72 20 6f 66 20 61 72 72 61 79 20 69
>175a	6e 64 69 63 65 73
>1760	0b 4f 75 74 20 6f 66 20			.text 11,"Out of data"
>1768	64 61 74 61
>176c	14 43 61 6e 6e 6f 74 20			.text 20,"Cannot tokenise line"
>1774	74 6f 6b 65 6e 69 73 65 20 6c 69 6e 65
>1781	0b 53 61 76 65 20 66 61			.text 11,"Save failed"
>1789	69 6c 65 64
>178d	0b 4c 6f 61 64 20 66 61			.text 11,"Load failed"
>1795	69 6c 65 64
>1799	05 42 72 65 61 6b			.text 5,"Break"
>179f	0d 4f 75 74 20 6f 66 20			.text 13,"Out of memory"
>17a7	6d 65 6d 6f 72 79
>17ad	16 45 78 70 72 65 73 73			.text 22,"Expression too complex"
>17b5	69 6f 6e 20 74 6f 6f 20 63 6f 6d 70 6c 65 78
>17c4	10 42 61 64 20 4f 70 65			.text 16,"Bad Operand/Mode"
>17cc	72 61 6e 64 2f 4d 6f 64 65
>17d5	13 42 72 61 6e 63 68 20			.text 19,"Branch out of range"
>17dd	6f 75 74 20 6f 66 20 72 61 6e 67 65
>17e9	13 4c 61 62 65 6c 20 63			.text 19,"Label changed value"
>17f1	68 61 6e 67 65 64 20 76 61 6c 75 65
>17fd	00					.byte 0

;******  Return to file: error/errorhandler.asm

.17fe					EHPrintAscii:
.17fe	a0 00		ldy #$00			ldy 	#0
.1800	b1 2a		lda ($2a),y			lda 	(temp0),y
.1802	aa		tax				tax
.1803	f0 0f		beq $1814			beq 	_EHPExit
.1805					_EHPLoop:
.1805	c8		iny				iny
.1806	8a		txa				txa
.1807	48		pha				pha
.1808	b1 2a		lda ($2a),y			lda 	(temp0),y
.180a	a2 16		ldx #$16		ldx	#22
.180c	20 bf 14	jsr $14bf		jsr	deviceHandler
.180f	68		pla				pla
.1810	aa		tax				tax
.1811	ca		dex				dex
.1812	d0 f1		bne $1805			bne 	_EHPLoop
.1814					_EHPExit:
.1814	60		rts				rts

;******  Return to file: error/error.asm


;******  Return to file: basic.asm

.1815					section_end_error:
.1815					section_start_extension:

;******  Processing file: extension/extension.asm


;******  Processing file: extension/extensionhandler.asm

.1815					ExtensionHandler:
.1815	c9 fe		cmp #$fe			cmp 	#$FE 						; check for force mode 0
.1817	f0 16		beq $182f			beq 	_ExtensionForce
.1819	c9 ff		cmp #$ff			cmp 	#$FF						; A = $FF command, otherwise unary function stack level.
.181b	d0 08		bne $1825			bne 	_ExtensionUnary 			; is passed in A.
.181d	b1 28		lda ($28),y			lda 	(codePtr),y 				; so this is a command, using Group 2.
.181f	c8		iny				iny
.1820	0a		asl a				asl 	a
.1821	aa		tax				tax
.1822	7c 26 18	jmp ($1826,x)			jmp 	(Group2Vectors-12,x)
.1825					_ExtensionUnary:
.1825	48		pha				pha 								; save stack pos in A
.1826	b1 28		lda ($28),y			lda 	(codePtr),y 				; get shifted token, double into X
.1828	c8		iny				iny
.1829	0a		asl a				asl 	a
.182a	aa		tax				tax
.182b	68		pla				pla 								; restore stack pos and call group3 command.
.182c	7c 2e 18	jmp ($182e,x)			jmp 	(Group3Vectors-12,X)
.182f					_ExtensionForce:
.182f	4c 46 18	jmp $1846			jmp 	ForceMode0

;******  Processing file: extension/../generated/tokenvectors2.inc

.1832					Group2Vectors:
>1832	24 19					.word	Command_VPoke            ; $86 vpoke
>1834	27 19					.word	Command_VDoke            ; $87 vdoke
>1836	01 19					.word	Command_VLoad            ; $88 vload
>1838	58 18					.word	CommandMode              ; $89 mode

;******  Return to file: extension/extensionhandler.asm


;******  Processing file: extension/../generated/tokenvectors3.inc

.183a					Group3Vectors:
>183a	68 19					.word	Command_VPeek            ; $86 vpeek(
>183c	6b 19					.word	Command_VDeek            ; $87 vdeek(

;******  Return to file: extension/extensionhandler.asm

.183e					XEvaluateInteger:
.183e	8a		txa				txa
.183f	a2 06		ldx #$06		ldx	#6
.1841	20 58 32	jsr $3258		jsr	mainHandler
.1844	aa		tax				tax
.1845	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/mode.asm

.0be6					currentMode:
>0be6							.fill 	4
.1846					ForceMode0:
.1846	a2 00		ldx #$00			ldx 	#0
.1848	86 50		stx $50				stx 	esInt0 						; in case we do it.
.184a					_FMCheck:
.184a	bd d5 18	lda $18d5,x			lda 	CMModeList,x 				; do we need to switch ?
.184d	dd e6 0b	cmp $0be6,x			cmp 	currentMode,x
.1850	d0 11		bne $1863			bne 	CMSetMode 					; different so switch.
.1852	e8		inx				inx
.1853	e0 04		cpx #$04			cpx 	#4
.1855	d0 f3		bne $184a			bne 	_FMCheck
.1857	60		rts				rts
.1858					CommandMode:
.1858	a2 00		ldx #$00			ldx 	#0
.185a	20 3e 18	jsr $183e			jsr 	XEvaluateInteger
.185d	a5 68		lda $68				lda 	esInt3
.185f	29 70		and #$70			and 	#$70
.1861	d0 06		bne $1869			bne 	CMNoExpand
.1863					CMSetMode:
.1863	20 b4 18	jsr $18b4			jsr 	CMExpandMode
.1866	4c 7d 18	jmp $187d			jmp 	CMUpdateMode
.1869					CMNoExpand:
.1869	a5 50		lda $50				lda 	esInt0
.186b	8d e6 0b	sta $0be6			sta 	currentMode
.186e	a5 58		lda $58				lda 	esInt1
.1870	8d e7 0b	sta $0be7			sta 	currentMode+1
.1873	a5 60		lda $60				lda 	esInt2
.1875	8d e8 0b	sta $0be8			sta 	currentMode+2
.1878	a5 68		lda $68				lda 	esInt3
.187a	8d e9 0b	sta $0be9			sta 	currentMode+3
.187d					CMUpdateMode:
.187d	a2 11		ldx #$11			ldx 	#$11
.187f					_CMClear:
.187f	a9 00		lda #$00			lda 	#0
.1881	9d 29 9f	sta $9f29,x			sta 	$9F29,X
.1884	ca		dex				dex
.1885	10 f8		bpl $187f			bpl 	_CMClear
.1887	ad e9 0b	lda $0be9			lda 	currentMode+3 				; get current mode
.188a	48		pha				pha 								; stack twice.
.188b	48		pha				pha
.188c	29 70		and #$70			and 	#$70 						; isolates bits 6,5,4 (sprites,L1 enable,L0 enable)
.188e	09 01		ora #$01			ora 	#$01 						; turn the output on.
.1890	8d 29 9f	sta $9f29			sta 	$9F29 						; write to DC_VIDEO
.1893	68		pla				pla 								; get back
.1894	20 d9 18	jsr $18d9			jsr 	CMToScale 					; convert lower 2 bits to a scale.
.1897	8d 2a 9f	sta $9f2a			sta 	$9F2A 						; write to H-Scale
.189a	68		pla				pla 								; get back, convert bits 2,3 to a scale.
.189b	4a		lsr a				lsr 	a
.189c	4a		lsr a				lsr 	a
.189d	20 d9 18	jsr $18d9			jsr 	CMToScale 					; convert lower 2 bits to a scale.
.18a0	8d 2b 9f	sta $9f2b			sta 	$9F2B
.18a3	a2 00		ldx #$00			ldx 	#0 							; this is offset from $9F2D to do L0
.18a5	ad e6 0b	lda $0be6			lda 	currentMode					; get L0 config byte
.18a8	20 e4 18	jsr $18e4			jsr 	CMDecodeLayer 				; and decode layer 0
.18ab	a2 07		ldx #$07			ldx 	#7 							; when we do layer 1, offset by 7 hence starts at $9F34
.18ad	ad e7 0b	lda $0be7			lda 	currentMode+1
.18b0	20 e4 18	jsr $18e4			jsr 	CMDecodeLayer
.18b3	60		rts				rts
.18b4					CMExpandMode:
.18b4	a5 50		lda $50				lda 	esInt0 						; get mode number
.18b6	c9 01		cmp #$01			cmp 	#(CMEndModeList-CMModeList) >> 2
.18b8	b0 16		bcs $18d0			bcs 	_CMModeError
.18ba	0a		asl a				asl 	a 							; x 4 into X
.18bb	0a		asl a				asl 	a
.18bc	aa		tax				tax
.18bd	98		tya				tya
.18be	48		pha				pha
.18bf	a0 00		ldy #$00			ldy 	#0
.18c1					_CMEMCopy:
.18c1	bd d5 18	lda $18d5,x			lda 	CMModeList,x
.18c4	99 e6 0b	sta $0be6,y			sta 	currentMode,y
.18c7	e8		inx				inx
.18c8	c8		iny				iny
.18c9	c0 04		cpy #$04			cpy 	#4
.18cb	d0 f4		bne $18c1			bne 	_CMEMCopy
.18cd	68		pla				pla
.18ce	a8		tay				tay
.18cf	60		rts				rts
.18d0					_CMModeError:
.18d0	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.18d2	20 e0 14	jsr $14e0		jsr	errorHandler
.18d5					CMModeList:
>18d5	00 60 00 20					.dword	$20006000 					; Mode 0 which is the standard 80x60 mode, no sprites
.18d9					CMEndModeList:
.18d9					CMToScale:
.18d9	29 03		and #$03			and 	#3 							; lower 2 bits only
.18db	aa		tax				tax 								; put in X for counting
.18dc	a9 00		lda #$00			lda 	#0 							; zero result
.18de	38		sec				sec 								; first time rotate CS in
.18df					_CMTSLoop:
.18df	6a		ror a				ror 	a
.18e0	ca		dex				dex
.18e1	10 fc		bpl $18df			bpl 	_CMTSLoop
.18e3	60		rts				rts
.18e4					CMDecodeLayer:
.18e4	48		pha				pha 								; save it.
.18e5	29 f7		and #$f7			and 	#$F7 						; all the bits except T256C which you can't set using this
.18e7	9d 2d 9f	sta $9f2d,x			sta 	$9F2D,X
.18ea	68		pla				pla 								; get it back
.18eb	29 08		and #$08			and 	#$08 						; the missing bit sets the tile size.
.18ed	f0 02		beq $18f1			beq 	_CMDLNotSet
.18ef	a9 03		lda #$03			lda 	#$03 						; which sets both lower bits, they're square.
.18f1					_CMDLNotSet:
.18f1	e0 00		cpx #$00			cpx 	#0
.18f3	f0 06		beq $18fb			beq 	_CMDLayer0 					; layer 1 has standard defaults for tile table, e.g. $7C
.18f5	09 7c		ora #$7c			ora 	#$7C 						; so set those bits and write it out.
.18f7	9d 2f 9f	sta $9f2f,x			sta 	$9F2F,X
.18fa	60		rts				rts
.18fb					_CMDLayer0:
.18fb	09 80		ora #$80			ora 	#$80 						; tile base is $80
.18fd	9d 2f 9f	sta $9f2f,x			sta 	$9F2F,X
.1900	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/vload.asm

.1901					Command_VLoad:
.1901	a2 00		ldx #$00			ldx 	#0 								; string which is the file name
.1903	20 cd 2a	jsr $2acd			jsr 	EvaluateString
.1906	e8		inx				inx
.1907	20 6a 31	jsr $316a			jsr 	MInt32False
.190a	a5 35		lda $35				lda 	lowMemory 						; load it into lowMemory (for now ?)
.190c	95 50		sta $50,x			sta 	esInt0,x
.190e	a5 36		lda $36				lda 	lowMemory+1
.1910	95 58		sta $58,x			sta 	esInt1,x
.1912	ca		dex				dex
.1913	a2 0e		ldx #$0e		ldx	#14
.1915	20 bf 14	jsr $14bf		jsr	deviceHandler
.1918	a5 51		lda $51				lda 	esInt0+1 						; (temp0) is where we are decoding from.
.191a	85 2a		sta $2a				sta 	temp0
.191c	a5 59		lda $59				lda 	esInt1+1
.191e	85 2b		sta $2b				sta 	temp0+1
.1920	20 89 19	jsr $1989			jsr 	LoadVRAMFile 					; load the VRAM file in.
.1923	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/vpeekpoke.asm

.1924					Command_VPoke:
.1924	38		sec				sec 						; one byte , CS
.1925	b0 01		bcs $1928			bcs 	CmdVideoWrite
.1927					Command_VDoke:
.1927	18		clc				clc 						; two bytes, CC
.1928					CmdVideoWrite:
.1928	08		php				php 						; save one or two btes
.1929	a2 00		ldx #$00			ldx 	#0  				; get address and value into levels 0,1
.192b	20 3e 18	jsr $183e			jsr 	XEvaluateInteger
.192e	20 ea 31	jsr $31ea			jsr 	CheckComma
.1931	e8		inx				inx
.1932	20 3e 18	jsr $183e			jsr 	XEvaluateInteger
.1935	ca		dex				dex
.1936	20 47 19	jsr $1947			jsr 	SetUpTOSVRamAddress ; copy target address to VRAM address registers
.1939	a5 51		lda $51				lda 	esInt0+1 			; get MSB of write value
.193b	8d 23 9f	sta $9f23			sta 	$9F23
.193e	28		plp				plp 						; if it was Poke then exit
.193f	b0 05		bcs $1946			bcs 	_CVWExit
.1941	a5 59		lda $59				lda 	esInt1+1 			; doke, write the MSB.
.1943	8d 23 9f	sta $9f23			sta 	$9F23
.1946					_CVWExit:
.1946	60		rts				rts
.1947					SetUpTOSVRamAddress:
.1947	b5 60		lda $60,x			lda 	esInt2,x 			; check range of address, data to $FFFF
.1949	29 fe		and #$fe			and 	#$FE
.194b	15 68		ora $68,x			ora 	esInt3,x
.194d	d0 14		bne $1963			bne 	CVWValue
.194f	b5 50		lda $50,x			lda 	esInt0,x			; set address up
.1951	8d 20 9f	sta $9f20			sta 	$9F20
.1954	b5 58		lda $58,x			lda 	esInt1,x
.1956	8d 21 9f	sta $9f21			sta	 	$9F21
.1959	b5 60		lda $60,x			lda 	esInt2,x
.195b	29 01		and #$01			and 	#1
.195d	09 10		ora #$10			ora 	#$10 				; step 1.
.195f	8d 22 9f	sta $9f22			sta 	$9F22
.1962	60		rts				rts
.1963					CVWValue:
.1963	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.1965	20 e0 14	jsr $14e0		jsr	errorHandler
.1968					Command_VPeek:
.1968	38		sec				sec 						; one byte , CS
.1969	b0 01		bcs $196c			bcs 	CmdVideoRead
.196b					Command_VDeek:
.196b	18		clc				clc 						; two bytes, CC
.196c					CmdVideoRead:
.196c	08		php				php 						; save action on stack.
.196d	aa		tax				tax 						; save stack position
.196e	20 3e 18	jsr $183e			jsr 	XEvaluateInteger 	; address
.1971	20 dd 31	jsr $31dd			jsr 	CheckRightParen 	; closing right bracket.
.1974	20 47 19	jsr $1947			jsr 	SetUpTOSVRamAddress	; set up VRAM address.
.1977	20 6a 31	jsr $316a			jsr 	MInt32False 		; zero return.
.197a	ad 23 9f	lda $9f23			lda 	$9F23				; copy 1st byte
.197d	95 50		sta $50,x			sta 	esInt0,x
.197f	28		plp				plp 						; check if DOKE (carry was clear)
.1980	b0 05		bcs $1987			bcs 	_CVRExit
.1982	ad 23 9f	lda $9f23			lda 	$9F23 				; copy 2nd byte
.1985	95 58		sta $58,x			sta 	esInt1,x
.1987					_CVRExit:
.1987	8a		txa				txa 						; return X position.
.1988	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/vramprocess.asm

.0bea					compressMode:
>0bea							.fill 	1
.1989					LoadVRAMFile:
.1989					_LVRLoop:
.1989	20 d9 19	jsr $19d9			jsr 	LVFGet 						; get the next (never access direct)
.198c	c9 80		cmp #$80			cmp 	#$80 						; exit ?
.198e	f0 3a		beq $19ca			beq 	_LVRExit
.1990	b0 39		bcs $19cb			bcs 	_LVRLoad 					; load data in ?
.1992	c9 08		cmp #$08			cmp 	#$08 						; is it set address ?
.1994	90 09		bcc $199f			bcc 	_LVRSetAddress
.1996	c9 10		cmp #$10			cmp 	#$10 						; is it set compression type ?
.1998	90 29		bcc $19c3			bcc 	_LVRSetCompress
.199a	a2 01		ldx #$01			ldx 	#ErrorID_missing
.199c	20 e0 14	jsr $14e0		jsr	errorHandler
.199f					_LVRSetAddress:
.199f	85 2d		sta $2d				sta 	temp1+1 					; 24 bit in temp1+1/temp1/A
.19a1	20 d9 19	jsr $19d9			jsr 	LVFGet
.19a4	85 2c		sta $2c				sta 	temp1
.19a6	a9 00		lda #$00			lda 	#0
.19a8	46 2d		lsr $2d				lsr 	temp1+1 					; / 2 twice.
.19aa	66 2c		ror $2c				ror 	temp1
.19ac	6a		ror a				ror		a
.19ad	46 2d		lsr $2d				lsr 	temp1+1
.19af	66 2c		ror $2c				ror 	temp1
.19b1	6a		ror a				ror		a
.19b2	8d 20 9f	sta $9f20			sta 	$9F20 						; set write address with +1 increment
.19b5	a5 2c		lda $2c				lda 	temp1
.19b7	8d 21 9f	sta $9f21			sta 	$9F21
.19ba	a5 2d		lda $2d				lda 	temp1+1
.19bc	09 10		ora #$10			ora 	#$10
.19be	8d 22 9f	sta $9f22			sta 	$9F22
.19c1	d0 c6		bne $1989			bne 	_LVRLoop
.19c3					_LVRSetCompress:
.19c3	29 07		and #$07			and 	#7
.19c5	8d ea 0b	sta $0bea			sta 	compressMode
.19c8	10 bf		bpl $1989			bpl 	_LVRLoop
.19ca					_LVRExit:
.19ca	60		rts				rts
.19cb					_LVRLoad:
.19cb	29 7f		and #$7f			and 	#$7F 						; count in X (is > 0)
.19cd	aa		tax				tax
.19ce					_LVRLCopy:
.19ce	20 d9 19	jsr $19d9			jsr 	LVFGet 						; write to data.
.19d1	8d 23 9f	sta $9f23			sta 	$9F23
.19d4	ca		dex				dex
.19d5	d0 f7		bne $19ce			bne 	_LVRLCopy
.19d7	f0 b0		beq $1989			beq 	_LVRLoop
.19d9	84 32		sty $32		LVFGet:	sty 	tempShort
.19db	a0 00		ldy #$00			ldy 	#0
.19dd	b1 2a		lda ($2a),y			lda 	(temp0),y
.19df	a4 32		ldy $32				ldy	 	tempShort
.19e1	e6 2a		inc $2a				inc 	temp0
.19e3	d0 02		bne $19e7			bne 	_LVFGExit
.19e5	e6 2b		inc $2b				inc 	temp0+1
.19e7					_LVFGExit:
.19e7	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Return to file: basic.asm

.19e8					section_end_extension:
.19e8					section_start_floatingpoint:

;******  Processing file: floatingpoint/floatingpoint.asm

.19e8					floatingpointHandler:
.19e8	a2 03		ldx #$03			ldx 	#ErrorID_NoModule
.19ea	20 e0 14	jsr $14e0		jsr	errorHandler

;******  Return to file: basic.asm

.19ed					section_end_floatingpoint:
.19ed					section_start_interaction:

;******  Processing file: interaction/interaction.asm


;******  Processing file: interaction/cold.asm

.19ed					ColdStartEntry:
.19ed	a2 ff		ldx #$ff			ldx 	#$FF
.19ef	9a		txs				txs
.19f0	a2 02		ldx #$02		ldx	#2
.19f2	20 bf 14	jsr $14bf		jsr	deviceHandler
.19f5	a0 ff		ldy #$ff			ldy 	#255
.19f7					_CSBanner:
.19f7	c8		iny				iny
.19f8	b9 1e 1a	lda $1a1e,y			lda 	Intro,y
.19fb	f0 14		beq $1a11			beq 	_CSStart
.19fd	c9 08		cmp #$08			cmp 	#8
.19ff	90 08		bcc $1a09			bcc 	_CSInk
.1a01	a2 16		ldx #$16		ldx	#22
.1a03	20 bf 14	jsr $14bf		jsr	deviceHandler
.1a06	4c f7 19	jmp $19f7			jmp 	_CSBanner
.1a09					_CSInk:
.1a09	a2 08		ldx #$08		ldx	#8
.1a0b	20 bf 14	jsr $14bf		jsr	deviceHandler
.1a0e	4c f7 19	jmp $19f7			jmp 	_CSBanner
.1a11					_CSStart:
.1a11	a2 10		ldx #$10		ldx	#16
.1a13	20 58 32	jsr $3258		jsr	mainHandler
.1a16	a2 02		ldx #$02		ldx	#2
.1a18	20 58 32	jsr $3258		jsr	mainHandler
.1a1b	4c 30 1b	jmp $1b30			jmp 	WarmStartEntry
>1a1e	06 2a 2a 2a 20 36 35 30		Intro:	.text 	6,"*** 6502 Extended BASIC ***",13,13
>1a26	32 20 45 78 74 65 6e 64 65 64 20 42 41 53 49 43
>1a36	20 2a 2a 2a 0d 0d
>1a3c	03 57 72 69 74 74 65 6e				.text 	3,"Written by Paul Robson 2021",13,13
>1a44	20 62 79 20 50 61 75 6c 20 52 6f 62 73 6f 6e 20
>1a54	32 30 32 31 0d 0d
>1a5a	02 42 61 73 69 63 20				.text 	2,"Basic "
>1a61	30 2e 31 37					.text "0.17"
>1a65	20 28						.text 	" ("
>1a67	31 38 2d 4d 61 72 2d 32				.text "18-Mar-2021"
>1a6f	30 32 31
>1a72	29 0d 0d 00					.text 	")",13,13,0

;******  Return to file: interaction/interaction.asm


;******  Processing file: interaction/delete.asm

.1a76					DeleteLine:
.1a76	ad c8 0a	lda $0ac8			lda 	basePage 					; copy program base to temp0
.1a79	85 2a		sta $2a				sta 	temp0
.1a7b	ad c9 0a	lda $0ac9			lda 	basePage+1
.1a7e	85 2b		sta $2b				sta 	temp0+1
.1a80	a0 01		ldy #$01	_DLLoop:ldy 	#1 							; see if found line ?
.1a82	a5 50		lda $50				lda 	esInt0 						; e.g. the linenumbers match
.1a84	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.1a86	d0 07		bne $1a8f			bne 	_DLNext
.1a88	c8		iny				iny
.1a89	a5 58		lda $58				lda 	esInt1
.1a8b	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.1a8d	f0 06		beq $1a95			beq 	_DLFound
.1a8f	20 b3 1a	jsr $1ab3	_DLNext:jsr 	IAdvanceTemp0 				; shift temp0 forward, return Z flag set if end.
.1a92	d0 ec		bne $1a80			bne 	_DLLoop
.1a94	60		rts				rts
.1a95					_DLFound:
.1a95	a0 00		ldy #$00			ldy 	#0 							; this is the line to cut, so this offset is the bytes to remove
.1a97	b1 2a		lda ($2a),y			lda 	(temp0),y
.1a99	a8		tay				tay 								; so we copy from (temp0),y
.1a9a	a2 00		ldx #$00			ldx 	#0  						; to (temp0,x)
.1a9c					_DLCopyDown:
.1a9c	b1 2a		lda ($2a),y			lda 	(temp0),y 					; copy one byte.
.1a9e	81 2a		sta ($2a,x)			sta 	(temp0,x)
.1aa0	e6 2a		inc $2a				inc 	temp0 						; advance pointer
.1aa2	d0 02		bne $1aa6			bne 	_DLNoCarry
.1aa4	e6 2b		inc $2b				inc 	temp0+1
.1aa6					_DLNoCarry:
.1aa6	a5 2a		lda $2a				lda 	temp0 						; until hit low memory
.1aa8	c5 35		cmp $35				cmp 	lowMemory 					; which is comfortably after End Program.
.1aaa	d0 f0		bne $1a9c			bne 	_DLCopyDown
.1aac	a5 2b		lda $2b				lda 	temp0+1
.1aae	c5 36		cmp $36				cmp 	lowMemory+1
.1ab0	d0 ea		bne $1a9c			bne 	_DLCopyDown
.1ab2	60		rts				rts
.1ab3					IAdvanceTemp0:
.1ab3	84 32		sty $32				sty 	tempShort
.1ab5	18		clc				clc
.1ab6	a0 00		ldy #$00			ldy 	#0 							; get offset
.1ab8	b1 2a		lda ($2a),y			lda 	(temp0),y 					; add to temp0
.1aba	65 2a		adc $2a				adc 	temp0
.1abc	85 2a		sta $2a				sta 	temp0
.1abe	90 02		bcc $1ac2			bcc 	_IATNoCarry
.1ac0	e6 2b		inc $2b				inc 	temp0+1
.1ac2					_IATNoCarry:
.1ac2	b1 2a		lda ($2a),y			lda 	(temp0),y
.1ac4	a4 32		ldy $32				ldy 	tempShort
.1ac6	c9 00		cmp #$00			cmp		#0 							; Z set if program end.
.1ac8	60		rts				rts

;******  Return to file: interaction/interaction.asm


;******  Processing file: interaction/insert.asm

.1ac9					InsertLine:
.1ac9	ad c8 0a	lda $0ac8			lda 	basePage 					; copy program base to temp0
.1acc	85 2a		sta $2a				sta 	temp0
.1ace	ad c9 0a	lda $0ac9			lda 	basePage+1
.1ad1	85 2b		sta $2b				sta 	temp0+1
.1ad3					_ILLoop:
.1ad3	a0 01		ldy #$01			ldy 	#1
.1ad5	b1 2a		lda ($2a),y			lda 	(temp0),y
.1ad7	c5 50		cmp $50				cmp 	esInt0
.1ad9	c8		iny				iny
.1ada	b1 2a		lda ($2a),y			lda 	(temp0),y
.1adc	e5 58		sbc $58				sbc 	esInt1
.1ade	b0 05		bcs $1ae5			bcs 	_ILFound 					; we know it cannot be equal, it would have been deleted
.1ae0	20 b3 1a	jsr $1ab3			jsr 	IAdvanceTemp0 				; shift temp0 forward, return Z flag set if end.
.1ae3	d0 ee		bne $1ad3			bne 	_ILLoop
.1ae5					_ILFound:
.1ae5	a5 35		lda $35				lda 	lowMemory 					; shift lowMemory up to make space for it.
.1ae7	85 2c		sta $2c				sta 	temp1             			; this pointer goes backwards
.1ae9	a5 36		lda $36				lda 	lowMemory+1
.1aeb	85 2d		sta $2d				sta 	temp1+1
.1aed	ad 28 0d	lda $0d28			lda 	tokenBufferIndex 			; space to make in Y, 0 in X.
.1af0	18		clc				clc 								; add 3 for the line number and offset.
.1af1	69 03		adc #$03			adc 	#3 							; tokenbuffer already has $80
.1af3	a8		tay				tay
.1af4	a2 00		ldx #$00			ldx 	#0
.1af6	a1 2c		lda ($2c,x)	_ILMove:lda 	(temp1,x)					; shift up
.1af8	91 2c		sta ($2c),y			sta 	(temp1),y
.1afa	a5 2c		lda $2c				lda 	temp1 						; check reached the insert point ?
.1afc	c5 2a		cmp $2a				cmp 	temp0
.1afe	d0 06		bne $1b06			bne 	_ILMNext
.1b00	a5 2d		lda $2d				lda 	temp1+1
.1b02	c5 2b		cmp $2b				cmp 	temp0+1
.1b04	f0 0b		beq $1b11			beq 	_ILMCopy
.1b06					_ILMNext:
.1b06	a5 2c		lda $2c				lda 	temp1
.1b08	d0 02		bne $1b0c			bne 	_ILNoBorrow
.1b0a	c6 2d		dec $2d				dec 	temp1+1
.1b0c					_ILNoBorrow:
.1b0c	c6 2c		dec $2c				dec 	temp1
.1b0e	4c f6 1a	jmp $1af6			jmp 	_ILMove 					; and go round again
.1b11					_ILMCopy:
.1b11	98		tya				tya 								; Y is the offset of the new line.
.1b12	81 2a		sta ($2a,x)			sta 	(temp0,x)					; X = 0 still.
.1b14	a0 01		ldy #$01			ldy 	#1 							; copy in line number.
.1b16	a5 50		lda $50				lda 	esInt0
.1b18	91 2a		sta ($2a),y			sta 	(temp0),y
.1b1a	c8		iny				iny
.1b1b	a5 58		lda $58				lda 	esInt1
.1b1d	91 2a		sta ($2a),y			sta 	(temp0),y
.1b1f	a0 00		ldy #$00			ldy 	#0 							; copy the body in
.1b21					_ILMCopy2:
.1b21	b1 28		lda ($28),y			lda 	(codePtr),y
.1b23	c8		iny				iny
.1b24	c8		iny				iny
.1b25	c8		iny				iny
.1b26	91 2a		sta ($2a),y			sta 	(temp0),y
.1b28	88		dey				dey
.1b29	88		dey				dey
.1b2a	cc 28 0d	cpy $0d28			cpy 	tokenBufferIndex
.1b2d	d0 f2		bne $1b21			bne 	_ILMCopy2
.1b2f	60		rts				rts

;******  Return to file: interaction/interaction.asm


;******  Processing file: interaction/warm.asm

.1b30					WarmStartEntry:
.1b30	a2 ff		ldx #$ff			ldx 	#$FF
.1b32	9a		txs				txs
.1b33	a9 fe		lda #$fe			lda 	#$FE
.1b35	20 15 18	jsr $1815		jsr	extensionHandler
.1b38	a9 02		lda #$02			lda 	#2							; green text.
.1b3a	a2 08		ldx #$08		ldx	#8
.1b3c	20 bf 14	jsr $14bf		jsr	deviceHandler
.1b3f	a2 0c		ldx #$0c		ldx	#12
.1b41	20 bf 14	jsr $14bf		jsr	deviceHandler
.1b44	a5 2a		lda $2a				lda 	temp0	 					; copy temp0 to codePtr
.1b46	85 28		sta $28				sta 	codePtr
.1b48	a5 2b		lda $2b				lda 	temp0+1
.1b4a	85 29		sta $29				sta 	codePtr+1
.1b4c	a2 04		ldx #$04		ldx	#4
.1b4e	20 bf 14	jsr $14bf		jsr	deviceHandler
.1b51	a2 06		ldx #$06		ldx	#6
.1b53	20 11 3d	jsr $3d11		jsr	tokeniserHandler
.1b56	c9 00		cmp #$00			cmp 	#0
.1b58	f0 25		beq $1b7f			beq 	WSEError 					; failed (tokenise can fail if it doesn't know a character e.g. |)
.1b5a	a9 25		lda #$25			lda 	#(tokenHeader) & $FF
.1b5c	85 28		sta $28				sta 	codePtr
.1b5e	a9 0c		lda #$0c			lda 	#(tokenHeader) >> 8
.1b60	85 29		sta $29				sta 	1+(codePtr)
.1b62	ad 28 0c	lda $0c28			lda 	tokenBuffer 				; is it a blank line, go get another line.
.1b65	c9 80		cmp #$80			cmp 	#$80
.1b67	f0 c7		beq $1b30			beq 	WarmStartEntry
.1b69	29 c0		and #$c0			and 	#$C0						; does it start with a number
.1b6b	c9 40		cmp #$40			cmp 	#$40 						; e.g. is it 01xx xxxx
.1b6d	f0 15		beq $1b84			beq 	HasLineNumber
.1b6f	a9 00		lda #$00			lda 	#0 							; zero the token header, so it will look like a
.1b71	8d 25 0c	sta $0c25			sta 	tokenHeader 				; fake program line.
.1b74	8d 26 0c	sta $0c26			sta 	tokenHeader+1
.1b77	8d 27 0c	sta $0c27			sta 	tokenHeader+2
.1b7a	a2 12		ldx #$12		ldx	#18
.1b7c	20 58 32	jsr $3258		jsr	mainHandler
.1b7f					WSEError:
.1b7f	a2 1e		ldx #$1e			ldx 	#ErrorID_Tokenise
.1b81	20 e0 14	jsr $14e0		jsr	errorHandler
.1b84					HasLineNumber:
.1b84	a0 03		ldy #$03			ldy 	#3 							; get line number
.1b86	a9 00		lda #$00			lda 	#0
.1b88	a2 06		ldx #$06		ldx	#6
.1b8a	20 58 32	jsr $3258		jsr	mainHandler
.1b8d	a5 60		lda $60				lda 	esInt2		 				; check in range (only 2 bytes)
.1b8f	05 68		ora $68				ora 	esInt3
.1b91	d0 ec		bne $1b7f			bne 	WSEError
.1b93	98		tya				tya 								; make codePtr point to code after the line number.
.1b94	18		clc				clc 								; by skipping over the tokenised number.
.1b95	65 28		adc $28				adc 	codePtr
.1b97	85 28		sta $28				sta 	codePtr
.1b99	90 02		bcc $1b9d			bcc		_HLNNoCarry
.1b9b	e6 29		inc $29				inc 	codePtr+1
.1b9d					_HLNNoCarry:
.1b9d	98		tya				tya 								; subtract that offset from the code buffer index
.1b9e	38		sec				sec
.1b9f	49 ff		eor #$ff			eor 	#$FF
.1ba1	6d 28 0d	adc $0d28			adc 	tokenBufferIndex
.1ba4	18		clc				clc 								; add space allowing for header & $80 trailer
.1ba5	69 04		adc #$04			adc 	#4
.1ba7	8d 28 0d	sta $0d28			sta 	tokenBufferIndex 			; this is the number of bytes occupied.
.1baa	20 76 1a	jsr $1a76			jsr 	DeleteLine 					; always delete the line, it's deleted and reinserted.
.1bad					_HLNNoDelete:
.1bad	ad 28 0d	lda $0d28			lda 	tokenBufferIndex 			; if line was empty, then don't insert
.1bb0	c9 01		cmp #$01			cmp 	#1 							; (the one character is the EOL marker)
.1bb2	f0 0c		beq $1bc0			beq 	_HLMEditDone
.1bb4	a5 36		lda $36				lda 	lowMemory+1 				; is there space, if we allow a little bit of
.1bb6	18		clc				clc 								; workspace (1k)
.1bb7	69 04		adc #$04			adc 	#4 							; e.g. 4 x 256
.1bb9	c5 34		cmp $34				cmp 	highMemory+1
.1bbb	b0 0b		bcs $1bc8			bcs 	_HLMMemory 					; nope, won't allowit.
.1bbd	20 c9 1a	jsr $1ac9			jsr 	InsertLine 					; insert the line in
.1bc0					_HLMEditDone:
.1bc0	a2 02		ldx #$02		ldx	#2
.1bc2	20 58 32	jsr $3258		jsr	mainHandler
.1bc5	4c 30 1b	jmp $1b30			jmp 	WarmStartEntry
.1bc8					_HLMMemory:
.1bc8	a2 22		ldx #$22			ldx 	#ErrorID_Memory
.1bca	20 e0 14	jsr $14e0		jsr	errorHandler

;******  Return to file: interaction/interaction.asm

.1bcd					interactionHandler:
.1bcd	7c d0 1b	jmp ($1bd0,x)			jmp 	(interactionVectors,x)
.1bd0					interactionVectors:
>1bd0	ed 19					.word ColdStartEntry       ; index 0
>1bd2	30 1b					.word WarmStartEntry       ; index 2

;******  Return to file: basic.asm

.1bd4					section_end_interaction:
.1bd4					section_start_main:

;******  Processing file: main/main.asm


;******  Processing file: main/commands/compat/readdata.asm

.0beb					dataPtr:
>0beb							.fill 	2
.0bed					dataIndex:
>0bed							.fill 	1
.1bd4					CommandRead:
.1bd4	a2 00		ldx #$00			ldx 	#0 							; get a reference to a variable in stack:0
.1bd6	20 0b 2b	jsr $2b0b			jsr 	EvaluateReference
.1bd9	20 1a 1c	jsr $1c1a			jsr 	SwapDPCP 					; use the data pointer.
.1bdc	b1 28		lda ($28),y			lda 	(codePtr),y 				; see where it is.
.1bde	c8		iny				iny
.1bdf	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; if it is on a comma, it is in data.
.1be1	f0 07		beq $1bea			beq 	_CRInData
.1be3	88		dey				dey
.1be4	a9 dc		lda #$dc			lda 	#TKW_DATA 					; scan forward to a DATA statement.
.1be6	aa		tax				tax
.1be7	20 1b 23	jsr $231b			jsr 	ScanForward
.1bea					_CRInData:
.1bea	a2 01		ldx #$01			ldx 	#1 							; evaluate a value at Stack,1
.1bec	20 b9 2a	jsr $2ab9			jsr 	Evaluate
.1bef	ca		dex				dex 								; and write the value.
.1bf0	20 6e 1e	jsr $1e6e			jsr 	WriteValue
.1bf3	20 1a 1c	jsr $1c1a			jsr 	SwapDPCP 					; get the code pointer back.
.1bf6	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows ?
.1bf8	c8		iny				iny
.1bf9	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; if comma, another variable
.1bfb	f0 d7		beq $1bd4			beq 	CommandRead
.1bfd	88		dey				dey
.1bfe	60		rts				rts
.1bff					CommandData:
.1bff	a9 80		lda #$80			lda 	#TOK_EOL 					; go forward to end of line or colon.
.1c01	a2 ca		ldx #$ca			ldx 	#TKW_COLON
.1c03	20 1b 23	jsr $231b			jsr 	ScanForward
.1c06	88		dey				dey 								; ending on EOL is a scan issue, as it increments
.1c07	60		rts				rts
.1c08					CommandRestore:
.1c08	ad c8 0a	lda $0ac8			lda 	basePage
.1c0b	8d eb 0b	sta $0beb			sta 	dataPtr
.1c0e	ad c9 0a	lda $0ac9			lda 	basePage+1
.1c11	8d ec 0b	sta $0bec			sta 	dataPtr+1
.1c14	a9 03		lda #$03			lda 	#3
.1c16	8d ed 0b	sta $0bed			sta 	dataIndex
.1c19	60		rts				rts
.1c1a					SwapDPCP:
.1c1a	8a		txa				txa
.1c1b	48		pha				pha
.1c1c	98		tya				tya 								; swap Y, DataIndex
.1c1d	ac ed 0b	ldy $0bed			ldy 	DataIndex
.1c20	8d ed 0b	sta $0bed			sta 	DataIndex
.1c23	a5 28		lda $28				lda 	codePtr 					; swap code/dataptr low
.1c25	ae eb 0b	ldx $0beb			ldx 	dataptr
.1c28	8d eb 0b	sta $0beb			sta 	dataPtr
.1c2b	86 28		stx $28				stx 	codePtr
.1c2d	a5 29		lda $29				lda 	codePtr+1 					; swap code/dataptr high.
.1c2f	ae ec 0b	ldx $0bec			ldx 	dataptr+1
.1c32	8d ec 0b	sta $0bec			sta 	dataPtr+1
.1c35	86 29		stx $29				stx 	codePtr+1
.1c37	68		pla				pla
.1c38	aa		tax				tax
.1c39	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/compat/transfer.asm

.1c3a					CommandGOSUB:
.1c3a	20 d6 2a	jsr $2ad6			jsr 	EvaluateRootInteger			; get GOSUB line on stack top.
.1c3d	a2 04		ldx #$04			ldx 	#4 							; allocate 4 bytes on stack for GOSUB
.1c3f	a9 47		lda #$47			lda 	#markerGOSUB  				; <marker> <return addr/offset>
.1c41	20 05 32	jsr $3205			jsr 	RSClaim
.1c44	a9 01		lda #$01			lda 	#1 							; save position at offset 1.
.1c46	20 31 32	jsr $3231			jsr 	RSSavePosition
.1c49	a2 00		ldx #$00			ldx 	#0 							; point back at GOSUB line
.1c4b	f0 1b		beq $1c68			beq 	GotoTOS 					; and do a GOTO there.
.1c4d					CommandRETURN:
.1c4d	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.1c4f	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.1c51	c9 47		cmp #$47			cmp 	#markerGOSUB 						; does it match
.1c53	f0 05		beq $1c5a			beq 	_isok
.1c55	a2 0e		ldx #$0e			ldx 	#ErrorID_returnErr
.1c57	20 e0 14	jsr $14e0		jsr	errorHandler
.1c5a					_isok:
.1c5a	a9 01		lda #$01			lda 	#1
.1c5c	20 44 32	jsr $3244			jsr 	RSLoadPosition 				; reload the position from offset 1.
.1c5f	a9 04		lda #$04			lda 	#4 							; throw 4 bytes from stack.
.1c61	20 27 32	jsr $3227			jsr 	RSFree
.1c64	60		rts				rts
.1c65					CommandGOTO:
.1c65	20 d6 2a	jsr $2ad6			jsr 	EvaluateRootInteger 		; get GOTO line on stack top.
.1c68					GotoTOS:
.1c68	20 ff 25	jsr $25ff			jsr 	ResetCodeAddress 			; simple search.
.1c6b					_GotoSearch:
.1c6b	a0 00		ldy #$00			ldy 	#0 							; get offset
.1c6d	b1 28		lda ($28),y			lda 	(codePtr),y
.1c6f	f0 21		beq $1c92			beq 	_GotoError 					; not found.
.1c71	c8		iny				iny									; check LSB match
.1c72	b1 28		lda ($28),y			lda 	(codePtr),y
.1c74	d5 50		cmp $50,x			cmp 	esInt0,x
.1c76	d0 07		bne $1c7f			bne 	_GotoNext
.1c78	c8		iny				iny
.1c79	b1 28		lda ($28),y			lda 	(codePtr),y
.1c7b	d5 58		cmp $58,x			cmp 	esInt1,x
.1c7d	f0 10		beq $1c8f			beq 	_GotoFound
.1c7f					_GotoNext:
.1c7f	a0 00		ldy #$00			ldy 	#0 							; go next line
.1c81	b1 28		lda ($28),y			lda 	(codePtr),y
.1c83	18		clc				clc
.1c84	65 28		adc $28				adc 	codePtr
.1c86	85 28		sta $28				sta 	codePtr
.1c88	90 e1		bcc $1c6b			bcc 	_GotoSearch
.1c8a	e6 29		inc $29				inc 	codePtr+1
.1c8c	4c 6b 1c	jmp $1c6b			jmp 	_GotoSearch
.1c8f					_GotoFound:
.1c8f	a0 03		ldy #$03			ldy 	#3 							; continue from that line
.1c91	60		rts				rts
.1c92					_GotoError:
.1c92	a2 0c		ldx #$0c			ldx 	#ErrorID_LineNumber
.1c94	20 e0 14	jsr $14e0		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/commands/io/input.asm

=32					MaxInputSize = 32
.0bee					InputBuffer:
>0bee							.fill 	MaxInputSize+1
.1c97					Command_Input:
.1c97	b1 28		lda ($28),y			lda 	(codePtr),y 			; see what's next.
.1c99	c8		iny				iny
.1c9a	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 				; ignore commas.
.1c9c	f0 f9		beq $1c97			beq 	Command_Input
.1c9e	88		dey				dey 							; undo consume
.1c9f	c9 ca		cmp #$ca			cmp 	#TKW_COLON
.1ca1	f0 54		beq $1cf7			beq 	_CIExit 				; : or EOL, exit
.1ca3	c9 80		cmp #$80			cmp 	#TOK_EOL
.1ca5	f0 50		beq $1cf7			beq 	_CIExit
.1ca7	c9 40		cmp #$40			cmp 	#$40 					; variable ?
.1ca9	90 12		bcc $1cbd			bcc 	_CIVariable
.1cab	c9 85		cmp #$85			cmp 	#TOK_STR 				; if not quoted string syntax error.
.1cad	d0 43		bne $1cf2			bne 	_CISyntax
.1caf	a2 00		ldx #$00			ldx 	#0
.1cb1	20 cd 2a	jsr $2acd			jsr 	EvaluateString 			; evaluate and print string
.1cb4	20 d0 1e	jsr $1ed0			jsr 	TOSToTemp0
.1cb7	20 c6 1d	jsr $1dc6			jsr 	PrintString
.1cba	4c 97 1c	jmp $1c97			jmp 	Command_Input
.1cbd					_CIVariable:
.1cbd	a2 00		ldx #$00			ldx 	#0 						; evaluate a reference.
.1cbf	20 0b 2b	jsr $2b0b			jsr 	EvaluateReference  		; this is where its going
.1cc2					_CIRetry:
.1cc2	a9 3f		lda #$3f			lda 	#"?"					; print prompt
.1cc4	a2 14		ldx #$14		ldx	#20
.1cc6	20 bf 14	jsr $14bf		jsr	deviceHandler
.1cc9	98		tya				tya
.1cca	48		pha				pha
.1ccb	20 0b 1d	jsr $1d0b			jsr 	InputString 			; input a string (manually)
.1cce	a2 01		ldx #$01			ldx 	#1
.1cd0	20 f8 1c	jsr $1cf8			jsr 	BufferToStackX 			; make stack,x ref input string.
.1cd3	a5 48		lda $48				lda 	esType 					; if target type numeric
.1cd5	29 40		and #$40			and 	#$40 					; then convert to number
.1cd7	d0 11		bne $1cea			bne 	_CIWrite
.1cd9	a2 01		ldx #$01			ldx 	#1
.1cdb	20 d0 1e	jsr $1ed0			jsr 	TOSToTemp0 				; string address in temp0, goes here.
.1cde	a9 0a		lda #$0a			lda 	#10
.1ce0	20 d8 2f	jsr $2fd8			jsr 	MInt32FromString 		; convert it back from a string.
.1ce3	68		pla				pla
.1ce4	a8		tay				tay
.1ce5	b0 03		bcs $1cea			bcs 	_CIWrite 				; successfully converted.
.1ce7	18		clc				clc 							; default fail FP conversion
.1ce8	90 d8		bcc $1cc2			bcc		_CIRetry				; failed, try again.
.1cea					_CIWrite:
.1cea	a2 00		ldx #$00			ldx 	#0
.1cec	20 6e 1e	jsr $1e6e			jsr 	WriteValue
.1cef	4c 97 1c	jmp $1c97			jmp 	Command_Input
.1cf2					_CISyntax:
.1cf2	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.1cf4	20 e0 14	jsr $14e0		jsr	errorHandler
.1cf7					_CIExit:
.1cf7	60		rts				rts
.1cf8					BufferToStackX:
.1cf8	a9 ee		lda #$ee			lda 	#InputBuffer & $FF
.1cfa	95 50		sta $50,x			sta 	esInt0,x
.1cfc	a9 0b		lda #$0b			lda 	#InputBuffer >> 8
.1cfe	95 58		sta $58,x			sta 	esInt1,x
.1d00	a9 00		lda #$00			lda 	#0
.1d02	95 60		sta $60,x			sta 	esInt2,x
.1d04	95 68		sta $68,x			sta 	esInt3,x
.1d06	a9 40		lda #$40			lda 	#$40
.1d08	95 48		sta $48,x			sta 	esType,x
.1d0a	60		rts				rts
.1d0b					InputString:
.1d0b	a9 00		lda #$00			lda 	#0
.1d0d	8d ee 0b	sta $0bee			sta 	InputBuffer
.1d10					_InputLoop:
.1d10	a2 00		ldx #$00		ldx	#0
.1d12	20 bf 14	jsr $14bf		jsr	deviceHandler
.1d15	a2 0a		ldx #$0a		ldx	#10
.1d17	20 bf 14	jsr $14bf		jsr	deviceHandler
.1d1a	c9 00		cmp #$00			cmp 	#0
.1d1c	f0 f2		beq $1d10			beq 	_InputLoop
.1d1e	c9 08		cmp #$08			cmp 	#8
.1d20	f0 19		beq $1d3b			beq 	_InputBackspace
.1d22	c9 0d		cmp #$0d			cmp 	#13
.1d24	f0 21		beq $1d47			beq 	_InputExit
.1d26	ae ee 0b	ldx $0bee			ldx 	InputBuffer
.1d29	e0 20		cpx #$20			cpx 	#MaxInputSize 			; too many characters
.1d2b	f0 e3		beq $1d10			beq 	_InputLoop
.1d2d	9d ef 0b	sta $0bef,x			sta 	InputBuffer+1,x 		; write char
.1d30	ee ee 0b	inc $0bee			inc 	InputBuffer 			; advance count.
.1d33					_InputPrintLoop:
.1d33	a2 14		ldx #$14		ldx	#20
.1d35	20 bf 14	jsr $14bf		jsr	deviceHandler
.1d38	4c 10 1d	jmp $1d10			jmp	 	_InputLoop
.1d3b					_InputBackspace:
.1d3b	ad ee 0b	lda $0bee			lda 	InputBuffer 			; at start
.1d3e	f0 d0		beq $1d10			beq 	_InputLoop
.1d40	ce ee 0b	dec $0bee			dec 	InputBuffer
.1d43	a9 08		lda #$08			lda 	#8
.1d45	d0 ec		bne $1d33			bne 	_InputPrintLoop
.1d47					_InputExit:
.1d47	a2 04		ldx #$04		ldx	#4
.1d49	20 bf 14	jsr $14bf		jsr	deviceHandler
.1d4c	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/io/print.asm

.0c0f					lastPrintToken:
>0c0f							.fill 	1
.1d4d					Command_Print:
.1d4d	a9 00		lda #$00			lda 	#0 							; clear LPT to a non token
.1d4f	8d 0f 0c	sta $0c0f			sta 	lastPrintToken
.1d52	88		dey				dey
.1d53					_PrintLoopSkip:
.1d53	c8		iny				iny
.1d54					_PrintLoop:
.1d54	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows
.1d56	c9 80		cmp #$80			cmp 	#TOK_EOL  					; done if end of line or colon
.1d58	f0 5b		beq $1db5			beq 	_PrintExit
.1d5a	c9 ca		cmp #$ca			cmp 	#TKW_COLON
.1d5c	f0 57		beq $1db5			beq 	_PrintExit
.1d5e	8d 0f 0c	sta $0c0f			sta 	lastPrintToken 				; update Last print token, so we check ; and ,
.1d61	c9 cc		cmp #$cc			cmp 	#TKW_SEMICOLON 				; ignore semicolon
.1d63	f0 ee		beq $1d53			beq 	_PrintLoopSkip
.1d65	c9 cd		cmp #$cd			cmp 	#TKW_QUOTE 					; ' is new line
.1d67	f0 3c		beq $1da5			beq	 	_PrintNewLine
.1d69	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; , is print tab
.1d6b	f0 40		beq $1dad			beq 	_PrintTab
.1d6d	20 b7 2a	jsr $2ab7			jsr 	EvaluateRoot 				; evaluate something at the root
.1d70	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.1d72	85 2a		sta $2a				sta 	temp0
.1d74	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.1d76	85 2b		sta $2b				sta 	1+(temp0)
.1d78	a5 48		lda $48				lda 	esType 						; get type
.1d7a	f0 15		beq $1d91			beq		_PrintInteger
.1d7c	4a		lsr a				lsr 	a 							; check for floating point
.1d7d	b0 08		bcs $1d87			bcs 	_PrintFloat
.1d7f					_PrintString:
.1d7f	a2 00		ldx #$00			ldx 	#0 							; bottom string to temp0
.1d81	20 d0 1e	jsr $1ed0			jsr 	TOSToTemp0
.1d84	4c 9f 1d	jmp $1d9f			jmp 	_PrintTemp0 				; print no leading space.
.1d87					_PrintFloat:
.1d87	a9 00		lda #$00			lda 	#0 							; stack level.
.1d89	a2 14		ldx #$14		ldx	#20
.1d8b	20 e8 19	jsr $19e8		jsr	floatingpointHandler
.1d8e	4c 98 1d	jmp $1d98			jmp 	_PrintSpaceTemp0
.1d91					_PrintInteger:
.1d91	a9 8a		lda #$8a			lda 	#10+$80 					; base 10 signed
.1d93	a2 00		ldx #$00			ldx 	#0 							; bottom stack element
.1d95	20 c0 30	jsr $30c0			jsr 	MInt32ToString				; convert to text
.1d98					_PrintSpaceTemp0:
.1d98	a9 20		lda #$20			lda 	#32
.1d9a	a2 14		ldx #$14		ldx	#20
.1d9c	20 bf 14	jsr $14bf		jsr	deviceHandler
.1d9f					_PrintTemp0:
.1d9f	20 c6 1d	jsr $1dc6			jsr 	PrintString
.1da2	4c 54 1d	jmp $1d54			jmp 	_PrintLoop
.1da5					_PrintNewLine:
.1da5	a2 04		ldx #$04		ldx	#4
.1da7	20 bf 14	jsr $14bf		jsr	deviceHandler
.1daa	4c 53 1d	jmp $1d53			jmp 	_PrintLoopSkip
.1dad					_PrintTab:
.1dad	a2 1a		ldx #$1a		ldx	#26
.1daf	20 bf 14	jsr $14bf		jsr	deviceHandler
.1db2	4c 53 1d	jmp $1d53			jmp 	_PrintLoopSkip
.1db5					_PrintExit:
.1db5	ad 0f 0c	lda $0c0f			lda		lastPrintToken 				; check last token
.1db8	c9 cc		cmp #$cc			cmp 	#TKW_SEMICOLON 				; if , or ; do not print NL
.1dba	f0 09		beq $1dc5			beq 	_PrintExit2
.1dbc	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.1dbe	f0 05		beq $1dc5			beq 	_PrintExit2
.1dc0	a2 04		ldx #$04		ldx	#4
.1dc2	20 bf 14	jsr $14bf		jsr	deviceHandler
.1dc5					_PrintExit2:
.1dc5	60		rts				rts
.1dc6					PrintString:
.1dc6	8a		txa				txa
.1dc7	48		pha				pha
.1dc8	98		tya				tya
.1dc9	48		pha				pha
.1dca	a0 00		ldy #$00			ldy 	#0							; get length
.1dcc	b1 2a		lda ($2a),y			lda 	(temp0),y
.1dce	aa		tax				tax 								; into X
.1dcf	e0 00		cpx #$00	_PSLoop:cpx 	#0 							; finished ?
.1dd1	f0 10		beq $1de3			beq 	_PSExit
.1dd3	ca		dex				dex
.1dd4	8a		txa				txa
.1dd5	48		pha				pha
.1dd6	c8		iny				iny
.1dd7	b1 2a		lda ($2a),y			lda 	(temp0),y
.1dd9	a2 14		ldx #$14		ldx	#20
.1ddb	20 bf 14	jsr $14bf		jsr	deviceHandler
.1dde	68		pla				pla
.1ddf	aa		tax				tax
.1de0	4c cf 1d	jmp $1dcf			jmp 	_PSLoop
.1de3					_PSExit:
.1de3	68		pla				pla
.1de4	a8		tay				tay
.1de5	68		pla				pla
.1de6	aa		tax				tax
.1de7	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/io/text.asm

.1de8					Command_CLS:
.1de8	a2 02		ldx #$02		ldx	#2
.1dea	20 bf 14	jsr $14bf		jsr	deviceHandler
.1ded	60		rts				rts
.1dee					Command_Ink:
.1dee	a2 00		ldx #$00			ldx 	#0
.1df0	20 e0 2a	jsr $2ae0			jsr 	EvaluateSmallInteger
.1df3	a2 08		ldx #$08		ldx	#8
.1df5	20 bf 14	jsr $14bf		jsr	deviceHandler
.1df8	60		rts				rts
.1df9					Command_Paper:
.1df9	a2 00		ldx #$00			ldx 	#0
.1dfb	20 e0 2a	jsr $2ae0			jsr 	EvaluateSmallInteger
.1dfe	a2 12		ldx #$12		ldx	#18
.1e00	20 bf 14	jsr $14bf		jsr	deviceHandler
.1e03	60		rts				rts
.1e04					Command_Locate:
.1e04	a2 00		ldx #$00			ldx 	#0
.1e06	20 e0 2a	jsr $2ae0			jsr 	EvaluateSmallInteger
.1e09	20 ea 31	jsr $31ea			jsr 	CheckComma
.1e0c	e8		inx				inx
.1e0d	20 e0 2a	jsr $2ae0			jsr 	EvaluateSmallInteger
.1e10	98		tya				tya
.1e11	48		pha				pha
.1e12	a4 51		ldy $51				ldy 	esInt0+1
.1e14	a5 50		lda $50				lda 	esInt0
.1e16	a2 10		ldx #$10		ldx	#16
.1e18	20 bf 14	jsr $14bf		jsr	deviceHandler
.1e1b	68		pla				pla
.1e1c	a8		tay				tay
.1e1d	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/io/vdu.asm

.1e1e					Command_VDU:
.1e1e	20 d6 2a	jsr $2ad6			jsr 	EvaluateRootInteger 			; get integer at root.
.1e21	a5 50		lda $50				lda 	esInt0
.1e23	a2 14		ldx #$14		ldx	#20
.1e25	20 bf 14	jsr $14bf		jsr	deviceHandler
.1e28					_CVNext:
.1e28	b1 28		lda ($28),y			lda 	(codePtr),y 					; what follows ?
.1e2a	c8		iny				iny
.1e2b	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 						; comma, do again
.1e2d	f0 ef		beq $1e1e			beq 	Command_VDU
.1e2f	c9 cc		cmp #$cc			cmp 	#TKW_SEMICOLON 					; semicolon, print MSB
.1e31	d0 0a		bne $1e3d			bne 	_CVExit
.1e33	a5 58		lda $58				lda 	esInt1
.1e35	a2 14		ldx #$14		ldx	#20
.1e37	20 bf 14	jsr $14bf		jsr	deviceHandler
.1e3a	4c 28 1e	jmp $1e28			jmp 	_CVNext
.1e3d	88		dey		_CVExit:dey
.1e3e	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/link.asm


;******  Return to file: main/main.asm


;******  Processing file: main/commands/misc/assert.asm

.1e3f					Command_Assert:
.1e3f	20 d6 2a	jsr $2ad6			jsr 	EvaluateRootInteger 		; what is being asserted.
.1e42	20 91 31	jsr $3191			jsr 	MInt32Zero 					; is it true ?
.1e45	f0 01		beq $1e48			beq 	_CAError
.1e47	60		rts				rts
.1e48					_CAError:
.1e48	a2 04		ldx #$04			ldx 	#ErrorID_Assert
.1e4a	20 e0 14	jsr $14e0		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/commands/misc/dim.asm

.1e4d					Command_Dim:
.1e4d	a2 02		ldx #$02		ldx	#2
.1e4f	20 df 40	jsr $40df		jsr	variableHandler
.1e52	b1 28		lda ($28),y			lda 	(codePtr),y 				; see what follows.
.1e54	c8		iny				iny
.1e55	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; comma follows, go back and do next
.1e57	f0 f4		beq $1e4d			beq 	Command_Dim
.1e59	88		dey				dey 								; unpick get
.1e5a	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/misc/let.asm

.1e5b					CommandLet:
.1e5b	a2 00		ldx #$00			ldx 	#0  						; get address to write.
.1e5d	20 0b 2b	jsr $2b0b			jsr 	EvaluateReference
.1e60	a9 8d		lda #$8d			lda 	#TKW_EQUAL 					; check for equals
.1e62	20 d2 31	jsr $31d2			jsr 	CheckToken
.1e65	e8		inx				inx 								; do RHS
.1e66	20 b9 2a	jsr $2ab9			jsr 	Evaluate 					; evaluate and dereference
.1e69	ca		dex				dex
.1e6a	20 6e 1e	jsr $1e6e			jsr 	WriteValue 					; write it out
.1e6d	60		rts				rts
.1e6e					WriteValue:
.1e6e	98		tya				tya
.1e6f	48		pha				pha
.1e70	20 d0 1e	jsr $1ed0			jsr 	TOSToTemp0 					; set temp0 to point to target address.
.1e73	b5 48		lda $48,x			lda 	esType,x 					; check the string flags match
.1e75	55 49		eor $49,x			eor 	esType+1,x 					; one string, one number causes an error.
.1e77	29 40		and #$40			and 	#$40
.1e79	d0 50		bne $1ecb			bne		_WVType
.1e7b	a0 01		ldy #$01			ldy 	#1 							; for string, copy 0 and 1.
.1e7d	b5 48		lda $48,x			lda 	esType,x 					; check for string assignment
.1e7f	29 40		and #$40			and 	#$40
.1e81	d0 1f		bne $1ea2			bne 	_WVCopyString
.1e83	b5 48		lda $48,x			lda 	esType,x 					; check both are integer.
.1e85	15 49		ora $49,x			ora 	esType+1,x
.1e87	4a		lsr a				lsr 	a
.1e88	90 22		bcc $1eac			bcc 	_WVCopyData4 				; copy 4 data bytes.
.1e8a	b5 48		lda $48,x			lda 	esType,x
.1e8c	4a		lsr a				lsr 	a
.1e8d	90 3c		bcc $1ecb			bcc 	_WVType
.1e8f	e8		inx				inx 								; force the value being written to be a float.
.1e90	20 1b 27	jsr $271b			jsr 	BPMakeFloat
.1e93	ca		dex				dex
.1e94	20 d0 1e	jsr $1ed0			jsr 	TOSToTemp0 					; set Temp0 to write address
.1e97	e8		inx				inx
.1e98	8a		txa				txa
.1e99	a2 20		ldx #$20		ldx	#32
.1e9b	20 e8 19	jsr $19e8		jsr	floatingpointHandler
.1e9e	aa		tax				tax
.1e9f	4c c8 1e	jmp $1ec8			jmp 	_WVCopyExit
.1ea2					_WVCopyString:
.1ea2	8a		txa				txa
.1ea3	a2 0e		ldx #$0e		ldx	#14
.1ea5	20 0e 35	jsr $350e		jsr	stringHandler
.1ea8	aa		tax				tax
.1ea9	4c c8 1e	jmp $1ec8			jmp 	_WVCopyExit
.1eac					_WVCopyData4:
.1eac	b5 48		lda $48,x			lda 	esType,x 					; is the int ref a byte ref ?
.1eae	29 20		and #$20			and 	#$20 						; (e.g. is bit 5 set)
.1eb0	d0 10		bne $1ec2			bne 	_WVCopyData1
.1eb2	a0 03		ldy #$03			ldy 	#3
.1eb4	b5 69		lda $69,x			lda 	esInt3+1,x
.1eb6	91 2a		sta ($2a),y			sta 	(temp0),y
.1eb8	88		dey				dey
.1eb9	b5 61		lda $61,x			lda 	esInt2+1,x
.1ebb	91 2a		sta ($2a),y			sta 	(temp0),y
.1ebd	88		dey				dey
.1ebe	b5 59		lda $59,x			lda 	esInt1+1,x
.1ec0	91 2a		sta ($2a),y			sta 	(temp0),y
.1ec2					_WVCopyData1:
.1ec2	a0 00		ldy #$00			ldy 	#0
.1ec4	b5 51		lda $51,x			lda 	esInt0+1,x
.1ec6	91 2a		sta ($2a),y			sta 	(temp0),y
.1ec8					_WVCopyExit:
.1ec8	68		pla				pla
.1ec9	a8		tay				tay
.1eca	60		rts				rts
.1ecb					_WVType:
.1ecb	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.1ecd	20 e0 14	jsr $14e0		jsr	errorHandler
.1ed0					TOSToTemp0:
.1ed0	b5 50		lda $50,x			lda 	esInt0,x
.1ed2	85 2a		sta $2a				sta 	temp0
.1ed4	b5 58		lda $58,x			lda 	esInt1,x
.1ed6	85 2b		sta $2b				sta 	temp0+1
.1ed8	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/misc/poke.asm

.1ed9					Command_Poke:
.1ed9	a9 01		lda #$01			lda 	#1
.1edb	d0 06		bne $1ee3			bne 	PokeGeneral
.1edd					Command_Doke:
.1edd	a9 02		lda #$02			lda 	#2
.1edf	d0 02		bne $1ee3			bne 	PokeGeneral
.1ee1					Command_Loke:
.1ee1	a9 03		lda #$03			lda 	#3
.1ee3					PokeGeneral:
.1ee3	48		pha				pha 								; save id (PDL = 123)
.1ee4	20 d6 2a	jsr $2ad6			jsr 	EvaluateRootInteger 		; target address
.1ee7	20 ea 31	jsr $31ea			jsr	 	CheckComma
.1eea	e8		inx				inx
.1eeb	20 d8 2a	jsr $2ad8			jsr 	EvaluateInteger 			; what value to POKE ?
.1eee	ca		dex				dex
.1eef	20 d0 1e	jsr $1ed0			jsr 	TOSToTemp0 					; temp0 points to the target address
.1ef2	84 32		sty $32				sty 	tempShort 					; save Y
.1ef4	68		pla				pla 								; get copy type (1-3) and dispatch
.1ef5	aa		tax				tax
.1ef6	ca		dex				dex
.1ef7	f0 14		beq $1f0d			beq 	_Poke1
.1ef9	ca		dex				dex
.1efa	f0 0b		beq $1f07			beq 	_Poke2
.1efc	a0 03		ldy #$03			ldy 	#3							; put 4 bytes
.1efe	a5 69		lda $69				lda 	esInt3+1
.1f00	91 2a		sta ($2a),y			sta 	(temp0),y
.1f02	88		dey				dey
.1f03	a5 61		lda $61				lda 	esInt2+1
.1f05	91 2a		sta ($2a),y			sta 	(temp0),y
.1f07					_Poke2:
.1f07	a0 01		ldy #$01			ldy 	#1
.1f09	a5 59		lda $59				lda 	esInt1+1
.1f0b	91 2a		sta ($2a),y			sta 	(temp0),y
.1f0d					_Poke1:
.1f0d	a0 00		ldy #$00			ldy 	#0
.1f0f	a5 51		lda $51				lda 	esInt0+1
.1f11	91 2a		sta ($2a),y			sta 	(temp0),y
.1f13	a4 32		ldy $32				ldy 	tempShort 					; restore Y and exit
.1f15	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/misc/rem.asm

.1f16					Command_Rem:
.1f16					Command_Rem2:
.1f16	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows
.1f18	c9 85		cmp #$85			cmp 	#TOK_STR 					; if it is a string then skip it.
.1f1a	d0 06		bne $1f22			bne 	_CRNotString
.1f1c	c8		iny				iny
.1f1d	98		tya				tya
.1f1e	38		sec				sec
.1f1f	71 28		adc ($28),y			adc 	(codePtr),y 				; get string size, add to Y, +1 for the length
.1f21	a8		tay				tay
.1f22					_CRNotString:
.1f22	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/misc/stopend.asm

.1f23					CommandStop:
.1f23	a2 06		ldx #$06			ldx 	#ErrorID_Stop
.1f25	20 e0 14	jsr $14e0		jsr	errorHandler
.1f28					CommandEnd:
.1f28	4c 53 32	jmp $3253			jmp 	WarmStart
.1f2b					CommandXemu:
.1f2b	4c ff ff	jmp $ffff			jmp 	$FFFF 						; fudge to crash out of emulator
.1f2e					AdvanceNextLine:
.1f2e	a0 00		ldy #$00			ldy 	#0 							; get offset
.1f30	b1 28		lda ($28),y			lda 	(codePtr),y
.1f32	18		clc				clc 								; add to codePtr
.1f33	65 28		adc $28				adc 	codePtr
.1f35	85 28		sta $28				sta 	codePtr
.1f37	90 02		bcc $1f3b			bcc 	_ANLNoCarry
.1f39	e6 29		inc $29				inc 	codePtr+1
.1f3b					_ANLNoCarry:
.1f3b	b1 28		lda ($28),y			lda 	(codePtr),y 				; if end of program (or was just stand alone.
.1f3d	f0 e9		beq $1f28			beq 	CommandEnd 					; execute END
.1f3f	a0 03		ldy #$03			ldy 	#3 							; start of tokens on line.
.1f41	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/for.asm

.1f42					Command_FOR:
.1f42	a9 46		lda #$46			lda 	#markerFOR 					; allocate the space and set the marker
.1f44	a2 0b		ldx #$0b			ldx 	#11
.1f46	20 05 32	jsr $3205			jsr 	RSClaim
.1f49	20 5b 1e	jsr $1e5b			jsr 	CommandLET 					; do the same as LET FOR [a = 4]
.1f4c	a5 48		lda $48				lda 	esType 						; check type should be integer reference.
.1f4e	c9 80		cmp #$80			cmp 	#$80 						; we do not do FOR floats.
.1f50	d0 4c		bne $1f9e			bne 	_CFType
.1f52	a9 ce		lda #$ce			lda 	#TKW_TO 					; check TO present.
.1f54	20 d2 31	jsr $31d2			jsr 	CheckToken
.1f57	a2 01		ldx #$01			ldx 	#1 							; keep the variable address in stack 0
.1f59	20 d8 2a	jsr $2ad8			jsr 	EvaluateInteger				; get terminal value in stack 1
.1f5c	98		tya				tya
.1f5d	48		pha				pha
.1f5e	a0 04		ldy #$04			ldy 	#4
.1f60	a5 50		lda $50				lda		esInt0 						; copy the address of the index variable into 4 and 5
.1f62	91 37		sta ($37),y			sta 	(rsPointer),y
.1f64	c8		iny				iny
.1f65	a5 58		lda $58				lda		esInt1
.1f67	91 37		sta ($37),y			sta 	(rsPointer),y
.1f69	c8		iny				iny
.1f6a	a9 01		lda #$01			lda 	#1  						; the default step in 6, (-128 .. 127 only)
.1f6c	91 37		sta ($37),y			sta 	(rsPointer),y
.1f6e	c8		iny				iny
.1f6f	a5 51		lda $51				lda		esInt0+1 					; terminal value in 7 to 11.
.1f71	91 37		sta ($37),y			sta 	(rsPointer),y
.1f73	c8		iny				iny
.1f74	a5 59		lda $59				lda		esInt1+1
.1f76	91 37		sta ($37),y			sta 	(rsPointer),y
.1f78	c8		iny				iny
.1f79	a5 61		lda $61				lda		esInt2+1
.1f7b	91 37		sta ($37),y			sta 	(rsPointer),y
.1f7d	c8		iny				iny
.1f7e	a5 69		lda $69				lda		esInt3+1
.1f80	91 37		sta ($37),y			sta 	(rsPointer),y
.1f82	68		pla				pla
.1f83	a8		tay				tay
.1f84	b1 28		lda ($28),y			lda 	(codePtr),y 				; followed by STEP.
.1f86	c9 cf		cmp #$cf			cmp 	#TKW_STEP
.1f88	d0 0e		bne $1f98			bne 	_CFDone
.1f8a	c8		iny				iny									; skip over step.
.1f8b	20 d8 2a	jsr $2ad8			jsr 	EvaluateInteger 			; get step
.1f8e	98		tya				tya
.1f8f	48		pha				pha
.1f90	b5 50		lda $50,x			lda 	esInt0,x 					; copy it into step (bit lazy here)
.1f92	a0 06		ldy #$06			ldy 	#6
.1f94	91 37		sta ($37),y			sta 	(rsPointer),y
.1f96	68		pla				pla
.1f97	a8		tay				tay
.1f98					_CFDone:
.1f98	a9 01		lda #$01			lda 	#1
.1f9a	20 31 32	jsr $3231			jsr 	RSSavePosition 				; save position.
.1f9d	60		rts				rts
.1f9e					_CFType:
.1f9e	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.1fa0	20 e0 14	jsr $14e0		jsr	errorHandler
.1fa3					Command_NEXT:
.1fa3	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.1fa5	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.1fa7	c9 46		cmp #$46			cmp 	#markerFOR 						; does it match
.1fa9	f0 05		beq $1fb0			beq 	_isok
.1fab	a2 10		ldx #$10			ldx 	#ErrorID_nextErr
.1fad	20 e0 14	jsr $14e0		jsr	errorHandler
.1fb0					_isok:
.1fb0	b1 28		lda ($28),y			lda 	(codePtr),y 				; is it NEXT <index>
.1fb2	c9 40		cmp #$40			cmp 	#$40 						; e.g. a variable follows 00-3F
.1fb4	b0 18		bcs $1fce			bcs 	_CNNoIndex
.1fb6	a2 00		ldx #$00			ldx 	#0 							; start on stack
.1fb8	20 0b 2b	jsr $2b0b			jsr 	EvaluateReference 			; this is the variable/parameter to localise.
.1fbb	98		tya				tya
.1fbc	48		pha				pha
.1fbd	a0 04		ldy #$04			ldy 	#4 							; check same variable as that stored at +4,+5
.1fbf	b1 37		lda ($37),y			lda 	(rsPointer),y
.1fc1	d5 50		cmp $50,x			cmp 	esInt0,x
.1fc3	d0 76		bne $203b			bne 	_CNBadIndex
.1fc5	c8		iny				iny
.1fc6	b1 37		lda ($37),y			lda 	(rsPointer),y
.1fc8	d5 58		cmp $58,x			cmp 	esInt1,x
.1fca	d0 6f		bne $203b			bne 	_CNBadIndex
.1fcc	68		pla				pla
.1fcd	a8		tay				tay
.1fce					_CNNoIndex:
.1fce	98		tya				tya
.1fcf	48		pha				pha
.1fd0	a0 04		ldy #$04			ldy 	#4 							; make temp0 point to the index
.1fd2	b1 37		lda ($37),y			lda 	(rsPointer),y
.1fd4	85 2a		sta $2a				sta 	temp0
.1fd6	c8		iny				iny
.1fd7	b1 37		lda ($37),y			lda 	(rsPointer),y
.1fd9	85 2b		sta $2b				sta 	temp0+1
.1fdb	c8		iny				iny
.1fdc	a2 00		ldx #$00			ldx 	#0 							; X is the sign extend part of the step.
.1fde	b1 37		lda ($37),y			lda 	(rsPointer),y 				; get the step.
.1fe0	85 2f		sta $2f				sta 	temp2+1 					; save for later.
.1fe2	10 01		bpl $1fe5			bpl 	_CNSignX
.1fe4	ca		dex				dex  								; X = $FF
.1fe5					_CNSignX:
.1fe5	18		clc				clc 								; add to the LSB
.1fe6	a0 00		ldy #$00			ldy 	#0
.1fe8	71 2a		adc ($2a),y			adc 	(temp0),y
.1fea	91 2a		sta ($2a),y			sta 	(temp0),y
.1fec					_CNPropogate:
.1fec	c8		iny				iny  								; add the sign extended in X to the rest.
.1fed	8a		txa				txa
.1fee	71 2a		adc ($2a),y			adc 	(temp0),y
.1ff0	91 2a		sta ($2a),y			sta 	(temp0),y
.1ff2	c8		iny				iny
.1ff3	8a		txa				txa
.1ff4	71 2a		adc ($2a),y			adc 	(temp0),y
.1ff6	91 2a		sta ($2a),y			sta 	(temp0),y
.1ff8	c8		iny				iny
.1ff9	8a		txa				txa
.1ffa	71 2a		adc ($2a),y			adc 	(temp0),y
.1ffc	91 2a		sta ($2a),y			sta 	(temp0),y
.1ffe	18		clc				clc 								; point temp1 to the terminal value stored in the stack.
.1fff	a5 37		lda $37				lda 	rsPointer
.2001	69 07		adc #$07			adc 	#7
.2003	85 2c		sta $2c				sta 	temp1
.2005	a9 00		lda #$00			lda 	#0
.2007	85 2e		sta $2e				sta 	temp2 						; clear temp2, which is the OR of all the subtractions.
.2009	a8		tay				tay 								; and clear the Y register again.
.200a	65 38		adc $38				adc 	rsPointer+1
.200c	85 2d		sta $2d				sta 	temp1+1
.200e	38		sec				sec 								; calculate current - limit oring interim values.
.200f	20 47 20	jsr $2047			jsr 	_CNCompare 					; each of these does a byte.
.2012	20 47 20	jsr $2047			jsr 	_CNCompare 					; we calculate the OR of all these subtractions.
.2015	20 47 20	jsr $2047			jsr 	_CNCompare 					; and the carry of the subtraction.
.2018	20 47 20	jsr $2047			jsr 	_CNCompare
.201b	50 02		bvc $201f			bvc 	_CNNoOverflow 				; converts to a signed comparison on the sign bit.
.201d	49 80		eor #$80			eor 	#$80
.201f					_CNNoOverflow:
.201f	a4 2f		ldy $2f				ldy 	temp2+1						; get step back
.2021	30 1d		bmi $2040			bmi 	_CNCheckDownto
.2023	c9 00		cmp #$00			cmp 	#0
.2025	30 0c		bmi $2033			bmi 	_CNLoopRound 				; loop round if < =
.2027	a5 2e		lda $2e				lda 	temp2
.2029	f0 08		beq $2033			beq 	_CNLoopRound
.202b					_CNLoopExit:
.202b	68		pla				pla
.202c	a8		tay				tay
.202d	a9 0b		lda #$0b			lda 	#11
.202f	20 27 32	jsr $3227			jsr 	RSFree
.2032	60		rts				rts
.2033					_CNLoopRound:
.2033	68		pla				pla
.2034	a8		tay				tay
.2035	a9 01		lda #$01			lda 	#1
.2037	20 44 32	jsr $3244			jsr 	RSLoadPosition				; go back to the loop top
.203a	60		rts				rts
.203b					_CNBadIndex:
.203b	a2 13		ldx #$13			ldx 	#ErrorID_BadIndex
.203d	20 e0 14	jsr $14e0		jsr	errorHandler
.2040					_CNCheckDownto:
.2040	c9 00		cmp #$00			cmp 	#0
.2042	10 ef		bpl $2033			bpl 	_CNLoopRound
.2044	4c 2b 20	jmp $202b			jmp 	_CNLoopExit
.2047					_CNCompare:
.2047	b1 2a		lda ($2a),y			lda 	(temp0),y 					; do the subtraction - compare don't care about answer
.2049	f1 2c		sbc ($2c),y			sbc 	(temp1),y
.204b	05 2e		ora $2e				ora 	temp2 						; Or into temp2 (does not affect carry)
.204d	85 2e		sta $2e				sta 	temp2
.204f	c8		iny				iny
.2050	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/if.asm

.2051					CommandIf:
.2051	20 d6 2a	jsr $2ad6			jsr 	EvaluateRootInteger 		; get what's being tested.
.2054	b1 28		lda ($28),y			lda 	(codePtr),y 				; check for IF .. THEN or IF .. GOTO which are single lines.
.2056	c9 d9		cmp #$d9			cmp 	#TKW_GOTO
.2058	f0 04		beq $205e			beq 	_IfSimple
.205a	c9 a1		cmp #$a1			cmp 	#TKW_THEN
.205c	d0 1b		bne $2079			bne 	_IfComplex
.205e					_IfSimple:
.205e	20 91 31	jsr $3191			jsr 	MInt32Zero					; check if TOS zero
.2061	f0 10		beq $2073			beq 	_IfEOL 						; go to next line.
.2063	b1 28		lda ($28),y			lda 	(codePtr),y 				; get and skip token.
.2065	c8		iny				iny
.2066	c9 d9		cmp #$d9			cmp 	#TKW_GOTO 					; was it if GOTO ?
.2068	f0 0c		beq $2076			beq 	_IfGoto 					; do the Goto code
.206a	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows the THEN ?
.206c	29 c0		and #$c0			and 	#$C0 						; check $40-$7F
.206e	c9 40		cmp #$40			cmp 	#$40 						; e.g. number IF x = 0 THEN 170
.2070	f0 04		beq $2076			beq 	_IfGoto
.2072	60		rts				rts 								; else continue on this line.
.2073					_IfEOL:
.2073	4c 2e 1f	jmp $1f2e			jmp 	AdvanceNextLine 			; go to next line
.2076					_IfGoto:
.2076	4c 65 1c	jmp $1c65			jmp 	CommandGoto
.2079					_IfComplex:
.2079	20 91 31	jsr $3191			jsr 	MInt32Zero 					; is it true ?
.207c	f0 01		beq $207f			beq 	_IFSkip 					; if non-zero then skip to ELSE/ENDIF
.207e	60		rts				rts 								; else continue.
.207f					_IFSkip:
.207f	a9 d6		lda #$d6			lda	 	#TKW_ELSE 					; test failed, go to ELSE or ENDIF whichever comes first.
.2081	a2 a2		ldx #$a2			ldx 	#TKW_ENDIF
.2083	4c 1b 23	jmp $231b			jmp		ScanForward
.2086					Command_ELSE:
.2086	a2 a2		ldx #$a2			ldx 	#TKW_ENDIF
.2088	8a		txa				txa
.2089	4c 1b 23	jmp $231b			jmp		ScanForward
.208c					Command_ENDIF:
.208c	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/local.asm

.0c10					storeSize:
>0c10							.fill 	1
.208d					CommandLocal:
.208d	a2 00		ldx #$00			ldx 	#0
.208f	20 ab 20	jsr $20ab			jsr 	LocaliseVariable 			; localise one.
.2092					_CLCheckNext:
.2092	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows ?
.2094	c8		iny				iny
.2095	c9 8d		cmp #$8d			cmp 	#TKW_EQUAL 					; something local "x = 2" ?
.2097	f0 06		beq $209f			beq 	_CLAssignment
.2099	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; comma try again.
.209b	f0 f0		beq $208d			beq 	CommandLocal
.209d	88		dey				dey
.209e	60		rts				rts
.209f					_CLAssignment:
.209f	a2 01		ldx #$01			ldx 	#1
.20a1	20 b9 2a	jsr $2ab9			jsr 	Evaluate 					; evaluate RHS
.20a4	ca		dex				dex
.20a5	20 6e 1e	jsr $1e6e			jsr 	WriteValue
.20a8	4c 92 20	jmp $2092			jmp 	_CLCheckNext
.20ab					LocaliseVariable:
.20ab	b1 28		lda ($28),y			lda 	(codePtr),y 				; check it's a variable.
.20ad	c9 40		cmp #$40			cmp 	#$40
.20af	b0 67		bcs $2118			bcs 	_LVSyntax
.20b1	8a		txa				txa 								; get the address of that variable.
.20b2	a2 00		ldx #$00		ldx	#0
.20b4	20 df 40	jsr $40df		jsr	variableHandler
.20b7	aa		tax				tax
.20b8	8a		txa				txa
.20b9	48		pha				pha
.20ba	98		tya				tya
.20bb	48		pha				pha
.20bc	20 d0 1e	jsr $1ed0			jsr 	TOSToTemp0 					; the address of the variable is now in temp0.
.20bf	b5 48		lda $48,x			lda 	esType,x 					; get the type
.20c1	0a		asl a				asl 	a
.20c2	10 16		bpl $20da			bpl 	_LVPushNumber
.20c4	a0 00		ldy #$00			ldy 	#0 							; put address of data in temp1
.20c6	b1 2a		lda ($2a),y			lda 	(temp0),y
.20c8	c8		iny				iny
.20c9	85 2c		sta $2c				sta 	temp1
.20cb	b1 2a		lda ($2a),y			lda 	(temp0),y
.20cd	85 2d		sta $2d				sta 	temp1+1
.20cf	a0 00		ldy #$00			ldy 	#0 	 						; get length
.20d1	b1 2c		lda ($2c),y			lda 	(temp1),y
.20d3	aa		tax				tax 								; into X
.20d4	e8		inx				inx 								; +1 for length.
.20d5	a9 24		lda #$24			lda 	#markerString
.20d7	4c ef 20	jmp $20ef			jmp 	_LVWriteFrame
.20da					_LVPushNumber:
.20da	a5 2a		lda $2a				lda 	temp0 						; storage address and data source are the same
.20dc	85 2c		sta $2c				sta 	temp1
.20de	a5 2b		lda $2b				lda 	temp0+1
.20e0	85 2d		sta $2d				sta 	temp1+1
.20e2	b5 48		lda $48,x			lda 	esType,x 					; put float flag into carry.
.20e4	4a		lsr a				lsr 	a
.20e5	a9 25		lda #$25			lda 	#markerInt 					; get marker and size.
.20e7	a2 04		ldx #$04			ldx 	#VarISize
.20e9	90 04		bcc $20ef			bcc 	_LVIsInteger
.20eb	a9 23		lda #$23			lda 	#markerFloat
.20ed	a2 06		ldx #$06			ldx 	#VarFSize
.20ef					_LVIsInteger:
.20ef					_LVWriteFrame:
.20ef	8e 10 0c	stx $0c10			stx 	storeSize 					; number of bytes to copy from (temp0)
.20f2	e8		inx				inx 								; allocate 3 bytes, 2 for the address, 1 for the marker.
.20f3	e8		inx				inx
.20f4	e8		inx				inx
.20f5	20 05 32	jsr $3205			jsr 	RSClaim 					; create the stack frame.
.20f8	a5 2a		lda $2a				lda 	temp0 						; copy the target address to slots 1 & 2
.20fa	a0 01		ldy #$01			ldy 	#1
.20fc	91 37		sta ($37),y			sta 	(rsPointer),y
.20fe	c8		iny				iny
.20ff	a5 2b		lda $2b				lda 	temp0+1
.2101	91 37		sta ($37),y			sta 	(rsPointer),y
.2103	a0 00		ldy #$00			ldy 	#0
.2105					_LVCopyData:
.2105	b1 2c		lda ($2c),y			lda 	(temp1),y 					; get data from source, temp1
.2107	c8		iny				iny 								; write allowing for the header bit.
.2108	c8		iny				iny
.2109	c8		iny				iny
.210a	91 37		sta ($37),y			sta 	(rsPointer),y
.210c	88		dey				dey
.210d	88		dey				dey
.210e	ce 10 0c	dec $0c10			dec 	storeSize 					; do it storesize times
.2111	d0 f2		bne $2105			bne 	_LVCopyData
.2113	68		pla				pla
.2114	a8		tay				tay
.2115	68		pla				pla
.2116	aa		tax				tax
.2117	60		rts				rts
.2118					_LVSyntax:
.2118	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.211a	20 e0 14	jsr $14e0		jsr	errorHandler
.211d					RestoreLocals:
.211d	a2 00		ldx #$00			ldx 	#0
.211f	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.2121	c9 40		cmp #$40			cmp	 	#64
.2123	90 01		bcc $2126			bcc 	_RLocal
.2125	60		rts				rts
.2126					_RLocal:
.2126	8a		txa				txa
.2127	48		pha				pha
.2128	98		tya				tya
.2129	48		pha				pha
.212a	a0 01		ldy #$01			ldy 	#1 							; copy target address to temp0
.212c	b1 37		lda ($37),y			lda 	(rsPointer),y
.212e	85 2a		sta $2a				sta 	temp0
.2130	c8		iny				iny
.2131	b1 37		lda ($37),y			lda 	(rsPointer),y
.2133	85 2b		sta $2b				sta 	temp0+1
.2135	a0 00		ldy #$00			ldy 	#0 							; get type back.
.2137	b1 37		lda ($37),y			lda 	(rsPointer),y
.2139	c9 24		cmp #$24			cmp 	#markerString 				; string is ... different :)
.213b	f0 28		beq $2165			beq 	_RString
.213d	a2 04		ldx #$04			ldx		#VARISize 					; size integer
.213f	c9 25		cmp #$25			cmp 	#markerInt
.2141	f0 02		beq $2145			beq 	_RIsInteger
.2143	a2 06		ldx #$06			ldx 	#VARFSize 					; size float
.2145					_RIsInteger:
.2145	8a		txa				txa
.2146	48		pha				pha
.2147	a0 03		ldy #$03			ldy 	#3							; start size to copy back from pointer.
.2149					_RCopyBack:
.2149	b1 37		lda ($37),y			lda 	(rsPointer),y
.214b	88		dey				dey
.214c	88		dey				dey
.214d	88		dey				dey
.214e	91 2a		sta ($2a),y			sta 	(temp0),y
.2150	c8		iny				iny
.2151	c8		iny				iny
.2152	c8		iny				iny
.2153	c8		iny				iny
.2154	ca		dex				dex
.2155	d0 f2		bne $2149			bne 	_RCopyBack
.2157	68		pla				pla 								; get size add 3
.2158	18		clc				clc
.2159	69 03		adc #$03			adc 	#3 							; (2 for address one for marker)
.215b					_RRestoreAAndLoop:
.215b	20 27 32	jsr $3227			jsr 	RSFree
.215e	68		pla				pla
.215f	a8		tay				tay
.2160	68		pla				pla
.2161	aa		tax				tax
.2162	4c 1d 21	jmp $211d			jmp 	RestoreLocals 				; go see if there are any more locals.
.2165					_RString:
.2165	a2 00		ldx #$00			ldx 	#0
.2167	a0 01		ldy #$01			ldy 	#1 							; set up for a string write.
.2169	b1 37		lda ($37),y			lda 	(rsPointer),y
.216b	95 50		sta $50,x			sta 	esInt0,x
.216d	c8		iny				iny
.216e	b1 37		lda ($37),y			lda 	(rsPointer),y
.2170	95 58		sta $58,x			sta 	esInt1,x
.2172	18		clc				clc
.2173	a5 37		lda $37				lda 	rsPointer
.2175	69 03		adc #$03			adc 	#3
.2177	95 51		sta $51,x			sta 	esInt0+1,x
.2179	a5 38		lda $38				lda 	rsPointer+1
.217b	69 00		adc #$00			adc 	#0
.217d	95 59		sta $59,x			sta 	esInt1+1,x
.217f	8a		txa				txa
.2180	a2 0e		ldx #$0e		ldx	#14
.2182	20 0e 35	jsr $350e		jsr	stringHandler
.2185	a0 03		ldy #$03			ldy 	#3 							; get string length
.2187	b1 37		lda ($37),y			lda 	(rsPointer),y
.2189	18		clc				clc
.218a	69 04		adc #$04			adc 	#4 							; add 4 (pointer, marker, length) to restore.
.218c	4c 5b 21	jmp $215b			jmp 	_RRestoreAAndLoop

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/proc.asm

.0c11					paramCount:
>0c11							.fill 	1
.218f					CallProc:
.218f	20 17 22	jsr $2217			jsr 	FindProcedure 				; find procedure, put in temp0. A contains name length.
.2192	48		pha				pha 								; save length on stack
.2193	85 32		sta $32				sta 	tempShort 					; save length in tempShort
.2195	a5 2b		lda $2b				lda 	temp0+1 					; save procedure target on stack.
.2197	48		pha				pha
.2198	a5 2a		lda $2a				lda 	temp0
.219a	48		pha				pha
.219b	98		tya				tya 								; calculate Y + length
.219c	18		clc				clc
.219d	65 32		adc $32				adc 	tempShort
.219f	a8		tay				tay
.21a0	a2 00		ldx #$00			ldx 	#0 							; where the first parameter goes - 1
.21a2					_CallProcEvalParams:
.21a2	e8		inx				inx
.21a3	b1 28		lda ($28),y			lda 	(codePtr),y 				; do we have ) , e.g. the end of the parameters ?
.21a5	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.21a7	f0 0b		beq $21b4			beq 	_CPDoneParams
.21a9	20 b9 2a	jsr $2ab9			jsr 	Evaluate 					; evaluate a parameter
.21ac	b1 28		lda ($28),y			lda 	(codePtr),Y 				; get what's next, preconsume
.21ae	c8		iny				iny
.21af	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; if comma, go get another parameter
.21b1	f0 ef		beq $21a2			beq 	_CallProcEvalParams
.21b3	88		dey				dey 								; undo consumption.
.21b4					_CPDoneParams:
.21b4	20 dd 31	jsr $31dd			jsr 	CheckRightParen 			; check closing parenthesis.
.21b7	8e 11 0c	stx $0c11			stx 	paramCount 					; store parameter count+1
.21ba	a2 04		ldx #$04			ldx 	#4							; make space on stack
.21bc	a9 50		lda #$50			lda 	#markerPROC
.21be	20 05 32	jsr $3205			jsr 	RSClaim
.21c1	a9 01		lda #$01			lda 	#1 							; store return address.
.21c3	20 31 32	jsr $3231			jsr 	RSSavePosition
.21c6	68		pla				pla 								; get the new code Ptr
.21c7	85 28		sta $28				sta 	codePtr
.21c9	68		pla				pla
.21ca	85 29		sta $29				sta 	codePtr+1
.21cc	68		pla				pla 								; length of name + 4 is the param start.
.21cd	18		clc				clc
.21ce	69 04		adc #$04			adc 	#4
.21d0	a8		tay				tay
.21d1	a2 ff		ldx #$ff			ldx 	#$FF
.21d3					_CPLoadParameters:
.21d3	e8		inx				inx 								; point to where the address should be loaded.
.21d4	ec 11 0c	cpx $0c11			cpx 	paramCount 					; too many parameters in definition ?
.21d7	f0 1e		beq $21f7			beq 	_CPParamError
.21d9	b1 28		lda ($28),y			lda 	(codePtr),y					; what follows
.21db	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN 				; is it the right bracket
.21dd	f0 0e		beq $21ed			beq 	_CPParamComplete 			; done all the parameters, perhaps.
.21df	20 ab 20	jsr $20ab			jsr 	LocaliseVariable 			; make following variable local, ref in tos,x
.21e2	20 6e 1e	jsr $1e6e			jsr 	WriteValue 					; copy the evaluated parameter into there.
.21e5	b1 28		lda ($28),y			lda 	(codePtr),y 				; followed by a comma ?
.21e7	c8		iny				iny
.21e8	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.21ea	f0 e7		beq $21d3			beq 	_CPLoadParameters
.21ec	88		dey				dey 								; no, unconsume and check for )
.21ed					_CPParamComplete:
.21ed	20 dd 31	jsr $31dd			jsr 	CheckRightParen 			; check )
.21f0	e8		inx				inx 								; check right number of parameters have been consumed
.21f1	ec 11 0c	cpx $0c11			cpx 	paramCount
.21f4	d0 01		bne $21f7			bne 	_CPParamError
.21f6	60		rts				rts
.21f7					_CPParamError:
.21f7	a2 18		ldx #$18			ldx 	#ErrorID_Params
.21f9	20 e0 14	jsr $14e0		jsr	errorHandler
.21fc					ReturnProc:
.21fc	20 1d 21	jsr $211d			jsr 	RestoreLocals 				; get the locals back.
.21ff	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.2201	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.2203	c9 50		cmp #$50			cmp 	#markerPROC 						; does it match
.2205	f0 05		beq $220c			beq 	_isok
.2207	a2 12		ldx #$12			ldx 	#ErrorID_endProcErr
.2209	20 e0 14	jsr $14e0		jsr	errorHandler
.220c					_isok:
.220c	a9 01		lda #$01			lda 	#1
.220e	20 44 32	jsr $3244			jsr 	RSLoadPosition 				; reload the position from offset 1.
.2211	a9 04		lda #$04			lda 	#4 							; throw 4 bytes from stack.
.2213	20 27 32	jsr $3227			jsr 	RSFree
.2216	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/proctable.asm

.0c12					procList:
>0c12							.fill 	2		 					; terminated by name high being zero.
.0c14					yInLine:
>0c14							.fill 	1
.2217					FindProcedure:
.2217	8c 14 0c	sty $0c14			sty 	yInLine 					; save current position.
.221a	20 d5 22	jsr $22d5			jsr 	CalculateProcedureHash		; calculate the hash of the procedure.
.221d	85 2c		sta $2c				sta 	temp1
.221f	ad 12 0c	lda $0c12			lda		procList 					; put procList address in temp2
.2222	85 2e		sta $2e				sta 	temp2
.2224	ad 13 0c	lda $0c13			lda 	procList+1
.2227	85 2f		sta $2f				sta 	temp2+1
.2229	a0 00		ldy #$00			ldy 	#0 							; position in this table.
.222b					_FPLoop:
.222b	b1 2e		lda ($2e),y			lda 	(temp2),y
.222d	f0 4f		beq $227e			beq 	_FPError 					; if so, we don't know this procedure.
.222f	85 2b		sta $2b				sta 	temp0+1 					; copy MSB/LSB to temp0 as we go.
.2231	c8		iny				iny
.2232	b1 2e		lda ($2e),y			lda 	(temp2),y
.2234	85 2a		sta $2a				sta 	temp0
.2236	c8		iny				iny
.2237	b1 2e		lda ($2e),y			lda 	(temp2),y					; check the procedure hash.
.2239	c5 2c		cmp $2c				cmp 	temp1
.223b	d0 2b		bne $2268			bne 	_FPNext 					; hash is different, go to next.
.223d	38		sec				sec
.223e	ad 14 0c	lda $0c14			lda 	yInLine 					; position in line must be at least 4
.2241	e9 04		sbc #$04			sbc 	#4
.2243	18		clc				clc
.2244	65 28		adc $28				adc 	codePtr
.2246	85 30		sta $30				sta 	temp3
.2248	a5 29		lda $29				lda 	codePtr+1
.224a	69 00		adc #$00			adc 	#0
.224c	85 31		sta $31				sta 	temp3+1
.224e	98		tya				tya
.224f	48		pha				pha
.2250	a0 04		ldy #$04			ldy 	#4
.2252					_FPCName:
.2252	b1 30		lda ($30),y			lda 	(temp3),y 					; check the same
.2254	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.2256	d0 0e		bne $2266			bne 	_FPpulYNext 				; if different go to next one.
.2258	c8		iny				iny
.2259	c9 3a		cmp #$3a			cmp 	#$3A
.225b	90 f5		bcc $2252			bcc 	_FPCName 					; compare the whole lot....
.225d	68		pla				pla 								; throw away the saved Y
.225e	98		tya				tya 								; length of name is Y-4
.225f	38		sec				sec
.2260	e9 04		sbc #$04			sbc 	#4
.2262	ac 14 0c	ldy $0c14			ldy 	yInLine  					; get the original Y back
.2265	60		rts				rts
.2266					_FPpulYNext:
.2266	68		pla				pla
.2267	a8		tay				tay
.2268					_FPNext:
.2268	c8		iny				iny 								; next procedure record.
.2269	10 c0		bpl $222b			bpl 	_FPLoop 					; if done 128 already ... e.g. Y -ve
.226b	98		tya				tya 								; subtract 128 from Y
.226c	38		sec				sec
.226d	e9 80		sbc #$80			sbc 	#128
.226f	a8		tay				tay
.2270	18		clc				clc 								; add 128 to temp2, so we can have more than
.2271	a5 2e		lda $2e				lda 	temp2 						; 255/3 = 85 procedures
.2273	69 80		adc #$80			adc 	#128
.2275	85 2e		sta $2e				sta 	temp2
.2277	90 b2		bcc $222b			bcc 	_FPLoop
.2279	e6 2f		inc $2f				inc 	temp2+1
.227b	4c 2b 22	jmp $222b			jmp 	_FPLoop
.227e					_FPError:
.227e	a2 17		ldx #$17			ldx 	#ErrorID_NoProc
.2280	20 e0 14	jsr $14e0		jsr	errorHandler
.2283					ScanProc:
.2283	98		tya				tya
.2284	48		pha				pha
.2285	a5 35		lda $35				lda 	lowMemory 					; copy the start of the procList, at low memory
.2287	8d 12 0c	sta $0c12			sta 	procList
.228a	a5 36		lda $36				lda 	lowMemory+1
.228c	8d 13 0c	sta $0c13			sta 	procList+1
.228f	20 ff 25	jsr $25ff			jsr 	ResetCodeAddress 			; back to the start.
.2292					_ScanLoop:
.2292	a0 00		ldy #$00			ldy 	#0 							; check reached program end
.2294	b1 28		lda ($28),y			lda 	(codePtr),y
.2296	f0 2a		beq $22c2			beq 	_ScanExit
.2298	a0 03		ldy #$03			ldy 	#3							; get first token
.229a	b1 28		lda ($28),y			lda 	(codePtr),y
.229c	c9 9d		cmp #$9d			cmp 	#TKW_DEFPROC				; skip to next if not DEFPROC
.229e	d0 12		bne $22b2			bne 	_ScanNext
.22a0	a5 29		lda $29				lda 	codePtr+1 					; write high and low address of this line.
.22a2	20 ca 22	jsr $22ca			jsr 	_ScanWrite
.22a5	a5 28		lda $28				lda 	codePtr
.22a7	20 ca 22	jsr $22ca			jsr 	_ScanWrite
.22aa	a0 04		ldy #$04			ldy 	#4 							; start of name part
.22ac	20 d5 22	jsr $22d5			jsr 	CalculateProcedureHash 		; calculate procedure hash
.22af	20 ca 22	jsr $22ca			jsr 	_ScanWrite					; and write that
.22b2					_ScanNext:
.22b2	18		clc				clc
.22b3	a0 00		ldy #$00			ldy 	#0
.22b5	b1 28		lda ($28),y			lda 	(codePtr),y
.22b7	65 28		adc $28				adc 	codePtr
.22b9	85 28		sta $28				sta 	codePtr
.22bb	90 d5		bcc $2292			bcc 	_ScanLoop
.22bd	e6 29		inc $29				inc 	codePtr+1
.22bf	4c 92 22	jmp $2292			jmp 	_ScanLoop
.22c2					_ScanExit:
.22c2	a9 00		lda #$00			lda 	#0 							; write ending zero.
.22c4	20 ca 22	jsr $22ca			jsr 	_ScanWrite
.22c7	68		pla				pla
.22c8	a8		tay				tay
.22c9	60		rts				rts
.22ca					_ScanWrite:
.22ca	a0 00		ldy #$00			ldy 	#0
.22cc	91 35		sta ($35),y			sta 	(lowMemory),y
.22ce	e6 35		inc $35				inc 	lowMemory
.22d0	d0 02		bne $22d4			bne 	_SWNoCarry
.22d2	e6 36		inc $36				inc 	lowMemory+1
.22d4					_SWNoCarry:
.22d4	60		rts				rts
.22d5					CalculateProcedureHash:
.22d5	a9 00		lda #$00			lda 	#0 							; clear hash.
.22d7	85 2a		sta $2a				sta 	temp0
.22d9					_CPHLoop:
.22d9	18		clc				clc 								; add character and rotate and add carry back in
.22da	b1 28		lda ($28),y			lda 	(codePtr),y
.22dc	65 2a		adc $2a				adc 	temp0
.22de	6a		ror a				ror 	a
.22df	69 0d		adc #$0d			adc 	#13 						; primes usually good for this sort of thing.
.22e1	85 2a		sta $2a				sta 	temp0 						; (down with this sort of thing)
.22e3	b1 28		lda ($28),y			lda 	(codePtr),y
.22e5	c8		iny				iny 								; advance incase we go round again.
.22e6	c9 3a		cmp #$3a			cmp 	#$3A
.22e8	90 ef		bcc $22d9			bcc 	_CPHLoop
.22ea	a5 2a		lda $2a				lda 	temp0
.22ec	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/repeat.asm

.22ed					Command_Repeat:
.22ed	a2 04		ldx #$04			ldx 	#4 							; allocate 4 bytes on stack for REPEAT
.22ef	a9 52		lda #$52			lda 	#markerREPEAT 				; repeat marker allocate 4 bytes
.22f1	20 05 32	jsr $3205			jsr 	RSClaim
.22f4	a9 01		lda #$01			lda 	#1 							; save position at offset 1.
.22f6	20 31 32	jsr $3231			jsr 	RSSavePosition
.22f9	60		rts				rts
.22fa					Command_Until:
.22fa	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.22fc	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.22fe	c9 52		cmp #$52			cmp 	#markerREPEAT 						; does it match
.2300	f0 05		beq $2307			beq 	_isok
.2302	a2 0f		ldx #$0f			ldx 	#ErrorID_untilErr
.2304	20 e0 14	jsr $14e0		jsr	errorHandler
.2307					_isok:
.2307	20 d6 2a	jsr $2ad6			jsr 	EvaluateRootInteger 		; at the bottom.
.230a	20 91 31	jsr $3191			jsr 	MInt32Zero					; check if TOS zero
.230d	d0 06		bne $2315			bne 	_CUExit
.230f	a9 01		lda #$01			lda 	#1
.2311	20 44 32	jsr $3244			jsr 	RSLoadPosition 				; reload the position from offset 1.
.2314	60		rts				rts
.2315					_CUExit:
.2315	a9 04		lda #$04			lda 	#4 							; throw 4 bytes from stack.
.2317	20 27 32	jsr $3227			jsr 	RSFree
.231a	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/scanner.asm

.231b					ScanForward:
.231b	85 2c		sta $2c				sta 	temp1 						; save tokens to search in temp1/temp1+1
.231d	86 2d		stx $2d				stx 	temp1+1
.231f	a9 00		lda #$00			lda 	#0 							; temp2 counts structure levels.
.2321	85 2e		sta $2e				sta 	temp2
.2323	b1 28		lda ($28),y	_SFLoop:lda 	(codePtr),y 				; look at the next token.
.2325	c8		iny				iny
.2326	a6 2e		ldx $2e				ldx 	temp2 						; check structure levels are zero.
.2328	d0 08		bne $2332			bne 	_SFNoCheck 					; if so, check token against entered values.
.232a	c5 2c		cmp $2c				cmp 	temp1 						; if either matches, we've reached the token
.232c	f0 24		beq $2352			beq 	_SFExit 					; at the same strcture depth.
.232e	c5 2d		cmp $2d				cmp 	temp1+1
.2330	f0 20		beq $2352			beq 	_SFExit
.2332					_SFNoCheck:
.2332	c9 80		cmp #$80			cmp 	#$80 						; if it is 00-7F (variable/number) just skip it.
.2334	90 ed		bcc $2323			bcc 	_SFLoop
.2336	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; $80-$85 is various specials.
.2338	90 19		bcc $2353			bcc 	_SFSpecials
.233a	c9 99		cmp #$99			cmp 	#TOK_STRUCTST 				; if < structure start then continue
.233c	90 e5		bcc $2323			bcc 	_SFLoop
.233e	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST 				; if >= unary start (after structure) then continue.
.2340	b0 e1		bcs $2323			bcs 	_SFLoop
.2342	aa		tax				tax  								; token in X, and look up the adjuster.
.2343	bd f4 29	lda $29f4,x			lda 	ELBinaryOperatorInfo-TOK_BINARYST,x
.2346	38		sec				sec 								; convert to an offset ($FF,$01)
.2347	e9 81		sbc #$81			sbc 	#$81
.2349	18		clc				clc 								; add to depth
.234a	65 2e		adc $2e				adc 	temp2
.234c	85 2e		sta $2e				sta 	temp2
.234e	10 d3		bpl $2323			bpl 	_SFLoop 					; +ve okay to continue
.2350	30 07		bmi $2359			bmi 	SFError 					; if gone -ve then we have a nesting error
.2352	60		rts		_SFExit:rts
.2353					_SFSpecials:
.2353	20 5e 23	jsr $235e			jsr 	ScannerSkipSpecial
.2356	4c 23 23	jmp $2323			jmp 	_SFLoop
.2359					SFError:
.2359	a2 14		ldx #$14			ldx 	#ErrorID_Struct
.235b	20 e0 14	jsr $14e0		jsr	errorHandler
.235e					ScannerSkipSpecial:
.235e	c9 80		cmp #$80			cmp 	#TOK_EOL 					; $80, advance to next line.
.2360	f0 10		beq $2372			beq 	_SFNextLine
.2362	c9 84		cmp #$84			cmp 	#TOK_FPC					; $84, skip embedded float
.2364	f0 2b		beq $2391			beq 	_SFFloatSkip
.2366	c9 85		cmp #$85			cmp 	#TOK_STR 					; $85, skip string
.2368	f0 02		beq $236c			beq 	_SFSkipString
.236a	c8		iny				iny									; $81,$82,$83 shift, so just advance over the shifted
.236b	60		rts				rts 								; token.
.236c					_SFSkipString:
.236c	98		tya				tya
.236d	38		sec				sec
.236e	71 28		adc ($28),y			adc 	(codePtr),y
.2370	a8		tay				tay
.2371	60		rts				rts
.2372					_SFNextLine:
.2372	a0 00		ldy #$00			ldy 	#0 							; get offset
.2374	b1 28		lda ($28),y			lda 	(codePtr),y
.2376	18		clc				clc 								; add to code pointer.
.2377	65 28		adc $28				adc 	codePtr
.2379	85 28		sta $28				sta 	codePtr
.237b	90 02		bcc $237f			bcc		_SFNLNoCarry
.237d	e6 29		inc $29				inc 	codePtr+1
.237f					_SFNLNoCarry:
.237f	b1 28		lda ($28),y			lda 	(codePtr),y 				; reached the end of the program.
.2381	d0 0b		bne $238e			bne		_SFXNL 						; no go round again
.2383	a5 2c		lda $2c				lda 	temp1
.2385	c9 dc		cmp #$dc			cmp 	#TKW_DATA 					; if searching for Data different error.
.2387	d0 d0		bne $2359			bne 	SFError 					; read uses this to search for data statements
.2389	a2 1d		ldx #$1d			ldx 	#ErrorID_DataError
.238b	20 e0 14	jsr $14e0		jsr	errorHandler
.238e	a0 03		ldy #$03	_SFXNL:	ldy 	#3
.2390	60		rts				rts
.2391					_SFFloatSkip:
.2391	98		tya				tya 								; skip over an embedded float.
.2392	18		clc				clc
.2393	69 05		adc #$05			adc 	#FloatEmbeddedSize
.2395	a8		tay				tay
.2396	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/while.asm

.2397					Command_While:
.2397	a9 57		lda #$57			lda 	#markerWhile 				; gosub marker allocate 4 bytes.
.2399	a2 04		ldx #$04			ldx 	#4
.239b	20 05 32	jsr $3205			jsr 	RSClaim 					; create on stack.
.239e	88		dey				dey
.239f	a9 01		lda #$01			lda 	#1
.23a1	20 31 32	jsr $3231			jsr 	RSSavePosition 				; save position before the WHILE keyword.
.23a4	c8		iny				iny
.23a5	20 d8 2a	jsr $2ad8			jsr 	EvaluateInteger				; get the conditional
.23a8	20 91 31	jsr $3191			jsr 	MInt32Zero 	 				; if zero, skip forward to the fail code.
.23ab	f0 01		beq $23ae			beq 	_CWFail
.23ad	60		rts				rts
.23ae					_CWFail:
.23ae	a9 04		lda #$04			lda 	#4
.23b0	20 27 32	jsr $3227			jsr 	RSFree 						; close the just opened position.
.23b3	a9 9f		lda #$9f			lda 	#TKW_WEND 					; scan forward past WEND.
.23b5	aa		tax				tax
.23b6	20 1b 23	jsr $231b			jsr 	ScanForward
.23b9	60		rts				rts
.23ba					Command_Wend:
.23ba	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.23bc	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.23be	c9 57		cmp #$57			cmp 	#markerWHILE 						; does it match
.23c0	f0 05		beq $23c7			beq 	_isok
.23c2	a2 11		ldx #$11			ldx 	#ErrorID_wendErr
.23c4	20 e0 14	jsr $14e0		jsr	errorHandler
.23c7					_isok:
.23c7	a9 01		lda #$01			lda 	#1
.23c9	20 44 32	jsr $3244			jsr 	RSLoadPosition				; go back until true
.23cc	a9 04		lda #$04			lda 	#4
.23ce	20 27 32	jsr $3227			jsr 	RSFree 						; close the loop
.23d1	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/system/clear.asm

.23d2					CommandClear:
.23d2					XCommandClear:
.23d2	98		tya				tya
.23d3	48		pha				pha
.23d4	ad cc 0a	lda $0acc			lda 	endMemory					; set high memory = end of memory
.23d7	85 33		sta $33				sta 	highMemory
.23d9	ad cd 0a	lda $0acd			lda 	endMemory+1
.23dc	85 34		sta $34				sta 	highMemory+1
.23de	ad c8 0a	lda $0ac8			lda 	basePage 					; work out where the program ends.
.23e1	85 2a		sta $2a				sta 	temp0
.23e3	ad c9 0a	lda $0ac9			lda 	basePage+1
.23e6	85 2b		sta $2b				sta 	temp0+1
.23e8					_CCFindEnd:
.23e8	a0 00		ldy #$00			ldy 	#0
.23ea	b1 2a		lda ($2a),y			lda 	(temp0),y
.23ec	f0 0c		beq $23fa			beq 	_CCFoundEnd 				; offset zero is end.
.23ee	18		clc				clc
.23ef	65 2a		adc $2a				adc 	temp0 						; move to next line
.23f1	85 2a		sta $2a				sta 	temp0
.23f3	90 f3		bcc $23e8			bcc 	_CCFindEnd
.23f5	e6 2b		inc $2b				inc 	temp0+1
.23f7	4c e8 23	jmp $23e8			jmp 	_CCFindEnd
.23fa					_CCFoundEnd:
.23fa	a5 2a		lda $2a				lda 	temp0 						; put temp0 in lowMemory
.23fc	85 35		sta $35				sta 	lowMemory
.23fe	a5 2b		lda $2b				lda 	temp0+1
.2400	85 36		sta $36				sta 	lowMemory+1
.2402	18		clc				clc 								; put temp0+1 in endProgram
.2403	a5 2a		lda $2a				lda 	temp0
.2405	69 01		adc #$01			adc 	#1
.2407	8d ca 0a	sta $0aca			sta 	endProgram
.240a	a5 2b		lda $2b				lda 	temp0+1
.240c	69 00		adc #$00			adc 	#0
.240e	8d cb 0a	sta $0acb			sta 	endProgram+1
.2411	18		clc				clc 								; put a bit of space in.
.2412	a5 35		lda $35				lda 	lowMemory
.2414	69 04		adc #$04			adc 	#4
.2416	85 35		sta $35				sta 	lowMemory
.2418	90 02		bcc $241c			bcc 	_CCNoCarry
.241a	e6 36		inc $36				inc 	lowMemory+1
.241c					_CCNoCarry:
.241c	20 f7 31	jsr $31f7			jsr 	RSReset 					; reset the return stack.
.241f	a2 04		ldx #$04		ldx	#4
.2421	20 df 40	jsr $40df		jsr	variableHandler
.2424	20 83 22	jsr $2283			jsr 	ScanProc 					; scan for procedures
.2427	20 08 1c	jsr $1c08			jsr 	CommandRestore 				; do a restore
.242a	68		pla				pla
.242b	a8		tay				tay
.242c	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/system/list.asm

.0c15					structIndent:
>0c15							.fill 	1
.242d					CommandList:
.242d	a2 00		ldx #$00			ldx		#0 							; set start/end lines in stack 0/1 to 0 and $FFFF
.242f	8e 15 0c	stx $0c15			stx 	structIndent
.2432	20 6a 31	jsr $316a			jsr 	MInt32False
.2435	e8		inx				inx
.2436	20 66 31	jsr $3166			jsr 	MInt32True
.2439	b1 28		lda ($28),y			lda 	(codePtr),y 				; look at first token
.243b	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; list ,xxxx
.243d	f0 15		beq $2454			beq 	_CLEndLine
.243f	c9 00		cmp #$00			cmp 	#0 							; list ... on its own.
.2441	30 1b		bmi $245e			bmi 	_CLDoListing 				; do the whole lot.
.2443	a2 00		ldx #$00			ldx 	#0 							; get start line at stack:0
.2445	20 d8 2a	jsr $2ad8			jsr 	EvaluateInteger
.2448	b1 28		lda ($28),y			lda 	(codePtr),y 				; , follows ?
.244a	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.244c	f0 06		beq $2454			beq 	_CLEndLine
.244e	20 a8 30	jsr $30a8			jsr 	MInt32CopyUp 				; copy first to second if just a line number on its
.2451	4c 5e 24	jmp $245e			jmp 	_CLDoListing 				; own e.g. list 1100
.2454					_CLEndLine:
.2454	c8		iny				iny 								; skip comma
.2455	b1 28		lda ($28),y			lda 	(codePtr),y  				; no number follows, then its list 1000,
.2457	30 05		bmi $245e			bmi 	_CLDoListing
.2459	a2 01		ldx #$01			ldx 	#1 							; get the last line to list
.245b	20 d8 2a	jsr $2ad8			jsr 	EvaluateInteger				; get end
.245e					_CLDoListing:
.245e	20 ff 25	jsr $25ff			jsr 	ResetCodeAddress 			; back to the start.
.2461					_CLCheckLoop:
.2461	a2 00		ldx #$00		ldx	#0
.2463	20 bf 14	jsr $14bf		jsr	deviceHandler
.2466	a0 00		ldy #$00			ldy 	#0							; check end.
.2468	b1 28		lda ($28),y			lda 	(codePtr),y
.246a	f0 41		beq $24ad			beq 	_CLEnd
.246c	a2 00		ldx #$00			ldx 	#0 							; compare vs lower.
.246e	20 b0 24	jsr $24b0			jsr 	CLCompareLineTOS
.2471	c9 ff		cmp #$ff			cmp 	#255 						; if < skip
.2473	f0 28		beq $249d			beq 	_CLNext
.2475	e8		inx				inx
.2476	20 b0 24	jsr $24b0			jsr 	CLCompareLineTOS 			; compare vs higher
.2479	c9 01		cmp #$01			cmp 	#1
.247b	f0 20		beq $249d			beq 	_CLNext
.247d	a9 80		lda #$80			lda 	#$80 						; undo any down indents this line.
.247f	20 d2 24	jsr $24d2			jsr 	CLStructureCheck
.2482	ad 15 0c	lda $0c15			lda 	structIndent 				; indent level.
.2485	10 02		bpl $2489			bpl 	_CLPositive
.2487	a9 00		lda #$00			lda 	#0
.2489					_CLPositive:
.2489	a2 02		ldx #$02		ldx	#2
.248b	20 11 3d	jsr $3d11		jsr	tokeniserHandler
.248e	a9 82		lda #$82			lda 	#$82 						; up indents from this point on.
.2490	20 d2 24	jsr $24d2			jsr 	CLStructureCheck
.2493	ad 15 0c	lda $0c15			lda 	structIndent
.2496	10 05		bpl $249d			bpl 	_CLNext
.2498	a9 00		lda #$00			lda 	#0
.249a	8d 15 0c	sta $0c15			sta 	structIndent
.249d					_CLNext:
.249d	a0 00		ldy #$00			ldy 	#0 							; go to next line.
.249f	b1 28		lda ($28),y			lda 	(codePtr),y
.24a1	18		clc				clc
.24a2	65 28		adc $28				adc 	codePtr
.24a4	85 28		sta $28				sta 	codePtr
.24a6	90 b9		bcc $2461			bcc 	_CLCheckLoop
.24a8	e6 29		inc $29				inc 	codePtr+1
.24aa	4c 61 24	jmp $2461			jmp 	_CLCheckLoop
.24ad					_CLEnd:
.24ad	4c 53 32	jmp $3253			jmp 	WarmStart 					; warm start after list.
.24b0					CLCompareLineTOS:
.24b0	a0 01		ldy #$01			ldy 	#1
.24b2	b1 28		lda ($28),y			lda 	(codePtr),y
.24b4	55 50		eor $50,x			eor 	esInt0,x
.24b6	85 2a		sta $2a				sta 	temp0
.24b8	c8		iny				iny
.24b9	b1 28		lda ($28),y			lda 	(codePtr),y
.24bb	55 58		eor $58,x			eor 	esInt1,x
.24bd	05 2a		ora $2a				ora 	temp0
.24bf	f0 10		beq $24d1			beq 	_CLCLTExit
.24c1	88		dey				dey
.24c2	b1 28		lda ($28),y			lda 	(codePtr),y
.24c4	d5 50		cmp $50,x			cmp 	esInt0,x
.24c6	c8		iny				iny
.24c7	b1 28		lda ($28),y			lda 	(codePtr),y
.24c9	f5 58		sbc $58,x			sbc 	esInt1,x
.24cb	a9 ff		lda #$ff			lda 	#255
.24cd	90 02		bcc $24d1			bcc 	_CLCLTExit
.24cf	a9 01		lda #$01			lda 	#1
.24d1					_CLCLTExit:
.24d1	60		rts				rts
.24d2					CLStructureCheck:
.24d2	85 2a		sta $2a				sta 	temp0
.24d4	a0 03		ldy #$03			ldy 	#3
.24d6					_CLSCLoop:
.24d6	b1 28		lda ($28),y			lda 	(codePtr),y 				; get and consume token.
.24d8	c8		iny				iny
.24d9	c9 80		cmp #$80			cmp 	#$80
.24db	90 f9		bcc $24d6			bcc 	_CLSCLoop 					; $00-$7F just step over.
.24dd	f0 28		beq $2507			beq		_CLSCExit					; EOL return
.24df	c9 86		cmp #$86			cmp 	#$86 						; special handler
.24e1	90 1e		bcc $2501			bcc 	_CLSCSpecial
.24e3	c9 99		cmp #$99			cmp 	#TOK_STRUCTST 				; check if structure changer.
.24e5	90 ef		bcc $24d6			bcc 	_CLSCLoop
.24e7	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST
.24e9	b0 eb		bcs $24d6			bcs 	_CLSCLoop
.24eb	aa		tax				tax 								; get adjustment
.24ec	bd f4 29	lda $29f4,x			lda 	ELBinaryOperatorInfo-TOK_BINARYST,x
.24ef	c5 2a		cmp $2a				cmp 	temp0	 					; if what we're searching for
.24f1	d0 e3		bne $24d6			bne 	_CLSCLoop
.24f3	38		sec				sec
.24f4	e9 81		sbc #$81			sbc 	#$81 						; convert to offset
.24f6	0a		asl a				asl 	a 							; double indent step
.24f7	18		clc				clc
.24f8	6d 15 0c	adc $0c15			adc 	structIndent 				; add to structure indent
.24fb	8d 15 0c	sta $0c15			sta 	structIndent
.24fe	4c d6 24	jmp $24d6			jmp 	_CLSCLoop
.2501					_CLSCSpecial:
.2501	20 5e 23	jsr $235e			jsr 	ScannerSkipSpecial
.2504	4c d6 24	jmp $24d6			jmp 	_CLSCLoop
.2507					_CLSCExit:
.2507	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/system/loadsave.asm

.2508					CommandLoad:
.2508	20 30 25	jsr $2530			jsr 	CLSParameters 					; get parameters for load.
.250b	08		php				php
.250c	a2 0e		ldx #$0e		ldx	#14
.250e	20 bf 14	jsr $14bf		jsr	deviceHandler
.2511	28		plp				plp
.2512	b0 08		bcs $251c			bcs 	_CLExit 						; if CC then load a program, so warm start.
.2514	20 d2 23	jsr $23d2			jsr 	CommandClear
.2517	a2 02		ldx #$02		ldx	#2
.2519	20 cd 1b	jsr $1bcd		jsr	interactionHandler
.251c					_CLExit
.251c	60		rts				rts
.251d					CommandSave:
.251d	20 30 25	jsr $2530			jsr 	CLSParameters					; get parameters for save
.2520	90 08		bcc $252a			bcc 	_CSNoOverrideAddress
.2522	20 ea 31	jsr $31ea			jsr 	CheckComma 						; should be a comma.
.2525	a2 02		ldx #$02			ldx 	#2
.2527	20 d8 2a	jsr $2ad8			jsr 	EvaluateInteger 				; get save end address.
.252a					_CSNoOverrideAddress:
.252a	a2 18		ldx #$18		ldx	#24
.252c	20 bf 14	jsr $14bf		jsr	deviceHandler
.252f	60		rts				rts
.2530					CLSParameters:
.2530	a2 00		ldx #$00			ldx 	#0 								; string
.2532	20 cd 2a	jsr $2acd			jsr 	EvaluateString
.2535	e8		inx				inx 									; erase out +1 +2
.2536	20 6a 31	jsr $316a			jsr 	MInt32False
.2539	e8		inx				inx
.253a	20 6a 31	jsr $316a			jsr 	MInt32False
.253d	ad c8 0a	lda $0ac8			lda 	basePage 						; default start address.
.2540	85 51		sta $51				sta 	esInt0+1
.2542	ad c9 0a	lda $0ac9			lda 	basePage+1
.2545	85 59		sta $59				sta 	esInt1+1
.2547	ad ca 0a	lda $0aca			lda 	endProgram 						; default end address
.254a	85 52		sta $52				sta 	esInt0+2
.254c	ad cb 0a	lda $0acb			lda 	endProgram+1
.254f	85 5a		sta $5a				sta 	esInt1+2
.2551	b1 28		lda ($28),y			lda 	(codePtr),y 					; , following
.2553	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.2555	d0 08		bne $255f			bne 	_CLSDefault
.2557	c8		iny				iny 									; skip comma
.2558	a2 01		ldx #$01			ldx 	#1 								; get numeric value.
.255a	20 d8 2a	jsr $2ad8			jsr 	EvaluateInteger
.255d	38		sec				sec
.255e	60		rts				rts
.255f					_CLSDefault:
.255f	18		clc				clc
.2560	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/system/new.asm

.2561					Command_New:
.2561					Command_XNew:
.2561	20 ff 25	jsr $25ff			jsr 	ResetCodeAddress 			; point to first line
.2564	a0 00		ldy #$00			ldy 	#0 							; and zap it.
.2566	98		tya				tya
.2567	91 28		sta ($28),y			sta 	(codePtr),y
.2569	20 d2 23	jsr $23d2			jsr 	CommandClear 				; clear everything down.
.256c	4c 28 1f	jmp $1f28			jmp 	CommandEND 					; do END code, as there's nothing to run.

;******  Return to file: main/main.asm


;******  Processing file: main/commands/system/run.asm

.0c16					breakCounter:
>0c16								.fill 	1
.0c17					breakIncrement:
>0c17								.fill 	1
.256f					Command_Run:
.256f					XCommand_Run:
.256f	a2 ff		ldx #$ff			ldx 	#$FF 						; reset the stack.
.2571	9a		txs				txs
.2572	20 f9 25	jsr $25f9			jsr 	BreakOn 					; turn break on
.2575	20 d2 23	jsr $23d2			jsr 	CommandClear 				; clear everything.
.2578	20 ff 25	jsr $25ff			jsr 	ResetCodeAddress 			; back to the start.
.257b					Command_RunFrom:
.257b	a0 03		ldy #$03			ldy 	#3 							; over offset/line #
.257d					CRNextInstruction:
.257d	64 3a		stz $3a				stz 	softMemAlloc+1
.257f	ad 16 0c	lda $0c16			lda 	breakCounter 				; check for break.
.2582	6d 17 0c	adc $0c17			adc 	breakIncrement
.2585	8d 16 0c	sta $0c16			sta 	breakCounter
.2588	90 05		bcc $258f			bcc 	_CRNoChecks
.258a	a2 00		ldx #$00		ldx	#0
.258c	20 bf 14	jsr $14bf		jsr	deviceHandler
.258f					_CRNoChecks
.258f	b1 28		lda ($28),y			lda 	(codePtr),y 				; get next token.
.2591	10 1c		bpl $25af			bpl 	_CRNotToken
.2593	c9 c9		cmp #$c9			cmp 	#TOK_TOKENS 				; if in the tokens then do that token.
.2595	b0 0c		bcs $25a3			bcs 	_CRExecute
.2597	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST 				; unary is ignored.
.2599	b0 71		bcs $260c			bcs 	Unimplemented
.259b	c9 99		cmp #$99			cmp 	#TOK_STRUCTST 				; execute structures.
.259d	b0 04		bcs $25a3			bcs 	_CRExecute
.259f	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; if one of the system tokens $80-$85 do that
.25a1	b0 16		bcs $25b9			bcs 	_CRCheckIndirect 			; if in that unused range check for ! or ? or AND
.25a3					_CRExecute:
.25a3	c8		iny				iny 								; consume it.
.25a4	0a		asl a				asl 	a 							; double it, losing most significant bit.
.25a5	aa		tax				tax
.25a6	20 ac 25	jsr $25ac			jsr 	_CRRunRoutine 				; we want to do jsr (group0vectors,x)
.25a9	4c 7d 25	jmp $257d			jmp 	CRNextInstruction
.25ac					_CRRunRoutine:
.25ac	7c 16 26	jmp ($2616,x)			jmp 	(Group0Vectors,x)
.25af					_CRNotToken:
.25af	c9 40		cmp #$40			cmp 	#$40 						; if 0-3F then it is a letter
.25b1	b0 59		bcs $260c			bcs 	Unimplemented
.25b3					_CRDefaultLet:
.25b3	20 5b 1e	jsr $1e5b			jsr 	CommandLet 					; do the default, LET
.25b6	4c 7d 25	jmp $257d			jmp 	CRNextInstruction
.25b9					_CRCheckIndirect:
.25b9	c9 86		cmp #$86			cmp 	#TKW_AND 					; AND (assembler)
.25bb	f0 0a		beq $25c7			beq 	_CRAndCommand
.25bd	c9 97		cmp #$97			cmp 	#TKW_PLING 					; !<term> =
.25bf	f0 f2		beq $25b3			beq 	_CRDefaultLet
.25c1	c9 98		cmp #$98			cmp 	#TKW_QMARK 					; ?<term> =
.25c3	f0 ee		beq $25b3			beq 	_CRDefaultLet
.25c5	d0 45		bne $260c			bne 	Unimplemented
.25c7					_CRAndCommand:
.25c7	c8		iny				iny 								; skip over the AND token
.25c8	a9 92		lda #$92			lda 	#TKW_LPARENANDRPAREN 		; replace it with the pseudo-and
.25ca	20 e4 25	jsr $25e4			jsr 	CommandAssembler 			; do the assembler command
.25cd	4c 7d 25	jmp $257d			jmp 	CRNextInstruction 			; and loop round.
.25d0					CommandShift1:
.25d0	b1 28		lda ($28),y			lda 	(codePtr),y 				; get shifted value
.25d2	10 38		bpl $260c			bpl 	Unimplemented 				; we have an error as this should not happen.
.25d4	c8		iny				iny 								; advance over it.
.25d5	c9 91		cmp #$91			cmp 	#TKA_GROUP1 				; is it an assembler constant ?
.25d7	b0 0b		bcs $25e4			bcs 	CommandAssembler
.25d9	0a		asl a				asl 	a 							; double into X
.25da	aa		tax				tax
.25db	7c da 26	jmp ($26da,x)			jmp 	(Group1Vectors-12,x) 		; and do the code.
.25de					CommandShift2:
.25de	a9 ff		lda #$ff			lda 	#$FF 						; $FF means command not unary function.
.25e0	20 15 18	jsr $1815		jsr	extensionHandler
.25e3	60		rts				rts
.25e4					CommandAssembler:
.25e4	a2 00		ldx #$00		ldx	#0
.25e6	20 84 13	jsr $1384		jsr	assemblerHandler
.25e9	60		rts				rts
.25ea					CommandAssemblerLabel:
.25ea	a2 02		ldx #$02		ldx	#2
.25ec	20 84 13	jsr $1384		jsr	assemblerHandler
.25ef	60		rts				rts
.25f0					CommandColon:
.25f0	60		rts				rts
.25f1					CommandBreak:
.25f1	20 d6 2a	jsr $2ad6			jsr 	EvaluateRootInteger
.25f4	20 91 31	jsr $3191			jsr 	MInt32Zero
.25f7	f0 02		beq $25fb			beq 	BreakOff
.25f9					BreakOn:
.25f9	a2 08		ldx #$08			ldx 	#8
.25fb					BreakOff:
.25fb	8e 17 0c	stx $0c17			stx 	breakIncrement
.25fe	60		rts				rts
.25ff					ResetCodeAddress:
.25ff	ad c8 0a	lda $0ac8			lda 	basePage 					; copy basePage to code Pointer
.2602	85 28		sta $28				sta 	codePtr
.2604	ad c9 0a	lda $0ac9			lda 	basePage+1
.2607	85 29		sta $29				sta 	codePtr+1
.2609	a0 03		ldy #$03			ldy 	#3 							; offset after offset link and line#
.260b	60		rts				rts
.260c					Unimplemented:
.260c	a2 01		ldx #$01			ldx 	#ErrorID_Missing
.260e	20 e0 14	jsr $14e0		jsr	errorHandler
.2611					TKErr01:
.2611					TKErr02:
.2611					TKErr03:
.2611					TKErr04:
.2611					TKErr05:
.2611					TKErr06:
.2611					TKErr07:
.2611					TKErr08:
.2611					TKErr09:
.2611					TKErr10:
.2611					TKErr11:
.2611	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.2613	20 e0 14	jsr $14e0		jsr	errorHandler

;******  Processing file: main/commands/system/../../../generated/tokenvectors0.inc

.2616					Group0Vectors:
>2616	2e 1f					.word	AdvanceNextLine          ; $80 [[eol]]
>2618	d0 25					.word	CommandShift1            ; $81 [[sh1]]
>261a	de 25					.word	CommandShift2            ; $82 [[sh2]]
>261c	11 26					.word	TKErr09                  ; $83 [[sh3]]
>261e	11 26					.word	TKErr10                  ; $84 [[fpc]]
>2620	11 26					.word	TKErr08                  ; $85 [[str]]
>2622	bd 27					.word	AndHandler               ; $86 and
>2624	aa 27					.word	OrHandler                ; $87 or
>2626	97 27					.word	XorHandler               ; $88 xor
>2628	df 28					.word	CompareGreaterEq         ; $89 >=
>262a	e9 28					.word	CompareLessEq            ; $8a <=
>262c	cb 28					.word	CompareGreater           ; $8b >
>262e	c1 28					.word	CompareLess              ; $8c <
>2630	b7 28					.word	CompareEquals            ; $8d =
>2632	d5 28					.word	CompareNotEquals         ; $8e <>
>2634	28 27					.word	AddHandler               ; $8f +
>2636	4b 27					.word	SubHandler               ; $90 -
>2638	e3 27					.word	ShrHandler               ; $91 >>
>263a	d0 27					.word	ShlHandler               ; $92 <<
>263c	5e 27					.word	MulHandler               ; $93 *
>263e	71 27					.word	DivHandler               ; $94 /
>2640	84 27					.word	ModHandler               ; $95 mod
>2642	1c 28					.word	PowerHandler             ; $96 ^
>2644	f6 27					.word	WordRefHandler           ; $97 !
>2646	09 28					.word	ByteRefHandler           ; $98 ?
>2648	ed 22					.word	Command_Repeat           ; $99 repeat
>264a	97 23					.word	Command_While            ; $9a while
>264c	42 1f					.word	Command_FOR              ; $9b for
>264e	51 20					.word	CommandIf                ; $9c if
>2650	11 26					.word	TKErr04                  ; $9d defproc
>2652	fa 22					.word	Command_Until            ; $9e until
>2654	ba 23					.word	Command_Wend             ; $9f wend
>2656	a3 1f					.word	Command_NEXT             ; $a0 next
>2658	11 26					.word	TKErr06                  ; $a1 then
>265a	8c 20					.word	Command_ENDIF            ; $a2 endif
>265c	fc 21					.word	ReturnProc               ; $a3 endproc
>265e	43 2a					.word	UnaryParenthesis         ; $a4 (
>2660	1f 2c					.word	UnaryLen                 ; $a5 len(
>2662	63 2c					.word	UnarySgn                 ; $a6 sgn(
>2664	4c 2c					.word	UnaryAbs                 ; $a7 abs(
>2666	bc 2c					.word	Unary_Random             ; $a8 random(
>2668	06 2d					.word	Unary_Page               ; $a9 page
>266a	66 31					.word	MInt32True               ; $aa true
>266c	6a 31					.word	MInt32False              ; $ab false
>266e	d1 2c					.word	Unary_Min                ; $ac min(
>2670	d5 2c					.word	Unary_Max                ; $ad max(
>2672	de 2d					.word	UnarySys                 ; $ae sys(
>2674	87 2d					.word	UnaryTimer               ; $af timer(
>2676	9c 2b					.word	EventFunction            ; $b0 event(
>2678	b0 2d					.word	UnaryGet                 ; $b1 get(
>267a	a0 2d					.word	UnaryInkey               ; $b2 inkey(
>267c	57 2d					.word	UnaryAlloc               ; $b3 alloc(
>267e	17 2e					.word	ExecChr                  ; $b4 chr$(
>2680	47 2e					.word	ExecLeft                 ; $b5 left$(
>2682	64 2e					.word	ExecMid                  ; $b6 mid$(
>2684	8c 2e					.word	ExecRight                ; $b7 right$(
>2686	1e 2b					.word	Event_Str                ; $b8 str$(
>2688	4d 2b					.word	UnaryVal                 ; $b9 val(
>268a	7a 2c					.word	UnaryPeek                ; $ba peek(
>268c	80 2c					.word	UnaryDeek                ; $bb deek(
>268e	86 2c					.word	UnaryLeek                ; $bc leek(
>2690	3d 2c					.word	UnaryAsc                 ; $bd asc(
>2692	31 2d					.word	UnaryIntToFloat          ; $be int(
>2694	44 2d					.word	UnaryFloatToInt          ; $bf float(
>2696	50 2b					.word	UnaryIsVal               ; $c0 isval(
>2698	2e 2e					.word	ExecUpper                ; $c1 upper$(
>269a	2b 2e					.word	ExecLower                ; $c2 lower$(
>269c	14 2d					.word	UnaryReference           ; $c3 @
>269e	2a 2d					.word	UnaryComplement          ; $c4 ~
>26a0	27 2d					.word	UnaryHexMarker           ; $c5 &
>26a2	c9 2d					.word	UnaryGetString           ; $c6 get$(
>26a4	cf 2d					.word	UnaryInkeyString         ; $c7 inkey$(
>26a6	06 2e					.word	UnaryMem                 ; $c8 mem
>26a8	11 26					.word	TKErr01                  ; $c9 )
>26aa	f0 25					.word	CommandColon             ; $ca :
>26ac	11 26					.word	TKErr02                  ; $cb ,
>26ae	11 26					.word	TKErr03                  ; $cc ;
>26b0	16 1f					.word	Command_Rem2             ; $cd '
>26b2	11 26					.word	TKErr07                  ; $ce to
>26b4	11 26					.word	TKErr05                  ; $cf step
>26b6	8f 21					.word	CallProc                 ; $d0 proc
>26b8	8d 20					.word	CommandLocal             ; $d1 local
>26ba	4d 1e					.word	Command_Dim              ; $d2 dim
>26bc	16 1f					.word	Command_Rem              ; $d3 rem
>26be	5b 1e					.word	CommandLet               ; $d4 let
>26c0	97 1c					.word	Command_Input            ; $d5 input
>26c2	86 20					.word	Command_ELSE             ; $d6 else
>26c4	1e 1e					.word	Command_VDU              ; $d7 vdu
>26c6	4d 1d					.word	Command_Print            ; $d8 print
>26c8	65 1c					.word	CommandGOTO              ; $d9 goto
>26ca	3a 1c					.word	CommandGOSUB             ; $da gosub
>26cc	4d 1c					.word	CommandRETURN            ; $db return
>26ce	ff 1b					.word	CommandData              ; $dc data
>26d0	3f 1e					.word	Command_Assert           ; $dd assert
>26d2	d9 1e					.word	Command_Poke             ; $de poke
>26d4	dd 1e					.word	Command_Doke             ; $df doke
>26d6	e1 1e					.word	Command_Loke             ; $e0 loke
>26d8	ee 1d					.word	Command_Ink              ; $e1 ink
>26da	f9 1d					.word	Command_Paper            ; $e2 paper
>26dc	e8 1d					.word	Command_CLS              ; $e3 cls
>26de	04 1e					.word	Command_Locate           ; $e4 locate
>26e0	f1 25					.word	CommandBreak             ; $e5 break
>26e2	ea 25					.word	CommandAssemblerLabel    ; $e6 .
>26e4	11 26					.word	TKErr11                  ; $e7 #

;******  Return to file: main/commands/system/run.asm


;******  Processing file: main/commands/system/../../../generated/tokenvectors1.inc

.26e6					Group1Vectors:
>26e6	d2 23					.word	CommandClear             ; $86 clear
>26e8	08 25					.word	CommandLoad              ; $87 load
>26ea	1d 25					.word	CommandSave              ; $88 save
>26ec	2d 24					.word	CommandList              ; $89 list
>26ee	61 25					.word	Command_New              ; $8a new
>26f0	6f 25					.word	Command_Run              ; $8b run
>26f2	d4 1b					.word	CommandRead              ; $8c read
>26f4	08 1c					.word	CommandRestore           ; $8d restore
>26f6	28 1f					.word	CommandEnd               ; $8e end
>26f8	23 1f					.word	CommandStop              ; $8f stop
>26fa	2b 1f					.word	CommandXemu              ; $90 xemu

;******  Return to file: main/commands/system/run.asm


;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/binary/binary.asm

.26fc					BinaryProcess:
.26fc	b5 48		lda $48,x			lda 	esType,x 					; or type bytes together and check bit 6.
.26fe	15 49		ora $49,x			ora 	esType+1,x 					; (the float bit)
.2700	0a		asl a				asl 	a
.2701	30 0e		bmi $2711			bmi 	_BPStringType 				; if bit 6 is set, then string type, error
.2703	18		clc				clc 								; return CC for integer
.2704	29 02		and #$02			and 	#$02 						; $02 because of ASL A. check original bit 1.
.2706	f0 08		beq $2710			beq 	_BPExit 					; if both integer then return with CC.
.2708	20 16 27	jsr $2716			jsr 	BPMakeBothFloat 			; make both float
.270b	a9 01		lda #$01			lda 	#$01 						; set result type to float
.270d	95 48		sta $48,x			sta 	esType,x
.270f	38		sec				sec 								; and return with carry set.
.2710					_BPExit:
.2710	60		rts				rts
.2711					_BPStringType:
.2711	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.2713	20 e0 14	jsr $14e0		jsr	errorHandler
.2716					BPMakeBothFloat:
.2716	e8		inx				inx
.2717	20 1b 27	jsr $271b			jsr 	BPMakeFloat 				; one is a float, so we do both as floats.
.271a	ca		dex				dex
.271b					BPMakeFloat:
.271b	b5 48		lda $48,x			lda 	esType,x 					; get type bit which is in bit 0
.271d	4a		lsr a				lsr 	a
.271e	b0 07		bcs $2727			bcs 	_BPIsFloat 					; already a float if set.
.2720	8a		txa				txa
.2721	a2 1a		ldx #$1a		ldx	#26
.2723	20 e8 19	jsr $19e8		jsr	floatingpointHandler
.2726	aa		tax				tax
.2727					_BPIsFloat:
.2727	60		rts				rts
.2728					AddHandler:
.2728	20 f9 28	jsr $28f9			jsr 	DereferenceTwo 				; dereference top two on stack.
.272b	b5 48		lda $48,x			lda 	esType,x 					; check two strings.
.272d	35 49		and $49,x			and 	esType+1,x
.272f	29 40		and #$40			and 	#$40 						; if both have bit 6 set ... we have two strings
.2731	d0 10		bne $2743			bne 	_AHStringConcat				; concatenate strings.
.2733	20 fc 26	jsr $26fc			jsr 	BinaryProcess 				; check to see if either is float
.2736	b0 03		bcs $273b			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.2738	4c 4e 30	jmp $304e			jmp 	MInt32Add 							; else do it as integer.
.273b					_IsFPOperation:
.273b	8a		txa				txa 								; call the relevant fp routine
.273c	a2 02		ldx #$02		ldx	#2
.273e	20 e8 19	jsr $19e8		jsr	floatingpointHandler
.2741	aa		tax				tax
.2742	60		rts				rts
.2743					_AHStringConcat:
.2743	8a		txa				txa 								; handled by the string module.
.2744	a2 04		ldx #$04		ldx	#4
.2746	20 0e 35	jsr $350e		jsr	stringHandler
.2749	aa		tax				tax
.274a	60		rts				rts
.274b					SubHandler:
.274b	20 f9 28	jsr $28f9			jsr 	DereferenceTwo
.274e	20 fc 26	jsr $26fc			jsr 	BinaryProcess 				; check to see if either is float
.2751	b0 03		bcs $2756			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.2753	4c 68 30	jmp $3068			jmp 	MInt32Sub 							; else do it as integer.
.2756					_IsFPOperation:
.2756	8a		txa				txa 								; call the relevant fp routine
.2757	a2 10		ldx #$10		ldx	#16
.2759	20 e8 19	jsr $19e8		jsr	floatingpointHandler
.275c	aa		tax				tax
.275d	60		rts				rts
.275e					MulHandler:
.275e	20 f9 28	jsr $28f9			jsr 	DereferenceTwo
.2761	20 fc 26	jsr $26fc			jsr 	BinaryProcess 				; check to see if either is float
.2764	b0 03		bcs $2769			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.2766	4c 82 30	jmp $3082			jmp 	MInt32Multiply 							; else do it as integer.
.2769					_IsFPOperation:
.2769	8a		txa				txa 								; call the relevant fp routine
.276a	a2 0a		ldx #$0a		ldx	#10
.276c	20 e8 19	jsr $19e8		jsr	floatingpointHandler
.276f	aa		tax				tax
.2770	60		rts				rts
.2771					DivHandler:
.2771	20 f9 28	jsr $28f9			jsr 	DereferenceTwo
.2774	20 fc 26	jsr $26fc			jsr 	BinaryProcess 				; check to see if either is float
.2777	b0 03		bcs $277c			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.2779	4c 3f 2f	jmp $2f3f			jmp 	MInt32SDivide 							; else do it as integer.
.277c					_IsFPOperation:
.277c	8a		txa				txa 								; call the relevant fp routine
.277d	a2 06		ldx #$06		ldx	#6
.277f	20 e8 19	jsr $19e8		jsr	floatingpointHandler
.2782	aa		tax				tax
.2783	60		rts				rts
.2784					ModHandler:
.2784	20 f9 28	jsr $28f9			jsr 	DereferenceTwo
.2787	20 fc 26	jsr $26fc			jsr 	BinaryProcess 				; check to see if either is float
.278a	b0 03		bcs $278f			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.278c	4c bd 2f	jmp $2fbd			jmp 	MInt32Modulus 							; else do it as integer.
.278f					_IsFPOperation:
.278f	8a		txa				txa 								; call the relevant fp routine
.2790	a2 08		ldx #$08		ldx	#8
.2792	20 e8 19	jsr $19e8		jsr	floatingpointHandler
.2795	aa		tax				tax
.2796	60		rts				rts
.2797					XorHandler:
.2797	20 f9 28	jsr $28f9			jsr 	DereferenceTwo
.279a	20 fc 26	jsr $26fc			jsr 	BinaryProcess 				; check to see if either is float
.279d	b0 03		bcs $27a2			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.279f	4c f1 2e	jmp $2ef1			jmp 	MInt32Xor 							; else do it as integer.
.27a2					_IsFPOperation:
.27a2	8a		txa				txa 								; call the relevant fp routine
.27a3	a2 08		ldx #$08		ldx	#8
.27a5	20 e8 19	jsr $19e8		jsr	floatingpointHandler
.27a8	aa		tax				tax
.27a9	60		rts				rts
.27aa					OrHandler:
.27aa	20 f9 28	jsr $28f9			jsr 	DereferenceTwo
.27ad	20 fc 26	jsr $26fc			jsr 	BinaryProcess 				; check to see if either is float
.27b0	b0 03		bcs $27b5			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.27b2	4c d8 2e	jmp $2ed8			jmp 	MInt32Or 							; else do it as integer.
.27b5					_IsFPOperation:
.27b5	8a		txa				txa 								; call the relevant fp routine
.27b6	a2 08		ldx #$08		ldx	#8
.27b8	20 e8 19	jsr $19e8		jsr	floatingpointHandler
.27bb	aa		tax				tax
.27bc	60		rts				rts
.27bd					AndHandler:
.27bd	20 f9 28	jsr $28f9			jsr 	DereferenceTwo
.27c0	20 fc 26	jsr $26fc			jsr 	BinaryProcess 				; check to see if either is float
.27c3	b0 03		bcs $27c8			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.27c5	4c bf 2e	jmp $2ebf			jmp 	MInt32And 							; else do it as integer.
.27c8					_IsFPOperation:
.27c8	8a		txa				txa 								; call the relevant fp routine
.27c9	a2 08		ldx #$08		ldx	#8
.27cb	20 e8 19	jsr $19e8		jsr	floatingpointHandler
.27ce	aa		tax				tax
.27cf	60		rts				rts
.27d0					ShlHandler:
.27d0	20 f9 28	jsr $28f9			jsr 	DereferenceTwo
.27d3	20 fc 26	jsr $26fc			jsr 	BinaryProcess 				; check to see if either is float
.27d6	b0 03		bcs $27db			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.27d8	4c 51 28	jmp $2851			jmp 	Mint32ShiftLeftX 							; else do it as integer.
.27db					_IsFPOperation:
.27db	8a		txa				txa 								; call the relevant fp routine
.27dc	a2 08		ldx #$08		ldx	#8
.27de	20 e8 19	jsr $19e8		jsr	floatingpointHandler
.27e1	aa		tax				tax
.27e2	60		rts				rts
.27e3					ShrHandler:
.27e3	20 f9 28	jsr $28f9			jsr 	DereferenceTwo
.27e6	20 fc 26	jsr $26fc			jsr 	BinaryProcess 				; check to see if either is float
.27e9	b0 03		bcs $27ee			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.27eb	4c 54 28	jmp $2854			jmp 	MInt32ShiftRightX 							; else do it as integer.
.27ee					_IsFPOperation:
.27ee	8a		txa				txa 								; call the relevant fp routine
.27ef	a2 08		ldx #$08		ldx	#8
.27f1	20 e8 19	jsr $19e8		jsr	floatingpointHandler
.27f4	aa		tax				tax
.27f5	60		rts				rts
.27f6					WordRefHandler:
.27f6	20 f9 28	jsr $28f9			jsr 	DereferenceTwo
.27f9	20 fc 26	jsr $26fc			jsr 	BinaryProcess 				; check to see if either is float
.27fc	b0 03		bcs $2801			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.27fe	4c 43 28	jmp $2843			jmp 	MInt32WordIndirect 							; else do it as integer.
.2801					_IsFPOperation:
.2801	8a		txa				txa 								; call the relevant fp routine
.2802	a2 08		ldx #$08		ldx	#8
.2804	20 e8 19	jsr $19e8		jsr	floatingpointHandler
.2807	aa		tax				tax
.2808	60		rts				rts
.2809					ByteRefHandler:
.2809	20 f9 28	jsr $28f9			jsr 	DereferenceTwo
.280c	20 fc 26	jsr $26fc			jsr 	BinaryProcess 				; check to see if either is float
.280f	b0 03		bcs $2814			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.2811	4c 47 28	jmp $2847			jmp 	MInt32ByteIndirect 							; else do it as integer.
.2814					_IsFPOperation:
.2814	8a		txa				txa 								; call the relevant fp routine
.2815	a2 08		ldx #$08		ldx	#8
.2817	20 e8 19	jsr $19e8		jsr	floatingpointHandler
.281a	aa		tax				tax
.281b	60		rts				rts
.281c					PowerHandler:
.281c	20 f9 28	jsr $28f9			jsr 	DereferenceTwo
.281f	20 fc 26	jsr $26fc			jsr 	BinaryProcess 				; check to see if either is float
.2822	b0 03		bcs $2827			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.2824	4c 2f 28	jmp $282f			jmp 	PowerInteger 							; else do it as integer.
.2827					_IsFPOperation:
.2827	8a		txa				txa 								; call the relevant fp routine
.2828	a2 16		ldx #$16		ldx	#22
.282a	20 e8 19	jsr $19e8		jsr	floatingpointHandler
.282d	aa		tax				tax
.282e	60		rts				rts
.282f					PowerInteger:
.282f	20 16 27	jsr $2716			jsr 	BPMakeBothFloat				; make them float.
.2832	8a		txa				txa
.2833	a2 16		ldx #$16		ldx	#22
.2835	20 e8 19	jsr $19e8		jsr	floatingpointHandler
.2838	a2 12		ldx #$12		ldx	#18
.283a	20 e8 19	jsr $19e8		jsr	floatingpointHandler
.283d	aa		tax				tax
.283e	a9 00		lda #$00			lda 	#0 							; make type integer
.2840	95 48		sta $48,x			sta 	esType,x
.2842	60		rts				rts
.2843					Mint32WordIndirect:
.2843	a9 80		lda #$80	 		lda 	#$80 				 		; word reference type (bit 7 set)
.2845	d0 02		bne $2849			bne 	Min32Indirect
.2847					Mint32ByteIndirect:
.2847	a9 a0		lda #$a0			lda 	#$A0 						; byte reference type (bit 7, bit 5 set)
.2849					Min32Indirect:
.2849	48		pha				pha 								; save the indirection
.284a	20 4e 30	jsr $304e			jsr 	MInt32Add 					; add a!b a?b
.284d	68		pla				pla 								; and set the type to reference.
.284e	95 48		sta $48,x			sta 	esType,x 	 				; so a!b => a+b and it's a reference....
.2850	60		rts				rts
.2851					Mint32ShiftLeftX:
.2851	18		clc				clc 								; CC shift left
.2852	90 01		bcc $2855			bcc 	Mint32Shift
.2854					Mint32ShiftRightX:
.2854	38		sec				sec 								; CS shift right
.2855					Mint32Shift:
.2855	08		php				php 								; save carry flag on stack.
.2856	b5 59		lda $59,x			lda 	esInt1+1,x 					; if shift >= 32 then it is zero.
.2858	15 61		ora $61,x			ora 	esInt2+1,x
.285a	15 69		ora $69,x			ora 	esInt3+1,x
.285c	d0 1e		bne $287c			bne 	_MShiftZero
.285e	b5 51		lda $51,x			lda 	esInt0+1,x
.2860	c9 20		cmp #$20			cmp 	#32
.2862	b0 18		bcs $287c			bcs 	_MShiftZero
.2864					_MShiftLoop:
.2864	b5 51		lda $51,x			lda 	esInt0+1,x 					; check count is zero
.2866	f0 12		beq $287a			beq 	_MShiftExit
.2868	d6 51		dec $51,x			dec 	esInt0+1,x
.286a	28		plp				plp 								; restore and save carry
.286b	08		php				php
.286c	90 06		bcc $2874			bcc 	_MShiftLeft 				; and shift left/right accordingly.
.286e	20 88 31	jsr $3188			jsr 	Mint32ShiftRight
.2871	4c 64 28	jmp $2864			jmp 	_MShiftLoop
.2874					_MShiftLeft:
.2874	20 7f 31	jsr $317f			jsr 	Mint32ShiftLeft
.2877	4c 64 28	jmp $2864			jmp 	_MShiftLoop
.287a					_MShiftExit:
.287a	28		plp				plp	 								; throw saved carry and exit
.287b	60		rts				rts
.287c					_MShiftZero:
.287c	4c 6a 31	jmp $316a			jmp 	MInt32False 				; return 0 as shifted >= 32 times.

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/binary/compare.asm

.287f					PerformComparison:
.287f	20 f9 28	jsr $28f9			jsr 	DereferenceTwo 				; make both values.
.2882	b5 48		lda $48,x			lda 	esType,x 					; check for two strings.
.2884	35 49		and $49,x			and 	esType+1,x
.2886	0a		asl a				asl 	a 							; bit 7 set if both bit 6s were set.
.2887	30 1d		bmi $28a6			bmi 	_PCIsString
.2889	b5 48		lda $48,x			lda 	esType,x 					; check either is floating point.
.288b	15 49		ora $49,x			ora 	esType+1,x
.288d	0a		asl a				asl 	a 							; shift bit 6 (string) to bit 7, mixed types
.288e	30 22		bmi $28b2			bmi 	_PCError
.2890	29 02		and #$02			and 	#$02 						; because of ASL, check type in bit 0
.2892	f0 0f		beq $28a3			beq 	_PCIsInteger 				; if not two integers, e.g. 1 of the bits is set
.2894	20 16 27	jsr $2716			jsr 	BPMakeBothFloat 			; make both float
.2897	8a		txa				txa
.2898	a2 04		ldx #$04		ldx	#4
.289a	20 e8 19	jsr $19e8		jsr	floatingpointHandler
.289d	86 32		stx $32				stx 	tempShort 					; save result
.289f	aa		tax				tax
.28a0	a5 32		lda $32				lda 	tempShort
.28a2	60		rts				rts
.28a3					_PCIsInteger:
.28a3	4c 0a 2f	jmp $2f0a			jmp 	MInt32Compare
.28a6					_PCIsString:
.28a6	8a		txa				txa 								; A has SP
.28a7	a2 08		ldx #$08		ldx	#8
.28a9	20 0e 35	jsr $350e		jsr	stringHandler
.28ac	86 32		stx $32				stx 	tempShort 					; save result
.28ae	aa		tax				tax 								; put SP back in X and get result.
.28af	a5 32		lda $32				lda 	tempShort
.28b1	60		rts				rts
.28b2					_PCError:
.28b2	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.28b4	20 e0 14	jsr $14e0		jsr	errorHandler
.28b7					CompareEquals:
.28b7	20 7f 28	jsr $287f			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.28ba	c9 00		cmp #$00			cmp 	#$00 						; and we do something if it is = or <> a value.
.28bc	f0 35		beq $28f3			beq  	CompareTrue
.28be	4c f6 28	jmp $28f6			jmp 	CompareFalse
.28c1					CompareLess:
.28c1	20 7f 28	jsr $287f			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.28c4	c9 ff		cmp #$ff			cmp 	#$FF 						; and we do something if it is = or <> a value.
.28c6	f0 2b		beq $28f3			beq  	CompareTrue
.28c8	4c f6 28	jmp $28f6			jmp 	CompareFalse
.28cb					CompareGreater:
.28cb	20 7f 28	jsr $287f			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.28ce	c9 01		cmp #$01			cmp 	#$01 						; and we do something if it is = or <> a value.
.28d0	f0 21		beq $28f3			beq  	CompareTrue
.28d2	4c f6 28	jmp $28f6			jmp 	CompareFalse
.28d5					CompareNotEquals:
.28d5	20 7f 28	jsr $287f			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.28d8	c9 00		cmp #$00			cmp 	#$00 						; and we do something if it is = or <> a value.
.28da	d0 17		bne $28f3			bne  	CompareTrue
.28dc	4c f6 28	jmp $28f6			jmp 	CompareFalse
.28df					CompareGreaterEq:
.28df	20 7f 28	jsr $287f			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.28e2	c9 ff		cmp #$ff			cmp 	#$FF 						; and we do something if it is = or <> a value.
.28e4	d0 0d		bne $28f3			bne  	CompareTrue
.28e6	4c f6 28	jmp $28f6			jmp 	CompareFalse
.28e9					CompareLessEq:
.28e9	20 7f 28	jsr $287f			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.28ec	c9 01		cmp #$01			cmp 	#$01 						; and we do something if it is = or <> a value.
.28ee	d0 03		bne $28f3			bne  	CompareTrue
.28f0	4c f6 28	jmp $28f6			jmp 	CompareFalse
.28f3					CompareTrue:
.28f3	4c 66 31	jmp $3166			jmp 	MInt32True
.28f6					CompareFalse:
.28f6	4c 6a 31	jmp $316a			jmp 	MInt32False

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/dereference.asm

.28f9					DereferenceTwo:
.28f9	e8		inx				inx
.28fa	20 fe 28	jsr $28fe			jsr 	DereferenceOne
.28fd	ca		dex				dex
.28fe					DereferenceOne:
.28fe	b5 48		lda $48,x			lda 	esType,x
.2900	10 3d		bpl $293f			bpl 	_DRNotReference 			; is it a reference ? if not, we don't need to do anything
.2902	4a		lsr a				lsr 	a 							; do float dereference if bit 0 set.
.2903	b0 3b		bcs $2940			bcs 	_DRFloatDeReference
.2905	98		tya				tya
.2906	48		pha				pha
.2907	b5 50		lda $50,x			lda 	esInt0,x 					; copy address to temp0
.2909	85 2a		sta $2a				sta 	temp0
.290b	b5 58		lda $58,x			lda 	esInt1,x
.290d	85 2b		sta $2b				sta 	temp0+1
.290f	a9 00		lda #$00			lda 	#0 							; clear esInt1..3
.2911	95 58		sta $58,x			sta 	esInt1,x
.2913	95 60		sta $60,x			sta 	esInt2,x
.2915	95 68		sta $68,x			sta 	esInt3,x
.2917	b5 48		lda $48,x			lda 	esType,x 					; get the type byte.
.2919	29 60		and #$60			and 	#$60 						; get string flag ($40) and byte flag ($20)
.291b	0a		asl a				asl 	a 							; now string ($80) byte ($40)
.291c	30 0d		bmi $292b			bmi 	_DeRefString 				; string, 2 bytes only
.291e	d0 11		bne $2931			bne 	_DeRefByte 					; byte 1 byte only
.2920					_DeRefLong:
.2920	a0 03		ldy #$03			ldy 	#3
.2922	b1 2a		lda ($2a),y			lda 	(temp0),y
.2924	95 68		sta $68,x			sta 	esInt3,x
.2926	88		dey				dey
.2927	b1 2a		lda ($2a),y			lda 	(temp0),y
.2929	95 60		sta $60,x			sta 	esInt2,x
.292b					_DeRefString:
.292b	a0 01		ldy #$01			ldy 	#1
.292d	b1 2a		lda ($2a),y			lda 	(temp0),y
.292f	95 58		sta $58,x			sta 	esInt1,x
.2931					_DeRefByte:
.2931	a0 00		ldy #$00			ldy 	#0
.2933	b1 2a		lda ($2a),y			lda 	(temp0),y
.2935	95 50		sta $50,x			sta 	esInt0,x
.2937	b5 48		lda $48,x			lda 	esType,x 					; clear byte and deref bits.
.2939	29 40		and #$40			and 	#$40
.293b	95 48		sta $48,x			sta 	esType,x
.293d	68		pla				pla
.293e	a8		tay				tay
.293f					_DRNotReference
.293f	60		rts				rts
.2940					_DRFloatDereference:
.2940	20 d0 1e	jsr $1ed0			jsr 	TOSToTemp0 					; address to deref in temp0
.2943	8a		txa				txa
.2944	a2 1c		ldx #$1c		ldx	#28
.2946	20 e8 19	jsr $19e8		jsr	floatingpointHandler
.2949	aa		tax				tax
.294a	a9 01		lda #$01			lda 	#$01 						; type to FP (float)
.294c	95 48		sta $48,x			sta 	esType,x
.294e	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/evaluate.asm

.294f					EvaluateLevel:
.294f	e0 08		cpx #$08			cpx 	#StackSize 					; check stack overflow
.2951	b0 1e		bcs $2971			bcs 	_ELStack
.2953	48		pha				pha 								; save precedence level.
.2954	a9 00		lda #$00			lda 	#0 							; zero the current stack level.
.2956	95 50		sta $50,x			sta 	esInt0,x
.2958	95 58		sta $58,x			sta 	esInt1,x
.295a	95 60		sta $60,x			sta 	esInt2,x
.295c	95 68		sta $68,x			sta 	esInt3,x
.295e	95 48		sta $48,x			sta 	esType,x 					; zero the type (integer value)
.2960	b1 28		lda ($28),y			lda 	(codePtr),y	 				; look at first token/character
.2962	30 26		bmi $298a			bmi 	_ELIsToken 					; if -ve could be string, float, or unary function.
.2964	0a		asl a				asl 	a 							; if 00-3F then will now be PL and it's a variable.
.2965	30 0f		bmi $2976			bmi 	_ELIsConstant 				; 40-7F will be -ve and that's an integer constant.
.2967	8a		txa				txa 								; stack level in X
.2968	a2 00		ldx #$00		ldx	#0
.296a	20 df 40	jsr $40df		jsr	variableHandler
.296d	aa		tax				tax
.296e	4c b3 29	jmp $29b3			jmp		_ELHasTerm
.2971					_ELStack:
.2971	a2 23		ldx #$23			ldx 	#ErrorID_NumStack
.2973	20 e0 14	jsr $14e0		jsr	errorHandler
.2976					_ELIsConstant:
.2976	4a		lsr a				lsr 	a 							; get the value back
.2977	29 3f		and #$3f			and 	#$3F 						; force into range 0-63
.2979	95 50		sta $50,x			sta 	esInt0,x 					; and put in LSB.
.297b					_ELCheckNext:
.297b	c8		iny				iny 								; look at next
.297c	b1 28		lda ($28),y			lda 	(codePtr),y
.297e	49 40		eor #$40			eor 	#$40 						; shift around so 40-7F => 00-3F
.2980	c9 40		cmp #$40			cmp 	#$40 						; out of range ?
.2982	b0 2f		bcs $29b3			bcs 	_ELHasTerm 					; done getting the constant.
.2984	20 4c 2a	jsr $2a4c			jsr 	ELShiftByteIn 				; shift byte into position.
.2987	4c 7b 29	jmp $297b			jmp 	_ELCheckNext
.298a					_ELIsToken:
.298a	c9 85		cmp #$85			cmp 	#TOK_STR 					; handle strings.
.298c	f0 0f		beq $299d			beq 	_ELIsString
.298e	c9 84		cmp #$84			cmp 	#TOK_FPC 					; if no, then check unary.
.2990	d0 5f		bne $29f1			bne 	_ELCheckUnary
.2992	8a		txa				txa 								; put X into A
.2993	c8		iny				iny 								; skip over the float marker
.2994	a2 18		ldx #$18		ldx	#24
.2996	20 e8 19	jsr $19e8		jsr	floatingpointHandler
.2999	aa		tax				tax 								; restore X
.299a	4c b3 29	jmp $29b3			jmp 	_ELHasTerm
.299d					_ELIsString:
.299d	98		tya				tya 								; address of string is codePtr+y+1
.299e	38		sec				sec
.299f	65 28		adc $28				adc 	codePtr
.29a1	95 50		sta $50,x			sta 	esInt0,x
.29a3	a5 29		lda $29				lda 	codePtr+1
.29a5	69 00		adc #$00			adc 	#0
.29a7	95 58		sta $58,x			sta 	esInt1,x
.29a9	a9 40		lda #$40			lda 	#$40 						; set type to string value
.29ab	95 48		sta $48,x			sta 	esType,x
.29ad	c8		iny				iny 								; skip over string.
.29ae	98		tya				tya
.29af	38		sec				sec									; +1 for the length itself.
.29b0	71 28		adc ($28),y			adc 	(codePtr),y
.29b2	a8		tay				tay 								; and fall through to term loop code.
.29b3					_ELHasTerm:
.29b3	b1 28		lda ($28),y			lda 	(codePtr),y
.29b5	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; check in the correct range for binary tokens.
.29b7	90 04		bcc $29bd			bcc 	_ELPopExit
.29b9	c9 99		cmp #$99			cmp 	#TOK_STRUCTST
.29bb	90 02		bcc $29bf			bcc 	_ELHasBinaryTerm
.29bd					_ELPopExit:
.29bd	68		pla				pla
.29be					_ELExit:
.29be	60		rts				rts
.29bf					_ELHasBinaryTerm:
.29bf	84 32		sty $32				sty 	tempShort 					; save position
.29c1	a8		tay				tay 								; use token as an index and get the precedence.
.29c2	b9 f4 29	lda $29f4,y			lda 	ELBinaryOperatorInfo-TOK_BINARYST,y
.29c5	a4 32		ldy $32				ldy 	tempShort 					; restore Y
.29c7	85 32		sta $32				sta 	tempShort 					; save precedence in memory.
.29c9	68		pla				pla 								; restore current level.
.29ca	c5 32		cmp $32				cmp 	tempShort 					; if current >= operator then exit
.29cc	b0 f0		bcs $29be			bcs 	_ELExit
.29ce	48		pha				pha 								; save current level back on the stack.
.29cf	b1 28		lda ($28),y			lda 	(codePtr),y 				; save the binary operator on the stack and skip it.
.29d1	48		pha				pha
.29d2	c8		iny				iny
.29d3	e8		inx				inx 								; calculate the RHS at the operator precedence.
.29d4	a5 32		lda $32				lda 	tempShort
.29d6	20 4f 29	jsr $294f			jsr 	EvaluateLevel
.29d9	ca		dex				dex
.29da	68		pla				pla 								; get the operator back out.
.29db					_ELExecuteA:
.29db	86 32		stx $32				stx 	tempShort 					; upload the vectors. Would be nice to use jmp (aaaa,x)
.29dd	0a		asl a				asl 	a 							; but not practical. May use push/rts later.
.29de	aa		tax				tax
.29df	bd 16 26	lda $2616,x			lda 	Group0Vectors,x
.29e2	85 2a		sta $2a				sta 	temp0
.29e4	bd 17 26	lda $2617,x			lda 	Group0Vectors+1,x
.29e7	85 2b		sta $2b				sta 	temp0+1
.29e9	a6 32		ldx $32				ldx 	tempShort
.29eb	20 38 2a	jsr $2a38			jsr 	_ELCallTemp0
.29ee	4c b3 29	jmp $29b3			jmp 	_ELHasTerm 					; and loop back round.
.29f1					_ELCheckUnary:
.29f1	c8		iny				iny 								; skip over token.
.29f2	c9 90		cmp #$90			cmp 	#TKW_MINUS 					; is it - term
.29f4	f0 19		beq $2a0f			beq 	_ELMinus
.29f6	c9 97		cmp #$97			cmp 	#TKW_PLING 					; is it ! or ? term
.29f8	f0 2c		beq $2a26			beq 	_ELIndirect
.29fa	c9 98		cmp #$98			cmp 	#TKW_QMARK
.29fc	f0 28		beq $2a26			beq 	_ELIndirect
.29fe	c9 83		cmp #$83			cmp 	#TOK_SHIFT3 				; is it the unary extension.
.2a00	f0 39		beq $2a3b			beq 	_ELExtension
.2a02	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST 				; must be TOK_UNARYST ... TOK_TOKENS
.2a04	90 04		bcc $2a0a			bcc 	_ELUSyntax
.2a06	c9 c9		cmp #$c9			cmp 	#TOK_TOKENS
.2a08	90 d1		bcc $29db			bcc 	_ELExecuteA 				; if so do that token.
.2a0a					_ELUSyntax:
.2a0a	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.2a0c	20 e0 14	jsr $14e0		jsr	errorHandler
.2a0f					_ELMinus:
.2a0f	20 a1 2a	jsr $2aa1			jsr 	EvaluateNumericTerm 		; get a number to negate.
.2a12	b5 48		lda $48,x			lda 	esType,x 					; is it integer
.2a14	f0 0a		beq $2a20			beq 	_ELMinusInteger
.2a16	8a		txa				txa
.2a17	a2 0c		ldx #$0c		ldx	#12
.2a19	20 e8 19	jsr $19e8		jsr	floatingpointHandler
.2a1c	aa		tax				tax
.2a1d	4c b3 29	jmp $29b3			jmp 	_ELHasTerm
.2a20					_ELMinusInteger:
.2a20	20 24 31	jsr $3124			jsr 	MInt32Negate 				; do int negate
.2a23	4c b3 29	jmp $29b3			jmp 	_ELHasTerm
.2a26					_ELIndirect:
.2a26	48		pha				pha 								; save what we want (TKW_QMARK TWK_PLING)
.2a27	20 aa 2a	jsr $2aaa			jsr 	EvaluateIntegerTerm 		; integer address
.2a2a	68		pla				pla
.2a2b	49 97		eor #$97			eor 	#TKW_PLING 					; now $00 if !
.2a2d	f0 02		beq $2a31			beq 	_ELHaveModifier
.2a2f	a9 20		lda #$20			lda 	#$20 						; now $00 if !, $20 if ?
.2a31					_ELHaveModifier:
.2a31	09 80		ora #$80			ora 	#$80						; make it the appropriate reference.
.2a33	95 48		sta $48,x			sta 	esType,x 					; $80 for ! $A0 for ?
.2a35	4c b3 29	jmp $29b3			jmp 	_ELHasTerm
.2a38					_ELCallTemp0:
.2a38	6c 2a 00	jmp ($002a)			jmp 	(temp0)
.2a3b					_ELExtension:
.2a3b	8a		txa				txa 								; stack pos in A
.2a3c	20 15 18	jsr $1815		jsr	extensionHandler
.2a3f	aa		tax				tax 								; restore stack
.2a40	4c b3 29	jmp $29b3			jmp 	_ELHasTerm
.2a43					UnaryParenthesis:
.2a43	a9 00		lda #$00			lda 	#0 							; ( is a unary function ....
.2a45	20 4f 29	jsr $294f			jsr 	EvaluateLevel
.2a48	20 dd 31	jsr $31dd			jsr 	CheckRightParen 			; check for )
.2a4b	60		rts				rts
.2a4c					ELShiftByteIn:
.2a4c	48		pha				pha 								; save bits to shift in.
.2a4d	b5 68		lda $68,x			lda 	esInt3,x 					; save top most byte
.2a4f	48		pha				pha
.2a50	b5 60		lda $60,x			lda 	esInt2,x 					; shift everything left 8 bits
.2a52	95 68		sta $68,x			sta 	esInt3,x
.2a54	b5 58		lda $58,x			lda 	esInt1,x
.2a56	95 60		sta $60,x			sta 	esInt2,x
.2a58	b5 50		lda $50,x			lda 	esInt0,x
.2a5a	95 58		sta $58,x			sta 	esInt1,x
.2a5c	a9 00		lda #$00			lda 	#0
.2a5e	95 50		sta $50,x			sta 	esInt0,x
.2a60	68		pla				pla 								; now A:TOS is a 5 byte register, shift right twice.
.2a61	29 03		and #$03			and 	#3 							; only want lower 2 bits
.2a63	09 04		ora #$04			ora 	#4  						; set bit 2 - when 1 we are done
.2a65					_ELShiftLoop:
.2a65	4a		lsr a				lsr 	a
.2a66	76 68		ror $68,x			ror 	esInt3,x
.2a68	76 60		ror $60,x			ror 	esInt2,x
.2a6a	76 58		ror $58,x			ror 	esInt1,x
.2a6c	76 50		ror $50,x			ror 	esInt0,x
.2a6e	c9 01		cmp #$01			cmp 	#1
.2a70	d0 f3		bne $2a65			bne 	_ELShiftLoop
.2a72	68		pla				pla 								; get original 6 bit value and OR in.
.2a73	29 3f		and #$3f			and 	#$3F
.2a75	15 50		ora $50,x			ora 	esInt0,x
.2a77	95 50		sta $50,x			sta 	esInt0,x
.2a79	60		rts				rts
.2a7a					ELBinaryOperatorInfo:

;******  Processing file: main/evaluate/../../generated/binarystructinfo.inc

>2a7a	01					.byte	$01			; $86 and
>2a7b	01					.byte	$01			; $87 or
>2a7c	01					.byte	$01			; $88 xor
>2a7d	02					.byte	$02			; $89 >=
>2a7e	02					.byte	$02			; $8a <=
>2a7f	02					.byte	$02			; $8b >
>2a80	02					.byte	$02			; $8c <
>2a81	02					.byte	$02			; $8d =
>2a82	02					.byte	$02			; $8e <>
>2a83	03					.byte	$03			; $8f +
>2a84	03					.byte	$03			; $90 -
>2a85	04					.byte	$04			; $91 >>
>2a86	04					.byte	$04			; $92 <<
>2a87	04					.byte	$04			; $93 *
>2a88	04					.byte	$04			; $94 /
>2a89	04					.byte	$04			; $95 mod
>2a8a	05					.byte	$05			; $96 ^
>2a8b	06					.byte	$06			; $97 !
>2a8c	06					.byte	$06			; $98 ?
>2a8d	82					.byte	$82			; $99 repeat
>2a8e	82					.byte	$82			; $9a while
>2a8f	82					.byte	$82			; $9b for
>2a90	82					.byte	$82			; $9c if
>2a91	82					.byte	$82			; $9d defproc
>2a92	80					.byte	$80			; $9e until
>2a93	80					.byte	$80			; $9f wend
>2a94	80					.byte	$80			; $a0 next
>2a95	80					.byte	$80			; $a1 then
>2a96	80					.byte	$80			; $a2 endif
>2a97	80					.byte	$80			; $a3 endproc

;******  Return to file: main/evaluate/evaluate.asm


;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/support.asm

.2a98					EvaluateTerm:
.2a98	a9 0f		lda #$0f			lda 	#15 						; no binary operator has this high a precedence.
.2a9a	20 4f 29	jsr $294f			jsr 	EvaluateLevel
.2a9d	20 fe 28	jsr $28fe			jsr 	DereferenceOne
.2aa0	60		rts				rts
.2aa1					EvaluateNumericTerm:
.2aa1	20 98 2a	jsr $2a98			jsr 	EvaluateTerm
.2aa4	b5 48		lda $48,x			lda 	esType,x
.2aa6	0a		asl a				asl 	a 							; see if it's a string.
.2aa7	30 09		bmi $2ab2			bmi 	ENTType
.2aa9	60		rts				rts
.2aaa					EvaluateIntegerTerm:
.2aaa	20 98 2a	jsr $2a98			jsr 	EvaluateTerm
.2aad	b5 48		lda $48,x			lda 	esType,x
.2aaf	d0 01		bne $2ab2			bne 	ENTType
.2ab1	60		rts				rts
.2ab2					ENTType:
.2ab2	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.2ab4	20 e0 14	jsr $14e0		jsr	errorHandler
.2ab7					EvaluateRoot:
.2ab7	a2 00		ldx #$00			ldx 	#0
.2ab9					Evaluate:
.2ab9	a9 00		lda #$00			lda 	#0
.2abb	20 4f 29	jsr $294f			jsr 	EvaluateLevel
.2abe	20 fe 28	jsr $28fe			jsr 	DereferenceOne
.2ac1	60		rts				rts
.2ac2					EvaluateNumeric:
.2ac2	20 b9 2a	jsr $2ab9			jsr 	Evaluate
.2ac5	b5 48		lda $48,x			lda 	esType,x
.2ac7	0a		asl a				asl 	a 							; see if it's a string.
.2ac8	30 e8		bmi $2ab2			bmi 	ENTType
.2aca	4a		lsr a				lsr 	a 							; shift float flag into carry.
.2acb	4a		lsr a				lsr 	a
.2acc	60		rts				rts
.2acd					EvaluateString:
.2acd	20 b9 2a	jsr $2ab9			jsr 	Evaluate
.2ad0	b5 48		lda $48,x			lda 	esType,x
.2ad2	0a		asl a				asl 	a 							; see if it's a string.
.2ad3	10 dd		bpl $2ab2			bpl 	ENTType
.2ad5	60		rts				rts
.2ad6					EvaluateRootInteger:
.2ad6	a2 00		ldx #$00			ldx 	#0
.2ad8					EvaluateInteger:
.2ad8	20 b9 2a	jsr $2ab9			jsr 	Evaluate
.2adb	b5 48		lda $48,x			lda 	esType,x
.2add	d0 d3		bne $2ab2			bne 	ENTType
.2adf	60		rts				rts
.2ae0					EvaluateSmallInteger:
.2ae0	20 d8 2a	jsr $2ad8			jsr 	EvaluateInteger
.2ae3	b5 58		lda $58,x			lda 	esInt1,x
.2ae5	15 60		ora $60,x			ora 	esInt2,x
.2ae7	15 68		ora $68,x			ora 	esInt3,x
.2ae9	d0 03		bne $2aee			bne 	_ESIValue
.2aeb	b5 50		lda $50,x			lda 	esInt0,x
.2aed	60		rts				rts
.2aee					_ESIValue:
.2aee	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.2af0	20 e0 14	jsr $14e0		jsr	errorHandler
.2af3					LinkEvaluate:
.2af3	aa		tax				tax
.2af4	20 b9 2a	jsr $2ab9			jsr 	Evaluate
.2af7	8a		txa				txa
.2af8	60		rts				rts
.2af9					LinkEvaluateTerm:
.2af9	aa		tax				tax
.2afa	20 98 2a	jsr $2a98			jsr 	EvaluateTerm
.2afd	8a		txa				txa
.2afe	60		rts				rts
.2aff					LinkEvaluateInteger:
.2aff	aa		tax				tax
.2b00	20 d8 2a	jsr $2ad8			jsr 	EvaluateInteger
.2b03	8a		txa				txa
.2b04	60		rts				rts
.2b05					LinkEvaluateSmallInt:
.2b05	aa		tax				tax
.2b06	20 e0 2a	jsr $2ae0			jsr 	EvaluateSmallInteger
.2b09	8a		txa				txa
.2b0a	60		rts				rts
.2b0b					EvaluateReference:
.2b0b	ad 8b 2a	lda $2a8b			lda 	ELBinaryOperatorInfo+TKW_PLING-TOK_BINARYST
.2b0e	38		sec				sec 								; sub 1 to allow a!x b?x to work.
.2b0f	e9 01		sbc #$01			sbc 	#1
.2b11	20 4f 29	jsr $294f			jsr 	EvaluateLevel
.2b14	b5 48		lda $48,x			lda 	esType,x
.2b16	10 01		bpl $2b19			bpl 	_ERFail
.2b18	60		rts				rts
.2b19					_ERFail:
.2b19	a2 0b		ldx #$0b			ldx 	#ErrorID_NoReference
.2b1b	20 e0 14	jsr $14e0		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary/convert.asm

.2b1e					Event_Str:
.2b1e	20 c2 2a	jsr $2ac2			jsr 	EvaluateNumeric 			; get a number.
.2b21	b5 48		lda $48,x			lda 	esType,x 					; is it floating point
.2b23	d0 13		bne $2b38			bne 	_ESFloat
.2b25	20 7b 2b	jsr $2b7b			jsr 	ConvertGetBase 				; get base, or default.
.2b28	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.2b2a	85 2a		sta $2a				sta 	temp0
.2b2c	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.2b2e	85 2b		sta $2b				sta 	1+(temp0)
.2b30	b5 51		lda $51,x			lda 	esInt0+1,x 					; get the base
.2b32	20 c0 30	jsr $30c0			jsr 	MInt32ToString 				; convert to string.
.2b35	4c 45 2b	jmp $2b45			jmp 	_ESCloneExit 				; clone and exit.
.2b38					_ESFloat:
.2b38	20 dd 31	jsr $31dd			jsr 	CheckRightParen 			; check closing )
.2b3b	20 d0 1e	jsr $1ed0			jsr 	TOSToTemp0 					; string address in temp0, goes here.
.2b3e	8a		txa				txa
.2b3f	a2 14		ldx #$14		ldx	#20
.2b41	20 e8 19	jsr $19e8		jsr	floatingpointHandler
.2b44	aa		tax				tax
.2b45					_ESCloneExit:
.2b45	8a		txa				txa
.2b46	a2 02		ldx #$02		ldx	#2
.2b48	20 0e 35	jsr $350e		jsr	stringHandler
.2b4b	aa		tax				tax
.2b4c	60		rts				rts
.2b4d					UnaryVal:
.2b4d	38		sec				sec 								; Carry set to return value
.2b4e	b0 01		bcs $2b51			bcs 	ValueMain
.2b50					UnaryIsVal:
.2b50	18		clc				clc									; Carry clear to return legitimacy
.2b51					ValueMain:
.2b51	08		php				php 								; save results (CS is value, CC is validation)
.2b52	20 cd 2a	jsr $2acd			jsr 	EvaluateString
.2b55	20 7b 2b	jsr $2b7b			jsr 	ConvertGetBase 				; get base, if any.
.2b58	98		tya				tya
.2b59	48		pha				pha
.2b5a	20 d0 1e	jsr $1ed0			jsr 	TOSToTemp0 					; string address in temp0, goes here.
.2b5d	b5 51		lda $51,x			lda 	esInt0+1,x 					; get the base
.2b5f	29 7f		and #$7f			and 	#$7F 						; ignore the sign bit.
.2b61	20 d8 2f	jsr $2fd8			jsr 	MInt32FromString 			; convert it back from a string.
.2b64	b0 0c		bcs $2b72			bcs 	_VMSuccess 					; successfully converted.
.2b66	b5 51		lda $51,x			lda 	esInt0+1,x 					; is base the default
.2b68	c9 8a		cmp #$8a			cmp 	#$80+10 					; if no, then it is integer only.
.2b6a	f0 00		beq $2b6c			beq 	_VMFailed 	 				; so we failed.
.2b6c					_VMFailed:
.2b6c	68		pla				pla
.2b6d	a8		tay				tay
.2b6e	28		plp				plp
.2b6f	4c 6a 31	jmp $316a			jmp 	MInt32False 				; return 0 whatever.
.2b72					_VMSuccess:
.2b72	68		pla				pla
.2b73	a8		tay				tay
.2b74	28		plp				plp 								; if CS the it was val() so we want the value.
.2b75	b0 03		bcs $2b7a			bcs 	_VMExit
.2b77	4c 66 31	jmp $3166			jmp 	MInt32True 					; otherwise return true as successful.
.2b7a					_VMExit:
.2b7a	60		rts				rts
.2b7b					ConvertGetBase:
.2b7b	a9 8a		lda #$8a			lda 	#10+$80 					; default base 10 signed.
.2b7d	95 51		sta $51,x			sta 	esInt0+1,x
.2b7f	b1 28		lda ($28),y			lda 	(codePtr),y 				; check for ,base)
.2b81	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.2b83	d0 0e		bne $2b93			bne 	_CGBDone 					; not found, should be )
.2b85	e8		inx				inx 								; next level
.2b86	c8		iny				iny 								; skip comma.
.2b87	20 e0 2a	jsr $2ae0			jsr 	EvaluateSmallInteger		; evaluate the base.
.2b8a	ca		dex				dex
.2b8b	c9 02		cmp #$02			cmp 	#2 							; base range is 2..16
.2b8d	90 08		bcc $2b97			bcc 	_CGBValue 					; (it should work as high as 37)
.2b8f	c9 11		cmp #$11			cmp 	#17
.2b91	b0 04		bcs $2b97			bcs 	_CGBValue
.2b93					_CGBDone:
.2b93	20 dd 31	jsr $31dd			jsr 	CheckRightParen
.2b96	60		rts				rts
.2b97					_CGBValue:
.2b97	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.2b99	20 e0 14	jsr $14e0		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary/event.asm

.2b9c					EventFunction:
.2b9c	20 0b 2b	jsr $2b0b			jsr 	EvaluateReference			; get the variable reference that tracks the event
.2b9f	b5 48		lda $48,x			lda 	esType,x
.2ba1	c9 80		cmp #$80			cmp 	#$80 						; must be integer reference
.2ba3	d0 5b		bne $2c00			bne 	_EFType
.2ba5	20 ea 31	jsr $31ea			jsr 	CheckComma
.2ba8	e8		inx				inx
.2ba9	20 d8 2a	jsr $2ad8			jsr 	EvaluateInteger		 		; get the elapsed time between firing.
.2bac	20 dd 31	jsr $31dd			jsr 	CheckRightParen 			; finish off with the right bracket
.2baf	ca		dex				dex
.2bb0	b5 58		lda $58,x			lda 	esInt1,x 					; check max of 32767, we use 16 bit for timers and
.2bb2	29 80		and #$80			and 	#$80 						; it doesn't work > 32767
.2bb4	15 60		ora $60,x			ora 	esInt2,x
.2bb6	15 68		ora $68,x			ora 	esInt3,x
.2bb8	d0 41		bne $2bfb			bne 	_EFValue
.2bba	98		tya				tya
.2bbb	48		pha				pha
.2bbc	8a		txa				txa
.2bbd	48		pha				pha
.2bbe	a2 1c		ldx #$1c		ldx	#28
.2bc0	20 bf 14	jsr $14bf		jsr	deviceHandler
.2bc3	84 2d		sty $2d				sty 	temp1+1
.2bc5	85 2c		sta $2c				sta 	temp1
.2bc7	68		pla				pla
.2bc8	aa		tax				tax
.2bc9	20 d0 1e	jsr $1ed0			jsr 	TOSToTemp0 					; set temp0 to the address of the event variable
.2bcc	a0 03		ldy #$03			ldy 	#3							; if -ve
.2bce	b1 2a		lda ($2a),y			lda 	(temp0),y
.2bd0	30 23		bmi $2bf5			bmi 	_EFFail 	 				; straight out with fail, means "on pause".
.2bd2	a0 00		ldy #$00			ldy 	#0 							; is the fire time zero ?
.2bd4	b1 2a		lda ($2a),y			lda 	(temp0),y
.2bd6	c8		iny				iny
.2bd7	11 2a		ora ($2a),y			ora 	(temp0),y
.2bd9	f0 17		beq $2bf2			beq 	_EFInitialise 				; if so, initialise the value but return false.
.2bdb	a0 00		ldy #$00			ldy 	#0 							; calculate trigger - timer
.2bdd	38		sec				sec
.2bde	b1 2a		lda ($2a),y			lda 	(temp0),y
.2be0	e5 2c		sbc $2c				sbc 	temp1
.2be2	c8		iny				iny
.2be3	b1 2a		lda ($2a),y			lda 	(temp0),y
.2be5	e5 2d		sbc $2d				sbc 	temp1+1
.2be7	10 0c		bpl $2bf5			bpl 	_EFFail 					; if trigger >= timer then return False
.2be9	20 05 2c	jsr $2c05			jsr 	SetEventTimer 				; reset the timer for next time.
.2bec	20 66 31	jsr $3166			jsr	 	MInt32True 					; and treutn true as fired.
.2bef	68		pla				pla
.2bf0	a8		tay				tay
.2bf1	60		rts				rts
.2bf2					_EFInitialise:
.2bf2	20 05 2c	jsr $2c05			jsr		SetEventTimer 				; set trigger time to time + elapsed
.2bf5					_EFFail:
.2bf5	68		pla				pla
.2bf6	a8		tay				tay
.2bf7	20 6a 31	jsr $316a			jsr 	MInt32False
.2bfa	60		rts				rts
.2bfb					_EFValue:
.2bfb	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.2bfd	20 e0 14	jsr $14e0		jsr	errorHandler
.2c00					_EFType:
.2c00	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.2c02	20 e0 14	jsr $14e0		jsr	errorHandler
.2c05					SetEventTimer:
.2c05	a0 00		ldy #$00			ldy 	#0
.2c07	18		clc				clc
.2c08	a5 2c		lda $2c				lda 	temp1
.2c0a	75 51		adc $51,x			adc 	esInt0+1,x
.2c0c	91 2a		sta ($2a),y			sta		(temp0),y
.2c0e	c8		iny				iny
.2c0f	a5 2d		lda $2d				lda 	temp1+1
.2c11	75 59		adc $59,x			adc 	esInt1+1,x
.2c13	91 2a		sta ($2a),y			sta		(temp0),y
.2c15	88		dey				dey
.2c16	11 2a		ora ($2a),y			ora 	(temp0),y 					; if the result is non zero, exit
.2c18	d0 04		bne $2c1e			bne 	_SETExit 					; zero means initialise.....
.2c1a	a9 01		lda #$01			lda 	#1 							; timer zero won't work, so make it 1, which is
.2c1c	91 2a		sta ($2a),y			sta 	(temp0),y 					; near enough.
.2c1e					_SETExit:
.2c1e	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary/unary.asm

.2c1f					UnaryLen:
.2c1f	20 2d 2c	jsr $2c2d			jsr 	ULStart
.2c22					ULFinish:
.2c22	b1 2a		lda ($2a),y			lda 	(temp0),y 					; get length prefix
.2c24	a4 32		ldy $32				ldy 	tempShort 					; get Y back
.2c26	20 79 31	jsr $3179			jsr 	MInt32Set8Bit 				; write it out.
.2c29	20 dd 31	jsr $31dd			jsr 	CheckRightParen
.2c2c	60		rts				rts
.2c2d	20 cd 2a	jsr $2acd	ULStart:jsr 	EvaluateString
.2c30	b5 50		lda $50,x			lda 	esInt0,x 					; copy address of string to temp0
.2c32	85 2a		sta $2a				sta 	temp0
.2c34	b5 58		lda $58,x			lda 	esInt1,x
.2c36	85 2b		sta $2b				sta 	temp0+1
.2c38	84 32		sty $32				sty 	tempShort 					; get length
.2c3a	a0 00		ldy #$00			ldy 	#0
.2c3c	60		rts				rts
.2c3d					UnaryAsc:
.2c3d	20 2d 2c	jsr $2c2d			jsr 	ULStart 					; same as LEN() get string, save Y, point to length.
.2c40	b1 2a		lda ($2a),y			lda 	(temp0),y 					; read length
.2c42	c8		iny				iny 		 						; point to first character, we can do LEN code after that
.2c43	c9 00		cmp #$00			cmp 	#0
.2c45	d0 db		bne $2c22			bne 	ULFinish 					; if length = 0 then error : asc("") -> error.
.2c47	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.2c49	20 e0 14	jsr $14e0		jsr	errorHandler
.2c4c					UnaryAbs:
.2c4c	20 c2 2a	jsr $2ac2			jsr 	EvaluateNumeric 			; some numeric value
.2c4f	b0 07		bcs $2c58			bcs 	_UAFloat 					; CS then float, so use that function
.2c51	20 1f 31	jsr $311f			jsr 	MInt32Absolute 				; int version
.2c54	20 dd 31	jsr $31dd			jsr 	CheckRightParen
.2c57	60		rts				rts
.2c58					_UAFloat:
.2c58	8a		txa				txa 								; float version
.2c59	a2 00		ldx #$00		ldx	#0
.2c5b	20 e8 19	jsr $19e8		jsr	floatingpointHandler
.2c5e	aa		tax				tax
.2c5f	20 dd 31	jsr $31dd			jsr 	CheckRightParen
.2c62	60		rts				rts
.2c63					UnarySgn:
.2c63	20 c2 2a	jsr $2ac2			jsr 	EvaluateNumeric 			; same as above but sign of value
.2c66	b0 07		bcs $2c6f			bcs 	_USFloat
.2c68	20 57 31	jsr $3157			jsr 	MInt32Sign
.2c6b	20 dd 31	jsr $31dd			jsr 	CheckRightParen
.2c6e	60		rts				rts
.2c6f					_USFloat:
.2c6f	8a		txa				txa
.2c70	a2 0e		ldx #$0e		ldx	#14
.2c72	20 e8 19	jsr $19e8		jsr	floatingpointHandler
.2c75	aa		tax				tax
.2c76	20 dd 31	jsr $31dd			jsr 	CheckRightParen
.2c79	60		rts				rts
.2c7a					UnaryPeek:
.2c7a	20 a6 2c	jsr $2ca6			jsr 	PDLCode 					; each has common setup code put reads 1,2 or 4 bytes
.2c7d	4c 9a 2c	jmp $2c9a			jmp 	PDLByte0
.2c80					UnaryDeek:
.2c80	20 a6 2c	jsr $2ca6			jsr 	PDLCode
.2c83	4c 94 2c	jmp $2c94			jmp 	PDLByte1
.2c86					UnaryLeek:
.2c86	20 a6 2c	jsr $2ca6			jsr 	PDLCode
.2c89	a0 03		ldy #$03			ldy 	#3							; read 3-2
.2c8b	b1 2a		lda ($2a),y			lda 	(temp0),y
.2c8d	95 68		sta $68,x			sta 	esInt3,x
.2c8f	88		dey				dey
.2c90	b1 2a		lda ($2a),y			lda 	(temp0),y
.2c92	95 60		sta $60,x			sta 	esInt2,x
.2c94					PDLByte1:
.2c94	a0 01		ldy #$01			ldy 	#1
.2c96	b1 2a		lda ($2a),y			lda 	(temp0),y
.2c98	95 58		sta $58,x			sta 	esInt1,x
.2c9a					PDLByte0:
.2c9a	a0 00		ldy #$00			ldy 	#0
.2c9c	b1 2a		lda ($2a),y			lda 	(temp0),y
.2c9e	95 50		sta $50,x			sta 	esInt0,x
.2ca0	a4 32		ldy $32				ldy 	tempShort 					; restore Y
.2ca2	20 dd 31	jsr $31dd			jsr 	CheckRightParen 			; check right and return
.2ca5	60		rts				rts
.2ca6					PDLCode:
.2ca6	20 d8 2a	jsr $2ad8			jsr 	EvaluateInteger 			; some address
.2ca9	b5 50		lda $50,x			lda 	esInt0,x 					; copy address of string to temp0
.2cab	85 2a		sta $2a				sta 	temp0
.2cad	b5 58		lda $58,x			lda 	esInt1,x
.2caf	85 2b		sta $2b				sta 	temp0+1
.2cb1	a9 00		lda #$00			lda 	#0 							; zero upper 3 bytes of result, type okay.
.2cb3	95 58		sta $58,x			sta 	esInt1,x 					; PEEK needs upper 3 cleared
.2cb5	95 60		sta $60,x			sta 	esInt2,x
.2cb7	95 68		sta $68,x			sta 	esInt3,x
.2cb9	84 32		sty $32				sty 	tempShort 					; save Y
.2cbb	60		rts				rts
.2cbc					Unary_Random:
.2cbc	20 9a 31	jsr $319a			jsr 	MInt32Random 				; generate random number.
.2cbf	b1 28		lda ($28),y			lda 	(codePtr),y 				; check followed by )
.2cc1	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.2cc3	f0 08		beq $2ccd			beq 	_URExit
.2cc5	e8		inx				inx 								; load range 0..r-1 into +1
.2cc6	20 d8 2a	jsr $2ad8			jsr 	EvaluateInteger
.2cc9	ca		dex				dex
.2cca	20 bd 2f	jsr $2fbd			jsr 	MInt32Modulus 				; calculate random % modulus
.2ccd					_URExit:
.2ccd	20 dd 31	jsr $31dd			jsr 	CheckRightParen 			; check right and return
.2cd0	60		rts				rts
.2cd1					Unary_Min:
.2cd1	a9 01		lda #$01			lda 	#1 							; c1 cmp c2 needs to be > e.g. c1 > c2
.2cd3	d0 02		bne $2cd7			bne 	UnaryMBody
.2cd5					Unary_Max:
.2cd5	a9 ff		lda #$ff			lda 	#$FF 						; c1 cmp c2 needs to be < e.g. c1 < c2
.2cd7					UnaryMBody:
.2cd7	48		pha				pha 								; save comparator on stack, shows min or max
.2cd8	20 b9 2a	jsr $2ab9			jsr 	Evaluate 					; get the first thing to check
.2cdb					_UnaryMLoop:
.2cdb	b1 28		lda ($28),y			lda 	(codePtr),y 				; found ), indicates end.
.2cdd	c8		iny				iny
.2cde	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.2ce0	f0 09		beq $2ceb			beq 	_UnaryMExit
.2ce2	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; found , indicates more.
.2ce4	f0 07		beq $2ced			beq 	_UnaryMCompare
.2ce6	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.2ce8	20 e0 14	jsr $14e0		jsr	errorHandler
.2ceb					_UnaryMExit:
.2ceb	68		pla				pla 								; done so throw comparator and return.
.2cec	60		rts				rts
.2ced					_UnaryMCompare:
.2ced	e8		inx				inx 								; get the 2nd thing to evaluate
.2cee	20 b9 2a	jsr $2ab9			jsr 	Evaluate
.2cf1	ca		dex				dex
.2cf2	20 7f 28	jsr $287f			jsr 	PerformComparison 			; this is part of evaluate/compare.asm
.2cf5	85 32		sta $32				sta 	tempShort 					; save result
.2cf7	68		pla				pla 								; get what we need
.2cf8	48		pha				pha
.2cf9	c5 32		cmp $32				cmp 	tempShort 					; did we get it
.2cfb	d0 de		bne $2cdb			bne 	_UnaryMLoop 				; no, try another value.
.2cfd	20 6a 31	jsr $316a			jsr 	MInt32False 				; promote 2nd to 1st.
.2d00	20 4e 30	jsr $304e			jsr 	MInt32Add
.2d03	4c db 2c	jmp $2cdb			jmp 	_UnaryMLoop
.2d06					Unary_Page:
.2d06	20 6a 31	jsr $316a			jsr 	MInt32False 				; zero
.2d09	ad c8 0a	lda $0ac8			lda 	basePage 					; copy base page address in.
.2d0c	95 50		sta $50,x			sta 	esInt0,x
.2d0e	ad c9 0a	lda $0ac9			lda 	basePage+1
.2d11	95 58		sta $58,x			sta 	esInt1,x
.2d13	60		rts				rts
.2d14					UnaryReference:
.2d14	a9 0f		lda #$0f			lda 	#15
.2d16	20 4f 29	jsr $294f			jsr 	EvaluateLevel 				; evaluate term and don't deference.
.2d19	b5 48		lda $48,x			lda 	esType,x 					; check it's a reference.
.2d1b	10 05		bpl $2d22			bpl 	UType
.2d1d	a9 00		lda #$00			lda 	#0 							; make it an integer
.2d1f	95 48		sta $48,x			sta 	esType,x
.2d21	60		rts				rts
.2d22					UType:
.2d22	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.2d24	20 e0 14	jsr $14e0		jsr	errorHandler
.2d27					UnaryHexMarker:
.2d27	4c aa 2a	jmp $2aaa			jmp 	EvaluateIntegerTerm
.2d2a					UnaryComplement:
.2d2a	20 aa 2a	jsr $2aaa			jsr 	EvaluateIntegerTerm
.2d2d	20 3e 31	jsr $313e			jsr 	MInt32Not
.2d30	60		rts				rts
.2d31					UnaryIntToFloat:
.2d31	20 c2 2a	jsr $2ac2			jsr 	EvaluateNumeric				; some number
.2d34	b5 48		lda $48,x			lda 	esType,x 					; if float already, exit
.2d36	d0 0b		bne $2d43			bne 	_UIFExit
.2d38	8a		txa				txa 								; convert and set type
.2d39	a2 1a		ldx #$1a		ldx	#26
.2d3b	20 e8 19	jsr $19e8		jsr	floatingpointHandler
.2d3e	aa		tax				tax
.2d3f	a9 01		lda #$01			lda 	#1
.2d41	95 48		sta $48,x			sta 	esType,x
.2d43					_UIFExit:
.2d43	60		rts				rts
.2d44					UnaryFloatToInt:
.2d44	20 c2 2a	jsr $2ac2			jsr 	EvaluateNumeric 			; the number
.2d47	b5 48		lda $48,x			lda 	esType,x 					; if int already exit
.2d49	f0 0b		beq $2d56			beq 	_UFIExit
.2d4b	8a		txa				txa 								; convert to int
.2d4c	a2 12		ldx #$12		ldx	#18
.2d4e	20 e8 19	jsr $19e8		jsr	floatingpointHandler
.2d51	aa		tax				tax
.2d52	a9 00		lda #$00			lda 	#0 							; set type
.2d54	95 48		sta $48,x			sta 	esType,x
.2d56					_UFIExit:
.2d56	60		rts				rts
.2d57					UnaryAlloc:
.2d57	e8		inx				inx 								; evaluate memory required
.2d58	20 d8 2a	jsr $2ad8			jsr 	EvaluateInteger
.2d5b	20 dd 31	jsr $31dd			jsr 	CheckRightParen
.2d5e	ca		dex				dex
.2d5f	b5 61		lda $61,x			lda 	esInt2+1,x 					; check at least in 64k range.
.2d61	15 69		ora $69,x			ora 	esInt3+1,x
.2d63	d0 1d		bne $2d82			bne 	_UABadValue
.2d65	20 6a 31	jsr $316a			jsr 	MInt32False					; zero return.
.2d68	a5 36		lda $36				lda 	lowMemory+1 				; copy low memory in
.2d6a	95 58		sta $58,x			sta 	esInt1,x
.2d6c	a5 35		lda $35				lda 	lowMemory
.2d6e	95 50		sta $50,x			sta 	esInt0,x
.2d70	18		clc				clc 								; add alloc required.
.2d71	75 51		adc $51,x			adc 	esInt0+1,x
.2d73	85 35		sta $35				sta 	lowMemory
.2d75	a5 36		lda $36				lda 	lowMemory+1
.2d77	75 59		adc $59,x			adc 	esInt1+1,x
.2d79	85 36		sta $36				sta 	lowMemory+1
.2d7b	b0 05		bcs $2d82			bcs		_UABadValue 				; overflow definitely bad.
.2d7d	c5 34		cmp $34				cmp 	highMemory+1
.2d7f	b0 01		bcs $2d82			bcs 	_UABadValue 				; out of memory bad.
.2d81	60		rts				rts
.2d82					_UABadValue:
.2d82	a2 22		ldx #$22			ldx 	#ErrorID_Memory
.2d84	20 e0 14	jsr $14e0		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary/unary2.asm

.2d87					UnaryTimer:
.2d87	20 dd 31	jsr $31dd			jsr 	CheckRightParen 			; no parameters
.2d8a	98		tya				tya
.2d8b	48		pha				pha
.2d8c	20 91 31	jsr $3191			jsr 	MInt32Zero 					; zero result
.2d8f	86 2a		stx $2a				stx 	temp0 						; returning in YA so can't use .pshx
.2d91	a2 1c		ldx #$1c		ldx	#28
.2d93	20 bf 14	jsr $14bf		jsr	deviceHandler
.2d96	a6 2a		ldx $2a				ldx 	temp0						; restore X and update 16 bit result
.2d98	95 50		sta $50,x			sta 	esInt0,x
.2d9a	98		tya				tya
.2d9b	95 58		sta $58,x			sta 	esInt1,x
.2d9d	68		pla				pla
.2d9e	a8		tay				tay
.2d9f	60		rts				rts
.2da0					UnaryInkey:
.2da0	20 dd 31	jsr $31dd			jsr 	CheckRightParen
.2da3	86 2a		stx $2a				stx 	temp0
.2da5	a2 0a		ldx #$0a		ldx	#10
.2da7	20 bf 14	jsr $14bf		jsr	deviceHandler
.2daa	a6 2a		ldx $2a				ldx 	temp0
.2dac	20 79 31	jsr $3179			jsr 	MInt32Set8Bit
.2daf	60		rts				rts
.2db0					UnaryGet:
.2db0	20 dd 31	jsr $31dd			jsr 	CheckRightParen
.2db3	86 2a		stx $2a				stx 	temp0
.2db5					_UGLoop:
.2db5	a2 00		ldx #$00		ldx	#0
.2db7	20 bf 14	jsr $14bf		jsr	deviceHandler
.2dba	a2 0a		ldx #$0a		ldx	#10
.2dbc	20 bf 14	jsr $14bf		jsr	deviceHandler
.2dbf	c9 00		cmp #$00			cmp 	#0
.2dc1	f0 f2		beq $2db5			beq 	_UGLoop
.2dc3	a6 2a		ldx $2a				ldx 	temp0
.2dc5	20 79 31	jsr $3179			jsr 	MInt32Set8Bit
.2dc8	60		rts				rts
.2dc9					UnaryGetString:
.2dc9	20 b0 2d	jsr $2db0			jsr 	UnaryGet
.2dcc					UGSDoChr:
.2dcc	4c 1d 2e	jmp $2e1d			jmp 	ChrCode
.2dcf					UnaryInkeyString:
.2dcf	20 a0 2d	jsr $2da0			jsr 	UnaryInkey
.2dd2	b5 50		lda $50,x			lda 	esInt0,x
.2dd4	d0 f6		bne $2dcc			bne 	UGSDoChr
.2dd6	8a		txa				txa
.2dd7	a2 06		ldx #$06		ldx	#6
.2dd9	20 0e 35	jsr $350e		jsr	stringHandler
.2ddc	aa		tax				tax
.2ddd	60		rts				rts
.2dde					UnarySys:
.2dde	20 d8 2a	jsr $2ad8			jsr 	EvaluateInteger 				; get the address
.2de1	20 dd 31	jsr $31dd			jsr 	CheckRightParen
.2de4	20 d0 1e	jsr $1ed0			jsr 	TOSToTemp0 						; copy call address to temp0
.2de7	8a		txa				txa
.2de8	48		pha				pha
.2de9	98		tya				tya
.2dea	48		pha				pha
.2deb	ad 00 0a	lda $0a00			lda 	("A"-"A")*4+SingleLetterVar 	; load AXY
.2dee	ae 5c 0a	ldx $0a5c			ldx 	("X"-"A")*4+SingleLetterVar
.2df1	ac 60 0a	ldy $0a60			ldy 	("Y"-"A")*4+SingleLetterVar
.2df4	20 03 2e	jsr $2e03			jsr 	_CallTemp0
.2df7	85 32		sta $32				sta 	tempShort 						; restore YX
.2df9	68		pla				pla
.2dfa	a8		tay				tay
.2dfb	68		pla				pla
.2dfc	aa		tax				tax
.2dfd	a5 32		lda $32				lda 	tempShort
.2dff	20 79 31	jsr $3179			jsr 	MInt32Set8Bit 					; return result.
.2e02	60		rts				rts
.2e03					_CallTemp0:
.2e03	6c 2a 00	jmp ($002a)			jmp 	(temp0)
.2e06					UnaryMem:
.2e06	20 6a 31	jsr $316a			jsr 	MInt32False 					; set to false (e.g. 0)
.2e09	38		sec				sec
.2e0a	a5 33		lda $33				lda 	highMemory 						; calculate value
.2e0c	e5 35		sbc $35				sbc 	lowMemory
.2e0e	95 50		sta $50,x			sta 	esInt0,x
.2e10	a5 34		lda $34				lda 	highMemory+1
.2e12	e5 36		sbc $36				sbc 	lowMemory+1
.2e14	95 58		sta $58,x			sta 	esInt1,x
.2e16	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary/unarystr.asm

.2e17					ExecChr:
.2e17	20 e0 2a	jsr $2ae0			jsr 	EvaluateSmallInteger		; character number 0-255
.2e1a	20 dd 31	jsr $31dd			jsr 	CheckRightParen				; right bracket
.2e1d					ChrCode:
.2e1d	98		tya				tya
.2e1e	48		pha				pha
.2e1f	8a		txa				txa 								; A = stack
.2e20	b4 50		ldy $50,x			ldy 	esInt0,x					; Y = character
.2e22	a2 00		ldx #$00		ldx	#0
.2e24	20 0e 35	jsr $350e		jsr	stringHandler
.2e27	aa		tax				tax 								; X = stack
.2e28	68		pla				pla
.2e29	a8		tay				tay
.2e2a	60		rts				rts
.2e2b					ExecLower:
.2e2b	38		sec				sec 								; set carry is lower
.2e2c	b0 01		bcs $2e2f			bcs 	ExecUpperLower
.2e2e					ExecUpper:
.2e2e	18		clc				clc 								; clear carry is upper
.2e2f					ExecUpperLower:
.2e2f	08		php				php 								; save carry
.2e30	20 cd 2a	jsr $2acd			jsr 	EvaluateString 				; string to stack,X
.2e33	20 dd 31	jsr $31dd			jsr 	CheckRightParen 			; check closing right bracket.
.2e36	28		plp				plp 								; restore carry, save Y
.2e37	98		tya				tya
.2e38	48		pha				pha
.2e39	a9 00		lda #$00			lda 	#0 							; A zero if upper, 1 if lower.
.2e3b	2a		rol a				rol 	a
.2e3c	a8		tay				tay 								; now in Y
.2e3d	8a		txa				txa 								; do the substring and exit.
.2e3e	a2 0a		ldx #$0a		ldx	#10
.2e40	20 0e 35	jsr $350e		jsr	stringHandler
.2e43	aa		tax				tax
.2e44	68		pla				pla
.2e45	a8		tay				tay
.2e46	60		rts				rts
.2e47					ExecLeft:
.2e47	20 cd 2a	jsr $2acd			jsr 	EvaluateString 				; string to stack,X
.2e4a	20 ea 31	jsr $31ea			jsr 	CheckComma
.2e4d	e8		inx				inx
.2e4e	a9 01		lda #$01			lda 	#1 							; 1 for 2nd parameter.
.2e50	20 79 31	jsr $3179			jsr 	MInt32Set8Bit
.2e53	e8		inx				inx
.2e54	20 e0 2a	jsr $2ae0			jsr 	EvaluateSmallInteger 		; smallint 3rd parameter
.2e57					ExecSubstring:
.2e57	ca		dex				dex 								; fix up X
.2e58	ca		dex				dex
.2e59	20 dd 31	jsr $31dd			jsr 	CheckRightParen 			; check closing right bracket.
.2e5c	8a		txa				txa 								; do the substring and exit.
.2e5d	a2 0c		ldx #$0c		ldx	#12
.2e5f	20 0e 35	jsr $350e		jsr	stringHandler
.2e62	aa		tax				tax
.2e63	60		rts				rts
.2e64					ExecMid:
.2e64	20 cd 2a	jsr $2acd			jsr 	EvaluateString 				; string to stack,X
.2e67	20 ea 31	jsr $31ea			jsr 	CheckComma
.2e6a	e8		inx				inx
.2e6b	20 e0 2a	jsr $2ae0			jsr 	EvaluateSmallInteger 		; smallint 2nd parameter
.2e6e	c9 00		cmp #$00			cmp 	#0
.2e70	f0 15		beq $2e87			beq 	_EMValue
.2e72	e8		inx				inx
.2e73	a9 ff		lda #$ff			lda 	#255 						; 255 default for 3nd parameter - this is optional.
.2e75	20 79 31	jsr $3179			jsr 	MInt32Set8Bit
.2e78	b1 28		lda ($28),y			lda 	(codePtr),y 				; is there a ) next
.2e7a	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN 				; if so, just MID$(a$,2)
.2e7c	f0 d9		beq $2e57			beq 	ExecSubString
.2e7e	20 ea 31	jsr $31ea			jsr 	CheckComma
.2e81	20 e0 2a	jsr $2ae0			jsr 	EvaluateSmallInteger 		; smallint 2nd parameter
.2e84	4c 57 2e	jmp $2e57			jmp 	ExecSubString
.2e87					_EMValue:
.2e87	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.2e89	20 e0 14	jsr $14e0		jsr	errorHandler
.2e8c					ExecRight:
.2e8c	20 cd 2a	jsr $2acd			jsr 	EvaluateString 				; string to stack,X
.2e8f	20 ea 31	jsr $31ea			jsr 	CheckComma
.2e92	e8		inx				inx
.2e93	20 e0 2a	jsr $2ae0			jsr 	EvaluateSmallInteger 		; smallint 2nd parameter.
.2e96	ca		dex				dex
.2e97	98		tya				tya
.2e98	48		pha				pha
.2e99	b5 50		lda $50,x			lda 	esInt0,x 					; copy address of string to temp0
.2e9b	85 2a		sta $2a				sta 	temp0
.2e9d	b5 58		lda $58,x			lda 	esInt1,x
.2e9f	85 2b		sta $2b				sta 	temp0+1
.2ea1	a0 00		ldy #$00			ldy 	#0 							; point to length
.2ea3	b1 2a		lda ($2a),y			lda 	(temp0),y 					; get the length.
.2ea5	18		clc				clc 								; add 1.
.2ea6	69 01		adc #$01			adc 	#1
.2ea8	38		sec				sec
.2ea9	f5 51		sbc $51,x			sbc 	esInt0+1,x  				; subtract right count.
.2eab	f0 02		beq $2eaf			beq		_ERMake1 					; if zero, make it 1.
.2ead	b0 02		bcs $2eb1			bcs		_EROkay
.2eaf					_ERMake1:
.2eaf	a9 01		lda #$01			lda 	#1 							; start position.
.2eb1					_EROkay:
.2eb1	e8		inx				inx 								; set start pos.
.2eb2	95 50		sta $50,x			sta 	esInt0,x
.2eb4	e8		inx				inx
.2eb5	a9 ff		lda #$ff			lda 	#255 						; 255 default for 3nd parameter.
.2eb7	20 79 31	jsr $3179			jsr 	MInt32Set8Bit
.2eba	68		pla				pla
.2ebb	a8		tay				tay
.2ebc	4c 57 2e	jmp $2e57			jmp 	ExecSubString 				; do the substring code.

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32binary.asm

.2ebf					MInt32And:
.2ebf	b5 50		lda $50,x			lda 	esInt0,x
.2ec1	35 51		and $51,x			and 	esInt0+1,x
.2ec3	95 50		sta $50,x			sta 	esInt0,x
.2ec5	b5 58		lda $58,x			lda 	esInt1,x
.2ec7	35 59		and $59,x			and 	esInt1+1,x
.2ec9	95 58		sta $58,x			sta 	esInt1,x
.2ecb	b5 60		lda $60,x			lda 	esInt2,x
.2ecd	35 61		and $61,x			and 	esInt2+1,x
.2ecf	95 60		sta $60,x			sta 	esInt2,x
.2ed1	b5 68		lda $68,x			lda 	esInt3,x
.2ed3	35 69		and $69,x			and 	esInt3+1,x
.2ed5	95 68		sta $68,x			sta 	esInt3,x
.2ed7	60		rts				rts
.2ed8					MInt32Or:
.2ed8	b5 50		lda $50,x			lda 	esInt0,x
.2eda	15 51		ora $51,x			ora 	esInt0+1,x
.2edc	95 50		sta $50,x			sta 	esInt0,x
.2ede	b5 58		lda $58,x			lda 	esInt1,x
.2ee0	15 59		ora $59,x			ora 	esInt1+1,x
.2ee2	95 58		sta $58,x			sta 	esInt1,x
.2ee4	b5 60		lda $60,x			lda 	esInt2,x
.2ee6	15 61		ora $61,x			ora 	esInt2+1,x
.2ee8	95 60		sta $60,x			sta 	esInt2,x
.2eea	b5 68		lda $68,x			lda 	esInt3,x
.2eec	15 69		ora $69,x			ora 	esInt3+1,x
.2eee	95 68		sta $68,x			sta 	esInt3,x
.2ef0	60		rts				rts
.2ef1					MInt32Xor:
.2ef1	b5 50		lda $50,x			lda 	esInt0,x
.2ef3	55 51		eor $51,x			eor 	esInt0+1,x
.2ef5	95 50		sta $50,x			sta 	esInt0,x
.2ef7	b5 58		lda $58,x			lda 	esInt1,x
.2ef9	55 59		eor $59,x			eor 	esInt1+1,x
.2efb	95 58		sta $58,x			sta 	esInt1,x
.2efd	b5 60		lda $60,x			lda 	esInt2,x
.2eff	55 61		eor $61,x			eor 	esInt2+1,x
.2f01	95 60		sta $60,x			sta 	esInt2,x
.2f03	b5 68		lda $68,x			lda 	esInt3,x
.2f05	55 69		eor $69,x			eor 	esInt3+1,x
.2f07	95 68		sta $68,x			sta 	esInt3,x
.2f09	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32compare.asm

.2f0a					MInt32Compare:
.2f0a	b5 50		lda $50,x			lda 	esInt0,x 					; equality check first.
.2f0c	d5 51		cmp $51,x			cmp 	esInt0+1,x
.2f0e	d0 13		bne $2f23			bne 	MInt32Compare2
.2f10	b5 58		lda $58,x			lda 	esInt1,x
.2f12	d5 59		cmp $59,x			cmp 	esInt1+1,x
.2f14	d0 0d		bne $2f23			bne 	MInt32Compare2
.2f16	b5 60		lda $60,x			lda 	esInt2,x
.2f18	d5 61		cmp $61,x			cmp 	esInt2+1,x
.2f1a	d0 07		bne $2f23			bne 	MInt32Compare2
.2f1c	b5 68		lda $68,x			lda 	esInt3,x
.2f1e	55 69		eor $69,x			eor 	esInt3+1,x 					; EOR will return 0 if the same.
.2f20	d0 01		bne $2f23			bne 	MInt32Compare2
.2f22	60		rts				rts
.2f23					MInt32Compare2:
.2f23	b5 50		lda $50,x			lda		esInt0,x 					; unsigned 32 bit comparison.
.2f25	d5 51		cmp $51,x			cmp 	esInt0+1,x
.2f27	b5 58		lda $58,x			lda		esInt1,x
.2f29	f5 59		sbc $59,x			sbc 	esInt1+1,x
.2f2b	b5 60		lda $60,x			lda		esInt2,x
.2f2d	f5 61		sbc $61,x			sbc 	esInt2+1,x
.2f2f	b5 68		lda $68,x			lda		esInt3,x
.2f31	f5 69		sbc $69,x			sbc 	esInt3+1,x
.2f33	50 02		bvc $2f37			bvc 	_I32LNoOverflow 			; make it signed 32 bit comparison
.2f35	49 80		eor #$80			eor 	#$80
.2f37					_I32LNoOverflow
.2f37	30 03		bmi $2f3c			bmi 	MInt32CLess					; if -ve then return $FF
.2f39	a9 01		lda #$01			lda 	#$01						; else return $01
.2f3b	60		rts				rts
.2f3c					MInt32CLess:
.2f3c	a9 ff		lda #$ff			lda 	#$FF
.2f3e	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32divide.asm

.2f3f					MInt32SDivide:
.2f3f	98		tya				tya  								; save Y, which is the count of negations
.2f40	48		pha				pha
.2f41	a0 00		ldy #$00			ldy 	#0 							; zero count
.2f43	20 5b 2f	jsr $2f5b			jsr 	_MInt32SRemSign 			; unsign TOS
.2f46	e8		inx				inx 								; unsign TOS+1
.2f47	20 5b 2f	jsr $2f5b			jsr 	_MInt32SRemSign
.2f4a	ca		dex				dex
.2f4b	98		tya				tya 								; save sign count on stack
.2f4c	48		pha				pha
.2f4d	20 64 2f	jsr $2f64			jsr 	MInt32UDivide 				; unsigned division
.2f50	68		pla				pla 								; get sign count back
.2f51	29 01		and #$01			and 	#1 							; if it is odd, then negate result
.2f53	f0 03		beq $2f58			beq 	_I32SNoNeg
.2f55	20 24 31	jsr $3124			jsr 	MInt32Negate
.2f58					_I32SNoNeg:
.2f58	68		pla				pla 								; restoe Y and exit
.2f59	a8		tay				tay
.2f5a	60		rts				rts
.2f5b					_MInt32SRemSign:
.2f5b	b5 68		lda $68,x			lda 	esInt3,x 					; is it -ve
.2f5d	10 04		bpl $2f63			bpl 	_MInt32SRSExit
.2f5f	c8		iny				iny 								; increment the sign count
.2f60	20 24 31	jsr $3124			jsr 	MInt32Negate 				; negate the value.
.2f63					_MInt32SRSExit:
.2f63	60		rts				rts
.2f64					MInt32UDivide:
.2f64	b5 51		lda $51,x			lda 	esInt0+1,x 					; check for division by zero
.2f66	15 59		ora $59,x			ora 	esInt1+1,x
.2f68	15 5a		ora $5a,x			ora 	esInt1+2,x
.2f6a	15 5b		ora $5b,x			ora 	esInt1+3,x
.2f6c	f0 4a		beq $2fb8			beq 	_MInt32DZero
.2f6e	e8		inx				inx 								; clear A
.2f6f	e8		inx				inx
.2f70	20 6a 31	jsr $316a			jsr 	MInt32False
.2f73	ca		dex				dex
.2f74	ca		dex				dex
.2f75	98		tya				tya 								; save Y on the stack
.2f76	48		pha				pha
.2f77	a0 20		ldy #$20			ldy 	#32 						; number of division passes
.2f79					_MInt32UDLoop:
.2f79	16 50		asl $50,x			asl 	esInt0,x					; shift QA left. First Q
.2f7b	36 58		rol $58,x			rol 	esInt1,x
.2f7d	36 60		rol $60,x			rol 	esInt2,x
.2f7f	36 68		rol $68,x			rol 	esInt3,x
.2f81	36 52		rol $52,x			rol 	esInt0+2,x 					; then A.
.2f83	36 5a		rol $5a,x			rol 	esInt1+2,x
.2f85	36 62		rol $62,x			rol 	esInt2+2,x
.2f87	36 6a		rol $6a,x			rol 	esInt3+2,x
.2f89	38		sec				sec 								; calculate A-M saving result on the stack
.2f8a	b5 52		lda $52,x			lda 	esInt0+2,x
.2f8c	f5 51		sbc $51,x			sbc 	esInt0+1,x
.2f8e	48		pha				pha
.2f8f	b5 5a		lda $5a,x			lda 	esInt1+2,x
.2f91	f5 59		sbc $59,x			sbc 	esInt1+1,x
.2f93	48		pha				pha
.2f94	b5 62		lda $62,x			lda 	esInt2+2,x
.2f96	f5 61		sbc $61,x			sbc 	esInt2+1,x
.2f98	48		pha				pha
.2f99	b5 6a		lda $6a,x			lda 	esInt3+2,x
.2f9b	f5 69		sbc $69,x			sbc 	esInt3+1,x
.2f9d	90 10		bcc $2faf			bcc		_MInt32NoSubtract 			; if A < M (e.g. carry clear) then reject this.
.2f9f	95 6a		sta $6a,x			sta 	esInt3+2,x 					; write result back to A
.2fa1	68		pla				pla
.2fa2	95 62		sta $62,x			sta 	esInt2+2,x
.2fa4	68		pla				pla
.2fa5	95 5a		sta $5a,x			sta 	esInt1+2,x
.2fa7	68		pla				pla
.2fa8	95 52		sta $52,x			sta 	esInt0+2,x
.2faa	f6 50		inc $50,x			inc 	esInt0,x 					; sets bit 0 of Q - it was shifted left previously.
.2fac	4c b2 2f	jmp $2fb2			jmp 	_MInt32Next 					; do the next iteration
.2faf					_MInt32NoSubtract:
.2faf	68		pla				pla
.2fb0	68		pla				pla
.2fb1	68		pla				pla
.2fb2					_MInt32Next:
.2fb2	88		dey				dey 								; do this 32 times.
.2fb3	d0 c4		bne $2f79			bne 	_MInt32UDLoop
.2fb5	68		pla				pla 								; restore Y and exit
.2fb6	a8		tay				tay
.2fb7	60		rts				rts
.2fb8					_MInt32DZero:
.2fb8	a2 05		ldx #$05			ldx 	#ErrorID_DivZero
.2fba	20 e0 14	jsr $14e0		jsr	errorHandler
.2fbd					MInt32Modulus:
.2fbd	20 64 2f	jsr $2f64			jsr 	MInt32UDivide 				; do the division.
.2fc0	b5 6a		lda $6a,x			lda 	esInt3+2,x 					; copy 2nd on stack (the remainder) to the top.
.2fc2	95 68		sta $68,x			sta 	esInt3,x
.2fc4	b5 62		lda $62,x			lda 	esInt2+2,x
.2fc6	95 60		sta $60,x			sta 	esInt2,x
.2fc8	b5 5a		lda $5a,x			lda 	esInt1+2,x
.2fca	95 58		sta $58,x			sta 	esInt1,x
.2fcc	b5 52		lda $52,x			lda 	esInt0+2,x
.2fce	95 50		sta $50,x			sta 	esInt0,x
.2fd0	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32fromstr.asm

.0c18					fs32Length:
>0c18							.fill 	1
.2fd1					LinkInt32FromString:
.2fd1	aa		tax				tax
.2fd2	98		tya				tya
.2fd3	20 d8 2f	jsr $2fd8			jsr 	MInt32FromString
.2fd6	8a		txa				txa
.2fd7	60		rts				rts
.2fd8					MInt32FromString:
.2fd8	85 32		sta $32				sta 	tempShort 					; save base
.2fda	98		tya				tya
.2fdb	48		pha				pha
.2fdc	a0 00		ldy #$00			ldy 	#0 							; get length of string to convert
.2fde	b1 2a		lda ($2a),y			lda 	(temp0),y
.2fe0	8d 18 0c	sta $0c18			sta 	fs32Length
.2fe3	f0 65		beq $304a			beq 	_I32FSFail2					; fail if length zero.
.2fe5	a0 01		ldy #$01			ldy 	#1 							; set index into string being read
.2fe7	b1 2a		lda ($2a),y			lda 	(temp0),y 					; look at first character
.2fe9	c9 2d		cmp #$2d			cmp 	#"-"						; is it a - character
.2feb	d0 09		bne $2ff6			bne 	_I32FSNotNegative
.2fed	ad 18 0c	lda $0c18			lda 	fs32Length 					; get length back.
.2ff0	c9 01		cmp #$01			cmp 	#1 							; if 1 it is just a - on its own so fail.
.2ff2	f0 56		beq $304a			beq 	_I32FSFail2
.2ff4	a0 02		ldy #$02			ldy 	#2 							; first digit of the number.
.2ff6					_I32FSNotNegative:
.2ff6	a5 32		lda $32				lda 	tempShort 					; get the base back.
.2ff8	c0 02		cpy #$02			cpy 	#2 							; if we read a -ve (e.g. Y == 2)
.2ffa	d0 02		bne $2ffe			bne 	_I32FSNN2
.2ffc	09 80		ora #$80			ora 	#$80						; set bit 7, this indicates a negated result.
.2ffe					_I32FSNN2:
.2ffe	48		pha				pha 								; save base + final sign on stack.
.2fff	20 6a 31	jsr $316a			jsr 	MInt32False 				; zero the return value.
.3002					_I32FSMainLoop:
.3002	68		pla				pla 								; get the base back into tempShort
.3003	48		pha				pha
.3004	29 7f		and #$7f			and 	#$7F
.3006	85 32		sta $32				sta 	tempShort
.3008	b1 2a		lda ($2a),y			lda 	(temp0),y 					; look at next character.
.300a	c9 61		cmp #$61			cmp 	#"a" 						; fix up case.
.300c	90 02		bcc $3010			bcc 	_I32FSNotLC
.300e	e9 20		sbc #$20			sbc 	#32
.3010					_I32FSNotLC:
.3010	38		sec				sec 								; subtract 48 (ASCII "0") - ASCII to Hex conversion
.3011	e9 30		sbc #$30			sbc 	#"0"
.3013	90 34		bcc $3049			bcc 	_I32FSFail 					; nothing more to do.
.3015	c9 0a		cmp #$0a			cmp 	#9+1 						; if it is 0-9 validate vs base.
.3017	90 06		bcc $301f			bcc 	_I32FSValidate
.3019	c9 11		cmp #$11			cmp 	#17 						; is it between 58 and 64 ? if so bad.
.301b	90 2c		bcc $3049			bcc 	_I32FSFail
.301d	e9 07		sbc #$07			sbc 	#7 							; adjust into range so now character is 0->nnn
.301f					_I32FSValidate:
.301f	c5 32		cmp $32				cmp 	tempShort 					; compare against the base.
.3021	b0 26		bcs $3049			bcs 	_I32FSFail 					; sorry, too large for this base, so fail.
.3023	48		pha				pha 								; save the new digit value.
.3024	e8		inx				inx 								; put base into next slot up on stack
.3025	a5 32		lda $32				lda 	tempShort
.3027	20 79 31	jsr $3179			jsr 	MInt32Set8Bit
.302a	ca		dex				dex
.302b	20 82 30	jsr $3082			jsr 	MInt32Multiply 				; multiply current by the base
.302e	e8		inx				inx
.302f	68		pla				pla  								; put additive into next slot
.3030	20 79 31	jsr $3179			jsr 	MInt32Set8Bit
.3033	ca		dex				dex
.3034	20 4e 30	jsr $304e			jsr 	MInt32Add 					; and add it
.3037	c8		iny				iny 								; bump the character pointer
.3038	cc 18 0c	cpy $0c18			cpy 	fs32Length 					; until > length.
.303b	f0 c5		beq $3002			beq 	_I32FSMainLoop
.303d	90 c3		bcc $3002			bcc 	_I32FSMainLoop
.303f					_I32FSDone:
.303f	68		pla				pla 								; get base/final sign back
.3040	10 03		bpl $3045			bpl 	_I32FSNN3
.3042	20 24 31	jsr $3124			jsr 	MInt32Negate 				; negate the result.
.3045					_I32FSNN3:
.3045	68		pla				pla
.3046	a8		tay				tay
.3047	38		sec				sec
.3048	60		rts				rts
.3049					_I32FSFail:
.3049	68		pla				pla
.304a					_I32FSFail2:
.304a	68		pla				pla
.304b	a8		tay				tay
.304c	18		clc				clc
.304d	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32math.asm

.304e					MInt32Add:
.304e	18		clc				clc
.304f	b5 50		lda $50,x			lda 	esInt0,x
.3051	75 51		adc $51,x			adc 	esInt0+1,x
.3053	95 50		sta $50,x			sta 	esInt0,x
.3055	b5 58		lda $58,x			lda 	esInt1,x
.3057	75 59		adc $59,x			adc 	esInt1+1,x
.3059	95 58		sta $58,x			sta 	esInt1,x
.305b	b5 60		lda $60,x			lda 	esInt2,x
.305d	75 61		adc $61,x			adc 	esInt2+1,x
.305f	95 60		sta $60,x			sta 	esInt2,x
.3061	b5 68		lda $68,x			lda 	esInt3,x
.3063	75 69		adc $69,x			adc 	esInt3+1,x
.3065	95 68		sta $68,x			sta 	esInt3,x
.3067	60		rts				rts
.3068					MInt32Sub:
.3068	38		sec				sec
.3069	b5 50		lda $50,x			lda 	esInt0,x
.306b	f5 51		sbc $51,x			sbc 	esInt0+1,x
.306d	95 50		sta $50,x			sta 	esInt0,x
.306f	b5 58		lda $58,x			lda 	esInt1,x
.3071	f5 59		sbc $59,x			sbc 	esInt1+1,x
.3073	95 58		sta $58,x			sta 	esInt1,x
.3075	b5 60		lda $60,x			lda 	esInt2,x
.3077	f5 61		sbc $61,x			sbc 	esInt2+1,x
.3079	95 60		sta $60,x			sta 	esInt2,x
.307b	b5 68		lda $68,x			lda 	esInt3,x
.307d	f5 69		sbc $69,x			sbc 	esInt3+1,x
.307f	95 68		sta $68,x			sta 	esInt3,x
.3081	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32multiply.asm

.3082					MInt32Multiply:
.3082	e8		inx				inx 								; copy 2nd -> 3rd
.3083	20 a8 30	jsr $30a8			jsr 	MInt32CopyUp
.3086	ca		dex				dex
.3087	20 a8 30	jsr $30a8			jsr 	MInt32CopyUp 				; copy 1st -> 2nd
.308a	20 6a 31	jsr $316a			jsr 	MInt32False 				; zero 1st.
.308d					_I32Loop:
.308d	b5 52		lda $52,x			lda 	esInt0+2,x 					; get low bit of 3rd
.308f	29 01		and #$01			and 	#1
.3091	f0 03		beq $3096			beq 	_I32NoAdd 					; if set
.3093	20 4e 30	jsr $304e			jsr 	MInt32Add 					; add 2nd to 1st.
.3096					_I32NoAdd:
.3096	e8		inx				inx 								; shift 2nd left
.3097	20 7f 31	jsr $317f			jsr 	MInt32ShiftLeft
.309a	e8		inx				inx  								; shift 3rd right
.309b	20 88 31	jsr $3188			jsr 	MInt32ShiftRight
.309e	20 91 31	jsr $3191			jsr 	MInt32Zero 					; check if zero.
.30a1	08		php				php 								; save status bits
.30a2	ca		dex				dex 	 							; point back to 1st
.30a3	ca		dex				dex
.30a4	28		plp				plp 								; get status bits
.30a5	d0 e6		bne $308d			bne 	_I32Loop 					; if non-zero keep going.
.30a7	60		rts				rts
.30a8					MInt32CopyUp:
.30a8	b5 50		lda $50,x			lda 	esInt0,x
.30aa	95 51		sta $51,x			sta 	esInt0+1,x
.30ac	b5 58		lda $58,x			lda 	esInt1,x
.30ae	95 59		sta $59,x			sta 	esInt1+1,x
.30b0	b5 60		lda $60,x			lda 	esInt2,x
.30b2	95 61		sta $61,x			sta 	esInt2+1,x
.30b4	b5 68		lda $68,x			lda 	esInt3,x
.30b6	95 69		sta $69,x			sta 	esInt3+1,x
.30b8	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32tostr.asm

>0c19					MCharCount:	.fill 	1						; count of converted characters
.30b9					MLInt32ToString:
.30b9	aa		tax				tax									; module passes stack in A, base in Y
.30ba	98		tya				tya
.30bb	20 c0 30	jsr $30c0			jsr 	MInt32ToString
.30be	8a		txa				txa
.30bf	60		rts				rts
.30c0					MInt32ToString:
.30c0	48		pha				pha 								; save base
.30c1	85 32		sta $32				sta 	tempShort 					; save target base.
.30c3	a9 00		lda #$00			lda 	#0
.30c5	8d 19 0c	sta $0c19			sta 	MCharCount 					; clear character count to 0
.30c8	98		tya				tya
.30c9	48		pha				pha
.30ca	a5 32		lda $32				lda 	tempShort 					; check if we are signed conversion
.30cc	10 10		bpl $30de			bpl 	_I32TSUnsigned
.30ce	48		pha				pha 								; save base on stack.
.30cf	b5 68		lda $68,x			lda 	esInt3,x 					; is it actually negative
.30d1	10 08		bpl $30db			bpl 	_I32TSNoFlip
.30d3	a9 2d		lda #$2d			lda 	#"-" 						; write a '-' prefix out.
.30d5	20 11 31	jsr $3111			jsr 	MI32WriteCharacter
.30d8	20 24 31	jsr $3124			jsr 	MInt32Negate 				; negate the value, so now it's positive.
.30db					_I32TSNoFlip:
.30db	68		pla				pla 								; get the base back
.30dc	29 7f		and #$7f			and 	#$7F 						; clear the sign flag so it's just a base now.
.30de					_I32TSUnsigned:
.30de	20 ec 30	jsr $30ec			jsr 	MI32DivideWrite 			; recursive code to output string.
.30e1	a0 00		ldy #$00			ldy 	#0 							; write charcount to first character.
.30e3	ad 19 0c	lda $0c19			lda 	MCharCount
.30e6	91 2a		sta ($2a),y			sta 	(temp0),y
.30e8	68		pla				pla
.30e9	a8		tay				tay
.30ea	68		pla				pla
.30eb	60		rts				rts
.30ec					MI32DivideWrite:
.30ec	48		pha				pha 								; save the divisor/base
.30ed	e8		inx				inx 								; write in the dividing position.
.30ee	20 79 31	jsr $3179			jsr 	MInt32Set8Bit
.30f1	ca		dex				dex
.30f2	20 64 2f	jsr $2f64			jsr 	MInt32UDivide 				; divide number by base.
.30f5	68		pla				pla 								; get the base into Y
.30f6	a8		tay				tay
.30f7	b5 52		lda $52,x			lda 	esInt0+2,x 					; get the remainder and push on the stack.
.30f9	48		pha				pha
.30fa	20 91 31	jsr $3191			jsr 	MInt32Zero 					; is the result zero ?
.30fd	f0 04		beq $3103			beq 	_I32NoRecurse 				; if so, don't recurse.
.30ff	98		tya				tya 								; put base into A
.3100	20 ec 30	jsr $30ec			jsr 	MI32DivideWrite 				; and jsr the dividor recursively.
.3103					_I32NoRecurse:
.3103	68		pla				pla 								; get the remainder back
.3104	c9 0a		cmp #$0a			cmp 	#10  						; handle hexadecimals, now converting to ASCII
.3106	90 02		bcc $310a			bcc 	_I32NotHex
.3108	69 06		adc #$06			adc 	#7-1
.310a					_I32NotHex:
.310a	18		clc				clc 								; make it ASCII
.310b	69 30		adc #$30			adc 	#48
.310d	20 11 31	jsr $3111			jsr 	MI32WriteCharacter 			; write the character out
.3110	60		rts				rts 								; and exit.
.3111					MI32WriteCharacter:
.3111	ee 19 0c	inc $0c19			inc 	MCharCount 					; bump count (space for leading count)
.3114	ac 19 0c	ldy $0c19			ldy 	MCharCount 					; get position
.3117	91 2a		sta ($2a),y			sta 	(temp0),y 					; write out with trailing 0
.3119	c8		iny				iny
.311a	a9 00		lda #$00			lda 	#0
.311c	91 2a		sta ($2a),y			sta 	(temp0),y
.311e	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32unary.asm

>0c1a					MSeed32:	.fill 	4							; random number seed.
.311f					MInt32Absolute:
.311f	b5 68		lda $68,x			lda 	esInt3,x 					; use negate code if -ve.
.3121	30 01		bmi $3124			bmi 	MInt32Negate
.3123	60		rts				rts
.3124					MInt32Negate:
.3124	38		sec				sec 								; subtract from zero.
.3125	a9 00		lda #$00			lda 	#0
.3127	f5 50		sbc $50,x			sbc 	esInt0,x
.3129	95 50		sta $50,x			sta 	esInt0,x
.312b	a9 00		lda #$00			lda 	#0
.312d	f5 58		sbc $58,x			sbc 	esInt1,x
.312f	95 58		sta $58,x			sta 	esInt1,x
.3131	a9 00		lda #$00			lda 	#0
.3133	f5 60		sbc $60,x			sbc 	esInt2,x
.3135	95 60		sta $60,x			sta 	esInt2,x
.3137	a9 00		lda #$00			lda 	#0
.3139	f5 68		sbc $68,x			sbc 	esInt3,x
.313b	95 68		sta $68,x			sta 	esInt3,x
.313d	60		rts				rts
.313e					MInt32Not:
.313e	b5 50		lda $50,x			lda 	esInt0,x 					; one's complement all four.
.3140	49 ff		eor #$ff			eor 	#$FF
.3142	95 50		sta $50,x			sta 	esInt0,x
.3144	b5 58		lda $58,x			lda 	esInt1,x
.3146	49 ff		eor #$ff			eor 	#$FF
.3148	95 58		sta $58,x			sta 	esInt1,x
.314a	b5 60		lda $60,x			lda 	esInt2,x
.314c	49 ff		eor #$ff			eor 	#$FF
.314e	95 60		sta $60,x			sta 	esInt2,x
.3150	b5 68		lda $68,x			lda 	esInt3,x
.3152	49 ff		eor #$ff			eor 	#$FF
.3154	95 68		sta $68,x			sta 	esInt3,x
.3156	60		rts				rts
.3157					MInt32Sign:
.3157	b5 68		lda $68,x			lda 	esInt3,x					; look at MSB
.3159	30 0b		bmi $3166			bmi 	MInt32True 					; if set return -1 (true)
.315b	20 91 31	jsr $3191			jsr 	MInt32Zero 					; is it zero ?
.315e	f0 0a		beq $316a			beq 	MInt32False 				; if zero return 0 (false)
.3160	20 6a 31	jsr $316a			jsr 	MInt32False 				; > 0 return 1, by setting it to zero
.3163	f6 50		inc $50,x			inc 	esInt0,x  					; and bumping the LSB.
.3165	60		rts				rts
.3166					MInt32True:
.3166	a9 ff		lda #$ff			lda 	#$FF 						; set to $FFFFFFFF
.3168	d0 02		bne $316c			bne 	MInt32WriteAll
.316a					MInt32False:
.316a	a9 00		lda #$00			lda 	#0
.316c					MInt32WriteAll:
.316c	95 50		sta $50,x			sta 	esInt0,x
.316e					MInt32Write123:
.316e	95 58		sta $58,x			sta 	esInt1,x
.3170	95 60		sta $60,x			sta 	esInt2,x
.3172	95 68		sta $68,x			sta 	esInt3,x
.3174	a9 00		lda #$00			lda 	#$00						; and make it an integer
.3176	95 48		sta $48,x			sta 	esType,x
.3178	60		rts				rts
.3179					MInt32Set8Bit:
.3179	95 50		sta $50,x			sta 	esInt0,x 					; coopt above function to write
.317b	a9 00		lda #$00			lda 	#0 							; a value 0-255
.317d	f0 ef		beq $316e			beq		MInt32Write123
.317f					MInt32ShiftLeft:
.317f	16 50		asl $50,x			asl 	esInt0,x
.3181	36 58		rol $58,x			rol	 	esInt1,x
.3183	36 60		rol $60,x			rol	 	esInt2,x
.3185	36 68		rol $68,x			rol	 	esInt3,x
.3187	60		rts				rts
.3188					MInt32ShiftRight:
.3188	56 68		lsr $68,x			lsr 	esInt3,x
.318a	76 60		ror $60,x			ror 	esInt2,x
.318c	76 58		ror $58,x			ror 	esInt1,x
.318e	76 50		ror $50,x			ror 	esInt0,x
.3190	60		rts				rts
.3191					MInt32Zero:
.3191	b5 50		lda $50,x			lda 	esInt0,x
.3193	15 58		ora $58,x			ora 	esInt1,x
.3195	15 60		ora $60,x			ora 	esInt2,x
.3197	15 68		ora $68,x			ora 	esInt3,x
.3199	60		rts				rts
.319a					MInt32Random:
.319a	98		tya				tya
.319b	48		pha				pha
.319c	a0 07		ldy #$07			ldy 	#7 							; do it 7 times
.319e	ad 1a 0c	lda $0c1a			lda 	MSeed32+0 					; check the seed isn't zero
.31a1	d0 03		bne $31a6			bne 	_Random1
.31a3	a8		tay				tay 								; if so do it 256 times
.31a4	a9 aa		lda #$aa			lda		#$AA 						; and use this to seed the seed....
.31a6					_Random1:
.31a6	0a		asl a				asl 	a
.31a7	2e 1b 0c	rol $0c1b			rol 	MSeed32+1
.31aa	2e 1c 0c	rol $0c1c			rol 	MSeed32+2
.31ad	2e 1d 0c	rol $0c1d			rol 	MSeed32+3
.31b0	90 02		bcc $31b4			bcc 	_Random2
.31b2	49 c5		eor #$c5			eor 	#$C5
.31b4					_Random2:
.31b4	88		dey				dey
.31b5	d0 ef		bne $31a6			bne 	_Random1
.31b7	8d 1a 0c	sta $0c1a			sta 	MSeed32+0 					; copy the seed in.
.31ba	95 50		sta $50,x			sta 	esInt0,x
.31bc	ad 1b 0c	lda $0c1b			lda 	MSeed32+1
.31bf	95 58		sta $58,x			sta 	esInt1,x
.31c1	ad 1c 0c	lda $0c1c			lda 	MSeed32+2
.31c4	95 60		sta $60,x			sta 	esInt2,x
.31c6	ad 1d 0c	lda $0c1d			lda 	MSeed32+3
.31c9	95 68		sta $68,x			sta 	esInt3,x
.31cb	68		pla				pla
.31cc	a8		tay				tay
.31cd	a9 00		lda #$00			lda 	#0
.31cf	95 48		sta $48,x			sta 	esType,x
.31d1	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/utility/check.asm

.31d2					CheckToken:
.31d2	d1 28		cmp ($28),y			cmp 	(codePtr),y
.31d4	d0 02		bne $31d8			bne 	_CTError
.31d6	c8		iny				iny
.31d7	60		rts				rts
.31d8					_CTError:
.31d8	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.31da	20 e0 14	jsr $14e0		jsr	errorHandler
.31dd					CheckRightParen:
.31dd	b1 28		lda ($28),y			lda 	(codePtr),y
.31df	c8		iny				iny
.31e0	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.31e2	d0 01		bne $31e5			bne 	_CRPError
.31e4	60		rts				rts
.31e5					_CRPError:
.31e5	a2 09		ldx #$09			ldx 	#ErrorID_MissingRP
.31e7	20 e0 14	jsr $14e0		jsr	errorHandler
.31ea					CheckComma:
.31ea	b1 28		lda ($28),y			lda 	(codePtr),y
.31ec	c8		iny				iny
.31ed	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.31ef	d0 01		bne $31f2			bne 	_CCError
.31f1	60		rts				rts
.31f2					_CCError:
.31f2	a2 0a		ldx #$0a			ldx 	#ErrorID_MissingComma
.31f4	20 e0 14	jsr $14e0		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/utility/stack.asm

.0037					rsPointer:
>0037							.fill 	2							; to TOS, which is the current top-token.
.31f7					RSReset:
.31f7	a9 ff		lda #$ff			lda 	#(returnStack+retStackSize-1) & $FF
.31f9	85 37		sta $37				sta 	rsPointer
.31fb	a9 09		lda #$09			lda 	#(returnStack+retStackSize-1) >> 8
.31fd	85 38		sta $38				sta 	1+(rsPointer)
.31ff	a9 ff		lda #$ff			lda 	#$FF 						; put a duff marker on TOS, so nothing will pop
.3201	8d ff 09	sta $09ff			sta 	returnStack+retStackSize-1
.3204	60		rts				rts
.3205					RSClaim:
.3205	84 32		sty $32				sty 	tempShort 					; preserve Y
.3207	48		pha				pha 								; save marker on stack.
.3208	8a		txa				txa 								; get bytes required.
.3209	38		sec				sec
.320a	49 ff		eor #$ff			eor 	#$FF 						; add to rsPointer using 2's complement.
.320c	65 37		adc $37				adc 	rsPointer
.320e	85 37		sta $37				sta 	rsPointer
.3210	a5 38		lda $38				lda 	rsPointer+1
.3212	69 ff		adc #$ff			adc 	#$FF
.3214	85 38		sta $38				sta 	rsPointer+1
.3216	c9 08		cmp #$08			cmp 	#returnStack>>8 			; overflow. underflow actually :)
.3218	90 08		bcc $3222			bcc 	_RSCOverflow
.321a	68		pla				pla 								; get marker back
.321b	a0 00		ldy #$00			ldy 	#0 							; write marker out.
.321d	91 37		sta ($37),y			sta 	(rsPointer),y
.321f	a4 32		ldy $32				ldy 	tempShort 					; restore Y and exit
.3221	60		rts				rts
.3222					_RSCOverflow:
.3222	a2 16		ldx #$16			ldx 	#ErrorID_RetStack
.3224	20 e0 14	jsr $14e0		jsr	errorHandler
.3227					RSFree:
.3227	18		clc				clc
.3228	65 37		adc $37				adc 	rsPointer
.322a	85 37		sta $37				sta 	rsPointer
.322c	90 02		bcc $3230			bcc 	_RSFExit
.322e	e6 38		inc $38				inc 	rsPointer+1
.3230					_RSFExit:
.3230	60		rts				rts
.3231					RSSavePosition:
.3231	84 32		sty $32				sty 	tempShort 					; save Y position
.3233	a8		tay				tay 								; this is where we write it.
.3234	a5 28		lda $28				lda 	codePtr 					; write codePointer out
.3236	91 37		sta ($37),y			sta 	(rsPointer),y
.3238	c8		iny				iny
.3239	a5 29		lda $29				lda 	codePtr+1
.323b	91 37		sta ($37),y			sta 	(rsPointer),y
.323d	c8		iny				iny
.323e	a5 32		lda $32				lda 	tempShort 					; write the Y position out.
.3240	91 37		sta ($37),y			sta 	(rsPointer),y
.3242	a8		tay				tay 								; fix Y back again to original value
.3243	60		rts				rts
.3244					RSLoadPosition:
.3244	a8		tay				tay
.3245	b1 37		lda ($37),y			lda 	(rsPointer),y 				; read codePointer back
.3247	85 28		sta $28				sta 	codePtr
.3249	c8		iny				iny
.324a	b1 37		lda ($37),y			lda 	(rsPointer),y
.324c	85 29		sta $29				sta 	codePtr+1
.324e	c8		iny				iny
.324f	b1 37		lda ($37),y			lda 	(rsPointer),y 				; and the offset
.3251	a8		tay				tay 								; to Y
.3252	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/utility/warmstart.asm

.3253					WarmStart:
.3253	a2 02		ldx #$02		ldx	#2
.3255	20 cd 1b	jsr $1bcd		jsr	interactionHandler

;******  Return to file: main/main.asm

.3258					mainHandler:
.3258	7c 5b 32	jmp ($325b,x)			jmp 	(mainVectors,x)
.325b					mainVectors:
>325b	dd 31					.word CheckRightParen      ; index 0
>325d	d2 23					.word XCommandClear        ; index 2
>325f	f3 2a					.word LinkEvaluate         ; index 4
>3261	ff 2a					.word LinkEvaluateInteger  ; index 6
>3263	05 2b					.word LinkEvaluateSmallInt ; index 8
>3265	f9 2a					.word LinkEvaluateTerm     ; index 10
>3267	b9 30					.word MLInt32ToString      ; index 12
>3269	61 25					.word Command_XNew         ; index 14
>326b	6f 25					.word XCommand_Run         ; index 16
>326d	7b 25					.word Command_RunFrom      ; index 18
>326f	d1 2f					.word LinkInt32FromString  ; index 20

;******  Return to file: basic.asm

.3271					section_end_main:
.3271					section_start_string:

;******  Processing file: string/string.asm


;******  Processing file: string/functions/chr.asm

.3271					StringChrs:
.3271	aa		tax				tax 								; set up stack
.3272	a9 02		lda #$02			lda 	#2
.3274	20 34 33	jsr $3334			jsr 	AllocateSoftString
.3277	98		tya				tya
.3278	20 5a 33	jsr $335a			jsr 	WriteSoftString
.327b					StringUpdate:
.327b	20 89 32	jsr $3289			jsr 	ReturnSoftString
.327e	8a		txa				txa
.327f	60		rts				rts
.3280					StringNull:
.3280	aa		tax				tax
.3281	a9 01		lda #$01			lda 	#1
.3283	20 34 33	jsr $3334			jsr 	AllocateSoftString
.3286	4c 7b 32	jmp $327b			jmp 	StringUpdate
.3289					ReturnSoftString:
.3289	a5 39		lda $39				lda 	softMemAlloc 				; copy address
.328b	95 50		sta $50,x			sta 	esInt0,x
.328d	a5 3a		lda $3a				lda 	softMemAlloc+1
.328f	95 58		sta $58,x			sta 	esInt1,x
.3291	a9 00		lda #$00			lda 	#0 							; zero upper bytes
.3293	95 60		sta $60,x			sta 	esInt2,x
.3295	95 68		sta $68,x			sta 	esInt3,x
.3297	a9 40		lda #$40			lda 	#$40 						; type string.
.3299	95 48		sta $48,x			sta 	esType,x
.329b	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/functions/compare.asm

.329c					STRCompare:
.329c	48		pha				pha 								; save A
.329d	aa		tax				tax 								; put stack pos in X
.329e	98		tya				tya
.329f	48		pha				pha
.32a0	20 d4 32	jsr $32d4			jsr 	CopyStringPair 				; copy strings to temp0,temp1
.32a3	a0 00		ldy #$00			ldy 	#0 							; get the smaller of the two string sizes.
.32a5	b1 2a		lda ($2a),y			lda 	(temp0),y
.32a7	d1 2c		cmp ($2c),y			cmp 	(temp1),y
.32a9	90 02		bcc $32ad			bcc 	_SCNotSmaller
.32ab	b1 2c		lda ($2c),y			lda 	(temp1),y
.32ad					_SCNotSmaller:
.32ad	aa		tax				tax 								; put that in X. We compare this many chars first.
.32ae					_SCCompareLoop:
.32ae	e0 00		cpx #$00			cpx 	#0 							; if compared all the smaller, then it is the shorter
.32b0	f0 0c		beq $32be			beq 	_SCSameToEndShortest 		; one that is the smallest if they are different lengths.
.32b2	ca		dex				dex 								; decrement chars to compare.
.32b3	c8		iny				iny 								; move to next character
.32b4	38		sec				sec 								; calculate s1[y]-s2[y]
.32b5	b1 2a		lda ($2a),y			lda 	(temp0),y
.32b7	f1 2c		sbc ($2c),y			sbc 	(temp1),y
.32b9	d0 0a		bne $32c5			bne 	_SCReturnResult 			; if different return sign of A
.32bb	4c ae 32	jmp $32ae			jmp 	_SCCompareLoop
.32be					_SCSameToEndShortest
.32be	a0 00		ldy #$00			ldy 	#0 							; compare len(s1) - len(s2)
.32c0	38		sec				sec
.32c1	b1 2a		lda ($2a),y			lda 	(temp0),y
.32c3	f1 2c		sbc ($2c),y			sbc 	(temp1),y
.32c5					_SCReturnResult:
.32c5	08		php				php 								; set return to zero preserving PSW.
.32c6	a2 00		ldx #$00			ldx 	#0
.32c8	28		plp				plp
.32c9	f0 05		beq $32d0			beq 	_SCExit 					; two values equal, then exit
.32cb	ca		dex				dex 								; X = $FF
.32cc	90 02		bcc $32d0			bcc 	_SCExit 					; if 1st < 2nd then -1
.32ce	a2 01		ldx #$01			ldx 	#1 							; X = $01 if greater
.32d0					_SCExit:
.32d0	68		pla				pla
.32d1	a8		tay				tay
.32d2	68		pla				pla
.32d3	60		rts				rts
.32d4					CopyStringPair:
.32d4	b5 51		lda $51,x			lda 	esInt0+1,x
.32d6	85 2c		sta $2c				sta 	temp1
.32d8	b5 59		lda $59,x			lda 	esInt1+1,x
.32da	85 2d		sta $2d				sta 	temp1+1
.32dc					CopyStringTop:
.32dc	b5 50		lda $50,x			lda 	esInt0,x
.32de	85 2a		sta $2a				sta 	temp0
.32e0	b5 58		lda $58,x			lda 	esInt1,x
.32e2	85 2b		sta $2b				sta 	temp0+1
.32e4	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/functions/concat.asm

.32e5					StringConcat:
.32e5	aa		tax				tax									; stack pos in X
.32e6	98		tya				tya
.32e7	48		pha				pha
.32e8	20 d4 32	jsr $32d4			jsr 	CopyStringPair 				; temp0 and temp1 point to strings to concat.
.32eb	38		sec				sec 								; calculate alloc strings. lengths added + 1 for size.
.32ec	a0 00		ldy #$00			ldy 	#0
.32ee	b1 2a		lda ($2a),y			lda 	(temp0),y
.32f0	71 2c		adc ($2c),y			adc 	(temp1),y
.32f2	b0 1c		bcs $3310			bcs 	_SCError 					; just too many characters here.
.32f4	c9 fc		cmp #$fc			cmp 	#MaxStringSize
.32f6	b0 18		bcs $3310			bcs 	_SCError
.32f8	20 34 33	jsr $3334			jsr 	AllocateSoftString 			; allocate soft string memory, set pointer.
.32fb	20 2b 33	jsr $332b			jsr 	CopySoftToStack 			; copy that to the stack.
.32fe	20 15 33	jsr $3315			jsr 	SCCopyTemp0 				; copy temp0
.3301	a5 2c		lda $2c				lda 	temp1 						; copy temp1 to temp0
.3303	85 2a		sta $2a				sta 	temp0
.3305	a5 2d		lda $2d				lda 	temp1+1
.3307	85 2b		sta $2b				sta 	temp0+1
.3309	20 15 33	jsr $3315			jsr 	SCCopyTemp0 				; copy temp0 e.g. what was temp1.
.330c	68		pla				pla
.330d	a8		tay				tay
.330e	8a		txa				txa 								; and A
.330f	60		rts				rts
.3310					_SCError:
.3310	a2 0d		ldx #$0d			ldx 	#ErrorID_StrLen
.3312	20 e0 14	jsr $14e0		jsr	errorHandler
.3315					SCCopyTemp0:
.3315	a0 00		ldy #$00			ldy 	#0 							; put count in temp2
.3317	b1 2a		lda ($2a),y			lda 	(temp0),y
.3319	85 2e		sta $2e				sta 	temp2
.331b					_SCCopyLoop:
.331b	a5 2e		lda $2e				lda 	temp2 						; done the lot
.331d	f0 0b		beq $332a			beq 	_SCCopyExit
.331f	c6 2e		dec $2e				dec 	temp2
.3321	c8		iny				iny 								; get next char
.3322	b1 2a		lda ($2a),y			lda 	(temp0),y
.3324	20 5a 33	jsr $335a			jsr 	WriteSoftString 			; write to soft string.
.3327	4c 1b 33	jmp $331b			jmp 	_SCCopyLoop
.332a					_SCCopyExit:
.332a	60		rts				rts
.332b					CopySoftToStack:
.332b	a5 39		lda $39				lda 	SoftMemAlloc 				; copy the memory allocation pointer to the stack.
.332d	95 50		sta $50,x			sta 	esInt0,x 					; type is already string.
.332f	a5 3a		lda $3a				lda 	SoftMemAlloc+1
.3331	95 58		sta $58,x			sta 	esInt1,x
.3333	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/functions/memory.asm

.0039					softMemAlloc:
>0039							.fill 	2  							; if MSB is zero needs resetting on allocation.
.3334					AllocateSoftString:
.3334	85 32		sta $32				sta 	tempShort 					; save count
.3336	98		tya				tya
.3337	48		pha				pha
.3338	a5 3a		lda $3a				lda 	softMemAlloc+1 				; if the high byte is zero, it needs allocating.
.333a	d0 09		bne $3345			bne 	_ASSDone
.333c	a5 33		lda $33				lda 	highMemory 					; reset the soft memory alloc pointer.
.333e	85 39		sta $39				sta 	softMemAlloc 				; to speed up slightly, we only reset this when we first need it
.3340	a4 34		ldy $34				ldy 	highMemory+1 				; but it needs to be reset before each command.
.3342	88		dey				dey 								; it is set to 1/4k below high memory, allowing space
.3343	84 3a		sty $3a				sty 	softMemAlloc+1 				; for a concreted string.
.3345					_ASSDone:
.3345	38		sec				sec 								; allocate downwards enough memory
.3346	a5 39		lda $39				lda 	softMemAlloc 				; subtract the memory requirements in A from
.3348	e5 32		sbc $32				sbc 	tempShort 					; the soft memory pointer
.334a	85 39		sta $39				sta 	softMemAlloc
.334c	a5 3a		lda $3a				lda 	softMemAlloc+1
.334e	e9 00		sbc #$00			sbc 	#0
.3350	85 3a		sta $3a				sta 	softMemAlloc+1
.3352	a9 00		lda #$00			lda 	#0 							; empty that string, set the length = 0.
.3354	a8		tay				tay
.3355	91 39		sta ($39),y			sta 	(softMemAlloc),y
.3357	68		pla				pla
.3358	a8		tay				tay
.3359	60		rts				rts
.335a					WriteSoftString:
.335a	84 32		sty $32				sty 	tempShort 					; save Y
.335c	48		pha				pha 								; save character on stack
.335d	a0 00		ldy #$00			ldy 	#0 							; get and bump length
.335f	b1 39		lda ($39),y			lda 	(softMemAlloc),y
.3361	18		clc				clc
.3362	69 01		adc #$01			adc 	#1
.3364	91 39		sta ($39),y			sta 	(softMemAlloc),y
.3366	a8		tay				tay 								; offset in Y
.3367	68		pla				pla 								; get char and write.
.3368	91 39		sta ($39),y			sta 	(softMemAlloc),y
.336a	a4 32		ldy $32				ldy 	tempShort 					; restore Y and exit.
.336c	60		rts				rts
.336d					StrClone:
.336d	aa		tax				tax 								; set up stack.
.336e	98		tya				tya
.336f	48		pha				pha
.3370	a0 00		ldy #$00			ldy 	#0 							; get length, add 1 for length
.3372	b1 2a		lda ($2a),y			lda 	(temp0),y 					; this is the bytes required.
.3374	18		clc				clc
.3375	69 01		adc #$01			adc 	#1
.3377	20 34 33	jsr $3334			jsr 	AllocateSoftString 			; allocate soft memory
.337a	a5 39		lda $39				lda 	softMemAlloc 				; copy that address to TOS
.337c	95 50		sta $50,x			sta 	esInt0,x
.337e	a5 3a		lda $3a				lda 	softMemAlloc+1
.3380	95 58		sta $58,x			sta 	esInt1,x
.3382	a9 00		lda #$00			lda 	#0 							; zero upper 2 bytes
.3384	95 60		sta $60,x			sta 	esInt2,x
.3386	95 68		sta $68,x			sta 	esInt3,x
.3388	a9 40		lda #$40			lda 	#$40 						; set type to string.
.338a	95 48		sta $48,x			sta 	esType,x
.338c	20 15 33	jsr $3315			jsr 	SCCopyTemp0 				; copy temp0 string to soft memory copy (concat.asm)
.338f	68		pla				pla
.3390	a8		tay				tay
.3391	8a		txa				txa
.3392	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/functions/setcase.asm

.3393					CaseString:
.3393	48		pha				pha 								; save A and copy to X
.3394	aa		tax				tax
.3395	98		tya				tya
.3396	48		pha				pha
.3397	20 dc 32	jsr $32dc			jsr 	CopyStringTop 				; target string -> temp0
.339a	a0 00		ldy #$00			ldy 	#0
.339c	b1 2a		lda ($2a),y			lda 	(temp0),y  					; get length,
.339e	18		clc				clc
.339f	69 01		adc #$01			adc 	#1 							; one more for length byte
.33a1	20 34 33	jsr $3334			jsr 	AllocateSoftString 			; allocate soft string memory, set pointer.
.33a4	20 2b 33	jsr $332b			jsr 	CopySoftToStack 			; copy that to the stack.
.33a7	a0 00		ldy #$00			ldy 	#0
.33a9	b1 2a		lda ($2a),y			lda 	(temp0),y 					; count to copy in X
.33ab	aa		tax				tax
.33ac					_CSCopy:
.33ac	e0 00		cpx #$00			cpx 	#0 							; finished if 0.
.33ae	f0 24		beq $33d4			beq 	_CSExit
.33b0	ca		dex				dex
.33b1	c8		iny				iny
.33b2	68		pla				pla 								; check direction
.33b3	48		pha				pha
.33b4	f0 0c		beq $33c2			beq 	_CSUpper
.33b6	b1 2a		lda ($2a),y			lda 	(temp0),y 					; lower$() code
.33b8	c9 41		cmp #$41			cmp 	#"A"
.33ba	90 12		bcc $33ce			bcc 	_CSWrite
.33bc	c9 5b		cmp #$5b			cmp 	#"Z"+1
.33be	b0 0e		bcs $33ce			bcs 	_CSWrite
.33c0	90 0a		bcc $33cc			bcc 	_CSFlipWrite
.33c2					_CSUpper:
.33c2	b1 2a		lda ($2a),y			lda 	(temp0),y 					; upper$() code
.33c4	c9 61		cmp #$61			cmp 	#"a"
.33c6	90 06		bcc $33ce			bcc 	_CSWrite
.33c8	c9 7b		cmp #$7b			cmp 	#"z"+1
.33ca	b0 02		bcs $33ce			bcs 	_CSWrite
.33cc					_CSFlipWrite:
.33cc	49 20		eor #$20			eor 	#"A"^"a" 					; switch case.
.33ce					_CSWrite:
.33ce	20 5a 33	jsr $335a			jsr 	WriteSoftString 			; add to soft string.
.33d1	4c ac 33	jmp $33ac			jmp 	_CSCopy
.33d4					_CSExit:
.33d4	68		pla				pla
.33d5	a8		tay				tay
.33d6	68		pla				pla
.33d7	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/functions/substring.asm

.33d8					StringSubstring:
.33d8	48		pha				pha
.33d9	aa		tax				tax 								; access stack.
.33da	98		tya				tya
.33db	48		pha				pha
.33dc	20 dc 32	jsr $32dc			jsr 	CopyStringTop 				; point temp0 to the string.
.33df	a0 00		ldy #$00			ldy 	#0 							; get length.
.33e1	b1 2a		lda ($2a),y			lda 	(temp0),Y
.33e3	85 2c		sta $2c				sta 	temp1
.33e5	b5 51		lda $51,x			lda 	esInt0+1,x 					; get the initial offset
.33e7	c5 2c		cmp $2c				cmp 	temp1 						; return "" if > length.
.33e9	f0 02		beq $33ed			beq 	_SSBOkay
.33eb	b0 2a		bcs $3417			bcs 	_SSBReturnNull
.33ed					_SSBOkay:
.33ed	a5 2c		lda $2c				lda 	temp1 						; get the total length +1
.33ef	18		clc				clc
.33f0	69 01		adc #$01			adc 	#1
.33f2	38		sec				sec
.33f3	f5 51		sbc $51,x			sbc 	esInt0+1,x 					; the anything >= this is bad - max size
.33f5	d5 52		cmp $52,x			cmp 	esInt0+2,x  				; check bad >= required
.33f7	90 02		bcc $33fb			bcc		_SSBTrunc
.33f9	b5 52		lda $52,x			lda 	esInt0+2,x
.33fb					_SSBTrunc:
.33fb	85 2d		sta $2d				sta 	temp1+1 					; characters to copy.
.33fd	18		clc				clc
.33fe	69 01		adc #$01			adc 	#1 							; add 1
.3400	20 34 33	jsr $3334			jsr 	AllocateSoftString 			; allocate soft string memory, set pointer.
.3403	20 2b 33	jsr $332b			jsr 	CopySoftToStack 			; copy that to the stack.
.3406	b4 51		ldy $51,x			ldy 	esInt0+1,x 					; get initial position of char to copy
.3408					_SSBCopyLoop:
.3408	a5 2d		lda $2d				lda 	temp1+1 					; done them all
.340a	f0 0e		beq $341a			beq 	_SSBExit
.340c	c6 2d		dec $2d				dec 	temp1+1
.340e	b1 2a		lda ($2a),y			lda 	(temp0),y 					; get and write character
.3410	20 5a 33	jsr $335a			jsr 	WriteSoftString
.3413	c8		iny				iny
.3414	4c 08 34	jmp $3408			jmp 	_SSBCopyLoop
.3417					_SSBReturnNull:
.3417	20 1e 34	jsr $341e			jsr 	ReturnNull
.341a					_SSBExit:
.341a	68		pla				pla
.341b	a8		tay				tay
.341c	68		pla				pla
.341d	60		rts				rts
.341e					ReturnNull:
.341e	a9 00		lda #$00			lda 	#0 							; clear null string
.3420	8d ce 0a	sta $0ace			sta 	NullString
.3423	a9 ce		lda #$ce			lda 	#NullString & $FF 			; set a pointer to it
.3425	95 50		sta $50,x			sta 	esInt0,x
.3427	a9 0a		lda #$0a			lda 	#NullString >> 8
.3429	95 58		sta $58,x			sta 	esInt1,x
.342b	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/functions/write.asm

.0c1e					srcStrLen:
>0c1e							.fill 	1
.342c					StringWrite:
.342c	aa		tax				tax
.342d	48		pha				pha
.342e	98		tya				tya
.342f	48		pha				pha
.3430	20 57 34	jsr $3457			jsr 	CheckOverwriteCurrent
.3433	b0 0d		bcs $3442			bcs		_SWCopyCurrent
.3435	20 95 34	jsr $3495			jsr 	RequiresConcretion
.3438	90 0e		bcc $3448			bcc 	_SWWriteReference
.343a	20 f8 34	jsr $34f8			jsr 	CheckSpecialConcretion
.343d	b0 09		bcs $3448			bcs 	_SWWriteReference
.343f	20 a9 34	jsr $34a9			jsr 	AllocateHardMemory
.3442					_SWCopyCurrent:
.3442	20 dc 34	jsr $34dc			jsr 	CopyStringToHardMemory
.3445	4c 53 34	jmp $3453			jmp 	_SWExit
.3448					_SWWriteReference
.3448	a0 00		ldy #$00			ldy 	#0
.344a	a5 2a		lda $2a				lda 	temp0
.344c	91 2c		sta ($2c),y			sta 	(temp1),y
.344e	c8		iny				iny
.344f	a5 2b		lda $2b				lda 	temp0+1
.3451	91 2c		sta ($2c),y			sta 	(temp1),y
.3453					_SWExit:
.3453	68		pla				pla
.3454	a8		tay				tay
.3455	68		pla				pla
.3456	60		rts				rts
.3457					CheckOverwriteCurrent:
.3457	a0 00		ldy #$00			ldy 	#0 						; get address of string being written to temp0
.3459	b5 59		lda $59,x			lda 	esInt1+1,x
.345b	85 2b		sta $2b				sta 	temp0+1
.345d	b5 51		lda $51,x			lda 	esInt0+1,x
.345f	85 2a		sta $2a				sta 	temp0
.3461	b1 2a		lda ($2a),y			lda 	(temp0),y 				; get length of string being copied and save it.
.3463	8d 1e 0c	sta $0c1e			sta 	srcStrLen
.3466	b5 50		lda $50,x			lda 	esInt0,x 				; copy where the final address it being written to temp1.
.3468	85 2c		sta $2c				sta 	temp1 					; e.g. if it is ax$ then temp1 will point to the ax$
.346a	b5 58		lda $58,x			lda 	esInt1,x 				; data record + 5
.346c	85 2d		sta $2d				sta 	temp1+1
.346e	a0 01		ldy #$01			ldy 	#1 						; get the MSB of the address of string currently stored there.
.3470	b1 2c		lda ($2c),y			lda 	(temp1),y
.3472	c5 34		cmp $34				cmp 	highMemory+1 			; if < high memory then it cannot be something stored
.3474	90 1b		bcc $3491			bcc 	_COCFail 				; in hard memory.
.3476	a0 00		ldy #$00			ldy 	#0 						; copy target address - 1 into temp2
.3478	b1 2c		lda ($2c),y			lda 	(temp1),y 				; when allocating hard memory, the overall size is
.347a	e9 01		sbc #$01			sbc 	#1 						; in the previous byte.
.347c	85 2e		sta $2e				sta 	temp2
.347e	c8		iny				iny
.347f	b1 2c		lda ($2c),y			lda 	(temp1),y
.3481	e9 00		sbc #$00			sbc 	#0
.3483	85 2f		sta $2f				sta 	temp2+1
.3485	a0 00		ldy #$00			ldy 	#0 						; how large is this physical chunk.
.3487	b1 2e		lda ($2e),y			lda 	(temp2),y
.3489	38		sec				sec  							; maximum character capacity.
.348a	e9 02		sbc #$02			sbc 	#2
.348c	cd 1e 0c	cmp $0c1e			cmp 	srcStrLen 				; if >= the required length
.348f	b0 02		bcs $3493			bcs 	_COCCanReuse
.3491					_COCFail:
.3491	18		clc				clc
.3492	60		rts				rts
.3493					_COCCanReuse:
.3493	38		sec				sec
.3494	60		rts				rts
.3495					RequiresConcretion:
.3495	a5 2b		lda $2b				lda 	temp0+1 				; get MSB of address of string to be written
.3497	c5 34		cmp $34				cmp 	highMemory+1 			; if >= high memory it is concreted
.3499	b0 0a		bcs $34a5			bcs 	_RCSucceed 				; so it needs concreting again - duplication.
.349b	a5 3a		lda $3a				lda 	softMemAlloc+1 			; have we allocated any soft memory yet ?
.349d	f0 08		beq $34a7			beq 	_RCFail 				; if not, this cannot be soft memory.
.349f	a5 2b		lda $2b				lda 	temp0+1 				; get MSB of address of string to be written
.34a1	c5 3a		cmp $3a				cmp 	softMemAlloc+1 			; if >= soft mem alloc it is either soft
.34a3	90 02		bcc $34a7			bcc 	_RCFail 				; so concreting
.34a5					_RCSucceed:
.34a5	38		sec				sec
.34a6	60		rts				rts
.34a7					_RCFail:
.34a7	18		clc				clc
.34a8	60		rts				rts
.34a9					AllocateHardMemory:
.34a9	98		tya				tya
.34aa	48		pha				pha
.34ab	ad 1e 0c	lda $0c1e			lda 	srcStrLen 				; characters in string
.34ae	69 0a		adc #$0a			adc 	#1+1+8 					; one for hard memory size, one for string size, extra for expansion
.34b0	b0 04		bcs $34b6			bcs 	_AHMSetMax 				; max out that amount.
.34b2	c9 fe		cmp #$fe			cmp 	#MaxStringSize+2
.34b4	90 02		bcc $34b8			bcc 	_AHMIsOkay
.34b6					_AHMSetMax:
.34b6	a9 fe		lda #$fe			lda 	#MaxStringSize+2
.34b8					_AHMIsOkay:
.34b8	48		pha				pha	 							; save size to be allocated
.34b9	49 ff		eor #$ff			eor 	#$FF 					; complement and add to high Memory
.34bb	38		sec				sec  							; and copy result to TOS as target address.
.34bc	65 33		adc $33				adc 	highMemory
.34be	85 33		sta $33				sta 	highMemory
.34c0	a5 34		lda $34				lda 	highMemory+1
.34c2	69 ff		adc #$ff			adc 	#$FF
.34c4	85 34		sta $34				sta 	highMemory+1
.34c6	a0 00		ldy #$00			ldy 	#0 						; Y = 0
.34c8	68		pla				pla 							; get the total size of the storage block
.34c9	91 33		sta ($33),y			sta 	(highMemory),y 			; and set it
.34cb	18		clc				clc
.34cc	a5 33		lda $33				lda		highMemory 				; point the target address to the byte after this.
.34ce	69 01		adc #$01			adc 	#1
.34d0	91 2c		sta ($2c),y			sta 	(temp1),y
.34d2	a5 34		lda $34				lda 	highMemory+1
.34d4	69 00		adc #$00			adc 	#0
.34d6	c8		iny				iny
.34d7	91 2c		sta ($2c),y			sta 	(temp1),y
.34d9	68		pla				pla
.34da	a8		tay				tay
.34db	60		rts				rts
.34dc					CopyStringToHardMemory:
.34dc	98		tya				tya
.34dd	48		pha				pha
.34de	a0 00		ldy #$00			ldy 	#0 						; copy target address to temp2
.34e0	b1 2c		lda ($2c),y			lda 	(temp1),y
.34e2	85 2e		sta $2e				sta 	temp2
.34e4	c8		iny				iny
.34e5	b1 2c		lda ($2c),y			lda 	(temp1),y
.34e7	85 2f		sta $2f				sta 	temp2+1
.34e9	ac 1e 0c	ldy $0c1e			ldy 	srcStrLen 				; copy this + 1 characters, (length too) hence $FF compare
.34ec					_CSTHMLoop:
.34ec	b1 2a		lda ($2a),y			lda 	(temp0),y
.34ee	91 2e		sta ($2e),y			sta 	(temp2),y
.34f0	88		dey				dey
.34f1	c0 ff		cpy #$ff			cpy 	#$FF 					; this does the +1
.34f3	d0 f7		bne $34ec			bne 	_CSTHMLoop
.34f5	68		pla				pla
.34f6	a8		tay				tay
.34f7	60		rts				rts
.34f8					CheckSpecialConcretion:
.34f8	ad 1e 0c	lda $0c1e			lda 	srcStrLen 				; check string is null e.g. length = 0
.34fb	f0 02		beq $34ff			beq 	_CSCNullString
.34fd	18		clc				clc
.34fe	60		rts				rts
.34ff					_CSCNullString:
.34ff	a9 00		lda #$00			lda 	#0 						; by always returning this address we don't waste
.3501	8d ce 0a	sta $0ace			sta 	NullString		 		; storage on null strings.
.3504	a9 ce		lda #$ce			lda 	#(NullString) & $FF
.3506	85 2a		sta $2a				sta 	temp0
.3508	a9 0a		lda #$0a			lda 	#(NullString) >> 8
.350a	85 2b		sta $2b				sta 	1+(temp0)
.350c	38		sec				sec
.350d	60		rts				rts

;******  Return to file: string/string.asm

.350e					stringHandler:
.350e	7c 11 35	jmp ($3511,x)			jmp 	(stringVectors,x)
.3511					stringVectors:
>3511	71 32					.word StringChrs           ; index 0
>3513	6d 33					.word StrClone             ; index 2
>3515	e5 32					.word StringConcat         ; index 4
>3517	80 32					.word StringNull           ; index 6
>3519	9c 32					.word STRCompare           ; index 8
>351b	93 33					.word CaseString           ; index 10
>351d	d8 33					.word StringSubstring      ; index 12
>351f	2c 34					.word StringWrite          ; index 14

;******  Return to file: basic.asm

.3521					section_end_string:
.3521					section_start_tokeniser:

;******  Processing file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/detokenise/detokenise.asm

.0c1f					deTokeniseVector:
>0c1f							.fill 	2
.0c21					lastCharacterClass:
>0c21							.fill 	1
.0c22					indent:
>0c22							.fill 	1
.3521					ListLine:
.3521	48		pha				pha								; enter here to list to console. sets the output vector
.3522	a9 56		lda #$56			lda 	#(deTokenPrint) & $FF
.3524	8d 1f 0c	sta $0c1f			sta 	deTokeniseVector
.3527	a9 36		lda #$36			lda 	#(deTokenPrint) >> 8
.3529	8d 20 0c	sta $0c20			sta 	1+(deTokeniseVector)
.352c	68		pla				pla
.352d					Detokenise:
.352d	18		clc				clc 							; space required for line number.
.352e	69 06		adc #$06			adc 	#6
.3530	8d 22 0c	sta $0c22			sta 	indent
.3533	a9 ff		lda #$ff			lda 	#$FF 					; last thing printed is a dummy value.
.3535	8d 21 0c	sta $0c21			sta 	lastCharacterClass
.3538	a2 02		ldx #$02			ldx 	#2
.353a	20 6a 31	jsr $316a			jsr 	MInt32False
.353d	a0 01		ldy #$01			ldy 	#1 						; copy line number to stack,2 (as using stack 0,1 for list range)
.353f	b1 28		lda ($28),y			lda 	(codePtr),y
.3541	95 50		sta $50,x			sta 	esInt0,x
.3543	c8		iny				iny
.3544	b1 28		lda ($28),y			lda 	(codePtr),y
.3546	95 58		sta $58,x			sta 	esInt1,x
.3548	a9 84		lda #$84			lda 	#LTYLineNumber
.354a	20 31 36	jsr $3631			jsr 	ListOutputCharacter
.354d	a9 0a		lda #$0a			lda 	#10 					; base 10
.354f	20 f5 35	jsr $35f5			jsr 	DTPrintInteger 			; print as integer.
.3552	a0 00		ldy #$00			ldy 	#0 						; get length
.3554	b1 2a		lda ($2a),y			lda 	(temp0),y 				; into X
.3556	aa		tax				tax
.3557					_DTPadOut:
.3557	a9 20		lda #$20			lda 	#" " 					; pad out to indent.
.3559	20 31 36	jsr $3631			jsr 	ListOutputCharacter
.355c	e8		inx				inx
.355d	ec 22 0c	cpx $0c22			cpx 	indent
.3560	d0 f5		bne $3557			bne 	_DTPadOut
.3562	a0 03		ldy #$03			ldy 	#3 						; start position.
.3564					_DTListLoop
.3564	b1 28		lda ($28),y			lda 	(codePtr),y
.3566	c9 85		cmp #$85			cmp 	#TOK_STR 				; Inline string.
.3568	f0 5e		beq $35c8			beq 	_DTIsString
.356a	c9 84		cmp #$84			cmp 	#TOK_FPC 				; Floating point
.356c	f0 56		beq $35c4			beq 	_DTIsFloat
.356e	c9 c5		cmp #$c5			cmp 	#TKW_AMP 				; & hex marker
.3570	f0 16		beq $3588			beq 	_DTHexConstant
.3572	c9 80		cmp #$80			cmp 	#TOK_EOL 				; End of Line
.3574	d0 06		bne $357c			bne 	_DTNotEnd
.3576	a9 ff		lda #$ff			lda 	#255 					; print CR
.3578	20 31 36	jsr $3631			jsr 	ListOutputCharacter
.357b	60		rts				rts
.357c					_DTNotEnd:
.357c	c9 00		cmp #$00			cmp 	#0
.357e	30 38		bmi $35b8			bmi 	_DTIsToken
.3580	c9 40		cmp #$40			cmp 	#$40
.3582	90 3a		bcc $35be			bcc 	_DTIsIdentifier
.3584	a9 0a		lda #$0a			lda 	#10 					; this is the base, unsigned decimal
.3586	d0 0d		bne $3595			bne 	_DTConstant
.3588					_DTHexConstant:
.3588	a9 26		lda #$26			lda 	#"&"
.358a	20 31 36	jsr $3631			jsr 	ListOutputCharacter
.358d	c8		iny				iny
.358e	a9 01		lda #$01			lda 	#1 						; switch to spaces so &xxxx is treated like a number.
.3590	20 72 36	jsr $3672			jsr 	DTSwitchMode
.3593	a9 10		lda #$10			lda 	#16						; print line unsigned hex
.3595					_DTConstant:
.3595	48		pha				pha
.3596	a9 00		lda #$00			lda 	#0 						; now constant, may need spaces
.3598	20 72 36	jsr $3672			jsr 	DTSwitchMode
.359b	a9 86		lda #$86			lda 	#LTYConstant
.359d	20 31 36	jsr $3631			jsr 	ListOutputCharacter
.35a0	a2 02		ldx #$02			ldx 	#2 						; get its value
.35a2	8a		txa				txa
.35a3	a2 0a		ldx #$0a		ldx	#10
.35a5	20 58 32	jsr $3258		jsr	mainHandler
.35a8	aa		tax				tax
.35a9	68		pla				pla 							; get base back
.35aa	85 32		sta $32				sta 	tempShort
.35ac	98		tya				tya
.35ad	48		pha				pha
.35ae	a5 32		lda $32				lda 	tempShort 				; print in base A stck level X
.35b0	20 f5 35	jsr $35f5			jsr 	DTPrintInteger
.35b3	68		pla				pla
.35b4	a8		tay				tay
.35b5	4c 64 35	jmp $3564			jmp 	_DTListLoop
.35b8					_DTIsToken:
.35b8	20 cb 36	jsr $36cb			jsr 	DTDecodeToken
.35bb	4c 64 35	jmp $3564			jmp 	_DTListLoop
.35be					_DTIsIdentifier:
.35be	20 84 36	jsr $3684			jsr 	DTIdentifier
.35c1	4c 64 35	jmp $3564			jmp 	_DTListLoop
.35c4					_DTIsFloat:
>35c4	db						.byte 	$DB
.35c5	4c c4 35	jmp $35c4			jmp 	_DTIsFloat
.35c8					_DTIsString:
.35c8	a9 01		lda #$01			lda 	#1 							; now punctuation, may need spaces
.35ca	20 72 36	jsr $3672			jsr 	DTSwitchMode
.35cd	a9 81		lda #$81			lda 	#LTYString
.35cf	20 31 36	jsr $3631			jsr 	ListOutputCharacter
.35d2	a9 22		lda #$22			lda 	#'"'						; open quote
.35d4	20 31 36	jsr $3631			jsr 	ListOutputCharacter
.35d7	a2 02		ldx #$02			ldx 	#2 							; evaluate string to TOS2.
.35d9	8a		txa				txa
.35da	a2 0a		ldx #$0a		ldx	#10
.35dc	20 58 32	jsr $3258		jsr	mainHandler
.35df	aa		tax				tax
.35e0	b5 50		lda $50,x			lda 	esInt0,x 					; copy string address to temp0
.35e2	85 2a		sta $2a				sta 	temp0
.35e4	b5 58		lda $58,x			lda 	esInt1,x
.35e6	85 2b		sta $2b				sta 	temp0+1
.35e8	a9 00		lda #$00			lda 	#0 							; don't capitalise.
.35ea	20 07 36	jsr $3607			jsr 	DTPrintLengthPrefix
.35ed	a9 22		lda #$22			lda 	#'"'
.35ef	20 31 36	jsr $3631			jsr 	ListOutputCharacter
.35f2	4c 64 35	jmp $3564			jmp 	_DTListLoop

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/detokenise/dtprint.asm

.0c23					tPrintCount:
>0c23							.fill 	1
.35f5					DTPrintInteger:
.35f5	48		pha				pha									; save base
.35f6	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.35f8	85 2a		sta $2a				sta 	temp0
.35fa	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.35fc	85 2b		sta $2b				sta 	1+(temp0)
.35fe	68		pla				pla
.35ff	a8		tay				tay
.3600	8a		txa				txa
.3601	a2 0c		ldx #$0c		ldx	#12
.3603	20 58 32	jsr $3258		jsr	mainHandler
.3606	aa		tax				tax 								; then drop through here.
.3607					DTPrintLengthPrefix:
.3607	aa		tax				tax 								; A = 0 = don't case convert.
.3608	98		tya				tya
.3609	48		pha				pha
.360a	a0 00		ldy #$00			ldy 	#0 							; get string length = chars to print.
.360c	b1 2a		lda ($2a),y			lda 	(temp0),y
.360e	8d 23 0c	sta $0c23			sta 	tPrintCount
.3611	f0 1b		beq $362e			beq 	_DTPLPExit 					; empty string
.3613					_DTPLPLoop:
.3613	c8		iny				iny 								; get next.
.3614	b1 2a		lda ($2a),y			lda 	(temp0),y
.3616	29 7f		and #$7f			and 	#$7F
.3618	e0 00		cpx #$00			cpx 	#0 							; skip if not case converting
.361a	f0 0a		beq $3626			beq 	_DTPLPNoCase
.361c	c9 41		cmp #$41			cmp 	#"A" 						; if converting UC -> LC
.361e	90 06		bcc $3626			bcc 	_DTPLPNoCase
.3620	c9 5b		cmp #$5b			cmp 	#"Z"+1
.3622	b0 02		bcs $3626			bcs 	_DTPLPNoCase
.3624	49 20		eor #$20			eor 	#"A"^"a"
.3626					_DTPLPNoCase
.3626	20 31 36	jsr $3631			jsr 	ListOutputCharacter 		; call handler
.3629	ce 23 0c	dec $0c23			dec 	tPrintCount 				; do all the characters
.362c	d0 e5		bne $3613			bne 	_DTPLPLoop
.362e					_DTPLPExit:
.362e	68		pla				pla
.362f	a8		tay				tay
.3630	60		rts				rts
.3631					ListOutputCharacter:
.3631	85 32		sta $32				sta 	tempShort
.3633	48		pha				pha
.3634	8a		txa				txa
.3635	48		pha				pha
.3636	98		tya				tya
.3637	48		pha				pha
.3638	a5 32		lda $32				lda 	tempShort 					; convert ASCII 6 bit (0-31) to 7 bit.
.363a	c9 20		cmp #$20			cmp 	#32
.363c	b0 0c		bcs $364a			bcs		_LOCHiBit
.363e	09 40		ora #$40			ora 	#64 						; conversion
.3640	c9 40		cmp #$40			cmp 	#64							; make l/c
.3642	f0 06		beq $364a			beq 	_LOCHiBit
.3644	c9 5b		cmp #$5b			cmp 	#65+26
.3646	b0 02		bcs $364a			bcs 	_LOCHiBit
.3648	69 20		adc #$20			adc 	#32
.364a					_LOCHiBit:
.364a	20 53 36	jsr $3653			jsr 	_LOCCallVector				; call o/p handler routine
.364d	68		pla				pla
.364e	a8		tay				tay
.364f	68		pla				pla
.3650	aa		tax				tax
.3651	68		pla				pla
.3652					_LOCExit:
.3652	60		rts				rts
.3653					_LOCCallVector:
.3653	6c 1f 0c	jmp ($0c1f)			jmp 	(deTokeniseVector)
.3656					deTokenPrint:
.3656	c9 00		cmp #$00			cmp 	#0 							; if bit 7 sets ink colour
.3658	30 06		bmi $3660			bmi 	_dtpInk
.365a	a2 16		ldx #$16		ldx	#22
.365c	20 bf 14	jsr $14bf		jsr	deviceHandler
.365f	60		rts				rts
.3660	c9 ff		cmp #$ff	_dtpInk:cmp 	#255 						; e.g. herhe, get ink and set it
.3662	f0 08		beq $366c			beq 	_dtpCR						; except $FF => CRLF
.3664	29 07		and #$07			and 	#7
.3666	a2 08		ldx #$08		ldx	#8
.3668	20 bf 14	jsr $14bf		jsr	deviceHandler
.366b	60		rts				rts
.366c					_dtpCR:
.366c	a2 04		ldx #$04		ldx	#4
.366e	20 bf 14	jsr $14bf		jsr	deviceHandler
.3671	60		rts				rts
.3672					DTSwitchMode:
.3672	cd 21 0c	cmp $0c21			cmp 	LastCharacterClass 			; if changed, update character class
.3675	f0 04		beq $367b			beq 	_DTSMNoChange
.3677	8d 21 0c	sta $0c21			sta 	LastCharacterClass
.367a					_DTSMExit:
.367a	60		rts				rts
.367b					_DTSMNoChange:
.367b	c9 01		cmp #$01			cmp 	#1 							; if didn't change to punctuation, two identifiers so we
.367d	f0 fb		beq $367a			beq 	_DTSMExit 					; need a space.
.367f	a9 20		lda #$20			lda 	#" "
.3681	4c 31 36	jmp $3631			jmp 	ListOutputCharacter

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/detokenise/identifier.asm

.3684					DTIdentifier:
.3684	a9 00		lda #$00			lda 	#0 							; now text, may need spaces
.3686	20 72 36	jsr $3672			jsr 	DTSwitchMode
.3689	a9 87		lda #$87			lda 	#LTYIdentifier
.368b	20 31 36	jsr $3631			jsr 	ListOutputCharacter
.368e					_DTILoop:
.368e	b1 28		lda ($28),y			lda 	(codePtr),y 				; output main bit of identifier.
.3690	c9 2d		cmp #$2d			cmp 	#"-"						; make - back to _
.3692	d0 02		bne $3696			bne 	_DTINotUS
.3694	a9 5f		lda #$5f			lda 	#"_"
.3696					_DTINotUS:
.3696	20 31 36	jsr $3631			jsr 	ListOutputCharacter
.3699	c8		iny				iny
.369a	b1 28		lda ($28),y			lda 	(codePtr),y 				; until end identifier marker.
.369c	c9 3a		cmp #$3a			cmp 	#$3A
.369e	90 ee		bcc $368e			bcc 	_DTILoop
.36a0	c8		iny				iny
.36a1	c9 3a		cmp #$3a			cmp 	#$3A 						; is it integer non array
.36a3	f0 25		beq $36ca			beq 	_DTIExit 					; no postfix.
.36a5	48		pha				pha
.36a6	a9 01		lda #$01			lda  	#1 							; it ends in punctuation
.36a8	8d 21 0c	sta $0c21			sta 	LastCharacterClass
.36ab	a9 82		lda #$82			lda 	#LTYPunctuation
.36ad	20 31 36	jsr $3631			jsr 	ListOutputCharacter
.36b0	68		pla				pla
.36b1	c9 3b		cmp #$3b			cmp 	#$3B
.36b3	f0 10		beq $36c5			beq 	_DTIArray
.36b5	4a		lsr a				lsr 	a 							; array flag in C
.36b6	08		php				php
.36b7	49 1e		eor #$1e			eor 	#$3C/2 						; check if $
.36b9	f0 02		beq $36bd			beq 	_DTIDollar
.36bb	a9 07		lda #$07			lda 	#"$"^"#" 					; this if #, 0 if $
.36bd					_DTIDollar:
.36bd	49 24		eor #$24			eor 	#"$"
.36bf	20 31 36	jsr $3631			jsr 	ListOutputCharacter
.36c2	28		plp				plp
.36c3	90 05		bcc $36ca			bcc 	_DTIExit
.36c5					_DTIArray:
.36c5	a9 28		lda #$28			lda 	#"("
.36c7	20 31 36	jsr $3631			jsr 	ListOutputCharacter
.36ca					_DTIExit:
.36ca	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/detokenise/token.asm

.36cb					DTDecodeToken:
.36cb	a2 00		ldx #$00			ldx 	#0 							; table number to use
.36cd	b1 28		lda ($28),y			lda 	(codePtr),y
.36cf	c9 84		cmp #$84			cmp 	#$84
.36d1	b0 05		bcs $36d8			bcs 	_DTNotShift
.36d3	29 03		and #$03			and 	#3 							; get the shift 1..3
.36d5	0a		asl a				asl 	a 							; put 2 x in X
.36d6	aa		tax				tax
.36d7	c8		iny				iny
.36d8					_DTNotShift:
.36d8	bd da 39	lda $39da,x			lda 	TokenTableAddress,x 		; get the token table to use to decode it.
.36db	85 2a		sta $2a				sta 	temp0 						; point into temp0
.36dd	bd db 39	lda $39db,x			lda 	TokenTableAddress+1,x
.36e0	85 2b		sta $2b				sta 	temp0+1
.36e2	b1 28		lda ($28),y			lda 	(codePtr),y 				; get the token value.
.36e4	c8		iny				iny 								; consume it.
.36e5	aa		tax				tax
.36e6	98		tya				tya
.36e7	48		pha				pha
.36e8					_DTFindText:
.36e8	e0 86		cpx #$86			cpx 	#$86 						; finished ?
.36ea	f0 11		beq $36fd			beq 	_DTFoundText
.36ec	ca		dex				dex
.36ed	a0 00		ldy #$00			ldy 	#0 							; add length+1 to temp0
.36ef	38		sec				sec
.36f0	b1 2a		lda ($2a),y			lda 	(temp0),y
.36f2	65 2a		adc $2a				adc 	temp0
.36f4	85 2a		sta $2a				sta 	temp0
.36f6	90 f0		bcc $36e8			bcc 	_DTFindText
.36f8	e6 2b		inc $2b				inc 	temp0+1
.36fa	4c e8 36	jmp $36e8			jmp 	_DTFindText
.36fd					_DTFoundText:
.36fd	a0 01		ldy #$01			ldy 	#1 							; get first character
.36ff	b1 2a		lda ($2a),y			lda 	(temp0),y
.3701	29 7f		and #$7f			and 	#$7F 						; will have bit 7 set.
.3703	c9 41		cmp #$41			cmp 	#"A" 						; check for punctuation.
.3705	90 11		bcc $3718			bcc 	_DTIsPunctuation
.3707	c9 5b		cmp #$5b			cmp 	#"Z"+1
.3709	b0 0d		bcs $3718			bcs 	_DTIsPunctuation
.370b	a9 00		lda #$00			lda 	#0 							; now text, may need spaces
.370d	20 72 36	jsr $3672			jsr 	DTSwitchMode
.3710	a9 83		lda #$83			lda 	#LTYKeyword
.3712	20 31 36	jsr $3631			jsr 	ListOutputCharacter
.3715	4c 22 37	jmp $3722			jmp 	_DTPrint
.3718					_DTIsPunctuation:
.3718	a9 01		lda #$01			lda 	#1 							; now punctuation, may need spaces
.371a	20 72 36	jsr $3672			jsr 	DTSwitchMode
.371d	a9 82		lda #$82			lda 	#LTYPunctuation
.371f	20 31 36	jsr $3631			jsr 	ListOutputCharacter
.3722					_DTPrint:
.3722	a9 01		lda #$01			lda 	#1 							; fix case.
.3724	20 07 36	jsr $3607			jsr 	DTPrintLengthPrefix 		; print it out.
.3727	a0 00		ldy #$00			ldy 	#0
.3729	b1 2a		lda ($2a),y			lda 	(temp0),y
.372b	a8		tay				tay
.372c	b1 2a		lda ($2a),y			lda 	(temp0),y
.372e	29 7f		and #$7f			and 	#$7F 						; will have bit 7 set.
.3730	c9 41		cmp #$41			cmp 	#"A" 						; check for punctuation.
.3732	90 04		bcc $3738			bcc 	_DTIsNowPunctuation
.3734	c9 5b		cmp #$5b			cmp 	#"Z"+1
.3736	90 05		bcc $373d			bcc 	_DTPExit
.3738					_DTIsNowPunctuation:
.3738	a9 01		lda #$01			lda 	#1
.373a	8d 21 0c	sta $0c21			sta		LastCharacterClass
.373d					_DTPExit:
.373d	68		pla				pla
.373e	a8		tay				tay
.373f	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/search.asm

.0c24					currentSet:
>0c24							.fill 	1
.3740					TokenSearch:
.3740	8a		txa				txa
.3741	48		pha				pha
.3742	98		tya				tya
.3743	48		pha				pha
.3744	a9 00		lda #$00			lda 	#0
.3746	8d 24 0c	sta $0c24			sta 	currentSet
.3749					_TSLoop:
.3749	ad 24 0c	lda $0c24			lda 	currentSet 					; 2 x currentset in X
.374c	0a		asl a				asl 	a
.374d	aa		tax				tax
.374e	bd da 39	lda $39da,x			lda 	TokenTableAddress,x 		; set temp0 to the table address
.3751	85 2a		sta $2a				sta 	temp0
.3753	bd db 39	lda $39db,x			lda 	TokenTableAddress+1,x
.3756	85 2b		sta $2b				sta 	temp0+1
.3758	20 7f 37	jsr $377f			jsr 	TokenSearchOne 				; search one table
.375b	b0 0d		bcs $376a			bcs 	_TSFound 					; found a token.
.375d	ee 24 0c	inc $0c24			inc 	currentSet 					; next set
.3760	ad 24 0c	lda $0c24			lda 	currentSet
.3763	c9 04		cmp #$04			cmp 	#4
.3765	d0 e2		bne $3749			bne 	_TSLoop 					; back if not done all four.
.3767	18		clc				clc 								; clear carry and exit
.3768	90 10		bcc $377a			bcc 	_TSExit
.376a					_TSFound:
.376a	48		pha				pha 								; save token
.376b	ad 24 0c	lda $0c24			lda 	currentSet					; if set zero no shift
.376e	f0 05		beq $3775			beq 	_TSNoShift
.3770	09 80		ora #$80			ora 	#$80 						; Write as $81-$83
.3772	20 30 38	jsr $3830			jsr 	TokenWrite
.3775					_TSNoShift:
.3775	68		pla				pla 								; get token back
.3776	20 30 38	jsr $3830			jsr 	TokenWrite 					; write it
.3779	38		sec				sec 								; carry set indicating success
.377a					_TSExit:
.377a	68		pla				pla
.377b	a8		tay				tay
.377c	68		pla				pla
.377d	aa		tax				tax
.377e	60		rts				rts
.377f					TokenSearchOne:
.377f	a2 86		ldx #$86			ldx 	#$86 						; current token being tested.
.3781					_TSOLoop:
.3781	a0 00		ldy #$00			ldy 	#0
.3783	b1 2a		lda ($2a),y			lda 	(temp0),y 					; get length of token
.3785	f0 26		beq $37ad			beq 	_TSOFail 					; if zero, end of table
.3787	cd cf 0a	cmp $0acf			cmp 	convertBuffer 				; length is the same, compare the text matches.
.378a	f0 11		beq $379d			beq 	_TSOCheckText
.378c					_TSONext:
.378c	e8		inx				inx 								; bump token
.378d	a0 00		ldy #$00			ldy 	#0							; get length
.378f	b1 2a		lda ($2a),y			lda 	(temp0),y
.3791	38		sec				sec
.3792	65 2a		adc $2a				adc 	temp0 						; add to temp0 + 1
.3794	85 2a		sta $2a				sta 	temp0
.3796	90 e9		bcc $3781			bcc 	_TSOLoop
.3798	e6 2b		inc $2b				inc 	temp0+1
.379a	4c 81 37	jmp $3781			jmp 	_TSOLoop
.379d					_TSOCheckText:
.379d	a8		tay				tay 								; compare length downto 1.
.379e					_TSOCheckLoop:
.379e	b1 2a		lda ($2a),y			lda 	(temp0),y 					; use EOR to compare
.37a0	59 cf 0a	eor $0acf,y			eor 	convertBuffer,y
.37a3	29 7f		and #$7f			and 	#$7F 						; ignore bit 7
.37a5	d0 e5		bne $378c			bne 	_TSONext 					; different goto next.
.37a7	88		dey				dey 								; do all
.37a8	d0 f4		bne $379e			bne 	_TSOCheckLoop
.37aa	8a		txa				txa 								; return token in A and carry set
.37ab	38		sec				sec
.37ac	60		rts				rts
.37ad					_TSOFail:
.37ad	18		clc				clc
.37ae	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/test.asm

.37af					TokTest:
.37af	a2 ff		ldx #$ff				ldx 	#$FF
.37b1	9a		txs					txs
.37b2	a9 cf		lda #$cf			lda 	#(TokenText1) & $FF
.37b4	85 28		sta $28				sta 	codePtr
.37b6	a9 37		lda #$37			lda 	#(TokenText1) >> 8
.37b8	85 29		sta $29				sta 	1+(codePtr)
.37ba	20 cf 37	jsr $37cf				jsr 	Tokenise
.37bd	a2 00		ldx #$00	TokStop:	ldx 	#0 					; compare vs precalculated result
.37bf	bd cf 37	lda $37cf,x	_TokCheck:	lda 	TokenBytes1,x
.37c2	dd 28 0c	cmp $0c28,x				cmp 	tokenBuffer,x
.37c5	d0 fe		bne $37c5	_TokFail:	bne 	_TokFail	 		; error.
.37c7	e8		inx					inx
.37c8	c9 80		cmp #$80				cmp 	#$80
.37ca	d0 f3		bne $37bf				bne 	_TokCheck
.37cc	4c ff ff	jmp $ffff				jmp 	$FFFF 				; successfully tokenised then quit.

;******  Processing file: tokeniser/tokenise/../../generated/toktest.inc

.37cf					TokenText1:
.37cf					TokenBytes1:

;******  Return to file: tokeniser/tokenise/test.asm


;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokenise.asm

.0c25					tokenHeader:
>0c25							.fill 	3
.0c28					tokenBuffer:
>0c28							.fill 	256
.0d28					tokenBufferIndex:
>0d28							.fill 	1
.37cf					Tokenise:
.37cf	20 49 38	jsr $3849			jsr 	TokeniseMakeASCIIZ 			; convert to ASCIIZ string.
.37d2					TokeniseASCIIZ:
.37d2	20 5a 38	jsr $385a			jsr 	TokeniseFixCase 			; remove controls and lower case outside quotes.
.37d5	a9 00		lda #$00			lda 	#0 							; reset the token buffer index
.37d7	8d 28 0d	sta $0d28			sta 	tokenBufferIndex
.37da	a8		tay				tay 								; start pointer
.37db	a9 80		lda #$80			lda 	#$80 						; empty token buffer ($80 ends it)
.37dd	8d 28 0c	sta $0c28			sta 	tokenBuffer
.37e0					_TokLoop:
.37e0	b1 28		lda ($28),y			lda 	(codePtr),y 				; get next character
.37e2	f0 46		beq $382a			beq 	_TokExit 					; if zero, then exit.
.37e4	c8		iny				iny 								; skip over spaces.
.37e5	c9 20		cmp #$20			cmp 	#" "
.37e7	f0 f7		beq $37e0			beq 	_TokLoop
.37e9	88		dey				dey 								; point back to character.
.37ea	c9 26		cmp #$26			cmp 	#"&"						; Hexadecimal constant.
.37ec	f0 18		beq $3806			beq 	_TokHexConst
.37ee	c9 22		cmp #$22			cmp 	#'"'						; Quoted String
.37f0	f0 23		beq $3815			beq 	_TokQString
.37f2	c9 5b		cmp #$5b			cmp 	#"Z"+1 						; > 'Z' is punctuation
.37f4	b0 26		bcs $381c			bcs 	_TokPunctuation
.37f6	c9 41		cmp #$41			cmp 	#"A" 						; A..Z identifier
.37f8	b0 29		bcs $3823			bcs 	_TokIdentifier
.37fa	c9 3a		cmp #$3a			cmp 	#"9"+1
.37fc	b0 1e		bcs $381c			bcs 	_TokPunctuation 			; between 9 and A exclusive, punctuation
.37fe	c9 30		cmp #$30			cmp 	#"0"
.3800	90 1a		bcc $381c			bcc 	_TokPunctuation 			; < 0, punctuation.
.3802	a9 0a		lda #$0a			lda 	#10  						; 0..9 constant in base 10.
.3804	d0 08		bne $380e			bne 	_TokConst
.3806					_TokHexConst:
.3806	c8		iny				iny									; consume token.
.3807	a9 c5		lda #$c5			lda 	#TKW_AMP 					; Write ampersand token out
.3809	20 30 38	jsr $3830			jsr 	TokenWrite
.380c	a9 10		lda #$10			lda 	#16
.380e					_TokConst:
.380e	20 18 39	jsr $3918			jsr 	TokeniseInteger
.3811	b0 cd		bcs $37e0			bcs 	_TokLoop
.3813	90 18		bcc $382d			bcc 	_TokFail
.3815					_TokQString:
.3815	20 ae 39	jsr $39ae			jsr 	TokeniseString
.3818	b0 c6		bcs $37e0			bcs 	_TokLoop
.381a	90 11		bcc $382d			bcc 	_TokFail
.381c					_TokPunctuation:
.381c	20 8d 39	jsr $398d			jsr 	TokenisePunctuation
.381f	b0 bf		bcs $37e0			bcs 	_TokLoop
.3821	90 0a		bcc $382d			bcc 	_TokFail
.3823					_TokIdentifier:
.3823	20 89 38	jsr $3889			jsr 	TokeniseIdentifier
.3826	b0 b8		bcs $37e0			bcs 	_TokLoop
.3828	90 03		bcc $382d			bcc 	_TokFail
.382a					_TokExit:
.382a	a9 01		lda #$01			lda 	#1
.382c	60		rts				rts
.382d					_TokFail:
.382d	a9 00		lda #$00			lda 	#0
.382f	60		rts				rts
.3830					TokenWrite:
.3830	85 32		sta $32				sta 	tempShort 					; save XA
.3832	48		pha				pha
.3833	8a		txa				txa
.3834	48		pha				pha
.3835	a5 32		lda $32				lda 	tempShort
.3837	ae 28 0d	ldx $0d28			ldx 	tokenBufferIndex 			; geet index
.383a	9d 28 0c	sta $0c28,x			sta 	tokenBuffer,x 				; write byte to buffer
.383d	a9 80		lda #$80			lda 	#TOK_EOL 					; pre-emptively write EOL marker after
.383f	9d 29 0c	sta $0c29,x			sta 	tokenBuffer+1,x
.3842	ee 28 0d	inc $0d28			inc 	tokenBufferIndex 			; bump index
.3845	68		pla				pla
.3846	aa		tax				tax
.3847	68		pla				pla
.3848	60		rts				rts
.3849					TokeniseMakeASCIIZ:
.3849	a0 00		ldy #$00			ldy 	#0							; get length of string.
.384b	b1 28		lda ($28),y			lda 	(codePtr),y
.384d	a8		tay				tay
.384e	c8		iny				iny 								; +1, the NULL goes here.
.384f	a9 00		lda #$00			lda 	#0
.3851	91 28		sta ($28),y			sta 	(codePtr),y 				; write the trailing NULL.
.3853	e6 28		inc $28				inc 	codePtr 					; bump the pointer.
.3855	d0 02		bne $3859			bne 	_TMKAExit
.3857	e6 29		inc $29				inc 	codePtr+1
.3859					_TMKAExit:
.3859	60		rts				rts
.385a					TokeniseFixCase:
.385a	a0 00		ldy #$00			ldy 	#0 							; position in buffer.
.385c	a2 01		ldx #$01			ldx 	#1 							; bit 0 of this is 'in quotes'
.385e					_TFCFlipQ:
.385e	8a		txa				txa
.385f	49 01		eor #$01			eor 	#1
.3861	aa		tax				tax
.3862					_TFCLoop:
.3862	b1 28		lda ($28),y			lda 	(codePtr),y 				; get character
.3864	f0 22		beq $3888			beq 	_TFCExit 					; if zero exit.
.3866	c9 20		cmp #$20			cmp 	#32 						; if control
.3868	90 1a		bcc $3884			bcc 	_TFCControl
.386a	c8		iny				iny 								; preconsume
.386b	c9 22		cmp #$22			cmp 	#'"'
.386d	f0 ef		beq $385e			beq 	_TFCFlipQ
.386f	c9 61		cmp #$61			cmp 	#"a"						; check if L/C
.3871	90 ef		bcc $3862			bcc 	_TFCLoop
.3873	c9 7b		cmp #$7b			cmp 	#"z"+1
.3875	b0 eb		bcs $3862			bcs 	_TFCLoop
.3877	e0 00		cpx #$00			cpx 	#0 							; in quotes, if so, leave alone.
.3879	d0 e7		bne $3862			bne 	_TFCLoop
.387b	88		dey				dey
.387c	49 20		eor #$20			eor 	#"A"^"a"					; make U/C
.387e					_TFCWrite:
.387e	91 28		sta ($28),y			sta 	(codePtr),y
.3880	c8		iny				iny
.3881	4c 62 38	jmp $3862			jmp 	_TFCLoop
.3884					_TFCControl:
.3884	a9 20		lda #$20			lda 	#" "
.3886	d0 f6		bne $387e			bne 	_TFCWrite
.3888					_TFCExit:
.3888	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokident.asm

.3889					TokeniseIdentifier:
.3889	a2 00		ldx #$00			ldx 	#0
.388b					_TICopyID:
.388b	b1 28		lda ($28),y			lda 	(codePtr),y					; get characters
.388d	c9 5f		cmp #$5f			cmp 	#"_" 						; underscore converted to minus internally.
.388f	f0 16		beq $38a7			beq 	_TICopyUnderscore
.3891	c9 2e		cmp #$2e			cmp 	#"."
.3893	f0 14		beq $38a9			beq 	_TICopyIn
.3895	c9 30		cmp #$30			cmp 	#"0"
.3897	90 1b		bcc $38b4			bcc 	_TIEndCopy
.3899	c9 3a		cmp #$3a			cmp 	#"9"+1
.389b	90 0c		bcc $38a9			bcc 	_TICopyIn
.389d	c9 41		cmp #$41			cmp 	#"A"
.389f	90 13		bcc $38b4			bcc 	_TIEndCopy
.38a1	c9 5b		cmp #$5b			cmp 	#"Z"+1
.38a3	b0 0f		bcs $38b4			bcs		_TIEndCopy
.38a5	90 02		bcc $38a9			bcc 	_TICopyIn
.38a7					_TICopyUnderScore:
.38a7	a9 2d		lda #$2d			lda 	#"-"						; _ is mapped to -
.38a9					_TICopyIn:
.38a9	e8		inx				inx 								; write into buffer in 7 bit ASCII form
.38aa	9d cf 0a	sta $0acf,x			sta 	convertBuffer,x
.38ad	8e cf 0a	stx $0acf			stx 	convertBuffer
.38b0	c8		iny				iny 								; next character
.38b1	4c 8b 38	jmp $388b			jmp 	_TICopyID 					; loop round
.38b4					_TIEndCopy:
.38b4	a9 24		lda #$24			lda 	#"$"
.38b6	20 0b 39	jsr $390b			jsr 	TIDCheckCopy
.38b9	a9 23		lda #$23			lda 	#"#"
.38bb	20 0b 39	jsr $390b			jsr 	TIDCheckCopy
.38be	a9 28		lda #$28			lda 	#"("
.38c0	20 0b 39	jsr $390b			jsr 	TIDCheckCopy
.38c3	20 40 37	jsr $3740			jsr 	TokenSearch 				; is it a token
.38c6	b0 41		bcs $3909			bcs 	_TIExit 					; if so, then exit.
.38c8	98		tya				tya
.38c9	48		pha				pha
.38ca	a0 3a		ldy #$3a			ldy 	#$3A 						; default type.
.38cc	ae cf 0a	ldx $0acf			ldx 	convertBuffer 				; is last character (
.38cf	bd cf 0a	lda $0acf,x			lda 	convertBuffer,x
.38d2	c9 28		cmp #$28			cmp 	#"("
.38d4	d0 02		bne $38d8			bne 	_TINotArray
.38d6	ca		dex				dex 								; yes, remove it and convert to array.
.38d7	c8		iny				iny
.38d8					_TINotArray:
.38d8	bd cf 0a	lda $0acf,x			lda 	convertBuffer,x 			; check for $
.38db	c9 24		cmp #$24			cmp 	#"$"
.38dd	d0 03		bne $38e2			bne 	_TINotString
.38df	ca		dex				dex
.38e0	c8		iny				iny
.38e1	c8		iny				iny
.38e2					_TINotString:
.38e2	bd cf 0a	lda $0acf,x			lda 	convertBuffer,x 			; check for #
.38e5	c9 23		cmp #$23			cmp 	#"#"
.38e7	d0 05		bne $38ee			bne 	_TINotFloat
.38e9	ca		dex				dex
.38ea	c8		iny				iny
.38eb	c8		iny				iny
.38ec	c8		iny				iny
.38ed	c8		iny				iny
.38ee					_TINotFloat:
.38ee	e8		inx				inx 								; write end marker for identifier.
.38ef	98		tya				tya
.38f0	9d cf 0a	sta $0acf,x			sta 	convertBuffer,x
.38f3	8e cf 0a	stx $0acf			stx 	convertBuffer 				; update length.
.38f6	a2 01		ldx #$01			ldx 	#1
.38f8					_TIOutput:
.38f8	bd cf 0a	lda $0acf,x			lda 	convertBuffer,x
.38fb	29 3f		and #$3f			and 	#$3F
.38fd	48		pha				pha
.38fe	20 30 38	jsr $3830			jsr 	TokenWrite
.3901	e8		inx				inx
.3902	68		pla				pla
.3903	c9 3a		cmp #$3a			cmp 	#$3A
.3905	90 f1		bcc $38f8			bcc 	_TIOutput
.3907	68		pla				pla
.3908	a8		tay				tay
.3909					_TIExit:
.3909	38		sec				sec 								; this can't fail.
.390a	60		rts				rts
.390b					TIDCheckCopy:
.390b	d1 28		cmp ($28),y			cmp 	(codePtr),y
.390d	d0 08		bne $3917			bne 	_TIDCCExit
.390f	e8		inx				inx
.3910	9d cf 0a	sta $0acf,x			sta 	convertBuffer,x
.3913	8e cf 0a	stx $0acf			stx 	convertBuffer
.3916	c8		iny				iny
.3917					_TIDCCExit:
.3917	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokinteger.asm

.3918					TokeniseInteger:
.3918	85 2c		sta $2c				sta 	temp1 						; save base
.391a	a2 00		ldx #$00			ldx 	#0							; count of chars so far
.391c	8e cf 0a	stx $0acf			stx 	convertBuffer
.391f					_TIGetChars:
.391f	b1 28		lda ($28),y			lda 	(codePtr),y 				; check character is numeric
.3921	c9 30		cmp #$30			cmp 	#"0"
.3923	90 1f		bcc $3944			bcc 	_TIEndGet
.3925	c9 3a		cmp #$3a			cmp 	#"9"+1
.3927	90 10		bcc $3939			bcc 	_TIHaveChar
.3929	a5 2c		lda $2c				lda 	temp1 						; fail if not hex mode
.392b	c9 0a		cmp #$0a			cmp 	#10
.392d	f0 15		beq $3944			beq 	_TIEndGet
.392f	b1 28		lda ($28),y			lda 	(codePtr),y 				; check legitimate hex.
.3931	c9 41		cmp #$41			cmp 	#"A"
.3933	90 0f		bcc $3944			bcc 	_TIEndGet
.3935	c9 5b		cmp #$5b			cmp 	#"Z"+1
.3937	b0 0b		bcs $3944			bcs 	_TIEndGet
.3939					_TIHaveChar:
.3939	e8		inx				inx 								; write into buffer.
.393a	8e cf 0a	stx $0acf			stx 	convertBuffer
.393d	9d cf 0a	sta $0acf,x			sta 	convertBuffer,x
.3940	c8		iny				iny 								; next char
.3941	4c 1f 39	jmp $391f			jmp 	_TIGetChars
.3944					_TIEndGet:
.3944	e0 00		cpx #$00			cpx 	#0 							; no char acquired.
.3946	f0 1c		beq $3964			beq 	_TIFail
.3948	98		tya				tya
.3949	48		pha				pha
.394a	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.394c	85 2a		sta $2a				sta 	temp0
.394e	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.3950	85 2b		sta $2b				sta 	1+(temp0)
.3952	a9 00		lda #$00			lda 	#0 							; stack level 0
.3954	a4 2c		ldy $2c				ldy 	temp1 						; base Y
.3956	a2 14		ldx #$14		ldx	#20
.3958	20 58 32	jsr $3258		jsr	mainHandler
.395b	68		pla				pla
.395c	a8		tay				tay
.395d	90 05		bcc $3964			bcc 	_TIFail 					; didn't convert.
.395f	20 66 39	jsr $3966			jsr 	TIRecursiveOut 				; recursive output ?
.3962	38		sec				sec
.3963	60		rts				rts
.3964					_TIFail:
.3964	18		clc				clc
.3965	60		rts				rts
.3966					TIRecursiveOut:
.3966	a5 50		lda $50				lda 	esInt0 						; get value to output after possible recursion
.3968	29 3f		and #$3f			and 	#$3F
.396a	09 40		ora #$40			ora 	#$40
.396c	48		pha				pha
.396d	a5 50		lda $50				lda 	esInt0 						; are we recursing ?
.396f	29 c0		and #$c0			and 	#$C0
.3971	05 58		ora $58				ora 	esInt1
.3973	05 60		ora $60				ora 	esInt2
.3975	05 68		ora $68				ora 	esInt3
.3977	f0 10		beq $3989			beq 	_TIRONoRecursion
.3979	a2 06		ldx #$06			ldx 	#6 							; shift right x 6
.397b					_TIROShift:
.397b	46 68		lsr $68				lsr 	esInt3
.397d	66 60		ror $60				ror 	esInt2
.397f	66 58		ror $58				ror 	esInt1
.3981	66 50		ror $50				ror 	esInt0
.3983	ca		dex				dex
.3984	d0 f5		bne $397b			bne 	_TIROShift
.3986	20 66 39	jsr $3966			jsr 	TIRecursiveOut 				; call recursively
.3989					_TIRONoRecursion:
.3989	68		pla				pla 								; pull the old bit.
.398a	4c 30 38	jmp $3830			jmp 	TokenWrite

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokpunct.asm

.398d					TokenisePunctuation:
.398d	b1 28		lda ($28),y			lda	 	(codePtr),y 				; copy next 2 chars into convertBuffer
.398f	8d d0 0a	sta $0ad0			sta 	convertBuffer+1
.3992	c8		iny				iny
.3993	b1 28		lda ($28),y			lda 	(codePtr),y
.3995	8d d1 0a	sta $0ad1			sta 	convertBuffer+2
.3998	c8		iny				iny 								; Y is +2
.3999	a9 02		lda #$02			lda 	#2 							; 2 character string.
.399b	8d cf 0a	sta $0acf			sta 	convertBuffer
.399e	20 40 37	jsr $3740			jsr 	TokenSearch 				; search for that token.
.39a1	b0 0a		bcs $39ad			bcs 	_TIFound
.39a3	ce cf 0a	dec $0acf			dec 	convertBuffer 				; make it a 1 character string
.39a6	88		dey				dey 								; Y is now +1
.39a7	20 40 37	jsr $3740			jsr 	TokenSearch 				; search for that token.
.39aa	b0 01		bcs $39ad			bcs 	_TIFound
.39ac	88		dey				dey 								; Y is now +0, carry clear indicating failure.
.39ad					_TIFound:
.39ad	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokstring.asm

.39ae					TokeniseString:
.39ae	c8		iny				iny 								; skip opening quote
.39af	a2 ff		ldx #$ff			ldx 	#255 						; count length of string.
.39b1	84 2a		sty $2a				sty 	temp0 						; save start.
.39b3					_TSGetLength:
.39b3	b1 28		lda ($28),y			lda 	(codePtr),y 				; get next
.39b5	f0 21		beq $39d8			beq 	_TSFail						; end of line, fail
.39b7	c8		iny				iny
.39b8	e8		inx				inx
.39b9	c9 22		cmp #$22			cmp 	#'"' 						; until end quote found.
.39bb	d0 f6		bne $39b3			bne 	_TSGetLength
.39bd	a9 85		lda #$85			lda 	#TOK_STR 					; write string token out
.39bf	20 30 38	jsr $3830			jsr 	TokenWrite
.39c2	8a		txa				txa 								; output length
.39c3	20 30 38	jsr $3830			jsr 	TokenWrite
.39c6	a4 2a		ldy $2a				ldy 	temp0 						; get original position
.39c8	e0 00		cpx #$00			cpx 	#0 							; check ended
.39ca	f0 09		beq $39d5			beq 	_TSExit
.39cc					_TSOutput:
.39cc	b1 28		lda ($28),y			lda 	(codePtr),y					; output character
.39ce	20 30 38	jsr $3830			jsr 	TokenWrite
.39d1	c8		iny				iny
.39d2	ca		dex				dex
.39d3	d0 f7		bne $39cc			bne 	_TSOutput
.39d5					_TSExit:
.39d5	c8		iny				iny 								; skip ending quote
.39d6	38		sec				sec 								; return CS.
.39d7	60		rts				rts
.39d8					_TSFail:
.39d8	18		clc				clc
.39d9	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokentext.asm

.39da					TokenTableAddress:
>39da	e2 39						.word 	Group0Text
>39dc	af 3b						.word 	Group1Text
>39de	ea 3c						.word 	Group2Text
>39e0	02 3d						.word 	Group3Text

;******  Processing file: tokeniser/../generated/tokentext0.inc

.39e2					Group0Text:
>39e2	03 41 4e c4				.byte $03,$41,$4e,$c4                  ; $86 and
>39e6	02 4f d2				.byte $02,$4f,$d2                      ; $87 or
>39e9	03 58 4f d2				.byte $03,$58,$4f,$d2                  ; $88 xor
>39ed	02 3e bd				.byte $02,$3e,$bd                      ; $89 >=
>39f0	02 3c bd				.byte $02,$3c,$bd                      ; $8a <=
>39f3	01 be					.byte $01,$be                          ; $8b >
>39f5	01 bc					.byte $01,$bc                          ; $8c <
>39f7	01 bd					.byte $01,$bd                          ; $8d =
>39f9	02 3c be				.byte $02,$3c,$be                      ; $8e <>
>39fc	01 ab					.byte $01,$ab                          ; $8f +
>39fe	01 ad					.byte $01,$ad                          ; $90 -
>3a00	02 3e be				.byte $02,$3e,$be                      ; $91 >>
>3a03	02 3c bc				.byte $02,$3c,$bc                      ; $92 <<
>3a06	01 aa					.byte $01,$aa                          ; $93 *
>3a08	01 af					.byte $01,$af                          ; $94 /
>3a0a	03 4d 4f c4				.byte $03,$4d,$4f,$c4                  ; $95 mod
>3a0e	01 de					.byte $01,$de                          ; $96 ^
>3a10	01 a1					.byte $01,$a1                          ; $97 !
>3a12	01 bf					.byte $01,$bf                          ; $98 ?
>3a14	06 52 45 50 45 41 d4			.byte $06,$52,$45,$50,$45,$41,$d4      ; $99 repeat
>3a1b	05 57 48 49 4c c5			.byte $05,$57,$48,$49,$4c,$c5          ; $9a while
>3a21	03 46 4f d2				.byte $03,$46,$4f,$d2                  ; $9b for
>3a25	02 49 c6				.byte $02,$49,$c6                      ; $9c if
>3a28	07 44 45 46 50 52 4f c3			.byte $07,$44,$45,$46,$50,$52,$4f,$c3  ; $9d defproc
>3a30	05 55 4e 54 49 cc			.byte $05,$55,$4e,$54,$49,$cc          ; $9e until
>3a36	04 57 45 4e c4				.byte $04,$57,$45,$4e,$c4              ; $9f wend
>3a3b	04 4e 45 58 d4				.byte $04,$4e,$45,$58,$d4              ; $a0 next
>3a40	04 54 48 45 ce				.byte $04,$54,$48,$45,$ce              ; $a1 then
>3a45	05 45 4e 44 49 c6			.byte $05,$45,$4e,$44,$49,$c6          ; $a2 endif
>3a4b	07 45 4e 44 50 52 4f c3			.byte $07,$45,$4e,$44,$50,$52,$4f,$c3  ; $a3 endproc
>3a53	01 a8					.byte $01,$a8                          ; $a4 (
>3a55	04 4c 45 4e a8				.byte $04,$4c,$45,$4e,$a8              ; $a5 len(
>3a5a	04 53 47 4e a8				.byte $04,$53,$47,$4e,$a8              ; $a6 sgn(
>3a5f	04 41 42 53 a8				.byte $04,$41,$42,$53,$a8              ; $a7 abs(
>3a64	07 52 41 4e 44 4f 4d a8			.byte $07,$52,$41,$4e,$44,$4f,$4d,$a8  ; $a8 random(
>3a6c	04 50 41 47 c5				.byte $04,$50,$41,$47,$c5              ; $a9 page
>3a71	04 54 52 55 c5				.byte $04,$54,$52,$55,$c5              ; $aa true
>3a76	05 46 41 4c 53 c5			.byte $05,$46,$41,$4c,$53,$c5          ; $ab false
>3a7c	04 4d 49 4e a8				.byte $04,$4d,$49,$4e,$a8              ; $ac min(
>3a81	04 4d 41 58 a8				.byte $04,$4d,$41,$58,$a8              ; $ad max(
>3a86	04 53 59 53 a8				.byte $04,$53,$59,$53,$a8              ; $ae sys(
>3a8b	06 54 49 4d 45 52 a8			.byte $06,$54,$49,$4d,$45,$52,$a8      ; $af timer(
>3a92	06 45 56 45 4e 54 a8			.byte $06,$45,$56,$45,$4e,$54,$a8      ; $b0 event(
>3a99	04 47 45 54 a8				.byte $04,$47,$45,$54,$a8              ; $b1 get(
>3a9e	06 49 4e 4b 45 59 a8			.byte $06,$49,$4e,$4b,$45,$59,$a8      ; $b2 inkey(
>3aa5	06 41 4c 4c 4f 43 a8			.byte $06,$41,$4c,$4c,$4f,$43,$a8      ; $b3 alloc(
>3aac	05 43 48 52 24 a8			.byte $05,$43,$48,$52,$24,$a8          ; $b4 chr$(
>3ab2	06 4c 45 46 54 24 a8			.byte $06,$4c,$45,$46,$54,$24,$a8      ; $b5 left$(
>3ab9	05 4d 49 44 24 a8			.byte $05,$4d,$49,$44,$24,$a8          ; $b6 mid$(
>3abf	07 52 49 47 48 54 24 a8			.byte $07,$52,$49,$47,$48,$54,$24,$a8  ; $b7 right$(
>3ac7	05 53 54 52 24 a8			.byte $05,$53,$54,$52,$24,$a8          ; $b8 str$(
>3acd	04 56 41 4c a8				.byte $04,$56,$41,$4c,$a8              ; $b9 val(
>3ad2	05 50 45 45 4b a8			.byte $05,$50,$45,$45,$4b,$a8          ; $ba peek(
>3ad8	05 44 45 45 4b a8			.byte $05,$44,$45,$45,$4b,$a8          ; $bb deek(
>3ade	05 4c 45 45 4b a8			.byte $05,$4c,$45,$45,$4b,$a8          ; $bc leek(
>3ae4	04 41 53 43 a8				.byte $04,$41,$53,$43,$a8              ; $bd asc(
>3ae9	04 49 4e 54 a8				.byte $04,$49,$4e,$54,$a8              ; $be int(
>3aee	06 46 4c 4f 41 54 a8			.byte $06,$46,$4c,$4f,$41,$54,$a8      ; $bf float(
>3af5	06 49 53 56 41 4c a8			.byte $06,$49,$53,$56,$41,$4c,$a8      ; $c0 isval(
>3afc	07 55 50 50 45 52 24 a8			.byte $07,$55,$50,$50,$45,$52,$24,$a8  ; $c1 upper$(
>3b04	07 4c 4f 57 45 52 24 a8			.byte $07,$4c,$4f,$57,$45,$52,$24,$a8  ; $c2 lower$(
>3b0c	01 c0					.byte $01,$c0                          ; $c3 @
>3b0e	01 fe					.byte $01,$fe                          ; $c4 ~
>3b10	01 a6					.byte $01,$a6                          ; $c5 &
>3b12	05 47 45 54 24 a8			.byte $05,$47,$45,$54,$24,$a8          ; $c6 get$(
>3b18	07 49 4e 4b 45 59 24 a8			.byte $07,$49,$4e,$4b,$45,$59,$24,$a8  ; $c7 inkey$(
>3b20	03 4d 45 cd				.byte $03,$4d,$45,$cd                  ; $c8 mem
>3b24	01 a9					.byte $01,$a9                          ; $c9 )
>3b26	01 ba					.byte $01,$ba                          ; $ca :
>3b28	01 ac					.byte $01,$ac                          ; $cb ,
>3b2a	01 bb					.byte $01,$bb                          ; $cc ;
>3b2c	01 a7					.byte $01,$a7                          ; $cd '
>3b2e	02 54 cf				.byte $02,$54,$cf                      ; $ce to
>3b31	04 53 54 45 d0				.byte $04,$53,$54,$45,$d0              ; $cf step
>3b36	04 50 52 4f c3				.byte $04,$50,$52,$4f,$c3              ; $d0 proc
>3b3b	05 4c 4f 43 41 cc			.byte $05,$4c,$4f,$43,$41,$cc          ; $d1 local
>3b41	03 44 49 cd				.byte $03,$44,$49,$cd                  ; $d2 dim
>3b45	03 52 45 cd				.byte $03,$52,$45,$cd                  ; $d3 rem
>3b49	03 4c 45 d4				.byte $03,$4c,$45,$d4                  ; $d4 let
>3b4d	05 49 4e 50 55 d4			.byte $05,$49,$4e,$50,$55,$d4          ; $d5 input
>3b53	04 45 4c 53 c5				.byte $04,$45,$4c,$53,$c5              ; $d6 else
>3b58	03 56 44 d5				.byte $03,$56,$44,$d5                  ; $d7 vdu
>3b5c	05 50 52 49 4e d4			.byte $05,$50,$52,$49,$4e,$d4          ; $d8 print
>3b62	04 47 4f 54 cf				.byte $04,$47,$4f,$54,$cf              ; $d9 goto
>3b67	05 47 4f 53 55 c2			.byte $05,$47,$4f,$53,$55,$c2          ; $da gosub
>3b6d	06 52 45 54 55 52 ce			.byte $06,$52,$45,$54,$55,$52,$ce      ; $db return
>3b74	04 44 41 54 c1				.byte $04,$44,$41,$54,$c1              ; $dc data
>3b79	06 41 53 53 45 52 d4			.byte $06,$41,$53,$53,$45,$52,$d4      ; $dd assert
>3b80	04 50 4f 4b c5				.byte $04,$50,$4f,$4b,$c5              ; $de poke
>3b85	04 44 4f 4b c5				.byte $04,$44,$4f,$4b,$c5              ; $df doke
>3b8a	04 4c 4f 4b c5				.byte $04,$4c,$4f,$4b,$c5              ; $e0 loke
>3b8f	03 49 4e cb				.byte $03,$49,$4e,$cb                  ; $e1 ink
>3b93	05 50 41 50 45 d2			.byte $05,$50,$41,$50,$45,$d2          ; $e2 paper
>3b99	03 43 4c d3				.byte $03,$43,$4c,$d3                  ; $e3 cls
>3b9d	06 4c 4f 43 41 54 c5			.byte $06,$4c,$4f,$43,$41,$54,$c5      ; $e4 locate
>3ba4	05 42 52 45 41 cb			.byte $05,$42,$52,$45,$41,$cb          ; $e5 break
>3baa	01 ae					.byte $01,$ae                          ; $e6 .
>3bac	01 a3					.byte $01,$a3                          ; $e7 #
>3bae	00					.byte $00

;******  Return to file: tokeniser/tokentext.asm


;******  Processing file: tokeniser/../generated/tokentext1.inc

.3baf					Group1Text:
>3baf	05 43 4c 45 41 d2			.byte $05,$43,$4c,$45,$41,$d2          ; $86 clear
>3bb5	04 4c 4f 41 c4				.byte $04,$4c,$4f,$41,$c4              ; $87 load
>3bba	04 53 41 56 c5				.byte $04,$53,$41,$56,$c5              ; $88 save
>3bbf	04 4c 49 53 d4				.byte $04,$4c,$49,$53,$d4              ; $89 list
>3bc4	03 4e 45 d7				.byte $03,$4e,$45,$d7                  ; $8a new
>3bc8	03 52 55 ce				.byte $03,$52,$55,$ce                  ; $8b run
>3bcc	04 52 45 41 c4				.byte $04,$52,$45,$41,$c4              ; $8c read
>3bd1	07 52 45 53 54 4f 52 c5			.byte $07,$52,$45,$53,$54,$4f,$52,$c5  ; $8d restore
>3bd9	03 45 4e c4				.byte $03,$45,$4e,$c4                  ; $8e end
>3bdd	04 53 54 4f d0				.byte $04,$53,$54,$4f,$d0              ; $8f stop
>3be2	04 58 45 4d d5				.byte $04,$58,$45,$4d,$d5              ; $90 xemu
>3be7	03 4f 52 c1				.byte $03,$4f,$52,$c1                  ; $91 ora
>3beb	05 28 41 4e 44 a9			.byte $05,$28,$41,$4e,$44,$a9          ; $92 (and)
>3bf1	03 45 4f d2				.byte $03,$45,$4f,$d2                  ; $93 eor
>3bf5	03 41 44 c3				.byte $03,$41,$44,$c3                  ; $94 adc
>3bf9	03 53 54 c1				.byte $03,$53,$54,$c1                  ; $95 sta
>3bfd	03 4c 44 c1				.byte $03,$4c,$44,$c1                  ; $96 lda
>3c01	03 43 4d d0				.byte $03,$43,$4d,$d0                  ; $97 cmp
>3c05	03 53 42 c3				.byte $03,$53,$42,$c3                  ; $98 sbc
>3c09	03 41 53 cc				.byte $03,$41,$53,$cc                  ; $99 asl
>3c0d	03 52 4f cc				.byte $03,$52,$4f,$cc                  ; $9a rol
>3c11	03 4c 53 d2				.byte $03,$4c,$53,$d2                  ; $9b lsr
>3c15	03 52 4f d2				.byte $03,$52,$4f,$d2                  ; $9c ror
>3c19	03 53 54 d8				.byte $03,$53,$54,$d8                  ; $9d stx
>3c1d	03 4c 44 d8				.byte $03,$4c,$44,$d8                  ; $9e ldx
>3c21	03 44 45 c3				.byte $03,$44,$45,$c3                  ; $9f dec
>3c25	03 49 4e c3				.byte $03,$49,$4e,$c3                  ; $a0 inc
>3c29	03 53 54 da				.byte $03,$53,$54,$da                  ; $a1 stz
>3c2d	03 42 49 d4				.byte $03,$42,$49,$d4                  ; $a2 bit
>3c31	03 53 54 d9				.byte $03,$53,$54,$d9                  ; $a3 sty
>3c35	03 4c 44 d9				.byte $03,$4c,$44,$d9                  ; $a4 ldy
>3c39	03 43 50 d9				.byte $03,$43,$50,$d9                  ; $a5 cpy
>3c3d	03 43 50 d8				.byte $03,$43,$50,$d8                  ; $a6 cpx
>3c41	03 54 53 c2				.byte $03,$54,$53,$c2                  ; $a7 tsb
>3c45	03 54 52 c2				.byte $03,$54,$52,$c2                  ; $a8 trb
>3c49	03 4a 53 d2				.byte $03,$4a,$53,$d2                  ; $a9 jsr
>3c4d	03 4a 4d d0				.byte $03,$4a,$4d,$d0                  ; $aa jmp
>3c51	03 42 50 cc				.byte $03,$42,$50,$cc                  ; $ab bpl
>3c55	03 42 4d c9				.byte $03,$42,$4d,$c9                  ; $ac bmi
>3c59	03 42 56 c3				.byte $03,$42,$56,$c3                  ; $ad bvc
>3c5d	03 42 56 d3				.byte $03,$42,$56,$d3                  ; $ae bvs
>3c61	03 42 43 c3				.byte $03,$42,$43,$c3                  ; $af bcc
>3c65	03 42 43 d3				.byte $03,$42,$43,$d3                  ; $b0 bcs
>3c69	03 42 4e c5				.byte $03,$42,$4e,$c5                  ; $b1 bne
>3c6d	03 42 45 d1				.byte $03,$42,$45,$d1                  ; $b2 beq
>3c71	03 42 52 c1				.byte $03,$42,$52,$c1                  ; $b3 bra
>3c75	03 42 52 cb				.byte $03,$42,$52,$cb                  ; $b4 brk
>3c79	03 50 48 d0				.byte $03,$50,$48,$d0                  ; $b5 php
>3c7d	03 43 4c c3				.byte $03,$43,$4c,$c3                  ; $b6 clc
>3c81	03 50 4c d0				.byte $03,$50,$4c,$d0                  ; $b7 plp
>3c85	03 53 45 c3				.byte $03,$53,$45,$c3                  ; $b8 sec
>3c89	03 52 54 c9				.byte $03,$52,$54,$c9                  ; $b9 rti
>3c8d	03 50 48 c1				.byte $03,$50,$48,$c1                  ; $ba pha
>3c91	03 43 4c c9				.byte $03,$43,$4c,$c9                  ; $bb cli
>3c95	03 50 48 d9				.byte $03,$50,$48,$d9                  ; $bc phy
>3c99	03 52 54 d3				.byte $03,$52,$54,$d3                  ; $bd rts
>3c9d	03 50 4c c1				.byte $03,$50,$4c,$c1                  ; $be pla
>3ca1	03 53 45 c9				.byte $03,$53,$45,$c9                  ; $bf sei
>3ca5	03 50 4c d9				.byte $03,$50,$4c,$d9                  ; $c0 ply
>3ca9	03 44 45 d9				.byte $03,$44,$45,$d9                  ; $c1 dey
>3cad	03 54 58 c1				.byte $03,$54,$58,$c1                  ; $c2 txa
>3cb1	03 54 59 c1				.byte $03,$54,$59,$c1                  ; $c3 tya
>3cb5	03 54 58 d3				.byte $03,$54,$58,$d3                  ; $c4 txs
>3cb9	03 54 41 d9				.byte $03,$54,$41,$d9                  ; $c5 tay
>3cbd	03 54 41 d8				.byte $03,$54,$41,$d8                  ; $c6 tax
>3cc1	03 43 4c d6				.byte $03,$43,$4c,$d6                  ; $c7 clv
>3cc5	03 54 53 d8				.byte $03,$54,$53,$d8                  ; $c8 tsx
>3cc9	03 49 4e d9				.byte $03,$49,$4e,$d9                  ; $c9 iny
>3ccd	03 44 45 d8				.byte $03,$44,$45,$d8                  ; $ca dex
>3cd1	03 43 4c c4				.byte $03,$43,$4c,$c4                  ; $cb cld
>3cd5	03 50 48 d8				.byte $03,$50,$48,$d8                  ; $cc phx
>3cd9	03 49 4e d8				.byte $03,$49,$4e,$d8                  ; $cd inx
>3cdd	03 4e 4f d0				.byte $03,$4e,$4f,$d0                  ; $ce nop
>3ce1	03 53 45 c4				.byte $03,$53,$45,$c4                  ; $cf sed
>3ce5	03 50 4c d8				.byte $03,$50,$4c,$d8                  ; $d0 plx
>3ce9	00					.byte $00

;******  Return to file: tokeniser/tokentext.asm


;******  Processing file: tokeniser/../generated/tokentext2.inc

.3cea					Group2Text:
>3cea	05 56 50 4f 4b c5			.byte $05,$56,$50,$4f,$4b,$c5          ; $86 vpoke
>3cf0	05 56 44 4f 4b c5			.byte $05,$56,$44,$4f,$4b,$c5          ; $87 vdoke
>3cf6	05 56 4c 4f 41 c4			.byte $05,$56,$4c,$4f,$41,$c4          ; $88 vload
>3cfc	04 4d 4f 44 c5				.byte $04,$4d,$4f,$44,$c5              ; $89 mode
>3d01	00					.byte $00

;******  Return to file: tokeniser/tokentext.asm


;******  Processing file: tokeniser/../generated/tokentext3.inc

.3d02					Group3Text:
>3d02	06 56 50 45 45 4b a8			.byte $06,$56,$50,$45,$45,$4b,$a8      ; $86 vpeek(
>3d09	06 56 44 45 45 4b a8			.byte $06,$56,$44,$45,$45,$4b,$a8      ; $87 vdeek(
>3d10	00					.byte $00

;******  Return to file: tokeniser/tokentext.asm


;******  Return to file: tokeniser/tokeniser.asm

.3d11					tokeniserHandler:
.3d11	7c 14 3d	jmp ($3d14,x)			jmp 	(tokeniserVectors,x)
.3d14					tokeniserVectors:
>3d14	2d 35					.word Detokenise           ; index 0
>3d16	21 35					.word ListLine             ; index 2
>3d18	af 37					.word TokTest              ; index 4
>3d1a	cf 37					.word Tokenise             ; index 6
>3d1c	d2 37					.word TokeniseASCIIZ       ; index 8

;******  Return to file: basic.asm

.3d1e					section_end_tokeniser:
.3d1e					section_start_variable:

;******  Processing file: variable/variable.asm


;******  Processing file: variable/array/access.asm

.3d1e					AccessArray:
.3d1e	8a		txa				txa
.3d1f	48		pha				pha
.3d20	e8		inx				inx
.3d21	20 ea 3d	jsr $3dea			jsr 	GetArrayDimensions 			; get the array dimensions one up from here.
.3d24	68		pla				pla
.3d25	aa		tax				tax
.3d26	b5 50		lda $50,x			lda 	esInt0,x 					; restore address to follow in temp0.
.3d28	85 2a		sta $2a				sta 	temp0
.3d2a	b5 58		lda $58,x			lda 	esInt1,x
.3d2c	85 2b		sta $2b				sta 	temp0+1
.3d2e	8a		txa				txa
.3d2f	48		pha				pha
.3d30	98		tya				tya
.3d31	48		pha				pha
.3d32					_AAFollow:
.3d32	a0 00		ldy #$00			ldy 	#0
.3d34	b1 2a		lda ($2a),y			lda 	(temp0),y
.3d36	48		pha				pha
.3d37	c8		iny				iny
.3d38	b1 2a		lda ($2a),y			lda 	(temp0),y
.3d3a	85 2b		sta $2b				sta 	temp0+1
.3d3c	68		pla				pla
.3d3d	85 2a		sta $2a				sta 	temp0
.3d3f	e8		inx				inx 								; advance to next stack slot.
.3d40	a0 00		ldy #$00			ldy 	#0
.3d42	b1 2a		lda ($2a),y			lda 	(temp0),y 					; compare max index vs required index
.3d44	d5 50		cmp $50,x			cmp 	esInt0,x
.3d46	c8		iny				iny
.3d47	b1 2a		lda ($2a),y			lda 	(temp0),y 					; drop bit 7 of the size, indicates follow.
.3d49	85 2c		sta $2c				sta 	temp1 						; save the size in temp1 for later use.
.3d4b	29 7f		and #$7f			and 	#$7F
.3d4d	f5 58		sbc $58,x			sbc 	esInt1,x
.3d4f	90 50		bcc $3da1			bcc 	_AABadIndex 				; failed on index if max index < required.
.3d51	18		clc				clc
.3d52	a5 2a		lda $2a				lda 	temp0
.3d54	69 02		adc #$02			adc 	#2
.3d56	85 2a		sta $2a				sta 	temp0
.3d58	90 02		bcc $3d5c			bcc 	_AANoCarry
.3d5a	e6 2b		inc $2b				inc 	temp0+1
.3d5c					_AANoCarry:
.3d5c	b5 50		lda $50,x			lda 	esInt0,x
.3d5e	85 2e		sta $2e				sta 	temp2
.3d60	b5 58		lda $58,x			lda 	esInt1,x
.3d62	85 2f		sta $2f				sta 	temp2+1
.3d64	ac 2b 0d	ldy $0d2b			ldy 	varType
.3d67	b9 44 3e	lda $3e44,y			lda 	CAActualSize-$3A,y
.3d6a	b4 49		ldy $49,x			ldy 	esType+1,x 					; is it top level
.3d6c	30 02		bmi $3d70			bmi 	_AANotPointer
.3d6e	a9 02		lda #$02			lda 	#2 							; array of pointers is 2.
.3d70					_AANotPointer:
.3d70	20 ee 3e	jsr $3eee			jsr 	MultiplyTemp2ByA 			; multiply the index by the data size, in temp2.
.3d73	18		clc				clc
.3d74	a5 2a		lda $2a				lda 	temp0
.3d76	65 2e		adc $2e				adc 	temp2
.3d78	85 2a		sta $2a				sta 	temp0
.3d7a	a5 2b		lda $2b				lda 	temp0+1
.3d7c	65 2f		adc $2f				adc 	temp2+1
.3d7e	85 2b		sta $2b				sta 	temp0+1
.3d80	b5 49		lda $49,x			lda 	esType+1,x
.3d82	30 07		bmi $3d8b			bmi 	_AAUsedAllIndices
.3d84	a5 2c		lda $2c				lda 	temp1 						; check if this is a pointer array e.g. there are subarrays
.3d86	10 14		bpl $3d9c			bpl 	_AABadDepth 				; no, too many indexes.
.3d88	4c 32 3d	jmp $3d32			jmp 	_AAFollow 					; otherwise follow them.
.3d8b					_AAUsedAllIndices:
.3d8b	a5 2c		lda $2c				lda 	temp1 						; get original high length byte.
.3d8d	30 0d		bmi $3d9c			bmi 	_AABadDepth 				; if -ve then this is an array of pointers.
.3d8f	68		pla				pla
.3d90	a8		tay				tay
.3d91	68		pla				pla
.3d92	aa		tax				tax
.3d93	a5 2a		lda $2a				lda 	temp0 						; copy address of array element to stack,x
.3d95	95 50		sta $50,x			sta 	esInt0,x
.3d97	a5 2b		lda $2b				lda 	temp0+1
.3d99	95 58		sta $58,x			sta 	esInt1,x
.3d9b	60		rts				rts
.3d9c					_AABadDepth:
.3d9c	a2 1c		ldx #$1c			ldx 	#ErrorID_ArrayDepth
.3d9e	20 e0 14	jsr $14e0		jsr	errorHandler
.3da1					_AABadIndex:
.3da1	a2 1b		ldx #$1b			ldx 	#ErrorID_ArrayIndex
.3da3	20 e0 14	jsr $14e0		jsr	errorHandler

;******  Return to file: variable/variable.asm


;******  Processing file: variable/array/create.asm

.0d29					elementSize:
>0d29							.fill	 1
.3da6					CreateArray:
.3da6	20 7d 3f	jsr $3f7d			jsr 	AccessSetup 				; set up the basic stuff.
.3da9	ad 2b 0d	lda $0d2b			lda 	varType 					; is the variable type an array
.3dac	4a		lsr a				lsr 	a
.3dad	90 36		bcc $3de5			bcc 	CANotArray 					; no, cause an error.
.3daf	20 86 40	jsr $4086			jsr 	FindVariable 				; does the variable exist already
.3db2	b0 2c		bcs $3de0			bcs 	CAFound 					; cannot redefine it.
.3db4	20 ba 3f	jsr $3fba			jsr 	CreateVariable 				; create the variable entry.
.3db7	a5 2a		lda $2a				lda 	temp0 						; push address of new variable entry on the stack
.3db9	48		pha				pha
.3dba	a5 2b		lda $2b				lda 	temp0+1
.3dbc	48		pha				pha
.3dbd	a2 00		ldx #$00			ldx 	#0
.3dbf	20 ea 3d	jsr $3dea			jsr 	GetArrayDimensions 			; get the array dimensions
.3dc2	a2 00		ldx #$00			ldx 	#0 							; create at level $00
.3dc4	20 1a 3e	jsr $3e1a			jsr 	CreateArrayLevel 			; level to YA
.3dc7	aa		tax				tax 								; level now in YX
.3dc8	68		pla				pla 								; get address back to temp0 to write.
.3dc9	85 2b		sta $2b				sta 	temp0+1
.3dcb	68		pla				pla
.3dcc	85 2a		sta $2a				sta 	temp0
.3dce	98		tya				tya 								; write YX there.
.3dcf	a0 06		ldy #$06			ldy 	#6
.3dd1	91 2a		sta ($2a),y			sta 	(temp0),y
.3dd3	88		dey				dey
.3dd4	8a		txa				txa
.3dd5	91 2a		sta ($2a),y			sta 	(temp0),y
.3dd7	ac 2c 0d	ldy $0d2c			ldy 	varEnd 						; restore Y and exit.
.3dda	60		rts				rts
.3ddb					CASize:
.3ddb	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.3ddd	20 e0 14	jsr $14e0		jsr	errorHandler
.3de0					CAFound:
.3de0	a2 19		ldx #$19			ldx 	#ErrorID_DupArray
.3de2	20 e0 14	jsr $14e0		jsr	errorHandler
.3de5					CANotArray:
.3de5	a2 1a		ldx #$1a			ldx 	#ErrorID_NotArray
.3de7	20 e0 14	jsr $14e0		jsr	errorHandler
.3dea					GetArrayDimensions:
.3dea	ad 2b 0d	lda $0d2b			lda 	varType 					; push variable type on the stack.
.3ded	48		pha				pha
.3dee	ac 2c 0d	ldy $0d2c			ldy 	varEnd
.3df1					_CAGetDimensions:
.3df1	8a		txa				txa 								; get the next level
.3df2	a2 06		ldx #$06		ldx	#6
.3df4	20 58 32	jsr $3258		jsr	mainHandler
.3df7	aa		tax				tax
.3df8	b5 58		lda $58,x			lda 	esInt1,x 					; index must be < 8192
.3dfa	29 e0		and #$e0			and 	#$E0
.3dfc	15 60		ora $60,x			ora 	esInt2,x
.3dfe	15 68		ora $68,x			ora 	esInt3,x
.3e00	d0 d9		bne $3ddb			bne 	CASize
.3e02	e8		inx				inx 								; next level.
.3e03	b1 28		lda ($28),y			lda 	(codePtr),y 				; get/consume following character
.3e05	c8		iny				iny
.3e06	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; loop back if more dimensions
.3e08	f0 e7		beq $3df1			beq 	_CAGetDimensions
.3e0a	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN 				; right bracket ?
.3e0c	d0 cd		bne $3ddb			bne 	CASize
.3e0e	a9 ff		lda #$ff			lda 	#$FF 						; set the type past the end to $FF so we know how many
.3e10	95 48		sta $48,x			sta 	esType,x 					; dimensions there are.
.3e12	68		pla				pla 								; restore the variable type ($3A-$3F)
.3e13	8d 2b 0d	sta $0d2b			sta 	varType
.3e16	8c 2c 0d	sty $0d2c			sty 	varEnd 						; save exit Y value, after dimensions
.3e19	60		rts				rts
.3e1a					CreateArrayLevel:
.3e1a	ac 2b 0d	ldy $0d2b			ldy 	varType
.3e1d	b9 44 3e	lda $3e44,y			lda 	CAActualSize-$3A,y
.3e20	8d 29 0d	sta $0d29			sta 	elementSize 				; get element size this level.
.3e23	b4 49		ldy $49,x			ldy 	esType+1,x 					; is it top level
.3e25	30 05		bmi $3e2c			bmi 	_CANotPointer
.3e27	a9 02		lda #$02			lda 	#2 							; array of pointers is 2.
.3e29	8d 29 0d	sta $0d29			sta 	elementSize
.3e2c					_CANotPointer:
.3e2c	a5 35		lda $35				lda 	lowMemory 					; start creating at temp0, saving start on stack.
.3e2e	85 2a		sta $2a				sta 	temp0
.3e30	48		pha				pha
.3e31	a5 36		lda $36				lda 	lowMemory+1
.3e33	85 2b		sta $2b				sta 	temp0+1
.3e35	48		pha				pha
.3e36	20 b7 3e	jsr $3eb7			jsr 	AllocateArraySpace 			; allocate space for all array stuff at this level.
.3e39	a0 00		ldy #$00			ldy 	#0
.3e3b	b5 50		lda $50,x			lda 	esInt0,x
.3e3d	91 2a		sta ($2a),y			sta 	(temp0),y
.3e3f	c8		iny				iny
.3e40	b5 58		lda $58,x			lda 	esInt1,x
.3e42	91 2a		sta ($2a),y			sta 	(temp0),y
.3e44	b5 49		lda $49,x			lda 	esType+1,x 					; do we have another level ?
.3e46	30 06		bmi $3e4e			bmi 	_CALNotLast
.3e48	b1 2a		lda ($2a),y			lda 	(temp0),y 					; set bit 7, indicates an array of pointers to other levels.
.3e4a	09 80		ora #$80			ora 	#$80
.3e4c	91 2a		sta ($2a),y			sta 	(temp0),y
.3e4e					_CALNotLast:
.3e4e	a9 02		lda #$02			lda 	#2
.3e50	20 74 3e	jsr $3e74			jsr 	_CALAddTemp0
.3e53	b5 50		lda $50,x			lda 	esInt0,x 					; copy stack:01 to stack:23 so we can use it to
.3e55	95 60		sta $60,x			sta 	esInt2,x 					; count.
.3e57	b5 58		lda $58,x			lda 	esInt1,x
.3e59	95 68		sta $68,x			sta 	esInt3,x
.3e5b					_CALClear:
.3e5b	20 84 3e	jsr $3e84			jsr 	EraseOneElement
.3e5e	ad 29 0d	lda $0d29			lda 	elementSize 				; move to next element
.3e61	20 74 3e	jsr $3e74			jsr 	_CALAddTemp0
.3e64	b5 60		lda $60,x			lda 	esInt2,x 					; decrement counter
.3e66	d0 02		bne $3e6a			bne 	_CALNoBorrow
.3e68	d6 68		dec $68,x			dec 	esInt3,x
.3e6a					_CALNoBorrow:
.3e6a	d6 60		dec $60,x			dec 	esInt2,x
.3e6c	b5 68		lda $68,x			lda 	esInt3,x 					; loop back if >= 0 - we need +1 because indices
.3e6e	10 eb		bpl $3e5b			bpl 	_CALClear 					; start at 0 e.g. x(10) is actually 11 array entries.
.3e70	68		pla				pla 								; restore the start of this into YA.
.3e71	a8		tay				tay
.3e72	68		pla				pla
.3e73	60		rts				rts
.3e74					_CALAddTemp0:
.3e74	18		clc				clc
.3e75	65 2a		adc $2a				adc 	temp0
.3e77	85 2a		sta $2a				sta 	temp0
.3e79	90 02		bcc $3e7d			bcc 	_CALANoCarry
.3e7b	e6 2b		inc $2b				inc 	temp0+1
.3e7d					_CALANoCarry:
.3e7d	60		rts				rts
.3e7e					CAActualSize:
>3e7e	04 04						.byte 	VarISize,VarISize
>3e80	02 02						.byte 	VarSSize,VarSSize
>3e82	06 06						.byte 	VarFSize,VarFSize
.3e84					EraseOneElement:
.3e84	b5 49		lda $49,x			lda 	esType+1,x 					; is this a list of sub arrays
.3e86	10 09		bpl $3e91			bpl 	_EOESubArray
.3e88	a0 00		ldy #$00			ldy 	#0 							; write the empty variable value out.
.3e8a	ad 2b 0d	lda $0d2b			lda 	varType
.3e8d	20 24 40	jsr $4024			jsr 	ZeroTemp0Y
.3e90	60		rts				rts
.3e91					_EOESubArray:
.3e91	a5 2a		lda $2a				lda 	temp0 						; save temp0, these are effectively locals.
.3e93	48		pha				pha
.3e94	a5 2b		lda $2b				lda 	temp0+1
.3e96	48		pha				pha
.3e97	ad 29 0d	lda $0d29			lda 	elementSize 				; save element size
.3e9a	48		pha				pha
.3e9b	e8		inx				inx 								; create at next level
.3e9c	20 1a 3e	jsr $3e1a			jsr 	CreateArrayLevel
.3e9f	ca		dex				dex
.3ea0	85 32		sta $32				sta 	tempShort 					; save A
.3ea2	68		pla				pla  								; restore element size.
.3ea3	8d 29 0d	sta $0d29			sta 	elementSize
.3ea6	68		pla				pla 								; restore temp0, which is where this new array level goes.
.3ea7	85 2b		sta $2b				sta 	temp0+1
.3ea9	68		pla				pla
.3eaa	85 2a		sta $2a				sta 	temp0
.3eac	98		tya				tya 								; store Y/A there
.3ead	a0 01		ldy #$01			ldy 	#1
.3eaf	91 2a		sta ($2a),y			sta 	(temp0),y
.3eb1	a5 32		lda $32				lda 	tempShort
.3eb3	88		dey				dey
.3eb4	91 2a		sta ($2a),y			sta 	(temp0),y
.3eb6	60		rts				rts
.3eb7					AllocateArraySpace:
.3eb7	18		clc				clc 								; element count + 1 => temp2.
.3eb8	b5 50		lda $50,x			lda 	esInt0,x
.3eba	69 01		adc #$01			adc 	#1
.3ebc	85 2e		sta $2e				sta 	temp2
.3ebe	b5 58		lda $58,x			lda 	esInt1,x
.3ec0	69 00		adc #$00			adc 	#0
.3ec2	85 2f		sta $2f				sta 	temp2+1
.3ec4	ad 29 0d	lda $0d29			lda 	elementSize 				; bytes per element
.3ec7	20 ee 3e	jsr $3eee			jsr 	MultiplyTemp2ByA 			; temp2 = (count + 1) x bytes per element.
.3eca	18		clc				clc 								; add 2 for 'max element' byte.
.3ecb	a5 2e		lda $2e				lda 	temp2
.3ecd	69 02		adc #$02			adc 	#2
.3ecf	85 2e		sta $2e				sta 	temp2
.3ed1	90 02		bcc $3ed5			bcc 	_AASNoCarry
.3ed3	e6 2f		inc $2f				inc 	temp2+1
.3ed5					_AASNoCarry:
.3ed5	18		clc				clc 								; add to low memory, allocating space.
.3ed6	a5 35		lda $35				lda 	lowMemory
.3ed8	65 2e		adc $2e				adc 	temp2
.3eda	85 35		sta $35				sta 	lowMemory
.3edc	a5 36		lda $36				lda 	lowMemory+1
.3ede	65 2f		adc $2f				adc 	temp2+1
.3ee0	85 36		sta $36				sta 	lowMemory+1
.3ee2	b0 05		bcs $3ee9			bcs 	_AASFail 					; out of memory as adding causes wrapround
.3ee4	c5 34		cmp $34				cmp 	highMemory+1 				; >= high memory pointer.
.3ee6	b0 01		bcs $3ee9			bcs 	_AASFail
.3ee8	60		rts				rts
.3ee9					_AASFail:
.3ee9	a2 22		ldx #$22			ldx 	#ErrorID_Memory
.3eeb	20 e0 14	jsr $14e0		jsr	errorHandler
.3eee					MultiplyTemp2ByA:
.3eee	48		pha				pha
.3eef	a5 2e		lda $2e				lda 	temp2 						; copy temp2 to temp3.
.3ef1	85 30		sta $30				sta 	temp3
.3ef3	a5 2f		lda $2f				lda 	temp2+1
.3ef5	85 31		sta $31				sta 	temp3+1
.3ef7	68		pla				pla
.3ef8	06 2e		asl $2e				asl 	temp2 						; double it.
.3efa	26 2f		rol $2f				rol 	temp2+1
.3efc	c9 02		cmp #$02			cmp 	#2 							; if x 2 then exit.
.3efe	f0 15		beq $3f15			beq 	_MTBAExit
.3f00	c9 06		cmp #$06			cmp 	#6 							; if x 6 then add temp3 to temp2
.3f02	d0 0d		bne $3f11			bne 	_MTBANotFloat
.3f04	18		clc				clc 								; so this will make it x 3
.3f05	a5 2e		lda $2e				lda 	temp2
.3f07	65 30		adc $30				adc 	temp3
.3f09	85 2e		sta $2e				sta 	temp2
.3f0b	a5 2f		lda $2f				lda 	temp2+1
.3f0d	65 31		adc $31				adc 	temp3+1
.3f0f	85 2f		sta $2f				sta 	temp2+1
.3f11					_MTBANotFloat:
.3f11	06 2e		asl $2e				asl 	temp2 						; double it.
.3f13	26 2f		rol $2f				rol 	temp2+1
.3f15					_MTBAExit:
.3f15	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/variable/access.asm

.0d2a					varHash:
>0d2a							.fill	1
.0d2b					varType:
>0d2b							.fill 	1
.0d2c					varEnd:
>0d2c							.fill 	1
.003b					hashList:
>003b							.fill 	2
.3f16					AccessVariable:
.3f16	aa		tax				tax 								; stack in X
.3f17	c8		iny				iny									; look at second character
.3f18	b1 28		lda ($28),y			lda 	(codePtr),y
.3f1a	88		dey				dey
.3f1b	c9 3a		cmp #$3a			cmp 	#TYPE_INT 					; is it the integer marker ($3A)
.3f1d	d0 15		bne $3f34			bne 	_AVLong 					; no, always use the hash tables.
.3f1f	b1 28		lda ($28),y			lda 	(codePtr),y 				; this is the 6 bit ASCII of A-Z 1-26
.3f21	38		sec				sec 	 							; make it 0-25
.3f22	e9 01		sbc #$01			sbc 	#1
.3f24	0a		asl a				asl 	a 							; x 4 as 4 bytes / variable.
.3f25	0a		asl a				asl 	a
.3f26	95 50		sta $50,x			sta 	esInt0,x
.3f28	a9 0a		lda #$0a			lda 	#SingleLetterVar >> 8 		; make it an address
.3f2a	95 58		sta $58,x			sta 	esInt1,x
.3f2c	a9 80		lda #$80			lda 	#$80 						; type is an integer reference.
.3f2e	95 48		sta $48,x			sta 	esType,x
.3f30	c8		iny				iny 								; skip over the variable reference in the code.
.3f31	c8		iny				iny  								; (1 letter, 1 type)
.3f32	8a		txa				txa 								; stack in A to return.
.3f33	60		rts				rts
.3f34					_AVLong:
.3f34	8a		txa				txa
.3f35	48		pha				pha
.3f36	20 7d 3f	jsr $3f7d			jsr 	AccessSetup 				; set up the basic information we need for later
.3f39	20 86 40	jsr $4086			jsr 	FindVariable 				; does the variable exist already ?
.3f3c	b0 0e		bcs $3f4c			bcs 	_AVFound 					; yes, then its found
.3f3e	ad 2b 0d	lda $0d2b			lda 	varType 					; otherwise, is the variable type an array
.3f41	4a		lsr a				lsr 	a
.3f42	90 05		bcc $3f49			bcc 	_AVCanCreate 				; if not, we can autocreate
.3f44	a2 15		ldx #$15			ldx 	#ErrorID_noauto
.3f46	20 e0 14	jsr $14e0		jsr	errorHandler
.3f49					_AVCanCreate:
.3f49	20 ba 3f	jsr $3fba			jsr 	CreateVariable 				; variable does not exist, create it.
.3f4c					_AVFound:
.3f4c	68		pla				pla
.3f4d	aa		tax				tax
.3f4e	18		clc				clc 								; copy temp0 (variable record address)
.3f4f	a5 2a		lda $2a				lda 	temp0 						; +5 (to point to the data)
.3f51	69 05		adc #$05			adc 	#5 							; (first 5 bytes are link, name, hash)
.3f53	95 50		sta $50,x			sta 	esInt0,x
.3f55	a5 2b		lda $2b				lda 	temp0+1
.3f57	69 00		adc #$00			adc 	#0
.3f59	95 58		sta $58,x			sta 	esInt1,x
.3f5b	a9 00		lda #$00			lda 	#0
.3f5d	95 60		sta $60,x			sta 	esInt2,x
.3f5f	95 68		sta $68,x			sta 	esInt3,x
.3f61	ac 2b 0d	ldy $0d2b			ldy 	varType 					; get the type ID from the type.
.3f64	b9 3d 3f	lda $3f3d,y			lda 	_AVTypeTable-$3A,y 			; e.g. a reference to int/float/string.
.3f67	95 48		sta $48,x			sta 	esType,x
.3f69	ac 2c 0d	ldy $0d2c			ldy 	varEnd 						; restore Y
.3f6c	ad 2b 0d	lda $0d2b			lda 	VarType 					; get variable type, put LSB into C
.3f6f	4a		lsr a				lsr 	a
.3f70	90 03		bcc $3f75			bcc 	_AVNotArray 				; if carry set,it is an array variable.
.3f72	20 1e 3d	jsr $3d1e			jsr 	AccessArray 				; array lookup. if LSB was set.
.3f75					_AVNotArray:
.3f75	8a		txa				txa 								; return stack in A and return
.3f76	60		rts				rts
.3f77					_AVTypeTable:
>3f77	80 80						.byte 	$80,$80						; integer
>3f79	c0 c0						.byte 	$C0,$C0 					; string
>3f7b	81 81						.byte 	$81,$81 					; float
.3f7d					AccessSetup:
.3f7d	a9 00		lda #$00			lda 	#0 							; zero the hash byte.
.3f7f	8d 2a 0d	sta $0d2a			sta 	varHash
.3f82	98		tya				tya
.3f83	48		pha				pha
.3f84	b1 28		lda ($28),y	_ASLoop:lda 	(codePtr),y					; get next identifier character
.3f86	c9 3a		cmp #$3a			cmp 	#$3A 						; is it 3A-3F which end all identifiers ?
.3f88	b0 0b		bcs $3f95			bcs 	_ASComplete
.3f8a	18		clc				clc 								; add to the hash. Might improve this.
.3f8b	6d 2a 0d	adc $0d2a			adc 	varHash
.3f8e	8d 2a 0d	sta $0d2a			sta 	varHash
.3f91	c8		iny				iny 								; next character
.3f92	4c 84 3f	jmp $3f84			jmp 	_ASLoop
.3f95					_ASComplete:
.3f95	8d 2b 0d	sta $0d2b			sta 	varType 					; save variable type byte
.3f98	c8		iny				iny
.3f99	8c 2c 0d	sty $0d2c			sty 	varEnd 						; save the ending position.
.3f9c	38		sec				sec 								; convert type byte from $3A-$3F to 0..5
.3f9d	e9 3a		sbc #$3a			sbc 	#$3A
.3f9f	0a		asl a				asl 	a 							; multiply by hashTableSize (8 in this case)
.3fa0	0a		asl a				asl 	a
.3fa1	0a		asl a				asl 	a
.3fa2	0a		asl a				asl 	a 							; 2 bytes/word
.3fa3	85 2a		sta $2a				sta 	temp0 						; this is the offset to the start of the table.
.3fa5	ad 2a 0d	lda $0d2a			lda 	varHash 					; get hash
.3fa8	29 07		and #$07			and 	#(hashTableSize-1)			; force into range (for 8,0..7)
.3faa	0a		asl a				asl  	a 							; x 2 (for word) and clear carry
.3fab	65 2a		adc $2a				adc 	temp0 						; now offset from the start of the hash table.
.3fad	69 68		adc #$68			adc 	#hashTables & $FF 			; add to hash table base address
.3faf	85 3b		sta $3b				sta 	hashList 					; making hashLists point to the head of the link list.
.3fb1	a9 0a		lda #$0a			lda 	#hashTables >> 8
.3fb3	69 00		adc #$00			adc 	#0
.3fb5	85 3c		sta $3c				sta 	hashList+1
.3fb7	68		pla				pla
.3fb8	a8		tay				tay
.3fb9	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/variable/create.asm

.3fba					CreateVariable:
.3fba	98		tya				tya 								; push Y on the stack twice.
.3fbb	48		pha				pha									; position in code of the new variable.
.3fbc	48		pha				pha
.3fbd	ae 2b 0d	ldx $0d2b			ldx 	varType 					; get var type 0-5 from the var type
.3fc0	bd e4 3f	lda $3fe4,x			lda		_CVSize-$3A,x 				; the bytes required for this new variable.
.3fc3	48		pha				pha 								; save length
.3fc4	a5 35		lda $35				lda 	lowMemory 					; set low Memory ptr to temp0
.3fc6	85 2a		sta $2a				sta 	temp0 						; (address of the new variable)
.3fc8	a5 36		lda $36				lda 	lowMemory+1
.3fca	85 2b		sta $2b				sta 	temp0+1
.3fcc	68		pla				pla 								; get length
.3fcd	18		clc				clc 								; add to low memory.
.3fce	65 35		adc $35				adc 	lowMemory
.3fd0	85 35		sta $35				sta 	lowMemory
.3fd2	90 08		bcc $3fdc			bcc 	_CVNoCarry
.3fd4	e6 36		inc $36				inc 	lowMemory+1
.3fd6	a5 36		lda $36				lda 	lowMemory+1 				; check out of memory.
.3fd8	c5 34		cmp $34				cmp 	highMemory+1
.3fda	b0 3d		bcs $4019			bcs 	_CVMemory
.3fdc					_CVNoCarry:
.3fdc	ad 2a 0d	lda $0d2a			lda 	varHash 					; store hash at offset 4.
.3fdf	a0 04		ldy #$04			ldy 	#4
.3fe1	91 2a		sta ($2a),y			sta 	(temp0),y
.3fe3	68		pla				pla 								; offset, work out where the variable name is.
.3fe4	18		clc				clc
.3fe5	65 28		adc $28				adc 	codePtr
.3fe7	a0 02		ldy #$02			ldy 	#2 							; copy that into slots 2 + 3.
.3fe9	91 2a		sta ($2a),y			sta 	(temp0),y
.3feb	a5 29		lda $29				lda 	codePtr+1
.3fed	69 00		adc #$00			adc 	#0
.3fef	c8		iny				iny
.3ff0	91 2a		sta ($2a),y			sta 	(temp0),y
.3ff2	cd c9 0a	cmp $0ac9			cmp 	basePage+1 					; compare against the program base.
.3ff5	b0 03		bcs $3ffa			bcs 	_CVNotImmediate
.3ff7	20 5c 40	jsr $405c			jsr 	CloneVariableName 			; we need to clone the variable name (immediate mode)
.3ffa					_CVNotImmediate:
.3ffa	a0 00		ldy #$00			ldy 	#0 							; copy current hash pointer in link
.3ffc	b1 3b		lda ($3b),y			lda 	(hashList),y 				; so we're inserting it in the front of a linked list
.3ffe	91 2a		sta ($2a),y			sta 	(temp0),y
.4000	c8		iny				iny
.4001	b1 3b		lda ($3b),y			lda 	(hashList),y
.4003	91 2a		sta ($2a),y			sta 	(temp0),y
.4005	a5 2b		lda $2b				lda 	temp0+1 					; set new link
.4007	91 3b		sta ($3b),y			sta 	(hashList),y
.4009	88		dey				dey
.400a	a5 2a		lda $2a				lda 	temp0
.400c	91 3b		sta ($3b),y			sta 	(hashList),y
.400e	ad 2b 0d	lda $0d2b			lda 	varType 					; type in A
.4011	a0 05		ldy #$05			ldy 	#5 							; offset in Y
.4013	20 24 40	jsr $4024			jsr 	ZeroTemp0Y 					; zero (temp0),y with whatever type.
.4016	68		pla				pla
.4017	a8		tay				tay
.4018	60		rts				rts
.4019					_CVMemory:
.4019	a2 22		ldx #$22			ldx 	#ErrorID_Memory
.401b	20 e0 14	jsr $14e0		jsr	errorHandler
>401e	09 07				_CVSize:.byte 	VarHSize+VarISize,VarHSize+VarASize 					; <storage for integer>
>4020	07 07						.byte 	VarHSize+VarSSize,VarHSize+VarASize 					; <storage for string>
>4022	0b 07						.byte 	VarHSize+VarFSize,VarHSize+VarASize 					; <storage for float>
.4024					ZeroTemp0Y:
.4024	4a		lsr a				lsr 	a 							; bit 0 in carry
.4025	0a		asl a				asl 	a
.4026	b0 19		bcs $4041			bcs 	_ZTExit 					; we don't initialise arrays.
.4028	c9 3c		cmp #$3c			cmp 	#$3C 						; check string
.402a	f0 16		beq $4042			beq 	_ZTWriteNullString 			; write "" string
.402c	c9 3e		cmp #$3e			cmp 	#$3E 						; check float
.402e	f0 22		beq $4052			beq 	_ZTWriteFloat
.4030	98		tya				tya
.4031	48		pha				pha
.4032	a9 00		lda #$00			lda 	#0
.4034	91 2a		sta ($2a),y			sta 	(temp0),y
.4036	c8		iny				iny
.4037	91 2a		sta ($2a),y			sta 	(temp0),y
.4039	c8		iny				iny
.403a	91 2a		sta ($2a),y			sta 	(temp0),y
.403c	c8		iny				iny
.403d	91 2a		sta ($2a),y			sta 	(temp0),y
.403f	68		pla				pla
.4040	a8		tay				tay
.4041					_ZTExit:
.4041	60		rts				rts
.4042					_ZTWriteNullString:
.4042	a9 00		lda #$00			lda 	#0 							; put a reference to null string as the default value.
.4044	8d ce 0a	sta $0ace			sta 	NullString
.4047	a9 ce		lda #$ce			lda 	#NullString & $FF
.4049	91 2a		sta ($2a),y			sta 	(temp0),y
.404b	a9 0a		lda #$0a			lda 	#NullString >> 8
.404d	c8		iny				iny
.404e	91 2a		sta ($2a),y			sta 	(temp0),y
.4050	88		dey				dey
.4051	60		rts				rts
.4052					_ZTWriteFloat:
.4052	8a		txa				txa
.4053	48		pha				pha
.4054	a2 1e		ldx #$1e		ldx	#30
.4056	20 e8 19	jsr $19e8		jsr	floatingpointHandler
.4059	68		pla				pla
.405a	aa		tax				tax
.405b	60		rts				rts
.405c					CloneVariableName:
.405c	a0 02		ldy #$02			ldy 	#2 							; copy vname address to temp2
.405e	b1 2a		lda ($2a),y			lda 	(temp0),y
.4060	85 2e		sta $2e				sta 	temp2
.4062	c8		iny				iny
.4063	b1 2a		lda ($2a),y			lda 	(temp0),y
.4065	85 2f		sta $2f				sta 	temp2+1
.4067	a5 36		lda $36				lda 	lowMemory+1 				; copy lowMemory address to (temp0),2/3
.4069	91 2a		sta ($2a),y			sta 	(temp0),y
.406b	88		dey				dey
.406c	a5 35		lda $35				lda 	lowMemory
.406e	91 2a		sta ($2a),y			sta 	(temp0),y
.4070	a0 00		ldy #$00			ldy 	#0 							; copy data from (temp2) to (lowMemory)
.4072					_CVNCopy:
.4072	b1 2e		lda ($2e),y			lda		(temp2),y
.4074	91 35		sta ($35),y			sta 	(lowMemory),y
.4076	c8		iny				iny
.4077	c9 3a		cmp #$3a			cmp 	#$3A 						; until the whole name has been copied.
.4079	90 f7		bcc $4072			bcc 	_CVNCopy
.407b	98		tya				tya 								; add Y to low memory
.407c	18		clc				clc
.407d	65 35		adc $35				adc 	lowMemory
.407f	85 35		sta $35				sta 	lowMemory
.4081	90 02		bcc $4085			bcc 	_CVNNoCarry
.4083	e6 36		inc $36				inc 	lowMemory+1
.4085					_CVNNoCarry:
.4085	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/variable/find.asm

.4086					FindVariable:
.4086	98		tya				tya
.4087	48		pha				pha
.4088	98		tya				tya 								; point temp2 to the actual name
.4089	18		clc				clc 								; in memory of the variable being created
.408a	65 28		adc $28				adc 	codePtr
.408c	85 2e		sta $2e				sta 	temp2
.408e	a5 29		lda $29				lda 	codePtr+1
.4090	69 00		adc #$00			adc 	#0
.4092	85 2f		sta $2f				sta 	temp2+1
.4094	a0 00		ldy #$00			ldy 	#0
.4096	a5 3b		lda $3b				lda 	hashList 					; copy hashlist to temp0
.4098	85 2a		sta $2a				sta 	temp0
.409a	a5 3c		lda $3c				lda 	hashList+1
.409c	85 2b		sta $2b				sta 	temp0+1
.409e	a0 01		ldy #$01	_FVNext:ldy 	#1 							; get MSB
.40a0	b1 2a		lda ($2a),y			lda 	(temp0),y
.40a2	f0 2c		beq $40d0			beq 	_FVFail
.40a4	aa		tax				tax
.40a5	88		dey				dey		 							; get LSB
.40a6	b1 2a		lda ($2a),y			lda 	(temp0),y
.40a8	85 2a		sta $2a				sta 	temp0 						; update pointer.
.40aa	86 2b		stx $2b				stx 	temp0+1
.40ac	a0 04		ldy #$04			ldy 	#4 							; check hashes match
.40ae	b1 2a		lda ($2a),y			lda 	(temp0),y
.40b0	cd 2a 0d	cmp $0d2a			cmp 	varHash
.40b3	d0 e9		bne $409e			bne 	_FVNext 					; if not, no point in checking the name.
.40b5	88		dey				dey 								; copy name pointer (+2,+3) to temp1.
.40b6	b1 2a		lda ($2a),y			lda 	(temp0),y
.40b8	85 2d		sta $2d				sta 	temp1+1
.40ba	88		dey				dey
.40bb	b1 2a		lda ($2a),y			lda 	(temp0),y
.40bd	85 2c		sta $2c				sta 	temp1
.40bf	a0 00		ldy #$00			ldy 	#0
.40c1					_FVCheck:
.40c1	b1 2c		lda ($2c),y			lda 	(temp1),y 					; compare names
.40c3	d1 2e		cmp ($2e),y			cmp 	(temp2),y
.40c5	d0 d7		bne $409e			bne 	_FVNext		 				; fail if different.
.40c7	c8		iny				iny
.40c8	c9 3a		cmp #$3a			cmp 	#$3A 						; until reached the end marker.
.40ca	90 f5		bcc $40c1			bcc 	_FVCheck
.40cc	68		pla				pla
.40cd	a8		tay				tay
.40ce	38		sec				sec
.40cf	60		rts				rts
.40d0					_FVFail:
.40d0	68		pla				pla
.40d1	a8		tay				tay
.40d2	18		clc				clc
.40d3	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/variable/reset.asm

.40d4					HashTableReset:
.40d4	a2 60		ldx #$60			ldx 	#6*2*hashTableSize			; 6 types, 2 bytes per table entry.
.40d6	a9 00		lda #$00			lda 	#0
.40d8					_HTRClear:
.40d8	9d 67 0a	sta $0a67,x			sta 	hashTables-1,x
.40db	ca		dex				dex
.40dc	d0 fa		bne $40d8			bne 	_HTRClear
.40de	60		rts				rts

;******  Return to file: variable/variable.asm

.40df					variableHandler:
.40df	7c e2 40	jmp ($40e2,x)			jmp 	(variableVectors,x)
.40e2					variableVectors:
>40e2	16 3f					.word AccessVariable       ; index 0
>40e4	a6 3d					.word CreateArray          ; index 2
>40e6	d4 40					.word HashTableReset       ; index 4

;******  Return to file: basic.asm

.40e8					section_end_variable:
.40e8					section_start_footer:

;******  Processing file: footer/footer.asm


;******  Processing file: footer/99end.asm

.003d					endZeroPage:
.0d2d					endStorage:
>40e8							.align 	256
.4100					programMemory:
>40ff	ff						.byte 	$FF

;******  Return to file: footer/footer.asm


;******  Return to file: basic.asm

.4100					section_end_footer:

;******  End of listing
