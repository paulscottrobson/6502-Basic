
; 64tass Turbo Assembler Macro V1.55.2200 listing file
; 64tass -D autorun=0 -D coldstartnew=0 -Walias -Wmacro-prefix -Wall -q -c -L ../source/bin/basic.lst -l ../source/bin/basic.lbl -Wall -o ../source/bin/basic.prg basic.asm
; Thu Mar 11 07:41:13 2021

;Offset	;Hex		;Monitor	;Source

;******  Command line definitions

=0					autorun=0
=0					coldstartnew=0

;******  Processing input file: basic.asm


;******  Processing file: main/00header/01common.inc


;******  Processing file: main/00header/../../generated/installed.inc

=1					installed_main = 1
=1					installed_variable = 1
=1					installed_assembler = 1
=1					installed_error = 1
=1					installed_extension = 1
=1					installed_string = 1
=1					installed_device = 1
=0					installed_floatingpoint = 0
=1					installed_interaction = 1
=1					installed_tokeniser = 1

;******  Return to file: main/00header/01common.inc

=$1000					CodeStart = $1000
=$800					MemoryStorage = $800
=$02					ZeroPageStorage = $02
=8					StackSize = 8
=512					retStackSize = 512
=8					hashTableSize = 8			; if this changes, the calculation is AccessSetup has to match it.
="G"					markerGOSUB = 'G'
="R"					markerREPEAT = 'R'
="F"					markerFOR = 'F'
="W"					markerWHILE = 'W'
="P"					markerPROC = 'P'
="$"					markerSTRING = '$'
="#"					markerFLOAT = '#'
="%"					markerINT = '%'
=5					VarHSize = 5 								; header (2 link, 2 name, 1 hash)
=5					VarASize = 5 								; array [address,size,byteSize]
=4					VarISize = 4 								; integer (32 bit)
=6					VarFSize = 6 								; float (4 mantissa, 1 exponent 1 sign/zero)
=2					VarSSize = 2 								; address (2 bytes)

;******  Return to file: basic.asm


;******  Processing file: main/00header/02macros.inc


;******  Return to file: basic.asm


;******  Processing file: main/00header/03data.inc

>0002					codePtr:.fill 	2							; (codePtr),y points to code.
>0004					temp0: 	.fill 	2							; working variables.
>0006					temp1: 	.fill 	2
>0008					temp2: 	.fill 	2
>000a					temp3: 	.fill 	2
.000c					tempshort:
>000c							.fill 	1
.000d					highMemory:
>000d							.fill 	2
.000f					lowMemory:
>000f							.fill 	2
>0040					esType:	.fill 	StackSize  					; type byte (see above)
>0048					esInt0:	.fill 	StackSize 					; integer or mantissa
>0050					esInt1:	.fill 	StackSize
>0058					esInt2:	.fill 	StackSize
>0060					esInt3:	.fill 	StackSize
>0068					esExp:	.fill 	StackSize 					; exponent ($80 = 0)
>0070					esZSign:.fill 	StackSize 					; for floating point - sign (bit 7) isZero (bit 6)
=$48					esMant0 = esInt0 							; synonyms.
=$50					esMant1 = esInt1
=$58					esMant2 = esInt2
=$60					esMant3 = esInt3
>0800							.align	256
.0800					returnStack:
>0800							.fill 	retStackSize
>0a00							.align	256
.0a00					SingleLetterVar:
>0a00					 		.fill 	26*4
.0a68					hashTables:
>0a68							.fill 	6*2*hashTableSize
.0ac8					basePage:
>0ac8							.fill 	2
.0aca					endProgram:
>0aca							.fill 	2
.0acc					endMemory:
>0acc							.fill 	2
.0ace					NullString:
>0ace							.fill 	1							; don't waste memory concreting null strings.
.0acf					convertBuffer:
>0acf							.fill 	35

;******  Processing file: main/00header/../../generated/tokenconst.inc

=$80					TOK_EOL=$80
=$81					TOK_SHIFT1=$81
=$82					TOK_SHIFT2=$82
=$83					TOK_SHIFT3=$83
=$84					TOK_FPC=$84
=$85					TOK_STR=$85
=$86					TOK_BINARYST=$86
=$99					TOK_STRUCTST=$99
=$a4					TOK_UNARYST=$a4
=$c6					TOK_TOKENS=$c6
=$86					TKW_AND                      = $86 ; and
=$87					TKW_OR                       = $87 ; or
=$88					TKW_XOR                      = $88 ; xor
=$89					TKW_GREATEREQUAL             = $89 ; >=
=$8a					TKW_LESSEQUAL                = $8a ; <=
=$8b					TKW_GREATER                  = $8b ; >
=$8c					TKW_LESS                     = $8c ; <
=$8d					TKW_EQUAL                    = $8d ; =
=$8e					TKW_LESSGREATER              = $8e ; <>
=$8f					TKW_PLUS                     = $8f ; +
=$90					TKW_MINUS                    = $90 ; -
=$91					TKW_GREATERGREATER           = $91 ; >>
=$92					TKW_LESSLESS                 = $92 ; <<
=$93					TKW_STAR                     = $93 ; *
=$94					TKW_SLASH                    = $94 ; /
=$95					TKW_MOD                      = $95 ; mod
=$96					TKW_HAT                      = $96 ; ^
=$97					TKW_PLING                    = $97 ; !
=$98					TKW_QMARK                    = $98 ; ?
=$99					TKW_REPEAT                   = $99 ; repeat
=$9a					TKW_WHILE                    = $9a ; while
=$9b					TKW_FOR                      = $9b ; for
=$9c					TKW_IF                       = $9c ; if
=$9d					TKW_DEFPROC                  = $9d ; defproc
=$9e					TKW_UNTIL                    = $9e ; until
=$9f					TKW_WEND                     = $9f ; wend
=$a0					TKW_NEXT                     = $a0 ; next
=$a1					TKW_THEN                     = $a1 ; then
=$a2					TKW_ENDIF                    = $a2 ; endif
=$a3					TKW_ENDPROC                  = $a3 ; endproc
=$a4					TKW_LPAREN                   = $a4 ; (
=$a5					TKW_LENLPAREN                = $a5 ; len(
=$a6					TKW_SGNLPAREN                = $a6 ; sgn(
=$a7					TKW_ABSLPAREN                = $a7 ; abs(
=$a8					TKW_RANDOMLPAREN             = $a8 ; random(
=$a9					TKW_PAGE                     = $a9 ; page
=$aa					TKW_TRUE                     = $aa ; true
=$ab					TKW_FALSE                    = $ab ; false
=$ac					TKW_MINLPAREN                = $ac ; min(
=$ad					TKW_MAXLPAREN                = $ad ; max(
=$ae					TKW_SYSLPAREN                = $ae ; sys(
=$af					TKW_TIMERLPAREN              = $af ; timer(
=$b0					TKW_EVENTLPAREN              = $b0 ; event(
=$b1					TKW_GETLPAREN                = $b1 ; get(
=$b2					TKW_INKEYLPAREN              = $b2 ; inkey(
=$b3					TKW_ALLOCLPAREN              = $b3 ; alloc(
=$b4					TKW_CHRDOLLARLPAREN          = $b4 ; chr$(
=$b5					TKW_LEFTDOLLARLPAREN         = $b5 ; left$(
=$b6					TKW_MIDDOLLARLPAREN          = $b6 ; mid$(
=$b7					TKW_RIGHTDOLLARLPAREN        = $b7 ; right$(
=$b8					TKW_STRDOLLARLPAREN          = $b8 ; str$(
=$b9					TKW_VALLPAREN                = $b9 ; val(
=$ba					TKW_PEEKLPAREN               = $ba ; peek(
=$bb					TKW_DEEKLPAREN               = $bb ; deek(
=$bc					TKW_LEEKLPAREN               = $bc ; leek(
=$bd					TKW_ASCLPAREN                = $bd ; asc(
=$be					TKW_INTLPAREN                = $be ; int(
=$bf					TKW_FLOATLPAREN              = $bf ; float(
=$c0					TKW_ISVALLPAREN              = $c0 ; isval(
=$c1					TKW_UPPERDOLLARLPAREN        = $c1 ; upper$(
=$c2					TKW_LOWERDOLLARLPAREN        = $c2 ; lower$(
=$c3					TKW_AT                       = $c3 ; @
=$c4					TKW_WAVY                     = $c4 ; ~
=$c5					TKW_AMP                      = $c5 ; &
=$c6					TKW_RPAREN                   = $c6 ; )
=$c7					TKW_COLON                    = $c7 ; :
=$c8					TKW_COMMA                    = $c8 ; ,
=$c9					TKW_SEMICOLON                = $c9 ; ;
=$ca					TKW_QUOTE                    = $ca ; '
=$cb					TKW_TO                       = $cb ; to
=$cc					TKW_STEP                     = $cc ; step
=$cd					TKW_PROC                     = $cd ; proc
=$ce					TKW_LOCAL                    = $ce ; local
=$cf					TKW_DIM                      = $cf ; dim
=$d0					TKW_REM                      = $d0 ; rem
=$d1					TKW_LET                      = $d1 ; let
=$d2					TKW_INPUT                    = $d2 ; input
=$d3					TKW_ELSE                     = $d3 ; else
=$d4					TKW_VDU                      = $d4 ; vdu
=$d5					TKW_PRINT                    = $d5 ; print
=$d6					TKW_GOTO                     = $d6 ; goto
=$d7					TKW_GOSUB                    = $d7 ; gosub
=$d8					TKW_RETURN                   = $d8 ; return
=$d9					TKW_DATA                     = $d9 ; data
=$da					TKW_ASSERT                   = $da ; assert
=$db					TKW_POKE                     = $db ; poke
=$dc					TKW_DOKE                     = $dc ; doke
=$dd					TKW_LOKE                     = $dd ; loke
=$de					TKW_INK                      = $de ; ink
=$df					TKW_PAPER                    = $df ; paper
=$e0					TKW_CLS                      = $e0 ; cls
=$e1					TKW_LOCATE                   = $e1 ; locate
=$86					TKW_CLEAR                    = $86 ; clear
=$87					TKW_LOAD                     = $87 ; load
=$88					TKW_SAVE                     = $88 ; save
=$89					TKW_LIST                     = $89 ; list
=$8a					TKW_NEW                      = $8a ; new
=$8b					TKW_RUN                      = $8b ; run
=$8c					TKW_READ                     = $8c ; read
=$8d					TKW_RESTORE                  = $8d ; restore
=$8e					TKW_END                      = $8e ; end
=$8f					TKW_STOP                     = $8f ; stop
=$90					TKW_XEMU                     = $90 ; xemu
=$86					TKW_VPOKE                    = $86 ; vpoke
=$87					TKW_VDOKE                    = $87 ; vdoke
=$86					TKW_VPEEKLPAREN              = $86 ; vpeek(
=$87					TKW_VDEEKLPAREN              = $87 ; vdeek(

;******  Return to file: main/00header/03data.inc

=$3a					TYPE_INT =		($3A) 						; type bytes that end identifier.
=$3b					TYPE_INTARRAY =	($3B)
=$3c					TYPE_STR =		($3C)
=$3d					TYPE_STRARRAY =	($3D)
=$3e					TYPE_FLOAT =	($3E)
=$3f					TYPE_FLOATARRAY=($3F)

;******  Return to file: basic.asm


;******  Processing file: main/main.inc


;******  Return to file: basic.asm


;******  Processing file: assembler/assembler.inc


;******  Return to file: basic.asm


;******  Processing file: device/device.inc


;******  Return to file: basic.asm


;******  Processing file: error/error.inc


;******  Return to file: basic.asm


;******  Processing file: error/errorhandler.inc


;******  Processing file: error/../generated/errorid.inc

=1					ErrorID_Missing = 1 ; Feature not Present
=2					ErrorID_Syntax = 2 ; Syntax Error
=3					ErrorID_NoModule = 3 ; Module disabled
=4					ErrorID_Assert = 4 ; Assertion failed
=5					ErrorID_DivZero = 5 ; Divide By Zero
=6					ErrorID_Stop = 6 ; Stop
=7					ErrorID_BadType = 7 ; Type Mismatch
=8					ErrorID_BadValue = 8 ; Illegal Value
=9					ErrorID_MissingRP = 9 ; Missing right bracket
=10					ErrorID_MissingComma = 10 ; Missing comma
=11					ErrorID_NoReference = 11 ; Missing reference
=12					ErrorID_LineNumber = 12 ; Line Number not found
=13					ErrorID_StrLen = 13 ; String too long.
=14					ErrorID_ReturnErr = 14 ; RETURN without GOSUB
=15					ErrorID_UntilErr = 15 ; UNTIL without REPEAT
=16					ErrorID_NextErr = 16 ; NEXT without FOR
=17					ErrorID_WendErr = 17 ; WEND without WHILE
=18					ErrorID_endprocErr = 18 ; ENDPROC without PROC
=19					ErrorID_BadIndex = 19 ; Bad NEXT index
=20					ErrorID_Struct = 20 ; Structures nested wrong
=21					ErrorID_NoAuto = 21 ; Cannot create variable
=22					ErrorID_RetStack = 22 ; Return stack out of space.
=23					ErrorID_NoProc = 23 ; Unknown Procedure
=24					ErrorID_Params = 24 ; Parameters do not match.
=25					ErrorID_DupArray = 25 ; Array already defined
=26					ErrorID_NotArray = 26 ; DIM requires array
=27					ErrorID_ArrayIndex = 27 ; Bad array index.
=28					ErrorID_DataError = 28 ; Out of data
=29					ErrorID_Tokenise = 29 ; Cannot tokenise line.
=30					ErrorID_Save = 30 ; Save failed
=31					ErrorID_Load = 31 ; Load failed

;******  Return to file: error/errorhandler.inc


;******  Return to file: basic.asm


;******  Processing file: extension/extension.inc


;******  Return to file: basic.asm


;******  Processing file: floatingpoint/floatingpoint.inc


;******  Return to file: basic.asm


;******  Processing file: interaction/interaction.inc


;******  Return to file: basic.asm


;******  Processing file: string/memory.inc

=252					MaxStringSize = 252

;******  Return to file: basic.asm


;******  Processing file: string/string.inc


;******  Return to file: basic.asm


;******  Processing file: tokeniser/detokenise/colouring.inc

=$84					LTYLineNumber = $84
=$82					LTYPunctuation = $82
=$87					LTYIdentifier = $87
=$86					LTYConstant = $86
=$83					LTYKeyword = $83
=$81					LTYString = $81

;******  Return to file: basic.asm


;******  Processing file: tokeniser/tokeniser.inc


;******  Return to file: basic.asm


;******  Processing file: variable/variable.inc


;******  Return to file: basic.asm

.1000					section_start_main:

;******  Processing file: main/main.asm


;******  Processing file: main/00header/00start.asm

.1000					Start:
.1000	4c d5 22	jmp $22d5			jmp 	ColdStart
.1003	4c c7 2e	jmp $2ec7			jmp 	TokTest
>1006	ed 30						.word 	TokenTableAddress
.1008							else
>1008	00 00						.word 	0
.35fb					ReturnPos:
.5000					programMemory:

;******  Processing file: main/00header/../../generated/testcode.inc

>5000	18 e8 03 ca 85 11 54 68			.byte 24,232,3,202,133,17,84,104,105,115,32,105,115,32,97,32,99,111,109,109,101,110,116,128,9,242,3,129,137,200,81,76,128,12,252,3,1,45,49,58,141,144,65,99,128,9,6,4,24,58,141,144,66,128,7,16,4,213,1,58,128,14,26,4,213,193,133,5,72,101,108,108,111,198,128,14,36,4,213,194,133,5,72,101,108,108,111,198,128,23,46,4,3,49,60,141,133,6,83,65,86,69,77,69,143,133,4,116,101,115,116,128,24,56,4,213,133,5,83,84,65,82,84,200,1,45,49,58,200,3,49,60,200,24,58,128,11,66,4,205,19,8,15,23,59,198,128,30,76,4,205,4,5,13,15,59,106,200,197,82,77,69,89,120,200,133,8,73,78,68,69,77,79,33,33,198,128,11,86,4,205,19,8,15,23,59,198,128,22,96,4,213,133,3,69,78,68,200,1,45,49,58,200,3,49,60,200,24,58,128,11,106,4,205,19,8,15,23,59,198,128,33,116,4,3,49,60,141,133,19,120,120,120,120,120,120,120,120,120,120,120,120,120,65,65,65,65,65,65,143,133,1,33,128,14,126,4,213,3,49,60,200,165,3,49,60,198,128,11,136,4,205,19,8,15,23,59,198,128,8,146,4,153,199,158,171,128,22,156,4,157,4,5,13,15,59,1,45,49,58,200,24,58,200,3,49,60,198,128,11,166,4,205,19,8,15,23,59,198,128,18,176,4,3,49,60,141,3,49,60,143,133,4,33,33,33,33,128,11,186,4,205,19,8,15,23,59,198,128,13,196,4,205,24,15,50,59,133,1,42,198,128,45,206,4,213,133,4,68,69,77,79,200,1,45,49,58,200,3,1,45,49,60,200,133,1,36,201,184,24,58,200,80,198,200,133,1,36,184,195,3,49,60,200,80,198,128,5,216,4,163,128,13,226,4,157,24,15,50,59,3,49,60,198,128,14,236,4,213,133,3,88,79,50,201,3,49,60,128,5,246,4,163,128,11,0,5,157,19,8,15,23,59,198,128,11,10,5,1,58,141,195,3,49,60,128,26,20,5,213,133,1,36,201,184,187,1,58,198,200,80,198,200,186,187,1,58,198,144,65,198,128,5,30,5,163,128,28,40,5,24,24,58,24,24,59,68,198,24,24,60,24,24,61,68,198,24,24,62,24,24,63,68,198,128,0
>5008	69 73 20 69 73 20 61 20 63 6f 6d 6d 65 6e 74 80
>5018	09 f2 03 81 89 c8 51 4c 80 0c fc 03 01 2d 31 3a
>5028	8d 90 41 63 80 09 06 04 18 3a 8d 90 42 80 07 10
>5038	04 d5 01 3a 80 0e 1a 04 d5 c1 85 05 48 65 6c 6c
>5048	6f c6 80 0e 24 04 d5 c2 85 05 48 65 6c 6c 6f c6
>5058	80 17 2e 04 03 31 3c 8d 85 06 53 41 56 45 4d 45
>5068	8f 85 04 74 65 73 74 80 18 38 04 d5 85 05 53 54
>5078	41 52 54 c8 01 2d 31 3a c8 03 31 3c c8 18 3a 80
>5088	0b 42 04 cd 13 08 0f 17 3b c6 80 1e 4c 04 cd 04
>5098	05 0d 0f 3b 6a c8 c5 52 4d 45 59 78 c8 85 08 49
>50a8	4e 44 45 4d 4f 21 21 c6 80 0b 56 04 cd 13 08 0f
>50b8	17 3b c6 80 16 60 04 d5 85 03 45 4e 44 c8 01 2d
>50c8	31 3a c8 03 31 3c c8 18 3a 80 0b 6a 04 cd 13 08
>50d8	0f 17 3b c6 80 21 74 04 03 31 3c 8d 85 13 78 78
>50e8	78 78 78 78 78 78 78 78 78 78 78 41 41 41 41 41
>50f8	41 8f 85 01 21 80 0e 7e 04 d5 03 31 3c c8 a5 03
>5108	31 3c c6 80 0b 88 04 cd 13 08 0f 17 3b c6 80 08
>5118	92 04 99 c7 9e ab 80 16 9c 04 9d 04 05 0d 0f 3b
>5128	01 2d 31 3a c8 18 3a c8 03 31 3c c6 80 0b a6 04
>5138	cd 13 08 0f 17 3b c6 80 12 b0 04 03 31 3c 8d 03
>5148	31 3c 8f 85 04 21 21 21 21 80 0b ba 04 cd 13 08
>5158	0f 17 3b c6 80 0d c4 04 cd 18 0f 32 3b 85 01 2a
>5168	c6 80 2d ce 04 d5 85 04 44 45 4d 4f c8 01 2d 31
>5178	3a c8 03 01 2d 31 3c c8 85 01 24 c9 b8 18 3a c8
>5188	50 c6 c8 85 01 24 b8 c3 03 31 3c c8 50 c6 80 05
>5198	d8 04 a3 80 0d e2 04 9d 18 0f 32 3b 03 31 3c c6
>51a8	80 0e ec 04 d5 85 03 58 4f 32 c9 03 31 3c 80 05
>51b8	f6 04 a3 80 0b 00 05 9d 13 08 0f 17 3b c6 80 0b
>51c8	0a 05 01 3a 8d c3 03 31 3c 80 1a 14 05 d5 85 01
>51d8	24 c9 b8 bb 01 3a c6 c8 50 c6 c8 ba bb 01 3a c6
>51e8	90 41 c6 80 05 1e 05 a3 80 1c 28 05 18 18 3a 18
>51f8	18 3b 44 c6 18 18 3c 18 18 3d 44 c6 18 18 3e 18
>5208	18 3f 44 c6 80 00

;******  Return to file: main/00header/00start.asm


;******  Return to file: main/main.asm


;******  Processing file: main/commands/assert.asm

.100a					Command_Assert:
.100a	20 e4 1c	jsr $1ce4			jsr 	EvaluateRootInteger 		; what is being asserted.
.100d	20 6f 22	jsr $226f			jsr 	MInt32Zero 					; is it true ?
.1010	f0 01		beq $1013			beq 	_CAError
.1012	60		rts				rts
.1013					_CAError:
.1013	a2 04		ldx #$04			ldx 	#ErrorID_Assert
.1015	20 b9 24	jsr $24b9		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/commands/clear.asm

.1018					CommandClear:
.1018					XCommandClear:
.1018	98		tya				tya
.1019	48		pha				pha
.101a	ad cc 0a	lda $0acc			lda 	endMemory					; set high memory = end of memory
.101d	85 0d		sta $0d				sta 	highMemory
.101f	ad cd 0a	lda $0acd			lda 	endMemory+1
.1022	85 0e		sta $0e				sta 	highMemory+1
.1024	ad c8 0a	lda $0ac8			lda 	basePage 					; work out where the program ends.
.1027	85 04		sta $04				sta 	temp0
.1029	ad c9 0a	lda $0ac9			lda 	basePage+1
.102c	85 05		sta $05				sta 	temp0+1
.102e					_CCFindEnd:
.102e	a0 00		ldy #$00			ldy 	#0
.1030	b1 04		lda ($04),y			lda 	(temp0),y
.1032	f0 0c		beq $1040			beq 	_CCFoundEnd 				; offset zero is end.
.1034	18		clc				clc
.1035	65 04		adc $04				adc 	temp0 						; move to next line
.1037	85 04		sta $04				sta 	temp0
.1039	90 f3		bcc $102e			bcc 	_CCFindEnd
.103b	e6 05		inc $05				inc 	temp0+1
.103d	4c 2e 10	jmp $102e			jmp 	_CCFindEnd
.1040					_CCFoundEnd:
.1040	a5 04		lda $04				lda 	temp0 						; put temp0 in lowMemory
.1042	85 0f		sta $0f				sta 	lowMemory
.1044	a5 05		lda $05				lda 	temp0+1
.1046	85 10		sta $10				sta 	lowMemory+1
.1048	18		clc				clc 								; put temp0+1 in endProgram
.1049	a5 04		lda $04				lda 	temp0
.104b	69 01		adc #$01			adc 	#1
.104d	8d ca 0a	sta $0aca			sta 	endProgram
.1050	a5 05		lda $05				lda 	temp0+1
.1052	69 00		adc #$00			adc 	#0
.1054	8d cb 0a	sta $0acb			sta 	endProgram+1
.1057	a9 04		lda #$04			lda 	#4 							; skip low free memory clear, leave a gap.
.1059	20 6d 10	jsr $106d			jsr 	AdvanceLowMemoryByte		; need at least one here, to skip the end of program zero offset.
.105c	20 fb 22	jsr $22fb			jsr 	RSReset 					; reset the return stack.
.105f	a2 04		ldx #$04		ldx	#4
.1061	20 f2 35	jsr $35f2		jsr	variableHandler
.1064	20 d5 16	jsr $16d5			jsr 	ScanProc 					; scan for procedures
.1067	20 df 14	jsr $14df			jsr 	CommandRestore 				; do a restore
.106a	68		pla				pla
.106b	a8		tay				tay
.106c	60		rts				rts
.106d					AdvanceLowMemoryByte:
.106d	18		clc				clc
.106e	65 0f		adc $0f				adc 	lowMemory
.1070	85 0f		sta $0f				sta 	lowMemory
.1072	90 02		bcc $1076			bcc 	_ALMBExit
.1074	e6 10		inc $10				inc 	lowMemory+1
.1076					_ALMBExit:
.1076	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/dim.asm

.1077					Command_Dim:
.1077	a2 02		ldx #$02		ldx	#2
.1079	20 f2 35	jsr $35f2		jsr	variableHandler
.107c	b1 02		lda ($02),y			lda 	(codePtr),y 				; see what follows.
.107e	c8		iny				iny
.107f	c9 c8		cmp #$c8			cmp 	#TKW_COMMA 					; comma follows, go back and do next
.1081	f0 f4		beq $1077			beq 	Command_Dim
.1083	88		dey				dey 								; unpick get
.1084	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/for.asm

.35fb					Command_FOR:
.35fb	a9 46		lda #$46			lda 	#markerFOR 					; allocate the space and set the marker
.35fd	a2 0b		ldx #$0b			ldx 	#11
.35ff	20 09 23	jsr $2309			jsr 	RSClaim
.3602	20 72 11	jsr $1172			jsr 	CommandLET 					; do the same as LET FOR [a = 4]
.3605	a5 40		lda $40				lda 	esType 						; check type should be integer reference.
.3607	c9 80		cmp #$80			cmp 	#$80 						; we do not do FOR floats.
.3609	d0 4c		bne $3657			bne 	_CFType
.360b	a9 cb		lda #$cb			lda 	#TKW_TO 					; check TO present.
.360d	20 b0 22	jsr $22b0			jsr 	CheckToken
.3610	a2 01		ldx #$01			ldx 	#1 							; keep the variable address in stack 0
.3612	20 e6 1c	jsr $1ce6			jsr 	EvaluateInteger				; get terminal value in stack 1
.3615	98		tya				tya
.3616	48		pha				pha
.3617	a0 04		ldy #$04			ldy 	#4
.3619	a5 48		lda $48				lda		esInt0 						; copy the address of the index variable into 4 and 5
.361b	91 78		sta ($78),y			sta 	(rsPointer),y
.361d	c8		iny				iny
.361e	a5 50		lda $50				lda		esInt1
.3620	91 78		sta ($78),y			sta 	(rsPointer),y
.3622	c8		iny				iny
.3623	a9 01		lda #$01			lda 	#1  						; the default step in 6, (-128 .. 127 only)
.3625	91 78		sta ($78),y			sta 	(rsPointer),y
.3627	c8		iny				iny
.3628	a5 49		lda $49				lda		esInt0+1 					; terminal value in 7 to 11.
.362a	91 78		sta ($78),y			sta 	(rsPointer),y
.362c	c8		iny				iny
.362d	a5 51		lda $51				lda		esInt1+1
.362f	91 78		sta ($78),y			sta 	(rsPointer),y
.3631	c8		iny				iny
.3632	a5 59		lda $59				lda		esInt2+1
.3634	91 78		sta ($78),y			sta 	(rsPointer),y
.3636	c8		iny				iny
.3637	a5 61		lda $61				lda		esInt3+1
.3639	91 78		sta ($78),y			sta 	(rsPointer),y
.363b	68		pla				pla
.363c	a8		tay				tay
.363d	b1 02		lda ($02),y			lda 	(codePtr),y 				; followed by STEP.
.363f	c9 cc		cmp #$cc			cmp 	#TKW_STEP
.3641	d0 0e		bne $3651			bne 	_CFDone
.3643	c8		iny				iny									; skip over step.
.3644	20 e6 1c	jsr $1ce6			jsr 	EvaluateInteger 			; get step
.3647	98		tya				tya
.3648	48		pha				pha
.3649	b5 48		lda $48,x			lda 	esInt0,x 					; copy it into step (bit lazy here)
.364b	a0 06		ldy #$06			ldy 	#6
.364d	91 78		sta ($78),y			sta 	(rsPointer),y
.364f	68		pla				pla
.3650	a8		tay				tay
.3651					_CFDone:
.3651	a9 01		lda #$01			lda 	#1
.3653	20 35 23	jsr $2335			jsr 	RSSavePosition 				; save position.
.3656	60		rts				rts
.3657					_CFType:
.3657	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.3659	20 b9 24	jsr $24b9		jsr	errorHandler
.365c					Command_NEXT:
.365c	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.365e	a1 78		lda ($78,x)			lda 	(rsPointer,x)
.3660	c9 46		cmp #$46			cmp 	#markerFOR 						; does it match
.3662	f0 05		beq $3669			beq 	_isok
.3664	a2 10		ldx #$10			ldx 	#ErrorID_nextErr
.3666	20 b9 24	jsr $24b9		jsr	errorHandler
.3669					_isok:
.3669	b1 02		lda ($02),y			lda 	(codePtr),y 				; is it NEXT <index>
.366b	c9 40		cmp #$40			cmp 	#$40 						; e.g. a variable follows 00-3F
.366d	b0 18		bcs $3687			bcs 	_CNNoIndex
.366f	a2 00		ldx #$00			ldx 	#0 							; start on stack
.3671	20 19 1d	jsr $1d19			jsr 	EvaluateReference 			; this is the variable/parameter to localise.
.3674	98		tya				tya
.3675	48		pha				pha
.3676	a0 04		ldy #$04			ldy 	#4 							; check same variable as that stored at +4,+5
.3678	b1 78		lda ($78),y			lda 	(rsPointer),y
.367a	d5 48		cmp $48,x			cmp 	esInt0,x
.367c	d0 76		bne $36f4			bne 	_CNBadIndex
.367e	c8		iny				iny
.367f	b1 78		lda ($78),y			lda 	(rsPointer),y
.3681	d5 50		cmp $50,x			cmp 	esInt1,x
.3683	d0 6f		bne $36f4			bne 	_CNBadIndex
.3685	68		pla				pla
.3686	a8		tay				tay
.3687					_CNNoIndex:
.3687	98		tya				tya
.3688	48		pha				pha
.3689	a0 04		ldy #$04			ldy 	#4 							; make temp0 point to the index
.368b	b1 78		lda ($78),y			lda 	(rsPointer),y
.368d	85 04		sta $04				sta 	temp0
.368f	c8		iny				iny
.3690	b1 78		lda ($78),y			lda 	(rsPointer),y
.3692	85 05		sta $05				sta 	temp0+1
.3694	c8		iny				iny
.3695	a2 00		ldx #$00			ldx 	#0 							; X is the sign extend part of the step.
.3697	b1 78		lda ($78),y			lda 	(rsPointer),y 				; get the step.
.3699	85 09		sta $09				sta 	temp2+1 					; save for later.
.369b	10 01		bpl $369e			bpl 	_CNSignX
.369d	ca		dex				dex  								; X = $FF
.369e					_CNSignX:
.369e	18		clc				clc 								; add to the LSB
.369f	a0 00		ldy #$00			ldy 	#0
.36a1	71 04		adc ($04),y			adc 	(temp0),y
.36a3	91 04		sta ($04),y			sta 	(temp0),y
.36a5					_CNPropogate:
.36a5	c8		iny				iny  								; add the sign extended in X to the rest.
.36a6	8a		txa				txa
.36a7	71 04		adc ($04),y			adc 	(temp0),y
.36a9	91 04		sta ($04),y			sta 	(temp0),y
.36ab	c8		iny				iny
.36ac	8a		txa				txa
.36ad	71 04		adc ($04),y			adc 	(temp0),y
.36af	91 04		sta ($04),y			sta 	(temp0),y
.36b1	c8		iny				iny
.36b2	8a		txa				txa
.36b3	71 04		adc ($04),y			adc 	(temp0),y
.36b5	91 04		sta ($04),y			sta 	(temp0),y
.36b7	18		clc				clc 								; point temp1 to the terminal value stored in the stack.
.36b8	a5 78		lda $78				lda 	rsPointer
.36ba	69 07		adc #$07			adc 	#7
.36bc	85 06		sta $06				sta 	temp1
.36be	a9 00		lda #$00			lda 	#0
.36c0	85 08		sta $08				sta 	temp2 						; clear temp2, which is the OR of all the subtractions.
.36c2	a8		tay				tay 								; and clear the Y register again.
.36c3	65 79		adc $79				adc 	rsPointer+1
.36c5	85 07		sta $07				sta 	temp1+1
.36c7	38		sec				sec 								; calculate current - limit oring interim values.
.36c8	20 00 37	jsr $3700			jsr 	_CNCompare 					; each of these does a byte.
.36cb	20 00 37	jsr $3700			jsr 	_CNCompare 					; we calculate the OR of all these subtractions.
.36ce	20 00 37	jsr $3700			jsr 	_CNCompare 					; and the carry of the subtraction.
.36d1	20 00 37	jsr $3700			jsr 	_CNCompare
.36d4	50 02		bvc $36d8			bvc 	_CNNoOverflow 				; converts to a signed comparison on the sign bit.
.36d6	49 80		eor #$80			eor 	#$80
.36d8					_CNNoOverflow:
.36d8	a4 09		ldy $09				ldy 	temp2+1						; get step back
.36da	30 1d		bmi $36f9			bmi 	_CNCheckDownto
.36dc	c9 00		cmp #$00			cmp 	#0
.36de	30 0c		bmi $36ec			bmi 	_CNLoopRound 				; loop round if < =
.36e0	a5 08		lda $08				lda 	temp2
.36e2	f0 08		beq $36ec			beq 	_CNLoopRound
.36e4					_CNLoopExit:
.36e4	68		pla				pla
.36e5	a8		tay				tay
.36e6	a9 0b		lda #$0b			lda 	#11
.36e8	20 2b 23	jsr $232b			jsr 	RSFree
.36eb	60		rts				rts
.36ec					_CNLoopRound:
.36ec	68		pla				pla
.36ed	a8		tay				tay
.36ee	a9 01		lda #$01			lda 	#1
.36f0	20 48 23	jsr $2348			jsr 	RSLoadPosition				; go back to the loop top
.36f3	60		rts				rts
.36f4					_CNBadIndex:
.36f4	a2 13		ldx #$13			ldx 	#ErrorID_BadIndex
.36f6	20 b9 24	jsr $24b9		jsr	errorHandler
.36f9					_CNCheckDownto:
.36f9	c9 00		cmp #$00			cmp 	#0
.36fb	10 ef		bpl $36ec			bpl 	_CNLoopRound
.36fd	4c e4 36	jmp $36e4			jmp 	_CNLoopExit
.3700					_CNCompare:
.3700	b1 04		lda ($04),y			lda 	(temp0),y 					; do the subtraction - compare don't care about answer
.3702	f1 06		sbc ($06),y			sbc 	(temp1),y
.3704	05 08		ora $08				ora 	temp2 						; Or into temp2 (does not affect carry)
.3706	85 08		sta $08				sta 	temp2
.3708	c8		iny				iny
.3709	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/if.asm

.1085					CommandIf:
.1085	20 e4 1c	jsr $1ce4			jsr 	EvaluateRootInteger 		; get what's being tested.
.1088	b1 02		lda ($02),y			lda 	(codePtr),y 				; check for IF .. THEN or IF .. GOTO which are single lines.
.108a	c9 d6		cmp #$d6			cmp 	#TKW_GOTO
.108c	f0 04		beq $1092			beq 	_IfSimple
.108e	c9 a1		cmp #$a1			cmp 	#TKW_THEN
.1090	d0 1b		bne $10ad			bne 	_IfComplex
.1092					_IfSimple:
.1092	20 6f 22	jsr $226f			jsr 	MInt32Zero					; check if TOS zero
.1095	f0 10		beq $10a7			beq 	_IfEOL 						; go to next line.
.1097	b1 02		lda ($02),y			lda 	(codePtr),y 				; get and skip token.
.1099	c8		iny				iny
.109a	c9 d6		cmp #$d6			cmp 	#TKW_GOTO 					; was it if GOTO ?
.109c	f0 0c		beq $10aa			beq 	_IfGoto 					; do the Goto code
.109e	b1 02		lda ($02),y			lda 	(codePtr),y 				; what follows the THEN ?
.10a0	29 c0		and #$c0			and 	#$C0 						; check $40-$7F
.10a2	c9 40		cmp #$40			cmp 	#$40 						; e.g. number IF x = 0 THEN 170
.10a4	f0 04		beq $10aa			beq 	_IfGoto
.10a6	60		rts				rts 								; else continue on this line.
.10a7					_IfEOL:
.10a7	4c 4a 17	jmp $174a			jmp 	AdvanceNextLine 			; go to next line
.10aa					_IfGoto:
.10aa	4c bf 17	jmp $17bf			jmp 	CommandGoto
.10ad					_IfComplex:
.10ad	20 6f 22	jsr $226f			jsr 	MInt32Zero 					; is it true ?
.10b0	f0 01		beq $10b3			beq 	_IFSkip 					; if non-zero then skip to ELSE/ENDIF
.10b2	60		rts				rts 								; else continue.
.10b3					_IFSkip:
.10b3	a9 d3		lda #$d3			lda	 	#TKW_ELSE 					; test failed, go to ELSE or ENDIF whichever comes first.
.10b5	a2 a2		ldx #$a2			ldx 	#TKW_ENDIF
.10b7	4c f5 37	jmp $37f5			jmp		ScanForward
.10ba					Command_ELSE:
.10ba	a2 a2		ldx #$a2			ldx 	#TKW_ENDIF
.10bc	8a		txa				txa
.10bd	4c f5 37	jmp $37f5			jmp		ScanForward
.10c0					Command_ENDIF:
.10c0	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/input.asm

=32					MaxInputSize = 32
.0af2					InputBuffer:
>0af2							.fill 	MaxInputSize+1
.10c1					Command_Input:
.10c1	b1 02		lda ($02),y			lda 	(codePtr),y 			; see what's next.
.10c3	c8		iny				iny
.10c4	c9 c8		cmp #$c8			cmp 	#TKW_COMMA 				; ignore commas.
.10c6	f0 f9		beq $10c1			beq 	Command_Input
.10c8	88		dey				dey 							; undo consume
.10c9	c9 c7		cmp #$c7			cmp 	#TKW_COLON
.10cb	f0 54		beq $1121			beq 	_CIExit 				; : or EOL, exit
.10cd	c9 80		cmp #$80			cmp 	#TOK_EOL
.10cf	f0 50		beq $1121			beq 	_CIExit
.10d1	c9 40		cmp #$40			cmp 	#$40 					; variable ?
.10d3	90 12		bcc $10e7			bcc 	_CIVariable
.10d5	c9 85		cmp #$85			cmp 	#TOK_STR 				; if not quoted string syntax error.
.10d7	d0 43		bne $111c			bne 	_CISyntax
.10d9	a2 00		ldx #$00			ldx 	#0
.10db	20 db 1c	jsr $1cdb			jsr 	EvaluateString 			; evaluate and print string
.10de	20 e7 11	jsr $11e7			jsr 	TOSToTemp0
.10e1	20 01 14	jsr $1401			jsr 	PrintString
.10e4	4c c1 10	jmp $10c1			jmp 	Command_Input
.10e7					_CIVariable:
.10e7	a2 00		ldx #$00			ldx 	#0 						; evaluate a reference.
.10e9	20 19 1d	jsr $1d19			jsr 	EvaluateReference
.10ec					_CIRetry:
.10ec	a9 3f		lda #$3f			lda 	#"?"
.10ee	a2 12		ldx #$12		ldx	#18
.10f0	20 9c 24	jsr $249c		jsr	deviceHandler
.10f3	98		tya				tya
.10f4	48		pha				pha
.10f5	20 35 11	jsr $1135			jsr 	InputString 			; input a string.
.10f8	a2 01		ldx #$01			ldx 	#1
.10fa	20 22 11	jsr $1122			jsr 	BufferToStackX 			; make stack,x ref input string.
.10fd	a5 40		lda $40				lda 	esType 					; if target type numeric
.10ff	29 40		and #$40			and 	#$40 					; then convert to number
.1101	d0 11		bne $1114			bne 	_CIWrite
.1103	a2 01		ldx #$01			ldx 	#1
.1105	20 e7 11	jsr $11e7			jsr 	TOSToTemp0 				; string address in temp0, goes here.
.1108	a9 0a		lda #$0a			lda 	#10
.110a	20 b6 20	jsr $20b6			jsr 	MInt32FromString 		; convert it back from a string.
.110d	68		pla				pla
.110e	a8		tay				tay
.110f	b0 03		bcs $1114			bcs 	_CIWrite 				; successfully converted.
.1111	18		clc				clc 							; default fail FP conversion
.1112	90 d8		bcc $10ec			bcc		_CIRetry				; failed, try again.
.1114					_CIWrite:
.1114	a2 00		ldx #$00			ldx 	#0
.1116	20 85 11	jsr $1185			jsr 	WriteValue
.1119	4c c1 10	jmp $10c1			jmp 	Command_Input
.111c					_CISyntax:
.111c	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.111e	20 b9 24	jsr $24b9		jsr	errorHandler
.1121					_CIExit:
.1121	60		rts				rts
.1122					BufferToStackX:
.1122	a9 f2		lda #$f2			lda 	#InputBuffer & $FF
.1124	95 48		sta $48,x			sta 	esInt0,x
.1126	a9 0a		lda #$0a			lda 	#InputBuffer >> 8
.1128	95 50		sta $50,x			sta 	esInt1,x
.112a	a9 00		lda #$00			lda 	#0
.112c	95 58		sta $58,x			sta 	esInt2,x
.112e	95 60		sta $60,x			sta 	esInt3,x
.1130	a9 40		lda #$40			lda 	#$40
.1132	95 40		sta $40,x			sta 	esType,x
.1134	60		rts				rts
.1135					InputString:
.1135	a9 00		lda #$00			lda 	#0
.1137	8d f2 0a	sta $0af2			sta 	InputBuffer
.113a					_InputLoop:
.113a	a2 08		ldx #$08		ldx	#8
.113c	20 9c 24	jsr $249c		jsr	deviceHandler
.113f	c9 00		cmp #$00			cmp 	#0
.1141	f0 f7		beq $113a			beq 	_InputLoop
.1143	c9 08		cmp #$08			cmp 	#8
.1145	f0 19		beq $1160			beq 	_InputBackspace
.1147	c9 0d		cmp #$0d			cmp 	#13
.1149	f0 21		beq $116c			beq 	_InputExit
.114b	ae f2 0a	ldx $0af2			ldx 	InputBuffer
.114e	e0 20		cpx #$20			cpx 	#MaxInputSize 			; too many characters
.1150	f0 e8		beq $113a			beq 	_InputLoop
.1152	9d f3 0a	sta $0af3,x			sta 	InputBuffer+1,x 		; write char
.1155	ee f2 0a	inc $0af2			inc 	InputBuffer 			; advance count.
.1158					_InputPrintLoop:
.1158	a2 12		ldx #$12		ldx	#18
.115a	20 9c 24	jsr $249c		jsr	deviceHandler
.115d	4c 3a 11	jmp $113a			jmp	 	_InputLoop
.1160					_InputBackspace:
.1160	ad f2 0a	lda $0af2			lda 	InputBuffer 			; at start
.1163	f0 d5		beq $113a			beq 	_InputLoop
.1165	ce f2 0a	dec $0af2			dec 	InputBuffer
.1168	a9 08		lda #$08			lda 	#8
.116a	d0 ec		bne $1158			bne 	_InputPrintLoop
.116c					_InputExit:
.116c	a2 02		ldx #$02		ldx	#2
.116e	20 9c 24	jsr $249c		jsr	deviceHandler
.1171	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/let.asm

.1172					CommandLet:
.1172	a2 00		ldx #$00			ldx 	#0  						; get address to write.
.1174	20 19 1d	jsr $1d19			jsr 	EvaluateReference
.1177	a9 8d		lda #$8d			lda 	#TKW_EQUAL 					; check for equals
.1179	20 b0 22	jsr $22b0			jsr 	CheckToken
.117c	e8		inx				inx 								; do RHS
.117d	20 c7 1c	jsr $1cc7			jsr 	Evaluate 					; evaluate and dereference
.1180	ca		dex				dex
.1181	20 85 11	jsr $1185			jsr 	WriteValue 					; write it out
.1184	60		rts				rts
.1185					WriteValue:
.1185	98		tya				tya
.1186	48		pha				pha
.1187	20 e7 11	jsr $11e7			jsr 	TOSToTemp0 					; set temp0 to point to target address.
.118a	b5 40		lda $40,x			lda 	esType,x 					; check the string flags match
.118c	55 41		eor $41,x			eor 	esType+1,x 					; one string, one number causes an error.
.118e	29 40		and #$40			and 	#$40
.1190	d0 50		bne $11e2			bne		_WVType
.1192	a0 01		ldy #$01			ldy 	#1 							; for string, copy 0 and 1.
.1194	b5 40		lda $40,x			lda 	esType,x 					; check for string assignment
.1196	29 40		and #$40			and 	#$40
.1198	d0 1f		bne $11b9			bne 	_WVCopyString
.119a	b5 40		lda $40,x			lda 	esType,x 					; check both are integer.
.119c	15 41		ora $41,x			ora 	esType+1,x
.119e	4a		lsr a				lsr 	a
.119f	90 22		bcc $11c3			bcc 	_WVCopyData4 				; copy 4 data bytes.
.11a1	b5 40		lda $40,x			lda 	esType,x
.11a3	4a		lsr a				lsr 	a
.11a4	90 3c		bcc $11e2			bcc 	_WVType
.11a6	e8		inx				inx 								; force the value being written to be a float.
.11a7	20 31 18	jsr $1831			jsr 	BPMakeFloat
.11aa	ca		dex				dex
.11ab	20 e7 11	jsr $11e7			jsr 	TOSToTemp0 					; set Temp0 to write address
.11ae	e8		inx				inx
.11af	8a		txa				txa
.11b0	a2 20		ldx #$20		ldx	#32
.11b2	20 eb 27	jsr $27eb		jsr	floatingpointHandler
.11b5	aa		tax				tax
.11b6	4c df 11	jmp $11df			jmp 	_WVCopyExit
.11b9					_WVCopyString:
.11b9	8a		txa				txa
.11ba	a2 0c		ldx #$0c		ldx	#12
.11bc	20 4f 2c	jsr $2c4f		jsr	stringHandler
.11bf	aa		tax				tax
.11c0	4c df 11	jmp $11df			jmp 	_WVCopyExit
.11c3					_WVCopyData4:
.11c3	b5 40		lda $40,x			lda 	esType,x 					; is the int ref a byte ref ?
.11c5	29 20		and #$20			and 	#$20 						; (e.g. is bit 5 set)
.11c7	d0 10		bne $11d9			bne 	_WVCopyData1
.11c9	a0 03		ldy #$03			ldy 	#3
.11cb	b5 61		lda $61,x			lda 	esInt3+1,x
.11cd	91 04		sta ($04),y			sta 	(temp0),y
.11cf	88		dey				dey
.11d0	b5 59		lda $59,x			lda 	esInt2+1,x
.11d2	91 04		sta ($04),y			sta 	(temp0),y
.11d4	88		dey				dey
.11d5	b5 51		lda $51,x			lda 	esInt1+1,x
.11d7	91 04		sta ($04),y			sta 	(temp0),y
.11d9					_WVCopyData1:
.11d9	a0 00		ldy #$00			ldy 	#0
.11db	b5 49		lda $49,x			lda 	esInt0+1,x
.11dd	91 04		sta ($04),y			sta 	(temp0),y
.11df					_WVCopyExit:
.11df	68		pla				pla
.11e0	a8		tay				tay
.11e1	60		rts				rts
.11e2					_WVType:
.11e2	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.11e4	20 b9 24	jsr $24b9		jsr	errorHandler
.11e7					TOSToTemp0:
.11e7	b5 48		lda $48,x			lda 	esInt0,x
.11e9	85 04		sta $04				sta 	temp0
.11eb	b5 50		lda $50,x			lda 	esInt1,x
.11ed	85 05		sta $05				sta 	temp0+1
.11ef	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/list.asm

.370a					CommandList:
.370a	a2 00		ldx #$00			ldx		#0 							; set start/end lines in stack 0/1
.370c	20 48 22	jsr $2248			jsr 	MInt32False
.370f	e8		inx				inx
.3710	20 44 22	jsr $2244			jsr 	MInt32True
.3713	b1 02		lda ($02),y			lda 	(codePtr),y
.3715	c9 c8		cmp #$c8			cmp 	#TKW_COMMA 					; list ,xxxx
.3717	f0 15		beq $372e			beq 	_CLEndLine
.3719	c9 00		cmp #$00			cmp 	#0 							; list ... on its own.
.371b	30 1b		bmi $3738			bmi 	_CLDoListing
.371d	a2 00		ldx #$00			ldx 	#0 							; get start
.371f	20 e6 1c	jsr $1ce6			jsr 	EvaluateInteger
.3722	b1 02		lda ($02),y			lda 	(codePtr),y 				; , follows
.3724	c9 c8		cmp #$c8			cmp 	#TKW_COMMA
.3726	f0 06		beq $372e			beq 	_CLEndLine
.3728	20 86 21	jsr $2186			jsr 	MInt32CopyUp 				; copy first to second
.372b	4c 38 37	jmp $3738			jmp 	_CLDoListing
.372e					_CLEndLine:
.372e	c8		iny				iny 								; skip comma
.372f	b1 02		lda ($02),y			lda 	(codePtr),y  				; no number follows.
.3731	30 05		bmi $3738			bmi 	_CLDoListing
.3733	a2 01		ldx #$01			ldx 	#1
.3735	20 e6 1c	jsr $1ce6			jsr 	EvaluateInteger				; get end
.3738					_CLDoListing:
.3738	20 78 15	jsr $1578			jsr 	ResetCodeAddress 			; back to the start.
.373b					_CLCheckLoop:
.373b	a0 00		ldy #$00			ldy 	#0							; check end.
.373d	b1 02		lda ($02),y			lda 	(codePtr),y
.373f	f0 26		beq $3767			beq 	_CLEnd
.3741	a2 00		ldx #$00			ldx 	#0 							; compare vs lower.
.3743	20 6a 37	jsr $376a			jsr 	CLCompareLineTOS
.3746	c9 ff		cmp #$ff			cmp 	#255 						; if < skip
.3748	f0 0d		beq $3757			beq 	_CLNext
.374a	e8		inx				inx
.374b	20 6a 37	jsr $376a			jsr 	CLCompareLineTOS 			; compare vs higher
.374e	c9 01		cmp #$01			cmp 	#1
.3750	f0 05		beq $3757			beq 	_CLNext
.3752	a2 02		ldx #$02		ldx	#2
.3754	20 fb 32	jsr $32fb		jsr	tokeniserHandler
.3757					_CLNext:
.3757	a0 00		ldy #$00			ldy 	#0
.3759	b1 02		lda ($02),y			lda 	(codePtr),y
.375b	18		clc				clc
.375c	65 02		adc $02				adc 	codePtr
.375e	85 02		sta $02				sta 	codePtr
.3760	90 d9		bcc $373b			bcc 	_CLCheckLoop
.3762	e6 03		inc $03				inc 	codePtr+1
.3764	4c 3b 37	jmp $373b			jmp 	_CLCheckLoop
.3767					_CLEnd:
.3767	4c f6 22	jmp $22f6			jmp 	WarmStart
.376a					CLCompareLineTOS:
.376a	a0 01		ldy #$01			ldy 	#1
.376c	b1 02		lda ($02),y			lda 	(codePtr),y
.376e	55 48		eor $48,x			eor 	esInt0,x
.3770	85 04		sta $04				sta 	temp0
.3772	c8		iny				iny
.3773	b1 02		lda ($02),y			lda 	(codePtr),y
.3775	55 50		eor $50,x			eor 	esInt1,x
.3777	05 04		ora $04				ora 	temp0
.3779	f0 10		beq $378b			beq 	_CLCLTExit
.377b	88		dey				dey
.377c	b1 02		lda ($02),y			lda 	(codePtr),y
.377e	d5 48		cmp $48,x			cmp 	esInt0,x
.3780	c8		iny				iny
.3781	b1 02		lda ($02),y			lda 	(codePtr),y
.3783	f5 50		sbc $50,x			sbc 	esInt1,x
.3785	a9 ff		lda #$ff			lda 	#255
.3787	90 02		bcc $378b			bcc 	_CLCLTExit
.3789	a9 01		lda #$01			lda 	#1
.378b					_CLCLTExit:
.378b	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/loadsave.asm

.11f0					CommandLoad:
.11f0	20 18 12	jsr $1218			jsr 	CLSParameters 					; get parameters for load.
.11f3	08		php				php
.11f4	a2 0c		ldx #$0c		ldx	#12
.11f6	20 9c 24	jsr $249c		jsr	deviceHandler
.11f9	28		plp				plp
.11fa	b0 08		bcs $1204			bcs 	_CLExit 						; if CC then load a program, so warm start.
.11fc	20 18 10	jsr $1018			jsr 	CommandClear
.11ff	a2 02		ldx #$02		ldx	#2
.1201	20 b4 29	jsr $29b4		jsr	interactionHandler
.1204					_CLExit
.1204	60		rts				rts
.1205					CommandSave:
.1205	20 18 12	jsr $1218			jsr 	CLSParameters					; get parameters for save
.1208	90 08		bcc $1212			bcc 	_CSNoOverrideAddress
.120a	20 c8 22	jsr $22c8			jsr 	CheckComma 						; should be a comma.
.120d	a2 02		ldx #$02			ldx 	#2
.120f	20 e6 1c	jsr $1ce6			jsr 	EvaluateInteger 				; get save end address.
.1212					_CSNoOverrideAddress:
.1212	a2 14		ldx #$14		ldx	#20
.1214	20 9c 24	jsr $249c		jsr	deviceHandler
.1217	60		rts				rts
.1218					CLSParameters:
.1218	a2 00		ldx #$00			ldx 	#0 								; string
.121a	20 db 1c	jsr $1cdb			jsr 	EvaluateString
.121d	e8		inx				inx 									; erase out +1 +2
.121e	20 48 22	jsr $2248			jsr 	MInt32False
.1221	e8		inx				inx
.1222	20 48 22	jsr $2248			jsr 	MInt32False
.1225	ad c8 0a	lda $0ac8			lda 	basePage 						; default start address.
.1228	85 49		sta $49				sta 	esInt0+1
.122a	ad c9 0a	lda $0ac9			lda 	basePage+1
.122d	85 51		sta $51				sta 	esInt1+1
.122f	ad ca 0a	lda $0aca			lda 	endProgram 						; default end address
.1232	85 4a		sta $4a				sta 	esInt0+2
.1234	ad cb 0a	lda $0acb			lda 	endProgram+1
.1237	85 52		sta $52				sta 	esInt1+2
.1239	18		clc				clc
.123a	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/local.asm

.0b13					storeSize:
>0b13							.fill 	1
.123b					CommandLocal:
.123b	a2 00		ldx #$00			ldx 	#0
.123d	20 59 12	jsr $1259			jsr 	LocaliseVariable 			; localise one.
.1240					_CLCheckNext:
.1240	b1 02		lda ($02),y			lda 	(codePtr),y 				; what follows ?
.1242	c8		iny				iny
.1243	c9 8d		cmp #$8d			cmp 	#TKW_EQUAL 					; local x = 2 ?
.1245	f0 06		beq $124d			beq 	_CLAssignment
.1247	c9 c8		cmp #$c8			cmp 	#TKW_COMMA 					; comma try again.
.1249	f0 f0		beq $123b			beq 	CommandLocal
.124b	88		dey				dey
.124c	60		rts				rts
.124d					_CLAssignment:
.124d	a2 01		ldx #$01			ldx 	#1
.124f	20 c7 1c	jsr $1cc7			jsr 	Evaluate 					; evaluate RHS
.1252	ca		dex				dex
.1253	20 85 11	jsr $1185			jsr 	WriteValue
.1256	4c 40 12	jmp $1240			jmp 	_CLCheckNext
.1259					LocaliseVariable:
.1259	b1 02		lda ($02),y			lda 	(codePtr),y 				; check it's a variable.
.125b	c9 40		cmp #$40			cmp 	#$40
.125d	b0 67		bcs $12c6			bcs 	_LVSyntax
.125f	8a		txa				txa 								; get the address of that variable.
.1260	a2 00		ldx #$00		ldx	#0
.1262	20 f2 35	jsr $35f2		jsr	variableHandler
.1265	aa		tax				tax
.1266	8a		txa				txa
.1267	48		pha				pha
.1268	98		tya				tya
.1269	48		pha				pha
.126a	20 e7 11	jsr $11e7			jsr 	TOSToTemp0 					; the address of the variable is now in temp0.
.126d	b5 40		lda $40,x			lda 	esType,x 					; get the type
.126f	0a		asl a				asl 	a
.1270	10 16		bpl $1288			bpl 	_LVPushNumber
.1272	a0 00		ldy #$00			ldy 	#0 							; put address of data in temp1
.1274	b1 04		lda ($04),y			lda 	(temp0),y
.1276	c8		iny				iny
.1277	85 06		sta $06				sta 	temp1
.1279	b1 04		lda ($04),y			lda 	(temp0),y
.127b	85 07		sta $07				sta 	temp1+1
.127d	a0 00		ldy #$00			ldy 	#0 	 						; get length
.127f	b1 06		lda ($06),y			lda 	(temp1),y
.1281	aa		tax				tax 								; into X
.1282	e8		inx				inx 								; +1 for length.
.1283	a9 24		lda #$24			lda 	#markerString
.1285	4c 9d 12	jmp $129d			jmp 	_LVWriteFrame
.1288					_LVPushNumber:
.1288	a5 04		lda $04				lda 	temp0 						; storage address and data source are the same
.128a	85 06		sta $06				sta 	temp1
.128c	a5 05		lda $05				lda 	temp0+1
.128e	85 07		sta $07				sta 	temp1+1
.1290	b5 40		lda $40,x			lda 	esType,x 					; put float flag into carry.
.1292	4a		lsr a				lsr 	a
.1293	a9 25		lda #$25			lda 	#markerInt 					; get marker and size.
.1295	a2 04		ldx #$04			ldx 	#VarISize
.1297	90 04		bcc $129d			bcc 	_LVIsInteger
.1299	a9 23		lda #$23			lda 	#markerFloat
.129b	a2 06		ldx #$06			ldx 	#VarFSize
.129d					_LVIsInteger:
.129d					_LVWriteFrame:
.129d	8e 13 0b	stx $0b13			stx 	storeSize 					; number of bytes to copy from (temp0)
.12a0	e8		inx				inx 								; allocate 3 bytes, 2 for the address, 1 for the marker.
.12a1	e8		inx				inx
.12a2	e8		inx				inx
.12a3	20 09 23	jsr $2309			jsr 	RSClaim 					; create the stack frame.
.12a6	a5 04		lda $04				lda 	temp0 						; copy the target address to slots 1 & 2
.12a8	a0 01		ldy #$01			ldy 	#1
.12aa	91 78		sta ($78),y			sta 	(rsPointer),y
.12ac	c8		iny				iny
.12ad	a5 05		lda $05				lda 	temp0+1
.12af	91 78		sta ($78),y			sta 	(rsPointer),y
.12b1	a0 00		ldy #$00			ldy 	#0
.12b3					_LVCopyData:
.12b3	b1 06		lda ($06),y			lda 	(temp1),y 					; get data from source, temp1
.12b5	c8		iny				iny 								; write allowing for the header bit.
.12b6	c8		iny				iny
.12b7	c8		iny				iny
.12b8	91 78		sta ($78),y			sta 	(rsPointer),y
.12ba	88		dey				dey
.12bb	88		dey				dey
.12bc	ce 13 0b	dec $0b13			dec 	storeSize 					; do it storesize times
.12bf	d0 f2		bne $12b3			bne 	_LVCopyData
.12c1	68		pla				pla
.12c2	a8		tay				tay
.12c3	68		pla				pla
.12c4	aa		tax				tax
.12c5	60		rts				rts
.12c6					_LVSyntax:
.12c6	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.12c8	20 b9 24	jsr $24b9		jsr	errorHandler
.12cb					RestoreLocals:
.12cb	a2 00		ldx #$00			ldx 	#0
.12cd	a1 78		lda ($78,x)			lda 	(rsPointer,x)
.12cf	c9 40		cmp #$40			cmp	 	#64
.12d1	90 01		bcc $12d4			bcc 	_RLocal
.12d3	60		rts				rts
.12d4					_RLocal:
.12d4	8a		txa				txa
.12d5	48		pha				pha
.12d6	98		tya				tya
.12d7	48		pha				pha
.12d8	a0 01		ldy #$01			ldy 	#1 							; copy target address to temp0
.12da	b1 78		lda ($78),y			lda 	(rsPointer),y
.12dc	85 04		sta $04				sta 	temp0
.12de	c8		iny				iny
.12df	b1 78		lda ($78),y			lda 	(rsPointer),y
.12e1	85 05		sta $05				sta 	temp0+1
.12e3	a0 00		ldy #$00			ldy 	#0 							; get type back.
.12e5	b1 78		lda ($78),y			lda 	(rsPointer),y
.12e7	c9 24		cmp #$24			cmp 	#markerString 				; string is ... different :)
.12e9	f0 28		beq $1313			beq 	_RString
.12eb	a2 04		ldx #$04			ldx		#VARISize 					; size integer
.12ed	c9 25		cmp #$25			cmp 	#markerInt
.12ef	f0 02		beq $12f3			beq 	_RIsInteger
.12f1	a2 06		ldx #$06			ldx 	#VARFSize 					; size float
.12f3					_RIsInteger:
.12f3	8a		txa				txa
.12f4	48		pha				pha
.12f5	a0 03		ldy #$03			ldy 	#3							; start size to copy back from pointer.
.12f7					_RCopyBack:
.12f7	b1 78		lda ($78),y			lda 	(rsPointer),y
.12f9	88		dey				dey
.12fa	88		dey				dey
.12fb	88		dey				dey
.12fc	91 04		sta ($04),y			sta 	(temp0),y
.12fe	c8		iny				iny
.12ff	c8		iny				iny
.1300	c8		iny				iny
.1301	c8		iny				iny
.1302	ca		dex				dex
.1303	d0 f2		bne $12f7			bne 	_RCopyBack
.1305	68		pla				pla 								; get size add 3
.1306	18		clc				clc
.1307	69 03		adc #$03			adc 	#3 							; (2 for address one for marker)
.1309					_RRestoreAAndLoop:
.1309	20 2b 23	jsr $232b			jsr 	RSFree
.130c	68		pla				pla
.130d	a8		tay				tay
.130e	68		pla				pla
.130f	aa		tax				tax
.1310	4c cb 12	jmp $12cb			jmp 	RestoreLocals 				; go see if there are any more locals.
.1313					_RString:
.1313	a2 00		ldx #$00			ldx 	#0
.1315	a0 01		ldy #$01			ldy 	#1 							; set up for a string write.
.1317	b1 78		lda ($78),y			lda 	(rsPointer),y
.1319	95 48		sta $48,x			sta 	esInt0,x
.131b	c8		iny				iny
.131c	b1 78		lda ($78),y			lda 	(rsPointer),y
.131e	95 50		sta $50,x			sta 	esInt1,x
.1320	18		clc				clc
.1321	a5 78		lda $78				lda 	rsPointer
.1323	69 03		adc #$03			adc 	#3
.1325	95 49		sta $49,x			sta 	esInt0+1,x
.1327	a5 79		lda $79				lda 	rsPointer+1
.1329	69 00		adc #$00			adc 	#0
.132b	95 51		sta $51,x			sta 	esInt1+1,x
.132d	8a		txa				txa
.132e	a2 0c		ldx #$0c		ldx	#12
.1330	20 4f 2c	jsr $2c4f		jsr	stringHandler
.1333	a0 03		ldy #$03			ldy 	#3 							; get string length
.1335	b1 78		lda ($78),y			lda 	(rsPointer),y
.1337	18		clc				clc
.1338	69 04		adc #$04			adc 	#4 							; add 4 (pointer, marker, length) to restore.
.133a	4c 09 13	jmp $1309			jmp 	_RRestoreAAndLoop

;******  Return to file: main/main.asm


;******  Processing file: main/commands/new.asm

.133d					Command_New:
.133d					Command_XNew:
.133d	20 78 15	jsr $1578			jsr 	ResetCodeAddress 			; point to first line
.1340	a0 00		ldy #$00			ldy 	#0 							; and zap it.
.1342	98		tya				tya
.1343	91 02		sta ($02),y			sta 	(codePtr),y
.1345	20 18 10	jsr $1018			jsr 	CommandClear 				; clear everything down.
.1348	4c 44 17	jmp $1744			jmp 	CommandEND 					; do END code, as there's nothing to run.

;******  Return to file: main/main.asm


;******  Processing file: main/commands/poke.asm

.134b					Command_Poke:
.134b	a9 01		lda #$01			lda 	#1
.134d	d0 06		bne $1355			bne 	PokeGeneral
.134f					Command_Doke:
.134f	a9 02		lda #$02			lda 	#2
.1351	d0 02		bne $1355			bne 	PokeGeneral
.1353					Command_Loke:
.1353	a9 03		lda #$03			lda 	#3
.1355					PokeGeneral:
.1355	48		pha				pha 								; save id (PDL = 123)
.1356	20 e4 1c	jsr $1ce4			jsr 	EvaluateRootInteger 		; target address
.1359	20 c8 22	jsr $22c8			jsr	 	CheckComma
.135c	e8		inx				inx
.135d	20 e6 1c	jsr $1ce6			jsr 	EvaluateInteger 			; what value to POKE ?
.1360	ca		dex				dex
.1361	20 e7 11	jsr $11e7			jsr 	TOSToTemp0 					; temp0 points to the target address
.1364	84 0c		sty $0c				sty 	tempShort 					; save Y
.1366	68		pla				pla 								; get copy type (1-3) and dispatch
.1367	aa		tax				tax
.1368	ca		dex				dex
.1369	f0 14		beq $137f			beq 	_Poke1
.136b	ca		dex				dex
.136c	f0 0b		beq $1379			beq 	_Poke2
.136e	a0 03		ldy #$03			ldy 	#3							; put 4 bytes
.1370	a5 61		lda $61				lda 	esInt3+1
.1372	91 04		sta ($04),y			sta 	(temp0),y
.1374	88		dey				dey
.1375	a5 59		lda $59				lda 	esInt2+1
.1377	91 04		sta ($04),y			sta 	(temp0),y
.1379					_Poke2:
.1379	a0 01		ldy #$01			ldy 	#1
.137b	a5 51		lda $51				lda 	esInt1+1
.137d	91 04		sta ($04),y			sta 	(temp0),y
.137f					_Poke1:
.137f	a0 00		ldy #$00			ldy 	#0
.1381	a5 49		lda $49				lda 	esInt0+1
.1383	91 04		sta ($04),y			sta 	(temp0),y
.1385	a4 0c		ldy $0c				ldy 	tempShort 					; restore Y and exit
.1387	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/print.asm

.0b14					lastPrintToken:
>0b14							.fill 	1
.1388					Command_Print:
.1388	a9 00		lda #$00			lda 	#0 							; clear LPT to a non token
.138a	8d 14 0b	sta $0b14			sta 	lastPrintToken
.138d	88		dey				dey
.138e					_PrintLoopSkip:
.138e	c8		iny				iny
.138f					_PrintLoop:
.138f	b1 02		lda ($02),y			lda 	(codePtr),y 				; what follows
.1391	c9 80		cmp #$80			cmp 	#TOK_EOL  					; done if end of line or colon
.1393	f0 5b		beq $13f0			beq 	_PrintExit
.1395	c9 c7		cmp #$c7			cmp 	#TKW_COLON
.1397	f0 57		beq $13f0			beq 	_PrintExit
.1399	8d 14 0b	sta $0b14			sta 	lastPrintToken 				; update Last print token, so we check ; and ,
.139c	c9 c9		cmp #$c9			cmp 	#TKW_SEMICOLON 				; ignore semicolon
.139e	f0 ee		beq $138e			beq 	_PrintLoopSkip
.13a0	c9 ca		cmp #$ca			cmp 	#TKW_QUOTE 					; ' is new line
.13a2	f0 3c		beq $13e0			beq	 	_PrintNewLine
.13a4	c9 c8		cmp #$c8			cmp 	#TKW_COMMA 					; , is print tab
.13a6	f0 40		beq $13e8			beq 	_PrintTab
.13a8	20 c5 1c	jsr $1cc5			jsr 	EvaluateRoot 				; evaluate something at the root
.13ab	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.13ad	85 04		sta $04				sta 	temp0
.13af	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.13b1	85 05		sta $05				sta 	1+(temp0)
.13b3	a5 40		lda $40				lda 	esType 						; get type
.13b5	f0 15		beq $13cc			beq		_PrintInteger
.13b7	4a		lsr a				lsr 	a 							; check for floating point
.13b8	b0 08		bcs $13c2			bcs 	_PrintFloat
.13ba					_PrintString:
.13ba	a2 00		ldx #$00			ldx 	#0 							; bottom string to temp0
.13bc	20 e7 11	jsr $11e7			jsr 	TOSToTemp0
.13bf	4c da 13	jmp $13da			jmp 	_PrintTemp0 				; print no leading space.
.13c2					_PrintFloat:
.13c2	a9 00		lda #$00			lda 	#0 							; stack level.
.13c4	a2 14		ldx #$14		ldx	#20
.13c6	20 eb 27	jsr $27eb		jsr	floatingpointHandler
.13c9	4c d3 13	jmp $13d3			jmp 	_PrintSpaceTemp0
.13cc					_PrintInteger:
.13cc	a9 8a		lda #$8a			lda 	#10+$80 					; base 10 signed
.13ce	a2 00		ldx #$00			ldx 	#0 							; bottom stack element
.13d0	20 9e 21	jsr $219e			jsr 	MInt32ToString				; convert to text
.13d3					_PrintSpaceTemp0:
.13d3	a9 20		lda #$20			lda 	#32
.13d5	a2 12		ldx #$12		ldx	#18
.13d7	20 9c 24	jsr $249c		jsr	deviceHandler
.13da					_PrintTemp0:
.13da	20 01 14	jsr $1401			jsr 	PrintString
.13dd	4c 8f 13	jmp $138f			jmp 	_PrintLoop
.13e0					_PrintNewLine:
.13e0	a2 02		ldx #$02		ldx	#2
.13e2	20 9c 24	jsr $249c		jsr	deviceHandler
.13e5	4c 8e 13	jmp $138e			jmp 	_PrintLoopSkip
.13e8					_PrintTab:
.13e8	a2 16		ldx #$16		ldx	#22
.13ea	20 9c 24	jsr $249c		jsr	deviceHandler
.13ed	4c 8e 13	jmp $138e			jmp 	_PrintLoopSkip
.13f0					_PrintExit:
.13f0	ad 14 0b	lda $0b14			lda		lastPrintToken 				; check last token
.13f3	c9 c9		cmp #$c9			cmp 	#TKW_SEMICOLON 				; if , or ; do not print NL
.13f5	f0 09		beq $1400			beq 	_PrintExit2
.13f7	c9 c8		cmp #$c8			cmp 	#TKW_COMMA
.13f9	f0 05		beq $1400			beq 	_PrintExit2
.13fb	a2 02		ldx #$02		ldx	#2
.13fd	20 9c 24	jsr $249c		jsr	deviceHandler
.1400					_PrintExit2:
.1400	60		rts				rts
.1401					PrintString:
.1401	8a		txa				txa
.1402	48		pha				pha
.1403	98		tya				tya
.1404	48		pha				pha
.1405	a0 00		ldy #$00			ldy 	#0							; get length
.1407	b1 04		lda ($04),y			lda 	(temp0),y
.1409	aa		tax				tax 								; into X
.140a	e0 00		cpx #$00	_PSLoop:cpx 	#0 							; finished ?
.140c	f0 10		beq $141e			beq 	_PSExit
.140e	ca		dex				dex
.140f	8a		txa				txa
.1410	48		pha				pha
.1411	c8		iny				iny
.1412	b1 04		lda ($04),y			lda 	(temp0),y
.1414	a2 12		ldx #$12		ldx	#18
.1416	20 9c 24	jsr $249c		jsr	deviceHandler
.1419	68		pla				pla
.141a	aa		tax				tax
.141b	4c 0a 14	jmp $140a			jmp 	_PSLoop
.141e					_PSExit:
.141e	68		pla				pla
.141f	a8		tay				tay
.1420	68		pla				pla
.1421	aa		tax				tax
.1422	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/proc.asm

.0b15					paramCount:
>0b15							.fill 	1
.1423					CallProc:
.1423	20 69 16	jsr $1669			jsr 	FindProcedure 				; find procedure, put in temp0. A contains name length.
.1426	48		pha				pha 								; save length on stack
.1427	85 0c		sta $0c				sta 	tempShort 					; save length in tempShort
.1429	a5 05		lda $05				lda 	temp0+1 					; save procedure target on stack.
.142b	48		pha				pha
.142c	a5 04		lda $04				lda 	temp0
.142e	48		pha				pha
.142f	98		tya				tya 								; calculate Y + length
.1430	18		clc				clc
.1431	65 0c		adc $0c				adc 	tempShort
.1433	a8		tay				tay
.1434	a2 00		ldx #$00			ldx 	#0 							; where the first parameter goes - 1
.1436					_CallProcEvalParams:
.1436	e8		inx				inx
.1437	b1 02		lda ($02),y			lda 	(codePtr),y 				; do we have ) ?
.1439	c9 c6		cmp #$c6			cmp 	#TKW_RPAREN
.143b	f0 0b		beq $1448			beq 	_CPDoneParams
.143d	20 c7 1c	jsr $1cc7			jsr 	Evaluate 					; evaluate a parameter
.1440	b1 02		lda ($02),y			lda 	(codePtr),Y 				; get what's next, preconsume
.1442	c8		iny				iny
.1443	c9 c8		cmp #$c8			cmp 	#TKW_COMMA 					; if comma, go get another parameter
.1445	f0 ef		beq $1436			beq 	_CallProcEvalParams
.1447	88		dey				dey 								; undo consumption.
.1448					_CPDoneParams:
.1448	20 bb 22	jsr $22bb			jsr 	CheckRightParen 			; check closing parenthesis.
.144b	8e 15 0b	stx $0b15			stx 	paramCount 					; store parameter count+1
.144e	a2 04		ldx #$04			ldx 	#4							; make space on stack
.1450	a9 50		lda #$50			lda 	#markerPROC
.1452	20 09 23	jsr $2309			jsr 	RSClaim
.1455	a9 01		lda #$01			lda 	#1 							; store return address.
.1457	20 35 23	jsr $2335			jsr 	RSSavePosition
.145a	68		pla				pla 								; get the new code Ptr
.145b	85 02		sta $02				sta 	codePtr
.145d	68		pla				pla
.145e	85 03		sta $03				sta 	codePtr+1
.1460	68		pla				pla 								; length of name + 4 is the param start.
.1461	18		clc				clc
.1462	69 04		adc #$04			adc 	#4
.1464	a8		tay				tay
.1465	a2 ff		ldx #$ff			ldx 	#$FF
.1467					_CPLoadParameters:
.1467	e8		inx				inx 								; point to where the address should be loaded.
.1468	ec 15 0b	cpx $0b15			cpx 	paramCount 					; too many parameters in definition ?
.146b	f0 1e		beq $148b			beq 	_CPParamError
.146d	b1 02		lda ($02),y			lda 	(codePtr),y					; what follows
.146f	c9 c6		cmp #$c6			cmp 	#TKW_RPAREN 				; is it the right bracket
.1471	f0 0e		beq $1481			beq 	_CPParamComplete 			; done all the parameters
.1473	20 59 12	jsr $1259			jsr 	LocaliseVariable 			; make following variable local, ref in tos,x
.1476	20 85 11	jsr $1185			jsr 	WriteValue 					; copy the evaluated parameter into there.
.1479	b1 02		lda ($02),y			lda 	(codePtr),y 				; followed by a comma ?
.147b	c8		iny				iny
.147c	c9 c8		cmp #$c8			cmp 	#TKW_COMMA
.147e	f0 e7		beq $1467			beq 	_CPLoadParameters
.1480	88		dey				dey 								; no, unconsume and check for )
.1481					_CPParamComplete:
.1481	20 bb 22	jsr $22bb			jsr 	CheckRightParen 			; check )
.1484	e8		inx				inx 								; check right number of parameters
.1485	ec 15 0b	cpx $0b15			cpx 	paramCount
.1488	d0 01		bne $148b			bne 	_CPParamError
.148a	60		rts				rts
.148b					_CPParamError:
.148b	a2 18		ldx #$18			ldx 	#ErrorID_Params
.148d	20 b9 24	jsr $24b9		jsr	errorHandler
.1490					ReturnProc:
.1490	20 cb 12	jsr $12cb			jsr 	RestoreLocals 				; get the locals back.
.1493	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.1495	a1 78		lda ($78,x)			lda 	(rsPointer,x)
.1497	c9 50		cmp #$50			cmp 	#markerPROC 						; does it match
.1499	f0 05		beq $14a0			beq 	_isok
.149b	a2 12		ldx #$12			ldx 	#ErrorID_endProcErr
.149d	20 b9 24	jsr $24b9		jsr	errorHandler
.14a0					_isok:
.14a0	a9 01		lda #$01			lda 	#1
.14a2	20 48 23	jsr $2348			jsr 	RSLoadPosition 				; reload the position from offset 1.
.14a5	a9 04		lda #$04			lda 	#4 							; throw 4 bytes from stack.
.14a7	20 2b 23	jsr $232b			jsr 	RSFree
.14aa	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/readdata.asm

.0b16					dataPtr:
>0b16							.fill 	2
.0b18					dataIndex:
>0b18							.fill 	1
.14ab					CommandRead:
.14ab	a2 00		ldx #$00			ldx 	#0 							; get a reference to a variable in stack:0
.14ad	20 19 1d	jsr $1d19			jsr 	EvaluateReference
.14b0	20 f1 14	jsr $14f1			jsr 	SwapDPCP 					; use the data pointer.
.14b3	b1 02		lda ($02),y			lda 	(codePtr),y 				; see where it is.
.14b5	c8		iny				iny
.14b6	c9 c8		cmp #$c8			cmp 	#TKW_COMMA 					; if it is on a comma, it is in data.
.14b8	f0 07		beq $14c1			beq 	_CRInData
.14ba	88		dey				dey
.14bb	a9 d9		lda #$d9			lda 	#TKW_DATA 					; scan forward to a DATA statement.
.14bd	aa		tax				tax
.14be	20 f5 37	jsr $37f5			jsr 	ScanForward
.14c1					_CRInData:
.14c1	a2 01		ldx #$01			ldx 	#1 							; evaluate a value at Stack,1
.14c3	20 c7 1c	jsr $1cc7			jsr 	Evaluate
.14c6	ca		dex				dex 								; and write the value.
.14c7	20 85 11	jsr $1185			jsr 	WriteValue
.14ca	20 f1 14	jsr $14f1			jsr 	SwapDPCP 					; get the code pointer back.
.14cd	b1 02		lda ($02),y			lda 	(codePtr),y 				; what follows ?
.14cf	c8		iny				iny
.14d0	c9 c8		cmp #$c8			cmp 	#TKW_COMMA 					; if comma, another variable
.14d2	f0 d7		beq $14ab			beq 	CommandRead
.14d4	88		dey				dey
.14d5	60		rts				rts
.14d6					CommandData:
.14d6	a9 80		lda #$80			lda 	#TOK_EOL 					; go forward to end of line or colon.
.14d8	a2 c7		ldx #$c7			ldx 	#TKW_COLON
.14da	20 f5 37	jsr $37f5			jsr 	ScanForward
.14dd	88		dey				dey 								; ending on EOL is a scan issue, as it increments
.14de	60		rts				rts
.14df					CommandRestore:
.14df	ad c8 0a	lda $0ac8			lda 	basePage
.14e2	8d 16 0b	sta $0b16			sta 	dataPtr
.14e5	ad c9 0a	lda $0ac9			lda 	basePage+1
.14e8	8d 17 0b	sta $0b17			sta 	dataPtr+1
.14eb	a9 03		lda #$03			lda 	#3
.14ed	8d 18 0b	sta $0b18			sta 	dataIndex
.14f0	60		rts				rts
.14f1					SwapDPCP:
.14f1	8a		txa				txa
.14f2	48		pha				pha
.14f3	98		tya				tya 								; swap Y, DataIndex
.14f4	ac 18 0b	ldy $0b18			ldy 	DataIndex
.14f7	8d 18 0b	sta $0b18			sta 	DataIndex
.14fa	a5 02		lda $02				lda 	codePtr 					; swap code/dataptr low
.14fc	ae 16 0b	ldx $0b16			ldx 	dataptr
.14ff	8d 16 0b	sta $0b16			sta 	dataPtr
.1502	86 02		stx $02				stx 	codePtr
.1504	a5 03		lda $03				lda 	codePtr+1 					; swap code/dataptr high.
.1506	ae 17 0b	ldx $0b17			ldx 	dataptr+1
.1509	8d 17 0b	sta $0b17			sta 	dataPtr+1
.150c	86 03		stx $03				stx 	codePtr+1
.150e	68		pla				pla
.150f	aa		tax				tax
.1510	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/rem.asm

.1511					Command_Rem:
.1511					Command_Rem2:
.1511	b1 02		lda ($02),y			lda 	(codePtr),y 				; what follows
.1513	c9 85		cmp #$85			cmp 	#TOK_STR 					; if it is a string then skip it.
.1515	d0 06		bne $151d			bne 	_CRNotString
.1517	c8		iny				iny
.1518	98		tya				tya
.1519	38		sec				sec
.151a	71 02		adc ($02),y			adc 	(codePtr),y 				; get string size, add to Y, +1 for the length
.151c	a8		tay				tay
.151d					_CRNotString:
.151d	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/repeat.asm

.378c					Command_Repeat:
.378c	a2 04		ldx #$04			ldx 	#4 							; allocate 4 bytes on stack for REPEAT
.378e	a9 52		lda #$52			lda 	#markerREPEAT 				; repeat marker allocate 4 bytes
.3790	20 09 23	jsr $2309			jsr 	RSClaim
.3793	a9 01		lda #$01			lda 	#1 							; save position at offset 1.
.3795	20 35 23	jsr $2335			jsr 	RSSavePosition
.3798	60		rts				rts
.3799					Command_Until:
.3799	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.379b	a1 78		lda ($78,x)			lda 	(rsPointer,x)
.379d	c9 52		cmp #$52			cmp 	#markerREPEAT 						; does it match
.379f	f0 05		beq $37a6			beq 	_isok
.37a1	a2 0f		ldx #$0f			ldx 	#ErrorID_untilErr
.37a3	20 b9 24	jsr $24b9		jsr	errorHandler
.37a6					_isok:
.37a6	20 e4 1c	jsr $1ce4			jsr 	EvaluateRootInteger 		; at the bottom.
.37a9	20 6f 22	jsr $226f			jsr 	MInt32Zero					; check if TOS zero
.37ac	d0 06		bne $37b4			bne 	_CUExit
.37ae	a9 01		lda #$01			lda 	#1
.37b0	20 48 23	jsr $2348			jsr 	RSLoadPosition 				; reload the position from offset 1.
.37b3	60		rts				rts
.37b4					_CUExit:
.37b4	a9 04		lda #$04			lda 	#4 							; throw 4 bytes from stack.
.37b6	20 2b 23	jsr $232b			jsr 	RSFree
.37b9	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/run.asm

.151e					Command_Run:
.151e	a2 ff		ldx #$ff			ldx 	#$FF
.1520	9a		txs				txs
.1521	20 18 10	jsr $1018			jsr 	CommandClear 				; clear everything.
.1524	20 78 15	jsr $1578			jsr 	ResetCodeAddress 			; back to the start.
.1527					Command_RunFrom:
.1527	a0 03		ldy #$03			ldy 	#3 							; over offset/line #
.1529					CRNextInstruction:
.1529	64 7b		stz $7b				stz 	softMemAlloc+1
.152b	b1 02		lda ($02),y			lda 	(codePtr),y 				; get next token.
.152d	10 1c		bpl $154b			bpl 	_CRNotToken
.152f	c9 c6		cmp #$c6			cmp 	#TOK_TOKENS 				; if in the tokens then do that token.
.1531	b0 0c		bcs $153f			bcs 	_CRExecute
.1533	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST 				; unary is ignored.
.1535	b0 4e		bcs $1585			bcs 	Unimplemented
.1537	c9 99		cmp #$99			cmp 	#TOK_STRUCTST 				; execute structures.
.1539	b0 04		bcs $153f			bcs 	_CRExecute
.153b	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; if one of the system tokens $80-$85 do that
.153d	b0 16		bcs $1555			bcs 	_CRCheckIndirect 			; if in that unused range check for ! or ?
.153f					_CRExecute:
.153f	c8		iny				iny 								; consume it.
.1540	0a		asl a				asl 	a 							; double it, losing most significant bit.
.1541	aa		tax				tax
.1542	20 48 15	jsr $1548			jsr 	_CRRunRoutine 				; we want to do jsr (group0vectors,x)
.1545	4c 29 15	jmp $1529			jmp 	CRNextInstruction
.1548					_CRRunRoutine:
.1548	7c 8f 15	jmp ($158f,x)			jmp 	(Group0Vectors,x)
.154b					_CRNotToken:
.154b	c9 40		cmp #$40			cmp 	#$40 						; if 0-3F then it is a letter
.154d	b0 36		bcs $1585			bcs 	Unimplemented
.154f					_CRDefaultLet:
.154f	20 72 11	jsr $1172			jsr 	CommandLet 					; do the default, LET
.1552	4c 29 15	jmp $1529			jmp 	CRNextInstruction
.1555					_CRCheckIndirect:
.1555	c9 97		cmp #$97			cmp 	#TKW_PLING 					; !<term> =
.1557	f0 f6		beq $154f			beq 	_CRDefaultLet
.1559	c9 98		cmp #$98			cmp 	#TKW_QMARK 					; ?<term> =
.155b	f0 f2		beq $154f			beq 	_CRDefaultLet
.155d	d0 26		bne $1585			bne 	Unimplemented
.155f					CommandShift1:
.155f	b1 02		lda ($02),y			lda 	(codePtr),y 				; get shifted value
.1561	10 22		bpl $1585			bpl 	Unimplemented 				; we have an error as this should not happen.
.1563	0a		asl a				asl 	a 							; double into X
.1564	aa		tax				tax
.1565	c8		iny				iny 								; advance over it.
.1566	20 6c 15	jsr $156c			jsr 	_RunIt 						; we have no jsr (aaaa,X)
.1569	4c 29 15	jmp $1529			jmp 	CRNextInstruction
.156c					_RunIt:
.156c	7c 47 16	jmp ($1647,x)			jmp 	(Group1Vectors-12,x) 		; and do the code.
.156f					CommandShift2:
.156f	a9 ff		lda #$ff			lda 	#$FF 						; $FF means command not unary function.
.1571	20 60 27	jsr $2760		jsr	extensionHandler
.1574	4c 29 15	jmp $1529			jmp 	CRNextInstruction
.1577					CommandColon:
.1577	60		rts				rts
.1578					ResetCodeAddress:
.1578	ad c8 0a	lda $0ac8			lda 	basePage 					; copy basePage to code Pointer
.157b	85 02		sta $02				sta 	codePtr
.157d	ad c9 0a	lda $0ac9			lda 	basePage+1
.1580	85 03		sta $03				sta 	codePtr+1
.1582	a0 03		ldy #$03			ldy 	#3 							; offset after offset link and line#
.1584	60		rts				rts
.1585					Unimplemented:
.1585	a2 01		ldx #$01			ldx 	#ErrorID_Missing
.1587	20 b9 24	jsr $24b9		jsr	errorHandler
.158a					TKErr01:
.158a					TKErr02:
.158a					TKErr03:
.158a					TKErr04:
.158a					TKErr05:
.158a					TKErr06:
.158a					TKErr07:
.158a					TKErr08:
.158a					TKErr09:
.158a					TKErr10:
.158a	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.158c	20 b9 24	jsr $24b9		jsr	errorHandler

;******  Processing file: main/commands/../../generated/tokenvectors0.inc

.158f					Group0Vectors:
>158f	4a 17					.word	AdvanceNextLine          ; $80 [[eol]]
>1591	5f 15					.word	CommandShift1            ; $81 [[sh1]]
>1593	6f 15					.word	CommandShift2            ; $82 [[sh2]]
>1595	8a 15					.word	TKErr09                  ; $83 [[sh3]]
>1597	8a 15					.word	TKErr10                  ; $84 [[fpc]]
>1599	8a 15					.word	TKErr08                  ; $85 [[str]]
>159b	d3 18					.word	AndHandler               ; $86 and
>159d	c0 18					.word	OrHandler                ; $87 or
>159f	ad 18					.word	XorHandler               ; $88 xor
>15a1	f5 19					.word	CompareGreaterEq         ; $89 >=
>15a3	ff 19					.word	CompareLessEq            ; $8a <=
>15a5	e1 19					.word	CompareGreater           ; $8b >
>15a7	d7 19					.word	CompareLess              ; $8c <
>15a9	cd 19					.word	CompareEquals            ; $8d =
>15ab	eb 19					.word	CompareNotEquals         ; $8e <>
>15ad	3e 18					.word	AddHandler               ; $8f +
>15af	61 18					.word	SubHandler               ; $90 -
>15b1	f9 18					.word	ShrHandler               ; $91 >>
>15b3	e6 18					.word	ShlHandler               ; $92 <<
>15b5	74 18					.word	MulHandler               ; $93 *
>15b7	87 18					.word	DivHandler               ; $94 /
>15b9	9a 18					.word	ModHandler               ; $95 mod
>15bb	32 19					.word	PowerHandler             ; $96 ^
>15bd	0c 19					.word	WordRefHandler           ; $97 !
>15bf	1f 19					.word	ByteRefHandler           ; $98 ?
>15c1	8c 37					.word	Command_Repeat           ; $99 repeat
>15c3	ba 37					.word	Command_While            ; $9a while
>15c5	fb 35					.word	Command_FOR              ; $9b for
>15c7	85 10					.word	CommandIf                ; $9c if
>15c9	8a 15					.word	TKErr04                  ; $9d defproc
>15cb	99 37					.word	Command_Until            ; $9e until
>15cd	dd 37					.word	Command_Wend             ; $9f wend
>15cf	5c 36					.word	Command_NEXT             ; $a0 next
>15d1	8a 15					.word	TKErr06                  ; $a1 then
>15d3	c0 10					.word	Command_ENDIF            ; $a2 endif
>15d5	90 14					.word	ReturnProc               ; $a3 endproc
>15d7	ce 1b					.word	UnaryParenthesis         ; $a4 (
>15d9	2c 1d					.word	UnaryLen                 ; $a5 len(
>15db	70 1d					.word	UnarySgn                 ; $a6 sgn(
>15dd	59 1d					.word	UnaryAbs                 ; $a7 abs(
>15df	c9 1d					.word	Unary_Random             ; $a8 random(
>15e1	13 1e					.word	Unary_Page               ; $a9 page
>15e3	44 22					.word	MInt32True               ; $aa true
>15e5	48 22					.word	MInt32False              ; $ab false
>15e7	de 1d					.word	Unary_Min                ; $ac min(
>15e9	e2 1d					.word	Unary_Max                ; $ad max(
>15eb	cd 1e					.word	UnarySys                 ; $ae sys(
>15ed	90 1e					.word	UnaryTimer               ; $af timer(
>15ef	23 1c					.word	EventFunction            ; $b0 event(
>15f1	b9 1e					.word	UnaryGet                 ; $b1 get(
>15f3	a9 1e					.word	UnaryInkey               ; $b2 inkey(
>15f5	64 1e					.word	UnaryAlloc               ; $b3 alloc(
>15f7	f5 1e					.word	ExecChr                  ; $b4 chr$(
>15f9	25 1f					.word	ExecLeft                 ; $b5 left$(
>15fb	42 1f					.word	ExecMid                  ; $b6 mid$(
>15fd	6a 1f					.word	ExecRight                ; $b7 right$(
>15ff	0f 1a					.word	Event_Str                ; $b8 str$(
>1601	3e 1a					.word	UnaryVal                 ; $b9 val(
>1603	87 1d					.word	UnaryPeek                ; $ba peek(
>1605	8d 1d					.word	UnaryDeek                ; $bb deek(
>1607	93 1d					.word	UnaryLeek                ; $bc leek(
>1609	4a 1d					.word	UnaryAsc                 ; $bd asc(
>160b	3e 1e					.word	UnaryIntToFloat          ; $be int(
>160d	51 1e					.word	UnaryFloatToInt          ; $bf float(
>160f	41 1a					.word	UnaryIsVal               ; $c0 isval(
>1611	0c 1f					.word	ExecUpper                ; $c1 upper$(
>1613	09 1f					.word	ExecLower                ; $c2 lower$(
>1615	21 1e					.word	UnaryReference           ; $c3 @
>1617	37 1e					.word	UnaryComplement          ; $c4 ~
>1619	34 1e					.word	UnaryHexMarker           ; $c5 &
>161b	8a 15					.word	TKErr01                  ; $c6 )
>161d	77 15					.word	CommandColon             ; $c7 :
>161f	8a 15					.word	TKErr02                  ; $c8 ,
>1621	8a 15					.word	TKErr03                  ; $c9 ;
>1623	11 15					.word	Command_Rem2             ; $ca '
>1625	8a 15					.word	TKErr07                  ; $cb to
>1627	8a 15					.word	TKErr05                  ; $cc step
>1629	23 14					.word	CallProc                 ; $cd proc
>162b	3b 12					.word	CommandLocal             ; $ce local
>162d	77 10					.word	Command_Dim              ; $cf dim
>162f	11 15					.word	Command_Rem              ; $d0 rem
>1631	72 11					.word	CommandLet               ; $d1 let
>1633	c1 10					.word	Command_Input            ; $d2 input
>1635	ba 10					.word	Command_ELSE             ; $d3 else
>1637	f1 17					.word	Command_VDU              ; $d4 vdu
>1639	88 13					.word	Command_Print            ; $d5 print
>163b	bf 17					.word	CommandGOTO              ; $d6 goto
>163d	94 17					.word	CommandGOSUB             ; $d7 gosub
>163f	a7 17					.word	CommandRETURN            ; $d8 return
>1641	d6 14					.word	CommandData              ; $d9 data
>1643	0a 10					.word	Command_Assert           ; $da assert
>1645	4b 13					.word	Command_Poke             ; $db poke
>1647	4f 13					.word	Command_Doke             ; $dc doke
>1649	53 13					.word	Command_Loke             ; $dd loke
>164b	64 17					.word	Command_Ink              ; $de ink
>164d	6f 17					.word	Command_Paper            ; $df paper
>164f	5e 17					.word	Command_CLS              ; $e0 cls
>1651	7a 17					.word	Command_Locate           ; $e1 locate

;******  Return to file: main/commands/run.asm


;******  Processing file: main/commands/../../generated/tokenvectors1.inc

.1653					Group1Vectors:
>1653	18 10					.word	CommandClear             ; $86 clear
>1655	f0 11					.word	CommandLoad              ; $87 load
>1657	05 12					.word	CommandSave              ; $88 save
>1659	0a 37					.word	CommandList              ; $89 list
>165b	3d 13					.word	Command_New              ; $8a new
>165d	1e 15					.word	Command_Run              ; $8b run
>165f	ab 14					.word	CommandRead              ; $8c read
>1661	df 14					.word	CommandRestore           ; $8d restore
>1663	44 17					.word	CommandEnd               ; $8e end
>1665	3f 17					.word	CommandStop              ; $8f stop
>1667	47 17					.word	CommandXemu              ; $90 xemu

;******  Return to file: main/commands/run.asm


;******  Return to file: main/main.asm


;******  Processing file: main/commands/scanner.asm

.0b19					procList:
>0b19							.fill 	2		 					; terminated by name high.
.0b1b					yInLine:
>0b1b							.fill 	1
.1669					FindProcedure:
.1669	8c 1b 0b	sty $0b1b			sty 	yInLine
.166c	20 27 17	jsr $1727			jsr 	CalculateProcedureHash		; calculate the hash of the procedure.
.166f	85 06		sta $06				sta 	temp1
.1671	ad 19 0b	lda $0b19			lda		procList 					; put procList address in temp2
.1674	85 08		sta $08				sta 	temp2
.1676	ad 1a 0b	lda $0b1a			lda 	procList+1
.1679	85 09		sta $09				sta 	temp2+1
.167b	a0 00		ldy #$00			ldy 	#0 							; position in this table.
.167d					_FPLoop:
.167d	b1 08		lda ($08),y			lda 	(temp2),y
.167f	f0 4f		beq $16d0			beq 	_FPError 					; if so, we don't know this procedure.
.1681	85 05		sta $05				sta 	temp0+1 					; copy MSB/LSB to temp0 as we go.
.1683	c8		iny				iny
.1684	b1 08		lda ($08),y			lda 	(temp2),y
.1686	85 04		sta $04				sta 	temp0
.1688	c8		iny				iny
.1689	b1 08		lda ($08),y			lda 	(temp2),y					; check the procedure hash.
.168b	c5 06		cmp $06				cmp 	temp1
.168d	d0 2b		bne $16ba			bne 	_FPNext 					; hash is different, go to next.
.168f	38		sec				sec
.1690	ad 1b 0b	lda $0b1b			lda 	yInLine 					; position in line must be at least 4
.1693	e9 04		sbc #$04			sbc 	#4
.1695	18		clc				clc
.1696	65 02		adc $02				adc 	codePtr
.1698	85 0a		sta $0a				sta 	temp3
.169a	a5 03		lda $03				lda 	codePtr+1
.169c	69 00		adc #$00			adc 	#0
.169e	85 0b		sta $0b				sta 	temp3+1
.16a0	98		tya				tya
.16a1	48		pha				pha
.16a2	a0 04		ldy #$04			ldy 	#4
.16a4					_FPCName:
.16a4	b1 0a		lda ($0a),y			lda 	(temp3),y 					; check the same
.16a6	d1 04		cmp ($04),y			cmp 	(temp0),y
.16a8	d0 0e		bne $16b8			bne 	_FPpulYNext 				; if different go to next one.
.16aa	c8		iny				iny
.16ab	c9 3a		cmp #$3a			cmp 	#$3A
.16ad	90 f5		bcc $16a4			bcc 	_FPCName 					; compare the whole lot....
.16af	68		pla				pla 								; throw away the saved Y
.16b0	98		tya				tya 								; length of name is Y-4
.16b1	38		sec				sec
.16b2	e9 04		sbc #$04			sbc 	#4
.16b4	ac 1b 0b	ldy $0b1b			ldy 	yInLine  					; get the original Y back
.16b7	60		rts				rts
.16b8					_FPpulYNext:
.16b8	68		pla				pla
.16b9	a8		tay				tay
.16ba					_FPNext:
.16ba	c8		iny				iny 								; next procedure record.
.16bb	10 c0		bpl $167d			bpl 	_FPLoop 					; if done 128 already ... e.g. Y -ve
.16bd	98		tya				tya 								; subtract 128 from Y
.16be	38		sec				sec
.16bf	e9 80		sbc #$80			sbc 	#128
.16c1	a8		tay				tay
.16c2	18		clc				clc 								; add 128 to temp2, so we can have more than
.16c3	a5 08		lda $08				lda 	temp2 						; 255/3 = 85 procedures
.16c5	69 80		adc #$80			adc 	#128
.16c7	85 08		sta $08				sta 	temp2
.16c9	90 b2		bcc $167d			bcc 	_FPLoop
.16cb	e6 09		inc $09				inc 	temp2+1
.16cd	4c 7d 16	jmp $167d			jmp 	_FPLoop
.16d0					_FPError:
.16d0	a2 17		ldx #$17			ldx 	#ErrorID_NoProc
.16d2	20 b9 24	jsr $24b9		jsr	errorHandler
.16d5					ScanProc:
.16d5	98		tya				tya
.16d6	48		pha				pha
.16d7	a5 0f		lda $0f				lda 	lowMemory 					; copy the start of the procList, at low memory
.16d9	8d 19 0b	sta $0b19			sta 	procList
.16dc	a5 10		lda $10				lda 	lowMemory+1
.16de	8d 1a 0b	sta $0b1a			sta 	procList+1
.16e1	20 78 15	jsr $1578			jsr 	ResetCodeAddress 			; back to the start.
.16e4					_ScanLoop:
.16e4	a0 00		ldy #$00			ldy 	#0 							; check reached program end
.16e6	b1 02		lda ($02),y			lda 	(codePtr),y
.16e8	f0 2a		beq $1714			beq 	_ScanExit
.16ea	a0 03		ldy #$03			ldy 	#3							; get first token
.16ec	b1 02		lda ($02),y			lda 	(codePtr),y
.16ee	c9 9d		cmp #$9d			cmp 	#TKW_DEFPROC				; skip next if not DEFPROC
.16f0	d0 12		bne $1704			bne 	_ScanNext
.16f2	a5 03		lda $03				lda 	codePtr+1 					; write high and low
.16f4	20 1c 17	jsr $171c			jsr 	_ScanWrite
.16f7	a5 02		lda $02				lda 	codePtr
.16f9	20 1c 17	jsr $171c			jsr 	_ScanWrite
.16fc	a0 04		ldy #$04			ldy 	#4 							; start of name part
.16fe	20 27 17	jsr $1727			jsr 	CalculateProcedureHash 		; calculate procedure hash
.1701	20 1c 17	jsr $171c			jsr 	_ScanWrite
.1704					_ScanNext:
.1704	18		clc				clc
.1705	a0 00		ldy #$00			ldy 	#0
.1707	b1 02		lda ($02),y			lda 	(codePtr),y
.1709	65 02		adc $02				adc 	codePtr
.170b	85 02		sta $02				sta 	codePtr
.170d	90 d5		bcc $16e4			bcc 	_ScanLoop
.170f	e6 03		inc $03				inc 	codePtr+1
.1711	4c e4 16	jmp $16e4			jmp 	_ScanLoop
.1714					_ScanExit:
.1714	a9 00		lda #$00			lda 	#0 							; write ending zero.
.1716	20 1c 17	jsr $171c			jsr 	_ScanWrite
.1719	68		pla				pla
.171a	a8		tay				tay
.171b	60		rts				rts
.171c					_ScanWrite:
.171c	a0 00		ldy #$00			ldy 	#0
.171e	91 0f		sta ($0f),y			sta 	(lowMemory),y
.1720	e6 0f		inc $0f				inc 	lowMemory
.1722	d0 02		bne $1726			bne 	_SWNoCarry
.1724	e6 10		inc $10				inc 	lowMemory+1
.1726					_SWNoCarry:
.1726	60		rts				rts
.1727					CalculateProcedureHash:
.1727	a9 00		lda #$00			lda 	#0 							; clear hash.
.1729	85 04		sta $04				sta 	temp0
.172b					_CPHLoop:
.172b	18		clc				clc 								; add character and rotate and add carry back in
.172c	b1 02		lda ($02),y			lda 	(codePtr),y
.172e	65 04		adc $04				adc 	temp0
.1730	6a		ror a				ror 	a
.1731	69 0d		adc #$0d			adc 	#13 						; primes usually good for this sort of thing.
.1733	85 04		sta $04				sta 	temp0 						; (down with this sort of thing)
.1735	b1 02		lda ($02),y			lda 	(codePtr),y
.1737	c8		iny				iny 								; advance incase we go round again.
.1738	c9 3a		cmp #$3a			cmp 	#$3A
.173a	90 ef		bcc $172b			bcc 	_CPHLoop
.173c	a5 04		lda $04				lda 	temp0
.173e	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/stopend.asm

.173f					CommandStop:
.173f	a2 06		ldx #$06			ldx 	#ErrorID_Stop
.1741	20 b9 24	jsr $24b9		jsr	errorHandler
.1744					CommandEnd:
.1744	4c f6 22	jmp $22f6			jmp 	WarmStart
.1747					CommandXemu:
.1747	4c ff ff	jmp $ffff			jmp 	$FFFF 						; fudge to crash out of emulator
.174a					AdvanceNextLine:
.174a	a0 00		ldy #$00			ldy 	#0 							; get offset
.174c	b1 02		lda ($02),y			lda 	(codePtr),y
.174e	18		clc				clc 								; add to codePtr
.174f	65 02		adc $02				adc 	codePtr
.1751	85 02		sta $02				sta 	codePtr
.1753	90 02		bcc $1757			bcc 	_ANLNoCarry
.1755	e6 03		inc $03				inc 	codePtr+1
.1757					_ANLNoCarry:
.1757	b1 02		lda ($02),y			lda 	(codePtr),y 				; if end of program (or was just stand alone.
.1759	f0 e9		beq $1744			beq 	CommandEnd 					; execute END
.175b	a0 03		ldy #$03			ldy 	#3 							; start of tokens on line.
.175d	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/text.asm

.175e					Command_CLS:
.175e	a2 00		ldx #$00		ldx	#0
.1760	20 9c 24	jsr $249c		jsr	deviceHandler
.1763	60		rts				rts
.1764					Command_Ink:
.1764	a2 00		ldx #$00			ldx 	#0
.1766	20 ee 1c	jsr $1cee			jsr 	EvaluateSmallInteger
.1769	a2 06		ldx #$06		ldx	#6
.176b	20 9c 24	jsr $249c		jsr	deviceHandler
.176e	60		rts				rts
.176f					Command_Paper:
.176f	a2 00		ldx #$00			ldx 	#0
.1771	20 ee 1c	jsr $1cee			jsr 	EvaluateSmallInteger
.1774	a2 10		ldx #$10		ldx	#16
.1776	20 9c 24	jsr $249c		jsr	deviceHandler
.1779	60		rts				rts
.177a					Command_Locate:
.177a	a2 00		ldx #$00			ldx 	#0
.177c	20 ee 1c	jsr $1cee			jsr 	EvaluateSmallInteger
.177f	20 c8 22	jsr $22c8			jsr 	CheckComma
.1782	e8		inx				inx
.1783	20 ee 1c	jsr $1cee			jsr 	EvaluateSmallInteger
.1786	98		tya				tya
.1787	48		pha				pha
.1788	a4 49		ldy $49				ldy 	esInt0+1
.178a	a5 48		lda $48				lda 	esInt0
.178c	a2 0e		ldx #$0e		ldx	#14
.178e	20 9c 24	jsr $249c		jsr	deviceHandler
.1791	68		pla				pla
.1792	a8		tay				tay
.1793	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/transfer.asm

.1794					CommandGOSUB:
.1794	20 e4 1c	jsr $1ce4			jsr 	EvaluateRootInteger			; get GOSUB line on stack top.
.1797	a2 04		ldx #$04			ldx 	#4 							; allocate 4 bytes on stack for GOSUB
.1799	a9 47		lda #$47			lda 	#markerGOSUB  				; <marker> <return addr/offset>
.179b	20 09 23	jsr $2309			jsr 	RSClaim
.179e	a9 01		lda #$01			lda 	#1 							; save position at offset 1.
.17a0	20 35 23	jsr $2335			jsr 	RSSavePosition
.17a3	a2 00		ldx #$00			ldx 	#0 							; point back at GOSUB line
.17a5	f0 1b		beq $17c2			beq 	GotoTOS 					; and do a GOTO there.
.17a7					CommandRETURN:
.17a7	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.17a9	a1 78		lda ($78,x)			lda 	(rsPointer,x)
.17ab	c9 47		cmp #$47			cmp 	#markerGOSUB 						; does it match
.17ad	f0 05		beq $17b4			beq 	_isok
.17af	a2 0e		ldx #$0e			ldx 	#ErrorID_returnErr
.17b1	20 b9 24	jsr $24b9		jsr	errorHandler
.17b4					_isok:
.17b4	a9 01		lda #$01			lda 	#1
.17b6	20 48 23	jsr $2348			jsr 	RSLoadPosition 				; reload the position from offset 1.
.17b9	a9 04		lda #$04			lda 	#4 							; throw 4 bytes from stack.
.17bb	20 2b 23	jsr $232b			jsr 	RSFree
.17be	60		rts				rts
.17bf					CommandGOTO:
.17bf	20 e4 1c	jsr $1ce4			jsr 	EvaluateRootInteger 		; get GOTO line on stack top.
.17c2					GotoTOS:
.17c2	20 78 15	jsr $1578			jsr 	ResetCodeAddress 			; simple search.
.17c5					_GotoSearch:
.17c5	a0 00		ldy #$00			ldy 	#0 							; get offset
.17c7	b1 02		lda ($02),y			lda 	(codePtr),y
.17c9	f0 21		beq $17ec			beq 	_GotoError 					; not found.
.17cb	c8		iny				iny									; check LSB match
.17cc	b1 02		lda ($02),y			lda 	(codePtr),y
.17ce	d5 48		cmp $48,x			cmp 	esInt0,x
.17d0	d0 07		bne $17d9			bne 	_GotoNext
.17d2	c8		iny				iny
.17d3	b1 02		lda ($02),y			lda 	(codePtr),y
.17d5	d5 50		cmp $50,x			cmp 	esInt1,x
.17d7	f0 10		beq $17e9			beq 	_GotoFound
.17d9					_GotoNext:
.17d9	a0 00		ldy #$00			ldy 	#0 							; go next line
.17db	b1 02		lda ($02),y			lda 	(codePtr),y
.17dd	18		clc				clc
.17de	65 02		adc $02				adc 	codePtr
.17e0	85 02		sta $02				sta 	codePtr
.17e2	90 e1		bcc $17c5			bcc 	_GotoSearch
.17e4	e6 03		inc $03				inc 	codePtr+1
.17e6	4c c5 17	jmp $17c5			jmp 	_GotoSearch
.17e9					_GotoFound:
.17e9	a0 03		ldy #$03			ldy 	#3 							; continue from that line
.17eb	60		rts				rts
.17ec					_GotoError:
.17ec	a2 0c		ldx #$0c			ldx 	#ErrorID_LineNumber
.17ee	20 b9 24	jsr $24b9		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/commands/vdu.asm

.17f1					Command_VDU:
.17f1	20 e4 1c	jsr $1ce4			jsr 	EvaluateRootInteger 			; get integer at root.
.17f4	a5 48		lda $48				lda 	esInt0
.17f6	a2 12		ldx #$12		ldx	#18
.17f8	20 9c 24	jsr $249c		jsr	deviceHandler
.17fb					_CVNext:
.17fb	b1 02		lda ($02),y			lda 	(codePtr),y 					; what follows ?
.17fd	c8		iny				iny
.17fe	c9 c8		cmp #$c8			cmp 	#TKW_COMMA 						; comma, do again
.1800	f0 ef		beq $17f1			beq 	Command_VDU
.1802	c9 c9		cmp #$c9			cmp 	#TKW_SEMICOLON 					; semicolon, print MSB
.1804	d0 0a		bne $1810			bne 	_CVExit
.1806	a5 50		lda $50				lda 	esInt1
.1808	a2 12		ldx #$12		ldx	#18
.180a	20 9c 24	jsr $249c		jsr	deviceHandler
.180d	4c fb 17	jmp $17fb			jmp 	_CVNext
.1810	88		dey		_CVExit:dey
.1811	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/while.asm

.37ba					Command_While:
.37ba	a9 57		lda #$57			lda 	#markerWhile 				; gosub marker allocate 4 bytes.
.37bc	a2 04		ldx #$04			ldx 	#4
.37be	20 09 23	jsr $2309			jsr 	RSClaim 					; create on stack.
.37c1	88		dey				dey
.37c2	a9 01		lda #$01			lda 	#1
.37c4	20 35 23	jsr $2335			jsr 	RSSavePosition 				; save position before the WHILE keyword.
.37c7	c8		iny				iny
.37c8	20 e6 1c	jsr $1ce6			jsr 	EvaluateInteger				; get the conditional
.37cb	20 6f 22	jsr $226f			jsr 	MInt32Zero 	 				; if zero, skip forward to the fail code.
.37ce	f0 01		beq $37d1			beq 	_CWFail
.37d0	60		rts				rts
.37d1					_CWFail:
.37d1	a9 04		lda #$04			lda 	#4
.37d3	20 2b 23	jsr $232b			jsr 	RSFree 						; close the just opened position.
.37d6	a9 9f		lda #$9f			lda 	#TKW_WEND 					; scan forward past WEND.
.37d8	aa		tax				tax
.37d9	20 f5 37	jsr $37f5			jsr 	ScanForward
.37dc	60		rts				rts
.37dd					Command_Wend:
.37dd	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.37df	a1 78		lda ($78,x)			lda 	(rsPointer,x)
.37e1	c9 57		cmp #$57			cmp 	#markerWHILE 						; does it match
.37e3	f0 05		beq $37ea			beq 	_isok
.37e5	a2 11		ldx #$11			ldx 	#ErrorID_wendErr
.37e7	20 b9 24	jsr $24b9		jsr	errorHandler
.37ea					_isok:
.37ea	a9 01		lda #$01			lda 	#1
.37ec	20 48 23	jsr $2348			jsr 	RSLoadPosition				; go back until true
.37ef	a9 04		lda #$04			lda 	#4
.37f1	20 2b 23	jsr $232b			jsr 	RSFree 						; close the loop
.37f4	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/binary.asm

.1812					BinaryProcess:
.1812	b5 40		lda $40,x			lda 	esType,x 					; or type bytes together and check bit 6.
.1814	15 41		ora $41,x			ora 	esType+1,x 					; (the float bit)
.1816	0a		asl a				asl 	a
.1817	30 0e		bmi $1827			bmi 	_BPStringType 				; if bit 6 is set, then string type, error
.1819	18		clc				clc 								; return CC for integer
.181a	29 02		and #$02			and 	#$02 						; $02 because of ASL A. check original bit 1.
.181c	f0 08		beq $1826			beq 	_BPExit 					; if both integer then return with CC.
.181e	20 2c 18	jsr $182c			jsr 	BPMakeBothFloat 			; make both float
.1821	a9 01		lda #$01			lda 	#$01 						; set result type to float
.1823	95 40		sta $40,x			sta 	esType,x
.1825	38		sec				sec 								; and return with carry set.
.1826					_BPExit:
.1826	60		rts				rts
.1827					_BPStringType:
.1827	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.1829	20 b9 24	jsr $24b9		jsr	errorHandler
.182c					BPMakeBothFloat:
.182c	e8		inx				inx
.182d	20 31 18	jsr $1831			jsr 	BPMakeFloat 				; one is a float, so we do both as floats.
.1830	ca		dex				dex
.1831					BPMakeFloat:
.1831	b5 40		lda $40,x			lda 	esType,x 					; get type bit which is in bit 0
.1833	4a		lsr a				lsr 	a
.1834	b0 07		bcs $183d			bcs 	_BPIsFloat 					; already a float if set.
.1836	8a		txa				txa
.1837	a2 1a		ldx #$1a		ldx	#26
.1839	20 eb 27	jsr $27eb		jsr	floatingpointHandler
.183c	aa		tax				tax
.183d					_BPIsFloat:
.183d	60		rts				rts
.183e					AddHandler:
.183e	20 8d 1a	jsr $1a8d			jsr 	DereferenceTwo 				; dereference top two on stack.
.1841	b5 40		lda $40,x			lda 	esType,x 					; check two strings.
.1843	35 41		and $41,x			and 	esType+1,x
.1845	29 40		and #$40			and 	#$40 						; if both have bit 6 set ... we have two strings
.1847	d0 10		bne $1859			bne 	_AHStringConcat				; concatenate strings.
.1849	20 12 18	jsr $1812			jsr 	BinaryProcess 				; check to see if either is float
.184c	b0 03		bcs $1851			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.184e	4c 2c 21	jmp $212c			jmp 	MInt32Add 							; else do it as integer.
.1851					_IsFPOperation:
.1851	8a		txa				txa 								; call the relevant fp routine
.1852	a2 02		ldx #$02		ldx	#2
.1854	20 eb 27	jsr $27eb		jsr	floatingpointHandler
.1857	aa		tax				tax
.1858	60		rts				rts
.1859					_AHStringConcat:
.1859	8a		txa				txa 								; handled by the string module.
.185a	a2 04		ldx #$04		ldx	#4
.185c	20 4f 2c	jsr $2c4f		jsr	stringHandler
.185f	aa		tax				tax
.1860	60		rts				rts
.1861					SubHandler:
.1861	20 8d 1a	jsr $1a8d			jsr 	DereferenceTwo
.1864	20 12 18	jsr $1812			jsr 	BinaryProcess 				; check to see if either is float
.1867	b0 03		bcs $186c			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.1869	4c 46 21	jmp $2146			jmp 	MInt32Sub 							; else do it as integer.
.186c					_IsFPOperation:
.186c	8a		txa				txa 								; call the relevant fp routine
.186d	a2 10		ldx #$10		ldx	#16
.186f	20 eb 27	jsr $27eb		jsr	floatingpointHandler
.1872	aa		tax				tax
.1873	60		rts				rts
.1874					MulHandler:
.1874	20 8d 1a	jsr $1a8d			jsr 	DereferenceTwo
.1877	20 12 18	jsr $1812			jsr 	BinaryProcess 				; check to see if either is float
.187a	b0 03		bcs $187f			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.187c	4c 60 21	jmp $2160			jmp 	MInt32Multiply 							; else do it as integer.
.187f					_IsFPOperation:
.187f	8a		txa				txa 								; call the relevant fp routine
.1880	a2 0a		ldx #$0a		ldx	#10
.1882	20 eb 27	jsr $27eb		jsr	floatingpointHandler
.1885	aa		tax				tax
.1886	60		rts				rts
.1887					DivHandler:
.1887	20 8d 1a	jsr $1a8d			jsr 	DereferenceTwo
.188a	20 12 18	jsr $1812			jsr 	BinaryProcess 				; check to see if either is float
.188d	b0 03		bcs $1892			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.188f	4c 1d 20	jmp $201d			jmp 	MInt32SDivide 							; else do it as integer.
.1892					_IsFPOperation:
.1892	8a		txa				txa 								; call the relevant fp routine
.1893	a2 06		ldx #$06		ldx	#6
.1895	20 eb 27	jsr $27eb		jsr	floatingpointHandler
.1898	aa		tax				tax
.1899	60		rts				rts
.189a					ModHandler:
.189a	20 8d 1a	jsr $1a8d			jsr 	DereferenceTwo
.189d	20 12 18	jsr $1812			jsr 	BinaryProcess 				; check to see if either is float
.18a0	b0 03		bcs $18a5			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.18a2	4c 9b 20	jmp $209b			jmp 	MInt32Modulus 							; else do it as integer.
.18a5					_IsFPOperation:
.18a5	8a		txa				txa 								; call the relevant fp routine
.18a6	a2 08		ldx #$08		ldx	#8
.18a8	20 eb 27	jsr $27eb		jsr	floatingpointHandler
.18ab	aa		tax				tax
.18ac	60		rts				rts
.18ad					XorHandler:
.18ad	20 8d 1a	jsr $1a8d			jsr 	DereferenceTwo
.18b0	20 12 18	jsr $1812			jsr 	BinaryProcess 				; check to see if either is float
.18b3	b0 03		bcs $18b8			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.18b5	4c cf 1f	jmp $1fcf			jmp 	MInt32Xor 							; else do it as integer.
.18b8					_IsFPOperation:
.18b8	8a		txa				txa 								; call the relevant fp routine
.18b9	a2 08		ldx #$08		ldx	#8
.18bb	20 eb 27	jsr $27eb		jsr	floatingpointHandler
.18be	aa		tax				tax
.18bf	60		rts				rts
.18c0					OrHandler:
.18c0	20 8d 1a	jsr $1a8d			jsr 	DereferenceTwo
.18c3	20 12 18	jsr $1812			jsr 	BinaryProcess 				; check to see if either is float
.18c6	b0 03		bcs $18cb			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.18c8	4c b6 1f	jmp $1fb6			jmp 	MInt32Or 							; else do it as integer.
.18cb					_IsFPOperation:
.18cb	8a		txa				txa 								; call the relevant fp routine
.18cc	a2 08		ldx #$08		ldx	#8
.18ce	20 eb 27	jsr $27eb		jsr	floatingpointHandler
.18d1	aa		tax				tax
.18d2	60		rts				rts
.18d3					AndHandler:
.18d3	20 8d 1a	jsr $1a8d			jsr 	DereferenceTwo
.18d6	20 12 18	jsr $1812			jsr 	BinaryProcess 				; check to see if either is float
.18d9	b0 03		bcs $18de			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.18db	4c 9d 1f	jmp $1f9d			jmp 	MInt32And 							; else do it as integer.
.18de					_IsFPOperation:
.18de	8a		txa				txa 								; call the relevant fp routine
.18df	a2 08		ldx #$08		ldx	#8
.18e1	20 eb 27	jsr $27eb		jsr	floatingpointHandler
.18e4	aa		tax				tax
.18e5	60		rts				rts
.18e6					ShlHandler:
.18e6	20 8d 1a	jsr $1a8d			jsr 	DereferenceTwo
.18e9	20 12 18	jsr $1812			jsr 	BinaryProcess 				; check to see if either is float
.18ec	b0 03		bcs $18f1			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.18ee	4c 67 19	jmp $1967			jmp 	Mint32ShiftLeftX 							; else do it as integer.
.18f1					_IsFPOperation:
.18f1	8a		txa				txa 								; call the relevant fp routine
.18f2	a2 08		ldx #$08		ldx	#8
.18f4	20 eb 27	jsr $27eb		jsr	floatingpointHandler
.18f7	aa		tax				tax
.18f8	60		rts				rts
.18f9					ShrHandler:
.18f9	20 8d 1a	jsr $1a8d			jsr 	DereferenceTwo
.18fc	20 12 18	jsr $1812			jsr 	BinaryProcess 				; check to see if either is float
.18ff	b0 03		bcs $1904			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.1901	4c 6a 19	jmp $196a			jmp 	MInt32ShiftRightX 							; else do it as integer.
.1904					_IsFPOperation:
.1904	8a		txa				txa 								; call the relevant fp routine
.1905	a2 08		ldx #$08		ldx	#8
.1907	20 eb 27	jsr $27eb		jsr	floatingpointHandler
.190a	aa		tax				tax
.190b	60		rts				rts
.190c					WordRefHandler:
.190c	20 8d 1a	jsr $1a8d			jsr 	DereferenceTwo
.190f	20 12 18	jsr $1812			jsr 	BinaryProcess 				; check to see if either is float
.1912	b0 03		bcs $1917			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.1914	4c 59 19	jmp $1959			jmp 	MInt32WordIndirect 							; else do it as integer.
.1917					_IsFPOperation:
.1917	8a		txa				txa 								; call the relevant fp routine
.1918	a2 08		ldx #$08		ldx	#8
.191a	20 eb 27	jsr $27eb		jsr	floatingpointHandler
.191d	aa		tax				tax
.191e	60		rts				rts
.191f					ByteRefHandler:
.191f	20 8d 1a	jsr $1a8d			jsr 	DereferenceTwo
.1922	20 12 18	jsr $1812			jsr 	BinaryProcess 				; check to see if either is float
.1925	b0 03		bcs $192a			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.1927	4c 5d 19	jmp $195d			jmp 	MInt32ByteIndirect 							; else do it as integer.
.192a					_IsFPOperation:
.192a	8a		txa				txa 								; call the relevant fp routine
.192b	a2 08		ldx #$08		ldx	#8
.192d	20 eb 27	jsr $27eb		jsr	floatingpointHandler
.1930	aa		tax				tax
.1931	60		rts				rts
.1932					PowerHandler:
.1932	20 8d 1a	jsr $1a8d			jsr 	DereferenceTwo
.1935	20 12 18	jsr $1812			jsr 	BinaryProcess 				; check to see if either is float
.1938	b0 03		bcs $193d			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.193a	4c 45 19	jmp $1945			jmp 	PowerInteger 							; else do it as integer.
.193d					_IsFPOperation:
.193d	8a		txa				txa 								; call the relevant fp routine
.193e	a2 16		ldx #$16		ldx	#22
.1940	20 eb 27	jsr $27eb		jsr	floatingpointHandler
.1943	aa		tax				tax
.1944	60		rts				rts
.1945					PowerInteger:
.1945	20 2c 18	jsr $182c			jsr 	BPMakeBothFloat				; make them float.
.1948	8a		txa				txa
.1949	a2 16		ldx #$16		ldx	#22
.194b	20 eb 27	jsr $27eb		jsr	floatingpointHandler
.194e	a2 12		ldx #$12		ldx	#18
.1950	20 eb 27	jsr $27eb		jsr	floatingpointHandler
.1953	aa		tax				tax
.1954	a9 00		lda #$00			lda 	#0 							; make type integer
.1956	95 40		sta $40,x			sta 	esType,x
.1958	60		rts				rts
.1959					Mint32WordIndirect:
.1959	a9 80		lda #$80	 		lda 	#$80 				 		; word reference type (bit 7 set)
.195b	d0 02		bne $195f			bne 	Min32Indirect
.195d					Mint32ByteIndirect:
.195d	a9 a0		lda #$a0			lda 	#$A0 						; byte reference type (bit 7, bit 5 set)
.195f					Min32Indirect:
.195f	48		pha				pha 								; save the indirection
.1960	20 2c 21	jsr $212c			jsr 	MInt32Add 					; add a!b a?b
.1963	68		pla				pla 								; and set the type to reference.
.1964	95 40		sta $40,x			sta 	esType,x 	 				; so a!b => a+b and it's a reference....
.1966	60		rts				rts
.1967					Mint32ShiftLeftX:
.1967	18		clc				clc 								; CC shift left
.1968	90 01		bcc $196b			bcc 	Mint32Shift
.196a					Mint32ShiftRightX:
.196a	38		sec				sec 								; CS shift right
.196b					Mint32Shift:
.196b	08		php				php 								; save carry flag on stack.
.196c	b5 51		lda $51,x			lda 	esInt1+1,x 					; if shift >= 32 then it is zero.
.196e	15 59		ora $59,x			ora 	esInt2+1,x
.1970	15 61		ora $61,x			ora 	esInt3+1,x
.1972	d0 1e		bne $1992			bne 	_MShiftZero
.1974	b5 49		lda $49,x			lda 	esInt0+1,x
.1976	c9 20		cmp #$20			cmp 	#32
.1978	b0 18		bcs $1992			bcs 	_MShiftZero
.197a					_MShiftLoop:
.197a	b5 49		lda $49,x			lda 	esInt0+1,x 					; check count is zero
.197c	f0 12		beq $1990			beq 	_MShiftExit
.197e	d6 49		dec $49,x			dec 	esInt0+1,x
.1980	28		plp				plp 								; restore and save carry
.1981	08		php				php
.1982	90 06		bcc $198a			bcc 	_MShiftLeft 				; and shift left/right accordingly.
.1984	20 66 22	jsr $2266			jsr 	Mint32ShiftRight
.1987	4c 7a 19	jmp $197a			jmp 	_MShiftLoop
.198a					_MShiftLeft:
.198a	20 5d 22	jsr $225d			jsr 	Mint32ShiftLeft
.198d	4c 7a 19	jmp $197a			jmp 	_MShiftLoop
.1990					_MShiftExit:
.1990	28		plp				plp	 								; throw saved carry and exit
.1991	60		rts				rts
.1992					_MShiftZero:
.1992	4c 48 22	jmp $2248			jmp 	MInt32False 				; return 0 as shifted >= 32 times.

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/compare.asm

.1995					PerformComparison:
.1995	20 8d 1a	jsr $1a8d			jsr 	DereferenceTwo 				; make both values.
.1998	b5 40		lda $40,x			lda 	esType,x 					; check for two strings.
.199a	35 41		and $41,x			and 	esType+1,x
.199c	0a		asl a				asl 	a 							; bit 7 set if both bit 6s were set.
.199d	30 1d		bmi $19bc			bmi 	_PCIsString
.199f	b5 40		lda $40,x			lda 	esType,x 					; check either is floating point.
.19a1	15 41		ora $41,x			ora 	esType+1,x
.19a3	0a		asl a				asl 	a 							; shift bit 6 (string) to bit 7, mixed types
.19a4	30 22		bmi $19c8			bmi 	_PCError
.19a6	29 02		and #$02			and 	#$02 						; because of ASL, check type in bit 0
.19a8	f0 0f		beq $19b9			beq 	_PCIsInteger 				; if not two integers, e.g. 1 of the bits is set
.19aa	20 2c 18	jsr $182c			jsr 	BPMakeBothFloat 			; make both float
.19ad	8a		txa				txa
.19ae	a2 04		ldx #$04		ldx	#4
.19b0	20 eb 27	jsr $27eb		jsr	floatingpointHandler
.19b3	86 0c		stx $0c				stx 	tempShort 					; save result
.19b5	aa		tax				tax
.19b6	a5 0c		lda $0c				lda 	tempShort
.19b8	60		rts				rts
.19b9					_PCIsInteger:
.19b9	4c e8 1f	jmp $1fe8			jmp 	MInt32Compare
.19bc					_PCIsString:
.19bc	8a		txa				txa 								; A has SP
.19bd	a2 06		ldx #$06		ldx	#6
.19bf	20 4f 2c	jsr $2c4f		jsr	stringHandler
.19c2	86 0c		stx $0c				stx 	tempShort 					; save result
.19c4	aa		tax				tax 								; put SP back in X and get result.
.19c5	a5 0c		lda $0c				lda 	tempShort
.19c7	60		rts				rts
.19c8					_PCError:
.19c8	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.19ca	20 b9 24	jsr $24b9		jsr	errorHandler
.19cd					CompareEquals:
.19cd	20 95 19	jsr $1995			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.19d0	c9 00		cmp #$00			cmp 	#$00 						; and we do something if it is = or <> a value.
.19d2	f0 35		beq $1a09			beq  	CompareTrue
.19d4	4c 0c 1a	jmp $1a0c			jmp 	CompareFalse
.19d7					CompareLess:
.19d7	20 95 19	jsr $1995			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.19da	c9 ff		cmp #$ff			cmp 	#$FF 						; and we do something if it is = or <> a value.
.19dc	f0 2b		beq $1a09			beq  	CompareTrue
.19de	4c 0c 1a	jmp $1a0c			jmp 	CompareFalse
.19e1					CompareGreater:
.19e1	20 95 19	jsr $1995			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.19e4	c9 01		cmp #$01			cmp 	#$01 						; and we do something if it is = or <> a value.
.19e6	f0 21		beq $1a09			beq  	CompareTrue
.19e8	4c 0c 1a	jmp $1a0c			jmp 	CompareFalse
.19eb					CompareNotEquals:
.19eb	20 95 19	jsr $1995			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.19ee	c9 00		cmp #$00			cmp 	#$00 						; and we do something if it is = or <> a value.
.19f0	d0 17		bne $1a09			bne  	CompareTrue
.19f2	4c 0c 1a	jmp $1a0c			jmp 	CompareFalse
.19f5					CompareGreaterEq:
.19f5	20 95 19	jsr $1995			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.19f8	c9 ff		cmp #$ff			cmp 	#$FF 						; and we do something if it is = or <> a value.
.19fa	d0 0d		bne $1a09			bne  	CompareTrue
.19fc	4c 0c 1a	jmp $1a0c			jmp 	CompareFalse
.19ff					CompareLessEq:
.19ff	20 95 19	jsr $1995			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.1a02	c9 01		cmp #$01			cmp 	#$01 						; and we do something if it is = or <> a value.
.1a04	d0 03		bne $1a09			bne  	CompareTrue
.1a06	4c 0c 1a	jmp $1a0c			jmp 	CompareFalse
.1a09					CompareTrue:
.1a09	4c 44 22	jmp $2244			jmp 	MInt32True
.1a0c					CompareFalse:
.1a0c	4c 48 22	jmp $2248			jmp 	MInt32False

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/convert.asm

.1a0f					Event_Str:
.1a0f	20 d0 1c	jsr $1cd0			jsr 	EvaluateNumeric 			; get a number.
.1a12	b5 40		lda $40,x			lda 	esType,x 					; is it floating point
.1a14	d0 13		bne $1a29			bne 	_ESFloat
.1a16	20 6c 1a	jsr $1a6c			jsr 	ConvertGetBase 				; get base, or default.
.1a19	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.1a1b	85 04		sta $04				sta 	temp0
.1a1d	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.1a1f	85 05		sta $05				sta 	1+(temp0)
.1a21	b5 49		lda $49,x			lda 	esInt0+1,x 					; get the base
.1a23	20 9e 21	jsr $219e			jsr 	MInt32ToString 				; convert to string.
.1a26	4c 36 1a	jmp $1a36			jmp 	_ESCloneExit 				; clone and exit.
.1a29					_ESFloat:
.1a29	20 bb 22	jsr $22bb			jsr 	CheckRightParen 			; check closing )
.1a2c	20 e7 11	jsr $11e7			jsr 	TOSToTemp0 					; string address in temp0, goes here.
.1a2f	8a		txa				txa
.1a30	a2 14		ldx #$14		ldx	#20
.1a32	20 eb 27	jsr $27eb		jsr	floatingpointHandler
.1a35	aa		tax				tax
.1a36					_ESCloneExit:
.1a36	8a		txa				txa
.1a37	a2 02		ldx #$02		ldx	#2
.1a39	20 4f 2c	jsr $2c4f		jsr	stringHandler
.1a3c	aa		tax				tax
.1a3d	60		rts				rts
.1a3e					UnaryVal:
.1a3e	38		sec				sec 								; Carry set to return value
.1a3f	b0 01		bcs $1a42			bcs 	ValueMain
.1a41					UnaryIsVal:
.1a41	18		clc				clc									; Carry clear to return legitimacy
.1a42					ValueMain:
.1a42	08		php				php 								; save results (CS is value, CC is validation)
.1a43	20 db 1c	jsr $1cdb			jsr 	EvaluateString
.1a46	20 6c 1a	jsr $1a6c			jsr 	ConvertGetBase 				; get base, if any.
.1a49	98		tya				tya
.1a4a	48		pha				pha
.1a4b	20 e7 11	jsr $11e7			jsr 	TOSToTemp0 					; string address in temp0, goes here.
.1a4e	b5 49		lda $49,x			lda 	esInt0+1,x 					; get the base
.1a50	29 7f		and #$7f			and 	#$7F 						; ignore the sign bit.
.1a52	20 b6 20	jsr $20b6			jsr 	MInt32FromString 			; convert it back from a string.
.1a55	b0 0c		bcs $1a63			bcs 	_VMSuccess 					; successfully converted.
.1a57	b5 49		lda $49,x			lda 	esInt0+1,x 					; is base the default
.1a59	c9 8a		cmp #$8a			cmp 	#$80+10 					; if no, then it is integer only.
.1a5b	f0 00		beq $1a5d			beq 	_VMFailed 	 				; so we failed.
.1a5d					_VMFailed:
.1a5d	68		pla				pla
.1a5e	a8		tay				tay
.1a5f	28		plp				plp
.1a60	4c 48 22	jmp $2248			jmp 	MInt32False 				; return 0 whatever.
.1a63					_VMSuccess:
.1a63	68		pla				pla
.1a64	a8		tay				tay
.1a65	28		plp				plp 								; if CS the it was val() so we want the value.
.1a66	b0 03		bcs $1a6b			bcs 	_VMExit
.1a68	4c 44 22	jmp $2244			jmp 	MInt32True 					; otherwise return true as successful.
.1a6b					_VMExit:
.1a6b	60		rts				rts
.1a6c					ConvertGetBase:
.1a6c	a9 8a		lda #$8a			lda 	#10+$80 					; default base 10 signed.
.1a6e	95 49		sta $49,x			sta 	esInt0+1,x
.1a70	b1 02		lda ($02),y			lda 	(codePtr),y 				; check for ,base)
.1a72	c9 c8		cmp #$c8			cmp 	#TKW_COMMA
.1a74	d0 0e		bne $1a84			bne 	_CGBDone 					; not found, should be )
.1a76	e8		inx				inx 								; next level
.1a77	c8		iny				iny 								; skip comma.
.1a78	20 ee 1c	jsr $1cee			jsr 	EvaluateSmallInteger		; evaluate the base.
.1a7b	ca		dex				dex
.1a7c	c9 02		cmp #$02			cmp 	#2 							; base range is 2..16
.1a7e	90 08		bcc $1a88			bcc 	_CGBValue 					; (it should work as high as 37)
.1a80	c9 11		cmp #$11			cmp 	#17
.1a82	b0 04		bcs $1a88			bcs 	_CGBValue
.1a84					_CGBDone:
.1a84	20 bb 22	jsr $22bb			jsr 	CheckRightParen
.1a87	60		rts				rts
.1a88					_CGBValue:
.1a88	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.1a8a	20 b9 24	jsr $24b9		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/dereference.asm

.1a8d					DereferenceTwo:
.1a8d	e8		inx				inx
.1a8e	20 92 1a	jsr $1a92			jsr 	DereferenceOne
.1a91	ca		dex				dex
.1a92					DereferenceOne:
.1a92	b5 40		lda $40,x			lda 	esType,x
.1a94	10 3d		bpl $1ad3			bpl 	_DRNotReference 			; is it a reference ? if not, we don't need to do anything
.1a96	4a		lsr a				lsr 	a 							; do float dereference if bit 0 set.
.1a97	b0 3b		bcs $1ad4			bcs 	_DRFloatDeReference
.1a99	98		tya				tya
.1a9a	48		pha				pha
.1a9b	b5 48		lda $48,x			lda 	esInt0,x 					; copy address to temp0
.1a9d	85 04		sta $04				sta 	temp0
.1a9f	b5 50		lda $50,x			lda 	esInt1,x
.1aa1	85 05		sta $05				sta 	temp0+1
.1aa3	a9 00		lda #$00			lda 	#0 							; clear esInt1..3
.1aa5	95 50		sta $50,x			sta 	esInt1,x
.1aa7	95 58		sta $58,x			sta 	esInt2,x
.1aa9	95 60		sta $60,x			sta 	esInt3,x
.1aab	b5 40		lda $40,x			lda 	esType,x 					; get the type byte.
.1aad	29 60		and #$60			and 	#$60 						; get string flag ($40) and byte flag ($20)
.1aaf	0a		asl a				asl 	a 							; now string ($80) byte ($40)
.1ab0	30 0d		bmi $1abf			bmi 	_DeRefString 				; string, 2 bytes only
.1ab2	d0 11		bne $1ac5			bne 	_DeRefByte 					; byte 1 byte only
.1ab4					_DeRefLong:
.1ab4	a0 03		ldy #$03			ldy 	#3
.1ab6	b1 04		lda ($04),y			lda 	(temp0),y
.1ab8	95 60		sta $60,x			sta 	esInt3,x
.1aba	88		dey				dey
.1abb	b1 04		lda ($04),y			lda 	(temp0),y
.1abd	95 58		sta $58,x			sta 	esInt2,x
.1abf					_DeRefString:
.1abf	a0 01		ldy #$01			ldy 	#1
.1ac1	b1 04		lda ($04),y			lda 	(temp0),y
.1ac3	95 50		sta $50,x			sta 	esInt1,x
.1ac5					_DeRefByte:
.1ac5	a0 00		ldy #$00			ldy 	#0
.1ac7	b1 04		lda ($04),y			lda 	(temp0),y
.1ac9	95 48		sta $48,x			sta 	esInt0,x
.1acb	b5 40		lda $40,x			lda 	esType,x 					; clear byte and deref bits.
.1acd	29 40		and #$40			and 	#$40
.1acf	95 40		sta $40,x			sta 	esType,x
.1ad1	68		pla				pla
.1ad2	a8		tay				tay
.1ad3					_DRNotReference
.1ad3	60		rts				rts
.1ad4					_DRFloatDereference:
.1ad4	20 e7 11	jsr $11e7			jsr 	TOSToTemp0 					; address to deref in temp0
.1ad7	8a		txa				txa
.1ad8	a2 1c		ldx #$1c		ldx	#28
.1ada	20 eb 27	jsr $27eb		jsr	floatingpointHandler
.1add	aa		tax				tax
.1ade	a9 01		lda #$01			lda 	#$01 						; type to FP (float)
.1ae0	95 40		sta $40,x			sta 	esType,x
.1ae2	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/evaluate.asm

.1ae3					EvaluateLevel:
.1ae3	48		pha				pha 								; save precedence level.
.1ae4	a9 00		lda #$00			lda 	#0 							; zero the current stack level.
.1ae6	95 48		sta $48,x			sta 	esInt0,x
.1ae8	95 50		sta $50,x			sta 	esInt1,x
.1aea	95 58		sta $58,x			sta 	esInt2,x
.1aec	95 60		sta $60,x			sta 	esInt3,x
.1aee	95 40		sta $40,x			sta 	esType,x 					; zero the type (integer value)
.1af0	b1 02		lda ($02),y			lda 	(codePtr),y	 				; look at first token/character
.1af2	30 21		bmi $1b15			bmi 	_ELIsToken 					; if -ve could be string, float, or unary function.
.1af4	0a		asl a				asl 	a 							; if 00-3F then will now be PL and it's a variable.
.1af5	30 0a		bmi $1b01			bmi 	_ELIsConstant 				; 40-7F will be -ve and that's an integer constant.
.1af7	8a		txa				txa 								; stack level in X
.1af8	a2 00		ldx #$00		ldx	#0
.1afa	20 f2 35	jsr $35f2		jsr	variableHandler
.1afd	aa		tax				tax
.1afe	4c 3e 1b	jmp $1b3e			jmp		_ELHasTerm
.1b01					_ELIsConstant:
.1b01	4a		lsr a				lsr 	a 							; get the value back
.1b02	29 3f		and #$3f			and 	#$3F 						; force into range 0-63
.1b04	95 48		sta $48,x			sta 	esInt0,x 					; and put in LSB.
.1b06					_ELCheckNext:
.1b06	c8		iny				iny 								; look at next
.1b07	b1 02		lda ($02),y			lda 	(codePtr),y
.1b09	49 40		eor #$40			eor 	#$40 						; shift around so 40-7F => 00-3F
.1b0b	c9 40		cmp #$40			cmp 	#$40 						; out of range ?
.1b0d	b0 2f		bcs $1b3e			bcs 	_ELHasTerm 					; done getting the constant.
.1b0f	20 d7 1b	jsr $1bd7			jsr 	ELShiftByteIn 				; shift byte into position.
.1b12	4c 06 1b	jmp $1b06			jmp 	_ELCheckNext
.1b15					_ELIsToken:
.1b15	c9 85		cmp #$85			cmp 	#TOK_STR 					; handle strings.
.1b17	f0 0f		beq $1b28			beq 	_ELIsString
.1b19	c9 84		cmp #$84			cmp 	#TOK_FPC 					; if no, then check unary.
.1b1b	d0 5f		bne $1b7c			bne 	_ELCheckUnary
.1b1d	8a		txa				txa 								; put X into A
.1b1e	c8		iny				iny 								; skip over the float marker
.1b1f	a2 18		ldx #$18		ldx	#24
.1b21	20 eb 27	jsr $27eb		jsr	floatingpointHandler
.1b24	aa		tax				tax 								; restore X
.1b25	4c 3e 1b	jmp $1b3e			jmp 	_ELHasTerm
.1b28					_ELIsString:
.1b28	98		tya				tya 								; address of string is codePtr+y+1
.1b29	38		sec				sec
.1b2a	65 02		adc $02				adc 	codePtr
.1b2c	95 48		sta $48,x			sta 	esInt0,x
.1b2e	a5 03		lda $03				lda 	codePtr+1
.1b30	69 00		adc #$00			adc 	#0
.1b32	95 50		sta $50,x			sta 	esInt1,x
.1b34	a9 40		lda #$40			lda 	#$40 						; set type to string value
.1b36	95 40		sta $40,x			sta 	esType,x
.1b38	c8		iny				iny 								; skip over string.
.1b39	98		tya				tya
.1b3a	38		sec				sec									; +1 for the length itself.
.1b3b	71 02		adc ($02),y			adc 	(codePtr),y
.1b3d	a8		tay				tay 								; and fall through to term loop code.
.1b3e					_ELHasTerm:
.1b3e	b1 02		lda ($02),y			lda 	(codePtr),y
.1b40	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; check in the correct range for binary tokens.
.1b42	90 04		bcc $1b48			bcc 	_ELPopExit
.1b44	c9 99		cmp #$99			cmp 	#TOK_STRUCTST
.1b46	90 02		bcc $1b4a			bcc 	_ELHasBinaryTerm
.1b48					_ELPopExit:
.1b48	68		pla				pla
.1b49					_ELExit:
.1b49	60		rts				rts
.1b4a					_ELHasBinaryTerm:
.1b4a	84 0c		sty $0c				sty 	tempShort 					; save position
.1b4c	a8		tay				tay 								; use token as an index and get the precedence.
.1b4d	b9 7f 1b	lda $1b7f,y			lda 	ELBinaryOperatorInfo-TOK_BINARYST,y
.1b50	a4 0c		ldy $0c				ldy 	tempShort 					; restore Y
.1b52	85 0c		sta $0c				sta 	tempShort 					; save precedence in memory.
.1b54	68		pla				pla 								; restore current level.
.1b55	c5 0c		cmp $0c				cmp 	tempShort 					; if current >= operator then exit
.1b57	b0 f0		bcs $1b49			bcs 	_ELExit
.1b59	48		pha				pha 								; save current level back on the stack.
.1b5a	b1 02		lda ($02),y			lda 	(codePtr),y 				; save the binary operator on the stack and skip it.
.1b5c	48		pha				pha
.1b5d	c8		iny				iny
.1b5e	e8		inx				inx 								; calculate the RHS at the operator precedence.
.1b5f	a5 0c		lda $0c				lda 	tempShort
.1b61	20 e3 1a	jsr $1ae3			jsr 	EvaluateLevel
.1b64	ca		dex				dex
.1b65	68		pla				pla 								; get the operator back out.
.1b66					_ELExecuteA:
.1b66	86 0c		stx $0c				stx 	tempShort 					; upload the vectors. Would be nice to use jmp (aaaa,x)
.1b68	0a		asl a				asl 	a 							; but not practical. May use push/rts later.
.1b69	aa		tax				tax
.1b6a	bd 8f 15	lda $158f,x			lda 	Group0Vectors,x
.1b6d	85 04		sta $04				sta 	temp0
.1b6f	bd 90 15	lda $1590,x			lda 	Group0Vectors+1,x
.1b72	85 05		sta $05				sta 	temp0+1
.1b74	a6 0c		ldx $0c				ldx 	tempShort
.1b76	20 c3 1b	jsr $1bc3			jsr 	_ELCallTemp0
.1b79	4c 3e 1b	jmp $1b3e			jmp 	_ELHasTerm 					; and loop back round.
.1b7c					_ELCheckUnary:
.1b7c	c8		iny				iny 								; skip over token.
.1b7d	c9 90		cmp #$90			cmp 	#TKW_MINUS 					; is it - term
.1b7f	f0 19		beq $1b9a			beq 	_ELMinus
.1b81	c9 97		cmp #$97			cmp 	#TKW_PLING 					; is it ! or ? term
.1b83	f0 2c		beq $1bb1			beq 	_ELIndirect
.1b85	c9 98		cmp #$98			cmp 	#TKW_QMARK
.1b87	f0 28		beq $1bb1			beq 	_ELIndirect
.1b89	c9 83		cmp #$83			cmp 	#TOK_SHIFT3 				; is it the unary extension.
.1b8b	f0 39		beq $1bc6			beq 	_ELExtension
.1b8d	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST 				; must be TOK_UNARYST ... TOK_TOKENS
.1b8f	90 04		bcc $1b95			bcc 	_ELUSyntax
.1b91	c9 c6		cmp #$c6			cmp 	#TOK_TOKENS
.1b93	90 d1		bcc $1b66			bcc 	_ELExecuteA 				; if so do that token.
.1b95					_ELUSyntax:
.1b95	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.1b97	20 b9 24	jsr $24b9		jsr	errorHandler
.1b9a					_ELMinus:
.1b9a	20 af 1c	jsr $1caf			jsr 	EvaluateNumericTerm 		; get a number to negate.
.1b9d	b5 40		lda $40,x			lda 	esType,x 					; is it integer
.1b9f	f0 0a		beq $1bab			beq 	_ELMinusInteger
.1ba1	8a		txa				txa
.1ba2	a2 0c		ldx #$0c		ldx	#12
.1ba4	20 eb 27	jsr $27eb		jsr	floatingpointHandler
.1ba7	aa		tax				tax
.1ba8	4c 3e 1b	jmp $1b3e			jmp 	_ELHasTerm
.1bab					_ELMinusInteger:
.1bab	20 02 22	jsr $2202			jsr 	MInt32Negate 				; do int negate
.1bae	4c 3e 1b	jmp $1b3e			jmp 	_ELHasTerm
.1bb1					_ELIndirect:
.1bb1	48		pha				pha 								; save what we want (TKW_QMARK TWK_PLING)
.1bb2	20 b8 1c	jsr $1cb8			jsr 	EvaluateIntegerTerm 		; integer address
.1bb5	68		pla				pla
.1bb6	49 97		eor #$97			eor 	#TKW_PLING 					; now $00 if !
.1bb8	f0 02		beq $1bbc			beq 	_ELHaveModifier
.1bba	a9 20		lda #$20			lda 	#$20 						; now $00 if !, $20 if ?
.1bbc					_ELHaveModifier:
.1bbc	09 80		ora #$80			ora 	#$80						; make it the appropriate reference.
.1bbe	95 40		sta $40,x			sta 	esType,x 					; $80 for ! $A0 for ?
.1bc0	4c 3e 1b	jmp $1b3e			jmp 	_ELHasTerm
.1bc3					_ELCallTemp0:
.1bc3	6c 04 00	jmp ($0004)			jmp 	(temp0)
.1bc6					_ELExtension:
.1bc6	8a		txa				txa 								; stack pos in A
.1bc7	20 60 27	jsr $2760		jsr	extensionHandler
.1bca	aa		tax				tax 								; restore stack
.1bcb	4c 3e 1b	jmp $1b3e			jmp 	_ELHasTerm
.1bce					UnaryParenthesis:
.1bce	a9 00		lda #$00			lda 	#0 							; ( is a unary function ....
.1bd0	20 e3 1a	jsr $1ae3			jsr 	EvaluateLevel
.1bd3	20 bb 22	jsr $22bb			jsr 	CheckRightParen 			; check for )
.1bd6	60		rts				rts
.1bd7					ELShiftByteIn:
.1bd7	48		pha				pha 								; save bits to shift in.
.1bd8	b5 60		lda $60,x			lda 	esInt3,x 					; save top most byte
.1bda	48		pha				pha
.1bdb	b5 58		lda $58,x			lda 	esInt2,x 					; shift everything left 8 bits
.1bdd	95 60		sta $60,x			sta 	esInt3,x
.1bdf	b5 50		lda $50,x			lda 	esInt1,x
.1be1	95 58		sta $58,x			sta 	esInt2,x
.1be3	b5 48		lda $48,x			lda 	esInt0,x
.1be5	95 50		sta $50,x			sta 	esInt1,x
.1be7	a9 00		lda #$00			lda 	#0
.1be9	95 48		sta $48,x			sta 	esInt0,x
.1beb	68		pla				pla 								; now A:TOS is a 5 byte register, shift right twice.
.1bec	29 03		and #$03			and 	#3 							; only want lower 2 bits
.1bee	09 04		ora #$04			ora 	#4  						; set bit 2 - when 1 we are done
.1bf0					_ELShiftLoop:
.1bf0	4a		lsr a				lsr 	a
.1bf1	76 60		ror $60,x			ror 	esInt3,x
.1bf3	76 58		ror $58,x			ror 	esInt2,x
.1bf5	76 50		ror $50,x			ror 	esInt1,x
.1bf7	76 48		ror $48,x			ror 	esInt0,x
.1bf9	c9 01		cmp #$01			cmp 	#1
.1bfb	d0 f3		bne $1bf0			bne 	_ELShiftLoop
.1bfd	68		pla				pla 								; get original 6 bit value and OR in.
.1bfe	29 3f		and #$3f			and 	#$3F
.1c00	15 48		ora $48,x			ora 	esInt0,x
.1c02	95 48		sta $48,x			sta 	esInt0,x
.1c04	60		rts				rts
.1c05					ELBinaryOperatorInfo:

;******  Processing file: main/evaluate/../../generated/binarystructinfo.inc

>1c05	01					.byte	$01			; $86 and
>1c06	01					.byte	$01			; $87 or
>1c07	01					.byte	$01			; $88 xor
>1c08	02					.byte	$02			; $89 >=
>1c09	02					.byte	$02			; $8a <=
>1c0a	02					.byte	$02			; $8b >
>1c0b	02					.byte	$02			; $8c <
>1c0c	02					.byte	$02			; $8d =
>1c0d	02					.byte	$02			; $8e <>
>1c0e	03					.byte	$03			; $8f +
>1c0f	03					.byte	$03			; $90 -
>1c10	04					.byte	$04			; $91 >>
>1c11	04					.byte	$04			; $92 <<
>1c12	04					.byte	$04			; $93 *
>1c13	04					.byte	$04			; $94 /
>1c14	04					.byte	$04			; $95 mod
>1c15	05					.byte	$05			; $96 ^
>1c16	06					.byte	$06			; $97 !
>1c17	06					.byte	$06			; $98 ?
>1c18	82					.byte	$82			; $99 repeat
>1c19	82					.byte	$82			; $9a while
>1c1a	82					.byte	$82			; $9b for
>1c1b	82					.byte	$82			; $9c if
>1c1c	82					.byte	$82			; $9d defproc
>1c1d	80					.byte	$80			; $9e until
>1c1e	80					.byte	$80			; $9f wend
>1c1f	80					.byte	$80			; $a0 next
>1c20	80					.byte	$80			; $a1 then
>1c21	80					.byte	$80			; $a2 endif
>1c22	80					.byte	$80			; $a3 endproc

;******  Return to file: main/evaluate/evaluate.asm


;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/event.asm

.1c23					EventFunction:
.1c23	20 19 1d	jsr $1d19			jsr 	EvaluateReference			; get the variable reference that tracks the event
.1c26	b5 40		lda $40,x			lda 	esType,x
.1c28	c9 80		cmp #$80			cmp 	#$80 						; must be integer reference
.1c2a	d0 5b		bne $1c87			bne 	_EFType
.1c2c	20 c8 22	jsr $22c8			jsr 	CheckComma
.1c2f	e8		inx				inx
.1c30	20 e6 1c	jsr $1ce6			jsr 	EvaluateInteger		 		; get the elapsed time between firing.
.1c33	20 bb 22	jsr $22bb			jsr 	CheckRightParen 			; finish off with the right bracket
.1c36	ca		dex				dex
.1c37	b5 50		lda $50,x			lda 	esInt1,x 					; check max of 32767, we use 16 bit for timers and
.1c39	29 80		and #$80			and 	#$80 						; it doesn't work > 32767
.1c3b	15 58		ora $58,x			ora 	esInt2,x
.1c3d	15 60		ora $60,x			ora 	esInt3,x
.1c3f	d0 41		bne $1c82			bne 	_EFValue
.1c41	98		tya				tya
.1c42	48		pha				pha
.1c43	8a		txa				txa
.1c44	48		pha				pha
.1c45	a2 18		ldx #$18		ldx	#24
.1c47	20 9c 24	jsr $249c		jsr	deviceHandler
.1c4a	84 07		sty $07				sty 	temp1+1
.1c4c	85 06		sta $06				sta 	temp1
.1c4e	68		pla				pla
.1c4f	aa		tax				tax
.1c50	20 e7 11	jsr $11e7			jsr 	TOSToTemp0 					; set temp0 to the address of the event variable
.1c53	a0 03		ldy #$03			ldy 	#3							; if -ve
.1c55	b1 04		lda ($04),y			lda 	(temp0),y
.1c57	30 23		bmi $1c7c			bmi 	_EFFail 	 				; straight out with fail, means "on pause".
.1c59	a0 00		ldy #$00			ldy 	#0 							; is the fire time zero ?
.1c5b	b1 04		lda ($04),y			lda 	(temp0),y
.1c5d	c8		iny				iny
.1c5e	11 04		ora ($04),y			ora 	(temp0),y
.1c60	f0 17		beq $1c79			beq 	_EFInitialise 				; if so, initialise the value but return false.
.1c62	a0 00		ldy #$00			ldy 	#0 							; calculate trigger - timer
.1c64	38		sec				sec
.1c65	b1 04		lda ($04),y			lda 	(temp0),y
.1c67	e5 06		sbc $06				sbc 	temp1
.1c69	c8		iny				iny
.1c6a	b1 04		lda ($04),y			lda 	(temp0),y
.1c6c	e5 07		sbc $07				sbc 	temp1+1
.1c6e	10 0c		bpl $1c7c			bpl 	_EFFail 					; if trigger >= timer then return False
.1c70	20 8c 1c	jsr $1c8c			jsr 	SetEventTimer 				; reset the timer for next time.
.1c73	20 44 22	jsr $2244			jsr	 	MInt32True 					; and treutn true as fired.
.1c76	68		pla				pla
.1c77	a8		tay				tay
.1c78	60		rts				rts
.1c79					_EFInitialise:
.1c79	20 8c 1c	jsr $1c8c			jsr		SetEventTimer 				; set trigger time to time + elapsed
.1c7c					_EFFail:
.1c7c	68		pla				pla
.1c7d	a8		tay				tay
.1c7e	20 48 22	jsr $2248			jsr 	MInt32False
.1c81	60		rts				rts
.1c82					_EFValue:
.1c82	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.1c84	20 b9 24	jsr $24b9		jsr	errorHandler
.1c87					_EFType:
.1c87	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.1c89	20 b9 24	jsr $24b9		jsr	errorHandler
.1c8c					SetEventTimer:
.1c8c	a0 00		ldy #$00			ldy 	#0
.1c8e	18		clc				clc
.1c8f	a5 06		lda $06				lda 	temp1
.1c91	75 49		adc $49,x			adc 	esInt0+1,x
.1c93	91 04		sta ($04),y			sta		(temp0),y
.1c95	c8		iny				iny
.1c96	a5 07		lda $07				lda 	temp1+1
.1c98	75 51		adc $51,x			adc 	esInt1+1,x
.1c9a	91 04		sta ($04),y			sta		(temp0),y
.1c9c	88		dey				dey
.1c9d	11 04		ora ($04),y			ora 	(temp0),y 					; if the result is non zero, exit
.1c9f	d0 04		bne $1ca5			bne 	_SETExit 					; zero means initialise.....
.1ca1	a9 01		lda #$01			lda 	#1 							; timer zero won't work, so make it 1, which is
.1ca3	91 04		sta ($04),y			sta 	(temp0),y 					; near enough.
.1ca5					_SETExit:
.1ca5	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/support.asm

.1ca6					EvaluateTerm:
.1ca6	a9 0f		lda #$0f			lda 	#15 						; no binary operator has this high a precedence.
.1ca8	20 e3 1a	jsr $1ae3			jsr 	EvaluateLevel
.1cab	20 92 1a	jsr $1a92			jsr 	DereferenceOne
.1cae	60		rts				rts
.1caf					EvaluateNumericTerm:
.1caf	20 a6 1c	jsr $1ca6			jsr 	EvaluateTerm
.1cb2	b5 40		lda $40,x			lda 	esType,x
.1cb4	0a		asl a				asl 	a 							; see if it's a string.
.1cb5	30 09		bmi $1cc0			bmi 	ENTType
.1cb7	60		rts				rts
.1cb8					EvaluateIntegerTerm:
.1cb8	20 a6 1c	jsr $1ca6			jsr 	EvaluateTerm
.1cbb	b5 40		lda $40,x			lda 	esType,x
.1cbd	d0 01		bne $1cc0			bne 	ENTType
.1cbf	60		rts				rts
.1cc0					ENTType:
.1cc0	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.1cc2	20 b9 24	jsr $24b9		jsr	errorHandler
.1cc5					EvaluateRoot:
.1cc5	a2 00		ldx #$00			ldx 	#0
.1cc7					Evaluate:
.1cc7	a9 00		lda #$00			lda 	#0
.1cc9	20 e3 1a	jsr $1ae3			jsr 	EvaluateLevel
.1ccc	20 92 1a	jsr $1a92			jsr 	DereferenceOne
.1ccf	60		rts				rts
.1cd0					EvaluateNumeric:
.1cd0	20 c7 1c	jsr $1cc7			jsr 	Evaluate
.1cd3	b5 40		lda $40,x			lda 	esType,x
.1cd5	0a		asl a				asl 	a 							; see if it's a string.
.1cd6	30 e8		bmi $1cc0			bmi 	ENTType
.1cd8	4a		lsr a				lsr 	a 							; shift float flag into carry.
.1cd9	4a		lsr a				lsr 	a
.1cda	60		rts				rts
.1cdb					EvaluateString:
.1cdb	20 c7 1c	jsr $1cc7			jsr 	Evaluate
.1cde	b5 40		lda $40,x			lda 	esType,x
.1ce0	0a		asl a				asl 	a 							; see if it's a string.
.1ce1	10 dd		bpl $1cc0			bpl 	ENTType
.1ce3	60		rts				rts
.1ce4					EvaluateRootInteger:
.1ce4	a2 00		ldx #$00			ldx 	#0
.1ce6					EvaluateInteger:
.1ce6	20 c7 1c	jsr $1cc7			jsr 	Evaluate
.1ce9	b5 40		lda $40,x			lda 	esType,x
.1ceb	d0 d3		bne $1cc0			bne 	ENTType
.1ced	60		rts				rts
.1cee					EvaluateSmallInteger:
.1cee	20 e6 1c	jsr $1ce6			jsr 	EvaluateInteger
.1cf1	b5 50		lda $50,x			lda 	esInt1,x
.1cf3	15 58		ora $58,x			ora 	esInt2,x
.1cf5	15 60		ora $60,x			ora 	esInt3,x
.1cf7	d0 03		bne $1cfc			bne 	_ESIValue
.1cf9	b5 48		lda $48,x			lda 	esInt0,x
.1cfb	60		rts				rts
.1cfc					_ESIValue:
.1cfc	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.1cfe	20 b9 24	jsr $24b9		jsr	errorHandler
.1d01					LinkEvaluate:
.1d01	aa		tax				tax
.1d02	20 c7 1c	jsr $1cc7			jsr 	Evaluate
.1d05	8a		txa				txa
.1d06	60		rts				rts
.1d07					LinkEvaluateTerm:
.1d07	aa		tax				tax
.1d08	20 a6 1c	jsr $1ca6			jsr 	EvaluateTerm
.1d0b	8a		txa				txa
.1d0c	60		rts				rts
.1d0d					LinkEvaluateInteger:
.1d0d	aa		tax				tax
.1d0e	20 e6 1c	jsr $1ce6			jsr 	EvaluateInteger
.1d11	8a		txa				txa
.1d12	60		rts				rts
.1d13					LinkEvaluateSmallInt:
.1d13	aa		tax				tax
.1d14	20 ee 1c	jsr $1cee			jsr 	EvaluateSmallInteger
.1d17	8a		txa				txa
.1d18	60		rts				rts
.1d19					EvaluateReference:
.1d19	ad 16 1c	lda $1c16			lda 	ELBinaryOperatorInfo+TKW_PLING-TOK_BINARYST
.1d1c	38		sec				sec 								; sub 1 to allow a!x b?x to work.
.1d1d	e9 01		sbc #$01			sbc 	#1
.1d1f	20 e3 1a	jsr $1ae3			jsr 	EvaluateLevel
.1d22	b5 40		lda $40,x			lda 	esType,x
.1d24	10 01		bpl $1d27			bpl 	_ERFail
.1d26	60		rts				rts
.1d27					_ERFail:
.1d27	a2 0b		ldx #$0b			ldx 	#ErrorID_NoReference
.1d29	20 b9 24	jsr $24b9		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary.asm

.1d2c					UnaryLen:
.1d2c	20 3a 1d	jsr $1d3a			jsr 	ULStart
.1d2f					ULFinish:
.1d2f	b1 04		lda ($04),y			lda 	(temp0),y 					; get length prefix
.1d31	a4 0c		ldy $0c				ldy 	tempShort 					; get Y back
.1d33	20 57 22	jsr $2257			jsr 	MInt32Set8Bit 				; write it out.
.1d36	20 bb 22	jsr $22bb			jsr 	CheckRightParen
.1d39	60		rts				rts
.1d3a	20 db 1c	jsr $1cdb	ULStart:jsr 	EvaluateString
.1d3d	b5 48		lda $48,x			lda 	esInt0,x 					; copy address of string to temp0
.1d3f	85 04		sta $04				sta 	temp0
.1d41	b5 50		lda $50,x			lda 	esInt1,x
.1d43	85 05		sta $05				sta 	temp0+1
.1d45	84 0c		sty $0c				sty 	tempShort 					; get length
.1d47	a0 00		ldy #$00			ldy 	#0
.1d49	60		rts				rts
.1d4a					UnaryAsc:
.1d4a	20 3a 1d	jsr $1d3a			jsr 	ULStart 					; same as LEN() get string, save Y, point to length.
.1d4d	b1 04		lda ($04),y			lda 	(temp0),y 					; read length
.1d4f	c8		iny				iny 		 						; point to first character, we can do LEN code after that
.1d50	c9 00		cmp #$00			cmp 	#0
.1d52	d0 db		bne $1d2f			bne 	ULFinish 					; if length = 0 then error : asc("") -> error.
.1d54	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.1d56	20 b9 24	jsr $24b9		jsr	errorHandler
.1d59					UnaryAbs:
.1d59	20 d0 1c	jsr $1cd0			jsr 	EvaluateNumeric 			; some numeric value
.1d5c	b0 07		bcs $1d65			bcs 	_UAFloat 					; CS then float, so use that function
.1d5e	20 fd 21	jsr $21fd			jsr 	MInt32Absolute 				; int version
.1d61	20 bb 22	jsr $22bb			jsr 	CheckRightParen
.1d64	60		rts				rts
.1d65					_UAFloat:
.1d65	8a		txa				txa 								; float version
.1d66	a2 00		ldx #$00		ldx	#0
.1d68	20 eb 27	jsr $27eb		jsr	floatingpointHandler
.1d6b	aa		tax				tax
.1d6c	20 bb 22	jsr $22bb			jsr 	CheckRightParen
.1d6f	60		rts				rts
.1d70					UnarySgn:
.1d70	20 d0 1c	jsr $1cd0			jsr 	EvaluateNumeric 			; same as above but sign of value
.1d73	b0 07		bcs $1d7c			bcs 	_USFloat
.1d75	20 35 22	jsr $2235			jsr 	MInt32Sign
.1d78	20 bb 22	jsr $22bb			jsr 	CheckRightParen
.1d7b	60		rts				rts
.1d7c					_USFloat:
.1d7c	8a		txa				txa
.1d7d	a2 0e		ldx #$0e		ldx	#14
.1d7f	20 eb 27	jsr $27eb		jsr	floatingpointHandler
.1d82	aa		tax				tax
.1d83	20 bb 22	jsr $22bb			jsr 	CheckRightParen
.1d86	60		rts				rts
.1d87					UnaryPeek:
.1d87	20 b3 1d	jsr $1db3			jsr 	PDLCode 					; each has common setup code put reads 1,2 or 4 bytes
.1d8a	4c a7 1d	jmp $1da7			jmp 	PDLByte0
.1d8d					UnaryDeek:
.1d8d	20 b3 1d	jsr $1db3			jsr 	PDLCode
.1d90	4c a1 1d	jmp $1da1			jmp 	PDLByte1
.1d93					UnaryLeek:
.1d93	20 b3 1d	jsr $1db3			jsr 	PDLCode
.1d96	a0 03		ldy #$03			ldy 	#3							; read 3-2
.1d98	b1 04		lda ($04),y			lda 	(temp0),y
.1d9a	95 60		sta $60,x			sta 	esInt3,x
.1d9c	88		dey				dey
.1d9d	b1 04		lda ($04),y			lda 	(temp0),y
.1d9f	95 58		sta $58,x			sta 	esInt2,x
.1da1					PDLByte1:
.1da1	a0 01		ldy #$01			ldy 	#1
.1da3	b1 04		lda ($04),y			lda 	(temp0),y
.1da5	95 50		sta $50,x			sta 	esInt1,x
.1da7					PDLByte0:
.1da7	a0 00		ldy #$00			ldy 	#0
.1da9	b1 04		lda ($04),y			lda 	(temp0),y
.1dab	95 48		sta $48,x			sta 	esInt0,x
.1dad	a4 0c		ldy $0c				ldy 	tempShort 					; restore Y
.1daf	20 bb 22	jsr $22bb			jsr 	CheckRightParen 			; check right and return
.1db2	60		rts				rts
.1db3					PDLCode:
.1db3	20 e6 1c	jsr $1ce6			jsr 	EvaluateInteger 			; some address
.1db6	b5 48		lda $48,x			lda 	esInt0,x 					; copy address of string to temp0
.1db8	85 04		sta $04				sta 	temp0
.1dba	b5 50		lda $50,x			lda 	esInt1,x
.1dbc	85 05		sta $05				sta 	temp0+1
.1dbe	a9 00		lda #$00			lda 	#0 							; zero upper 3 bytes of result, type okay.
.1dc0	95 50		sta $50,x			sta 	esInt1,x 					; PEEK needs upper 3 cleared
.1dc2	95 58		sta $58,x			sta 	esInt2,x
.1dc4	95 60		sta $60,x			sta 	esInt3,x
.1dc6	84 0c		sty $0c				sty 	tempShort 					; save Y
.1dc8	60		rts				rts
.1dc9					Unary_Random:
.1dc9	20 78 22	jsr $2278			jsr 	MInt32Random 				; generate random number.
.1dcc	b1 02		lda ($02),y			lda 	(codePtr),y 				; check followed by )
.1dce	c9 c6		cmp #$c6			cmp 	#TKW_RPAREN
.1dd0	f0 08		beq $1dda			beq 	_URExit
.1dd2	e8		inx				inx 								; load range 0..r-1 into +1
.1dd3	20 e6 1c	jsr $1ce6			jsr 	EvaluateInteger
.1dd6	ca		dex				dex
.1dd7	20 9b 20	jsr $209b			jsr 	MInt32Modulus 				; calculate random % modulus
.1dda					_URExit:
.1dda	20 bb 22	jsr $22bb			jsr 	CheckRightParen 			; check right and return
.1ddd	60		rts				rts
.1dde					Unary_Min:
.1dde	a9 01		lda #$01			lda 	#1 							; c1 cmp c2 needs to be > e.g. c1 > c2
.1de0	d0 02		bne $1de4			bne 	UnaryMBody
.1de2					Unary_Max:
.1de2	a9 ff		lda #$ff			lda 	#$FF 						; c1 cmp c2 needs to be < e.g. c1 < c2
.1de4					UnaryMBody:
.1de4	48		pha				pha 								; save comparator on stack, shows min or max
.1de5	20 c7 1c	jsr $1cc7			jsr 	Evaluate 					; get the first thing to check
.1de8					_UnaryMLoop:
.1de8	b1 02		lda ($02),y			lda 	(codePtr),y 				; found ), indicates end.
.1dea	c8		iny				iny
.1deb	c9 c6		cmp #$c6			cmp 	#TKW_RPAREN
.1ded	f0 09		beq $1df8			beq 	_UnaryMExit
.1def	c9 c8		cmp #$c8			cmp 	#TKW_COMMA 					; found , indicates more.
.1df1	f0 07		beq $1dfa			beq 	_UnaryMCompare
.1df3	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.1df5	20 b9 24	jsr $24b9		jsr	errorHandler
.1df8					_UnaryMExit:
.1df8	68		pla				pla 								; done so throw comparator and return.
.1df9	60		rts				rts
.1dfa					_UnaryMCompare:
.1dfa	e8		inx				inx 								; get the 2nd thing to evaluate
.1dfb	20 c7 1c	jsr $1cc7			jsr 	Evaluate
.1dfe	ca		dex				dex
.1dff	20 95 19	jsr $1995			jsr 	PerformComparison 			; this is part of evaluate/compare.asm
.1e02	85 0c		sta $0c				sta 	tempShort 					; save result
.1e04	68		pla				pla 								; get what we need
.1e05	48		pha				pha
.1e06	c5 0c		cmp $0c				cmp 	tempShort 					; did we get it
.1e08	d0 de		bne $1de8			bne 	_UnaryMLoop 				; no, try another value.
.1e0a	20 48 22	jsr $2248			jsr 	MInt32False 				; promote 2nd to 1st.
.1e0d	20 2c 21	jsr $212c			jsr 	MInt32Add
.1e10	4c e8 1d	jmp $1de8			jmp 	_UnaryMLoop
.1e13					Unary_Page:
.1e13	20 48 22	jsr $2248			jsr 	MInt32False 				; zero
.1e16	ad c8 0a	lda $0ac8			lda 	basePage 					; copy base page address in.
.1e19	95 48		sta $48,x			sta 	esInt0,x
.1e1b	ad c9 0a	lda $0ac9			lda 	basePage+1
.1e1e	95 50		sta $50,x			sta 	esInt1,x
.1e20	60		rts				rts
.1e21					UnaryReference:
.1e21	a9 0f		lda #$0f			lda 	#15
.1e23	20 e3 1a	jsr $1ae3			jsr 	EvaluateLevel 				; evaluate term and don't deference.
.1e26	b5 40		lda $40,x			lda 	esType,x 					; check it's a reference.
.1e28	10 05		bpl $1e2f			bpl 	UType
.1e2a	a9 00		lda #$00			lda 	#0 							; make it an integer
.1e2c	95 40		sta $40,x			sta 	esType,x
.1e2e	60		rts				rts
.1e2f					UType:
.1e2f	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.1e31	20 b9 24	jsr $24b9		jsr	errorHandler
.1e34					UnaryHexMarker:
.1e34	4c b8 1c	jmp $1cb8			jmp 	EvaluateIntegerTerm
.1e37					UnaryComplement:
.1e37	20 b8 1c	jsr $1cb8			jsr 	EvaluateIntegerTerm
.1e3a	20 1c 22	jsr $221c			jsr 	MInt32Not
.1e3d	60		rts				rts
.1e3e					UnaryIntToFloat:
.1e3e	20 d0 1c	jsr $1cd0			jsr 	EvaluateNumeric				; some number
.1e41	b5 40		lda $40,x			lda 	esType,x 					; if float already, exit
.1e43	d0 0b		bne $1e50			bne 	_UIFExit
.1e45	8a		txa				txa 								; convert and set type
.1e46	a2 1a		ldx #$1a		ldx	#26
.1e48	20 eb 27	jsr $27eb		jsr	floatingpointHandler
.1e4b	aa		tax				tax
.1e4c	a9 01		lda #$01			lda 	#1
.1e4e	95 40		sta $40,x			sta 	esType,x
.1e50					_UIFExit:
.1e50	60		rts				rts
.1e51					UnaryFloatToInt:
.1e51	20 d0 1c	jsr $1cd0			jsr 	EvaluateNumeric 			; the number
.1e54	b5 40		lda $40,x			lda 	esType,x 					; if int already exit
.1e56	f0 0b		beq $1e63			beq 	_UFIExit
.1e58	8a		txa				txa 								; convert to int
.1e59	a2 12		ldx #$12		ldx	#18
.1e5b	20 eb 27	jsr $27eb		jsr	floatingpointHandler
.1e5e	aa		tax				tax
.1e5f	a9 00		lda #$00			lda 	#0 							; set type
.1e61	95 40		sta $40,x			sta 	esType,x
.1e63					_UFIExit:
.1e63	60		rts				rts
.1e64					UnaryAlloc:
.1e64	e8		inx				inx 								; evaluate memory required
.1e65	20 e6 1c	jsr $1ce6			jsr 	EvaluateInteger
.1e68	20 bb 22	jsr $22bb			jsr 	CheckRightParen
.1e6b	ca		dex				dex
.1e6c	b5 59		lda $59,x			lda 	esInt2+1,x 					; check at least in 64k range.
.1e6e	15 61		ora $61,x			ora 	esInt3+1,x
.1e70	d0 19		bne $1e8b			bne 	_UABadValue
.1e72	20 48 22	jsr $2248			jsr 	MInt32False					; zero return.
.1e75	a5 10		lda $10				lda 	lowMemory+1 				; copy low memory in
.1e77	95 50		sta $50,x			sta 	esInt1,x
.1e79	a5 0f		lda $0f				lda 	lowMemory
.1e7b	95 48		sta $48,x			sta 	esInt0,x
.1e7d	18		clc				clc 								; add alloc required.
.1e7e	75 49		adc $49,x			adc 	esInt0+1,x
.1e80	85 0f		sta $0f				sta 	lowMemory
.1e82	a5 10		lda $10				lda 	lowMemory+1
.1e84	75 51		adc $51,x			adc 	esInt1+1,x
.1e86	85 10		sta $10				sta 	lowMemory+1
.1e88	b0 01		bcs $1e8b			bcs		_UABadValue 				; overflow definitely bad.
.1e8a	60		rts				rts
.1e8b					_UABadValue:
.1e8b	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.1e8d	20 b9 24	jsr $24b9		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary2.asm

.1e90					UnaryTimer:
.1e90	20 bb 22	jsr $22bb			jsr 	CheckRightParen 			; no parameters
.1e93	98		tya				tya
.1e94	48		pha				pha
.1e95	20 6f 22	jsr $226f			jsr 	MInt32Zero 					; zero result
.1e98	86 04		stx $04				stx 	temp0 						; returning in YA so can't use .pshx
.1e9a	a2 18		ldx #$18		ldx	#24
.1e9c	20 9c 24	jsr $249c		jsr	deviceHandler
.1e9f	a6 04		ldx $04				ldx 	temp0						; restore X and update 16 bit result
.1ea1	95 48		sta $48,x			sta 	esInt0,x
.1ea3	98		tya				tya
.1ea4	95 50		sta $50,x			sta 	esInt1,x
.1ea6	68		pla				pla
.1ea7	a8		tay				tay
.1ea8	60		rts				rts
.1ea9					UnaryInkey:
.1ea9	20 bb 22	jsr $22bb			jsr 	CheckRightParen
.1eac	86 04		stx $04				stx 	temp0
.1eae	a2 08		ldx #$08		ldx	#8
.1eb0	20 9c 24	jsr $249c		jsr	deviceHandler
.1eb3	a6 04		ldx $04				ldx 	temp0
.1eb5	20 57 22	jsr $2257			jsr 	MInt32Set8Bit
.1eb8	60		rts				rts
.1eb9					UnaryGet:
.1eb9	20 bb 22	jsr $22bb			jsr 	CheckRightParen
.1ebc	86 04		stx $04				stx 	temp0
.1ebe					_UGLoop:
.1ebe	a2 08		ldx #$08		ldx	#8
.1ec0	20 9c 24	jsr $249c		jsr	deviceHandler
.1ec3	c9 00		cmp #$00			cmp 	#0
.1ec5	f0 f7		beq $1ebe			beq 	_UGLoop
.1ec7	a6 04		ldx $04				ldx 	temp0
.1ec9	20 57 22	jsr $2257			jsr 	MInt32Set8Bit
.1ecc	60		rts				rts
.1ecd					UnarySys:
.1ecd	20 e6 1c	jsr $1ce6			jsr 	EvaluateInteger 				; get the address
.1ed0	20 bb 22	jsr $22bb			jsr 	CheckRightParen
.1ed3	20 e7 11	jsr $11e7			jsr 	TOSToTemp0 						; copy call address to temp0
.1ed6	8a		txa				txa
.1ed7	48		pha				pha
.1ed8	98		tya				tya
.1ed9	48		pha				pha
.1eda	ad 00 0a	lda $0a00			lda 	("A"-"A")*4+SingleLetterVar 	; load AXY
.1edd	ae 5c 0a	ldx $0a5c			ldx 	("X"-"A")*4+SingleLetterVar
.1ee0	ac 60 0a	ldy $0a60			ldy 	("Y"-"A")*4+SingleLetterVar
.1ee3	20 f2 1e	jsr $1ef2			jsr 	_CallTemp0
.1ee6	85 0c		sta $0c				sta 	tempShort 						; restore YX
.1ee8	68		pla				pla
.1ee9	a8		tay				tay
.1eea	68		pla				pla
.1eeb	aa		tax				tax
.1eec	a5 0c		lda $0c				lda 	tempShort
.1eee	20 57 22	jsr $2257			jsr 	MInt32Set8Bit 					; return result.
.1ef1	60		rts				rts
.1ef2					_CallTemp0:
.1ef2	6c 04 00	jmp ($0004)			jmp 	(temp0)

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unarystr.asm

.1ef5					ExecChr:
.1ef5	20 ee 1c	jsr $1cee			jsr 	EvaluateSmallInteger		; character number 0-255
.1ef8	20 bb 22	jsr $22bb			jsr 	CheckRightParen				; right bracket
.1efb	98		tya				tya
.1efc	48		pha				pha
.1efd	8a		txa				txa 								; A = stack
.1efe	b4 48		ldy $48,x			ldy 	esInt0,x					; Y = character
.1f00	a2 00		ldx #$00		ldx	#0
.1f02	20 4f 2c	jsr $2c4f		jsr	stringHandler
.1f05	aa		tax				tax 								; X = stack
.1f06	68		pla				pla
.1f07	a8		tay				tay
.1f08	60		rts				rts
.1f09					ExecLower:
.1f09	38		sec				sec 								; set carry is lower
.1f0a	b0 01		bcs $1f0d			bcs 	ExecUpperLower
.1f0c					ExecUpper:
.1f0c	18		clc				clc 								; clear carry is upper
.1f0d					ExecUpperLower:
.1f0d	08		php				php 								; save carry
.1f0e	20 db 1c	jsr $1cdb			jsr 	EvaluateString 				; string to stack,X
.1f11	20 bb 22	jsr $22bb			jsr 	CheckRightParen 			; check closing right bracket.
.1f14	28		plp				plp 								; restore carry, save Y
.1f15	98		tya				tya
.1f16	48		pha				pha
.1f17	a9 00		lda #$00			lda 	#0 							; A zero if upper, 1 if lower.
.1f19	2a		rol a				rol 	a
.1f1a	a8		tay				tay 								; now in Y
.1f1b	8a		txa				txa 								; do the substring and exit.
.1f1c	a2 08		ldx #$08		ldx	#8
.1f1e	20 4f 2c	jsr $2c4f		jsr	stringHandler
.1f21	aa		tax				tax
.1f22	68		pla				pla
.1f23	a8		tay				tay
.1f24	60		rts				rts
.1f25					ExecLeft:
.1f25	20 db 1c	jsr $1cdb			jsr 	EvaluateString 				; string to stack,X
.1f28	20 c8 22	jsr $22c8			jsr 	CheckComma
.1f2b	e8		inx				inx
.1f2c	a9 01		lda #$01			lda 	#1 							; 1 for 2nd parameter.
.1f2e	20 57 22	jsr $2257			jsr 	MInt32Set8Bit
.1f31	e8		inx				inx
.1f32	20 ee 1c	jsr $1cee			jsr 	EvaluateSmallInteger 		; smallint 3rd parameter
.1f35					ExecSubstring:
.1f35	ca		dex				dex 								; fix up X
.1f36	ca		dex				dex
.1f37	20 bb 22	jsr $22bb			jsr 	CheckRightParen 			; check closing right bracket.
.1f3a	8a		txa				txa 								; do the substring and exit.
.1f3b	a2 0a		ldx #$0a		ldx	#10
.1f3d	20 4f 2c	jsr $2c4f		jsr	stringHandler
.1f40	aa		tax				tax
.1f41	60		rts				rts
.1f42					ExecMid:
.1f42	20 db 1c	jsr $1cdb			jsr 	EvaluateString 				; string to stack,X
.1f45	20 c8 22	jsr $22c8			jsr 	CheckComma
.1f48	e8		inx				inx
.1f49	20 ee 1c	jsr $1cee			jsr 	EvaluateSmallInteger 		; smallint 2nd parameter
.1f4c	c9 00		cmp #$00			cmp 	#0
.1f4e	f0 15		beq $1f65			beq 	_EMValue
.1f50	e8		inx				inx
.1f51	a9 ff		lda #$ff			lda 	#255 						; 255 default for 3nd parameter - this is optional.
.1f53	20 57 22	jsr $2257			jsr 	MInt32Set8Bit
.1f56	b1 02		lda ($02),y			lda 	(codePtr),y 				; is there a ) next
.1f58	c9 c6		cmp #$c6			cmp 	#TKW_RPAREN 				; if so, just MID$(a$,2)
.1f5a	f0 d9		beq $1f35			beq 	ExecSubString
.1f5c	20 c8 22	jsr $22c8			jsr 	CheckComma
.1f5f	20 ee 1c	jsr $1cee			jsr 	EvaluateSmallInteger 		; smallint 2nd parameter
.1f62	4c 35 1f	jmp $1f35			jmp 	ExecSubString
.1f65					_EMValue:
.1f65	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.1f67	20 b9 24	jsr $24b9		jsr	errorHandler
.1f6a					ExecRight:
.1f6a	20 db 1c	jsr $1cdb			jsr 	EvaluateString 				; string to stack,X
.1f6d	20 c8 22	jsr $22c8			jsr 	CheckComma
.1f70	e8		inx				inx
.1f71	20 ee 1c	jsr $1cee			jsr 	EvaluateSmallInteger 		; smallint 2nd parameter.
.1f74	ca		dex				dex
.1f75	98		tya				tya
.1f76	48		pha				pha
.1f77	b5 48		lda $48,x			lda 	esInt0,x 					; copy address of string to temp0
.1f79	85 04		sta $04				sta 	temp0
.1f7b	b5 50		lda $50,x			lda 	esInt1,x
.1f7d	85 05		sta $05				sta 	temp0+1
.1f7f	a0 00		ldy #$00			ldy 	#0 							; point to length
.1f81	b1 04		lda ($04),y			lda 	(temp0),y 					; get the length.
.1f83	18		clc				clc 								; add 1.
.1f84	69 01		adc #$01			adc 	#1
.1f86	38		sec				sec
.1f87	f5 49		sbc $49,x			sbc 	esInt0+1,x  				; subtract right count.
.1f89	f0 02		beq $1f8d			beq		_ERMake1 					; if zero, make it 1.
.1f8b	b0 02		bcs $1f8f			bcs		_EROkay
.1f8d					_ERMake1:
.1f8d	a9 01		lda #$01			lda 	#1 							; start position.
.1f8f					_EROkay:
.1f8f	e8		inx				inx 								; set start pos.
.1f90	95 48		sta $48,x			sta 	esInt0,x
.1f92	e8		inx				inx
.1f93	a9 ff		lda #$ff			lda 	#255 						; 255 default for 3nd parameter.
.1f95	20 57 22	jsr $2257			jsr 	MInt32Set8Bit
.1f98	68		pla				pla
.1f99	a8		tay				tay
.1f9a	4c 35 1f	jmp $1f35			jmp 	ExecSubString 				; do the substring code.

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32binary.asm

.1f9d					MInt32And:
.1f9d	b5 48		lda $48,x			lda 	esInt0,x
.1f9f	35 49		and $49,x			and 	esInt0+1,x
.1fa1	95 48		sta $48,x			sta 	esInt0,x
.1fa3	b5 50		lda $50,x			lda 	esInt1,x
.1fa5	35 51		and $51,x			and 	esInt1+1,x
.1fa7	95 50		sta $50,x			sta 	esInt1,x
.1fa9	b5 58		lda $58,x			lda 	esInt2,x
.1fab	35 59		and $59,x			and 	esInt2+1,x
.1fad	95 58		sta $58,x			sta 	esInt2,x
.1faf	b5 60		lda $60,x			lda 	esInt3,x
.1fb1	35 61		and $61,x			and 	esInt3+1,x
.1fb3	95 60		sta $60,x			sta 	esInt3,x
.1fb5	60		rts				rts
.1fb6					MInt32Or:
.1fb6	b5 48		lda $48,x			lda 	esInt0,x
.1fb8	15 49		ora $49,x			ora 	esInt0+1,x
.1fba	95 48		sta $48,x			sta 	esInt0,x
.1fbc	b5 50		lda $50,x			lda 	esInt1,x
.1fbe	15 51		ora $51,x			ora 	esInt1+1,x
.1fc0	95 50		sta $50,x			sta 	esInt1,x
.1fc2	b5 58		lda $58,x			lda 	esInt2,x
.1fc4	15 59		ora $59,x			ora 	esInt2+1,x
.1fc6	95 58		sta $58,x			sta 	esInt2,x
.1fc8	b5 60		lda $60,x			lda 	esInt3,x
.1fca	15 61		ora $61,x			ora 	esInt3+1,x
.1fcc	95 60		sta $60,x			sta 	esInt3,x
.1fce	60		rts				rts
.1fcf					MInt32Xor:
.1fcf	b5 48		lda $48,x			lda 	esInt0,x
.1fd1	55 49		eor $49,x			eor 	esInt0+1,x
.1fd3	95 48		sta $48,x			sta 	esInt0,x
.1fd5	b5 50		lda $50,x			lda 	esInt1,x
.1fd7	55 51		eor $51,x			eor 	esInt1+1,x
.1fd9	95 50		sta $50,x			sta 	esInt1,x
.1fdb	b5 58		lda $58,x			lda 	esInt2,x
.1fdd	55 59		eor $59,x			eor 	esInt2+1,x
.1fdf	95 58		sta $58,x			sta 	esInt2,x
.1fe1	b5 60		lda $60,x			lda 	esInt3,x
.1fe3	55 61		eor $61,x			eor 	esInt3+1,x
.1fe5	95 60		sta $60,x			sta 	esInt3,x
.1fe7	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32compare.asm

.1fe8					MInt32Compare:
.1fe8	b5 48		lda $48,x			lda 	esInt0,x 					; equality check first.
.1fea	d5 49		cmp $49,x			cmp 	esInt0+1,x
.1fec	d0 13		bne $2001			bne 	MInt32Compare2
.1fee	b5 50		lda $50,x			lda 	esInt1,x
.1ff0	d5 51		cmp $51,x			cmp 	esInt1+1,x
.1ff2	d0 0d		bne $2001			bne 	MInt32Compare2
.1ff4	b5 58		lda $58,x			lda 	esInt2,x
.1ff6	d5 59		cmp $59,x			cmp 	esInt2+1,x
.1ff8	d0 07		bne $2001			bne 	MInt32Compare2
.1ffa	b5 60		lda $60,x			lda 	esInt3,x
.1ffc	55 61		eor $61,x			eor 	esInt3+1,x 					; EOR will return 0 if the same.
.1ffe	d0 01		bne $2001			bne 	MInt32Compare2
.2000	60		rts				rts
.2001					MInt32Compare2:
.2001	b5 48		lda $48,x			lda		esInt0,x 					; unsigned 32 bit comparison.
.2003	d5 49		cmp $49,x			cmp 	esInt0+1,x
.2005	b5 50		lda $50,x			lda		esInt1,x
.2007	f5 51		sbc $51,x			sbc 	esInt1+1,x
.2009	b5 58		lda $58,x			lda		esInt2,x
.200b	f5 59		sbc $59,x			sbc 	esInt2+1,x
.200d	b5 60		lda $60,x			lda		esInt3,x
.200f	f5 61		sbc $61,x			sbc 	esInt3+1,x
.2011	50 02		bvc $2015			bvc 	_I32LNoOverflow 			; make it signed 32 bit comparison
.2013	49 80		eor #$80			eor 	#$80
.2015					_I32LNoOverflow
.2015	30 03		bmi $201a			bmi 	MInt32CLess					; if -ve then return $FF
.2017	a9 01		lda #$01			lda 	#$01						; else return $01
.2019	60		rts				rts
.201a					MInt32CLess:
.201a	a9 ff		lda #$ff			lda 	#$FF
.201c	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32divide.asm

.201d					MInt32SDivide:
.201d	98		tya				tya  								; save Y, which is the count of negations
.201e	48		pha				pha
.201f	a0 00		ldy #$00			ldy 	#0 							; zero count
.2021	20 39 20	jsr $2039			jsr 	_MInt32SRemSign 			; unsign TOS
.2024	e8		inx				inx 								; unsign TOS+1
.2025	20 39 20	jsr $2039			jsr 	_MInt32SRemSign
.2028	ca		dex				dex
.2029	98		tya				tya 								; save sign count on stack
.202a	48		pha				pha
.202b	20 42 20	jsr $2042			jsr 	MInt32UDivide 				; unsigned division
.202e	68		pla				pla 								; get sign count back
.202f	29 01		and #$01			and 	#1 							; if it is odd, then negate result
.2031	f0 03		beq $2036			beq 	_I32SNoNeg
.2033	20 02 22	jsr $2202			jsr 	MInt32Negate
.2036					_I32SNoNeg:
.2036	68		pla				pla 								; restoe Y and exit
.2037	a8		tay				tay
.2038	60		rts				rts
.2039					_MInt32SRemSign:
.2039	b5 60		lda $60,x			lda 	esInt3,x 					; is it -ve
.203b	10 04		bpl $2041			bpl 	_MInt32SRSExit
.203d	c8		iny				iny 								; increment the sign count
.203e	20 02 22	jsr $2202			jsr 	MInt32Negate 				; negate the value.
.2041					_MInt32SRSExit:
.2041	60		rts				rts
.2042					MInt32UDivide:
.2042	b5 49		lda $49,x			lda 	esInt0+1,x 					; check for division by zero
.2044	15 51		ora $51,x			ora 	esInt1+1,x
.2046	15 52		ora $52,x			ora 	esInt1+2,x
.2048	15 53		ora $53,x			ora 	esInt1+3,x
.204a	f0 4a		beq $2096			beq 	_MInt32DZero
.204c	e8		inx				inx 								; clear A
.204d	e8		inx				inx
.204e	20 48 22	jsr $2248			jsr 	MInt32False
.2051	ca		dex				dex
.2052	ca		dex				dex
.2053	98		tya				tya 								; save Y on the stack
.2054	48		pha				pha
.2055	a0 20		ldy #$20			ldy 	#32 						; number of division passes
.2057					_MInt32UDLoop:
.2057	16 48		asl $48,x			asl 	esInt0,x					; shift QA left. First Q
.2059	36 50		rol $50,x			rol 	esInt1,x
.205b	36 58		rol $58,x			rol 	esInt2,x
.205d	36 60		rol $60,x			rol 	esInt3,x
.205f	36 4a		rol $4a,x			rol 	esInt0+2,x 					; then A.
.2061	36 52		rol $52,x			rol 	esInt1+2,x
.2063	36 5a		rol $5a,x			rol 	esInt2+2,x
.2065	36 62		rol $62,x			rol 	esInt3+2,x
.2067	38		sec				sec 								; calculate A-M saving result on the stack
.2068	b5 4a		lda $4a,x			lda 	esInt0+2,x
.206a	f5 49		sbc $49,x			sbc 	esInt0+1,x
.206c	48		pha				pha
.206d	b5 52		lda $52,x			lda 	esInt1+2,x
.206f	f5 51		sbc $51,x			sbc 	esInt1+1,x
.2071	48		pha				pha
.2072	b5 5a		lda $5a,x			lda 	esInt2+2,x
.2074	f5 59		sbc $59,x			sbc 	esInt2+1,x
.2076	48		pha				pha
.2077	b5 62		lda $62,x			lda 	esInt3+2,x
.2079	f5 61		sbc $61,x			sbc 	esInt3+1,x
.207b	90 10		bcc $208d			bcc		_MInt32NoSubtract 			; if A < M (e.g. carry clear) then reject this.
.207d	95 62		sta $62,x			sta 	esInt3+2,x 					; write result back to A
.207f	68		pla				pla
.2080	95 5a		sta $5a,x			sta 	esInt2+2,x
.2082	68		pla				pla
.2083	95 52		sta $52,x			sta 	esInt1+2,x
.2085	68		pla				pla
.2086	95 4a		sta $4a,x			sta 	esInt0+2,x
.2088	f6 48		inc $48,x			inc 	esInt0,x 					; sets bit 0 of Q - it was shifted left previously.
.208a	4c 90 20	jmp $2090			jmp 	_MInt32Next 					; do the next iteration
.208d					_MInt32NoSubtract:
.208d	68		pla				pla
.208e	68		pla				pla
.208f	68		pla				pla
.2090					_MInt32Next:
.2090	88		dey				dey 								; do this 32 times.
.2091	d0 c4		bne $2057			bne 	_MInt32UDLoop
.2093	68		pla				pla 								; restore Y and exit
.2094	a8		tay				tay
.2095	60		rts				rts
.2096					_MInt32DZero:
.2096	a2 05		ldx #$05			ldx 	#ErrorID_DivZero
.2098	20 b9 24	jsr $24b9		jsr	errorHandler
.209b					MInt32Modulus:
.209b	20 42 20	jsr $2042			jsr 	MInt32UDivide 				; do the division.
.209e	b5 62		lda $62,x			lda 	esInt3+2,x 					; copy 2nd on stack (the remainder) to the top.
.20a0	95 60		sta $60,x			sta 	esInt3,x
.20a2	b5 5a		lda $5a,x			lda 	esInt2+2,x
.20a4	95 58		sta $58,x			sta 	esInt2,x
.20a6	b5 52		lda $52,x			lda 	esInt1+2,x
.20a8	95 50		sta $50,x			sta 	esInt1,x
.20aa	b5 4a		lda $4a,x			lda 	esInt0+2,x
.20ac	95 48		sta $48,x			sta 	esInt0,x
.20ae	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32fromstr.asm

.0b1c					fs32Length:
>0b1c							.fill 	1
.20af					LinkInt32FromString:
.20af	aa		tax				tax
.20b0	98		tya				tya
.20b1	20 b6 20	jsr $20b6			jsr 	MInt32FromString
.20b4	8a		txa				txa
.20b5	60		rts				rts
.20b6					MInt32FromString:
.20b6	85 0c		sta $0c				sta 	tempShort 					; save base
.20b8	98		tya				tya
.20b9	48		pha				pha
.20ba	a0 00		ldy #$00			ldy 	#0 							; get length of string to convert
.20bc	b1 04		lda ($04),y			lda 	(temp0),y
.20be	8d 1c 0b	sta $0b1c			sta 	fs32Length
.20c1	f0 65		beq $2128			beq 	_I32FSFail2					; fail if length zero.
.20c3	a0 01		ldy #$01			ldy 	#1 							; set index into string being read
.20c5	b1 04		lda ($04),y			lda 	(temp0),y 					; look at first character
.20c7	c9 2d		cmp #$2d			cmp 	#"-"						; is it a - character
.20c9	d0 09		bne $20d4			bne 	_I32FSNotNegative
.20cb	ad 1c 0b	lda $0b1c			lda 	fs32Length 					; get length back.
.20ce	c9 01		cmp #$01			cmp 	#1 							; if 1 it is just a - on its own so fail.
.20d0	f0 56		beq $2128			beq 	_I32FSFail2
.20d2	a0 02		ldy #$02			ldy 	#2 							; first digit of the number.
.20d4					_I32FSNotNegative:
.20d4	a5 0c		lda $0c				lda 	tempShort 					; get the base back.
.20d6	c0 02		cpy #$02			cpy 	#2 							; if we read a -ve (e.g. Y == 2)
.20d8	d0 02		bne $20dc			bne 	_I32FSNN2
.20da	09 80		ora #$80			ora 	#$80						; set bit 7, this indicates a negated result.
.20dc					_I32FSNN2:
.20dc	48		pha				pha 								; save base + final sign on stack.
.20dd	20 48 22	jsr $2248			jsr 	MInt32False 				; zero the return value.
.20e0					_I32FSMainLoop:
.20e0	68		pla				pla 								; get the base back into tempShort
.20e1	48		pha				pha
.20e2	29 7f		and #$7f			and 	#$7F
.20e4	85 0c		sta $0c				sta 	tempShort
.20e6	b1 04		lda ($04),y			lda 	(temp0),y 					; look at next character.
.20e8	c9 61		cmp #$61			cmp 	#"a" 						; fix up case.
.20ea	90 02		bcc $20ee			bcc 	_I32FSNotLC
.20ec	e9 20		sbc #$20			sbc 	#32
.20ee					_I32FSNotLC:
.20ee	38		sec				sec 								; subtract 48 (ASCII "0") - ASCII to Hex conversion
.20ef	e9 30		sbc #$30			sbc 	#"0"
.20f1	90 34		bcc $2127			bcc 	_I32FSFail 					; nothing more to do.
.20f3	c9 0a		cmp #$0a			cmp 	#9+1 						; if it is 0-9 validate vs base.
.20f5	90 06		bcc $20fd			bcc 	_I32FSValidate
.20f7	c9 11		cmp #$11			cmp 	#17 						; is it between 58 and 64 ? if so bad.
.20f9	90 2c		bcc $2127			bcc 	_I32FSFail
.20fb	e9 07		sbc #$07			sbc 	#7 							; adjust into range so now character is 0->nnn
.20fd					_I32FSValidate:
.20fd	c5 0c		cmp $0c				cmp 	tempShort 					; compare against the base.
.20ff	b0 26		bcs $2127			bcs 	_I32FSFail 					; sorry, too large for this base, so fail.
.2101	48		pha				pha 								; save the new digit value.
.2102	e8		inx				inx 								; put base into next slot up on stack
.2103	a5 0c		lda $0c				lda 	tempShort
.2105	20 57 22	jsr $2257			jsr 	MInt32Set8Bit
.2108	ca		dex				dex
.2109	20 60 21	jsr $2160			jsr 	MInt32Multiply 				; multiply current by the base
.210c	e8		inx				inx
.210d	68		pla				pla  								; put additive into next slot
.210e	20 57 22	jsr $2257			jsr 	MInt32Set8Bit
.2111	ca		dex				dex
.2112	20 2c 21	jsr $212c			jsr 	MInt32Add 					; and add it
.2115	c8		iny				iny 								; bump the character pointer
.2116	cc 1c 0b	cpy $0b1c			cpy 	fs32Length 					; until > length.
.2119	f0 c5		beq $20e0			beq 	_I32FSMainLoop
.211b	90 c3		bcc $20e0			bcc 	_I32FSMainLoop
.211d					_I32FSDone:
.211d	68		pla				pla 								; get base/final sign back
.211e	10 03		bpl $2123			bpl 	_I32FSNN3
.2120	20 02 22	jsr $2202			jsr 	MInt32Negate 				; negate the result.
.2123					_I32FSNN3:
.2123	68		pla				pla
.2124	a8		tay				tay
.2125	38		sec				sec
.2126	60		rts				rts
.2127					_I32FSFail:
.2127	68		pla				pla
.2128					_I32FSFail2:
.2128	68		pla				pla
.2129	a8		tay				tay
.212a	18		clc				clc
.212b	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32math.asm

.212c					MInt32Add:
.212c	18		clc				clc
.212d	b5 48		lda $48,x			lda 	esInt0,x
.212f	75 49		adc $49,x			adc 	esInt0+1,x
.2131	95 48		sta $48,x			sta 	esInt0,x
.2133	b5 50		lda $50,x			lda 	esInt1,x
.2135	75 51		adc $51,x			adc 	esInt1+1,x
.2137	95 50		sta $50,x			sta 	esInt1,x
.2139	b5 58		lda $58,x			lda 	esInt2,x
.213b	75 59		adc $59,x			adc 	esInt2+1,x
.213d	95 58		sta $58,x			sta 	esInt2,x
.213f	b5 60		lda $60,x			lda 	esInt3,x
.2141	75 61		adc $61,x			adc 	esInt3+1,x
.2143	95 60		sta $60,x			sta 	esInt3,x
.2145	60		rts				rts
.2146					MInt32Sub:
.2146	38		sec				sec
.2147	b5 48		lda $48,x			lda 	esInt0,x
.2149	f5 49		sbc $49,x			sbc 	esInt0+1,x
.214b	95 48		sta $48,x			sta 	esInt0,x
.214d	b5 50		lda $50,x			lda 	esInt1,x
.214f	f5 51		sbc $51,x			sbc 	esInt1+1,x
.2151	95 50		sta $50,x			sta 	esInt1,x
.2153	b5 58		lda $58,x			lda 	esInt2,x
.2155	f5 59		sbc $59,x			sbc 	esInt2+1,x
.2157	95 58		sta $58,x			sta 	esInt2,x
.2159	b5 60		lda $60,x			lda 	esInt3,x
.215b	f5 61		sbc $61,x			sbc 	esInt3+1,x
.215d	95 60		sta $60,x			sta 	esInt3,x
.215f	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32multiply.asm

.2160					MInt32Multiply:
.2160	e8		inx				inx 								; copy 2nd -> 3rd
.2161	20 86 21	jsr $2186			jsr 	MInt32CopyUp
.2164	ca		dex				dex
.2165	20 86 21	jsr $2186			jsr 	MInt32CopyUp 				; copy 1st -> 2nd
.2168	20 48 22	jsr $2248			jsr 	MInt32False 				; zero 1st.
.216b					_I32Loop:
.216b	b5 4a		lda $4a,x			lda 	esInt0+2,x 					; get low bit of 3rd
.216d	29 01		and #$01			and 	#1
.216f	f0 03		beq $2174			beq 	_I32NoAdd 					; if set
.2171	20 2c 21	jsr $212c			jsr 	MInt32Add 					; add 2nd to 1st.
.2174					_I32NoAdd:
.2174	e8		inx				inx 								; shift 2nd left
.2175	20 5d 22	jsr $225d			jsr 	MInt32ShiftLeft
.2178	e8		inx				inx  								; shift 3rd right
.2179	20 66 22	jsr $2266			jsr 	MInt32ShiftRight
.217c	20 6f 22	jsr $226f			jsr 	MInt32Zero 					; check if zero.
.217f	08		php				php 								; save status bits
.2180	ca		dex				dex 	 							; point back to 1st
.2181	ca		dex				dex
.2182	28		plp				plp 								; get status bits
.2183	d0 e6		bne $216b			bne 	_I32Loop 					; if non-zero keep going.
.2185	60		rts				rts
.2186					MInt32CopyUp:
.2186	b5 48		lda $48,x			lda 	esInt0,x
.2188	95 49		sta $49,x			sta 	esInt0+1,x
.218a	b5 50		lda $50,x			lda 	esInt1,x
.218c	95 51		sta $51,x			sta 	esInt1+1,x
.218e	b5 58		lda $58,x			lda 	esInt2,x
.2190	95 59		sta $59,x			sta 	esInt2+1,x
.2192	b5 60		lda $60,x			lda 	esInt3,x
.2194	95 61		sta $61,x			sta 	esInt3+1,x
.2196	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32tostr.asm

>0b1d					MCharCount:	.fill 	1						; count of converted characters
.2197					MLInt32ToString:
.2197	aa		tax				tax									; module passes stack in A, base in Y
.2198	98		tya				tya
.2199	20 9e 21	jsr $219e			jsr 	MInt32ToString
.219c	8a		txa				txa
.219d	60		rts				rts
.219e					MInt32ToString:
.219e	48		pha				pha 								; save base
.219f	85 0c		sta $0c				sta 	tempShort 					; save target base.
.21a1	a9 00		lda #$00			lda 	#0
.21a3	8d 1d 0b	sta $0b1d			sta 	MCharCount 					; clear character count to 0
.21a6	98		tya				tya
.21a7	48		pha				pha
.21a8	a5 0c		lda $0c				lda 	tempShort 					; check if we are signed conversion
.21aa	10 10		bpl $21bc			bpl 	_I32TSUnsigned
.21ac	48		pha				pha 								; save base on stack.
.21ad	b5 60		lda $60,x			lda 	esInt3,x 					; is it actually negative
.21af	10 08		bpl $21b9			bpl 	_I32TSNoFlip
.21b1	a9 2d		lda #$2d			lda 	#"-" 						; write a '-' prefix out.
.21b3	20 ef 21	jsr $21ef			jsr 	MI32WriteCharacter
.21b6	20 02 22	jsr $2202			jsr 	MInt32Negate 				; negate the value, so now it's positive.
.21b9					_I32TSNoFlip:
.21b9	68		pla				pla 								; get the base back
.21ba	29 7f		and #$7f			and 	#$7F 						; clear the sign flag so it's just a base now.
.21bc					_I32TSUnsigned:
.21bc	20 ca 21	jsr $21ca			jsr 	MI32DivideWrite 			; recursive code to output string.
.21bf	a0 00		ldy #$00			ldy 	#0 							; write charcount to first character.
.21c1	ad 1d 0b	lda $0b1d			lda 	MCharCount
.21c4	91 04		sta ($04),y			sta 	(temp0),y
.21c6	68		pla				pla
.21c7	a8		tay				tay
.21c8	68		pla				pla
.21c9	60		rts				rts
.21ca					MI32DivideWrite:
.21ca	48		pha				pha 								; save the divisor/base
.21cb	e8		inx				inx 								; write in the dividing position.
.21cc	20 57 22	jsr $2257			jsr 	MInt32Set8Bit
.21cf	ca		dex				dex
.21d0	20 42 20	jsr $2042			jsr 	MInt32UDivide 				; divide number by base.
.21d3	68		pla				pla 								; get the base into Y
.21d4	a8		tay				tay
.21d5	b5 4a		lda $4a,x			lda 	esInt0+2,x 					; get the remainder and push on the stack.
.21d7	48		pha				pha
.21d8	20 6f 22	jsr $226f			jsr 	MInt32Zero 					; is the result zero ?
.21db	f0 04		beq $21e1			beq 	_I32NoRecurse 				; if so, don't recurse.
.21dd	98		tya				tya 								; put base into A
.21de	20 ca 21	jsr $21ca			jsr 	MI32DivideWrite 				; and jsr the dividor recursively.
.21e1					_I32NoRecurse:
.21e1	68		pla				pla 								; get the remainder back
.21e2	c9 0a		cmp #$0a			cmp 	#10  						; handle hexadecimals, now converting to ASCII
.21e4	90 02		bcc $21e8			bcc 	_I32NotHex
.21e6	69 06		adc #$06			adc 	#7-1
.21e8					_I32NotHex:
.21e8	18		clc				clc 								; make it ASCII
.21e9	69 30		adc #$30			adc 	#48
.21eb	20 ef 21	jsr $21ef			jsr 	MI32WriteCharacter 			; write the character out
.21ee	60		rts				rts 								; and exit.
.21ef					MI32WriteCharacter:
.21ef	ee 1d 0b	inc $0b1d			inc 	MCharCount 					; bump count (space for leading count)
.21f2	ac 1d 0b	ldy $0b1d			ldy 	MCharCount 					; get position
.21f5	91 04		sta ($04),y			sta 	(temp0),y 					; write out with trailing 0
.21f7	c8		iny				iny
.21f8	a9 00		lda #$00			lda 	#0
.21fa	91 04		sta ($04),y			sta 	(temp0),y
.21fc	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32unary.asm

>0b1e					MSeed32:	.fill 	4							; random number seed.
.21fd					MInt32Absolute:
.21fd	b5 60		lda $60,x			lda 	esInt3,x 					; use negate code if -ve.
.21ff	30 01		bmi $2202			bmi 	MInt32Negate
.2201	60		rts				rts
.2202					MInt32Negate:
.2202	38		sec				sec 								; subtract from zero.
.2203	a9 00		lda #$00			lda 	#0
.2205	f5 48		sbc $48,x			sbc 	esInt0,x
.2207	95 48		sta $48,x			sta 	esInt0,x
.2209	a9 00		lda #$00			lda 	#0
.220b	f5 50		sbc $50,x			sbc 	esInt1,x
.220d	95 50		sta $50,x			sta 	esInt1,x
.220f	a9 00		lda #$00			lda 	#0
.2211	f5 58		sbc $58,x			sbc 	esInt2,x
.2213	95 58		sta $58,x			sta 	esInt2,x
.2215	a9 00		lda #$00			lda 	#0
.2217	f5 60		sbc $60,x			sbc 	esInt3,x
.2219	95 60		sta $60,x			sta 	esInt3,x
.221b	60		rts				rts
.221c					MInt32Not:
.221c	b5 48		lda $48,x			lda 	esInt0,x 					; one's complement all four.
.221e	49 ff		eor #$ff			eor 	#$FF
.2220	95 48		sta $48,x			sta 	esInt0,x
.2222	b5 50		lda $50,x			lda 	esInt1,x
.2224	49 ff		eor #$ff			eor 	#$FF
.2226	95 50		sta $50,x			sta 	esInt1,x
.2228	b5 58		lda $58,x			lda 	esInt2,x
.222a	49 ff		eor #$ff			eor 	#$FF
.222c	95 58		sta $58,x			sta 	esInt2,x
.222e	b5 60		lda $60,x			lda 	esInt3,x
.2230	49 ff		eor #$ff			eor 	#$FF
.2232	95 60		sta $60,x			sta 	esInt3,x
.2234	60		rts				rts
.2235					MInt32Sign:
.2235	b5 60		lda $60,x			lda 	esInt3,x					; look at MSB
.2237	30 0b		bmi $2244			bmi 	MInt32True 					; if set return -1 (true)
.2239	20 6f 22	jsr $226f			jsr 	MInt32Zero 					; is it zero ?
.223c	f0 0a		beq $2248			beq 	MInt32False 				; if zero return 0 (false)
.223e	20 48 22	jsr $2248			jsr 	MInt32False 				; > 0 return 1, by setting it to zero
.2241	f6 48		inc $48,x			inc 	esInt0,x  					; and bumping the LSB.
.2243	60		rts				rts
.2244					MInt32True:
.2244	a9 ff		lda #$ff			lda 	#$FF 						; set to $FFFFFFFF
.2246	d0 02		bne $224a			bne 	MInt32WriteAll
.2248					MInt32False:
.2248	a9 00		lda #$00			lda 	#0
.224a					MInt32WriteAll:
.224a	95 48		sta $48,x			sta 	esInt0,x
.224c					MInt32Write123:
.224c	95 50		sta $50,x			sta 	esInt1,x
.224e	95 58		sta $58,x			sta 	esInt2,x
.2250	95 60		sta $60,x			sta 	esInt3,x
.2252	a9 00		lda #$00			lda 	#$00						; and make it an integer
.2254	95 40		sta $40,x			sta 	esType,x
.2256	60		rts				rts
.2257					MInt32Set8Bit:
.2257	95 48		sta $48,x			sta 	esInt0,x 					; coopt above function to write
.2259	a9 00		lda #$00			lda 	#0 							; a value 0-255
.225b	f0 ef		beq $224c			beq		MInt32Write123
.225d					MInt32ShiftLeft:
.225d	16 48		asl $48,x			asl 	esInt0,x
.225f	36 50		rol $50,x			rol	 	esInt1,x
.2261	36 58		rol $58,x			rol	 	esInt2,x
.2263	36 60		rol $60,x			rol	 	esInt3,x
.2265	60		rts				rts
.2266					MInt32ShiftRight:
.2266	56 60		lsr $60,x			lsr 	esInt3,x
.2268	76 58		ror $58,x			ror 	esInt2,x
.226a	76 50		ror $50,x			ror 	esInt1,x
.226c	76 48		ror $48,x			ror 	esInt0,x
.226e	60		rts				rts
.226f					MInt32Zero:
.226f	b5 48		lda $48,x			lda 	esInt0,x
.2271	15 50		ora $50,x			ora 	esInt1,x
.2273	15 58		ora $58,x			ora 	esInt2,x
.2275	15 60		ora $60,x			ora 	esInt3,x
.2277	60		rts				rts
.2278					MInt32Random:
.2278	98		tya				tya
.2279	48		pha				pha
.227a	a0 07		ldy #$07			ldy 	#7 							; do it 7 times
.227c	ad 1e 0b	lda $0b1e			lda 	MSeed32+0 					; check the seed isn't zero
.227f	d0 03		bne $2284			bne 	_Random1
.2281	a8		tay				tay 								; if so do it 256 times
.2282	a9 aa		lda #$aa			lda		#$AA 						; and use this to seed the seed....
.2284					_Random1:
.2284	0a		asl a				asl 	a
.2285	2e 1f 0b	rol $0b1f			rol 	MSeed32+1
.2288	2e 20 0b	rol $0b20			rol 	MSeed32+2
.228b	2e 21 0b	rol $0b21			rol 	MSeed32+3
.228e	90 02		bcc $2292			bcc 	_Random2
.2290	49 c5		eor #$c5			eor 	#$C5
.2292					_Random2:
.2292	88		dey				dey
.2293	d0 ef		bne $2284			bne 	_Random1
.2295	8d 1e 0b	sta $0b1e			sta 	MSeed32+0 					; copy the seed in.
.2298	95 48		sta $48,x			sta 	esInt0,x
.229a	ad 1f 0b	lda $0b1f			lda 	MSeed32+1
.229d	95 50		sta $50,x			sta 	esInt1,x
.229f	ad 20 0b	lda $0b20			lda 	MSeed32+2
.22a2	95 58		sta $58,x			sta 	esInt2,x
.22a4	ad 21 0b	lda $0b21			lda 	MSeed32+3
.22a7	95 60		sta $60,x			sta 	esInt3,x
.22a9	68		pla				pla
.22aa	a8		tay				tay
.22ab	a9 00		lda #$00			lda 	#0
.22ad	95 40		sta $40,x			sta 	esType,x
.22af	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/utility/check.asm

.22b0					CheckToken:
.22b0	d1 02		cmp ($02),y			cmp 	(codePtr),y
.22b2	d0 02		bne $22b6			bne 	_CTError
.22b4	c8		iny				iny
.22b5	60		rts				rts
.22b6					_CTError:
.22b6	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.22b8	20 b9 24	jsr $24b9		jsr	errorHandler
.22bb					CheckRightParen:
.22bb	b1 02		lda ($02),y			lda 	(codePtr),y
.22bd	c8		iny				iny
.22be	c9 c6		cmp #$c6			cmp 	#TKW_RPAREN
.22c0	d0 01		bne $22c3			bne 	_CRPError
.22c2	60		rts				rts
.22c3					_CRPError:
.22c3	a2 09		ldx #$09			ldx 	#ErrorID_MissingRP
.22c5	20 b9 24	jsr $24b9		jsr	errorHandler
.22c8					CheckComma:
.22c8	b1 02		lda ($02),y			lda 	(codePtr),y
.22ca	c8		iny				iny
.22cb	c9 c8		cmp #$c8			cmp 	#TKW_COMMA
.22cd	d0 01		bne $22d0			bne 	_CCError
.22cf	60		rts				rts
.22d0					_CCError:
.22d0	a2 0a		ldx #$0a			ldx 	#ErrorID_MissingComma
.22d2	20 b9 24	jsr $24b9		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/utility/coldwarmstart.asm

.22d5					ColdStart:
.22d5	a2 ff		ldx #$ff			ldx 	#$FF 						; clear the stack
.22d7	9a		txs				txs
.22d8	a2 04		ldx #$04		ldx	#4
.22da	20 9c 24	jsr $249c		jsr	deviceHandler
.22dd	a9 00		lda #$00			lda 	#(programMemory) & $FF
.22df	8d c8 0a	sta $0ac8			sta 	basePage
.22e2	a9 50		lda #$50			lda 	#(programMemory) >> 8
.22e4	8d c9 0a	sta $0ac9			sta 	1+(basePage)
.22e7	a9 00		lda #$00			lda 	#($9800) & $FF
.22e9	8d cc 0a	sta $0acc			sta 	endMemory
.22ec	a9 98		lda #$98			lda 	#($9800) >> 8
.22ee	8d cd 0a	sta $0acd			sta 	1+(endMemory)
.22f1	a2 00		ldx #$00		ldx	#0
.22f3	20 b4 29	jsr $29b4		jsr	interactionHandler
.22f6					WarmStart:
.22f6	a2 02		ldx #$02		ldx	#2
.22f8	20 b4 29	jsr $29b4		jsr	interactionHandler

;******  Return to file: main/main.asm


;******  Processing file: main/utility/scanner.asm

.37f5					ScanForward:
.37f5	85 06		sta $06				sta 	temp1 						; save tokens to search in temp1/temp1+1
.37f7	86 07		stx $07				stx 	temp1+1
.37f9	a9 00		lda #$00			lda 	#0 							; temp2 counts structure levels.
.37fb	85 08		sta $08				sta 	temp2
.37fd	b1 02		lda ($02),y	_SFLoop:lda 	(codePtr),y 				; look at the next token.
.37ff	c8		iny				iny
.3800	a6 08		ldx $08				ldx 	temp2 						; check structure levels are zero.
.3802	d0 08		bne $380c			bne 	_SFNoCheck 					; if so, check token against entered values.
.3804	c5 06		cmp $06				cmp 	temp1 						; if either matches, we've reached the token
.3806	f0 24		beq $382c			beq 	_SFExit 					; at the same strcture depth.
.3808	c5 07		cmp $07				cmp 	temp1+1
.380a	f0 20		beq $382c			beq 	_SFExit
.380c					_SFNoCheck:
.380c	c9 80		cmp #$80			cmp 	#$80 						; if it is 00-7F (variable/number) just skip it.
.380e	90 ed		bcc $37fd			bcc 	_SFLoop
.3810	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; $80-$85 is various specials.
.3812	90 19		bcc $382d			bcc 	_SFSpecials
.3814	c9 99		cmp #$99			cmp 	#TOK_STRUCTST 				; if < structure start then continue
.3816	90 e5		bcc $37fd			bcc 	_SFLoop
.3818	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST 				; if >= unary start (after structure) then continue.
.381a	b0 e1		bcs $37fd			bcs 	_SFLoop
.381c	aa		tax				tax  								; token in X, and look up the adjuster.
.381d	bd 7f 1b	lda $1b7f,x			lda 	ELBinaryOperatorInfo-TOK_BINARYST,x
.3820	38		sec				sec 								; convert to an offset ($FF,$01)
.3821	e9 81		sbc #$81			sbc 	#$81
.3823	18		clc				clc 								; add to depth
.3824	65 08		adc $08				adc 	temp2
.3826	85 08		sta $08				sta 	temp2
.3828	10 d3		bpl $37fd			bpl 	_SFLoop 					; +ve okay to continue
.382a	30 35		bmi $3861			bmi 	_SFError 					; if gone -ve then we have a nesting error
.382c	60		rts		_SFExit:rts
.382d					_SFSpecials:
.382d	c9 80		cmp #$80			cmp 	#TOK_EOL 					; $80, advance to next line.
.382f	f0 14		beq $3845			beq 	_SFNextLine
.3831	c9 84		cmp #$84			cmp 	#TOK_FPC					; $84, skip embedded float
.3833	f0 31		beq $3866			beq 	_SFFloatSkip
.3835	c9 85		cmp #$85			cmp 	#TOK_STR 					; $85, skip string
.3837	f0 04		beq $383d			beq 	_SFSkipString
.3839	c8		iny				iny									; $81,$82,$83 shift, so just advance over the shifted
.383a	4c fd 37	jmp $37fd			jmp 	_SFLoop 					; token.
.383d					_SFSkipString:
.383d	98		tya				tya
.383e	38		sec				sec
.383f	71 02		adc ($02),y			adc 	(codePtr),y
.3841	a8		tay				tay
.3842	4c fd 37	jmp $37fd			jmp 	_SFLoop
.3845					_SFNextLine:
.3845	a0 00		ldy #$00			ldy 	#0 							; get offset
.3847	b1 02		lda ($02),y			lda 	(codePtr),y
.3849	18		clc				clc 								; add to code pointer.
.384a	65 02		adc $02				adc 	codePtr
.384c	85 02		sta $02				sta 	codePtr
.384e	90 02		bcc $3852			bcc		_SFNLNoCarry
.3850	e6 03		inc $03				inc 	codePtr+1
.3852					_SFNLNoCarry:
.3852	b1 02		lda ($02),y			lda 	(codePtr),y 				; reached the end of the program.
.3854	d0 a7		bne $37fd			bne		_SFLoop 					; no go round again
.3856	a5 06		lda $06				lda 	temp1
.3858	c9 d9		cmp #$d9			cmp 	#TKW_DATA 					; if searching for Data different error.
.385a	d0 05		bne $3861			bne 	_SFError 					; read uses this to search for data statements
.385c	a2 1c		ldx #$1c			ldx 	#ErrorID_DataError
.385e	20 b9 24	jsr $24b9		jsr	errorHandler
.3861					_SFError:
.3861	a2 14		ldx #$14			ldx 	#ErrorID_Struct
.3863	20 b9 24	jsr $24b9		jsr	errorHandler
.3866					_SFFloatSkip:
.3866	4c 85 15	jmp $1585			jmp 	Unimplemented

;******  Return to file: main/main.asm


;******  Processing file: main/utility/stack.asm

.0078					rsPointer:
>0078							.fill 	2							; to TOS, which is the current top-token.
.22fb					RSReset:
.22fb	a9 ff		lda #$ff			lda 	#(returnStack+retStackSize-1) & $FF
.22fd	85 78		sta $78				sta 	rsPointer
.22ff	a9 09		lda #$09			lda 	#(returnStack+retStackSize-1) >> 8
.2301	85 79		sta $79				sta 	1+(rsPointer)
.2303	a9 ff		lda #$ff			lda 	#$FF 						; put a duff marker on TOS, so nothing will pop
.2305	8d ff 09	sta $09ff			sta 	returnStack+retStackSize-1
.2308	60		rts				rts
.2309					RSClaim:
.2309	84 0c		sty $0c				sty 	tempShort 					; preserve Y
.230b	48		pha				pha 								; save marker on stack.
.230c	8a		txa				txa 								; get bytes required.
.230d	38		sec				sec
.230e	49 ff		eor #$ff			eor 	#$FF 						; add to rsPointer using 2's complement.
.2310	65 78		adc $78				adc 	rsPointer
.2312	85 78		sta $78				sta 	rsPointer
.2314	a5 79		lda $79				lda 	rsPointer+1
.2316	69 ff		adc #$ff			adc 	#$FF
.2318	85 79		sta $79				sta 	rsPointer+1
.231a	c9 08		cmp #$08			cmp 	#returnStack>>8 			; overflow. underflow actually :)
.231c	90 08		bcc $2326			bcc 	_RSCOverflow
.231e	68		pla				pla 								; get marker back
.231f	a0 00		ldy #$00			ldy 	#0 							; write marker out.
.2321	91 78		sta ($78),y			sta 	(rsPointer),y
.2323	a4 0c		ldy $0c				ldy 	tempShort 					; restore Y and exit
.2325	60		rts				rts
.2326					_RSCOverflow:
.2326	a2 16		ldx #$16			ldx 	#ErrorID_RetStack
.2328	20 b9 24	jsr $24b9		jsr	errorHandler
.232b					RSFree:
.232b	18		clc				clc
.232c	65 78		adc $78				adc 	rsPointer
.232e	85 78		sta $78				sta 	rsPointer
.2330	90 02		bcc $2334			bcc 	_RSFExit
.2332	e6 79		inc $79				inc 	rsPointer+1
.2334					_RSFExit:
.2334	60		rts				rts
.2335					RSSavePosition:
.2335	84 0c		sty $0c				sty 	tempShort 					; save Y position
.2337	a8		tay				tay 								; this is where we write it.
.2338	a5 02		lda $02				lda 	codePtr 					; write codePointer out
.233a	91 78		sta ($78),y			sta 	(rsPointer),y
.233c	c8		iny				iny
.233d	a5 03		lda $03				lda 	codePtr+1
.233f	91 78		sta ($78),y			sta 	(rsPointer),y
.2341	c8		iny				iny
.2342	a5 0c		lda $0c				lda 	tempShort 					; write the Y position out.
.2344	91 78		sta ($78),y			sta 	(rsPointer),y
.2346	a8		tay				tay 								; fix Y back again to original value
.2347	60		rts				rts
.2348					RSLoadPosition:
.2348	a8		tay				tay
.2349	b1 78		lda ($78),y			lda 	(rsPointer),y 				; read codePointer back
.234b	85 02		sta $02				sta 	codePtr
.234d	c8		iny				iny
.234e	b1 78		lda ($78),y			lda 	(rsPointer),y
.2350	85 03		sta $03				sta 	codePtr+1
.2352	c8		iny				iny
.2353	b1 78		lda ($78),y			lda 	(rsPointer),y 				; and the offset
.2355	a8		tay				tay 								; to Y
.2356	60		rts				rts

;******  Return to file: main/main.asm

.2357					mainHandler:
.2357	7c 5a 23	jmp ($235a,x)			jmp 	(mainVectors,x)
.235a					mainVectors:
>235a	bb 22					.word CheckRightParen      ; index 0
>235c	18 10					.word XCommandClear        ; index 2
>235e	01 1d					.word LinkEvaluate         ; index 4
>2360	0d 1d					.word LinkEvaluateInteger  ; index 6
>2362	13 1d					.word LinkEvaluateSmallInt ; index 8
>2364	07 1d					.word LinkEvaluateTerm     ; index 10
>2366	97 21					.word MLInt32ToString      ; index 12
>2368	3d 13					.word Command_XNew         ; index 14
>236a	01 14					.word PrintString          ; index 16
>236c	27 15					.word Command_RunFrom      ; index 18
>236e	af 20					.word LinkInt32FromString  ; index 20

;******  Return to file: basic.asm

.2370					section_end_main:
.2370					section_start_assembler:

;******  Processing file: assembler/assembler.asm

.2370					assemblerHandler:
.2370	7c 73 23	jmp ($2373,x)			jmp 	(assemblerVectors,x)
.2373					assemblerVectors:

;******  Return to file: basic.asm

.2373					section_end_assembler:
.2373					section_start_device:

;******  Processing file: device/device.asm


;******  Processing file: device/option_x16/x16file.asm

.2373					ExternSave:
.2373	98		tya				tya
.2374	48		pha				pha
.2375	20 c3 23	jsr $23c3			jsr 	ExternGetLength 			; get length of file into A name YX
.2378	20 bd ff	jsr $ffbd			jsr 	$FFBD 						; set name
.237b	a9 01		lda #$01			lda 	#1
.237d	a2 08		ldx #$08			ldx 	#8	 						; device #8
.237f	a0 00		ldy #$00			ldy 	#0
.2381	20 ba ff	jsr $ffba			jsr 	$FFBA 						; set LFS
.2384	a5 49		lda $49				lda 	esInt0+1 					; copy start of save address to temp0
.2386	85 04		sta $04				sta 	temp0
.2388	a5 51		lda $51				lda 	esInt1+1
.238a	85 05		sta $05				sta 	temp0+1
.238c	a6 4a		ldx $4a				ldx 	esInt0+2 					; end address
.238e	a4 52		ldy $52				ldy 	esInt1+2
.2390	a9 04		lda #$04			lda 	#temp0 						; ref to start address
.2392	20 d8 ff	jsr $ffd8			jsr 	$FFD8 						; save
.2395	b0 03		bcs $239a			bcs 	_ESSave
.2397	68		pla				pla
.2398	a8		tay				tay
.2399	60		rts				rts
.239a					_ESSave:
.239a	a2 1e		ldx #$1e			ldx 	#ErrorID_Save
.239c	20 b9 24	jsr $24b9		jsr	errorHandler
.239f					ExternLoad:
.239f	98		tya				tya
.23a0	48		pha				pha
.23a1	20 c3 23	jsr $23c3			jsr 	ExternGetLength 			; get length of file into A name YX
.23a4	20 bd ff	jsr $ffbd			jsr 	$FFBD 						; set name
.23a7	a9 01		lda #$01			lda 	#1
.23a9	a2 08		ldx #$08			ldx 	#8	 						; device #8
.23ab	a0 00		ldy #$00			ldy 	#0
.23ad	20 ba ff	jsr $ffba			jsr 	$FFBA 						; set LFS
.23b0	a6 49		ldx $49				ldx 	esInt0+1 					; load address
.23b2	a4 51		ldy $51				ldy 	esInt1+1
.23b4	a9 00		lda #$00			lda 	#0 							; load command
.23b6	20 d5 ff	jsr $ffd5			jsr 	$FFD5
.23b9	b0 03		bcs $23be			bcs 	_ESLoad
.23bb	68		pla				pla
.23bc	a8		tay				tay
.23bd	60		rts				rts
.23be					_ESLoad:
.23be	a2 1f		ldx #$1f			ldx 	#ErrorID_Load
.23c0	20 b9 24	jsr $24b9		jsr	errorHandler
.23c3					ExternGetLength:
.23c3	a5 48		lda $48				lda 	esInt0 						; length into A.
.23c5	85 04		sta $04				sta 	temp0
.23c7	a5 50		lda $50				lda 	esInt1
.23c9	85 05		sta $05				sta 	temp0+1
.23cb	a0 00		ldy #$00			ldy 	#0
.23cd	b1 04		lda ($04),y			lda 	(temp0),y
.23cf	a6 48		ldx $48				ldx 	esInt0 						; name into YX
.23d1	a4 50		ldy $50				ldy 	esInt1
.23d3	e8		inx				inx 								; advance over the length pointer.
.23d4	d0 01		bne $23d7			bne 	_ESNoCarry
.23d6	c8		iny				iny
.23d7					_ESNoCarry:
.23d7	60		rts				rts

;******  Return to file: device/device.asm


;******  Processing file: device/option_x16/x16io.asm

=240					MaxLineInputSize = 240
.0b22					bufferCount:
>0b22							.fill 	0
.0b22					bufferStorage:
>0b22							.fill 	MaxLineInputSize
.23d8					IOInitialise:
.23d8	a9 0f		lda #$0f			lda 	#15 						; switch to upper/lower case mode
.23da	20 03 24	jsr $2403			jsr 	IOPrintChar
.23dd	a9 02		lda #$02			lda 	#2 							; green on black and clear screen
.23df	20 2f 24	jsr $242f			jsr 	IOInk
.23e2	a9 00		lda #$00			lda 	#0
.23e4	20 43 24	jsr $2443			jsr 	IOPaper
.23e7	20 eb 23	jsr $23eb			jsr 	IOClearScreen
.23ea	60		rts				rts
.23eb					IOClearScreen:
.23eb	48		pha				pha
.23ec	a9 93		lda #$93			lda	 	#147 						; char code $93 clears screen
.23ee	20 03 24	jsr $2403			jsr 	IOPrintChar
.23f1	68		pla				pla
.23f2	60		rts				rts
.23f3					IONewLine:
.23f3	48		pha				pha
.23f4	a9 0d		lda #$0d			lda 	#13
.23f6	20 03 24	jsr $2403			jsr 	IOPrintChar
.23f9	68		pla				pla
.23fa	60		rts				rts
.23fb					IOTab:
.23fb	48		pha				pha
.23fc	a9 20		lda #$20			lda 	#32
.23fe	20 03 24	jsr $2403			jsr 	IOPrintChar
.2401	68		pla				pla
.2402	60		rts				rts
.2403					IOPrintChar:
.2403	aa		tax				tax 								; save in X so we can save Y
.2404	5a		phy				phy
.2405	8a		txa				txa
.2406	c9 08		cmp #$08			cmp 	#8 							; make BS (8) onto CHR$(14) which is the
.2408	d0 02		bne $240c			bne 	_IOPCNotBS 					; Commodore/X16 backspace code.
.240a	a9 14		lda #$14			lda 	#$14
.240c					_IOPCNotBS:
.240c	20 d2 ff	jsr $ffd2			jsr 	$FFD2 						; CBM OS Call.
.240f	7a		ply				ply
.2410	60		rts				rts
.2411					IOInkey:
.2411	98		tya				tya
.2412	48		pha				pha
.2413	20 e4 ff	jsr $ffe4			jsr 	$FFE4
.2416	85 0c		sta $0c				sta 	tempShort
.2418	68		pla				pla
.2419	a8		tay				tay
.241a	a5 0c		lda $0c				lda 	tempShort					; no key pressed.
.241c	f0 10		beq $242e			beq 	_IOIExit
.241e	c9 0d		cmp #$0d			cmp 	#13 						; allow CR (13)
.2420	f0 0c		beq $242e			beq 	_IOIExit
.2422	c9 14		cmp #$14			cmp 	#$14 						; backspace code ($14) returns 8.
.2424	f0 06		beq $242c			beq 	_IOIBackspace
.2426	c9 20		cmp #$20			cmp 	#32 						; no other control allowed.
.2428	90 e7		bcc $2411			bcc 	IOInkey
.242a	b0 02		bcs $242e			bcs 	_IOIExit
.242c					_IOIBackspace:
.242c	a9 08		lda #$08			lda 	#8 							; return chr(8)
.242e					_IOIExit:
.242e	60		rts				rts
.242f					IOInk:
.242f	48		pha				pha
.2430	29 07		and #$07			and 	#7 							; 8 primaries
.2432	aa		tax				tax
.2433	bd 3b 24	lda $243b,x			lda 	_IOColourTable,x 			; look up CBM code and print it.
.2436	20 03 24	jsr $2403			jsr 	IOPrintChar
.2439	68		pla				pla
.243a	60		rts				rts
.243b					_IOColourTable:
>243b	90						.byte 	$90 					; 0 Black
>243c	96						.byte 	$96 					; 1 Red
>243d	1e						.byte 	$1E 					; 2 Green
>243e	9e						.byte 	$9E 					; 3 Yellow
>243f	9a						.byte 	$9A 					; 4 Blue
>2440	9c						.byte 	$9C 					; 5 Magenta
>2441	9f						.byte 	$9F 					; 6 Cyan
>2442	05						.byte 	$05 					; 7 White
.2443					IOPaper:
.2443	48		pha				pha
.2444	48		pha				pha
.2445	a9 01		lda #$01			lda 	#1 						; 1 swaps fgr/bgr, so we swap them, set fgr
.2447	20 03 24	jsr $2403			jsr 	IOPrintChar 			; and then swap them again.
.244a	68		pla				pla
.244b	20 2f 24	jsr $242f			jsr 	IOInk
.244e	a9 01		lda #$01			lda 	#1
.2450	20 03 24	jsr $2403			jsr 	IOPrintChar
.2453	68		pla				pla
.2454	60		rts				rts
.2455					IOLocate:
.2455	48		pha				pha
.2456	a9 13		lda #$13			lda 	#$13 					; home cursor code
.2458	20 03 24	jsr $2403			jsr 	IOPrintChar
.245b	a9 11		lda #$11			lda 	#$11 	 				; print Y x $11 (down)
.245d	20 64 24	jsr $2464			jsr 	_IOLoc2
.2460	68		pla				pla
.2461	a8		tay				tay
.2462	a9 1d		lda #$1d			lda 	#$1D 					; print Y x $1D (right)
.2464					_IOLoc2:
.2464	c0 00		cpy #$00			cpy 	#0
.2466	f0 06		beq $246e			beq 	_IOLocExit
.2468	20 03 24	jsr $2403			jsr 	IOPrintChar
.246b	88		dey				dey
.246c	d0 f6		bne $2464			bne 	_IOLoc2
.246e					_IOLocExit:
.246e	60		rts				rts
.246f					IOInput:
.246f	a9 00		lda #$00			lda 	#0
.2471	8d 22 0b	sta $0b22			sta 	bufferCount
.2474					_IOILoop:
.2474	20 cf ff	jsr $ffcf			jsr 	$FFCF
.2477	c9 0d		cmp #$0d			cmp 	#13
.2479	f0 10		beq $248b			beq 	_IOIExit
.247b	ae 22 0b	ldx $0b22			ldx 	bufferCount
.247e	e0 f0		cpx #$f0			cpx 	#MaxLineInputSize
.2480	f0 f2		beq $2474			beq 	_IOILoop
.2482	ee 22 0b	inc $0b22			inc 	bufferCount
.2485	9d 23 0b	sta $0b23,x			sta 	bufferStorage+1,x
.2488	4c 74 24	jmp $2474			jmp 	_IOILoop
.248b					_IOIExit:
.248b	a9 22		lda #$22			lda 	#(bufferCount) & $FF
.248d	85 04		sta $04				sta 	temp0
.248f	a9 0b		lda #$0b			lda 	#(bufferCount) >> 8
.2491	85 05		sta $05				sta 	1+(temp0)
.2493	60		rts				rts

;******  Return to file: device/device.asm


;******  Processing file: device/option_x16/x16timer.asm

.2494					IOReadTimer:
.2494	20 de ff	jsr $ffde			jsr 	$FFDE 						; reads timer into YXA so we want only YA
.2497	48		pha				pha
.2498	8a		txa				txa
.2499	a8		tay				tay
.249a	68		pla				pla
.249b	60		rts				rts

;******  Return to file: device/device.asm

.249c					deviceHandler:
.249c	7c 9f 24	jmp ($249f,x)			jmp 	(deviceVectors,x)
.249f					deviceVectors:
>249f	eb 23					.word IOClearScreen        ; index 0
>24a1	f3 23					.word IONewLine            ; index 2
>24a3	d8 23					.word IOInitialise         ; index 4
>24a5	2f 24					.word IOInk                ; index 6
>24a7	11 24					.word IOInkey              ; index 8
>24a9	6f 24					.word IOInput              ; index 10
>24ab	9f 23					.word ExternLoad           ; index 12
>24ad	55 24					.word IOLocate             ; index 14
>24af	43 24					.word IOPaper              ; index 16
>24b1	03 24					.word IOPrintChar          ; index 18
>24b3	73 23					.word ExternSave           ; index 20
>24b5	fb 23					.word IOTab                ; index 22
>24b7	94 24					.word IOReadTimer          ; index 24

;******  Return to file: basic.asm

.24b9					section_end_device:
.24b9					section_start_error:

;******  Processing file: error/error.asm


;******  Processing file: error/errorhandler.asm

.24b9					ErrorHandler:
.24b9	8a		txa				txa
.24ba	48		pha				pha
.24bb	a9 01		lda #$01			lda 	#1 							; red
.24bd	a2 06		ldx #$06		ldx	#6
.24bf	20 9c 24	jsr $249c		jsr	deviceHandler
.24c2	68		pla				pla
.24c3	aa		tax				tax
.24c4	a9 35		lda #$35			lda 	#(ErrorTextList) & $FF
.24c6	85 04		sta $04				sta 	temp0
.24c8	a9 25		lda #$25			lda 	#(ErrorTextList) >> 8
.24ca	85 05		sta $05				sta 	1+(temp0)
.24cc	ca		dex		_EHFind:dex									; errors start at 1
.24cd	f0 10		beq $24df			beq 	_EHFound
.24cf	a0 00		ldy #$00			ldy 	#0 							; goto next text message, add length + 1 to the pointer.
.24d1	38		sec				sec
.24d2	a5 04		lda $04				lda 	temp0
.24d4	71 04		adc ($04),y			adc 	(temp0),y
.24d6	85 04		sta $04				sta 	temp0
.24d8	90 f2		bcc $24cc			bcc 	_EHFind
.24da	e6 05		inc $05				inc 	temp0+1
.24dc	4c cc 24	jmp $24cc			jmp 	_EHFind
.24df					_EHFound:
.24df	a2 10		ldx #$10		ldx	#16
.24e1	20 57 23	jsr $2357		jsr	mainHandler
.24e4	a0 00		ldy #$00			ldy 	#0 							; in a line, e.g. the offset to next is non zero.
.24e6	b1 02		lda ($02),y			lda 	(codePtr),y
.24e8	f0 3d		beq $2527			beq 	_EHNoLine
.24ea	a5 03		lda $03				lda 	codePtr+1 					; code running from the command line.
.24ec	cd c9 0a	cmp $0ac9			cmp 	basePage+1
.24ef	90 36		bcc $2527			bcc 	_EHNoLine
.24f1	a9 31		lda #$31			lda 	#(EHAtMsg) & $FF
.24f3	85 04		sta $04				sta 	temp0
.24f5	a9 25		lda #$25			lda 	#(EHAtMsg) >> 8
.24f7	85 05		sta $05				sta 	1+(temp0)
.24f9	a2 10		ldx #$10		ldx	#16
.24fb	20 57 23	jsr $2357		jsr	mainHandler
.24fe	a0 01		ldy #$01			ldy 	#1 							; set up line number in TOS
.2500	a2 00		ldx #$00			ldx 	#0
.2502	b1 02		lda ($02),y			lda 	(codePtr),y
.2504	95 48		sta $48,x			sta 	esInt0,x
.2506	c8		iny				iny
.2507	b1 02		lda ($02),y			lda 	(codePtr),y
.2509	95 50		sta $50,x			sta 	esInt1,x
.250b	a9 00		lda #$00			lda 	#0
.250d	95 58		sta $58,x			sta 	esInt2,x
.250f	95 60		sta $60,x			sta 	esInt3,x
.2511	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.2513	85 04		sta $04				sta 	temp0
.2515	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.2517	85 05		sta $05				sta 	1+(temp0)
.2519	a0 0a		ldy #$0a			ldy 	#10 						; in base 10.
.251b	a9 00		lda #$00			lda 	#0							; stack position zero.
.251d	a2 0c		ldx #$0c		ldx	#12
.251f	20 57 23	jsr $2357		jsr	mainHandler
.2522	a2 10		ldx #$10		ldx	#16
.2524	20 57 23	jsr $2357		jsr	mainHandler
.2527					_EHNoLine:
.2527	a2 02		ldx #$02		ldx	#2
.2529	20 9c 24	jsr $249c		jsr	deviceHandler
.252c	a2 02		ldx #$02		ldx	#2
.252e	20 b4 29	jsr $29b4		jsr	interactionHandler
.2531					EHAtMsg:
>2531	03 20 40 20					.text 	3," @ "

;******  Processing file: error/../generated/errortext.inc

.2535					ErrorTextList:
>2535	13 46 65 61 74 75 72 65			.text 19,"Feature not Present"
>253d	20 6e 6f 74 20 50 72 65 73 65 6e 74
>2549	0c 53 79 6e 74 61 78 20			.text 12,"Syntax Error"
>2551	45 72 72 6f 72
>2556	0f 4d 6f 64 75 6c 65 20			.text 15,"Module disabled"
>255e	64 69 73 61 62 6c 65 64
>2566	10 41 73 73 65 72 74 69			.text 16,"Assertion failed"
>256e	6f 6e 20 66 61 69 6c 65 64
>2577	0e 44 69 76 69 64 65 20			.text 14,"Divide By Zero"
>257f	42 79 20 5a 65 72 6f
>2586	04 53 74 6f 70				.text 4,"Stop"
>258b	0d 54 79 70 65 20 4d 69			.text 13,"Type Mismatch"
>2593	73 6d 61 74 63 68
>2599	0d 49 6c 6c 65 67 61 6c			.text 13,"Illegal Value"
>25a1	20 56 61 6c 75 65
>25a7	15 4d 69 73 73 69 6e 67			.text 21,"Missing right bracket"
>25af	20 72 69 67 68 74 20 62 72 61 63 6b 65 74
>25bd	0d 4d 69 73 73 69 6e 67			.text 13,"Missing comma"
>25c5	20 63 6f 6d 6d 61
>25cb	11 4d 69 73 73 69 6e 67			.text 17,"Missing reference"
>25d3	20 72 65 66 65 72 65 6e 63 65
>25dd	15 4c 69 6e 65 20 4e 75			.text 21,"Line Number not found"
>25e5	6d 62 65 72 20 6e 6f 74 20 66 6f 75 6e 64
>25f3	10 53 74 72 69 6e 67 20			.text 16,"String too long."
>25fb	74 6f 6f 20 6c 6f 6e 67 2e
>2604	14 52 45 54 55 52 4e 20			.text 20,"RETURN without GOSUB"
>260c	77 69 74 68 6f 75 74 20 47 4f 53 55 42
>2619	14 55 4e 54 49 4c 20 77			.text 20,"UNTIL without REPEAT"
>2621	69 74 68 6f 75 74 20 52 45 50 45 41 54
>262e	10 4e 45 58 54 20 77 69			.text 16,"NEXT without FOR"
>2636	74 68 6f 75 74 20 46 4f 52
>263f	12 57 45 4e 44 20 77 69			.text 18,"WEND without WHILE"
>2647	74 68 6f 75 74 20 57 48 49 4c 45
>2652	14 45 4e 44 50 52 4f 43			.text 20,"ENDPROC without PROC"
>265a	20 77 69 74 68 6f 75 74 20 50 52 4f 43
>2667	0e 42 61 64 20 4e 45 58			.text 14,"Bad NEXT index"
>266f	54 20 69 6e 64 65 78
>2676	17 53 74 72 75 63 74 75			.text 23,"Structures nested wrong"
>267e	72 65 73 20 6e 65 73 74 65 64 20 77 72 6f 6e 67
>268e	16 43 61 6e 6e 6f 74 20			.text 22,"Cannot create variable"
>2696	63 72 65 61 74 65 20 76 61 72 69 61 62 6c 65
>26a5	1a 52 65 74 75 72 6e 20			.text 26,"Return stack out of space."
>26ad	73 74 61 63 6b 20 6f 75 74 20 6f 66 20 73 70 61
>26bd	63 65 2e
>26c0	11 55 6e 6b 6e 6f 77 6e			.text 17,"Unknown Procedure"
>26c8	20 50 72 6f 63 65 64 75 72 65
>26d2	18 50 61 72 61 6d 65 74			.text 24,"Parameters do not match."
>26da	65 72 73 20 64 6f 20 6e 6f 74 20 6d 61 74 63 68
>26ea	2e
>26eb	15 41 72 72 61 79 20 61			.text 21,"Array already defined"
>26f3	6c 72 65 61 64 79 20 64 65 66 69 6e 65 64
>2701	12 44 49 4d 20 72 65 71			.text 18,"DIM requires array"
>2709	75 69 72 65 73 20 61 72 72 61 79
>2714	10 42 61 64 20 61 72 72			.text 16,"Bad array index."
>271c	61 79 20 69 6e 64 65 78 2e
>2725	0b 4f 75 74 20 6f 66 20			.text 11,"Out of data"
>272d	64 61 74 61
>2731	15 43 61 6e 6e 6f 74 20			.text 21,"Cannot tokenise line."
>2739	74 6f 6b 65 6e 69 73 65 20 6c 69 6e 65 2e
>2747	0b 53 61 76 65 20 66 61			.text 11,"Save failed"
>274f	69 6c 65 64
>2753	0b 4c 6f 61 64 20 66 61			.text 11,"Load failed"
>275b	69 6c 65 64
>275f	00					.byte 0

;******  Return to file: error/errorhandler.asm


;******  Return to file: error/error.asm


;******  Return to file: basic.asm

.2760					section_end_error:
.2760					section_start_extension:

;******  Processing file: extension/extension.asm


;******  Processing file: extension/extensionhandler.asm

.2760					ExtensionHandler:
.2760	c9 ff		cmp #$ff			cmp 	#$FF						; A = $FF command, otherwise unary function stack level.
.2762	d0 08		bne $276c			bne 	_ExtensionUnary 			; is passed in A.
.2764	b1 02		lda ($02),y			lda 	(codePtr),y 				; so this is a command, using Group 2.
.2766	c8		iny				iny
.2767	0a		asl a				asl 	a
.2768	aa		tax				tax
.2769	7c 6a 27	jmp ($276a,x)			jmp 	(Group2Vectors-12,x)
.276c					_ExtensionUnary:
.276c	48		pha				pha 								; save stack pos in A
.276d	b1 02		lda ($02),y			lda 	(codePtr),y 				; get shifted token, double into X
.276f	c8		iny				iny
.2770	0a		asl a				asl 	a
.2771	aa		tax				tax
.2772	68		pla				pla 								; restore stack pos and call group3 command.
.2773	7c 6e 27	jmp ($276e,x)			jmp 	(Group3Vectors-12,X)

;******  Processing file: extension/../generated/tokenvectors2.inc

.2776					Group2Vectors:
>2776	86 27					.word	Command_VPoke            ; $86 vpoke
>2778	89 27					.word	Command_VDoke            ; $87 vdoke

;******  Return to file: extension/extensionhandler.asm


;******  Processing file: extension/../generated/tokenvectors3.inc

.277a					Group3Vectors:
>277a	ca 27					.word	Command_VPeek            ; $86 vpeek(
>277c	cd 27					.word	Command_VDeek            ; $87 vdeek(

;******  Return to file: extension/extensionhandler.asm

.277e					XEvaluateInteger:
.277e	8a		txa				txa
.277f	a2 06		ldx #$06		ldx	#6
.2781	20 57 23	jsr $2357		jsr	mainHandler
.2784	aa		tax				tax
.2785	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/vpeekpoke.asm

.2786					Command_VPoke:
.2786	38		sec				sec 						; one byte , CS
.2787	b0 01		bcs $278a			bcs 	CmdVideoWrite
.2789					Command_VDoke:
.2789	18		clc				clc 						; two bytes, CC
.278a					CmdVideoWrite:
.278a	08		php				php 						; save one or two btes
.278b	a2 00		ldx #$00			ldx 	#0  				; get address and value into levels 0,1
.278d	20 7e 27	jsr $277e			jsr 	XEvaluateInteger
.2790	20 c8 22	jsr $22c8			jsr 	CheckComma
.2793	e8		inx				inx
.2794	20 7e 27	jsr $277e			jsr 	XEvaluateInteger
.2797	ca		dex				dex
.2798	20 a9 27	jsr $27a9			jsr 	SetUpTOSVRamAddress ; copy target address to VRAM address registers
.279b	a5 49		lda $49				lda 	esInt0+1 			; get MSB of write value
.279d	8d 23 9f	sta $9f23			sta 	$9F23
.27a0	28		plp				plp 						; if it was Poke then exit
.27a1	b0 05		bcs $27a8			bcs 	_CVWExit
.27a3	a5 51		lda $51				lda 	esInt1+1 			; doke, write the MSB.
.27a5	8d 23 9f	sta $9f23			sta 	$9F23
.27a8					_CVWExit:
.27a8	60		rts				rts
.27a9					SetUpTOSVRamAddress:
.27a9	b5 58		lda $58,x			lda 	esInt2,x 			; check range of address, data to $FFFF
.27ab	29 01		and #$01			and 	#1
.27ad	15 60		ora $60,x			ora 	esInt3,x
.27af	d0 14		bne $27c5			bne 	CVWValue
.27b1	b5 48		lda $48,x			lda 	esInt0,x			; set address up
.27b3	8d 20 9f	sta $9f20			sta 	$9F20
.27b6	b5 50		lda $50,x			lda 	esInt1,x
.27b8	8d 21 9f	sta $9f21			sta	 	$9F21
.27bb	b5 58		lda $58,x			lda 	esInt2,x
.27bd	29 01		and #$01			and 	#1
.27bf	09 10		ora #$10			ora 	#$10 				; step 1.
.27c1	8d 22 9f	sta $9f22			sta 	$9F22
.27c4	60		rts				rts
.27c5					CVWValue:
.27c5	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.27c7	20 b9 24	jsr $24b9		jsr	errorHandler
.27ca					Command_VPeek:
.27ca	38		sec				sec 						; one byte , CS
.27cb	b0 01		bcs $27ce			bcs 	CmdVideoRead
.27cd					Command_VDeek:
.27cd	18		clc				clc 						; two bytes, CC
.27ce					CmdVideoRead:
.27ce	08		php				php 						; save action on stack.
.27cf	aa		tax				tax 						; save stack position
.27d0	20 7e 27	jsr $277e			jsr 	XEvaluateInteger 	; address
.27d3	20 bb 22	jsr $22bb			jsr 	CheckRightParen 	; closing right bracket.
.27d6	20 a9 27	jsr $27a9			jsr 	SetUpTOSVRamAddress	; set up VRAM address.
.27d9	20 48 22	jsr $2248			jsr 	MInt32False 		; zero return.
.27dc	ad 23 9f	lda $9f23			lda 	$9F23				; copy 1st byte
.27df	95 48		sta $48,x			sta 	esInt0,x
.27e1	28		plp				plp 						; check if DOKE (carry was clear)
.27e2	b0 05		bcs $27e9			bcs 	_CVRExit
.27e4	ad 23 9f	lda $9f23			lda 	$9F23 				; copy 2nd byte
.27e7	95 50		sta $50,x			sta 	esInt1,x
.27e9					_CVRExit:
.27e9	8a		txa				txa 						; return X position.
.27ea	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Return to file: basic.asm

.27eb					section_end_extension:
.27eb					section_start_floatingpoint:

;******  Processing file: floatingpoint/floatingpoint.asm

.27eb					floatingpointHandler:
.27eb	a2 03		ldx #$03			ldx 	#ErrorID_NoModule
.27ed	20 b9 24	jsr $24b9		jsr	errorHandler

;******  Return to file: basic.asm

.27f0					section_end_floatingpoint:
.27f0					section_start_interaction:

;******  Processing file: interaction/interaction.asm


;******  Processing file: interaction/cold.asm

.27f0					ColdStartEntry:
.27f0	a2 ff		ldx #$ff			ldx 	#$FF
.27f2	9a		txs				txs
.27f3	a2 00		ldx #$00		ldx	#0
.27f5	20 9c 24	jsr $249c		jsr	deviceHandler
.27f8	a0 ff		ldy #$ff			ldy 	#255
.27fa					_CSBanner:
.27fa	c8		iny				iny
.27fb	b9 1c 28	lda $281c,y			lda 	Intro,y
.27fe	f0 14		beq $2814			beq 	_CSStart
.2800	c9 08		cmp #$08			cmp 	#8
.2802	90 08		bcc $280c			bcc 	_CSInk
.2804	a2 12		ldx #$12		ldx	#18
.2806	20 9c 24	jsr $249c		jsr	deviceHandler
.2809	4c fa 27	jmp $27fa			jmp 	_CSBanner
.280c					_CSInk:
.280c	a2 06		ldx #$06		ldx	#6
.280e	20 9c 24	jsr $249c		jsr	deviceHandler
.2811	4c fa 27	jmp $27fa			jmp 	_CSBanner
.2814					_CSStart:
.2814	a2 02		ldx #$02		ldx	#2
.2816	20 57 23	jsr $2357		jsr	mainHandler
.2819	4c 30 29	jmp $2930			jmp 	WarmStartEntry
>281c	06 2a 2a 2a 20 36 35 30		Intro:	.text 	6,"*** 6502 Extended BASIC ***",13,13
>2824	32 20 45 78 74 65 6e 64 65 64 20 42 41 53 49 43
>2834	20 2a 2a 2a 0d 0d
>283a	03 57 72 69 74 74 65 6e				.text 	3,"Written by Paul Robson 2021",13,13
>2842	20 62 79 20 50 61 75 6c 20 52 6f 62 73 6f 6e 20
>2852	32 30 32 31 0d 0d
>2858	02 42 61 73 69 63 20				.text 	2,"Basic "
>285f	30 2e 31 32					.text "0.12"
>2863	20 28						.text 	" ("
>2865	31 31 2d 4d 61 72 2d 32				.text "11-Mar-21"
>286d	31
>286e	29 0d 0d 00					.text 	")",13,13,0

;******  Return to file: interaction/interaction.asm


;******  Processing file: interaction/delete.asm

.2872					DeleteLine:
.2872	ad c8 0a	lda $0ac8			lda 	basePage 					; copy program base to temp0
.2875	85 04		sta $04				sta 	temp0
.2877	ad c9 0a	lda $0ac9			lda 	basePage+1
.287a	85 05		sta $05				sta 	temp0+1
.287c	a0 01		ldy #$01	_DLLoop:ldy 	#1 							; see if found line ?
.287e	a5 48		lda $48				lda 	esInt0
.2880	d1 04		cmp ($04),y			cmp 	(temp0),y
.2882	d0 07		bne $288b			bne 	_DLNext
.2884	c8		iny				iny
.2885	a5 50		lda $50				lda 	esInt1
.2887	d1 04		cmp ($04),y			cmp 	(temp0),y
.2889	f0 0a		beq $2895			beq 	_DLFound
.288b	20 b3 28	jsr $28b3	_DLNext:jsr 	IAdvanceTemp0 				; shift temp0 forward, return Z flag set if end.
.288e	d0 ec		bne $287c			bne 	_DLLoop
.2890	a0 00		ldy #$00			ldy 	#0 							; size of chunk to cut out.
.2892	b1 04		lda ($04),y			lda 	(temp0),y
.2894	60		rts				rts
.2895					_DLFound:
.2895	a0 00		ldy #$00			ldy 	#0 							; from here (temp0),y
.2897	b1 04		lda ($04),y			lda 	(temp0),y
.2899	a8		tay				tay
.289a	a2 00		ldx #$00			ldx 	#0  						; to (temp0,x)
.289c					_DLCopyDown:
.289c	b1 04		lda ($04),y			lda 	(temp0),y
.289e	81 04		sta ($04,x)			sta 	(temp0,x)
.28a0	e6 04		inc $04				inc 	temp0 						; advance pointer
.28a2	d0 02		bne $28a6			bne 	_DLNoCarry
.28a4	e6 05		inc $05				inc 	temp0+1
.28a6					_DLNoCarry:
.28a6	a5 04		lda $04				lda 	temp0 						; until hit low memory
.28a8	c5 0f		cmp $0f				cmp 	lowMemory
.28aa	d0 f0		bne $289c			bne 	_DLCopyDown
.28ac	a5 05		lda $05				lda 	temp0+1
.28ae	c5 10		cmp $10				cmp 	lowMemory+1
.28b0	d0 ea		bne $289c			bne 	_DLCopyDown
.28b2	60		rts				rts
.28b3					IAdvanceTemp0:
.28b3	84 0c		sty $0c				sty 	tempShort
.28b5	18		clc				clc
.28b6	a0 00		ldy #$00			ldy 	#0
.28b8	b1 04		lda ($04),y			lda 	(temp0),y
.28ba	65 04		adc $04				adc 	temp0
.28bc	85 04		sta $04				sta 	temp0
.28be	90 02		bcc $28c2			bcc 	_IATNoCarry
.28c0	e6 05		inc $05				inc 	temp0+1
.28c2					_IATNoCarry:
.28c2	b1 04		lda ($04),y			lda 	(temp0),y
.28c4	a4 0c		ldy $0c				ldy 	tempShort
.28c6	c9 00		cmp #$00			cmp		#0
.28c8	60		rts				rts

;******  Return to file: interaction/interaction.asm


;******  Processing file: interaction/insert.asm

.28c9					InsertLine:
.28c9	ad c8 0a	lda $0ac8			lda 	basePage 					; copy program base to temp0
.28cc	85 04		sta $04				sta 	temp0
.28ce	ad c9 0a	lda $0ac9			lda 	basePage+1
.28d1	85 05		sta $05				sta 	temp0+1
.28d3					_ILLoop:
.28d3	a0 01		ldy #$01			ldy 	#1
.28d5	b1 04		lda ($04),y			lda 	(temp0),y
.28d7	c5 48		cmp $48				cmp 	esInt0
.28d9	c8		iny				iny
.28da	b1 04		lda ($04),y			lda 	(temp0),y
.28dc	e5 50		sbc $50				sbc 	esInt1
.28de	b0 05		bcs $28e5			bcs 	_ILFound 					; we know it cannot be equal, it would have been deleted
.28e0	20 b3 28	jsr $28b3			jsr 	IAdvanceTemp0 				; shift temp0 forward, return Z flag set if end.
.28e3	d0 ee		bne $28d3			bne 	_ILLoop
.28e5					_ILFound:
.28e5	a5 0f		lda $0f				lda 	lowMemory 					; shift lowMemory up to make space for it.
.28e7	85 06		sta $06				sta 	temp1
.28e9	a5 10		lda $10				lda 	lowMemory+1
.28eb	85 07		sta $07				sta 	temp1+1
.28ed	ad 1a 0d	lda $0d1a			lda 	tokenBufferIndex 			; space to make in Y, 0 in X.
.28f0	18		clc				clc
.28f1	69 03		adc #$03			adc 	#3
.28f3	a8		tay				tay
.28f4	a2 00		ldx #$00			ldx 	#0
.28f6	a1 06		lda ($06,x)	_ILMove:lda 	(temp1,x)
.28f8	91 06		sta ($06),y			sta 	(temp1),y
.28fa	a5 06		lda $06				lda 	temp1
.28fc	c5 04		cmp $04				cmp 	temp0
.28fe	d0 06		bne $2906			bne 	_ILMNext
.2900	a5 07		lda $07				lda 	temp1+1
.2902	c5 05		cmp $05				cmp 	temp0+1
.2904	f0 0b		beq $2911			beq 	_ILMCopy
.2906					_ILMNext:
.2906	a5 06		lda $06				lda 	temp1
.2908	d0 02		bne $290c			bne 	_ILNoBorrow
.290a	c6 07		dec $07				dec 	temp1+1
.290c					_ILNoBorrow:
.290c	c6 06		dec $06				dec 	temp1
.290e	4c f6 28	jmp $28f6			jmp 	_ILMove
.2911					_ILMCopy:
.2911	98		tya				tya 								; Y is the offset of the new line.
.2912	81 04		sta ($04,x)			sta 	(temp0,x)					; X = 0 still.
.2914	a0 01		ldy #$01			ldy 	#1 							; copy in line number.
.2916	a5 48		lda $48				lda 	esInt0
.2918	91 04		sta ($04),y			sta 	(temp0),y
.291a	c8		iny				iny
.291b	a5 50		lda $50				lda 	esInt1
.291d	91 04		sta ($04),y			sta 	(temp0),y
.291f	a0 00		ldy #$00			ldy 	#0 							; copy the body in
.2921					_ILMCopy2:
.2921	b1 02		lda ($02),y			lda 	(codePtr),y
.2923	c8		iny				iny
.2924	c8		iny				iny
.2925	c8		iny				iny
.2926	91 04		sta ($04),y			sta 	(temp0),y
.2928	88		dey				dey
.2929	88		dey				dey
.292a	cc 1a 0d	cpy $0d1a			cpy 	tokenBufferIndex
.292d	d0 f2		bne $2921			bne 	_ILMCopy2
.292f	60		rts				rts

;******  Return to file: interaction/interaction.asm


;******  Processing file: interaction/warm.asm

.2930					WarmStartEntry:
.2930	a2 ff		ldx #$ff			ldx 	#$FF
.2932	9a		txs				txs
.2933	a9 02		lda #$02			lda 	#2							; green text.
.2935	a2 06		ldx #$06		ldx	#6
.2937	20 9c 24	jsr $249c		jsr	deviceHandler
.293a	a2 0a		ldx #$0a		ldx	#10
.293c	20 9c 24	jsr $249c		jsr	deviceHandler
.293f	a5 04		lda $04				lda 	temp0	 					; copy temp0 to codePtr
.2941	85 02		sta $02				sta 	codePtr
.2943	a5 05		lda $05				lda 	temp0+1
.2945	85 03		sta $03				sta 	codePtr+1
.2947	a2 02		ldx #$02		ldx	#2
.2949	20 9c 24	jsr $249c		jsr	deviceHandler
.294c	a2 04		ldx #$04		ldx	#4
.294e	20 fb 32	jsr $32fb		jsr	tokeniserHandler
.2951	90 25		bcc $2978			bcc 	WSEError 					; failed.
.2953	a9 17		lda #$17			lda 	#(tokenHeader) & $FF
.2955	85 02		sta $02				sta 	codePtr
.2957	a9 0c		lda #$0c			lda 	#(tokenHeader) >> 8
.2959	85 03		sta $03				sta 	1+(codePtr)
.295b	ad 1a 0c	lda $0c1a			lda 	tokenBuffer 				; is it a blank line, go get another line.
.295e	c9 80		cmp #$80			cmp 	#$80
.2960	f0 ce		beq $2930			beq 	WarmStartEntry
.2962	29 c0		and #$c0			and 	#$C0						; does it start with a number
.2964	c9 40		cmp #$40			cmp 	#$40
.2966	f0 15		beq $297d			beq 	HasLineNumber
.2968	a9 00		lda #$00			lda 	#0 							; zero the token header, so it will look like a
.296a	8d 17 0c	sta $0c17			sta 	tokenHeader 				; fake program line.
.296d	8d 18 0c	sta $0c18			sta 	tokenHeader+1
.2970	8d 19 0c	sta $0c19			sta 	tokenHeader+2
.2973	a2 12		ldx #$12		ldx	#18
.2975	20 57 23	jsr $2357		jsr	mainHandler
.2978					WSEError:
.2978	a2 1d		ldx #$1d			ldx 	#ErrorID_Tokenise
.297a	20 b9 24	jsr $24b9		jsr	errorHandler
.297d					HasLineNumber:
.297d	a0 03		ldy #$03			ldy 	#3 							; get line number
.297f	a2 00		ldx #$00			ldx 	#0
.2981	20 e6 1c	jsr $1ce6			jsr 	EvaluateInteger
.2984	a5 58		lda $58				lda 	esInt2		 				; check in range.
.2986	05 60		ora $60				ora 	esInt3
.2988	d0 ee		bne $2978			bne 	WSEError
.298a	98		tya				tya 								; make codePtr point to code after the line number.
.298b	18		clc				clc
.298c	65 02		adc $02				adc 	codePtr
.298e	85 02		sta $02				sta 	codePtr
.2990	90 02		bcc $2994			bcc		_HLNNoCarry
.2992	e6 03		inc $03				inc 	codePtr+1
.2994					_HLNNoCarry:
.2994	98		tya				tya 								; subtract that offset from the code buffer index
.2995	38		sec				sec
.2996	49 ff		eor #$ff			eor 	#$FF
.2998	6d 1a 0d	adc $0d1a			adc 	tokenBufferIndex
.299b	18		clc				clc 								; add space allowing for header & $80 trailer
.299c	69 04		adc #$04			adc 	#4
.299e	8d 1a 0d	sta $0d1a			sta 	tokenBufferIndex 			; this is the number of bytes occupied.
.29a1	20 72 28	jsr $2872			jsr 	DeleteLine 					; always delete the line, it's deleted and reinserted.
.29a4					_HLNNoDelete:
.29a4	ad 1a 0d	lda $0d1a			lda 	tokenBufferIndex 			; if line was empty, then don't insert
.29a7	c9 01		cmp #$01			cmp 	#1 							; (the one character is the EOL marker)
.29a9	f0 03		beq $29ae			beq 	_HLMEditDone
.29ab	20 c9 28	jsr $28c9			jsr 	InsertLine 					; insert the line in
.29ae					_HLMEditDone:
.29ae	20 18 10	jsr $1018			jsr 	CommandClear 				; clear all variables etc.
.29b1	4c 30 29	jmp $2930			jmp 	WarmStartEntry

;******  Return to file: interaction/interaction.asm

.29b4					interactionHandler:
.29b4	7c b7 29	jmp ($29b7,x)			jmp 	(interactionVectors,x)
.29b7					interactionVectors:
>29b7	f0 27					.word ColdStartEntry       ; index 0
>29b9	30 29					.word WarmStartEntry       ; index 2

;******  Return to file: basic.asm

.29bb					section_end_interaction:
.29bb					section_start_string:

;******  Processing file: string/string.asm


;******  Processing file: string/chr.asm

.29bb					StringChrs:
.29bb	aa		tax				tax 								; set up stack
.29bc	a9 02		lda #$02			lda 	#2
.29be	20 75 2a	jsr $2a75			jsr 	AllocateSoftString
.29c1	98		tya				tya
.29c2	20 9b 2a	jsr $2a9b			jsr 	WriteSoftString
.29c5	20 ca 29	jsr $29ca			jsr 	ReturnSoftString
.29c8	8a		txa				txa
.29c9	60		rts				rts
.29ca					ReturnSoftString:
.29ca	a5 7a		lda $7a				lda 	softMemAlloc 				; copy address
.29cc	95 48		sta $48,x			sta 	esInt0,x
.29ce	a5 7b		lda $7b				lda 	softMemAlloc+1
.29d0	95 50		sta $50,x			sta 	esInt1,x
.29d2	a9 00		lda #$00			lda 	#0 							; zero upper bytes
.29d4	95 58		sta $58,x			sta 	esInt2,x
.29d6	95 60		sta $60,x			sta 	esInt3,x
.29d8	a9 40		lda #$40			lda 	#$40 						; type string.
.29da	95 40		sta $40,x			sta 	esType,x
.29dc	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/compare.asm

.29dd					STRCompare:
.29dd	48		pha				pha 								; save A
.29de	aa		tax				tax 								; put stack pos in X
.29df	98		tya				tya
.29e0	48		pha				pha
.29e1	20 15 2a	jsr $2a15			jsr 	CopyStringPair 				; copy strings to temp0,temp1
.29e4	a0 00		ldy #$00			ldy 	#0 							; get the smaller of the two string sizes.
.29e6	b1 04		lda ($04),y			lda 	(temp0),y
.29e8	d1 06		cmp ($06),y			cmp 	(temp1),y
.29ea	90 02		bcc $29ee			bcc 	_SCNotSmaller
.29ec	b1 06		lda ($06),y			lda 	(temp1),y
.29ee					_SCNotSmaller:
.29ee	aa		tax				tax 								; put that in X. We compare this many chars first.
.29ef					_SCCompareLoop:
.29ef	e0 00		cpx #$00			cpx 	#0 							; if compared all the smaller, then it is the shorter
.29f1	f0 0c		beq $29ff			beq 	_SCSameToEndShortest 		; one that is the smallest if they are different lengths.
.29f3	ca		dex				dex 								; decrement chars to compare.
.29f4	c8		iny				iny 								; move to next character
.29f5	38		sec				sec 								; calculate s1[y]-s2[y]
.29f6	b1 04		lda ($04),y			lda 	(temp0),y
.29f8	f1 06		sbc ($06),y			sbc 	(temp1),y
.29fa	d0 0a		bne $2a06			bne 	_SCReturnResult 			; if different return sign of A
.29fc	4c ef 29	jmp $29ef			jmp 	_SCCompareLoop
.29ff					_SCSameToEndShortest
.29ff	a0 00		ldy #$00			ldy 	#0 							; compare len(s1) - len(s2)
.2a01	38		sec				sec
.2a02	b1 04		lda ($04),y			lda 	(temp0),y
.2a04	f1 06		sbc ($06),y			sbc 	(temp1),y
.2a06					_SCReturnResult:
.2a06	08		php				php 								; set return to zero preserving PSW.
.2a07	a2 00		ldx #$00			ldx 	#0
.2a09	28		plp				plp
.2a0a	f0 05		beq $2a11			beq 	_SCExit 					; two values equal, then exit
.2a0c	ca		dex				dex 								; X = $FF
.2a0d	90 02		bcc $2a11			bcc 	_SCExit 					; if 1st < 2nd then -1
.2a0f	a2 01		ldx #$01			ldx 	#1 							; X = $01 if greater
.2a11					_SCExit:
.2a11	68		pla				pla
.2a12	a8		tay				tay
.2a13	68		pla				pla
.2a14	60		rts				rts
.2a15					CopyStringPair:
.2a15	b5 49		lda $49,x			lda 	esInt0+1,x
.2a17	85 06		sta $06				sta 	temp1
.2a19	b5 51		lda $51,x			lda 	esInt1+1,x
.2a1b	85 07		sta $07				sta 	temp1+1
.2a1d					CopyStringTop:
.2a1d	b5 48		lda $48,x			lda 	esInt0,x
.2a1f	85 04		sta $04				sta 	temp0
.2a21	b5 50		lda $50,x			lda 	esInt1,x
.2a23	85 05		sta $05				sta 	temp0+1
.2a25	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/concat.asm

.2a26					StringConcat:
.2a26	aa		tax				tax									; stack pos in X
.2a27	98		tya				tya
.2a28	48		pha				pha
.2a29	20 15 2a	jsr $2a15			jsr 	CopyStringPair 				; temp0 and temp1 point to strings to concat.
.2a2c	38		sec				sec 								; calculate alloc strings. lengths added + 1 for size.
.2a2d	a0 00		ldy #$00			ldy 	#0
.2a2f	b1 04		lda ($04),y			lda 	(temp0),y
.2a31	71 06		adc ($06),y			adc 	(temp1),y
.2a33	b0 1c		bcs $2a51			bcs 	_SCError 					; just too many characters here.
.2a35	c9 fc		cmp #$fc			cmp 	#MaxStringSize
.2a37	b0 18		bcs $2a51			bcs 	_SCError
.2a39	20 75 2a	jsr $2a75			jsr 	AllocateSoftString 			; allocate soft string memory, set pointer.
.2a3c	20 6c 2a	jsr $2a6c			jsr 	CopySoftToStack 			; copy that to the stack.
.2a3f	20 56 2a	jsr $2a56			jsr 	SCCopyTemp0 				; copy temp0
.2a42	a5 06		lda $06				lda 	temp1 						; copy temp1 to temp0
.2a44	85 04		sta $04				sta 	temp0
.2a46	a5 07		lda $07				lda 	temp1+1
.2a48	85 05		sta $05				sta 	temp0+1
.2a4a	20 56 2a	jsr $2a56			jsr 	SCCopyTemp0 				; copy temp0 e.g. what was temp1.
.2a4d	68		pla				pla
.2a4e	a8		tay				tay
.2a4f	8a		txa				txa 								; and A
.2a50	60		rts				rts
.2a51					_SCError:
.2a51	a2 0d		ldx #$0d			ldx 	#ErrorID_StrLen
.2a53	20 b9 24	jsr $24b9		jsr	errorHandler
.2a56					SCCopyTemp0:
.2a56	a0 00		ldy #$00			ldy 	#0 							; put count in temp2
.2a58	b1 04		lda ($04),y			lda 	(temp0),y
.2a5a	85 08		sta $08				sta 	temp2
.2a5c					_SCCopyLoop:
.2a5c	a5 08		lda $08				lda 	temp2 						; done the lot
.2a5e	f0 0b		beq $2a6b			beq 	_SCCopyExit
.2a60	c6 08		dec $08				dec 	temp2
.2a62	c8		iny				iny 								; get next char
.2a63	b1 04		lda ($04),y			lda 	(temp0),y
.2a65	20 9b 2a	jsr $2a9b			jsr 	WriteSoftString 			; write to soft string.
.2a68	4c 5c 2a	jmp $2a5c			jmp 	_SCCopyLoop
.2a6b					_SCCopyExit:
.2a6b	60		rts				rts
.2a6c					CopySoftToStack:
.2a6c	a5 7a		lda $7a				lda 	SoftMemAlloc 				; copy the memory allocation pointer to the stack.
.2a6e	95 48		sta $48,x			sta 	esInt0,x 					; type is already string.
.2a70	a5 7b		lda $7b				lda 	SoftMemAlloc+1
.2a72	95 50		sta $50,x			sta 	esInt1,x
.2a74	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/memory.asm

.007a					softMemAlloc:
>007a							.fill 	2  							; if MSB is zero needs resetting on allocation.
.2a75					AllocateSoftString:
.2a75	85 0c		sta $0c				sta 	tempShort 					; save count
.2a77	98		tya				tya
.2a78	48		pha				pha
.2a79	a5 7b		lda $7b				lda 	softMemAlloc+1 				; if the high byte is zero, it needs allocating.
.2a7b	d0 09		bne $2a86			bne 	_ASSDone
.2a7d	a5 0d		lda $0d				lda 	highMemory 					; reset the soft memory alloc pointer.
.2a7f	85 7a		sta $7a				sta 	softMemAlloc 				; to speed up slightly, we only reset this when we first need it
.2a81	a4 0e		ldy $0e				ldy 	highMemory+1 				; but it needs to be reset before each command.
.2a83	88		dey				dey 								; it is set to 1/4k below high memory, allowing space
.2a84	84 7b		sty $7b				sty 	softMemAlloc+1 				; for a concreted string.
.2a86					_ASSDone:
.2a86	38		sec				sec 								; allocate downwards enough memory
.2a87	a5 7a		lda $7a				lda 	softMemAlloc 				; subtract the memory requirements in A from
.2a89	e5 0c		sbc $0c				sbc 	tempShort 					; the soft memory pointer
.2a8b	85 7a		sta $7a				sta 	softMemAlloc
.2a8d	a5 7b		lda $7b				lda 	softMemAlloc+1
.2a8f	e9 00		sbc #$00			sbc 	#0
.2a91	85 7b		sta $7b				sta 	softMemAlloc+1
.2a93	a9 00		lda #$00			lda 	#0 							; empty that string, set the length = 0.
.2a95	a8		tay				tay
.2a96	91 7a		sta ($7a),y			sta 	(softMemAlloc),y
.2a98	68		pla				pla
.2a99	a8		tay				tay
.2a9a	60		rts				rts
.2a9b					WriteSoftString:
.2a9b	84 0c		sty $0c				sty 	tempShort 					; save Y
.2a9d	48		pha				pha 								; save character on stack
.2a9e	a0 00		ldy #$00			ldy 	#0 							; get and bump length
.2aa0	b1 7a		lda ($7a),y			lda 	(softMemAlloc),y
.2aa2	18		clc				clc
.2aa3	69 01		adc #$01			adc 	#1
.2aa5	91 7a		sta ($7a),y			sta 	(softMemAlloc),y
.2aa7	a8		tay				tay 								; offset in Y
.2aa8	68		pla				pla 								; get char and write.
.2aa9	91 7a		sta ($7a),y			sta 	(softMemAlloc),y
.2aab	a4 0c		ldy $0c				ldy 	tempShort 					; restore Y and exit.
.2aad	60		rts				rts
.2aae					StrClone:
.2aae	aa		tax				tax 								; set up stack.
.2aaf	98		tya				tya
.2ab0	48		pha				pha
.2ab1	a0 00		ldy #$00			ldy 	#0 							; get length, add 1 for length
.2ab3	b1 04		lda ($04),y			lda 	(temp0),y 					; this is the bytes required.
.2ab5	18		clc				clc
.2ab6	69 01		adc #$01			adc 	#1
.2ab8	20 75 2a	jsr $2a75			jsr 	AllocateSoftString 			; allocate soft memory
.2abb	a5 7a		lda $7a				lda 	softMemAlloc 				; copy that address to TOS
.2abd	95 48		sta $48,x			sta 	esInt0,x
.2abf	a5 7b		lda $7b				lda 	softMemAlloc+1
.2ac1	95 50		sta $50,x			sta 	esInt1,x
.2ac3	a9 00		lda #$00			lda 	#0 							; zero upper 2 bytes
.2ac5	95 58		sta $58,x			sta 	esInt2,x
.2ac7	95 60		sta $60,x			sta 	esInt3,x
.2ac9	a9 40		lda #$40			lda 	#$40 						; set type to string.
.2acb	95 40		sta $40,x			sta 	esType,x
.2acd	20 56 2a	jsr $2a56			jsr 	SCCopyTemp0 				; copy temp0 string to soft memory copy (concat.asm)
.2ad0	68		pla				pla
.2ad1	a8		tay				tay
.2ad2	8a		txa				txa
.2ad3	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/setcase.asm

.2ad4					CaseString:
.2ad4	48		pha				pha 								; save A and copy to X
.2ad5	aa		tax				tax
.2ad6	98		tya				tya
.2ad7	48		pha				pha
.2ad8	20 1d 2a	jsr $2a1d			jsr 	CopyStringTop 				; target string -> temp0
.2adb	a0 00		ldy #$00			ldy 	#0
.2add	b1 04		lda ($04),y			lda 	(temp0),y  					; get length,
.2adf	18		clc				clc
.2ae0	69 01		adc #$01			adc 	#1 							; one more for length byte
.2ae2	20 75 2a	jsr $2a75			jsr 	AllocateSoftString 			; allocate soft string memory, set pointer.
.2ae5	20 6c 2a	jsr $2a6c			jsr 	CopySoftToStack 			; copy that to the stack.
.2ae8	a0 00		ldy #$00			ldy 	#0
.2aea	b1 04		lda ($04),y			lda 	(temp0),y 					; count to copy in X
.2aec	aa		tax				tax
.2aed					_CSCopy:
.2aed	e0 00		cpx #$00			cpx 	#0 							; finished if 0.
.2aef	f0 24		beq $2b15			beq 	_CSExit
.2af1	ca		dex				dex
.2af2	c8		iny				iny
.2af3	68		pla				pla 								; check direction
.2af4	48		pha				pha
.2af5	f0 0c		beq $2b03			beq 	_CSUpper
.2af7	b1 04		lda ($04),y			lda 	(temp0),y 					; lower$() code
.2af9	c9 41		cmp #$41			cmp 	#"A"
.2afb	90 12		bcc $2b0f			bcc 	_CSWrite
.2afd	c9 5b		cmp #$5b			cmp 	#"Z"+1
.2aff	b0 0e		bcs $2b0f			bcs 	_CSWrite
.2b01	90 0a		bcc $2b0d			bcc 	_CSFlipWrite
.2b03					_CSUpper:
.2b03	b1 04		lda ($04),y			lda 	(temp0),y 					; upper$() code
.2b05	c9 61		cmp #$61			cmp 	#"a"
.2b07	90 06		bcc $2b0f			bcc 	_CSWrite
.2b09	c9 7b		cmp #$7b			cmp 	#"z"+1
.2b0b	b0 02		bcs $2b0f			bcs 	_CSWrite
.2b0d					_CSFlipWrite:
.2b0d	49 20		eor #$20			eor 	#"A"^"a" 					; switch case.
.2b0f					_CSWrite:
.2b0f	20 9b 2a	jsr $2a9b			jsr 	WriteSoftString 			; add to soft string.
.2b12	4c ed 2a	jmp $2aed			jmp 	_CSCopy
.2b15					_CSExit:
.2b15	68		pla				pla
.2b16	a8		tay				tay
.2b17	68		pla				pla
.2b18	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/substring.asm

.2b19					StringSubstring:
.2b19	48		pha				pha
.2b1a	aa		tax				tax 								; access stack.
.2b1b	98		tya				tya
.2b1c	48		pha				pha
.2b1d	20 1d 2a	jsr $2a1d			jsr 	CopyStringTop 				; point temp0 to the string.
.2b20	a0 00		ldy #$00			ldy 	#0 							; get length.
.2b22	b1 04		lda ($04),y			lda 	(temp0),Y
.2b24	85 06		sta $06				sta 	temp1
.2b26	b5 49		lda $49,x			lda 	esInt0+1,x 					; get the initial offset
.2b28	c5 06		cmp $06				cmp 	temp1 						; return "" if > length.
.2b2a	f0 02		beq $2b2e			beq 	_SSBOkay
.2b2c	b0 2a		bcs $2b58			bcs 	_SSBReturnNull
.2b2e					_SSBOkay:
.2b2e	a5 06		lda $06				lda 	temp1 						; get the total length +1
.2b30	18		clc				clc
.2b31	69 01		adc #$01			adc 	#1
.2b33	38		sec				sec
.2b34	f5 49		sbc $49,x			sbc 	esInt0+1,x 					; the anything >= this is bad - max size
.2b36	d5 4a		cmp $4a,x			cmp 	esInt0+2,x  				; check bad >= required
.2b38	90 02		bcc $2b3c			bcc		_SSBTrunc
.2b3a	b5 4a		lda $4a,x			lda 	esInt0+2,x
.2b3c					_SSBTrunc:
.2b3c	85 07		sta $07				sta 	temp1+1 					; characters to copy.
.2b3e	18		clc				clc
.2b3f	69 01		adc #$01			adc 	#1 							; add 1
.2b41	20 75 2a	jsr $2a75			jsr 	AllocateSoftString 			; allocate soft string memory, set pointer.
.2b44	20 6c 2a	jsr $2a6c			jsr 	CopySoftToStack 			; copy that to the stack.
.2b47	b4 49		ldy $49,x			ldy 	esInt0+1,x 					; get initial position of char to copy
.2b49					_SSBCopyLoop:
.2b49	a5 07		lda $07				lda 	temp1+1 					; done them all
.2b4b	f0 0e		beq $2b5b			beq 	_SSBExit
.2b4d	c6 07		dec $07				dec 	temp1+1
.2b4f	b1 04		lda ($04),y			lda 	(temp0),y 					; get and write character
.2b51	20 9b 2a	jsr $2a9b			jsr 	WriteSoftString
.2b54	c8		iny				iny
.2b55	4c 49 2b	jmp $2b49			jmp 	_SSBCopyLoop
.2b58					_SSBReturnNull:
.2b58	20 5f 2b	jsr $2b5f			jsr 	ReturnNull
.2b5b					_SSBExit:
.2b5b	68		pla				pla
.2b5c	a8		tay				tay
.2b5d	68		pla				pla
.2b5e	60		rts				rts
.2b5f					ReturnNull:
.2b5f	a9 00		lda #$00			lda 	#0 							; clear null string
.2b61	8d ce 0a	sta $0ace			sta 	NullString
.2b64	a9 ce		lda #$ce			lda 	#NullString & $FF 			; set a pointer to it
.2b66	95 48		sta $48,x			sta 	esInt0,x
.2b68	a9 0a		lda #$0a			lda 	#NullString >> 8
.2b6a	95 50		sta $50,x			sta 	esInt1,x
.2b6c	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/write.asm

.0c12					srcStrLen:
>0c12							.fill 	1
.2b6d					StringWrite:
.2b6d	aa		tax				tax
.2b6e	48		pha				pha
.2b6f	98		tya				tya
.2b70	48		pha				pha
.2b71	20 98 2b	jsr $2b98			jsr 	CheckOverwriteCurrent
.2b74	b0 0d		bcs $2b83			bcs		_SWCopyCurrent
.2b76	20 d6 2b	jsr $2bd6			jsr 	RequiresConcretion
.2b79	90 0e		bcc $2b89			bcc 	_SWWriteReference
.2b7b	20 39 2c	jsr $2c39			jsr 	CheckSpecialConcretion
.2b7e	b0 09		bcs $2b89			bcs 	_SWWriteReference
.2b80	20 ea 2b	jsr $2bea			jsr 	AllocateHardMemory
.2b83					_SWCopyCurrent:
.2b83	20 1d 2c	jsr $2c1d			jsr 	CopyStringToHardMemory
.2b86	4c 94 2b	jmp $2b94			jmp 	_SWExit
.2b89					_SWWriteReference
.2b89	a0 00		ldy #$00			ldy 	#0
.2b8b	a5 04		lda $04				lda 	temp0
.2b8d	91 06		sta ($06),y			sta 	(temp1),y
.2b8f	c8		iny				iny
.2b90	a5 05		lda $05				lda 	temp0+1
.2b92	91 06		sta ($06),y			sta 	(temp1),y
.2b94					_SWExit:
.2b94	68		pla				pla
.2b95	a8		tay				tay
.2b96	68		pla				pla
.2b97	60		rts				rts
.2b98					CheckOverwriteCurrent:
.2b98	a0 00		ldy #$00			ldy 	#0 						; get address of string being written to temp0
.2b9a	b5 51		lda $51,x			lda 	esInt1+1,x
.2b9c	85 05		sta $05				sta 	temp0+1
.2b9e	b5 49		lda $49,x			lda 	esInt0+1,x
.2ba0	85 04		sta $04				sta 	temp0
.2ba2	b1 04		lda ($04),y			lda 	(temp0),y 				; get length of string being copied and save it.
.2ba4	8d 12 0c	sta $0c12			sta 	srcStrLen
.2ba7	b5 48		lda $48,x			lda 	esInt0,x 				; copy where the final address it being written to temp1.
.2ba9	85 06		sta $06				sta 	temp1 					; e.g. if it is ax$ then temp1 will point to the ax$
.2bab	b5 50		lda $50,x			lda 	esInt1,x 				; data record + 5
.2bad	85 07		sta $07				sta 	temp1+1
.2baf	a0 01		ldy #$01			ldy 	#1 						; get the MSB of the address of string currently stored there.
.2bb1	b1 06		lda ($06),y			lda 	(temp1),y
.2bb3	c5 0e		cmp $0e				cmp 	highMemory+1 			; if < high memory then it cannot be something stored
.2bb5	90 1b		bcc $2bd2			bcc 	_COCFail 				; in hard memory.
.2bb7	a0 00		ldy #$00			ldy 	#0 						; copy target address - 1 into temp2
.2bb9	b1 06		lda ($06),y			lda 	(temp1),y 				; when allocating hard memory, the overall size is
.2bbb	e9 01		sbc #$01			sbc 	#1 						; in the previous byte.
.2bbd	85 08		sta $08				sta 	temp2
.2bbf	c8		iny				iny
.2bc0	b1 06		lda ($06),y			lda 	(temp1),y
.2bc2	e9 00		sbc #$00			sbc 	#0
.2bc4	85 09		sta $09				sta 	temp2+1
.2bc6	a0 00		ldy #$00			ldy 	#0 						; how large is this physical chunk.
.2bc8	b1 08		lda ($08),y			lda 	(temp2),y
.2bca	38		sec				sec  							; maximum character capacity.
.2bcb	e9 02		sbc #$02			sbc 	#2
.2bcd	cd 12 0c	cmp $0c12			cmp 	srcStrLen 				; if >= the required length
.2bd0	b0 02		bcs $2bd4			bcs 	_COCCanReuse
.2bd2					_COCFail:
.2bd2	18		clc				clc
.2bd3	60		rts				rts
.2bd4					_COCCanReuse:
.2bd4	38		sec				sec
.2bd5	60		rts				rts
.2bd6					RequiresConcretion:
.2bd6	a5 05		lda $05				lda 	temp0+1 				; get MSB of address of string to be written
.2bd8	c5 0e		cmp $0e				cmp 	highMemory+1 			; if >= high memory it is concreted
.2bda	b0 0a		bcs $2be6			bcs 	_RCSucceed 				; so it needs concreting again - duplication.
.2bdc	a5 7b		lda $7b				lda 	softMemAlloc+1 			; have we allocated any soft memory yet ?
.2bde	f0 08		beq $2be8			beq 	_RCFail 				; if not, this cannot be soft memory.
.2be0	a5 05		lda $05				lda 	temp0+1 				; get MSB of address of string to be written
.2be2	c5 7b		cmp $7b				cmp 	softMemAlloc+1 			; if >= soft mem alloc it is either soft
.2be4	90 02		bcc $2be8			bcc 	_RCFail 				; so concreting
.2be6					_RCSucceed:
.2be6	38		sec				sec
.2be7	60		rts				rts
.2be8					_RCFail:
.2be8	18		clc				clc
.2be9	60		rts				rts
.2bea					AllocateHardMemory:
.2bea	98		tya				tya
.2beb	48		pha				pha
.2bec	ad 12 0c	lda $0c12			lda 	srcStrLen 				; characters in string
.2bef	69 0a		adc #$0a			adc 	#1+1+8 					; one for hard memory size, one for string size, extra for expansion
.2bf1	b0 04		bcs $2bf7			bcs 	_AHMSetMax 				; max out that amount.
.2bf3	c9 fe		cmp #$fe			cmp 	#MaxStringSize+2
.2bf5	90 02		bcc $2bf9			bcc 	_AHMIsOkay
.2bf7					_AHMSetMax:
.2bf7	a9 fe		lda #$fe			lda 	#MaxStringSize+2
.2bf9					_AHMIsOkay:
.2bf9	48		pha				pha	 							; save size to be allocated
.2bfa	49 ff		eor #$ff			eor 	#$FF 					; complement and add to high Memory
.2bfc	38		sec				sec  							; and copy result to TOS as target address.
.2bfd	65 0d		adc $0d				adc 	highMemory
.2bff	85 0d		sta $0d				sta 	highMemory
.2c01	a5 0e		lda $0e				lda 	highMemory+1
.2c03	69 ff		adc #$ff			adc 	#$FF
.2c05	85 0e		sta $0e				sta 	highMemory+1
.2c07	a0 00		ldy #$00			ldy 	#0 						; Y = 0
.2c09	68		pla				pla 							; get the total size of the storage block
.2c0a	91 0d		sta ($0d),y			sta 	(highMemory),y 			; and set it
.2c0c	18		clc				clc
.2c0d	a5 0d		lda $0d				lda		highMemory 				; point the target address to the byte after this.
.2c0f	69 01		adc #$01			adc 	#1
.2c11	91 06		sta ($06),y			sta 	(temp1),y
.2c13	a5 0e		lda $0e				lda 	highMemory+1
.2c15	69 00		adc #$00			adc 	#0
.2c17	c8		iny				iny
.2c18	91 06		sta ($06),y			sta 	(temp1),y
.2c1a	68		pla				pla
.2c1b	a8		tay				tay
.2c1c	60		rts				rts
.2c1d					CopyStringToHardMemory:
.2c1d	98		tya				tya
.2c1e	48		pha				pha
.2c1f	a0 00		ldy #$00			ldy 	#0 						; copy target address to temp2
.2c21	b1 06		lda ($06),y			lda 	(temp1),y
.2c23	85 08		sta $08				sta 	temp2
.2c25	c8		iny				iny
.2c26	b1 06		lda ($06),y			lda 	(temp1),y
.2c28	85 09		sta $09				sta 	temp2+1
.2c2a	ac 12 0c	ldy $0c12			ldy 	srcStrLen 				; copy this + 1 characters, (length too) hence $FF compare
.2c2d					_CSTHMLoop:
.2c2d	b1 04		lda ($04),y			lda 	(temp0),y
.2c2f	91 08		sta ($08),y			sta 	(temp2),y
.2c31	88		dey				dey
.2c32	c0 ff		cpy #$ff			cpy 	#$FF 					; this does the +1
.2c34	d0 f7		bne $2c2d			bne 	_CSTHMLoop
.2c36	68		pla				pla
.2c37	a8		tay				tay
.2c38	60		rts				rts
.2c39					CheckSpecialConcretion:
.2c39	ad 12 0c	lda $0c12			lda 	srcStrLen 				; check string is null e.g. length = 0
.2c3c	f0 02		beq $2c40			beq 	_CSCNullString
.2c3e	18		clc				clc
.2c3f	60		rts				rts
.2c40					_CSCNullString:
.2c40	a9 00		lda #$00			lda 	#0 						; by always returning this address we don't waste
.2c42	8d ce 0a	sta $0ace			sta 	NullString		 		; storage on null strings.
.2c45	a9 ce		lda #$ce			lda 	#(NullString) & $FF
.2c47	85 04		sta $04				sta 	temp0
.2c49	a9 0a		lda #$0a			lda 	#(NullString) >> 8
.2c4b	85 05		sta $05				sta 	1+(temp0)
.2c4d	38		sec				sec
.2c4e	60		rts				rts

;******  Return to file: string/string.asm

.2c4f					stringHandler:
.2c4f	7c 52 2c	jmp ($2c52,x)			jmp 	(stringVectors,x)
.2c52					stringVectors:
>2c52	bb 29					.word StringChrs           ; index 0
>2c54	ae 2a					.word StrClone             ; index 2
>2c56	26 2a					.word StringConcat         ; index 4
>2c58	dd 29					.word STRCompare           ; index 6
>2c5a	d4 2a					.word CaseString           ; index 8
>2c5c	19 2b					.word StringSubstring      ; index 10
>2c5e	6d 2b					.word StringWrite          ; index 12

;******  Return to file: basic.asm

.2c60					section_end_string:
.2c60					section_start_tokeniser:

;******  Processing file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/detokenise/detokenise.asm

.0c13					deTokeniseVector:
>0c13							.fill 	2
.0c15					lastCharacterClass:
>0c15							.fill 	1
.2c60					ListLine:
.2c60	a9 70		lda #$70			lda 	#(deTokenPrint) & $FF
.2c62	8d 13 0c	sta $0c13			sta 	deTokeniseVector
.2c65	a9 2d		lda #$2d			lda 	#(deTokenPrint) >> 8
.2c67	8d 14 0c	sta $0c14			sta 	1+(deTokeniseVector)
.2c6a					Detokenise:
.2c6a	a9 ff		lda #$ff			lda 	#$FF 					; last thing printed is a dummy value.
.2c6c	8d 15 0c	sta $0c15			sta 	lastCharacterClass
.2c6f	a2 02		ldx #$02			ldx 	#2
.2c71	20 48 22	jsr $2248			jsr 	MInt32False
.2c74	a0 01		ldy #$01			ldy 	#1 						; copy line number to stack,2 (as using stack 0,1)
.2c76	b1 02		lda ($02),y			lda 	(codePtr),y
.2c78	95 48		sta $48,x			sta 	esInt0,x
.2c7a	c8		iny				iny
.2c7b	b1 02		lda ($02),y			lda 	(codePtr),y
.2c7d	95 50		sta $50,x			sta 	esInt1,x
.2c7f	a9 84		lda #$84			lda 	#LTYLineNumber
.2c81	20 4b 2d	jsr $2d4b			jsr 	ListOutputCharacter
.2c84	a9 0a		lda #$0a			lda 	#10 					; base 10
.2c86	20 22 2d	jsr $2d22			jsr 	DTPrintInteger 			; print as integer.
.2c89	a0 00		ldy #$00			ldy 	#0 						; get length
.2c8b	b1 04		lda ($04),y			lda 	(temp0),y 				; into X
.2c8d	aa		tax				tax
.2c8e					_DTPadOut:
.2c8e	a9 20		lda #$20			lda 	#" "
.2c90	20 4b 2d	jsr $2d4b			jsr 	ListOutputCharacter
.2c93	e8		inx				inx
.2c94	e0 06		cpx #$06			cpx 	#6
.2c96	d0 f6		bne $2c8e			bne 	_DTPadOut
.2c98	a0 03		ldy #$03			ldy 	#3 						; start position.
.2c9a					_DTListLoop
.2c9a	b1 02		lda ($02),y			lda 	(codePtr),y
.2c9c	c9 85		cmp #$85			cmp 	#TOK_STR 				; Inline string.
.2c9e	f0 58		beq $2cf8			beq 	_DTIsString
.2ca0	c9 84		cmp #$84			cmp 	#TOK_FPC 				; Floating point
.2ca2	f0 7a		beq $2d1e			beq 	_DTIsFloat
.2ca4	c9 c5		cmp #$c5			cmp 	#TKW_AMP 				; & hex marker
.2ca6	f0 16		beq $2cbe			beq 	_DTHexConstant
.2ca8	c9 80		cmp #$80			cmp 	#TOK_EOL 				; End of Line
.2caa	d0 06		bne $2cb2			bne 	_DTNotEnd
.2cac	a9 ff		lda #$ff			lda 	#255 					; print CR
.2cae	20 4b 2d	jsr $2d4b			jsr 	ListOutputCharacter
.2cb1	60		rts				rts
.2cb2					_DTNotEnd:
.2cb2	c9 00		cmp #$00			cmp 	#0
.2cb4	30 36		bmi $2cec			bmi 	_DTIsToken
.2cb6	c9 40		cmp #$40			cmp 	#$40
.2cb8	90 38		bcc $2cf2			bcc 	_DTIsIdentifier
.2cba	a9 0a		lda #$0a			lda 	#10 					; this is the base
.2cbc	d0 08		bne $2cc6			bne 	_DTConstant
.2cbe					_DTHexConstant:
.2cbe	a9 26		lda #$26			lda 	#"&"
.2cc0	20 4b 2d	jsr $2d4b			jsr 	ListOutputCharacter
.2cc3	c8		iny				iny
.2cc4	a9 10		lda #$10			lda 	#16
.2cc6					_DTConstant:
.2cc6	48		pha				pha
.2cc7	a9 00		lda #$00			lda 	#0 							; now constant, may need spaces
.2cc9	20 8c 2d	jsr $2d8c			jsr 	DTSwitchMode
.2ccc	a9 86		lda #$86			lda 	#LTYConstant
.2cce	20 4b 2d	jsr $2d4b			jsr 	ListOutputCharacter
.2cd1	a2 02		ldx #$02			ldx 	#2
.2cd3	8a		txa				txa
.2cd4	a2 0a		ldx #$0a		ldx	#10
.2cd6	20 57 23	jsr $2357		jsr	mainHandler
.2cd9	aa		tax				tax
.2cda	20 e7 11	jsr $11e7			jsr 	TOSToTemp0
.2cdd	68		pla				pla
.2cde	85 0c		sta $0c				sta 	tempShort
.2ce0	98		tya				tya
.2ce1	48		pha				pha
.2ce2	a5 0c		lda $0c				lda 	tempShort
.2ce4	20 22 2d	jsr $2d22			jsr 	DTPrintInteger
.2ce7	68		pla				pla
.2ce8	a8		tay				tay
.2ce9	4c 9a 2c	jmp $2c9a			jmp 	_DTListLoop
.2cec					_DTIsToken:
.2cec	20 e5 2d	jsr $2de5			jsr 	DTDecodeToken
.2cef	4c 9a 2c	jmp $2c9a			jmp 	_DTListLoop
.2cf2					_DTIsIdentifier:
.2cf2	20 9e 2d	jsr $2d9e			jsr 	DTIdentifier
.2cf5	4c 9a 2c	jmp $2c9a			jmp 	_DTListLoop
.2cf8					_DTIsString:
.2cf8	a9 01		lda #$01			lda 	#1 							; now punctuation, may need spaces
.2cfa	20 8c 2d	jsr $2d8c			jsr 	DTSwitchMode
.2cfd	a9 81		lda #$81			lda 	#LTYString
.2cff	20 4b 2d	jsr $2d4b			jsr 	ListOutputCharacter
.2d02	a9 22		lda #$22			lda 	#'"'						; open quote
.2d04	20 4b 2d	jsr $2d4b			jsr 	ListOutputCharacter
.2d07	a2 02		ldx #$02			ldx 	#2 							; evaluate string to TOS2.
.2d09	8a		txa				txa
.2d0a	a2 0a		ldx #$0a		ldx	#10
.2d0c	20 57 23	jsr $2357		jsr	mainHandler
.2d0f	aa		tax				tax
.2d10	20 e7 11	jsr $11e7			jsr 	TOSToTemp0
.2d13	20 34 2d	jsr $2d34			jsr 	DTPrintLengthPrefix
.2d16	a9 22		lda #$22			lda 	#'"'
.2d18	20 4b 2d	jsr $2d4b			jsr 	ListOutputCharacter
.2d1b	4c 9a 2c	jmp $2c9a			jmp 	_DTListLoop
.2d1e					_DTIsFloat:
>2d1e	db						.byte 	$DB
.2d1f	4c 1e 2d	jmp $2d1e			jmp 	_DTIsFloat

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/detokenise/dtprint.asm

.2d22					DTPrintInteger:
.2d22	48		pha				pha
.2d23	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.2d25	85 04		sta $04				sta 	temp0
.2d27	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.2d29	85 05		sta $05				sta 	1+(temp0)
.2d2b	68		pla				pla
.2d2c	a8		tay				tay
.2d2d	8a		txa				txa
.2d2e	a2 0c		ldx #$0c		ldx	#12
.2d30	20 57 23	jsr $2357		jsr	mainHandler
.2d33	aa		tax				tax
.2d34					DTPrintLengthPrefix:
.2d34	98		tya				tya
.2d35	48		pha				pha
.2d36	a0 00		ldy #$00			ldy 	#0
.2d38	b1 04		lda ($04),y			lda 	(temp0),y
.2d3a	aa		tax				tax
.2d3b	f0 0b		beq $2d48			beq 	_DTPLPExit
.2d3d					_DTPLPLoop:
.2d3d	c8		iny				iny
.2d3e	b1 04		lda ($04),y			lda 	(temp0),y
.2d40	29 7f		and #$7f			and 	#$7F
.2d42	20 4b 2d	jsr $2d4b			jsr 	ListOutputCharacter
.2d45	ca		dex				dex
.2d46	d0 f5		bne $2d3d			bne 	_DTPLPLoop
.2d48					_DTPLPExit:
.2d48	68		pla				pla
.2d49	a8		tay				tay
.2d4a	60		rts				rts
.2d4b					ListOutputCharacter:
.2d4b	85 0c		sta $0c				sta 	tempShort
.2d4d	48		pha				pha
.2d4e	8a		txa				txa
.2d4f	48		pha				pha
.2d50	98		tya				tya
.2d51	48		pha				pha
.2d52	a5 0c		lda $0c				lda 	tempShort
.2d54	c9 20		cmp #$20			cmp 	#32
.2d56	b0 0c		bcs $2d64			bcs		_LOCHiBit
.2d58	09 40		ora #$40			ora 	#64
.2d5a	c9 40		cmp #$40			cmp 	#64
.2d5c	f0 06		beq $2d64			beq 	_LOCHiBit
.2d5e	c9 5b		cmp #$5b			cmp 	#65+26
.2d60	b0 02		bcs $2d64			bcs 	_LOCHiBit
.2d62	69 20		adc #$20			adc 	#32
.2d64					_LOCHiBit:
.2d64	20 6d 2d	jsr $2d6d			jsr 	_LOCCallVector
.2d67	68		pla				pla
.2d68	a8		tay				tay
.2d69	68		pla				pla
.2d6a	aa		tax				tax
.2d6b	68		pla				pla
.2d6c					_LOCExit:
.2d6c	60		rts				rts
.2d6d					_LOCCallVector:
.2d6d	6c 13 0c	jmp ($0c13)			jmp 	(deTokeniseVector)
.2d70					deTokenPrint:
.2d70	c9 00		cmp #$00			cmp 	#0
.2d72	30 06		bmi $2d7a			bmi 	_dtpInk
.2d74	a2 12		ldx #$12		ldx	#18
.2d76	20 9c 24	jsr $249c		jsr	deviceHandler
.2d79	60		rts				rts
.2d7a	c9 ff		cmp #$ff	_dtpInk:cmp 	#255
.2d7c	f0 08		beq $2d86			beq 	_dtpCR
.2d7e	29 07		and #$07			and 	#7
.2d80	a2 06		ldx #$06		ldx	#6
.2d82	20 9c 24	jsr $249c		jsr	deviceHandler
.2d85	60		rts				rts
.2d86					_dtpCR:
.2d86	a2 02		ldx #$02		ldx	#2
.2d88	20 9c 24	jsr $249c		jsr	deviceHandler
.2d8b	60		rts				rts
.2d8c					DTSwitchMode:
.2d8c	cd 15 0c	cmp $0c15			cmp 	LastCharacterClass
.2d8f	f0 04		beq $2d95			beq 	_DTSMNoChange
.2d91	8d 15 0c	sta $0c15			sta 	LastCharacterClass
.2d94					_DTSMExit:
.2d94	60		rts				rts
.2d95					_DTSMNoChange:
.2d95	c9 01		cmp #$01			cmp 	#1
.2d97	f0 fb		beq $2d94			beq 	_DTSMExit
.2d99	a9 20		lda #$20			lda 	#" "
.2d9b	4c 4b 2d	jmp $2d4b			jmp 	ListOutputCharacter

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/detokenise/identifier.asm

.2d9e					DTIdentifier:
.2d9e	a9 00		lda #$00			lda 	#0 							; now text, may need spaces
.2da0	20 8c 2d	jsr $2d8c			jsr 	DTSwitchMode
.2da3	a9 87		lda #$87			lda 	#LTYIdentifier
.2da5	20 4b 2d	jsr $2d4b			jsr 	ListOutputCharacter
.2da8					_DTILoop:
.2da8	b1 02		lda ($02),y			lda 	(codePtr),y 				; output main bit of identifier.
.2daa	c9 2d		cmp #$2d			cmp 	#"-"						; make - back to _
.2dac	d0 02		bne $2db0			bne 	_DTINotUS
.2dae	a9 5f		lda #$5f			lda 	#"_"
.2db0					_DTINotUS:
.2db0	20 4b 2d	jsr $2d4b			jsr 	ListOutputCharacter
.2db3	c8		iny				iny
.2db4	b1 02		lda ($02),y			lda 	(codePtr),y 				; until end identifier marker.
.2db6	c9 3a		cmp #$3a			cmp 	#$3A
.2db8	90 ee		bcc $2da8			bcc 	_DTILoop
.2dba	c8		iny				iny
.2dbb	c9 3a		cmp #$3a			cmp 	#$3A 						; is it integer non array
.2dbd	f0 25		beq $2de4			beq 	_DTIExit 					; no postfix.
.2dbf	48		pha				pha
.2dc0	a9 01		lda #$01			lda  	#1 							; it ends in punctuation
.2dc2	8d 15 0c	sta $0c15			sta 	LastCharacterClass
.2dc5	a9 82		lda #$82			lda 	#LTYPunctuation
.2dc7	20 4b 2d	jsr $2d4b			jsr 	ListOutputCharacter
.2dca	68		pla				pla
.2dcb	c9 3b		cmp #$3b			cmp 	#$3B
.2dcd	f0 10		beq $2ddf			beq 	_DTIArray
.2dcf	4a		lsr a				lsr 	a 							; array flag in C
.2dd0	08		php				php
.2dd1	49 1e		eor #$1e			eor 	#$3C/2 						; check if $
.2dd3	f0 02		beq $2dd7			beq 	_DTIDollar
.2dd5	a9 07		lda #$07			lda 	#"$"^"#" 					; this if #, 0 if $
.2dd7					_DTIDollar:
.2dd7	49 24		eor #$24			eor 	#"$"
.2dd9	20 4b 2d	jsr $2d4b			jsr 	ListOutputCharacter
.2ddc	28		plp				plp
.2ddd	90 05		bcc $2de4			bcc 	_DTIExit
.2ddf					_DTIArray:
.2ddf	a9 28		lda #$28			lda 	#"("
.2de1	20 4b 2d	jsr $2d4b			jsr 	ListOutputCharacter
.2de4					_DTIExit:
.2de4	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/detokenise/token.asm

.2de5					DTDecodeToken:
.2de5	a2 00		ldx #$00			ldx 	#0 							; table number to use
.2de7	b1 02		lda ($02),y			lda 	(codePtr),y
.2de9	c9 84		cmp #$84			cmp 	#$84
.2deb	b0 05		bcs $2df2			bcs 	_DTNotShift
.2ded	29 03		and #$03			and 	#3 							; get the shift 1..3
.2def	0a		asl a				asl 	a 							; put 2 x in X
.2df0	aa		tax				tax
.2df1	c8		iny				iny
.2df2					_DTNotShift:
.2df2	bd ed 30	lda $30ed,x			lda 	TokenTableAddress,x 		; get the token table to use to decode it.
.2df5	85 04		sta $04				sta 	temp0 						; point into temp0
.2df7	bd ee 30	lda $30ee,x			lda 	TokenTableAddress+1,x
.2dfa	85 05		sta $05				sta 	temp0+1
.2dfc	b1 02		lda ($02),y			lda 	(codePtr),y 				; get the token value.
.2dfe	c8		iny				iny 								; consume it.
.2dff	aa		tax				tax
.2e00	98		tya				tya
.2e01	48		pha				pha
.2e02					_DTFindText:
.2e02	e0 86		cpx #$86			cpx 	#$86 						; finished ?
.2e04	f0 11		beq $2e17			beq 	_DTFoundText
.2e06	ca		dex				dex
.2e07	a0 00		ldy #$00			ldy 	#0
.2e09	38		sec				sec
.2e0a	b1 04		lda ($04),y			lda 	(temp0),y
.2e0c	65 04		adc $04				adc 	temp0
.2e0e	85 04		sta $04				sta 	temp0
.2e10	90 f0		bcc $2e02			bcc 	_DTFindText
.2e12	e6 05		inc $05				inc 	temp0+1
.2e14	4c 02 2e	jmp $2e02			jmp 	_DTFindText
.2e17					_DTFoundText:
.2e17	a0 01		ldy #$01			ldy 	#1 							; get first character
.2e19	b1 04		lda ($04),y			lda 	(temp0),y
.2e1b	29 7f		and #$7f			and 	#$7F 						; will have bit 7 set.
.2e1d	c9 41		cmp #$41			cmp 	#"A" 						; check for punctuation.
.2e1f	90 11		bcc $2e32			bcc 	_DTIsPunctuation
.2e21	c9 5b		cmp #$5b			cmp 	#"Z"+1
.2e23	b0 0d		bcs $2e32			bcs 	_DTIsPunctuation
.2e25	a9 00		lda #$00			lda 	#0 							; now text, may need spaces
.2e27	20 8c 2d	jsr $2d8c			jsr 	DTSwitchMode
.2e2a	a9 83		lda #$83			lda 	#LTYKeyword
.2e2c	20 4b 2d	jsr $2d4b			jsr 	ListOutputCharacter
.2e2f	4c 3c 2e	jmp $2e3c			jmp 	_DTPrint
.2e32					_DTIsPunctuation:
.2e32	a9 01		lda #$01			lda 	#1 							; now punctuation, may need spaces
.2e34	20 8c 2d	jsr $2d8c			jsr 	DTSwitchMode
.2e37	a9 82		lda #$82			lda 	#LTYPunctuation
.2e39	20 4b 2d	jsr $2d4b			jsr 	ListOutputCharacter
.2e3c					_DTPrint:
.2e3c	20 34 2d	jsr $2d34			jsr 	DTPrintLengthPrefix 		; print it out.
.2e3f	a0 00		ldy #$00			ldy 	#0 							; get last character
.2e41	b1 04		lda ($04),y			lda 	(temp0),y
.2e43	a8		tay				tay
.2e44	b1 04		lda ($04),y			lda 	(temp0),y
.2e46	29 7f		and #$7f			and 	#$7F 						; will have bit 7 set.
.2e48	c9 41		cmp #$41			cmp 	#"A" 						; check for punctuation.
.2e4a	90 04		bcc $2e50			bcc 	_DTIsNowPunctuation
.2e4c	c9 5b		cmp #$5b			cmp 	#"Z"+1
.2e4e	90 05		bcc $2e55			bcc 	_DTPExit
.2e50					_DTIsNowPunctuation:
.2e50	a9 01		lda #$01			lda 	#1
.2e52	8d 15 0c	sta $0c15			sta		LastCharacterClass
.2e55					_DTPExit:
.2e55	68		pla				pla
.2e56	a8		tay				tay
.2e57	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/search.asm

.0c16					currentSet:
>0c16							.fill 	1
.2e58					TokenSearch:
.2e58	8a		txa				txa
.2e59	48		pha				pha
.2e5a	98		tya				tya
.2e5b	48		pha				pha
.2e5c	a9 00		lda #$00			lda 	#0
.2e5e	8d 16 0c	sta $0c16			sta 	currentSet
.2e61					_TSLoop:
.2e61	ad 16 0c	lda $0c16			lda 	currentSet 					; 2 x currentset in X
.2e64	0a		asl a				asl 	a
.2e65	aa		tax				tax
.2e66	bd ed 30	lda $30ed,x			lda 	TokenTableAddress,x 		; set temp0 to the table address
.2e69	85 04		sta $04				sta 	temp0
.2e6b	bd ee 30	lda $30ee,x			lda 	TokenTableAddress+1,x
.2e6e	85 05		sta $05				sta 	temp0+1
.2e70	20 97 2e	jsr $2e97			jsr 	TokenSearchOne 				; search one table
.2e73	b0 0d		bcs $2e82			bcs 	_TSFound 					; found a token.
.2e75	ee 16 0c	inc $0c16			inc 	currentSet 					; next set
.2e78	ad 16 0c	lda $0c16			lda 	currentSet
.2e7b	c9 04		cmp #$04			cmp 	#4
.2e7d	d0 e2		bne $2e61			bne 	_TSLoop 					; back if not done all four.
.2e7f	18		clc				clc 								; clear carry and exit
.2e80	90 10		bcc $2e92			bcc 	_TSExit
.2e82					_TSFound:
.2e82	48		pha				pha 								; save token
.2e83	ad 16 0c	lda $0c16			lda 	currentSet					; if set zero no shift
.2e86	f0 05		beq $2e8d			beq 	_TSNoShift
.2e88	09 80		ora #$80			ora 	#$80 						; Write as $81-$83
.2e8a	20 43 2f	jsr $2f43			jsr 	TokenWrite
.2e8d					_TSNoShift:
.2e8d	68		pla				pla 								; get token back
.2e8e	20 43 2f	jsr $2f43			jsr 	TokenWrite 					; write it
.2e91	38		sec				sec 								; carry set indicating success
.2e92					_TSExit:
.2e92	68		pla				pla
.2e93	a8		tay				tay
.2e94	68		pla				pla
.2e95	aa		tax				tax
.2e96	60		rts				rts
.2e97					TokenSearchOne:
.2e97	a2 86		ldx #$86			ldx 	#$86 						; current token being tested.
.2e99					_TSOLoop:
.2e99	a0 00		ldy #$00			ldy 	#0
.2e9b	b1 04		lda ($04),y			lda 	(temp0),y 					; get length of token
.2e9d	f0 26		beq $2ec5			beq 	_TSOFail 					; if zero, end of table
.2e9f	cd cf 0a	cmp $0acf			cmp 	convertBuffer 				; length is the same, compare the text matches.
.2ea2	f0 11		beq $2eb5			beq 	_TSOCheckText
.2ea4					_TSONext:
.2ea4	e8		inx				inx 								; bump token
.2ea5	a0 00		ldy #$00			ldy 	#0							; get length
.2ea7	b1 04		lda ($04),y			lda 	(temp0),y
.2ea9	38		sec				sec
.2eaa	65 04		adc $04				adc 	temp0 						; add to temp0 + 1
.2eac	85 04		sta $04				sta 	temp0
.2eae	90 e9		bcc $2e99			bcc 	_TSOLoop
.2eb0	e6 05		inc $05				inc 	temp0+1
.2eb2	4c 99 2e	jmp $2e99			jmp 	_TSOLoop
.2eb5					_TSOCheckText:
.2eb5	a8		tay				tay 								; compare length downto 1.
.2eb6					_TSOCheckLoop:
.2eb6	b1 04		lda ($04),y			lda 	(temp0),y 					; use EOR to compare
.2eb8	59 cf 0a	eor $0acf,y			eor 	convertBuffer,y
.2ebb	29 7f		and #$7f			and 	#$7F 						; ignore bit 7
.2ebd	d0 e5		bne $2ea4			bne 	_TSONext 					; different goto next.
.2ebf	88		dey				dey 								; do all
.2ec0	d0 f4		bne $2eb6			bne 	_TSOCheckLoop
.2ec2	8a		txa				txa 								; return token in A and carry set
.2ec3	38		sec				sec
.2ec4	60		rts				rts
.2ec5					_TSOFail:
.2ec5	18		clc				clc
.2ec6	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/test.asm

.2ec7					TokTest:
.2ec7	a9 e4		lda #$e4			lda 	#(TokenText1) & $FF
.2ec9	85 02		sta $02				sta 	codePtr
.2ecb	a9 2e		lda #$2e			lda 	#(TokenText1) >> 8
.2ecd	85 03		sta $03				sta 	1+(codePtr)
.2ecf	20 e4 2e	jsr $2ee4				jsr 	Tokenise
.2ed2	a2 00		ldx #$00	TokStop:	ldx 	#0
.2ed4	bd e4 2e	lda $2ee4,x	_TokCheck:	lda 	TokenBytes1,x
.2ed7	dd 1a 0c	cmp $0c1a,x				cmp 	tokenBuffer,x
.2eda	d0 fe		bne $2eda	_TokFail:	bne 	_TokFail
.2edc	e8		inx					inx
.2edd	c9 80		cmp #$80				cmp 	#$80
.2edf	d0 f3		bne $2ed4				bne 	_TokCheck
.2ee1	4c ff ff	jmp $ffff				jmp 	$FFFF

;******  Processing file: tokeniser/tokenise/../../generated/toktest.inc

.2ee4					TokenText1:
.2ee4					TokenBytes1:

;******  Return to file: tokeniser/tokenise/test.asm


;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokenise.asm

.0c17					tokenHeader:
>0c17							.fill 	3
.0c1a					tokenBuffer:
>0c1a							.fill 	256
.0d1a					tokenBufferIndex:
>0d1a							.fill 	1
.2ee4					Tokenise:
.2ee4	20 5c 2f	jsr $2f5c			jsr 	TokeniseMakeASCIIZ 			; convert to ASCIIZ string.
.2ee7					TokeniseASCIIZ:
.2ee7	20 6d 2f	jsr $2f6d			jsr 	TokeniseFixCase 			; remove controls and lower case outside quotes.
.2eea	a9 00		lda #$00			lda 	#0 							; reset the token buffer index
.2eec	8d 1a 0d	sta $0d1a			sta 	tokenBufferIndex
.2eef	a8		tay				tay 								; start pointer
.2ef0	a9 80		lda #$80			lda 	#$80 						; empty token buffer ($80 ends it)
.2ef2	8d 1a 0c	sta $0c1a			sta 	tokenBuffer
.2ef5					_TokLoop:
.2ef5	b1 02		lda ($02),y			lda 	(codePtr),y 				; get next character
.2ef7	f0 46		beq $2f3f			beq 	_TokExit 					; if zero, then exit.
.2ef9	c8		iny				iny 								; skip over spaces.
.2efa	c9 20		cmp #$20			cmp 	#" "
.2efc	f0 f7		beq $2ef5			beq 	_TokLoop
.2efe	88		dey				dey 								; point back to character.
.2eff	c9 26		cmp #$26			cmp 	#"&"						; Hexadecimal constant.
.2f01	f0 18		beq $2f1b			beq 	_TokHexConst
.2f03	c9 22		cmp #$22			cmp 	#'"'						; Quoted String
.2f05	f0 23		beq $2f2a			beq 	_TokQString
.2f07	c9 5b		cmp #$5b			cmp 	#"Z"+1 						; > 'Z' is punctuation
.2f09	b0 26		bcs $2f31			bcs 	_TokPunctuation
.2f0b	c9 41		cmp #$41			cmp 	#"A" 						; A..Z identifier
.2f0d	b0 29		bcs $2f38			bcs 	_TokIdentifier
.2f0f	c9 3a		cmp #$3a			cmp 	#"9"+1
.2f11	b0 1e		bcs $2f31			bcs 	_TokPunctuation 			; between 9 and A exclusive, punctuation
.2f13	c9 30		cmp #$30			cmp 	#"0"
.2f15	90 1a		bcc $2f31			bcc 	_TokPunctuation 			; < 0, punctuation.
.2f17	a9 0a		lda #$0a			lda 	#10  						; 0..9 constant in base 10.
.2f19	d0 08		bne $2f23			bne 	_TokConst
.2f1b					_TokHexConst:
.2f1b	c8		iny				iny									; consume token.
.2f1c	a9 c5		lda #$c5			lda 	#TKW_AMP 					; Write ampersand token out
.2f1e	20 43 2f	jsr $2f43			jsr 	TokenWrite
.2f21	a9 10		lda #$10			lda 	#16
.2f23					_TokConst:
.2f23	20 2b 30	jsr $302b			jsr 	TokeniseInteger
.2f26	b0 cd		bcs $2ef5			bcs 	_TokLoop
.2f28	90 17		bcc $2f41			bcc 	_TokFail
.2f2a					_TokQString:
.2f2a	20 c1 30	jsr $30c1			jsr 	TokeniseString
.2f2d	b0 c6		bcs $2ef5			bcs 	_TokLoop
.2f2f	90 10		bcc $2f41			bcc 	_TokFail
.2f31					_TokPunctuation:
.2f31	20 a0 30	jsr $30a0			jsr 	TokenisePunctuation
.2f34	b0 bf		bcs $2ef5			bcs 	_TokLoop
.2f36	90 09		bcc $2f41			bcc 	_TokFail
.2f38					_TokIdentifier:
.2f38	20 9c 2f	jsr $2f9c			jsr 	TokeniseIdentifier
.2f3b	b0 b8		bcs $2ef5			bcs 	_TokLoop
.2f3d	90 02		bcc $2f41			bcc 	_TokFail
.2f3f					_TokExit:
.2f3f	38		sec				sec
.2f40	60		rts				rts
.2f41					_TokFail:
.2f41	18		clc				clc
.2f42	60		rts				rts
.2f43					TokenWrite:
.2f43	85 0c		sta $0c				sta 	tempShort 					; save XA
.2f45	48		pha				pha
.2f46	8a		txa				txa
.2f47	48		pha				pha
.2f48	a5 0c		lda $0c				lda 	tempShort
.2f4a	ae 1a 0d	ldx $0d1a			ldx 	tokenBufferIndex 			; geet index
.2f4d	9d 1a 0c	sta $0c1a,x			sta 	tokenBuffer,x 				; write byte to buffer
.2f50	a9 80		lda #$80			lda 	#TOK_EOL 					; pre-emptively write EOL marker after
.2f52	9d 1b 0c	sta $0c1b,x			sta 	tokenBuffer+1,x
.2f55	ee 1a 0d	inc $0d1a			inc 	tokenBufferIndex 			; bump index
.2f58	68		pla				pla
.2f59	aa		tax				tax
.2f5a	68		pla				pla
.2f5b	60		rts				rts
.2f5c					TokeniseMakeASCIIZ:
.2f5c	a0 00		ldy #$00			ldy 	#0							; get length of string.
.2f5e	b1 02		lda ($02),y			lda 	(codePtr),y
.2f60	a8		tay				tay
.2f61	c8		iny				iny 								; +1, the NULL goes here.
.2f62	a9 00		lda #$00			lda 	#0
.2f64	91 02		sta ($02),y			sta 	(codePtr),y 				; write the trailing NULL.
.2f66	e6 02		inc $02				inc 	codePtr 					; bump the pointer.
.2f68	d0 02		bne $2f6c			bne 	_TMKAExit
.2f6a	e6 03		inc $03				inc 	codePtr+1
.2f6c					_TMKAExit:
.2f6c	60		rts				rts
.2f6d					TokeniseFixCase:
.2f6d	a0 00		ldy #$00			ldy 	#0 							; position in buffer.
.2f6f	a2 01		ldx #$01			ldx 	#1 							; bit 0 of this is 'in quotes'
.2f71					_TFCFlipQ:
.2f71	8a		txa				txa
.2f72	49 01		eor #$01			eor 	#1
.2f74	aa		tax				tax
.2f75					_TFCLoop:
.2f75	b1 02		lda ($02),y			lda 	(codePtr),y 				; get character
.2f77	f0 22		beq $2f9b			beq 	_TFCExit 					; if zero exit.
.2f79	c9 20		cmp #$20			cmp 	#32 						; if control
.2f7b	90 1a		bcc $2f97			bcc 	_TFCControl
.2f7d	c8		iny				iny 								; preconsume
.2f7e	c9 22		cmp #$22			cmp 	#'"'
.2f80	f0 ef		beq $2f71			beq 	_TFCFlipQ
.2f82	c9 61		cmp #$61			cmp 	#"a"						; check if L/C
.2f84	90 ef		bcc $2f75			bcc 	_TFCLoop
.2f86	c9 7b		cmp #$7b			cmp 	#"z"+1
.2f88	b0 eb		bcs $2f75			bcs 	_TFCLoop
.2f8a	e0 00		cpx #$00			cpx 	#0 							; in quotes, if so, leave alone.
.2f8c	d0 e7		bne $2f75			bne 	_TFCLoop
.2f8e	88		dey				dey
.2f8f	49 20		eor #$20			eor 	#"A"^"a"					; make U/C
.2f91					_TFCWrite:
.2f91	91 02		sta ($02),y			sta 	(codePtr),y
.2f93	c8		iny				iny
.2f94	4c 75 2f	jmp $2f75			jmp 	_TFCLoop
.2f97					_TFCControl:
.2f97	a9 20		lda #$20			lda 	#" "
.2f99	d0 f6		bne $2f91			bne 	_TFCWrite
.2f9b					_TFCExit:
.2f9b	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokident.asm

.2f9c					TokeniseIdentifier:
.2f9c	a2 00		ldx #$00			ldx 	#0
.2f9e					_TICopyID:
.2f9e	b1 02		lda ($02),y			lda 	(codePtr),y					; get characters
.2fa0	c9 5f		cmp #$5f			cmp 	#"_" 						; underscore converted to minus internally.
.2fa2	f0 16		beq $2fba			beq 	_TICopyUnderscore
.2fa4	c9 2e		cmp #$2e			cmp 	#"."
.2fa6	f0 14		beq $2fbc			beq 	_TICopyIn
.2fa8	c9 30		cmp #$30			cmp 	#"0"
.2faa	90 1b		bcc $2fc7			bcc 	_TIEndCopy
.2fac	c9 3a		cmp #$3a			cmp 	#"9"+1
.2fae	90 0c		bcc $2fbc			bcc 	_TICopyIn
.2fb0	c9 41		cmp #$41			cmp 	#"A"
.2fb2	90 13		bcc $2fc7			bcc 	_TIEndCopy
.2fb4	c9 5b		cmp #$5b			cmp 	#"Z"+1
.2fb6	b0 0f		bcs $2fc7			bcs		_TIEndCopy
.2fb8	90 02		bcc $2fbc			bcc 	_TICopyIn
.2fba					_TICopyUnderScore:
.2fba	a9 2d		lda #$2d			lda 	#"-"						; _ is mapped to -
.2fbc					_TICopyIn:
.2fbc	e8		inx				inx 								; write into buffer in 7 bit ASCII form
.2fbd	9d cf 0a	sta $0acf,x			sta 	convertBuffer,x
.2fc0	8e cf 0a	stx $0acf			stx 	convertBuffer
.2fc3	c8		iny				iny 								; next character
.2fc4	4c 9e 2f	jmp $2f9e			jmp 	_TICopyID 					; loop round
.2fc7					_TIEndCopy:
.2fc7	a9 24		lda #$24			lda 	#"$"
.2fc9	20 1e 30	jsr $301e			jsr 	TIDCheckCopy
.2fcc	a9 23		lda #$23			lda 	#"#"
.2fce	20 1e 30	jsr $301e			jsr 	TIDCheckCopy
.2fd1	a9 28		lda #$28			lda 	#"("
.2fd3	20 1e 30	jsr $301e			jsr 	TIDCheckCopy
.2fd6	20 58 2e	jsr $2e58			jsr 	TokenSearch 				; is it a token
.2fd9	b0 41		bcs $301c			bcs 	_TIExit 					; if so, then exit.
.2fdb	98		tya				tya
.2fdc	48		pha				pha
.2fdd	a0 3a		ldy #$3a			ldy 	#$3A 						; default type.
.2fdf	ae cf 0a	ldx $0acf			ldx 	convertBuffer 				; is last character (
.2fe2	bd cf 0a	lda $0acf,x			lda 	convertBuffer,x
.2fe5	c9 28		cmp #$28			cmp 	#"("
.2fe7	d0 02		bne $2feb			bne 	_TINotArray
.2fe9	ca		dex				dex 								; yes, remove it and convert to array.
.2fea	c8		iny				iny
.2feb					_TINotArray:
.2feb	bd cf 0a	lda $0acf,x			lda 	convertBuffer,x 			; check for $
.2fee	c9 24		cmp #$24			cmp 	#"$"
.2ff0	d0 03		bne $2ff5			bne 	_TINotString
.2ff2	ca		dex				dex
.2ff3	c8		iny				iny
.2ff4	c8		iny				iny
.2ff5					_TINotString:
.2ff5	bd cf 0a	lda $0acf,x			lda 	convertBuffer,x 			; check for #
.2ff8	c9 23		cmp #$23			cmp 	#"#"
.2ffa	d0 05		bne $3001			bne 	_TINotFloat
.2ffc	ca		dex				dex
.2ffd	c8		iny				iny
.2ffe	c8		iny				iny
.2fff	c8		iny				iny
.3000	c8		iny				iny
.3001					_TINotFloat:
.3001	e8		inx				inx 								; write end marker for identifier.
.3002	98		tya				tya
.3003	9d cf 0a	sta $0acf,x			sta 	convertBuffer,x
.3006	8e cf 0a	stx $0acf			stx 	convertBuffer 				; update length.
.3009	a2 01		ldx #$01			ldx 	#1
.300b					_TIOutput:
.300b	bd cf 0a	lda $0acf,x			lda 	convertBuffer,x
.300e	29 3f		and #$3f			and 	#$3F
.3010	48		pha				pha
.3011	20 43 2f	jsr $2f43			jsr 	TokenWrite
.3014	e8		inx				inx
.3015	68		pla				pla
.3016	c9 3a		cmp #$3a			cmp 	#$3A
.3018	90 f1		bcc $300b			bcc 	_TIOutput
.301a	68		pla				pla
.301b	a8		tay				tay
.301c					_TIExit:
.301c	38		sec				sec 								; this can't fail.
.301d	60		rts				rts
.301e					TIDCheckCopy:
.301e	d1 02		cmp ($02),y			cmp 	(codePtr),y
.3020	d0 08		bne $302a			bne 	_TIDCCExit
.3022	e8		inx				inx
.3023	9d cf 0a	sta $0acf,x			sta 	convertBuffer,x
.3026	8e cf 0a	stx $0acf			stx 	convertBuffer
.3029	c8		iny				iny
.302a					_TIDCCExit:
.302a	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokinteger.asm

.302b					TokeniseInteger:
.302b	85 06		sta $06				sta 	temp1 						; save base
.302d	a2 00		ldx #$00			ldx 	#0							; count of chars so far
.302f	8e cf 0a	stx $0acf			stx 	convertBuffer
.3032					_TIGetChars:
.3032	b1 02		lda ($02),y			lda 	(codePtr),y 				; check character is numeric
.3034	c9 30		cmp #$30			cmp 	#"0"
.3036	90 1f		bcc $3057			bcc 	_TIEndGet
.3038	c9 3a		cmp #$3a			cmp 	#"9"+1
.303a	90 10		bcc $304c			bcc 	_TIHaveChar
.303c	a5 06		lda $06				lda 	temp1 						; fail if not hex mode
.303e	c9 0a		cmp #$0a			cmp 	#10
.3040	f0 15		beq $3057			beq 	_TIEndGet
.3042	b1 02		lda ($02),y			lda 	(codePtr),y 				; check legitimate hex.
.3044	c9 41		cmp #$41			cmp 	#"A"
.3046	90 0f		bcc $3057			bcc 	_TIEndGet
.3048	c9 5b		cmp #$5b			cmp 	#"Z"+1
.304a	b0 0b		bcs $3057			bcs 	_TIEndGet
.304c					_TIHaveChar:
.304c	e8		inx				inx 								; write into buffer.
.304d	8e cf 0a	stx $0acf			stx 	convertBuffer
.3050	9d cf 0a	sta $0acf,x			sta 	convertBuffer,x
.3053	c8		iny				iny 								; next char
.3054	4c 32 30	jmp $3032			jmp 	_TIGetChars
.3057					_TIEndGet:
.3057	e0 00		cpx #$00			cpx 	#0 							; no char acquired.
.3059	f0 1c		beq $3077			beq 	_TIFail
.305b	98		tya				tya
.305c	48		pha				pha
.305d	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.305f	85 04		sta $04				sta 	temp0
.3061	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.3063	85 05		sta $05				sta 	1+(temp0)
.3065	a9 00		lda #$00			lda 	#0 							; stack 0
.3067	a4 06		ldy $06				ldy 	temp1 						; base Y
.3069	a2 14		ldx #$14		ldx	#20
.306b	20 57 23	jsr $2357		jsr	mainHandler
.306e	68		pla				pla
.306f	a8		tay				tay
.3070	90 05		bcc $3077			bcc 	_TIFail 					; didn't convert.
.3072	20 79 30	jsr $3079			jsr 	TIRecursiveOut 				; recursive output ?
.3075	38		sec				sec
.3076	60		rts				rts
.3077					_TIFail:
.3077	18		clc				clc
.3078	60		rts				rts
.3079					TIRecursiveOut:
.3079	a5 48		lda $48				lda 	esInt0 						; get value to output after possible recursion
.307b	29 3f		and #$3f			and 	#$3F
.307d	09 40		ora #$40			ora 	#$40
.307f	48		pha				pha
.3080	a5 48		lda $48				lda 	esInt0 						; are we recursing ?
.3082	29 c0		and #$c0			and 	#$C0
.3084	05 50		ora $50				ora 	esInt1
.3086	05 58		ora $58				ora 	esInt2
.3088	05 60		ora $60				ora 	esInt3
.308a	f0 10		beq $309c			beq 	_TIRONoRecursion
.308c	a2 06		ldx #$06			ldx 	#6 							; shift right x 6
.308e					_TIROShift:
.308e	46 60		lsr $60				lsr 	esInt3
.3090	66 58		ror $58				ror 	esInt2
.3092	66 50		ror $50				ror 	esInt1
.3094	66 48		ror $48				ror 	esInt0
.3096	ca		dex				dex
.3097	d0 f5		bne $308e			bne 	_TIROShift
.3099	20 79 30	jsr $3079			jsr 	TIRecursiveOut 				; call recursively
.309c					_TIRONoRecursion:
.309c	68		pla				pla 								; pull the old bit.
.309d	4c 43 2f	jmp $2f43			jmp 	TokenWrite

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokpunct.asm

.30a0					TokenisePunctuation:
.30a0	b1 02		lda ($02),y			lda	 	(codePtr),y 				; copy next 2 chars into convertBuffer
.30a2	8d d0 0a	sta $0ad0			sta 	convertBuffer+1
.30a5	c8		iny				iny
.30a6	b1 02		lda ($02),y			lda 	(codePtr),y
.30a8	8d d1 0a	sta $0ad1			sta 	convertBuffer+2
.30ab	c8		iny				iny 								; Y is +2
.30ac	a9 02		lda #$02			lda 	#2 							; 2 character string.
.30ae	8d cf 0a	sta $0acf			sta 	convertBuffer
.30b1	20 58 2e	jsr $2e58			jsr 	TokenSearch 				; search for that token.
.30b4	b0 0a		bcs $30c0			bcs 	_TIFound
.30b6	ce cf 0a	dec $0acf			dec 	convertBuffer 				; make it a 1 character string
.30b9	88		dey				dey 								; Y is now +1
.30ba	20 58 2e	jsr $2e58			jsr 	TokenSearch 				; search for that token.
.30bd	b0 01		bcs $30c0			bcs 	_TIFound
.30bf	88		dey				dey 								; Y is now +0, carry clear indicating failure.
.30c0					_TIFound:
.30c0	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokstring.asm

.30c1					TokeniseString:
.30c1	c8		iny				iny 								; skip opening quote
.30c2	a2 ff		ldx #$ff			ldx 	#255 						; count length of string.
.30c4	84 04		sty $04				sty 	temp0 						; save start.
.30c6					_TSGetLength:
.30c6	b1 02		lda ($02),y			lda 	(codePtr),y 				; get next
.30c8	f0 21		beq $30eb			beq 	_TSFail						; end of line, fail
.30ca	c8		iny				iny
.30cb	e8		inx				inx
.30cc	c9 22		cmp #$22			cmp 	#'"' 						; until end quote found.
.30ce	d0 f6		bne $30c6			bne 	_TSGetLength
.30d0	a9 85		lda #$85			lda 	#TOK_STR 					; write string token out
.30d2	20 43 2f	jsr $2f43			jsr 	TokenWrite
.30d5	8a		txa				txa 								; output length
.30d6	20 43 2f	jsr $2f43			jsr 	TokenWrite
.30d9	a4 04		ldy $04				ldy 	temp0 						; get original position
.30db	e0 00		cpx #$00			cpx 	#0 							; check ended
.30dd	f0 09		beq $30e8			beq 	_TSExit
.30df					_TSOutput:
.30df	b1 02		lda ($02),y			lda 	(codePtr),y					; output character
.30e1	20 43 2f	jsr $2f43			jsr 	TokenWrite
.30e4	c8		iny				iny
.30e5	ca		dex				dex
.30e6	d0 f7		bne $30df			bne 	_TSOutput
.30e8					_TSExit:
.30e8	c8		iny				iny 								; skip ending quote
.30e9	38		sec				sec 								; return CS.
.30ea	60		rts				rts
.30eb					_TSFail:
.30eb	18		clc				clc
.30ec	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokentext.asm

.30ed					TokenTableAddress:
>30ed	f5 30						.word 	Group0Text
>30ef	a6 32						.word 	Group1Text
>30f1	df 32						.word 	Group2Text
>30f3	ec 32						.word 	Group3Text

;******  Processing file: tokeniser/../generated/tokentext0.inc

.30f5					Group0Text:
>30f5	03 41 4e c4				.byte $03,$41,$4e,$c4                  ; $86 and
>30f9	02 4f d2				.byte $02,$4f,$d2                      ; $87 or
>30fc	03 58 4f d2				.byte $03,$58,$4f,$d2                  ; $88 xor
>3100	02 3e bd				.byte $02,$3e,$bd                      ; $89 >=
>3103	02 3c bd				.byte $02,$3c,$bd                      ; $8a <=
>3106	01 be					.byte $01,$be                          ; $8b >
>3108	01 bc					.byte $01,$bc                          ; $8c <
>310a	01 bd					.byte $01,$bd                          ; $8d =
>310c	02 3c be				.byte $02,$3c,$be                      ; $8e <>
>310f	01 ab					.byte $01,$ab                          ; $8f +
>3111	01 ad					.byte $01,$ad                          ; $90 -
>3113	02 3e be				.byte $02,$3e,$be                      ; $91 >>
>3116	02 3c bc				.byte $02,$3c,$bc                      ; $92 <<
>3119	01 aa					.byte $01,$aa                          ; $93 *
>311b	01 af					.byte $01,$af                          ; $94 /
>311d	03 4d 4f c4				.byte $03,$4d,$4f,$c4                  ; $95 mod
>3121	01 de					.byte $01,$de                          ; $96 ^
>3123	01 a1					.byte $01,$a1                          ; $97 !
>3125	01 bf					.byte $01,$bf                          ; $98 ?
>3127	06 52 45 50 45 41 d4			.byte $06,$52,$45,$50,$45,$41,$d4      ; $99 repeat
>312e	05 57 48 49 4c c5			.byte $05,$57,$48,$49,$4c,$c5          ; $9a while
>3134	03 46 4f d2				.byte $03,$46,$4f,$d2                  ; $9b for
>3138	02 49 c6				.byte $02,$49,$c6                      ; $9c if
>313b	07 44 45 46 50 52 4f c3			.byte $07,$44,$45,$46,$50,$52,$4f,$c3  ; $9d defproc
>3143	05 55 4e 54 49 cc			.byte $05,$55,$4e,$54,$49,$cc          ; $9e until
>3149	04 57 45 4e c4				.byte $04,$57,$45,$4e,$c4              ; $9f wend
>314e	04 4e 45 58 d4				.byte $04,$4e,$45,$58,$d4              ; $a0 next
>3153	04 54 48 45 ce				.byte $04,$54,$48,$45,$ce              ; $a1 then
>3158	05 45 4e 44 49 c6			.byte $05,$45,$4e,$44,$49,$c6          ; $a2 endif
>315e	07 45 4e 44 50 52 4f c3			.byte $07,$45,$4e,$44,$50,$52,$4f,$c3  ; $a3 endproc
>3166	01 a8					.byte $01,$a8                          ; $a4 (
>3168	04 4c 45 4e a8				.byte $04,$4c,$45,$4e,$a8              ; $a5 len(
>316d	04 53 47 4e a8				.byte $04,$53,$47,$4e,$a8              ; $a6 sgn(
>3172	04 41 42 53 a8				.byte $04,$41,$42,$53,$a8              ; $a7 abs(
>3177	07 52 41 4e 44 4f 4d a8			.byte $07,$52,$41,$4e,$44,$4f,$4d,$a8  ; $a8 random(
>317f	04 50 41 47 c5				.byte $04,$50,$41,$47,$c5              ; $a9 page
>3184	04 54 52 55 c5				.byte $04,$54,$52,$55,$c5              ; $aa true
>3189	05 46 41 4c 53 c5			.byte $05,$46,$41,$4c,$53,$c5          ; $ab false
>318f	04 4d 49 4e a8				.byte $04,$4d,$49,$4e,$a8              ; $ac min(
>3194	04 4d 41 58 a8				.byte $04,$4d,$41,$58,$a8              ; $ad max(
>3199	04 53 59 53 a8				.byte $04,$53,$59,$53,$a8              ; $ae sys(
>319e	06 54 49 4d 45 52 a8			.byte $06,$54,$49,$4d,$45,$52,$a8      ; $af timer(
>31a5	06 45 56 45 4e 54 a8			.byte $06,$45,$56,$45,$4e,$54,$a8      ; $b0 event(
>31ac	04 47 45 54 a8				.byte $04,$47,$45,$54,$a8              ; $b1 get(
>31b1	06 49 4e 4b 45 59 a8			.byte $06,$49,$4e,$4b,$45,$59,$a8      ; $b2 inkey(
>31b8	06 41 4c 4c 4f 43 a8			.byte $06,$41,$4c,$4c,$4f,$43,$a8      ; $b3 alloc(
>31bf	05 43 48 52 24 a8			.byte $05,$43,$48,$52,$24,$a8          ; $b4 chr$(
>31c5	06 4c 45 46 54 24 a8			.byte $06,$4c,$45,$46,$54,$24,$a8      ; $b5 left$(
>31cc	05 4d 49 44 24 a8			.byte $05,$4d,$49,$44,$24,$a8          ; $b6 mid$(
>31d2	07 52 49 47 48 54 24 a8			.byte $07,$52,$49,$47,$48,$54,$24,$a8  ; $b7 right$(
>31da	05 53 54 52 24 a8			.byte $05,$53,$54,$52,$24,$a8          ; $b8 str$(
>31e0	04 56 41 4c a8				.byte $04,$56,$41,$4c,$a8              ; $b9 val(
>31e5	05 50 45 45 4b a8			.byte $05,$50,$45,$45,$4b,$a8          ; $ba peek(
>31eb	05 44 45 45 4b a8			.byte $05,$44,$45,$45,$4b,$a8          ; $bb deek(
>31f1	05 4c 45 45 4b a8			.byte $05,$4c,$45,$45,$4b,$a8          ; $bc leek(
>31f7	04 41 53 43 a8				.byte $04,$41,$53,$43,$a8              ; $bd asc(
>31fc	04 49 4e 54 a8				.byte $04,$49,$4e,$54,$a8              ; $be int(
>3201	06 46 4c 4f 41 54 a8			.byte $06,$46,$4c,$4f,$41,$54,$a8      ; $bf float(
>3208	06 49 53 56 41 4c a8			.byte $06,$49,$53,$56,$41,$4c,$a8      ; $c0 isval(
>320f	07 55 50 50 45 52 24 a8			.byte $07,$55,$50,$50,$45,$52,$24,$a8  ; $c1 upper$(
>3217	07 4c 4f 57 45 52 24 a8			.byte $07,$4c,$4f,$57,$45,$52,$24,$a8  ; $c2 lower$(
>321f	01 c0					.byte $01,$c0                          ; $c3 @
>3221	01 fe					.byte $01,$fe                          ; $c4 ~
>3223	01 a6					.byte $01,$a6                          ; $c5 &
>3225	01 a9					.byte $01,$a9                          ; $c6 )
>3227	01 ba					.byte $01,$ba                          ; $c7 :
>3229	01 ac					.byte $01,$ac                          ; $c8 ,
>322b	01 bb					.byte $01,$bb                          ; $c9 ;
>322d	01 a7					.byte $01,$a7                          ; $ca '
>322f	02 54 cf				.byte $02,$54,$cf                      ; $cb to
>3232	04 53 54 45 d0				.byte $04,$53,$54,$45,$d0              ; $cc step
>3237	04 50 52 4f c3				.byte $04,$50,$52,$4f,$c3              ; $cd proc
>323c	05 4c 4f 43 41 cc			.byte $05,$4c,$4f,$43,$41,$cc          ; $ce local
>3242	03 44 49 cd				.byte $03,$44,$49,$cd                  ; $cf dim
>3246	03 52 45 cd				.byte $03,$52,$45,$cd                  ; $d0 rem
>324a	03 4c 45 d4				.byte $03,$4c,$45,$d4                  ; $d1 let
>324e	05 49 4e 50 55 d4			.byte $05,$49,$4e,$50,$55,$d4          ; $d2 input
>3254	04 45 4c 53 c5				.byte $04,$45,$4c,$53,$c5              ; $d3 else
>3259	03 56 44 d5				.byte $03,$56,$44,$d5                  ; $d4 vdu
>325d	05 50 52 49 4e d4			.byte $05,$50,$52,$49,$4e,$d4          ; $d5 print
>3263	04 47 4f 54 cf				.byte $04,$47,$4f,$54,$cf              ; $d6 goto
>3268	05 47 4f 53 55 c2			.byte $05,$47,$4f,$53,$55,$c2          ; $d7 gosub
>326e	06 52 45 54 55 52 ce			.byte $06,$52,$45,$54,$55,$52,$ce      ; $d8 return
>3275	04 44 41 54 c1				.byte $04,$44,$41,$54,$c1              ; $d9 data
>327a	06 41 53 53 45 52 d4			.byte $06,$41,$53,$53,$45,$52,$d4      ; $da assert
>3281	04 50 4f 4b c5				.byte $04,$50,$4f,$4b,$c5              ; $db poke
>3286	04 44 4f 4b c5				.byte $04,$44,$4f,$4b,$c5              ; $dc doke
>328b	04 4c 4f 4b c5				.byte $04,$4c,$4f,$4b,$c5              ; $dd loke
>3290	03 49 4e cb				.byte $03,$49,$4e,$cb                  ; $de ink
>3294	05 50 41 50 45 d2			.byte $05,$50,$41,$50,$45,$d2          ; $df paper
>329a	03 43 4c d3				.byte $03,$43,$4c,$d3                  ; $e0 cls
>329e	06 4c 4f 43 41 54 c5			.byte $06,$4c,$4f,$43,$41,$54,$c5      ; $e1 locate
>32a5	00					.byte $00

;******  Return to file: tokeniser/tokentext.asm


;******  Processing file: tokeniser/../generated/tokentext1.inc

.32a6					Group1Text:
>32a6	05 43 4c 45 41 d2			.byte $05,$43,$4c,$45,$41,$d2          ; $86 clear
>32ac	04 4c 4f 41 c4				.byte $04,$4c,$4f,$41,$c4              ; $87 load
>32b1	04 53 41 56 c5				.byte $04,$53,$41,$56,$c5              ; $88 save
>32b6	04 4c 49 53 d4				.byte $04,$4c,$49,$53,$d4              ; $89 list
>32bb	03 4e 45 d7				.byte $03,$4e,$45,$d7                  ; $8a new
>32bf	03 52 55 ce				.byte $03,$52,$55,$ce                  ; $8b run
>32c3	04 52 45 41 c4				.byte $04,$52,$45,$41,$c4              ; $8c read
>32c8	07 52 45 53 54 4f 52 c5			.byte $07,$52,$45,$53,$54,$4f,$52,$c5  ; $8d restore
>32d0	03 45 4e c4				.byte $03,$45,$4e,$c4                  ; $8e end
>32d4	04 53 54 4f d0				.byte $04,$53,$54,$4f,$d0              ; $8f stop
>32d9	04 58 45 4d d5				.byte $04,$58,$45,$4d,$d5              ; $90 xemu
>32de	00					.byte $00

;******  Return to file: tokeniser/tokentext.asm


;******  Processing file: tokeniser/../generated/tokentext2.inc

.32df					Group2Text:
>32df	05 56 50 4f 4b c5			.byte $05,$56,$50,$4f,$4b,$c5          ; $86 vpoke
>32e5	05 56 44 4f 4b c5			.byte $05,$56,$44,$4f,$4b,$c5          ; $87 vdoke
>32eb	00					.byte $00

;******  Return to file: tokeniser/tokentext.asm


;******  Processing file: tokeniser/../generated/tokentext3.inc

.32ec					Group3Text:
>32ec	06 56 50 45 45 4b a8			.byte $06,$56,$50,$45,$45,$4b,$a8      ; $86 vpeek(
>32f3	06 56 44 45 45 4b a8			.byte $06,$56,$44,$45,$45,$4b,$a8      ; $87 vdeek(
>32fa	00					.byte $00

;******  Return to file: tokeniser/tokentext.asm


;******  Return to file: tokeniser/tokeniser.asm

.32fb					tokeniserHandler:
.32fb	7c fe 32	jmp ($32fe,x)			jmp 	(tokeniserVectors,x)
.32fe					tokeniserVectors:
>32fe	6a 2c					.word Detokenise           ; index 0
>3300	60 2c					.word ListLine             ; index 2
>3302	e4 2e					.word Tokenise             ; index 4
>3304	e7 2e					.word TokeniseASCIIZ       ; index 6

;******  Return to file: basic.asm

.3306					section_end_tokeniser:
.3306					section_start_variable:

;******  Processing file: variable/variable.asm


;******  Processing file: variable/access.asm

.0d1b					varHash:
>0d1b							.fill	1
.0d1c					varType:
>0d1c							.fill 	1
.0d1d					varEnd:
>0d1d							.fill 	1
.007c					hashList:
>007c							.fill 	2
.3306					AccessVariable:
.3306	aa		tax				tax 								; stack in X
.3307	c8		iny				iny									; look at second character
.3308	b1 02		lda ($02),y			lda 	(codePtr),y
.330a	88		dey				dey
.330b	c9 3a		cmp #$3a			cmp 	#TYPE_INT 					; is it the integer marker ($3A)
.330d	d0 15		bne $3324			bne 	_AVLong 					; no, always use the hash tables.
.330f	b1 02		lda ($02),y			lda 	(codePtr),y 				; this is the 6 bit ASCII of A-Z 1-26
.3311	38		sec				sec 	 							; make it 0-25
.3312	e9 01		sbc #$01			sbc 	#1
.3314	0a		asl a				asl 	a 							; x 4 as 4 bytes / variable.
.3315	0a		asl a				asl 	a
.3316	95 48		sta $48,x			sta 	esInt0,x
.3318	a9 0a		lda #$0a			lda 	#SingleLetterVar >> 8 		; make it an address
.331a	95 50		sta $50,x			sta 	esInt1,x
.331c	a9 80		lda #$80			lda 	#$80 						; type is an integer reference.
.331e	95 40		sta $40,x			sta 	esType,x
.3320	c8		iny				iny 								; skip over the variable reference in the code.
.3321	c8		iny				iny  								; (1 letter, 1 type)
.3322	8a		txa				txa 								; stack in A to return.
.3323	60		rts				rts
.3324					_AVLong:
.3324	8a		txa				txa
.3325	48		pha				pha
.3326	20 6d 33	jsr $336d			jsr 	AccessSetup 				; set up the basic information we need for later
.3329	20 99 35	jsr $3599			jsr 	FindVariable 				; does the variable exist already ?
.332c	b0 0e		bcs $333c			bcs 	_AVFound 					; yes, then its found
.332e	ad 1c 0d	lda $0d1c			lda 	varType 					; otherwise, is the variable type an array
.3331	4a		lsr a				lsr 	a
.3332	90 05		bcc $3339			bcc 	_AVCanCreate 				; if not, we can autocreate
.3334	a2 15		ldx #$15			ldx 	#ErrorID_noauto
.3336	20 b9 24	jsr $24b9		jsr	errorHandler
.3339					_AVCanCreate:
.3339	20 20 34	jsr $3420			jsr 	CreateVariable 				; variable does not exist, create it.
.333c					_AVFound:
.333c	68		pla				pla
.333d	aa		tax				tax
.333e	18		clc				clc 								; copy temp0 (variable record address)
.333f	a5 04		lda $04				lda 	temp0 						; +5 (to point to the data)
.3341	69 05		adc #$05			adc 	#5 							; (first 5 bytes are link, name, hash)
.3343	95 48		sta $48,x			sta 	esInt0,x
.3345	a5 05		lda $05				lda 	temp0+1
.3347	69 00		adc #$00			adc 	#0
.3349	95 50		sta $50,x			sta 	esInt1,x
.334b	a9 00		lda #$00			lda 	#0
.334d	95 58		sta $58,x			sta 	esInt2,x
.334f	95 60		sta $60,x			sta 	esInt3,x
.3351	ac 1c 0d	ldy $0d1c			ldy 	varType 					; get the type ID from the type.
.3354	b9 2d 33	lda $332d,y			lda 	_AVTypeTable-$3A,y 			; e.g. a reference to int/float/string.
.3357	95 40		sta $40,x			sta 	esType,x
.3359	ac 1d 0d	ldy $0d1d			ldy 	varEnd 						; restore Y
.335c	ad 1c 0d	lda $0d1c			lda 	VarType 					; get variable type, put LSB into C
.335f	4a		lsr a				lsr 	a
.3360	90 03		bcc $3365			bcc 	_AVNotArray 				; if carry set,it is an array variable.
.3362	20 aa 33	jsr $33aa			jsr 	AccessArray 				; array lookup. if LSB was set.
.3365					_AVNotArray:
.3365	8a		txa				txa 								; return stack in A and return
.3366	60		rts				rts
.3367					_AVTypeTable:
>3367	80 80						.byte 	$80,$80						; integer
>3369	c0 c0						.byte 	$C0,$C0 					; string
>336b	81 81						.byte 	$81,$81 					; float
.336d					AccessSetup:
.336d	a9 00		lda #$00			lda 	#0 							; zero the hash byte.
.336f	8d 1b 0d	sta $0d1b			sta 	varHash
.3372	98		tya				tya
.3373	48		pha				pha
.3374	b1 02		lda ($02),y	_ASLoop:lda 	(codePtr),y					; get next identifier character
.3376	c9 3a		cmp #$3a			cmp 	#$3A 						; is it 3A-3F which end all identifiers ?
.3378	b0 0b		bcs $3385			bcs 	_ASComplete
.337a	18		clc				clc 								; add to the hash. Might improve this.
.337b	6d 1b 0d	adc $0d1b			adc 	varHash
.337e	8d 1b 0d	sta $0d1b			sta 	varHash
.3381	c8		iny				iny 								; next character
.3382	4c 74 33	jmp $3374			jmp 	_ASLoop
.3385					_ASComplete:
.3385	8d 1c 0d	sta $0d1c			sta 	varType 					; save variable type byte
.3388	c8		iny				iny
.3389	8c 1d 0d	sty $0d1d			sty 	varEnd 						; save the ending position.
.338c	38		sec				sec 								; convert type byte from $3A-$3F to 0..5
.338d	e9 3a		sbc #$3a			sbc 	#$3A
.338f	0a		asl a				asl 	a 							; multiply by hashTableSize (8 in this case)
.3390	0a		asl a				asl 	a
.3391	0a		asl a				asl 	a
.3392	0a		asl a				asl 	a 							; 2 bytes/word
.3393	85 04		sta $04				sta 	temp0 						; this is the offset to the start of the table.
.3395	ad 1b 0d	lda $0d1b			lda 	varHash 					; get hash
.3398	29 07		and #$07			and 	#(hashTableSize-1)			; force into range (for 8,0..7)
.339a	0a		asl a				asl  	a 							; x 2 (for word) and clear carry
.339b	65 04		adc $04				adc 	temp0 						; now offset from the start of the hash table.
.339d	69 68		adc #$68			adc 	#hashTables & $FF 			; add to hash table base address
.339f	85 7c		sta $7c				sta 	hashList 					; making hashLists point to the head of the link list.
.33a1	a9 0a		lda #$0a			lda 	#hashTables >> 8
.33a3	69 00		adc #$00			adc 	#0
.33a5	85 7d		sta $7d				sta 	hashList+1
.33a7	68		pla				pla
.33a8	a8		tay				tay
.33a9	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/accessarray.asm

.33aa					AccessArray:
.33aa	e8		inx				inx
.33ab	8a		txa				txa
.33ac	a2 06		ldx #$06		ldx	#6
.33ae	20 57 23	jsr $2357		jsr	mainHandler
.33b1	aa		tax				tax
.33b2	ca		dex				dex
.33b3	a2 00		ldx #$00		ldx	#0
.33b5	20 57 23	jsr $2357		jsr	mainHandler
.33b8	b5 61		lda $61,x			lda 	esInt3+1,x 					; check index value
.33ba	15 59		ora $59,x			ora 	esInt2+1,x
.33bc	d0 33		bne $33f1			bne 	_AABadIndex
.33be	98		tya				tya
.33bf	48		pha				pha
.33c0	b5 48		lda $48,x			lda 	esInt0,x 					; put array info ptr in temp0 - this points to the
.33c2	85 04		sta $04				sta 	temp0 						; address (+0) max (+2) and size (+4)
.33c4	b5 50		lda $50,x			lda 	esInt1,x
.33c6	85 05		sta $05				sta 	temp0+1
.33c8	a0 02		ldy #$02			ldy 	#2 							; check out of range, compare against max index.
.33ca	b5 49		lda $49,x			lda 	esInt0+1,x
.33cc	d1 04		cmp ($04),y			cmp 	(temp0),y
.33ce	c8		iny				iny
.33cf	b5 51		lda $51,x			lda 	esInt1+1,x
.33d1	f1 04		sbc ($04),y			sbc 	(temp0),y
.33d3	b0 1c		bcs $33f1			bcs 	_AABadIndex 				; if >= then fail.
.33d5	e8		inx				inx 								; point to index
.33d6	a0 04		ldy #$04			ldy 	#4 							; get the size byte.
.33d8	b1 04		lda ($04),y			lda 	(temp0),y
.33da	20 f6 33	jsr $33f6			jsr 	MultiplyTOSByA 				; specialist multiplier.
.33dd	ca		dex				dex
.33de	a0 00		ldy #$00			ldy 	#0 							; add this to the array base as the new address
.33e0	18		clc				clc
.33e1	b5 49		lda $49,x			lda 	esInt0+1,x
.33e3	71 04		adc ($04),y			adc 	(temp0),y
.33e5	95 48		sta $48,x			sta 	esInt0,x
.33e7	b5 51		lda $51,x			lda 	esInt1+1,x
.33e9	c8		iny				iny
.33ea	71 04		adc ($04),y			adc 	(temp0),y
.33ec	95 50		sta $50,x			sta 	esInt1,x
.33ee	68		pla				pla
.33ef	a8		tay				tay
.33f0	60		rts				rts
.33f1					_AABadIndex:
.33f1	a2 1b		ldx #$1b			ldx 	#ErrorID_ArrayIndex
.33f3	20 b9 24	jsr $24b9		jsr	errorHandler
.33f6					MultiplyTOSByA:
.33f6	48		pha				pha
.33f7	b5 48		lda $48,x			lda 	esInt0,x 					; copy index to temp1
.33f9	85 06		sta $06				sta 	temp1
.33fb	b5 50		lda $50,x			lda 	esInt1,x
.33fd	85 07		sta $07				sta 	temp1+1
.33ff	68		pla				pla
.3400	16 48		asl $48,x			asl 	esInt0,x 					; double it.
.3402	36 50		rol $50,x			rol 	esInt1,x
.3404	c9 02		cmp #$02			cmp 	#2 							; if x 2 then exit.
.3406	f0 17		beq $341f			beq 	_MTBAExit
.3408	c9 06		cmp #$06			cmp 	#6 							; if x 6 then add temp1 to index
.340a	d0 0f		bne $341b			bne 	_MTBANotFloat
.340c	48		pha				pha
.340d	18		clc				clc 								; so this will make it x 3
.340e	b5 48		lda $48,x			lda 	esInt0,x
.3410	65 06		adc $06				adc 	temp1
.3412	95 48		sta $48,x			sta 	esInt0,x
.3414	b5 50		lda $50,x			lda 	esInt1,x
.3416	65 07		adc $07				adc 	temp1+1
.3418	95 50		sta $50,x			sta 	esInt1,x
.341a	68		pla				pla
.341b					_MTBANotFloat:
.341b	16 48		asl $48,x			asl 	esInt0,x					; now it is x 4 or x 6
.341d	36 50		rol $50,x			rol 	esInt1,x
.341f					_MTBAExit:
.341f	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/create.asm

.3420					CreateVariable:
.3420	98		tya				tya 								; push Y on the stack twice.
.3421	48		pha				pha									; position in code of the new variable.
.3422	48		pha				pha
.3423	ae 1c 0d	ldx $0d1c			ldx 	varType 					; get var type 0-5 from the var type
.3426	bd 3f 34	lda $343f,x			lda		_CVSize-$3A,x 				; the bytes required for this new variable.
.3429	48		pha				pha 								; save length
.342a	a5 0f		lda $0f				lda 	lowMemory 					; set low Memory ptr to temp0
.342c	85 04		sta $04				sta 	temp0 						; (address of the new variable)
.342e	a5 10		lda $10				lda 	lowMemory+1
.3430	85 05		sta $05				sta 	temp0+1
.3432	68		pla				pla 								; get length
.3433	18		clc				clc 								; add to low memory.
.3434	65 0f		adc $0f				adc 	lowMemory
.3436	85 0f		sta $0f				sta 	lowMemory
.3438	90 02		bcc $343c			bcc 	_CVNoCarry
.343a	e6 10		inc $10				inc 	lowMemory+1
.343c					_CVNoCarry:
.343c	ad 1b 0d	lda $0d1b			lda 	varHash 					; store hash at offset 4.
.343f	a0 04		ldy #$04			ldy 	#4
.3441	91 04		sta ($04),y			sta 	(temp0),y
.3443	68		pla				pla 								; offset, work out where the variable name is.
.3444	18		clc				clc
.3445	65 02		adc $02				adc 	codePtr
.3447	a0 02		ldy #$02			ldy 	#2 							; copy that into slots 2 + 3.
.3449	91 04		sta ($04),y			sta 	(temp0),y
.344b	a5 03		lda $03				lda 	codePtr+1
.344d	69 00		adc #$00			adc 	#0
.344f	c8		iny				iny
.3450	91 04		sta ($04),y			sta 	(temp0),y
.3452	cd c9 0a	cmp $0ac9			cmp 	basePage+1 					; compare against the program base.
.3455	b0 03		bcs $345a			bcs 	_CVNotImmediate
.3457	20 b7 34	jsr $34b7			jsr 	CloneVariableName 			; we need to clone the variable name (immediate mode)
.345a					_CVNotImmediate:
.345a	a0 00		ldy #$00			ldy 	#0 							; copy current hash pointer in link
.345c	b1 7c		lda ($7c),y			lda 	(hashList),y 				; so we're inserting it in the front of a linked list
.345e	91 04		sta ($04),y			sta 	(temp0),y
.3460	c8		iny				iny
.3461	b1 7c		lda ($7c),y			lda 	(hashList),y
.3463	91 04		sta ($04),y			sta 	(temp0),y
.3465	a5 05		lda $05				lda 	temp0+1 					; set new link
.3467	91 7c		sta ($7c),y			sta 	(hashList),y
.3469	88		dey				dey
.346a	a5 04		lda $04				lda 	temp0
.346c	91 7c		sta ($7c),y			sta 	(hashList),y
.346e	ad 1c 0d	lda $0d1c			lda 	varType 					; type in A
.3471	a0 05		ldy #$05			ldy 	#5 							; offset in Y
.3473	20 7f 34	jsr $347f			jsr 	ZeroTemp0Y 					; zero (temp0),y with whatever type.
.3476	68		pla				pla
.3477	a8		tay				tay
.3478	60		rts				rts
>3479	09 0a				_CVSize:.byte 	VarHSize+VarISize,VarHSize+VarASize 					; <storage for integer>
>347b	07 0a						.byte 	VarHSize+VarSSize,VarHSize+VarASize 					; <storage for string>
>347d	0b 0a						.byte 	VarHSize+VarFSize,VarHSize+VarASize 					; <storage for float>
.347f					ZeroTemp0Y:
.347f	4a		lsr a				lsr 	a 							; bit 0 in carry
.3480	0a		asl a				asl 	a
.3481	b0 19		bcs $349c			bcs 	_ZTExit 					; we don't initialise arrays.
.3483	c9 3c		cmp #$3c			cmp 	#$3C 						; check string
.3485	f0 16		beq $349d			beq 	_ZTWriteNullString 			; write "" string
.3487	c9 3e		cmp #$3e			cmp 	#$3E 						; check float
.3489	f0 22		beq $34ad			beq 	_ZTWriteFloat
.348b	98		tya				tya
.348c	48		pha				pha
.348d	a9 00		lda #$00			lda 	#0
.348f	91 04		sta ($04),y			sta 	(temp0),y
.3491	c8		iny				iny
.3492	91 04		sta ($04),y			sta 	(temp0),y
.3494	c8		iny				iny
.3495	91 04		sta ($04),y			sta 	(temp0),y
.3497	c8		iny				iny
.3498	91 04		sta ($04),y			sta 	(temp0),y
.349a	68		pla				pla
.349b	a8		tay				tay
.349c					_ZTExit:
.349c	60		rts				rts
.349d					_ZTWriteNullString:
.349d	a9 00		lda #$00			lda 	#0 							; put a reference to null string as the default value.
.349f	8d ce 0a	sta $0ace			sta 	NullString
.34a2	a9 ce		lda #$ce			lda 	#NullString & $FF
.34a4	91 04		sta ($04),y			sta 	(temp0),y
.34a6	a9 0a		lda #$0a			lda 	#NullString >> 8
.34a8	c8		iny				iny
.34a9	91 04		sta ($04),y			sta 	(temp0),y
.34ab	88		dey				dey
.34ac	60		rts				rts
.34ad					_ZTWriteFloat:
.34ad	8a		txa				txa
.34ae	48		pha				pha
.34af	a2 1e		ldx #$1e		ldx	#30
.34b1	20 eb 27	jsr $27eb		jsr	floatingpointHandler
.34b4	68		pla				pla
.34b5	aa		tax				tax
.34b6	60		rts				rts
.34b7					CloneVariableName:
.34b7	a0 02		ldy #$02			ldy 	#2 							; copy vname address to temp2
.34b9	b1 04		lda ($04),y			lda 	(temp0),y
.34bb	85 08		sta $08				sta 	temp2
.34bd	c8		iny				iny
.34be	b1 04		lda ($04),y			lda 	(temp0),y
.34c0	85 09		sta $09				sta 	temp2+1
.34c2	a5 10		lda $10				lda 	lowMemory+1 				; copy lowMemory address to (temp0),2/3
.34c4	91 04		sta ($04),y			sta 	(temp0),y
.34c6	88		dey				dey
.34c7	a5 0f		lda $0f				lda 	lowMemory
.34c9	91 04		sta ($04),y			sta 	(temp0),y
.34cb	a0 00		ldy #$00			ldy 	#0 							; copy data from (temp2) to (lowMemory)
.34cd					_CVNCopy:
.34cd	b1 08		lda ($08),y			lda		(temp2),y
.34cf	91 0f		sta ($0f),y			sta 	(lowMemory),y
.34d1	c8		iny				iny
.34d2	c9 3a		cmp #$3a			cmp 	#$3A 						; until the whole name has been copied.
.34d4	90 f7		bcc $34cd			bcc 	_CVNCopy
.34d6	98		tya				tya 								; add Y to low memory
.34d7	18		clc				clc
.34d8	65 0f		adc $0f				adc 	lowMemory
.34da	85 0f		sta $0f				sta 	lowMemory
.34dc	90 02		bcc $34e0			bcc 	_CVNNoCarry
.34de	e6 10		inc $10				inc 	lowMemory+1
.34e0					_CVNNoCarry:
.34e0	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/createarray.asm

.34e1					CreateArray:
.34e1	20 6d 33	jsr $336d			jsr 	AccessSetup 				; set up the basic stuff.
.34e4	ad 1c 0d	lda $0d1c			lda 	varType 					; is the variable type an array
.34e7	4a		lsr a				lsr 	a
.34e8	90 3f		bcc $3529			bcc 	_CANotArray 				; no, cause an error.
.34ea	20 99 35	jsr $3599			jsr 	FindVariable 				; does the variable exist already
.34ed	b0 35		bcs $3524			bcs 	_CAFound 					; cannot redefine it.
.34ef	20 20 34	jsr $3420			jsr 	CreateVariable 				; create the variable entry.
.34f2	ac 1d 0d	ldy $0d1d			ldy 	varEnd 						; point Y to the end of the variable entry.
.34f5	a5 04		lda $04				lda 	temp0 						; push address of new variable entry on the stack
.34f7	48		pha				pha
.34f8	a5 05		lda $05				lda 	temp0+1
.34fa	48		pha				pha
.34fb	ad 1c 0d	lda $0d1c			lda 	varType 					; push variable type on the stack.
.34fe	48		pha				pha
.34ff	a9 00		lda #$00			lda 	#0 							; work out the array dimension on TOS.
.3501	a2 06		ldx #$06		ldx	#6
.3503	20 57 23	jsr $2357		jsr	mainHandler
.3506	a2 00		ldx #$00		ldx	#0
.3508	20 57 23	jsr $2357		jsr	mainHandler
.350b	68		pla				pla 		 						; restore type and position.
.350c	8d 1c 0d	sta $0d1c			sta 	varType
.350f	68		pla				pla
.3510	85 05		sta $05				sta 	temp0+1
.3512	68		pla				pla
.3513	85 04		sta $04				sta 	temp0
.3515	a5 50		lda $50				lda 	esInt1 						; limit array max to 4096.
.3517	29 e0		and #$e0			and 	#$E0
.3519	05 58		ora $58				ora 	esInt2
.351b	05 60		ora $60				ora 	esInt3
.351d	f0 0f		beq $352e			beq 	_CASizeOk
.351f					_CASize:
.351f	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.3521	20 b9 24	jsr $24b9		jsr	errorHandler
.3524					_CAFound:
.3524	a2 19		ldx #$19			ldx 	#ErrorID_DupArray
.3526	20 b9 24	jsr $24b9		jsr	errorHandler
.3529					_CANotArray:
.3529	a2 1a		ldx #$1a			ldx 	#ErrorID_NotArray
.352b	20 b9 24	jsr $24b9		jsr	errorHandler
.352e					_CASizeOk:
.352e	e6 48		inc $48				inc 	esInt0 						; bump it by one, as we index from 0
.3530	d0 02		bne $3534			bne 	_CANoCarry 					; e.g. DIM A(10) ... A(0) - A(10)
.3532	e6 49		inc $49				inc 	esInt0+1
.3534					_CANoCarry:
.3534	98		tya				tya
.3535	48		pha				pha
.3536	a0 05		ldy #$05			ldy 	#5
.3538	a5 0f		lda $0f				lda 	lowMemory 					; copy low memory address in +5,+6
.353a	91 04		sta ($04),y			sta 	(temp0),y 					; this is where it will come from
.353c	c8		iny				iny
.353d	a5 10		lda $10				lda 	lowMemory+1
.353f	91 04		sta ($04),y			sta 	(temp0),y
.3541	c8		iny				iny
.3542	a5 48		lda $48				lda 	esInt0 						; copy maximum index value to +7,+8
.3544	91 04		sta ($04),y			sta 	(temp0),y
.3546	c8		iny				iny
.3547	a5 50		lda $50				lda 	esInt1
.3549	91 04		sta ($04),y			sta 	(temp0),y
.354b	c8		iny				iny
.354c	ae 1c 0d	ldx $0d1c			ldx 	varType 					; get the length per element
.354f	bd 57 35	lda $3557,x			lda 	_CAActualSize-$3A-1,x
.3552	91 04		sta ($04),y			sta 	(temp0),y
.3554	aa		tax				tax 								; save size in X
.3555	a5 0f		lda $0f				lda 	lowMemory 					; set temp0 to low memory.
.3557	85 04		sta $04				sta 	temp0
.3559	a5 10		lda $10				lda 	lowMemory+1
.355b	85 05		sta $05				sta 	temp0+1
.355d	a9 00		lda #$00			lda 	#0 							; temp1 is the counter.
.355f	85 06		sta $06				sta 	temp1
.3561	85 07		sta $07				sta 	temp1+1
.3563					_CAInitialiseArray:
.3563	a0 00		ldy #$00			ldy 	#0 							; write a null record at temp0
.3565	ad 1c 0d	lda $0d1c			lda 	varType 					; base type of array in A.
.3568	29 fe		and #$fe			and 	#$FE
.356a	20 7f 34	jsr $347f			jsr 	ZeroTemp0Y
.356d	8a		txa				txa 								; add X to temp0, also updating lowMemory
.356e	18		clc				clc
.356f	65 04		adc $04				adc 	temp0
.3571	85 04		sta $04				sta 	temp0
.3573	85 0f		sta $0f				sta 	lowMemory
.3575	a5 05		lda $05				lda 	temp0+1
.3577	69 00		adc #$00			adc 	#0
.3579	85 05		sta $05				sta 	temp0+1
.357b	85 10		sta $10				sta 	lowMemory+1
.357d	e6 06		inc $06				inc 	temp1 						; bump the counter.
.357f	d0 02		bne $3583			bne 	_CAIANoCarry
.3581	e6 07		inc $07				inc 	temp1+1
.3583					_CAIANoCarry:
.3583	a5 48		lda $48				lda 	esInt0 						; counter reached max index
.3585	c5 06		cmp $06				cmp 	temp1
.3587	d0 da		bne $3563			bne 	_CAInitialiseArray
.3589	a5 50		lda $50				lda 	esInt1
.358b	c5 07		cmp $07				cmp 	temp1+1
.358d	d0 d4		bne $3563			bne 	_CAInitialiseArray
.358f	68		pla				pla
.3590	a8		tay				tay
.3591	60		rts				rts
.3592					_CAActualSize:
>3592	04 00						.byte 	VarISize,0
>3594	02 00						.byte 	VarSSize,0
>3596	06 00						.byte 	VarFSize,0
>3598	db						.byte 	$DB

;******  Return to file: variable/variable.asm


;******  Processing file: variable/find.asm

.3599					FindVariable:
.3599	98		tya				tya
.359a	48		pha				pha
.359b	98		tya				tya 								; point temp2 to the actual name
.359c	18		clc				clc 								; in memory of the variable being created
.359d	65 02		adc $02				adc 	codePtr
.359f	85 08		sta $08				sta 	temp2
.35a1	a5 03		lda $03				lda 	codePtr+1
.35a3	69 00		adc #$00			adc 	#0
.35a5	85 09		sta $09				sta 	temp2+1
.35a7	a0 00		ldy #$00			ldy 	#0
.35a9	a5 7c		lda $7c				lda 	hashList 					; copy hashlist to temp0
.35ab	85 04		sta $04				sta 	temp0
.35ad	a5 7d		lda $7d				lda 	hashList+1
.35af	85 05		sta $05				sta 	temp0+1
.35b1	a0 01		ldy #$01	_FVNext:ldy 	#1 							; get MSB
.35b3	b1 04		lda ($04),y			lda 	(temp0),y
.35b5	f0 2c		beq $35e3			beq 	_FVFail
.35b7	aa		tax				tax
.35b8	88		dey				dey		 							; get LSB
.35b9	b1 04		lda ($04),y			lda 	(temp0),y
.35bb	85 04		sta $04				sta 	temp0 						; update pointer.
.35bd	86 05		stx $05				stx 	temp0+1
.35bf	a0 04		ldy #$04			ldy 	#4 							; check hashes match
.35c1	b1 04		lda ($04),y			lda 	(temp0),y
.35c3	cd 1b 0d	cmp $0d1b			cmp 	varHash
.35c6	d0 e9		bne $35b1			bne 	_FVNext 					; if not, no point in checking the name.
.35c8	88		dey				dey 								; copy name pointer (+2,+3) to temp1.
.35c9	b1 04		lda ($04),y			lda 	(temp0),y
.35cb	85 07		sta $07				sta 	temp1+1
.35cd	88		dey				dey
.35ce	b1 04		lda ($04),y			lda 	(temp0),y
.35d0	85 06		sta $06				sta 	temp1
.35d2	a0 00		ldy #$00			ldy 	#0
.35d4					_FVCheck:
.35d4	b1 06		lda ($06),y			lda 	(temp1),y 					; compare names
.35d6	d1 08		cmp ($08),y			cmp 	(temp2),y
.35d8	d0 d7		bne $35b1			bne 	_FVNext		 				; fail if different.
.35da	c8		iny				iny
.35db	c9 3a		cmp #$3a			cmp 	#$3A 						; until reached the end marker.
.35dd	90 f5		bcc $35d4			bcc 	_FVCheck
.35df	68		pla				pla
.35e0	a8		tay				tay
.35e1	38		sec				sec
.35e2	60		rts				rts
.35e3					_FVFail:
.35e3	68		pla				pla
.35e4	a8		tay				tay
.35e5	18		clc				clc
.35e6	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/reset.asm

.35e7					HashTableReset:
.35e7	a2 60		ldx #$60			ldx 	#6*2*hashTableSize			; 6 types, 2 bytes per table entry.
.35e9	a9 00		lda #$00			lda 	#0
.35eb					_HTRClear:
.35eb	9d 67 0a	sta $0a67,x			sta 	hashTables-1,x
.35ee	ca		dex				dex
.35ef	d0 fa		bne $35eb			bne 	_HTRClear
.35f1	60		rts				rts

;******  Return to file: variable/variable.asm

.35f2					variableHandler:
.35f2	7c f5 35	jmp ($35f5,x)			jmp 	(variableVectors,x)
.35f5					variableVectors:
>35f5	06 33					.word AccessVariable       ; index 0
>35f7	e1 34					.word CreateArray          ; index 2
>35f9	e7 35					.word HashTableReset       ; index 4

;******  Return to file: basic.asm

.35fb					section_end_variable:

;******  End of listing
