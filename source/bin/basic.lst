
; 64tass Turbo Assembler Macro V1.55.2200 listing file
; 64tass -Walias -Wmacro-prefix -Wall -q -c -L ../source/bin/basic.lst -l ../source/bin/basic.lbl -Wall -o ../source/bin/stub.prg basic.asm
; Tue Apr  6 07:49:12 2021

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: basic.asm

=0					cputype = 0
=1					autorun=1
=0					coldstartnew=0
=$1000					CodeStart = $1000
=$800					MemoryStorage = $800
=$9f00					EndOfMemory = $9F00
=$28					ZeroPageStorage = $28
=$90					StackAddress = $90
=8					StackSize = 8
=2					retStackSizePages = 2

;******  Processing file: header/01common.inc


;******  Processing file: header/../generated/installed.inc

=1					installed_header = 1
=1					installed_main = 1
=1					installed_variable = 1
=1					installed_assembler = 1
=1					installed_error = 1
=1					installed_extension = 1
=1					installed_string = 1
=1					installed_device = 1
=0					installed_floatingpoint = 0
=1					installed_interaction = 1
=1					installed_tokeniser = 1
=1					installed_footer = 1

;******  Return to file: header/01common.inc

=8					hashTableSize = 8			; if this changes, the calculation is AccessSetup has to match it.
="G"					markerGOSUB = 'G'
="R"					markerREPEAT = 'R'
="F"					markerFOR = 'F'
="W"					markerWHILE = 'W'
="P"					markerPROC = 'P'
="$"					markerSTRING = '$'
="#"					markerFLOAT = '#'
="%"					markerINT = '%'
=5					VarHSize = 5 								; header (2 link, 2 name, 1 hash)
=2					VarASize = 2 								; array [address of first level]
=4					VarISize = 4 								; integer (32 bit)
=6					VarFSize = 6 								; float (4 mantissa, 1 exponent 1 sign/zero)
=2					VarSSize = 2 								; address (2 bytes)

;******  Return to file: basic.asm


;******  Processing file: header/02macros.inc


;******  Return to file: basic.asm


;******  Processing file: header/03data.inc

>0028					codePtr:.fill 	2							; (codePtr),y points to code.
>002a					temp0: 	.fill 	2							; working variables.
>002c					temp1: 	.fill 	2
>002e					temp2: 	.fill 	2
>0030					temp3: 	.fill 	2
.0032					tempshort:
>0032							.fill 	1
.0033					highMemory:
>0033							.fill 	2
.0035					lowMemory:
>0035							.fill 	2
>0800							.align	256
.0800					returnStack:
>0800							.fill 	retStackSizePages * 256
=512					retStackSize = retStackSizePages * 256
.0a00					SingleLetterVar:
>0a00					 		.fill 	26*4
.0a68					currentStorage:
>0090					esType:	.fill 	StackSize  					; type byte (see above)
>0098					esInt0:	.fill 	StackSize 					; integer or mantissa
>00a0					esInt1:	.fill 	StackSize
>00a8					esInt2:	.fill 	StackSize
>00b0					esInt3:	.fill 	StackSize
>00b8					esExp:	.fill 	StackSize 					; exponent ($80 = 0)
>00c0					esZSign:.fill 	StackSize 					; for floating point - sign (bit 7) isZero (bit 6)
.00c8					endOfStack:
=$98					esMant0 = esInt0 							; synonyms.
=$a0					esMant1 = esInt1
=$a8					esMant2 = esInt2
=$b0					esMant3 = esInt3
.0a68					hashTables:
>0a68							.fill 	6*2*hashTableSize
.0ac8					basePage:
>0ac8							.fill 	2
.0aca					endProgram:
>0aca							.fill 	2
.0acc					endMemory:
>0acc							.fill 	2
.0ace					NullString:
>0ace							.fill 	1							; don't waste memory concreting null strings.
.0acf					convertBuffer:
>0acf							.fill 	35

;******  Processing file: header/../generated/tokenconst.inc

=$80					TOK_EOL=$80
=$81					TOK_SHIFT1=$81
=$82					TOK_SHIFT2=$82
=$83					TOK_SHIFT3=$83
=$84					TOK_FPC=$84
=$85					TOK_STR=$85
=$86					TOK_BINARYST=$86
=$99					TOK_STRUCTST=$99
=$a4					TOK_UNARYST=$a4
=$c9					TOK_TOKENS=$c9
=$86					TKW_AND                      = $86 ; and
=$87					TKW_OR                       = $87 ; or
=$88					TKW_XOR                      = $88 ; xor
=$89					TKW_GREATEREQUAL             = $89 ; >=
=$8a					TKW_LESSEQUAL                = $8a ; <=
=$8b					TKW_GREATER                  = $8b ; >
=$8c					TKW_LESS                     = $8c ; <
=$8d					TKW_EQUAL                    = $8d ; =
=$8e					TKW_LESSGREATER              = $8e ; <>
=$8f					TKW_PLUS                     = $8f ; +
=$90					TKW_MINUS                    = $90 ; -
=$91					TKW_GREATERGREATER           = $91 ; >>
=$92					TKW_LESSLESS                 = $92 ; <<
=$93					TKW_STAR                     = $93 ; *
=$94					TKW_SLASH                    = $94 ; /
=$95					TKW_MOD                      = $95 ; mod
=$96					TKW_HAT                      = $96 ; ^
=$97					TKW_PLING                    = $97 ; !
=$98					TKW_QMARK                    = $98 ; ?
=$99					TKW_REPEAT                   = $99 ; repeat
=$9a					TKW_WHILE                    = $9a ; while
=$9b					TKW_FOR                      = $9b ; for
=$9c					TKW_IF                       = $9c ; if
=$9d					TKW_DEFPROC                  = $9d ; defproc
=$9e					TKW_UNTIL                    = $9e ; until
=$9f					TKW_WEND                     = $9f ; wend
=$a0					TKW_NEXT                     = $a0 ; next
=$a1					TKW_THEN                     = $a1 ; then
=$a2					TKW_ENDIF                    = $a2 ; endif
=$a3					TKW_ENDPROC                  = $a3 ; endproc
=$a4					TKW_LPAREN                   = $a4 ; (
=$a5					TKW_LENLPAREN                = $a5 ; len(
=$a6					TKW_SGNLPAREN                = $a6 ; sgn(
=$a7					TKW_ABSLPAREN                = $a7 ; abs(
=$a8					TKW_RANDOMLPAREN             = $a8 ; random(
=$a9					TKW_PAGE                     = $a9 ; page
=$aa					TKW_TRUE                     = $aa ; true
=$ab					TKW_FALSE                    = $ab ; false
=$ac					TKW_MINLPAREN                = $ac ; min(
=$ad					TKW_MAXLPAREN                = $ad ; max(
=$ae					TKW_SYSLPAREN                = $ae ; sys(
=$af					TKW_TIMERLPAREN              = $af ; timer(
=$b0					TKW_EVENTLPAREN              = $b0 ; event(
=$b1					TKW_GETLPAREN                = $b1 ; get(
=$b2					TKW_INKEYLPAREN              = $b2 ; inkey(
=$b3					TKW_ALLOCLPAREN              = $b3 ; alloc(
=$b4					TKW_CHRDOLLARLPAREN          = $b4 ; chr$(
=$b5					TKW_LEFTDOLLARLPAREN         = $b5 ; left$(
=$b6					TKW_MIDDOLLARLPAREN          = $b6 ; mid$(
=$b7					TKW_RIGHTDOLLARLPAREN        = $b7 ; right$(
=$b8					TKW_STRDOLLARLPAREN          = $b8 ; str$(
=$b9					TKW_VALLPAREN                = $b9 ; val(
=$ba					TKW_PEEKLPAREN               = $ba ; peek(
=$bb					TKW_DEEKLPAREN               = $bb ; deek(
=$bc					TKW_LEEKLPAREN               = $bc ; leek(
=$bd					TKW_ASCLPAREN                = $bd ; asc(
=$be					TKW_INTLPAREN                = $be ; int(
=$bf					TKW_FLOATLPAREN              = $bf ; float(
=$c0					TKW_ISVALLPAREN              = $c0 ; isval(
=$c1					TKW_UPPERDOLLARLPAREN        = $c1 ; upper$(
=$c2					TKW_LOWERDOLLARLPAREN        = $c2 ; lower$(
=$c3					TKW_ATC                      = $c3 ; @
=$c4					TKW_WAVY                     = $c4 ; ~
=$c5					TKW_AMP                      = $c5 ; &
=$c6					TKW_GETDOLLARLPAREN          = $c6 ; get$(
=$c7					TKW_INKEYDOLLARLPAREN        = $c7 ; inkey$(
=$c8					TKW_MEM                      = $c8 ; mem
=$c9					TKW_RPAREN                   = $c9 ; )
=$ca					TKW_COLON                    = $ca ; :
=$cb					TKW_COMMA                    = $cb ; ,
=$cc					TKW_SEMICOLON                = $cc ; ;
=$cd					TKW_QUOTE                    = $cd ; '
=$ce					TKW_TO                       = $ce ; to
=$cf					TKW_STEP                     = $cf ; step
=$d0					TKW_PROC                     = $d0 ; proc
=$d1					TKW_LOCAL                    = $d1 ; local
=$d2					TKW_DIM                      = $d2 ; dim
=$d3					TKW_REM                      = $d3 ; rem
=$d4					TKW_LET                      = $d4 ; let
=$d5					TKW_INPUT                    = $d5 ; input
=$d6					TKW_ELSE                     = $d6 ; else
=$d7					TKW_VDU                      = $d7 ; vdu
=$d8					TKW_PRINT                    = $d8 ; print
=$d9					TKW_DATA                     = $d9 ; data
=$da					TKW_IMAGE                    = $da ; image
=$db					TKW_AT                       = $db ; at
=$dc					TKW_FLIP                     = $dc ; flip
=$dd					TKW_ASSERT                   = $dd ; assert
=$de					TKW_POKE                     = $de ; poke
=$df					TKW_DOKE                     = $df ; doke
=$e0					TKW_LOKE                     = $e0 ; loke
=$e1					TKW_INK                      = $e1 ; ink
=$e2					TKW_PAPER                    = $e2 ; paper
=$e3					TKW_CLS                      = $e3 ; cls
=$e4					TKW_LOCATE                   = $e4 ; locate
=$e5					TKW_PERIOD                   = $e5 ; .
=$e6					TKW_FROM                     = $e6 ; from
=$e7					TKW_HASH                     = $e7 ; #
=$e8					TKW_CLEAR                    = $e8 ; clear
=$e9					TKW_TEXT                     = $e9 ; text
=$86					TKW_LOAD                     = $86 ; load
=$87					TKW_SAVE                     = $87 ; save
=$88					TKW_LIST                     = $88 ; list
=$89					TKW_NEW                      = $89 ; new
=$8a					TKW_BREAK                    = $8a ; break
=$8b					TKW_RUN                      = $8b ; run
=$8c					TKW_READ                     = $8c ; read
=$8d					TKW_RESTORE                  = $8d ; restore
=$8e					TKW_END                      = $8e ; end
=$8f					TKW_STOP                     = $8f ; stop
=$90					TKW_XEMU                     = $90 ; xemu
=$91					TKW_GOTO                     = $91 ; goto
=$92					TKW_GOSUB                    = $92 ; gosub
=$93					TKW_RETURN                   = $93 ; return
=$94					TKW_ORA                      = $94 ; ora
=$95					TKW_LPARENANDRPAREN          = $95 ; (and)
=$96					TKW_EOR                      = $96 ; eor
=$97					TKW_ADC                      = $97 ; adc
=$98					TKW_STA                      = $98 ; sta
=$99					TKW_LDA                      = $99 ; lda
=$9a					TKW_CMP                      = $9a ; cmp
=$9b					TKW_SBC                      = $9b ; sbc
=$9c					TKW_ASL                      = $9c ; asl
=$9d					TKW_ROL                      = $9d ; rol
=$9e					TKW_LSR                      = $9e ; lsr
=$9f					TKW_ROR                      = $9f ; ror
=$a0					TKW_STX                      = $a0 ; stx
=$a1					TKW_LDX                      = $a1 ; ldx
=$a2					TKW_DEC                      = $a2 ; dec
=$a3					TKW_INC                      = $a3 ; inc
=$a4					TKW_STZ                      = $a4 ; stz
=$a5					TKW_BIT                      = $a5 ; bit
=$a6					TKW_STY                      = $a6 ; sty
=$a7					TKW_LDY                      = $a7 ; ldy
=$a8					TKW_CPY                      = $a8 ; cpy
=$a9					TKW_CPX                      = $a9 ; cpx
=$aa					TKW_TSB                      = $aa ; tsb
=$ab					TKW_TRB                      = $ab ; trb
=$ac					TKW_JSR                      = $ac ; jsr
=$ad					TKW_JMP                      = $ad ; jmp
=$ae					TKW_BPL                      = $ae ; bpl
=$af					TKW_BMI                      = $af ; bmi
=$b0					TKW_BVC                      = $b0 ; bvc
=$b1					TKW_BVS                      = $b1 ; bvs
=$b2					TKW_BCC                      = $b2 ; bcc
=$b3					TKW_BCS                      = $b3 ; bcs
=$b4					TKW_BNE                      = $b4 ; bne
=$b5					TKW_BEQ                      = $b5 ; beq
=$b6					TKW_BRA                      = $b6 ; bra
=$b7					TKW_BRK                      = $b7 ; brk
=$b8					TKW_PHP                      = $b8 ; php
=$b9					TKW_CLC                      = $b9 ; clc
=$ba					TKW_PLP                      = $ba ; plp
=$bb					TKW_SEC                      = $bb ; sec
=$bc					TKW_RTI                      = $bc ; rti
=$bd					TKW_PHA                      = $bd ; pha
=$be					TKW_CLI                      = $be ; cli
=$bf					TKW_PHY                      = $bf ; phy
=$c0					TKW_RTS                      = $c0 ; rts
=$c1					TKW_PLA                      = $c1 ; pla
=$c2					TKW_SEI                      = $c2 ; sei
=$c3					TKW_PLY                      = $c3 ; ply
=$c4					TKW_DEY                      = $c4 ; dey
=$c5					TKW_TXA                      = $c5 ; txa
=$c6					TKW_TYA                      = $c6 ; tya
=$c7					TKW_TXS                      = $c7 ; txs
=$c8					TKW_TAY                      = $c8 ; tay
=$c9					TKW_TAX                      = $c9 ; tax
=$ca					TKW_CLV                      = $ca ; clv
=$cb					TKW_TSX                      = $cb ; tsx
=$cc					TKW_INY                      = $cc ; iny
=$cd					TKW_DEX                      = $cd ; dex
=$ce					TKW_CLD                      = $ce ; cld
=$cf					TKW_PHX                      = $cf ; phx
=$d0					TKW_INX                      = $d0 ; inx
=$d1					TKW_NOP                      = $d1 ; nop
=$d2					TKW_SED                      = $d2 ; sed
=$d3					TKW_PLX                      = $d3 ; plx
=$86					TKW_VPOKE                    = $86 ; vpoke
=$87					TKW_VDOKE                    = $87 ; vdoke
=$88					TKW_VLOAD                    = $88 ; vload
=$89					TKW_MODE                     = $89 ; mode
=$8a					TKW_PALETTE                  = $8a ; palette
=$8b					TKW_SPRITE                   = $8b ; sprite
=$8c					TKW_CLG                      = $8c ; clg
=$8d					TKW_RECT                     = $8d ; rect
=$8e					TKW_FRAME                    = $8e ; frame
=$8f					TKW_DRAW                     = $8f ; draw
=$90					TKW_PLOT                     = $90 ; plot
=$91					TKW_LINE                     = $91 ; line
=$92					TKW_PAINT                    = $92 ; paint
=$93					TKW_SOUND                    = $93 ; sound
=$94					TKW_VOLUME                   = $94 ; volume
=$86					TKW_VPEEKLPAREN              = $86 ; vpeek(
=$87					TKW_VDEEKLPAREN              = $87 ; vdeek(
=$88					TKW_SPRITEPERIODXLPAREN      = $88 ; sprite.x(
=$89					TKW_SPRITEPERIODYLPAREN      = $89 ; sprite.y(
=$8a					TKW_HITLPAREN                = $8a ; hit(
=$8b					TKW_JOYPERIODXLPAREN         = $8b ; joy.x(
=$8c					TKW_JOYPERIODYLPAREN         = $8c ; joy.y(
=$8d					TKW_JOYPERIODBLPAREN         = $8d ; joy.b(
=$8e					TKW_CLOCKLPAREN              = $8e ; clock(

;******  Return to file: header/03data.inc

=$3a					TYPE_INT =		($3A) 						; type bytes that end identifier.
=$3b					TYPE_INTARRAY =	($3B)
=$3c					TYPE_STR =		($3C)
=$3d					TYPE_STRARRAY =	($3D)
=$3e					TYPE_FLOAT =	($3E)
=$3f					TYPE_FLOATARRAY=($3F)

;******  Processing file: header/../generated/asmconst.inc

=$94					TKA_GROUP1 = $94
=$9c					TKA_GROUP2 = $9c
=$ae					TKA_GROUP3 = $ae
=$b7					TKA_GROUP4 = $b7
=$d4					TKA_END4 = $d4

;******  Return to file: header/03data.inc


;******  Return to file: basic.asm


;******  Processing file: header/header.inc


;******  Return to file: basic.asm


;******  Processing file: assembler/asmconst.inc

=0					AMD_IMM		= 0					; Immediate mode.
=1					AMD_ZERO 	= 1					; Zero Page
=2					AMD_ACCIMP	= 2					; Accumulator/Implied
=3					AMD_ABS 	= 3					; Absolute
=4					AMD_ZEROINDY= 4					; Zero Indirect,Y
=5					AMD_ZEROX 	= 5					; Zero Page,X
=6					AMD_ABSY 	= 6					; Absolute,Y
=7					AMD_ABSX 	= 7					; Absolute,X
=8					AMD_ZEROIND = 8					; Zero Indirect
=9					AMD_ZEROY 	= 9					; Zero Page,Y
=10					AMD_ABSIND 	= 10				; Absolute Indirect
=11					AMD_ABSINDX	= 11				; Absolute Indirect Indexed
=12					AMD_REL		= 12				; Relative
=13					AMD_ZEROINDX= 13 				; Zero Indirect,X

;******  Return to file: basic.asm


;******  Processing file: assembler/assembler.inc


;******  Return to file: basic.asm


;******  Processing file: device/device.inc


;******  Return to file: basic.asm


;******  Processing file: error/error.inc


;******  Return to file: basic.asm


;******  Processing file: error/errorhandler.inc


;******  Processing file: error/../generated/errorid.inc

=1					ErrorID_Missing = 1 ; Feature not Present
=2					ErrorID_Syntax = 2 ; Syntax Error
=3					ErrorID_NoModule = 3 ; Module disabled
=4					ErrorID_Assert = 4 ; Assertion failed
=5					ErrorID_DivZero = 5 ; Divide By Zero
=6					ErrorID_Stop = 6 ; Stop
=7					ErrorID_BadType = 7 ; Type Mismatch
=8					ErrorID_BadValue = 8 ; Illegal Value
=9					ErrorID_MissingRP = 9 ; Missing right bracket
=10					ErrorID_MissingComma = 10 ; Missing comma
=11					ErrorID_NoReference = 11 ; Missing reference
=12					ErrorID_LineNumber = 12 ; Line Number not found
=13					ErrorID_StrLen = 13 ; String too long
=14					ErrorID_ReturnErr = 14 ; RETURN without GOSUB
=15					ErrorID_UntilErr = 15 ; UNTIL without REPEAT
=16					ErrorID_NextErr = 16 ; NEXT without FOR
=17					ErrorID_WendErr = 17 ; WEND without WHILE
=18					ErrorID_endprocErr = 18 ; ENDPROC without PROC
=19					ErrorID_BadIndex = 19 ; Bad NEXT index
=20					ErrorID_Struct = 20 ; Structures nested wrong
=21					ErrorID_NoAuto = 21 ; Cannot create variable
=22					ErrorID_RetStack = 22 ; Return stack out of space
=23					ErrorID_NoProc = 23 ; Unknown Procedure
=24					ErrorID_Params = 24 ; Parameters do not match
=25					ErrorID_DupArray = 25 ; Array already defined
=26					ErrorID_NotArray = 26 ; DIM requires array
=27					ErrorID_ArrayIndex = 27 ; Bad array index
=28					ErrorID_ArrayDepth = 28 ; Wrong number of array indices
=29					ErrorID_DataError = 29 ; Out of data
=30					ErrorID_Tokenise = 30 ; Cannot tokenise line
=31					ErrorID_Save = 31 ; Save failed
=32					ErrorID_Load = 32 ; Load failed
=33					ErrorID_Break = 33 ; Break
=34					ErrorID_Memory = 34 ; Out of memory
=35					ErrorID_NumStack = 35 ; Expression too complex
=36					ErrorID_Assembler = 36 ; Bad Operand/Mode
=37					ErrorID_Branch = 37 ; Branch out of range
=38					ErrorID_Label = 38 ; Label changed value
=39					ErrorID_NoSprite = 39 ; No Sprite Selected
=40					ErrorID_Hardware = 40 ; Hardware

;******  Return to file: error/errorhandler.inc


;******  Return to file: basic.asm


;******  Processing file: extension/extension.inc


;******  Return to file: basic.asm


;******  Processing file: extension/option_x16/x16const.inc

=64					X16MaxImages = 64 							; max # of sprite images.

;******  Return to file: basic.asm


;******  Processing file: floatingpoint/float.inc

=5					FloatEmbeddedSize = 5

;******  Return to file: basic.asm


;******  Processing file: floatingpoint/floatingpoint.inc


;******  Return to file: basic.asm


;******  Processing file: interaction/interaction.inc


;******  Return to file: basic.asm


;******  Processing file: main/main.inc


;******  Return to file: basic.asm


;******  Processing file: string/functions/memory.inc

=252					MaxStringSize = 252

;******  Return to file: basic.asm


;******  Processing file: string/string.inc


;******  Return to file: basic.asm


;******  Processing file: tokeniser/detokenise/colouring.inc

=$84					LTYLineNumber = $84
=$82					LTYPunctuation = $82
=$87					LTYIdentifier = $87
=$86					LTYConstant = $86
=$83					LTYKeyword = $83
=$81					LTYString = $81

;******  Return to file: basic.asm


;******  Processing file: tokeniser/tokeniser.inc


;******  Return to file: basic.asm


;******  Processing file: variable/variable.inc


;******  Return to file: basic.asm


;******  Processing file: footer/footer.inc


;******  Return to file: basic.asm

.1000					section_start_header:

;******  Processing file: header/header.asm


;******  Processing file: header/00start.asm

.1000					Start:
.1000	4c 0a 10	jmp $100a			jmp 	GoColdStart 				; +0 	boot BASIC
.1003	4c 58 10	jmp $1058			jmp 	GoTokTest					; +3 	run tokeniser test code.
>1006	fc 45						.word 	TokenTableAddress
.1008							else
>1008	00 00						.word 	0
.100a					GoColdStart:
.100a	a9 00		lda #$00			lda 	#(programMemory) & $FF
.100c	8d c8 0a	sta $0ac8			sta 	basePage
.100f	a9 4e		lda #$4e			lda 	#(programMemory) >> 8
.1011	8d c9 0a	sta $0ac9			sta 	1+(basePage)
.1014	a9 00		lda #$00			lda 	#(endOfMemory) & $FF
.1016	8d cc 0a	sta $0acc			sta 	endMemory
.1019	a9 9f		lda #$9f			lda 	#(endOfMemory) >> 8
.101b	8d cd 0a	sta $0acd			sta 	1+(endMemory)
.101e	20 26 10	jsr $1026			jsr 	InitialiseAll 				; initialise everything.
.1021	a2 02		ldx #$02		ldx	#2
.1023	20 cd 27	jsr $27cd		jsr	interactionHandler

;******  Processing file: header/../generated/initialiseall.asm

.1026					InitialiseAll:
.1026	a9 00		lda #$00		lda #0
.1028	a2 00		ldx #$00		ldx	#0
.102a	20 b4 13	jsr $13b4		jsr	assemblerHandler
.102d	a9 00		lda #$00		lda #0
.102f	a2 00		ldx #$00		ldx	#0
.1031	20 f6 14	jsr $14f6		jsr	deviceHandler
.1034	a9 00		lda #$00		lda #0
.1036	a2 00		ldx #$00		ldx	#0
.1038	20 cd 27	jsr $27cd		jsr	interactionHandler
.103b	a9 00		lda #$00		lda #0
.103d	a2 00		ldx #$00		ldx	#0
.103f	20 6d 3e	jsr $3e6d		jsr	mainHandler
.1042	a9 00		lda #$00		lda #0
.1044	a2 00		ldx #$00		ldx	#0
.1046	20 2a 41	jsr $412a		jsr	stringHandler
.1049	a9 00		lda #$00		lda #0
.104b	a2 00		ldx #$00		ldx	#0
.104d	20 c0 49	jsr $49c0		jsr	tokeniserHandler
.1050	a9 00		lda #$00		lda #0
.1052	a2 00		ldx #$00		ldx	#0
.1054	20 91 4d	jsr $4d91		jsr	variableHandler
.1057	60		rts			rts

;******  Return to file: header/00start.asm

.1058					GoTokTest:
.1058	a2 06		ldx #$06		ldx	#6
.105a	20 c0 49	jsr $49c0		jsr	tokeniserHandler

;******  Return to file: header/header.asm


;******  Return to file: basic.asm

.105d					section_end_header:
.105d					section_start_assembler:

;******  Processing file: assembler/assembler.asm


;******  Processing file: assembler/asmoperand.asm

.105d					AsmGetOperand:
.105d	a2 00		ldx #$00			ldx 	#0 							; clear the operand.
.105f	8a		txa				txa
.1060	95 98		sta $98,x			sta 	esInt0,x
.1062	95 a0		sta $a0,x			sta 	esInt1,x
.1064	95 a8		sta $a8,x			sta 	esInt2,x
.1066	95 b0		sta $b0,x			sta 	esInt3,x
.1068	b1 28		lda ($28),y			lda 	(codePtr),y 				; first into X
.106a	aa		tax				tax
.106b	a9 02		lda #$02			lda 	#AMD_ACCIMP
.106d	e0 80		cpx #$80			cpx 	#TOK_EOL 					; if end of line or colon, return implied mode.
.106f	f0 41		beq $10b2			beq 	_AGOExit
.1071	e0 ca		cpx #$ca			cpx 	#TKW_COLON
.1073	f0 3d		beq $10b2			beq 	_AGOExit
.1075	c8		iny				iny 								; consume the token
.1076	a9 00		lda #$00			lda 	#AMD_IMM
.1078	e0 e7		cpx #$e7			cpx 	#TKW_HASH 					; if a hash present, then immediate mode.
.107a	f0 2d		beq $10a9			beq		_AGOEvalExit 				; with an operand.
.107c	e0 a4		cpx #$a4			cpx 	#TKW_LPAREN 				; left bracket ?
.107e	f0 40		beq $10c0			beq 	_AGOIndirect
.1080	e0 01		cpx #$01			cpx 	#$01 						; is it "A" e.g. the variable A.
.1082	d0 0b		bne $108f			bne 	_AGOZeroPage1 				; if not it is zero zero,x zero,y, unpick 1 iny
.1084	b1 28		lda ($28),y			lda 	(codePtr),y 				; get the second character & consume it
.1086	c8		iny				iny
.1087	aa		tax				tax
.1088	a9 02		lda #$02			lda 	#AMD_ACCIMP 				; and return Acc/Implied if it is just A
.108a	e0 3a		cpx #$3a			cpx 	#$3A
.108c	f0 24		beq $10b2			beq 	_AGOExit
.108e	88		dey				dey 								; unpick 2 iny
.108f					_AGOZeroPage1:
.108f	88		dey				dey
.1090	a9 00		lda #$00			lda 	#0 							; get the address into esInt0/1
.1092	a2 0a		ldx #$0a		ldx	#10
.1094	20 6d 3e	jsr $3e6d		jsr	mainHandler
.1097	20 ef 10	jsr $10ef			jsr 	AsmGetIndexing
.109a	a9 01		lda #$01			lda 	#AMD_ZERO
.109c	90 14		bcc $10b2			bcc 	_AGOExit
.109e	a9 05		lda #$05			lda 	#AMD_ZEROX
.10a0	e0 00		cpx #$00			cpx 	#0
.10a2	f0 0e		beq $10b2			beq 	_AGOExit
.10a4	a9 09		lda #$09			lda 	#AMD_ZEROY
.10a6	4c b2 10	jmp $10b2			jmp 	_AGOExit
.10a9					_AGOEvalExit:
.10a9	48		pha				pha
.10aa	a9 00		lda #$00			lda 	#0 							; evaluate operand in root.
.10ac	a2 0a		ldx #$0a		ldx	#10
.10ae	20 6d 3e	jsr $3e6d		jsr	mainHandler
.10b1	68		pla				pla
.10b2					_AGOExit:
.10b2	48		pha				pha 								; save the mode
.10b3	a5 a8		lda $a8				lda 	esInt2 						; check the operand is zero.
.10b5	05 b0		ora $b0				ora 	esInt3
.10b7	d0 02		bne $10bb			bne 	_AGOValue
.10b9	68		pla				pla
.10ba	60		rts				rts
.10bb					_AGOValue:
.10bb	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.10bd	20 18 15	jsr $1518		jsr	errorHandler
.10c0					_AGOIndirect:
.10c0	a9 00		lda #$00			lda 	#0 							; evaluate operand in root.
.10c2	a2 0a		ldx #$0a		ldx	#10
.10c4	20 6d 3e	jsr $3e6d		jsr	mainHandler
.10c7	b1 28		lda ($28),y			lda 	(codePtr),y 				; does ) follow ? if so might be ) or ),Y
.10c9	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.10cb	f0 11		beq $10de			beq 	_AGOIndIndY
.10cd	20 ef 10	jsr $10ef			jsr 	ASMGetIndexing 				; must be ,X)
.10d0	90 39		bcc $110b			bcc 	AGISyntax
.10d2	e0 00		cpx #$00			cpx 	#0
.10d4	d0 35		bne $110b			bne 	AGISyntax
.10d6	a2 04		ldx #$04		ldx	#4
.10d8	20 6d 3e	jsr $3e6d		jsr	mainHandler
.10db	a9 0d		lda #$0d			lda 	#AMD_ZEROINDX
.10dd	60		rts				rts
.10de					_AGOIndIndY:
.10de	c8		iny				iny
.10df	20 ef 10	jsr $10ef			jsr 	ASMGetIndexing 				; get indexing if any
.10e2	a9 08		lda #$08			lda 	#AMD_ZEROIND
.10e4	90 cc		bcc $10b2			bcc 	_AGOExit 					; none then exit
.10e6	e0 00		cpx #$00			cpx 	#0 							; must be ,Y
.10e8	f0 21		beq $110b			beq 	AGISyntax
.10ea	a9 04		lda #$04			lda 	#AMD_ZEROINDY
.10ec	4c b2 10	jmp $10b2			jmp 	_AGOExit
.10ef					AsmGetIndexing:
.10ef	b1 28		lda ($28),y			lda 	(codePtr),y 				; check for comma
.10f1	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.10f3	18		clc				clc
.10f4	d0 14		bne $110a			bne 	_AGIExit 					; no comma, return with CC
.10f6	c8		iny				iny 								; get what SHOULD be X or Y
.10f7	b1 28		lda ($28),y			lda 	(codePtr),y  				; read it
.10f9	38		sec				sec 								; subtract 6 bit ASCII of X
.10fa	e9 18		sbc #$18			sbc 	#"X" & $3F
.10fc	c9 02		cmp #$02			cmp 	#2 							; if unsigned >= 2 then error
.10fe	b0 0b		bcs $110b			bcs 	AGISyntax
.1100	aa		tax				tax 								; put in index
.1101	c8		iny				iny 								; get what follows that, should be the $3A marker
.1102	b1 28		lda ($28),y			lda 	(codePtr),y
.1104	c8		iny				iny
.1105	c9 3a		cmp #$3a			cmp 	#$3A
.1107	d0 02		bne $110b			bne 	AGISyntax
.1109	38		sec				sec 								; return CS and index mode in X
.110a					_AGIExit:
.110a	60		rts				rts
.110b					AGISyntax:
.110b	a2 02		ldx #$02			ldx 	#ErrorID_syntax
.110d	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: assembler/assembler.asm


;******  Processing file: assembler/asmwrite.asm

.0af2					finalOpcode:
>0af2							.fill 	1
.1110					AsmWriteInstruction:
.1110	8d f2 0a	sta $0af2			sta 	finalOpcode					; save opcode.
.1113	98		tya				tya
.1114	48		pha				pha
.1115	ad 38 0a	lda $0a38			lda 	SingleLetterVar+("O"-"A")*4	; check O
.1118	29 02		and #$02			and 	#2
.111a	f0 2d		beq $1149			beq 	_ASMWNoEcho 				; if zero then don't echo.
.111c	ad 3d 0a	lda $0a3d			lda 	SingleLetterVar+("P"-"A")*4+1 ; write address in P
.111f	20 84 11	jsr $1184			jsr 	AWIWriteHex
.1122	ad 3c 0a	lda $0a3c			lda 	SingleLetterVar+("P"-"A")*4
.1125	20 84 11	jsr $1184			jsr 	AWIWriteHex
.1128	ad f2 0a	lda $0af2			lda 	finalOpcode 				; write opcode
.112b	20 7d 11	jsr $117d			jsr 	AWIWriteHexSpace
.112e	e0 00		cpx #$00			cpx 	#0
.1130	f0 0e		beq $1140			beq 	_ASMWEchoExit
.1132	a5 98		lda $98				lda 	esInt0
.1134	20 7d 11	jsr $117d			jsr 	AWIWriteHexSpace
.1137	e0 01		cpx #$01			cpx 	#1
.1139	f0 05		beq $1140			beq 	_ASMWEchoExit
.113b	a5 a0		lda $a0				lda 	esInt1
.113d	20 7d 11	jsr $117d			jsr 	AWIWriteHexSpace
.1140					_ASMWEchoExit:
.1140	8a		txa				txa
.1141	48		pha				pha
.1142	a2 06		ldx #$06		ldx	#6
.1144	20 f6 14	jsr $14f6		jsr	deviceHandler
.1147	68		pla				pla
.1148	aa		tax				tax
.1149					_ASMWNoEcho:
.1149	ad f2 0a	lda $0af2			lda 	finalOpcode
.114c	20 64 11	jsr $1164			jsr 	AsmWriteByte
.114f	e0 00		cpx #$00			cpx 	#0
.1151	f0 0e		beq $1161			beq 	_ASMWExit
.1153	a5 98		lda $98				lda 	esInt0
.1155	20 64 11	jsr $1164			jsr 	AsmWriteByte
.1158	e0 01		cpx #$01			cpx 	#1
.115a	f0 05		beq $1161			beq 	_ASMWExit
.115c	a5 a0		lda $a0				lda 	esInt1
.115e	20 64 11	jsr $1164			jsr 	AsmWriteByte
.1161					_ASMWExit:
.1161	68		pla				pla
.1162	a8		tay				tay
.1163	60		rts				rts
.1164					AsmWriteByte:
.1164	a0 00		ldy #$00			ldy 	#0
.1166	48		pha				pha
.1167	ad 3c 0a	lda $0a3c			lda 	SingleLetterVar+("P"-"A")*4 ; copy address to temp0
.116a	85 2a		sta $2a				sta 	temp0
.116c	ad 3d 0a	lda $0a3d			lda 	SingleLetterVar+("P"-"A")*4+1
.116f	85 2b		sta $2b				sta 	temp0+1
.1171	68		pla				pla 								; write out the byte.
.1172	91 2a		sta ($2a),y			sta 	(temp0),y
.1174	ee 3c 0a	inc $0a3c			inc 	SingleLetterVar+("P"-"A")*4	; increment P
.1177	d0 03		bne $117c			bne 	_AWBNoCarry
.1179	ee 3d 0a	inc $0a3d			inc 	SingleLetterVar+("P"-"A")*4+1
.117c					_AWBNoCarry:
.117c	60		rts				rts
.117d					AWIWriteHexSpace:
.117d	48		pha				pha
.117e	a9 20		lda #$20			lda 	#" "
.1180	20 97 11	jsr $1197			jsr 	AWIPrintChar
.1183	68		pla				pla
.1184					AWIWriteHex:
.1184	48		pha				pha
.1185	4a		lsr a				lsr 	a
.1186	4a		lsr a				lsr 	a
.1187	4a		lsr a				lsr 	a
.1188	4a		lsr a				lsr 	a
.1189	20 8d 11	jsr $118d			jsr 	AWIPrintNibble
.118c	68		pla				pla
.118d					AWIPrintNibble:
.118d	29 0f		and #$0f			and 	#15
.118f	c9 0a		cmp #$0a			cmp 	#10
.1191	90 02		bcc $1195			bcc 	_AWIPNDigit
.1193	69 06		adc #$06			adc 	#6
.1195					_AWIPNDigit:
.1195	69 30		adc #$30			adc 	#48
.1197					AWIPrintChar:
.1197	85 32		sta $32				sta 	tempShort
.1199	8a		txa				txa
.119a	48		pha				pha
.119b	a5 32		lda $32				lda 	tempShort
.119d	a2 16		ldx #$16		ldx	#22
.119f	20 f6 14	jsr $14f6		jsr	deviceHandler
.11a2	68		pla				pla
.11a3	aa		tax				tax
.11a4	60		rts				rts

;******  Return to file: assembler/assembler.asm


;******  Processing file: assembler/assemblecmd.asm

.0af3					asmToken:
>0af3							.fill 	1
.0af4					asmMode:
>0af4							.fill 	1 							; esInt0/1
.0af5					asmBaseOpcode:
>0af5							.fill 	1
.11a5					AssembleOneInstruction:
.11a5	8d f3 0a	sta $0af3			sta 	asmToken 					; save the token
.11a8	aa		tax				tax
.11a9	bd 72 11	lda $1172,x			lda 	OpcodeTable-TKA_GROUP1,x 	; get the base opcode.
.11ac	8d f5 0a	sta $0af5			sta 	asmBaseOpcode
.11af	20 5d 10	jsr $105d			jsr 	AsmGetOperand 				; identify the address mode and operand where applicable.
.11b2	8d f4 0a	sta $0af4			sta 	asmMode
.11b5	a5 a0		lda $a0				lda 	esInt1 						; check if this is a three byte operand.
.11b7	d0 05		bne $11be			bne 	_AOIThreeBytes 				; if so, we have to use three byte
.11b9	20 d4 11	jsr $11d4			jsr 	AssembleAttempt 			; try to assemble token/mode/operand (2 bytes)
.11bc	b0 10		bcs $11ce			bcs 	_AOISuccess 				; worked ok.
.11be					_AOIThreeBytes:
.11be	ae f4 0a	ldx $0af4			ldx 	asmMode 					; convert mode to 3 byte version, where possible.
.11c1	bd f8 11	lda $11f8,x			lda 	AbsoluteVersionTable,x
.11c4	30 09		bmi $11cf			bmi 	_AOIError					; not possible, no equivalent.
.11c6	8d f4 0a	sta $0af4			sta 	asmMode
.11c9	20 d4 11	jsr $11d4			jsr 	AssembleAttempt 			; try to assemble token/mode/operand (3 bytes)
.11cc	90 01		bcc $11cf			bcc 	_AOIError 					; didn't work.
.11ce					_AOISuccess:
.11ce	60		rts				rts
.11cf					_AOIError:
.11cf	a2 24		ldx #$24			ldx 	#ErrorID_Assembler
.11d1	20 18 15	jsr $1518		jsr	errorHandler
.11d4					AssembleAttempt:
.11d4	20 dd 11	jsr $11dd			jsr 	_AADispatch 				; go to the code which dispatches to the appropriate
.11d7	b0 03		bcs $11dc			bcs 	_AAExit 					; exit if carry set, e.g. was successful
.11d9	20 87 13	jsr $1387			jsr 	AssembleSpecialCase
.11dc					_AAExit:
.11dc	60		rts				rts
.11dd					_AADispatch:
.11dd	ad f3 0a	lda $0af3			lda 	asmToken
.11e0	c9 b7		cmp #$b7			cmp 	#TKA_GROUP4
.11e2	b0 11		bcs $11f5			bcs 	_AAGroup4
.11e4	c9 ae		cmp #$ae			cmp 	#TKA_GROUP3
.11e6	b0 0a		bcs $11f2			bcs 	_AAGroup3
.11e8	c9 9c		cmp #$9c			cmp 	#TKA_GROUP2
.11ea	b0 03		bcs $11ef			bcs 	_AAGroup2
.11ec	4c cd 12	jmp $12cd			jmp 	AssembleGroup1
.11ef					_AAGroup2:
.11ef	4c 28 13	jmp $1328			jmp 	AssembleGroup2
.11f2					_AAGroup3:
.11f2	4c 49 13	jmp $1349			jmp 	AssembleGroup3
.11f5					_AAGroup4:
.11f5	4c 7d 13	jmp $137d			jmp 	AssembleGroup4
.11f8					AbsoluteVersionTable:
>11f8	ff						.byte	$FF 			; fail AMD_IMM
>11f9	03						.byte	AMD_ABS 		; absolute AMD_ZERO
>11fa	ff						.byte	$FF 			; fail AMD_ACCIMP
>11fb	ff						.byte	$FF 			; fail AMD_ABS
>11fc	ff						.byte 	$FF 			; fail AMD_ZEROINDY
>11fd	07						.byte	AMD_ABSX 		; absolute AMD_ZEROX
>11fe	ff						.byte	$FF 			; fail AMD_ABSY
>11ff	ff						.byte	$FF 			; fail AMD_ABSX
>1200	0a						.byte	AMD_ABSIND 		; absolute AMD_ZEROIND
>1201	06						.byte	AMD_ABSY 		; absolute AMD_ZEROY
>1202	ff						.byte	$FF 			; fail AMD_ABSIND
>1203	ff						.byte	$FF 			; fail AMD_ABSINDX
>1204	ff						.byte	$FF 			; fail AMD_REL
>1205	0b						.byte 	AMD_ABSINDX 	; absolute AMD_ZEROINDX

;******  Processing file: assembler/../generated/asmtables.inc

.1206					OpcodeTable:
>1206	01					.byte	$01			; $94 ora
>1207	21					.byte	$21			; $95 (and)
>1208	41					.byte	$41			; $96 eor
>1209	61					.byte	$61			; $97 adc
>120a	81					.byte	$81			; $98 sta
>120b	a1					.byte	$a1			; $99 lda
>120c	c1					.byte	$c1			; $9a cmp
>120d	e1					.byte	$e1			; $9b sbc
>120e	02					.byte	$02			; $9c asl
>120f	22					.byte	$22			; $9d rol
>1210	42					.byte	$42			; $9e lsr
>1211	62					.byte	$62			; $9f ror
>1212	82					.byte	$82			; $a0 stx
>1213	a2					.byte	$a2			; $a1 ldx
>1214	c2					.byte	$c2			; $a2 dec
>1215	e2					.byte	$e2			; $a3 inc
>1216	60					.byte	$60			; $a4 stz
>1217	20					.byte	$20			; $a5 bit
>1218	80					.byte	$80			; $a6 sty
>1219	a0					.byte	$a0			; $a7 ldy
>121a	c0					.byte	$c0			; $a8 cpy
>121b	e0					.byte	$e0			; $a9 cpx
>121c	00					.byte	$00			; $aa tsb
>121d	10					.byte	$10			; $ab trb
>121e	14					.byte	$14			; $ac jsr
>121f	40					.byte	$40			; $ad jmp
>1220	10					.byte	$10			; $ae bpl
>1221	30					.byte	$30			; $af bmi
>1222	50					.byte	$50			; $b0 bvc
>1223	70					.byte	$70			; $b1 bvs
>1224	90					.byte	$90			; $b2 bcc
>1225	b0					.byte	$b0			; $b3 bcs
>1226	d0					.byte	$d0			; $b4 bne
>1227	f0					.byte	$f0			; $b5 beq
>1228	80					.byte	$80			; $b6 bra
>1229	00					.byte	$00			; $b7 brk
>122a	08					.byte	$08			; $b8 php
>122b	18					.byte	$18			; $b9 clc
>122c	28					.byte	$28			; $ba plp
>122d	38					.byte	$38			; $bb sec
>122e	40					.byte	$40			; $bc rti
>122f	48					.byte	$48			; $bd pha
>1230	58					.byte	$58			; $be cli
>1231	5a					.byte	$5a			; $bf phy
>1232	60					.byte	$60			; $c0 rts
>1233	68					.byte	$68			; $c1 pla
>1234	78					.byte	$78			; $c2 sei
>1235	7a					.byte	$7a			; $c3 ply
>1236	88					.byte	$88			; $c4 dey
>1237	8a					.byte	$8a			; $c5 txa
>1238	98					.byte	$98			; $c6 tya
>1239	9a					.byte	$9a			; $c7 txs
>123a	a8					.byte	$a8			; $c8 tay
>123b	aa					.byte	$aa			; $c9 tax
>123c	b8					.byte	$b8			; $ca clv
>123d	ba					.byte	$ba			; $cb tsx
>123e	c8					.byte	$c8			; $cc iny
>123f	ca					.byte	$ca			; $cd dex
>1240	d8					.byte	$d8			; $ce cld
>1241	da					.byte	$da			; $cf phx
>1242	e8					.byte	$e8			; $d0 inx
>1243	ea					.byte	$ea			; $d1 nop
>1244	f8					.byte	$f8			; $d2 sed
>1245	fa					.byte	$fa			; $d3 plx
.1246					Group2OpcodeAvailability:
>1246	ae					.byte	$ae			; $9c asl $02
>1247	ae					.byte	$ae			; $9d rol $22
>1248	ae					.byte	$ae			; $9e lsr $42
>1249	ae					.byte	$ae			; $9f ror $62
>124a	0a					.byte	$0a			; $a0 stx $82
>124b	0b					.byte	$0b			; $a1 ldx $a2
>124c	aa					.byte	$aa			; $a2 dec $c2
>124d	aa					.byte	$aa			; $a3 inc $e2
>124e	22					.byte	$22			; $a4 stz $60
>124f	aa					.byte	$aa			; $a5 bit $20
>1250	2a					.byte	$2a			; $a6 sty $80
>1251	ab					.byte	$ab			; $a7 ldy $a0
>1252	2b					.byte	$2b			; $a8 cpy $c0
>1253	0b					.byte	$0b			; $a9 cpx $e0
>1254	0a					.byte	$0a			; $aa tsb $00
>1255	0a					.byte	$0a			; $ab trb $10
>1256	08					.byte	$08			; $ac jsr $14
>1257	08					.byte	$08			; $ad jmp $40
.1258					AssemblerSpecialCases:
>1258	ad 0a 6c				.byte	$ad,10,$6c		; jmp (abs)
>125b	ad 0b 7c				.byte	$ad,11,$7c		; jmp (abs,x)
>125e	a1 06 be				.byte	$a1,6,$be		; ldx abs,y
>1261	a1 09 b6				.byte	$a1,9,$b6		; ldx zp,y
>1264	a0 09 96				.byte	$a0,9,$96		; stx zp,y
>1267	a3 02 1a				.byte	$a3,2,$1a		; inc acc
>126a	a2 02 3a				.byte	$a2,2,$3a		; dec acc
>126d	a5 00 89				.byte	$a5,0,$89		; bit #
>1270	a4 03 9c				.byte	$a4,3,$9c		; stz abs
>1273	a4 07 9e				.byte	$a4,7,$9e		; stz abs,x
>1276	00					.byte	0

;******  Return to file: assembler/assemblecmd.asm


;******  Return to file: assembler/assembler.asm


;******  Processing file: assembler/assemblelabel.asm

.1277					AssembleLabel:
.1277	b1 28		lda ($28),y			lda 	(codePtr),y 				; check it's followed by a variable name.
.1279	c9 3a		cmp #$3a			cmp 	#$3A
.127b	b0 4b		bcs $12c8			bcs 	_ALSyntax
.127d	a9 00		lda #$00			lda 	#0							; get a variable name on to stack:0
.127f	a2 02		ldx #$02		ldx	#2
.1281	20 91 4d	jsr $4d91		jsr	variableHandler
.1284	a5 90		lda $90				lda 	esType 						; check integer reference
.1286	c9 80		cmp #$80			cmp 	#$80
.1288	d0 3e		bne $12c8			bne 	_ALSyntax
.128a	a5 98		lda $98				lda 	esInt0 						; copy that reference address to temp0
.128c	85 2a		sta $2a				sta 	temp0
.128e	a5 a0		lda $a0				lda 	esInt1
.1290	85 2b		sta $2b				sta 	temp0+1
.1292	98		tya				tya
.1293	48		pha				pha
.1294	ad 38 0a	lda $0a38			lda 	SingleLetterVar+("O"-"A")*4	; are we in Pass 2
.1297	4a		lsr a				lsr 	a
.1298	90 11		bcc $12ab			bcc 	_ALWrite
.129a	a0 00		ldy #$00			ldy 	#0
.129c	ad 3c 0a	lda $0a3c			lda 	SingleLetterVar+("P"-"A")*4 ; compare the value in P to the variable
.129f	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.12a1	d0 20		bne $12c3			bne 	_ALChanged
.12a3	c8		iny				iny
.12a4	ad 3d 0a	lda $0a3d			lda 	SingleLetterVar+("P"-"A")*4+1
.12a7	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.12a9	d0 18		bne $12c3			bne 	_ALChanged
.12ab					_ALWrite:
.12ab	a0 00		ldy #$00			ldy 	#0
.12ad	ad 3c 0a	lda $0a3c			lda 	SingleLetterVar+("P"-"A")*4 ; copy the value in P into the variable
.12b0	91 2a		sta ($2a),y			sta 	(temp0),y
.12b2	ad 3d 0a	lda $0a3d			lda 	SingleLetterVar+("P"-"A")*4+1
.12b5	c8		iny				iny
.12b6	91 2a		sta ($2a),y			sta 	(temp0),y
.12b8	a9 00		lda #$00			lda 	#0
.12ba	c8		iny				iny
.12bb	91 2a		sta ($2a),y			sta 	(temp0),y
.12bd	c8		iny				iny
.12be	91 2a		sta ($2a),y			sta 	(temp0),y
.12c0	68		pla				pla
.12c1	a8		tay				tay
.12c2	60		rts				rts
.12c3					_ALChanged:
.12c3	a2 26		ldx #$26			ldx 	#ErrorID_Label
.12c5	20 18 15	jsr $1518		jsr	errorHandler
.12c8					_ALSyntax:
.12c8	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.12ca	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: assembler/assembler.asm


;******  Processing file: assembler/subgroup.asm

.12cd					AssembleGroup1:
.12cd	ad f3 0a	lda $0af3			lda 	asmToken 					; firstly, we throw out STA immediate
.12d0	c9 98		cmp #$98			cmp 	#TKW_STA
.12d2	d0 07		bne $12db			bne 	_AG1NotStoreImm
.12d4	ad f4 0a	lda $0af4			lda 	asmMode
.12d7	c9 00		cmp #$00			cmp 	#AMD_IMM
.12d9	f0 2c		beq $1307			beq 	AG1ModeError
.12db					_AG1NotStoreImm:
.12db	ae f4 0a	ldx $0af4			ldx 	asmMode						; get mode into X.
.12de	bd 0c 13	lda $130c,x			lda		AMDOperandSize,X 			; get the size of the operand and push on stack
.12e1	48		pha				pha
.12e2	f0 23		beq $1307			beq 	AG1ModeError 				; if the size is zero, the mode must be Accumulator
.12e4	e0 00		cpx #$00			cpx 	#0 							; if the mode is zero, e.g. immediate
.12e6	d0 02		bne $12ea			bne 	_AG1NotImmediate
.12e8	a2 02		ldx #$02			ldx 	#2 							; then we use offset 2 here. This is how the 6502
.12ea					_AG1NotImmediate:
.12ea	e0 0d		cpx #$0d			cpx 	#AMD_ZEROINDX 				; (zero,x) uses slot 0.
.12ec	d0 02		bne $12f0			bne 	_AG1NotZX
.12ee	a2 00		ldx #$00			ldx 	#0
.12f0					_AG1NotZX:
.12f0	68		pla				pla 								; restore length
.12f1	e0 09		cpx #$09			cpx 	#9 							; anything > 8 fails.
.12f3	b0 10		bcs $1305			bcs 	AG1Fail
.12f5					AG1ReturnValue:
.12f5	85 32		sta $32				sta 	tempShort 					; save size of operand
.12f7	18		clc				clc
.12f8	bd 1a 13	lda $131a,x			lda 	AMDOffsetFromBase,X 		; get the offset for the address mode.
.12fb	6d f5 0a	adc $0af5			adc 	asmBaseOpcode 				; add the base opcode.
.12fe	a6 32		ldx $32				ldx 	tempShort 					; length in X
.1300	20 10 11	jsr $1110			jsr 	AsmWriteInstruction 		; output instruction.
.1303	38		sec				sec
.1304	60		rts				rts
.1305					AG1Fail:
.1305	18		clc				clc
.1306	60		rts				rts
.1307					AG1ModeError:
.1307	a2 24		ldx #$24			ldx 	#ErrorID_Assembler
.1309	20 18 15	jsr $1518		jsr	errorHandler
.130c					AMDOperandSize:
>130c	01 01 00 02					.byte 	1,1,0,2
>1310	01 01 02 02					.byte 	1,1,2,2
>1314	01 01 02 02					.byte 	1,1,2,2
>1318	01 01						.byte 	1,1
.131a					AMDOffsetFromBase:
>131a	00 04 08 0c					.byte 	0,4,8,12
>131e	10 14 18 1c					.byte	16,20,24,28
>1322	11 00 00 00					.byte 	17,0,0,0
>1326	00 00						.byte 	0,0
.1328					AssembleGroup2:
.1328	ad f4 0a	lda $0af4			lda 	asmMode 					; get the mode; if >= 8 cannot be a legit group 2
.132b	c9 08		cmp #$08			cmp 	#8
.132d	b0 18		bcs $1347			bcs 	_AG2Fail
.132f	85 2a		sta $2a				sta 	temp0 						; save in temp9
.1331	ae f3 0a	ldx $0af3			ldx 	asmToken					; get token in X, then get the availability flags for it
.1334	bd aa 11	lda $11aa,x			lda 	Group2OpcodeAvailability-TKA_GROUP2,x
.1337					_AG2Shift:
.1337	4a		lsr a				lsr 	a
.1338	c6 2a		dec $2a				dec 	temp0
.133a	10 fb		bpl $1337			bpl 	_AG2Shift
.133c	90 09		bcc $1347			bcc 	_AG2Fail 					; cannot do that instruction w/that opcode.
.133e	ae f4 0a	ldx $0af4			ldx  	asmMode 					; mode in X
.1341	bd 0c 13	lda $130c,x			lda		AMDOperandSize,X 			; get the size of the operand in A
.1344	4c f5 12	jmp $12f5			jmp 	AG1ReturnValue 				; and use that with Group 1's exit code
.1347					_AG2Fail:
.1347	18		clc				clc
.1348	60		rts				rts
.1349					AssembleGroup3:
.1349	ad 38 0a	lda $0a38			lda 	SingleLetterVar+("O"-"A")*4	; check bit 0 (pass) of O
.134c	4a		lsr a				lsr 	a
.134d	a9 00		lda #$00			lda 	#0 							; if clear, e.g. pass 1, use default zero.
.134f	90 21		bcc $1372			bcc 	_AG3Default
.1351	38		sec				sec	 								; calculate branch offset
.1352	a5 98		lda $98				lda		esInt0
.1354	ed 3c 0a	sbc $0a3c			sbc 	SingleLetterVar+("P"-"A")*4
.1357	aa		tax				tax
.1358	a5 a0		lda $a0				lda		esInt1
.135a	ed 3d 0a	sbc $0a3d			sbc 	SingleLetterVar+("P"-"A")*4+1
.135d	85 a0		sta $a0				sta 	esInt1
.135f	8a		txa				txa 								; add 126, now 128 too many.
.1360	18		clc				clc 								; we can use this to check the range
.1361	69 7e		adc #$7e			adc 	#126
.1363	85 98		sta $98				sta 	esInt0
.1365	90 02		bcc $1369			bcc 	_AG3NoCarry
.1367	e6 a0		inc $a0				inc 	esInt1
.1369					_AG3NoCarry:
.1369	a5 a0		lda $a0				lda 	esInt1 						; check in range.
.136b	d0 0b		bne $1378			bne 	_AG3Range
.136d	a5 98		lda $98				lda 	esInt0 						; fix up branch distance
.136f	38		sec				sec
.1370	e9 80		sbc #$80			sbc 	#128
.1372					_AG3Default:
.1372	85 98		sta $98				sta 	esInt0
.1374					_AG3ExitOk:
.1374	a2 01		ldx #$01			ldx 	#1 							; one opcode, use AG4 Code
.1376	d0 07		bne $137f			bne 	AG4Write
.1378					_AG3Range:
.1378	a2 25		ldx #$25			ldx 	#ErrorID_Branch
.137a	20 18 15	jsr $1518		jsr	errorHandler
.137d					AssembleGroup4:
.137d	a2 00		ldx #$00			ldx 	#0 							; no parameters in the opcode.
.137f					AG4Write:
.137f	ad f5 0a	lda $0af5			lda 	asmBaseOpcode				; the opcode is the opcode base.
.1382	20 10 11	jsr $1110			jsr 	AsmWriteInstruction 		; output instruction.
.1385	38		sec				sec
.1386	60		rts				rts
.1387					AssembleSpecialCase:
.1387	a2 00		ldx #$00			ldx 	#0
.1389					_ASCScan:
.1389	bd 58 12	lda $1258,x			lda 	AssemblerSpecialCases,x 	; scan token and mode for match
.138c	cd f3 0a	cmp $0af3			cmp 	asmToken
.138f	d0 08		bne $1399			bne 	_ASCNext
.1391	bd 59 12	lda $1259,x			lda 	AssemblerSpecialCases+1,x
.1394	cd f4 0a	cmp $0af4			cmp 	asmMode
.1397	f0 0a		beq $13a3			beq 	_ASCFound
.1399					_ASCNext:
.1399	e8		inx				inx									; next entry
.139a	e8		inx				inx
.139b	e8		inx				inx
.139c	bd 58 12	lda $1258,x			lda 	AssemblerSpecialCases,x 	; until table ends
.139f	d0 e8		bne $1389			bne 	_ASCScan
.13a1	18		clc				clc
.13a2	60		rts				rts
.13a3					_ASCFound:
.13a3	bd 5a 12	lda $125a,x			lda 	AssemblerSpecialCases+2,x 	; get the new opcode.
.13a6	48		pha				pha
.13a7	ae f4 0a	ldx $0af4			ldx  	asmMode 					; mode in X
.13aa	bd 0c 13	lda $130c,x			lda		AMDOperandSize,X 			; get the size of the operand in X
.13ad	aa		tax				tax
.13ae	68		pla				pla 								; opcode back
.13af	20 10 11	jsr $1110			jsr 	AsmWriteInstruction 		; output instruction.
.13b2	38		sec				sec
.13b3	60		rts				rts

;******  Return to file: assembler/assembler.asm

.13b4					assemblerHandler:
.13b4	7c b7 13	jmp ($13b7,x)			jmp 	(assemblerVectors,x)
.13b7					assemblerVectors:
>13b7	bd 13					.word _DummyControlHandler ; index 0
>13b9	a5 11					.word AssembleOneInstruction ; index 2
>13bb	77 12					.word AssembleLabel        ; index 4
.13bd					_DummyControlHandler:
.13bd	60		rts			rts

;******  Return to file: basic.asm

.13be					section_end_assembler:
.13be					section_start_device:

;******  Processing file: device/device.asm


;******  Processing file: device/option_x16/x16break.asm

.13be					X16Break:
.13be	20 e1 ff	jsr $ffe1			jsr 	$FFE1
.13c1	f0 01		beq $13c4			beq 	_IsBreak
.13c3	60		rts				rts
.13c4					_IsBreak:
.13c4	a2 21		ldx #$21			ldx 	#ErrorID_Break
.13c6	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: device/device.asm


;******  Processing file: device/option_x16/x16file.asm

.13c9					ExternSave:
.13c9	98		tya				tya
.13ca	48		pha				pha
.13cb	20 19 14	jsr $1419			jsr 	ExternGetLength 			; get length of file into A name YX
.13ce	20 bd ff	jsr $ffbd			jsr 	$FFBD 						; set name
.13d1	a9 01		lda #$01			lda 	#1
.13d3	a2 08		ldx #$08			ldx 	#8	 						; device #8
.13d5	a0 00		ldy #$00			ldy 	#0
.13d7	20 ba ff	jsr $ffba			jsr 	$FFBA 						; set LFS
.13da	a5 99		lda $99				lda 	esInt0+1 					; copy start of save address to temp0
.13dc	85 2a		sta $2a				sta 	temp0
.13de	a5 a1		lda $a1				lda 	esInt1+1
.13e0	85 2b		sta $2b				sta 	temp0+1
.13e2	a6 9a		ldx $9a				ldx 	esInt0+2 					; end address
.13e4	a4 a2		ldy $a2				ldy 	esInt1+2
.13e6	a9 2a		lda #$2a			lda 	#temp0 						; ref to start address
.13e8	20 d8 ff	jsr $ffd8			jsr 	$FFD8 						; save
.13eb	b0 03		bcs $13f0			bcs 	_ESSave
.13ed	68		pla				pla
.13ee	a8		tay				tay
.13ef	60		rts				rts
.13f0					_ESSave:
.13f0	a2 1f		ldx #$1f			ldx 	#ErrorID_Save
.13f2	20 18 15	jsr $1518		jsr	errorHandler
.13f5					ExternLoad:
.13f5	98		tya				tya
.13f6	48		pha				pha
.13f7	20 19 14	jsr $1419			jsr 	ExternGetLength 			; get length of file into A name YX
.13fa	20 bd ff	jsr $ffbd			jsr 	$FFBD 						; set name
.13fd	a9 01		lda #$01			lda 	#1
.13ff	a2 08		ldx #$08			ldx 	#8	 						; device #8
.1401	a0 00		ldy #$00			ldy 	#0
.1403	20 ba ff	jsr $ffba			jsr 	$FFBA 						; set LFS
.1406	a6 99		ldx $99				ldx 	esInt0+1 					; load address
.1408	a4 a1		ldy $a1				ldy 	esInt1+1
.140a	a9 00		lda #$00			lda 	#0 							; load command
.140c	20 d5 ff	jsr $ffd5			jsr 	$FFD5
.140f	b0 03		bcs $1414			bcs 	_ESLoad
.1411	68		pla				pla
.1412	a8		tay				tay
.1413	60		rts				rts
.1414					_ESLoad:
.1414	a2 20		ldx #$20			ldx 	#ErrorID_Load
.1416	20 18 15	jsr $1518		jsr	errorHandler
.1419					ExternGetLength:
.1419	a5 98		lda $98				lda 	esInt0 						; length into A.
.141b	85 2a		sta $2a				sta 	temp0
.141d	a5 a0		lda $a0				lda 	esInt1
.141f	85 2b		sta $2b				sta 	temp0+1
.1421	a0 00		ldy #$00			ldy 	#0
.1423	b1 2a		lda ($2a),y			lda 	(temp0),y
.1425	a6 98		ldx $98				ldx 	esInt0 						; name into YX
.1427	a4 a0		ldy $a0				ldy 	esInt1
.1429	e8		inx				inx 								; advance over the length pointer.
.142a	d0 01		bne $142d			bne 	_ESNoCarry
.142c	c8		iny				iny
.142d					_ESNoCarry:
.142d	60		rts				rts

;******  Return to file: device/device.asm


;******  Processing file: device/option_x16/x16io.asm

=240					MaxLineInputSize = 240
.0af6					bufferCount:
>0af6							.fill 	0
.0af6					bufferStorage:
>0af6							.fill 	MaxLineInputSize
.142e					IOControlHandler:
.142e	c9 00		cmp #$00			cmp 	#0
.1430	d0 12		bne $1444			bne		_CHExit
.1432	a9 0f		lda #$0f			lda 	#15 						; switch to upper/lower case mode
.1434	20 5d 14	jsr $145d			jsr 	IOPrintChar
.1437	a9 02		lda #$02			lda 	#2 							; green on black and clear screen
.1439	20 89 14	jsr $1489			jsr 	IOInk
.143c	a9 00		lda #$00			lda 	#0
.143e	20 9d 14	jsr $149d			jsr 	IOPaper
.1441	20 45 14	jsr $1445			jsr 	IOClearScreen
.1444					_CHExit:
.1444	60		rts				rts
.1445					IOClearScreen:
.1445	48		pha				pha
.1446	a9 93		lda #$93			lda	 	#147 						; char code $93 clears screen
.1448	20 5d 14	jsr $145d			jsr 	IOPrintChar
.144b	68		pla				pla
.144c	60		rts				rts
.144d					IONewLine:
.144d	48		pha				pha
.144e	a9 0d		lda #$0d			lda 	#13
.1450	20 5d 14	jsr $145d			jsr 	IOPrintChar
.1453	68		pla				pla
.1454	60		rts				rts
.1455					IOTab:
.1455	48		pha				pha
.1456	a9 20		lda #$20			lda 	#32
.1458	20 5d 14	jsr $145d			jsr 	IOPrintChar
.145b	68		pla				pla
.145c	60		rts				rts
.145d					IOPrintAscii:
.145d					IOPrintChar:
.145d	aa		tax				tax 								; save in X so we can save Y
.145e	5a		phy				phy
.145f	8a		txa				txa
.1460	c9 08		cmp #$08			cmp 	#8 							; make BS (8) onto CHR$(14) which is the
.1462	d0 02		bne $1466			bne 	_IOPCNotBS 					; Commodore/X16 backspace code.
.1464	a9 14		lda #$14			lda 	#$14
.1466					_IOPCNotBS:
.1466	20 d2 ff	jsr $ffd2			jsr 	$FFD2 						; CBM OS Call.
.1469	7a		ply				ply
.146a	60		rts				rts
.146b					IOInkey:
.146b	98		tya				tya
.146c	48		pha				pha
.146d	20 e4 ff	jsr $ffe4			jsr 	$FFE4
.1470	85 32		sta $32				sta 	tempShort
.1472	68		pla				pla
.1473	a8		tay				tay
.1474	a5 32		lda $32				lda 	tempShort					; no key pressed.
.1476	f0 10		beq $1488			beq 	_IOIExit
.1478	c9 0d		cmp #$0d			cmp 	#13 						; allow CR (13)
.147a	f0 0c		beq $1488			beq 	_IOIExit
.147c	c9 14		cmp #$14			cmp 	#$14 						; backspace code ($14) returns 8.
.147e	f0 06		beq $1486			beq 	_IOIBackspace
.1480	c9 20		cmp #$20			cmp 	#32 						; no other control allowed.
.1482	90 e7		bcc $146b			bcc 	IOInkey
.1484	b0 02		bcs $1488			bcs 	_IOIExit
.1486					_IOIBackspace:
.1486	a9 08		lda #$08			lda 	#8 							; return chr(8)
.1488					_IOIExit:
.1488	60		rts				rts
.1489					IOInk:
.1489	48		pha				pha
.148a	29 07		and #$07			and 	#7 							; 8 primaries
.148c	aa		tax				tax
.148d	bd 95 14	lda $1495,x			lda 	_IOColourTable,x 			; look up CBM code and print it.
.1490	20 5d 14	jsr $145d			jsr 	IOPrintChar
.1493	68		pla				pla
.1494	60		rts				rts
.1495					_IOColourTable:
>1495	90						.byte 	$90 					; 0 Black
>1496	96						.byte 	$96 					; 1 Red
>1497	1e						.byte 	$1E 					; 2 Green
>1498	9e						.byte 	$9E 					; 3 Yellow
>1499	9a						.byte 	$9A 					; 4 Blue
>149a	9c						.byte 	$9C 					; 5 Magenta
>149b	9f						.byte 	$9F 					; 6 Cyan
>149c	05						.byte 	$05 					; 7 White
.149d					IOPaper:
.149d	48		pha				pha
.149e	48		pha				pha
.149f	a9 01		lda #$01			lda 	#1 						; 1 swaps fgr/bgr, so we swap them, set fgr
.14a1	20 5d 14	jsr $145d			jsr 	IOPrintChar 			; and then swap them again.
.14a4	68		pla				pla
.14a5	20 89 14	jsr $1489			jsr 	IOInk
.14a8	a9 01		lda #$01			lda 	#1
.14aa	20 5d 14	jsr $145d			jsr 	IOPrintChar
.14ad	68		pla				pla
.14ae	60		rts				rts
.14af					IOLocate:
.14af	48		pha				pha
.14b0	a9 13		lda #$13			lda 	#$13 					; home cursor code
.14b2	20 5d 14	jsr $145d			jsr 	IOPrintChar
.14b5	a9 11		lda #$11			lda 	#$11 	 				; print Y x $11 (down)
.14b7	20 be 14	jsr $14be			jsr 	_IOLoc2
.14ba	68		pla				pla
.14bb	a8		tay				tay
.14bc	a9 1d		lda #$1d			lda 	#$1D 					; print Y x $1D (right)
.14be					_IOLoc2:
.14be	c0 00		cpy #$00			cpy 	#0
.14c0	f0 06		beq $14c8			beq 	_IOLocExit
.14c2	20 5d 14	jsr $145d			jsr 	IOPrintChar
.14c5	88		dey				dey
.14c6	d0 f6		bne $14be			bne 	_IOLoc2
.14c8					_IOLocExit:
.14c8	60		rts				rts
.14c9					IOInput:
.14c9	a9 00		lda #$00			lda 	#0
.14cb	8d f6 0a	sta $0af6			sta 	bufferCount
.14ce					_IOILoop:
.14ce	20 cf ff	jsr $ffcf			jsr 	$FFCF
.14d1	c9 0d		cmp #$0d			cmp 	#13
.14d3	f0 10		beq $14e5			beq 	_IOIExit
.14d5	ae f6 0a	ldx $0af6			ldx 	bufferCount
.14d8	e0 f0		cpx #$f0			cpx 	#MaxLineInputSize
.14da	f0 f2		beq $14ce			beq 	_IOILoop
.14dc	ee f6 0a	inc $0af6			inc 	bufferCount
.14df	9d f7 0a	sta $0af7,x			sta 	bufferStorage+1,x
.14e2	4c ce 14	jmp $14ce			jmp 	_IOILoop
.14e5					_IOIExit:
.14e5	a9 f6		lda #$f6			lda 	#(bufferCount) & $FF
.14e7	85 2a		sta $2a				sta 	temp0
.14e9	a9 0a		lda #$0a			lda 	#(bufferCount) >> 8
.14eb	85 2b		sta $2b				sta 	1+(temp0)
.14ed	60		rts				rts

;******  Return to file: device/device.asm


;******  Processing file: device/option_x16/x16timer.asm

.14ee					IOReadTimer:
.14ee	20 de ff	jsr $ffde			jsr 	$FFDE 						; reads timer into YXA so we want only YA
.14f1	48		pha				pha
.14f2	8a		txa				txa
.14f3	a8		tay				tay
.14f4	68		pla				pla
.14f5	60		rts				rts

;******  Return to file: device/device.asm

.14f6					deviceHandler:
.14f6	7c f9 14	jmp ($14f9,x)			jmp 	(deviceVectors,x)
.14f9					deviceVectors:
>14f9	2e 14					.word IOControlHandler     ; index 0
>14fb	be 13					.word X16Break             ; index 2
>14fd	45 14					.word IOClearScreen        ; index 4
>14ff	4d 14					.word IONewLine            ; index 6
>1501	89 14					.word IOInk                ; index 8
>1503	6b 14					.word IOInkey              ; index 10
>1505	c9 14					.word IOInput              ; index 12
>1507	f5 13					.word ExternLoad           ; index 14
>1509	af 14					.word IOLocate             ; index 16
>150b	9d 14					.word IOPaper              ; index 18
>150d	5d 14					.word IOPrintChar          ; index 20
>150f	5d 14					.word IOPrintAscii         ; index 22
>1511	c9 13					.word ExternSave           ; index 24
>1513	55 14					.word IOTab                ; index 26
>1515	ee 14					.word IOReadTimer          ; index 28
.1517					_DummyControlHandler:
.1517	60		rts			rts

;******  Return to file: basic.asm

.1518					section_end_device:
.1518					section_start_error:

;******  Processing file: error/error.asm


;******  Processing file: error/errorhandler.asm

.1518					ErrorHandler:
.1518	8a		txa				txa
.1519	48		pha				pha
.151a	a9 01		lda #$01			lda 	#1 							; red
.151c	a2 08		ldx #$08		ldx	#8
.151e	20 f6 14	jsr $14f6		jsr	deviceHandler
.1521	68		pla				pla
.1522	aa		tax				tax
.1523	a9 8e		lda #$8e			lda 	#(ErrorTextList) & $FF
.1525	85 2a		sta $2a				sta 	temp0
.1527	a9 15		lda #$15			lda 	#(ErrorTextList) >> 8
.1529	85 2b		sta $2b				sta 	1+(temp0)
.152b	ca		dex		_EHFind:dex									; errors start at 1
.152c	f0 10		beq $153e			beq 	_EHFound
.152e	a0 00		ldy #$00			ldy 	#0 							; goto next text message, add length + 1 to the pointer.
.1530	38		sec				sec
.1531	a5 2a		lda $2a				lda 	temp0
.1533	71 2a		adc ($2a),y			adc 	(temp0),y
.1535	85 2a		sta $2a				sta 	temp0
.1537	90 f2		bcc $152b			bcc 	_EHFind
.1539	e6 2b		inc $2b				inc 	temp0+1
.153b	4c 2b 15	jmp $152b			jmp 	_EHFind
.153e					_EHFound:
.153e	20 52 18	jsr $1852			jsr 	EHPrintAscii 				; print the string "temp0" now points to.
.1541	a0 00		ldy #$00			ldy 	#0 							; in a line, e.g. the offset to next is non zero.
.1543	b1 28		lda ($28),y			lda 	(codePtr),y
.1545	f0 39		beq $1580			beq 	_EHNoLine
.1547	a5 29		lda $29				lda 	codePtr+1 					; code running from the command line.
.1549	cd c9 0a	cmp $0ac9			cmp 	basePage+1
.154c	90 32		bcc $1580			bcc 	_EHNoLine
.154e	a9 8a		lda #$8a			lda 	#(EHAtMsg) & $FF
.1550	85 2a		sta $2a				sta 	temp0
.1552	a9 15		lda #$15			lda 	#(EHAtMsg) >> 8
.1554	85 2b		sta $2b				sta 	1+(temp0)
.1556	20 52 18	jsr $1852			jsr 	EHPrintAscii
.1559	a0 01		ldy #$01			ldy 	#1 							; set up line number in TOS
.155b	a2 00		ldx #$00			ldx 	#0
.155d	b1 28		lda ($28),y			lda 	(codePtr),y
.155f	95 98		sta $98,x			sta 	esInt0,x
.1561	c8		iny				iny
.1562	b1 28		lda ($28),y			lda 	(codePtr),y
.1564	95 a0		sta $a0,x			sta 	esInt1,x
.1566	a9 00		lda #$00			lda 	#0
.1568	95 a8		sta $a8,x			sta 	esInt2,x
.156a	95 b0		sta $b0,x			sta 	esInt3,x
.156c	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.156e	85 2a		sta $2a				sta 	temp0
.1570	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.1572	85 2b		sta $2b				sta 	1+(temp0)
.1574	a0 0a		ldy #$0a			ldy 	#10 						; in base 10.
.1576	a9 00		lda #$00			lda 	#0							; stack position zero.
.1578	a2 12		ldx #$12		ldx	#18
.157a	20 6d 3e	jsr $3e6d		jsr	mainHandler
.157d	20 52 18	jsr $1852			jsr 	EHPrintAscii
.1580					_EHNoLine:
.1580	a2 06		ldx #$06		ldx	#6
.1582	20 f6 14	jsr $14f6		jsr	deviceHandler
.1585	a2 04		ldx #$04		ldx	#4
.1587	20 cd 27	jsr $27cd		jsr	interactionHandler
.158a					EHAtMsg:
>158a	03 20 40 20					.text 	3," @ "

;******  Processing file: error/../generated/errortext.inc

.158e					ErrorTextList:
>158e	13 46 65 61 74 75 72 65			.text 19,"Feature not Present"
>1596	20 6e 6f 74 20 50 72 65 73 65 6e 74
>15a2	0c 53 79 6e 74 61 78 20			.text 12,"Syntax Error"
>15aa	45 72 72 6f 72
>15af	0f 4d 6f 64 75 6c 65 20			.text 15,"Module disabled"
>15b7	64 69 73 61 62 6c 65 64
>15bf	10 41 73 73 65 72 74 69			.text 16,"Assertion failed"
>15c7	6f 6e 20 66 61 69 6c 65 64
>15d0	0e 44 69 76 69 64 65 20			.text 14,"Divide By Zero"
>15d8	42 79 20 5a 65 72 6f
>15df	04 53 74 6f 70				.text 4,"Stop"
>15e4	0d 54 79 70 65 20 4d 69			.text 13,"Type Mismatch"
>15ec	73 6d 61 74 63 68
>15f2	0d 49 6c 6c 65 67 61 6c			.text 13,"Illegal Value"
>15fa	20 56 61 6c 75 65
>1600	15 4d 69 73 73 69 6e 67			.text 21,"Missing right bracket"
>1608	20 72 69 67 68 74 20 62 72 61 63 6b 65 74
>1616	0d 4d 69 73 73 69 6e 67			.text 13,"Missing comma"
>161e	20 63 6f 6d 6d 61
>1624	11 4d 69 73 73 69 6e 67			.text 17,"Missing reference"
>162c	20 72 65 66 65 72 65 6e 63 65
>1636	15 4c 69 6e 65 20 4e 75			.text 21,"Line Number not found"
>163e	6d 62 65 72 20 6e 6f 74 20 66 6f 75 6e 64
>164c	0f 53 74 72 69 6e 67 20			.text 15,"String too long"
>1654	74 6f 6f 20 6c 6f 6e 67
>165c	14 52 45 54 55 52 4e 20			.text 20,"RETURN without GOSUB"
>1664	77 69 74 68 6f 75 74 20 47 4f 53 55 42
>1671	14 55 4e 54 49 4c 20 77			.text 20,"UNTIL without REPEAT"
>1679	69 74 68 6f 75 74 20 52 45 50 45 41 54
>1686	10 4e 45 58 54 20 77 69			.text 16,"NEXT without FOR"
>168e	74 68 6f 75 74 20 46 4f 52
>1697	12 57 45 4e 44 20 77 69			.text 18,"WEND without WHILE"
>169f	74 68 6f 75 74 20 57 48 49 4c 45
>16aa	14 45 4e 44 50 52 4f 43			.text 20,"ENDPROC without PROC"
>16b2	20 77 69 74 68 6f 75 74 20 50 52 4f 43
>16bf	0e 42 61 64 20 4e 45 58			.text 14,"Bad NEXT index"
>16c7	54 20 69 6e 64 65 78
>16ce	17 53 74 72 75 63 74 75			.text 23,"Structures nested wrong"
>16d6	72 65 73 20 6e 65 73 74 65 64 20 77 72 6f 6e 67
>16e6	16 43 61 6e 6e 6f 74 20			.text 22,"Cannot create variable"
>16ee	63 72 65 61 74 65 20 76 61 72 69 61 62 6c 65
>16fd	19 52 65 74 75 72 6e 20			.text 25,"Return stack out of space"
>1705	73 74 61 63 6b 20 6f 75 74 20 6f 66 20 73 70 61
>1715	63 65
>1717	11 55 6e 6b 6e 6f 77 6e			.text 17,"Unknown Procedure"
>171f	20 50 72 6f 63 65 64 75 72 65
>1729	17 50 61 72 61 6d 65 74			.text 23,"Parameters do not match"
>1731	65 72 73 20 64 6f 20 6e 6f 74 20 6d 61 74 63 68
>1741	15 41 72 72 61 79 20 61			.text 21,"Array already defined"
>1749	6c 72 65 61 64 79 20 64 65 66 69 6e 65 64
>1757	12 44 49 4d 20 72 65 71			.text 18,"DIM requires array"
>175f	75 69 72 65 73 20 61 72 72 61 79
>176a	0f 42 61 64 20 61 72 72			.text 15,"Bad array index"
>1772	61 79 20 69 6e 64 65 78
>177a	1d 57 72 6f 6e 67 20 6e			.text 29,"Wrong number of array indices"
>1782	75 6d 62 65 72 20 6f 66 20 61 72 72 61 79 20 69
>1792	6e 64 69 63 65 73
>1798	0b 4f 75 74 20 6f 66 20			.text 11,"Out of data"
>17a0	64 61 74 61
>17a4	14 43 61 6e 6e 6f 74 20			.text 20,"Cannot tokenise line"
>17ac	74 6f 6b 65 6e 69 73 65 20 6c 69 6e 65
>17b9	0b 53 61 76 65 20 66 61			.text 11,"Save failed"
>17c1	69 6c 65 64
>17c5	0b 4c 6f 61 64 20 66 61			.text 11,"Load failed"
>17cd	69 6c 65 64
>17d1	05 42 72 65 61 6b			.text 5,"Break"
>17d7	0d 4f 75 74 20 6f 66 20			.text 13,"Out of memory"
>17df	6d 65 6d 6f 72 79
>17e5	16 45 78 70 72 65 73 73			.text 22,"Expression too complex"
>17ed	69 6f 6e 20 74 6f 6f 20 63 6f 6d 70 6c 65 78
>17fc	10 42 61 64 20 4f 70 65			.text 16,"Bad Operand/Mode"
>1804	72 61 6e 64 2f 4d 6f 64 65
>180d	13 42 72 61 6e 63 68 20			.text 19,"Branch out of range"
>1815	6f 75 74 20 6f 66 20 72 61 6e 67 65
>1821	13 4c 61 62 65 6c 20 63			.text 19,"Label changed value"
>1829	68 61 6e 67 65 64 20 76 61 6c 75 65
>1835	12 4e 6f 20 53 70 72 69			.text 18,"No Sprite Selected"
>183d	74 65 20 53 65 6c 65 63 74 65 64
>1848	08 48 61 72 64 77 61 72			.text 8,"Hardware"
>1850	65
>1851	00					.byte 0

;******  Return to file: error/errorhandler.asm

.1852					EHPrintAscii:
.1852	a0 00		ldy #$00			ldy 	#0
.1854	b1 2a		lda ($2a),y			lda 	(temp0),y
.1856	aa		tax				tax
.1857	f0 0f		beq $1868			beq 	_EHPExit
.1859					_EHPLoop:
.1859	c8		iny				iny
.185a	8a		txa				txa
.185b	48		pha				pha
.185c	b1 2a		lda ($2a),y			lda 	(temp0),y
.185e	a2 16		ldx #$16		ldx	#22
.1860	20 f6 14	jsr $14f6		jsr	deviceHandler
.1863	68		pla				pla
.1864	aa		tax				tax
.1865	ca		dex				dex
.1866	d0 f1		bne $1859			bne 	_EHPLoop
.1868					_EHPExit:
.1868	60		rts				rts

;******  Return to file: error/error.asm


;******  Return to file: basic.asm

.1869					section_end_error:
.1869					section_start_extension:

;******  Processing file: extension/extension.asm


;******  Processing file: extension/extensionhandler.asm

.1869					ExtensionHandler:
.1869	c9 fe		cmp #$fe			cmp 	#$FE 						; check for force mode 0
.186b	f0 16		beq $1883			beq 	_ExtensionForce
.186d	c9 ff		cmp #$ff			cmp 	#$FF						; A = $FF command, otherwise unary function stack level.
.186f	d0 08		bne $1879			bne 	_ExtensionUnary 			; is passed in A.
.1871	b1 28		lda ($28),y			lda 	(codePtr),y 				; so this is a command, using Group 2.
.1873	c8		iny				iny
.1874	0a		asl a				asl 	a
.1875	aa		tax				tax
.1876	7c 7a 18	jmp ($187a,x)			jmp 	(Group2Vectors-12,x)
.1879					_ExtensionUnary:
.1879	48		pha				pha 								; save stack pos in A
.187a	b1 28		lda ($28),y			lda 	(codePtr),y 				; get shifted token, double into X
.187c	c8		iny				iny
.187d	0a		asl a				asl 	a
.187e	aa		tax				tax
.187f	68		pla				pla 								; restore stack pos and call group3 command.
.1880	7c 98 18	jmp ($1898,x)			jmp 	(Group3Vectors-12,X)
.1883					_ExtensionForce:
.1883	4c a1 22	jmp $22a1			jmp 	ForceMode0

;******  Processing file: extension/../generated/tokenvectors2.inc

.1886					Group2Vectors:
>1886	7a 24					.word	Command_VPoke            ; $86 vpoke
>1888	7d 24					.word	Command_VDoke            ; $87 vdoke
>188a	52 24					.word	Command_VLoad            ; $88 vload
>188c	b3 22					.word	CommandMode              ; $89 mode
>188e	70 23					.word	CommandPalette           ; $8a palette
>1890	da 1f					.word	CommandSprite            ; $8b sprite
>1892	f0 1d					.word	CommandClg               ; $8c clg
>1894	e4 1a					.word	Command_Rect             ; $8d rect
>1896	ec 1a					.word	Command_Frame            ; $8e frame
>1898	a7 23					.word	Command_Draw             ; $8f draw
>189a	d1 1a					.word	Command_Plot             ; $90 plot
>189c	ab 19					.word	Command_Line             ; $91 line
>189e	25 21					.word	Command_Paint            ; $92 paint
>18a0	11 32					.word	Unimplemented            ; $93 sound
>18a2	11 32					.word	Unimplemented            ; $94 volume

;******  Return to file: extension/extensionhandler.asm


;******  Processing file: extension/../generated/tokenvectors3.inc

.18a4					Group3Vectors:
>18a4	c6 24					.word	Command_VPeek            ; $86 vpeek(
>18a6	c9 24					.word	Command_VDeek            ; $87 vdeek(
>18a8	71 22					.word	Sprite_GetX              ; $88 sprite.x(
>18aa	74 22					.word	Sprite_GetY              ; $89 sprite.y(
>18ac	1d 1f					.word	FunctionCollide          ; $8a hit(
>18ae	95 1e					.word	Unary_JoyX               ; $8b joy.x(
>18b0	98 1e					.word	Unary_JoyY               ; $8c joy.y(
>18b2	d3 1e					.word	Unary_JButton            ; $8d joy.b(
>18b4	68 1e					.word	Unary_Clock              ; $8e clock(

;******  Return to file: extension/extensionhandler.asm

.18b6					XEvaluateInteger:
.18b6	8a		txa				txa
.18b7	a2 0a		ldx #$0a		ldx	#10
.18b9	20 6d 3e	jsr $3e6d		jsr	mainHandler
.18bc	aa		tax				tax
.18bd	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/graphics/general.asm

.0be6					gStartStorage:
.0be6					gCurrentXPos:
>0be6							.fill 	2 							; copying the coordinate here, and into x2, and the old
.0be8					gCurrentYPos:
>0be8							.fill 	2
.0bea					gX1:
>0bea							.fill 	2		 					; most recently used. x2,y2 are the most recently used.
.0bec					gY1:
>0bec							.fill 	2
.0bee					gX2:
>0bee							.fill 	2
.0bf0					gY2:
>0bf0							.fill 	2
.0bf2					gError:
>0bf2							.fill 	2
.0bf4					g2Error:
>0bf4							.fill 	2
.0bf6					gdx:
>0bf6							.fill 	2
.0bf8					gdy:
>0bf8							.fill 	2
.0bfa					gWordHandler:
>0bfa							.fill 	2
.0bfc					gModifiers:
.0bfc					gdInk:
>0bfc							.fill 	1
.0bfd					gdPaper:
>0bfd							.fill 	1
.0bfe					gdSize:
>0bfe							.fill 	1
.0bff					gdImage:
>0bff							.fill 	1
.0c00					gdFlip:
>0c00							.fill 	1
.0c01					gEndStorage:
.0c01					gdXLimit:
>0c01							.fill 	2
.0c03					gdYLimit:
>0c03							.fill 	2
.0c05					gdText:
>0c05							.fill 	2
.18be					GResetStorage:
.18be	8a		txa				txa
.18bf	48		pha				pha
.18c0	a2 1a		ldx #$1a			ldx 	#gEndStorage-gStartStorage-1 ; fill all storage for gfx with 0
.18c2	a9 00		lda #$00			lda 	#0
.18c4					_GRSLoop:
.18c4	9d e6 0b	sta $0be6,x			sta 	gStartStorage,x
.18c7	ca		dex				dex
.18c8	10 fa		bpl $18c4			bpl 	_GRSLoop
.18ca	a9 01		lda #$01			lda 	#1
.18cc	8d fc 0b	sta $0bfc			sta 	gdInk
.18cf	8d fe 0b	sta $0bfe			sta 	gdSize
.18d2	68		pla				pla
.18d3	aa		tax				tax
.18d4	60		rts				rts
.18d5					GHandler:
.18d5	8e fb 0b	stx $0bfb			stx 	gWordHandler+1 				; save code that draws the actual line or whatever.
.18d8	8d fa 0b	sta $0bfa			sta 	gWordHandler
.18db	a9 00		lda #$00			lda 	#0							; default no text.
.18dd	8d 06 0c	sta $0c06			sta 	gdText+1
.18e0	88		dey				dey 								; predecrement
.18e1					_GHLoopNext:
.18e1	c8		iny				iny									; advance one character
.18e2					_GHLoop:
.18e2	b1 28		lda ($28),y			lda 	(codePtr),y 				; look at character.
.18e4	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; , go to next
.18e6	f0 f9		beq $18e1			beq 	_GHLoopNext
.18e8	c9 80		cmp #$80			cmp 	#TOK_EOL 					; end of line or : , exit
.18ea	f0 50		beq $193c			beq 	_GHExit
.18ec	c9 ca		cmp #$ca			cmp 	#TKW_COLON
.18ee	f0 4c		beq $193c			beq 	_GHExit
.18f0	c9 db		cmp #$db			cmp 	#TKW_AT 					; have we found AT or TO
.18f2	f0 37		beq $192b			beq 	_GHCallHandler 				; update post & call the handler
.18f4	c9 ce		cmp #$ce			cmp 	#TKW_TO
.18f6	f0 33		beq $192b			beq 	_GHCallHandler
.18f8	c9 e6		cmp #$e6			cmp 	#TKW_FROM
.18fa	f0 14		beq $1910			beq 	_GHCPairSkip
.18fc	c9 e9		cmp #$e9			cmp 	#TKW_TEXT
.18fe	f0 3d		beq $193d			beq 	_GHText
.1900	a2 00		ldx #$00			ldx 	#0 							; now see if it matches a token modifier (INK,PAPER etc.)
.1902					_GHCheckTokens:
.1902	b1 28		lda ($28),y			lda 	(codePtr),y
.1904	dd 52 19	cmp $1952,x			cmp 	_GHTokenTable,x
.1907	f0 0e		beq $1917			beq 	_GHFoundToken
.1909	e8		inx				inx
.190a	bd 52 19	lda $1952,x			lda 	_GHTokenTable,x
.190d	d0 f3		bne $1902			bne 	_GHCheckTokens
.190f	88		dey				dey
.1910					_GHCPairSkip:
.1910	c8		iny				iny
.1911					_GHCPair:
.1911	20 58 19	jsr $1958			jsr 	GHMakeCurrent 				; should be a coordinate pair then.
.1914	4c e2 18	jmp $18e2			jmp 	_GHLoop
.1917					_GHFoundToken:
.1917	c8		iny				iny 								; skip token (INK/PAPER etc.)
.1918	8a		txa				txa
.1919	48		pha				pha
.191a	a9 00		lda #$00			lda 	#0 							; evaluate byte
.191c	a2 0c		ldx #$0c		ldx	#12
.191e	20 6d 3e	jsr $3e6d		jsr	mainHandler
.1921	68		pla				pla
.1922	aa		tax				tax
.1923	a5 98		lda $98				lda 	esInt0 						; get evaluated value
.1925	9d fc 0b	sta $0bfc,x			sta 	gModifiers,x 				; update the modifiers
.1928	4c e2 18	jmp $18e2			jmp 	_GHLoop 					; and loop back
.192b					_GHCallHandler:
.192b	c8		iny				iny 								; consume AT or TO.
.192c	20 58 19	jsr $1958			jsr 	GHMakeCurrent 				; update the coordinates.
.192f	98		tya				tya
.1930	48		pha				pha
.1931	20 39 19	jsr $1939			jsr 	_GHCallHandlerCode 			; call the handler code
.1934	68		pla				pla
.1935	a8		tay				tay
.1936	4c e2 18	jmp $18e2			jmp 	_GHLoop 					; and loop round.
.1939					_GHCallHandlerCode:
.1939	6c fa 0b	jmp ($0bfa)			jmp 	(gWordHandler)
.193c					_GHExit:
.193c	60		rts				rts
.193d					_GHText:
.193d	c8		iny				iny 								; skip token
.193e	a9 00		lda #$00			lda 	#0 							; get string.
.1940	a2 0e		ldx #$0e		ldx	#14
.1942	20 6d 3e	jsr $3e6d		jsr	mainHandler
.1945	a5 98		lda $98				lda 	esInt0 						; copy address of string.
.1947	8d 05 0c	sta $0c05			sta 	gdText
.194a	a5 a0		lda $a0				lda 	esInt1
.194c	8d 06 0c	sta $0c06			sta 	gdText+1
.194f	4c e2 18	jmp $18e2			jmp 	_GHLoop
.1952					_GHTokenTable:
>1952	e1 e2 d2 da dc					.byte 	TKW_INK,TKW_PAPER,TKW_DIM,TKW_IMAGE,TKW_FLIP
>1957	00						.byte 	0
.1958					GHMakeCurrent:
.1958	8a		txa				txa
.1959	48		pha				pha
.195a	a2 00		ldx #$00			ldx 	#0 							; do for 0 offset (X)
.195c	20 6c 19	jsr $196c			jsr 	_GHMCDoIt
.195f	a2 02		ldx #$02		ldx	#2
.1961	20 6d 3e	jsr $3e6d		jsr	mainHandler
.1964	a2 02		ldx #$02			ldx 	#2 							; do for 2 offset (Y)
.1966	20 6c 19	jsr $196c			jsr 	_GHMCDoIt
.1969	68		pla				pla
.196a	aa		tax				tax
.196b	60		rts				rts
.196c					_GHMCDoIt:
.196c	bd e6 0b	lda $0be6,x			lda 	gCurrentXPos,x 				; copy the current position to X,Y
.196f	9d ea 0b	sta $0bea,x			sta 	gX1,x
.1972	bd e7 0b	lda $0be7,x			lda 	gCurrentXPos+1,x
.1975	9d eb 0b	sta $0beb,x			sta 	gX1+1,x
.1978	8a		txa				txa
.1979	48		pha				pha
.197a	a9 00		lda #$00			lda 	#0 							; evaluate the parameter, now in esInt0,esInt1
.197c	a2 0a		ldx #$0a		ldx	#10
.197e	20 6d 3e	jsr $3e6d		jsr	mainHandler
.1981	68		pla				pla
.1982	aa		tax				tax
.1983	a5 98		lda $98				lda 	esInt0 						; check coordinate range
.1985	dd 01 0c	cmp $0c01,x			cmp 	gdXLimit,x
.1988	a5 a0		lda $a0				lda 	esInt1
.198a	fd 02 0c	sbc $0c02,x			sbc 	gdXLimit+1,x
.198d	b0 17		bcs $19a6			bcs 	_GMHCRange
.198f	a5 a8		lda $a8				lda 	esInt2
.1991	05 b0		ora $b0				ora 	esInt3
.1993	d0 11		bne $19a6			bne 	_GMHCRange
.1995	a5 98		lda $98				lda 	esInt0 						; copy into current and X2,Y2
.1997	9d e6 0b	sta $0be6,x			sta 	gCurrentXPos,x
.199a	9d ee 0b	sta $0bee,x			sta 	gX2,x
.199d	a5 a0		lda $a0				lda 	esInt1
.199f	9d e7 0b	sta $0be7,x			sta 	gCurrentXPos+1,x
.19a2	9d ef 0b	sta $0bef,x			sta 	gX2+1,x
.19a5	60		rts				rts
.19a6					_GMHCRange:
.19a6	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.19a8	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: extension/extension.asm


;******  Processing file: extension/graphics/line.asm

.0c07					gdySign:
>0c07							.fill 	1
.19ab					Command_Line:
.19ab	a9 b3		lda #$b3			lda 	#LineHandler & $FF
.19ad	a2 19		ldx #$19			ldx 	#LineHandler >> 8
.19af	20 d5 18	jsr $18d5			jsr 	GHandler
.19b2	60		rts				rts
.19b3					LineHandler:
.19b3	a2 00		ldx #$00			ldx 	#gX1-gX1 					; check if horizontal, vertical line
.19b5	a0 04		ldy #$04			ldy 	#gX2-gX1
.19b7	20 9b 1c	jsr $1c9b			jsr 	CompareCoordsEq
.19ba	f0 09		beq $19c5			beq 	_LHRectCode
.19bc	a2 02		ldx #$02			ldx 	#gY1-gX1
.19be	a0 06		ldy #$06			ldy 	#gY2-gX1
.19c0	20 9b 1c	jsr $1c9b			jsr 	CompareCoordsEq
.19c3	d0 03		bne $19c8			bne 	_LHLineDrawer
.19c5					_LHRectCode:
.19c5	4c f8 1a	jmp $1af8			jmp 	RectHandler
.19c8					_LHLineDrawer:
.19c8	a2 00		ldx #$00			ldx 	#gX1-gX1 					; check if X1 < X2 e.g. it is sloped to the right.
.19ca	a0 04		ldy #$04			ldy 	#gX2-gX1
.19cc	20 86 1c	jsr $1c86			jsr 	CompareCoords
.19cf	90 0a		bcc $19db			bcc 	_LHNoSwap
.19d1	20 ce 1c	jsr $1cce			jsr 	GSwapCoords					; if so swap coords so X2 > X1, may be going up or down.
.19d4	a2 02		ldx #$02			ldx 	#gY1-gX1
.19d6	a0 06		ldy #$06			ldy 	#gY2-gX1
.19d8	20 ce 1c	jsr $1cce			jsr 	GSwapCoords
.19db					_LHNoSwap:
.19db	20 04 1a	jsr $1a04			jsr 	BresenhamInitialise 		; initialise Bresenham constants
.19de	a0 00		ldy #$00			ldy 	#gX1-gX1
.19e0	20 70 1c	jsr $1c70			jsr 	SetupXY 					; set up X1,Y1 to draw.
.19e3	b0 15		bcs $19fa			bcs 	_LHExit 					; line off screen.
.19e5					_LHDrawLoop:
.19e5	a2 00		ldx #$00			ldx 	#gX1-gX1 					; check if X1=X2 and Y1 = Y2
.19e7	a0 04		ldy #$04			ldy 	#gX2-gX1
.19e9	20 9b 1c	jsr $1c9b			jsr 	CompareCoordsEq
.19ec	d0 0d		bne $19fb			bne 	_LHNextPixel
.19ee	a2 06		ldx #$06			ldx 	#gY2-gX1
.19f0	a0 06		ldy #$06			ldy 	#gY2-gX1
.19f2	20 9b 1c	jsr $1c9b			jsr 	CompareCoordsEq
.19f5	d0 04		bne $19fb			bne 	_LHNextPixel
.19f7	20 8a 1d	jsr $1d8a			jsr 	gdPlotInk 					; plot the last pixel.
.19fa					_LHExit:
.19fa	60		rts				rts
.19fb					_LHNextPixel:
.19fb	20 8a 1d	jsr $1d8a			jsr 	gdPlotInk 					; plot the pixel.
.19fe	20 58 1a	jsr $1a58			jsr 	BresenhamIteration 			; do one bresenham iteration calculation
.1a01	4c e5 19	jmp $19e5			jmp  	_LHDrawLoop 				; and loop back if okay
.1a04					BresenhamInitialise:
.1a04	38		sec				sec
.1a05	ad ee 0b	lda $0bee			lda 	gX2
.1a08	ed ea 0b	sbc $0bea			sbc 	gX1
.1a0b	8d f6 0b	sta $0bf6			sta 	gdX
.1a0e	ad ef 0b	lda $0bef			lda 	gX2+1
.1a11	ed eb 0b	sbc $0beb			sbc 	gX1+1
.1a14	8d f7 0b	sta $0bf7			sta 	gdX+1
.1a17	38		sec				sec
.1a18	ad ec 0b	lda $0bec			lda 	gY1
.1a1b	ed f0 0b	sbc $0bf0			sbc 	gY2
.1a1e	8d f8 0b	sta $0bf8			sta 	gdy
.1a21	ad ed 0b	lda $0bed			lda 	gY1+1
.1a24	ed f1 0b	sbc $0bf1			sbc 	gY2+1
.1a27	8d f9 0b	sta $0bf9			sta 	gdy+1
.1a2a	ad f9 0b	lda $0bf9			lda 	gdy+1 						; save sign of dy
.1a2d	8d 07 0c	sta $0c07			sta 	gdysign
.1a30	30 12		bmi $1a44			bmi 	_BINormal
.1a32	38		sec				sec
.1a33	a9 00		lda #$00			lda 	#0
.1a35	ed f8 0b	sbc $0bf8			sbc 	gdy
.1a38	8d f8 0b	sta $0bf8			sta 	gdy
.1a3b	a9 00		lda #$00			lda 	#0
.1a3d	ed f9 0b	sbc $0bf9			sbc 	gdy+1
.1a40	8d f9 0b	sta $0bf9			sta 	gdy+1
.1a43	60		rts				rts
.1a44					_BINormal:
.1a44	18		clc				clc
.1a45	ad f6 0b	lda $0bf6			lda 	gdx
.1a48	6d f8 0b	adc $0bf8			adc 	gdy
.1a4b	8d f2 0b	sta $0bf2			sta 	gError
.1a4e	ad f7 0b	lda $0bf7			lda 	gdx+1
.1a51	6d f9 0b	adc $0bf9			adc 	gdy+1
.1a54	8d f3 0b	sta $0bf3			sta 	gError+1
.1a57	60		rts				rts
.1a58					BresenhamIteration:
.1a58	ad f2 0b	lda $0bf2			lda 	gError
.1a5b	0a		asl a				asl 	a
.1a5c	8d f4 0b	sta $0bf4			sta 	g2Error
.1a5f	ad f3 0b	lda $0bf3			lda 	gError+1
.1a62	2a		rol a				rol 	a
.1a63	8d f5 0b	sta $0bf5			sta 	g2Error+1
.1a66	a2 0a		ldx #$0a			ldx 	#g2Error-gX1
.1a68	a0 0e		ldy #$0e			ldy 	#gdy-gX1
.1a6a	20 93 1c	jsr $1c93			jsr 	CompareCoordsSigned
.1a6d	30 03		bmi $1a72			bmi 	_BINoE2DY
.1a6f	20 7f 1a	jsr $1a7f			jsr 	BresenhamE2GEDY
.1a72					_BINoE2DY:
.1a72	a2 0c		ldx #$0c			ldx 	#gdx-gX1
.1a74	a0 0a		ldy #$0a			ldy 	#g2Error-gX1
.1a76	20 93 1c	jsr $1c93			jsr 	CompareCoordsSigned
.1a79	30 03		bmi $1a7e			bmi 	_BINoDXE2
.1a7b	20 9e 1a	jsr $1a9e			jsr 	BresenhamDXGEE2
.1a7e					_BINoDXE2:
.1a7e	60		rts				rts
.1a7f					BresenhamE2GEDY:
.1a7f	18		clc				clc
.1a80	ad f2 0b	lda $0bf2			lda 	gError
.1a83	6d f8 0b	adc $0bf8			adc 	gdy
.1a86	8d f2 0b	sta $0bf2			sta 	gError
.1a89	ad f3 0b	lda $0bf3			lda 	gError+1
.1a8c	6d f9 0b	adc $0bf9			adc 	gdy+1
.1a8f	8d f3 0b	sta $0bf3			sta 	gError+1
.1a92	ee ea 0b	inc $0bea			inc 	gX1
.1a95	d0 03		bne $1a9a			bne 	_BE2Skip
.1a97	ee eb 0b	inc $0beb			inc 	gX1+1
.1a9a					_BE2Skip:
.1a9a	20 eb 1c	jsr $1ceb			jsr 	gdMvRight
.1a9d	60		rts				rts
.1a9e					BresenhamDXGEE2:
.1a9e	18		clc				clc
.1a9f	ad f2 0b	lda $0bf2			lda 	gError
.1aa2	6d f6 0b	adc $0bf6			adc 	gdx
.1aa5	8d f2 0b	sta $0bf2			sta 	gError
.1aa8	ad f3 0b	lda $0bf3			lda 	gError+1
.1aab	6d f7 0b	adc $0bf7			adc 	gdx+1
.1aae	8d f3 0b	sta $0bf3			sta 	gError+1
.1ab1	ad 07 0c	lda $0c07			lda 	gdySign
.1ab4	10 0c		bpl $1ac2			bpl 	_BEDXInvertY
.1ab6	ee ec 0b	inc $0bec			inc 	gY1
.1ab9	d0 03		bne $1abe			bne 	_BEDXSkip
.1abb	ee ed 0b	inc $0bed			inc 	gY1+1
.1abe					_BEDXSkip:
.1abe	20 26 1d	jsr $1d26			jsr 	gdMvDown
.1ac1	60		rts				rts
.1ac2					_BEDXInvertY:
.1ac2	ad ec 0b	lda $0bec			lda 	gY1
.1ac5	d0 03		bne $1aca			bne 	_BEDXSkip2
.1ac7	ce ed 0b	dec $0bed			dec 	gY1+1
.1aca					_BEDXSkip2:
.1aca	ce ec 0b	dec $0bec			dec 	gY1
.1acd	20 01 1d	jsr $1d01			jsr 	gdMvUp
.1ad0	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/graphics/plot.asm

.1ad1					Command_Plot:
.1ad1	a9 d9		lda #$d9			lda 	#PlotHandler & $FF
.1ad3	a2 1a		ldx #$1a			ldx 	#PlotHandler >> 8
.1ad5	20 d5 18	jsr $18d5			jsr 	GHandler
.1ad8	60		rts				rts
.1ad9					PlotHandler:
.1ad9	a0 04		ldy #$04			ldy 	#gX2-gX1
.1adb	20 70 1c	jsr $1c70			jsr 	SetupXY 					; set up X1,Y1 to draw.
.1ade	b0 03		bcs $1ae3			bcs 	_PHExit 					; off screen, return with CS.
.1ae0	20 8a 1d	jsr $1d8a			jsr 	gdPlotInk 					; pixel in Ink.
.1ae3	60		rts		_PHExit:rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/graphics/rectframe.asm

.0c08					frameFlag:
>0c08							.fill 	1
.1ae4					Command_Rect:
.1ae4	a9 f8		lda #$f8			lda 	#RectHandler & $FF
.1ae6	a2 1a		ldx #$1a			ldx 	#RectHandler >> 8
.1ae8	20 d5 18	jsr $18d5			jsr 	GHandler
.1aeb	60		rts				rts
.1aec					Command_Frame:
.1aec	a9 f4		lda #$f4			lda 	#FrameHandler & $FF
.1aee	a2 1a		ldx #$1a			ldx 	#FrameHandler >> 8
.1af0	20 d5 18	jsr $18d5			jsr 	GHandler
.1af3	60		rts				rts
.1af4					FrameHandler:
.1af4	a9 01		lda #$01			lda 	#1
.1af6	d0 02		bne $1afa			bne 	RectHandler+2
.1af8					RectHandler:
.1af8	a9 00		lda #$00			lda 	#0
.1afa	8d 08 0c	sta $0c08			sta 	frameFlag
.1afd	20 aa 1c	jsr $1caa			jsr 	BoxSort 					; sort so topleft/bottom right
.1b00	20 29 1b	jsr $1b29			jsr 	DrawBoxPart 				; solid first line
.1b03					_FHLoop:
.1b03	a2 02		ldx #$02			ldx 	#gY1-gX1 					; check Y1 = Y2
.1b05	a0 06		ldy #$06			ldy 	#gY2-gX1
.1b07	20 86 1c	jsr $1c86			jsr 	CompareCoords
.1b0a	b0 19		bcs $1b25			bcs 	_FHLastLine 				; Y1 >= Y2 then end.
.1b0c	ad 08 0c	lda $0c08			lda 	frameFlag 					; identify solid or frame ?
.1b0f	f0 06		beq $1b17			beq 	_FHIsSolidRect
.1b11	20 42 1b	jsr $1b42			jsr 	DrawBoxEnds
.1b14	4c 1a 1b	jmp $1b1a			jmp 	_FHNext
.1b17					_FHIsSolidRect:
.1b17	20 29 1b	jsr $1b29			jsr 	DrawBoxPart
.1b1a					_FHNext:
.1b1a	ee ec 0b	inc $0bec			inc 	gY1 						; bump Y1 and loop back.
.1b1d	d0 e4		bne $1b03			bne 	_FHLoop
.1b1f	ee ed 0b	inc $0bed			inc 	gY1+1
.1b22	4c 03 1b	jmp $1b03			jmp 	_FHLoop
.1b25					_FHLastLine:
.1b25	20 29 1b	jsr $1b29			jsr 	DrawBoxPart 				; solid last line whatever
.1b28					_FHExit:
.1b28	60		rts				rts
.1b29					DrawBoxPart:
.1b29	a0 00		ldy #$00			ldy 	#gX1-gX1
.1b2b	20 70 1c	jsr $1c70			jsr 	SetupXY 					; set up X1,Y1 to draw.
.1b2e	38		sec				sec 								; calculate line length => temp0
.1b2f	ad ee 0b	lda $0bee			lda 	gX2
.1b32	ed ea 0b	sbc $0bea			sbc 	gX1
.1b35	48		pha				pha
.1b36	ad ef 0b	lda $0bef			lda 	gX2+1
.1b39	ed eb 0b	sbc $0beb			sbc 	gx1+1
.1b3c	aa		tax				tax
.1b3d	68		pla				pla 								; line length in XA.
.1b3e	20 5a 1b	jsr $1b5a			jsr 	DrawHorizontalLine
.1b41	60		rts				rts
.1b42					DrawBoxEnds:
.1b42	a0 00		ldy #$00			ldy 	#gX1-gX1
.1b44	20 70 1c	jsr $1c70			jsr 	SetupXY 					; set up X1,Y1 to draw.
.1b47	20 8a 1d	jsr $1d8a			jsr 	gdPlotInk 					; LH end.
.1b4a	ad ee 0b	lda $0bee			lda 	gX2 						; set position to X2,Y1
.1b4d	ae ef 0b	ldx $0bef			ldx 	gX2+1
.1b50	20 3f 1e	jsr $1e3f			jsr 	gdSetX
.1b53	20 48 1d	jsr $1d48			jsr		gdSetDrawPosition 			; update position.
.1b56	20 8a 1d	jsr $1d8a			jsr 	gdPlotInk 					; RH end.
.1b59	60		rts				rts
.1b5a					DrawHorizontalLine:
.1b5a	86 32		stx $32				stx 	tempShort
.1b5c	aa		tax				tax
.1b5d	a4 32		ldy $32				ldy 	tempShort
.1b5f	ad fc 0b	lda $0bfc			lda 	gdInk
.1b62	4c 4d 1e	jmp $1e4d			jmp 	gdOptHorizontalWriter

;******  Return to file: extension/extension.asm


;******  Processing file: extension/graphics/renderer.asm

.0c09					RenderFunction:
>0c09							.fill 	2
.0c0b					RenderWidth:
>0c0b							.fill 	1
.0c0c					RenderHeight:
>0c0c							.fill 	1
.0c0d					RenderType:
>0c0d							.fill 	1
.0c0e					RenderCache:
>0c0e							.fill 	64
.1b65					ImageRenderer:
.1b65	8e 0a 0c	stx $0c0a			stx 	RenderFunction+1
.1b68	8d 09 0c	sta $0c09			sta 	RenderFunction
.1b6b	a0 ff		ldy #$ff			ldy 	#255 						; get information.
.1b6d	20 58 1c	jsr $1c58			jsr 	CallRenderFunction
.1b70	8d 0d 0c	sta $0c0d			sta 	RenderType 					; and save it.
.1b73	8e 0b 0c	stx $0c0b			stx 	RenderWidth
.1b76	8c 0c 0c	sty $0c0c			sty 	RenderHeight
.1b79	8a		txa				txa 								; check X coordinate
.1b7a	a2 00		ldx #$00			ldx 	#0 							; offset to check position/limit.
.1b7c	20 1f 1c	jsr $1c1f			jsr 	RenderCheckRange
.1b7f	ad 0c 0c	lda $0c0c			lda 	RenderHeight 				; check Y coordinate
.1b82	a2 02		ldx #$02			ldx 	#2
.1b84	20 1f 1c	jsr $1c1f			jsr 	RenderCheckRange
.1b87	a0 00		ldy #$00			ldy 	#0 							; Y is the current line #
.1b89					_IRLoop1:
.1b89	98		tya				tya
.1b8a	48		pha				pha
.1b8b	20 fb 1b	jsr $1bfb			jsr 	RenderFlipXY 				; flip X/Y for the correct vertical row.
.1b8e	20 58 1c	jsr $1c58			jsr 	CallRenderFunction 			; fill the rendering cache.
.1b91	68		pla				pla
.1b92	a8		tay				tay
.1b93	ae fe 0b	ldx $0bfe			ldx 	gdSize 						; number of times to do the row.
.1b96					_IRLoop2:
.1b96	20 a3 1b	jsr $1ba3			jsr 	RenderDrawRow 				; draw one row.
.1b99	ca		dex				dex 								; scale # times.
.1b9a	d0 fa		bne $1b96			bne 	_IRLoop2
.1b9c	c8		iny				iny 								; next vertical row
.1b9d	cc 0c 0c	cpy $0c0c			cpy 	RenderHeight 				; done the lot ?
.1ba0	d0 e7		bne $1b89			bne 	_IRLoop1
.1ba2	60		rts				rts
.1ba3					RenderDrawRow:
.1ba3	8a		txa				txa
.1ba4	48		pha				pha
.1ba5	98		tya				tya
.1ba6	48		pha				pha
.1ba7	a0 04		ldy #$04			ldy 	#gX2-gX1 					; set the position at (x,y)
.1ba9	20 70 1c	jsr $1c70			jsr 	SetupXY
.1bac	68		pla				pla
.1bad	a8		tay				tay
.1bae	a2 00		ldx #$00			ldx 	#0 							; X is the current pixel.
.1bb0					_RDRLoop1:
.1bb0	20 c4 1b	jsr $1bc4			jsr 	RenderDrawPixelSet 			; draw a block of pixels of the correct size.
.1bb3	e8		inx				inx
.1bb4	ec 0b 0c	cpx $0c0b			cpx 	RenderWidth 				; until done the whole lot.
.1bb7	d0 f7		bne $1bb0			bne 	_RDRLoop1
.1bb9	ee f0 0b	inc $0bf0			inc 	gY2 						; next line down
.1bbc	d0 03		bne $1bc1			bne 	_RDRNoCarry
.1bbe	ee f1 0b	inc $0bf1			inc 	gY2+1
.1bc1					_RDRNoCarry:
.1bc1	68		pla				pla
.1bc2	aa		tax				tax
.1bc3	60		rts				rts
.1bc4					RenderDrawPixelSet:
.1bc4	8a		txa				txa
.1bc5	48		pha				pha
.1bc6	98		tya				tya
.1bc7	48		pha				pha
.1bc8	20 fb 1b	jsr $1bfb			jsr 	RenderFlipXY 				; flip positions as required.
.1bcb	20 e5 1b	jsr $1be5			jsr 	RenderGetInk				; get colour to draw with.
.1bce	ae fe 0b	ldx $0bfe			ldx 	gdSize 						; X counts the size.
.1bd1					_RDPSLoop:
.1bd1	c9 00		cmp #$00			cmp 	#0							; don't draw if $00
.1bd3	f0 03		beq $1bd8			beq 	_RDPSNoDraw
.1bd5	20 8d 1d	jsr $1d8d			jsr 	gdPlotA 					; draw A otherwise
.1bd8					_RDPSNoDraw:
.1bd8	48		pha				pha 								; move right
.1bd9	20 eb 1c	jsr $1ceb			jsr 	gdMvRight
.1bdc	68		pla				pla
.1bdd	ca		dex				dex
.1bde	d0 f1		bne $1bd1			bne 	_RDPSLoop 					; do it size times.
.1be0	68		pla				pla
.1be1	a8		tay				tay
.1be2	68		pla				pla
.1be3	aa		tax				tax
.1be4	60		rts				rts
.1be5					RenderGetInk:
.1be5	ad 0d 0c	lda $0c0d			lda 	RenderType 					; type, if 0 it's a bitmap
.1be8	f0 04		beq $1bee			beq 	_RGIBitmap
.1bea	bd 0e 0c	lda $0c0e,x			lda 	RenderCache,x 				; read from the cache.
.1bed	60		rts				rts
.1bee					_RGIBitmap:
.1bee	bd 0e 0c	lda $0c0e,x			lda 	RenderCache,x 				; read from the cache.
.1bf1	f0 04		beq $1bf7			beq 	_RGIBPaper 					; return ink if #0, paper if =0
.1bf3	ad fc 0b	lda $0bfc			lda 	gdInk
.1bf6	60		rts				rts
.1bf7					_RGIBPaper:
.1bf7	ad fd 0b	lda $0bfd			lda 	gdPaper
.1bfa	60		rts				rts
.1bfb					RenderFlipXY:
.1bfb	ad 00 0c	lda $0c00			lda 	gdFlip 						; check any flip at all
.1bfe	29 03		and #$03			and 	#3
.1c00	f0 1c		beq $1c1e			beq 	_RFExit
.1c02	4a		lsr a				lsr 	a 							; bit 0 in carry flag
.1c03	90 09		bcc $1c0e			bcc 	_RFNoHFlip
.1c05	ad 0b 0c	lda $0c0b			lda 	RenderWidth 				; X Flip
.1c08	86 32		stx $32				stx 	tempShort
.1c0a	18		clc				clc
.1c0b	e5 32		sbc $32				sbc 	tempShort
.1c0d	aa		tax				tax
.1c0e					_RFNoHFlip:
.1c0e	ad 00 0c	lda $0c00			lda 	gdFlip
.1c11	29 02		and #$02			and 	#2 							; bit 1 check
.1c13	f0 09		beq $1c1e			beq 	_RFExit
.1c15	ad 0c 0c	lda $0c0c			lda 	RenderHeight 				; Y Flip
.1c18	84 32		sty $32				sty 	tempShort
.1c1a	18		clc				clc
.1c1b	e5 32		sbc $32				sbc 	tempShort
.1c1d	a8		tay				tay
.1c1e					_RFExit:
.1c1e	60		rts				rts
.1c1f					RenderCheckRange:
.1c1f	85 2b		sta $2b				sta 	temp0+1 					; save multiplier => temp0+1
.1c21	ac fe 0b	ldy $0bfe			ldy 	gdSize 						; multiplicand (size) => temp0, must be non zero
.1c24	84 2a		sty $2a				sty 	temp0
.1c26	f0 2b		beq $1c53			beq 	_RCRValue
.1c28	a9 00		lda #$00			lda 	#0 							; total
.1c2a					_RCRMultiply:
.1c2a	46 2a		lsr $2a				lsr 	temp0 						; shift LSB size into carry
.1c2c	90 05		bcc $1c33			bcc 	_RCRNoAdd 					; not adding this time.
.1c2e	18		clc				clc
.1c2f	65 2b		adc $2b				adc 	temp0+1 					; add the size.
.1c31	b0 20		bcs $1c53			bcs 	_RCRValue 					; overflow
.1c33					_RCRNoAdd:
.1c33	06 2b		asl $2b				asl 	temp0+1 					; double multiplier
.1c35	a4 2a		ldy $2a				ldy 	temp0 						; until adder is zero
.1c37	d0 f1		bne $1c2a			bne 	_RCRMultiply
.1c39	18		clc				clc 								; add to x2 or y2, store in temp0
.1c3a	7d ee 0b	adc $0bee,x			adc 	gX2,x 						; this is the Right/Bottom coordinate of the image
.1c3d	85 2a		sta $2a				sta 	temp0
.1c3f	bd ef 0b	lda $0bef,x			lda 	gX2+1,x
.1c42	69 00		adc #$00			adc 	#0
.1c44	85 2b		sta $2b				sta 	temp0+1
.1c46	a5 2a		lda $2a				lda 	temp0 						; check right vs edge of screen.
.1c48	dd 01 0c	cmp $0c01,x			cmp 	gdXLimit,x
.1c4b	a5 2b		lda $2b				lda 	temp0+1
.1c4d	fd 02 0c	sbc $0c02,x			sbc 	gdXLimit+1,x
.1c50	b0 01		bcs $1c53			bcs 	_RCRValue 					; does not fit, so don't draw.
.1c52	60		rts				rts
.1c53					_RCRValue:
.1c53	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.1c55	20 18 15	jsr $1518		jsr	errorHandler
.1c58					CallRenderFunction:
.1c58	6c 09 0c	jmp ($0c09)			jmp 	(RenderFunction)
.1c5b					TestImageAccess:
.1c5b	c0 ff		cpy #$ff			cpy 	#255 						; get information
.1c5d	f0 0a		beq $1c69			beq 	_TIAGetInfo
.1c5f	a0 3f		ldy #$3f			ldy 	#63
.1c61					_TIACreate:
.1c61	98		tya				tya
.1c62	99 0e 0c	sta $0c0e,y			sta 	RenderCache,y
.1c65	88		dey				dey
.1c66	10 f9		bpl $1c61			bpl 	_TIACreate
.1c68	60		rts				rts
.1c69					_TIAGetInfo:
.1c69	a9 01		lda #$01			lda 	#1 							; image (1) bitmap (0)
.1c6b	a2 20		ldx #$20			ldx 	#32 						; pixel width
.1c6d	a0 20		ldy #$20			ldy 	#32							; pixel height
.1c6f	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/graphics/utils.asm

.1c70					SetupXY:
.1c70	b9 ea 0b	lda $0bea,y			lda 	gX1,y
.1c73	be eb 0b	ldx $0beb,y			ldx 	gX1+1,y
.1c76	20 3f 1e	jsr $1e3f			jsr 	gdSetX
.1c79	b9 ec 0b	lda $0bec,y			lda 	gY1,y
.1c7c	be ed 0b	ldx $0bed,y			ldx 	gY1+1,y
.1c7f	20 46 1e	jsr $1e46			jsr 	gdSetY
.1c82	20 48 1d	jsr $1d48			jsr 	gdSetDrawPosition
.1c85	60		rts				rts
.1c86					CompareCoords:
.1c86	bd ea 0b	lda $0bea,x			lda 	gX1,x
.1c89	d9 ea 0b	cmp $0bea,y			cmp 	gX1,y
.1c8c	bd eb 0b	lda $0beb,x			lda 	gX1+1,x
.1c8f	f9 eb 0b	sbc $0beb,y			sbc 	gX1+1,y
.1c92	60		rts				rts
.1c93					CompareCoordsSigned:
.1c93	20 86 1c	jsr $1c86			jsr 	CompareCoords
.1c96	50 02		bvc $1c9a			bvc 	_CCSExit
.1c98	49 80		eor #$80			eor 	#$80
.1c9a					_CCSExit:
.1c9a	60		rts				rts
.1c9b					CompareCoordsEq:
.1c9b	bd ea 0b	lda $0bea,x			lda 	gX1,x
.1c9e	d9 ea 0b	cmp $0bea,y			cmp 	gX1,y
.1ca1	d0 06		bne $1ca9			bne 	_CCEExit
.1ca3	bd eb 0b	lda $0beb,x			lda 	gX1+1,x
.1ca6	d9 eb 0b	cmp $0beb,y			cmp 	gX1+1,y
.1ca9					_CCEExit:
.1ca9	60		rts				rts
.1caa					BoxSort:
.1caa	a2 00		ldx #$00			ldx 	#gx1-gx1
.1cac	a0 04		ldy #$04			ldy 	#gx2-gx1
.1cae	20 bf 1c	jsr $1cbf			jsr 	GCompareCoords
.1cb1	20 cc 1c	jsr $1ccc			jsr 	GSortMinMaxCoords
.1cb4	a2 02		ldx #$02			ldx 	#gy1-gx1
.1cb6	a0 06		ldy #$06			ldy 	#gy2-gx1
.1cb8	20 bf 1c	jsr $1cbf			jsr 	GCompareCoords
.1cbb	20 cc 1c	jsr $1ccc			jsr 	GSortMinMaxCoords
.1cbe	60		rts				rts
.1cbf					GCompareCoords:
.1cbf	bd ea 0b	lda $0bea,x			lda 	gx1,x
.1cc2	d9 ea 0b	cmp $0bea,y			cmp 	gx1,y
.1cc5	bd eb 0b	lda $0beb,x			lda 	gx1+1,x
.1cc8	f9 eb 0b	sbc $0beb,y			sbc 	gx1+1,y
.1ccb	60		rts				rts
.1ccc					GSortMinMaxCoords:
.1ccc	90 1c		bcc $1cea			bcc 	GSMMCExit
.1cce					GSwapCoords:
.1cce	bd ea 0b	lda $0bea,x			lda 	gx1,x
.1cd1	48		pha				pha
.1cd2	b9 ea 0b	lda $0bea,y			lda 	gx1,y
.1cd5	9d ea 0b	sta $0bea,x			sta 	gx1,x
.1cd8	68		pla				pla
.1cd9	99 ea 0b	sta $0bea,y			sta 	gx1,y
.1cdc	bd eb 0b	lda $0beb,x			lda 	gx1+1,x
.1cdf	48		pha				pha
.1ce0	b9 eb 0b	lda $0beb,y			lda 	gx1+1,y
.1ce3	9d eb 0b	sta $0beb,x			sta 	gx1+1,x
.1ce6	68		pla				pla
.1ce7	99 eb 0b	sta $0beb,y			sta 	gx1+1,y
.1cea					GSMMCExit:
.1cea	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/driver/coords.asm

.1ceb					gdMvRight:
.1ceb	ee 20 9f	inc $9f20			inc 	$9F20 						; bump $9F20
.1cee	d0 08		bne $1cf8			bne 	_gdMR0
.1cf0	ee 21 9f	inc $9f21			inc 	$9F21
.1cf3	d0 03		bne $1cf8			bne 	_gdMR0
.1cf5	ee 22 9f	inc $9f22			inc 	$9F22
.1cf8					_gdMR0:
.1cf8	ee 52 0c	inc $0c52			inc 	gdXPos
.1cfb	d0 03		bne $1d00			bne 	_gdMR1
.1cfd	ee 53 0c	inc $0c53			inc 	gdXPos+1
.1d00					_gdMR1:
.1d00	60		rts				rts
.1d01					gdMvUp:
.1d01	ad 54 0c	lda $0c54			lda 	gdYPos 						; decrement Y Pos
.1d04	d0 03		bne $1d09			bne 	_gdMU1
.1d06	ce 55 0c	dec $0c55			dec 	gdYPos+1
.1d09	ce 54 0c	dec $0c54	_gdMU1:	dec 	gdYPos
.1d0c	38		sec				sec 								; adjust position by -320
.1d0d	ad 20 9f	lda $9f20			lda 	$9F20
.1d10	e9 40		sbc #$40			sbc 	#64
.1d12	8d 20 9f	sta $9f20			sta 	$9F20
.1d15	ad 21 9f	lda $9f21			lda 	$9F21
.1d18	e9 01		sbc #$01			sbc 	#1
.1d1a	8d 21 9f	sta $9f21			sta 	$9F21
.1d1d	ad 22 9f	lda $9f22			lda 	$9F22
.1d20	e9 00		sbc #$00			sbc 	#0
.1d22	8d 22 9f	sta $9f22			sta 	$9F22
.1d25	60		rts				rts
.1d26					gdMvDown:
.1d26	ee 54 0c	inc $0c54			inc 	gdYPos 						; decrement Y Pos
.1d29	d0 03		bne $1d2e			bne 	_gdMU1
.1d2b	ee 55 0c	inc $0c55			inc 	gdYPos+1
.1d2e					_gdMU1:
.1d2e	18		clc				clc 								; adjust position by -320
.1d2f	ad 20 9f	lda $9f20			lda 	$9F20
.1d32	69 40		adc #$40			adc 	#64
.1d34	8d 20 9f	sta $9f20			sta 	$9F20
.1d37	ad 21 9f	lda $9f21			lda 	$9F21
.1d3a	69 01		adc #$01			adc 	#1
.1d3c	8d 21 9f	sta $9f21			sta 	$9F21
.1d3f	ad 22 9f	lda $9f22			lda 	$9F22
.1d42	69 00		adc #$00			adc 	#0
.1d44	8d 22 9f	sta $9f22			sta 	$9F22
.1d47	60		rts				rts
.1d48					gdSetDrawPosition:
.1d48	a9 00		lda #$00			lda 	#0 							; temp0 is LSB of result start as 256 x Y
.1d4a	85 2a		sta $2a				sta 	temp0
.1d4c	ad 54 0c	lda $0c54			lda 	gdYPos
.1d4f	85 2b		sta $2b				sta 	temp0+1
.1d51	46 2b		lsr $2b				lsr 	temp0+1 					; / 4 so temp0 is YC x 64
.1d53	66 2a		ror $2a				ror 	temp0
.1d55	46 2b		lsr $2b				lsr 	temp0+1
.1d57	66 2a		ror $2a				ror 	temp0
.1d59	ad 54 0c	lda $0c54			lda 	gdYPos 						; add 256 x Y => 320 * Y < 64k
.1d5c	18		clc				clc
.1d5d	65 2b		adc $2b				adc 	temp0+1
.1d5f	85 2b		sta $2b				sta 	temp0+1 					; temp0 = 320 x Y now add X => pixeloffset
.1d61	18		clc				clc
.1d62	a5 2a		lda $2a				lda 	temp0
.1d64	6d 52 0c	adc $0c52			adc 	gdXPos
.1d67	85 2a		sta $2a				sta 	temp0
.1d69	a5 2b		lda $2b				lda 	temp0+1
.1d6b	6d 53 0c	adc $0c53			adc 	gdXPos+1
.1d6e	85 2b		sta $2b				sta 	temp0+1
.1d70	18		clc				clc
.1d71	ad 4f 0c	lda $0c4f			lda 	gdBitmapAddress
.1d74	65 2a		adc $2a				adc 	temp0
.1d76	8d 20 9f	sta $9f20			sta 	$9F20
.1d79	ad 50 0c	lda $0c50			lda 	gdBitmapAddress+1
.1d7c	65 2b		adc $2b				adc 	temp0+1
.1d7e	8d 21 9f	sta $9f21			sta 	$9F21
.1d81	ad 51 0c	lda $0c51			lda 	gdBitmapAddress+2
.1d84	69 00		adc #$00			adc 	#0
.1d86	8d 22 9f	sta $9f22			sta 	$9F22
.1d89	60		rts				rts
.1d8a					gdPlotInk:
.1d8a	ad fc 0b	lda $0bfc			lda 	gdInk
.1d8d					gdPlotA:
.1d8d	8d 23 9f	sta $9f23			sta 	$9F23
.1d90	60		rts				rts
.1d91					gdPlotPaper:
.1d91	ad fd 0b	lda $0bfd			lda 	gdPaper
.1d94	c9 ff		cmp #$ff			cmp 	#$FF
.1d96	f0 03		beq $1d9b			beq 	_gdPPSkip
.1d98	8d 23 9f	sta $9f23			sta 	$9F23
.1d9b					_gdPPSkip:
.1d9b	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/driver/driver.asm

.0c4e					gdEnabled:
>0c4e							.fill 	1
.0c4f					gdBitmapAddress:
>0c4f							.fill 	3
.0c52					gdXPos:
>0c52							.fill 	2
.0c54					gdYPos:
>0c54							.fill 	2
.1d9c					gdModeChanged:
.1d9c	8a		txa				txa
.1d9d	48		pha				pha
.1d9e	98		tya				tya
.1d9f	48		pha				pha
.1da0	a9 00		lda #$00			lda 	#0 							; zero the enabled flag.
.1da2	8d 4e 0c	sta $0c4e			sta 	gdEnabled
.1da5	ad 2a 9f	lda $9f2a			lda 	$9F2A 						; requires $40 for H/V Scale
.1da8	c9 40		cmp #$40			cmp 	#$40
.1daa	d0 1f		bne $1dcb			bne 	_gdExit
.1dac	ad 2b 9f	lda $9f2b			lda 	$9F2B
.1daf	c9 40		cmp #$40			cmp 	#$40
.1db1	d0 18		bne $1dcb			bne 	_gdExit
.1db3	ad 29 9f	lda $9f29			lda 	$9F29 						; read DC_Video, see which layers are enabled.
.1db6	0a		asl a				asl 	a 							;
.1db7	0a		asl a				asl 	a 							; bit 7 now set if layer 1 enabled.
.1db8	10 09		bpl $1dc3			bpl 	_gdNotLayer1
.1dba	48		pha				pha 								; save A
.1dbb	a2 07		ldx #$07			ldx 	#7 							; check offset 7 (e.g. start at $9F34)
.1dbd	20 d3 1d	jsr $1dd3			jsr 	gdCheckBitmap 				; go see if this is a bitmap
.1dc0	68		pla				pla 								; restore A
.1dc1	b0 08		bcs $1dcb			bcs 	_gdExit 					; if successful then exit
.1dc3					_gdNotLayer1:
.1dc3	0a		asl a				asl 	a 							; bit 7 now set if layer 0 enabled.
.1dc4	10 05		bpl $1dcb			bpl 	_gdExit 					; if not enabled, exit
.1dc6	a2 00		ldx #$00			ldx 	#0 							; check offset 0 (e.g. start at $9F2D)
.1dc8	20 d3 1d	jsr $1dd3			jsr 	gdCheckBitmap 				; go see if this is a bitmap
.1dcb					_gdExit:
.1dcb	20 07 1e	jsr $1e07			jsr 	gdClearGraphics 			; clear graphics display.
.1dce	68		pla				pla
.1dcf	a8		tay				tay
.1dd0	68		pla				pla
.1dd1	aa		tax				tax
.1dd2	60		rts				rts
.1dd3					gdCheckBitmap:
.1dd3	bd 2d 9f	lda $9f2d,x			lda 	$9F2D,x 					; look at bitmap bit.
.1dd6	c9 07		cmp #$07			cmp 	#7 							; must be zero map size, bitmap and 8bpp
.1dd8	d0 14		bne $1dee			bne 	_gdCBFail
.1dda	ee 4e 0c	inc $0c4e			inc 	gdEnabled 					; set the enabled flag to non zero.
.1ddd	bd 2f 9f	lda $9f2f,x			lda 	$9F2F,x 					; this is the bitmap address / 2
.1de0	0a		asl a				asl 	a
.1de1	8d 50 0c	sta $0c50			sta 	gdBitmapAddress+1
.1de4	69 00		adc #$00			adc 	#$00 						; set to no move, updated manually.
.1de6	8d 51 0c	sta $0c51			sta 	gdBitmapAddress+2
.1de9	a9 00		lda #$00			lda 	#$00
.1deb	8d 4f 0c	sta $0c4f			sta 	gdBitmapAddress 			; this is a 17 bit address.
.1dee					_gdCBFail:
.1dee	18		clc				clc
.1def	60		rts				rts
.1df0					CommandClg:
.1df0	b1 28		lda ($28),y			lda 	(codePtr),y
.1df2	c9 e2		cmp #$e2			cmp 	#TKW_PAPER
.1df4	d0 0d		bne $1e03			bne 	_CCLClear
.1df6	c8		iny				iny
.1df7	a9 00		lda #$00			lda 	#0
.1df9	a2 0c		ldx #$0c		ldx	#12
.1dfb	20 6d 3e	jsr $3e6d		jsr	mainHandler
.1dfe	a5 98		lda $98				lda 	esInt0
.1e00	8d fd 0b	sta $0bfd			sta 	gdPaper
.1e03					_CCLClear:
.1e03	20 07 1e	jsr $1e07			jsr 	gdClearGraphics
.1e06	60		rts				rts
.1e07					gdClearGraphics:
.1e07	8a		txa				txa
.1e08	48		pha				pha
.1e09	98		tya				tya
.1e0a	48		pha				pha
.1e0b	ad 4e 0c	lda $0c4e			lda 	gdEnabled 					; screen enabled
.1e0e	f0 2a		beq $1e3a			beq 	_gdCGExit
.1e10	a9 40		lda #$40			lda 	#(320) & $FF
.1e12	8d 01 0c	sta $0c01			sta 	gdXLimit
.1e15	a9 01		lda #$01			lda 	#(320) >> 8
.1e17	8d 02 0c	sta $0c02			sta 	1+(gdXLimit)
.1e1a	a9 c8		lda #$c8			lda 	#(200) & $FF
.1e1c	8d 03 0c	sta $0c03			sta 	gdYLimit
.1e1f	a9 00		lda #$00			lda 	#(200) >> 8
.1e21	8d 04 0c	sta $0c04			sta 	1+(gdYLimit)
.1e24	a9 00		lda #$00			lda 	#0 							; home cursor
.1e26	aa		tax				tax
.1e27	20 3f 1e	jsr $1e3f			jsr 	gdSetX
.1e2a	20 46 1e	jsr $1e46			jsr 	gdSetY
.1e2d	20 48 1d	jsr $1d48			jsr 	gdSetDrawPosition 			; set the draw position.
.1e30	a0 fa		ldy #$fa			ldy 	#$FA						; 320 x 200 pixels = $FA00
.1e32	a2 00		ldx #$00			ldx 	#0
.1e34	ad fd 0b	lda $0bfd			lda 	gdPaper
.1e37	20 4d 1e	jsr $1e4d			jsr 	gdOptHorizontalWriter
.1e3a					_gdCGExit:
.1e3a	68		pla				pla
.1e3b	a8		tay				tay
.1e3c	68		pla				pla
.1e3d	aa		tax				tax
.1e3e	60		rts				rts
.1e3f					gdSetX:
.1e3f	8d 52 0c	sta $0c52			sta 	gdXPos
.1e42	8e 53 0c	stx $0c53			stx 	gdXPos+1
.1e45	60		rts				rts
.1e46					gdSetY:
.1e46	8d 54 0c	sta $0c54			sta 	gdYPos
.1e49	8e 55 0c	stx $0c55			stx 	gdYPos+1
.1e4c	60		rts				rts
.1e4d					gdOptHorizontalWriter:
.1e4d	48		pha				pha
.1e4e	ad 22 9f	lda $9f22			lda 	$9F22 						; make it autoincrement.
.1e51	09 10		ora #$10			ora 	#$10
.1e53	8d 22 9f	sta $9f22			sta 	$9F22
.1e56	68		pla				pla
.1e57					_gdOLoop:
.1e57	8d 23 9f	sta $9f23			sta 	$9F23
.1e5a	e0 00		cpx #$00			cpx 	#0
.1e5c	d0 05		bne $1e63			bne 	_gdNoBorrow
.1e5e	c0 00		cpy #$00			cpy 	#0
.1e60	f0 05		beq $1e67			beq 	_gdExit
.1e62	88		dey				dey
.1e63					_gdNoBorrow:
.1e63	ca		dex				dex
.1e64	4c 57 1e	jmp $1e57			jmp 	_gdOLoop
.1e67					_gdExit:
.1e67	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/miscellany/clock.asm

.1e68					Unary_Clock:
.1e68	a2 0c		ldx #$0c		ldx	#12
.1e6a	20 6d 3e	jsr $3e6d		jsr	mainHandler
.1e6d	48		pha				pha 								; save stack pos
.1e6e	a2 04		ldx #$04		ldx	#4
.1e70	20 6d 3e	jsr $3e6d		jsr	mainHandler
.1e73	98		tya				tya
.1e74	48		pha				pha
.1e75	20 50 ff	jsr $ff50			jsr 	$FF50
.1e78	68		pla				pla
.1e79	a8		tay				tay
.1e7a	68		pla				pla 								; restore, repush, put into X to read offset
.1e7b	48		pha				pha
.1e7c	aa		tax				tax
.1e7d	b5 98		lda $98,x			lda 	esInt0,x 					; must be 0-5
.1e7f	c9 06		cmp #$06			cmp 	#6
.1e81	b0 0d		bcs $1e90			bcs 	_UCValue
.1e83	aa		tax				tax 								; index in X and read RTC.
.1e84	b5 02		lda $02,x			lda 	2,x
.1e86	85 32		sta $32				sta 	tempshort
.1e88	68		pla				pla 								; restore number stack index.
.1e89	aa		tax				tax
.1e8a	a5 32		lda $32				lda 	tempShort
.1e8c	95 98		sta $98,x			sta 	esInt0,x 					; rest are set up.
.1e8e	8a		txa				txa
.1e8f	60		rts				rts
.1e90					_UCValue:
.1e90	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.1e92	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/miscellany/joystick.asm

.1e95					Unary_JoyX:
.1e95	38		sec				sec
.1e96	b0 01		bcs $1e99			bcs 	JoystickRead
.1e98					Unary_JoyY:
.1e98	18		clc				clc
.1e99					JoystickRead:
.1e99	48		pha				pha 								; save stack position
.1e9a	08		php				php 								; save test flag.
.1e9b	a2 04		ldx #$04		ldx	#4
.1e9d	20 6d 3e	jsr $3e6d		jsr	mainHandler
.1ea0	20 fa 1e	jsr $1efa			jsr 	ReadJoystick 				; read it.
.1ea3	28		plp				plp
.1ea4	b0 02		bcs $1ea8			bcs 	_JRNoShift 					; if Y, shift right twice so accessing Y buttons
.1ea6	4a		lsr a				lsr 	a
.1ea7	4a		lsr a				lsr 	a
.1ea8					_JRNoShift:
.1ea8	29 03		and #$03			and 	#3 							; isolate the test bits.
.1eaa	f0 0d		beq $1eb9			beq 	JoyReturnA 					; if nothing pressed, return A.
.1eac	c9 03		cmp #$03			cmp 	#3
.1eae	f0 07		beq $1eb7			beq 	JoyReturnFalse 				; could be both on a keyboard.
.1eb0	4a		lsr a				lsr 	a 							; bit 0 set, its +1
.1eb1	b0 16		bcs $1ec9			bcs 	JoyReturn1
.1eb3					JoyReturnTrue:
.1eb3	a9 ff		lda #$ff			lda 	#$FF
.1eb5	d0 02		bne $1eb9			bne 	JoyReturnA
.1eb7					JoyReturnFalse:
.1eb7	a9 00		lda #$00			lda 	#0
.1eb9					JoyReturnA:
.1eb9	85 32		sta $32				sta 	tempShort 					; return A
.1ebb	68		pla				pla
.1ebc	aa		tax				tax
.1ebd	a5 32		lda $32				lda 	tempShort
.1ebf	95 98		sta $98,x			sta 	esInt0,x
.1ec1					JoyReturn13:
.1ec1	95 a0		sta $a0,x			sta 	esInt1,x
.1ec3	95 a8		sta $a8,x			sta 	esInt2,x
.1ec5	95 b0		sta $b0,x			sta 	esInt3,x
.1ec7	8a		txa				txa 								; return NSP in A
.1ec8	60		rts				rts
.1ec9					JoyReturn1:
.1ec9	68		pla				pla
.1eca	aa		tax				tax
.1ecb	a9 01		lda #$01			lda 	#1
.1ecd	95 98		sta $98,x			sta 	esInt0,x
.1ecf	a9 00		lda #$00			lda 	#0
.1ed1	f0 ee		beq $1ec1			beq 	JoyReturn13
.1ed3					Unary_JButton:
.1ed3	48		pha				pha 								; save X on stack, put in X
.1ed4	a2 0c		ldx #$0c		ldx	#12
.1ed6	20 6d 3e	jsr $3e6d		jsr	mainHandler
.1ed9	aa		tax				tax 								; get value to check, push on stack.
.1eda	b5 98		lda $98,x			lda 	esInt0,x
.1edc	c9 04		cmp #$04			cmp 	#4 							; check button 0-3
.1ede	b0 15		bcs $1ef5			bcs 	_UJBadValue
.1ee0	69 05		adc #$05			adc 	#5 							; four more shifts to get the bit into carry.
.1ee2	48		pha				pha 								; save that shift count on the stack.
.1ee3	a2 04		ldx #$04		ldx	#4
.1ee5	20 6d 3e	jsr $3e6d		jsr	mainHandler
.1ee8	68		pla				pla
.1ee9	aa		tax				tax
.1eea	20 fa 1e	jsr $1efa			jsr 	ReadJoystick 				; joystick read
.1eed					_UJShift:
.1eed	4a		lsr a				lsr 	a
.1eee	ca		dex				dex
.1eef	d0 fc		bne $1eed			bne 	_UJShift
.1ef1	b0 c0		bcs $1eb3			bcs 	JoyReturnTrue
.1ef3	90 c2		bcc $1eb7			bcc 	JoyReturnFalse
.1ef5					_UJBadValue:
.1ef5	a2 28		ldx #$28			ldx 	#ErrorID_Hardware
.1ef7	20 18 15	jsr $1518		jsr	errorHandler
.1efa					ReadJoystick:
.1efa	8a		txa				txa
.1efb	48		pha				pha
.1efc	98		tya				tya
.1efd	48		pha				pha
.1efe	a9 00		lda #$00			lda 	#0
.1f00	20 56 ff	jsr $ff56			jsr 	$FF56
.1f03	c0 00		cpy #$00			cpy 	#0
.1f05	d0 11		bne $1f18			bne 	_RJError
.1f07	c9 00		cmp #$00			cmp 	#0 							; bug, returns $00 initially
.1f09	d0 02		bne $1f0d			bne 	_RJNoBug
.1f0b	a9 ff		lda #$ff			lda 	#$FF
.1f0d					_RJNoBug:
.1f0d	85 32		sta $32				sta 	tempShort
.1f0f	68		pla				pla
.1f10	a8		tay				tay
.1f11	68		pla				pla
.1f12	aa		tax				tax
.1f13	a5 32		lda $32				lda 	tempShort
.1f15	49 ff		eor #$ff			eor 	#$FF 						; active 1 bit.
.1f17	60		rts				rts
.1f18					_RJError:
.1f18	a2 28		ldx #$28			ldx 	#ErrorID_Hardware
.1f1a	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/sprites/collide.asm

.0c56					hitSprite1:
>0c56							.fill 	1 							; this won't work ... if you nest HIT() which
.0c57					hitSprite2:
>0c57							.fill 	1
.0c58					hitRange:
>0c58							.fill 	1
.1f1d					FunctionCollide:
.1f1d	48		pha				pha 								; save and put index into X
.1f1e	aa		tax				tax
.1f1f	a9 00		lda #$00			lda 	#0 							; set hit range to default.
.1f21	8d 58 0c	sta $0c58			sta 	hitRange
.1f24	20 c9 1f	jsr $1fc9			jsr 	_FCGetSpriteID
.1f27	8d 56 0c	sta $0c56			sta 	hitSprite1
.1f2a	8a		txa				txa
.1f2b	48		pha				pha
.1f2c	a2 02		ldx #$02		ldx	#2
.1f2e	20 6d 3e	jsr $3e6d		jsr	mainHandler
.1f31	68		pla				pla
.1f32	aa		tax				tax
.1f33	20 c9 1f	jsr $1fc9			jsr 	_FCGetSpriteID
.1f36	8d 57 0c	sta $0c57			sta 	hitSprite2
.1f39	b1 28		lda ($28),y			lda 	(codePtr),y 				; is there a third parameter
.1f3b	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.1f3d	f0 13		beq $1f52			beq 	_FCParam2
.1f3f	8a		txa				txa
.1f40	48		pha				pha
.1f41	a2 02		ldx #$02		ldx	#2
.1f43	20 6d 3e	jsr $3e6d		jsr	mainHandler
.1f46	68		pla				pla
.1f47	a2 0c		ldx #$0c		ldx	#12
.1f49	20 6d 3e	jsr $3e6d		jsr	mainHandler
.1f4c	aa		tax				tax
.1f4d	b5 98		lda $98,x			lda 	esInt0,x
.1f4f	8d 58 0c	sta $0c58			sta 	hitRange
.1f52					_FCParam2:
.1f52	a2 04		ldx #$04		ldx	#4
.1f54	20 6d 3e	jsr $3e6d		jsr	mainHandler
.1f57	68		pla				pla 								; set X to point to the stack again.
.1f58	48		pha				pha
.1f59	aa		tax				tax
.1f5a	98		tya				tya
.1f5b	48		pha				pha
.1f5c	18		clc				clc 								; do it with the horizontal values.
.1f5d	20 7f 1f	jsr $1f7f			jsr 	_FCCheck
.1f60	90 0a		bcc $1f6c			bcc 	_FCFail
.1f62	38		sec				sec 								; do it with the vertical values.
.1f63	20 7f 1f	jsr $1f7f			jsr 	_FCCheck
.1f66	90 04		bcc $1f6c			bcc 	_FCFail
.1f68	a9 ff		lda #$ff			lda 	#255 						; pass, return -1
.1f6a	d0 02		bne $1f6e			bne 	_FCReturnA
.1f6c					_FCFail:
.1f6c	a9 00		lda #$00			lda 	#0 							; return 0, it didn't work.
.1f6e					_FCReturnA:
.1f6e	85 32		sta $32				sta 	tempShort 					; put result in tempShort
.1f70	68		pla				pla
.1f71	a8		tay				tay
.1f72	68		pla				pla 								; restore stack, return result and exit.
.1f73	aa		tax				tax
.1f74	a5 32		lda $32				lda 	tempShort
.1f76	95 98		sta $98,x			sta 	esInt0,x
.1f78	95 a0		sta $a0,x			sta 	esInt1,x
.1f7a	95 a8		sta $a8,x			sta 	esInt2,x
.1f7c	95 b0		sta $b0,x			sta 	esInt3,x
.1f7e	60		rts				rts
.1f7f					_FCCheck:
.1f7f	08		php				php 								; save the H/V flag twice
.1f80	08		php				php
.1f81	ad 56 0c	lda $0c56			lda 	hitSprite1 					; select sprite 1 and read its location
.1f84	20 07 21	jsr $2107			jsr 	SelectSpriteA 				; into X
.1f87	28		plp				plp
.1f88	20 2d 22	jsr $222d			jsr 	SpriteReadCoordinate
.1f8b	ad 57 0c	lda $0c57			lda 	hitSprite2					; now repeat for sprite 2 and location X+1
.1f8e	20 07 21	jsr $2107			jsr 	SelectSpriteA
.1f91	e8		inx				inx
.1f92	28		plp				plp
.1f93	20 2d 22	jsr $222d			jsr 	SpriteReadCoordinate
.1f96	ca		dex				dex
.1f97	38		sec				sec 								; calculate |s1.c-s2.c| put in temp0
.1f98	b5 98		lda $98,x			lda 	esInt0,x
.1f9a	f5 99		sbc $99,x			sbc 	esInt0+1,x
.1f9c	85 2a		sta $2a				sta 	temp0
.1f9e	b5 a0		lda $a0,x			lda 	esInt1,x
.1fa0	f5 a1		sbc $a1,x			sbc 	esInt1+1,x
.1fa2	85 2b		sta $2b				sta 	temp0+1
.1fa4	10 0d		bpl $1fb3			bpl 	_FCCIsPositive
.1fa6	38		sec				sec 								; if -ve calculate |difference|
.1fa7	a9 00		lda #$00			lda 	#0
.1fa9	e5 2a		sbc $2a				sbc 	temp0
.1fab	85 2a		sta $2a				sta 	temp0
.1fad	a9 00		lda #$00			lda 	#0
.1faf	e5 2b		sbc $2b				sbc 	temp0+1
.1fb1	85 2b		sta $2b				sta 	temp0+1
.1fb3					_FCCIsPositive:
.1fb3	a5 2b		lda $2b				lda 	temp0+1 					; if range >= 256 then definitely fail.
.1fb5	d0 10		bne $1fc7			bne 	_FCCFail
.1fb7	18		clc				clc 								; work out required min distance which is
.1fb8	b5 b0		lda $b0,x			lda 	esInt3,x 					; the sum of the half width/heights
.1fba	75 b1		adc $b1,x			adc 	esInt3+1,x
.1fbc	ac 58 0c	ldy $0c58			ldy 	hitRange 					; get the hit range
.1fbf	f0 01		beq $1fc2			beq 	_FCCNoSetRange 				; override if non zero.
.1fc1	98		tya				tya
.1fc2					_FCCNoSetRange:
.1fc2	c5 2a		cmp $2a				cmp 	temp0 						; result is range > distance
.1fc4	f0 01		beq $1fc7			beq 	_FCCFail
.1fc6	60		rts				rts
.1fc7					_FCCFail:
.1fc7	18		clc				clc
.1fc8	60		rts				rts
.1fc9					_FCGetSpriteID:
.1fc9	8a		txa				txa
.1fca	a2 0c		ldx #$0c		ldx	#12
.1fcc	20 6d 3e	jsr $3e6d		jsr	mainHandler
.1fcf	aa		tax				tax
.1fd0	b5 98		lda $98,x			lda 	esInt0,x
.1fd2	30 01		bmi $1fd5			bmi 	_FCGSValue
.1fd4	60		rts				rts
.1fd5					_FCGSValue:
.1fd5	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.1fd7	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/sprites/sprite.asm

.0c59					currSprite:
>0c59							.fill 	2
.1fda					CommandSprite:
.1fda	20 dc 20	jsr $20dc			jsr 	CSCheckOnOff 				; look for TRUE/FALSE
.1fdd	d0 0d		bne $1fec			bne 	_CSCheckClear
.1fdf	ad 29 9f	lda $9f29			lda 	$9F29 						; sprite enable is bit 6.
.1fe2	29 bf		and #$bf			and 	#$BF 						; clear it whatever
.1fe4	90 02		bcc $1fe8			bcc 	_CSNotOn 					; if CS turn on, so set it
.1fe6	09 40		ora #$40			ora 	#$40
.1fe8					_CSNotOn:
.1fe8	8d 29 9f	sta $9f29			sta 	$9F29 						; write it back in new state and exit
.1feb	60		rts				rts
.1fec					_CSCheckClear:
.1fec	a9 00		lda #$00			lda 	#0 							; no sprite currently selected.
.1fee	8d 5a 0c	sta $0c5a			sta 	currSprite+1
.1ff1	b1 28		lda ($28),y			lda 	(codePtr),y 				; check for CLEAR
.1ff3	c9 e8		cmp #$e8			cmp 	#TKW_CLEAR
.1ff5	d0 05		bne $1ffc			bne 	_CSCommandLoop 				; not CLEAR, go to main loop
.1ff7	20 ed 20	jsr $20ed			jsr 	CSClearSprites 				; clear all the sprites
.1ffa	c8		iny				iny 								; consume CLEAR token and exit.
.1ffb	60		rts				rts
.1ffc					_CSCommandLoop:
.1ffc	20 dc 20	jsr $20dc			jsr 	CSCheckOnOff 				; check sprite on/off
.1fff	f0 2c		beq $202d			beq 	_CSSetVisibility
.2001	b1 28		lda ($28),y			lda 	(codePtr),y 				; get and consume character
.2003	c9 80		cmp #$80			cmp 	#TOK_EOL					; EOL exit.
.2005	f0 25		beq $202c			beq 	_CSExit
.2007	c8		iny				iny									; consume it
.2008	c9 ca		cmp #$ca			cmp 	#TKW_COLON 					; colon exit
.200a	f0 20		beq $202c			beq 	_CSExit
.200c	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; semantic comma
.200e	f0 ec		beq $1ffc			beq 	_CSCommandLoop
.2010	c9 da		cmp #$da			cmp		#TKW_IMAGE 					; image ?
.2012	f0 69		beq $207d			beq 	_CSSetImage
.2014	c9 dc		cmp #$dc			cmp 	#TKW_FLIP 					; flip ?
.2016	f0 2b		beq $2043			beq 	_CSSetFlip
.2018	c9 ce		cmp #$ce			cmp 	#TKW_TO 					; to ?
.201a	f0 46		beq $2062			beq 	_CSSetPos
.201c	88		dey				dey 								; unpick DEY
.201d	a9 00		lda #$00			lda 	#0 							; sprite # now at level 0
.201f	a2 0c		ldx #$0c		ldx	#12
.2021	20 6d 3e	jsr $3e6d		jsr	mainHandler
.2024	a5 98		lda $98				lda 	esInt0
.2026	20 07 21	jsr $2107			jsr 	SelectSpriteA
.2029	4c fc 1f	jmp $1ffc			jmp 	_CSCommandLoop
.202c					_CSExit:
.202c	60		rts				rts
.202d					_CSSetVisibility:
.202d	08		php				php 								; save carry
.202e	a9 06		lda #$06			lda 	#6 							; set pos to offset 6.
.2030	20 c3 20	jsr $20c3			jsr 	SpriteSetTarget
.2033	ad 23 9f	lda $9f23			lda 	$9F23 						; read it.
.2036	29 f3		and #$f3			and 	#$F3 						; clear depth bits, disabling it.
.2038	28		plp				plp
.2039	90 02		bcc $203d			bcc 	_CSSetOff 					; check if carry was set
.203b	09 0c		ora #$0c			ora 	#$0C 						; otherwise set depth bits to 11, on top.
.203d					_CSSetOff:
.203d	8d 23 9f	sta $9f23			sta 	$9F23 						; update and loop back
.2040	4c fc 1f	jmp $1ffc			jmp 	_CSCommandLoop
.2043					_CSSetFlip:
.2043	a9 00		lda #$00			lda 	#0 							; image # now at level 0
.2045	a2 0c		ldx #$0c		ldx	#12
.2047	20 6d 3e	jsr $3e6d		jsr	mainHandler
.204a	a9 06		lda #$06			lda 	#6 							; set sprite position to +6
.204c	20 c3 20	jsr $20c3			jsr 	SpriteSetTarget
.204f	a5 98		lda $98				lda 	esInt0 						; flip value & 3 => temp0
.2051	29 03		and #$03			and 	#3
.2053	85 2a		sta $2a				sta 	temp0
.2055	ad 23 9f	lda $9f23			lda 	$9F23 						; update the flip.
.2058	29 fc		and #$fc			and 	#$FC
.205a	05 2a		ora $2a				ora 	temp0
.205c	8d 23 9f	sta $9f23			sta 	$9F23
.205f	4c fc 1f	jmp $1ffc			jmp 	_CSCommandLoop
.2062					_CSSetPos:
.2062	a9 00		lda #$00			lda 	#0 							; X now at level 0
.2064	a2 0a		ldx #$0a		ldx	#10
.2066	20 6d 3e	jsr $3e6d		jsr	mainHandler
.2069	a2 02		ldx #$02		ldx	#2
.206b	20 6d 3e	jsr $3e6d		jsr	mainHandler
.206e	a9 01		lda #$01			lda 	#1 							; Y now at level 1
.2070	a2 0a		ldx #$0a		ldx	#10
.2072	20 6d 3e	jsr $3e6d		jsr	mainHandler
.2075	a2 00		ldx #$00			ldx 	#0 							; coords at 0,1
.2077	20 e9 21	jsr $21e9			jsr 	SpriteMove 					; move it.
.207a	4c fc 1f	jmp $1ffc			jmp 	_CSCommandLoop
.207d					_CSSetImage:
.207d	a9 00		lda #$00			lda 	#0 							; image # now at level 0
.207f	a2 0c		ldx #$0c		ldx	#12
.2081	20 6d 3e	jsr $3e6d		jsr	mainHandler
.2084	a9 00		lda #$00			lda 	#0 							; set sprite position to +0
.2086	20 c3 20	jsr $20c3			jsr 	SpriteSetTarget
.2089	a6 98		ldx $98				ldx 	esInt0 						; get image # into X
.208b	bd a1 0c	lda $0ca1,x			lda 	imageAddr32Low,x 			; copy low address in.
.208e	8d 23 9f	sta $9f23			sta 	$9F23
.2091	ee 20 9f	inc $9f20			inc 	$9F20 						; bump to offset 1.
.2094	bd 61 0c	lda $0c61,x			lda 	imageInfo,x 				; get 4/8 bit flag from info.
.2097	29 10		and #$10			and 	#$10
.2099	0a		asl a				asl 	a
.209a	0a		asl a				asl		a
.209b	0a		asl a				asl 	a 							; put into bit 7
.209c	1d e1 0c	ora $0ce1,x			ora 	imageAddr32High,x 			; or high address with it.
.209f	8d 23 9f	sta $9f23			sta 	$9F23 						; write the high byte.
.20a2	a9 06		lda #$06			lda 	#6
.20a4	20 c3 20	jsr $20c3			jsr 	SpriteSetTarget 			; set sprite on.
.20a7	ad 23 9f	lda $9f23			lda 	$9F23
.20aa	09 0c		ora #$0c			ora 	#$0C
.20ac	8d 23 9f	sta $9f23			sta 	$9F23
.20af	ee 20 9f	inc $9f20			inc 	$9F20 						; point to byte 7 : height/width/palette offset
.20b2	bd 61 0c	lda $0c61,x			lda 	imageInfo,x 				; get image info
.20b5	0a		asl a				asl 	a 							; shift bits 0-3 to 4-7
.20b6	0a		asl a				asl 	a
.20b7	0a		asl a				asl 	a
.20b8	0a		asl a				asl 	a
.20b9	b0 02		bcs $20bd			bcs		_CSNoOffset 				; if bit 4 was set don't set the offset.
.20bb	09 0f		ora #$0f			ora 	#$0F 						; set palette offset and write back
.20bd					_CSNoOffset:
.20bd	8d 23 9f	sta $9f23			sta 	$9F23
.20c0	4c fc 1f	jmp $1ffc			jmp 	_CSCommandLoop
.20c3					SpriteSetTarget:
.20c3	0d 59 0c	ora $0c59			ora 	currSprite
.20c6	8d 20 9f	sta $9f20			sta 	$9F20
.20c9	ad 5a 0c	lda $0c5a			lda 	currSprite+1
.20cc	f0 09		beq $20d7			beq 	_SSTNoSet
.20ce	8d 21 9f	sta $9f21			sta 	$9F21
.20d1	a9 01		lda #$01			lda 	#$01
.20d3	8d 22 9f	sta $9f22			sta 	$9F22
.20d6	60		rts				rts
.20d7					_SSTNoSet:
.20d7	a2 27		ldx #$27			ldx 	#ErrorID_NoSprite
.20d9	20 18 15	jsr $1518		jsr	errorHandler
.20dc					CSCheckOnOff:
.20dc	b1 28		lda ($28),y			lda 	(codePtr),y 				; get and consume it.
.20de	c8		iny				iny
.20df	c9 ab		cmp #$ab			cmp 	#TKW_FALSE					; return CC/EQ if FALSE
.20e1	18		clc				clc
.20e2	f0 08		beq $20ec			beq 	_CSCOExit
.20e4	c9 aa		cmp #$aa			cmp 	#TKW_TRUE 					; return CS/EQ if TRUE
.20e6	38		sec				sec 								; return NE if neither.
.20e7	f0 03		beq $20ec			beq 	_CSCOExit
.20e9	88		dey				dey 								; undo consume
.20ea	c9 aa		cmp #$aa			cmp 	#TKW_TRUE 					; and set NE again, DEY will change it.
.20ec					_CSCOExit:
.20ec	60		rts				rts
.20ed					CSClearSprites:
.20ed	a9 11		lda #$11			lda 	#$11 						; set address to 1FC00 with single bump
.20ef	8d 22 9f	sta $9f22			sta 	$9F22
.20f2	a9 fc		lda #$fc			lda 	#$FC
.20f4	8d 21 9f	sta $9f21			sta 	$9F21
.20f7	a9 00		lda #$00			lda 	#0
.20f9	8d 20 9f	sta $9f20			sta 	$9F20
.20fc					_CSClear:
.20fc	a9 00		lda #$00			lda 	#0 							; set everything to $00
.20fe	8d 23 9f	sta $9f23			sta 	$9F23
.2101	ad 21 9f	lda $9f21			lda 	$9F21
.2104	d0 f6		bne $20fc			bne 	_CSClear
.2106	60		rts				rts
.2107					SelectSpriteA:
.2107	85 2a		sta $2a				sta 	temp0
.2109	a9 00		lda #$00			lda 	#0
.210b	06 2a		asl $2a				asl		temp0 						; multiply A:temp0 by 8
.210d	b0 11		bcs $2120			bcs 	_CSBadValue 				; sprites only 0-127
.210f	06 2a		asl $2a				asl 	temp0
.2111	2a		rol a				rol 	a
.2112	06 2a		asl $2a				asl 	temp0
.2114	2a		rol a				rol 	a
.2115	09 fc		ora #$fc			ora 	#$FC 						; MSB of address (barring $01 upper third byte)
.2117	8d 5a 0c	sta $0c5a			sta 	currSprite+1
.211a	a5 2a		lda $2a				lda 	temp0 						; LSB of address
.211c	8d 59 0c	sta $0c59			sta 	currSprite+0
.211f	60		rts				rts
.2120					_CSBadValue
.2120	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.2122	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/sprites/spritedraw.asm

.0c5b					srenderWidth:
>0c5b							.fill 	1
.2125					Command_Paint:
.2125	a9 2d		lda #$2d			lda 	#ImageHandler & $FF
.2127	a2 21		ldx #$21			ldx 	#ImageHandler >> 8
.2129	20 d5 18	jsr $18d5			jsr 	GHandler
.212c	60		rts				rts
.212d					ImageHandler:
.212d	a9 34		lda #$34			lda 	#SpriteImageAccess & $FF
.212f	a2 21		ldx #$21			ldx 	#SpriteImageAccess >> 8
.2131	4c 65 1b	jmp $1b65			jmp 	ImageRenderer
.2134					SpriteImageAccess:
.2134	c0 ff		cpy #$ff			cpy 	#255
.2136	d0 22		bne $215a			bne 	_SIAGetPixel
.2138	ae ff 0b	ldx $0bff			ldx 	gdImage 					; get the image #
.213b	bd 61 0c	lda $0c61,x			lda 	imageInfo,x 				; get the image information.
.213e	48		pha				pha
.213f	29 03		and #$03			and 	#3 							; LSB x 2 width
.2141	aa		tax				tax
.2142	bd 56 21	lda $2156,x			lda 	_SIASizeTable,x
.2145	8d 5b 0c	sta $0c5b			sta 	sRenderWidth 				; save rendering width.
.2148	aa		tax				tax
.2149	68		pla				pla 								; get back next 2 bits are height
.214a	4a		lsr a				lsr 	a
.214b	4a		lsr a				lsr 	a
.214c	29 03		and #$03			and 	#3
.214e	a8		tay				tay
.214f	b9 56 21	lda $2156,y			lda 	_SIASizeTable,y
.2152	a8		tay				tay
.2153	a9 01		lda #$01			lda 	#1 							; image is type 1, e.g. colour.
.2155	60		rts				rts
.2156					_SIASizeTable:
>2156	08 10 20 40					.byte 	8,16,32,64 					; size of sprites from 2 bits,
.215a					_SIAGetPixel:
.215a	84 2a		sty $2a				sty 	temp0 						; this is the Y size 8,16,32,64 => temp0
.215c	a9 00		lda #$00			lda 	#0
.215e	85 2b		sta $2b				sta 	temp0+1
.2160	ac ff 0b	ldy $0bff			ldy 	gdImage 					; get image info into A
.2163	b9 61 0c	lda $0c61,y			lda 	imageInfo,y
.2166	48		pha				pha
.2167	29 10		and #$10			and 	#$10 						; save the 4 bit flag part in temp1
.2169	85 2c		sta $2c				sta 	temp1
.216b	68		pla				pla 								; get width of sprite as 00-11 (8-64)
.216c	29 03		and #$03			and 	#3 							; we shift left +3 e.g. 2^(A+3)
.216e	18		clc				clc
.216f	69 03		adc #$03			adc 	#3
.2171	a8		tay				tay
.2172					_SIAMultiply:
.2172	06 2a		asl $2a				asl 	temp0
.2174	26 2b		rol $2b				rol 	temp0+1
.2176	88		dey				dey
.2177	d0 f9		bne $2172			bne 	_SIAMultiply
.2179	a5 2c		lda $2c				lda 	temp1 						; if the mode bit is 0 then halve this value
.217b	d0 04		bne $2181			bne 	_SIANoHalf 					; because we pack 2 pixels in every byte.
.217d	46 2b		lsr $2b				lsr 	temp0+1
.217f	66 2a		ror $2a				ror 	temp0
.2181					_SIANoHalf:
.2181	ae ff 0b	ldx $0bff			ldx 	gdImage 					; copy the image address / 32 into temp2/temp3
.2184	bd a1 0c	lda $0ca1,x			lda 	imageAddr32Low,x
.2187	85 2e		sta $2e				sta 	temp2
.2189	bd e1 0c	lda $0ce1,x			lda 	imageAddr32High,x
.218c	85 2f		sta $2f				sta 	temp2+1
.218e	a9 00		lda #$00			lda 	#0
.2190	85 30		sta $30				sta 	temp3
.2192	a2 05		ldx #$05			ldx 	#5 							; multiply by 32 e.g. 2^5
.2194					_SIMult32:
.2194	06 2e		asl $2e				asl 	temp2
.2196	26 2f		rol $2f				rol 	temp2+1
.2198	26 30		rol $30				rol 	temp3
.219a	ca		dex				dex
.219b	d0 f7		bne $2194			bne 	_SIMult32
.219d	ee 25 9f	inc $9f25			inc 	$9F25 						; select alternate data port
.21a0	18		clc				clc
.21a1	a5 2a		lda $2a				lda 	temp0 						; add offset to sprite address x 32 and write to address
.21a3	65 2e		adc $2e				adc 	temp2
.21a5	8d 20 9f	sta $9f20			sta 	$9F20
.21a8	a5 2b		lda $2b				lda 	temp0+1
.21aa	65 2f		adc $2f				adc 	temp2+1
.21ac	8d 21 9f	sta $9f21			sta 	$9F21
.21af	a9 10		lda #$10			lda 	#$10
.21b1	65 30		adc $30				adc 	temp3
.21b3	8d 22 9f	sta $9f22			sta 	$9F22
.21b6	a2 00		ldx #$00			ldx 	#0 							; index into Render Cache.
.21b8					_SIFillCacheLoop:
.21b8	a5 2c		lda $2c				lda 	temp1 						; is it 8 bit ? if so, then exit
.21ba	d0 12		bne $21ce			bne 	_SI8Bit
.21bc	ad 24 9f	lda $9f24			lda 	$9F24 						; get data
.21bf	48		pha				pha 								; save it
.21c0	4a		lsr a				lsr 	a 							; MSB first
.21c1	4a		lsr a				lsr 	a
.21c2	4a		lsr a				lsr 	a
.21c3	4a		lsr a				lsr 	a
.21c4	20 de 21	jsr $21de			jsr 	_SIWrite4Bit
.21c7	68		pla				pla
.21c8	20 de 21	jsr $21de			jsr 	_SIWrite4Bit
.21cb	4c d5 21	jmp $21d5			jmp 	_SIAdvance
.21ce					_SI8Bit:
.21ce	ad 24 9f	lda $9f24			lda 	$9F24 						; copy data into render cache
.21d1	9d 0e 0c	sta $0c0e,x			sta 	RenderCache,x
.21d4	e8		inx				inx
.21d5					_SIAdvance:
.21d5	ec 5b 0c	cpx $0c5b			cpx 	sRenderWidth 				; filled the cache to required width ?
.21d8	d0 de		bne $21b8			bne 	_SIFillCacheLoop
.21da	ce 25 9f	dec $9f25			dec 	$9F25 						; select original data port.
.21dd	60		rts				rts
.21de					_SIWrite4Bit:
.21de	29 0f		and #$0f			and 	#15 						; if 0 (e.g. would paint 240, return 0 transparent)
.21e0	f0 02		beq $21e4			beq 	_SIW4Skip
.21e2	09 f0		ora #$f0			ora 	#$F0
.21e4					_SIW4Skip:
.21e4	9d 0e 0c	sta $0c0e,x			sta 	RenderCache,x
.21e7	e8		inx				inx
.21e8	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/sprites/spritemove.asm

.21e9					SpriteMove:
.21e9	98		tya				tya
.21ea	48		pha				pha
.21eb	a9 07		lda #$07			lda 	#7 									; point to height/width byte and read it.
.21ed	20 c3 20	jsr $20c3			jsr 	SpriteSetTarget
.21f0	ad 23 9f	lda $9f23			lda 	$9F23
.21f3	4a		lsr a				lsr 	a 									; A now contains bits 0-1 (width) 2-3 (height)
.21f4	4a		lsr a				lsr 	a
.21f5	4a		lsr a				lsr 	a
.21f6	4a		lsr a				lsr 	a
.21f7	85 2a		sta $2a				sta 	temp0 								; save these bits so we can work out the centre.
.21f9	a9 02		lda #$02			lda 	#2 									; point to X position.Low
.21fb	20 c3 20	jsr $20c3			jsr 	SpriteSetTarget
.21fe	20 0d 22	jsr $220d			jsr 	SMWritePosition 					; write X position out.
.2201	46 2a		lsr $2a				lsr 	temp0 								; shift height bits into 0,1
.2203	46 2a		lsr $2a				lsr 	temp0
.2205	e8		inx				inx 										; get the y position
.2206	20 0d 22	jsr $220d			jsr 	SMWritePosition 					; and write that out.
.2209	ca		dex				dex 										; fix X and quit.
.220a	68		pla				pla
.220b	a8		tay				tay
.220c	60		rts				rts
.220d					SMWritePosition:
.220d	a5 2a		lda $2a				lda 	temp0 								; get dim size
.220f	29 03		and #$03			and 	#3 									; in range into Y
.2211	a8		tay				tay
.2212	38		sec				sec
.2213	b5 98		lda $98,x			lda 	esInt0,x
.2215	f9 29 22	sbc $2229,y			sbc 	SMHalfSize,y
.2218	8d 23 9f	sta $9f23			sta 	$9F23
.221b	ee 20 9f	inc $9f20			inc 	$9F20
.221e	b5 a0		lda $a0,x			lda 	esInt1,x
.2220	e9 00		sbc #$00			sbc 	#0
.2222	8d 23 9f	sta $9f23			sta 	$9F23
.2225	ee 20 9f	inc $9f20			inc 	$9F20
.2228	60		rts				rts
.2229					SMHalfSize:
>2229	04 08 10 20					.byte 	4,8,16,32 							; half size each dimension.
.222d					SpriteReadCoordinate:
.222d	98		tya				tya
.222e	48		pha				pha
.222f	08		php				php 										; save CTR on stack
.2230	a9 07		lda #$07			lda 	#7 									; point to height/width byte and read it.
.2232	20 c3 20	jsr $20c3			jsr 	SpriteSetTarget
.2235	ad 23 9f	lda $9f23			lda 	$9F23
.2238	4a		lsr a				lsr 	a 									; A now contains bits 0-1 (width) 2-3 (height)
.2239	4a		lsr a				lsr 	a
.223a	4a		lsr a				lsr 	a
.223b	4a		lsr a				lsr 	a
.223c	28		plp				plp 										; restore CTS
.223d	08		php				php
.223e	90 02		bcc $2242			bcc 	_SPRCNotY1 							; if it is Y, e.g. CS, shift twice more.
.2240	4a		lsr a				lsr 	a
.2241	4a		lsr a				lsr 	a
.2242					_SPRCNotY1:
.2242	29 03		and #$03			and 	#3 									; point into half width/height
.2244	a8		tay				tay
.2245	b9 29 22	lda $2229,y			lda 	SMHalfSize,y 						; get half size -> esInt3,x
.2248	95 b0		sta $b0,x			sta 	esInt3,x
.224a	28		plp				plp 										; CS Y CC X
.224b	a9 00		lda #$00			lda 	#0 									; A = 0 X A = 2 Y
.224d	2a		rol a				rol 	a
.224e	2a		rol a				rol 	a
.224f	69 02		adc #$02			adc 	#2 									; A = 2 X A = 4 Y
.2251	20 c3 20	jsr $20c3			jsr 	SpriteSetTarget 					; set data pointer offset by that
.2254	18		clc				clc 										; read and unfix centre.
.2255	ad 23 9f	lda $9f23			lda 	$9F23
.2258	75 b0		adc $b0,x			adc 	esInt3,x
.225a	95 98		sta $98,x			sta 	esInt0,x
.225c	ee 20 9f	inc $9f20			inc 	$9F20 								; do MSB
.225f	ad 23 9f	lda $9f23			lda 	$9F23
.2262	69 00		adc #$00			adc 	#0
.2264	29 0f		and #$0f			and 	#$0F 								; sign extend on bit 11.
.2266	c9 08		cmp #$08			cmp		#$08
.2268	90 02		bcc $226c			bcc 	_SPRCNoSX
.226a	09 f0		ora #$f0			ora 	#$F0
.226c					_SPRCNoSX:
.226c	95 a0		sta $a0,x			sta 	esInt1,x
.226e	68		pla				pla
.226f	a8		tay				tay
.2270	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/sprites/spriteutils.asm

.2271					Sprite_GetX:
.2271	18		clc				clc
.2272	90 01		bcc $2275			bcc 	SpriteGetCode
.2274					Sprite_GetY:
.2274	38		sec				sec
.2275					SpriteGetCode:
.2275	08		php				php 								; CLC : X SEC: Y, save on stack.
.2276	48		pha				pha 								; save stack position
.2277	20 93 22	jsr $2293			jsr 	GetSpriteNumber 			; get # of sprite.
.227a	a2 04		ldx #$04		ldx	#4
.227c	20 6d 3e	jsr $3e6d		jsr	mainHandler
.227f	68		pla				pla
.2280	aa		tax				tax
.2281	28		plp				plp 								; which one ?
.2282	20 2d 22	jsr $222d			jsr 	SpriteReadCoordinate 		; read appropriate coordinate into esInt0,x
.2285	b5 a0		lda $a0,x			lda 	esInt1,x 					; get sign bit, sign extend 16->32 bits
.2287	29 80		and #$80			and 	#$80
.2289	f0 02		beq $228d			beq 	_SGXYPos
.228b	a9 ff		lda #$ff			lda 	#$FF
.228d					_SGXYPos:
.228d	95 a8		sta $a8,x			sta 	esInt2,x
.228f	95 b0		sta $b0,x			sta 	esInt3,x
.2291	8a		txa				txa 								; return NSP in A
.2292	60		rts				rts
.2293					GetSpriteNumber:
.2293	48		pha				pha
.2294	a2 0c		ldx #$0c		ldx	#12
.2296	20 6d 3e	jsr $3e6d		jsr	mainHandler
.2299	68		pla				pla
.229a	aa		tax				tax
.229b	b5 98		lda $98,x			lda 	esInt0,x
.229d	20 07 21	jsr $2107			jsr 	SelectSpriteA
.22a0	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/video/mode.asm

.0c5c					currentMode:
>0c5c							.fill 	4
.22a1					ForceMode0:
.22a1	a2 00		ldx #$00			ldx 	#0
.22a3	86 98		stx $98				stx 	esInt0 						; in case we do it.
.22a5					_FMCheck:
.22a5	bd 38 23	lda $2338,x			lda 	CMModeList,x 				; do we need to switch ?
.22a8	dd 5c 0c	cmp $0c5c,x			cmp 	currentMode,x
.22ab	d0 13		bne $22c0			bne 	CMSetMode 					; different so switch.
.22ad	e8		inx				inx
.22ae	e0 04		cpx #$04			cpx 	#4
.22b0	d0 f3		bne $22a5			bne 	_FMCheck
.22b2	60		rts				rts
.22b3					CommandMode:
.22b3	a9 00		lda #$00			lda 	#0
.22b5	a2 0a		ldx #$0a		ldx	#10
.22b7	20 6d 3e	jsr $3e6d		jsr	mainHandler
.22ba	a5 b0		lda $b0				lda 	esInt3
.22bc	29 70		and #$70			and 	#$70
.22be	d0 06		bne $22c6			bne 	CMNoExpand
.22c0					CMSetMode:
.22c0	20 17 23	jsr $2317			jsr 	CMExpandMode
.22c3	4c da 22	jmp $22da			jmp 	CMUpdateMode
.22c6					CMNoExpand:
.22c6	a5 98		lda $98				lda 	esInt0
.22c8	8d 5c 0c	sta $0c5c			sta 	currentMode
.22cb	a5 a0		lda $a0				lda 	esInt1
.22cd	8d 5d 0c	sta $0c5d			sta 	currentMode+1
.22d0	a5 a8		lda $a8				lda 	esInt2
.22d2	8d 5e 0c	sta $0c5e			sta 	currentMode+2
.22d5	a5 b0		lda $b0				lda 	esInt3
.22d7	8d 5f 0c	sta $0c5f			sta 	currentMode+3
.22da					CMUpdateMode:
.22da	a2 11		ldx #$11			ldx 	#$11
.22dc					_CMClear:
.22dc	a9 00		lda #$00			lda 	#0
.22de	9d 29 9f	sta $9f29,x			sta 	$9F29,X
.22e1	ca		dex				dex
.22e2	10 f8		bpl $22dc			bpl 	_CMClear
.22e4	ad 5f 0c	lda $0c5f			lda 	currentMode+3 				; get current mode
.22e7	48		pha				pha 								; stack twice.
.22e8	48		pha				pha
.22e9	29 70		and #$70			and 	#$70 						; isolates bits 6,5,4 (sprites,L1 enable,L0 enable)
.22eb	09 01		ora #$01			ora 	#$01 						; turn the output on.
.22ed	8d 29 9f	sta $9f29			sta 	$9F29 						; write to DC_VIDEO
.22f0	68		pla				pla 								; get back
.22f1	20 48 23	jsr $2348			jsr 	CMToScale 					; convert lower 2 bits to a scale.
.22f4	8d 2a 9f	sta $9f2a			sta 	$9F2A 						; write to H-Scale
.22f7	68		pla				pla 								; get back, convert bits 2,3 to a scale.
.22f8	4a		lsr a				lsr 	a
.22f9	4a		lsr a				lsr 	a
.22fa	20 48 23	jsr $2348			jsr 	CMToScale 					; convert lower 2 bits to a scale.
.22fd	8d 2b 9f	sta $9f2b			sta 	$9F2B
.2300	a2 00		ldx #$00			ldx 	#0 							; this is offset from $9F2D to do L0
.2302	ad 5c 0c	lda $0c5c			lda 	currentMode					; get L0 config byte
.2305	20 53 23	jsr $2353			jsr 	CMDecodeLayer 				; and decode layer 0
.2308	a2 07		ldx #$07			ldx 	#7 							; when we do layer 1, offset by 7 hence starts at $9F34
.230a	ad 5d 0c	lda $0c5d			lda 	currentMode+1
.230d	20 53 23	jsr $2353			jsr 	CMDecodeLayer
.2310	20 9c 1d	jsr $1d9c			jsr 	gdModeChanged 				; check the bitmap status.
.2313	20 be 18	jsr $18be			jsr 	GResetStorage 				; reset the graphics drawing storage.
.2316	60		rts				rts
.2317					CMExpandMode:
.2317	a5 98		lda $98				lda 	esInt0 						; get mode number
.2319	c9 04		cmp #$04			cmp 	#(CMEndModeList-CMModeList) >> 2
.231b	b0 16		bcs $2333			bcs 	_CMModeError
.231d	0a		asl a				asl 	a 							; x 4 into X
.231e	0a		asl a				asl 	a
.231f	aa		tax				tax
.2320	98		tya				tya
.2321	48		pha				pha
.2322	a0 00		ldy #$00			ldy 	#0
.2324					_CMEMCopy:
.2324	bd 38 23	lda $2338,x			lda 	CMModeList,x
.2327	99 5c 0c	sta $0c5c,y			sta 	currentMode,y
.232a	e8		inx				inx
.232b	c8		iny				iny
.232c	c0 04		cpy #$04			cpy 	#4
.232e	d0 f4		bne $2324			bne 	_CMEMCopy
.2330	68		pla				pla
.2331	a8		tay				tay
.2332	60		rts				rts
.2333					_CMModeError:
.2333	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.2335	20 18 15	jsr $1518		jsr	errorHandler
.2338					CMModeList:
>2338	00 60 00 20					.dword	$20006000 					; Mode 0 which is the standard 80x60 mode, no sprites
>233c	00 60 00 25					.dword 	$25006000					; Mode 1 (40x30)
>2340	00 60 00 2a					.dword 	$2A006000 					; Mode 2 (20x15)
>2344	07 60 00 15					.dword 	$15006007 					; Mode 3 (320x200 256 colour bitmap)
.2348					CMEndModeList:
.2348					CMToScale:
.2348	29 03		and #$03			and 	#3 							; lower 2 bits only
.234a	aa		tax				tax 								; put in X for counting
.234b	a9 00		lda #$00			lda 	#0 							; zero result
.234d	38		sec				sec 								; first time rotate CS in
.234e					_CMTSLoop:
.234e	6a		ror a				ror 	a
.234f	ca		dex				dex
.2350	10 fc		bpl $234e			bpl 	_CMTSLoop
.2352	60		rts				rts
.2353					CMDecodeLayer:
.2353	48		pha				pha 								; save it.
.2354	29 f7		and #$f7			and 	#$F7 						; all the bits except T256C which you can't set using this
.2356	9d 2d 9f	sta $9f2d,x			sta 	$9F2D,X
.2359	68		pla				pla 								; get it back
.235a	29 08		and #$08			and 	#$08 						; the missing bit sets the tile size.
.235c	f0 02		beq $2360			beq 	_CMDLNotSet
.235e	a9 03		lda #$03			lda 	#$03 						; which sets both lower bits, they're square.
.2360					_CMDLNotSet:
.2360	e0 00		cpx #$00			cpx 	#0
.2362	f0 06		beq $236a			beq 	_CMDLayer0 					; layer 1 has standard defaults for tile table, e.g. $7C
.2364	09 7c		ora #$7c			ora 	#$7C 						; so set those bits and write it out.
.2366	9d 2f 9f	sta $9f2f,x			sta 	$9F2F,X
.2369	60		rts				rts
.236a					_CMDLayer0:
.236a	09 80		ora #$80			ora 	#$80 						; tile base is $80
.236c	9d 2f 9f	sta $9f2f,x			sta 	$9F2F,X
.236f	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/video/palette.asm

.2370					CommandPalette:
.2370	a9 00		lda #$00			lda 	#0
.2372	a2 0c		ldx #$0c		ldx	#12
.2374	20 6d 3e	jsr $3e6d		jsr	mainHandler
.2377	a2 02		ldx #$02		ldx	#2
.2379	20 6d 3e	jsr $3e6d		jsr	mainHandler
.237c	a9 01		lda #$01			lda 	#1
.237e	a2 08		ldx #$08		ldx	#8
.2380	20 6d 3e	jsr $3e6d		jsr	mainHandler
.2383	a5 98		lda $98				lda 	esInt0 					; get palette #
.2385	20 95 23	jsr $2395			jsr 	PointToPaletteA			; point to palette register
.2388	a5 99		lda $99				lda 	esInt0+1
.238a	8d 23 9f	sta $9f23			sta 	$9F23
.238d	a5 a1		lda $a1				lda 	esInt1+1
.238f	29 0f		and #$0f			and 	#$0F
.2391	8d 23 9f	sta $9f23			sta 	$9F23
.2394	60		rts				rts
.2395					PointToPaletteA:
.2395	0a		asl a				asl 	a 							; x 2 -> LSB
.2396	8d 20 9f	sta $9f20			sta 	$9F20
.2399	a9 00		lda #$00			lda 	#0 							; carry into A
.239b	2a		rol a				rol 	a
.239c	09 fa		ora #$fa			ora 	#$FA 						; make correct address
.239e	8d 21 9f	sta $9f21			sta 	$9F21
.23a1	a9 11		lda #$11			lda 	#$11 						; $01 and single step => $9F22
.23a3	8d 22 9f	sta $9f22			sta 	$9F22
.23a6	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/video/textdraw.asm

=$f800					DefaultFont = $F800
.23a7					Command_Draw:
.23a7	a9 af		lda #$af			lda 	#TextHandler & $FF
.23a9	a2 23		ldx #$23			ldx 	#TextHandler >> 8
.23ab	20 d5 18	jsr $18d5			jsr 	GHandler
.23ae	60		rts				rts
.23af					TextHandler:
.23af	ad 06 0c	lda $0c06			lda 	gdText+1 					; do we have a string
.23b2	d0 1c		bne $23d0			bne 	_THHasString
.23b4					_THCallRenderer:
.23b4	8a		txa				txa
.23b5	48		pha				pha
.23b6	ad f0 0b	lda $0bf0			lda 	gy2
.23b9	48		pha				pha
.23ba	ad f1 0b	lda $0bf1			lda 	gy2+1
.23bd	48		pha				pha
.23be	a9 04		lda #$04			lda 	#BitmapTextAccess & $FF 	; render current image (gdImage)
.23c0	a2 24		ldx #$24			ldx 	#BitmapTextAccess >> 8
.23c2	20 65 1b	jsr $1b65			jsr 	ImageRenderer
.23c5	68		pla				pla 								; restore y position and x register
.23c6	8d f1 0b	sta $0bf1			sta 	gy2+1
.23c9	68		pla				pla
.23ca	8d f0 0b	sta $0bf0			sta 	gy2
.23cd	68		pla				pla
.23ce	aa		tax				tax
.23cf	60		rts				rts
.23d0					_THHasString:
.23d0	a2 00		ldx #$00			ldx 	#0 							; position in string
.23d2					_THStringLoop:
.23d2	ad 05 0c	lda $0c05			lda 	gdText 						; text => temp0
.23d5	85 2a		sta $2a				sta 	temp0
.23d7	ad 06 0c	lda $0c06			lda 	gdText+1
.23da	85 2b		sta $2b				sta 	temp0+1
.23dc	8a		txa				txa 								; length = string length.
.23dd	a0 00		ldy #$00			ldy 	#0
.23df	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.23e1	f0 20		beq $2403			beq 	_THExit 					; if so exit.
.23e3	e8		inx				inx 								; next character, put in Y
.23e4	8a		txa				txa
.23e5	a8		tay				tay
.23e6	b1 2a		lda ($2a),y			lda 	(temp0),y 					; char to print, override image
.23e8	8d ff 0b	sta $0bff			sta 	gdImage
.23eb	20 b4 23	jsr $23b4			jsr 	_THCallRenderer 			; render the text
.23ee	ad fe 0b	lda $0bfe			lda 	gdSize	 					; get size, need to x by 8 as 8x8 font.
.23f1	0a		asl a				asl		a
.23f2	0a		asl a				asl 	a
.23f3	0a		asl a				asl 	a
.23f4	18		clc				clc
.23f5	6d ee 0b	adc $0bee			adc 	gX2 						; add to horizontal position
.23f8	8d ee 0b	sta $0bee			sta 	gx2
.23fb	90 d5		bcc $23d2			bcc 	_THStringLoop
.23fd	ee ef 0b	inc $0bef			inc 	gx2+1
.2400	4c d2 23	jmp $23d2			jmp 	_THStringLoop 				; do the whole lot.
.2403					_THExit:
.2403	60		rts				rts
.2404					BitmapTextAccess:
.2404	c0 ff		cpy #$ff			cpy 	#$FF 						; get information
.2406	d0 07		bne $240f			bne 	_BTABitmap
.2408	a9 00		lda #$00			lda 	#0 							; bitmap 8x8
.240a	a2 08		ldx #$08			ldx 	#8
.240c	a0 08		ldy #$08			ldy 	#8
.240e	60		rts				rts
.240f					_BTABitmap:
.240f	ad ff 0b	lda $0bff			lda 	gdImage 					; Image => temp0:A
.2412	20 16 24	jsr $2416			jsr 	DrawCharacterA
.2415	60		rts				rts
.2416					DrawCharacterA:
.2416	85 2a		sta $2a				sta 	temp0
.2418	a9 00		lda #$00			lda 	#0
.241a	06 2a		asl $2a				asl 	temp0	 					; x temp0:A x 8
.241c	2a		rol a				rol 	a
.241d	06 2a		asl $2a				asl 	temp0
.241f	2a		rol a				rol 	a
.2420	06 2a		asl $2a				asl 	temp0
.2422	2a		rol a				rol 	a
.2423	09 f8		ora #$f8			ora 	#DefaultFont >> 8 			; A now points into font table.
.2425	ee 25 9f	inc $9f25			inc 	$9F25 						; alternate port set.
.2428	8d 21 9f	sta $9f21			sta 	$9F21 						; set up address
.242b	a9 10		lda #$10			lda 	#$10
.242d	8d 22 9f	sta $9f22			sta 	$9F22
.2430	84 32		sty $32				sty 	tempShort
.2432	a5 2a		lda $2a				lda 	temp0 						; or Y (vertical line) into temp0
.2434	05 32		ora $32				ora 	tempShort
.2436	8d 20 9f	sta $9f20			sta 	$9F20 						; address set up.
.2439	ad 24 9f	lda $9f24			lda 	$9F24 						; get bitmap
.243c	ce 25 9f	dec $9f25			dec 	$9F25 						; original port set back
.243f	a2 07		ldx #$07			ldx 	#7 							; index into rendercache
.2441	85 2a		sta $2a				sta 	temp0 						; bitmap in temp 0
.2443					_BTADoCache:
.2443	a9 00		lda #$00			lda 	#0
.2445	46 2a		lsr $2a				lsr 	temp0
.2447	90 02		bcc $244b			bcc 	_BTANotSet
.2449	a9 ff		lda #$ff			lda 	#255
.244b					_BTANotSet:
.244b	9d 0e 0c	sta $0c0e,x			sta 	renderCache,x
.244e	ca		dex				dex
.244f	10 f2		bpl $2443			bpl 	_BTADoCache
.2451	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/video/vload.asm

.2452					Command_VLoad:
.2452	a9 00		lda #$00			lda 	#0 								; string which is the file name
.2454	a2 0e		ldx #$0e		ldx	#14
.2456	20 6d 3e	jsr $3e6d		jsr	mainHandler
.2459	a2 01		ldx #$01			ldx 	#1 								; load address at +1.
.245b	a5 35		lda $35				lda 	lowMemory 						; load it into lowMemory (for now ?)
.245d	95 98		sta $98,x			sta 	esInt0,x
.245f	a5 36		lda $36				lda 	lowMemory+1
.2461	95 a0		sta $a0,x			sta 	esInt1,x
.2463	a9 00		lda #$00			lda 	#0
.2465	95 a8		sta $a8,x			sta 	esInt2,x
.2467	95 b0		sta $b0,x			sta 	esInt3,x
.2469	a2 0e		ldx #$0e		ldx	#14
.246b	20 f6 14	jsr $14f6		jsr	deviceHandler
.246e	a5 99		lda $99				lda 	esInt0+1 						; (temp0) is where we are decoding from.
.2470	85 2a		sta $2a				sta 	temp0
.2472	a5 a1		lda $a1				lda 	esInt1+1
.2474	85 2b		sta $2b				sta 	temp0+1
.2476	20 f2 24	jsr $24f2			jsr 	LoadVRAMFile 					; load the VRAM file in.
.2479	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/video/vpeekpoke.asm

.247a					Command_VPoke:
.247a	38		sec				sec 						; one byte , CS
.247b	b0 01		bcs $247e			bcs 	CmdVideoWrite
.247d					Command_VDoke:
.247d	18		clc				clc 						; two bytes, CC
.247e					CmdVideoWrite:
.247e	08		php				php 						; save one or two btes
.247f	a9 00		lda #$00			lda 	#0  				; get address and value into levels 0,1
.2481	a2 0a		ldx #$0a		ldx	#10
.2483	20 6d 3e	jsr $3e6d		jsr	mainHandler
.2486	a2 02		ldx #$02		ldx	#2
.2488	20 6d 3e	jsr $3e6d		jsr	mainHandler
.248b	a9 01		lda #$01			lda 	#1
.248d	a2 0a		ldx #$0a		ldx	#10
.248f	20 6d 3e	jsr $3e6d		jsr	mainHandler
.2492	a2 00		ldx #$00			ldx 	#0
.2494	20 a5 24	jsr $24a5			jsr 	SetUpTOSVRamAddress ; copy target address to VRAM address registers
.2497	a5 99		lda $99				lda 	esInt0+1 			; get MSB of write value
.2499	8d 23 9f	sta $9f23			sta 	$9F23
.249c	28		plp				plp 						; if it was Poke then exit
.249d	b0 05		bcs $24a4			bcs 	_CVWExit
.249f	a5 a1		lda $a1				lda 	esInt1+1 			; doke, write the MSB.
.24a1	8d 23 9f	sta $9f23			sta 	$9F23
.24a4					_CVWExit:
.24a4	60		rts				rts
.24a5					SetUpTOSVRamAddress:
.24a5	b5 a8		lda $a8,x			lda 	esInt2,x 			; check range of address, data to $FFFF
.24a7	29 fe		and #$fe			and 	#$FE
.24a9	15 b0		ora $b0,x			ora 	esInt3,x
.24ab	d0 14		bne $24c1			bne 	CVWValue
.24ad	b5 98		lda $98,x			lda 	esInt0,x			; set address up
.24af	8d 20 9f	sta $9f20			sta 	$9F20
.24b2	b5 a0		lda $a0,x			lda 	esInt1,x
.24b4	8d 21 9f	sta $9f21			sta	 	$9F21
.24b7	b5 a8		lda $a8,x			lda 	esInt2,x
.24b9	29 01		and #$01			and 	#1
.24bb	09 10		ora #$10			ora 	#$10 				; step 1.
.24bd	8d 22 9f	sta $9f22			sta 	$9F22
.24c0	60		rts				rts
.24c1					CVWValue:
.24c1	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.24c3	20 18 15	jsr $1518		jsr	errorHandler
.24c6					Command_VPeek:
.24c6	38		sec				sec 						; one byte , CS
.24c7	b0 01		bcs $24ca			bcs 	CmdVideoRead
.24c9					Command_VDeek:
.24c9	18		clc				clc 						; two bytes, CC
.24ca					CmdVideoRead:
.24ca	08		php				php 						; save action on stack.
.24cb	48		pha				pha 						; save stack position
.24cc	a2 0a		ldx #$0a		ldx	#10
.24ce	20 6d 3e	jsr $3e6d		jsr	mainHandler
.24d1	a2 04		ldx #$04		ldx	#4
.24d3	20 6d 3e	jsr $3e6d		jsr	mainHandler
.24d6	68		pla				pla
.24d7	aa		tax				tax
.24d8	20 a5 24	jsr $24a5			jsr 	SetUpTOSVRamAddress	; set up VRAM address.
.24db	a9 00		lda #$00			lda 	#0 					; zero upper 3 bytes
.24dd	95 a0		sta $a0,x			sta 	esInt1,x
.24df	95 a8		sta $a8,x			sta 	esInt2,x
.24e1	95 b0		sta $b0,x			sta 	esInt3,x
.24e3	ad 23 9f	lda $9f23			lda 	$9F23				; copy 1st byte
.24e6	95 98		sta $98,x			sta 	esInt0,x
.24e8	28		plp				plp 						; check if DOKE (carry was clear)
.24e9	b0 05		bcs $24f0			bcs 	_CVRExit
.24eb	ad 23 9f	lda $9f23			lda 	$9F23 				; copy 2nd byte
.24ee	95 a0		sta $a0,x			sta 	esInt1,x
.24f0					_CVRExit:
.24f0	8a		txa				txa 						; return X position.
.24f1	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/video/vramprocess.asm

.0c60					compressMode:
>0c60							.fill 	1
.0c61					imageInfo:
>0c61							.fill 	X16MaxImages
.0ca1					imageAddr32Low:
>0ca1							.fill  	X16MaxImages
.0ce1					imageAddr32High:
>0ce1							.fill  	X16MaxImages
.24f2					LoadVRAMFile:
.24f2	8a		txa				txa
.24f3	48		pha				pha
.24f4	98		tya				tya
.24f5	48		pha				pha
.24f6					_LVRLoop:
.24f6	20 d2 25	jsr $25d2			jsr 	LVFGet 						; get the next (never access direct)
.24f9	c9 80		cmp #$80			cmp 	#$80 						; exit ?
.24fb	f0 42		beq $253f			beq 	_LVRExit
.24fd	b0 5c		bcs $255b			bcs 	_LVRLoad 					; load data in ?
.24ff	c9 08		cmp #$08			cmp 	#$08 						; is it set address ?
.2501	90 11		bcc $2514			bcc 	_LVRSetAddress
.2503	c9 0f		cmp #$0f			cmp 	#$0F 						; is it define palette
.2505	f0 3d		beq $2544			beq 	_LVRSetPalette
.2507	c9 10		cmp #$10			cmp 	#$10 						; is it set compression type ?
.2509	90 2d		bcc $2538			bcc 	_LVRSetCompress
.250b	c9 64		cmp #$64			cmp 	#$64 						; is it set sprite type.
.250d	90 60		bcc $256f			bcc 	_LVRSetSprite
.250f	a2 01		ldx #$01			ldx 	#ErrorID_missing
.2511	20 18 15	jsr $1518		jsr	errorHandler
.2514					_LVRSetAddress:
.2514	85 2d		sta $2d				sta 	temp1+1 					; 24 bit in temp1+1/temp1/A
.2516	20 d2 25	jsr $25d2			jsr 	LVFGet
.2519	85 2c		sta $2c				sta 	temp1
.251b	a9 00		lda #$00			lda 	#0
.251d	46 2d		lsr $2d				lsr 	temp1+1 					; / 2 twice.
.251f	66 2c		ror $2c				ror 	temp1
.2521	6a		ror a				ror		a
.2522	46 2d		lsr $2d				lsr 	temp1+1
.2524	66 2c		ror $2c				ror 	temp1
.2526	6a		ror a				ror		a
.2527	8d 20 9f	sta $9f20			sta 	$9F20 						; set write address with +1 increment
.252a	a5 2c		lda $2c				lda 	temp1
.252c	8d 21 9f	sta $9f21			sta 	$9F21
.252f	a5 2d		lda $2d				lda 	temp1+1
.2531	09 10		ora #$10			ora 	#$10
.2533	8d 22 9f	sta $9f22			sta 	$9F22
.2536	d0 be		bne $24f6			bne 	_LVRLoop
.2538					_LVRSetCompress:
.2538	29 07		and #$07			and 	#7
.253a	8d 60 0c	sta $0c60			sta 	compressMode
.253d	10 b7		bpl $24f6			bpl 	_LVRLoop
.253f					_LVRExit:
.253f	68		pla				pla
.2540	a8		tay				tay
.2541	68		pla				pla
.2542	aa		tax				tax
.2543	60		rts				rts
.2544					_LVRSetPalette:
.2544	20 d2 25	jsr $25d2			jsr 	LVFGet 						; get palette id.
.2547	20 95 23	jsr $2395			jsr 	PointToPaletteA 			; in palette.asm
.254a	20 d2 25	jsr $25d2			jsr 	LVFGet 						; copy 12 bit palette data in.
.254d	8d 23 9f	sta $9f23			sta 	$9F23
.2550	20 d2 25	jsr $25d2			jsr 	LVFGet
.2553	29 0f		and #$0f			and 	#$0F
.2555	8d 23 9f	sta $9f23			sta 	$9F23
.2558	4c f6 24	jmp $24f6			jmp 	_LVRLoop
.255b					_LVRLoad:
.255b	ae 60 0c	ldx $0c60			ldx 	compressMode
.255e	d0 55		bne $25b5			bne 	_LVRNotMode0
.2560	29 7f		and #$7f			and 	#$7F 						; count in X (is > 0)
.2562					_LVRLCopyX:
.2562	aa		tax				tax
.2563					_LVRLCopy:
.2563	20 d2 25	jsr $25d2			jsr 	LVFGet 						; write to data.
.2566	8d 23 9f	sta $9f23			sta 	$9F23
.2569	ca		dex				dex
.256a	d0 f7		bne $2563			bne 	_LVRLCopy
.256c	4c f6 24	jmp $24f6			jmp 	_LVRLoop
.256f					_LVRSetSprite:
.256f	48		pha				pha 								; save on stack
.2570	20 d2 25	jsr $25d2			jsr 	LVFGet 						; get the sprite number into X
.2573	aa		tax				tax
.2574	c9 40		cmp #$40			cmp 	#X16MaxImages				; too high ?
.2576	b0 38		bcs $25b0			bcs 	_LVRSSValue
.2578	68		pla				pla 								; restore the data held in the first byte
.2579	9d 61 0c	sta $0c61,x			sta 	imageInfo,x 				; and write into the sprite image table.
.257c					_LVRAlignVRAM:
.257c	ad 20 9f	lda $9f20			lda 	$9F20 						; check VRAM on 32 byte boundary
.257f	29 1f		and #$1f			and 	#$1F
.2581	f0 07		beq $258a			beq 	_LVRAligned
.2583	a9 00		lda #$00			lda 	#$00
.2585	8d 23 9f	sta $9f23			sta 	$9F23
.2588	f0 f2		beq $257c			beq 	_LVRAlignVRAM
.258a					_LVRAligned:
.258a	ad 22 9f	lda $9f22			lda 	$9F22 						; put address/32 in sprite image table
.258d	4a		lsr a				lsr 	a 	 						; first halve into temp1
.258e	ad 21 9f	lda $9f21			lda 	$9F21
.2591	6a		ror a				ror 	a
.2592	85 2d		sta $2d				sta 	temp1+1
.2594	ad 20 9f	lda $9f20			lda 	$9F20
.2597	6a		ror a				ror 	a
.2598	85 2c		sta $2c				sta 	temp1
.259a	a0 04		ldy #$04			ldy 	#4 							; divide it by 16 in temp1
.259c					_LVRShift:
.259c	46 2d		lsr $2d				lsr 	temp1+1
.259e	66 2c		ror $2c				ror 	temp1
.25a0	88		dey				dey
.25a1	d0 f9		bne $259c			bne 	_LVRShift
.25a3	a5 2d		lda $2d				lda 	temp1+1 					; copy result.
.25a5	9d e1 0c	sta $0ce1,x			sta 	imageAddr32High,x
.25a8	a5 2c		lda $2c				lda 	temp1
.25aa	9d a1 0c	sta $0ca1,x			sta 	imageAddr32Low,x
.25ad	4c f6 24	jmp $24f6			jmp 	_LVRLoop
.25b0					_LVRSSValue:
.25b0	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.25b2	20 18 15	jsr $1518		jsr	errorHandler
.25b5					_LVRNotMode0:
.25b5	e0 01		cpx #$01			cpx 	#1
.25b7	d0 15		bne $25ce			bne 	_LVRNotMode1
.25b9	29 7f		and #$7f			and 	#$7F 						; drop bit 7
.25bb	c9 40		cmp #$40			cmp 	#$40
.25bd	90 a3		bcc $2562			bcc 	_LVRLCopyX 					; 00-3F use mode 0's copying code.
.25bf					_LVRRLEGroup:
.25bf	29 3f		and #$3f			and 	#$3F
.25c1	aa		tax				tax
.25c2	20 d2 25	jsr $25d2			jsr 	LVFGet
.25c5					_LVRLEGroupLoop:
.25c5	8d 23 9f	sta $9f23			sta 	$9F23
.25c8	ca		dex				dex
.25c9	d0 fa		bne $25c5			bne 	_LVRLEGroupLoop
.25cb	4c f6 24	jmp $24f6			jmp 	_LVRLoop
.25ce					_LVRNotMode1:
>25ce	db						.byte 	$DB
.25cf	4c ce 25	jmp $25ce			jmp 	_LVRNotMode1
.25d2	84 32		sty $32		LVFGet:	sty 	tempShort
.25d4	a0 00		ldy #$00			ldy 	#0
.25d6	b1 2a		lda ($2a),y			lda 	(temp0),y
.25d8	a4 32		ldy $32				ldy	 	tempShort
.25da	e6 2a		inc $2a				inc 	temp0
.25dc	d0 02		bne $25e0			bne 	_LVFGExit
.25de	e6 2b		inc $2b				inc 	temp0+1
.25e0					_LVFGExit:
.25e0	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Return to file: basic.asm

.25e1					section_end_extension:
.25e1					section_start_floatingpoint:

;******  Processing file: floatingpoint/floatingpoint.asm

.25e1					floatingpointHandler:
.25e1	a2 03		ldx #$03			ldx 	#ErrorID_NoModule
.25e3	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: basic.asm

.25e6					section_end_floatingpoint:
.25e6					section_start_interaction:

;******  Processing file: interaction/interaction.asm


;******  Processing file: interaction/cold.asm

.25e6					ColdStartEntry:
.25e6	a2 ff		ldx #$ff			ldx 	#$FF
.25e8	9a		txs				txs
.25e9	20 72 26	jsr $2672			jsr 	ForceStandardMode
.25ec	a2 04		ldx #$04		ldx	#4
.25ee	20 f6 14	jsr $14f6		jsr	deviceHandler
.25f1	a0 ff		ldy #$ff			ldy 	#255
.25f3					_CSBanner:
.25f3	c8		iny				iny
.25f4	b9 1a 26	lda $261a,y			lda 	Intro,y
.25f7	f0 14		beq $260d			beq 	_CSStart
.25f9	c9 08		cmp #$08			cmp 	#8
.25fb	90 08		bcc $2605			bcc 	_CSInk
.25fd	a2 16		ldx #$16		ldx	#22
.25ff	20 f6 14	jsr $14f6		jsr	deviceHandler
.2602	4c f3 25	jmp $25f3			jmp 	_CSBanner
.2605					_CSInk:
.2605	a2 08		ldx #$08		ldx	#8
.2607	20 f6 14	jsr $14f6		jsr	deviceHandler
.260a	4c f3 25	jmp $25f3			jmp 	_CSBanner
.260d					_CSStart:
.260d	a2 16		ldx #$16		ldx	#22
.260f	20 6d 3e	jsr $3e6d		jsr	mainHandler
.2612	a2 06		ldx #$06		ldx	#6
.2614	20 6d 3e	jsr $3e6d		jsr	mainHandler
.2617	4c 32 27	jmp $2732			jmp 	WarmStartEntry
>261a	06 2a 2a 2a 20 36 35 30		Intro:	.text 	6,"*** 6502 Extended BASIC ***",13,13
>2622	32 20 45 78 74 65 6e 64 65 64 20 42 41 53 49 43
>2632	20 2a 2a 2a 0d 0d
>2638	03 57 72 69 74 74 65 6e				.text 	3,"Written by Paul Robson 2021",13,13
>2640	20 62 79 20 50 61 75 6c 20 52 6f 62 73 6f 6e 20
>2650	32 30 32 31 0d 0d
>2656	02 42 61 73 69 63 20				.text 	2,"Basic "
>265d	30 2e 32 31					.text "0.21"
>2661	20 28						.text 	" ("
>2663	30 35 2d 41 70 72 2d 32				.text "05-Apr-2021"
>266b	30 32 31
>266e	29 0d 0d 00					.text 	")",13,13,0
.2672					ForceStandardMode:
.2672	a9 fe		lda #$fe			lda 	#$FE
.2674	20 69 18	jsr $1869		jsr	extensionHandler
.2677	60		rts				rts

;******  Return to file: interaction/interaction.asm


;******  Processing file: interaction/delete.asm

.2678					DeleteLine:
.2678	ad c8 0a	lda $0ac8			lda 	basePage 					; copy program base to temp0
.267b	85 2a		sta $2a				sta 	temp0
.267d	ad c9 0a	lda $0ac9			lda 	basePage+1
.2680	85 2b		sta $2b				sta 	temp0+1
.2682	a0 01		ldy #$01	_DLLoop:ldy 	#1 							; see if found line ?
.2684	a5 98		lda $98				lda 	esInt0 						; e.g. the linenumbers match
.2686	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.2688	d0 07		bne $2691			bne 	_DLNext
.268a	c8		iny				iny
.268b	a5 a0		lda $a0				lda 	esInt1
.268d	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.268f	f0 06		beq $2697			beq 	_DLFound
.2691	20 b5 26	jsr $26b5	_DLNext:jsr 	IAdvanceTemp0 				; shift temp0 forward, return Z flag set if end.
.2694	d0 ec		bne $2682			bne 	_DLLoop
.2696	60		rts				rts
.2697					_DLFound:
.2697	a0 00		ldy #$00			ldy 	#0 							; this is the line to cut, so this offset is the bytes to remove
.2699	b1 2a		lda ($2a),y			lda 	(temp0),y
.269b	a8		tay				tay 								; so we copy from (temp0),y
.269c	a2 00		ldx #$00			ldx 	#0  						; to (temp0,x)
.269e					_DLCopyDown:
.269e	b1 2a		lda ($2a),y			lda 	(temp0),y 					; copy one byte.
.26a0	81 2a		sta ($2a,x)			sta 	(temp0,x)
.26a2	e6 2a		inc $2a				inc 	temp0 						; advance pointer
.26a4	d0 02		bne $26a8			bne 	_DLNoCarry
.26a6	e6 2b		inc $2b				inc 	temp0+1
.26a8					_DLNoCarry:
.26a8	a5 2a		lda $2a				lda 	temp0 						; until hit low memory
.26aa	c5 35		cmp $35				cmp 	lowMemory 					; which is comfortably after End Program.
.26ac	d0 f0		bne $269e			bne 	_DLCopyDown
.26ae	a5 2b		lda $2b				lda 	temp0+1
.26b0	c5 36		cmp $36				cmp 	lowMemory+1
.26b2	d0 ea		bne $269e			bne 	_DLCopyDown
.26b4	60		rts				rts
.26b5					IAdvanceTemp0:
.26b5	84 32		sty $32				sty 	tempShort
.26b7	18		clc				clc
.26b8	a0 00		ldy #$00			ldy 	#0 							; get offset
.26ba	b1 2a		lda ($2a),y			lda 	(temp0),y 					; add to temp0
.26bc	65 2a		adc $2a				adc 	temp0
.26be	85 2a		sta $2a				sta 	temp0
.26c0	90 02		bcc $26c4			bcc 	_IATNoCarry
.26c2	e6 2b		inc $2b				inc 	temp0+1
.26c4					_IATNoCarry:
.26c4	b1 2a		lda ($2a),y			lda 	(temp0),y
.26c6	a4 32		ldy $32				ldy 	tempShort
.26c8	c9 00		cmp #$00			cmp		#0 							; Z set if program end.
.26ca	60		rts				rts

;******  Return to file: interaction/interaction.asm


;******  Processing file: interaction/insert.asm

.26cb					InsertLine:
.26cb	ad c8 0a	lda $0ac8			lda 	basePage 					; copy program base to temp0
.26ce	85 2a		sta $2a				sta 	temp0
.26d0	ad c9 0a	lda $0ac9			lda 	basePage+1
.26d3	85 2b		sta $2b				sta 	temp0+1
.26d5					_ILLoop:
.26d5	a0 01		ldy #$01			ldy 	#1
.26d7	b1 2a		lda ($2a),y			lda 	(temp0),y
.26d9	c5 98		cmp $98				cmp 	esInt0
.26db	c8		iny				iny
.26dc	b1 2a		lda ($2a),y			lda 	(temp0),y
.26de	e5 a0		sbc $a0				sbc 	esInt1
.26e0	b0 05		bcs $26e7			bcs 	_ILFound 					; we know it cannot be equal, it would have been deleted
.26e2	20 b5 26	jsr $26b5			jsr 	IAdvanceTemp0 				; shift temp0 forward, return Z flag set if end.
.26e5	d0 ee		bne $26d5			bne 	_ILLoop
.26e7					_ILFound:
.26e7	a5 35		lda $35				lda 	lowMemory 					; shift lowMemory up to make space for it.
.26e9	85 2c		sta $2c				sta 	temp1             			; this pointer goes backwards
.26eb	a5 36		lda $36				lda 	lowMemory+1
.26ed	85 2d		sta $2d				sta 	temp1+1
.26ef	ad 5e 0e	lda $0e5e			lda 	tokenBufferIndex 			; space to make in Y, 0 in X.
.26f2	18		clc				clc 								; add 3 for the line number and offset.
.26f3	69 03		adc #$03			adc 	#3 							; tokenbuffer already has $80
.26f5	a8		tay				tay
.26f6	a2 00		ldx #$00			ldx 	#0
.26f8	a1 2c		lda ($2c,x)	_ILMove:lda 	(temp1,x)					; shift up
.26fa	91 2c		sta ($2c),y			sta 	(temp1),y
.26fc	a5 2c		lda $2c				lda 	temp1 						; check reached the insert point ?
.26fe	c5 2a		cmp $2a				cmp 	temp0
.2700	d0 06		bne $2708			bne 	_ILMNext
.2702	a5 2d		lda $2d				lda 	temp1+1
.2704	c5 2b		cmp $2b				cmp 	temp0+1
.2706	f0 0b		beq $2713			beq 	_ILMCopy
.2708					_ILMNext:
.2708	a5 2c		lda $2c				lda 	temp1
.270a	d0 02		bne $270e			bne 	_ILNoBorrow
.270c	c6 2d		dec $2d				dec 	temp1+1
.270e					_ILNoBorrow:
.270e	c6 2c		dec $2c				dec 	temp1
.2710	4c f8 26	jmp $26f8			jmp 	_ILMove 					; and go round again
.2713					_ILMCopy:
.2713	98		tya				tya 								; Y is the offset of the new line.
.2714	81 2a		sta ($2a,x)			sta 	(temp0,x)					; X = 0 still.
.2716	a0 01		ldy #$01			ldy 	#1 							; copy in line number.
.2718	a5 98		lda $98				lda 	esInt0
.271a	91 2a		sta ($2a),y			sta 	(temp0),y
.271c	c8		iny				iny
.271d	a5 a0		lda $a0				lda 	esInt1
.271f	91 2a		sta ($2a),y			sta 	(temp0),y
.2721	a0 00		ldy #$00			ldy 	#0 							; copy the body in
.2723					_ILMCopy2:
.2723	b1 28		lda ($28),y			lda 	(codePtr),y
.2725	c8		iny				iny
.2726	c8		iny				iny
.2727	c8		iny				iny
.2728	91 2a		sta ($2a),y			sta 	(temp0),y
.272a	88		dey				dey
.272b	88		dey				dey
.272c	cc 5e 0e	cpy $0e5e			cpy 	tokenBufferIndex
.272f	d0 f2		bne $2723			bne 	_ILMCopy2
.2731	60		rts				rts

;******  Return to file: interaction/interaction.asm


;******  Processing file: interaction/warm.asm

.2732					WarmStartEntry:
.2732	a2 ff		ldx #$ff			ldx 	#$FF
.2734	9a		txs				txs
.2735	20 72 26	jsr $2672			jsr 	ForceStandardMode
.2738	a9 02		lda #$02			lda 	#2							; green text.
.273a	a2 08		ldx #$08		ldx	#8
.273c	20 f6 14	jsr $14f6		jsr	deviceHandler
.273f	a2 0c		ldx #$0c		ldx	#12
.2741	20 f6 14	jsr $14f6		jsr	deviceHandler
.2744	a5 2a		lda $2a				lda 	temp0	 					; copy temp0 to codePtr
.2746	85 28		sta $28				sta 	codePtr
.2748	a5 2b		lda $2b				lda 	temp0+1
.274a	85 29		sta $29				sta 	codePtr+1
.274c	a2 06		ldx #$06		ldx	#6
.274e	20 f6 14	jsr $14f6		jsr	deviceHandler
.2751	a2 08		ldx #$08		ldx	#8
.2753	20 c0 49	jsr $49c0		jsr	tokeniserHandler
.2756	c9 00		cmp #$00			cmp 	#0
.2758	f0 25		beq $277f			beq 	WSEError 					; failed (tokenise can fail if it doesn't know a character e.g. |)
.275a	a9 5b		lda #$5b			lda 	#(tokenHeader) & $FF
.275c	85 28		sta $28				sta 	codePtr
.275e	a9 0d		lda #$0d			lda 	#(tokenHeader) >> 8
.2760	85 29		sta $29				sta 	1+(codePtr)
.2762	ad 5e 0d	lda $0d5e			lda 	tokenBuffer 				; is it a blank line, go get another line.
.2765	c9 80		cmp #$80			cmp 	#$80
.2767	f0 c9		beq $2732			beq 	WarmStartEntry
.2769	29 c0		and #$c0			and 	#$C0						; does it start with a number
.276b	c9 40		cmp #$40			cmp 	#$40 						; e.g. is it 01xx xxxx
.276d	f0 15		beq $2784			beq 	HasLineNumber
.276f	a9 00		lda #$00			lda 	#0 							; zero the token header, so it will look like a
.2771	8d 5b 0d	sta $0d5b			sta 	tokenHeader 				; fake program line.
.2774	8d 5c 0d	sta $0d5c			sta 	tokenHeader+1
.2777	8d 5d 0d	sta $0d5d			sta 	tokenHeader+2
.277a	a2 18		ldx #$18		ldx	#24
.277c	20 6d 3e	jsr $3e6d		jsr	mainHandler
.277f					WSEError:
.277f	a2 1e		ldx #$1e			ldx 	#ErrorID_Tokenise
.2781	20 18 15	jsr $1518		jsr	errorHandler
.2784					HasLineNumber:
.2784	a0 03		ldy #$03			ldy 	#3 							; get line number
.2786	a9 00		lda #$00			lda 	#0
.2788	a2 0a		ldx #$0a		ldx	#10
.278a	20 6d 3e	jsr $3e6d		jsr	mainHandler
.278d	a5 a8		lda $a8				lda 	esInt2		 				; check in range (only 2 bytes)
.278f	05 b0		ora $b0				ora 	esInt3
.2791	d0 ec		bne $277f			bne 	WSEError
.2793	98		tya				tya 								; make codePtr point to code after the line number.
.2794	18		clc				clc 								; by skipping over the tokenised number.
.2795	65 28		adc $28				adc 	codePtr
.2797	85 28		sta $28				sta 	codePtr
.2799	90 02		bcc $279d			bcc		_HLNNoCarry
.279b	e6 29		inc $29				inc 	codePtr+1
.279d					_HLNNoCarry:
.279d	98		tya				tya 								; subtract that offset from the code buffer index
.279e	38		sec				sec
.279f	49 ff		eor #$ff			eor 	#$FF
.27a1	6d 5e 0e	adc $0e5e			adc 	tokenBufferIndex
.27a4	18		clc				clc 								; add space allowing for header & $80 trailer
.27a5	69 04		adc #$04			adc 	#4
.27a7	8d 5e 0e	sta $0e5e			sta 	tokenBufferIndex 			; this is the number of bytes occupied.
.27aa	20 78 26	jsr $2678			jsr 	DeleteLine 					; always delete the line, it's deleted and reinserted.
.27ad					_HLNNoDelete:
.27ad	ad 5e 0e	lda $0e5e			lda 	tokenBufferIndex 			; if line was empty, then don't insert
.27b0	c9 01		cmp #$01			cmp 	#1 							; (the one character is the EOL marker)
.27b2	f0 0c		beq $27c0			beq 	_HLMEditDone
.27b4	a5 36		lda $36				lda 	lowMemory+1 				; is there space, if we allow a little bit of
.27b6	18		clc				clc 								; workspace (1k)
.27b7	69 04		adc #$04			adc 	#4 							; e.g. 4 x 256
.27b9	c5 34		cmp $34				cmp 	highMemory+1
.27bb	b0 0b		bcs $27c8			bcs 	_HLMMemory 					; nope, won't allowit.
.27bd	20 cb 26	jsr $26cb			jsr 	InsertLine 					; insert the line in
.27c0					_HLMEditDone:
.27c0	a2 06		ldx #$06		ldx	#6
.27c2	20 6d 3e	jsr $3e6d		jsr	mainHandler
.27c5	4c 32 27	jmp $2732			jmp 	WarmStartEntry
.27c8					_HLMMemory:
.27c8	a2 22		ldx #$22			ldx 	#ErrorID_Memory
.27ca	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: interaction/interaction.asm

.27cd					interactionHandler:
.27cd	7c d0 27	jmp ($27d0,x)			jmp 	(interactionVectors,x)
.27d0					interactionVectors:
>27d0	d6 27					.word _DummyControlHandler ; index 0
>27d2	e6 25					.word ColdStartEntry       ; index 2
>27d4	32 27					.word WarmStartEntry       ; index 4
.27d6					_DummyControlHandler:
.27d6	60		rts			rts

;******  Return to file: basic.asm

.27d7					section_end_interaction:
.27d7					section_start_main:

;******  Processing file: main/main.asm


;******  Processing file: main/commands/compat/readdata.asm

.0d21					dataPtr:
>0d21							.fill 	2
.0d23					dataIndex:
>0d23							.fill 	1
.27d7					CommandRead:
.27d7	a2 00		ldx #$00			ldx 	#0 							; get a reference to a variable in stack:0
.27d9	20 20 37	jsr $3720			jsr 	EvaluateReference
.27dc	20 1d 28	jsr $281d			jsr 	SwapDPCP 					; use the data pointer.
.27df	b1 28		lda ($28),y			lda 	(codePtr),y 				; see where it is.
.27e1	c8		iny				iny
.27e2	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; if it is on a comma, it is in data.
.27e4	f0 07		beq $27ed			beq 	_CRInData
.27e6	88		dey				dey
.27e7	a9 d9		lda #$d9			lda 	#TKW_DATA 					; scan forward to a DATA statement.
.27e9	aa		tax				tax
.27ea	20 1e 2f	jsr $2f1e			jsr 	ScanForward
.27ed					_CRInData:
.27ed	a2 01		ldx #$01			ldx 	#1 							; evaluate a value at Stack,1
.27ef	20 c8 36	jsr $36c8			jsr 	Evaluate
.27f2	ca		dex				dex 								; and write the value.
.27f3	20 71 2a	jsr $2a71			jsr 	WriteValue
.27f6	20 1d 28	jsr $281d			jsr 	SwapDPCP 					; get the code pointer back.
.27f9	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows ?
.27fb	c8		iny				iny
.27fc	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; if comma, another variable
.27fe	f0 d7		beq $27d7			beq 	CommandRead
.2800	88		dey				dey
.2801	60		rts				rts
.2802					CommandData:
.2802	a9 80		lda #$80			lda 	#TOK_EOL 					; go forward to end of line or colon.
.2804	a2 ca		ldx #$ca			ldx 	#TKW_COLON
.2806	20 1e 2f	jsr $2f1e			jsr 	ScanForward
.2809	88		dey				dey 								; ending on EOL is a scan issue, as it increments
.280a	60		rts				rts
.280b					CommandRestore:
.280b	ad c8 0a	lda $0ac8			lda 	basePage
.280e	8d 21 0d	sta $0d21			sta 	dataPtr
.2811	ad c9 0a	lda $0ac9			lda 	basePage+1
.2814	8d 22 0d	sta $0d22			sta 	dataPtr+1
.2817	a9 03		lda #$03			lda 	#3
.2819	8d 23 0d	sta $0d23			sta 	dataIndex
.281c	60		rts				rts
.281d					SwapDPCP:
.281d	8a		txa				txa
.281e	48		pha				pha
.281f	98		tya				tya 								; swap Y, DataIndex
.2820	ac 23 0d	ldy $0d23			ldy 	DataIndex
.2823	8d 23 0d	sta $0d23			sta 	DataIndex
.2826	a5 28		lda $28				lda 	codePtr 					; swap code/dataptr low
.2828	ae 21 0d	ldx $0d21			ldx 	dataptr
.282b	8d 21 0d	sta $0d21			sta 	dataPtr
.282e	86 28		stx $28				stx 	codePtr
.2830	a5 29		lda $29				lda 	codePtr+1 					; swap code/dataptr high.
.2832	ae 22 0d	ldx $0d22			ldx 	dataptr+1
.2835	8d 22 0d	sta $0d22			sta 	dataPtr+1
.2838	86 29		stx $29				stx 	codePtr+1
.283a	68		pla				pla
.283b	aa		tax				tax
.283c	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/compat/transfer.asm

.283d					CommandGOSUB:
.283d	20 e5 36	jsr $36e5			jsr 	EvaluateRootInteger			; get GOSUB line on stack top.
.2840	a2 04		ldx #$04			ldx 	#4 							; allocate 4 bytes on stack for GOSUB
.2842	a9 47		lda #$47			lda 	#markerGOSUB  				; <marker> <return addr/offset>
.2844	20 1a 3e	jsr $3e1a			jsr 	RSClaim
.2847	a9 01		lda #$01			lda 	#1 							; save position at offset 1.
.2849	20 46 3e	jsr $3e46			jsr 	RSSavePosition
.284c	a2 00		ldx #$00			ldx 	#0 							; point back at GOSUB line
.284e	f0 1b		beq $286b			beq 	GotoTOS 					; and do a GOTO there.
.2850					CommandRETURN:
.2850	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.2852	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.2854	c9 47		cmp #$47			cmp 	#markerGOSUB 						; does it match
.2856	f0 05		beq $285d			beq 	_isok
.2858	a2 0e		ldx #$0e			ldx 	#ErrorID_returnErr
.285a	20 18 15	jsr $1518		jsr	errorHandler
.285d					_isok:
.285d	a9 01		lda #$01			lda 	#1
.285f	20 59 3e	jsr $3e59			jsr 	RSLoadPosition 				; reload the position from offset 1.
.2862	a9 04		lda #$04			lda 	#4 							; throw 4 bytes from stack.
.2864	20 3c 3e	jsr $3e3c			jsr 	RSFree
.2867	60		rts				rts
.2868					CommandGOTO:
.2868	20 e5 36	jsr $36e5			jsr 	EvaluateRootInteger 		; get GOTO line on stack top.
.286b					GotoTOS:
.286b	20 04 32	jsr $3204			jsr 	ResetCodeAddress 			; simple search.
.286e					_GotoSearch:
.286e	a0 00		ldy #$00			ldy 	#0 							; get offset
.2870	b1 28		lda ($28),y			lda 	(codePtr),y
.2872	f0 21		beq $2895			beq 	_GotoError 					; not found.
.2874	c8		iny				iny									; check LSB match
.2875	b1 28		lda ($28),y			lda 	(codePtr),y
.2877	d5 98		cmp $98,x			cmp 	esInt0,x
.2879	d0 07		bne $2882			bne 	_GotoNext
.287b	c8		iny				iny
.287c	b1 28		lda ($28),y			lda 	(codePtr),y
.287e	d5 a0		cmp $a0,x			cmp 	esInt1,x
.2880	f0 10		beq $2892			beq 	_GotoFound
.2882					_GotoNext:
.2882	a0 00		ldy #$00			ldy 	#0 							; go next line
.2884	b1 28		lda ($28),y			lda 	(codePtr),y
.2886	18		clc				clc
.2887	65 28		adc $28				adc 	codePtr
.2889	85 28		sta $28				sta 	codePtr
.288b	90 e1		bcc $286e			bcc 	_GotoSearch
.288d	e6 29		inc $29				inc 	codePtr+1
.288f	4c 6e 28	jmp $286e			jmp 	_GotoSearch
.2892					_GotoFound:
.2892	a0 03		ldy #$03			ldy 	#3 							; continue from that line
.2894	60		rts				rts
.2895					_GotoError:
.2895	a2 0c		ldx #$0c			ldx 	#ErrorID_LineNumber
.2897	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/commands/io/input.asm

=32					MaxInputSize = 32
.0d24					InputBuffer:
>0d24							.fill 	MaxInputSize+1
.289a					Command_Input:
.289a	b1 28		lda ($28),y			lda 	(codePtr),y 			; see what's next.
.289c	c8		iny				iny
.289d	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 				; ignore commas.
.289f	f0 f9		beq $289a			beq 	Command_Input
.28a1	88		dey				dey 							; undo consume
.28a2	c9 ca		cmp #$ca			cmp 	#TKW_COLON
.28a4	f0 54		beq $28fa			beq 	_CIExit 				; : or EOL, exit
.28a6	c9 80		cmp #$80			cmp 	#TOK_EOL
.28a8	f0 50		beq $28fa			beq 	_CIExit
.28aa	c9 40		cmp #$40			cmp 	#$40 					; variable ?
.28ac	90 12		bcc $28c0			bcc 	_CIVariable
.28ae	c9 85		cmp #$85			cmp 	#TOK_STR 				; if not quoted string syntax error.
.28b0	d0 43		bne $28f5			bne 	_CISyntax
.28b2	a2 00		ldx #$00			ldx 	#0
.28b4	20 dc 36	jsr $36dc			jsr 	EvaluateString 			; evaluate and print string
.28b7	20 d3 2a	jsr $2ad3			jsr 	TOSToTemp0
.28ba	20 c9 29	jsr $29c9			jsr 	PrintString
.28bd	4c 9a 28	jmp $289a			jmp 	Command_Input
.28c0					_CIVariable:
.28c0	a2 00		ldx #$00			ldx 	#0 						; evaluate a reference.
.28c2	20 20 37	jsr $3720			jsr 	EvaluateReference  		; this is where its going
.28c5					_CIRetry:
.28c5	a9 3f		lda #$3f			lda 	#"?"					; print prompt
.28c7	a2 14		ldx #$14		ldx	#20
.28c9	20 f6 14	jsr $14f6		jsr	deviceHandler
.28cc	98		tya				tya
.28cd	48		pha				pha
.28ce	20 0e 29	jsr $290e			jsr 	InputString 			; input a string (manually)
.28d1	a2 01		ldx #$01			ldx 	#1
.28d3	20 fb 28	jsr $28fb			jsr 	BufferToStackX 			; make stack,x ref input string.
.28d6	a5 90		lda $90				lda 	esType 					; if target type numeric
.28d8	29 40		and #$40			and 	#$40 					; then convert to number
.28da	d0 11		bne $28ed			bne 	_CIWrite
.28dc	a2 01		ldx #$01			ldx 	#1
.28de	20 d3 2a	jsr $2ad3			jsr 	TOSToTemp0 				; string address in temp0, goes here.
.28e1	a9 0a		lda #$0a			lda 	#10
.28e3	20 ed 3b	jsr $3bed			jsr 	MInt32FromString 		; convert it back from a string.
.28e6	68		pla				pla
.28e7	a8		tay				tay
.28e8	b0 03		bcs $28ed			bcs 	_CIWrite 				; successfully converted.
.28ea	18		clc				clc 							; default fail FP conversion
.28eb	90 d8		bcc $28c5			bcc		_CIRetry				; failed, try again.
.28ed					_CIWrite:
.28ed	a2 00		ldx #$00			ldx 	#0
.28ef	20 71 2a	jsr $2a71			jsr 	WriteValue
.28f2	4c 9a 28	jmp $289a			jmp 	Command_Input
.28f5					_CISyntax:
.28f5	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.28f7	20 18 15	jsr $1518		jsr	errorHandler
.28fa					_CIExit:
.28fa	60		rts				rts
.28fb					BufferToStackX:
.28fb	a9 24		lda #$24			lda 	#InputBuffer & $FF
.28fd	95 98		sta $98,x			sta 	esInt0,x
.28ff	a9 0d		lda #$0d			lda 	#InputBuffer >> 8
.2901	95 a0		sta $a0,x			sta 	esInt1,x
.2903	a9 00		lda #$00			lda 	#0
.2905	95 a8		sta $a8,x			sta 	esInt2,x
.2907	95 b0		sta $b0,x			sta 	esInt3,x
.2909	a9 40		lda #$40			lda 	#$40
.290b	95 90		sta $90,x			sta 	esType,x
.290d	60		rts				rts
.290e					InputString:
.290e	a9 00		lda #$00			lda 	#0
.2910	8d 24 0d	sta $0d24			sta 	InputBuffer
.2913					_InputLoop:
.2913	a2 02		ldx #$02		ldx	#2
.2915	20 f6 14	jsr $14f6		jsr	deviceHandler
.2918	a2 0a		ldx #$0a		ldx	#10
.291a	20 f6 14	jsr $14f6		jsr	deviceHandler
.291d	c9 00		cmp #$00			cmp 	#0
.291f	f0 f2		beq $2913			beq 	_InputLoop
.2921	c9 08		cmp #$08			cmp 	#8
.2923	f0 19		beq $293e			beq 	_InputBackspace
.2925	c9 0d		cmp #$0d			cmp 	#13
.2927	f0 21		beq $294a			beq 	_InputExit
.2929	ae 24 0d	ldx $0d24			ldx 	InputBuffer
.292c	e0 20		cpx #$20			cpx 	#MaxInputSize 			; too many characters
.292e	f0 e3		beq $2913			beq 	_InputLoop
.2930	9d 25 0d	sta $0d25,x			sta 	InputBuffer+1,x 		; write char
.2933	ee 24 0d	inc $0d24			inc 	InputBuffer 			; advance count.
.2936					_InputPrintLoop:
.2936	a2 14		ldx #$14		ldx	#20
.2938	20 f6 14	jsr $14f6		jsr	deviceHandler
.293b	4c 13 29	jmp $2913			jmp	 	_InputLoop
.293e					_InputBackspace:
.293e	ad 24 0d	lda $0d24			lda 	InputBuffer 			; at start
.2941	f0 d0		beq $2913			beq 	_InputLoop
.2943	ce 24 0d	dec $0d24			dec 	InputBuffer
.2946	a9 08		lda #$08			lda 	#8
.2948	d0 ec		bne $2936			bne 	_InputPrintLoop
.294a					_InputExit:
.294a	a2 06		ldx #$06		ldx	#6
.294c	20 f6 14	jsr $14f6		jsr	deviceHandler
.294f	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/io/print.asm

.0d45					lastPrintToken:
>0d45							.fill 	1
.2950					Command_Print:
.2950	a9 00		lda #$00			lda 	#0 							; clear LPT to a non token
.2952	8d 45 0d	sta $0d45			sta 	lastPrintToken
.2955	88		dey				dey
.2956					_PrintLoopSkip:
.2956	c8		iny				iny
.2957					_PrintLoop:
.2957	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows
.2959	c9 80		cmp #$80			cmp 	#TOK_EOL  					; done if end of line or colon
.295b	f0 5b		beq $29b8			beq 	_PrintExit
.295d	c9 ca		cmp #$ca			cmp 	#TKW_COLON
.295f	f0 57		beq $29b8			beq 	_PrintExit
.2961	8d 45 0d	sta $0d45			sta 	lastPrintToken 				; update Last print token, so we check ; and ,
.2964	c9 cc		cmp #$cc			cmp 	#TKW_SEMICOLON 				; ignore semicolon
.2966	f0 ee		beq $2956			beq 	_PrintLoopSkip
.2968	c9 cd		cmp #$cd			cmp 	#TKW_QUOTE 					; ' is new line
.296a	f0 3c		beq $29a8			beq	 	_PrintNewLine
.296c	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; , is print tab
.296e	f0 40		beq $29b0			beq 	_PrintTab
.2970	20 c6 36	jsr $36c6			jsr 	EvaluateRoot 				; evaluate something at the root
.2973	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.2975	85 2a		sta $2a				sta 	temp0
.2977	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.2979	85 2b		sta $2b				sta 	1+(temp0)
.297b	a5 90		lda $90				lda 	esType 						; get type
.297d	f0 15		beq $2994			beq		_PrintInteger
.297f	4a		lsr a				lsr 	a 							; check for floating point
.2980	b0 08		bcs $298a			bcs 	_PrintFloat
.2982					_PrintString:
.2982	a2 00		ldx #$00			ldx 	#0 							; bottom string to temp0
.2984	20 d3 2a	jsr $2ad3			jsr 	TOSToTemp0
.2987	4c a2 29	jmp $29a2			jmp 	_PrintTemp0 				; print no leading space.
.298a					_PrintFloat:
.298a	a9 00		lda #$00			lda 	#0 							; stack level.
.298c	a2 16		ldx #$16		ldx	#22
.298e	20 e1 25	jsr $25e1		jsr	floatingpointHandler
.2991	4c 9b 29	jmp $299b			jmp 	_PrintSpaceTemp0
.2994					_PrintInteger:
.2994	a9 8a		lda #$8a			lda 	#10+$80 					; base 10 signed
.2996	a2 00		ldx #$00			ldx 	#0 							; bottom stack element
.2998	20 d5 3c	jsr $3cd5			jsr 	MInt32ToString				; convert to text
.299b					_PrintSpaceTemp0:
.299b	a9 20		lda #$20			lda 	#32
.299d	a2 14		ldx #$14		ldx	#20
.299f	20 f6 14	jsr $14f6		jsr	deviceHandler
.29a2					_PrintTemp0:
.29a2	20 c9 29	jsr $29c9			jsr 	PrintString
.29a5	4c 57 29	jmp $2957			jmp 	_PrintLoop
.29a8					_PrintNewLine:
.29a8	a2 06		ldx #$06		ldx	#6
.29aa	20 f6 14	jsr $14f6		jsr	deviceHandler
.29ad	4c 56 29	jmp $2956			jmp 	_PrintLoopSkip
.29b0					_PrintTab:
.29b0	a2 1a		ldx #$1a		ldx	#26
.29b2	20 f6 14	jsr $14f6		jsr	deviceHandler
.29b5	4c 56 29	jmp $2956			jmp 	_PrintLoopSkip
.29b8					_PrintExit:
.29b8	ad 45 0d	lda $0d45			lda		lastPrintToken 				; check last token
.29bb	c9 cc		cmp #$cc			cmp 	#TKW_SEMICOLON 				; if , or ; do not print NL
.29bd	f0 09		beq $29c8			beq 	_PrintExit2
.29bf	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.29c1	f0 05		beq $29c8			beq 	_PrintExit2
.29c3	a2 06		ldx #$06		ldx	#6
.29c5	20 f6 14	jsr $14f6		jsr	deviceHandler
.29c8					_PrintExit2:
.29c8	60		rts				rts
.29c9					PrintString:
.29c9	8a		txa				txa
.29ca	48		pha				pha
.29cb	98		tya				tya
.29cc	48		pha				pha
.29cd	a0 00		ldy #$00			ldy 	#0							; get length
.29cf	b1 2a		lda ($2a),y			lda 	(temp0),y
.29d1	aa		tax				tax 								; into X
.29d2	e0 00		cpx #$00	_PSLoop:cpx 	#0 							; finished ?
.29d4	f0 10		beq $29e6			beq 	_PSExit
.29d6	ca		dex				dex
.29d7	8a		txa				txa
.29d8	48		pha				pha
.29d9	c8		iny				iny
.29da	b1 2a		lda ($2a),y			lda 	(temp0),y
.29dc	a2 14		ldx #$14		ldx	#20
.29de	20 f6 14	jsr $14f6		jsr	deviceHandler
.29e1	68		pla				pla
.29e2	aa		tax				tax
.29e3	4c d2 29	jmp $29d2			jmp 	_PSLoop
.29e6					_PSExit:
.29e6	68		pla				pla
.29e7	a8		tay				tay
.29e8	68		pla				pla
.29e9	aa		tax				tax
.29ea	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/io/text.asm

.29eb					Command_CLS:
.29eb	a2 04		ldx #$04		ldx	#4
.29ed	20 f6 14	jsr $14f6		jsr	deviceHandler
.29f0	60		rts				rts
.29f1					Command_Ink:
.29f1	a2 00		ldx #$00			ldx 	#0
.29f3	20 ef 36	jsr $36ef			jsr 	EvaluateSmallInteger
.29f6	a2 08		ldx #$08		ldx	#8
.29f8	20 f6 14	jsr $14f6		jsr	deviceHandler
.29fb	60		rts				rts
.29fc					Command_Paper:
.29fc	a2 00		ldx #$00			ldx 	#0
.29fe	20 ef 36	jsr $36ef			jsr 	EvaluateSmallInteger
.2a01	a2 12		ldx #$12		ldx	#18
.2a03	20 f6 14	jsr $14f6		jsr	deviceHandler
.2a06	60		rts				rts
.2a07					Command_Locate:
.2a07	a2 00		ldx #$00			ldx 	#0
.2a09	20 ef 36	jsr $36ef			jsr 	EvaluateSmallInteger
.2a0c	20 ff 3d	jsr $3dff			jsr 	CheckComma
.2a0f	e8		inx				inx
.2a10	20 ef 36	jsr $36ef			jsr 	EvaluateSmallInteger
.2a13	98		tya				tya
.2a14	48		pha				pha
.2a15	a4 99		ldy $99				ldy 	esInt0+1
.2a17	a5 98		lda $98				lda 	esInt0
.2a19	a2 10		ldx #$10		ldx	#16
.2a1b	20 f6 14	jsr $14f6		jsr	deviceHandler
.2a1e	68		pla				pla
.2a1f	a8		tay				tay
.2a20	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/io/vdu.asm

.2a21					Command_VDU:
.2a21	20 e5 36	jsr $36e5			jsr 	EvaluateRootInteger 			; get integer at root.
.2a24	a5 98		lda $98				lda 	esInt0
.2a26	a2 14		ldx #$14		ldx	#20
.2a28	20 f6 14	jsr $14f6		jsr	deviceHandler
.2a2b					_CVNext:
.2a2b	b1 28		lda ($28),y			lda 	(codePtr),y 					; what follows ?
.2a2d	c8		iny				iny
.2a2e	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 						; comma, do again
.2a30	f0 ef		beq $2a21			beq 	Command_VDU
.2a32	c9 cc		cmp #$cc			cmp 	#TKW_SEMICOLON 					; semicolon, print MSB
.2a34	d0 0a		bne $2a40			bne 	_CVExit
.2a36	a5 a0		lda $a0				lda 	esInt1
.2a38	a2 14		ldx #$14		ldx	#20
.2a3a	20 f6 14	jsr $14f6		jsr	deviceHandler
.2a3d	4c 2b 2a	jmp $2a2b			jmp 	_CVNext
.2a40	88		dey		_CVExit:dey
.2a41	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/link.asm


;******  Return to file: main/main.asm


;******  Processing file: main/commands/misc/assert.asm

.2a42					Command_Assert:
.2a42	20 e5 36	jsr $36e5			jsr 	EvaluateRootInteger 		; what is being asserted.
.2a45	20 a6 3d	jsr $3da6			jsr 	MInt32Zero 					; is it true ?
.2a48	f0 01		beq $2a4b			beq 	_CAError
.2a4a	60		rts				rts
.2a4b					_CAError:
.2a4b	a2 04		ldx #$04			ldx 	#ErrorID_Assert
.2a4d	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/commands/misc/dim.asm

.2a50					Command_Dim:
.2a50	a2 04		ldx #$04		ldx	#4
.2a52	20 91 4d	jsr $4d91		jsr	variableHandler
.2a55	b1 28		lda ($28),y			lda 	(codePtr),y 				; see what follows.
.2a57	c8		iny				iny
.2a58	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; comma follows, go back and do next
.2a5a	f0 f4		beq $2a50			beq 	Command_Dim
.2a5c	88		dey				dey 								; unpick get
.2a5d	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/misc/let.asm

.2a5e					CommandLet:
.2a5e	a2 00		ldx #$00			ldx 	#0  						; get address to write.
.2a60	20 20 37	jsr $3720			jsr 	EvaluateReference
.2a63	a9 8d		lda #$8d			lda 	#TKW_EQUAL 					; check for equals
.2a65	20 e7 3d	jsr $3de7			jsr 	CheckToken
.2a68	e8		inx				inx 								; do RHS
.2a69	20 c8 36	jsr $36c8			jsr 	Evaluate 					; evaluate and dereference
.2a6c	ca		dex				dex
.2a6d	20 71 2a	jsr $2a71			jsr 	WriteValue 					; write it out
.2a70	60		rts				rts
.2a71					WriteValue:
.2a71	98		tya				tya
.2a72	48		pha				pha
.2a73	20 d3 2a	jsr $2ad3			jsr 	TOSToTemp0 					; set temp0 to point to target address.
.2a76	b5 90		lda $90,x			lda 	esType,x 					; check the string flags match
.2a78	55 91		eor $91,x			eor 	esType+1,x 					; one string, one number causes an error.
.2a7a	29 40		and #$40			and 	#$40
.2a7c	d0 50		bne $2ace			bne		_WVType
.2a7e	a0 01		ldy #$01			ldy 	#1 							; for string, copy 0 and 1.
.2a80	b5 90		lda $90,x			lda 	esType,x 					; check for string assignment
.2a82	29 40		and #$40			and 	#$40
.2a84	d0 1f		bne $2aa5			bne 	_WVCopyString
.2a86	b5 90		lda $90,x			lda 	esType,x 					; check both are integer.
.2a88	15 91		ora $91,x			ora 	esType+1,x
.2a8a	4a		lsr a				lsr 	a
.2a8b	90 22		bcc $2aaf			bcc 	_WVCopyData4 				; copy 4 data bytes.
.2a8d	b5 90		lda $90,x			lda 	esType,x
.2a8f	4a		lsr a				lsr 	a
.2a90	90 3c		bcc $2ace			bcc 	_WVType
.2a92	e8		inx				inx 								; force the value being written to be a float.
.2a93	20 2a 33	jsr $332a			jsr 	BPMakeFloat
.2a96	ca		dex				dex
.2a97	20 d3 2a	jsr $2ad3			jsr 	TOSToTemp0 					; set Temp0 to write address
.2a9a	e8		inx				inx
.2a9b	8a		txa				txa
.2a9c	a2 22		ldx #$22		ldx	#34
.2a9e	20 e1 25	jsr $25e1		jsr	floatingpointHandler
.2aa1	aa		tax				tax
.2aa2	4c cb 2a	jmp $2acb			jmp 	_WVCopyExit
.2aa5					_WVCopyString:
.2aa5	8a		txa				txa
.2aa6	a2 10		ldx #$10		ldx	#16
.2aa8	20 2a 41	jsr $412a		jsr	stringHandler
.2aab	aa		tax				tax
.2aac	4c cb 2a	jmp $2acb			jmp 	_WVCopyExit
.2aaf					_WVCopyData4:
.2aaf	b5 90		lda $90,x			lda 	esType,x 					; is the int ref a byte ref ?
.2ab1	29 20		and #$20			and 	#$20 						; (e.g. is bit 5 set)
.2ab3	d0 10		bne $2ac5			bne 	_WVCopyData1
.2ab5	a0 03		ldy #$03			ldy 	#3
.2ab7	b5 b1		lda $b1,x			lda 	esInt3+1,x
.2ab9	91 2a		sta ($2a),y			sta 	(temp0),y
.2abb	88		dey				dey
.2abc	b5 a9		lda $a9,x			lda 	esInt2+1,x
.2abe	91 2a		sta ($2a),y			sta 	(temp0),y
.2ac0	88		dey				dey
.2ac1	b5 a1		lda $a1,x			lda 	esInt1+1,x
.2ac3	91 2a		sta ($2a),y			sta 	(temp0),y
.2ac5					_WVCopyData1:
.2ac5	a0 00		ldy #$00			ldy 	#0
.2ac7	b5 99		lda $99,x			lda 	esInt0+1,x
.2ac9	91 2a		sta ($2a),y			sta 	(temp0),y
.2acb					_WVCopyExit:
.2acb	68		pla				pla
.2acc	a8		tay				tay
.2acd	60		rts				rts
.2ace					_WVType:
.2ace	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.2ad0	20 18 15	jsr $1518		jsr	errorHandler
.2ad3					TOSToTemp0:
.2ad3	b5 98		lda $98,x			lda 	esInt0,x
.2ad5	85 2a		sta $2a				sta 	temp0
.2ad7	b5 a0		lda $a0,x			lda 	esInt1,x
.2ad9	85 2b		sta $2b				sta 	temp0+1
.2adb	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/misc/poke.asm

.2adc					Command_Poke:
.2adc	a9 01		lda #$01			lda 	#1
.2ade	d0 06		bne $2ae6			bne 	PokeGeneral
.2ae0					Command_Doke:
.2ae0	a9 02		lda #$02			lda 	#2
.2ae2	d0 02		bne $2ae6			bne 	PokeGeneral
.2ae4					Command_Loke:
.2ae4	a9 03		lda #$03			lda 	#3
.2ae6					PokeGeneral:
.2ae6	48		pha				pha 								; save id (PDL = 123)
.2ae7	20 e5 36	jsr $36e5			jsr 	EvaluateRootInteger 		; target address
.2aea	20 ff 3d	jsr $3dff			jsr	 	CheckComma
.2aed	e8		inx				inx
.2aee	20 e7 36	jsr $36e7			jsr 	EvaluateInteger 			; what value to POKE ?
.2af1	ca		dex				dex
.2af2	20 d3 2a	jsr $2ad3			jsr 	TOSToTemp0 					; temp0 points to the target address
.2af5	84 32		sty $32				sty 	tempShort 					; save Y
.2af7	68		pla				pla 								; get copy type (1-3) and dispatch
.2af8	aa		tax				tax
.2af9	ca		dex				dex
.2afa	f0 14		beq $2b10			beq 	_Poke1
.2afc	ca		dex				dex
.2afd	f0 0b		beq $2b0a			beq 	_Poke2
.2aff	a0 03		ldy #$03			ldy 	#3							; put 4 bytes
.2b01	a5 b1		lda $b1				lda 	esInt3+1
.2b03	91 2a		sta ($2a),y			sta 	(temp0),y
.2b05	88		dey				dey
.2b06	a5 a9		lda $a9				lda 	esInt2+1
.2b08	91 2a		sta ($2a),y			sta 	(temp0),y
.2b0a					_Poke2:
.2b0a	a0 01		ldy #$01			ldy 	#1
.2b0c	a5 a1		lda $a1				lda 	esInt1+1
.2b0e	91 2a		sta ($2a),y			sta 	(temp0),y
.2b10					_Poke1:
.2b10	a0 00		ldy #$00			ldy 	#0
.2b12	a5 99		lda $99				lda 	esInt0+1
.2b14	91 2a		sta ($2a),y			sta 	(temp0),y
.2b16	a4 32		ldy $32				ldy 	tempShort 					; restore Y and exit
.2b18	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/misc/rem.asm

.2b19					Command_Rem:
.2b19					Command_Rem2:
.2b19	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows
.2b1b	c9 85		cmp #$85			cmp 	#TOK_STR 					; if it is a string then skip it.
.2b1d	d0 06		bne $2b25			bne 	_CRNotString
.2b1f	c8		iny				iny
.2b20	98		tya				tya
.2b21	38		sec				sec
.2b22	71 28		adc ($28),y			adc 	(codePtr),y 				; get string size, add to Y, +1 for the length
.2b24	a8		tay				tay
.2b25					_CRNotString:
.2b25	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/misc/stopend.asm

.2b26					CommandStop:
.2b26	a2 06		ldx #$06			ldx 	#ErrorID_Stop
.2b28	20 18 15	jsr $1518		jsr	errorHandler
.2b2b					CommandEnd:
.2b2b	4c 68 3e	jmp $3e68			jmp 	WarmStart
.2b2e					CommandXemu:
.2b2e	4c ff ff	jmp $ffff			jmp 	$FFFF 						; fudge to crash out of emulator
.2b31					AdvanceNextLine:
.2b31	a0 00		ldy #$00			ldy 	#0 							; get offset
.2b33	b1 28		lda ($28),y			lda 	(codePtr),y
.2b35	18		clc				clc 								; add to codePtr
.2b36	65 28		adc $28				adc 	codePtr
.2b38	85 28		sta $28				sta 	codePtr
.2b3a	90 02		bcc $2b3e			bcc 	_ANLNoCarry
.2b3c	e6 29		inc $29				inc 	codePtr+1
.2b3e					_ANLNoCarry:
.2b3e	b1 28		lda ($28),y			lda 	(codePtr),y 				; if end of program (or was just stand alone.
.2b40	f0 e9		beq $2b2b			beq 	CommandEnd 					; execute END
.2b42	a0 03		ldy #$03			ldy 	#3 							; start of tokens on line.
.2b44	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/for.asm

.2b45					Command_FOR:
.2b45	a9 46		lda #$46			lda 	#markerFOR 					; allocate the space and set the marker
.2b47	a2 0b		ldx #$0b			ldx 	#11
.2b49	20 1a 3e	jsr $3e1a			jsr 	RSClaim
.2b4c	20 5e 2a	jsr $2a5e			jsr 	CommandLET 					; do the same as LET FOR [a = 4]
.2b4f	a5 90		lda $90				lda 	esType 						; check type should be integer reference.
.2b51	c9 80		cmp #$80			cmp 	#$80 						; we do not do FOR floats.
.2b53	d0 4c		bne $2ba1			bne 	_CFType
.2b55	a9 ce		lda #$ce			lda 	#TKW_TO 					; check TO present.
.2b57	20 e7 3d	jsr $3de7			jsr 	CheckToken
.2b5a	a2 01		ldx #$01			ldx 	#1 							; keep the variable address in stack 0
.2b5c	20 e7 36	jsr $36e7			jsr 	EvaluateInteger				; get terminal value in stack 1
.2b5f	98		tya				tya
.2b60	48		pha				pha
.2b61	a0 04		ldy #$04			ldy 	#4
.2b63	a5 98		lda $98				lda		esInt0 						; copy the address of the index variable into 4 and 5
.2b65	91 37		sta ($37),y			sta 	(rsPointer),y
.2b67	c8		iny				iny
.2b68	a5 a0		lda $a0				lda		esInt1
.2b6a	91 37		sta ($37),y			sta 	(rsPointer),y
.2b6c	c8		iny				iny
.2b6d	a9 01		lda #$01			lda 	#1  						; the default step in 6, (-128 .. 127 only)
.2b6f	91 37		sta ($37),y			sta 	(rsPointer),y
.2b71	c8		iny				iny
.2b72	a5 99		lda $99				lda		esInt0+1 					; terminal value in 7 to 11.
.2b74	91 37		sta ($37),y			sta 	(rsPointer),y
.2b76	c8		iny				iny
.2b77	a5 a1		lda $a1				lda		esInt1+1
.2b79	91 37		sta ($37),y			sta 	(rsPointer),y
.2b7b	c8		iny				iny
.2b7c	a5 a9		lda $a9				lda		esInt2+1
.2b7e	91 37		sta ($37),y			sta 	(rsPointer),y
.2b80	c8		iny				iny
.2b81	a5 b1		lda $b1				lda		esInt3+1
.2b83	91 37		sta ($37),y			sta 	(rsPointer),y
.2b85	68		pla				pla
.2b86	a8		tay				tay
.2b87	b1 28		lda ($28),y			lda 	(codePtr),y 				; followed by STEP.
.2b89	c9 cf		cmp #$cf			cmp 	#TKW_STEP
.2b8b	d0 0e		bne $2b9b			bne 	_CFDone
.2b8d	c8		iny				iny									; skip over step.
.2b8e	20 e7 36	jsr $36e7			jsr 	EvaluateInteger 			; get step
.2b91	98		tya				tya
.2b92	48		pha				pha
.2b93	b5 98		lda $98,x			lda 	esInt0,x 					; copy it into step (bit lazy here)
.2b95	a0 06		ldy #$06			ldy 	#6
.2b97	91 37		sta ($37),y			sta 	(rsPointer),y
.2b99	68		pla				pla
.2b9a	a8		tay				tay
.2b9b					_CFDone:
.2b9b	a9 01		lda #$01			lda 	#1
.2b9d	20 46 3e	jsr $3e46			jsr 	RSSavePosition 				; save position.
.2ba0	60		rts				rts
.2ba1					_CFType:
.2ba1	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.2ba3	20 18 15	jsr $1518		jsr	errorHandler
.2ba6					Command_NEXT:
.2ba6	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.2ba8	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.2baa	c9 46		cmp #$46			cmp 	#markerFOR 						; does it match
.2bac	f0 05		beq $2bb3			beq 	_isok
.2bae	a2 10		ldx #$10			ldx 	#ErrorID_nextErr
.2bb0	20 18 15	jsr $1518		jsr	errorHandler
.2bb3					_isok:
.2bb3	b1 28		lda ($28),y			lda 	(codePtr),y 				; is it NEXT <index>
.2bb5	c9 40		cmp #$40			cmp 	#$40 						; e.g. a variable follows 00-3F
.2bb7	b0 18		bcs $2bd1			bcs 	_CNNoIndex
.2bb9	a2 00		ldx #$00			ldx 	#0 							; start on stack
.2bbb	20 20 37	jsr $3720			jsr 	EvaluateReference 			; this is the variable/parameter to localise.
.2bbe	98		tya				tya
.2bbf	48		pha				pha
.2bc0	a0 04		ldy #$04			ldy 	#4 							; check same variable as that stored at +4,+5
.2bc2	b1 37		lda ($37),y			lda 	(rsPointer),y
.2bc4	d5 98		cmp $98,x			cmp 	esInt0,x
.2bc6	d0 76		bne $2c3e			bne 	_CNBadIndex
.2bc8	c8		iny				iny
.2bc9	b1 37		lda ($37),y			lda 	(rsPointer),y
.2bcb	d5 a0		cmp $a0,x			cmp 	esInt1,x
.2bcd	d0 6f		bne $2c3e			bne 	_CNBadIndex
.2bcf	68		pla				pla
.2bd0	a8		tay				tay
.2bd1					_CNNoIndex:
.2bd1	98		tya				tya
.2bd2	48		pha				pha
.2bd3	a0 04		ldy #$04			ldy 	#4 							; make temp0 point to the index
.2bd5	b1 37		lda ($37),y			lda 	(rsPointer),y
.2bd7	85 2a		sta $2a				sta 	temp0
.2bd9	c8		iny				iny
.2bda	b1 37		lda ($37),y			lda 	(rsPointer),y
.2bdc	85 2b		sta $2b				sta 	temp0+1
.2bde	c8		iny				iny
.2bdf	a2 00		ldx #$00			ldx 	#0 							; X is the sign extend part of the step.
.2be1	b1 37		lda ($37),y			lda 	(rsPointer),y 				; get the step.
.2be3	85 2f		sta $2f				sta 	temp2+1 					; save for later.
.2be5	10 01		bpl $2be8			bpl 	_CNSignX
.2be7	ca		dex				dex  								; X = $FF
.2be8					_CNSignX:
.2be8	18		clc				clc 								; add to the LSB
.2be9	a0 00		ldy #$00			ldy 	#0
.2beb	71 2a		adc ($2a),y			adc 	(temp0),y
.2bed	91 2a		sta ($2a),y			sta 	(temp0),y
.2bef					_CNPropogate:
.2bef	c8		iny				iny  								; add the sign extended in X to the rest.
.2bf0	8a		txa				txa
.2bf1	71 2a		adc ($2a),y			adc 	(temp0),y
.2bf3	91 2a		sta ($2a),y			sta 	(temp0),y
.2bf5	c8		iny				iny
.2bf6	8a		txa				txa
.2bf7	71 2a		adc ($2a),y			adc 	(temp0),y
.2bf9	91 2a		sta ($2a),y			sta 	(temp0),y
.2bfb	c8		iny				iny
.2bfc	8a		txa				txa
.2bfd	71 2a		adc ($2a),y			adc 	(temp0),y
.2bff	91 2a		sta ($2a),y			sta 	(temp0),y
.2c01	18		clc				clc 								; point temp1 to the terminal value stored in the stack.
.2c02	a5 37		lda $37				lda 	rsPointer
.2c04	69 07		adc #$07			adc 	#7
.2c06	85 2c		sta $2c				sta 	temp1
.2c08	a9 00		lda #$00			lda 	#0
.2c0a	85 2e		sta $2e				sta 	temp2 						; clear temp2, which is the OR of all the subtractions.
.2c0c	a8		tay				tay 								; and clear the Y register again.
.2c0d	65 38		adc $38				adc 	rsPointer+1
.2c0f	85 2d		sta $2d				sta 	temp1+1
.2c11	38		sec				sec 								; calculate current - limit oring interim values.
.2c12	20 4a 2c	jsr $2c4a			jsr 	_CNCompare 					; each of these does a byte.
.2c15	20 4a 2c	jsr $2c4a			jsr 	_CNCompare 					; we calculate the OR of all these subtractions.
.2c18	20 4a 2c	jsr $2c4a			jsr 	_CNCompare 					; and the carry of the subtraction.
.2c1b	20 4a 2c	jsr $2c4a			jsr 	_CNCompare
.2c1e	50 02		bvc $2c22			bvc 	_CNNoOverflow 				; converts to a signed comparison on the sign bit.
.2c20	49 80		eor #$80			eor 	#$80
.2c22					_CNNoOverflow:
.2c22	a4 2f		ldy $2f				ldy 	temp2+1						; get step back
.2c24	30 1d		bmi $2c43			bmi 	_CNCheckDownto
.2c26	c9 00		cmp #$00			cmp 	#0
.2c28	30 0c		bmi $2c36			bmi 	_CNLoopRound 				; loop round if < =
.2c2a	a5 2e		lda $2e				lda 	temp2
.2c2c	f0 08		beq $2c36			beq 	_CNLoopRound
.2c2e					_CNLoopExit:
.2c2e	68		pla				pla
.2c2f	a8		tay				tay
.2c30	a9 0b		lda #$0b			lda 	#11
.2c32	20 3c 3e	jsr $3e3c			jsr 	RSFree
.2c35	60		rts				rts
.2c36					_CNLoopRound:
.2c36	68		pla				pla
.2c37	a8		tay				tay
.2c38	a9 01		lda #$01			lda 	#1
.2c3a	20 59 3e	jsr $3e59			jsr 	RSLoadPosition				; go back to the loop top
.2c3d	60		rts				rts
.2c3e					_CNBadIndex:
.2c3e	a2 13		ldx #$13			ldx 	#ErrorID_BadIndex
.2c40	20 18 15	jsr $1518		jsr	errorHandler
.2c43					_CNCheckDownto:
.2c43	c9 00		cmp #$00			cmp 	#0
.2c45	10 ef		bpl $2c36			bpl 	_CNLoopRound
.2c47	4c 2e 2c	jmp $2c2e			jmp 	_CNLoopExit
.2c4a					_CNCompare:
.2c4a	b1 2a		lda ($2a),y			lda 	(temp0),y 					; do the subtraction - compare don't care about answer
.2c4c	f1 2c		sbc ($2c),y			sbc 	(temp1),y
.2c4e	05 2e		ora $2e				ora 	temp2 						; Or into temp2 (does not affect carry)
.2c50	85 2e		sta $2e				sta 	temp2
.2c52	c8		iny				iny
.2c53	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/if.asm

.2c54					CommandIf:
.2c54	20 e5 36	jsr $36e5			jsr 	EvaluateRootInteger 		; get what's being tested.
.2c57	b1 28		lda ($28),y			lda 	(codePtr),y 				; check for IF .. THEN or IF .. GOTO which are single lines.
.2c59	c9 91		cmp #$91			cmp 	#TKW_GOTO
.2c5b	f0 04		beq $2c61			beq 	_IfSimple
.2c5d	c9 a1		cmp #$a1			cmp 	#TKW_THEN
.2c5f	d0 1b		bne $2c7c			bne 	_IfComplex
.2c61					_IfSimple:
.2c61	20 a6 3d	jsr $3da6			jsr 	MInt32Zero					; check if TOS zero
.2c64	f0 10		beq $2c76			beq 	_IfEOL 						; go to next line.
.2c66	b1 28		lda ($28),y			lda 	(codePtr),y 				; get and skip token.
.2c68	c8		iny				iny
.2c69	c9 91		cmp #$91			cmp 	#TKW_GOTO 					; was it if GOTO ?
.2c6b	f0 0c		beq $2c79			beq 	_IfGoto 					; do the Goto code
.2c6d	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows the THEN ?
.2c6f	29 c0		and #$c0			and 	#$C0 						; check $40-$7F
.2c71	c9 40		cmp #$40			cmp 	#$40 						; e.g. number IF x = 0 THEN 170
.2c73	f0 04		beq $2c79			beq 	_IfGoto
.2c75	60		rts				rts 								; else continue on this line.
.2c76					_IfEOL:
.2c76	4c 31 2b	jmp $2b31			jmp 	AdvanceNextLine 			; go to next line
.2c79					_IfGoto:
.2c79	4c 68 28	jmp $2868			jmp 	CommandGoto
.2c7c					_IfComplex:
.2c7c	20 a6 3d	jsr $3da6			jsr 	MInt32Zero 					; is it true ?
.2c7f	f0 01		beq $2c82			beq 	_IFSkip 					; if non-zero then skip to ELSE/ENDIF
.2c81	60		rts				rts 								; else continue.
.2c82					_IFSkip:
.2c82	a9 d6		lda #$d6			lda	 	#TKW_ELSE 					; test failed, go to ELSE or ENDIF whichever comes first.
.2c84	a2 a2		ldx #$a2			ldx 	#TKW_ENDIF
.2c86	4c 1e 2f	jmp $2f1e			jmp		ScanForward
.2c89					Command_ELSE:
.2c89	a2 a2		ldx #$a2			ldx 	#TKW_ENDIF
.2c8b	8a		txa				txa
.2c8c	4c 1e 2f	jmp $2f1e			jmp		ScanForward
.2c8f					Command_ENDIF:
.2c8f	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/local.asm

.0d46					storeSize:
>0d46							.fill 	1
.2c90					CommandLocal:
.2c90	a2 00		ldx #$00			ldx 	#0
.2c92	20 ae 2c	jsr $2cae			jsr 	LocaliseVariable 			; localise one.
.2c95					_CLCheckNext:
.2c95	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows ?
.2c97	c8		iny				iny
.2c98	c9 8d		cmp #$8d			cmp 	#TKW_EQUAL 					; something local "x = 2" ?
.2c9a	f0 06		beq $2ca2			beq 	_CLAssignment
.2c9c	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; comma try again.
.2c9e	f0 f0		beq $2c90			beq 	CommandLocal
.2ca0	88		dey				dey
.2ca1	60		rts				rts
.2ca2					_CLAssignment:
.2ca2	a2 01		ldx #$01			ldx 	#1
.2ca4	20 c8 36	jsr $36c8			jsr 	Evaluate 					; evaluate RHS
.2ca7	ca		dex				dex
.2ca8	20 71 2a	jsr $2a71			jsr 	WriteValue
.2cab	4c 95 2c	jmp $2c95			jmp 	_CLCheckNext
.2cae					LocaliseVariable:
.2cae	b1 28		lda ($28),y			lda 	(codePtr),y 				; check it's a variable.
.2cb0	c9 40		cmp #$40			cmp 	#$40
.2cb2	b0 67		bcs $2d1b			bcs 	_LVSyntax
.2cb4	8a		txa				txa 								; get the address of that variable.
.2cb5	a2 02		ldx #$02		ldx	#2
.2cb7	20 91 4d	jsr $4d91		jsr	variableHandler
.2cba	aa		tax				tax
.2cbb	8a		txa				txa
.2cbc	48		pha				pha
.2cbd	98		tya				tya
.2cbe	48		pha				pha
.2cbf	20 d3 2a	jsr $2ad3			jsr 	TOSToTemp0 					; the address of the variable is now in temp0.
.2cc2	b5 90		lda $90,x			lda 	esType,x 					; get the type
.2cc4	0a		asl a				asl 	a
.2cc5	10 16		bpl $2cdd			bpl 	_LVPushNumber
.2cc7	a0 00		ldy #$00			ldy 	#0 							; put address of data in temp1
.2cc9	b1 2a		lda ($2a),y			lda 	(temp0),y
.2ccb	c8		iny				iny
.2ccc	85 2c		sta $2c				sta 	temp1
.2cce	b1 2a		lda ($2a),y			lda 	(temp0),y
.2cd0	85 2d		sta $2d				sta 	temp1+1
.2cd2	a0 00		ldy #$00			ldy 	#0 	 						; get length
.2cd4	b1 2c		lda ($2c),y			lda 	(temp1),y
.2cd6	aa		tax				tax 								; into X
.2cd7	e8		inx				inx 								; +1 for length.
.2cd8	a9 24		lda #$24			lda 	#markerString
.2cda	4c f2 2c	jmp $2cf2			jmp 	_LVWriteFrame
.2cdd					_LVPushNumber:
.2cdd	a5 2a		lda $2a				lda 	temp0 						; storage address and data source are the same
.2cdf	85 2c		sta $2c				sta 	temp1
.2ce1	a5 2b		lda $2b				lda 	temp0+1
.2ce3	85 2d		sta $2d				sta 	temp1+1
.2ce5	b5 90		lda $90,x			lda 	esType,x 					; put float flag into carry.
.2ce7	4a		lsr a				lsr 	a
.2ce8	a9 25		lda #$25			lda 	#markerInt 					; get marker and size.
.2cea	a2 04		ldx #$04			ldx 	#VarISize
.2cec	90 04		bcc $2cf2			bcc 	_LVIsInteger
.2cee	a9 23		lda #$23			lda 	#markerFloat
.2cf0	a2 06		ldx #$06			ldx 	#VarFSize
.2cf2					_LVIsInteger:
.2cf2					_LVWriteFrame:
.2cf2	8e 46 0d	stx $0d46			stx 	storeSize 					; number of bytes to copy from (temp0)
.2cf5	e8		inx				inx 								; allocate 3 bytes, 2 for the address, 1 for the marker.
.2cf6	e8		inx				inx
.2cf7	e8		inx				inx
.2cf8	20 1a 3e	jsr $3e1a			jsr 	RSClaim 					; create the stack frame.
.2cfb	a5 2a		lda $2a				lda 	temp0 						; copy the target address to slots 1 & 2
.2cfd	a0 01		ldy #$01			ldy 	#1
.2cff	91 37		sta ($37),y			sta 	(rsPointer),y
.2d01	c8		iny				iny
.2d02	a5 2b		lda $2b				lda 	temp0+1
.2d04	91 37		sta ($37),y			sta 	(rsPointer),y
.2d06	a0 00		ldy #$00			ldy 	#0
.2d08					_LVCopyData:
.2d08	b1 2c		lda ($2c),y			lda 	(temp1),y 					; get data from source, temp1
.2d0a	c8		iny				iny 								; write allowing for the header bit.
.2d0b	c8		iny				iny
.2d0c	c8		iny				iny
.2d0d	91 37		sta ($37),y			sta 	(rsPointer),y
.2d0f	88		dey				dey
.2d10	88		dey				dey
.2d11	ce 46 0d	dec $0d46			dec 	storeSize 					; do it storesize times
.2d14	d0 f2		bne $2d08			bne 	_LVCopyData
.2d16	68		pla				pla
.2d17	a8		tay				tay
.2d18	68		pla				pla
.2d19	aa		tax				tax
.2d1a	60		rts				rts
.2d1b					_LVSyntax:
.2d1b	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.2d1d	20 18 15	jsr $1518		jsr	errorHandler
.2d20					RestoreLocals:
.2d20	a2 00		ldx #$00			ldx 	#0
.2d22	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.2d24	c9 40		cmp #$40			cmp	 	#64
.2d26	90 01		bcc $2d29			bcc 	_RLocal
.2d28	60		rts				rts
.2d29					_RLocal:
.2d29	8a		txa				txa
.2d2a	48		pha				pha
.2d2b	98		tya				tya
.2d2c	48		pha				pha
.2d2d	a0 01		ldy #$01			ldy 	#1 							; copy target address to temp0
.2d2f	b1 37		lda ($37),y			lda 	(rsPointer),y
.2d31	85 2a		sta $2a				sta 	temp0
.2d33	c8		iny				iny
.2d34	b1 37		lda ($37),y			lda 	(rsPointer),y
.2d36	85 2b		sta $2b				sta 	temp0+1
.2d38	a0 00		ldy #$00			ldy 	#0 							; get type back.
.2d3a	b1 37		lda ($37),y			lda 	(rsPointer),y
.2d3c	c9 24		cmp #$24			cmp 	#markerString 				; string is ... different :)
.2d3e	f0 28		beq $2d68			beq 	_RString
.2d40	a2 04		ldx #$04			ldx		#VARISize 					; size integer
.2d42	c9 25		cmp #$25			cmp 	#markerInt
.2d44	f0 02		beq $2d48			beq 	_RIsInteger
.2d46	a2 06		ldx #$06			ldx 	#VARFSize 					; size float
.2d48					_RIsInteger:
.2d48	8a		txa				txa
.2d49	48		pha				pha
.2d4a	a0 03		ldy #$03			ldy 	#3							; start size to copy back from pointer.
.2d4c					_RCopyBack:
.2d4c	b1 37		lda ($37),y			lda 	(rsPointer),y
.2d4e	88		dey				dey
.2d4f	88		dey				dey
.2d50	88		dey				dey
.2d51	91 2a		sta ($2a),y			sta 	(temp0),y
.2d53	c8		iny				iny
.2d54	c8		iny				iny
.2d55	c8		iny				iny
.2d56	c8		iny				iny
.2d57	ca		dex				dex
.2d58	d0 f2		bne $2d4c			bne 	_RCopyBack
.2d5a	68		pla				pla 								; get size add 3
.2d5b	18		clc				clc
.2d5c	69 03		adc #$03			adc 	#3 							; (2 for address one for marker)
.2d5e					_RRestoreAAndLoop:
.2d5e	20 3c 3e	jsr $3e3c			jsr 	RSFree
.2d61	68		pla				pla
.2d62	a8		tay				tay
.2d63	68		pla				pla
.2d64	aa		tax				tax
.2d65	4c 20 2d	jmp $2d20			jmp 	RestoreLocals 				; go see if there are any more locals.
.2d68					_RString:
.2d68	a2 00		ldx #$00			ldx 	#0
.2d6a	a0 01		ldy #$01			ldy 	#1 							; set up for a string write.
.2d6c	b1 37		lda ($37),y			lda 	(rsPointer),y
.2d6e	95 98		sta $98,x			sta 	esInt0,x
.2d70	c8		iny				iny
.2d71	b1 37		lda ($37),y			lda 	(rsPointer),y
.2d73	95 a0		sta $a0,x			sta 	esInt1,x
.2d75	18		clc				clc
.2d76	a5 37		lda $37				lda 	rsPointer
.2d78	69 03		adc #$03			adc 	#3
.2d7a	95 99		sta $99,x			sta 	esInt0+1,x
.2d7c	a5 38		lda $38				lda 	rsPointer+1
.2d7e	69 00		adc #$00			adc 	#0
.2d80	95 a1		sta $a1,x			sta 	esInt1+1,x
.2d82	8a		txa				txa
.2d83	a2 10		ldx #$10		ldx	#16
.2d85	20 2a 41	jsr $412a		jsr	stringHandler
.2d88	a0 03		ldy #$03			ldy 	#3 							; get string length
.2d8a	b1 37		lda ($37),y			lda 	(rsPointer),y
.2d8c	18		clc				clc
.2d8d	69 04		adc #$04			adc 	#4 							; add 4 (pointer, marker, length) to restore.
.2d8f	4c 5e 2d	jmp $2d5e			jmp 	_RRestoreAAndLoop

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/proc.asm

.0d47					paramCount:
>0d47							.fill 	1
.2d92					CallProc:
.2d92	20 1a 2e	jsr $2e1a			jsr 	FindProcedure 				; find procedure, put in temp0. A contains name length.
.2d95	48		pha				pha 								; save length on stack
.2d96	85 32		sta $32				sta 	tempShort 					; save length in tempShort
.2d98	a5 2b		lda $2b				lda 	temp0+1 					; save procedure target on stack.
.2d9a	48		pha				pha
.2d9b	a5 2a		lda $2a				lda 	temp0
.2d9d	48		pha				pha
.2d9e	98		tya				tya 								; calculate Y + length
.2d9f	18		clc				clc
.2da0	65 32		adc $32				adc 	tempShort
.2da2	a8		tay				tay
.2da3	a2 00		ldx #$00			ldx 	#0 							; where the first parameter goes - 1
.2da5					_CallProcEvalParams:
.2da5	e8		inx				inx
.2da6	b1 28		lda ($28),y			lda 	(codePtr),y 				; do we have ) , e.g. the end of the parameters ?
.2da8	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.2daa	f0 0b		beq $2db7			beq 	_CPDoneParams
.2dac	20 c8 36	jsr $36c8			jsr 	Evaluate 					; evaluate a parameter
.2daf	b1 28		lda ($28),y			lda 	(codePtr),Y 				; get what's next, preconsume
.2db1	c8		iny				iny
.2db2	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; if comma, go get another parameter
.2db4	f0 ef		beq $2da5			beq 	_CallProcEvalParams
.2db6	88		dey				dey 								; undo consumption.
.2db7					_CPDoneParams:
.2db7	20 f2 3d	jsr $3df2			jsr 	CheckRightParen 			; check closing parenthesis.
.2dba	8e 47 0d	stx $0d47			stx 	paramCount 					; store parameter count+1
.2dbd	a2 04		ldx #$04			ldx 	#4							; make space on stack
.2dbf	a9 50		lda #$50			lda 	#markerPROC
.2dc1	20 1a 3e	jsr $3e1a			jsr 	RSClaim
.2dc4	a9 01		lda #$01			lda 	#1 							; store return address.
.2dc6	20 46 3e	jsr $3e46			jsr 	RSSavePosition
.2dc9	68		pla				pla 								; get the new code Ptr
.2dca	85 28		sta $28				sta 	codePtr
.2dcc	68		pla				pla
.2dcd	85 29		sta $29				sta 	codePtr+1
.2dcf	68		pla				pla 								; length of name + 4 is the param start.
.2dd0	18		clc				clc
.2dd1	69 04		adc #$04			adc 	#4
.2dd3	a8		tay				tay
.2dd4	a2 ff		ldx #$ff			ldx 	#$FF
.2dd6					_CPLoadParameters:
.2dd6	e8		inx				inx 								; point to where the address should be loaded.
.2dd7	ec 47 0d	cpx $0d47			cpx 	paramCount 					; too many parameters in definition ?
.2dda	f0 1e		beq $2dfa			beq 	_CPParamError
.2ddc	b1 28		lda ($28),y			lda 	(codePtr),y					; what follows
.2dde	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN 				; is it the right bracket
.2de0	f0 0e		beq $2df0			beq 	_CPParamComplete 			; done all the parameters, perhaps.
.2de2	20 ae 2c	jsr $2cae			jsr 	LocaliseVariable 			; make following variable local, ref in tos,x
.2de5	20 71 2a	jsr $2a71			jsr 	WriteValue 					; copy the evaluated parameter into there.
.2de8	b1 28		lda ($28),y			lda 	(codePtr),y 				; followed by a comma ?
.2dea	c8		iny				iny
.2deb	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.2ded	f0 e7		beq $2dd6			beq 	_CPLoadParameters
.2def	88		dey				dey 								; no, unconsume and check for )
.2df0					_CPParamComplete:
.2df0	20 f2 3d	jsr $3df2			jsr 	CheckRightParen 			; check )
.2df3	e8		inx				inx 								; check right number of parameters have been consumed
.2df4	ec 47 0d	cpx $0d47			cpx 	paramCount
.2df7	d0 01		bne $2dfa			bne 	_CPParamError
.2df9	60		rts				rts
.2dfa					_CPParamError:
.2dfa	a2 18		ldx #$18			ldx 	#ErrorID_Params
.2dfc	20 18 15	jsr $1518		jsr	errorHandler
.2dff					ReturnProc:
.2dff	20 20 2d	jsr $2d20			jsr 	RestoreLocals 				; get the locals back.
.2e02	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.2e04	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.2e06	c9 50		cmp #$50			cmp 	#markerPROC 						; does it match
.2e08	f0 05		beq $2e0f			beq 	_isok
.2e0a	a2 12		ldx #$12			ldx 	#ErrorID_endProcErr
.2e0c	20 18 15	jsr $1518		jsr	errorHandler
.2e0f					_isok:
.2e0f	a9 01		lda #$01			lda 	#1
.2e11	20 59 3e	jsr $3e59			jsr 	RSLoadPosition 				; reload the position from offset 1.
.2e14	a9 04		lda #$04			lda 	#4 							; throw 4 bytes from stack.
.2e16	20 3c 3e	jsr $3e3c			jsr 	RSFree
.2e19	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/proctable.asm

.0d48					procList:
>0d48							.fill 	2		 					; terminated by name high being zero.
.0d4a					yInLine:
>0d4a							.fill 	1
.2e1a					FindProcedure:
.2e1a	8c 4a 0d	sty $0d4a			sty 	yInLine 					; save current position.
.2e1d	20 d8 2e	jsr $2ed8			jsr 	CalculateProcedureHash		; calculate the hash of the procedure.
.2e20	85 2c		sta $2c				sta 	temp1
.2e22	ad 48 0d	lda $0d48			lda		procList 					; put procList address in temp2
.2e25	85 2e		sta $2e				sta 	temp2
.2e27	ad 49 0d	lda $0d49			lda 	procList+1
.2e2a	85 2f		sta $2f				sta 	temp2+1
.2e2c	a0 00		ldy #$00			ldy 	#0 							; position in this table.
.2e2e					_FPLoop:
.2e2e	b1 2e		lda ($2e),y			lda 	(temp2),y
.2e30	f0 4f		beq $2e81			beq 	_FPError 					; if so, we don't know this procedure.
.2e32	85 2b		sta $2b				sta 	temp0+1 					; copy MSB/LSB to temp0 as we go.
.2e34	c8		iny				iny
.2e35	b1 2e		lda ($2e),y			lda 	(temp2),y
.2e37	85 2a		sta $2a				sta 	temp0
.2e39	c8		iny				iny
.2e3a	b1 2e		lda ($2e),y			lda 	(temp2),y					; check the procedure hash.
.2e3c	c5 2c		cmp $2c				cmp 	temp1
.2e3e	d0 2b		bne $2e6b			bne 	_FPNext 					; hash is different, go to next.
.2e40	38		sec				sec
.2e41	ad 4a 0d	lda $0d4a			lda 	yInLine 					; position in line must be at least 4
.2e44	e9 04		sbc #$04			sbc 	#4
.2e46	18		clc				clc
.2e47	65 28		adc $28				adc 	codePtr
.2e49	85 30		sta $30				sta 	temp3
.2e4b	a5 29		lda $29				lda 	codePtr+1
.2e4d	69 00		adc #$00			adc 	#0
.2e4f	85 31		sta $31				sta 	temp3+1
.2e51	98		tya				tya
.2e52	48		pha				pha
.2e53	a0 04		ldy #$04			ldy 	#4
.2e55					_FPCName:
.2e55	b1 30		lda ($30),y			lda 	(temp3),y 					; check the same
.2e57	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.2e59	d0 0e		bne $2e69			bne 	_FPpulYNext 				; if different go to next one.
.2e5b	c8		iny				iny
.2e5c	c9 3a		cmp #$3a			cmp 	#$3A
.2e5e	90 f5		bcc $2e55			bcc 	_FPCName 					; compare the whole lot....
.2e60	68		pla				pla 								; throw away the saved Y
.2e61	98		tya				tya 								; length of name is Y-4
.2e62	38		sec				sec
.2e63	e9 04		sbc #$04			sbc 	#4
.2e65	ac 4a 0d	ldy $0d4a			ldy 	yInLine  					; get the original Y back
.2e68	60		rts				rts
.2e69					_FPpulYNext:
.2e69	68		pla				pla
.2e6a	a8		tay				tay
.2e6b					_FPNext:
.2e6b	c8		iny				iny 								; next procedure record.
.2e6c	10 c0		bpl $2e2e			bpl 	_FPLoop 					; if done 128 already ... e.g. Y -ve
.2e6e	98		tya				tya 								; subtract 128 from Y
.2e6f	38		sec				sec
.2e70	e9 80		sbc #$80			sbc 	#128
.2e72	a8		tay				tay
.2e73	18		clc				clc 								; add 128 to temp2, so we can have more than
.2e74	a5 2e		lda $2e				lda 	temp2 						; 255/3 = 85 procedures
.2e76	69 80		adc #$80			adc 	#128
.2e78	85 2e		sta $2e				sta 	temp2
.2e7a	90 b2		bcc $2e2e			bcc 	_FPLoop
.2e7c	e6 2f		inc $2f				inc 	temp2+1
.2e7e	4c 2e 2e	jmp $2e2e			jmp 	_FPLoop
.2e81					_FPError:
.2e81	a2 17		ldx #$17			ldx 	#ErrorID_NoProc
.2e83	20 18 15	jsr $1518		jsr	errorHandler
.2e86					ScanProc:
.2e86	98		tya				tya
.2e87	48		pha				pha
.2e88	a5 35		lda $35				lda 	lowMemory 					; copy the start of the procList, at low memory
.2e8a	8d 48 0d	sta $0d48			sta 	procList
.2e8d	a5 36		lda $36				lda 	lowMemory+1
.2e8f	8d 49 0d	sta $0d49			sta 	procList+1
.2e92	20 04 32	jsr $3204			jsr 	ResetCodeAddress 			; back to the start.
.2e95					_ScanLoop:
.2e95	a0 00		ldy #$00			ldy 	#0 							; check reached program end
.2e97	b1 28		lda ($28),y			lda 	(codePtr),y
.2e99	f0 2a		beq $2ec5			beq 	_ScanExit
.2e9b	a0 03		ldy #$03			ldy 	#3							; get first token
.2e9d	b1 28		lda ($28),y			lda 	(codePtr),y
.2e9f	c9 9d		cmp #$9d			cmp 	#TKW_DEFPROC				; skip to next if not DEFPROC
.2ea1	d0 12		bne $2eb5			bne 	_ScanNext
.2ea3	a5 29		lda $29				lda 	codePtr+1 					; write high and low address of this line.
.2ea5	20 cd 2e	jsr $2ecd			jsr 	_ScanWrite
.2ea8	a5 28		lda $28				lda 	codePtr
.2eaa	20 cd 2e	jsr $2ecd			jsr 	_ScanWrite
.2ead	a0 04		ldy #$04			ldy 	#4 							; start of name part
.2eaf	20 d8 2e	jsr $2ed8			jsr 	CalculateProcedureHash 		; calculate procedure hash
.2eb2	20 cd 2e	jsr $2ecd			jsr 	_ScanWrite					; and write that
.2eb5					_ScanNext:
.2eb5	18		clc				clc
.2eb6	a0 00		ldy #$00			ldy 	#0
.2eb8	b1 28		lda ($28),y			lda 	(codePtr),y
.2eba	65 28		adc $28				adc 	codePtr
.2ebc	85 28		sta $28				sta 	codePtr
.2ebe	90 d5		bcc $2e95			bcc 	_ScanLoop
.2ec0	e6 29		inc $29				inc 	codePtr+1
.2ec2	4c 95 2e	jmp $2e95			jmp 	_ScanLoop
.2ec5					_ScanExit:
.2ec5	a9 00		lda #$00			lda 	#0 							; write ending zero.
.2ec7	20 cd 2e	jsr $2ecd			jsr 	_ScanWrite
.2eca	68		pla				pla
.2ecb	a8		tay				tay
.2ecc	60		rts				rts
.2ecd					_ScanWrite:
.2ecd	a0 00		ldy #$00			ldy 	#0
.2ecf	91 35		sta ($35),y			sta 	(lowMemory),y
.2ed1	e6 35		inc $35				inc 	lowMemory
.2ed3	d0 02		bne $2ed7			bne 	_SWNoCarry
.2ed5	e6 36		inc $36				inc 	lowMemory+1
.2ed7					_SWNoCarry:
.2ed7	60		rts				rts
.2ed8					CalculateProcedureHash:
.2ed8	a9 00		lda #$00			lda 	#0 							; clear hash.
.2eda	85 2a		sta $2a				sta 	temp0
.2edc					_CPHLoop:
.2edc	18		clc				clc 								; add character and rotate and add carry back in
.2edd	b1 28		lda ($28),y			lda 	(codePtr),y
.2edf	65 2a		adc $2a				adc 	temp0
.2ee1	6a		ror a				ror 	a
.2ee2	69 0d		adc #$0d			adc 	#13 						; primes usually good for this sort of thing.
.2ee4	85 2a		sta $2a				sta 	temp0 						; (down with this sort of thing)
.2ee6	b1 28		lda ($28),y			lda 	(codePtr),y
.2ee8	c8		iny				iny 								; advance incase we go round again.
.2ee9	c9 3a		cmp #$3a			cmp 	#$3A
.2eeb	90 ef		bcc $2edc			bcc 	_CPHLoop
.2eed	a5 2a		lda $2a				lda 	temp0
.2eef	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/repeat.asm

.2ef0					Command_Repeat:
.2ef0	a2 04		ldx #$04			ldx 	#4 							; allocate 4 bytes on stack for REPEAT
.2ef2	a9 52		lda #$52			lda 	#markerREPEAT 				; repeat marker allocate 4 bytes
.2ef4	20 1a 3e	jsr $3e1a			jsr 	RSClaim
.2ef7	a9 01		lda #$01			lda 	#1 							; save position at offset 1.
.2ef9	20 46 3e	jsr $3e46			jsr 	RSSavePosition
.2efc	60		rts				rts
.2efd					Command_Until:
.2efd	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.2eff	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.2f01	c9 52		cmp #$52			cmp 	#markerREPEAT 						; does it match
.2f03	f0 05		beq $2f0a			beq 	_isok
.2f05	a2 0f		ldx #$0f			ldx 	#ErrorID_untilErr
.2f07	20 18 15	jsr $1518		jsr	errorHandler
.2f0a					_isok:
.2f0a	20 e5 36	jsr $36e5			jsr 	EvaluateRootInteger 		; at the bottom.
.2f0d	20 a6 3d	jsr $3da6			jsr 	MInt32Zero					; check if TOS zero
.2f10	d0 06		bne $2f18			bne 	_CUExit
.2f12	a9 01		lda #$01			lda 	#1
.2f14	20 59 3e	jsr $3e59			jsr 	RSLoadPosition 				; reload the position from offset 1.
.2f17	60		rts				rts
.2f18					_CUExit:
.2f18	a9 04		lda #$04			lda 	#4 							; throw 4 bytes from stack.
.2f1a	20 3c 3e	jsr $3e3c			jsr 	RSFree
.2f1d	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/scanner.asm

.2f1e					ScanForward:
.2f1e	85 2c		sta $2c				sta 	temp1 						; save tokens to search in temp1/temp1+1
.2f20	86 2d		stx $2d				stx 	temp1+1
.2f22	a9 00		lda #$00			lda 	#0 							; temp2 counts structure levels.
.2f24	85 2e		sta $2e				sta 	temp2
.2f26	b1 28		lda ($28),y	_SFLoop:lda 	(codePtr),y 				; look at the next token.
.2f28	c8		iny				iny
.2f29	a6 2e		ldx $2e				ldx 	temp2 						; check structure levels are zero.
.2f2b	d0 08		bne $2f35			bne 	_SFNoCheck 					; if so, check token against entered values.
.2f2d	c5 2c		cmp $2c				cmp 	temp1 						; if either matches, we've reached the token
.2f2f	f0 24		beq $2f55			beq 	_SFExit 					; at the same strcture depth.
.2f31	c5 2d		cmp $2d				cmp 	temp1+1
.2f33	f0 20		beq $2f55			beq 	_SFExit
.2f35					_SFNoCheck:
.2f35	c9 80		cmp #$80			cmp 	#$80 						; if it is 00-7F (variable/number) just skip it.
.2f37	90 ed		bcc $2f26			bcc 	_SFLoop
.2f39	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; $80-$85 is various specials.
.2f3b	90 19		bcc $2f56			bcc 	_SFSpecials
.2f3d	c9 99		cmp #$99			cmp 	#TOK_STRUCTST 				; if < structure start then continue
.2f3f	90 e5		bcc $2f26			bcc 	_SFLoop
.2f41	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST 				; if >= unary start (after structure) then continue.
.2f43	b0 e1		bcs $2f26			bcs 	_SFLoop
.2f45	aa		tax				tax  								; token in X, and look up the adjuster.
.2f46	bd 03 36	lda $3603,x			lda 	ELBinaryOperatorInfo-TOK_BINARYST,x
.2f49	38		sec				sec 								; convert to an offset ($FF,$01)
.2f4a	e9 81		sbc #$81			sbc 	#$81
.2f4c	18		clc				clc 								; add to depth
.2f4d	65 2e		adc $2e				adc 	temp2
.2f4f	85 2e		sta $2e				sta 	temp2
.2f51	10 d3		bpl $2f26			bpl 	_SFLoop 					; +ve okay to continue
.2f53	30 07		bmi $2f5c			bmi 	SFError 					; if gone -ve then we have a nesting error
.2f55	60		rts		_SFExit:rts
.2f56					_SFSpecials:
.2f56	20 61 2f	jsr $2f61			jsr 	ScannerSkipSpecial
.2f59	4c 26 2f	jmp $2f26			jmp 	_SFLoop
.2f5c					SFError:
.2f5c	a2 14		ldx #$14			ldx 	#ErrorID_Struct
.2f5e	20 18 15	jsr $1518		jsr	errorHandler
.2f61					ScannerSkipSpecial:
.2f61	c9 80		cmp #$80			cmp 	#TOK_EOL 					; $80, advance to next line.
.2f63	f0 10		beq $2f75			beq 	_SFNextLine
.2f65	c9 84		cmp #$84			cmp 	#TOK_FPC					; $84, skip embedded float
.2f67	f0 2b		beq $2f94			beq 	_SFFloatSkip
.2f69	c9 85		cmp #$85			cmp 	#TOK_STR 					; $85, skip string
.2f6b	f0 02		beq $2f6f			beq 	_SFSkipString
.2f6d	c8		iny				iny									; $81,$82,$83 shift, so just advance over the shifted
.2f6e	60		rts				rts 								; token.
.2f6f					_SFSkipString:
.2f6f	98		tya				tya
.2f70	38		sec				sec
.2f71	71 28		adc ($28),y			adc 	(codePtr),y
.2f73	a8		tay				tay
.2f74	60		rts				rts
.2f75					_SFNextLine:
.2f75	a0 00		ldy #$00			ldy 	#0 							; get offset
.2f77	b1 28		lda ($28),y			lda 	(codePtr),y
.2f79	18		clc				clc 								; add to code pointer.
.2f7a	65 28		adc $28				adc 	codePtr
.2f7c	85 28		sta $28				sta 	codePtr
.2f7e	90 02		bcc $2f82			bcc		_SFNLNoCarry
.2f80	e6 29		inc $29				inc 	codePtr+1
.2f82					_SFNLNoCarry:
.2f82	b1 28		lda ($28),y			lda 	(codePtr),y 				; reached the end of the program.
.2f84	d0 0b		bne $2f91			bne		_SFXNL 						; no go round again
.2f86	a5 2c		lda $2c				lda 	temp1
.2f88	c9 d9		cmp #$d9			cmp 	#TKW_DATA 					; if searching for Data different error.
.2f8a	d0 d0		bne $2f5c			bne 	SFError 					; read uses this to search for data statements
.2f8c	a2 1d		ldx #$1d			ldx 	#ErrorID_DataError
.2f8e	20 18 15	jsr $1518		jsr	errorHandler
.2f91	a0 03		ldy #$03	_SFXNL:	ldy 	#3
.2f93	60		rts				rts
.2f94					_SFFloatSkip:
.2f94	98		tya				tya 								; skip over an embedded float.
.2f95	18		clc				clc
.2f96	69 05		adc #$05			adc 	#FloatEmbeddedSize
.2f98	a8		tay				tay
.2f99	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/while.asm

.2f9a					Command_While:
.2f9a	a9 57		lda #$57			lda 	#markerWhile 				; gosub marker allocate 4 bytes.
.2f9c	a2 04		ldx #$04			ldx 	#4
.2f9e	20 1a 3e	jsr $3e1a			jsr 	RSClaim 					; create on stack.
.2fa1	88		dey				dey
.2fa2	a9 01		lda #$01			lda 	#1
.2fa4	20 46 3e	jsr $3e46			jsr 	RSSavePosition 				; save position before the WHILE keyword.
.2fa7	c8		iny				iny
.2fa8	20 e5 36	jsr $36e5			jsr 	EvaluateRootInteger			; get the conditional
.2fab	20 a6 3d	jsr $3da6			jsr 	MInt32Zero 	 				; if zero, skip forward to the fail code.
.2fae	f0 01		beq $2fb1			beq 	_CWFail
.2fb0	60		rts				rts
.2fb1					_CWFail:
.2fb1	a9 04		lda #$04			lda 	#4
.2fb3	20 3c 3e	jsr $3e3c			jsr 	RSFree 						; close the just opened position.
.2fb6	a9 9f		lda #$9f			lda 	#TKW_WEND 					; scan forward past WEND.
.2fb8	aa		tax				tax
.2fb9	20 1e 2f	jsr $2f1e			jsr 	ScanForward
.2fbc	60		rts				rts
.2fbd					Command_Wend:
.2fbd	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.2fbf	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.2fc1	c9 57		cmp #$57			cmp 	#markerWHILE 						; does it match
.2fc3	f0 05		beq $2fca			beq 	_isok
.2fc5	a2 11		ldx #$11			ldx 	#ErrorID_wendErr
.2fc7	20 18 15	jsr $1518		jsr	errorHandler
.2fca					_isok:
.2fca	a9 01		lda #$01			lda 	#1
.2fcc	20 59 3e	jsr $3e59			jsr 	RSLoadPosition				; go back until true
.2fcf	a9 04		lda #$04			lda 	#4
.2fd1	20 3c 3e	jsr $3e3c			jsr 	RSFree 						; close the loop
.2fd4	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/system/clear.asm

.2fd5					CommandClear:
.2fd5					XCommandClear:
.2fd5	98		tya				tya
.2fd6	48		pha				pha
.2fd7	ad cc 0a	lda $0acc			lda 	endMemory					; set high memory = end of memory
.2fda	85 33		sta $33				sta 	highMemory
.2fdc	ad cd 0a	lda $0acd			lda 	endMemory+1
.2fdf	85 34		sta $34				sta 	highMemory+1
.2fe1	ad c8 0a	lda $0ac8			lda 	basePage 					; work out where the program ends.
.2fe4	85 2a		sta $2a				sta 	temp0
.2fe6	ad c9 0a	lda $0ac9			lda 	basePage+1
.2fe9	85 2b		sta $2b				sta 	temp0+1
.2feb					_CCFindEnd:
.2feb	a0 00		ldy #$00			ldy 	#0
.2fed	b1 2a		lda ($2a),y			lda 	(temp0),y
.2fef	f0 0c		beq $2ffd			beq 	_CCFoundEnd 				; offset zero is end.
.2ff1	18		clc				clc
.2ff2	65 2a		adc $2a				adc 	temp0 						; move to next line
.2ff4	85 2a		sta $2a				sta 	temp0
.2ff6	90 f3		bcc $2feb			bcc 	_CCFindEnd
.2ff8	e6 2b		inc $2b				inc 	temp0+1
.2ffa	4c eb 2f	jmp $2feb			jmp 	_CCFindEnd
.2ffd					_CCFoundEnd:
.2ffd	a5 2a		lda $2a				lda 	temp0 						; put temp0 in lowMemory
.2fff	85 35		sta $35				sta 	lowMemory
.3001	a5 2b		lda $2b				lda 	temp0+1
.3003	85 36		sta $36				sta 	lowMemory+1
.3005	18		clc				clc 								; put temp0+1 in endProgram
.3006	a5 2a		lda $2a				lda 	temp0
.3008	69 01		adc #$01			adc 	#1
.300a	8d ca 0a	sta $0aca			sta 	endProgram
.300d	a5 2b		lda $2b				lda 	temp0+1
.300f	69 00		adc #$00			adc 	#0
.3011	8d cb 0a	sta $0acb			sta 	endProgram+1
.3014	18		clc				clc 								; put a bit of space in.
.3015	a5 35		lda $35				lda 	lowMemory
.3017	69 04		adc #$04			adc 	#4
.3019	85 35		sta $35				sta 	lowMemory
.301b	90 02		bcc $301f			bcc 	_CCNoCarry
.301d	e6 36		inc $36				inc 	lowMemory+1
.301f					_CCNoCarry:
.301f	20 0c 3e	jsr $3e0c			jsr 	RSReset 					; reset the return stack.
.3022	a2 06		ldx #$06		ldx	#6
.3024	20 91 4d	jsr $4d91		jsr	variableHandler
.3027	20 86 2e	jsr $2e86			jsr 	ScanProc 					; scan for procedures
.302a	20 0b 28	jsr $280b			jsr 	CommandRestore 				; do a restore
.302d	68		pla				pla
.302e	a8		tay				tay
.302f	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/system/list.asm

.0d4b					structIndent:
>0d4b							.fill 	1
.3030					CommandList:
.3030	a2 00		ldx #$00			ldx		#0 							; set start/end lines in stack 0/1 to 0 and $FFFF
.3032	8e 4b 0d	stx $0d4b			stx 	structIndent
.3035	20 7f 3d	jsr $3d7f			jsr 	MInt32False
.3038	e8		inx				inx
.3039	20 7b 3d	jsr $3d7b			jsr 	MInt32True
.303c	b1 28		lda ($28),y			lda 	(codePtr),y 				; look at first token
.303e	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; list ,xxxx
.3040	f0 15		beq $3057			beq 	_CLEndLine
.3042	c9 00		cmp #$00			cmp 	#0 							; list ... on its own.
.3044	30 1b		bmi $3061			bmi 	_CLDoListing 				; do the whole lot.
.3046	a2 00		ldx #$00			ldx 	#0 							; get start line at stack:0
.3048	20 e7 36	jsr $36e7			jsr 	EvaluateInteger
.304b	b1 28		lda ($28),y			lda 	(codePtr),y 				; , follows ?
.304d	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.304f	f0 06		beq $3057			beq 	_CLEndLine
.3051	20 bd 3c	jsr $3cbd			jsr 	MInt32CopyUp 				; copy first to second if just a line number on its
.3054	4c 61 30	jmp $3061			jmp 	_CLDoListing 				; own e.g. list 1100
.3057					_CLEndLine:
.3057	c8		iny				iny 								; skip comma
.3058	b1 28		lda ($28),y			lda 	(codePtr),y  				; no number follows, then its list 1000,
.305a	30 05		bmi $3061			bmi 	_CLDoListing
.305c	a2 01		ldx #$01			ldx 	#1 							; get the last line to list
.305e	20 e7 36	jsr $36e7			jsr 	EvaluateInteger				; get end
.3061					_CLDoListing:
.3061	20 04 32	jsr $3204			jsr 	ResetCodeAddress 			; back to the start.
.3064					_CLCheckLoop:
.3064	a2 02		ldx #$02		ldx	#2
.3066	20 f6 14	jsr $14f6		jsr	deviceHandler
.3069	a0 00		ldy #$00			ldy 	#0							; check end.
.306b	b1 28		lda ($28),y			lda 	(codePtr),y
.306d	f0 41		beq $30b0			beq 	_CLEnd
.306f	a2 00		ldx #$00			ldx 	#0 							; compare vs lower.
.3071	20 b3 30	jsr $30b3			jsr 	CLCompareLineTOS
.3074	c9 ff		cmp #$ff			cmp 	#255 						; if < skip
.3076	f0 28		beq $30a0			beq 	_CLNext
.3078	e8		inx				inx
.3079	20 b3 30	jsr $30b3			jsr 	CLCompareLineTOS 			; compare vs higher
.307c	c9 01		cmp #$01			cmp 	#1
.307e	f0 20		beq $30a0			beq 	_CLNext
.3080	a9 80		lda #$80			lda 	#$80 						; undo any down indents this line.
.3082	20 d5 30	jsr $30d5			jsr 	CLStructureCheck
.3085	ad 4b 0d	lda $0d4b			lda 	structIndent 				; indent level.
.3088	10 02		bpl $308c			bpl 	_CLPositive
.308a	a9 00		lda #$00			lda 	#0
.308c					_CLPositive:
.308c	a2 04		ldx #$04		ldx	#4
.308e	20 c0 49	jsr $49c0		jsr	tokeniserHandler
.3091	a9 82		lda #$82			lda 	#$82 						; up indents from this point on.
.3093	20 d5 30	jsr $30d5			jsr 	CLStructureCheck
.3096	ad 4b 0d	lda $0d4b			lda 	structIndent
.3099	10 05		bpl $30a0			bpl 	_CLNext
.309b	a9 00		lda #$00			lda 	#0
.309d	8d 4b 0d	sta $0d4b			sta 	structIndent
.30a0					_CLNext:
.30a0	a0 00		ldy #$00			ldy 	#0 							; go to next line.
.30a2	b1 28		lda ($28),y			lda 	(codePtr),y
.30a4	18		clc				clc
.30a5	65 28		adc $28				adc 	codePtr
.30a7	85 28		sta $28				sta 	codePtr
.30a9	90 b9		bcc $3064			bcc 	_CLCheckLoop
.30ab	e6 29		inc $29				inc 	codePtr+1
.30ad	4c 64 30	jmp $3064			jmp 	_CLCheckLoop
.30b0					_CLEnd:
.30b0	4c 68 3e	jmp $3e68			jmp 	WarmStart 					; warm start after list.
.30b3					CLCompareLineTOS:
.30b3	a0 01		ldy #$01			ldy 	#1
.30b5	b1 28		lda ($28),y			lda 	(codePtr),y
.30b7	55 98		eor $98,x			eor 	esInt0,x
.30b9	85 2a		sta $2a				sta 	temp0
.30bb	c8		iny				iny
.30bc	b1 28		lda ($28),y			lda 	(codePtr),y
.30be	55 a0		eor $a0,x			eor 	esInt1,x
.30c0	05 2a		ora $2a				ora 	temp0
.30c2	f0 10		beq $30d4			beq 	_CLCLTExit
.30c4	88		dey				dey
.30c5	b1 28		lda ($28),y			lda 	(codePtr),y
.30c7	d5 98		cmp $98,x			cmp 	esInt0,x
.30c9	c8		iny				iny
.30ca	b1 28		lda ($28),y			lda 	(codePtr),y
.30cc	f5 a0		sbc $a0,x			sbc 	esInt1,x
.30ce	a9 ff		lda #$ff			lda 	#255
.30d0	90 02		bcc $30d4			bcc 	_CLCLTExit
.30d2	a9 01		lda #$01			lda 	#1
.30d4					_CLCLTExit:
.30d4	60		rts				rts
.30d5					CLStructureCheck:
.30d5	85 2a		sta $2a				sta 	temp0
.30d7	a0 03		ldy #$03			ldy 	#3
.30d9					_CLSCLoop:
.30d9	b1 28		lda ($28),y			lda 	(codePtr),y 				; get and consume token.
.30db	c8		iny				iny
.30dc	c9 80		cmp #$80			cmp 	#$80
.30de	90 f9		bcc $30d9			bcc 	_CLSCLoop 					; $00-$7F just step over.
.30e0	f0 28		beq $310a			beq		_CLSCExit					; EOL return
.30e2	c9 86		cmp #$86			cmp 	#$86 						; special handler
.30e4	90 1e		bcc $3104			bcc 	_CLSCSpecial
.30e6	c9 99		cmp #$99			cmp 	#TOK_STRUCTST 				; check if structure changer.
.30e8	90 ef		bcc $30d9			bcc 	_CLSCLoop
.30ea	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST
.30ec	b0 eb		bcs $30d9			bcs 	_CLSCLoop
.30ee	aa		tax				tax 								; get adjustment
.30ef	bd 03 36	lda $3603,x			lda 	ELBinaryOperatorInfo-TOK_BINARYST,x
.30f2	c5 2a		cmp $2a				cmp 	temp0	 					; if what we're searching for
.30f4	d0 e3		bne $30d9			bne 	_CLSCLoop
.30f6	38		sec				sec
.30f7	e9 81		sbc #$81			sbc 	#$81 						; convert to offset
.30f9	0a		asl a				asl 	a 							; double indent step
.30fa	18		clc				clc
.30fb	6d 4b 0d	adc $0d4b			adc 	structIndent 				; add to structure indent
.30fe	8d 4b 0d	sta $0d4b			sta 	structIndent
.3101	4c d9 30	jmp $30d9			jmp 	_CLSCLoop
.3104					_CLSCSpecial:
.3104	20 61 2f	jsr $2f61			jsr 	ScannerSkipSpecial
.3107	4c d9 30	jmp $30d9			jmp 	_CLSCLoop
.310a					_CLSCExit:
.310a	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/system/loadsave.asm

.310b					CommandLoad:
.310b	20 33 31	jsr $3133			jsr 	CLSParameters 					; get parameters for load.
.310e	08		php				php
.310f	a2 0e		ldx #$0e		ldx	#14
.3111	20 f6 14	jsr $14f6		jsr	deviceHandler
.3114	28		plp				plp
.3115	b0 08		bcs $311f			bcs 	_CLExit 						; if CC then load a program, so warm start.
.3117	20 d5 2f	jsr $2fd5			jsr 	CommandClear
.311a	a2 04		ldx #$04		ldx	#4
.311c	20 cd 27	jsr $27cd		jsr	interactionHandler
.311f					_CLExit
.311f	60		rts				rts
.3120					CommandSave:
.3120	20 33 31	jsr $3133			jsr 	CLSParameters					; get parameters for save
.3123	90 08		bcc $312d			bcc 	_CSNoOverrideAddress
.3125	20 ff 3d	jsr $3dff			jsr 	CheckComma 						; should be a comma.
.3128	a2 02		ldx #$02			ldx 	#2
.312a	20 e7 36	jsr $36e7			jsr 	EvaluateInteger 				; get save end address.
.312d					_CSNoOverrideAddress:
.312d	a2 18		ldx #$18		ldx	#24
.312f	20 f6 14	jsr $14f6		jsr	deviceHandler
.3132	60		rts				rts
.3133					CLSParameters:
.3133	a2 00		ldx #$00			ldx 	#0 								; string
.3135	20 dc 36	jsr $36dc			jsr 	EvaluateString
.3138	e8		inx				inx 									; erase out +1 +2
.3139	20 7f 3d	jsr $3d7f			jsr 	MInt32False
.313c	e8		inx				inx
.313d	20 7f 3d	jsr $3d7f			jsr 	MInt32False
.3140	ad c8 0a	lda $0ac8			lda 	basePage 						; default start address.
.3143	85 99		sta $99				sta 	esInt0+1
.3145	ad c9 0a	lda $0ac9			lda 	basePage+1
.3148	85 a1		sta $a1				sta 	esInt1+1
.314a	ad ca 0a	lda $0aca			lda 	endProgram 						; default end address
.314d	85 9a		sta $9a				sta 	esInt0+2
.314f	ad cb 0a	lda $0acb			lda 	endProgram+1
.3152	85 a2		sta $a2				sta 	esInt1+2
.3154	b1 28		lda ($28),y			lda 	(codePtr),y 					; , following
.3156	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.3158	d0 08		bne $3162			bne 	_CLSDefault
.315a	c8		iny				iny 									; skip comma
.315b	a2 01		ldx #$01			ldx 	#1 								; get numeric value.
.315d	20 e7 36	jsr $36e7			jsr 	EvaluateInteger
.3160	38		sec				sec
.3161	60		rts				rts
.3162					_CLSDefault:
.3162	18		clc				clc
.3163	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/system/new.asm

.3164					Command_New:
.3164					Command_XNew:
.3164	20 04 32	jsr $3204			jsr 	ResetCodeAddress 			; point to first line
.3167	a0 00		ldy #$00			ldy 	#0 							; and zap it.
.3169	98		tya				tya
.316a	91 28		sta ($28),y			sta 	(codePtr),y
.316c	20 d5 2f	jsr $2fd5			jsr 	CommandClear 				; clear everything down.
.316f	4c 2b 2b	jmp $2b2b			jmp 	CommandEND 					; do END code, as there's nothing to run.

;******  Return to file: main/main.asm


;******  Processing file: main/commands/system/run.asm

.0d4c					breakCounter:
>0d4c								.fill 	1
.0d4d					breakIncrement:
>0d4d								.fill 	1
.3172					Command_Run:
.3172					XCommand_Run:
.3172	a2 ff		ldx #$ff			ldx 	#$FF 						; reset the stack.
.3174	9a		txs				txs
.3175	20 fe 31	jsr $31fe			jsr 	BreakOn 					; turn break on
.3178	20 d5 2f	jsr $2fd5			jsr 	CommandClear 				; clear everything.
.317b	20 04 32	jsr $3204			jsr 	ResetCodeAddress 			; back to the start.
.317e					Command_RunFrom:
.317e	a0 03		ldy #$03			ldy 	#3 							; over offset/line #
.3180					CRNextInstruction:
.3180	a9 00		lda #$00			lda 	#0
.3182	85 3a		sta $3a				sta 	softMemAlloc+1
.3184	ad 4c 0d	lda $0d4c			lda 	breakCounter 				; check for break.
.3187	6d 4d 0d	adc $0d4d			adc 	breakIncrement
.318a	8d 4c 0d	sta $0d4c			sta 	breakCounter
.318d	90 05		bcc $3194			bcc 	_CRNoChecks
.318f	a2 02		ldx #$02		ldx	#2
.3191	20 f6 14	jsr $14f6		jsr	deviceHandler
.3194					_CRNoChecks
.3194	b1 28		lda ($28),y			lda 	(codePtr),y 				; get next token.
.3196	10 1c		bpl $31b4			bpl 	_CRNotToken
.3198	c9 c9		cmp #$c9			cmp 	#TOK_TOKENS 				; if in the tokens then do that token.
.319a	b0 0c		bcs $31a8			bcs 	_CRExecute
.319c	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST 				; unary is ignored.
.319e	b0 71		bcs $3211			bcs 	Unimplemented
.31a0	c9 99		cmp #$99			cmp 	#TOK_STRUCTST 				; execute structures.
.31a2	b0 04		bcs $31a8			bcs 	_CRExecute
.31a4	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; if one of the system tokens $80-$85 do that
.31a6	b0 16		bcs $31be			bcs 	_CRCheckIndirect 			; if in that unused range check for ! or ? or AND
.31a8					_CRExecute:
.31a8	c8		iny				iny 								; consume it.
.31a9	0a		asl a				asl 	a 							; double it, losing most significant bit.
.31aa	aa		tax				tax
.31ab	20 b1 31	jsr $31b1			jsr 	_CRRunRoutine 				; we want to do jsr (group0vectors,x)
.31ae	4c 80 31	jmp $3180			jmp 	CRNextInstruction
.31b1					_CRRunRoutine:
.31b1	7c 1b 32	jmp ($321b,x)			jmp 	(Group0Vectors,x)
.31b4					_CRNotToken:
.31b4	c9 40		cmp #$40			cmp 	#$40 						; if 0-3F then it is a letter
.31b6	b0 59		bcs $3211			bcs 	Unimplemented
.31b8					_CRDefaultLet:
.31b8	20 5e 2a	jsr $2a5e			jsr 	CommandLet 					; do the default, LET
.31bb	4c 80 31	jmp $3180			jmp 	CRNextInstruction
.31be					_CRCheckIndirect:
.31be	c9 86		cmp #$86			cmp 	#TKW_AND 					; AND (assembler)
.31c0	f0 0a		beq $31cc			beq 	_CRAndCommand
.31c2	c9 97		cmp #$97			cmp 	#TKW_PLING 					; !<term> =
.31c4	f0 f2		beq $31b8			beq 	_CRDefaultLet
.31c6	c9 98		cmp #$98			cmp 	#TKW_QMARK 					; ?<term> =
.31c8	f0 ee		beq $31b8			beq 	_CRDefaultLet
.31ca	d0 45		bne $3211			bne 	Unimplemented
.31cc					_CRAndCommand:
.31cc	c8		iny				iny 								; skip over the AND token
.31cd	a9 95		lda #$95			lda 	#TKW_LPARENANDRPAREN 		; replace it with the pseudo-and
.31cf	20 e9 31	jsr $31e9			jsr 	CommandAssembler 			; do the assembler command
.31d2	4c 80 31	jmp $3180			jmp 	CRNextInstruction 			; and loop round.
.31d5					CommandShift1:
.31d5	b1 28		lda ($28),y			lda 	(codePtr),y 				; get shifted value
.31d7	10 38		bpl $3211			bpl 	Unimplemented 				; we have an error as this should not happen.
.31d9	c8		iny				iny 								; advance over it.
.31da	c9 94		cmp #$94			cmp 	#TKA_GROUP1 				; is it an assembler constant ?
.31dc	b0 0b		bcs $31e9			bcs 	CommandAssembler
.31de	0a		asl a				asl 	a 							; double into X
.31df	aa		tax				tax
.31e0	7c e3 32	jmp ($32e3,x)			jmp 	(Group1Vectors-12,x) 		; and do the code.
.31e3					CommandShift2:
.31e3	a9 ff		lda #$ff			lda 	#$FF 						; $FF means command not unary function.
.31e5	20 69 18	jsr $1869		jsr	extensionHandler
.31e8	60		rts				rts
.31e9					CommandAssembler:
.31e9	a2 02		ldx #$02		ldx	#2
.31eb	20 b4 13	jsr $13b4		jsr	assemblerHandler
.31ee	60		rts				rts
.31ef					CommandAssemblerLabel:
.31ef	a2 04		ldx #$04		ldx	#4
.31f1	20 b4 13	jsr $13b4		jsr	assemblerHandler
.31f4	60		rts				rts
.31f5					CommandColon:
.31f5	60		rts				rts
.31f6					CommandBreak:
.31f6	20 e5 36	jsr $36e5			jsr 	EvaluateRootInteger
.31f9	20 a6 3d	jsr $3da6			jsr 	MInt32Zero
.31fc	f0 02		beq $3200			beq 	BreakOff
.31fe					BreakOn:
.31fe	a2 08		ldx #$08			ldx 	#8
.3200					BreakOff:
.3200	8e 4d 0d	stx $0d4d			stx 	breakIncrement
.3203	60		rts				rts
.3204					ResetCodeAddress:
.3204	ad c8 0a	lda $0ac8			lda 	basePage 					; copy basePage to code Pointer
.3207	85 28		sta $28				sta 	codePtr
.3209	ad c9 0a	lda $0ac9			lda 	basePage+1
.320c	85 29		sta $29				sta 	codePtr+1
.320e	a0 03		ldy #$03			ldy 	#3 							; offset after offset link and line#
.3210	60		rts				rts
.3211					Unimplemented:
.3211	a2 01		ldx #$01			ldx 	#ErrorID_Missing
.3213	20 18 15	jsr $1518		jsr	errorHandler
.3216					TKErr01:
.3216					TKErr02:
.3216					TKErr03:
.3216					TKErr04:
.3216					TKErr05:
.3216					TKErr06:
.3216					TKErr07:
.3216					TKErr08:
.3216					TKErr09:
.3216					TKErr10:
.3216					TKErr11:
.3216					TKErr12:
.3216					TKErr13:
.3216					TKErr14:
.3216					TKErr15:
.3216					TKErr16:
.3216	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.3218	20 18 15	jsr $1518		jsr	errorHandler

;******  Processing file: main/commands/system/../../../generated/tokenvectors0.inc

.321b					Group0Vectors:
>321b	31 2b					.word	AdvanceNextLine          ; $80 [[eol]]
>321d	d5 31					.word	CommandShift1            ; $81 [[sh1]]
>321f	e3 31					.word	CommandShift2            ; $82 [[sh2]]
>3221	16 32					.word	TKErr09                  ; $83 [[sh3]]
>3223	16 32					.word	TKErr10                  ; $84 [[fpc]]
>3225	16 32					.word	TKErr08                  ; $85 [[str]]
>3227	cc 33					.word	AndHandler               ; $86 and
>3229	b9 33					.word	OrHandler                ; $87 or
>322b	a6 33					.word	XorHandler               ; $88 xor
>322d	ee 34					.word	CompareGreaterEq         ; $89 >=
>322f	f8 34					.word	CompareLessEq            ; $8a <=
>3231	da 34					.word	CompareGreater           ; $8b >
>3233	d0 34					.word	CompareLess              ; $8c <
>3235	c6 34					.word	CompareEquals            ; $8d =
>3237	e4 34					.word	CompareNotEquals         ; $8e <>
>3239	37 33					.word	AddHandler               ; $8f +
>323b	5a 33					.word	SubHandler               ; $90 -
>323d	f2 33					.word	ShrHandler               ; $91 >>
>323f	df 33					.word	ShlHandler               ; $92 <<
>3241	6d 33					.word	MulHandler               ; $93 *
>3243	80 33					.word	DivHandler               ; $94 /
>3245	93 33					.word	ModHandler               ; $95 mod
>3247	2b 34					.word	PowerHandler             ; $96 ^
>3249	05 34					.word	WordRefHandler           ; $97 !
>324b	18 34					.word	ByteRefHandler           ; $98 ?
>324d	f0 2e					.word	Command_Repeat           ; $99 repeat
>324f	9a 2f					.word	Command_While            ; $9a while
>3251	45 2b					.word	Command_FOR              ; $9b for
>3253	54 2c					.word	CommandIf                ; $9c if
>3255	16 32					.word	TKErr04                  ; $9d defproc
>3257	fd 2e					.word	Command_Until            ; $9e until
>3259	bd 2f					.word	Command_Wend             ; $9f wend
>325b	a6 2b					.word	Command_NEXT             ; $a0 next
>325d	16 32					.word	TKErr06                  ; $a1 then
>325f	8f 2c					.word	Command_ENDIF            ; $a2 endif
>3261	ff 2d					.word	ReturnProc               ; $a3 endproc
>3263	52 36					.word	UnaryParenthesis         ; $a4 (
>3265	34 38					.word	UnaryLen                 ; $a5 len(
>3267	78 38					.word	UnarySgn                 ; $a6 sgn(
>3269	61 38					.word	UnaryAbs                 ; $a7 abs(
>326b	d1 38					.word	Unary_Random             ; $a8 random(
>326d	1b 39					.word	Unary_Page               ; $a9 page
>326f	7b 3d					.word	MInt32True               ; $aa true
>3271	7f 3d					.word	MInt32False              ; $ab false
>3273	e6 38					.word	Unary_Min                ; $ac min(
>3275	ea 38					.word	Unary_Max                ; $ad max(
>3277	f3 39					.word	UnarySys                 ; $ae sys(
>3279	9c 39					.word	UnaryTimer               ; $af timer(
>327b	b1 37					.word	EventFunction            ; $b0 event(
>327d	c5 39					.word	UnaryGet                 ; $b1 get(
>327f	b5 39					.word	UnaryInkey               ; $b2 inkey(
>3281	6c 39					.word	UnaryAlloc               ; $b3 alloc(
>3283	2c 3a					.word	ExecChr                  ; $b4 chr$(
>3285	5c 3a					.word	ExecLeft                 ; $b5 left$(
>3287	79 3a					.word	ExecMid                  ; $b6 mid$(
>3289	a1 3a					.word	ExecRight                ; $b7 right$(
>328b	33 37					.word	Event_Str                ; $b8 str$(
>328d	62 37					.word	UnaryVal                 ; $b9 val(
>328f	8f 38					.word	UnaryPeek                ; $ba peek(
>3291	95 38					.word	UnaryDeek                ; $bb deek(
>3293	9b 38					.word	UnaryLeek                ; $bc leek(
>3295	52 38					.word	UnaryAsc                 ; $bd asc(
>3297	46 39					.word	UnaryIntToFloat          ; $be int(
>3299	59 39					.word	UnaryFloatToInt          ; $bf float(
>329b	65 37					.word	UnaryIsVal               ; $c0 isval(
>329d	43 3a					.word	ExecUpper                ; $c1 upper$(
>329f	40 3a					.word	ExecLower                ; $c2 lower$(
>32a1	29 39					.word	UnaryReference           ; $c3 @
>32a3	3f 39					.word	UnaryComplement          ; $c4 ~
>32a5	3c 39					.word	UnaryHexMarker           ; $c5 &
>32a7	de 39					.word	UnaryGetString           ; $c6 get$(
>32a9	e4 39					.word	UnaryInkeyString         ; $c7 inkey$(
>32ab	1b 3a					.word	UnaryMem                 ; $c8 mem
>32ad	16 32					.word	TKErr01                  ; $c9 )
>32af	f5 31					.word	CommandColon             ; $ca :
>32b1	16 32					.word	TKErr02                  ; $cb ,
>32b3	16 32					.word	TKErr03                  ; $cc ;
>32b5	19 2b					.word	Command_Rem2             ; $cd '
>32b7	16 32					.word	TKErr07                  ; $ce to
>32b9	16 32					.word	TKErr05                  ; $cf step
>32bb	92 2d					.word	CallProc                 ; $d0 proc
>32bd	90 2c					.word	CommandLocal             ; $d1 local
>32bf	50 2a					.word	Command_Dim              ; $d2 dim
>32c1	19 2b					.word	Command_Rem              ; $d3 rem
>32c3	5e 2a					.word	CommandLet               ; $d4 let
>32c5	9a 28					.word	Command_Input            ; $d5 input
>32c7	89 2c					.word	Command_ELSE             ; $d6 else
>32c9	21 2a					.word	Command_VDU              ; $d7 vdu
>32cb	50 29					.word	Command_Print            ; $d8 print
>32cd	02 28					.word	CommandData              ; $d9 data
>32cf	16 32					.word	TKErr13                  ; $da image
>32d1	16 32					.word	TKErr12                  ; $db at
>32d3	16 32					.word	TKErr14                  ; $dc flip
>32d5	42 2a					.word	Command_Assert           ; $dd assert
>32d7	dc 2a					.word	Command_Poke             ; $de poke
>32d9	e0 2a					.word	Command_Doke             ; $df doke
>32db	e4 2a					.word	Command_Loke             ; $e0 loke
>32dd	f1 29					.word	Command_Ink              ; $e1 ink
>32df	fc 29					.word	Command_Paper            ; $e2 paper
>32e1	eb 29					.word	Command_CLS              ; $e3 cls
>32e3	07 2a					.word	Command_Locate           ; $e4 locate
>32e5	ef 31					.word	CommandAssemblerLabel    ; $e5 .
>32e7	16 32					.word	TKErr15                  ; $e6 from
>32e9	16 32					.word	TKErr11                  ; $e7 #
>32eb	d5 2f					.word	CommandClear             ; $e8 clear
>32ed	16 32					.word	TKErr16                  ; $e9 text

;******  Return to file: main/commands/system/run.asm


;******  Processing file: main/commands/system/../../../generated/tokenvectors1.inc

.32ef					Group1Vectors:
>32ef	0b 31					.word	CommandLoad              ; $86 load
>32f1	20 31					.word	CommandSave              ; $87 save
>32f3	30 30					.word	CommandList              ; $88 list
>32f5	64 31					.word	Command_New              ; $89 new
>32f7	f6 31					.word	CommandBreak             ; $8a break
>32f9	72 31					.word	Command_Run              ; $8b run
>32fb	d7 27					.word	CommandRead              ; $8c read
>32fd	0b 28					.word	CommandRestore           ; $8d restore
>32ff	2b 2b					.word	CommandEnd               ; $8e end
>3301	26 2b					.word	CommandStop              ; $8f stop
>3303	2e 2b					.word	CommandXemu              ; $90 xemu
>3305	68 28					.word	CommandGOTO              ; $91 goto
>3307	3d 28					.word	CommandGOSUB             ; $92 gosub
>3309	50 28					.word	CommandRETURN            ; $93 return

;******  Return to file: main/commands/system/run.asm


;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/binary/binary.asm

.330b					BinaryProcess:
.330b	b5 90		lda $90,x			lda 	esType,x 					; or type bytes together and check bit 6.
.330d	15 91		ora $91,x			ora 	esType+1,x 					; (the float bit)
.330f	0a		asl a				asl 	a
.3310	30 0e		bmi $3320			bmi 	_BPStringType 				; if bit 6 is set, then string type, error
.3312	18		clc				clc 								; return CC for integer
.3313	29 02		and #$02			and 	#$02 						; $02 because of ASL A. check original bit 1.
.3315	f0 08		beq $331f			beq 	_BPExit 					; if both integer then return with CC.
.3317	20 25 33	jsr $3325			jsr 	BPMakeBothFloat 			; make both float
.331a	a9 01		lda #$01			lda 	#$01 						; set result type to float
.331c	95 90		sta $90,x			sta 	esType,x
.331e	38		sec				sec 								; and return with carry set.
.331f					_BPExit:
.331f	60		rts				rts
.3320					_BPStringType:
.3320	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.3322	20 18 15	jsr $1518		jsr	errorHandler
.3325					BPMakeBothFloat:
.3325	e8		inx				inx
.3326	20 2a 33	jsr $332a			jsr 	BPMakeFloat 				; one is a float, so we do both as floats.
.3329	ca		dex				dex
.332a					BPMakeFloat:
.332a	b5 90		lda $90,x			lda 	esType,x 					; get type bit which is in bit 0
.332c	4a		lsr a				lsr 	a
.332d	b0 07		bcs $3336			bcs 	_BPIsFloat 					; already a float if set.
.332f	8a		txa				txa
.3330	a2 1c		ldx #$1c		ldx	#28
.3332	20 e1 25	jsr $25e1		jsr	floatingpointHandler
.3335	aa		tax				tax
.3336					_BPIsFloat:
.3336	60		rts				rts
.3337					AddHandler:
.3337	20 08 35	jsr $3508			jsr 	DereferenceTwo 				; dereference top two on stack.
.333a	b5 90		lda $90,x			lda 	esType,x 					; check two strings.
.333c	35 91		and $91,x			and 	esType+1,x
.333e	29 40		and #$40			and 	#$40 						; if both have bit 6 set ... we have two strings
.3340	d0 10		bne $3352			bne 	_AHStringConcat				; concatenate strings.
.3342	20 0b 33	jsr $330b			jsr 	BinaryProcess 				; check to see if either is float
.3345	b0 03		bcs $334a			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.3347	4c 63 3c	jmp $3c63			jmp 	MInt32Add 							; else do it as integer.
.334a					_IsFPOperation:
.334a	8a		txa				txa 								; call the relevant fp routine
.334b	a2 04		ldx #$04		ldx	#4
.334d	20 e1 25	jsr $25e1		jsr	floatingpointHandler
.3350	aa		tax				tax
.3351	60		rts				rts
.3352					_AHStringConcat:
.3352	8a		txa				txa 								; handled by the string module.
.3353	a2 06		ldx #$06		ldx	#6
.3355	20 2a 41	jsr $412a		jsr	stringHandler
.3358	aa		tax				tax
.3359	60		rts				rts
.335a					SubHandler:
.335a	20 08 35	jsr $3508			jsr 	DereferenceTwo
.335d	20 0b 33	jsr $330b			jsr 	BinaryProcess 				; check to see if either is float
.3360	b0 03		bcs $3365			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.3362	4c 7d 3c	jmp $3c7d			jmp 	MInt32Sub 							; else do it as integer.
.3365					_IsFPOperation:
.3365	8a		txa				txa 								; call the relevant fp routine
.3366	a2 12		ldx #$12		ldx	#18
.3368	20 e1 25	jsr $25e1		jsr	floatingpointHandler
.336b	aa		tax				tax
.336c	60		rts				rts
.336d					MulHandler:
.336d	20 08 35	jsr $3508			jsr 	DereferenceTwo
.3370	20 0b 33	jsr $330b			jsr 	BinaryProcess 				; check to see if either is float
.3373	b0 03		bcs $3378			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.3375	4c 97 3c	jmp $3c97			jmp 	MInt32Multiply 							; else do it as integer.
.3378					_IsFPOperation:
.3378	8a		txa				txa 								; call the relevant fp routine
.3379	a2 0c		ldx #$0c		ldx	#12
.337b	20 e1 25	jsr $25e1		jsr	floatingpointHandler
.337e	aa		tax				tax
.337f	60		rts				rts
.3380					DivHandler:
.3380	20 08 35	jsr $3508			jsr 	DereferenceTwo
.3383	20 0b 33	jsr $330b			jsr 	BinaryProcess 				; check to see if either is float
.3386	b0 03		bcs $338b			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.3388	4c 54 3b	jmp $3b54			jmp 	MInt32SDivide 							; else do it as integer.
.338b					_IsFPOperation:
.338b	8a		txa				txa 								; call the relevant fp routine
.338c	a2 08		ldx #$08		ldx	#8
.338e	20 e1 25	jsr $25e1		jsr	floatingpointHandler
.3391	aa		tax				tax
.3392	60		rts				rts
.3393					ModHandler:
.3393	20 08 35	jsr $3508			jsr 	DereferenceTwo
.3396	20 0b 33	jsr $330b			jsr 	BinaryProcess 				; check to see if either is float
.3399	b0 03		bcs $339e			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.339b	4c d2 3b	jmp $3bd2			jmp 	MInt32Modulus 							; else do it as integer.
.339e					_IsFPOperation:
.339e	8a		txa				txa 								; call the relevant fp routine
.339f	a2 0a		ldx #$0a		ldx	#10
.33a1	20 e1 25	jsr $25e1		jsr	floatingpointHandler
.33a4	aa		tax				tax
.33a5	60		rts				rts
.33a6					XorHandler:
.33a6	20 08 35	jsr $3508			jsr 	DereferenceTwo
.33a9	20 0b 33	jsr $330b			jsr 	BinaryProcess 				; check to see if either is float
.33ac	b0 03		bcs $33b1			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.33ae	4c 06 3b	jmp $3b06			jmp 	MInt32Xor 							; else do it as integer.
.33b1					_IsFPOperation:
.33b1	8a		txa				txa 								; call the relevant fp routine
.33b2	a2 0a		ldx #$0a		ldx	#10
.33b4	20 e1 25	jsr $25e1		jsr	floatingpointHandler
.33b7	aa		tax				tax
.33b8	60		rts				rts
.33b9					OrHandler:
.33b9	20 08 35	jsr $3508			jsr 	DereferenceTwo
.33bc	20 0b 33	jsr $330b			jsr 	BinaryProcess 				; check to see if either is float
.33bf	b0 03		bcs $33c4			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.33c1	4c ed 3a	jmp $3aed			jmp 	MInt32Or 							; else do it as integer.
.33c4					_IsFPOperation:
.33c4	8a		txa				txa 								; call the relevant fp routine
.33c5	a2 0a		ldx #$0a		ldx	#10
.33c7	20 e1 25	jsr $25e1		jsr	floatingpointHandler
.33ca	aa		tax				tax
.33cb	60		rts				rts
.33cc					AndHandler:
.33cc	20 08 35	jsr $3508			jsr 	DereferenceTwo
.33cf	20 0b 33	jsr $330b			jsr 	BinaryProcess 				; check to see if either is float
.33d2	b0 03		bcs $33d7			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.33d4	4c d4 3a	jmp $3ad4			jmp 	MInt32And 							; else do it as integer.
.33d7					_IsFPOperation:
.33d7	8a		txa				txa 								; call the relevant fp routine
.33d8	a2 0a		ldx #$0a		ldx	#10
.33da	20 e1 25	jsr $25e1		jsr	floatingpointHandler
.33dd	aa		tax				tax
.33de	60		rts				rts
.33df					ShlHandler:
.33df	20 08 35	jsr $3508			jsr 	DereferenceTwo
.33e2	20 0b 33	jsr $330b			jsr 	BinaryProcess 				; check to see if either is float
.33e5	b0 03		bcs $33ea			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.33e7	4c 60 34	jmp $3460			jmp 	Mint32ShiftLeftX 							; else do it as integer.
.33ea					_IsFPOperation:
.33ea	8a		txa				txa 								; call the relevant fp routine
.33eb	a2 0a		ldx #$0a		ldx	#10
.33ed	20 e1 25	jsr $25e1		jsr	floatingpointHandler
.33f0	aa		tax				tax
.33f1	60		rts				rts
.33f2					ShrHandler:
.33f2	20 08 35	jsr $3508			jsr 	DereferenceTwo
.33f5	20 0b 33	jsr $330b			jsr 	BinaryProcess 				; check to see if either is float
.33f8	b0 03		bcs $33fd			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.33fa	4c 63 34	jmp $3463			jmp 	MInt32ShiftRightX 							; else do it as integer.
.33fd					_IsFPOperation:
.33fd	8a		txa				txa 								; call the relevant fp routine
.33fe	a2 0a		ldx #$0a		ldx	#10
.3400	20 e1 25	jsr $25e1		jsr	floatingpointHandler
.3403	aa		tax				tax
.3404	60		rts				rts
.3405					WordRefHandler:
.3405	20 08 35	jsr $3508			jsr 	DereferenceTwo
.3408	20 0b 33	jsr $330b			jsr 	BinaryProcess 				; check to see if either is float
.340b	b0 03		bcs $3410			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.340d	4c 52 34	jmp $3452			jmp 	MInt32WordIndirect 							; else do it as integer.
.3410					_IsFPOperation:
.3410	8a		txa				txa 								; call the relevant fp routine
.3411	a2 0a		ldx #$0a		ldx	#10
.3413	20 e1 25	jsr $25e1		jsr	floatingpointHandler
.3416	aa		tax				tax
.3417	60		rts				rts
.3418					ByteRefHandler:
.3418	20 08 35	jsr $3508			jsr 	DereferenceTwo
.341b	20 0b 33	jsr $330b			jsr 	BinaryProcess 				; check to see if either is float
.341e	b0 03		bcs $3423			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.3420	4c 56 34	jmp $3456			jmp 	MInt32ByteIndirect 							; else do it as integer.
.3423					_IsFPOperation:
.3423	8a		txa				txa 								; call the relevant fp routine
.3424	a2 0a		ldx #$0a		ldx	#10
.3426	20 e1 25	jsr $25e1		jsr	floatingpointHandler
.3429	aa		tax				tax
.342a	60		rts				rts
.342b					PowerHandler:
.342b	20 08 35	jsr $3508			jsr 	DereferenceTwo
.342e	20 0b 33	jsr $330b			jsr 	BinaryProcess 				; check to see if either is float
.3431	b0 03		bcs $3436			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.3433	4c 3e 34	jmp $343e			jmp 	PowerInteger 							; else do it as integer.
.3436					_IsFPOperation:
.3436	8a		txa				txa 								; call the relevant fp routine
.3437	a2 18		ldx #$18		ldx	#24
.3439	20 e1 25	jsr $25e1		jsr	floatingpointHandler
.343c	aa		tax				tax
.343d	60		rts				rts
.343e					PowerInteger:
.343e	20 25 33	jsr $3325			jsr 	BPMakeBothFloat				; make them float.
.3441	8a		txa				txa
.3442	a2 18		ldx #$18		ldx	#24
.3444	20 e1 25	jsr $25e1		jsr	floatingpointHandler
.3447	a2 14		ldx #$14		ldx	#20
.3449	20 e1 25	jsr $25e1		jsr	floatingpointHandler
.344c	aa		tax				tax
.344d	a9 00		lda #$00			lda 	#0 							; make type integer
.344f	95 90		sta $90,x			sta 	esType,x
.3451	60		rts				rts
.3452					Mint32WordIndirect:
.3452	a9 80		lda #$80	 		lda 	#$80 				 		; word reference type (bit 7 set)
.3454	d0 02		bne $3458			bne 	Min32Indirect
.3456					Mint32ByteIndirect:
.3456	a9 a0		lda #$a0			lda 	#$A0 						; byte reference type (bit 7, bit 5 set)
.3458					Min32Indirect:
.3458	48		pha				pha 								; save the indirection
.3459	20 63 3c	jsr $3c63			jsr 	MInt32Add 					; add a!b a?b
.345c	68		pla				pla 								; and set the type to reference.
.345d	95 90		sta $90,x			sta 	esType,x 	 				; so a!b => a+b and it's a reference....
.345f	60		rts				rts
.3460					Mint32ShiftLeftX:
.3460	18		clc				clc 								; CC shift left
.3461	90 01		bcc $3464			bcc 	Mint32Shift
.3463					Mint32ShiftRightX:
.3463	38		sec				sec 								; CS shift right
.3464					Mint32Shift:
.3464	08		php				php 								; save carry flag on stack.
.3465	b5 a1		lda $a1,x			lda 	esInt1+1,x 					; if shift >= 32 then it is zero.
.3467	15 a9		ora $a9,x			ora 	esInt2+1,x
.3469	15 b1		ora $b1,x			ora 	esInt3+1,x
.346b	d0 1e		bne $348b			bne 	_MShiftZero
.346d	b5 99		lda $99,x			lda 	esInt0+1,x
.346f	c9 20		cmp #$20			cmp 	#32
.3471	b0 18		bcs $348b			bcs 	_MShiftZero
.3473					_MShiftLoop:
.3473	b5 99		lda $99,x			lda 	esInt0+1,x 					; check count is zero
.3475	f0 12		beq $3489			beq 	_MShiftExit
.3477	d6 99		dec $99,x			dec 	esInt0+1,x
.3479	28		plp				plp 								; restore and save carry
.347a	08		php				php
.347b	90 06		bcc $3483			bcc 	_MShiftLeft 				; and shift left/right accordingly.
.347d	20 9d 3d	jsr $3d9d			jsr 	Mint32ShiftRight
.3480	4c 73 34	jmp $3473			jmp 	_MShiftLoop
.3483					_MShiftLeft:
.3483	20 94 3d	jsr $3d94			jsr 	Mint32ShiftLeft
.3486	4c 73 34	jmp $3473			jmp 	_MShiftLoop
.3489					_MShiftExit:
.3489	28		plp				plp	 								; throw saved carry and exit
.348a	60		rts				rts
.348b					_MShiftZero:
.348b	4c 7f 3d	jmp $3d7f			jmp 	MInt32False 				; return 0 as shifted >= 32 times.

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/binary/compare.asm

.348e					PerformComparison:
.348e	20 08 35	jsr $3508			jsr 	DereferenceTwo 				; make both values.
.3491	b5 90		lda $90,x			lda 	esType,x 					; check for two strings.
.3493	35 91		and $91,x			and 	esType+1,x
.3495	0a		asl a				asl 	a 							; bit 7 set if both bit 6s were set.
.3496	30 1d		bmi $34b5			bmi 	_PCIsString
.3498	b5 90		lda $90,x			lda 	esType,x 					; check either is floating point.
.349a	15 91		ora $91,x			ora 	esType+1,x
.349c	0a		asl a				asl 	a 							; shift bit 6 (string) to bit 7, mixed types
.349d	30 22		bmi $34c1			bmi 	_PCError
.349f	29 02		and #$02			and 	#$02 						; because of ASL, check type in bit 0
.34a1	f0 0f		beq $34b2			beq 	_PCIsInteger 				; if not two integers, e.g. 1 of the bits is set
.34a3	20 25 33	jsr $3325			jsr 	BPMakeBothFloat 			; make both float
.34a6	8a		txa				txa
.34a7	a2 06		ldx #$06		ldx	#6
.34a9	20 e1 25	jsr $25e1		jsr	floatingpointHandler
.34ac	86 32		stx $32				stx 	tempShort 					; save result
.34ae	aa		tax				tax
.34af	a5 32		lda $32				lda 	tempShort
.34b1	60		rts				rts
.34b2					_PCIsInteger:
.34b2	4c 1f 3b	jmp $3b1f			jmp 	MInt32Compare
.34b5					_PCIsString:
.34b5	8a		txa				txa 								; A has SP
.34b6	a2 0a		ldx #$0a		ldx	#10
.34b8	20 2a 41	jsr $412a		jsr	stringHandler
.34bb	86 32		stx $32				stx 	tempShort 					; save result
.34bd	aa		tax				tax 								; put SP back in X and get result.
.34be	a5 32		lda $32				lda 	tempShort
.34c0	60		rts				rts
.34c1					_PCError:
.34c1	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.34c3	20 18 15	jsr $1518		jsr	errorHandler
.34c6					CompareEquals:
.34c6	20 8e 34	jsr $348e			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.34c9	c9 00		cmp #$00			cmp 	#$00 						; and we do something if it is = or <> a value.
.34cb	f0 35		beq $3502			beq  	CompareTrue
.34cd	4c 05 35	jmp $3505			jmp 	CompareFalse
.34d0					CompareLess:
.34d0	20 8e 34	jsr $348e			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.34d3	c9 ff		cmp #$ff			cmp 	#$FF 						; and we do something if it is = or <> a value.
.34d5	f0 2b		beq $3502			beq  	CompareTrue
.34d7	4c 05 35	jmp $3505			jmp 	CompareFalse
.34da					CompareGreater:
.34da	20 8e 34	jsr $348e			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.34dd	c9 01		cmp #$01			cmp 	#$01 						; and we do something if it is = or <> a value.
.34df	f0 21		beq $3502			beq  	CompareTrue
.34e1	4c 05 35	jmp $3505			jmp 	CompareFalse
.34e4					CompareNotEquals:
.34e4	20 8e 34	jsr $348e			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.34e7	c9 00		cmp #$00			cmp 	#$00 						; and we do something if it is = or <> a value.
.34e9	d0 17		bne $3502			bne  	CompareTrue
.34eb	4c 05 35	jmp $3505			jmp 	CompareFalse
.34ee					CompareGreaterEq:
.34ee	20 8e 34	jsr $348e			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.34f1	c9 ff		cmp #$ff			cmp 	#$FF 						; and we do something if it is = or <> a value.
.34f3	d0 0d		bne $3502			bne  	CompareTrue
.34f5	4c 05 35	jmp $3505			jmp 	CompareFalse
.34f8					CompareLessEq:
.34f8	20 8e 34	jsr $348e			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.34fb	c9 01		cmp #$01			cmp 	#$01 						; and we do something if it is = or <> a value.
.34fd	d0 03		bne $3502			bne  	CompareTrue
.34ff	4c 05 35	jmp $3505			jmp 	CompareFalse
.3502					CompareTrue:
.3502	4c 7b 3d	jmp $3d7b			jmp 	MInt32True
.3505					CompareFalse:
.3505	4c 7f 3d	jmp $3d7f			jmp 	MInt32False

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/dereference.asm

.3508					DereferenceTwo:
.3508	e8		inx				inx
.3509	20 0d 35	jsr $350d			jsr 	DereferenceOne
.350c	ca		dex				dex
.350d					DereferenceOne:
.350d	b5 90		lda $90,x			lda 	esType,x
.350f	10 3d		bpl $354e			bpl 	_DRNotReference 			; is it a reference ? if not, we don't need to do anything
.3511	4a		lsr a				lsr 	a 							; do float dereference if bit 0 set.
.3512	b0 3b		bcs $354f			bcs 	_DRFloatDeReference
.3514	98		tya				tya
.3515	48		pha				pha
.3516	b5 98		lda $98,x			lda 	esInt0,x 					; copy address to temp0
.3518	85 2a		sta $2a				sta 	temp0
.351a	b5 a0		lda $a0,x			lda 	esInt1,x
.351c	85 2b		sta $2b				sta 	temp0+1
.351e	a9 00		lda #$00			lda 	#0 							; clear esInt1..3
.3520	95 a0		sta $a0,x			sta 	esInt1,x
.3522	95 a8		sta $a8,x			sta 	esInt2,x
.3524	95 b0		sta $b0,x			sta 	esInt3,x
.3526	b5 90		lda $90,x			lda 	esType,x 					; get the type byte.
.3528	29 60		and #$60			and 	#$60 						; get string flag ($40) and byte flag ($20)
.352a	0a		asl a				asl 	a 							; now string ($80) byte ($40)
.352b	30 0d		bmi $353a			bmi 	_DeRefString 				; string, 2 bytes only
.352d	d0 11		bne $3540			bne 	_DeRefByte 					; byte 1 byte only
.352f					_DeRefLong:
.352f	a0 03		ldy #$03			ldy 	#3
.3531	b1 2a		lda ($2a),y			lda 	(temp0),y
.3533	95 b0		sta $b0,x			sta 	esInt3,x
.3535	88		dey				dey
.3536	b1 2a		lda ($2a),y			lda 	(temp0),y
.3538	95 a8		sta $a8,x			sta 	esInt2,x
.353a					_DeRefString:
.353a	a0 01		ldy #$01			ldy 	#1
.353c	b1 2a		lda ($2a),y			lda 	(temp0),y
.353e	95 a0		sta $a0,x			sta 	esInt1,x
.3540					_DeRefByte:
.3540	a0 00		ldy #$00			ldy 	#0
.3542	b1 2a		lda ($2a),y			lda 	(temp0),y
.3544	95 98		sta $98,x			sta 	esInt0,x
.3546	b5 90		lda $90,x			lda 	esType,x 					; clear byte and deref bits.
.3548	29 40		and #$40			and 	#$40
.354a	95 90		sta $90,x			sta 	esType,x
.354c	68		pla				pla
.354d	a8		tay				tay
.354e					_DRNotReference
.354e	60		rts				rts
.354f					_DRFloatDereference:
.354f	20 d3 2a	jsr $2ad3			jsr 	TOSToTemp0 					; address to deref in temp0
.3552	8a		txa				txa
.3553	a2 1e		ldx #$1e		ldx	#30
.3555	20 e1 25	jsr $25e1		jsr	floatingpointHandler
.3558	aa		tax				tax
.3559	a9 01		lda #$01			lda 	#$01 						; type to FP (float)
.355b	95 90		sta $90,x			sta 	esType,x
.355d	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/evaluate.asm

.355e					EvaluateLevel:
.355e	e0 08		cpx #$08			cpx 	#StackSize 					; check stack overflow
.3560	b0 1e		bcs $3580			bcs 	_ELStack
.3562	48		pha				pha 								; save precedence level.
.3563	a9 00		lda #$00			lda 	#0 							; zero the current stack level.
.3565	95 98		sta $98,x			sta 	esInt0,x
.3567	95 a0		sta $a0,x			sta 	esInt1,x
.3569	95 a8		sta $a8,x			sta 	esInt2,x
.356b	95 b0		sta $b0,x			sta 	esInt3,x
.356d	95 90		sta $90,x			sta 	esType,x 					; zero the type (integer value)
.356f	b1 28		lda ($28),y			lda 	(codePtr),y	 				; look at first token/character
.3571	30 26		bmi $3599			bmi 	_ELIsToken 					; if -ve could be string, float, or unary function.
.3573	0a		asl a				asl 	a 							; if 00-3F then will now be PL and it's a variable.
.3574	30 0f		bmi $3585			bmi 	_ELIsConstant 				; 40-7F will be -ve and that's an integer constant.
.3576	8a		txa				txa 								; stack level in X
.3577	a2 02		ldx #$02		ldx	#2
.3579	20 91 4d	jsr $4d91		jsr	variableHandler
.357c	aa		tax				tax
.357d	4c c2 35	jmp $35c2			jmp		_ELHasTerm
.3580					_ELStack:
.3580	a2 23		ldx #$23			ldx 	#ErrorID_NumStack
.3582	20 18 15	jsr $1518		jsr	errorHandler
.3585					_ELIsConstant:
.3585	4a		lsr a				lsr 	a 							; get the value back
.3586	29 3f		and #$3f			and 	#$3F 						; force into range 0-63
.3588	95 98		sta $98,x			sta 	esInt0,x 					; and put in LSB.
.358a					_ELCheckNext:
.358a	c8		iny				iny 								; look at next
.358b	b1 28		lda ($28),y			lda 	(codePtr),y
.358d	49 40		eor #$40			eor 	#$40 						; shift around so 40-7F => 00-3F
.358f	c9 40		cmp #$40			cmp 	#$40 						; out of range ?
.3591	b0 2f		bcs $35c2			bcs 	_ELHasTerm 					; done getting the constant.
.3593	20 5b 36	jsr $365b			jsr 	ELShiftByteIn 				; shift byte into position.
.3596	4c 8a 35	jmp $358a			jmp 	_ELCheckNext
.3599					_ELIsToken:
.3599	c9 85		cmp #$85			cmp 	#TOK_STR 					; handle strings.
.359b	f0 0f		beq $35ac			beq 	_ELIsString
.359d	c9 84		cmp #$84			cmp 	#TOK_FPC 					; if no, then check unary.
.359f	d0 5f		bne $3600			bne 	_ELCheckUnary
.35a1	8a		txa				txa 								; put X into A
.35a2	c8		iny				iny 								; skip over the float marker
.35a3	a2 1a		ldx #$1a		ldx	#26
.35a5	20 e1 25	jsr $25e1		jsr	floatingpointHandler
.35a8	aa		tax				tax 								; restore X
.35a9	4c c2 35	jmp $35c2			jmp 	_ELHasTerm
.35ac					_ELIsString:
.35ac	98		tya				tya 								; address of string is codePtr+y+1
.35ad	38		sec				sec
.35ae	65 28		adc $28				adc 	codePtr
.35b0	95 98		sta $98,x			sta 	esInt0,x
.35b2	a5 29		lda $29				lda 	codePtr+1
.35b4	69 00		adc #$00			adc 	#0
.35b6	95 a0		sta $a0,x			sta 	esInt1,x
.35b8	a9 40		lda #$40			lda 	#$40 						; set type to string value
.35ba	95 90		sta $90,x			sta 	esType,x
.35bc	c8		iny				iny 								; skip over string.
.35bd	98		tya				tya
.35be	38		sec				sec									; +1 for the length itself.
.35bf	71 28		adc ($28),y			adc 	(codePtr),y
.35c1	a8		tay				tay 								; and fall through to term loop code.
.35c2					_ELHasTerm:
.35c2	b1 28		lda ($28),y			lda 	(codePtr),y
.35c4	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; check in the correct range for binary tokens.
.35c6	90 04		bcc $35cc			bcc 	_ELPopExit
.35c8	c9 99		cmp #$99			cmp 	#TOK_STRUCTST
.35ca	90 02		bcc $35ce			bcc 	_ELHasBinaryTerm
.35cc					_ELPopExit:
.35cc	68		pla				pla
.35cd					_ELExit:
.35cd	60		rts				rts
.35ce					_ELHasBinaryTerm:
.35ce	84 32		sty $32				sty 	tempShort 					; save position
.35d0	a8		tay				tay 								; use token as an index and get the precedence.
.35d1	b9 03 36	lda $3603,y			lda 	ELBinaryOperatorInfo-TOK_BINARYST,y
.35d4	a4 32		ldy $32				ldy 	tempShort 					; restore Y
.35d6	85 32		sta $32				sta 	tempShort 					; save precedence in memory.
.35d8	68		pla				pla 								; restore current level.
.35d9	c5 32		cmp $32				cmp 	tempShort 					; if current >= operator then exit
.35db	b0 f0		bcs $35cd			bcs 	_ELExit
.35dd	48		pha				pha 								; save current level back on the stack.
.35de	b1 28		lda ($28),y			lda 	(codePtr),y 				; save the binary operator on the stack and skip it.
.35e0	48		pha				pha
.35e1	c8		iny				iny
.35e2	e8		inx				inx 								; calculate the RHS at the operator precedence.
.35e3	a5 32		lda $32				lda 	tempShort
.35e5	20 5e 35	jsr $355e			jsr 	EvaluateLevel
.35e8	ca		dex				dex
.35e9	68		pla				pla 								; get the operator back out.
.35ea					_ELExecuteA:
.35ea	86 32		stx $32				stx 	tempShort 					; upload the vectors. Would be nice to use jmp (aaaa,x)
.35ec	0a		asl a				asl 	a 							; but not practical. May use push/rts later.
.35ed	aa		tax				tax
.35ee	bd 1b 32	lda $321b,x			lda 	Group0Vectors,x
.35f1	85 2a		sta $2a				sta 	temp0
.35f3	bd 1c 32	lda $321c,x			lda 	Group0Vectors+1,x
.35f6	85 2b		sta $2b				sta 	temp0+1
.35f8	a6 32		ldx $32				ldx 	tempShort
.35fa	20 47 36	jsr $3647			jsr 	_ELCallTemp0
.35fd	4c c2 35	jmp $35c2			jmp 	_ELHasTerm 					; and loop back round.
.3600					_ELCheckUnary:
.3600	c8		iny				iny 								; skip over token.
.3601	c9 90		cmp #$90			cmp 	#TKW_MINUS 					; is it - term
.3603	f0 19		beq $361e			beq 	_ELMinus
.3605	c9 97		cmp #$97			cmp 	#TKW_PLING 					; is it ! or ? term
.3607	f0 2c		beq $3635			beq 	_ELIndirect
.3609	c9 98		cmp #$98			cmp 	#TKW_QMARK
.360b	f0 28		beq $3635			beq 	_ELIndirect
.360d	c9 83		cmp #$83			cmp 	#TOK_SHIFT3 				; is it the unary extension.
.360f	f0 39		beq $364a			beq 	_ELExtension
.3611	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST 				; must be TOK_UNARYST ... TOK_TOKENS
.3613	90 04		bcc $3619			bcc 	_ELUSyntax
.3615	c9 c9		cmp #$c9			cmp 	#TOK_TOKENS
.3617	90 d1		bcc $35ea			bcc 	_ELExecuteA 				; if so do that token.
.3619					_ELUSyntax:
.3619	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.361b	20 18 15	jsr $1518		jsr	errorHandler
.361e					_ELMinus:
.361e	20 b0 36	jsr $36b0			jsr 	EvaluateNumericTerm 		; get a number to negate.
.3621	b5 90		lda $90,x			lda 	esType,x 					; is it integer
.3623	f0 0a		beq $362f			beq 	_ELMinusInteger
.3625	8a		txa				txa
.3626	a2 0e		ldx #$0e		ldx	#14
.3628	20 e1 25	jsr $25e1		jsr	floatingpointHandler
.362b	aa		tax				tax
.362c	4c c2 35	jmp $35c2			jmp 	_ELHasTerm
.362f					_ELMinusInteger:
.362f	20 39 3d	jsr $3d39			jsr 	MInt32Negate 				; do int negate
.3632	4c c2 35	jmp $35c2			jmp 	_ELHasTerm
.3635					_ELIndirect:
.3635	48		pha				pha 								; save what we want (TKW_QMARK TWK_PLING)
.3636	20 b9 36	jsr $36b9			jsr 	EvaluateIntegerTerm 		; integer address
.3639	68		pla				pla
.363a	49 97		eor #$97			eor 	#TKW_PLING 					; now $00 if !
.363c	f0 02		beq $3640			beq 	_ELHaveModifier
.363e	a9 20		lda #$20			lda 	#$20 						; now $00 if !, $20 if ?
.3640					_ELHaveModifier:
.3640	09 80		ora #$80			ora 	#$80						; make it the appropriate reference.
.3642	95 90		sta $90,x			sta 	esType,x 					; $80 for ! $A0 for ?
.3644	4c c2 35	jmp $35c2			jmp 	_ELHasTerm
.3647					_ELCallTemp0:
.3647	6c 2a 00	jmp ($002a)			jmp 	(temp0)
.364a					_ELExtension:
.364a	8a		txa				txa 								; stack pos in A
.364b	20 69 18	jsr $1869		jsr	extensionHandler
.364e	aa		tax				tax 								; restore stack
.364f	4c c2 35	jmp $35c2			jmp 	_ELHasTerm
.3652					UnaryParenthesis:
.3652	a9 00		lda #$00			lda 	#0 							; ( is a unary function ....
.3654	20 5e 35	jsr $355e			jsr 	EvaluateLevel
.3657	20 f2 3d	jsr $3df2			jsr 	CheckRightParen 			; check for )
.365a	60		rts				rts
.365b					ELShiftByteIn:
.365b	48		pha				pha 								; save bits to shift in.
.365c	b5 b0		lda $b0,x			lda 	esInt3,x 					; save top most byte
.365e	48		pha				pha
.365f	b5 a8		lda $a8,x			lda 	esInt2,x 					; shift everything left 8 bits
.3661	95 b0		sta $b0,x			sta 	esInt3,x
.3663	b5 a0		lda $a0,x			lda 	esInt1,x
.3665	95 a8		sta $a8,x			sta 	esInt2,x
.3667	b5 98		lda $98,x			lda 	esInt0,x
.3669	95 a0		sta $a0,x			sta 	esInt1,x
.366b	a9 00		lda #$00			lda 	#0
.366d	95 98		sta $98,x			sta 	esInt0,x
.366f	68		pla				pla 								; now A:TOS is a 5 byte register, shift right twice.
.3670	29 03		and #$03			and 	#3 							; only want lower 2 bits
.3672	09 04		ora #$04			ora 	#4  						; set bit 2 - when 1 we are done
.3674					_ELShiftLoop:
.3674	4a		lsr a				lsr 	a
.3675	76 b0		ror $b0,x			ror 	esInt3,x
.3677	76 a8		ror $a8,x			ror 	esInt2,x
.3679	76 a0		ror $a0,x			ror 	esInt1,x
.367b	76 98		ror $98,x			ror 	esInt0,x
.367d	c9 01		cmp #$01			cmp 	#1
.367f	d0 f3		bne $3674			bne 	_ELShiftLoop
.3681	68		pla				pla 								; get original 6 bit value and OR in.
.3682	29 3f		and #$3f			and 	#$3F
.3684	15 98		ora $98,x			ora 	esInt0,x
.3686	95 98		sta $98,x			sta 	esInt0,x
.3688	60		rts				rts
.3689					ELBinaryOperatorInfo:

;******  Processing file: main/evaluate/../../generated/binarystructinfo.inc

>3689	01					.byte	$01			; $86 and
>368a	01					.byte	$01			; $87 or
>368b	01					.byte	$01			; $88 xor
>368c	02					.byte	$02			; $89 >=
>368d	02					.byte	$02			; $8a <=
>368e	02					.byte	$02			; $8b >
>368f	02					.byte	$02			; $8c <
>3690	02					.byte	$02			; $8d =
>3691	02					.byte	$02			; $8e <>
>3692	03					.byte	$03			; $8f +
>3693	03					.byte	$03			; $90 -
>3694	04					.byte	$04			; $91 >>
>3695	04					.byte	$04			; $92 <<
>3696	04					.byte	$04			; $93 *
>3697	04					.byte	$04			; $94 /
>3698	04					.byte	$04			; $95 mod
>3699	05					.byte	$05			; $96 ^
>369a	06					.byte	$06			; $97 !
>369b	06					.byte	$06			; $98 ?
>369c	82					.byte	$82			; $99 repeat
>369d	82					.byte	$82			; $9a while
>369e	82					.byte	$82			; $9b for
>369f	82					.byte	$82			; $9c if
>36a0	82					.byte	$82			; $9d defproc
>36a1	80					.byte	$80			; $9e until
>36a2	80					.byte	$80			; $9f wend
>36a3	80					.byte	$80			; $a0 next
>36a4	80					.byte	$80			; $a1 then
>36a5	80					.byte	$80			; $a2 endif
>36a6	80					.byte	$80			; $a3 endproc

;******  Return to file: main/evaluate/evaluate.asm


;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/support.asm

.36a7					EvaluateTerm:
.36a7	a9 0f		lda #$0f			lda 	#15 						; no binary operator has this high a precedence.
.36a9	20 5e 35	jsr $355e			jsr 	EvaluateLevel
.36ac	20 0d 35	jsr $350d			jsr 	DereferenceOne
.36af	60		rts				rts
.36b0					EvaluateNumericTerm:
.36b0	20 a7 36	jsr $36a7			jsr 	EvaluateTerm
.36b3	b5 90		lda $90,x			lda 	esType,x
.36b5	0a		asl a				asl 	a 							; see if it's a string.
.36b6	30 09		bmi $36c1			bmi 	ENTType
.36b8	60		rts				rts
.36b9					EvaluateIntegerTerm:
.36b9	20 a7 36	jsr $36a7			jsr 	EvaluateTerm
.36bc	b5 90		lda $90,x			lda 	esType,x
.36be	d0 01		bne $36c1			bne 	ENTType
.36c0	60		rts				rts
.36c1					ENTType:
.36c1	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.36c3	20 18 15	jsr $1518		jsr	errorHandler
.36c6					EvaluateRoot:
.36c6	a2 00		ldx #$00			ldx 	#0
.36c8					Evaluate:
.36c8	a9 00		lda #$00			lda 	#0
.36ca	20 5e 35	jsr $355e			jsr 	EvaluateLevel
.36cd	20 0d 35	jsr $350d			jsr 	DereferenceOne
.36d0	60		rts				rts
.36d1					EvaluateNumeric:
.36d1	20 c8 36	jsr $36c8			jsr 	Evaluate
.36d4	b5 90		lda $90,x			lda 	esType,x
.36d6	0a		asl a				asl 	a 							; see if it's a string.
.36d7	30 e8		bmi $36c1			bmi 	ENTType
.36d9	4a		lsr a				lsr 	a 							; shift float flag into carry.
.36da	4a		lsr a				lsr 	a
.36db	60		rts				rts
.36dc					EvaluateString:
.36dc	20 c8 36	jsr $36c8			jsr 	Evaluate
.36df	b5 90		lda $90,x			lda 	esType,x
.36e1	0a		asl a				asl 	a 							; see if it's a string.
.36e2	10 dd		bpl $36c1			bpl 	ENTType
.36e4	60		rts				rts
.36e5					EvaluateRootInteger:
.36e5	a2 00		ldx #$00			ldx 	#0
.36e7					EvaluateInteger:
.36e7	20 c8 36	jsr $36c8			jsr 	Evaluate
.36ea	b5 90		lda $90,x			lda 	esType,x
.36ec	d0 d3		bne $36c1			bne 	ENTType
.36ee	60		rts				rts
.36ef					EvaluateSmallInteger:
.36ef	20 e7 36	jsr $36e7			jsr 	EvaluateInteger
.36f2	b5 a0		lda $a0,x			lda 	esInt1,x
.36f4	15 a8		ora $a8,x			ora 	esInt2,x
.36f6	15 b0		ora $b0,x			ora 	esInt3,x
.36f8	d0 03		bne $36fd			bne 	_ESIValue
.36fa	b5 98		lda $98,x			lda 	esInt0,x
.36fc	60		rts				rts
.36fd					_ESIValue:
.36fd	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.36ff	20 18 15	jsr $1518		jsr	errorHandler
.3702					LinkEvaluate:
.3702	aa		tax				tax
.3703	20 c8 36	jsr $36c8			jsr 	Evaluate
.3706	8a		txa				txa
.3707	60		rts				rts
.3708					LinkEvaluateTerm:
.3708	aa		tax				tax
.3709	20 a7 36	jsr $36a7			jsr 	EvaluateTerm
.370c	8a		txa				txa
.370d	60		rts				rts
.370e					LinkEvaluateInteger:
.370e	aa		tax				tax
.370f	20 e7 36	jsr $36e7			jsr 	EvaluateInteger
.3712	8a		txa				txa
.3713	60		rts				rts
.3714					LinkEvaluateString:
.3714	aa		tax				tax
.3715	20 dc 36	jsr $36dc			jsr 	EvaluateString
.3718	8a		txa				txa
.3719	60		rts				rts
.371a					LinkEvaluateSmallInt:
.371a	aa		tax				tax
.371b	20 ef 36	jsr $36ef			jsr 	EvaluateSmallInteger
.371e	8a		txa				txa
.371f	60		rts				rts
.3720					EvaluateReference:
.3720	ad 9a 36	lda $369a			lda 	ELBinaryOperatorInfo+TKW_PLING-TOK_BINARYST
.3723	38		sec				sec 								; sub 1 to allow a!x b?x to work.
.3724	e9 01		sbc #$01			sbc 	#1
.3726	20 5e 35	jsr $355e			jsr 	EvaluateLevel
.3729	b5 90		lda $90,x			lda 	esType,x
.372b	10 01		bpl $372e			bpl 	_ERFail
.372d	60		rts				rts
.372e					_ERFail:
.372e	a2 0b		ldx #$0b			ldx 	#ErrorID_NoReference
.3730	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary/convert.asm

.3733					Event_Str:
.3733	20 d1 36	jsr $36d1			jsr 	EvaluateNumeric 			; get a number.
.3736	b5 90		lda $90,x			lda 	esType,x 					; is it floating point
.3738	d0 13		bne $374d			bne 	_ESFloat
.373a	20 90 37	jsr $3790			jsr 	ConvertGetBase 				; get base, or default.
.373d	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.373f	85 2a		sta $2a				sta 	temp0
.3741	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.3743	85 2b		sta $2b				sta 	1+(temp0)
.3745	b5 99		lda $99,x			lda 	esInt0+1,x 					; get the base
.3747	20 d5 3c	jsr $3cd5			jsr 	MInt32ToString 				; convert to string.
.374a	4c 5a 37	jmp $375a			jmp 	_ESCloneExit 				; clone and exit.
.374d					_ESFloat:
.374d	20 f2 3d	jsr $3df2			jsr 	CheckRightParen 			; check closing )
.3750	20 d3 2a	jsr $2ad3			jsr 	TOSToTemp0 					; string address in temp0, goes here.
.3753	8a		txa				txa
.3754	a2 16		ldx #$16		ldx	#22
.3756	20 e1 25	jsr $25e1		jsr	floatingpointHandler
.3759	aa		tax				tax
.375a					_ESCloneExit:
.375a	8a		txa				txa
.375b	a2 04		ldx #$04		ldx	#4
.375d	20 2a 41	jsr $412a		jsr	stringHandler
.3760	aa		tax				tax
.3761	60		rts				rts
.3762					UnaryVal:
.3762	38		sec				sec 								; Carry set to return value
.3763	b0 01		bcs $3766			bcs 	ValueMain
.3765					UnaryIsVal:
.3765	18		clc				clc									; Carry clear to return legitimacy
.3766					ValueMain:
.3766	08		php				php 								; save results (CS is value, CC is validation)
.3767	20 dc 36	jsr $36dc			jsr 	EvaluateString
.376a	20 90 37	jsr $3790			jsr 	ConvertGetBase 				; get base, if any.
.376d	98		tya				tya
.376e	48		pha				pha
.376f	20 d3 2a	jsr $2ad3			jsr 	TOSToTemp0 					; string address in temp0, goes here.
.3772	b5 99		lda $99,x			lda 	esInt0+1,x 					; get the base
.3774	29 7f		and #$7f			and 	#$7F 						; ignore the sign bit.
.3776	20 ed 3b	jsr $3bed			jsr 	MInt32FromString 			; convert it back from a string.
.3779	b0 0c		bcs $3787			bcs 	_VMSuccess 					; successfully converted.
.377b	b5 99		lda $99,x			lda 	esInt0+1,x 					; is base the default
.377d	c9 8a		cmp #$8a			cmp 	#$80+10 					; if no, then it is integer only.
.377f	f0 00		beq $3781			beq 	_VMFailed 	 				; so we failed.
.3781					_VMFailed:
.3781	68		pla				pla
.3782	a8		tay				tay
.3783	28		plp				plp
.3784	4c 7f 3d	jmp $3d7f			jmp 	MInt32False 				; return 0 whatever.
.3787					_VMSuccess:
.3787	68		pla				pla
.3788	a8		tay				tay
.3789	28		plp				plp 								; if CS the it was val() so we want the value.
.378a	b0 03		bcs $378f			bcs 	_VMExit
.378c	4c 7b 3d	jmp $3d7b			jmp 	MInt32True 					; otherwise return true as successful.
.378f					_VMExit:
.378f	60		rts				rts
.3790					ConvertGetBase:
.3790	a9 8a		lda #$8a			lda 	#10+$80 					; default base 10 signed.
.3792	95 99		sta $99,x			sta 	esInt0+1,x
.3794	b1 28		lda ($28),y			lda 	(codePtr),y 				; check for ,base)
.3796	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.3798	d0 0e		bne $37a8			bne 	_CGBDone 					; not found, should be )
.379a	e8		inx				inx 								; next level
.379b	c8		iny				iny 								; skip comma.
.379c	20 ef 36	jsr $36ef			jsr 	EvaluateSmallInteger		; evaluate the base.
.379f	ca		dex				dex
.37a0	c9 02		cmp #$02			cmp 	#2 							; base range is 2..16
.37a2	90 08		bcc $37ac			bcc 	_CGBValue 					; (it should work as high as 37)
.37a4	c9 11		cmp #$11			cmp 	#17
.37a6	b0 04		bcs $37ac			bcs 	_CGBValue
.37a8					_CGBDone:
.37a8	20 f2 3d	jsr $3df2			jsr 	CheckRightParen
.37ab	60		rts				rts
.37ac					_CGBValue:
.37ac	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.37ae	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary/event.asm

.37b1					EventFunction:
.37b1	20 20 37	jsr $3720			jsr 	EvaluateReference			; get the variable reference that tracks the event
.37b4	b5 90		lda $90,x			lda 	esType,x
.37b6	c9 80		cmp #$80			cmp 	#$80 						; must be integer reference
.37b8	d0 5b		bne $3815			bne 	_EFType
.37ba	20 ff 3d	jsr $3dff			jsr 	CheckComma
.37bd	e8		inx				inx
.37be	20 e7 36	jsr $36e7			jsr 	EvaluateInteger		 		; get the elapsed time between firing.
.37c1	20 f2 3d	jsr $3df2			jsr 	CheckRightParen 			; finish off with the right bracket
.37c4	ca		dex				dex
.37c5	b5 a0		lda $a0,x			lda 	esInt1,x 					; check max of 32767, we use 16 bit for timers and
.37c7	29 80		and #$80			and 	#$80 						; it doesn't work > 32767
.37c9	15 a8		ora $a8,x			ora 	esInt2,x
.37cb	15 b0		ora $b0,x			ora 	esInt3,x
.37cd	d0 41		bne $3810			bne 	_EFValue
.37cf	98		tya				tya
.37d0	48		pha				pha
.37d1	8a		txa				txa
.37d2	48		pha				pha
.37d3	a2 1c		ldx #$1c		ldx	#28
.37d5	20 f6 14	jsr $14f6		jsr	deviceHandler
.37d8	84 2d		sty $2d				sty 	temp1+1
.37da	85 2c		sta $2c				sta 	temp1
.37dc	68		pla				pla
.37dd	aa		tax				tax
.37de	20 d3 2a	jsr $2ad3			jsr 	TOSToTemp0 					; set temp0 to the address of the event variable
.37e1	a0 03		ldy #$03			ldy 	#3							; if -ve
.37e3	b1 2a		lda ($2a),y			lda 	(temp0),y
.37e5	30 23		bmi $380a			bmi 	_EFFail 	 				; straight out with fail, means "on pause".
.37e7	a0 00		ldy #$00			ldy 	#0 							; is the fire time zero ?
.37e9	b1 2a		lda ($2a),y			lda 	(temp0),y
.37eb	c8		iny				iny
.37ec	11 2a		ora ($2a),y			ora 	(temp0),y
.37ee	f0 17		beq $3807			beq 	_EFInitialise 				; if so, initialise the value but return false.
.37f0	a0 00		ldy #$00			ldy 	#0 							; calculate trigger - timer
.37f2	38		sec				sec
.37f3	b1 2a		lda ($2a),y			lda 	(temp0),y
.37f5	e5 2c		sbc $2c				sbc 	temp1
.37f7	c8		iny				iny
.37f8	b1 2a		lda ($2a),y			lda 	(temp0),y
.37fa	e5 2d		sbc $2d				sbc 	temp1+1
.37fc	10 0c		bpl $380a			bpl 	_EFFail 					; if trigger >= timer then return False
.37fe	20 1a 38	jsr $381a			jsr 	SetEventTimer 				; reset the timer for next time.
.3801	20 7b 3d	jsr $3d7b			jsr	 	MInt32True 					; and treutn true as fired.
.3804	68		pla				pla
.3805	a8		tay				tay
.3806	60		rts				rts
.3807					_EFInitialise:
.3807	20 1a 38	jsr $381a			jsr		SetEventTimer 				; set trigger time to time + elapsed
.380a					_EFFail:
.380a	68		pla				pla
.380b	a8		tay				tay
.380c	20 7f 3d	jsr $3d7f			jsr 	MInt32False
.380f	60		rts				rts
.3810					_EFValue:
.3810	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.3812	20 18 15	jsr $1518		jsr	errorHandler
.3815					_EFType:
.3815	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.3817	20 18 15	jsr $1518		jsr	errorHandler
.381a					SetEventTimer:
.381a	a0 00		ldy #$00			ldy 	#0
.381c	18		clc				clc
.381d	a5 2c		lda $2c				lda 	temp1
.381f	75 99		adc $99,x			adc 	esInt0+1,x
.3821	91 2a		sta ($2a),y			sta		(temp0),y
.3823	c8		iny				iny
.3824	a5 2d		lda $2d				lda 	temp1+1
.3826	75 a1		adc $a1,x			adc 	esInt1+1,x
.3828	91 2a		sta ($2a),y			sta		(temp0),y
.382a	88		dey				dey
.382b	11 2a		ora ($2a),y			ora 	(temp0),y 					; if the result is non zero, exit
.382d	d0 04		bne $3833			bne 	_SETExit 					; zero means initialise.....
.382f	a9 01		lda #$01			lda 	#1 							; timer zero won't work, so make it 1, which is
.3831	91 2a		sta ($2a),y			sta 	(temp0),y 					; near enough.
.3833					_SETExit:
.3833	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary/unary.asm

.3834					UnaryLen:
.3834	20 42 38	jsr $3842			jsr 	ULStart
.3837					ULFinish:
.3837	b1 2a		lda ($2a),y			lda 	(temp0),y 					; get length prefix
.3839	a4 32		ldy $32				ldy 	tempShort 					; get Y back
.383b	20 8e 3d	jsr $3d8e			jsr 	MInt32Set8Bit 				; write it out.
.383e	20 f2 3d	jsr $3df2			jsr 	CheckRightParen
.3841	60		rts				rts
.3842	20 dc 36	jsr $36dc	ULStart:jsr 	EvaluateString
.3845	b5 98		lda $98,x			lda 	esInt0,x 					; copy address of string to temp0
.3847	85 2a		sta $2a				sta 	temp0
.3849	b5 a0		lda $a0,x			lda 	esInt1,x
.384b	85 2b		sta $2b				sta 	temp0+1
.384d	84 32		sty $32				sty 	tempShort 					; get length
.384f	a0 00		ldy #$00			ldy 	#0
.3851	60		rts				rts
.3852					UnaryAsc:
.3852	20 42 38	jsr $3842			jsr 	ULStart 					; same as LEN() get string, save Y, point to length.
.3855	b1 2a		lda ($2a),y			lda 	(temp0),y 					; read length
.3857	c8		iny				iny 		 						; point to first character, we can do LEN code after that
.3858	c9 00		cmp #$00			cmp 	#0
.385a	d0 db		bne $3837			bne 	ULFinish 					; if length = 0 then error : asc("") -> error.
.385c	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.385e	20 18 15	jsr $1518		jsr	errorHandler
.3861					UnaryAbs:
.3861	20 d1 36	jsr $36d1			jsr 	EvaluateNumeric 			; some numeric value
.3864	b0 07		bcs $386d			bcs 	_UAFloat 					; CS then float, so use that function
.3866	20 34 3d	jsr $3d34			jsr 	MInt32Absolute 				; int version
.3869	20 f2 3d	jsr $3df2			jsr 	CheckRightParen
.386c	60		rts				rts
.386d					_UAFloat:
.386d	8a		txa				txa 								; float version
.386e	a2 02		ldx #$02		ldx	#2
.3870	20 e1 25	jsr $25e1		jsr	floatingpointHandler
.3873	aa		tax				tax
.3874	20 f2 3d	jsr $3df2			jsr 	CheckRightParen
.3877	60		rts				rts
.3878					UnarySgn:
.3878	20 d1 36	jsr $36d1			jsr 	EvaluateNumeric 			; same as above but sign of value
.387b	b0 07		bcs $3884			bcs 	_USFloat
.387d	20 6c 3d	jsr $3d6c			jsr 	MInt32Sign
.3880	20 f2 3d	jsr $3df2			jsr 	CheckRightParen
.3883	60		rts				rts
.3884					_USFloat:
.3884	8a		txa				txa
.3885	a2 10		ldx #$10		ldx	#16
.3887	20 e1 25	jsr $25e1		jsr	floatingpointHandler
.388a	aa		tax				tax
.388b	20 f2 3d	jsr $3df2			jsr 	CheckRightParen
.388e	60		rts				rts
.388f					UnaryPeek:
.388f	20 bb 38	jsr $38bb			jsr 	PDLCode 					; each has common setup code put reads 1,2 or 4 bytes
.3892	4c af 38	jmp $38af			jmp 	PDLByte0
.3895					UnaryDeek:
.3895	20 bb 38	jsr $38bb			jsr 	PDLCode
.3898	4c a9 38	jmp $38a9			jmp 	PDLByte1
.389b					UnaryLeek:
.389b	20 bb 38	jsr $38bb			jsr 	PDLCode
.389e	a0 03		ldy #$03			ldy 	#3							; read 3-2
.38a0	b1 2a		lda ($2a),y			lda 	(temp0),y
.38a2	95 b0		sta $b0,x			sta 	esInt3,x
.38a4	88		dey				dey
.38a5	b1 2a		lda ($2a),y			lda 	(temp0),y
.38a7	95 a8		sta $a8,x			sta 	esInt2,x
.38a9					PDLByte1:
.38a9	a0 01		ldy #$01			ldy 	#1
.38ab	b1 2a		lda ($2a),y			lda 	(temp0),y
.38ad	95 a0		sta $a0,x			sta 	esInt1,x
.38af					PDLByte0:
.38af	a0 00		ldy #$00			ldy 	#0
.38b1	b1 2a		lda ($2a),y			lda 	(temp0),y
.38b3	95 98		sta $98,x			sta 	esInt0,x
.38b5	a4 32		ldy $32				ldy 	tempShort 					; restore Y
.38b7	20 f2 3d	jsr $3df2			jsr 	CheckRightParen 			; check right and return
.38ba	60		rts				rts
.38bb					PDLCode:
.38bb	20 e7 36	jsr $36e7			jsr 	EvaluateInteger 			; some address
.38be	b5 98		lda $98,x			lda 	esInt0,x 					; copy address of string to temp0
.38c0	85 2a		sta $2a				sta 	temp0
.38c2	b5 a0		lda $a0,x			lda 	esInt1,x
.38c4	85 2b		sta $2b				sta 	temp0+1
.38c6	a9 00		lda #$00			lda 	#0 							; zero upper 3 bytes of result, type okay.
.38c8	95 a0		sta $a0,x			sta 	esInt1,x 					; PEEK needs upper 3 cleared
.38ca	95 a8		sta $a8,x			sta 	esInt2,x
.38cc	95 b0		sta $b0,x			sta 	esInt3,x
.38ce	84 32		sty $32				sty 	tempShort 					; save Y
.38d0	60		rts				rts
.38d1					Unary_Random:
.38d1	20 af 3d	jsr $3daf			jsr 	MInt32Random 				; generate random number.
.38d4	b1 28		lda ($28),y			lda 	(codePtr),y 				; check followed by )
.38d6	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.38d8	f0 08		beq $38e2			beq 	_URExit
.38da	e8		inx				inx 								; load range 0..r-1 into +1
.38db	20 e7 36	jsr $36e7			jsr 	EvaluateInteger
.38de	ca		dex				dex
.38df	20 d2 3b	jsr $3bd2			jsr 	MInt32Modulus 				; calculate random % modulus
.38e2					_URExit:
.38e2	20 f2 3d	jsr $3df2			jsr 	CheckRightParen 			; check right and return
.38e5	60		rts				rts
.38e6					Unary_Min:
.38e6	a9 01		lda #$01			lda 	#1 							; c1 cmp c2 needs to be > e.g. c1 > c2
.38e8	d0 02		bne $38ec			bne 	UnaryMBody
.38ea					Unary_Max:
.38ea	a9 ff		lda #$ff			lda 	#$FF 						; c1 cmp c2 needs to be < e.g. c1 < c2
.38ec					UnaryMBody:
.38ec	48		pha				pha 								; save comparator on stack, shows min or max
.38ed	20 c8 36	jsr $36c8			jsr 	Evaluate 					; get the first thing to check
.38f0					_UnaryMLoop:
.38f0	b1 28		lda ($28),y			lda 	(codePtr),y 				; found ), indicates end.
.38f2	c8		iny				iny
.38f3	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.38f5	f0 09		beq $3900			beq 	_UnaryMExit
.38f7	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; found , indicates more.
.38f9	f0 07		beq $3902			beq 	_UnaryMCompare
.38fb	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.38fd	20 18 15	jsr $1518		jsr	errorHandler
.3900					_UnaryMExit:
.3900	68		pla				pla 								; done so throw comparator and return.
.3901	60		rts				rts
.3902					_UnaryMCompare:
.3902	e8		inx				inx 								; get the 2nd thing to evaluate
.3903	20 c8 36	jsr $36c8			jsr 	Evaluate
.3906	ca		dex				dex
.3907	20 8e 34	jsr $348e			jsr 	PerformComparison 			; this is part of evaluate/compare.asm
.390a	85 32		sta $32				sta 	tempShort 					; save result
.390c	68		pla				pla 								; get what we need
.390d	48		pha				pha
.390e	c5 32		cmp $32				cmp 	tempShort 					; did we get it
.3910	d0 de		bne $38f0			bne 	_UnaryMLoop 				; no, try another value.
.3912	20 7f 3d	jsr $3d7f			jsr 	MInt32False 				; promote 2nd to 1st.
.3915	20 63 3c	jsr $3c63			jsr 	MInt32Add
.3918	4c f0 38	jmp $38f0			jmp 	_UnaryMLoop
.391b					Unary_Page:
.391b	20 7f 3d	jsr $3d7f			jsr 	MInt32False 				; zero
.391e	ad c8 0a	lda $0ac8			lda 	basePage 					; copy base page address in.
.3921	95 98		sta $98,x			sta 	esInt0,x
.3923	ad c9 0a	lda $0ac9			lda 	basePage+1
.3926	95 a0		sta $a0,x			sta 	esInt1,x
.3928	60		rts				rts
.3929					UnaryReference:
.3929	a9 0f		lda #$0f			lda 	#15
.392b	20 5e 35	jsr $355e			jsr 	EvaluateLevel 				; evaluate term and don't deference.
.392e	b5 90		lda $90,x			lda 	esType,x 					; check it's a reference.
.3930	10 05		bpl $3937			bpl 	UType
.3932	a9 00		lda #$00			lda 	#0 							; make it an integer
.3934	95 90		sta $90,x			sta 	esType,x
.3936	60		rts				rts
.3937					UType:
.3937	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.3939	20 18 15	jsr $1518		jsr	errorHandler
.393c					UnaryHexMarker:
.393c	4c b9 36	jmp $36b9			jmp 	EvaluateIntegerTerm
.393f					UnaryComplement:
.393f	20 b9 36	jsr $36b9			jsr 	EvaluateIntegerTerm
.3942	20 53 3d	jsr $3d53			jsr 	MInt32Not
.3945	60		rts				rts
.3946					UnaryIntToFloat:
.3946	20 d1 36	jsr $36d1			jsr 	EvaluateNumeric				; some number
.3949	b5 90		lda $90,x			lda 	esType,x 					; if float already, exit
.394b	d0 0b		bne $3958			bne 	_UIFExit
.394d	8a		txa				txa 								; convert and set type
.394e	a2 1c		ldx #$1c		ldx	#28
.3950	20 e1 25	jsr $25e1		jsr	floatingpointHandler
.3953	aa		tax				tax
.3954	a9 01		lda #$01			lda 	#1
.3956	95 90		sta $90,x			sta 	esType,x
.3958					_UIFExit:
.3958	60		rts				rts
.3959					UnaryFloatToInt:
.3959	20 d1 36	jsr $36d1			jsr 	EvaluateNumeric 			; the number
.395c	b5 90		lda $90,x			lda 	esType,x 					; if int already exit
.395e	f0 0b		beq $396b			beq 	_UFIExit
.3960	8a		txa				txa 								; convert to int
.3961	a2 14		ldx #$14		ldx	#20
.3963	20 e1 25	jsr $25e1		jsr	floatingpointHandler
.3966	aa		tax				tax
.3967	a9 00		lda #$00			lda 	#0 							; set type
.3969	95 90		sta $90,x			sta 	esType,x
.396b					_UFIExit:
.396b	60		rts				rts
.396c					UnaryAlloc:
.396c	e8		inx				inx 								; evaluate memory required
.396d	20 e7 36	jsr $36e7			jsr 	EvaluateInteger
.3970	20 f2 3d	jsr $3df2			jsr 	CheckRightParen
.3973	ca		dex				dex
.3974	b5 a9		lda $a9,x			lda 	esInt2+1,x 					; check at least in 64k range.
.3976	15 b1		ora $b1,x			ora 	esInt3+1,x
.3978	d0 1d		bne $3997			bne 	_UABadValue
.397a	20 7f 3d	jsr $3d7f			jsr 	MInt32False					; zero return.
.397d	a5 36		lda $36				lda 	lowMemory+1 				; copy low memory in
.397f	95 a0		sta $a0,x			sta 	esInt1,x
.3981	a5 35		lda $35				lda 	lowMemory
.3983	95 98		sta $98,x			sta 	esInt0,x
.3985	18		clc				clc 								; add alloc required.
.3986	75 99		adc $99,x			adc 	esInt0+1,x
.3988	85 35		sta $35				sta 	lowMemory
.398a	a5 36		lda $36				lda 	lowMemory+1
.398c	75 a1		adc $a1,x			adc 	esInt1+1,x
.398e	85 36		sta $36				sta 	lowMemory+1
.3990	b0 05		bcs $3997			bcs		_UABadValue 				; overflow definitely bad.
.3992	c5 34		cmp $34				cmp 	highMemory+1
.3994	b0 01		bcs $3997			bcs 	_UABadValue 				; out of memory bad.
.3996	60		rts				rts
.3997					_UABadValue:
.3997	a2 22		ldx #$22			ldx 	#ErrorID_Memory
.3999	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary/unary2.asm

.399c					UnaryTimer:
.399c	20 f2 3d	jsr $3df2			jsr 	CheckRightParen 			; no parameters
.399f	98		tya				tya
.39a0	48		pha				pha
.39a1	20 a6 3d	jsr $3da6			jsr 	MInt32Zero 					; zero result
.39a4	86 2a		stx $2a				stx 	temp0 						; returning in YA so can't use .pshx
.39a6	a2 1c		ldx #$1c		ldx	#28
.39a8	20 f6 14	jsr $14f6		jsr	deviceHandler
.39ab	a6 2a		ldx $2a				ldx 	temp0						; restore X and update 16 bit result
.39ad	95 98		sta $98,x			sta 	esInt0,x
.39af	98		tya				tya
.39b0	95 a0		sta $a0,x			sta 	esInt1,x
.39b2	68		pla				pla
.39b3	a8		tay				tay
.39b4	60		rts				rts
.39b5					UnaryInkey:
.39b5	20 f2 3d	jsr $3df2			jsr 	CheckRightParen
.39b8	86 2a		stx $2a				stx 	temp0
.39ba	a2 0a		ldx #$0a		ldx	#10
.39bc	20 f6 14	jsr $14f6		jsr	deviceHandler
.39bf	a6 2a		ldx $2a				ldx 	temp0
.39c1	20 8e 3d	jsr $3d8e			jsr 	MInt32Set8Bit
.39c4	60		rts				rts
.39c5					UnaryGet:
.39c5	20 f2 3d	jsr $3df2			jsr 	CheckRightParen
.39c8	86 2a		stx $2a				stx 	temp0
.39ca					_UGLoop:
.39ca	a2 02		ldx #$02		ldx	#2
.39cc	20 f6 14	jsr $14f6		jsr	deviceHandler
.39cf	a2 0a		ldx #$0a		ldx	#10
.39d1	20 f6 14	jsr $14f6		jsr	deviceHandler
.39d4	c9 00		cmp #$00			cmp 	#0
.39d6	f0 f2		beq $39ca			beq 	_UGLoop
.39d8	a6 2a		ldx $2a				ldx 	temp0
.39da	20 8e 3d	jsr $3d8e			jsr 	MInt32Set8Bit
.39dd	60		rts				rts
.39de					UnaryGetString:
.39de	20 c5 39	jsr $39c5			jsr 	UnaryGet
.39e1					UGSDoChr:
.39e1	4c 32 3a	jmp $3a32			jmp 	ChrCode
.39e4					UnaryInkeyString:
.39e4	20 b5 39	jsr $39b5			jsr 	UnaryInkey
.39e7	b5 98		lda $98,x			lda 	esInt0,x
.39e9	d0 f6		bne $39e1			bne 	UGSDoChr
.39eb	8a		txa				txa
.39ec	a2 08		ldx #$08		ldx	#8
.39ee	20 2a 41	jsr $412a		jsr	stringHandler
.39f1	aa		tax				tax
.39f2	60		rts				rts
.39f3					UnarySys:
.39f3	20 e7 36	jsr $36e7			jsr 	EvaluateInteger 				; get the address
.39f6	20 f2 3d	jsr $3df2			jsr 	CheckRightParen
.39f9	20 d3 2a	jsr $2ad3			jsr 	TOSToTemp0 						; copy call address to temp0
.39fc	8a		txa				txa
.39fd	48		pha				pha
.39fe	98		tya				tya
.39ff	48		pha				pha
.3a00	ad 00 0a	lda $0a00			lda 	("A"-"A")*4+SingleLetterVar 	; load AXY
.3a03	ae 5c 0a	ldx $0a5c			ldx 	("X"-"A")*4+SingleLetterVar
.3a06	ac 60 0a	ldy $0a60			ldy 	("Y"-"A")*4+SingleLetterVar
.3a09	20 18 3a	jsr $3a18			jsr 	_CallTemp0
.3a0c	85 32		sta $32				sta 	tempShort 						; restore YX
.3a0e	68		pla				pla
.3a0f	a8		tay				tay
.3a10	68		pla				pla
.3a11	aa		tax				tax
.3a12	a5 32		lda $32				lda 	tempShort
.3a14	20 8e 3d	jsr $3d8e			jsr 	MInt32Set8Bit 					; return result.
.3a17	60		rts				rts
.3a18					_CallTemp0:
.3a18	6c 2a 00	jmp ($002a)			jmp 	(temp0)
.3a1b					UnaryMem:
.3a1b	20 7f 3d	jsr $3d7f			jsr 	MInt32False 					; set to false (e.g. 0)
.3a1e	38		sec				sec
.3a1f	a5 33		lda $33				lda 	highMemory 						; calculate value
.3a21	e5 35		sbc $35				sbc 	lowMemory
.3a23	95 98		sta $98,x			sta 	esInt0,x
.3a25	a5 34		lda $34				lda 	highMemory+1
.3a27	e5 36		sbc $36				sbc 	lowMemory+1
.3a29	95 a0		sta $a0,x			sta 	esInt1,x
.3a2b	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary/unarystr.asm

.3a2c					ExecChr:
.3a2c	20 ef 36	jsr $36ef			jsr 	EvaluateSmallInteger		; character number 0-255
.3a2f	20 f2 3d	jsr $3df2			jsr 	CheckRightParen				; right bracket
.3a32					ChrCode:
.3a32	98		tya				tya
.3a33	48		pha				pha
.3a34	8a		txa				txa 								; A = stack
.3a35	b4 98		ldy $98,x			ldy 	esInt0,x					; Y = character
.3a37	a2 02		ldx #$02		ldx	#2
.3a39	20 2a 41	jsr $412a		jsr	stringHandler
.3a3c	aa		tax				tax 								; X = stack
.3a3d	68		pla				pla
.3a3e	a8		tay				tay
.3a3f	60		rts				rts
.3a40					ExecLower:
.3a40	38		sec				sec 								; set carry is lower
.3a41	b0 01		bcs $3a44			bcs 	ExecUpperLower
.3a43					ExecUpper:
.3a43	18		clc				clc 								; clear carry is upper
.3a44					ExecUpperLower:
.3a44	08		php				php 								; save carry
.3a45	20 dc 36	jsr $36dc			jsr 	EvaluateString 				; string to stack,X
.3a48	20 f2 3d	jsr $3df2			jsr 	CheckRightParen 			; check closing right bracket.
.3a4b	28		plp				plp 								; restore carry, save Y
.3a4c	98		tya				tya
.3a4d	48		pha				pha
.3a4e	a9 00		lda #$00			lda 	#0 							; A zero if upper, 1 if lower.
.3a50	2a		rol a				rol 	a
.3a51	a8		tay				tay 								; now in Y
.3a52	8a		txa				txa 								; do the substring and exit.
.3a53	a2 0c		ldx #$0c		ldx	#12
.3a55	20 2a 41	jsr $412a		jsr	stringHandler
.3a58	aa		tax				tax
.3a59	68		pla				pla
.3a5a	a8		tay				tay
.3a5b	60		rts				rts
.3a5c					ExecLeft:
.3a5c	20 dc 36	jsr $36dc			jsr 	EvaluateString 				; string to stack,X
.3a5f	20 ff 3d	jsr $3dff			jsr 	CheckComma
.3a62	e8		inx				inx
.3a63	a9 01		lda #$01			lda 	#1 							; 1 for 2nd parameter.
.3a65	20 8e 3d	jsr $3d8e			jsr 	MInt32Set8Bit
.3a68	e8		inx				inx
.3a69	20 ef 36	jsr $36ef			jsr 	EvaluateSmallInteger 		; smallint 3rd parameter
.3a6c					ExecSubstring:
.3a6c	ca		dex				dex 								; fix up X
.3a6d	ca		dex				dex
.3a6e	20 f2 3d	jsr $3df2			jsr 	CheckRightParen 			; check closing right bracket.
.3a71	8a		txa				txa 								; do the substring and exit.
.3a72	a2 0e		ldx #$0e		ldx	#14
.3a74	20 2a 41	jsr $412a		jsr	stringHandler
.3a77	aa		tax				tax
.3a78	60		rts				rts
.3a79					ExecMid:
.3a79	20 dc 36	jsr $36dc			jsr 	EvaluateString 				; string to stack,X
.3a7c	20 ff 3d	jsr $3dff			jsr 	CheckComma
.3a7f	e8		inx				inx
.3a80	20 ef 36	jsr $36ef			jsr 	EvaluateSmallInteger 		; smallint 2nd parameter
.3a83	c9 00		cmp #$00			cmp 	#0
.3a85	f0 15		beq $3a9c			beq 	_EMValue
.3a87	e8		inx				inx
.3a88	a9 ff		lda #$ff			lda 	#255 						; 255 default for 3nd parameter - this is optional.
.3a8a	20 8e 3d	jsr $3d8e			jsr 	MInt32Set8Bit
.3a8d	b1 28		lda ($28),y			lda 	(codePtr),y 				; is there a ) next
.3a8f	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN 				; if so, just MID$(a$,2)
.3a91	f0 d9		beq $3a6c			beq 	ExecSubString
.3a93	20 ff 3d	jsr $3dff			jsr 	CheckComma
.3a96	20 ef 36	jsr $36ef			jsr 	EvaluateSmallInteger 		; smallint 2nd parameter
.3a99	4c 6c 3a	jmp $3a6c			jmp 	ExecSubString
.3a9c					_EMValue:
.3a9c	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.3a9e	20 18 15	jsr $1518		jsr	errorHandler
.3aa1					ExecRight:
.3aa1	20 dc 36	jsr $36dc			jsr 	EvaluateString 				; string to stack,X
.3aa4	20 ff 3d	jsr $3dff			jsr 	CheckComma
.3aa7	e8		inx				inx
.3aa8	20 ef 36	jsr $36ef			jsr 	EvaluateSmallInteger 		; smallint 2nd parameter.
.3aab	ca		dex				dex
.3aac	98		tya				tya
.3aad	48		pha				pha
.3aae	b5 98		lda $98,x			lda 	esInt0,x 					; copy address of string to temp0
.3ab0	85 2a		sta $2a				sta 	temp0
.3ab2	b5 a0		lda $a0,x			lda 	esInt1,x
.3ab4	85 2b		sta $2b				sta 	temp0+1
.3ab6	a0 00		ldy #$00			ldy 	#0 							; point to length
.3ab8	b1 2a		lda ($2a),y			lda 	(temp0),y 					; get the length.
.3aba	18		clc				clc 								; add 1.
.3abb	69 01		adc #$01			adc 	#1
.3abd	38		sec				sec
.3abe	f5 99		sbc $99,x			sbc 	esInt0+1,x  				; subtract right count.
.3ac0	f0 02		beq $3ac4			beq		_ERMake1 					; if zero, make it 1.
.3ac2	b0 02		bcs $3ac6			bcs		_EROkay
.3ac4					_ERMake1:
.3ac4	a9 01		lda #$01			lda 	#1 							; start position.
.3ac6					_EROkay:
.3ac6	e8		inx				inx 								; set start pos.
.3ac7	95 98		sta $98,x			sta 	esInt0,x
.3ac9	e8		inx				inx
.3aca	a9 ff		lda #$ff			lda 	#255 						; 255 default for 3nd parameter.
.3acc	20 8e 3d	jsr $3d8e			jsr 	MInt32Set8Bit
.3acf	68		pla				pla
.3ad0	a8		tay				tay
.3ad1	4c 6c 3a	jmp $3a6c			jmp 	ExecSubString 				; do the substring code.

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32binary.asm

.3ad4					MInt32And:
.3ad4	b5 98		lda $98,x			lda 	esInt0,x
.3ad6	35 99		and $99,x			and 	esInt0+1,x
.3ad8	95 98		sta $98,x			sta 	esInt0,x
.3ada	b5 a0		lda $a0,x			lda 	esInt1,x
.3adc	35 a1		and $a1,x			and 	esInt1+1,x
.3ade	95 a0		sta $a0,x			sta 	esInt1,x
.3ae0	b5 a8		lda $a8,x			lda 	esInt2,x
.3ae2	35 a9		and $a9,x			and 	esInt2+1,x
.3ae4	95 a8		sta $a8,x			sta 	esInt2,x
.3ae6	b5 b0		lda $b0,x			lda 	esInt3,x
.3ae8	35 b1		and $b1,x			and 	esInt3+1,x
.3aea	95 b0		sta $b0,x			sta 	esInt3,x
.3aec	60		rts				rts
.3aed					MInt32Or:
.3aed	b5 98		lda $98,x			lda 	esInt0,x
.3aef	15 99		ora $99,x			ora 	esInt0+1,x
.3af1	95 98		sta $98,x			sta 	esInt0,x
.3af3	b5 a0		lda $a0,x			lda 	esInt1,x
.3af5	15 a1		ora $a1,x			ora 	esInt1+1,x
.3af7	95 a0		sta $a0,x			sta 	esInt1,x
.3af9	b5 a8		lda $a8,x			lda 	esInt2,x
.3afb	15 a9		ora $a9,x			ora 	esInt2+1,x
.3afd	95 a8		sta $a8,x			sta 	esInt2,x
.3aff	b5 b0		lda $b0,x			lda 	esInt3,x
.3b01	15 b1		ora $b1,x			ora 	esInt3+1,x
.3b03	95 b0		sta $b0,x			sta 	esInt3,x
.3b05	60		rts				rts
.3b06					MInt32Xor:
.3b06	b5 98		lda $98,x			lda 	esInt0,x
.3b08	55 99		eor $99,x			eor 	esInt0+1,x
.3b0a	95 98		sta $98,x			sta 	esInt0,x
.3b0c	b5 a0		lda $a0,x			lda 	esInt1,x
.3b0e	55 a1		eor $a1,x			eor 	esInt1+1,x
.3b10	95 a0		sta $a0,x			sta 	esInt1,x
.3b12	b5 a8		lda $a8,x			lda 	esInt2,x
.3b14	55 a9		eor $a9,x			eor 	esInt2+1,x
.3b16	95 a8		sta $a8,x			sta 	esInt2,x
.3b18	b5 b0		lda $b0,x			lda 	esInt3,x
.3b1a	55 b1		eor $b1,x			eor 	esInt3+1,x
.3b1c	95 b0		sta $b0,x			sta 	esInt3,x
.3b1e	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32compare.asm

.3b1f					MInt32Compare:
.3b1f	b5 98		lda $98,x			lda 	esInt0,x 					; equality check first.
.3b21	d5 99		cmp $99,x			cmp 	esInt0+1,x
.3b23	d0 13		bne $3b38			bne 	MInt32Compare2
.3b25	b5 a0		lda $a0,x			lda 	esInt1,x
.3b27	d5 a1		cmp $a1,x			cmp 	esInt1+1,x
.3b29	d0 0d		bne $3b38			bne 	MInt32Compare2
.3b2b	b5 a8		lda $a8,x			lda 	esInt2,x
.3b2d	d5 a9		cmp $a9,x			cmp 	esInt2+1,x
.3b2f	d0 07		bne $3b38			bne 	MInt32Compare2
.3b31	b5 b0		lda $b0,x			lda 	esInt3,x
.3b33	55 b1		eor $b1,x			eor 	esInt3+1,x 					; EOR will return 0 if the same.
.3b35	d0 01		bne $3b38			bne 	MInt32Compare2
.3b37	60		rts				rts
.3b38					MInt32Compare2:
.3b38	b5 98		lda $98,x			lda		esInt0,x 					; unsigned 32 bit comparison.
.3b3a	d5 99		cmp $99,x			cmp 	esInt0+1,x
.3b3c	b5 a0		lda $a0,x			lda		esInt1,x
.3b3e	f5 a1		sbc $a1,x			sbc 	esInt1+1,x
.3b40	b5 a8		lda $a8,x			lda		esInt2,x
.3b42	f5 a9		sbc $a9,x			sbc 	esInt2+1,x
.3b44	b5 b0		lda $b0,x			lda		esInt3,x
.3b46	f5 b1		sbc $b1,x			sbc 	esInt3+1,x
.3b48	50 02		bvc $3b4c			bvc 	_I32LNoOverflow 			; make it signed 32 bit comparison
.3b4a	49 80		eor #$80			eor 	#$80
.3b4c					_I32LNoOverflow
.3b4c	30 03		bmi $3b51			bmi 	MInt32CLess					; if -ve then return $FF
.3b4e	a9 01		lda #$01			lda 	#$01						; else return $01
.3b50	60		rts				rts
.3b51					MInt32CLess:
.3b51	a9 ff		lda #$ff			lda 	#$FF
.3b53	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32divide.asm

.3b54					MInt32SDivide:
.3b54	98		tya				tya  								; save Y, which is the count of negations
.3b55	48		pha				pha
.3b56	a0 00		ldy #$00			ldy 	#0 							; zero count
.3b58	20 70 3b	jsr $3b70			jsr 	_MInt32SRemSign 			; unsign TOS
.3b5b	e8		inx				inx 								; unsign TOS+1
.3b5c	20 70 3b	jsr $3b70			jsr 	_MInt32SRemSign
.3b5f	ca		dex				dex
.3b60	98		tya				tya 								; save sign count on stack
.3b61	48		pha				pha
.3b62	20 79 3b	jsr $3b79			jsr 	MInt32UDivide 				; unsigned division
.3b65	68		pla				pla 								; get sign count back
.3b66	29 01		and #$01			and 	#1 							; if it is odd, then negate result
.3b68	f0 03		beq $3b6d			beq 	_I32SNoNeg
.3b6a	20 39 3d	jsr $3d39			jsr 	MInt32Negate
.3b6d					_I32SNoNeg:
.3b6d	68		pla				pla 								; restoe Y and exit
.3b6e	a8		tay				tay
.3b6f	60		rts				rts
.3b70					_MInt32SRemSign:
.3b70	b5 b0		lda $b0,x			lda 	esInt3,x 					; is it -ve
.3b72	10 04		bpl $3b78			bpl 	_MInt32SRSExit
.3b74	c8		iny				iny 								; increment the sign count
.3b75	20 39 3d	jsr $3d39			jsr 	MInt32Negate 				; negate the value.
.3b78					_MInt32SRSExit:
.3b78	60		rts				rts
.3b79					MInt32UDivide:
.3b79	b5 99		lda $99,x			lda 	esInt0+1,x 					; check for division by zero
.3b7b	15 a1		ora $a1,x			ora 	esInt1+1,x
.3b7d	15 a2		ora $a2,x			ora 	esInt1+2,x
.3b7f	15 a3		ora $a3,x			ora 	esInt1+3,x
.3b81	f0 4a		beq $3bcd			beq 	_MInt32DZero
.3b83	e8		inx				inx 								; clear A
.3b84	e8		inx				inx
.3b85	20 7f 3d	jsr $3d7f			jsr 	MInt32False
.3b88	ca		dex				dex
.3b89	ca		dex				dex
.3b8a	98		tya				tya 								; save Y on the stack
.3b8b	48		pha				pha
.3b8c	a0 20		ldy #$20			ldy 	#32 						; number of division passes
.3b8e					_MInt32UDLoop:
.3b8e	16 98		asl $98,x			asl 	esInt0,x					; shift QA left. First Q
.3b90	36 a0		rol $a0,x			rol 	esInt1,x
.3b92	36 a8		rol $a8,x			rol 	esInt2,x
.3b94	36 b0		rol $b0,x			rol 	esInt3,x
.3b96	36 9a		rol $9a,x			rol 	esInt0+2,x 					; then A.
.3b98	36 a2		rol $a2,x			rol 	esInt1+2,x
.3b9a	36 aa		rol $aa,x			rol 	esInt2+2,x
.3b9c	36 b2		rol $b2,x			rol 	esInt3+2,x
.3b9e	38		sec				sec 								; calculate A-M saving result on the stack
.3b9f	b5 9a		lda $9a,x			lda 	esInt0+2,x
.3ba1	f5 99		sbc $99,x			sbc 	esInt0+1,x
.3ba3	48		pha				pha
.3ba4	b5 a2		lda $a2,x			lda 	esInt1+2,x
.3ba6	f5 a1		sbc $a1,x			sbc 	esInt1+1,x
.3ba8	48		pha				pha
.3ba9	b5 aa		lda $aa,x			lda 	esInt2+2,x
.3bab	f5 a9		sbc $a9,x			sbc 	esInt2+1,x
.3bad	48		pha				pha
.3bae	b5 b2		lda $b2,x			lda 	esInt3+2,x
.3bb0	f5 b1		sbc $b1,x			sbc 	esInt3+1,x
.3bb2	90 10		bcc $3bc4			bcc		_MInt32NoSubtract 			; if A < M (e.g. carry clear) then reject this.
.3bb4	95 b2		sta $b2,x			sta 	esInt3+2,x 					; write result back to A
.3bb6	68		pla				pla
.3bb7	95 aa		sta $aa,x			sta 	esInt2+2,x
.3bb9	68		pla				pla
.3bba	95 a2		sta $a2,x			sta 	esInt1+2,x
.3bbc	68		pla				pla
.3bbd	95 9a		sta $9a,x			sta 	esInt0+2,x
.3bbf	f6 98		inc $98,x			inc 	esInt0,x 					; sets bit 0 of Q - it was shifted left previously.
.3bc1	4c c7 3b	jmp $3bc7			jmp 	_MInt32Next 					; do the next iteration
.3bc4					_MInt32NoSubtract:
.3bc4	68		pla				pla
.3bc5	68		pla				pla
.3bc6	68		pla				pla
.3bc7					_MInt32Next:
.3bc7	88		dey				dey 								; do this 32 times.
.3bc8	d0 c4		bne $3b8e			bne 	_MInt32UDLoop
.3bca	68		pla				pla 								; restore Y and exit
.3bcb	a8		tay				tay
.3bcc	60		rts				rts
.3bcd					_MInt32DZero:
.3bcd	a2 05		ldx #$05			ldx 	#ErrorID_DivZero
.3bcf	20 18 15	jsr $1518		jsr	errorHandler
.3bd2					MInt32Modulus:
.3bd2	20 79 3b	jsr $3b79			jsr 	MInt32UDivide 				; do the division.
.3bd5	b5 b2		lda $b2,x			lda 	esInt3+2,x 					; copy 2nd on stack (the remainder) to the top.
.3bd7	95 b0		sta $b0,x			sta 	esInt3,x
.3bd9	b5 aa		lda $aa,x			lda 	esInt2+2,x
.3bdb	95 a8		sta $a8,x			sta 	esInt2,x
.3bdd	b5 a2		lda $a2,x			lda 	esInt1+2,x
.3bdf	95 a0		sta $a0,x			sta 	esInt1,x
.3be1	b5 9a		lda $9a,x			lda 	esInt0+2,x
.3be3	95 98		sta $98,x			sta 	esInt0,x
.3be5	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32fromstr.asm

.0d4e					fs32Length:
>0d4e							.fill 	1
.3be6					LinkInt32FromString:
.3be6	aa		tax				tax
.3be7	98		tya				tya
.3be8	20 ed 3b	jsr $3bed			jsr 	MInt32FromString
.3beb	8a		txa				txa
.3bec	60		rts				rts
.3bed					MInt32FromString:
.3bed	85 32		sta $32				sta 	tempShort 					; save base
.3bef	98		tya				tya
.3bf0	48		pha				pha
.3bf1	a0 00		ldy #$00			ldy 	#0 							; get length of string to convert
.3bf3	b1 2a		lda ($2a),y			lda 	(temp0),y
.3bf5	8d 4e 0d	sta $0d4e			sta 	fs32Length
.3bf8	f0 65		beq $3c5f			beq 	_I32FSFail2					; fail if length zero.
.3bfa	a0 01		ldy #$01			ldy 	#1 							; set index into string being read
.3bfc	b1 2a		lda ($2a),y			lda 	(temp0),y 					; look at first character
.3bfe	c9 2d		cmp #$2d			cmp 	#"-"						; is it a - character
.3c00	d0 09		bne $3c0b			bne 	_I32FSNotNegative
.3c02	ad 4e 0d	lda $0d4e			lda 	fs32Length 					; get length back.
.3c05	c9 01		cmp #$01			cmp 	#1 							; if 1 it is just a - on its own so fail.
.3c07	f0 56		beq $3c5f			beq 	_I32FSFail2
.3c09	a0 02		ldy #$02			ldy 	#2 							; first digit of the number.
.3c0b					_I32FSNotNegative:
.3c0b	a5 32		lda $32				lda 	tempShort 					; get the base back.
.3c0d	c0 02		cpy #$02			cpy 	#2 							; if we read a -ve (e.g. Y == 2)
.3c0f	d0 02		bne $3c13			bne 	_I32FSNN2
.3c11	09 80		ora #$80			ora 	#$80						; set bit 7, this indicates a negated result.
.3c13					_I32FSNN2:
.3c13	48		pha				pha 								; save base + final sign on stack.
.3c14	20 7f 3d	jsr $3d7f			jsr 	MInt32False 				; zero the return value.
.3c17					_I32FSMainLoop:
.3c17	68		pla				pla 								; get the base back into tempShort
.3c18	48		pha				pha
.3c19	29 7f		and #$7f			and 	#$7F
.3c1b	85 32		sta $32				sta 	tempShort
.3c1d	b1 2a		lda ($2a),y			lda 	(temp0),y 					; look at next character.
.3c1f	c9 61		cmp #$61			cmp 	#"a" 						; fix up case.
.3c21	90 02		bcc $3c25			bcc 	_I32FSNotLC
.3c23	e9 20		sbc #$20			sbc 	#32
.3c25					_I32FSNotLC:
.3c25	38		sec				sec 								; subtract 48 (ASCII "0") - ASCII to Hex conversion
.3c26	e9 30		sbc #$30			sbc 	#"0"
.3c28	90 34		bcc $3c5e			bcc 	_I32FSFail 					; nothing more to do.
.3c2a	c9 0a		cmp #$0a			cmp 	#9+1 						; if it is 0-9 validate vs base.
.3c2c	90 06		bcc $3c34			bcc 	_I32FSValidate
.3c2e	c9 11		cmp #$11			cmp 	#17 						; is it between 58 and 64 ? if so bad.
.3c30	90 2c		bcc $3c5e			bcc 	_I32FSFail
.3c32	e9 07		sbc #$07			sbc 	#7 							; adjust into range so now character is 0->nnn
.3c34					_I32FSValidate:
.3c34	c5 32		cmp $32				cmp 	tempShort 					; compare against the base.
.3c36	b0 26		bcs $3c5e			bcs 	_I32FSFail 					; sorry, too large for this base, so fail.
.3c38	48		pha				pha 								; save the new digit value.
.3c39	e8		inx				inx 								; put base into next slot up on stack
.3c3a	a5 32		lda $32				lda 	tempShort
.3c3c	20 8e 3d	jsr $3d8e			jsr 	MInt32Set8Bit
.3c3f	ca		dex				dex
.3c40	20 97 3c	jsr $3c97			jsr 	MInt32Multiply 				; multiply current by the base
.3c43	e8		inx				inx
.3c44	68		pla				pla  								; put additive into next slot
.3c45	20 8e 3d	jsr $3d8e			jsr 	MInt32Set8Bit
.3c48	ca		dex				dex
.3c49	20 63 3c	jsr $3c63			jsr 	MInt32Add 					; and add it
.3c4c	c8		iny				iny 								; bump the character pointer
.3c4d	cc 4e 0d	cpy $0d4e			cpy 	fs32Length 					; until > length.
.3c50	f0 c5		beq $3c17			beq 	_I32FSMainLoop
.3c52	90 c3		bcc $3c17			bcc 	_I32FSMainLoop
.3c54					_I32FSDone:
.3c54	68		pla				pla 								; get base/final sign back
.3c55	10 03		bpl $3c5a			bpl 	_I32FSNN3
.3c57	20 39 3d	jsr $3d39			jsr 	MInt32Negate 				; negate the result.
.3c5a					_I32FSNN3:
.3c5a	68		pla				pla
.3c5b	a8		tay				tay
.3c5c	38		sec				sec
.3c5d	60		rts				rts
.3c5e					_I32FSFail:
.3c5e	68		pla				pla
.3c5f					_I32FSFail2:
.3c5f	68		pla				pla
.3c60	a8		tay				tay
.3c61	18		clc				clc
.3c62	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32math.asm

.3c63					MInt32Add:
.3c63	18		clc				clc
.3c64	b5 98		lda $98,x			lda 	esInt0,x
.3c66	75 99		adc $99,x			adc 	esInt0+1,x
.3c68	95 98		sta $98,x			sta 	esInt0,x
.3c6a	b5 a0		lda $a0,x			lda 	esInt1,x
.3c6c	75 a1		adc $a1,x			adc 	esInt1+1,x
.3c6e	95 a0		sta $a0,x			sta 	esInt1,x
.3c70	b5 a8		lda $a8,x			lda 	esInt2,x
.3c72	75 a9		adc $a9,x			adc 	esInt2+1,x
.3c74	95 a8		sta $a8,x			sta 	esInt2,x
.3c76	b5 b0		lda $b0,x			lda 	esInt3,x
.3c78	75 b1		adc $b1,x			adc 	esInt3+1,x
.3c7a	95 b0		sta $b0,x			sta 	esInt3,x
.3c7c	60		rts				rts
.3c7d					MInt32Sub:
.3c7d	38		sec				sec
.3c7e	b5 98		lda $98,x			lda 	esInt0,x
.3c80	f5 99		sbc $99,x			sbc 	esInt0+1,x
.3c82	95 98		sta $98,x			sta 	esInt0,x
.3c84	b5 a0		lda $a0,x			lda 	esInt1,x
.3c86	f5 a1		sbc $a1,x			sbc 	esInt1+1,x
.3c88	95 a0		sta $a0,x			sta 	esInt1,x
.3c8a	b5 a8		lda $a8,x			lda 	esInt2,x
.3c8c	f5 a9		sbc $a9,x			sbc 	esInt2+1,x
.3c8e	95 a8		sta $a8,x			sta 	esInt2,x
.3c90	b5 b0		lda $b0,x			lda 	esInt3,x
.3c92	f5 b1		sbc $b1,x			sbc 	esInt3+1,x
.3c94	95 b0		sta $b0,x			sta 	esInt3,x
.3c96	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32multiply.asm

.3c97					MInt32Multiply:
.3c97	e8		inx				inx 								; copy 2nd -> 3rd
.3c98	20 bd 3c	jsr $3cbd			jsr 	MInt32CopyUp
.3c9b	ca		dex				dex
.3c9c	20 bd 3c	jsr $3cbd			jsr 	MInt32CopyUp 				; copy 1st -> 2nd
.3c9f	20 7f 3d	jsr $3d7f			jsr 	MInt32False 				; zero 1st.
.3ca2					_I32Loop:
.3ca2	b5 9a		lda $9a,x			lda 	esInt0+2,x 					; get low bit of 3rd
.3ca4	29 01		and #$01			and 	#1
.3ca6	f0 03		beq $3cab			beq 	_I32NoAdd 					; if set
.3ca8	20 63 3c	jsr $3c63			jsr 	MInt32Add 					; add 2nd to 1st.
.3cab					_I32NoAdd:
.3cab	e8		inx				inx 								; shift 2nd left
.3cac	20 94 3d	jsr $3d94			jsr 	MInt32ShiftLeft
.3caf	e8		inx				inx  								; shift 3rd right
.3cb0	20 9d 3d	jsr $3d9d			jsr 	MInt32ShiftRight
.3cb3	20 a6 3d	jsr $3da6			jsr 	MInt32Zero 					; check if zero.
.3cb6	08		php				php 								; save status bits
.3cb7	ca		dex				dex 	 							; point back to 1st
.3cb8	ca		dex				dex
.3cb9	28		plp				plp 								; get status bits
.3cba	d0 e6		bne $3ca2			bne 	_I32Loop 					; if non-zero keep going.
.3cbc	60		rts				rts
.3cbd					MInt32CopyUp:
.3cbd	b5 98		lda $98,x			lda 	esInt0,x
.3cbf	95 99		sta $99,x			sta 	esInt0+1,x
.3cc1	b5 a0		lda $a0,x			lda 	esInt1,x
.3cc3	95 a1		sta $a1,x			sta 	esInt1+1,x
.3cc5	b5 a8		lda $a8,x			lda 	esInt2,x
.3cc7	95 a9		sta $a9,x			sta 	esInt2+1,x
.3cc9	b5 b0		lda $b0,x			lda 	esInt3,x
.3ccb	95 b1		sta $b1,x			sta 	esInt3+1,x
.3ccd	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32tostr.asm

>0d4f					MCharCount:	.fill 	1						; count of converted characters
.3cce					MLInt32ToString:
.3cce	aa		tax				tax									; module passes stack in A, base in Y
.3ccf	98		tya				tya
.3cd0	20 d5 3c	jsr $3cd5			jsr 	MInt32ToString
.3cd3	8a		txa				txa
.3cd4	60		rts				rts
.3cd5					MInt32ToString:
.3cd5	48		pha				pha 								; save base
.3cd6	85 32		sta $32				sta 	tempShort 					; save target base.
.3cd8	a9 00		lda #$00			lda 	#0
.3cda	8d 4f 0d	sta $0d4f			sta 	MCharCount 					; clear character count to 0
.3cdd	98		tya				tya
.3cde	48		pha				pha
.3cdf	a5 32		lda $32				lda 	tempShort 					; check if we are signed conversion
.3ce1	10 10		bpl $3cf3			bpl 	_I32TSUnsigned
.3ce3	48		pha				pha 								; save base on stack.
.3ce4	b5 b0		lda $b0,x			lda 	esInt3,x 					; is it actually negative
.3ce6	10 08		bpl $3cf0			bpl 	_I32TSNoFlip
.3ce8	a9 2d		lda #$2d			lda 	#"-" 						; write a '-' prefix out.
.3cea	20 26 3d	jsr $3d26			jsr 	MI32WriteCharacter
.3ced	20 39 3d	jsr $3d39			jsr 	MInt32Negate 				; negate the value, so now it's positive.
.3cf0					_I32TSNoFlip:
.3cf0	68		pla				pla 								; get the base back
.3cf1	29 7f		and #$7f			and 	#$7F 						; clear the sign flag so it's just a base now.
.3cf3					_I32TSUnsigned:
.3cf3	20 01 3d	jsr $3d01			jsr 	MI32DivideWrite 			; recursive code to output string.
.3cf6	a0 00		ldy #$00			ldy 	#0 							; write charcount to first character.
.3cf8	ad 4f 0d	lda $0d4f			lda 	MCharCount
.3cfb	91 2a		sta ($2a),y			sta 	(temp0),y
.3cfd	68		pla				pla
.3cfe	a8		tay				tay
.3cff	68		pla				pla
.3d00	60		rts				rts
.3d01					MI32DivideWrite:
.3d01	48		pha				pha 								; save the divisor/base
.3d02	e8		inx				inx 								; write in the dividing position.
.3d03	20 8e 3d	jsr $3d8e			jsr 	MInt32Set8Bit
.3d06	ca		dex				dex
.3d07	20 79 3b	jsr $3b79			jsr 	MInt32UDivide 				; divide number by base.
.3d0a	68		pla				pla 								; get the base into Y
.3d0b	a8		tay				tay
.3d0c	b5 9a		lda $9a,x			lda 	esInt0+2,x 					; get the remainder and push on the stack.
.3d0e	48		pha				pha
.3d0f	20 a6 3d	jsr $3da6			jsr 	MInt32Zero 					; is the result zero ?
.3d12	f0 04		beq $3d18			beq 	_I32NoRecurse 				; if so, don't recurse.
.3d14	98		tya				tya 								; put base into A
.3d15	20 01 3d	jsr $3d01			jsr 	MI32DivideWrite 				; and jsr the dividor recursively.
.3d18					_I32NoRecurse:
.3d18	68		pla				pla 								; get the remainder back
.3d19	c9 0a		cmp #$0a			cmp 	#10  						; handle hexadecimals, now converting to ASCII
.3d1b	90 02		bcc $3d1f			bcc 	_I32NotHex
.3d1d	69 06		adc #$06			adc 	#7-1
.3d1f					_I32NotHex:
.3d1f	18		clc				clc 								; make it ASCII
.3d20	69 30		adc #$30			adc 	#48
.3d22	20 26 3d	jsr $3d26			jsr 	MI32WriteCharacter 			; write the character out
.3d25	60		rts				rts 								; and exit.
.3d26					MI32WriteCharacter:
.3d26	ee 4f 0d	inc $0d4f			inc 	MCharCount 					; bump count (space for leading count)
.3d29	ac 4f 0d	ldy $0d4f			ldy 	MCharCount 					; get position
.3d2c	91 2a		sta ($2a),y			sta 	(temp0),y 					; write out with trailing 0
.3d2e	c8		iny				iny
.3d2f	a9 00		lda #$00			lda 	#0
.3d31	91 2a		sta ($2a),y			sta 	(temp0),y
.3d33	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32unary.asm

>0d50					MSeed32:	.fill 	4							; random number seed.
.3d34					MInt32Absolute:
.3d34	b5 b0		lda $b0,x			lda 	esInt3,x 					; use negate code if -ve.
.3d36	30 01		bmi $3d39			bmi 	MInt32Negate
.3d38	60		rts				rts
.3d39					MInt32Negate:
.3d39	38		sec				sec 								; subtract from zero.
.3d3a	a9 00		lda #$00			lda 	#0
.3d3c	f5 98		sbc $98,x			sbc 	esInt0,x
.3d3e	95 98		sta $98,x			sta 	esInt0,x
.3d40	a9 00		lda #$00			lda 	#0
.3d42	f5 a0		sbc $a0,x			sbc 	esInt1,x
.3d44	95 a0		sta $a0,x			sta 	esInt1,x
.3d46	a9 00		lda #$00			lda 	#0
.3d48	f5 a8		sbc $a8,x			sbc 	esInt2,x
.3d4a	95 a8		sta $a8,x			sta 	esInt2,x
.3d4c	a9 00		lda #$00			lda 	#0
.3d4e	f5 b0		sbc $b0,x			sbc 	esInt3,x
.3d50	95 b0		sta $b0,x			sta 	esInt3,x
.3d52	60		rts				rts
.3d53					MInt32Not:
.3d53	b5 98		lda $98,x			lda 	esInt0,x 					; one's complement all four.
.3d55	49 ff		eor #$ff			eor 	#$FF
.3d57	95 98		sta $98,x			sta 	esInt0,x
.3d59	b5 a0		lda $a0,x			lda 	esInt1,x
.3d5b	49 ff		eor #$ff			eor 	#$FF
.3d5d	95 a0		sta $a0,x			sta 	esInt1,x
.3d5f	b5 a8		lda $a8,x			lda 	esInt2,x
.3d61	49 ff		eor #$ff			eor 	#$FF
.3d63	95 a8		sta $a8,x			sta 	esInt2,x
.3d65	b5 b0		lda $b0,x			lda 	esInt3,x
.3d67	49 ff		eor #$ff			eor 	#$FF
.3d69	95 b0		sta $b0,x			sta 	esInt3,x
.3d6b	60		rts				rts
.3d6c					MInt32Sign:
.3d6c	b5 b0		lda $b0,x			lda 	esInt3,x					; look at MSB
.3d6e	30 0b		bmi $3d7b			bmi 	MInt32True 					; if set return -1 (true)
.3d70	20 a6 3d	jsr $3da6			jsr 	MInt32Zero 					; is it zero ?
.3d73	f0 0a		beq $3d7f			beq 	MInt32False 				; if zero return 0 (false)
.3d75	20 7f 3d	jsr $3d7f			jsr 	MInt32False 				; > 0 return 1, by setting it to zero
.3d78	f6 98		inc $98,x			inc 	esInt0,x  					; and bumping the LSB.
.3d7a	60		rts				rts
.3d7b					MInt32True:
.3d7b	a9 ff		lda #$ff			lda 	#$FF 						; set to $FFFFFFFF
.3d7d	d0 02		bne $3d81			bne 	MInt32WriteAll
.3d7f					MInt32False:
.3d7f	a9 00		lda #$00			lda 	#0
.3d81					MInt32WriteAll:
.3d81	95 98		sta $98,x			sta 	esInt0,x
.3d83					MInt32Write123:
.3d83	95 a0		sta $a0,x			sta 	esInt1,x
.3d85	95 a8		sta $a8,x			sta 	esInt2,x
.3d87	95 b0		sta $b0,x			sta 	esInt3,x
.3d89	a9 00		lda #$00			lda 	#$00						; and make it an integer
.3d8b	95 90		sta $90,x			sta 	esType,x
.3d8d	60		rts				rts
.3d8e					MInt32Set8Bit:
.3d8e	95 98		sta $98,x			sta 	esInt0,x 					; coopt above function to write
.3d90	a9 00		lda #$00			lda 	#0 							; a value 0-255
.3d92	f0 ef		beq $3d83			beq		MInt32Write123
.3d94					MInt32ShiftLeft:
.3d94	16 98		asl $98,x			asl 	esInt0,x
.3d96	36 a0		rol $a0,x			rol	 	esInt1,x
.3d98	36 a8		rol $a8,x			rol	 	esInt2,x
.3d9a	36 b0		rol $b0,x			rol	 	esInt3,x
.3d9c	60		rts				rts
.3d9d					MInt32ShiftRight:
.3d9d	56 b0		lsr $b0,x			lsr 	esInt3,x
.3d9f	76 a8		ror $a8,x			ror 	esInt2,x
.3da1	76 a0		ror $a0,x			ror 	esInt1,x
.3da3	76 98		ror $98,x			ror 	esInt0,x
.3da5	60		rts				rts
.3da6					MInt32Zero:
.3da6	b5 98		lda $98,x			lda 	esInt0,x
.3da8	15 a0		ora $a0,x			ora 	esInt1,x
.3daa	15 a8		ora $a8,x			ora 	esInt2,x
.3dac	15 b0		ora $b0,x			ora 	esInt3,x
.3dae	60		rts				rts
.3daf					MInt32Random:
.3daf	98		tya				tya
.3db0	48		pha				pha
.3db1	a0 07		ldy #$07			ldy 	#7 							; do it 7 times
.3db3	ad 50 0d	lda $0d50			lda 	MSeed32+0 					; check the seed isn't zero
.3db6	d0 03		bne $3dbb			bne 	_Random1
.3db8	a8		tay				tay 								; if so do it 256 times
.3db9	a9 aa		lda #$aa			lda		#$AA 						; and use this to seed the seed....
.3dbb					_Random1:
.3dbb	0a		asl a				asl 	a
.3dbc	2e 51 0d	rol $0d51			rol 	MSeed32+1
.3dbf	2e 52 0d	rol $0d52			rol 	MSeed32+2
.3dc2	2e 53 0d	rol $0d53			rol 	MSeed32+3
.3dc5	90 02		bcc $3dc9			bcc 	_Random2
.3dc7	49 c5		eor #$c5			eor 	#$C5
.3dc9					_Random2:
.3dc9	88		dey				dey
.3dca	d0 ef		bne $3dbb			bne 	_Random1
.3dcc	8d 50 0d	sta $0d50			sta 	MSeed32+0 					; copy the seed in.
.3dcf	95 98		sta $98,x			sta 	esInt0,x
.3dd1	ad 51 0d	lda $0d51			lda 	MSeed32+1
.3dd4	95 a0		sta $a0,x			sta 	esInt1,x
.3dd6	ad 52 0d	lda $0d52			lda 	MSeed32+2
.3dd9	95 a8		sta $a8,x			sta 	esInt2,x
.3ddb	ad 53 0d	lda $0d53			lda 	MSeed32+3
.3dde	95 b0		sta $b0,x			sta 	esInt3,x
.3de0	68		pla				pla
.3de1	a8		tay				tay
.3de2	a9 00		lda #$00			lda 	#0
.3de4	95 90		sta $90,x			sta 	esType,x
.3de6	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/utility/check.asm

.3de7					CheckToken:
.3de7	d1 28		cmp ($28),y			cmp 	(codePtr),y
.3de9	d0 02		bne $3ded			bne 	_CTError
.3deb	c8		iny				iny
.3dec	60		rts				rts
.3ded					_CTError:
.3ded	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.3def	20 18 15	jsr $1518		jsr	errorHandler
.3df2					CheckRightParen:
.3df2	b1 28		lda ($28),y			lda 	(codePtr),y
.3df4	c8		iny				iny
.3df5	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.3df7	d0 01		bne $3dfa			bne 	_CRPError
.3df9	60		rts				rts
.3dfa					_CRPError:
.3dfa	a2 09		ldx #$09			ldx 	#ErrorID_MissingRP
.3dfc	20 18 15	jsr $1518		jsr	errorHandler
.3dff					CheckComma:
.3dff	b1 28		lda ($28),y			lda 	(codePtr),y
.3e01	c8		iny				iny
.3e02	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.3e04	d0 01		bne $3e07			bne 	_CCError
.3e06	60		rts				rts
.3e07					_CCError:
.3e07	a2 0a		ldx #$0a			ldx 	#ErrorID_MissingComma
.3e09	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/utility/stack.asm

.0037					rsPointer:
>0037							.fill 	2							; to TOS, which is the current top-token.
.3e0c					RSReset:
.3e0c	a9 ff		lda #$ff			lda 	#(returnStack+retStackSize-1) & $FF
.3e0e	85 37		sta $37				sta 	rsPointer
.3e10	a9 09		lda #$09			lda 	#(returnStack+retStackSize-1) >> 8
.3e12	85 38		sta $38				sta 	1+(rsPointer)
.3e14	a9 ff		lda #$ff			lda 	#$FF 						; put a duff marker on TOS, so nothing will pop
.3e16	8d ff 09	sta $09ff			sta 	returnStack+retStackSize-1
.3e19	60		rts				rts
.3e1a					RSClaim:
.3e1a	84 32		sty $32				sty 	tempShort 					; preserve Y
.3e1c	48		pha				pha 								; save marker on stack.
.3e1d	8a		txa				txa 								; get bytes required.
.3e1e	38		sec				sec
.3e1f	49 ff		eor #$ff			eor 	#$FF 						; add to rsPointer using 2's complement.
.3e21	65 37		adc $37				adc 	rsPointer
.3e23	85 37		sta $37				sta 	rsPointer
.3e25	a5 38		lda $38				lda 	rsPointer+1
.3e27	69 ff		adc #$ff			adc 	#$FF
.3e29	85 38		sta $38				sta 	rsPointer+1
.3e2b	c9 08		cmp #$08			cmp 	#returnStack>>8 			; overflow. underflow actually :)
.3e2d	90 08		bcc $3e37			bcc 	_RSCOverflow
.3e2f	68		pla				pla 								; get marker back
.3e30	a0 00		ldy #$00			ldy 	#0 							; write marker out.
.3e32	91 37		sta ($37),y			sta 	(rsPointer),y
.3e34	a4 32		ldy $32				ldy 	tempShort 					; restore Y and exit
.3e36	60		rts				rts
.3e37					_RSCOverflow:
.3e37	a2 16		ldx #$16			ldx 	#ErrorID_RetStack
.3e39	20 18 15	jsr $1518		jsr	errorHandler
.3e3c					RSFree:
.3e3c	18		clc				clc
.3e3d	65 37		adc $37				adc 	rsPointer
.3e3f	85 37		sta $37				sta 	rsPointer
.3e41	90 02		bcc $3e45			bcc 	_RSFExit
.3e43	e6 38		inc $38				inc 	rsPointer+1
.3e45					_RSFExit:
.3e45	60		rts				rts
.3e46					RSSavePosition:
.3e46	84 32		sty $32				sty 	tempShort 					; save Y position
.3e48	a8		tay				tay 								; this is where we write it.
.3e49	a5 28		lda $28				lda 	codePtr 					; write codePointer out
.3e4b	91 37		sta ($37),y			sta 	(rsPointer),y
.3e4d	c8		iny				iny
.3e4e	a5 29		lda $29				lda 	codePtr+1
.3e50	91 37		sta ($37),y			sta 	(rsPointer),y
.3e52	c8		iny				iny
.3e53	a5 32		lda $32				lda 	tempShort 					; write the Y position out.
.3e55	91 37		sta ($37),y			sta 	(rsPointer),y
.3e57	a8		tay				tay 								; fix Y back again to original value
.3e58	60		rts				rts
.3e59					RSLoadPosition:
.3e59	a8		tay				tay
.3e5a	b1 37		lda ($37),y			lda 	(rsPointer),y 				; read codePointer back
.3e5c	85 28		sta $28				sta 	codePtr
.3e5e	c8		iny				iny
.3e5f	b1 37		lda ($37),y			lda 	(rsPointer),y
.3e61	85 29		sta $29				sta 	codePtr+1
.3e63	c8		iny				iny
.3e64	b1 37		lda ($37),y			lda 	(rsPointer),y 				; and the offset
.3e66	a8		tay				tay 								; to Y
.3e67	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/utility/warmstart.asm

.3e68					WarmStart:
.3e68	a2 04		ldx #$04		ldx	#4
.3e6a	20 cd 27	jsr $27cd		jsr	interactionHandler

;******  Return to file: main/main.asm

.3e6d					mainHandler:
.3e6d	7c 70 3e	jmp ($3e70,x)			jmp 	(mainVectors,x)
.3e70					mainVectors:
>3e70	8c 3e					.word _DummyControlHandler ; index 0
>3e72	ff 3d					.word CheckComma           ; index 2
>3e74	f2 3d					.word CheckRightParen      ; index 4
>3e76	d5 2f					.word XCommandClear        ; index 6
>3e78	02 37					.word LinkEvaluate         ; index 8
>3e7a	0e 37					.word LinkEvaluateInteger  ; index 10
>3e7c	1a 37					.word LinkEvaluateSmallInt ; index 12
>3e7e	14 37					.word LinkEvaluateString   ; index 14
>3e80	08 37					.word LinkEvaluateTerm     ; index 16
>3e82	ce 3c					.word MLInt32ToString      ; index 18
>3e84	64 31					.word Command_XNew         ; index 20
>3e86	72 31					.word XCommand_Run         ; index 22
>3e88	7e 31					.word Command_RunFrom      ; index 24
>3e8a	e6 3b					.word LinkInt32FromString  ; index 26
.3e8c					_DummyControlHandler:
.3e8c	60		rts			rts

;******  Return to file: basic.asm

.3e8d					section_end_main:
.3e8d					section_start_string:

;******  Processing file: string/string.asm


;******  Processing file: string/functions/chr.asm

.3e8d					StringChrs:
.3e8d	aa		tax				tax 								; set up stack
.3e8e	a9 02		lda #$02			lda 	#2
.3e90	20 50 3f	jsr $3f50			jsr 	AllocateSoftString
.3e93	98		tya				tya
.3e94	20 76 3f	jsr $3f76			jsr 	WriteSoftString
.3e97					StringUpdate:
.3e97	20 a5 3e	jsr $3ea5			jsr 	ReturnSoftString
.3e9a	8a		txa				txa
.3e9b	60		rts				rts
.3e9c					StringNull:
.3e9c	aa		tax				tax
.3e9d	a9 01		lda #$01			lda 	#1
.3e9f	20 50 3f	jsr $3f50			jsr 	AllocateSoftString
.3ea2	4c 97 3e	jmp $3e97			jmp 	StringUpdate
.3ea5					ReturnSoftString:
.3ea5	a5 39		lda $39				lda 	softMemAlloc 				; copy address
.3ea7	95 98		sta $98,x			sta 	esInt0,x
.3ea9	a5 3a		lda $3a				lda 	softMemAlloc+1
.3eab	95 a0		sta $a0,x			sta 	esInt1,x
.3ead	a9 00		lda #$00			lda 	#0 							; zero upper bytes
.3eaf	95 a8		sta $a8,x			sta 	esInt2,x
.3eb1	95 b0		sta $b0,x			sta 	esInt3,x
.3eb3	a9 40		lda #$40			lda 	#$40 						; type string.
.3eb5	95 90		sta $90,x			sta 	esType,x
.3eb7	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/functions/compare.asm

.3eb8					STRCompare:
.3eb8	48		pha				pha 								; save A
.3eb9	aa		tax				tax 								; put stack pos in X
.3eba	98		tya				tya
.3ebb	48		pha				pha
.3ebc	20 f0 3e	jsr $3ef0			jsr 	CopyStringPair 				; copy strings to temp0,temp1
.3ebf	a0 00		ldy #$00			ldy 	#0 							; get the smaller of the two string sizes.
.3ec1	b1 2a		lda ($2a),y			lda 	(temp0),y
.3ec3	d1 2c		cmp ($2c),y			cmp 	(temp1),y
.3ec5	90 02		bcc $3ec9			bcc 	_SCNotSmaller
.3ec7	b1 2c		lda ($2c),y			lda 	(temp1),y
.3ec9					_SCNotSmaller:
.3ec9	aa		tax				tax 								; put that in X. We compare this many chars first.
.3eca					_SCCompareLoop:
.3eca	e0 00		cpx #$00			cpx 	#0 							; if compared all the smaller, then it is the shorter
.3ecc	f0 0c		beq $3eda			beq 	_SCSameToEndShortest 		; one that is the smallest if they are different lengths.
.3ece	ca		dex				dex 								; decrement chars to compare.
.3ecf	c8		iny				iny 								; move to next character
.3ed0	38		sec				sec 								; calculate s1[y]-s2[y]
.3ed1	b1 2a		lda ($2a),y			lda 	(temp0),y
.3ed3	f1 2c		sbc ($2c),y			sbc 	(temp1),y
.3ed5	d0 0a		bne $3ee1			bne 	_SCReturnResult 			; if different return sign of A
.3ed7	4c ca 3e	jmp $3eca			jmp 	_SCCompareLoop
.3eda					_SCSameToEndShortest
.3eda	a0 00		ldy #$00			ldy 	#0 							; compare len(s1) - len(s2)
.3edc	38		sec				sec
.3edd	b1 2a		lda ($2a),y			lda 	(temp0),y
.3edf	f1 2c		sbc ($2c),y			sbc 	(temp1),y
.3ee1					_SCReturnResult:
.3ee1	08		php				php 								; set return to zero preserving PSW.
.3ee2	a2 00		ldx #$00			ldx 	#0
.3ee4	28		plp				plp
.3ee5	f0 05		beq $3eec			beq 	_SCExit 					; two values equal, then exit
.3ee7	ca		dex				dex 								; X = $FF
.3ee8	90 02		bcc $3eec			bcc 	_SCExit 					; if 1st < 2nd then -1
.3eea	a2 01		ldx #$01			ldx 	#1 							; X = $01 if greater
.3eec					_SCExit:
.3eec	68		pla				pla
.3eed	a8		tay				tay
.3eee	68		pla				pla
.3eef	60		rts				rts
.3ef0					CopyStringPair:
.3ef0	b5 99		lda $99,x			lda 	esInt0+1,x
.3ef2	85 2c		sta $2c				sta 	temp1
.3ef4	b5 a1		lda $a1,x			lda 	esInt1+1,x
.3ef6	85 2d		sta $2d				sta 	temp1+1
.3ef8					CopyStringTop:
.3ef8	b5 98		lda $98,x			lda 	esInt0,x
.3efa	85 2a		sta $2a				sta 	temp0
.3efc	b5 a0		lda $a0,x			lda 	esInt1,x
.3efe	85 2b		sta $2b				sta 	temp0+1
.3f00	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/functions/concat.asm

.3f01					StringConcat:
.3f01	aa		tax				tax									; stack pos in X
.3f02	98		tya				tya
.3f03	48		pha				pha
.3f04	20 f0 3e	jsr $3ef0			jsr 	CopyStringPair 				; temp0 and temp1 point to strings to concat.
.3f07	38		sec				sec 								; calculate alloc strings. lengths added + 1 for size.
.3f08	a0 00		ldy #$00			ldy 	#0
.3f0a	b1 2a		lda ($2a),y			lda 	(temp0),y
.3f0c	71 2c		adc ($2c),y			adc 	(temp1),y
.3f0e	b0 1c		bcs $3f2c			bcs 	_SCError 					; just too many characters here.
.3f10	c9 fc		cmp #$fc			cmp 	#MaxStringSize
.3f12	b0 18		bcs $3f2c			bcs 	_SCError
.3f14	20 50 3f	jsr $3f50			jsr 	AllocateSoftString 			; allocate soft string memory, set pointer.
.3f17	20 47 3f	jsr $3f47			jsr 	CopySoftToStack 			; copy that to the stack.
.3f1a	20 31 3f	jsr $3f31			jsr 	SCCopyTemp0 				; copy temp0
.3f1d	a5 2c		lda $2c				lda 	temp1 						; copy temp1 to temp0
.3f1f	85 2a		sta $2a				sta 	temp0
.3f21	a5 2d		lda $2d				lda 	temp1+1
.3f23	85 2b		sta $2b				sta 	temp0+1
.3f25	20 31 3f	jsr $3f31			jsr 	SCCopyTemp0 				; copy temp0 e.g. what was temp1.
.3f28	68		pla				pla
.3f29	a8		tay				tay
.3f2a	8a		txa				txa 								; and A
.3f2b	60		rts				rts
.3f2c					_SCError:
.3f2c	a2 0d		ldx #$0d			ldx 	#ErrorID_StrLen
.3f2e	20 18 15	jsr $1518		jsr	errorHandler
.3f31					SCCopyTemp0:
.3f31	a0 00		ldy #$00			ldy 	#0 							; put count in temp2
.3f33	b1 2a		lda ($2a),y			lda 	(temp0),y
.3f35	85 2e		sta $2e				sta 	temp2
.3f37					_SCCopyLoop:
.3f37	a5 2e		lda $2e				lda 	temp2 						; done the lot
.3f39	f0 0b		beq $3f46			beq 	_SCCopyExit
.3f3b	c6 2e		dec $2e				dec 	temp2
.3f3d	c8		iny				iny 								; get next char
.3f3e	b1 2a		lda ($2a),y			lda 	(temp0),y
.3f40	20 76 3f	jsr $3f76			jsr 	WriteSoftString 			; write to soft string.
.3f43	4c 37 3f	jmp $3f37			jmp 	_SCCopyLoop
.3f46					_SCCopyExit:
.3f46	60		rts				rts
.3f47					CopySoftToStack:
.3f47	a5 39		lda $39				lda 	SoftMemAlloc 				; copy the memory allocation pointer to the stack.
.3f49	95 98		sta $98,x			sta 	esInt0,x 					; type is already string.
.3f4b	a5 3a		lda $3a				lda 	SoftMemAlloc+1
.3f4d	95 a0		sta $a0,x			sta 	esInt1,x
.3f4f	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/functions/memory.asm

.0039					softMemAlloc:
>0039							.fill 	2  							; if MSB is zero needs resetting on allocation.
.3f50					AllocateSoftString:
.3f50	85 32		sta $32				sta 	tempShort 					; save count
.3f52	98		tya				tya
.3f53	48		pha				pha
.3f54	a5 3a		lda $3a				lda 	softMemAlloc+1 				; if the high byte is zero, it needs allocating.
.3f56	d0 09		bne $3f61			bne 	_ASSDone
.3f58	a5 33		lda $33				lda 	highMemory 					; reset the soft memory alloc pointer.
.3f5a	85 39		sta $39				sta 	softMemAlloc 				; to speed up slightly, we only reset this when we first need it
.3f5c	a4 34		ldy $34				ldy 	highMemory+1 				; but it needs to be reset before each command.
.3f5e	88		dey				dey 								; it is set to 1/4k below high memory, allowing space
.3f5f	84 3a		sty $3a				sty 	softMemAlloc+1 				; for a concreted string.
.3f61					_ASSDone:
.3f61	38		sec				sec 								; allocate downwards enough memory
.3f62	a5 39		lda $39				lda 	softMemAlloc 				; subtract the memory requirements in A from
.3f64	e5 32		sbc $32				sbc 	tempShort 					; the soft memory pointer
.3f66	85 39		sta $39				sta 	softMemAlloc
.3f68	a5 3a		lda $3a				lda 	softMemAlloc+1
.3f6a	e9 00		sbc #$00			sbc 	#0
.3f6c	85 3a		sta $3a				sta 	softMemAlloc+1
.3f6e	a9 00		lda #$00			lda 	#0 							; empty that string, set the length = 0.
.3f70	a8		tay				tay
.3f71	91 39		sta ($39),y			sta 	(softMemAlloc),y
.3f73	68		pla				pla
.3f74	a8		tay				tay
.3f75	60		rts				rts
.3f76					WriteSoftString:
.3f76	84 32		sty $32				sty 	tempShort 					; save Y
.3f78	48		pha				pha 								; save character on stack
.3f79	a0 00		ldy #$00			ldy 	#0 							; get and bump length
.3f7b	b1 39		lda ($39),y			lda 	(softMemAlloc),y
.3f7d	18		clc				clc
.3f7e	69 01		adc #$01			adc 	#1
.3f80	91 39		sta ($39),y			sta 	(softMemAlloc),y
.3f82	a8		tay				tay 								; offset in Y
.3f83	68		pla				pla 								; get char and write.
.3f84	91 39		sta ($39),y			sta 	(softMemAlloc),y
.3f86	a4 32		ldy $32				ldy 	tempShort 					; restore Y and exit.
.3f88	60		rts				rts
.3f89					StrClone:
.3f89	aa		tax				tax 								; set up stack.
.3f8a	98		tya				tya
.3f8b	48		pha				pha
.3f8c	a0 00		ldy #$00			ldy 	#0 							; get length, add 1 for length
.3f8e	b1 2a		lda ($2a),y			lda 	(temp0),y 					; this is the bytes required.
.3f90	18		clc				clc
.3f91	69 01		adc #$01			adc 	#1
.3f93	20 50 3f	jsr $3f50			jsr 	AllocateSoftString 			; allocate soft memory
.3f96	a5 39		lda $39				lda 	softMemAlloc 				; copy that address to TOS
.3f98	95 98		sta $98,x			sta 	esInt0,x
.3f9a	a5 3a		lda $3a				lda 	softMemAlloc+1
.3f9c	95 a0		sta $a0,x			sta 	esInt1,x
.3f9e	a9 00		lda #$00			lda 	#0 							; zero upper 2 bytes
.3fa0	95 a8		sta $a8,x			sta 	esInt2,x
.3fa2	95 b0		sta $b0,x			sta 	esInt3,x
.3fa4	a9 40		lda #$40			lda 	#$40 						; set type to string.
.3fa6	95 90		sta $90,x			sta 	esType,x
.3fa8	20 31 3f	jsr $3f31			jsr 	SCCopyTemp0 				; copy temp0 string to soft memory copy (concat.asm)
.3fab	68		pla				pla
.3fac	a8		tay				tay
.3fad	8a		txa				txa
.3fae	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/functions/setcase.asm

.3faf					CaseString:
.3faf	48		pha				pha 								; save A and copy to X
.3fb0	aa		tax				tax
.3fb1	98		tya				tya
.3fb2	48		pha				pha
.3fb3	20 f8 3e	jsr $3ef8			jsr 	CopyStringTop 				; target string -> temp0
.3fb6	a0 00		ldy #$00			ldy 	#0
.3fb8	b1 2a		lda ($2a),y			lda 	(temp0),y  					; get length,
.3fba	18		clc				clc
.3fbb	69 01		adc #$01			adc 	#1 							; one more for length byte
.3fbd	20 50 3f	jsr $3f50			jsr 	AllocateSoftString 			; allocate soft string memory, set pointer.
.3fc0	20 47 3f	jsr $3f47			jsr 	CopySoftToStack 			; copy that to the stack.
.3fc3	a0 00		ldy #$00			ldy 	#0
.3fc5	b1 2a		lda ($2a),y			lda 	(temp0),y 					; count to copy in X
.3fc7	aa		tax				tax
.3fc8					_CSCopy:
.3fc8	e0 00		cpx #$00			cpx 	#0 							; finished if 0.
.3fca	f0 24		beq $3ff0			beq 	_CSExit
.3fcc	ca		dex				dex
.3fcd	c8		iny				iny
.3fce	68		pla				pla 								; check direction
.3fcf	48		pha				pha
.3fd0	f0 0c		beq $3fde			beq 	_CSUpper
.3fd2	b1 2a		lda ($2a),y			lda 	(temp0),y 					; lower$() code
.3fd4	c9 41		cmp #$41			cmp 	#"A"
.3fd6	90 12		bcc $3fea			bcc 	_CSWrite
.3fd8	c9 5b		cmp #$5b			cmp 	#"Z"+1
.3fda	b0 0e		bcs $3fea			bcs 	_CSWrite
.3fdc	90 0a		bcc $3fe8			bcc 	_CSFlipWrite
.3fde					_CSUpper:
.3fde	b1 2a		lda ($2a),y			lda 	(temp0),y 					; upper$() code
.3fe0	c9 61		cmp #$61			cmp 	#"a"
.3fe2	90 06		bcc $3fea			bcc 	_CSWrite
.3fe4	c9 7b		cmp #$7b			cmp 	#"z"+1
.3fe6	b0 02		bcs $3fea			bcs 	_CSWrite
.3fe8					_CSFlipWrite:
.3fe8	49 20		eor #$20			eor 	#"A"^"a" 					; switch case.
.3fea					_CSWrite:
.3fea	20 76 3f	jsr $3f76			jsr 	WriteSoftString 			; add to soft string.
.3fed	4c c8 3f	jmp $3fc8			jmp 	_CSCopy
.3ff0					_CSExit:
.3ff0	68		pla				pla
.3ff1	a8		tay				tay
.3ff2	68		pla				pla
.3ff3	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/functions/substring.asm

.3ff4					StringSubstring:
.3ff4	48		pha				pha
.3ff5	aa		tax				tax 								; access stack.
.3ff6	98		tya				tya
.3ff7	48		pha				pha
.3ff8	20 f8 3e	jsr $3ef8			jsr 	CopyStringTop 				; point temp0 to the string.
.3ffb	a0 00		ldy #$00			ldy 	#0 							; get length.
.3ffd	b1 2a		lda ($2a),y			lda 	(temp0),Y
.3fff	85 2c		sta $2c				sta 	temp1
.4001	b5 99		lda $99,x			lda 	esInt0+1,x 					; get the initial offset
.4003	c5 2c		cmp $2c				cmp 	temp1 						; return "" if > length.
.4005	f0 02		beq $4009			beq 	_SSBOkay
.4007	b0 2a		bcs $4033			bcs 	_SSBReturnNull
.4009					_SSBOkay:
.4009	a5 2c		lda $2c				lda 	temp1 						; get the total length +1
.400b	18		clc				clc
.400c	69 01		adc #$01			adc 	#1
.400e	38		sec				sec
.400f	f5 99		sbc $99,x			sbc 	esInt0+1,x 					; the anything >= this is bad - max size
.4011	d5 9a		cmp $9a,x			cmp 	esInt0+2,x  				; check bad >= required
.4013	90 02		bcc $4017			bcc		_SSBTrunc
.4015	b5 9a		lda $9a,x			lda 	esInt0+2,x
.4017					_SSBTrunc:
.4017	85 2d		sta $2d				sta 	temp1+1 					; characters to copy.
.4019	18		clc				clc
.401a	69 01		adc #$01			adc 	#1 							; add 1
.401c	20 50 3f	jsr $3f50			jsr 	AllocateSoftString 			; allocate soft string memory, set pointer.
.401f	20 47 3f	jsr $3f47			jsr 	CopySoftToStack 			; copy that to the stack.
.4022	b4 99		ldy $99,x			ldy 	esInt0+1,x 					; get initial position of char to copy
.4024					_SSBCopyLoop:
.4024	a5 2d		lda $2d				lda 	temp1+1 					; done them all
.4026	f0 0e		beq $4036			beq 	_SSBExit
.4028	c6 2d		dec $2d				dec 	temp1+1
.402a	b1 2a		lda ($2a),y			lda 	(temp0),y 					; get and write character
.402c	20 76 3f	jsr $3f76			jsr 	WriteSoftString
.402f	c8		iny				iny
.4030	4c 24 40	jmp $4024			jmp 	_SSBCopyLoop
.4033					_SSBReturnNull:
.4033	20 3a 40	jsr $403a			jsr 	ReturnNull
.4036					_SSBExit:
.4036	68		pla				pla
.4037	a8		tay				tay
.4038	68		pla				pla
.4039	60		rts				rts
.403a					ReturnNull:
.403a	a9 00		lda #$00			lda 	#0 							; clear null string
.403c	8d ce 0a	sta $0ace			sta 	NullString
.403f	a9 ce		lda #$ce			lda 	#NullString & $FF 			; set a pointer to it
.4041	95 98		sta $98,x			sta 	esInt0,x
.4043	a9 0a		lda #$0a			lda 	#NullString >> 8
.4045	95 a0		sta $a0,x			sta 	esInt1,x
.4047	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/functions/write.asm

.0d54					srcStrLen:
>0d54							.fill 	1
.4048					StringWrite:
.4048	aa		tax				tax
.4049	48		pha				pha
.404a	98		tya				tya
.404b	48		pha				pha
.404c	20 73 40	jsr $4073			jsr 	CheckOverwriteCurrent
.404f	b0 0d		bcs $405e			bcs		_SWCopyCurrent
.4051	20 b1 40	jsr $40b1			jsr 	RequiresConcretion
.4054	90 0e		bcc $4064			bcc 	_SWWriteReference
.4056	20 14 41	jsr $4114			jsr 	CheckSpecialConcretion
.4059	b0 09		bcs $4064			bcs 	_SWWriteReference
.405b	20 c5 40	jsr $40c5			jsr 	AllocateHardMemory
.405e					_SWCopyCurrent:
.405e	20 f8 40	jsr $40f8			jsr 	CopyStringToHardMemory
.4061	4c 6f 40	jmp $406f			jmp 	_SWExit
.4064					_SWWriteReference
.4064	a0 00		ldy #$00			ldy 	#0
.4066	a5 2a		lda $2a				lda 	temp0
.4068	91 2c		sta ($2c),y			sta 	(temp1),y
.406a	c8		iny				iny
.406b	a5 2b		lda $2b				lda 	temp0+1
.406d	91 2c		sta ($2c),y			sta 	(temp1),y
.406f					_SWExit:
.406f	68		pla				pla
.4070	a8		tay				tay
.4071	68		pla				pla
.4072	60		rts				rts
.4073					CheckOverwriteCurrent:
.4073	a0 00		ldy #$00			ldy 	#0 						; get address of string being written to temp0
.4075	b5 a1		lda $a1,x			lda 	esInt1+1,x
.4077	85 2b		sta $2b				sta 	temp0+1
.4079	b5 99		lda $99,x			lda 	esInt0+1,x
.407b	85 2a		sta $2a				sta 	temp0
.407d	b1 2a		lda ($2a),y			lda 	(temp0),y 				; get length of string being copied and save it.
.407f	8d 54 0d	sta $0d54			sta 	srcStrLen
.4082	b5 98		lda $98,x			lda 	esInt0,x 				; copy where the final address it being written to temp1.
.4084	85 2c		sta $2c				sta 	temp1 					; e.g. if it is ax$ then temp1 will point to the ax$
.4086	b5 a0		lda $a0,x			lda 	esInt1,x 				; data record + 5
.4088	85 2d		sta $2d				sta 	temp1+1
.408a	a0 01		ldy #$01			ldy 	#1 						; get the MSB of the address of string currently stored there.
.408c	b1 2c		lda ($2c),y			lda 	(temp1),y
.408e	c5 34		cmp $34				cmp 	highMemory+1 			; if < high memory then it cannot be something stored
.4090	90 1b		bcc $40ad			bcc 	_COCFail 				; in hard memory.
.4092	a0 00		ldy #$00			ldy 	#0 						; copy target address - 1 into temp2
.4094	b1 2c		lda ($2c),y			lda 	(temp1),y 				; when allocating hard memory, the overall size is
.4096	e9 01		sbc #$01			sbc 	#1 						; in the previous byte.
.4098	85 2e		sta $2e				sta 	temp2
.409a	c8		iny				iny
.409b	b1 2c		lda ($2c),y			lda 	(temp1),y
.409d	e9 00		sbc #$00			sbc 	#0
.409f	85 2f		sta $2f				sta 	temp2+1
.40a1	a0 00		ldy #$00			ldy 	#0 						; how large is this physical chunk.
.40a3	b1 2e		lda ($2e),y			lda 	(temp2),y
.40a5	38		sec				sec  							; maximum character capacity.
.40a6	e9 02		sbc #$02			sbc 	#2
.40a8	cd 54 0d	cmp $0d54			cmp 	srcStrLen 				; if >= the required length
.40ab	b0 02		bcs $40af			bcs 	_COCCanReuse
.40ad					_COCFail:
.40ad	18		clc				clc
.40ae	60		rts				rts
.40af					_COCCanReuse:
.40af	38		sec				sec
.40b0	60		rts				rts
.40b1					RequiresConcretion:
.40b1	a5 2b		lda $2b				lda 	temp0+1 				; get MSB of address of string to be written
.40b3	c5 34		cmp $34				cmp 	highMemory+1 			; if >= high memory it is concreted
.40b5	b0 0a		bcs $40c1			bcs 	_RCSucceed 				; so it needs concreting again - duplication.
.40b7	a5 3a		lda $3a				lda 	softMemAlloc+1 			; have we allocated any soft memory yet ?
.40b9	f0 08		beq $40c3			beq 	_RCFail 				; if not, this cannot be soft memory.
.40bb	a5 2b		lda $2b				lda 	temp0+1 				; get MSB of address of string to be written
.40bd	c5 3a		cmp $3a				cmp 	softMemAlloc+1 			; if >= soft mem alloc it is either soft
.40bf	90 02		bcc $40c3			bcc 	_RCFail 				; so concreting
.40c1					_RCSucceed:
.40c1	38		sec				sec
.40c2	60		rts				rts
.40c3					_RCFail:
.40c3	18		clc				clc
.40c4	60		rts				rts
.40c5					AllocateHardMemory:
.40c5	98		tya				tya
.40c6	48		pha				pha
.40c7	ad 54 0d	lda $0d54			lda 	srcStrLen 				; characters in string
.40ca	69 0a		adc #$0a			adc 	#1+1+8 					; one for hard memory size, one for string size, extra for expansion
.40cc	b0 04		bcs $40d2			bcs 	_AHMSetMax 				; max out that amount.
.40ce	c9 fe		cmp #$fe			cmp 	#MaxStringSize+2
.40d0	90 02		bcc $40d4			bcc 	_AHMIsOkay
.40d2					_AHMSetMax:
.40d2	a9 fe		lda #$fe			lda 	#MaxStringSize+2
.40d4					_AHMIsOkay:
.40d4	48		pha				pha	 							; save size to be allocated
.40d5	49 ff		eor #$ff			eor 	#$FF 					; complement and add to high Memory
.40d7	38		sec				sec  							; and copy result to TOS as target address.
.40d8	65 33		adc $33				adc 	highMemory
.40da	85 33		sta $33				sta 	highMemory
.40dc	a5 34		lda $34				lda 	highMemory+1
.40de	69 ff		adc #$ff			adc 	#$FF
.40e0	85 34		sta $34				sta 	highMemory+1
.40e2	a0 00		ldy #$00			ldy 	#0 						; Y = 0
.40e4	68		pla				pla 							; get the total size of the storage block
.40e5	91 33		sta ($33),y			sta 	(highMemory),y 			; and set it
.40e7	18		clc				clc
.40e8	a5 33		lda $33				lda		highMemory 				; point the target address to the byte after this.
.40ea	69 01		adc #$01			adc 	#1
.40ec	91 2c		sta ($2c),y			sta 	(temp1),y
.40ee	a5 34		lda $34				lda 	highMemory+1
.40f0	69 00		adc #$00			adc 	#0
.40f2	c8		iny				iny
.40f3	91 2c		sta ($2c),y			sta 	(temp1),y
.40f5	68		pla				pla
.40f6	a8		tay				tay
.40f7	60		rts				rts
.40f8					CopyStringToHardMemory:
.40f8	98		tya				tya
.40f9	48		pha				pha
.40fa	a0 00		ldy #$00			ldy 	#0 						; copy target address to temp2
.40fc	b1 2c		lda ($2c),y			lda 	(temp1),y
.40fe	85 2e		sta $2e				sta 	temp2
.4100	c8		iny				iny
.4101	b1 2c		lda ($2c),y			lda 	(temp1),y
.4103	85 2f		sta $2f				sta 	temp2+1
.4105	ac 54 0d	ldy $0d54			ldy 	srcStrLen 				; copy this + 1 characters, (length too) hence $FF compare
.4108					_CSTHMLoop:
.4108	b1 2a		lda ($2a),y			lda 	(temp0),y
.410a	91 2e		sta ($2e),y			sta 	(temp2),y
.410c	88		dey				dey
.410d	c0 ff		cpy #$ff			cpy 	#$FF 					; this does the +1
.410f	d0 f7		bne $4108			bne 	_CSTHMLoop
.4111	68		pla				pla
.4112	a8		tay				tay
.4113	60		rts				rts
.4114					CheckSpecialConcretion:
.4114	ad 54 0d	lda $0d54			lda 	srcStrLen 				; check string is null e.g. length = 0
.4117	f0 02		beq $411b			beq 	_CSCNullString
.4119	18		clc				clc
.411a	60		rts				rts
.411b					_CSCNullString:
.411b	a9 00		lda #$00			lda 	#0 						; by always returning this address we don't waste
.411d	8d ce 0a	sta $0ace			sta 	NullString		 		; storage on null strings.
.4120	a9 ce		lda #$ce			lda 	#(NullString) & $FF
.4122	85 2a		sta $2a				sta 	temp0
.4124	a9 0a		lda #$0a			lda 	#(NullString) >> 8
.4126	85 2b		sta $2b				sta 	1+(temp0)
.4128	38		sec				sec
.4129	60		rts				rts

;******  Return to file: string/string.asm

.412a					stringHandler:
.412a	7c 2d 41	jmp ($412d,x)			jmp 	(stringVectors,x)
.412d					stringVectors:
>412d	3f 41					.word _DummyControlHandler ; index 0
>412f	8d 3e					.word StringChrs           ; index 2
>4131	89 3f					.word StrClone             ; index 4
>4133	01 3f					.word StringConcat         ; index 6
>4135	9c 3e					.word StringNull           ; index 8
>4137	b8 3e					.word STRCompare           ; index 10
>4139	af 3f					.word CaseString           ; index 12
>413b	f4 3f					.word StringSubstring      ; index 14
>413d	48 40					.word StringWrite          ; index 16
.413f					_DummyControlHandler:
.413f	60		rts			rts

;******  Return to file: basic.asm

.4140					section_end_string:
.4140					section_start_tokeniser:

;******  Processing file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/detokenise/detokenise.asm

.0d55					deTokeniseVector:
>0d55							.fill 	2
.0d57					lastCharacterClass:
>0d57							.fill 	1
.0d58					indent:
>0d58							.fill 	1
.4140					ListLine:
.4140	48		pha				pha								; enter here to list to console. sets the output vector
.4141	a9 78		lda #$78			lda 	#(deTokenPrint) & $FF
.4143	8d 55 0d	sta $0d55			sta 	deTokeniseVector
.4146	a9 42		lda #$42			lda 	#(deTokenPrint) >> 8
.4148	8d 56 0d	sta $0d56			sta 	1+(deTokeniseVector)
.414b	68		pla				pla
.414c					Detokenise:
.414c	18		clc				clc 							; space required for line number.
.414d	69 06		adc #$06			adc 	#6
.414f	8d 58 0d	sta $0d58			sta 	indent
.4152	a9 ff		lda #$ff			lda 	#$FF 					; last thing printed is a dummy value.
.4154	8d 57 0d	sta $0d57			sta 	lastCharacterClass
.4157	a2 02		ldx #$02			ldx 	#2
.4159	a9 00		lda #$00			lda 	#0 						; clear upper two bytes
.415b	95 a8		sta $a8,x			sta 	esInt2,x
.415d	95 b0		sta $b0,x			sta 	esInt3,x
.415f	a0 01		ldy #$01			ldy 	#1 						; copy line number to stack,2 (as using stack 0,1 for list range)
.4161	b1 28		lda ($28),y			lda 	(codePtr),y
.4163	95 98		sta $98,x			sta 	esInt0,x
.4165	c8		iny				iny
.4166	b1 28		lda ($28),y			lda 	(codePtr),y
.4168	95 a0		sta $a0,x			sta 	esInt1,x
.416a	a9 84		lda #$84			lda 	#LTYLineNumber
.416c	20 53 42	jsr $4253			jsr 	ListOutputCharacter
.416f	a9 0a		lda #$0a			lda 	#10 					; base 10
.4171	20 17 42	jsr $4217			jsr 	DTPrintInteger 			; print as integer.
.4174	a0 00		ldy #$00			ldy 	#0 						; get length
.4176	b1 2a		lda ($2a),y			lda 	(temp0),y 				; into X
.4178	aa		tax				tax
.4179					_DTPadOut:
.4179	a9 20		lda #$20			lda 	#" " 					; pad out to indent.
.417b	20 53 42	jsr $4253			jsr 	ListOutputCharacter
.417e	e8		inx				inx
.417f	ec 58 0d	cpx $0d58			cpx 	indent
.4182	d0 f5		bne $4179			bne 	_DTPadOut
.4184	a0 03		ldy #$03			ldy 	#3 						; start position.
.4186					_DTListLoop:
.4186	b1 28		lda ($28),y			lda 	(codePtr),y
.4188	c9 85		cmp #$85			cmp 	#TOK_STR 				; Inline string.
.418a	f0 5e		beq $41ea			beq 	_DTIsString
.418c	c9 84		cmp #$84			cmp 	#TOK_FPC 				; Floating point
.418e	f0 56		beq $41e6			beq 	_DTIsFloat
.4190	c9 c5		cmp #$c5			cmp 	#TKW_AMP 				; & hex marker
.4192	f0 16		beq $41aa			beq 	_DTHexConstant
.4194	c9 80		cmp #$80			cmp 	#TOK_EOL 				; End of Line
.4196	d0 06		bne $419e			bne 	_DTNotEnd
.4198	a9 ff		lda #$ff			lda 	#255 					; print CR
.419a	20 53 42	jsr $4253			jsr 	ListOutputCharacter
.419d	60		rts				rts
.419e					_DTNotEnd:
.419e	c9 00		cmp #$00			cmp 	#0
.41a0	30 38		bmi $41da			bmi 	_DTIsToken
.41a2	c9 40		cmp #$40			cmp 	#$40
.41a4	90 3a		bcc $41e0			bcc 	_DTIsIdentifier
.41a6	a9 0a		lda #$0a			lda 	#10 					; this is the base, unsigned decimal
.41a8	d0 0d		bne $41b7			bne 	_DTConstant
.41aa					_DTHexConstant:
.41aa	a9 26		lda #$26			lda 	#"&"
.41ac	20 53 42	jsr $4253			jsr 	ListOutputCharacter
.41af	c8		iny				iny
.41b0	a9 01		lda #$01			lda 	#1 						; switch to spaces so &xxxx is treated like a number.
.41b2	20 94 42	jsr $4294			jsr 	DTSwitchMode
.41b5	a9 10		lda #$10			lda 	#16						; print line unsigned hex
.41b7					_DTConstant:
.41b7	48		pha				pha
.41b8	a9 00		lda #$00			lda 	#0 						; now constant, may need spaces
.41ba	20 94 42	jsr $4294			jsr 	DTSwitchMode
.41bd	a9 86		lda #$86			lda 	#LTYConstant
.41bf	20 53 42	jsr $4253			jsr 	ListOutputCharacter
.41c2	a2 02		ldx #$02			ldx 	#2 						; get its value
.41c4	8a		txa				txa
.41c5	a2 10		ldx #$10		ldx	#16
.41c7	20 6d 3e	jsr $3e6d		jsr	mainHandler
.41ca	aa		tax				tax
.41cb	68		pla				pla 							; get base back
.41cc	85 32		sta $32				sta 	tempShort
.41ce	98		tya				tya
.41cf	48		pha				pha
.41d0	a5 32		lda $32				lda 	tempShort 				; print in base A stck level X
.41d2	20 17 42	jsr $4217			jsr 	DTPrintInteger
.41d5	68		pla				pla
.41d6	a8		tay				tay
.41d7	4c 86 41	jmp $4186			jmp 	_DTListLoop
.41da					_DTIsToken:
.41da	20 ed 42	jsr $42ed			jsr 	DTDecodeToken
.41dd	4c 86 41	jmp $4186			jmp 	_DTListLoop
.41e0					_DTIsIdentifier:
.41e0	20 a6 42	jsr $42a6			jsr 	DTIdentifier
.41e3	4c 86 41	jmp $4186			jmp 	_DTListLoop
.41e6					_DTIsFloat:
>41e6	db						.byte 	$DB
.41e7	4c e6 41	jmp $41e6			jmp 	_DTIsFloat
.41ea					_DTIsString:
.41ea	a9 01		lda #$01			lda 	#1 							; now punctuation, may need spaces
.41ec	20 94 42	jsr $4294			jsr 	DTSwitchMode
.41ef	a9 81		lda #$81			lda 	#LTYString
.41f1	20 53 42	jsr $4253			jsr 	ListOutputCharacter
.41f4	a9 22		lda #$22			lda 	#'"'						; open quote
.41f6	20 53 42	jsr $4253			jsr 	ListOutputCharacter
.41f9	a2 02		ldx #$02			ldx 	#2 							; evaluate string to TOS2.
.41fb	8a		txa				txa
.41fc	a2 10		ldx #$10		ldx	#16
.41fe	20 6d 3e	jsr $3e6d		jsr	mainHandler
.4201	aa		tax				tax
.4202	b5 98		lda $98,x			lda 	esInt0,x 					; copy string address to temp0
.4204	85 2a		sta $2a				sta 	temp0
.4206	b5 a0		lda $a0,x			lda 	esInt1,x
.4208	85 2b		sta $2b				sta 	temp0+1
.420a	a9 00		lda #$00			lda 	#0 							; don't capitalise.
.420c	20 29 42	jsr $4229			jsr 	DTPrintLengthPrefix
.420f	a9 22		lda #$22			lda 	#'"'
.4211	20 53 42	jsr $4253			jsr 	ListOutputCharacter
.4214	4c 86 41	jmp $4186			jmp 	_DTListLoop

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/detokenise/dtprint.asm

.0d59					tPrintCount:
>0d59							.fill 	1
.4217					DTPrintInteger:
.4217	48		pha				pha									; save base
.4218	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.421a	85 2a		sta $2a				sta 	temp0
.421c	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.421e	85 2b		sta $2b				sta 	1+(temp0)
.4220	68		pla				pla
.4221	a8		tay				tay
.4222	8a		txa				txa
.4223	a2 12		ldx #$12		ldx	#18
.4225	20 6d 3e	jsr $3e6d		jsr	mainHandler
.4228	aa		tax				tax 								; then drop through here.
.4229					DTPrintLengthPrefix:
.4229	aa		tax				tax 								; A = 0 = don't case convert.
.422a	98		tya				tya
.422b	48		pha				pha
.422c	a0 00		ldy #$00			ldy 	#0 							; get string length = chars to print.
.422e	b1 2a		lda ($2a),y			lda 	(temp0),y
.4230	8d 59 0d	sta $0d59			sta 	tPrintCount
.4233	f0 1b		beq $4250			beq 	_DTPLPExit 					; empty string
.4235					_DTPLPLoop:
.4235	c8		iny				iny 								; get next.
.4236	b1 2a		lda ($2a),y			lda 	(temp0),y
.4238	29 7f		and #$7f			and 	#$7F
.423a	e0 00		cpx #$00			cpx 	#0 							; skip if not case converting
.423c	f0 0a		beq $4248			beq 	_DTPLPNoCase
.423e	c9 41		cmp #$41			cmp 	#"A" 						; if converting UC -> LC
.4240	90 06		bcc $4248			bcc 	_DTPLPNoCase
.4242	c9 5b		cmp #$5b			cmp 	#"Z"+1
.4244	b0 02		bcs $4248			bcs 	_DTPLPNoCase
.4246	49 20		eor #$20			eor 	#"A"^"a"
.4248					_DTPLPNoCase
.4248	20 53 42	jsr $4253			jsr 	ListOutputCharacter 		; call handler
.424b	ce 59 0d	dec $0d59			dec 	tPrintCount 				; do all the characters
.424e	d0 e5		bne $4235			bne 	_DTPLPLoop
.4250					_DTPLPExit:
.4250	68		pla				pla
.4251	a8		tay				tay
.4252	60		rts				rts
.4253					ListOutputCharacter:
.4253	85 32		sta $32				sta 	tempShort
.4255	48		pha				pha
.4256	8a		txa				txa
.4257	48		pha				pha
.4258	98		tya				tya
.4259	48		pha				pha
.425a	a5 32		lda $32				lda 	tempShort 					; convert ASCII 6 bit (0-31) to 7 bit.
.425c	c9 20		cmp #$20			cmp 	#32
.425e	b0 0c		bcs $426c			bcs		_LOCHiBit
.4260	09 40		ora #$40			ora 	#64 						; conversion
.4262	c9 40		cmp #$40			cmp 	#64							; make l/c
.4264	f0 06		beq $426c			beq 	_LOCHiBit
.4266	c9 5b		cmp #$5b			cmp 	#65+26
.4268	b0 02		bcs $426c			bcs 	_LOCHiBit
.426a	69 20		adc #$20			adc 	#32
.426c					_LOCHiBit:
.426c	20 75 42	jsr $4275			jsr 	_LOCCallVector				; call o/p handler routine
.426f	68		pla				pla
.4270	a8		tay				tay
.4271	68		pla				pla
.4272	aa		tax				tax
.4273	68		pla				pla
.4274					_LOCExit:
.4274	60		rts				rts
.4275					_LOCCallVector:
.4275	6c 55 0d	jmp ($0d55)			jmp 	(deTokeniseVector)
.4278					deTokenPrint:
.4278	c9 00		cmp #$00			cmp 	#0 							; if bit 7 sets ink colour
.427a	30 06		bmi $4282			bmi 	_dtpInk
.427c	a2 16		ldx #$16		ldx	#22
.427e	20 f6 14	jsr $14f6		jsr	deviceHandler
.4281	60		rts				rts
.4282	c9 ff		cmp #$ff	_dtpInk:cmp 	#255 						; e.g. herhe, get ink and set it
.4284	f0 08		beq $428e			beq 	_dtpCR						; except $FF => CRLF
.4286	29 07		and #$07			and 	#7
.4288	a2 08		ldx #$08		ldx	#8
.428a	20 f6 14	jsr $14f6		jsr	deviceHandler
.428d	60		rts				rts
.428e					_dtpCR:
.428e	a2 06		ldx #$06		ldx	#6
.4290	20 f6 14	jsr $14f6		jsr	deviceHandler
.4293	60		rts				rts
.4294					DTSwitchMode:
.4294	cd 57 0d	cmp $0d57			cmp 	LastCharacterClass 			; if changed, update character class
.4297	f0 04		beq $429d			beq 	_DTSMNoChange
.4299	8d 57 0d	sta $0d57			sta 	LastCharacterClass
.429c					_DTSMExit:
.429c	60		rts				rts
.429d					_DTSMNoChange:
.429d	c9 01		cmp #$01			cmp 	#1 							; if didn't change to punctuation, two identifiers so we
.429f	f0 fb		beq $429c			beq 	_DTSMExit 					; need a space.
.42a1	a9 20		lda #$20			lda 	#" "
.42a3	4c 53 42	jmp $4253			jmp 	ListOutputCharacter

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/detokenise/identifier.asm

.42a6					DTIdentifier:
.42a6	a9 00		lda #$00			lda 	#0 							; now text, may need spaces
.42a8	20 94 42	jsr $4294			jsr 	DTSwitchMode
.42ab	a9 87		lda #$87			lda 	#LTYIdentifier
.42ad	20 53 42	jsr $4253			jsr 	ListOutputCharacter
.42b0					_DTILoop:
.42b0	b1 28		lda ($28),y			lda 	(codePtr),y 				; output main bit of identifier.
.42b2	c9 2d		cmp #$2d			cmp 	#"-"						; make - back to _
.42b4	d0 02		bne $42b8			bne 	_DTINotUS
.42b6	a9 5f		lda #$5f			lda 	#"_"
.42b8					_DTINotUS:
.42b8	20 53 42	jsr $4253			jsr 	ListOutputCharacter
.42bb	c8		iny				iny
.42bc	b1 28		lda ($28),y			lda 	(codePtr),y 				; until end identifier marker.
.42be	c9 3a		cmp #$3a			cmp 	#$3A
.42c0	90 ee		bcc $42b0			bcc 	_DTILoop
.42c2	c8		iny				iny
.42c3	c9 3a		cmp #$3a			cmp 	#$3A 						; is it integer non array
.42c5	f0 25		beq $42ec			beq 	_DTIExit 					; no postfix.
.42c7	48		pha				pha
.42c8	a9 01		lda #$01			lda  	#1 							; it ends in punctuation
.42ca	8d 57 0d	sta $0d57			sta 	LastCharacterClass
.42cd	a9 82		lda #$82			lda 	#LTYPunctuation
.42cf	20 53 42	jsr $4253			jsr 	ListOutputCharacter
.42d2	68		pla				pla
.42d3	c9 3b		cmp #$3b			cmp 	#$3B
.42d5	f0 10		beq $42e7			beq 	_DTIArray
.42d7	4a		lsr a				lsr 	a 							; array flag in C
.42d8	08		php				php
.42d9	49 1e		eor #$1e			eor 	#$3C/2 						; check if $
.42db	f0 02		beq $42df			beq 	_DTIDollar
.42dd	a9 07		lda #$07			lda 	#"$"^"#" 					; this if #, 0 if $
.42df					_DTIDollar:
.42df	49 24		eor #$24			eor 	#"$"
.42e1	20 53 42	jsr $4253			jsr 	ListOutputCharacter
.42e4	28		plp				plp
.42e5	90 05		bcc $42ec			bcc 	_DTIExit
.42e7					_DTIArray:
.42e7	a9 28		lda #$28			lda 	#"("
.42e9	20 53 42	jsr $4253			jsr 	ListOutputCharacter
.42ec					_DTIExit:
.42ec	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/detokenise/token.asm

.42ed					DTDecodeToken:
.42ed	a2 00		ldx #$00			ldx 	#0 							; table number to use
.42ef	b1 28		lda ($28),y			lda 	(codePtr),y
.42f1	c9 84		cmp #$84			cmp 	#$84
.42f3	b0 05		bcs $42fa			bcs 	_DTNotShift
.42f5	29 03		and #$03			and 	#3 							; get the shift 1..3
.42f7	0a		asl a				asl 	a 							; put 2 x in X
.42f8	aa		tax				tax
.42f9	c8		iny				iny
.42fa					_DTNotShift:
.42fa	bd fc 45	lda $45fc,x			lda 	TokenTableAddress,x 		; get the token table to use to decode it.
.42fd	85 2a		sta $2a				sta 	temp0 						; point into temp0
.42ff	bd fd 45	lda $45fd,x			lda 	TokenTableAddress+1,x
.4302	85 2b		sta $2b				sta 	temp0+1
.4304	b1 28		lda ($28),y			lda 	(codePtr),y 				; get the token value.
.4306	c8		iny				iny 								; consume it.
.4307	aa		tax				tax
.4308	98		tya				tya
.4309	48		pha				pha
.430a					_DTFindText:
.430a	e0 86		cpx #$86			cpx 	#$86 						; finished ?
.430c	f0 11		beq $431f			beq 	_DTFoundText
.430e	ca		dex				dex
.430f	a0 00		ldy #$00			ldy 	#0 							; add length+1 to temp0
.4311	38		sec				sec
.4312	b1 2a		lda ($2a),y			lda 	(temp0),y
.4314	65 2a		adc $2a				adc 	temp0
.4316	85 2a		sta $2a				sta 	temp0
.4318	90 f0		bcc $430a			bcc 	_DTFindText
.431a	e6 2b		inc $2b				inc 	temp0+1
.431c	4c 0a 43	jmp $430a			jmp 	_DTFindText
.431f					_DTFoundText:
.431f	a0 01		ldy #$01			ldy 	#1 							; get first character
.4321	b1 2a		lda ($2a),y			lda 	(temp0),y
.4323	29 7f		and #$7f			and 	#$7F 						; will have bit 7 set.
.4325	c9 41		cmp #$41			cmp 	#"A" 						; check for punctuation.
.4327	90 11		bcc $433a			bcc 	_DTIsPunctuation
.4329	c9 5b		cmp #$5b			cmp 	#"Z"+1
.432b	b0 0d		bcs $433a			bcs 	_DTIsPunctuation
.432d	a9 00		lda #$00			lda 	#0 							; now text, may need spaces
.432f	20 94 42	jsr $4294			jsr 	DTSwitchMode
.4332	a9 83		lda #$83			lda 	#LTYKeyword
.4334	20 53 42	jsr $4253			jsr 	ListOutputCharacter
.4337	4c 44 43	jmp $4344			jmp 	_DTPrint
.433a					_DTIsPunctuation:
.433a	a9 01		lda #$01			lda 	#1 							; now punctuation, may need spaces
.433c	20 94 42	jsr $4294			jsr 	DTSwitchMode
.433f	a9 82		lda #$82			lda 	#LTYPunctuation
.4341	20 53 42	jsr $4253			jsr 	ListOutputCharacter
.4344					_DTPrint:
.4344	a9 01		lda #$01			lda 	#1 							; fix case.
.4346	20 29 42	jsr $4229			jsr 	DTPrintLengthPrefix 		; print it out.
.4349	a0 00		ldy #$00			ldy 	#0
.434b	b1 2a		lda ($2a),y			lda 	(temp0),y
.434d	a8		tay				tay
.434e	b1 2a		lda ($2a),y			lda 	(temp0),y
.4350	29 7f		and #$7f			and 	#$7F 						; will have bit 7 set.
.4352	c9 41		cmp #$41			cmp 	#"A" 						; check for punctuation.
.4354	90 04		bcc $435a			bcc 	_DTIsNowPunctuation
.4356	c9 5b		cmp #$5b			cmp 	#"Z"+1
.4358	90 05		bcc $435f			bcc 	_DTPExit
.435a					_DTIsNowPunctuation:
.435a	a9 01		lda #$01			lda 	#1
.435c	8d 57 0d	sta $0d57			sta		LastCharacterClass
.435f					_DTPExit:
.435f	68		pla				pla
.4360	a8		tay				tay
.4361	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/search.asm

.0d5a					currentSet:
>0d5a							.fill 	1
.4362					TokenSearch:
.4362	8a		txa				txa
.4363	48		pha				pha
.4364	98		tya				tya
.4365	48		pha				pha
.4366	a9 00		lda #$00			lda 	#0
.4368	8d 5a 0d	sta $0d5a			sta 	currentSet
.436b					_TSLoop:
.436b	ad 5a 0d	lda $0d5a			lda 	currentSet 					; 2 x currentset in X
.436e	0a		asl a				asl 	a
.436f	aa		tax				tax
.4370	bd fc 45	lda $45fc,x			lda 	TokenTableAddress,x 		; set temp0 to the table address
.4373	85 2a		sta $2a				sta 	temp0
.4375	bd fd 45	lda $45fd,x			lda 	TokenTableAddress+1,x
.4378	85 2b		sta $2b				sta 	temp0+1
.437a	20 a1 43	jsr $43a1			jsr 	TokenSearchOne 				; search one table
.437d	b0 0d		bcs $438c			bcs 	_TSFound 					; found a token.
.437f	ee 5a 0d	inc $0d5a			inc 	currentSet 					; next set
.4382	ad 5a 0d	lda $0d5a			lda 	currentSet
.4385	c9 04		cmp #$04			cmp 	#4
.4387	d0 e2		bne $436b			bne 	_TSLoop 					; back if not done all four.
.4389	18		clc				clc 								; clear carry and exit
.438a	90 10		bcc $439c			bcc 	_TSExit
.438c					_TSFound:
.438c	48		pha				pha 								; save token
.438d	ad 5a 0d	lda $0d5a			lda 	currentSet					; if set zero no shift
.4390	f0 05		beq $4397			beq 	_TSNoShift
.4392	09 80		ora #$80			ora 	#$80 						; Write as $81-$83
.4394	20 52 44	jsr $4452			jsr 	TokenWrite
.4397					_TSNoShift:
.4397	68		pla				pla 								; get token back
.4398	20 52 44	jsr $4452			jsr 	TokenWrite 					; write it
.439b	38		sec				sec 								; carry set indicating success
.439c					_TSExit:
.439c	68		pla				pla
.439d	a8		tay				tay
.439e	68		pla				pla
.439f	aa		tax				tax
.43a0	60		rts				rts
.43a1					TokenSearchOne:
.43a1	a2 86		ldx #$86			ldx 	#$86 						; current token being tested.
.43a3					_TSOLoop:
.43a3	a0 00		ldy #$00			ldy 	#0
.43a5	b1 2a		lda ($2a),y			lda 	(temp0),y 					; get length of token
.43a7	f0 26		beq $43cf			beq 	_TSOFail 					; if zero, end of table
.43a9	cd cf 0a	cmp $0acf			cmp 	convertBuffer 				; length is the same, compare the text matches.
.43ac	f0 11		beq $43bf			beq 	_TSOCheckText
.43ae					_TSONext:
.43ae	e8		inx				inx 								; bump token
.43af	a0 00		ldy #$00			ldy 	#0							; get length
.43b1	b1 2a		lda ($2a),y			lda 	(temp0),y
.43b3	38		sec				sec
.43b4	65 2a		adc $2a				adc 	temp0 						; add to temp0 + 1
.43b6	85 2a		sta $2a				sta 	temp0
.43b8	90 e9		bcc $43a3			bcc 	_TSOLoop
.43ba	e6 2b		inc $2b				inc 	temp0+1
.43bc	4c a3 43	jmp $43a3			jmp 	_TSOLoop
.43bf					_TSOCheckText:
.43bf	a8		tay				tay 								; compare length downto 1.
.43c0					_TSOCheckLoop:
.43c0	b1 2a		lda ($2a),y			lda 	(temp0),y 					; use EOR to compare
.43c2	59 cf 0a	eor $0acf,y			eor 	convertBuffer,y
.43c5	29 7f		and #$7f			and 	#$7F 						; ignore bit 7
.43c7	d0 e5		bne $43ae			bne 	_TSONext 					; different goto next.
.43c9	88		dey				dey 								; do all
.43ca	d0 f4		bne $43c0			bne 	_TSOCheckLoop
.43cc	8a		txa				txa 								; return token in A and carry set
.43cd	38		sec				sec
.43ce	60		rts				rts
.43cf					_TSOFail:
.43cf	18		clc				clc
.43d0	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/test.asm

.43d1					TokTest:
.43d1	a2 ff		ldx #$ff				ldx 	#$FF
.43d3	9a		txs					txs
.43d4	a9 f1		lda #$f1			lda 	#(TokenText1) & $FF
.43d6	85 28		sta $28				sta 	codePtr
.43d8	a9 43		lda #$43			lda 	#(TokenText1) >> 8
.43da	85 29		sta $29				sta 	1+(codePtr)
.43dc	20 f1 43	jsr $43f1				jsr 	Tokenise
.43df	a2 00		ldx #$00	TokStop:	ldx 	#0 					; compare vs precalculated result
.43e1	bd f1 43	lda $43f1,x	_TokCheck:	lda 	TokenBytes1,x
.43e4	dd 5e 0d	cmp $0d5e,x				cmp 	tokenBuffer,x
.43e7	d0 fe		bne $43e7	_TokFail:	bne 	_TokFail	 		; error.
.43e9	e8		inx					inx
.43ea	c9 80		cmp #$80				cmp 	#$80
.43ec	d0 f3		bne $43e1				bne 	_TokCheck
.43ee	4c ff ff	jmp $ffff				jmp 	$FFFF 				; successfully tokenised then quit.

;******  Processing file: tokeniser/tokenise/../../generated/toktest.inc

.43f1					TokenText1:
.43f1					TokenBytes1:

;******  Return to file: tokeniser/tokenise/test.asm


;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokenise.asm

.0d5b					tokenHeader:
>0d5b							.fill 	3
.0d5e					tokenBuffer:
>0d5e							.fill 	256
.0e5e					tokenBufferIndex:
>0e5e							.fill 	1
.43f1					Tokenise:
.43f1	20 6b 44	jsr $446b			jsr 	TokeniseMakeASCIIZ 			; convert to ASCIIZ string.
.43f4					TokeniseASCIIZ:
.43f4	20 7c 44	jsr $447c			jsr 	TokeniseFixCase 			; remove controls and lower case outside quotes.
.43f7	a9 00		lda #$00			lda 	#0 							; reset the token buffer index
.43f9	8d 5e 0e	sta $0e5e			sta 	tokenBufferIndex
.43fc	a8		tay				tay 								; start pointer
.43fd	a9 80		lda #$80			lda 	#$80 						; empty token buffer ($80 ends it)
.43ff	8d 5e 0d	sta $0d5e			sta 	tokenBuffer
.4402					_TokLoop:
.4402	b1 28		lda ($28),y			lda 	(codePtr),y 				; get next character
.4404	f0 46		beq $444c			beq 	_TokExit 					; if zero, then exit.
.4406	c8		iny				iny 								; skip over spaces.
.4407	c9 20		cmp #$20			cmp 	#" "
.4409	f0 f7		beq $4402			beq 	_TokLoop
.440b	88		dey				dey 								; point back to character.
.440c	c9 26		cmp #$26			cmp 	#"&"						; Hexadecimal constant.
.440e	f0 18		beq $4428			beq 	_TokHexConst
.4410	c9 22		cmp #$22			cmp 	#'"'						; Quoted String
.4412	f0 23		beq $4437			beq 	_TokQString
.4414	c9 5b		cmp #$5b			cmp 	#"Z"+1 						; > 'Z' is punctuation
.4416	b0 26		bcs $443e			bcs 	_TokPunctuation
.4418	c9 41		cmp #$41			cmp 	#"A" 						; A..Z identifier
.441a	b0 29		bcs $4445			bcs 	_TokIdentifier
.441c	c9 3a		cmp #$3a			cmp 	#"9"+1
.441e	b0 1e		bcs $443e			bcs 	_TokPunctuation 			; between 9 and A exclusive, punctuation
.4420	c9 30		cmp #$30			cmp 	#"0"
.4422	90 1a		bcc $443e			bcc 	_TokPunctuation 			; < 0, punctuation.
.4424	a9 0a		lda #$0a			lda 	#10  						; 0..9 constant in base 10.
.4426	d0 08		bne $4430			bne 	_TokConst
.4428					_TokHexConst:
.4428	c8		iny				iny									; consume token.
.4429	a9 c5		lda #$c5			lda 	#TKW_AMP 					; Write ampersand token out
.442b	20 52 44	jsr $4452			jsr 	TokenWrite
.442e	a9 10		lda #$10			lda 	#16
.4430					_TokConst:
.4430	20 3a 45	jsr $453a			jsr 	TokeniseInteger
.4433	b0 cd		bcs $4402			bcs 	_TokLoop
.4435	90 18		bcc $444f			bcc 	_TokFail
.4437					_TokQString:
.4437	20 d0 45	jsr $45d0			jsr 	TokeniseString
.443a	b0 c6		bcs $4402			bcs 	_TokLoop
.443c	90 11		bcc $444f			bcc 	_TokFail
.443e					_TokPunctuation:
.443e	20 af 45	jsr $45af			jsr 	TokenisePunctuation
.4441	b0 bf		bcs $4402			bcs 	_TokLoop
.4443	90 0a		bcc $444f			bcc 	_TokFail
.4445					_TokIdentifier:
.4445	20 ab 44	jsr $44ab			jsr 	TokeniseIdentifier
.4448	b0 b8		bcs $4402			bcs 	_TokLoop
.444a	90 03		bcc $444f			bcc 	_TokFail
.444c					_TokExit:
.444c	a9 01		lda #$01			lda 	#1
.444e	60		rts				rts
.444f					_TokFail:
.444f	a9 00		lda #$00			lda 	#0
.4451	60		rts				rts
.4452					TokenWrite:
.4452	85 32		sta $32				sta 	tempShort 					; save XA
.4454	48		pha				pha
.4455	8a		txa				txa
.4456	48		pha				pha
.4457	a5 32		lda $32				lda 	tempShort
.4459	ae 5e 0e	ldx $0e5e			ldx 	tokenBufferIndex 			; geet index
.445c	9d 5e 0d	sta $0d5e,x			sta 	tokenBuffer,x 				; write byte to buffer
.445f	a9 80		lda #$80			lda 	#TOK_EOL 					; pre-emptively write EOL marker after
.4461	9d 5f 0d	sta $0d5f,x			sta 	tokenBuffer+1,x
.4464	ee 5e 0e	inc $0e5e			inc 	tokenBufferIndex 			; bump index
.4467	68		pla				pla
.4468	aa		tax				tax
.4469	68		pla				pla
.446a	60		rts				rts
.446b					TokeniseMakeASCIIZ:
.446b	a0 00		ldy #$00			ldy 	#0							; get length of string.
.446d	b1 28		lda ($28),y			lda 	(codePtr),y
.446f	a8		tay				tay
.4470	c8		iny				iny 								; +1, the NULL goes here.
.4471	a9 00		lda #$00			lda 	#0
.4473	91 28		sta ($28),y			sta 	(codePtr),y 				; write the trailing NULL.
.4475	e6 28		inc $28				inc 	codePtr 					; bump the pointer.
.4477	d0 02		bne $447b			bne 	_TMKAExit
.4479	e6 29		inc $29				inc 	codePtr+1
.447b					_TMKAExit:
.447b	60		rts				rts
.447c					TokeniseFixCase:
.447c	a0 00		ldy #$00			ldy 	#0 							; position in buffer.
.447e	a2 01		ldx #$01			ldx 	#1 							; bit 0 of this is 'in quotes'
.4480					_TFCFlipQ:
.4480	8a		txa				txa
.4481	49 01		eor #$01			eor 	#1
.4483	aa		tax				tax
.4484					_TFCLoop:
.4484	b1 28		lda ($28),y			lda 	(codePtr),y 				; get character
.4486	f0 22		beq $44aa			beq 	_TFCExit 					; if zero exit.
.4488	c9 20		cmp #$20			cmp 	#32 						; if control
.448a	90 1a		bcc $44a6			bcc 	_TFCControl
.448c	c8		iny				iny 								; preconsume
.448d	c9 22		cmp #$22			cmp 	#'"'
.448f	f0 ef		beq $4480			beq 	_TFCFlipQ
.4491	c9 61		cmp #$61			cmp 	#"a"						; check if L/C
.4493	90 ef		bcc $4484			bcc 	_TFCLoop
.4495	c9 7b		cmp #$7b			cmp 	#"z"+1
.4497	b0 eb		bcs $4484			bcs 	_TFCLoop
.4499	e0 00		cpx #$00			cpx 	#0 							; in quotes, if so, leave alone.
.449b	d0 e7		bne $4484			bne 	_TFCLoop
.449d	88		dey				dey
.449e	49 20		eor #$20			eor 	#"A"^"a"					; make U/C
.44a0					_TFCWrite:
.44a0	91 28		sta ($28),y			sta 	(codePtr),y
.44a2	c8		iny				iny
.44a3	4c 84 44	jmp $4484			jmp 	_TFCLoop
.44a6					_TFCControl:
.44a6	a9 20		lda #$20			lda 	#" "
.44a8	d0 f6		bne $44a0			bne 	_TFCWrite
.44aa					_TFCExit:
.44aa	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokident.asm

.44ab					TokeniseIdentifier:
.44ab	a2 00		ldx #$00			ldx 	#0
.44ad					_TICopyID:
.44ad	b1 28		lda ($28),y			lda 	(codePtr),y					; get characters
.44af	c9 5f		cmp #$5f			cmp 	#"_" 						; underscore converted to minus internally.
.44b1	f0 16		beq $44c9			beq 	_TICopyUnderscore
.44b3	c9 2e		cmp #$2e			cmp 	#"."
.44b5	f0 14		beq $44cb			beq 	_TICopyIn
.44b7	c9 30		cmp #$30			cmp 	#"0"
.44b9	90 1b		bcc $44d6			bcc 	_TIEndCopy
.44bb	c9 3a		cmp #$3a			cmp 	#"9"+1
.44bd	90 0c		bcc $44cb			bcc 	_TICopyIn
.44bf	c9 41		cmp #$41			cmp 	#"A"
.44c1	90 13		bcc $44d6			bcc 	_TIEndCopy
.44c3	c9 5b		cmp #$5b			cmp 	#"Z"+1
.44c5	b0 0f		bcs $44d6			bcs		_TIEndCopy
.44c7	90 02		bcc $44cb			bcc 	_TICopyIn
.44c9					_TICopyUnderScore:
.44c9	a9 2d		lda #$2d			lda 	#"-"						; _ is mapped to -
.44cb					_TICopyIn:
.44cb	e8		inx				inx 								; write into buffer in 7 bit ASCII form
.44cc	9d cf 0a	sta $0acf,x			sta 	convertBuffer,x
.44cf	8e cf 0a	stx $0acf			stx 	convertBuffer
.44d2	c8		iny				iny 								; next character
.44d3	4c ad 44	jmp $44ad			jmp 	_TICopyID 					; loop round
.44d6					_TIEndCopy:
.44d6	a9 24		lda #$24			lda 	#"$"
.44d8	20 2d 45	jsr $452d			jsr 	TIDCheckCopy
.44db	a9 23		lda #$23			lda 	#"#"
.44dd	20 2d 45	jsr $452d			jsr 	TIDCheckCopy
.44e0	a9 28		lda #$28			lda 	#"("
.44e2	20 2d 45	jsr $452d			jsr 	TIDCheckCopy
.44e5	20 62 43	jsr $4362			jsr 	TokenSearch 				; is it a token
.44e8	b0 41		bcs $452b			bcs 	_TIExit 					; if so, then exit.
.44ea	98		tya				tya
.44eb	48		pha				pha
.44ec	a0 3a		ldy #$3a			ldy 	#$3A 						; default type.
.44ee	ae cf 0a	ldx $0acf			ldx 	convertBuffer 				; is last character (
.44f1	bd cf 0a	lda $0acf,x			lda 	convertBuffer,x
.44f4	c9 28		cmp #$28			cmp 	#"("
.44f6	d0 02		bne $44fa			bne 	_TINotArray
.44f8	ca		dex				dex 								; yes, remove it and convert to array.
.44f9	c8		iny				iny
.44fa					_TINotArray:
.44fa	bd cf 0a	lda $0acf,x			lda 	convertBuffer,x 			; check for $
.44fd	c9 24		cmp #$24			cmp 	#"$"
.44ff	d0 03		bne $4504			bne 	_TINotString
.4501	ca		dex				dex
.4502	c8		iny				iny
.4503	c8		iny				iny
.4504					_TINotString:
.4504	bd cf 0a	lda $0acf,x			lda 	convertBuffer,x 			; check for #
.4507	c9 23		cmp #$23			cmp 	#"#"
.4509	d0 05		bne $4510			bne 	_TINotFloat
.450b	ca		dex				dex
.450c	c8		iny				iny
.450d	c8		iny				iny
.450e	c8		iny				iny
.450f	c8		iny				iny
.4510					_TINotFloat:
.4510	e8		inx				inx 								; write end marker for identifier.
.4511	98		tya				tya
.4512	9d cf 0a	sta $0acf,x			sta 	convertBuffer,x
.4515	8e cf 0a	stx $0acf			stx 	convertBuffer 				; update length.
.4518	a2 01		ldx #$01			ldx 	#1
.451a					_TIOutput:
.451a	bd cf 0a	lda $0acf,x			lda 	convertBuffer,x
.451d	29 3f		and #$3f			and 	#$3F
.451f	48		pha				pha
.4520	20 52 44	jsr $4452			jsr 	TokenWrite
.4523	e8		inx				inx
.4524	68		pla				pla
.4525	c9 3a		cmp #$3a			cmp 	#$3A
.4527	90 f1		bcc $451a			bcc 	_TIOutput
.4529	68		pla				pla
.452a	a8		tay				tay
.452b					_TIExit:
.452b	38		sec				sec 								; this can't fail.
.452c	60		rts				rts
.452d					TIDCheckCopy:
.452d	d1 28		cmp ($28),y			cmp 	(codePtr),y
.452f	d0 08		bne $4539			bne 	_TIDCCExit
.4531	e8		inx				inx
.4532	9d cf 0a	sta $0acf,x			sta 	convertBuffer,x
.4535	8e cf 0a	stx $0acf			stx 	convertBuffer
.4538	c8		iny				iny
.4539					_TIDCCExit:
.4539	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokinteger.asm

.453a					TokeniseInteger:
.453a	85 2c		sta $2c				sta 	temp1 						; save base
.453c	a2 00		ldx #$00			ldx 	#0							; count of chars so far
.453e	8e cf 0a	stx $0acf			stx 	convertBuffer
.4541					_TIGetChars:
.4541	b1 28		lda ($28),y			lda 	(codePtr),y 				; check character is numeric
.4543	c9 30		cmp #$30			cmp 	#"0"
.4545	90 1f		bcc $4566			bcc 	_TIEndGet
.4547	c9 3a		cmp #$3a			cmp 	#"9"+1
.4549	90 10		bcc $455b			bcc 	_TIHaveChar
.454b	a5 2c		lda $2c				lda 	temp1 						; fail if not hex mode
.454d	c9 0a		cmp #$0a			cmp 	#10
.454f	f0 15		beq $4566			beq 	_TIEndGet
.4551	b1 28		lda ($28),y			lda 	(codePtr),y 				; check legitimate hex.
.4553	c9 41		cmp #$41			cmp 	#"A"
.4555	90 0f		bcc $4566			bcc 	_TIEndGet
.4557	c9 5b		cmp #$5b			cmp 	#"Z"+1
.4559	b0 0b		bcs $4566			bcs 	_TIEndGet
.455b					_TIHaveChar:
.455b	e8		inx				inx 								; write into buffer.
.455c	8e cf 0a	stx $0acf			stx 	convertBuffer
.455f	9d cf 0a	sta $0acf,x			sta 	convertBuffer,x
.4562	c8		iny				iny 								; next char
.4563	4c 41 45	jmp $4541			jmp 	_TIGetChars
.4566					_TIEndGet:
.4566	e0 00		cpx #$00			cpx 	#0 							; no char acquired.
.4568	f0 1c		beq $4586			beq 	_TIFail
.456a	98		tya				tya
.456b	48		pha				pha
.456c	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.456e	85 2a		sta $2a				sta 	temp0
.4570	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.4572	85 2b		sta $2b				sta 	1+(temp0)
.4574	a9 00		lda #$00			lda 	#0 							; stack level 0
.4576	a4 2c		ldy $2c				ldy 	temp1 						; base Y
.4578	a2 1a		ldx #$1a		ldx	#26
.457a	20 6d 3e	jsr $3e6d		jsr	mainHandler
.457d	68		pla				pla
.457e	a8		tay				tay
.457f	90 05		bcc $4586			bcc 	_TIFail 					; didn't convert.
.4581	20 88 45	jsr $4588			jsr 	TIRecursiveOut 				; recursive output ?
.4584	38		sec				sec
.4585	60		rts				rts
.4586					_TIFail:
.4586	18		clc				clc
.4587	60		rts				rts
.4588					TIRecursiveOut:
.4588	a5 98		lda $98				lda 	esInt0 						; get value to output after possible recursion
.458a	29 3f		and #$3f			and 	#$3F
.458c	09 40		ora #$40			ora 	#$40
.458e	48		pha				pha
.458f	a5 98		lda $98				lda 	esInt0 						; are we recursing ?
.4591	29 c0		and #$c0			and 	#$C0
.4593	05 a0		ora $a0				ora 	esInt1
.4595	05 a8		ora $a8				ora 	esInt2
.4597	05 b0		ora $b0				ora 	esInt3
.4599	f0 10		beq $45ab			beq 	_TIRONoRecursion
.459b	a2 06		ldx #$06			ldx 	#6 							; shift right x 6
.459d					_TIROShift:
.459d	46 b0		lsr $b0				lsr 	esInt3
.459f	66 a8		ror $a8				ror 	esInt2
.45a1	66 a0		ror $a0				ror 	esInt1
.45a3	66 98		ror $98				ror 	esInt0
.45a5	ca		dex				dex
.45a6	d0 f5		bne $459d			bne 	_TIROShift
.45a8	20 88 45	jsr $4588			jsr 	TIRecursiveOut 				; call recursively
.45ab					_TIRONoRecursion:
.45ab	68		pla				pla 								; pull the old bit.
.45ac	4c 52 44	jmp $4452			jmp 	TokenWrite

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokpunct.asm

.45af					TokenisePunctuation:
.45af	b1 28		lda ($28),y			lda	 	(codePtr),y 				; copy next 2 chars into convertBuffer
.45b1	8d d0 0a	sta $0ad0			sta 	convertBuffer+1
.45b4	c8		iny				iny
.45b5	b1 28		lda ($28),y			lda 	(codePtr),y
.45b7	8d d1 0a	sta $0ad1			sta 	convertBuffer+2
.45ba	c8		iny				iny 								; Y is +2
.45bb	a9 02		lda #$02			lda 	#2 							; 2 character string.
.45bd	8d cf 0a	sta $0acf			sta 	convertBuffer
.45c0	20 62 43	jsr $4362			jsr 	TokenSearch 				; search for that token.
.45c3	b0 0a		bcs $45cf			bcs 	_TIFound
.45c5	ce cf 0a	dec $0acf			dec 	convertBuffer 				; make it a 1 character string
.45c8	88		dey				dey 								; Y is now +1
.45c9	20 62 43	jsr $4362			jsr 	TokenSearch 				; search for that token.
.45cc	b0 01		bcs $45cf			bcs 	_TIFound
.45ce	88		dey				dey 								; Y is now +0, carry clear indicating failure.
.45cf					_TIFound:
.45cf	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokstring.asm

.45d0					TokeniseString:
.45d0	c8		iny				iny 								; skip opening quote
.45d1	a2 ff		ldx #$ff			ldx 	#255 						; count length of string.
.45d3	84 2a		sty $2a				sty 	temp0 						; save start.
.45d5					_TSGetLength:
.45d5	b1 28		lda ($28),y			lda 	(codePtr),y 				; get next
.45d7	f0 21		beq $45fa			beq 	_TSFail						; end of line, fail
.45d9	c8		iny				iny
.45da	e8		inx				inx
.45db	c9 22		cmp #$22			cmp 	#'"' 						; until end quote found.
.45dd	d0 f6		bne $45d5			bne 	_TSGetLength
.45df	a9 85		lda #$85			lda 	#TOK_STR 					; write string token out
.45e1	20 52 44	jsr $4452			jsr 	TokenWrite
.45e4	8a		txa				txa 								; output length
.45e5	20 52 44	jsr $4452			jsr 	TokenWrite
.45e8	a4 2a		ldy $2a				ldy 	temp0 						; get original position
.45ea	e0 00		cpx #$00			cpx 	#0 							; check ended
.45ec	f0 09		beq $45f7			beq 	_TSExit
.45ee					_TSOutput:
.45ee	b1 28		lda ($28),y			lda 	(codePtr),y					; output character
.45f0	20 52 44	jsr $4452			jsr 	TokenWrite
.45f3	c8		iny				iny
.45f4	ca		dex				dex
.45f5	d0 f7		bne $45ee			bne 	_TSOutput
.45f7					_TSExit:
.45f7	c8		iny				iny 								; skip ending quote
.45f8	38		sec				sec 								; return CS.
.45f9	60		rts				rts
.45fa					_TSFail:
.45fa	18		clc				clc
.45fb	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokentext.asm

.45fc					TokenTableAddress:
>45fc	04 46						.word 	Group0Text
>45fe	d7 47						.word 	Group1Text
>4600	24 49						.word 	Group2Text
>4602	7c 49						.word 	Group3Text

;******  Processing file: tokeniser/../generated/tokentext0.inc

.4604					Group0Text:
>4604	03 41 4e c4				.byte $03,$41,$4e,$c4                  ; $86 and
>4608	02 4f d2				.byte $02,$4f,$d2                      ; $87 or
>460b	03 58 4f d2				.byte $03,$58,$4f,$d2                  ; $88 xor
>460f	02 3e bd				.byte $02,$3e,$bd                      ; $89 >=
>4612	02 3c bd				.byte $02,$3c,$bd                      ; $8a <=
>4615	01 be					.byte $01,$be                          ; $8b >
>4617	01 bc					.byte $01,$bc                          ; $8c <
>4619	01 bd					.byte $01,$bd                          ; $8d =
>461b	02 3c be				.byte $02,$3c,$be                      ; $8e <>
>461e	01 ab					.byte $01,$ab                          ; $8f +
>4620	01 ad					.byte $01,$ad                          ; $90 -
>4622	02 3e be				.byte $02,$3e,$be                      ; $91 >>
>4625	02 3c bc				.byte $02,$3c,$bc                      ; $92 <<
>4628	01 aa					.byte $01,$aa                          ; $93 *
>462a	01 af					.byte $01,$af                          ; $94 /
>462c	03 4d 4f c4				.byte $03,$4d,$4f,$c4                  ; $95 mod
>4630	01 de					.byte $01,$de                          ; $96 ^
>4632	01 a1					.byte $01,$a1                          ; $97 !
>4634	01 bf					.byte $01,$bf                          ; $98 ?
>4636	06 52 45 50 45 41 d4			.byte $06,$52,$45,$50,$45,$41,$d4      ; $99 repeat
>463d	05 57 48 49 4c c5			.byte $05,$57,$48,$49,$4c,$c5          ; $9a while
>4643	03 46 4f d2				.byte $03,$46,$4f,$d2                  ; $9b for
>4647	02 49 c6				.byte $02,$49,$c6                      ; $9c if
>464a	07 44 45 46 50 52 4f c3			.byte $07,$44,$45,$46,$50,$52,$4f,$c3  ; $9d defproc
>4652	05 55 4e 54 49 cc			.byte $05,$55,$4e,$54,$49,$cc          ; $9e until
>4658	04 57 45 4e c4				.byte $04,$57,$45,$4e,$c4              ; $9f wend
>465d	04 4e 45 58 d4				.byte $04,$4e,$45,$58,$d4              ; $a0 next
>4662	04 54 48 45 ce				.byte $04,$54,$48,$45,$ce              ; $a1 then
>4667	05 45 4e 44 49 c6			.byte $05,$45,$4e,$44,$49,$c6          ; $a2 endif
>466d	07 45 4e 44 50 52 4f c3			.byte $07,$45,$4e,$44,$50,$52,$4f,$c3  ; $a3 endproc
>4675	01 a8					.byte $01,$a8                          ; $a4 (
>4677	04 4c 45 4e a8				.byte $04,$4c,$45,$4e,$a8              ; $a5 len(
>467c	04 53 47 4e a8				.byte $04,$53,$47,$4e,$a8              ; $a6 sgn(
>4681	04 41 42 53 a8				.byte $04,$41,$42,$53,$a8              ; $a7 abs(
>4686	07 52 41 4e 44 4f 4d a8			.byte $07,$52,$41,$4e,$44,$4f,$4d,$a8  ; $a8 random(
>468e	04 50 41 47 c5				.byte $04,$50,$41,$47,$c5              ; $a9 page
>4693	04 54 52 55 c5				.byte $04,$54,$52,$55,$c5              ; $aa true
>4698	05 46 41 4c 53 c5			.byte $05,$46,$41,$4c,$53,$c5          ; $ab false
>469e	04 4d 49 4e a8				.byte $04,$4d,$49,$4e,$a8              ; $ac min(
>46a3	04 4d 41 58 a8				.byte $04,$4d,$41,$58,$a8              ; $ad max(
>46a8	04 53 59 53 a8				.byte $04,$53,$59,$53,$a8              ; $ae sys(
>46ad	06 54 49 4d 45 52 a8			.byte $06,$54,$49,$4d,$45,$52,$a8      ; $af timer(
>46b4	06 45 56 45 4e 54 a8			.byte $06,$45,$56,$45,$4e,$54,$a8      ; $b0 event(
>46bb	04 47 45 54 a8				.byte $04,$47,$45,$54,$a8              ; $b1 get(
>46c0	06 49 4e 4b 45 59 a8			.byte $06,$49,$4e,$4b,$45,$59,$a8      ; $b2 inkey(
>46c7	06 41 4c 4c 4f 43 a8			.byte $06,$41,$4c,$4c,$4f,$43,$a8      ; $b3 alloc(
>46ce	05 43 48 52 24 a8			.byte $05,$43,$48,$52,$24,$a8          ; $b4 chr$(
>46d4	06 4c 45 46 54 24 a8			.byte $06,$4c,$45,$46,$54,$24,$a8      ; $b5 left$(
>46db	05 4d 49 44 24 a8			.byte $05,$4d,$49,$44,$24,$a8          ; $b6 mid$(
>46e1	07 52 49 47 48 54 24 a8			.byte $07,$52,$49,$47,$48,$54,$24,$a8  ; $b7 right$(
>46e9	05 53 54 52 24 a8			.byte $05,$53,$54,$52,$24,$a8          ; $b8 str$(
>46ef	04 56 41 4c a8				.byte $04,$56,$41,$4c,$a8              ; $b9 val(
>46f4	05 50 45 45 4b a8			.byte $05,$50,$45,$45,$4b,$a8          ; $ba peek(
>46fa	05 44 45 45 4b a8			.byte $05,$44,$45,$45,$4b,$a8          ; $bb deek(
>4700	05 4c 45 45 4b a8			.byte $05,$4c,$45,$45,$4b,$a8          ; $bc leek(
>4706	04 41 53 43 a8				.byte $04,$41,$53,$43,$a8              ; $bd asc(
>470b	04 49 4e 54 a8				.byte $04,$49,$4e,$54,$a8              ; $be int(
>4710	06 46 4c 4f 41 54 a8			.byte $06,$46,$4c,$4f,$41,$54,$a8      ; $bf float(
>4717	06 49 53 56 41 4c a8			.byte $06,$49,$53,$56,$41,$4c,$a8      ; $c0 isval(
>471e	07 55 50 50 45 52 24 a8			.byte $07,$55,$50,$50,$45,$52,$24,$a8  ; $c1 upper$(
>4726	07 4c 4f 57 45 52 24 a8			.byte $07,$4c,$4f,$57,$45,$52,$24,$a8  ; $c2 lower$(
>472e	01 c0					.byte $01,$c0                          ; $c3 @
>4730	01 fe					.byte $01,$fe                          ; $c4 ~
>4732	01 a6					.byte $01,$a6                          ; $c5 &
>4734	05 47 45 54 24 a8			.byte $05,$47,$45,$54,$24,$a8          ; $c6 get$(
>473a	07 49 4e 4b 45 59 24 a8			.byte $07,$49,$4e,$4b,$45,$59,$24,$a8  ; $c7 inkey$(
>4742	03 4d 45 cd				.byte $03,$4d,$45,$cd                  ; $c8 mem
>4746	01 a9					.byte $01,$a9                          ; $c9 )
>4748	01 ba					.byte $01,$ba                          ; $ca :
>474a	01 ac					.byte $01,$ac                          ; $cb ,
>474c	01 bb					.byte $01,$bb                          ; $cc ;
>474e	01 a7					.byte $01,$a7                          ; $cd '
>4750	02 54 cf				.byte $02,$54,$cf                      ; $ce to
>4753	04 53 54 45 d0				.byte $04,$53,$54,$45,$d0              ; $cf step
>4758	04 50 52 4f c3				.byte $04,$50,$52,$4f,$c3              ; $d0 proc
>475d	05 4c 4f 43 41 cc			.byte $05,$4c,$4f,$43,$41,$cc          ; $d1 local
>4763	03 44 49 cd				.byte $03,$44,$49,$cd                  ; $d2 dim
>4767	03 52 45 cd				.byte $03,$52,$45,$cd                  ; $d3 rem
>476b	03 4c 45 d4				.byte $03,$4c,$45,$d4                  ; $d4 let
>476f	05 49 4e 50 55 d4			.byte $05,$49,$4e,$50,$55,$d4          ; $d5 input
>4775	04 45 4c 53 c5				.byte $04,$45,$4c,$53,$c5              ; $d6 else
>477a	03 56 44 d5				.byte $03,$56,$44,$d5                  ; $d7 vdu
>477e	05 50 52 49 4e d4			.byte $05,$50,$52,$49,$4e,$d4          ; $d8 print
>4784	04 44 41 54 c1				.byte $04,$44,$41,$54,$c1              ; $d9 data
>4789	05 49 4d 41 47 c5			.byte $05,$49,$4d,$41,$47,$c5          ; $da image
>478f	02 41 d4				.byte $02,$41,$d4                      ; $db at
>4792	04 46 4c 49 d0				.byte $04,$46,$4c,$49,$d0              ; $dc flip
>4797	06 41 53 53 45 52 d4			.byte $06,$41,$53,$53,$45,$52,$d4      ; $dd assert
>479e	04 50 4f 4b c5				.byte $04,$50,$4f,$4b,$c5              ; $de poke
>47a3	04 44 4f 4b c5				.byte $04,$44,$4f,$4b,$c5              ; $df doke
>47a8	04 4c 4f 4b c5				.byte $04,$4c,$4f,$4b,$c5              ; $e0 loke
>47ad	03 49 4e cb				.byte $03,$49,$4e,$cb                  ; $e1 ink
>47b1	05 50 41 50 45 d2			.byte $05,$50,$41,$50,$45,$d2          ; $e2 paper
>47b7	03 43 4c d3				.byte $03,$43,$4c,$d3                  ; $e3 cls
>47bb	06 4c 4f 43 41 54 c5			.byte $06,$4c,$4f,$43,$41,$54,$c5      ; $e4 locate
>47c2	01 ae					.byte $01,$ae                          ; $e5 .
>47c4	04 46 52 4f cd				.byte $04,$46,$52,$4f,$cd              ; $e6 from
>47c9	01 a3					.byte $01,$a3                          ; $e7 #
>47cb	05 43 4c 45 41 d2			.byte $05,$43,$4c,$45,$41,$d2          ; $e8 clear
>47d1	04 54 45 58 d4				.byte $04,$54,$45,$58,$d4              ; $e9 text
>47d6	00					.byte $00

;******  Return to file: tokeniser/tokentext.asm


;******  Processing file: tokeniser/../generated/tokentext1.inc

.47d7					Group1Text:
>47d7	04 4c 4f 41 c4				.byte $04,$4c,$4f,$41,$c4              ; $86 load
>47dc	04 53 41 56 c5				.byte $04,$53,$41,$56,$c5              ; $87 save
>47e1	04 4c 49 53 d4				.byte $04,$4c,$49,$53,$d4              ; $88 list
>47e6	03 4e 45 d7				.byte $03,$4e,$45,$d7                  ; $89 new
>47ea	05 42 52 45 41 cb			.byte $05,$42,$52,$45,$41,$cb          ; $8a break
>47f0	03 52 55 ce				.byte $03,$52,$55,$ce                  ; $8b run
>47f4	04 52 45 41 c4				.byte $04,$52,$45,$41,$c4              ; $8c read
>47f9	07 52 45 53 54 4f 52 c5			.byte $07,$52,$45,$53,$54,$4f,$52,$c5  ; $8d restore
>4801	03 45 4e c4				.byte $03,$45,$4e,$c4                  ; $8e end
>4805	04 53 54 4f d0				.byte $04,$53,$54,$4f,$d0              ; $8f stop
>480a	04 58 45 4d d5				.byte $04,$58,$45,$4d,$d5              ; $90 xemu
>480f	04 47 4f 54 cf				.byte $04,$47,$4f,$54,$cf              ; $91 goto
>4814	05 47 4f 53 55 c2			.byte $05,$47,$4f,$53,$55,$c2          ; $92 gosub
>481a	06 52 45 54 55 52 ce			.byte $06,$52,$45,$54,$55,$52,$ce      ; $93 return
>4821	03 4f 52 c1				.byte $03,$4f,$52,$c1                  ; $94 ora
>4825	05 28 41 4e 44 a9			.byte $05,$28,$41,$4e,$44,$a9          ; $95 (and)
>482b	03 45 4f d2				.byte $03,$45,$4f,$d2                  ; $96 eor
>482f	03 41 44 c3				.byte $03,$41,$44,$c3                  ; $97 adc
>4833	03 53 54 c1				.byte $03,$53,$54,$c1                  ; $98 sta
>4837	03 4c 44 c1				.byte $03,$4c,$44,$c1                  ; $99 lda
>483b	03 43 4d d0				.byte $03,$43,$4d,$d0                  ; $9a cmp
>483f	03 53 42 c3				.byte $03,$53,$42,$c3                  ; $9b sbc
>4843	03 41 53 cc				.byte $03,$41,$53,$cc                  ; $9c asl
>4847	03 52 4f cc				.byte $03,$52,$4f,$cc                  ; $9d rol
>484b	03 4c 53 d2				.byte $03,$4c,$53,$d2                  ; $9e lsr
>484f	03 52 4f d2				.byte $03,$52,$4f,$d2                  ; $9f ror
>4853	03 53 54 d8				.byte $03,$53,$54,$d8                  ; $a0 stx
>4857	03 4c 44 d8				.byte $03,$4c,$44,$d8                  ; $a1 ldx
>485b	03 44 45 c3				.byte $03,$44,$45,$c3                  ; $a2 dec
>485f	03 49 4e c3				.byte $03,$49,$4e,$c3                  ; $a3 inc
>4863	03 53 54 da				.byte $03,$53,$54,$da                  ; $a4 stz
>4867	03 42 49 d4				.byte $03,$42,$49,$d4                  ; $a5 bit
>486b	03 53 54 d9				.byte $03,$53,$54,$d9                  ; $a6 sty
>486f	03 4c 44 d9				.byte $03,$4c,$44,$d9                  ; $a7 ldy
>4873	03 43 50 d9				.byte $03,$43,$50,$d9                  ; $a8 cpy
>4877	03 43 50 d8				.byte $03,$43,$50,$d8                  ; $a9 cpx
>487b	03 54 53 c2				.byte $03,$54,$53,$c2                  ; $aa tsb
>487f	03 54 52 c2				.byte $03,$54,$52,$c2                  ; $ab trb
>4883	03 4a 53 d2				.byte $03,$4a,$53,$d2                  ; $ac jsr
>4887	03 4a 4d d0				.byte $03,$4a,$4d,$d0                  ; $ad jmp
>488b	03 42 50 cc				.byte $03,$42,$50,$cc                  ; $ae bpl
>488f	03 42 4d c9				.byte $03,$42,$4d,$c9                  ; $af bmi
>4893	03 42 56 c3				.byte $03,$42,$56,$c3                  ; $b0 bvc
>4897	03 42 56 d3				.byte $03,$42,$56,$d3                  ; $b1 bvs
>489b	03 42 43 c3				.byte $03,$42,$43,$c3                  ; $b2 bcc
>489f	03 42 43 d3				.byte $03,$42,$43,$d3                  ; $b3 bcs
>48a3	03 42 4e c5				.byte $03,$42,$4e,$c5                  ; $b4 bne
>48a7	03 42 45 d1				.byte $03,$42,$45,$d1                  ; $b5 beq
>48ab	03 42 52 c1				.byte $03,$42,$52,$c1                  ; $b6 bra
>48af	03 42 52 cb				.byte $03,$42,$52,$cb                  ; $b7 brk
>48b3	03 50 48 d0				.byte $03,$50,$48,$d0                  ; $b8 php
>48b7	03 43 4c c3				.byte $03,$43,$4c,$c3                  ; $b9 clc
>48bb	03 50 4c d0				.byte $03,$50,$4c,$d0                  ; $ba plp
>48bf	03 53 45 c3				.byte $03,$53,$45,$c3                  ; $bb sec
>48c3	03 52 54 c9				.byte $03,$52,$54,$c9                  ; $bc rti
>48c7	03 50 48 c1				.byte $03,$50,$48,$c1                  ; $bd pha
>48cb	03 43 4c c9				.byte $03,$43,$4c,$c9                  ; $be cli
>48cf	03 50 48 d9				.byte $03,$50,$48,$d9                  ; $bf phy
>48d3	03 52 54 d3				.byte $03,$52,$54,$d3                  ; $c0 rts
>48d7	03 50 4c c1				.byte $03,$50,$4c,$c1                  ; $c1 pla
>48db	03 53 45 c9				.byte $03,$53,$45,$c9                  ; $c2 sei
>48df	03 50 4c d9				.byte $03,$50,$4c,$d9                  ; $c3 ply
>48e3	03 44 45 d9				.byte $03,$44,$45,$d9                  ; $c4 dey
>48e7	03 54 58 c1				.byte $03,$54,$58,$c1                  ; $c5 txa
>48eb	03 54 59 c1				.byte $03,$54,$59,$c1                  ; $c6 tya
>48ef	03 54 58 d3				.byte $03,$54,$58,$d3                  ; $c7 txs
>48f3	03 54 41 d9				.byte $03,$54,$41,$d9                  ; $c8 tay
>48f7	03 54 41 d8				.byte $03,$54,$41,$d8                  ; $c9 tax
>48fb	03 43 4c d6				.byte $03,$43,$4c,$d6                  ; $ca clv
>48ff	03 54 53 d8				.byte $03,$54,$53,$d8                  ; $cb tsx
>4903	03 49 4e d9				.byte $03,$49,$4e,$d9                  ; $cc iny
>4907	03 44 45 d8				.byte $03,$44,$45,$d8                  ; $cd dex
>490b	03 43 4c c4				.byte $03,$43,$4c,$c4                  ; $ce cld
>490f	03 50 48 d8				.byte $03,$50,$48,$d8                  ; $cf phx
>4913	03 49 4e d8				.byte $03,$49,$4e,$d8                  ; $d0 inx
>4917	03 4e 4f d0				.byte $03,$4e,$4f,$d0                  ; $d1 nop
>491b	03 53 45 c4				.byte $03,$53,$45,$c4                  ; $d2 sed
>491f	03 50 4c d8				.byte $03,$50,$4c,$d8                  ; $d3 plx
>4923	00					.byte $00

;******  Return to file: tokeniser/tokentext.asm


;******  Processing file: tokeniser/../generated/tokentext2.inc

.4924					Group2Text:
>4924	05 56 50 4f 4b c5			.byte $05,$56,$50,$4f,$4b,$c5          ; $86 vpoke
>492a	05 56 44 4f 4b c5			.byte $05,$56,$44,$4f,$4b,$c5          ; $87 vdoke
>4930	05 56 4c 4f 41 c4			.byte $05,$56,$4c,$4f,$41,$c4          ; $88 vload
>4936	04 4d 4f 44 c5				.byte $04,$4d,$4f,$44,$c5              ; $89 mode
>493b	07 50 41 4c 45 54 54 c5			.byte $07,$50,$41,$4c,$45,$54,$54,$c5  ; $8a palette
>4943	06 53 50 52 49 54 c5			.byte $06,$53,$50,$52,$49,$54,$c5      ; $8b sprite
>494a	03 43 4c c7				.byte $03,$43,$4c,$c7                  ; $8c clg
>494e	04 52 45 43 d4				.byte $04,$52,$45,$43,$d4              ; $8d rect
>4953	05 46 52 41 4d c5			.byte $05,$46,$52,$41,$4d,$c5          ; $8e frame
>4959	04 44 52 41 d7				.byte $04,$44,$52,$41,$d7              ; $8f draw
>495e	04 50 4c 4f d4				.byte $04,$50,$4c,$4f,$d4              ; $90 plot
>4963	04 4c 49 4e c5				.byte $04,$4c,$49,$4e,$c5              ; $91 line
>4968	05 50 41 49 4e d4			.byte $05,$50,$41,$49,$4e,$d4          ; $92 paint
>496e	05 53 4f 55 4e c4			.byte $05,$53,$4f,$55,$4e,$c4          ; $93 sound
>4974	06 56 4f 4c 55 4d c5			.byte $06,$56,$4f,$4c,$55,$4d,$c5      ; $94 volume
>497b	00					.byte $00

;******  Return to file: tokeniser/tokentext.asm


;******  Processing file: tokeniser/../generated/tokentext3.inc

.497c					Group3Text:
>497c	06 56 50 45 45 4b a8			.byte $06,$56,$50,$45,$45,$4b,$a8      ; $86 vpeek(
>4983	06 56 44 45 45 4b a8			.byte $06,$56,$44,$45,$45,$4b,$a8      ; $87 vdeek(
>498a	09 53 50 52 49 54 45 2e			.byte $09,$53,$50,$52,$49,$54,$45,$2e,$58,$a8 ; $88 sprite.x(
>4992	58 a8
>4994	09 53 50 52 49 54 45 2e			.byte $09,$53,$50,$52,$49,$54,$45,$2e,$59,$a8 ; $89 sprite.y(
>499c	59 a8
>499e	04 48 49 54 a8				.byte $04,$48,$49,$54,$a8              ; $8a hit(
>49a3	06 4a 4f 59 2e 58 a8			.byte $06,$4a,$4f,$59,$2e,$58,$a8      ; $8b joy.x(
>49aa	06 4a 4f 59 2e 59 a8			.byte $06,$4a,$4f,$59,$2e,$59,$a8      ; $8c joy.y(
>49b1	06 4a 4f 59 2e 42 a8			.byte $06,$4a,$4f,$59,$2e,$42,$a8      ; $8d joy.b(
>49b8	06 43 4c 4f 43 4b a8			.byte $06,$43,$4c,$4f,$43,$4b,$a8      ; $8e clock(
>49bf	00					.byte $00

;******  Return to file: tokeniser/tokentext.asm


;******  Return to file: tokeniser/tokeniser.asm

.49c0					tokeniserHandler:
.49c0	7c c3 49	jmp ($49c3,x)			jmp 	(tokeniserVectors,x)
.49c3					tokeniserVectors:
>49c3	cf 49					.word _DummyControlHandler ; index 0
>49c5	4c 41					.word Detokenise           ; index 2
>49c7	40 41					.word ListLine             ; index 4
>49c9	d1 43					.word TokTest              ; index 6
>49cb	f1 43					.word Tokenise             ; index 8
>49cd	f4 43					.word TokeniseASCIIZ       ; index 10
.49cf					_DummyControlHandler:
.49cf	60		rts			rts

;******  Return to file: basic.asm

.49d0					section_end_tokeniser:
.49d0					section_start_variable:

;******  Processing file: variable/variable.asm


;******  Processing file: variable/array/access.asm

.49d0					AccessArray:
.49d0	8a		txa				txa
.49d1	48		pha				pha
.49d2	e8		inx				inx
.49d3	20 9c 4a	jsr $4a9c			jsr 	GetArrayDimensions 			; get the array dimensions one up from here.
.49d6	68		pla				pla
.49d7	aa		tax				tax
.49d8	b5 98		lda $98,x			lda 	esInt0,x 					; restore address to follow in temp0.
.49da	85 2a		sta $2a				sta 	temp0
.49dc	b5 a0		lda $a0,x			lda 	esInt1,x
.49de	85 2b		sta $2b				sta 	temp0+1
.49e0	8a		txa				txa
.49e1	48		pha				pha
.49e2	98		tya				tya
.49e3	48		pha				pha
.49e4					_AAFollow:
.49e4	a0 00		ldy #$00			ldy 	#0
.49e6	b1 2a		lda ($2a),y			lda 	(temp0),y
.49e8	48		pha				pha
.49e9	c8		iny				iny
.49ea	b1 2a		lda ($2a),y			lda 	(temp0),y
.49ec	85 2b		sta $2b				sta 	temp0+1
.49ee	68		pla				pla
.49ef	85 2a		sta $2a				sta 	temp0
.49f1	e8		inx				inx 								; advance to next stack slot.
.49f2	a0 00		ldy #$00			ldy 	#0
.49f4	b1 2a		lda ($2a),y			lda 	(temp0),y 					; compare max index vs required index
.49f6	d5 98		cmp $98,x			cmp 	esInt0,x
.49f8	c8		iny				iny
.49f9	b1 2a		lda ($2a),y			lda 	(temp0),y 					; drop bit 7 of the size, indicates follow.
.49fb	85 2c		sta $2c				sta 	temp1 						; save the size in temp1 for later use.
.49fd	29 7f		and #$7f			and 	#$7F
.49ff	f5 a0		sbc $a0,x			sbc 	esInt1,x
.4a01	90 50		bcc $4a53			bcc 	_AABadIndex 				; failed on index if max index < required.
.4a03	18		clc				clc
.4a04	a5 2a		lda $2a				lda 	temp0
.4a06	69 02		adc #$02			adc 	#2
.4a08	85 2a		sta $2a				sta 	temp0
.4a0a	90 02		bcc $4a0e			bcc 	_AANoCarry
.4a0c	e6 2b		inc $2b				inc 	temp0+1
.4a0e					_AANoCarry:
.4a0e	b5 98		lda $98,x			lda 	esInt0,x
.4a10	85 2e		sta $2e				sta 	temp2
.4a12	b5 a0		lda $a0,x			lda 	esInt1,x
.4a14	85 2f		sta $2f				sta 	temp2+1
.4a16	ac 61 0e	ldy $0e61			ldy 	varType
.4a19	b9 f6 4a	lda $4af6,y			lda 	CAActualSize-$3A,y
.4a1c	b4 91		ldy $91,x			ldy 	esType+1,x 					; is it top level
.4a1e	30 02		bmi $4a22			bmi 	_AANotPointer
.4a20	a9 02		lda #$02			lda 	#2 							; array of pointers is 2.
.4a22					_AANotPointer:
.4a22	20 a0 4b	jsr $4ba0			jsr 	MultiplyTemp2ByA 			; multiply the index by the data size, in temp2.
.4a25	18		clc				clc
.4a26	a5 2a		lda $2a				lda 	temp0
.4a28	65 2e		adc $2e				adc 	temp2
.4a2a	85 2a		sta $2a				sta 	temp0
.4a2c	a5 2b		lda $2b				lda 	temp0+1
.4a2e	65 2f		adc $2f				adc 	temp2+1
.4a30	85 2b		sta $2b				sta 	temp0+1
.4a32	b5 91		lda $91,x			lda 	esType+1,x
.4a34	30 07		bmi $4a3d			bmi 	_AAUsedAllIndices
.4a36	a5 2c		lda $2c				lda 	temp1 						; check if this is a pointer array e.g. there are subarrays
.4a38	10 14		bpl $4a4e			bpl 	_AABadDepth 				; no, too many indexes.
.4a3a	4c e4 49	jmp $49e4			jmp 	_AAFollow 					; otherwise follow them.
.4a3d					_AAUsedAllIndices:
.4a3d	a5 2c		lda $2c				lda 	temp1 						; get original high length byte.
.4a3f	30 0d		bmi $4a4e			bmi 	_AABadDepth 				; if -ve then this is an array of pointers.
.4a41	68		pla				pla
.4a42	a8		tay				tay
.4a43	68		pla				pla
.4a44	aa		tax				tax
.4a45	a5 2a		lda $2a				lda 	temp0 						; copy address of array element to stack,x
.4a47	95 98		sta $98,x			sta 	esInt0,x
.4a49	a5 2b		lda $2b				lda 	temp0+1
.4a4b	95 a0		sta $a0,x			sta 	esInt1,x
.4a4d	60		rts				rts
.4a4e					_AABadDepth:
.4a4e	a2 1c		ldx #$1c			ldx 	#ErrorID_ArrayDepth
.4a50	20 18 15	jsr $1518		jsr	errorHandler
.4a53					_AABadIndex:
.4a53	a2 1b		ldx #$1b			ldx 	#ErrorID_ArrayIndex
.4a55	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: variable/variable.asm


;******  Processing file: variable/array/create.asm

.0e5f					elementSize:
>0e5f							.fill	 1
.4a58					CreateArray:
.4a58	20 2f 4c	jsr $4c2f			jsr 	AccessSetup 				; set up the basic stuff.
.4a5b	ad 61 0e	lda $0e61			lda 	varType 					; is the variable type an array
.4a5e	4a		lsr a				lsr 	a
.4a5f	90 36		bcc $4a97			bcc 	CANotArray 					; no, cause an error.
.4a61	20 38 4d	jsr $4d38			jsr 	FindVariable 				; does the variable exist already
.4a64	b0 2c		bcs $4a92			bcs 	CAFound 					; cannot redefine it.
.4a66	20 6c 4c	jsr $4c6c			jsr 	CreateVariable 				; create the variable entry.
.4a69	a5 2a		lda $2a				lda 	temp0 						; push address of new variable entry on the stack
.4a6b	48		pha				pha
.4a6c	a5 2b		lda $2b				lda 	temp0+1
.4a6e	48		pha				pha
.4a6f	a2 00		ldx #$00			ldx 	#0
.4a71	20 9c 4a	jsr $4a9c			jsr 	GetArrayDimensions 			; get the array dimensions
.4a74	a2 00		ldx #$00			ldx 	#0 							; create at level $00
.4a76	20 cc 4a	jsr $4acc			jsr 	CreateArrayLevel 			; level to YA
.4a79	aa		tax				tax 								; level now in YX
.4a7a	68		pla				pla 								; get address back to temp0 to write.
.4a7b	85 2b		sta $2b				sta 	temp0+1
.4a7d	68		pla				pla
.4a7e	85 2a		sta $2a				sta 	temp0
.4a80	98		tya				tya 								; write YX there.
.4a81	a0 06		ldy #$06			ldy 	#6
.4a83	91 2a		sta ($2a),y			sta 	(temp0),y
.4a85	88		dey				dey
.4a86	8a		txa				txa
.4a87	91 2a		sta ($2a),y			sta 	(temp0),y
.4a89	ac 62 0e	ldy $0e62			ldy 	varEnd 						; restore Y and exit.
.4a8c	60		rts				rts
.4a8d					CASize:
.4a8d	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.4a8f	20 18 15	jsr $1518		jsr	errorHandler
.4a92					CAFound:
.4a92	a2 19		ldx #$19			ldx 	#ErrorID_DupArray
.4a94	20 18 15	jsr $1518		jsr	errorHandler
.4a97					CANotArray:
.4a97	a2 1a		ldx #$1a			ldx 	#ErrorID_NotArray
.4a99	20 18 15	jsr $1518		jsr	errorHandler
.4a9c					GetArrayDimensions:
.4a9c	ad 61 0e	lda $0e61			lda 	varType 					; push variable type on the stack.
.4a9f	48		pha				pha
.4aa0	ac 62 0e	ldy $0e62			ldy 	varEnd
.4aa3					_CAGetDimensions:
.4aa3	8a		txa				txa 								; get the next level
.4aa4	a2 0a		ldx #$0a		ldx	#10
.4aa6	20 6d 3e	jsr $3e6d		jsr	mainHandler
.4aa9	aa		tax				tax
.4aaa	b5 a0		lda $a0,x			lda 	esInt1,x 					; index must be < 8192
.4aac	29 e0		and #$e0			and 	#$E0
.4aae	15 a8		ora $a8,x			ora 	esInt2,x
.4ab0	15 b0		ora $b0,x			ora 	esInt3,x
.4ab2	d0 d9		bne $4a8d			bne 	CASize
.4ab4	e8		inx				inx 								; next level.
.4ab5	b1 28		lda ($28),y			lda 	(codePtr),y 				; get/consume following character
.4ab7	c8		iny				iny
.4ab8	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; loop back if more dimensions
.4aba	f0 e7		beq $4aa3			beq 	_CAGetDimensions
.4abc	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN 				; right bracket ?
.4abe	d0 cd		bne $4a8d			bne 	CASize
.4ac0	a9 ff		lda #$ff			lda 	#$FF 						; set the type past the end to $FF so we know how many
.4ac2	95 90		sta $90,x			sta 	esType,x 					; dimensions there are.
.4ac4	68		pla				pla 								; restore the variable type ($3A-$3F)
.4ac5	8d 61 0e	sta $0e61			sta 	varType
.4ac8	8c 62 0e	sty $0e62			sty 	varEnd 						; save exit Y value, after dimensions
.4acb	60		rts				rts
.4acc					CreateArrayLevel:
.4acc	ac 61 0e	ldy $0e61			ldy 	varType
.4acf	b9 f6 4a	lda $4af6,y			lda 	CAActualSize-$3A,y
.4ad2	8d 5f 0e	sta $0e5f			sta 	elementSize 				; get element size this level.
.4ad5	b4 91		ldy $91,x			ldy 	esType+1,x 					; is it top level
.4ad7	30 05		bmi $4ade			bmi 	_CANotPointer
.4ad9	a9 02		lda #$02			lda 	#2 							; array of pointers is 2.
.4adb	8d 5f 0e	sta $0e5f			sta 	elementSize
.4ade					_CANotPointer:
.4ade	a5 35		lda $35				lda 	lowMemory 					; start creating at temp0, saving start on stack.
.4ae0	85 2a		sta $2a				sta 	temp0
.4ae2	48		pha				pha
.4ae3	a5 36		lda $36				lda 	lowMemory+1
.4ae5	85 2b		sta $2b				sta 	temp0+1
.4ae7	48		pha				pha
.4ae8	20 69 4b	jsr $4b69			jsr 	AllocateArraySpace 			; allocate space for all array stuff at this level.
.4aeb	a0 00		ldy #$00			ldy 	#0
.4aed	b5 98		lda $98,x			lda 	esInt0,x
.4aef	91 2a		sta ($2a),y			sta 	(temp0),y
.4af1	c8		iny				iny
.4af2	b5 a0		lda $a0,x			lda 	esInt1,x
.4af4	91 2a		sta ($2a),y			sta 	(temp0),y
.4af6	b5 91		lda $91,x			lda 	esType+1,x 					; do we have another level ?
.4af8	30 06		bmi $4b00			bmi 	_CALNotLast
.4afa	b1 2a		lda ($2a),y			lda 	(temp0),y 					; set bit 7, indicates an array of pointers to other levels.
.4afc	09 80		ora #$80			ora 	#$80
.4afe	91 2a		sta ($2a),y			sta 	(temp0),y
.4b00					_CALNotLast:
.4b00	a9 02		lda #$02			lda 	#2
.4b02	20 26 4b	jsr $4b26			jsr 	_CALAddTemp0
.4b05	b5 98		lda $98,x			lda 	esInt0,x 					; copy stack:01 to stack:23 so we can use it to
.4b07	95 a8		sta $a8,x			sta 	esInt2,x 					; count.
.4b09	b5 a0		lda $a0,x			lda 	esInt1,x
.4b0b	95 b0		sta $b0,x			sta 	esInt3,x
.4b0d					_CALClear:
.4b0d	20 36 4b	jsr $4b36			jsr 	EraseOneElement
.4b10	ad 5f 0e	lda $0e5f			lda 	elementSize 				; move to next element
.4b13	20 26 4b	jsr $4b26			jsr 	_CALAddTemp0
.4b16	b5 a8		lda $a8,x			lda 	esInt2,x 					; decrement counter
.4b18	d0 02		bne $4b1c			bne 	_CALNoBorrow
.4b1a	d6 b0		dec $b0,x			dec 	esInt3,x
.4b1c					_CALNoBorrow:
.4b1c	d6 a8		dec $a8,x			dec 	esInt2,x
.4b1e	b5 b0		lda $b0,x			lda 	esInt3,x 					; loop back if >= 0 - we need +1 because indices
.4b20	10 eb		bpl $4b0d			bpl 	_CALClear 					; start at 0 e.g. x(10) is actually 11 array entries.
.4b22	68		pla				pla 								; restore the start of this into YA.
.4b23	a8		tay				tay
.4b24	68		pla				pla
.4b25	60		rts				rts
.4b26					_CALAddTemp0:
.4b26	18		clc				clc
.4b27	65 2a		adc $2a				adc 	temp0
.4b29	85 2a		sta $2a				sta 	temp0
.4b2b	90 02		bcc $4b2f			bcc 	_CALANoCarry
.4b2d	e6 2b		inc $2b				inc 	temp0+1
.4b2f					_CALANoCarry:
.4b2f	60		rts				rts
.4b30					CAActualSize:
>4b30	04 04						.byte 	VarISize,VarISize
>4b32	02 02						.byte 	VarSSize,VarSSize
>4b34	06 06						.byte 	VarFSize,VarFSize
.4b36					EraseOneElement:
.4b36	b5 91		lda $91,x			lda 	esType+1,x 					; is this a list of sub arrays
.4b38	10 09		bpl $4b43			bpl 	_EOESubArray
.4b3a	a0 00		ldy #$00			ldy 	#0 							; write the empty variable value out.
.4b3c	ad 61 0e	lda $0e61			lda 	varType
.4b3f	20 d6 4c	jsr $4cd6			jsr 	ZeroTemp0Y
.4b42	60		rts				rts
.4b43					_EOESubArray:
.4b43	a5 2a		lda $2a				lda 	temp0 						; save temp0, these are effectively locals.
.4b45	48		pha				pha
.4b46	a5 2b		lda $2b				lda 	temp0+1
.4b48	48		pha				pha
.4b49	ad 5f 0e	lda $0e5f			lda 	elementSize 				; save element size
.4b4c	48		pha				pha
.4b4d	e8		inx				inx 								; create at next level
.4b4e	20 cc 4a	jsr $4acc			jsr 	CreateArrayLevel
.4b51	ca		dex				dex
.4b52	85 32		sta $32				sta 	tempShort 					; save A
.4b54	68		pla				pla  								; restore element size.
.4b55	8d 5f 0e	sta $0e5f			sta 	elementSize
.4b58	68		pla				pla 								; restore temp0, which is where this new array level goes.
.4b59	85 2b		sta $2b				sta 	temp0+1
.4b5b	68		pla				pla
.4b5c	85 2a		sta $2a				sta 	temp0
.4b5e	98		tya				tya 								; store Y/A there
.4b5f	a0 01		ldy #$01			ldy 	#1
.4b61	91 2a		sta ($2a),y			sta 	(temp0),y
.4b63	a5 32		lda $32				lda 	tempShort
.4b65	88		dey				dey
.4b66	91 2a		sta ($2a),y			sta 	(temp0),y
.4b68	60		rts				rts
.4b69					AllocateArraySpace:
.4b69	18		clc				clc 								; element count + 1 => temp2.
.4b6a	b5 98		lda $98,x			lda 	esInt0,x
.4b6c	69 01		adc #$01			adc 	#1
.4b6e	85 2e		sta $2e				sta 	temp2
.4b70	b5 a0		lda $a0,x			lda 	esInt1,x
.4b72	69 00		adc #$00			adc 	#0
.4b74	85 2f		sta $2f				sta 	temp2+1
.4b76	ad 5f 0e	lda $0e5f			lda 	elementSize 				; bytes per element
.4b79	20 a0 4b	jsr $4ba0			jsr 	MultiplyTemp2ByA 			; temp2 = (count + 1) x bytes per element.
.4b7c	18		clc				clc 								; add 2 for 'max element' byte.
.4b7d	a5 2e		lda $2e				lda 	temp2
.4b7f	69 02		adc #$02			adc 	#2
.4b81	85 2e		sta $2e				sta 	temp2
.4b83	90 02		bcc $4b87			bcc 	_AASNoCarry
.4b85	e6 2f		inc $2f				inc 	temp2+1
.4b87					_AASNoCarry:
.4b87	18		clc				clc 								; add to low memory, allocating space.
.4b88	a5 35		lda $35				lda 	lowMemory
.4b8a	65 2e		adc $2e				adc 	temp2
.4b8c	85 35		sta $35				sta 	lowMemory
.4b8e	a5 36		lda $36				lda 	lowMemory+1
.4b90	65 2f		adc $2f				adc 	temp2+1
.4b92	85 36		sta $36				sta 	lowMemory+1
.4b94	b0 05		bcs $4b9b			bcs 	_AASFail 					; out of memory as adding causes wrapround
.4b96	c5 34		cmp $34				cmp 	highMemory+1 				; >= high memory pointer.
.4b98	b0 01		bcs $4b9b			bcs 	_AASFail
.4b9a	60		rts				rts
.4b9b					_AASFail:
.4b9b	a2 22		ldx #$22			ldx 	#ErrorID_Memory
.4b9d	20 18 15	jsr $1518		jsr	errorHandler
.4ba0					MultiplyTemp2ByA:
.4ba0	48		pha				pha
.4ba1	a5 2e		lda $2e				lda 	temp2 						; copy temp2 to temp3.
.4ba3	85 30		sta $30				sta 	temp3
.4ba5	a5 2f		lda $2f				lda 	temp2+1
.4ba7	85 31		sta $31				sta 	temp3+1
.4ba9	68		pla				pla
.4baa	06 2e		asl $2e				asl 	temp2 						; double it.
.4bac	26 2f		rol $2f				rol 	temp2+1
.4bae	c9 02		cmp #$02			cmp 	#2 							; if x 2 then exit.
.4bb0	f0 15		beq $4bc7			beq 	_MTBAExit
.4bb2	c9 06		cmp #$06			cmp 	#6 							; if x 6 then add temp3 to temp2
.4bb4	d0 0d		bne $4bc3			bne 	_MTBANotFloat
.4bb6	18		clc				clc 								; so this will make it x 3
.4bb7	a5 2e		lda $2e				lda 	temp2
.4bb9	65 30		adc $30				adc 	temp3
.4bbb	85 2e		sta $2e				sta 	temp2
.4bbd	a5 2f		lda $2f				lda 	temp2+1
.4bbf	65 31		adc $31				adc 	temp3+1
.4bc1	85 2f		sta $2f				sta 	temp2+1
.4bc3					_MTBANotFloat:
.4bc3	06 2e		asl $2e				asl 	temp2 						; double it.
.4bc5	26 2f		rol $2f				rol 	temp2+1
.4bc7					_MTBAExit:
.4bc7	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/variable/access.asm

.0e60					varHash:
>0e60							.fill	1
.0e61					varType:
>0e61							.fill 	1
.0e62					varEnd:
>0e62							.fill 	1
.003b					hashList:
>003b							.fill 	2
.4bc8					AccessVariable:
.4bc8	aa		tax				tax 								; stack in X
.4bc9	c8		iny				iny									; look at second character
.4bca	b1 28		lda ($28),y			lda 	(codePtr),y
.4bcc	88		dey				dey
.4bcd	c9 3a		cmp #$3a			cmp 	#TYPE_INT 					; is it the integer marker ($3A)
.4bcf	d0 15		bne $4be6			bne 	_AVLong 					; no, always use the hash tables.
.4bd1	b1 28		lda ($28),y			lda 	(codePtr),y 				; this is the 6 bit ASCII of A-Z 1-26
.4bd3	38		sec				sec 	 							; make it 0-25
.4bd4	e9 01		sbc #$01			sbc 	#1
.4bd6	0a		asl a				asl 	a 							; x 4 as 4 bytes / variable.
.4bd7	0a		asl a				asl 	a
.4bd8	95 98		sta $98,x			sta 	esInt0,x
.4bda	a9 0a		lda #$0a			lda 	#SingleLetterVar >> 8 		; make it an address
.4bdc	95 a0		sta $a0,x			sta 	esInt1,x
.4bde	a9 80		lda #$80			lda 	#$80 						; type is an integer reference.
.4be0	95 90		sta $90,x			sta 	esType,x
.4be2	c8		iny				iny 								; skip over the variable reference in the code.
.4be3	c8		iny				iny  								; (1 letter, 1 type)
.4be4	8a		txa				txa 								; stack in A to return.
.4be5	60		rts				rts
.4be6					_AVLong:
.4be6	8a		txa				txa
.4be7	48		pha				pha
.4be8	20 2f 4c	jsr $4c2f			jsr 	AccessSetup 				; set up the basic information we need for later
.4beb	20 38 4d	jsr $4d38			jsr 	FindVariable 				; does the variable exist already ?
.4bee	b0 0e		bcs $4bfe			bcs 	_AVFound 					; yes, then its found
.4bf0	ad 61 0e	lda $0e61			lda 	varType 					; otherwise, is the variable type an array
.4bf3	4a		lsr a				lsr 	a
.4bf4	90 05		bcc $4bfb			bcc 	_AVCanCreate 				; if not, we can autocreate
.4bf6	a2 15		ldx #$15			ldx 	#ErrorID_noauto
.4bf8	20 18 15	jsr $1518		jsr	errorHandler
.4bfb					_AVCanCreate:
.4bfb	20 6c 4c	jsr $4c6c			jsr 	CreateVariable 				; variable does not exist, create it.
.4bfe					_AVFound:
.4bfe	68		pla				pla
.4bff	aa		tax				tax
.4c00	18		clc				clc 								; copy temp0 (variable record address)
.4c01	a5 2a		lda $2a				lda 	temp0 						; +5 (to point to the data)
.4c03	69 05		adc #$05			adc 	#5 							; (first 5 bytes are link, name, hash)
.4c05	95 98		sta $98,x			sta 	esInt0,x
.4c07	a5 2b		lda $2b				lda 	temp0+1
.4c09	69 00		adc #$00			adc 	#0
.4c0b	95 a0		sta $a0,x			sta 	esInt1,x
.4c0d	a9 00		lda #$00			lda 	#0
.4c0f	95 a8		sta $a8,x			sta 	esInt2,x
.4c11	95 b0		sta $b0,x			sta 	esInt3,x
.4c13	ac 61 0e	ldy $0e61			ldy 	varType 					; get the type ID from the type.
.4c16	b9 ef 4b	lda $4bef,y			lda 	_AVTypeTable-$3A,y 			; e.g. a reference to int/float/string.
.4c19	95 90		sta $90,x			sta 	esType,x
.4c1b	ac 62 0e	ldy $0e62			ldy 	varEnd 						; restore Y
.4c1e	ad 61 0e	lda $0e61			lda 	VarType 					; get variable type, put LSB into C
.4c21	4a		lsr a				lsr 	a
.4c22	90 03		bcc $4c27			bcc 	_AVNotArray 				; if carry set,it is an array variable.
.4c24	20 d0 49	jsr $49d0			jsr 	AccessArray 				; array lookup. if LSB was set.
.4c27					_AVNotArray:
.4c27	8a		txa				txa 								; return stack in A and return
.4c28	60		rts				rts
.4c29					_AVTypeTable:
>4c29	80 80						.byte 	$80,$80						; integer
>4c2b	c0 c0						.byte 	$C0,$C0 					; string
>4c2d	81 81						.byte 	$81,$81 					; float
.4c2f					AccessSetup:
.4c2f	a9 00		lda #$00			lda 	#0 							; zero the hash byte.
.4c31	8d 60 0e	sta $0e60			sta 	varHash
.4c34	98		tya				tya
.4c35	48		pha				pha
.4c36	b1 28		lda ($28),y	_ASLoop:lda 	(codePtr),y					; get next identifier character
.4c38	c9 3a		cmp #$3a			cmp 	#$3A 						; is it 3A-3F which end all identifiers ?
.4c3a	b0 0b		bcs $4c47			bcs 	_ASComplete
.4c3c	18		clc				clc 								; add to the hash. Might improve this.
.4c3d	6d 60 0e	adc $0e60			adc 	varHash
.4c40	8d 60 0e	sta $0e60			sta 	varHash
.4c43	c8		iny				iny 								; next character
.4c44	4c 36 4c	jmp $4c36			jmp 	_ASLoop
.4c47					_ASComplete:
.4c47	8d 61 0e	sta $0e61			sta 	varType 					; save variable type byte
.4c4a	c8		iny				iny
.4c4b	8c 62 0e	sty $0e62			sty 	varEnd 						; save the ending position.
.4c4e	38		sec				sec 								; convert type byte from $3A-$3F to 0..5
.4c4f	e9 3a		sbc #$3a			sbc 	#$3A
.4c51	0a		asl a				asl 	a 							; multiply by hashTableSize (8 in this case)
.4c52	0a		asl a				asl 	a
.4c53	0a		asl a				asl 	a
.4c54	0a		asl a				asl 	a 							; 2 bytes/word
.4c55	85 2a		sta $2a				sta 	temp0 						; this is the offset to the start of the table.
.4c57	ad 60 0e	lda $0e60			lda 	varHash 					; get hash
.4c5a	29 07		and #$07			and 	#(hashTableSize-1)			; force into range (for 8,0..7)
.4c5c	0a		asl a				asl  	a 							; x 2 (for word) and clear carry
.4c5d	65 2a		adc $2a				adc 	temp0 						; now offset from the start of the hash table.
.4c5f	69 68		adc #$68			adc 	#hashTables & $FF 			; add to hash table base address
.4c61	85 3b		sta $3b				sta 	hashList 					; making hashLists point to the head of the link list.
.4c63	a9 0a		lda #$0a			lda 	#hashTables >> 8
.4c65	69 00		adc #$00			adc 	#0
.4c67	85 3c		sta $3c				sta 	hashList+1
.4c69	68		pla				pla
.4c6a	a8		tay				tay
.4c6b	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/variable/create.asm

.4c6c					CreateVariable:
.4c6c	98		tya				tya 								; push Y on the stack twice.
.4c6d	48		pha				pha									; position in code of the new variable.
.4c6e	48		pha				pha
.4c6f	ae 61 0e	ldx $0e61			ldx 	varType 					; get var type 0-5 from the var type
.4c72	bd 96 4c	lda $4c96,x			lda		_CVSize-$3A,x 				; the bytes required for this new variable.
.4c75	48		pha				pha 								; save length
.4c76	a5 35		lda $35				lda 	lowMemory 					; set low Memory ptr to temp0
.4c78	85 2a		sta $2a				sta 	temp0 						; (address of the new variable)
.4c7a	a5 36		lda $36				lda 	lowMemory+1
.4c7c	85 2b		sta $2b				sta 	temp0+1
.4c7e	68		pla				pla 								; get length
.4c7f	18		clc				clc 								; add to low memory.
.4c80	65 35		adc $35				adc 	lowMemory
.4c82	85 35		sta $35				sta 	lowMemory
.4c84	90 08		bcc $4c8e			bcc 	_CVNoCarry
.4c86	e6 36		inc $36				inc 	lowMemory+1
.4c88	a5 36		lda $36				lda 	lowMemory+1 				; check out of memory.
.4c8a	c5 34		cmp $34				cmp 	highMemory+1
.4c8c	b0 3d		bcs $4ccb			bcs 	_CVMemory
.4c8e					_CVNoCarry:
.4c8e	ad 60 0e	lda $0e60			lda 	varHash 					; store hash at offset 4.
.4c91	a0 04		ldy #$04			ldy 	#4
.4c93	91 2a		sta ($2a),y			sta 	(temp0),y
.4c95	68		pla				pla 								; offset, work out where the variable name is.
.4c96	18		clc				clc
.4c97	65 28		adc $28				adc 	codePtr
.4c99	a0 02		ldy #$02			ldy 	#2 							; copy that into slots 2 + 3.
.4c9b	91 2a		sta ($2a),y			sta 	(temp0),y
.4c9d	a5 29		lda $29				lda 	codePtr+1
.4c9f	69 00		adc #$00			adc 	#0
.4ca1	c8		iny				iny
.4ca2	91 2a		sta ($2a),y			sta 	(temp0),y
.4ca4	cd c9 0a	cmp $0ac9			cmp 	basePage+1 					; compare against the program base.
.4ca7	b0 03		bcs $4cac			bcs 	_CVNotImmediate
.4ca9	20 0e 4d	jsr $4d0e			jsr 	CloneVariableName 			; we need to clone the variable name (immediate mode)
.4cac					_CVNotImmediate:
.4cac	a0 00		ldy #$00			ldy 	#0 							; copy current hash pointer in link
.4cae	b1 3b		lda ($3b),y			lda 	(hashList),y 				; so we're inserting it in the front of a linked list
.4cb0	91 2a		sta ($2a),y			sta 	(temp0),y
.4cb2	c8		iny				iny
.4cb3	b1 3b		lda ($3b),y			lda 	(hashList),y
.4cb5	91 2a		sta ($2a),y			sta 	(temp0),y
.4cb7	a5 2b		lda $2b				lda 	temp0+1 					; set new link
.4cb9	91 3b		sta ($3b),y			sta 	(hashList),y
.4cbb	88		dey				dey
.4cbc	a5 2a		lda $2a				lda 	temp0
.4cbe	91 3b		sta ($3b),y			sta 	(hashList),y
.4cc0	ad 61 0e	lda $0e61			lda 	varType 					; type in A
.4cc3	a0 05		ldy #$05			ldy 	#5 							; offset in Y
.4cc5	20 d6 4c	jsr $4cd6			jsr 	ZeroTemp0Y 					; zero (temp0),y with whatever type.
.4cc8	68		pla				pla
.4cc9	a8		tay				tay
.4cca	60		rts				rts
.4ccb					_CVMemory:
.4ccb	a2 22		ldx #$22			ldx 	#ErrorID_Memory
.4ccd	20 18 15	jsr $1518		jsr	errorHandler
>4cd0	09 07				_CVSize:.byte 	VarHSize+VarISize,VarHSize+VarASize 					; <storage for integer>
>4cd2	07 07						.byte 	VarHSize+VarSSize,VarHSize+VarASize 					; <storage for string>
>4cd4	0b 07						.byte 	VarHSize+VarFSize,VarHSize+VarASize 					; <storage for float>
.4cd6					ZeroTemp0Y:
.4cd6	4a		lsr a				lsr 	a 							; bit 0 in carry
.4cd7	0a		asl a				asl 	a
.4cd8	b0 19		bcs $4cf3			bcs 	_ZTExit 					; we don't initialise arrays.
.4cda	c9 3c		cmp #$3c			cmp 	#$3C 						; check string
.4cdc	f0 16		beq $4cf4			beq 	_ZTWriteNullString 			; write "" string
.4cde	c9 3e		cmp #$3e			cmp 	#$3E 						; check float
.4ce0	f0 22		beq $4d04			beq 	_ZTWriteFloat
.4ce2	98		tya				tya
.4ce3	48		pha				pha
.4ce4	a9 00		lda #$00			lda 	#0
.4ce6	91 2a		sta ($2a),y			sta 	(temp0),y
.4ce8	c8		iny				iny
.4ce9	91 2a		sta ($2a),y			sta 	(temp0),y
.4ceb	c8		iny				iny
.4cec	91 2a		sta ($2a),y			sta 	(temp0),y
.4cee	c8		iny				iny
.4cef	91 2a		sta ($2a),y			sta 	(temp0),y
.4cf1	68		pla				pla
.4cf2	a8		tay				tay
.4cf3					_ZTExit:
.4cf3	60		rts				rts
.4cf4					_ZTWriteNullString:
.4cf4	a9 00		lda #$00			lda 	#0 							; put a reference to null string as the default value.
.4cf6	8d ce 0a	sta $0ace			sta 	NullString
.4cf9	a9 ce		lda #$ce			lda 	#NullString & $FF
.4cfb	91 2a		sta ($2a),y			sta 	(temp0),y
.4cfd	a9 0a		lda #$0a			lda 	#NullString >> 8
.4cff	c8		iny				iny
.4d00	91 2a		sta ($2a),y			sta 	(temp0),y
.4d02	88		dey				dey
.4d03	60		rts				rts
.4d04					_ZTWriteFloat:
.4d04	8a		txa				txa
.4d05	48		pha				pha
.4d06	a2 20		ldx #$20		ldx	#32
.4d08	20 e1 25	jsr $25e1		jsr	floatingpointHandler
.4d0b	68		pla				pla
.4d0c	aa		tax				tax
.4d0d	60		rts				rts
.4d0e					CloneVariableName:
.4d0e	a0 02		ldy #$02			ldy 	#2 							; copy vname address to temp2
.4d10	b1 2a		lda ($2a),y			lda 	(temp0),y
.4d12	85 2e		sta $2e				sta 	temp2
.4d14	c8		iny				iny
.4d15	b1 2a		lda ($2a),y			lda 	(temp0),y
.4d17	85 2f		sta $2f				sta 	temp2+1
.4d19	a5 36		lda $36				lda 	lowMemory+1 				; copy lowMemory address to (temp0),2/3
.4d1b	91 2a		sta ($2a),y			sta 	(temp0),y
.4d1d	88		dey				dey
.4d1e	a5 35		lda $35				lda 	lowMemory
.4d20	91 2a		sta ($2a),y			sta 	(temp0),y
.4d22	a0 00		ldy #$00			ldy 	#0 							; copy data from (temp2) to (lowMemory)
.4d24					_CVNCopy:
.4d24	b1 2e		lda ($2e),y			lda		(temp2),y
.4d26	91 35		sta ($35),y			sta 	(lowMemory),y
.4d28	c8		iny				iny
.4d29	c9 3a		cmp #$3a			cmp 	#$3A 						; until the whole name has been copied.
.4d2b	90 f7		bcc $4d24			bcc 	_CVNCopy
.4d2d	98		tya				tya 								; add Y to low memory
.4d2e	18		clc				clc
.4d2f	65 35		adc $35				adc 	lowMemory
.4d31	85 35		sta $35				sta 	lowMemory
.4d33	90 02		bcc $4d37			bcc 	_CVNNoCarry
.4d35	e6 36		inc $36				inc 	lowMemory+1
.4d37					_CVNNoCarry:
.4d37	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/variable/find.asm

.4d38					FindVariable:
.4d38	98		tya				tya
.4d39	48		pha				pha
.4d3a	98		tya				tya 								; point temp2 to the actual name
.4d3b	18		clc				clc 								; in memory of the variable being created
.4d3c	65 28		adc $28				adc 	codePtr
.4d3e	85 2e		sta $2e				sta 	temp2
.4d40	a5 29		lda $29				lda 	codePtr+1
.4d42	69 00		adc #$00			adc 	#0
.4d44	85 2f		sta $2f				sta 	temp2+1
.4d46	a0 00		ldy #$00			ldy 	#0
.4d48	a5 3b		lda $3b				lda 	hashList 					; copy hashlist to temp0
.4d4a	85 2a		sta $2a				sta 	temp0
.4d4c	a5 3c		lda $3c				lda 	hashList+1
.4d4e	85 2b		sta $2b				sta 	temp0+1
.4d50	a0 01		ldy #$01	_FVNext:ldy 	#1 							; get MSB
.4d52	b1 2a		lda ($2a),y			lda 	(temp0),y
.4d54	f0 2c		beq $4d82			beq 	_FVFail
.4d56	aa		tax				tax
.4d57	88		dey				dey		 							; get LSB
.4d58	b1 2a		lda ($2a),y			lda 	(temp0),y
.4d5a	85 2a		sta $2a				sta 	temp0 						; update pointer.
.4d5c	86 2b		stx $2b				stx 	temp0+1
.4d5e	a0 04		ldy #$04			ldy 	#4 							; check hashes match
.4d60	b1 2a		lda ($2a),y			lda 	(temp0),y
.4d62	cd 60 0e	cmp $0e60			cmp 	varHash
.4d65	d0 e9		bne $4d50			bne 	_FVNext 					; if not, no point in checking the name.
.4d67	88		dey				dey 								; copy name pointer (+2,+3) to temp1.
.4d68	b1 2a		lda ($2a),y			lda 	(temp0),y
.4d6a	85 2d		sta $2d				sta 	temp1+1
.4d6c	88		dey				dey
.4d6d	b1 2a		lda ($2a),y			lda 	(temp0),y
.4d6f	85 2c		sta $2c				sta 	temp1
.4d71	a0 00		ldy #$00			ldy 	#0
.4d73					_FVCheck:
.4d73	b1 2c		lda ($2c),y			lda 	(temp1),y 					; compare names
.4d75	d1 2e		cmp ($2e),y			cmp 	(temp2),y
.4d77	d0 d7		bne $4d50			bne 	_FVNext		 				; fail if different.
.4d79	c8		iny				iny
.4d7a	c9 3a		cmp #$3a			cmp 	#$3A 						; until reached the end marker.
.4d7c	90 f5		bcc $4d73			bcc 	_FVCheck
.4d7e	68		pla				pla
.4d7f	a8		tay				tay
.4d80	38		sec				sec
.4d81	60		rts				rts
.4d82					_FVFail:
.4d82	68		pla				pla
.4d83	a8		tay				tay
.4d84	18		clc				clc
.4d85	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/variable/reset.asm

.4d86					HashTableReset:
.4d86	a2 60		ldx #$60			ldx 	#6*2*hashTableSize			; 6 types, 2 bytes per table entry.
.4d88	a9 00		lda #$00			lda 	#0
.4d8a					_HTRClear:
.4d8a	9d 67 0a	sta $0a67,x			sta 	hashTables-1,x
.4d8d	ca		dex				dex
.4d8e	d0 fa		bne $4d8a			bne 	_HTRClear
.4d90	60		rts				rts

;******  Return to file: variable/variable.asm

.4d91					variableHandler:
.4d91	7c 94 4d	jmp ($4d94,x)			jmp 	(variableVectors,x)
.4d94					variableVectors:
>4d94	9c 4d					.word _DummyControlHandler ; index 0
>4d96	c8 4b					.word AccessVariable       ; index 2
>4d98	58 4a					.word CreateArray          ; index 4
>4d9a	86 4d					.word HashTableReset       ; index 6
.4d9c					_DummyControlHandler:
.4d9c	60		rts			rts

;******  Return to file: basic.asm

.4d9d					section_end_variable:
.4d9d					section_start_footer:

;******  Processing file: footer/footer.asm


;******  Processing file: footer/99end.asm

.003d					endZeroPage:
.0e63					endStorage:
>4d9d							.align 	256
.4e00					programMemory:
>4dff	ff						.byte 	$FF

;******  Return to file: footer/footer.asm


;******  Return to file: basic.asm

.4e00					section_end_footer:

;******  End of listing
