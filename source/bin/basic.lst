
; 64tass Turbo Assembler Macro V1.55.2200 listing file
; 64tass -D autorun=1 -D coldstartnew=0 -Walias -Wmacro-prefix -Wall -q -c -L ../source/bin/basic.lst -l ../source/bin/basic.lbl -Wall -o ../source/bin/stub.prg basic.asm
; Tue Mar 30 06:24:37 2021

;Offset	;Hex		;Monitor	;Source

;******  Command line definitions

=1					autorun=1
=0					coldstartnew=0

;******  Processing input file: basic.asm


;******  Processing file: header/01common.inc


;******  Processing file: header/../generated/installed.inc

=1					installed_header = 1
=1					installed_main = 1
=1					installed_variable = 1
=1					installed_assembler = 1
=1					installed_error = 1
=1					installed_extension = 1
=1					installed_string = 1
=1					installed_device = 1
=0					installed_floatingpoint = 0
=1					installed_interaction = 1
=1					installed_tokeniser = 1
=1					installed_footer = 1

;******  Return to file: header/01common.inc

=$1000					CodeStart = $1000
=$800					MemoryStorage = $800
=$9f00					EndOfMemory = $9F00
=$28					ZeroPageStorage = $28
=$48					StackAddress = $48
=8					StackSize = 8
=2					retStackSizePages = 2
=8					hashTableSize = 8			; if this changes, the calculation is AccessSetup has to match it.
="G"					markerGOSUB = 'G'
="R"					markerREPEAT = 'R'
="F"					markerFOR = 'F'
="W"					markerWHILE = 'W'
="P"					markerPROC = 'P'
="$"					markerSTRING = '$'
="#"					markerFLOAT = '#'
="%"					markerINT = '%'
=5					VarHSize = 5 								; header (2 link, 2 name, 1 hash)
=2					VarASize = 2 								; array [address of first level]
=4					VarISize = 4 								; integer (32 bit)
=6					VarFSize = 6 								; float (4 mantissa, 1 exponent 1 sign/zero)
=2					VarSSize = 2 								; address (2 bytes)

;******  Return to file: basic.asm


;******  Processing file: header/02macros.inc


;******  Return to file: basic.asm


;******  Processing file: header/03data.inc

>0028					codePtr:.fill 	2							; (codePtr),y points to code.
>002a					temp0: 	.fill 	2							; working variables.
>002c					temp1: 	.fill 	2
>002e					temp2: 	.fill 	2
>0030					temp3: 	.fill 	2
.0032					tempshort:
>0032							.fill 	1
.0033					highMemory:
>0033							.fill 	2
.0035					lowMemory:
>0035							.fill 	2
>0800							.align	256
.0800					returnStack:
>0800							.fill 	retStackSizePages * 256
=512					retStackSize = retStackSizePages * 256
.0a00					SingleLetterVar:
>0a00					 		.fill 	26*4
.0a68					currentStorage:
>0048					esType:	.fill 	StackSize  					; type byte (see above)
>0050					esInt0:	.fill 	StackSize 					; integer or mantissa
>0058					esInt1:	.fill 	StackSize
>0060					esInt2:	.fill 	StackSize
>0068					esInt3:	.fill 	StackSize
>0070					esExp:	.fill 	StackSize 					; exponent ($80 = 0)
>0078					esZSign:.fill 	StackSize 					; for floating point - sign (bit 7) isZero (bit 6)
.0080					endOfStack:
=$50					esMant0 = esInt0 							; synonyms.
=$58					esMant1 = esInt1
=$60					esMant2 = esInt2
=$68					esMant3 = esInt3
.0a68					hashTables:
>0a68							.fill 	6*2*hashTableSize
.0ac8					basePage:
>0ac8							.fill 	2
.0aca					endProgram:
>0aca							.fill 	2
.0acc					endMemory:
>0acc							.fill 	2
.0ace					NullString:
>0ace							.fill 	1							; don't waste memory concreting null strings.
.0acf					convertBuffer:
>0acf							.fill 	35

;******  Processing file: header/../generated/tokenconst.inc

=$80					TOK_EOL=$80
=$81					TOK_SHIFT1=$81
=$82					TOK_SHIFT2=$82
=$83					TOK_SHIFT3=$83
=$84					TOK_FPC=$84
=$85					TOK_STR=$85
=$86					TOK_BINARYST=$86
=$99					TOK_STRUCTST=$99
=$a4					TOK_UNARYST=$a4
=$c9					TOK_TOKENS=$c9
=$86					TKW_AND                      = $86 ; and
=$87					TKW_OR                       = $87 ; or
=$88					TKW_XOR                      = $88 ; xor
=$89					TKW_GREATEREQUAL             = $89 ; >=
=$8a					TKW_LESSEQUAL                = $8a ; <=
=$8b					TKW_GREATER                  = $8b ; >
=$8c					TKW_LESS                     = $8c ; <
=$8d					TKW_EQUAL                    = $8d ; =
=$8e					TKW_LESSGREATER              = $8e ; <>
=$8f					TKW_PLUS                     = $8f ; +
=$90					TKW_MINUS                    = $90 ; -
=$91					TKW_GREATERGREATER           = $91 ; >>
=$92					TKW_LESSLESS                 = $92 ; <<
=$93					TKW_STAR                     = $93 ; *
=$94					TKW_SLASH                    = $94 ; /
=$95					TKW_MOD                      = $95 ; mod
=$96					TKW_HAT                      = $96 ; ^
=$97					TKW_PLING                    = $97 ; !
=$98					TKW_QMARK                    = $98 ; ?
=$99					TKW_REPEAT                   = $99 ; repeat
=$9a					TKW_WHILE                    = $9a ; while
=$9b					TKW_FOR                      = $9b ; for
=$9c					TKW_IF                       = $9c ; if
=$9d					TKW_DEFPROC                  = $9d ; defproc
=$9e					TKW_UNTIL                    = $9e ; until
=$9f					TKW_WEND                     = $9f ; wend
=$a0					TKW_NEXT                     = $a0 ; next
=$a1					TKW_THEN                     = $a1 ; then
=$a2					TKW_ENDIF                    = $a2 ; endif
=$a3					TKW_ENDPROC                  = $a3 ; endproc
=$a4					TKW_LPAREN                   = $a4 ; (
=$a5					TKW_LENLPAREN                = $a5 ; len(
=$a6					TKW_SGNLPAREN                = $a6 ; sgn(
=$a7					TKW_ABSLPAREN                = $a7 ; abs(
=$a8					TKW_RANDOMLPAREN             = $a8 ; random(
=$a9					TKW_PAGE                     = $a9 ; page
=$aa					TKW_TRUE                     = $aa ; true
=$ab					TKW_FALSE                    = $ab ; false
=$ac					TKW_MINLPAREN                = $ac ; min(
=$ad					TKW_MAXLPAREN                = $ad ; max(
=$ae					TKW_SYSLPAREN                = $ae ; sys(
=$af					TKW_TIMERLPAREN              = $af ; timer(
=$b0					TKW_EVENTLPAREN              = $b0 ; event(
=$b1					TKW_GETLPAREN                = $b1 ; get(
=$b2					TKW_INKEYLPAREN              = $b2 ; inkey(
=$b3					TKW_ALLOCLPAREN              = $b3 ; alloc(
=$b4					TKW_CHRDOLLARLPAREN          = $b4 ; chr$(
=$b5					TKW_LEFTDOLLARLPAREN         = $b5 ; left$(
=$b6					TKW_MIDDOLLARLPAREN          = $b6 ; mid$(
=$b7					TKW_RIGHTDOLLARLPAREN        = $b7 ; right$(
=$b8					TKW_STRDOLLARLPAREN          = $b8 ; str$(
=$b9					TKW_VALLPAREN                = $b9 ; val(
=$ba					TKW_PEEKLPAREN               = $ba ; peek(
=$bb					TKW_DEEKLPAREN               = $bb ; deek(
=$bc					TKW_LEEKLPAREN               = $bc ; leek(
=$bd					TKW_ASCLPAREN                = $bd ; asc(
=$be					TKW_INTLPAREN                = $be ; int(
=$bf					TKW_FLOATLPAREN              = $bf ; float(
=$c0					TKW_ISVALLPAREN              = $c0 ; isval(
=$c1					TKW_UPPERDOLLARLPAREN        = $c1 ; upper$(
=$c2					TKW_LOWERDOLLARLPAREN        = $c2 ; lower$(
=$c3					TKW_ATC                      = $c3 ; @
=$c4					TKW_WAVY                     = $c4 ; ~
=$c5					TKW_AMP                      = $c5 ; &
=$c6					TKW_GETDOLLARLPAREN          = $c6 ; get$(
=$c7					TKW_INKEYDOLLARLPAREN        = $c7 ; inkey$(
=$c8					TKW_MEM                      = $c8 ; mem
=$c9					TKW_RPAREN                   = $c9 ; )
=$ca					TKW_COLON                    = $ca ; :
=$cb					TKW_COMMA                    = $cb ; ,
=$cc					TKW_SEMICOLON                = $cc ; ;
=$cd					TKW_QUOTE                    = $cd ; '
=$ce					TKW_TO                       = $ce ; to
=$cf					TKW_STEP                     = $cf ; step
=$d0					TKW_PROC                     = $d0 ; proc
=$d1					TKW_LOCAL                    = $d1 ; local
=$d2					TKW_DIM                      = $d2 ; dim
=$d3					TKW_REM                      = $d3 ; rem
=$d4					TKW_LET                      = $d4 ; let
=$d5					TKW_INPUT                    = $d5 ; input
=$d6					TKW_ELSE                     = $d6 ; else
=$d7					TKW_VDU                      = $d7 ; vdu
=$d8					TKW_PRINT                    = $d8 ; print
=$d9					TKW_DATA                     = $d9 ; data
=$da					TKW_IMAGE                    = $da ; image
=$db					TKW_AT                       = $db ; at
=$dc					TKW_FLIP                     = $dc ; flip
=$dd					TKW_ASSERT                   = $dd ; assert
=$de					TKW_POKE                     = $de ; poke
=$df					TKW_DOKE                     = $df ; doke
=$e0					TKW_LOKE                     = $e0 ; loke
=$e1					TKW_INK                      = $e1 ; ink
=$e2					TKW_PAPER                    = $e2 ; paper
=$e3					TKW_CLS                      = $e3 ; cls
=$e4					TKW_LOCATE                   = $e4 ; locate
=$e5					TKW_PERIOD                   = $e5 ; .
=$e6					TKW_HASH                     = $e6 ; #
=$e7					TKW_CLEAR                    = $e7 ; clear
=$86					TKW_LOAD                     = $86 ; load
=$87					TKW_SAVE                     = $87 ; save
=$88					TKW_LIST                     = $88 ; list
=$89					TKW_NEW                      = $89 ; new
=$8a					TKW_BREAK                    = $8a ; break
=$8b					TKW_RUN                      = $8b ; run
=$8c					TKW_READ                     = $8c ; read
=$8d					TKW_RESTORE                  = $8d ; restore
=$8e					TKW_END                      = $8e ; end
=$8f					TKW_STOP                     = $8f ; stop
=$90					TKW_XEMU                     = $90 ; xemu
=$91					TKW_GOTO                     = $91 ; goto
=$92					TKW_GOSUB                    = $92 ; gosub
=$93					TKW_RETURN                   = $93 ; return
=$94					TKW_ORA                      = $94 ; ora
=$95					TKW_LPARENANDRPAREN          = $95 ; (and)
=$96					TKW_EOR                      = $96 ; eor
=$97					TKW_ADC                      = $97 ; adc
=$98					TKW_STA                      = $98 ; sta
=$99					TKW_LDA                      = $99 ; lda
=$9a					TKW_CMP                      = $9a ; cmp
=$9b					TKW_SBC                      = $9b ; sbc
=$9c					TKW_ASL                      = $9c ; asl
=$9d					TKW_ROL                      = $9d ; rol
=$9e					TKW_LSR                      = $9e ; lsr
=$9f					TKW_ROR                      = $9f ; ror
=$a0					TKW_STX                      = $a0 ; stx
=$a1					TKW_LDX                      = $a1 ; ldx
=$a2					TKW_DEC                      = $a2 ; dec
=$a3					TKW_INC                      = $a3 ; inc
=$a4					TKW_STZ                      = $a4 ; stz
=$a5					TKW_BIT                      = $a5 ; bit
=$a6					TKW_STY                      = $a6 ; sty
=$a7					TKW_LDY                      = $a7 ; ldy
=$a8					TKW_CPY                      = $a8 ; cpy
=$a9					TKW_CPX                      = $a9 ; cpx
=$aa					TKW_TSB                      = $aa ; tsb
=$ab					TKW_TRB                      = $ab ; trb
=$ac					TKW_JSR                      = $ac ; jsr
=$ad					TKW_JMP                      = $ad ; jmp
=$ae					TKW_BPL                      = $ae ; bpl
=$af					TKW_BMI                      = $af ; bmi
=$b0					TKW_BVC                      = $b0 ; bvc
=$b1					TKW_BVS                      = $b1 ; bvs
=$b2					TKW_BCC                      = $b2 ; bcc
=$b3					TKW_BCS                      = $b3 ; bcs
=$b4					TKW_BNE                      = $b4 ; bne
=$b5					TKW_BEQ                      = $b5 ; beq
=$b6					TKW_BRA                      = $b6 ; bra
=$b7					TKW_BRK                      = $b7 ; brk
=$b8					TKW_PHP                      = $b8 ; php
=$b9					TKW_CLC                      = $b9 ; clc
=$ba					TKW_PLP                      = $ba ; plp
=$bb					TKW_SEC                      = $bb ; sec
=$bc					TKW_RTI                      = $bc ; rti
=$bd					TKW_PHA                      = $bd ; pha
=$be					TKW_CLI                      = $be ; cli
=$bf					TKW_PHY                      = $bf ; phy
=$c0					TKW_RTS                      = $c0 ; rts
=$c1					TKW_PLA                      = $c1 ; pla
=$c2					TKW_SEI                      = $c2 ; sei
=$c3					TKW_PLY                      = $c3 ; ply
=$c4					TKW_DEY                      = $c4 ; dey
=$c5					TKW_TXA                      = $c5 ; txa
=$c6					TKW_TYA                      = $c6 ; tya
=$c7					TKW_TXS                      = $c7 ; txs
=$c8					TKW_TAY                      = $c8 ; tay
=$c9					TKW_TAX                      = $c9 ; tax
=$ca					TKW_CLV                      = $ca ; clv
=$cb					TKW_TSX                      = $cb ; tsx
=$cc					TKW_INY                      = $cc ; iny
=$cd					TKW_DEX                      = $cd ; dex
=$ce					TKW_CLD                      = $ce ; cld
=$cf					TKW_PHX                      = $cf ; phx
=$d0					TKW_INX                      = $d0 ; inx
=$d1					TKW_NOP                      = $d1 ; nop
=$d2					TKW_SED                      = $d2 ; sed
=$d3					TKW_PLX                      = $d3 ; plx
=$86					TKW_VPOKE                    = $86 ; vpoke
=$87					TKW_VDOKE                    = $87 ; vdoke
=$88					TKW_VLOAD                    = $88 ; vload
=$89					TKW_MODE                     = $89 ; mode
=$8a					TKW_PALETTE                  = $8a ; palette
=$8b					TKW_SPRITE                   = $8b ; sprite
=$86					TKW_VPEEKLPAREN              = $86 ; vpeek(
=$87					TKW_VDEEKLPAREN              = $87 ; vdeek(
=$88					TKW_SPRITEPERIODXLPAREN      = $88 ; sprite.x(
=$89					TKW_SPRITEPERIODYLPAREN      = $89 ; sprite.y(
=$8a					TKW_HITLPAREN                = $8a ; hit(
=$8b					TKW_JOYPERIODXLPAREN         = $8b ; joy.x(
=$8c					TKW_JOYPERIODYLPAREN         = $8c ; joy.y(
=$8d					TKW_JOYPERIODBLPAREN         = $8d ; joy.b(

;******  Return to file: header/03data.inc

=$3a					TYPE_INT =		($3A) 						; type bytes that end identifier.
=$3b					TYPE_INTARRAY =	($3B)
=$3c					TYPE_STR =		($3C)
=$3d					TYPE_STRARRAY =	($3D)
=$3e					TYPE_FLOAT =	($3E)
=$3f					TYPE_FLOATARRAY=($3F)

;******  Processing file: header/../generated/asmconst.inc

=$94					TKA_GROUP1 = $94
=$9c					TKA_GROUP2 = $9c
=$ae					TKA_GROUP3 = $ae
=$b7					TKA_GROUP4 = $b7
=$d4					TKA_END4 = $d4

;******  Return to file: header/03data.inc


;******  Return to file: basic.asm


;******  Processing file: header/header.inc


;******  Return to file: basic.asm


;******  Processing file: assembler/asmconst.inc

=0					AMD_IMM		= 0					; Immediate mode.
=1					AMD_ZERO 	= 1					; Zero Page
=2					AMD_ACCIMP	= 2					; Accumulator/Implied
=3					AMD_ABS 	= 3					; Absolute
=4					AMD_ZEROINDY= 4					; Zero Indirect,Y
=5					AMD_ZEROX 	= 5					; Zero Page,X
=6					AMD_ABSY 	= 6					; Absolute,Y
=7					AMD_ABSX 	= 7					; Absolute,X
=8					AMD_ZEROIND = 8					; Zero Indirect
=9					AMD_ZEROY 	= 9					; Zero Page,Y
=10					AMD_ABSIND 	= 10				; Absolute Indirect
=11					AMD_ABSINDX	= 11				; Absolute Indirect Indexed
=12					AMD_REL		= 12				; Relative
=13					AMD_ZEROINDX= 13 				; Zero Indirect,X

;******  Return to file: basic.asm


;******  Processing file: assembler/assembler.inc


;******  Return to file: basic.asm


;******  Processing file: device/device.inc


;******  Return to file: basic.asm


;******  Processing file: error/error.inc


;******  Return to file: basic.asm


;******  Processing file: error/errorhandler.inc


;******  Processing file: error/../generated/errorid.inc

=1					ErrorID_Missing = 1 ; Feature not Present
=2					ErrorID_Syntax = 2 ; Syntax Error
=3					ErrorID_NoModule = 3 ; Module disabled
=4					ErrorID_Assert = 4 ; Assertion failed
=5					ErrorID_DivZero = 5 ; Divide By Zero
=6					ErrorID_Stop = 6 ; Stop
=7					ErrorID_BadType = 7 ; Type Mismatch
=8					ErrorID_BadValue = 8 ; Illegal Value
=9					ErrorID_MissingRP = 9 ; Missing right bracket
=10					ErrorID_MissingComma = 10 ; Missing comma
=11					ErrorID_NoReference = 11 ; Missing reference
=12					ErrorID_LineNumber = 12 ; Line Number not found
=13					ErrorID_StrLen = 13 ; String too long
=14					ErrorID_ReturnErr = 14 ; RETURN without GOSUB
=15					ErrorID_UntilErr = 15 ; UNTIL without REPEAT
=16					ErrorID_NextErr = 16 ; NEXT without FOR
=17					ErrorID_WendErr = 17 ; WEND without WHILE
=18					ErrorID_endprocErr = 18 ; ENDPROC without PROC
=19					ErrorID_BadIndex = 19 ; Bad NEXT index
=20					ErrorID_Struct = 20 ; Structures nested wrong
=21					ErrorID_NoAuto = 21 ; Cannot create variable
=22					ErrorID_RetStack = 22 ; Return stack out of space
=23					ErrorID_NoProc = 23 ; Unknown Procedure
=24					ErrorID_Params = 24 ; Parameters do not match
=25					ErrorID_DupArray = 25 ; Array already defined
=26					ErrorID_NotArray = 26 ; DIM requires array
=27					ErrorID_ArrayIndex = 27 ; Bad array index
=28					ErrorID_ArrayDepth = 28 ; Wrong number of array indices
=29					ErrorID_DataError = 29 ; Out of data
=30					ErrorID_Tokenise = 30 ; Cannot tokenise line
=31					ErrorID_Save = 31 ; Save failed
=32					ErrorID_Load = 32 ; Load failed
=33					ErrorID_Break = 33 ; Break
=34					ErrorID_Memory = 34 ; Out of memory
=35					ErrorID_NumStack = 35 ; Expression too complex
=36					ErrorID_Assembler = 36 ; Bad Operand/Mode
=37					ErrorID_Branch = 37 ; Branch out of range
=38					ErrorID_Label = 38 ; Label changed value
=39					ErrorID_NoSprite = 39 ; No Sprite Selected
=40					ErrorID_Hardware = 40 ; Hardware

;******  Return to file: error/errorhandler.inc


;******  Return to file: basic.asm


;******  Processing file: extension/extension.inc


;******  Return to file: basic.asm


;******  Processing file: extension/option_x16/x16const.inc

=64					X16MaxImages = 64 							; max # of sprite images.

;******  Return to file: basic.asm


;******  Processing file: floatingpoint/float.inc

=5					FloatEmbeddedSize = 5

;******  Return to file: basic.asm


;******  Processing file: floatingpoint/floatingpoint.inc


;******  Return to file: basic.asm


;******  Processing file: interaction/interaction.inc


;******  Return to file: basic.asm


;******  Processing file: main/main.inc


;******  Return to file: basic.asm


;******  Processing file: string/functions/memory.inc

=252					MaxStringSize = 252

;******  Return to file: basic.asm


;******  Processing file: string/string.inc


;******  Return to file: basic.asm


;******  Processing file: tokeniser/detokenise/colouring.inc

=$84					LTYLineNumber = $84
=$82					LTYPunctuation = $82
=$87					LTYIdentifier = $87
=$86					LTYConstant = $86
=$83					LTYKeyword = $83
=$81					LTYString = $81

;******  Return to file: basic.asm


;******  Processing file: tokeniser/tokeniser.inc


;******  Return to file: basic.asm


;******  Processing file: variable/variable.inc


;******  Return to file: basic.asm


;******  Processing file: footer/footer.inc


;******  Return to file: basic.asm

.1000					section_start_header:

;******  Processing file: header/header.asm


;******  Processing file: header/00start.asm

.1000					Start:
.1000	4c 0a 10	jmp $100a			jmp 	GoColdStart 				; +0 	boot BASIC
.1003	4c 58 10	jmp $1058			jmp 	GoTokTest					; +3 	run tokeniser test code.
>1006	96 3e						.word 	TokenTableAddress
.1008							else
>1008	00 00						.word 	0
.100a					GoColdStart:
.100a	a9 00		lda #$00			lda 	#(programMemory) & $FF
.100c	8d c8 0a	sta $0ac8			sta 	basePage
.100f	a9 46		lda #$46			lda 	#(programMemory) >> 8
.1011	8d c9 0a	sta $0ac9			sta 	1+(basePage)
.1014	a9 00		lda #$00			lda 	#(endOfMemory) & $FF
.1016	8d cc 0a	sta $0acc			sta 	endMemory
.1019	a9 9f		lda #$9f			lda 	#(endOfMemory) >> 8
.101b	8d cd 0a	sta $0acd			sta 	1+(endMemory)
.101e	20 26 10	jsr $1026			jsr 	InitialiseAll 				; initialise everything.
.1021	a2 02		ldx #$02		ldx	#2
.1023	20 6d 20	jsr $206d		jsr	interactionHandler

;******  Processing file: header/../generated/initialiseall.asm

.1026					InitialiseAll:
.1026	a9 00		lda #$00		lda #0
.1028	a2 00		ldx #$00		ldx	#0
.102a	20 b4 13	jsr $13b4		jsr	assemblerHandler
.102d	a9 00		lda #$00		lda #0
.102f	a2 00		ldx #$00		ldx	#0
.1031	20 f6 14	jsr $14f6		jsr	deviceHandler
.1034	a9 00		lda #$00		lda #0
.1036	a2 00		ldx #$00		ldx	#0
.1038	20 6d 20	jsr $206d		jsr	interactionHandler
.103b	a9 00		lda #$00		lda #0
.103d	a2 00		ldx #$00		ldx	#0
.103f	20 07 37	jsr $3707		jsr	mainHandler
.1042	a9 00		lda #$00		lda #0
.1044	a2 00		ldx #$00		ldx	#0
.1046	20 c4 39	jsr $39c4		jsr	stringHandler
.1049	a9 00		lda #$00		lda #0
.104b	a2 00		ldx #$00		ldx	#0
.104d	20 18 42	jsr $4218		jsr	tokeniserHandler
.1050	a9 00		lda #$00		lda #0
.1052	a2 00		ldx #$00		ldx	#0
.1054	20 e9 45	jsr $45e9		jsr	variableHandler
.1057	60		rts			rts

;******  Return to file: header/00start.asm

.1058					GoTokTest:
.1058	a2 06		ldx #$06		ldx	#6
.105a	20 18 42	jsr $4218		jsr	tokeniserHandler

;******  Return to file: header/header.asm


;******  Return to file: basic.asm

.105d					section_end_header:
.105d					section_start_assembler:

;******  Processing file: assembler/assembler.asm


;******  Processing file: assembler/asmoperand.asm

.105d					AsmGetOperand:
.105d	a2 00		ldx #$00			ldx 	#0 							; clear the operand.
.105f	8a		txa				txa
.1060	95 50		sta $50,x			sta 	esInt0,x
.1062	95 58		sta $58,x			sta 	esInt1,x
.1064	95 60		sta $60,x			sta 	esInt2,x
.1066	95 68		sta $68,x			sta 	esInt3,x
.1068	b1 28		lda ($28),y			lda 	(codePtr),y 				; first into X
.106a	aa		tax				tax
.106b	a9 02		lda #$02			lda 	#AMD_ACCIMP
.106d	e0 80		cpx #$80			cpx 	#TOK_EOL 					; if end of line or colon, return implied mode.
.106f	f0 41		beq $10b2			beq 	_AGOExit
.1071	e0 ca		cpx #$ca			cpx 	#TKW_COLON
.1073	f0 3d		beq $10b2			beq 	_AGOExit
.1075	c8		iny				iny 								; consume the token
.1076	a9 00		lda #$00			lda 	#AMD_IMM
.1078	e0 e6		cpx #$e6			cpx 	#TKW_HASH 					; if a hash present, then immediate mode.
.107a	f0 2d		beq $10a9			beq		_AGOEvalExit 				; with an operand.
.107c	e0 a4		cpx #$a4			cpx 	#TKW_LPAREN 				; left bracket ?
.107e	f0 40		beq $10c0			beq 	_AGOIndirect
.1080	e0 01		cpx #$01			cpx 	#$01 						; is it "A" e.g. the variable A.
.1082	d0 0b		bne $108f			bne 	_AGOZeroPage1 				; if not it is zero zero,x zero,y, unpick 1 iny
.1084	b1 28		lda ($28),y			lda 	(codePtr),y 				; get the second character & consume it
.1086	c8		iny				iny
.1087	aa		tax				tax
.1088	a9 02		lda #$02			lda 	#AMD_ACCIMP 				; and return Acc/Implied if it is just A
.108a	e0 3a		cpx #$3a			cpx 	#$3A
.108c	f0 24		beq $10b2			beq 	_AGOExit
.108e	88		dey				dey 								; unpick 2 iny
.108f					_AGOZeroPage1:
.108f	88		dey				dey
.1090	a9 00		lda #$00			lda 	#0 							; get the address into esInt0/1
.1092	a2 0a		ldx #$0a		ldx	#10
.1094	20 07 37	jsr $3707		jsr	mainHandler
.1097	20 ef 10	jsr $10ef			jsr 	AsmGetIndexing
.109a	a9 01		lda #$01			lda 	#AMD_ZERO
.109c	90 14		bcc $10b2			bcc 	_AGOExit
.109e	a9 05		lda #$05			lda 	#AMD_ZEROX
.10a0	e0 00		cpx #$00			cpx 	#0
.10a2	f0 0e		beq $10b2			beq 	_AGOExit
.10a4	a9 09		lda #$09			lda 	#AMD_ZEROY
.10a6	4c b2 10	jmp $10b2			jmp 	_AGOExit
.10a9					_AGOEvalExit:
.10a9	48		pha				pha
.10aa	a9 00		lda #$00			lda 	#0 							; evaluate operand in root.
.10ac	a2 0a		ldx #$0a		ldx	#10
.10ae	20 07 37	jsr $3707		jsr	mainHandler
.10b1	68		pla				pla
.10b2					_AGOExit:
.10b2	48		pha				pha 								; save the mode
.10b3	a5 60		lda $60				lda 	esInt2 						; check the operand is zero.
.10b5	05 68		ora $68				ora 	esInt3
.10b7	d0 02		bne $10bb			bne 	_AGOValue
.10b9	68		pla				pla
.10ba	60		rts				rts
.10bb					_AGOValue:
.10bb	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.10bd	20 18 15	jsr $1518		jsr	errorHandler
.10c0					_AGOIndirect:
.10c0	a9 00		lda #$00			lda 	#0 							; evaluate operand in root.
.10c2	a2 0a		ldx #$0a		ldx	#10
.10c4	20 07 37	jsr $3707		jsr	mainHandler
.10c7	b1 28		lda ($28),y			lda 	(codePtr),y 				; does ) follow ? if so might be ) or ),Y
.10c9	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.10cb	f0 11		beq $10de			beq 	_AGOIndIndY
.10cd	20 ef 10	jsr $10ef			jsr 	ASMGetIndexing 				; must be ,X)
.10d0	90 39		bcc $110b			bcc 	AGISyntax
.10d2	e0 00		cpx #$00			cpx 	#0
.10d4	d0 35		bne $110b			bne 	AGISyntax
.10d6	a2 04		ldx #$04		ldx	#4
.10d8	20 07 37	jsr $3707		jsr	mainHandler
.10db	a9 0d		lda #$0d			lda 	#AMD_ZEROINDX
.10dd	60		rts				rts
.10de					_AGOIndIndY:
.10de	c8		iny				iny
.10df	20 ef 10	jsr $10ef			jsr 	ASMGetIndexing 				; get indexing if any
.10e2	a9 08		lda #$08			lda 	#AMD_ZEROIND
.10e4	90 cc		bcc $10b2			bcc 	_AGOExit 					; none then exit
.10e6	e0 00		cpx #$00			cpx 	#0 							; must be ,Y
.10e8	f0 21		beq $110b			beq 	AGISyntax
.10ea	a9 04		lda #$04			lda 	#AMD_ZEROINDY
.10ec	4c b2 10	jmp $10b2			jmp 	_AGOExit
.10ef					AsmGetIndexing:
.10ef	b1 28		lda ($28),y			lda 	(codePtr),y 				; check for comma
.10f1	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.10f3	18		clc				clc
.10f4	d0 14		bne $110a			bne 	_AGIExit 					; no comma, return with CC
.10f6	c8		iny				iny 								; get what SHOULD be X or Y
.10f7	b1 28		lda ($28),y			lda 	(codePtr),y  				; read it
.10f9	38		sec				sec 								; subtract 6 bit ASCII of X
.10fa	e9 18		sbc #$18			sbc 	#"X" & $3F
.10fc	c9 02		cmp #$02			cmp 	#2 							; if unsigned >= 2 then error
.10fe	b0 0b		bcs $110b			bcs 	AGISyntax
.1100	aa		tax				tax 								; put in index
.1101	c8		iny				iny 								; get what follows that, should be the $3A marker
.1102	b1 28		lda ($28),y			lda 	(codePtr),y
.1104	c8		iny				iny
.1105	c9 3a		cmp #$3a			cmp 	#$3A
.1107	d0 02		bne $110b			bne 	AGISyntax
.1109	38		sec				sec 								; return CS and index mode in X
.110a					_AGIExit:
.110a	60		rts				rts
.110b					AGISyntax:
.110b	a2 02		ldx #$02			ldx 	#ErrorID_syntax
.110d	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: assembler/assembler.asm


;******  Processing file: assembler/asmwrite.asm

.0af2					finalOpcode:
>0af2							.fill 	1
.1110					AsmWriteInstruction:
.1110	8d f2 0a	sta $0af2			sta 	finalOpcode					; save opcode.
.1113	98		tya				tya
.1114	48		pha				pha
.1115	ad 38 0a	lda $0a38			lda 	SingleLetterVar+("O"-"A")*4	; check O
.1118	29 02		and #$02			and 	#2
.111a	f0 2d		beq $1149			beq 	_ASMWNoEcho 				; if zero then don't echo.
.111c	ad 3d 0a	lda $0a3d			lda 	SingleLetterVar+("P"-"A")*4+1 ; write address in P
.111f	20 84 11	jsr $1184			jsr 	AWIWriteHex
.1122	ad 3c 0a	lda $0a3c			lda 	SingleLetterVar+("P"-"A")*4
.1125	20 84 11	jsr $1184			jsr 	AWIWriteHex
.1128	ad f2 0a	lda $0af2			lda 	finalOpcode 				; write opcode
.112b	20 7d 11	jsr $117d			jsr 	AWIWriteHexSpace
.112e	e0 00		cpx #$00			cpx 	#0
.1130	f0 0e		beq $1140			beq 	_ASMWEchoExit
.1132	a5 50		lda $50				lda 	esInt0
.1134	20 7d 11	jsr $117d			jsr 	AWIWriteHexSpace
.1137	e0 01		cpx #$01			cpx 	#1
.1139	f0 05		beq $1140			beq 	_ASMWEchoExit
.113b	a5 58		lda $58				lda 	esInt1
.113d	20 7d 11	jsr $117d			jsr 	AWIWriteHexSpace
.1140					_ASMWEchoExit:
.1140	8a		txa				txa
.1141	48		pha				pha
.1142	a2 06		ldx #$06		ldx	#6
.1144	20 f6 14	jsr $14f6		jsr	deviceHandler
.1147	68		pla				pla
.1148	aa		tax				tax
.1149					_ASMWNoEcho:
.1149	ad f2 0a	lda $0af2			lda 	finalOpcode
.114c	20 64 11	jsr $1164			jsr 	AsmWriteByte
.114f	e0 00		cpx #$00			cpx 	#0
.1151	f0 0e		beq $1161			beq 	_ASMWExit
.1153	a5 50		lda $50				lda 	esInt0
.1155	20 64 11	jsr $1164			jsr 	AsmWriteByte
.1158	e0 01		cpx #$01			cpx 	#1
.115a	f0 05		beq $1161			beq 	_ASMWExit
.115c	a5 58		lda $58				lda 	esInt1
.115e	20 64 11	jsr $1164			jsr 	AsmWriteByte
.1161					_ASMWExit:
.1161	68		pla				pla
.1162	a8		tay				tay
.1163	60		rts				rts
.1164					AsmWriteByte:
.1164	a0 00		ldy #$00			ldy 	#0
.1166	48		pha				pha
.1167	ad 3c 0a	lda $0a3c			lda 	SingleLetterVar+("P"-"A")*4 ; copy address to temp0
.116a	85 2a		sta $2a				sta 	temp0
.116c	ad 3d 0a	lda $0a3d			lda 	SingleLetterVar+("P"-"A")*4+1
.116f	85 2b		sta $2b				sta 	temp0+1
.1171	68		pla				pla 								; write out the byte.
.1172	91 2a		sta ($2a),y			sta 	(temp0),y
.1174	ee 3c 0a	inc $0a3c			inc 	SingleLetterVar+("P"-"A")*4	; increment P
.1177	d0 03		bne $117c			bne 	_AWBNoCarry
.1179	ee 3d 0a	inc $0a3d			inc 	SingleLetterVar+("P"-"A")*4+1
.117c					_AWBNoCarry:
.117c	60		rts				rts
.117d					AWIWriteHexSpace:
.117d	48		pha				pha
.117e	a9 20		lda #$20			lda 	#" "
.1180	20 97 11	jsr $1197			jsr 	AWIPrintChar
.1183	68		pla				pla
.1184					AWIWriteHex:
.1184	48		pha				pha
.1185	4a		lsr a				lsr 	a
.1186	4a		lsr a				lsr 	a
.1187	4a		lsr a				lsr 	a
.1188	4a		lsr a				lsr 	a
.1189	20 8d 11	jsr $118d			jsr 	AWIPrintNibble
.118c	68		pla				pla
.118d					AWIPrintNibble:
.118d	29 0f		and #$0f			and 	#15
.118f	c9 0a		cmp #$0a			cmp 	#10
.1191	90 02		bcc $1195			bcc 	_AWIPNDigit
.1193	69 06		adc #$06			adc 	#6
.1195					_AWIPNDigit:
.1195	69 30		adc #$30			adc 	#48
.1197					AWIPrintChar:
.1197	85 32		sta $32				sta 	tempShort
.1199	8a		txa				txa
.119a	48		pha				pha
.119b	a5 32		lda $32				lda 	tempShort
.119d	a2 16		ldx #$16		ldx	#22
.119f	20 f6 14	jsr $14f6		jsr	deviceHandler
.11a2	68		pla				pla
.11a3	aa		tax				tax
.11a4	60		rts				rts

;******  Return to file: assembler/assembler.asm


;******  Processing file: assembler/assemblecmd.asm

.0af3					asmToken:
>0af3							.fill 	1
.0af4					asmMode:
>0af4							.fill 	1 							; esInt0/1
.0af5					asmBaseOpcode:
>0af5							.fill 	1
.11a5					AssembleOneInstruction:
.11a5	8d f3 0a	sta $0af3			sta 	asmToken 					; save the token
.11a8	aa		tax				tax
.11a9	bd 72 11	lda $1172,x			lda 	OpcodeTable-TKA_GROUP1,x 	; get the base opcode.
.11ac	8d f5 0a	sta $0af5			sta 	asmBaseOpcode
.11af	20 5d 10	jsr $105d			jsr 	AsmGetOperand 				; identify the address mode and operand where applicable.
.11b2	8d f4 0a	sta $0af4			sta 	asmMode
.11b5	a5 58		lda $58				lda 	esInt1 						; check if this is a three byte operand.
.11b7	d0 05		bne $11be			bne 	_AOIThreeBytes 				; if so, we have to use three byte
.11b9	20 d4 11	jsr $11d4			jsr 	AssembleAttempt 			; try to assemble token/mode/operand (2 bytes)
.11bc	b0 10		bcs $11ce			bcs 	_AOISuccess 				; worked ok.
.11be					_AOIThreeBytes:
.11be	ae f4 0a	ldx $0af4			ldx 	asmMode 					; convert mode to 3 byte version, where possible.
.11c1	bd f8 11	lda $11f8,x			lda 	AbsoluteVersionTable,x
.11c4	30 09		bmi $11cf			bmi 	_AOIError					; not possible, no equivalent.
.11c6	8d f4 0a	sta $0af4			sta 	asmMode
.11c9	20 d4 11	jsr $11d4			jsr 	AssembleAttempt 			; try to assemble token/mode/operand (3 bytes)
.11cc	90 01		bcc $11cf			bcc 	_AOIError 					; didn't work.
.11ce					_AOISuccess:
.11ce	60		rts				rts
.11cf					_AOIError:
.11cf	a2 24		ldx #$24			ldx 	#ErrorID_Assembler
.11d1	20 18 15	jsr $1518		jsr	errorHandler
.11d4					AssembleAttempt:
.11d4	20 dd 11	jsr $11dd			jsr 	_AADispatch 				; go to the code which dispatches to the appropriate
.11d7	b0 03		bcs $11dc			bcs 	_AAExit 					; exit if carry set, e.g. was successful
.11d9	20 87 13	jsr $1387			jsr 	AssembleSpecialCase
.11dc					_AAExit:
.11dc	60		rts				rts
.11dd					_AADispatch:
.11dd	ad f3 0a	lda $0af3			lda 	asmToken
.11e0	c9 b7		cmp #$b7			cmp 	#TKA_GROUP4
.11e2	b0 11		bcs $11f5			bcs 	_AAGroup4
.11e4	c9 ae		cmp #$ae			cmp 	#TKA_GROUP3
.11e6	b0 0a		bcs $11f2			bcs 	_AAGroup3
.11e8	c9 9c		cmp #$9c			cmp 	#TKA_GROUP2
.11ea	b0 03		bcs $11ef			bcs 	_AAGroup2
.11ec	4c cd 12	jmp $12cd			jmp 	AssembleGroup1
.11ef					_AAGroup2:
.11ef	4c 28 13	jmp $1328			jmp 	AssembleGroup2
.11f2					_AAGroup3:
.11f2	4c 49 13	jmp $1349			jmp 	AssembleGroup3
.11f5					_AAGroup4:
.11f5	4c 7d 13	jmp $137d			jmp 	AssembleGroup4
.11f8					AbsoluteVersionTable:
>11f8	ff						.byte	$FF 			; fail AMD_IMM
>11f9	03						.byte	AMD_ABS 		; absolute AMD_ZERO
>11fa	ff						.byte	$FF 			; fail AMD_ACCIMP
>11fb	ff						.byte	$FF 			; fail AMD_ABS
>11fc	ff						.byte 	$FF 			; fail AMD_ZEROINDY
>11fd	07						.byte	AMD_ABSX 		; absolute AMD_ZEROX
>11fe	ff						.byte	$FF 			; fail AMD_ABSY
>11ff	ff						.byte	$FF 			; fail AMD_ABSX
>1200	0a						.byte	AMD_ABSIND 		; absolute AMD_ZEROIND
>1201	06						.byte	AMD_ABSY 		; absolute AMD_ZEROY
>1202	ff						.byte	$FF 			; fail AMD_ABSIND
>1203	ff						.byte	$FF 			; fail AMD_ABSINDX
>1204	ff						.byte	$FF 			; fail AMD_REL
>1205	0b						.byte 	AMD_ABSINDX 	; absolute AMD_ZEROINDX

;******  Processing file: assembler/../generated/asmtables.inc

.1206					OpcodeTable:
>1206	01					.byte	$01			; $94 ora
>1207	21					.byte	$21			; $95 (and)
>1208	41					.byte	$41			; $96 eor
>1209	61					.byte	$61			; $97 adc
>120a	81					.byte	$81			; $98 sta
>120b	a1					.byte	$a1			; $99 lda
>120c	c1					.byte	$c1			; $9a cmp
>120d	e1					.byte	$e1			; $9b sbc
>120e	02					.byte	$02			; $9c asl
>120f	22					.byte	$22			; $9d rol
>1210	42					.byte	$42			; $9e lsr
>1211	62					.byte	$62			; $9f ror
>1212	82					.byte	$82			; $a0 stx
>1213	a2					.byte	$a2			; $a1 ldx
>1214	c2					.byte	$c2			; $a2 dec
>1215	e2					.byte	$e2			; $a3 inc
>1216	60					.byte	$60			; $a4 stz
>1217	20					.byte	$20			; $a5 bit
>1218	80					.byte	$80			; $a6 sty
>1219	a0					.byte	$a0			; $a7 ldy
>121a	c0					.byte	$c0			; $a8 cpy
>121b	e0					.byte	$e0			; $a9 cpx
>121c	00					.byte	$00			; $aa tsb
>121d	10					.byte	$10			; $ab trb
>121e	14					.byte	$14			; $ac jsr
>121f	40					.byte	$40			; $ad jmp
>1220	10					.byte	$10			; $ae bpl
>1221	30					.byte	$30			; $af bmi
>1222	50					.byte	$50			; $b0 bvc
>1223	70					.byte	$70			; $b1 bvs
>1224	90					.byte	$90			; $b2 bcc
>1225	b0					.byte	$b0			; $b3 bcs
>1226	d0					.byte	$d0			; $b4 bne
>1227	f0					.byte	$f0			; $b5 beq
>1228	80					.byte	$80			; $b6 bra
>1229	00					.byte	$00			; $b7 brk
>122a	08					.byte	$08			; $b8 php
>122b	18					.byte	$18			; $b9 clc
>122c	28					.byte	$28			; $ba plp
>122d	38					.byte	$38			; $bb sec
>122e	40					.byte	$40			; $bc rti
>122f	48					.byte	$48			; $bd pha
>1230	58					.byte	$58			; $be cli
>1231	5a					.byte	$5a			; $bf phy
>1232	60					.byte	$60			; $c0 rts
>1233	68					.byte	$68			; $c1 pla
>1234	78					.byte	$78			; $c2 sei
>1235	7a					.byte	$7a			; $c3 ply
>1236	88					.byte	$88			; $c4 dey
>1237	8a					.byte	$8a			; $c5 txa
>1238	98					.byte	$98			; $c6 tya
>1239	9a					.byte	$9a			; $c7 txs
>123a	a8					.byte	$a8			; $c8 tay
>123b	aa					.byte	$aa			; $c9 tax
>123c	b8					.byte	$b8			; $ca clv
>123d	ba					.byte	$ba			; $cb tsx
>123e	c8					.byte	$c8			; $cc iny
>123f	ca					.byte	$ca			; $cd dex
>1240	d8					.byte	$d8			; $ce cld
>1241	da					.byte	$da			; $cf phx
>1242	e8					.byte	$e8			; $d0 inx
>1243	ea					.byte	$ea			; $d1 nop
>1244	f8					.byte	$f8			; $d2 sed
>1245	fa					.byte	$fa			; $d3 plx
.1246					Group2OpcodeAvailability:
>1246	ae					.byte	$ae			; $9c asl $02
>1247	ae					.byte	$ae			; $9d rol $22
>1248	ae					.byte	$ae			; $9e lsr $42
>1249	ae					.byte	$ae			; $9f ror $62
>124a	0a					.byte	$0a			; $a0 stx $82
>124b	0b					.byte	$0b			; $a1 ldx $a2
>124c	aa					.byte	$aa			; $a2 dec $c2
>124d	aa					.byte	$aa			; $a3 inc $e2
>124e	22					.byte	$22			; $a4 stz $60
>124f	aa					.byte	$aa			; $a5 bit $20
>1250	2a					.byte	$2a			; $a6 sty $80
>1251	ab					.byte	$ab			; $a7 ldy $a0
>1252	2b					.byte	$2b			; $a8 cpy $c0
>1253	0b					.byte	$0b			; $a9 cpx $e0
>1254	0a					.byte	$0a			; $aa tsb $00
>1255	0a					.byte	$0a			; $ab trb $10
>1256	08					.byte	$08			; $ac jsr $14
>1257	08					.byte	$08			; $ad jmp $40
.1258					AssemblerSpecialCases:
>1258	ad 0a 6c				.byte	$ad,10,$6c		; jmp (abs)
>125b	ad 0b 7c				.byte	$ad,11,$7c		; jmp (abs,x)
>125e	a1 06 be				.byte	$a1,6,$be		; ldx abs,y
>1261	a1 09 b6				.byte	$a1,9,$b6		; ldx zp,y
>1264	a0 09 96				.byte	$a0,9,$96		; stx zp,y
>1267	a3 02 1a				.byte	$a3,2,$1a		; inc acc
>126a	a2 02 3a				.byte	$a2,2,$3a		; dec acc
>126d	a5 00 89				.byte	$a5,0,$89		; bit #
>1270	a4 03 9c				.byte	$a4,3,$9c		; stz abs
>1273	a4 07 9e				.byte	$a4,7,$9e		; stz abs,x
>1276	00					.byte	0

;******  Return to file: assembler/assemblecmd.asm


;******  Return to file: assembler/assembler.asm


;******  Processing file: assembler/assemblelabel.asm

.1277					AssembleLabel:
.1277	b1 28		lda ($28),y			lda 	(codePtr),y 				; check it's followed by a variable name.
.1279	c9 3a		cmp #$3a			cmp 	#$3A
.127b	b0 4b		bcs $12c8			bcs 	_ALSyntax
.127d	a9 00		lda #$00			lda 	#0							; get a variable name on to stack:0
.127f	a2 02		ldx #$02		ldx	#2
.1281	20 e9 45	jsr $45e9		jsr	variableHandler
.1284	a5 48		lda $48				lda 	esType 						; check integer reference
.1286	c9 80		cmp #$80			cmp 	#$80
.1288	d0 3e		bne $12c8			bne 	_ALSyntax
.128a	a5 50		lda $50				lda 	esInt0 						; copy that reference address to temp0
.128c	85 2a		sta $2a				sta 	temp0
.128e	a5 58		lda $58				lda 	esInt1
.1290	85 2b		sta $2b				sta 	temp0+1
.1292	98		tya				tya
.1293	48		pha				pha
.1294	ad 38 0a	lda $0a38			lda 	SingleLetterVar+("O"-"A")*4	; are we in Pass 2
.1297	4a		lsr a				lsr 	a
.1298	90 11		bcc $12ab			bcc 	_ALWrite
.129a	a0 00		ldy #$00			ldy 	#0
.129c	ad 3c 0a	lda $0a3c			lda 	SingleLetterVar+("P"-"A")*4 ; compare the value in P to the variable
.129f	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.12a1	d0 20		bne $12c3			bne 	_ALChanged
.12a3	c8		iny				iny
.12a4	ad 3d 0a	lda $0a3d			lda 	SingleLetterVar+("P"-"A")*4+1
.12a7	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.12a9	d0 18		bne $12c3			bne 	_ALChanged
.12ab					_ALWrite:
.12ab	a0 00		ldy #$00			ldy 	#0
.12ad	ad 3c 0a	lda $0a3c			lda 	SingleLetterVar+("P"-"A")*4 ; copy the value in P into the variable
.12b0	91 2a		sta ($2a),y			sta 	(temp0),y
.12b2	ad 3d 0a	lda $0a3d			lda 	SingleLetterVar+("P"-"A")*4+1
.12b5	c8		iny				iny
.12b6	91 2a		sta ($2a),y			sta 	(temp0),y
.12b8	a9 00		lda #$00			lda 	#0
.12ba	c8		iny				iny
.12bb	91 2a		sta ($2a),y			sta 	(temp0),y
.12bd	c8		iny				iny
.12be	91 2a		sta ($2a),y			sta 	(temp0),y
.12c0	68		pla				pla
.12c1	a8		tay				tay
.12c2	60		rts				rts
.12c3					_ALChanged:
.12c3	a2 26		ldx #$26			ldx 	#ErrorID_Label
.12c5	20 18 15	jsr $1518		jsr	errorHandler
.12c8					_ALSyntax:
.12c8	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.12ca	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: assembler/assembler.asm


;******  Processing file: assembler/subgroup.asm

.12cd					AssembleGroup1:
.12cd	ad f3 0a	lda $0af3			lda 	asmToken 					; firstly, we throw out STA immediate
.12d0	c9 98		cmp #$98			cmp 	#TKW_STA
.12d2	d0 07		bne $12db			bne 	_AG1NotStoreImm
.12d4	ad f4 0a	lda $0af4			lda 	asmMode
.12d7	c9 00		cmp #$00			cmp 	#AMD_IMM
.12d9	f0 2c		beq $1307			beq 	AG1ModeError
.12db					_AG1NotStoreImm:
.12db	ae f4 0a	ldx $0af4			ldx 	asmMode						; get mode into X.
.12de	bd 0c 13	lda $130c,x			lda		AMDOperandSize,X 			; get the size of the operand and push on stack
.12e1	48		pha				pha
.12e2	f0 23		beq $1307			beq 	AG1ModeError 				; if the size is zero, the mode must be Accumulator
.12e4	e0 00		cpx #$00			cpx 	#0 							; if the mode is zero, e.g. immediate
.12e6	d0 02		bne $12ea			bne 	_AG1NotImmediate
.12e8	a2 02		ldx #$02			ldx 	#2 							; then we use offset 2 here. This is how the 6502
.12ea					_AG1NotImmediate:
.12ea	e0 0d		cpx #$0d			cpx 	#AMD_ZEROINDX 				; (zero,x) uses slot 0.
.12ec	d0 02		bne $12f0			bne 	_AG1NotZX
.12ee	a2 00		ldx #$00			ldx 	#0
.12f0					_AG1NotZX:
.12f0	68		pla				pla 								; restore length
.12f1	e0 09		cpx #$09			cpx 	#9 							; anything > 8 fails.
.12f3	b0 10		bcs $1305			bcs 	AG1Fail
.12f5					AG1ReturnValue:
.12f5	85 32		sta $32				sta 	tempShort 					; save size of operand
.12f7	18		clc				clc
.12f8	bd 1a 13	lda $131a,x			lda 	AMDOffsetFromBase,X 		; get the offset for the address mode.
.12fb	6d f5 0a	adc $0af5			adc 	asmBaseOpcode 				; add the base opcode.
.12fe	a6 32		ldx $32				ldx 	tempShort 					; length in X
.1300	20 10 11	jsr $1110			jsr 	AsmWriteInstruction 		; output instruction.
.1303	38		sec				sec
.1304	60		rts				rts
.1305					AG1Fail:
.1305	18		clc				clc
.1306	60		rts				rts
.1307					AG1ModeError:
.1307	a2 24		ldx #$24			ldx 	#ErrorID_Assembler
.1309	20 18 15	jsr $1518		jsr	errorHandler
.130c					AMDOperandSize:
>130c	01 01 00 02					.byte 	1,1,0,2
>1310	01 01 02 02					.byte 	1,1,2,2
>1314	01 01 02 02					.byte 	1,1,2,2
>1318	01 01						.byte 	1,1
.131a					AMDOffsetFromBase:
>131a	00 04 08 0c					.byte 	0,4,8,12
>131e	10 14 18 1c					.byte	16,20,24,28
>1322	11 00 00 00					.byte 	17,0,0,0
>1326	00 00						.byte 	0,0
.1328					AssembleGroup2:
.1328	ad f4 0a	lda $0af4			lda 	asmMode 					; get the mode; if >= 8 cannot be a legit group 2
.132b	c9 08		cmp #$08			cmp 	#8
.132d	b0 18		bcs $1347			bcs 	_AG2Fail
.132f	85 2a		sta $2a				sta 	temp0 						; save in temp9
.1331	ae f3 0a	ldx $0af3			ldx 	asmToken					; get token in X, then get the availability flags for it
.1334	bd aa 11	lda $11aa,x			lda 	Group2OpcodeAvailability-TKA_GROUP2,x
.1337					_AG2Shift:
.1337	4a		lsr a				lsr 	a
.1338	c6 2a		dec $2a				dec 	temp0
.133a	10 fb		bpl $1337			bpl 	_AG2Shift
.133c	90 09		bcc $1347			bcc 	_AG2Fail 					; cannot do that instruction w/that opcode.
.133e	ae f4 0a	ldx $0af4			ldx  	asmMode 					; mode in X
.1341	bd 0c 13	lda $130c,x			lda		AMDOperandSize,X 			; get the size of the operand in A
.1344	4c f5 12	jmp $12f5			jmp 	AG1ReturnValue 				; and use that with Group 1's exit code
.1347					_AG2Fail:
.1347	18		clc				clc
.1348	60		rts				rts
.1349					AssembleGroup3:
.1349	ad 38 0a	lda $0a38			lda 	SingleLetterVar+("O"-"A")*4	; check bit 0 (pass) of O
.134c	4a		lsr a				lsr 	a
.134d	a9 00		lda #$00			lda 	#0 							; if clear, e.g. pass 1, use default zero.
.134f	90 21		bcc $1372			bcc 	_AG3Default
.1351	38		sec				sec	 								; calculate branch offset
.1352	a5 50		lda $50				lda		esInt0
.1354	ed 3c 0a	sbc $0a3c			sbc 	SingleLetterVar+("P"-"A")*4
.1357	aa		tax				tax
.1358	a5 58		lda $58				lda		esInt1
.135a	ed 3d 0a	sbc $0a3d			sbc 	SingleLetterVar+("P"-"A")*4+1
.135d	85 58		sta $58				sta 	esInt1
.135f	8a		txa				txa 								; add 126, now 128 too many.
.1360	18		clc				clc 								; we can use this to check the range
.1361	69 7e		adc #$7e			adc 	#126
.1363	85 50		sta $50				sta 	esInt0
.1365	90 02		bcc $1369			bcc 	_AG3NoCarry
.1367	e6 58		inc $58				inc 	esInt1
.1369					_AG3NoCarry:
.1369	a5 58		lda $58				lda 	esInt1 						; check in range.
.136b	d0 0b		bne $1378			bne 	_AG3Range
.136d	a5 50		lda $50				lda 	esInt0 						; fix up branch distance
.136f	38		sec				sec
.1370	e9 80		sbc #$80			sbc 	#128
.1372					_AG3Default:
.1372	85 50		sta $50				sta 	esInt0
.1374					_AG3ExitOk:
.1374	a2 01		ldx #$01			ldx 	#1 							; one opcode, use AG4 Code
.1376	d0 07		bne $137f			bne 	AG4Write
.1378					_AG3Range:
.1378	a2 25		ldx #$25			ldx 	#ErrorID_Branch
.137a	20 18 15	jsr $1518		jsr	errorHandler
.137d					AssembleGroup4:
.137d	a2 00		ldx #$00			ldx 	#0 							; no parameters in the opcode.
.137f					AG4Write:
.137f	ad f5 0a	lda $0af5			lda 	asmBaseOpcode				; the opcode is the opcode base.
.1382	20 10 11	jsr $1110			jsr 	AsmWriteInstruction 		; output instruction.
.1385	38		sec				sec
.1386	60		rts				rts
.1387					AssembleSpecialCase:
.1387	a2 00		ldx #$00			ldx 	#0
.1389					_ASCScan:
.1389	bd 58 12	lda $1258,x			lda 	AssemblerSpecialCases,x 	; scan token and mode for match
.138c	cd f3 0a	cmp $0af3			cmp 	asmToken
.138f	d0 08		bne $1399			bne 	_ASCNext
.1391	bd 59 12	lda $1259,x			lda 	AssemblerSpecialCases+1,x
.1394	cd f4 0a	cmp $0af4			cmp 	asmMode
.1397	f0 0a		beq $13a3			beq 	_ASCFound
.1399					_ASCNext:
.1399	e8		inx				inx									; next entry
.139a	e8		inx				inx
.139b	e8		inx				inx
.139c	bd 58 12	lda $1258,x			lda 	AssemblerSpecialCases,x 	; until table ends
.139f	d0 e8		bne $1389			bne 	_ASCScan
.13a1	18		clc				clc
.13a2	60		rts				rts
.13a3					_ASCFound:
.13a3	bd 5a 12	lda $125a,x			lda 	AssemblerSpecialCases+2,x 	; get the new opcode.
.13a6	48		pha				pha
.13a7	ae f4 0a	ldx $0af4			ldx  	asmMode 					; mode in X
.13aa	bd 0c 13	lda $130c,x			lda		AMDOperandSize,X 			; get the size of the operand in X
.13ad	aa		tax				tax
.13ae	68		pla				pla 								; opcode back
.13af	20 10 11	jsr $1110			jsr 	AsmWriteInstruction 		; output instruction.
.13b2	38		sec				sec
.13b3	60		rts				rts

;******  Return to file: assembler/assembler.asm

.13b4					assemblerHandler:
.13b4	7c b7 13	jmp ($13b7,x)			jmp 	(assemblerVectors,x)
.13b7					assemblerVectors:
>13b7	bd 13					.word _DummyControlHandler ; index 0
>13b9	a5 11					.word AssembleOneInstruction ; index 2
>13bb	77 12					.word AssembleLabel        ; index 4
.13bd					_DummyControlHandler:
.13bd	60		rts			rts

;******  Return to file: basic.asm

.13be					section_end_assembler:
.13be					section_start_device:

;******  Processing file: device/device.asm


;******  Processing file: device/option_x16/x16break.asm

.13be					X16Break:
.13be	20 e1 ff	jsr $ffe1			jsr 	$FFE1
.13c1	f0 01		beq $13c4			beq 	_IsBreak
.13c3	60		rts				rts
.13c4					_IsBreak:
.13c4	a2 21		ldx #$21			ldx 	#ErrorID_Break
.13c6	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: device/device.asm


;******  Processing file: device/option_x16/x16file.asm

.13c9					ExternSave:
.13c9	98		tya				tya
.13ca	48		pha				pha
.13cb	20 19 14	jsr $1419			jsr 	ExternGetLength 			; get length of file into A name YX
.13ce	20 bd ff	jsr $ffbd			jsr 	$FFBD 						; set name
.13d1	a9 01		lda #$01			lda 	#1
.13d3	a2 08		ldx #$08			ldx 	#8	 						; device #8
.13d5	a0 00		ldy #$00			ldy 	#0
.13d7	20 ba ff	jsr $ffba			jsr 	$FFBA 						; set LFS
.13da	a5 51		lda $51				lda 	esInt0+1 					; copy start of save address to temp0
.13dc	85 2a		sta $2a				sta 	temp0
.13de	a5 59		lda $59				lda 	esInt1+1
.13e0	85 2b		sta $2b				sta 	temp0+1
.13e2	a6 52		ldx $52				ldx 	esInt0+2 					; end address
.13e4	a4 5a		ldy $5a				ldy 	esInt1+2
.13e6	a9 2a		lda #$2a			lda 	#temp0 						; ref to start address
.13e8	20 d8 ff	jsr $ffd8			jsr 	$FFD8 						; save
.13eb	b0 03		bcs $13f0			bcs 	_ESSave
.13ed	68		pla				pla
.13ee	a8		tay				tay
.13ef	60		rts				rts
.13f0					_ESSave:
.13f0	a2 1f		ldx #$1f			ldx 	#ErrorID_Save
.13f2	20 18 15	jsr $1518		jsr	errorHandler
.13f5					ExternLoad:
.13f5	98		tya				tya
.13f6	48		pha				pha
.13f7	20 19 14	jsr $1419			jsr 	ExternGetLength 			; get length of file into A name YX
.13fa	20 bd ff	jsr $ffbd			jsr 	$FFBD 						; set name
.13fd	a9 01		lda #$01			lda 	#1
.13ff	a2 08		ldx #$08			ldx 	#8	 						; device #8
.1401	a0 00		ldy #$00			ldy 	#0
.1403	20 ba ff	jsr $ffba			jsr 	$FFBA 						; set LFS
.1406	a6 51		ldx $51				ldx 	esInt0+1 					; load address
.1408	a4 59		ldy $59				ldy 	esInt1+1
.140a	a9 00		lda #$00			lda 	#0 							; load command
.140c	20 d5 ff	jsr $ffd5			jsr 	$FFD5
.140f	b0 03		bcs $1414			bcs 	_ESLoad
.1411	68		pla				pla
.1412	a8		tay				tay
.1413	60		rts				rts
.1414					_ESLoad:
.1414	a2 20		ldx #$20			ldx 	#ErrorID_Load
.1416	20 18 15	jsr $1518		jsr	errorHandler
.1419					ExternGetLength:
.1419	a5 50		lda $50				lda 	esInt0 						; length into A.
.141b	85 2a		sta $2a				sta 	temp0
.141d	a5 58		lda $58				lda 	esInt1
.141f	85 2b		sta $2b				sta 	temp0+1
.1421	a0 00		ldy #$00			ldy 	#0
.1423	b1 2a		lda ($2a),y			lda 	(temp0),y
.1425	a6 50		ldx $50				ldx 	esInt0 						; name into YX
.1427	a4 58		ldy $58				ldy 	esInt1
.1429	e8		inx				inx 								; advance over the length pointer.
.142a	d0 01		bne $142d			bne 	_ESNoCarry
.142c	c8		iny				iny
.142d					_ESNoCarry:
.142d	60		rts				rts

;******  Return to file: device/device.asm


;******  Processing file: device/option_x16/x16io.asm

=240					MaxLineInputSize = 240
.0af6					bufferCount:
>0af6							.fill 	0
.0af6					bufferStorage:
>0af6							.fill 	MaxLineInputSize
.142e					IOControlHandler:
.142e	c9 00		cmp #$00			cmp 	#0
.1430	d0 12		bne $1444			bne		_CHExit
.1432	a9 0f		lda #$0f			lda 	#15 						; switch to upper/lower case mode
.1434	20 5d 14	jsr $145d			jsr 	IOPrintChar
.1437	a9 02		lda #$02			lda 	#2 							; green on black and clear screen
.1439	20 89 14	jsr $1489			jsr 	IOInk
.143c	a9 00		lda #$00			lda 	#0
.143e	20 9d 14	jsr $149d			jsr 	IOPaper
.1441	20 45 14	jsr $1445			jsr 	IOClearScreen
.1444					_CHExit:
.1444	60		rts				rts
.1445					IOClearScreen:
.1445	48		pha				pha
.1446	a9 93		lda #$93			lda	 	#147 						; char code $93 clears screen
.1448	20 5d 14	jsr $145d			jsr 	IOPrintChar
.144b	68		pla				pla
.144c	60		rts				rts
.144d					IONewLine:
.144d	48		pha				pha
.144e	a9 0d		lda #$0d			lda 	#13
.1450	20 5d 14	jsr $145d			jsr 	IOPrintChar
.1453	68		pla				pla
.1454	60		rts				rts
.1455					IOTab:
.1455	48		pha				pha
.1456	a9 20		lda #$20			lda 	#32
.1458	20 5d 14	jsr $145d			jsr 	IOPrintChar
.145b	68		pla				pla
.145c	60		rts				rts
.145d					IOPrintAscii:
.145d					IOPrintChar:
.145d	aa		tax				tax 								; save in X so we can save Y
.145e	5a		phy				phy
.145f	8a		txa				txa
.1460	c9 08		cmp #$08			cmp 	#8 							; make BS (8) onto CHR$(14) which is the
.1462	d0 02		bne $1466			bne 	_IOPCNotBS 					; Commodore/X16 backspace code.
.1464	a9 14		lda #$14			lda 	#$14
.1466					_IOPCNotBS:
.1466	20 d2 ff	jsr $ffd2			jsr 	$FFD2 						; CBM OS Call.
.1469	7a		ply				ply
.146a	60		rts				rts
.146b					IOInkey:
.146b	98		tya				tya
.146c	48		pha				pha
.146d	20 e4 ff	jsr $ffe4			jsr 	$FFE4
.1470	85 32		sta $32				sta 	tempShort
.1472	68		pla				pla
.1473	a8		tay				tay
.1474	a5 32		lda $32				lda 	tempShort					; no key pressed.
.1476	f0 10		beq $1488			beq 	_IOIExit
.1478	c9 0d		cmp #$0d			cmp 	#13 						; allow CR (13)
.147a	f0 0c		beq $1488			beq 	_IOIExit
.147c	c9 14		cmp #$14			cmp 	#$14 						; backspace code ($14) returns 8.
.147e	f0 06		beq $1486			beq 	_IOIBackspace
.1480	c9 20		cmp #$20			cmp 	#32 						; no other control allowed.
.1482	90 e7		bcc $146b			bcc 	IOInkey
.1484	b0 02		bcs $1488			bcs 	_IOIExit
.1486					_IOIBackspace:
.1486	a9 08		lda #$08			lda 	#8 							; return chr(8)
.1488					_IOIExit:
.1488	60		rts				rts
.1489					IOInk:
.1489	48		pha				pha
.148a	29 07		and #$07			and 	#7 							; 8 primaries
.148c	aa		tax				tax
.148d	bd 95 14	lda $1495,x			lda 	_IOColourTable,x 			; look up CBM code and print it.
.1490	20 5d 14	jsr $145d			jsr 	IOPrintChar
.1493	68		pla				pla
.1494	60		rts				rts
.1495					_IOColourTable:
>1495	90						.byte 	$90 					; 0 Black
>1496	96						.byte 	$96 					; 1 Red
>1497	1e						.byte 	$1E 					; 2 Green
>1498	9e						.byte 	$9E 					; 3 Yellow
>1499	9a						.byte 	$9A 					; 4 Blue
>149a	9c						.byte 	$9C 					; 5 Magenta
>149b	9f						.byte 	$9F 					; 6 Cyan
>149c	05						.byte 	$05 					; 7 White
.149d					IOPaper:
.149d	48		pha				pha
.149e	48		pha				pha
.149f	a9 01		lda #$01			lda 	#1 						; 1 swaps fgr/bgr, so we swap them, set fgr
.14a1	20 5d 14	jsr $145d			jsr 	IOPrintChar 			; and then swap them again.
.14a4	68		pla				pla
.14a5	20 89 14	jsr $1489			jsr 	IOInk
.14a8	a9 01		lda #$01			lda 	#1
.14aa	20 5d 14	jsr $145d			jsr 	IOPrintChar
.14ad	68		pla				pla
.14ae	60		rts				rts
.14af					IOLocate:
.14af	48		pha				pha
.14b0	a9 13		lda #$13			lda 	#$13 					; home cursor code
.14b2	20 5d 14	jsr $145d			jsr 	IOPrintChar
.14b5	a9 11		lda #$11			lda 	#$11 	 				; print Y x $11 (down)
.14b7	20 be 14	jsr $14be			jsr 	_IOLoc2
.14ba	68		pla				pla
.14bb	a8		tay				tay
.14bc	a9 1d		lda #$1d			lda 	#$1D 					; print Y x $1D (right)
.14be					_IOLoc2:
.14be	c0 00		cpy #$00			cpy 	#0
.14c0	f0 06		beq $14c8			beq 	_IOLocExit
.14c2	20 5d 14	jsr $145d			jsr 	IOPrintChar
.14c5	88		dey				dey
.14c6	d0 f6		bne $14be			bne 	_IOLoc2
.14c8					_IOLocExit:
.14c8	60		rts				rts
.14c9					IOInput:
.14c9	a9 00		lda #$00			lda 	#0
.14cb	8d f6 0a	sta $0af6			sta 	bufferCount
.14ce					_IOILoop:
.14ce	20 cf ff	jsr $ffcf			jsr 	$FFCF
.14d1	c9 0d		cmp #$0d			cmp 	#13
.14d3	f0 10		beq $14e5			beq 	_IOIExit
.14d5	ae f6 0a	ldx $0af6			ldx 	bufferCount
.14d8	e0 f0		cpx #$f0			cpx 	#MaxLineInputSize
.14da	f0 f2		beq $14ce			beq 	_IOILoop
.14dc	ee f6 0a	inc $0af6			inc 	bufferCount
.14df	9d f7 0a	sta $0af7,x			sta 	bufferStorage+1,x
.14e2	4c ce 14	jmp $14ce			jmp 	_IOILoop
.14e5					_IOIExit:
.14e5	a9 f6		lda #$f6			lda 	#(bufferCount) & $FF
.14e7	85 2a		sta $2a				sta 	temp0
.14e9	a9 0a		lda #$0a			lda 	#(bufferCount) >> 8
.14eb	85 2b		sta $2b				sta 	1+(temp0)
.14ed	60		rts				rts

;******  Return to file: device/device.asm


;******  Processing file: device/option_x16/x16timer.asm

.14ee					IOReadTimer:
.14ee	20 de ff	jsr $ffde			jsr 	$FFDE 						; reads timer into YXA so we want only YA
.14f1	48		pha				pha
.14f2	8a		txa				txa
.14f3	a8		tay				tay
.14f4	68		pla				pla
.14f5	60		rts				rts

;******  Return to file: device/device.asm

.14f6					deviceHandler:
.14f6	7c f9 14	jmp ($14f9,x)			jmp 	(deviceVectors,x)
.14f9					deviceVectors:
>14f9	2e 14					.word IOControlHandler     ; index 0
>14fb	be 13					.word X16Break             ; index 2
>14fd	45 14					.word IOClearScreen        ; index 4
>14ff	4d 14					.word IONewLine            ; index 6
>1501	89 14					.word IOInk                ; index 8
>1503	6b 14					.word IOInkey              ; index 10
>1505	c9 14					.word IOInput              ; index 12
>1507	f5 13					.word ExternLoad           ; index 14
>1509	af 14					.word IOLocate             ; index 16
>150b	9d 14					.word IOPaper              ; index 18
>150d	5d 14					.word IOPrintChar          ; index 20
>150f	5d 14					.word IOPrintAscii         ; index 22
>1511	c9 13					.word ExternSave           ; index 24
>1513	55 14					.word IOTab                ; index 26
>1515	ee 14					.word IOReadTimer          ; index 28
.1517					_DummyControlHandler:
.1517	60		rts			rts

;******  Return to file: basic.asm

.1518					section_end_device:
.1518					section_start_error:

;******  Processing file: error/error.asm


;******  Processing file: error/errorhandler.asm

.1518					ErrorHandler:
.1518	8a		txa				txa
.1519	48		pha				pha
.151a	a9 01		lda #$01			lda 	#1 							; red
.151c	a2 08		ldx #$08		ldx	#8
.151e	20 f6 14	jsr $14f6		jsr	deviceHandler
.1521	68		pla				pla
.1522	aa		tax				tax
.1523	a9 8e		lda #$8e			lda 	#(ErrorTextList) & $FF
.1525	85 2a		sta $2a				sta 	temp0
.1527	a9 15		lda #$15			lda 	#(ErrorTextList) >> 8
.1529	85 2b		sta $2b				sta 	1+(temp0)
.152b	ca		dex		_EHFind:dex									; errors start at 1
.152c	f0 10		beq $153e			beq 	_EHFound
.152e	a0 00		ldy #$00			ldy 	#0 							; goto next text message, add length + 1 to the pointer.
.1530	38		sec				sec
.1531	a5 2a		lda $2a				lda 	temp0
.1533	71 2a		adc ($2a),y			adc 	(temp0),y
.1535	85 2a		sta $2a				sta 	temp0
.1537	90 f2		bcc $152b			bcc 	_EHFind
.1539	e6 2b		inc $2b				inc 	temp0+1
.153b	4c 2b 15	jmp $152b			jmp 	_EHFind
.153e					_EHFound:
.153e	20 52 18	jsr $1852			jsr 	EHPrintAscii 				; print the string "temp0" now points to.
.1541	a0 00		ldy #$00			ldy 	#0 							; in a line, e.g. the offset to next is non zero.
.1543	b1 28		lda ($28),y			lda 	(codePtr),y
.1545	f0 39		beq $1580			beq 	_EHNoLine
.1547	a5 29		lda $29				lda 	codePtr+1 					; code running from the command line.
.1549	cd c9 0a	cmp $0ac9			cmp 	basePage+1
.154c	90 32		bcc $1580			bcc 	_EHNoLine
.154e	a9 8a		lda #$8a			lda 	#(EHAtMsg) & $FF
.1550	85 2a		sta $2a				sta 	temp0
.1552	a9 15		lda #$15			lda 	#(EHAtMsg) >> 8
.1554	85 2b		sta $2b				sta 	1+(temp0)
.1556	20 52 18	jsr $1852			jsr 	EHPrintAscii
.1559	a0 01		ldy #$01			ldy 	#1 							; set up line number in TOS
.155b	a2 00		ldx #$00			ldx 	#0
.155d	b1 28		lda ($28),y			lda 	(codePtr),y
.155f	95 50		sta $50,x			sta 	esInt0,x
.1561	c8		iny				iny
.1562	b1 28		lda ($28),y			lda 	(codePtr),y
.1564	95 58		sta $58,x			sta 	esInt1,x
.1566	a9 00		lda #$00			lda 	#0
.1568	95 60		sta $60,x			sta 	esInt2,x
.156a	95 68		sta $68,x			sta 	esInt3,x
.156c	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.156e	85 2a		sta $2a				sta 	temp0
.1570	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.1572	85 2b		sta $2b				sta 	1+(temp0)
.1574	a0 0a		ldy #$0a			ldy 	#10 						; in base 10.
.1576	a9 00		lda #$00			lda 	#0							; stack position zero.
.1578	a2 12		ldx #$12		ldx	#18
.157a	20 07 37	jsr $3707		jsr	mainHandler
.157d	20 52 18	jsr $1852			jsr 	EHPrintAscii
.1580					_EHNoLine:
.1580	a2 06		ldx #$06		ldx	#6
.1582	20 f6 14	jsr $14f6		jsr	deviceHandler
.1585	a2 04		ldx #$04		ldx	#4
.1587	20 6d 20	jsr $206d		jsr	interactionHandler
.158a					EHAtMsg:
>158a	03 20 40 20					.text 	3," @ "

;******  Processing file: error/../generated/errortext.inc

.158e					ErrorTextList:
>158e	13 46 65 61 74 75 72 65			.text 19,"Feature not Present"
>1596	20 6e 6f 74 20 50 72 65 73 65 6e 74
>15a2	0c 53 79 6e 74 61 78 20			.text 12,"Syntax Error"
>15aa	45 72 72 6f 72
>15af	0f 4d 6f 64 75 6c 65 20			.text 15,"Module disabled"
>15b7	64 69 73 61 62 6c 65 64
>15bf	10 41 73 73 65 72 74 69			.text 16,"Assertion failed"
>15c7	6f 6e 20 66 61 69 6c 65 64
>15d0	0e 44 69 76 69 64 65 20			.text 14,"Divide By Zero"
>15d8	42 79 20 5a 65 72 6f
>15df	04 53 74 6f 70				.text 4,"Stop"
>15e4	0d 54 79 70 65 20 4d 69			.text 13,"Type Mismatch"
>15ec	73 6d 61 74 63 68
>15f2	0d 49 6c 6c 65 67 61 6c			.text 13,"Illegal Value"
>15fa	20 56 61 6c 75 65
>1600	15 4d 69 73 73 69 6e 67			.text 21,"Missing right bracket"
>1608	20 72 69 67 68 74 20 62 72 61 63 6b 65 74
>1616	0d 4d 69 73 73 69 6e 67			.text 13,"Missing comma"
>161e	20 63 6f 6d 6d 61
>1624	11 4d 69 73 73 69 6e 67			.text 17,"Missing reference"
>162c	20 72 65 66 65 72 65 6e 63 65
>1636	15 4c 69 6e 65 20 4e 75			.text 21,"Line Number not found"
>163e	6d 62 65 72 20 6e 6f 74 20 66 6f 75 6e 64
>164c	0f 53 74 72 69 6e 67 20			.text 15,"String too long"
>1654	74 6f 6f 20 6c 6f 6e 67
>165c	14 52 45 54 55 52 4e 20			.text 20,"RETURN without GOSUB"
>1664	77 69 74 68 6f 75 74 20 47 4f 53 55 42
>1671	14 55 4e 54 49 4c 20 77			.text 20,"UNTIL without REPEAT"
>1679	69 74 68 6f 75 74 20 52 45 50 45 41 54
>1686	10 4e 45 58 54 20 77 69			.text 16,"NEXT without FOR"
>168e	74 68 6f 75 74 20 46 4f 52
>1697	12 57 45 4e 44 20 77 69			.text 18,"WEND without WHILE"
>169f	74 68 6f 75 74 20 57 48 49 4c 45
>16aa	14 45 4e 44 50 52 4f 43			.text 20,"ENDPROC without PROC"
>16b2	20 77 69 74 68 6f 75 74 20 50 52 4f 43
>16bf	0e 42 61 64 20 4e 45 58			.text 14,"Bad NEXT index"
>16c7	54 20 69 6e 64 65 78
>16ce	17 53 74 72 75 63 74 75			.text 23,"Structures nested wrong"
>16d6	72 65 73 20 6e 65 73 74 65 64 20 77 72 6f 6e 67
>16e6	16 43 61 6e 6e 6f 74 20			.text 22,"Cannot create variable"
>16ee	63 72 65 61 74 65 20 76 61 72 69 61 62 6c 65
>16fd	19 52 65 74 75 72 6e 20			.text 25,"Return stack out of space"
>1705	73 74 61 63 6b 20 6f 75 74 20 6f 66 20 73 70 61
>1715	63 65
>1717	11 55 6e 6b 6e 6f 77 6e			.text 17,"Unknown Procedure"
>171f	20 50 72 6f 63 65 64 75 72 65
>1729	17 50 61 72 61 6d 65 74			.text 23,"Parameters do not match"
>1731	65 72 73 20 64 6f 20 6e 6f 74 20 6d 61 74 63 68
>1741	15 41 72 72 61 79 20 61			.text 21,"Array already defined"
>1749	6c 72 65 61 64 79 20 64 65 66 69 6e 65 64
>1757	12 44 49 4d 20 72 65 71			.text 18,"DIM requires array"
>175f	75 69 72 65 73 20 61 72 72 61 79
>176a	0f 42 61 64 20 61 72 72			.text 15,"Bad array index"
>1772	61 79 20 69 6e 64 65 78
>177a	1d 57 72 6f 6e 67 20 6e			.text 29,"Wrong number of array indices"
>1782	75 6d 62 65 72 20 6f 66 20 61 72 72 61 79 20 69
>1792	6e 64 69 63 65 73
>1798	0b 4f 75 74 20 6f 66 20			.text 11,"Out of data"
>17a0	64 61 74 61
>17a4	14 43 61 6e 6e 6f 74 20			.text 20,"Cannot tokenise line"
>17ac	74 6f 6b 65 6e 69 73 65 20 6c 69 6e 65
>17b9	0b 53 61 76 65 20 66 61			.text 11,"Save failed"
>17c1	69 6c 65 64
>17c5	0b 4c 6f 61 64 20 66 61			.text 11,"Load failed"
>17cd	69 6c 65 64
>17d1	05 42 72 65 61 6b			.text 5,"Break"
>17d7	0d 4f 75 74 20 6f 66 20			.text 13,"Out of memory"
>17df	6d 65 6d 6f 72 79
>17e5	16 45 78 70 72 65 73 73			.text 22,"Expression too complex"
>17ed	69 6f 6e 20 74 6f 6f 20 63 6f 6d 70 6c 65 78
>17fc	10 42 61 64 20 4f 70 65			.text 16,"Bad Operand/Mode"
>1804	72 61 6e 64 2f 4d 6f 64 65
>180d	13 42 72 61 6e 63 68 20			.text 19,"Branch out of range"
>1815	6f 75 74 20 6f 66 20 72 61 6e 67 65
>1821	13 4c 61 62 65 6c 20 63			.text 19,"Label changed value"
>1829	68 61 6e 67 65 64 20 76 61 6c 75 65
>1835	12 4e 6f 20 53 70 72 69			.text 18,"No Sprite Selected"
>183d	74 65 20 53 65 6c 65 63 74 65 64
>1848	08 48 61 72 64 77 61 72			.text 8,"Hardware"
>1850	65
>1851	00					.byte 0

;******  Return to file: error/errorhandler.asm

.1852					EHPrintAscii:
.1852	a0 00		ldy #$00			ldy 	#0
.1854	b1 2a		lda ($2a),y			lda 	(temp0),y
.1856	aa		tax				tax
.1857	f0 0f		beq $1868			beq 	_EHPExit
.1859					_EHPLoop:
.1859	c8		iny				iny
.185a	8a		txa				txa
.185b	48		pha				pha
.185c	b1 2a		lda ($2a),y			lda 	(temp0),y
.185e	a2 16		ldx #$16		ldx	#22
.1860	20 f6 14	jsr $14f6		jsr	deviceHandler
.1863	68		pla				pla
.1864	aa		tax				tax
.1865	ca		dex				dex
.1866	d0 f1		bne $1859			bne 	_EHPLoop
.1868					_EHPExit:
.1868	60		rts				rts

;******  Return to file: error/error.asm


;******  Return to file: basic.asm

.1869					section_end_error:
.1869					section_start_extension:

;******  Processing file: extension/extension.asm


;******  Processing file: extension/extensionhandler.asm

.1869					ExtensionHandler:
.1869	c9 fe		cmp #$fe			cmp 	#$FE 						; check for force mode 0
.186b	f0 16		beq $1883			beq 	_ExtensionForce
.186d	c9 ff		cmp #$ff			cmp 	#$FF						; A = $FF command, otherwise unary function stack level.
.186f	d0 08		bne $1879			bne 	_ExtensionUnary 			; is passed in A.
.1871	b1 28		lda ($28),y			lda 	(codePtr),y 				; so this is a command, using Group 2.
.1873	c8		iny				iny
.1874	0a		asl a				asl 	a
.1875	aa		tax				tax
.1876	7c 7a 18	jmp ($187a,x)			jmp 	(Group2Vectors-12,x)
.1879					_ExtensionUnary:
.1879	48		pha				pha 								; save stack pos in A
.187a	b1 28		lda ($28),y			lda 	(codePtr),y 				; get shifted token, double into X
.187c	c8		iny				iny
.187d	0a		asl a				asl 	a
.187e	aa		tax				tax
.187f	68		pla				pla 								; restore stack pos and call group3 command.
.1880	7c 86 18	jmp ($1886,x)			jmp 	(Group3Vectors-12,X)
.1883					_ExtensionForce:
.1883	4c f2 1b	jmp $1bf2			jmp 	ForceMode0

;******  Processing file: extension/../generated/tokenvectors2.inc

.1886					Group2Vectors:
>1886	1a 1d					.word	Command_VPoke            ; $86 vpoke
>1888	1d 1d					.word	Command_VDoke            ; $87 vdoke
>188a	f2 1c					.word	Command_VLoad            ; $88 vload
>188c	04 1c					.word	CommandMode              ; $89 mode
>188e	bb 1c					.word	CommandPalette           ; $8a palette
>1890	ef 19					.word	CommandSprite            ; $8b sprite

;******  Return to file: extension/extensionhandler.asm


;******  Processing file: extension/../generated/tokenvectors3.inc

.1892					Group3Vectors:
>1892	66 1d					.word	Command_VPeek            ; $86 vpeek(
>1894	69 1d					.word	Command_VDeek            ; $87 vdeek(
>1896	c2 1b					.word	Sprite_GetX              ; $88 sprite.x(
>1898	c5 1b					.word	Sprite_GetY              ; $89 sprite.y(
>189a	32 19					.word	FunctionCollide          ; $8a hit(
>189c	aa 18					.word	Unary_JoyX               ; $8b joy.x(
>189e	ad 18					.word	Unary_JoyY               ; $8c joy.y(
>18a0	e8 18					.word	Unary_JButton            ; $8d joy.b(

;******  Return to file: extension/extensionhandler.asm

.18a2					XEvaluateInteger:
.18a2	8a		txa				txa
.18a3	a2 0a		ldx #$0a		ldx	#10
.18a5	20 07 37	jsr $3707		jsr	mainHandler
.18a8	aa		tax				tax
.18a9	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/miscellany/joystick.asm

.18aa					Unary_JoyX:
.18aa	38		sec				sec
.18ab	b0 01		bcs $18ae			bcs 	JoystickRead
.18ad					Unary_JoyY:
.18ad	18		clc				clc
.18ae					JoystickRead:
.18ae	48		pha				pha 								; save stack position
.18af	08		php				php 								; save test flag.
.18b0	a2 04		ldx #$04		ldx	#4
.18b2	20 07 37	jsr $3707		jsr	mainHandler
.18b5	20 0f 19	jsr $190f			jsr 	ReadJoystick 				; read it.
.18b8	28		plp				plp
.18b9	b0 02		bcs $18bd			bcs 	_JRNoShift 					; if Y, shift right twice so accessing Y buttons
.18bb	4a		lsr a				lsr 	a
.18bc	4a		lsr a				lsr 	a
.18bd					_JRNoShift:
.18bd	29 03		and #$03			and 	#3 							; isolate the test bits.
.18bf	f0 0d		beq $18ce			beq 	JoyReturnA 					; if nothing pressed, return A.
.18c1	c9 03		cmp #$03			cmp 	#3
.18c3	f0 07		beq $18cc			beq 	JoyReturnFalse 				; could be both on a keyboard.
.18c5	4a		lsr a				lsr 	a 							; bit 0 set, its +1
.18c6	b0 16		bcs $18de			bcs 	JoyReturn1
.18c8					JoyReturnTrue:
.18c8	a9 ff		lda #$ff			lda 	#$FF
.18ca	d0 02		bne $18ce			bne 	JoyReturnA
.18cc					JoyReturnFalse:
.18cc	a9 00		lda #$00			lda 	#0
.18ce					JoyReturnA:
.18ce	85 32		sta $32				sta 	tempShort 					; return A
.18d0	68		pla				pla
.18d1	aa		tax				tax
.18d2	a5 32		lda $32				lda 	tempShort
.18d4	95 50		sta $50,x			sta 	esInt0,x
.18d6					JoyReturn13:
.18d6	95 58		sta $58,x			sta 	esInt1,x
.18d8	95 60		sta $60,x			sta 	esInt2,x
.18da	95 68		sta $68,x			sta 	esInt3,x
.18dc	8a		txa				txa 								; return NSP in A
.18dd	60		rts				rts
.18de					JoyReturn1:
.18de	68		pla				pla
.18df	aa		tax				tax
.18e0	a9 01		lda #$01			lda 	#1
.18e2	95 50		sta $50,x			sta 	esInt0,x
.18e4	a9 00		lda #$00			lda 	#0
.18e6	f0 ee		beq $18d6			beq 	JoyReturn13
.18e8					Unary_JButton:
.18e8	48		pha				pha 								; save X on stack, put in X
.18e9	a2 0c		ldx #$0c		ldx	#12
.18eb	20 07 37	jsr $3707		jsr	mainHandler
.18ee	aa		tax				tax 								; get value to check, push on stack.
.18ef	b5 50		lda $50,x			lda 	esInt0,x
.18f1	c9 04		cmp #$04			cmp 	#4 							; check button 0-3
.18f3	b0 15		bcs $190a			bcs 	_UJBadValue
.18f5	69 05		adc #$05			adc 	#5 							; four more shifts to get the bit into carry.
.18f7	48		pha				pha 								; save that shift count on the stack.
.18f8	a2 04		ldx #$04		ldx	#4
.18fa	20 07 37	jsr $3707		jsr	mainHandler
.18fd	68		pla				pla
.18fe	aa		tax				tax
.18ff	20 0f 19	jsr $190f			jsr 	ReadJoystick 				; joystick read
.1902					_UJShift:
.1902	4a		lsr a				lsr 	a
.1903	ca		dex				dex
.1904	d0 fc		bne $1902			bne 	_UJShift
.1906	b0 c0		bcs $18c8			bcs 	JoyReturnTrue
.1908	90 c2		bcc $18cc			bcc 	JoyReturnFalse
.190a					_UJBadValue:
.190a	a2 28		ldx #$28			ldx 	#ErrorID_Hardware
.190c	20 18 15	jsr $1518		jsr	errorHandler
.190f					ReadJoystick:
.190f	8a		txa				txa
.1910	48		pha				pha
.1911	98		tya				tya
.1912	48		pha				pha
.1913	a9 00		lda #$00			lda 	#0
.1915	20 56 ff	jsr $ff56			jsr 	$FF56
.1918	c0 00		cpy #$00			cpy 	#0
.191a	d0 11		bne $192d			bne 	_RJError
.191c	c9 00		cmp #$00			cmp 	#0 							; bug, returns $00 initially
.191e	d0 02		bne $1922			bne 	_RJNoBug
.1920	a9 ff		lda #$ff			lda 	#$FF
.1922					_RJNoBug:
.1922	85 32		sta $32				sta 	tempShort
.1924	68		pla				pla
.1925	a8		tay				tay
.1926	68		pla				pla
.1927	aa		tax				tax
.1928	a5 32		lda $32				lda 	tempShort
.192a	49 ff		eor #$ff			eor 	#$FF 						; active 1 bit.
.192c	60		rts				rts
.192d					_RJError:
.192d	a2 28		ldx #$28			ldx 	#ErrorID_Hardware
.192f	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/sprites/collide.asm

.0be6					hitSprite1:
>0be6							.fill 	1 							; this won't work ... if you nest HIT() which
.0be7					hitSprite2:
>0be7							.fill 	1
.0be8					hitRange:
>0be8							.fill 	1
.1932					FunctionCollide:
.1932	48		pha				pha 								; save and put index into X
.1933	aa		tax				tax
.1934	a9 00		lda #$00			lda 	#0 							; set hit range to default.
.1936	8d e8 0b	sta $0be8			sta 	hitRange
.1939	20 de 19	jsr $19de			jsr 	_FCGetSpriteID
.193c	8d e6 0b	sta $0be6			sta 	hitSprite1
.193f	8a		txa				txa
.1940	48		pha				pha
.1941	a2 02		ldx #$02		ldx	#2
.1943	20 07 37	jsr $3707		jsr	mainHandler
.1946	68		pla				pla
.1947	aa		tax				tax
.1948	20 de 19	jsr $19de			jsr 	_FCGetSpriteID
.194b	8d e7 0b	sta $0be7			sta 	hitSprite2
.194e	b1 28		lda ($28),y			lda 	(codePtr),y 				; is there a third parameter
.1950	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.1952	f0 13		beq $1967			beq 	_FCParam2
.1954	8a		txa				txa
.1955	48		pha				pha
.1956	a2 02		ldx #$02		ldx	#2
.1958	20 07 37	jsr $3707		jsr	mainHandler
.195b	68		pla				pla
.195c	a2 0c		ldx #$0c		ldx	#12
.195e	20 07 37	jsr $3707		jsr	mainHandler
.1961	aa		tax				tax
.1962	b5 50		lda $50,x			lda 	esInt0,x
.1964	8d e8 0b	sta $0be8			sta 	hitRange
.1967					_FCParam2:
.1967	a2 04		ldx #$04		ldx	#4
.1969	20 07 37	jsr $3707		jsr	mainHandler
.196c	68		pla				pla 								; set X to point to the stack again.
.196d	48		pha				pha
.196e	aa		tax				tax
.196f	98		tya				tya
.1970	48		pha				pha
.1971	18		clc				clc 								; do it with the horizontal values.
.1972	20 94 19	jsr $1994			jsr 	_FCCheck
.1975	90 0a		bcc $1981			bcc 	_FCFail
.1977	38		sec				sec 								; do it with the vertical values.
.1978	20 94 19	jsr $1994			jsr 	_FCCheck
.197b	90 04		bcc $1981			bcc 	_FCFail
.197d	a9 ff		lda #$ff			lda 	#255 						; pass, return -1
.197f	d0 02		bne $1983			bne 	_FCReturnA
.1981					_FCFail:
.1981	a9 00		lda #$00			lda 	#0 							; return 0, it didn't work.
.1983					_FCReturnA:
.1983	85 32		sta $32				sta 	tempShort 					; put result in tempShort
.1985	68		pla				pla
.1986	a8		tay				tay
.1987	68		pla				pla 								; restore stack, return result and exit.
.1988	aa		tax				tax
.1989	a5 32		lda $32				lda 	tempShort
.198b	95 50		sta $50,x			sta 	esInt0,x
.198d	95 58		sta $58,x			sta 	esInt1,x
.198f	95 60		sta $60,x			sta 	esInt2,x
.1991	95 68		sta $68,x			sta 	esInt3,x
.1993	60		rts				rts
.1994					_FCCheck:
.1994	08		php				php 								; save the H/V flag twice
.1995	08		php				php
.1996	ad e6 0b	lda $0be6			lda 	hitSprite1 					; select sprite 1 and read its location
.1999	20 1c 1b	jsr $1b1c			jsr 	SelectSpriteA 				; into X
.199c	28		plp				plp
.199d	20 7e 1b	jsr $1b7e			jsr 	SpriteReadCoordinate
.19a0	ad e7 0b	lda $0be7			lda 	hitSprite2					; now repeat for sprite 2 and location X+1
.19a3	20 1c 1b	jsr $1b1c			jsr 	SelectSpriteA
.19a6	e8		inx				inx
.19a7	28		plp				plp
.19a8	20 7e 1b	jsr $1b7e			jsr 	SpriteReadCoordinate
.19ab	ca		dex				dex
.19ac	38		sec				sec 								; calculate |s1.c-s2.c| put in temp0
.19ad	b5 50		lda $50,x			lda 	esInt0,x
.19af	f5 51		sbc $51,x			sbc 	esInt0+1,x
.19b1	85 2a		sta $2a				sta 	temp0
.19b3	b5 58		lda $58,x			lda 	esInt1,x
.19b5	f5 59		sbc $59,x			sbc 	esInt1+1,x
.19b7	85 2b		sta $2b				sta 	temp0+1
.19b9	10 0d		bpl $19c8			bpl 	_FCCIsPositive
.19bb	38		sec				sec 								; if -ve calculate |difference|
.19bc	a9 00		lda #$00			lda 	#0
.19be	e5 2a		sbc $2a				sbc 	temp0
.19c0	85 2a		sta $2a				sta 	temp0
.19c2	a9 00		lda #$00			lda 	#0
.19c4	e5 2b		sbc $2b				sbc 	temp0+1
.19c6	85 2b		sta $2b				sta 	temp0+1
.19c8					_FCCIsPositive:
.19c8	a5 2b		lda $2b				lda 	temp0+1 					; if range >= 256 then definitely fail.
.19ca	d0 10		bne $19dc			bne 	_FCCFail
.19cc	18		clc				clc 								; work out required min distance which is
.19cd	b5 68		lda $68,x			lda 	esInt3,x 					; the sum of the half width/heights
.19cf	75 69		adc $69,x			adc 	esInt3+1,x
.19d1	ac e8 0b	ldy $0be8			ldy 	hitRange 					; get the hit range
.19d4	f0 01		beq $19d7			beq 	_FCCNoSetRange 				; override if non zero.
.19d6	98		tya				tya
.19d7					_FCCNoSetRange:
.19d7	c5 2a		cmp $2a				cmp 	temp0 						; result is range > distance
.19d9	f0 01		beq $19dc			beq 	_FCCFail
.19db	60		rts				rts
.19dc					_FCCFail:
.19dc	18		clc				clc
.19dd	60		rts				rts
.19de					_FCGetSpriteID:
.19de	8a		txa				txa
.19df	a2 0c		ldx #$0c		ldx	#12
.19e1	20 07 37	jsr $3707		jsr	mainHandler
.19e4	aa		tax				tax
.19e5	b5 50		lda $50,x			lda 	esInt0,x
.19e7	30 01		bmi $19ea			bmi 	_FCGSValue
.19e9	60		rts				rts
.19ea					_FCGSValue:
.19ea	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.19ec	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/sprites/sprite.asm

.0be9					currSprite:
>0be9							.fill 	2
.19ef					CommandSprite:
.19ef	20 f1 1a	jsr $1af1			jsr 	CSCheckOnOff 				; look for TRUE/FALSE
.19f2	d0 0d		bne $1a01			bne 	_CSCheckClear
.19f4	ad 29 9f	lda $9f29			lda 	$9F29 						; sprite enable is bit 6.
.19f7	29 bf		and #$bf			and 	#$BF 						; clear it whatever
.19f9	90 02		bcc $19fd			bcc 	_CSNotOn 					; if CS turn on, so set it
.19fb	09 40		ora #$40			ora 	#$40
.19fd					_CSNotOn:
.19fd	8d 29 9f	sta $9f29			sta 	$9F29 						; write it back in new state and exit
.1a00	60		rts				rts
.1a01					_CSCheckClear:
.1a01	a9 00		lda #$00			lda 	#0 							; no sprite currently selected.
.1a03	8d ea 0b	sta $0bea			sta 	currSprite+1
.1a06	b1 28		lda ($28),y			lda 	(codePtr),y 				; check for CLEAR
.1a08	c9 e7		cmp #$e7			cmp 	#TKW_CLEAR
.1a0a	d0 05		bne $1a11			bne 	_CSCommandLoop 				; not CLEAR, go to main loop
.1a0c	20 02 1b	jsr $1b02			jsr 	CSClearSprites 				; clear all the sprites
.1a0f	c8		iny				iny 								; consume CLEAR token and exit.
.1a10	60		rts				rts
.1a11					_CSCommandLoop:
.1a11	20 f1 1a	jsr $1af1			jsr 	CSCheckOnOff 				; check sprite on/off
.1a14	f0 2c		beq $1a42			beq 	_CSSetVisibility
.1a16	b1 28		lda ($28),y			lda 	(codePtr),y 				; get and consume character
.1a18	c9 80		cmp #$80			cmp 	#TOK_EOL					; EOL exit.
.1a1a	f0 25		beq $1a41			beq 	_CSExit
.1a1c	c8		iny				iny									; consume it
.1a1d	c9 ca		cmp #$ca			cmp 	#TKW_COLON 					; colon exit
.1a1f	f0 20		beq $1a41			beq 	_CSExit
.1a21	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; semantic comma
.1a23	f0 ec		beq $1a11			beq 	_CSCommandLoop
.1a25	c9 da		cmp #$da			cmp		#TKW_IMAGE 					; image ?
.1a27	f0 69		beq $1a92			beq 	_CSSetImage
.1a29	c9 dc		cmp #$dc			cmp 	#TKW_FLIP 					; flip ?
.1a2b	f0 2b		beq $1a58			beq 	_CSSetFlip
.1a2d	c9 ce		cmp #$ce			cmp 	#TKW_TO 					; to ?
.1a2f	f0 46		beq $1a77			beq 	_CSSetPos
.1a31	88		dey				dey 								; unpick DEY
.1a32	a9 00		lda #$00			lda 	#0 							; sprite # now at level 0
.1a34	a2 0c		ldx #$0c		ldx	#12
.1a36	20 07 37	jsr $3707		jsr	mainHandler
.1a39	a5 50		lda $50				lda 	esInt0
.1a3b	20 1c 1b	jsr $1b1c			jsr 	SelectSpriteA
.1a3e	4c 11 1a	jmp $1a11			jmp 	_CSCommandLoop
.1a41					_CSExit:
.1a41	60		rts				rts
.1a42					_CSSetVisibility:
.1a42	08		php				php 								; save carry
.1a43	a9 06		lda #$06			lda 	#6 							; set pos to offset 6.
.1a45	20 d8 1a	jsr $1ad8			jsr 	SpriteSetTarget
.1a48	ad 23 9f	lda $9f23			lda 	$9F23 						; read it.
.1a4b	29 f3		and #$f3			and 	#$F3 						; clear depth bits, disabling it.
.1a4d	28		plp				plp
.1a4e	90 02		bcc $1a52			bcc 	_CSSetOff 					; check if carry was set
.1a50	09 0c		ora #$0c			ora 	#$0C 						; otherwise set depth bits to 11, on top.
.1a52					_CSSetOff:
.1a52	8d 23 9f	sta $9f23			sta 	$9F23 						; update and loop back
.1a55	4c 11 1a	jmp $1a11			jmp 	_CSCommandLoop
.1a58					_CSSetFlip:
.1a58	a9 00		lda #$00			lda 	#0 							; image # now at level 0
.1a5a	a2 0c		ldx #$0c		ldx	#12
.1a5c	20 07 37	jsr $3707		jsr	mainHandler
.1a5f	a9 06		lda #$06			lda 	#6 							; set sprite position to +6
.1a61	20 d8 1a	jsr $1ad8			jsr 	SpriteSetTarget
.1a64	a5 50		lda $50				lda 	esInt0 						; flip value & 3 => temp0
.1a66	29 03		and #$03			and 	#3
.1a68	85 2a		sta $2a				sta 	temp0
.1a6a	ad 23 9f	lda $9f23			lda 	$9F23 						; update the flip.
.1a6d	29 fc		and #$fc			and 	#$FC
.1a6f	05 2a		ora $2a				ora 	temp0
.1a71	8d 23 9f	sta $9f23			sta 	$9F23
.1a74	4c 11 1a	jmp $1a11			jmp 	_CSCommandLoop
.1a77					_CSSetPos:
.1a77	a9 00		lda #$00			lda 	#0 							; X now at level 0
.1a79	a2 0a		ldx #$0a		ldx	#10
.1a7b	20 07 37	jsr $3707		jsr	mainHandler
.1a7e	a2 02		ldx #$02		ldx	#2
.1a80	20 07 37	jsr $3707		jsr	mainHandler
.1a83	a9 01		lda #$01			lda 	#1 							; Y now at level 1
.1a85	a2 0a		ldx #$0a		ldx	#10
.1a87	20 07 37	jsr $3707		jsr	mainHandler
.1a8a	a2 00		ldx #$00			ldx 	#0 							; coords at 0,1
.1a8c	20 3a 1b	jsr $1b3a			jsr 	SpriteMove 					; move it.
.1a8f	4c 11 1a	jmp $1a11			jmp 	_CSCommandLoop
.1a92					_CSSetImage:
.1a92	a9 00		lda #$00			lda 	#0 							; image # now at level 0
.1a94	a2 0c		ldx #$0c		ldx	#12
.1a96	20 07 37	jsr $3707		jsr	mainHandler
.1a99	a9 00		lda #$00			lda 	#0 							; set sprite position to +0
.1a9b	20 d8 1a	jsr $1ad8			jsr 	SpriteSetTarget
.1a9e	a6 50		ldx $50				ldx 	esInt0 						; get image # into X
.1aa0	bd 30 0c	lda $0c30,x			lda 	imageAddr2Low,x 			; copy low address in.
.1aa3	8d 23 9f	sta $9f23			sta 	$9F23
.1aa6	ee 20 9f	inc $9f20			inc 	$9F20 						; bump to offset 1.
.1aa9	bd f0 0b	lda $0bf0,x			lda 	imageInfo,x 				; get 4/8 bit flag from info.
.1aac	29 10		and #$10			and 	#$10
.1aae	0a		asl a				asl 	a
.1aaf	0a		asl a				asl		a
.1ab0	0a		asl a				asl 	a 							; put into bit 7
.1ab1	1d 70 0c	ora $0c70,x			ora 	imageAddr2High,x 			; or high address with it.
.1ab4	8d 23 9f	sta $9f23			sta 	$9F23 						; write the high byte.
.1ab7	a9 06		lda #$06			lda 	#6
.1ab9	20 d8 1a	jsr $1ad8			jsr 	SpriteSetTarget 			; set sprite on.
.1abc	ad 23 9f	lda $9f23			lda 	$9F23
.1abf	09 0c		ora #$0c			ora 	#$0C
.1ac1	8d 23 9f	sta $9f23			sta 	$9F23
.1ac4	ee 20 9f	inc $9f20			inc 	$9F20 						; point to byte 7 : height/width/palette offset
.1ac7	bd f0 0b	lda $0bf0,x			lda 	imageInfo,x 				; get image info
.1aca	0a		asl a				asl 	a 							; shift bits 0-3 to 4-7
.1acb	0a		asl a				asl 	a
.1acc	0a		asl a				asl 	a
.1acd	0a		asl a				asl 	a
.1ace	b0 02		bcs $1ad2			bcs		_CSNoOffset 				; if bit 4 was set don't set the offset.
.1ad0	09 0f		ora #$0f			ora 	#$0F 						; set palette offset and write back
.1ad2					_CSNoOffset:
.1ad2	8d 23 9f	sta $9f23			sta 	$9F23
.1ad5	4c 11 1a	jmp $1a11			jmp 	_CSCommandLoop
.1ad8					SpriteSetTarget:
.1ad8	0d e9 0b	ora $0be9			ora 	currSprite
.1adb	8d 20 9f	sta $9f20			sta 	$9F20
.1ade	ad ea 0b	lda $0bea			lda 	currSprite+1
.1ae1	f0 09		beq $1aec			beq 	_SSTNoSet
.1ae3	8d 21 9f	sta $9f21			sta 	$9F21
.1ae6	a9 01		lda #$01			lda 	#$01
.1ae8	8d 22 9f	sta $9f22			sta 	$9F22
.1aeb	60		rts				rts
.1aec					_SSTNoSet:
.1aec	a2 27		ldx #$27			ldx 	#ErrorID_NoSprite
.1aee	20 18 15	jsr $1518		jsr	errorHandler
.1af1					CSCheckOnOff:
.1af1	b1 28		lda ($28),y			lda 	(codePtr),y 				; get and consume it.
.1af3	c8		iny				iny
.1af4	c9 ab		cmp #$ab			cmp 	#TKW_FALSE					; return CC/EQ if FALSE
.1af6	18		clc				clc
.1af7	f0 08		beq $1b01			beq 	_CSCOExit
.1af9	c9 aa		cmp #$aa			cmp 	#TKW_TRUE 					; return CS/EQ if TRUE
.1afb	38		sec				sec 								; return NE if neither.
.1afc	f0 03		beq $1b01			beq 	_CSCOExit
.1afe	88		dey				dey 								; undo consume
.1aff	c9 aa		cmp #$aa			cmp 	#TKW_TRUE 					; and set NE again, DEY will change it.
.1b01					_CSCOExit:
.1b01	60		rts				rts
.1b02					CSClearSprites:
.1b02	a9 11		lda #$11			lda 	#$11 						; set address to 1FC00 with single bump
.1b04	8d 22 9f	sta $9f22			sta 	$9F22
.1b07	a9 fc		lda #$fc			lda 	#$FC
.1b09	8d 21 9f	sta $9f21			sta 	$9F21
.1b0c	a9 00		lda #$00			lda 	#0
.1b0e	8d 20 9f	sta $9f20			sta 	$9F20
.1b11					_CSClear:
.1b11	a9 00		lda #$00			lda 	#0 							; set everything to $00
.1b13	8d 23 9f	sta $9f23			sta 	$9F23
.1b16	ad 21 9f	lda $9f21			lda 	$9F21
.1b19	d0 f6		bne $1b11			bne 	_CSClear
.1b1b	60		rts				rts
.1b1c					SelectSpriteA:
.1b1c	85 2a		sta $2a				sta 	temp0
.1b1e	a9 00		lda #$00			lda 	#0
.1b20	06 2a		asl $2a				asl		temp0 						; multiply A:esInt0 by 8
.1b22	b0 11		bcs $1b35			bcs 	_CSBadValue 				; sprites only 0-127
.1b24	06 2a		asl $2a				asl 	temp0
.1b26	2a		rol a				rol 	a
.1b27	06 2a		asl $2a				asl 	temp0
.1b29	2a		rol a				rol 	a
.1b2a	09 fc		ora #$fc			ora 	#$FC 						; MSB of address (barring $01 upper third byte)
.1b2c	8d ea 0b	sta $0bea			sta 	currSprite+1
.1b2f	a5 2a		lda $2a				lda 	temp0 						; LSB of address
.1b31	8d e9 0b	sta $0be9			sta 	currSprite+0
.1b34	60		rts				rts
.1b35					_CSBadValue
.1b35	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.1b37	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/sprites/spritemove.asm

.1b3a					SpriteMove:
.1b3a	98		tya				tya
.1b3b	48		pha				pha
.1b3c	a9 07		lda #$07			lda 	#7 									; point to height/width byte and read it.
.1b3e	20 d8 1a	jsr $1ad8			jsr 	SpriteSetTarget
.1b41	ad 23 9f	lda $9f23			lda 	$9F23
.1b44	4a		lsr a				lsr 	a 									; A now contains bits 0-1 (width) 2-3 (height)
.1b45	4a		lsr a				lsr 	a
.1b46	4a		lsr a				lsr 	a
.1b47	4a		lsr a				lsr 	a
.1b48	85 2a		sta $2a				sta 	temp0 								; save these bits so we can work out the centre.
.1b4a	a9 02		lda #$02			lda 	#2 									; point to X position.Low
.1b4c	20 d8 1a	jsr $1ad8			jsr 	SpriteSetTarget
.1b4f	20 5e 1b	jsr $1b5e			jsr 	SMWritePosition 					; write X position out.
.1b52	46 2a		lsr $2a				lsr 	temp0 								; shift height bits into 0,1
.1b54	46 2a		lsr $2a				lsr 	temp0
.1b56	e8		inx				inx 										; get the y position
.1b57	20 5e 1b	jsr $1b5e			jsr 	SMWritePosition 					; and write that out.
.1b5a	ca		dex				dex 										; fix X and quit.
.1b5b	68		pla				pla
.1b5c	a8		tay				tay
.1b5d	60		rts				rts
.1b5e					SMWritePosition:
.1b5e	a5 2a		lda $2a				lda 	temp0 								; get dim size
.1b60	29 03		and #$03			and 	#3 									; in range into Y
.1b62	a8		tay				tay
.1b63	38		sec				sec
.1b64	b5 50		lda $50,x			lda 	esInt0,x
.1b66	f9 7a 1b	sbc $1b7a,y			sbc 	SMHalfSize,y
.1b69	8d 23 9f	sta $9f23			sta 	$9F23
.1b6c	ee 20 9f	inc $9f20			inc 	$9F20
.1b6f	b5 58		lda $58,x			lda 	esInt1,x
.1b71	e9 00		sbc #$00			sbc 	#0
.1b73	8d 23 9f	sta $9f23			sta 	$9F23
.1b76	ee 20 9f	inc $9f20			inc 	$9F20
.1b79	60		rts				rts
.1b7a					SMHalfSize:
>1b7a	04 08 10 20					.byte 	4,8,16,32 							; half size each dimension.
.1b7e					SpriteReadCoordinate:
.1b7e	98		tya				tya
.1b7f	48		pha				pha
.1b80	08		php				php 										; save CTR on stack
.1b81	a9 07		lda #$07			lda 	#7 									; point to height/width byte and read it.
.1b83	20 d8 1a	jsr $1ad8			jsr 	SpriteSetTarget
.1b86	ad 23 9f	lda $9f23			lda 	$9F23
.1b89	4a		lsr a				lsr 	a 									; A now contains bits 0-1 (width) 2-3 (height)
.1b8a	4a		lsr a				lsr 	a
.1b8b	4a		lsr a				lsr 	a
.1b8c	4a		lsr a				lsr 	a
.1b8d	28		plp				plp 										; restore CTS
.1b8e	08		php				php
.1b8f	90 02		bcc $1b93			bcc 	_SPRCNotY1 							; if it is Y, e.g. CS, shift twice more.
.1b91	4a		lsr a				lsr 	a
.1b92	4a		lsr a				lsr 	a
.1b93					_SPRCNotY1:
.1b93	29 03		and #$03			and 	#3 									; point into half width/height
.1b95	a8		tay				tay
.1b96	b9 7a 1b	lda $1b7a,y			lda 	SMHalfSize,y 						; get half size -> esInt3,x
.1b99	95 68		sta $68,x			sta 	esInt3,x
.1b9b	28		plp				plp 										; CS Y CC X
.1b9c	a9 00		lda #$00			lda 	#0 									; A = 0 X A = 2 Y
.1b9e	2a		rol a				rol 	a
.1b9f	2a		rol a				rol 	a
.1ba0	69 02		adc #$02			adc 	#2 									; A = 2 X A = 4 Y
.1ba2	20 d8 1a	jsr $1ad8			jsr 	SpriteSetTarget 					; set data pointer offset by that
.1ba5	18		clc				clc 										; read and unfix centre.
.1ba6	ad 23 9f	lda $9f23			lda 	$9F23
.1ba9	75 68		adc $68,x			adc 	esInt3,x
.1bab	95 50		sta $50,x			sta 	esInt0,x
.1bad	ee 20 9f	inc $9f20			inc 	$9F20 								; do MSB
.1bb0	ad 23 9f	lda $9f23			lda 	$9F23
.1bb3	69 00		adc #$00			adc 	#0
.1bb5	29 0f		and #$0f			and 	#$0F 								; sign extend on bit 11.
.1bb7	c9 08		cmp #$08			cmp		#$08
.1bb9	90 02		bcc $1bbd			bcc 	_SPRCNoSX
.1bbb	09 f0		ora #$f0			ora 	#$F0
.1bbd					_SPRCNoSX:
.1bbd	95 58		sta $58,x			sta 	esInt1,x
.1bbf	68		pla				pla
.1bc0	a8		tay				tay
.1bc1	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/sprites/spriteutils.asm

.1bc2					Sprite_GetX:
.1bc2	18		clc				clc
.1bc3	90 01		bcc $1bc6			bcc 	SpriteGetCode
.1bc5					Sprite_GetY:
.1bc5	38		sec				sec
.1bc6					SpriteGetCode:
.1bc6	08		php				php 								; CLC : X SEC: Y, save on stack.
.1bc7	48		pha				pha 								; save stack position
.1bc8	20 e4 1b	jsr $1be4			jsr 	GetSpriteNumber 			; get # of sprite.
.1bcb	a2 04		ldx #$04		ldx	#4
.1bcd	20 07 37	jsr $3707		jsr	mainHandler
.1bd0	68		pla				pla
.1bd1	aa		tax				tax
.1bd2	28		plp				plp 								; which one ?
.1bd3	20 7e 1b	jsr $1b7e			jsr 	SpriteReadCoordinate 		; read appropriate coordinate into esInt0,x
.1bd6	b5 58		lda $58,x			lda 	esInt1,x 					; get sign bit, sign extend 16->32 bits
.1bd8	29 80		and #$80			and 	#$80
.1bda	f0 02		beq $1bde			beq 	_SGXYPos
.1bdc	a9 ff		lda #$ff			lda 	#$FF
.1bde					_SGXYPos:
.1bde	95 60		sta $60,x			sta 	esInt2,x
.1be0	95 68		sta $68,x			sta 	esInt3,x
.1be2	8a		txa				txa 								; return NSP in A
.1be3	60		rts				rts
.1be4					GetSpriteNumber:
.1be4	48		pha				pha
.1be5	a2 0c		ldx #$0c		ldx	#12
.1be7	20 07 37	jsr $3707		jsr	mainHandler
.1bea	68		pla				pla
.1beb	aa		tax				tax
.1bec	b5 50		lda $50,x			lda 	esInt0,x
.1bee	20 1c 1b	jsr $1b1c			jsr 	SelectSpriteA
.1bf1	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/video/mode.asm

.0beb					currentMode:
>0beb							.fill 	4
.1bf2					ForceMode0:
.1bf2	a2 00		ldx #$00			ldx 	#0
.1bf4	86 50		stx $50				stx 	esInt0 						; in case we do it.
.1bf6					_FMCheck:
.1bf6	bd 83 1c	lda $1c83,x			lda 	CMModeList,x 				; do we need to switch ?
.1bf9	dd eb 0b	cmp $0beb,x			cmp 	currentMode,x
.1bfc	d0 13		bne $1c11			bne 	CMSetMode 					; different so switch.
.1bfe	e8		inx				inx
.1bff	e0 04		cpx #$04			cpx 	#4
.1c01	d0 f3		bne $1bf6			bne 	_FMCheck
.1c03	60		rts				rts
.1c04					CommandMode:
.1c04	a9 00		lda #$00			lda 	#0
.1c06	a2 0a		ldx #$0a		ldx	#10
.1c08	20 07 37	jsr $3707		jsr	mainHandler
.1c0b	a5 68		lda $68				lda 	esInt3
.1c0d	29 70		and #$70			and 	#$70
.1c0f	d0 06		bne $1c17			bne 	CMNoExpand
.1c11					CMSetMode:
.1c11	20 62 1c	jsr $1c62			jsr 	CMExpandMode
.1c14	4c 2b 1c	jmp $1c2b			jmp 	CMUpdateMode
.1c17					CMNoExpand:
.1c17	a5 50		lda $50				lda 	esInt0
.1c19	8d eb 0b	sta $0beb			sta 	currentMode
.1c1c	a5 58		lda $58				lda 	esInt1
.1c1e	8d ec 0b	sta $0bec			sta 	currentMode+1
.1c21	a5 60		lda $60				lda 	esInt2
.1c23	8d ed 0b	sta $0bed			sta 	currentMode+2
.1c26	a5 68		lda $68				lda 	esInt3
.1c28	8d ee 0b	sta $0bee			sta 	currentMode+3
.1c2b					CMUpdateMode:
.1c2b	a2 11		ldx #$11			ldx 	#$11
.1c2d					_CMClear:
.1c2d	a9 00		lda #$00			lda 	#0
.1c2f	9d 29 9f	sta $9f29,x			sta 	$9F29,X
.1c32	ca		dex				dex
.1c33	10 f8		bpl $1c2d			bpl 	_CMClear
.1c35	ad ee 0b	lda $0bee			lda 	currentMode+3 				; get current mode
.1c38	48		pha				pha 								; stack twice.
.1c39	48		pha				pha
.1c3a	29 70		and #$70			and 	#$70 						; isolates bits 6,5,4 (sprites,L1 enable,L0 enable)
.1c3c	09 01		ora #$01			ora 	#$01 						; turn the output on.
.1c3e	8d 29 9f	sta $9f29			sta 	$9F29 						; write to DC_VIDEO
.1c41	68		pla				pla 								; get back
.1c42	20 93 1c	jsr $1c93			jsr 	CMToScale 					; convert lower 2 bits to a scale.
.1c45	8d 2a 9f	sta $9f2a			sta 	$9F2A 						; write to H-Scale
.1c48	68		pla				pla 								; get back, convert bits 2,3 to a scale.
.1c49	4a		lsr a				lsr 	a
.1c4a	4a		lsr a				lsr 	a
.1c4b	20 93 1c	jsr $1c93			jsr 	CMToScale 					; convert lower 2 bits to a scale.
.1c4e	8d 2b 9f	sta $9f2b			sta 	$9F2B
.1c51	a2 00		ldx #$00			ldx 	#0 							; this is offset from $9F2D to do L0
.1c53	ad eb 0b	lda $0beb			lda 	currentMode					; get L0 config byte
.1c56	20 9e 1c	jsr $1c9e			jsr 	CMDecodeLayer 				; and decode layer 0
.1c59	a2 07		ldx #$07			ldx 	#7 							; when we do layer 1, offset by 7 hence starts at $9F34
.1c5b	ad ec 0b	lda $0bec			lda 	currentMode+1
.1c5e	20 9e 1c	jsr $1c9e			jsr 	CMDecodeLayer
.1c61	60		rts				rts
.1c62					CMExpandMode:
.1c62	a5 50		lda $50				lda 	esInt0 						; get mode number
.1c64	c9 04		cmp #$04			cmp 	#(CMEndModeList-CMModeList) >> 2
.1c66	b0 16		bcs $1c7e			bcs 	_CMModeError
.1c68	0a		asl a				asl 	a 							; x 4 into X
.1c69	0a		asl a				asl 	a
.1c6a	aa		tax				tax
.1c6b	98		tya				tya
.1c6c	48		pha				pha
.1c6d	a0 00		ldy #$00			ldy 	#0
.1c6f					_CMEMCopy:
.1c6f	bd 83 1c	lda $1c83,x			lda 	CMModeList,x
.1c72	99 eb 0b	sta $0beb,y			sta 	currentMode,y
.1c75	e8		inx				inx
.1c76	c8		iny				iny
.1c77	c0 04		cpy #$04			cpy 	#4
.1c79	d0 f4		bne $1c6f			bne 	_CMEMCopy
.1c7b	68		pla				pla
.1c7c	a8		tay				tay
.1c7d	60		rts				rts
.1c7e					_CMModeError:
.1c7e	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.1c80	20 18 15	jsr $1518		jsr	errorHandler
.1c83					CMModeList:
>1c83	00 60 00 20					.dword	$20006000 					; Mode 0 which is the standard 80x60 mode, no sprites
>1c87	00 60 00 25					.dword 	$25006000					; Mode 1 (40x30)
>1c8b	00 60 00 2a					.dword 	$2A006000 					; Mode 2 (20x15)
>1c8f	07 60 00 15					.dword 	$15006007 					; Mode 3 (320x200 256 colour bitmap)
.1c93					CMEndModeList:
.1c93					CMToScale:
.1c93	29 03		and #$03			and 	#3 							; lower 2 bits only
.1c95	aa		tax				tax 								; put in X for counting
.1c96	a9 00		lda #$00			lda 	#0 							; zero result
.1c98	38		sec				sec 								; first time rotate CS in
.1c99					_CMTSLoop:
.1c99	6a		ror a				ror 	a
.1c9a	ca		dex				dex
.1c9b	10 fc		bpl $1c99			bpl 	_CMTSLoop
.1c9d	60		rts				rts
.1c9e					CMDecodeLayer:
.1c9e	48		pha				pha 								; save it.
.1c9f	29 f7		and #$f7			and 	#$F7 						; all the bits except T256C which you can't set using this
.1ca1	9d 2d 9f	sta $9f2d,x			sta 	$9F2D,X
.1ca4	68		pla				pla 								; get it back
.1ca5	29 08		and #$08			and 	#$08 						; the missing bit sets the tile size.
.1ca7	f0 02		beq $1cab			beq 	_CMDLNotSet
.1ca9	a9 03		lda #$03			lda 	#$03 						; which sets both lower bits, they're square.
.1cab					_CMDLNotSet:
.1cab	e0 00		cpx #$00			cpx 	#0
.1cad	f0 06		beq $1cb5			beq 	_CMDLayer0 					; layer 1 has standard defaults for tile table, e.g. $7C
.1caf	09 7c		ora #$7c			ora 	#$7C 						; so set those bits and write it out.
.1cb1	9d 2f 9f	sta $9f2f,x			sta 	$9F2F,X
.1cb4	60		rts				rts
.1cb5					_CMDLayer0:
.1cb5	09 80		ora #$80			ora 	#$80 						; tile base is $80
.1cb7	9d 2f 9f	sta $9f2f,x			sta 	$9F2F,X
.1cba	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/video/palette.asm

.1cbb					CommandPalette:
.1cbb	a9 00		lda #$00			lda 	#0
.1cbd	a2 0c		ldx #$0c		ldx	#12
.1cbf	20 07 37	jsr $3707		jsr	mainHandler
.1cc2	a2 02		ldx #$02		ldx	#2
.1cc4	20 07 37	jsr $3707		jsr	mainHandler
.1cc7	a9 01		lda #$01			lda 	#1
.1cc9	a2 08		ldx #$08		ldx	#8
.1ccb	20 07 37	jsr $3707		jsr	mainHandler
.1cce	a5 50		lda $50				lda 	esInt0 					; get palette #
.1cd0	20 e0 1c	jsr $1ce0			jsr 	PointToPaletteA			; point to palette register
.1cd3	a5 51		lda $51				lda 	esInt0+1
.1cd5	8d 23 9f	sta $9f23			sta 	$9F23
.1cd8	a5 59		lda $59				lda 	esInt1+1
.1cda	29 0f		and #$0f			and 	#$0F
.1cdc	8d 23 9f	sta $9f23			sta 	$9F23
.1cdf	60		rts				rts
.1ce0					PointToPaletteA:
.1ce0	0a		asl a				asl 	a 							; x 2 -> LSB
.1ce1	8d 20 9f	sta $9f20			sta 	$9F20
.1ce4	a9 00		lda #$00			lda 	#0 							; carry into A
.1ce6	2a		rol a				rol 	a
.1ce7	09 fa		ora #$fa			ora 	#$FA 						; make correct address
.1ce9	8d 21 9f	sta $9f21			sta 	$9F21
.1cec	a9 11		lda #$11			lda 	#$11 						; $01 and single step => $9F22
.1cee	8d 22 9f	sta $9f22			sta 	$9F22
.1cf1	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/video/vload.asm

.1cf2					Command_VLoad:
.1cf2	a9 00		lda #$00			lda 	#0 								; string which is the file name
.1cf4	a2 0e		ldx #$0e		ldx	#14
.1cf6	20 07 37	jsr $3707		jsr	mainHandler
.1cf9	a2 01		ldx #$01			ldx 	#1 								; load address at +1.
.1cfb	a5 35		lda $35				lda 	lowMemory 						; load it into lowMemory (for now ?)
.1cfd	95 50		sta $50,x			sta 	esInt0,x
.1cff	a5 36		lda $36				lda 	lowMemory+1
.1d01	95 58		sta $58,x			sta 	esInt1,x
.1d03	a9 00		lda #$00			lda 	#0
.1d05	95 60		sta $60,x			sta 	esInt2,x
.1d07	95 68		sta $68,x			sta 	esInt3,x
.1d09	a2 0e		ldx #$0e		ldx	#14
.1d0b	20 f6 14	jsr $14f6		jsr	deviceHandler
.1d0e	a5 51		lda $51				lda 	esInt0+1 						; (temp0) is where we are decoding from.
.1d10	85 2a		sta $2a				sta 	temp0
.1d12	a5 59		lda $59				lda 	esInt1+1
.1d14	85 2b		sta $2b				sta 	temp0+1
.1d16	20 92 1d	jsr $1d92			jsr 	LoadVRAMFile 					; load the VRAM file in.
.1d19	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/video/vpeekpoke.asm

.1d1a					Command_VPoke:
.1d1a	38		sec				sec 						; one byte , CS
.1d1b	b0 01		bcs $1d1e			bcs 	CmdVideoWrite
.1d1d					Command_VDoke:
.1d1d	18		clc				clc 						; two bytes, CC
.1d1e					CmdVideoWrite:
.1d1e	08		php				php 						; save one or two btes
.1d1f	a9 00		lda #$00			lda 	#0  				; get address and value into levels 0,1
.1d21	a2 0a		ldx #$0a		ldx	#10
.1d23	20 07 37	jsr $3707		jsr	mainHandler
.1d26	a2 02		ldx #$02		ldx	#2
.1d28	20 07 37	jsr $3707		jsr	mainHandler
.1d2b	a9 01		lda #$01			lda 	#1
.1d2d	a2 0a		ldx #$0a		ldx	#10
.1d2f	20 07 37	jsr $3707		jsr	mainHandler
.1d32	a2 00		ldx #$00			ldx 	#0
.1d34	20 45 1d	jsr $1d45			jsr 	SetUpTOSVRamAddress ; copy target address to VRAM address registers
.1d37	a5 51		lda $51				lda 	esInt0+1 			; get MSB of write value
.1d39	8d 23 9f	sta $9f23			sta 	$9F23
.1d3c	28		plp				plp 						; if it was Poke then exit
.1d3d	b0 05		bcs $1d44			bcs 	_CVWExit
.1d3f	a5 59		lda $59				lda 	esInt1+1 			; doke, write the MSB.
.1d41	8d 23 9f	sta $9f23			sta 	$9F23
.1d44					_CVWExit:
.1d44	60		rts				rts
.1d45					SetUpTOSVRamAddress:
.1d45	b5 60		lda $60,x			lda 	esInt2,x 			; check range of address, data to $FFFF
.1d47	29 fe		and #$fe			and 	#$FE
.1d49	15 68		ora $68,x			ora 	esInt3,x
.1d4b	d0 14		bne $1d61			bne 	CVWValue
.1d4d	b5 50		lda $50,x			lda 	esInt0,x			; set address up
.1d4f	8d 20 9f	sta $9f20			sta 	$9F20
.1d52	b5 58		lda $58,x			lda 	esInt1,x
.1d54	8d 21 9f	sta $9f21			sta	 	$9F21
.1d57	b5 60		lda $60,x			lda 	esInt2,x
.1d59	29 01		and #$01			and 	#1
.1d5b	09 10		ora #$10			ora 	#$10 				; step 1.
.1d5d	8d 22 9f	sta $9f22			sta 	$9F22
.1d60	60		rts				rts
.1d61					CVWValue:
.1d61	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.1d63	20 18 15	jsr $1518		jsr	errorHandler
.1d66					Command_VPeek:
.1d66	38		sec				sec 						; one byte , CS
.1d67	b0 01		bcs $1d6a			bcs 	CmdVideoRead
.1d69					Command_VDeek:
.1d69	18		clc				clc 						; two bytes, CC
.1d6a					CmdVideoRead:
.1d6a	08		php				php 						; save action on stack.
.1d6b	48		pha				pha 						; save stack position
.1d6c	a2 0a		ldx #$0a		ldx	#10
.1d6e	20 07 37	jsr $3707		jsr	mainHandler
.1d71	a2 04		ldx #$04		ldx	#4
.1d73	20 07 37	jsr $3707		jsr	mainHandler
.1d76	68		pla				pla
.1d77	aa		tax				tax
.1d78	20 45 1d	jsr $1d45			jsr 	SetUpTOSVRamAddress	; set up VRAM address.
.1d7b	a9 00		lda #$00			lda 	#0 					; zero upper 3 bytes
.1d7d	95 58		sta $58,x			sta 	esInt1,x
.1d7f	95 60		sta $60,x			sta 	esInt2,x
.1d81	95 68		sta $68,x			sta 	esInt3,x
.1d83	ad 23 9f	lda $9f23			lda 	$9F23				; copy 1st byte
.1d86	95 50		sta $50,x			sta 	esInt0,x
.1d88	28		plp				plp 						; check if DOKE (carry was clear)
.1d89	b0 05		bcs $1d90			bcs 	_CVRExit
.1d8b	ad 23 9f	lda $9f23			lda 	$9F23 				; copy 2nd byte
.1d8e	95 58		sta $58,x			sta 	esInt1,x
.1d90					_CVRExit:
.1d90	8a		txa				txa 						; return X position.
.1d91	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/video/vramprocess.asm

.0bef					compressMode:
>0bef							.fill 	1
.0bf0					imageInfo:
>0bf0							.fill 	X16MaxImages
.0c30					imageAddr2Low:
>0c30							.fill  	X16MaxImages
.0c70					imageAddr2High:
>0c70							.fill  	X16MaxImages
.1d92					LoadVRAMFile:
.1d92	8a		txa				txa
.1d93	48		pha				pha
.1d94	98		tya				tya
.1d95	48		pha				pha
.1d96					_LVRLoop:
.1d96	20 72 1e	jsr $1e72			jsr 	LVFGet 						; get the next (never access direct)
.1d99	c9 80		cmp #$80			cmp 	#$80 						; exit ?
.1d9b	f0 42		beq $1ddf			beq 	_LVRExit
.1d9d	b0 5c		bcs $1dfb			bcs 	_LVRLoad 					; load data in ?
.1d9f	c9 08		cmp #$08			cmp 	#$08 						; is it set address ?
.1da1	90 11		bcc $1db4			bcc 	_LVRSetAddress
.1da3	c9 0f		cmp #$0f			cmp 	#$0F 						; is it define palette
.1da5	f0 3d		beq $1de4			beq 	_LVRSetPalette
.1da7	c9 10		cmp #$10			cmp 	#$10 						; is it set compression type ?
.1da9	90 2d		bcc $1dd8			bcc 	_LVRSetCompress
.1dab	c9 64		cmp #$64			cmp 	#$64 						; is it set sprite type.
.1dad	90 60		bcc $1e0f			bcc 	_LVRSetSprite
.1daf	a2 01		ldx #$01			ldx 	#ErrorID_missing
.1db1	20 18 15	jsr $1518		jsr	errorHandler
.1db4					_LVRSetAddress:
.1db4	85 2d		sta $2d				sta 	temp1+1 					; 24 bit in temp1+1/temp1/A
.1db6	20 72 1e	jsr $1e72			jsr 	LVFGet
.1db9	85 2c		sta $2c				sta 	temp1
.1dbb	a9 00		lda #$00			lda 	#0
.1dbd	46 2d		lsr $2d				lsr 	temp1+1 					; / 2 twice.
.1dbf	66 2c		ror $2c				ror 	temp1
.1dc1	6a		ror a				ror		a
.1dc2	46 2d		lsr $2d				lsr 	temp1+1
.1dc4	66 2c		ror $2c				ror 	temp1
.1dc6	6a		ror a				ror		a
.1dc7	8d 20 9f	sta $9f20			sta 	$9F20 						; set write address with +1 increment
.1dca	a5 2c		lda $2c				lda 	temp1
.1dcc	8d 21 9f	sta $9f21			sta 	$9F21
.1dcf	a5 2d		lda $2d				lda 	temp1+1
.1dd1	09 10		ora #$10			ora 	#$10
.1dd3	8d 22 9f	sta $9f22			sta 	$9F22
.1dd6	d0 be		bne $1d96			bne 	_LVRLoop
.1dd8					_LVRSetCompress:
.1dd8	29 07		and #$07			and 	#7
.1dda	8d ef 0b	sta $0bef			sta 	compressMode
.1ddd	10 b7		bpl $1d96			bpl 	_LVRLoop
.1ddf					_LVRExit:
.1ddf	68		pla				pla
.1de0	a8		tay				tay
.1de1	68		pla				pla
.1de2	aa		tax				tax
.1de3	60		rts				rts
.1de4					_LVRSetPalette:
.1de4	20 72 1e	jsr $1e72			jsr 	LVFGet 						; get palette id.
.1de7	20 e0 1c	jsr $1ce0			jsr 	PointToPaletteA 			; in palette.asm
.1dea	20 72 1e	jsr $1e72			jsr 	LVFGet 						; copy 12 bit palette data in.
.1ded	8d 23 9f	sta $9f23			sta 	$9F23
.1df0	20 72 1e	jsr $1e72			jsr 	LVFGet
.1df3	29 0f		and #$0f			and 	#$0F
.1df5	8d 23 9f	sta $9f23			sta 	$9F23
.1df8	4c 96 1d	jmp $1d96			jmp 	_LVRLoop
.1dfb					_LVRLoad:
.1dfb	ae ef 0b	ldx $0bef			ldx 	compressMode
.1dfe	d0 55		bne $1e55			bne 	_LVRNotMode0
.1e00	29 7f		and #$7f			and 	#$7F 						; count in X (is > 0)
.1e02					_LVRLCopyX:
.1e02	aa		tax				tax
.1e03					_LVRLCopy:
.1e03	20 72 1e	jsr $1e72			jsr 	LVFGet 						; write to data.
.1e06	8d 23 9f	sta $9f23			sta 	$9F23
.1e09	ca		dex				dex
.1e0a	d0 f7		bne $1e03			bne 	_LVRLCopy
.1e0c	4c 96 1d	jmp $1d96			jmp 	_LVRLoop
.1e0f					_LVRSetSprite:
.1e0f	48		pha				pha 								; save on stack
.1e10	20 72 1e	jsr $1e72			jsr 	LVFGet 						; get the sprite number into X
.1e13	aa		tax				tax
.1e14	c9 40		cmp #$40			cmp 	#X16MaxImages				; too high ?
.1e16	b0 38		bcs $1e50			bcs 	_LVRSSValue
.1e18	68		pla				pla 								; restore the data held in the first byte
.1e19	9d f0 0b	sta $0bf0,x			sta 	imageInfo,x 				; and write into the sprite image table.
.1e1c					_LVRAlignVRAM:
.1e1c	ad 20 9f	lda $9f20			lda 	$9F20 						; check VRAM on 32 byte boundary
.1e1f	29 1f		and #$1f			and 	#$1F
.1e21	f0 07		beq $1e2a			beq 	_LVRAligned
.1e23	a9 00		lda #$00			lda 	#$00
.1e25	8d 23 9f	sta $9f23			sta 	$9F23
.1e28	f0 f2		beq $1e1c			beq 	_LVRAlignVRAM
.1e2a					_LVRAligned:
.1e2a	ad 22 9f	lda $9f22			lda 	$9F22 						; put address/32 in sprite image table
.1e2d	4a		lsr a				lsr 	a 	 						; first halve into temp1
.1e2e	ad 21 9f	lda $9f21			lda 	$9F21
.1e31	6a		ror a				ror 	a
.1e32	85 2d		sta $2d				sta 	temp1+1
.1e34	ad 20 9f	lda $9f20			lda 	$9F20
.1e37	6a		ror a				ror 	a
.1e38	85 2c		sta $2c				sta 	temp1
.1e3a	a0 04		ldy #$04			ldy 	#4 							; divide it by 16 in temp1
.1e3c					_LVRShift:
.1e3c	46 2d		lsr $2d				lsr 	temp1+1
.1e3e	66 2c		ror $2c				ror 	temp1
.1e40	88		dey				dey
.1e41	d0 f9		bne $1e3c			bne 	_LVRShift
.1e43	a5 2d		lda $2d				lda 	temp1+1 					; copy result.
.1e45	9d 70 0c	sta $0c70,x			sta 	imageAddr2High,x
.1e48	a5 2c		lda $2c				lda 	temp1
.1e4a	9d 30 0c	sta $0c30,x			sta 	imageAddr2Low,x
.1e4d	4c 96 1d	jmp $1d96			jmp 	_LVRLoop
.1e50					_LVRSSValue:
.1e50	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.1e52	20 18 15	jsr $1518		jsr	errorHandler
.1e55					_LVRNotMode0:
.1e55	e0 01		cpx #$01			cpx 	#1
.1e57	d0 15		bne $1e6e			bne 	_LVRNotMode1
.1e59	29 7f		and #$7f			and 	#$7F 						; drop bit 7
.1e5b	c9 40		cmp #$40			cmp 	#$40
.1e5d	90 a3		bcc $1e02			bcc 	_LVRLCopyX 					; 00-3F use mode 0's copying code.
.1e5f					_LVRRLEGroup:
.1e5f	29 3f		and #$3f			and 	#$3F
.1e61	aa		tax				tax
.1e62	20 72 1e	jsr $1e72			jsr 	LVFGet
.1e65					_LVRLEGroupLoop:
.1e65	8d 23 9f	sta $9f23			sta 	$9F23
.1e68	ca		dex				dex
.1e69	d0 fa		bne $1e65			bne 	_LVRLEGroupLoop
.1e6b	4c 96 1d	jmp $1d96			jmp 	_LVRLoop
.1e6e					_LVRNotMode1:
>1e6e	db						.byte 	$DB
.1e6f	4c 6e 1e	jmp $1e6e			jmp 	_LVRNotMode1
.1e72	84 32		sty $32		LVFGet:	sty 	tempShort
.1e74	a0 00		ldy #$00			ldy 	#0
.1e76	b1 2a		lda ($2a),y			lda 	(temp0),y
.1e78	a4 32		ldy $32				ldy	 	tempShort
.1e7a	e6 2a		inc $2a				inc 	temp0
.1e7c	d0 02		bne $1e80			bne 	_LVFGExit
.1e7e	e6 2b		inc $2b				inc 	temp0+1
.1e80					_LVFGExit:
.1e80	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Return to file: basic.asm

.1e81					section_end_extension:
.1e81					section_start_floatingpoint:

;******  Processing file: floatingpoint/floatingpoint.asm

.1e81					floatingpointHandler:
.1e81	a2 03		ldx #$03			ldx 	#ErrorID_NoModule
.1e83	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: basic.asm

.1e86					section_end_floatingpoint:
.1e86					section_start_interaction:

;******  Processing file: interaction/interaction.asm


;******  Processing file: interaction/cold.asm

.1e86					ColdStartEntry:
.1e86	a2 ff		ldx #$ff			ldx 	#$FF
.1e88	9a		txs				txs
.1e89	20 12 1f	jsr $1f12			jsr 	ForceStandardMode
.1e8c	a2 04		ldx #$04		ldx	#4
.1e8e	20 f6 14	jsr $14f6		jsr	deviceHandler
.1e91	a0 ff		ldy #$ff			ldy 	#255
.1e93					_CSBanner:
.1e93	c8		iny				iny
.1e94	b9 ba 1e	lda $1eba,y			lda 	Intro,y
.1e97	f0 14		beq $1ead			beq 	_CSStart
.1e99	c9 08		cmp #$08			cmp 	#8
.1e9b	90 08		bcc $1ea5			bcc 	_CSInk
.1e9d	a2 16		ldx #$16		ldx	#22
.1e9f	20 f6 14	jsr $14f6		jsr	deviceHandler
.1ea2	4c 93 1e	jmp $1e93			jmp 	_CSBanner
.1ea5					_CSInk:
.1ea5	a2 08		ldx #$08		ldx	#8
.1ea7	20 f6 14	jsr $14f6		jsr	deviceHandler
.1eaa	4c 93 1e	jmp $1e93			jmp 	_CSBanner
.1ead					_CSStart:
.1ead	a2 16		ldx #$16		ldx	#22
.1eaf	20 07 37	jsr $3707		jsr	mainHandler
.1eb2	a2 06		ldx #$06		ldx	#6
.1eb4	20 07 37	jsr $3707		jsr	mainHandler
.1eb7	4c d2 1f	jmp $1fd2			jmp 	WarmStartEntry
>1eba	06 2a 2a 2a 20 36 35 30		Intro:	.text 	6,"*** 6502 Extended BASIC ***",13,13
>1ec2	32 20 45 78 74 65 6e 64 65 64 20 42 41 53 49 43
>1ed2	20 2a 2a 2a 0d 0d
>1ed8	03 57 72 69 74 74 65 6e				.text 	3,"Written by Paul Robson 2021",13,13
>1ee0	20 62 79 20 50 61 75 6c 20 52 6f 62 73 6f 6e 20
>1ef0	32 30 32 31 0d 0d
>1ef6	02 42 61 73 69 63 20				.text 	2,"Basic "
>1efd	30 2e 31 39					.text "0.19"
>1f01	20 28						.text 	" ("
>1f03	32 38 2d 4d 61 72 2d 32				.text "28-Mar-2021"
>1f0b	30 32 31
>1f0e	29 0d 0d 00					.text 	")",13,13,0
.1f12					ForceStandardMode:
.1f12	a9 fe		lda #$fe			lda 	#$FE
.1f14	20 69 18	jsr $1869		jsr	extensionHandler
.1f17	60		rts				rts

;******  Return to file: interaction/interaction.asm


;******  Processing file: interaction/delete.asm

.1f18					DeleteLine:
.1f18	ad c8 0a	lda $0ac8			lda 	basePage 					; copy program base to temp0
.1f1b	85 2a		sta $2a				sta 	temp0
.1f1d	ad c9 0a	lda $0ac9			lda 	basePage+1
.1f20	85 2b		sta $2b				sta 	temp0+1
.1f22	a0 01		ldy #$01	_DLLoop:ldy 	#1 							; see if found line ?
.1f24	a5 50		lda $50				lda 	esInt0 						; e.g. the linenumbers match
.1f26	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.1f28	d0 07		bne $1f31			bne 	_DLNext
.1f2a	c8		iny				iny
.1f2b	a5 58		lda $58				lda 	esInt1
.1f2d	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.1f2f	f0 06		beq $1f37			beq 	_DLFound
.1f31	20 55 1f	jsr $1f55	_DLNext:jsr 	IAdvanceTemp0 				; shift temp0 forward, return Z flag set if end.
.1f34	d0 ec		bne $1f22			bne 	_DLLoop
.1f36	60		rts				rts
.1f37					_DLFound:
.1f37	a0 00		ldy #$00			ldy 	#0 							; this is the line to cut, so this offset is the bytes to remove
.1f39	b1 2a		lda ($2a),y			lda 	(temp0),y
.1f3b	a8		tay				tay 								; so we copy from (temp0),y
.1f3c	a2 00		ldx #$00			ldx 	#0  						; to (temp0,x)
.1f3e					_DLCopyDown:
.1f3e	b1 2a		lda ($2a),y			lda 	(temp0),y 					; copy one byte.
.1f40	81 2a		sta ($2a,x)			sta 	(temp0,x)
.1f42	e6 2a		inc $2a				inc 	temp0 						; advance pointer
.1f44	d0 02		bne $1f48			bne 	_DLNoCarry
.1f46	e6 2b		inc $2b				inc 	temp0+1
.1f48					_DLNoCarry:
.1f48	a5 2a		lda $2a				lda 	temp0 						; until hit low memory
.1f4a	c5 35		cmp $35				cmp 	lowMemory 					; which is comfortably after End Program.
.1f4c	d0 f0		bne $1f3e			bne 	_DLCopyDown
.1f4e	a5 2b		lda $2b				lda 	temp0+1
.1f50	c5 36		cmp $36				cmp 	lowMemory+1
.1f52	d0 ea		bne $1f3e			bne 	_DLCopyDown
.1f54	60		rts				rts
.1f55					IAdvanceTemp0:
.1f55	84 32		sty $32				sty 	tempShort
.1f57	18		clc				clc
.1f58	a0 00		ldy #$00			ldy 	#0 							; get offset
.1f5a	b1 2a		lda ($2a),y			lda 	(temp0),y 					; add to temp0
.1f5c	65 2a		adc $2a				adc 	temp0
.1f5e	85 2a		sta $2a				sta 	temp0
.1f60	90 02		bcc $1f64			bcc 	_IATNoCarry
.1f62	e6 2b		inc $2b				inc 	temp0+1
.1f64					_IATNoCarry:
.1f64	b1 2a		lda ($2a),y			lda 	(temp0),y
.1f66	a4 32		ldy $32				ldy 	tempShort
.1f68	c9 00		cmp #$00			cmp		#0 							; Z set if program end.
.1f6a	60		rts				rts

;******  Return to file: interaction/interaction.asm


;******  Processing file: interaction/insert.asm

.1f6b					InsertLine:
.1f6b	ad c8 0a	lda $0ac8			lda 	basePage 					; copy program base to temp0
.1f6e	85 2a		sta $2a				sta 	temp0
.1f70	ad c9 0a	lda $0ac9			lda 	basePage+1
.1f73	85 2b		sta $2b				sta 	temp0+1
.1f75					_ILLoop:
.1f75	a0 01		ldy #$01			ldy 	#1
.1f77	b1 2a		lda ($2a),y			lda 	(temp0),y
.1f79	c5 50		cmp $50				cmp 	esInt0
.1f7b	c8		iny				iny
.1f7c	b1 2a		lda ($2a),y			lda 	(temp0),y
.1f7e	e5 58		sbc $58				sbc 	esInt1
.1f80	b0 05		bcs $1f87			bcs 	_ILFound 					; we know it cannot be equal, it would have been deleted
.1f82	20 55 1f	jsr $1f55			jsr 	IAdvanceTemp0 				; shift temp0 forward, return Z flag set if end.
.1f85	d0 ee		bne $1f75			bne 	_ILLoop
.1f87					_ILFound:
.1f87	a5 35		lda $35				lda 	lowMemory 					; shift lowMemory up to make space for it.
.1f89	85 2c		sta $2c				sta 	temp1             			; this pointer goes backwards
.1f8b	a5 36		lda $36				lda 	lowMemory+1
.1f8d	85 2d		sta $2d				sta 	temp1+1
.1f8f	ad ed 0d	lda $0ded			lda 	tokenBufferIndex 			; space to make in Y, 0 in X.
.1f92	18		clc				clc 								; add 3 for the line number and offset.
.1f93	69 03		adc #$03			adc 	#3 							; tokenbuffer already has $80
.1f95	a8		tay				tay
.1f96	a2 00		ldx #$00			ldx 	#0
.1f98	a1 2c		lda ($2c,x)	_ILMove:lda 	(temp1,x)					; shift up
.1f9a	91 2c		sta ($2c),y			sta 	(temp1),y
.1f9c	a5 2c		lda $2c				lda 	temp1 						; check reached the insert point ?
.1f9e	c5 2a		cmp $2a				cmp 	temp0
.1fa0	d0 06		bne $1fa8			bne 	_ILMNext
.1fa2	a5 2d		lda $2d				lda 	temp1+1
.1fa4	c5 2b		cmp $2b				cmp 	temp0+1
.1fa6	f0 0b		beq $1fb3			beq 	_ILMCopy
.1fa8					_ILMNext:
.1fa8	a5 2c		lda $2c				lda 	temp1
.1faa	d0 02		bne $1fae			bne 	_ILNoBorrow
.1fac	c6 2d		dec $2d				dec 	temp1+1
.1fae					_ILNoBorrow:
.1fae	c6 2c		dec $2c				dec 	temp1
.1fb0	4c 98 1f	jmp $1f98			jmp 	_ILMove 					; and go round again
.1fb3					_ILMCopy:
.1fb3	98		tya				tya 								; Y is the offset of the new line.
.1fb4	81 2a		sta ($2a,x)			sta 	(temp0,x)					; X = 0 still.
.1fb6	a0 01		ldy #$01			ldy 	#1 							; copy in line number.
.1fb8	a5 50		lda $50				lda 	esInt0
.1fba	91 2a		sta ($2a),y			sta 	(temp0),y
.1fbc	c8		iny				iny
.1fbd	a5 58		lda $58				lda 	esInt1
.1fbf	91 2a		sta ($2a),y			sta 	(temp0),y
.1fc1	a0 00		ldy #$00			ldy 	#0 							; copy the body in
.1fc3					_ILMCopy2:
.1fc3	b1 28		lda ($28),y			lda 	(codePtr),y
.1fc5	c8		iny				iny
.1fc6	c8		iny				iny
.1fc7	c8		iny				iny
.1fc8	91 2a		sta ($2a),y			sta 	(temp0),y
.1fca	88		dey				dey
.1fcb	88		dey				dey
.1fcc	cc ed 0d	cpy $0ded			cpy 	tokenBufferIndex
.1fcf	d0 f2		bne $1fc3			bne 	_ILMCopy2
.1fd1	60		rts				rts

;******  Return to file: interaction/interaction.asm


;******  Processing file: interaction/warm.asm

.1fd2					WarmStartEntry:
.1fd2	a2 ff		ldx #$ff			ldx 	#$FF
.1fd4	9a		txs				txs
.1fd5	20 12 1f	jsr $1f12			jsr 	ForceStandardMode
.1fd8	a9 02		lda #$02			lda 	#2							; green text.
.1fda	a2 08		ldx #$08		ldx	#8
.1fdc	20 f6 14	jsr $14f6		jsr	deviceHandler
.1fdf	a2 0c		ldx #$0c		ldx	#12
.1fe1	20 f6 14	jsr $14f6		jsr	deviceHandler
.1fe4	a5 2a		lda $2a				lda 	temp0	 					; copy temp0 to codePtr
.1fe6	85 28		sta $28				sta 	codePtr
.1fe8	a5 2b		lda $2b				lda 	temp0+1
.1fea	85 29		sta $29				sta 	codePtr+1
.1fec	a2 06		ldx #$06		ldx	#6
.1fee	20 f6 14	jsr $14f6		jsr	deviceHandler
.1ff1	a2 08		ldx #$08		ldx	#8
.1ff3	20 18 42	jsr $4218		jsr	tokeniserHandler
.1ff6	c9 00		cmp #$00			cmp 	#0
.1ff8	f0 25		beq $201f			beq 	WSEError 					; failed (tokenise can fail if it doesn't know a character e.g. |)
.1ffa	a9 ea		lda #$ea			lda 	#(tokenHeader) & $FF
.1ffc	85 28		sta $28				sta 	codePtr
.1ffe	a9 0c		lda #$0c			lda 	#(tokenHeader) >> 8
.2000	85 29		sta $29				sta 	1+(codePtr)
.2002	ad ed 0c	lda $0ced			lda 	tokenBuffer 				; is it a blank line, go get another line.
.2005	c9 80		cmp #$80			cmp 	#$80
.2007	f0 c9		beq $1fd2			beq 	WarmStartEntry
.2009	29 c0		and #$c0			and 	#$C0						; does it start with a number
.200b	c9 40		cmp #$40			cmp 	#$40 						; e.g. is it 01xx xxxx
.200d	f0 15		beq $2024			beq 	HasLineNumber
.200f	a9 00		lda #$00			lda 	#0 							; zero the token header, so it will look like a
.2011	8d ea 0c	sta $0cea			sta 	tokenHeader 				; fake program line.
.2014	8d eb 0c	sta $0ceb			sta 	tokenHeader+1
.2017	8d ec 0c	sta $0cec			sta 	tokenHeader+2
.201a	a2 18		ldx #$18		ldx	#24
.201c	20 07 37	jsr $3707		jsr	mainHandler
.201f					WSEError:
.201f	a2 1e		ldx #$1e			ldx 	#ErrorID_Tokenise
.2021	20 18 15	jsr $1518		jsr	errorHandler
.2024					HasLineNumber:
.2024	a0 03		ldy #$03			ldy 	#3 							; get line number
.2026	a9 00		lda #$00			lda 	#0
.2028	a2 0a		ldx #$0a		ldx	#10
.202a	20 07 37	jsr $3707		jsr	mainHandler
.202d	a5 60		lda $60				lda 	esInt2		 				; check in range (only 2 bytes)
.202f	05 68		ora $68				ora 	esInt3
.2031	d0 ec		bne $201f			bne 	WSEError
.2033	98		tya				tya 								; make codePtr point to code after the line number.
.2034	18		clc				clc 								; by skipping over the tokenised number.
.2035	65 28		adc $28				adc 	codePtr
.2037	85 28		sta $28				sta 	codePtr
.2039	90 02		bcc $203d			bcc		_HLNNoCarry
.203b	e6 29		inc $29				inc 	codePtr+1
.203d					_HLNNoCarry:
.203d	98		tya				tya 								; subtract that offset from the code buffer index
.203e	38		sec				sec
.203f	49 ff		eor #$ff			eor 	#$FF
.2041	6d ed 0d	adc $0ded			adc 	tokenBufferIndex
.2044	18		clc				clc 								; add space allowing for header & $80 trailer
.2045	69 04		adc #$04			adc 	#4
.2047	8d ed 0d	sta $0ded			sta 	tokenBufferIndex 			; this is the number of bytes occupied.
.204a	20 18 1f	jsr $1f18			jsr 	DeleteLine 					; always delete the line, it's deleted and reinserted.
.204d					_HLNNoDelete:
.204d	ad ed 0d	lda $0ded			lda 	tokenBufferIndex 			; if line was empty, then don't insert
.2050	c9 01		cmp #$01			cmp 	#1 							; (the one character is the EOL marker)
.2052	f0 0c		beq $2060			beq 	_HLMEditDone
.2054	a5 36		lda $36				lda 	lowMemory+1 				; is there space, if we allow a little bit of
.2056	18		clc				clc 								; workspace (1k)
.2057	69 04		adc #$04			adc 	#4 							; e.g. 4 x 256
.2059	c5 34		cmp $34				cmp 	highMemory+1
.205b	b0 0b		bcs $2068			bcs 	_HLMMemory 					; nope, won't allowit.
.205d	20 6b 1f	jsr $1f6b			jsr 	InsertLine 					; insert the line in
.2060					_HLMEditDone:
.2060	a2 06		ldx #$06		ldx	#6
.2062	20 07 37	jsr $3707		jsr	mainHandler
.2065	4c d2 1f	jmp $1fd2			jmp 	WarmStartEntry
.2068					_HLMMemory:
.2068	a2 22		ldx #$22			ldx 	#ErrorID_Memory
.206a	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: interaction/interaction.asm

.206d					interactionHandler:
.206d	7c 70 20	jmp ($2070,x)			jmp 	(interactionVectors,x)
.2070					interactionVectors:
>2070	76 20					.word _DummyControlHandler ; index 0
>2072	86 1e					.word ColdStartEntry       ; index 2
>2074	d2 1f					.word WarmStartEntry       ; index 4
.2076					_DummyControlHandler:
.2076	60		rts			rts

;******  Return to file: basic.asm

.2077					section_end_interaction:
.2077					section_start_main:

;******  Processing file: main/main.asm


;******  Processing file: main/commands/compat/readdata.asm

.0cb0					dataPtr:
>0cb0							.fill 	2
.0cb2					dataIndex:
>0cb2							.fill 	1
.2077					CommandRead:
.2077	a2 00		ldx #$00			ldx 	#0 							; get a reference to a variable in stack:0
.2079	20 ba 2f	jsr $2fba			jsr 	EvaluateReference
.207c	20 bd 20	jsr $20bd			jsr 	SwapDPCP 					; use the data pointer.
.207f	b1 28		lda ($28),y			lda 	(codePtr),y 				; see where it is.
.2081	c8		iny				iny
.2082	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; if it is on a comma, it is in data.
.2084	f0 07		beq $208d			beq 	_CRInData
.2086	88		dey				dey
.2087	a9 d9		lda #$d9			lda 	#TKW_DATA 					; scan forward to a DATA statement.
.2089	aa		tax				tax
.208a	20 be 27	jsr $27be			jsr 	ScanForward
.208d					_CRInData:
.208d	a2 01		ldx #$01			ldx 	#1 							; evaluate a value at Stack,1
.208f	20 62 2f	jsr $2f62			jsr 	Evaluate
.2092	ca		dex				dex 								; and write the value.
.2093	20 11 23	jsr $2311			jsr 	WriteValue
.2096	20 bd 20	jsr $20bd			jsr 	SwapDPCP 					; get the code pointer back.
.2099	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows ?
.209b	c8		iny				iny
.209c	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; if comma, another variable
.209e	f0 d7		beq $2077			beq 	CommandRead
.20a0	88		dey				dey
.20a1	60		rts				rts
.20a2					CommandData:
.20a2	a9 80		lda #$80			lda 	#TOK_EOL 					; go forward to end of line or colon.
.20a4	a2 ca		ldx #$ca			ldx 	#TKW_COLON
.20a6	20 be 27	jsr $27be			jsr 	ScanForward
.20a9	88		dey				dey 								; ending on EOL is a scan issue, as it increments
.20aa	60		rts				rts
.20ab					CommandRestore:
.20ab	ad c8 0a	lda $0ac8			lda 	basePage
.20ae	8d b0 0c	sta $0cb0			sta 	dataPtr
.20b1	ad c9 0a	lda $0ac9			lda 	basePage+1
.20b4	8d b1 0c	sta $0cb1			sta 	dataPtr+1
.20b7	a9 03		lda #$03			lda 	#3
.20b9	8d b2 0c	sta $0cb2			sta 	dataIndex
.20bc	60		rts				rts
.20bd					SwapDPCP:
.20bd	8a		txa				txa
.20be	48		pha				pha
.20bf	98		tya				tya 								; swap Y, DataIndex
.20c0	ac b2 0c	ldy $0cb2			ldy 	DataIndex
.20c3	8d b2 0c	sta $0cb2			sta 	DataIndex
.20c6	a5 28		lda $28				lda 	codePtr 					; swap code/dataptr low
.20c8	ae b0 0c	ldx $0cb0			ldx 	dataptr
.20cb	8d b0 0c	sta $0cb0			sta 	dataPtr
.20ce	86 28		stx $28				stx 	codePtr
.20d0	a5 29		lda $29				lda 	codePtr+1 					; swap code/dataptr high.
.20d2	ae b1 0c	ldx $0cb1			ldx 	dataptr+1
.20d5	8d b1 0c	sta $0cb1			sta 	dataPtr+1
.20d8	86 29		stx $29				stx 	codePtr+1
.20da	68		pla				pla
.20db	aa		tax				tax
.20dc	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/compat/transfer.asm

.20dd					CommandGOSUB:
.20dd	20 7f 2f	jsr $2f7f			jsr 	EvaluateRootInteger			; get GOSUB line on stack top.
.20e0	a2 04		ldx #$04			ldx 	#4 							; allocate 4 bytes on stack for GOSUB
.20e2	a9 47		lda #$47			lda 	#markerGOSUB  				; <marker> <return addr/offset>
.20e4	20 b4 36	jsr $36b4			jsr 	RSClaim
.20e7	a9 01		lda #$01			lda 	#1 							; save position at offset 1.
.20e9	20 e0 36	jsr $36e0			jsr 	RSSavePosition
.20ec	a2 00		ldx #$00			ldx 	#0 							; point back at GOSUB line
.20ee	f0 1b		beq $210b			beq 	GotoTOS 					; and do a GOTO there.
.20f0					CommandRETURN:
.20f0	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.20f2	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.20f4	c9 47		cmp #$47			cmp 	#markerGOSUB 						; does it match
.20f6	f0 05		beq $20fd			beq 	_isok
.20f8	a2 0e		ldx #$0e			ldx 	#ErrorID_returnErr
.20fa	20 18 15	jsr $1518		jsr	errorHandler
.20fd					_isok:
.20fd	a9 01		lda #$01			lda 	#1
.20ff	20 f3 36	jsr $36f3			jsr 	RSLoadPosition 				; reload the position from offset 1.
.2102	a9 04		lda #$04			lda 	#4 							; throw 4 bytes from stack.
.2104	20 d6 36	jsr $36d6			jsr 	RSFree
.2107	60		rts				rts
.2108					CommandGOTO:
.2108	20 7f 2f	jsr $2f7f			jsr 	EvaluateRootInteger 		; get GOTO line on stack top.
.210b					GotoTOS:
.210b	20 a2 2a	jsr $2aa2			jsr 	ResetCodeAddress 			; simple search.
.210e					_GotoSearch:
.210e	a0 00		ldy #$00			ldy 	#0 							; get offset
.2110	b1 28		lda ($28),y			lda 	(codePtr),y
.2112	f0 21		beq $2135			beq 	_GotoError 					; not found.
.2114	c8		iny				iny									; check LSB match
.2115	b1 28		lda ($28),y			lda 	(codePtr),y
.2117	d5 50		cmp $50,x			cmp 	esInt0,x
.2119	d0 07		bne $2122			bne 	_GotoNext
.211b	c8		iny				iny
.211c	b1 28		lda ($28),y			lda 	(codePtr),y
.211e	d5 58		cmp $58,x			cmp 	esInt1,x
.2120	f0 10		beq $2132			beq 	_GotoFound
.2122					_GotoNext:
.2122	a0 00		ldy #$00			ldy 	#0 							; go next line
.2124	b1 28		lda ($28),y			lda 	(codePtr),y
.2126	18		clc				clc
.2127	65 28		adc $28				adc 	codePtr
.2129	85 28		sta $28				sta 	codePtr
.212b	90 e1		bcc $210e			bcc 	_GotoSearch
.212d	e6 29		inc $29				inc 	codePtr+1
.212f	4c 0e 21	jmp $210e			jmp 	_GotoSearch
.2132					_GotoFound:
.2132	a0 03		ldy #$03			ldy 	#3 							; continue from that line
.2134	60		rts				rts
.2135					_GotoError:
.2135	a2 0c		ldx #$0c			ldx 	#ErrorID_LineNumber
.2137	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/commands/io/input.asm

=32					MaxInputSize = 32
.0cb3					InputBuffer:
>0cb3							.fill 	MaxInputSize+1
.213a					Command_Input:
.213a	b1 28		lda ($28),y			lda 	(codePtr),y 			; see what's next.
.213c	c8		iny				iny
.213d	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 				; ignore commas.
.213f	f0 f9		beq $213a			beq 	Command_Input
.2141	88		dey				dey 							; undo consume
.2142	c9 ca		cmp #$ca			cmp 	#TKW_COLON
.2144	f0 54		beq $219a			beq 	_CIExit 				; : or EOL, exit
.2146	c9 80		cmp #$80			cmp 	#TOK_EOL
.2148	f0 50		beq $219a			beq 	_CIExit
.214a	c9 40		cmp #$40			cmp 	#$40 					; variable ?
.214c	90 12		bcc $2160			bcc 	_CIVariable
.214e	c9 85		cmp #$85			cmp 	#TOK_STR 				; if not quoted string syntax error.
.2150	d0 43		bne $2195			bne 	_CISyntax
.2152	a2 00		ldx #$00			ldx 	#0
.2154	20 76 2f	jsr $2f76			jsr 	EvaluateString 			; evaluate and print string
.2157	20 73 23	jsr $2373			jsr 	TOSToTemp0
.215a	20 69 22	jsr $2269			jsr 	PrintString
.215d	4c 3a 21	jmp $213a			jmp 	Command_Input
.2160					_CIVariable:
.2160	a2 00		ldx #$00			ldx 	#0 						; evaluate a reference.
.2162	20 ba 2f	jsr $2fba			jsr 	EvaluateReference  		; this is where its going
.2165					_CIRetry:
.2165	a9 3f		lda #$3f			lda 	#"?"					; print prompt
.2167	a2 14		ldx #$14		ldx	#20
.2169	20 f6 14	jsr $14f6		jsr	deviceHandler
.216c	98		tya				tya
.216d	48		pha				pha
.216e	20 ae 21	jsr $21ae			jsr 	InputString 			; input a string (manually)
.2171	a2 01		ldx #$01			ldx 	#1
.2173	20 9b 21	jsr $219b			jsr 	BufferToStackX 			; make stack,x ref input string.
.2176	a5 48		lda $48				lda 	esType 					; if target type numeric
.2178	29 40		and #$40			and 	#$40 					; then convert to number
.217a	d0 11		bne $218d			bne 	_CIWrite
.217c	a2 01		ldx #$01			ldx 	#1
.217e	20 73 23	jsr $2373			jsr 	TOSToTemp0 				; string address in temp0, goes here.
.2181	a9 0a		lda #$0a			lda 	#10
.2183	20 87 34	jsr $3487			jsr 	MInt32FromString 		; convert it back from a string.
.2186	68		pla				pla
.2187	a8		tay				tay
.2188	b0 03		bcs $218d			bcs 	_CIWrite 				; successfully converted.
.218a	18		clc				clc 							; default fail FP conversion
.218b	90 d8		bcc $2165			bcc		_CIRetry				; failed, try again.
.218d					_CIWrite:
.218d	a2 00		ldx #$00			ldx 	#0
.218f	20 11 23	jsr $2311			jsr 	WriteValue
.2192	4c 3a 21	jmp $213a			jmp 	Command_Input
.2195					_CISyntax:
.2195	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.2197	20 18 15	jsr $1518		jsr	errorHandler
.219a					_CIExit:
.219a	60		rts				rts
.219b					BufferToStackX:
.219b	a9 b3		lda #$b3			lda 	#InputBuffer & $FF
.219d	95 50		sta $50,x			sta 	esInt0,x
.219f	a9 0c		lda #$0c			lda 	#InputBuffer >> 8
.21a1	95 58		sta $58,x			sta 	esInt1,x
.21a3	a9 00		lda #$00			lda 	#0
.21a5	95 60		sta $60,x			sta 	esInt2,x
.21a7	95 68		sta $68,x			sta 	esInt3,x
.21a9	a9 40		lda #$40			lda 	#$40
.21ab	95 48		sta $48,x			sta 	esType,x
.21ad	60		rts				rts
.21ae					InputString:
.21ae	a9 00		lda #$00			lda 	#0
.21b0	8d b3 0c	sta $0cb3			sta 	InputBuffer
.21b3					_InputLoop:
.21b3	a2 02		ldx #$02		ldx	#2
.21b5	20 f6 14	jsr $14f6		jsr	deviceHandler
.21b8	a2 0a		ldx #$0a		ldx	#10
.21ba	20 f6 14	jsr $14f6		jsr	deviceHandler
.21bd	c9 00		cmp #$00			cmp 	#0
.21bf	f0 f2		beq $21b3			beq 	_InputLoop
.21c1	c9 08		cmp #$08			cmp 	#8
.21c3	f0 19		beq $21de			beq 	_InputBackspace
.21c5	c9 0d		cmp #$0d			cmp 	#13
.21c7	f0 21		beq $21ea			beq 	_InputExit
.21c9	ae b3 0c	ldx $0cb3			ldx 	InputBuffer
.21cc	e0 20		cpx #$20			cpx 	#MaxInputSize 			; too many characters
.21ce	f0 e3		beq $21b3			beq 	_InputLoop
.21d0	9d b4 0c	sta $0cb4,x			sta 	InputBuffer+1,x 		; write char
.21d3	ee b3 0c	inc $0cb3			inc 	InputBuffer 			; advance count.
.21d6					_InputPrintLoop:
.21d6	a2 14		ldx #$14		ldx	#20
.21d8	20 f6 14	jsr $14f6		jsr	deviceHandler
.21db	4c b3 21	jmp $21b3			jmp	 	_InputLoop
.21de					_InputBackspace:
.21de	ad b3 0c	lda $0cb3			lda 	InputBuffer 			; at start
.21e1	f0 d0		beq $21b3			beq 	_InputLoop
.21e3	ce b3 0c	dec $0cb3			dec 	InputBuffer
.21e6	a9 08		lda #$08			lda 	#8
.21e8	d0 ec		bne $21d6			bne 	_InputPrintLoop
.21ea					_InputExit:
.21ea	a2 06		ldx #$06		ldx	#6
.21ec	20 f6 14	jsr $14f6		jsr	deviceHandler
.21ef	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/io/print.asm

.0cd4					lastPrintToken:
>0cd4							.fill 	1
.21f0					Command_Print:
.21f0	a9 00		lda #$00			lda 	#0 							; clear LPT to a non token
.21f2	8d d4 0c	sta $0cd4			sta 	lastPrintToken
.21f5	88		dey				dey
.21f6					_PrintLoopSkip:
.21f6	c8		iny				iny
.21f7					_PrintLoop:
.21f7	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows
.21f9	c9 80		cmp #$80			cmp 	#TOK_EOL  					; done if end of line or colon
.21fb	f0 5b		beq $2258			beq 	_PrintExit
.21fd	c9 ca		cmp #$ca			cmp 	#TKW_COLON
.21ff	f0 57		beq $2258			beq 	_PrintExit
.2201	8d d4 0c	sta $0cd4			sta 	lastPrintToken 				; update Last print token, so we check ; and ,
.2204	c9 cc		cmp #$cc			cmp 	#TKW_SEMICOLON 				; ignore semicolon
.2206	f0 ee		beq $21f6			beq 	_PrintLoopSkip
.2208	c9 cd		cmp #$cd			cmp 	#TKW_QUOTE 					; ' is new line
.220a	f0 3c		beq $2248			beq	 	_PrintNewLine
.220c	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; , is print tab
.220e	f0 40		beq $2250			beq 	_PrintTab
.2210	20 60 2f	jsr $2f60			jsr 	EvaluateRoot 				; evaluate something at the root
.2213	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.2215	85 2a		sta $2a				sta 	temp0
.2217	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.2219	85 2b		sta $2b				sta 	1+(temp0)
.221b	a5 48		lda $48				lda 	esType 						; get type
.221d	f0 15		beq $2234			beq		_PrintInteger
.221f	4a		lsr a				lsr 	a 							; check for floating point
.2220	b0 08		bcs $222a			bcs 	_PrintFloat
.2222					_PrintString:
.2222	a2 00		ldx #$00			ldx 	#0 							; bottom string to temp0
.2224	20 73 23	jsr $2373			jsr 	TOSToTemp0
.2227	4c 42 22	jmp $2242			jmp 	_PrintTemp0 				; print no leading space.
.222a					_PrintFloat:
.222a	a9 00		lda #$00			lda 	#0 							; stack level.
.222c	a2 16		ldx #$16		ldx	#22
.222e	20 81 1e	jsr $1e81		jsr	floatingpointHandler
.2231	4c 3b 22	jmp $223b			jmp 	_PrintSpaceTemp0
.2234					_PrintInteger:
.2234	a9 8a		lda #$8a			lda 	#10+$80 					; base 10 signed
.2236	a2 00		ldx #$00			ldx 	#0 							; bottom stack element
.2238	20 6f 35	jsr $356f			jsr 	MInt32ToString				; convert to text
.223b					_PrintSpaceTemp0:
.223b	a9 20		lda #$20			lda 	#32
.223d	a2 14		ldx #$14		ldx	#20
.223f	20 f6 14	jsr $14f6		jsr	deviceHandler
.2242					_PrintTemp0:
.2242	20 69 22	jsr $2269			jsr 	PrintString
.2245	4c f7 21	jmp $21f7			jmp 	_PrintLoop
.2248					_PrintNewLine:
.2248	a2 06		ldx #$06		ldx	#6
.224a	20 f6 14	jsr $14f6		jsr	deviceHandler
.224d	4c f6 21	jmp $21f6			jmp 	_PrintLoopSkip
.2250					_PrintTab:
.2250	a2 1a		ldx #$1a		ldx	#26
.2252	20 f6 14	jsr $14f6		jsr	deviceHandler
.2255	4c f6 21	jmp $21f6			jmp 	_PrintLoopSkip
.2258					_PrintExit:
.2258	ad d4 0c	lda $0cd4			lda		lastPrintToken 				; check last token
.225b	c9 cc		cmp #$cc			cmp 	#TKW_SEMICOLON 				; if , or ; do not print NL
.225d	f0 09		beq $2268			beq 	_PrintExit2
.225f	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.2261	f0 05		beq $2268			beq 	_PrintExit2
.2263	a2 06		ldx #$06		ldx	#6
.2265	20 f6 14	jsr $14f6		jsr	deviceHandler
.2268					_PrintExit2:
.2268	60		rts				rts
.2269					PrintString:
.2269	8a		txa				txa
.226a	48		pha				pha
.226b	98		tya				tya
.226c	48		pha				pha
.226d	a0 00		ldy #$00			ldy 	#0							; get length
.226f	b1 2a		lda ($2a),y			lda 	(temp0),y
.2271	aa		tax				tax 								; into X
.2272	e0 00		cpx #$00	_PSLoop:cpx 	#0 							; finished ?
.2274	f0 10		beq $2286			beq 	_PSExit
.2276	ca		dex				dex
.2277	8a		txa				txa
.2278	48		pha				pha
.2279	c8		iny				iny
.227a	b1 2a		lda ($2a),y			lda 	(temp0),y
.227c	a2 14		ldx #$14		ldx	#20
.227e	20 f6 14	jsr $14f6		jsr	deviceHandler
.2281	68		pla				pla
.2282	aa		tax				tax
.2283	4c 72 22	jmp $2272			jmp 	_PSLoop
.2286					_PSExit:
.2286	68		pla				pla
.2287	a8		tay				tay
.2288	68		pla				pla
.2289	aa		tax				tax
.228a	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/io/text.asm

.228b					Command_CLS:
.228b	a2 04		ldx #$04		ldx	#4
.228d	20 f6 14	jsr $14f6		jsr	deviceHandler
.2290	60		rts				rts
.2291					Command_Ink:
.2291	a2 00		ldx #$00			ldx 	#0
.2293	20 89 2f	jsr $2f89			jsr 	EvaluateSmallInteger
.2296	a2 08		ldx #$08		ldx	#8
.2298	20 f6 14	jsr $14f6		jsr	deviceHandler
.229b	60		rts				rts
.229c					Command_Paper:
.229c	a2 00		ldx #$00			ldx 	#0
.229e	20 89 2f	jsr $2f89			jsr 	EvaluateSmallInteger
.22a1	a2 12		ldx #$12		ldx	#18
.22a3	20 f6 14	jsr $14f6		jsr	deviceHandler
.22a6	60		rts				rts
.22a7					Command_Locate:
.22a7	a2 00		ldx #$00			ldx 	#0
.22a9	20 89 2f	jsr $2f89			jsr 	EvaluateSmallInteger
.22ac	20 99 36	jsr $3699			jsr 	CheckComma
.22af	e8		inx				inx
.22b0	20 89 2f	jsr $2f89			jsr 	EvaluateSmallInteger
.22b3	98		tya				tya
.22b4	48		pha				pha
.22b5	a4 51		ldy $51				ldy 	esInt0+1
.22b7	a5 50		lda $50				lda 	esInt0
.22b9	a2 10		ldx #$10		ldx	#16
.22bb	20 f6 14	jsr $14f6		jsr	deviceHandler
.22be	68		pla				pla
.22bf	a8		tay				tay
.22c0	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/io/vdu.asm

.22c1					Command_VDU:
.22c1	20 7f 2f	jsr $2f7f			jsr 	EvaluateRootInteger 			; get integer at root.
.22c4	a5 50		lda $50				lda 	esInt0
.22c6	a2 14		ldx #$14		ldx	#20
.22c8	20 f6 14	jsr $14f6		jsr	deviceHandler
.22cb					_CVNext:
.22cb	b1 28		lda ($28),y			lda 	(codePtr),y 					; what follows ?
.22cd	c8		iny				iny
.22ce	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 						; comma, do again
.22d0	f0 ef		beq $22c1			beq 	Command_VDU
.22d2	c9 cc		cmp #$cc			cmp 	#TKW_SEMICOLON 					; semicolon, print MSB
.22d4	d0 0a		bne $22e0			bne 	_CVExit
.22d6	a5 58		lda $58				lda 	esInt1
.22d8	a2 14		ldx #$14		ldx	#20
.22da	20 f6 14	jsr $14f6		jsr	deviceHandler
.22dd	4c cb 22	jmp $22cb			jmp 	_CVNext
.22e0	88		dey		_CVExit:dey
.22e1	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/link.asm


;******  Return to file: main/main.asm


;******  Processing file: main/commands/misc/assert.asm

.22e2					Command_Assert:
.22e2	20 7f 2f	jsr $2f7f			jsr 	EvaluateRootInteger 		; what is being asserted.
.22e5	20 40 36	jsr $3640			jsr 	MInt32Zero 					; is it true ?
.22e8	f0 01		beq $22eb			beq 	_CAError
.22ea	60		rts				rts
.22eb					_CAError:
.22eb	a2 04		ldx #$04			ldx 	#ErrorID_Assert
.22ed	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/commands/misc/dim.asm

.22f0					Command_Dim:
.22f0	a2 04		ldx #$04		ldx	#4
.22f2	20 e9 45	jsr $45e9		jsr	variableHandler
.22f5	b1 28		lda ($28),y			lda 	(codePtr),y 				; see what follows.
.22f7	c8		iny				iny
.22f8	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; comma follows, go back and do next
.22fa	f0 f4		beq $22f0			beq 	Command_Dim
.22fc	88		dey				dey 								; unpick get
.22fd	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/misc/let.asm

.22fe					CommandLet:
.22fe	a2 00		ldx #$00			ldx 	#0  						; get address to write.
.2300	20 ba 2f	jsr $2fba			jsr 	EvaluateReference
.2303	a9 8d		lda #$8d			lda 	#TKW_EQUAL 					; check for equals
.2305	20 81 36	jsr $3681			jsr 	CheckToken
.2308	e8		inx				inx 								; do RHS
.2309	20 62 2f	jsr $2f62			jsr 	Evaluate 					; evaluate and dereference
.230c	ca		dex				dex
.230d	20 11 23	jsr $2311			jsr 	WriteValue 					; write it out
.2310	60		rts				rts
.2311					WriteValue:
.2311	98		tya				tya
.2312	48		pha				pha
.2313	20 73 23	jsr $2373			jsr 	TOSToTemp0 					; set temp0 to point to target address.
.2316	b5 48		lda $48,x			lda 	esType,x 					; check the string flags match
.2318	55 49		eor $49,x			eor 	esType+1,x 					; one string, one number causes an error.
.231a	29 40		and #$40			and 	#$40
.231c	d0 50		bne $236e			bne		_WVType
.231e	a0 01		ldy #$01			ldy 	#1 							; for string, copy 0 and 1.
.2320	b5 48		lda $48,x			lda 	esType,x 					; check for string assignment
.2322	29 40		and #$40			and 	#$40
.2324	d0 1f		bne $2345			bne 	_WVCopyString
.2326	b5 48		lda $48,x			lda 	esType,x 					; check both are integer.
.2328	15 49		ora $49,x			ora 	esType+1,x
.232a	4a		lsr a				lsr 	a
.232b	90 22		bcc $234f			bcc 	_WVCopyData4 				; copy 4 data bytes.
.232d	b5 48		lda $48,x			lda 	esType,x
.232f	4a		lsr a				lsr 	a
.2330	90 3c		bcc $236e			bcc 	_WVType
.2332	e8		inx				inx 								; force the value being written to be a float.
.2333	20 c4 2b	jsr $2bc4			jsr 	BPMakeFloat
.2336	ca		dex				dex
.2337	20 73 23	jsr $2373			jsr 	TOSToTemp0 					; set Temp0 to write address
.233a	e8		inx				inx
.233b	8a		txa				txa
.233c	a2 22		ldx #$22		ldx	#34
.233e	20 81 1e	jsr $1e81		jsr	floatingpointHandler
.2341	aa		tax				tax
.2342	4c 6b 23	jmp $236b			jmp 	_WVCopyExit
.2345					_WVCopyString:
.2345	8a		txa				txa
.2346	a2 10		ldx #$10		ldx	#16
.2348	20 c4 39	jsr $39c4		jsr	stringHandler
.234b	aa		tax				tax
.234c	4c 6b 23	jmp $236b			jmp 	_WVCopyExit
.234f					_WVCopyData4:
.234f	b5 48		lda $48,x			lda 	esType,x 					; is the int ref a byte ref ?
.2351	29 20		and #$20			and 	#$20 						; (e.g. is bit 5 set)
.2353	d0 10		bne $2365			bne 	_WVCopyData1
.2355	a0 03		ldy #$03			ldy 	#3
.2357	b5 69		lda $69,x			lda 	esInt3+1,x
.2359	91 2a		sta ($2a),y			sta 	(temp0),y
.235b	88		dey				dey
.235c	b5 61		lda $61,x			lda 	esInt2+1,x
.235e	91 2a		sta ($2a),y			sta 	(temp0),y
.2360	88		dey				dey
.2361	b5 59		lda $59,x			lda 	esInt1+1,x
.2363	91 2a		sta ($2a),y			sta 	(temp0),y
.2365					_WVCopyData1:
.2365	a0 00		ldy #$00			ldy 	#0
.2367	b5 51		lda $51,x			lda 	esInt0+1,x
.2369	91 2a		sta ($2a),y			sta 	(temp0),y
.236b					_WVCopyExit:
.236b	68		pla				pla
.236c	a8		tay				tay
.236d	60		rts				rts
.236e					_WVType:
.236e	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.2370	20 18 15	jsr $1518		jsr	errorHandler
.2373					TOSToTemp0:
.2373	b5 50		lda $50,x			lda 	esInt0,x
.2375	85 2a		sta $2a				sta 	temp0
.2377	b5 58		lda $58,x			lda 	esInt1,x
.2379	85 2b		sta $2b				sta 	temp0+1
.237b	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/misc/poke.asm

.237c					Command_Poke:
.237c	a9 01		lda #$01			lda 	#1
.237e	d0 06		bne $2386			bne 	PokeGeneral
.2380					Command_Doke:
.2380	a9 02		lda #$02			lda 	#2
.2382	d0 02		bne $2386			bne 	PokeGeneral
.2384					Command_Loke:
.2384	a9 03		lda #$03			lda 	#3
.2386					PokeGeneral:
.2386	48		pha				pha 								; save id (PDL = 123)
.2387	20 7f 2f	jsr $2f7f			jsr 	EvaluateRootInteger 		; target address
.238a	20 99 36	jsr $3699			jsr	 	CheckComma
.238d	e8		inx				inx
.238e	20 81 2f	jsr $2f81			jsr 	EvaluateInteger 			; what value to POKE ?
.2391	ca		dex				dex
.2392	20 73 23	jsr $2373			jsr 	TOSToTemp0 					; temp0 points to the target address
.2395	84 32		sty $32				sty 	tempShort 					; save Y
.2397	68		pla				pla 								; get copy type (1-3) and dispatch
.2398	aa		tax				tax
.2399	ca		dex				dex
.239a	f0 14		beq $23b0			beq 	_Poke1
.239c	ca		dex				dex
.239d	f0 0b		beq $23aa			beq 	_Poke2
.239f	a0 03		ldy #$03			ldy 	#3							; put 4 bytes
.23a1	a5 69		lda $69				lda 	esInt3+1
.23a3	91 2a		sta ($2a),y			sta 	(temp0),y
.23a5	88		dey				dey
.23a6	a5 61		lda $61				lda 	esInt2+1
.23a8	91 2a		sta ($2a),y			sta 	(temp0),y
.23aa					_Poke2:
.23aa	a0 01		ldy #$01			ldy 	#1
.23ac	a5 59		lda $59				lda 	esInt1+1
.23ae	91 2a		sta ($2a),y			sta 	(temp0),y
.23b0					_Poke1:
.23b0	a0 00		ldy #$00			ldy 	#0
.23b2	a5 51		lda $51				lda 	esInt0+1
.23b4	91 2a		sta ($2a),y			sta 	(temp0),y
.23b6	a4 32		ldy $32				ldy 	tempShort 					; restore Y and exit
.23b8	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/misc/rem.asm

.23b9					Command_Rem:
.23b9					Command_Rem2:
.23b9	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows
.23bb	c9 85		cmp #$85			cmp 	#TOK_STR 					; if it is a string then skip it.
.23bd	d0 06		bne $23c5			bne 	_CRNotString
.23bf	c8		iny				iny
.23c0	98		tya				tya
.23c1	38		sec				sec
.23c2	71 28		adc ($28),y			adc 	(codePtr),y 				; get string size, add to Y, +1 for the length
.23c4	a8		tay				tay
.23c5					_CRNotString:
.23c5	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/misc/stopend.asm

.23c6					CommandStop:
.23c6	a2 06		ldx #$06			ldx 	#ErrorID_Stop
.23c8	20 18 15	jsr $1518		jsr	errorHandler
.23cb					CommandEnd:
.23cb	4c 02 37	jmp $3702			jmp 	WarmStart
.23ce					CommandXemu:
.23ce	4c ff ff	jmp $ffff			jmp 	$FFFF 						; fudge to crash out of emulator
.23d1					AdvanceNextLine:
.23d1	a0 00		ldy #$00			ldy 	#0 							; get offset
.23d3	b1 28		lda ($28),y			lda 	(codePtr),y
.23d5	18		clc				clc 								; add to codePtr
.23d6	65 28		adc $28				adc 	codePtr
.23d8	85 28		sta $28				sta 	codePtr
.23da	90 02		bcc $23de			bcc 	_ANLNoCarry
.23dc	e6 29		inc $29				inc 	codePtr+1
.23de					_ANLNoCarry:
.23de	b1 28		lda ($28),y			lda 	(codePtr),y 				; if end of program (or was just stand alone.
.23e0	f0 e9		beq $23cb			beq 	CommandEnd 					; execute END
.23e2	a0 03		ldy #$03			ldy 	#3 							; start of tokens on line.
.23e4	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/for.asm

.23e5					Command_FOR:
.23e5	a9 46		lda #$46			lda 	#markerFOR 					; allocate the space and set the marker
.23e7	a2 0b		ldx #$0b			ldx 	#11
.23e9	20 b4 36	jsr $36b4			jsr 	RSClaim
.23ec	20 fe 22	jsr $22fe			jsr 	CommandLET 					; do the same as LET FOR [a = 4]
.23ef	a5 48		lda $48				lda 	esType 						; check type should be integer reference.
.23f1	c9 80		cmp #$80			cmp 	#$80 						; we do not do FOR floats.
.23f3	d0 4c		bne $2441			bne 	_CFType
.23f5	a9 ce		lda #$ce			lda 	#TKW_TO 					; check TO present.
.23f7	20 81 36	jsr $3681			jsr 	CheckToken
.23fa	a2 01		ldx #$01			ldx 	#1 							; keep the variable address in stack 0
.23fc	20 81 2f	jsr $2f81			jsr 	EvaluateInteger				; get terminal value in stack 1
.23ff	98		tya				tya
.2400	48		pha				pha
.2401	a0 04		ldy #$04			ldy 	#4
.2403	a5 50		lda $50				lda		esInt0 						; copy the address of the index variable into 4 and 5
.2405	91 37		sta ($37),y			sta 	(rsPointer),y
.2407	c8		iny				iny
.2408	a5 58		lda $58				lda		esInt1
.240a	91 37		sta ($37),y			sta 	(rsPointer),y
.240c	c8		iny				iny
.240d	a9 01		lda #$01			lda 	#1  						; the default step in 6, (-128 .. 127 only)
.240f	91 37		sta ($37),y			sta 	(rsPointer),y
.2411	c8		iny				iny
.2412	a5 51		lda $51				lda		esInt0+1 					; terminal value in 7 to 11.
.2414	91 37		sta ($37),y			sta 	(rsPointer),y
.2416	c8		iny				iny
.2417	a5 59		lda $59				lda		esInt1+1
.2419	91 37		sta ($37),y			sta 	(rsPointer),y
.241b	c8		iny				iny
.241c	a5 61		lda $61				lda		esInt2+1
.241e	91 37		sta ($37),y			sta 	(rsPointer),y
.2420	c8		iny				iny
.2421	a5 69		lda $69				lda		esInt3+1
.2423	91 37		sta ($37),y			sta 	(rsPointer),y
.2425	68		pla				pla
.2426	a8		tay				tay
.2427	b1 28		lda ($28),y			lda 	(codePtr),y 				; followed by STEP.
.2429	c9 cf		cmp #$cf			cmp 	#TKW_STEP
.242b	d0 0e		bne $243b			bne 	_CFDone
.242d	c8		iny				iny									; skip over step.
.242e	20 81 2f	jsr $2f81			jsr 	EvaluateInteger 			; get step
.2431	98		tya				tya
.2432	48		pha				pha
.2433	b5 50		lda $50,x			lda 	esInt0,x 					; copy it into step (bit lazy here)
.2435	a0 06		ldy #$06			ldy 	#6
.2437	91 37		sta ($37),y			sta 	(rsPointer),y
.2439	68		pla				pla
.243a	a8		tay				tay
.243b					_CFDone:
.243b	a9 01		lda #$01			lda 	#1
.243d	20 e0 36	jsr $36e0			jsr 	RSSavePosition 				; save position.
.2440	60		rts				rts
.2441					_CFType:
.2441	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.2443	20 18 15	jsr $1518		jsr	errorHandler
.2446					Command_NEXT:
.2446	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.2448	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.244a	c9 46		cmp #$46			cmp 	#markerFOR 						; does it match
.244c	f0 05		beq $2453			beq 	_isok
.244e	a2 10		ldx #$10			ldx 	#ErrorID_nextErr
.2450	20 18 15	jsr $1518		jsr	errorHandler
.2453					_isok:
.2453	b1 28		lda ($28),y			lda 	(codePtr),y 				; is it NEXT <index>
.2455	c9 40		cmp #$40			cmp 	#$40 						; e.g. a variable follows 00-3F
.2457	b0 18		bcs $2471			bcs 	_CNNoIndex
.2459	a2 00		ldx #$00			ldx 	#0 							; start on stack
.245b	20 ba 2f	jsr $2fba			jsr 	EvaluateReference 			; this is the variable/parameter to localise.
.245e	98		tya				tya
.245f	48		pha				pha
.2460	a0 04		ldy #$04			ldy 	#4 							; check same variable as that stored at +4,+5
.2462	b1 37		lda ($37),y			lda 	(rsPointer),y
.2464	d5 50		cmp $50,x			cmp 	esInt0,x
.2466	d0 76		bne $24de			bne 	_CNBadIndex
.2468	c8		iny				iny
.2469	b1 37		lda ($37),y			lda 	(rsPointer),y
.246b	d5 58		cmp $58,x			cmp 	esInt1,x
.246d	d0 6f		bne $24de			bne 	_CNBadIndex
.246f	68		pla				pla
.2470	a8		tay				tay
.2471					_CNNoIndex:
.2471	98		tya				tya
.2472	48		pha				pha
.2473	a0 04		ldy #$04			ldy 	#4 							; make temp0 point to the index
.2475	b1 37		lda ($37),y			lda 	(rsPointer),y
.2477	85 2a		sta $2a				sta 	temp0
.2479	c8		iny				iny
.247a	b1 37		lda ($37),y			lda 	(rsPointer),y
.247c	85 2b		sta $2b				sta 	temp0+1
.247e	c8		iny				iny
.247f	a2 00		ldx #$00			ldx 	#0 							; X is the sign extend part of the step.
.2481	b1 37		lda ($37),y			lda 	(rsPointer),y 				; get the step.
.2483	85 2f		sta $2f				sta 	temp2+1 					; save for later.
.2485	10 01		bpl $2488			bpl 	_CNSignX
.2487	ca		dex				dex  								; X = $FF
.2488					_CNSignX:
.2488	18		clc				clc 								; add to the LSB
.2489	a0 00		ldy #$00			ldy 	#0
.248b	71 2a		adc ($2a),y			adc 	(temp0),y
.248d	91 2a		sta ($2a),y			sta 	(temp0),y
.248f					_CNPropogate:
.248f	c8		iny				iny  								; add the sign extended in X to the rest.
.2490	8a		txa				txa
.2491	71 2a		adc ($2a),y			adc 	(temp0),y
.2493	91 2a		sta ($2a),y			sta 	(temp0),y
.2495	c8		iny				iny
.2496	8a		txa				txa
.2497	71 2a		adc ($2a),y			adc 	(temp0),y
.2499	91 2a		sta ($2a),y			sta 	(temp0),y
.249b	c8		iny				iny
.249c	8a		txa				txa
.249d	71 2a		adc ($2a),y			adc 	(temp0),y
.249f	91 2a		sta ($2a),y			sta 	(temp0),y
.24a1	18		clc				clc 								; point temp1 to the terminal value stored in the stack.
.24a2	a5 37		lda $37				lda 	rsPointer
.24a4	69 07		adc #$07			adc 	#7
.24a6	85 2c		sta $2c				sta 	temp1
.24a8	a9 00		lda #$00			lda 	#0
.24aa	85 2e		sta $2e				sta 	temp2 						; clear temp2, which is the OR of all the subtractions.
.24ac	a8		tay				tay 								; and clear the Y register again.
.24ad	65 38		adc $38				adc 	rsPointer+1
.24af	85 2d		sta $2d				sta 	temp1+1
.24b1	38		sec				sec 								; calculate current - limit oring interim values.
.24b2	20 ea 24	jsr $24ea			jsr 	_CNCompare 					; each of these does a byte.
.24b5	20 ea 24	jsr $24ea			jsr 	_CNCompare 					; we calculate the OR of all these subtractions.
.24b8	20 ea 24	jsr $24ea			jsr 	_CNCompare 					; and the carry of the subtraction.
.24bb	20 ea 24	jsr $24ea			jsr 	_CNCompare
.24be	50 02		bvc $24c2			bvc 	_CNNoOverflow 				; converts to a signed comparison on the sign bit.
.24c0	49 80		eor #$80			eor 	#$80
.24c2					_CNNoOverflow:
.24c2	a4 2f		ldy $2f				ldy 	temp2+1						; get step back
.24c4	30 1d		bmi $24e3			bmi 	_CNCheckDownto
.24c6	c9 00		cmp #$00			cmp 	#0
.24c8	30 0c		bmi $24d6			bmi 	_CNLoopRound 				; loop round if < =
.24ca	a5 2e		lda $2e				lda 	temp2
.24cc	f0 08		beq $24d6			beq 	_CNLoopRound
.24ce					_CNLoopExit:
.24ce	68		pla				pla
.24cf	a8		tay				tay
.24d0	a9 0b		lda #$0b			lda 	#11
.24d2	20 d6 36	jsr $36d6			jsr 	RSFree
.24d5	60		rts				rts
.24d6					_CNLoopRound:
.24d6	68		pla				pla
.24d7	a8		tay				tay
.24d8	a9 01		lda #$01			lda 	#1
.24da	20 f3 36	jsr $36f3			jsr 	RSLoadPosition				; go back to the loop top
.24dd	60		rts				rts
.24de					_CNBadIndex:
.24de	a2 13		ldx #$13			ldx 	#ErrorID_BadIndex
.24e0	20 18 15	jsr $1518		jsr	errorHandler
.24e3					_CNCheckDownto:
.24e3	c9 00		cmp #$00			cmp 	#0
.24e5	10 ef		bpl $24d6			bpl 	_CNLoopRound
.24e7	4c ce 24	jmp $24ce			jmp 	_CNLoopExit
.24ea					_CNCompare:
.24ea	b1 2a		lda ($2a),y			lda 	(temp0),y 					; do the subtraction - compare don't care about answer
.24ec	f1 2c		sbc ($2c),y			sbc 	(temp1),y
.24ee	05 2e		ora $2e				ora 	temp2 						; Or into temp2 (does not affect carry)
.24f0	85 2e		sta $2e				sta 	temp2
.24f2	c8		iny				iny
.24f3	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/if.asm

.24f4					CommandIf:
.24f4	20 7f 2f	jsr $2f7f			jsr 	EvaluateRootInteger 		; get what's being tested.
.24f7	b1 28		lda ($28),y			lda 	(codePtr),y 				; check for IF .. THEN or IF .. GOTO which are single lines.
.24f9	c9 91		cmp #$91			cmp 	#TKW_GOTO
.24fb	f0 04		beq $2501			beq 	_IfSimple
.24fd	c9 a1		cmp #$a1			cmp 	#TKW_THEN
.24ff	d0 1b		bne $251c			bne 	_IfComplex
.2501					_IfSimple:
.2501	20 40 36	jsr $3640			jsr 	MInt32Zero					; check if TOS zero
.2504	f0 10		beq $2516			beq 	_IfEOL 						; go to next line.
.2506	b1 28		lda ($28),y			lda 	(codePtr),y 				; get and skip token.
.2508	c8		iny				iny
.2509	c9 91		cmp #$91			cmp 	#TKW_GOTO 					; was it if GOTO ?
.250b	f0 0c		beq $2519			beq 	_IfGoto 					; do the Goto code
.250d	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows the THEN ?
.250f	29 c0		and #$c0			and 	#$C0 						; check $40-$7F
.2511	c9 40		cmp #$40			cmp 	#$40 						; e.g. number IF x = 0 THEN 170
.2513	f0 04		beq $2519			beq 	_IfGoto
.2515	60		rts				rts 								; else continue on this line.
.2516					_IfEOL:
.2516	4c d1 23	jmp $23d1			jmp 	AdvanceNextLine 			; go to next line
.2519					_IfGoto:
.2519	4c 08 21	jmp $2108			jmp 	CommandGoto
.251c					_IfComplex:
.251c	20 40 36	jsr $3640			jsr 	MInt32Zero 					; is it true ?
.251f	f0 01		beq $2522			beq 	_IFSkip 					; if non-zero then skip to ELSE/ENDIF
.2521	60		rts				rts 								; else continue.
.2522					_IFSkip:
.2522	a9 d6		lda #$d6			lda	 	#TKW_ELSE 					; test failed, go to ELSE or ENDIF whichever comes first.
.2524	a2 a2		ldx #$a2			ldx 	#TKW_ENDIF
.2526	4c be 27	jmp $27be			jmp		ScanForward
.2529					Command_ELSE:
.2529	a2 a2		ldx #$a2			ldx 	#TKW_ENDIF
.252b	8a		txa				txa
.252c	4c be 27	jmp $27be			jmp		ScanForward
.252f					Command_ENDIF:
.252f	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/local.asm

.0cd5					storeSize:
>0cd5							.fill 	1
.2530					CommandLocal:
.2530	a2 00		ldx #$00			ldx 	#0
.2532	20 4e 25	jsr $254e			jsr 	LocaliseVariable 			; localise one.
.2535					_CLCheckNext:
.2535	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows ?
.2537	c8		iny				iny
.2538	c9 8d		cmp #$8d			cmp 	#TKW_EQUAL 					; something local "x = 2" ?
.253a	f0 06		beq $2542			beq 	_CLAssignment
.253c	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; comma try again.
.253e	f0 f0		beq $2530			beq 	CommandLocal
.2540	88		dey				dey
.2541	60		rts				rts
.2542					_CLAssignment:
.2542	a2 01		ldx #$01			ldx 	#1
.2544	20 62 2f	jsr $2f62			jsr 	Evaluate 					; evaluate RHS
.2547	ca		dex				dex
.2548	20 11 23	jsr $2311			jsr 	WriteValue
.254b	4c 35 25	jmp $2535			jmp 	_CLCheckNext
.254e					LocaliseVariable:
.254e	b1 28		lda ($28),y			lda 	(codePtr),y 				; check it's a variable.
.2550	c9 40		cmp #$40			cmp 	#$40
.2552	b0 67		bcs $25bb			bcs 	_LVSyntax
.2554	8a		txa				txa 								; get the address of that variable.
.2555	a2 02		ldx #$02		ldx	#2
.2557	20 e9 45	jsr $45e9		jsr	variableHandler
.255a	aa		tax				tax
.255b	8a		txa				txa
.255c	48		pha				pha
.255d	98		tya				tya
.255e	48		pha				pha
.255f	20 73 23	jsr $2373			jsr 	TOSToTemp0 					; the address of the variable is now in temp0.
.2562	b5 48		lda $48,x			lda 	esType,x 					; get the type
.2564	0a		asl a				asl 	a
.2565	10 16		bpl $257d			bpl 	_LVPushNumber
.2567	a0 00		ldy #$00			ldy 	#0 							; put address of data in temp1
.2569	b1 2a		lda ($2a),y			lda 	(temp0),y
.256b	c8		iny				iny
.256c	85 2c		sta $2c				sta 	temp1
.256e	b1 2a		lda ($2a),y			lda 	(temp0),y
.2570	85 2d		sta $2d				sta 	temp1+1
.2572	a0 00		ldy #$00			ldy 	#0 	 						; get length
.2574	b1 2c		lda ($2c),y			lda 	(temp1),y
.2576	aa		tax				tax 								; into X
.2577	e8		inx				inx 								; +1 for length.
.2578	a9 24		lda #$24			lda 	#markerString
.257a	4c 92 25	jmp $2592			jmp 	_LVWriteFrame
.257d					_LVPushNumber:
.257d	a5 2a		lda $2a				lda 	temp0 						; storage address and data source are the same
.257f	85 2c		sta $2c				sta 	temp1
.2581	a5 2b		lda $2b				lda 	temp0+1
.2583	85 2d		sta $2d				sta 	temp1+1
.2585	b5 48		lda $48,x			lda 	esType,x 					; put float flag into carry.
.2587	4a		lsr a				lsr 	a
.2588	a9 25		lda #$25			lda 	#markerInt 					; get marker and size.
.258a	a2 04		ldx #$04			ldx 	#VarISize
.258c	90 04		bcc $2592			bcc 	_LVIsInteger
.258e	a9 23		lda #$23			lda 	#markerFloat
.2590	a2 06		ldx #$06			ldx 	#VarFSize
.2592					_LVIsInteger:
.2592					_LVWriteFrame:
.2592	8e d5 0c	stx $0cd5			stx 	storeSize 					; number of bytes to copy from (temp0)
.2595	e8		inx				inx 								; allocate 3 bytes, 2 for the address, 1 for the marker.
.2596	e8		inx				inx
.2597	e8		inx				inx
.2598	20 b4 36	jsr $36b4			jsr 	RSClaim 					; create the stack frame.
.259b	a5 2a		lda $2a				lda 	temp0 						; copy the target address to slots 1 & 2
.259d	a0 01		ldy #$01			ldy 	#1
.259f	91 37		sta ($37),y			sta 	(rsPointer),y
.25a1	c8		iny				iny
.25a2	a5 2b		lda $2b				lda 	temp0+1
.25a4	91 37		sta ($37),y			sta 	(rsPointer),y
.25a6	a0 00		ldy #$00			ldy 	#0
.25a8					_LVCopyData:
.25a8	b1 2c		lda ($2c),y			lda 	(temp1),y 					; get data from source, temp1
.25aa	c8		iny				iny 								; write allowing for the header bit.
.25ab	c8		iny				iny
.25ac	c8		iny				iny
.25ad	91 37		sta ($37),y			sta 	(rsPointer),y
.25af	88		dey				dey
.25b0	88		dey				dey
.25b1	ce d5 0c	dec $0cd5			dec 	storeSize 					; do it storesize times
.25b4	d0 f2		bne $25a8			bne 	_LVCopyData
.25b6	68		pla				pla
.25b7	a8		tay				tay
.25b8	68		pla				pla
.25b9	aa		tax				tax
.25ba	60		rts				rts
.25bb					_LVSyntax:
.25bb	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.25bd	20 18 15	jsr $1518		jsr	errorHandler
.25c0					RestoreLocals:
.25c0	a2 00		ldx #$00			ldx 	#0
.25c2	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.25c4	c9 40		cmp #$40			cmp	 	#64
.25c6	90 01		bcc $25c9			bcc 	_RLocal
.25c8	60		rts				rts
.25c9					_RLocal:
.25c9	8a		txa				txa
.25ca	48		pha				pha
.25cb	98		tya				tya
.25cc	48		pha				pha
.25cd	a0 01		ldy #$01			ldy 	#1 							; copy target address to temp0
.25cf	b1 37		lda ($37),y			lda 	(rsPointer),y
.25d1	85 2a		sta $2a				sta 	temp0
.25d3	c8		iny				iny
.25d4	b1 37		lda ($37),y			lda 	(rsPointer),y
.25d6	85 2b		sta $2b				sta 	temp0+1
.25d8	a0 00		ldy #$00			ldy 	#0 							; get type back.
.25da	b1 37		lda ($37),y			lda 	(rsPointer),y
.25dc	c9 24		cmp #$24			cmp 	#markerString 				; string is ... different :)
.25de	f0 28		beq $2608			beq 	_RString
.25e0	a2 04		ldx #$04			ldx		#VARISize 					; size integer
.25e2	c9 25		cmp #$25			cmp 	#markerInt
.25e4	f0 02		beq $25e8			beq 	_RIsInteger
.25e6	a2 06		ldx #$06			ldx 	#VARFSize 					; size float
.25e8					_RIsInteger:
.25e8	8a		txa				txa
.25e9	48		pha				pha
.25ea	a0 03		ldy #$03			ldy 	#3							; start size to copy back from pointer.
.25ec					_RCopyBack:
.25ec	b1 37		lda ($37),y			lda 	(rsPointer),y
.25ee	88		dey				dey
.25ef	88		dey				dey
.25f0	88		dey				dey
.25f1	91 2a		sta ($2a),y			sta 	(temp0),y
.25f3	c8		iny				iny
.25f4	c8		iny				iny
.25f5	c8		iny				iny
.25f6	c8		iny				iny
.25f7	ca		dex				dex
.25f8	d0 f2		bne $25ec			bne 	_RCopyBack
.25fa	68		pla				pla 								; get size add 3
.25fb	18		clc				clc
.25fc	69 03		adc #$03			adc 	#3 							; (2 for address one for marker)
.25fe					_RRestoreAAndLoop:
.25fe	20 d6 36	jsr $36d6			jsr 	RSFree
.2601	68		pla				pla
.2602	a8		tay				tay
.2603	68		pla				pla
.2604	aa		tax				tax
.2605	4c c0 25	jmp $25c0			jmp 	RestoreLocals 				; go see if there are any more locals.
.2608					_RString:
.2608	a2 00		ldx #$00			ldx 	#0
.260a	a0 01		ldy #$01			ldy 	#1 							; set up for a string write.
.260c	b1 37		lda ($37),y			lda 	(rsPointer),y
.260e	95 50		sta $50,x			sta 	esInt0,x
.2610	c8		iny				iny
.2611	b1 37		lda ($37),y			lda 	(rsPointer),y
.2613	95 58		sta $58,x			sta 	esInt1,x
.2615	18		clc				clc
.2616	a5 37		lda $37				lda 	rsPointer
.2618	69 03		adc #$03			adc 	#3
.261a	95 51		sta $51,x			sta 	esInt0+1,x
.261c	a5 38		lda $38				lda 	rsPointer+1
.261e	69 00		adc #$00			adc 	#0
.2620	95 59		sta $59,x			sta 	esInt1+1,x
.2622	8a		txa				txa
.2623	a2 10		ldx #$10		ldx	#16
.2625	20 c4 39	jsr $39c4		jsr	stringHandler
.2628	a0 03		ldy #$03			ldy 	#3 							; get string length
.262a	b1 37		lda ($37),y			lda 	(rsPointer),y
.262c	18		clc				clc
.262d	69 04		adc #$04			adc 	#4 							; add 4 (pointer, marker, length) to restore.
.262f	4c fe 25	jmp $25fe			jmp 	_RRestoreAAndLoop

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/proc.asm

.0cd6					paramCount:
>0cd6							.fill 	1
.2632					CallProc:
.2632	20 ba 26	jsr $26ba			jsr 	FindProcedure 				; find procedure, put in temp0. A contains name length.
.2635	48		pha				pha 								; save length on stack
.2636	85 32		sta $32				sta 	tempShort 					; save length in tempShort
.2638	a5 2b		lda $2b				lda 	temp0+1 					; save procedure target on stack.
.263a	48		pha				pha
.263b	a5 2a		lda $2a				lda 	temp0
.263d	48		pha				pha
.263e	98		tya				tya 								; calculate Y + length
.263f	18		clc				clc
.2640	65 32		adc $32				adc 	tempShort
.2642	a8		tay				tay
.2643	a2 00		ldx #$00			ldx 	#0 							; where the first parameter goes - 1
.2645					_CallProcEvalParams:
.2645	e8		inx				inx
.2646	b1 28		lda ($28),y			lda 	(codePtr),y 				; do we have ) , e.g. the end of the parameters ?
.2648	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.264a	f0 0b		beq $2657			beq 	_CPDoneParams
.264c	20 62 2f	jsr $2f62			jsr 	Evaluate 					; evaluate a parameter
.264f	b1 28		lda ($28),y			lda 	(codePtr),Y 				; get what's next, preconsume
.2651	c8		iny				iny
.2652	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; if comma, go get another parameter
.2654	f0 ef		beq $2645			beq 	_CallProcEvalParams
.2656	88		dey				dey 								; undo consumption.
.2657					_CPDoneParams:
.2657	20 8c 36	jsr $368c			jsr 	CheckRightParen 			; check closing parenthesis.
.265a	8e d6 0c	stx $0cd6			stx 	paramCount 					; store parameter count+1
.265d	a2 04		ldx #$04			ldx 	#4							; make space on stack
.265f	a9 50		lda #$50			lda 	#markerPROC
.2661	20 b4 36	jsr $36b4			jsr 	RSClaim
.2664	a9 01		lda #$01			lda 	#1 							; store return address.
.2666	20 e0 36	jsr $36e0			jsr 	RSSavePosition
.2669	68		pla				pla 								; get the new code Ptr
.266a	85 28		sta $28				sta 	codePtr
.266c	68		pla				pla
.266d	85 29		sta $29				sta 	codePtr+1
.266f	68		pla				pla 								; length of name + 4 is the param start.
.2670	18		clc				clc
.2671	69 04		adc #$04			adc 	#4
.2673	a8		tay				tay
.2674	a2 ff		ldx #$ff			ldx 	#$FF
.2676					_CPLoadParameters:
.2676	e8		inx				inx 								; point to where the address should be loaded.
.2677	ec d6 0c	cpx $0cd6			cpx 	paramCount 					; too many parameters in definition ?
.267a	f0 1e		beq $269a			beq 	_CPParamError
.267c	b1 28		lda ($28),y			lda 	(codePtr),y					; what follows
.267e	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN 				; is it the right bracket
.2680	f0 0e		beq $2690			beq 	_CPParamComplete 			; done all the parameters, perhaps.
.2682	20 4e 25	jsr $254e			jsr 	LocaliseVariable 			; make following variable local, ref in tos,x
.2685	20 11 23	jsr $2311			jsr 	WriteValue 					; copy the evaluated parameter into there.
.2688	b1 28		lda ($28),y			lda 	(codePtr),y 				; followed by a comma ?
.268a	c8		iny				iny
.268b	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.268d	f0 e7		beq $2676			beq 	_CPLoadParameters
.268f	88		dey				dey 								; no, unconsume and check for )
.2690					_CPParamComplete:
.2690	20 8c 36	jsr $368c			jsr 	CheckRightParen 			; check )
.2693	e8		inx				inx 								; check right number of parameters have been consumed
.2694	ec d6 0c	cpx $0cd6			cpx 	paramCount
.2697	d0 01		bne $269a			bne 	_CPParamError
.2699	60		rts				rts
.269a					_CPParamError:
.269a	a2 18		ldx #$18			ldx 	#ErrorID_Params
.269c	20 18 15	jsr $1518		jsr	errorHandler
.269f					ReturnProc:
.269f	20 c0 25	jsr $25c0			jsr 	RestoreLocals 				; get the locals back.
.26a2	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.26a4	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.26a6	c9 50		cmp #$50			cmp 	#markerPROC 						; does it match
.26a8	f0 05		beq $26af			beq 	_isok
.26aa	a2 12		ldx #$12			ldx 	#ErrorID_endProcErr
.26ac	20 18 15	jsr $1518		jsr	errorHandler
.26af					_isok:
.26af	a9 01		lda #$01			lda 	#1
.26b1	20 f3 36	jsr $36f3			jsr 	RSLoadPosition 				; reload the position from offset 1.
.26b4	a9 04		lda #$04			lda 	#4 							; throw 4 bytes from stack.
.26b6	20 d6 36	jsr $36d6			jsr 	RSFree
.26b9	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/proctable.asm

.0cd7					procList:
>0cd7							.fill 	2		 					; terminated by name high being zero.
.0cd9					yInLine:
>0cd9							.fill 	1
.26ba					FindProcedure:
.26ba	8c d9 0c	sty $0cd9			sty 	yInLine 					; save current position.
.26bd	20 78 27	jsr $2778			jsr 	CalculateProcedureHash		; calculate the hash of the procedure.
.26c0	85 2c		sta $2c				sta 	temp1
.26c2	ad d7 0c	lda $0cd7			lda		procList 					; put procList address in temp2
.26c5	85 2e		sta $2e				sta 	temp2
.26c7	ad d8 0c	lda $0cd8			lda 	procList+1
.26ca	85 2f		sta $2f				sta 	temp2+1
.26cc	a0 00		ldy #$00			ldy 	#0 							; position in this table.
.26ce					_FPLoop:
.26ce	b1 2e		lda ($2e),y			lda 	(temp2),y
.26d0	f0 4f		beq $2721			beq 	_FPError 					; if so, we don't know this procedure.
.26d2	85 2b		sta $2b				sta 	temp0+1 					; copy MSB/LSB to temp0 as we go.
.26d4	c8		iny				iny
.26d5	b1 2e		lda ($2e),y			lda 	(temp2),y
.26d7	85 2a		sta $2a				sta 	temp0
.26d9	c8		iny				iny
.26da	b1 2e		lda ($2e),y			lda 	(temp2),y					; check the procedure hash.
.26dc	c5 2c		cmp $2c				cmp 	temp1
.26de	d0 2b		bne $270b			bne 	_FPNext 					; hash is different, go to next.
.26e0	38		sec				sec
.26e1	ad d9 0c	lda $0cd9			lda 	yInLine 					; position in line must be at least 4
.26e4	e9 04		sbc #$04			sbc 	#4
.26e6	18		clc				clc
.26e7	65 28		adc $28				adc 	codePtr
.26e9	85 30		sta $30				sta 	temp3
.26eb	a5 29		lda $29				lda 	codePtr+1
.26ed	69 00		adc #$00			adc 	#0
.26ef	85 31		sta $31				sta 	temp3+1
.26f1	98		tya				tya
.26f2	48		pha				pha
.26f3	a0 04		ldy #$04			ldy 	#4
.26f5					_FPCName:
.26f5	b1 30		lda ($30),y			lda 	(temp3),y 					; check the same
.26f7	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.26f9	d0 0e		bne $2709			bne 	_FPpulYNext 				; if different go to next one.
.26fb	c8		iny				iny
.26fc	c9 3a		cmp #$3a			cmp 	#$3A
.26fe	90 f5		bcc $26f5			bcc 	_FPCName 					; compare the whole lot....
.2700	68		pla				pla 								; throw away the saved Y
.2701	98		tya				tya 								; length of name is Y-4
.2702	38		sec				sec
.2703	e9 04		sbc #$04			sbc 	#4
.2705	ac d9 0c	ldy $0cd9			ldy 	yInLine  					; get the original Y back
.2708	60		rts				rts
.2709					_FPpulYNext:
.2709	68		pla				pla
.270a	a8		tay				tay
.270b					_FPNext:
.270b	c8		iny				iny 								; next procedure record.
.270c	10 c0		bpl $26ce			bpl 	_FPLoop 					; if done 128 already ... e.g. Y -ve
.270e	98		tya				tya 								; subtract 128 from Y
.270f	38		sec				sec
.2710	e9 80		sbc #$80			sbc 	#128
.2712	a8		tay				tay
.2713	18		clc				clc 								; add 128 to temp2, so we can have more than
.2714	a5 2e		lda $2e				lda 	temp2 						; 255/3 = 85 procedures
.2716	69 80		adc #$80			adc 	#128
.2718	85 2e		sta $2e				sta 	temp2
.271a	90 b2		bcc $26ce			bcc 	_FPLoop
.271c	e6 2f		inc $2f				inc 	temp2+1
.271e	4c ce 26	jmp $26ce			jmp 	_FPLoop
.2721					_FPError:
.2721	a2 17		ldx #$17			ldx 	#ErrorID_NoProc
.2723	20 18 15	jsr $1518		jsr	errorHandler
.2726					ScanProc:
.2726	98		tya				tya
.2727	48		pha				pha
.2728	a5 35		lda $35				lda 	lowMemory 					; copy the start of the procList, at low memory
.272a	8d d7 0c	sta $0cd7			sta 	procList
.272d	a5 36		lda $36				lda 	lowMemory+1
.272f	8d d8 0c	sta $0cd8			sta 	procList+1
.2732	20 a2 2a	jsr $2aa2			jsr 	ResetCodeAddress 			; back to the start.
.2735					_ScanLoop:
.2735	a0 00		ldy #$00			ldy 	#0 							; check reached program end
.2737	b1 28		lda ($28),y			lda 	(codePtr),y
.2739	f0 2a		beq $2765			beq 	_ScanExit
.273b	a0 03		ldy #$03			ldy 	#3							; get first token
.273d	b1 28		lda ($28),y			lda 	(codePtr),y
.273f	c9 9d		cmp #$9d			cmp 	#TKW_DEFPROC				; skip to next if not DEFPROC
.2741	d0 12		bne $2755			bne 	_ScanNext
.2743	a5 29		lda $29				lda 	codePtr+1 					; write high and low address of this line.
.2745	20 6d 27	jsr $276d			jsr 	_ScanWrite
.2748	a5 28		lda $28				lda 	codePtr
.274a	20 6d 27	jsr $276d			jsr 	_ScanWrite
.274d	a0 04		ldy #$04			ldy 	#4 							; start of name part
.274f	20 78 27	jsr $2778			jsr 	CalculateProcedureHash 		; calculate procedure hash
.2752	20 6d 27	jsr $276d			jsr 	_ScanWrite					; and write that
.2755					_ScanNext:
.2755	18		clc				clc
.2756	a0 00		ldy #$00			ldy 	#0
.2758	b1 28		lda ($28),y			lda 	(codePtr),y
.275a	65 28		adc $28				adc 	codePtr
.275c	85 28		sta $28				sta 	codePtr
.275e	90 d5		bcc $2735			bcc 	_ScanLoop
.2760	e6 29		inc $29				inc 	codePtr+1
.2762	4c 35 27	jmp $2735			jmp 	_ScanLoop
.2765					_ScanExit:
.2765	a9 00		lda #$00			lda 	#0 							; write ending zero.
.2767	20 6d 27	jsr $276d			jsr 	_ScanWrite
.276a	68		pla				pla
.276b	a8		tay				tay
.276c	60		rts				rts
.276d					_ScanWrite:
.276d	a0 00		ldy #$00			ldy 	#0
.276f	91 35		sta ($35),y			sta 	(lowMemory),y
.2771	e6 35		inc $35				inc 	lowMemory
.2773	d0 02		bne $2777			bne 	_SWNoCarry
.2775	e6 36		inc $36				inc 	lowMemory+1
.2777					_SWNoCarry:
.2777	60		rts				rts
.2778					CalculateProcedureHash:
.2778	a9 00		lda #$00			lda 	#0 							; clear hash.
.277a	85 2a		sta $2a				sta 	temp0
.277c					_CPHLoop:
.277c	18		clc				clc 								; add character and rotate and add carry back in
.277d	b1 28		lda ($28),y			lda 	(codePtr),y
.277f	65 2a		adc $2a				adc 	temp0
.2781	6a		ror a				ror 	a
.2782	69 0d		adc #$0d			adc 	#13 						; primes usually good for this sort of thing.
.2784	85 2a		sta $2a				sta 	temp0 						; (down with this sort of thing)
.2786	b1 28		lda ($28),y			lda 	(codePtr),y
.2788	c8		iny				iny 								; advance incase we go round again.
.2789	c9 3a		cmp #$3a			cmp 	#$3A
.278b	90 ef		bcc $277c			bcc 	_CPHLoop
.278d	a5 2a		lda $2a				lda 	temp0
.278f	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/repeat.asm

.2790					Command_Repeat:
.2790	a2 04		ldx #$04			ldx 	#4 							; allocate 4 bytes on stack for REPEAT
.2792	a9 52		lda #$52			lda 	#markerREPEAT 				; repeat marker allocate 4 bytes
.2794	20 b4 36	jsr $36b4			jsr 	RSClaim
.2797	a9 01		lda #$01			lda 	#1 							; save position at offset 1.
.2799	20 e0 36	jsr $36e0			jsr 	RSSavePosition
.279c	60		rts				rts
.279d					Command_Until:
.279d	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.279f	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.27a1	c9 52		cmp #$52			cmp 	#markerREPEAT 						; does it match
.27a3	f0 05		beq $27aa			beq 	_isok
.27a5	a2 0f		ldx #$0f			ldx 	#ErrorID_untilErr
.27a7	20 18 15	jsr $1518		jsr	errorHandler
.27aa					_isok:
.27aa	20 7f 2f	jsr $2f7f			jsr 	EvaluateRootInteger 		; at the bottom.
.27ad	20 40 36	jsr $3640			jsr 	MInt32Zero					; check if TOS zero
.27b0	d0 06		bne $27b8			bne 	_CUExit
.27b2	a9 01		lda #$01			lda 	#1
.27b4	20 f3 36	jsr $36f3			jsr 	RSLoadPosition 				; reload the position from offset 1.
.27b7	60		rts				rts
.27b8					_CUExit:
.27b8	a9 04		lda #$04			lda 	#4 							; throw 4 bytes from stack.
.27ba	20 d6 36	jsr $36d6			jsr 	RSFree
.27bd	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/scanner.asm

.27be					ScanForward:
.27be	85 2c		sta $2c				sta 	temp1 						; save tokens to search in temp1/temp1+1
.27c0	86 2d		stx $2d				stx 	temp1+1
.27c2	a9 00		lda #$00			lda 	#0 							; temp2 counts structure levels.
.27c4	85 2e		sta $2e				sta 	temp2
.27c6	b1 28		lda ($28),y	_SFLoop:lda 	(codePtr),y 				; look at the next token.
.27c8	c8		iny				iny
.27c9	a6 2e		ldx $2e				ldx 	temp2 						; check structure levels are zero.
.27cb	d0 08		bne $27d5			bne 	_SFNoCheck 					; if so, check token against entered values.
.27cd	c5 2c		cmp $2c				cmp 	temp1 						; if either matches, we've reached the token
.27cf	f0 24		beq $27f5			beq 	_SFExit 					; at the same strcture depth.
.27d1	c5 2d		cmp $2d				cmp 	temp1+1
.27d3	f0 20		beq $27f5			beq 	_SFExit
.27d5					_SFNoCheck:
.27d5	c9 80		cmp #$80			cmp 	#$80 						; if it is 00-7F (variable/number) just skip it.
.27d7	90 ed		bcc $27c6			bcc 	_SFLoop
.27d9	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; $80-$85 is various specials.
.27db	90 19		bcc $27f6			bcc 	_SFSpecials
.27dd	c9 99		cmp #$99			cmp 	#TOK_STRUCTST 				; if < structure start then continue
.27df	90 e5		bcc $27c6			bcc 	_SFLoop
.27e1	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST 				; if >= unary start (after structure) then continue.
.27e3	b0 e1		bcs $27c6			bcs 	_SFLoop
.27e5	aa		tax				tax  								; token in X, and look up the adjuster.
.27e6	bd 9d 2e	lda $2e9d,x			lda 	ELBinaryOperatorInfo-TOK_BINARYST,x
.27e9	38		sec				sec 								; convert to an offset ($FF,$01)
.27ea	e9 81		sbc #$81			sbc 	#$81
.27ec	18		clc				clc 								; add to depth
.27ed	65 2e		adc $2e				adc 	temp2
.27ef	85 2e		sta $2e				sta 	temp2
.27f1	10 d3		bpl $27c6			bpl 	_SFLoop 					; +ve okay to continue
.27f3	30 07		bmi $27fc			bmi 	SFError 					; if gone -ve then we have a nesting error
.27f5	60		rts		_SFExit:rts
.27f6					_SFSpecials:
.27f6	20 01 28	jsr $2801			jsr 	ScannerSkipSpecial
.27f9	4c c6 27	jmp $27c6			jmp 	_SFLoop
.27fc					SFError:
.27fc	a2 14		ldx #$14			ldx 	#ErrorID_Struct
.27fe	20 18 15	jsr $1518		jsr	errorHandler
.2801					ScannerSkipSpecial:
.2801	c9 80		cmp #$80			cmp 	#TOK_EOL 					; $80, advance to next line.
.2803	f0 10		beq $2815			beq 	_SFNextLine
.2805	c9 84		cmp #$84			cmp 	#TOK_FPC					; $84, skip embedded float
.2807	f0 2b		beq $2834			beq 	_SFFloatSkip
.2809	c9 85		cmp #$85			cmp 	#TOK_STR 					; $85, skip string
.280b	f0 02		beq $280f			beq 	_SFSkipString
.280d	c8		iny				iny									; $81,$82,$83 shift, so just advance over the shifted
.280e	60		rts				rts 								; token.
.280f					_SFSkipString:
.280f	98		tya				tya
.2810	38		sec				sec
.2811	71 28		adc ($28),y			adc 	(codePtr),y
.2813	a8		tay				tay
.2814	60		rts				rts
.2815					_SFNextLine:
.2815	a0 00		ldy #$00			ldy 	#0 							; get offset
.2817	b1 28		lda ($28),y			lda 	(codePtr),y
.2819	18		clc				clc 								; add to code pointer.
.281a	65 28		adc $28				adc 	codePtr
.281c	85 28		sta $28				sta 	codePtr
.281e	90 02		bcc $2822			bcc		_SFNLNoCarry
.2820	e6 29		inc $29				inc 	codePtr+1
.2822					_SFNLNoCarry:
.2822	b1 28		lda ($28),y			lda 	(codePtr),y 				; reached the end of the program.
.2824	d0 0b		bne $2831			bne		_SFXNL 						; no go round again
.2826	a5 2c		lda $2c				lda 	temp1
.2828	c9 d9		cmp #$d9			cmp 	#TKW_DATA 					; if searching for Data different error.
.282a	d0 d0		bne $27fc			bne 	SFError 					; read uses this to search for data statements
.282c	a2 1d		ldx #$1d			ldx 	#ErrorID_DataError
.282e	20 18 15	jsr $1518		jsr	errorHandler
.2831	a0 03		ldy #$03	_SFXNL:	ldy 	#3
.2833	60		rts				rts
.2834					_SFFloatSkip:
.2834	98		tya				tya 								; skip over an embedded float.
.2835	18		clc				clc
.2836	69 05		adc #$05			adc 	#FloatEmbeddedSize
.2838	a8		tay				tay
.2839	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/while.asm

.283a					Command_While:
.283a	a9 57		lda #$57			lda 	#markerWhile 				; gosub marker allocate 4 bytes.
.283c	a2 04		ldx #$04			ldx 	#4
.283e	20 b4 36	jsr $36b4			jsr 	RSClaim 					; create on stack.
.2841	88		dey				dey
.2842	a9 01		lda #$01			lda 	#1
.2844	20 e0 36	jsr $36e0			jsr 	RSSavePosition 				; save position before the WHILE keyword.
.2847	c8		iny				iny
.2848	20 7f 2f	jsr $2f7f			jsr 	EvaluateRootInteger			; get the conditional
.284b	20 40 36	jsr $3640			jsr 	MInt32Zero 	 				; if zero, skip forward to the fail code.
.284e	f0 01		beq $2851			beq 	_CWFail
.2850	60		rts				rts
.2851					_CWFail:
.2851	a9 04		lda #$04			lda 	#4
.2853	20 d6 36	jsr $36d6			jsr 	RSFree 						; close the just opened position.
.2856	a9 9f		lda #$9f			lda 	#TKW_WEND 					; scan forward past WEND.
.2858	aa		tax				tax
.2859	20 be 27	jsr $27be			jsr 	ScanForward
.285c	60		rts				rts
.285d					Command_Wend:
.285d	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.285f	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.2861	c9 57		cmp #$57			cmp 	#markerWHILE 						; does it match
.2863	f0 05		beq $286a			beq 	_isok
.2865	a2 11		ldx #$11			ldx 	#ErrorID_wendErr
.2867	20 18 15	jsr $1518		jsr	errorHandler
.286a					_isok:
.286a	a9 01		lda #$01			lda 	#1
.286c	20 f3 36	jsr $36f3			jsr 	RSLoadPosition				; go back until true
.286f	a9 04		lda #$04			lda 	#4
.2871	20 d6 36	jsr $36d6			jsr 	RSFree 						; close the loop
.2874	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/system/clear.asm

.2875					CommandClear:
.2875					XCommandClear:
.2875	98		tya				tya
.2876	48		pha				pha
.2877	ad cc 0a	lda $0acc			lda 	endMemory					; set high memory = end of memory
.287a	85 33		sta $33				sta 	highMemory
.287c	ad cd 0a	lda $0acd			lda 	endMemory+1
.287f	85 34		sta $34				sta 	highMemory+1
.2881	ad c8 0a	lda $0ac8			lda 	basePage 					; work out where the program ends.
.2884	85 2a		sta $2a				sta 	temp0
.2886	ad c9 0a	lda $0ac9			lda 	basePage+1
.2889	85 2b		sta $2b				sta 	temp0+1
.288b					_CCFindEnd:
.288b	a0 00		ldy #$00			ldy 	#0
.288d	b1 2a		lda ($2a),y			lda 	(temp0),y
.288f	f0 0c		beq $289d			beq 	_CCFoundEnd 				; offset zero is end.
.2891	18		clc				clc
.2892	65 2a		adc $2a				adc 	temp0 						; move to next line
.2894	85 2a		sta $2a				sta 	temp0
.2896	90 f3		bcc $288b			bcc 	_CCFindEnd
.2898	e6 2b		inc $2b				inc 	temp0+1
.289a	4c 8b 28	jmp $288b			jmp 	_CCFindEnd
.289d					_CCFoundEnd:
.289d	a5 2a		lda $2a				lda 	temp0 						; put temp0 in lowMemory
.289f	85 35		sta $35				sta 	lowMemory
.28a1	a5 2b		lda $2b				lda 	temp0+1
.28a3	85 36		sta $36				sta 	lowMemory+1
.28a5	18		clc				clc 								; put temp0+1 in endProgram
.28a6	a5 2a		lda $2a				lda 	temp0
.28a8	69 01		adc #$01			adc 	#1
.28aa	8d ca 0a	sta $0aca			sta 	endProgram
.28ad	a5 2b		lda $2b				lda 	temp0+1
.28af	69 00		adc #$00			adc 	#0
.28b1	8d cb 0a	sta $0acb			sta 	endProgram+1
.28b4	18		clc				clc 								; put a bit of space in.
.28b5	a5 35		lda $35				lda 	lowMemory
.28b7	69 04		adc #$04			adc 	#4
.28b9	85 35		sta $35				sta 	lowMemory
.28bb	90 02		bcc $28bf			bcc 	_CCNoCarry
.28bd	e6 36		inc $36				inc 	lowMemory+1
.28bf					_CCNoCarry:
.28bf	20 a6 36	jsr $36a6			jsr 	RSReset 					; reset the return stack.
.28c2	a2 06		ldx #$06		ldx	#6
.28c4	20 e9 45	jsr $45e9		jsr	variableHandler
.28c7	20 26 27	jsr $2726			jsr 	ScanProc 					; scan for procedures
.28ca	20 ab 20	jsr $20ab			jsr 	CommandRestore 				; do a restore
.28cd	68		pla				pla
.28ce	a8		tay				tay
.28cf	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/system/list.asm

.0cda					structIndent:
>0cda							.fill 	1
.28d0					CommandList:
.28d0	a2 00		ldx #$00			ldx		#0 							; set start/end lines in stack 0/1 to 0 and $FFFF
.28d2	8e da 0c	stx $0cda			stx 	structIndent
.28d5	20 19 36	jsr $3619			jsr 	MInt32False
.28d8	e8		inx				inx
.28d9	20 15 36	jsr $3615			jsr 	MInt32True
.28dc	b1 28		lda ($28),y			lda 	(codePtr),y 				; look at first token
.28de	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; list ,xxxx
.28e0	f0 15		beq $28f7			beq 	_CLEndLine
.28e2	c9 00		cmp #$00			cmp 	#0 							; list ... on its own.
.28e4	30 1b		bmi $2901			bmi 	_CLDoListing 				; do the whole lot.
.28e6	a2 00		ldx #$00			ldx 	#0 							; get start line at stack:0
.28e8	20 81 2f	jsr $2f81			jsr 	EvaluateInteger
.28eb	b1 28		lda ($28),y			lda 	(codePtr),y 				; , follows ?
.28ed	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.28ef	f0 06		beq $28f7			beq 	_CLEndLine
.28f1	20 57 35	jsr $3557			jsr 	MInt32CopyUp 				; copy first to second if just a line number on its
.28f4	4c 01 29	jmp $2901			jmp 	_CLDoListing 				; own e.g. list 1100
.28f7					_CLEndLine:
.28f7	c8		iny				iny 								; skip comma
.28f8	b1 28		lda ($28),y			lda 	(codePtr),y  				; no number follows, then its list 1000,
.28fa	30 05		bmi $2901			bmi 	_CLDoListing
.28fc	a2 01		ldx #$01			ldx 	#1 							; get the last line to list
.28fe	20 81 2f	jsr $2f81			jsr 	EvaluateInteger				; get end
.2901					_CLDoListing:
.2901	20 a2 2a	jsr $2aa2			jsr 	ResetCodeAddress 			; back to the start.
.2904					_CLCheckLoop:
.2904	a2 02		ldx #$02		ldx	#2
.2906	20 f6 14	jsr $14f6		jsr	deviceHandler
.2909	a0 00		ldy #$00			ldy 	#0							; check end.
.290b	b1 28		lda ($28),y			lda 	(codePtr),y
.290d	f0 41		beq $2950			beq 	_CLEnd
.290f	a2 00		ldx #$00			ldx 	#0 							; compare vs lower.
.2911	20 53 29	jsr $2953			jsr 	CLCompareLineTOS
.2914	c9 ff		cmp #$ff			cmp 	#255 						; if < skip
.2916	f0 28		beq $2940			beq 	_CLNext
.2918	e8		inx				inx
.2919	20 53 29	jsr $2953			jsr 	CLCompareLineTOS 			; compare vs higher
.291c	c9 01		cmp #$01			cmp 	#1
.291e	f0 20		beq $2940			beq 	_CLNext
.2920	a9 80		lda #$80			lda 	#$80 						; undo any down indents this line.
.2922	20 75 29	jsr $2975			jsr 	CLStructureCheck
.2925	ad da 0c	lda $0cda			lda 	structIndent 				; indent level.
.2928	10 02		bpl $292c			bpl 	_CLPositive
.292a	a9 00		lda #$00			lda 	#0
.292c					_CLPositive:
.292c	a2 04		ldx #$04		ldx	#4
.292e	20 18 42	jsr $4218		jsr	tokeniserHandler
.2931	a9 82		lda #$82			lda 	#$82 						; up indents from this point on.
.2933	20 75 29	jsr $2975			jsr 	CLStructureCheck
.2936	ad da 0c	lda $0cda			lda 	structIndent
.2939	10 05		bpl $2940			bpl 	_CLNext
.293b	a9 00		lda #$00			lda 	#0
.293d	8d da 0c	sta $0cda			sta 	structIndent
.2940					_CLNext:
.2940	a0 00		ldy #$00			ldy 	#0 							; go to next line.
.2942	b1 28		lda ($28),y			lda 	(codePtr),y
.2944	18		clc				clc
.2945	65 28		adc $28				adc 	codePtr
.2947	85 28		sta $28				sta 	codePtr
.2949	90 b9		bcc $2904			bcc 	_CLCheckLoop
.294b	e6 29		inc $29				inc 	codePtr+1
.294d	4c 04 29	jmp $2904			jmp 	_CLCheckLoop
.2950					_CLEnd:
.2950	4c 02 37	jmp $3702			jmp 	WarmStart 					; warm start after list.
.2953					CLCompareLineTOS:
.2953	a0 01		ldy #$01			ldy 	#1
.2955	b1 28		lda ($28),y			lda 	(codePtr),y
.2957	55 50		eor $50,x			eor 	esInt0,x
.2959	85 2a		sta $2a				sta 	temp0
.295b	c8		iny				iny
.295c	b1 28		lda ($28),y			lda 	(codePtr),y
.295e	55 58		eor $58,x			eor 	esInt1,x
.2960	05 2a		ora $2a				ora 	temp0
.2962	f0 10		beq $2974			beq 	_CLCLTExit
.2964	88		dey				dey
.2965	b1 28		lda ($28),y			lda 	(codePtr),y
.2967	d5 50		cmp $50,x			cmp 	esInt0,x
.2969	c8		iny				iny
.296a	b1 28		lda ($28),y			lda 	(codePtr),y
.296c	f5 58		sbc $58,x			sbc 	esInt1,x
.296e	a9 ff		lda #$ff			lda 	#255
.2970	90 02		bcc $2974			bcc 	_CLCLTExit
.2972	a9 01		lda #$01			lda 	#1
.2974					_CLCLTExit:
.2974	60		rts				rts
.2975					CLStructureCheck:
.2975	85 2a		sta $2a				sta 	temp0
.2977	a0 03		ldy #$03			ldy 	#3
.2979					_CLSCLoop:
.2979	b1 28		lda ($28),y			lda 	(codePtr),y 				; get and consume token.
.297b	c8		iny				iny
.297c	c9 80		cmp #$80			cmp 	#$80
.297e	90 f9		bcc $2979			bcc 	_CLSCLoop 					; $00-$7F just step over.
.2980	f0 28		beq $29aa			beq		_CLSCExit					; EOL return
.2982	c9 86		cmp #$86			cmp 	#$86 						; special handler
.2984	90 1e		bcc $29a4			bcc 	_CLSCSpecial
.2986	c9 99		cmp #$99			cmp 	#TOK_STRUCTST 				; check if structure changer.
.2988	90 ef		bcc $2979			bcc 	_CLSCLoop
.298a	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST
.298c	b0 eb		bcs $2979			bcs 	_CLSCLoop
.298e	aa		tax				tax 								; get adjustment
.298f	bd 9d 2e	lda $2e9d,x			lda 	ELBinaryOperatorInfo-TOK_BINARYST,x
.2992	c5 2a		cmp $2a				cmp 	temp0	 					; if what we're searching for
.2994	d0 e3		bne $2979			bne 	_CLSCLoop
.2996	38		sec				sec
.2997	e9 81		sbc #$81			sbc 	#$81 						; convert to offset
.2999	0a		asl a				asl 	a 							; double indent step
.299a	18		clc				clc
.299b	6d da 0c	adc $0cda			adc 	structIndent 				; add to structure indent
.299e	8d da 0c	sta $0cda			sta 	structIndent
.29a1	4c 79 29	jmp $2979			jmp 	_CLSCLoop
.29a4					_CLSCSpecial:
.29a4	20 01 28	jsr $2801			jsr 	ScannerSkipSpecial
.29a7	4c 79 29	jmp $2979			jmp 	_CLSCLoop
.29aa					_CLSCExit:
.29aa	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/system/loadsave.asm

.29ab					CommandLoad:
.29ab	20 d3 29	jsr $29d3			jsr 	CLSParameters 					; get parameters for load.
.29ae	08		php				php
.29af	a2 0e		ldx #$0e		ldx	#14
.29b1	20 f6 14	jsr $14f6		jsr	deviceHandler
.29b4	28		plp				plp
.29b5	b0 08		bcs $29bf			bcs 	_CLExit 						; if CC then load a program, so warm start.
.29b7	20 75 28	jsr $2875			jsr 	CommandClear
.29ba	a2 04		ldx #$04		ldx	#4
.29bc	20 6d 20	jsr $206d		jsr	interactionHandler
.29bf					_CLExit
.29bf	60		rts				rts
.29c0					CommandSave:
.29c0	20 d3 29	jsr $29d3			jsr 	CLSParameters					; get parameters for save
.29c3	90 08		bcc $29cd			bcc 	_CSNoOverrideAddress
.29c5	20 99 36	jsr $3699			jsr 	CheckComma 						; should be a comma.
.29c8	a2 02		ldx #$02			ldx 	#2
.29ca	20 81 2f	jsr $2f81			jsr 	EvaluateInteger 				; get save end address.
.29cd					_CSNoOverrideAddress:
.29cd	a2 18		ldx #$18		ldx	#24
.29cf	20 f6 14	jsr $14f6		jsr	deviceHandler
.29d2	60		rts				rts
.29d3					CLSParameters:
.29d3	a2 00		ldx #$00			ldx 	#0 								; string
.29d5	20 76 2f	jsr $2f76			jsr 	EvaluateString
.29d8	e8		inx				inx 									; erase out +1 +2
.29d9	20 19 36	jsr $3619			jsr 	MInt32False
.29dc	e8		inx				inx
.29dd	20 19 36	jsr $3619			jsr 	MInt32False
.29e0	ad c8 0a	lda $0ac8			lda 	basePage 						; default start address.
.29e3	85 51		sta $51				sta 	esInt0+1
.29e5	ad c9 0a	lda $0ac9			lda 	basePage+1
.29e8	85 59		sta $59				sta 	esInt1+1
.29ea	ad ca 0a	lda $0aca			lda 	endProgram 						; default end address
.29ed	85 52		sta $52				sta 	esInt0+2
.29ef	ad cb 0a	lda $0acb			lda 	endProgram+1
.29f2	85 5a		sta $5a				sta 	esInt1+2
.29f4	b1 28		lda ($28),y			lda 	(codePtr),y 					; , following
.29f6	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.29f8	d0 08		bne $2a02			bne 	_CLSDefault
.29fa	c8		iny				iny 									; skip comma
.29fb	a2 01		ldx #$01			ldx 	#1 								; get numeric value.
.29fd	20 81 2f	jsr $2f81			jsr 	EvaluateInteger
.2a00	38		sec				sec
.2a01	60		rts				rts
.2a02					_CLSDefault:
.2a02	18		clc				clc
.2a03	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/system/new.asm

.2a04					Command_New:
.2a04					Command_XNew:
.2a04	20 a2 2a	jsr $2aa2			jsr 	ResetCodeAddress 			; point to first line
.2a07	a0 00		ldy #$00			ldy 	#0 							; and zap it.
.2a09	98		tya				tya
.2a0a	91 28		sta ($28),y			sta 	(codePtr),y
.2a0c	20 75 28	jsr $2875			jsr 	CommandClear 				; clear everything down.
.2a0f	4c cb 23	jmp $23cb			jmp 	CommandEND 					; do END code, as there's nothing to run.

;******  Return to file: main/main.asm


;******  Processing file: main/commands/system/run.asm

.0cdb					breakCounter:
>0cdb								.fill 	1
.0cdc					breakIncrement:
>0cdc								.fill 	1
.2a12					Command_Run:
.2a12					XCommand_Run:
.2a12	a2 ff		ldx #$ff			ldx 	#$FF 						; reset the stack.
.2a14	9a		txs				txs
.2a15	20 9c 2a	jsr $2a9c			jsr 	BreakOn 					; turn break on
.2a18	20 75 28	jsr $2875			jsr 	CommandClear 				; clear everything.
.2a1b	20 a2 2a	jsr $2aa2			jsr 	ResetCodeAddress 			; back to the start.
.2a1e					Command_RunFrom:
.2a1e	a0 03		ldy #$03			ldy 	#3 							; over offset/line #
.2a20					CRNextInstruction:
.2a20	64 3a		stz $3a				stz 	softMemAlloc+1
.2a22	ad db 0c	lda $0cdb			lda 	breakCounter 				; check for break.
.2a25	6d dc 0c	adc $0cdc			adc 	breakIncrement
.2a28	8d db 0c	sta $0cdb			sta 	breakCounter
.2a2b	90 05		bcc $2a32			bcc 	_CRNoChecks
.2a2d	a2 02		ldx #$02		ldx	#2
.2a2f	20 f6 14	jsr $14f6		jsr	deviceHandler
.2a32					_CRNoChecks
.2a32	b1 28		lda ($28),y			lda 	(codePtr),y 				; get next token.
.2a34	10 1c		bpl $2a52			bpl 	_CRNotToken
.2a36	c9 c9		cmp #$c9			cmp 	#TOK_TOKENS 				; if in the tokens then do that token.
.2a38	b0 0c		bcs $2a46			bcs 	_CRExecute
.2a3a	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST 				; unary is ignored.
.2a3c	b0 71		bcs $2aaf			bcs 	Unimplemented
.2a3e	c9 99		cmp #$99			cmp 	#TOK_STRUCTST 				; execute structures.
.2a40	b0 04		bcs $2a46			bcs 	_CRExecute
.2a42	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; if one of the system tokens $80-$85 do that
.2a44	b0 16		bcs $2a5c			bcs 	_CRCheckIndirect 			; if in that unused range check for ! or ? or AND
.2a46					_CRExecute:
.2a46	c8		iny				iny 								; consume it.
.2a47	0a		asl a				asl 	a 							; double it, losing most significant bit.
.2a48	aa		tax				tax
.2a49	20 4f 2a	jsr $2a4f			jsr 	_CRRunRoutine 				; we want to do jsr (group0vectors,x)
.2a4c	4c 20 2a	jmp $2a20			jmp 	CRNextInstruction
.2a4f					_CRRunRoutine:
.2a4f	7c b9 2a	jmp ($2ab9,x)			jmp 	(Group0Vectors,x)
.2a52					_CRNotToken:
.2a52	c9 40		cmp #$40			cmp 	#$40 						; if 0-3F then it is a letter
.2a54	b0 59		bcs $2aaf			bcs 	Unimplemented
.2a56					_CRDefaultLet:
.2a56	20 fe 22	jsr $22fe			jsr 	CommandLet 					; do the default, LET
.2a59	4c 20 2a	jmp $2a20			jmp 	CRNextInstruction
.2a5c					_CRCheckIndirect:
.2a5c	c9 86		cmp #$86			cmp 	#TKW_AND 					; AND (assembler)
.2a5e	f0 0a		beq $2a6a			beq 	_CRAndCommand
.2a60	c9 97		cmp #$97			cmp 	#TKW_PLING 					; !<term> =
.2a62	f0 f2		beq $2a56			beq 	_CRDefaultLet
.2a64	c9 98		cmp #$98			cmp 	#TKW_QMARK 					; ?<term> =
.2a66	f0 ee		beq $2a56			beq 	_CRDefaultLet
.2a68	d0 45		bne $2aaf			bne 	Unimplemented
.2a6a					_CRAndCommand:
.2a6a	c8		iny				iny 								; skip over the AND token
.2a6b	a9 95		lda #$95			lda 	#TKW_LPARENANDRPAREN 		; replace it with the pseudo-and
.2a6d	20 87 2a	jsr $2a87			jsr 	CommandAssembler 			; do the assembler command
.2a70	4c 20 2a	jmp $2a20			jmp 	CRNextInstruction 			; and loop round.
.2a73					CommandShift1:
.2a73	b1 28		lda ($28),y			lda 	(codePtr),y 				; get shifted value
.2a75	10 38		bpl $2aaf			bpl 	Unimplemented 				; we have an error as this should not happen.
.2a77	c8		iny				iny 								; advance over it.
.2a78	c9 94		cmp #$94			cmp 	#TKA_GROUP1 				; is it an assembler constant ?
.2a7a	b0 0b		bcs $2a87			bcs 	CommandAssembler
.2a7c	0a		asl a				asl 	a 							; double into X
.2a7d	aa		tax				tax
.2a7e	7c 7d 2b	jmp ($2b7d,x)			jmp 	(Group1Vectors-12,x) 		; and do the code.
.2a81					CommandShift2:
.2a81	a9 ff		lda #$ff			lda 	#$FF 						; $FF means command not unary function.
.2a83	20 69 18	jsr $1869		jsr	extensionHandler
.2a86	60		rts				rts
.2a87					CommandAssembler:
.2a87	a2 02		ldx #$02		ldx	#2
.2a89	20 b4 13	jsr $13b4		jsr	assemblerHandler
.2a8c	60		rts				rts
.2a8d					CommandAssemblerLabel:
.2a8d	a2 04		ldx #$04		ldx	#4
.2a8f	20 b4 13	jsr $13b4		jsr	assemblerHandler
.2a92	60		rts				rts
.2a93					CommandColon:
.2a93	60		rts				rts
.2a94					CommandBreak:
.2a94	20 7f 2f	jsr $2f7f			jsr 	EvaluateRootInteger
.2a97	20 40 36	jsr $3640			jsr 	MInt32Zero
.2a9a	f0 02		beq $2a9e			beq 	BreakOff
.2a9c					BreakOn:
.2a9c	a2 08		ldx #$08			ldx 	#8
.2a9e					BreakOff:
.2a9e	8e dc 0c	stx $0cdc			stx 	breakIncrement
.2aa1	60		rts				rts
.2aa2					ResetCodeAddress:
.2aa2	ad c8 0a	lda $0ac8			lda 	basePage 					; copy basePage to code Pointer
.2aa5	85 28		sta $28				sta 	codePtr
.2aa7	ad c9 0a	lda $0ac9			lda 	basePage+1
.2aaa	85 29		sta $29				sta 	codePtr+1
.2aac	a0 03		ldy #$03			ldy 	#3 							; offset after offset link and line#
.2aae	60		rts				rts
.2aaf					Unimplemented:
.2aaf	a2 01		ldx #$01			ldx 	#ErrorID_Missing
.2ab1	20 18 15	jsr $1518		jsr	errorHandler
.2ab4					TKErr01:
.2ab4					TKErr02:
.2ab4					TKErr03:
.2ab4					TKErr04:
.2ab4					TKErr05:
.2ab4					TKErr06:
.2ab4					TKErr07:
.2ab4					TKErr08:
.2ab4					TKErr09:
.2ab4					TKErr10:
.2ab4					TKErr11:
.2ab4					TKErr12:
.2ab4					TKErr13:
.2ab4					TKErr14:
.2ab4	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.2ab6	20 18 15	jsr $1518		jsr	errorHandler

;******  Processing file: main/commands/system/../../../generated/tokenvectors0.inc

.2ab9					Group0Vectors:
>2ab9	d1 23					.word	AdvanceNextLine          ; $80 [[eol]]
>2abb	73 2a					.word	CommandShift1            ; $81 [[sh1]]
>2abd	81 2a					.word	CommandShift2            ; $82 [[sh2]]
>2abf	b4 2a					.word	TKErr09                  ; $83 [[sh3]]
>2ac1	b4 2a					.word	TKErr10                  ; $84 [[fpc]]
>2ac3	b4 2a					.word	TKErr08                  ; $85 [[str]]
>2ac5	66 2c					.word	AndHandler               ; $86 and
>2ac7	53 2c					.word	OrHandler                ; $87 or
>2ac9	40 2c					.word	XorHandler               ; $88 xor
>2acb	88 2d					.word	CompareGreaterEq         ; $89 >=
>2acd	92 2d					.word	CompareLessEq            ; $8a <=
>2acf	74 2d					.word	CompareGreater           ; $8b >
>2ad1	6a 2d					.word	CompareLess              ; $8c <
>2ad3	60 2d					.word	CompareEquals            ; $8d =
>2ad5	7e 2d					.word	CompareNotEquals         ; $8e <>
>2ad7	d1 2b					.word	AddHandler               ; $8f +
>2ad9	f4 2b					.word	SubHandler               ; $90 -
>2adb	8c 2c					.word	ShrHandler               ; $91 >>
>2add	79 2c					.word	ShlHandler               ; $92 <<
>2adf	07 2c					.word	MulHandler               ; $93 *
>2ae1	1a 2c					.word	DivHandler               ; $94 /
>2ae3	2d 2c					.word	ModHandler               ; $95 mod
>2ae5	c5 2c					.word	PowerHandler             ; $96 ^
>2ae7	9f 2c					.word	WordRefHandler           ; $97 !
>2ae9	b2 2c					.word	ByteRefHandler           ; $98 ?
>2aeb	90 27					.word	Command_Repeat           ; $99 repeat
>2aed	3a 28					.word	Command_While            ; $9a while
>2aef	e5 23					.word	Command_FOR              ; $9b for
>2af1	f4 24					.word	CommandIf                ; $9c if
>2af3	b4 2a					.word	TKErr04                  ; $9d defproc
>2af5	9d 27					.word	Command_Until            ; $9e until
>2af7	5d 28					.word	Command_Wend             ; $9f wend
>2af9	46 24					.word	Command_NEXT             ; $a0 next
>2afb	b4 2a					.word	TKErr06                  ; $a1 then
>2afd	2f 25					.word	Command_ENDIF            ; $a2 endif
>2aff	9f 26					.word	ReturnProc               ; $a3 endproc
>2b01	ec 2e					.word	UnaryParenthesis         ; $a4 (
>2b03	ce 30					.word	UnaryLen                 ; $a5 len(
>2b05	12 31					.word	UnarySgn                 ; $a6 sgn(
>2b07	fb 30					.word	UnaryAbs                 ; $a7 abs(
>2b09	6b 31					.word	Unary_Random             ; $a8 random(
>2b0b	b5 31					.word	Unary_Page               ; $a9 page
>2b0d	15 36					.word	MInt32True               ; $aa true
>2b0f	19 36					.word	MInt32False              ; $ab false
>2b11	80 31					.word	Unary_Min                ; $ac min(
>2b13	84 31					.word	Unary_Max                ; $ad max(
>2b15	8d 32					.word	UnarySys                 ; $ae sys(
>2b17	36 32					.word	UnaryTimer               ; $af timer(
>2b19	4b 30					.word	EventFunction            ; $b0 event(
>2b1b	5f 32					.word	UnaryGet                 ; $b1 get(
>2b1d	4f 32					.word	UnaryInkey               ; $b2 inkey(
>2b1f	06 32					.word	UnaryAlloc               ; $b3 alloc(
>2b21	c6 32					.word	ExecChr                  ; $b4 chr$(
>2b23	f6 32					.word	ExecLeft                 ; $b5 left$(
>2b25	13 33					.word	ExecMid                  ; $b6 mid$(
>2b27	3b 33					.word	ExecRight                ; $b7 right$(
>2b29	cd 2f					.word	Event_Str                ; $b8 str$(
>2b2b	fc 2f					.word	UnaryVal                 ; $b9 val(
>2b2d	29 31					.word	UnaryPeek                ; $ba peek(
>2b2f	2f 31					.word	UnaryDeek                ; $bb deek(
>2b31	35 31					.word	UnaryLeek                ; $bc leek(
>2b33	ec 30					.word	UnaryAsc                 ; $bd asc(
>2b35	e0 31					.word	UnaryIntToFloat          ; $be int(
>2b37	f3 31					.word	UnaryFloatToInt          ; $bf float(
>2b39	ff 2f					.word	UnaryIsVal               ; $c0 isval(
>2b3b	dd 32					.word	ExecUpper                ; $c1 upper$(
>2b3d	da 32					.word	ExecLower                ; $c2 lower$(
>2b3f	c3 31					.word	UnaryReference           ; $c3 @
>2b41	d9 31					.word	UnaryComplement          ; $c4 ~
>2b43	d6 31					.word	UnaryHexMarker           ; $c5 &
>2b45	78 32					.word	UnaryGetString           ; $c6 get$(
>2b47	7e 32					.word	UnaryInkeyString         ; $c7 inkey$(
>2b49	b5 32					.word	UnaryMem                 ; $c8 mem
>2b4b	b4 2a					.word	TKErr01                  ; $c9 )
>2b4d	93 2a					.word	CommandColon             ; $ca :
>2b4f	b4 2a					.word	TKErr02                  ; $cb ,
>2b51	b4 2a					.word	TKErr03                  ; $cc ;
>2b53	b9 23					.word	Command_Rem2             ; $cd '
>2b55	b4 2a					.word	TKErr07                  ; $ce to
>2b57	b4 2a					.word	TKErr05                  ; $cf step
>2b59	32 26					.word	CallProc                 ; $d0 proc
>2b5b	30 25					.word	CommandLocal             ; $d1 local
>2b5d	f0 22					.word	Command_Dim              ; $d2 dim
>2b5f	b9 23					.word	Command_Rem              ; $d3 rem
>2b61	fe 22					.word	CommandLet               ; $d4 let
>2b63	3a 21					.word	Command_Input            ; $d5 input
>2b65	29 25					.word	Command_ELSE             ; $d6 else
>2b67	c1 22					.word	Command_VDU              ; $d7 vdu
>2b69	f0 21					.word	Command_Print            ; $d8 print
>2b6b	a2 20					.word	CommandData              ; $d9 data
>2b6d	b4 2a					.word	TKErr13                  ; $da image
>2b6f	b4 2a					.word	TKErr12                  ; $db at
>2b71	b4 2a					.word	TKErr14                  ; $dc flip
>2b73	e2 22					.word	Command_Assert           ; $dd assert
>2b75	7c 23					.word	Command_Poke             ; $de poke
>2b77	80 23					.word	Command_Doke             ; $df doke
>2b79	84 23					.word	Command_Loke             ; $e0 loke
>2b7b	91 22					.word	Command_Ink              ; $e1 ink
>2b7d	9c 22					.word	Command_Paper            ; $e2 paper
>2b7f	8b 22					.word	Command_CLS              ; $e3 cls
>2b81	a7 22					.word	Command_Locate           ; $e4 locate
>2b83	8d 2a					.word	CommandAssemblerLabel    ; $e5 .
>2b85	b4 2a					.word	TKErr11                  ; $e6 #
>2b87	75 28					.word	CommandClear             ; $e7 clear

;******  Return to file: main/commands/system/run.asm


;******  Processing file: main/commands/system/../../../generated/tokenvectors1.inc

.2b89					Group1Vectors:
>2b89	ab 29					.word	CommandLoad              ; $86 load
>2b8b	c0 29					.word	CommandSave              ; $87 save
>2b8d	d0 28					.word	CommandList              ; $88 list
>2b8f	04 2a					.word	Command_New              ; $89 new
>2b91	94 2a					.word	CommandBreak             ; $8a break
>2b93	12 2a					.word	Command_Run              ; $8b run
>2b95	77 20					.word	CommandRead              ; $8c read
>2b97	ab 20					.word	CommandRestore           ; $8d restore
>2b99	cb 23					.word	CommandEnd               ; $8e end
>2b9b	c6 23					.word	CommandStop              ; $8f stop
>2b9d	ce 23					.word	CommandXemu              ; $90 xemu
>2b9f	08 21					.word	CommandGOTO              ; $91 goto
>2ba1	dd 20					.word	CommandGOSUB             ; $92 gosub
>2ba3	f0 20					.word	CommandRETURN            ; $93 return

;******  Return to file: main/commands/system/run.asm


;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/binary/binary.asm

.2ba5					BinaryProcess:
.2ba5	b5 48		lda $48,x			lda 	esType,x 					; or type bytes together and check bit 6.
.2ba7	15 49		ora $49,x			ora 	esType+1,x 					; (the float bit)
.2ba9	0a		asl a				asl 	a
.2baa	30 0e		bmi $2bba			bmi 	_BPStringType 				; if bit 6 is set, then string type, error
.2bac	18		clc				clc 								; return CC for integer
.2bad	29 02		and #$02			and 	#$02 						; $02 because of ASL A. check original bit 1.
.2baf	f0 08		beq $2bb9			beq 	_BPExit 					; if both integer then return with CC.
.2bb1	20 bf 2b	jsr $2bbf			jsr 	BPMakeBothFloat 			; make both float
.2bb4	a9 01		lda #$01			lda 	#$01 						; set result type to float
.2bb6	95 48		sta $48,x			sta 	esType,x
.2bb8	38		sec				sec 								; and return with carry set.
.2bb9					_BPExit:
.2bb9	60		rts				rts
.2bba					_BPStringType:
.2bba	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.2bbc	20 18 15	jsr $1518		jsr	errorHandler
.2bbf					BPMakeBothFloat:
.2bbf	e8		inx				inx
.2bc0	20 c4 2b	jsr $2bc4			jsr 	BPMakeFloat 				; one is a float, so we do both as floats.
.2bc3	ca		dex				dex
.2bc4					BPMakeFloat:
.2bc4	b5 48		lda $48,x			lda 	esType,x 					; get type bit which is in bit 0
.2bc6	4a		lsr a				lsr 	a
.2bc7	b0 07		bcs $2bd0			bcs 	_BPIsFloat 					; already a float if set.
.2bc9	8a		txa				txa
.2bca	a2 1c		ldx #$1c		ldx	#28
.2bcc	20 81 1e	jsr $1e81		jsr	floatingpointHandler
.2bcf	aa		tax				tax
.2bd0					_BPIsFloat:
.2bd0	60		rts				rts
.2bd1					AddHandler:
.2bd1	20 a2 2d	jsr $2da2			jsr 	DereferenceTwo 				; dereference top two on stack.
.2bd4	b5 48		lda $48,x			lda 	esType,x 					; check two strings.
.2bd6	35 49		and $49,x			and 	esType+1,x
.2bd8	29 40		and #$40			and 	#$40 						; if both have bit 6 set ... we have two strings
.2bda	d0 10		bne $2bec			bne 	_AHStringConcat				; concatenate strings.
.2bdc	20 a5 2b	jsr $2ba5			jsr 	BinaryProcess 				; check to see if either is float
.2bdf	b0 03		bcs $2be4			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.2be1	4c fd 34	jmp $34fd			jmp 	MInt32Add 							; else do it as integer.
.2be4					_IsFPOperation:
.2be4	8a		txa				txa 								; call the relevant fp routine
.2be5	a2 04		ldx #$04		ldx	#4
.2be7	20 81 1e	jsr $1e81		jsr	floatingpointHandler
.2bea	aa		tax				tax
.2beb	60		rts				rts
.2bec					_AHStringConcat:
.2bec	8a		txa				txa 								; handled by the string module.
.2bed	a2 06		ldx #$06		ldx	#6
.2bef	20 c4 39	jsr $39c4		jsr	stringHandler
.2bf2	aa		tax				tax
.2bf3	60		rts				rts
.2bf4					SubHandler:
.2bf4	20 a2 2d	jsr $2da2			jsr 	DereferenceTwo
.2bf7	20 a5 2b	jsr $2ba5			jsr 	BinaryProcess 				; check to see if either is float
.2bfa	b0 03		bcs $2bff			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.2bfc	4c 17 35	jmp $3517			jmp 	MInt32Sub 							; else do it as integer.
.2bff					_IsFPOperation:
.2bff	8a		txa				txa 								; call the relevant fp routine
.2c00	a2 12		ldx #$12		ldx	#18
.2c02	20 81 1e	jsr $1e81		jsr	floatingpointHandler
.2c05	aa		tax				tax
.2c06	60		rts				rts
.2c07					MulHandler:
.2c07	20 a2 2d	jsr $2da2			jsr 	DereferenceTwo
.2c0a	20 a5 2b	jsr $2ba5			jsr 	BinaryProcess 				; check to see if either is float
.2c0d	b0 03		bcs $2c12			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.2c0f	4c 31 35	jmp $3531			jmp 	MInt32Multiply 							; else do it as integer.
.2c12					_IsFPOperation:
.2c12	8a		txa				txa 								; call the relevant fp routine
.2c13	a2 0c		ldx #$0c		ldx	#12
.2c15	20 81 1e	jsr $1e81		jsr	floatingpointHandler
.2c18	aa		tax				tax
.2c19	60		rts				rts
.2c1a					DivHandler:
.2c1a	20 a2 2d	jsr $2da2			jsr 	DereferenceTwo
.2c1d	20 a5 2b	jsr $2ba5			jsr 	BinaryProcess 				; check to see if either is float
.2c20	b0 03		bcs $2c25			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.2c22	4c ee 33	jmp $33ee			jmp 	MInt32SDivide 							; else do it as integer.
.2c25					_IsFPOperation:
.2c25	8a		txa				txa 								; call the relevant fp routine
.2c26	a2 08		ldx #$08		ldx	#8
.2c28	20 81 1e	jsr $1e81		jsr	floatingpointHandler
.2c2b	aa		tax				tax
.2c2c	60		rts				rts
.2c2d					ModHandler:
.2c2d	20 a2 2d	jsr $2da2			jsr 	DereferenceTwo
.2c30	20 a5 2b	jsr $2ba5			jsr 	BinaryProcess 				; check to see if either is float
.2c33	b0 03		bcs $2c38			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.2c35	4c 6c 34	jmp $346c			jmp 	MInt32Modulus 							; else do it as integer.
.2c38					_IsFPOperation:
.2c38	8a		txa				txa 								; call the relevant fp routine
.2c39	a2 0a		ldx #$0a		ldx	#10
.2c3b	20 81 1e	jsr $1e81		jsr	floatingpointHandler
.2c3e	aa		tax				tax
.2c3f	60		rts				rts
.2c40					XorHandler:
.2c40	20 a2 2d	jsr $2da2			jsr 	DereferenceTwo
.2c43	20 a5 2b	jsr $2ba5			jsr 	BinaryProcess 				; check to see if either is float
.2c46	b0 03		bcs $2c4b			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.2c48	4c a0 33	jmp $33a0			jmp 	MInt32Xor 							; else do it as integer.
.2c4b					_IsFPOperation:
.2c4b	8a		txa				txa 								; call the relevant fp routine
.2c4c	a2 0a		ldx #$0a		ldx	#10
.2c4e	20 81 1e	jsr $1e81		jsr	floatingpointHandler
.2c51	aa		tax				tax
.2c52	60		rts				rts
.2c53					OrHandler:
.2c53	20 a2 2d	jsr $2da2			jsr 	DereferenceTwo
.2c56	20 a5 2b	jsr $2ba5			jsr 	BinaryProcess 				; check to see if either is float
.2c59	b0 03		bcs $2c5e			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.2c5b	4c 87 33	jmp $3387			jmp 	MInt32Or 							; else do it as integer.
.2c5e					_IsFPOperation:
.2c5e	8a		txa				txa 								; call the relevant fp routine
.2c5f	a2 0a		ldx #$0a		ldx	#10
.2c61	20 81 1e	jsr $1e81		jsr	floatingpointHandler
.2c64	aa		tax				tax
.2c65	60		rts				rts
.2c66					AndHandler:
.2c66	20 a2 2d	jsr $2da2			jsr 	DereferenceTwo
.2c69	20 a5 2b	jsr $2ba5			jsr 	BinaryProcess 				; check to see if either is float
.2c6c	b0 03		bcs $2c71			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.2c6e	4c 6e 33	jmp $336e			jmp 	MInt32And 							; else do it as integer.
.2c71					_IsFPOperation:
.2c71	8a		txa				txa 								; call the relevant fp routine
.2c72	a2 0a		ldx #$0a		ldx	#10
.2c74	20 81 1e	jsr $1e81		jsr	floatingpointHandler
.2c77	aa		tax				tax
.2c78	60		rts				rts
.2c79					ShlHandler:
.2c79	20 a2 2d	jsr $2da2			jsr 	DereferenceTwo
.2c7c	20 a5 2b	jsr $2ba5			jsr 	BinaryProcess 				; check to see if either is float
.2c7f	b0 03		bcs $2c84			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.2c81	4c fa 2c	jmp $2cfa			jmp 	Mint32ShiftLeftX 							; else do it as integer.
.2c84					_IsFPOperation:
.2c84	8a		txa				txa 								; call the relevant fp routine
.2c85	a2 0a		ldx #$0a		ldx	#10
.2c87	20 81 1e	jsr $1e81		jsr	floatingpointHandler
.2c8a	aa		tax				tax
.2c8b	60		rts				rts
.2c8c					ShrHandler:
.2c8c	20 a2 2d	jsr $2da2			jsr 	DereferenceTwo
.2c8f	20 a5 2b	jsr $2ba5			jsr 	BinaryProcess 				; check to see if either is float
.2c92	b0 03		bcs $2c97			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.2c94	4c fd 2c	jmp $2cfd			jmp 	MInt32ShiftRightX 							; else do it as integer.
.2c97					_IsFPOperation:
.2c97	8a		txa				txa 								; call the relevant fp routine
.2c98	a2 0a		ldx #$0a		ldx	#10
.2c9a	20 81 1e	jsr $1e81		jsr	floatingpointHandler
.2c9d	aa		tax				tax
.2c9e	60		rts				rts
.2c9f					WordRefHandler:
.2c9f	20 a2 2d	jsr $2da2			jsr 	DereferenceTwo
.2ca2	20 a5 2b	jsr $2ba5			jsr 	BinaryProcess 				; check to see if either is float
.2ca5	b0 03		bcs $2caa			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.2ca7	4c ec 2c	jmp $2cec			jmp 	MInt32WordIndirect 							; else do it as integer.
.2caa					_IsFPOperation:
.2caa	8a		txa				txa 								; call the relevant fp routine
.2cab	a2 0a		ldx #$0a		ldx	#10
.2cad	20 81 1e	jsr $1e81		jsr	floatingpointHandler
.2cb0	aa		tax				tax
.2cb1	60		rts				rts
.2cb2					ByteRefHandler:
.2cb2	20 a2 2d	jsr $2da2			jsr 	DereferenceTwo
.2cb5	20 a5 2b	jsr $2ba5			jsr 	BinaryProcess 				; check to see if either is float
.2cb8	b0 03		bcs $2cbd			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.2cba	4c f0 2c	jmp $2cf0			jmp 	MInt32ByteIndirect 							; else do it as integer.
.2cbd					_IsFPOperation:
.2cbd	8a		txa				txa 								; call the relevant fp routine
.2cbe	a2 0a		ldx #$0a		ldx	#10
.2cc0	20 81 1e	jsr $1e81		jsr	floatingpointHandler
.2cc3	aa		tax				tax
.2cc4	60		rts				rts
.2cc5					PowerHandler:
.2cc5	20 a2 2d	jsr $2da2			jsr 	DereferenceTwo
.2cc8	20 a5 2b	jsr $2ba5			jsr 	BinaryProcess 				; check to see if either is float
.2ccb	b0 03		bcs $2cd0			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.2ccd	4c d8 2c	jmp $2cd8			jmp 	PowerInteger 							; else do it as integer.
.2cd0					_IsFPOperation:
.2cd0	8a		txa				txa 								; call the relevant fp routine
.2cd1	a2 18		ldx #$18		ldx	#24
.2cd3	20 81 1e	jsr $1e81		jsr	floatingpointHandler
.2cd6	aa		tax				tax
.2cd7	60		rts				rts
.2cd8					PowerInteger:
.2cd8	20 bf 2b	jsr $2bbf			jsr 	BPMakeBothFloat				; make them float.
.2cdb	8a		txa				txa
.2cdc	a2 18		ldx #$18		ldx	#24
.2cde	20 81 1e	jsr $1e81		jsr	floatingpointHandler
.2ce1	a2 14		ldx #$14		ldx	#20
.2ce3	20 81 1e	jsr $1e81		jsr	floatingpointHandler
.2ce6	aa		tax				tax
.2ce7	a9 00		lda #$00			lda 	#0 							; make type integer
.2ce9	95 48		sta $48,x			sta 	esType,x
.2ceb	60		rts				rts
.2cec					Mint32WordIndirect:
.2cec	a9 80		lda #$80	 		lda 	#$80 				 		; word reference type (bit 7 set)
.2cee	d0 02		bne $2cf2			bne 	Min32Indirect
.2cf0					Mint32ByteIndirect:
.2cf0	a9 a0		lda #$a0			lda 	#$A0 						; byte reference type (bit 7, bit 5 set)
.2cf2					Min32Indirect:
.2cf2	48		pha				pha 								; save the indirection
.2cf3	20 fd 34	jsr $34fd			jsr 	MInt32Add 					; add a!b a?b
.2cf6	68		pla				pla 								; and set the type to reference.
.2cf7	95 48		sta $48,x			sta 	esType,x 	 				; so a!b => a+b and it's a reference....
.2cf9	60		rts				rts
.2cfa					Mint32ShiftLeftX:
.2cfa	18		clc				clc 								; CC shift left
.2cfb	90 01		bcc $2cfe			bcc 	Mint32Shift
.2cfd					Mint32ShiftRightX:
.2cfd	38		sec				sec 								; CS shift right
.2cfe					Mint32Shift:
.2cfe	08		php				php 								; save carry flag on stack.
.2cff	b5 59		lda $59,x			lda 	esInt1+1,x 					; if shift >= 32 then it is zero.
.2d01	15 61		ora $61,x			ora 	esInt2+1,x
.2d03	15 69		ora $69,x			ora 	esInt3+1,x
.2d05	d0 1e		bne $2d25			bne 	_MShiftZero
.2d07	b5 51		lda $51,x			lda 	esInt0+1,x
.2d09	c9 20		cmp #$20			cmp 	#32
.2d0b	b0 18		bcs $2d25			bcs 	_MShiftZero
.2d0d					_MShiftLoop:
.2d0d	b5 51		lda $51,x			lda 	esInt0+1,x 					; check count is zero
.2d0f	f0 12		beq $2d23			beq 	_MShiftExit
.2d11	d6 51		dec $51,x			dec 	esInt0+1,x
.2d13	28		plp				plp 								; restore and save carry
.2d14	08		php				php
.2d15	90 06		bcc $2d1d			bcc 	_MShiftLeft 				; and shift left/right accordingly.
.2d17	20 37 36	jsr $3637			jsr 	Mint32ShiftRight
.2d1a	4c 0d 2d	jmp $2d0d			jmp 	_MShiftLoop
.2d1d					_MShiftLeft:
.2d1d	20 2e 36	jsr $362e			jsr 	Mint32ShiftLeft
.2d20	4c 0d 2d	jmp $2d0d			jmp 	_MShiftLoop
.2d23					_MShiftExit:
.2d23	28		plp				plp	 								; throw saved carry and exit
.2d24	60		rts				rts
.2d25					_MShiftZero:
.2d25	4c 19 36	jmp $3619			jmp 	MInt32False 				; return 0 as shifted >= 32 times.

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/binary/compare.asm

.2d28					PerformComparison:
.2d28	20 a2 2d	jsr $2da2			jsr 	DereferenceTwo 				; make both values.
.2d2b	b5 48		lda $48,x			lda 	esType,x 					; check for two strings.
.2d2d	35 49		and $49,x			and 	esType+1,x
.2d2f	0a		asl a				asl 	a 							; bit 7 set if both bit 6s were set.
.2d30	30 1d		bmi $2d4f			bmi 	_PCIsString
.2d32	b5 48		lda $48,x			lda 	esType,x 					; check either is floating point.
.2d34	15 49		ora $49,x			ora 	esType+1,x
.2d36	0a		asl a				asl 	a 							; shift bit 6 (string) to bit 7, mixed types
.2d37	30 22		bmi $2d5b			bmi 	_PCError
.2d39	29 02		and #$02			and 	#$02 						; because of ASL, check type in bit 0
.2d3b	f0 0f		beq $2d4c			beq 	_PCIsInteger 				; if not two integers, e.g. 1 of the bits is set
.2d3d	20 bf 2b	jsr $2bbf			jsr 	BPMakeBothFloat 			; make both float
.2d40	8a		txa				txa
.2d41	a2 06		ldx #$06		ldx	#6
.2d43	20 81 1e	jsr $1e81		jsr	floatingpointHandler
.2d46	86 32		stx $32				stx 	tempShort 					; save result
.2d48	aa		tax				tax
.2d49	a5 32		lda $32				lda 	tempShort
.2d4b	60		rts				rts
.2d4c					_PCIsInteger:
.2d4c	4c b9 33	jmp $33b9			jmp 	MInt32Compare
.2d4f					_PCIsString:
.2d4f	8a		txa				txa 								; A has SP
.2d50	a2 0a		ldx #$0a		ldx	#10
.2d52	20 c4 39	jsr $39c4		jsr	stringHandler
.2d55	86 32		stx $32				stx 	tempShort 					; save result
.2d57	aa		tax				tax 								; put SP back in X and get result.
.2d58	a5 32		lda $32				lda 	tempShort
.2d5a	60		rts				rts
.2d5b					_PCError:
.2d5b	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.2d5d	20 18 15	jsr $1518		jsr	errorHandler
.2d60					CompareEquals:
.2d60	20 28 2d	jsr $2d28			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.2d63	c9 00		cmp #$00			cmp 	#$00 						; and we do something if it is = or <> a value.
.2d65	f0 35		beq $2d9c			beq  	CompareTrue
.2d67	4c 9f 2d	jmp $2d9f			jmp 	CompareFalse
.2d6a					CompareLess:
.2d6a	20 28 2d	jsr $2d28			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.2d6d	c9 ff		cmp #$ff			cmp 	#$FF 						; and we do something if it is = or <> a value.
.2d6f	f0 2b		beq $2d9c			beq  	CompareTrue
.2d71	4c 9f 2d	jmp $2d9f			jmp 	CompareFalse
.2d74					CompareGreater:
.2d74	20 28 2d	jsr $2d28			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.2d77	c9 01		cmp #$01			cmp 	#$01 						; and we do something if it is = or <> a value.
.2d79	f0 21		beq $2d9c			beq  	CompareTrue
.2d7b	4c 9f 2d	jmp $2d9f			jmp 	CompareFalse
.2d7e					CompareNotEquals:
.2d7e	20 28 2d	jsr $2d28			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.2d81	c9 00		cmp #$00			cmp 	#$00 						; and we do something if it is = or <> a value.
.2d83	d0 17		bne $2d9c			bne  	CompareTrue
.2d85	4c 9f 2d	jmp $2d9f			jmp 	CompareFalse
.2d88					CompareGreaterEq:
.2d88	20 28 2d	jsr $2d28			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.2d8b	c9 ff		cmp #$ff			cmp 	#$FF 						; and we do something if it is = or <> a value.
.2d8d	d0 0d		bne $2d9c			bne  	CompareTrue
.2d8f	4c 9f 2d	jmp $2d9f			jmp 	CompareFalse
.2d92					CompareLessEq:
.2d92	20 28 2d	jsr $2d28			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.2d95	c9 01		cmp #$01			cmp 	#$01 						; and we do something if it is = or <> a value.
.2d97	d0 03		bne $2d9c			bne  	CompareTrue
.2d99	4c 9f 2d	jmp $2d9f			jmp 	CompareFalse
.2d9c					CompareTrue:
.2d9c	4c 15 36	jmp $3615			jmp 	MInt32True
.2d9f					CompareFalse:
.2d9f	4c 19 36	jmp $3619			jmp 	MInt32False

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/dereference.asm

.2da2					DereferenceTwo:
.2da2	e8		inx				inx
.2da3	20 a7 2d	jsr $2da7			jsr 	DereferenceOne
.2da6	ca		dex				dex
.2da7					DereferenceOne:
.2da7	b5 48		lda $48,x			lda 	esType,x
.2da9	10 3d		bpl $2de8			bpl 	_DRNotReference 			; is it a reference ? if not, we don't need to do anything
.2dab	4a		lsr a				lsr 	a 							; do float dereference if bit 0 set.
.2dac	b0 3b		bcs $2de9			bcs 	_DRFloatDeReference
.2dae	98		tya				tya
.2daf	48		pha				pha
.2db0	b5 50		lda $50,x			lda 	esInt0,x 					; copy address to temp0
.2db2	85 2a		sta $2a				sta 	temp0
.2db4	b5 58		lda $58,x			lda 	esInt1,x
.2db6	85 2b		sta $2b				sta 	temp0+1
.2db8	a9 00		lda #$00			lda 	#0 							; clear esInt1..3
.2dba	95 58		sta $58,x			sta 	esInt1,x
.2dbc	95 60		sta $60,x			sta 	esInt2,x
.2dbe	95 68		sta $68,x			sta 	esInt3,x
.2dc0	b5 48		lda $48,x			lda 	esType,x 					; get the type byte.
.2dc2	29 60		and #$60			and 	#$60 						; get string flag ($40) and byte flag ($20)
.2dc4	0a		asl a				asl 	a 							; now string ($80) byte ($40)
.2dc5	30 0d		bmi $2dd4			bmi 	_DeRefString 				; string, 2 bytes only
.2dc7	d0 11		bne $2dda			bne 	_DeRefByte 					; byte 1 byte only
.2dc9					_DeRefLong:
.2dc9	a0 03		ldy #$03			ldy 	#3
.2dcb	b1 2a		lda ($2a),y			lda 	(temp0),y
.2dcd	95 68		sta $68,x			sta 	esInt3,x
.2dcf	88		dey				dey
.2dd0	b1 2a		lda ($2a),y			lda 	(temp0),y
.2dd2	95 60		sta $60,x			sta 	esInt2,x
.2dd4					_DeRefString:
.2dd4	a0 01		ldy #$01			ldy 	#1
.2dd6	b1 2a		lda ($2a),y			lda 	(temp0),y
.2dd8	95 58		sta $58,x			sta 	esInt1,x
.2dda					_DeRefByte:
.2dda	a0 00		ldy #$00			ldy 	#0
.2ddc	b1 2a		lda ($2a),y			lda 	(temp0),y
.2dde	95 50		sta $50,x			sta 	esInt0,x
.2de0	b5 48		lda $48,x			lda 	esType,x 					; clear byte and deref bits.
.2de2	29 40		and #$40			and 	#$40
.2de4	95 48		sta $48,x			sta 	esType,x
.2de6	68		pla				pla
.2de7	a8		tay				tay
.2de8					_DRNotReference
.2de8	60		rts				rts
.2de9					_DRFloatDereference:
.2de9	20 73 23	jsr $2373			jsr 	TOSToTemp0 					; address to deref in temp0
.2dec	8a		txa				txa
.2ded	a2 1e		ldx #$1e		ldx	#30
.2def	20 81 1e	jsr $1e81		jsr	floatingpointHandler
.2df2	aa		tax				tax
.2df3	a9 01		lda #$01			lda 	#$01 						; type to FP (float)
.2df5	95 48		sta $48,x			sta 	esType,x
.2df7	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/evaluate.asm

.2df8					EvaluateLevel:
.2df8	e0 08		cpx #$08			cpx 	#StackSize 					; check stack overflow
.2dfa	b0 1e		bcs $2e1a			bcs 	_ELStack
.2dfc	48		pha				pha 								; save precedence level.
.2dfd	a9 00		lda #$00			lda 	#0 							; zero the current stack level.
.2dff	95 50		sta $50,x			sta 	esInt0,x
.2e01	95 58		sta $58,x			sta 	esInt1,x
.2e03	95 60		sta $60,x			sta 	esInt2,x
.2e05	95 68		sta $68,x			sta 	esInt3,x
.2e07	95 48		sta $48,x			sta 	esType,x 					; zero the type (integer value)
.2e09	b1 28		lda ($28),y			lda 	(codePtr),y	 				; look at first token/character
.2e0b	30 26		bmi $2e33			bmi 	_ELIsToken 					; if -ve could be string, float, or unary function.
.2e0d	0a		asl a				asl 	a 							; if 00-3F then will now be PL and it's a variable.
.2e0e	30 0f		bmi $2e1f			bmi 	_ELIsConstant 				; 40-7F will be -ve and that's an integer constant.
.2e10	8a		txa				txa 								; stack level in X
.2e11	a2 02		ldx #$02		ldx	#2
.2e13	20 e9 45	jsr $45e9		jsr	variableHandler
.2e16	aa		tax				tax
.2e17	4c 5c 2e	jmp $2e5c			jmp		_ELHasTerm
.2e1a					_ELStack:
.2e1a	a2 23		ldx #$23			ldx 	#ErrorID_NumStack
.2e1c	20 18 15	jsr $1518		jsr	errorHandler
.2e1f					_ELIsConstant:
.2e1f	4a		lsr a				lsr 	a 							; get the value back
.2e20	29 3f		and #$3f			and 	#$3F 						; force into range 0-63
.2e22	95 50		sta $50,x			sta 	esInt0,x 					; and put in LSB.
.2e24					_ELCheckNext:
.2e24	c8		iny				iny 								; look at next
.2e25	b1 28		lda ($28),y			lda 	(codePtr),y
.2e27	49 40		eor #$40			eor 	#$40 						; shift around so 40-7F => 00-3F
.2e29	c9 40		cmp #$40			cmp 	#$40 						; out of range ?
.2e2b	b0 2f		bcs $2e5c			bcs 	_ELHasTerm 					; done getting the constant.
.2e2d	20 f5 2e	jsr $2ef5			jsr 	ELShiftByteIn 				; shift byte into position.
.2e30	4c 24 2e	jmp $2e24			jmp 	_ELCheckNext
.2e33					_ELIsToken:
.2e33	c9 85		cmp #$85			cmp 	#TOK_STR 					; handle strings.
.2e35	f0 0f		beq $2e46			beq 	_ELIsString
.2e37	c9 84		cmp #$84			cmp 	#TOK_FPC 					; if no, then check unary.
.2e39	d0 5f		bne $2e9a			bne 	_ELCheckUnary
.2e3b	8a		txa				txa 								; put X into A
.2e3c	c8		iny				iny 								; skip over the float marker
.2e3d	a2 1a		ldx #$1a		ldx	#26
.2e3f	20 81 1e	jsr $1e81		jsr	floatingpointHandler
.2e42	aa		tax				tax 								; restore X
.2e43	4c 5c 2e	jmp $2e5c			jmp 	_ELHasTerm
.2e46					_ELIsString:
.2e46	98		tya				tya 								; address of string is codePtr+y+1
.2e47	38		sec				sec
.2e48	65 28		adc $28				adc 	codePtr
.2e4a	95 50		sta $50,x			sta 	esInt0,x
.2e4c	a5 29		lda $29				lda 	codePtr+1
.2e4e	69 00		adc #$00			adc 	#0
.2e50	95 58		sta $58,x			sta 	esInt1,x
.2e52	a9 40		lda #$40			lda 	#$40 						; set type to string value
.2e54	95 48		sta $48,x			sta 	esType,x
.2e56	c8		iny				iny 								; skip over string.
.2e57	98		tya				tya
.2e58	38		sec				sec									; +1 for the length itself.
.2e59	71 28		adc ($28),y			adc 	(codePtr),y
.2e5b	a8		tay				tay 								; and fall through to term loop code.
.2e5c					_ELHasTerm:
.2e5c	b1 28		lda ($28),y			lda 	(codePtr),y
.2e5e	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; check in the correct range for binary tokens.
.2e60	90 04		bcc $2e66			bcc 	_ELPopExit
.2e62	c9 99		cmp #$99			cmp 	#TOK_STRUCTST
.2e64	90 02		bcc $2e68			bcc 	_ELHasBinaryTerm
.2e66					_ELPopExit:
.2e66	68		pla				pla
.2e67					_ELExit:
.2e67	60		rts				rts
.2e68					_ELHasBinaryTerm:
.2e68	84 32		sty $32				sty 	tempShort 					; save position
.2e6a	a8		tay				tay 								; use token as an index and get the precedence.
.2e6b	b9 9d 2e	lda $2e9d,y			lda 	ELBinaryOperatorInfo-TOK_BINARYST,y
.2e6e	a4 32		ldy $32				ldy 	tempShort 					; restore Y
.2e70	85 32		sta $32				sta 	tempShort 					; save precedence in memory.
.2e72	68		pla				pla 								; restore current level.
.2e73	c5 32		cmp $32				cmp 	tempShort 					; if current >= operator then exit
.2e75	b0 f0		bcs $2e67			bcs 	_ELExit
.2e77	48		pha				pha 								; save current level back on the stack.
.2e78	b1 28		lda ($28),y			lda 	(codePtr),y 				; save the binary operator on the stack and skip it.
.2e7a	48		pha				pha
.2e7b	c8		iny				iny
.2e7c	e8		inx				inx 								; calculate the RHS at the operator precedence.
.2e7d	a5 32		lda $32				lda 	tempShort
.2e7f	20 f8 2d	jsr $2df8			jsr 	EvaluateLevel
.2e82	ca		dex				dex
.2e83	68		pla				pla 								; get the operator back out.
.2e84					_ELExecuteA:
.2e84	86 32		stx $32				stx 	tempShort 					; upload the vectors. Would be nice to use jmp (aaaa,x)
.2e86	0a		asl a				asl 	a 							; but not practical. May use push/rts later.
.2e87	aa		tax				tax
.2e88	bd b9 2a	lda $2ab9,x			lda 	Group0Vectors,x
.2e8b	85 2a		sta $2a				sta 	temp0
.2e8d	bd ba 2a	lda $2aba,x			lda 	Group0Vectors+1,x
.2e90	85 2b		sta $2b				sta 	temp0+1
.2e92	a6 32		ldx $32				ldx 	tempShort
.2e94	20 e1 2e	jsr $2ee1			jsr 	_ELCallTemp0
.2e97	4c 5c 2e	jmp $2e5c			jmp 	_ELHasTerm 					; and loop back round.
.2e9a					_ELCheckUnary:
.2e9a	c8		iny				iny 								; skip over token.
.2e9b	c9 90		cmp #$90			cmp 	#TKW_MINUS 					; is it - term
.2e9d	f0 19		beq $2eb8			beq 	_ELMinus
.2e9f	c9 97		cmp #$97			cmp 	#TKW_PLING 					; is it ! or ? term
.2ea1	f0 2c		beq $2ecf			beq 	_ELIndirect
.2ea3	c9 98		cmp #$98			cmp 	#TKW_QMARK
.2ea5	f0 28		beq $2ecf			beq 	_ELIndirect
.2ea7	c9 83		cmp #$83			cmp 	#TOK_SHIFT3 				; is it the unary extension.
.2ea9	f0 39		beq $2ee4			beq 	_ELExtension
.2eab	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST 				; must be TOK_UNARYST ... TOK_TOKENS
.2ead	90 04		bcc $2eb3			bcc 	_ELUSyntax
.2eaf	c9 c9		cmp #$c9			cmp 	#TOK_TOKENS
.2eb1	90 d1		bcc $2e84			bcc 	_ELExecuteA 				; if so do that token.
.2eb3					_ELUSyntax:
.2eb3	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.2eb5	20 18 15	jsr $1518		jsr	errorHandler
.2eb8					_ELMinus:
.2eb8	20 4a 2f	jsr $2f4a			jsr 	EvaluateNumericTerm 		; get a number to negate.
.2ebb	b5 48		lda $48,x			lda 	esType,x 					; is it integer
.2ebd	f0 0a		beq $2ec9			beq 	_ELMinusInteger
.2ebf	8a		txa				txa
.2ec0	a2 0e		ldx #$0e		ldx	#14
.2ec2	20 81 1e	jsr $1e81		jsr	floatingpointHandler
.2ec5	aa		tax				tax
.2ec6	4c 5c 2e	jmp $2e5c			jmp 	_ELHasTerm
.2ec9					_ELMinusInteger:
.2ec9	20 d3 35	jsr $35d3			jsr 	MInt32Negate 				; do int negate
.2ecc	4c 5c 2e	jmp $2e5c			jmp 	_ELHasTerm
.2ecf					_ELIndirect:
.2ecf	48		pha				pha 								; save what we want (TKW_QMARK TWK_PLING)
.2ed0	20 53 2f	jsr $2f53			jsr 	EvaluateIntegerTerm 		; integer address
.2ed3	68		pla				pla
.2ed4	49 97		eor #$97			eor 	#TKW_PLING 					; now $00 if !
.2ed6	f0 02		beq $2eda			beq 	_ELHaveModifier
.2ed8	a9 20		lda #$20			lda 	#$20 						; now $00 if !, $20 if ?
.2eda					_ELHaveModifier:
.2eda	09 80		ora #$80			ora 	#$80						; make it the appropriate reference.
.2edc	95 48		sta $48,x			sta 	esType,x 					; $80 for ! $A0 for ?
.2ede	4c 5c 2e	jmp $2e5c			jmp 	_ELHasTerm
.2ee1					_ELCallTemp0:
.2ee1	6c 2a 00	jmp ($002a)			jmp 	(temp0)
.2ee4					_ELExtension:
.2ee4	8a		txa				txa 								; stack pos in A
.2ee5	20 69 18	jsr $1869		jsr	extensionHandler
.2ee8	aa		tax				tax 								; restore stack
.2ee9	4c 5c 2e	jmp $2e5c			jmp 	_ELHasTerm
.2eec					UnaryParenthesis:
.2eec	a9 00		lda #$00			lda 	#0 							; ( is a unary function ....
.2eee	20 f8 2d	jsr $2df8			jsr 	EvaluateLevel
.2ef1	20 8c 36	jsr $368c			jsr 	CheckRightParen 			; check for )
.2ef4	60		rts				rts
.2ef5					ELShiftByteIn:
.2ef5	48		pha				pha 								; save bits to shift in.
.2ef6	b5 68		lda $68,x			lda 	esInt3,x 					; save top most byte
.2ef8	48		pha				pha
.2ef9	b5 60		lda $60,x			lda 	esInt2,x 					; shift everything left 8 bits
.2efb	95 68		sta $68,x			sta 	esInt3,x
.2efd	b5 58		lda $58,x			lda 	esInt1,x
.2eff	95 60		sta $60,x			sta 	esInt2,x
.2f01	b5 50		lda $50,x			lda 	esInt0,x
.2f03	95 58		sta $58,x			sta 	esInt1,x
.2f05	a9 00		lda #$00			lda 	#0
.2f07	95 50		sta $50,x			sta 	esInt0,x
.2f09	68		pla				pla 								; now A:TOS is a 5 byte register, shift right twice.
.2f0a	29 03		and #$03			and 	#3 							; only want lower 2 bits
.2f0c	09 04		ora #$04			ora 	#4  						; set bit 2 - when 1 we are done
.2f0e					_ELShiftLoop:
.2f0e	4a		lsr a				lsr 	a
.2f0f	76 68		ror $68,x			ror 	esInt3,x
.2f11	76 60		ror $60,x			ror 	esInt2,x
.2f13	76 58		ror $58,x			ror 	esInt1,x
.2f15	76 50		ror $50,x			ror 	esInt0,x
.2f17	c9 01		cmp #$01			cmp 	#1
.2f19	d0 f3		bne $2f0e			bne 	_ELShiftLoop
.2f1b	68		pla				pla 								; get original 6 bit value and OR in.
.2f1c	29 3f		and #$3f			and 	#$3F
.2f1e	15 50		ora $50,x			ora 	esInt0,x
.2f20	95 50		sta $50,x			sta 	esInt0,x
.2f22	60		rts				rts
.2f23					ELBinaryOperatorInfo:

;******  Processing file: main/evaluate/../../generated/binarystructinfo.inc

>2f23	01					.byte	$01			; $86 and
>2f24	01					.byte	$01			; $87 or
>2f25	01					.byte	$01			; $88 xor
>2f26	02					.byte	$02			; $89 >=
>2f27	02					.byte	$02			; $8a <=
>2f28	02					.byte	$02			; $8b >
>2f29	02					.byte	$02			; $8c <
>2f2a	02					.byte	$02			; $8d =
>2f2b	02					.byte	$02			; $8e <>
>2f2c	03					.byte	$03			; $8f +
>2f2d	03					.byte	$03			; $90 -
>2f2e	04					.byte	$04			; $91 >>
>2f2f	04					.byte	$04			; $92 <<
>2f30	04					.byte	$04			; $93 *
>2f31	04					.byte	$04			; $94 /
>2f32	04					.byte	$04			; $95 mod
>2f33	05					.byte	$05			; $96 ^
>2f34	06					.byte	$06			; $97 !
>2f35	06					.byte	$06			; $98 ?
>2f36	82					.byte	$82			; $99 repeat
>2f37	82					.byte	$82			; $9a while
>2f38	82					.byte	$82			; $9b for
>2f39	82					.byte	$82			; $9c if
>2f3a	82					.byte	$82			; $9d defproc
>2f3b	80					.byte	$80			; $9e until
>2f3c	80					.byte	$80			; $9f wend
>2f3d	80					.byte	$80			; $a0 next
>2f3e	80					.byte	$80			; $a1 then
>2f3f	80					.byte	$80			; $a2 endif
>2f40	80					.byte	$80			; $a3 endproc

;******  Return to file: main/evaluate/evaluate.asm


;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/support.asm

.2f41					EvaluateTerm:
.2f41	a9 0f		lda #$0f			lda 	#15 						; no binary operator has this high a precedence.
.2f43	20 f8 2d	jsr $2df8			jsr 	EvaluateLevel
.2f46	20 a7 2d	jsr $2da7			jsr 	DereferenceOne
.2f49	60		rts				rts
.2f4a					EvaluateNumericTerm:
.2f4a	20 41 2f	jsr $2f41			jsr 	EvaluateTerm
.2f4d	b5 48		lda $48,x			lda 	esType,x
.2f4f	0a		asl a				asl 	a 							; see if it's a string.
.2f50	30 09		bmi $2f5b			bmi 	ENTType
.2f52	60		rts				rts
.2f53					EvaluateIntegerTerm:
.2f53	20 41 2f	jsr $2f41			jsr 	EvaluateTerm
.2f56	b5 48		lda $48,x			lda 	esType,x
.2f58	d0 01		bne $2f5b			bne 	ENTType
.2f5a	60		rts				rts
.2f5b					ENTType:
.2f5b	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.2f5d	20 18 15	jsr $1518		jsr	errorHandler
.2f60					EvaluateRoot:
.2f60	a2 00		ldx #$00			ldx 	#0
.2f62					Evaluate:
.2f62	a9 00		lda #$00			lda 	#0
.2f64	20 f8 2d	jsr $2df8			jsr 	EvaluateLevel
.2f67	20 a7 2d	jsr $2da7			jsr 	DereferenceOne
.2f6a	60		rts				rts
.2f6b					EvaluateNumeric:
.2f6b	20 62 2f	jsr $2f62			jsr 	Evaluate
.2f6e	b5 48		lda $48,x			lda 	esType,x
.2f70	0a		asl a				asl 	a 							; see if it's a string.
.2f71	30 e8		bmi $2f5b			bmi 	ENTType
.2f73	4a		lsr a				lsr 	a 							; shift float flag into carry.
.2f74	4a		lsr a				lsr 	a
.2f75	60		rts				rts
.2f76					EvaluateString:
.2f76	20 62 2f	jsr $2f62			jsr 	Evaluate
.2f79	b5 48		lda $48,x			lda 	esType,x
.2f7b	0a		asl a				asl 	a 							; see if it's a string.
.2f7c	10 dd		bpl $2f5b			bpl 	ENTType
.2f7e	60		rts				rts
.2f7f					EvaluateRootInteger:
.2f7f	a2 00		ldx #$00			ldx 	#0
.2f81					EvaluateInteger:
.2f81	20 62 2f	jsr $2f62			jsr 	Evaluate
.2f84	b5 48		lda $48,x			lda 	esType,x
.2f86	d0 d3		bne $2f5b			bne 	ENTType
.2f88	60		rts				rts
.2f89					EvaluateSmallInteger:
.2f89	20 81 2f	jsr $2f81			jsr 	EvaluateInteger
.2f8c	b5 58		lda $58,x			lda 	esInt1,x
.2f8e	15 60		ora $60,x			ora 	esInt2,x
.2f90	15 68		ora $68,x			ora 	esInt3,x
.2f92	d0 03		bne $2f97			bne 	_ESIValue
.2f94	b5 50		lda $50,x			lda 	esInt0,x
.2f96	60		rts				rts
.2f97					_ESIValue:
.2f97	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.2f99	20 18 15	jsr $1518		jsr	errorHandler
.2f9c					LinkEvaluate:
.2f9c	aa		tax				tax
.2f9d	20 62 2f	jsr $2f62			jsr 	Evaluate
.2fa0	8a		txa				txa
.2fa1	60		rts				rts
.2fa2					LinkEvaluateTerm:
.2fa2	aa		tax				tax
.2fa3	20 41 2f	jsr $2f41			jsr 	EvaluateTerm
.2fa6	8a		txa				txa
.2fa7	60		rts				rts
.2fa8					LinkEvaluateInteger:
.2fa8	aa		tax				tax
.2fa9	20 81 2f	jsr $2f81			jsr 	EvaluateInteger
.2fac	8a		txa				txa
.2fad	60		rts				rts
.2fae					LinkEvaluateString:
.2fae	aa		tax				tax
.2faf	20 76 2f	jsr $2f76			jsr 	EvaluateString
.2fb2	8a		txa				txa
.2fb3	60		rts				rts
.2fb4					LinkEvaluateSmallInt:
.2fb4	aa		tax				tax
.2fb5	20 89 2f	jsr $2f89			jsr 	EvaluateSmallInteger
.2fb8	8a		txa				txa
.2fb9	60		rts				rts
.2fba					EvaluateReference:
.2fba	ad 34 2f	lda $2f34			lda 	ELBinaryOperatorInfo+TKW_PLING-TOK_BINARYST
.2fbd	38		sec				sec 								; sub 1 to allow a!x b?x to work.
.2fbe	e9 01		sbc #$01			sbc 	#1
.2fc0	20 f8 2d	jsr $2df8			jsr 	EvaluateLevel
.2fc3	b5 48		lda $48,x			lda 	esType,x
.2fc5	10 01		bpl $2fc8			bpl 	_ERFail
.2fc7	60		rts				rts
.2fc8					_ERFail:
.2fc8	a2 0b		ldx #$0b			ldx 	#ErrorID_NoReference
.2fca	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary/convert.asm

.2fcd					Event_Str:
.2fcd	20 6b 2f	jsr $2f6b			jsr 	EvaluateNumeric 			; get a number.
.2fd0	b5 48		lda $48,x			lda 	esType,x 					; is it floating point
.2fd2	d0 13		bne $2fe7			bne 	_ESFloat
.2fd4	20 2a 30	jsr $302a			jsr 	ConvertGetBase 				; get base, or default.
.2fd7	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.2fd9	85 2a		sta $2a				sta 	temp0
.2fdb	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.2fdd	85 2b		sta $2b				sta 	1+(temp0)
.2fdf	b5 51		lda $51,x			lda 	esInt0+1,x 					; get the base
.2fe1	20 6f 35	jsr $356f			jsr 	MInt32ToString 				; convert to string.
.2fe4	4c f4 2f	jmp $2ff4			jmp 	_ESCloneExit 				; clone and exit.
.2fe7					_ESFloat:
.2fe7	20 8c 36	jsr $368c			jsr 	CheckRightParen 			; check closing )
.2fea	20 73 23	jsr $2373			jsr 	TOSToTemp0 					; string address in temp0, goes here.
.2fed	8a		txa				txa
.2fee	a2 16		ldx #$16		ldx	#22
.2ff0	20 81 1e	jsr $1e81		jsr	floatingpointHandler
.2ff3	aa		tax				tax
.2ff4					_ESCloneExit:
.2ff4	8a		txa				txa
.2ff5	a2 04		ldx #$04		ldx	#4
.2ff7	20 c4 39	jsr $39c4		jsr	stringHandler
.2ffa	aa		tax				tax
.2ffb	60		rts				rts
.2ffc					UnaryVal:
.2ffc	38		sec				sec 								; Carry set to return value
.2ffd	b0 01		bcs $3000			bcs 	ValueMain
.2fff					UnaryIsVal:
.2fff	18		clc				clc									; Carry clear to return legitimacy
.3000					ValueMain:
.3000	08		php				php 								; save results (CS is value, CC is validation)
.3001	20 76 2f	jsr $2f76			jsr 	EvaluateString
.3004	20 2a 30	jsr $302a			jsr 	ConvertGetBase 				; get base, if any.
.3007	98		tya				tya
.3008	48		pha				pha
.3009	20 73 23	jsr $2373			jsr 	TOSToTemp0 					; string address in temp0, goes here.
.300c	b5 51		lda $51,x			lda 	esInt0+1,x 					; get the base
.300e	29 7f		and #$7f			and 	#$7F 						; ignore the sign bit.
.3010	20 87 34	jsr $3487			jsr 	MInt32FromString 			; convert it back from a string.
.3013	b0 0c		bcs $3021			bcs 	_VMSuccess 					; successfully converted.
.3015	b5 51		lda $51,x			lda 	esInt0+1,x 					; is base the default
.3017	c9 8a		cmp #$8a			cmp 	#$80+10 					; if no, then it is integer only.
.3019	f0 00		beq $301b			beq 	_VMFailed 	 				; so we failed.
.301b					_VMFailed:
.301b	68		pla				pla
.301c	a8		tay				tay
.301d	28		plp				plp
.301e	4c 19 36	jmp $3619			jmp 	MInt32False 				; return 0 whatever.
.3021					_VMSuccess:
.3021	68		pla				pla
.3022	a8		tay				tay
.3023	28		plp				plp 								; if CS the it was val() so we want the value.
.3024	b0 03		bcs $3029			bcs 	_VMExit
.3026	4c 15 36	jmp $3615			jmp 	MInt32True 					; otherwise return true as successful.
.3029					_VMExit:
.3029	60		rts				rts
.302a					ConvertGetBase:
.302a	a9 8a		lda #$8a			lda 	#10+$80 					; default base 10 signed.
.302c	95 51		sta $51,x			sta 	esInt0+1,x
.302e	b1 28		lda ($28),y			lda 	(codePtr),y 				; check for ,base)
.3030	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.3032	d0 0e		bne $3042			bne 	_CGBDone 					; not found, should be )
.3034	e8		inx				inx 								; next level
.3035	c8		iny				iny 								; skip comma.
.3036	20 89 2f	jsr $2f89			jsr 	EvaluateSmallInteger		; evaluate the base.
.3039	ca		dex				dex
.303a	c9 02		cmp #$02			cmp 	#2 							; base range is 2..16
.303c	90 08		bcc $3046			bcc 	_CGBValue 					; (it should work as high as 37)
.303e	c9 11		cmp #$11			cmp 	#17
.3040	b0 04		bcs $3046			bcs 	_CGBValue
.3042					_CGBDone:
.3042	20 8c 36	jsr $368c			jsr 	CheckRightParen
.3045	60		rts				rts
.3046					_CGBValue:
.3046	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.3048	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary/event.asm

.304b					EventFunction:
.304b	20 ba 2f	jsr $2fba			jsr 	EvaluateReference			; get the variable reference that tracks the event
.304e	b5 48		lda $48,x			lda 	esType,x
.3050	c9 80		cmp #$80			cmp 	#$80 						; must be integer reference
.3052	d0 5b		bne $30af			bne 	_EFType
.3054	20 99 36	jsr $3699			jsr 	CheckComma
.3057	e8		inx				inx
.3058	20 81 2f	jsr $2f81			jsr 	EvaluateInteger		 		; get the elapsed time between firing.
.305b	20 8c 36	jsr $368c			jsr 	CheckRightParen 			; finish off with the right bracket
.305e	ca		dex				dex
.305f	b5 58		lda $58,x			lda 	esInt1,x 					; check max of 32767, we use 16 bit for timers and
.3061	29 80		and #$80			and 	#$80 						; it doesn't work > 32767
.3063	15 60		ora $60,x			ora 	esInt2,x
.3065	15 68		ora $68,x			ora 	esInt3,x
.3067	d0 41		bne $30aa			bne 	_EFValue
.3069	98		tya				tya
.306a	48		pha				pha
.306b	8a		txa				txa
.306c	48		pha				pha
.306d	a2 1c		ldx #$1c		ldx	#28
.306f	20 f6 14	jsr $14f6		jsr	deviceHandler
.3072	84 2d		sty $2d				sty 	temp1+1
.3074	85 2c		sta $2c				sta 	temp1
.3076	68		pla				pla
.3077	aa		tax				tax
.3078	20 73 23	jsr $2373			jsr 	TOSToTemp0 					; set temp0 to the address of the event variable
.307b	a0 03		ldy #$03			ldy 	#3							; if -ve
.307d	b1 2a		lda ($2a),y			lda 	(temp0),y
.307f	30 23		bmi $30a4			bmi 	_EFFail 	 				; straight out with fail, means "on pause".
.3081	a0 00		ldy #$00			ldy 	#0 							; is the fire time zero ?
.3083	b1 2a		lda ($2a),y			lda 	(temp0),y
.3085	c8		iny				iny
.3086	11 2a		ora ($2a),y			ora 	(temp0),y
.3088	f0 17		beq $30a1			beq 	_EFInitialise 				; if so, initialise the value but return false.
.308a	a0 00		ldy #$00			ldy 	#0 							; calculate trigger - timer
.308c	38		sec				sec
.308d	b1 2a		lda ($2a),y			lda 	(temp0),y
.308f	e5 2c		sbc $2c				sbc 	temp1
.3091	c8		iny				iny
.3092	b1 2a		lda ($2a),y			lda 	(temp0),y
.3094	e5 2d		sbc $2d				sbc 	temp1+1
.3096	10 0c		bpl $30a4			bpl 	_EFFail 					; if trigger >= timer then return False
.3098	20 b4 30	jsr $30b4			jsr 	SetEventTimer 				; reset the timer for next time.
.309b	20 15 36	jsr $3615			jsr	 	MInt32True 					; and treutn true as fired.
.309e	68		pla				pla
.309f	a8		tay				tay
.30a0	60		rts				rts
.30a1					_EFInitialise:
.30a1	20 b4 30	jsr $30b4			jsr		SetEventTimer 				; set trigger time to time + elapsed
.30a4					_EFFail:
.30a4	68		pla				pla
.30a5	a8		tay				tay
.30a6	20 19 36	jsr $3619			jsr 	MInt32False
.30a9	60		rts				rts
.30aa					_EFValue:
.30aa	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.30ac	20 18 15	jsr $1518		jsr	errorHandler
.30af					_EFType:
.30af	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.30b1	20 18 15	jsr $1518		jsr	errorHandler
.30b4					SetEventTimer:
.30b4	a0 00		ldy #$00			ldy 	#0
.30b6	18		clc				clc
.30b7	a5 2c		lda $2c				lda 	temp1
.30b9	75 51		adc $51,x			adc 	esInt0+1,x
.30bb	91 2a		sta ($2a),y			sta		(temp0),y
.30bd	c8		iny				iny
.30be	a5 2d		lda $2d				lda 	temp1+1
.30c0	75 59		adc $59,x			adc 	esInt1+1,x
.30c2	91 2a		sta ($2a),y			sta		(temp0),y
.30c4	88		dey				dey
.30c5	11 2a		ora ($2a),y			ora 	(temp0),y 					; if the result is non zero, exit
.30c7	d0 04		bne $30cd			bne 	_SETExit 					; zero means initialise.....
.30c9	a9 01		lda #$01			lda 	#1 							; timer zero won't work, so make it 1, which is
.30cb	91 2a		sta ($2a),y			sta 	(temp0),y 					; near enough.
.30cd					_SETExit:
.30cd	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary/unary.asm

.30ce					UnaryLen:
.30ce	20 dc 30	jsr $30dc			jsr 	ULStart
.30d1					ULFinish:
.30d1	b1 2a		lda ($2a),y			lda 	(temp0),y 					; get length prefix
.30d3	a4 32		ldy $32				ldy 	tempShort 					; get Y back
.30d5	20 28 36	jsr $3628			jsr 	MInt32Set8Bit 				; write it out.
.30d8	20 8c 36	jsr $368c			jsr 	CheckRightParen
.30db	60		rts				rts
.30dc	20 76 2f	jsr $2f76	ULStart:jsr 	EvaluateString
.30df	b5 50		lda $50,x			lda 	esInt0,x 					; copy address of string to temp0
.30e1	85 2a		sta $2a				sta 	temp0
.30e3	b5 58		lda $58,x			lda 	esInt1,x
.30e5	85 2b		sta $2b				sta 	temp0+1
.30e7	84 32		sty $32				sty 	tempShort 					; get length
.30e9	a0 00		ldy #$00			ldy 	#0
.30eb	60		rts				rts
.30ec					UnaryAsc:
.30ec	20 dc 30	jsr $30dc			jsr 	ULStart 					; same as LEN() get string, save Y, point to length.
.30ef	b1 2a		lda ($2a),y			lda 	(temp0),y 					; read length
.30f1	c8		iny				iny 		 						; point to first character, we can do LEN code after that
.30f2	c9 00		cmp #$00			cmp 	#0
.30f4	d0 db		bne $30d1			bne 	ULFinish 					; if length = 0 then error : asc("") -> error.
.30f6	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.30f8	20 18 15	jsr $1518		jsr	errorHandler
.30fb					UnaryAbs:
.30fb	20 6b 2f	jsr $2f6b			jsr 	EvaluateNumeric 			; some numeric value
.30fe	b0 07		bcs $3107			bcs 	_UAFloat 					; CS then float, so use that function
.3100	20 ce 35	jsr $35ce			jsr 	MInt32Absolute 				; int version
.3103	20 8c 36	jsr $368c			jsr 	CheckRightParen
.3106	60		rts				rts
.3107					_UAFloat:
.3107	8a		txa				txa 								; float version
.3108	a2 02		ldx #$02		ldx	#2
.310a	20 81 1e	jsr $1e81		jsr	floatingpointHandler
.310d	aa		tax				tax
.310e	20 8c 36	jsr $368c			jsr 	CheckRightParen
.3111	60		rts				rts
.3112					UnarySgn:
.3112	20 6b 2f	jsr $2f6b			jsr 	EvaluateNumeric 			; same as above but sign of value
.3115	b0 07		bcs $311e			bcs 	_USFloat
.3117	20 06 36	jsr $3606			jsr 	MInt32Sign
.311a	20 8c 36	jsr $368c			jsr 	CheckRightParen
.311d	60		rts				rts
.311e					_USFloat:
.311e	8a		txa				txa
.311f	a2 10		ldx #$10		ldx	#16
.3121	20 81 1e	jsr $1e81		jsr	floatingpointHandler
.3124	aa		tax				tax
.3125	20 8c 36	jsr $368c			jsr 	CheckRightParen
.3128	60		rts				rts
.3129					UnaryPeek:
.3129	20 55 31	jsr $3155			jsr 	PDLCode 					; each has common setup code put reads 1,2 or 4 bytes
.312c	4c 49 31	jmp $3149			jmp 	PDLByte0
.312f					UnaryDeek:
.312f	20 55 31	jsr $3155			jsr 	PDLCode
.3132	4c 43 31	jmp $3143			jmp 	PDLByte1
.3135					UnaryLeek:
.3135	20 55 31	jsr $3155			jsr 	PDLCode
.3138	a0 03		ldy #$03			ldy 	#3							; read 3-2
.313a	b1 2a		lda ($2a),y			lda 	(temp0),y
.313c	95 68		sta $68,x			sta 	esInt3,x
.313e	88		dey				dey
.313f	b1 2a		lda ($2a),y			lda 	(temp0),y
.3141	95 60		sta $60,x			sta 	esInt2,x
.3143					PDLByte1:
.3143	a0 01		ldy #$01			ldy 	#1
.3145	b1 2a		lda ($2a),y			lda 	(temp0),y
.3147	95 58		sta $58,x			sta 	esInt1,x
.3149					PDLByte0:
.3149	a0 00		ldy #$00			ldy 	#0
.314b	b1 2a		lda ($2a),y			lda 	(temp0),y
.314d	95 50		sta $50,x			sta 	esInt0,x
.314f	a4 32		ldy $32				ldy 	tempShort 					; restore Y
.3151	20 8c 36	jsr $368c			jsr 	CheckRightParen 			; check right and return
.3154	60		rts				rts
.3155					PDLCode:
.3155	20 81 2f	jsr $2f81			jsr 	EvaluateInteger 			; some address
.3158	b5 50		lda $50,x			lda 	esInt0,x 					; copy address of string to temp0
.315a	85 2a		sta $2a				sta 	temp0
.315c	b5 58		lda $58,x			lda 	esInt1,x
.315e	85 2b		sta $2b				sta 	temp0+1
.3160	a9 00		lda #$00			lda 	#0 							; zero upper 3 bytes of result, type okay.
.3162	95 58		sta $58,x			sta 	esInt1,x 					; PEEK needs upper 3 cleared
.3164	95 60		sta $60,x			sta 	esInt2,x
.3166	95 68		sta $68,x			sta 	esInt3,x
.3168	84 32		sty $32				sty 	tempShort 					; save Y
.316a	60		rts				rts
.316b					Unary_Random:
.316b	20 49 36	jsr $3649			jsr 	MInt32Random 				; generate random number.
.316e	b1 28		lda ($28),y			lda 	(codePtr),y 				; check followed by )
.3170	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.3172	f0 08		beq $317c			beq 	_URExit
.3174	e8		inx				inx 								; load range 0..r-1 into +1
.3175	20 81 2f	jsr $2f81			jsr 	EvaluateInteger
.3178	ca		dex				dex
.3179	20 6c 34	jsr $346c			jsr 	MInt32Modulus 				; calculate random % modulus
.317c					_URExit:
.317c	20 8c 36	jsr $368c			jsr 	CheckRightParen 			; check right and return
.317f	60		rts				rts
.3180					Unary_Min:
.3180	a9 01		lda #$01			lda 	#1 							; c1 cmp c2 needs to be > e.g. c1 > c2
.3182	d0 02		bne $3186			bne 	UnaryMBody
.3184					Unary_Max:
.3184	a9 ff		lda #$ff			lda 	#$FF 						; c1 cmp c2 needs to be < e.g. c1 < c2
.3186					UnaryMBody:
.3186	48		pha				pha 								; save comparator on stack, shows min or max
.3187	20 62 2f	jsr $2f62			jsr 	Evaluate 					; get the first thing to check
.318a					_UnaryMLoop:
.318a	b1 28		lda ($28),y			lda 	(codePtr),y 				; found ), indicates end.
.318c	c8		iny				iny
.318d	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.318f	f0 09		beq $319a			beq 	_UnaryMExit
.3191	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; found , indicates more.
.3193	f0 07		beq $319c			beq 	_UnaryMCompare
.3195	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.3197	20 18 15	jsr $1518		jsr	errorHandler
.319a					_UnaryMExit:
.319a	68		pla				pla 								; done so throw comparator and return.
.319b	60		rts				rts
.319c					_UnaryMCompare:
.319c	e8		inx				inx 								; get the 2nd thing to evaluate
.319d	20 62 2f	jsr $2f62			jsr 	Evaluate
.31a0	ca		dex				dex
.31a1	20 28 2d	jsr $2d28			jsr 	PerformComparison 			; this is part of evaluate/compare.asm
.31a4	85 32		sta $32				sta 	tempShort 					; save result
.31a6	68		pla				pla 								; get what we need
.31a7	48		pha				pha
.31a8	c5 32		cmp $32				cmp 	tempShort 					; did we get it
.31aa	d0 de		bne $318a			bne 	_UnaryMLoop 				; no, try another value.
.31ac	20 19 36	jsr $3619			jsr 	MInt32False 				; promote 2nd to 1st.
.31af	20 fd 34	jsr $34fd			jsr 	MInt32Add
.31b2	4c 8a 31	jmp $318a			jmp 	_UnaryMLoop
.31b5					Unary_Page:
.31b5	20 19 36	jsr $3619			jsr 	MInt32False 				; zero
.31b8	ad c8 0a	lda $0ac8			lda 	basePage 					; copy base page address in.
.31bb	95 50		sta $50,x			sta 	esInt0,x
.31bd	ad c9 0a	lda $0ac9			lda 	basePage+1
.31c0	95 58		sta $58,x			sta 	esInt1,x
.31c2	60		rts				rts
.31c3					UnaryReference:
.31c3	a9 0f		lda #$0f			lda 	#15
.31c5	20 f8 2d	jsr $2df8			jsr 	EvaluateLevel 				; evaluate term and don't deference.
.31c8	b5 48		lda $48,x			lda 	esType,x 					; check it's a reference.
.31ca	10 05		bpl $31d1			bpl 	UType
.31cc	a9 00		lda #$00			lda 	#0 							; make it an integer
.31ce	95 48		sta $48,x			sta 	esType,x
.31d0	60		rts				rts
.31d1					UType:
.31d1	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.31d3	20 18 15	jsr $1518		jsr	errorHandler
.31d6					UnaryHexMarker:
.31d6	4c 53 2f	jmp $2f53			jmp 	EvaluateIntegerTerm
.31d9					UnaryComplement:
.31d9	20 53 2f	jsr $2f53			jsr 	EvaluateIntegerTerm
.31dc	20 ed 35	jsr $35ed			jsr 	MInt32Not
.31df	60		rts				rts
.31e0					UnaryIntToFloat:
.31e0	20 6b 2f	jsr $2f6b			jsr 	EvaluateNumeric				; some number
.31e3	b5 48		lda $48,x			lda 	esType,x 					; if float already, exit
.31e5	d0 0b		bne $31f2			bne 	_UIFExit
.31e7	8a		txa				txa 								; convert and set type
.31e8	a2 1c		ldx #$1c		ldx	#28
.31ea	20 81 1e	jsr $1e81		jsr	floatingpointHandler
.31ed	aa		tax				tax
.31ee	a9 01		lda #$01			lda 	#1
.31f0	95 48		sta $48,x			sta 	esType,x
.31f2					_UIFExit:
.31f2	60		rts				rts
.31f3					UnaryFloatToInt:
.31f3	20 6b 2f	jsr $2f6b			jsr 	EvaluateNumeric 			; the number
.31f6	b5 48		lda $48,x			lda 	esType,x 					; if int already exit
.31f8	f0 0b		beq $3205			beq 	_UFIExit
.31fa	8a		txa				txa 								; convert to int
.31fb	a2 14		ldx #$14		ldx	#20
.31fd	20 81 1e	jsr $1e81		jsr	floatingpointHandler
.3200	aa		tax				tax
.3201	a9 00		lda #$00			lda 	#0 							; set type
.3203	95 48		sta $48,x			sta 	esType,x
.3205					_UFIExit:
.3205	60		rts				rts
.3206					UnaryAlloc:
.3206	e8		inx				inx 								; evaluate memory required
.3207	20 81 2f	jsr $2f81			jsr 	EvaluateInteger
.320a	20 8c 36	jsr $368c			jsr 	CheckRightParen
.320d	ca		dex				dex
.320e	b5 61		lda $61,x			lda 	esInt2+1,x 					; check at least in 64k range.
.3210	15 69		ora $69,x			ora 	esInt3+1,x
.3212	d0 1d		bne $3231			bne 	_UABadValue
.3214	20 19 36	jsr $3619			jsr 	MInt32False					; zero return.
.3217	a5 36		lda $36				lda 	lowMemory+1 				; copy low memory in
.3219	95 58		sta $58,x			sta 	esInt1,x
.321b	a5 35		lda $35				lda 	lowMemory
.321d	95 50		sta $50,x			sta 	esInt0,x
.321f	18		clc				clc 								; add alloc required.
.3220	75 51		adc $51,x			adc 	esInt0+1,x
.3222	85 35		sta $35				sta 	lowMemory
.3224	a5 36		lda $36				lda 	lowMemory+1
.3226	75 59		adc $59,x			adc 	esInt1+1,x
.3228	85 36		sta $36				sta 	lowMemory+1
.322a	b0 05		bcs $3231			bcs		_UABadValue 				; overflow definitely bad.
.322c	c5 34		cmp $34				cmp 	highMemory+1
.322e	b0 01		bcs $3231			bcs 	_UABadValue 				; out of memory bad.
.3230	60		rts				rts
.3231					_UABadValue:
.3231	a2 22		ldx #$22			ldx 	#ErrorID_Memory
.3233	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary/unary2.asm

.3236					UnaryTimer:
.3236	20 8c 36	jsr $368c			jsr 	CheckRightParen 			; no parameters
.3239	98		tya				tya
.323a	48		pha				pha
.323b	20 40 36	jsr $3640			jsr 	MInt32Zero 					; zero result
.323e	86 2a		stx $2a				stx 	temp0 						; returning in YA so can't use .pshx
.3240	a2 1c		ldx #$1c		ldx	#28
.3242	20 f6 14	jsr $14f6		jsr	deviceHandler
.3245	a6 2a		ldx $2a				ldx 	temp0						; restore X and update 16 bit result
.3247	95 50		sta $50,x			sta 	esInt0,x
.3249	98		tya				tya
.324a	95 58		sta $58,x			sta 	esInt1,x
.324c	68		pla				pla
.324d	a8		tay				tay
.324e	60		rts				rts
.324f					UnaryInkey:
.324f	20 8c 36	jsr $368c			jsr 	CheckRightParen
.3252	86 2a		stx $2a				stx 	temp0
.3254	a2 0a		ldx #$0a		ldx	#10
.3256	20 f6 14	jsr $14f6		jsr	deviceHandler
.3259	a6 2a		ldx $2a				ldx 	temp0
.325b	20 28 36	jsr $3628			jsr 	MInt32Set8Bit
.325e	60		rts				rts
.325f					UnaryGet:
.325f	20 8c 36	jsr $368c			jsr 	CheckRightParen
.3262	86 2a		stx $2a				stx 	temp0
.3264					_UGLoop:
.3264	a2 02		ldx #$02		ldx	#2
.3266	20 f6 14	jsr $14f6		jsr	deviceHandler
.3269	a2 0a		ldx #$0a		ldx	#10
.326b	20 f6 14	jsr $14f6		jsr	deviceHandler
.326e	c9 00		cmp #$00			cmp 	#0
.3270	f0 f2		beq $3264			beq 	_UGLoop
.3272	a6 2a		ldx $2a				ldx 	temp0
.3274	20 28 36	jsr $3628			jsr 	MInt32Set8Bit
.3277	60		rts				rts
.3278					UnaryGetString:
.3278	20 5f 32	jsr $325f			jsr 	UnaryGet
.327b					UGSDoChr:
.327b	4c cc 32	jmp $32cc			jmp 	ChrCode
.327e					UnaryInkeyString:
.327e	20 4f 32	jsr $324f			jsr 	UnaryInkey
.3281	b5 50		lda $50,x			lda 	esInt0,x
.3283	d0 f6		bne $327b			bne 	UGSDoChr
.3285	8a		txa				txa
.3286	a2 08		ldx #$08		ldx	#8
.3288	20 c4 39	jsr $39c4		jsr	stringHandler
.328b	aa		tax				tax
.328c	60		rts				rts
.328d					UnarySys:
.328d	20 81 2f	jsr $2f81			jsr 	EvaluateInteger 				; get the address
.3290	20 8c 36	jsr $368c			jsr 	CheckRightParen
.3293	20 73 23	jsr $2373			jsr 	TOSToTemp0 						; copy call address to temp0
.3296	8a		txa				txa
.3297	48		pha				pha
.3298	98		tya				tya
.3299	48		pha				pha
.329a	ad 00 0a	lda $0a00			lda 	("A"-"A")*4+SingleLetterVar 	; load AXY
.329d	ae 5c 0a	ldx $0a5c			ldx 	("X"-"A")*4+SingleLetterVar
.32a0	ac 60 0a	ldy $0a60			ldy 	("Y"-"A")*4+SingleLetterVar
.32a3	20 b2 32	jsr $32b2			jsr 	_CallTemp0
.32a6	85 32		sta $32				sta 	tempShort 						; restore YX
.32a8	68		pla				pla
.32a9	a8		tay				tay
.32aa	68		pla				pla
.32ab	aa		tax				tax
.32ac	a5 32		lda $32				lda 	tempShort
.32ae	20 28 36	jsr $3628			jsr 	MInt32Set8Bit 					; return result.
.32b1	60		rts				rts
.32b2					_CallTemp0:
.32b2	6c 2a 00	jmp ($002a)			jmp 	(temp0)
.32b5					UnaryMem:
.32b5	20 19 36	jsr $3619			jsr 	MInt32False 					; set to false (e.g. 0)
.32b8	38		sec				sec
.32b9	a5 33		lda $33				lda 	highMemory 						; calculate value
.32bb	e5 35		sbc $35				sbc 	lowMemory
.32bd	95 50		sta $50,x			sta 	esInt0,x
.32bf	a5 34		lda $34				lda 	highMemory+1
.32c1	e5 36		sbc $36				sbc 	lowMemory+1
.32c3	95 58		sta $58,x			sta 	esInt1,x
.32c5	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary/unarystr.asm

.32c6					ExecChr:
.32c6	20 89 2f	jsr $2f89			jsr 	EvaluateSmallInteger		; character number 0-255
.32c9	20 8c 36	jsr $368c			jsr 	CheckRightParen				; right bracket
.32cc					ChrCode:
.32cc	98		tya				tya
.32cd	48		pha				pha
.32ce	8a		txa				txa 								; A = stack
.32cf	b4 50		ldy $50,x			ldy 	esInt0,x					; Y = character
.32d1	a2 02		ldx #$02		ldx	#2
.32d3	20 c4 39	jsr $39c4		jsr	stringHandler
.32d6	aa		tax				tax 								; X = stack
.32d7	68		pla				pla
.32d8	a8		tay				tay
.32d9	60		rts				rts
.32da					ExecLower:
.32da	38		sec				sec 								; set carry is lower
.32db	b0 01		bcs $32de			bcs 	ExecUpperLower
.32dd					ExecUpper:
.32dd	18		clc				clc 								; clear carry is upper
.32de					ExecUpperLower:
.32de	08		php				php 								; save carry
.32df	20 76 2f	jsr $2f76			jsr 	EvaluateString 				; string to stack,X
.32e2	20 8c 36	jsr $368c			jsr 	CheckRightParen 			; check closing right bracket.
.32e5	28		plp				plp 								; restore carry, save Y
.32e6	98		tya				tya
.32e7	48		pha				pha
.32e8	a9 00		lda #$00			lda 	#0 							; A zero if upper, 1 if lower.
.32ea	2a		rol a				rol 	a
.32eb	a8		tay				tay 								; now in Y
.32ec	8a		txa				txa 								; do the substring and exit.
.32ed	a2 0c		ldx #$0c		ldx	#12
.32ef	20 c4 39	jsr $39c4		jsr	stringHandler
.32f2	aa		tax				tax
.32f3	68		pla				pla
.32f4	a8		tay				tay
.32f5	60		rts				rts
.32f6					ExecLeft:
.32f6	20 76 2f	jsr $2f76			jsr 	EvaluateString 				; string to stack,X
.32f9	20 99 36	jsr $3699			jsr 	CheckComma
.32fc	e8		inx				inx
.32fd	a9 01		lda #$01			lda 	#1 							; 1 for 2nd parameter.
.32ff	20 28 36	jsr $3628			jsr 	MInt32Set8Bit
.3302	e8		inx				inx
.3303	20 89 2f	jsr $2f89			jsr 	EvaluateSmallInteger 		; smallint 3rd parameter
.3306					ExecSubstring:
.3306	ca		dex				dex 								; fix up X
.3307	ca		dex				dex
.3308	20 8c 36	jsr $368c			jsr 	CheckRightParen 			; check closing right bracket.
.330b	8a		txa				txa 								; do the substring and exit.
.330c	a2 0e		ldx #$0e		ldx	#14
.330e	20 c4 39	jsr $39c4		jsr	stringHandler
.3311	aa		tax				tax
.3312	60		rts				rts
.3313					ExecMid:
.3313	20 76 2f	jsr $2f76			jsr 	EvaluateString 				; string to stack,X
.3316	20 99 36	jsr $3699			jsr 	CheckComma
.3319	e8		inx				inx
.331a	20 89 2f	jsr $2f89			jsr 	EvaluateSmallInteger 		; smallint 2nd parameter
.331d	c9 00		cmp #$00			cmp 	#0
.331f	f0 15		beq $3336			beq 	_EMValue
.3321	e8		inx				inx
.3322	a9 ff		lda #$ff			lda 	#255 						; 255 default for 3nd parameter - this is optional.
.3324	20 28 36	jsr $3628			jsr 	MInt32Set8Bit
.3327	b1 28		lda ($28),y			lda 	(codePtr),y 				; is there a ) next
.3329	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN 				; if so, just MID$(a$,2)
.332b	f0 d9		beq $3306			beq 	ExecSubString
.332d	20 99 36	jsr $3699			jsr 	CheckComma
.3330	20 89 2f	jsr $2f89			jsr 	EvaluateSmallInteger 		; smallint 2nd parameter
.3333	4c 06 33	jmp $3306			jmp 	ExecSubString
.3336					_EMValue:
.3336	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.3338	20 18 15	jsr $1518		jsr	errorHandler
.333b					ExecRight:
.333b	20 76 2f	jsr $2f76			jsr 	EvaluateString 				; string to stack,X
.333e	20 99 36	jsr $3699			jsr 	CheckComma
.3341	e8		inx				inx
.3342	20 89 2f	jsr $2f89			jsr 	EvaluateSmallInteger 		; smallint 2nd parameter.
.3345	ca		dex				dex
.3346	98		tya				tya
.3347	48		pha				pha
.3348	b5 50		lda $50,x			lda 	esInt0,x 					; copy address of string to temp0
.334a	85 2a		sta $2a				sta 	temp0
.334c	b5 58		lda $58,x			lda 	esInt1,x
.334e	85 2b		sta $2b				sta 	temp0+1
.3350	a0 00		ldy #$00			ldy 	#0 							; point to length
.3352	b1 2a		lda ($2a),y			lda 	(temp0),y 					; get the length.
.3354	18		clc				clc 								; add 1.
.3355	69 01		adc #$01			adc 	#1
.3357	38		sec				sec
.3358	f5 51		sbc $51,x			sbc 	esInt0+1,x  				; subtract right count.
.335a	f0 02		beq $335e			beq		_ERMake1 					; if zero, make it 1.
.335c	b0 02		bcs $3360			bcs		_EROkay
.335e					_ERMake1:
.335e	a9 01		lda #$01			lda 	#1 							; start position.
.3360					_EROkay:
.3360	e8		inx				inx 								; set start pos.
.3361	95 50		sta $50,x			sta 	esInt0,x
.3363	e8		inx				inx
.3364	a9 ff		lda #$ff			lda 	#255 						; 255 default for 3nd parameter.
.3366	20 28 36	jsr $3628			jsr 	MInt32Set8Bit
.3369	68		pla				pla
.336a	a8		tay				tay
.336b	4c 06 33	jmp $3306			jmp 	ExecSubString 				; do the substring code.

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32binary.asm

.336e					MInt32And:
.336e	b5 50		lda $50,x			lda 	esInt0,x
.3370	35 51		and $51,x			and 	esInt0+1,x
.3372	95 50		sta $50,x			sta 	esInt0,x
.3374	b5 58		lda $58,x			lda 	esInt1,x
.3376	35 59		and $59,x			and 	esInt1+1,x
.3378	95 58		sta $58,x			sta 	esInt1,x
.337a	b5 60		lda $60,x			lda 	esInt2,x
.337c	35 61		and $61,x			and 	esInt2+1,x
.337e	95 60		sta $60,x			sta 	esInt2,x
.3380	b5 68		lda $68,x			lda 	esInt3,x
.3382	35 69		and $69,x			and 	esInt3+1,x
.3384	95 68		sta $68,x			sta 	esInt3,x
.3386	60		rts				rts
.3387					MInt32Or:
.3387	b5 50		lda $50,x			lda 	esInt0,x
.3389	15 51		ora $51,x			ora 	esInt0+1,x
.338b	95 50		sta $50,x			sta 	esInt0,x
.338d	b5 58		lda $58,x			lda 	esInt1,x
.338f	15 59		ora $59,x			ora 	esInt1+1,x
.3391	95 58		sta $58,x			sta 	esInt1,x
.3393	b5 60		lda $60,x			lda 	esInt2,x
.3395	15 61		ora $61,x			ora 	esInt2+1,x
.3397	95 60		sta $60,x			sta 	esInt2,x
.3399	b5 68		lda $68,x			lda 	esInt3,x
.339b	15 69		ora $69,x			ora 	esInt3+1,x
.339d	95 68		sta $68,x			sta 	esInt3,x
.339f	60		rts				rts
.33a0					MInt32Xor:
.33a0	b5 50		lda $50,x			lda 	esInt0,x
.33a2	55 51		eor $51,x			eor 	esInt0+1,x
.33a4	95 50		sta $50,x			sta 	esInt0,x
.33a6	b5 58		lda $58,x			lda 	esInt1,x
.33a8	55 59		eor $59,x			eor 	esInt1+1,x
.33aa	95 58		sta $58,x			sta 	esInt1,x
.33ac	b5 60		lda $60,x			lda 	esInt2,x
.33ae	55 61		eor $61,x			eor 	esInt2+1,x
.33b0	95 60		sta $60,x			sta 	esInt2,x
.33b2	b5 68		lda $68,x			lda 	esInt3,x
.33b4	55 69		eor $69,x			eor 	esInt3+1,x
.33b6	95 68		sta $68,x			sta 	esInt3,x
.33b8	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32compare.asm

.33b9					MInt32Compare:
.33b9	b5 50		lda $50,x			lda 	esInt0,x 					; equality check first.
.33bb	d5 51		cmp $51,x			cmp 	esInt0+1,x
.33bd	d0 13		bne $33d2			bne 	MInt32Compare2
.33bf	b5 58		lda $58,x			lda 	esInt1,x
.33c1	d5 59		cmp $59,x			cmp 	esInt1+1,x
.33c3	d0 0d		bne $33d2			bne 	MInt32Compare2
.33c5	b5 60		lda $60,x			lda 	esInt2,x
.33c7	d5 61		cmp $61,x			cmp 	esInt2+1,x
.33c9	d0 07		bne $33d2			bne 	MInt32Compare2
.33cb	b5 68		lda $68,x			lda 	esInt3,x
.33cd	55 69		eor $69,x			eor 	esInt3+1,x 					; EOR will return 0 if the same.
.33cf	d0 01		bne $33d2			bne 	MInt32Compare2
.33d1	60		rts				rts
.33d2					MInt32Compare2:
.33d2	b5 50		lda $50,x			lda		esInt0,x 					; unsigned 32 bit comparison.
.33d4	d5 51		cmp $51,x			cmp 	esInt0+1,x
.33d6	b5 58		lda $58,x			lda		esInt1,x
.33d8	f5 59		sbc $59,x			sbc 	esInt1+1,x
.33da	b5 60		lda $60,x			lda		esInt2,x
.33dc	f5 61		sbc $61,x			sbc 	esInt2+1,x
.33de	b5 68		lda $68,x			lda		esInt3,x
.33e0	f5 69		sbc $69,x			sbc 	esInt3+1,x
.33e2	50 02		bvc $33e6			bvc 	_I32LNoOverflow 			; make it signed 32 bit comparison
.33e4	49 80		eor #$80			eor 	#$80
.33e6					_I32LNoOverflow
.33e6	30 03		bmi $33eb			bmi 	MInt32CLess					; if -ve then return $FF
.33e8	a9 01		lda #$01			lda 	#$01						; else return $01
.33ea	60		rts				rts
.33eb					MInt32CLess:
.33eb	a9 ff		lda #$ff			lda 	#$FF
.33ed	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32divide.asm

.33ee					MInt32SDivide:
.33ee	98		tya				tya  								; save Y, which is the count of negations
.33ef	48		pha				pha
.33f0	a0 00		ldy #$00			ldy 	#0 							; zero count
.33f2	20 0a 34	jsr $340a			jsr 	_MInt32SRemSign 			; unsign TOS
.33f5	e8		inx				inx 								; unsign TOS+1
.33f6	20 0a 34	jsr $340a			jsr 	_MInt32SRemSign
.33f9	ca		dex				dex
.33fa	98		tya				tya 								; save sign count on stack
.33fb	48		pha				pha
.33fc	20 13 34	jsr $3413			jsr 	MInt32UDivide 				; unsigned division
.33ff	68		pla				pla 								; get sign count back
.3400	29 01		and #$01			and 	#1 							; if it is odd, then negate result
.3402	f0 03		beq $3407			beq 	_I32SNoNeg
.3404	20 d3 35	jsr $35d3			jsr 	MInt32Negate
.3407					_I32SNoNeg:
.3407	68		pla				pla 								; restoe Y and exit
.3408	a8		tay				tay
.3409	60		rts				rts
.340a					_MInt32SRemSign:
.340a	b5 68		lda $68,x			lda 	esInt3,x 					; is it -ve
.340c	10 04		bpl $3412			bpl 	_MInt32SRSExit
.340e	c8		iny				iny 								; increment the sign count
.340f	20 d3 35	jsr $35d3			jsr 	MInt32Negate 				; negate the value.
.3412					_MInt32SRSExit:
.3412	60		rts				rts
.3413					MInt32UDivide:
.3413	b5 51		lda $51,x			lda 	esInt0+1,x 					; check for division by zero
.3415	15 59		ora $59,x			ora 	esInt1+1,x
.3417	15 5a		ora $5a,x			ora 	esInt1+2,x
.3419	15 5b		ora $5b,x			ora 	esInt1+3,x
.341b	f0 4a		beq $3467			beq 	_MInt32DZero
.341d	e8		inx				inx 								; clear A
.341e	e8		inx				inx
.341f	20 19 36	jsr $3619			jsr 	MInt32False
.3422	ca		dex				dex
.3423	ca		dex				dex
.3424	98		tya				tya 								; save Y on the stack
.3425	48		pha				pha
.3426	a0 20		ldy #$20			ldy 	#32 						; number of division passes
.3428					_MInt32UDLoop:
.3428	16 50		asl $50,x			asl 	esInt0,x					; shift QA left. First Q
.342a	36 58		rol $58,x			rol 	esInt1,x
.342c	36 60		rol $60,x			rol 	esInt2,x
.342e	36 68		rol $68,x			rol 	esInt3,x
.3430	36 52		rol $52,x			rol 	esInt0+2,x 					; then A.
.3432	36 5a		rol $5a,x			rol 	esInt1+2,x
.3434	36 62		rol $62,x			rol 	esInt2+2,x
.3436	36 6a		rol $6a,x			rol 	esInt3+2,x
.3438	38		sec				sec 								; calculate A-M saving result on the stack
.3439	b5 52		lda $52,x			lda 	esInt0+2,x
.343b	f5 51		sbc $51,x			sbc 	esInt0+1,x
.343d	48		pha				pha
.343e	b5 5a		lda $5a,x			lda 	esInt1+2,x
.3440	f5 59		sbc $59,x			sbc 	esInt1+1,x
.3442	48		pha				pha
.3443	b5 62		lda $62,x			lda 	esInt2+2,x
.3445	f5 61		sbc $61,x			sbc 	esInt2+1,x
.3447	48		pha				pha
.3448	b5 6a		lda $6a,x			lda 	esInt3+2,x
.344a	f5 69		sbc $69,x			sbc 	esInt3+1,x
.344c	90 10		bcc $345e			bcc		_MInt32NoSubtract 			; if A < M (e.g. carry clear) then reject this.
.344e	95 6a		sta $6a,x			sta 	esInt3+2,x 					; write result back to A
.3450	68		pla				pla
.3451	95 62		sta $62,x			sta 	esInt2+2,x
.3453	68		pla				pla
.3454	95 5a		sta $5a,x			sta 	esInt1+2,x
.3456	68		pla				pla
.3457	95 52		sta $52,x			sta 	esInt0+2,x
.3459	f6 50		inc $50,x			inc 	esInt0,x 					; sets bit 0 of Q - it was shifted left previously.
.345b	4c 61 34	jmp $3461			jmp 	_MInt32Next 					; do the next iteration
.345e					_MInt32NoSubtract:
.345e	68		pla				pla
.345f	68		pla				pla
.3460	68		pla				pla
.3461					_MInt32Next:
.3461	88		dey				dey 								; do this 32 times.
.3462	d0 c4		bne $3428			bne 	_MInt32UDLoop
.3464	68		pla				pla 								; restore Y and exit
.3465	a8		tay				tay
.3466	60		rts				rts
.3467					_MInt32DZero:
.3467	a2 05		ldx #$05			ldx 	#ErrorID_DivZero
.3469	20 18 15	jsr $1518		jsr	errorHandler
.346c					MInt32Modulus:
.346c	20 13 34	jsr $3413			jsr 	MInt32UDivide 				; do the division.
.346f	b5 6a		lda $6a,x			lda 	esInt3+2,x 					; copy 2nd on stack (the remainder) to the top.
.3471	95 68		sta $68,x			sta 	esInt3,x
.3473	b5 62		lda $62,x			lda 	esInt2+2,x
.3475	95 60		sta $60,x			sta 	esInt2,x
.3477	b5 5a		lda $5a,x			lda 	esInt1+2,x
.3479	95 58		sta $58,x			sta 	esInt1,x
.347b	b5 52		lda $52,x			lda 	esInt0+2,x
.347d	95 50		sta $50,x			sta 	esInt0,x
.347f	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32fromstr.asm

.0cdd					fs32Length:
>0cdd							.fill 	1
.3480					LinkInt32FromString:
.3480	aa		tax				tax
.3481	98		tya				tya
.3482	20 87 34	jsr $3487			jsr 	MInt32FromString
.3485	8a		txa				txa
.3486	60		rts				rts
.3487					MInt32FromString:
.3487	85 32		sta $32				sta 	tempShort 					; save base
.3489	98		tya				tya
.348a	48		pha				pha
.348b	a0 00		ldy #$00			ldy 	#0 							; get length of string to convert
.348d	b1 2a		lda ($2a),y			lda 	(temp0),y
.348f	8d dd 0c	sta $0cdd			sta 	fs32Length
.3492	f0 65		beq $34f9			beq 	_I32FSFail2					; fail if length zero.
.3494	a0 01		ldy #$01			ldy 	#1 							; set index into string being read
.3496	b1 2a		lda ($2a),y			lda 	(temp0),y 					; look at first character
.3498	c9 2d		cmp #$2d			cmp 	#"-"						; is it a - character
.349a	d0 09		bne $34a5			bne 	_I32FSNotNegative
.349c	ad dd 0c	lda $0cdd			lda 	fs32Length 					; get length back.
.349f	c9 01		cmp #$01			cmp 	#1 							; if 1 it is just a - on its own so fail.
.34a1	f0 56		beq $34f9			beq 	_I32FSFail2
.34a3	a0 02		ldy #$02			ldy 	#2 							; first digit of the number.
.34a5					_I32FSNotNegative:
.34a5	a5 32		lda $32				lda 	tempShort 					; get the base back.
.34a7	c0 02		cpy #$02			cpy 	#2 							; if we read a -ve (e.g. Y == 2)
.34a9	d0 02		bne $34ad			bne 	_I32FSNN2
.34ab	09 80		ora #$80			ora 	#$80						; set bit 7, this indicates a negated result.
.34ad					_I32FSNN2:
.34ad	48		pha				pha 								; save base + final sign on stack.
.34ae	20 19 36	jsr $3619			jsr 	MInt32False 				; zero the return value.
.34b1					_I32FSMainLoop:
.34b1	68		pla				pla 								; get the base back into tempShort
.34b2	48		pha				pha
.34b3	29 7f		and #$7f			and 	#$7F
.34b5	85 32		sta $32				sta 	tempShort
.34b7	b1 2a		lda ($2a),y			lda 	(temp0),y 					; look at next character.
.34b9	c9 61		cmp #$61			cmp 	#"a" 						; fix up case.
.34bb	90 02		bcc $34bf			bcc 	_I32FSNotLC
.34bd	e9 20		sbc #$20			sbc 	#32
.34bf					_I32FSNotLC:
.34bf	38		sec				sec 								; subtract 48 (ASCII "0") - ASCII to Hex conversion
.34c0	e9 30		sbc #$30			sbc 	#"0"
.34c2	90 34		bcc $34f8			bcc 	_I32FSFail 					; nothing more to do.
.34c4	c9 0a		cmp #$0a			cmp 	#9+1 						; if it is 0-9 validate vs base.
.34c6	90 06		bcc $34ce			bcc 	_I32FSValidate
.34c8	c9 11		cmp #$11			cmp 	#17 						; is it between 58 and 64 ? if so bad.
.34ca	90 2c		bcc $34f8			bcc 	_I32FSFail
.34cc	e9 07		sbc #$07			sbc 	#7 							; adjust into range so now character is 0->nnn
.34ce					_I32FSValidate:
.34ce	c5 32		cmp $32				cmp 	tempShort 					; compare against the base.
.34d0	b0 26		bcs $34f8			bcs 	_I32FSFail 					; sorry, too large for this base, so fail.
.34d2	48		pha				pha 								; save the new digit value.
.34d3	e8		inx				inx 								; put base into next slot up on stack
.34d4	a5 32		lda $32				lda 	tempShort
.34d6	20 28 36	jsr $3628			jsr 	MInt32Set8Bit
.34d9	ca		dex				dex
.34da	20 31 35	jsr $3531			jsr 	MInt32Multiply 				; multiply current by the base
.34dd	e8		inx				inx
.34de	68		pla				pla  								; put additive into next slot
.34df	20 28 36	jsr $3628			jsr 	MInt32Set8Bit
.34e2	ca		dex				dex
.34e3	20 fd 34	jsr $34fd			jsr 	MInt32Add 					; and add it
.34e6	c8		iny				iny 								; bump the character pointer
.34e7	cc dd 0c	cpy $0cdd			cpy 	fs32Length 					; until > length.
.34ea	f0 c5		beq $34b1			beq 	_I32FSMainLoop
.34ec	90 c3		bcc $34b1			bcc 	_I32FSMainLoop
.34ee					_I32FSDone:
.34ee	68		pla				pla 								; get base/final sign back
.34ef	10 03		bpl $34f4			bpl 	_I32FSNN3
.34f1	20 d3 35	jsr $35d3			jsr 	MInt32Negate 				; negate the result.
.34f4					_I32FSNN3:
.34f4	68		pla				pla
.34f5	a8		tay				tay
.34f6	38		sec				sec
.34f7	60		rts				rts
.34f8					_I32FSFail:
.34f8	68		pla				pla
.34f9					_I32FSFail2:
.34f9	68		pla				pla
.34fa	a8		tay				tay
.34fb	18		clc				clc
.34fc	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32math.asm

.34fd					MInt32Add:
.34fd	18		clc				clc
.34fe	b5 50		lda $50,x			lda 	esInt0,x
.3500	75 51		adc $51,x			adc 	esInt0+1,x
.3502	95 50		sta $50,x			sta 	esInt0,x
.3504	b5 58		lda $58,x			lda 	esInt1,x
.3506	75 59		adc $59,x			adc 	esInt1+1,x
.3508	95 58		sta $58,x			sta 	esInt1,x
.350a	b5 60		lda $60,x			lda 	esInt2,x
.350c	75 61		adc $61,x			adc 	esInt2+1,x
.350e	95 60		sta $60,x			sta 	esInt2,x
.3510	b5 68		lda $68,x			lda 	esInt3,x
.3512	75 69		adc $69,x			adc 	esInt3+1,x
.3514	95 68		sta $68,x			sta 	esInt3,x
.3516	60		rts				rts
.3517					MInt32Sub:
.3517	38		sec				sec
.3518	b5 50		lda $50,x			lda 	esInt0,x
.351a	f5 51		sbc $51,x			sbc 	esInt0+1,x
.351c	95 50		sta $50,x			sta 	esInt0,x
.351e	b5 58		lda $58,x			lda 	esInt1,x
.3520	f5 59		sbc $59,x			sbc 	esInt1+1,x
.3522	95 58		sta $58,x			sta 	esInt1,x
.3524	b5 60		lda $60,x			lda 	esInt2,x
.3526	f5 61		sbc $61,x			sbc 	esInt2+1,x
.3528	95 60		sta $60,x			sta 	esInt2,x
.352a	b5 68		lda $68,x			lda 	esInt3,x
.352c	f5 69		sbc $69,x			sbc 	esInt3+1,x
.352e	95 68		sta $68,x			sta 	esInt3,x
.3530	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32multiply.asm

.3531					MInt32Multiply:
.3531	e8		inx				inx 								; copy 2nd -> 3rd
.3532	20 57 35	jsr $3557			jsr 	MInt32CopyUp
.3535	ca		dex				dex
.3536	20 57 35	jsr $3557			jsr 	MInt32CopyUp 				; copy 1st -> 2nd
.3539	20 19 36	jsr $3619			jsr 	MInt32False 				; zero 1st.
.353c					_I32Loop:
.353c	b5 52		lda $52,x			lda 	esInt0+2,x 					; get low bit of 3rd
.353e	29 01		and #$01			and 	#1
.3540	f0 03		beq $3545			beq 	_I32NoAdd 					; if set
.3542	20 fd 34	jsr $34fd			jsr 	MInt32Add 					; add 2nd to 1st.
.3545					_I32NoAdd:
.3545	e8		inx				inx 								; shift 2nd left
.3546	20 2e 36	jsr $362e			jsr 	MInt32ShiftLeft
.3549	e8		inx				inx  								; shift 3rd right
.354a	20 37 36	jsr $3637			jsr 	MInt32ShiftRight
.354d	20 40 36	jsr $3640			jsr 	MInt32Zero 					; check if zero.
.3550	08		php				php 								; save status bits
.3551	ca		dex				dex 	 							; point back to 1st
.3552	ca		dex				dex
.3553	28		plp				plp 								; get status bits
.3554	d0 e6		bne $353c			bne 	_I32Loop 					; if non-zero keep going.
.3556	60		rts				rts
.3557					MInt32CopyUp:
.3557	b5 50		lda $50,x			lda 	esInt0,x
.3559	95 51		sta $51,x			sta 	esInt0+1,x
.355b	b5 58		lda $58,x			lda 	esInt1,x
.355d	95 59		sta $59,x			sta 	esInt1+1,x
.355f	b5 60		lda $60,x			lda 	esInt2,x
.3561	95 61		sta $61,x			sta 	esInt2+1,x
.3563	b5 68		lda $68,x			lda 	esInt3,x
.3565	95 69		sta $69,x			sta 	esInt3+1,x
.3567	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32tostr.asm

>0cde					MCharCount:	.fill 	1						; count of converted characters
.3568					MLInt32ToString:
.3568	aa		tax				tax									; module passes stack in A, base in Y
.3569	98		tya				tya
.356a	20 6f 35	jsr $356f			jsr 	MInt32ToString
.356d	8a		txa				txa
.356e	60		rts				rts
.356f					MInt32ToString:
.356f	48		pha				pha 								; save base
.3570	85 32		sta $32				sta 	tempShort 					; save target base.
.3572	a9 00		lda #$00			lda 	#0
.3574	8d de 0c	sta $0cde			sta 	MCharCount 					; clear character count to 0
.3577	98		tya				tya
.3578	48		pha				pha
.3579	a5 32		lda $32				lda 	tempShort 					; check if we are signed conversion
.357b	10 10		bpl $358d			bpl 	_I32TSUnsigned
.357d	48		pha				pha 								; save base on stack.
.357e	b5 68		lda $68,x			lda 	esInt3,x 					; is it actually negative
.3580	10 08		bpl $358a			bpl 	_I32TSNoFlip
.3582	a9 2d		lda #$2d			lda 	#"-" 						; write a '-' prefix out.
.3584	20 c0 35	jsr $35c0			jsr 	MI32WriteCharacter
.3587	20 d3 35	jsr $35d3			jsr 	MInt32Negate 				; negate the value, so now it's positive.
.358a					_I32TSNoFlip:
.358a	68		pla				pla 								; get the base back
.358b	29 7f		and #$7f			and 	#$7F 						; clear the sign flag so it's just a base now.
.358d					_I32TSUnsigned:
.358d	20 9b 35	jsr $359b			jsr 	MI32DivideWrite 			; recursive code to output string.
.3590	a0 00		ldy #$00			ldy 	#0 							; write charcount to first character.
.3592	ad de 0c	lda $0cde			lda 	MCharCount
.3595	91 2a		sta ($2a),y			sta 	(temp0),y
.3597	68		pla				pla
.3598	a8		tay				tay
.3599	68		pla				pla
.359a	60		rts				rts
.359b					MI32DivideWrite:
.359b	48		pha				pha 								; save the divisor/base
.359c	e8		inx				inx 								; write in the dividing position.
.359d	20 28 36	jsr $3628			jsr 	MInt32Set8Bit
.35a0	ca		dex				dex
.35a1	20 13 34	jsr $3413			jsr 	MInt32UDivide 				; divide number by base.
.35a4	68		pla				pla 								; get the base into Y
.35a5	a8		tay				tay
.35a6	b5 52		lda $52,x			lda 	esInt0+2,x 					; get the remainder and push on the stack.
.35a8	48		pha				pha
.35a9	20 40 36	jsr $3640			jsr 	MInt32Zero 					; is the result zero ?
.35ac	f0 04		beq $35b2			beq 	_I32NoRecurse 				; if so, don't recurse.
.35ae	98		tya				tya 								; put base into A
.35af	20 9b 35	jsr $359b			jsr 	MI32DivideWrite 				; and jsr the dividor recursively.
.35b2					_I32NoRecurse:
.35b2	68		pla				pla 								; get the remainder back
.35b3	c9 0a		cmp #$0a			cmp 	#10  						; handle hexadecimals, now converting to ASCII
.35b5	90 02		bcc $35b9			bcc 	_I32NotHex
.35b7	69 06		adc #$06			adc 	#7-1
.35b9					_I32NotHex:
.35b9	18		clc				clc 								; make it ASCII
.35ba	69 30		adc #$30			adc 	#48
.35bc	20 c0 35	jsr $35c0			jsr 	MI32WriteCharacter 			; write the character out
.35bf	60		rts				rts 								; and exit.
.35c0					MI32WriteCharacter:
.35c0	ee de 0c	inc $0cde			inc 	MCharCount 					; bump count (space for leading count)
.35c3	ac de 0c	ldy $0cde			ldy 	MCharCount 					; get position
.35c6	91 2a		sta ($2a),y			sta 	(temp0),y 					; write out with trailing 0
.35c8	c8		iny				iny
.35c9	a9 00		lda #$00			lda 	#0
.35cb	91 2a		sta ($2a),y			sta 	(temp0),y
.35cd	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32unary.asm

>0cdf					MSeed32:	.fill 	4							; random number seed.
.35ce					MInt32Absolute:
.35ce	b5 68		lda $68,x			lda 	esInt3,x 					; use negate code if -ve.
.35d0	30 01		bmi $35d3			bmi 	MInt32Negate
.35d2	60		rts				rts
.35d3					MInt32Negate:
.35d3	38		sec				sec 								; subtract from zero.
.35d4	a9 00		lda #$00			lda 	#0
.35d6	f5 50		sbc $50,x			sbc 	esInt0,x
.35d8	95 50		sta $50,x			sta 	esInt0,x
.35da	a9 00		lda #$00			lda 	#0
.35dc	f5 58		sbc $58,x			sbc 	esInt1,x
.35de	95 58		sta $58,x			sta 	esInt1,x
.35e0	a9 00		lda #$00			lda 	#0
.35e2	f5 60		sbc $60,x			sbc 	esInt2,x
.35e4	95 60		sta $60,x			sta 	esInt2,x
.35e6	a9 00		lda #$00			lda 	#0
.35e8	f5 68		sbc $68,x			sbc 	esInt3,x
.35ea	95 68		sta $68,x			sta 	esInt3,x
.35ec	60		rts				rts
.35ed					MInt32Not:
.35ed	b5 50		lda $50,x			lda 	esInt0,x 					; one's complement all four.
.35ef	49 ff		eor #$ff			eor 	#$FF
.35f1	95 50		sta $50,x			sta 	esInt0,x
.35f3	b5 58		lda $58,x			lda 	esInt1,x
.35f5	49 ff		eor #$ff			eor 	#$FF
.35f7	95 58		sta $58,x			sta 	esInt1,x
.35f9	b5 60		lda $60,x			lda 	esInt2,x
.35fb	49 ff		eor #$ff			eor 	#$FF
.35fd	95 60		sta $60,x			sta 	esInt2,x
.35ff	b5 68		lda $68,x			lda 	esInt3,x
.3601	49 ff		eor #$ff			eor 	#$FF
.3603	95 68		sta $68,x			sta 	esInt3,x
.3605	60		rts				rts
.3606					MInt32Sign:
.3606	b5 68		lda $68,x			lda 	esInt3,x					; look at MSB
.3608	30 0b		bmi $3615			bmi 	MInt32True 					; if set return -1 (true)
.360a	20 40 36	jsr $3640			jsr 	MInt32Zero 					; is it zero ?
.360d	f0 0a		beq $3619			beq 	MInt32False 				; if zero return 0 (false)
.360f	20 19 36	jsr $3619			jsr 	MInt32False 				; > 0 return 1, by setting it to zero
.3612	f6 50		inc $50,x			inc 	esInt0,x  					; and bumping the LSB.
.3614	60		rts				rts
.3615					MInt32True:
.3615	a9 ff		lda #$ff			lda 	#$FF 						; set to $FFFFFFFF
.3617	d0 02		bne $361b			bne 	MInt32WriteAll
.3619					MInt32False:
.3619	a9 00		lda #$00			lda 	#0
.361b					MInt32WriteAll:
.361b	95 50		sta $50,x			sta 	esInt0,x
.361d					MInt32Write123:
.361d	95 58		sta $58,x			sta 	esInt1,x
.361f	95 60		sta $60,x			sta 	esInt2,x
.3621	95 68		sta $68,x			sta 	esInt3,x
.3623	a9 00		lda #$00			lda 	#$00						; and make it an integer
.3625	95 48		sta $48,x			sta 	esType,x
.3627	60		rts				rts
.3628					MInt32Set8Bit:
.3628	95 50		sta $50,x			sta 	esInt0,x 					; coopt above function to write
.362a	a9 00		lda #$00			lda 	#0 							; a value 0-255
.362c	f0 ef		beq $361d			beq		MInt32Write123
.362e					MInt32ShiftLeft:
.362e	16 50		asl $50,x			asl 	esInt0,x
.3630	36 58		rol $58,x			rol	 	esInt1,x
.3632	36 60		rol $60,x			rol	 	esInt2,x
.3634	36 68		rol $68,x			rol	 	esInt3,x
.3636	60		rts				rts
.3637					MInt32ShiftRight:
.3637	56 68		lsr $68,x			lsr 	esInt3,x
.3639	76 60		ror $60,x			ror 	esInt2,x
.363b	76 58		ror $58,x			ror 	esInt1,x
.363d	76 50		ror $50,x			ror 	esInt0,x
.363f	60		rts				rts
.3640					MInt32Zero:
.3640	b5 50		lda $50,x			lda 	esInt0,x
.3642	15 58		ora $58,x			ora 	esInt1,x
.3644	15 60		ora $60,x			ora 	esInt2,x
.3646	15 68		ora $68,x			ora 	esInt3,x
.3648	60		rts				rts
.3649					MInt32Random:
.3649	98		tya				tya
.364a	48		pha				pha
.364b	a0 07		ldy #$07			ldy 	#7 							; do it 7 times
.364d	ad df 0c	lda $0cdf			lda 	MSeed32+0 					; check the seed isn't zero
.3650	d0 03		bne $3655			bne 	_Random1
.3652	a8		tay				tay 								; if so do it 256 times
.3653	a9 aa		lda #$aa			lda		#$AA 						; and use this to seed the seed....
.3655					_Random1:
.3655	0a		asl a				asl 	a
.3656	2e e0 0c	rol $0ce0			rol 	MSeed32+1
.3659	2e e1 0c	rol $0ce1			rol 	MSeed32+2
.365c	2e e2 0c	rol $0ce2			rol 	MSeed32+3
.365f	90 02		bcc $3663			bcc 	_Random2
.3661	49 c5		eor #$c5			eor 	#$C5
.3663					_Random2:
.3663	88		dey				dey
.3664	d0 ef		bne $3655			bne 	_Random1
.3666	8d df 0c	sta $0cdf			sta 	MSeed32+0 					; copy the seed in.
.3669	95 50		sta $50,x			sta 	esInt0,x
.366b	ad e0 0c	lda $0ce0			lda 	MSeed32+1
.366e	95 58		sta $58,x			sta 	esInt1,x
.3670	ad e1 0c	lda $0ce1			lda 	MSeed32+2
.3673	95 60		sta $60,x			sta 	esInt2,x
.3675	ad e2 0c	lda $0ce2			lda 	MSeed32+3
.3678	95 68		sta $68,x			sta 	esInt3,x
.367a	68		pla				pla
.367b	a8		tay				tay
.367c	a9 00		lda #$00			lda 	#0
.367e	95 48		sta $48,x			sta 	esType,x
.3680	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/utility/check.asm

.3681					CheckToken:
.3681	d1 28		cmp ($28),y			cmp 	(codePtr),y
.3683	d0 02		bne $3687			bne 	_CTError
.3685	c8		iny				iny
.3686	60		rts				rts
.3687					_CTError:
.3687	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.3689	20 18 15	jsr $1518		jsr	errorHandler
.368c					CheckRightParen:
.368c	b1 28		lda ($28),y			lda 	(codePtr),y
.368e	c8		iny				iny
.368f	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.3691	d0 01		bne $3694			bne 	_CRPError
.3693	60		rts				rts
.3694					_CRPError:
.3694	a2 09		ldx #$09			ldx 	#ErrorID_MissingRP
.3696	20 18 15	jsr $1518		jsr	errorHandler
.3699					CheckComma:
.3699	b1 28		lda ($28),y			lda 	(codePtr),y
.369b	c8		iny				iny
.369c	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.369e	d0 01		bne $36a1			bne 	_CCError
.36a0	60		rts				rts
.36a1					_CCError:
.36a1	a2 0a		ldx #$0a			ldx 	#ErrorID_MissingComma
.36a3	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/utility/stack.asm

.0037					rsPointer:
>0037							.fill 	2							; to TOS, which is the current top-token.
.36a6					RSReset:
.36a6	a9 ff		lda #$ff			lda 	#(returnStack+retStackSize-1) & $FF
.36a8	85 37		sta $37				sta 	rsPointer
.36aa	a9 09		lda #$09			lda 	#(returnStack+retStackSize-1) >> 8
.36ac	85 38		sta $38				sta 	1+(rsPointer)
.36ae	a9 ff		lda #$ff			lda 	#$FF 						; put a duff marker on TOS, so nothing will pop
.36b0	8d ff 09	sta $09ff			sta 	returnStack+retStackSize-1
.36b3	60		rts				rts
.36b4					RSClaim:
.36b4	84 32		sty $32				sty 	tempShort 					; preserve Y
.36b6	48		pha				pha 								; save marker on stack.
.36b7	8a		txa				txa 								; get bytes required.
.36b8	38		sec				sec
.36b9	49 ff		eor #$ff			eor 	#$FF 						; add to rsPointer using 2's complement.
.36bb	65 37		adc $37				adc 	rsPointer
.36bd	85 37		sta $37				sta 	rsPointer
.36bf	a5 38		lda $38				lda 	rsPointer+1
.36c1	69 ff		adc #$ff			adc 	#$FF
.36c3	85 38		sta $38				sta 	rsPointer+1
.36c5	c9 08		cmp #$08			cmp 	#returnStack>>8 			; overflow. underflow actually :)
.36c7	90 08		bcc $36d1			bcc 	_RSCOverflow
.36c9	68		pla				pla 								; get marker back
.36ca	a0 00		ldy #$00			ldy 	#0 							; write marker out.
.36cc	91 37		sta ($37),y			sta 	(rsPointer),y
.36ce	a4 32		ldy $32				ldy 	tempShort 					; restore Y and exit
.36d0	60		rts				rts
.36d1					_RSCOverflow:
.36d1	a2 16		ldx #$16			ldx 	#ErrorID_RetStack
.36d3	20 18 15	jsr $1518		jsr	errorHandler
.36d6					RSFree:
.36d6	18		clc				clc
.36d7	65 37		adc $37				adc 	rsPointer
.36d9	85 37		sta $37				sta 	rsPointer
.36db	90 02		bcc $36df			bcc 	_RSFExit
.36dd	e6 38		inc $38				inc 	rsPointer+1
.36df					_RSFExit:
.36df	60		rts				rts
.36e0					RSSavePosition:
.36e0	84 32		sty $32				sty 	tempShort 					; save Y position
.36e2	a8		tay				tay 								; this is where we write it.
.36e3	a5 28		lda $28				lda 	codePtr 					; write codePointer out
.36e5	91 37		sta ($37),y			sta 	(rsPointer),y
.36e7	c8		iny				iny
.36e8	a5 29		lda $29				lda 	codePtr+1
.36ea	91 37		sta ($37),y			sta 	(rsPointer),y
.36ec	c8		iny				iny
.36ed	a5 32		lda $32				lda 	tempShort 					; write the Y position out.
.36ef	91 37		sta ($37),y			sta 	(rsPointer),y
.36f1	a8		tay				tay 								; fix Y back again to original value
.36f2	60		rts				rts
.36f3					RSLoadPosition:
.36f3	a8		tay				tay
.36f4	b1 37		lda ($37),y			lda 	(rsPointer),y 				; read codePointer back
.36f6	85 28		sta $28				sta 	codePtr
.36f8	c8		iny				iny
.36f9	b1 37		lda ($37),y			lda 	(rsPointer),y
.36fb	85 29		sta $29				sta 	codePtr+1
.36fd	c8		iny				iny
.36fe	b1 37		lda ($37),y			lda 	(rsPointer),y 				; and the offset
.3700	a8		tay				tay 								; to Y
.3701	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/utility/warmstart.asm

.3702					WarmStart:
.3702	a2 04		ldx #$04		ldx	#4
.3704	20 6d 20	jsr $206d		jsr	interactionHandler

;******  Return to file: main/main.asm

.3707					mainHandler:
.3707	7c 0a 37	jmp ($370a,x)			jmp 	(mainVectors,x)
.370a					mainVectors:
>370a	26 37					.word _DummyControlHandler ; index 0
>370c	99 36					.word CheckComma           ; index 2
>370e	8c 36					.word CheckRightParen      ; index 4
>3710	75 28					.word XCommandClear        ; index 6
>3712	9c 2f					.word LinkEvaluate         ; index 8
>3714	a8 2f					.word LinkEvaluateInteger  ; index 10
>3716	b4 2f					.word LinkEvaluateSmallInt ; index 12
>3718	ae 2f					.word LinkEvaluateString   ; index 14
>371a	a2 2f					.word LinkEvaluateTerm     ; index 16
>371c	68 35					.word MLInt32ToString      ; index 18
>371e	04 2a					.word Command_XNew         ; index 20
>3720	12 2a					.word XCommand_Run         ; index 22
>3722	1e 2a					.word Command_RunFrom      ; index 24
>3724	80 34					.word LinkInt32FromString  ; index 26
.3726					_DummyControlHandler:
.3726	60		rts			rts

;******  Return to file: basic.asm

.3727					section_end_main:
.3727					section_start_string:

;******  Processing file: string/string.asm


;******  Processing file: string/functions/chr.asm

.3727					StringChrs:
.3727	aa		tax				tax 								; set up stack
.3728	a9 02		lda #$02			lda 	#2
.372a	20 ea 37	jsr $37ea			jsr 	AllocateSoftString
.372d	98		tya				tya
.372e	20 10 38	jsr $3810			jsr 	WriteSoftString
.3731					StringUpdate:
.3731	20 3f 37	jsr $373f			jsr 	ReturnSoftString
.3734	8a		txa				txa
.3735	60		rts				rts
.3736					StringNull:
.3736	aa		tax				tax
.3737	a9 01		lda #$01			lda 	#1
.3739	20 ea 37	jsr $37ea			jsr 	AllocateSoftString
.373c	4c 31 37	jmp $3731			jmp 	StringUpdate
.373f					ReturnSoftString:
.373f	a5 39		lda $39				lda 	softMemAlloc 				; copy address
.3741	95 50		sta $50,x			sta 	esInt0,x
.3743	a5 3a		lda $3a				lda 	softMemAlloc+1
.3745	95 58		sta $58,x			sta 	esInt1,x
.3747	a9 00		lda #$00			lda 	#0 							; zero upper bytes
.3749	95 60		sta $60,x			sta 	esInt2,x
.374b	95 68		sta $68,x			sta 	esInt3,x
.374d	a9 40		lda #$40			lda 	#$40 						; type string.
.374f	95 48		sta $48,x			sta 	esType,x
.3751	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/functions/compare.asm

.3752					STRCompare:
.3752	48		pha				pha 								; save A
.3753	aa		tax				tax 								; put stack pos in X
.3754	98		tya				tya
.3755	48		pha				pha
.3756	20 8a 37	jsr $378a			jsr 	CopyStringPair 				; copy strings to temp0,temp1
.3759	a0 00		ldy #$00			ldy 	#0 							; get the smaller of the two string sizes.
.375b	b1 2a		lda ($2a),y			lda 	(temp0),y
.375d	d1 2c		cmp ($2c),y			cmp 	(temp1),y
.375f	90 02		bcc $3763			bcc 	_SCNotSmaller
.3761	b1 2c		lda ($2c),y			lda 	(temp1),y
.3763					_SCNotSmaller:
.3763	aa		tax				tax 								; put that in X. We compare this many chars first.
.3764					_SCCompareLoop:
.3764	e0 00		cpx #$00			cpx 	#0 							; if compared all the smaller, then it is the shorter
.3766	f0 0c		beq $3774			beq 	_SCSameToEndShortest 		; one that is the smallest if they are different lengths.
.3768	ca		dex				dex 								; decrement chars to compare.
.3769	c8		iny				iny 								; move to next character
.376a	38		sec				sec 								; calculate s1[y]-s2[y]
.376b	b1 2a		lda ($2a),y			lda 	(temp0),y
.376d	f1 2c		sbc ($2c),y			sbc 	(temp1),y
.376f	d0 0a		bne $377b			bne 	_SCReturnResult 			; if different return sign of A
.3771	4c 64 37	jmp $3764			jmp 	_SCCompareLoop
.3774					_SCSameToEndShortest
.3774	a0 00		ldy #$00			ldy 	#0 							; compare len(s1) - len(s2)
.3776	38		sec				sec
.3777	b1 2a		lda ($2a),y			lda 	(temp0),y
.3779	f1 2c		sbc ($2c),y			sbc 	(temp1),y
.377b					_SCReturnResult:
.377b	08		php				php 								; set return to zero preserving PSW.
.377c	a2 00		ldx #$00			ldx 	#0
.377e	28		plp				plp
.377f	f0 05		beq $3786			beq 	_SCExit 					; two values equal, then exit
.3781	ca		dex				dex 								; X = $FF
.3782	90 02		bcc $3786			bcc 	_SCExit 					; if 1st < 2nd then -1
.3784	a2 01		ldx #$01			ldx 	#1 							; X = $01 if greater
.3786					_SCExit:
.3786	68		pla				pla
.3787	a8		tay				tay
.3788	68		pla				pla
.3789	60		rts				rts
.378a					CopyStringPair:
.378a	b5 51		lda $51,x			lda 	esInt0+1,x
.378c	85 2c		sta $2c				sta 	temp1
.378e	b5 59		lda $59,x			lda 	esInt1+1,x
.3790	85 2d		sta $2d				sta 	temp1+1
.3792					CopyStringTop:
.3792	b5 50		lda $50,x			lda 	esInt0,x
.3794	85 2a		sta $2a				sta 	temp0
.3796	b5 58		lda $58,x			lda 	esInt1,x
.3798	85 2b		sta $2b				sta 	temp0+1
.379a	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/functions/concat.asm

.379b					StringConcat:
.379b	aa		tax				tax									; stack pos in X
.379c	98		tya				tya
.379d	48		pha				pha
.379e	20 8a 37	jsr $378a			jsr 	CopyStringPair 				; temp0 and temp1 point to strings to concat.
.37a1	38		sec				sec 								; calculate alloc strings. lengths added + 1 for size.
.37a2	a0 00		ldy #$00			ldy 	#0
.37a4	b1 2a		lda ($2a),y			lda 	(temp0),y
.37a6	71 2c		adc ($2c),y			adc 	(temp1),y
.37a8	b0 1c		bcs $37c6			bcs 	_SCError 					; just too many characters here.
.37aa	c9 fc		cmp #$fc			cmp 	#MaxStringSize
.37ac	b0 18		bcs $37c6			bcs 	_SCError
.37ae	20 ea 37	jsr $37ea			jsr 	AllocateSoftString 			; allocate soft string memory, set pointer.
.37b1	20 e1 37	jsr $37e1			jsr 	CopySoftToStack 			; copy that to the stack.
.37b4	20 cb 37	jsr $37cb			jsr 	SCCopyTemp0 				; copy temp0
.37b7	a5 2c		lda $2c				lda 	temp1 						; copy temp1 to temp0
.37b9	85 2a		sta $2a				sta 	temp0
.37bb	a5 2d		lda $2d				lda 	temp1+1
.37bd	85 2b		sta $2b				sta 	temp0+1
.37bf	20 cb 37	jsr $37cb			jsr 	SCCopyTemp0 				; copy temp0 e.g. what was temp1.
.37c2	68		pla				pla
.37c3	a8		tay				tay
.37c4	8a		txa				txa 								; and A
.37c5	60		rts				rts
.37c6					_SCError:
.37c6	a2 0d		ldx #$0d			ldx 	#ErrorID_StrLen
.37c8	20 18 15	jsr $1518		jsr	errorHandler
.37cb					SCCopyTemp0:
.37cb	a0 00		ldy #$00			ldy 	#0 							; put count in temp2
.37cd	b1 2a		lda ($2a),y			lda 	(temp0),y
.37cf	85 2e		sta $2e				sta 	temp2
.37d1					_SCCopyLoop:
.37d1	a5 2e		lda $2e				lda 	temp2 						; done the lot
.37d3	f0 0b		beq $37e0			beq 	_SCCopyExit
.37d5	c6 2e		dec $2e				dec 	temp2
.37d7	c8		iny				iny 								; get next char
.37d8	b1 2a		lda ($2a),y			lda 	(temp0),y
.37da	20 10 38	jsr $3810			jsr 	WriteSoftString 			; write to soft string.
.37dd	4c d1 37	jmp $37d1			jmp 	_SCCopyLoop
.37e0					_SCCopyExit:
.37e0	60		rts				rts
.37e1					CopySoftToStack:
.37e1	a5 39		lda $39				lda 	SoftMemAlloc 				; copy the memory allocation pointer to the stack.
.37e3	95 50		sta $50,x			sta 	esInt0,x 					; type is already string.
.37e5	a5 3a		lda $3a				lda 	SoftMemAlloc+1
.37e7	95 58		sta $58,x			sta 	esInt1,x
.37e9	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/functions/memory.asm

.0039					softMemAlloc:
>0039							.fill 	2  							; if MSB is zero needs resetting on allocation.
.37ea					AllocateSoftString:
.37ea	85 32		sta $32				sta 	tempShort 					; save count
.37ec	98		tya				tya
.37ed	48		pha				pha
.37ee	a5 3a		lda $3a				lda 	softMemAlloc+1 				; if the high byte is zero, it needs allocating.
.37f0	d0 09		bne $37fb			bne 	_ASSDone
.37f2	a5 33		lda $33				lda 	highMemory 					; reset the soft memory alloc pointer.
.37f4	85 39		sta $39				sta 	softMemAlloc 				; to speed up slightly, we only reset this when we first need it
.37f6	a4 34		ldy $34				ldy 	highMemory+1 				; but it needs to be reset before each command.
.37f8	88		dey				dey 								; it is set to 1/4k below high memory, allowing space
.37f9	84 3a		sty $3a				sty 	softMemAlloc+1 				; for a concreted string.
.37fb					_ASSDone:
.37fb	38		sec				sec 								; allocate downwards enough memory
.37fc	a5 39		lda $39				lda 	softMemAlloc 				; subtract the memory requirements in A from
.37fe	e5 32		sbc $32				sbc 	tempShort 					; the soft memory pointer
.3800	85 39		sta $39				sta 	softMemAlloc
.3802	a5 3a		lda $3a				lda 	softMemAlloc+1
.3804	e9 00		sbc #$00			sbc 	#0
.3806	85 3a		sta $3a				sta 	softMemAlloc+1
.3808	a9 00		lda #$00			lda 	#0 							; empty that string, set the length = 0.
.380a	a8		tay				tay
.380b	91 39		sta ($39),y			sta 	(softMemAlloc),y
.380d	68		pla				pla
.380e	a8		tay				tay
.380f	60		rts				rts
.3810					WriteSoftString:
.3810	84 32		sty $32				sty 	tempShort 					; save Y
.3812	48		pha				pha 								; save character on stack
.3813	a0 00		ldy #$00			ldy 	#0 							; get and bump length
.3815	b1 39		lda ($39),y			lda 	(softMemAlloc),y
.3817	18		clc				clc
.3818	69 01		adc #$01			adc 	#1
.381a	91 39		sta ($39),y			sta 	(softMemAlloc),y
.381c	a8		tay				tay 								; offset in Y
.381d	68		pla				pla 								; get char and write.
.381e	91 39		sta ($39),y			sta 	(softMemAlloc),y
.3820	a4 32		ldy $32				ldy 	tempShort 					; restore Y and exit.
.3822	60		rts				rts
.3823					StrClone:
.3823	aa		tax				tax 								; set up stack.
.3824	98		tya				tya
.3825	48		pha				pha
.3826	a0 00		ldy #$00			ldy 	#0 							; get length, add 1 for length
.3828	b1 2a		lda ($2a),y			lda 	(temp0),y 					; this is the bytes required.
.382a	18		clc				clc
.382b	69 01		adc #$01			adc 	#1
.382d	20 ea 37	jsr $37ea			jsr 	AllocateSoftString 			; allocate soft memory
.3830	a5 39		lda $39				lda 	softMemAlloc 				; copy that address to TOS
.3832	95 50		sta $50,x			sta 	esInt0,x
.3834	a5 3a		lda $3a				lda 	softMemAlloc+1
.3836	95 58		sta $58,x			sta 	esInt1,x
.3838	a9 00		lda #$00			lda 	#0 							; zero upper 2 bytes
.383a	95 60		sta $60,x			sta 	esInt2,x
.383c	95 68		sta $68,x			sta 	esInt3,x
.383e	a9 40		lda #$40			lda 	#$40 						; set type to string.
.3840	95 48		sta $48,x			sta 	esType,x
.3842	20 cb 37	jsr $37cb			jsr 	SCCopyTemp0 				; copy temp0 string to soft memory copy (concat.asm)
.3845	68		pla				pla
.3846	a8		tay				tay
.3847	8a		txa				txa
.3848	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/functions/setcase.asm

.3849					CaseString:
.3849	48		pha				pha 								; save A and copy to X
.384a	aa		tax				tax
.384b	98		tya				tya
.384c	48		pha				pha
.384d	20 92 37	jsr $3792			jsr 	CopyStringTop 				; target string -> temp0
.3850	a0 00		ldy #$00			ldy 	#0
.3852	b1 2a		lda ($2a),y			lda 	(temp0),y  					; get length,
.3854	18		clc				clc
.3855	69 01		adc #$01			adc 	#1 							; one more for length byte
.3857	20 ea 37	jsr $37ea			jsr 	AllocateSoftString 			; allocate soft string memory, set pointer.
.385a	20 e1 37	jsr $37e1			jsr 	CopySoftToStack 			; copy that to the stack.
.385d	a0 00		ldy #$00			ldy 	#0
.385f	b1 2a		lda ($2a),y			lda 	(temp0),y 					; count to copy in X
.3861	aa		tax				tax
.3862					_CSCopy:
.3862	e0 00		cpx #$00			cpx 	#0 							; finished if 0.
.3864	f0 24		beq $388a			beq 	_CSExit
.3866	ca		dex				dex
.3867	c8		iny				iny
.3868	68		pla				pla 								; check direction
.3869	48		pha				pha
.386a	f0 0c		beq $3878			beq 	_CSUpper
.386c	b1 2a		lda ($2a),y			lda 	(temp0),y 					; lower$() code
.386e	c9 41		cmp #$41			cmp 	#"A"
.3870	90 12		bcc $3884			bcc 	_CSWrite
.3872	c9 5b		cmp #$5b			cmp 	#"Z"+1
.3874	b0 0e		bcs $3884			bcs 	_CSWrite
.3876	90 0a		bcc $3882			bcc 	_CSFlipWrite
.3878					_CSUpper:
.3878	b1 2a		lda ($2a),y			lda 	(temp0),y 					; upper$() code
.387a	c9 61		cmp #$61			cmp 	#"a"
.387c	90 06		bcc $3884			bcc 	_CSWrite
.387e	c9 7b		cmp #$7b			cmp 	#"z"+1
.3880	b0 02		bcs $3884			bcs 	_CSWrite
.3882					_CSFlipWrite:
.3882	49 20		eor #$20			eor 	#"A"^"a" 					; switch case.
.3884					_CSWrite:
.3884	20 10 38	jsr $3810			jsr 	WriteSoftString 			; add to soft string.
.3887	4c 62 38	jmp $3862			jmp 	_CSCopy
.388a					_CSExit:
.388a	68		pla				pla
.388b	a8		tay				tay
.388c	68		pla				pla
.388d	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/functions/substring.asm

.388e					StringSubstring:
.388e	48		pha				pha
.388f	aa		tax				tax 								; access stack.
.3890	98		tya				tya
.3891	48		pha				pha
.3892	20 92 37	jsr $3792			jsr 	CopyStringTop 				; point temp0 to the string.
.3895	a0 00		ldy #$00			ldy 	#0 							; get length.
.3897	b1 2a		lda ($2a),y			lda 	(temp0),Y
.3899	85 2c		sta $2c				sta 	temp1
.389b	b5 51		lda $51,x			lda 	esInt0+1,x 					; get the initial offset
.389d	c5 2c		cmp $2c				cmp 	temp1 						; return "" if > length.
.389f	f0 02		beq $38a3			beq 	_SSBOkay
.38a1	b0 2a		bcs $38cd			bcs 	_SSBReturnNull
.38a3					_SSBOkay:
.38a3	a5 2c		lda $2c				lda 	temp1 						; get the total length +1
.38a5	18		clc				clc
.38a6	69 01		adc #$01			adc 	#1
.38a8	38		sec				sec
.38a9	f5 51		sbc $51,x			sbc 	esInt0+1,x 					; the anything >= this is bad - max size
.38ab	d5 52		cmp $52,x			cmp 	esInt0+2,x  				; check bad >= required
.38ad	90 02		bcc $38b1			bcc		_SSBTrunc
.38af	b5 52		lda $52,x			lda 	esInt0+2,x
.38b1					_SSBTrunc:
.38b1	85 2d		sta $2d				sta 	temp1+1 					; characters to copy.
.38b3	18		clc				clc
.38b4	69 01		adc #$01			adc 	#1 							; add 1
.38b6	20 ea 37	jsr $37ea			jsr 	AllocateSoftString 			; allocate soft string memory, set pointer.
.38b9	20 e1 37	jsr $37e1			jsr 	CopySoftToStack 			; copy that to the stack.
.38bc	b4 51		ldy $51,x			ldy 	esInt0+1,x 					; get initial position of char to copy
.38be					_SSBCopyLoop:
.38be	a5 2d		lda $2d				lda 	temp1+1 					; done them all
.38c0	f0 0e		beq $38d0			beq 	_SSBExit
.38c2	c6 2d		dec $2d				dec 	temp1+1
.38c4	b1 2a		lda ($2a),y			lda 	(temp0),y 					; get and write character
.38c6	20 10 38	jsr $3810			jsr 	WriteSoftString
.38c9	c8		iny				iny
.38ca	4c be 38	jmp $38be			jmp 	_SSBCopyLoop
.38cd					_SSBReturnNull:
.38cd	20 d4 38	jsr $38d4			jsr 	ReturnNull
.38d0					_SSBExit:
.38d0	68		pla				pla
.38d1	a8		tay				tay
.38d2	68		pla				pla
.38d3	60		rts				rts
.38d4					ReturnNull:
.38d4	a9 00		lda #$00			lda 	#0 							; clear null string
.38d6	8d ce 0a	sta $0ace			sta 	NullString
.38d9	a9 ce		lda #$ce			lda 	#NullString & $FF 			; set a pointer to it
.38db	95 50		sta $50,x			sta 	esInt0,x
.38dd	a9 0a		lda #$0a			lda 	#NullString >> 8
.38df	95 58		sta $58,x			sta 	esInt1,x
.38e1	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/functions/write.asm

.0ce3					srcStrLen:
>0ce3							.fill 	1
.38e2					StringWrite:
.38e2	aa		tax				tax
.38e3	48		pha				pha
.38e4	98		tya				tya
.38e5	48		pha				pha
.38e6	20 0d 39	jsr $390d			jsr 	CheckOverwriteCurrent
.38e9	b0 0d		bcs $38f8			bcs		_SWCopyCurrent
.38eb	20 4b 39	jsr $394b			jsr 	RequiresConcretion
.38ee	90 0e		bcc $38fe			bcc 	_SWWriteReference
.38f0	20 ae 39	jsr $39ae			jsr 	CheckSpecialConcretion
.38f3	b0 09		bcs $38fe			bcs 	_SWWriteReference
.38f5	20 5f 39	jsr $395f			jsr 	AllocateHardMemory
.38f8					_SWCopyCurrent:
.38f8	20 92 39	jsr $3992			jsr 	CopyStringToHardMemory
.38fb	4c 09 39	jmp $3909			jmp 	_SWExit
.38fe					_SWWriteReference
.38fe	a0 00		ldy #$00			ldy 	#0
.3900	a5 2a		lda $2a				lda 	temp0
.3902	91 2c		sta ($2c),y			sta 	(temp1),y
.3904	c8		iny				iny
.3905	a5 2b		lda $2b				lda 	temp0+1
.3907	91 2c		sta ($2c),y			sta 	(temp1),y
.3909					_SWExit:
.3909	68		pla				pla
.390a	a8		tay				tay
.390b	68		pla				pla
.390c	60		rts				rts
.390d					CheckOverwriteCurrent:
.390d	a0 00		ldy #$00			ldy 	#0 						; get address of string being written to temp0
.390f	b5 59		lda $59,x			lda 	esInt1+1,x
.3911	85 2b		sta $2b				sta 	temp0+1
.3913	b5 51		lda $51,x			lda 	esInt0+1,x
.3915	85 2a		sta $2a				sta 	temp0
.3917	b1 2a		lda ($2a),y			lda 	(temp0),y 				; get length of string being copied and save it.
.3919	8d e3 0c	sta $0ce3			sta 	srcStrLen
.391c	b5 50		lda $50,x			lda 	esInt0,x 				; copy where the final address it being written to temp1.
.391e	85 2c		sta $2c				sta 	temp1 					; e.g. if it is ax$ then temp1 will point to the ax$
.3920	b5 58		lda $58,x			lda 	esInt1,x 				; data record + 5
.3922	85 2d		sta $2d				sta 	temp1+1
.3924	a0 01		ldy #$01			ldy 	#1 						; get the MSB of the address of string currently stored there.
.3926	b1 2c		lda ($2c),y			lda 	(temp1),y
.3928	c5 34		cmp $34				cmp 	highMemory+1 			; if < high memory then it cannot be something stored
.392a	90 1b		bcc $3947			bcc 	_COCFail 				; in hard memory.
.392c	a0 00		ldy #$00			ldy 	#0 						; copy target address - 1 into temp2
.392e	b1 2c		lda ($2c),y			lda 	(temp1),y 				; when allocating hard memory, the overall size is
.3930	e9 01		sbc #$01			sbc 	#1 						; in the previous byte.
.3932	85 2e		sta $2e				sta 	temp2
.3934	c8		iny				iny
.3935	b1 2c		lda ($2c),y			lda 	(temp1),y
.3937	e9 00		sbc #$00			sbc 	#0
.3939	85 2f		sta $2f				sta 	temp2+1
.393b	a0 00		ldy #$00			ldy 	#0 						; how large is this physical chunk.
.393d	b1 2e		lda ($2e),y			lda 	(temp2),y
.393f	38		sec				sec  							; maximum character capacity.
.3940	e9 02		sbc #$02			sbc 	#2
.3942	cd e3 0c	cmp $0ce3			cmp 	srcStrLen 				; if >= the required length
.3945	b0 02		bcs $3949			bcs 	_COCCanReuse
.3947					_COCFail:
.3947	18		clc				clc
.3948	60		rts				rts
.3949					_COCCanReuse:
.3949	38		sec				sec
.394a	60		rts				rts
.394b					RequiresConcretion:
.394b	a5 2b		lda $2b				lda 	temp0+1 				; get MSB of address of string to be written
.394d	c5 34		cmp $34				cmp 	highMemory+1 			; if >= high memory it is concreted
.394f	b0 0a		bcs $395b			bcs 	_RCSucceed 				; so it needs concreting again - duplication.
.3951	a5 3a		lda $3a				lda 	softMemAlloc+1 			; have we allocated any soft memory yet ?
.3953	f0 08		beq $395d			beq 	_RCFail 				; if not, this cannot be soft memory.
.3955	a5 2b		lda $2b				lda 	temp0+1 				; get MSB of address of string to be written
.3957	c5 3a		cmp $3a				cmp 	softMemAlloc+1 			; if >= soft mem alloc it is either soft
.3959	90 02		bcc $395d			bcc 	_RCFail 				; so concreting
.395b					_RCSucceed:
.395b	38		sec				sec
.395c	60		rts				rts
.395d					_RCFail:
.395d	18		clc				clc
.395e	60		rts				rts
.395f					AllocateHardMemory:
.395f	98		tya				tya
.3960	48		pha				pha
.3961	ad e3 0c	lda $0ce3			lda 	srcStrLen 				; characters in string
.3964	69 0a		adc #$0a			adc 	#1+1+8 					; one for hard memory size, one for string size, extra for expansion
.3966	b0 04		bcs $396c			bcs 	_AHMSetMax 				; max out that amount.
.3968	c9 fe		cmp #$fe			cmp 	#MaxStringSize+2
.396a	90 02		bcc $396e			bcc 	_AHMIsOkay
.396c					_AHMSetMax:
.396c	a9 fe		lda #$fe			lda 	#MaxStringSize+2
.396e					_AHMIsOkay:
.396e	48		pha				pha	 							; save size to be allocated
.396f	49 ff		eor #$ff			eor 	#$FF 					; complement and add to high Memory
.3971	38		sec				sec  							; and copy result to TOS as target address.
.3972	65 33		adc $33				adc 	highMemory
.3974	85 33		sta $33				sta 	highMemory
.3976	a5 34		lda $34				lda 	highMemory+1
.3978	69 ff		adc #$ff			adc 	#$FF
.397a	85 34		sta $34				sta 	highMemory+1
.397c	a0 00		ldy #$00			ldy 	#0 						; Y = 0
.397e	68		pla				pla 							; get the total size of the storage block
.397f	91 33		sta ($33),y			sta 	(highMemory),y 			; and set it
.3981	18		clc				clc
.3982	a5 33		lda $33				lda		highMemory 				; point the target address to the byte after this.
.3984	69 01		adc #$01			adc 	#1
.3986	91 2c		sta ($2c),y			sta 	(temp1),y
.3988	a5 34		lda $34				lda 	highMemory+1
.398a	69 00		adc #$00			adc 	#0
.398c	c8		iny				iny
.398d	91 2c		sta ($2c),y			sta 	(temp1),y
.398f	68		pla				pla
.3990	a8		tay				tay
.3991	60		rts				rts
.3992					CopyStringToHardMemory:
.3992	98		tya				tya
.3993	48		pha				pha
.3994	a0 00		ldy #$00			ldy 	#0 						; copy target address to temp2
.3996	b1 2c		lda ($2c),y			lda 	(temp1),y
.3998	85 2e		sta $2e				sta 	temp2
.399a	c8		iny				iny
.399b	b1 2c		lda ($2c),y			lda 	(temp1),y
.399d	85 2f		sta $2f				sta 	temp2+1
.399f	ac e3 0c	ldy $0ce3			ldy 	srcStrLen 				; copy this + 1 characters, (length too) hence $FF compare
.39a2					_CSTHMLoop:
.39a2	b1 2a		lda ($2a),y			lda 	(temp0),y
.39a4	91 2e		sta ($2e),y			sta 	(temp2),y
.39a6	88		dey				dey
.39a7	c0 ff		cpy #$ff			cpy 	#$FF 					; this does the +1
.39a9	d0 f7		bne $39a2			bne 	_CSTHMLoop
.39ab	68		pla				pla
.39ac	a8		tay				tay
.39ad	60		rts				rts
.39ae					CheckSpecialConcretion:
.39ae	ad e3 0c	lda $0ce3			lda 	srcStrLen 				; check string is null e.g. length = 0
.39b1	f0 02		beq $39b5			beq 	_CSCNullString
.39b3	18		clc				clc
.39b4	60		rts				rts
.39b5					_CSCNullString:
.39b5	a9 00		lda #$00			lda 	#0 						; by always returning this address we don't waste
.39b7	8d ce 0a	sta $0ace			sta 	NullString		 		; storage on null strings.
.39ba	a9 ce		lda #$ce			lda 	#(NullString) & $FF
.39bc	85 2a		sta $2a				sta 	temp0
.39be	a9 0a		lda #$0a			lda 	#(NullString) >> 8
.39c0	85 2b		sta $2b				sta 	1+(temp0)
.39c2	38		sec				sec
.39c3	60		rts				rts

;******  Return to file: string/string.asm

.39c4					stringHandler:
.39c4	7c c7 39	jmp ($39c7,x)			jmp 	(stringVectors,x)
.39c7					stringVectors:
>39c7	d9 39					.word _DummyControlHandler ; index 0
>39c9	27 37					.word StringChrs           ; index 2
>39cb	23 38					.word StrClone             ; index 4
>39cd	9b 37					.word StringConcat         ; index 6
>39cf	36 37					.word StringNull           ; index 8
>39d1	52 37					.word STRCompare           ; index 10
>39d3	49 38					.word CaseString           ; index 12
>39d5	8e 38					.word StringSubstring      ; index 14
>39d7	e2 38					.word StringWrite          ; index 16
.39d9					_DummyControlHandler:
.39d9	60		rts			rts

;******  Return to file: basic.asm

.39da					section_end_string:
.39da					section_start_tokeniser:

;******  Processing file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/detokenise/detokenise.asm

.0ce4					deTokeniseVector:
>0ce4							.fill 	2
.0ce6					lastCharacterClass:
>0ce6							.fill 	1
.0ce7					indent:
>0ce7							.fill 	1
.39da					ListLine:
.39da	48		pha				pha								; enter here to list to console. sets the output vector
.39db	a9 12		lda #$12			lda 	#(deTokenPrint) & $FF
.39dd	8d e4 0c	sta $0ce4			sta 	deTokeniseVector
.39e0	a9 3b		lda #$3b			lda 	#(deTokenPrint) >> 8
.39e2	8d e5 0c	sta $0ce5			sta 	1+(deTokeniseVector)
.39e5	68		pla				pla
.39e6					Detokenise:
.39e6	18		clc				clc 							; space required for line number.
.39e7	69 06		adc #$06			adc 	#6
.39e9	8d e7 0c	sta $0ce7			sta 	indent
.39ec	a9 ff		lda #$ff			lda 	#$FF 					; last thing printed is a dummy value.
.39ee	8d e6 0c	sta $0ce6			sta 	lastCharacterClass
.39f1	a2 02		ldx #$02			ldx 	#2
.39f3	a9 00		lda #$00			lda 	#0 						; clear upper two bytes
.39f5	95 60		sta $60,x			sta 	esInt2,x
.39f7	95 68		sta $68,x			sta 	esInt3,x
.39f9	a0 01		ldy #$01			ldy 	#1 						; copy line number to stack,2 (as using stack 0,1 for list range)
.39fb	b1 28		lda ($28),y			lda 	(codePtr),y
.39fd	95 50		sta $50,x			sta 	esInt0,x
.39ff	c8		iny				iny
.3a00	b1 28		lda ($28),y			lda 	(codePtr),y
.3a02	95 58		sta $58,x			sta 	esInt1,x
.3a04	a9 84		lda #$84			lda 	#LTYLineNumber
.3a06	20 ed 3a	jsr $3aed			jsr 	ListOutputCharacter
.3a09	a9 0a		lda #$0a			lda 	#10 					; base 10
.3a0b	20 b1 3a	jsr $3ab1			jsr 	DTPrintInteger 			; print as integer.
.3a0e	a0 00		ldy #$00			ldy 	#0 						; get length
.3a10	b1 2a		lda ($2a),y			lda 	(temp0),y 				; into X
.3a12	aa		tax				tax
.3a13					_DTPadOut:
.3a13	a9 20		lda #$20			lda 	#" " 					; pad out to indent.
.3a15	20 ed 3a	jsr $3aed			jsr 	ListOutputCharacter
.3a18	e8		inx				inx
.3a19	ec e7 0c	cpx $0ce7			cpx 	indent
.3a1c	d0 f5		bne $3a13			bne 	_DTPadOut
.3a1e	a0 03		ldy #$03			ldy 	#3 						; start position.
.3a20					_DTListLoop:
.3a20	b1 28		lda ($28),y			lda 	(codePtr),y
.3a22	c9 85		cmp #$85			cmp 	#TOK_STR 				; Inline string.
.3a24	f0 5e		beq $3a84			beq 	_DTIsString
.3a26	c9 84		cmp #$84			cmp 	#TOK_FPC 				; Floating point
.3a28	f0 56		beq $3a80			beq 	_DTIsFloat
.3a2a	c9 c5		cmp #$c5			cmp 	#TKW_AMP 				; & hex marker
.3a2c	f0 16		beq $3a44			beq 	_DTHexConstant
.3a2e	c9 80		cmp #$80			cmp 	#TOK_EOL 				; End of Line
.3a30	d0 06		bne $3a38			bne 	_DTNotEnd
.3a32	a9 ff		lda #$ff			lda 	#255 					; print CR
.3a34	20 ed 3a	jsr $3aed			jsr 	ListOutputCharacter
.3a37	60		rts				rts
.3a38					_DTNotEnd:
.3a38	c9 00		cmp #$00			cmp 	#0
.3a3a	30 38		bmi $3a74			bmi 	_DTIsToken
.3a3c	c9 40		cmp #$40			cmp 	#$40
.3a3e	90 3a		bcc $3a7a			bcc 	_DTIsIdentifier
.3a40	a9 0a		lda #$0a			lda 	#10 					; this is the base, unsigned decimal
.3a42	d0 0d		bne $3a51			bne 	_DTConstant
.3a44					_DTHexConstant:
.3a44	a9 26		lda #$26			lda 	#"&"
.3a46	20 ed 3a	jsr $3aed			jsr 	ListOutputCharacter
.3a49	c8		iny				iny
.3a4a	a9 01		lda #$01			lda 	#1 						; switch to spaces so &xxxx is treated like a number.
.3a4c	20 2e 3b	jsr $3b2e			jsr 	DTSwitchMode
.3a4f	a9 10		lda #$10			lda 	#16						; print line unsigned hex
.3a51					_DTConstant:
.3a51	48		pha				pha
.3a52	a9 00		lda #$00			lda 	#0 						; now constant, may need spaces
.3a54	20 2e 3b	jsr $3b2e			jsr 	DTSwitchMode
.3a57	a9 86		lda #$86			lda 	#LTYConstant
.3a59	20 ed 3a	jsr $3aed			jsr 	ListOutputCharacter
.3a5c	a2 02		ldx #$02			ldx 	#2 						; get its value
.3a5e	8a		txa				txa
.3a5f	a2 10		ldx #$10		ldx	#16
.3a61	20 07 37	jsr $3707		jsr	mainHandler
.3a64	aa		tax				tax
.3a65	68		pla				pla 							; get base back
.3a66	85 32		sta $32				sta 	tempShort
.3a68	98		tya				tya
.3a69	48		pha				pha
.3a6a	a5 32		lda $32				lda 	tempShort 				; print in base A stck level X
.3a6c	20 b1 3a	jsr $3ab1			jsr 	DTPrintInteger
.3a6f	68		pla				pla
.3a70	a8		tay				tay
.3a71	4c 20 3a	jmp $3a20			jmp 	_DTListLoop
.3a74					_DTIsToken:
.3a74	20 87 3b	jsr $3b87			jsr 	DTDecodeToken
.3a77	4c 20 3a	jmp $3a20			jmp 	_DTListLoop
.3a7a					_DTIsIdentifier:
.3a7a	20 40 3b	jsr $3b40			jsr 	DTIdentifier
.3a7d	4c 20 3a	jmp $3a20			jmp 	_DTListLoop
.3a80					_DTIsFloat:
>3a80	db						.byte 	$DB
.3a81	4c 80 3a	jmp $3a80			jmp 	_DTIsFloat
.3a84					_DTIsString:
.3a84	a9 01		lda #$01			lda 	#1 							; now punctuation, may need spaces
.3a86	20 2e 3b	jsr $3b2e			jsr 	DTSwitchMode
.3a89	a9 81		lda #$81			lda 	#LTYString
.3a8b	20 ed 3a	jsr $3aed			jsr 	ListOutputCharacter
.3a8e	a9 22		lda #$22			lda 	#'"'						; open quote
.3a90	20 ed 3a	jsr $3aed			jsr 	ListOutputCharacter
.3a93	a2 02		ldx #$02			ldx 	#2 							; evaluate string to TOS2.
.3a95	8a		txa				txa
.3a96	a2 10		ldx #$10		ldx	#16
.3a98	20 07 37	jsr $3707		jsr	mainHandler
.3a9b	aa		tax				tax
.3a9c	b5 50		lda $50,x			lda 	esInt0,x 					; copy string address to temp0
.3a9e	85 2a		sta $2a				sta 	temp0
.3aa0	b5 58		lda $58,x			lda 	esInt1,x
.3aa2	85 2b		sta $2b				sta 	temp0+1
.3aa4	a9 00		lda #$00			lda 	#0 							; don't capitalise.
.3aa6	20 c3 3a	jsr $3ac3			jsr 	DTPrintLengthPrefix
.3aa9	a9 22		lda #$22			lda 	#'"'
.3aab	20 ed 3a	jsr $3aed			jsr 	ListOutputCharacter
.3aae	4c 20 3a	jmp $3a20			jmp 	_DTListLoop

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/detokenise/dtprint.asm

.0ce8					tPrintCount:
>0ce8							.fill 	1
.3ab1					DTPrintInteger:
.3ab1	48		pha				pha									; save base
.3ab2	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.3ab4	85 2a		sta $2a				sta 	temp0
.3ab6	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.3ab8	85 2b		sta $2b				sta 	1+(temp0)
.3aba	68		pla				pla
.3abb	a8		tay				tay
.3abc	8a		txa				txa
.3abd	a2 12		ldx #$12		ldx	#18
.3abf	20 07 37	jsr $3707		jsr	mainHandler
.3ac2	aa		tax				tax 								; then drop through here.
.3ac3					DTPrintLengthPrefix:
.3ac3	aa		tax				tax 								; A = 0 = don't case convert.
.3ac4	98		tya				tya
.3ac5	48		pha				pha
.3ac6	a0 00		ldy #$00			ldy 	#0 							; get string length = chars to print.
.3ac8	b1 2a		lda ($2a),y			lda 	(temp0),y
.3aca	8d e8 0c	sta $0ce8			sta 	tPrintCount
.3acd	f0 1b		beq $3aea			beq 	_DTPLPExit 					; empty string
.3acf					_DTPLPLoop:
.3acf	c8		iny				iny 								; get next.
.3ad0	b1 2a		lda ($2a),y			lda 	(temp0),y
.3ad2	29 7f		and #$7f			and 	#$7F
.3ad4	e0 00		cpx #$00			cpx 	#0 							; skip if not case converting
.3ad6	f0 0a		beq $3ae2			beq 	_DTPLPNoCase
.3ad8	c9 41		cmp #$41			cmp 	#"A" 						; if converting UC -> LC
.3ada	90 06		bcc $3ae2			bcc 	_DTPLPNoCase
.3adc	c9 5b		cmp #$5b			cmp 	#"Z"+1
.3ade	b0 02		bcs $3ae2			bcs 	_DTPLPNoCase
.3ae0	49 20		eor #$20			eor 	#"A"^"a"
.3ae2					_DTPLPNoCase
.3ae2	20 ed 3a	jsr $3aed			jsr 	ListOutputCharacter 		; call handler
.3ae5	ce e8 0c	dec $0ce8			dec 	tPrintCount 				; do all the characters
.3ae8	d0 e5		bne $3acf			bne 	_DTPLPLoop
.3aea					_DTPLPExit:
.3aea	68		pla				pla
.3aeb	a8		tay				tay
.3aec	60		rts				rts
.3aed					ListOutputCharacter:
.3aed	85 32		sta $32				sta 	tempShort
.3aef	48		pha				pha
.3af0	8a		txa				txa
.3af1	48		pha				pha
.3af2	98		tya				tya
.3af3	48		pha				pha
.3af4	a5 32		lda $32				lda 	tempShort 					; convert ASCII 6 bit (0-31) to 7 bit.
.3af6	c9 20		cmp #$20			cmp 	#32
.3af8	b0 0c		bcs $3b06			bcs		_LOCHiBit
.3afa	09 40		ora #$40			ora 	#64 						; conversion
.3afc	c9 40		cmp #$40			cmp 	#64							; make l/c
.3afe	f0 06		beq $3b06			beq 	_LOCHiBit
.3b00	c9 5b		cmp #$5b			cmp 	#65+26
.3b02	b0 02		bcs $3b06			bcs 	_LOCHiBit
.3b04	69 20		adc #$20			adc 	#32
.3b06					_LOCHiBit:
.3b06	20 0f 3b	jsr $3b0f			jsr 	_LOCCallVector				; call o/p handler routine
.3b09	68		pla				pla
.3b0a	a8		tay				tay
.3b0b	68		pla				pla
.3b0c	aa		tax				tax
.3b0d	68		pla				pla
.3b0e					_LOCExit:
.3b0e	60		rts				rts
.3b0f					_LOCCallVector:
.3b0f	6c e4 0c	jmp ($0ce4)			jmp 	(deTokeniseVector)
.3b12					deTokenPrint:
.3b12	c9 00		cmp #$00			cmp 	#0 							; if bit 7 sets ink colour
.3b14	30 06		bmi $3b1c			bmi 	_dtpInk
.3b16	a2 16		ldx #$16		ldx	#22
.3b18	20 f6 14	jsr $14f6		jsr	deviceHandler
.3b1b	60		rts				rts
.3b1c	c9 ff		cmp #$ff	_dtpInk:cmp 	#255 						; e.g. herhe, get ink and set it
.3b1e	f0 08		beq $3b28			beq 	_dtpCR						; except $FF => CRLF
.3b20	29 07		and #$07			and 	#7
.3b22	a2 08		ldx #$08		ldx	#8
.3b24	20 f6 14	jsr $14f6		jsr	deviceHandler
.3b27	60		rts				rts
.3b28					_dtpCR:
.3b28	a2 06		ldx #$06		ldx	#6
.3b2a	20 f6 14	jsr $14f6		jsr	deviceHandler
.3b2d	60		rts				rts
.3b2e					DTSwitchMode:
.3b2e	cd e6 0c	cmp $0ce6			cmp 	LastCharacterClass 			; if changed, update character class
.3b31	f0 04		beq $3b37			beq 	_DTSMNoChange
.3b33	8d e6 0c	sta $0ce6			sta 	LastCharacterClass
.3b36					_DTSMExit:
.3b36	60		rts				rts
.3b37					_DTSMNoChange:
.3b37	c9 01		cmp #$01			cmp 	#1 							; if didn't change to punctuation, two identifiers so we
.3b39	f0 fb		beq $3b36			beq 	_DTSMExit 					; need a space.
.3b3b	a9 20		lda #$20			lda 	#" "
.3b3d	4c ed 3a	jmp $3aed			jmp 	ListOutputCharacter

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/detokenise/identifier.asm

.3b40					DTIdentifier:
.3b40	a9 00		lda #$00			lda 	#0 							; now text, may need spaces
.3b42	20 2e 3b	jsr $3b2e			jsr 	DTSwitchMode
.3b45	a9 87		lda #$87			lda 	#LTYIdentifier
.3b47	20 ed 3a	jsr $3aed			jsr 	ListOutputCharacter
.3b4a					_DTILoop:
.3b4a	b1 28		lda ($28),y			lda 	(codePtr),y 				; output main bit of identifier.
.3b4c	c9 2d		cmp #$2d			cmp 	#"-"						; make - back to _
.3b4e	d0 02		bne $3b52			bne 	_DTINotUS
.3b50	a9 5f		lda #$5f			lda 	#"_"
.3b52					_DTINotUS:
.3b52	20 ed 3a	jsr $3aed			jsr 	ListOutputCharacter
.3b55	c8		iny				iny
.3b56	b1 28		lda ($28),y			lda 	(codePtr),y 				; until end identifier marker.
.3b58	c9 3a		cmp #$3a			cmp 	#$3A
.3b5a	90 ee		bcc $3b4a			bcc 	_DTILoop
.3b5c	c8		iny				iny
.3b5d	c9 3a		cmp #$3a			cmp 	#$3A 						; is it integer non array
.3b5f	f0 25		beq $3b86			beq 	_DTIExit 					; no postfix.
.3b61	48		pha				pha
.3b62	a9 01		lda #$01			lda  	#1 							; it ends in punctuation
.3b64	8d e6 0c	sta $0ce6			sta 	LastCharacterClass
.3b67	a9 82		lda #$82			lda 	#LTYPunctuation
.3b69	20 ed 3a	jsr $3aed			jsr 	ListOutputCharacter
.3b6c	68		pla				pla
.3b6d	c9 3b		cmp #$3b			cmp 	#$3B
.3b6f	f0 10		beq $3b81			beq 	_DTIArray
.3b71	4a		lsr a				lsr 	a 							; array flag in C
.3b72	08		php				php
.3b73	49 1e		eor #$1e			eor 	#$3C/2 						; check if $
.3b75	f0 02		beq $3b79			beq 	_DTIDollar
.3b77	a9 07		lda #$07			lda 	#"$"^"#" 					; this if #, 0 if $
.3b79					_DTIDollar:
.3b79	49 24		eor #$24			eor 	#"$"
.3b7b	20 ed 3a	jsr $3aed			jsr 	ListOutputCharacter
.3b7e	28		plp				plp
.3b7f	90 05		bcc $3b86			bcc 	_DTIExit
.3b81					_DTIArray:
.3b81	a9 28		lda #$28			lda 	#"("
.3b83	20 ed 3a	jsr $3aed			jsr 	ListOutputCharacter
.3b86					_DTIExit:
.3b86	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/detokenise/token.asm

.3b87					DTDecodeToken:
.3b87	a2 00		ldx #$00			ldx 	#0 							; table number to use
.3b89	b1 28		lda ($28),y			lda 	(codePtr),y
.3b8b	c9 84		cmp #$84			cmp 	#$84
.3b8d	b0 05		bcs $3b94			bcs 	_DTNotShift
.3b8f	29 03		and #$03			and 	#3 							; get the shift 1..3
.3b91	0a		asl a				asl 	a 							; put 2 x in X
.3b92	aa		tax				tax
.3b93	c8		iny				iny
.3b94					_DTNotShift:
.3b94	bd 96 3e	lda $3e96,x			lda 	TokenTableAddress,x 		; get the token table to use to decode it.
.3b97	85 2a		sta $2a				sta 	temp0 						; point into temp0
.3b99	bd 97 3e	lda $3e97,x			lda 	TokenTableAddress+1,x
.3b9c	85 2b		sta $2b				sta 	temp0+1
.3b9e	b1 28		lda ($28),y			lda 	(codePtr),y 				; get the token value.
.3ba0	c8		iny				iny 								; consume it.
.3ba1	aa		tax				tax
.3ba2	98		tya				tya
.3ba3	48		pha				pha
.3ba4					_DTFindText:
.3ba4	e0 86		cpx #$86			cpx 	#$86 						; finished ?
.3ba6	f0 11		beq $3bb9			beq 	_DTFoundText
.3ba8	ca		dex				dex
.3ba9	a0 00		ldy #$00			ldy 	#0 							; add length+1 to temp0
.3bab	38		sec				sec
.3bac	b1 2a		lda ($2a),y			lda 	(temp0),y
.3bae	65 2a		adc $2a				adc 	temp0
.3bb0	85 2a		sta $2a				sta 	temp0
.3bb2	90 f0		bcc $3ba4			bcc 	_DTFindText
.3bb4	e6 2b		inc $2b				inc 	temp0+1
.3bb6	4c a4 3b	jmp $3ba4			jmp 	_DTFindText
.3bb9					_DTFoundText:
.3bb9	a0 01		ldy #$01			ldy 	#1 							; get first character
.3bbb	b1 2a		lda ($2a),y			lda 	(temp0),y
.3bbd	29 7f		and #$7f			and 	#$7F 						; will have bit 7 set.
.3bbf	c9 41		cmp #$41			cmp 	#"A" 						; check for punctuation.
.3bc1	90 11		bcc $3bd4			bcc 	_DTIsPunctuation
.3bc3	c9 5b		cmp #$5b			cmp 	#"Z"+1
.3bc5	b0 0d		bcs $3bd4			bcs 	_DTIsPunctuation
.3bc7	a9 00		lda #$00			lda 	#0 							; now text, may need spaces
.3bc9	20 2e 3b	jsr $3b2e			jsr 	DTSwitchMode
.3bcc	a9 83		lda #$83			lda 	#LTYKeyword
.3bce	20 ed 3a	jsr $3aed			jsr 	ListOutputCharacter
.3bd1	4c de 3b	jmp $3bde			jmp 	_DTPrint
.3bd4					_DTIsPunctuation:
.3bd4	a9 01		lda #$01			lda 	#1 							; now punctuation, may need spaces
.3bd6	20 2e 3b	jsr $3b2e			jsr 	DTSwitchMode
.3bd9	a9 82		lda #$82			lda 	#LTYPunctuation
.3bdb	20 ed 3a	jsr $3aed			jsr 	ListOutputCharacter
.3bde					_DTPrint:
.3bde	a9 01		lda #$01			lda 	#1 							; fix case.
.3be0	20 c3 3a	jsr $3ac3			jsr 	DTPrintLengthPrefix 		; print it out.
.3be3	a0 00		ldy #$00			ldy 	#0
.3be5	b1 2a		lda ($2a),y			lda 	(temp0),y
.3be7	a8		tay				tay
.3be8	b1 2a		lda ($2a),y			lda 	(temp0),y
.3bea	29 7f		and #$7f			and 	#$7F 						; will have bit 7 set.
.3bec	c9 41		cmp #$41			cmp 	#"A" 						; check for punctuation.
.3bee	90 04		bcc $3bf4			bcc 	_DTIsNowPunctuation
.3bf0	c9 5b		cmp #$5b			cmp 	#"Z"+1
.3bf2	90 05		bcc $3bf9			bcc 	_DTPExit
.3bf4					_DTIsNowPunctuation:
.3bf4	a9 01		lda #$01			lda 	#1
.3bf6	8d e6 0c	sta $0ce6			sta		LastCharacterClass
.3bf9					_DTPExit:
.3bf9	68		pla				pla
.3bfa	a8		tay				tay
.3bfb	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/search.asm

.0ce9					currentSet:
>0ce9							.fill 	1
.3bfc					TokenSearch:
.3bfc	8a		txa				txa
.3bfd	48		pha				pha
.3bfe	98		tya				tya
.3bff	48		pha				pha
.3c00	a9 00		lda #$00			lda 	#0
.3c02	8d e9 0c	sta $0ce9			sta 	currentSet
.3c05					_TSLoop:
.3c05	ad e9 0c	lda $0ce9			lda 	currentSet 					; 2 x currentset in X
.3c08	0a		asl a				asl 	a
.3c09	aa		tax				tax
.3c0a	bd 96 3e	lda $3e96,x			lda 	TokenTableAddress,x 		; set temp0 to the table address
.3c0d	85 2a		sta $2a				sta 	temp0
.3c0f	bd 97 3e	lda $3e97,x			lda 	TokenTableAddress+1,x
.3c12	85 2b		sta $2b				sta 	temp0+1
.3c14	20 3b 3c	jsr $3c3b			jsr 	TokenSearchOne 				; search one table
.3c17	b0 0d		bcs $3c26			bcs 	_TSFound 					; found a token.
.3c19	ee e9 0c	inc $0ce9			inc 	currentSet 					; next set
.3c1c	ad e9 0c	lda $0ce9			lda 	currentSet
.3c1f	c9 04		cmp #$04			cmp 	#4
.3c21	d0 e2		bne $3c05			bne 	_TSLoop 					; back if not done all four.
.3c23	18		clc				clc 								; clear carry and exit
.3c24	90 10		bcc $3c36			bcc 	_TSExit
.3c26					_TSFound:
.3c26	48		pha				pha 								; save token
.3c27	ad e9 0c	lda $0ce9			lda 	currentSet					; if set zero no shift
.3c2a	f0 05		beq $3c31			beq 	_TSNoShift
.3c2c	09 80		ora #$80			ora 	#$80 						; Write as $81-$83
.3c2e	20 ec 3c	jsr $3cec			jsr 	TokenWrite
.3c31					_TSNoShift:
.3c31	68		pla				pla 								; get token back
.3c32	20 ec 3c	jsr $3cec			jsr 	TokenWrite 					; write it
.3c35	38		sec				sec 								; carry set indicating success
.3c36					_TSExit:
.3c36	68		pla				pla
.3c37	a8		tay				tay
.3c38	68		pla				pla
.3c39	aa		tax				tax
.3c3a	60		rts				rts
.3c3b					TokenSearchOne:
.3c3b	a2 86		ldx #$86			ldx 	#$86 						; current token being tested.
.3c3d					_TSOLoop:
.3c3d	a0 00		ldy #$00			ldy 	#0
.3c3f	b1 2a		lda ($2a),y			lda 	(temp0),y 					; get length of token
.3c41	f0 26		beq $3c69			beq 	_TSOFail 					; if zero, end of table
.3c43	cd cf 0a	cmp $0acf			cmp 	convertBuffer 				; length is the same, compare the text matches.
.3c46	f0 11		beq $3c59			beq 	_TSOCheckText
.3c48					_TSONext:
.3c48	e8		inx				inx 								; bump token
.3c49	a0 00		ldy #$00			ldy 	#0							; get length
.3c4b	b1 2a		lda ($2a),y			lda 	(temp0),y
.3c4d	38		sec				sec
.3c4e	65 2a		adc $2a				adc 	temp0 						; add to temp0 + 1
.3c50	85 2a		sta $2a				sta 	temp0
.3c52	90 e9		bcc $3c3d			bcc 	_TSOLoop
.3c54	e6 2b		inc $2b				inc 	temp0+1
.3c56	4c 3d 3c	jmp $3c3d			jmp 	_TSOLoop
.3c59					_TSOCheckText:
.3c59	a8		tay				tay 								; compare length downto 1.
.3c5a					_TSOCheckLoop:
.3c5a	b1 2a		lda ($2a),y			lda 	(temp0),y 					; use EOR to compare
.3c5c	59 cf 0a	eor $0acf,y			eor 	convertBuffer,y
.3c5f	29 7f		and #$7f			and 	#$7F 						; ignore bit 7
.3c61	d0 e5		bne $3c48			bne 	_TSONext 					; different goto next.
.3c63	88		dey				dey 								; do all
.3c64	d0 f4		bne $3c5a			bne 	_TSOCheckLoop
.3c66	8a		txa				txa 								; return token in A and carry set
.3c67	38		sec				sec
.3c68	60		rts				rts
.3c69					_TSOFail:
.3c69	18		clc				clc
.3c6a	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/test.asm

.3c6b					TokTest:
.3c6b	a2 ff		ldx #$ff				ldx 	#$FF
.3c6d	9a		txs					txs
.3c6e	a9 8b		lda #$8b			lda 	#(TokenText1) & $FF
.3c70	85 28		sta $28				sta 	codePtr
.3c72	a9 3c		lda #$3c			lda 	#(TokenText1) >> 8
.3c74	85 29		sta $29				sta 	1+(codePtr)
.3c76	20 8b 3c	jsr $3c8b				jsr 	Tokenise
.3c79	a2 00		ldx #$00	TokStop:	ldx 	#0 					; compare vs precalculated result
.3c7b	bd 8b 3c	lda $3c8b,x	_TokCheck:	lda 	TokenBytes1,x
.3c7e	dd ed 0c	cmp $0ced,x				cmp 	tokenBuffer,x
.3c81	d0 fe		bne $3c81	_TokFail:	bne 	_TokFail	 		; error.
.3c83	e8		inx					inx
.3c84	c9 80		cmp #$80				cmp 	#$80
.3c86	d0 f3		bne $3c7b				bne 	_TokCheck
.3c88	4c ff ff	jmp $ffff				jmp 	$FFFF 				; successfully tokenised then quit.

;******  Processing file: tokeniser/tokenise/../../generated/toktest.inc

.3c8b					TokenText1:
.3c8b					TokenBytes1:

;******  Return to file: tokeniser/tokenise/test.asm


;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokenise.asm

.0cea					tokenHeader:
>0cea							.fill 	3
.0ced					tokenBuffer:
>0ced							.fill 	256
.0ded					tokenBufferIndex:
>0ded							.fill 	1
.3c8b					Tokenise:
.3c8b	20 05 3d	jsr $3d05			jsr 	TokeniseMakeASCIIZ 			; convert to ASCIIZ string.
.3c8e					TokeniseASCIIZ:
.3c8e	20 16 3d	jsr $3d16			jsr 	TokeniseFixCase 			; remove controls and lower case outside quotes.
.3c91	a9 00		lda #$00			lda 	#0 							; reset the token buffer index
.3c93	8d ed 0d	sta $0ded			sta 	tokenBufferIndex
.3c96	a8		tay				tay 								; start pointer
.3c97	a9 80		lda #$80			lda 	#$80 						; empty token buffer ($80 ends it)
.3c99	8d ed 0c	sta $0ced			sta 	tokenBuffer
.3c9c					_TokLoop:
.3c9c	b1 28		lda ($28),y			lda 	(codePtr),y 				; get next character
.3c9e	f0 46		beq $3ce6			beq 	_TokExit 					; if zero, then exit.
.3ca0	c8		iny				iny 								; skip over spaces.
.3ca1	c9 20		cmp #$20			cmp 	#" "
.3ca3	f0 f7		beq $3c9c			beq 	_TokLoop
.3ca5	88		dey				dey 								; point back to character.
.3ca6	c9 26		cmp #$26			cmp 	#"&"						; Hexadecimal constant.
.3ca8	f0 18		beq $3cc2			beq 	_TokHexConst
.3caa	c9 22		cmp #$22			cmp 	#'"'						; Quoted String
.3cac	f0 23		beq $3cd1			beq 	_TokQString
.3cae	c9 5b		cmp #$5b			cmp 	#"Z"+1 						; > 'Z' is punctuation
.3cb0	b0 26		bcs $3cd8			bcs 	_TokPunctuation
.3cb2	c9 41		cmp #$41			cmp 	#"A" 						; A..Z identifier
.3cb4	b0 29		bcs $3cdf			bcs 	_TokIdentifier
.3cb6	c9 3a		cmp #$3a			cmp 	#"9"+1
.3cb8	b0 1e		bcs $3cd8			bcs 	_TokPunctuation 			; between 9 and A exclusive, punctuation
.3cba	c9 30		cmp #$30			cmp 	#"0"
.3cbc	90 1a		bcc $3cd8			bcc 	_TokPunctuation 			; < 0, punctuation.
.3cbe	a9 0a		lda #$0a			lda 	#10  						; 0..9 constant in base 10.
.3cc0	d0 08		bne $3cca			bne 	_TokConst
.3cc2					_TokHexConst:
.3cc2	c8		iny				iny									; consume token.
.3cc3	a9 c5		lda #$c5			lda 	#TKW_AMP 					; Write ampersand token out
.3cc5	20 ec 3c	jsr $3cec			jsr 	TokenWrite
.3cc8	a9 10		lda #$10			lda 	#16
.3cca					_TokConst:
.3cca	20 d4 3d	jsr $3dd4			jsr 	TokeniseInteger
.3ccd	b0 cd		bcs $3c9c			bcs 	_TokLoop
.3ccf	90 18		bcc $3ce9			bcc 	_TokFail
.3cd1					_TokQString:
.3cd1	20 6a 3e	jsr $3e6a			jsr 	TokeniseString
.3cd4	b0 c6		bcs $3c9c			bcs 	_TokLoop
.3cd6	90 11		bcc $3ce9			bcc 	_TokFail
.3cd8					_TokPunctuation:
.3cd8	20 49 3e	jsr $3e49			jsr 	TokenisePunctuation
.3cdb	b0 bf		bcs $3c9c			bcs 	_TokLoop
.3cdd	90 0a		bcc $3ce9			bcc 	_TokFail
.3cdf					_TokIdentifier:
.3cdf	20 45 3d	jsr $3d45			jsr 	TokeniseIdentifier
.3ce2	b0 b8		bcs $3c9c			bcs 	_TokLoop
.3ce4	90 03		bcc $3ce9			bcc 	_TokFail
.3ce6					_TokExit:
.3ce6	a9 01		lda #$01			lda 	#1
.3ce8	60		rts				rts
.3ce9					_TokFail:
.3ce9	a9 00		lda #$00			lda 	#0
.3ceb	60		rts				rts
.3cec					TokenWrite:
.3cec	85 32		sta $32				sta 	tempShort 					; save XA
.3cee	48		pha				pha
.3cef	8a		txa				txa
.3cf0	48		pha				pha
.3cf1	a5 32		lda $32				lda 	tempShort
.3cf3	ae ed 0d	ldx $0ded			ldx 	tokenBufferIndex 			; geet index
.3cf6	9d ed 0c	sta $0ced,x			sta 	tokenBuffer,x 				; write byte to buffer
.3cf9	a9 80		lda #$80			lda 	#TOK_EOL 					; pre-emptively write EOL marker after
.3cfb	9d ee 0c	sta $0cee,x			sta 	tokenBuffer+1,x
.3cfe	ee ed 0d	inc $0ded			inc 	tokenBufferIndex 			; bump index
.3d01	68		pla				pla
.3d02	aa		tax				tax
.3d03	68		pla				pla
.3d04	60		rts				rts
.3d05					TokeniseMakeASCIIZ:
.3d05	a0 00		ldy #$00			ldy 	#0							; get length of string.
.3d07	b1 28		lda ($28),y			lda 	(codePtr),y
.3d09	a8		tay				tay
.3d0a	c8		iny				iny 								; +1, the NULL goes here.
.3d0b	a9 00		lda #$00			lda 	#0
.3d0d	91 28		sta ($28),y			sta 	(codePtr),y 				; write the trailing NULL.
.3d0f	e6 28		inc $28				inc 	codePtr 					; bump the pointer.
.3d11	d0 02		bne $3d15			bne 	_TMKAExit
.3d13	e6 29		inc $29				inc 	codePtr+1
.3d15					_TMKAExit:
.3d15	60		rts				rts
.3d16					TokeniseFixCase:
.3d16	a0 00		ldy #$00			ldy 	#0 							; position in buffer.
.3d18	a2 01		ldx #$01			ldx 	#1 							; bit 0 of this is 'in quotes'
.3d1a					_TFCFlipQ:
.3d1a	8a		txa				txa
.3d1b	49 01		eor #$01			eor 	#1
.3d1d	aa		tax				tax
.3d1e					_TFCLoop:
.3d1e	b1 28		lda ($28),y			lda 	(codePtr),y 				; get character
.3d20	f0 22		beq $3d44			beq 	_TFCExit 					; if zero exit.
.3d22	c9 20		cmp #$20			cmp 	#32 						; if control
.3d24	90 1a		bcc $3d40			bcc 	_TFCControl
.3d26	c8		iny				iny 								; preconsume
.3d27	c9 22		cmp #$22			cmp 	#'"'
.3d29	f0 ef		beq $3d1a			beq 	_TFCFlipQ
.3d2b	c9 61		cmp #$61			cmp 	#"a"						; check if L/C
.3d2d	90 ef		bcc $3d1e			bcc 	_TFCLoop
.3d2f	c9 7b		cmp #$7b			cmp 	#"z"+1
.3d31	b0 eb		bcs $3d1e			bcs 	_TFCLoop
.3d33	e0 00		cpx #$00			cpx 	#0 							; in quotes, if so, leave alone.
.3d35	d0 e7		bne $3d1e			bne 	_TFCLoop
.3d37	88		dey				dey
.3d38	49 20		eor #$20			eor 	#"A"^"a"					; make U/C
.3d3a					_TFCWrite:
.3d3a	91 28		sta ($28),y			sta 	(codePtr),y
.3d3c	c8		iny				iny
.3d3d	4c 1e 3d	jmp $3d1e			jmp 	_TFCLoop
.3d40					_TFCControl:
.3d40	a9 20		lda #$20			lda 	#" "
.3d42	d0 f6		bne $3d3a			bne 	_TFCWrite
.3d44					_TFCExit:
.3d44	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokident.asm

.3d45					TokeniseIdentifier:
.3d45	a2 00		ldx #$00			ldx 	#0
.3d47					_TICopyID:
.3d47	b1 28		lda ($28),y			lda 	(codePtr),y					; get characters
.3d49	c9 5f		cmp #$5f			cmp 	#"_" 						; underscore converted to minus internally.
.3d4b	f0 16		beq $3d63			beq 	_TICopyUnderscore
.3d4d	c9 2e		cmp #$2e			cmp 	#"."
.3d4f	f0 14		beq $3d65			beq 	_TICopyIn
.3d51	c9 30		cmp #$30			cmp 	#"0"
.3d53	90 1b		bcc $3d70			bcc 	_TIEndCopy
.3d55	c9 3a		cmp #$3a			cmp 	#"9"+1
.3d57	90 0c		bcc $3d65			bcc 	_TICopyIn
.3d59	c9 41		cmp #$41			cmp 	#"A"
.3d5b	90 13		bcc $3d70			bcc 	_TIEndCopy
.3d5d	c9 5b		cmp #$5b			cmp 	#"Z"+1
.3d5f	b0 0f		bcs $3d70			bcs		_TIEndCopy
.3d61	90 02		bcc $3d65			bcc 	_TICopyIn
.3d63					_TICopyUnderScore:
.3d63	a9 2d		lda #$2d			lda 	#"-"						; _ is mapped to -
.3d65					_TICopyIn:
.3d65	e8		inx				inx 								; write into buffer in 7 bit ASCII form
.3d66	9d cf 0a	sta $0acf,x			sta 	convertBuffer,x
.3d69	8e cf 0a	stx $0acf			stx 	convertBuffer
.3d6c	c8		iny				iny 								; next character
.3d6d	4c 47 3d	jmp $3d47			jmp 	_TICopyID 					; loop round
.3d70					_TIEndCopy:
.3d70	a9 24		lda #$24			lda 	#"$"
.3d72	20 c7 3d	jsr $3dc7			jsr 	TIDCheckCopy
.3d75	a9 23		lda #$23			lda 	#"#"
.3d77	20 c7 3d	jsr $3dc7			jsr 	TIDCheckCopy
.3d7a	a9 28		lda #$28			lda 	#"("
.3d7c	20 c7 3d	jsr $3dc7			jsr 	TIDCheckCopy
.3d7f	20 fc 3b	jsr $3bfc			jsr 	TokenSearch 				; is it a token
.3d82	b0 41		bcs $3dc5			bcs 	_TIExit 					; if so, then exit.
.3d84	98		tya				tya
.3d85	48		pha				pha
.3d86	a0 3a		ldy #$3a			ldy 	#$3A 						; default type.
.3d88	ae cf 0a	ldx $0acf			ldx 	convertBuffer 				; is last character (
.3d8b	bd cf 0a	lda $0acf,x			lda 	convertBuffer,x
.3d8e	c9 28		cmp #$28			cmp 	#"("
.3d90	d0 02		bne $3d94			bne 	_TINotArray
.3d92	ca		dex				dex 								; yes, remove it and convert to array.
.3d93	c8		iny				iny
.3d94					_TINotArray:
.3d94	bd cf 0a	lda $0acf,x			lda 	convertBuffer,x 			; check for $
.3d97	c9 24		cmp #$24			cmp 	#"$"
.3d99	d0 03		bne $3d9e			bne 	_TINotString
.3d9b	ca		dex				dex
.3d9c	c8		iny				iny
.3d9d	c8		iny				iny
.3d9e					_TINotString:
.3d9e	bd cf 0a	lda $0acf,x			lda 	convertBuffer,x 			; check for #
.3da1	c9 23		cmp #$23			cmp 	#"#"
.3da3	d0 05		bne $3daa			bne 	_TINotFloat
.3da5	ca		dex				dex
.3da6	c8		iny				iny
.3da7	c8		iny				iny
.3da8	c8		iny				iny
.3da9	c8		iny				iny
.3daa					_TINotFloat:
.3daa	e8		inx				inx 								; write end marker for identifier.
.3dab	98		tya				tya
.3dac	9d cf 0a	sta $0acf,x			sta 	convertBuffer,x
.3daf	8e cf 0a	stx $0acf			stx 	convertBuffer 				; update length.
.3db2	a2 01		ldx #$01			ldx 	#1
.3db4					_TIOutput:
.3db4	bd cf 0a	lda $0acf,x			lda 	convertBuffer,x
.3db7	29 3f		and #$3f			and 	#$3F
.3db9	48		pha				pha
.3dba	20 ec 3c	jsr $3cec			jsr 	TokenWrite
.3dbd	e8		inx				inx
.3dbe	68		pla				pla
.3dbf	c9 3a		cmp #$3a			cmp 	#$3A
.3dc1	90 f1		bcc $3db4			bcc 	_TIOutput
.3dc3	68		pla				pla
.3dc4	a8		tay				tay
.3dc5					_TIExit:
.3dc5	38		sec				sec 								; this can't fail.
.3dc6	60		rts				rts
.3dc7					TIDCheckCopy:
.3dc7	d1 28		cmp ($28),y			cmp 	(codePtr),y
.3dc9	d0 08		bne $3dd3			bne 	_TIDCCExit
.3dcb	e8		inx				inx
.3dcc	9d cf 0a	sta $0acf,x			sta 	convertBuffer,x
.3dcf	8e cf 0a	stx $0acf			stx 	convertBuffer
.3dd2	c8		iny				iny
.3dd3					_TIDCCExit:
.3dd3	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokinteger.asm

.3dd4					TokeniseInteger:
.3dd4	85 2c		sta $2c				sta 	temp1 						; save base
.3dd6	a2 00		ldx #$00			ldx 	#0							; count of chars so far
.3dd8	8e cf 0a	stx $0acf			stx 	convertBuffer
.3ddb					_TIGetChars:
.3ddb	b1 28		lda ($28),y			lda 	(codePtr),y 				; check character is numeric
.3ddd	c9 30		cmp #$30			cmp 	#"0"
.3ddf	90 1f		bcc $3e00			bcc 	_TIEndGet
.3de1	c9 3a		cmp #$3a			cmp 	#"9"+1
.3de3	90 10		bcc $3df5			bcc 	_TIHaveChar
.3de5	a5 2c		lda $2c				lda 	temp1 						; fail if not hex mode
.3de7	c9 0a		cmp #$0a			cmp 	#10
.3de9	f0 15		beq $3e00			beq 	_TIEndGet
.3deb	b1 28		lda ($28),y			lda 	(codePtr),y 				; check legitimate hex.
.3ded	c9 41		cmp #$41			cmp 	#"A"
.3def	90 0f		bcc $3e00			bcc 	_TIEndGet
.3df1	c9 5b		cmp #$5b			cmp 	#"Z"+1
.3df3	b0 0b		bcs $3e00			bcs 	_TIEndGet
.3df5					_TIHaveChar:
.3df5	e8		inx				inx 								; write into buffer.
.3df6	8e cf 0a	stx $0acf			stx 	convertBuffer
.3df9	9d cf 0a	sta $0acf,x			sta 	convertBuffer,x
.3dfc	c8		iny				iny 								; next char
.3dfd	4c db 3d	jmp $3ddb			jmp 	_TIGetChars
.3e00					_TIEndGet:
.3e00	e0 00		cpx #$00			cpx 	#0 							; no char acquired.
.3e02	f0 1c		beq $3e20			beq 	_TIFail
.3e04	98		tya				tya
.3e05	48		pha				pha
.3e06	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.3e08	85 2a		sta $2a				sta 	temp0
.3e0a	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.3e0c	85 2b		sta $2b				sta 	1+(temp0)
.3e0e	a9 00		lda #$00			lda 	#0 							; stack level 0
.3e10	a4 2c		ldy $2c				ldy 	temp1 						; base Y
.3e12	a2 1a		ldx #$1a		ldx	#26
.3e14	20 07 37	jsr $3707		jsr	mainHandler
.3e17	68		pla				pla
.3e18	a8		tay				tay
.3e19	90 05		bcc $3e20			bcc 	_TIFail 					; didn't convert.
.3e1b	20 22 3e	jsr $3e22			jsr 	TIRecursiveOut 				; recursive output ?
.3e1e	38		sec				sec
.3e1f	60		rts				rts
.3e20					_TIFail:
.3e20	18		clc				clc
.3e21	60		rts				rts
.3e22					TIRecursiveOut:
.3e22	a5 50		lda $50				lda 	esInt0 						; get value to output after possible recursion
.3e24	29 3f		and #$3f			and 	#$3F
.3e26	09 40		ora #$40			ora 	#$40
.3e28	48		pha				pha
.3e29	a5 50		lda $50				lda 	esInt0 						; are we recursing ?
.3e2b	29 c0		and #$c0			and 	#$C0
.3e2d	05 58		ora $58				ora 	esInt1
.3e2f	05 60		ora $60				ora 	esInt2
.3e31	05 68		ora $68				ora 	esInt3
.3e33	f0 10		beq $3e45			beq 	_TIRONoRecursion
.3e35	a2 06		ldx #$06			ldx 	#6 							; shift right x 6
.3e37					_TIROShift:
.3e37	46 68		lsr $68				lsr 	esInt3
.3e39	66 60		ror $60				ror 	esInt2
.3e3b	66 58		ror $58				ror 	esInt1
.3e3d	66 50		ror $50				ror 	esInt0
.3e3f	ca		dex				dex
.3e40	d0 f5		bne $3e37			bne 	_TIROShift
.3e42	20 22 3e	jsr $3e22			jsr 	TIRecursiveOut 				; call recursively
.3e45					_TIRONoRecursion:
.3e45	68		pla				pla 								; pull the old bit.
.3e46	4c ec 3c	jmp $3cec			jmp 	TokenWrite

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokpunct.asm

.3e49					TokenisePunctuation:
.3e49	b1 28		lda ($28),y			lda	 	(codePtr),y 				; copy next 2 chars into convertBuffer
.3e4b	8d d0 0a	sta $0ad0			sta 	convertBuffer+1
.3e4e	c8		iny				iny
.3e4f	b1 28		lda ($28),y			lda 	(codePtr),y
.3e51	8d d1 0a	sta $0ad1			sta 	convertBuffer+2
.3e54	c8		iny				iny 								; Y is +2
.3e55	a9 02		lda #$02			lda 	#2 							; 2 character string.
.3e57	8d cf 0a	sta $0acf			sta 	convertBuffer
.3e5a	20 fc 3b	jsr $3bfc			jsr 	TokenSearch 				; search for that token.
.3e5d	b0 0a		bcs $3e69			bcs 	_TIFound
.3e5f	ce cf 0a	dec $0acf			dec 	convertBuffer 				; make it a 1 character string
.3e62	88		dey				dey 								; Y is now +1
.3e63	20 fc 3b	jsr $3bfc			jsr 	TokenSearch 				; search for that token.
.3e66	b0 01		bcs $3e69			bcs 	_TIFound
.3e68	88		dey				dey 								; Y is now +0, carry clear indicating failure.
.3e69					_TIFound:
.3e69	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokstring.asm

.3e6a					TokeniseString:
.3e6a	c8		iny				iny 								; skip opening quote
.3e6b	a2 ff		ldx #$ff			ldx 	#255 						; count length of string.
.3e6d	84 2a		sty $2a				sty 	temp0 						; save start.
.3e6f					_TSGetLength:
.3e6f	b1 28		lda ($28),y			lda 	(codePtr),y 				; get next
.3e71	f0 21		beq $3e94			beq 	_TSFail						; end of line, fail
.3e73	c8		iny				iny
.3e74	e8		inx				inx
.3e75	c9 22		cmp #$22			cmp 	#'"' 						; until end quote found.
.3e77	d0 f6		bne $3e6f			bne 	_TSGetLength
.3e79	a9 85		lda #$85			lda 	#TOK_STR 					; write string token out
.3e7b	20 ec 3c	jsr $3cec			jsr 	TokenWrite
.3e7e	8a		txa				txa 								; output length
.3e7f	20 ec 3c	jsr $3cec			jsr 	TokenWrite
.3e82	a4 2a		ldy $2a				ldy 	temp0 						; get original position
.3e84	e0 00		cpx #$00			cpx 	#0 							; check ended
.3e86	f0 09		beq $3e91			beq 	_TSExit
.3e88					_TSOutput:
.3e88	b1 28		lda ($28),y			lda 	(codePtr),y					; output character
.3e8a	20 ec 3c	jsr $3cec			jsr 	TokenWrite
.3e8d	c8		iny				iny
.3e8e	ca		dex				dex
.3e8f	d0 f7		bne $3e88			bne 	_TSOutput
.3e91					_TSExit:
.3e91	c8		iny				iny 								; skip ending quote
.3e92	38		sec				sec 								; return CS.
.3e93	60		rts				rts
.3e94					_TSFail:
.3e94	18		clc				clc
.3e95	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokentext.asm

.3e96					TokenTableAddress:
>3e96	9e 3e						.word 	Group0Text
>3e98	67 40						.word 	Group1Text
>3e9a	b4 41						.word 	Group2Text
>3e9c	db 41						.word 	Group3Text

;******  Processing file: tokeniser/../generated/tokentext0.inc

.3e9e					Group0Text:
>3e9e	03 41 4e c4				.byte $03,$41,$4e,$c4                  ; $86 and
>3ea2	02 4f d2				.byte $02,$4f,$d2                      ; $87 or
>3ea5	03 58 4f d2				.byte $03,$58,$4f,$d2                  ; $88 xor
>3ea9	02 3e bd				.byte $02,$3e,$bd                      ; $89 >=
>3eac	02 3c bd				.byte $02,$3c,$bd                      ; $8a <=
>3eaf	01 be					.byte $01,$be                          ; $8b >
>3eb1	01 bc					.byte $01,$bc                          ; $8c <
>3eb3	01 bd					.byte $01,$bd                          ; $8d =
>3eb5	02 3c be				.byte $02,$3c,$be                      ; $8e <>
>3eb8	01 ab					.byte $01,$ab                          ; $8f +
>3eba	01 ad					.byte $01,$ad                          ; $90 -
>3ebc	02 3e be				.byte $02,$3e,$be                      ; $91 >>
>3ebf	02 3c bc				.byte $02,$3c,$bc                      ; $92 <<
>3ec2	01 aa					.byte $01,$aa                          ; $93 *
>3ec4	01 af					.byte $01,$af                          ; $94 /
>3ec6	03 4d 4f c4				.byte $03,$4d,$4f,$c4                  ; $95 mod
>3eca	01 de					.byte $01,$de                          ; $96 ^
>3ecc	01 a1					.byte $01,$a1                          ; $97 !
>3ece	01 bf					.byte $01,$bf                          ; $98 ?
>3ed0	06 52 45 50 45 41 d4			.byte $06,$52,$45,$50,$45,$41,$d4      ; $99 repeat
>3ed7	05 57 48 49 4c c5			.byte $05,$57,$48,$49,$4c,$c5          ; $9a while
>3edd	03 46 4f d2				.byte $03,$46,$4f,$d2                  ; $9b for
>3ee1	02 49 c6				.byte $02,$49,$c6                      ; $9c if
>3ee4	07 44 45 46 50 52 4f c3			.byte $07,$44,$45,$46,$50,$52,$4f,$c3  ; $9d defproc
>3eec	05 55 4e 54 49 cc			.byte $05,$55,$4e,$54,$49,$cc          ; $9e until
>3ef2	04 57 45 4e c4				.byte $04,$57,$45,$4e,$c4              ; $9f wend
>3ef7	04 4e 45 58 d4				.byte $04,$4e,$45,$58,$d4              ; $a0 next
>3efc	04 54 48 45 ce				.byte $04,$54,$48,$45,$ce              ; $a1 then
>3f01	05 45 4e 44 49 c6			.byte $05,$45,$4e,$44,$49,$c6          ; $a2 endif
>3f07	07 45 4e 44 50 52 4f c3			.byte $07,$45,$4e,$44,$50,$52,$4f,$c3  ; $a3 endproc
>3f0f	01 a8					.byte $01,$a8                          ; $a4 (
>3f11	04 4c 45 4e a8				.byte $04,$4c,$45,$4e,$a8              ; $a5 len(
>3f16	04 53 47 4e a8				.byte $04,$53,$47,$4e,$a8              ; $a6 sgn(
>3f1b	04 41 42 53 a8				.byte $04,$41,$42,$53,$a8              ; $a7 abs(
>3f20	07 52 41 4e 44 4f 4d a8			.byte $07,$52,$41,$4e,$44,$4f,$4d,$a8  ; $a8 random(
>3f28	04 50 41 47 c5				.byte $04,$50,$41,$47,$c5              ; $a9 page
>3f2d	04 54 52 55 c5				.byte $04,$54,$52,$55,$c5              ; $aa true
>3f32	05 46 41 4c 53 c5			.byte $05,$46,$41,$4c,$53,$c5          ; $ab false
>3f38	04 4d 49 4e a8				.byte $04,$4d,$49,$4e,$a8              ; $ac min(
>3f3d	04 4d 41 58 a8				.byte $04,$4d,$41,$58,$a8              ; $ad max(
>3f42	04 53 59 53 a8				.byte $04,$53,$59,$53,$a8              ; $ae sys(
>3f47	06 54 49 4d 45 52 a8			.byte $06,$54,$49,$4d,$45,$52,$a8      ; $af timer(
>3f4e	06 45 56 45 4e 54 a8			.byte $06,$45,$56,$45,$4e,$54,$a8      ; $b0 event(
>3f55	04 47 45 54 a8				.byte $04,$47,$45,$54,$a8              ; $b1 get(
>3f5a	06 49 4e 4b 45 59 a8			.byte $06,$49,$4e,$4b,$45,$59,$a8      ; $b2 inkey(
>3f61	06 41 4c 4c 4f 43 a8			.byte $06,$41,$4c,$4c,$4f,$43,$a8      ; $b3 alloc(
>3f68	05 43 48 52 24 a8			.byte $05,$43,$48,$52,$24,$a8          ; $b4 chr$(
>3f6e	06 4c 45 46 54 24 a8			.byte $06,$4c,$45,$46,$54,$24,$a8      ; $b5 left$(
>3f75	05 4d 49 44 24 a8			.byte $05,$4d,$49,$44,$24,$a8          ; $b6 mid$(
>3f7b	07 52 49 47 48 54 24 a8			.byte $07,$52,$49,$47,$48,$54,$24,$a8  ; $b7 right$(
>3f83	05 53 54 52 24 a8			.byte $05,$53,$54,$52,$24,$a8          ; $b8 str$(
>3f89	04 56 41 4c a8				.byte $04,$56,$41,$4c,$a8              ; $b9 val(
>3f8e	05 50 45 45 4b a8			.byte $05,$50,$45,$45,$4b,$a8          ; $ba peek(
>3f94	05 44 45 45 4b a8			.byte $05,$44,$45,$45,$4b,$a8          ; $bb deek(
>3f9a	05 4c 45 45 4b a8			.byte $05,$4c,$45,$45,$4b,$a8          ; $bc leek(
>3fa0	04 41 53 43 a8				.byte $04,$41,$53,$43,$a8              ; $bd asc(
>3fa5	04 49 4e 54 a8				.byte $04,$49,$4e,$54,$a8              ; $be int(
>3faa	06 46 4c 4f 41 54 a8			.byte $06,$46,$4c,$4f,$41,$54,$a8      ; $bf float(
>3fb1	06 49 53 56 41 4c a8			.byte $06,$49,$53,$56,$41,$4c,$a8      ; $c0 isval(
>3fb8	07 55 50 50 45 52 24 a8			.byte $07,$55,$50,$50,$45,$52,$24,$a8  ; $c1 upper$(
>3fc0	07 4c 4f 57 45 52 24 a8			.byte $07,$4c,$4f,$57,$45,$52,$24,$a8  ; $c2 lower$(
>3fc8	01 c0					.byte $01,$c0                          ; $c3 @
>3fca	01 fe					.byte $01,$fe                          ; $c4 ~
>3fcc	01 a6					.byte $01,$a6                          ; $c5 &
>3fce	05 47 45 54 24 a8			.byte $05,$47,$45,$54,$24,$a8          ; $c6 get$(
>3fd4	07 49 4e 4b 45 59 24 a8			.byte $07,$49,$4e,$4b,$45,$59,$24,$a8  ; $c7 inkey$(
>3fdc	03 4d 45 cd				.byte $03,$4d,$45,$cd                  ; $c8 mem
>3fe0	01 a9					.byte $01,$a9                          ; $c9 )
>3fe2	01 ba					.byte $01,$ba                          ; $ca :
>3fe4	01 ac					.byte $01,$ac                          ; $cb ,
>3fe6	01 bb					.byte $01,$bb                          ; $cc ;
>3fe8	01 a7					.byte $01,$a7                          ; $cd '
>3fea	02 54 cf				.byte $02,$54,$cf                      ; $ce to
>3fed	04 53 54 45 d0				.byte $04,$53,$54,$45,$d0              ; $cf step
>3ff2	04 50 52 4f c3				.byte $04,$50,$52,$4f,$c3              ; $d0 proc
>3ff7	05 4c 4f 43 41 cc			.byte $05,$4c,$4f,$43,$41,$cc          ; $d1 local
>3ffd	03 44 49 cd				.byte $03,$44,$49,$cd                  ; $d2 dim
>4001	03 52 45 cd				.byte $03,$52,$45,$cd                  ; $d3 rem
>4005	03 4c 45 d4				.byte $03,$4c,$45,$d4                  ; $d4 let
>4009	05 49 4e 50 55 d4			.byte $05,$49,$4e,$50,$55,$d4          ; $d5 input
>400f	04 45 4c 53 c5				.byte $04,$45,$4c,$53,$c5              ; $d6 else
>4014	03 56 44 d5				.byte $03,$56,$44,$d5                  ; $d7 vdu
>4018	05 50 52 49 4e d4			.byte $05,$50,$52,$49,$4e,$d4          ; $d8 print
>401e	04 44 41 54 c1				.byte $04,$44,$41,$54,$c1              ; $d9 data
>4023	05 49 4d 41 47 c5			.byte $05,$49,$4d,$41,$47,$c5          ; $da image
>4029	02 41 d4				.byte $02,$41,$d4                      ; $db at
>402c	04 46 4c 49 d0				.byte $04,$46,$4c,$49,$d0              ; $dc flip
>4031	06 41 53 53 45 52 d4			.byte $06,$41,$53,$53,$45,$52,$d4      ; $dd assert
>4038	04 50 4f 4b c5				.byte $04,$50,$4f,$4b,$c5              ; $de poke
>403d	04 44 4f 4b c5				.byte $04,$44,$4f,$4b,$c5              ; $df doke
>4042	04 4c 4f 4b c5				.byte $04,$4c,$4f,$4b,$c5              ; $e0 loke
>4047	03 49 4e cb				.byte $03,$49,$4e,$cb                  ; $e1 ink
>404b	05 50 41 50 45 d2			.byte $05,$50,$41,$50,$45,$d2          ; $e2 paper
>4051	03 43 4c d3				.byte $03,$43,$4c,$d3                  ; $e3 cls
>4055	06 4c 4f 43 41 54 c5			.byte $06,$4c,$4f,$43,$41,$54,$c5      ; $e4 locate
>405c	01 ae					.byte $01,$ae                          ; $e5 .
>405e	01 a3					.byte $01,$a3                          ; $e6 #
>4060	05 43 4c 45 41 d2			.byte $05,$43,$4c,$45,$41,$d2          ; $e7 clear
>4066	00					.byte $00

;******  Return to file: tokeniser/tokentext.asm


;******  Processing file: tokeniser/../generated/tokentext1.inc

.4067					Group1Text:
>4067	04 4c 4f 41 c4				.byte $04,$4c,$4f,$41,$c4              ; $86 load
>406c	04 53 41 56 c5				.byte $04,$53,$41,$56,$c5              ; $87 save
>4071	04 4c 49 53 d4				.byte $04,$4c,$49,$53,$d4              ; $88 list
>4076	03 4e 45 d7				.byte $03,$4e,$45,$d7                  ; $89 new
>407a	05 42 52 45 41 cb			.byte $05,$42,$52,$45,$41,$cb          ; $8a break
>4080	03 52 55 ce				.byte $03,$52,$55,$ce                  ; $8b run
>4084	04 52 45 41 c4				.byte $04,$52,$45,$41,$c4              ; $8c read
>4089	07 52 45 53 54 4f 52 c5			.byte $07,$52,$45,$53,$54,$4f,$52,$c5  ; $8d restore
>4091	03 45 4e c4				.byte $03,$45,$4e,$c4                  ; $8e end
>4095	04 53 54 4f d0				.byte $04,$53,$54,$4f,$d0              ; $8f stop
>409a	04 58 45 4d d5				.byte $04,$58,$45,$4d,$d5              ; $90 xemu
>409f	04 47 4f 54 cf				.byte $04,$47,$4f,$54,$cf              ; $91 goto
>40a4	05 47 4f 53 55 c2			.byte $05,$47,$4f,$53,$55,$c2          ; $92 gosub
>40aa	06 52 45 54 55 52 ce			.byte $06,$52,$45,$54,$55,$52,$ce      ; $93 return
>40b1	03 4f 52 c1				.byte $03,$4f,$52,$c1                  ; $94 ora
>40b5	05 28 41 4e 44 a9			.byte $05,$28,$41,$4e,$44,$a9          ; $95 (and)
>40bb	03 45 4f d2				.byte $03,$45,$4f,$d2                  ; $96 eor
>40bf	03 41 44 c3				.byte $03,$41,$44,$c3                  ; $97 adc
>40c3	03 53 54 c1				.byte $03,$53,$54,$c1                  ; $98 sta
>40c7	03 4c 44 c1				.byte $03,$4c,$44,$c1                  ; $99 lda
>40cb	03 43 4d d0				.byte $03,$43,$4d,$d0                  ; $9a cmp
>40cf	03 53 42 c3				.byte $03,$53,$42,$c3                  ; $9b sbc
>40d3	03 41 53 cc				.byte $03,$41,$53,$cc                  ; $9c asl
>40d7	03 52 4f cc				.byte $03,$52,$4f,$cc                  ; $9d rol
>40db	03 4c 53 d2				.byte $03,$4c,$53,$d2                  ; $9e lsr
>40df	03 52 4f d2				.byte $03,$52,$4f,$d2                  ; $9f ror
>40e3	03 53 54 d8				.byte $03,$53,$54,$d8                  ; $a0 stx
>40e7	03 4c 44 d8				.byte $03,$4c,$44,$d8                  ; $a1 ldx
>40eb	03 44 45 c3				.byte $03,$44,$45,$c3                  ; $a2 dec
>40ef	03 49 4e c3				.byte $03,$49,$4e,$c3                  ; $a3 inc
>40f3	03 53 54 da				.byte $03,$53,$54,$da                  ; $a4 stz
>40f7	03 42 49 d4				.byte $03,$42,$49,$d4                  ; $a5 bit
>40fb	03 53 54 d9				.byte $03,$53,$54,$d9                  ; $a6 sty
>40ff	03 4c 44 d9				.byte $03,$4c,$44,$d9                  ; $a7 ldy
>4103	03 43 50 d9				.byte $03,$43,$50,$d9                  ; $a8 cpy
>4107	03 43 50 d8				.byte $03,$43,$50,$d8                  ; $a9 cpx
>410b	03 54 53 c2				.byte $03,$54,$53,$c2                  ; $aa tsb
>410f	03 54 52 c2				.byte $03,$54,$52,$c2                  ; $ab trb
>4113	03 4a 53 d2				.byte $03,$4a,$53,$d2                  ; $ac jsr
>4117	03 4a 4d d0				.byte $03,$4a,$4d,$d0                  ; $ad jmp
>411b	03 42 50 cc				.byte $03,$42,$50,$cc                  ; $ae bpl
>411f	03 42 4d c9				.byte $03,$42,$4d,$c9                  ; $af bmi
>4123	03 42 56 c3				.byte $03,$42,$56,$c3                  ; $b0 bvc
>4127	03 42 56 d3				.byte $03,$42,$56,$d3                  ; $b1 bvs
>412b	03 42 43 c3				.byte $03,$42,$43,$c3                  ; $b2 bcc
>412f	03 42 43 d3				.byte $03,$42,$43,$d3                  ; $b3 bcs
>4133	03 42 4e c5				.byte $03,$42,$4e,$c5                  ; $b4 bne
>4137	03 42 45 d1				.byte $03,$42,$45,$d1                  ; $b5 beq
>413b	03 42 52 c1				.byte $03,$42,$52,$c1                  ; $b6 bra
>413f	03 42 52 cb				.byte $03,$42,$52,$cb                  ; $b7 brk
>4143	03 50 48 d0				.byte $03,$50,$48,$d0                  ; $b8 php
>4147	03 43 4c c3				.byte $03,$43,$4c,$c3                  ; $b9 clc
>414b	03 50 4c d0				.byte $03,$50,$4c,$d0                  ; $ba plp
>414f	03 53 45 c3				.byte $03,$53,$45,$c3                  ; $bb sec
>4153	03 52 54 c9				.byte $03,$52,$54,$c9                  ; $bc rti
>4157	03 50 48 c1				.byte $03,$50,$48,$c1                  ; $bd pha
>415b	03 43 4c c9				.byte $03,$43,$4c,$c9                  ; $be cli
>415f	03 50 48 d9				.byte $03,$50,$48,$d9                  ; $bf phy
>4163	03 52 54 d3				.byte $03,$52,$54,$d3                  ; $c0 rts
>4167	03 50 4c c1				.byte $03,$50,$4c,$c1                  ; $c1 pla
>416b	03 53 45 c9				.byte $03,$53,$45,$c9                  ; $c2 sei
>416f	03 50 4c d9				.byte $03,$50,$4c,$d9                  ; $c3 ply
>4173	03 44 45 d9				.byte $03,$44,$45,$d9                  ; $c4 dey
>4177	03 54 58 c1				.byte $03,$54,$58,$c1                  ; $c5 txa
>417b	03 54 59 c1				.byte $03,$54,$59,$c1                  ; $c6 tya
>417f	03 54 58 d3				.byte $03,$54,$58,$d3                  ; $c7 txs
>4183	03 54 41 d9				.byte $03,$54,$41,$d9                  ; $c8 tay
>4187	03 54 41 d8				.byte $03,$54,$41,$d8                  ; $c9 tax
>418b	03 43 4c d6				.byte $03,$43,$4c,$d6                  ; $ca clv
>418f	03 54 53 d8				.byte $03,$54,$53,$d8                  ; $cb tsx
>4193	03 49 4e d9				.byte $03,$49,$4e,$d9                  ; $cc iny
>4197	03 44 45 d8				.byte $03,$44,$45,$d8                  ; $cd dex
>419b	03 43 4c c4				.byte $03,$43,$4c,$c4                  ; $ce cld
>419f	03 50 48 d8				.byte $03,$50,$48,$d8                  ; $cf phx
>41a3	03 49 4e d8				.byte $03,$49,$4e,$d8                  ; $d0 inx
>41a7	03 4e 4f d0				.byte $03,$4e,$4f,$d0                  ; $d1 nop
>41ab	03 53 45 c4				.byte $03,$53,$45,$c4                  ; $d2 sed
>41af	03 50 4c d8				.byte $03,$50,$4c,$d8                  ; $d3 plx
>41b3	00					.byte $00

;******  Return to file: tokeniser/tokentext.asm


;******  Processing file: tokeniser/../generated/tokentext2.inc

.41b4					Group2Text:
>41b4	05 56 50 4f 4b c5			.byte $05,$56,$50,$4f,$4b,$c5          ; $86 vpoke
>41ba	05 56 44 4f 4b c5			.byte $05,$56,$44,$4f,$4b,$c5          ; $87 vdoke
>41c0	05 56 4c 4f 41 c4			.byte $05,$56,$4c,$4f,$41,$c4          ; $88 vload
>41c6	04 4d 4f 44 c5				.byte $04,$4d,$4f,$44,$c5              ; $89 mode
>41cb	07 50 41 4c 45 54 54 c5			.byte $07,$50,$41,$4c,$45,$54,$54,$c5  ; $8a palette
>41d3	06 53 50 52 49 54 c5			.byte $06,$53,$50,$52,$49,$54,$c5      ; $8b sprite
>41da	00					.byte $00

;******  Return to file: tokeniser/tokentext.asm


;******  Processing file: tokeniser/../generated/tokentext3.inc

.41db					Group3Text:
>41db	06 56 50 45 45 4b a8			.byte $06,$56,$50,$45,$45,$4b,$a8      ; $86 vpeek(
>41e2	06 56 44 45 45 4b a8			.byte $06,$56,$44,$45,$45,$4b,$a8      ; $87 vdeek(
>41e9	09 53 50 52 49 54 45 2e			.byte $09,$53,$50,$52,$49,$54,$45,$2e,$58,$a8 ; $88 sprite.x(
>41f1	58 a8
>41f3	09 53 50 52 49 54 45 2e			.byte $09,$53,$50,$52,$49,$54,$45,$2e,$59,$a8 ; $89 sprite.y(
>41fb	59 a8
>41fd	04 48 49 54 a8				.byte $04,$48,$49,$54,$a8              ; $8a hit(
>4202	06 4a 4f 59 2e 58 a8			.byte $06,$4a,$4f,$59,$2e,$58,$a8      ; $8b joy.x(
>4209	06 4a 4f 59 2e 59 a8			.byte $06,$4a,$4f,$59,$2e,$59,$a8      ; $8c joy.y(
>4210	06 4a 4f 59 2e 42 a8			.byte $06,$4a,$4f,$59,$2e,$42,$a8      ; $8d joy.b(
>4217	00					.byte $00

;******  Return to file: tokeniser/tokentext.asm


;******  Return to file: tokeniser/tokeniser.asm

.4218					tokeniserHandler:
.4218	7c 1b 42	jmp ($421b,x)			jmp 	(tokeniserVectors,x)
.421b					tokeniserVectors:
>421b	27 42					.word _DummyControlHandler ; index 0
>421d	e6 39					.word Detokenise           ; index 2
>421f	da 39					.word ListLine             ; index 4
>4221	6b 3c					.word TokTest              ; index 6
>4223	8b 3c					.word Tokenise             ; index 8
>4225	8e 3c					.word TokeniseASCIIZ       ; index 10
.4227					_DummyControlHandler:
.4227	60		rts			rts

;******  Return to file: basic.asm

.4228					section_end_tokeniser:
.4228					section_start_variable:

;******  Processing file: variable/variable.asm


;******  Processing file: variable/array/access.asm

.4228					AccessArray:
.4228	8a		txa				txa
.4229	48		pha				pha
.422a	e8		inx				inx
.422b	20 f4 42	jsr $42f4			jsr 	GetArrayDimensions 			; get the array dimensions one up from here.
.422e	68		pla				pla
.422f	aa		tax				tax
.4230	b5 50		lda $50,x			lda 	esInt0,x 					; restore address to follow in temp0.
.4232	85 2a		sta $2a				sta 	temp0
.4234	b5 58		lda $58,x			lda 	esInt1,x
.4236	85 2b		sta $2b				sta 	temp0+1
.4238	8a		txa				txa
.4239	48		pha				pha
.423a	98		tya				tya
.423b	48		pha				pha
.423c					_AAFollow:
.423c	a0 00		ldy #$00			ldy 	#0
.423e	b1 2a		lda ($2a),y			lda 	(temp0),y
.4240	48		pha				pha
.4241	c8		iny				iny
.4242	b1 2a		lda ($2a),y			lda 	(temp0),y
.4244	85 2b		sta $2b				sta 	temp0+1
.4246	68		pla				pla
.4247	85 2a		sta $2a				sta 	temp0
.4249	e8		inx				inx 								; advance to next stack slot.
.424a	a0 00		ldy #$00			ldy 	#0
.424c	b1 2a		lda ($2a),y			lda 	(temp0),y 					; compare max index vs required index
.424e	d5 50		cmp $50,x			cmp 	esInt0,x
.4250	c8		iny				iny
.4251	b1 2a		lda ($2a),y			lda 	(temp0),y 					; drop bit 7 of the size, indicates follow.
.4253	85 2c		sta $2c				sta 	temp1 						; save the size in temp1 for later use.
.4255	29 7f		and #$7f			and 	#$7F
.4257	f5 58		sbc $58,x			sbc 	esInt1,x
.4259	90 50		bcc $42ab			bcc 	_AABadIndex 				; failed on index if max index < required.
.425b	18		clc				clc
.425c	a5 2a		lda $2a				lda 	temp0
.425e	69 02		adc #$02			adc 	#2
.4260	85 2a		sta $2a				sta 	temp0
.4262	90 02		bcc $4266			bcc 	_AANoCarry
.4264	e6 2b		inc $2b				inc 	temp0+1
.4266					_AANoCarry:
.4266	b5 50		lda $50,x			lda 	esInt0,x
.4268	85 2e		sta $2e				sta 	temp2
.426a	b5 58		lda $58,x			lda 	esInt1,x
.426c	85 2f		sta $2f				sta 	temp2+1
.426e	ac f0 0d	ldy $0df0			ldy 	varType
.4271	b9 4e 43	lda $434e,y			lda 	CAActualSize-$3A,y
.4274	b4 49		ldy $49,x			ldy 	esType+1,x 					; is it top level
.4276	30 02		bmi $427a			bmi 	_AANotPointer
.4278	a9 02		lda #$02			lda 	#2 							; array of pointers is 2.
.427a					_AANotPointer:
.427a	20 f8 43	jsr $43f8			jsr 	MultiplyTemp2ByA 			; multiply the index by the data size, in temp2.
.427d	18		clc				clc
.427e	a5 2a		lda $2a				lda 	temp0
.4280	65 2e		adc $2e				adc 	temp2
.4282	85 2a		sta $2a				sta 	temp0
.4284	a5 2b		lda $2b				lda 	temp0+1
.4286	65 2f		adc $2f				adc 	temp2+1
.4288	85 2b		sta $2b				sta 	temp0+1
.428a	b5 49		lda $49,x			lda 	esType+1,x
.428c	30 07		bmi $4295			bmi 	_AAUsedAllIndices
.428e	a5 2c		lda $2c				lda 	temp1 						; check if this is a pointer array e.g. there are subarrays
.4290	10 14		bpl $42a6			bpl 	_AABadDepth 				; no, too many indexes.
.4292	4c 3c 42	jmp $423c			jmp 	_AAFollow 					; otherwise follow them.
.4295					_AAUsedAllIndices:
.4295	a5 2c		lda $2c				lda 	temp1 						; get original high length byte.
.4297	30 0d		bmi $42a6			bmi 	_AABadDepth 				; if -ve then this is an array of pointers.
.4299	68		pla				pla
.429a	a8		tay				tay
.429b	68		pla				pla
.429c	aa		tax				tax
.429d	a5 2a		lda $2a				lda 	temp0 						; copy address of array element to stack,x
.429f	95 50		sta $50,x			sta 	esInt0,x
.42a1	a5 2b		lda $2b				lda 	temp0+1
.42a3	95 58		sta $58,x			sta 	esInt1,x
.42a5	60		rts				rts
.42a6					_AABadDepth:
.42a6	a2 1c		ldx #$1c			ldx 	#ErrorID_ArrayDepth
.42a8	20 18 15	jsr $1518		jsr	errorHandler
.42ab					_AABadIndex:
.42ab	a2 1b		ldx #$1b			ldx 	#ErrorID_ArrayIndex
.42ad	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: variable/variable.asm


;******  Processing file: variable/array/create.asm

.0dee					elementSize:
>0dee							.fill	 1
.42b0					CreateArray:
.42b0	20 87 44	jsr $4487			jsr 	AccessSetup 				; set up the basic stuff.
.42b3	ad f0 0d	lda $0df0			lda 	varType 					; is the variable type an array
.42b6	4a		lsr a				lsr 	a
.42b7	90 36		bcc $42ef			bcc 	CANotArray 					; no, cause an error.
.42b9	20 90 45	jsr $4590			jsr 	FindVariable 				; does the variable exist already
.42bc	b0 2c		bcs $42ea			bcs 	CAFound 					; cannot redefine it.
.42be	20 c4 44	jsr $44c4			jsr 	CreateVariable 				; create the variable entry.
.42c1	a5 2a		lda $2a				lda 	temp0 						; push address of new variable entry on the stack
.42c3	48		pha				pha
.42c4	a5 2b		lda $2b				lda 	temp0+1
.42c6	48		pha				pha
.42c7	a2 00		ldx #$00			ldx 	#0
.42c9	20 f4 42	jsr $42f4			jsr 	GetArrayDimensions 			; get the array dimensions
.42cc	a2 00		ldx #$00			ldx 	#0 							; create at level $00
.42ce	20 24 43	jsr $4324			jsr 	CreateArrayLevel 			; level to YA
.42d1	aa		tax				tax 								; level now in YX
.42d2	68		pla				pla 								; get address back to temp0 to write.
.42d3	85 2b		sta $2b				sta 	temp0+1
.42d5	68		pla				pla
.42d6	85 2a		sta $2a				sta 	temp0
.42d8	98		tya				tya 								; write YX there.
.42d9	a0 06		ldy #$06			ldy 	#6
.42db	91 2a		sta ($2a),y			sta 	(temp0),y
.42dd	88		dey				dey
.42de	8a		txa				txa
.42df	91 2a		sta ($2a),y			sta 	(temp0),y
.42e1	ac f1 0d	ldy $0df1			ldy 	varEnd 						; restore Y and exit.
.42e4	60		rts				rts
.42e5					CASize:
.42e5	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.42e7	20 18 15	jsr $1518		jsr	errorHandler
.42ea					CAFound:
.42ea	a2 19		ldx #$19			ldx 	#ErrorID_DupArray
.42ec	20 18 15	jsr $1518		jsr	errorHandler
.42ef					CANotArray:
.42ef	a2 1a		ldx #$1a			ldx 	#ErrorID_NotArray
.42f1	20 18 15	jsr $1518		jsr	errorHandler
.42f4					GetArrayDimensions:
.42f4	ad f0 0d	lda $0df0			lda 	varType 					; push variable type on the stack.
.42f7	48		pha				pha
.42f8	ac f1 0d	ldy $0df1			ldy 	varEnd
.42fb					_CAGetDimensions:
.42fb	8a		txa				txa 								; get the next level
.42fc	a2 0a		ldx #$0a		ldx	#10
.42fe	20 07 37	jsr $3707		jsr	mainHandler
.4301	aa		tax				tax
.4302	b5 58		lda $58,x			lda 	esInt1,x 					; index must be < 8192
.4304	29 e0		and #$e0			and 	#$E0
.4306	15 60		ora $60,x			ora 	esInt2,x
.4308	15 68		ora $68,x			ora 	esInt3,x
.430a	d0 d9		bne $42e5			bne 	CASize
.430c	e8		inx				inx 								; next level.
.430d	b1 28		lda ($28),y			lda 	(codePtr),y 				; get/consume following character
.430f	c8		iny				iny
.4310	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; loop back if more dimensions
.4312	f0 e7		beq $42fb			beq 	_CAGetDimensions
.4314	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN 				; right bracket ?
.4316	d0 cd		bne $42e5			bne 	CASize
.4318	a9 ff		lda #$ff			lda 	#$FF 						; set the type past the end to $FF so we know how many
.431a	95 48		sta $48,x			sta 	esType,x 					; dimensions there are.
.431c	68		pla				pla 								; restore the variable type ($3A-$3F)
.431d	8d f0 0d	sta $0df0			sta 	varType
.4320	8c f1 0d	sty $0df1			sty 	varEnd 						; save exit Y value, after dimensions
.4323	60		rts				rts
.4324					CreateArrayLevel:
.4324	ac f0 0d	ldy $0df0			ldy 	varType
.4327	b9 4e 43	lda $434e,y			lda 	CAActualSize-$3A,y
.432a	8d ee 0d	sta $0dee			sta 	elementSize 				; get element size this level.
.432d	b4 49		ldy $49,x			ldy 	esType+1,x 					; is it top level
.432f	30 05		bmi $4336			bmi 	_CANotPointer
.4331	a9 02		lda #$02			lda 	#2 							; array of pointers is 2.
.4333	8d ee 0d	sta $0dee			sta 	elementSize
.4336					_CANotPointer:
.4336	a5 35		lda $35				lda 	lowMemory 					; start creating at temp0, saving start on stack.
.4338	85 2a		sta $2a				sta 	temp0
.433a	48		pha				pha
.433b	a5 36		lda $36				lda 	lowMemory+1
.433d	85 2b		sta $2b				sta 	temp0+1
.433f	48		pha				pha
.4340	20 c1 43	jsr $43c1			jsr 	AllocateArraySpace 			; allocate space for all array stuff at this level.
.4343	a0 00		ldy #$00			ldy 	#0
.4345	b5 50		lda $50,x			lda 	esInt0,x
.4347	91 2a		sta ($2a),y			sta 	(temp0),y
.4349	c8		iny				iny
.434a	b5 58		lda $58,x			lda 	esInt1,x
.434c	91 2a		sta ($2a),y			sta 	(temp0),y
.434e	b5 49		lda $49,x			lda 	esType+1,x 					; do we have another level ?
.4350	30 06		bmi $4358			bmi 	_CALNotLast
.4352	b1 2a		lda ($2a),y			lda 	(temp0),y 					; set bit 7, indicates an array of pointers to other levels.
.4354	09 80		ora #$80			ora 	#$80
.4356	91 2a		sta ($2a),y			sta 	(temp0),y
.4358					_CALNotLast:
.4358	a9 02		lda #$02			lda 	#2
.435a	20 7e 43	jsr $437e			jsr 	_CALAddTemp0
.435d	b5 50		lda $50,x			lda 	esInt0,x 					; copy stack:01 to stack:23 so we can use it to
.435f	95 60		sta $60,x			sta 	esInt2,x 					; count.
.4361	b5 58		lda $58,x			lda 	esInt1,x
.4363	95 68		sta $68,x			sta 	esInt3,x
.4365					_CALClear:
.4365	20 8e 43	jsr $438e			jsr 	EraseOneElement
.4368	ad ee 0d	lda $0dee			lda 	elementSize 				; move to next element
.436b	20 7e 43	jsr $437e			jsr 	_CALAddTemp0
.436e	b5 60		lda $60,x			lda 	esInt2,x 					; decrement counter
.4370	d0 02		bne $4374			bne 	_CALNoBorrow
.4372	d6 68		dec $68,x			dec 	esInt3,x
.4374					_CALNoBorrow:
.4374	d6 60		dec $60,x			dec 	esInt2,x
.4376	b5 68		lda $68,x			lda 	esInt3,x 					; loop back if >= 0 - we need +1 because indices
.4378	10 eb		bpl $4365			bpl 	_CALClear 					; start at 0 e.g. x(10) is actually 11 array entries.
.437a	68		pla				pla 								; restore the start of this into YA.
.437b	a8		tay				tay
.437c	68		pla				pla
.437d	60		rts				rts
.437e					_CALAddTemp0:
.437e	18		clc				clc
.437f	65 2a		adc $2a				adc 	temp0
.4381	85 2a		sta $2a				sta 	temp0
.4383	90 02		bcc $4387			bcc 	_CALANoCarry
.4385	e6 2b		inc $2b				inc 	temp0+1
.4387					_CALANoCarry:
.4387	60		rts				rts
.4388					CAActualSize:
>4388	04 04						.byte 	VarISize,VarISize
>438a	02 02						.byte 	VarSSize,VarSSize
>438c	06 06						.byte 	VarFSize,VarFSize
.438e					EraseOneElement:
.438e	b5 49		lda $49,x			lda 	esType+1,x 					; is this a list of sub arrays
.4390	10 09		bpl $439b			bpl 	_EOESubArray
.4392	a0 00		ldy #$00			ldy 	#0 							; write the empty variable value out.
.4394	ad f0 0d	lda $0df0			lda 	varType
.4397	20 2e 45	jsr $452e			jsr 	ZeroTemp0Y
.439a	60		rts				rts
.439b					_EOESubArray:
.439b	a5 2a		lda $2a				lda 	temp0 						; save temp0, these are effectively locals.
.439d	48		pha				pha
.439e	a5 2b		lda $2b				lda 	temp0+1
.43a0	48		pha				pha
.43a1	ad ee 0d	lda $0dee			lda 	elementSize 				; save element size
.43a4	48		pha				pha
.43a5	e8		inx				inx 								; create at next level
.43a6	20 24 43	jsr $4324			jsr 	CreateArrayLevel
.43a9	ca		dex				dex
.43aa	85 32		sta $32				sta 	tempShort 					; save A
.43ac	68		pla				pla  								; restore element size.
.43ad	8d ee 0d	sta $0dee			sta 	elementSize
.43b0	68		pla				pla 								; restore temp0, which is where this new array level goes.
.43b1	85 2b		sta $2b				sta 	temp0+1
.43b3	68		pla				pla
.43b4	85 2a		sta $2a				sta 	temp0
.43b6	98		tya				tya 								; store Y/A there
.43b7	a0 01		ldy #$01			ldy 	#1
.43b9	91 2a		sta ($2a),y			sta 	(temp0),y
.43bb	a5 32		lda $32				lda 	tempShort
.43bd	88		dey				dey
.43be	91 2a		sta ($2a),y			sta 	(temp0),y
.43c0	60		rts				rts
.43c1					AllocateArraySpace:
.43c1	18		clc				clc 								; element count + 1 => temp2.
.43c2	b5 50		lda $50,x			lda 	esInt0,x
.43c4	69 01		adc #$01			adc 	#1
.43c6	85 2e		sta $2e				sta 	temp2
.43c8	b5 58		lda $58,x			lda 	esInt1,x
.43ca	69 00		adc #$00			adc 	#0
.43cc	85 2f		sta $2f				sta 	temp2+1
.43ce	ad ee 0d	lda $0dee			lda 	elementSize 				; bytes per element
.43d1	20 f8 43	jsr $43f8			jsr 	MultiplyTemp2ByA 			; temp2 = (count + 1) x bytes per element.
.43d4	18		clc				clc 								; add 2 for 'max element' byte.
.43d5	a5 2e		lda $2e				lda 	temp2
.43d7	69 02		adc #$02			adc 	#2
.43d9	85 2e		sta $2e				sta 	temp2
.43db	90 02		bcc $43df			bcc 	_AASNoCarry
.43dd	e6 2f		inc $2f				inc 	temp2+1
.43df					_AASNoCarry:
.43df	18		clc				clc 								; add to low memory, allocating space.
.43e0	a5 35		lda $35				lda 	lowMemory
.43e2	65 2e		adc $2e				adc 	temp2
.43e4	85 35		sta $35				sta 	lowMemory
.43e6	a5 36		lda $36				lda 	lowMemory+1
.43e8	65 2f		adc $2f				adc 	temp2+1
.43ea	85 36		sta $36				sta 	lowMemory+1
.43ec	b0 05		bcs $43f3			bcs 	_AASFail 					; out of memory as adding causes wrapround
.43ee	c5 34		cmp $34				cmp 	highMemory+1 				; >= high memory pointer.
.43f0	b0 01		bcs $43f3			bcs 	_AASFail
.43f2	60		rts				rts
.43f3					_AASFail:
.43f3	a2 22		ldx #$22			ldx 	#ErrorID_Memory
.43f5	20 18 15	jsr $1518		jsr	errorHandler
.43f8					MultiplyTemp2ByA:
.43f8	48		pha				pha
.43f9	a5 2e		lda $2e				lda 	temp2 						; copy temp2 to temp3.
.43fb	85 30		sta $30				sta 	temp3
.43fd	a5 2f		lda $2f				lda 	temp2+1
.43ff	85 31		sta $31				sta 	temp3+1
.4401	68		pla				pla
.4402	06 2e		asl $2e				asl 	temp2 						; double it.
.4404	26 2f		rol $2f				rol 	temp2+1
.4406	c9 02		cmp #$02			cmp 	#2 							; if x 2 then exit.
.4408	f0 15		beq $441f			beq 	_MTBAExit
.440a	c9 06		cmp #$06			cmp 	#6 							; if x 6 then add temp3 to temp2
.440c	d0 0d		bne $441b			bne 	_MTBANotFloat
.440e	18		clc				clc 								; so this will make it x 3
.440f	a5 2e		lda $2e				lda 	temp2
.4411	65 30		adc $30				adc 	temp3
.4413	85 2e		sta $2e				sta 	temp2
.4415	a5 2f		lda $2f				lda 	temp2+1
.4417	65 31		adc $31				adc 	temp3+1
.4419	85 2f		sta $2f				sta 	temp2+1
.441b					_MTBANotFloat:
.441b	06 2e		asl $2e				asl 	temp2 						; double it.
.441d	26 2f		rol $2f				rol 	temp2+1
.441f					_MTBAExit:
.441f	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/variable/access.asm

.0def					varHash:
>0def							.fill	1
.0df0					varType:
>0df0							.fill 	1
.0df1					varEnd:
>0df1							.fill 	1
.003b					hashList:
>003b							.fill 	2
.4420					AccessVariable:
.4420	aa		tax				tax 								; stack in X
.4421	c8		iny				iny									; look at second character
.4422	b1 28		lda ($28),y			lda 	(codePtr),y
.4424	88		dey				dey
.4425	c9 3a		cmp #$3a			cmp 	#TYPE_INT 					; is it the integer marker ($3A)
.4427	d0 15		bne $443e			bne 	_AVLong 					; no, always use the hash tables.
.4429	b1 28		lda ($28),y			lda 	(codePtr),y 				; this is the 6 bit ASCII of A-Z 1-26
.442b	38		sec				sec 	 							; make it 0-25
.442c	e9 01		sbc #$01			sbc 	#1
.442e	0a		asl a				asl 	a 							; x 4 as 4 bytes / variable.
.442f	0a		asl a				asl 	a
.4430	95 50		sta $50,x			sta 	esInt0,x
.4432	a9 0a		lda #$0a			lda 	#SingleLetterVar >> 8 		; make it an address
.4434	95 58		sta $58,x			sta 	esInt1,x
.4436	a9 80		lda #$80			lda 	#$80 						; type is an integer reference.
.4438	95 48		sta $48,x			sta 	esType,x
.443a	c8		iny				iny 								; skip over the variable reference in the code.
.443b	c8		iny				iny  								; (1 letter, 1 type)
.443c	8a		txa				txa 								; stack in A to return.
.443d	60		rts				rts
.443e					_AVLong:
.443e	8a		txa				txa
.443f	48		pha				pha
.4440	20 87 44	jsr $4487			jsr 	AccessSetup 				; set up the basic information we need for later
.4443	20 90 45	jsr $4590			jsr 	FindVariable 				; does the variable exist already ?
.4446	b0 0e		bcs $4456			bcs 	_AVFound 					; yes, then its found
.4448	ad f0 0d	lda $0df0			lda 	varType 					; otherwise, is the variable type an array
.444b	4a		lsr a				lsr 	a
.444c	90 05		bcc $4453			bcc 	_AVCanCreate 				; if not, we can autocreate
.444e	a2 15		ldx #$15			ldx 	#ErrorID_noauto
.4450	20 18 15	jsr $1518		jsr	errorHandler
.4453					_AVCanCreate:
.4453	20 c4 44	jsr $44c4			jsr 	CreateVariable 				; variable does not exist, create it.
.4456					_AVFound:
.4456	68		pla				pla
.4457	aa		tax				tax
.4458	18		clc				clc 								; copy temp0 (variable record address)
.4459	a5 2a		lda $2a				lda 	temp0 						; +5 (to point to the data)
.445b	69 05		adc #$05			adc 	#5 							; (first 5 bytes are link, name, hash)
.445d	95 50		sta $50,x			sta 	esInt0,x
.445f	a5 2b		lda $2b				lda 	temp0+1
.4461	69 00		adc #$00			adc 	#0
.4463	95 58		sta $58,x			sta 	esInt1,x
.4465	a9 00		lda #$00			lda 	#0
.4467	95 60		sta $60,x			sta 	esInt2,x
.4469	95 68		sta $68,x			sta 	esInt3,x
.446b	ac f0 0d	ldy $0df0			ldy 	varType 					; get the type ID from the type.
.446e	b9 47 44	lda $4447,y			lda 	_AVTypeTable-$3A,y 			; e.g. a reference to int/float/string.
.4471	95 48		sta $48,x			sta 	esType,x
.4473	ac f1 0d	ldy $0df1			ldy 	varEnd 						; restore Y
.4476	ad f0 0d	lda $0df0			lda 	VarType 					; get variable type, put LSB into C
.4479	4a		lsr a				lsr 	a
.447a	90 03		bcc $447f			bcc 	_AVNotArray 				; if carry set,it is an array variable.
.447c	20 28 42	jsr $4228			jsr 	AccessArray 				; array lookup. if LSB was set.
.447f					_AVNotArray:
.447f	8a		txa				txa 								; return stack in A and return
.4480	60		rts				rts
.4481					_AVTypeTable:
>4481	80 80						.byte 	$80,$80						; integer
>4483	c0 c0						.byte 	$C0,$C0 					; string
>4485	81 81						.byte 	$81,$81 					; float
.4487					AccessSetup:
.4487	a9 00		lda #$00			lda 	#0 							; zero the hash byte.
.4489	8d ef 0d	sta $0def			sta 	varHash
.448c	98		tya				tya
.448d	48		pha				pha
.448e	b1 28		lda ($28),y	_ASLoop:lda 	(codePtr),y					; get next identifier character
.4490	c9 3a		cmp #$3a			cmp 	#$3A 						; is it 3A-3F which end all identifiers ?
.4492	b0 0b		bcs $449f			bcs 	_ASComplete
.4494	18		clc				clc 								; add to the hash. Might improve this.
.4495	6d ef 0d	adc $0def			adc 	varHash
.4498	8d ef 0d	sta $0def			sta 	varHash
.449b	c8		iny				iny 								; next character
.449c	4c 8e 44	jmp $448e			jmp 	_ASLoop
.449f					_ASComplete:
.449f	8d f0 0d	sta $0df0			sta 	varType 					; save variable type byte
.44a2	c8		iny				iny
.44a3	8c f1 0d	sty $0df1			sty 	varEnd 						; save the ending position.
.44a6	38		sec				sec 								; convert type byte from $3A-$3F to 0..5
.44a7	e9 3a		sbc #$3a			sbc 	#$3A
.44a9	0a		asl a				asl 	a 							; multiply by hashTableSize (8 in this case)
.44aa	0a		asl a				asl 	a
.44ab	0a		asl a				asl 	a
.44ac	0a		asl a				asl 	a 							; 2 bytes/word
.44ad	85 2a		sta $2a				sta 	temp0 						; this is the offset to the start of the table.
.44af	ad ef 0d	lda $0def			lda 	varHash 					; get hash
.44b2	29 07		and #$07			and 	#(hashTableSize-1)			; force into range (for 8,0..7)
.44b4	0a		asl a				asl  	a 							; x 2 (for word) and clear carry
.44b5	65 2a		adc $2a				adc 	temp0 						; now offset from the start of the hash table.
.44b7	69 68		adc #$68			adc 	#hashTables & $FF 			; add to hash table base address
.44b9	85 3b		sta $3b				sta 	hashList 					; making hashLists point to the head of the link list.
.44bb	a9 0a		lda #$0a			lda 	#hashTables >> 8
.44bd	69 00		adc #$00			adc 	#0
.44bf	85 3c		sta $3c				sta 	hashList+1
.44c1	68		pla				pla
.44c2	a8		tay				tay
.44c3	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/variable/create.asm

.44c4					CreateVariable:
.44c4	98		tya				tya 								; push Y on the stack twice.
.44c5	48		pha				pha									; position in code of the new variable.
.44c6	48		pha				pha
.44c7	ae f0 0d	ldx $0df0			ldx 	varType 					; get var type 0-5 from the var type
.44ca	bd ee 44	lda $44ee,x			lda		_CVSize-$3A,x 				; the bytes required for this new variable.
.44cd	48		pha				pha 								; save length
.44ce	a5 35		lda $35				lda 	lowMemory 					; set low Memory ptr to temp0
.44d0	85 2a		sta $2a				sta 	temp0 						; (address of the new variable)
.44d2	a5 36		lda $36				lda 	lowMemory+1
.44d4	85 2b		sta $2b				sta 	temp0+1
.44d6	68		pla				pla 								; get length
.44d7	18		clc				clc 								; add to low memory.
.44d8	65 35		adc $35				adc 	lowMemory
.44da	85 35		sta $35				sta 	lowMemory
.44dc	90 08		bcc $44e6			bcc 	_CVNoCarry
.44de	e6 36		inc $36				inc 	lowMemory+1
.44e0	a5 36		lda $36				lda 	lowMemory+1 				; check out of memory.
.44e2	c5 34		cmp $34				cmp 	highMemory+1
.44e4	b0 3d		bcs $4523			bcs 	_CVMemory
.44e6					_CVNoCarry:
.44e6	ad ef 0d	lda $0def			lda 	varHash 					; store hash at offset 4.
.44e9	a0 04		ldy #$04			ldy 	#4
.44eb	91 2a		sta ($2a),y			sta 	(temp0),y
.44ed	68		pla				pla 								; offset, work out where the variable name is.
.44ee	18		clc				clc
.44ef	65 28		adc $28				adc 	codePtr
.44f1	a0 02		ldy #$02			ldy 	#2 							; copy that into slots 2 + 3.
.44f3	91 2a		sta ($2a),y			sta 	(temp0),y
.44f5	a5 29		lda $29				lda 	codePtr+1
.44f7	69 00		adc #$00			adc 	#0
.44f9	c8		iny				iny
.44fa	91 2a		sta ($2a),y			sta 	(temp0),y
.44fc	cd c9 0a	cmp $0ac9			cmp 	basePage+1 					; compare against the program base.
.44ff	b0 03		bcs $4504			bcs 	_CVNotImmediate
.4501	20 66 45	jsr $4566			jsr 	CloneVariableName 			; we need to clone the variable name (immediate mode)
.4504					_CVNotImmediate:
.4504	a0 00		ldy #$00			ldy 	#0 							; copy current hash pointer in link
.4506	b1 3b		lda ($3b),y			lda 	(hashList),y 				; so we're inserting it in the front of a linked list
.4508	91 2a		sta ($2a),y			sta 	(temp0),y
.450a	c8		iny				iny
.450b	b1 3b		lda ($3b),y			lda 	(hashList),y
.450d	91 2a		sta ($2a),y			sta 	(temp0),y
.450f	a5 2b		lda $2b				lda 	temp0+1 					; set new link
.4511	91 3b		sta ($3b),y			sta 	(hashList),y
.4513	88		dey				dey
.4514	a5 2a		lda $2a				lda 	temp0
.4516	91 3b		sta ($3b),y			sta 	(hashList),y
.4518	ad f0 0d	lda $0df0			lda 	varType 					; type in A
.451b	a0 05		ldy #$05			ldy 	#5 							; offset in Y
.451d	20 2e 45	jsr $452e			jsr 	ZeroTemp0Y 					; zero (temp0),y with whatever type.
.4520	68		pla				pla
.4521	a8		tay				tay
.4522	60		rts				rts
.4523					_CVMemory:
.4523	a2 22		ldx #$22			ldx 	#ErrorID_Memory
.4525	20 18 15	jsr $1518		jsr	errorHandler
>4528	09 07				_CVSize:.byte 	VarHSize+VarISize,VarHSize+VarASize 					; <storage for integer>
>452a	07 07						.byte 	VarHSize+VarSSize,VarHSize+VarASize 					; <storage for string>
>452c	0b 07						.byte 	VarHSize+VarFSize,VarHSize+VarASize 					; <storage for float>
.452e					ZeroTemp0Y:
.452e	4a		lsr a				lsr 	a 							; bit 0 in carry
.452f	0a		asl a				asl 	a
.4530	b0 19		bcs $454b			bcs 	_ZTExit 					; we don't initialise arrays.
.4532	c9 3c		cmp #$3c			cmp 	#$3C 						; check string
.4534	f0 16		beq $454c			beq 	_ZTWriteNullString 			; write "" string
.4536	c9 3e		cmp #$3e			cmp 	#$3E 						; check float
.4538	f0 22		beq $455c			beq 	_ZTWriteFloat
.453a	98		tya				tya
.453b	48		pha				pha
.453c	a9 00		lda #$00			lda 	#0
.453e	91 2a		sta ($2a),y			sta 	(temp0),y
.4540	c8		iny				iny
.4541	91 2a		sta ($2a),y			sta 	(temp0),y
.4543	c8		iny				iny
.4544	91 2a		sta ($2a),y			sta 	(temp0),y
.4546	c8		iny				iny
.4547	91 2a		sta ($2a),y			sta 	(temp0),y
.4549	68		pla				pla
.454a	a8		tay				tay
.454b					_ZTExit:
.454b	60		rts				rts
.454c					_ZTWriteNullString:
.454c	a9 00		lda #$00			lda 	#0 							; put a reference to null string as the default value.
.454e	8d ce 0a	sta $0ace			sta 	NullString
.4551	a9 ce		lda #$ce			lda 	#NullString & $FF
.4553	91 2a		sta ($2a),y			sta 	(temp0),y
.4555	a9 0a		lda #$0a			lda 	#NullString >> 8
.4557	c8		iny				iny
.4558	91 2a		sta ($2a),y			sta 	(temp0),y
.455a	88		dey				dey
.455b	60		rts				rts
.455c					_ZTWriteFloat:
.455c	8a		txa				txa
.455d	48		pha				pha
.455e	a2 20		ldx #$20		ldx	#32
.4560	20 81 1e	jsr $1e81		jsr	floatingpointHandler
.4563	68		pla				pla
.4564	aa		tax				tax
.4565	60		rts				rts
.4566					CloneVariableName:
.4566	a0 02		ldy #$02			ldy 	#2 							; copy vname address to temp2
.4568	b1 2a		lda ($2a),y			lda 	(temp0),y
.456a	85 2e		sta $2e				sta 	temp2
.456c	c8		iny				iny
.456d	b1 2a		lda ($2a),y			lda 	(temp0),y
.456f	85 2f		sta $2f				sta 	temp2+1
.4571	a5 36		lda $36				lda 	lowMemory+1 				; copy lowMemory address to (temp0),2/3
.4573	91 2a		sta ($2a),y			sta 	(temp0),y
.4575	88		dey				dey
.4576	a5 35		lda $35				lda 	lowMemory
.4578	91 2a		sta ($2a),y			sta 	(temp0),y
.457a	a0 00		ldy #$00			ldy 	#0 							; copy data from (temp2) to (lowMemory)
.457c					_CVNCopy:
.457c	b1 2e		lda ($2e),y			lda		(temp2),y
.457e	91 35		sta ($35),y			sta 	(lowMemory),y
.4580	c8		iny				iny
.4581	c9 3a		cmp #$3a			cmp 	#$3A 						; until the whole name has been copied.
.4583	90 f7		bcc $457c			bcc 	_CVNCopy
.4585	98		tya				tya 								; add Y to low memory
.4586	18		clc				clc
.4587	65 35		adc $35				adc 	lowMemory
.4589	85 35		sta $35				sta 	lowMemory
.458b	90 02		bcc $458f			bcc 	_CVNNoCarry
.458d	e6 36		inc $36				inc 	lowMemory+1
.458f					_CVNNoCarry:
.458f	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/variable/find.asm

.4590					FindVariable:
.4590	98		tya				tya
.4591	48		pha				pha
.4592	98		tya				tya 								; point temp2 to the actual name
.4593	18		clc				clc 								; in memory of the variable being created
.4594	65 28		adc $28				adc 	codePtr
.4596	85 2e		sta $2e				sta 	temp2
.4598	a5 29		lda $29				lda 	codePtr+1
.459a	69 00		adc #$00			adc 	#0
.459c	85 2f		sta $2f				sta 	temp2+1
.459e	a0 00		ldy #$00			ldy 	#0
.45a0	a5 3b		lda $3b				lda 	hashList 					; copy hashlist to temp0
.45a2	85 2a		sta $2a				sta 	temp0
.45a4	a5 3c		lda $3c				lda 	hashList+1
.45a6	85 2b		sta $2b				sta 	temp0+1
.45a8	a0 01		ldy #$01	_FVNext:ldy 	#1 							; get MSB
.45aa	b1 2a		lda ($2a),y			lda 	(temp0),y
.45ac	f0 2c		beq $45da			beq 	_FVFail
.45ae	aa		tax				tax
.45af	88		dey				dey		 							; get LSB
.45b0	b1 2a		lda ($2a),y			lda 	(temp0),y
.45b2	85 2a		sta $2a				sta 	temp0 						; update pointer.
.45b4	86 2b		stx $2b				stx 	temp0+1
.45b6	a0 04		ldy #$04			ldy 	#4 							; check hashes match
.45b8	b1 2a		lda ($2a),y			lda 	(temp0),y
.45ba	cd ef 0d	cmp $0def			cmp 	varHash
.45bd	d0 e9		bne $45a8			bne 	_FVNext 					; if not, no point in checking the name.
.45bf	88		dey				dey 								; copy name pointer (+2,+3) to temp1.
.45c0	b1 2a		lda ($2a),y			lda 	(temp0),y
.45c2	85 2d		sta $2d				sta 	temp1+1
.45c4	88		dey				dey
.45c5	b1 2a		lda ($2a),y			lda 	(temp0),y
.45c7	85 2c		sta $2c				sta 	temp1
.45c9	a0 00		ldy #$00			ldy 	#0
.45cb					_FVCheck:
.45cb	b1 2c		lda ($2c),y			lda 	(temp1),y 					; compare names
.45cd	d1 2e		cmp ($2e),y			cmp 	(temp2),y
.45cf	d0 d7		bne $45a8			bne 	_FVNext		 				; fail if different.
.45d1	c8		iny				iny
.45d2	c9 3a		cmp #$3a			cmp 	#$3A 						; until reached the end marker.
.45d4	90 f5		bcc $45cb			bcc 	_FVCheck
.45d6	68		pla				pla
.45d7	a8		tay				tay
.45d8	38		sec				sec
.45d9	60		rts				rts
.45da					_FVFail:
.45da	68		pla				pla
.45db	a8		tay				tay
.45dc	18		clc				clc
.45dd	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/variable/reset.asm

.45de					HashTableReset:
.45de	a2 60		ldx #$60			ldx 	#6*2*hashTableSize			; 6 types, 2 bytes per table entry.
.45e0	a9 00		lda #$00			lda 	#0
.45e2					_HTRClear:
.45e2	9d 67 0a	sta $0a67,x			sta 	hashTables-1,x
.45e5	ca		dex				dex
.45e6	d0 fa		bne $45e2			bne 	_HTRClear
.45e8	60		rts				rts

;******  Return to file: variable/variable.asm

.45e9					variableHandler:
.45e9	7c ec 45	jmp ($45ec,x)			jmp 	(variableVectors,x)
.45ec					variableVectors:
>45ec	f4 45					.word _DummyControlHandler ; index 0
>45ee	20 44					.word AccessVariable       ; index 2
>45f0	b0 42					.word CreateArray          ; index 4
>45f2	de 45					.word HashTableReset       ; index 6
.45f4					_DummyControlHandler:
.45f4	60		rts			rts

;******  Return to file: basic.asm

.45f5					section_end_variable:
.45f5					section_start_footer:

;******  Processing file: footer/footer.asm


;******  Processing file: footer/99end.asm

.003d					endZeroPage:
.0df2					endStorage:
>45f5							.align 	256
.4600					programMemory:
>45ff	ff						.byte 	$FF

;******  Return to file: footer/footer.asm


;******  Return to file: basic.asm

.4600					section_end_footer:

;******  End of listing
