
; 64tass Turbo Assembler Macro V1.55.2200 listing file
; 64tass -D autorun=1 -D coldstartnew=0 -Walias -Wmacro-prefix -Wall -q -c -L ../source/bin/basic.lst -l ../source/bin/basic.lbl -Wall -o ../source/bin/stub.prg basic.asm
; Thu Mar 25 18:16:30 2021

;Offset	;Hex		;Monitor	;Source

;******  Command line definitions

=1					autorun=1
=0					coldstartnew=0

;******  Processing input file: basic.asm


;******  Processing file: header/01common.inc


;******  Processing file: header/../generated/installed.inc

=1					installed_header = 1
=1					installed_main = 1
=1					installed_variable = 1
=1					installed_assembler = 1
=1					installed_error = 1
=1					installed_extension = 1
=1					installed_string = 1
=1					installed_device = 1
=0					installed_floatingpoint = 0
=1					installed_interaction = 1
=1					installed_tokeniser = 1
=1					installed_footer = 1

;******  Return to file: header/01common.inc

=$1000					CodeStart = $1000
=$800					MemoryStorage = $800
=$9f00					EndOfMemory = $9F00
=$28					ZeroPageStorage = $28
=$48					StackAddress = $48
=8					StackSize = 8
=2					retStackSizePages = 2
=8					hashTableSize = 8			; if this changes, the calculation is AccessSetup has to match it.
="G"					markerGOSUB = 'G'
="R"					markerREPEAT = 'R'
="F"					markerFOR = 'F'
="W"					markerWHILE = 'W'
="P"					markerPROC = 'P'
="$"					markerSTRING = '$'
="#"					markerFLOAT = '#'
="%"					markerINT = '%'
=5					VarHSize = 5 								; header (2 link, 2 name, 1 hash)
=2					VarASize = 2 								; array [address of first level]
=4					VarISize = 4 								; integer (32 bit)
=6					VarFSize = 6 								; float (4 mantissa, 1 exponent 1 sign/zero)
=2					VarSSize = 2 								; address (2 bytes)

;******  Return to file: basic.asm


;******  Processing file: header/02macros.inc


;******  Return to file: basic.asm


;******  Processing file: header/03data.inc

>0028					codePtr:.fill 	2							; (codePtr),y points to code.
>002a					temp0: 	.fill 	2							; working variables.
>002c					temp1: 	.fill 	2
>002e					temp2: 	.fill 	2
>0030					temp3: 	.fill 	2
.0032					tempshort:
>0032							.fill 	1
.0033					highMemory:
>0033							.fill 	2
.0035					lowMemory:
>0035							.fill 	2
>0800							.align	256
.0800					returnStack:
>0800							.fill 	retStackSizePages * 256
=512					retStackSize = retStackSizePages * 256
.0a00					SingleLetterVar:
>0a00					 		.fill 	26*4
.0a68					currentStorage:
>0048					esType:	.fill 	StackSize  					; type byte (see above)
>0050					esInt0:	.fill 	StackSize 					; integer or mantissa
>0058					esInt1:	.fill 	StackSize
>0060					esInt2:	.fill 	StackSize
>0068					esInt3:	.fill 	StackSize
>0070					esExp:	.fill 	StackSize 					; exponent ($80 = 0)
>0078					esZSign:.fill 	StackSize 					; for floating point - sign (bit 7) isZero (bit 6)
.0080					endOfStack:
=$50					esMant0 = esInt0 							; synonyms.
=$58					esMant1 = esInt1
=$60					esMant2 = esInt2
=$68					esMant3 = esInt3
.0a68					hashTables:
>0a68							.fill 	6*2*hashTableSize
.0ac8					basePage:
>0ac8							.fill 	2
.0aca					endProgram:
>0aca							.fill 	2
.0acc					endMemory:
>0acc							.fill 	2
.0ace					NullString:
>0ace							.fill 	1							; don't waste memory concreting null strings.
.0acf					convertBuffer:
>0acf							.fill 	35

;******  Processing file: header/../generated/tokenconst.inc

=$80					TOK_EOL=$80
=$81					TOK_SHIFT1=$81
=$82					TOK_SHIFT2=$82
=$83					TOK_SHIFT3=$83
=$84					TOK_FPC=$84
=$85					TOK_STR=$85
=$86					TOK_BINARYST=$86
=$99					TOK_STRUCTST=$99
=$a4					TOK_UNARYST=$a4
=$c9					TOK_TOKENS=$c9
=$86					TKW_AND                      = $86 ; and
=$87					TKW_OR                       = $87 ; or
=$88					TKW_XOR                      = $88 ; xor
=$89					TKW_GREATEREQUAL             = $89 ; >=
=$8a					TKW_LESSEQUAL                = $8a ; <=
=$8b					TKW_GREATER                  = $8b ; >
=$8c					TKW_LESS                     = $8c ; <
=$8d					TKW_EQUAL                    = $8d ; =
=$8e					TKW_LESSGREATER              = $8e ; <>
=$8f					TKW_PLUS                     = $8f ; +
=$90					TKW_MINUS                    = $90 ; -
=$91					TKW_GREATERGREATER           = $91 ; >>
=$92					TKW_LESSLESS                 = $92 ; <<
=$93					TKW_STAR                     = $93 ; *
=$94					TKW_SLASH                    = $94 ; /
=$95					TKW_MOD                      = $95 ; mod
=$96					TKW_HAT                      = $96 ; ^
=$97					TKW_PLING                    = $97 ; !
=$98					TKW_QMARK                    = $98 ; ?
=$99					TKW_REPEAT                   = $99 ; repeat
=$9a					TKW_WHILE                    = $9a ; while
=$9b					TKW_FOR                      = $9b ; for
=$9c					TKW_IF                       = $9c ; if
=$9d					TKW_DEFPROC                  = $9d ; defproc
=$9e					TKW_UNTIL                    = $9e ; until
=$9f					TKW_WEND                     = $9f ; wend
=$a0					TKW_NEXT                     = $a0 ; next
=$a1					TKW_THEN                     = $a1 ; then
=$a2					TKW_ENDIF                    = $a2 ; endif
=$a3					TKW_ENDPROC                  = $a3 ; endproc
=$a4					TKW_LPAREN                   = $a4 ; (
=$a5					TKW_LENLPAREN                = $a5 ; len(
=$a6					TKW_SGNLPAREN                = $a6 ; sgn(
=$a7					TKW_ABSLPAREN                = $a7 ; abs(
=$a8					TKW_RANDOMLPAREN             = $a8 ; random(
=$a9					TKW_PAGE                     = $a9 ; page
=$aa					TKW_TRUE                     = $aa ; true
=$ab					TKW_FALSE                    = $ab ; false
=$ac					TKW_MINLPAREN                = $ac ; min(
=$ad					TKW_MAXLPAREN                = $ad ; max(
=$ae					TKW_SYSLPAREN                = $ae ; sys(
=$af					TKW_TIMERLPAREN              = $af ; timer(
=$b0					TKW_EVENTLPAREN              = $b0 ; event(
=$b1					TKW_GETLPAREN                = $b1 ; get(
=$b2					TKW_INKEYLPAREN              = $b2 ; inkey(
=$b3					TKW_ALLOCLPAREN              = $b3 ; alloc(
=$b4					TKW_CHRDOLLARLPAREN          = $b4 ; chr$(
=$b5					TKW_LEFTDOLLARLPAREN         = $b5 ; left$(
=$b6					TKW_MIDDOLLARLPAREN          = $b6 ; mid$(
=$b7					TKW_RIGHTDOLLARLPAREN        = $b7 ; right$(
=$b8					TKW_STRDOLLARLPAREN          = $b8 ; str$(
=$b9					TKW_VALLPAREN                = $b9 ; val(
=$ba					TKW_PEEKLPAREN               = $ba ; peek(
=$bb					TKW_DEEKLPAREN               = $bb ; deek(
=$bc					TKW_LEEKLPAREN               = $bc ; leek(
=$bd					TKW_ASCLPAREN                = $bd ; asc(
=$be					TKW_INTLPAREN                = $be ; int(
=$bf					TKW_FLOATLPAREN              = $bf ; float(
=$c0					TKW_ISVALLPAREN              = $c0 ; isval(
=$c1					TKW_UPPERDOLLARLPAREN        = $c1 ; upper$(
=$c2					TKW_LOWERDOLLARLPAREN        = $c2 ; lower$(
=$c3					TKW_ATC                      = $c3 ; @
=$c4					TKW_WAVY                     = $c4 ; ~
=$c5					TKW_AMP                      = $c5 ; &
=$c6					TKW_GETDOLLARLPAREN          = $c6 ; get$(
=$c7					TKW_INKEYDOLLARLPAREN        = $c7 ; inkey$(
=$c8					TKW_MEM                      = $c8 ; mem
=$c9					TKW_RPAREN                   = $c9 ; )
=$ca					TKW_COLON                    = $ca ; :
=$cb					TKW_COMMA                    = $cb ; ,
=$cc					TKW_SEMICOLON                = $cc ; ;
=$cd					TKW_QUOTE                    = $cd ; '
=$ce					TKW_TO                       = $ce ; to
=$cf					TKW_STEP                     = $cf ; step
=$d0					TKW_PROC                     = $d0 ; proc
=$d1					TKW_LOCAL                    = $d1 ; local
=$d2					TKW_DIM                      = $d2 ; dim
=$d3					TKW_REM                      = $d3 ; rem
=$d4					TKW_LET                      = $d4 ; let
=$d5					TKW_INPUT                    = $d5 ; input
=$d6					TKW_ELSE                     = $d6 ; else
=$d7					TKW_VDU                      = $d7 ; vdu
=$d8					TKW_PRINT                    = $d8 ; print
=$d9					TKW_DATA                     = $d9 ; data
=$da					TKW_IMAGE                    = $da ; image
=$db					TKW_AT                       = $db ; at
=$dc					TKW_FLIP                     = $dc ; flip
=$dd					TKW_ASSERT                   = $dd ; assert
=$de					TKW_POKE                     = $de ; poke
=$df					TKW_DOKE                     = $df ; doke
=$e0					TKW_LOKE                     = $e0 ; loke
=$e1					TKW_INK                      = $e1 ; ink
=$e2					TKW_PAPER                    = $e2 ; paper
=$e3					TKW_CLS                      = $e3 ; cls
=$e4					TKW_LOCATE                   = $e4 ; locate
=$e5					TKW_PERIOD                   = $e5 ; .
=$e6					TKW_HASH                     = $e6 ; #
=$e7					TKW_CLEAR                    = $e7 ; clear
=$86					TKW_LOAD                     = $86 ; load
=$87					TKW_SAVE                     = $87 ; save
=$88					TKW_LIST                     = $88 ; list
=$89					TKW_NEW                      = $89 ; new
=$8a					TKW_BREAK                    = $8a ; break
=$8b					TKW_RUN                      = $8b ; run
=$8c					TKW_READ                     = $8c ; read
=$8d					TKW_RESTORE                  = $8d ; restore
=$8e					TKW_END                      = $8e ; end
=$8f					TKW_STOP                     = $8f ; stop
=$90					TKW_XEMU                     = $90 ; xemu
=$91					TKW_GOTO                     = $91 ; goto
=$92					TKW_GOSUB                    = $92 ; gosub
=$93					TKW_RETURN                   = $93 ; return
=$94					TKW_ORA                      = $94 ; ora
=$95					TKW_LPARENANDRPAREN          = $95 ; (and)
=$96					TKW_EOR                      = $96 ; eor
=$97					TKW_ADC                      = $97 ; adc
=$98					TKW_STA                      = $98 ; sta
=$99					TKW_LDA                      = $99 ; lda
=$9a					TKW_CMP                      = $9a ; cmp
=$9b					TKW_SBC                      = $9b ; sbc
=$9c					TKW_ASL                      = $9c ; asl
=$9d					TKW_ROL                      = $9d ; rol
=$9e					TKW_LSR                      = $9e ; lsr
=$9f					TKW_ROR                      = $9f ; ror
=$a0					TKW_STX                      = $a0 ; stx
=$a1					TKW_LDX                      = $a1 ; ldx
=$a2					TKW_DEC                      = $a2 ; dec
=$a3					TKW_INC                      = $a3 ; inc
=$a4					TKW_STZ                      = $a4 ; stz
=$a5					TKW_BIT                      = $a5 ; bit
=$a6					TKW_STY                      = $a6 ; sty
=$a7					TKW_LDY                      = $a7 ; ldy
=$a8					TKW_CPY                      = $a8 ; cpy
=$a9					TKW_CPX                      = $a9 ; cpx
=$aa					TKW_TSB                      = $aa ; tsb
=$ab					TKW_TRB                      = $ab ; trb
=$ac					TKW_JSR                      = $ac ; jsr
=$ad					TKW_JMP                      = $ad ; jmp
=$ae					TKW_BPL                      = $ae ; bpl
=$af					TKW_BMI                      = $af ; bmi
=$b0					TKW_BVC                      = $b0 ; bvc
=$b1					TKW_BVS                      = $b1 ; bvs
=$b2					TKW_BCC                      = $b2 ; bcc
=$b3					TKW_BCS                      = $b3 ; bcs
=$b4					TKW_BNE                      = $b4 ; bne
=$b5					TKW_BEQ                      = $b5 ; beq
=$b6					TKW_BRA                      = $b6 ; bra
=$b7					TKW_BRK                      = $b7 ; brk
=$b8					TKW_PHP                      = $b8 ; php
=$b9					TKW_CLC                      = $b9 ; clc
=$ba					TKW_PLP                      = $ba ; plp
=$bb					TKW_SEC                      = $bb ; sec
=$bc					TKW_RTI                      = $bc ; rti
=$bd					TKW_PHA                      = $bd ; pha
=$be					TKW_CLI                      = $be ; cli
=$bf					TKW_PHY                      = $bf ; phy
=$c0					TKW_RTS                      = $c0 ; rts
=$c1					TKW_PLA                      = $c1 ; pla
=$c2					TKW_SEI                      = $c2 ; sei
=$c3					TKW_PLY                      = $c3 ; ply
=$c4					TKW_DEY                      = $c4 ; dey
=$c5					TKW_TXA                      = $c5 ; txa
=$c6					TKW_TYA                      = $c6 ; tya
=$c7					TKW_TXS                      = $c7 ; txs
=$c8					TKW_TAY                      = $c8 ; tay
=$c9					TKW_TAX                      = $c9 ; tax
=$ca					TKW_CLV                      = $ca ; clv
=$cb					TKW_TSX                      = $cb ; tsx
=$cc					TKW_INY                      = $cc ; iny
=$cd					TKW_DEX                      = $cd ; dex
=$ce					TKW_CLD                      = $ce ; cld
=$cf					TKW_PHX                      = $cf ; phx
=$d0					TKW_INX                      = $d0 ; inx
=$d1					TKW_NOP                      = $d1 ; nop
=$d2					TKW_SED                      = $d2 ; sed
=$d3					TKW_PLX                      = $d3 ; plx
=$86					TKW_VPOKE                    = $86 ; vpoke
=$87					TKW_VDOKE                    = $87 ; vdoke
=$88					TKW_VLOAD                    = $88 ; vload
=$89					TKW_MODE                     = $89 ; mode
=$8a					TKW_PALETTE                  = $8a ; palette
=$8b					TKW_SPRITE                   = $8b ; sprite
=$86					TKW_VPEEKLPAREN              = $86 ; vpeek(
=$87					TKW_VDEEKLPAREN              = $87 ; vdeek(

;******  Return to file: header/03data.inc

=$3a					TYPE_INT =		($3A) 						; type bytes that end identifier.
=$3b					TYPE_INTARRAY =	($3B)
=$3c					TYPE_STR =		($3C)
=$3d					TYPE_STRARRAY =	($3D)
=$3e					TYPE_FLOAT =	($3E)
=$3f					TYPE_FLOATARRAY=($3F)

;******  Processing file: header/../generated/asmconst.inc

=$94					TKA_GROUP1 = $94
=$9c					TKA_GROUP2 = $9c
=$ae					TKA_GROUP3 = $ae
=$b7					TKA_GROUP4 = $b7
=$d4					TKA_END4 = $d4

;******  Return to file: header/03data.inc


;******  Return to file: basic.asm


;******  Processing file: header/header.inc


;******  Return to file: basic.asm


;******  Processing file: assembler/asmconst.inc

=0					AMD_IMM		= 0					; Immediate mode.
=1					AMD_ZERO 	= 1					; Zero Page
=2					AMD_ACCIMP	= 2					; Accumulator/Implied
=3					AMD_ABS 	= 3					; Absolute
=4					AMD_ZEROINDY= 4					; Zero Indirect,Y
=5					AMD_ZEROX 	= 5					; Zero Page,X
=6					AMD_ABSY 	= 6					; Absolute,Y
=7					AMD_ABSX 	= 7					; Absolute,X
=8					AMD_ZEROIND = 8					; Zero Indirect
=9					AMD_ZEROY 	= 9					; Zero Page,Y
=10					AMD_ABSIND 	= 10				; Absolute Indirect
=11					AMD_ABSINDX	= 11				; Absolute Indirect Indexed
=12					AMD_REL		= 12				; Relative
=13					AMD_ZEROINDX= 13 				; Zero Indirect,X

;******  Return to file: basic.asm


;******  Processing file: assembler/assembler.inc


;******  Return to file: basic.asm


;******  Processing file: device/device.inc


;******  Return to file: basic.asm


;******  Processing file: error/error.inc


;******  Return to file: basic.asm


;******  Processing file: error/errorhandler.inc


;******  Processing file: error/../generated/errorid.inc

=1					ErrorID_Missing = 1 ; Feature not Present
=2					ErrorID_Syntax = 2 ; Syntax Error
=3					ErrorID_NoModule = 3 ; Module disabled
=4					ErrorID_Assert = 4 ; Assertion failed
=5					ErrorID_DivZero = 5 ; Divide By Zero
=6					ErrorID_Stop = 6 ; Stop
=7					ErrorID_BadType = 7 ; Type Mismatch
=8					ErrorID_BadValue = 8 ; Illegal Value
=9					ErrorID_MissingRP = 9 ; Missing right bracket
=10					ErrorID_MissingComma = 10 ; Missing comma
=11					ErrorID_NoReference = 11 ; Missing reference
=12					ErrorID_LineNumber = 12 ; Line Number not found
=13					ErrorID_StrLen = 13 ; String too long
=14					ErrorID_ReturnErr = 14 ; RETURN without GOSUB
=15					ErrorID_UntilErr = 15 ; UNTIL without REPEAT
=16					ErrorID_NextErr = 16 ; NEXT without FOR
=17					ErrorID_WendErr = 17 ; WEND without WHILE
=18					ErrorID_endprocErr = 18 ; ENDPROC without PROC
=19					ErrorID_BadIndex = 19 ; Bad NEXT index
=20					ErrorID_Struct = 20 ; Structures nested wrong
=21					ErrorID_NoAuto = 21 ; Cannot create variable
=22					ErrorID_RetStack = 22 ; Return stack out of space
=23					ErrorID_NoProc = 23 ; Unknown Procedure
=24					ErrorID_Params = 24 ; Parameters do not match
=25					ErrorID_DupArray = 25 ; Array already defined
=26					ErrorID_NotArray = 26 ; DIM requires array
=27					ErrorID_ArrayIndex = 27 ; Bad array index
=28					ErrorID_ArrayDepth = 28 ; Wrong number of array indices
=29					ErrorID_DataError = 29 ; Out of data
=30					ErrorID_Tokenise = 30 ; Cannot tokenise line
=31					ErrorID_Save = 31 ; Save failed
=32					ErrorID_Load = 32 ; Load failed
=33					ErrorID_Break = 33 ; Break
=34					ErrorID_Memory = 34 ; Out of memory
=35					ErrorID_NumStack = 35 ; Expression too complex
=36					ErrorID_Assembler = 36 ; Bad Operand/Mode
=37					ErrorID_Branch = 37 ; Branch out of range
=38					ErrorID_Label = 38 ; Label changed value
=39					ErrorID_NoSprite = 39 ; No Sprite Selected

;******  Return to file: error/errorhandler.inc


;******  Return to file: basic.asm


;******  Processing file: extension/extension.inc


;******  Return to file: basic.asm


;******  Processing file: extension/option_x16/x16const.inc

=64					X16MaxImages = 64 							; max # of sprite images.

;******  Return to file: basic.asm


;******  Processing file: floatingpoint/float.inc

=5					FloatEmbeddedSize = 5

;******  Return to file: basic.asm


;******  Processing file: floatingpoint/floatingpoint.inc


;******  Return to file: basic.asm


;******  Processing file: interaction/interaction.inc


;******  Return to file: basic.asm


;******  Processing file: main/main.inc


;******  Return to file: basic.asm


;******  Processing file: string/functions/memory.inc

=252					MaxStringSize = 252

;******  Return to file: basic.asm


;******  Processing file: string/string.inc


;******  Return to file: basic.asm


;******  Processing file: tokeniser/detokenise/colouring.inc

=$84					LTYLineNumber = $84
=$82					LTYPunctuation = $82
=$87					LTYIdentifier = $87
=$86					LTYConstant = $86
=$83					LTYKeyword = $83
=$81					LTYString = $81

;******  Return to file: basic.asm


;******  Processing file: tokeniser/tokeniser.inc


;******  Return to file: basic.asm


;******  Processing file: variable/variable.inc


;******  Return to file: basic.asm


;******  Processing file: footer/footer.inc


;******  Return to file: basic.asm

.1000					section_start_header:

;******  Processing file: header/header.asm


;******  Processing file: header/00start.asm

.1000					Start:
.1000	4c 0a 10	jmp $100a			jmp 	GoColdStart 				; +0 	boot BASIC
.1003	4c 58 10	jmp $1058			jmp 	GoTokTest					; +3 	run tokeniser test code.
>1006	72 3c						.word 	TokenTableAddress
.1008							else
>1008	00 00						.word 	0
.100a					GoColdStart:
.100a	a9 00		lda #$00			lda 	#(programMemory) & $FF
.100c	8d c8 0a	sta $0ac8			sta 	basePage
.100f	a9 44		lda #$44			lda 	#(programMemory) >> 8
.1011	8d c9 0a	sta $0ac9			sta 	1+(basePage)
.1014	a9 00		lda #$00			lda 	#(endOfMemory) & $FF
.1016	8d cc 0a	sta $0acc			sta 	endMemory
.1019	a9 9f		lda #$9f			lda 	#(endOfMemory) >> 8
.101b	8d cd 0a	sta $0acd			sta 	1+(endMemory)
.101e	20 26 10	jsr $1026			jsr 	InitialiseAll 				; initialise everything.
.1021	a2 02		ldx #$02		ldx	#2
.1023	20 49 1e	jsr $1e49		jsr	interactionHandler

;******  Processing file: header/../generated/initialiseall.asm

.1026					InitialiseAll:
.1026	a9 00		lda #$00		lda #0
.1028	a2 00		ldx #$00		ldx	#0
.102a	20 b4 13	jsr $13b4		jsr	assemblerHandler
.102d	a9 00		lda #$00		lda #0
.102f	a2 00		ldx #$00		ldx	#0
.1031	20 f6 14	jsr $14f6		jsr	deviceHandler
.1034	a9 00		lda #$00		lda #0
.1036	a2 00		ldx #$00		ldx	#0
.1038	20 49 1e	jsr $1e49		jsr	interactionHandler
.103b	a9 00		lda #$00		lda #0
.103d	a2 00		ldx #$00		ldx	#0
.103f	20 e3 34	jsr $34e3		jsr	mainHandler
.1042	a9 00		lda #$00		lda #0
.1044	a2 00		ldx #$00		ldx	#0
.1046	20 a0 37	jsr $37a0		jsr	stringHandler
.1049	a9 00		lda #$00		lda #0
.104b	a2 00		ldx #$00		ldx	#0
.104d	20 c6 3f	jsr $3fc6		jsr	tokeniserHandler
.1050	a9 00		lda #$00		lda #0
.1052	a2 00		ldx #$00		ldx	#0
.1054	20 97 43	jsr $4397		jsr	variableHandler
.1057	60		rts			rts

;******  Return to file: header/00start.asm

.1058					GoTokTest:
.1058	a2 06		ldx #$06		ldx	#6
.105a	20 c6 3f	jsr $3fc6		jsr	tokeniserHandler

;******  Return to file: header/header.asm


;******  Return to file: basic.asm

.105d					section_end_header:
.105d					section_start_assembler:

;******  Processing file: assembler/assembler.asm


;******  Processing file: assembler/asmoperand.asm

.105d					AsmGetOperand:
.105d	a2 00		ldx #$00			ldx 	#0 							; clear the operand.
.105f	8a		txa				txa
.1060	95 50		sta $50,x			sta 	esInt0,x
.1062	95 58		sta $58,x			sta 	esInt1,x
.1064	95 60		sta $60,x			sta 	esInt2,x
.1066	95 68		sta $68,x			sta 	esInt3,x
.1068	b1 28		lda ($28),y			lda 	(codePtr),y 				; first into X
.106a	aa		tax				tax
.106b	a9 02		lda #$02			lda 	#AMD_ACCIMP
.106d	e0 80		cpx #$80			cpx 	#TOK_EOL 					; if end of line or colon, return implied mode.
.106f	f0 41		beq $10b2			beq 	_AGOExit
.1071	e0 ca		cpx #$ca			cpx 	#TKW_COLON
.1073	f0 3d		beq $10b2			beq 	_AGOExit
.1075	c8		iny				iny 								; consume the token
.1076	a9 00		lda #$00			lda 	#AMD_IMM
.1078	e0 e6		cpx #$e6			cpx 	#TKW_HASH 					; if a hash present, then immediate mode.
.107a	f0 2d		beq $10a9			beq		_AGOEvalExit 				; with an operand.
.107c	e0 a4		cpx #$a4			cpx 	#TKW_LPAREN 				; left bracket ?
.107e	f0 40		beq $10c0			beq 	_AGOIndirect
.1080	e0 01		cpx #$01			cpx 	#$01 						; is it "A" e.g. the variable A.
.1082	d0 0b		bne $108f			bne 	_AGOZeroPage1 				; if not it is zero zero,x zero,y, unpick 1 iny
.1084	b1 28		lda ($28),y			lda 	(codePtr),y 				; get the second character & consume it
.1086	c8		iny				iny
.1087	aa		tax				tax
.1088	a9 02		lda #$02			lda 	#AMD_ACCIMP 				; and return Acc/Implied if it is just A
.108a	e0 3a		cpx #$3a			cpx 	#$3A
.108c	f0 24		beq $10b2			beq 	_AGOExit
.108e	88		dey				dey 								; unpick 2 iny
.108f					_AGOZeroPage1:
.108f	88		dey				dey
.1090	a9 00		lda #$00			lda 	#0 							; get the address into esInt0/1
.1092	a2 0a		ldx #$0a		ldx	#10
.1094	20 e3 34	jsr $34e3		jsr	mainHandler
.1097	20 ef 10	jsr $10ef			jsr 	AsmGetIndexing
.109a	a9 01		lda #$01			lda 	#AMD_ZERO
.109c	90 14		bcc $10b2			bcc 	_AGOExit
.109e	a9 05		lda #$05			lda 	#AMD_ZEROX
.10a0	e0 00		cpx #$00			cpx 	#0
.10a2	f0 0e		beq $10b2			beq 	_AGOExit
.10a4	a9 09		lda #$09			lda 	#AMD_ZEROY
.10a6	4c b2 10	jmp $10b2			jmp 	_AGOExit
.10a9					_AGOEvalExit:
.10a9	48		pha				pha
.10aa	a9 00		lda #$00			lda 	#0 							; evaluate operand in root.
.10ac	a2 0a		ldx #$0a		ldx	#10
.10ae	20 e3 34	jsr $34e3		jsr	mainHandler
.10b1	68		pla				pla
.10b2					_AGOExit:
.10b2	48		pha				pha 								; save the mode
.10b3	a5 60		lda $60				lda 	esInt2 						; check the operand is zero.
.10b5	05 68		ora $68				ora 	esInt3
.10b7	d0 02		bne $10bb			bne 	_AGOValue
.10b9	68		pla				pla
.10ba	60		rts				rts
.10bb					_AGOValue:
.10bb	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.10bd	20 18 15	jsr $1518		jsr	errorHandler
.10c0					_AGOIndirect:
.10c0	a9 00		lda #$00			lda 	#0 							; evaluate operand in root.
.10c2	a2 0a		ldx #$0a		ldx	#10
.10c4	20 e3 34	jsr $34e3		jsr	mainHandler
.10c7	b1 28		lda ($28),y			lda 	(codePtr),y 				; does ) follow ? if so might be ) or ),Y
.10c9	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.10cb	f0 11		beq $10de			beq 	_AGOIndIndY
.10cd	20 ef 10	jsr $10ef			jsr 	ASMGetIndexing 				; must be ,X)
.10d0	90 39		bcc $110b			bcc 	AGISyntax
.10d2	e0 00		cpx #$00			cpx 	#0
.10d4	d0 35		bne $110b			bne 	AGISyntax
.10d6	a2 04		ldx #$04		ldx	#4
.10d8	20 e3 34	jsr $34e3		jsr	mainHandler
.10db	a9 0d		lda #$0d			lda 	#AMD_ZEROINDX
.10dd	60		rts				rts
.10de					_AGOIndIndY:
.10de	c8		iny				iny
.10df	20 ef 10	jsr $10ef			jsr 	ASMGetIndexing 				; get indexing if any
.10e2	a9 08		lda #$08			lda 	#AMD_ZEROIND
.10e4	90 cc		bcc $10b2			bcc 	_AGOExit 					; none then exit
.10e6	e0 00		cpx #$00			cpx 	#0 							; must be ,Y
.10e8	f0 21		beq $110b			beq 	AGISyntax
.10ea	a9 04		lda #$04			lda 	#AMD_ZEROINDY
.10ec	4c b2 10	jmp $10b2			jmp 	_AGOExit
.10ef					AsmGetIndexing:
.10ef	b1 28		lda ($28),y			lda 	(codePtr),y 				; check for comma
.10f1	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.10f3	18		clc				clc
.10f4	d0 14		bne $110a			bne 	_AGIExit 					; no comma, return with CC
.10f6	c8		iny				iny 								; get what SHOULD be X or Y
.10f7	b1 28		lda ($28),y			lda 	(codePtr),y  				; read it
.10f9	38		sec				sec 								; subtract 6 bit ASCII of X
.10fa	e9 18		sbc #$18			sbc 	#"X" & $3F
.10fc	c9 02		cmp #$02			cmp 	#2 							; if unsigned >= 2 then error
.10fe	b0 0b		bcs $110b			bcs 	AGISyntax
.1100	aa		tax				tax 								; put in index
.1101	c8		iny				iny 								; get what follows that, should be the $3A marker
.1102	b1 28		lda ($28),y			lda 	(codePtr),y
.1104	c8		iny				iny
.1105	c9 3a		cmp #$3a			cmp 	#$3A
.1107	d0 02		bne $110b			bne 	AGISyntax
.1109	38		sec				sec 								; return CS and index mode in X
.110a					_AGIExit:
.110a	60		rts				rts
.110b					AGISyntax:
.110b	a2 02		ldx #$02			ldx 	#ErrorID_syntax
.110d	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: assembler/assembler.asm


;******  Processing file: assembler/asmwrite.asm

.0af2					finalOpcode:
>0af2							.fill 	1
.1110					AsmWriteInstruction:
.1110	8d f2 0a	sta $0af2			sta 	finalOpcode					; save opcode.
.1113	98		tya				tya
.1114	48		pha				pha
.1115	ad 38 0a	lda $0a38			lda 	SingleLetterVar+("O"-"A")*4	; check O
.1118	29 02		and #$02			and 	#2
.111a	f0 2d		beq $1149			beq 	_ASMWNoEcho 				; if zero then don't echo.
.111c	ad 3d 0a	lda $0a3d			lda 	SingleLetterVar+("P"-"A")*4+1 ; write address in P
.111f	20 84 11	jsr $1184			jsr 	AWIWriteHex
.1122	ad 3c 0a	lda $0a3c			lda 	SingleLetterVar+("P"-"A")*4
.1125	20 84 11	jsr $1184			jsr 	AWIWriteHex
.1128	ad f2 0a	lda $0af2			lda 	finalOpcode 				; write opcode
.112b	20 7d 11	jsr $117d			jsr 	AWIWriteHexSpace
.112e	e0 00		cpx #$00			cpx 	#0
.1130	f0 0e		beq $1140			beq 	_ASMWEchoExit
.1132	a5 50		lda $50				lda 	esInt0
.1134	20 7d 11	jsr $117d			jsr 	AWIWriteHexSpace
.1137	e0 01		cpx #$01			cpx 	#1
.1139	f0 05		beq $1140			beq 	_ASMWEchoExit
.113b	a5 58		lda $58				lda 	esInt1
.113d	20 7d 11	jsr $117d			jsr 	AWIWriteHexSpace
.1140					_ASMWEchoExit:
.1140	8a		txa				txa
.1141	48		pha				pha
.1142	a2 06		ldx #$06		ldx	#6
.1144	20 f6 14	jsr $14f6		jsr	deviceHandler
.1147	68		pla				pla
.1148	aa		tax				tax
.1149					_ASMWNoEcho:
.1149	ad f2 0a	lda $0af2			lda 	finalOpcode
.114c	20 64 11	jsr $1164			jsr 	AsmWriteByte
.114f	e0 00		cpx #$00			cpx 	#0
.1151	f0 0e		beq $1161			beq 	_ASMWExit
.1153	a5 50		lda $50				lda 	esInt0
.1155	20 64 11	jsr $1164			jsr 	AsmWriteByte
.1158	e0 01		cpx #$01			cpx 	#1
.115a	f0 05		beq $1161			beq 	_ASMWExit
.115c	a5 58		lda $58				lda 	esInt1
.115e	20 64 11	jsr $1164			jsr 	AsmWriteByte
.1161					_ASMWExit:
.1161	68		pla				pla
.1162	a8		tay				tay
.1163	60		rts				rts
.1164					AsmWriteByte:
.1164	a0 00		ldy #$00			ldy 	#0
.1166	48		pha				pha
.1167	ad 3c 0a	lda $0a3c			lda 	SingleLetterVar+("P"-"A")*4 ; copy address to temp0
.116a	85 2a		sta $2a				sta 	temp0
.116c	ad 3d 0a	lda $0a3d			lda 	SingleLetterVar+("P"-"A")*4+1
.116f	85 2b		sta $2b				sta 	temp0+1
.1171	68		pla				pla 								; write out the byte.
.1172	91 2a		sta ($2a),y			sta 	(temp0),y
.1174	ee 3c 0a	inc $0a3c			inc 	SingleLetterVar+("P"-"A")*4	; increment P
.1177	d0 03		bne $117c			bne 	_AWBNoCarry
.1179	ee 3d 0a	inc $0a3d			inc 	SingleLetterVar+("P"-"A")*4+1
.117c					_AWBNoCarry:
.117c	60		rts				rts
.117d					AWIWriteHexSpace:
.117d	48		pha				pha
.117e	a9 20		lda #$20			lda 	#" "
.1180	20 97 11	jsr $1197			jsr 	AWIPrintChar
.1183	68		pla				pla
.1184					AWIWriteHex:
.1184	48		pha				pha
.1185	4a		lsr a				lsr 	a
.1186	4a		lsr a				lsr 	a
.1187	4a		lsr a				lsr 	a
.1188	4a		lsr a				lsr 	a
.1189	20 8d 11	jsr $118d			jsr 	AWIPrintNibble
.118c	68		pla				pla
.118d					AWIPrintNibble:
.118d	29 0f		and #$0f			and 	#15
.118f	c9 0a		cmp #$0a			cmp 	#10
.1191	90 02		bcc $1195			bcc 	_AWIPNDigit
.1193	69 06		adc #$06			adc 	#6
.1195					_AWIPNDigit:
.1195	69 30		adc #$30			adc 	#48
.1197					AWIPrintChar:
.1197	85 32		sta $32				sta 	tempShort
.1199	8a		txa				txa
.119a	48		pha				pha
.119b	a5 32		lda $32				lda 	tempShort
.119d	a2 16		ldx #$16		ldx	#22
.119f	20 f6 14	jsr $14f6		jsr	deviceHandler
.11a2	68		pla				pla
.11a3	aa		tax				tax
.11a4	60		rts				rts

;******  Return to file: assembler/assembler.asm


;******  Processing file: assembler/assemblecmd.asm

.0af3					asmToken:
>0af3							.fill 	1
.0af4					asmMode:
>0af4							.fill 	1 							; esInt0/1
.0af5					asmBaseOpcode:
>0af5							.fill 	1
.11a5					AssembleOneInstruction:
.11a5	8d f3 0a	sta $0af3			sta 	asmToken 					; save the token
.11a8	aa		tax				tax
.11a9	bd 72 11	lda $1172,x			lda 	OpcodeTable-TKA_GROUP1,x 	; get the base opcode.
.11ac	8d f5 0a	sta $0af5			sta 	asmBaseOpcode
.11af	20 5d 10	jsr $105d			jsr 	AsmGetOperand 				; identify the address mode and operand where applicable.
.11b2	8d f4 0a	sta $0af4			sta 	asmMode
.11b5	a5 58		lda $58				lda 	esInt1 						; check if this is a three byte operand.
.11b7	d0 05		bne $11be			bne 	_AOIThreeBytes 				; if so, we have to use three byte
.11b9	20 d4 11	jsr $11d4			jsr 	AssembleAttempt 			; try to assemble token/mode/operand (2 bytes)
.11bc	b0 10		bcs $11ce			bcs 	_AOISuccess 				; worked ok.
.11be					_AOIThreeBytes:
.11be	ae f4 0a	ldx $0af4			ldx 	asmMode 					; convert mode to 3 byte version, where possible.
.11c1	bd f8 11	lda $11f8,x			lda 	AbsoluteVersionTable,x
.11c4	30 09		bmi $11cf			bmi 	_AOIError					; not possible, no equivalent.
.11c6	8d f4 0a	sta $0af4			sta 	asmMode
.11c9	20 d4 11	jsr $11d4			jsr 	AssembleAttempt 			; try to assemble token/mode/operand (3 bytes)
.11cc	90 01		bcc $11cf			bcc 	_AOIError 					; didn't work.
.11ce					_AOISuccess:
.11ce	60		rts				rts
.11cf					_AOIError:
.11cf	a2 24		ldx #$24			ldx 	#ErrorID_Assembler
.11d1	20 18 15	jsr $1518		jsr	errorHandler
.11d4					AssembleAttempt:
.11d4	20 dd 11	jsr $11dd			jsr 	_AADispatch 				; go to the code which dispatches to the appropriate
.11d7	b0 03		bcs $11dc			bcs 	_AAExit 					; exit if carry set, e.g. was successful
.11d9	20 87 13	jsr $1387			jsr 	AssembleSpecialCase
.11dc					_AAExit:
.11dc	60		rts				rts
.11dd					_AADispatch:
.11dd	ad f3 0a	lda $0af3			lda 	asmToken
.11e0	c9 b7		cmp #$b7			cmp 	#TKA_GROUP4
.11e2	b0 11		bcs $11f5			bcs 	_AAGroup4
.11e4	c9 ae		cmp #$ae			cmp 	#TKA_GROUP3
.11e6	b0 0a		bcs $11f2			bcs 	_AAGroup3
.11e8	c9 9c		cmp #$9c			cmp 	#TKA_GROUP2
.11ea	b0 03		bcs $11ef			bcs 	_AAGroup2
.11ec	4c cd 12	jmp $12cd			jmp 	AssembleGroup1
.11ef					_AAGroup2:
.11ef	4c 28 13	jmp $1328			jmp 	AssembleGroup2
.11f2					_AAGroup3:
.11f2	4c 49 13	jmp $1349			jmp 	AssembleGroup3
.11f5					_AAGroup4:
.11f5	4c 7d 13	jmp $137d			jmp 	AssembleGroup4
.11f8					AbsoluteVersionTable:
>11f8	ff						.byte	$FF 			; fail AMD_IMM
>11f9	03						.byte	AMD_ABS 		; absolute AMD_ZERO
>11fa	ff						.byte	$FF 			; fail AMD_ACCIMP
>11fb	ff						.byte	$FF 			; fail AMD_ABS
>11fc	ff						.byte 	$FF 			; fail AMD_ZEROINDY
>11fd	07						.byte	AMD_ABSX 		; absolute AMD_ZEROX
>11fe	ff						.byte	$FF 			; fail AMD_ABSY
>11ff	ff						.byte	$FF 			; fail AMD_ABSX
>1200	0a						.byte	AMD_ABSIND 		; absolute AMD_ZEROIND
>1201	06						.byte	AMD_ABSY 		; absolute AMD_ZEROY
>1202	ff						.byte	$FF 			; fail AMD_ABSIND
>1203	ff						.byte	$FF 			; fail AMD_ABSINDX
>1204	ff						.byte	$FF 			; fail AMD_REL
>1205	0b						.byte 	AMD_ABSINDX 	; absolute AMD_ZEROINDX

;******  Processing file: assembler/../generated/asmtables.inc

.1206					OpcodeTable:
>1206	01					.byte	$01			; $94 ora
>1207	21					.byte	$21			; $95 (and)
>1208	41					.byte	$41			; $96 eor
>1209	61					.byte	$61			; $97 adc
>120a	81					.byte	$81			; $98 sta
>120b	a1					.byte	$a1			; $99 lda
>120c	c1					.byte	$c1			; $9a cmp
>120d	e1					.byte	$e1			; $9b sbc
>120e	02					.byte	$02			; $9c asl
>120f	22					.byte	$22			; $9d rol
>1210	42					.byte	$42			; $9e lsr
>1211	62					.byte	$62			; $9f ror
>1212	82					.byte	$82			; $a0 stx
>1213	a2					.byte	$a2			; $a1 ldx
>1214	c2					.byte	$c2			; $a2 dec
>1215	e2					.byte	$e2			; $a3 inc
>1216	60					.byte	$60			; $a4 stz
>1217	20					.byte	$20			; $a5 bit
>1218	80					.byte	$80			; $a6 sty
>1219	a0					.byte	$a0			; $a7 ldy
>121a	c0					.byte	$c0			; $a8 cpy
>121b	e0					.byte	$e0			; $a9 cpx
>121c	00					.byte	$00			; $aa tsb
>121d	10					.byte	$10			; $ab trb
>121e	14					.byte	$14			; $ac jsr
>121f	40					.byte	$40			; $ad jmp
>1220	10					.byte	$10			; $ae bpl
>1221	30					.byte	$30			; $af bmi
>1222	50					.byte	$50			; $b0 bvc
>1223	70					.byte	$70			; $b1 bvs
>1224	90					.byte	$90			; $b2 bcc
>1225	b0					.byte	$b0			; $b3 bcs
>1226	d0					.byte	$d0			; $b4 bne
>1227	f0					.byte	$f0			; $b5 beq
>1228	80					.byte	$80			; $b6 bra
>1229	00					.byte	$00			; $b7 brk
>122a	08					.byte	$08			; $b8 php
>122b	18					.byte	$18			; $b9 clc
>122c	28					.byte	$28			; $ba plp
>122d	38					.byte	$38			; $bb sec
>122e	40					.byte	$40			; $bc rti
>122f	48					.byte	$48			; $bd pha
>1230	58					.byte	$58			; $be cli
>1231	5a					.byte	$5a			; $bf phy
>1232	60					.byte	$60			; $c0 rts
>1233	68					.byte	$68			; $c1 pla
>1234	78					.byte	$78			; $c2 sei
>1235	7a					.byte	$7a			; $c3 ply
>1236	88					.byte	$88			; $c4 dey
>1237	8a					.byte	$8a			; $c5 txa
>1238	98					.byte	$98			; $c6 tya
>1239	9a					.byte	$9a			; $c7 txs
>123a	a8					.byte	$a8			; $c8 tay
>123b	aa					.byte	$aa			; $c9 tax
>123c	b8					.byte	$b8			; $ca clv
>123d	ba					.byte	$ba			; $cb tsx
>123e	c8					.byte	$c8			; $cc iny
>123f	ca					.byte	$ca			; $cd dex
>1240	d8					.byte	$d8			; $ce cld
>1241	da					.byte	$da			; $cf phx
>1242	e8					.byte	$e8			; $d0 inx
>1243	ea					.byte	$ea			; $d1 nop
>1244	f8					.byte	$f8			; $d2 sed
>1245	fa					.byte	$fa			; $d3 plx
.1246					Group2OpcodeAvailability:
>1246	ae					.byte	$ae			; $9c asl $02
>1247	ae					.byte	$ae			; $9d rol $22
>1248	ae					.byte	$ae			; $9e lsr $42
>1249	ae					.byte	$ae			; $9f ror $62
>124a	0a					.byte	$0a			; $a0 stx $82
>124b	0b					.byte	$0b			; $a1 ldx $a2
>124c	aa					.byte	$aa			; $a2 dec $c2
>124d	aa					.byte	$aa			; $a3 inc $e2
>124e	22					.byte	$22			; $a4 stz $60
>124f	aa					.byte	$aa			; $a5 bit $20
>1250	2a					.byte	$2a			; $a6 sty $80
>1251	ab					.byte	$ab			; $a7 ldy $a0
>1252	2b					.byte	$2b			; $a8 cpy $c0
>1253	0b					.byte	$0b			; $a9 cpx $e0
>1254	0a					.byte	$0a			; $aa tsb $00
>1255	0a					.byte	$0a			; $ab trb $10
>1256	08					.byte	$08			; $ac jsr $14
>1257	08					.byte	$08			; $ad jmp $40
.1258					AssemblerSpecialCases:
>1258	ad 0a 6c				.byte	$ad,10,$6c		; jmp (abs)
>125b	ad 0b 7c				.byte	$ad,11,$7c		; jmp (abs,x)
>125e	a1 06 be				.byte	$a1,6,$be		; ldx abs,y
>1261	a1 09 b6				.byte	$a1,9,$b6		; ldx zp,y
>1264	a0 09 96				.byte	$a0,9,$96		; stx zp,y
>1267	a3 02 1a				.byte	$a3,2,$1a		; inc acc
>126a	a2 02 3a				.byte	$a2,2,$3a		; dec acc
>126d	a5 00 89				.byte	$a5,0,$89		; bit #
>1270	a4 03 9c				.byte	$a4,3,$9c		; stz abs
>1273	a4 07 9e				.byte	$a4,7,$9e		; stz abs,x
>1276	00					.byte	0

;******  Return to file: assembler/assemblecmd.asm


;******  Return to file: assembler/assembler.asm


;******  Processing file: assembler/assemblelabel.asm

.1277					AssembleLabel:
.1277	b1 28		lda ($28),y			lda 	(codePtr),y 				; check it's followed by a variable name.
.1279	c9 3a		cmp #$3a			cmp 	#$3A
.127b	b0 4b		bcs $12c8			bcs 	_ALSyntax
.127d	a9 00		lda #$00			lda 	#0							; get a variable name on to stack:0
.127f	a2 02		ldx #$02		ldx	#2
.1281	20 97 43	jsr $4397		jsr	variableHandler
.1284	a5 48		lda $48				lda 	esType 						; check integer reference
.1286	c9 80		cmp #$80			cmp 	#$80
.1288	d0 3e		bne $12c8			bne 	_ALSyntax
.128a	a5 50		lda $50				lda 	esInt0 						; copy that reference address to temp0
.128c	85 2a		sta $2a				sta 	temp0
.128e	a5 58		lda $58				lda 	esInt1
.1290	85 2b		sta $2b				sta 	temp0+1
.1292	98		tya				tya
.1293	48		pha				pha
.1294	ad 38 0a	lda $0a38			lda 	SingleLetterVar+("O"-"A")*4	; are we in Pass 2
.1297	4a		lsr a				lsr 	a
.1298	90 11		bcc $12ab			bcc 	_ALWrite
.129a	a0 00		ldy #$00			ldy 	#0
.129c	ad 3c 0a	lda $0a3c			lda 	SingleLetterVar+("P"-"A")*4 ; compare the value in P to the variable
.129f	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.12a1	d0 20		bne $12c3			bne 	_ALChanged
.12a3	c8		iny				iny
.12a4	ad 3d 0a	lda $0a3d			lda 	SingleLetterVar+("P"-"A")*4+1
.12a7	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.12a9	d0 18		bne $12c3			bne 	_ALChanged
.12ab					_ALWrite:
.12ab	a0 00		ldy #$00			ldy 	#0
.12ad	ad 3c 0a	lda $0a3c			lda 	SingleLetterVar+("P"-"A")*4 ; copy the value in P into the variable
.12b0	91 2a		sta ($2a),y			sta 	(temp0),y
.12b2	ad 3d 0a	lda $0a3d			lda 	SingleLetterVar+("P"-"A")*4+1
.12b5	c8		iny				iny
.12b6	91 2a		sta ($2a),y			sta 	(temp0),y
.12b8	a9 00		lda #$00			lda 	#0
.12ba	c8		iny				iny
.12bb	91 2a		sta ($2a),y			sta 	(temp0),y
.12bd	c8		iny				iny
.12be	91 2a		sta ($2a),y			sta 	(temp0),y
.12c0	68		pla				pla
.12c1	a8		tay				tay
.12c2	60		rts				rts
.12c3					_ALChanged:
.12c3	a2 26		ldx #$26			ldx 	#ErrorID_Label
.12c5	20 18 15	jsr $1518		jsr	errorHandler
.12c8					_ALSyntax:
.12c8	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.12ca	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: assembler/assembler.asm


;******  Processing file: assembler/subgroup.asm

.12cd					AssembleGroup1:
.12cd	ad f3 0a	lda $0af3			lda 	asmToken 					; firstly, we throw out STA immediate
.12d0	c9 98		cmp #$98			cmp 	#TKW_STA
.12d2	d0 07		bne $12db			bne 	_AG1NotStoreImm
.12d4	ad f4 0a	lda $0af4			lda 	asmMode
.12d7	c9 00		cmp #$00			cmp 	#AMD_IMM
.12d9	f0 2c		beq $1307			beq 	AG1ModeError
.12db					_AG1NotStoreImm:
.12db	ae f4 0a	ldx $0af4			ldx 	asmMode						; get mode into X.
.12de	bd 0c 13	lda $130c,x			lda		AMDOperandSize,X 			; get the size of the operand and push on stack
.12e1	48		pha				pha
.12e2	f0 23		beq $1307			beq 	AG1ModeError 				; if the size is zero, the mode must be Accumulator
.12e4	e0 00		cpx #$00			cpx 	#0 							; if the mode is zero, e.g. immediate
.12e6	d0 02		bne $12ea			bne 	_AG1NotImmediate
.12e8	a2 02		ldx #$02			ldx 	#2 							; then we use offset 2 here. This is how the 6502
.12ea					_AG1NotImmediate:
.12ea	e0 0d		cpx #$0d			cpx 	#AMD_ZEROINDX 				; (zero,x) uses slot 0.
.12ec	d0 02		bne $12f0			bne 	_AG1NotZX
.12ee	a2 00		ldx #$00			ldx 	#0
.12f0					_AG1NotZX:
.12f0	68		pla				pla 								; restore length
.12f1	e0 09		cpx #$09			cpx 	#9 							; anything > 8 fails.
.12f3	b0 10		bcs $1305			bcs 	AG1Fail
.12f5					AG1ReturnValue:
.12f5	85 32		sta $32				sta 	tempShort 					; save size of operand
.12f7	18		clc				clc
.12f8	bd 1a 13	lda $131a,x			lda 	AMDOffsetFromBase,X 		; get the offset for the address mode.
.12fb	6d f5 0a	adc $0af5			adc 	asmBaseOpcode 				; add the base opcode.
.12fe	a6 32		ldx $32				ldx 	tempShort 					; length in X
.1300	20 10 11	jsr $1110			jsr 	AsmWriteInstruction 		; output instruction.
.1303	38		sec				sec
.1304	60		rts				rts
.1305					AG1Fail:
.1305	18		clc				clc
.1306	60		rts				rts
.1307					AG1ModeError:
.1307	a2 24		ldx #$24			ldx 	#ErrorID_Assembler
.1309	20 18 15	jsr $1518		jsr	errorHandler
.130c					AMDOperandSize:
>130c	01 01 00 02					.byte 	1,1,0,2
>1310	01 01 02 02					.byte 	1,1,2,2
>1314	01 01 02 02					.byte 	1,1,2,2
>1318	01 01						.byte 	1,1
.131a					AMDOffsetFromBase:
>131a	00 04 08 0c					.byte 	0,4,8,12
>131e	10 14 18 1c					.byte	16,20,24,28
>1322	11 00 00 00					.byte 	17,0,0,0
>1326	00 00						.byte 	0,0
.1328					AssembleGroup2:
.1328	ad f4 0a	lda $0af4			lda 	asmMode 					; get the mode; if >= 8 cannot be a legit group 2
.132b	c9 08		cmp #$08			cmp 	#8
.132d	b0 18		bcs $1347			bcs 	_AG2Fail
.132f	85 2a		sta $2a				sta 	temp0 						; save in temp9
.1331	ae f3 0a	ldx $0af3			ldx 	asmToken					; get token in X, then get the availability flags for it
.1334	bd aa 11	lda $11aa,x			lda 	Group2OpcodeAvailability-TKA_GROUP2,x
.1337					_AG2Shift:
.1337	4a		lsr a				lsr 	a
.1338	c6 2a		dec $2a				dec 	temp0
.133a	10 fb		bpl $1337			bpl 	_AG2Shift
.133c	90 09		bcc $1347			bcc 	_AG2Fail 					; cannot do that instruction w/that opcode.
.133e	ae f4 0a	ldx $0af4			ldx  	asmMode 					; mode in X
.1341	bd 0c 13	lda $130c,x			lda		AMDOperandSize,X 			; get the size of the operand in A
.1344	4c f5 12	jmp $12f5			jmp 	AG1ReturnValue 				; and use that with Group 1's exit code
.1347					_AG2Fail:
.1347	18		clc				clc
.1348	60		rts				rts
.1349					AssembleGroup3:
.1349	ad 38 0a	lda $0a38			lda 	SingleLetterVar+("O"-"A")*4	; check bit 0 (pass) of O
.134c	4a		lsr a				lsr 	a
.134d	a9 00		lda #$00			lda 	#0 							; if clear, e.g. pass 1, use default zero.
.134f	90 21		bcc $1372			bcc 	_AG3Default
.1351	38		sec				sec	 								; calculate branch offset
.1352	a5 50		lda $50				lda		esInt0
.1354	ed 3c 0a	sbc $0a3c			sbc 	SingleLetterVar+("P"-"A")*4
.1357	aa		tax				tax
.1358	a5 58		lda $58				lda		esInt1
.135a	ed 3d 0a	sbc $0a3d			sbc 	SingleLetterVar+("P"-"A")*4+1
.135d	85 58		sta $58				sta 	esInt1
.135f	8a		txa				txa 								; add 126, now 128 too many.
.1360	18		clc				clc 								; we can use this to check the range
.1361	69 7e		adc #$7e			adc 	#126
.1363	85 50		sta $50				sta 	esInt0
.1365	90 02		bcc $1369			bcc 	_AG3NoCarry
.1367	e6 58		inc $58				inc 	esInt1
.1369					_AG3NoCarry:
.1369	a5 58		lda $58				lda 	esInt1 						; check in range.
.136b	d0 0b		bne $1378			bne 	_AG3Range
.136d	a5 50		lda $50				lda 	esInt0 						; fix up branch distance
.136f	38		sec				sec
.1370	e9 80		sbc #$80			sbc 	#128
.1372					_AG3Default:
.1372	85 50		sta $50				sta 	esInt0
.1374					_AG3ExitOk:
.1374	a2 01		ldx #$01			ldx 	#1 							; one opcode, use AG4 Code
.1376	d0 07		bne $137f			bne 	AG4Write
.1378					_AG3Range:
.1378	a2 25		ldx #$25			ldx 	#ErrorID_Branch
.137a	20 18 15	jsr $1518		jsr	errorHandler
.137d					AssembleGroup4:
.137d	a2 00		ldx #$00			ldx 	#0 							; no parameters in the opcode.
.137f					AG4Write:
.137f	ad f5 0a	lda $0af5			lda 	asmBaseOpcode				; the opcode is the opcode base.
.1382	20 10 11	jsr $1110			jsr 	AsmWriteInstruction 		; output instruction.
.1385	38		sec				sec
.1386	60		rts				rts
.1387					AssembleSpecialCase:
.1387	a2 00		ldx #$00			ldx 	#0
.1389					_ASCScan:
.1389	bd 58 12	lda $1258,x			lda 	AssemblerSpecialCases,x 	; scan token and mode for match
.138c	cd f3 0a	cmp $0af3			cmp 	asmToken
.138f	d0 08		bne $1399			bne 	_ASCNext
.1391	bd 59 12	lda $1259,x			lda 	AssemblerSpecialCases+1,x
.1394	cd f4 0a	cmp $0af4			cmp 	asmMode
.1397	f0 0a		beq $13a3			beq 	_ASCFound
.1399					_ASCNext:
.1399	e8		inx				inx									; next entry
.139a	e8		inx				inx
.139b	e8		inx				inx
.139c	bd 58 12	lda $1258,x			lda 	AssemblerSpecialCases,x 	; until table ends
.139f	d0 e8		bne $1389			bne 	_ASCScan
.13a1	18		clc				clc
.13a2	60		rts				rts
.13a3					_ASCFound:
.13a3	bd 5a 12	lda $125a,x			lda 	AssemblerSpecialCases+2,x 	; get the new opcode.
.13a6	48		pha				pha
.13a7	ae f4 0a	ldx $0af4			ldx  	asmMode 					; mode in X
.13aa	bd 0c 13	lda $130c,x			lda		AMDOperandSize,X 			; get the size of the operand in X
.13ad	aa		tax				tax
.13ae	68		pla				pla 								; opcode back
.13af	20 10 11	jsr $1110			jsr 	AsmWriteInstruction 		; output instruction.
.13b2	38		sec				sec
.13b3	60		rts				rts

;******  Return to file: assembler/assembler.asm

.13b4					assemblerHandler:
.13b4	7c b7 13	jmp ($13b7,x)			jmp 	(assemblerVectors,x)
.13b7					assemblerVectors:
>13b7	bd 13					.word _DummyControlHandler ; index 0
>13b9	a5 11					.word AssembleOneInstruction ; index 2
>13bb	77 12					.word AssembleLabel        ; index 4
.13bd					_DummyControlHandler:
.13bd	60		rts			rts

;******  Return to file: basic.asm

.13be					section_end_assembler:
.13be					section_start_device:

;******  Processing file: device/device.asm


;******  Processing file: device/option_x16/x16break.asm

.13be					X16Break:
.13be	20 e1 ff	jsr $ffe1			jsr 	$FFE1
.13c1	f0 01		beq $13c4			beq 	_IsBreak
.13c3	60		rts				rts
.13c4					_IsBreak:
.13c4	a2 21		ldx #$21			ldx 	#ErrorID_Break
.13c6	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: device/device.asm


;******  Processing file: device/option_x16/x16file.asm

.13c9					ExternSave:
.13c9	98		tya				tya
.13ca	48		pha				pha
.13cb	20 19 14	jsr $1419			jsr 	ExternGetLength 			; get length of file into A name YX
.13ce	20 bd ff	jsr $ffbd			jsr 	$FFBD 						; set name
.13d1	a9 01		lda #$01			lda 	#1
.13d3	a2 08		ldx #$08			ldx 	#8	 						; device #8
.13d5	a0 00		ldy #$00			ldy 	#0
.13d7	20 ba ff	jsr $ffba			jsr 	$FFBA 						; set LFS
.13da	a5 51		lda $51				lda 	esInt0+1 					; copy start of save address to temp0
.13dc	85 2a		sta $2a				sta 	temp0
.13de	a5 59		lda $59				lda 	esInt1+1
.13e0	85 2b		sta $2b				sta 	temp0+1
.13e2	a6 52		ldx $52				ldx 	esInt0+2 					; end address
.13e4	a4 5a		ldy $5a				ldy 	esInt1+2
.13e6	a9 2a		lda #$2a			lda 	#temp0 						; ref to start address
.13e8	20 d8 ff	jsr $ffd8			jsr 	$FFD8 						; save
.13eb	b0 03		bcs $13f0			bcs 	_ESSave
.13ed	68		pla				pla
.13ee	a8		tay				tay
.13ef	60		rts				rts
.13f0					_ESSave:
.13f0	a2 1f		ldx #$1f			ldx 	#ErrorID_Save
.13f2	20 18 15	jsr $1518		jsr	errorHandler
.13f5					ExternLoad:
.13f5	98		tya				tya
.13f6	48		pha				pha
.13f7	20 19 14	jsr $1419			jsr 	ExternGetLength 			; get length of file into A name YX
.13fa	20 bd ff	jsr $ffbd			jsr 	$FFBD 						; set name
.13fd	a9 01		lda #$01			lda 	#1
.13ff	a2 08		ldx #$08			ldx 	#8	 						; device #8
.1401	a0 00		ldy #$00			ldy 	#0
.1403	20 ba ff	jsr $ffba			jsr 	$FFBA 						; set LFS
.1406	a6 51		ldx $51				ldx 	esInt0+1 					; load address
.1408	a4 59		ldy $59				ldy 	esInt1+1
.140a	a9 00		lda #$00			lda 	#0 							; load command
.140c	20 d5 ff	jsr $ffd5			jsr 	$FFD5
.140f	b0 03		bcs $1414			bcs 	_ESLoad
.1411	68		pla				pla
.1412	a8		tay				tay
.1413	60		rts				rts
.1414					_ESLoad:
.1414	a2 20		ldx #$20			ldx 	#ErrorID_Load
.1416	20 18 15	jsr $1518		jsr	errorHandler
.1419					ExternGetLength:
.1419	a5 50		lda $50				lda 	esInt0 						; length into A.
.141b	85 2a		sta $2a				sta 	temp0
.141d	a5 58		lda $58				lda 	esInt1
.141f	85 2b		sta $2b				sta 	temp0+1
.1421	a0 00		ldy #$00			ldy 	#0
.1423	b1 2a		lda ($2a),y			lda 	(temp0),y
.1425	a6 50		ldx $50				ldx 	esInt0 						; name into YX
.1427	a4 58		ldy $58				ldy 	esInt1
.1429	e8		inx				inx 								; advance over the length pointer.
.142a	d0 01		bne $142d			bne 	_ESNoCarry
.142c	c8		iny				iny
.142d					_ESNoCarry:
.142d	60		rts				rts

;******  Return to file: device/device.asm


;******  Processing file: device/option_x16/x16io.asm

=240					MaxLineInputSize = 240
.0af6					bufferCount:
>0af6							.fill 	0
.0af6					bufferStorage:
>0af6							.fill 	MaxLineInputSize
.142e					IOControlHandler:
.142e	c9 00		cmp #$00			cmp 	#0
.1430	d0 12		bne $1444			bne		_CHExit
.1432	a9 0f		lda #$0f			lda 	#15 						; switch to upper/lower case mode
.1434	20 5d 14	jsr $145d			jsr 	IOPrintChar
.1437	a9 02		lda #$02			lda 	#2 							; green on black and clear screen
.1439	20 89 14	jsr $1489			jsr 	IOInk
.143c	a9 00		lda #$00			lda 	#0
.143e	20 9d 14	jsr $149d			jsr 	IOPaper
.1441	20 45 14	jsr $1445			jsr 	IOClearScreen
.1444					_CHExit:
.1444	60		rts				rts
.1445					IOClearScreen:
.1445	48		pha				pha
.1446	a9 93		lda #$93			lda	 	#147 						; char code $93 clears screen
.1448	20 5d 14	jsr $145d			jsr 	IOPrintChar
.144b	68		pla				pla
.144c	60		rts				rts
.144d					IONewLine:
.144d	48		pha				pha
.144e	a9 0d		lda #$0d			lda 	#13
.1450	20 5d 14	jsr $145d			jsr 	IOPrintChar
.1453	68		pla				pla
.1454	60		rts				rts
.1455					IOTab:
.1455	48		pha				pha
.1456	a9 20		lda #$20			lda 	#32
.1458	20 5d 14	jsr $145d			jsr 	IOPrintChar
.145b	68		pla				pla
.145c	60		rts				rts
.145d					IOPrintAscii:
.145d					IOPrintChar:
.145d	aa		tax				tax 								; save in X so we can save Y
.145e	5a		phy				phy
.145f	8a		txa				txa
.1460	c9 08		cmp #$08			cmp 	#8 							; make BS (8) onto CHR$(14) which is the
.1462	d0 02		bne $1466			bne 	_IOPCNotBS 					; Commodore/X16 backspace code.
.1464	a9 14		lda #$14			lda 	#$14
.1466					_IOPCNotBS:
.1466	20 d2 ff	jsr $ffd2			jsr 	$FFD2 						; CBM OS Call.
.1469	7a		ply				ply
.146a	60		rts				rts
.146b					IOInkey:
.146b	98		tya				tya
.146c	48		pha				pha
.146d	20 e4 ff	jsr $ffe4			jsr 	$FFE4
.1470	85 32		sta $32				sta 	tempShort
.1472	68		pla				pla
.1473	a8		tay				tay
.1474	a5 32		lda $32				lda 	tempShort					; no key pressed.
.1476	f0 10		beq $1488			beq 	_IOIExit
.1478	c9 0d		cmp #$0d			cmp 	#13 						; allow CR (13)
.147a	f0 0c		beq $1488			beq 	_IOIExit
.147c	c9 14		cmp #$14			cmp 	#$14 						; backspace code ($14) returns 8.
.147e	f0 06		beq $1486			beq 	_IOIBackspace
.1480	c9 20		cmp #$20			cmp 	#32 						; no other control allowed.
.1482	90 e7		bcc $146b			bcc 	IOInkey
.1484	b0 02		bcs $1488			bcs 	_IOIExit
.1486					_IOIBackspace:
.1486	a9 08		lda #$08			lda 	#8 							; return chr(8)
.1488					_IOIExit:
.1488	60		rts				rts
.1489					IOInk:
.1489	48		pha				pha
.148a	29 07		and #$07			and 	#7 							; 8 primaries
.148c	aa		tax				tax
.148d	bd 95 14	lda $1495,x			lda 	_IOColourTable,x 			; look up CBM code and print it.
.1490	20 5d 14	jsr $145d			jsr 	IOPrintChar
.1493	68		pla				pla
.1494	60		rts				rts
.1495					_IOColourTable:
>1495	90						.byte 	$90 					; 0 Black
>1496	96						.byte 	$96 					; 1 Red
>1497	1e						.byte 	$1E 					; 2 Green
>1498	9e						.byte 	$9E 					; 3 Yellow
>1499	9a						.byte 	$9A 					; 4 Blue
>149a	9c						.byte 	$9C 					; 5 Magenta
>149b	9f						.byte 	$9F 					; 6 Cyan
>149c	05						.byte 	$05 					; 7 White
.149d					IOPaper:
.149d	48		pha				pha
.149e	48		pha				pha
.149f	a9 01		lda #$01			lda 	#1 						; 1 swaps fgr/bgr, so we swap them, set fgr
.14a1	20 5d 14	jsr $145d			jsr 	IOPrintChar 			; and then swap them again.
.14a4	68		pla				pla
.14a5	20 89 14	jsr $1489			jsr 	IOInk
.14a8	a9 01		lda #$01			lda 	#1
.14aa	20 5d 14	jsr $145d			jsr 	IOPrintChar
.14ad	68		pla				pla
.14ae	60		rts				rts
.14af					IOLocate:
.14af	48		pha				pha
.14b0	a9 13		lda #$13			lda 	#$13 					; home cursor code
.14b2	20 5d 14	jsr $145d			jsr 	IOPrintChar
.14b5	a9 11		lda #$11			lda 	#$11 	 				; print Y x $11 (down)
.14b7	20 be 14	jsr $14be			jsr 	_IOLoc2
.14ba	68		pla				pla
.14bb	a8		tay				tay
.14bc	a9 1d		lda #$1d			lda 	#$1D 					; print Y x $1D (right)
.14be					_IOLoc2:
.14be	c0 00		cpy #$00			cpy 	#0
.14c0	f0 06		beq $14c8			beq 	_IOLocExit
.14c2	20 5d 14	jsr $145d			jsr 	IOPrintChar
.14c5	88		dey				dey
.14c6	d0 f6		bne $14be			bne 	_IOLoc2
.14c8					_IOLocExit:
.14c8	60		rts				rts
.14c9					IOInput:
.14c9	a9 00		lda #$00			lda 	#0
.14cb	8d f6 0a	sta $0af6			sta 	bufferCount
.14ce					_IOILoop:
.14ce	20 cf ff	jsr $ffcf			jsr 	$FFCF
.14d1	c9 0d		cmp #$0d			cmp 	#13
.14d3	f0 10		beq $14e5			beq 	_IOIExit
.14d5	ae f6 0a	ldx $0af6			ldx 	bufferCount
.14d8	e0 f0		cpx #$f0			cpx 	#MaxLineInputSize
.14da	f0 f2		beq $14ce			beq 	_IOILoop
.14dc	ee f6 0a	inc $0af6			inc 	bufferCount
.14df	9d f7 0a	sta $0af7,x			sta 	bufferStorage+1,x
.14e2	4c ce 14	jmp $14ce			jmp 	_IOILoop
.14e5					_IOIExit:
.14e5	a9 f6		lda #$f6			lda 	#(bufferCount) & $FF
.14e7	85 2a		sta $2a				sta 	temp0
.14e9	a9 0a		lda #$0a			lda 	#(bufferCount) >> 8
.14eb	85 2b		sta $2b				sta 	1+(temp0)
.14ed	60		rts				rts

;******  Return to file: device/device.asm


;******  Processing file: device/option_x16/x16timer.asm

.14ee					IOReadTimer:
.14ee	20 de ff	jsr $ffde			jsr 	$FFDE 						; reads timer into YXA so we want only YA
.14f1	48		pha				pha
.14f2	8a		txa				txa
.14f3	a8		tay				tay
.14f4	68		pla				pla
.14f5	60		rts				rts

;******  Return to file: device/device.asm

.14f6					deviceHandler:
.14f6	7c f9 14	jmp ($14f9,x)			jmp 	(deviceVectors,x)
.14f9					deviceVectors:
>14f9	2e 14					.word IOControlHandler     ; index 0
>14fb	be 13					.word X16Break             ; index 2
>14fd	45 14					.word IOClearScreen        ; index 4
>14ff	4d 14					.word IONewLine            ; index 6
>1501	89 14					.word IOInk                ; index 8
>1503	6b 14					.word IOInkey              ; index 10
>1505	c9 14					.word IOInput              ; index 12
>1507	f5 13					.word ExternLoad           ; index 14
>1509	af 14					.word IOLocate             ; index 16
>150b	9d 14					.word IOPaper              ; index 18
>150d	5d 14					.word IOPrintChar          ; index 20
>150f	5d 14					.word IOPrintAscii         ; index 22
>1511	c9 13					.word ExternSave           ; index 24
>1513	55 14					.word IOTab                ; index 26
>1515	ee 14					.word IOReadTimer          ; index 28
.1517					_DummyControlHandler:
.1517	60		rts			rts

;******  Return to file: basic.asm

.1518					section_end_device:
.1518					section_start_error:

;******  Processing file: error/error.asm


;******  Processing file: error/errorhandler.asm

.1518					ErrorHandler:
.1518	8a		txa				txa
.1519	48		pha				pha
.151a	a9 01		lda #$01			lda 	#1 							; red
.151c	a2 08		ldx #$08		ldx	#8
.151e	20 f6 14	jsr $14f6		jsr	deviceHandler
.1521	68		pla				pla
.1522	aa		tax				tax
.1523	a9 8e		lda #$8e			lda 	#(ErrorTextList) & $FF
.1525	85 2a		sta $2a				sta 	temp0
.1527	a9 15		lda #$15			lda 	#(ErrorTextList) >> 8
.1529	85 2b		sta $2b				sta 	1+(temp0)
.152b	ca		dex		_EHFind:dex									; errors start at 1
.152c	f0 10		beq $153e			beq 	_EHFound
.152e	a0 00		ldy #$00			ldy 	#0 							; goto next text message, add length + 1 to the pointer.
.1530	38		sec				sec
.1531	a5 2a		lda $2a				lda 	temp0
.1533	71 2a		adc ($2a),y			adc 	(temp0),y
.1535	85 2a		sta $2a				sta 	temp0
.1537	90 f2		bcc $152b			bcc 	_EHFind
.1539	e6 2b		inc $2b				inc 	temp0+1
.153b	4c 2b 15	jmp $152b			jmp 	_EHFind
.153e					_EHFound:
.153e	20 49 18	jsr $1849			jsr 	EHPrintAscii 				; print the string "temp0" now points to.
.1541	a0 00		ldy #$00			ldy 	#0 							; in a line, e.g. the offset to next is non zero.
.1543	b1 28		lda ($28),y			lda 	(codePtr),y
.1545	f0 39		beq $1580			beq 	_EHNoLine
.1547	a5 29		lda $29				lda 	codePtr+1 					; code running from the command line.
.1549	cd c9 0a	cmp $0ac9			cmp 	basePage+1
.154c	90 32		bcc $1580			bcc 	_EHNoLine
.154e	a9 8a		lda #$8a			lda 	#(EHAtMsg) & $FF
.1550	85 2a		sta $2a				sta 	temp0
.1552	a9 15		lda #$15			lda 	#(EHAtMsg) >> 8
.1554	85 2b		sta $2b				sta 	1+(temp0)
.1556	20 49 18	jsr $1849			jsr 	EHPrintAscii
.1559	a0 01		ldy #$01			ldy 	#1 							; set up line number in TOS
.155b	a2 00		ldx #$00			ldx 	#0
.155d	b1 28		lda ($28),y			lda 	(codePtr),y
.155f	95 50		sta $50,x			sta 	esInt0,x
.1561	c8		iny				iny
.1562	b1 28		lda ($28),y			lda 	(codePtr),y
.1564	95 58		sta $58,x			sta 	esInt1,x
.1566	a9 00		lda #$00			lda 	#0
.1568	95 60		sta $60,x			sta 	esInt2,x
.156a	95 68		sta $68,x			sta 	esInt3,x
.156c	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.156e	85 2a		sta $2a				sta 	temp0
.1570	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.1572	85 2b		sta $2b				sta 	1+(temp0)
.1574	a0 0a		ldy #$0a			ldy 	#10 						; in base 10.
.1576	a9 00		lda #$00			lda 	#0							; stack position zero.
.1578	a2 12		ldx #$12		ldx	#18
.157a	20 e3 34	jsr $34e3		jsr	mainHandler
.157d	20 49 18	jsr $1849			jsr 	EHPrintAscii
.1580					_EHNoLine:
.1580	a2 06		ldx #$06		ldx	#6
.1582	20 f6 14	jsr $14f6		jsr	deviceHandler
.1585	a2 04		ldx #$04		ldx	#4
.1587	20 49 1e	jsr $1e49		jsr	interactionHandler
.158a					EHAtMsg:
>158a	03 20 40 20					.text 	3," @ "

;******  Processing file: error/../generated/errortext.inc

.158e					ErrorTextList:
>158e	13 46 65 61 74 75 72 65			.text 19,"Feature not Present"
>1596	20 6e 6f 74 20 50 72 65 73 65 6e 74
>15a2	0c 53 79 6e 74 61 78 20			.text 12,"Syntax Error"
>15aa	45 72 72 6f 72
>15af	0f 4d 6f 64 75 6c 65 20			.text 15,"Module disabled"
>15b7	64 69 73 61 62 6c 65 64
>15bf	10 41 73 73 65 72 74 69			.text 16,"Assertion failed"
>15c7	6f 6e 20 66 61 69 6c 65 64
>15d0	0e 44 69 76 69 64 65 20			.text 14,"Divide By Zero"
>15d8	42 79 20 5a 65 72 6f
>15df	04 53 74 6f 70				.text 4,"Stop"
>15e4	0d 54 79 70 65 20 4d 69			.text 13,"Type Mismatch"
>15ec	73 6d 61 74 63 68
>15f2	0d 49 6c 6c 65 67 61 6c			.text 13,"Illegal Value"
>15fa	20 56 61 6c 75 65
>1600	15 4d 69 73 73 69 6e 67			.text 21,"Missing right bracket"
>1608	20 72 69 67 68 74 20 62 72 61 63 6b 65 74
>1616	0d 4d 69 73 73 69 6e 67			.text 13,"Missing comma"
>161e	20 63 6f 6d 6d 61
>1624	11 4d 69 73 73 69 6e 67			.text 17,"Missing reference"
>162c	20 72 65 66 65 72 65 6e 63 65
>1636	15 4c 69 6e 65 20 4e 75			.text 21,"Line Number not found"
>163e	6d 62 65 72 20 6e 6f 74 20 66 6f 75 6e 64
>164c	0f 53 74 72 69 6e 67 20			.text 15,"String too long"
>1654	74 6f 6f 20 6c 6f 6e 67
>165c	14 52 45 54 55 52 4e 20			.text 20,"RETURN without GOSUB"
>1664	77 69 74 68 6f 75 74 20 47 4f 53 55 42
>1671	14 55 4e 54 49 4c 20 77			.text 20,"UNTIL without REPEAT"
>1679	69 74 68 6f 75 74 20 52 45 50 45 41 54
>1686	10 4e 45 58 54 20 77 69			.text 16,"NEXT without FOR"
>168e	74 68 6f 75 74 20 46 4f 52
>1697	12 57 45 4e 44 20 77 69			.text 18,"WEND without WHILE"
>169f	74 68 6f 75 74 20 57 48 49 4c 45
>16aa	14 45 4e 44 50 52 4f 43			.text 20,"ENDPROC without PROC"
>16b2	20 77 69 74 68 6f 75 74 20 50 52 4f 43
>16bf	0e 42 61 64 20 4e 45 58			.text 14,"Bad NEXT index"
>16c7	54 20 69 6e 64 65 78
>16ce	17 53 74 72 75 63 74 75			.text 23,"Structures nested wrong"
>16d6	72 65 73 20 6e 65 73 74 65 64 20 77 72 6f 6e 67
>16e6	16 43 61 6e 6e 6f 74 20			.text 22,"Cannot create variable"
>16ee	63 72 65 61 74 65 20 76 61 72 69 61 62 6c 65
>16fd	19 52 65 74 75 72 6e 20			.text 25,"Return stack out of space"
>1705	73 74 61 63 6b 20 6f 75 74 20 6f 66 20 73 70 61
>1715	63 65
>1717	11 55 6e 6b 6e 6f 77 6e			.text 17,"Unknown Procedure"
>171f	20 50 72 6f 63 65 64 75 72 65
>1729	17 50 61 72 61 6d 65 74			.text 23,"Parameters do not match"
>1731	65 72 73 20 64 6f 20 6e 6f 74 20 6d 61 74 63 68
>1741	15 41 72 72 61 79 20 61			.text 21,"Array already defined"
>1749	6c 72 65 61 64 79 20 64 65 66 69 6e 65 64
>1757	12 44 49 4d 20 72 65 71			.text 18,"DIM requires array"
>175f	75 69 72 65 73 20 61 72 72 61 79
>176a	0f 42 61 64 20 61 72 72			.text 15,"Bad array index"
>1772	61 79 20 69 6e 64 65 78
>177a	1d 57 72 6f 6e 67 20 6e			.text 29,"Wrong number of array indices"
>1782	75 6d 62 65 72 20 6f 66 20 61 72 72 61 79 20 69
>1792	6e 64 69 63 65 73
>1798	0b 4f 75 74 20 6f 66 20			.text 11,"Out of data"
>17a0	64 61 74 61
>17a4	14 43 61 6e 6e 6f 74 20			.text 20,"Cannot tokenise line"
>17ac	74 6f 6b 65 6e 69 73 65 20 6c 69 6e 65
>17b9	0b 53 61 76 65 20 66 61			.text 11,"Save failed"
>17c1	69 6c 65 64
>17c5	0b 4c 6f 61 64 20 66 61			.text 11,"Load failed"
>17cd	69 6c 65 64
>17d1	05 42 72 65 61 6b			.text 5,"Break"
>17d7	0d 4f 75 74 20 6f 66 20			.text 13,"Out of memory"
>17df	6d 65 6d 6f 72 79
>17e5	16 45 78 70 72 65 73 73			.text 22,"Expression too complex"
>17ed	69 6f 6e 20 74 6f 6f 20 63 6f 6d 70 6c 65 78
>17fc	10 42 61 64 20 4f 70 65			.text 16,"Bad Operand/Mode"
>1804	72 61 6e 64 2f 4d 6f 64 65
>180d	13 42 72 61 6e 63 68 20			.text 19,"Branch out of range"
>1815	6f 75 74 20 6f 66 20 72 61 6e 67 65
>1821	13 4c 61 62 65 6c 20 63			.text 19,"Label changed value"
>1829	68 61 6e 67 65 64 20 76 61 6c 75 65
>1835	12 4e 6f 20 53 70 72 69			.text 18,"No Sprite Selected"
>183d	74 65 20 53 65 6c 65 63 74 65 64
>1848	00					.byte 0

;******  Return to file: error/errorhandler.asm

.1849					EHPrintAscii:
.1849	a0 00		ldy #$00			ldy 	#0
.184b	b1 2a		lda ($2a),y			lda 	(temp0),y
.184d	aa		tax				tax
.184e	f0 0f		beq $185f			beq 	_EHPExit
.1850					_EHPLoop:
.1850	c8		iny				iny
.1851	8a		txa				txa
.1852	48		pha				pha
.1853	b1 2a		lda ($2a),y			lda 	(temp0),y
.1855	a2 16		ldx #$16		ldx	#22
.1857	20 f6 14	jsr $14f6		jsr	deviceHandler
.185a	68		pla				pla
.185b	aa		tax				tax
.185c	ca		dex				dex
.185d	d0 f1		bne $1850			bne 	_EHPLoop
.185f					_EHPExit:
.185f	60		rts				rts

;******  Return to file: error/error.asm


;******  Return to file: basic.asm

.1860					section_end_error:
.1860					section_start_extension:

;******  Processing file: extension/extension.asm


;******  Processing file: extension/extensionhandler.asm

.1860					ExtensionHandler:
.1860	c9 fe		cmp #$fe			cmp 	#$FE 						; check for force mode 0
.1862	f0 16		beq $187a			beq 	_ExtensionForce
.1864	c9 ff		cmp #$ff			cmp 	#$FF						; A = $FF command, otherwise unary function stack level.
.1866	d0 08		bne $1870			bne 	_ExtensionUnary 			; is passed in A.
.1868	b1 28		lda ($28),y			lda 	(codePtr),y 				; so this is a command, using Group 2.
.186a	c8		iny				iny
.186b	0a		asl a				asl 	a
.186c	aa		tax				tax
.186d	7c 71 18	jmp ($1871,x)			jmp 	(Group2Vectors-12,x)
.1870					_ExtensionUnary:
.1870	48		pha				pha 								; save stack pos in A
.1871	b1 28		lda ($28),y			lda 	(codePtr),y 				; get shifted token, double into X
.1873	c8		iny				iny
.1874	0a		asl a				asl 	a
.1875	aa		tax				tax
.1876	68		pla				pla 								; restore stack pos and call group3 command.
.1877	7c 7d 18	jmp ($187d,x)			jmp 	(Group3Vectors-12,X)
.187a					_ExtensionForce:
.187a	4c 95 18	jmp $1895			jmp 	ForceMode0

;******  Processing file: extension/../generated/tokenvectors2.inc

.187d					Group2Vectors:
>187d	34 1b					.word	Command_VPoke            ; $86 vpoke
>187f	37 1b					.word	Command_VDoke            ; $87 vdoke
>1881	0c 1b					.word	Command_VLoad            ; $88 vload
>1883	a7 18					.word	CommandMode              ; $89 mode
>1885	52 19					.word	CommandPalette           ; $8a palette
>1887	89 19					.word	CommandSprite            ; $8b sprite

;******  Return to file: extension/extensionhandler.asm


;******  Processing file: extension/../generated/tokenvectors3.inc

.1889					Group3Vectors:
>1889	80 1b					.word	Command_VPeek            ; $86 vpeek(
>188b	83 1b					.word	Command_VDeek            ; $87 vdeek(

;******  Return to file: extension/extensionhandler.asm

.188d					XEvaluateInteger:
.188d	8a		txa				txa
.188e	a2 0a		ldx #$0a		ldx	#10
.1890	20 e3 34	jsr $34e3		jsr	mainHandler
.1893	aa		tax				tax
.1894	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/mode.asm

.0be6					currentMode:
>0be6							.fill 	4
.1895					ForceMode0:
.1895	a2 00		ldx #$00			ldx 	#0
.1897	86 50		stx $50				stx 	esInt0 						; in case we do it.
.1899					_FMCheck:
.1899	bd 26 19	lda $1926,x			lda 	CMModeList,x 				; do we need to switch ?
.189c	dd e6 0b	cmp $0be6,x			cmp 	currentMode,x
.189f	d0 13		bne $18b4			bne 	CMSetMode 					; different so switch.
.18a1	e8		inx				inx
.18a2	e0 04		cpx #$04			cpx 	#4
.18a4	d0 f3		bne $1899			bne 	_FMCheck
.18a6	60		rts				rts
.18a7					CommandMode:
.18a7	a9 00		lda #$00			lda 	#0
.18a9	a2 0a		ldx #$0a		ldx	#10
.18ab	20 e3 34	jsr $34e3		jsr	mainHandler
.18ae	a5 68		lda $68				lda 	esInt3
.18b0	29 70		and #$70			and 	#$70
.18b2	d0 06		bne $18ba			bne 	CMNoExpand
.18b4					CMSetMode:
.18b4	20 05 19	jsr $1905			jsr 	CMExpandMode
.18b7	4c ce 18	jmp $18ce			jmp 	CMUpdateMode
.18ba					CMNoExpand:
.18ba	a5 50		lda $50				lda 	esInt0
.18bc	8d e6 0b	sta $0be6			sta 	currentMode
.18bf	a5 58		lda $58				lda 	esInt1
.18c1	8d e7 0b	sta $0be7			sta 	currentMode+1
.18c4	a5 60		lda $60				lda 	esInt2
.18c6	8d e8 0b	sta $0be8			sta 	currentMode+2
.18c9	a5 68		lda $68				lda 	esInt3
.18cb	8d e9 0b	sta $0be9			sta 	currentMode+3
.18ce					CMUpdateMode:
.18ce	a2 11		ldx #$11			ldx 	#$11
.18d0					_CMClear:
.18d0	a9 00		lda #$00			lda 	#0
.18d2	9d 29 9f	sta $9f29,x			sta 	$9F29,X
.18d5	ca		dex				dex
.18d6	10 f8		bpl $18d0			bpl 	_CMClear
.18d8	ad e9 0b	lda $0be9			lda 	currentMode+3 				; get current mode
.18db	48		pha				pha 								; stack twice.
.18dc	48		pha				pha
.18dd	29 70		and #$70			and 	#$70 						; isolates bits 6,5,4 (sprites,L1 enable,L0 enable)
.18df	09 01		ora #$01			ora 	#$01 						; turn the output on.
.18e1	8d 29 9f	sta $9f29			sta 	$9F29 						; write to DC_VIDEO
.18e4	68		pla				pla 								; get back
.18e5	20 2a 19	jsr $192a			jsr 	CMToScale 					; convert lower 2 bits to a scale.
.18e8	8d 2a 9f	sta $9f2a			sta 	$9F2A 						; write to H-Scale
.18eb	68		pla				pla 								; get back, convert bits 2,3 to a scale.
.18ec	4a		lsr a				lsr 	a
.18ed	4a		lsr a				lsr 	a
.18ee	20 2a 19	jsr $192a			jsr 	CMToScale 					; convert lower 2 bits to a scale.
.18f1	8d 2b 9f	sta $9f2b			sta 	$9F2B
.18f4	a2 00		ldx #$00			ldx 	#0 							; this is offset from $9F2D to do L0
.18f6	ad e6 0b	lda $0be6			lda 	currentMode					; get L0 config byte
.18f9	20 35 19	jsr $1935			jsr 	CMDecodeLayer 				; and decode layer 0
.18fc	a2 07		ldx #$07			ldx 	#7 							; when we do layer 1, offset by 7 hence starts at $9F34
.18fe	ad e7 0b	lda $0be7			lda 	currentMode+1
.1901	20 35 19	jsr $1935			jsr 	CMDecodeLayer
.1904	60		rts				rts
.1905					CMExpandMode:
.1905	a5 50		lda $50				lda 	esInt0 						; get mode number
.1907	c9 01		cmp #$01			cmp 	#(CMEndModeList-CMModeList) >> 2
.1909	b0 16		bcs $1921			bcs 	_CMModeError
.190b	0a		asl a				asl 	a 							; x 4 into X
.190c	0a		asl a				asl 	a
.190d	aa		tax				tax
.190e	98		tya				tya
.190f	48		pha				pha
.1910	a0 00		ldy #$00			ldy 	#0
.1912					_CMEMCopy:
.1912	bd 26 19	lda $1926,x			lda 	CMModeList,x
.1915	99 e6 0b	sta $0be6,y			sta 	currentMode,y
.1918	e8		inx				inx
.1919	c8		iny				iny
.191a	c0 04		cpy #$04			cpy 	#4
.191c	d0 f4		bne $1912			bne 	_CMEMCopy
.191e	68		pla				pla
.191f	a8		tay				tay
.1920	60		rts				rts
.1921					_CMModeError:
.1921	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.1923	20 18 15	jsr $1518		jsr	errorHandler
.1926					CMModeList:
>1926	00 60 00 20					.dword	$20006000 					; Mode 0 which is the standard 80x60 mode, no sprites
.192a					CMEndModeList:
.192a					CMToScale:
.192a	29 03		and #$03			and 	#3 							; lower 2 bits only
.192c	aa		tax				tax 								; put in X for counting
.192d	a9 00		lda #$00			lda 	#0 							; zero result
.192f	38		sec				sec 								; first time rotate CS in
.1930					_CMTSLoop:
.1930	6a		ror a				ror 	a
.1931	ca		dex				dex
.1932	10 fc		bpl $1930			bpl 	_CMTSLoop
.1934	60		rts				rts
.1935					CMDecodeLayer:
.1935	48		pha				pha 								; save it.
.1936	29 f7		and #$f7			and 	#$F7 						; all the bits except T256C which you can't set using this
.1938	9d 2d 9f	sta $9f2d,x			sta 	$9F2D,X
.193b	68		pla				pla 								; get it back
.193c	29 08		and #$08			and 	#$08 						; the missing bit sets the tile size.
.193e	f0 02		beq $1942			beq 	_CMDLNotSet
.1940	a9 03		lda #$03			lda 	#$03 						; which sets both lower bits, they're square.
.1942					_CMDLNotSet:
.1942	e0 00		cpx #$00			cpx 	#0
.1944	f0 06		beq $194c			beq 	_CMDLayer0 					; layer 1 has standard defaults for tile table, e.g. $7C
.1946	09 7c		ora #$7c			ora 	#$7C 						; so set those bits and write it out.
.1948	9d 2f 9f	sta $9f2f,x			sta 	$9F2F,X
.194b	60		rts				rts
.194c					_CMDLayer0:
.194c	09 80		ora #$80			ora 	#$80 						; tile base is $80
.194e	9d 2f 9f	sta $9f2f,x			sta 	$9F2F,X
.1951	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/palette.asm

.1952					CommandPalette:
.1952	a9 00		lda #$00			lda 	#0
.1954	a2 0c		ldx #$0c		ldx	#12
.1956	20 e3 34	jsr $34e3		jsr	mainHandler
.1959	a2 02		ldx #$02		ldx	#2
.195b	20 e3 34	jsr $34e3		jsr	mainHandler
.195e	a9 01		lda #$01			lda 	#1
.1960	a2 08		ldx #$08		ldx	#8
.1962	20 e3 34	jsr $34e3		jsr	mainHandler
.1965	a5 50		lda $50				lda 	esInt0 					; get palette #
.1967	20 77 19	jsr $1977			jsr 	PointToPaletteA			; point to palette register
.196a	a5 51		lda $51				lda 	esInt0+1
.196c	8d 23 9f	sta $9f23			sta 	$9F23
.196f	a5 59		lda $59				lda 	esInt1+1
.1971	29 0f		and #$0f			and 	#$0F
.1973	8d 23 9f	sta $9f23			sta 	$9F23
.1976	60		rts				rts
.1977					PointToPaletteA:
.1977	0a		asl a				asl 	a 							; x 2 -> LSB
.1978	8d 20 9f	sta $9f20			sta 	$9F20
.197b	a9 00		lda #$00			lda 	#0 							; carry into A
.197d	2a		rol a				rol 	a
.197e	09 fa		ora #$fa			ora 	#$FA 						; make correct address
.1980	8d 21 9f	sta $9f21			sta 	$9F21
.1983	a9 11		lda #$11			lda 	#$11 						; $01 and single step => $9F22
.1985	8d 22 9f	sta $9f22			sta 	$9F22
.1988	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/sprite.asm

.0bea					currSprite:
>0bea							.fill 	2
.1989					CommandSprite:
.1989	20 9d 1a	jsr $1a9d			jsr 	CSCheckOnOff 				; look for TRUE/FALSE
.198c	d0 0d		bne $199b			bne 	_CSCheckClear
.198e	ad 29 9f	lda $9f29			lda 	$9F29 						; sprite enable is bit 6.
.1991	29 bf		and #$bf			and 	#$BF 						; clear it whatever
.1993	90 02		bcc $1997			bcc 	_CSNotOn 					; if CS turn on, so set it
.1995	09 40		ora #$40			ora 	#$40
.1997					_CSNotOn:
.1997	8d 29 9f	sta $9f29			sta 	$9F29 						; write it back in new state and exit
.199a	60		rts				rts
.199b					_CSCheckClear:
.199b	a9 00		lda #$00			lda 	#0 							; no sprite currently selected.
.199d	8d eb 0b	sta $0beb			sta 	currSprite+1
.19a0	b1 28		lda ($28),y			lda 	(codePtr),y 				; check for CLEAR
.19a2	c9 e7		cmp #$e7			cmp 	#TKW_CLEAR
.19a4	d0 05		bne $19ab			bne 	_CSCommandLoop 				; not CLEAR, go to main loop
.19a6	20 ae 1a	jsr $1aae			jsr 	CSClearSprites 				; clear all the sprites
.19a9	c8		iny				iny 								; consume CLEAR token and exit.
.19aa	60		rts				rts
.19ab					_CSCommandLoop:
.19ab	20 9d 1a	jsr $1a9d			jsr 	CSCheckOnOff 				; check sprite on/off
.19ae	f0 40		beq $19f0			beq 	_CSSetVisibility
.19b0	b1 28		lda ($28),y			lda 	(codePtr),y 				; get and consume character
.19b2	c9 80		cmp #$80			cmp 	#TOK_EOL					; EOL exit.
.19b4	f0 39		beq $19ef			beq 	_CSExit
.19b6	c8		iny				iny									; consume it
.19b7	c9 ca		cmp #$ca			cmp 	#TKW_COLON 					; colon exit
.19b9	f0 34		beq $19ef			beq 	_CSExit
.19bb	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; semantic comma
.19bd	f0 ec		beq $19ab			beq 	_CSCommandLoop
.19bf	c9 da		cmp #$da			cmp		#TKW_IMAGE 					; image ?
.19c1	f0 7d		beq $1a40			beq 	_CSSetImage
.19c3	c9 dc		cmp #$dc			cmp 	#TKW_FLIP 					; flip ?
.19c5	f0 3f		beq $1a06			beq 	_CSSetFlip
.19c7	c9 ce		cmp #$ce			cmp 	#TKW_TO 					; to ?
.19c9	f0 5a		beq $1a25			beq 	_CSSetPos
.19cb	88		dey				dey 								; unpick DEY
.19cc	a9 00		lda #$00			lda 	#0 							; sprite # now at level 0
.19ce	a2 0c		ldx #$0c		ldx	#12
.19d0	20 e3 34	jsr $34e3		jsr	mainHandler
.19d3	06 50		asl $50				asl		esInt0 						; multiply A:esInt0 by 8
.19d5	b0 13		bcs $19ea			bcs 	_CSBadValue 				; sprites only 0-127
.19d7	06 50		asl $50				asl 	esInt0
.19d9	2a		rol a				rol 	a
.19da	06 50		asl $50				asl 	esInt0
.19dc	2a		rol a				rol 	a
.19dd	09 fc		ora #$fc			ora 	#$FC 						; MSB of address (barring $01 upper third byte)
.19df	8d eb 0b	sta $0beb			sta 	currSprite+1
.19e2	a5 50		lda $50				lda 	esInt0 						; LSB of address
.19e4	8d ea 0b	sta $0bea			sta 	currSprite+0
.19e7	4c ab 19	jmp $19ab			jmp 	_CSCommandLoop
.19ea					_CSBadValue
.19ea	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.19ec	20 18 15	jsr $1518		jsr	errorHandler
.19ef					_CSExit:
.19ef	60		rts				rts
.19f0					_CSSetVisibility:
.19f0	08		php				php 								; save carry
.19f1	a9 06		lda #$06			lda 	#6 							; set pos to offset 6.
.19f3	20 84 1a	jsr $1a84			jsr 	SpriteSetTarget
.19f6	ad 23 9f	lda $9f23			lda 	$9F23 						; read it.
.19f9	29 f3		and #$f3			and 	#$F3 						; clear depth bits, disabling it.
.19fb	28		plp				plp
.19fc	90 02		bcc $1a00			bcc 	_CSSetOff 					; check if carry was set
.19fe	09 0c		ora #$0c			ora 	#$0C 						; otherwise set depth bits to 11, on top.
.1a00					_CSSetOff:
.1a00	8d 23 9f	sta $9f23			sta 	$9F23 						; update and loop back
.1a03	4c ab 19	jmp $19ab			jmp 	_CSCommandLoop
.1a06					_CSSetFlip:
.1a06	a9 00		lda #$00			lda 	#0 							; image # now at level 0
.1a08	a2 0c		ldx #$0c		ldx	#12
.1a0a	20 e3 34	jsr $34e3		jsr	mainHandler
.1a0d	a9 06		lda #$06			lda 	#6 							; set sprite position to +6
.1a0f	20 84 1a	jsr $1a84			jsr 	SpriteSetTarget
.1a12	a5 50		lda $50				lda 	esInt0 						; flip value & 3 => temp0
.1a14	29 03		and #$03			and 	#3
.1a16	85 2a		sta $2a				sta 	temp0
.1a18	ad 23 9f	lda $9f23			lda 	$9F23 						; update the flip.
.1a1b	29 fc		and #$fc			and 	#$FC
.1a1d	05 2a		ora $2a				ora 	temp0
.1a1f	8d 23 9f	sta $9f23			sta 	$9F23
.1a22	4c ab 19	jmp $19ab			jmp 	_CSCommandLoop
.1a25					_CSSetPos:
.1a25	a9 00		lda #$00			lda 	#0 							; X now at level 0
.1a27	a2 0a		ldx #$0a		ldx	#10
.1a29	20 e3 34	jsr $34e3		jsr	mainHandler
.1a2c	a2 02		ldx #$02		ldx	#2
.1a2e	20 e3 34	jsr $34e3		jsr	mainHandler
.1a31	a9 01		lda #$01			lda 	#1 							; Y now at level 1
.1a33	a2 0a		ldx #$0a		ldx	#10
.1a35	20 e3 34	jsr $34e3		jsr	mainHandler
.1a38	a2 00		ldx #$00			ldx 	#0 							; coords at 0,1
.1a3a	20 c8 1a	jsr $1ac8			jsr 	SpriteMove 					; move it.
.1a3d	4c ab 19	jmp $19ab			jmp 	_CSCommandLoop
.1a40					_CSSetImage:
.1a40	a9 00		lda #$00			lda 	#0 							; image # now at level 0
.1a42	a2 0c		ldx #$0c		ldx	#12
.1a44	20 e3 34	jsr $34e3		jsr	mainHandler
.1a47	a9 00		lda #$00			lda 	#0 							; set sprite position to +0
.1a49	20 84 1a	jsr $1a84			jsr 	SpriteSetTarget
.1a4c	a6 50		ldx $50				ldx 	esInt0 						; get image # into X
.1a4e	bd 2d 0c	lda $0c2d,x			lda 	imageAddr2Low,x 			; copy low address in.
.1a51	8d 23 9f	sta $9f23			sta 	$9F23
.1a54	ee 20 9f	inc $9f20			inc 	$9F20 						; bump to offset 1.
.1a57	bd ed 0b	lda $0bed,x			lda 	imageInfo,x 				; get 4/8 bit flag from info.
.1a5a	29 10		and #$10			and 	#$10
.1a5c	0a		asl a				asl 	a
.1a5d	0a		asl a				asl		a
.1a5e	0a		asl a				asl 	a 							; put into bit 7
.1a5f	1d 6d 0c	ora $0c6d,x			ora 	imageAddr2High,x 			; or high address with it.
.1a62	8d 23 9f	sta $9f23			sta 	$9F23 						; write the high byte.
.1a65	a9 06		lda #$06			lda 	#6
.1a67	20 84 1a	jsr $1a84			jsr 	SpriteSetTarget 			; set sprite on.
.1a6a	ad 23 9f	lda $9f23			lda 	$9F23
.1a6d	09 0c		ora #$0c			ora 	#$0C
.1a6f	8d 23 9f	sta $9f23			sta 	$9F23
.1a72	ee 20 9f	inc $9f20			inc 	$9F20 						; point to byte 7 : height/width/palette offset
.1a75	bd ed 0b	lda $0bed,x			lda 	imageInfo,x 				; get image info
.1a78	0a		asl a				asl 	a 							; shift bits 0-3 to 4-7
.1a79	0a		asl a				asl 	a
.1a7a	0a		asl a				asl 	a
.1a7b	0a		asl a				asl 	a
.1a7c	09 0f		ora #$0f			ora 	#$0F 						; set palette offset and write back
.1a7e	8d 23 9f	sta $9f23			sta 	$9F23
.1a81	4c ab 19	jmp $19ab			jmp 	_CSCommandLoop
.1a84					SpriteSetTarget:
.1a84	0d ea 0b	ora $0bea			ora 	currSprite
.1a87	8d 20 9f	sta $9f20			sta 	$9F20
.1a8a	ad eb 0b	lda $0beb			lda 	currSprite+1
.1a8d	f0 09		beq $1a98			beq 	_SSTNoSet
.1a8f	8d 21 9f	sta $9f21			sta 	$9F21
.1a92	a9 01		lda #$01			lda 	#$01
.1a94	8d 22 9f	sta $9f22			sta 	$9F22
.1a97	60		rts				rts
.1a98					_SSTNoSet:
.1a98	a2 27		ldx #$27			ldx 	#ErrorID_NoSprite
.1a9a	20 18 15	jsr $1518		jsr	errorHandler
.1a9d					CSCheckOnOff:
.1a9d	b1 28		lda ($28),y			lda 	(codePtr),y 				; get and consume it.
.1a9f	c8		iny				iny
.1aa0	c9 ab		cmp #$ab			cmp 	#TKW_FALSE					; return CC/EQ if FALSE
.1aa2	18		clc				clc
.1aa3	f0 08		beq $1aad			beq 	_CSCOExit
.1aa5	c9 aa		cmp #$aa			cmp 	#TKW_TRUE 					; return CS/EQ if TRUE
.1aa7	38		sec				sec 								; return NE if neither.
.1aa8	f0 03		beq $1aad			beq 	_CSCOExit
.1aaa	88		dey				dey 								; undo consume
.1aab	c9 aa		cmp #$aa			cmp 	#TKW_TRUE 					; and set NE again, DEY will change it.
.1aad					_CSCOExit:
.1aad	60		rts				rts
.1aae					CSClearSprites:
.1aae	a9 11		lda #$11			lda 	#$11 						; set address to 1FC00 with single bump
.1ab0	8d 22 9f	sta $9f22			sta 	$9F22
.1ab3	a9 fc		lda #$fc			lda 	#$FC
.1ab5	8d 21 9f	sta $9f21			sta 	$9F21
.1ab8	a9 00		lda #$00			lda 	#0
.1aba	8d 20 9f	sta $9f20			sta 	$9F20
.1abd					_CSClear:
.1abd	a9 00		lda #$00			lda 	#0 							; set everything to $00
.1abf	8d 23 9f	sta $9f23			sta 	$9F23
.1ac2	ad 21 9f	lda $9f21			lda 	$9F21
.1ac5	d0 f6		bne $1abd			bne 	_CSClear
.1ac7	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/spritemove.asm

.1ac8					SpriteMove:
.1ac8	98		tya				tya
.1ac9	48		pha				pha
.1aca	a9 07		lda #$07			lda 	#7 									; point to height/width byte and read it.
.1acc	20 84 1a	jsr $1a84			jsr 	SpriteSetTarget
.1acf	ad 23 9f	lda $9f23			lda 	$9F23
.1ad2	4a		lsr a				lsr 	a 									; A now contains bits 0-1 (width) 2-3 (height)
.1ad3	4a		lsr a				lsr 	a
.1ad4	4a		lsr a				lsr 	a
.1ad5	4a		lsr a				lsr 	a
.1ad6	85 2a		sta $2a				sta 	temp0 								; save these bits so we can work out the centre.
.1ad8	a9 02		lda #$02			lda 	#2 									; point to X position.Low
.1ada	20 84 1a	jsr $1a84			jsr 	SpriteSetTarget
.1add	20 ec 1a	jsr $1aec			jsr 	_SMWritePosition 					; write X position out.
.1ae0	46 2a		lsr $2a				lsr 	temp0 								; shift height bits into 0,1
.1ae2	46 2a		lsr $2a				lsr 	temp0
.1ae4	e8		inx				inx 										; get the y position
.1ae5	20 ec 1a	jsr $1aec			jsr 	_SMWritePosition 					; and write that out.
.1ae8	ca		dex				dex 										; fix X and quit.
.1ae9	68		pla				pla
.1aea	a8		tay				tay
.1aeb	60		rts				rts
.1aec					_SMWritePosition:
.1aec	a5 2a		lda $2a				lda 	temp0 								; get dim size
.1aee	29 03		and #$03			and 	#3 									; in range into Y
.1af0	a8		tay				tay
.1af1	38		sec				sec
.1af2	b5 50		lda $50,x			lda 	esInt0,x
.1af4	f9 08 1b	sbc $1b08,y			sbc 	_SMHalfSize,y
.1af7	8d 23 9f	sta $9f23			sta 	$9F23
.1afa	ee 20 9f	inc $9f20			inc 	$9F20
.1afd	b5 58		lda $58,x			lda 	esInt1,x
.1aff	e9 00		sbc #$00			sbc 	#0
.1b01	8d 23 9f	sta $9f23			sta 	$9F23
.1b04	ee 20 9f	inc $9f20			inc 	$9F20
.1b07	60		rts				rts
.1b08					_SMHalfSize:
>1b08	04 08 10 20					.byte 	4,8,16,32 							; half size each dimension.

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/vload.asm

.1b0c					Command_VLoad:
.1b0c	a9 00		lda #$00			lda 	#0 								; string which is the file name
.1b0e	a2 0e		ldx #$0e		ldx	#14
.1b10	20 e3 34	jsr $34e3		jsr	mainHandler
.1b13	a2 01		ldx #$01			ldx 	#1 								; load address at +1.
.1b15	a5 35		lda $35				lda 	lowMemory 						; load it into lowMemory (for now ?)
.1b17	95 50		sta $50,x			sta 	esInt0,x
.1b19	a5 36		lda $36				lda 	lowMemory+1
.1b1b	95 58		sta $58,x			sta 	esInt1,x
.1b1d	a9 00		lda #$00			lda 	#0
.1b1f	95 60		sta $60,x			sta 	esInt2,x
.1b21	95 68		sta $68,x			sta 	esInt3,x
.1b23	a2 0e		ldx #$0e		ldx	#14
.1b25	20 f6 14	jsr $14f6		jsr	deviceHandler
.1b28	a5 51		lda $51				lda 	esInt0+1 						; (temp0) is where we are decoding from.
.1b2a	85 2a		sta $2a				sta 	temp0
.1b2c	a5 59		lda $59				lda 	esInt1+1
.1b2e	85 2b		sta $2b				sta 	temp0+1
.1b30	20 ac 1b	jsr $1bac			jsr 	LoadVRAMFile 					; load the VRAM file in.
.1b33	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/vpeekpoke.asm

.1b34					Command_VPoke:
.1b34	38		sec				sec 						; one byte , CS
.1b35	b0 01		bcs $1b38			bcs 	CmdVideoWrite
.1b37					Command_VDoke:
.1b37	18		clc				clc 						; two bytes, CC
.1b38					CmdVideoWrite:
.1b38	08		php				php 						; save one or two btes
.1b39	a9 00		lda #$00			lda 	#0  				; get address and value into levels 0,1
.1b3b	a2 0a		ldx #$0a		ldx	#10
.1b3d	20 e3 34	jsr $34e3		jsr	mainHandler
.1b40	a2 02		ldx #$02		ldx	#2
.1b42	20 e3 34	jsr $34e3		jsr	mainHandler
.1b45	a9 01		lda #$01			lda 	#1
.1b47	a2 0a		ldx #$0a		ldx	#10
.1b49	20 e3 34	jsr $34e3		jsr	mainHandler
.1b4c	a2 00		ldx #$00			ldx 	#0
.1b4e	20 5f 1b	jsr $1b5f			jsr 	SetUpTOSVRamAddress ; copy target address to VRAM address registers
.1b51	a5 51		lda $51				lda 	esInt0+1 			; get MSB of write value
.1b53	8d 23 9f	sta $9f23			sta 	$9F23
.1b56	28		plp				plp 						; if it was Poke then exit
.1b57	b0 05		bcs $1b5e			bcs 	_CVWExit
.1b59	a5 59		lda $59				lda 	esInt1+1 			; doke, write the MSB.
.1b5b	8d 23 9f	sta $9f23			sta 	$9F23
.1b5e					_CVWExit:
.1b5e	60		rts				rts
.1b5f					SetUpTOSVRamAddress:
.1b5f	b5 60		lda $60,x			lda 	esInt2,x 			; check range of address, data to $FFFF
.1b61	29 fe		and #$fe			and 	#$FE
.1b63	15 68		ora $68,x			ora 	esInt3,x
.1b65	d0 14		bne $1b7b			bne 	CVWValue
.1b67	b5 50		lda $50,x			lda 	esInt0,x			; set address up
.1b69	8d 20 9f	sta $9f20			sta 	$9F20
.1b6c	b5 58		lda $58,x			lda 	esInt1,x
.1b6e	8d 21 9f	sta $9f21			sta	 	$9F21
.1b71	b5 60		lda $60,x			lda 	esInt2,x
.1b73	29 01		and #$01			and 	#1
.1b75	09 10		ora #$10			ora 	#$10 				; step 1.
.1b77	8d 22 9f	sta $9f22			sta 	$9F22
.1b7a	60		rts				rts
.1b7b					CVWValue:
.1b7b	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.1b7d	20 18 15	jsr $1518		jsr	errorHandler
.1b80					Command_VPeek:
.1b80	38		sec				sec 						; one byte , CS
.1b81	b0 01		bcs $1b84			bcs 	CmdVideoRead
.1b83					Command_VDeek:
.1b83	18		clc				clc 						; two bytes, CC
.1b84					CmdVideoRead:
.1b84	08		php				php 						; save action on stack.
.1b85	48		pha				pha 						; save stack position
.1b86	a2 0a		ldx #$0a		ldx	#10
.1b88	20 e3 34	jsr $34e3		jsr	mainHandler
.1b8b	a2 04		ldx #$04		ldx	#4
.1b8d	20 e3 34	jsr $34e3		jsr	mainHandler
.1b90	68		pla				pla
.1b91	aa		tax				tax
.1b92	20 5f 1b	jsr $1b5f			jsr 	SetUpTOSVRamAddress	; set up VRAM address.
.1b95	a9 00		lda #$00			lda 	#0 					; zero upper 3 bytes
.1b97	95 58		sta $58,x			sta 	esInt1,x
.1b99	95 60		sta $60,x			sta 	esInt2,x
.1b9b	95 68		sta $68,x			sta 	esInt3,x
.1b9d	ad 23 9f	lda $9f23			lda 	$9F23				; copy 1st byte
.1ba0	95 50		sta $50,x			sta 	esInt0,x
.1ba2	28		plp				plp 						; check if DOKE (carry was clear)
.1ba3	b0 05		bcs $1baa			bcs 	_CVRExit
.1ba5	ad 23 9f	lda $9f23			lda 	$9F23 				; copy 2nd byte
.1ba8	95 58		sta $58,x			sta 	esInt1,x
.1baa					_CVRExit:
.1baa	8a		txa				txa 						; return X position.
.1bab	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/vramprocess.asm

.0bec					compressMode:
>0bec							.fill 	1
.0bed					imageInfo:
>0bed							.fill 	X16MaxImages
.0c2d					imageAddr2Low:
>0c2d							.fill  	X16MaxImages
.0c6d					imageAddr2High:
>0c6d							.fill  	X16MaxImages
.1bac					LoadVRAMFile:
.1bac	8a		txa				txa
.1bad	48		pha				pha
.1bae	98		tya				tya
.1baf	48		pha				pha
.1bb0					_LVRLoop:
.1bb0	20 4e 1c	jsr $1c4e			jsr 	LVFGet 						; get the next (never access direct)
.1bb3	c9 80		cmp #$80			cmp 	#$80 						; exit ?
.1bb5	f0 3e		beq $1bf5			beq 	_LVRExit
.1bb7	b0 41		bcs $1bfa			bcs 	_LVRLoad 					; load data in ?
.1bb9	c9 08		cmp #$08			cmp 	#$08 						; is it set address ?
.1bbb	90 0d		bcc $1bca			bcc 	_LVRSetAddress
.1bbd	c9 10		cmp #$10			cmp 	#$10 						; is it set compression type ?
.1bbf	90 2d		bcc $1bee			bcc 	_LVRSetCompress
.1bc1	c9 64		cmp #$64			cmp 	#$64 						; is it set sprite type.
.1bc3	90 43		bcc $1c08			bcc 	_LVRSetSprite
.1bc5	a2 01		ldx #$01			ldx 	#ErrorID_missing
.1bc7	20 18 15	jsr $1518		jsr	errorHandler
.1bca					_LVRSetAddress:
.1bca	85 2d		sta $2d				sta 	temp1+1 					; 24 bit in temp1+1/temp1/A
.1bcc	20 4e 1c	jsr $1c4e			jsr 	LVFGet
.1bcf	85 2c		sta $2c				sta 	temp1
.1bd1	a9 00		lda #$00			lda 	#0
.1bd3	46 2d		lsr $2d				lsr 	temp1+1 					; / 2 twice.
.1bd5	66 2c		ror $2c				ror 	temp1
.1bd7	6a		ror a				ror		a
.1bd8	46 2d		lsr $2d				lsr 	temp1+1
.1bda	66 2c		ror $2c				ror 	temp1
.1bdc	6a		ror a				ror		a
.1bdd	8d 20 9f	sta $9f20			sta 	$9F20 						; set write address with +1 increment
.1be0	a5 2c		lda $2c				lda 	temp1
.1be2	8d 21 9f	sta $9f21			sta 	$9F21
.1be5	a5 2d		lda $2d				lda 	temp1+1
.1be7	09 10		ora #$10			ora 	#$10
.1be9	8d 22 9f	sta $9f22			sta 	$9F22
.1bec	d0 c2		bne $1bb0			bne 	_LVRLoop
.1bee					_LVRSetCompress:
.1bee	29 07		and #$07			and 	#7
.1bf0	8d ec 0b	sta $0bec			sta 	compressMode
.1bf3	10 bb		bpl $1bb0			bpl 	_LVRLoop
.1bf5					_LVRExit:
.1bf5	68		pla				pla
.1bf6	a8		tay				tay
.1bf7	68		pla				pla
.1bf8	aa		tax				tax
.1bf9	60		rts				rts
.1bfa					_LVRLoad:
.1bfa	29 7f		and #$7f			and 	#$7F 						; count in X (is > 0)
.1bfc	aa		tax				tax
.1bfd					_LVRLCopy:
.1bfd	20 4e 1c	jsr $1c4e			jsr 	LVFGet 						; write to data.
.1c00	8d 23 9f	sta $9f23			sta 	$9F23
.1c03	ca		dex				dex
.1c04	d0 f7		bne $1bfd			bne 	_LVRLCopy
.1c06	f0 a8		beq $1bb0			beq 	_LVRLoop
.1c08					_LVRSetSprite:
.1c08	48		pha				pha 								; save on stack
.1c09	20 4e 1c	jsr $1c4e			jsr 	LVFGet 						; get the sprite number into X
.1c0c	aa		tax				tax
.1c0d	c9 40		cmp #$40			cmp 	#X16MaxImages				; too high ?
.1c0f	b0 38		bcs $1c49			bcs 	_LVRSSValue
.1c11	68		pla				pla 								; restore the data held in the first byte
.1c12	9d ed 0b	sta $0bed,x			sta 	imageInfo,x 				; and write into the sprite image table.
.1c15					_LVRAlignVRAM:
.1c15	ad 20 9f	lda $9f20			lda 	$9F20 						; check VRAM on 32 byte boundary
.1c18	29 1f		and #$1f			and 	#$1F
.1c1a	f0 07		beq $1c23			beq 	_LVRAligned
.1c1c	a9 00		lda #$00			lda 	#$00
.1c1e	8d 23 9f	sta $9f23			sta 	$9F23
.1c21	f0 f2		beq $1c15			beq 	_LVRAlignVRAM
.1c23					_LVRAligned:
.1c23	ad 22 9f	lda $9f22			lda 	$9F22 						; put address/32 in sprite image table
.1c26	4a		lsr a				lsr 	a 	 						; first halve into temp1
.1c27	ad 21 9f	lda $9f21			lda 	$9F21
.1c2a	6a		ror a				ror 	a
.1c2b	85 2d		sta $2d				sta 	temp1+1
.1c2d	ad 20 9f	lda $9f20			lda 	$9F20
.1c30	6a		ror a				ror 	a
.1c31	85 2c		sta $2c				sta 	temp1
.1c33	a0 04		ldy #$04			ldy 	#4 							; divide it by 16 in temp1
.1c35					_LVRShift:
.1c35	46 2d		lsr $2d				lsr 	temp1+1
.1c37	66 2c		ror $2c				ror 	temp1
.1c39	88		dey				dey
.1c3a	d0 f9		bne $1c35			bne 	_LVRShift
.1c3c	a5 2d		lda $2d				lda 	temp1+1 					; copy result.
.1c3e	9d 6d 0c	sta $0c6d,x			sta 	imageAddr2High,x
.1c41	a5 2c		lda $2c				lda 	temp1
.1c43	9d 2d 0c	sta $0c2d,x			sta 	imageAddr2Low,x
.1c46	4c b0 1b	jmp $1bb0			jmp 	_LVRLoop
.1c49					_LVRSSValue:
.1c49	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.1c4b	20 18 15	jsr $1518		jsr	errorHandler
.1c4e	84 32		sty $32		LVFGet:	sty 	tempShort
.1c50	a0 00		ldy #$00			ldy 	#0
.1c52	b1 2a		lda ($2a),y			lda 	(temp0),y
.1c54	a4 32		ldy $32				ldy	 	tempShort
.1c56	e6 2a		inc $2a				inc 	temp0
.1c58	d0 02		bne $1c5c			bne 	_LVFGExit
.1c5a	e6 2b		inc $2b				inc 	temp0+1
.1c5c					_LVFGExit:
.1c5c	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Return to file: basic.asm

.1c5d					section_end_extension:
.1c5d					section_start_floatingpoint:

;******  Processing file: floatingpoint/floatingpoint.asm

.1c5d					floatingpointHandler:
.1c5d	a2 03		ldx #$03			ldx 	#ErrorID_NoModule
.1c5f	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: basic.asm

.1c62					section_end_floatingpoint:
.1c62					section_start_interaction:

;******  Processing file: interaction/interaction.asm


;******  Processing file: interaction/cold.asm

.1c62					ColdStartEntry:
.1c62	a2 ff		ldx #$ff			ldx 	#$FF
.1c64	9a		txs				txs
.1c65	20 ee 1c	jsr $1cee			jsr 	ForceStandardMode
.1c68	a2 04		ldx #$04		ldx	#4
.1c6a	20 f6 14	jsr $14f6		jsr	deviceHandler
.1c6d	a0 ff		ldy #$ff			ldy 	#255
.1c6f					_CSBanner:
.1c6f	c8		iny				iny
.1c70	b9 96 1c	lda $1c96,y			lda 	Intro,y
.1c73	f0 14		beq $1c89			beq 	_CSStart
.1c75	c9 08		cmp #$08			cmp 	#8
.1c77	90 08		bcc $1c81			bcc 	_CSInk
.1c79	a2 16		ldx #$16		ldx	#22
.1c7b	20 f6 14	jsr $14f6		jsr	deviceHandler
.1c7e	4c 6f 1c	jmp $1c6f			jmp 	_CSBanner
.1c81					_CSInk:
.1c81	a2 08		ldx #$08		ldx	#8
.1c83	20 f6 14	jsr $14f6		jsr	deviceHandler
.1c86	4c 6f 1c	jmp $1c6f			jmp 	_CSBanner
.1c89					_CSStart:
.1c89	a2 16		ldx #$16		ldx	#22
.1c8b	20 e3 34	jsr $34e3		jsr	mainHandler
.1c8e	a2 06		ldx #$06		ldx	#6
.1c90	20 e3 34	jsr $34e3		jsr	mainHandler
.1c93	4c ae 1d	jmp $1dae			jmp 	WarmStartEntry
>1c96	06 2a 2a 2a 20 36 35 30		Intro:	.text 	6,"*** 6502 Extended BASIC ***",13,13
>1c9e	32 20 45 78 74 65 6e 64 65 64 20 42 41 53 49 43
>1cae	20 2a 2a 2a 0d 0d
>1cb4	03 57 72 69 74 74 65 6e				.text 	3,"Written by Paul Robson 2021",13,13
>1cbc	20 62 79 20 50 61 75 6c 20 52 6f 62 73 6f 6e 20
>1ccc	32 30 32 31 0d 0d
>1cd2	02 42 61 73 69 63 20				.text 	2,"Basic "
>1cd9	30 2e 31 37					.text "0.17"
>1cdd	20 28						.text 	" ("
>1cdf	31 38 2d 4d 61 72 2d 32				.text "18-Mar-2021"
>1ce7	30 32 31
>1cea	29 0d 0d 00					.text 	")",13,13,0
.1cee					ForceStandardMode:
.1cee	a9 fe		lda #$fe			lda 	#$FE
.1cf0	20 60 18	jsr $1860		jsr	extensionHandler
.1cf3	60		rts				rts

;******  Return to file: interaction/interaction.asm


;******  Processing file: interaction/delete.asm

.1cf4					DeleteLine:
.1cf4	ad c8 0a	lda $0ac8			lda 	basePage 					; copy program base to temp0
.1cf7	85 2a		sta $2a				sta 	temp0
.1cf9	ad c9 0a	lda $0ac9			lda 	basePage+1
.1cfc	85 2b		sta $2b				sta 	temp0+1
.1cfe	a0 01		ldy #$01	_DLLoop:ldy 	#1 							; see if found line ?
.1d00	a5 50		lda $50				lda 	esInt0 						; e.g. the linenumbers match
.1d02	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.1d04	d0 07		bne $1d0d			bne 	_DLNext
.1d06	c8		iny				iny
.1d07	a5 58		lda $58				lda 	esInt1
.1d09	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.1d0b	f0 06		beq $1d13			beq 	_DLFound
.1d0d	20 31 1d	jsr $1d31	_DLNext:jsr 	IAdvanceTemp0 				; shift temp0 forward, return Z flag set if end.
.1d10	d0 ec		bne $1cfe			bne 	_DLLoop
.1d12	60		rts				rts
.1d13					_DLFound:
.1d13	a0 00		ldy #$00			ldy 	#0 							; this is the line to cut, so this offset is the bytes to remove
.1d15	b1 2a		lda ($2a),y			lda 	(temp0),y
.1d17	a8		tay				tay 								; so we copy from (temp0),y
.1d18	a2 00		ldx #$00			ldx 	#0  						; to (temp0,x)
.1d1a					_DLCopyDown:
.1d1a	b1 2a		lda ($2a),y			lda 	(temp0),y 					; copy one byte.
.1d1c	81 2a		sta ($2a,x)			sta 	(temp0,x)
.1d1e	e6 2a		inc $2a				inc 	temp0 						; advance pointer
.1d20	d0 02		bne $1d24			bne 	_DLNoCarry
.1d22	e6 2b		inc $2b				inc 	temp0+1
.1d24					_DLNoCarry:
.1d24	a5 2a		lda $2a				lda 	temp0 						; until hit low memory
.1d26	c5 35		cmp $35				cmp 	lowMemory 					; which is comfortably after End Program.
.1d28	d0 f0		bne $1d1a			bne 	_DLCopyDown
.1d2a	a5 2b		lda $2b				lda 	temp0+1
.1d2c	c5 36		cmp $36				cmp 	lowMemory+1
.1d2e	d0 ea		bne $1d1a			bne 	_DLCopyDown
.1d30	60		rts				rts
.1d31					IAdvanceTemp0:
.1d31	84 32		sty $32				sty 	tempShort
.1d33	18		clc				clc
.1d34	a0 00		ldy #$00			ldy 	#0 							; get offset
.1d36	b1 2a		lda ($2a),y			lda 	(temp0),y 					; add to temp0
.1d38	65 2a		adc $2a				adc 	temp0
.1d3a	85 2a		sta $2a				sta 	temp0
.1d3c	90 02		bcc $1d40			bcc 	_IATNoCarry
.1d3e	e6 2b		inc $2b				inc 	temp0+1
.1d40					_IATNoCarry:
.1d40	b1 2a		lda ($2a),y			lda 	(temp0),y
.1d42	a4 32		ldy $32				ldy 	tempShort
.1d44	c9 00		cmp #$00			cmp		#0 							; Z set if program end.
.1d46	60		rts				rts

;******  Return to file: interaction/interaction.asm


;******  Processing file: interaction/insert.asm

.1d47					InsertLine:
.1d47	ad c8 0a	lda $0ac8			lda 	basePage 					; copy program base to temp0
.1d4a	85 2a		sta $2a				sta 	temp0
.1d4c	ad c9 0a	lda $0ac9			lda 	basePage+1
.1d4f	85 2b		sta $2b				sta 	temp0+1
.1d51					_ILLoop:
.1d51	a0 01		ldy #$01			ldy 	#1
.1d53	b1 2a		lda ($2a),y			lda 	(temp0),y
.1d55	c5 50		cmp $50				cmp 	esInt0
.1d57	c8		iny				iny
.1d58	b1 2a		lda ($2a),y			lda 	(temp0),y
.1d5a	e5 58		sbc $58				sbc 	esInt1
.1d5c	b0 05		bcs $1d63			bcs 	_ILFound 					; we know it cannot be equal, it would have been deleted
.1d5e	20 31 1d	jsr $1d31			jsr 	IAdvanceTemp0 				; shift temp0 forward, return Z flag set if end.
.1d61	d0 ee		bne $1d51			bne 	_ILLoop
.1d63					_ILFound:
.1d63	a5 35		lda $35				lda 	lowMemory 					; shift lowMemory up to make space for it.
.1d65	85 2c		sta $2c				sta 	temp1             			; this pointer goes backwards
.1d67	a5 36		lda $36				lda 	lowMemory+1
.1d69	85 2d		sta $2d				sta 	temp1+1
.1d6b	ad ea 0d	lda $0dea			lda 	tokenBufferIndex 			; space to make in Y, 0 in X.
.1d6e	18		clc				clc 								; add 3 for the line number and offset.
.1d6f	69 03		adc #$03			adc 	#3 							; tokenbuffer already has $80
.1d71	a8		tay				tay
.1d72	a2 00		ldx #$00			ldx 	#0
.1d74	a1 2c		lda ($2c,x)	_ILMove:lda 	(temp1,x)					; shift up
.1d76	91 2c		sta ($2c),y			sta 	(temp1),y
.1d78	a5 2c		lda $2c				lda 	temp1 						; check reached the insert point ?
.1d7a	c5 2a		cmp $2a				cmp 	temp0
.1d7c	d0 06		bne $1d84			bne 	_ILMNext
.1d7e	a5 2d		lda $2d				lda 	temp1+1
.1d80	c5 2b		cmp $2b				cmp 	temp0+1
.1d82	f0 0b		beq $1d8f			beq 	_ILMCopy
.1d84					_ILMNext:
.1d84	a5 2c		lda $2c				lda 	temp1
.1d86	d0 02		bne $1d8a			bne 	_ILNoBorrow
.1d88	c6 2d		dec $2d				dec 	temp1+1
.1d8a					_ILNoBorrow:
.1d8a	c6 2c		dec $2c				dec 	temp1
.1d8c	4c 74 1d	jmp $1d74			jmp 	_ILMove 					; and go round again
.1d8f					_ILMCopy:
.1d8f	98		tya				tya 								; Y is the offset of the new line.
.1d90	81 2a		sta ($2a,x)			sta 	(temp0,x)					; X = 0 still.
.1d92	a0 01		ldy #$01			ldy 	#1 							; copy in line number.
.1d94	a5 50		lda $50				lda 	esInt0
.1d96	91 2a		sta ($2a),y			sta 	(temp0),y
.1d98	c8		iny				iny
.1d99	a5 58		lda $58				lda 	esInt1
.1d9b	91 2a		sta ($2a),y			sta 	(temp0),y
.1d9d	a0 00		ldy #$00			ldy 	#0 							; copy the body in
.1d9f					_ILMCopy2:
.1d9f	b1 28		lda ($28),y			lda 	(codePtr),y
.1da1	c8		iny				iny
.1da2	c8		iny				iny
.1da3	c8		iny				iny
.1da4	91 2a		sta ($2a),y			sta 	(temp0),y
.1da6	88		dey				dey
.1da7	88		dey				dey
.1da8	cc ea 0d	cpy $0dea			cpy 	tokenBufferIndex
.1dab	d0 f2		bne $1d9f			bne 	_ILMCopy2
.1dad	60		rts				rts

;******  Return to file: interaction/interaction.asm


;******  Processing file: interaction/warm.asm

.1dae					WarmStartEntry:
.1dae	a2 ff		ldx #$ff			ldx 	#$FF
.1db0	9a		txs				txs
.1db1	20 ee 1c	jsr $1cee			jsr 	ForceStandardMode
.1db4	a9 02		lda #$02			lda 	#2							; green text.
.1db6	a2 08		ldx #$08		ldx	#8
.1db8	20 f6 14	jsr $14f6		jsr	deviceHandler
.1dbb	a2 0c		ldx #$0c		ldx	#12
.1dbd	20 f6 14	jsr $14f6		jsr	deviceHandler
.1dc0	a5 2a		lda $2a				lda 	temp0	 					; copy temp0 to codePtr
.1dc2	85 28		sta $28				sta 	codePtr
.1dc4	a5 2b		lda $2b				lda 	temp0+1
.1dc6	85 29		sta $29				sta 	codePtr+1
.1dc8	a2 06		ldx #$06		ldx	#6
.1dca	20 f6 14	jsr $14f6		jsr	deviceHandler
.1dcd	a2 08		ldx #$08		ldx	#8
.1dcf	20 c6 3f	jsr $3fc6		jsr	tokeniserHandler
.1dd2	c9 00		cmp #$00			cmp 	#0
.1dd4	f0 25		beq $1dfb			beq 	WSEError 					; failed (tokenise can fail if it doesn't know a character e.g. |)
.1dd6	a9 e7		lda #$e7			lda 	#(tokenHeader) & $FF
.1dd8	85 28		sta $28				sta 	codePtr
.1dda	a9 0c		lda #$0c			lda 	#(tokenHeader) >> 8
.1ddc	85 29		sta $29				sta 	1+(codePtr)
.1dde	ad ea 0c	lda $0cea			lda 	tokenBuffer 				; is it a blank line, go get another line.
.1de1	c9 80		cmp #$80			cmp 	#$80
.1de3	f0 c9		beq $1dae			beq 	WarmStartEntry
.1de5	29 c0		and #$c0			and 	#$C0						; does it start with a number
.1de7	c9 40		cmp #$40			cmp 	#$40 						; e.g. is it 01xx xxxx
.1de9	f0 15		beq $1e00			beq 	HasLineNumber
.1deb	a9 00		lda #$00			lda 	#0 							; zero the token header, so it will look like a
.1ded	8d e7 0c	sta $0ce7			sta 	tokenHeader 				; fake program line.
.1df0	8d e8 0c	sta $0ce8			sta 	tokenHeader+1
.1df3	8d e9 0c	sta $0ce9			sta 	tokenHeader+2
.1df6	a2 18		ldx #$18		ldx	#24
.1df8	20 e3 34	jsr $34e3		jsr	mainHandler
.1dfb					WSEError:
.1dfb	a2 1e		ldx #$1e			ldx 	#ErrorID_Tokenise
.1dfd	20 18 15	jsr $1518		jsr	errorHandler
.1e00					HasLineNumber:
.1e00	a0 03		ldy #$03			ldy 	#3 							; get line number
.1e02	a9 00		lda #$00			lda 	#0
.1e04	a2 0a		ldx #$0a		ldx	#10
.1e06	20 e3 34	jsr $34e3		jsr	mainHandler
.1e09	a5 60		lda $60				lda 	esInt2		 				; check in range (only 2 bytes)
.1e0b	05 68		ora $68				ora 	esInt3
.1e0d	d0 ec		bne $1dfb			bne 	WSEError
.1e0f	98		tya				tya 								; make codePtr point to code after the line number.
.1e10	18		clc				clc 								; by skipping over the tokenised number.
.1e11	65 28		adc $28				adc 	codePtr
.1e13	85 28		sta $28				sta 	codePtr
.1e15	90 02		bcc $1e19			bcc		_HLNNoCarry
.1e17	e6 29		inc $29				inc 	codePtr+1
.1e19					_HLNNoCarry:
.1e19	98		tya				tya 								; subtract that offset from the code buffer index
.1e1a	38		sec				sec
.1e1b	49 ff		eor #$ff			eor 	#$FF
.1e1d	6d ea 0d	adc $0dea			adc 	tokenBufferIndex
.1e20	18		clc				clc 								; add space allowing for header & $80 trailer
.1e21	69 04		adc #$04			adc 	#4
.1e23	8d ea 0d	sta $0dea			sta 	tokenBufferIndex 			; this is the number of bytes occupied.
.1e26	20 f4 1c	jsr $1cf4			jsr 	DeleteLine 					; always delete the line, it's deleted and reinserted.
.1e29					_HLNNoDelete:
.1e29	ad ea 0d	lda $0dea			lda 	tokenBufferIndex 			; if line was empty, then don't insert
.1e2c	c9 01		cmp #$01			cmp 	#1 							; (the one character is the EOL marker)
.1e2e	f0 0c		beq $1e3c			beq 	_HLMEditDone
.1e30	a5 36		lda $36				lda 	lowMemory+1 				; is there space, if we allow a little bit of
.1e32	18		clc				clc 								; workspace (1k)
.1e33	69 04		adc #$04			adc 	#4 							; e.g. 4 x 256
.1e35	c5 34		cmp $34				cmp 	highMemory+1
.1e37	b0 0b		bcs $1e44			bcs 	_HLMMemory 					; nope, won't allowit.
.1e39	20 47 1d	jsr $1d47			jsr 	InsertLine 					; insert the line in
.1e3c					_HLMEditDone:
.1e3c	a2 06		ldx #$06		ldx	#6
.1e3e	20 e3 34	jsr $34e3		jsr	mainHandler
.1e41	4c ae 1d	jmp $1dae			jmp 	WarmStartEntry
.1e44					_HLMMemory:
.1e44	a2 22		ldx #$22			ldx 	#ErrorID_Memory
.1e46	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: interaction/interaction.asm

.1e49					interactionHandler:
.1e49	7c 4c 1e	jmp ($1e4c,x)			jmp 	(interactionVectors,x)
.1e4c					interactionVectors:
>1e4c	52 1e					.word _DummyControlHandler ; index 0
>1e4e	62 1c					.word ColdStartEntry       ; index 2
>1e50	ae 1d					.word WarmStartEntry       ; index 4
.1e52					_DummyControlHandler:
.1e52	60		rts			rts

;******  Return to file: basic.asm

.1e53					section_end_interaction:
.1e53					section_start_main:

;******  Processing file: main/main.asm


;******  Processing file: main/commands/compat/readdata.asm

.0cad					dataPtr:
>0cad							.fill 	2
.0caf					dataIndex:
>0caf							.fill 	1
.1e53					CommandRead:
.1e53	a2 00		ldx #$00			ldx 	#0 							; get a reference to a variable in stack:0
.1e55	20 96 2d	jsr $2d96			jsr 	EvaluateReference
.1e58	20 99 1e	jsr $1e99			jsr 	SwapDPCP 					; use the data pointer.
.1e5b	b1 28		lda ($28),y			lda 	(codePtr),y 				; see where it is.
.1e5d	c8		iny				iny
.1e5e	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; if it is on a comma, it is in data.
.1e60	f0 07		beq $1e69			beq 	_CRInData
.1e62	88		dey				dey
.1e63	a9 d9		lda #$d9			lda 	#TKW_DATA 					; scan forward to a DATA statement.
.1e65	aa		tax				tax
.1e66	20 9a 25	jsr $259a			jsr 	ScanForward
.1e69					_CRInData:
.1e69	a2 01		ldx #$01			ldx 	#1 							; evaluate a value at Stack,1
.1e6b	20 3e 2d	jsr $2d3e			jsr 	Evaluate
.1e6e	ca		dex				dex 								; and write the value.
.1e6f	20 ed 20	jsr $20ed			jsr 	WriteValue
.1e72	20 99 1e	jsr $1e99			jsr 	SwapDPCP 					; get the code pointer back.
.1e75	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows ?
.1e77	c8		iny				iny
.1e78	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; if comma, another variable
.1e7a	f0 d7		beq $1e53			beq 	CommandRead
.1e7c	88		dey				dey
.1e7d	60		rts				rts
.1e7e					CommandData:
.1e7e	a9 80		lda #$80			lda 	#TOK_EOL 					; go forward to end of line or colon.
.1e80	a2 ca		ldx #$ca			ldx 	#TKW_COLON
.1e82	20 9a 25	jsr $259a			jsr 	ScanForward
.1e85	88		dey				dey 								; ending on EOL is a scan issue, as it increments
.1e86	60		rts				rts
.1e87					CommandRestore:
.1e87	ad c8 0a	lda $0ac8			lda 	basePage
.1e8a	8d ad 0c	sta $0cad			sta 	dataPtr
.1e8d	ad c9 0a	lda $0ac9			lda 	basePage+1
.1e90	8d ae 0c	sta $0cae			sta 	dataPtr+1
.1e93	a9 03		lda #$03			lda 	#3
.1e95	8d af 0c	sta $0caf			sta 	dataIndex
.1e98	60		rts				rts
.1e99					SwapDPCP:
.1e99	8a		txa				txa
.1e9a	48		pha				pha
.1e9b	98		tya				tya 								; swap Y, DataIndex
.1e9c	ac af 0c	ldy $0caf			ldy 	DataIndex
.1e9f	8d af 0c	sta $0caf			sta 	DataIndex
.1ea2	a5 28		lda $28				lda 	codePtr 					; swap code/dataptr low
.1ea4	ae ad 0c	ldx $0cad			ldx 	dataptr
.1ea7	8d ad 0c	sta $0cad			sta 	dataPtr
.1eaa	86 28		stx $28				stx 	codePtr
.1eac	a5 29		lda $29				lda 	codePtr+1 					; swap code/dataptr high.
.1eae	ae ae 0c	ldx $0cae			ldx 	dataptr+1
.1eb1	8d ae 0c	sta $0cae			sta 	dataPtr+1
.1eb4	86 29		stx $29				stx 	codePtr+1
.1eb6	68		pla				pla
.1eb7	aa		tax				tax
.1eb8	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/compat/transfer.asm

.1eb9					CommandGOSUB:
.1eb9	20 5b 2d	jsr $2d5b			jsr 	EvaluateRootInteger			; get GOSUB line on stack top.
.1ebc	a2 04		ldx #$04			ldx 	#4 							; allocate 4 bytes on stack for GOSUB
.1ebe	a9 47		lda #$47			lda 	#markerGOSUB  				; <marker> <return addr/offset>
.1ec0	20 90 34	jsr $3490			jsr 	RSClaim
.1ec3	a9 01		lda #$01			lda 	#1 							; save position at offset 1.
.1ec5	20 bc 34	jsr $34bc			jsr 	RSSavePosition
.1ec8	a2 00		ldx #$00			ldx 	#0 							; point back at GOSUB line
.1eca	f0 1b		beq $1ee7			beq 	GotoTOS 					; and do a GOTO there.
.1ecc					CommandRETURN:
.1ecc	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.1ece	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.1ed0	c9 47		cmp #$47			cmp 	#markerGOSUB 						; does it match
.1ed2	f0 05		beq $1ed9			beq 	_isok
.1ed4	a2 0e		ldx #$0e			ldx 	#ErrorID_returnErr
.1ed6	20 18 15	jsr $1518		jsr	errorHandler
.1ed9					_isok:
.1ed9	a9 01		lda #$01			lda 	#1
.1edb	20 cf 34	jsr $34cf			jsr 	RSLoadPosition 				; reload the position from offset 1.
.1ede	a9 04		lda #$04			lda 	#4 							; throw 4 bytes from stack.
.1ee0	20 b2 34	jsr $34b2			jsr 	RSFree
.1ee3	60		rts				rts
.1ee4					CommandGOTO:
.1ee4	20 5b 2d	jsr $2d5b			jsr 	EvaluateRootInteger 		; get GOTO line on stack top.
.1ee7					GotoTOS:
.1ee7	20 7e 28	jsr $287e			jsr 	ResetCodeAddress 			; simple search.
.1eea					_GotoSearch:
.1eea	a0 00		ldy #$00			ldy 	#0 							; get offset
.1eec	b1 28		lda ($28),y			lda 	(codePtr),y
.1eee	f0 21		beq $1f11			beq 	_GotoError 					; not found.
.1ef0	c8		iny				iny									; check LSB match
.1ef1	b1 28		lda ($28),y			lda 	(codePtr),y
.1ef3	d5 50		cmp $50,x			cmp 	esInt0,x
.1ef5	d0 07		bne $1efe			bne 	_GotoNext
.1ef7	c8		iny				iny
.1ef8	b1 28		lda ($28),y			lda 	(codePtr),y
.1efa	d5 58		cmp $58,x			cmp 	esInt1,x
.1efc	f0 10		beq $1f0e			beq 	_GotoFound
.1efe					_GotoNext:
.1efe	a0 00		ldy #$00			ldy 	#0 							; go next line
.1f00	b1 28		lda ($28),y			lda 	(codePtr),y
.1f02	18		clc				clc
.1f03	65 28		adc $28				adc 	codePtr
.1f05	85 28		sta $28				sta 	codePtr
.1f07	90 e1		bcc $1eea			bcc 	_GotoSearch
.1f09	e6 29		inc $29				inc 	codePtr+1
.1f0b	4c ea 1e	jmp $1eea			jmp 	_GotoSearch
.1f0e					_GotoFound:
.1f0e	a0 03		ldy #$03			ldy 	#3 							; continue from that line
.1f10	60		rts				rts
.1f11					_GotoError:
.1f11	a2 0c		ldx #$0c			ldx 	#ErrorID_LineNumber
.1f13	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/commands/io/input.asm

=32					MaxInputSize = 32
.0cb0					InputBuffer:
>0cb0							.fill 	MaxInputSize+1
.1f16					Command_Input:
.1f16	b1 28		lda ($28),y			lda 	(codePtr),y 			; see what's next.
.1f18	c8		iny				iny
.1f19	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 				; ignore commas.
.1f1b	f0 f9		beq $1f16			beq 	Command_Input
.1f1d	88		dey				dey 							; undo consume
.1f1e	c9 ca		cmp #$ca			cmp 	#TKW_COLON
.1f20	f0 54		beq $1f76			beq 	_CIExit 				; : or EOL, exit
.1f22	c9 80		cmp #$80			cmp 	#TOK_EOL
.1f24	f0 50		beq $1f76			beq 	_CIExit
.1f26	c9 40		cmp #$40			cmp 	#$40 					; variable ?
.1f28	90 12		bcc $1f3c			bcc 	_CIVariable
.1f2a	c9 85		cmp #$85			cmp 	#TOK_STR 				; if not quoted string syntax error.
.1f2c	d0 43		bne $1f71			bne 	_CISyntax
.1f2e	a2 00		ldx #$00			ldx 	#0
.1f30	20 52 2d	jsr $2d52			jsr 	EvaluateString 			; evaluate and print string
.1f33	20 4f 21	jsr $214f			jsr 	TOSToTemp0
.1f36	20 45 20	jsr $2045			jsr 	PrintString
.1f39	4c 16 1f	jmp $1f16			jmp 	Command_Input
.1f3c					_CIVariable:
.1f3c	a2 00		ldx #$00			ldx 	#0 						; evaluate a reference.
.1f3e	20 96 2d	jsr $2d96			jsr 	EvaluateReference  		; this is where its going
.1f41					_CIRetry:
.1f41	a9 3f		lda #$3f			lda 	#"?"					; print prompt
.1f43	a2 14		ldx #$14		ldx	#20
.1f45	20 f6 14	jsr $14f6		jsr	deviceHandler
.1f48	98		tya				tya
.1f49	48		pha				pha
.1f4a	20 8a 1f	jsr $1f8a			jsr 	InputString 			; input a string (manually)
.1f4d	a2 01		ldx #$01			ldx 	#1
.1f4f	20 77 1f	jsr $1f77			jsr 	BufferToStackX 			; make stack,x ref input string.
.1f52	a5 48		lda $48				lda 	esType 					; if target type numeric
.1f54	29 40		and #$40			and 	#$40 					; then convert to number
.1f56	d0 11		bne $1f69			bne 	_CIWrite
.1f58	a2 01		ldx #$01			ldx 	#1
.1f5a	20 4f 21	jsr $214f			jsr 	TOSToTemp0 				; string address in temp0, goes here.
.1f5d	a9 0a		lda #$0a			lda 	#10
.1f5f	20 63 32	jsr $3263			jsr 	MInt32FromString 		; convert it back from a string.
.1f62	68		pla				pla
.1f63	a8		tay				tay
.1f64	b0 03		bcs $1f69			bcs 	_CIWrite 				; successfully converted.
.1f66	18		clc				clc 							; default fail FP conversion
.1f67	90 d8		bcc $1f41			bcc		_CIRetry				; failed, try again.
.1f69					_CIWrite:
.1f69	a2 00		ldx #$00			ldx 	#0
.1f6b	20 ed 20	jsr $20ed			jsr 	WriteValue
.1f6e	4c 16 1f	jmp $1f16			jmp 	Command_Input
.1f71					_CISyntax:
.1f71	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.1f73	20 18 15	jsr $1518		jsr	errorHandler
.1f76					_CIExit:
.1f76	60		rts				rts
.1f77					BufferToStackX:
.1f77	a9 b0		lda #$b0			lda 	#InputBuffer & $FF
.1f79	95 50		sta $50,x			sta 	esInt0,x
.1f7b	a9 0c		lda #$0c			lda 	#InputBuffer >> 8
.1f7d	95 58		sta $58,x			sta 	esInt1,x
.1f7f	a9 00		lda #$00			lda 	#0
.1f81	95 60		sta $60,x			sta 	esInt2,x
.1f83	95 68		sta $68,x			sta 	esInt3,x
.1f85	a9 40		lda #$40			lda 	#$40
.1f87	95 48		sta $48,x			sta 	esType,x
.1f89	60		rts				rts
.1f8a					InputString:
.1f8a	a9 00		lda #$00			lda 	#0
.1f8c	8d b0 0c	sta $0cb0			sta 	InputBuffer
.1f8f					_InputLoop:
.1f8f	a2 02		ldx #$02		ldx	#2
.1f91	20 f6 14	jsr $14f6		jsr	deviceHandler
.1f94	a2 0a		ldx #$0a		ldx	#10
.1f96	20 f6 14	jsr $14f6		jsr	deviceHandler
.1f99	c9 00		cmp #$00			cmp 	#0
.1f9b	f0 f2		beq $1f8f			beq 	_InputLoop
.1f9d	c9 08		cmp #$08			cmp 	#8
.1f9f	f0 19		beq $1fba			beq 	_InputBackspace
.1fa1	c9 0d		cmp #$0d			cmp 	#13
.1fa3	f0 21		beq $1fc6			beq 	_InputExit
.1fa5	ae b0 0c	ldx $0cb0			ldx 	InputBuffer
.1fa8	e0 20		cpx #$20			cpx 	#MaxInputSize 			; too many characters
.1faa	f0 e3		beq $1f8f			beq 	_InputLoop
.1fac	9d b1 0c	sta $0cb1,x			sta 	InputBuffer+1,x 		; write char
.1faf	ee b0 0c	inc $0cb0			inc 	InputBuffer 			; advance count.
.1fb2					_InputPrintLoop:
.1fb2	a2 14		ldx #$14		ldx	#20
.1fb4	20 f6 14	jsr $14f6		jsr	deviceHandler
.1fb7	4c 8f 1f	jmp $1f8f			jmp	 	_InputLoop
.1fba					_InputBackspace:
.1fba	ad b0 0c	lda $0cb0			lda 	InputBuffer 			; at start
.1fbd	f0 d0		beq $1f8f			beq 	_InputLoop
.1fbf	ce b0 0c	dec $0cb0			dec 	InputBuffer
.1fc2	a9 08		lda #$08			lda 	#8
.1fc4	d0 ec		bne $1fb2			bne 	_InputPrintLoop
.1fc6					_InputExit:
.1fc6	a2 06		ldx #$06		ldx	#6
.1fc8	20 f6 14	jsr $14f6		jsr	deviceHandler
.1fcb	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/io/print.asm

.0cd1					lastPrintToken:
>0cd1							.fill 	1
.1fcc					Command_Print:
.1fcc	a9 00		lda #$00			lda 	#0 							; clear LPT to a non token
.1fce	8d d1 0c	sta $0cd1			sta 	lastPrintToken
.1fd1	88		dey				dey
.1fd2					_PrintLoopSkip:
.1fd2	c8		iny				iny
.1fd3					_PrintLoop:
.1fd3	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows
.1fd5	c9 80		cmp #$80			cmp 	#TOK_EOL  					; done if end of line or colon
.1fd7	f0 5b		beq $2034			beq 	_PrintExit
.1fd9	c9 ca		cmp #$ca			cmp 	#TKW_COLON
.1fdb	f0 57		beq $2034			beq 	_PrintExit
.1fdd	8d d1 0c	sta $0cd1			sta 	lastPrintToken 				; update Last print token, so we check ; and ,
.1fe0	c9 cc		cmp #$cc			cmp 	#TKW_SEMICOLON 				; ignore semicolon
.1fe2	f0 ee		beq $1fd2			beq 	_PrintLoopSkip
.1fe4	c9 cd		cmp #$cd			cmp 	#TKW_QUOTE 					; ' is new line
.1fe6	f0 3c		beq $2024			beq	 	_PrintNewLine
.1fe8	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; , is print tab
.1fea	f0 40		beq $202c			beq 	_PrintTab
.1fec	20 3c 2d	jsr $2d3c			jsr 	EvaluateRoot 				; evaluate something at the root
.1fef	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.1ff1	85 2a		sta $2a				sta 	temp0
.1ff3	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.1ff5	85 2b		sta $2b				sta 	1+(temp0)
.1ff7	a5 48		lda $48				lda 	esType 						; get type
.1ff9	f0 15		beq $2010			beq		_PrintInteger
.1ffb	4a		lsr a				lsr 	a 							; check for floating point
.1ffc	b0 08		bcs $2006			bcs 	_PrintFloat
.1ffe					_PrintString:
.1ffe	a2 00		ldx #$00			ldx 	#0 							; bottom string to temp0
.2000	20 4f 21	jsr $214f			jsr 	TOSToTemp0
.2003	4c 1e 20	jmp $201e			jmp 	_PrintTemp0 				; print no leading space.
.2006					_PrintFloat:
.2006	a9 00		lda #$00			lda 	#0 							; stack level.
.2008	a2 16		ldx #$16		ldx	#22
.200a	20 5d 1c	jsr $1c5d		jsr	floatingpointHandler
.200d	4c 17 20	jmp $2017			jmp 	_PrintSpaceTemp0
.2010					_PrintInteger:
.2010	a9 8a		lda #$8a			lda 	#10+$80 					; base 10 signed
.2012	a2 00		ldx #$00			ldx 	#0 							; bottom stack element
.2014	20 4b 33	jsr $334b			jsr 	MInt32ToString				; convert to text
.2017					_PrintSpaceTemp0:
.2017	a9 20		lda #$20			lda 	#32
.2019	a2 14		ldx #$14		ldx	#20
.201b	20 f6 14	jsr $14f6		jsr	deviceHandler
.201e					_PrintTemp0:
.201e	20 45 20	jsr $2045			jsr 	PrintString
.2021	4c d3 1f	jmp $1fd3			jmp 	_PrintLoop
.2024					_PrintNewLine:
.2024	a2 06		ldx #$06		ldx	#6
.2026	20 f6 14	jsr $14f6		jsr	deviceHandler
.2029	4c d2 1f	jmp $1fd2			jmp 	_PrintLoopSkip
.202c					_PrintTab:
.202c	a2 1a		ldx #$1a		ldx	#26
.202e	20 f6 14	jsr $14f6		jsr	deviceHandler
.2031	4c d2 1f	jmp $1fd2			jmp 	_PrintLoopSkip
.2034					_PrintExit:
.2034	ad d1 0c	lda $0cd1			lda		lastPrintToken 				; check last token
.2037	c9 cc		cmp #$cc			cmp 	#TKW_SEMICOLON 				; if , or ; do not print NL
.2039	f0 09		beq $2044			beq 	_PrintExit2
.203b	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.203d	f0 05		beq $2044			beq 	_PrintExit2
.203f	a2 06		ldx #$06		ldx	#6
.2041	20 f6 14	jsr $14f6		jsr	deviceHandler
.2044					_PrintExit2:
.2044	60		rts				rts
.2045					PrintString:
.2045	8a		txa				txa
.2046	48		pha				pha
.2047	98		tya				tya
.2048	48		pha				pha
.2049	a0 00		ldy #$00			ldy 	#0							; get length
.204b	b1 2a		lda ($2a),y			lda 	(temp0),y
.204d	aa		tax				tax 								; into X
.204e	e0 00		cpx #$00	_PSLoop:cpx 	#0 							; finished ?
.2050	f0 10		beq $2062			beq 	_PSExit
.2052	ca		dex				dex
.2053	8a		txa				txa
.2054	48		pha				pha
.2055	c8		iny				iny
.2056	b1 2a		lda ($2a),y			lda 	(temp0),y
.2058	a2 14		ldx #$14		ldx	#20
.205a	20 f6 14	jsr $14f6		jsr	deviceHandler
.205d	68		pla				pla
.205e	aa		tax				tax
.205f	4c 4e 20	jmp $204e			jmp 	_PSLoop
.2062					_PSExit:
.2062	68		pla				pla
.2063	a8		tay				tay
.2064	68		pla				pla
.2065	aa		tax				tax
.2066	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/io/text.asm

.2067					Command_CLS:
.2067	a2 04		ldx #$04		ldx	#4
.2069	20 f6 14	jsr $14f6		jsr	deviceHandler
.206c	60		rts				rts
.206d					Command_Ink:
.206d	a2 00		ldx #$00			ldx 	#0
.206f	20 65 2d	jsr $2d65			jsr 	EvaluateSmallInteger
.2072	a2 08		ldx #$08		ldx	#8
.2074	20 f6 14	jsr $14f6		jsr	deviceHandler
.2077	60		rts				rts
.2078					Command_Paper:
.2078	a2 00		ldx #$00			ldx 	#0
.207a	20 65 2d	jsr $2d65			jsr 	EvaluateSmallInteger
.207d	a2 12		ldx #$12		ldx	#18
.207f	20 f6 14	jsr $14f6		jsr	deviceHandler
.2082	60		rts				rts
.2083					Command_Locate:
.2083	a2 00		ldx #$00			ldx 	#0
.2085	20 65 2d	jsr $2d65			jsr 	EvaluateSmallInteger
.2088	20 75 34	jsr $3475			jsr 	CheckComma
.208b	e8		inx				inx
.208c	20 65 2d	jsr $2d65			jsr 	EvaluateSmallInteger
.208f	98		tya				tya
.2090	48		pha				pha
.2091	a4 51		ldy $51				ldy 	esInt0+1
.2093	a5 50		lda $50				lda 	esInt0
.2095	a2 10		ldx #$10		ldx	#16
.2097	20 f6 14	jsr $14f6		jsr	deviceHandler
.209a	68		pla				pla
.209b	a8		tay				tay
.209c	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/io/vdu.asm

.209d					Command_VDU:
.209d	20 5b 2d	jsr $2d5b			jsr 	EvaluateRootInteger 			; get integer at root.
.20a0	a5 50		lda $50				lda 	esInt0
.20a2	a2 14		ldx #$14		ldx	#20
.20a4	20 f6 14	jsr $14f6		jsr	deviceHandler
.20a7					_CVNext:
.20a7	b1 28		lda ($28),y			lda 	(codePtr),y 					; what follows ?
.20a9	c8		iny				iny
.20aa	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 						; comma, do again
.20ac	f0 ef		beq $209d			beq 	Command_VDU
.20ae	c9 cc		cmp #$cc			cmp 	#TKW_SEMICOLON 					; semicolon, print MSB
.20b0	d0 0a		bne $20bc			bne 	_CVExit
.20b2	a5 58		lda $58				lda 	esInt1
.20b4	a2 14		ldx #$14		ldx	#20
.20b6	20 f6 14	jsr $14f6		jsr	deviceHandler
.20b9	4c a7 20	jmp $20a7			jmp 	_CVNext
.20bc	88		dey		_CVExit:dey
.20bd	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/link.asm


;******  Return to file: main/main.asm


;******  Processing file: main/commands/misc/assert.asm

.20be					Command_Assert:
.20be	20 5b 2d	jsr $2d5b			jsr 	EvaluateRootInteger 		; what is being asserted.
.20c1	20 1c 34	jsr $341c			jsr 	MInt32Zero 					; is it true ?
.20c4	f0 01		beq $20c7			beq 	_CAError
.20c6	60		rts				rts
.20c7					_CAError:
.20c7	a2 04		ldx #$04			ldx 	#ErrorID_Assert
.20c9	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/commands/misc/dim.asm

.20cc					Command_Dim:
.20cc	a2 04		ldx #$04		ldx	#4
.20ce	20 97 43	jsr $4397		jsr	variableHandler
.20d1	b1 28		lda ($28),y			lda 	(codePtr),y 				; see what follows.
.20d3	c8		iny				iny
.20d4	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; comma follows, go back and do next
.20d6	f0 f4		beq $20cc			beq 	Command_Dim
.20d8	88		dey				dey 								; unpick get
.20d9	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/misc/let.asm

.20da					CommandLet:
.20da	a2 00		ldx #$00			ldx 	#0  						; get address to write.
.20dc	20 96 2d	jsr $2d96			jsr 	EvaluateReference
.20df	a9 8d		lda #$8d			lda 	#TKW_EQUAL 					; check for equals
.20e1	20 5d 34	jsr $345d			jsr 	CheckToken
.20e4	e8		inx				inx 								; do RHS
.20e5	20 3e 2d	jsr $2d3e			jsr 	Evaluate 					; evaluate and dereference
.20e8	ca		dex				dex
.20e9	20 ed 20	jsr $20ed			jsr 	WriteValue 					; write it out
.20ec	60		rts				rts
.20ed					WriteValue:
.20ed	98		tya				tya
.20ee	48		pha				pha
.20ef	20 4f 21	jsr $214f			jsr 	TOSToTemp0 					; set temp0 to point to target address.
.20f2	b5 48		lda $48,x			lda 	esType,x 					; check the string flags match
.20f4	55 49		eor $49,x			eor 	esType+1,x 					; one string, one number causes an error.
.20f6	29 40		and #$40			and 	#$40
.20f8	d0 50		bne $214a			bne		_WVType
.20fa	a0 01		ldy #$01			ldy 	#1 							; for string, copy 0 and 1.
.20fc	b5 48		lda $48,x			lda 	esType,x 					; check for string assignment
.20fe	29 40		and #$40			and 	#$40
.2100	d0 1f		bne $2121			bne 	_WVCopyString
.2102	b5 48		lda $48,x			lda 	esType,x 					; check both are integer.
.2104	15 49		ora $49,x			ora 	esType+1,x
.2106	4a		lsr a				lsr 	a
.2107	90 22		bcc $212b			bcc 	_WVCopyData4 				; copy 4 data bytes.
.2109	b5 48		lda $48,x			lda 	esType,x
.210b	4a		lsr a				lsr 	a
.210c	90 3c		bcc $214a			bcc 	_WVType
.210e	e8		inx				inx 								; force the value being written to be a float.
.210f	20 a0 29	jsr $29a0			jsr 	BPMakeFloat
.2112	ca		dex				dex
.2113	20 4f 21	jsr $214f			jsr 	TOSToTemp0 					; set Temp0 to write address
.2116	e8		inx				inx
.2117	8a		txa				txa
.2118	a2 22		ldx #$22		ldx	#34
.211a	20 5d 1c	jsr $1c5d		jsr	floatingpointHandler
.211d	aa		tax				tax
.211e	4c 47 21	jmp $2147			jmp 	_WVCopyExit
.2121					_WVCopyString:
.2121	8a		txa				txa
.2122	a2 10		ldx #$10		ldx	#16
.2124	20 a0 37	jsr $37a0		jsr	stringHandler
.2127	aa		tax				tax
.2128	4c 47 21	jmp $2147			jmp 	_WVCopyExit
.212b					_WVCopyData4:
.212b	b5 48		lda $48,x			lda 	esType,x 					; is the int ref a byte ref ?
.212d	29 20		and #$20			and 	#$20 						; (e.g. is bit 5 set)
.212f	d0 10		bne $2141			bne 	_WVCopyData1
.2131	a0 03		ldy #$03			ldy 	#3
.2133	b5 69		lda $69,x			lda 	esInt3+1,x
.2135	91 2a		sta ($2a),y			sta 	(temp0),y
.2137	88		dey				dey
.2138	b5 61		lda $61,x			lda 	esInt2+1,x
.213a	91 2a		sta ($2a),y			sta 	(temp0),y
.213c	88		dey				dey
.213d	b5 59		lda $59,x			lda 	esInt1+1,x
.213f	91 2a		sta ($2a),y			sta 	(temp0),y
.2141					_WVCopyData1:
.2141	a0 00		ldy #$00			ldy 	#0
.2143	b5 51		lda $51,x			lda 	esInt0+1,x
.2145	91 2a		sta ($2a),y			sta 	(temp0),y
.2147					_WVCopyExit:
.2147	68		pla				pla
.2148	a8		tay				tay
.2149	60		rts				rts
.214a					_WVType:
.214a	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.214c	20 18 15	jsr $1518		jsr	errorHandler
.214f					TOSToTemp0:
.214f	b5 50		lda $50,x			lda 	esInt0,x
.2151	85 2a		sta $2a				sta 	temp0
.2153	b5 58		lda $58,x			lda 	esInt1,x
.2155	85 2b		sta $2b				sta 	temp0+1
.2157	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/misc/poke.asm

.2158					Command_Poke:
.2158	a9 01		lda #$01			lda 	#1
.215a	d0 06		bne $2162			bne 	PokeGeneral
.215c					Command_Doke:
.215c	a9 02		lda #$02			lda 	#2
.215e	d0 02		bne $2162			bne 	PokeGeneral
.2160					Command_Loke:
.2160	a9 03		lda #$03			lda 	#3
.2162					PokeGeneral:
.2162	48		pha				pha 								; save id (PDL = 123)
.2163	20 5b 2d	jsr $2d5b			jsr 	EvaluateRootInteger 		; target address
.2166	20 75 34	jsr $3475			jsr	 	CheckComma
.2169	e8		inx				inx
.216a	20 5d 2d	jsr $2d5d			jsr 	EvaluateInteger 			; what value to POKE ?
.216d	ca		dex				dex
.216e	20 4f 21	jsr $214f			jsr 	TOSToTemp0 					; temp0 points to the target address
.2171	84 32		sty $32				sty 	tempShort 					; save Y
.2173	68		pla				pla 								; get copy type (1-3) and dispatch
.2174	aa		tax				tax
.2175	ca		dex				dex
.2176	f0 14		beq $218c			beq 	_Poke1
.2178	ca		dex				dex
.2179	f0 0b		beq $2186			beq 	_Poke2
.217b	a0 03		ldy #$03			ldy 	#3							; put 4 bytes
.217d	a5 69		lda $69				lda 	esInt3+1
.217f	91 2a		sta ($2a),y			sta 	(temp0),y
.2181	88		dey				dey
.2182	a5 61		lda $61				lda 	esInt2+1
.2184	91 2a		sta ($2a),y			sta 	(temp0),y
.2186					_Poke2:
.2186	a0 01		ldy #$01			ldy 	#1
.2188	a5 59		lda $59				lda 	esInt1+1
.218a	91 2a		sta ($2a),y			sta 	(temp0),y
.218c					_Poke1:
.218c	a0 00		ldy #$00			ldy 	#0
.218e	a5 51		lda $51				lda 	esInt0+1
.2190	91 2a		sta ($2a),y			sta 	(temp0),y
.2192	a4 32		ldy $32				ldy 	tempShort 					; restore Y and exit
.2194	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/misc/rem.asm

.2195					Command_Rem:
.2195					Command_Rem2:
.2195	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows
.2197	c9 85		cmp #$85			cmp 	#TOK_STR 					; if it is a string then skip it.
.2199	d0 06		bne $21a1			bne 	_CRNotString
.219b	c8		iny				iny
.219c	98		tya				tya
.219d	38		sec				sec
.219e	71 28		adc ($28),y			adc 	(codePtr),y 				; get string size, add to Y, +1 for the length
.21a0	a8		tay				tay
.21a1					_CRNotString:
.21a1	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/misc/stopend.asm

.21a2					CommandStop:
.21a2	a2 06		ldx #$06			ldx 	#ErrorID_Stop
.21a4	20 18 15	jsr $1518		jsr	errorHandler
.21a7					CommandEnd:
.21a7	4c de 34	jmp $34de			jmp 	WarmStart
.21aa					CommandXemu:
.21aa	4c ff ff	jmp $ffff			jmp 	$FFFF 						; fudge to crash out of emulator
.21ad					AdvanceNextLine:
.21ad	a0 00		ldy #$00			ldy 	#0 							; get offset
.21af	b1 28		lda ($28),y			lda 	(codePtr),y
.21b1	18		clc				clc 								; add to codePtr
.21b2	65 28		adc $28				adc 	codePtr
.21b4	85 28		sta $28				sta 	codePtr
.21b6	90 02		bcc $21ba			bcc 	_ANLNoCarry
.21b8	e6 29		inc $29				inc 	codePtr+1
.21ba					_ANLNoCarry:
.21ba	b1 28		lda ($28),y			lda 	(codePtr),y 				; if end of program (or was just stand alone.
.21bc	f0 e9		beq $21a7			beq 	CommandEnd 					; execute END
.21be	a0 03		ldy #$03			ldy 	#3 							; start of tokens on line.
.21c0	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/for.asm

.21c1					Command_FOR:
.21c1	a9 46		lda #$46			lda 	#markerFOR 					; allocate the space and set the marker
.21c3	a2 0b		ldx #$0b			ldx 	#11
.21c5	20 90 34	jsr $3490			jsr 	RSClaim
.21c8	20 da 20	jsr $20da			jsr 	CommandLET 					; do the same as LET FOR [a = 4]
.21cb	a5 48		lda $48				lda 	esType 						; check type should be integer reference.
.21cd	c9 80		cmp #$80			cmp 	#$80 						; we do not do FOR floats.
.21cf	d0 4c		bne $221d			bne 	_CFType
.21d1	a9 ce		lda #$ce			lda 	#TKW_TO 					; check TO present.
.21d3	20 5d 34	jsr $345d			jsr 	CheckToken
.21d6	a2 01		ldx #$01			ldx 	#1 							; keep the variable address in stack 0
.21d8	20 5d 2d	jsr $2d5d			jsr 	EvaluateInteger				; get terminal value in stack 1
.21db	98		tya				tya
.21dc	48		pha				pha
.21dd	a0 04		ldy #$04			ldy 	#4
.21df	a5 50		lda $50				lda		esInt0 						; copy the address of the index variable into 4 and 5
.21e1	91 37		sta ($37),y			sta 	(rsPointer),y
.21e3	c8		iny				iny
.21e4	a5 58		lda $58				lda		esInt1
.21e6	91 37		sta ($37),y			sta 	(rsPointer),y
.21e8	c8		iny				iny
.21e9	a9 01		lda #$01			lda 	#1  						; the default step in 6, (-128 .. 127 only)
.21eb	91 37		sta ($37),y			sta 	(rsPointer),y
.21ed	c8		iny				iny
.21ee	a5 51		lda $51				lda		esInt0+1 					; terminal value in 7 to 11.
.21f0	91 37		sta ($37),y			sta 	(rsPointer),y
.21f2	c8		iny				iny
.21f3	a5 59		lda $59				lda		esInt1+1
.21f5	91 37		sta ($37),y			sta 	(rsPointer),y
.21f7	c8		iny				iny
.21f8	a5 61		lda $61				lda		esInt2+1
.21fa	91 37		sta ($37),y			sta 	(rsPointer),y
.21fc	c8		iny				iny
.21fd	a5 69		lda $69				lda		esInt3+1
.21ff	91 37		sta ($37),y			sta 	(rsPointer),y
.2201	68		pla				pla
.2202	a8		tay				tay
.2203	b1 28		lda ($28),y			lda 	(codePtr),y 				; followed by STEP.
.2205	c9 cf		cmp #$cf			cmp 	#TKW_STEP
.2207	d0 0e		bne $2217			bne 	_CFDone
.2209	c8		iny				iny									; skip over step.
.220a	20 5d 2d	jsr $2d5d			jsr 	EvaluateInteger 			; get step
.220d	98		tya				tya
.220e	48		pha				pha
.220f	b5 50		lda $50,x			lda 	esInt0,x 					; copy it into step (bit lazy here)
.2211	a0 06		ldy #$06			ldy 	#6
.2213	91 37		sta ($37),y			sta 	(rsPointer),y
.2215	68		pla				pla
.2216	a8		tay				tay
.2217					_CFDone:
.2217	a9 01		lda #$01			lda 	#1
.2219	20 bc 34	jsr $34bc			jsr 	RSSavePosition 				; save position.
.221c	60		rts				rts
.221d					_CFType:
.221d	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.221f	20 18 15	jsr $1518		jsr	errorHandler
.2222					Command_NEXT:
.2222	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.2224	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.2226	c9 46		cmp #$46			cmp 	#markerFOR 						; does it match
.2228	f0 05		beq $222f			beq 	_isok
.222a	a2 10		ldx #$10			ldx 	#ErrorID_nextErr
.222c	20 18 15	jsr $1518		jsr	errorHandler
.222f					_isok:
.222f	b1 28		lda ($28),y			lda 	(codePtr),y 				; is it NEXT <index>
.2231	c9 40		cmp #$40			cmp 	#$40 						; e.g. a variable follows 00-3F
.2233	b0 18		bcs $224d			bcs 	_CNNoIndex
.2235	a2 00		ldx #$00			ldx 	#0 							; start on stack
.2237	20 96 2d	jsr $2d96			jsr 	EvaluateReference 			; this is the variable/parameter to localise.
.223a	98		tya				tya
.223b	48		pha				pha
.223c	a0 04		ldy #$04			ldy 	#4 							; check same variable as that stored at +4,+5
.223e	b1 37		lda ($37),y			lda 	(rsPointer),y
.2240	d5 50		cmp $50,x			cmp 	esInt0,x
.2242	d0 76		bne $22ba			bne 	_CNBadIndex
.2244	c8		iny				iny
.2245	b1 37		lda ($37),y			lda 	(rsPointer),y
.2247	d5 58		cmp $58,x			cmp 	esInt1,x
.2249	d0 6f		bne $22ba			bne 	_CNBadIndex
.224b	68		pla				pla
.224c	a8		tay				tay
.224d					_CNNoIndex:
.224d	98		tya				tya
.224e	48		pha				pha
.224f	a0 04		ldy #$04			ldy 	#4 							; make temp0 point to the index
.2251	b1 37		lda ($37),y			lda 	(rsPointer),y
.2253	85 2a		sta $2a				sta 	temp0
.2255	c8		iny				iny
.2256	b1 37		lda ($37),y			lda 	(rsPointer),y
.2258	85 2b		sta $2b				sta 	temp0+1
.225a	c8		iny				iny
.225b	a2 00		ldx #$00			ldx 	#0 							; X is the sign extend part of the step.
.225d	b1 37		lda ($37),y			lda 	(rsPointer),y 				; get the step.
.225f	85 2f		sta $2f				sta 	temp2+1 					; save for later.
.2261	10 01		bpl $2264			bpl 	_CNSignX
.2263	ca		dex				dex  								; X = $FF
.2264					_CNSignX:
.2264	18		clc				clc 								; add to the LSB
.2265	a0 00		ldy #$00			ldy 	#0
.2267	71 2a		adc ($2a),y			adc 	(temp0),y
.2269	91 2a		sta ($2a),y			sta 	(temp0),y
.226b					_CNPropogate:
.226b	c8		iny				iny  								; add the sign extended in X to the rest.
.226c	8a		txa				txa
.226d	71 2a		adc ($2a),y			adc 	(temp0),y
.226f	91 2a		sta ($2a),y			sta 	(temp0),y
.2271	c8		iny				iny
.2272	8a		txa				txa
.2273	71 2a		adc ($2a),y			adc 	(temp0),y
.2275	91 2a		sta ($2a),y			sta 	(temp0),y
.2277	c8		iny				iny
.2278	8a		txa				txa
.2279	71 2a		adc ($2a),y			adc 	(temp0),y
.227b	91 2a		sta ($2a),y			sta 	(temp0),y
.227d	18		clc				clc 								; point temp1 to the terminal value stored in the stack.
.227e	a5 37		lda $37				lda 	rsPointer
.2280	69 07		adc #$07			adc 	#7
.2282	85 2c		sta $2c				sta 	temp1
.2284	a9 00		lda #$00			lda 	#0
.2286	85 2e		sta $2e				sta 	temp2 						; clear temp2, which is the OR of all the subtractions.
.2288	a8		tay				tay 								; and clear the Y register again.
.2289	65 38		adc $38				adc 	rsPointer+1
.228b	85 2d		sta $2d				sta 	temp1+1
.228d	38		sec				sec 								; calculate current - limit oring interim values.
.228e	20 c6 22	jsr $22c6			jsr 	_CNCompare 					; each of these does a byte.
.2291	20 c6 22	jsr $22c6			jsr 	_CNCompare 					; we calculate the OR of all these subtractions.
.2294	20 c6 22	jsr $22c6			jsr 	_CNCompare 					; and the carry of the subtraction.
.2297	20 c6 22	jsr $22c6			jsr 	_CNCompare
.229a	50 02		bvc $229e			bvc 	_CNNoOverflow 				; converts to a signed comparison on the sign bit.
.229c	49 80		eor #$80			eor 	#$80
.229e					_CNNoOverflow:
.229e	a4 2f		ldy $2f				ldy 	temp2+1						; get step back
.22a0	30 1d		bmi $22bf			bmi 	_CNCheckDownto
.22a2	c9 00		cmp #$00			cmp 	#0
.22a4	30 0c		bmi $22b2			bmi 	_CNLoopRound 				; loop round if < =
.22a6	a5 2e		lda $2e				lda 	temp2
.22a8	f0 08		beq $22b2			beq 	_CNLoopRound
.22aa					_CNLoopExit:
.22aa	68		pla				pla
.22ab	a8		tay				tay
.22ac	a9 0b		lda #$0b			lda 	#11
.22ae	20 b2 34	jsr $34b2			jsr 	RSFree
.22b1	60		rts				rts
.22b2					_CNLoopRound:
.22b2	68		pla				pla
.22b3	a8		tay				tay
.22b4	a9 01		lda #$01			lda 	#1
.22b6	20 cf 34	jsr $34cf			jsr 	RSLoadPosition				; go back to the loop top
.22b9	60		rts				rts
.22ba					_CNBadIndex:
.22ba	a2 13		ldx #$13			ldx 	#ErrorID_BadIndex
.22bc	20 18 15	jsr $1518		jsr	errorHandler
.22bf					_CNCheckDownto:
.22bf	c9 00		cmp #$00			cmp 	#0
.22c1	10 ef		bpl $22b2			bpl 	_CNLoopRound
.22c3	4c aa 22	jmp $22aa			jmp 	_CNLoopExit
.22c6					_CNCompare:
.22c6	b1 2a		lda ($2a),y			lda 	(temp0),y 					; do the subtraction - compare don't care about answer
.22c8	f1 2c		sbc ($2c),y			sbc 	(temp1),y
.22ca	05 2e		ora $2e				ora 	temp2 						; Or into temp2 (does not affect carry)
.22cc	85 2e		sta $2e				sta 	temp2
.22ce	c8		iny				iny
.22cf	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/if.asm

.22d0					CommandIf:
.22d0	20 5b 2d	jsr $2d5b			jsr 	EvaluateRootInteger 		; get what's being tested.
.22d3	b1 28		lda ($28),y			lda 	(codePtr),y 				; check for IF .. THEN or IF .. GOTO which are single lines.
.22d5	c9 91		cmp #$91			cmp 	#TKW_GOTO
.22d7	f0 04		beq $22dd			beq 	_IfSimple
.22d9	c9 a1		cmp #$a1			cmp 	#TKW_THEN
.22db	d0 1b		bne $22f8			bne 	_IfComplex
.22dd					_IfSimple:
.22dd	20 1c 34	jsr $341c			jsr 	MInt32Zero					; check if TOS zero
.22e0	f0 10		beq $22f2			beq 	_IfEOL 						; go to next line.
.22e2	b1 28		lda ($28),y			lda 	(codePtr),y 				; get and skip token.
.22e4	c8		iny				iny
.22e5	c9 91		cmp #$91			cmp 	#TKW_GOTO 					; was it if GOTO ?
.22e7	f0 0c		beq $22f5			beq 	_IfGoto 					; do the Goto code
.22e9	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows the THEN ?
.22eb	29 c0		and #$c0			and 	#$C0 						; check $40-$7F
.22ed	c9 40		cmp #$40			cmp 	#$40 						; e.g. number IF x = 0 THEN 170
.22ef	f0 04		beq $22f5			beq 	_IfGoto
.22f1	60		rts				rts 								; else continue on this line.
.22f2					_IfEOL:
.22f2	4c ad 21	jmp $21ad			jmp 	AdvanceNextLine 			; go to next line
.22f5					_IfGoto:
.22f5	4c e4 1e	jmp $1ee4			jmp 	CommandGoto
.22f8					_IfComplex:
.22f8	20 1c 34	jsr $341c			jsr 	MInt32Zero 					; is it true ?
.22fb	f0 01		beq $22fe			beq 	_IFSkip 					; if non-zero then skip to ELSE/ENDIF
.22fd	60		rts				rts 								; else continue.
.22fe					_IFSkip:
.22fe	a9 d6		lda #$d6			lda	 	#TKW_ELSE 					; test failed, go to ELSE or ENDIF whichever comes first.
.2300	a2 a2		ldx #$a2			ldx 	#TKW_ENDIF
.2302	4c 9a 25	jmp $259a			jmp		ScanForward
.2305					Command_ELSE:
.2305	a2 a2		ldx #$a2			ldx 	#TKW_ENDIF
.2307	8a		txa				txa
.2308	4c 9a 25	jmp $259a			jmp		ScanForward
.230b					Command_ENDIF:
.230b	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/local.asm

.0cd2					storeSize:
>0cd2							.fill 	1
.230c					CommandLocal:
.230c	a2 00		ldx #$00			ldx 	#0
.230e	20 2a 23	jsr $232a			jsr 	LocaliseVariable 			; localise one.
.2311					_CLCheckNext:
.2311	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows ?
.2313	c8		iny				iny
.2314	c9 8d		cmp #$8d			cmp 	#TKW_EQUAL 					; something local "x = 2" ?
.2316	f0 06		beq $231e			beq 	_CLAssignment
.2318	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; comma try again.
.231a	f0 f0		beq $230c			beq 	CommandLocal
.231c	88		dey				dey
.231d	60		rts				rts
.231e					_CLAssignment:
.231e	a2 01		ldx #$01			ldx 	#1
.2320	20 3e 2d	jsr $2d3e			jsr 	Evaluate 					; evaluate RHS
.2323	ca		dex				dex
.2324	20 ed 20	jsr $20ed			jsr 	WriteValue
.2327	4c 11 23	jmp $2311			jmp 	_CLCheckNext
.232a					LocaliseVariable:
.232a	b1 28		lda ($28),y			lda 	(codePtr),y 				; check it's a variable.
.232c	c9 40		cmp #$40			cmp 	#$40
.232e	b0 67		bcs $2397			bcs 	_LVSyntax
.2330	8a		txa				txa 								; get the address of that variable.
.2331	a2 02		ldx #$02		ldx	#2
.2333	20 97 43	jsr $4397		jsr	variableHandler
.2336	aa		tax				tax
.2337	8a		txa				txa
.2338	48		pha				pha
.2339	98		tya				tya
.233a	48		pha				pha
.233b	20 4f 21	jsr $214f			jsr 	TOSToTemp0 					; the address of the variable is now in temp0.
.233e	b5 48		lda $48,x			lda 	esType,x 					; get the type
.2340	0a		asl a				asl 	a
.2341	10 16		bpl $2359			bpl 	_LVPushNumber
.2343	a0 00		ldy #$00			ldy 	#0 							; put address of data in temp1
.2345	b1 2a		lda ($2a),y			lda 	(temp0),y
.2347	c8		iny				iny
.2348	85 2c		sta $2c				sta 	temp1
.234a	b1 2a		lda ($2a),y			lda 	(temp0),y
.234c	85 2d		sta $2d				sta 	temp1+1
.234e	a0 00		ldy #$00			ldy 	#0 	 						; get length
.2350	b1 2c		lda ($2c),y			lda 	(temp1),y
.2352	aa		tax				tax 								; into X
.2353	e8		inx				inx 								; +1 for length.
.2354	a9 24		lda #$24			lda 	#markerString
.2356	4c 6e 23	jmp $236e			jmp 	_LVWriteFrame
.2359					_LVPushNumber:
.2359	a5 2a		lda $2a				lda 	temp0 						; storage address and data source are the same
.235b	85 2c		sta $2c				sta 	temp1
.235d	a5 2b		lda $2b				lda 	temp0+1
.235f	85 2d		sta $2d				sta 	temp1+1
.2361	b5 48		lda $48,x			lda 	esType,x 					; put float flag into carry.
.2363	4a		lsr a				lsr 	a
.2364	a9 25		lda #$25			lda 	#markerInt 					; get marker and size.
.2366	a2 04		ldx #$04			ldx 	#VarISize
.2368	90 04		bcc $236e			bcc 	_LVIsInteger
.236a	a9 23		lda #$23			lda 	#markerFloat
.236c	a2 06		ldx #$06			ldx 	#VarFSize
.236e					_LVIsInteger:
.236e					_LVWriteFrame:
.236e	8e d2 0c	stx $0cd2			stx 	storeSize 					; number of bytes to copy from (temp0)
.2371	e8		inx				inx 								; allocate 3 bytes, 2 for the address, 1 for the marker.
.2372	e8		inx				inx
.2373	e8		inx				inx
.2374	20 90 34	jsr $3490			jsr 	RSClaim 					; create the stack frame.
.2377	a5 2a		lda $2a				lda 	temp0 						; copy the target address to slots 1 & 2
.2379	a0 01		ldy #$01			ldy 	#1
.237b	91 37		sta ($37),y			sta 	(rsPointer),y
.237d	c8		iny				iny
.237e	a5 2b		lda $2b				lda 	temp0+1
.2380	91 37		sta ($37),y			sta 	(rsPointer),y
.2382	a0 00		ldy #$00			ldy 	#0
.2384					_LVCopyData:
.2384	b1 2c		lda ($2c),y			lda 	(temp1),y 					; get data from source, temp1
.2386	c8		iny				iny 								; write allowing for the header bit.
.2387	c8		iny				iny
.2388	c8		iny				iny
.2389	91 37		sta ($37),y			sta 	(rsPointer),y
.238b	88		dey				dey
.238c	88		dey				dey
.238d	ce d2 0c	dec $0cd2			dec 	storeSize 					; do it storesize times
.2390	d0 f2		bne $2384			bne 	_LVCopyData
.2392	68		pla				pla
.2393	a8		tay				tay
.2394	68		pla				pla
.2395	aa		tax				tax
.2396	60		rts				rts
.2397					_LVSyntax:
.2397	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.2399	20 18 15	jsr $1518		jsr	errorHandler
.239c					RestoreLocals:
.239c	a2 00		ldx #$00			ldx 	#0
.239e	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.23a0	c9 40		cmp #$40			cmp	 	#64
.23a2	90 01		bcc $23a5			bcc 	_RLocal
.23a4	60		rts				rts
.23a5					_RLocal:
.23a5	8a		txa				txa
.23a6	48		pha				pha
.23a7	98		tya				tya
.23a8	48		pha				pha
.23a9	a0 01		ldy #$01			ldy 	#1 							; copy target address to temp0
.23ab	b1 37		lda ($37),y			lda 	(rsPointer),y
.23ad	85 2a		sta $2a				sta 	temp0
.23af	c8		iny				iny
.23b0	b1 37		lda ($37),y			lda 	(rsPointer),y
.23b2	85 2b		sta $2b				sta 	temp0+1
.23b4	a0 00		ldy #$00			ldy 	#0 							; get type back.
.23b6	b1 37		lda ($37),y			lda 	(rsPointer),y
.23b8	c9 24		cmp #$24			cmp 	#markerString 				; string is ... different :)
.23ba	f0 28		beq $23e4			beq 	_RString
.23bc	a2 04		ldx #$04			ldx		#VARISize 					; size integer
.23be	c9 25		cmp #$25			cmp 	#markerInt
.23c0	f0 02		beq $23c4			beq 	_RIsInteger
.23c2	a2 06		ldx #$06			ldx 	#VARFSize 					; size float
.23c4					_RIsInteger:
.23c4	8a		txa				txa
.23c5	48		pha				pha
.23c6	a0 03		ldy #$03			ldy 	#3							; start size to copy back from pointer.
.23c8					_RCopyBack:
.23c8	b1 37		lda ($37),y			lda 	(rsPointer),y
.23ca	88		dey				dey
.23cb	88		dey				dey
.23cc	88		dey				dey
.23cd	91 2a		sta ($2a),y			sta 	(temp0),y
.23cf	c8		iny				iny
.23d0	c8		iny				iny
.23d1	c8		iny				iny
.23d2	c8		iny				iny
.23d3	ca		dex				dex
.23d4	d0 f2		bne $23c8			bne 	_RCopyBack
.23d6	68		pla				pla 								; get size add 3
.23d7	18		clc				clc
.23d8	69 03		adc #$03			adc 	#3 							; (2 for address one for marker)
.23da					_RRestoreAAndLoop:
.23da	20 b2 34	jsr $34b2			jsr 	RSFree
.23dd	68		pla				pla
.23de	a8		tay				tay
.23df	68		pla				pla
.23e0	aa		tax				tax
.23e1	4c 9c 23	jmp $239c			jmp 	RestoreLocals 				; go see if there are any more locals.
.23e4					_RString:
.23e4	a2 00		ldx #$00			ldx 	#0
.23e6	a0 01		ldy #$01			ldy 	#1 							; set up for a string write.
.23e8	b1 37		lda ($37),y			lda 	(rsPointer),y
.23ea	95 50		sta $50,x			sta 	esInt0,x
.23ec	c8		iny				iny
.23ed	b1 37		lda ($37),y			lda 	(rsPointer),y
.23ef	95 58		sta $58,x			sta 	esInt1,x
.23f1	18		clc				clc
.23f2	a5 37		lda $37				lda 	rsPointer
.23f4	69 03		adc #$03			adc 	#3
.23f6	95 51		sta $51,x			sta 	esInt0+1,x
.23f8	a5 38		lda $38				lda 	rsPointer+1
.23fa	69 00		adc #$00			adc 	#0
.23fc	95 59		sta $59,x			sta 	esInt1+1,x
.23fe	8a		txa				txa
.23ff	a2 10		ldx #$10		ldx	#16
.2401	20 a0 37	jsr $37a0		jsr	stringHandler
.2404	a0 03		ldy #$03			ldy 	#3 							; get string length
.2406	b1 37		lda ($37),y			lda 	(rsPointer),y
.2408	18		clc				clc
.2409	69 04		adc #$04			adc 	#4 							; add 4 (pointer, marker, length) to restore.
.240b	4c da 23	jmp $23da			jmp 	_RRestoreAAndLoop

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/proc.asm

.0cd3					paramCount:
>0cd3							.fill 	1
.240e					CallProc:
.240e	20 96 24	jsr $2496			jsr 	FindProcedure 				; find procedure, put in temp0. A contains name length.
.2411	48		pha				pha 								; save length on stack
.2412	85 32		sta $32				sta 	tempShort 					; save length in tempShort
.2414	a5 2b		lda $2b				lda 	temp0+1 					; save procedure target on stack.
.2416	48		pha				pha
.2417	a5 2a		lda $2a				lda 	temp0
.2419	48		pha				pha
.241a	98		tya				tya 								; calculate Y + length
.241b	18		clc				clc
.241c	65 32		adc $32				adc 	tempShort
.241e	a8		tay				tay
.241f	a2 00		ldx #$00			ldx 	#0 							; where the first parameter goes - 1
.2421					_CallProcEvalParams:
.2421	e8		inx				inx
.2422	b1 28		lda ($28),y			lda 	(codePtr),y 				; do we have ) , e.g. the end of the parameters ?
.2424	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.2426	f0 0b		beq $2433			beq 	_CPDoneParams
.2428	20 3e 2d	jsr $2d3e			jsr 	Evaluate 					; evaluate a parameter
.242b	b1 28		lda ($28),y			lda 	(codePtr),Y 				; get what's next, preconsume
.242d	c8		iny				iny
.242e	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; if comma, go get another parameter
.2430	f0 ef		beq $2421			beq 	_CallProcEvalParams
.2432	88		dey				dey 								; undo consumption.
.2433					_CPDoneParams:
.2433	20 68 34	jsr $3468			jsr 	CheckRightParen 			; check closing parenthesis.
.2436	8e d3 0c	stx $0cd3			stx 	paramCount 					; store parameter count+1
.2439	a2 04		ldx #$04			ldx 	#4							; make space on stack
.243b	a9 50		lda #$50			lda 	#markerPROC
.243d	20 90 34	jsr $3490			jsr 	RSClaim
.2440	a9 01		lda #$01			lda 	#1 							; store return address.
.2442	20 bc 34	jsr $34bc			jsr 	RSSavePosition
.2445	68		pla				pla 								; get the new code Ptr
.2446	85 28		sta $28				sta 	codePtr
.2448	68		pla				pla
.2449	85 29		sta $29				sta 	codePtr+1
.244b	68		pla				pla 								; length of name + 4 is the param start.
.244c	18		clc				clc
.244d	69 04		adc #$04			adc 	#4
.244f	a8		tay				tay
.2450	a2 ff		ldx #$ff			ldx 	#$FF
.2452					_CPLoadParameters:
.2452	e8		inx				inx 								; point to where the address should be loaded.
.2453	ec d3 0c	cpx $0cd3			cpx 	paramCount 					; too many parameters in definition ?
.2456	f0 1e		beq $2476			beq 	_CPParamError
.2458	b1 28		lda ($28),y			lda 	(codePtr),y					; what follows
.245a	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN 				; is it the right bracket
.245c	f0 0e		beq $246c			beq 	_CPParamComplete 			; done all the parameters, perhaps.
.245e	20 2a 23	jsr $232a			jsr 	LocaliseVariable 			; make following variable local, ref in tos,x
.2461	20 ed 20	jsr $20ed			jsr 	WriteValue 					; copy the evaluated parameter into there.
.2464	b1 28		lda ($28),y			lda 	(codePtr),y 				; followed by a comma ?
.2466	c8		iny				iny
.2467	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.2469	f0 e7		beq $2452			beq 	_CPLoadParameters
.246b	88		dey				dey 								; no, unconsume and check for )
.246c					_CPParamComplete:
.246c	20 68 34	jsr $3468			jsr 	CheckRightParen 			; check )
.246f	e8		inx				inx 								; check right number of parameters have been consumed
.2470	ec d3 0c	cpx $0cd3			cpx 	paramCount
.2473	d0 01		bne $2476			bne 	_CPParamError
.2475	60		rts				rts
.2476					_CPParamError:
.2476	a2 18		ldx #$18			ldx 	#ErrorID_Params
.2478	20 18 15	jsr $1518		jsr	errorHandler
.247b					ReturnProc:
.247b	20 9c 23	jsr $239c			jsr 	RestoreLocals 				; get the locals back.
.247e	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.2480	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.2482	c9 50		cmp #$50			cmp 	#markerPROC 						; does it match
.2484	f0 05		beq $248b			beq 	_isok
.2486	a2 12		ldx #$12			ldx 	#ErrorID_endProcErr
.2488	20 18 15	jsr $1518		jsr	errorHandler
.248b					_isok:
.248b	a9 01		lda #$01			lda 	#1
.248d	20 cf 34	jsr $34cf			jsr 	RSLoadPosition 				; reload the position from offset 1.
.2490	a9 04		lda #$04			lda 	#4 							; throw 4 bytes from stack.
.2492	20 b2 34	jsr $34b2			jsr 	RSFree
.2495	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/proctable.asm

.0cd4					procList:
>0cd4							.fill 	2		 					; terminated by name high being zero.
.0cd6					yInLine:
>0cd6							.fill 	1
.2496					FindProcedure:
.2496	8c d6 0c	sty $0cd6			sty 	yInLine 					; save current position.
.2499	20 54 25	jsr $2554			jsr 	CalculateProcedureHash		; calculate the hash of the procedure.
.249c	85 2c		sta $2c				sta 	temp1
.249e	ad d4 0c	lda $0cd4			lda		procList 					; put procList address in temp2
.24a1	85 2e		sta $2e				sta 	temp2
.24a3	ad d5 0c	lda $0cd5			lda 	procList+1
.24a6	85 2f		sta $2f				sta 	temp2+1
.24a8	a0 00		ldy #$00			ldy 	#0 							; position in this table.
.24aa					_FPLoop:
.24aa	b1 2e		lda ($2e),y			lda 	(temp2),y
.24ac	f0 4f		beq $24fd			beq 	_FPError 					; if so, we don't know this procedure.
.24ae	85 2b		sta $2b				sta 	temp0+1 					; copy MSB/LSB to temp0 as we go.
.24b0	c8		iny				iny
.24b1	b1 2e		lda ($2e),y			lda 	(temp2),y
.24b3	85 2a		sta $2a				sta 	temp0
.24b5	c8		iny				iny
.24b6	b1 2e		lda ($2e),y			lda 	(temp2),y					; check the procedure hash.
.24b8	c5 2c		cmp $2c				cmp 	temp1
.24ba	d0 2b		bne $24e7			bne 	_FPNext 					; hash is different, go to next.
.24bc	38		sec				sec
.24bd	ad d6 0c	lda $0cd6			lda 	yInLine 					; position in line must be at least 4
.24c0	e9 04		sbc #$04			sbc 	#4
.24c2	18		clc				clc
.24c3	65 28		adc $28				adc 	codePtr
.24c5	85 30		sta $30				sta 	temp3
.24c7	a5 29		lda $29				lda 	codePtr+1
.24c9	69 00		adc #$00			adc 	#0
.24cb	85 31		sta $31				sta 	temp3+1
.24cd	98		tya				tya
.24ce	48		pha				pha
.24cf	a0 04		ldy #$04			ldy 	#4
.24d1					_FPCName:
.24d1	b1 30		lda ($30),y			lda 	(temp3),y 					; check the same
.24d3	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.24d5	d0 0e		bne $24e5			bne 	_FPpulYNext 				; if different go to next one.
.24d7	c8		iny				iny
.24d8	c9 3a		cmp #$3a			cmp 	#$3A
.24da	90 f5		bcc $24d1			bcc 	_FPCName 					; compare the whole lot....
.24dc	68		pla				pla 								; throw away the saved Y
.24dd	98		tya				tya 								; length of name is Y-4
.24de	38		sec				sec
.24df	e9 04		sbc #$04			sbc 	#4
.24e1	ac d6 0c	ldy $0cd6			ldy 	yInLine  					; get the original Y back
.24e4	60		rts				rts
.24e5					_FPpulYNext:
.24e5	68		pla				pla
.24e6	a8		tay				tay
.24e7					_FPNext:
.24e7	c8		iny				iny 								; next procedure record.
.24e8	10 c0		bpl $24aa			bpl 	_FPLoop 					; if done 128 already ... e.g. Y -ve
.24ea	98		tya				tya 								; subtract 128 from Y
.24eb	38		sec				sec
.24ec	e9 80		sbc #$80			sbc 	#128
.24ee	a8		tay				tay
.24ef	18		clc				clc 								; add 128 to temp2, so we can have more than
.24f0	a5 2e		lda $2e				lda 	temp2 						; 255/3 = 85 procedures
.24f2	69 80		adc #$80			adc 	#128
.24f4	85 2e		sta $2e				sta 	temp2
.24f6	90 b2		bcc $24aa			bcc 	_FPLoop
.24f8	e6 2f		inc $2f				inc 	temp2+1
.24fa	4c aa 24	jmp $24aa			jmp 	_FPLoop
.24fd					_FPError:
.24fd	a2 17		ldx #$17			ldx 	#ErrorID_NoProc
.24ff	20 18 15	jsr $1518		jsr	errorHandler
.2502					ScanProc:
.2502	98		tya				tya
.2503	48		pha				pha
.2504	a5 35		lda $35				lda 	lowMemory 					; copy the start of the procList, at low memory
.2506	8d d4 0c	sta $0cd4			sta 	procList
.2509	a5 36		lda $36				lda 	lowMemory+1
.250b	8d d5 0c	sta $0cd5			sta 	procList+1
.250e	20 7e 28	jsr $287e			jsr 	ResetCodeAddress 			; back to the start.
.2511					_ScanLoop:
.2511	a0 00		ldy #$00			ldy 	#0 							; check reached program end
.2513	b1 28		lda ($28),y			lda 	(codePtr),y
.2515	f0 2a		beq $2541			beq 	_ScanExit
.2517	a0 03		ldy #$03			ldy 	#3							; get first token
.2519	b1 28		lda ($28),y			lda 	(codePtr),y
.251b	c9 9d		cmp #$9d			cmp 	#TKW_DEFPROC				; skip to next if not DEFPROC
.251d	d0 12		bne $2531			bne 	_ScanNext
.251f	a5 29		lda $29				lda 	codePtr+1 					; write high and low address of this line.
.2521	20 49 25	jsr $2549			jsr 	_ScanWrite
.2524	a5 28		lda $28				lda 	codePtr
.2526	20 49 25	jsr $2549			jsr 	_ScanWrite
.2529	a0 04		ldy #$04			ldy 	#4 							; start of name part
.252b	20 54 25	jsr $2554			jsr 	CalculateProcedureHash 		; calculate procedure hash
.252e	20 49 25	jsr $2549			jsr 	_ScanWrite					; and write that
.2531					_ScanNext:
.2531	18		clc				clc
.2532	a0 00		ldy #$00			ldy 	#0
.2534	b1 28		lda ($28),y			lda 	(codePtr),y
.2536	65 28		adc $28				adc 	codePtr
.2538	85 28		sta $28				sta 	codePtr
.253a	90 d5		bcc $2511			bcc 	_ScanLoop
.253c	e6 29		inc $29				inc 	codePtr+1
.253e	4c 11 25	jmp $2511			jmp 	_ScanLoop
.2541					_ScanExit:
.2541	a9 00		lda #$00			lda 	#0 							; write ending zero.
.2543	20 49 25	jsr $2549			jsr 	_ScanWrite
.2546	68		pla				pla
.2547	a8		tay				tay
.2548	60		rts				rts
.2549					_ScanWrite:
.2549	a0 00		ldy #$00			ldy 	#0
.254b	91 35		sta ($35),y			sta 	(lowMemory),y
.254d	e6 35		inc $35				inc 	lowMemory
.254f	d0 02		bne $2553			bne 	_SWNoCarry
.2551	e6 36		inc $36				inc 	lowMemory+1
.2553					_SWNoCarry:
.2553	60		rts				rts
.2554					CalculateProcedureHash:
.2554	a9 00		lda #$00			lda 	#0 							; clear hash.
.2556	85 2a		sta $2a				sta 	temp0
.2558					_CPHLoop:
.2558	18		clc				clc 								; add character and rotate and add carry back in
.2559	b1 28		lda ($28),y			lda 	(codePtr),y
.255b	65 2a		adc $2a				adc 	temp0
.255d	6a		ror a				ror 	a
.255e	69 0d		adc #$0d			adc 	#13 						; primes usually good for this sort of thing.
.2560	85 2a		sta $2a				sta 	temp0 						; (down with this sort of thing)
.2562	b1 28		lda ($28),y			lda 	(codePtr),y
.2564	c8		iny				iny 								; advance incase we go round again.
.2565	c9 3a		cmp #$3a			cmp 	#$3A
.2567	90 ef		bcc $2558			bcc 	_CPHLoop
.2569	a5 2a		lda $2a				lda 	temp0
.256b	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/repeat.asm

.256c					Command_Repeat:
.256c	a2 04		ldx #$04			ldx 	#4 							; allocate 4 bytes on stack for REPEAT
.256e	a9 52		lda #$52			lda 	#markerREPEAT 				; repeat marker allocate 4 bytes
.2570	20 90 34	jsr $3490			jsr 	RSClaim
.2573	a9 01		lda #$01			lda 	#1 							; save position at offset 1.
.2575	20 bc 34	jsr $34bc			jsr 	RSSavePosition
.2578	60		rts				rts
.2579					Command_Until:
.2579	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.257b	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.257d	c9 52		cmp #$52			cmp 	#markerREPEAT 						; does it match
.257f	f0 05		beq $2586			beq 	_isok
.2581	a2 0f		ldx #$0f			ldx 	#ErrorID_untilErr
.2583	20 18 15	jsr $1518		jsr	errorHandler
.2586					_isok:
.2586	20 5b 2d	jsr $2d5b			jsr 	EvaluateRootInteger 		; at the bottom.
.2589	20 1c 34	jsr $341c			jsr 	MInt32Zero					; check if TOS zero
.258c	d0 06		bne $2594			bne 	_CUExit
.258e	a9 01		lda #$01			lda 	#1
.2590	20 cf 34	jsr $34cf			jsr 	RSLoadPosition 				; reload the position from offset 1.
.2593	60		rts				rts
.2594					_CUExit:
.2594	a9 04		lda #$04			lda 	#4 							; throw 4 bytes from stack.
.2596	20 b2 34	jsr $34b2			jsr 	RSFree
.2599	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/scanner.asm

.259a					ScanForward:
.259a	85 2c		sta $2c				sta 	temp1 						; save tokens to search in temp1/temp1+1
.259c	86 2d		stx $2d				stx 	temp1+1
.259e	a9 00		lda #$00			lda 	#0 							; temp2 counts structure levels.
.25a0	85 2e		sta $2e				sta 	temp2
.25a2	b1 28		lda ($28),y	_SFLoop:lda 	(codePtr),y 				; look at the next token.
.25a4	c8		iny				iny
.25a5	a6 2e		ldx $2e				ldx 	temp2 						; check structure levels are zero.
.25a7	d0 08		bne $25b1			bne 	_SFNoCheck 					; if so, check token against entered values.
.25a9	c5 2c		cmp $2c				cmp 	temp1 						; if either matches, we've reached the token
.25ab	f0 24		beq $25d1			beq 	_SFExit 					; at the same strcture depth.
.25ad	c5 2d		cmp $2d				cmp 	temp1+1
.25af	f0 20		beq $25d1			beq 	_SFExit
.25b1					_SFNoCheck:
.25b1	c9 80		cmp #$80			cmp 	#$80 						; if it is 00-7F (variable/number) just skip it.
.25b3	90 ed		bcc $25a2			bcc 	_SFLoop
.25b5	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; $80-$85 is various specials.
.25b7	90 19		bcc $25d2			bcc 	_SFSpecials
.25b9	c9 99		cmp #$99			cmp 	#TOK_STRUCTST 				; if < structure start then continue
.25bb	90 e5		bcc $25a2			bcc 	_SFLoop
.25bd	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST 				; if >= unary start (after structure) then continue.
.25bf	b0 e1		bcs $25a2			bcs 	_SFLoop
.25c1	aa		tax				tax  								; token in X, and look up the adjuster.
.25c2	bd 79 2c	lda $2c79,x			lda 	ELBinaryOperatorInfo-TOK_BINARYST,x
.25c5	38		sec				sec 								; convert to an offset ($FF,$01)
.25c6	e9 81		sbc #$81			sbc 	#$81
.25c8	18		clc				clc 								; add to depth
.25c9	65 2e		adc $2e				adc 	temp2
.25cb	85 2e		sta $2e				sta 	temp2
.25cd	10 d3		bpl $25a2			bpl 	_SFLoop 					; +ve okay to continue
.25cf	30 07		bmi $25d8			bmi 	SFError 					; if gone -ve then we have a nesting error
.25d1	60		rts		_SFExit:rts
.25d2					_SFSpecials:
.25d2	20 dd 25	jsr $25dd			jsr 	ScannerSkipSpecial
.25d5	4c a2 25	jmp $25a2			jmp 	_SFLoop
.25d8					SFError:
.25d8	a2 14		ldx #$14			ldx 	#ErrorID_Struct
.25da	20 18 15	jsr $1518		jsr	errorHandler
.25dd					ScannerSkipSpecial:
.25dd	c9 80		cmp #$80			cmp 	#TOK_EOL 					; $80, advance to next line.
.25df	f0 10		beq $25f1			beq 	_SFNextLine
.25e1	c9 84		cmp #$84			cmp 	#TOK_FPC					; $84, skip embedded float
.25e3	f0 2b		beq $2610			beq 	_SFFloatSkip
.25e5	c9 85		cmp #$85			cmp 	#TOK_STR 					; $85, skip string
.25e7	f0 02		beq $25eb			beq 	_SFSkipString
.25e9	c8		iny				iny									; $81,$82,$83 shift, so just advance over the shifted
.25ea	60		rts				rts 								; token.
.25eb					_SFSkipString:
.25eb	98		tya				tya
.25ec	38		sec				sec
.25ed	71 28		adc ($28),y			adc 	(codePtr),y
.25ef	a8		tay				tay
.25f0	60		rts				rts
.25f1					_SFNextLine:
.25f1	a0 00		ldy #$00			ldy 	#0 							; get offset
.25f3	b1 28		lda ($28),y			lda 	(codePtr),y
.25f5	18		clc				clc 								; add to code pointer.
.25f6	65 28		adc $28				adc 	codePtr
.25f8	85 28		sta $28				sta 	codePtr
.25fa	90 02		bcc $25fe			bcc		_SFNLNoCarry
.25fc	e6 29		inc $29				inc 	codePtr+1
.25fe					_SFNLNoCarry:
.25fe	b1 28		lda ($28),y			lda 	(codePtr),y 				; reached the end of the program.
.2600	d0 0b		bne $260d			bne		_SFXNL 						; no go round again
.2602	a5 2c		lda $2c				lda 	temp1
.2604	c9 d9		cmp #$d9			cmp 	#TKW_DATA 					; if searching for Data different error.
.2606	d0 d0		bne $25d8			bne 	SFError 					; read uses this to search for data statements
.2608	a2 1d		ldx #$1d			ldx 	#ErrorID_DataError
.260a	20 18 15	jsr $1518		jsr	errorHandler
.260d	a0 03		ldy #$03	_SFXNL:	ldy 	#3
.260f	60		rts				rts
.2610					_SFFloatSkip:
.2610	98		tya				tya 								; skip over an embedded float.
.2611	18		clc				clc
.2612	69 05		adc #$05			adc 	#FloatEmbeddedSize
.2614	a8		tay				tay
.2615	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/while.asm

.2616					Command_While:
.2616	a9 57		lda #$57			lda 	#markerWhile 				; gosub marker allocate 4 bytes.
.2618	a2 04		ldx #$04			ldx 	#4
.261a	20 90 34	jsr $3490			jsr 	RSClaim 					; create on stack.
.261d	88		dey				dey
.261e	a9 01		lda #$01			lda 	#1
.2620	20 bc 34	jsr $34bc			jsr 	RSSavePosition 				; save position before the WHILE keyword.
.2623	c8		iny				iny
.2624	20 5d 2d	jsr $2d5d			jsr 	EvaluateInteger				; get the conditional
.2627	20 1c 34	jsr $341c			jsr 	MInt32Zero 	 				; if zero, skip forward to the fail code.
.262a	f0 01		beq $262d			beq 	_CWFail
.262c	60		rts				rts
.262d					_CWFail:
.262d	a9 04		lda #$04			lda 	#4
.262f	20 b2 34	jsr $34b2			jsr 	RSFree 						; close the just opened position.
.2632	a9 9f		lda #$9f			lda 	#TKW_WEND 					; scan forward past WEND.
.2634	aa		tax				tax
.2635	20 9a 25	jsr $259a			jsr 	ScanForward
.2638	60		rts				rts
.2639					Command_Wend:
.2639	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.263b	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.263d	c9 57		cmp #$57			cmp 	#markerWHILE 						; does it match
.263f	f0 05		beq $2646			beq 	_isok
.2641	a2 11		ldx #$11			ldx 	#ErrorID_wendErr
.2643	20 18 15	jsr $1518		jsr	errorHandler
.2646					_isok:
.2646	a9 01		lda #$01			lda 	#1
.2648	20 cf 34	jsr $34cf			jsr 	RSLoadPosition				; go back until true
.264b	a9 04		lda #$04			lda 	#4
.264d	20 b2 34	jsr $34b2			jsr 	RSFree 						; close the loop
.2650	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/system/clear.asm

.2651					CommandClear:
.2651					XCommandClear:
.2651	98		tya				tya
.2652	48		pha				pha
.2653	ad cc 0a	lda $0acc			lda 	endMemory					; set high memory = end of memory
.2656	85 33		sta $33				sta 	highMemory
.2658	ad cd 0a	lda $0acd			lda 	endMemory+1
.265b	85 34		sta $34				sta 	highMemory+1
.265d	ad c8 0a	lda $0ac8			lda 	basePage 					; work out where the program ends.
.2660	85 2a		sta $2a				sta 	temp0
.2662	ad c9 0a	lda $0ac9			lda 	basePage+1
.2665	85 2b		sta $2b				sta 	temp0+1
.2667					_CCFindEnd:
.2667	a0 00		ldy #$00			ldy 	#0
.2669	b1 2a		lda ($2a),y			lda 	(temp0),y
.266b	f0 0c		beq $2679			beq 	_CCFoundEnd 				; offset zero is end.
.266d	18		clc				clc
.266e	65 2a		adc $2a				adc 	temp0 						; move to next line
.2670	85 2a		sta $2a				sta 	temp0
.2672	90 f3		bcc $2667			bcc 	_CCFindEnd
.2674	e6 2b		inc $2b				inc 	temp0+1
.2676	4c 67 26	jmp $2667			jmp 	_CCFindEnd
.2679					_CCFoundEnd:
.2679	a5 2a		lda $2a				lda 	temp0 						; put temp0 in lowMemory
.267b	85 35		sta $35				sta 	lowMemory
.267d	a5 2b		lda $2b				lda 	temp0+1
.267f	85 36		sta $36				sta 	lowMemory+1
.2681	18		clc				clc 								; put temp0+1 in endProgram
.2682	a5 2a		lda $2a				lda 	temp0
.2684	69 01		adc #$01			adc 	#1
.2686	8d ca 0a	sta $0aca			sta 	endProgram
.2689	a5 2b		lda $2b				lda 	temp0+1
.268b	69 00		adc #$00			adc 	#0
.268d	8d cb 0a	sta $0acb			sta 	endProgram+1
.2690	18		clc				clc 								; put a bit of space in.
.2691	a5 35		lda $35				lda 	lowMemory
.2693	69 04		adc #$04			adc 	#4
.2695	85 35		sta $35				sta 	lowMemory
.2697	90 02		bcc $269b			bcc 	_CCNoCarry
.2699	e6 36		inc $36				inc 	lowMemory+1
.269b					_CCNoCarry:
.269b	20 82 34	jsr $3482			jsr 	RSReset 					; reset the return stack.
.269e	a2 06		ldx #$06		ldx	#6
.26a0	20 97 43	jsr $4397		jsr	variableHandler
.26a3	20 02 25	jsr $2502			jsr 	ScanProc 					; scan for procedures
.26a6	20 87 1e	jsr $1e87			jsr 	CommandRestore 				; do a restore
.26a9	68		pla				pla
.26aa	a8		tay				tay
.26ab	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/system/list.asm

.0cd7					structIndent:
>0cd7							.fill 	1
.26ac					CommandList:
.26ac	a2 00		ldx #$00			ldx		#0 							; set start/end lines in stack 0/1 to 0 and $FFFF
.26ae	8e d7 0c	stx $0cd7			stx 	structIndent
.26b1	20 f5 33	jsr $33f5			jsr 	MInt32False
.26b4	e8		inx				inx
.26b5	20 f1 33	jsr $33f1			jsr 	MInt32True
.26b8	b1 28		lda ($28),y			lda 	(codePtr),y 				; look at first token
.26ba	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; list ,xxxx
.26bc	f0 15		beq $26d3			beq 	_CLEndLine
.26be	c9 00		cmp #$00			cmp 	#0 							; list ... on its own.
.26c0	30 1b		bmi $26dd			bmi 	_CLDoListing 				; do the whole lot.
.26c2	a2 00		ldx #$00			ldx 	#0 							; get start line at stack:0
.26c4	20 5d 2d	jsr $2d5d			jsr 	EvaluateInteger
.26c7	b1 28		lda ($28),y			lda 	(codePtr),y 				; , follows ?
.26c9	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.26cb	f0 06		beq $26d3			beq 	_CLEndLine
.26cd	20 33 33	jsr $3333			jsr 	MInt32CopyUp 				; copy first to second if just a line number on its
.26d0	4c dd 26	jmp $26dd			jmp 	_CLDoListing 				; own e.g. list 1100
.26d3					_CLEndLine:
.26d3	c8		iny				iny 								; skip comma
.26d4	b1 28		lda ($28),y			lda 	(codePtr),y  				; no number follows, then its list 1000,
.26d6	30 05		bmi $26dd			bmi 	_CLDoListing
.26d8	a2 01		ldx #$01			ldx 	#1 							; get the last line to list
.26da	20 5d 2d	jsr $2d5d			jsr 	EvaluateInteger				; get end
.26dd					_CLDoListing:
.26dd	20 7e 28	jsr $287e			jsr 	ResetCodeAddress 			; back to the start.
.26e0					_CLCheckLoop:
.26e0	a2 02		ldx #$02		ldx	#2
.26e2	20 f6 14	jsr $14f6		jsr	deviceHandler
.26e5	a0 00		ldy #$00			ldy 	#0							; check end.
.26e7	b1 28		lda ($28),y			lda 	(codePtr),y
.26e9	f0 41		beq $272c			beq 	_CLEnd
.26eb	a2 00		ldx #$00			ldx 	#0 							; compare vs lower.
.26ed	20 2f 27	jsr $272f			jsr 	CLCompareLineTOS
.26f0	c9 ff		cmp #$ff			cmp 	#255 						; if < skip
.26f2	f0 28		beq $271c			beq 	_CLNext
.26f4	e8		inx				inx
.26f5	20 2f 27	jsr $272f			jsr 	CLCompareLineTOS 			; compare vs higher
.26f8	c9 01		cmp #$01			cmp 	#1
.26fa	f0 20		beq $271c			beq 	_CLNext
.26fc	a9 80		lda #$80			lda 	#$80 						; undo any down indents this line.
.26fe	20 51 27	jsr $2751			jsr 	CLStructureCheck
.2701	ad d7 0c	lda $0cd7			lda 	structIndent 				; indent level.
.2704	10 02		bpl $2708			bpl 	_CLPositive
.2706	a9 00		lda #$00			lda 	#0
.2708					_CLPositive:
.2708	a2 04		ldx #$04		ldx	#4
.270a	20 c6 3f	jsr $3fc6		jsr	tokeniserHandler
.270d	a9 82		lda #$82			lda 	#$82 						; up indents from this point on.
.270f	20 51 27	jsr $2751			jsr 	CLStructureCheck
.2712	ad d7 0c	lda $0cd7			lda 	structIndent
.2715	10 05		bpl $271c			bpl 	_CLNext
.2717	a9 00		lda #$00			lda 	#0
.2719	8d d7 0c	sta $0cd7			sta 	structIndent
.271c					_CLNext:
.271c	a0 00		ldy #$00			ldy 	#0 							; go to next line.
.271e	b1 28		lda ($28),y			lda 	(codePtr),y
.2720	18		clc				clc
.2721	65 28		adc $28				adc 	codePtr
.2723	85 28		sta $28				sta 	codePtr
.2725	90 b9		bcc $26e0			bcc 	_CLCheckLoop
.2727	e6 29		inc $29				inc 	codePtr+1
.2729	4c e0 26	jmp $26e0			jmp 	_CLCheckLoop
.272c					_CLEnd:
.272c	4c de 34	jmp $34de			jmp 	WarmStart 					; warm start after list.
.272f					CLCompareLineTOS:
.272f	a0 01		ldy #$01			ldy 	#1
.2731	b1 28		lda ($28),y			lda 	(codePtr),y
.2733	55 50		eor $50,x			eor 	esInt0,x
.2735	85 2a		sta $2a				sta 	temp0
.2737	c8		iny				iny
.2738	b1 28		lda ($28),y			lda 	(codePtr),y
.273a	55 58		eor $58,x			eor 	esInt1,x
.273c	05 2a		ora $2a				ora 	temp0
.273e	f0 10		beq $2750			beq 	_CLCLTExit
.2740	88		dey				dey
.2741	b1 28		lda ($28),y			lda 	(codePtr),y
.2743	d5 50		cmp $50,x			cmp 	esInt0,x
.2745	c8		iny				iny
.2746	b1 28		lda ($28),y			lda 	(codePtr),y
.2748	f5 58		sbc $58,x			sbc 	esInt1,x
.274a	a9 ff		lda #$ff			lda 	#255
.274c	90 02		bcc $2750			bcc 	_CLCLTExit
.274e	a9 01		lda #$01			lda 	#1
.2750					_CLCLTExit:
.2750	60		rts				rts
.2751					CLStructureCheck:
.2751	85 2a		sta $2a				sta 	temp0
.2753	a0 03		ldy #$03			ldy 	#3
.2755					_CLSCLoop:
.2755	b1 28		lda ($28),y			lda 	(codePtr),y 				; get and consume token.
.2757	c8		iny				iny
.2758	c9 80		cmp #$80			cmp 	#$80
.275a	90 f9		bcc $2755			bcc 	_CLSCLoop 					; $00-$7F just step over.
.275c	f0 28		beq $2786			beq		_CLSCExit					; EOL return
.275e	c9 86		cmp #$86			cmp 	#$86 						; special handler
.2760	90 1e		bcc $2780			bcc 	_CLSCSpecial
.2762	c9 99		cmp #$99			cmp 	#TOK_STRUCTST 				; check if structure changer.
.2764	90 ef		bcc $2755			bcc 	_CLSCLoop
.2766	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST
.2768	b0 eb		bcs $2755			bcs 	_CLSCLoop
.276a	aa		tax				tax 								; get adjustment
.276b	bd 79 2c	lda $2c79,x			lda 	ELBinaryOperatorInfo-TOK_BINARYST,x
.276e	c5 2a		cmp $2a				cmp 	temp0	 					; if what we're searching for
.2770	d0 e3		bne $2755			bne 	_CLSCLoop
.2772	38		sec				sec
.2773	e9 81		sbc #$81			sbc 	#$81 						; convert to offset
.2775	0a		asl a				asl 	a 							; double indent step
.2776	18		clc				clc
.2777	6d d7 0c	adc $0cd7			adc 	structIndent 				; add to structure indent
.277a	8d d7 0c	sta $0cd7			sta 	structIndent
.277d	4c 55 27	jmp $2755			jmp 	_CLSCLoop
.2780					_CLSCSpecial:
.2780	20 dd 25	jsr $25dd			jsr 	ScannerSkipSpecial
.2783	4c 55 27	jmp $2755			jmp 	_CLSCLoop
.2786					_CLSCExit:
.2786	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/system/loadsave.asm

.2787					CommandLoad:
.2787	20 af 27	jsr $27af			jsr 	CLSParameters 					; get parameters for load.
.278a	08		php				php
.278b	a2 0e		ldx #$0e		ldx	#14
.278d	20 f6 14	jsr $14f6		jsr	deviceHandler
.2790	28		plp				plp
.2791	b0 08		bcs $279b			bcs 	_CLExit 						; if CC then load a program, so warm start.
.2793	20 51 26	jsr $2651			jsr 	CommandClear
.2796	a2 04		ldx #$04		ldx	#4
.2798	20 49 1e	jsr $1e49		jsr	interactionHandler
.279b					_CLExit
.279b	60		rts				rts
.279c					CommandSave:
.279c	20 af 27	jsr $27af			jsr 	CLSParameters					; get parameters for save
.279f	90 08		bcc $27a9			bcc 	_CSNoOverrideAddress
.27a1	20 75 34	jsr $3475			jsr 	CheckComma 						; should be a comma.
.27a4	a2 02		ldx #$02			ldx 	#2
.27a6	20 5d 2d	jsr $2d5d			jsr 	EvaluateInteger 				; get save end address.
.27a9					_CSNoOverrideAddress:
.27a9	a2 18		ldx #$18		ldx	#24
.27ab	20 f6 14	jsr $14f6		jsr	deviceHandler
.27ae	60		rts				rts
.27af					CLSParameters:
.27af	a2 00		ldx #$00			ldx 	#0 								; string
.27b1	20 52 2d	jsr $2d52			jsr 	EvaluateString
.27b4	e8		inx				inx 									; erase out +1 +2
.27b5	20 f5 33	jsr $33f5			jsr 	MInt32False
.27b8	e8		inx				inx
.27b9	20 f5 33	jsr $33f5			jsr 	MInt32False
.27bc	ad c8 0a	lda $0ac8			lda 	basePage 						; default start address.
.27bf	85 51		sta $51				sta 	esInt0+1
.27c1	ad c9 0a	lda $0ac9			lda 	basePage+1
.27c4	85 59		sta $59				sta 	esInt1+1
.27c6	ad ca 0a	lda $0aca			lda 	endProgram 						; default end address
.27c9	85 52		sta $52				sta 	esInt0+2
.27cb	ad cb 0a	lda $0acb			lda 	endProgram+1
.27ce	85 5a		sta $5a				sta 	esInt1+2
.27d0	b1 28		lda ($28),y			lda 	(codePtr),y 					; , following
.27d2	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.27d4	d0 08		bne $27de			bne 	_CLSDefault
.27d6	c8		iny				iny 									; skip comma
.27d7	a2 01		ldx #$01			ldx 	#1 								; get numeric value.
.27d9	20 5d 2d	jsr $2d5d			jsr 	EvaluateInteger
.27dc	38		sec				sec
.27dd	60		rts				rts
.27de					_CLSDefault:
.27de	18		clc				clc
.27df	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/system/new.asm

.27e0					Command_New:
.27e0					Command_XNew:
.27e0	20 7e 28	jsr $287e			jsr 	ResetCodeAddress 			; point to first line
.27e3	a0 00		ldy #$00			ldy 	#0 							; and zap it.
.27e5	98		tya				tya
.27e6	91 28		sta ($28),y			sta 	(codePtr),y
.27e8	20 51 26	jsr $2651			jsr 	CommandClear 				; clear everything down.
.27eb	4c a7 21	jmp $21a7			jmp 	CommandEND 					; do END code, as there's nothing to run.

;******  Return to file: main/main.asm


;******  Processing file: main/commands/system/run.asm

.0cd8					breakCounter:
>0cd8								.fill 	1
.0cd9					breakIncrement:
>0cd9								.fill 	1
.27ee					Command_Run:
.27ee					XCommand_Run:
.27ee	a2 ff		ldx #$ff			ldx 	#$FF 						; reset the stack.
.27f0	9a		txs				txs
.27f1	20 78 28	jsr $2878			jsr 	BreakOn 					; turn break on
.27f4	20 51 26	jsr $2651			jsr 	CommandClear 				; clear everything.
.27f7	20 7e 28	jsr $287e			jsr 	ResetCodeAddress 			; back to the start.
.27fa					Command_RunFrom:
.27fa	a0 03		ldy #$03			ldy 	#3 							; over offset/line #
.27fc					CRNextInstruction:
.27fc	64 3a		stz $3a				stz 	softMemAlloc+1
.27fe	ad d8 0c	lda $0cd8			lda 	breakCounter 				; check for break.
.2801	6d d9 0c	adc $0cd9			adc 	breakIncrement
.2804	8d d8 0c	sta $0cd8			sta 	breakCounter
.2807	90 05		bcc $280e			bcc 	_CRNoChecks
.2809	a2 02		ldx #$02		ldx	#2
.280b	20 f6 14	jsr $14f6		jsr	deviceHandler
.280e					_CRNoChecks
.280e	b1 28		lda ($28),y			lda 	(codePtr),y 				; get next token.
.2810	10 1c		bpl $282e			bpl 	_CRNotToken
.2812	c9 c9		cmp #$c9			cmp 	#TOK_TOKENS 				; if in the tokens then do that token.
.2814	b0 0c		bcs $2822			bcs 	_CRExecute
.2816	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST 				; unary is ignored.
.2818	b0 71		bcs $288b			bcs 	Unimplemented
.281a	c9 99		cmp #$99			cmp 	#TOK_STRUCTST 				; execute structures.
.281c	b0 04		bcs $2822			bcs 	_CRExecute
.281e	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; if one of the system tokens $80-$85 do that
.2820	b0 16		bcs $2838			bcs 	_CRCheckIndirect 			; if in that unused range check for ! or ? or AND
.2822					_CRExecute:
.2822	c8		iny				iny 								; consume it.
.2823	0a		asl a				asl 	a 							; double it, losing most significant bit.
.2824	aa		tax				tax
.2825	20 2b 28	jsr $282b			jsr 	_CRRunRoutine 				; we want to do jsr (group0vectors,x)
.2828	4c fc 27	jmp $27fc			jmp 	CRNextInstruction
.282b					_CRRunRoutine:
.282b	7c 95 28	jmp ($2895,x)			jmp 	(Group0Vectors,x)
.282e					_CRNotToken:
.282e	c9 40		cmp #$40			cmp 	#$40 						; if 0-3F then it is a letter
.2830	b0 59		bcs $288b			bcs 	Unimplemented
.2832					_CRDefaultLet:
.2832	20 da 20	jsr $20da			jsr 	CommandLet 					; do the default, LET
.2835	4c fc 27	jmp $27fc			jmp 	CRNextInstruction
.2838					_CRCheckIndirect:
.2838	c9 86		cmp #$86			cmp 	#TKW_AND 					; AND (assembler)
.283a	f0 0a		beq $2846			beq 	_CRAndCommand
.283c	c9 97		cmp #$97			cmp 	#TKW_PLING 					; !<term> =
.283e	f0 f2		beq $2832			beq 	_CRDefaultLet
.2840	c9 98		cmp #$98			cmp 	#TKW_QMARK 					; ?<term> =
.2842	f0 ee		beq $2832			beq 	_CRDefaultLet
.2844	d0 45		bne $288b			bne 	Unimplemented
.2846					_CRAndCommand:
.2846	c8		iny				iny 								; skip over the AND token
.2847	a9 95		lda #$95			lda 	#TKW_LPARENANDRPAREN 		; replace it with the pseudo-and
.2849	20 63 28	jsr $2863			jsr 	CommandAssembler 			; do the assembler command
.284c	4c fc 27	jmp $27fc			jmp 	CRNextInstruction 			; and loop round.
.284f					CommandShift1:
.284f	b1 28		lda ($28),y			lda 	(codePtr),y 				; get shifted value
.2851	10 38		bpl $288b			bpl 	Unimplemented 				; we have an error as this should not happen.
.2853	c8		iny				iny 								; advance over it.
.2854	c9 94		cmp #$94			cmp 	#TKA_GROUP1 				; is it an assembler constant ?
.2856	b0 0b		bcs $2863			bcs 	CommandAssembler
.2858	0a		asl a				asl 	a 							; double into X
.2859	aa		tax				tax
.285a	7c 59 29	jmp ($2959,x)			jmp 	(Group1Vectors-12,x) 		; and do the code.
.285d					CommandShift2:
.285d	a9 ff		lda #$ff			lda 	#$FF 						; $FF means command not unary function.
.285f	20 60 18	jsr $1860		jsr	extensionHandler
.2862	60		rts				rts
.2863					CommandAssembler:
.2863	a2 02		ldx #$02		ldx	#2
.2865	20 b4 13	jsr $13b4		jsr	assemblerHandler
.2868	60		rts				rts
.2869					CommandAssemblerLabel:
.2869	a2 04		ldx #$04		ldx	#4
.286b	20 b4 13	jsr $13b4		jsr	assemblerHandler
.286e	60		rts				rts
.286f					CommandColon:
.286f	60		rts				rts
.2870					CommandBreak:
.2870	20 5b 2d	jsr $2d5b			jsr 	EvaluateRootInteger
.2873	20 1c 34	jsr $341c			jsr 	MInt32Zero
.2876	f0 02		beq $287a			beq 	BreakOff
.2878					BreakOn:
.2878	a2 08		ldx #$08			ldx 	#8
.287a					BreakOff:
.287a	8e d9 0c	stx $0cd9			stx 	breakIncrement
.287d	60		rts				rts
.287e					ResetCodeAddress:
.287e	ad c8 0a	lda $0ac8			lda 	basePage 					; copy basePage to code Pointer
.2881	85 28		sta $28				sta 	codePtr
.2883	ad c9 0a	lda $0ac9			lda 	basePage+1
.2886	85 29		sta $29				sta 	codePtr+1
.2888	a0 03		ldy #$03			ldy 	#3 							; offset after offset link and line#
.288a	60		rts				rts
.288b					Unimplemented:
.288b	a2 01		ldx #$01			ldx 	#ErrorID_Missing
.288d	20 18 15	jsr $1518		jsr	errorHandler
.2890					TKErr01:
.2890					TKErr02:
.2890					TKErr03:
.2890					TKErr04:
.2890					TKErr05:
.2890					TKErr06:
.2890					TKErr07:
.2890					TKErr08:
.2890					TKErr09:
.2890					TKErr10:
.2890					TKErr11:
.2890					TKErr12:
.2890					TKErr13:
.2890					TKErr14:
.2890	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.2892	20 18 15	jsr $1518		jsr	errorHandler

;******  Processing file: main/commands/system/../../../generated/tokenvectors0.inc

.2895					Group0Vectors:
>2895	ad 21					.word	AdvanceNextLine          ; $80 [[eol]]
>2897	4f 28					.word	CommandShift1            ; $81 [[sh1]]
>2899	5d 28					.word	CommandShift2            ; $82 [[sh2]]
>289b	90 28					.word	TKErr09                  ; $83 [[sh3]]
>289d	90 28					.word	TKErr10                  ; $84 [[fpc]]
>289f	90 28					.word	TKErr08                  ; $85 [[str]]
>28a1	42 2a					.word	AndHandler               ; $86 and
>28a3	2f 2a					.word	OrHandler                ; $87 or
>28a5	1c 2a					.word	XorHandler               ; $88 xor
>28a7	64 2b					.word	CompareGreaterEq         ; $89 >=
>28a9	6e 2b					.word	CompareLessEq            ; $8a <=
>28ab	50 2b					.word	CompareGreater           ; $8b >
>28ad	46 2b					.word	CompareLess              ; $8c <
>28af	3c 2b					.word	CompareEquals            ; $8d =
>28b1	5a 2b					.word	CompareNotEquals         ; $8e <>
>28b3	ad 29					.word	AddHandler               ; $8f +
>28b5	d0 29					.word	SubHandler               ; $90 -
>28b7	68 2a					.word	ShrHandler               ; $91 >>
>28b9	55 2a					.word	ShlHandler               ; $92 <<
>28bb	e3 29					.word	MulHandler               ; $93 *
>28bd	f6 29					.word	DivHandler               ; $94 /
>28bf	09 2a					.word	ModHandler               ; $95 mod
>28c1	a1 2a					.word	PowerHandler             ; $96 ^
>28c3	7b 2a					.word	WordRefHandler           ; $97 !
>28c5	8e 2a					.word	ByteRefHandler           ; $98 ?
>28c7	6c 25					.word	Command_Repeat           ; $99 repeat
>28c9	16 26					.word	Command_While            ; $9a while
>28cb	c1 21					.word	Command_FOR              ; $9b for
>28cd	d0 22					.word	CommandIf                ; $9c if
>28cf	90 28					.word	TKErr04                  ; $9d defproc
>28d1	79 25					.word	Command_Until            ; $9e until
>28d3	39 26					.word	Command_Wend             ; $9f wend
>28d5	22 22					.word	Command_NEXT             ; $a0 next
>28d7	90 28					.word	TKErr06                  ; $a1 then
>28d9	0b 23					.word	Command_ENDIF            ; $a2 endif
>28db	7b 24					.word	ReturnProc               ; $a3 endproc
>28dd	c8 2c					.word	UnaryParenthesis         ; $a4 (
>28df	aa 2e					.word	UnaryLen                 ; $a5 len(
>28e1	ee 2e					.word	UnarySgn                 ; $a6 sgn(
>28e3	d7 2e					.word	UnaryAbs                 ; $a7 abs(
>28e5	47 2f					.word	Unary_Random             ; $a8 random(
>28e7	91 2f					.word	Unary_Page               ; $a9 page
>28e9	f1 33					.word	MInt32True               ; $aa true
>28eb	f5 33					.word	MInt32False              ; $ab false
>28ed	5c 2f					.word	Unary_Min                ; $ac min(
>28ef	60 2f					.word	Unary_Max                ; $ad max(
>28f1	69 30					.word	UnarySys                 ; $ae sys(
>28f3	12 30					.word	UnaryTimer               ; $af timer(
>28f5	27 2e					.word	EventFunction            ; $b0 event(
>28f7	3b 30					.word	UnaryGet                 ; $b1 get(
>28f9	2b 30					.word	UnaryInkey               ; $b2 inkey(
>28fb	e2 2f					.word	UnaryAlloc               ; $b3 alloc(
>28fd	a2 30					.word	ExecChr                  ; $b4 chr$(
>28ff	d2 30					.word	ExecLeft                 ; $b5 left$(
>2901	ef 30					.word	ExecMid                  ; $b6 mid$(
>2903	17 31					.word	ExecRight                ; $b7 right$(
>2905	a9 2d					.word	Event_Str                ; $b8 str$(
>2907	d8 2d					.word	UnaryVal                 ; $b9 val(
>2909	05 2f					.word	UnaryPeek                ; $ba peek(
>290b	0b 2f					.word	UnaryDeek                ; $bb deek(
>290d	11 2f					.word	UnaryLeek                ; $bc leek(
>290f	c8 2e					.word	UnaryAsc                 ; $bd asc(
>2911	bc 2f					.word	UnaryIntToFloat          ; $be int(
>2913	cf 2f					.word	UnaryFloatToInt          ; $bf float(
>2915	db 2d					.word	UnaryIsVal               ; $c0 isval(
>2917	b9 30					.word	ExecUpper                ; $c1 upper$(
>2919	b6 30					.word	ExecLower                ; $c2 lower$(
>291b	9f 2f					.word	UnaryReference           ; $c3 @
>291d	b5 2f					.word	UnaryComplement          ; $c4 ~
>291f	b2 2f					.word	UnaryHexMarker           ; $c5 &
>2921	54 30					.word	UnaryGetString           ; $c6 get$(
>2923	5a 30					.word	UnaryInkeyString         ; $c7 inkey$(
>2925	91 30					.word	UnaryMem                 ; $c8 mem
>2927	90 28					.word	TKErr01                  ; $c9 )
>2929	6f 28					.word	CommandColon             ; $ca :
>292b	90 28					.word	TKErr02                  ; $cb ,
>292d	90 28					.word	TKErr03                  ; $cc ;
>292f	95 21					.word	Command_Rem2             ; $cd '
>2931	90 28					.word	TKErr07                  ; $ce to
>2933	90 28					.word	TKErr05                  ; $cf step
>2935	0e 24					.word	CallProc                 ; $d0 proc
>2937	0c 23					.word	CommandLocal             ; $d1 local
>2939	cc 20					.word	Command_Dim              ; $d2 dim
>293b	95 21					.word	Command_Rem              ; $d3 rem
>293d	da 20					.word	CommandLet               ; $d4 let
>293f	16 1f					.word	Command_Input            ; $d5 input
>2941	05 23					.word	Command_ELSE             ; $d6 else
>2943	9d 20					.word	Command_VDU              ; $d7 vdu
>2945	cc 1f					.word	Command_Print            ; $d8 print
>2947	7e 1e					.word	CommandData              ; $d9 data
>2949	90 28					.word	TKErr13                  ; $da image
>294b	90 28					.word	TKErr12                  ; $db at
>294d	90 28					.word	TKErr14                  ; $dc flip
>294f	be 20					.word	Command_Assert           ; $dd assert
>2951	58 21					.word	Command_Poke             ; $de poke
>2953	5c 21					.word	Command_Doke             ; $df doke
>2955	60 21					.word	Command_Loke             ; $e0 loke
>2957	6d 20					.word	Command_Ink              ; $e1 ink
>2959	78 20					.word	Command_Paper            ; $e2 paper
>295b	67 20					.word	Command_CLS              ; $e3 cls
>295d	83 20					.word	Command_Locate           ; $e4 locate
>295f	69 28					.word	CommandAssemblerLabel    ; $e5 .
>2961	90 28					.word	TKErr11                  ; $e6 #
>2963	51 26					.word	CommandClear             ; $e7 clear

;******  Return to file: main/commands/system/run.asm


;******  Processing file: main/commands/system/../../../generated/tokenvectors1.inc

.2965					Group1Vectors:
>2965	87 27					.word	CommandLoad              ; $86 load
>2967	9c 27					.word	CommandSave              ; $87 save
>2969	ac 26					.word	CommandList              ; $88 list
>296b	e0 27					.word	Command_New              ; $89 new
>296d	70 28					.word	CommandBreak             ; $8a break
>296f	ee 27					.word	Command_Run              ; $8b run
>2971	53 1e					.word	CommandRead              ; $8c read
>2973	87 1e					.word	CommandRestore           ; $8d restore
>2975	a7 21					.word	CommandEnd               ; $8e end
>2977	a2 21					.word	CommandStop              ; $8f stop
>2979	aa 21					.word	CommandXemu              ; $90 xemu
>297b	e4 1e					.word	CommandGOTO              ; $91 goto
>297d	b9 1e					.word	CommandGOSUB             ; $92 gosub
>297f	cc 1e					.word	CommandRETURN            ; $93 return

;******  Return to file: main/commands/system/run.asm


;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/binary/binary.asm

.2981					BinaryProcess:
.2981	b5 48		lda $48,x			lda 	esType,x 					; or type bytes together and check bit 6.
.2983	15 49		ora $49,x			ora 	esType+1,x 					; (the float bit)
.2985	0a		asl a				asl 	a
.2986	30 0e		bmi $2996			bmi 	_BPStringType 				; if bit 6 is set, then string type, error
.2988	18		clc				clc 								; return CC for integer
.2989	29 02		and #$02			and 	#$02 						; $02 because of ASL A. check original bit 1.
.298b	f0 08		beq $2995			beq 	_BPExit 					; if both integer then return with CC.
.298d	20 9b 29	jsr $299b			jsr 	BPMakeBothFloat 			; make both float
.2990	a9 01		lda #$01			lda 	#$01 						; set result type to float
.2992	95 48		sta $48,x			sta 	esType,x
.2994	38		sec				sec 								; and return with carry set.
.2995					_BPExit:
.2995	60		rts				rts
.2996					_BPStringType:
.2996	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.2998	20 18 15	jsr $1518		jsr	errorHandler
.299b					BPMakeBothFloat:
.299b	e8		inx				inx
.299c	20 a0 29	jsr $29a0			jsr 	BPMakeFloat 				; one is a float, so we do both as floats.
.299f	ca		dex				dex
.29a0					BPMakeFloat:
.29a0	b5 48		lda $48,x			lda 	esType,x 					; get type bit which is in bit 0
.29a2	4a		lsr a				lsr 	a
.29a3	b0 07		bcs $29ac			bcs 	_BPIsFloat 					; already a float if set.
.29a5	8a		txa				txa
.29a6	a2 1c		ldx #$1c		ldx	#28
.29a8	20 5d 1c	jsr $1c5d		jsr	floatingpointHandler
.29ab	aa		tax				tax
.29ac					_BPIsFloat:
.29ac	60		rts				rts
.29ad					AddHandler:
.29ad	20 7e 2b	jsr $2b7e			jsr 	DereferenceTwo 				; dereference top two on stack.
.29b0	b5 48		lda $48,x			lda 	esType,x 					; check two strings.
.29b2	35 49		and $49,x			and 	esType+1,x
.29b4	29 40		and #$40			and 	#$40 						; if both have bit 6 set ... we have two strings
.29b6	d0 10		bne $29c8			bne 	_AHStringConcat				; concatenate strings.
.29b8	20 81 29	jsr $2981			jsr 	BinaryProcess 				; check to see if either is float
.29bb	b0 03		bcs $29c0			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.29bd	4c d9 32	jmp $32d9			jmp 	MInt32Add 							; else do it as integer.
.29c0					_IsFPOperation:
.29c0	8a		txa				txa 								; call the relevant fp routine
.29c1	a2 04		ldx #$04		ldx	#4
.29c3	20 5d 1c	jsr $1c5d		jsr	floatingpointHandler
.29c6	aa		tax				tax
.29c7	60		rts				rts
.29c8					_AHStringConcat:
.29c8	8a		txa				txa 								; handled by the string module.
.29c9	a2 06		ldx #$06		ldx	#6
.29cb	20 a0 37	jsr $37a0		jsr	stringHandler
.29ce	aa		tax				tax
.29cf	60		rts				rts
.29d0					SubHandler:
.29d0	20 7e 2b	jsr $2b7e			jsr 	DereferenceTwo
.29d3	20 81 29	jsr $2981			jsr 	BinaryProcess 				; check to see if either is float
.29d6	b0 03		bcs $29db			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.29d8	4c f3 32	jmp $32f3			jmp 	MInt32Sub 							; else do it as integer.
.29db					_IsFPOperation:
.29db	8a		txa				txa 								; call the relevant fp routine
.29dc	a2 12		ldx #$12		ldx	#18
.29de	20 5d 1c	jsr $1c5d		jsr	floatingpointHandler
.29e1	aa		tax				tax
.29e2	60		rts				rts
.29e3					MulHandler:
.29e3	20 7e 2b	jsr $2b7e			jsr 	DereferenceTwo
.29e6	20 81 29	jsr $2981			jsr 	BinaryProcess 				; check to see if either is float
.29e9	b0 03		bcs $29ee			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.29eb	4c 0d 33	jmp $330d			jmp 	MInt32Multiply 							; else do it as integer.
.29ee					_IsFPOperation:
.29ee	8a		txa				txa 								; call the relevant fp routine
.29ef	a2 0c		ldx #$0c		ldx	#12
.29f1	20 5d 1c	jsr $1c5d		jsr	floatingpointHandler
.29f4	aa		tax				tax
.29f5	60		rts				rts
.29f6					DivHandler:
.29f6	20 7e 2b	jsr $2b7e			jsr 	DereferenceTwo
.29f9	20 81 29	jsr $2981			jsr 	BinaryProcess 				; check to see if either is float
.29fc	b0 03		bcs $2a01			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.29fe	4c ca 31	jmp $31ca			jmp 	MInt32SDivide 							; else do it as integer.
.2a01					_IsFPOperation:
.2a01	8a		txa				txa 								; call the relevant fp routine
.2a02	a2 08		ldx #$08		ldx	#8
.2a04	20 5d 1c	jsr $1c5d		jsr	floatingpointHandler
.2a07	aa		tax				tax
.2a08	60		rts				rts
.2a09					ModHandler:
.2a09	20 7e 2b	jsr $2b7e			jsr 	DereferenceTwo
.2a0c	20 81 29	jsr $2981			jsr 	BinaryProcess 				; check to see if either is float
.2a0f	b0 03		bcs $2a14			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.2a11	4c 48 32	jmp $3248			jmp 	MInt32Modulus 							; else do it as integer.
.2a14					_IsFPOperation:
.2a14	8a		txa				txa 								; call the relevant fp routine
.2a15	a2 0a		ldx #$0a		ldx	#10
.2a17	20 5d 1c	jsr $1c5d		jsr	floatingpointHandler
.2a1a	aa		tax				tax
.2a1b	60		rts				rts
.2a1c					XorHandler:
.2a1c	20 7e 2b	jsr $2b7e			jsr 	DereferenceTwo
.2a1f	20 81 29	jsr $2981			jsr 	BinaryProcess 				; check to see if either is float
.2a22	b0 03		bcs $2a27			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.2a24	4c 7c 31	jmp $317c			jmp 	MInt32Xor 							; else do it as integer.
.2a27					_IsFPOperation:
.2a27	8a		txa				txa 								; call the relevant fp routine
.2a28	a2 0a		ldx #$0a		ldx	#10
.2a2a	20 5d 1c	jsr $1c5d		jsr	floatingpointHandler
.2a2d	aa		tax				tax
.2a2e	60		rts				rts
.2a2f					OrHandler:
.2a2f	20 7e 2b	jsr $2b7e			jsr 	DereferenceTwo
.2a32	20 81 29	jsr $2981			jsr 	BinaryProcess 				; check to see if either is float
.2a35	b0 03		bcs $2a3a			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.2a37	4c 63 31	jmp $3163			jmp 	MInt32Or 							; else do it as integer.
.2a3a					_IsFPOperation:
.2a3a	8a		txa				txa 								; call the relevant fp routine
.2a3b	a2 0a		ldx #$0a		ldx	#10
.2a3d	20 5d 1c	jsr $1c5d		jsr	floatingpointHandler
.2a40	aa		tax				tax
.2a41	60		rts				rts
.2a42					AndHandler:
.2a42	20 7e 2b	jsr $2b7e			jsr 	DereferenceTwo
.2a45	20 81 29	jsr $2981			jsr 	BinaryProcess 				; check to see if either is float
.2a48	b0 03		bcs $2a4d			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.2a4a	4c 4a 31	jmp $314a			jmp 	MInt32And 							; else do it as integer.
.2a4d					_IsFPOperation:
.2a4d	8a		txa				txa 								; call the relevant fp routine
.2a4e	a2 0a		ldx #$0a		ldx	#10
.2a50	20 5d 1c	jsr $1c5d		jsr	floatingpointHandler
.2a53	aa		tax				tax
.2a54	60		rts				rts
.2a55					ShlHandler:
.2a55	20 7e 2b	jsr $2b7e			jsr 	DereferenceTwo
.2a58	20 81 29	jsr $2981			jsr 	BinaryProcess 				; check to see if either is float
.2a5b	b0 03		bcs $2a60			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.2a5d	4c d6 2a	jmp $2ad6			jmp 	Mint32ShiftLeftX 							; else do it as integer.
.2a60					_IsFPOperation:
.2a60	8a		txa				txa 								; call the relevant fp routine
.2a61	a2 0a		ldx #$0a		ldx	#10
.2a63	20 5d 1c	jsr $1c5d		jsr	floatingpointHandler
.2a66	aa		tax				tax
.2a67	60		rts				rts
.2a68					ShrHandler:
.2a68	20 7e 2b	jsr $2b7e			jsr 	DereferenceTwo
.2a6b	20 81 29	jsr $2981			jsr 	BinaryProcess 				; check to see if either is float
.2a6e	b0 03		bcs $2a73			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.2a70	4c d9 2a	jmp $2ad9			jmp 	MInt32ShiftRightX 							; else do it as integer.
.2a73					_IsFPOperation:
.2a73	8a		txa				txa 								; call the relevant fp routine
.2a74	a2 0a		ldx #$0a		ldx	#10
.2a76	20 5d 1c	jsr $1c5d		jsr	floatingpointHandler
.2a79	aa		tax				tax
.2a7a	60		rts				rts
.2a7b					WordRefHandler:
.2a7b	20 7e 2b	jsr $2b7e			jsr 	DereferenceTwo
.2a7e	20 81 29	jsr $2981			jsr 	BinaryProcess 				; check to see if either is float
.2a81	b0 03		bcs $2a86			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.2a83	4c c8 2a	jmp $2ac8			jmp 	MInt32WordIndirect 							; else do it as integer.
.2a86					_IsFPOperation:
.2a86	8a		txa				txa 								; call the relevant fp routine
.2a87	a2 0a		ldx #$0a		ldx	#10
.2a89	20 5d 1c	jsr $1c5d		jsr	floatingpointHandler
.2a8c	aa		tax				tax
.2a8d	60		rts				rts
.2a8e					ByteRefHandler:
.2a8e	20 7e 2b	jsr $2b7e			jsr 	DereferenceTwo
.2a91	20 81 29	jsr $2981			jsr 	BinaryProcess 				; check to see if either is float
.2a94	b0 03		bcs $2a99			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.2a96	4c cc 2a	jmp $2acc			jmp 	MInt32ByteIndirect 							; else do it as integer.
.2a99					_IsFPOperation:
.2a99	8a		txa				txa 								; call the relevant fp routine
.2a9a	a2 0a		ldx #$0a		ldx	#10
.2a9c	20 5d 1c	jsr $1c5d		jsr	floatingpointHandler
.2a9f	aa		tax				tax
.2aa0	60		rts				rts
.2aa1					PowerHandler:
.2aa1	20 7e 2b	jsr $2b7e			jsr 	DereferenceTwo
.2aa4	20 81 29	jsr $2981			jsr 	BinaryProcess 				; check to see if either is float
.2aa7	b0 03		bcs $2aac			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.2aa9	4c b4 2a	jmp $2ab4			jmp 	PowerInteger 							; else do it as integer.
.2aac					_IsFPOperation:
.2aac	8a		txa				txa 								; call the relevant fp routine
.2aad	a2 18		ldx #$18		ldx	#24
.2aaf	20 5d 1c	jsr $1c5d		jsr	floatingpointHandler
.2ab2	aa		tax				tax
.2ab3	60		rts				rts
.2ab4					PowerInteger:
.2ab4	20 9b 29	jsr $299b			jsr 	BPMakeBothFloat				; make them float.
.2ab7	8a		txa				txa
.2ab8	a2 18		ldx #$18		ldx	#24
.2aba	20 5d 1c	jsr $1c5d		jsr	floatingpointHandler
.2abd	a2 14		ldx #$14		ldx	#20
.2abf	20 5d 1c	jsr $1c5d		jsr	floatingpointHandler
.2ac2	aa		tax				tax
.2ac3	a9 00		lda #$00			lda 	#0 							; make type integer
.2ac5	95 48		sta $48,x			sta 	esType,x
.2ac7	60		rts				rts
.2ac8					Mint32WordIndirect:
.2ac8	a9 80		lda #$80	 		lda 	#$80 				 		; word reference type (bit 7 set)
.2aca	d0 02		bne $2ace			bne 	Min32Indirect
.2acc					Mint32ByteIndirect:
.2acc	a9 a0		lda #$a0			lda 	#$A0 						; byte reference type (bit 7, bit 5 set)
.2ace					Min32Indirect:
.2ace	48		pha				pha 								; save the indirection
.2acf	20 d9 32	jsr $32d9			jsr 	MInt32Add 					; add a!b a?b
.2ad2	68		pla				pla 								; and set the type to reference.
.2ad3	95 48		sta $48,x			sta 	esType,x 	 				; so a!b => a+b and it's a reference....
.2ad5	60		rts				rts
.2ad6					Mint32ShiftLeftX:
.2ad6	18		clc				clc 								; CC shift left
.2ad7	90 01		bcc $2ada			bcc 	Mint32Shift
.2ad9					Mint32ShiftRightX:
.2ad9	38		sec				sec 								; CS shift right
.2ada					Mint32Shift:
.2ada	08		php				php 								; save carry flag on stack.
.2adb	b5 59		lda $59,x			lda 	esInt1+1,x 					; if shift >= 32 then it is zero.
.2add	15 61		ora $61,x			ora 	esInt2+1,x
.2adf	15 69		ora $69,x			ora 	esInt3+1,x
.2ae1	d0 1e		bne $2b01			bne 	_MShiftZero
.2ae3	b5 51		lda $51,x			lda 	esInt0+1,x
.2ae5	c9 20		cmp #$20			cmp 	#32
.2ae7	b0 18		bcs $2b01			bcs 	_MShiftZero
.2ae9					_MShiftLoop:
.2ae9	b5 51		lda $51,x			lda 	esInt0+1,x 					; check count is zero
.2aeb	f0 12		beq $2aff			beq 	_MShiftExit
.2aed	d6 51		dec $51,x			dec 	esInt0+1,x
.2aef	28		plp				plp 								; restore and save carry
.2af0	08		php				php
.2af1	90 06		bcc $2af9			bcc 	_MShiftLeft 				; and shift left/right accordingly.
.2af3	20 13 34	jsr $3413			jsr 	Mint32ShiftRight
.2af6	4c e9 2a	jmp $2ae9			jmp 	_MShiftLoop
.2af9					_MShiftLeft:
.2af9	20 0a 34	jsr $340a			jsr 	Mint32ShiftLeft
.2afc	4c e9 2a	jmp $2ae9			jmp 	_MShiftLoop
.2aff					_MShiftExit:
.2aff	28		plp				plp	 								; throw saved carry and exit
.2b00	60		rts				rts
.2b01					_MShiftZero:
.2b01	4c f5 33	jmp $33f5			jmp 	MInt32False 				; return 0 as shifted >= 32 times.

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/binary/compare.asm

.2b04					PerformComparison:
.2b04	20 7e 2b	jsr $2b7e			jsr 	DereferenceTwo 				; make both values.
.2b07	b5 48		lda $48,x			lda 	esType,x 					; check for two strings.
.2b09	35 49		and $49,x			and 	esType+1,x
.2b0b	0a		asl a				asl 	a 							; bit 7 set if both bit 6s were set.
.2b0c	30 1d		bmi $2b2b			bmi 	_PCIsString
.2b0e	b5 48		lda $48,x			lda 	esType,x 					; check either is floating point.
.2b10	15 49		ora $49,x			ora 	esType+1,x
.2b12	0a		asl a				asl 	a 							; shift bit 6 (string) to bit 7, mixed types
.2b13	30 22		bmi $2b37			bmi 	_PCError
.2b15	29 02		and #$02			and 	#$02 						; because of ASL, check type in bit 0
.2b17	f0 0f		beq $2b28			beq 	_PCIsInteger 				; if not two integers, e.g. 1 of the bits is set
.2b19	20 9b 29	jsr $299b			jsr 	BPMakeBothFloat 			; make both float
.2b1c	8a		txa				txa
.2b1d	a2 06		ldx #$06		ldx	#6
.2b1f	20 5d 1c	jsr $1c5d		jsr	floatingpointHandler
.2b22	86 32		stx $32				stx 	tempShort 					; save result
.2b24	aa		tax				tax
.2b25	a5 32		lda $32				lda 	tempShort
.2b27	60		rts				rts
.2b28					_PCIsInteger:
.2b28	4c 95 31	jmp $3195			jmp 	MInt32Compare
.2b2b					_PCIsString:
.2b2b	8a		txa				txa 								; A has SP
.2b2c	a2 0a		ldx #$0a		ldx	#10
.2b2e	20 a0 37	jsr $37a0		jsr	stringHandler
.2b31	86 32		stx $32				stx 	tempShort 					; save result
.2b33	aa		tax				tax 								; put SP back in X and get result.
.2b34	a5 32		lda $32				lda 	tempShort
.2b36	60		rts				rts
.2b37					_PCError:
.2b37	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.2b39	20 18 15	jsr $1518		jsr	errorHandler
.2b3c					CompareEquals:
.2b3c	20 04 2b	jsr $2b04			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.2b3f	c9 00		cmp #$00			cmp 	#$00 						; and we do something if it is = or <> a value.
.2b41	f0 35		beq $2b78			beq  	CompareTrue
.2b43	4c 7b 2b	jmp $2b7b			jmp 	CompareFalse
.2b46					CompareLess:
.2b46	20 04 2b	jsr $2b04			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.2b49	c9 ff		cmp #$ff			cmp 	#$FF 						; and we do something if it is = or <> a value.
.2b4b	f0 2b		beq $2b78			beq  	CompareTrue
.2b4d	4c 7b 2b	jmp $2b7b			jmp 	CompareFalse
.2b50					CompareGreater:
.2b50	20 04 2b	jsr $2b04			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.2b53	c9 01		cmp #$01			cmp 	#$01 						; and we do something if it is = or <> a value.
.2b55	f0 21		beq $2b78			beq  	CompareTrue
.2b57	4c 7b 2b	jmp $2b7b			jmp 	CompareFalse
.2b5a					CompareNotEquals:
.2b5a	20 04 2b	jsr $2b04			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.2b5d	c9 00		cmp #$00			cmp 	#$00 						; and we do something if it is = or <> a value.
.2b5f	d0 17		bne $2b78			bne  	CompareTrue
.2b61	4c 7b 2b	jmp $2b7b			jmp 	CompareFalse
.2b64					CompareGreaterEq:
.2b64	20 04 2b	jsr $2b04			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.2b67	c9 ff		cmp #$ff			cmp 	#$FF 						; and we do something if it is = or <> a value.
.2b69	d0 0d		bne $2b78			bne  	CompareTrue
.2b6b	4c 7b 2b	jmp $2b7b			jmp 	CompareFalse
.2b6e					CompareLessEq:
.2b6e	20 04 2b	jsr $2b04			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.2b71	c9 01		cmp #$01			cmp 	#$01 						; and we do something if it is = or <> a value.
.2b73	d0 03		bne $2b78			bne  	CompareTrue
.2b75	4c 7b 2b	jmp $2b7b			jmp 	CompareFalse
.2b78					CompareTrue:
.2b78	4c f1 33	jmp $33f1			jmp 	MInt32True
.2b7b					CompareFalse:
.2b7b	4c f5 33	jmp $33f5			jmp 	MInt32False

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/dereference.asm

.2b7e					DereferenceTwo:
.2b7e	e8		inx				inx
.2b7f	20 83 2b	jsr $2b83			jsr 	DereferenceOne
.2b82	ca		dex				dex
.2b83					DereferenceOne:
.2b83	b5 48		lda $48,x			lda 	esType,x
.2b85	10 3d		bpl $2bc4			bpl 	_DRNotReference 			; is it a reference ? if not, we don't need to do anything
.2b87	4a		lsr a				lsr 	a 							; do float dereference if bit 0 set.
.2b88	b0 3b		bcs $2bc5			bcs 	_DRFloatDeReference
.2b8a	98		tya				tya
.2b8b	48		pha				pha
.2b8c	b5 50		lda $50,x			lda 	esInt0,x 					; copy address to temp0
.2b8e	85 2a		sta $2a				sta 	temp0
.2b90	b5 58		lda $58,x			lda 	esInt1,x
.2b92	85 2b		sta $2b				sta 	temp0+1
.2b94	a9 00		lda #$00			lda 	#0 							; clear esInt1..3
.2b96	95 58		sta $58,x			sta 	esInt1,x
.2b98	95 60		sta $60,x			sta 	esInt2,x
.2b9a	95 68		sta $68,x			sta 	esInt3,x
.2b9c	b5 48		lda $48,x			lda 	esType,x 					; get the type byte.
.2b9e	29 60		and #$60			and 	#$60 						; get string flag ($40) and byte flag ($20)
.2ba0	0a		asl a				asl 	a 							; now string ($80) byte ($40)
.2ba1	30 0d		bmi $2bb0			bmi 	_DeRefString 				; string, 2 bytes only
.2ba3	d0 11		bne $2bb6			bne 	_DeRefByte 					; byte 1 byte only
.2ba5					_DeRefLong:
.2ba5	a0 03		ldy #$03			ldy 	#3
.2ba7	b1 2a		lda ($2a),y			lda 	(temp0),y
.2ba9	95 68		sta $68,x			sta 	esInt3,x
.2bab	88		dey				dey
.2bac	b1 2a		lda ($2a),y			lda 	(temp0),y
.2bae	95 60		sta $60,x			sta 	esInt2,x
.2bb0					_DeRefString:
.2bb0	a0 01		ldy #$01			ldy 	#1
.2bb2	b1 2a		lda ($2a),y			lda 	(temp0),y
.2bb4	95 58		sta $58,x			sta 	esInt1,x
.2bb6					_DeRefByte:
.2bb6	a0 00		ldy #$00			ldy 	#0
.2bb8	b1 2a		lda ($2a),y			lda 	(temp0),y
.2bba	95 50		sta $50,x			sta 	esInt0,x
.2bbc	b5 48		lda $48,x			lda 	esType,x 					; clear byte and deref bits.
.2bbe	29 40		and #$40			and 	#$40
.2bc0	95 48		sta $48,x			sta 	esType,x
.2bc2	68		pla				pla
.2bc3	a8		tay				tay
.2bc4					_DRNotReference
.2bc4	60		rts				rts
.2bc5					_DRFloatDereference:
.2bc5	20 4f 21	jsr $214f			jsr 	TOSToTemp0 					; address to deref in temp0
.2bc8	8a		txa				txa
.2bc9	a2 1e		ldx #$1e		ldx	#30
.2bcb	20 5d 1c	jsr $1c5d		jsr	floatingpointHandler
.2bce	aa		tax				tax
.2bcf	a9 01		lda #$01			lda 	#$01 						; type to FP (float)
.2bd1	95 48		sta $48,x			sta 	esType,x
.2bd3	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/evaluate.asm

.2bd4					EvaluateLevel:
.2bd4	e0 08		cpx #$08			cpx 	#StackSize 					; check stack overflow
.2bd6	b0 1e		bcs $2bf6			bcs 	_ELStack
.2bd8	48		pha				pha 								; save precedence level.
.2bd9	a9 00		lda #$00			lda 	#0 							; zero the current stack level.
.2bdb	95 50		sta $50,x			sta 	esInt0,x
.2bdd	95 58		sta $58,x			sta 	esInt1,x
.2bdf	95 60		sta $60,x			sta 	esInt2,x
.2be1	95 68		sta $68,x			sta 	esInt3,x
.2be3	95 48		sta $48,x			sta 	esType,x 					; zero the type (integer value)
.2be5	b1 28		lda ($28),y			lda 	(codePtr),y	 				; look at first token/character
.2be7	30 26		bmi $2c0f			bmi 	_ELIsToken 					; if -ve could be string, float, or unary function.
.2be9	0a		asl a				asl 	a 							; if 00-3F then will now be PL and it's a variable.
.2bea	30 0f		bmi $2bfb			bmi 	_ELIsConstant 				; 40-7F will be -ve and that's an integer constant.
.2bec	8a		txa				txa 								; stack level in X
.2bed	a2 02		ldx #$02		ldx	#2
.2bef	20 97 43	jsr $4397		jsr	variableHandler
.2bf2	aa		tax				tax
.2bf3	4c 38 2c	jmp $2c38			jmp		_ELHasTerm
.2bf6					_ELStack:
.2bf6	a2 23		ldx #$23			ldx 	#ErrorID_NumStack
.2bf8	20 18 15	jsr $1518		jsr	errorHandler
.2bfb					_ELIsConstant:
.2bfb	4a		lsr a				lsr 	a 							; get the value back
.2bfc	29 3f		and #$3f			and 	#$3F 						; force into range 0-63
.2bfe	95 50		sta $50,x			sta 	esInt0,x 					; and put in LSB.
.2c00					_ELCheckNext:
.2c00	c8		iny				iny 								; look at next
.2c01	b1 28		lda ($28),y			lda 	(codePtr),y
.2c03	49 40		eor #$40			eor 	#$40 						; shift around so 40-7F => 00-3F
.2c05	c9 40		cmp #$40			cmp 	#$40 						; out of range ?
.2c07	b0 2f		bcs $2c38			bcs 	_ELHasTerm 					; done getting the constant.
.2c09	20 d1 2c	jsr $2cd1			jsr 	ELShiftByteIn 				; shift byte into position.
.2c0c	4c 00 2c	jmp $2c00			jmp 	_ELCheckNext
.2c0f					_ELIsToken:
.2c0f	c9 85		cmp #$85			cmp 	#TOK_STR 					; handle strings.
.2c11	f0 0f		beq $2c22			beq 	_ELIsString
.2c13	c9 84		cmp #$84			cmp 	#TOK_FPC 					; if no, then check unary.
.2c15	d0 5f		bne $2c76			bne 	_ELCheckUnary
.2c17	8a		txa				txa 								; put X into A
.2c18	c8		iny				iny 								; skip over the float marker
.2c19	a2 1a		ldx #$1a		ldx	#26
.2c1b	20 5d 1c	jsr $1c5d		jsr	floatingpointHandler
.2c1e	aa		tax				tax 								; restore X
.2c1f	4c 38 2c	jmp $2c38			jmp 	_ELHasTerm
.2c22					_ELIsString:
.2c22	98		tya				tya 								; address of string is codePtr+y+1
.2c23	38		sec				sec
.2c24	65 28		adc $28				adc 	codePtr
.2c26	95 50		sta $50,x			sta 	esInt0,x
.2c28	a5 29		lda $29				lda 	codePtr+1
.2c2a	69 00		adc #$00			adc 	#0
.2c2c	95 58		sta $58,x			sta 	esInt1,x
.2c2e	a9 40		lda #$40			lda 	#$40 						; set type to string value
.2c30	95 48		sta $48,x			sta 	esType,x
.2c32	c8		iny				iny 								; skip over string.
.2c33	98		tya				tya
.2c34	38		sec				sec									; +1 for the length itself.
.2c35	71 28		adc ($28),y			adc 	(codePtr),y
.2c37	a8		tay				tay 								; and fall through to term loop code.
.2c38					_ELHasTerm:
.2c38	b1 28		lda ($28),y			lda 	(codePtr),y
.2c3a	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; check in the correct range for binary tokens.
.2c3c	90 04		bcc $2c42			bcc 	_ELPopExit
.2c3e	c9 99		cmp #$99			cmp 	#TOK_STRUCTST
.2c40	90 02		bcc $2c44			bcc 	_ELHasBinaryTerm
.2c42					_ELPopExit:
.2c42	68		pla				pla
.2c43					_ELExit:
.2c43	60		rts				rts
.2c44					_ELHasBinaryTerm:
.2c44	84 32		sty $32				sty 	tempShort 					; save position
.2c46	a8		tay				tay 								; use token as an index and get the precedence.
.2c47	b9 79 2c	lda $2c79,y			lda 	ELBinaryOperatorInfo-TOK_BINARYST,y
.2c4a	a4 32		ldy $32				ldy 	tempShort 					; restore Y
.2c4c	85 32		sta $32				sta 	tempShort 					; save precedence in memory.
.2c4e	68		pla				pla 								; restore current level.
.2c4f	c5 32		cmp $32				cmp 	tempShort 					; if current >= operator then exit
.2c51	b0 f0		bcs $2c43			bcs 	_ELExit
.2c53	48		pha				pha 								; save current level back on the stack.
.2c54	b1 28		lda ($28),y			lda 	(codePtr),y 				; save the binary operator on the stack and skip it.
.2c56	48		pha				pha
.2c57	c8		iny				iny
.2c58	e8		inx				inx 								; calculate the RHS at the operator precedence.
.2c59	a5 32		lda $32				lda 	tempShort
.2c5b	20 d4 2b	jsr $2bd4			jsr 	EvaluateLevel
.2c5e	ca		dex				dex
.2c5f	68		pla				pla 								; get the operator back out.
.2c60					_ELExecuteA:
.2c60	86 32		stx $32				stx 	tempShort 					; upload the vectors. Would be nice to use jmp (aaaa,x)
.2c62	0a		asl a				asl 	a 							; but not practical. May use push/rts later.
.2c63	aa		tax				tax
.2c64	bd 95 28	lda $2895,x			lda 	Group0Vectors,x
.2c67	85 2a		sta $2a				sta 	temp0
.2c69	bd 96 28	lda $2896,x			lda 	Group0Vectors+1,x
.2c6c	85 2b		sta $2b				sta 	temp0+1
.2c6e	a6 32		ldx $32				ldx 	tempShort
.2c70	20 bd 2c	jsr $2cbd			jsr 	_ELCallTemp0
.2c73	4c 38 2c	jmp $2c38			jmp 	_ELHasTerm 					; and loop back round.
.2c76					_ELCheckUnary:
.2c76	c8		iny				iny 								; skip over token.
.2c77	c9 90		cmp #$90			cmp 	#TKW_MINUS 					; is it - term
.2c79	f0 19		beq $2c94			beq 	_ELMinus
.2c7b	c9 97		cmp #$97			cmp 	#TKW_PLING 					; is it ! or ? term
.2c7d	f0 2c		beq $2cab			beq 	_ELIndirect
.2c7f	c9 98		cmp #$98			cmp 	#TKW_QMARK
.2c81	f0 28		beq $2cab			beq 	_ELIndirect
.2c83	c9 83		cmp #$83			cmp 	#TOK_SHIFT3 				; is it the unary extension.
.2c85	f0 39		beq $2cc0			beq 	_ELExtension
.2c87	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST 				; must be TOK_UNARYST ... TOK_TOKENS
.2c89	90 04		bcc $2c8f			bcc 	_ELUSyntax
.2c8b	c9 c9		cmp #$c9			cmp 	#TOK_TOKENS
.2c8d	90 d1		bcc $2c60			bcc 	_ELExecuteA 				; if so do that token.
.2c8f					_ELUSyntax:
.2c8f	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.2c91	20 18 15	jsr $1518		jsr	errorHandler
.2c94					_ELMinus:
.2c94	20 26 2d	jsr $2d26			jsr 	EvaluateNumericTerm 		; get a number to negate.
.2c97	b5 48		lda $48,x			lda 	esType,x 					; is it integer
.2c99	f0 0a		beq $2ca5			beq 	_ELMinusInteger
.2c9b	8a		txa				txa
.2c9c	a2 0e		ldx #$0e		ldx	#14
.2c9e	20 5d 1c	jsr $1c5d		jsr	floatingpointHandler
.2ca1	aa		tax				tax
.2ca2	4c 38 2c	jmp $2c38			jmp 	_ELHasTerm
.2ca5					_ELMinusInteger:
.2ca5	20 af 33	jsr $33af			jsr 	MInt32Negate 				; do int negate
.2ca8	4c 38 2c	jmp $2c38			jmp 	_ELHasTerm
.2cab					_ELIndirect:
.2cab	48		pha				pha 								; save what we want (TKW_QMARK TWK_PLING)
.2cac	20 2f 2d	jsr $2d2f			jsr 	EvaluateIntegerTerm 		; integer address
.2caf	68		pla				pla
.2cb0	49 97		eor #$97			eor 	#TKW_PLING 					; now $00 if !
.2cb2	f0 02		beq $2cb6			beq 	_ELHaveModifier
.2cb4	a9 20		lda #$20			lda 	#$20 						; now $00 if !, $20 if ?
.2cb6					_ELHaveModifier:
.2cb6	09 80		ora #$80			ora 	#$80						; make it the appropriate reference.
.2cb8	95 48		sta $48,x			sta 	esType,x 					; $80 for ! $A0 for ?
.2cba	4c 38 2c	jmp $2c38			jmp 	_ELHasTerm
.2cbd					_ELCallTemp0:
.2cbd	6c 2a 00	jmp ($002a)			jmp 	(temp0)
.2cc0					_ELExtension:
.2cc0	8a		txa				txa 								; stack pos in A
.2cc1	20 60 18	jsr $1860		jsr	extensionHandler
.2cc4	aa		tax				tax 								; restore stack
.2cc5	4c 38 2c	jmp $2c38			jmp 	_ELHasTerm
.2cc8					UnaryParenthesis:
.2cc8	a9 00		lda #$00			lda 	#0 							; ( is a unary function ....
.2cca	20 d4 2b	jsr $2bd4			jsr 	EvaluateLevel
.2ccd	20 68 34	jsr $3468			jsr 	CheckRightParen 			; check for )
.2cd0	60		rts				rts
.2cd1					ELShiftByteIn:
.2cd1	48		pha				pha 								; save bits to shift in.
.2cd2	b5 68		lda $68,x			lda 	esInt3,x 					; save top most byte
.2cd4	48		pha				pha
.2cd5	b5 60		lda $60,x			lda 	esInt2,x 					; shift everything left 8 bits
.2cd7	95 68		sta $68,x			sta 	esInt3,x
.2cd9	b5 58		lda $58,x			lda 	esInt1,x
.2cdb	95 60		sta $60,x			sta 	esInt2,x
.2cdd	b5 50		lda $50,x			lda 	esInt0,x
.2cdf	95 58		sta $58,x			sta 	esInt1,x
.2ce1	a9 00		lda #$00			lda 	#0
.2ce3	95 50		sta $50,x			sta 	esInt0,x
.2ce5	68		pla				pla 								; now A:TOS is a 5 byte register, shift right twice.
.2ce6	29 03		and #$03			and 	#3 							; only want lower 2 bits
.2ce8	09 04		ora #$04			ora 	#4  						; set bit 2 - when 1 we are done
.2cea					_ELShiftLoop:
.2cea	4a		lsr a				lsr 	a
.2ceb	76 68		ror $68,x			ror 	esInt3,x
.2ced	76 60		ror $60,x			ror 	esInt2,x
.2cef	76 58		ror $58,x			ror 	esInt1,x
.2cf1	76 50		ror $50,x			ror 	esInt0,x
.2cf3	c9 01		cmp #$01			cmp 	#1
.2cf5	d0 f3		bne $2cea			bne 	_ELShiftLoop
.2cf7	68		pla				pla 								; get original 6 bit value and OR in.
.2cf8	29 3f		and #$3f			and 	#$3F
.2cfa	15 50		ora $50,x			ora 	esInt0,x
.2cfc	95 50		sta $50,x			sta 	esInt0,x
.2cfe	60		rts				rts
.2cff					ELBinaryOperatorInfo:

;******  Processing file: main/evaluate/../../generated/binarystructinfo.inc

>2cff	01					.byte	$01			; $86 and
>2d00	01					.byte	$01			; $87 or
>2d01	01					.byte	$01			; $88 xor
>2d02	02					.byte	$02			; $89 >=
>2d03	02					.byte	$02			; $8a <=
>2d04	02					.byte	$02			; $8b >
>2d05	02					.byte	$02			; $8c <
>2d06	02					.byte	$02			; $8d =
>2d07	02					.byte	$02			; $8e <>
>2d08	03					.byte	$03			; $8f +
>2d09	03					.byte	$03			; $90 -
>2d0a	04					.byte	$04			; $91 >>
>2d0b	04					.byte	$04			; $92 <<
>2d0c	04					.byte	$04			; $93 *
>2d0d	04					.byte	$04			; $94 /
>2d0e	04					.byte	$04			; $95 mod
>2d0f	05					.byte	$05			; $96 ^
>2d10	06					.byte	$06			; $97 !
>2d11	06					.byte	$06			; $98 ?
>2d12	82					.byte	$82			; $99 repeat
>2d13	82					.byte	$82			; $9a while
>2d14	82					.byte	$82			; $9b for
>2d15	82					.byte	$82			; $9c if
>2d16	82					.byte	$82			; $9d defproc
>2d17	80					.byte	$80			; $9e until
>2d18	80					.byte	$80			; $9f wend
>2d19	80					.byte	$80			; $a0 next
>2d1a	80					.byte	$80			; $a1 then
>2d1b	80					.byte	$80			; $a2 endif
>2d1c	80					.byte	$80			; $a3 endproc

;******  Return to file: main/evaluate/evaluate.asm


;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/support.asm

.2d1d					EvaluateTerm:
.2d1d	a9 0f		lda #$0f			lda 	#15 						; no binary operator has this high a precedence.
.2d1f	20 d4 2b	jsr $2bd4			jsr 	EvaluateLevel
.2d22	20 83 2b	jsr $2b83			jsr 	DereferenceOne
.2d25	60		rts				rts
.2d26					EvaluateNumericTerm:
.2d26	20 1d 2d	jsr $2d1d			jsr 	EvaluateTerm
.2d29	b5 48		lda $48,x			lda 	esType,x
.2d2b	0a		asl a				asl 	a 							; see if it's a string.
.2d2c	30 09		bmi $2d37			bmi 	ENTType
.2d2e	60		rts				rts
.2d2f					EvaluateIntegerTerm:
.2d2f	20 1d 2d	jsr $2d1d			jsr 	EvaluateTerm
.2d32	b5 48		lda $48,x			lda 	esType,x
.2d34	d0 01		bne $2d37			bne 	ENTType
.2d36	60		rts				rts
.2d37					ENTType:
.2d37	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.2d39	20 18 15	jsr $1518		jsr	errorHandler
.2d3c					EvaluateRoot:
.2d3c	a2 00		ldx #$00			ldx 	#0
.2d3e					Evaluate:
.2d3e	a9 00		lda #$00			lda 	#0
.2d40	20 d4 2b	jsr $2bd4			jsr 	EvaluateLevel
.2d43	20 83 2b	jsr $2b83			jsr 	DereferenceOne
.2d46	60		rts				rts
.2d47					EvaluateNumeric:
.2d47	20 3e 2d	jsr $2d3e			jsr 	Evaluate
.2d4a	b5 48		lda $48,x			lda 	esType,x
.2d4c	0a		asl a				asl 	a 							; see if it's a string.
.2d4d	30 e8		bmi $2d37			bmi 	ENTType
.2d4f	4a		lsr a				lsr 	a 							; shift float flag into carry.
.2d50	4a		lsr a				lsr 	a
.2d51	60		rts				rts
.2d52					EvaluateString:
.2d52	20 3e 2d	jsr $2d3e			jsr 	Evaluate
.2d55	b5 48		lda $48,x			lda 	esType,x
.2d57	0a		asl a				asl 	a 							; see if it's a string.
.2d58	10 dd		bpl $2d37			bpl 	ENTType
.2d5a	60		rts				rts
.2d5b					EvaluateRootInteger:
.2d5b	a2 00		ldx #$00			ldx 	#0
.2d5d					EvaluateInteger:
.2d5d	20 3e 2d	jsr $2d3e			jsr 	Evaluate
.2d60	b5 48		lda $48,x			lda 	esType,x
.2d62	d0 d3		bne $2d37			bne 	ENTType
.2d64	60		rts				rts
.2d65					EvaluateSmallInteger:
.2d65	20 5d 2d	jsr $2d5d			jsr 	EvaluateInteger
.2d68	b5 58		lda $58,x			lda 	esInt1,x
.2d6a	15 60		ora $60,x			ora 	esInt2,x
.2d6c	15 68		ora $68,x			ora 	esInt3,x
.2d6e	d0 03		bne $2d73			bne 	_ESIValue
.2d70	b5 50		lda $50,x			lda 	esInt0,x
.2d72	60		rts				rts
.2d73					_ESIValue:
.2d73	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.2d75	20 18 15	jsr $1518		jsr	errorHandler
.2d78					LinkEvaluate:
.2d78	aa		tax				tax
.2d79	20 3e 2d	jsr $2d3e			jsr 	Evaluate
.2d7c	8a		txa				txa
.2d7d	60		rts				rts
.2d7e					LinkEvaluateTerm:
.2d7e	aa		tax				tax
.2d7f	20 1d 2d	jsr $2d1d			jsr 	EvaluateTerm
.2d82	8a		txa				txa
.2d83	60		rts				rts
.2d84					LinkEvaluateInteger:
.2d84	aa		tax				tax
.2d85	20 5d 2d	jsr $2d5d			jsr 	EvaluateInteger
.2d88	8a		txa				txa
.2d89	60		rts				rts
.2d8a					LinkEvaluateString:
.2d8a	aa		tax				tax
.2d8b	20 52 2d	jsr $2d52			jsr 	EvaluateString
.2d8e	8a		txa				txa
.2d8f	60		rts				rts
.2d90					LinkEvaluateSmallInt:
.2d90	aa		tax				tax
.2d91	20 65 2d	jsr $2d65			jsr 	EvaluateSmallInteger
.2d94	8a		txa				txa
.2d95	60		rts				rts
.2d96					EvaluateReference:
.2d96	ad 10 2d	lda $2d10			lda 	ELBinaryOperatorInfo+TKW_PLING-TOK_BINARYST
.2d99	38		sec				sec 								; sub 1 to allow a!x b?x to work.
.2d9a	e9 01		sbc #$01			sbc 	#1
.2d9c	20 d4 2b	jsr $2bd4			jsr 	EvaluateLevel
.2d9f	b5 48		lda $48,x			lda 	esType,x
.2da1	10 01		bpl $2da4			bpl 	_ERFail
.2da3	60		rts				rts
.2da4					_ERFail:
.2da4	a2 0b		ldx #$0b			ldx 	#ErrorID_NoReference
.2da6	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary/convert.asm

.2da9					Event_Str:
.2da9	20 47 2d	jsr $2d47			jsr 	EvaluateNumeric 			; get a number.
.2dac	b5 48		lda $48,x			lda 	esType,x 					; is it floating point
.2dae	d0 13		bne $2dc3			bne 	_ESFloat
.2db0	20 06 2e	jsr $2e06			jsr 	ConvertGetBase 				; get base, or default.
.2db3	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.2db5	85 2a		sta $2a				sta 	temp0
.2db7	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.2db9	85 2b		sta $2b				sta 	1+(temp0)
.2dbb	b5 51		lda $51,x			lda 	esInt0+1,x 					; get the base
.2dbd	20 4b 33	jsr $334b			jsr 	MInt32ToString 				; convert to string.
.2dc0	4c d0 2d	jmp $2dd0			jmp 	_ESCloneExit 				; clone and exit.
.2dc3					_ESFloat:
.2dc3	20 68 34	jsr $3468			jsr 	CheckRightParen 			; check closing )
.2dc6	20 4f 21	jsr $214f			jsr 	TOSToTemp0 					; string address in temp0, goes here.
.2dc9	8a		txa				txa
.2dca	a2 16		ldx #$16		ldx	#22
.2dcc	20 5d 1c	jsr $1c5d		jsr	floatingpointHandler
.2dcf	aa		tax				tax
.2dd0					_ESCloneExit:
.2dd0	8a		txa				txa
.2dd1	a2 04		ldx #$04		ldx	#4
.2dd3	20 a0 37	jsr $37a0		jsr	stringHandler
.2dd6	aa		tax				tax
.2dd7	60		rts				rts
.2dd8					UnaryVal:
.2dd8	38		sec				sec 								; Carry set to return value
.2dd9	b0 01		bcs $2ddc			bcs 	ValueMain
.2ddb					UnaryIsVal:
.2ddb	18		clc				clc									; Carry clear to return legitimacy
.2ddc					ValueMain:
.2ddc	08		php				php 								; save results (CS is value, CC is validation)
.2ddd	20 52 2d	jsr $2d52			jsr 	EvaluateString
.2de0	20 06 2e	jsr $2e06			jsr 	ConvertGetBase 				; get base, if any.
.2de3	98		tya				tya
.2de4	48		pha				pha
.2de5	20 4f 21	jsr $214f			jsr 	TOSToTemp0 					; string address in temp0, goes here.
.2de8	b5 51		lda $51,x			lda 	esInt0+1,x 					; get the base
.2dea	29 7f		and #$7f			and 	#$7F 						; ignore the sign bit.
.2dec	20 63 32	jsr $3263			jsr 	MInt32FromString 			; convert it back from a string.
.2def	b0 0c		bcs $2dfd			bcs 	_VMSuccess 					; successfully converted.
.2df1	b5 51		lda $51,x			lda 	esInt0+1,x 					; is base the default
.2df3	c9 8a		cmp #$8a			cmp 	#$80+10 					; if no, then it is integer only.
.2df5	f0 00		beq $2df7			beq 	_VMFailed 	 				; so we failed.
.2df7					_VMFailed:
.2df7	68		pla				pla
.2df8	a8		tay				tay
.2df9	28		plp				plp
.2dfa	4c f5 33	jmp $33f5			jmp 	MInt32False 				; return 0 whatever.
.2dfd					_VMSuccess:
.2dfd	68		pla				pla
.2dfe	a8		tay				tay
.2dff	28		plp				plp 								; if CS the it was val() so we want the value.
.2e00	b0 03		bcs $2e05			bcs 	_VMExit
.2e02	4c f1 33	jmp $33f1			jmp 	MInt32True 					; otherwise return true as successful.
.2e05					_VMExit:
.2e05	60		rts				rts
.2e06					ConvertGetBase:
.2e06	a9 8a		lda #$8a			lda 	#10+$80 					; default base 10 signed.
.2e08	95 51		sta $51,x			sta 	esInt0+1,x
.2e0a	b1 28		lda ($28),y			lda 	(codePtr),y 				; check for ,base)
.2e0c	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.2e0e	d0 0e		bne $2e1e			bne 	_CGBDone 					; not found, should be )
.2e10	e8		inx				inx 								; next level
.2e11	c8		iny				iny 								; skip comma.
.2e12	20 65 2d	jsr $2d65			jsr 	EvaluateSmallInteger		; evaluate the base.
.2e15	ca		dex				dex
.2e16	c9 02		cmp #$02			cmp 	#2 							; base range is 2..16
.2e18	90 08		bcc $2e22			bcc 	_CGBValue 					; (it should work as high as 37)
.2e1a	c9 11		cmp #$11			cmp 	#17
.2e1c	b0 04		bcs $2e22			bcs 	_CGBValue
.2e1e					_CGBDone:
.2e1e	20 68 34	jsr $3468			jsr 	CheckRightParen
.2e21	60		rts				rts
.2e22					_CGBValue:
.2e22	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.2e24	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary/event.asm

.2e27					EventFunction:
.2e27	20 96 2d	jsr $2d96			jsr 	EvaluateReference			; get the variable reference that tracks the event
.2e2a	b5 48		lda $48,x			lda 	esType,x
.2e2c	c9 80		cmp #$80			cmp 	#$80 						; must be integer reference
.2e2e	d0 5b		bne $2e8b			bne 	_EFType
.2e30	20 75 34	jsr $3475			jsr 	CheckComma
.2e33	e8		inx				inx
.2e34	20 5d 2d	jsr $2d5d			jsr 	EvaluateInteger		 		; get the elapsed time between firing.
.2e37	20 68 34	jsr $3468			jsr 	CheckRightParen 			; finish off with the right bracket
.2e3a	ca		dex				dex
.2e3b	b5 58		lda $58,x			lda 	esInt1,x 					; check max of 32767, we use 16 bit for timers and
.2e3d	29 80		and #$80			and 	#$80 						; it doesn't work > 32767
.2e3f	15 60		ora $60,x			ora 	esInt2,x
.2e41	15 68		ora $68,x			ora 	esInt3,x
.2e43	d0 41		bne $2e86			bne 	_EFValue
.2e45	98		tya				tya
.2e46	48		pha				pha
.2e47	8a		txa				txa
.2e48	48		pha				pha
.2e49	a2 1c		ldx #$1c		ldx	#28
.2e4b	20 f6 14	jsr $14f6		jsr	deviceHandler
.2e4e	84 2d		sty $2d				sty 	temp1+1
.2e50	85 2c		sta $2c				sta 	temp1
.2e52	68		pla				pla
.2e53	aa		tax				tax
.2e54	20 4f 21	jsr $214f			jsr 	TOSToTemp0 					; set temp0 to the address of the event variable
.2e57	a0 03		ldy #$03			ldy 	#3							; if -ve
.2e59	b1 2a		lda ($2a),y			lda 	(temp0),y
.2e5b	30 23		bmi $2e80			bmi 	_EFFail 	 				; straight out with fail, means "on pause".
.2e5d	a0 00		ldy #$00			ldy 	#0 							; is the fire time zero ?
.2e5f	b1 2a		lda ($2a),y			lda 	(temp0),y
.2e61	c8		iny				iny
.2e62	11 2a		ora ($2a),y			ora 	(temp0),y
.2e64	f0 17		beq $2e7d			beq 	_EFInitialise 				; if so, initialise the value but return false.
.2e66	a0 00		ldy #$00			ldy 	#0 							; calculate trigger - timer
.2e68	38		sec				sec
.2e69	b1 2a		lda ($2a),y			lda 	(temp0),y
.2e6b	e5 2c		sbc $2c				sbc 	temp1
.2e6d	c8		iny				iny
.2e6e	b1 2a		lda ($2a),y			lda 	(temp0),y
.2e70	e5 2d		sbc $2d				sbc 	temp1+1
.2e72	10 0c		bpl $2e80			bpl 	_EFFail 					; if trigger >= timer then return False
.2e74	20 90 2e	jsr $2e90			jsr 	SetEventTimer 				; reset the timer for next time.
.2e77	20 f1 33	jsr $33f1			jsr	 	MInt32True 					; and treutn true as fired.
.2e7a	68		pla				pla
.2e7b	a8		tay				tay
.2e7c	60		rts				rts
.2e7d					_EFInitialise:
.2e7d	20 90 2e	jsr $2e90			jsr		SetEventTimer 				; set trigger time to time + elapsed
.2e80					_EFFail:
.2e80	68		pla				pla
.2e81	a8		tay				tay
.2e82	20 f5 33	jsr $33f5			jsr 	MInt32False
.2e85	60		rts				rts
.2e86					_EFValue:
.2e86	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.2e88	20 18 15	jsr $1518		jsr	errorHandler
.2e8b					_EFType:
.2e8b	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.2e8d	20 18 15	jsr $1518		jsr	errorHandler
.2e90					SetEventTimer:
.2e90	a0 00		ldy #$00			ldy 	#0
.2e92	18		clc				clc
.2e93	a5 2c		lda $2c				lda 	temp1
.2e95	75 51		adc $51,x			adc 	esInt0+1,x
.2e97	91 2a		sta ($2a),y			sta		(temp0),y
.2e99	c8		iny				iny
.2e9a	a5 2d		lda $2d				lda 	temp1+1
.2e9c	75 59		adc $59,x			adc 	esInt1+1,x
.2e9e	91 2a		sta ($2a),y			sta		(temp0),y
.2ea0	88		dey				dey
.2ea1	11 2a		ora ($2a),y			ora 	(temp0),y 					; if the result is non zero, exit
.2ea3	d0 04		bne $2ea9			bne 	_SETExit 					; zero means initialise.....
.2ea5	a9 01		lda #$01			lda 	#1 							; timer zero won't work, so make it 1, which is
.2ea7	91 2a		sta ($2a),y			sta 	(temp0),y 					; near enough.
.2ea9					_SETExit:
.2ea9	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary/unary.asm

.2eaa					UnaryLen:
.2eaa	20 b8 2e	jsr $2eb8			jsr 	ULStart
.2ead					ULFinish:
.2ead	b1 2a		lda ($2a),y			lda 	(temp0),y 					; get length prefix
.2eaf	a4 32		ldy $32				ldy 	tempShort 					; get Y back
.2eb1	20 04 34	jsr $3404			jsr 	MInt32Set8Bit 				; write it out.
.2eb4	20 68 34	jsr $3468			jsr 	CheckRightParen
.2eb7	60		rts				rts
.2eb8	20 52 2d	jsr $2d52	ULStart:jsr 	EvaluateString
.2ebb	b5 50		lda $50,x			lda 	esInt0,x 					; copy address of string to temp0
.2ebd	85 2a		sta $2a				sta 	temp0
.2ebf	b5 58		lda $58,x			lda 	esInt1,x
.2ec1	85 2b		sta $2b				sta 	temp0+1
.2ec3	84 32		sty $32				sty 	tempShort 					; get length
.2ec5	a0 00		ldy #$00			ldy 	#0
.2ec7	60		rts				rts
.2ec8					UnaryAsc:
.2ec8	20 b8 2e	jsr $2eb8			jsr 	ULStart 					; same as LEN() get string, save Y, point to length.
.2ecb	b1 2a		lda ($2a),y			lda 	(temp0),y 					; read length
.2ecd	c8		iny				iny 		 						; point to first character, we can do LEN code after that
.2ece	c9 00		cmp #$00			cmp 	#0
.2ed0	d0 db		bne $2ead			bne 	ULFinish 					; if length = 0 then error : asc("") -> error.
.2ed2	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.2ed4	20 18 15	jsr $1518		jsr	errorHandler
.2ed7					UnaryAbs:
.2ed7	20 47 2d	jsr $2d47			jsr 	EvaluateNumeric 			; some numeric value
.2eda	b0 07		bcs $2ee3			bcs 	_UAFloat 					; CS then float, so use that function
.2edc	20 aa 33	jsr $33aa			jsr 	MInt32Absolute 				; int version
.2edf	20 68 34	jsr $3468			jsr 	CheckRightParen
.2ee2	60		rts				rts
.2ee3					_UAFloat:
.2ee3	8a		txa				txa 								; float version
.2ee4	a2 02		ldx #$02		ldx	#2
.2ee6	20 5d 1c	jsr $1c5d		jsr	floatingpointHandler
.2ee9	aa		tax				tax
.2eea	20 68 34	jsr $3468			jsr 	CheckRightParen
.2eed	60		rts				rts
.2eee					UnarySgn:
.2eee	20 47 2d	jsr $2d47			jsr 	EvaluateNumeric 			; same as above but sign of value
.2ef1	b0 07		bcs $2efa			bcs 	_USFloat
.2ef3	20 e2 33	jsr $33e2			jsr 	MInt32Sign
.2ef6	20 68 34	jsr $3468			jsr 	CheckRightParen
.2ef9	60		rts				rts
.2efa					_USFloat:
.2efa	8a		txa				txa
.2efb	a2 10		ldx #$10		ldx	#16
.2efd	20 5d 1c	jsr $1c5d		jsr	floatingpointHandler
.2f00	aa		tax				tax
.2f01	20 68 34	jsr $3468			jsr 	CheckRightParen
.2f04	60		rts				rts
.2f05					UnaryPeek:
.2f05	20 31 2f	jsr $2f31			jsr 	PDLCode 					; each has common setup code put reads 1,2 or 4 bytes
.2f08	4c 25 2f	jmp $2f25			jmp 	PDLByte0
.2f0b					UnaryDeek:
.2f0b	20 31 2f	jsr $2f31			jsr 	PDLCode
.2f0e	4c 1f 2f	jmp $2f1f			jmp 	PDLByte1
.2f11					UnaryLeek:
.2f11	20 31 2f	jsr $2f31			jsr 	PDLCode
.2f14	a0 03		ldy #$03			ldy 	#3							; read 3-2
.2f16	b1 2a		lda ($2a),y			lda 	(temp0),y
.2f18	95 68		sta $68,x			sta 	esInt3,x
.2f1a	88		dey				dey
.2f1b	b1 2a		lda ($2a),y			lda 	(temp0),y
.2f1d	95 60		sta $60,x			sta 	esInt2,x
.2f1f					PDLByte1:
.2f1f	a0 01		ldy #$01			ldy 	#1
.2f21	b1 2a		lda ($2a),y			lda 	(temp0),y
.2f23	95 58		sta $58,x			sta 	esInt1,x
.2f25					PDLByte0:
.2f25	a0 00		ldy #$00			ldy 	#0
.2f27	b1 2a		lda ($2a),y			lda 	(temp0),y
.2f29	95 50		sta $50,x			sta 	esInt0,x
.2f2b	a4 32		ldy $32				ldy 	tempShort 					; restore Y
.2f2d	20 68 34	jsr $3468			jsr 	CheckRightParen 			; check right and return
.2f30	60		rts				rts
.2f31					PDLCode:
.2f31	20 5d 2d	jsr $2d5d			jsr 	EvaluateInteger 			; some address
.2f34	b5 50		lda $50,x			lda 	esInt0,x 					; copy address of string to temp0
.2f36	85 2a		sta $2a				sta 	temp0
.2f38	b5 58		lda $58,x			lda 	esInt1,x
.2f3a	85 2b		sta $2b				sta 	temp0+1
.2f3c	a9 00		lda #$00			lda 	#0 							; zero upper 3 bytes of result, type okay.
.2f3e	95 58		sta $58,x			sta 	esInt1,x 					; PEEK needs upper 3 cleared
.2f40	95 60		sta $60,x			sta 	esInt2,x
.2f42	95 68		sta $68,x			sta 	esInt3,x
.2f44	84 32		sty $32				sty 	tempShort 					; save Y
.2f46	60		rts				rts
.2f47					Unary_Random:
.2f47	20 25 34	jsr $3425			jsr 	MInt32Random 				; generate random number.
.2f4a	b1 28		lda ($28),y			lda 	(codePtr),y 				; check followed by )
.2f4c	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.2f4e	f0 08		beq $2f58			beq 	_URExit
.2f50	e8		inx				inx 								; load range 0..r-1 into +1
.2f51	20 5d 2d	jsr $2d5d			jsr 	EvaluateInteger
.2f54	ca		dex				dex
.2f55	20 48 32	jsr $3248			jsr 	MInt32Modulus 				; calculate random % modulus
.2f58					_URExit:
.2f58	20 68 34	jsr $3468			jsr 	CheckRightParen 			; check right and return
.2f5b	60		rts				rts
.2f5c					Unary_Min:
.2f5c	a9 01		lda #$01			lda 	#1 							; c1 cmp c2 needs to be > e.g. c1 > c2
.2f5e	d0 02		bne $2f62			bne 	UnaryMBody
.2f60					Unary_Max:
.2f60	a9 ff		lda #$ff			lda 	#$FF 						; c1 cmp c2 needs to be < e.g. c1 < c2
.2f62					UnaryMBody:
.2f62	48		pha				pha 								; save comparator on stack, shows min or max
.2f63	20 3e 2d	jsr $2d3e			jsr 	Evaluate 					; get the first thing to check
.2f66					_UnaryMLoop:
.2f66	b1 28		lda ($28),y			lda 	(codePtr),y 				; found ), indicates end.
.2f68	c8		iny				iny
.2f69	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.2f6b	f0 09		beq $2f76			beq 	_UnaryMExit
.2f6d	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; found , indicates more.
.2f6f	f0 07		beq $2f78			beq 	_UnaryMCompare
.2f71	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.2f73	20 18 15	jsr $1518		jsr	errorHandler
.2f76					_UnaryMExit:
.2f76	68		pla				pla 								; done so throw comparator and return.
.2f77	60		rts				rts
.2f78					_UnaryMCompare:
.2f78	e8		inx				inx 								; get the 2nd thing to evaluate
.2f79	20 3e 2d	jsr $2d3e			jsr 	Evaluate
.2f7c	ca		dex				dex
.2f7d	20 04 2b	jsr $2b04			jsr 	PerformComparison 			; this is part of evaluate/compare.asm
.2f80	85 32		sta $32				sta 	tempShort 					; save result
.2f82	68		pla				pla 								; get what we need
.2f83	48		pha				pha
.2f84	c5 32		cmp $32				cmp 	tempShort 					; did we get it
.2f86	d0 de		bne $2f66			bne 	_UnaryMLoop 				; no, try another value.
.2f88	20 f5 33	jsr $33f5			jsr 	MInt32False 				; promote 2nd to 1st.
.2f8b	20 d9 32	jsr $32d9			jsr 	MInt32Add
.2f8e	4c 66 2f	jmp $2f66			jmp 	_UnaryMLoop
.2f91					Unary_Page:
.2f91	20 f5 33	jsr $33f5			jsr 	MInt32False 				; zero
.2f94	ad c8 0a	lda $0ac8			lda 	basePage 					; copy base page address in.
.2f97	95 50		sta $50,x			sta 	esInt0,x
.2f99	ad c9 0a	lda $0ac9			lda 	basePage+1
.2f9c	95 58		sta $58,x			sta 	esInt1,x
.2f9e	60		rts				rts
.2f9f					UnaryReference:
.2f9f	a9 0f		lda #$0f			lda 	#15
.2fa1	20 d4 2b	jsr $2bd4			jsr 	EvaluateLevel 				; evaluate term and don't deference.
.2fa4	b5 48		lda $48,x			lda 	esType,x 					; check it's a reference.
.2fa6	10 05		bpl $2fad			bpl 	UType
.2fa8	a9 00		lda #$00			lda 	#0 							; make it an integer
.2faa	95 48		sta $48,x			sta 	esType,x
.2fac	60		rts				rts
.2fad					UType:
.2fad	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.2faf	20 18 15	jsr $1518		jsr	errorHandler
.2fb2					UnaryHexMarker:
.2fb2	4c 2f 2d	jmp $2d2f			jmp 	EvaluateIntegerTerm
.2fb5					UnaryComplement:
.2fb5	20 2f 2d	jsr $2d2f			jsr 	EvaluateIntegerTerm
.2fb8	20 c9 33	jsr $33c9			jsr 	MInt32Not
.2fbb	60		rts				rts
.2fbc					UnaryIntToFloat:
.2fbc	20 47 2d	jsr $2d47			jsr 	EvaluateNumeric				; some number
.2fbf	b5 48		lda $48,x			lda 	esType,x 					; if float already, exit
.2fc1	d0 0b		bne $2fce			bne 	_UIFExit
.2fc3	8a		txa				txa 								; convert and set type
.2fc4	a2 1c		ldx #$1c		ldx	#28
.2fc6	20 5d 1c	jsr $1c5d		jsr	floatingpointHandler
.2fc9	aa		tax				tax
.2fca	a9 01		lda #$01			lda 	#1
.2fcc	95 48		sta $48,x			sta 	esType,x
.2fce					_UIFExit:
.2fce	60		rts				rts
.2fcf					UnaryFloatToInt:
.2fcf	20 47 2d	jsr $2d47			jsr 	EvaluateNumeric 			; the number
.2fd2	b5 48		lda $48,x			lda 	esType,x 					; if int already exit
.2fd4	f0 0b		beq $2fe1			beq 	_UFIExit
.2fd6	8a		txa				txa 								; convert to int
.2fd7	a2 14		ldx #$14		ldx	#20
.2fd9	20 5d 1c	jsr $1c5d		jsr	floatingpointHandler
.2fdc	aa		tax				tax
.2fdd	a9 00		lda #$00			lda 	#0 							; set type
.2fdf	95 48		sta $48,x			sta 	esType,x
.2fe1					_UFIExit:
.2fe1	60		rts				rts
.2fe2					UnaryAlloc:
.2fe2	e8		inx				inx 								; evaluate memory required
.2fe3	20 5d 2d	jsr $2d5d			jsr 	EvaluateInteger
.2fe6	20 68 34	jsr $3468			jsr 	CheckRightParen
.2fe9	ca		dex				dex
.2fea	b5 61		lda $61,x			lda 	esInt2+1,x 					; check at least in 64k range.
.2fec	15 69		ora $69,x			ora 	esInt3+1,x
.2fee	d0 1d		bne $300d			bne 	_UABadValue
.2ff0	20 f5 33	jsr $33f5			jsr 	MInt32False					; zero return.
.2ff3	a5 36		lda $36				lda 	lowMemory+1 				; copy low memory in
.2ff5	95 58		sta $58,x			sta 	esInt1,x
.2ff7	a5 35		lda $35				lda 	lowMemory
.2ff9	95 50		sta $50,x			sta 	esInt0,x
.2ffb	18		clc				clc 								; add alloc required.
.2ffc	75 51		adc $51,x			adc 	esInt0+1,x
.2ffe	85 35		sta $35				sta 	lowMemory
.3000	a5 36		lda $36				lda 	lowMemory+1
.3002	75 59		adc $59,x			adc 	esInt1+1,x
.3004	85 36		sta $36				sta 	lowMemory+1
.3006	b0 05		bcs $300d			bcs		_UABadValue 				; overflow definitely bad.
.3008	c5 34		cmp $34				cmp 	highMemory+1
.300a	b0 01		bcs $300d			bcs 	_UABadValue 				; out of memory bad.
.300c	60		rts				rts
.300d					_UABadValue:
.300d	a2 22		ldx #$22			ldx 	#ErrorID_Memory
.300f	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary/unary2.asm

.3012					UnaryTimer:
.3012	20 68 34	jsr $3468			jsr 	CheckRightParen 			; no parameters
.3015	98		tya				tya
.3016	48		pha				pha
.3017	20 1c 34	jsr $341c			jsr 	MInt32Zero 					; zero result
.301a	86 2a		stx $2a				stx 	temp0 						; returning in YA so can't use .pshx
.301c	a2 1c		ldx #$1c		ldx	#28
.301e	20 f6 14	jsr $14f6		jsr	deviceHandler
.3021	a6 2a		ldx $2a				ldx 	temp0						; restore X and update 16 bit result
.3023	95 50		sta $50,x			sta 	esInt0,x
.3025	98		tya				tya
.3026	95 58		sta $58,x			sta 	esInt1,x
.3028	68		pla				pla
.3029	a8		tay				tay
.302a	60		rts				rts
.302b					UnaryInkey:
.302b	20 68 34	jsr $3468			jsr 	CheckRightParen
.302e	86 2a		stx $2a				stx 	temp0
.3030	a2 0a		ldx #$0a		ldx	#10
.3032	20 f6 14	jsr $14f6		jsr	deviceHandler
.3035	a6 2a		ldx $2a				ldx 	temp0
.3037	20 04 34	jsr $3404			jsr 	MInt32Set8Bit
.303a	60		rts				rts
.303b					UnaryGet:
.303b	20 68 34	jsr $3468			jsr 	CheckRightParen
.303e	86 2a		stx $2a				stx 	temp0
.3040					_UGLoop:
.3040	a2 02		ldx #$02		ldx	#2
.3042	20 f6 14	jsr $14f6		jsr	deviceHandler
.3045	a2 0a		ldx #$0a		ldx	#10
.3047	20 f6 14	jsr $14f6		jsr	deviceHandler
.304a	c9 00		cmp #$00			cmp 	#0
.304c	f0 f2		beq $3040			beq 	_UGLoop
.304e	a6 2a		ldx $2a				ldx 	temp0
.3050	20 04 34	jsr $3404			jsr 	MInt32Set8Bit
.3053	60		rts				rts
.3054					UnaryGetString:
.3054	20 3b 30	jsr $303b			jsr 	UnaryGet
.3057					UGSDoChr:
.3057	4c a8 30	jmp $30a8			jmp 	ChrCode
.305a					UnaryInkeyString:
.305a	20 2b 30	jsr $302b			jsr 	UnaryInkey
.305d	b5 50		lda $50,x			lda 	esInt0,x
.305f	d0 f6		bne $3057			bne 	UGSDoChr
.3061	8a		txa				txa
.3062	a2 08		ldx #$08		ldx	#8
.3064	20 a0 37	jsr $37a0		jsr	stringHandler
.3067	aa		tax				tax
.3068	60		rts				rts
.3069					UnarySys:
.3069	20 5d 2d	jsr $2d5d			jsr 	EvaluateInteger 				; get the address
.306c	20 68 34	jsr $3468			jsr 	CheckRightParen
.306f	20 4f 21	jsr $214f			jsr 	TOSToTemp0 						; copy call address to temp0
.3072	8a		txa				txa
.3073	48		pha				pha
.3074	98		tya				tya
.3075	48		pha				pha
.3076	ad 00 0a	lda $0a00			lda 	("A"-"A")*4+SingleLetterVar 	; load AXY
.3079	ae 5c 0a	ldx $0a5c			ldx 	("X"-"A")*4+SingleLetterVar
.307c	ac 60 0a	ldy $0a60			ldy 	("Y"-"A")*4+SingleLetterVar
.307f	20 8e 30	jsr $308e			jsr 	_CallTemp0
.3082	85 32		sta $32				sta 	tempShort 						; restore YX
.3084	68		pla				pla
.3085	a8		tay				tay
.3086	68		pla				pla
.3087	aa		tax				tax
.3088	a5 32		lda $32				lda 	tempShort
.308a	20 04 34	jsr $3404			jsr 	MInt32Set8Bit 					; return result.
.308d	60		rts				rts
.308e					_CallTemp0:
.308e	6c 2a 00	jmp ($002a)			jmp 	(temp0)
.3091					UnaryMem:
.3091	20 f5 33	jsr $33f5			jsr 	MInt32False 					; set to false (e.g. 0)
.3094	38		sec				sec
.3095	a5 33		lda $33				lda 	highMemory 						; calculate value
.3097	e5 35		sbc $35				sbc 	lowMemory
.3099	95 50		sta $50,x			sta 	esInt0,x
.309b	a5 34		lda $34				lda 	highMemory+1
.309d	e5 36		sbc $36				sbc 	lowMemory+1
.309f	95 58		sta $58,x			sta 	esInt1,x
.30a1	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary/unarystr.asm

.30a2					ExecChr:
.30a2	20 65 2d	jsr $2d65			jsr 	EvaluateSmallInteger		; character number 0-255
.30a5	20 68 34	jsr $3468			jsr 	CheckRightParen				; right bracket
.30a8					ChrCode:
.30a8	98		tya				tya
.30a9	48		pha				pha
.30aa	8a		txa				txa 								; A = stack
.30ab	b4 50		ldy $50,x			ldy 	esInt0,x					; Y = character
.30ad	a2 02		ldx #$02		ldx	#2
.30af	20 a0 37	jsr $37a0		jsr	stringHandler
.30b2	aa		tax				tax 								; X = stack
.30b3	68		pla				pla
.30b4	a8		tay				tay
.30b5	60		rts				rts
.30b6					ExecLower:
.30b6	38		sec				sec 								; set carry is lower
.30b7	b0 01		bcs $30ba			bcs 	ExecUpperLower
.30b9					ExecUpper:
.30b9	18		clc				clc 								; clear carry is upper
.30ba					ExecUpperLower:
.30ba	08		php				php 								; save carry
.30bb	20 52 2d	jsr $2d52			jsr 	EvaluateString 				; string to stack,X
.30be	20 68 34	jsr $3468			jsr 	CheckRightParen 			; check closing right bracket.
.30c1	28		plp				plp 								; restore carry, save Y
.30c2	98		tya				tya
.30c3	48		pha				pha
.30c4	a9 00		lda #$00			lda 	#0 							; A zero if upper, 1 if lower.
.30c6	2a		rol a				rol 	a
.30c7	a8		tay				tay 								; now in Y
.30c8	8a		txa				txa 								; do the substring and exit.
.30c9	a2 0c		ldx #$0c		ldx	#12
.30cb	20 a0 37	jsr $37a0		jsr	stringHandler
.30ce	aa		tax				tax
.30cf	68		pla				pla
.30d0	a8		tay				tay
.30d1	60		rts				rts
.30d2					ExecLeft:
.30d2	20 52 2d	jsr $2d52			jsr 	EvaluateString 				; string to stack,X
.30d5	20 75 34	jsr $3475			jsr 	CheckComma
.30d8	e8		inx				inx
.30d9	a9 01		lda #$01			lda 	#1 							; 1 for 2nd parameter.
.30db	20 04 34	jsr $3404			jsr 	MInt32Set8Bit
.30de	e8		inx				inx
.30df	20 65 2d	jsr $2d65			jsr 	EvaluateSmallInteger 		; smallint 3rd parameter
.30e2					ExecSubstring:
.30e2	ca		dex				dex 								; fix up X
.30e3	ca		dex				dex
.30e4	20 68 34	jsr $3468			jsr 	CheckRightParen 			; check closing right bracket.
.30e7	8a		txa				txa 								; do the substring and exit.
.30e8	a2 0e		ldx #$0e		ldx	#14
.30ea	20 a0 37	jsr $37a0		jsr	stringHandler
.30ed	aa		tax				tax
.30ee	60		rts				rts
.30ef					ExecMid:
.30ef	20 52 2d	jsr $2d52			jsr 	EvaluateString 				; string to stack,X
.30f2	20 75 34	jsr $3475			jsr 	CheckComma
.30f5	e8		inx				inx
.30f6	20 65 2d	jsr $2d65			jsr 	EvaluateSmallInteger 		; smallint 2nd parameter
.30f9	c9 00		cmp #$00			cmp 	#0
.30fb	f0 15		beq $3112			beq 	_EMValue
.30fd	e8		inx				inx
.30fe	a9 ff		lda #$ff			lda 	#255 						; 255 default for 3nd parameter - this is optional.
.3100	20 04 34	jsr $3404			jsr 	MInt32Set8Bit
.3103	b1 28		lda ($28),y			lda 	(codePtr),y 				; is there a ) next
.3105	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN 				; if so, just MID$(a$,2)
.3107	f0 d9		beq $30e2			beq 	ExecSubString
.3109	20 75 34	jsr $3475			jsr 	CheckComma
.310c	20 65 2d	jsr $2d65			jsr 	EvaluateSmallInteger 		; smallint 2nd parameter
.310f	4c e2 30	jmp $30e2			jmp 	ExecSubString
.3112					_EMValue:
.3112	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.3114	20 18 15	jsr $1518		jsr	errorHandler
.3117					ExecRight:
.3117	20 52 2d	jsr $2d52			jsr 	EvaluateString 				; string to stack,X
.311a	20 75 34	jsr $3475			jsr 	CheckComma
.311d	e8		inx				inx
.311e	20 65 2d	jsr $2d65			jsr 	EvaluateSmallInteger 		; smallint 2nd parameter.
.3121	ca		dex				dex
.3122	98		tya				tya
.3123	48		pha				pha
.3124	b5 50		lda $50,x			lda 	esInt0,x 					; copy address of string to temp0
.3126	85 2a		sta $2a				sta 	temp0
.3128	b5 58		lda $58,x			lda 	esInt1,x
.312a	85 2b		sta $2b				sta 	temp0+1
.312c	a0 00		ldy #$00			ldy 	#0 							; point to length
.312e	b1 2a		lda ($2a),y			lda 	(temp0),y 					; get the length.
.3130	18		clc				clc 								; add 1.
.3131	69 01		adc #$01			adc 	#1
.3133	38		sec				sec
.3134	f5 51		sbc $51,x			sbc 	esInt0+1,x  				; subtract right count.
.3136	f0 02		beq $313a			beq		_ERMake1 					; if zero, make it 1.
.3138	b0 02		bcs $313c			bcs		_EROkay
.313a					_ERMake1:
.313a	a9 01		lda #$01			lda 	#1 							; start position.
.313c					_EROkay:
.313c	e8		inx				inx 								; set start pos.
.313d	95 50		sta $50,x			sta 	esInt0,x
.313f	e8		inx				inx
.3140	a9 ff		lda #$ff			lda 	#255 						; 255 default for 3nd parameter.
.3142	20 04 34	jsr $3404			jsr 	MInt32Set8Bit
.3145	68		pla				pla
.3146	a8		tay				tay
.3147	4c e2 30	jmp $30e2			jmp 	ExecSubString 				; do the substring code.

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32binary.asm

.314a					MInt32And:
.314a	b5 50		lda $50,x			lda 	esInt0,x
.314c	35 51		and $51,x			and 	esInt0+1,x
.314e	95 50		sta $50,x			sta 	esInt0,x
.3150	b5 58		lda $58,x			lda 	esInt1,x
.3152	35 59		and $59,x			and 	esInt1+1,x
.3154	95 58		sta $58,x			sta 	esInt1,x
.3156	b5 60		lda $60,x			lda 	esInt2,x
.3158	35 61		and $61,x			and 	esInt2+1,x
.315a	95 60		sta $60,x			sta 	esInt2,x
.315c	b5 68		lda $68,x			lda 	esInt3,x
.315e	35 69		and $69,x			and 	esInt3+1,x
.3160	95 68		sta $68,x			sta 	esInt3,x
.3162	60		rts				rts
.3163					MInt32Or:
.3163	b5 50		lda $50,x			lda 	esInt0,x
.3165	15 51		ora $51,x			ora 	esInt0+1,x
.3167	95 50		sta $50,x			sta 	esInt0,x
.3169	b5 58		lda $58,x			lda 	esInt1,x
.316b	15 59		ora $59,x			ora 	esInt1+1,x
.316d	95 58		sta $58,x			sta 	esInt1,x
.316f	b5 60		lda $60,x			lda 	esInt2,x
.3171	15 61		ora $61,x			ora 	esInt2+1,x
.3173	95 60		sta $60,x			sta 	esInt2,x
.3175	b5 68		lda $68,x			lda 	esInt3,x
.3177	15 69		ora $69,x			ora 	esInt3+1,x
.3179	95 68		sta $68,x			sta 	esInt3,x
.317b	60		rts				rts
.317c					MInt32Xor:
.317c	b5 50		lda $50,x			lda 	esInt0,x
.317e	55 51		eor $51,x			eor 	esInt0+1,x
.3180	95 50		sta $50,x			sta 	esInt0,x
.3182	b5 58		lda $58,x			lda 	esInt1,x
.3184	55 59		eor $59,x			eor 	esInt1+1,x
.3186	95 58		sta $58,x			sta 	esInt1,x
.3188	b5 60		lda $60,x			lda 	esInt2,x
.318a	55 61		eor $61,x			eor 	esInt2+1,x
.318c	95 60		sta $60,x			sta 	esInt2,x
.318e	b5 68		lda $68,x			lda 	esInt3,x
.3190	55 69		eor $69,x			eor 	esInt3+1,x
.3192	95 68		sta $68,x			sta 	esInt3,x
.3194	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32compare.asm

.3195					MInt32Compare:
.3195	b5 50		lda $50,x			lda 	esInt0,x 					; equality check first.
.3197	d5 51		cmp $51,x			cmp 	esInt0+1,x
.3199	d0 13		bne $31ae			bne 	MInt32Compare2
.319b	b5 58		lda $58,x			lda 	esInt1,x
.319d	d5 59		cmp $59,x			cmp 	esInt1+1,x
.319f	d0 0d		bne $31ae			bne 	MInt32Compare2
.31a1	b5 60		lda $60,x			lda 	esInt2,x
.31a3	d5 61		cmp $61,x			cmp 	esInt2+1,x
.31a5	d0 07		bne $31ae			bne 	MInt32Compare2
.31a7	b5 68		lda $68,x			lda 	esInt3,x
.31a9	55 69		eor $69,x			eor 	esInt3+1,x 					; EOR will return 0 if the same.
.31ab	d0 01		bne $31ae			bne 	MInt32Compare2
.31ad	60		rts				rts
.31ae					MInt32Compare2:
.31ae	b5 50		lda $50,x			lda		esInt0,x 					; unsigned 32 bit comparison.
.31b0	d5 51		cmp $51,x			cmp 	esInt0+1,x
.31b2	b5 58		lda $58,x			lda		esInt1,x
.31b4	f5 59		sbc $59,x			sbc 	esInt1+1,x
.31b6	b5 60		lda $60,x			lda		esInt2,x
.31b8	f5 61		sbc $61,x			sbc 	esInt2+1,x
.31ba	b5 68		lda $68,x			lda		esInt3,x
.31bc	f5 69		sbc $69,x			sbc 	esInt3+1,x
.31be	50 02		bvc $31c2			bvc 	_I32LNoOverflow 			; make it signed 32 bit comparison
.31c0	49 80		eor #$80			eor 	#$80
.31c2					_I32LNoOverflow
.31c2	30 03		bmi $31c7			bmi 	MInt32CLess					; if -ve then return $FF
.31c4	a9 01		lda #$01			lda 	#$01						; else return $01
.31c6	60		rts				rts
.31c7					MInt32CLess:
.31c7	a9 ff		lda #$ff			lda 	#$FF
.31c9	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32divide.asm

.31ca					MInt32SDivide:
.31ca	98		tya				tya  								; save Y, which is the count of negations
.31cb	48		pha				pha
.31cc	a0 00		ldy #$00			ldy 	#0 							; zero count
.31ce	20 e6 31	jsr $31e6			jsr 	_MInt32SRemSign 			; unsign TOS
.31d1	e8		inx				inx 								; unsign TOS+1
.31d2	20 e6 31	jsr $31e6			jsr 	_MInt32SRemSign
.31d5	ca		dex				dex
.31d6	98		tya				tya 								; save sign count on stack
.31d7	48		pha				pha
.31d8	20 ef 31	jsr $31ef			jsr 	MInt32UDivide 				; unsigned division
.31db	68		pla				pla 								; get sign count back
.31dc	29 01		and #$01			and 	#1 							; if it is odd, then negate result
.31de	f0 03		beq $31e3			beq 	_I32SNoNeg
.31e0	20 af 33	jsr $33af			jsr 	MInt32Negate
.31e3					_I32SNoNeg:
.31e3	68		pla				pla 								; restoe Y and exit
.31e4	a8		tay				tay
.31e5	60		rts				rts
.31e6					_MInt32SRemSign:
.31e6	b5 68		lda $68,x			lda 	esInt3,x 					; is it -ve
.31e8	10 04		bpl $31ee			bpl 	_MInt32SRSExit
.31ea	c8		iny				iny 								; increment the sign count
.31eb	20 af 33	jsr $33af			jsr 	MInt32Negate 				; negate the value.
.31ee					_MInt32SRSExit:
.31ee	60		rts				rts
.31ef					MInt32UDivide:
.31ef	b5 51		lda $51,x			lda 	esInt0+1,x 					; check for division by zero
.31f1	15 59		ora $59,x			ora 	esInt1+1,x
.31f3	15 5a		ora $5a,x			ora 	esInt1+2,x
.31f5	15 5b		ora $5b,x			ora 	esInt1+3,x
.31f7	f0 4a		beq $3243			beq 	_MInt32DZero
.31f9	e8		inx				inx 								; clear A
.31fa	e8		inx				inx
.31fb	20 f5 33	jsr $33f5			jsr 	MInt32False
.31fe	ca		dex				dex
.31ff	ca		dex				dex
.3200	98		tya				tya 								; save Y on the stack
.3201	48		pha				pha
.3202	a0 20		ldy #$20			ldy 	#32 						; number of division passes
.3204					_MInt32UDLoop:
.3204	16 50		asl $50,x			asl 	esInt0,x					; shift QA left. First Q
.3206	36 58		rol $58,x			rol 	esInt1,x
.3208	36 60		rol $60,x			rol 	esInt2,x
.320a	36 68		rol $68,x			rol 	esInt3,x
.320c	36 52		rol $52,x			rol 	esInt0+2,x 					; then A.
.320e	36 5a		rol $5a,x			rol 	esInt1+2,x
.3210	36 62		rol $62,x			rol 	esInt2+2,x
.3212	36 6a		rol $6a,x			rol 	esInt3+2,x
.3214	38		sec				sec 								; calculate A-M saving result on the stack
.3215	b5 52		lda $52,x			lda 	esInt0+2,x
.3217	f5 51		sbc $51,x			sbc 	esInt0+1,x
.3219	48		pha				pha
.321a	b5 5a		lda $5a,x			lda 	esInt1+2,x
.321c	f5 59		sbc $59,x			sbc 	esInt1+1,x
.321e	48		pha				pha
.321f	b5 62		lda $62,x			lda 	esInt2+2,x
.3221	f5 61		sbc $61,x			sbc 	esInt2+1,x
.3223	48		pha				pha
.3224	b5 6a		lda $6a,x			lda 	esInt3+2,x
.3226	f5 69		sbc $69,x			sbc 	esInt3+1,x
.3228	90 10		bcc $323a			bcc		_MInt32NoSubtract 			; if A < M (e.g. carry clear) then reject this.
.322a	95 6a		sta $6a,x			sta 	esInt3+2,x 					; write result back to A
.322c	68		pla				pla
.322d	95 62		sta $62,x			sta 	esInt2+2,x
.322f	68		pla				pla
.3230	95 5a		sta $5a,x			sta 	esInt1+2,x
.3232	68		pla				pla
.3233	95 52		sta $52,x			sta 	esInt0+2,x
.3235	f6 50		inc $50,x			inc 	esInt0,x 					; sets bit 0 of Q - it was shifted left previously.
.3237	4c 3d 32	jmp $323d			jmp 	_MInt32Next 					; do the next iteration
.323a					_MInt32NoSubtract:
.323a	68		pla				pla
.323b	68		pla				pla
.323c	68		pla				pla
.323d					_MInt32Next:
.323d	88		dey				dey 								; do this 32 times.
.323e	d0 c4		bne $3204			bne 	_MInt32UDLoop
.3240	68		pla				pla 								; restore Y and exit
.3241	a8		tay				tay
.3242	60		rts				rts
.3243					_MInt32DZero:
.3243	a2 05		ldx #$05			ldx 	#ErrorID_DivZero
.3245	20 18 15	jsr $1518		jsr	errorHandler
.3248					MInt32Modulus:
.3248	20 ef 31	jsr $31ef			jsr 	MInt32UDivide 				; do the division.
.324b	b5 6a		lda $6a,x			lda 	esInt3+2,x 					; copy 2nd on stack (the remainder) to the top.
.324d	95 68		sta $68,x			sta 	esInt3,x
.324f	b5 62		lda $62,x			lda 	esInt2+2,x
.3251	95 60		sta $60,x			sta 	esInt2,x
.3253	b5 5a		lda $5a,x			lda 	esInt1+2,x
.3255	95 58		sta $58,x			sta 	esInt1,x
.3257	b5 52		lda $52,x			lda 	esInt0+2,x
.3259	95 50		sta $50,x			sta 	esInt0,x
.325b	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32fromstr.asm

.0cda					fs32Length:
>0cda							.fill 	1
.325c					LinkInt32FromString:
.325c	aa		tax				tax
.325d	98		tya				tya
.325e	20 63 32	jsr $3263			jsr 	MInt32FromString
.3261	8a		txa				txa
.3262	60		rts				rts
.3263					MInt32FromString:
.3263	85 32		sta $32				sta 	tempShort 					; save base
.3265	98		tya				tya
.3266	48		pha				pha
.3267	a0 00		ldy #$00			ldy 	#0 							; get length of string to convert
.3269	b1 2a		lda ($2a),y			lda 	(temp0),y
.326b	8d da 0c	sta $0cda			sta 	fs32Length
.326e	f0 65		beq $32d5			beq 	_I32FSFail2					; fail if length zero.
.3270	a0 01		ldy #$01			ldy 	#1 							; set index into string being read
.3272	b1 2a		lda ($2a),y			lda 	(temp0),y 					; look at first character
.3274	c9 2d		cmp #$2d			cmp 	#"-"						; is it a - character
.3276	d0 09		bne $3281			bne 	_I32FSNotNegative
.3278	ad da 0c	lda $0cda			lda 	fs32Length 					; get length back.
.327b	c9 01		cmp #$01			cmp 	#1 							; if 1 it is just a - on its own so fail.
.327d	f0 56		beq $32d5			beq 	_I32FSFail2
.327f	a0 02		ldy #$02			ldy 	#2 							; first digit of the number.
.3281					_I32FSNotNegative:
.3281	a5 32		lda $32				lda 	tempShort 					; get the base back.
.3283	c0 02		cpy #$02			cpy 	#2 							; if we read a -ve (e.g. Y == 2)
.3285	d0 02		bne $3289			bne 	_I32FSNN2
.3287	09 80		ora #$80			ora 	#$80						; set bit 7, this indicates a negated result.
.3289					_I32FSNN2:
.3289	48		pha				pha 								; save base + final sign on stack.
.328a	20 f5 33	jsr $33f5			jsr 	MInt32False 				; zero the return value.
.328d					_I32FSMainLoop:
.328d	68		pla				pla 								; get the base back into tempShort
.328e	48		pha				pha
.328f	29 7f		and #$7f			and 	#$7F
.3291	85 32		sta $32				sta 	tempShort
.3293	b1 2a		lda ($2a),y			lda 	(temp0),y 					; look at next character.
.3295	c9 61		cmp #$61			cmp 	#"a" 						; fix up case.
.3297	90 02		bcc $329b			bcc 	_I32FSNotLC
.3299	e9 20		sbc #$20			sbc 	#32
.329b					_I32FSNotLC:
.329b	38		sec				sec 								; subtract 48 (ASCII "0") - ASCII to Hex conversion
.329c	e9 30		sbc #$30			sbc 	#"0"
.329e	90 34		bcc $32d4			bcc 	_I32FSFail 					; nothing more to do.
.32a0	c9 0a		cmp #$0a			cmp 	#9+1 						; if it is 0-9 validate vs base.
.32a2	90 06		bcc $32aa			bcc 	_I32FSValidate
.32a4	c9 11		cmp #$11			cmp 	#17 						; is it between 58 and 64 ? if so bad.
.32a6	90 2c		bcc $32d4			bcc 	_I32FSFail
.32a8	e9 07		sbc #$07			sbc 	#7 							; adjust into range so now character is 0->nnn
.32aa					_I32FSValidate:
.32aa	c5 32		cmp $32				cmp 	tempShort 					; compare against the base.
.32ac	b0 26		bcs $32d4			bcs 	_I32FSFail 					; sorry, too large for this base, so fail.
.32ae	48		pha				pha 								; save the new digit value.
.32af	e8		inx				inx 								; put base into next slot up on stack
.32b0	a5 32		lda $32				lda 	tempShort
.32b2	20 04 34	jsr $3404			jsr 	MInt32Set8Bit
.32b5	ca		dex				dex
.32b6	20 0d 33	jsr $330d			jsr 	MInt32Multiply 				; multiply current by the base
.32b9	e8		inx				inx
.32ba	68		pla				pla  								; put additive into next slot
.32bb	20 04 34	jsr $3404			jsr 	MInt32Set8Bit
.32be	ca		dex				dex
.32bf	20 d9 32	jsr $32d9			jsr 	MInt32Add 					; and add it
.32c2	c8		iny				iny 								; bump the character pointer
.32c3	cc da 0c	cpy $0cda			cpy 	fs32Length 					; until > length.
.32c6	f0 c5		beq $328d			beq 	_I32FSMainLoop
.32c8	90 c3		bcc $328d			bcc 	_I32FSMainLoop
.32ca					_I32FSDone:
.32ca	68		pla				pla 								; get base/final sign back
.32cb	10 03		bpl $32d0			bpl 	_I32FSNN3
.32cd	20 af 33	jsr $33af			jsr 	MInt32Negate 				; negate the result.
.32d0					_I32FSNN3:
.32d0	68		pla				pla
.32d1	a8		tay				tay
.32d2	38		sec				sec
.32d3	60		rts				rts
.32d4					_I32FSFail:
.32d4	68		pla				pla
.32d5					_I32FSFail2:
.32d5	68		pla				pla
.32d6	a8		tay				tay
.32d7	18		clc				clc
.32d8	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32math.asm

.32d9					MInt32Add:
.32d9	18		clc				clc
.32da	b5 50		lda $50,x			lda 	esInt0,x
.32dc	75 51		adc $51,x			adc 	esInt0+1,x
.32de	95 50		sta $50,x			sta 	esInt0,x
.32e0	b5 58		lda $58,x			lda 	esInt1,x
.32e2	75 59		adc $59,x			adc 	esInt1+1,x
.32e4	95 58		sta $58,x			sta 	esInt1,x
.32e6	b5 60		lda $60,x			lda 	esInt2,x
.32e8	75 61		adc $61,x			adc 	esInt2+1,x
.32ea	95 60		sta $60,x			sta 	esInt2,x
.32ec	b5 68		lda $68,x			lda 	esInt3,x
.32ee	75 69		adc $69,x			adc 	esInt3+1,x
.32f0	95 68		sta $68,x			sta 	esInt3,x
.32f2	60		rts				rts
.32f3					MInt32Sub:
.32f3	38		sec				sec
.32f4	b5 50		lda $50,x			lda 	esInt0,x
.32f6	f5 51		sbc $51,x			sbc 	esInt0+1,x
.32f8	95 50		sta $50,x			sta 	esInt0,x
.32fa	b5 58		lda $58,x			lda 	esInt1,x
.32fc	f5 59		sbc $59,x			sbc 	esInt1+1,x
.32fe	95 58		sta $58,x			sta 	esInt1,x
.3300	b5 60		lda $60,x			lda 	esInt2,x
.3302	f5 61		sbc $61,x			sbc 	esInt2+1,x
.3304	95 60		sta $60,x			sta 	esInt2,x
.3306	b5 68		lda $68,x			lda 	esInt3,x
.3308	f5 69		sbc $69,x			sbc 	esInt3+1,x
.330a	95 68		sta $68,x			sta 	esInt3,x
.330c	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32multiply.asm

.330d					MInt32Multiply:
.330d	e8		inx				inx 								; copy 2nd -> 3rd
.330e	20 33 33	jsr $3333			jsr 	MInt32CopyUp
.3311	ca		dex				dex
.3312	20 33 33	jsr $3333			jsr 	MInt32CopyUp 				; copy 1st -> 2nd
.3315	20 f5 33	jsr $33f5			jsr 	MInt32False 				; zero 1st.
.3318					_I32Loop:
.3318	b5 52		lda $52,x			lda 	esInt0+2,x 					; get low bit of 3rd
.331a	29 01		and #$01			and 	#1
.331c	f0 03		beq $3321			beq 	_I32NoAdd 					; if set
.331e	20 d9 32	jsr $32d9			jsr 	MInt32Add 					; add 2nd to 1st.
.3321					_I32NoAdd:
.3321	e8		inx				inx 								; shift 2nd left
.3322	20 0a 34	jsr $340a			jsr 	MInt32ShiftLeft
.3325	e8		inx				inx  								; shift 3rd right
.3326	20 13 34	jsr $3413			jsr 	MInt32ShiftRight
.3329	20 1c 34	jsr $341c			jsr 	MInt32Zero 					; check if zero.
.332c	08		php				php 								; save status bits
.332d	ca		dex				dex 	 							; point back to 1st
.332e	ca		dex				dex
.332f	28		plp				plp 								; get status bits
.3330	d0 e6		bne $3318			bne 	_I32Loop 					; if non-zero keep going.
.3332	60		rts				rts
.3333					MInt32CopyUp:
.3333	b5 50		lda $50,x			lda 	esInt0,x
.3335	95 51		sta $51,x			sta 	esInt0+1,x
.3337	b5 58		lda $58,x			lda 	esInt1,x
.3339	95 59		sta $59,x			sta 	esInt1+1,x
.333b	b5 60		lda $60,x			lda 	esInt2,x
.333d	95 61		sta $61,x			sta 	esInt2+1,x
.333f	b5 68		lda $68,x			lda 	esInt3,x
.3341	95 69		sta $69,x			sta 	esInt3+1,x
.3343	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32tostr.asm

>0cdb					MCharCount:	.fill 	1						; count of converted characters
.3344					MLInt32ToString:
.3344	aa		tax				tax									; module passes stack in A, base in Y
.3345	98		tya				tya
.3346	20 4b 33	jsr $334b			jsr 	MInt32ToString
.3349	8a		txa				txa
.334a	60		rts				rts
.334b					MInt32ToString:
.334b	48		pha				pha 								; save base
.334c	85 32		sta $32				sta 	tempShort 					; save target base.
.334e	a9 00		lda #$00			lda 	#0
.3350	8d db 0c	sta $0cdb			sta 	MCharCount 					; clear character count to 0
.3353	98		tya				tya
.3354	48		pha				pha
.3355	a5 32		lda $32				lda 	tempShort 					; check if we are signed conversion
.3357	10 10		bpl $3369			bpl 	_I32TSUnsigned
.3359	48		pha				pha 								; save base on stack.
.335a	b5 68		lda $68,x			lda 	esInt3,x 					; is it actually negative
.335c	10 08		bpl $3366			bpl 	_I32TSNoFlip
.335e	a9 2d		lda #$2d			lda 	#"-" 						; write a '-' prefix out.
.3360	20 9c 33	jsr $339c			jsr 	MI32WriteCharacter
.3363	20 af 33	jsr $33af			jsr 	MInt32Negate 				; negate the value, so now it's positive.
.3366					_I32TSNoFlip:
.3366	68		pla				pla 								; get the base back
.3367	29 7f		and #$7f			and 	#$7F 						; clear the sign flag so it's just a base now.
.3369					_I32TSUnsigned:
.3369	20 77 33	jsr $3377			jsr 	MI32DivideWrite 			; recursive code to output string.
.336c	a0 00		ldy #$00			ldy 	#0 							; write charcount to first character.
.336e	ad db 0c	lda $0cdb			lda 	MCharCount
.3371	91 2a		sta ($2a),y			sta 	(temp0),y
.3373	68		pla				pla
.3374	a8		tay				tay
.3375	68		pla				pla
.3376	60		rts				rts
.3377					MI32DivideWrite:
.3377	48		pha				pha 								; save the divisor/base
.3378	e8		inx				inx 								; write in the dividing position.
.3379	20 04 34	jsr $3404			jsr 	MInt32Set8Bit
.337c	ca		dex				dex
.337d	20 ef 31	jsr $31ef			jsr 	MInt32UDivide 				; divide number by base.
.3380	68		pla				pla 								; get the base into Y
.3381	a8		tay				tay
.3382	b5 52		lda $52,x			lda 	esInt0+2,x 					; get the remainder and push on the stack.
.3384	48		pha				pha
.3385	20 1c 34	jsr $341c			jsr 	MInt32Zero 					; is the result zero ?
.3388	f0 04		beq $338e			beq 	_I32NoRecurse 				; if so, don't recurse.
.338a	98		tya				tya 								; put base into A
.338b	20 77 33	jsr $3377			jsr 	MI32DivideWrite 				; and jsr the dividor recursively.
.338e					_I32NoRecurse:
.338e	68		pla				pla 								; get the remainder back
.338f	c9 0a		cmp #$0a			cmp 	#10  						; handle hexadecimals, now converting to ASCII
.3391	90 02		bcc $3395			bcc 	_I32NotHex
.3393	69 06		adc #$06			adc 	#7-1
.3395					_I32NotHex:
.3395	18		clc				clc 								; make it ASCII
.3396	69 30		adc #$30			adc 	#48
.3398	20 9c 33	jsr $339c			jsr 	MI32WriteCharacter 			; write the character out
.339b	60		rts				rts 								; and exit.
.339c					MI32WriteCharacter:
.339c	ee db 0c	inc $0cdb			inc 	MCharCount 					; bump count (space for leading count)
.339f	ac db 0c	ldy $0cdb			ldy 	MCharCount 					; get position
.33a2	91 2a		sta ($2a),y			sta 	(temp0),y 					; write out with trailing 0
.33a4	c8		iny				iny
.33a5	a9 00		lda #$00			lda 	#0
.33a7	91 2a		sta ($2a),y			sta 	(temp0),y
.33a9	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32unary.asm

>0cdc					MSeed32:	.fill 	4							; random number seed.
.33aa					MInt32Absolute:
.33aa	b5 68		lda $68,x			lda 	esInt3,x 					; use negate code if -ve.
.33ac	30 01		bmi $33af			bmi 	MInt32Negate
.33ae	60		rts				rts
.33af					MInt32Negate:
.33af	38		sec				sec 								; subtract from zero.
.33b0	a9 00		lda #$00			lda 	#0
.33b2	f5 50		sbc $50,x			sbc 	esInt0,x
.33b4	95 50		sta $50,x			sta 	esInt0,x
.33b6	a9 00		lda #$00			lda 	#0
.33b8	f5 58		sbc $58,x			sbc 	esInt1,x
.33ba	95 58		sta $58,x			sta 	esInt1,x
.33bc	a9 00		lda #$00			lda 	#0
.33be	f5 60		sbc $60,x			sbc 	esInt2,x
.33c0	95 60		sta $60,x			sta 	esInt2,x
.33c2	a9 00		lda #$00			lda 	#0
.33c4	f5 68		sbc $68,x			sbc 	esInt3,x
.33c6	95 68		sta $68,x			sta 	esInt3,x
.33c8	60		rts				rts
.33c9					MInt32Not:
.33c9	b5 50		lda $50,x			lda 	esInt0,x 					; one's complement all four.
.33cb	49 ff		eor #$ff			eor 	#$FF
.33cd	95 50		sta $50,x			sta 	esInt0,x
.33cf	b5 58		lda $58,x			lda 	esInt1,x
.33d1	49 ff		eor #$ff			eor 	#$FF
.33d3	95 58		sta $58,x			sta 	esInt1,x
.33d5	b5 60		lda $60,x			lda 	esInt2,x
.33d7	49 ff		eor #$ff			eor 	#$FF
.33d9	95 60		sta $60,x			sta 	esInt2,x
.33db	b5 68		lda $68,x			lda 	esInt3,x
.33dd	49 ff		eor #$ff			eor 	#$FF
.33df	95 68		sta $68,x			sta 	esInt3,x
.33e1	60		rts				rts
.33e2					MInt32Sign:
.33e2	b5 68		lda $68,x			lda 	esInt3,x					; look at MSB
.33e4	30 0b		bmi $33f1			bmi 	MInt32True 					; if set return -1 (true)
.33e6	20 1c 34	jsr $341c			jsr 	MInt32Zero 					; is it zero ?
.33e9	f0 0a		beq $33f5			beq 	MInt32False 				; if zero return 0 (false)
.33eb	20 f5 33	jsr $33f5			jsr 	MInt32False 				; > 0 return 1, by setting it to zero
.33ee	f6 50		inc $50,x			inc 	esInt0,x  					; and bumping the LSB.
.33f0	60		rts				rts
.33f1					MInt32True:
.33f1	a9 ff		lda #$ff			lda 	#$FF 						; set to $FFFFFFFF
.33f3	d0 02		bne $33f7			bne 	MInt32WriteAll
.33f5					MInt32False:
.33f5	a9 00		lda #$00			lda 	#0
.33f7					MInt32WriteAll:
.33f7	95 50		sta $50,x			sta 	esInt0,x
.33f9					MInt32Write123:
.33f9	95 58		sta $58,x			sta 	esInt1,x
.33fb	95 60		sta $60,x			sta 	esInt2,x
.33fd	95 68		sta $68,x			sta 	esInt3,x
.33ff	a9 00		lda #$00			lda 	#$00						; and make it an integer
.3401	95 48		sta $48,x			sta 	esType,x
.3403	60		rts				rts
.3404					MInt32Set8Bit:
.3404	95 50		sta $50,x			sta 	esInt0,x 					; coopt above function to write
.3406	a9 00		lda #$00			lda 	#0 							; a value 0-255
.3408	f0 ef		beq $33f9			beq		MInt32Write123
.340a					MInt32ShiftLeft:
.340a	16 50		asl $50,x			asl 	esInt0,x
.340c	36 58		rol $58,x			rol	 	esInt1,x
.340e	36 60		rol $60,x			rol	 	esInt2,x
.3410	36 68		rol $68,x			rol	 	esInt3,x
.3412	60		rts				rts
.3413					MInt32ShiftRight:
.3413	56 68		lsr $68,x			lsr 	esInt3,x
.3415	76 60		ror $60,x			ror 	esInt2,x
.3417	76 58		ror $58,x			ror 	esInt1,x
.3419	76 50		ror $50,x			ror 	esInt0,x
.341b	60		rts				rts
.341c					MInt32Zero:
.341c	b5 50		lda $50,x			lda 	esInt0,x
.341e	15 58		ora $58,x			ora 	esInt1,x
.3420	15 60		ora $60,x			ora 	esInt2,x
.3422	15 68		ora $68,x			ora 	esInt3,x
.3424	60		rts				rts
.3425					MInt32Random:
.3425	98		tya				tya
.3426	48		pha				pha
.3427	a0 07		ldy #$07			ldy 	#7 							; do it 7 times
.3429	ad dc 0c	lda $0cdc			lda 	MSeed32+0 					; check the seed isn't zero
.342c	d0 03		bne $3431			bne 	_Random1
.342e	a8		tay				tay 								; if so do it 256 times
.342f	a9 aa		lda #$aa			lda		#$AA 						; and use this to seed the seed....
.3431					_Random1:
.3431	0a		asl a				asl 	a
.3432	2e dd 0c	rol $0cdd			rol 	MSeed32+1
.3435	2e de 0c	rol $0cde			rol 	MSeed32+2
.3438	2e df 0c	rol $0cdf			rol 	MSeed32+3
.343b	90 02		bcc $343f			bcc 	_Random2
.343d	49 c5		eor #$c5			eor 	#$C5
.343f					_Random2:
.343f	88		dey				dey
.3440	d0 ef		bne $3431			bne 	_Random1
.3442	8d dc 0c	sta $0cdc			sta 	MSeed32+0 					; copy the seed in.
.3445	95 50		sta $50,x			sta 	esInt0,x
.3447	ad dd 0c	lda $0cdd			lda 	MSeed32+1
.344a	95 58		sta $58,x			sta 	esInt1,x
.344c	ad de 0c	lda $0cde			lda 	MSeed32+2
.344f	95 60		sta $60,x			sta 	esInt2,x
.3451	ad df 0c	lda $0cdf			lda 	MSeed32+3
.3454	95 68		sta $68,x			sta 	esInt3,x
.3456	68		pla				pla
.3457	a8		tay				tay
.3458	a9 00		lda #$00			lda 	#0
.345a	95 48		sta $48,x			sta 	esType,x
.345c	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/utility/check.asm

.345d					CheckToken:
.345d	d1 28		cmp ($28),y			cmp 	(codePtr),y
.345f	d0 02		bne $3463			bne 	_CTError
.3461	c8		iny				iny
.3462	60		rts				rts
.3463					_CTError:
.3463	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.3465	20 18 15	jsr $1518		jsr	errorHandler
.3468					CheckRightParen:
.3468	b1 28		lda ($28),y			lda 	(codePtr),y
.346a	c8		iny				iny
.346b	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.346d	d0 01		bne $3470			bne 	_CRPError
.346f	60		rts				rts
.3470					_CRPError:
.3470	a2 09		ldx #$09			ldx 	#ErrorID_MissingRP
.3472	20 18 15	jsr $1518		jsr	errorHandler
.3475					CheckComma:
.3475	b1 28		lda ($28),y			lda 	(codePtr),y
.3477	c8		iny				iny
.3478	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.347a	d0 01		bne $347d			bne 	_CCError
.347c	60		rts				rts
.347d					_CCError:
.347d	a2 0a		ldx #$0a			ldx 	#ErrorID_MissingComma
.347f	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/utility/stack.asm

.0037					rsPointer:
>0037							.fill 	2							; to TOS, which is the current top-token.
.3482					RSReset:
.3482	a9 ff		lda #$ff			lda 	#(returnStack+retStackSize-1) & $FF
.3484	85 37		sta $37				sta 	rsPointer
.3486	a9 09		lda #$09			lda 	#(returnStack+retStackSize-1) >> 8
.3488	85 38		sta $38				sta 	1+(rsPointer)
.348a	a9 ff		lda #$ff			lda 	#$FF 						; put a duff marker on TOS, so nothing will pop
.348c	8d ff 09	sta $09ff			sta 	returnStack+retStackSize-1
.348f	60		rts				rts
.3490					RSClaim:
.3490	84 32		sty $32				sty 	tempShort 					; preserve Y
.3492	48		pha				pha 								; save marker on stack.
.3493	8a		txa				txa 								; get bytes required.
.3494	38		sec				sec
.3495	49 ff		eor #$ff			eor 	#$FF 						; add to rsPointer using 2's complement.
.3497	65 37		adc $37				adc 	rsPointer
.3499	85 37		sta $37				sta 	rsPointer
.349b	a5 38		lda $38				lda 	rsPointer+1
.349d	69 ff		adc #$ff			adc 	#$FF
.349f	85 38		sta $38				sta 	rsPointer+1
.34a1	c9 08		cmp #$08			cmp 	#returnStack>>8 			; overflow. underflow actually :)
.34a3	90 08		bcc $34ad			bcc 	_RSCOverflow
.34a5	68		pla				pla 								; get marker back
.34a6	a0 00		ldy #$00			ldy 	#0 							; write marker out.
.34a8	91 37		sta ($37),y			sta 	(rsPointer),y
.34aa	a4 32		ldy $32				ldy 	tempShort 					; restore Y and exit
.34ac	60		rts				rts
.34ad					_RSCOverflow:
.34ad	a2 16		ldx #$16			ldx 	#ErrorID_RetStack
.34af	20 18 15	jsr $1518		jsr	errorHandler
.34b2					RSFree:
.34b2	18		clc				clc
.34b3	65 37		adc $37				adc 	rsPointer
.34b5	85 37		sta $37				sta 	rsPointer
.34b7	90 02		bcc $34bb			bcc 	_RSFExit
.34b9	e6 38		inc $38				inc 	rsPointer+1
.34bb					_RSFExit:
.34bb	60		rts				rts
.34bc					RSSavePosition:
.34bc	84 32		sty $32				sty 	tempShort 					; save Y position
.34be	a8		tay				tay 								; this is where we write it.
.34bf	a5 28		lda $28				lda 	codePtr 					; write codePointer out
.34c1	91 37		sta ($37),y			sta 	(rsPointer),y
.34c3	c8		iny				iny
.34c4	a5 29		lda $29				lda 	codePtr+1
.34c6	91 37		sta ($37),y			sta 	(rsPointer),y
.34c8	c8		iny				iny
.34c9	a5 32		lda $32				lda 	tempShort 					; write the Y position out.
.34cb	91 37		sta ($37),y			sta 	(rsPointer),y
.34cd	a8		tay				tay 								; fix Y back again to original value
.34ce	60		rts				rts
.34cf					RSLoadPosition:
.34cf	a8		tay				tay
.34d0	b1 37		lda ($37),y			lda 	(rsPointer),y 				; read codePointer back
.34d2	85 28		sta $28				sta 	codePtr
.34d4	c8		iny				iny
.34d5	b1 37		lda ($37),y			lda 	(rsPointer),y
.34d7	85 29		sta $29				sta 	codePtr+1
.34d9	c8		iny				iny
.34da	b1 37		lda ($37),y			lda 	(rsPointer),y 				; and the offset
.34dc	a8		tay				tay 								; to Y
.34dd	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/utility/warmstart.asm

.34de					WarmStart:
.34de	a2 04		ldx #$04		ldx	#4
.34e0	20 49 1e	jsr $1e49		jsr	interactionHandler

;******  Return to file: main/main.asm

.34e3					mainHandler:
.34e3	7c e6 34	jmp ($34e6,x)			jmp 	(mainVectors,x)
.34e6					mainVectors:
>34e6	02 35					.word _DummyControlHandler ; index 0
>34e8	75 34					.word CheckComma           ; index 2
>34ea	68 34					.word CheckRightParen      ; index 4
>34ec	51 26					.word XCommandClear        ; index 6
>34ee	78 2d					.word LinkEvaluate         ; index 8
>34f0	84 2d					.word LinkEvaluateInteger  ; index 10
>34f2	90 2d					.word LinkEvaluateSmallInt ; index 12
>34f4	8a 2d					.word LinkEvaluateString   ; index 14
>34f6	7e 2d					.word LinkEvaluateTerm     ; index 16
>34f8	44 33					.word MLInt32ToString      ; index 18
>34fa	e0 27					.word Command_XNew         ; index 20
>34fc	ee 27					.word XCommand_Run         ; index 22
>34fe	fa 27					.word Command_RunFrom      ; index 24
>3500	5c 32					.word LinkInt32FromString  ; index 26
.3502					_DummyControlHandler:
.3502	60		rts			rts

;******  Return to file: basic.asm

.3503					section_end_main:
.3503					section_start_string:

;******  Processing file: string/string.asm


;******  Processing file: string/functions/chr.asm

.3503					StringChrs:
.3503	aa		tax				tax 								; set up stack
.3504	a9 02		lda #$02			lda 	#2
.3506	20 c6 35	jsr $35c6			jsr 	AllocateSoftString
.3509	98		tya				tya
.350a	20 ec 35	jsr $35ec			jsr 	WriteSoftString
.350d					StringUpdate:
.350d	20 1b 35	jsr $351b			jsr 	ReturnSoftString
.3510	8a		txa				txa
.3511	60		rts				rts
.3512					StringNull:
.3512	aa		tax				tax
.3513	a9 01		lda #$01			lda 	#1
.3515	20 c6 35	jsr $35c6			jsr 	AllocateSoftString
.3518	4c 0d 35	jmp $350d			jmp 	StringUpdate
.351b					ReturnSoftString:
.351b	a5 39		lda $39				lda 	softMemAlloc 				; copy address
.351d	95 50		sta $50,x			sta 	esInt0,x
.351f	a5 3a		lda $3a				lda 	softMemAlloc+1
.3521	95 58		sta $58,x			sta 	esInt1,x
.3523	a9 00		lda #$00			lda 	#0 							; zero upper bytes
.3525	95 60		sta $60,x			sta 	esInt2,x
.3527	95 68		sta $68,x			sta 	esInt3,x
.3529	a9 40		lda #$40			lda 	#$40 						; type string.
.352b	95 48		sta $48,x			sta 	esType,x
.352d	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/functions/compare.asm

.352e					STRCompare:
.352e	48		pha				pha 								; save A
.352f	aa		tax				tax 								; put stack pos in X
.3530	98		tya				tya
.3531	48		pha				pha
.3532	20 66 35	jsr $3566			jsr 	CopyStringPair 				; copy strings to temp0,temp1
.3535	a0 00		ldy #$00			ldy 	#0 							; get the smaller of the two string sizes.
.3537	b1 2a		lda ($2a),y			lda 	(temp0),y
.3539	d1 2c		cmp ($2c),y			cmp 	(temp1),y
.353b	90 02		bcc $353f			bcc 	_SCNotSmaller
.353d	b1 2c		lda ($2c),y			lda 	(temp1),y
.353f					_SCNotSmaller:
.353f	aa		tax				tax 								; put that in X. We compare this many chars first.
.3540					_SCCompareLoop:
.3540	e0 00		cpx #$00			cpx 	#0 							; if compared all the smaller, then it is the shorter
.3542	f0 0c		beq $3550			beq 	_SCSameToEndShortest 		; one that is the smallest if they are different lengths.
.3544	ca		dex				dex 								; decrement chars to compare.
.3545	c8		iny				iny 								; move to next character
.3546	38		sec				sec 								; calculate s1[y]-s2[y]
.3547	b1 2a		lda ($2a),y			lda 	(temp0),y
.3549	f1 2c		sbc ($2c),y			sbc 	(temp1),y
.354b	d0 0a		bne $3557			bne 	_SCReturnResult 			; if different return sign of A
.354d	4c 40 35	jmp $3540			jmp 	_SCCompareLoop
.3550					_SCSameToEndShortest
.3550	a0 00		ldy #$00			ldy 	#0 							; compare len(s1) - len(s2)
.3552	38		sec				sec
.3553	b1 2a		lda ($2a),y			lda 	(temp0),y
.3555	f1 2c		sbc ($2c),y			sbc 	(temp1),y
.3557					_SCReturnResult:
.3557	08		php				php 								; set return to zero preserving PSW.
.3558	a2 00		ldx #$00			ldx 	#0
.355a	28		plp				plp
.355b	f0 05		beq $3562			beq 	_SCExit 					; two values equal, then exit
.355d	ca		dex				dex 								; X = $FF
.355e	90 02		bcc $3562			bcc 	_SCExit 					; if 1st < 2nd then -1
.3560	a2 01		ldx #$01			ldx 	#1 							; X = $01 if greater
.3562					_SCExit:
.3562	68		pla				pla
.3563	a8		tay				tay
.3564	68		pla				pla
.3565	60		rts				rts
.3566					CopyStringPair:
.3566	b5 51		lda $51,x			lda 	esInt0+1,x
.3568	85 2c		sta $2c				sta 	temp1
.356a	b5 59		lda $59,x			lda 	esInt1+1,x
.356c	85 2d		sta $2d				sta 	temp1+1
.356e					CopyStringTop:
.356e	b5 50		lda $50,x			lda 	esInt0,x
.3570	85 2a		sta $2a				sta 	temp0
.3572	b5 58		lda $58,x			lda 	esInt1,x
.3574	85 2b		sta $2b				sta 	temp0+1
.3576	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/functions/concat.asm

.3577					StringConcat:
.3577	aa		tax				tax									; stack pos in X
.3578	98		tya				tya
.3579	48		pha				pha
.357a	20 66 35	jsr $3566			jsr 	CopyStringPair 				; temp0 and temp1 point to strings to concat.
.357d	38		sec				sec 								; calculate alloc strings. lengths added + 1 for size.
.357e	a0 00		ldy #$00			ldy 	#0
.3580	b1 2a		lda ($2a),y			lda 	(temp0),y
.3582	71 2c		adc ($2c),y			adc 	(temp1),y
.3584	b0 1c		bcs $35a2			bcs 	_SCError 					; just too many characters here.
.3586	c9 fc		cmp #$fc			cmp 	#MaxStringSize
.3588	b0 18		bcs $35a2			bcs 	_SCError
.358a	20 c6 35	jsr $35c6			jsr 	AllocateSoftString 			; allocate soft string memory, set pointer.
.358d	20 bd 35	jsr $35bd			jsr 	CopySoftToStack 			; copy that to the stack.
.3590	20 a7 35	jsr $35a7			jsr 	SCCopyTemp0 				; copy temp0
.3593	a5 2c		lda $2c				lda 	temp1 						; copy temp1 to temp0
.3595	85 2a		sta $2a				sta 	temp0
.3597	a5 2d		lda $2d				lda 	temp1+1
.3599	85 2b		sta $2b				sta 	temp0+1
.359b	20 a7 35	jsr $35a7			jsr 	SCCopyTemp0 				; copy temp0 e.g. what was temp1.
.359e	68		pla				pla
.359f	a8		tay				tay
.35a0	8a		txa				txa 								; and A
.35a1	60		rts				rts
.35a2					_SCError:
.35a2	a2 0d		ldx #$0d			ldx 	#ErrorID_StrLen
.35a4	20 18 15	jsr $1518		jsr	errorHandler
.35a7					SCCopyTemp0:
.35a7	a0 00		ldy #$00			ldy 	#0 							; put count in temp2
.35a9	b1 2a		lda ($2a),y			lda 	(temp0),y
.35ab	85 2e		sta $2e				sta 	temp2
.35ad					_SCCopyLoop:
.35ad	a5 2e		lda $2e				lda 	temp2 						; done the lot
.35af	f0 0b		beq $35bc			beq 	_SCCopyExit
.35b1	c6 2e		dec $2e				dec 	temp2
.35b3	c8		iny				iny 								; get next char
.35b4	b1 2a		lda ($2a),y			lda 	(temp0),y
.35b6	20 ec 35	jsr $35ec			jsr 	WriteSoftString 			; write to soft string.
.35b9	4c ad 35	jmp $35ad			jmp 	_SCCopyLoop
.35bc					_SCCopyExit:
.35bc	60		rts				rts
.35bd					CopySoftToStack:
.35bd	a5 39		lda $39				lda 	SoftMemAlloc 				; copy the memory allocation pointer to the stack.
.35bf	95 50		sta $50,x			sta 	esInt0,x 					; type is already string.
.35c1	a5 3a		lda $3a				lda 	SoftMemAlloc+1
.35c3	95 58		sta $58,x			sta 	esInt1,x
.35c5	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/functions/memory.asm

.0039					softMemAlloc:
>0039							.fill 	2  							; if MSB is zero needs resetting on allocation.
.35c6					AllocateSoftString:
.35c6	85 32		sta $32				sta 	tempShort 					; save count
.35c8	98		tya				tya
.35c9	48		pha				pha
.35ca	a5 3a		lda $3a				lda 	softMemAlloc+1 				; if the high byte is zero, it needs allocating.
.35cc	d0 09		bne $35d7			bne 	_ASSDone
.35ce	a5 33		lda $33				lda 	highMemory 					; reset the soft memory alloc pointer.
.35d0	85 39		sta $39				sta 	softMemAlloc 				; to speed up slightly, we only reset this when we first need it
.35d2	a4 34		ldy $34				ldy 	highMemory+1 				; but it needs to be reset before each command.
.35d4	88		dey				dey 								; it is set to 1/4k below high memory, allowing space
.35d5	84 3a		sty $3a				sty 	softMemAlloc+1 				; for a concreted string.
.35d7					_ASSDone:
.35d7	38		sec				sec 								; allocate downwards enough memory
.35d8	a5 39		lda $39				lda 	softMemAlloc 				; subtract the memory requirements in A from
.35da	e5 32		sbc $32				sbc 	tempShort 					; the soft memory pointer
.35dc	85 39		sta $39				sta 	softMemAlloc
.35de	a5 3a		lda $3a				lda 	softMemAlloc+1
.35e0	e9 00		sbc #$00			sbc 	#0
.35e2	85 3a		sta $3a				sta 	softMemAlloc+1
.35e4	a9 00		lda #$00			lda 	#0 							; empty that string, set the length = 0.
.35e6	a8		tay				tay
.35e7	91 39		sta ($39),y			sta 	(softMemAlloc),y
.35e9	68		pla				pla
.35ea	a8		tay				tay
.35eb	60		rts				rts
.35ec					WriteSoftString:
.35ec	84 32		sty $32				sty 	tempShort 					; save Y
.35ee	48		pha				pha 								; save character on stack
.35ef	a0 00		ldy #$00			ldy 	#0 							; get and bump length
.35f1	b1 39		lda ($39),y			lda 	(softMemAlloc),y
.35f3	18		clc				clc
.35f4	69 01		adc #$01			adc 	#1
.35f6	91 39		sta ($39),y			sta 	(softMemAlloc),y
.35f8	a8		tay				tay 								; offset in Y
.35f9	68		pla				pla 								; get char and write.
.35fa	91 39		sta ($39),y			sta 	(softMemAlloc),y
.35fc	a4 32		ldy $32				ldy 	tempShort 					; restore Y and exit.
.35fe	60		rts				rts
.35ff					StrClone:
.35ff	aa		tax				tax 								; set up stack.
.3600	98		tya				tya
.3601	48		pha				pha
.3602	a0 00		ldy #$00			ldy 	#0 							; get length, add 1 for length
.3604	b1 2a		lda ($2a),y			lda 	(temp0),y 					; this is the bytes required.
.3606	18		clc				clc
.3607	69 01		adc #$01			adc 	#1
.3609	20 c6 35	jsr $35c6			jsr 	AllocateSoftString 			; allocate soft memory
.360c	a5 39		lda $39				lda 	softMemAlloc 				; copy that address to TOS
.360e	95 50		sta $50,x			sta 	esInt0,x
.3610	a5 3a		lda $3a				lda 	softMemAlloc+1
.3612	95 58		sta $58,x			sta 	esInt1,x
.3614	a9 00		lda #$00			lda 	#0 							; zero upper 2 bytes
.3616	95 60		sta $60,x			sta 	esInt2,x
.3618	95 68		sta $68,x			sta 	esInt3,x
.361a	a9 40		lda #$40			lda 	#$40 						; set type to string.
.361c	95 48		sta $48,x			sta 	esType,x
.361e	20 a7 35	jsr $35a7			jsr 	SCCopyTemp0 				; copy temp0 string to soft memory copy (concat.asm)
.3621	68		pla				pla
.3622	a8		tay				tay
.3623	8a		txa				txa
.3624	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/functions/setcase.asm

.3625					CaseString:
.3625	48		pha				pha 								; save A and copy to X
.3626	aa		tax				tax
.3627	98		tya				tya
.3628	48		pha				pha
.3629	20 6e 35	jsr $356e			jsr 	CopyStringTop 				; target string -> temp0
.362c	a0 00		ldy #$00			ldy 	#0
.362e	b1 2a		lda ($2a),y			lda 	(temp0),y  					; get length,
.3630	18		clc				clc
.3631	69 01		adc #$01			adc 	#1 							; one more for length byte
.3633	20 c6 35	jsr $35c6			jsr 	AllocateSoftString 			; allocate soft string memory, set pointer.
.3636	20 bd 35	jsr $35bd			jsr 	CopySoftToStack 			; copy that to the stack.
.3639	a0 00		ldy #$00			ldy 	#0
.363b	b1 2a		lda ($2a),y			lda 	(temp0),y 					; count to copy in X
.363d	aa		tax				tax
.363e					_CSCopy:
.363e	e0 00		cpx #$00			cpx 	#0 							; finished if 0.
.3640	f0 24		beq $3666			beq 	_CSExit
.3642	ca		dex				dex
.3643	c8		iny				iny
.3644	68		pla				pla 								; check direction
.3645	48		pha				pha
.3646	f0 0c		beq $3654			beq 	_CSUpper
.3648	b1 2a		lda ($2a),y			lda 	(temp0),y 					; lower$() code
.364a	c9 41		cmp #$41			cmp 	#"A"
.364c	90 12		bcc $3660			bcc 	_CSWrite
.364e	c9 5b		cmp #$5b			cmp 	#"Z"+1
.3650	b0 0e		bcs $3660			bcs 	_CSWrite
.3652	90 0a		bcc $365e			bcc 	_CSFlipWrite
.3654					_CSUpper:
.3654	b1 2a		lda ($2a),y			lda 	(temp0),y 					; upper$() code
.3656	c9 61		cmp #$61			cmp 	#"a"
.3658	90 06		bcc $3660			bcc 	_CSWrite
.365a	c9 7b		cmp #$7b			cmp 	#"z"+1
.365c	b0 02		bcs $3660			bcs 	_CSWrite
.365e					_CSFlipWrite:
.365e	49 20		eor #$20			eor 	#"A"^"a" 					; switch case.
.3660					_CSWrite:
.3660	20 ec 35	jsr $35ec			jsr 	WriteSoftString 			; add to soft string.
.3663	4c 3e 36	jmp $363e			jmp 	_CSCopy
.3666					_CSExit:
.3666	68		pla				pla
.3667	a8		tay				tay
.3668	68		pla				pla
.3669	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/functions/substring.asm

.366a					StringSubstring:
.366a	48		pha				pha
.366b	aa		tax				tax 								; access stack.
.366c	98		tya				tya
.366d	48		pha				pha
.366e	20 6e 35	jsr $356e			jsr 	CopyStringTop 				; point temp0 to the string.
.3671	a0 00		ldy #$00			ldy 	#0 							; get length.
.3673	b1 2a		lda ($2a),y			lda 	(temp0),Y
.3675	85 2c		sta $2c				sta 	temp1
.3677	b5 51		lda $51,x			lda 	esInt0+1,x 					; get the initial offset
.3679	c5 2c		cmp $2c				cmp 	temp1 						; return "" if > length.
.367b	f0 02		beq $367f			beq 	_SSBOkay
.367d	b0 2a		bcs $36a9			bcs 	_SSBReturnNull
.367f					_SSBOkay:
.367f	a5 2c		lda $2c				lda 	temp1 						; get the total length +1
.3681	18		clc				clc
.3682	69 01		adc #$01			adc 	#1
.3684	38		sec				sec
.3685	f5 51		sbc $51,x			sbc 	esInt0+1,x 					; the anything >= this is bad - max size
.3687	d5 52		cmp $52,x			cmp 	esInt0+2,x  				; check bad >= required
.3689	90 02		bcc $368d			bcc		_SSBTrunc
.368b	b5 52		lda $52,x			lda 	esInt0+2,x
.368d					_SSBTrunc:
.368d	85 2d		sta $2d				sta 	temp1+1 					; characters to copy.
.368f	18		clc				clc
.3690	69 01		adc #$01			adc 	#1 							; add 1
.3692	20 c6 35	jsr $35c6			jsr 	AllocateSoftString 			; allocate soft string memory, set pointer.
.3695	20 bd 35	jsr $35bd			jsr 	CopySoftToStack 			; copy that to the stack.
.3698	b4 51		ldy $51,x			ldy 	esInt0+1,x 					; get initial position of char to copy
.369a					_SSBCopyLoop:
.369a	a5 2d		lda $2d				lda 	temp1+1 					; done them all
.369c	f0 0e		beq $36ac			beq 	_SSBExit
.369e	c6 2d		dec $2d				dec 	temp1+1
.36a0	b1 2a		lda ($2a),y			lda 	(temp0),y 					; get and write character
.36a2	20 ec 35	jsr $35ec			jsr 	WriteSoftString
.36a5	c8		iny				iny
.36a6	4c 9a 36	jmp $369a			jmp 	_SSBCopyLoop
.36a9					_SSBReturnNull:
.36a9	20 b0 36	jsr $36b0			jsr 	ReturnNull
.36ac					_SSBExit:
.36ac	68		pla				pla
.36ad	a8		tay				tay
.36ae	68		pla				pla
.36af	60		rts				rts
.36b0					ReturnNull:
.36b0	a9 00		lda #$00			lda 	#0 							; clear null string
.36b2	8d ce 0a	sta $0ace			sta 	NullString
.36b5	a9 ce		lda #$ce			lda 	#NullString & $FF 			; set a pointer to it
.36b7	95 50		sta $50,x			sta 	esInt0,x
.36b9	a9 0a		lda #$0a			lda 	#NullString >> 8
.36bb	95 58		sta $58,x			sta 	esInt1,x
.36bd	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/functions/write.asm

.0ce0					srcStrLen:
>0ce0							.fill 	1
.36be					StringWrite:
.36be	aa		tax				tax
.36bf	48		pha				pha
.36c0	98		tya				tya
.36c1	48		pha				pha
.36c2	20 e9 36	jsr $36e9			jsr 	CheckOverwriteCurrent
.36c5	b0 0d		bcs $36d4			bcs		_SWCopyCurrent
.36c7	20 27 37	jsr $3727			jsr 	RequiresConcretion
.36ca	90 0e		bcc $36da			bcc 	_SWWriteReference
.36cc	20 8a 37	jsr $378a			jsr 	CheckSpecialConcretion
.36cf	b0 09		bcs $36da			bcs 	_SWWriteReference
.36d1	20 3b 37	jsr $373b			jsr 	AllocateHardMemory
.36d4					_SWCopyCurrent:
.36d4	20 6e 37	jsr $376e			jsr 	CopyStringToHardMemory
.36d7	4c e5 36	jmp $36e5			jmp 	_SWExit
.36da					_SWWriteReference
.36da	a0 00		ldy #$00			ldy 	#0
.36dc	a5 2a		lda $2a				lda 	temp0
.36de	91 2c		sta ($2c),y			sta 	(temp1),y
.36e0	c8		iny				iny
.36e1	a5 2b		lda $2b				lda 	temp0+1
.36e3	91 2c		sta ($2c),y			sta 	(temp1),y
.36e5					_SWExit:
.36e5	68		pla				pla
.36e6	a8		tay				tay
.36e7	68		pla				pla
.36e8	60		rts				rts
.36e9					CheckOverwriteCurrent:
.36e9	a0 00		ldy #$00			ldy 	#0 						; get address of string being written to temp0
.36eb	b5 59		lda $59,x			lda 	esInt1+1,x
.36ed	85 2b		sta $2b				sta 	temp0+1
.36ef	b5 51		lda $51,x			lda 	esInt0+1,x
.36f1	85 2a		sta $2a				sta 	temp0
.36f3	b1 2a		lda ($2a),y			lda 	(temp0),y 				; get length of string being copied and save it.
.36f5	8d e0 0c	sta $0ce0			sta 	srcStrLen
.36f8	b5 50		lda $50,x			lda 	esInt0,x 				; copy where the final address it being written to temp1.
.36fa	85 2c		sta $2c				sta 	temp1 					; e.g. if it is ax$ then temp1 will point to the ax$
.36fc	b5 58		lda $58,x			lda 	esInt1,x 				; data record + 5
.36fe	85 2d		sta $2d				sta 	temp1+1
.3700	a0 01		ldy #$01			ldy 	#1 						; get the MSB of the address of string currently stored there.
.3702	b1 2c		lda ($2c),y			lda 	(temp1),y
.3704	c5 34		cmp $34				cmp 	highMemory+1 			; if < high memory then it cannot be something stored
.3706	90 1b		bcc $3723			bcc 	_COCFail 				; in hard memory.
.3708	a0 00		ldy #$00			ldy 	#0 						; copy target address - 1 into temp2
.370a	b1 2c		lda ($2c),y			lda 	(temp1),y 				; when allocating hard memory, the overall size is
.370c	e9 01		sbc #$01			sbc 	#1 						; in the previous byte.
.370e	85 2e		sta $2e				sta 	temp2
.3710	c8		iny				iny
.3711	b1 2c		lda ($2c),y			lda 	(temp1),y
.3713	e9 00		sbc #$00			sbc 	#0
.3715	85 2f		sta $2f				sta 	temp2+1
.3717	a0 00		ldy #$00			ldy 	#0 						; how large is this physical chunk.
.3719	b1 2e		lda ($2e),y			lda 	(temp2),y
.371b	38		sec				sec  							; maximum character capacity.
.371c	e9 02		sbc #$02			sbc 	#2
.371e	cd e0 0c	cmp $0ce0			cmp 	srcStrLen 				; if >= the required length
.3721	b0 02		bcs $3725			bcs 	_COCCanReuse
.3723					_COCFail:
.3723	18		clc				clc
.3724	60		rts				rts
.3725					_COCCanReuse:
.3725	38		sec				sec
.3726	60		rts				rts
.3727					RequiresConcretion:
.3727	a5 2b		lda $2b				lda 	temp0+1 				; get MSB of address of string to be written
.3729	c5 34		cmp $34				cmp 	highMemory+1 			; if >= high memory it is concreted
.372b	b0 0a		bcs $3737			bcs 	_RCSucceed 				; so it needs concreting again - duplication.
.372d	a5 3a		lda $3a				lda 	softMemAlloc+1 			; have we allocated any soft memory yet ?
.372f	f0 08		beq $3739			beq 	_RCFail 				; if not, this cannot be soft memory.
.3731	a5 2b		lda $2b				lda 	temp0+1 				; get MSB of address of string to be written
.3733	c5 3a		cmp $3a				cmp 	softMemAlloc+1 			; if >= soft mem alloc it is either soft
.3735	90 02		bcc $3739			bcc 	_RCFail 				; so concreting
.3737					_RCSucceed:
.3737	38		sec				sec
.3738	60		rts				rts
.3739					_RCFail:
.3739	18		clc				clc
.373a	60		rts				rts
.373b					AllocateHardMemory:
.373b	98		tya				tya
.373c	48		pha				pha
.373d	ad e0 0c	lda $0ce0			lda 	srcStrLen 				; characters in string
.3740	69 0a		adc #$0a			adc 	#1+1+8 					; one for hard memory size, one for string size, extra for expansion
.3742	b0 04		bcs $3748			bcs 	_AHMSetMax 				; max out that amount.
.3744	c9 fe		cmp #$fe			cmp 	#MaxStringSize+2
.3746	90 02		bcc $374a			bcc 	_AHMIsOkay
.3748					_AHMSetMax:
.3748	a9 fe		lda #$fe			lda 	#MaxStringSize+2
.374a					_AHMIsOkay:
.374a	48		pha				pha	 							; save size to be allocated
.374b	49 ff		eor #$ff			eor 	#$FF 					; complement and add to high Memory
.374d	38		sec				sec  							; and copy result to TOS as target address.
.374e	65 33		adc $33				adc 	highMemory
.3750	85 33		sta $33				sta 	highMemory
.3752	a5 34		lda $34				lda 	highMemory+1
.3754	69 ff		adc #$ff			adc 	#$FF
.3756	85 34		sta $34				sta 	highMemory+1
.3758	a0 00		ldy #$00			ldy 	#0 						; Y = 0
.375a	68		pla				pla 							; get the total size of the storage block
.375b	91 33		sta ($33),y			sta 	(highMemory),y 			; and set it
.375d	18		clc				clc
.375e	a5 33		lda $33				lda		highMemory 				; point the target address to the byte after this.
.3760	69 01		adc #$01			adc 	#1
.3762	91 2c		sta ($2c),y			sta 	(temp1),y
.3764	a5 34		lda $34				lda 	highMemory+1
.3766	69 00		adc #$00			adc 	#0
.3768	c8		iny				iny
.3769	91 2c		sta ($2c),y			sta 	(temp1),y
.376b	68		pla				pla
.376c	a8		tay				tay
.376d	60		rts				rts
.376e					CopyStringToHardMemory:
.376e	98		tya				tya
.376f	48		pha				pha
.3770	a0 00		ldy #$00			ldy 	#0 						; copy target address to temp2
.3772	b1 2c		lda ($2c),y			lda 	(temp1),y
.3774	85 2e		sta $2e				sta 	temp2
.3776	c8		iny				iny
.3777	b1 2c		lda ($2c),y			lda 	(temp1),y
.3779	85 2f		sta $2f				sta 	temp2+1
.377b	ac e0 0c	ldy $0ce0			ldy 	srcStrLen 				; copy this + 1 characters, (length too) hence $FF compare
.377e					_CSTHMLoop:
.377e	b1 2a		lda ($2a),y			lda 	(temp0),y
.3780	91 2e		sta ($2e),y			sta 	(temp2),y
.3782	88		dey				dey
.3783	c0 ff		cpy #$ff			cpy 	#$FF 					; this does the +1
.3785	d0 f7		bne $377e			bne 	_CSTHMLoop
.3787	68		pla				pla
.3788	a8		tay				tay
.3789	60		rts				rts
.378a					CheckSpecialConcretion:
.378a	ad e0 0c	lda $0ce0			lda 	srcStrLen 				; check string is null e.g. length = 0
.378d	f0 02		beq $3791			beq 	_CSCNullString
.378f	18		clc				clc
.3790	60		rts				rts
.3791					_CSCNullString:
.3791	a9 00		lda #$00			lda 	#0 						; by always returning this address we don't waste
.3793	8d ce 0a	sta $0ace			sta 	NullString		 		; storage on null strings.
.3796	a9 ce		lda #$ce			lda 	#(NullString) & $FF
.3798	85 2a		sta $2a				sta 	temp0
.379a	a9 0a		lda #$0a			lda 	#(NullString) >> 8
.379c	85 2b		sta $2b				sta 	1+(temp0)
.379e	38		sec				sec
.379f	60		rts				rts

;******  Return to file: string/string.asm

.37a0					stringHandler:
.37a0	7c a3 37	jmp ($37a3,x)			jmp 	(stringVectors,x)
.37a3					stringVectors:
>37a3	b5 37					.word _DummyControlHandler ; index 0
>37a5	03 35					.word StringChrs           ; index 2
>37a7	ff 35					.word StrClone             ; index 4
>37a9	77 35					.word StringConcat         ; index 6
>37ab	12 35					.word StringNull           ; index 8
>37ad	2e 35					.word STRCompare           ; index 10
>37af	25 36					.word CaseString           ; index 12
>37b1	6a 36					.word StringSubstring      ; index 14
>37b3	be 36					.word StringWrite          ; index 16
.37b5					_DummyControlHandler:
.37b5	60		rts			rts

;******  Return to file: basic.asm

.37b6					section_end_string:
.37b6					section_start_tokeniser:

;******  Processing file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/detokenise/detokenise.asm

.0ce1					deTokeniseVector:
>0ce1							.fill 	2
.0ce3					lastCharacterClass:
>0ce3							.fill 	1
.0ce4					indent:
>0ce4							.fill 	1
.37b6					ListLine:
.37b6	48		pha				pha								; enter here to list to console. sets the output vector
.37b7	a9 ee		lda #$ee			lda 	#(deTokenPrint) & $FF
.37b9	8d e1 0c	sta $0ce1			sta 	deTokeniseVector
.37bc	a9 38		lda #$38			lda 	#(deTokenPrint) >> 8
.37be	8d e2 0c	sta $0ce2			sta 	1+(deTokeniseVector)
.37c1	68		pla				pla
.37c2					Detokenise:
.37c2	18		clc				clc 							; space required for line number.
.37c3	69 06		adc #$06			adc 	#6
.37c5	8d e4 0c	sta $0ce4			sta 	indent
.37c8	a9 ff		lda #$ff			lda 	#$FF 					; last thing printed is a dummy value.
.37ca	8d e3 0c	sta $0ce3			sta 	lastCharacterClass
.37cd	a2 02		ldx #$02			ldx 	#2
.37cf	a9 00		lda #$00			lda 	#0 						; clear upper two bytes
.37d1	95 60		sta $60,x			sta 	esInt2,x
.37d3	95 68		sta $68,x			sta 	esInt3,x
.37d5	a0 01		ldy #$01			ldy 	#1 						; copy line number to stack,2 (as using stack 0,1 for list range)
.37d7	b1 28		lda ($28),y			lda 	(codePtr),y
.37d9	95 50		sta $50,x			sta 	esInt0,x
.37db	c8		iny				iny
.37dc	b1 28		lda ($28),y			lda 	(codePtr),y
.37de	95 58		sta $58,x			sta 	esInt1,x
.37e0	a9 84		lda #$84			lda 	#LTYLineNumber
.37e2	20 c9 38	jsr $38c9			jsr 	ListOutputCharacter
.37e5	a9 0a		lda #$0a			lda 	#10 					; base 10
.37e7	20 8d 38	jsr $388d			jsr 	DTPrintInteger 			; print as integer.
.37ea	a0 00		ldy #$00			ldy 	#0 						; get length
.37ec	b1 2a		lda ($2a),y			lda 	(temp0),y 				; into X
.37ee	aa		tax				tax
.37ef					_DTPadOut:
.37ef	a9 20		lda #$20			lda 	#" " 					; pad out to indent.
.37f1	20 c9 38	jsr $38c9			jsr 	ListOutputCharacter
.37f4	e8		inx				inx
.37f5	ec e4 0c	cpx $0ce4			cpx 	indent
.37f8	d0 f5		bne $37ef			bne 	_DTPadOut
.37fa	a0 03		ldy #$03			ldy 	#3 						; start position.
.37fc					_DTListLoop:
.37fc	b1 28		lda ($28),y			lda 	(codePtr),y
.37fe	c9 85		cmp #$85			cmp 	#TOK_STR 				; Inline string.
.3800	f0 5e		beq $3860			beq 	_DTIsString
.3802	c9 84		cmp #$84			cmp 	#TOK_FPC 				; Floating point
.3804	f0 56		beq $385c			beq 	_DTIsFloat
.3806	c9 c5		cmp #$c5			cmp 	#TKW_AMP 				; & hex marker
.3808	f0 16		beq $3820			beq 	_DTHexConstant
.380a	c9 80		cmp #$80			cmp 	#TOK_EOL 				; End of Line
.380c	d0 06		bne $3814			bne 	_DTNotEnd
.380e	a9 ff		lda #$ff			lda 	#255 					; print CR
.3810	20 c9 38	jsr $38c9			jsr 	ListOutputCharacter
.3813	60		rts				rts
.3814					_DTNotEnd:
.3814	c9 00		cmp #$00			cmp 	#0
.3816	30 38		bmi $3850			bmi 	_DTIsToken
.3818	c9 40		cmp #$40			cmp 	#$40
.381a	90 3a		bcc $3856			bcc 	_DTIsIdentifier
.381c	a9 0a		lda #$0a			lda 	#10 					; this is the base, unsigned decimal
.381e	d0 0d		bne $382d			bne 	_DTConstant
.3820					_DTHexConstant:
.3820	a9 26		lda #$26			lda 	#"&"
.3822	20 c9 38	jsr $38c9			jsr 	ListOutputCharacter
.3825	c8		iny				iny
.3826	a9 01		lda #$01			lda 	#1 						; switch to spaces so &xxxx is treated like a number.
.3828	20 0a 39	jsr $390a			jsr 	DTSwitchMode
.382b	a9 10		lda #$10			lda 	#16						; print line unsigned hex
.382d					_DTConstant:
.382d	48		pha				pha
.382e	a9 00		lda #$00			lda 	#0 						; now constant, may need spaces
.3830	20 0a 39	jsr $390a			jsr 	DTSwitchMode
.3833	a9 86		lda #$86			lda 	#LTYConstant
.3835	20 c9 38	jsr $38c9			jsr 	ListOutputCharacter
.3838	a2 02		ldx #$02			ldx 	#2 						; get its value
.383a	8a		txa				txa
.383b	a2 10		ldx #$10		ldx	#16
.383d	20 e3 34	jsr $34e3		jsr	mainHandler
.3840	aa		tax				tax
.3841	68		pla				pla 							; get base back
.3842	85 32		sta $32				sta 	tempShort
.3844	98		tya				tya
.3845	48		pha				pha
.3846	a5 32		lda $32				lda 	tempShort 				; print in base A stck level X
.3848	20 8d 38	jsr $388d			jsr 	DTPrintInteger
.384b	68		pla				pla
.384c	a8		tay				tay
.384d	4c fc 37	jmp $37fc			jmp 	_DTListLoop
.3850					_DTIsToken:
.3850	20 63 39	jsr $3963			jsr 	DTDecodeToken
.3853	4c fc 37	jmp $37fc			jmp 	_DTListLoop
.3856					_DTIsIdentifier:
.3856	20 1c 39	jsr $391c			jsr 	DTIdentifier
.3859	4c fc 37	jmp $37fc			jmp 	_DTListLoop
.385c					_DTIsFloat:
>385c	db						.byte 	$DB
.385d	4c 5c 38	jmp $385c			jmp 	_DTIsFloat
.3860					_DTIsString:
.3860	a9 01		lda #$01			lda 	#1 							; now punctuation, may need spaces
.3862	20 0a 39	jsr $390a			jsr 	DTSwitchMode
.3865	a9 81		lda #$81			lda 	#LTYString
.3867	20 c9 38	jsr $38c9			jsr 	ListOutputCharacter
.386a	a9 22		lda #$22			lda 	#'"'						; open quote
.386c	20 c9 38	jsr $38c9			jsr 	ListOutputCharacter
.386f	a2 02		ldx #$02			ldx 	#2 							; evaluate string to TOS2.
.3871	8a		txa				txa
.3872	a2 10		ldx #$10		ldx	#16
.3874	20 e3 34	jsr $34e3		jsr	mainHandler
.3877	aa		tax				tax
.3878	b5 50		lda $50,x			lda 	esInt0,x 					; copy string address to temp0
.387a	85 2a		sta $2a				sta 	temp0
.387c	b5 58		lda $58,x			lda 	esInt1,x
.387e	85 2b		sta $2b				sta 	temp0+1
.3880	a9 00		lda #$00			lda 	#0 							; don't capitalise.
.3882	20 9f 38	jsr $389f			jsr 	DTPrintLengthPrefix
.3885	a9 22		lda #$22			lda 	#'"'
.3887	20 c9 38	jsr $38c9			jsr 	ListOutputCharacter
.388a	4c fc 37	jmp $37fc			jmp 	_DTListLoop

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/detokenise/dtprint.asm

.0ce5					tPrintCount:
>0ce5							.fill 	1
.388d					DTPrintInteger:
.388d	48		pha				pha									; save base
.388e	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.3890	85 2a		sta $2a				sta 	temp0
.3892	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.3894	85 2b		sta $2b				sta 	1+(temp0)
.3896	68		pla				pla
.3897	a8		tay				tay
.3898	8a		txa				txa
.3899	a2 12		ldx #$12		ldx	#18
.389b	20 e3 34	jsr $34e3		jsr	mainHandler
.389e	aa		tax				tax 								; then drop through here.
.389f					DTPrintLengthPrefix:
.389f	aa		tax				tax 								; A = 0 = don't case convert.
.38a0	98		tya				tya
.38a1	48		pha				pha
.38a2	a0 00		ldy #$00			ldy 	#0 							; get string length = chars to print.
.38a4	b1 2a		lda ($2a),y			lda 	(temp0),y
.38a6	8d e5 0c	sta $0ce5			sta 	tPrintCount
.38a9	f0 1b		beq $38c6			beq 	_DTPLPExit 					; empty string
.38ab					_DTPLPLoop:
.38ab	c8		iny				iny 								; get next.
.38ac	b1 2a		lda ($2a),y			lda 	(temp0),y
.38ae	29 7f		and #$7f			and 	#$7F
.38b0	e0 00		cpx #$00			cpx 	#0 							; skip if not case converting
.38b2	f0 0a		beq $38be			beq 	_DTPLPNoCase
.38b4	c9 41		cmp #$41			cmp 	#"A" 						; if converting UC -> LC
.38b6	90 06		bcc $38be			bcc 	_DTPLPNoCase
.38b8	c9 5b		cmp #$5b			cmp 	#"Z"+1
.38ba	b0 02		bcs $38be			bcs 	_DTPLPNoCase
.38bc	49 20		eor #$20			eor 	#"A"^"a"
.38be					_DTPLPNoCase
.38be	20 c9 38	jsr $38c9			jsr 	ListOutputCharacter 		; call handler
.38c1	ce e5 0c	dec $0ce5			dec 	tPrintCount 				; do all the characters
.38c4	d0 e5		bne $38ab			bne 	_DTPLPLoop
.38c6					_DTPLPExit:
.38c6	68		pla				pla
.38c7	a8		tay				tay
.38c8	60		rts				rts
.38c9					ListOutputCharacter:
.38c9	85 32		sta $32				sta 	tempShort
.38cb	48		pha				pha
.38cc	8a		txa				txa
.38cd	48		pha				pha
.38ce	98		tya				tya
.38cf	48		pha				pha
.38d0	a5 32		lda $32				lda 	tempShort 					; convert ASCII 6 bit (0-31) to 7 bit.
.38d2	c9 20		cmp #$20			cmp 	#32
.38d4	b0 0c		bcs $38e2			bcs		_LOCHiBit
.38d6	09 40		ora #$40			ora 	#64 						; conversion
.38d8	c9 40		cmp #$40			cmp 	#64							; make l/c
.38da	f0 06		beq $38e2			beq 	_LOCHiBit
.38dc	c9 5b		cmp #$5b			cmp 	#65+26
.38de	b0 02		bcs $38e2			bcs 	_LOCHiBit
.38e0	69 20		adc #$20			adc 	#32
.38e2					_LOCHiBit:
.38e2	20 eb 38	jsr $38eb			jsr 	_LOCCallVector				; call o/p handler routine
.38e5	68		pla				pla
.38e6	a8		tay				tay
.38e7	68		pla				pla
.38e8	aa		tax				tax
.38e9	68		pla				pla
.38ea					_LOCExit:
.38ea	60		rts				rts
.38eb					_LOCCallVector:
.38eb	6c e1 0c	jmp ($0ce1)			jmp 	(deTokeniseVector)
.38ee					deTokenPrint:
.38ee	c9 00		cmp #$00			cmp 	#0 							; if bit 7 sets ink colour
.38f0	30 06		bmi $38f8			bmi 	_dtpInk
.38f2	a2 16		ldx #$16		ldx	#22
.38f4	20 f6 14	jsr $14f6		jsr	deviceHandler
.38f7	60		rts				rts
.38f8	c9 ff		cmp #$ff	_dtpInk:cmp 	#255 						; e.g. herhe, get ink and set it
.38fa	f0 08		beq $3904			beq 	_dtpCR						; except $FF => CRLF
.38fc	29 07		and #$07			and 	#7
.38fe	a2 08		ldx #$08		ldx	#8
.3900	20 f6 14	jsr $14f6		jsr	deviceHandler
.3903	60		rts				rts
.3904					_dtpCR:
.3904	a2 06		ldx #$06		ldx	#6
.3906	20 f6 14	jsr $14f6		jsr	deviceHandler
.3909	60		rts				rts
.390a					DTSwitchMode:
.390a	cd e3 0c	cmp $0ce3			cmp 	LastCharacterClass 			; if changed, update character class
.390d	f0 04		beq $3913			beq 	_DTSMNoChange
.390f	8d e3 0c	sta $0ce3			sta 	LastCharacterClass
.3912					_DTSMExit:
.3912	60		rts				rts
.3913					_DTSMNoChange:
.3913	c9 01		cmp #$01			cmp 	#1 							; if didn't change to punctuation, two identifiers so we
.3915	f0 fb		beq $3912			beq 	_DTSMExit 					; need a space.
.3917	a9 20		lda #$20			lda 	#" "
.3919	4c c9 38	jmp $38c9			jmp 	ListOutputCharacter

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/detokenise/identifier.asm

.391c					DTIdentifier:
.391c	a9 00		lda #$00			lda 	#0 							; now text, may need spaces
.391e	20 0a 39	jsr $390a			jsr 	DTSwitchMode
.3921	a9 87		lda #$87			lda 	#LTYIdentifier
.3923	20 c9 38	jsr $38c9			jsr 	ListOutputCharacter
.3926					_DTILoop:
.3926	b1 28		lda ($28),y			lda 	(codePtr),y 				; output main bit of identifier.
.3928	c9 2d		cmp #$2d			cmp 	#"-"						; make - back to _
.392a	d0 02		bne $392e			bne 	_DTINotUS
.392c	a9 5f		lda #$5f			lda 	#"_"
.392e					_DTINotUS:
.392e	20 c9 38	jsr $38c9			jsr 	ListOutputCharacter
.3931	c8		iny				iny
.3932	b1 28		lda ($28),y			lda 	(codePtr),y 				; until end identifier marker.
.3934	c9 3a		cmp #$3a			cmp 	#$3A
.3936	90 ee		bcc $3926			bcc 	_DTILoop
.3938	c8		iny				iny
.3939	c9 3a		cmp #$3a			cmp 	#$3A 						; is it integer non array
.393b	f0 25		beq $3962			beq 	_DTIExit 					; no postfix.
.393d	48		pha				pha
.393e	a9 01		lda #$01			lda  	#1 							; it ends in punctuation
.3940	8d e3 0c	sta $0ce3			sta 	LastCharacterClass
.3943	a9 82		lda #$82			lda 	#LTYPunctuation
.3945	20 c9 38	jsr $38c9			jsr 	ListOutputCharacter
.3948	68		pla				pla
.3949	c9 3b		cmp #$3b			cmp 	#$3B
.394b	f0 10		beq $395d			beq 	_DTIArray
.394d	4a		lsr a				lsr 	a 							; array flag in C
.394e	08		php				php
.394f	49 1e		eor #$1e			eor 	#$3C/2 						; check if $
.3951	f0 02		beq $3955			beq 	_DTIDollar
.3953	a9 07		lda #$07			lda 	#"$"^"#" 					; this if #, 0 if $
.3955					_DTIDollar:
.3955	49 24		eor #$24			eor 	#"$"
.3957	20 c9 38	jsr $38c9			jsr 	ListOutputCharacter
.395a	28		plp				plp
.395b	90 05		bcc $3962			bcc 	_DTIExit
.395d					_DTIArray:
.395d	a9 28		lda #$28			lda 	#"("
.395f	20 c9 38	jsr $38c9			jsr 	ListOutputCharacter
.3962					_DTIExit:
.3962	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/detokenise/token.asm

.3963					DTDecodeToken:
.3963	a2 00		ldx #$00			ldx 	#0 							; table number to use
.3965	b1 28		lda ($28),y			lda 	(codePtr),y
.3967	c9 84		cmp #$84			cmp 	#$84
.3969	b0 05		bcs $3970			bcs 	_DTNotShift
.396b	29 03		and #$03			and 	#3 							; get the shift 1..3
.396d	0a		asl a				asl 	a 							; put 2 x in X
.396e	aa		tax				tax
.396f	c8		iny				iny
.3970					_DTNotShift:
.3970	bd 72 3c	lda $3c72,x			lda 	TokenTableAddress,x 		; get the token table to use to decode it.
.3973	85 2a		sta $2a				sta 	temp0 						; point into temp0
.3975	bd 73 3c	lda $3c73,x			lda 	TokenTableAddress+1,x
.3978	85 2b		sta $2b				sta 	temp0+1
.397a	b1 28		lda ($28),y			lda 	(codePtr),y 				; get the token value.
.397c	c8		iny				iny 								; consume it.
.397d	aa		tax				tax
.397e	98		tya				tya
.397f	48		pha				pha
.3980					_DTFindText:
.3980	e0 86		cpx #$86			cpx 	#$86 						; finished ?
.3982	f0 11		beq $3995			beq 	_DTFoundText
.3984	ca		dex				dex
.3985	a0 00		ldy #$00			ldy 	#0 							; add length+1 to temp0
.3987	38		sec				sec
.3988	b1 2a		lda ($2a),y			lda 	(temp0),y
.398a	65 2a		adc $2a				adc 	temp0
.398c	85 2a		sta $2a				sta 	temp0
.398e	90 f0		bcc $3980			bcc 	_DTFindText
.3990	e6 2b		inc $2b				inc 	temp0+1
.3992	4c 80 39	jmp $3980			jmp 	_DTFindText
.3995					_DTFoundText:
.3995	a0 01		ldy #$01			ldy 	#1 							; get first character
.3997	b1 2a		lda ($2a),y			lda 	(temp0),y
.3999	29 7f		and #$7f			and 	#$7F 						; will have bit 7 set.
.399b	c9 41		cmp #$41			cmp 	#"A" 						; check for punctuation.
.399d	90 11		bcc $39b0			bcc 	_DTIsPunctuation
.399f	c9 5b		cmp #$5b			cmp 	#"Z"+1
.39a1	b0 0d		bcs $39b0			bcs 	_DTIsPunctuation
.39a3	a9 00		lda #$00			lda 	#0 							; now text, may need spaces
.39a5	20 0a 39	jsr $390a			jsr 	DTSwitchMode
.39a8	a9 83		lda #$83			lda 	#LTYKeyword
.39aa	20 c9 38	jsr $38c9			jsr 	ListOutputCharacter
.39ad	4c ba 39	jmp $39ba			jmp 	_DTPrint
.39b0					_DTIsPunctuation:
.39b0	a9 01		lda #$01			lda 	#1 							; now punctuation, may need spaces
.39b2	20 0a 39	jsr $390a			jsr 	DTSwitchMode
.39b5	a9 82		lda #$82			lda 	#LTYPunctuation
.39b7	20 c9 38	jsr $38c9			jsr 	ListOutputCharacter
.39ba					_DTPrint:
.39ba	a9 01		lda #$01			lda 	#1 							; fix case.
.39bc	20 9f 38	jsr $389f			jsr 	DTPrintLengthPrefix 		; print it out.
.39bf	a0 00		ldy #$00			ldy 	#0
.39c1	b1 2a		lda ($2a),y			lda 	(temp0),y
.39c3	a8		tay				tay
.39c4	b1 2a		lda ($2a),y			lda 	(temp0),y
.39c6	29 7f		and #$7f			and 	#$7F 						; will have bit 7 set.
.39c8	c9 41		cmp #$41			cmp 	#"A" 						; check for punctuation.
.39ca	90 04		bcc $39d0			bcc 	_DTIsNowPunctuation
.39cc	c9 5b		cmp #$5b			cmp 	#"Z"+1
.39ce	90 05		bcc $39d5			bcc 	_DTPExit
.39d0					_DTIsNowPunctuation:
.39d0	a9 01		lda #$01			lda 	#1
.39d2	8d e3 0c	sta $0ce3			sta		LastCharacterClass
.39d5					_DTPExit:
.39d5	68		pla				pla
.39d6	a8		tay				tay
.39d7	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/search.asm

.0ce6					currentSet:
>0ce6							.fill 	1
.39d8					TokenSearch:
.39d8	8a		txa				txa
.39d9	48		pha				pha
.39da	98		tya				tya
.39db	48		pha				pha
.39dc	a9 00		lda #$00			lda 	#0
.39de	8d e6 0c	sta $0ce6			sta 	currentSet
.39e1					_TSLoop:
.39e1	ad e6 0c	lda $0ce6			lda 	currentSet 					; 2 x currentset in X
.39e4	0a		asl a				asl 	a
.39e5	aa		tax				tax
.39e6	bd 72 3c	lda $3c72,x			lda 	TokenTableAddress,x 		; set temp0 to the table address
.39e9	85 2a		sta $2a				sta 	temp0
.39eb	bd 73 3c	lda $3c73,x			lda 	TokenTableAddress+1,x
.39ee	85 2b		sta $2b				sta 	temp0+1
.39f0	20 17 3a	jsr $3a17			jsr 	TokenSearchOne 				; search one table
.39f3	b0 0d		bcs $3a02			bcs 	_TSFound 					; found a token.
.39f5	ee e6 0c	inc $0ce6			inc 	currentSet 					; next set
.39f8	ad e6 0c	lda $0ce6			lda 	currentSet
.39fb	c9 04		cmp #$04			cmp 	#4
.39fd	d0 e2		bne $39e1			bne 	_TSLoop 					; back if not done all four.
.39ff	18		clc				clc 								; clear carry and exit
.3a00	90 10		bcc $3a12			bcc 	_TSExit
.3a02					_TSFound:
.3a02	48		pha				pha 								; save token
.3a03	ad e6 0c	lda $0ce6			lda 	currentSet					; if set zero no shift
.3a06	f0 05		beq $3a0d			beq 	_TSNoShift
.3a08	09 80		ora #$80			ora 	#$80 						; Write as $81-$83
.3a0a	20 c8 3a	jsr $3ac8			jsr 	TokenWrite
.3a0d					_TSNoShift:
.3a0d	68		pla				pla 								; get token back
.3a0e	20 c8 3a	jsr $3ac8			jsr 	TokenWrite 					; write it
.3a11	38		sec				sec 								; carry set indicating success
.3a12					_TSExit:
.3a12	68		pla				pla
.3a13	a8		tay				tay
.3a14	68		pla				pla
.3a15	aa		tax				tax
.3a16	60		rts				rts
.3a17					TokenSearchOne:
.3a17	a2 86		ldx #$86			ldx 	#$86 						; current token being tested.
.3a19					_TSOLoop:
.3a19	a0 00		ldy #$00			ldy 	#0
.3a1b	b1 2a		lda ($2a),y			lda 	(temp0),y 					; get length of token
.3a1d	f0 26		beq $3a45			beq 	_TSOFail 					; if zero, end of table
.3a1f	cd cf 0a	cmp $0acf			cmp 	convertBuffer 				; length is the same, compare the text matches.
.3a22	f0 11		beq $3a35			beq 	_TSOCheckText
.3a24					_TSONext:
.3a24	e8		inx				inx 								; bump token
.3a25	a0 00		ldy #$00			ldy 	#0							; get length
.3a27	b1 2a		lda ($2a),y			lda 	(temp0),y
.3a29	38		sec				sec
.3a2a	65 2a		adc $2a				adc 	temp0 						; add to temp0 + 1
.3a2c	85 2a		sta $2a				sta 	temp0
.3a2e	90 e9		bcc $3a19			bcc 	_TSOLoop
.3a30	e6 2b		inc $2b				inc 	temp0+1
.3a32	4c 19 3a	jmp $3a19			jmp 	_TSOLoop
.3a35					_TSOCheckText:
.3a35	a8		tay				tay 								; compare length downto 1.
.3a36					_TSOCheckLoop:
.3a36	b1 2a		lda ($2a),y			lda 	(temp0),y 					; use EOR to compare
.3a38	59 cf 0a	eor $0acf,y			eor 	convertBuffer,y
.3a3b	29 7f		and #$7f			and 	#$7F 						; ignore bit 7
.3a3d	d0 e5		bne $3a24			bne 	_TSONext 					; different goto next.
.3a3f	88		dey				dey 								; do all
.3a40	d0 f4		bne $3a36			bne 	_TSOCheckLoop
.3a42	8a		txa				txa 								; return token in A and carry set
.3a43	38		sec				sec
.3a44	60		rts				rts
.3a45					_TSOFail:
.3a45	18		clc				clc
.3a46	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/test.asm

.3a47					TokTest:
.3a47	a2 ff		ldx #$ff				ldx 	#$FF
.3a49	9a		txs					txs
.3a4a	a9 67		lda #$67			lda 	#(TokenText1) & $FF
.3a4c	85 28		sta $28				sta 	codePtr
.3a4e	a9 3a		lda #$3a			lda 	#(TokenText1) >> 8
.3a50	85 29		sta $29				sta 	1+(codePtr)
.3a52	20 67 3a	jsr $3a67				jsr 	Tokenise
.3a55	a2 00		ldx #$00	TokStop:	ldx 	#0 					; compare vs precalculated result
.3a57	bd 67 3a	lda $3a67,x	_TokCheck:	lda 	TokenBytes1,x
.3a5a	dd ea 0c	cmp $0cea,x				cmp 	tokenBuffer,x
.3a5d	d0 fe		bne $3a5d	_TokFail:	bne 	_TokFail	 		; error.
.3a5f	e8		inx					inx
.3a60	c9 80		cmp #$80				cmp 	#$80
.3a62	d0 f3		bne $3a57				bne 	_TokCheck
.3a64	4c ff ff	jmp $ffff				jmp 	$FFFF 				; successfully tokenised then quit.

;******  Processing file: tokeniser/tokenise/../../generated/toktest.inc

.3a67					TokenText1:
.3a67					TokenBytes1:

;******  Return to file: tokeniser/tokenise/test.asm


;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokenise.asm

.0ce7					tokenHeader:
>0ce7							.fill 	3
.0cea					tokenBuffer:
>0cea							.fill 	256
.0dea					tokenBufferIndex:
>0dea							.fill 	1
.3a67					Tokenise:
.3a67	20 e1 3a	jsr $3ae1			jsr 	TokeniseMakeASCIIZ 			; convert to ASCIIZ string.
.3a6a					TokeniseASCIIZ:
.3a6a	20 f2 3a	jsr $3af2			jsr 	TokeniseFixCase 			; remove controls and lower case outside quotes.
.3a6d	a9 00		lda #$00			lda 	#0 							; reset the token buffer index
.3a6f	8d ea 0d	sta $0dea			sta 	tokenBufferIndex
.3a72	a8		tay				tay 								; start pointer
.3a73	a9 80		lda #$80			lda 	#$80 						; empty token buffer ($80 ends it)
.3a75	8d ea 0c	sta $0cea			sta 	tokenBuffer
.3a78					_TokLoop:
.3a78	b1 28		lda ($28),y			lda 	(codePtr),y 				; get next character
.3a7a	f0 46		beq $3ac2			beq 	_TokExit 					; if zero, then exit.
.3a7c	c8		iny				iny 								; skip over spaces.
.3a7d	c9 20		cmp #$20			cmp 	#" "
.3a7f	f0 f7		beq $3a78			beq 	_TokLoop
.3a81	88		dey				dey 								; point back to character.
.3a82	c9 26		cmp #$26			cmp 	#"&"						; Hexadecimal constant.
.3a84	f0 18		beq $3a9e			beq 	_TokHexConst
.3a86	c9 22		cmp #$22			cmp 	#'"'						; Quoted String
.3a88	f0 23		beq $3aad			beq 	_TokQString
.3a8a	c9 5b		cmp #$5b			cmp 	#"Z"+1 						; > 'Z' is punctuation
.3a8c	b0 26		bcs $3ab4			bcs 	_TokPunctuation
.3a8e	c9 41		cmp #$41			cmp 	#"A" 						; A..Z identifier
.3a90	b0 29		bcs $3abb			bcs 	_TokIdentifier
.3a92	c9 3a		cmp #$3a			cmp 	#"9"+1
.3a94	b0 1e		bcs $3ab4			bcs 	_TokPunctuation 			; between 9 and A exclusive, punctuation
.3a96	c9 30		cmp #$30			cmp 	#"0"
.3a98	90 1a		bcc $3ab4			bcc 	_TokPunctuation 			; < 0, punctuation.
.3a9a	a9 0a		lda #$0a			lda 	#10  						; 0..9 constant in base 10.
.3a9c	d0 08		bne $3aa6			bne 	_TokConst
.3a9e					_TokHexConst:
.3a9e	c8		iny				iny									; consume token.
.3a9f	a9 c5		lda #$c5			lda 	#TKW_AMP 					; Write ampersand token out
.3aa1	20 c8 3a	jsr $3ac8			jsr 	TokenWrite
.3aa4	a9 10		lda #$10			lda 	#16
.3aa6					_TokConst:
.3aa6	20 b0 3b	jsr $3bb0			jsr 	TokeniseInteger
.3aa9	b0 cd		bcs $3a78			bcs 	_TokLoop
.3aab	90 18		bcc $3ac5			bcc 	_TokFail
.3aad					_TokQString:
.3aad	20 46 3c	jsr $3c46			jsr 	TokeniseString
.3ab0	b0 c6		bcs $3a78			bcs 	_TokLoop
.3ab2	90 11		bcc $3ac5			bcc 	_TokFail
.3ab4					_TokPunctuation:
.3ab4	20 25 3c	jsr $3c25			jsr 	TokenisePunctuation
.3ab7	b0 bf		bcs $3a78			bcs 	_TokLoop
.3ab9	90 0a		bcc $3ac5			bcc 	_TokFail
.3abb					_TokIdentifier:
.3abb	20 21 3b	jsr $3b21			jsr 	TokeniseIdentifier
.3abe	b0 b8		bcs $3a78			bcs 	_TokLoop
.3ac0	90 03		bcc $3ac5			bcc 	_TokFail
.3ac2					_TokExit:
.3ac2	a9 01		lda #$01			lda 	#1
.3ac4	60		rts				rts
.3ac5					_TokFail:
.3ac5	a9 00		lda #$00			lda 	#0
.3ac7	60		rts				rts
.3ac8					TokenWrite:
.3ac8	85 32		sta $32				sta 	tempShort 					; save XA
.3aca	48		pha				pha
.3acb	8a		txa				txa
.3acc	48		pha				pha
.3acd	a5 32		lda $32				lda 	tempShort
.3acf	ae ea 0d	ldx $0dea			ldx 	tokenBufferIndex 			; geet index
.3ad2	9d ea 0c	sta $0cea,x			sta 	tokenBuffer,x 				; write byte to buffer
.3ad5	a9 80		lda #$80			lda 	#TOK_EOL 					; pre-emptively write EOL marker after
.3ad7	9d eb 0c	sta $0ceb,x			sta 	tokenBuffer+1,x
.3ada	ee ea 0d	inc $0dea			inc 	tokenBufferIndex 			; bump index
.3add	68		pla				pla
.3ade	aa		tax				tax
.3adf	68		pla				pla
.3ae0	60		rts				rts
.3ae1					TokeniseMakeASCIIZ:
.3ae1	a0 00		ldy #$00			ldy 	#0							; get length of string.
.3ae3	b1 28		lda ($28),y			lda 	(codePtr),y
.3ae5	a8		tay				tay
.3ae6	c8		iny				iny 								; +1, the NULL goes here.
.3ae7	a9 00		lda #$00			lda 	#0
.3ae9	91 28		sta ($28),y			sta 	(codePtr),y 				; write the trailing NULL.
.3aeb	e6 28		inc $28				inc 	codePtr 					; bump the pointer.
.3aed	d0 02		bne $3af1			bne 	_TMKAExit
.3aef	e6 29		inc $29				inc 	codePtr+1
.3af1					_TMKAExit:
.3af1	60		rts				rts
.3af2					TokeniseFixCase:
.3af2	a0 00		ldy #$00			ldy 	#0 							; position in buffer.
.3af4	a2 01		ldx #$01			ldx 	#1 							; bit 0 of this is 'in quotes'
.3af6					_TFCFlipQ:
.3af6	8a		txa				txa
.3af7	49 01		eor #$01			eor 	#1
.3af9	aa		tax				tax
.3afa					_TFCLoop:
.3afa	b1 28		lda ($28),y			lda 	(codePtr),y 				; get character
.3afc	f0 22		beq $3b20			beq 	_TFCExit 					; if zero exit.
.3afe	c9 20		cmp #$20			cmp 	#32 						; if control
.3b00	90 1a		bcc $3b1c			bcc 	_TFCControl
.3b02	c8		iny				iny 								; preconsume
.3b03	c9 22		cmp #$22			cmp 	#'"'
.3b05	f0 ef		beq $3af6			beq 	_TFCFlipQ
.3b07	c9 61		cmp #$61			cmp 	#"a"						; check if L/C
.3b09	90 ef		bcc $3afa			bcc 	_TFCLoop
.3b0b	c9 7b		cmp #$7b			cmp 	#"z"+1
.3b0d	b0 eb		bcs $3afa			bcs 	_TFCLoop
.3b0f	e0 00		cpx #$00			cpx 	#0 							; in quotes, if so, leave alone.
.3b11	d0 e7		bne $3afa			bne 	_TFCLoop
.3b13	88		dey				dey
.3b14	49 20		eor #$20			eor 	#"A"^"a"					; make U/C
.3b16					_TFCWrite:
.3b16	91 28		sta ($28),y			sta 	(codePtr),y
.3b18	c8		iny				iny
.3b19	4c fa 3a	jmp $3afa			jmp 	_TFCLoop
.3b1c					_TFCControl:
.3b1c	a9 20		lda #$20			lda 	#" "
.3b1e	d0 f6		bne $3b16			bne 	_TFCWrite
.3b20					_TFCExit:
.3b20	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokident.asm

.3b21					TokeniseIdentifier:
.3b21	a2 00		ldx #$00			ldx 	#0
.3b23					_TICopyID:
.3b23	b1 28		lda ($28),y			lda 	(codePtr),y					; get characters
.3b25	c9 5f		cmp #$5f			cmp 	#"_" 						; underscore converted to minus internally.
.3b27	f0 16		beq $3b3f			beq 	_TICopyUnderscore
.3b29	c9 2e		cmp #$2e			cmp 	#"."
.3b2b	f0 14		beq $3b41			beq 	_TICopyIn
.3b2d	c9 30		cmp #$30			cmp 	#"0"
.3b2f	90 1b		bcc $3b4c			bcc 	_TIEndCopy
.3b31	c9 3a		cmp #$3a			cmp 	#"9"+1
.3b33	90 0c		bcc $3b41			bcc 	_TICopyIn
.3b35	c9 41		cmp #$41			cmp 	#"A"
.3b37	90 13		bcc $3b4c			bcc 	_TIEndCopy
.3b39	c9 5b		cmp #$5b			cmp 	#"Z"+1
.3b3b	b0 0f		bcs $3b4c			bcs		_TIEndCopy
.3b3d	90 02		bcc $3b41			bcc 	_TICopyIn
.3b3f					_TICopyUnderScore:
.3b3f	a9 2d		lda #$2d			lda 	#"-"						; _ is mapped to -
.3b41					_TICopyIn:
.3b41	e8		inx				inx 								; write into buffer in 7 bit ASCII form
.3b42	9d cf 0a	sta $0acf,x			sta 	convertBuffer,x
.3b45	8e cf 0a	stx $0acf			stx 	convertBuffer
.3b48	c8		iny				iny 								; next character
.3b49	4c 23 3b	jmp $3b23			jmp 	_TICopyID 					; loop round
.3b4c					_TIEndCopy:
.3b4c	a9 24		lda #$24			lda 	#"$"
.3b4e	20 a3 3b	jsr $3ba3			jsr 	TIDCheckCopy
.3b51	a9 23		lda #$23			lda 	#"#"
.3b53	20 a3 3b	jsr $3ba3			jsr 	TIDCheckCopy
.3b56	a9 28		lda #$28			lda 	#"("
.3b58	20 a3 3b	jsr $3ba3			jsr 	TIDCheckCopy
.3b5b	20 d8 39	jsr $39d8			jsr 	TokenSearch 				; is it a token
.3b5e	b0 41		bcs $3ba1			bcs 	_TIExit 					; if so, then exit.
.3b60	98		tya				tya
.3b61	48		pha				pha
.3b62	a0 3a		ldy #$3a			ldy 	#$3A 						; default type.
.3b64	ae cf 0a	ldx $0acf			ldx 	convertBuffer 				; is last character (
.3b67	bd cf 0a	lda $0acf,x			lda 	convertBuffer,x
.3b6a	c9 28		cmp #$28			cmp 	#"("
.3b6c	d0 02		bne $3b70			bne 	_TINotArray
.3b6e	ca		dex				dex 								; yes, remove it and convert to array.
.3b6f	c8		iny				iny
.3b70					_TINotArray:
.3b70	bd cf 0a	lda $0acf,x			lda 	convertBuffer,x 			; check for $
.3b73	c9 24		cmp #$24			cmp 	#"$"
.3b75	d0 03		bne $3b7a			bne 	_TINotString
.3b77	ca		dex				dex
.3b78	c8		iny				iny
.3b79	c8		iny				iny
.3b7a					_TINotString:
.3b7a	bd cf 0a	lda $0acf,x			lda 	convertBuffer,x 			; check for #
.3b7d	c9 23		cmp #$23			cmp 	#"#"
.3b7f	d0 05		bne $3b86			bne 	_TINotFloat
.3b81	ca		dex				dex
.3b82	c8		iny				iny
.3b83	c8		iny				iny
.3b84	c8		iny				iny
.3b85	c8		iny				iny
.3b86					_TINotFloat:
.3b86	e8		inx				inx 								; write end marker for identifier.
.3b87	98		tya				tya
.3b88	9d cf 0a	sta $0acf,x			sta 	convertBuffer,x
.3b8b	8e cf 0a	stx $0acf			stx 	convertBuffer 				; update length.
.3b8e	a2 01		ldx #$01			ldx 	#1
.3b90					_TIOutput:
.3b90	bd cf 0a	lda $0acf,x			lda 	convertBuffer,x
.3b93	29 3f		and #$3f			and 	#$3F
.3b95	48		pha				pha
.3b96	20 c8 3a	jsr $3ac8			jsr 	TokenWrite
.3b99	e8		inx				inx
.3b9a	68		pla				pla
.3b9b	c9 3a		cmp #$3a			cmp 	#$3A
.3b9d	90 f1		bcc $3b90			bcc 	_TIOutput
.3b9f	68		pla				pla
.3ba0	a8		tay				tay
.3ba1					_TIExit:
.3ba1	38		sec				sec 								; this can't fail.
.3ba2	60		rts				rts
.3ba3					TIDCheckCopy:
.3ba3	d1 28		cmp ($28),y			cmp 	(codePtr),y
.3ba5	d0 08		bne $3baf			bne 	_TIDCCExit
.3ba7	e8		inx				inx
.3ba8	9d cf 0a	sta $0acf,x			sta 	convertBuffer,x
.3bab	8e cf 0a	stx $0acf			stx 	convertBuffer
.3bae	c8		iny				iny
.3baf					_TIDCCExit:
.3baf	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokinteger.asm

.3bb0					TokeniseInteger:
.3bb0	85 2c		sta $2c				sta 	temp1 						; save base
.3bb2	a2 00		ldx #$00			ldx 	#0							; count of chars so far
.3bb4	8e cf 0a	stx $0acf			stx 	convertBuffer
.3bb7					_TIGetChars:
.3bb7	b1 28		lda ($28),y			lda 	(codePtr),y 				; check character is numeric
.3bb9	c9 30		cmp #$30			cmp 	#"0"
.3bbb	90 1f		bcc $3bdc			bcc 	_TIEndGet
.3bbd	c9 3a		cmp #$3a			cmp 	#"9"+1
.3bbf	90 10		bcc $3bd1			bcc 	_TIHaveChar
.3bc1	a5 2c		lda $2c				lda 	temp1 						; fail if not hex mode
.3bc3	c9 0a		cmp #$0a			cmp 	#10
.3bc5	f0 15		beq $3bdc			beq 	_TIEndGet
.3bc7	b1 28		lda ($28),y			lda 	(codePtr),y 				; check legitimate hex.
.3bc9	c9 41		cmp #$41			cmp 	#"A"
.3bcb	90 0f		bcc $3bdc			bcc 	_TIEndGet
.3bcd	c9 5b		cmp #$5b			cmp 	#"Z"+1
.3bcf	b0 0b		bcs $3bdc			bcs 	_TIEndGet
.3bd1					_TIHaveChar:
.3bd1	e8		inx				inx 								; write into buffer.
.3bd2	8e cf 0a	stx $0acf			stx 	convertBuffer
.3bd5	9d cf 0a	sta $0acf,x			sta 	convertBuffer,x
.3bd8	c8		iny				iny 								; next char
.3bd9	4c b7 3b	jmp $3bb7			jmp 	_TIGetChars
.3bdc					_TIEndGet:
.3bdc	e0 00		cpx #$00			cpx 	#0 							; no char acquired.
.3bde	f0 1c		beq $3bfc			beq 	_TIFail
.3be0	98		tya				tya
.3be1	48		pha				pha
.3be2	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.3be4	85 2a		sta $2a				sta 	temp0
.3be6	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.3be8	85 2b		sta $2b				sta 	1+(temp0)
.3bea	a9 00		lda #$00			lda 	#0 							; stack level 0
.3bec	a4 2c		ldy $2c				ldy 	temp1 						; base Y
.3bee	a2 1a		ldx #$1a		ldx	#26
.3bf0	20 e3 34	jsr $34e3		jsr	mainHandler
.3bf3	68		pla				pla
.3bf4	a8		tay				tay
.3bf5	90 05		bcc $3bfc			bcc 	_TIFail 					; didn't convert.
.3bf7	20 fe 3b	jsr $3bfe			jsr 	TIRecursiveOut 				; recursive output ?
.3bfa	38		sec				sec
.3bfb	60		rts				rts
.3bfc					_TIFail:
.3bfc	18		clc				clc
.3bfd	60		rts				rts
.3bfe					TIRecursiveOut:
.3bfe	a5 50		lda $50				lda 	esInt0 						; get value to output after possible recursion
.3c00	29 3f		and #$3f			and 	#$3F
.3c02	09 40		ora #$40			ora 	#$40
.3c04	48		pha				pha
.3c05	a5 50		lda $50				lda 	esInt0 						; are we recursing ?
.3c07	29 c0		and #$c0			and 	#$C0
.3c09	05 58		ora $58				ora 	esInt1
.3c0b	05 60		ora $60				ora 	esInt2
.3c0d	05 68		ora $68				ora 	esInt3
.3c0f	f0 10		beq $3c21			beq 	_TIRONoRecursion
.3c11	a2 06		ldx #$06			ldx 	#6 							; shift right x 6
.3c13					_TIROShift:
.3c13	46 68		lsr $68				lsr 	esInt3
.3c15	66 60		ror $60				ror 	esInt2
.3c17	66 58		ror $58				ror 	esInt1
.3c19	66 50		ror $50				ror 	esInt0
.3c1b	ca		dex				dex
.3c1c	d0 f5		bne $3c13			bne 	_TIROShift
.3c1e	20 fe 3b	jsr $3bfe			jsr 	TIRecursiveOut 				; call recursively
.3c21					_TIRONoRecursion:
.3c21	68		pla				pla 								; pull the old bit.
.3c22	4c c8 3a	jmp $3ac8			jmp 	TokenWrite

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokpunct.asm

.3c25					TokenisePunctuation:
.3c25	b1 28		lda ($28),y			lda	 	(codePtr),y 				; copy next 2 chars into convertBuffer
.3c27	8d d0 0a	sta $0ad0			sta 	convertBuffer+1
.3c2a	c8		iny				iny
.3c2b	b1 28		lda ($28),y			lda 	(codePtr),y
.3c2d	8d d1 0a	sta $0ad1			sta 	convertBuffer+2
.3c30	c8		iny				iny 								; Y is +2
.3c31	a9 02		lda #$02			lda 	#2 							; 2 character string.
.3c33	8d cf 0a	sta $0acf			sta 	convertBuffer
.3c36	20 d8 39	jsr $39d8			jsr 	TokenSearch 				; search for that token.
.3c39	b0 0a		bcs $3c45			bcs 	_TIFound
.3c3b	ce cf 0a	dec $0acf			dec 	convertBuffer 				; make it a 1 character string
.3c3e	88		dey				dey 								; Y is now +1
.3c3f	20 d8 39	jsr $39d8			jsr 	TokenSearch 				; search for that token.
.3c42	b0 01		bcs $3c45			bcs 	_TIFound
.3c44	88		dey				dey 								; Y is now +0, carry clear indicating failure.
.3c45					_TIFound:
.3c45	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokstring.asm

.3c46					TokeniseString:
.3c46	c8		iny				iny 								; skip opening quote
.3c47	a2 ff		ldx #$ff			ldx 	#255 						; count length of string.
.3c49	84 2a		sty $2a				sty 	temp0 						; save start.
.3c4b					_TSGetLength:
.3c4b	b1 28		lda ($28),y			lda 	(codePtr),y 				; get next
.3c4d	f0 21		beq $3c70			beq 	_TSFail						; end of line, fail
.3c4f	c8		iny				iny
.3c50	e8		inx				inx
.3c51	c9 22		cmp #$22			cmp 	#'"' 						; until end quote found.
.3c53	d0 f6		bne $3c4b			bne 	_TSGetLength
.3c55	a9 85		lda #$85			lda 	#TOK_STR 					; write string token out
.3c57	20 c8 3a	jsr $3ac8			jsr 	TokenWrite
.3c5a	8a		txa				txa 								; output length
.3c5b	20 c8 3a	jsr $3ac8			jsr 	TokenWrite
.3c5e	a4 2a		ldy $2a				ldy 	temp0 						; get original position
.3c60	e0 00		cpx #$00			cpx 	#0 							; check ended
.3c62	f0 09		beq $3c6d			beq 	_TSExit
.3c64					_TSOutput:
.3c64	b1 28		lda ($28),y			lda 	(codePtr),y					; output character
.3c66	20 c8 3a	jsr $3ac8			jsr 	TokenWrite
.3c69	c8		iny				iny
.3c6a	ca		dex				dex
.3c6b	d0 f7		bne $3c64			bne 	_TSOutput
.3c6d					_TSExit:
.3c6d	c8		iny				iny 								; skip ending quote
.3c6e	38		sec				sec 								; return CS.
.3c6f	60		rts				rts
.3c70					_TSFail:
.3c70	18		clc				clc
.3c71	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokentext.asm

.3c72					TokenTableAddress:
>3c72	7a 3c						.word 	Group0Text
>3c74	43 3e						.word 	Group1Text
>3c76	90 3f						.word 	Group2Text
>3c78	b7 3f						.word 	Group3Text

;******  Processing file: tokeniser/../generated/tokentext0.inc

.3c7a					Group0Text:
>3c7a	03 41 4e c4				.byte $03,$41,$4e,$c4                  ; $86 and
>3c7e	02 4f d2				.byte $02,$4f,$d2                      ; $87 or
>3c81	03 58 4f d2				.byte $03,$58,$4f,$d2                  ; $88 xor
>3c85	02 3e bd				.byte $02,$3e,$bd                      ; $89 >=
>3c88	02 3c bd				.byte $02,$3c,$bd                      ; $8a <=
>3c8b	01 be					.byte $01,$be                          ; $8b >
>3c8d	01 bc					.byte $01,$bc                          ; $8c <
>3c8f	01 bd					.byte $01,$bd                          ; $8d =
>3c91	02 3c be				.byte $02,$3c,$be                      ; $8e <>
>3c94	01 ab					.byte $01,$ab                          ; $8f +
>3c96	01 ad					.byte $01,$ad                          ; $90 -
>3c98	02 3e be				.byte $02,$3e,$be                      ; $91 >>
>3c9b	02 3c bc				.byte $02,$3c,$bc                      ; $92 <<
>3c9e	01 aa					.byte $01,$aa                          ; $93 *
>3ca0	01 af					.byte $01,$af                          ; $94 /
>3ca2	03 4d 4f c4				.byte $03,$4d,$4f,$c4                  ; $95 mod
>3ca6	01 de					.byte $01,$de                          ; $96 ^
>3ca8	01 a1					.byte $01,$a1                          ; $97 !
>3caa	01 bf					.byte $01,$bf                          ; $98 ?
>3cac	06 52 45 50 45 41 d4			.byte $06,$52,$45,$50,$45,$41,$d4      ; $99 repeat
>3cb3	05 57 48 49 4c c5			.byte $05,$57,$48,$49,$4c,$c5          ; $9a while
>3cb9	03 46 4f d2				.byte $03,$46,$4f,$d2                  ; $9b for
>3cbd	02 49 c6				.byte $02,$49,$c6                      ; $9c if
>3cc0	07 44 45 46 50 52 4f c3			.byte $07,$44,$45,$46,$50,$52,$4f,$c3  ; $9d defproc
>3cc8	05 55 4e 54 49 cc			.byte $05,$55,$4e,$54,$49,$cc          ; $9e until
>3cce	04 57 45 4e c4				.byte $04,$57,$45,$4e,$c4              ; $9f wend
>3cd3	04 4e 45 58 d4				.byte $04,$4e,$45,$58,$d4              ; $a0 next
>3cd8	04 54 48 45 ce				.byte $04,$54,$48,$45,$ce              ; $a1 then
>3cdd	05 45 4e 44 49 c6			.byte $05,$45,$4e,$44,$49,$c6          ; $a2 endif
>3ce3	07 45 4e 44 50 52 4f c3			.byte $07,$45,$4e,$44,$50,$52,$4f,$c3  ; $a3 endproc
>3ceb	01 a8					.byte $01,$a8                          ; $a4 (
>3ced	04 4c 45 4e a8				.byte $04,$4c,$45,$4e,$a8              ; $a5 len(
>3cf2	04 53 47 4e a8				.byte $04,$53,$47,$4e,$a8              ; $a6 sgn(
>3cf7	04 41 42 53 a8				.byte $04,$41,$42,$53,$a8              ; $a7 abs(
>3cfc	07 52 41 4e 44 4f 4d a8			.byte $07,$52,$41,$4e,$44,$4f,$4d,$a8  ; $a8 random(
>3d04	04 50 41 47 c5				.byte $04,$50,$41,$47,$c5              ; $a9 page
>3d09	04 54 52 55 c5				.byte $04,$54,$52,$55,$c5              ; $aa true
>3d0e	05 46 41 4c 53 c5			.byte $05,$46,$41,$4c,$53,$c5          ; $ab false
>3d14	04 4d 49 4e a8				.byte $04,$4d,$49,$4e,$a8              ; $ac min(
>3d19	04 4d 41 58 a8				.byte $04,$4d,$41,$58,$a8              ; $ad max(
>3d1e	04 53 59 53 a8				.byte $04,$53,$59,$53,$a8              ; $ae sys(
>3d23	06 54 49 4d 45 52 a8			.byte $06,$54,$49,$4d,$45,$52,$a8      ; $af timer(
>3d2a	06 45 56 45 4e 54 a8			.byte $06,$45,$56,$45,$4e,$54,$a8      ; $b0 event(
>3d31	04 47 45 54 a8				.byte $04,$47,$45,$54,$a8              ; $b1 get(
>3d36	06 49 4e 4b 45 59 a8			.byte $06,$49,$4e,$4b,$45,$59,$a8      ; $b2 inkey(
>3d3d	06 41 4c 4c 4f 43 a8			.byte $06,$41,$4c,$4c,$4f,$43,$a8      ; $b3 alloc(
>3d44	05 43 48 52 24 a8			.byte $05,$43,$48,$52,$24,$a8          ; $b4 chr$(
>3d4a	06 4c 45 46 54 24 a8			.byte $06,$4c,$45,$46,$54,$24,$a8      ; $b5 left$(
>3d51	05 4d 49 44 24 a8			.byte $05,$4d,$49,$44,$24,$a8          ; $b6 mid$(
>3d57	07 52 49 47 48 54 24 a8			.byte $07,$52,$49,$47,$48,$54,$24,$a8  ; $b7 right$(
>3d5f	05 53 54 52 24 a8			.byte $05,$53,$54,$52,$24,$a8          ; $b8 str$(
>3d65	04 56 41 4c a8				.byte $04,$56,$41,$4c,$a8              ; $b9 val(
>3d6a	05 50 45 45 4b a8			.byte $05,$50,$45,$45,$4b,$a8          ; $ba peek(
>3d70	05 44 45 45 4b a8			.byte $05,$44,$45,$45,$4b,$a8          ; $bb deek(
>3d76	05 4c 45 45 4b a8			.byte $05,$4c,$45,$45,$4b,$a8          ; $bc leek(
>3d7c	04 41 53 43 a8				.byte $04,$41,$53,$43,$a8              ; $bd asc(
>3d81	04 49 4e 54 a8				.byte $04,$49,$4e,$54,$a8              ; $be int(
>3d86	06 46 4c 4f 41 54 a8			.byte $06,$46,$4c,$4f,$41,$54,$a8      ; $bf float(
>3d8d	06 49 53 56 41 4c a8			.byte $06,$49,$53,$56,$41,$4c,$a8      ; $c0 isval(
>3d94	07 55 50 50 45 52 24 a8			.byte $07,$55,$50,$50,$45,$52,$24,$a8  ; $c1 upper$(
>3d9c	07 4c 4f 57 45 52 24 a8			.byte $07,$4c,$4f,$57,$45,$52,$24,$a8  ; $c2 lower$(
>3da4	01 c0					.byte $01,$c0                          ; $c3 @
>3da6	01 fe					.byte $01,$fe                          ; $c4 ~
>3da8	01 a6					.byte $01,$a6                          ; $c5 &
>3daa	05 47 45 54 24 a8			.byte $05,$47,$45,$54,$24,$a8          ; $c6 get$(
>3db0	07 49 4e 4b 45 59 24 a8			.byte $07,$49,$4e,$4b,$45,$59,$24,$a8  ; $c7 inkey$(
>3db8	03 4d 45 cd				.byte $03,$4d,$45,$cd                  ; $c8 mem
>3dbc	01 a9					.byte $01,$a9                          ; $c9 )
>3dbe	01 ba					.byte $01,$ba                          ; $ca :
>3dc0	01 ac					.byte $01,$ac                          ; $cb ,
>3dc2	01 bb					.byte $01,$bb                          ; $cc ;
>3dc4	01 a7					.byte $01,$a7                          ; $cd '
>3dc6	02 54 cf				.byte $02,$54,$cf                      ; $ce to
>3dc9	04 53 54 45 d0				.byte $04,$53,$54,$45,$d0              ; $cf step
>3dce	04 50 52 4f c3				.byte $04,$50,$52,$4f,$c3              ; $d0 proc
>3dd3	05 4c 4f 43 41 cc			.byte $05,$4c,$4f,$43,$41,$cc          ; $d1 local
>3dd9	03 44 49 cd				.byte $03,$44,$49,$cd                  ; $d2 dim
>3ddd	03 52 45 cd				.byte $03,$52,$45,$cd                  ; $d3 rem
>3de1	03 4c 45 d4				.byte $03,$4c,$45,$d4                  ; $d4 let
>3de5	05 49 4e 50 55 d4			.byte $05,$49,$4e,$50,$55,$d4          ; $d5 input
>3deb	04 45 4c 53 c5				.byte $04,$45,$4c,$53,$c5              ; $d6 else
>3df0	03 56 44 d5				.byte $03,$56,$44,$d5                  ; $d7 vdu
>3df4	05 50 52 49 4e d4			.byte $05,$50,$52,$49,$4e,$d4          ; $d8 print
>3dfa	04 44 41 54 c1				.byte $04,$44,$41,$54,$c1              ; $d9 data
>3dff	05 49 4d 41 47 c5			.byte $05,$49,$4d,$41,$47,$c5          ; $da image
>3e05	02 41 d4				.byte $02,$41,$d4                      ; $db at
>3e08	04 46 4c 49 d0				.byte $04,$46,$4c,$49,$d0              ; $dc flip
>3e0d	06 41 53 53 45 52 d4			.byte $06,$41,$53,$53,$45,$52,$d4      ; $dd assert
>3e14	04 50 4f 4b c5				.byte $04,$50,$4f,$4b,$c5              ; $de poke
>3e19	04 44 4f 4b c5				.byte $04,$44,$4f,$4b,$c5              ; $df doke
>3e1e	04 4c 4f 4b c5				.byte $04,$4c,$4f,$4b,$c5              ; $e0 loke
>3e23	03 49 4e cb				.byte $03,$49,$4e,$cb                  ; $e1 ink
>3e27	05 50 41 50 45 d2			.byte $05,$50,$41,$50,$45,$d2          ; $e2 paper
>3e2d	03 43 4c d3				.byte $03,$43,$4c,$d3                  ; $e3 cls
>3e31	06 4c 4f 43 41 54 c5			.byte $06,$4c,$4f,$43,$41,$54,$c5      ; $e4 locate
>3e38	01 ae					.byte $01,$ae                          ; $e5 .
>3e3a	01 a3					.byte $01,$a3                          ; $e6 #
>3e3c	05 43 4c 45 41 d2			.byte $05,$43,$4c,$45,$41,$d2          ; $e7 clear
>3e42	00					.byte $00

;******  Return to file: tokeniser/tokentext.asm


;******  Processing file: tokeniser/../generated/tokentext1.inc

.3e43					Group1Text:
>3e43	04 4c 4f 41 c4				.byte $04,$4c,$4f,$41,$c4              ; $86 load
>3e48	04 53 41 56 c5				.byte $04,$53,$41,$56,$c5              ; $87 save
>3e4d	04 4c 49 53 d4				.byte $04,$4c,$49,$53,$d4              ; $88 list
>3e52	03 4e 45 d7				.byte $03,$4e,$45,$d7                  ; $89 new
>3e56	05 42 52 45 41 cb			.byte $05,$42,$52,$45,$41,$cb          ; $8a break
>3e5c	03 52 55 ce				.byte $03,$52,$55,$ce                  ; $8b run
>3e60	04 52 45 41 c4				.byte $04,$52,$45,$41,$c4              ; $8c read
>3e65	07 52 45 53 54 4f 52 c5			.byte $07,$52,$45,$53,$54,$4f,$52,$c5  ; $8d restore
>3e6d	03 45 4e c4				.byte $03,$45,$4e,$c4                  ; $8e end
>3e71	04 53 54 4f d0				.byte $04,$53,$54,$4f,$d0              ; $8f stop
>3e76	04 58 45 4d d5				.byte $04,$58,$45,$4d,$d5              ; $90 xemu
>3e7b	04 47 4f 54 cf				.byte $04,$47,$4f,$54,$cf              ; $91 goto
>3e80	05 47 4f 53 55 c2			.byte $05,$47,$4f,$53,$55,$c2          ; $92 gosub
>3e86	06 52 45 54 55 52 ce			.byte $06,$52,$45,$54,$55,$52,$ce      ; $93 return
>3e8d	03 4f 52 c1				.byte $03,$4f,$52,$c1                  ; $94 ora
>3e91	05 28 41 4e 44 a9			.byte $05,$28,$41,$4e,$44,$a9          ; $95 (and)
>3e97	03 45 4f d2				.byte $03,$45,$4f,$d2                  ; $96 eor
>3e9b	03 41 44 c3				.byte $03,$41,$44,$c3                  ; $97 adc
>3e9f	03 53 54 c1				.byte $03,$53,$54,$c1                  ; $98 sta
>3ea3	03 4c 44 c1				.byte $03,$4c,$44,$c1                  ; $99 lda
>3ea7	03 43 4d d0				.byte $03,$43,$4d,$d0                  ; $9a cmp
>3eab	03 53 42 c3				.byte $03,$53,$42,$c3                  ; $9b sbc
>3eaf	03 41 53 cc				.byte $03,$41,$53,$cc                  ; $9c asl
>3eb3	03 52 4f cc				.byte $03,$52,$4f,$cc                  ; $9d rol
>3eb7	03 4c 53 d2				.byte $03,$4c,$53,$d2                  ; $9e lsr
>3ebb	03 52 4f d2				.byte $03,$52,$4f,$d2                  ; $9f ror
>3ebf	03 53 54 d8				.byte $03,$53,$54,$d8                  ; $a0 stx
>3ec3	03 4c 44 d8				.byte $03,$4c,$44,$d8                  ; $a1 ldx
>3ec7	03 44 45 c3				.byte $03,$44,$45,$c3                  ; $a2 dec
>3ecb	03 49 4e c3				.byte $03,$49,$4e,$c3                  ; $a3 inc
>3ecf	03 53 54 da				.byte $03,$53,$54,$da                  ; $a4 stz
>3ed3	03 42 49 d4				.byte $03,$42,$49,$d4                  ; $a5 bit
>3ed7	03 53 54 d9				.byte $03,$53,$54,$d9                  ; $a6 sty
>3edb	03 4c 44 d9				.byte $03,$4c,$44,$d9                  ; $a7 ldy
>3edf	03 43 50 d9				.byte $03,$43,$50,$d9                  ; $a8 cpy
>3ee3	03 43 50 d8				.byte $03,$43,$50,$d8                  ; $a9 cpx
>3ee7	03 54 53 c2				.byte $03,$54,$53,$c2                  ; $aa tsb
>3eeb	03 54 52 c2				.byte $03,$54,$52,$c2                  ; $ab trb
>3eef	03 4a 53 d2				.byte $03,$4a,$53,$d2                  ; $ac jsr
>3ef3	03 4a 4d d0				.byte $03,$4a,$4d,$d0                  ; $ad jmp
>3ef7	03 42 50 cc				.byte $03,$42,$50,$cc                  ; $ae bpl
>3efb	03 42 4d c9				.byte $03,$42,$4d,$c9                  ; $af bmi
>3eff	03 42 56 c3				.byte $03,$42,$56,$c3                  ; $b0 bvc
>3f03	03 42 56 d3				.byte $03,$42,$56,$d3                  ; $b1 bvs
>3f07	03 42 43 c3				.byte $03,$42,$43,$c3                  ; $b2 bcc
>3f0b	03 42 43 d3				.byte $03,$42,$43,$d3                  ; $b3 bcs
>3f0f	03 42 4e c5				.byte $03,$42,$4e,$c5                  ; $b4 bne
>3f13	03 42 45 d1				.byte $03,$42,$45,$d1                  ; $b5 beq
>3f17	03 42 52 c1				.byte $03,$42,$52,$c1                  ; $b6 bra
>3f1b	03 42 52 cb				.byte $03,$42,$52,$cb                  ; $b7 brk
>3f1f	03 50 48 d0				.byte $03,$50,$48,$d0                  ; $b8 php
>3f23	03 43 4c c3				.byte $03,$43,$4c,$c3                  ; $b9 clc
>3f27	03 50 4c d0				.byte $03,$50,$4c,$d0                  ; $ba plp
>3f2b	03 53 45 c3				.byte $03,$53,$45,$c3                  ; $bb sec
>3f2f	03 52 54 c9				.byte $03,$52,$54,$c9                  ; $bc rti
>3f33	03 50 48 c1				.byte $03,$50,$48,$c1                  ; $bd pha
>3f37	03 43 4c c9				.byte $03,$43,$4c,$c9                  ; $be cli
>3f3b	03 50 48 d9				.byte $03,$50,$48,$d9                  ; $bf phy
>3f3f	03 52 54 d3				.byte $03,$52,$54,$d3                  ; $c0 rts
>3f43	03 50 4c c1				.byte $03,$50,$4c,$c1                  ; $c1 pla
>3f47	03 53 45 c9				.byte $03,$53,$45,$c9                  ; $c2 sei
>3f4b	03 50 4c d9				.byte $03,$50,$4c,$d9                  ; $c3 ply
>3f4f	03 44 45 d9				.byte $03,$44,$45,$d9                  ; $c4 dey
>3f53	03 54 58 c1				.byte $03,$54,$58,$c1                  ; $c5 txa
>3f57	03 54 59 c1				.byte $03,$54,$59,$c1                  ; $c6 tya
>3f5b	03 54 58 d3				.byte $03,$54,$58,$d3                  ; $c7 txs
>3f5f	03 54 41 d9				.byte $03,$54,$41,$d9                  ; $c8 tay
>3f63	03 54 41 d8				.byte $03,$54,$41,$d8                  ; $c9 tax
>3f67	03 43 4c d6				.byte $03,$43,$4c,$d6                  ; $ca clv
>3f6b	03 54 53 d8				.byte $03,$54,$53,$d8                  ; $cb tsx
>3f6f	03 49 4e d9				.byte $03,$49,$4e,$d9                  ; $cc iny
>3f73	03 44 45 d8				.byte $03,$44,$45,$d8                  ; $cd dex
>3f77	03 43 4c c4				.byte $03,$43,$4c,$c4                  ; $ce cld
>3f7b	03 50 48 d8				.byte $03,$50,$48,$d8                  ; $cf phx
>3f7f	03 49 4e d8				.byte $03,$49,$4e,$d8                  ; $d0 inx
>3f83	03 4e 4f d0				.byte $03,$4e,$4f,$d0                  ; $d1 nop
>3f87	03 53 45 c4				.byte $03,$53,$45,$c4                  ; $d2 sed
>3f8b	03 50 4c d8				.byte $03,$50,$4c,$d8                  ; $d3 plx
>3f8f	00					.byte $00

;******  Return to file: tokeniser/tokentext.asm


;******  Processing file: tokeniser/../generated/tokentext2.inc

.3f90					Group2Text:
>3f90	05 56 50 4f 4b c5			.byte $05,$56,$50,$4f,$4b,$c5          ; $86 vpoke
>3f96	05 56 44 4f 4b c5			.byte $05,$56,$44,$4f,$4b,$c5          ; $87 vdoke
>3f9c	05 56 4c 4f 41 c4			.byte $05,$56,$4c,$4f,$41,$c4          ; $88 vload
>3fa2	04 4d 4f 44 c5				.byte $04,$4d,$4f,$44,$c5              ; $89 mode
>3fa7	07 50 41 4c 45 54 54 c5			.byte $07,$50,$41,$4c,$45,$54,$54,$c5  ; $8a palette
>3faf	06 53 50 52 49 54 c5			.byte $06,$53,$50,$52,$49,$54,$c5      ; $8b sprite
>3fb6	00					.byte $00

;******  Return to file: tokeniser/tokentext.asm


;******  Processing file: tokeniser/../generated/tokentext3.inc

.3fb7					Group3Text:
>3fb7	06 56 50 45 45 4b a8			.byte $06,$56,$50,$45,$45,$4b,$a8      ; $86 vpeek(
>3fbe	06 56 44 45 45 4b a8			.byte $06,$56,$44,$45,$45,$4b,$a8      ; $87 vdeek(
>3fc5	00					.byte $00

;******  Return to file: tokeniser/tokentext.asm


;******  Return to file: tokeniser/tokeniser.asm

.3fc6					tokeniserHandler:
.3fc6	7c c9 3f	jmp ($3fc9,x)			jmp 	(tokeniserVectors,x)
.3fc9					tokeniserVectors:
>3fc9	d5 3f					.word _DummyControlHandler ; index 0
>3fcb	c2 37					.word Detokenise           ; index 2
>3fcd	b6 37					.word ListLine             ; index 4
>3fcf	47 3a					.word TokTest              ; index 6
>3fd1	67 3a					.word Tokenise             ; index 8
>3fd3	6a 3a					.word TokeniseASCIIZ       ; index 10
.3fd5					_DummyControlHandler:
.3fd5	60		rts			rts

;******  Return to file: basic.asm

.3fd6					section_end_tokeniser:
.3fd6					section_start_variable:

;******  Processing file: variable/variable.asm


;******  Processing file: variable/array/access.asm

.3fd6					AccessArray:
.3fd6	8a		txa				txa
.3fd7	48		pha				pha
.3fd8	e8		inx				inx
.3fd9	20 a2 40	jsr $40a2			jsr 	GetArrayDimensions 			; get the array dimensions one up from here.
.3fdc	68		pla				pla
.3fdd	aa		tax				tax
.3fde	b5 50		lda $50,x			lda 	esInt0,x 					; restore address to follow in temp0.
.3fe0	85 2a		sta $2a				sta 	temp0
.3fe2	b5 58		lda $58,x			lda 	esInt1,x
.3fe4	85 2b		sta $2b				sta 	temp0+1
.3fe6	8a		txa				txa
.3fe7	48		pha				pha
.3fe8	98		tya				tya
.3fe9	48		pha				pha
.3fea					_AAFollow:
.3fea	a0 00		ldy #$00			ldy 	#0
.3fec	b1 2a		lda ($2a),y			lda 	(temp0),y
.3fee	48		pha				pha
.3fef	c8		iny				iny
.3ff0	b1 2a		lda ($2a),y			lda 	(temp0),y
.3ff2	85 2b		sta $2b				sta 	temp0+1
.3ff4	68		pla				pla
.3ff5	85 2a		sta $2a				sta 	temp0
.3ff7	e8		inx				inx 								; advance to next stack slot.
.3ff8	a0 00		ldy #$00			ldy 	#0
.3ffa	b1 2a		lda ($2a),y			lda 	(temp0),y 					; compare max index vs required index
.3ffc	d5 50		cmp $50,x			cmp 	esInt0,x
.3ffe	c8		iny				iny
.3fff	b1 2a		lda ($2a),y			lda 	(temp0),y 					; drop bit 7 of the size, indicates follow.
.4001	85 2c		sta $2c				sta 	temp1 						; save the size in temp1 for later use.
.4003	29 7f		and #$7f			and 	#$7F
.4005	f5 58		sbc $58,x			sbc 	esInt1,x
.4007	90 50		bcc $4059			bcc 	_AABadIndex 				; failed on index if max index < required.
.4009	18		clc				clc
.400a	a5 2a		lda $2a				lda 	temp0
.400c	69 02		adc #$02			adc 	#2
.400e	85 2a		sta $2a				sta 	temp0
.4010	90 02		bcc $4014			bcc 	_AANoCarry
.4012	e6 2b		inc $2b				inc 	temp0+1
.4014					_AANoCarry:
.4014	b5 50		lda $50,x			lda 	esInt0,x
.4016	85 2e		sta $2e				sta 	temp2
.4018	b5 58		lda $58,x			lda 	esInt1,x
.401a	85 2f		sta $2f				sta 	temp2+1
.401c	ac ed 0d	ldy $0ded			ldy 	varType
.401f	b9 fc 40	lda $40fc,y			lda 	CAActualSize-$3A,y
.4022	b4 49		ldy $49,x			ldy 	esType+1,x 					; is it top level
.4024	30 02		bmi $4028			bmi 	_AANotPointer
.4026	a9 02		lda #$02			lda 	#2 							; array of pointers is 2.
.4028					_AANotPointer:
.4028	20 a6 41	jsr $41a6			jsr 	MultiplyTemp2ByA 			; multiply the index by the data size, in temp2.
.402b	18		clc				clc
.402c	a5 2a		lda $2a				lda 	temp0
.402e	65 2e		adc $2e				adc 	temp2
.4030	85 2a		sta $2a				sta 	temp0
.4032	a5 2b		lda $2b				lda 	temp0+1
.4034	65 2f		adc $2f				adc 	temp2+1
.4036	85 2b		sta $2b				sta 	temp0+1
.4038	b5 49		lda $49,x			lda 	esType+1,x
.403a	30 07		bmi $4043			bmi 	_AAUsedAllIndices
.403c	a5 2c		lda $2c				lda 	temp1 						; check if this is a pointer array e.g. there are subarrays
.403e	10 14		bpl $4054			bpl 	_AABadDepth 				; no, too many indexes.
.4040	4c ea 3f	jmp $3fea			jmp 	_AAFollow 					; otherwise follow them.
.4043					_AAUsedAllIndices:
.4043	a5 2c		lda $2c				lda 	temp1 						; get original high length byte.
.4045	30 0d		bmi $4054			bmi 	_AABadDepth 				; if -ve then this is an array of pointers.
.4047	68		pla				pla
.4048	a8		tay				tay
.4049	68		pla				pla
.404a	aa		tax				tax
.404b	a5 2a		lda $2a				lda 	temp0 						; copy address of array element to stack,x
.404d	95 50		sta $50,x			sta 	esInt0,x
.404f	a5 2b		lda $2b				lda 	temp0+1
.4051	95 58		sta $58,x			sta 	esInt1,x
.4053	60		rts				rts
.4054					_AABadDepth:
.4054	a2 1c		ldx #$1c			ldx 	#ErrorID_ArrayDepth
.4056	20 18 15	jsr $1518		jsr	errorHandler
.4059					_AABadIndex:
.4059	a2 1b		ldx #$1b			ldx 	#ErrorID_ArrayIndex
.405b	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: variable/variable.asm


;******  Processing file: variable/array/create.asm

.0deb					elementSize:
>0deb							.fill	 1
.405e					CreateArray:
.405e	20 35 42	jsr $4235			jsr 	AccessSetup 				; set up the basic stuff.
.4061	ad ed 0d	lda $0ded			lda 	varType 					; is the variable type an array
.4064	4a		lsr a				lsr 	a
.4065	90 36		bcc $409d			bcc 	CANotArray 					; no, cause an error.
.4067	20 3e 43	jsr $433e			jsr 	FindVariable 				; does the variable exist already
.406a	b0 2c		bcs $4098			bcs 	CAFound 					; cannot redefine it.
.406c	20 72 42	jsr $4272			jsr 	CreateVariable 				; create the variable entry.
.406f	a5 2a		lda $2a				lda 	temp0 						; push address of new variable entry on the stack
.4071	48		pha				pha
.4072	a5 2b		lda $2b				lda 	temp0+1
.4074	48		pha				pha
.4075	a2 00		ldx #$00			ldx 	#0
.4077	20 a2 40	jsr $40a2			jsr 	GetArrayDimensions 			; get the array dimensions
.407a	a2 00		ldx #$00			ldx 	#0 							; create at level $00
.407c	20 d2 40	jsr $40d2			jsr 	CreateArrayLevel 			; level to YA
.407f	aa		tax				tax 								; level now in YX
.4080	68		pla				pla 								; get address back to temp0 to write.
.4081	85 2b		sta $2b				sta 	temp0+1
.4083	68		pla				pla
.4084	85 2a		sta $2a				sta 	temp0
.4086	98		tya				tya 								; write YX there.
.4087	a0 06		ldy #$06			ldy 	#6
.4089	91 2a		sta ($2a),y			sta 	(temp0),y
.408b	88		dey				dey
.408c	8a		txa				txa
.408d	91 2a		sta ($2a),y			sta 	(temp0),y
.408f	ac ee 0d	ldy $0dee			ldy 	varEnd 						; restore Y and exit.
.4092	60		rts				rts
.4093					CASize:
.4093	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.4095	20 18 15	jsr $1518		jsr	errorHandler
.4098					CAFound:
.4098	a2 19		ldx #$19			ldx 	#ErrorID_DupArray
.409a	20 18 15	jsr $1518		jsr	errorHandler
.409d					CANotArray:
.409d	a2 1a		ldx #$1a			ldx 	#ErrorID_NotArray
.409f	20 18 15	jsr $1518		jsr	errorHandler
.40a2					GetArrayDimensions:
.40a2	ad ed 0d	lda $0ded			lda 	varType 					; push variable type on the stack.
.40a5	48		pha				pha
.40a6	ac ee 0d	ldy $0dee			ldy 	varEnd
.40a9					_CAGetDimensions:
.40a9	8a		txa				txa 								; get the next level
.40aa	a2 0a		ldx #$0a		ldx	#10
.40ac	20 e3 34	jsr $34e3		jsr	mainHandler
.40af	aa		tax				tax
.40b0	b5 58		lda $58,x			lda 	esInt1,x 					; index must be < 8192
.40b2	29 e0		and #$e0			and 	#$E0
.40b4	15 60		ora $60,x			ora 	esInt2,x
.40b6	15 68		ora $68,x			ora 	esInt3,x
.40b8	d0 d9		bne $4093			bne 	CASize
.40ba	e8		inx				inx 								; next level.
.40bb	b1 28		lda ($28),y			lda 	(codePtr),y 				; get/consume following character
.40bd	c8		iny				iny
.40be	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; loop back if more dimensions
.40c0	f0 e7		beq $40a9			beq 	_CAGetDimensions
.40c2	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN 				; right bracket ?
.40c4	d0 cd		bne $4093			bne 	CASize
.40c6	a9 ff		lda #$ff			lda 	#$FF 						; set the type past the end to $FF so we know how many
.40c8	95 48		sta $48,x			sta 	esType,x 					; dimensions there are.
.40ca	68		pla				pla 								; restore the variable type ($3A-$3F)
.40cb	8d ed 0d	sta $0ded			sta 	varType
.40ce	8c ee 0d	sty $0dee			sty 	varEnd 						; save exit Y value, after dimensions
.40d1	60		rts				rts
.40d2					CreateArrayLevel:
.40d2	ac ed 0d	ldy $0ded			ldy 	varType
.40d5	b9 fc 40	lda $40fc,y			lda 	CAActualSize-$3A,y
.40d8	8d eb 0d	sta $0deb			sta 	elementSize 				; get element size this level.
.40db	b4 49		ldy $49,x			ldy 	esType+1,x 					; is it top level
.40dd	30 05		bmi $40e4			bmi 	_CANotPointer
.40df	a9 02		lda #$02			lda 	#2 							; array of pointers is 2.
.40e1	8d eb 0d	sta $0deb			sta 	elementSize
.40e4					_CANotPointer:
.40e4	a5 35		lda $35				lda 	lowMemory 					; start creating at temp0, saving start on stack.
.40e6	85 2a		sta $2a				sta 	temp0
.40e8	48		pha				pha
.40e9	a5 36		lda $36				lda 	lowMemory+1
.40eb	85 2b		sta $2b				sta 	temp0+1
.40ed	48		pha				pha
.40ee	20 6f 41	jsr $416f			jsr 	AllocateArraySpace 			; allocate space for all array stuff at this level.
.40f1	a0 00		ldy #$00			ldy 	#0
.40f3	b5 50		lda $50,x			lda 	esInt0,x
.40f5	91 2a		sta ($2a),y			sta 	(temp0),y
.40f7	c8		iny				iny
.40f8	b5 58		lda $58,x			lda 	esInt1,x
.40fa	91 2a		sta ($2a),y			sta 	(temp0),y
.40fc	b5 49		lda $49,x			lda 	esType+1,x 					; do we have another level ?
.40fe	30 06		bmi $4106			bmi 	_CALNotLast
.4100	b1 2a		lda ($2a),y			lda 	(temp0),y 					; set bit 7, indicates an array of pointers to other levels.
.4102	09 80		ora #$80			ora 	#$80
.4104	91 2a		sta ($2a),y			sta 	(temp0),y
.4106					_CALNotLast:
.4106	a9 02		lda #$02			lda 	#2
.4108	20 2c 41	jsr $412c			jsr 	_CALAddTemp0
.410b	b5 50		lda $50,x			lda 	esInt0,x 					; copy stack:01 to stack:23 so we can use it to
.410d	95 60		sta $60,x			sta 	esInt2,x 					; count.
.410f	b5 58		lda $58,x			lda 	esInt1,x
.4111	95 68		sta $68,x			sta 	esInt3,x
.4113					_CALClear:
.4113	20 3c 41	jsr $413c			jsr 	EraseOneElement
.4116	ad eb 0d	lda $0deb			lda 	elementSize 				; move to next element
.4119	20 2c 41	jsr $412c			jsr 	_CALAddTemp0
.411c	b5 60		lda $60,x			lda 	esInt2,x 					; decrement counter
.411e	d0 02		bne $4122			bne 	_CALNoBorrow
.4120	d6 68		dec $68,x			dec 	esInt3,x
.4122					_CALNoBorrow:
.4122	d6 60		dec $60,x			dec 	esInt2,x
.4124	b5 68		lda $68,x			lda 	esInt3,x 					; loop back if >= 0 - we need +1 because indices
.4126	10 eb		bpl $4113			bpl 	_CALClear 					; start at 0 e.g. x(10) is actually 11 array entries.
.4128	68		pla				pla 								; restore the start of this into YA.
.4129	a8		tay				tay
.412a	68		pla				pla
.412b	60		rts				rts
.412c					_CALAddTemp0:
.412c	18		clc				clc
.412d	65 2a		adc $2a				adc 	temp0
.412f	85 2a		sta $2a				sta 	temp0
.4131	90 02		bcc $4135			bcc 	_CALANoCarry
.4133	e6 2b		inc $2b				inc 	temp0+1
.4135					_CALANoCarry:
.4135	60		rts				rts
.4136					CAActualSize:
>4136	04 04						.byte 	VarISize,VarISize
>4138	02 02						.byte 	VarSSize,VarSSize
>413a	06 06						.byte 	VarFSize,VarFSize
.413c					EraseOneElement:
.413c	b5 49		lda $49,x			lda 	esType+1,x 					; is this a list of sub arrays
.413e	10 09		bpl $4149			bpl 	_EOESubArray
.4140	a0 00		ldy #$00			ldy 	#0 							; write the empty variable value out.
.4142	ad ed 0d	lda $0ded			lda 	varType
.4145	20 dc 42	jsr $42dc			jsr 	ZeroTemp0Y
.4148	60		rts				rts
.4149					_EOESubArray:
.4149	a5 2a		lda $2a				lda 	temp0 						; save temp0, these are effectively locals.
.414b	48		pha				pha
.414c	a5 2b		lda $2b				lda 	temp0+1
.414e	48		pha				pha
.414f	ad eb 0d	lda $0deb			lda 	elementSize 				; save element size
.4152	48		pha				pha
.4153	e8		inx				inx 								; create at next level
.4154	20 d2 40	jsr $40d2			jsr 	CreateArrayLevel
.4157	ca		dex				dex
.4158	85 32		sta $32				sta 	tempShort 					; save A
.415a	68		pla				pla  								; restore element size.
.415b	8d eb 0d	sta $0deb			sta 	elementSize
.415e	68		pla				pla 								; restore temp0, which is where this new array level goes.
.415f	85 2b		sta $2b				sta 	temp0+1
.4161	68		pla				pla
.4162	85 2a		sta $2a				sta 	temp0
.4164	98		tya				tya 								; store Y/A there
.4165	a0 01		ldy #$01			ldy 	#1
.4167	91 2a		sta ($2a),y			sta 	(temp0),y
.4169	a5 32		lda $32				lda 	tempShort
.416b	88		dey				dey
.416c	91 2a		sta ($2a),y			sta 	(temp0),y
.416e	60		rts				rts
.416f					AllocateArraySpace:
.416f	18		clc				clc 								; element count + 1 => temp2.
.4170	b5 50		lda $50,x			lda 	esInt0,x
.4172	69 01		adc #$01			adc 	#1
.4174	85 2e		sta $2e				sta 	temp2
.4176	b5 58		lda $58,x			lda 	esInt1,x
.4178	69 00		adc #$00			adc 	#0
.417a	85 2f		sta $2f				sta 	temp2+1
.417c	ad eb 0d	lda $0deb			lda 	elementSize 				; bytes per element
.417f	20 a6 41	jsr $41a6			jsr 	MultiplyTemp2ByA 			; temp2 = (count + 1) x bytes per element.
.4182	18		clc				clc 								; add 2 for 'max element' byte.
.4183	a5 2e		lda $2e				lda 	temp2
.4185	69 02		adc #$02			adc 	#2
.4187	85 2e		sta $2e				sta 	temp2
.4189	90 02		bcc $418d			bcc 	_AASNoCarry
.418b	e6 2f		inc $2f				inc 	temp2+1
.418d					_AASNoCarry:
.418d	18		clc				clc 								; add to low memory, allocating space.
.418e	a5 35		lda $35				lda 	lowMemory
.4190	65 2e		adc $2e				adc 	temp2
.4192	85 35		sta $35				sta 	lowMemory
.4194	a5 36		lda $36				lda 	lowMemory+1
.4196	65 2f		adc $2f				adc 	temp2+1
.4198	85 36		sta $36				sta 	lowMemory+1
.419a	b0 05		bcs $41a1			bcs 	_AASFail 					; out of memory as adding causes wrapround
.419c	c5 34		cmp $34				cmp 	highMemory+1 				; >= high memory pointer.
.419e	b0 01		bcs $41a1			bcs 	_AASFail
.41a0	60		rts				rts
.41a1					_AASFail:
.41a1	a2 22		ldx #$22			ldx 	#ErrorID_Memory
.41a3	20 18 15	jsr $1518		jsr	errorHandler
.41a6					MultiplyTemp2ByA:
.41a6	48		pha				pha
.41a7	a5 2e		lda $2e				lda 	temp2 						; copy temp2 to temp3.
.41a9	85 30		sta $30				sta 	temp3
.41ab	a5 2f		lda $2f				lda 	temp2+1
.41ad	85 31		sta $31				sta 	temp3+1
.41af	68		pla				pla
.41b0	06 2e		asl $2e				asl 	temp2 						; double it.
.41b2	26 2f		rol $2f				rol 	temp2+1
.41b4	c9 02		cmp #$02			cmp 	#2 							; if x 2 then exit.
.41b6	f0 15		beq $41cd			beq 	_MTBAExit
.41b8	c9 06		cmp #$06			cmp 	#6 							; if x 6 then add temp3 to temp2
.41ba	d0 0d		bne $41c9			bne 	_MTBANotFloat
.41bc	18		clc				clc 								; so this will make it x 3
.41bd	a5 2e		lda $2e				lda 	temp2
.41bf	65 30		adc $30				adc 	temp3
.41c1	85 2e		sta $2e				sta 	temp2
.41c3	a5 2f		lda $2f				lda 	temp2+1
.41c5	65 31		adc $31				adc 	temp3+1
.41c7	85 2f		sta $2f				sta 	temp2+1
.41c9					_MTBANotFloat:
.41c9	06 2e		asl $2e				asl 	temp2 						; double it.
.41cb	26 2f		rol $2f				rol 	temp2+1
.41cd					_MTBAExit:
.41cd	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/variable/access.asm

.0dec					varHash:
>0dec							.fill	1
.0ded					varType:
>0ded							.fill 	1
.0dee					varEnd:
>0dee							.fill 	1
.003b					hashList:
>003b							.fill 	2
.41ce					AccessVariable:
.41ce	aa		tax				tax 								; stack in X
.41cf	c8		iny				iny									; look at second character
.41d0	b1 28		lda ($28),y			lda 	(codePtr),y
.41d2	88		dey				dey
.41d3	c9 3a		cmp #$3a			cmp 	#TYPE_INT 					; is it the integer marker ($3A)
.41d5	d0 15		bne $41ec			bne 	_AVLong 					; no, always use the hash tables.
.41d7	b1 28		lda ($28),y			lda 	(codePtr),y 				; this is the 6 bit ASCII of A-Z 1-26
.41d9	38		sec				sec 	 							; make it 0-25
.41da	e9 01		sbc #$01			sbc 	#1
.41dc	0a		asl a				asl 	a 							; x 4 as 4 bytes / variable.
.41dd	0a		asl a				asl 	a
.41de	95 50		sta $50,x			sta 	esInt0,x
.41e0	a9 0a		lda #$0a			lda 	#SingleLetterVar >> 8 		; make it an address
.41e2	95 58		sta $58,x			sta 	esInt1,x
.41e4	a9 80		lda #$80			lda 	#$80 						; type is an integer reference.
.41e6	95 48		sta $48,x			sta 	esType,x
.41e8	c8		iny				iny 								; skip over the variable reference in the code.
.41e9	c8		iny				iny  								; (1 letter, 1 type)
.41ea	8a		txa				txa 								; stack in A to return.
.41eb	60		rts				rts
.41ec					_AVLong:
.41ec	8a		txa				txa
.41ed	48		pha				pha
.41ee	20 35 42	jsr $4235			jsr 	AccessSetup 				; set up the basic information we need for later
.41f1	20 3e 43	jsr $433e			jsr 	FindVariable 				; does the variable exist already ?
.41f4	b0 0e		bcs $4204			bcs 	_AVFound 					; yes, then its found
.41f6	ad ed 0d	lda $0ded			lda 	varType 					; otherwise, is the variable type an array
.41f9	4a		lsr a				lsr 	a
.41fa	90 05		bcc $4201			bcc 	_AVCanCreate 				; if not, we can autocreate
.41fc	a2 15		ldx #$15			ldx 	#ErrorID_noauto
.41fe	20 18 15	jsr $1518		jsr	errorHandler
.4201					_AVCanCreate:
.4201	20 72 42	jsr $4272			jsr 	CreateVariable 				; variable does not exist, create it.
.4204					_AVFound:
.4204	68		pla				pla
.4205	aa		tax				tax
.4206	18		clc				clc 								; copy temp0 (variable record address)
.4207	a5 2a		lda $2a				lda 	temp0 						; +5 (to point to the data)
.4209	69 05		adc #$05			adc 	#5 							; (first 5 bytes are link, name, hash)
.420b	95 50		sta $50,x			sta 	esInt0,x
.420d	a5 2b		lda $2b				lda 	temp0+1
.420f	69 00		adc #$00			adc 	#0
.4211	95 58		sta $58,x			sta 	esInt1,x
.4213	a9 00		lda #$00			lda 	#0
.4215	95 60		sta $60,x			sta 	esInt2,x
.4217	95 68		sta $68,x			sta 	esInt3,x
.4219	ac ed 0d	ldy $0ded			ldy 	varType 					; get the type ID from the type.
.421c	b9 f5 41	lda $41f5,y			lda 	_AVTypeTable-$3A,y 			; e.g. a reference to int/float/string.
.421f	95 48		sta $48,x			sta 	esType,x
.4221	ac ee 0d	ldy $0dee			ldy 	varEnd 						; restore Y
.4224	ad ed 0d	lda $0ded			lda 	VarType 					; get variable type, put LSB into C
.4227	4a		lsr a				lsr 	a
.4228	90 03		bcc $422d			bcc 	_AVNotArray 				; if carry set,it is an array variable.
.422a	20 d6 3f	jsr $3fd6			jsr 	AccessArray 				; array lookup. if LSB was set.
.422d					_AVNotArray:
.422d	8a		txa				txa 								; return stack in A and return
.422e	60		rts				rts
.422f					_AVTypeTable:
>422f	80 80						.byte 	$80,$80						; integer
>4231	c0 c0						.byte 	$C0,$C0 					; string
>4233	81 81						.byte 	$81,$81 					; float
.4235					AccessSetup:
.4235	a9 00		lda #$00			lda 	#0 							; zero the hash byte.
.4237	8d ec 0d	sta $0dec			sta 	varHash
.423a	98		tya				tya
.423b	48		pha				pha
.423c	b1 28		lda ($28),y	_ASLoop:lda 	(codePtr),y					; get next identifier character
.423e	c9 3a		cmp #$3a			cmp 	#$3A 						; is it 3A-3F which end all identifiers ?
.4240	b0 0b		bcs $424d			bcs 	_ASComplete
.4242	18		clc				clc 								; add to the hash. Might improve this.
.4243	6d ec 0d	adc $0dec			adc 	varHash
.4246	8d ec 0d	sta $0dec			sta 	varHash
.4249	c8		iny				iny 								; next character
.424a	4c 3c 42	jmp $423c			jmp 	_ASLoop
.424d					_ASComplete:
.424d	8d ed 0d	sta $0ded			sta 	varType 					; save variable type byte
.4250	c8		iny				iny
.4251	8c ee 0d	sty $0dee			sty 	varEnd 						; save the ending position.
.4254	38		sec				sec 								; convert type byte from $3A-$3F to 0..5
.4255	e9 3a		sbc #$3a			sbc 	#$3A
.4257	0a		asl a				asl 	a 							; multiply by hashTableSize (8 in this case)
.4258	0a		asl a				asl 	a
.4259	0a		asl a				asl 	a
.425a	0a		asl a				asl 	a 							; 2 bytes/word
.425b	85 2a		sta $2a				sta 	temp0 						; this is the offset to the start of the table.
.425d	ad ec 0d	lda $0dec			lda 	varHash 					; get hash
.4260	29 07		and #$07			and 	#(hashTableSize-1)			; force into range (for 8,0..7)
.4262	0a		asl a				asl  	a 							; x 2 (for word) and clear carry
.4263	65 2a		adc $2a				adc 	temp0 						; now offset from the start of the hash table.
.4265	69 68		adc #$68			adc 	#hashTables & $FF 			; add to hash table base address
.4267	85 3b		sta $3b				sta 	hashList 					; making hashLists point to the head of the link list.
.4269	a9 0a		lda #$0a			lda 	#hashTables >> 8
.426b	69 00		adc #$00			adc 	#0
.426d	85 3c		sta $3c				sta 	hashList+1
.426f	68		pla				pla
.4270	a8		tay				tay
.4271	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/variable/create.asm

.4272					CreateVariable:
.4272	98		tya				tya 								; push Y on the stack twice.
.4273	48		pha				pha									; position in code of the new variable.
.4274	48		pha				pha
.4275	ae ed 0d	ldx $0ded			ldx 	varType 					; get var type 0-5 from the var type
.4278	bd 9c 42	lda $429c,x			lda		_CVSize-$3A,x 				; the bytes required for this new variable.
.427b	48		pha				pha 								; save length
.427c	a5 35		lda $35				lda 	lowMemory 					; set low Memory ptr to temp0
.427e	85 2a		sta $2a				sta 	temp0 						; (address of the new variable)
.4280	a5 36		lda $36				lda 	lowMemory+1
.4282	85 2b		sta $2b				sta 	temp0+1
.4284	68		pla				pla 								; get length
.4285	18		clc				clc 								; add to low memory.
.4286	65 35		adc $35				adc 	lowMemory
.4288	85 35		sta $35				sta 	lowMemory
.428a	90 08		bcc $4294			bcc 	_CVNoCarry
.428c	e6 36		inc $36				inc 	lowMemory+1
.428e	a5 36		lda $36				lda 	lowMemory+1 				; check out of memory.
.4290	c5 34		cmp $34				cmp 	highMemory+1
.4292	b0 3d		bcs $42d1			bcs 	_CVMemory
.4294					_CVNoCarry:
.4294	ad ec 0d	lda $0dec			lda 	varHash 					; store hash at offset 4.
.4297	a0 04		ldy #$04			ldy 	#4
.4299	91 2a		sta ($2a),y			sta 	(temp0),y
.429b	68		pla				pla 								; offset, work out where the variable name is.
.429c	18		clc				clc
.429d	65 28		adc $28				adc 	codePtr
.429f	a0 02		ldy #$02			ldy 	#2 							; copy that into slots 2 + 3.
.42a1	91 2a		sta ($2a),y			sta 	(temp0),y
.42a3	a5 29		lda $29				lda 	codePtr+1
.42a5	69 00		adc #$00			adc 	#0
.42a7	c8		iny				iny
.42a8	91 2a		sta ($2a),y			sta 	(temp0),y
.42aa	cd c9 0a	cmp $0ac9			cmp 	basePage+1 					; compare against the program base.
.42ad	b0 03		bcs $42b2			bcs 	_CVNotImmediate
.42af	20 14 43	jsr $4314			jsr 	CloneVariableName 			; we need to clone the variable name (immediate mode)
.42b2					_CVNotImmediate:
.42b2	a0 00		ldy #$00			ldy 	#0 							; copy current hash pointer in link
.42b4	b1 3b		lda ($3b),y			lda 	(hashList),y 				; so we're inserting it in the front of a linked list
.42b6	91 2a		sta ($2a),y			sta 	(temp0),y
.42b8	c8		iny				iny
.42b9	b1 3b		lda ($3b),y			lda 	(hashList),y
.42bb	91 2a		sta ($2a),y			sta 	(temp0),y
.42bd	a5 2b		lda $2b				lda 	temp0+1 					; set new link
.42bf	91 3b		sta ($3b),y			sta 	(hashList),y
.42c1	88		dey				dey
.42c2	a5 2a		lda $2a				lda 	temp0
.42c4	91 3b		sta ($3b),y			sta 	(hashList),y
.42c6	ad ed 0d	lda $0ded			lda 	varType 					; type in A
.42c9	a0 05		ldy #$05			ldy 	#5 							; offset in Y
.42cb	20 dc 42	jsr $42dc			jsr 	ZeroTemp0Y 					; zero (temp0),y with whatever type.
.42ce	68		pla				pla
.42cf	a8		tay				tay
.42d0	60		rts				rts
.42d1					_CVMemory:
.42d1	a2 22		ldx #$22			ldx 	#ErrorID_Memory
.42d3	20 18 15	jsr $1518		jsr	errorHandler
>42d6	09 07				_CVSize:.byte 	VarHSize+VarISize,VarHSize+VarASize 					; <storage for integer>
>42d8	07 07						.byte 	VarHSize+VarSSize,VarHSize+VarASize 					; <storage for string>
>42da	0b 07						.byte 	VarHSize+VarFSize,VarHSize+VarASize 					; <storage for float>
.42dc					ZeroTemp0Y:
.42dc	4a		lsr a				lsr 	a 							; bit 0 in carry
.42dd	0a		asl a				asl 	a
.42de	b0 19		bcs $42f9			bcs 	_ZTExit 					; we don't initialise arrays.
.42e0	c9 3c		cmp #$3c			cmp 	#$3C 						; check string
.42e2	f0 16		beq $42fa			beq 	_ZTWriteNullString 			; write "" string
.42e4	c9 3e		cmp #$3e			cmp 	#$3E 						; check float
.42e6	f0 22		beq $430a			beq 	_ZTWriteFloat
.42e8	98		tya				tya
.42e9	48		pha				pha
.42ea	a9 00		lda #$00			lda 	#0
.42ec	91 2a		sta ($2a),y			sta 	(temp0),y
.42ee	c8		iny				iny
.42ef	91 2a		sta ($2a),y			sta 	(temp0),y
.42f1	c8		iny				iny
.42f2	91 2a		sta ($2a),y			sta 	(temp0),y
.42f4	c8		iny				iny
.42f5	91 2a		sta ($2a),y			sta 	(temp0),y
.42f7	68		pla				pla
.42f8	a8		tay				tay
.42f9					_ZTExit:
.42f9	60		rts				rts
.42fa					_ZTWriteNullString:
.42fa	a9 00		lda #$00			lda 	#0 							; put a reference to null string as the default value.
.42fc	8d ce 0a	sta $0ace			sta 	NullString
.42ff	a9 ce		lda #$ce			lda 	#NullString & $FF
.4301	91 2a		sta ($2a),y			sta 	(temp0),y
.4303	a9 0a		lda #$0a			lda 	#NullString >> 8
.4305	c8		iny				iny
.4306	91 2a		sta ($2a),y			sta 	(temp0),y
.4308	88		dey				dey
.4309	60		rts				rts
.430a					_ZTWriteFloat:
.430a	8a		txa				txa
.430b	48		pha				pha
.430c	a2 20		ldx #$20		ldx	#32
.430e	20 5d 1c	jsr $1c5d		jsr	floatingpointHandler
.4311	68		pla				pla
.4312	aa		tax				tax
.4313	60		rts				rts
.4314					CloneVariableName:
.4314	a0 02		ldy #$02			ldy 	#2 							; copy vname address to temp2
.4316	b1 2a		lda ($2a),y			lda 	(temp0),y
.4318	85 2e		sta $2e				sta 	temp2
.431a	c8		iny				iny
.431b	b1 2a		lda ($2a),y			lda 	(temp0),y
.431d	85 2f		sta $2f				sta 	temp2+1
.431f	a5 36		lda $36				lda 	lowMemory+1 				; copy lowMemory address to (temp0),2/3
.4321	91 2a		sta ($2a),y			sta 	(temp0),y
.4323	88		dey				dey
.4324	a5 35		lda $35				lda 	lowMemory
.4326	91 2a		sta ($2a),y			sta 	(temp0),y
.4328	a0 00		ldy #$00			ldy 	#0 							; copy data from (temp2) to (lowMemory)
.432a					_CVNCopy:
.432a	b1 2e		lda ($2e),y			lda		(temp2),y
.432c	91 35		sta ($35),y			sta 	(lowMemory),y
.432e	c8		iny				iny
.432f	c9 3a		cmp #$3a			cmp 	#$3A 						; until the whole name has been copied.
.4331	90 f7		bcc $432a			bcc 	_CVNCopy
.4333	98		tya				tya 								; add Y to low memory
.4334	18		clc				clc
.4335	65 35		adc $35				adc 	lowMemory
.4337	85 35		sta $35				sta 	lowMemory
.4339	90 02		bcc $433d			bcc 	_CVNNoCarry
.433b	e6 36		inc $36				inc 	lowMemory+1
.433d					_CVNNoCarry:
.433d	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/variable/find.asm

.433e					FindVariable:
.433e	98		tya				tya
.433f	48		pha				pha
.4340	98		tya				tya 								; point temp2 to the actual name
.4341	18		clc				clc 								; in memory of the variable being created
.4342	65 28		adc $28				adc 	codePtr
.4344	85 2e		sta $2e				sta 	temp2
.4346	a5 29		lda $29				lda 	codePtr+1
.4348	69 00		adc #$00			adc 	#0
.434a	85 2f		sta $2f				sta 	temp2+1
.434c	a0 00		ldy #$00			ldy 	#0
.434e	a5 3b		lda $3b				lda 	hashList 					; copy hashlist to temp0
.4350	85 2a		sta $2a				sta 	temp0
.4352	a5 3c		lda $3c				lda 	hashList+1
.4354	85 2b		sta $2b				sta 	temp0+1
.4356	a0 01		ldy #$01	_FVNext:ldy 	#1 							; get MSB
.4358	b1 2a		lda ($2a),y			lda 	(temp0),y
.435a	f0 2c		beq $4388			beq 	_FVFail
.435c	aa		tax				tax
.435d	88		dey				dey		 							; get LSB
.435e	b1 2a		lda ($2a),y			lda 	(temp0),y
.4360	85 2a		sta $2a				sta 	temp0 						; update pointer.
.4362	86 2b		stx $2b				stx 	temp0+1
.4364	a0 04		ldy #$04			ldy 	#4 							; check hashes match
.4366	b1 2a		lda ($2a),y			lda 	(temp0),y
.4368	cd ec 0d	cmp $0dec			cmp 	varHash
.436b	d0 e9		bne $4356			bne 	_FVNext 					; if not, no point in checking the name.
.436d	88		dey				dey 								; copy name pointer (+2,+3) to temp1.
.436e	b1 2a		lda ($2a),y			lda 	(temp0),y
.4370	85 2d		sta $2d				sta 	temp1+1
.4372	88		dey				dey
.4373	b1 2a		lda ($2a),y			lda 	(temp0),y
.4375	85 2c		sta $2c				sta 	temp1
.4377	a0 00		ldy #$00			ldy 	#0
.4379					_FVCheck:
.4379	b1 2c		lda ($2c),y			lda 	(temp1),y 					; compare names
.437b	d1 2e		cmp ($2e),y			cmp 	(temp2),y
.437d	d0 d7		bne $4356			bne 	_FVNext		 				; fail if different.
.437f	c8		iny				iny
.4380	c9 3a		cmp #$3a			cmp 	#$3A 						; until reached the end marker.
.4382	90 f5		bcc $4379			bcc 	_FVCheck
.4384	68		pla				pla
.4385	a8		tay				tay
.4386	38		sec				sec
.4387	60		rts				rts
.4388					_FVFail:
.4388	68		pla				pla
.4389	a8		tay				tay
.438a	18		clc				clc
.438b	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/variable/reset.asm

.438c					HashTableReset:
.438c	a2 60		ldx #$60			ldx 	#6*2*hashTableSize			; 6 types, 2 bytes per table entry.
.438e	a9 00		lda #$00			lda 	#0
.4390					_HTRClear:
.4390	9d 67 0a	sta $0a67,x			sta 	hashTables-1,x
.4393	ca		dex				dex
.4394	d0 fa		bne $4390			bne 	_HTRClear
.4396	60		rts				rts

;******  Return to file: variable/variable.asm

.4397					variableHandler:
.4397	7c 9a 43	jmp ($439a,x)			jmp 	(variableVectors,x)
.439a					variableVectors:
>439a	a2 43					.word _DummyControlHandler ; index 0
>439c	ce 41					.word AccessVariable       ; index 2
>439e	5e 40					.word CreateArray          ; index 4
>43a0	8c 43					.word HashTableReset       ; index 6
.43a2					_DummyControlHandler:
.43a2	60		rts			rts

;******  Return to file: basic.asm

.43a3					section_end_variable:
.43a3					section_start_footer:

;******  Processing file: footer/footer.asm


;******  Processing file: footer/99end.asm

.003d					endZeroPage:
.0def					endStorage:
>43a3							.align 	256
.4400					programMemory:
>43ff	ff						.byte 	$FF

;******  Return to file: footer/footer.asm


;******  Return to file: basic.asm

.4400					section_end_footer:

;******  End of listing
