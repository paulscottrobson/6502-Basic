
; 64tass Turbo Assembler Macro V1.55.2200 listing file
; 64tass -Walias -Wmacro-prefix -Wall -q -c -L ../source/bin/basic.lst -l ../source/bin/basic.lbl -Wall -o ../source/bin/basic.prg basic.asm
; Fri Mar  5 02:14:40 2021

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: basic.asm


;******  Processing file: main/01common.inc


;******  Processing file: main/../generated/installed.inc

=1					installed_main = 1
=1					installed_variable = 1
=1					installed_assembler = 1
=1					installed_error = 1
=1					installed_string = 1
=1					installed_device = 1
=0					installed_floatingpoint = 0
=1					installed_interaction = 1
=1					installed_tokeniser = 1

;******  Return to file: main/01common.inc

=$1000					CodeStart = $1000
=$800					MemoryStorage = $800
=$02					ZeroPageStorage = $02
=8					StackSize = 8
=512					retStackSize = 512
=8					hashTableSize = 8			; if this changes, the calculation is AccessSetup has to match it.
="G"					markerGOSUB = 'G'
="R"					markerREPEAT = 'R'
="F"					markerFOR = 'F'
="W"					markerWHILE = 'W'
="P"					markerPROC = 'P'
="$"					markerSTRING = '$'
="#"					markerFLOAT = '#'
="%"					markerINT = '%'
=5					VarHSize = 5 								; header (2 link, 2 name, 1 hash)
=4					VarISize = 4 								; integer (32 bit)
=6					VarFSize = 6 								; float (4 mantissa, 1 exponent 1 sign/zero)
=2					VarSSize = 2 								; address (2 bytes)

;******  Return to file: basic.asm


;******  Processing file: main/02macros.inc


;******  Return to file: basic.asm


;******  Processing file: main/03data.inc

>0002					codePtr:.fill 	2							; (codePtr),y points to code.
>0004					temp0: 	.fill 	2							; working variables.
>0006					temp1: 	.fill 	2
>0008					temp2: 	.fill 	2
>000a					temp3: 	.fill 	2
.000c					tempshort:
>000c							.fill 	1
.000d					highMemory:
>000d							.fill 	2
.000f					lowMemory:
>000f							.fill 	2
>0040					esType:	.fill 	StackSize  					; type byte (see above)
>0048					esInt0:	.fill 	StackSize 					; integer or mantissa
>0050					esInt1:	.fill 	StackSize
>0058					esInt2:	.fill 	StackSize
>0060					esInt3:	.fill 	StackSize
>0068					esExp:	.fill 	StackSize 					; exponent ($80 = 0)
>0070					esZSign:.fill 	StackSize 					; for floating point - sign (bit 7) isZero (bit 6)
=$48					esMant0 = esInt0 							; synonyms.
=$50					esMant1 = esInt1
=$58					esMant2 = esInt2
=$60					esMant3 = esInt3
>0800							.align	256
.0800					returnStack:
>0800							.fill 	retStackSize
>0a00							.align	256
.0a00					SingleLetterVar:
>0a00					 		.fill 	26*4
.0a68					hashTables:
>0a68							.fill 	6*2*hashTableSize
.0ac8					basePage:
>0ac8							.fill 	2
.0aca					endMemory:
>0aca							.fill 	2
.0acc					NullString:
>0acc							.fill 	1							; don't waste memory concreting null strings.
.0acd					convertBuffer:
>0acd							.fill 	35

;******  Processing file: main/../generated/tokenconst.inc

=$80					TOK_EOL=$80
=$81					TOK_SHIFT1=$81
=$82					TOK_SHIFT2=$82
=$83					TOK_SHIFT3=$83
=$84					TOK_FPC=$84
=$85					TOK_STR=$85
=$86					TOK_BINARYST=$86
=$99					TOK_STRUCTST=$99
=$a4					TOK_UNARYST=$a4
=$c4					TOK_TOKENS=$c4
=$86					TKW_AND                      = $86 ; and
=$87					TKW_OR                       = $87 ; or
=$88					TKW_XOR                      = $88 ; xor
=$89					TKW_GREATEREQUAL             = $89 ; >=
=$8a					TKW_LESSEQUAL                = $8a ; <=
=$8b					TKW_GREATER                  = $8b ; >
=$8c					TKW_LESS                     = $8c ; <
=$8d					TKW_EQUAL                    = $8d ; =
=$8e					TKW_LESSGREATER              = $8e ; <>
=$8f					TKW_PLUS                     = $8f ; +
=$90					TKW_MINUS                    = $90 ; -
=$91					TKW_GREATERGREATER           = $91 ; >>
=$92					TKW_LESSLESS                 = $92 ; <<
=$93					TKW_STAR                     = $93 ; *
=$94					TKW_SLASH                    = $94 ; /
=$95					TKW_MOD                      = $95 ; mod
=$96					TKW_HAT                      = $96 ; ^
=$97					TKW_PLING                    = $97 ; !
=$98					TKW_QMARK                    = $98 ; ?
=$99					TKW_REPEAT                   = $99 ; repeat
=$9a					TKW_WHILE                    = $9a ; while
=$9b					TKW_FOR                      = $9b ; for
=$9c					TKW_IF                       = $9c ; if
=$9d					TKW_DEFPROC                  = $9d ; defproc
=$9e					TKW_UNTIL                    = $9e ; until
=$9f					TKW_WEND                     = $9f ; wend
=$a0					TKW_NEXT                     = $a0 ; next
=$a1					TKW_THEN                     = $a1 ; then
=$a2					TKW_ENDIF                    = $a2 ; endif
=$a3					TKW_ENDPROC                  = $a3 ; endproc
=$a4					TKW_LPAREN                   = $a4 ; (
=$a5					TKW_LENLPAREN                = $a5 ; len(
=$a6					TKW_SGNLPAREN                = $a6 ; sgn(
=$a7					TKW_ABSLPAREN                = $a7 ; abs(
=$a8					TKW_RANDOMLPAREN             = $a8 ; random(
=$a9					TKW_PAGE                     = $a9 ; page
=$aa					TKW_TRUE                     = $aa ; true
=$ab					TKW_FALSE                    = $ab ; false
=$ac					TKW_MINLPAREN                = $ac ; min(
=$ad					TKW_MAXLPAREN                = $ad ; max(
=$ae					TKW_SYSLPAREN                = $ae ; sys(
=$af					TKW_TIMERLPAREN              = $af ; timer(
=$b0					TKW_EVENTLPAREN              = $b0 ; event(
=$b1					TKW_GETLPAREN                = $b1 ; get(
=$b2					TKW_INKEYLPAREN              = $b2 ; inkey(
=$b3					TKW_ALLOCLPAREN              = $b3 ; alloc(
=$b4					TKW_CHRDOLLARLPAREN          = $b4 ; chr$(
=$b5					TKW_LEFTDOLLARLPAREN         = $b5 ; left$(
=$b6					TKW_MIDDOLLARLPAREN          = $b6 ; mid$(
=$b7					TKW_RIGHTDOLLARLPAREN        = $b7 ; right$(
=$b8					TKW_STRDOLLARLPAREN          = $b8 ; str$(
=$b9					TKW_VALLPAREN                = $b9 ; val(
=$ba					TKW_PEEKLPAREN               = $ba ; peek(
=$bb					TKW_DEEKLPAREN               = $bb ; deek(
=$bc					TKW_LEEKLPAREN               = $bc ; leek(
=$bd					TKW_ASCLPAREN                = $bd ; asc(
=$be					TKW_INTLPAREN                = $be ; int(
=$bf					TKW_FLOATLPAREN              = $bf ; float(
=$c0					TKW_ISVALLPAREN              = $c0 ; isval(
=$c1					TKW_AT                       = $c1 ; @
=$c2					TKW_WAVY                     = $c2 ; ~
=$c3					TKW_AMP                      = $c3 ; &
=$c4					TKW_RPAREN                   = $c4 ; )
=$c5					TKW_COLON                    = $c5 ; :
=$c6					TKW_COMMA                    = $c6 ; ,
=$c7					TKW_SEMICOLON                = $c7 ; ;
=$c8					TKW_QUOTE                    = $c8 ; '
=$c9					TKW_TO                       = $c9 ; to
=$ca					TKW_STEP                     = $ca ; step
=$cb					TKW_PROC                     = $cb ; proc
=$cc					TKW_LOCAL                    = $cc ; local
=$cd					TKW_DIM                      = $cd ; dim
=$ce					TKW_REM                      = $ce ; rem
=$cf					TKW_LET                      = $cf ; let
=$d0					TKW_INPUT                    = $d0 ; input
=$d1					TKW_ELSE                     = $d1 ; else
=$d2					TKW_VDU                      = $d2 ; vdu
=$d3					TKW_PRINT                    = $d3 ; print
=$d4					TKW_GOTO                     = $d4 ; goto
=$d5					TKW_GOSUB                    = $d5 ; gosub
=$d6					TKW_RETURN                   = $d6 ; return
=$d7					TKW_DATA                     = $d7 ; data
=$d8					TKW_ASSERT                   = $d8 ; assert
=$d9					TKW_POKE                     = $d9 ; poke
=$da					TKW_DOKE                     = $da ; doke
=$db					TKW_LOKE                     = $db ; loke
=$86					TKW_CLEAR                    = $86 ; clear
=$87					TKW_LOAD                     = $87 ; load
=$88					TKW_SAVE                     = $88 ; save
=$89					TKW_LIST                     = $89 ; list
=$8a					TKW_NEW                      = $8a ; new
=$8b					TKW_RUN                      = $8b ; run
=$8c					TKW_READ                     = $8c ; read
=$8d					TKW_RESTORE                  = $8d ; restore
=$8e					TKW_END                      = $8e ; end
=$8f					TKW_STOP                     = $8f ; stop
=$86					TKW_VPOKE                    = $86 ; vpoke
=$86					TKW_VPEEKLPAREN              = $86 ; vpeek(

;******  Return to file: main/03data.inc

=$3a					TYPE_INT =		($3A) 						; type bytes that end identifier.
=$3b					TYPE_INTARRAY =	($3B)
=$3c					TYPE_STR =		($3C)
=$3d					TYPE_STRARRAY =	($3D)
=$3e					TYPE_FLOAT =	($3E)
=$3f					TYPE_FLOATARRAY=($3F)

;******  Return to file: basic.asm


;******  Processing file: main/imath/intmacros.inc


;******  Return to file: basic.asm


;******  Processing file: main/main.inc


;******  Return to file: basic.asm


;******  Processing file: assembler/assembler.inc


;******  Return to file: basic.asm


;******  Processing file: device/device.inc


;******  Return to file: basic.asm


;******  Processing file: error/error.inc


;******  Return to file: basic.asm


;******  Processing file: error/errorhandler.inc


;******  Processing file: error/../generated/errorid.inc

=1					ErrorID_Missing = 1 ; Feature not Present
=2					ErrorID_Syntax = 2 ; Syntax Error
=3					ErrorID_NoModule = 3 ; Module disabled
=4					ErrorID_Assert = 4 ; Assertion failed
=5					ErrorID_DivZero = 5 ; Divide By Zero
=6					ErrorID_Stop = 6 ; Stop
=7					ErrorID_BadType = 7 ; Type Mismatch
=8					ErrorID_BadValue = 8 ; Illegal Value
=9					ErrorID_MissingRP = 9 ; Missing right bracket
=10					ErrorID_MissingComma = 10 ; Missing comma
=11					ErrorID_NoReference = 11 ; Missing reference
=12					ErrorID_LineNumber = 12 ; Line Number not found
=13					ErrorID_StrLen = 13 ; String too long.
=14					ErrorID_ReturnErr = 14 ; RETURN without GOSUB
=15					ErrorID_UntilErr = 15 ; UNTIL without REPEAT
=16					ErrorID_NextErr = 16 ; NEXT without FOR
=17					ErrorID_WendErr = 17 ; WEND without WHILE
=18					ErrorID_endprocErr = 18 ; ENDPROC without PROC
=19					ErrorID_BadIndex = 19 ; Bad NEXT index
=20					ErrorID_Struct = 20 ; Structures nested wrong
=21					ErrorID_NoAuto = 21 ; Cannot create variable
=22					ErrorID_RetStack = 22 ; Return stack out of space.
=23					ErrorID_NoProc = 23 ; Unknown Procedure
=24					ErrorID_Params = 24 ; Parameters do not match.

;******  Return to file: error/errorhandler.inc


;******  Return to file: basic.asm


;******  Processing file: floatingpoint/floatingpoint.inc


;******  Return to file: basic.asm


;******  Processing file: interaction/interaction.inc


;******  Return to file: basic.asm


;******  Processing file: string/memory.inc

=252					MaxStringSize = 252

;******  Return to file: basic.asm


;******  Processing file: string/string.inc


;******  Return to file: basic.asm


;******  Processing file: tokeniser/tokeniser.inc


;******  Return to file: basic.asm


;******  Processing file: variable/variable.inc


;******  Return to file: basic.asm

.1000					section_start_main:

;******  Processing file: main/main.asm


;******  Processing file: main/00start.asm

.1000	a2 ff		ldx #$ff	Start:	ldx 	#$FF
.1002	9a		txs				txs
.1003	a9 00		lda #$00			lda 	#(testBaseAddress) & $FF
.1005	8d c8 0a	sta $0ac8			sta 	basePage
.1008	a9 50		lda #$50			lda 	#(testBaseAddress) >> 8
.100a	8d c9 0a	sta $0ac9			sta 	1+(basePage)
.100d	a9 00		lda #$00			lda 	#($9800) & $FF
.100f	8d ca 0a	sta $0aca			sta 	endMemory
.1012	a9 98		lda #$98			lda 	#($9800) >> 8
.1014	8d cb 0a	sta $0acb			sta 	1+(endMemory)
.1017	4c 8e 13	jmp $138e			jmp 	Command_Run
.2546					ReturnPos:
.5000					testBaseAddress:

;******  Processing file: main/../generated/testcode.inc

>5000	0e 0a 00 13 0b 11 3c 8d			.byte 14,10,0,19,11,17,60,141,133,0,143,133,0,128,12,11,0,12,60,141,133,0,143,133,0,128,14,12,0,18,2,15,60,141,133,0,143,133,0,128,13,13,0,17,16,60,141,133,0,143,133,0,128,12,14,0,16,60,141,133,0,143,133,0,128,14,15,0,2,9,2,60,141,133,0,143,133,0,128,16,16,0,2,10,12,16,18,60,141,133,0,143,133,0,128,15,17,0,12,8,2,16,60,141,133,0,143,133,0,128,13,18,0,7,11,60,141,133,0,143,133,0,128,15,19,0,21,11,21,15,60,141,133,0,143,133,0,128,12,20,0,9,60,141,133,0,143,133,0,128,13,21,0,2,6,60,141,133,0,143,133,0,128,14,22,0,2,1,10,60,141,133,0,143,133,0,128,15,23,0,9,14,1,20,60,141,133,0,143,133,0,128,14,24,0,18,18,6,60,141,133,0,143,133,0,128,16,25,0,9,18,8,20,20,60,141,133,0,143,133,0,128,16,26,0,6,13,7,21,16,60,141,133,0,143,133,0,128,14,27,0,11,8,17,60,141,133,0,143,133,0,128,14,28,0,16,4,8,60,141,133,0,143,133,0,128,14,29,0,2,16,19,60,141,133,0,143,133,0,128,13,30,0,19,17,60,141,133,0,143,133,0,128,14,31,0,6,13,17,60,141,133,0,143,133,0,128,12,32,0,18,60,141,133,0,143,133,0,128,16,33,0,4,9,4,11,4,60,141,133,0,143,133,0,128,15,34,0,1,12,6,13,60,141,133,0,143,133,0,128,14,35,0,5,21,10,60,141,133,0,143,133,0,128,16,36,0,19,5,19,1,18,60,141,133,0,143,133,0,128,13,37,0,19,21,60,141,133,0,143,133,0,128,14,38,0,6,16,7,60,141,133,0,143,133,0,128,12,39,0,7,60,141,133,0,143,133,0,128,13,40,0,18,60,141,18,60,143,2,6,60,128,13,41,0,9,60,141,9,60,143,133,1,67,128,14,42,0,11,8,17,60,141,133,3,68,67,77,128,10,43,0,19,17,60,141,133,0,128,16,44,0,7,11,60,141,7,11,60,143,133,2,82,78,128,16,45,0,7,60,141,7,60,143,133,4,85,76,79,68,128,17,46,0,11,8,17,60,141,11,8,17,60,143,2,6,60,128,18,47,0,19,17,60,141,19,17,60,143,133,4,66,69,85,70,128,16,48,0,2,1,10,60,141,133,5,78,85,66,71,72,128,13,49,0,7,11,60,141,133,3,75,67,71,128,9,50,0,12,60,141,133,0,128,19,51,0,18,2,15,60,141,18,2,15,60,143,1,12,6,13,60,128,14,52,0,5,21,10,60,141,133,3,79,79,77,128,18,53,0,19,21,60,141,19,21,60,143,133,4,65,83,69,82,128,13,54,0,1,12,6,13,60,141,133,1,67,128,14,55,0,12,60,141,12,60,143,18,18,6,60,128,17,56,0,9,60,141,9,60,143,133,5,76,76,65,82,85,128,11,57,0,18,2,15,60,141,133,0,128,17,58,0,2,10,12,16,18,60,141,133,4,76,73,85,79,128,11,59,0,2,1,10,60,141,133,0,128,11,60,0,11,8,17,60,141,133,0,128,13,61,0,2,16,19,60,141,133,2,85,82,128,19,62,0,19,21,60,141,19,21,60,143,133,5,69,74,80,66,82,128,16,63,0,12,8,2,16,60,141,9,18,8,20,20,60,128,20,64,0,19,11,17,60,141,19,11,17,60,143,4,9,4,11,4,60,128,12,65,0,1,12,6,13,60,141,7,60,128,21,66,0,2,16,19,60,141,2,16,19,60,143,133,5,66,69,79,78,72,128,17,67,0,19,11,17,60,141,19,11,17,60,143,133,1,77,128,13,68,0,19,5,19,1,18,60,141,133,0,128,20,69,0,6,16,7,60,141,6,16,7,60,143,133,4,70,75,84,69,128,10,70,0,19,21,60,141,133,0,128,10,71,0,17,16,60,141,133,0,128,24,72,0,6,13,7,21,16,60,141,6,13,7,21,16,60,143,19,5,19,1,18,60,128,18,73,0,2,1,10,60,141,2,1,10,60,143,11,8,17,60,128,21,74,0,6,13,17,60,141,6,13,17,60,143,133,5,82,68,75,84,68,128,23,75,0,1,12,6,13,60,141,1,12,6,13,60,143,133,5,74,79,73,67,68,128,20,76,0,5,21,10,60,141,5,21,10,60,143,133,4,69,74,83,84,128,20,77,0,9,14,1,20,60,141,9,14,1,20,60,143,2,1,10,60,128,18,78,0,2,16,19,60,141,2,16,19,60,143,11,8,17,60,128,16,79,0,19,17,60,141,19,17,60,143,5,21,10,60,128,18,80,0,17,16,60,141,17,16,60,143,6,13,7,21,16,60,128,16,81,0,2,6,60,141,2,6,60,143,2,9,2,60,128,12,82,0,1,12,6,13,60,141,133,0,128,14,83,0,16,60,141,16,60,143,2,9,2,60,128,21,84,0,2,16,19,60,141,2,16,19,60,143,133,5,68,72,80,80,80,128,11,85,0,18,2,15,60,141,133,0,128,14,86,0,19,11,17,60,141,133,3,81,73,72,128,21,87,0,19,5,19,1,18,60,141,19,5,19,1,18,60,143,19,21,60,128,14,88,0,16,60,141,133,5,81,65,75,76,76,128,15,89,0,19,17,60,141,133,5,78,78,76,70,85,128,13,90,0,9,18,8,20,20,60,141,18,60,128,20,91,0,11,8,17,60,141,11,8,17,60,143,133,4,83,74,78,69,128,13,92,0,16,60,141,16,60,143,133,1,78,128,19,93,0,6,16,7,60,141,6,16,7,60,143,9,14,1,20,60,128,19,94,0,2,1,10,60,141,2,1,10,60,143,133,3,66,65,67,128,14,95,0,2,9,2,60,141,133,3,81,66,65,128,13,96,0,6,13,7,21,16,60,141,133,0,128,12,97,0,21,11,21,15,60,141,133,0,128,15,98,0,6,13,7,21,16,60,141,133,2,77,66,128,11,99,0,5,21,10,60,141,133,0,128,13,100,0,2,6,60,141,133,3,85,83,78,128,14,101,0,2,1,10,60,141,133,3,85,66,77,128,22,102,0,2,10,12,16,18,60,141,2,10,12,16,18,60,143,16,4,8,60,128,9,103,0,16,60,141,133,0,128,24,104,0,6,13,7,21,16,60,141,6,13,7,21,16,60,143,133,4,65,76,74,84,128,10,105,0,19,17,60,141,133,0,128,15,106,0,2,6,60,141,2,6,60,143,19,21,60,128,16,107,0,19,11,17,60,141,19,11,17,60,143,9,60,128,10,108,0,17,16,60,141,133,0,128,9,109,0,18,60,141,133,0,128,13,110,0,19,11,17,60,141,2,16,19,60,128,17,111,0,17,16,60,141,17,16,60,143,12,8,2,16,60,128,19,112,0,12,8,2,16,60,141,12,8,2,16,60,143,133,1,67,128,10,113,0,17,16,60,141,133,0,128,10,114,0,17,16,60,141,133,0,128,11,115,0,18,18,6,60,141,133,0,128,22,116,0,9,18,8,20,20,60,141,9,18,8,20,20,60,143,133,2,71,67,128,22,117,0,9,18,8,20,20,60,141,9,18,8,20,20,60,143,19,11,17,60,128,20,118,0,1,12,6,13,60,141,1,12,6,13,60,143,133,2,82,66,128,15,119,0,9,14,1,20,60,141,21,11,21,15,60,128,9,120,0,18,60,141,18,60,128,13,121,0,12,60,141,12,60,143,19,17,60,128,18,122,0,2,6,60,141,2,6,60,143,6,13,7,21,16,60,128,10,123,0,2,6,60,141,133,0,128,20,124,0,21,11,21,15,60,141,21,11,21,15,60,143,133,2,74,69,128,17,125,0,19,11,17,60,141,19,11,17,60,143,133,1,65,128,21,126,0,18,2,15,60,141,18,2,15,60,143,133,5,78,69,85,65,84,128,15,127,0,19,11,17,60,141,133,4,82,75,67,81,128,18,128,0,7,11,60,141,7,11,60,143,133,4,74,76,73,73,128,11,129,0,18,2,15,60,141,133,0,128,13,130,0,9,18,8,20,20,60,141,133,0,128,22,131,0,4,9,4,11,4,60,141,4,9,4,11,4,60,143,133,2,73,77,128,16,132,0,19,17,60,141,19,17,60,143,18,2,15,60,128,13,133,0,6,13,17,60,141,2,9,2,60,128,11,134,0,19,11,17,60,141,12,60,128,11,135,0,16,4,8,60,141,133,0,128,16,136,0,2,9,2,60,141,2,9,2,60,143,9,60,128,11,137,0,17,16,60,141,7,11,60,128,10,138,0,7,60,141,2,6,60,128,9,139,0,9,60,141,18,60,128,11,140,0,7,11,60,141,133,1,74,128,14,141,0,2,10,12,16,18,60,141,2,6,60,128,19,142,0,2,16,19,60,141,2,16,19,60,143,133,3,75,67,83,128,14,143,0,5,21,10,60,141,133,3,82,83,85,128,12,144,0,2,9,2,60,141,133,1,74,128,19,145,0,5,21,10,60,141,5,21,10,60,143,21,11,21,15,60,128,18,146,0,2,9,2,60,141,2,9,2,60,143,133,2,68,82,128,10,147,0,7,11,60,141,133,0,128,21,148,0,2,9,2,60,141,2,9,2,60,143,133,5,70,65,66,73,78,128,21,149,0,6,16,7,60,141,6,16,7,60,143,133,5,77,72,83,78,74,128,16,150,0,19,17,60,141,19,17,60,143,133,2,73,78,128,15,151,0,12,8,2,16,60,141,133,3,84,76,70,128,12,152,0,12,60,141,12,60,143,7,60,128,18,153,0,5,21,10,60,141,5,21,10,60,143,18,18,6,60,128,20,154,0,18,18,6,60,141,18,18,6,60,143,19,5,19,1,18,60,128,14,155,0,7,60,141,7,60,143,133,2,79,76,128,15,156,0,6,13,7,21,16,60,141,18,18,6,60,128,20,157,0,9,14,1,20,60,141,9,14,1,20,60,143,2,9,2,60,128,16,158,0,4,9,4,11,4,60,141,133,3,68,70,72,128,17,159,0,17,16,60,141,17,16,60,143,133,3,82,80,68,128,21,160,0,6,13,17,60,141,6,13,17,60,143,133,5,79,70,78,77,82,128,25,161,0,4,9,4,11,4,60,141,4,9,4,11,4,60,143,133,5,84,65,78,84,67,128,20,162,0,21,11,21,15,60,141,21,11,21,15,60,143,2,9,2,60,128,16,163,0,1,12,6,13,60,141,133,4,73,73,76,76,128,24,164,0,6,13,7,21,16,60,141,6,13,7,21,16,60,143,133,4,68,75,73,82,128,15,165,0,2,10,12,16,18,60,141,2,16,19,60,128,15,166,0,17,16,60,141,17,16,60,143,7,11,60,128,21,167,0,11,8,17,60,141,11,8,17,60,143,133,5,84,76,79,81,68,128,19,168,0,12,8,2,16,60,141,12,8,2,16,60,143,133,1,74,128,13,169,0,19,11,17,60,141,2,9,2,60,128,14,170,0,16,4,8,60,141,133,3,67,67,70,128,9,171,0,18,60,141,133,0,128,11,172,0,9,60,141,133,2,69,76,128,11,173,0,18,2,15,60,141,133,0,128,22,174,0,4,9,4,11,4,60,141,4,9,4,11,4,60,143,2,1,10,60,128,23,175,0,6,13,7,21,16,60,141,6,13,7,21,16,60,143,133,3,75,70,81,128,10,176,0,7,11,60,141,133,0,128,15,177,0,19,17,60,141,133,5,81,74,65,67,84,128,25,178,0,9,18,8,20,20,60,141,9,18,8,20,20,60,143,133,5,70,83,67,82,79,128,19,179,0,12,8,2,16,60,141,12,8,2,16,60,143,133,1,66,128,12,180,0,11,8,17,60,141,7,11,60,128,14,181,0,2,1,10,60,141,1,12,6,13,60,128,24,182,0,4,9,4,11,4,60,141,4,9,4,11,4,60,143,9,18,8,20,20,60,128,12,183,0,1,12,6,13,60,141,133,0,128,25,184,0,4,9,4,11,4,60,141,4,9,4,11,4,60,143,133,5,82,68,77,69,81,128,14,185,0,1,12,6,13,60,141,5,21,10,60,128,14,186,0,1,12,6,13,60,141,2,9,2,60,128,13,187,0,18,2,15,60,141,5,21,10,60,128,17,188,0,6,13,7,21,16,60,141,2,10,12,16,18,60,128,14,189,0,19,5,19,1,18,60,141,19,17,60,128,22,190,0,4,9,4,11,4,60,141,4,9,4,11,4,60,143,133,2,76,79,128,22,191,0,9,18,8,20,20,60,141,9,18,8,20,20,60,143,18,18,6,60,128,13,192,0,7,60,141,7,60,143,19,17,60,128,13,193,0,2,10,12,16,18,60,141,133,0,128,18,194,0,2,9,2,60,141,2,9,2,60,143,2,1,10,60,128,14,195,0,19,21,60,141,19,21,60,143,7,60,128,15,196,0,18,18,6,60,141,19,5,19,1,18,60,128,14,197,0,12,60,141,12,60,143,16,4,8,60,128,22,198,0,1,12,6,13,60,141,1,12,6,13,60,143,133,4,70,82,74,68,128,14,199,0,18,2,15,60,141,133,3,73,76,69,128,15,200,0,9,14,1,20,60,141,133,3,77,76,69,128,14,201,0,12,60,141,12,60,143,2,16,19,60,128,20,202,0,18,2,15,60,141,18,2,15,60,143,19,5,19,1,18,60,128,10,203,0,7,11,60,141,133,0,128,13,204,0,19,11,17,60,141,5,21,10,60,128,16,205,0,7,11,60,141,7,11,60,143,2,9,2,60,128,9,206,0,12,60,141,133,0,128,22,207,0,12,8,2,16,60,141,12,8,2,16,60,143,133,4,68,80,70,76,128,16,208,0,9,14,1,20,60,141,133,4,84,80,79,74,128,15,209,0,6,13,17,60,141,9,18,8,20,20,60,128,12,210,0,21,11,21,15,60,141,133,0,128,22,211,0,4,9,4,11,4,60,141,4,9,4,11,4,60,143,133,2,65,82,128,12,212,0,2,1,10,60,141,133,1,74,128,12,213,0,7,11,60,141,133,2,80,80,128,10,214,0,16,60,141,133,1,69,128,13,215,0,2,1,10,60,141,133,2,70,78,128,18,216,0,2,16,19,60,141,2,16,19,60,143,11,8,17,60,128,22,217,0,9,14,1,20,60,141,9,14,1,20,60,143,2,10,12,16,18,60,128,18,218,0,2,10,12,16,18,60,141,133,5,79,84,79,69,74,128,13,219,0,16,60,141,16,60,143,17,16,60,128,11,220,0,6,16,7,60,141,133,0,128,23,221,0,21,11,21,15,60,141,21,11,21,15,60,143,133,5,74,73,83,80,72,128,20,222,0,12,8,2,16,60,141,12,8,2,16,60,143,6,16,7,60,128,13,223,0,12,60,141,133,4,68,84,85,78,128,16,224,0,12,60,141,12,60,143,2,10,12,16,18,60,128,13,225,0,12,60,141,12,60,143,133,1,85,128,15,226,0,5,21,10,60,141,133,4,79,83,77,80,128,12,227,0,19,17,60,141,5,21,10,60,128,13,228,0,12,60,141,12,60,143,19,21,60,128,17,229,0,2,1,10,60,141,2,1,10,60,143,133,1,70,128,13,230,0,18,18,6,60,141,133,2,67,76,128,22,231,0,9,18,8,20,20,60,141,9,18,8,20,20,60,143,133,2,78,66,128,14,232,0,18,60,141,18,60,143,133,2,73,79,128,18,233,0,11,8,17,60,141,11,8,17,60,143,18,18,6,60,128,12,234,0,18,2,15,60,141,133,1,72,128,9,235,0,12,60,141,133,0,128,23,236,0,6,13,7,21,16,60,141,6,13,7,21,16,60,143,9,14,1,20,60,128,20,237,0,18,2,15,60,141,18,2,15,60,143,133,4,71,73,80,66,128,11,238,0,2,9,2,60,141,133,0,128,17,239,0,2,1,10,60,141,2,1,10,60,143,133,1,85,128,17,240,0,9,18,8,20,20,60,141,133,4,80,83,72,77,128,10,241,0,7,11,60,141,133,0,128,16,242,0,19,5,19,1,18,60,141,133,3,77,72,85,128,24,243,0,19,5,19,1,18,60,141,19,5,19,1,18,60,143,133,4,76,73,67,77,128,11,244,0,18,2,15,60,141,133,0,128,13,245,0,9,60,141,9,60,143,133,1,66,128,18,246,0,4,9,4,11,4,60,141,133,5,78,67,72,66,73,128,22,247,0,9,14,1,20,60,141,9,14,1,20,60,143,6,13,7,21,16,60,128,15,248,0,6,13,7,21,16,60,141,2,9,2,60,128,17,249,0,2,16,19,60,141,2,16,19,60,143,17,16,60,128,21,250,0,2,10,12,16,18,60,141,2,10,12,16,18,60,143,133,1,85,128,20,251,0,19,5,19,1,18,60,141,19,5,19,1,18,60,143,7,60,128,16,252,0,19,21,60,141,19,21,60,143,6,16,7,60,128,11,253,0,2,1,10,60,141,133,0,128,17,254,0,11,8,17,60,141,11,8,17,60,143,133,1,81,128,15,255,0,7,11,60,141,7,11,60,143,19,21,60,128,17,0,1,2,16,19,60,141,2,16,19,60,143,19,17,60,128,14,1,1,12,60,141,12,60,143,133,2,79,73,128,14,2,1,18,18,6,60,141,9,14,1,20,60,128,16,3,1,2,10,12,16,18,60,141,1,12,6,13,60,128,13,4,1,2,10,12,16,18,60,141,133,0,128,21,5,1,9,18,8,20,20,60,141,9,18,8,20,20,60,143,19,21,60,128,22,6,1,2,10,12,16,18,60,141,2,10,12,16,18,60,143,2,16,19,60,128,16,7,1,4,9,4,11,4,60,141,133,3,76,75,65,128,23,8,1,4,9,4,11,4,60,141,4,9,4,11,4,60,143,133,3,83,71,70,128,13,9,1,11,8,17,60,141,5,21,10,60,128,19,10,1,9,14,1,20,60,141,9,14,1,20,60,143,133,1,71,128,13,11,1,11,8,17,60,141,133,2,77,75,128,22,12,1,12,8,2,16,60,141,12,8,2,16,60,143,133,4,66,70,81,83,128,15,13,1,12,8,2,16,60,141,133,3,71,79,75,128,15,14,1,6,13,17,60,141,133,4,68,83,67,85,128,15,15,1,4,9,4,11,4,60,141,2,1,10,60,128,14,16,1,2,9,2,60,141,12,8,2,16,60,128,15,17,1,2,9,2,60,141,133,4,84,82,68,68,128,13,18,1,18,2,15,60,141,133,2,74,70,128,11,19,1,2,16,19,60,141,133,0,128,15,20,1,2,6,60,141,133,5,71,74,72,72,66,128,14,21,1,19,17,60,141,133,4,73,73,80,80,128,13,22,1,2,9,2,60,141,2,16,19,60,128,11,23,1,18,18,6,60,141,9,60,128,13,24,1,12,8,2,16,60,141,7,11,60,128,17,25,1,2,16,19,60,141,2,16,19,60,143,133,1,83,128,11,26,1,2,16,19,60,141,133,0,128,13,27,1,12,8,2,16,60,141,133,1,81,128,15,28,1,9,60,141,9,60,143,133,3,77,73,83,128,15,29,1,19,17,60,141,19,17,60,143,133,1,66,128,16,30,1,18,2,15,60,141,133,5,82,65,79,75,81,128,17,31,1,18,2,15,60,141,18,2,15,60,143,17,16,60,128,16,32,1,18,18,6,60,141,18,18,6,60,143,9,60,128,11,33,1,19,11,17,60,141,133,0,128,23,34,1,9,18,8,20,20,60,141,9,18,8,20,20,60,143,133,3,83,84,82,128,15,35,1,19,17,60,141,19,17,60,143,2,6,60,128,15,36,1,19,5,19,1,18,60,141,133,2,79,74,128,13,37,1,9,14,1,20,60,141,133,1,71,128,13,38,1,6,13,17,60,141,133,2,80,72,128,9,39,1,9,60,141,133,0,128,19,40,1,19,17,60,141,19,17,60,143,133,5,85,68,71,73,69,128,11,41,1,2,1,10,60,141,133,0,128,11,42,1,12,60,141,16,4,8,60,128,11,43,1,9,60,141,2,9,2,60,128,15,44,1,19,21,60,141,19,21,60,143,133,1,74,128,13,45,1,4,9,4,11,4,60,141,133,0,128,18,46,1,19,5,19,1,18,60,141,133,5,69,65,73,67,77,128,10,47,1,7,60,141,19,17,60,128,21,48,1,6,13,7,21,16,60,141,6,13,7,21,16,60,143,133,1,84,128,11,49,1,5,21,10,60,141,133,0,128,15,50,1,2,6,60,141,2,6,60,143,133,1,70,128,12,51,1,9,14,1,20,60,141,133,0,128,19,52,1,5,21,10,60,141,5,21,10,60,143,133,3,80,80,84,128,14,53,1,19,17,60,141,133,4,83,74,65,72,128,16,54,1,12,60,141,12,60,143,133,4,69,66,85,68,128,23,55,1,21,11,21,15,60,141,21,11,21,15,60,143,133,5,65,72,75,70,79,128,12,56,1,12,8,2,16,60,141,133,0,128,12,57,1,9,14,1,20,60,141,133,0,128,9,58,1,7,60,141,133,0,128,13,59,1,9,14,1,20,60,141,133,1,79,128,9,60,1,7,60,141,12,60,128,13,61,1,16,4,8,60,141,133,2,82,65,128,13,62,1,9,18,8,20,20,60,141,7,60,128,9,63,1,16,60,141,133,0,128,13,64,1,2,6,60,141,133,3,70,79,71,128,11,65,1,16,4,8,60,141,133,0,128,13,66,1,18,2,15,60,141,5,21,10,60,128,23,67,1,9,18,8,20,20,60,141,9,18,8,20,20,60,143,1,12,6,13,60,128,13,68,1,6,13,17,60,141,18,18,6,60,128,13,69,1,19,11,17,60,141,11,8,17,60,128,22,70,1,21,11,21,15,60,141,21,11,21,15,60,143,6,13,7,21,16,60,128,9,71,1,16,60,141,133,0,128,13,72,1,18,2,15,60,141,133,2,80,79,128,11,73,1,19,11,17,60,141,133,0,128,10,74,1,19,17,60,141,133,0,128,22,75,1,12,8,2,16,60,141,12,8,2,16,60,143,4,9,4,11,4,60,128,11,76,1,16,4,8,60,141,133,0,128,16,77,1,5,21,10,60,141,5,21,10,60,143,7,60,128,9,78,1,12,60,141,133,0,128,19,79,1,1,12,6,13,60,141,1,12,6,13,60,143,17,16,60,128,16,80,1,19,17,60,141,19,17,60,143,18,18,6,60,128,11,81,1,6,16,7,60,141,133,0,128,22,82,1,2,10,12,16,18,60,141,2,10,12,16,18,60,143,2,9,2,60,128,15,83,1,12,60,141,12,60,143,133,3,82,70,67,128,15,84,1,9,14,1,20,60,141,133,3,75,69,74,128,14,85,1,9,60,141,9,60,143,133,2,73,77,128,17,86,1,5,21,10,60,141,5,21,10,60,143,133,1,74,128,11,87,1,2,6,60,141,133,1,69,128,9,88,1,18,60,141,133,0,128,15,89,1,7,60,141,7,60,143,12,8,2,16,60,128,9,90,1,9,60,141,133,0,128,17,91,1,6,13,7,21,16,60,141,133,4,79,78,84,80,128,9,92,1,16,60,141,133,0,128,15,93,1,6,13,7,21,16,60,141,2,16,19,60,128,15,94,1,17,16,60,141,17,16,60,143,19,21,60,128,12,95,1,12,8,2,16,60,141,133,0,128,14,96,1,18,60,141,133,5,76,67,67,77,83,128,16,97,1,18,18,6,60,141,18,18,6,60,143,7,60,128,10,98,1,12,60,141,19,21,60,128,11,99,1,19,17,60,141,133,1,78,128,14,100,1,9,18,8,20,20,60,141,133,1,84,128,16,101,1,6,13,17,60,141,133,5,70,85,79,69,70,128,11,102,1,2,16,19,60,141,133,0,128,14,103,1,2,6,60,141,133,4,65,82,76,71,128,18,104,1,17,16,60,141,17,16,60,143,9,18,8,20,20,60,128,15,105,1,17,16,60,141,17,16,60,143,133,1,78,128,21,106,1,6,13,7,21,16,60,141,6,13,7,21,16,60,143,133,1,67,128,21,107,1,19,5,19,1,18,60,141,19,5,19,1,18,60,143,133,1,78,128,11,108,1,18,18,6,60,141,133,0,128,11,109,1,18,18,6,60,141,133,0,128,14,110,1,18,60,141,18,60,143,16,4,8,60,128,21,111,1,21,11,21,15,60,141,21,11,21,15,60,143,133,3,66,77,84,128,17,112,1,18,60,141,18,60,143,133,5,69,65,79,79,78,128,23,113,1,21,11,21,15,60,141,21,11,21,15,60,143,133,5,73,80,75,73,85,128,9,114,1,9,60,141,133,0,128,10,115,1,18,60,141,133,1,69,128,14,116,1,19,11,17,60,141,12,8,2,16,60,128,10,117,1,7,60,141,133,1,71,128,12,118,1,18,60,141,133,3,81,75,82,128,15,119,1,6,13,17,60,141,19,5,19,1,18,60,128,11,120,1,9,60,141,2,9,2,60,128,19,121,1,6,13,17,60,141,6,13,17,60,143,9,14,1,20,60,128,17,122,1,12,60,141,12,60,143,133,5,76,73,76,73,66,128,11,123,1,19,17,60,141,133,1,82,128,14,124,1,19,17,60,141,4,9,4,11,4,60,128,11,125,1,18,18,6,60,141,133,0,128,11,126,1,19,11,17,60,141,133,0,128,14,127,1,19,21,60,141,19,21,60,143,12,60,128,11,128,1,11,8,17,60,141,7,60,128,12,129,1,1,12,6,13,60,141,133,0,128,14,130,1,1,12,6,13,60,141,18,18,6,60,128,19,131,1,2,6,60,141,2,6,60,143,133,5,71,67,69,72,78,128,14,132,1,6,13,7,21,16,60,141,2,6,60,128,18,133,1,12,8,2,16,60,141,12,8,2,16,60,143,18,60,128,23,134,1,9,18,8,20,20,60,141,9,18,8,20,20,60,143,133,3,80,69,74,128,14,135,1,2,10,12,16,18,60,141,19,21,60,128,22,136,1,4,9,4,11,4,60,141,4,9,4,11,4,60,143,6,13,17,60,128,21,137,1,1,12,6,13,60,141,1,12,6,13,60,143,133,3,76,76,67,128,14,138,1,7,60,141,7,60,143,18,18,6,60,128,13,139,1,2,10,12,16,18,60,141,133,0,128,13,140,1,6,13,17,60,141,18,2,15,60,128,13,141,1,1,12,6,13,60,141,133,1,76,128,13,142,1,4,9,4,11,4,60,141,12,60,128,16,143,1,18,2,15,60,141,18,2,15,60,143,7,60,128,16,144,1,16,60,141,16,60,143,4,9,4,11,4,60,128,15,145,1,19,21,60,141,19,21,60,143,133,1,80,128,11,146,1,7,60,141,2,9,2,60,128,14,147,1,19,5,19,1,18,60,141,133,1,83,128,13,148,1,19,5,19,1,18,60,141,133,0,128,17,149,1,18,18,6,60,141,18,18,6,60,143,133,1,69,128,17,150,1,19,5,19,1,18,60,141,133,4,65,68,81,67,128,16,151,1,4,9,4,11,4,60,141,133,3,79,68,67,128,20,152,1,4,9,4,11,4,60,141,4,9,4,11,4,60,143,12,60,128,15,153,1,12,60,141,12,60,143,21,11,21,15,60,128,14,154,1,4,9,4,11,4,60,141,7,11,60,128,11,155,1,18,60,141,133,2,81,65,128,17,156,1,7,60,141,7,60,143,133,5,76,74,65,65,68,128,24,157,1,9,18,8,20,20,60,141,9,18,8,20,20,60,143,133,4,68,85,82,67,128,19,158,1,18,18,6,60,141,18,18,6,60,143,133,3,82,80,68,128,13,159,1,19,5,19,1,18,60,141,133,0,128,12,160,1,12,60,141,21,11,21,15,60,128,15,161,1,4,9,4,11,4,60,141,16,4,8,60,128,11,162,1,2,16,19,60,141,133,0,128,21,163,1,5,21,10,60,141,5,21,10,60,143,133,5,79,81,71,83,82,128,18,164,1,2,1,10,60,141,2,1,10,60,143,18,2,15,60,128,10,165,1,18,60,141,133,1,81,128,12,166,1,12,8,2,16,60,141,133,0,128,12,167,1,16,60,141,133,3,67,69,68,128,17,168,1,9,18,8,20,20,60,141,9,18,8,20,20,60,128,9,169,1,12,60,141,133,0,128,22,170,1,2,10,12,16,18,60,141,2,10,12,16,18,60,143,6,13,17,60,128,12,171,1,2,16,19,60,141,17,16,60,128,14,172,1,7,60,141,7,60,143,18,2,15,60,128,24,173,1,6,13,7,21,16,60,141,6,13,7,21,16,60,143,19,5,19,1,18,60,128,14,174,1,19,5,19,1,18,60,141,133,1,75,128,11,175,1,5,21,10,60,141,133,0,128,12,176,1,7,60,141,7,60,143,16,60,128,15,177,1,7,11,60,141,133,5,71,80,65,69,75,128,13,178,1,18,60,141,9,18,8,20,20,60,128,17,179,1,4,9,4,11,4,60,141,133,4,77,68,67,84,128,16,180,1,2,9,2,60,141,2,9,2,60,143,16,60,128,11,181,1,2,1,10,60,141,133,0,128,12,182,1,19,17,60,141,2,16,19,60,128,16,183,1,19,17,60,141,19,17,60,143,2,16,19,60,128,12,184,1,1,12,6,13,60,141,133,0,128,14,185,1,1,12,6,13,60,141,2,16,19,60,128,15,186,1,2,10,12,16,18,60,141,133,2,75,76,128,13,187,1,16,60,141,2,10,12,16,18,60,128,15,188,1,5,21,10,60,141,9,18,8,20,20,60,128,17,189,1,5,21,10,60,141,5,21,10,60,143,133,1,85,128,9,190,1,7,60,141,16,60,128,19,191,1,6,13,17,60,141,6,13,17,60,143,133,3,82,78,75,128,12,192,1,21,11,21,15,60,141,133,0,128,13,193,1,5,21,10,60,141,133,2,81,68,128,9,194,1,9,60,141,133,0,128,10,195,1,7,11,60,141,133,0,128,11,196,1,2,16,19,60,141,12,60,128,14,197,1,19,17,60,141,9,18,8,20,20,60,128,13,198,1,9,18,8,20,20,60,141,133,0,128,12,199,1,6,16,7,60,141,133,1,85,128,13,200,1,6,13,7,21,16,60,141,133,0,128,15,201,1,5,21,10,60,141,19,5,19,1,18,60,128,12,202,1,2,1,10,60,141,133,1,77,128,18,203,1,11,8,17,60,141,11,8,17,60,143,2,1,10,60,128,13,204,1,4,9,4,11,4,60,141,9,60,128,19,205,1,1,12,6,13,60,141,1,12,6,13,60,143,133,1,74,128,14,206,1,19,11,17,60,141,12,8,2,16,60,128,12,207,1,2,9,2,60,141,7,11,60,128,13,208,1,4,9,4,11,4,60,141,133,0,128,18,209,1,2,1,10,60,141,2,1,10,60,143,133,2,77,80,128,11,210,1,7,60,141,6,16,7,60,128,16,211,1,2,9,2,60,141,133,5,84,72,71,65,75,128,9,212,1,18,60,141,133,0,128,12,213,1,18,18,6,60,141,19,17,60,128,22,214,1,4,9,4,11,4,60,141,4,9,4,11,4,60,143,19,11,17,60,128,13,215,1,17,16,60,141,1,12,6,13,60,128,13,216,1,1,12,6,13,60,141,133,1,73,128,13,217,1,16,4,8,60,141,18,2,15,60,128,16,218,1,18,2,15,60,141,18,2,15,60,143,7,60,128,13,219,1,6,16,7,60,141,2,1,10,60,128,11,220,1,18,18,6,60,141,133,0,128,14,221,1,6,13,7,21,16,60,141,133,1,66,128,23,222,1,9,18,8,20,20,60,141,9,18,8,20,20,60,143,133,3,66,82,76,128,16,223,1,7,11,60,141,7,11,60,143,18,2,15,60,128,18,224,1,9,18,8,20,20,60,141,133,5,65,84,76,78,69,128,20,225,1,18,18,6,60,141,18,18,6,60,143,4,9,4,11,4,60,128,19,226,1,2,9,2,60,141,2,9,2,60,143,9,14,1,20,60,128,14,227,1,4,9,4,11,4,60,141,133,1,71,128,14,228,1,16,4,8,60,141,133,3,72,84,80,128,9,229,1,12,60,141,133,0,128,12,230,1,2,9,2,60,141,133,1,77,128,17,231,1,2,16,19,60,141,2,16,19,60,143,19,21,60,128,17,232,1,19,21,60,141,19,21,60,143,133,3,81,80,74,128,11,233,1,2,1,10,60,141,133,0,128,15,234,1,2,16,19,60,141,133,4,81,67,66,69,128,20,235,1,9,14,1,20,60,141,9,14,1,20,60,143,133,2,68,84,128,13,236,1,19,17,60,141,133,3,84,82,82,128,17,237,1,2,1,10,60,141,2,1,10,60,143,2,6,60,128,9,238,1,9,60,141,133,0,128,15,239,1,4,9,4,11,4,60,141,19,11,17,60,128,13,240,1,4,9,4,11,4,60,141,9,60,128,14,241,1,16,60,141,133,5,73,74,69,65,74,128,10,242,1,19,21,60,141,12,60,128,13,243,1,6,16,7,60,141,2,9,2,60,128,13,244,1,2,10,12,16,18,60,141,133,0,128,19,245,1,21,11,21,15,60,141,21,11,21,15,60,143,133,1,83,128,25,246,1,4,9,4,11,4,60,141,4,9,4,11,4,60,143,133,5,82,79,71,72,74,128,20,247,1,18,18,6,60,141,18,18,6,60,143,133,4,83,82,80,79,128,15,248,1,11,8,17,60,141,133,4,75,72,82,78,128,9,249,1,7,60,141,9,60,128,21,250,1,6,13,17,60,141,6,13,17,60,143,133,5,68,83,74,81,77,128,10,251,1,7,11,60,141,133,0,128,15,252,1,9,14,1,20,60,141,133,3,78,69,67,128,10,253,1,7,11,60,141,133,0,128,18,254,1,6,16,7,60,141,6,16,7,60,143,2,1,10,60,128,14,255,1,19,17,60,141,133,4,82,78,76,71,128,12,0,2,2,16,19,60,141,133,1,74,128,13,1,2,21,11,21,15,60,141,133,1,74,128,17,2,2,2,9,2,60,141,2,9,2,60,143,17,16,60,128,21,3,2,6,13,17,60,141,6,13,17,60,143,133,5,80,81,71,65,74,128,13,4,2,21,11,21,15,60,141,133,1,66,128,13,5,2,6,16,7,60,141,2,9,2,60,128,21,6,2,18,18,6,60,141,18,18,6,60,143,133,5,71,74,84,69,79,128,24,7,2,4,9,4,11,4,60,141,4,9,4,11,4,60,143,133,4,81,68,81,79,128,19,8,2,18,18,6,60,141,18,18,6,60,143,133,3,70,77,75,128,16,9,2,2,16,19,60,141,2,16,19,60,143,16,60,128,25,10,2,19,5,19,1,18,60,141,19,5,19,1,18,60,143,133,5,80,72,77,78,67,128,17,11,2,5,21,10,60,141,5,21,10,60,143,133,1,75,128,14,12,2,9,60,141,133,5,70,66,85,77,67,128,17,13,2,18,60,141,18,60,143,133,5,68,82,74,73,80,128,24,14,2,19,5,19,1,18,60,141,19,5,19,1,18,60,143,133,4,77,65,80,78,128,23,15,2,9,18,8,20,20,60,141,9,18,8,20,20,60,143,133,3,72,75,84,128,20,16,2,16,4,8,60,141,16,4,8,60,143,19,5,19,1,18,60,128,12,17,2,12,8,2,16,60,141,133,0,128,11,18,2,19,21,60,141,133,1,76,128,16,19,2,19,21,60,141,19,21,60,143,133,2,79,75,128,19,20,2,7,11,60,141,7,11,60,143,133,5,65,85,79,75,75,128,21,21,2,2,1,10,60,141,2,1,10,60,143,133,5,69,80,73,81,75,128,10,22,2,19,21,60,141,133,0,128,13,23,2,19,5,19,1,18,60,141,133,0,128,15,24,2,2,16,19,60,141,6,13,7,21,16,60,128,11,25,2,6,13,17,60,141,133,0,128,16,26,2,16,4,8,60,141,16,4,8,60,143,9,60,128,13,27,2,12,60,141,12,60,143,133,1,78,128,10,28,2,19,17,60,141,133,0,128,16,29,2,2,9,2,60,141,2,9,2,60,143,7,60,128,11,30,2,16,4,8,60,141,133,0,128,11,31,2,19,11,17,60,141,133,0,128,13,32,2,2,10,12,16,18,60,141,18,60,128,10,33,2,19,21,60,141,133,0,128,19,34,2,7,11,60,141,7,11,60,143,133,5,79,76,84,72,80,128,13,35,2,6,13,17,60,141,133,2,82,73,128,16,36,2,19,11,17,60,141,133,5,67,73,69,82,70,128,13,37,2,18,60,141,18,60,143,2,6,60,128,15,38,2,19,21,60,141,19,21,60,143,2,6,60,128,14,39,2,2,16,19,60,141,133,3,65,84,67,128,10,40,2,7,11,60,141,133,0,128,9,41,2,16,60,141,133,0,128,10,42,2,7,11,60,141,133,0,128,12,43,2,9,60,141,9,60,143,16,60,128,10,44,2,19,17,60,141,133,0,128,16,45,2,7,11,60,141,7,11,60,143,2,1,10,60,128,20,46,2,9,14,1,20,60,141,9,14,1,20,60,143,2,16,19,60,128,14,47,2,19,21,60,141,19,21,60,143,16,60,128,19,48,2,21,11,21,15,60,141,21,11,21,15,60,143,7,11,60,128,13,49,2,4,9,4,11,4,60,141,133,0,128,21,50,2,5,21,10,60,141,5,21,10,60,143,133,5,81,70,72,78,70,128,20,51,2,6,16,7,60,141,6,16,7,60,143,19,5,19,1,18,60,128,21,52,2,1,12,6,13,60,141,1,12,6,13,60,143,133,3,83,84,85,128,16,53,2,18,18,6,60,141,133,5,79,72,66,79,71,128,14,54,2,9,14,1,20,60,141,2,16,19,60,128,11,55,2,2,1,10,60,141,133,0,128,12,56,2,1,12,6,13,60,141,133,0,128,11,57,2,11,8,17,60,141,133,0,128,22,58,2,9,14,1,20,60,141,9,14,1,20,60,143,133,4,77,84,80,79,128,11,59,2,16,4,8,60,141,133,0,128,14,60,2,19,11,17,60,141,133,3,67,75,67,128,18,61,2,6,13,17,60,141,6,13,17,60,143,133,2,78,70,128,16,62,2,12,8,2,16,60,141,4,9,4,11,4,60,128,22,63,2,9,18,8,20,20,60,141,9,18,8,20,20,60,143,133,2,67,73,128,20,64,2,16,4,8,60,141,16,4,8,60,143,133,4,71,75,71,81,128,11,65,2,18,18,6,60,141,133,0,128,13,66,2,6,13,17,60,141,2,16,19,60,128,11,67,2,19,21,60,141,133,1,73,128,16,68,2,2,6,60,141,2,6,60,143,2,1,10,60,128,11,69,2,2,6,60,141,7,11,60,128,10,70,2,7,11,60,141,133,0,128,17,71,2,2,9,2,60,141,2,9,2,60,143,133,1,69,128,10,72,2,17,16,60,141,133,0,128,17,73,2,11,8,17,60,141,11,8,17,60,143,133,1,77,128,21,74,2,4,9,4,11,4,60,141,4,9,4,11,4,60,143,133,1,78,128,20,75,2,1,12,6,13,60,141,1,12,6,13,60,143,133,2,68,75,128,14,76,2,19,21,60,141,6,13,7,21,16,60,128,13,77,2,18,60,141,133,4,74,76,69,81,128,11,78,2,11,8,17,60,141,133,0,128,12,79,2,19,21,60,141,18,18,6,60,128,13,80,2,2,10,12,16,18,60,141,133,0,128,14,81,2,4,9,4,11,4,60,141,19,21,60,128,13,82,2,12,8,2,16,60,141,2,6,60,128,17,83,2,2,6,60,141,2,6,60,143,9,14,1,20,60,128,20,84,2,18,18,6,60,141,18,18,6,60,143,19,5,19,1,18,60,128,14,85,2,16,60,141,16,60,143,133,2,74,83,128,15,86,2,19,21,60,141,133,5,67,82,68,65,74,128,22,87,2,2,10,12,16,18,60,141,2,10,12,16,18,60,143,133,2,71,66,128,21,88,2,19,5,19,1,18,60,141,19,5,19,1,18,60,143,133,1,77,128,14,89,2,16,4,8,60,141,9,14,1,20,60,128,25,90,2,19,5,19,1,18,60,141,19,5,19,1,18,60,143,133,5,73,78,74,75,75,128,20,91,2,12,8,2,16,60,141,12,8,2,16,60,143,6,13,17,60,128,11,92,2,7,11,60,141,133,1,82,128,12,93,2,12,8,2,16,60,141,133,0,128,19,94,2,1,12,6,13,60,141,1,12,6,13,60,143,19,21,60,128,13,95,2,6,16,7,60,141,18,2,15,60,128,14,96,2,21,11,21,15,60,141,133,2,78,74,128,9,97,2,7,60,141,133,0,128,14,98,2,2,6,60,141,19,5,19,1,18,60,128,21,99,2,19,5,19,1,18,60,141,19,5,19,1,18,60,143,133,1,75,128,13,100,2,12,60,141,4,9,4,11,4,60,128,11,101,2,18,18,6,60,141,133,0,128,23,102,2,9,14,1,20,60,141,9,14,1,20,60,143,133,5,66,77,69,68,74,128,16,103,2,11,8,17,60,141,11,8,17,60,143,18,60,128,11,104,2,6,13,17,60,141,133,0,128,10,105,2,2,6,60,141,133,0,128,16,106,2,7,11,60,141,7,11,60,143,2,9,2,60,128,14,107,2,7,11,60,141,7,11,60,143,9,60,128,15,108,2,19,5,19,1,18,60,141,133,2,73,65,128,12,109,2,17,16,60,141,2,1,10,60,128,18,110,2,19,11,17,60,141,19,11,17,60,143,133,2,71,75,128,14,111,2,1,12,6,13,60,141,5,21,10,60,128,10,112,2,18,60,141,133,1,66,128,17,113,2,16,4,8,60,141,16,4,8,60,143,133,1,85,128,16,114,2,2,10,12,16,18,60,141,133,3,84,76,83,128,13,115,2,6,13,7,21,16,60,141,133,0,128,14,116,2,18,18,6,60,141,133,3,66,70,72,128,11,117,2,12,60,141,6,16,7,60,128,19,118,2,19,11,17,60,141,19,11,17,60,143,133,3,65,68,81,128,18,119,2,2,1,10,60,141,2,1,10,60,143,19,11,17,60,128,15,120,2,2,10,12,16,18,60,141,5,21,10,60,128,13,121,2,18,18,6,60,141,6,13,17,60,128,9,122,2,18,60,141,133,0,128,17,123,2,16,60,141,16,60,143,133,5,81,76,67,79,76,128,25,124,2,9,18,8,20,20,60,141,9,18,8,20,20,60,143,133,5,82,83,80,75,74,128,16,125,2,2,9,2,60,141,2,9,2,60,143,9,60,128,10,126,2,7,11,60,141,133,0,128,10,127,2,2,6,60,141,133,0,128,22,128,2,9,18,8,20,20,60,141,9,18,8,20,20,60,143,133,2,76,79,128,13,129,2,2,1,10,60,141,18,18,6,60,128,11,130,2,19,11,17,60,141,133,0,128,9,131,2,16,60,141,133,0,128,11,132,2,2,9,2,60,141,133,0,128,13,133,2,6,13,17,60,141,133,2,73,81,128,14,134,2,2,10,12,16,18,60,141,19,17,60,128,16,135,2,19,17,60,141,19,17,60,143,133,2,74,73,128,22,136,2,6,13,7,21,16,60,141,6,13,7,21,16,60,143,133,2,85,82,128,18,137,2,7,11,60,141,7,11,60,143,133,4,78,79,80,67,128,10,138,2,19,17,60,141,133,0,128,16,139,2,9,14,1,20,60,141,6,13,7,21,16,60,128,10,140,2,9,60,141,2,6,60,128,9,141,2,18,60,141,133,0,128,12,142,2,11,8,17,60,141,19,17,60,128,10,143,2,17,16,60,141,133,0,128,14,144,2,2,6,60,141,6,13,7,21,16,60,128,13,145,2,18,18,6,60,141,18,18,6,60,128,14,146,2,19,5,19,1,18,60,141,17,16,60,128,15,147,2,19,21,60,141,19,21,60,143,17,16,60,128,18,148,2,12,8,2,16,60,141,12,8,2,16,60,143,18,60,128,18,149,2,11,8,17,60,141,11,8,17,60,143,11,8,17,60,128,13,150,2,6,13,17,60,141,2,1,10,60,128,14,151,2,2,9,2,60,141,21,11,21,15,60,128,18,152,2,7,11,60,141,7,11,60,143,9,18,8,20,20,60,128,16,153,2,2,16,19,60,141,2,16,19,60,143,16,60,128,20,154,2,9,14,1,20,60,141,9,14,1,20,60,143,133,2,85,83,128,13,155,2,7,11,60,141,133,3,85,77,72,128,17,156,2,2,1,10,60,141,2,1,10,60,143,133,1,75,128,11,157,2,18,18,6,60,141,133,0,128,12,158,2,9,14,1,20,60,141,133,0,128,20,159,2,21,11,21,15,60,141,21,11,21,15,60,143,18,18,6,60,128,14,160,2,4,9,4,11,4,60,141,2,6,60,128,12,161,2,1,12,6,13,60,141,133,0,128,16,162,2,16,4,8,60,141,133,5,80,81,65,75,79,128,9,163,2,7,60,141,133,0,128,14,164,2,18,60,141,133,5,71,81,66,66,85,128,19,165,2,19,17,60,141,19,17,60,143,133,5,83,81,81,67,67,128,14,166,2,16,4,8,60,141,133,3,71,68,84,128,11,167,2,2,1,10,60,141,133,0,128,9,168,2,12,60,141,133,0,128,13,169,2,9,14,1,20,60,141,133,1,78,128,18,170,2,9,14,1,20,60,141,9,14,1,20,60,143,7,60,128,13,171,2,6,13,7,21,16,60,141,133,0,128,16,172,2,19,11,17,60,141,19,11,17,60,143,9,60,128,14,173,2,2,1,10,60,141,9,14,1,20,60,128,22,174,2,2,10,12,16,18,60,141,2,10,12,16,18,60,143,2,16,19,60,128,20,175,2,19,11,17,60,141,19,11,17,60,143,133,4,79,75,72,72,128,11,176,2,9,60,141,133,2,72,84,128,19,177,2,2,1,10,60,141,2,1,10,60,143,133,3,73,79,68,128,18,178,2,2,16,19,60,141,2,16,19,60,143,19,11,17,60,128,15,179,2,7,11,60,141,133,5,79,70,66,83,74,128,15,180,2,2,6,60,141,133,5,80,76,85,74,82,128,14,181,2,18,18,6,60,141,133,3,73,70,80,128,16,182,2,18,2,15,60,141,133,5,66,72,82,69,75,128,13,183,2,7,60,141,7,60,143,133,1,69,128,16,184,2,6,13,17,60,141,6,13,17,60,143,9,60,128,15,185,2,1,12,6,13,60,141,1,12,6,13,60,128,17,186,2,21,11,21,15,60,141,133,5,76,69,77,71,76,128,15,187,2,9,18,8,20,20,60,141,11,8,17,60,128,16,188,2,7,11,60,141,7,11,60,143,133,2,78,75,128,14,189,2,9,60,141,9,60,143,5,21,10,60,128,17,190,2,7,60,141,7,60,143,133,5,71,80,80,75,74,128,13,191,2,4,9,4,11,4,60,141,7,60,128,13,192,2,6,13,17,60,141,19,11,17,60,128,20,193,2,16,4,8,60,141,16,4,8,60,143,133,4,71,82,85,79,128,18,194,2,2,9,2,60,141,2,9,2,60,143,133,2,84,75,128,10,195,2,7,11,60,141,133,0,128,15,196,2,6,13,17,60,141,133,4,73,73,73,83,128,13,197,2,9,18,8,20,20,60,141,133,0,128,9,198,2,18,60,141,7,60,128,10,199,2,19,17,60,141,133,0,128,13,200,2,5,21,10,60,141,133,2,65,67,128,11,201,2,6,13,17,60,141,133,0,128,15,202,2,18,18,6,60,141,133,4,76,76,71,85,128,16,203,2,19,21,60,141,19,21,60,143,5,21,10,60,128,22,204,2,2,10,12,16,18,60,141,2,10,12,16,18,60,143,133,2,81,79,128,14,205,2,2,1,10,60,141,133,3,77,71,76,128,18,206,2,2,9,2,60,141,2,9,2,60,143,133,2,68,66,128,18,207,2,6,16,7,60,141,6,16,7,60,143,133,2,68,74,128,22,208,2,6,13,7,21,16,60,141,6,13,7,21,16,60,143,2,9,2,60,128,13,209,2,2,6,60,141,133,3,76,76,83,128,13,210,2,9,18,8,20,20,60,141,133,0,128,18,211,2,2,9,2,60,141,2,9,2,60,143,18,18,6,60,128,16,212,2,2,9,2,60,141,133,5,84,85,78,84,85,128,16,213,2,7,60,141,7,60,143,2,10,12,16,18,60,128,19,214,2,2,1,10,60,141,2,1,10,60,143,133,3,72,74,79,128,14,215,2,11,8,17,60,141,133,3,78,67,66,128,13,216,2,2,6,60,141,133,3,68,77,81,128,18,217,2,2,9,2,60,141,2,9,2,60,143,6,16,7,60,128,19,218,2,6,13,17,60,141,6,13,17,60,143,133,3,82,78,80,128,13,219,2,18,18,6,60,141,133,2,76,75,128,15,220,2,9,18,8,20,20,60,141,19,11,17,60,128,14,221,2,19,5,19,1,18,60,141,133,1,82,128,9,222,2,7,60,141,133,0,128,15,223,2,18,60,141,18,60,143,133,3,81,77,67,128,21,224,2,1,12,6,13,60,141,1,12,6,13,60,143,133,3,68,76,79,128,23,225,2,4,9,4,11,4,60,141,4,9,4,11,4,60,143,133,3,73,72,85,128,12,226,2,2,1,10,60,141,17,16,60,128,15,227,2,9,14,1,20,60,141,1,12,6,13,60,128,16,228,2,6,13,7,21,16,60,141,133,3,83,68,81,128,17,229,2,18,60,141,18,60,143,133,5,66,79,79,81,77,128,20,230,2,18,2,15,60,141,18,2,15,60,143,133,4,70,73,71,85,128,11,231,2,2,9,2,60,141,133,0,128,17,232,2,9,18,8,20,20,60,141,133,4,78,84,75,66,128,15,233,2,12,8,2,16,60,141,21,11,21,15,60,128,17,234,2,7,11,60,141,7,11,60,143,133,3,67,76,84,128,14,235,2,5,21,10,60,141,1,12,6,13,60,128,11,236,2,2,16,19,60,141,18,60,128,15,237,2,6,13,7,21,16,60,141,133,2,79,82,128,22,238,2,19,5,19,1,18,60,141,19,5,19,1,18,60,143,16,4,8,60,128,21,239,2,18,18,6,60,141,18,18,6,60,143,133,5,77,66,73,80,85,128,20,240,2,1,12,6,13,60,141,1,12,6,13,60,143,2,16,19,60,128,14,241,2,2,9,2,60,141,133,3,69,75,81,128,11,242,2,16,4,8,60,141,133,0,128,15,243,2,9,60,141,9,60,143,12,8,2,16,60,128,21,244,2,6,16,7,60,141,6,16,7,60,143,133,5,77,70,70,75,74,128,13,245,2,2,10,12,16,18,60,141,133,0,128,12,246,2,21,11,21,15,60,141,133,0,128,15,247,2,16,4,8,60,141,9,18,8,20,20,60,128,13,248,2,1,12,6,13,60,141,17,16,60,128,10,249,2,7,11,60,141,133,0,128,12,250,2,9,14,1,20,60,141,133,0,128,18,251,2,2,16,19,60,141,2,16,19,60,143,2,9,2,60,128,10,252,2,2,6,60,141,133,0,128,15,253,2,9,60,141,9,60,143,133,3,68,78,77,128,11,254,2,2,9,2,60,141,133,0,128,13,255,2,6,16,7,60,141,2,9,2,60,128,14,0,3,19,17,60,141,133,4,80,73,68,67,128,17,1,3,6,16,7,60,141,6,16,7,60,143,133,1,68,128,15,2,3,7,11,60,141,133,5,65,80,72,65,76,128,13,3,3,2,6,60,141,21,11,21,15,60,128,13,4,3,11,8,17,60,141,133,2,74,75,128,12,5,3,1,12,6,13,60,141,133,0,128,14,6,3,21,11,21,15,60,141,2,9,2,60,128,16,7,3,6,13,7,21,16,60,141,133,3,75,77,68,128,17,8,3,2,1,10,60,141,2,1,10,60,143,133,1,77,128,16,9,3,18,60,141,18,60,143,133,4,79,66,75,68,128,16,10,3,19,17,60,141,19,17,60,143,6,13,17,60,128,25,11,3,9,18,8,20,20,60,141,9,18,8,20,20,60,143,133,5,69,77,79,66,81,128,11,12,3,19,11,17,60,141,133,0,128,13,13,3,21,11,21,15,60,141,19,21,60,128,12,14,3,19,21,60,141,11,8,17,60,128,10,15,3,7,11,60,141,133,0,128,22,16,3,2,10,12,16,18,60,141,2,10,12,16,18,60,143,133,2,67,84,128,15,17,3,7,60,141,7,60,143,133,3,75,77,79,128,9,18,3,12,60,141,133,0,128,13,19,3,6,13,17,60,141,19,11,17,60,128,12,20,3,17,16,60,141,133,2,85,76,128,18,21,3,18,2,15,60,141,18,2,15,60,143,5,21,10,60,128,20,22,3,1,12,6,13,60,141,1,12,6,13,60,143,18,18,6,60,128,17,23,3,7,11,60,141,7,11,60,143,133,3,83,69,73,128,16,24,3,18,18,6,60,141,18,18,6,60,143,7,60,128,12,25,3,19,17,60,141,5,21,10,60,128,14,26,3,4,9,4,11,4,60,141,7,11,60,128,22,27,3,19,5,19,1,18,60,141,19,5,19,1,18,60,143,6,13,17,60,128,10,28,3,19,17,60,141,18,60,128,17,29,3,7,11,60,141,7,11,60,143,1,12,6,13,60,128,13,30,3,12,60,141,12,60,143,133,1,68,128,21,31,3,12,8,2,16,60,141,12,8,2,16,60,143,133,3,72,78,79,128,18,32,3,19,21,60,141,19,21,60,143,133,4,78,78,76,74,128,13,33,3,6,13,17,60,141,18,18,6,60,128,11,34,3,2,9,2,60,141,133,0,128,11,35,3,18,60,141,5,21,10,60,128,21,36,3,16,4,8,60,141,16,4,8,60,143,133,5,78,72,70,82,76,128,9,37,3,16,60,141,133,0,128,11,38,3,12,60,141,133,2,84,79,128,16,39,3,5,21,10,60,141,5,21,10,60,143,12,60,128,18,40,3,17,16,60,141,17,16,60,143,19,5,19,1,18,60,128,19,41,3,6,16,7,60,141,6,16,7,60,143,9,14,1,20,60,128,14,42,3,6,13,7,21,16,60,141,17,16,60,128,12,43,3,12,8,2,16,60,141,133,0,128,19,44,3,19,21,60,141,19,21,60,143,133,5,71,72,67,71,78,128,22,45,3,21,11,21,15,60,141,21,11,21,15,60,143,9,18,8,20,20,60,128,21,46,3,9,18,8,20,20,60,141,9,18,8,20,20,60,143,133,1,83,128,11,47,3,2,16,19,60,141,133,0,128,21,48,3,1,12,6,13,60,141,1,12,6,13,60,143,133,3,79,70,74,128,19,49,3,1,12,6,13,60,141,1,12,6,13,60,143,19,17,60,128,15,50,3,9,18,8,20,20,60,141,6,16,7,60,128,10,51,3,19,17,60,141,133,0,128,17,52,3,19,11,17,60,141,19,11,17,60,143,2,6,60,128,23,53,3,2,10,12,16,18,60,141,2,10,12,16,18,60,143,9,14,1,20,60,128,14,54,3,1,12,6,13,60,141,2,1,10,60,128,14,55,3,7,60,141,133,5,78,67,85,83,71,128,17,56,3,2,9,2,60,141,2,9,2,60,143,133,1,72,128,12,57,3,12,8,2,16,60,141,133,0,128,14,58,3,7,60,141,7,60,143,133,2,73,72,128,11,59,3,7,11,60,141,7,11,60,128,13,60,3,5,21,10,60,141,2,16,19,60,128,9,61,3,16,60,141,133,0,128,16,62,3,2,16,19,60,141,133,5,76,69,76,85,69,128,12,63,3,16,60,141,16,60,143,7,60,128,15,64,3,2,16,19,60,141,9,18,8,20,20,60,128,14,65,3,9,60,141,9,60,143,6,13,17,60,128,11,66,3,6,16,7,60,141,133,0,128,16,67,3,19,17,60,141,19,17,60,143,133,2,78,83,128,9,68,3,12,60,141,133,0,128,11,69,3,19,11,17,60,141,133,0,128,16,70,3,6,13,7,21,16,60,141,133,3,71,79,65,128,21,71,3,12,8,2,16,60,141,12,8,2,16,60,143,133,3,70,66,84,128,12,72,3,216,19,11,17,60,141,133,0,128,10,73,3,216,12,60,141,133,0,128,24,74,3,216,18,2,15,60,141,133,12,66,72,82,69,75,70,73,71,85,68,76,79,128,21,75,3,216,17,16,60,141,133,10,85,76,82,71,68,84,71,82,85,79,128,17,76,3,216,16,60,141,133,7,78,67,85,83,71,73,72,128,13,77,3,216,2,9,2,60,141,133,1,72,128,16,78,3,216,2,10,12,16,18,60,141,133,2,67,84,128,16,79,3,216,12,8,2,16,60,141,133,3,70,66,84,128,21,80,3,216,7,11,60,141,133,10,83,69,73,76,75,77,66,73,80,85,128,29,81,3,216,21,11,21,15,60,141,133,16,67,82,68,65,74,65,67,78,84,75,66,69,77,79,66,81,128,37,82,3,216,9,60,141,133,27,72,84,75,75,81,70,72,78,70,76,69,77,71,76,68,78,77,76,75,77,66,73,80,85,75,77,79,128,11,83,3,216,2,6,60,141,133,0,128,13,84,3,216,2,1,10,60,141,133,1,77,128,13,85,3,216,9,14,1,20,60,141,133,0,128,22,86,3,216,18,18,6,60,141,133,10,76,75,77,66,73,80,85,75,77,79,128,15,87,3,216,9,18,8,20,20,60,141,133,1,68,128,17,88,3,216,6,13,7,21,16,60,141,133,3,71,79,65,128,14,89,3,216,11,8,17,60,141,133,2,74,75,128,21,90,3,216,16,4,8,60,141,133,9,78,84,75,66,78,72,70,82,76,128,13,91,3,216,2,16,19,60,141,133,1,68,128,13,92,3,216,19,17,60,141,133,2,78,83,128,22,93,3,216,6,13,17,60,141,133,10,76,75,77,66,73,80,85,75,77,79,128,13,94,3,216,18,60,141,133,3,68,76,79,128,17,95,3,216,4,9,4,11,4,60,141,133,3,83,69,73,128,14,96,3,216,1,12,6,13,60,141,133,1,77,128,12,97,3,216,5,21,10,60,141,133,0,128,22,98,3,216,19,5,19,1,18,60,141,133,8,82,71,68,84,71,82,85,79,128,22,99,3,216,19,21,60,141,133,11,74,75,78,78,76,74,71,72,67,71,78,128,12,100,3,216,6,16,7,60,141,133,0,128,17,101,3,216,7,60,141,133,7,78,67,85,83,71,73,72,128,6,102,3,129,142,128,0
>5008	85 00 8f 85 00 80 0c 0b 00 0c 3c 8d 85 00 8f 85
>5018	00 80 0e 0c 00 12 02 0f 3c 8d 85 00 8f 85 00 80
>5028	0d 0d 00 11 10 3c 8d 85 00 8f 85 00 80 0c 0e 00
>5038	10 3c 8d 85 00 8f 85 00 80 0e 0f 00 02 09 02 3c
>5048	8d 85 00 8f 85 00 80 10 10 00 02 0a 0c 10 12 3c
>5058	8d 85 00 8f 85 00 80 0f 11 00 0c 08 02 10 3c 8d
>5068	85 00 8f 85 00 80 0d 12 00 07 0b 3c 8d 85 00 8f
>5078	85 00 80 0f 13 00 15 0b 15 0f 3c 8d 85 00 8f 85
>5088	00 80 0c 14 00 09 3c 8d 85 00 8f 85 00 80 0d 15
>5098	00 02 06 3c 8d 85 00 8f 85 00 80 0e 16 00 02 01
>50a8	0a 3c 8d 85 00 8f 85 00 80 0f 17 00 09 0e 01 14
>50b8	3c 8d 85 00 8f 85 00 80 0e 18 00 12 12 06 3c 8d
>50c8	85 00 8f 85 00 80 10 19 00 09 12 08 14 14 3c 8d
>50d8	85 00 8f 85 00 80 10 1a 00 06 0d 07 15 10 3c 8d
>50e8	85 00 8f 85 00 80 0e 1b 00 0b 08 11 3c 8d 85 00
>50f8	8f 85 00 80 0e 1c 00 10 04 08 3c 8d 85 00 8f 85
>5108	00 80 0e 1d 00 02 10 13 3c 8d 85 00 8f 85 00 80
>5118	0d 1e 00 13 11 3c 8d 85 00 8f 85 00 80 0e 1f 00
>5128	06 0d 11 3c 8d 85 00 8f 85 00 80 0c 20 00 12 3c
>5138	8d 85 00 8f 85 00 80 10 21 00 04 09 04 0b 04 3c
>5148	8d 85 00 8f 85 00 80 0f 22 00 01 0c 06 0d 3c 8d
>5158	85 00 8f 85 00 80 0e 23 00 05 15 0a 3c 8d 85 00
>5168	8f 85 00 80 10 24 00 13 05 13 01 12 3c 8d 85 00
>5178	8f 85 00 80 0d 25 00 13 15 3c 8d 85 00 8f 85 00
>5188	80 0e 26 00 06 10 07 3c 8d 85 00 8f 85 00 80 0c
>5198	27 00 07 3c 8d 85 00 8f 85 00 80 0d 28 00 12 3c
>51a8	8d 12 3c 8f 02 06 3c 80 0d 29 00 09 3c 8d 09 3c
>51b8	8f 85 01 43 80 0e 2a 00 0b 08 11 3c 8d 85 03 44
>51c8	43 4d 80 0a 2b 00 13 11 3c 8d 85 00 80 10 2c 00
>51d8	07 0b 3c 8d 07 0b 3c 8f 85 02 52 4e 80 10 2d 00
>51e8	07 3c 8d 07 3c 8f 85 04 55 4c 4f 44 80 11 2e 00
>51f8	0b 08 11 3c 8d 0b 08 11 3c 8f 02 06 3c 80 12 2f
>5208	00 13 11 3c 8d 13 11 3c 8f 85 04 42 45 55 46 80
>5218	10 30 00 02 01 0a 3c 8d 85 05 4e 55 42 47 48 80
>5228	0d 31 00 07 0b 3c 8d 85 03 4b 43 47 80 09 32 00
>5238	0c 3c 8d 85 00 80 13 33 00 12 02 0f 3c 8d 12 02
>5248	0f 3c 8f 01 0c 06 0d 3c 80 0e 34 00 05 15 0a 3c
>5258	8d 85 03 4f 4f 4d 80 12 35 00 13 15 3c 8d 13 15
>5268	3c 8f 85 04 41 53 45 52 80 0d 36 00 01 0c 06 0d
>5278	3c 8d 85 01 43 80 0e 37 00 0c 3c 8d 0c 3c 8f 12
>5288	12 06 3c 80 11 38 00 09 3c 8d 09 3c 8f 85 05 4c
>5298	4c 41 52 55 80 0b 39 00 12 02 0f 3c 8d 85 00 80
>52a8	11 3a 00 02 0a 0c 10 12 3c 8d 85 04 4c 49 55 4f
>52b8	80 0b 3b 00 02 01 0a 3c 8d 85 00 80 0b 3c 00 0b
>52c8	08 11 3c 8d 85 00 80 0d 3d 00 02 10 13 3c 8d 85
>52d8	02 55 52 80 13 3e 00 13 15 3c 8d 13 15 3c 8f 85
>52e8	05 45 4a 50 42 52 80 10 3f 00 0c 08 02 10 3c 8d
>52f8	09 12 08 14 14 3c 80 14 40 00 13 0b 11 3c 8d 13
>5308	0b 11 3c 8f 04 09 04 0b 04 3c 80 0c 41 00 01 0c
>5318	06 0d 3c 8d 07 3c 80 15 42 00 02 10 13 3c 8d 02
>5328	10 13 3c 8f 85 05 42 45 4f 4e 48 80 11 43 00 13
>5338	0b 11 3c 8d 13 0b 11 3c 8f 85 01 4d 80 0d 44 00
>5348	13 05 13 01 12 3c 8d 85 00 80 14 45 00 06 10 07
>5358	3c 8d 06 10 07 3c 8f 85 04 46 4b 54 45 80 0a 46
>5368	00 13 15 3c 8d 85 00 80 0a 47 00 11 10 3c 8d 85
>5378	00 80 18 48 00 06 0d 07 15 10 3c 8d 06 0d 07 15
>5388	10 3c 8f 13 05 13 01 12 3c 80 12 49 00 02 01 0a
>5398	3c 8d 02 01 0a 3c 8f 0b 08 11 3c 80 15 4a 00 06
>53a8	0d 11 3c 8d 06 0d 11 3c 8f 85 05 52 44 4b 54 44
>53b8	80 17 4b 00 01 0c 06 0d 3c 8d 01 0c 06 0d 3c 8f
>53c8	85 05 4a 4f 49 43 44 80 14 4c 00 05 15 0a 3c 8d
>53d8	05 15 0a 3c 8f 85 04 45 4a 53 54 80 14 4d 00 09
>53e8	0e 01 14 3c 8d 09 0e 01 14 3c 8f 02 01 0a 3c 80
>53f8	12 4e 00 02 10 13 3c 8d 02 10 13 3c 8f 0b 08 11
>5408	3c 80 10 4f 00 13 11 3c 8d 13 11 3c 8f 05 15 0a
>5418	3c 80 12 50 00 11 10 3c 8d 11 10 3c 8f 06 0d 07
>5428	15 10 3c 80 10 51 00 02 06 3c 8d 02 06 3c 8f 02
>5438	09 02 3c 80 0c 52 00 01 0c 06 0d 3c 8d 85 00 80
>5448	0e 53 00 10 3c 8d 10 3c 8f 02 09 02 3c 80 15 54
>5458	00 02 10 13 3c 8d 02 10 13 3c 8f 85 05 44 48 50
>5468	50 50 80 0b 55 00 12 02 0f 3c 8d 85 00 80 0e 56
>5478	00 13 0b 11 3c 8d 85 03 51 49 48 80 15 57 00 13
>5488	05 13 01 12 3c 8d 13 05 13 01 12 3c 8f 13 15 3c
>5498	80 0e 58 00 10 3c 8d 85 05 51 41 4b 4c 4c 80 0f
>54a8	59 00 13 11 3c 8d 85 05 4e 4e 4c 46 55 80 0d 5a
>54b8	00 09 12 08 14 14 3c 8d 12 3c 80 14 5b 00 0b 08
>54c8	11 3c 8d 0b 08 11 3c 8f 85 04 53 4a 4e 45 80 0d
>54d8	5c 00 10 3c 8d 10 3c 8f 85 01 4e 80 13 5d 00 06
>54e8	10 07 3c 8d 06 10 07 3c 8f 09 0e 01 14 3c 80 13
>54f8	5e 00 02 01 0a 3c 8d 02 01 0a 3c 8f 85 03 42 41
>5508	43 80 0e 5f 00 02 09 02 3c 8d 85 03 51 42 41 80
>5518	0d 60 00 06 0d 07 15 10 3c 8d 85 00 80 0c 61 00
>5528	15 0b 15 0f 3c 8d 85 00 80 0f 62 00 06 0d 07 15
>5538	10 3c 8d 85 02 4d 42 80 0b 63 00 05 15 0a 3c 8d
>5548	85 00 80 0d 64 00 02 06 3c 8d 85 03 55 53 4e 80
>5558	0e 65 00 02 01 0a 3c 8d 85 03 55 42 4d 80 16 66
>5568	00 02 0a 0c 10 12 3c 8d 02 0a 0c 10 12 3c 8f 10
>5578	04 08 3c 80 09 67 00 10 3c 8d 85 00 80 18 68 00
>5588	06 0d 07 15 10 3c 8d 06 0d 07 15 10 3c 8f 85 04
>5598	41 4c 4a 54 80 0a 69 00 13 11 3c 8d 85 00 80 0f
>55a8	6a 00 02 06 3c 8d 02 06 3c 8f 13 15 3c 80 10 6b
>55b8	00 13 0b 11 3c 8d 13 0b 11 3c 8f 09 3c 80 0a 6c
>55c8	00 11 10 3c 8d 85 00 80 09 6d 00 12 3c 8d 85 00
>55d8	80 0d 6e 00 13 0b 11 3c 8d 02 10 13 3c 80 11 6f
>55e8	00 11 10 3c 8d 11 10 3c 8f 0c 08 02 10 3c 80 13
>55f8	70 00 0c 08 02 10 3c 8d 0c 08 02 10 3c 8f 85 01
>5608	43 80 0a 71 00 11 10 3c 8d 85 00 80 0a 72 00 11
>5618	10 3c 8d 85 00 80 0b 73 00 12 12 06 3c 8d 85 00
>5628	80 16 74 00 09 12 08 14 14 3c 8d 09 12 08 14 14
>5638	3c 8f 85 02 47 43 80 16 75 00 09 12 08 14 14 3c
>5648	8d 09 12 08 14 14 3c 8f 13 0b 11 3c 80 14 76 00
>5658	01 0c 06 0d 3c 8d 01 0c 06 0d 3c 8f 85 02 52 42
>5668	80 0f 77 00 09 0e 01 14 3c 8d 15 0b 15 0f 3c 80
>5678	09 78 00 12 3c 8d 12 3c 80 0d 79 00 0c 3c 8d 0c
>5688	3c 8f 13 11 3c 80 12 7a 00 02 06 3c 8d 02 06 3c
>5698	8f 06 0d 07 15 10 3c 80 0a 7b 00 02 06 3c 8d 85
>56a8	00 80 14 7c 00 15 0b 15 0f 3c 8d 15 0b 15 0f 3c
>56b8	8f 85 02 4a 45 80 11 7d 00 13 0b 11 3c 8d 13 0b
>56c8	11 3c 8f 85 01 41 80 15 7e 00 12 02 0f 3c 8d 12
>56d8	02 0f 3c 8f 85 05 4e 45 55 41 54 80 0f 7f 00 13
>56e8	0b 11 3c 8d 85 04 52 4b 43 51 80 12 80 00 07 0b
>56f8	3c 8d 07 0b 3c 8f 85 04 4a 4c 49 49 80 0b 81 00
>5708	12 02 0f 3c 8d 85 00 80 0d 82 00 09 12 08 14 14
>5718	3c 8d 85 00 80 16 83 00 04 09 04 0b 04 3c 8d 04
>5728	09 04 0b 04 3c 8f 85 02 49 4d 80 10 84 00 13 11
>5738	3c 8d 13 11 3c 8f 12 02 0f 3c 80 0d 85 00 06 0d
>5748	11 3c 8d 02 09 02 3c 80 0b 86 00 13 0b 11 3c 8d
>5758	0c 3c 80 0b 87 00 10 04 08 3c 8d 85 00 80 10 88
>5768	00 02 09 02 3c 8d 02 09 02 3c 8f 09 3c 80 0b 89
>5778	00 11 10 3c 8d 07 0b 3c 80 0a 8a 00 07 3c 8d 02
>5788	06 3c 80 09 8b 00 09 3c 8d 12 3c 80 0b 8c 00 07
>5798	0b 3c 8d 85 01 4a 80 0e 8d 00 02 0a 0c 10 12 3c
>57a8	8d 02 06 3c 80 13 8e 00 02 10 13 3c 8d 02 10 13
>57b8	3c 8f 85 03 4b 43 53 80 0e 8f 00 05 15 0a 3c 8d
>57c8	85 03 52 53 55 80 0c 90 00 02 09 02 3c 8d 85 01
>57d8	4a 80 13 91 00 05 15 0a 3c 8d 05 15 0a 3c 8f 15
>57e8	0b 15 0f 3c 80 12 92 00 02 09 02 3c 8d 02 09 02
>57f8	3c 8f 85 02 44 52 80 0a 93 00 07 0b 3c 8d 85 00
>5808	80 15 94 00 02 09 02 3c 8d 02 09 02 3c 8f 85 05
>5818	46 41 42 49 4e 80 15 95 00 06 10 07 3c 8d 06 10
>5828	07 3c 8f 85 05 4d 48 53 4e 4a 80 10 96 00 13 11
>5838	3c 8d 13 11 3c 8f 85 02 49 4e 80 0f 97 00 0c 08
>5848	02 10 3c 8d 85 03 54 4c 46 80 0c 98 00 0c 3c 8d
>5858	0c 3c 8f 07 3c 80 12 99 00 05 15 0a 3c 8d 05 15
>5868	0a 3c 8f 12 12 06 3c 80 14 9a 00 12 12 06 3c 8d
>5878	12 12 06 3c 8f 13 05 13 01 12 3c 80 0e 9b 00 07
>5888	3c 8d 07 3c 8f 85 02 4f 4c 80 0f 9c 00 06 0d 07
>5898	15 10 3c 8d 12 12 06 3c 80 14 9d 00 09 0e 01 14
>58a8	3c 8d 09 0e 01 14 3c 8f 02 09 02 3c 80 10 9e 00
>58b8	04 09 04 0b 04 3c 8d 85 03 44 46 48 80 11 9f 00
>58c8	11 10 3c 8d 11 10 3c 8f 85 03 52 50 44 80 15 a0
>58d8	00 06 0d 11 3c 8d 06 0d 11 3c 8f 85 05 4f 46 4e
>58e8	4d 52 80 19 a1 00 04 09 04 0b 04 3c 8d 04 09 04
>58f8	0b 04 3c 8f 85 05 54 41 4e 54 43 80 14 a2 00 15
>5908	0b 15 0f 3c 8d 15 0b 15 0f 3c 8f 02 09 02 3c 80
>5918	10 a3 00 01 0c 06 0d 3c 8d 85 04 49 49 4c 4c 80
>5928	18 a4 00 06 0d 07 15 10 3c 8d 06 0d 07 15 10 3c
>5938	8f 85 04 44 4b 49 52 80 0f a5 00 02 0a 0c 10 12
>5948	3c 8d 02 10 13 3c 80 0f a6 00 11 10 3c 8d 11 10
>5958	3c 8f 07 0b 3c 80 15 a7 00 0b 08 11 3c 8d 0b 08
>5968	11 3c 8f 85 05 54 4c 4f 51 44 80 13 a8 00 0c 08
>5978	02 10 3c 8d 0c 08 02 10 3c 8f 85 01 4a 80 0d a9
>5988	00 13 0b 11 3c 8d 02 09 02 3c 80 0e aa 00 10 04
>5998	08 3c 8d 85 03 43 43 46 80 09 ab 00 12 3c 8d 85
>59a8	00 80 0b ac 00 09 3c 8d 85 02 45 4c 80 0b ad 00
>59b8	12 02 0f 3c 8d 85 00 80 16 ae 00 04 09 04 0b 04
>59c8	3c 8d 04 09 04 0b 04 3c 8f 02 01 0a 3c 80 17 af
>59d8	00 06 0d 07 15 10 3c 8d 06 0d 07 15 10 3c 8f 85
>59e8	03 4b 46 51 80 0a b0 00 07 0b 3c 8d 85 00 80 0f
>59f8	b1 00 13 11 3c 8d 85 05 51 4a 41 43 54 80 19 b2
>5a08	00 09 12 08 14 14 3c 8d 09 12 08 14 14 3c 8f 85
>5a18	05 46 53 43 52 4f 80 13 b3 00 0c 08 02 10 3c 8d
>5a28	0c 08 02 10 3c 8f 85 01 42 80 0c b4 00 0b 08 11
>5a38	3c 8d 07 0b 3c 80 0e b5 00 02 01 0a 3c 8d 01 0c
>5a48	06 0d 3c 80 18 b6 00 04 09 04 0b 04 3c 8d 04 09
>5a58	04 0b 04 3c 8f 09 12 08 14 14 3c 80 0c b7 00 01
>5a68	0c 06 0d 3c 8d 85 00 80 19 b8 00 04 09 04 0b 04
>5a78	3c 8d 04 09 04 0b 04 3c 8f 85 05 52 44 4d 45 51
>5a88	80 0e b9 00 01 0c 06 0d 3c 8d 05 15 0a 3c 80 0e
>5a98	ba 00 01 0c 06 0d 3c 8d 02 09 02 3c 80 0d bb 00
>5aa8	12 02 0f 3c 8d 05 15 0a 3c 80 11 bc 00 06 0d 07
>5ab8	15 10 3c 8d 02 0a 0c 10 12 3c 80 0e bd 00 13 05
>5ac8	13 01 12 3c 8d 13 11 3c 80 16 be 00 04 09 04 0b
>5ad8	04 3c 8d 04 09 04 0b 04 3c 8f 85 02 4c 4f 80 16
>5ae8	bf 00 09 12 08 14 14 3c 8d 09 12 08 14 14 3c 8f
>5af8	12 12 06 3c 80 0d c0 00 07 3c 8d 07 3c 8f 13 11
>5b08	3c 80 0d c1 00 02 0a 0c 10 12 3c 8d 85 00 80 12
>5b18	c2 00 02 09 02 3c 8d 02 09 02 3c 8f 02 01 0a 3c
>5b28	80 0e c3 00 13 15 3c 8d 13 15 3c 8f 07 3c 80 0f
>5b38	c4 00 12 12 06 3c 8d 13 05 13 01 12 3c 80 0e c5
>5b48	00 0c 3c 8d 0c 3c 8f 10 04 08 3c 80 16 c6 00 01
>5b58	0c 06 0d 3c 8d 01 0c 06 0d 3c 8f 85 04 46 52 4a
>5b68	44 80 0e c7 00 12 02 0f 3c 8d 85 03 49 4c 45 80
>5b78	0f c8 00 09 0e 01 14 3c 8d 85 03 4d 4c 45 80 0e
>5b88	c9 00 0c 3c 8d 0c 3c 8f 02 10 13 3c 80 14 ca 00
>5b98	12 02 0f 3c 8d 12 02 0f 3c 8f 13 05 13 01 12 3c
>5ba8	80 0a cb 00 07 0b 3c 8d 85 00 80 0d cc 00 13 0b
>5bb8	11 3c 8d 05 15 0a 3c 80 10 cd 00 07 0b 3c 8d 07
>5bc8	0b 3c 8f 02 09 02 3c 80 09 ce 00 0c 3c 8d 85 00
>5bd8	80 16 cf 00 0c 08 02 10 3c 8d 0c 08 02 10 3c 8f
>5be8	85 04 44 50 46 4c 80 10 d0 00 09 0e 01 14 3c 8d
>5bf8	85 04 54 50 4f 4a 80 0f d1 00 06 0d 11 3c 8d 09
>5c08	12 08 14 14 3c 80 0c d2 00 15 0b 15 0f 3c 8d 85
>5c18	00 80 16 d3 00 04 09 04 0b 04 3c 8d 04 09 04 0b
>5c28	04 3c 8f 85 02 41 52 80 0c d4 00 02 01 0a 3c 8d
>5c38	85 01 4a 80 0c d5 00 07 0b 3c 8d 85 02 50 50 80
>5c48	0a d6 00 10 3c 8d 85 01 45 80 0d d7 00 02 01 0a
>5c58	3c 8d 85 02 46 4e 80 12 d8 00 02 10 13 3c 8d 02
>5c68	10 13 3c 8f 0b 08 11 3c 80 16 d9 00 09 0e 01 14
>5c78	3c 8d 09 0e 01 14 3c 8f 02 0a 0c 10 12 3c 80 12
>5c88	da 00 02 0a 0c 10 12 3c 8d 85 05 4f 54 4f 45 4a
>5c98	80 0d db 00 10 3c 8d 10 3c 8f 11 10 3c 80 0b dc
>5ca8	00 06 10 07 3c 8d 85 00 80 17 dd 00 15 0b 15 0f
>5cb8	3c 8d 15 0b 15 0f 3c 8f 85 05 4a 49 53 50 48 80
>5cc8	14 de 00 0c 08 02 10 3c 8d 0c 08 02 10 3c 8f 06
>5cd8	10 07 3c 80 0d df 00 0c 3c 8d 85 04 44 54 55 4e
>5ce8	80 10 e0 00 0c 3c 8d 0c 3c 8f 02 0a 0c 10 12 3c
>5cf8	80 0d e1 00 0c 3c 8d 0c 3c 8f 85 01 55 80 0f e2
>5d08	00 05 15 0a 3c 8d 85 04 4f 53 4d 50 80 0c e3 00
>5d18	13 11 3c 8d 05 15 0a 3c 80 0d e4 00 0c 3c 8d 0c
>5d28	3c 8f 13 15 3c 80 11 e5 00 02 01 0a 3c 8d 02 01
>5d38	0a 3c 8f 85 01 46 80 0d e6 00 12 12 06 3c 8d 85
>5d48	02 43 4c 80 16 e7 00 09 12 08 14 14 3c 8d 09 12
>5d58	08 14 14 3c 8f 85 02 4e 42 80 0e e8 00 12 3c 8d
>5d68	12 3c 8f 85 02 49 4f 80 12 e9 00 0b 08 11 3c 8d
>5d78	0b 08 11 3c 8f 12 12 06 3c 80 0c ea 00 12 02 0f
>5d88	3c 8d 85 01 48 80 09 eb 00 0c 3c 8d 85 00 80 17
>5d98	ec 00 06 0d 07 15 10 3c 8d 06 0d 07 15 10 3c 8f
>5da8	09 0e 01 14 3c 80 14 ed 00 12 02 0f 3c 8d 12 02
>5db8	0f 3c 8f 85 04 47 49 50 42 80 0b ee 00 02 09 02
>5dc8	3c 8d 85 00 80 11 ef 00 02 01 0a 3c 8d 02 01 0a
>5dd8	3c 8f 85 01 55 80 11 f0 00 09 12 08 14 14 3c 8d
>5de8	85 04 50 53 48 4d 80 0a f1 00 07 0b 3c 8d 85 00
>5df8	80 10 f2 00 13 05 13 01 12 3c 8d 85 03 4d 48 55
>5e08	80 18 f3 00 13 05 13 01 12 3c 8d 13 05 13 01 12
>5e18	3c 8f 85 04 4c 49 43 4d 80 0b f4 00 12 02 0f 3c
>5e28	8d 85 00 80 0d f5 00 09 3c 8d 09 3c 8f 85 01 42
>5e38	80 12 f6 00 04 09 04 0b 04 3c 8d 85 05 4e 43 48
>5e48	42 49 80 16 f7 00 09 0e 01 14 3c 8d 09 0e 01 14
>5e58	3c 8f 06 0d 07 15 10 3c 80 0f f8 00 06 0d 07 15
>5e68	10 3c 8d 02 09 02 3c 80 11 f9 00 02 10 13 3c 8d
>5e78	02 10 13 3c 8f 11 10 3c 80 15 fa 00 02 0a 0c 10
>5e88	12 3c 8d 02 0a 0c 10 12 3c 8f 85 01 55 80 14 fb
>5e98	00 13 05 13 01 12 3c 8d 13 05 13 01 12 3c 8f 07
>5ea8	3c 80 10 fc 00 13 15 3c 8d 13 15 3c 8f 06 10 07
>5eb8	3c 80 0b fd 00 02 01 0a 3c 8d 85 00 80 11 fe 00
>5ec8	0b 08 11 3c 8d 0b 08 11 3c 8f 85 01 51 80 0f ff
>5ed8	00 07 0b 3c 8d 07 0b 3c 8f 13 15 3c 80 11 00 01
>5ee8	02 10 13 3c 8d 02 10 13 3c 8f 13 11 3c 80 0e 01
>5ef8	01 0c 3c 8d 0c 3c 8f 85 02 4f 49 80 0e 02 01 12
>5f08	12 06 3c 8d 09 0e 01 14 3c 80 10 03 01 02 0a 0c
>5f18	10 12 3c 8d 01 0c 06 0d 3c 80 0d 04 01 02 0a 0c
>5f28	10 12 3c 8d 85 00 80 15 05 01 09 12 08 14 14 3c
>5f38	8d 09 12 08 14 14 3c 8f 13 15 3c 80 16 06 01 02
>5f48	0a 0c 10 12 3c 8d 02 0a 0c 10 12 3c 8f 02 10 13
>5f58	3c 80 10 07 01 04 09 04 0b 04 3c 8d 85 03 4c 4b
>5f68	41 80 17 08 01 04 09 04 0b 04 3c 8d 04 09 04 0b
>5f78	04 3c 8f 85 03 53 47 46 80 0d 09 01 0b 08 11 3c
>5f88	8d 05 15 0a 3c 80 13 0a 01 09 0e 01 14 3c 8d 09
>5f98	0e 01 14 3c 8f 85 01 47 80 0d 0b 01 0b 08 11 3c
>5fa8	8d 85 02 4d 4b 80 16 0c 01 0c 08 02 10 3c 8d 0c
>5fb8	08 02 10 3c 8f 85 04 42 46 51 53 80 0f 0d 01 0c
>5fc8	08 02 10 3c 8d 85 03 47 4f 4b 80 0f 0e 01 06 0d
>5fd8	11 3c 8d 85 04 44 53 43 55 80 0f 0f 01 04 09 04
>5fe8	0b 04 3c 8d 02 01 0a 3c 80 0e 10 01 02 09 02 3c
>5ff8	8d 0c 08 02 10 3c 80 0f 11 01 02 09 02 3c 8d 85
>6008	04 54 52 44 44 80 0d 12 01 12 02 0f 3c 8d 85 02
>6018	4a 46 80 0b 13 01 02 10 13 3c 8d 85 00 80 0f 14
>6028	01 02 06 3c 8d 85 05 47 4a 48 48 42 80 0e 15 01
>6038	13 11 3c 8d 85 04 49 49 50 50 80 0d 16 01 02 09
>6048	02 3c 8d 02 10 13 3c 80 0b 17 01 12 12 06 3c 8d
>6058	09 3c 80 0d 18 01 0c 08 02 10 3c 8d 07 0b 3c 80
>6068	11 19 01 02 10 13 3c 8d 02 10 13 3c 8f 85 01 53
>6078	80 0b 1a 01 02 10 13 3c 8d 85 00 80 0d 1b 01 0c
>6088	08 02 10 3c 8d 85 01 51 80 0f 1c 01 09 3c 8d 09
>6098	3c 8f 85 03 4d 49 53 80 0f 1d 01 13 11 3c 8d 13
>60a8	11 3c 8f 85 01 42 80 10 1e 01 12 02 0f 3c 8d 85
>60b8	05 52 41 4f 4b 51 80 11 1f 01 12 02 0f 3c 8d 12
>60c8	02 0f 3c 8f 11 10 3c 80 10 20 01 12 12 06 3c 8d
>60d8	12 12 06 3c 8f 09 3c 80 0b 21 01 13 0b 11 3c 8d
>60e8	85 00 80 17 22 01 09 12 08 14 14 3c 8d 09 12 08
>60f8	14 14 3c 8f 85 03 53 54 52 80 0f 23 01 13 11 3c
>6108	8d 13 11 3c 8f 02 06 3c 80 0f 24 01 13 05 13 01
>6118	12 3c 8d 85 02 4f 4a 80 0d 25 01 09 0e 01 14 3c
>6128	8d 85 01 47 80 0d 26 01 06 0d 11 3c 8d 85 02 50
>6138	48 80 09 27 01 09 3c 8d 85 00 80 13 28 01 13 11
>6148	3c 8d 13 11 3c 8f 85 05 55 44 47 49 45 80 0b 29
>6158	01 02 01 0a 3c 8d 85 00 80 0b 2a 01 0c 3c 8d 10
>6168	04 08 3c 80 0b 2b 01 09 3c 8d 02 09 02 3c 80 0f
>6178	2c 01 13 15 3c 8d 13 15 3c 8f 85 01 4a 80 0d 2d
>6188	01 04 09 04 0b 04 3c 8d 85 00 80 12 2e 01 13 05
>6198	13 01 12 3c 8d 85 05 45 41 49 43 4d 80 0a 2f 01
>61a8	07 3c 8d 13 11 3c 80 15 30 01 06 0d 07 15 10 3c
>61b8	8d 06 0d 07 15 10 3c 8f 85 01 54 80 0b 31 01 05
>61c8	15 0a 3c 8d 85 00 80 0f 32 01 02 06 3c 8d 02 06
>61d8	3c 8f 85 01 46 80 0c 33 01 09 0e 01 14 3c 8d 85
>61e8	00 80 13 34 01 05 15 0a 3c 8d 05 15 0a 3c 8f 85
>61f8	03 50 50 54 80 0e 35 01 13 11 3c 8d 85 04 53 4a
>6208	41 48 80 10 36 01 0c 3c 8d 0c 3c 8f 85 04 45 42
>6218	55 44 80 17 37 01 15 0b 15 0f 3c 8d 15 0b 15 0f
>6228	3c 8f 85 05 41 48 4b 46 4f 80 0c 38 01 0c 08 02
>6238	10 3c 8d 85 00 80 0c 39 01 09 0e 01 14 3c 8d 85
>6248	00 80 09 3a 01 07 3c 8d 85 00 80 0d 3b 01 09 0e
>6258	01 14 3c 8d 85 01 4f 80 09 3c 01 07 3c 8d 0c 3c
>6268	80 0d 3d 01 10 04 08 3c 8d 85 02 52 41 80 0d 3e
>6278	01 09 12 08 14 14 3c 8d 07 3c 80 09 3f 01 10 3c
>6288	8d 85 00 80 0d 40 01 02 06 3c 8d 85 03 46 4f 47
>6298	80 0b 41 01 10 04 08 3c 8d 85 00 80 0d 42 01 12
>62a8	02 0f 3c 8d 05 15 0a 3c 80 17 43 01 09 12 08 14
>62b8	14 3c 8d 09 12 08 14 14 3c 8f 01 0c 06 0d 3c 80
>62c8	0d 44 01 06 0d 11 3c 8d 12 12 06 3c 80 0d 45 01
>62d8	13 0b 11 3c 8d 0b 08 11 3c 80 16 46 01 15 0b 15
>62e8	0f 3c 8d 15 0b 15 0f 3c 8f 06 0d 07 15 10 3c 80
>62f8	09 47 01 10 3c 8d 85 00 80 0d 48 01 12 02 0f 3c
>6308	8d 85 02 50 4f 80 0b 49 01 13 0b 11 3c 8d 85 00
>6318	80 0a 4a 01 13 11 3c 8d 85 00 80 16 4b 01 0c 08
>6328	02 10 3c 8d 0c 08 02 10 3c 8f 04 09 04 0b 04 3c
>6338	80 0b 4c 01 10 04 08 3c 8d 85 00 80 10 4d 01 05
>6348	15 0a 3c 8d 05 15 0a 3c 8f 07 3c 80 09 4e 01 0c
>6358	3c 8d 85 00 80 13 4f 01 01 0c 06 0d 3c 8d 01 0c
>6368	06 0d 3c 8f 11 10 3c 80 10 50 01 13 11 3c 8d 13
>6378	11 3c 8f 12 12 06 3c 80 0b 51 01 06 10 07 3c 8d
>6388	85 00 80 16 52 01 02 0a 0c 10 12 3c 8d 02 0a 0c
>6398	10 12 3c 8f 02 09 02 3c 80 0f 53 01 0c 3c 8d 0c
>63a8	3c 8f 85 03 52 46 43 80 0f 54 01 09 0e 01 14 3c
>63b8	8d 85 03 4b 45 4a 80 0e 55 01 09 3c 8d 09 3c 8f
>63c8	85 02 49 4d 80 11 56 01 05 15 0a 3c 8d 05 15 0a
>63d8	3c 8f 85 01 4a 80 0b 57 01 02 06 3c 8d 85 01 45
>63e8	80 09 58 01 12 3c 8d 85 00 80 0f 59 01 07 3c 8d
>63f8	07 3c 8f 0c 08 02 10 3c 80 09 5a 01 09 3c 8d 85
>6408	00 80 11 5b 01 06 0d 07 15 10 3c 8d 85 04 4f 4e
>6418	54 50 80 09 5c 01 10 3c 8d 85 00 80 0f 5d 01 06
>6428	0d 07 15 10 3c 8d 02 10 13 3c 80 0f 5e 01 11 10
>6438	3c 8d 11 10 3c 8f 13 15 3c 80 0c 5f 01 0c 08 02
>6448	10 3c 8d 85 00 80 0e 60 01 12 3c 8d 85 05 4c 43
>6458	43 4d 53 80 10 61 01 12 12 06 3c 8d 12 12 06 3c
>6468	8f 07 3c 80 0a 62 01 0c 3c 8d 13 15 3c 80 0b 63
>6478	01 13 11 3c 8d 85 01 4e 80 0e 64 01 09 12 08 14
>6488	14 3c 8d 85 01 54 80 10 65 01 06 0d 11 3c 8d 85
>6498	05 46 55 4f 45 46 80 0b 66 01 02 10 13 3c 8d 85
>64a8	00 80 0e 67 01 02 06 3c 8d 85 04 41 52 4c 47 80
>64b8	12 68 01 11 10 3c 8d 11 10 3c 8f 09 12 08 14 14
>64c8	3c 80 0f 69 01 11 10 3c 8d 11 10 3c 8f 85 01 4e
>64d8	80 15 6a 01 06 0d 07 15 10 3c 8d 06 0d 07 15 10
>64e8	3c 8f 85 01 43 80 15 6b 01 13 05 13 01 12 3c 8d
>64f8	13 05 13 01 12 3c 8f 85 01 4e 80 0b 6c 01 12 12
>6508	06 3c 8d 85 00 80 0b 6d 01 12 12 06 3c 8d 85 00
>6518	80 0e 6e 01 12 3c 8d 12 3c 8f 10 04 08 3c 80 15
>6528	6f 01 15 0b 15 0f 3c 8d 15 0b 15 0f 3c 8f 85 03
>6538	42 4d 54 80 11 70 01 12 3c 8d 12 3c 8f 85 05 45
>6548	41 4f 4f 4e 80 17 71 01 15 0b 15 0f 3c 8d 15 0b
>6558	15 0f 3c 8f 85 05 49 50 4b 49 55 80 09 72 01 09
>6568	3c 8d 85 00 80 0a 73 01 12 3c 8d 85 01 45 80 0e
>6578	74 01 13 0b 11 3c 8d 0c 08 02 10 3c 80 0a 75 01
>6588	07 3c 8d 85 01 47 80 0c 76 01 12 3c 8d 85 03 51
>6598	4b 52 80 0f 77 01 06 0d 11 3c 8d 13 05 13 01 12
>65a8	3c 80 0b 78 01 09 3c 8d 02 09 02 3c 80 13 79 01
>65b8	06 0d 11 3c 8d 06 0d 11 3c 8f 09 0e 01 14 3c 80
>65c8	11 7a 01 0c 3c 8d 0c 3c 8f 85 05 4c 49 4c 49 42
>65d8	80 0b 7b 01 13 11 3c 8d 85 01 52 80 0e 7c 01 13
>65e8	11 3c 8d 04 09 04 0b 04 3c 80 0b 7d 01 12 12 06
>65f8	3c 8d 85 00 80 0b 7e 01 13 0b 11 3c 8d 85 00 80
>6608	0e 7f 01 13 15 3c 8d 13 15 3c 8f 0c 3c 80 0b 80
>6618	01 0b 08 11 3c 8d 07 3c 80 0c 81 01 01 0c 06 0d
>6628	3c 8d 85 00 80 0e 82 01 01 0c 06 0d 3c 8d 12 12
>6638	06 3c 80 13 83 01 02 06 3c 8d 02 06 3c 8f 85 05
>6648	47 43 45 48 4e 80 0e 84 01 06 0d 07 15 10 3c 8d
>6658	02 06 3c 80 12 85 01 0c 08 02 10 3c 8d 0c 08 02
>6668	10 3c 8f 12 3c 80 17 86 01 09 12 08 14 14 3c 8d
>6678	09 12 08 14 14 3c 8f 85 03 50 45 4a 80 0e 87 01
>6688	02 0a 0c 10 12 3c 8d 13 15 3c 80 16 88 01 04 09
>6698	04 0b 04 3c 8d 04 09 04 0b 04 3c 8f 06 0d 11 3c
>66a8	80 15 89 01 01 0c 06 0d 3c 8d 01 0c 06 0d 3c 8f
>66b8	85 03 4c 4c 43 80 0e 8a 01 07 3c 8d 07 3c 8f 12
>66c8	12 06 3c 80 0d 8b 01 02 0a 0c 10 12 3c 8d 85 00
>66d8	80 0d 8c 01 06 0d 11 3c 8d 12 02 0f 3c 80 0d 8d
>66e8	01 01 0c 06 0d 3c 8d 85 01 4c 80 0d 8e 01 04 09
>66f8	04 0b 04 3c 8d 0c 3c 80 10 8f 01 12 02 0f 3c 8d
>6708	12 02 0f 3c 8f 07 3c 80 10 90 01 10 3c 8d 10 3c
>6718	8f 04 09 04 0b 04 3c 80 0f 91 01 13 15 3c 8d 13
>6728	15 3c 8f 85 01 50 80 0b 92 01 07 3c 8d 02 09 02
>6738	3c 80 0e 93 01 13 05 13 01 12 3c 8d 85 01 53 80
>6748	0d 94 01 13 05 13 01 12 3c 8d 85 00 80 11 95 01
>6758	12 12 06 3c 8d 12 12 06 3c 8f 85 01 45 80 11 96
>6768	01 13 05 13 01 12 3c 8d 85 04 41 44 51 43 80 10
>6778	97 01 04 09 04 0b 04 3c 8d 85 03 4f 44 43 80 14
>6788	98 01 04 09 04 0b 04 3c 8d 04 09 04 0b 04 3c 8f
>6798	0c 3c 80 0f 99 01 0c 3c 8d 0c 3c 8f 15 0b 15 0f
>67a8	3c 80 0e 9a 01 04 09 04 0b 04 3c 8d 07 0b 3c 80
>67b8	0b 9b 01 12 3c 8d 85 02 51 41 80 11 9c 01 07 3c
>67c8	8d 07 3c 8f 85 05 4c 4a 41 41 44 80 18 9d 01 09
>67d8	12 08 14 14 3c 8d 09 12 08 14 14 3c 8f 85 04 44
>67e8	55 52 43 80 13 9e 01 12 12 06 3c 8d 12 12 06 3c
>67f8	8f 85 03 52 50 44 80 0d 9f 01 13 05 13 01 12 3c
>6808	8d 85 00 80 0c a0 01 0c 3c 8d 15 0b 15 0f 3c 80
>6818	0f a1 01 04 09 04 0b 04 3c 8d 10 04 08 3c 80 0b
>6828	a2 01 02 10 13 3c 8d 85 00 80 15 a3 01 05 15 0a
>6838	3c 8d 05 15 0a 3c 8f 85 05 4f 51 47 53 52 80 12
>6848	a4 01 02 01 0a 3c 8d 02 01 0a 3c 8f 12 02 0f 3c
>6858	80 0a a5 01 12 3c 8d 85 01 51 80 0c a6 01 0c 08
>6868	02 10 3c 8d 85 00 80 0c a7 01 10 3c 8d 85 03 43
>6878	45 44 80 11 a8 01 09 12 08 14 14 3c 8d 09 12 08
>6888	14 14 3c 80 09 a9 01 0c 3c 8d 85 00 80 16 aa 01
>6898	02 0a 0c 10 12 3c 8d 02 0a 0c 10 12 3c 8f 06 0d
>68a8	11 3c 80 0c ab 01 02 10 13 3c 8d 11 10 3c 80 0e
>68b8	ac 01 07 3c 8d 07 3c 8f 12 02 0f 3c 80 18 ad 01
>68c8	06 0d 07 15 10 3c 8d 06 0d 07 15 10 3c 8f 13 05
>68d8	13 01 12 3c 80 0e ae 01 13 05 13 01 12 3c 8d 85
>68e8	01 4b 80 0b af 01 05 15 0a 3c 8d 85 00 80 0c b0
>68f8	01 07 3c 8d 07 3c 8f 10 3c 80 0f b1 01 07 0b 3c
>6908	8d 85 05 47 50 41 45 4b 80 0d b2 01 12 3c 8d 09
>6918	12 08 14 14 3c 80 11 b3 01 04 09 04 0b 04 3c 8d
>6928	85 04 4d 44 43 54 80 10 b4 01 02 09 02 3c 8d 02
>6938	09 02 3c 8f 10 3c 80 0b b5 01 02 01 0a 3c 8d 85
>6948	00 80 0c b6 01 13 11 3c 8d 02 10 13 3c 80 10 b7
>6958	01 13 11 3c 8d 13 11 3c 8f 02 10 13 3c 80 0c b8
>6968	01 01 0c 06 0d 3c 8d 85 00 80 0e b9 01 01 0c 06
>6978	0d 3c 8d 02 10 13 3c 80 0f ba 01 02 0a 0c 10 12
>6988	3c 8d 85 02 4b 4c 80 0d bb 01 10 3c 8d 02 0a 0c
>6998	10 12 3c 80 0f bc 01 05 15 0a 3c 8d 09 12 08 14
>69a8	14 3c 80 11 bd 01 05 15 0a 3c 8d 05 15 0a 3c 8f
>69b8	85 01 55 80 09 be 01 07 3c 8d 10 3c 80 13 bf 01
>69c8	06 0d 11 3c 8d 06 0d 11 3c 8f 85 03 52 4e 4b 80
>69d8	0c c0 01 15 0b 15 0f 3c 8d 85 00 80 0d c1 01 05
>69e8	15 0a 3c 8d 85 02 51 44 80 09 c2 01 09 3c 8d 85
>69f8	00 80 0a c3 01 07 0b 3c 8d 85 00 80 0b c4 01 02
>6a08	10 13 3c 8d 0c 3c 80 0e c5 01 13 11 3c 8d 09 12
>6a18	08 14 14 3c 80 0d c6 01 09 12 08 14 14 3c 8d 85
>6a28	00 80 0c c7 01 06 10 07 3c 8d 85 01 55 80 0d c8
>6a38	01 06 0d 07 15 10 3c 8d 85 00 80 0f c9 01 05 15
>6a48	0a 3c 8d 13 05 13 01 12 3c 80 0c ca 01 02 01 0a
>6a58	3c 8d 85 01 4d 80 12 cb 01 0b 08 11 3c 8d 0b 08
>6a68	11 3c 8f 02 01 0a 3c 80 0d cc 01 04 09 04 0b 04
>6a78	3c 8d 09 3c 80 13 cd 01 01 0c 06 0d 3c 8d 01 0c
>6a88	06 0d 3c 8f 85 01 4a 80 0e ce 01 13 0b 11 3c 8d
>6a98	0c 08 02 10 3c 80 0c cf 01 02 09 02 3c 8d 07 0b
>6aa8	3c 80 0d d0 01 04 09 04 0b 04 3c 8d 85 00 80 12
>6ab8	d1 01 02 01 0a 3c 8d 02 01 0a 3c 8f 85 02 4d 50
>6ac8	80 0b d2 01 07 3c 8d 06 10 07 3c 80 10 d3 01 02
>6ad8	09 02 3c 8d 85 05 54 48 47 41 4b 80 09 d4 01 12
>6ae8	3c 8d 85 00 80 0c d5 01 12 12 06 3c 8d 13 11 3c
>6af8	80 16 d6 01 04 09 04 0b 04 3c 8d 04 09 04 0b 04
>6b08	3c 8f 13 0b 11 3c 80 0d d7 01 11 10 3c 8d 01 0c
>6b18	06 0d 3c 80 0d d8 01 01 0c 06 0d 3c 8d 85 01 49
>6b28	80 0d d9 01 10 04 08 3c 8d 12 02 0f 3c 80 10 da
>6b38	01 12 02 0f 3c 8d 12 02 0f 3c 8f 07 3c 80 0d db
>6b48	01 06 10 07 3c 8d 02 01 0a 3c 80 0b dc 01 12 12
>6b58	06 3c 8d 85 00 80 0e dd 01 06 0d 07 15 10 3c 8d
>6b68	85 01 42 80 17 de 01 09 12 08 14 14 3c 8d 09 12
>6b78	08 14 14 3c 8f 85 03 42 52 4c 80 10 df 01 07 0b
>6b88	3c 8d 07 0b 3c 8f 12 02 0f 3c 80 12 e0 01 09 12
>6b98	08 14 14 3c 8d 85 05 41 54 4c 4e 45 80 14 e1 01
>6ba8	12 12 06 3c 8d 12 12 06 3c 8f 04 09 04 0b 04 3c
>6bb8	80 13 e2 01 02 09 02 3c 8d 02 09 02 3c 8f 09 0e
>6bc8	01 14 3c 80 0e e3 01 04 09 04 0b 04 3c 8d 85 01
>6bd8	47 80 0e e4 01 10 04 08 3c 8d 85 03 48 54 50 80
>6be8	09 e5 01 0c 3c 8d 85 00 80 0c e6 01 02 09 02 3c
>6bf8	8d 85 01 4d 80 11 e7 01 02 10 13 3c 8d 02 10 13
>6c08	3c 8f 13 15 3c 80 11 e8 01 13 15 3c 8d 13 15 3c
>6c18	8f 85 03 51 50 4a 80 0b e9 01 02 01 0a 3c 8d 85
>6c28	00 80 0f ea 01 02 10 13 3c 8d 85 04 51 43 42 45
>6c38	80 14 eb 01 09 0e 01 14 3c 8d 09 0e 01 14 3c 8f
>6c48	85 02 44 54 80 0d ec 01 13 11 3c 8d 85 03 54 52
>6c58	52 80 11 ed 01 02 01 0a 3c 8d 02 01 0a 3c 8f 02
>6c68	06 3c 80 09 ee 01 09 3c 8d 85 00 80 0f ef 01 04
>6c78	09 04 0b 04 3c 8d 13 0b 11 3c 80 0d f0 01 04 09
>6c88	04 0b 04 3c 8d 09 3c 80 0e f1 01 10 3c 8d 85 05
>6c98	49 4a 45 41 4a 80 0a f2 01 13 15 3c 8d 0c 3c 80
>6ca8	0d f3 01 06 10 07 3c 8d 02 09 02 3c 80 0d f4 01
>6cb8	02 0a 0c 10 12 3c 8d 85 00 80 13 f5 01 15 0b 15
>6cc8	0f 3c 8d 15 0b 15 0f 3c 8f 85 01 53 80 19 f6 01
>6cd8	04 09 04 0b 04 3c 8d 04 09 04 0b 04 3c 8f 85 05
>6ce8	52 4f 47 48 4a 80 14 f7 01 12 12 06 3c 8d 12 12
>6cf8	06 3c 8f 85 04 53 52 50 4f 80 0f f8 01 0b 08 11
>6d08	3c 8d 85 04 4b 48 52 4e 80 09 f9 01 07 3c 8d 09
>6d18	3c 80 15 fa 01 06 0d 11 3c 8d 06 0d 11 3c 8f 85
>6d28	05 44 53 4a 51 4d 80 0a fb 01 07 0b 3c 8d 85 00
>6d38	80 0f fc 01 09 0e 01 14 3c 8d 85 03 4e 45 43 80
>6d48	0a fd 01 07 0b 3c 8d 85 00 80 12 fe 01 06 10 07
>6d58	3c 8d 06 10 07 3c 8f 02 01 0a 3c 80 0e ff 01 13
>6d68	11 3c 8d 85 04 52 4e 4c 47 80 0c 00 02 02 10 13
>6d78	3c 8d 85 01 4a 80 0d 01 02 15 0b 15 0f 3c 8d 85
>6d88	01 4a 80 11 02 02 02 09 02 3c 8d 02 09 02 3c 8f
>6d98	11 10 3c 80 15 03 02 06 0d 11 3c 8d 06 0d 11 3c
>6da8	8f 85 05 50 51 47 41 4a 80 0d 04 02 15 0b 15 0f
>6db8	3c 8d 85 01 42 80 0d 05 02 06 10 07 3c 8d 02 09
>6dc8	02 3c 80 15 06 02 12 12 06 3c 8d 12 12 06 3c 8f
>6dd8	85 05 47 4a 54 45 4f 80 18 07 02 04 09 04 0b 04
>6de8	3c 8d 04 09 04 0b 04 3c 8f 85 04 51 44 51 4f 80
>6df8	13 08 02 12 12 06 3c 8d 12 12 06 3c 8f 85 03 46
>6e08	4d 4b 80 10 09 02 02 10 13 3c 8d 02 10 13 3c 8f
>6e18	10 3c 80 19 0a 02 13 05 13 01 12 3c 8d 13 05 13
>6e28	01 12 3c 8f 85 05 50 48 4d 4e 43 80 11 0b 02 05
>6e38	15 0a 3c 8d 05 15 0a 3c 8f 85 01 4b 80 0e 0c 02
>6e48	09 3c 8d 85 05 46 42 55 4d 43 80 11 0d 02 12 3c
>6e58	8d 12 3c 8f 85 05 44 52 4a 49 50 80 18 0e 02 13
>6e68	05 13 01 12 3c 8d 13 05 13 01 12 3c 8f 85 04 4d
>6e78	41 50 4e 80 17 0f 02 09 12 08 14 14 3c 8d 09 12
>6e88	08 14 14 3c 8f 85 03 48 4b 54 80 14 10 02 10 04
>6e98	08 3c 8d 10 04 08 3c 8f 13 05 13 01 12 3c 80 0c
>6ea8	11 02 0c 08 02 10 3c 8d 85 00 80 0b 12 02 13 15
>6eb8	3c 8d 85 01 4c 80 10 13 02 13 15 3c 8d 13 15 3c
>6ec8	8f 85 02 4f 4b 80 13 14 02 07 0b 3c 8d 07 0b 3c
>6ed8	8f 85 05 41 55 4f 4b 4b 80 15 15 02 02 01 0a 3c
>6ee8	8d 02 01 0a 3c 8f 85 05 45 50 49 51 4b 80 0a 16
>6ef8	02 13 15 3c 8d 85 00 80 0d 17 02 13 05 13 01 12
>6f08	3c 8d 85 00 80 0f 18 02 02 10 13 3c 8d 06 0d 07
>6f18	15 10 3c 80 0b 19 02 06 0d 11 3c 8d 85 00 80 10
>6f28	1a 02 10 04 08 3c 8d 10 04 08 3c 8f 09 3c 80 0d
>6f38	1b 02 0c 3c 8d 0c 3c 8f 85 01 4e 80 0a 1c 02 13
>6f48	11 3c 8d 85 00 80 10 1d 02 02 09 02 3c 8d 02 09
>6f58	02 3c 8f 07 3c 80 0b 1e 02 10 04 08 3c 8d 85 00
>6f68	80 0b 1f 02 13 0b 11 3c 8d 85 00 80 0d 20 02 02
>6f78	0a 0c 10 12 3c 8d 12 3c 80 0a 21 02 13 15 3c 8d
>6f88	85 00 80 13 22 02 07 0b 3c 8d 07 0b 3c 8f 85 05
>6f98	4f 4c 54 48 50 80 0d 23 02 06 0d 11 3c 8d 85 02
>6fa8	52 49 80 10 24 02 13 0b 11 3c 8d 85 05 43 49 45
>6fb8	52 46 80 0d 25 02 12 3c 8d 12 3c 8f 02 06 3c 80
>6fc8	0f 26 02 13 15 3c 8d 13 15 3c 8f 02 06 3c 80 0e
>6fd8	27 02 02 10 13 3c 8d 85 03 41 54 43 80 0a 28 02
>6fe8	07 0b 3c 8d 85 00 80 09 29 02 10 3c 8d 85 00 80
>6ff8	0a 2a 02 07 0b 3c 8d 85 00 80 0c 2b 02 09 3c 8d
>7008	09 3c 8f 10 3c 80 0a 2c 02 13 11 3c 8d 85 00 80
>7018	10 2d 02 07 0b 3c 8d 07 0b 3c 8f 02 01 0a 3c 80
>7028	14 2e 02 09 0e 01 14 3c 8d 09 0e 01 14 3c 8f 02
>7038	10 13 3c 80 0e 2f 02 13 15 3c 8d 13 15 3c 8f 10
>7048	3c 80 13 30 02 15 0b 15 0f 3c 8d 15 0b 15 0f 3c
>7058	8f 07 0b 3c 80 0d 31 02 04 09 04 0b 04 3c 8d 85
>7068	00 80 15 32 02 05 15 0a 3c 8d 05 15 0a 3c 8f 85
>7078	05 51 46 48 4e 46 80 14 33 02 06 10 07 3c 8d 06
>7088	10 07 3c 8f 13 05 13 01 12 3c 80 15 34 02 01 0c
>7098	06 0d 3c 8d 01 0c 06 0d 3c 8f 85 03 53 54 55 80
>70a8	10 35 02 12 12 06 3c 8d 85 05 4f 48 42 4f 47 80
>70b8	0e 36 02 09 0e 01 14 3c 8d 02 10 13 3c 80 0b 37
>70c8	02 02 01 0a 3c 8d 85 00 80 0c 38 02 01 0c 06 0d
>70d8	3c 8d 85 00 80 0b 39 02 0b 08 11 3c 8d 85 00 80
>70e8	16 3a 02 09 0e 01 14 3c 8d 09 0e 01 14 3c 8f 85
>70f8	04 4d 54 50 4f 80 0b 3b 02 10 04 08 3c 8d 85 00
>7108	80 0e 3c 02 13 0b 11 3c 8d 85 03 43 4b 43 80 12
>7118	3d 02 06 0d 11 3c 8d 06 0d 11 3c 8f 85 02 4e 46
>7128	80 10 3e 02 0c 08 02 10 3c 8d 04 09 04 0b 04 3c
>7138	80 16 3f 02 09 12 08 14 14 3c 8d 09 12 08 14 14
>7148	3c 8f 85 02 43 49 80 14 40 02 10 04 08 3c 8d 10
>7158	04 08 3c 8f 85 04 47 4b 47 51 80 0b 41 02 12 12
>7168	06 3c 8d 85 00 80 0d 42 02 06 0d 11 3c 8d 02 10
>7178	13 3c 80 0b 43 02 13 15 3c 8d 85 01 49 80 10 44
>7188	02 02 06 3c 8d 02 06 3c 8f 02 01 0a 3c 80 0b 45
>7198	02 02 06 3c 8d 07 0b 3c 80 0a 46 02 07 0b 3c 8d
>71a8	85 00 80 11 47 02 02 09 02 3c 8d 02 09 02 3c 8f
>71b8	85 01 45 80 0a 48 02 11 10 3c 8d 85 00 80 11 49
>71c8	02 0b 08 11 3c 8d 0b 08 11 3c 8f 85 01 4d 80 15
>71d8	4a 02 04 09 04 0b 04 3c 8d 04 09 04 0b 04 3c 8f
>71e8	85 01 4e 80 14 4b 02 01 0c 06 0d 3c 8d 01 0c 06
>71f8	0d 3c 8f 85 02 44 4b 80 0e 4c 02 13 15 3c 8d 06
>7208	0d 07 15 10 3c 80 0d 4d 02 12 3c 8d 85 04 4a 4c
>7218	45 51 80 0b 4e 02 0b 08 11 3c 8d 85 00 80 0c 4f
>7228	02 13 15 3c 8d 12 12 06 3c 80 0d 50 02 02 0a 0c
>7238	10 12 3c 8d 85 00 80 0e 51 02 04 09 04 0b 04 3c
>7248	8d 13 15 3c 80 0d 52 02 0c 08 02 10 3c 8d 02 06
>7258	3c 80 11 53 02 02 06 3c 8d 02 06 3c 8f 09 0e 01
>7268	14 3c 80 14 54 02 12 12 06 3c 8d 12 12 06 3c 8f
>7278	13 05 13 01 12 3c 80 0e 55 02 10 3c 8d 10 3c 8f
>7288	85 02 4a 53 80 0f 56 02 13 15 3c 8d 85 05 43 52
>7298	44 41 4a 80 16 57 02 02 0a 0c 10 12 3c 8d 02 0a
>72a8	0c 10 12 3c 8f 85 02 47 42 80 15 58 02 13 05 13
>72b8	01 12 3c 8d 13 05 13 01 12 3c 8f 85 01 4d 80 0e
>72c8	59 02 10 04 08 3c 8d 09 0e 01 14 3c 80 19 5a 02
>72d8	13 05 13 01 12 3c 8d 13 05 13 01 12 3c 8f 85 05
>72e8	49 4e 4a 4b 4b 80 14 5b 02 0c 08 02 10 3c 8d 0c
>72f8	08 02 10 3c 8f 06 0d 11 3c 80 0b 5c 02 07 0b 3c
>7308	8d 85 01 52 80 0c 5d 02 0c 08 02 10 3c 8d 85 00
>7318	80 13 5e 02 01 0c 06 0d 3c 8d 01 0c 06 0d 3c 8f
>7328	13 15 3c 80 0d 5f 02 06 10 07 3c 8d 12 02 0f 3c
>7338	80 0e 60 02 15 0b 15 0f 3c 8d 85 02 4e 4a 80 09
>7348	61 02 07 3c 8d 85 00 80 0e 62 02 02 06 3c 8d 13
>7358	05 13 01 12 3c 80 15 63 02 13 05 13 01 12 3c 8d
>7368	13 05 13 01 12 3c 8f 85 01 4b 80 0d 64 02 0c 3c
>7378	8d 04 09 04 0b 04 3c 80 0b 65 02 12 12 06 3c 8d
>7388	85 00 80 17 66 02 09 0e 01 14 3c 8d 09 0e 01 14
>7398	3c 8f 85 05 42 4d 45 44 4a 80 10 67 02 0b 08 11
>73a8	3c 8d 0b 08 11 3c 8f 12 3c 80 0b 68 02 06 0d 11
>73b8	3c 8d 85 00 80 0a 69 02 02 06 3c 8d 85 00 80 10
>73c8	6a 02 07 0b 3c 8d 07 0b 3c 8f 02 09 02 3c 80 0e
>73d8	6b 02 07 0b 3c 8d 07 0b 3c 8f 09 3c 80 0f 6c 02
>73e8	13 05 13 01 12 3c 8d 85 02 49 41 80 0c 6d 02 11
>73f8	10 3c 8d 02 01 0a 3c 80 12 6e 02 13 0b 11 3c 8d
>7408	13 0b 11 3c 8f 85 02 47 4b 80 0e 6f 02 01 0c 06
>7418	0d 3c 8d 05 15 0a 3c 80 0a 70 02 12 3c 8d 85 01
>7428	42 80 11 71 02 10 04 08 3c 8d 10 04 08 3c 8f 85
>7438	01 55 80 10 72 02 02 0a 0c 10 12 3c 8d 85 03 54
>7448	4c 53 80 0d 73 02 06 0d 07 15 10 3c 8d 85 00 80
>7458	0e 74 02 12 12 06 3c 8d 85 03 42 46 48 80 0b 75
>7468	02 0c 3c 8d 06 10 07 3c 80 13 76 02 13 0b 11 3c
>7478	8d 13 0b 11 3c 8f 85 03 41 44 51 80 12 77 02 02
>7488	01 0a 3c 8d 02 01 0a 3c 8f 13 0b 11 3c 80 0f 78
>7498	02 02 0a 0c 10 12 3c 8d 05 15 0a 3c 80 0d 79 02
>74a8	12 12 06 3c 8d 06 0d 11 3c 80 09 7a 02 12 3c 8d
>74b8	85 00 80 11 7b 02 10 3c 8d 10 3c 8f 85 05 51 4c
>74c8	43 4f 4c 80 19 7c 02 09 12 08 14 14 3c 8d 09 12
>74d8	08 14 14 3c 8f 85 05 52 53 50 4b 4a 80 10 7d 02
>74e8	02 09 02 3c 8d 02 09 02 3c 8f 09 3c 80 0a 7e 02
>74f8	07 0b 3c 8d 85 00 80 0a 7f 02 02 06 3c 8d 85 00
>7508	80 16 80 02 09 12 08 14 14 3c 8d 09 12 08 14 14
>7518	3c 8f 85 02 4c 4f 80 0d 81 02 02 01 0a 3c 8d 12
>7528	12 06 3c 80 0b 82 02 13 0b 11 3c 8d 85 00 80 09
>7538	83 02 10 3c 8d 85 00 80 0b 84 02 02 09 02 3c 8d
>7548	85 00 80 0d 85 02 06 0d 11 3c 8d 85 02 49 51 80
>7558	0e 86 02 02 0a 0c 10 12 3c 8d 13 11 3c 80 10 87
>7568	02 13 11 3c 8d 13 11 3c 8f 85 02 4a 49 80 16 88
>7578	02 06 0d 07 15 10 3c 8d 06 0d 07 15 10 3c 8f 85
>7588	02 55 52 80 12 89 02 07 0b 3c 8d 07 0b 3c 8f 85
>7598	04 4e 4f 50 43 80 0a 8a 02 13 11 3c 8d 85 00 80
>75a8	10 8b 02 09 0e 01 14 3c 8d 06 0d 07 15 10 3c 80
>75b8	0a 8c 02 09 3c 8d 02 06 3c 80 09 8d 02 12 3c 8d
>75c8	85 00 80 0c 8e 02 0b 08 11 3c 8d 13 11 3c 80 0a
>75d8	8f 02 11 10 3c 8d 85 00 80 0e 90 02 02 06 3c 8d
>75e8	06 0d 07 15 10 3c 80 0d 91 02 12 12 06 3c 8d 12
>75f8	12 06 3c 80 0e 92 02 13 05 13 01 12 3c 8d 11 10
>7608	3c 80 0f 93 02 13 15 3c 8d 13 15 3c 8f 11 10 3c
>7618	80 12 94 02 0c 08 02 10 3c 8d 0c 08 02 10 3c 8f
>7628	12 3c 80 12 95 02 0b 08 11 3c 8d 0b 08 11 3c 8f
>7638	0b 08 11 3c 80 0d 96 02 06 0d 11 3c 8d 02 01 0a
>7648	3c 80 0e 97 02 02 09 02 3c 8d 15 0b 15 0f 3c 80
>7658	12 98 02 07 0b 3c 8d 07 0b 3c 8f 09 12 08 14 14
>7668	3c 80 10 99 02 02 10 13 3c 8d 02 10 13 3c 8f 10
>7678	3c 80 14 9a 02 09 0e 01 14 3c 8d 09 0e 01 14 3c
>7688	8f 85 02 55 53 80 0d 9b 02 07 0b 3c 8d 85 03 55
>7698	4d 48 80 11 9c 02 02 01 0a 3c 8d 02 01 0a 3c 8f
>76a8	85 01 4b 80 0b 9d 02 12 12 06 3c 8d 85 00 80 0c
>76b8	9e 02 09 0e 01 14 3c 8d 85 00 80 14 9f 02 15 0b
>76c8	15 0f 3c 8d 15 0b 15 0f 3c 8f 12 12 06 3c 80 0e
>76d8	a0 02 04 09 04 0b 04 3c 8d 02 06 3c 80 0c a1 02
>76e8	01 0c 06 0d 3c 8d 85 00 80 10 a2 02 10 04 08 3c
>76f8	8d 85 05 50 51 41 4b 4f 80 09 a3 02 07 3c 8d 85
>7708	00 80 0e a4 02 12 3c 8d 85 05 47 51 42 42 55 80
>7718	13 a5 02 13 11 3c 8d 13 11 3c 8f 85 05 53 51 51
>7728	43 43 80 0e a6 02 10 04 08 3c 8d 85 03 47 44 54
>7738	80 0b a7 02 02 01 0a 3c 8d 85 00 80 09 a8 02 0c
>7748	3c 8d 85 00 80 0d a9 02 09 0e 01 14 3c 8d 85 01
>7758	4e 80 12 aa 02 09 0e 01 14 3c 8d 09 0e 01 14 3c
>7768	8f 07 3c 80 0d ab 02 06 0d 07 15 10 3c 8d 85 00
>7778	80 10 ac 02 13 0b 11 3c 8d 13 0b 11 3c 8f 09 3c
>7788	80 0e ad 02 02 01 0a 3c 8d 09 0e 01 14 3c 80 16
>7798	ae 02 02 0a 0c 10 12 3c 8d 02 0a 0c 10 12 3c 8f
>77a8	02 10 13 3c 80 14 af 02 13 0b 11 3c 8d 13 0b 11
>77b8	3c 8f 85 04 4f 4b 48 48 80 0b b0 02 09 3c 8d 85
>77c8	02 48 54 80 13 b1 02 02 01 0a 3c 8d 02 01 0a 3c
>77d8	8f 85 03 49 4f 44 80 12 b2 02 02 10 13 3c 8d 02
>77e8	10 13 3c 8f 13 0b 11 3c 80 0f b3 02 07 0b 3c 8d
>77f8	85 05 4f 46 42 53 4a 80 0f b4 02 02 06 3c 8d 85
>7808	05 50 4c 55 4a 52 80 0e b5 02 12 12 06 3c 8d 85
>7818	03 49 46 50 80 10 b6 02 12 02 0f 3c 8d 85 05 42
>7828	48 52 45 4b 80 0d b7 02 07 3c 8d 07 3c 8f 85 01
>7838	45 80 10 b8 02 06 0d 11 3c 8d 06 0d 11 3c 8f 09
>7848	3c 80 0f b9 02 01 0c 06 0d 3c 8d 01 0c 06 0d 3c
>7858	80 11 ba 02 15 0b 15 0f 3c 8d 85 05 4c 45 4d 47
>7868	4c 80 0f bb 02 09 12 08 14 14 3c 8d 0b 08 11 3c
>7878	80 10 bc 02 07 0b 3c 8d 07 0b 3c 8f 85 02 4e 4b
>7888	80 0e bd 02 09 3c 8d 09 3c 8f 05 15 0a 3c 80 11
>7898	be 02 07 3c 8d 07 3c 8f 85 05 47 50 50 4b 4a 80
>78a8	0d bf 02 04 09 04 0b 04 3c 8d 07 3c 80 0d c0 02
>78b8	06 0d 11 3c 8d 13 0b 11 3c 80 14 c1 02 10 04 08
>78c8	3c 8d 10 04 08 3c 8f 85 04 47 52 55 4f 80 12 c2
>78d8	02 02 09 02 3c 8d 02 09 02 3c 8f 85 02 54 4b 80
>78e8	0a c3 02 07 0b 3c 8d 85 00 80 0f c4 02 06 0d 11
>78f8	3c 8d 85 04 49 49 49 53 80 0d c5 02 09 12 08 14
>7908	14 3c 8d 85 00 80 09 c6 02 12 3c 8d 07 3c 80 0a
>7918	c7 02 13 11 3c 8d 85 00 80 0d c8 02 05 15 0a 3c
>7928	8d 85 02 41 43 80 0b c9 02 06 0d 11 3c 8d 85 00
>7938	80 0f ca 02 12 12 06 3c 8d 85 04 4c 4c 47 55 80
>7948	10 cb 02 13 15 3c 8d 13 15 3c 8f 05 15 0a 3c 80
>7958	16 cc 02 02 0a 0c 10 12 3c 8d 02 0a 0c 10 12 3c
>7968	8f 85 02 51 4f 80 0e cd 02 02 01 0a 3c 8d 85 03
>7978	4d 47 4c 80 12 ce 02 02 09 02 3c 8d 02 09 02 3c
>7988	8f 85 02 44 42 80 12 cf 02 06 10 07 3c 8d 06 10
>7998	07 3c 8f 85 02 44 4a 80 16 d0 02 06 0d 07 15 10
>79a8	3c 8d 06 0d 07 15 10 3c 8f 02 09 02 3c 80 0d d1
>79b8	02 02 06 3c 8d 85 03 4c 4c 53 80 0d d2 02 09 12
>79c8	08 14 14 3c 8d 85 00 80 12 d3 02 02 09 02 3c 8d
>79d8	02 09 02 3c 8f 12 12 06 3c 80 10 d4 02 02 09 02
>79e8	3c 8d 85 05 54 55 4e 54 55 80 10 d5 02 07 3c 8d
>79f8	07 3c 8f 02 0a 0c 10 12 3c 80 13 d6 02 02 01 0a
>7a08	3c 8d 02 01 0a 3c 8f 85 03 48 4a 4f 80 0e d7 02
>7a18	0b 08 11 3c 8d 85 03 4e 43 42 80 0d d8 02 02 06
>7a28	3c 8d 85 03 44 4d 51 80 12 d9 02 02 09 02 3c 8d
>7a38	02 09 02 3c 8f 06 10 07 3c 80 13 da 02 06 0d 11
>7a48	3c 8d 06 0d 11 3c 8f 85 03 52 4e 50 80 0d db 02
>7a58	12 12 06 3c 8d 85 02 4c 4b 80 0f dc 02 09 12 08
>7a68	14 14 3c 8d 13 0b 11 3c 80 0e dd 02 13 05 13 01
>7a78	12 3c 8d 85 01 52 80 09 de 02 07 3c 8d 85 00 80
>7a88	0f df 02 12 3c 8d 12 3c 8f 85 03 51 4d 43 80 15
>7a98	e0 02 01 0c 06 0d 3c 8d 01 0c 06 0d 3c 8f 85 03
>7aa8	44 4c 4f 80 17 e1 02 04 09 04 0b 04 3c 8d 04 09
>7ab8	04 0b 04 3c 8f 85 03 49 48 55 80 0c e2 02 02 01
>7ac8	0a 3c 8d 11 10 3c 80 0f e3 02 09 0e 01 14 3c 8d
>7ad8	01 0c 06 0d 3c 80 10 e4 02 06 0d 07 15 10 3c 8d
>7ae8	85 03 53 44 51 80 11 e5 02 12 3c 8d 12 3c 8f 85
>7af8	05 42 4f 4f 51 4d 80 14 e6 02 12 02 0f 3c 8d 12
>7b08	02 0f 3c 8f 85 04 46 49 47 55 80 0b e7 02 02 09
>7b18	02 3c 8d 85 00 80 11 e8 02 09 12 08 14 14 3c 8d
>7b28	85 04 4e 54 4b 42 80 0f e9 02 0c 08 02 10 3c 8d
>7b38	15 0b 15 0f 3c 80 11 ea 02 07 0b 3c 8d 07 0b 3c
>7b48	8f 85 03 43 4c 54 80 0e eb 02 05 15 0a 3c 8d 01
>7b58	0c 06 0d 3c 80 0b ec 02 02 10 13 3c 8d 12 3c 80
>7b68	0f ed 02 06 0d 07 15 10 3c 8d 85 02 4f 52 80 16
>7b78	ee 02 13 05 13 01 12 3c 8d 13 05 13 01 12 3c 8f
>7b88	10 04 08 3c 80 15 ef 02 12 12 06 3c 8d 12 12 06
>7b98	3c 8f 85 05 4d 42 49 50 55 80 14 f0 02 01 0c 06
>7ba8	0d 3c 8d 01 0c 06 0d 3c 8f 02 10 13 3c 80 0e f1
>7bb8	02 02 09 02 3c 8d 85 03 45 4b 51 80 0b f2 02 10
>7bc8	04 08 3c 8d 85 00 80 0f f3 02 09 3c 8d 09 3c 8f
>7bd8	0c 08 02 10 3c 80 15 f4 02 06 10 07 3c 8d 06 10
>7be8	07 3c 8f 85 05 4d 46 46 4b 4a 80 0d f5 02 02 0a
>7bf8	0c 10 12 3c 8d 85 00 80 0c f6 02 15 0b 15 0f 3c
>7c08	8d 85 00 80 0f f7 02 10 04 08 3c 8d 09 12 08 14
>7c18	14 3c 80 0d f8 02 01 0c 06 0d 3c 8d 11 10 3c 80
>7c28	0a f9 02 07 0b 3c 8d 85 00 80 0c fa 02 09 0e 01
>7c38	14 3c 8d 85 00 80 12 fb 02 02 10 13 3c 8d 02 10
>7c48	13 3c 8f 02 09 02 3c 80 0a fc 02 02 06 3c 8d 85
>7c58	00 80 0f fd 02 09 3c 8d 09 3c 8f 85 03 44 4e 4d
>7c68	80 0b fe 02 02 09 02 3c 8d 85 00 80 0d ff 02 06
>7c78	10 07 3c 8d 02 09 02 3c 80 0e 00 03 13 11 3c 8d
>7c88	85 04 50 49 44 43 80 11 01 03 06 10 07 3c 8d 06
>7c98	10 07 3c 8f 85 01 44 80 0f 02 03 07 0b 3c 8d 85
>7ca8	05 41 50 48 41 4c 80 0d 03 03 02 06 3c 8d 15 0b
>7cb8	15 0f 3c 80 0d 04 03 0b 08 11 3c 8d 85 02 4a 4b
>7cc8	80 0c 05 03 01 0c 06 0d 3c 8d 85 00 80 0e 06 03
>7cd8	15 0b 15 0f 3c 8d 02 09 02 3c 80 10 07 03 06 0d
>7ce8	07 15 10 3c 8d 85 03 4b 4d 44 80 11 08 03 02 01
>7cf8	0a 3c 8d 02 01 0a 3c 8f 85 01 4d 80 10 09 03 12
>7d08	3c 8d 12 3c 8f 85 04 4f 42 4b 44 80 10 0a 03 13
>7d18	11 3c 8d 13 11 3c 8f 06 0d 11 3c 80 19 0b 03 09
>7d28	12 08 14 14 3c 8d 09 12 08 14 14 3c 8f 85 05 45
>7d38	4d 4f 42 51 80 0b 0c 03 13 0b 11 3c 8d 85 00 80
>7d48	0d 0d 03 15 0b 15 0f 3c 8d 13 15 3c 80 0c 0e 03
>7d58	13 15 3c 8d 0b 08 11 3c 80 0a 0f 03 07 0b 3c 8d
>7d68	85 00 80 16 10 03 02 0a 0c 10 12 3c 8d 02 0a 0c
>7d78	10 12 3c 8f 85 02 43 54 80 0f 11 03 07 3c 8d 07
>7d88	3c 8f 85 03 4b 4d 4f 80 09 12 03 0c 3c 8d 85 00
>7d98	80 0d 13 03 06 0d 11 3c 8d 13 0b 11 3c 80 0c 14
>7da8	03 11 10 3c 8d 85 02 55 4c 80 12 15 03 12 02 0f
>7db8	3c 8d 12 02 0f 3c 8f 05 15 0a 3c 80 14 16 03 01
>7dc8	0c 06 0d 3c 8d 01 0c 06 0d 3c 8f 12 12 06 3c 80
>7dd8	11 17 03 07 0b 3c 8d 07 0b 3c 8f 85 03 53 45 49
>7de8	80 10 18 03 12 12 06 3c 8d 12 12 06 3c 8f 07 3c
>7df8	80 0c 19 03 13 11 3c 8d 05 15 0a 3c 80 0e 1a 03
>7e08	04 09 04 0b 04 3c 8d 07 0b 3c 80 16 1b 03 13 05
>7e18	13 01 12 3c 8d 13 05 13 01 12 3c 8f 06 0d 11 3c
>7e28	80 0a 1c 03 13 11 3c 8d 12 3c 80 11 1d 03 07 0b
>7e38	3c 8d 07 0b 3c 8f 01 0c 06 0d 3c 80 0d 1e 03 0c
>7e48	3c 8d 0c 3c 8f 85 01 44 80 15 1f 03 0c 08 02 10
>7e58	3c 8d 0c 08 02 10 3c 8f 85 03 48 4e 4f 80 12 20
>7e68	03 13 15 3c 8d 13 15 3c 8f 85 04 4e 4e 4c 4a 80
>7e78	0d 21 03 06 0d 11 3c 8d 12 12 06 3c 80 0b 22 03
>7e88	02 09 02 3c 8d 85 00 80 0b 23 03 12 3c 8d 05 15
>7e98	0a 3c 80 15 24 03 10 04 08 3c 8d 10 04 08 3c 8f
>7ea8	85 05 4e 48 46 52 4c 80 09 25 03 10 3c 8d 85 00
>7eb8	80 0b 26 03 0c 3c 8d 85 02 54 4f 80 10 27 03 05
>7ec8	15 0a 3c 8d 05 15 0a 3c 8f 0c 3c 80 12 28 03 11
>7ed8	10 3c 8d 11 10 3c 8f 13 05 13 01 12 3c 80 13 29
>7ee8	03 06 10 07 3c 8d 06 10 07 3c 8f 09 0e 01 14 3c
>7ef8	80 0e 2a 03 06 0d 07 15 10 3c 8d 11 10 3c 80 0c
>7f08	2b 03 0c 08 02 10 3c 8d 85 00 80 13 2c 03 13 15
>7f18	3c 8d 13 15 3c 8f 85 05 47 48 43 47 4e 80 16 2d
>7f28	03 15 0b 15 0f 3c 8d 15 0b 15 0f 3c 8f 09 12 08
>7f38	14 14 3c 80 15 2e 03 09 12 08 14 14 3c 8d 09 12
>7f48	08 14 14 3c 8f 85 01 53 80 0b 2f 03 02 10 13 3c
>7f58	8d 85 00 80 15 30 03 01 0c 06 0d 3c 8d 01 0c 06
>7f68	0d 3c 8f 85 03 4f 46 4a 80 13 31 03 01 0c 06 0d
>7f78	3c 8d 01 0c 06 0d 3c 8f 13 11 3c 80 0f 32 03 09
>7f88	12 08 14 14 3c 8d 06 10 07 3c 80 0a 33 03 13 11
>7f98	3c 8d 85 00 80 11 34 03 13 0b 11 3c 8d 13 0b 11
>7fa8	3c 8f 02 06 3c 80 17 35 03 02 0a 0c 10 12 3c 8d
>7fb8	02 0a 0c 10 12 3c 8f 09 0e 01 14 3c 80 0e 36 03
>7fc8	01 0c 06 0d 3c 8d 02 01 0a 3c 80 0e 37 03 07 3c
>7fd8	8d 85 05 4e 43 55 53 47 80 11 38 03 02 09 02 3c
>7fe8	8d 02 09 02 3c 8f 85 01 48 80 0c 39 03 0c 08 02
>7ff8	10 3c 8d 85 00 80 0e 3a 03 07 3c 8d 07 3c 8f 85
>8008	02 49 48 80 0b 3b 03 07 0b 3c 8d 07 0b 3c 80 0d
>8018	3c 03 05 15 0a 3c 8d 02 10 13 3c 80 09 3d 03 10
>8028	3c 8d 85 00 80 10 3e 03 02 10 13 3c 8d 85 05 4c
>8038	45 4c 55 45 80 0c 3f 03 10 3c 8d 10 3c 8f 07 3c
>8048	80 0f 40 03 02 10 13 3c 8d 09 12 08 14 14 3c 80
>8058	0e 41 03 09 3c 8d 09 3c 8f 06 0d 11 3c 80 0b 42
>8068	03 06 10 07 3c 8d 85 00 80 10 43 03 13 11 3c 8d
>8078	13 11 3c 8f 85 02 4e 53 80 09 44 03 0c 3c 8d 85
>8088	00 80 0b 45 03 13 0b 11 3c 8d 85 00 80 10 46 03
>8098	06 0d 07 15 10 3c 8d 85 03 47 4f 41 80 15 47 03
>80a8	0c 08 02 10 3c 8d 0c 08 02 10 3c 8f 85 03 46 42
>80b8	54 80 0c 48 03 d8 13 0b 11 3c 8d 85 00 80 0a 49
>80c8	03 d8 0c 3c 8d 85 00 80 18 4a 03 d8 12 02 0f 3c
>80d8	8d 85 0c 42 48 52 45 4b 46 49 47 55 44 4c 4f 80
>80e8	15 4b 03 d8 11 10 3c 8d 85 0a 55 4c 52 47 44 54
>80f8	47 52 55 4f 80 11 4c 03 d8 10 3c 8d 85 07 4e 43
>8108	55 53 47 49 48 80 0d 4d 03 d8 02 09 02 3c 8d 85
>8118	01 48 80 10 4e 03 d8 02 0a 0c 10 12 3c 8d 85 02
>8128	43 54 80 10 4f 03 d8 0c 08 02 10 3c 8d 85 03 46
>8138	42 54 80 15 50 03 d8 07 0b 3c 8d 85 0a 53 45 49
>8148	4c 4b 4d 42 49 50 55 80 1d 51 03 d8 15 0b 15 0f
>8158	3c 8d 85 10 43 52 44 41 4a 41 43 4e 54 4b 42 45
>8168	4d 4f 42 51 80 25 52 03 d8 09 3c 8d 85 1b 48 54
>8178	4b 4b 51 46 48 4e 46 4c 45 4d 47 4c 44 4e 4d 4c
>8188	4b 4d 42 49 50 55 4b 4d 4f 80 0b 53 03 d8 02 06
>8198	3c 8d 85 00 80 0d 54 03 d8 02 01 0a 3c 8d 85 01
>81a8	4d 80 0d 55 03 d8 09 0e 01 14 3c 8d 85 00 80 16
>81b8	56 03 d8 12 12 06 3c 8d 85 0a 4c 4b 4d 42 49 50
>81c8	55 4b 4d 4f 80 0f 57 03 d8 09 12 08 14 14 3c 8d
>81d8	85 01 44 80 11 58 03 d8 06 0d 07 15 10 3c 8d 85
>81e8	03 47 4f 41 80 0e 59 03 d8 0b 08 11 3c 8d 85 02
>81f8	4a 4b 80 15 5a 03 d8 10 04 08 3c 8d 85 09 4e 54
>8208	4b 42 4e 48 46 52 4c 80 0d 5b 03 d8 02 10 13 3c
>8218	8d 85 01 44 80 0d 5c 03 d8 13 11 3c 8d 85 02 4e
>8228	53 80 16 5d 03 d8 06 0d 11 3c 8d 85 0a 4c 4b 4d
>8238	42 49 50 55 4b 4d 4f 80 0d 5e 03 d8 12 3c 8d 85
>8248	03 44 4c 4f 80 11 5f 03 d8 04 09 04 0b 04 3c 8d
>8258	85 03 53 45 49 80 0e 60 03 d8 01 0c 06 0d 3c 8d
>8268	85 01 4d 80 0c 61 03 d8 05 15 0a 3c 8d 85 00 80
>8278	16 62 03 d8 13 05 13 01 12 3c 8d 85 08 52 47 44
>8288	54 47 52 55 4f 80 16 63 03 d8 13 15 3c 8d 85 0b
>8298	4a 4b 4e 4e 4c 4a 47 48 43 47 4e 80 0c 64 03 d8
>82a8	06 10 07 3c 8d 85 00 80 11 65 03 d8 07 3c 8d 85
>82b8	07 4e 43 55 53 47 49 48 80 06 66 03 81 8e 80 00

;******  Return to file: main/00start.asm


;******  Return to file: main/main.asm


;******  Processing file: main/commands/assert.asm

.101a					Command_Assert:
.101a	20 3e 1a	jsr $1a3e			jsr 	EvaluateRootInteger 		; what is being asserted.
.101d	20 5e 20	jsr $205e			jsr 	MInt32Zero 					; is it true ?
.1020	f0 01		beq $1023			beq 	_CAError
.1022	60		rts				rts
.1023					_CAError:
.1023	a2 04		ldx #$04			ldx 	#ErrorID_Assert
.1025	20 65 21	jsr $2165			jsr 	ErrorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/commands/clear.asm

.1028					CommandClear:
.1028	98		tya				tya
.1029	48		pha				pha
.102a	ad ca 0a	lda $0aca			lda 	endMemory					; set high memory = end of memory
.102d	85 0d		sta $0d				sta 	highMemory
.102f	ad cb 0a	lda $0acb			lda 	endMemory+1
.1032	85 0e		sta $0e				sta 	highMemory+1
.1034	ad c8 0a	lda $0ac8			lda 	basePage 					; work out where the program ends.
.1037	85 04		sta $04				sta 	temp0
.1039	ad c9 0a	lda $0ac9			lda 	basePage+1
.103c	85 05		sta $05				sta 	temp0+1
.103e					_CCFindEnd:
.103e	a0 00		ldy #$00			ldy 	#0
.1040	b1 04		lda ($04),y			lda 	(temp0),y
.1042	f0 0c		beq $1050			beq 	_CCFoundEnd 				; offset zero is end.
.1044	18		clc				clc
.1045	65 04		adc $04				adc 	temp0 						; move to next line
.1047	85 04		sta $04				sta 	temp0
.1049	90 f3		bcc $103e			bcc 	_CCFindEnd
.104b	e6 05		inc $05				inc 	temp0+1
.104d	4c 3e 10	jmp $103e			jmp 	_CCFindEnd
.1050					_CCFoundEnd:
.1050	a5 04		lda $04				lda 	temp0 						; put temp0 in lowMemory
.1052	85 0f		sta $0f				sta 	lowMemory
.1054	a5 05		lda $05				lda 	temp0+1
.1056	85 10		sta $10				sta 	lowMemory+1
.1058	a9 04		lda #$04			lda 	#4 							; skip low free memory clear, leave a gap.
.105a	20 6b 10	jsr $106b			jsr 	AdvanceLowMemoryByte		; need at least one here, to skip the end of program zero offset.
.105d	20 c4 20	jsr $20c4			jsr 	RSReset 					; reset the return stack.
.1060	a2 02		ldx #$02		ldx	#2
.1062	20 3f 25	jsr $253f		jsr	variableHandler
.1065	20 41 15	jsr $1541			jsr 	ScanProc 					; scan for procedures
.1068	68		pla				pla
.1069	a8		tay				tay
.106a	60		rts				rts
.106b					AdvanceLowMemoryByte:
.106b	18		clc				clc
.106c	65 0f		adc $0f				adc 	lowMemory
.106e	85 0f		sta $0f				sta 	lowMemory
.1070	90 02		bcc $1074			bcc 	_ALMBExit
.1072	e6 10		inc $10				inc 	lowMemory+1
.1074					_ALMBExit:
.1074	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/for.asm

.2546					Command_FOR:
.2546	a9 46		lda #$46			lda 	#markerFOR 					; allocate the space.
.2548	a2 0b		ldx #$0b			ldx 	#11
.254a	20 d2 20	jsr $20d2			jsr 	RSClaim
.254d	20 b1 10	jsr $10b1			jsr 	CommandLET 					; do the same as LET.
.2550	a5 40		lda $40				lda 	esType 						; check type should be integer reference.
.2552	c9 80		cmp #$80			cmp 	#$80
.2554	d0 4c		bne $25a2			bne 	_CFType
.2556	a9 c9		lda #$c9			lda 	#TKW_TO 					; check TO present.
.2558	20 9f 20	jsr $209f			jsr 	CheckToken
.255b	a2 01		ldx #$01			ldx 	#1 							; keep the variable address in stack 0
.255d	20 40 1a	jsr $1a40			jsr 	EvaluateInteger				; get terminal value in stack 1
.2560	98		tya				tya
.2561	48		pha				pha
.2562	a0 04		ldy #$04			ldy 	#4
.2564	a5 48		lda $48				lda		esInt0 						; the address of the index into 4 and 5
.2566	91 78		sta ($78),y			sta 	(rsPointer),y
.2568	c8		iny				iny
.2569	a5 50		lda $50				lda		esInt1
.256b	91 78		sta ($78),y			sta 	(rsPointer),y
.256d	c8		iny				iny
.256e	a9 01		lda #$01			lda 	#1  						; the default step in 6
.2570	91 78		sta ($78),y			sta 	(rsPointer),y
.2572	c8		iny				iny
.2573	a5 49		lda $49				lda		esInt0+1 					; terminal value in 7 to 11.
.2575	91 78		sta ($78),y			sta 	(rsPointer),y
.2577	c8		iny				iny
.2578	a5 51		lda $51				lda		esInt1+1
.257a	91 78		sta ($78),y			sta 	(rsPointer),y
.257c	c8		iny				iny
.257d	a5 59		lda $59				lda		esInt2+1
.257f	91 78		sta ($78),y			sta 	(rsPointer),y
.2581	c8		iny				iny
.2582	a5 61		lda $61				lda		esInt3+1
.2584	91 78		sta ($78),y			sta 	(rsPointer),y
.2586	68		pla				pla
.2587	a8		tay				tay
.2588	b1 02		lda ($02),y			lda 	(codePtr),y 				; followed by STEP.
.258a	c9 ca		cmp #$ca			cmp 	#TKW_STEP
.258c	d0 0e		bne $259c			bne 	_CFDone
.258e	c8		iny				iny									; skip over step.
.258f	20 40 1a	jsr $1a40			jsr 	EvaluateInteger 			; get step
.2592	98		tya				tya
.2593	48		pha				pha
.2594	b5 48		lda $48,x			lda 	esInt0,x 					; copy it into step (bit lazy here)
.2596	a0 06		ldy #$06			ldy 	#6
.2598	91 78		sta ($78),y			sta 	(rsPointer),y
.259a	68		pla				pla
.259b	a8		tay				tay
.259c					_CFDone:
.259c	a9 01		lda #$01			lda 	#1
.259e	20 fe 20	jsr $20fe			jsr 	RSSavePosition 				; save position.
.25a1	60		rts				rts
.25a2					_CFType:
.25a2	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.25a4	20 65 21	jsr $2165			jsr 	ErrorHandler
.25a7					Command_NEXT:
.25a7	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.25a9	a1 78		lda ($78,x)			lda 	(rsPointer,x)
.25ab	c9 46		cmp #$46			cmp 	#markerFOR 						; does it match
.25ad	f0 05		beq $25b4			beq 	_isok
.25af	a2 10		ldx #$10			ldx 	#ErrorID_nextErr
.25b1	20 65 21	jsr $2165			jsr 	ErrorHandler
.25b4					_isok:
.25b4	b1 02		lda ($02),y			lda 	(codePtr),y 				; is it NEXT <index>
.25b6	c9 40		cmp #$40			cmp 	#$40 						; e.g. a variable follows 00-3F
.25b8	b0 18		bcs $25d2			bcs 	_CNNoIndex
.25ba	a2 00		ldx #$00			ldx 	#0 							; start on stack
.25bc	20 6d 1a	jsr $1a6d			jsr 	EvaluateReference 			; this is the variable/parameter to localise.
.25bf	98		tya				tya
.25c0	48		pha				pha
.25c1	a0 04		ldy #$04			ldy 	#4 							; check same variable
.25c3	b1 78		lda ($78),y			lda 	(rsPointer),y
.25c5	d5 48		cmp $48,x			cmp 	esInt0,x
.25c7	d0 76		bne $263f			bne 	_CNBadIndex
.25c9	c8		iny				iny
.25ca	b1 78		lda ($78),y			lda 	(rsPointer),y
.25cc	d5 50		cmp $50,x			cmp 	esInt1,x
.25ce	d0 6f		bne $263f			bne 	_CNBadIndex
.25d0	68		pla				pla
.25d1	a8		tay				tay
.25d2					_CNNoIndex:
.25d2	98		tya				tya
.25d3	48		pha				pha
.25d4	a0 04		ldy #$04			ldy 	#4 							; make temp0 point to the index
.25d6	b1 78		lda ($78),y			lda 	(rsPointer),y
.25d8	85 04		sta $04				sta 	temp0
.25da	c8		iny				iny
.25db	b1 78		lda ($78),y			lda 	(rsPointer),y
.25dd	85 05		sta $05				sta 	temp0+1
.25df	c8		iny				iny
.25e0	a2 00		ldx #$00			ldx 	#0 							; X is the sign extend part of the step.
.25e2	b1 78		lda ($78),y			lda 	(rsPointer),y 				; get the step.
.25e4	85 09		sta $09				sta 	temp2+1 					; save for later.
.25e6	10 01		bpl $25e9			bpl 	_CNSignX
.25e8	ca		dex				dex  								; X = $FF
.25e9					_CNSignX:
.25e9	18		clc				clc 								; add to the LSB
.25ea	a0 00		ldy #$00			ldy 	#0
.25ec	71 04		adc ($04),y			adc 	(temp0),y
.25ee	91 04		sta ($04),y			sta 	(temp0),y
.25f0					_CNPropogate:
.25f0	c8		iny				iny  								; add the sign extended in X to the rest.
.25f1	8a		txa				txa
.25f2	71 04		adc ($04),y			adc 	(temp0),y
.25f4	91 04		sta ($04),y			sta 	(temp0),y
.25f6	c8		iny				iny
.25f7	8a		txa				txa
.25f8	71 04		adc ($04),y			adc 	(temp0),y
.25fa	91 04		sta ($04),y			sta 	(temp0),y
.25fc	c8		iny				iny
.25fd	8a		txa				txa
.25fe	71 04		adc ($04),y			adc 	(temp0),y
.2600	91 04		sta ($04),y			sta 	(temp0),y
.2602	18		clc				clc 								; point temp1 to the terminal value stored in the stack.
.2603	a5 78		lda $78				lda 	rsPointer
.2605	69 07		adc #$07			adc 	#7
.2607	85 06		sta $06				sta 	temp1
.2609	a9 00		lda #$00			lda 	#0
.260b	85 08		sta $08				sta 	temp2 						; clear temp2, which is the OR of all the subtractions.
.260d	a8		tay				tay 								; and clear the Y register again.
.260e	65 79		adc $79				adc 	rsPointer+1
.2610	85 07		sta $07				sta 	temp1+1
.2612	38		sec				sec 								; calculate current - limit oring interim values.
.2613	20 4b 26	jsr $264b			jsr 	_CNCompare
.2616	20 4b 26	jsr $264b			jsr 	_CNCompare
.2619	20 4b 26	jsr $264b			jsr 	_CNCompare
.261c	20 4b 26	jsr $264b			jsr 	_CNCompare
.261f	50 02		bvc $2623			bvc 	_CNNoOverflow 				; converts to a signed comparison on the sign bit.
.2621	49 80		eor #$80			eor 	#$80
.2623					_CNNoOverflow:
.2623	a4 09		ldy $09				ldy 	temp2+1						; get step back
.2625	30 1d		bmi $2644			bmi 	_CNCheckDownto
.2627	c9 00		cmp #$00			cmp 	#0
.2629	30 0c		bmi $2637			bmi 	_CNLoopRound 				; loop round if < =
.262b	a5 08		lda $08				lda 	temp2
.262d	f0 08		beq $2637			beq 	_CNLoopRound
.262f					_CNLoopExit:
.262f	68		pla				pla
.2630	a8		tay				tay
.2631	a9 0b		lda #$0b			lda 	#11
.2633	20 f4 20	jsr $20f4			jsr 	RSFree
.2636	60		rts				rts
.2637					_CNLoopRound:
.2637	68		pla				pla
.2638	a8		tay				tay
.2639	a9 01		lda #$01			lda 	#1
.263b	20 11 21	jsr $2111			jsr 	RSLoadPosition				; go back to the loop top
.263e	60		rts				rts
.263f					_CNBadIndex:
.263f	a2 13		ldx #$13			ldx 	#ErrorID_BadIndex
.2641	20 65 21	jsr $2165			jsr 	ErrorHandler
.2644					_CNCheckDownto:
.2644	c9 00		cmp #$00			cmp 	#0
.2646	10 ef		bpl $2637			bpl 	_CNLoopRound
.2648	4c 2f 26	jmp $262f			jmp 	_CNLoopExit
.264b					_CNCompare:
.264b	b1 04		lda ($04),y			lda 	(temp0),y 					; do the subtraction - compare don't care about answer
.264d	f1 06		sbc ($06),y			sbc 	(temp1),y
.264f	05 08		ora $08				ora 	temp2 						; Or into temp2 (does not affect carry)
.2651	85 08		sta $08				sta 	temp2
.2653	c8		iny				iny
.2654	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/if.asm

.1075					CommandIf:
.1075	20 3e 1a	jsr $1a3e			jsr 	EvaluateRootInteger 		; if what ?
.1078	b1 02		lda ($02),y			lda 	(codePtr),y 				; check for IF .. THEN or IF .. GOTO which are single lines.
.107a	c9 d4		cmp #$d4			cmp 	#TKW_GOTO
.107c	f0 04		beq $1082			beq 	_IfSimple
.107e	c9 a1		cmp #$a1			cmp 	#TKW_THEN
.1080	d0 1b		bne $109d			bne 	_IfComplex
.1082					_IfSimple:
.1082	20 5e 20	jsr $205e			jsr 	MInt32Zero					; check if TOS zero
.1085	f0 10		beq $1097			beq 	_IfEOL 						; go to next line.
.1087	b1 02		lda ($02),y			lda 	(codePtr),y 				; get and skip token.
.1089	c8		iny				iny
.108a	c9 d4		cmp #$d4			cmp 	#TKW_GOTO 					; was it if GOTO ?
.108c	f0 0c		beq $109a			beq 	_IfGoto 					; do the Goto code
.108e	b1 02		lda ($02),y			lda 	(codePtr),y 				; what follows the THEN ?
.1090	29 c0		and #$c0			and 	#$C0 						; check $40-$7F
.1092	c9 40		cmp #$40			cmp 	#$40 						; e.g. number IF x = 0 THEN 170
.1094	f0 04		beq $109a			beq 	_IfGoto
.1096	60		rts				rts 								; else continue on this line.
.1097					_IfEOL:
.1097	4c b5 15	jmp $15b5			jmp 	AdvanceNextLine 			; go to next line
.109a					_IfGoto:
.109a	4c f4 15	jmp $15f4			jmp 	CommandGoto
.109d					_IfComplex:
.109d	20 5e 20	jsr $205e			jsr 	MInt32Zero 					; is it true ?
.10a0	f0 01		beq $10a3			beq 	_IFSkip 					; if non-zero then skip to ELSE/ENDIF
.10a2	60		rts				rts 								; else continue.
.10a3					_IFSkip:
.10a3	a9 d1		lda #$d1			lda	 	#TKW_ELSE 					; test failed, go to ELSE or ENDIF whichever comes first.
.10a5	a2 a2		ldx #$a2			ldx 	#TKW_ENDIF
.10a7	4c be 26	jmp $26be			jmp		ScanForward
.10aa					Command_ELSE:
.10aa	a2 a2		ldx #$a2			ldx 	#TKW_ENDIF
.10ac	8a		txa				txa
.10ad	4c be 26	jmp $26be			jmp		ScanForward
.10b0					Command_ENDIF:
.10b0	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/let.asm

.10b1					CommandLet:
.10b1	a2 00		ldx #$00			ldx 	#0  						; get address to write.
.10b3	20 6d 1a	jsr $1a6d			jsr 	EvaluateReference
.10b6	a9 8d		lda #$8d			lda 	#TKW_EQUAL 					; check for equals
.10b8	20 9f 20	jsr $209f			jsr 	CheckToken
.10bb	e8		inx				inx 								; do RHS
.10bc	20 21 1a	jsr $1a21			jsr 	Evaluate 					; evaluate and derefernce
.10bf	ca		dex				dex
.10c0	20 c4 10	jsr $10c4			jsr 	WriteValue 					; write it out
.10c3	60		rts				rts
.10c4					WriteValue:
.10c4	98		tya				tya
.10c5	48		pha				pha
.10c6	20 26 11	jsr $1126			jsr 	TOSToTemp0 					; set temp0 to point to target address.
.10c9	b5 40		lda $40,x			lda 	esType,x 					; check the string/integer flags match
.10cb	55 41		eor $41,x			eor 	esType+1,x
.10cd	29 40		and #$40			and 	#$40
.10cf	d0 50		bne $1121			bne		_WVType
.10d1	a0 01		ldy #$01			ldy 	#1 							; for string, copy 0 and 1.
.10d3	b5 40		lda $40,x			lda 	esType,x 					; check for string assignment
.10d5	29 40		and #$40			and 	#$40
.10d7	d0 1f		bne $10f8			bne 	_WVCopyString
.10d9	b5 40		lda $40,x			lda 	esType,x 					; check both are integer.
.10db	15 41		ora $41,x			ora 	esType+1,x
.10dd	4a		lsr a				lsr 	a
.10de	90 22		bcc $1102			bcc 	_WVCopyData4
.10e0	b5 40		lda $40,x			lda 	esType,x
.10e2	4a		lsr a				lsr 	a
.10e3	90 3c		bcc $1121			bcc 	_WVType
.10e5	e8		inx				inx 								; force the value being written to be a float.
.10e6	20 66 16	jsr $1666			jsr 	BPMakeFloat
.10e9	ca		dex				dex
.10ea	20 26 11	jsr $1126			jsr 	TOSToTemp0 					; set Temp0 to write address
.10ed	e8		inx				inx
.10ee	8a		txa				txa
.10ef	a2 20		ldx #$20		ldx	#32
.10f1	20 6c 21	jsr $216c		jsr	floatingpointHandler
.10f4	aa		tax				tax
.10f5	4c 1e 11	jmp $111e			jmp 	_WVCopyExit
.10f8					_WVCopyString:
.10f8	8a		txa				txa
.10f9	a2 0a		ldx #$0a		ldx	#10
.10fb	20 c3 23	jsr $23c3		jsr	stringHandler
.10fe	aa		tax				tax
.10ff	4c 1e 11	jmp $111e			jmp 	_WVCopyExit
.1102					_WVCopyData4:
.1102	b5 40		lda $40,x			lda 	esType,x 					; is the int ref a byte ref ?
.1104	29 20		and #$20			and 	#$20
.1106	d0 10		bne $1118			bne 	_WVCopyData1
.1108	a0 03		ldy #$03			ldy 	#3
.110a	b5 61		lda $61,x			lda 	esInt3+1,x
.110c	91 04		sta ($04),y			sta 	(temp0),y
.110e	88		dey				dey
.110f	b5 59		lda $59,x			lda 	esInt2+1,x
.1111	91 04		sta ($04),y			sta 	(temp0),y
.1113	88		dey				dey
.1114	b5 51		lda $51,x			lda 	esInt1+1,x
.1116	91 04		sta ($04),y			sta 	(temp0),y
.1118					_WVCopyData1:
.1118	a0 00		ldy #$00			ldy 	#0
.111a	b5 49		lda $49,x			lda 	esInt0+1,x
.111c	91 04		sta ($04),y			sta 	(temp0),y
.111e					_WVCopyExit:
.111e	68		pla				pla
.111f	a8		tay				tay
.1120	60		rts				rts
.1121					_WVType:
.1121	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.1123	20 65 21	jsr $2165			jsr 	ErrorHandler
.1126					TOSToTemp0:
.1126	b5 48		lda $48,x			lda 	esInt0,x
.1128	85 04		sta $04				sta 	temp0
.112a	b5 50		lda $50,x			lda 	esInt1,x
.112c	85 05		sta $05				sta 	temp0+1
.112e	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/local.asm

.0af0					storeSize:
>0af0							.fill 	1
.112f					LocaliseVariable:
.112f	b1 02		lda ($02),y			lda 	(codePtr),y 				; check it's a variable.
.1131	c9 40		cmp #$40			cmp 	#$40
.1133	b0 67		bcs $119c			bcs 	_LVSyntax
.1135	8a		txa				txa 								; get the address of that variable.
.1136	a2 00		ldx #$00		ldx	#0
.1138	20 3f 25	jsr $253f		jsr	variableHandler
.113b	aa		tax				tax
.113c	8a		txa				txa
.113d	48		pha				pha
.113e	98		tya				tya
.113f	48		pha				pha
.1140	20 26 11	jsr $1126			jsr 	TOSToTemp0 					; the address of the variable is now in temp0.
.1143	b5 40		lda $40,x			lda 	esType,x 					; get the type
.1145	0a		asl a				asl 	a
.1146	10 16		bpl $115e			bpl 	_LVPushNumber
.1148	a0 00		ldy #$00			ldy 	#0 							; put address of data in temp1
.114a	b1 04		lda ($04),y			lda 	(temp0),y
.114c	c8		iny				iny
.114d	85 06		sta $06				sta 	temp1
.114f	b1 04		lda ($04),y			lda 	(temp0),y
.1151	85 07		sta $07				sta 	temp1+1
.1153	a0 00		ldy #$00			ldy 	#0 	 						; get length
.1155	b1 06		lda ($06),y			lda 	(temp1),y
.1157	aa		tax				tax 								; into X
.1158	e8		inx				inx 								; +1 for length.
.1159	a9 24		lda #$24			lda 	#markerString
.115b	4c 73 11	jmp $1173			jmp 	_LVWriteFrame
.115e					_LVPushNumber:
.115e	a5 04		lda $04				lda 	temp0 						; storage address and data source are the same
.1160	85 06		sta $06				sta 	temp1
.1162	a5 05		lda $05				lda 	temp0+1
.1164	85 07		sta $07				sta 	temp1+1
.1166	b5 40		lda $40,x			lda 	esType,x 					; put float flag into carry.
.1168	4a		lsr a				lsr 	a
.1169	a9 25		lda #$25			lda 	#markerInt 					; get marker and size.
.116b	a2 04		ldx #$04			ldx 	#VarISize
.116d	90 04		bcc $1173			bcc 	_LVIsInteger
.116f	a9 23		lda #$23			lda 	#markerFloat
.1171	a2 06		ldx #$06			ldx 	#VarFSize
.1173					_LVIsInteger:
.1173					_LVWriteFrame:
.1173	8e f0 0a	stx $0af0			stx 	storeSize 					; number of bytes to copy from (temp0)
.1176	e8		inx				inx 								; allocate 3 bytes, 2 for the address, 1 for the marker.
.1177	e8		inx				inx
.1178	e8		inx				inx
.1179	20 d2 20	jsr $20d2			jsr 	RSClaim 					; create the stack frame.
.117c	a5 04		lda $04				lda 	temp0 						; copy the target address to slots 1 & 2
.117e	a0 01		ldy #$01			ldy 	#1
.1180	91 78		sta ($78),y			sta 	(rsPointer),y
.1182	c8		iny				iny
.1183	a5 05		lda $05				lda 	temp0+1
.1185	91 78		sta ($78),y			sta 	(rsPointer),y
.1187	a0 00		ldy #$00			ldy 	#0
.1189					_LVCopyData:
.1189	b1 06		lda ($06),y			lda 	(temp1),y 					; get data from source, temp1
.118b	c8		iny				iny 								; write allowing for the header bit.
.118c	c8		iny				iny
.118d	c8		iny				iny
.118e	91 78		sta ($78),y			sta 	(rsPointer),y
.1190	88		dey				dey
.1191	88		dey				dey
.1192	ce f0 0a	dec $0af0			dec 	storeSize 					; do it storesize times
.1195	d0 f2		bne $1189			bne 	_LVCopyData
.1197	68		pla				pla
.1198	a8		tay				tay
.1199	68		pla				pla
.119a	aa		tax				tax
.119b	60		rts				rts
.119c					_LVSyntax:
.119c	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.119e	20 65 21	jsr $2165			jsr 	ErrorHandler
.11a1					RestoreLocals:
.11a1	a2 00		ldx #$00			ldx 	#0
.11a3	a1 78		lda ($78,x)			lda 	(rsPointer,x)
.11a5	c9 40		cmp #$40			cmp	 	#64
.11a7	90 01		bcc $11aa			bcc 	_RLocal
.11a9	60		rts				rts
.11aa					_RLocal:
.11aa	8a		txa				txa
.11ab	48		pha				pha
.11ac	98		tya				tya
.11ad	48		pha				pha
.11ae	a0 01		ldy #$01			ldy 	#1 							; copy target address to temp0
.11b0	b1 78		lda ($78),y			lda 	(rsPointer),y
.11b2	85 04		sta $04				sta 	temp0
.11b4	c8		iny				iny
.11b5	b1 78		lda ($78),y			lda 	(rsPointer),y
.11b7	85 05		sta $05				sta 	temp0+1
.11b9	a0 00		ldy #$00			ldy 	#0 							; get type back.
.11bb	b1 78		lda ($78),y			lda 	(rsPointer),y
.11bd	c9 24		cmp #$24			cmp 	#markerString 				; string is ... different :)
.11bf	f0 28		beq $11e9			beq 	_RString
.11c1	a2 04		ldx #$04			ldx		#VARISize 					; size integer
.11c3	c9 25		cmp #$25			cmp 	#markerInt
.11c5	f0 02		beq $11c9			beq 	_RIsInteger
.11c7	a2 06		ldx #$06			ldx 	#VARFSize 					; size float
.11c9					_RIsInteger:
.11c9	8a		txa				txa
.11ca	48		pha				pha
.11cb	a0 03		ldy #$03			ldy 	#3							; start size to copy back from pointer.
.11cd					_RCopyBack:
.11cd	b1 78		lda ($78),y			lda 	(rsPointer),y
.11cf	88		dey				dey
.11d0	88		dey				dey
.11d1	88		dey				dey
.11d2	91 04		sta ($04),y			sta 	(temp0),y
.11d4	c8		iny				iny
.11d5	c8		iny				iny
.11d6	c8		iny				iny
.11d7	c8		iny				iny
.11d8	ca		dex				dex
.11d9	d0 f2		bne $11cd			bne 	_RCopyBack
.11db	68		pla				pla 								; get size add 3
.11dc	18		clc				clc
.11dd	69 03		adc #$03			adc 	#3 							; (2 for address one for marker)
.11df					_RRestoreAAndLoop:
.11df	20 f4 20	jsr $20f4			jsr 	RSFree
.11e2	68		pla				pla
.11e3	a8		tay				tay
.11e4	68		pla				pla
.11e5	aa		tax				tax
.11e6	4c a1 11	jmp $11a1			jmp 	RestoreLocals 				; go see if there are any more locals.
.11e9					_RString:
.11e9	a2 00		ldx #$00			ldx 	#0
.11eb	a0 01		ldy #$01			ldy 	#1 							; set up for a string write.
.11ed	b1 78		lda ($78),y			lda 	(rsPointer),y
.11ef	95 48		sta $48,x			sta 	esInt0,x
.11f1	c8		iny				iny
.11f2	b1 78		lda ($78),y			lda 	(rsPointer),y
.11f4	95 50		sta $50,x			sta 	esInt1,x
.11f6	18		clc				clc
.11f7	a5 78		lda $78				lda 	rsPointer
.11f9	69 03		adc #$03			adc 	#3
.11fb	95 49		sta $49,x			sta 	esInt0+1,x
.11fd	a5 79		lda $79				lda 	rsPointer+1
.11ff	69 00		adc #$00			adc 	#0
.1201	95 51		sta $51,x			sta 	esInt1+1,x
.1203	8a		txa				txa
.1204	a2 0a		ldx #$0a		ldx	#10
.1206	20 c3 23	jsr $23c3		jsr	stringHandler
.1209	a0 03		ldy #$03			ldy 	#3 							; get string length
.120b	b1 78		lda ($78),y			lda 	(rsPointer),y
.120d	18		clc				clc
.120e	69 04		adc #$04			adc 	#4 							; add 4 (pointer, marker, length) to restore.
.1210	4c df 11	jmp $11df			jmp 	_RRestoreAAndLoop

;******  Return to file: main/main.asm


;******  Processing file: main/commands/new.asm

.1213					Command_New:
.1213	20 f0 13	jsr $13f0			jsr 	ResetCodeAddress 			; point to first line
.1216	a0 00		ldy #$00			ldy 	#0 							; and zap it.
.1218	98		tya				tya
.1219	91 02		sta ($02),y			sta 	(codePtr),y
.121b	20 28 10	jsr $1028			jsr 	CommandClear 				; clear everything down.
.121e	4c b2 15	jmp $15b2			jmp 	CommandEND 					; do END code, as there's nothing to run.

;******  Return to file: main/main.asm


;******  Processing file: main/commands/poke.asm

.1221					Command_Poke:
.1221	a9 01		lda #$01			lda 	#1
.1223	d0 06		bne $122b			bne 	PokeGeneral
.1225					Command_Doke:
.1225	a9 02		lda #$02			lda 	#2
.1227	d0 02		bne $122b			bne 	PokeGeneral
.1229					Command_Loke:
.1229	a9 03		lda #$03			lda 	#3
.122b					PokeGeneral:
.122b	48		pha				pha 								; save size
.122c	20 3e 1a	jsr $1a3e			jsr 	EvaluateRootInteger 		; target address
.122f	20 b7 20	jsr $20b7			jsr	 	CheckComma
.1232	e8		inx				inx
.1233	20 40 1a	jsr $1a40			jsr 	EvaluateInteger 			; what value to POKE ?
.1236	ca		dex				dex
.1237	20 26 11	jsr $1126			jsr 	TOSToTemp0 					; temp0 points to the target address
.123a	84 0c		sty $0c				sty 	tempShort 					; save Y
.123c	68		pla				pla 								; get copy type and dispatch
.123d	aa		tax				tax
.123e	ca		dex				dex
.123f	f0 14		beq $1255			beq 	_Poke1
.1241	ca		dex				dex
.1242	f0 0b		beq $124f			beq 	_Poke2
.1244	a0 03		ldy #$03			ldy 	#3
.1246	a5 61		lda $61				lda 	esInt3+1
.1248	91 04		sta ($04),y			sta 	(temp0),y
.124a	88		dey				dey
.124b	a5 59		lda $59				lda 	esInt2+1
.124d	91 04		sta ($04),y			sta 	(temp0),y
.124f					_Poke2:
.124f	a0 01		ldy #$01			ldy 	#1
.1251	a5 51		lda $51				lda 	esInt1+1
.1253	91 04		sta ($04),y			sta 	(temp0),y
.1255					_Poke1:
.1255	a0 00		ldy #$00			ldy 	#0
.1257	a5 49		lda $49				lda 	esInt0+1
.1259	91 04		sta ($04),y			sta 	(temp0),y
.125b	a4 0c		ldy $0c				ldy 	tempShort 					; restore Y and exit
.125d	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/print.asm

.0af1					lastPrintToken:
>0af1							.fill 	1
.125e					Command_Print:
.125e	a9 00		lda #$00			lda 	#0 							; clear LPT flag
.1260	8d f1 0a	sta $0af1			sta 	lastPrintToken
.1263	88		dey				dey
.1264					_PrintLoopSkip:
.1264	c8		iny				iny
.1265					_PrintLoop:
.1265	b1 02		lda ($02),y			lda 	(codePtr),y 				; what follows
.1267	c9 80		cmp #$80			cmp 	#TOK_EOL  					; done if end of line or colon
.1269	f0 5b		beq $12c6			beq 	_PrintExit
.126b	c9 c5		cmp #$c5			cmp 	#TKW_COLON
.126d	f0 57		beq $12c6			beq 	_PrintExit
.126f	8d f1 0a	sta $0af1			sta 	lastPrintToken 				; update LPT
.1272	c9 c7		cmp #$c7			cmp 	#TKW_SEMICOLON 				; ignore semicolon
.1274	f0 ee		beq $1264			beq 	_PrintLoopSkip
.1276	c9 c8		cmp #$c8			cmp 	#TKW_QUOTE 					; ' is new line
.1278	f0 3c		beq $12b6			beq	 	_PrintNewLine
.127a	c9 c6		cmp #$c6			cmp 	#TKW_COMMA 					; , is print tab
.127c	f0 40		beq $12be			beq 	_PrintTab
.127e	20 1f 1a	jsr $1a1f			jsr 	EvaluateRoot 				; evaluate something at the root
.1281	a9 cd		lda #$cd			lda 	#(convertBuffer) & $FF
.1283	85 04		sta $04				sta 	temp0
.1285	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.1287	85 05		sta $05				sta 	1+(temp0)
.1289	a5 40		lda $40				lda 	esType 						; get type
.128b	f0 15		beq $12a2			beq		_PrintInteger
.128d	4a		lsr a				lsr 	a 							; check for floating point
.128e	b0 08		bcs $1298			bcs 	_PrintFloat
.1290					_PrintString:
.1290	a2 00		ldx #$00			ldx 	#0 							; bottom string to temp0
.1292	20 26 11	jsr $1126			jsr 	TOSToTemp0
.1295	4c b0 12	jmp $12b0			jmp 	_PrintTemp0 				; print no leading space.
.1298					_PrintFloat:
.1298	a9 00		lda #$00			lda 	#0 							; stack level.
.129a	a2 14		ldx #$14		ldx	#20
.129c	20 6c 21	jsr $216c		jsr	floatingpointHandler
.129f	4c a9 12	jmp $12a9			jmp 	_PrintSpaceTemp0
.12a2					_PrintInteger:
.12a2	a9 8a		lda #$8a			lda 	#10+$80 					; base 10 signed
.12a4	a2 00		ldx #$00			ldx 	#0 							; bottom stack element
.12a6	20 8d 1f	jsr $1f8d			jsr 	MInt32ToString				; convert to text
.12a9					_PrintSpaceTemp0:
.12a9	a9 20		lda #$20			lda 	#32
.12ab	a2 04		ldx #$04		ldx	#4
.12ad	20 58 21	jsr $2158		jsr	deviceHandler
.12b0					_PrintTemp0:
.12b0	20 d7 12	jsr $12d7			jsr 	PrintString
.12b3	4c 65 12	jmp $1265			jmp 	_PrintLoop
.12b6					_PrintNewLine:
.12b6	a2 00		ldx #$00		ldx	#0
.12b8	20 58 21	jsr $2158		jsr	deviceHandler
.12bb	4c 64 12	jmp $1264			jmp 	_PrintLoopSkip
.12be					_PrintTab:
.12be	a2 06		ldx #$06		ldx	#6
.12c0	20 58 21	jsr $2158		jsr	deviceHandler
.12c3	4c 64 12	jmp $1264			jmp 	_PrintLoopSkip
.12c6					_PrintExit:
.12c6	ad f1 0a	lda $0af1			lda		lastPrintToken 				; check last token
.12c9	c9 c7		cmp #$c7			cmp 	#TKW_SEMICOLON 				; if , or ; do not print NL
.12cb	f0 09		beq $12d6			beq 	_PrintExit2
.12cd	c9 c6		cmp #$c6			cmp 	#TKW_COMMA
.12cf	f0 05		beq $12d6			beq 	_PrintExit2
.12d1	a2 00		ldx #$00		ldx	#0
.12d3	20 58 21	jsr $2158		jsr	deviceHandler
.12d6					_PrintExit2:
.12d6	60		rts				rts
.12d7					PrintString:
.12d7	8a		txa				txa
.12d8	48		pha				pha
.12d9	98		tya				tya
.12da	48		pha				pha
.12db	a0 00		ldy #$00			ldy 	#0							; get length
.12dd	b1 04		lda ($04),y			lda 	(temp0),y
.12df	aa		tax				tax 								; into X
.12e0	e0 00		cpx #$00	_PSLoop:cpx 	#0 							; finished ?
.12e2	f0 10		beq $12f4			beq 	_PSExit
.12e4	ca		dex				dex
.12e5	8a		txa				txa
.12e6	48		pha				pha
.12e7	c8		iny				iny
.12e8	b1 04		lda ($04),y			lda 	(temp0),y
.12ea	a2 04		ldx #$04		ldx	#4
.12ec	20 58 21	jsr $2158		jsr	deviceHandler
.12ef	68		pla				pla
.12f0	aa		tax				tax
.12f1	4c e0 12	jmp $12e0			jmp 	_PSLoop
.12f4					_PSExit:
.12f4	68		pla				pla
.12f5	a8		tay				tay
.12f6	68		pla				pla
.12f7	aa		tax				tax
.12f8	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/proc.asm

.0af2					paramCount:
>0af2							.fill 	1
.12f9					CallProc:
.12f9	20 d5 14	jsr $14d5			jsr 	FindProcedure 				; find procedure, put in temp0. A contains name length.
.12fc	48		pha				pha 								; save length on stack
.12fd	85 0c		sta $0c				sta 	tempShort 					; save length in tempShort
.12ff	a5 05		lda $05				lda 	temp0+1 					; save procedure target on stack.
.1301	48		pha				pha
.1302	a5 04		lda $04				lda 	temp0
.1304	48		pha				pha
.1305	98		tya				tya 								; calculate Y + length
.1306	18		clc				clc
.1307	65 0c		adc $0c				adc 	tempShort
.1309	a8		tay				tay
.130a	a2 00		ldx #$00			ldx 	#0 							; where the first parameter goes - 1
.130c					_CallProcEvalParams:
.130c	e8		inx				inx
.130d	b1 02		lda ($02),y			lda 	(codePtr),y 				; do we have ) ?
.130f	c9 c4		cmp #$c4			cmp 	#TKW_RPAREN
.1311	f0 0b		beq $131e			beq 	_CPDoneParams
.1313	20 21 1a	jsr $1a21			jsr 	Evaluate 					; evaluate a parameter
.1316	b1 02		lda ($02),y			lda 	(codePtr),Y 				; get what's next, preconsume
.1318	c8		iny				iny
.1319	c9 c6		cmp #$c6			cmp 	#TKW_COMMA 					; if comma, go get another parameter
.131b	f0 ef		beq $130c			beq 	_CallProcEvalParams
.131d	88		dey				dey 								; undo consumption.
.131e					_CPDoneParams:
.131e	20 aa 20	jsr $20aa			jsr 	CheckRightParen 			; check closing parenthesis.
.1321	8e f2 0a	stx $0af2			stx 	paramCount 					; store parameter count+1
.1324	a2 04		ldx #$04			ldx 	#4							; make space on stack
.1326	a9 50		lda #$50			lda 	#markerPROC
.1328	20 d2 20	jsr $20d2			jsr 	RSClaim
.132b	a9 01		lda #$01			lda 	#1 							; store return address.
.132d	20 fe 20	jsr $20fe			jsr 	RSSavePosition
.1330	68		pla				pla 								; get the new code Ptr
.1331	85 02		sta $02				sta 	codePtr
.1333	68		pla				pla
.1334	85 03		sta $03				sta 	codePtr+1
.1336	68		pla				pla 								; length of name + 4 is the param start.
.1337	18		clc				clc
.1338	69 04		adc #$04			adc 	#4
.133a	a8		tay				tay
.133b	a2 ff		ldx #$ff			ldx 	#$FF
.133d					_CPLoadParameters:
.133d	e8		inx				inx 								; point to where the address should be loaded.
.133e	ec f2 0a	cpx $0af2			cpx 	paramCount 					; too many parameters in definition ?
.1341	f0 1e		beq $1361			beq 	_CPParamError
.1343	b1 02		lda ($02),y			lda 	(codePtr),y					; what follows
.1345	c9 c4		cmp #$c4			cmp 	#TKW_RPAREN 				; is it the right bracket
.1347	f0 0e		beq $1357			beq 	_CPParamComplete 			; done all the parameters
.1349	20 2f 11	jsr $112f			jsr 	LocaliseVariable 			; make following variable local, ref in tos,x
.134c	20 c4 10	jsr $10c4			jsr 	WriteValue 					; copy the evaluated parameter into there.
.134f	b1 02		lda ($02),y			lda 	(codePtr),y 				; followed by a comma ?
.1351	c8		iny				iny
.1352	c9 c6		cmp #$c6			cmp 	#TKW_COMMA
.1354	f0 e7		beq $133d			beq 	_CPLoadParameters
.1356	88		dey				dey 								; no, unconsume and check for )
.1357					_CPParamComplete:
.1357	20 aa 20	jsr $20aa			jsr 	CheckRightParen 			; check )
.135a	e8		inx				inx 								; check right number of parameters
.135b	ec f2 0a	cpx $0af2			cpx 	paramCount
.135e	d0 01		bne $1361			bne 	_CPParamError
.1360	60		rts				rts
.1361					_CPParamError:
.1361	a2 18		ldx #$18			ldx 	#ErrorID_Params
.1363	20 65 21	jsr $2165			jsr 	ErrorHandler
.1366					ReturnProc:
.1366	20 a1 11	jsr $11a1			jsr 	RestoreLocals 				; get the locals back.
.1369	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.136b	a1 78		lda ($78,x)			lda 	(rsPointer,x)
.136d	c9 50		cmp #$50			cmp 	#markerPROC 						; does it match
.136f	f0 05		beq $1376			beq 	_isok
.1371	a2 12		ldx #$12			ldx 	#ErrorID_endProcErr
.1373	20 65 21	jsr $2165			jsr 	ErrorHandler
.1376					_isok:
.1376	a9 01		lda #$01			lda 	#1
.1378	20 11 21	jsr $2111			jsr 	RSLoadPosition 				; reload the position from offset 1.
.137b	a9 04		lda #$04			lda 	#4 							; throw 4 bytes from stack.
.137d	20 f4 20	jsr $20f4			jsr 	RSFree
.1380	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/rem.asm

.1381					Command_Rem:
.1381					Command_Rem2:
.1381	b1 02		lda ($02),y			lda 	(codePtr),y 				; what follows
.1383	c9 85		cmp #$85			cmp 	#TOK_STR 					; if it is a string then skip it.
.1385	d0 06		bne $138d			bne 	_CRNotString
.1387	c8		iny				iny
.1388	98		tya				tya
.1389	38		sec				sec
.138a	71 02		adc ($02),y			adc 	(codePtr),y 				; get string size, add to Y, +1 for the length
.138c	a8		tay				tay
.138d					_CRNotString:
.138d	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/repeat.asm

.2655					Command_Repeat:
.2655	a2 04		ldx #$04			ldx 	#4 							; allocate 4 bytes on stack for REPEAT
.2657	a9 52		lda #$52			lda 	#markerREPEAT 				; repeat marker allocate 4 bytes
.2659	20 d2 20	jsr $20d2			jsr 	RSClaim
.265c	a9 01		lda #$01			lda 	#1 							; save position at offset 1.
.265e	20 fe 20	jsr $20fe			jsr 	RSSavePosition
.2661	60		rts				rts
.2662					Command_Until:
.2662	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.2664	a1 78		lda ($78,x)			lda 	(rsPointer,x)
.2666	c9 52		cmp #$52			cmp 	#markerREPEAT 						; does it match
.2668	f0 05		beq $266f			beq 	_isok
.266a	a2 0f		ldx #$0f			ldx 	#ErrorID_untilErr
.266c	20 65 21	jsr $2165			jsr 	ErrorHandler
.266f					_isok:
.266f	20 3e 1a	jsr $1a3e			jsr 	EvaluateRootInteger 		; at the bottom.
.2672	20 5e 20	jsr $205e			jsr 	MInt32Zero					; check if TOS zero
.2675	d0 06		bne $267d			bne 	_CUExit
.2677	a9 01		lda #$01			lda 	#1
.2679	20 11 21	jsr $2111			jsr 	RSLoadPosition 				; reload the position from offset 1.
.267c	60		rts				rts
.267d					_CUExit:
.267d	a9 04		lda #$04			lda 	#4 							; throw 4 bytes from stack.
.267f	20 f4 20	jsr $20f4			jsr 	RSFree
.2682	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/run.asm

.138e					Command_Run:
.138e	a2 ff		ldx #$ff			ldx 	#$FF
.1390	9a		txs				txs
.1391	20 28 10	jsr $1028			jsr 	CommandClear 				; clear everything.
.1394	20 f0 13	jsr $13f0			jsr 	ResetCodeAddress 			; back to the start.
.1397	a0 03		ldy #$03			ldy 	#3
.1399					CRNextInstruction:
.1399	64 7b		stz $7b				stz 	softMemAlloc+1
.139b	b1 02		lda ($02),y			lda 	(codePtr),y 				; get next token.
.139d	10 1c		bpl $13bb			bpl 	_CRNotToken
.139f	c9 c4		cmp #$c4			cmp 	#TOK_TOKENS 				; if in the tokens then do that token.
.13a1	b0 0c		bcs $13af			bcs 	_CRExecute
.13a3	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST 				; unary is ignored.
.13a5	b0 56		bcs $13fd			bcs 	Unimplemented
.13a7	c9 99		cmp #$99			cmp 	#TOK_STRUCTST 				; execute structures.
.13a9	b0 04		bcs $13af			bcs 	_CRExecute
.13ab	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; if one of the system tokens $80-$85 do that
.13ad	b0 16		bcs $13c5			bcs 	_CRCheckIndirect 			; if in that unused range check for ! or ?
.13af					_CRExecute:
.13af	c8		iny				iny 								; consume it.
.13b0	0a		asl a				asl 	a 							; double it, losing most significant bit.
.13b1	aa		tax				tax
.13b2	20 b8 13	jsr $13b8			jsr 	_CRRunRoutine 				; we want to do jsr (group0vectors,x)
.13b5	4c 99 13	jmp $1399			jmp 	CRNextInstruction
.13b8					_CRRunRoutine:
.13b8	7c 07 14	jmp ($1407,x)			jmp 	(Group0Vectors,x)
.13bb					_CRNotToken:
.13bb	c9 40		cmp #$40			cmp 	#$40 						; if 0-3F then it is a letter
.13bd	b0 3e		bcs $13fd			bcs 	Unimplemented
.13bf					_CRDefaultLet:
.13bf	20 b1 10	jsr $10b1			jsr 	CommandLet 					; do the default, LET
.13c2	4c 99 13	jmp $1399			jmp 	CRNextInstruction
.13c5					_CRCheckIndirect:
.13c5	c9 97		cmp #$97			cmp 	#TKW_PLING 					; !<term> =
.13c7	f0 f6		beq $13bf			beq 	_CRDefaultLet
.13c9	c9 98		cmp #$98			cmp 	#TKW_QMARK 					; ?<term> =
.13cb	f0 f2		beq $13bf			beq 	_CRDefaultLet
.13cd	d0 2e		bne $13fd			bne 	Unimplemented
.13cf					CommandShift1:
.13cf	b1 02		lda ($02),y			lda 	(codePtr),y 				; get shifted value
.13d1	10 2a		bpl $13fd			bpl 	Unimplemented 				; we have an error as this should not happen.
.13d3	0a		asl a				asl 	a 							; double into X
.13d4	aa		tax				tax
.13d5	c8		iny				iny 								; advance over it.
.13d6	20 dc 13	jsr $13dc			jsr 	_RunIt 						; we have no jsr (aaaa,X)
.13d9	4c 99 13	jmp $1399			jmp 	CRNextInstruction
.13dc					_RunIt:
.13dc	7c b3 14	jmp ($14b3,x)			jmp 	(Group1Vectors-6*2,x) 					; and do the code.
.13df					CommandShift2:
.13df	b1 02		lda ($02),y			lda 	(codePtr),y 				; get shifted value
.13e1	10 1a		bpl $13fd			bpl 	Unimplemented 				; we have an error as this should not happen.
.13e3	0a		asl a				asl 	a 							; double into X
.13e4	aa		tax				tax
.13e5	c8		iny				iny 								; advance over it.
.13e6	20 ec 13	jsr $13ec			jsr 	_RunIt 						; we have no jsr (aaaa,X)
.13e9	4c 99 13	jmp $1399			jmp 	CRNextInstruction
.13ec					_RunIt:
.13ec	7c c7 14	jmp ($14c7,x)			jmp 	(Group2Vectors-6*2,x) 					; and do the code.
.13ef					CommandColon:
.13ef	60		rts				rts
.13f0					ResetCodeAddress:
.13f0	ad c8 0a	lda $0ac8			lda 	basePage 					; copy basePage to code Pointer
.13f3	85 02		sta $02				sta 	codePtr
.13f5	ad c9 0a	lda $0ac9			lda 	basePage+1
.13f8	85 03		sta $03				sta 	codePtr+1
.13fa	a0 03		ldy #$03			ldy 	#3 							; offset after offset link and line#
.13fc	60		rts				rts
.13fd					Unimplemented:
.13fd	a2 01		ldx #$01			ldx 	#ErrorID_Missing
.13ff	20 65 21	jsr $2165			jsr 	ErrorHandler
.1402					TKErr01:
.1402					TKErr02:
.1402					TKErr03:
.1402					TKErr04:
.1402					TKErr05:
.1402					TKErr06:
.1402					TKErr07:
.1402					TKErr08:
.1402	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.1404	20 65 21	jsr $2165			jsr 	ErrorHandler

;******  Processing file: main/commands/../../generated/tokenvectors0.inc

.1407					Group0Vectors:
>1407	b5 15					.word	AdvanceNextLine          ; $80 [[eol]]
>1409	cf 13					.word	CommandShift1            ; $81 [[sh1]]
>140b	df 13					.word	CommandShift2            ; $82 [[sh2]]
>140d	fd 13					.word	Unimplemented            ; $83 [[sh3]]
>140f	fd 13					.word	Unimplemented            ; $84 [[fpc]]
>1411	02 14					.word	TKErr08                  ; $85 [[str]]
>1413	08 17					.word	AndHandler               ; $86 and
>1415	f5 16					.word	OrHandler                ; $87 or
>1417	e2 16					.word	XorHandler               ; $88 xor
>1419	2a 18					.word	CompareGreaterEq         ; $89 >=
>141b	34 18					.word	CompareLessEq            ; $8a <=
>141d	16 18					.word	CompareGreater           ; $8b >
>141f	0c 18					.word	CompareLess              ; $8c <
>1421	02 18					.word	CompareEquals            ; $8d =
>1423	20 18					.word	CompareNotEquals         ; $8e <>
>1425	73 16					.word	AddHandler               ; $8f +
>1427	96 16					.word	SubHandler               ; $90 -
>1429	2e 17					.word	ShrHandler               ; $91 >>
>142b	1b 17					.word	ShlHandler               ; $92 <<
>142d	a9 16					.word	MulHandler               ; $93 *
>142f	bc 16					.word	DivHandler               ; $94 /
>1431	cf 16					.word	ModHandler               ; $95 mod
>1433	67 17					.word	PowerHandler             ; $96 ^
>1435	41 17					.word	WordRefHandler           ; $97 !
>1437	54 17					.word	ByteRefHandler           ; $98 ?
>1439	55 26					.word	Command_Repeat           ; $99 repeat
>143b	83 26					.word	Command_While            ; $9a while
>143d	46 25					.word	Command_FOR              ; $9b for
>143f	75 10					.word	CommandIf                ; $9c if
>1441	02 14					.word	TKErr04                  ; $9d defproc
>1443	62 26					.word	Command_Until            ; $9e until
>1445	a6 26					.word	Command_Wend             ; $9f wend
>1447	a7 25					.word	Command_NEXT             ; $a0 next
>1449	02 14					.word	TKErr06                  ; $a1 then
>144b	b0 10					.word	Command_ENDIF            ; $a2 endif
>144d	66 13					.word	ReturnProc               ; $a3 endproc
>144f	f7 19					.word	UnaryParenthesis         ; $a4 (
>1451	49 1b					.word	UnaryLen                 ; $a5 len(
>1453	8d 1b					.word	UnarySgn                 ; $a6 sgn(
>1455	76 1b					.word	UnaryAbs                 ; $a7 abs(
>1457	e6 1b					.word	Unary_Random             ; $a8 random(
>1459	30 1c					.word	Unary_Page               ; $a9 page
>145b	33 20					.word	MInt32True               ; $aa true
>145d	37 20					.word	MInt32False              ; $ab false
>145f	fb 1b					.word	Unary_Min                ; $ac min(
>1461	ff 1b					.word	Unary_Max                ; $ad max(
>1463	e6 1c					.word	UnarySys                 ; $ae sys(
>1465	a9 1c					.word	UnaryTimer               ; $af timer(
>1467	cc 1a					.word	EventFunction            ; $b0 event(
>1469	d2 1c					.word	UnaryGet                 ; $b1 get(
>146b	c2 1c					.word	UnaryInkey               ; $b2 inkey(
>146d	7d 1c					.word	UnaryAlloc               ; $b3 alloc(
>146f	0e 1d					.word	ExecChr                  ; $b4 chr$(
>1471	22 1d					.word	ExecLeft                 ; $b5 left$(
>1473	3f 1d					.word	ExecMid                  ; $b6 mid$(
>1475	67 1d					.word	ExecRight                ; $b7 right$(
>1477	44 18					.word	Event_Str                ; $b8 str$(
>1479	73 18					.word	UnaryVal                 ; $b9 val(
>147b	a4 1b					.word	UnaryPeek                ; $ba peek(
>147d	aa 1b					.word	UnaryDeek                ; $bb deek(
>147f	b0 1b					.word	UnaryLeek                ; $bc leek(
>1481	67 1b					.word	UnaryAsc                 ; $bd asc(
>1483	5b 1c					.word	UnaryIntToFloat          ; $be int(
>1485	6e 1c					.word	UnaryFloatToInt          ; $bf float(
>1487	76 18					.word	UnaryIsVal               ; $c0 isval(
>1489	3e 1c					.word	UnaryReference           ; $c1 @
>148b	54 1c					.word	UnaryComplement          ; $c2 ~
>148d	51 1c					.word	UnaryHexMarker           ; $c3 &
>148f	02 14					.word	TKErr01                  ; $c4 )
>1491	ef 13					.word	CommandColon             ; $c5 :
>1493	02 14					.word	TKErr02                  ; $c6 ,
>1495	02 14					.word	TKErr03                  ; $c7 ;
>1497	81 13					.word	Command_Rem2             ; $c8 '
>1499	02 14					.word	TKErr07                  ; $c9 to
>149b	02 14					.word	TKErr05                  ; $ca step
>149d	f9 12					.word	CallProc                 ; $cb proc
>149f	fd 13					.word	Unimplemented            ; $cc local
>14a1	fd 13					.word	Unimplemented            ; $cd dim
>14a3	81 13					.word	Command_Rem              ; $ce rem
>14a5	b1 10					.word	CommandLet               ; $cf let
>14a7	fd 13					.word	Unimplemented            ; $d0 input
>14a9	aa 10					.word	Command_ELSE             ; $d1 else
>14ab	26 16					.word	Command_VDU              ; $d2 vdu
>14ad	5e 12					.word	Command_Print            ; $d3 print
>14af	f4 15					.word	CommandGOTO              ; $d4 goto
>14b1	c9 15					.word	CommandGOSUB             ; $d5 gosub
>14b3	dc 15					.word	CommandRETURN            ; $d6 return
>14b5	fd 13					.word	Unimplemented            ; $d7 data
>14b7	1a 10					.word	Command_Assert           ; $d8 assert
>14b9	21 12					.word	Command_Poke             ; $d9 poke
>14bb	25 12					.word	Command_Doke             ; $da doke
>14bd	29 12					.word	Command_Loke             ; $db loke

;******  Return to file: main/commands/run.asm


;******  Processing file: main/commands/../../generated/tokenvectors1.inc

.14bf					Group1Vectors:
>14bf	28 10					.word	CommandClear             ; $86 clear
>14c1	fd 13					.word	Unimplemented            ; $87 load
>14c3	fd 13					.word	Unimplemented            ; $88 save
>14c5	fd 13					.word	Unimplemented            ; $89 list
>14c7	13 12					.word	Command_New              ; $8a new
>14c9	8e 13					.word	Command_Run              ; $8b run
>14cb	fd 13					.word	Unimplemented            ; $8c read
>14cd	fd 13					.word	Unimplemented            ; $8d restore
>14cf	b2 15					.word	CommandEnd               ; $8e end
>14d1	ad 15					.word	CommandStop              ; $8f stop

;******  Return to file: main/commands/run.asm


;******  Processing file: main/commands/../../generated/tokenvectors2.inc

.14d3					Group2Vectors:
>14d3	fd 13					.word	Unimplemented            ; $86 vpoke

;******  Return to file: main/commands/run.asm


;******  Return to file: main/main.asm


;******  Processing file: main/commands/scanner.asm

.0af3					procList:
>0af3							.fill 	2		 					; terminated by name high.
.0af5					yInLine:
>0af5							.fill 	1
.14d5					FindProcedure:
.14d5	8c f5 0a	sty $0af5			sty 	yInLine
.14d8	20 93 15	jsr $1593			jsr 	CalculateProcedureHash		; calculate the hash of the procedure.
.14db	85 06		sta $06				sta 	temp1
.14dd	ad f3 0a	lda $0af3			lda		procList 					; put procList address in temp2
.14e0	85 08		sta $08				sta 	temp2
.14e2	ad f4 0a	lda $0af4			lda 	procList+1
.14e5	85 09		sta $09				sta 	temp2+1
.14e7	a0 00		ldy #$00			ldy 	#0 							; position in this table.
.14e9					_FPLoop:
.14e9	b1 08		lda ($08),y			lda 	(temp2),y
.14eb	f0 4f		beq $153c			beq 	_FPError 					; if so, we don't know this procedure.
.14ed	85 05		sta $05				sta 	temp0+1 					; copy MSB/LSB to temp0 as we go.
.14ef	c8		iny				iny
.14f0	b1 08		lda ($08),y			lda 	(temp2),y
.14f2	85 04		sta $04				sta 	temp0
.14f4	c8		iny				iny
.14f5	b1 08		lda ($08),y			lda 	(temp2),y					; check the procedure hash.
.14f7	c5 06		cmp $06				cmp 	temp1
.14f9	d0 2b		bne $1526			bne 	_FPNext 					; hash is different, go to next.
.14fb	38		sec				sec
.14fc	ad f5 0a	lda $0af5			lda 	yInLine 					; position in line must be at least 4
.14ff	e9 04		sbc #$04			sbc 	#4
.1501	18		clc				clc
.1502	65 02		adc $02				adc 	codePtr
.1504	85 0a		sta $0a				sta 	temp3
.1506	a5 03		lda $03				lda 	codePtr+1
.1508	69 00		adc #$00			adc 	#0
.150a	85 0b		sta $0b				sta 	temp3+1
.150c	98		tya				tya
.150d	48		pha				pha
.150e	a0 04		ldy #$04			ldy 	#4
.1510					_FPCName:
.1510	b1 0a		lda ($0a),y			lda 	(temp3),y 					; check the same
.1512	d1 04		cmp ($04),y			cmp 	(temp0),y
.1514	d0 0e		bne $1524			bne 	_FPpulYNext 				; if different go to next one.
.1516	c8		iny				iny
.1517	c9 3a		cmp #$3a			cmp 	#$3A
.1519	90 f5		bcc $1510			bcc 	_FPCName 					; compare the whole lot....
.151b	68		pla				pla 								; throw away the saved Y
.151c	98		tya				tya 								; length of name is Y-4
.151d	38		sec				sec
.151e	e9 04		sbc #$04			sbc 	#4
.1520	ac f5 0a	ldy $0af5			ldy 	yInLine  					; get the original Y back
.1523	60		rts				rts
.1524					_FPpulYNext:
.1524	68		pla				pla
.1525	a8		tay				tay
.1526					_FPNext:
.1526	c8		iny				iny 								; next procedure record.
.1527	10 c0		bpl $14e9			bpl 	_FPLoop 					; if done 128 already ... e.g. Y -ve
.1529	98		tya				tya 								; subtract 128 from Y
.152a	38		sec				sec
.152b	e9 80		sbc #$80			sbc 	#128
.152d	a8		tay				tay
.152e	18		clc				clc 								; add 128 to temp2, so we can have more than
.152f	a5 08		lda $08				lda 	temp2 						; 255/3 = 85 procedures
.1531	69 80		adc #$80			adc 	#128
.1533	85 08		sta $08				sta 	temp2
.1535	90 b2		bcc $14e9			bcc 	_FPLoop
.1537	e6 09		inc $09				inc 	temp2+1
.1539	4c e9 14	jmp $14e9			jmp 	_FPLoop
.153c					_FPError:
.153c	a2 17		ldx #$17			ldx 	#ErrorID_NoProc
.153e	20 65 21	jsr $2165			jsr 	ErrorHandler
.1541					ScanProc:
.1541	98		tya				tya
.1542	48		pha				pha
.1543	a5 0f		lda $0f				lda 	lowMemory 					; copy the start of the procList, at low memory
.1545	8d f3 0a	sta $0af3			sta 	procList
.1548	a5 10		lda $10				lda 	lowMemory+1
.154a	8d f4 0a	sta $0af4			sta 	procList+1
.154d	20 f0 13	jsr $13f0			jsr 	ResetCodeAddress 			; back to the start.
.1550					_ScanLoop:
.1550	a0 00		ldy #$00			ldy 	#0 							; check reached program end
.1552	b1 02		lda ($02),y			lda 	(codePtr),y
.1554	f0 2a		beq $1580			beq 	_ScanExit
.1556	a0 03		ldy #$03			ldy 	#3							; get first token
.1558	b1 02		lda ($02),y			lda 	(codePtr),y
.155a	c9 9d		cmp #$9d			cmp 	#TKW_DEFPROC				; skip next if not DEFPROC
.155c	d0 12		bne $1570			bne 	_ScanNext
.155e	a5 03		lda $03				lda 	codePtr+1 					; write high and low
.1560	20 88 15	jsr $1588			jsr 	_ScanWrite
.1563	a5 02		lda $02				lda 	codePtr
.1565	20 88 15	jsr $1588			jsr 	_ScanWrite
.1568	a0 04		ldy #$04			ldy 	#4 							; start of name part
.156a	20 93 15	jsr $1593			jsr 	CalculateProcedureHash 		; calculate procedure hash
.156d	20 88 15	jsr $1588			jsr 	_ScanWrite
.1570					_ScanNext:
.1570	18		clc				clc
.1571	a0 00		ldy #$00			ldy 	#0
.1573	b1 02		lda ($02),y			lda 	(codePtr),y
.1575	65 02		adc $02				adc 	codePtr
.1577	85 02		sta $02				sta 	codePtr
.1579	90 d5		bcc $1550			bcc 	_ScanLoop
.157b	e6 03		inc $03				inc 	codePtr+1
.157d	4c 50 15	jmp $1550			jmp 	_ScanLoop
.1580					_ScanExit:
.1580	a9 00		lda #$00			lda 	#0 							; write ending zero.
.1582	20 88 15	jsr $1588			jsr 	_ScanWrite
.1585	68		pla				pla
.1586	a8		tay				tay
.1587	60		rts				rts
.1588					_ScanWrite:
.1588	a0 00		ldy #$00			ldy 	#0
.158a	91 0f		sta ($0f),y			sta 	(lowMemory),y
.158c	e6 0f		inc $0f				inc 	lowMemory
.158e	d0 02		bne $1592			bne 	_SWNoCarry
.1590	e6 10		inc $10				inc 	lowMemory+1
.1592					_SWNoCarry:
.1592	60		rts				rts
.1593					CalculateProcedureHash:
.1593	a9 00		lda #$00			lda 	#0 							; clear hash.
.1595	85 04		sta $04				sta 	temp0
.1597					_CPHLoop:
.1597	18		clc				clc 								; add character and rotate and add carry back in
.1598	b1 02		lda ($02),y			lda 	(codePtr),y
.159a	65 04		adc $04				adc 	temp0
.159c	6a		ror a				ror 	a
.159d	69 0d		adc #$0d			adc 	#13 						; primes usually good for this sort of thing.
.159f	85 04		sta $04				sta 	temp0 						; (down with this sort of thing)
.15a1	b1 02		lda ($02),y			lda 	(codePtr),y
.15a3	c8		iny				iny 								; advance incase we go round again.
.15a4	c9 3a		cmp #$3a			cmp 	#$3A
.15a6	90 ef		bcc $1597			bcc 	_CPHLoop
.15a8	a5 04		lda $04				lda 	temp0
.15aa	a9 aa		lda #$aa			lda 	#$AA
.15ac	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/stopend.asm

.15ad					CommandStop:
.15ad	a2 06		ldx #$06			ldx 	#ErrorID_Stop
.15af	20 65 21	jsr $2165			jsr 	ErrorHandler
.15b2					CommandEnd:
.15b2	4c ff ff	jmp $ffff			jmp 	$FFFF 						; fudge to crash out of emulator
.15b5					AdvanceNextLine:
.15b5	a0 00		ldy #$00			ldy 	#0 							; get offset
.15b7	b1 02		lda ($02),y			lda 	(codePtr),y
.15b9	18		clc				clc 								; add to codePtr
.15ba	65 02		adc $02				adc 	codePtr
.15bc	85 02		sta $02				sta 	codePtr
.15be	90 02		bcc $15c2			bcc 	_ANLNoCarry
.15c0	e6 03		inc $03				inc 	codePtr+1
.15c2					_ANLNoCarry:
.15c2	b1 02		lda ($02),y			lda 	(codePtr),y 				; if end of program (or was just stand alone.
.15c4	f0 ec		beq $15b2			beq 	CommandEnd 					; execute END
.15c6	a0 03		ldy #$03			ldy 	#3 							; start of tokens on line.
.15c8	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/transfer.asm

.15c9					CommandGOSUB:
.15c9	20 3e 1a	jsr $1a3e			jsr 	EvaluateRootInteger			; get GOSUB line on stack top.
.15cc	a2 04		ldx #$04			ldx 	#4 							; allocate 4 bytes on stack for GOSUB
.15ce	a9 47		lda #$47			lda 	#markerGOSUB  				; <marker> <return addr/offset>
.15d0	20 d2 20	jsr $20d2			jsr 	RSClaim
.15d3	a9 01		lda #$01			lda 	#1 							; save position at offset 1.
.15d5	20 fe 20	jsr $20fe			jsr 	RSSavePosition
.15d8	a2 00		ldx #$00			ldx 	#0 							; point back at GOSUB line
.15da	f0 1b		beq $15f7			beq 	GotoTOS 					; and do a GOTO there.
.15dc					CommandRETURN:
.15dc	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.15de	a1 78		lda ($78,x)			lda 	(rsPointer,x)
.15e0	c9 47		cmp #$47			cmp 	#markerGOSUB 						; does it match
.15e2	f0 05		beq $15e9			beq 	_isok
.15e4	a2 0e		ldx #$0e			ldx 	#ErrorID_returnErr
.15e6	20 65 21	jsr $2165			jsr 	ErrorHandler
.15e9					_isok:
.15e9	a9 01		lda #$01			lda 	#1
.15eb	20 11 21	jsr $2111			jsr 	RSLoadPosition 				; reload the position from offset 1.
.15ee	a9 04		lda #$04			lda 	#4 							; throw 4 bytes from stack.
.15f0	20 f4 20	jsr $20f4			jsr 	RSFree
.15f3	60		rts				rts
.15f4					CommandGOTO:
.15f4	20 3e 1a	jsr $1a3e			jsr 	EvaluateRootInteger 		; get GOTO line on stack top.
.15f7					GotoTOS:
.15f7	20 f0 13	jsr $13f0			jsr 	ResetCodeAddress 			; simple search.
.15fa					_GotoSearch:
.15fa	a0 00		ldy #$00			ldy 	#0 							; get offset
.15fc	b1 02		lda ($02),y			lda 	(codePtr),y
.15fe	f0 21		beq $1621			beq 	_GotoError 					; not found.
.1600	c8		iny				iny									; check LSB match
.1601	b1 02		lda ($02),y			lda 	(codePtr),y
.1603	d5 48		cmp $48,x			cmp 	esInt0,x
.1605	d0 07		bne $160e			bne 	_GotoNext
.1607	c8		iny				iny
.1608	b1 02		lda ($02),y			lda 	(codePtr),y
.160a	d5 50		cmp $50,x			cmp 	esInt1,x
.160c	f0 10		beq $161e			beq 	_GotoFound
.160e					_GotoNext:
.160e	a0 00		ldy #$00			ldy 	#0 							; go next line
.1610	b1 02		lda ($02),y			lda 	(codePtr),y
.1612	18		clc				clc
.1613	65 02		adc $02				adc 	codePtr
.1615	85 02		sta $02				sta 	codePtr
.1617	90 e1		bcc $15fa			bcc 	_GotoSearch
.1619	e6 03		inc $03				inc 	codePtr+1
.161b	4c fa 15	jmp $15fa			jmp 	_GotoSearch
.161e					_GotoFound:
.161e	a0 03		ldy #$03			ldy 	#3 							; continue from that line
.1620	60		rts				rts
.1621					_GotoError:
.1621	a2 0c		ldx #$0c			ldx 	#ErrorID_LineNumber
.1623	20 65 21	jsr $2165			jsr 	ErrorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/commands/vdu.asm

.1626					Command_VDU:
.1626	20 3e 1a	jsr $1a3e			jsr 	EvaluateRootInteger 			; get integer at root.
.1629	a5 48		lda $48				lda 	esInt0
.162b	a2 04		ldx #$04		ldx	#4
.162d	20 58 21	jsr $2158		jsr	deviceHandler
.1630					_CVNext:
.1630	b1 02		lda ($02),y			lda 	(codePtr),y 					; what follows ?
.1632	c8		iny				iny
.1633	c9 c6		cmp #$c6			cmp 	#TKW_COMMA 						; comma, do again
.1635	f0 ef		beq $1626			beq 	Command_VDU
.1637	c9 c7		cmp #$c7			cmp 	#TKW_SEMICOLON 					; semicolon, print MSB
.1639	d0 0a		bne $1645			bne 	_CVExit
.163b	a5 50		lda $50				lda 	esInt1
.163d	a2 04		ldx #$04		ldx	#4
.163f	20 58 21	jsr $2158		jsr	deviceHandler
.1642	4c 30 16	jmp $1630			jmp 	_CVNext
.1645	88		dey		_CVExit:dey
.1646	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/while.asm

.2683					Command_While:
.2683	a9 57		lda #$57			lda 	#markerWhile 				; gosub marker allocate 4 bytes.
.2685	a2 04		ldx #$04			ldx 	#4
.2687	20 d2 20	jsr $20d2			jsr 	RSClaim 					; create on stack.
.268a	88		dey				dey
.268b	a9 01		lda #$01			lda 	#1
.268d	20 fe 20	jsr $20fe			jsr 	RSSavePosition 				; save position before the WHILE keyword.
.2690	c8		iny				iny
.2691	20 40 1a	jsr $1a40			jsr 	EvaluateInteger				; get the conditional
.2694	20 5e 20	jsr $205e			jsr 	MInt32Zero 	 				; if zero, skip forward.
.2697	f0 01		beq $269a			beq 	_CWFail
.2699	60		rts				rts
.269a					_CWFail:
.269a	a9 04		lda #$04			lda 	#4
.269c	20 f4 20	jsr $20f4			jsr 	RSFree 						; close the just opened position.
.269f	a9 9f		lda #$9f			lda 	#TKW_WEND 					; scan forward past WEND.
.26a1	aa		tax				tax
.26a2	20 be 26	jsr $26be			jsr 	ScanForward
.26a5	60		rts				rts
.26a6					Command_Wend:
.26a6	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.26a8	a1 78		lda ($78,x)			lda 	(rsPointer,x)
.26aa	c9 57		cmp #$57			cmp 	#markerWHILE 						; does it match
.26ac	f0 05		beq $26b3			beq 	_isok
.26ae	a2 11		ldx #$11			ldx 	#ErrorID_wendErr
.26b0	20 65 21	jsr $2165			jsr 	ErrorHandler
.26b3					_isok:
.26b3	a9 01		lda #$01			lda 	#1
.26b5	20 11 21	jsr $2111			jsr 	RSLoadPosition				; go back until true
.26b8	a9 04		lda #$04			lda 	#4
.26ba	20 f4 20	jsr $20f4			jsr 	RSFree 						; close the loop
.26bd	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/binary.asm

.1647					BinaryProcess:
.1647	b5 40		lda $40,x			lda 	esType,x 					; or type bytes together and check bit 6.
.1649	15 41		ora $41,x			ora 	esType+1,x
.164b	0a		asl a				asl 	a
.164c	30 0e		bmi $165c			bmi 	_BPStringType 				; if one is set, then string type.
.164e	18		clc				clc 								; return CC for integer
.164f	29 02		and #$02			and 	#$02 						; $02 because of ASL A.
.1651	f0 08		beq $165b			beq 	_BPExit 					; if both integer then return with CC.
.1653	20 61 16	jsr $1661			jsr 	BPMakeBothFloat 			; make both float
.1656	a9 01		lda #$01			lda 	#$01 						; set result type to float
.1658	95 40		sta $40,x			sta 	esType,x
.165a	38		sec				sec 								; and return with carry set.
.165b					_BPExit:
.165b	60		rts				rts
.165c					_BPStringType:
.165c	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.165e	20 65 21	jsr $2165			jsr 	ErrorHandler
.1661					BPMakeBothFloat:
.1661	e8		inx				inx
.1662	20 66 16	jsr $1666			jsr 	BPMakeFloat 				; one is a float, so we do both as floats.
.1665	ca		dex				dex
.1666					BPMakeFloat:
.1666	b5 40		lda $40,x			lda 	esType,x 					; get type bit.
.1668	4a		lsr a				lsr 	a
.1669	b0 07		bcs $1672			bcs 	_BPIsFloat
.166b	8a		txa				txa
.166c	a2 1a		ldx #$1a		ldx	#26
.166e	20 6c 21	jsr $216c		jsr	floatingpointHandler
.1671	aa		tax				tax
.1672					_BPIsFloat:
.1672	60		rts				rts
.1673					AddHandler:
.1673	20 c2 18	jsr $18c2			jsr 	DereferenceTwo 				; dereference top two on stack.
.1676	b5 40		lda $40,x			lda 	esType,x 					; check two strings.
.1678	35 41		and $41,x			and 	esType+1,x
.167a	29 40		and #$40			and 	#$40 						; if both have bit 6 set ...
.167c	d0 10		bne $168e			bne 	_AHStringConcat				; concatenate strings.
.167e	20 47 16	jsr $1647			jsr 	BinaryProcess 				; check to see if either is float
.1681	b0 03		bcs $1686			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.1683	4c 22 1f	jmp $1f22			jmp 	MInt32Add 							; else do it as integer.
.1686					_IsFPOperation:
.1686	8a		txa				txa 								; call the relevant fp routine
.1687	a2 02		ldx #$02		ldx	#2
.1689	20 6c 21	jsr $216c		jsr	floatingpointHandler
.168c	aa		tax				tax
.168d	60		rts				rts
.168e					_AHStringConcat:
.168e	8a		txa				txa
.168f	a2 04		ldx #$04		ldx	#4
.1691	20 c3 23	jsr $23c3		jsr	stringHandler
.1694	aa		tax				tax
.1695	60		rts				rts
.1696					SubHandler:
.1696	20 c2 18	jsr $18c2			jsr 	DereferenceTwo
.1699	20 47 16	jsr $1647			jsr 	BinaryProcess 				; check to see if either is float
.169c	b0 03		bcs $16a1			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.169e	4c 3c 1f	jmp $1f3c			jmp 	MInt32Sub 							; else do it as integer.
.16a1					_IsFPOperation:
.16a1	8a		txa				txa 								; call the relevant fp routine
.16a2	a2 10		ldx #$10		ldx	#16
.16a4	20 6c 21	jsr $216c		jsr	floatingpointHandler
.16a7	aa		tax				tax
.16a8	60		rts				rts
.16a9					MulHandler:
.16a9	20 c2 18	jsr $18c2			jsr 	DereferenceTwo
.16ac	20 47 16	jsr $1647			jsr 	BinaryProcess 				; check to see if either is float
.16af	b0 03		bcs $16b4			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.16b1	4c 56 1f	jmp $1f56			jmp 	MInt32Multiply 							; else do it as integer.
.16b4					_IsFPOperation:
.16b4	8a		txa				txa 								; call the relevant fp routine
.16b5	a2 0a		ldx #$0a		ldx	#10
.16b7	20 6c 21	jsr $216c		jsr	floatingpointHandler
.16ba	aa		tax				tax
.16bb	60		rts				rts
.16bc					DivHandler:
.16bc	20 c2 18	jsr $18c2			jsr 	DereferenceTwo
.16bf	20 47 16	jsr $1647			jsr 	BinaryProcess 				; check to see if either is float
.16c2	b0 03		bcs $16c7			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.16c4	4c 1a 1e	jmp $1e1a			jmp 	MInt32SDivide 							; else do it as integer.
.16c7					_IsFPOperation:
.16c7	8a		txa				txa 								; call the relevant fp routine
.16c8	a2 06		ldx #$06		ldx	#6
.16ca	20 6c 21	jsr $216c		jsr	floatingpointHandler
.16cd	aa		tax				tax
.16ce	60		rts				rts
.16cf					ModHandler:
.16cf	20 c2 18	jsr $18c2			jsr 	DereferenceTwo
.16d2	20 47 16	jsr $1647			jsr 	BinaryProcess 				; check to see if either is float
.16d5	b0 03		bcs $16da			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.16d7	4c 98 1e	jmp $1e98			jmp 	MInt32Modulus 							; else do it as integer.
.16da					_IsFPOperation:
.16da	8a		txa				txa 								; call the relevant fp routine
.16db	a2 08		ldx #$08		ldx	#8
.16dd	20 6c 21	jsr $216c		jsr	floatingpointHandler
.16e0	aa		tax				tax
.16e1	60		rts				rts
.16e2					XorHandler:
.16e2	20 c2 18	jsr $18c2			jsr 	DereferenceTwo
.16e5	20 47 16	jsr $1647			jsr 	BinaryProcess 				; check to see if either is float
.16e8	b0 03		bcs $16ed			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.16ea	4c cc 1d	jmp $1dcc			jmp 	MInt32Xor 							; else do it as integer.
.16ed					_IsFPOperation:
.16ed	8a		txa				txa 								; call the relevant fp routine
.16ee	a2 08		ldx #$08		ldx	#8
.16f0	20 6c 21	jsr $216c		jsr	floatingpointHandler
.16f3	aa		tax				tax
.16f4	60		rts				rts
.16f5					OrHandler:
.16f5	20 c2 18	jsr $18c2			jsr 	DereferenceTwo
.16f8	20 47 16	jsr $1647			jsr 	BinaryProcess 				; check to see if either is float
.16fb	b0 03		bcs $1700			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.16fd	4c b3 1d	jmp $1db3			jmp 	MInt32Or 							; else do it as integer.
.1700					_IsFPOperation:
.1700	8a		txa				txa 								; call the relevant fp routine
.1701	a2 08		ldx #$08		ldx	#8
.1703	20 6c 21	jsr $216c		jsr	floatingpointHandler
.1706	aa		tax				tax
.1707	60		rts				rts
.1708					AndHandler:
.1708	20 c2 18	jsr $18c2			jsr 	DereferenceTwo
.170b	20 47 16	jsr $1647			jsr 	BinaryProcess 				; check to see if either is float
.170e	b0 03		bcs $1713			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.1710	4c 9a 1d	jmp $1d9a			jmp 	MInt32And 							; else do it as integer.
.1713					_IsFPOperation:
.1713	8a		txa				txa 								; call the relevant fp routine
.1714	a2 08		ldx #$08		ldx	#8
.1716	20 6c 21	jsr $216c		jsr	floatingpointHandler
.1719	aa		tax				tax
.171a	60		rts				rts
.171b					ShlHandler:
.171b	20 c2 18	jsr $18c2			jsr 	DereferenceTwo
.171e	20 47 16	jsr $1647			jsr 	BinaryProcess 				; check to see if either is float
.1721	b0 03		bcs $1726			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.1723	4c 9c 17	jmp $179c			jmp 	Mint32ShiftLeftX 							; else do it as integer.
.1726					_IsFPOperation:
.1726	8a		txa				txa 								; call the relevant fp routine
.1727	a2 08		ldx #$08		ldx	#8
.1729	20 6c 21	jsr $216c		jsr	floatingpointHandler
.172c	aa		tax				tax
.172d	60		rts				rts
.172e					ShrHandler:
.172e	20 c2 18	jsr $18c2			jsr 	DereferenceTwo
.1731	20 47 16	jsr $1647			jsr 	BinaryProcess 				; check to see if either is float
.1734	b0 03		bcs $1739			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.1736	4c 9f 17	jmp $179f			jmp 	MInt32ShiftRightX 							; else do it as integer.
.1739					_IsFPOperation:
.1739	8a		txa				txa 								; call the relevant fp routine
.173a	a2 08		ldx #$08		ldx	#8
.173c	20 6c 21	jsr $216c		jsr	floatingpointHandler
.173f	aa		tax				tax
.1740	60		rts				rts
.1741					WordRefHandler:
.1741	20 c2 18	jsr $18c2			jsr 	DereferenceTwo
.1744	20 47 16	jsr $1647			jsr 	BinaryProcess 				; check to see if either is float
.1747	b0 03		bcs $174c			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.1749	4c 8e 17	jmp $178e			jmp 	MInt32WordIndirect 							; else do it as integer.
.174c					_IsFPOperation:
.174c	8a		txa				txa 								; call the relevant fp routine
.174d	a2 08		ldx #$08		ldx	#8
.174f	20 6c 21	jsr $216c		jsr	floatingpointHandler
.1752	aa		tax				tax
.1753	60		rts				rts
.1754					ByteRefHandler:
.1754	20 c2 18	jsr $18c2			jsr 	DereferenceTwo
.1757	20 47 16	jsr $1647			jsr 	BinaryProcess 				; check to see if either is float
.175a	b0 03		bcs $175f			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.175c	4c 92 17	jmp $1792			jmp 	MInt32ByteIndirect 							; else do it as integer.
.175f					_IsFPOperation:
.175f	8a		txa				txa 								; call the relevant fp routine
.1760	a2 08		ldx #$08		ldx	#8
.1762	20 6c 21	jsr $216c		jsr	floatingpointHandler
.1765	aa		tax				tax
.1766	60		rts				rts
.1767					PowerHandler:
.1767	20 c2 18	jsr $18c2			jsr 	DereferenceTwo
.176a	20 47 16	jsr $1647			jsr 	BinaryProcess 				; check to see if either is float
.176d	b0 03		bcs $1772			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.176f	4c 7a 17	jmp $177a			jmp 	PowerInteger 							; else do it as integer.
.1772					_IsFPOperation:
.1772	8a		txa				txa 								; call the relevant fp routine
.1773	a2 16		ldx #$16		ldx	#22
.1775	20 6c 21	jsr $216c		jsr	floatingpointHandler
.1778	aa		tax				tax
.1779	60		rts				rts
.177a					PowerInteger:
.177a	20 61 16	jsr $1661			jsr 	BPMakeBothFloat				; make them float.
.177d	8a		txa				txa
.177e	a2 16		ldx #$16		ldx	#22
.1780	20 6c 21	jsr $216c		jsr	floatingpointHandler
.1783	a2 12		ldx #$12		ldx	#18
.1785	20 6c 21	jsr $216c		jsr	floatingpointHandler
.1788	aa		tax				tax
.1789	a9 00		lda #$00			lda 	#0 							; make type integer
.178b	95 40		sta $40,x			sta 	esType,x
.178d	60		rts				rts
.178e					Mint32WordIndirect:
.178e	a9 80		lda #$80			lda 	#$80 				 		; word reference type
.1790	d0 02		bne $1794			bne 	Min32Indirect
.1792					Mint32ByteIndirect:
.1792	a9 a0		lda #$a0			lda 	#$A0 						; byte reference type
.1794					Min32Indirect:
.1794	48		pha				pha 								; save the indirection
.1795	20 22 1f	jsr $1f22			jsr 	MInt32Add 					; add a!b a?b
.1798	68		pla				pla 								; and set the type to reference.
.1799	95 40		sta $40,x			sta 	esType,x
.179b	60		rts				rts
.179c					Mint32ShiftLeftX:
.179c	18		clc				clc
.179d	90 01		bcc $17a0			bcc 	Mint32Shift
.179f					Mint32ShiftRightX:
.179f	38		sec				sec
.17a0					Mint32Shift:
.17a0	08		php				php 								; save carry flag on stack.
.17a1	b5 51		lda $51,x			lda 	esInt1+1,x 					; if shift >= 32 then it is zero.
.17a3	15 59		ora $59,x			ora 	esInt2+1,x
.17a5	15 61		ora $61,x			ora 	esInt3+1,x
.17a7	d0 1e		bne $17c7			bne 	_MShiftZero
.17a9	b5 49		lda $49,x			lda 	esInt0+1,x
.17ab	c9 20		cmp #$20			cmp 	#32
.17ad	b0 18		bcs $17c7			bcs 	_MShiftZero
.17af					_MShiftLoop:
.17af	b5 49		lda $49,x			lda 	esInt0+1,x 					; check count is zero
.17b1	f0 12		beq $17c5			beq 	_MShiftExit
.17b3	d6 49		dec $49,x			dec 	esInt0+1,x
.17b5	28		plp				plp 								; restore and save carry
.17b6	08		php				php
.17b7	90 06		bcc $17bf			bcc 	_MShiftLeft
.17b9	20 55 20	jsr $2055			jsr 	Mint32ShiftRight
.17bc	4c af 17	jmp $17af			jmp 	_MShiftLoop
.17bf					_MShiftLeft:
.17bf	20 4c 20	jsr $204c			jsr 	Mint32ShiftLeft
.17c2	4c af 17	jmp $17af			jmp 	_MShiftLoop
.17c5					_MShiftExit:
.17c5	28		plp				plp	 								; throw saved carry and exit
.17c6	60		rts				rts
.17c7					_MShiftZero:
.17c7	4c 37 20	jmp $2037			jmp 	MInt32False 				; return 0.

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/compare.asm

.17ca					PerformComparison:
.17ca	20 c2 18	jsr $18c2			jsr 	DereferenceTwo 				; make both values.
.17cd	b5 40		lda $40,x			lda 	esType,x 					; check for two strings.
.17cf	35 41		and $41,x			and 	esType+1,x
.17d1	0a		asl a				asl 	a
.17d2	30 1d		bmi $17f1			bmi 	_PCIsString
.17d4	b5 40		lda $40,x			lda 	esType,x 					; check either is floating point.
.17d6	15 41		ora $41,x			ora 	esType+1,x
.17d8	0a		asl a				asl 	a 							; shift bit 6 (string) to bit 7
.17d9	30 22		bmi $17fd			bmi 	_PCError
.17db	29 02		and #$02			and 	#$02 						; because of ASL, check type in bit 0
.17dd	f0 0f		beq $17ee			beq 	_PCIsInteger 				; if not two integers
.17df	20 61 16	jsr $1661			jsr 	BPMakeBothFloat 			; make both float
.17e2	8a		txa				txa
.17e3	a2 04		ldx #$04		ldx	#4
.17e5	20 6c 21	jsr $216c		jsr	floatingpointHandler
.17e8	86 0c		stx $0c				stx 	tempShort 					; save result
.17ea	aa		tax				tax
.17eb	a5 0c		lda $0c				lda 	tempShort
.17ed	60		rts				rts
.17ee					_PCIsInteger:
.17ee	4c e5 1d	jmp $1de5			jmp 	MInt32Compare
.17f1					_PCIsString:
.17f1	8a		txa				txa 								; A has SP
.17f2	a2 06		ldx #$06		ldx	#6
.17f4	20 c3 23	jsr $23c3		jsr	stringHandler
.17f7	86 0c		stx $0c				stx 	tempShort 					; save result
.17f9	aa		tax				tax 								; put SP back in X and get result.
.17fa	a5 0c		lda $0c				lda 	tempShort
.17fc	60		rts				rts
.17fd					_PCError:
.17fd	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.17ff	20 65 21	jsr $2165			jsr 	ErrorHandler
.1802					CompareEquals:
.1802	20 ca 17	jsr $17ca			jsr 	PerformComparison
.1805	c9 00		cmp #$00			cmp 	#$00
.1807	f0 35		beq $183e			beq  	CompareTrue
.1809	4c 41 18	jmp $1841			jmp 	CompareFalse
.180c					CompareLess:
.180c	20 ca 17	jsr $17ca			jsr 	PerformComparison
.180f	c9 ff		cmp #$ff			cmp 	#$FF
.1811	f0 2b		beq $183e			beq  	CompareTrue
.1813	4c 41 18	jmp $1841			jmp 	CompareFalse
.1816					CompareGreater:
.1816	20 ca 17	jsr $17ca			jsr 	PerformComparison
.1819	c9 01		cmp #$01			cmp 	#$01
.181b	f0 21		beq $183e			beq  	CompareTrue
.181d	4c 41 18	jmp $1841			jmp 	CompareFalse
.1820					CompareNotEquals:
.1820	20 ca 17	jsr $17ca			jsr 	PerformComparison
.1823	c9 00		cmp #$00			cmp 	#$00
.1825	d0 17		bne $183e			bne  	CompareTrue
.1827	4c 41 18	jmp $1841			jmp 	CompareFalse
.182a					CompareGreaterEq:
.182a	20 ca 17	jsr $17ca			jsr 	PerformComparison
.182d	c9 ff		cmp #$ff			cmp 	#$FF
.182f	d0 0d		bne $183e			bne  	CompareTrue
.1831	4c 41 18	jmp $1841			jmp 	CompareFalse
.1834					CompareLessEq:
.1834	20 ca 17	jsr $17ca			jsr 	PerformComparison
.1837	c9 01		cmp #$01			cmp 	#$01
.1839	d0 03		bne $183e			bne  	CompareTrue
.183b	4c 41 18	jmp $1841			jmp 	CompareFalse
.183e					CompareTrue:
.183e	4c 33 20	jmp $2033			jmp 	MInt32True
.1841					CompareFalse:
.1841	4c 37 20	jmp $2037			jmp 	MInt32False

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/convert.asm

.1844					Event_Str:
.1844	20 2a 1a	jsr $1a2a			jsr 	EvaluateNumeric 			; get a number.
.1847	b5 40		lda $40,x			lda 	esType,x 					; is it floating point
.1849	d0 13		bne $185e			bne 	_ESFloat
.184b	20 a1 18	jsr $18a1			jsr 	ConvertGetBase
.184e	a9 cd		lda #$cd			lda 	#(convertBuffer) & $FF
.1850	85 04		sta $04				sta 	temp0
.1852	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.1854	85 05		sta $05				sta 	1+(temp0)
.1856	b5 49		lda $49,x			lda 	esInt0+1,x 					; get the base
.1858	20 8d 1f	jsr $1f8d			jsr 	MInt32ToString 				; convert to string.
.185b	4c 6b 18	jmp $186b			jmp 	_ESCloneExit 				; clone and exit.
.185e					_ESFloat:
.185e	20 aa 20	jsr $20aa			jsr 	CheckRightParen 			; check closing )
.1861	20 26 11	jsr $1126			jsr 	TOSToTemp0 					; string address in temp0, goes here.
.1864	8a		txa				txa
.1865	a2 14		ldx #$14		ldx	#20
.1867	20 6c 21	jsr $216c		jsr	floatingpointHandler
.186a	aa		tax				tax
.186b					_ESCloneExit:
.186b	8a		txa				txa
.186c	a2 02		ldx #$02		ldx	#2
.186e	20 c3 23	jsr $23c3		jsr	stringHandler
.1871	aa		tax				tax
.1872	60		rts				rts
.1873					UnaryVal:
.1873	38		sec				sec
.1874	b0 01		bcs $1877			bcs 	ValueMain
.1876					UnaryIsVal:
.1876	18		clc				clc
.1877					ValueMain:
.1877	08		php				php 								; save results (CS is value, CC is validation)
.1878	20 35 1a	jsr $1a35			jsr 	EvaluateString
.187b	20 a1 18	jsr $18a1			jsr 	ConvertGetBase 				; get base, if any.
.187e	98		tya				tya
.187f	48		pha				pha
.1880	20 26 11	jsr $1126			jsr 	TOSToTemp0 					; string address in temp0, goes here.
.1883	b5 49		lda $49,x			lda 	esInt0+1,x 					; get the base
.1885	29 7f		and #$7f			and 	#$7F 						; ignore the sign bit.
.1887	20 ac 1e	jsr $1eac			jsr 	MInt32FromString 			; convert it back from a string.
.188a	b0 0c		bcs $1898			bcs 	_VMSuccess 					; successfully converted.
.188c	b5 49		lda $49,x			lda 	esInt0+1,x 					; is base the default
.188e	c9 8a		cmp #$8a			cmp 	#$80+10 					; if no, then it is integer only.
.1890	f0 00		beq $1892			beq 	_VMFailed 	 				; so we failed.
.1892					_VMFailed:
.1892	68		pla				pla
.1893	a8		tay				tay
.1894	28		plp				plp
.1895	4c 37 20	jmp $2037			jmp 	MInt32False 				; return 0 whatever.
.1898					_VMSuccess:
.1898	68		pla				pla
.1899	a8		tay				tay
.189a	28		plp				plp 								; if CS the it was val() so we want the value.
.189b	b0 03		bcs $18a0			bcs 	_VMExit
.189d	4c 33 20	jmp $2033			jmp 	MInt32True 					; otherwise return true as successful.
.18a0					_VMExit:
.18a0	60		rts				rts
.18a1					ConvertGetBase:
.18a1	a9 8a		lda #$8a			lda 	#10+$80 					; default base 10 signed.
.18a3	95 49		sta $49,x			sta 	esInt0+1,x
.18a5	b1 02		lda ($02),y			lda 	(codePtr),y
.18a7	c9 c6		cmp #$c6			cmp 	#TKW_COMMA
.18a9	d0 0e		bne $18b9			bne 	_CGBDone
.18ab	e8		inx				inx 								; next level
.18ac	c8		iny				iny 								; skip comma.
.18ad	20 48 1a	jsr $1a48			jsr 	EvaluateSmallInteger		; evaluate the base.
.18b0	ca		dex				dex
.18b1	c9 02		cmp #$02			cmp 	#2
.18b3	90 08		bcc $18bd			bcc 	_CGBValue
.18b5	c9 11		cmp #$11			cmp 	#17
.18b7	b0 04		bcs $18bd			bcs 	_CGBValue
.18b9					_CGBDone:
.18b9	20 aa 20	jsr $20aa			jsr 	CheckRightParen
.18bc	60		rts				rts
.18bd					_CGBValue:
.18bd	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.18bf	20 65 21	jsr $2165			jsr 	ErrorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/dereference.asm

.18c2					DereferenceTwo:
.18c2	e8		inx				inx
.18c3	20 c7 18	jsr $18c7			jsr 	DereferenceOne
.18c6	ca		dex				dex
.18c7					DereferenceOne:
.18c7	b5 40		lda $40,x			lda 	esType,x
.18c9	10 3d		bpl $1908			bpl 	_DRNotReference 			; is it a reference ?
.18cb	4a		lsr a				lsr 	a 							; do float dereference if bit 0 set.
.18cc	b0 3b		bcs $1909			bcs 	_DRFloatDeReference
.18ce	98		tya				tya
.18cf	48		pha				pha
.18d0	b5 48		lda $48,x			lda 	esInt0,x 					; copy address to temp0
.18d2	85 04		sta $04				sta 	temp0
.18d4	b5 50		lda $50,x			lda 	esInt1,x
.18d6	85 05		sta $05				sta 	temp0+1
.18d8	a9 00		lda #$00			lda 	#0 							; clear esInt1..3
.18da	95 50		sta $50,x			sta 	esInt1,x
.18dc	95 58		sta $58,x			sta 	esInt2,x
.18de	95 60		sta $60,x			sta 	esInt3,x
.18e0	b5 40		lda $40,x			lda 	esType,x 					; get the type byte.
.18e2	29 60		and #$60			and 	#$60 						; get string flag ($40) and byte flag ($20)
.18e4	0a		asl a				asl 	a 							; now string ($80) byte ($40)
.18e5	30 0d		bmi $18f4			bmi 	_DeRefString 				; string, 2 bytes only
.18e7	d0 11		bne $18fa			bne 	_DeRefByte 					; byte 1 byte only
.18e9					_DeRefLong:
.18e9	a0 03		ldy #$03			ldy 	#3
.18eb	b1 04		lda ($04),y			lda 	(temp0),y
.18ed	95 60		sta $60,x			sta 	esInt3,x
.18ef	88		dey				dey
.18f0	b1 04		lda ($04),y			lda 	(temp0),y
.18f2	95 58		sta $58,x			sta 	esInt2,x
.18f4					_DeRefString:
.18f4	a0 01		ldy #$01			ldy 	#1
.18f6	b1 04		lda ($04),y			lda 	(temp0),y
.18f8	95 50		sta $50,x			sta 	esInt1,x
.18fa					_DeRefByte:
.18fa	a0 00		ldy #$00			ldy 	#0
.18fc	b1 04		lda ($04),y			lda 	(temp0),y
.18fe	95 48		sta $48,x			sta 	esInt0,x
.1900	b5 40		lda $40,x			lda 	esType,x 					; clear byte and deref bits.
.1902	29 40		and #$40			and 	#$40
.1904	95 40		sta $40,x			sta 	esType,x
.1906	68		pla				pla
.1907	a8		tay				tay
.1908					_DRNotReference
.1908	60		rts				rts
.1909					_DRFloatDereference:
.1909	20 26 11	jsr $1126			jsr 	TOSToTemp0 					; address to deref in temp0
.190c	8a		txa				txa
.190d	a2 1c		ldx #$1c		ldx	#28
.190f	20 6c 21	jsr $216c		jsr	floatingpointHandler
.1912	aa		tax				tax
.1913	a9 01		lda #$01			lda 	#$01 						; type to FP (float)
.1915	95 40		sta $40,x			sta 	esType,x
.1917	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/evaluate.asm

.1918					EvaluateLevel:
.1918	48		pha				pha 								; save precedence level.
.1919	a9 00		lda #$00			lda 	#0 							; zero the current stack level.
.191b	95 48		sta $48,x			sta 	esInt0,x
.191d	95 50		sta $50,x			sta 	esInt1,x
.191f	95 58		sta $58,x			sta 	esInt2,x
.1921	95 60		sta $60,x			sta 	esInt3,x
.1923	95 40		sta $40,x			sta 	esType,x 					; zero the type (integer value)
.1925	b1 02		lda ($02),y			lda 	(codePtr),y	 				; look at first token/character
.1927	30 21		bmi $194a			bmi 	_ELIsToken 					; if -ve could be string, float, or unary function.
.1929	0a		asl a				asl 	a 							; if 00-3F then will now be PL and it's a variable.
.192a	30 0a		bmi $1936			bmi 	_ELIsConstant 				; 40-7F will be -ve and that's an integer constant.
.192c	8a		txa				txa 								; stack level in X
.192d	a2 00		ldx #$00		ldx	#0
.192f	20 3f 25	jsr $253f		jsr	variableHandler
.1932	aa		tax				tax
.1933	4c 73 19	jmp $1973			jmp		_ELHasTerm
.1936					_ELIsConstant:
.1936	4a		lsr a				lsr 	a 							; get the value back
.1937	29 3f		and #$3f			and 	#$3F 						; force into range 0-63
.1939	95 48		sta $48,x			sta 	esInt0,x 					; and put in LSB.
.193b					_ELCheckNext:
.193b	c8		iny				iny 								; look at next
.193c	b1 02		lda ($02),y			lda 	(codePtr),y
.193e	49 40		eor #$40			eor 	#$40 						; shift around so 40-7F => 00-3F
.1940	c9 40		cmp #$40			cmp 	#$40 						; out of range ?
.1942	b0 2f		bcs $1973			bcs 	_ELHasTerm 					; done getting the constant.
.1944	20 80 1a	jsr $1a80			jsr 	ELShiftByteIn 				; shift byte into position.
.1947	4c 3b 19	jmp $193b			jmp 	_ELCheckNext
.194a					_ELIsToken:
.194a	c9 85		cmp #$85			cmp 	#TOK_STR 					; handle strings.
.194c	f0 0f		beq $195d			beq 	_ELIsString
.194e	c9 84		cmp #$84			cmp 	#TOK_FPC 					; if no, then check unary.
.1950	d0 5f		bne $19b1			bne 	_ELCheckUnary
.1952	8a		txa				txa 								; put X into A
.1953	c8		iny				iny 								; skip over the float marker
.1954	a2 18		ldx #$18		ldx	#24
.1956	20 6c 21	jsr $216c		jsr	floatingpointHandler
.1959	aa		tax				tax 								; restore X
.195a	4c 73 19	jmp $1973			jmp 	_ELHasTerm
.195d					_ELIsString:
.195d	98		tya				tya 								; address of string is codePtr+y+1
.195e	38		sec				sec
.195f	65 02		adc $02				adc 	codePtr
.1961	95 48		sta $48,x			sta 	esInt0,x
.1963	a5 03		lda $03				lda 	codePtr+1
.1965	69 00		adc #$00			adc 	#0
.1967	95 50		sta $50,x			sta 	esInt1,x
.1969	a9 40		lda #$40			lda 	#$40 						; set type to string value
.196b	95 40		sta $40,x			sta 	esType,x
.196d	c8		iny				iny 								; skip over string.
.196e	98		tya				tya
.196f	38		sec				sec									; +1 for the length itself.
.1970	71 02		adc ($02),y			adc 	(codePtr),y
.1972	a8		tay				tay 								; and fall through to term loop code.
.1973					_ELHasTerm:
.1973	b1 02		lda ($02),y			lda 	(codePtr),y
.1975	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; check in the correct range for binary tokens.
.1977	90 04		bcc $197d			bcc 	_ELPopExit
.1979	c9 99		cmp #$99			cmp 	#TOK_STRUCTST
.197b	90 02		bcc $197f			bcc 	_ELHasBinaryTerm
.197d					_ELPopExit:
.197d	68		pla				pla
.197e					_ELExit:
.197e	60		rts				rts
.197f					_ELHasBinaryTerm:
.197f	84 0c		sty $0c				sty 	tempShort 					; save position
.1981	a8		tay				tay 								; use token as an index and get the precedence.
.1982	b9 28 1a	lda $1a28,y			lda 	ELBinaryOperatorInfo-TOK_BINARYST,y
.1985	a4 0c		ldy $0c				ldy 	tempShort 					; restore Y
.1987	85 0c		sta $0c				sta 	tempShort 					; save precedence in memory.
.1989	68		pla				pla 								; restore current level.
.198a	c5 0c		cmp $0c				cmp 	tempShort 					; if current >= operator then exit
.198c	b0 f0		bcs $197e			bcs 	_ELExit
.198e	48		pha				pha 								; save current level back on the stack.
.198f	b1 02		lda ($02),y			lda 	(codePtr),y 				; save the binary operator on the stack and skip it.
.1991	48		pha				pha
.1992	c8		iny				iny
.1993	e8		inx				inx 								; calculate the RHS at the operator precedence.
.1994	a5 0c		lda $0c				lda 	tempShort
.1996	20 18 19	jsr $1918			jsr 	EvaluateLevel
.1999	ca		dex				dex
.199a	68		pla				pla 								; get the operator back out.
.199b					_ELExecuteA:
.199b	86 0c		stx $0c				stx 	tempShort 					; upload the vectors. Would be nice to use jmp (aaaa,x)
.199d	0a		asl a				asl 	a 							; but not practical. May use push/rts later.
.199e	aa		tax				tax
.199f	bd 07 14	lda $1407,x			lda 	Group0Vectors,x
.19a2	85 04		sta $04				sta 	temp0
.19a4	bd 08 14	lda $1408,x			lda 	Group0Vectors+1,x
.19a7	85 05		sta $05				sta 	temp0+1
.19a9	a6 0c		ldx $0c				ldx 	tempShort
.19ab	20 f4 19	jsr $19f4			jsr 	_ELCallTemp0
.19ae	4c 73 19	jmp $1973			jmp 	_ELHasTerm 					; and loop back round.
.19b1					_ELCheckUnary:
.19b1	c8		iny				iny 								; skip over token.
.19b2	c9 90		cmp #$90			cmp 	#TKW_MINUS 					; is it - term
.19b4	f0 15		beq $19cb			beq 	_ELMinus
.19b6	c9 97		cmp #$97			cmp 	#TKW_PLING 					; is it ! or ? term
.19b8	f0 28		beq $19e2			beq 	_ELIndirect
.19ba	c9 98		cmp #$98			cmp 	#TKW_QMARK
.19bc	f0 24		beq $19e2			beq 	_ELIndirect
.19be	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST 				; must be TOK_UNARYST ... TOK_TOKENS
.19c0	90 04		bcc $19c6			bcc 	_ELUSyntax
.19c2	c9 c4		cmp #$c4			cmp 	#TOK_TOKENS
.19c4	90 d5		bcc $199b			bcc 	_ELExecuteA 				; if so do that token.
.19c6					_ELUSyntax:
.19c6	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.19c8	20 65 21	jsr $2165			jsr 	ErrorHandler
.19cb					_ELMinus:
.19cb	20 09 1a	jsr $1a09			jsr 	EvaluateNumericTerm 		; get a number to negate.
.19ce	b5 40		lda $40,x			lda 	esType,x 					; is it integer
.19d0	f0 0a		beq $19dc			beq 	_ELMinusInteger
.19d2	8a		txa				txa
.19d3	a2 0c		ldx #$0c		ldx	#12
.19d5	20 6c 21	jsr $216c		jsr	floatingpointHandler
.19d8	aa		tax				tax
.19d9	4c 73 19	jmp $1973			jmp 	_ELHasTerm
.19dc					_ELMinusInteger:
.19dc	20 f1 1f	jsr $1ff1			jsr 	MInt32Negate 				; do int negate
.19df	4c 73 19	jmp $1973			jmp 	_ELHasTerm
.19e2					_ELIndirect:
.19e2	48		pha				pha 								; save what we want (TKW_QMARK TWK_PLING)
.19e3	20 12 1a	jsr $1a12			jsr 	EvaluateIntegerTerm 		; integer address
.19e6	68		pla				pla
.19e7	49 97		eor #$97			eor 	#TKW_PLING 					; now $00 if !
.19e9	f0 02		beq $19ed			beq 	_ELHaveModifier
.19eb	a9 20		lda #$20			lda 	#$20 						; now $00 if !, $20 if ?
.19ed					_ELHaveModifier:
.19ed	09 80		ora #$80			ora 	#$80						; make it the appropriate reference.
.19ef	95 40		sta $40,x			sta 	esType,x
.19f1	4c 73 19	jmp $1973			jmp 	_ELHasTerm
.19f4					_ELCallTemp0:
.19f4	6c 04 00	jmp ($0004)			jmp 	(temp0)
.19f7					UnaryParenthesis:
.19f7	a9 00		lda #$00			lda 	#0 							; ( is a unary function ....
.19f9	20 18 19	jsr $1918			jsr 	EvaluateLevel
.19fc	20 aa 20	jsr $20aa			jsr 	CheckRightParen 			; check for )
.19ff	60		rts				rts
.1a00					EvaluateTerm:
.1a00	a9 0f		lda #$0f			lda 	#15
.1a02	20 18 19	jsr $1918			jsr 	EvaluateLevel
.1a05	20 c7 18	jsr $18c7			jsr 	DereferenceOne
.1a08	60		rts				rts
.1a09					EvaluateNumericTerm:
.1a09	20 00 1a	jsr $1a00			jsr 	EvaluateTerm
.1a0c	b5 40		lda $40,x			lda 	esType,x
.1a0e	0a		asl a				asl 	a 							; see if it's a string.
.1a0f	30 09		bmi $1a1a			bmi 	ENTType
.1a11	60		rts				rts
.1a12					EvaluateIntegerTerm:
.1a12	20 00 1a	jsr $1a00			jsr 	EvaluateTerm
.1a15	b5 40		lda $40,x			lda 	esType,x
.1a17	d0 01		bne $1a1a			bne 	ENTType
.1a19	60		rts				rts
.1a1a					ENTType:
.1a1a	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.1a1c	20 65 21	jsr $2165			jsr 	ErrorHandler
.1a1f					EvaluateRoot:
.1a1f	a2 00		ldx #$00			ldx 	#0
.1a21					Evaluate:
.1a21	a9 00		lda #$00			lda 	#0
.1a23	20 18 19	jsr $1918			jsr 	EvaluateLevel
.1a26	20 c7 18	jsr $18c7			jsr 	DereferenceOne
.1a29	60		rts				rts
.1a2a					EvaluateNumeric:
.1a2a	20 21 1a	jsr $1a21			jsr 	Evaluate
.1a2d	b5 40		lda $40,x			lda 	esType,x
.1a2f	0a		asl a				asl 	a 							; see if it's a string.
.1a30	30 e8		bmi $1a1a			bmi 	ENTType
.1a32	4a		lsr a				lsr 	a 							; shift float flag into carry.
.1a33	4a		lsr a				lsr 	a
.1a34	60		rts				rts
.1a35					EvaluateString:
.1a35	20 21 1a	jsr $1a21			jsr 	Evaluate
.1a38	b5 40		lda $40,x			lda 	esType,x
.1a3a	0a		asl a				asl 	a 							; see if it's a string.
.1a3b	10 dd		bpl $1a1a			bpl 	ENTType
.1a3d	60		rts				rts
.1a3e					EvaluateRootInteger:
.1a3e	a2 00		ldx #$00			ldx 	#0
.1a40					EvaluateInteger:
.1a40	20 21 1a	jsr $1a21			jsr 	Evaluate
.1a43	b5 40		lda $40,x			lda 	esType,x
.1a45	d0 d3		bne $1a1a			bne 	ENTType
.1a47	60		rts				rts
.1a48					EvaluateSmallInteger:
.1a48	20 40 1a	jsr $1a40			jsr 	EvaluateInteger
.1a4b	b5 50		lda $50,x			lda 	esInt1,x
.1a4d	15 58		ora $58,x			ora 	esInt2,x
.1a4f	15 60		ora $60,x			ora 	esInt3,x
.1a51	d0 03		bne $1a56			bne 	_ESIValue
.1a53	b5 48		lda $48,x			lda 	esInt0,x
.1a55	60		rts				rts
.1a56					_ESIValue:
.1a56	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.1a58	20 65 21	jsr $2165			jsr 	ErrorHandler
.1a5b					LinkEvaluate:
.1a5b	aa		tax				tax
.1a5c	20 21 1a	jsr $1a21			jsr 	Evaluate
.1a5f	8a		txa				txa
.1a60	60		rts				rts
.1a61					LinkEvaluateInteger:
.1a61	aa		tax				tax
.1a62	20 40 1a	jsr $1a40			jsr 	EvaluateInteger
.1a65	8a		txa				txa
.1a66	60		rts				rts
.1a67					LinkEvaluateSmallInt:
.1a67	aa		tax				tax
.1a68	20 48 1a	jsr $1a48			jsr 	EvaluateSmallInteger
.1a6b	8a		txa				txa
.1a6c	60		rts				rts
.1a6d					EvaluateReference:
.1a6d	ad bf 1a	lda $1abf			lda 	ELBinaryOperatorInfo+TKW_PLING-TOK_BINARYST
.1a70	38		sec				sec 								; sub 1 to allow a!x b?x to work.
.1a71	e9 01		sbc #$01			sbc 	#1
.1a73	20 18 19	jsr $1918			jsr 	EvaluateLevel
.1a76	b5 40		lda $40,x			lda 	esType,x
.1a78	10 01		bpl $1a7b			bpl 	_ERFail
.1a7a	60		rts				rts
.1a7b					_ERFail:
.1a7b	a2 0b		ldx #$0b			ldx 	#ErrorID_NoReference
.1a7d	20 65 21	jsr $2165			jsr 	ErrorHandler
.1a80					ELShiftByteIn:
.1a80	48		pha				pha 								; save bits to shift in.
.1a81	b5 60		lda $60,x			lda 	esInt3,x 					; save top most byte
.1a83	48		pha				pha
.1a84	b5 58		lda $58,x			lda 	esInt2,x 					; shift everything left 8 bits
.1a86	95 60		sta $60,x			sta 	esInt3,x
.1a88	b5 50		lda $50,x			lda 	esInt1,x
.1a8a	95 58		sta $58,x			sta 	esInt2,x
.1a8c	b5 48		lda $48,x			lda 	esInt0,x
.1a8e	95 50		sta $50,x			sta 	esInt1,x
.1a90	a9 00		lda #$00			lda 	#0
.1a92	95 48		sta $48,x			sta 	esInt0,x
.1a94	68		pla				pla 								; now A:TOS is a 5 byte register, shift right twice.
.1a95	29 03		and #$03			and 	#3 							; only want lower 2 bits
.1a97	09 04		ora #$04			ora 	#4  						; set bit 2 - when 1 we are done
.1a99					_ELShiftLoop:
.1a99	4a		lsr a				lsr 	a
.1a9a	76 60		ror $60,x			ror 	esInt3,x
.1a9c	76 58		ror $58,x			ror 	esInt2,x
.1a9e	76 50		ror $50,x			ror 	esInt1,x
.1aa0	76 48		ror $48,x			ror 	esInt0,x
.1aa2	c9 01		cmp #$01			cmp 	#1
.1aa4	d0 f3		bne $1a99			bne 	_ELShiftLoop
.1aa6	68		pla				pla 								; get original 6 bit value and OR in.
.1aa7	29 3f		and #$3f			and 	#$3F
.1aa9	15 48		ora $48,x			ora 	esInt0,x
.1aab	95 48		sta $48,x			sta 	esInt0,x
.1aad	60		rts				rts
.1aae					ELBinaryOperatorInfo:

;******  Processing file: main/evaluate/../../generated/binarystructinfo.inc

>1aae	01					.byte	$01			; $86 and
>1aaf	01					.byte	$01			; $87 or
>1ab0	01					.byte	$01			; $88 xor
>1ab1	02					.byte	$02			; $89 >=
>1ab2	02					.byte	$02			; $8a <=
>1ab3	02					.byte	$02			; $8b >
>1ab4	02					.byte	$02			; $8c <
>1ab5	02					.byte	$02			; $8d =
>1ab6	02					.byte	$02			; $8e <>
>1ab7	03					.byte	$03			; $8f +
>1ab8	03					.byte	$03			; $90 -
>1ab9	04					.byte	$04			; $91 >>
>1aba	04					.byte	$04			; $92 <<
>1abb	04					.byte	$04			; $93 *
>1abc	04					.byte	$04			; $94 /
>1abd	04					.byte	$04			; $95 mod
>1abe	05					.byte	$05			; $96 ^
>1abf	06					.byte	$06			; $97 !
>1ac0	06					.byte	$06			; $98 ?
>1ac1	82					.byte	$82			; $99 repeat
>1ac2	82					.byte	$82			; $9a while
>1ac3	82					.byte	$82			; $9b for
>1ac4	82					.byte	$82			; $9c if
>1ac5	82					.byte	$82			; $9d defproc
>1ac6	80					.byte	$80			; $9e until
>1ac7	80					.byte	$80			; $9f wend
>1ac8	80					.byte	$80			; $a0 next
>1ac9	80					.byte	$80			; $a1 then
>1aca	80					.byte	$80			; $a2 endif
>1acb	80					.byte	$80			; $a3 endproc

;******  Return to file: main/evaluate/evaluate.asm


;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/event.asm

.1acc					EventFunction:
.1acc	20 6d 1a	jsr $1a6d			jsr 	EvaluateReference			; get the variable reference.
.1acf	b5 40		lda $40,x			lda 	esType,x
.1ad1	c9 80		cmp #$80			cmp 	#$80 						; must be int ref
.1ad3	d0 55		bne $1b2a			bne 	_EFType
.1ad5	20 b7 20	jsr $20b7			jsr 	CheckComma
.1ad8	e8		inx				inx
.1ad9	20 40 1a	jsr $1a40			jsr 	EvaluateInteger		 		; get the elapsed time between firing.
.1adc	20 aa 20	jsr $20aa			jsr 	CheckRightParen 			; finish off with the
.1adf	ca		dex				dex
.1ae0	b5 50		lda $50,x			lda 	esInt1,x 					; check max of 32767
.1ae2	29 80		and #$80			and 	#$80
.1ae4	15 58		ora $58,x			ora 	esInt2,x
.1ae6	15 60		ora $60,x			ora 	esInt3,x
.1ae8	d0 3b		bne $1b25			bne 	_EFValue
.1aea	98		tya				tya
.1aeb	48		pha				pha
.1aec	8a		txa				txa
.1aed	48		pha				pha
.1aee	a2 08		ldx #$08		ldx	#8
.1af0	20 58 21	jsr $2158		jsr	deviceHandler
.1af3	84 07		sty $07				sty 	temp1+1
.1af5	85 06		sta $06				sta 	temp1
.1af7	68		pla				pla
.1af8	aa		tax				tax
.1af9	20 26 11	jsr $1126			jsr 	TOSToTemp0 					; point temp0 to the variable.
.1afc	a0 00		ldy #$00			ldy 	#0 							; is the fire time zero ?
.1afe	b1 04		lda ($04),y			lda 	(temp0),y
.1b00	c8		iny				iny
.1b01	11 04		ora ($04),y			ora 	(temp0),y
.1b03	f0 17		beq $1b1c			beq 	_EFInitialise 				; if so, initialise the value but return false.
.1b05	a0 00		ldy #$00			ldy 	#0 							; calculate trigger - timer
.1b07	38		sec				sec
.1b08	b1 04		lda ($04),y			lda 	(temp0),y
.1b0a	e5 06		sbc $06				sbc 	temp1
.1b0c	c8		iny				iny
.1b0d	b1 04		lda ($04),y			lda 	(temp0),y
.1b0f	e5 07		sbc $07				sbc 	temp1+1
.1b11	10 0c		bpl $1b1f			bpl 	_EFFail 					; if trigger >= timer then return False
.1b13	20 2f 1b	jsr $1b2f			jsr 	SetEventTimer 				; reset the timer for next time.
.1b16	20 33 20	jsr $2033			jsr	 	MInt32True 					; and treutn true as fired.
.1b19	68		pla				pla
.1b1a	a8		tay				tay
.1b1b	60		rts				rts
.1b1c					_EFInitialise:
.1b1c	20 2f 1b	jsr $1b2f			jsr		SetEventTimer 				; set trigger time to time + elapsed
.1b1f					_EFFail:
.1b1f	20 37 20	jsr $2037			jsr 	MInt32False
.1b22	68		pla				pla
.1b23	a8		tay				tay
.1b24	60		rts				rts
.1b25					_EFValue:
.1b25	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.1b27	20 65 21	jsr $2165			jsr 	ErrorHandler
.1b2a					_EFType:
.1b2a	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.1b2c	20 65 21	jsr $2165			jsr 	ErrorHandler
.1b2f					SetEventTimer:
.1b2f	a0 00		ldy #$00			ldy 	#0 							; add elapsed to current time, store in variable
.1b31	18		clc				clc
.1b32	a5 06		lda $06				lda 	temp1
.1b34	75 49		adc $49,x			adc 	esInt0+1,x
.1b36	91 04		sta ($04),y			sta		(temp0),y
.1b38	c8		iny				iny
.1b39	a5 07		lda $07				lda 	temp1+1
.1b3b	75 51		adc $51,x			adc 	esInt1+1,x
.1b3d	91 04		sta ($04),y			sta		(temp0),y
.1b3f	88		dey				dey
.1b40	11 04		ora ($04),y			ora 	(temp0),y 					; if the result is non zero, exit
.1b42	d0 04		bne $1b48			bne 	_SETExit
.1b44	a9 01		lda #$01			lda 	#1 							; timer zero won't work, so make it 1, which is
.1b46	91 04		sta ($04),y			sta 	(temp0),y 					; near enough.
.1b48					_SETExit:
.1b48	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary.asm

.1b49					UnaryLen:
.1b49	20 57 1b	jsr $1b57			jsr 	ULStart
.1b4c					ULFinish:
.1b4c	b1 04		lda ($04),y			lda 	(temp0),y
.1b4e	a4 0c		ldy $0c				ldy 	tempShort
.1b50	20 46 20	jsr $2046			jsr 	MInt32Set8Bit
.1b53	20 aa 20	jsr $20aa			jsr 	CheckRightParen
.1b56	60		rts				rts
.1b57	20 35 1a	jsr $1a35	ULStart:jsr 	EvaluateString
.1b5a	b5 48		lda $48,x			lda 	esInt0,x 					; copy address of string to temp0
.1b5c	85 04		sta $04				sta 	temp0
.1b5e	b5 50		lda $50,x			lda 	esInt1,x
.1b60	85 05		sta $05				sta 	temp0+1
.1b62	84 0c		sty $0c				sty 	tempShort 					; get length
.1b64	a0 00		ldy #$00			ldy 	#0
.1b66	60		rts				rts
.1b67					UnaryAsc:
.1b67	20 57 1b	jsr $1b57			jsr 	ULStart 					; same as LEN() get string, save Y, point to length.
.1b6a	b1 04		lda ($04),y			lda 	(temp0),y
.1b6c	c8		iny				iny 		 						; point to first character, we can do LEN code after that
.1b6d	c9 00		cmp #$00			cmp 	#0
.1b6f	d0 db		bne $1b4c			bne 	ULFinish
.1b71	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.1b73	20 65 21	jsr $2165			jsr 	ErrorHandler
.1b76					UnaryAbs:
.1b76	20 2a 1a	jsr $1a2a			jsr 	EvaluateNumeric
.1b79	b0 07		bcs $1b82			bcs 	_UAFloat
.1b7b	20 ec 1f	jsr $1fec			jsr 	MInt32Absolute
.1b7e	20 aa 20	jsr $20aa			jsr 	CheckRightParen
.1b81	60		rts				rts
.1b82					_UAFloat:
.1b82	8a		txa				txa
.1b83	a2 00		ldx #$00		ldx	#0
.1b85	20 6c 21	jsr $216c		jsr	floatingpointHandler
.1b88	aa		tax				tax
.1b89	20 aa 20	jsr $20aa			jsr 	CheckRightParen
.1b8c	60		rts				rts
.1b8d					UnarySgn:
.1b8d	20 2a 1a	jsr $1a2a			jsr 	EvaluateNumeric
.1b90	b0 07		bcs $1b99			bcs 	_USFloat
.1b92	20 24 20	jsr $2024			jsr 	MInt32Sign
.1b95	20 aa 20	jsr $20aa			jsr 	CheckRightParen
.1b98	60		rts				rts
.1b99					_USFloat:
.1b99	8a		txa				txa
.1b9a	a2 0e		ldx #$0e		ldx	#14
.1b9c	20 6c 21	jsr $216c		jsr	floatingpointHandler
.1b9f	aa		tax				tax
.1ba0	20 aa 20	jsr $20aa			jsr 	CheckRightParen
.1ba3	60		rts				rts
.1ba4					UnaryPeek:
.1ba4	20 d0 1b	jsr $1bd0			jsr 	PDLCode
.1ba7	4c c4 1b	jmp $1bc4			jmp 	PDLByte0
.1baa					UnaryDeek:
.1baa	20 d0 1b	jsr $1bd0			jsr 	PDLCode
.1bad	4c be 1b	jmp $1bbe			jmp 	PDLByte1
.1bb0					UnaryLeek:
.1bb0	20 d0 1b	jsr $1bd0			jsr 	PDLCode
.1bb3	a0 03		ldy #$03			ldy 	#3
.1bb5	b1 04		lda ($04),y			lda 	(temp0),y
.1bb7	95 60		sta $60,x			sta 	esInt3,x
.1bb9	88		dey				dey
.1bba	b1 04		lda ($04),y			lda 	(temp0),y
.1bbc	95 58		sta $58,x			sta 	esInt2,x
.1bbe					PDLByte1:
.1bbe	a0 01		ldy #$01			ldy 	#1
.1bc0	b1 04		lda ($04),y			lda 	(temp0),y
.1bc2	95 50		sta $50,x			sta 	esInt1,x
.1bc4					PDLByte0:
.1bc4	a0 00		ldy #$00			ldy 	#0
.1bc6	b1 04		lda ($04),y			lda 	(temp0),y
.1bc8	95 48		sta $48,x			sta 	esInt0,x
.1bca	a4 0c		ldy $0c				ldy 	tempShort 					; restore Y
.1bcc	20 aa 20	jsr $20aa			jsr 	CheckRightParen 			; check right and return
.1bcf	60		rts				rts
.1bd0					PDLCode:
.1bd0	20 40 1a	jsr $1a40			jsr 	EvaluateInteger
.1bd3	b5 48		lda $48,x			lda 	esInt0,x 					; copy address of string to temp0
.1bd5	85 04		sta $04				sta 	temp0
.1bd7	b5 50		lda $50,x			lda 	esInt1,x
.1bd9	85 05		sta $05				sta 	temp0+1
.1bdb	a9 00		lda #$00			lda 	#0 							; zero upper 3 bytes of result, type okay.
.1bdd	95 50		sta $50,x			sta 	esInt1,x
.1bdf	95 58		sta $58,x			sta 	esInt2,x
.1be1	95 60		sta $60,x			sta 	esInt3,x
.1be3	84 0c		sty $0c				sty 	tempShort 					; save Y
.1be5	60		rts				rts
.1be6					Unary_Random:
.1be6	20 67 20	jsr $2067			jsr 	MInt32Random 				; generate random number.
.1be9	b1 02		lda ($02),y			lda 	(codePtr),y 				; check followed by )
.1beb	c9 c4		cmp #$c4			cmp 	#TKW_RPAREN
.1bed	f0 08		beq $1bf7			beq 	_URExit
.1bef	e8		inx				inx 								; load range 0..r-1 into +1
.1bf0	20 40 1a	jsr $1a40			jsr 	EvaluateInteger
.1bf3	ca		dex				dex
.1bf4	20 98 1e	jsr $1e98			jsr 	MInt32Modulus 				; calculate random % modulus
.1bf7					_URExit:
.1bf7	20 aa 20	jsr $20aa			jsr 	CheckRightParen 			; check right and return
.1bfa	60		rts				rts
.1bfb					Unary_Min:
.1bfb	a9 01		lda #$01			lda 	#1 							; c1 cmp c2 needs to be > e.g. c1 > c2
.1bfd	d0 02		bne $1c01			bne 	UnaryMBody
.1bff					Unary_Max:
.1bff	a9 ff		lda #$ff			lda 	#$FF 						; c1 cmp c2 needs to be < e.g. c1 < c2
.1c01					UnaryMBody:
.1c01	48		pha				pha 								; save comparator on stack.
.1c02	20 21 1a	jsr $1a21			jsr 	Evaluate 					; get the first thing to check
.1c05					_UnaryMLoop:
.1c05	b1 02		lda ($02),y			lda 	(codePtr),y 				; found ), indicates end.
.1c07	c8		iny				iny
.1c08	c9 c4		cmp #$c4			cmp 	#TKW_RPAREN
.1c0a	f0 09		beq $1c15			beq 	_UnaryMExit
.1c0c	c9 c6		cmp #$c6			cmp 	#TKW_COMMA 					; found , indicates more.
.1c0e	f0 07		beq $1c17			beq 	_UnaryMCompare
.1c10	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.1c12	20 65 21	jsr $2165			jsr 	ErrorHandler
.1c15					_UnaryMExit:
.1c15	68		pla				pla 								; throw comparator and return.
.1c16	60		rts				rts
.1c17					_UnaryMCompare:
.1c17	e8		inx				inx 								; get the 2nd thing to evaluate
.1c18	20 21 1a	jsr $1a21			jsr 	Evaluate
.1c1b	ca		dex				dex
.1c1c	20 ca 17	jsr $17ca			jsr 	PerformComparison 			; this is part of evaluate/compare.asm
.1c1f	85 0c		sta $0c				sta 	tempShort 					; save result
.1c21	68		pla				pla 								; get what we need
.1c22	48		pha				pha
.1c23	c5 0c		cmp $0c				cmp 	tempShort 					; did we get it
.1c25	d0 de		bne $1c05			bne 	_UnaryMLoop 				; no, try another value.
.1c27	20 37 20	jsr $2037			jsr 	MInt32False 				; promote 2nd to 1st.
.1c2a	20 22 1f	jsr $1f22			jsr 	MInt32Add
.1c2d	4c 05 1c	jmp $1c05			jmp 	_UnaryMLoop
.1c30					Unary_Page:
.1c30	20 37 20	jsr $2037			jsr 	MInt32False 				; zero
.1c33	ad c8 0a	lda $0ac8			lda 	basePage 					; copy base page address in.
.1c36	95 48		sta $48,x			sta 	esInt0,x
.1c38	ad c9 0a	lda $0ac9			lda 	basePage+1
.1c3b	95 50		sta $50,x			sta 	esInt1,x
.1c3d	60		rts				rts
.1c3e					UnaryReference:
.1c3e	a9 0f		lda #$0f			lda 	#15
.1c40	20 18 19	jsr $1918			jsr 	EvaluateLevel 				; evaluate term and don't deference.
.1c43	b5 40		lda $40,x			lda 	esType,x 					; check it's a reference.
.1c45	10 05		bpl $1c4c			bpl 	UType
.1c47	a9 00		lda #$00			lda 	#0 							; make it an integer
.1c49	95 40		sta $40,x			sta 	esType,x
.1c4b	60		rts				rts
.1c4c					UType:
.1c4c	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.1c4e	20 65 21	jsr $2165			jsr 	ErrorHandler
.1c51					UnaryHexMarker:
.1c51	4c 12 1a	jmp $1a12			jmp 	EvaluateIntegerTerm
.1c54					UnaryComplement:
.1c54	20 12 1a	jsr $1a12			jsr 	EvaluateIntegerTerm
.1c57	20 0b 20	jsr $200b			jsr 	MInt32Not
.1c5a	60		rts				rts
.1c5b					UnaryIntToFloat:
.1c5b	20 2a 1a	jsr $1a2a			jsr 	EvaluateNumeric
.1c5e	b5 40		lda $40,x			lda 	esType,x
.1c60	d0 0b		bne $1c6d			bne 	_UIFExit
.1c62	8a		txa				txa
.1c63	a2 1a		ldx #$1a		ldx	#26
.1c65	20 6c 21	jsr $216c		jsr	floatingpointHandler
.1c68	aa		tax				tax
.1c69	a9 01		lda #$01			lda 	#1
.1c6b	95 40		sta $40,x			sta 	esType,x
.1c6d					_UIFExit:
.1c6d	60		rts				rts
.1c6e					UnaryFloatToInt:
.1c6e	20 2a 1a	jsr $1a2a			jsr 	EvaluateNumeric
.1c71	b5 40		lda $40,x			lda 	esType,x
.1c73	f0 07		beq $1c7c			beq 	_UFIExit
.1c75	8a		txa				txa
.1c76	a2 12		ldx #$12		ldx	#18
.1c78	20 6c 21	jsr $216c		jsr	floatingpointHandler
.1c7b	aa		tax				tax
.1c7c					_UFIExit:
.1c7c	60		rts				rts
.1c7d					UnaryAlloc:
.1c7d	e8		inx				inx 								; evaluate memory required
.1c7e	20 40 1a	jsr $1a40			jsr 	EvaluateInteger
.1c81	20 aa 20	jsr $20aa			jsr 	CheckRightParen
.1c84	ca		dex				dex
.1c85	b5 59		lda $59,x			lda 	esInt2+1,x 					; check at least in 64k range.
.1c87	15 61		ora $61,x			ora 	esInt3+1,x
.1c89	d0 19		bne $1ca4			bne 	_UABadValue
.1c8b	20 37 20	jsr $2037			jsr 	MInt32False					; zero return.
.1c8e	a5 10		lda $10				lda 	lowMemory+1 				; copy low memory in
.1c90	95 50		sta $50,x			sta 	esInt1,x
.1c92	a5 0f		lda $0f				lda 	lowMemory
.1c94	95 48		sta $48,x			sta 	esInt0,x
.1c96	18		clc				clc 								; add alloc required.
.1c97	75 49		adc $49,x			adc 	esInt0+1,x
.1c99	85 0f		sta $0f				sta 	lowMemory
.1c9b	a5 10		lda $10				lda 	lowMemory+1
.1c9d	75 51		adc $51,x			adc 	esInt1+1,x
.1c9f	85 10		sta $10				sta 	lowMemory+1
.1ca1	b0 01		bcs $1ca4			bcs		_UABadValue 				; overflow definitely bad.
.1ca3	60		rts				rts
.1ca4					_UABadValue:
.1ca4	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.1ca6	20 65 21	jsr $2165			jsr 	ErrorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary2.asm

.1ca9					UnaryTimer:
.1ca9	20 aa 20	jsr $20aa			jsr 	CheckRightParen
.1cac	98		tya				tya
.1cad	48		pha				pha
.1cae	20 5e 20	jsr $205e			jsr 	MInt32Zero 					; zero result
.1cb1	86 04		stx $04				stx 	temp0 						; returning in YA so can't use .pshx
.1cb3	a2 08		ldx #$08		ldx	#8
.1cb5	20 58 21	jsr $2158		jsr	deviceHandler
.1cb8	a6 04		ldx $04				ldx 	temp0						; restore X and update 16 bit result
.1cba	95 48		sta $48,x			sta 	esInt0,x
.1cbc	98		tya				tya
.1cbd	95 50		sta $50,x			sta 	esInt1,x
.1cbf	68		pla				pla
.1cc0	a8		tay				tay
.1cc1	60		rts				rts
.1cc2					UnaryInkey:
.1cc2	20 aa 20	jsr $20aa			jsr 	CheckRightParen
.1cc5	86 04		stx $04				stx 	temp0
.1cc7	a2 02		ldx #$02		ldx	#2
.1cc9	20 58 21	jsr $2158		jsr	deviceHandler
.1ccc	a6 04		ldx $04				ldx 	temp0
.1cce	20 46 20	jsr $2046			jsr 	MInt32Set8Bit
.1cd1	60		rts				rts
.1cd2					UnaryGet:
.1cd2	20 aa 20	jsr $20aa			jsr 	CheckRightParen
.1cd5	86 04		stx $04				stx 	temp0
.1cd7					_UGLoop:
.1cd7	a2 02		ldx #$02		ldx	#2
.1cd9	20 58 21	jsr $2158		jsr	deviceHandler
.1cdc	c9 00		cmp #$00			cmp 	#0
.1cde	f0 f7		beq $1cd7			beq 	_UGLoop
.1ce0	a6 04		ldx $04				ldx 	temp0
.1ce2	20 46 20	jsr $2046			jsr 	MInt32Set8Bit
.1ce5	60		rts				rts
.1ce6					UnarySys:
.1ce6	20 40 1a	jsr $1a40			jsr 	EvaluateInteger 				; get the address
.1ce9	20 aa 20	jsr $20aa			jsr 	CheckRightParen
.1cec	20 26 11	jsr $1126			jsr 	TOSToTemp0 						; copy to temp0
.1cef	8a		txa				txa
.1cf0	48		pha				pha
.1cf1	98		tya				tya
.1cf2	48		pha				pha
.1cf3	ad 00 0a	lda $0a00			lda 	("A"-"A")*4+SingleLetterVar 	; load AXY
.1cf6	ae 5c 0a	ldx $0a5c			ldx 	("X"-"A")*4+SingleLetterVar
.1cf9	ac 60 0a	ldy $0a60			ldy 	("Y"-"A")*4+SingleLetterVar
.1cfc	20 0b 1d	jsr $1d0b			jsr 	_CallTemp0
.1cff	85 0c		sta $0c				sta 	tempShort 						; restore YX
.1d01	68		pla				pla
.1d02	a8		tay				tay
.1d03	68		pla				pla
.1d04	aa		tax				tax
.1d05	a5 0c		lda $0c				lda 	tempShort
.1d07	20 46 20	jsr $2046			jsr 	MInt32Set8Bit 					; return result.
.1d0a	60		rts				rts
.1d0b					_CallTemp0:
.1d0b	6c 04 00	jmp ($0004)			jmp 	(temp0)

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unarystr.asm

.1d0e					ExecChr:
.1d0e	20 48 1a	jsr $1a48			jsr 	EvaluateSmallInteger		; character number
.1d11	20 aa 20	jsr $20aa			jsr 	CheckRightParen				; right bracket
.1d14	98		tya				tya
.1d15	48		pha				pha
.1d16	8a		txa				txa 								; A = stack
.1d17	b4 48		ldy $48,x			ldy 	esInt0,x					; Y = character
.1d19	a2 00		ldx #$00		ldx	#0
.1d1b	20 c3 23	jsr $23c3		jsr	stringHandler
.1d1e	aa		tax				tax 								; X = stack
.1d1f	68		pla				pla
.1d20	a8		tay				tay
.1d21	60		rts				rts
.1d22					ExecLeft:
.1d22	20 35 1a	jsr $1a35			jsr 	EvaluateString 				; string to stack,X
.1d25	20 b7 20	jsr $20b7			jsr 	CheckComma
.1d28	e8		inx				inx
.1d29	a9 01		lda #$01			lda 	#1 							; 1 for 2nd parameter.
.1d2b	20 46 20	jsr $2046			jsr 	MInt32Set8Bit
.1d2e	e8		inx				inx
.1d2f	20 48 1a	jsr $1a48			jsr 	EvaluateSmallInteger 		; smallint 3rd parameter
.1d32					ExecSubstring:
.1d32	ca		dex				dex 								; fix up X
.1d33	ca		dex				dex
.1d34	20 aa 20	jsr $20aa			jsr 	CheckRightParen 			; check closing right bracket.
.1d37	8a		txa				txa 								; do the substring and exit.
.1d38	a2 08		ldx #$08		ldx	#8
.1d3a	20 c3 23	jsr $23c3		jsr	stringHandler
.1d3d	aa		tax				tax
.1d3e	60		rts				rts
.1d3f					ExecMid:
.1d3f	20 35 1a	jsr $1a35			jsr 	EvaluateString 				; string to stack,X
.1d42	20 b7 20	jsr $20b7			jsr 	CheckComma
.1d45	e8		inx				inx
.1d46	20 48 1a	jsr $1a48			jsr 	EvaluateSmallInteger 		; smallint 2nd parameter
.1d49	c9 00		cmp #$00			cmp 	#0
.1d4b	f0 15		beq $1d62			beq 	_EMValue
.1d4d	e8		inx				inx
.1d4e	a9 ff		lda #$ff			lda 	#255 						; 255 default for 3nd parameter.
.1d50	20 46 20	jsr $2046			jsr 	MInt32Set8Bit
.1d53	b1 02		lda ($02),y			lda 	(codePtr),y 				; is there a ) next
.1d55	c9 c4		cmp #$c4			cmp 	#TKW_RPAREN 				; if so, just MID$(a$,2)
.1d57	f0 d9		beq $1d32			beq 	ExecSubString
.1d59	20 b7 20	jsr $20b7			jsr 	CheckComma
.1d5c	20 48 1a	jsr $1a48			jsr 	EvaluateSmallInteger 		; smallint 2nd parameter
.1d5f	4c 32 1d	jmp $1d32			jmp 	ExecSubString
.1d62					_EMValue:
.1d62	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.1d64	20 65 21	jsr $2165			jsr 	ErrorHandler
.1d67					ExecRight:
.1d67	20 35 1a	jsr $1a35			jsr 	EvaluateString 				; string to stack,X
.1d6a	20 b7 20	jsr $20b7			jsr 	CheckComma
.1d6d	e8		inx				inx
.1d6e	20 48 1a	jsr $1a48			jsr 	EvaluateSmallInteger 		; smallint 2nd parameter.
.1d71	ca		dex				dex
.1d72	98		tya				tya
.1d73	48		pha				pha
.1d74	b5 48		lda $48,x			lda 	esInt0,x 					; copy address of string to temp0
.1d76	85 04		sta $04				sta 	temp0
.1d78	b5 50		lda $50,x			lda 	esInt1,x
.1d7a	85 05		sta $05				sta 	temp0+1
.1d7c	a0 00		ldy #$00			ldy 	#0 							; point to length
.1d7e	b1 04		lda ($04),y			lda 	(temp0),y 					; get the length.
.1d80	18		clc				clc 								; add 1.
.1d81	69 01		adc #$01			adc 	#1
.1d83	38		sec				sec
.1d84	f5 49		sbc $49,x			sbc 	esInt0+1,x  				; subtract right count.
.1d86	f0 02		beq $1d8a			beq		_ERMake1 					; if zero, make it 1.
.1d88	b0 02		bcs $1d8c			bcs		_EROkay
.1d8a					_ERMake1:
.1d8a	a9 01		lda #$01			lda 	#1 							; start position.
.1d8c					_EROkay:
.1d8c	e8		inx				inx 								; set start pos.
.1d8d	95 48		sta $48,x			sta 	esInt0,x
.1d8f	e8		inx				inx
.1d90	a9 ff		lda #$ff			lda 	#255 						; 255 default for 3nd parameter.
.1d92	20 46 20	jsr $2046			jsr 	MInt32Set8Bit
.1d95	68		pla				pla
.1d96	a8		tay				tay
.1d97	4c 32 1d	jmp $1d32			jmp 	ExecSubString 				; do the substring code.

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32binary.asm

.1d9a					MInt32And:
.1d9a	b5 48		lda $48,x			lda 	esInt0,x
.1d9c	35 49		and $49,x			and 	esInt0+1,x
.1d9e	95 48		sta $48,x			sta 	esInt0,x
.1da0	b5 50		lda $50,x			lda 	esInt1,x
.1da2	35 51		and $51,x			and 	esInt1+1,x
.1da4	95 50		sta $50,x			sta 	esInt1,x
.1da6	b5 58		lda $58,x			lda 	esInt2,x
.1da8	35 59		and $59,x			and 	esInt2+1,x
.1daa	95 58		sta $58,x			sta 	esInt2,x
.1dac	b5 60		lda $60,x			lda 	esInt3,x
.1dae	35 61		and $61,x			and 	esInt3+1,x
.1db0	95 60		sta $60,x			sta 	esInt3,x
.1db2	60		rts				rts
.1db3					MInt32Or:
.1db3	b5 48		lda $48,x			lda 	esInt0,x
.1db5	15 49		ora $49,x			ora 	esInt0+1,x
.1db7	95 48		sta $48,x			sta 	esInt0,x
.1db9	b5 50		lda $50,x			lda 	esInt1,x
.1dbb	15 51		ora $51,x			ora 	esInt1+1,x
.1dbd	95 50		sta $50,x			sta 	esInt1,x
.1dbf	b5 58		lda $58,x			lda 	esInt2,x
.1dc1	15 59		ora $59,x			ora 	esInt2+1,x
.1dc3	95 58		sta $58,x			sta 	esInt2,x
.1dc5	b5 60		lda $60,x			lda 	esInt3,x
.1dc7	15 61		ora $61,x			ora 	esInt3+1,x
.1dc9	95 60		sta $60,x			sta 	esInt3,x
.1dcb	60		rts				rts
.1dcc					MInt32Xor:
.1dcc	b5 48		lda $48,x			lda 	esInt0,x
.1dce	55 49		eor $49,x			eor 	esInt0+1,x
.1dd0	95 48		sta $48,x			sta 	esInt0,x
.1dd2	b5 50		lda $50,x			lda 	esInt1,x
.1dd4	55 51		eor $51,x			eor 	esInt1+1,x
.1dd6	95 50		sta $50,x			sta 	esInt1,x
.1dd8	b5 58		lda $58,x			lda 	esInt2,x
.1dda	55 59		eor $59,x			eor 	esInt2+1,x
.1ddc	95 58		sta $58,x			sta 	esInt2,x
.1dde	b5 60		lda $60,x			lda 	esInt3,x
.1de0	55 61		eor $61,x			eor 	esInt3+1,x
.1de2	95 60		sta $60,x			sta 	esInt3,x
.1de4	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32compare.asm

.1de5					MInt32Compare:
.1de5	b5 48		lda $48,x			lda 	esInt0,x 					; equality check.
.1de7	d5 49		cmp $49,x			cmp 	esInt0+1,x
.1de9	d0 13		bne $1dfe			bne 	MInt32Compare2
.1deb	b5 50		lda $50,x			lda 	esInt1,x
.1ded	d5 51		cmp $51,x			cmp 	esInt1+1,x
.1def	d0 0d		bne $1dfe			bne 	MInt32Compare2
.1df1	b5 58		lda $58,x			lda 	esInt2,x
.1df3	d5 59		cmp $59,x			cmp 	esInt2+1,x
.1df5	d0 07		bne $1dfe			bne 	MInt32Compare2
.1df7	b5 60		lda $60,x			lda 	esInt3,x
.1df9	55 61		eor $61,x			eor 	esInt3+1,x 					; will return 0 if the same.
.1dfb	d0 01		bne $1dfe			bne 	MInt32Compare2
.1dfd	60		rts				rts
.1dfe					MInt32Compare2:
.1dfe	b5 48		lda $48,x			lda		esInt0,x 					; unsigned 32 bit comparison.
.1e00	d5 49		cmp $49,x			cmp 	esInt0+1,x
.1e02	b5 50		lda $50,x			lda		esInt1,x
.1e04	f5 51		sbc $51,x			sbc 	esInt1+1,x
.1e06	b5 58		lda $58,x			lda		esInt2,x
.1e08	f5 59		sbc $59,x			sbc 	esInt2+1,x
.1e0a	b5 60		lda $60,x			lda		esInt3,x
.1e0c	f5 61		sbc $61,x			sbc 	esInt3+1,x
.1e0e	50 02		bvc $1e12			bvc 	_I32LNoOverflow 			; make it signed 32 bi comparison
.1e10	49 80		eor #$80			eor 	#$80
.1e12					_I32LNoOverflow
.1e12	30 03		bmi $1e17			bmi 	MInt32CLess					; if -ve then return $FF
.1e14	a9 01		lda #$01			lda 	#$01						; else return $01
.1e16	60		rts				rts
.1e17					MInt32CLess:
.1e17	a9 ff		lda #$ff			lda 	#$FF
.1e19	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32divide.asm

.1e1a					MInt32SDivide:
.1e1a	98		tya				tya  								; save Y, which is the count of negations
.1e1b	48		pha				pha
.1e1c	a0 00		ldy #$00			ldy 	#0 							; zero count
.1e1e	20 36 1e	jsr $1e36			jsr 	_MInt32SRemSign 			; unsign TOS
.1e21	e8		inx				inx 								; unsign TOS+1
.1e22	20 36 1e	jsr $1e36			jsr 	_MInt32SRemSign
.1e25	ca		dex				dex
.1e26	98		tya				tya 								; save sign count on stack
.1e27	48		pha				pha
.1e28	20 3f 1e	jsr $1e3f			jsr 	MInt32UDivide 				; unsigned division
.1e2b	68		pla				pla 								; get sign count back
.1e2c	29 01		and #$01			and 	#1 							; if it is odd, then negate result
.1e2e	f0 03		beq $1e33			beq 	_I32SNoNeg
.1e30	20 f1 1f	jsr $1ff1			jsr 	MInt32Negate
.1e33					_I32SNoNeg:
.1e33	68		pla				pla 								; restoe Y and exit
.1e34	a8		tay				tay
.1e35	60		rts				rts
.1e36					_MInt32SRemSign:
.1e36	b5 60		lda $60,x			lda 	esInt3,x 					; is it -ve
.1e38	10 04		bpl $1e3e			bpl 	_MInt32SRSExit
.1e3a	c8		iny				iny 								; increment the sign count
.1e3b	20 f1 1f	jsr $1ff1			jsr 	MInt32Negate 				; negate the value.
.1e3e					_MInt32SRSExit:
.1e3e	60		rts				rts
.1e3f					MInt32UDivide:
.1e3f	b5 49		lda $49,x			lda 	esInt0+1,x 					; check for division by zero
.1e41	15 51		ora $51,x			ora 	esInt1+1,x
.1e43	15 52		ora $52,x			ora 	esInt1+2,x
.1e45	15 53		ora $53,x			ora 	esInt1+3,x
.1e47	f0 4a		beq $1e93			beq 	_MInt32DZero
.1e49	e8		inx				inx 								; clear A
.1e4a	e8		inx				inx
.1e4b	20 37 20	jsr $2037			jsr 	MInt32False
.1e4e	ca		dex				dex
.1e4f	ca		dex				dex
.1e50	98		tya				tya 								; save Y on the stack
.1e51	48		pha				pha
.1e52	a0 20		ldy #$20			ldy 	#32 						; number of division passes
.1e54					_MInt32UDLoop:
.1e54	16 48		asl $48,x			asl 	esInt0,x					; shift QA left. First Q
.1e56	36 50		rol $50,x			rol 	esInt1,x
.1e58	36 58		rol $58,x			rol 	esInt2,x
.1e5a	36 60		rol $60,x			rol 	esInt3,x
.1e5c	36 4a		rol $4a,x			rol 	esInt0+2,x 					; then A.
.1e5e	36 52		rol $52,x			rol 	esInt1+2,x
.1e60	36 5a		rol $5a,x			rol 	esInt2+2,x
.1e62	36 62		rol $62,x			rol 	esInt3+2,x
.1e64	38		sec				sec 								; calculate A-M saving result on the stack
.1e65	b5 4a		lda $4a,x			lda 	esInt0+2,x
.1e67	f5 49		sbc $49,x			sbc 	esInt0+1,x
.1e69	48		pha				pha
.1e6a	b5 52		lda $52,x			lda 	esInt1+2,x
.1e6c	f5 51		sbc $51,x			sbc 	esInt1+1,x
.1e6e	48		pha				pha
.1e6f	b5 5a		lda $5a,x			lda 	esInt2+2,x
.1e71	f5 59		sbc $59,x			sbc 	esInt2+1,x
.1e73	48		pha				pha
.1e74	b5 62		lda $62,x			lda 	esInt3+2,x
.1e76	f5 61		sbc $61,x			sbc 	esInt3+1,x
.1e78	90 10		bcc $1e8a			bcc		_MInt32NoSubtract 			; if A < M (e.g. carry clear) then reject this.
.1e7a	95 62		sta $62,x			sta 	esInt3+2,x 					; write result back to A
.1e7c	68		pla				pla
.1e7d	95 5a		sta $5a,x			sta 	esInt2+2,x
.1e7f	68		pla				pla
.1e80	95 52		sta $52,x			sta 	esInt1+2,x
.1e82	68		pla				pla
.1e83	95 4a		sta $4a,x			sta 	esInt0+2,x
.1e85	f6 48		inc $48,x			inc 	esInt0,x 					; sets bit 0 of Q - it was shifted left previously.
.1e87	4c 8d 1e	jmp $1e8d			jmp 	_MInt32Next 					; do the next iteration
.1e8a					_MInt32NoSubtract:
.1e8a	68		pla				pla
.1e8b	68		pla				pla
.1e8c	68		pla				pla
.1e8d					_MInt32Next:
.1e8d	88		dey				dey 								; do this 32 times.
.1e8e	d0 c4		bne $1e54			bne 	_MInt32UDLoop
.1e90	68		pla				pla 								; restore Y and exit
.1e91	a8		tay				tay
.1e92	60		rts				rts
.1e93					_MInt32DZero:
.1e93	a2 05		ldx #$05			ldx 	#ErrorID_DivZero
.1e95	20 65 21	jsr $2165			jsr 	ErrorHandler
.1e98					MInt32Modulus:
.1e98	20 3f 1e	jsr $1e3f			jsr 	MInt32UDivide 				; do the division.
.1e9b	b5 62		lda $62,x			lda 	esInt3+2,x 					; copy 2nd on stack (the remainder) to the top.
.1e9d	95 60		sta $60,x			sta 	esInt3,x
.1e9f	b5 5a		lda $5a,x			lda 	esInt2+2,x
.1ea1	95 58		sta $58,x			sta 	esInt2,x
.1ea3	b5 52		lda $52,x			lda 	esInt1+2,x
.1ea5	95 50		sta $50,x			sta 	esInt1,x
.1ea7	b5 4a		lda $4a,x			lda 	esInt0+2,x
.1ea9	95 48		sta $48,x			sta 	esInt0,x
.1eab	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32fromstr.asm

.0af6					fs32Length:
>0af6							.fill 	1
.1eac					MInt32FromString:
.1eac	85 0c		sta $0c				sta 	tempShort 					; save base
.1eae	98		tya				tya
.1eaf	48		pha				pha
.1eb0	a0 00		ldy #$00			ldy 	#0 							; get length
.1eb2	b1 04		lda ($04),y			lda 	(temp0),y
.1eb4	8d f6 0a	sta $0af6			sta 	fs32Length
.1eb7	f0 65		beq $1f1e			beq 	_I32FSFail2					; fail if length zero.
.1eb9	a0 01		ldy #$01			ldy 	#1 							; set index into string being read
.1ebb	b1 04		lda ($04),y			lda 	(temp0),y 					; look at first character
.1ebd	c9 2d		cmp #$2d			cmp 	#"-"						; is it a - character
.1ebf	d0 09		bne $1eca			bne 	_I32FSNotNegative
.1ec1	ad f6 0a	lda $0af6			lda 	fs32Length 					; get length back.
.1ec4	c9 01		cmp #$01			cmp 	#1 							; if 1 it is just a '-; so fail.'
.1ec6	f0 56		beq $1f1e			beq 	_I32FSFail2
.1ec8	a0 02		ldy #$02			ldy 	#2 							; first digit of the number.
.1eca					_I32FSNotNegative:
.1eca	a5 0c		lda $0c				lda 	tempShort 					; get the base back.
.1ecc	c0 02		cpy #$02			cpy 	#2 							; if we read a -ve (e.g. Y == 2)
.1ece	d0 02		bne $1ed2			bne 	_I32FSNN2
.1ed0	09 80		ora #$80			ora 	#$80						; set bit 7, this indicates a negated result.
.1ed2					_I32FSNN2:
.1ed2	48		pha				pha 								; save base + final sign on stack.
.1ed3	20 37 20	jsr $2037			jsr 	MInt32False 				; zero the return value.
.1ed6					_I32FSMainLoop:
.1ed6	68		pla				pla 								; get the base back into tempShort
.1ed7	48		pha				pha
.1ed8	29 7f		and #$7f			and 	#$7F
.1eda	85 0c		sta $0c				sta 	tempShort
.1edc	b1 04		lda ($04),y			lda 	(temp0),y 					; look at next character.
.1ede	c9 61		cmp #$61			cmp 	#"a" 						; fix up case.
.1ee0	90 02		bcc $1ee4			bcc 	_I32FSNotLC
.1ee2	e9 20		sbc #$20			sbc 	#32
.1ee4					_I32FSNotLC:
.1ee4	38		sec				sec 								; subtract 48 (ASCII "0")
.1ee5	e9 30		sbc #$30			sbc 	#"0"
.1ee7	90 34		bcc $1f1d			bcc 	_I32FSFail 					; nothing more to do.
.1ee9	c9 0a		cmp #$0a			cmp 	#9+1 						; if it is 0-9 validate vs base.
.1eeb	90 06		bcc $1ef3			bcc 	_I32FSValidate
.1eed	c9 11		cmp #$11			cmp 	#17 						; is it between 58 and 64 ? if so bad.
.1eef	90 2c		bcc $1f1d			bcc 	_I32FSFail
.1ef1	e9 07		sbc #$07			sbc 	#7 							; adjust into range so now character is 0->nnn
.1ef3					_I32FSValidate:
.1ef3	c5 0c		cmp $0c				cmp 	tempShort 					; compare against the base.
.1ef5	b0 26		bcs $1f1d			bcs 	_I32FSFail 					; sorry, too large for this base.
.1ef7	48		pha				pha 								; save the new digit value.
.1ef8	e8		inx				inx 								; put base into next slot.
.1ef9	a5 0c		lda $0c				lda 	tempShort
.1efb	20 46 20	jsr $2046			jsr 	MInt32Set8Bit
.1efe	ca		dex				dex
.1eff	20 56 1f	jsr $1f56			jsr 	MInt32Multiply 				; multiply current by the base
.1f02	e8		inx				inx
.1f03	68		pla				pla  								; put additive into next slot
.1f04	20 46 20	jsr $2046			jsr 	MInt32Set8Bit
.1f07	ca		dex				dex
.1f08	20 22 1f	jsr $1f22			jsr 	MInt32Add 					; and add it
.1f0b	c8		iny				iny 								; look at next character
.1f0c	cc f6 0a	cpy $0af6			cpy 	fs32Length 					; until > length.
.1f0f	f0 c5		beq $1ed6			beq 	_I32FSMainLoop
.1f11	90 c3		bcc $1ed6			bcc 	_I32FSMainLoop
.1f13					_I32FSDone:
.1f13	68		pla				pla 								; get base/final sign back
.1f14	10 03		bpl $1f19			bpl 	_I32FSNN3
.1f16	20 f1 1f	jsr $1ff1			jsr 	MInt32Negate 				; negate the result.
.1f19					_I32FSNN3:
.1f19	68		pla				pla
.1f1a	a8		tay				tay
.1f1b	38		sec				sec
.1f1c	60		rts				rts
.1f1d					_I32FSFail:
.1f1d	68		pla				pla
.1f1e					_I32FSFail2:
.1f1e	68		pla				pla
.1f1f	a8		tay				tay
.1f20	18		clc				clc
.1f21	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32math.asm

.1f22					MInt32Add:
.1f22	18		clc				clc
.1f23	b5 48		lda $48,x			lda 	esInt0,x
.1f25	75 49		adc $49,x			adc 	esInt0+1,x
.1f27	95 48		sta $48,x			sta 	esInt0,x
.1f29	b5 50		lda $50,x			lda 	esInt1,x
.1f2b	75 51		adc $51,x			adc 	esInt1+1,x
.1f2d	95 50		sta $50,x			sta 	esInt1,x
.1f2f	b5 58		lda $58,x			lda 	esInt2,x
.1f31	75 59		adc $59,x			adc 	esInt2+1,x
.1f33	95 58		sta $58,x			sta 	esInt2,x
.1f35	b5 60		lda $60,x			lda 	esInt3,x
.1f37	75 61		adc $61,x			adc 	esInt3+1,x
.1f39	95 60		sta $60,x			sta 	esInt3,x
.1f3b	60		rts				rts
.1f3c					MInt32Sub:
.1f3c	38		sec				sec
.1f3d	b5 48		lda $48,x			lda 	esInt0,x
.1f3f	f5 49		sbc $49,x			sbc 	esInt0+1,x
.1f41	95 48		sta $48,x			sta 	esInt0,x
.1f43	b5 50		lda $50,x			lda 	esInt1,x
.1f45	f5 51		sbc $51,x			sbc 	esInt1+1,x
.1f47	95 50		sta $50,x			sta 	esInt1,x
.1f49	b5 58		lda $58,x			lda 	esInt2,x
.1f4b	f5 59		sbc $59,x			sbc 	esInt2+1,x
.1f4d	95 58		sta $58,x			sta 	esInt2,x
.1f4f	b5 60		lda $60,x			lda 	esInt3,x
.1f51	f5 61		sbc $61,x			sbc 	esInt3+1,x
.1f53	95 60		sta $60,x			sta 	esInt3,x
.1f55	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32multiply.asm

.1f56					MInt32Multiply:
.1f56	e8		inx				inx 								; copy 2nd -> 3rd
.1f57	20 7c 1f	jsr $1f7c			jsr 	MInt32CopyUp
.1f5a	ca		dex				dex
.1f5b	20 7c 1f	jsr $1f7c			jsr 	MInt32CopyUp 				; copy 1st -> 2nd
.1f5e	20 37 20	jsr $2037			jsr 	MInt32False 					; zero 1st.
.1f61					_I32Loop:
.1f61	b5 4a		lda $4a,x			lda 	esInt0+2,x 					; get low bit of 3rd
.1f63	29 01		and #$01			and 	#1
.1f65	f0 03		beq $1f6a			beq 	_I32NoAdd 					; if set
.1f67	20 22 1f	jsr $1f22			jsr 	MInt32Add 					; add 2nd to 1st.
.1f6a					_I32NoAdd:
.1f6a	e8		inx				inx 								; shift 2nd left
.1f6b	20 4c 20	jsr $204c			jsr 	MInt32ShiftLeft
.1f6e	e8		inx				inx  								; shift 3rd right
.1f6f	20 55 20	jsr $2055			jsr 	MInt32ShiftRight
.1f72	20 5e 20	jsr $205e			jsr 	MInt32Zero 					; check if zero.
.1f75	08		php				php 								; save status bits
.1f76	ca		dex				dex 	 							; point back to 1st
.1f77	ca		dex				dex
.1f78	28		plp				plp 								; get status bits
.1f79	d0 e6		bne $1f61			bne 	_I32Loop 					; if non-zero keep going.
.1f7b	60		rts				rts
.1f7c					MInt32CopyUp:
.1f7c	b5 48		lda $48,x			lda 	esInt0,x
.1f7e	95 49		sta $49,x			sta 	esInt0+1,x
.1f80	b5 50		lda $50,x			lda 	esInt1,x
.1f82	95 51		sta $51,x			sta 	esInt1+1,x
.1f84	b5 58		lda $58,x			lda 	esInt2,x
.1f86	95 59		sta $59,x			sta 	esInt2+1,x
.1f88	b5 60		lda $60,x			lda 	esInt3,x
.1f8a	95 61		sta $61,x			sta 	esInt3+1,x
.1f8c	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32tostr.asm

>0af7					MCharCount:	.fill 	1						; count of converted characters
.1f8d					MInt32ToString:
.1f8d	48		pha				pha 								; save base
.1f8e	85 0c		sta $0c				sta 	tempShort 					; save target base.
.1f90	a9 00		lda #$00			lda 	#0
.1f92	8d f7 0a	sta $0af7			sta 	MCharCount 					; clear character count to 0
.1f95	98		tya				tya
.1f96	48		pha				pha
.1f97	a5 0c		lda $0c				lda 	tempShort 					; check if we are signed conversion
.1f99	10 10		bpl $1fab			bpl 	_I32TSUnsigned
.1f9b	48		pha				pha 								; save base on stack.
.1f9c	b5 60		lda $60,x			lda 	esInt3,x 					; is it actually negative
.1f9e	10 08		bpl $1fa8			bpl 	_I32TSNoFlip
.1fa0	a9 2d		lda #$2d			lda 	#"-" 						; write a '-' prefix out.
.1fa2	20 de 1f	jsr $1fde			jsr 	MI32WriteCharacter
.1fa5	20 f1 1f	jsr $1ff1			jsr 	MInt32Negate 				; negate the value.
.1fa8					_I32TSNoFlip:
.1fa8	68		pla				pla 								; get the base back
.1fa9	29 7f		and #$7f			and 	#$7F 						; clear the sign flag so it's just a base now.
.1fab					_I32TSUnsigned:
.1fab	20 b9 1f	jsr $1fb9			jsr 	MI32DivideWrite 			; recursive code to output string.
.1fae	a0 00		ldy #$00			ldy 	#0 							; write charcount to first character.
.1fb0	ad f7 0a	lda $0af7			lda 	MCharCount
.1fb3	91 04		sta ($04),y			sta 	(temp0),y
.1fb5	68		pla				pla
.1fb6	a8		tay				tay
.1fb7	68		pla				pla
.1fb8	60		rts				rts
.1fb9					MI32DivideWrite:
.1fb9	48		pha				pha 								; save the divisor/base
.1fba	e8		inx				inx 								; write in the dividing position.
.1fbb	20 46 20	jsr $2046			jsr 	MInt32Set8Bit
.1fbe	ca		dex				dex
.1fbf	20 3f 1e	jsr $1e3f			jsr 	MInt32UDivide 				; divide number by base.
.1fc2	68		pla				pla 								; get the base into Y
.1fc3	a8		tay				tay
.1fc4	b5 4a		lda $4a,x			lda 	esInt0+2,x 					; get the remainder and push on the stack.
.1fc6	48		pha				pha
.1fc7	20 5e 20	jsr $205e			jsr 	MInt32Zero 					; is the result zero ?
.1fca	f0 04		beq $1fd0			beq 	_I32NoRecurse 				; if so, don't recurse.
.1fcc	98		tya				tya 								; put base into A
.1fcd	20 b9 1f	jsr $1fb9			jsr 	MI32DivideWrite 				; and jsr the dividor recursively.
.1fd0					_I32NoRecurse:
.1fd0	68		pla				pla 								; get the remainder back
.1fd1	c9 0a		cmp #$0a			cmp 	#10  						; handle hexadecimals.
.1fd3	90 02		bcc $1fd7			bcc 	_I32NotHex
.1fd5	69 06		adc #$06			adc 	#7-1
.1fd7					_I32NotHex:
.1fd7	18		clc				clc 								; make it ASCII
.1fd8	69 30		adc #$30			adc 	#48
.1fda	20 de 1f	jsr $1fde			jsr 	MI32WriteCharacter 			; write the character out
.1fdd	60		rts				rts 								; and exit.
.1fde					MI32WriteCharacter:
.1fde	ee f7 0a	inc $0af7			inc 	MCharCount 					; bump count (space for leading count)
.1fe1	ac f7 0a	ldy $0af7			ldy 	MCharCount 					; get position
.1fe4	91 04		sta ($04),y			sta 	(temp0),y 					; write out with trailing 0
.1fe6	c8		iny				iny
.1fe7	a9 00		lda #$00			lda 	#0
.1fe9	91 04		sta ($04),y			sta 	(temp0),y
.1feb	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32unary.asm

>0af8					MSeed32:	.fill 	4							; random number seed.
.1fec					MInt32Absolute:
.1fec	b5 60		lda $60,x			lda 	esInt3,x 					; use negate code if -ve.
.1fee	30 01		bmi $1ff1			bmi 	MInt32Negate
.1ff0	60		rts				rts
.1ff1					MInt32Negate:
.1ff1	38		sec				sec
.1ff2	a9 00		lda #$00			lda 	#0
.1ff4	f5 48		sbc $48,x			sbc 	esInt0,x
.1ff6	95 48		sta $48,x			sta 	esInt0,x
.1ff8	a9 00		lda #$00			lda 	#0
.1ffa	f5 50		sbc $50,x			sbc 	esInt1,x
.1ffc	95 50		sta $50,x			sta 	esInt1,x
.1ffe	a9 00		lda #$00			lda 	#0
.2000	f5 58		sbc $58,x			sbc 	esInt2,x
.2002	95 58		sta $58,x			sta 	esInt2,x
.2004	a9 00		lda #$00			lda 	#0
.2006	f5 60		sbc $60,x			sbc 	esInt3,x
.2008	95 60		sta $60,x			sta 	esInt3,x
.200a	60		rts				rts
.200b					MInt32Not:
.200b	b5 48		lda $48,x			lda 	esInt0,x
.200d	49 ff		eor #$ff			eor 	#$FF
.200f	95 48		sta $48,x			sta 	esInt0,x
.2011	b5 50		lda $50,x			lda 	esInt1,x
.2013	49 ff		eor #$ff			eor 	#$FF
.2015	95 50		sta $50,x			sta 	esInt1,x
.2017	b5 58		lda $58,x			lda 	esInt2,x
.2019	49 ff		eor #$ff			eor 	#$FF
.201b	95 58		sta $58,x			sta 	esInt2,x
.201d	b5 60		lda $60,x			lda 	esInt3,x
.201f	49 ff		eor #$ff			eor 	#$FF
.2021	95 60		sta $60,x			sta 	esInt3,x
.2023	60		rts				rts
.2024					MInt32Sign:
.2024	b5 60		lda $60,x			lda 	esInt3,x					; look at MSB
.2026	30 0b		bmi $2033			bmi 	MInt32True 					; if set return -1 (true)
.2028	20 5e 20	jsr $205e			jsr 	MInt32Zero 					; is it zero ?
.202b	f0 0a		beq $2037			beq 	MInt32False 					; if zero return 0 (false)
.202d	20 37 20	jsr $2037			jsr 	MInt32False 					; > 0 return 1
.2030	f6 48		inc $48,x			inc 	esInt0,x
.2032	60		rts				rts
.2033					MInt32True:
.2033	a9 ff		lda #$ff			lda 	#$FF 						; set to $FFFFFFFF
.2035	d0 02		bne $2039			bne 	MInt32WriteAll
.2037					MInt32False:
.2037	a9 00		lda #$00			lda 	#0
.2039					MInt32WriteAll:
.2039	95 48		sta $48,x			sta 	esInt0,x
.203b					MInt32Write123:
.203b	95 50		sta $50,x			sta 	esInt1,x
.203d	95 58		sta $58,x			sta 	esInt2,x
.203f	95 60		sta $60,x			sta 	esInt3,x
.2041	a9 00		lda #$00			lda 	#$00						; and make it an integer
.2043	95 40		sta $40,x			sta 	esType,x
.2045	60		rts				rts
.2046					MInt32Set8Bit:
.2046	95 48		sta $48,x			sta 	esInt0,x
.2048	a9 00		lda #$00			lda 	#0
.204a	f0 ef		beq $203b			beq		MInt32Write123
.204c					MInt32ShiftLeft:
.204c	16 48		asl $48,x			asl 	esInt0,x
.204e	36 50		rol $50,x			rol	 	esInt1,x
.2050	36 58		rol $58,x			rol	 	esInt2,x
.2052	36 60		rol $60,x			rol	 	esInt3,x
.2054	60		rts				rts
.2055					MInt32ShiftRight:
.2055	56 60		lsr $60,x			lsr 	esInt3,x
.2057	76 58		ror $58,x			ror 	esInt2,x
.2059	76 50		ror $50,x			ror 	esInt1,x
.205b	76 48		ror $48,x			ror 	esInt0,x
.205d	60		rts				rts
.205e					MInt32Zero:
.205e	b5 48		lda $48,x			lda 	esInt0,x
.2060	15 50		ora $50,x			ora 	esInt1,x
.2062	15 58		ora $58,x			ora 	esInt2,x
.2064	15 60		ora $60,x			ora 	esInt3,x
.2066	60		rts				rts
.2067					MInt32Random:
.2067	98		tya				tya
.2068	48		pha				pha
.2069	a0 07		ldy #$07			ldy 	#7
.206b	ad f8 0a	lda $0af8			lda 	MSeed32+0
.206e	d0 03		bne $2073			bne 	_Random1
.2070	a8		tay				tay
.2071	a9 aa		lda #$aa			lda		#$AA
.2073					_Random1:
.2073	0a		asl a				asl 	a
.2074	2e f9 0a	rol $0af9			rol 	MSeed32+1
.2077	2e fa 0a	rol $0afa			rol 	MSeed32+2
.207a	2e fb 0a	rol $0afb			rol 	MSeed32+3
.207d	90 02		bcc $2081			bcc 	_Random2
.207f	49 c5		eor #$c5			eor 	#$C5
.2081					_Random2:
.2081	88		dey				dey
.2082	d0 ef		bne $2073			bne 	_Random1
.2084	8d f8 0a	sta $0af8			sta 	MSeed32+0
.2087	95 48		sta $48,x			sta 	esInt0,x
.2089	ad f9 0a	lda $0af9			lda 	MSeed32+1
.208c	95 50		sta $50,x			sta 	esInt1,x
.208e	ad fa 0a	lda $0afa			lda 	MSeed32+2
.2091	95 58		sta $58,x			sta 	esInt2,x
.2093	ad fb 0a	lda $0afb			lda 	MSeed32+3
.2096	95 60		sta $60,x			sta 	esInt3,x
.2098	68		pla				pla
.2099	a8		tay				tay
.209a	a9 00		lda #$00			lda 	#0
.209c	95 40		sta $40,x			sta 	esType,x
.209e	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/utility/check.asm

.209f					CheckToken:
.209f	d1 02		cmp ($02),y			cmp 	(codePtr),y
.20a1	d0 02		bne $20a5			bne 	_CTError
.20a3	c8		iny				iny
.20a4	60		rts				rts
.20a5					_CTError:
.20a5	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.20a7	20 65 21	jsr $2165			jsr 	ErrorHandler
.20aa					CheckRightParen:
.20aa	b1 02		lda ($02),y			lda 	(codePtr),y
.20ac	c8		iny				iny
.20ad	c9 c4		cmp #$c4			cmp 	#TKW_RPAREN
.20af	d0 01		bne $20b2			bne 	_CRPError
.20b1	60		rts				rts
.20b2					_CRPError:
.20b2	a2 09		ldx #$09			ldx 	#ErrorID_MissingRP
.20b4	20 65 21	jsr $2165			jsr 	ErrorHandler
.20b7					CheckComma:
.20b7	b1 02		lda ($02),y			lda 	(codePtr),y
.20b9	c8		iny				iny
.20ba	c9 c6		cmp #$c6			cmp 	#TKW_COMMA
.20bc	d0 01		bne $20bf			bne 	_CCError
.20be	60		rts				rts
.20bf					_CCError:
.20bf	a2 0a		ldx #$0a			ldx 	#ErrorID_MissingComma
.20c1	20 65 21	jsr $2165			jsr 	ErrorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/utility/scanner.asm

.26be					ScanForward:
.26be	85 06		sta $06				sta 	temp1 						; save tokens to search in temp1/temp1+1
.26c0	86 07		stx $07				stx 	temp1+1
.26c2	a9 00		lda #$00			lda 	#0 							; temp2 counts structure levels.
.26c4	85 08		sta $08				sta 	temp2
.26c6	b1 02		lda ($02),y	_SFLoop:lda 	(codePtr),y 				; look at the next token.
.26c8	c8		iny				iny
.26c9	a6 08		ldx $08				ldx 	temp2 						; check structure levels are zero.
.26cb	d0 08		bne $26d5			bne 	_SFNoCheck 					; if so, check token against entered values.
.26cd	c5 06		cmp $06				cmp 	temp1
.26cf	f0 24		beq $26f5			beq 	_SFExit
.26d1	c5 07		cmp $07				cmp 	temp1+1
.26d3	f0 20		beq $26f5			beq 	_SFExit
.26d5					_SFNoCheck:
.26d5	c9 80		cmp #$80			cmp 	#$80 						; if it is 00-7F (variable/number) just skip it.
.26d7	90 ed		bcc $26c6			bcc 	_SFLoop
.26d9	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; $80-$85 is various specials.
.26db	90 19		bcc $26f6			bcc 	_SFSpecials
.26dd	c9 99		cmp #$99			cmp 	#TOK_STRUCTST 				; if < structure start then continue
.26df	90 e5		bcc $26c6			bcc 	_SFLoop
.26e1	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST 				; if >= unary start (after structure) then continue.
.26e3	b0 e1		bcs $26c6			bcs 	_SFLoop
.26e5	aa		tax				tax  								; token in X, and look up the adjuster.
.26e6	bd 28 1a	lda $1a28,x			lda 	ELBinaryOperatorInfo-TOK_BINARYST,x
.26e9	38		sec				sec 								; convert to an offset
.26ea	e9 81		sbc #$81			sbc 	#$81
.26ec	18		clc				clc 								; add to depth
.26ed	65 08		adc $08				adc 	temp2
.26ef	85 08		sta $08				sta 	temp2
.26f1	10 d3		bpl $26c6			bpl 	_SFLoop 					; +ve okay to continue
.26f3	30 2a		bmi $271f			bmi 	_SFError 					; if gone -ve then we have a nesting error
.26f5	60		rts		_SFExit:rts
.26f6					_SFSpecials:
.26f6	c9 80		cmp #$80			cmp 	#TOK_EOL 					; $80, advance to next line.
.26f8	f0 14		beq $270e			beq 	_SFNextLine
.26fa	c9 84		cmp #$84			cmp 	#TOK_FPC					; $84, skip embedded float
.26fc	f0 26		beq $2724			beq 	_SFFloatSkip
.26fe	c9 85		cmp #$85			cmp 	#TOK_STR 					; $85, skip string
.2700	f0 04		beq $2706			beq 	_SFSkipString
.2702	c8		iny				iny									; $81,$82,$83 shift, so just advance over the shifted
.2703	4c c6 26	jmp $26c6			jmp 	_SFLoop 					; token.
.2706					_SFSkipString:
.2706	98		tya				tya
.2707	38		sec				sec
.2708	71 02		adc ($02),y			adc 	(codePtr),y
.270a	a8		tay				tay
.270b	4c c6 26	jmp $26c6			jmp 	_SFLoop
.270e					_SFNextLine:
.270e	a0 00		ldy #$00			ldy 	#0 							; get offset
.2710	b1 02		lda ($02),y			lda 	(codePtr),y
.2712	18		clc				clc 								; add to code pointer.
.2713	65 02		adc $02				adc 	codePtr
.2715	85 02		sta $02				sta 	codePtr
.2717	90 02		bcc $271b			bcc		_SFNLNoCarry
.2719	e6 03		inc $03				inc 	codePtr+1
.271b					_SFNLNoCarry:
.271b	b1 02		lda ($02),y			lda 	(codePtr),y 				; reached the end of the program.
.271d	d0 a7		bne $26c6			bne		_SFLoop 					; no go round again
.271f					_SFError:
.271f	a2 14		ldx #$14			ldx 	#ErrorID_Struct
.2721	20 65 21	jsr $2165			jsr 	ErrorHandler
.2724					_SFFloatSkip:
.2724	4c fd 13	jmp $13fd			jmp 	Unimplemented

;******  Return to file: main/main.asm


;******  Processing file: main/utility/stack.asm

.0078					rsPointer:
>0078							.fill 	2							; to TOS, which is the current top-token.
.20c4					RSReset:
.20c4	a9 ff		lda #$ff			lda 	#(returnStack+retStackSize-1) & $FF
.20c6	85 78		sta $78				sta 	rsPointer
.20c8	a9 09		lda #$09			lda 	#(returnStack+retStackSize-1) >> 8
.20ca	85 79		sta $79				sta 	1+(rsPointer)
.20cc	a9 ff		lda #$ff			lda 	#$FF 						; put a duff marker on TOS, so nothing will pop
.20ce	8d ff 09	sta $09ff			sta 	returnStack+retStackSize-1
.20d1	60		rts				rts
.20d2					RSClaim:
.20d2	84 0c		sty $0c				sty 	tempShort 					; preserve Y
.20d4	48		pha				pha 								; save marker on stack.
.20d5	8a		txa				txa 								; get bytes required.
.20d6	38		sec				sec
.20d7	49 ff		eor #$ff			eor 	#$FF 						; add to rsPointer using 2's complement.
.20d9	65 78		adc $78				adc 	rsPointer
.20db	85 78		sta $78				sta 	rsPointer
.20dd	a5 79		lda $79				lda 	rsPointer+1
.20df	69 ff		adc #$ff			adc 	#$FF
.20e1	85 79		sta $79				sta 	rsPointer+1
.20e3	c9 08		cmp #$08			cmp 	#returnStack>>8 			; overflow. underflow actually :)
.20e5	90 08		bcc $20ef			bcc 	_RSCOverflow
.20e7	68		pla				pla 								; get marker back
.20e8	a0 00		ldy #$00			ldy 	#0 							; write marker out.
.20ea	91 78		sta ($78),y			sta 	(rsPointer),y
.20ec	a4 0c		ldy $0c				ldy 	tempShort 					; restore Y and exit
.20ee	60		rts				rts
.20ef					_RSCOverflow:
.20ef	a2 16		ldx #$16			ldx 	#ErrorID_RetStack
.20f1	20 65 21	jsr $2165			jsr 	ErrorHandler
.20f4					RSFree:
.20f4	18		clc				clc
.20f5	65 78		adc $78				adc 	rsPointer
.20f7	85 78		sta $78				sta 	rsPointer
.20f9	90 02		bcc $20fd			bcc 	_RSFExit
.20fb	e6 79		inc $79				inc 	rsPointer+1
.20fd					_RSFExit:
.20fd	60		rts				rts
.20fe					RSSavePosition:
.20fe	84 0c		sty $0c				sty 	tempShort 					; save Y position
.2100	a8		tay				tay 								; this is where we write it.
.2101	a5 02		lda $02				lda 	codePtr 					; write codePointer out
.2103	91 78		sta ($78),y			sta 	(rsPointer),y
.2105	c8		iny				iny
.2106	a5 03		lda $03				lda 	codePtr+1
.2108	91 78		sta ($78),y			sta 	(rsPointer),y
.210a	c8		iny				iny
.210b	a5 0c		lda $0c				lda 	tempShort 					; write the Y position out.
.210d	91 78		sta ($78),y			sta 	(rsPointer),y
.210f	a8		tay				tay 								; fix Y back again to original value
.2110	60		rts				rts
.2111					RSLoadPosition:
.2111	a8		tay				tay
.2112	b1 78		lda ($78),y			lda 	(rsPointer),y 				; read codePointer back
.2114	85 02		sta $02				sta 	codePtr
.2116	c8		iny				iny
.2117	b1 78		lda ($78),y			lda 	(rsPointer),y
.2119	85 03		sta $03				sta 	codePtr+1
.211b	c8		iny				iny
.211c	b1 78		lda ($78),y			lda 	(rsPointer),y 				; and the offset
.211e	a8		tay				tay 								; to Y
.211f	60		rts				rts

;******  Return to file: main/main.asm

.2120					mainHandler:
.2120	7c 23 21	jmp ($2123,x)			jmp 	(mainVectors,x)
.2123					mainVectors:
>2123	5b 1a					.word LinkEvaluate         ; index 0
>2125	61 1a					.word LinkEvaluateInteger  ; index 2
>2127	67 1a					.word LinkEvaluateSmallInt ; index 4

;******  Return to file: basic.asm

.2129					section_end_main:
.2129					section_start_assembler:

;******  Processing file: assembler/assembler.asm

.2129					assemblerHandler:
.2129	7c 2c 21	jmp ($212c,x)			jmp 	(assemblerVectors,x)
.212c					assemblerVectors:

;******  Return to file: basic.asm

.212c					section_end_assembler:
.212c					section_start_device:

;******  Processing file: device/device.asm


;******  Processing file: device/x16/x16io.asm

.212c					IONewLine:
.212c	48		pha				pha
.212d	a9 0d		lda #$0d			lda 	#13
.212f	20 3c 21	jsr $213c			jsr 	IOPrintChar
.2132	68		pla				pla
.2133	60		rts				rts
.2134					IOTab:
.2134	48		pha				pha
.2135	a9 20		lda #$20			lda 	#32
.2137	20 3c 21	jsr $213c			jsr 	IOPrintChar
.213a	68		pla				pla
.213b	60		rts				rts
.213c					IOPrintChar:
.213c	aa		tax				tax
.213d	5a		phy				phy
.213e	8a		txa				txa
.213f	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.2142	7a		ply				ply
.2143	60		rts				rts
.2144					IOInkey:
.2144	98		tya				tya
.2145	48		pha				pha
.2146	20 e4 ff	jsr $ffe4			jsr 	$FFE4
.2149	85 0c		sta $0c				sta 	tempShort
.214b	68		pla				pla
.214c	a8		tay				tay
.214d	a5 0c		lda $0c				lda 	tempShort
.214f	60		rts				rts

;******  Return to file: device/device.asm


;******  Processing file: device/x16/x16timer.asm

.2150					IOReadTimer:
.2150	20 de ff	jsr $ffde			jsr 	$FFDE
.2153	48		pha				pha
.2154	8a		txa				txa
.2155	a8		tay				tay
.2156	68		pla				pla
.2157	60		rts				rts

;******  Return to file: device/device.asm

.2158					deviceHandler:
.2158	7c 5b 21	jmp ($215b,x)			jmp 	(deviceVectors,x)
.215b					deviceVectors:
>215b	2c 21					.word IONewLine            ; index 0
>215d	44 21					.word IOInkey              ; index 2
>215f	3c 21					.word IOPrintChar          ; index 4
>2161	34 21					.word IOTab                ; index 6
>2163	50 21					.word IOReadTimer          ; index 8

;******  Return to file: basic.asm

.2165					section_end_device:
.2165					section_start_error:

;******  Processing file: error/error.asm


;******  Processing file: error/errorhandler.asm

.2165					ErrorHandler:
.2165	a9 ee		lda #$ee			lda 	#$EE
.2167	a8		tay				tay
>2168	db						.byte 	$DB
.2169	4c 69 21	jmp $2169	_EHHalt:jmp 	_EHHalt

;******  Return to file: error/error.asm


;******  Return to file: basic.asm

.216c					section_end_error:
.216c					section_start_floatingpoint:

;******  Processing file: floatingpoint/floatingpoint.asm

.216c					floatingpointHandler:
.216c	a2 03		ldx #$03			ldx 	#ErrorID_NoModule
.216e	20 65 21	jsr $2165			jsr 	ErrorHandler

;******  Return to file: basic.asm

.2171					section_end_floatingpoint:
.2171					section_start_interaction:

;******  Processing file: interaction/interaction.asm

.2171					interactionHandler:
.2171	7c 74 21	jmp ($2174,x)			jmp 	(interactionVectors,x)
.2174					interactionVectors:

;******  Return to file: basic.asm

.2174					section_end_interaction:
.2174					section_start_string:

;******  Processing file: string/string.asm


;******  Processing file: string/chr.asm

.2174					StringChrs:
.2174	aa		tax				tax 								; set up stack
.2175	a9 02		lda #$02			lda 	#2
.2177	20 2e 22	jsr $222e			jsr 	AllocateSoftString
.217a	98		tya				tya
.217b	20 54 22	jsr $2254			jsr 	WriteSoftString
.217e	20 83 21	jsr $2183			jsr 	ReturnSoftString
.2181	8a		txa				txa
.2182	60		rts				rts
.2183					ReturnSoftString:
.2183	a5 7a		lda $7a				lda 	softMemAlloc
.2185	95 48		sta $48,x			sta 	esInt0,x
.2187	a5 7b		lda $7b				lda 	softMemAlloc+1
.2189	95 50		sta $50,x			sta 	esInt1,x
.218b	a9 00		lda #$00			lda 	#0
.218d	95 58		sta $58,x			sta 	esInt2,x
.218f	95 60		sta $60,x			sta 	esInt3,x
.2191	a9 40		lda #$40			lda 	#$40
.2193	95 40		sta $40,x			sta 	esType,x
.2195	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/compare.asm

.2196					STRCompare:
.2196	48		pha				pha 								; save A
.2197	aa		tax				tax 								; put stack pos in X
.2198	98		tya				tya
.2199	48		pha				pha
.219a	20 ce 21	jsr $21ce			jsr 	CopyStringPair
.219d	a0 00		ldy #$00			ldy 	#0 							; get the smaller of the two string sizes.
.219f	b1 04		lda ($04),y			lda 	(temp0),y
.21a1	d1 06		cmp ($06),y			cmp 	(temp1),y
.21a3	90 02		bcc $21a7			bcc 	_SCNotSmaller
.21a5	b1 06		lda ($06),y			lda 	(temp1),y
.21a7					_SCNotSmaller:
.21a7	aa		tax				tax 								; put that in X. We compare this many chars first.
.21a8					_SCCompareLoop:
.21a8	e0 00		cpx #$00			cpx 	#0 							; if compared all the smaller, then it is the shorter
.21aa	f0 0c		beq $21b8			beq 	_SCSameToEndShortest 		; one that is the smallest if they are different lengths.
.21ac	ca		dex				dex 								; decrement chars to compare.
.21ad	c8		iny				iny 								; move to next character
.21ae	38		sec				sec 								; calculate s1[y]-s2[y]
.21af	b1 04		lda ($04),y			lda 	(temp0),y
.21b1	f1 06		sbc ($06),y			sbc 	(temp1),y
.21b3	d0 0a		bne $21bf			bne 	_SCReturnResult 			; if different return sign of A
.21b5	4c a8 21	jmp $21a8			jmp 	_SCCompareLoop
.21b8					_SCSameToEndShortest
.21b8	a0 00		ldy #$00			ldy 	#0 							; compare len(s1) - len(s2)
.21ba	38		sec				sec
.21bb	b1 04		lda ($04),y			lda 	(temp0),y
.21bd	f1 06		sbc ($06),y			sbc 	(temp1),y
.21bf					_SCReturnResult:
.21bf	08		php				php 								; set return to zero preserving PSW.
.21c0	a2 00		ldx #$00			ldx 	#0
.21c2	28		plp				plp
.21c3	f0 05		beq $21ca			beq 	_SCExit 					; two values equal, then exit
.21c5	ca		dex				dex 								; X = $FF
.21c6	90 02		bcc $21ca			bcc 	_SCExit 					; if 1st < 2nd then -1
.21c8	a2 01		ldx #$01			ldx 	#1 							; X = $01 if greater
.21ca					_SCExit:
.21ca	68		pla				pla
.21cb	a8		tay				tay
.21cc	68		pla				pla
.21cd	60		rts				rts
.21ce					CopyStringPair:
.21ce	b5 49		lda $49,x			lda 	esInt0+1,x
.21d0	85 06		sta $06				sta 	temp1
.21d2	b5 51		lda $51,x			lda 	esInt1+1,x
.21d4	85 07		sta $07				sta 	temp1+1
.21d6					CopyStringTop:
.21d6	b5 48		lda $48,x			lda 	esInt0,x
.21d8	85 04		sta $04				sta 	temp0
.21da	b5 50		lda $50,x			lda 	esInt1,x
.21dc	85 05		sta $05				sta 	temp0+1
.21de	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/concat.asm

.21df					StringConcat:
.21df	aa		tax				tax									; stack pos in X
.21e0	98		tya				tya
.21e1	48		pha				pha
.21e2	20 ce 21	jsr $21ce			jsr 	CopyStringPair 				; temp0 and temp1 point to strings to concat.
.21e5	38		sec				sec 								; calculate alloc strings. lengths added + 1 for size.
.21e6	a0 00		ldy #$00			ldy 	#0
.21e8	b1 04		lda ($04),y			lda 	(temp0),y
.21ea	71 06		adc ($06),y			adc 	(temp1),y
.21ec	b0 1c		bcs $220a			bcs 	_SCError 					; just too many characters here.
.21ee	c9 fc		cmp #$fc			cmp 	#MaxStringSize
.21f0	b0 18		bcs $220a			bcs 	_SCError
.21f2	20 2e 22	jsr $222e			jsr 	AllocateSoftString 			; allocate soft string memory, set pointer.
.21f5	20 25 22	jsr $2225			jsr 	CopySoftToStack 			; copy that to the stack.
.21f8	20 0f 22	jsr $220f			jsr 	SCCopyTemp0 				; copy temp0
.21fb	a5 06		lda $06				lda 	temp1 						; copy temp1 to temp0
.21fd	85 04		sta $04				sta 	temp0
.21ff	a5 07		lda $07				lda 	temp1+1
.2201	85 05		sta $05				sta 	temp0+1
.2203	20 0f 22	jsr $220f			jsr 	SCCopyTemp0 				; copy temp0 e.g. what was temp1.
.2206	68		pla				pla
.2207	a8		tay				tay
.2208	8a		txa				txa 								; and A
.2209	60		rts				rts
.220a					_SCError:
.220a	a2 0d		ldx #$0d			ldx 	#ErrorID_StrLen
.220c	20 65 21	jsr $2165			jsr 	ErrorHandler
.220f					SCCopyTemp0:
.220f	a0 00		ldy #$00			ldy 	#0 							; put count in temp2
.2211	b1 04		lda ($04),y			lda 	(temp0),y
.2213	85 08		sta $08				sta 	temp2
.2215					_SCCopyLoop:
.2215	a5 08		lda $08				lda 	temp2 						; done the lot
.2217	f0 0b		beq $2224			beq 	_SCCopyExit
.2219	c6 08		dec $08				dec 	temp2
.221b	c8		iny				iny 								; get next char
.221c	b1 04		lda ($04),y			lda 	(temp0),y
.221e	20 54 22	jsr $2254			jsr 	WriteSoftString 			; write to soft string.
.2221	4c 15 22	jmp $2215			jmp 	_SCCopyLoop
.2224					_SCCopyExit:
.2224	60		rts				rts
.2225					CopySoftToStack:
.2225	a5 7a		lda $7a				lda 	SoftMemAlloc 				; copy the memory allocation pointer to the stack.
.2227	95 48		sta $48,x			sta 	esInt0,x 					; type is already string.
.2229	a5 7b		lda $7b				lda 	SoftMemAlloc+1
.222b	95 50		sta $50,x			sta 	esInt1,x
.222d	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/memory.asm

.007a					softMemAlloc:
>007a							.fill 	2  							; if MSB is zero needs resetting on allocation.
.222e					AllocateSoftString:
.222e	85 0c		sta $0c				sta 	tempShort 					; save count
.2230	98		tya				tya
.2231	48		pha				pha
.2232	a5 7b		lda $7b				lda 	softMemAlloc+1 				; if the high byte is zero, it needs allocating.
.2234	d0 09		bne $223f			bne 	_ASSDone
.2236	a5 0d		lda $0d				lda 	highMemory 					; reset the soft memory alloc pointer.
.2238	85 7a		sta $7a				sta 	softMemAlloc 				; to speed up slightly, we only reset this when we first need it
.223a	a4 0e		ldy $0e				ldy 	highMemory+1 				; but it needs to be reset before each command.
.223c	88		dey				dey
.223d	84 7b		sty $7b				sty 	softMemAlloc+1
.223f					_ASSDone:
.223f	38		sec				sec 								; allocate downwards enough memory
.2240	a5 7a		lda $7a				lda 	softMemAlloc
.2242	e5 0c		sbc $0c				sbc 	tempShort
.2244	85 7a		sta $7a				sta 	softMemAlloc
.2246	a5 7b		lda $7b				lda 	softMemAlloc+1
.2248	e9 00		sbc #$00			sbc 	#0
.224a	85 7b		sta $7b				sta 	softMemAlloc+1
.224c	a9 00		lda #$00			lda 	#0 							; empty that string, set the length = 0.
.224e	a8		tay				tay
.224f	91 7a		sta ($7a),y			sta 	(softMemAlloc),y
.2251	68		pla				pla
.2252	a8		tay				tay
.2253	60		rts				rts
.2254					WriteSoftString:
.2254	84 0c		sty $0c				sty 	tempShort 					; save Y
.2256	48		pha				pha
.2257	a0 00		ldy #$00			ldy 	#0 							; get and bump length
.2259	b1 7a		lda ($7a),y			lda 	(softMemAlloc),y
.225b	18		clc				clc
.225c	69 01		adc #$01			adc 	#1
.225e	91 7a		sta ($7a),y			sta 	(softMemAlloc),y
.2260	a8		tay				tay 								; pointer in Y
.2261	68		pla				pla 								; get char and write.
.2262	91 7a		sta ($7a),y			sta 	(softMemAlloc),y
.2264	a4 0c		ldy $0c				ldy 	tempShort 					; restore Y and exit.
.2266	60		rts				rts
.2267					StrClone:
.2267	aa		tax				tax 								; set up stack.
.2268	98		tya				tya
.2269	48		pha				pha
.226a	a0 00		ldy #$00			ldy 	#0 							; get length, add 1 for length
.226c	b1 04		lda ($04),y			lda 	(temp0),y
.226e	18		clc				clc
.226f	69 01		adc #$01			adc 	#1
.2271	20 2e 22	jsr $222e			jsr 	AllocateSoftString 			; allocate soft memory
.2274	a5 7a		lda $7a				lda 	softMemAlloc 				; copy that address to TOS
.2276	95 48		sta $48,x			sta 	esInt0,x
.2278	a5 7b		lda $7b				lda 	softMemAlloc+1
.227a	95 50		sta $50,x			sta 	esInt1,x
.227c	a9 00		lda #$00			lda 	#0
.227e	95 58		sta $58,x			sta 	esInt2,x
.2280	95 60		sta $60,x			sta 	esInt3,x
.2282	a9 40		lda #$40			lda 	#$40 						; set type to string.
.2284	95 40		sta $40,x			sta 	esType,x
.2286	20 0f 22	jsr $220f			jsr 	SCCopyTemp0 				; copy temp0 string to soft memory copy (concat.asm)
.2289	68		pla				pla
.228a	a8		tay				tay
.228b	8a		txa				txa
.228c	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/substring.asm

.228d					StringSubstring:
.228d	48		pha				pha
.228e	aa		tax				tax 								; access stack.
.228f	98		tya				tya
.2290	48		pha				pha
.2291	20 d6 21	jsr $21d6			jsr 	CopyStringTop 				; point temp0 to the string.
.2294	a0 00		ldy #$00			ldy 	#0 							; get length.
.2296	b1 04		lda ($04),y			lda 	(temp0),Y
.2298	85 06		sta $06				sta 	temp1
.229a	b5 49		lda $49,x			lda 	esInt0+1,x 					; get the initial offset
.229c	c5 06		cmp $06				cmp 	temp1 						;
.229e	f0 02		beq $22a2			beq 	_SSBOkay
.22a0	b0 2a		bcs $22cc			bcs 	_SSBReturnNull
.22a2					_SSBOkay:
.22a2	a5 06		lda $06				lda 	temp1 						; get the total length +1
.22a4	18		clc				clc
.22a5	69 01		adc #$01			adc 	#1
.22a7	38		sec				sec
.22a8	f5 49		sbc $49,x			sbc 	esInt0+1,x 					; the anything >= this is bad.
.22aa	d5 4a		cmp $4a,x			cmp 	esInt0+2,x  				; check bad >= required
.22ac	90 02		bcc $22b0			bcc		_SSBTrunc
.22ae	b5 4a		lda $4a,x			lda 	esInt0+2,x
.22b0					_SSBTrunc:
.22b0	85 07		sta $07				sta 	temp1+1 					; characters to copy.
.22b2	18		clc				clc
.22b3	69 01		adc #$01			adc 	#1 							; add 1
.22b5	20 2e 22	jsr $222e			jsr 	AllocateSoftString 			; allocate soft string memory, set pointer.
.22b8	20 25 22	jsr $2225			jsr 	CopySoftToStack 			; copy that to the stack.
.22bb	b4 49		ldy $49,x			ldy 	esInt0+1,x 					; get initial position of char to copy
.22bd					_SSBCopyLoop:
.22bd	a5 07		lda $07				lda 	temp1+1 					; done them all
.22bf	f0 0e		beq $22cf			beq 	_SSBExit
.22c1	c6 07		dec $07				dec 	temp1+1
.22c3	b1 04		lda ($04),y			lda 	(temp0),y 					; get and write character
.22c5	20 54 22	jsr $2254			jsr 	WriteSoftString
.22c8	c8		iny				iny
.22c9	4c bd 22	jmp $22bd			jmp 	_SSBCopyLoop
.22cc					_SSBReturnNull:
.22cc	20 d3 22	jsr $22d3			jsr 	ReturnNull
.22cf					_SSBExit:
.22cf	68		pla				pla
.22d0	a8		tay				tay
.22d1	68		pla				pla
.22d2	60		rts				rts
.22d3					ReturnNull:
.22d3	a9 00		lda #$00			lda 	#0 							; clear null string
.22d5	8d cc 0a	sta $0acc			sta 	NullString
.22d8	a9 cc		lda #$cc			lda 	#NullString & $FF 			; set a pointer to it
.22da	95 48		sta $48,x			sta 	esInt0,x
.22dc	a9 0a		lda #$0a			lda 	#NullString >> 8
.22de	95 50		sta $50,x			sta 	esInt1,x
.22e0	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/write.asm

.0afc					srcStrLen:
>0afc							.fill 	1
.22e1					StringWrite:
.22e1	aa		tax				tax
.22e2	48		pha				pha
.22e3	98		tya				tya
.22e4	48		pha				pha
.22e5	20 0c 23	jsr $230c			jsr 	CheckOverwriteCurrent
.22e8	b0 0d		bcs $22f7			bcs		_SWCopyCurrent
.22ea	20 4a 23	jsr $234a			jsr 	RequiresConcretion
.22ed	90 0e		bcc $22fd			bcc 	_SWWriteReference
.22ef	20 ad 23	jsr $23ad			jsr 	CheckSpecialConcretion
.22f2	b0 09		bcs $22fd			bcs 	_SWWriteReference
.22f4	20 5e 23	jsr $235e			jsr 	AllocateHardMemory
.22f7					_SWCopyCurrent:
.22f7	20 91 23	jsr $2391			jsr 	CopyStringToHardMemory
.22fa	4c 08 23	jmp $2308			jmp 	_SWExit
.22fd					_SWWriteReference
.22fd	a0 00		ldy #$00			ldy 	#0
.22ff	a5 04		lda $04				lda 	temp0
.2301	91 06		sta ($06),y			sta 	(temp1),y
.2303	c8		iny				iny
.2304	a5 05		lda $05				lda 	temp0+1
.2306	91 06		sta ($06),y			sta 	(temp1),y
.2308					_SWExit:
.2308	68		pla				pla
.2309	a8		tay				tay
.230a	68		pla				pla
.230b	60		rts				rts
.230c					CheckOverwriteCurrent:
.230c	a0 00		ldy #$00			ldy 	#0 						; get address of string being written to temp0
.230e	b5 51		lda $51,x			lda 	esInt1+1,x
.2310	85 05		sta $05				sta 	temp0+1
.2312	b5 49		lda $49,x			lda 	esInt0+1,x
.2314	85 04		sta $04				sta 	temp0
.2316	b1 04		lda ($04),y			lda 	(temp0),y 				; get length of string being copied.
.2318	8d fc 0a	sta $0afc			sta 	srcStrLen
.231b	b5 48		lda $48,x			lda 	esInt0,x 				; copy where the final address it being written to temp1.
.231d	85 06		sta $06				sta 	temp1 					; e.g. if it is ax$ then temp1 will point to the ax$
.231f	b5 50		lda $50,x			lda 	esInt1,x 				; data record + 5
.2321	85 07		sta $07				sta 	temp1+1
.2323	a0 01		ldy #$01			ldy 	#1 						; get the MSB of the address of string currently stored there.
.2325	b1 06		lda ($06),y			lda 	(temp1),y
.2327	c5 0e		cmp $0e				cmp 	highMemory+1 			; if < high memory then it cannot be something stored
.2329	90 1b		bcc $2346			bcc 	_COCFail 				; in hard memory.
.232b	a0 00		ldy #$00			ldy 	#0 						; copy target address - 1 into temp2
.232d	b1 06		lda ($06),y			lda 	(temp1),y
.232f	e9 01		sbc #$01			sbc 	#1
.2331	85 08		sta $08				sta 	temp2
.2333	c8		iny				iny
.2334	b1 06		lda ($06),y			lda 	(temp1),y
.2336	e9 00		sbc #$00			sbc 	#0
.2338	85 09		sta $09				sta 	temp2+1
.233a	a0 00		ldy #$00			ldy 	#0 						; how large is this physical chunk.
.233c	b1 08		lda ($08),y			lda 	(temp2),y
.233e	38		sec				sec  							; maximum character capacity.
.233f	e9 02		sbc #$02			sbc 	#2
.2341	cd fc 0a	cmp $0afc			cmp 	srcStrLen 				; if >= the required length
.2344	b0 02		bcs $2348			bcs 	_COCCanReuse
.2346					_COCFail:
.2346	18		clc				clc
.2347	60		rts				rts
.2348					_COCCanReuse:
.2348	38		sec				sec
.2349	60		rts				rts
.234a					RequiresConcretion:
.234a	a5 05		lda $05				lda 	temp0+1 				; get MSB of address of string to be written
.234c	c5 0e		cmp $0e				cmp 	highMemory+1 			; if >= high memory it is concreted
.234e	b0 0a		bcs $235a			bcs 	_RCSucceed 				; so it needs concreting again - duplication.
.2350	a5 7b		lda $7b				lda 	softMemAlloc+1 			; have we allocated any soft memory yet ?
.2352	f0 08		beq $235c			beq 	_RCFail 				; if not, this cannot be soft memory.
.2354	a5 05		lda $05				lda 	temp0+1 				; get MSB of address of string to be written
.2356	c5 7b		cmp $7b				cmp 	softMemAlloc+1 			; if >= soft mem alloc it is either soft
.2358	90 02		bcc $235c			bcc 	_RCFail 				; so concreting
.235a					_RCSucceed:
.235a	38		sec				sec
.235b	60		rts				rts
.235c					_RCFail:
.235c	18		clc				clc
.235d	60		rts				rts
.235e					AllocateHardMemory:
.235e	98		tya				tya
.235f	48		pha				pha
.2360	ad fc 0a	lda $0afc			lda 	srcStrLen 				; characters in string
.2363	69 0a		adc #$0a			adc 	#1+1+8 					; one for hard memory size, one for string size, extra for expansion
.2365	b0 04		bcs $236b			bcs 	_AHMSetMax 				; max out that amount.
.2367	c9 fe		cmp #$fe			cmp 	#MaxStringSize+2
.2369	90 02		bcc $236d			bcc 	_AHMIsOkay
.236b					_AHMSetMax:
.236b	a9 fe		lda #$fe			lda 	#MaxStringSize+2
.236d					_AHMIsOkay:
.236d	48		pha				pha
.236e	49 ff		eor #$ff			eor 	#$FF 					; complement and add to high Memory
.2370	38		sec				sec  							; and copy result to TOS as target address.
.2371	65 0d		adc $0d				adc 	highMemory
.2373	85 0d		sta $0d				sta 	highMemory
.2375	a5 0e		lda $0e				lda 	highMemory+1
.2377	69 ff		adc #$ff			adc 	#$FF
.2379	85 0e		sta $0e				sta 	highMemory+1
.237b	a0 00		ldy #$00			ldy 	#0 						; Y = 0
.237d	68		pla				pla 							; get the total size of the storage block
.237e	91 0d		sta ($0d),y			sta 	(highMemory),y
.2380	18		clc				clc
.2381	a5 0d		lda $0d				lda		highMemory 				; point the target address to the byte after this.
.2383	69 01		adc #$01			adc 	#1
.2385	91 06		sta ($06),y			sta 	(temp1),y
.2387	a5 0e		lda $0e				lda 	highMemory+1
.2389	69 00		adc #$00			adc 	#0
.238b	c8		iny				iny
.238c	91 06		sta ($06),y			sta 	(temp1),y
.238e	68		pla				pla
.238f	a8		tay				tay
.2390	60		rts				rts
.2391					CopyStringToHardMemory:
.2391	98		tya				tya
.2392	48		pha				pha
.2393	a0 00		ldy #$00			ldy 	#0 						; copy target address to temp2
.2395	b1 06		lda ($06),y			lda 	(temp1),y
.2397	85 08		sta $08				sta 	temp2
.2399	c8		iny				iny
.239a	b1 06		lda ($06),y			lda 	(temp1),y
.239c	85 09		sta $09				sta 	temp2+1
.239e	ac fc 0a	ldy $0afc			ldy 	srcStrLen 				; copy this + 1 characters, (length too) hence $FF compare
.23a1					_CSTHMLoop:
.23a1	b1 04		lda ($04),y			lda 	(temp0),y
.23a3	91 08		sta ($08),y			sta 	(temp2),y
.23a5	88		dey				dey
.23a6	c0 ff		cpy #$ff			cpy 	#$FF
.23a8	d0 f7		bne $23a1			bne 	_CSTHMLoop
.23aa	68		pla				pla
.23ab	a8		tay				tay
.23ac	60		rts				rts
.23ad					CheckSpecialConcretion:
.23ad	ad fc 0a	lda $0afc			lda 	srcStrLen 				; check string is null.
.23b0	f0 02		beq $23b4			beq 	_CSCNullString
.23b2	18		clc				clc
.23b3	60		rts				rts
.23b4					_CSCNullString:
.23b4	a9 00		lda #$00			lda 	#0
.23b6	8d cc 0a	sta $0acc			sta 	NullString
.23b9	a9 cc		lda #$cc			lda 	#(NullString) & $FF
.23bb	85 04		sta $04				sta 	temp0
.23bd	a9 0a		lda #$0a			lda 	#(NullString) >> 8
.23bf	85 05		sta $05				sta 	1+(temp0)
.23c1	38		sec				sec
.23c2	60		rts				rts

;******  Return to file: string/string.asm

.23c3					stringHandler:
.23c3	7c c6 23	jmp ($23c6,x)			jmp 	(stringVectors,x)
.23c6					stringVectors:
>23c6	74 21					.word StringChrs           ; index 0
>23c8	67 22					.word StrClone             ; index 2
>23ca	df 21					.word StringConcat         ; index 4
>23cc	96 21					.word STRCompare           ; index 6
>23ce	8d 22					.word StringSubstring      ; index 8
>23d0	e1 22					.word StringWrite          ; index 10

;******  Return to file: basic.asm

.23d2					section_end_string:
.23d2					section_start_tokeniser:

;******  Processing file: tokeniser/tokeniser.asm

.23d2					tokeniserHandler:
.23d2	7c d5 23	jmp ($23d5,x)			jmp 	(tokeniserVectors,x)
.23d5					tokeniserVectors:

;******  Return to file: basic.asm

.23d5					section_end_tokeniser:
.23d5					section_start_variable:

;******  Processing file: variable/variable.asm


;******  Processing file: variable/access.asm

.0afd					varHash:
>0afd							.fill	1
.0afe					varType:
>0afe							.fill 	1
.0aff					varEnd:
>0aff							.fill 	1
.007c					hashList:
>007c							.fill 	2
.23d5					AccessVariable:
.23d5	aa		tax				tax 								; stack in X
.23d6	c8		iny				iny
.23d7	b1 02		lda ($02),y			lda 	(codePtr),y
.23d9	88		dey				dey
.23da	c9 3a		cmp #$3a			cmp 	#TYPE_INT 					; is it one of the end markers ?
.23dc	d0 15		bne $23f3			bne 	_AVLong
.23de	b1 02		lda ($02),y			lda 	(codePtr),y 				; this is the 6 bit ASCII of A-Z 1-26
.23e0	38		sec				sec 	 							; make it 0-25
.23e1	e9 01		sbc #$01			sbc 	#1
.23e3	0a		asl a				asl 	a 							; x 4 is LSB of address
.23e4	0a		asl a				asl 	a
.23e5	95 48		sta $48,x			sta 	esInt0,x
.23e7	a9 0a		lda #$0a			lda 	#SingleLetterVar >> 8 		; make it an address
.23e9	95 50		sta $50,x			sta 	esInt1,x
.23eb	a9 80		lda #$80			lda 	#$80 						; type is integer reference.
.23ed	95 40		sta $40,x			sta 	esType,x
.23ef	c8		iny				iny 								; skip over the variable reference in the code.
.23f0	c8		iny				iny
.23f1	8a		txa				txa 								; stack in A to return.
.23f2	60		rts				rts
.23f3					_AVLong:
.23f3	8a		txa				txa
.23f4	48		pha				pha
.23f5	20 33 24	jsr $2433			jsr 	AccessSetup 				; set up the basic stuff.
.23f8	20 e6 24	jsr $24e6			jsr 	FindVariable 				; does the variable exist already
.23fb	b0 0e		bcs $240b			bcs 	_AVFound
.23fd	ad fe 0a	lda $0afe			lda 	varType 					; is the variable type an array
.2400	4a		lsr a				lsr 	a
.2401	90 05		bcc $2408			bcc 	_AVCanCreate
.2403	a2 15		ldx #$15			ldx 	#ErrorID_noauto
.2405	20 65 21	jsr $2165			jsr 	ErrorHandler
.2408					_AVCanCreate:
.2408	20 70 24	jsr $2470			jsr 	CreateVariable 				; no, create it.
.240b					_AVFound:
.240b	68		pla				pla
.240c	aa		tax				tax
.240d	18		clc				clc 								; copy temp0 (variable record address)
.240e	a5 04		lda $04				lda 	temp0 						; +5 (to point to the data)
.2410	69 05		adc #$05			adc 	#5
.2412	95 48		sta $48,x			sta 	esInt0,x
.2414	a5 05		lda $05				lda 	temp0+1
.2416	69 00		adc #$00			adc 	#0
.2418	95 50		sta $50,x			sta 	esInt1,x
.241a	a9 00		lda #$00			lda 	#0
.241c	95 58		sta $58,x			sta 	esInt2,x
.241e	95 60		sta $60,x			sta 	esInt3,x
.2420	ac fe 0a	ldy $0afe			ldy 	varType 					; get the type ID from the type.
.2423	b9 f3 23	lda $23f3,y			lda 	_AVTypeTable-$3A,y
.2426	95 40		sta $40,x			sta 	esType,x
.2428	ac ff 0a	ldy $0aff			ldy 	varEnd 						; restore Y
.242b	8a		txa				txa 								; return stack in A and return
.242c	60		rts				rts
.242d					_AVTypeTable:
>242d	80 80						.byte 	$80,$80						; integer
>242f	c0 c0						.byte 	$C0,$C0 					; string
>2431	81 81						.byte 	$81,$81 					; float
.2433					AccessSetup:
.2433	a9 00		lda #$00			lda 	#0 							; zero the hash byte.
.2435	8d fd 0a	sta $0afd			sta 	varHash
.2438	98		tya				tya
.2439	48		pha				pha
.243a	b1 02		lda ($02),y	_ASLoop:lda 	(codePtr),y					; get next identifier character
.243c	c9 3a		cmp #$3a			cmp 	#$3A 						; is it 3A-3F which end all identifiers ?
.243e	b0 0b		bcs $244b			bcs 	_ASComplete
.2440	18		clc				clc 								; add to the hash. Might improve this.
.2441	6d fd 0a	adc $0afd			adc 	varHash
.2444	8d fd 0a	sta $0afd			sta 	varHash
.2447	c8		iny				iny 								; next character
.2448	4c 3a 24	jmp $243a			jmp 	_ASLoop
.244b					_ASComplete:
.244b	8d fe 0a	sta $0afe			sta 	varType 					; save variable type byte
.244e	c8		iny				iny
.244f	8c ff 0a	sty $0aff			sty 	varEnd 						; save the ending position.
.2452	38		sec				sec 								; convert type byte from $3A-$3F to 0..5
.2453	e9 3a		sbc #$3a			sbc 	#$3A
.2455	0a		asl a				asl 	a 							; multiply by hashTableSize (8 in this case)
.2456	0a		asl a				asl 	a
.2457	0a		asl a				asl 	a
.2458	0a		asl a				asl 	a 							; 2 bytes/word
.2459	85 04		sta $04				sta 	temp0 						; this is the offset to the start of the table.
.245b	ad fd 0a	lda $0afd			lda 	varHash 					; get hash
.245e	29 07		and #$07			and 	#(hashTableSize-1)			; force into range
.2460	0a		asl a				asl  	a 							; x 2 (for word) and CC
.2461	65 04		adc $04				adc 	temp0 						; now offset from the start of the hash table.
.2463	69 68		adc #$68			adc 	#hashTables & $FF 			; add to hash table base address
.2465	85 7c		sta $7c				sta 	hashList
.2467	a9 0a		lda #$0a			lda 	#hashTables >> 8
.2469	69 00		adc #$00			adc 	#0
.246b	85 7d		sta $7d				sta 	hashList+1
.246d	68		pla				pla
.246e	a8		tay				tay
.246f	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/create.asm

.2470					CreateVariable:
.2470	98		tya				tya 								; push Y on the stack twice.
.2471	48		pha				pha
.2472	48		pha				pha
.2473	ae fe 0a	ldx $0afe			ldx 	varType 					; get var type 0-5
.2476	bd a6 24	lda $24a6,x			lda		_CVSize-$3A,x 				; the bytes for this new variable.
.2479	48		pha				pha 								; save length
.247a	a8		tay				tay 								; put into Y.
.247b	a5 0f		lda $0f				lda 	lowMemory 					; set low Memory ptr to temp0
.247d	85 04		sta $04				sta 	temp0
.247f	a5 10		lda $10				lda 	lowMemory+1
.2481	85 05		sta $05				sta 	temp0+1
.2483	68		pla				pla 								; get length
.2484	20 6b 10	jsr $106b			jsr 	AdvanceLowMemoryByte 		; shift alloc memory forward by the length.
.2487					_CVClear:
.2487	88		dey				dey
.2488	a9 00		lda #$00			lda 	#0
.248a	91 04		sta ($04),y			sta 	(temp0),y
.248c	c0 04		cpy #$04			cpy 	#4
.248e	d0 f7		bne $2487			bne 	_CVClear
.2490	ad fd 0a	lda $0afd			lda 	varHash 					; store hash at offset 4.
.2493	91 04		sta ($04),y			sta 	(temp0),y
.2495	68		pla				pla 								; offset, work out where the variable name is.
.2496	18		clc				clc
.2497	65 02		adc $02				adc 	codePtr
.2499	a0 02		ldy #$02			ldy 	#2 							; copy that into slots 2 + 3.
.249b	91 04		sta ($04),y			sta 	(temp0),y
.249d	a5 03		lda $03				lda 	codePtr+1
.249f	69 00		adc #$00			adc 	#0
.24a1	c8		iny				iny
.24a2	91 04		sta ($04),y			sta 	(temp0),y
.24a4	a0 00		ldy #$00			ldy 	#0 							; copy current hash pointer in link
.24a6	b1 7c		lda ($7c),y			lda 	(hashList),y
.24a8	91 04		sta ($04),y			sta 	(temp0),y
.24aa	c8		iny				iny
.24ab	b1 7c		lda ($7c),y			lda 	(hashList),y
.24ad	91 04		sta ($04),y			sta 	(temp0),y
.24af	a5 05		lda $05				lda 	temp0+1 					; set new link
.24b1	91 7c		sta ($7c),y			sta 	(hashList),y
.24b3	88		dey				dey
.24b4	a5 04		lda $04				lda 	temp0
.24b6	91 7c		sta ($7c),y			sta 	(hashList),y
.24b8	ad fe 0a	lda $0afe			lda 	varType 					; is it a string ($3C)
.24bb	c9 3e		cmp #$3e			cmp 	#$3E
.24bd	f0 17		beq $24d6			beq 	_CVDefaultFloat0
.24bf	c9 3c		cmp #$3c			cmp 	#$3C
.24c1	d0 1a		bne $24dd			bne 	_CVNoDefaultNull
.24c3	a9 00		lda #$00			lda 	#0 							; put a reference to null string as the default value.
.24c5	8d cc 0a	sta $0acc			sta 	NullString
.24c8	a0 05		ldy #$05			ldy 	#5
.24ca	a9 cc		lda #$cc			lda 	#NullString & $FF
.24cc	91 04		sta ($04),y			sta 	(temp0),y
.24ce	a9 0a		lda #$0a			lda 	#NullString >> 8
.24d0	c8		iny				iny
.24d1	91 04		sta ($04),y			sta 	(temp0),y
.24d3	4c dd 24	jmp $24dd			jmp 	_CVNoDefaultNull
.24d6					_CVDefaultFloat0:
.24d6	a0 05		ldy #$05			ldy 	#5
.24d8	a2 1e		ldx #$1e		ldx	#30
.24da	20 6c 21	jsr $216c		jsr	floatingpointHandler
.24dd					_CVNoDefaultNull:
.24dd	68		pla				pla
.24de	a8		tay				tay
.24df	60		rts				rts
>24e0	09 09				_CVSize:.byte 	VarHSize+VarISize,VarHSize+VarISize 					; <storage for integer>
>24e2	07 07						.byte 	VarHSize+VarSSize,VarHSize+VarSSize 					; <storage for string>
>24e4	0b 0b						.byte 	VarHSize+VarFSize,VarHSize+VarFSize 					; <storage for float>

;******  Return to file: variable/variable.asm


;******  Processing file: variable/find.asm

.24e6					FindVariable:
.24e6	98		tya				tya
.24e7	48		pha				pha
.24e8	98		tya				tya 								; point temp2 to the actual name.
.24e9	18		clc				clc
.24ea	65 02		adc $02				adc 	codePtr
.24ec	85 08		sta $08				sta 	temp2
.24ee	a5 03		lda $03				lda 	codePtr+1
.24f0	69 00		adc #$00			adc 	#0
.24f2	85 09		sta $09				sta 	temp2+1
.24f4	a0 00		ldy #$00			ldy 	#0
.24f6	a5 7c		lda $7c				lda 	hashList 					; copy hashlist to temp0
.24f8	85 04		sta $04				sta 	temp0
.24fa	a5 7d		lda $7d				lda 	hashList+1
.24fc	85 05		sta $05				sta 	temp0+1
.24fe	a0 01		ldy #$01	_FVNext:ldy 	#1 							; get MSB
.2500	b1 04		lda ($04),y			lda 	(temp0),y
.2502	f0 2c		beq $2530			beq 	_FVFail
.2504	aa		tax				tax
.2505	88		dey				dey		 							; get LSB
.2506	b1 04		lda ($04),y			lda 	(temp0),y
.2508	85 04		sta $04				sta 	temp0 						; update pointer.
.250a	86 05		stx $05				stx 	temp0+1
.250c	a0 04		ldy #$04			ldy 	#4 							; check hashes match
.250e	b1 04		lda ($04),y			lda 	(temp0),y
.2510	cd fd 0a	cmp $0afd			cmp 	varHash
.2513	d0 e9		bne $24fe			bne 	_FVNext 					; if not, no point in checking the name.
.2515	88		dey				dey 								; copy name pointer to temp1.
.2516	b1 04		lda ($04),y			lda 	(temp0),y
.2518	85 07		sta $07				sta 	temp1+1
.251a	88		dey				dey
.251b	b1 04		lda ($04),y			lda 	(temp0),y
.251d	85 06		sta $06				sta 	temp1
.251f	a0 00		ldy #$00			ldy 	#0
.2521					_FVCheck:
.2521	b1 06		lda ($06),y			lda 	(temp1),y 					; compare names
.2523	d1 08		cmp ($08),y			cmp 	(temp2),y
.2525	d0 d7		bne $24fe			bne 	_FVNext		 				; fail if different.
.2527	c8		iny				iny
.2528	c9 3a		cmp #$3a			cmp 	#$3A 						; until reached the end marker.
.252a	90 f5		bcc $2521			bcc 	_FVCheck
.252c	68		pla				pla
.252d	a8		tay				tay
.252e	38		sec				sec
.252f	60		rts				rts
.2530					_FVFail:
.2530	68		pla				pla
.2531	a8		tay				tay
.2532	18		clc				clc
.2533	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/reset.asm

.2534					HashTableReset:
.2534	a2 60		ldx #$60			ldx 	#6*2*hashTableSize
.2536	a9 00		lda #$00			lda 	#0
.2538					_HTRClear:
.2538	9d 67 0a	sta $0a67,x			sta 	hashTables-1,x
.253b	ca		dex				dex
.253c	d0 fa		bne $2538			bne 	_HTRClear
.253e	60		rts				rts

;******  Return to file: variable/variable.asm

.253f					variableHandler:
.253f	7c 42 25	jmp ($2542,x)			jmp 	(variableVectors,x)
.2542					variableVectors:
>2542	d5 23					.word AccessVariable       ; index 0
>2544	34 25					.word HashTableReset       ; index 2

;******  Return to file: basic.asm

.2546					section_end_variable:

;******  End of listing
