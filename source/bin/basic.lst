
; 64tass Turbo Assembler Macro V1.55.2200 listing file
; 64tass -Walias -Wmacro-prefix -Wall -q -c -L ../source/bin/basic.lst -l ../source/bin/basic.lbl -Wall -o ../source/bin/basic.prg basic.asm
; Fri Mar  5 14:10:24 2021

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: basic.asm


;******  Processing file: main/01common.inc


;******  Processing file: main/../generated/installed.inc

=1					installed_main = 1
=1					installed_variable = 1
=1					installed_assembler = 1
=1					installed_error = 1
=1					installed_extension = 1
=1					installed_string = 1
=1					installed_device = 1
=0					installed_floatingpoint = 0
=1					installed_interaction = 1
=1					installed_tokeniser = 1

;******  Return to file: main/01common.inc

=$1000					CodeStart = $1000
=$800					MemoryStorage = $800
=$02					ZeroPageStorage = $02
=8					StackSize = 8
=512					retStackSize = 512
=8					hashTableSize = 8			; if this changes, the calculation is AccessSetup has to match it.
="G"					markerGOSUB = 'G'
="R"					markerREPEAT = 'R'
="F"					markerFOR = 'F'
="W"					markerWHILE = 'W'
="P"					markerPROC = 'P'
="$"					markerSTRING = '$'
="#"					markerFLOAT = '#'
="%"					markerINT = '%'
=5					VarHSize = 5 								; header (2 link, 2 name, 1 hash)
=4					VarISize = 4 								; integer (32 bit)
=6					VarFSize = 6 								; float (4 mantissa, 1 exponent 1 sign/zero)
=2					VarSSize = 2 								; address (2 bytes)

;******  Return to file: basic.asm


;******  Processing file: main/02macros.inc


;******  Return to file: basic.asm


;******  Processing file: main/03data.inc

>0002					codePtr:.fill 	2							; (codePtr),y points to code.
>0004					temp0: 	.fill 	2							; working variables.
>0006					temp1: 	.fill 	2
>0008					temp2: 	.fill 	2
>000a					temp3: 	.fill 	2
.000c					tempshort:
>000c							.fill 	1
.000d					highMemory:
>000d							.fill 	2
.000f					lowMemory:
>000f							.fill 	2
>0040					esType:	.fill 	StackSize  					; type byte (see above)
>0048					esInt0:	.fill 	StackSize 					; integer or mantissa
>0050					esInt1:	.fill 	StackSize
>0058					esInt2:	.fill 	StackSize
>0060					esInt3:	.fill 	StackSize
>0068					esExp:	.fill 	StackSize 					; exponent ($80 = 0)
>0070					esZSign:.fill 	StackSize 					; for floating point - sign (bit 7) isZero (bit 6)
=$48					esMant0 = esInt0 							; synonyms.
=$50					esMant1 = esInt1
=$58					esMant2 = esInt2
=$60					esMant3 = esInt3
>0800							.align	256
.0800					returnStack:
>0800							.fill 	retStackSize
>0a00							.align	256
.0a00					SingleLetterVar:
>0a00					 		.fill 	26*4
.0a68					hashTables:
>0a68							.fill 	6*2*hashTableSize
.0ac8					basePage:
>0ac8							.fill 	2
.0aca					endMemory:
>0aca							.fill 	2
.0acc					NullString:
>0acc							.fill 	1							; don't waste memory concreting null strings.
.0acd					convertBuffer:
>0acd							.fill 	35

;******  Processing file: main/../generated/tokenconst.inc

=$80					TOK_EOL=$80
=$81					TOK_SHIFT1=$81
=$82					TOK_SHIFT2=$82
=$83					TOK_SHIFT3=$83
=$84					TOK_FPC=$84
=$85					TOK_STR=$85
=$86					TOK_BINARYST=$86
=$99					TOK_STRUCTST=$99
=$a4					TOK_UNARYST=$a4
=$c4					TOK_TOKENS=$c4
=$86					TKW_AND                      = $86 ; and
=$87					TKW_OR                       = $87 ; or
=$88					TKW_XOR                      = $88 ; xor
=$89					TKW_GREATEREQUAL             = $89 ; >=
=$8a					TKW_LESSEQUAL                = $8a ; <=
=$8b					TKW_GREATER                  = $8b ; >
=$8c					TKW_LESS                     = $8c ; <
=$8d					TKW_EQUAL                    = $8d ; =
=$8e					TKW_LESSGREATER              = $8e ; <>
=$8f					TKW_PLUS                     = $8f ; +
=$90					TKW_MINUS                    = $90 ; -
=$91					TKW_GREATERGREATER           = $91 ; >>
=$92					TKW_LESSLESS                 = $92 ; <<
=$93					TKW_STAR                     = $93 ; *
=$94					TKW_SLASH                    = $94 ; /
=$95					TKW_MOD                      = $95 ; mod
=$96					TKW_HAT                      = $96 ; ^
=$97					TKW_PLING                    = $97 ; !
=$98					TKW_QMARK                    = $98 ; ?
=$99					TKW_REPEAT                   = $99 ; repeat
=$9a					TKW_WHILE                    = $9a ; while
=$9b					TKW_FOR                      = $9b ; for
=$9c					TKW_IF                       = $9c ; if
=$9d					TKW_DEFPROC                  = $9d ; defproc
=$9e					TKW_UNTIL                    = $9e ; until
=$9f					TKW_WEND                     = $9f ; wend
=$a0					TKW_NEXT                     = $a0 ; next
=$a1					TKW_THEN                     = $a1 ; then
=$a2					TKW_ENDIF                    = $a2 ; endif
=$a3					TKW_ENDPROC                  = $a3 ; endproc
=$a4					TKW_LPAREN                   = $a4 ; (
=$a5					TKW_LENLPAREN                = $a5 ; len(
=$a6					TKW_SGNLPAREN                = $a6 ; sgn(
=$a7					TKW_ABSLPAREN                = $a7 ; abs(
=$a8					TKW_RANDOMLPAREN             = $a8 ; random(
=$a9					TKW_PAGE                     = $a9 ; page
=$aa					TKW_TRUE                     = $aa ; true
=$ab					TKW_FALSE                    = $ab ; false
=$ac					TKW_MINLPAREN                = $ac ; min(
=$ad					TKW_MAXLPAREN                = $ad ; max(
=$ae					TKW_SYSLPAREN                = $ae ; sys(
=$af					TKW_TIMERLPAREN              = $af ; timer(
=$b0					TKW_EVENTLPAREN              = $b0 ; event(
=$b1					TKW_GETLPAREN                = $b1 ; get(
=$b2					TKW_INKEYLPAREN              = $b2 ; inkey(
=$b3					TKW_ALLOCLPAREN              = $b3 ; alloc(
=$b4					TKW_CHRDOLLARLPAREN          = $b4 ; chr$(
=$b5					TKW_LEFTDOLLARLPAREN         = $b5 ; left$(
=$b6					TKW_MIDDOLLARLPAREN          = $b6 ; mid$(
=$b7					TKW_RIGHTDOLLARLPAREN        = $b7 ; right$(
=$b8					TKW_STRDOLLARLPAREN          = $b8 ; str$(
=$b9					TKW_VALLPAREN                = $b9 ; val(
=$ba					TKW_PEEKLPAREN               = $ba ; peek(
=$bb					TKW_DEEKLPAREN               = $bb ; deek(
=$bc					TKW_LEEKLPAREN               = $bc ; leek(
=$bd					TKW_ASCLPAREN                = $bd ; asc(
=$be					TKW_INTLPAREN                = $be ; int(
=$bf					TKW_FLOATLPAREN              = $bf ; float(
=$c0					TKW_ISVALLPAREN              = $c0 ; isval(
=$c1					TKW_AT                       = $c1 ; @
=$c2					TKW_WAVY                     = $c2 ; ~
=$c3					TKW_AMP                      = $c3 ; &
=$c4					TKW_RPAREN                   = $c4 ; )
=$c5					TKW_COLON                    = $c5 ; :
=$c6					TKW_COMMA                    = $c6 ; ,
=$c7					TKW_SEMICOLON                = $c7 ; ;
=$c8					TKW_QUOTE                    = $c8 ; '
=$c9					TKW_TO                       = $c9 ; to
=$ca					TKW_STEP                     = $ca ; step
=$cb					TKW_PROC                     = $cb ; proc
=$cc					TKW_LOCAL                    = $cc ; local
=$cd					TKW_DIM                      = $cd ; dim
=$ce					TKW_REM                      = $ce ; rem
=$cf					TKW_LET                      = $cf ; let
=$d0					TKW_INPUT                    = $d0 ; input
=$d1					TKW_ELSE                     = $d1 ; else
=$d2					TKW_VDU                      = $d2 ; vdu
=$d3					TKW_PRINT                    = $d3 ; print
=$d4					TKW_GOTO                     = $d4 ; goto
=$d5					TKW_GOSUB                    = $d5 ; gosub
=$d6					TKW_RETURN                   = $d6 ; return
=$d7					TKW_DATA                     = $d7 ; data
=$d8					TKW_ASSERT                   = $d8 ; assert
=$d9					TKW_POKE                     = $d9 ; poke
=$da					TKW_DOKE                     = $da ; doke
=$db					TKW_LOKE                     = $db ; loke
=$86					TKW_CLEAR                    = $86 ; clear
=$87					TKW_LOAD                     = $87 ; load
=$88					TKW_SAVE                     = $88 ; save
=$89					TKW_LIST                     = $89 ; list
=$8a					TKW_NEW                      = $8a ; new
=$8b					TKW_RUN                      = $8b ; run
=$8c					TKW_READ                     = $8c ; read
=$8d					TKW_RESTORE                  = $8d ; restore
=$8e					TKW_END                      = $8e ; end
=$8f					TKW_STOP                     = $8f ; stop
=$86					TKW_VPOKE                    = $86 ; vpoke
=$87					TKW_VDOKE                    = $87 ; vdoke
=$86					TKW_VPEEKLPAREN              = $86 ; vpeek(
=$87					TKW_VDEEKLPAREN              = $87 ; vdeek(

;******  Return to file: main/03data.inc

=$3a					TYPE_INT =		($3A) 						; type bytes that end identifier.
=$3b					TYPE_INTARRAY =	($3B)
=$3c					TYPE_STR =		($3C)
=$3d					TYPE_STRARRAY =	($3D)
=$3e					TYPE_FLOAT =	($3E)
=$3f					TYPE_FLOATARRAY=($3F)

;******  Return to file: basic.asm


;******  Processing file: main/imath/intmacros.inc


;******  Return to file: basic.asm


;******  Processing file: main/main.inc


;******  Return to file: basic.asm


;******  Processing file: assembler/assembler.inc


;******  Return to file: basic.asm


;******  Processing file: device/device.inc


;******  Return to file: basic.asm


;******  Processing file: error/error.inc


;******  Return to file: basic.asm


;******  Processing file: error/errorhandler.inc


;******  Processing file: error/../generated/errorid.inc

=1					ErrorID_Missing = 1 ; Feature not Present
=2					ErrorID_Syntax = 2 ; Syntax Error
=3					ErrorID_NoModule = 3 ; Module disabled
=4					ErrorID_Assert = 4 ; Assertion failed
=5					ErrorID_DivZero = 5 ; Divide By Zero
=6					ErrorID_Stop = 6 ; Stop
=7					ErrorID_BadType = 7 ; Type Mismatch
=8					ErrorID_BadValue = 8 ; Illegal Value
=9					ErrorID_MissingRP = 9 ; Missing right bracket
=10					ErrorID_MissingComma = 10 ; Missing comma
=11					ErrorID_NoReference = 11 ; Missing reference
=12					ErrorID_LineNumber = 12 ; Line Number not found
=13					ErrorID_StrLen = 13 ; String too long.
=14					ErrorID_ReturnErr = 14 ; RETURN without GOSUB
=15					ErrorID_UntilErr = 15 ; UNTIL without REPEAT
=16					ErrorID_NextErr = 16 ; NEXT without FOR
=17					ErrorID_WendErr = 17 ; WEND without WHILE
=18					ErrorID_endprocErr = 18 ; ENDPROC without PROC
=19					ErrorID_BadIndex = 19 ; Bad NEXT index
=20					ErrorID_Struct = 20 ; Structures nested wrong
=21					ErrorID_NoAuto = 21 ; Cannot create variable
=22					ErrorID_RetStack = 22 ; Return stack out of space.
=23					ErrorID_NoProc = 23 ; Unknown Procedure
=24					ErrorID_Params = 24 ; Parameters do not match.

;******  Return to file: error/errorhandler.inc


;******  Return to file: basic.asm


;******  Processing file: extension/extension.inc


;******  Return to file: basic.asm


;******  Processing file: floatingpoint/floatingpoint.inc


;******  Return to file: basic.asm


;******  Processing file: interaction/interaction.inc


;******  Return to file: basic.asm


;******  Processing file: string/memory.inc

=252					MaxStringSize = 252

;******  Return to file: basic.asm


;******  Processing file: string/string.inc


;******  Return to file: basic.asm


;******  Processing file: tokeniser/tokeniser.inc


;******  Return to file: basic.asm


;******  Processing file: variable/variable.inc


;******  Return to file: basic.asm

.1000					section_start_main:

;******  Processing file: main/main.asm


;******  Processing file: main/00start.asm

.1000	a2 ff		ldx #$ff	Start:	ldx 	#$FF
.1002	9a		txs				txs
.1003	a9 00		lda #$00			lda 	#(testBaseAddress) & $FF
.1005	8d c8 0a	sta $0ac8			sta 	basePage
.1008	a9 50		lda #$50			lda 	#(testBaseAddress) >> 8
.100a	8d c9 0a	sta $0ac9			sta 	1+(basePage)
.100d	a9 00		lda #$00			lda 	#($9800) & $FF
.100f	8d ca 0a	sta $0aca			sta 	endMemory
.1012	a9 98		lda #$98			lda 	#($9800) >> 8
.1014	8d cb 0a	sta $0acb			sta 	1+(endMemory)
.1017	4c 9f 13	jmp $139f			jmp 	Command_Run
.2596					ReturnPos:
.5000					testBaseAddress:

;******  Processing file: main/../generated/testcode.inc

>5000	09 0a 00 82 86 40 c6 40			.byte 9,10,0,130,134,64,198,64,128,13,11,0,130,135,68,64,198,195,79,64,64,128,8,12,0,153,197,158,171,128,0
>5008	80 0d 0b 00 82 87 44 40 c6 c3 4f 40 40 80 08 0c
>5018	00 99 c5 9e ab 80 00

;******  Return to file: main/00start.asm


;******  Return to file: main/main.asm


;******  Processing file: main/commands/assert.asm

.101a					Command_Assert:
.101a	20 43 1a	jsr $1a43			jsr 	EvaluateRootInteger 		; what is being asserted.
.101d	20 63 20	jsr $2063			jsr 	MInt32Zero 					; is it true ?
.1020	f0 01		beq $1023			beq 	_CAError
.1022	60		rts				rts
.1023					_CAError:
.1023	a2 04		ldx #$04			ldx 	#ErrorID_Assert
.1025	20 6a 21	jsr $216a		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/commands/clear.asm

.1028					CommandClear:
.1028	98		tya				tya
.1029	48		pha				pha
.102a	ad ca 0a	lda $0aca			lda 	endMemory					; set high memory = end of memory
.102d	85 0d		sta $0d				sta 	highMemory
.102f	ad cb 0a	lda $0acb			lda 	endMemory+1
.1032	85 0e		sta $0e				sta 	highMemory+1
.1034	ad c8 0a	lda $0ac8			lda 	basePage 					; work out where the program ends.
.1037	85 04		sta $04				sta 	temp0
.1039	ad c9 0a	lda $0ac9			lda 	basePage+1
.103c	85 05		sta $05				sta 	temp0+1
.103e					_CCFindEnd:
.103e	a0 00		ldy #$00			ldy 	#0
.1040	b1 04		lda ($04),y			lda 	(temp0),y
.1042	f0 0c		beq $1050			beq 	_CCFoundEnd 				; offset zero is end.
.1044	18		clc				clc
.1045	65 04		adc $04				adc 	temp0 						; move to next line
.1047	85 04		sta $04				sta 	temp0
.1049	90 f3		bcc $103e			bcc 	_CCFindEnd
.104b	e6 05		inc $05				inc 	temp0+1
.104d	4c 3e 10	jmp $103e			jmp 	_CCFindEnd
.1050					_CCFoundEnd:
.1050	a5 04		lda $04				lda 	temp0 						; put temp0 in lowMemory
.1052	85 0f		sta $0f				sta 	lowMemory
.1054	a5 05		lda $05				lda 	temp0+1
.1056	85 10		sta $10				sta 	lowMemory+1
.1058	a9 04		lda #$04			lda 	#4 							; skip low free memory clear, leave a gap.
.105a	20 6b 10	jsr $106b			jsr 	AdvanceLowMemoryByte		; need at least one here, to skip the end of program zero offset.
.105d	20 c9 20	jsr $20c9			jsr 	RSReset 					; reset the return stack.
.1060	a2 02		ldx #$02		ldx	#2
.1062	20 8f 25	jsr $258f		jsr	variableHandler
.1065	20 46 15	jsr $1546			jsr 	ScanProc 					; scan for procedures
.1068	68		pla				pla
.1069	a8		tay				tay
.106a	60		rts				rts
.106b					AdvanceLowMemoryByte:
.106b	18		clc				clc
.106c	65 0f		adc $0f				adc 	lowMemory
.106e	85 0f		sta $0f				sta 	lowMemory
.1070	90 02		bcc $1074			bcc 	_ALMBExit
.1072	e6 10		inc $10				inc 	lowMemory+1
.1074					_ALMBExit:
.1074	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/for.asm

.2596					Command_FOR:
.2596	a9 46		lda #$46			lda 	#markerFOR 					; allocate the space.
.2598	a2 0b		ldx #$0b			ldx 	#11
.259a	20 d7 20	jsr $20d7			jsr 	RSClaim
.259d	20 b1 10	jsr $10b1			jsr 	CommandLET 					; do the same as LET.
.25a0	a5 40		lda $40				lda 	esType 						; check type should be integer reference.
.25a2	c9 80		cmp #$80			cmp 	#$80
.25a4	d0 4c		bne $25f2			bne 	_CFType
.25a6	a9 c9		lda #$c9			lda 	#TKW_TO 					; check TO present.
.25a8	20 a4 20	jsr $20a4			jsr 	CheckToken
.25ab	a2 01		ldx #$01			ldx 	#1 							; keep the variable address in stack 0
.25ad	20 45 1a	jsr $1a45			jsr 	EvaluateInteger				; get terminal value in stack 1
.25b0	98		tya				tya
.25b1	48		pha				pha
.25b2	a0 04		ldy #$04			ldy 	#4
.25b4	a5 48		lda $48				lda		esInt0 						; the address of the index into 4 and 5
.25b6	91 78		sta ($78),y			sta 	(rsPointer),y
.25b8	c8		iny				iny
.25b9	a5 50		lda $50				lda		esInt1
.25bb	91 78		sta ($78),y			sta 	(rsPointer),y
.25bd	c8		iny				iny
.25be	a9 01		lda #$01			lda 	#1  						; the default step in 6
.25c0	91 78		sta ($78),y			sta 	(rsPointer),y
.25c2	c8		iny				iny
.25c3	a5 49		lda $49				lda		esInt0+1 					; terminal value in 7 to 11.
.25c5	91 78		sta ($78),y			sta 	(rsPointer),y
.25c7	c8		iny				iny
.25c8	a5 51		lda $51				lda		esInt1+1
.25ca	91 78		sta ($78),y			sta 	(rsPointer),y
.25cc	c8		iny				iny
.25cd	a5 59		lda $59				lda		esInt2+1
.25cf	91 78		sta ($78),y			sta 	(rsPointer),y
.25d1	c8		iny				iny
.25d2	a5 61		lda $61				lda		esInt3+1
.25d4	91 78		sta ($78),y			sta 	(rsPointer),y
.25d6	68		pla				pla
.25d7	a8		tay				tay
.25d8	b1 02		lda ($02),y			lda 	(codePtr),y 				; followed by STEP.
.25da	c9 ca		cmp #$ca			cmp 	#TKW_STEP
.25dc	d0 0e		bne $25ec			bne 	_CFDone
.25de	c8		iny				iny									; skip over step.
.25df	20 45 1a	jsr $1a45			jsr 	EvaluateInteger 			; get step
.25e2	98		tya				tya
.25e3	48		pha				pha
.25e4	b5 48		lda $48,x			lda 	esInt0,x 					; copy it into step (bit lazy here)
.25e6	a0 06		ldy #$06			ldy 	#6
.25e8	91 78		sta ($78),y			sta 	(rsPointer),y
.25ea	68		pla				pla
.25eb	a8		tay				tay
.25ec					_CFDone:
.25ec	a9 01		lda #$01			lda 	#1
.25ee	20 03 21	jsr $2103			jsr 	RSSavePosition 				; save position.
.25f1	60		rts				rts
.25f2					_CFType:
.25f2	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.25f4	20 6a 21	jsr $216a		jsr	errorHandler
.25f7					Command_NEXT:
.25f7	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.25f9	a1 78		lda ($78,x)			lda 	(rsPointer,x)
.25fb	c9 46		cmp #$46			cmp 	#markerFOR 						; does it match
.25fd	f0 05		beq $2604			beq 	_isok
.25ff	a2 10		ldx #$10			ldx 	#ErrorID_nextErr
.2601	20 6a 21	jsr $216a		jsr	errorHandler
.2604					_isok:
.2604	b1 02		lda ($02),y			lda 	(codePtr),y 				; is it NEXT <index>
.2606	c9 40		cmp #$40			cmp 	#$40 						; e.g. a variable follows 00-3F
.2608	b0 18		bcs $2622			bcs 	_CNNoIndex
.260a	a2 00		ldx #$00			ldx 	#0 							; start on stack
.260c	20 72 1a	jsr $1a72			jsr 	EvaluateReference 			; this is the variable/parameter to localise.
.260f	98		tya				tya
.2610	48		pha				pha
.2611	a0 04		ldy #$04			ldy 	#4 							; check same variable
.2613	b1 78		lda ($78),y			lda 	(rsPointer),y
.2615	d5 48		cmp $48,x			cmp 	esInt0,x
.2617	d0 76		bne $268f			bne 	_CNBadIndex
.2619	c8		iny				iny
.261a	b1 78		lda ($78),y			lda 	(rsPointer),y
.261c	d5 50		cmp $50,x			cmp 	esInt1,x
.261e	d0 6f		bne $268f			bne 	_CNBadIndex
.2620	68		pla				pla
.2621	a8		tay				tay
.2622					_CNNoIndex:
.2622	98		tya				tya
.2623	48		pha				pha
.2624	a0 04		ldy #$04			ldy 	#4 							; make temp0 point to the index
.2626	b1 78		lda ($78),y			lda 	(rsPointer),y
.2628	85 04		sta $04				sta 	temp0
.262a	c8		iny				iny
.262b	b1 78		lda ($78),y			lda 	(rsPointer),y
.262d	85 05		sta $05				sta 	temp0+1
.262f	c8		iny				iny
.2630	a2 00		ldx #$00			ldx 	#0 							; X is the sign extend part of the step.
.2632	b1 78		lda ($78),y			lda 	(rsPointer),y 				; get the step.
.2634	85 09		sta $09				sta 	temp2+1 					; save for later.
.2636	10 01		bpl $2639			bpl 	_CNSignX
.2638	ca		dex				dex  								; X = $FF
.2639					_CNSignX:
.2639	18		clc				clc 								; add to the LSB
.263a	a0 00		ldy #$00			ldy 	#0
.263c	71 04		adc ($04),y			adc 	(temp0),y
.263e	91 04		sta ($04),y			sta 	(temp0),y
.2640					_CNPropogate:
.2640	c8		iny				iny  								; add the sign extended in X to the rest.
.2641	8a		txa				txa
.2642	71 04		adc ($04),y			adc 	(temp0),y
.2644	91 04		sta ($04),y			sta 	(temp0),y
.2646	c8		iny				iny
.2647	8a		txa				txa
.2648	71 04		adc ($04),y			adc 	(temp0),y
.264a	91 04		sta ($04),y			sta 	(temp0),y
.264c	c8		iny				iny
.264d	8a		txa				txa
.264e	71 04		adc ($04),y			adc 	(temp0),y
.2650	91 04		sta ($04),y			sta 	(temp0),y
.2652	18		clc				clc 								; point temp1 to the terminal value stored in the stack.
.2653	a5 78		lda $78				lda 	rsPointer
.2655	69 07		adc #$07			adc 	#7
.2657	85 06		sta $06				sta 	temp1
.2659	a9 00		lda #$00			lda 	#0
.265b	85 08		sta $08				sta 	temp2 						; clear temp2, which is the OR of all the subtractions.
.265d	a8		tay				tay 								; and clear the Y register again.
.265e	65 79		adc $79				adc 	rsPointer+1
.2660	85 07		sta $07				sta 	temp1+1
.2662	38		sec				sec 								; calculate current - limit oring interim values.
.2663	20 9b 26	jsr $269b			jsr 	_CNCompare
.2666	20 9b 26	jsr $269b			jsr 	_CNCompare
.2669	20 9b 26	jsr $269b			jsr 	_CNCompare
.266c	20 9b 26	jsr $269b			jsr 	_CNCompare
.266f	50 02		bvc $2673			bvc 	_CNNoOverflow 				; converts to a signed comparison on the sign bit.
.2671	49 80		eor #$80			eor 	#$80
.2673					_CNNoOverflow:
.2673	a4 09		ldy $09				ldy 	temp2+1						; get step back
.2675	30 1d		bmi $2694			bmi 	_CNCheckDownto
.2677	c9 00		cmp #$00			cmp 	#0
.2679	30 0c		bmi $2687			bmi 	_CNLoopRound 				; loop round if < =
.267b	a5 08		lda $08				lda 	temp2
.267d	f0 08		beq $2687			beq 	_CNLoopRound
.267f					_CNLoopExit:
.267f	68		pla				pla
.2680	a8		tay				tay
.2681	a9 0b		lda #$0b			lda 	#11
.2683	20 f9 20	jsr $20f9			jsr 	RSFree
.2686	60		rts				rts
.2687					_CNLoopRound:
.2687	68		pla				pla
.2688	a8		tay				tay
.2689	a9 01		lda #$01			lda 	#1
.268b	20 16 21	jsr $2116			jsr 	RSLoadPosition				; go back to the loop top
.268e	60		rts				rts
.268f					_CNBadIndex:
.268f	a2 13		ldx #$13			ldx 	#ErrorID_BadIndex
.2691	20 6a 21	jsr $216a		jsr	errorHandler
.2694					_CNCheckDownto:
.2694	c9 00		cmp #$00			cmp 	#0
.2696	10 ef		bpl $2687			bpl 	_CNLoopRound
.2698	4c 7f 26	jmp $267f			jmp 	_CNLoopExit
.269b					_CNCompare:
.269b	b1 04		lda ($04),y			lda 	(temp0),y 					; do the subtraction - compare don't care about answer
.269d	f1 06		sbc ($06),y			sbc 	(temp1),y
.269f	05 08		ora $08				ora 	temp2 						; Or into temp2 (does not affect carry)
.26a1	85 08		sta $08				sta 	temp2
.26a3	c8		iny				iny
.26a4	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/if.asm

.1075					CommandIf:
.1075	20 43 1a	jsr $1a43			jsr 	EvaluateRootInteger 		; if what ?
.1078	b1 02		lda ($02),y			lda 	(codePtr),y 				; check for IF .. THEN or IF .. GOTO which are single lines.
.107a	c9 d4		cmp #$d4			cmp 	#TKW_GOTO
.107c	f0 04		beq $1082			beq 	_IfSimple
.107e	c9 a1		cmp #$a1			cmp 	#TKW_THEN
.1080	d0 1b		bne $109d			bne 	_IfComplex
.1082					_IfSimple:
.1082	20 63 20	jsr $2063			jsr 	MInt32Zero					; check if TOS zero
.1085	f0 10		beq $1097			beq 	_IfEOL 						; go to next line.
.1087	b1 02		lda ($02),y			lda 	(codePtr),y 				; get and skip token.
.1089	c8		iny				iny
.108a	c9 d4		cmp #$d4			cmp 	#TKW_GOTO 					; was it if GOTO ?
.108c	f0 0c		beq $109a			beq 	_IfGoto 					; do the Goto code
.108e	b1 02		lda ($02),y			lda 	(codePtr),y 				; what follows the THEN ?
.1090	29 c0		and #$c0			and 	#$C0 						; check $40-$7F
.1092	c9 40		cmp #$40			cmp 	#$40 						; e.g. number IF x = 0 THEN 170
.1094	f0 04		beq $109a			beq 	_IfGoto
.1096	60		rts				rts 								; else continue on this line.
.1097					_IfEOL:
.1097	4c ba 15	jmp $15ba			jmp 	AdvanceNextLine 			; go to next line
.109a					_IfGoto:
.109a	4c f9 15	jmp $15f9			jmp 	CommandGoto
.109d					_IfComplex:
.109d	20 63 20	jsr $2063			jsr 	MInt32Zero 					; is it true ?
.10a0	f0 01		beq $10a3			beq 	_IFSkip 					; if non-zero then skip to ELSE/ENDIF
.10a2	60		rts				rts 								; else continue.
.10a3					_IFSkip:
.10a3	a9 d1		lda #$d1			lda	 	#TKW_ELSE 					; test failed, go to ELSE or ENDIF whichever comes first.
.10a5	a2 a2		ldx #$a2			ldx 	#TKW_ENDIF
.10a7	4c 0e 27	jmp $270e			jmp		ScanForward
.10aa					Command_ELSE:
.10aa	a2 a2		ldx #$a2			ldx 	#TKW_ENDIF
.10ac	8a		txa				txa
.10ad	4c 0e 27	jmp $270e			jmp		ScanForward
.10b0					Command_ENDIF:
.10b0	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/let.asm

.10b1					CommandLet:
.10b1	a2 00		ldx #$00			ldx 	#0  						; get address to write.
.10b3	20 72 1a	jsr $1a72			jsr 	EvaluateReference
.10b6	a9 8d		lda #$8d			lda 	#TKW_EQUAL 					; check for equals
.10b8	20 a4 20	jsr $20a4			jsr 	CheckToken
.10bb	e8		inx				inx 								; do RHS
.10bc	20 26 1a	jsr $1a26			jsr 	Evaluate 					; evaluate and derefernce
.10bf	ca		dex				dex
.10c0	20 c4 10	jsr $10c4			jsr 	WriteValue 					; write it out
.10c3	60		rts				rts
.10c4					WriteValue:
.10c4	98		tya				tya
.10c5	48		pha				pha
.10c6	20 26 11	jsr $1126			jsr 	TOSToTemp0 					; set temp0 to point to target address.
.10c9	b5 40		lda $40,x			lda 	esType,x 					; check the string/integer flags match
.10cb	55 41		eor $41,x			eor 	esType+1,x
.10cd	29 40		and #$40			and 	#$40
.10cf	d0 50		bne $1121			bne		_WVType
.10d1	a0 01		ldy #$01			ldy 	#1 							; for string, copy 0 and 1.
.10d3	b5 40		lda $40,x			lda 	esType,x 					; check for string assignment
.10d5	29 40		and #$40			and 	#$40
.10d7	d0 1f		bne $10f8			bne 	_WVCopyString
.10d9	b5 40		lda $40,x			lda 	esType,x 					; check both are integer.
.10db	15 41		ora $41,x			ora 	esType+1,x
.10dd	4a		lsr a				lsr 	a
.10de	90 22		bcc $1102			bcc 	_WVCopyData4
.10e0	b5 40		lda $40,x			lda 	esType,x
.10e2	4a		lsr a				lsr 	a
.10e3	90 3c		bcc $1121			bcc 	_WVType
.10e5	e8		inx				inx 								; force the value being written to be a float.
.10e6	20 6b 16	jsr $166b			jsr 	BPMakeFloat
.10e9	ca		dex				dex
.10ea	20 26 11	jsr $1126			jsr 	TOSToTemp0 					; set Temp0 to write address
.10ed	e8		inx				inx
.10ee	8a		txa				txa
.10ef	a2 20		ldx #$20		ldx	#32
.10f1	20 bc 21	jsr $21bc		jsr	floatingpointHandler
.10f4	aa		tax				tax
.10f5	4c 1e 11	jmp $111e			jmp 	_WVCopyExit
.10f8					_WVCopyString:
.10f8	8a		txa				txa
.10f9	a2 0a		ldx #$0a		ldx	#10
.10fb	20 13 24	jsr $2413		jsr	stringHandler
.10fe	aa		tax				tax
.10ff	4c 1e 11	jmp $111e			jmp 	_WVCopyExit
.1102					_WVCopyData4:
.1102	b5 40		lda $40,x			lda 	esType,x 					; is the int ref a byte ref ?
.1104	29 20		and #$20			and 	#$20
.1106	d0 10		bne $1118			bne 	_WVCopyData1
.1108	a0 03		ldy #$03			ldy 	#3
.110a	b5 61		lda $61,x			lda 	esInt3+1,x
.110c	91 04		sta ($04),y			sta 	(temp0),y
.110e	88		dey				dey
.110f	b5 59		lda $59,x			lda 	esInt2+1,x
.1111	91 04		sta ($04),y			sta 	(temp0),y
.1113	88		dey				dey
.1114	b5 51		lda $51,x			lda 	esInt1+1,x
.1116	91 04		sta ($04),y			sta 	(temp0),y
.1118					_WVCopyData1:
.1118	a0 00		ldy #$00			ldy 	#0
.111a	b5 49		lda $49,x			lda 	esInt0+1,x
.111c	91 04		sta ($04),y			sta 	(temp0),y
.111e					_WVCopyExit:
.111e	68		pla				pla
.111f	a8		tay				tay
.1120	60		rts				rts
.1121					_WVType:
.1121	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.1123	20 6a 21	jsr $216a		jsr	errorHandler
.1126					TOSToTemp0:
.1126	b5 48		lda $48,x			lda 	esInt0,x
.1128	85 04		sta $04				sta 	temp0
.112a	b5 50		lda $50,x			lda 	esInt1,x
.112c	85 05		sta $05				sta 	temp0+1
.112e	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/local.asm

.0af0					storeSize:
>0af0							.fill 	1
.112f					CommandLocal:
.112f	20 40 11	jsr $1140			jsr 	LocaliseVariable 			; localise one.
.1132	b1 02		lda ($02),y			lda 	(codePtr),y 				; what follows ?
.1134	c8		iny				iny
.1135	c9 8d		cmp #$8d			cmp 	#TKW_EQUAL 					; local x = 2 ?
.1137	f0 06		beq $113f			beq 	_CLAssignment
.1139	c9 c6		cmp #$c6			cmp 	#TKW_COMMA 					; comma try again.
.113b	f0 f2		beq $112f			beq 	CommandLocal
.113d	88		dey				dey
.113e	60		rts				rts
.113f					_CLAssignment:
>113f	db						.byte 	$DB
.1140					LocaliseVariable:
.1140	b1 02		lda ($02),y			lda 	(codePtr),y 				; check it's a variable.
.1142	c9 40		cmp #$40			cmp 	#$40
.1144	b0 67		bcs $11ad			bcs 	_LVSyntax
.1146	8a		txa				txa 								; get the address of that variable.
.1147	a2 00		ldx #$00		ldx	#0
.1149	20 8f 25	jsr $258f		jsr	variableHandler
.114c	aa		tax				tax
.114d	8a		txa				txa
.114e	48		pha				pha
.114f	98		tya				tya
.1150	48		pha				pha
.1151	20 26 11	jsr $1126			jsr 	TOSToTemp0 					; the address of the variable is now in temp0.
.1154	b5 40		lda $40,x			lda 	esType,x 					; get the type
.1156	0a		asl a				asl 	a
.1157	10 16		bpl $116f			bpl 	_LVPushNumber
.1159	a0 00		ldy #$00			ldy 	#0 							; put address of data in temp1
.115b	b1 04		lda ($04),y			lda 	(temp0),y
.115d	c8		iny				iny
.115e	85 06		sta $06				sta 	temp1
.1160	b1 04		lda ($04),y			lda 	(temp0),y
.1162	85 07		sta $07				sta 	temp1+1
.1164	a0 00		ldy #$00			ldy 	#0 	 						; get length
.1166	b1 06		lda ($06),y			lda 	(temp1),y
.1168	aa		tax				tax 								; into X
.1169	e8		inx				inx 								; +1 for length.
.116a	a9 24		lda #$24			lda 	#markerString
.116c	4c 84 11	jmp $1184			jmp 	_LVWriteFrame
.116f					_LVPushNumber:
.116f	a5 04		lda $04				lda 	temp0 						; storage address and data source are the same
.1171	85 06		sta $06				sta 	temp1
.1173	a5 05		lda $05				lda 	temp0+1
.1175	85 07		sta $07				sta 	temp1+1
.1177	b5 40		lda $40,x			lda 	esType,x 					; put float flag into carry.
.1179	4a		lsr a				lsr 	a
.117a	a9 25		lda #$25			lda 	#markerInt 					; get marker and size.
.117c	a2 04		ldx #$04			ldx 	#VarISize
.117e	90 04		bcc $1184			bcc 	_LVIsInteger
.1180	a9 23		lda #$23			lda 	#markerFloat
.1182	a2 06		ldx #$06			ldx 	#VarFSize
.1184					_LVIsInteger:
.1184					_LVWriteFrame:
.1184	8e f0 0a	stx $0af0			stx 	storeSize 					; number of bytes to copy from (temp0)
.1187	e8		inx				inx 								; allocate 3 bytes, 2 for the address, 1 for the marker.
.1188	e8		inx				inx
.1189	e8		inx				inx
.118a	20 d7 20	jsr $20d7			jsr 	RSClaim 					; create the stack frame.
.118d	a5 04		lda $04				lda 	temp0 						; copy the target address to slots 1 & 2
.118f	a0 01		ldy #$01			ldy 	#1
.1191	91 78		sta ($78),y			sta 	(rsPointer),y
.1193	c8		iny				iny
.1194	a5 05		lda $05				lda 	temp0+1
.1196	91 78		sta ($78),y			sta 	(rsPointer),y
.1198	a0 00		ldy #$00			ldy 	#0
.119a					_LVCopyData:
.119a	b1 06		lda ($06),y			lda 	(temp1),y 					; get data from source, temp1
.119c	c8		iny				iny 								; write allowing for the header bit.
.119d	c8		iny				iny
.119e	c8		iny				iny
.119f	91 78		sta ($78),y			sta 	(rsPointer),y
.11a1	88		dey				dey
.11a2	88		dey				dey
.11a3	ce f0 0a	dec $0af0			dec 	storeSize 					; do it storesize times
.11a6	d0 f2		bne $119a			bne 	_LVCopyData
.11a8	68		pla				pla
.11a9	a8		tay				tay
.11aa	68		pla				pla
.11ab	aa		tax				tax
.11ac	60		rts				rts
.11ad					_LVSyntax:
.11ad	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.11af	20 6a 21	jsr $216a		jsr	errorHandler
.11b2					RestoreLocals:
.11b2	a2 00		ldx #$00			ldx 	#0
.11b4	a1 78		lda ($78,x)			lda 	(rsPointer,x)
.11b6	c9 40		cmp #$40			cmp	 	#64
.11b8	90 01		bcc $11bb			bcc 	_RLocal
.11ba	60		rts				rts
.11bb					_RLocal:
.11bb	8a		txa				txa
.11bc	48		pha				pha
.11bd	98		tya				tya
.11be	48		pha				pha
.11bf	a0 01		ldy #$01			ldy 	#1 							; copy target address to temp0
.11c1	b1 78		lda ($78),y			lda 	(rsPointer),y
.11c3	85 04		sta $04				sta 	temp0
.11c5	c8		iny				iny
.11c6	b1 78		lda ($78),y			lda 	(rsPointer),y
.11c8	85 05		sta $05				sta 	temp0+1
.11ca	a0 00		ldy #$00			ldy 	#0 							; get type back.
.11cc	b1 78		lda ($78),y			lda 	(rsPointer),y
.11ce	c9 24		cmp #$24			cmp 	#markerString 				; string is ... different :)
.11d0	f0 28		beq $11fa			beq 	_RString
.11d2	a2 04		ldx #$04			ldx		#VARISize 					; size integer
.11d4	c9 25		cmp #$25			cmp 	#markerInt
.11d6	f0 02		beq $11da			beq 	_RIsInteger
.11d8	a2 06		ldx #$06			ldx 	#VARFSize 					; size float
.11da					_RIsInteger:
.11da	8a		txa				txa
.11db	48		pha				pha
.11dc	a0 03		ldy #$03			ldy 	#3							; start size to copy back from pointer.
.11de					_RCopyBack:
.11de	b1 78		lda ($78),y			lda 	(rsPointer),y
.11e0	88		dey				dey
.11e1	88		dey				dey
.11e2	88		dey				dey
.11e3	91 04		sta ($04),y			sta 	(temp0),y
.11e5	c8		iny				iny
.11e6	c8		iny				iny
.11e7	c8		iny				iny
.11e8	c8		iny				iny
.11e9	ca		dex				dex
.11ea	d0 f2		bne $11de			bne 	_RCopyBack
.11ec	68		pla				pla 								; get size add 3
.11ed	18		clc				clc
.11ee	69 03		adc #$03			adc 	#3 							; (2 for address one for marker)
.11f0					_RRestoreAAndLoop:
.11f0	20 f9 20	jsr $20f9			jsr 	RSFree
.11f3	68		pla				pla
.11f4	a8		tay				tay
.11f5	68		pla				pla
.11f6	aa		tax				tax
.11f7	4c b2 11	jmp $11b2			jmp 	RestoreLocals 				; go see if there are any more locals.
.11fa					_RString:
.11fa	a2 00		ldx #$00			ldx 	#0
.11fc	a0 01		ldy #$01			ldy 	#1 							; set up for a string write.
.11fe	b1 78		lda ($78),y			lda 	(rsPointer),y
.1200	95 48		sta $48,x			sta 	esInt0,x
.1202	c8		iny				iny
.1203	b1 78		lda ($78),y			lda 	(rsPointer),y
.1205	95 50		sta $50,x			sta 	esInt1,x
.1207	18		clc				clc
.1208	a5 78		lda $78				lda 	rsPointer
.120a	69 03		adc #$03			adc 	#3
.120c	95 49		sta $49,x			sta 	esInt0+1,x
.120e	a5 79		lda $79				lda 	rsPointer+1
.1210	69 00		adc #$00			adc 	#0
.1212	95 51		sta $51,x			sta 	esInt1+1,x
.1214	8a		txa				txa
.1215	a2 0a		ldx #$0a		ldx	#10
.1217	20 13 24	jsr $2413		jsr	stringHandler
.121a	a0 03		ldy #$03			ldy 	#3 							; get string length
.121c	b1 78		lda ($78),y			lda 	(rsPointer),y
.121e	18		clc				clc
.121f	69 04		adc #$04			adc 	#4 							; add 4 (pointer, marker, length) to restore.
.1221	4c f0 11	jmp $11f0			jmp 	_RRestoreAAndLoop

;******  Return to file: main/main.asm


;******  Processing file: main/commands/new.asm

.1224					Command_New:
.1224	20 f7 13	jsr $13f7			jsr 	ResetCodeAddress 			; point to first line
.1227	a0 00		ldy #$00			ldy 	#0 							; and zap it.
.1229	98		tya				tya
.122a	91 02		sta ($02),y			sta 	(codePtr),y
.122c	20 28 10	jsr $1028			jsr 	CommandClear 				; clear everything down.
.122f	4c b7 15	jmp $15b7			jmp 	CommandEND 					; do END code, as there's nothing to run.

;******  Return to file: main/main.asm


;******  Processing file: main/commands/poke.asm

.1232					Command_Poke:
.1232	a9 01		lda #$01			lda 	#1
.1234	d0 06		bne $123c			bne 	PokeGeneral
.1236					Command_Doke:
.1236	a9 02		lda #$02			lda 	#2
.1238	d0 02		bne $123c			bne 	PokeGeneral
.123a					Command_Loke:
.123a	a9 03		lda #$03			lda 	#3
.123c					PokeGeneral:
.123c	48		pha				pha 								; save size
.123d	20 43 1a	jsr $1a43			jsr 	EvaluateRootInteger 		; target address
.1240	20 bc 20	jsr $20bc			jsr	 	CheckComma
.1243	e8		inx				inx
.1244	20 45 1a	jsr $1a45			jsr 	EvaluateInteger 			; what value to POKE ?
.1247	ca		dex				dex
.1248	20 26 11	jsr $1126			jsr 	TOSToTemp0 					; temp0 points to the target address
.124b	84 0c		sty $0c				sty 	tempShort 					; save Y
.124d	68		pla				pla 								; get copy type and dispatch
.124e	aa		tax				tax
.124f	ca		dex				dex
.1250	f0 14		beq $1266			beq 	_Poke1
.1252	ca		dex				dex
.1253	f0 0b		beq $1260			beq 	_Poke2
.1255	a0 03		ldy #$03			ldy 	#3
.1257	a5 61		lda $61				lda 	esInt3+1
.1259	91 04		sta ($04),y			sta 	(temp0),y
.125b	88		dey				dey
.125c	a5 59		lda $59				lda 	esInt2+1
.125e	91 04		sta ($04),y			sta 	(temp0),y
.1260					_Poke2:
.1260	a0 01		ldy #$01			ldy 	#1
.1262	a5 51		lda $51				lda 	esInt1+1
.1264	91 04		sta ($04),y			sta 	(temp0),y
.1266					_Poke1:
.1266	a0 00		ldy #$00			ldy 	#0
.1268	a5 49		lda $49				lda 	esInt0+1
.126a	91 04		sta ($04),y			sta 	(temp0),y
.126c	a4 0c		ldy $0c				ldy 	tempShort 					; restore Y and exit
.126e	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/print.asm

.0af1					lastPrintToken:
>0af1							.fill 	1
.126f					Command_Print:
.126f	a9 00		lda #$00			lda 	#0 							; clear LPT flag
.1271	8d f1 0a	sta $0af1			sta 	lastPrintToken
.1274	88		dey				dey
.1275					_PrintLoopSkip:
.1275	c8		iny				iny
.1276					_PrintLoop:
.1276	b1 02		lda ($02),y			lda 	(codePtr),y 				; what follows
.1278	c9 80		cmp #$80			cmp 	#TOK_EOL  					; done if end of line or colon
.127a	f0 5b		beq $12d7			beq 	_PrintExit
.127c	c9 c5		cmp #$c5			cmp 	#TKW_COLON
.127e	f0 57		beq $12d7			beq 	_PrintExit
.1280	8d f1 0a	sta $0af1			sta 	lastPrintToken 				; update LPT
.1283	c9 c7		cmp #$c7			cmp 	#TKW_SEMICOLON 				; ignore semicolon
.1285	f0 ee		beq $1275			beq 	_PrintLoopSkip
.1287	c9 c8		cmp #$c8			cmp 	#TKW_QUOTE 					; ' is new line
.1289	f0 3c		beq $12c7			beq	 	_PrintNewLine
.128b	c9 c6		cmp #$c6			cmp 	#TKW_COMMA 					; , is print tab
.128d	f0 40		beq $12cf			beq 	_PrintTab
.128f	20 24 1a	jsr $1a24			jsr 	EvaluateRoot 				; evaluate something at the root
.1292	a9 cd		lda #$cd			lda 	#(convertBuffer) & $FF
.1294	85 04		sta $04				sta 	temp0
.1296	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.1298	85 05		sta $05				sta 	1+(temp0)
.129a	a5 40		lda $40				lda 	esType 						; get type
.129c	f0 15		beq $12b3			beq		_PrintInteger
.129e	4a		lsr a				lsr 	a 							; check for floating point
.129f	b0 08		bcs $12a9			bcs 	_PrintFloat
.12a1					_PrintString:
.12a1	a2 00		ldx #$00			ldx 	#0 							; bottom string to temp0
.12a3	20 26 11	jsr $1126			jsr 	TOSToTemp0
.12a6	4c c1 12	jmp $12c1			jmp 	_PrintTemp0 				; print no leading space.
.12a9					_PrintFloat:
.12a9	a9 00		lda #$00			lda 	#0 							; stack level.
.12ab	a2 14		ldx #$14		ldx	#20
.12ad	20 bc 21	jsr $21bc		jsr	floatingpointHandler
.12b0	4c ba 12	jmp $12ba			jmp 	_PrintSpaceTemp0
.12b3					_PrintInteger:
.12b3	a9 8a		lda #$8a			lda 	#10+$80 					; base 10 signed
.12b5	a2 00		ldx #$00			ldx 	#0 							; bottom stack element
.12b7	20 92 1f	jsr $1f92			jsr 	MInt32ToString				; convert to text
.12ba					_PrintSpaceTemp0:
.12ba	a9 20		lda #$20			lda 	#32
.12bc	a2 04		ldx #$04		ldx	#4
.12be	20 5d 21	jsr $215d		jsr	deviceHandler
.12c1					_PrintTemp0:
.12c1	20 e8 12	jsr $12e8			jsr 	PrintString
.12c4	4c 76 12	jmp $1276			jmp 	_PrintLoop
.12c7					_PrintNewLine:
.12c7	a2 00		ldx #$00		ldx	#0
.12c9	20 5d 21	jsr $215d		jsr	deviceHandler
.12cc	4c 75 12	jmp $1275			jmp 	_PrintLoopSkip
.12cf					_PrintTab:
.12cf	a2 06		ldx #$06		ldx	#6
.12d1	20 5d 21	jsr $215d		jsr	deviceHandler
.12d4	4c 75 12	jmp $1275			jmp 	_PrintLoopSkip
.12d7					_PrintExit:
.12d7	ad f1 0a	lda $0af1			lda		lastPrintToken 				; check last token
.12da	c9 c7		cmp #$c7			cmp 	#TKW_SEMICOLON 				; if , or ; do not print NL
.12dc	f0 09		beq $12e7			beq 	_PrintExit2
.12de	c9 c6		cmp #$c6			cmp 	#TKW_COMMA
.12e0	f0 05		beq $12e7			beq 	_PrintExit2
.12e2	a2 00		ldx #$00		ldx	#0
.12e4	20 5d 21	jsr $215d		jsr	deviceHandler
.12e7					_PrintExit2:
.12e7	60		rts				rts
.12e8					PrintString:
.12e8	8a		txa				txa
.12e9	48		pha				pha
.12ea	98		tya				tya
.12eb	48		pha				pha
.12ec	a0 00		ldy #$00			ldy 	#0							; get length
.12ee	b1 04		lda ($04),y			lda 	(temp0),y
.12f0	aa		tax				tax 								; into X
.12f1	e0 00		cpx #$00	_PSLoop:cpx 	#0 							; finished ?
.12f3	f0 10		beq $1305			beq 	_PSExit
.12f5	ca		dex				dex
.12f6	8a		txa				txa
.12f7	48		pha				pha
.12f8	c8		iny				iny
.12f9	b1 04		lda ($04),y			lda 	(temp0),y
.12fb	a2 04		ldx #$04		ldx	#4
.12fd	20 5d 21	jsr $215d		jsr	deviceHandler
.1300	68		pla				pla
.1301	aa		tax				tax
.1302	4c f1 12	jmp $12f1			jmp 	_PSLoop
.1305					_PSExit:
.1305	68		pla				pla
.1306	a8		tay				tay
.1307	68		pla				pla
.1308	aa		tax				tax
.1309	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/proc.asm

.0af2					paramCount:
>0af2							.fill 	1
.130a					CallProc:
.130a	20 da 14	jsr $14da			jsr 	FindProcedure 				; find procedure, put in temp0. A contains name length.
.130d	48		pha				pha 								; save length on stack
.130e	85 0c		sta $0c				sta 	tempShort 					; save length in tempShort
.1310	a5 05		lda $05				lda 	temp0+1 					; save procedure target on stack.
.1312	48		pha				pha
.1313	a5 04		lda $04				lda 	temp0
.1315	48		pha				pha
.1316	98		tya				tya 								; calculate Y + length
.1317	18		clc				clc
.1318	65 0c		adc $0c				adc 	tempShort
.131a	a8		tay				tay
.131b	a2 00		ldx #$00			ldx 	#0 							; where the first parameter goes - 1
.131d					_CallProcEvalParams:
.131d	e8		inx				inx
.131e	b1 02		lda ($02),y			lda 	(codePtr),y 				; do we have ) ?
.1320	c9 c4		cmp #$c4			cmp 	#TKW_RPAREN
.1322	f0 0b		beq $132f			beq 	_CPDoneParams
.1324	20 26 1a	jsr $1a26			jsr 	Evaluate 					; evaluate a parameter
.1327	b1 02		lda ($02),y			lda 	(codePtr),Y 				; get what's next, preconsume
.1329	c8		iny				iny
.132a	c9 c6		cmp #$c6			cmp 	#TKW_COMMA 					; if comma, go get another parameter
.132c	f0 ef		beq $131d			beq 	_CallProcEvalParams
.132e	88		dey				dey 								; undo consumption.
.132f					_CPDoneParams:
.132f	20 af 20	jsr $20af			jsr 	CheckRightParen 			; check closing parenthesis.
.1332	8e f2 0a	stx $0af2			stx 	paramCount 					; store parameter count+1
.1335	a2 04		ldx #$04			ldx 	#4							; make space on stack
.1337	a9 50		lda #$50			lda 	#markerPROC
.1339	20 d7 20	jsr $20d7			jsr 	RSClaim
.133c	a9 01		lda #$01			lda 	#1 							; store return address.
.133e	20 03 21	jsr $2103			jsr 	RSSavePosition
.1341	68		pla				pla 								; get the new code Ptr
.1342	85 02		sta $02				sta 	codePtr
.1344	68		pla				pla
.1345	85 03		sta $03				sta 	codePtr+1
.1347	68		pla				pla 								; length of name + 4 is the param start.
.1348	18		clc				clc
.1349	69 04		adc #$04			adc 	#4
.134b	a8		tay				tay
.134c	a2 ff		ldx #$ff			ldx 	#$FF
.134e					_CPLoadParameters:
.134e	e8		inx				inx 								; point to where the address should be loaded.
.134f	ec f2 0a	cpx $0af2			cpx 	paramCount 					; too many parameters in definition ?
.1352	f0 1e		beq $1372			beq 	_CPParamError
.1354	b1 02		lda ($02),y			lda 	(codePtr),y					; what follows
.1356	c9 c4		cmp #$c4			cmp 	#TKW_RPAREN 				; is it the right bracket
.1358	f0 0e		beq $1368			beq 	_CPParamComplete 			; done all the parameters
.135a	20 40 11	jsr $1140			jsr 	LocaliseVariable 			; make following variable local, ref in tos,x
.135d	20 c4 10	jsr $10c4			jsr 	WriteValue 					; copy the evaluated parameter into there.
.1360	b1 02		lda ($02),y			lda 	(codePtr),y 				; followed by a comma ?
.1362	c8		iny				iny
.1363	c9 c6		cmp #$c6			cmp 	#TKW_COMMA
.1365	f0 e7		beq $134e			beq 	_CPLoadParameters
.1367	88		dey				dey 								; no, unconsume and check for )
.1368					_CPParamComplete:
.1368	20 af 20	jsr $20af			jsr 	CheckRightParen 			; check )
.136b	e8		inx				inx 								; check right number of parameters
.136c	ec f2 0a	cpx $0af2			cpx 	paramCount
.136f	d0 01		bne $1372			bne 	_CPParamError
.1371	60		rts				rts
.1372					_CPParamError:
.1372	a2 18		ldx #$18			ldx 	#ErrorID_Params
.1374	20 6a 21	jsr $216a		jsr	errorHandler
.1377					ReturnProc:
.1377	20 b2 11	jsr $11b2			jsr 	RestoreLocals 				; get the locals back.
.137a	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.137c	a1 78		lda ($78,x)			lda 	(rsPointer,x)
.137e	c9 50		cmp #$50			cmp 	#markerPROC 						; does it match
.1380	f0 05		beq $1387			beq 	_isok
.1382	a2 12		ldx #$12			ldx 	#ErrorID_endProcErr
.1384	20 6a 21	jsr $216a		jsr	errorHandler
.1387					_isok:
.1387	a9 01		lda #$01			lda 	#1
.1389	20 16 21	jsr $2116			jsr 	RSLoadPosition 				; reload the position from offset 1.
.138c	a9 04		lda #$04			lda 	#4 							; throw 4 bytes from stack.
.138e	20 f9 20	jsr $20f9			jsr 	RSFree
.1391	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/rem.asm

.1392					Command_Rem:
.1392					Command_Rem2:
.1392	b1 02		lda ($02),y			lda 	(codePtr),y 				; what follows
.1394	c9 85		cmp #$85			cmp 	#TOK_STR 					; if it is a string then skip it.
.1396	d0 06		bne $139e			bne 	_CRNotString
.1398	c8		iny				iny
.1399	98		tya				tya
.139a	38		sec				sec
.139b	71 02		adc ($02),y			adc 	(codePtr),y 				; get string size, add to Y, +1 for the length
.139d	a8		tay				tay
.139e					_CRNotString:
.139e	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/repeat.asm

.26a5					Command_Repeat:
.26a5	a2 04		ldx #$04			ldx 	#4 							; allocate 4 bytes on stack for REPEAT
.26a7	a9 52		lda #$52			lda 	#markerREPEAT 				; repeat marker allocate 4 bytes
.26a9	20 d7 20	jsr $20d7			jsr 	RSClaim
.26ac	a9 01		lda #$01			lda 	#1 							; save position at offset 1.
.26ae	20 03 21	jsr $2103			jsr 	RSSavePosition
.26b1	60		rts				rts
.26b2					Command_Until:
.26b2	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.26b4	a1 78		lda ($78,x)			lda 	(rsPointer,x)
.26b6	c9 52		cmp #$52			cmp 	#markerREPEAT 						; does it match
.26b8	f0 05		beq $26bf			beq 	_isok
.26ba	a2 0f		ldx #$0f			ldx 	#ErrorID_untilErr
.26bc	20 6a 21	jsr $216a		jsr	errorHandler
.26bf					_isok:
.26bf	20 43 1a	jsr $1a43			jsr 	EvaluateRootInteger 		; at the bottom.
.26c2	20 63 20	jsr $2063			jsr 	MInt32Zero					; check if TOS zero
.26c5	d0 06		bne $26cd			bne 	_CUExit
.26c7	a9 01		lda #$01			lda 	#1
.26c9	20 16 21	jsr $2116			jsr 	RSLoadPosition 				; reload the position from offset 1.
.26cc	60		rts				rts
.26cd					_CUExit:
.26cd	a9 04		lda #$04			lda 	#4 							; throw 4 bytes from stack.
.26cf	20 f9 20	jsr $20f9			jsr 	RSFree
.26d2	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/run.asm

.139f					Command_Run:
.139f	a2 ff		ldx #$ff			ldx 	#$FF
.13a1	9a		txs				txs
.13a2	20 28 10	jsr $1028			jsr 	CommandClear 				; clear everything.
.13a5	20 f7 13	jsr $13f7			jsr 	ResetCodeAddress 			; back to the start.
.13a8	a0 03		ldy #$03			ldy 	#3
.13aa					CRNextInstruction:
.13aa	64 7b		stz $7b				stz 	softMemAlloc+1
.13ac	b1 02		lda ($02),y			lda 	(codePtr),y 				; get next token.
.13ae	10 1c		bpl $13cc			bpl 	_CRNotToken
.13b0	c9 c4		cmp #$c4			cmp 	#TOK_TOKENS 				; if in the tokens then do that token.
.13b2	b0 0c		bcs $13c0			bcs 	_CRExecute
.13b4	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST 				; unary is ignored.
.13b6	b0 4c		bcs $1404			bcs 	Unimplemented
.13b8	c9 99		cmp #$99			cmp 	#TOK_STRUCTST 				; execute structures.
.13ba	b0 04		bcs $13c0			bcs 	_CRExecute
.13bc	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; if one of the system tokens $80-$85 do that
.13be	b0 16		bcs $13d6			bcs 	_CRCheckIndirect 			; if in that unused range check for ! or ?
.13c0					_CRExecute:
.13c0	c8		iny				iny 								; consume it.
.13c1	0a		asl a				asl 	a 							; double it, losing most significant bit.
.13c2	aa		tax				tax
.13c3	20 c9 13	jsr $13c9			jsr 	_CRRunRoutine 				; we want to do jsr (group0vectors,x)
.13c6	4c aa 13	jmp $13aa			jmp 	CRNextInstruction
.13c9					_CRRunRoutine:
.13c9	7c 0e 14	jmp ($140e,x)			jmp 	(Group0Vectors,x)
.13cc					_CRNotToken:
.13cc	c9 40		cmp #$40			cmp 	#$40 						; if 0-3F then it is a letter
.13ce	b0 34		bcs $1404			bcs 	Unimplemented
.13d0					_CRDefaultLet:
.13d0	20 b1 10	jsr $10b1			jsr 	CommandLet 					; do the default, LET
.13d3	4c aa 13	jmp $13aa			jmp 	CRNextInstruction
.13d6					_CRCheckIndirect:
.13d6	c9 97		cmp #$97			cmp 	#TKW_PLING 					; !<term> =
.13d8	f0 f6		beq $13d0			beq 	_CRDefaultLet
.13da	c9 98		cmp #$98			cmp 	#TKW_QMARK 					; ?<term> =
.13dc	f0 f2		beq $13d0			beq 	_CRDefaultLet
.13de	d0 24		bne $1404			bne 	Unimplemented
.13e0					CommandShift1:
.13e0	b1 02		lda ($02),y			lda 	(codePtr),y 				; get shifted value
.13e2	10 20		bpl $1404			bpl 	Unimplemented 				; we have an error as this should not happen.
.13e4	0a		asl a				asl 	a 							; double into X
.13e5	aa		tax				tax
.13e6	c8		iny				iny 								; advance over it.
.13e7	20 ed 13	jsr $13ed			jsr 	_RunIt 						; we have no jsr (aaaa,X)
.13ea	4c aa 13	jmp $13aa			jmp 	CRNextInstruction
.13ed					_RunIt:
.13ed	6c c6 14	jmp ($14c6)			jmp 	(Group1Vectors) 			; and do the code.
.13f0					CommandShift2:
.13f0	20 71 21	jsr $2171		jsr	extensionHandler
.13f3	4c aa 13	jmp $13aa			jmp 	CRNextInstruction
.13f6					CommandColon:
.13f6	60		rts				rts
.13f7					ResetCodeAddress:
.13f7	ad c8 0a	lda $0ac8			lda 	basePage 					; copy basePage to code Pointer
.13fa	85 02		sta $02				sta 	codePtr
.13fc	ad c9 0a	lda $0ac9			lda 	basePage+1
.13ff	85 03		sta $03				sta 	codePtr+1
.1401	a0 03		ldy #$03			ldy 	#3 							; offset after offset link and line#
.1403	60		rts				rts
.1404					Unimplemented:
.1404	a2 01		ldx #$01			ldx 	#ErrorID_Missing
.1406	20 6a 21	jsr $216a		jsr	errorHandler
.1409					TKErr01:
.1409					TKErr02:
.1409					TKErr03:
.1409					TKErr04:
.1409					TKErr05:
.1409					TKErr06:
.1409					TKErr07:
.1409					TKErr08:
.1409	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.140b	20 6a 21	jsr $216a		jsr	errorHandler

;******  Processing file: main/commands/../../generated/tokenvectors0.inc

.140e					Group0Vectors:
>140e	ba 15					.word	AdvanceNextLine          ; $80 [[eol]]
>1410	e0 13					.word	CommandShift1            ; $81 [[sh1]]
>1412	f0 13					.word	CommandShift2            ; $82 [[sh2]]
>1414	04 14					.word	Unimplemented            ; $83 [[sh3]]
>1416	04 14					.word	Unimplemented            ; $84 [[fpc]]
>1418	09 14					.word	TKErr08                  ; $85 [[str]]
>141a	0d 17					.word	AndHandler               ; $86 and
>141c	fa 16					.word	OrHandler                ; $87 or
>141e	e7 16					.word	XorHandler               ; $88 xor
>1420	2f 18					.word	CompareGreaterEq         ; $89 >=
>1422	39 18					.word	CompareLessEq            ; $8a <=
>1424	1b 18					.word	CompareGreater           ; $8b >
>1426	11 18					.word	CompareLess              ; $8c <
>1428	07 18					.word	CompareEquals            ; $8d =
>142a	25 18					.word	CompareNotEquals         ; $8e <>
>142c	78 16					.word	AddHandler               ; $8f +
>142e	9b 16					.word	SubHandler               ; $90 -
>1430	33 17					.word	ShrHandler               ; $91 >>
>1432	20 17					.word	ShlHandler               ; $92 <<
>1434	ae 16					.word	MulHandler               ; $93 *
>1436	c1 16					.word	DivHandler               ; $94 /
>1438	d4 16					.word	ModHandler               ; $95 mod
>143a	6c 17					.word	PowerHandler             ; $96 ^
>143c	46 17					.word	WordRefHandler           ; $97 !
>143e	59 17					.word	ByteRefHandler           ; $98 ?
>1440	a5 26					.word	Command_Repeat           ; $99 repeat
>1442	d3 26					.word	Command_While            ; $9a while
>1444	96 25					.word	Command_FOR              ; $9b for
>1446	75 10					.word	CommandIf                ; $9c if
>1448	09 14					.word	TKErr04                  ; $9d defproc
>144a	b2 26					.word	Command_Until            ; $9e until
>144c	f6 26					.word	Command_Wend             ; $9f wend
>144e	f7 25					.word	Command_NEXT             ; $a0 next
>1450	09 14					.word	TKErr06                  ; $a1 then
>1452	b0 10					.word	Command_ENDIF            ; $a2 endif
>1454	77 13					.word	ReturnProc               ; $a3 endproc
>1456	fc 19					.word	UnaryParenthesis         ; $a4 (
>1458	4e 1b					.word	UnaryLen                 ; $a5 len(
>145a	92 1b					.word	UnarySgn                 ; $a6 sgn(
>145c	7b 1b					.word	UnaryAbs                 ; $a7 abs(
>145e	eb 1b					.word	Unary_Random             ; $a8 random(
>1460	35 1c					.word	Unary_Page               ; $a9 page
>1462	38 20					.word	MInt32True               ; $aa true
>1464	3c 20					.word	MInt32False              ; $ab false
>1466	00 1c					.word	Unary_Min                ; $ac min(
>1468	04 1c					.word	Unary_Max                ; $ad max(
>146a	eb 1c					.word	UnarySys                 ; $ae sys(
>146c	ae 1c					.word	UnaryTimer               ; $af timer(
>146e	d1 1a					.word	EventFunction            ; $b0 event(
>1470	d7 1c					.word	UnaryGet                 ; $b1 get(
>1472	c7 1c					.word	UnaryInkey               ; $b2 inkey(
>1474	82 1c					.word	UnaryAlloc               ; $b3 alloc(
>1476	13 1d					.word	ExecChr                  ; $b4 chr$(
>1478	27 1d					.word	ExecLeft                 ; $b5 left$(
>147a	44 1d					.word	ExecMid                  ; $b6 mid$(
>147c	6c 1d					.word	ExecRight                ; $b7 right$(
>147e	49 18					.word	Event_Str                ; $b8 str$(
>1480	78 18					.word	UnaryVal                 ; $b9 val(
>1482	a9 1b					.word	UnaryPeek                ; $ba peek(
>1484	af 1b					.word	UnaryDeek                ; $bb deek(
>1486	b5 1b					.word	UnaryLeek                ; $bc leek(
>1488	6c 1b					.word	UnaryAsc                 ; $bd asc(
>148a	60 1c					.word	UnaryIntToFloat          ; $be int(
>148c	73 1c					.word	UnaryFloatToInt          ; $bf float(
>148e	7b 18					.word	UnaryIsVal               ; $c0 isval(
>1490	43 1c					.word	UnaryReference           ; $c1 @
>1492	59 1c					.word	UnaryComplement          ; $c2 ~
>1494	56 1c					.word	UnaryHexMarker           ; $c3 &
>1496	09 14					.word	TKErr01                  ; $c4 )
>1498	f6 13					.word	CommandColon             ; $c5 :
>149a	09 14					.word	TKErr02                  ; $c6 ,
>149c	09 14					.word	TKErr03                  ; $c7 ;
>149e	92 13					.word	Command_Rem2             ; $c8 '
>14a0	09 14					.word	TKErr07                  ; $c9 to
>14a2	09 14					.word	TKErr05                  ; $ca step
>14a4	0a 13					.word	CallProc                 ; $cb proc
>14a6	2f 11					.word	CommandLocal             ; $cc local
>14a8	04 14					.word	Unimplemented            ; $cd dim
>14aa	92 13					.word	Command_Rem              ; $ce rem
>14ac	b1 10					.word	CommandLet               ; $cf let
>14ae	04 14					.word	Unimplemented            ; $d0 input
>14b0	aa 10					.word	Command_ELSE             ; $d1 else
>14b2	2b 16					.word	Command_VDU              ; $d2 vdu
>14b4	6f 12					.word	Command_Print            ; $d3 print
>14b6	f9 15					.word	CommandGOTO              ; $d4 goto
>14b8	ce 15					.word	CommandGOSUB             ; $d5 gosub
>14ba	e1 15					.word	CommandRETURN            ; $d6 return
>14bc	04 14					.word	Unimplemented            ; $d7 data
>14be	1a 10					.word	Command_Assert           ; $d8 assert
>14c0	32 12					.word	Command_Poke             ; $d9 poke
>14c2	36 12					.word	Command_Doke             ; $da doke
>14c4	3a 12					.word	Command_Loke             ; $db loke

;******  Return to file: main/commands/run.asm


;******  Processing file: main/commands/../../generated/tokenvectors1.inc

.14c6					Group1Vectors:
>14c6	28 10					.word	CommandClear             ; $86 clear
>14c8	04 14					.word	Unimplemented            ; $87 load
>14ca	04 14					.word	Unimplemented            ; $88 save
>14cc	04 14					.word	Unimplemented            ; $89 list
>14ce	24 12					.word	Command_New              ; $8a new
>14d0	9f 13					.word	Command_Run              ; $8b run
>14d2	04 14					.word	Unimplemented            ; $8c read
>14d4	04 14					.word	Unimplemented            ; $8d restore
>14d6	b7 15					.word	CommandEnd               ; $8e end
>14d8	b2 15					.word	CommandStop              ; $8f stop

;******  Return to file: main/commands/run.asm


;******  Return to file: main/main.asm


;******  Processing file: main/commands/scanner.asm

.0af3					procList:
>0af3							.fill 	2		 					; terminated by name high.
.0af5					yInLine:
>0af5							.fill 	1
.14da					FindProcedure:
.14da	8c f5 0a	sty $0af5			sty 	yInLine
.14dd	20 98 15	jsr $1598			jsr 	CalculateProcedureHash		; calculate the hash of the procedure.
.14e0	85 06		sta $06				sta 	temp1
.14e2	ad f3 0a	lda $0af3			lda		procList 					; put procList address in temp2
.14e5	85 08		sta $08				sta 	temp2
.14e7	ad f4 0a	lda $0af4			lda 	procList+1
.14ea	85 09		sta $09				sta 	temp2+1
.14ec	a0 00		ldy #$00			ldy 	#0 							; position in this table.
.14ee					_FPLoop:
.14ee	b1 08		lda ($08),y			lda 	(temp2),y
.14f0	f0 4f		beq $1541			beq 	_FPError 					; if so, we don't know this procedure.
.14f2	85 05		sta $05				sta 	temp0+1 					; copy MSB/LSB to temp0 as we go.
.14f4	c8		iny				iny
.14f5	b1 08		lda ($08),y			lda 	(temp2),y
.14f7	85 04		sta $04				sta 	temp0
.14f9	c8		iny				iny
.14fa	b1 08		lda ($08),y			lda 	(temp2),y					; check the procedure hash.
.14fc	c5 06		cmp $06				cmp 	temp1
.14fe	d0 2b		bne $152b			bne 	_FPNext 					; hash is different, go to next.
.1500	38		sec				sec
.1501	ad f5 0a	lda $0af5			lda 	yInLine 					; position in line must be at least 4
.1504	e9 04		sbc #$04			sbc 	#4
.1506	18		clc				clc
.1507	65 02		adc $02				adc 	codePtr
.1509	85 0a		sta $0a				sta 	temp3
.150b	a5 03		lda $03				lda 	codePtr+1
.150d	69 00		adc #$00			adc 	#0
.150f	85 0b		sta $0b				sta 	temp3+1
.1511	98		tya				tya
.1512	48		pha				pha
.1513	a0 04		ldy #$04			ldy 	#4
.1515					_FPCName:
.1515	b1 0a		lda ($0a),y			lda 	(temp3),y 					; check the same
.1517	d1 04		cmp ($04),y			cmp 	(temp0),y
.1519	d0 0e		bne $1529			bne 	_FPpulYNext 				; if different go to next one.
.151b	c8		iny				iny
.151c	c9 3a		cmp #$3a			cmp 	#$3A
.151e	90 f5		bcc $1515			bcc 	_FPCName 					; compare the whole lot....
.1520	68		pla				pla 								; throw away the saved Y
.1521	98		tya				tya 								; length of name is Y-4
.1522	38		sec				sec
.1523	e9 04		sbc #$04			sbc 	#4
.1525	ac f5 0a	ldy $0af5			ldy 	yInLine  					; get the original Y back
.1528	60		rts				rts
.1529					_FPpulYNext:
.1529	68		pla				pla
.152a	a8		tay				tay
.152b					_FPNext:
.152b	c8		iny				iny 								; next procedure record.
.152c	10 c0		bpl $14ee			bpl 	_FPLoop 					; if done 128 already ... e.g. Y -ve
.152e	98		tya				tya 								; subtract 128 from Y
.152f	38		sec				sec
.1530	e9 80		sbc #$80			sbc 	#128
.1532	a8		tay				tay
.1533	18		clc				clc 								; add 128 to temp2, so we can have more than
.1534	a5 08		lda $08				lda 	temp2 						; 255/3 = 85 procedures
.1536	69 80		adc #$80			adc 	#128
.1538	85 08		sta $08				sta 	temp2
.153a	90 b2		bcc $14ee			bcc 	_FPLoop
.153c	e6 09		inc $09				inc 	temp2+1
.153e	4c ee 14	jmp $14ee			jmp 	_FPLoop
.1541					_FPError:
.1541	a2 17		ldx #$17			ldx 	#ErrorID_NoProc
.1543	20 6a 21	jsr $216a		jsr	errorHandler
.1546					ScanProc:
.1546	98		tya				tya
.1547	48		pha				pha
.1548	a5 0f		lda $0f				lda 	lowMemory 					; copy the start of the procList, at low memory
.154a	8d f3 0a	sta $0af3			sta 	procList
.154d	a5 10		lda $10				lda 	lowMemory+1
.154f	8d f4 0a	sta $0af4			sta 	procList+1
.1552	20 f7 13	jsr $13f7			jsr 	ResetCodeAddress 			; back to the start.
.1555					_ScanLoop:
.1555	a0 00		ldy #$00			ldy 	#0 							; check reached program end
.1557	b1 02		lda ($02),y			lda 	(codePtr),y
.1559	f0 2a		beq $1585			beq 	_ScanExit
.155b	a0 03		ldy #$03			ldy 	#3							; get first token
.155d	b1 02		lda ($02),y			lda 	(codePtr),y
.155f	c9 9d		cmp #$9d			cmp 	#TKW_DEFPROC				; skip next if not DEFPROC
.1561	d0 12		bne $1575			bne 	_ScanNext
.1563	a5 03		lda $03				lda 	codePtr+1 					; write high and low
.1565	20 8d 15	jsr $158d			jsr 	_ScanWrite
.1568	a5 02		lda $02				lda 	codePtr
.156a	20 8d 15	jsr $158d			jsr 	_ScanWrite
.156d	a0 04		ldy #$04			ldy 	#4 							; start of name part
.156f	20 98 15	jsr $1598			jsr 	CalculateProcedureHash 		; calculate procedure hash
.1572	20 8d 15	jsr $158d			jsr 	_ScanWrite
.1575					_ScanNext:
.1575	18		clc				clc
.1576	a0 00		ldy #$00			ldy 	#0
.1578	b1 02		lda ($02),y			lda 	(codePtr),y
.157a	65 02		adc $02				adc 	codePtr
.157c	85 02		sta $02				sta 	codePtr
.157e	90 d5		bcc $1555			bcc 	_ScanLoop
.1580	e6 03		inc $03				inc 	codePtr+1
.1582	4c 55 15	jmp $1555			jmp 	_ScanLoop
.1585					_ScanExit:
.1585	a9 00		lda #$00			lda 	#0 							; write ending zero.
.1587	20 8d 15	jsr $158d			jsr 	_ScanWrite
.158a	68		pla				pla
.158b	a8		tay				tay
.158c	60		rts				rts
.158d					_ScanWrite:
.158d	a0 00		ldy #$00			ldy 	#0
.158f	91 0f		sta ($0f),y			sta 	(lowMemory),y
.1591	e6 0f		inc $0f				inc 	lowMemory
.1593	d0 02		bne $1597			bne 	_SWNoCarry
.1595	e6 10		inc $10				inc 	lowMemory+1
.1597					_SWNoCarry:
.1597	60		rts				rts
.1598					CalculateProcedureHash:
.1598	a9 00		lda #$00			lda 	#0 							; clear hash.
.159a	85 04		sta $04				sta 	temp0
.159c					_CPHLoop:
.159c	18		clc				clc 								; add character and rotate and add carry back in
.159d	b1 02		lda ($02),y			lda 	(codePtr),y
.159f	65 04		adc $04				adc 	temp0
.15a1	6a		ror a				ror 	a
.15a2	69 0d		adc #$0d			adc 	#13 						; primes usually good for this sort of thing.
.15a4	85 04		sta $04				sta 	temp0 						; (down with this sort of thing)
.15a6	b1 02		lda ($02),y			lda 	(codePtr),y
.15a8	c8		iny				iny 								; advance incase we go round again.
.15a9	c9 3a		cmp #$3a			cmp 	#$3A
.15ab	90 ef		bcc $159c			bcc 	_CPHLoop
.15ad	a5 04		lda $04				lda 	temp0
.15af	a9 aa		lda #$aa			lda 	#$AA
.15b1	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/stopend.asm

.15b2					CommandStop:
.15b2	a2 06		ldx #$06			ldx 	#ErrorID_Stop
.15b4	20 6a 21	jsr $216a		jsr	errorHandler
.15b7					CommandEnd:
.15b7	4c ff ff	jmp $ffff			jmp 	$FFFF 						; fudge to crash out of emulator
.15ba					AdvanceNextLine:
.15ba	a0 00		ldy #$00			ldy 	#0 							; get offset
.15bc	b1 02		lda ($02),y			lda 	(codePtr),y
.15be	18		clc				clc 								; add to codePtr
.15bf	65 02		adc $02				adc 	codePtr
.15c1	85 02		sta $02				sta 	codePtr
.15c3	90 02		bcc $15c7			bcc 	_ANLNoCarry
.15c5	e6 03		inc $03				inc 	codePtr+1
.15c7					_ANLNoCarry:
.15c7	b1 02		lda ($02),y			lda 	(codePtr),y 				; if end of program (or was just stand alone.
.15c9	f0 ec		beq $15b7			beq 	CommandEnd 					; execute END
.15cb	a0 03		ldy #$03			ldy 	#3 							; start of tokens on line.
.15cd	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/transfer.asm

.15ce					CommandGOSUB:
.15ce	20 43 1a	jsr $1a43			jsr 	EvaluateRootInteger			; get GOSUB line on stack top.
.15d1	a2 04		ldx #$04			ldx 	#4 							; allocate 4 bytes on stack for GOSUB
.15d3	a9 47		lda #$47			lda 	#markerGOSUB  				; <marker> <return addr/offset>
.15d5	20 d7 20	jsr $20d7			jsr 	RSClaim
.15d8	a9 01		lda #$01			lda 	#1 							; save position at offset 1.
.15da	20 03 21	jsr $2103			jsr 	RSSavePosition
.15dd	a2 00		ldx #$00			ldx 	#0 							; point back at GOSUB line
.15df	f0 1b		beq $15fc			beq 	GotoTOS 					; and do a GOTO there.
.15e1					CommandRETURN:
.15e1	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.15e3	a1 78		lda ($78,x)			lda 	(rsPointer,x)
.15e5	c9 47		cmp #$47			cmp 	#markerGOSUB 						; does it match
.15e7	f0 05		beq $15ee			beq 	_isok
.15e9	a2 0e		ldx #$0e			ldx 	#ErrorID_returnErr
.15eb	20 6a 21	jsr $216a		jsr	errorHandler
.15ee					_isok:
.15ee	a9 01		lda #$01			lda 	#1
.15f0	20 16 21	jsr $2116			jsr 	RSLoadPosition 				; reload the position from offset 1.
.15f3	a9 04		lda #$04			lda 	#4 							; throw 4 bytes from stack.
.15f5	20 f9 20	jsr $20f9			jsr 	RSFree
.15f8	60		rts				rts
.15f9					CommandGOTO:
.15f9	20 43 1a	jsr $1a43			jsr 	EvaluateRootInteger 		; get GOTO line on stack top.
.15fc					GotoTOS:
.15fc	20 f7 13	jsr $13f7			jsr 	ResetCodeAddress 			; simple search.
.15ff					_GotoSearch:
.15ff	a0 00		ldy #$00			ldy 	#0 							; get offset
.1601	b1 02		lda ($02),y			lda 	(codePtr),y
.1603	f0 21		beq $1626			beq 	_GotoError 					; not found.
.1605	c8		iny				iny									; check LSB match
.1606	b1 02		lda ($02),y			lda 	(codePtr),y
.1608	d5 48		cmp $48,x			cmp 	esInt0,x
.160a	d0 07		bne $1613			bne 	_GotoNext
.160c	c8		iny				iny
.160d	b1 02		lda ($02),y			lda 	(codePtr),y
.160f	d5 50		cmp $50,x			cmp 	esInt1,x
.1611	f0 10		beq $1623			beq 	_GotoFound
.1613					_GotoNext:
.1613	a0 00		ldy #$00			ldy 	#0 							; go next line
.1615	b1 02		lda ($02),y			lda 	(codePtr),y
.1617	18		clc				clc
.1618	65 02		adc $02				adc 	codePtr
.161a	85 02		sta $02				sta 	codePtr
.161c	90 e1		bcc $15ff			bcc 	_GotoSearch
.161e	e6 03		inc $03				inc 	codePtr+1
.1620	4c ff 15	jmp $15ff			jmp 	_GotoSearch
.1623					_GotoFound:
.1623	a0 03		ldy #$03			ldy 	#3 							; continue from that line
.1625	60		rts				rts
.1626					_GotoError:
.1626	a2 0c		ldx #$0c			ldx 	#ErrorID_LineNumber
.1628	20 6a 21	jsr $216a		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/commands/vdu.asm

.162b					Command_VDU:
.162b	20 43 1a	jsr $1a43			jsr 	EvaluateRootInteger 			; get integer at root.
.162e	a5 48		lda $48				lda 	esInt0
.1630	a2 04		ldx #$04		ldx	#4
.1632	20 5d 21	jsr $215d		jsr	deviceHandler
.1635					_CVNext:
.1635	b1 02		lda ($02),y			lda 	(codePtr),y 					; what follows ?
.1637	c8		iny				iny
.1638	c9 c6		cmp #$c6			cmp 	#TKW_COMMA 						; comma, do again
.163a	f0 ef		beq $162b			beq 	Command_VDU
.163c	c9 c7		cmp #$c7			cmp 	#TKW_SEMICOLON 					; semicolon, print MSB
.163e	d0 0a		bne $164a			bne 	_CVExit
.1640	a5 50		lda $50				lda 	esInt1
.1642	a2 04		ldx #$04		ldx	#4
.1644	20 5d 21	jsr $215d		jsr	deviceHandler
.1647	4c 35 16	jmp $1635			jmp 	_CVNext
.164a	88		dey		_CVExit:dey
.164b	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/while.asm

.26d3					Command_While:
.26d3	a9 57		lda #$57			lda 	#markerWhile 				; gosub marker allocate 4 bytes.
.26d5	a2 04		ldx #$04			ldx 	#4
.26d7	20 d7 20	jsr $20d7			jsr 	RSClaim 					; create on stack.
.26da	88		dey				dey
.26db	a9 01		lda #$01			lda 	#1
.26dd	20 03 21	jsr $2103			jsr 	RSSavePosition 				; save position before the WHILE keyword.
.26e0	c8		iny				iny
.26e1	20 45 1a	jsr $1a45			jsr 	EvaluateInteger				; get the conditional
.26e4	20 63 20	jsr $2063			jsr 	MInt32Zero 	 				; if zero, skip forward.
.26e7	f0 01		beq $26ea			beq 	_CWFail
.26e9	60		rts				rts
.26ea					_CWFail:
.26ea	a9 04		lda #$04			lda 	#4
.26ec	20 f9 20	jsr $20f9			jsr 	RSFree 						; close the just opened position.
.26ef	a9 9f		lda #$9f			lda 	#TKW_WEND 					; scan forward past WEND.
.26f1	aa		tax				tax
.26f2	20 0e 27	jsr $270e			jsr 	ScanForward
.26f5	60		rts				rts
.26f6					Command_Wend:
.26f6	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.26f8	a1 78		lda ($78,x)			lda 	(rsPointer,x)
.26fa	c9 57		cmp #$57			cmp 	#markerWHILE 						; does it match
.26fc	f0 05		beq $2703			beq 	_isok
.26fe	a2 11		ldx #$11			ldx 	#ErrorID_wendErr
.2700	20 6a 21	jsr $216a		jsr	errorHandler
.2703					_isok:
.2703	a9 01		lda #$01			lda 	#1
.2705	20 16 21	jsr $2116			jsr 	RSLoadPosition				; go back until true
.2708	a9 04		lda #$04			lda 	#4
.270a	20 f9 20	jsr $20f9			jsr 	RSFree 						; close the loop
.270d	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/binary.asm

.164c					BinaryProcess:
.164c	b5 40		lda $40,x			lda 	esType,x 					; or type bytes together and check bit 6.
.164e	15 41		ora $41,x			ora 	esType+1,x
.1650	0a		asl a				asl 	a
.1651	30 0e		bmi $1661			bmi 	_BPStringType 				; if one is set, then string type.
.1653	18		clc				clc 								; return CC for integer
.1654	29 02		and #$02			and 	#$02 						; $02 because of ASL A.
.1656	f0 08		beq $1660			beq 	_BPExit 					; if both integer then return with CC.
.1658	20 66 16	jsr $1666			jsr 	BPMakeBothFloat 			; make both float
.165b	a9 01		lda #$01			lda 	#$01 						; set result type to float
.165d	95 40		sta $40,x			sta 	esType,x
.165f	38		sec				sec 								; and return with carry set.
.1660					_BPExit:
.1660	60		rts				rts
.1661					_BPStringType:
.1661	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.1663	20 6a 21	jsr $216a		jsr	errorHandler
.1666					BPMakeBothFloat:
.1666	e8		inx				inx
.1667	20 6b 16	jsr $166b			jsr 	BPMakeFloat 				; one is a float, so we do both as floats.
.166a	ca		dex				dex
.166b					BPMakeFloat:
.166b	b5 40		lda $40,x			lda 	esType,x 					; get type bit.
.166d	4a		lsr a				lsr 	a
.166e	b0 07		bcs $1677			bcs 	_BPIsFloat
.1670	8a		txa				txa
.1671	a2 1a		ldx #$1a		ldx	#26
.1673	20 bc 21	jsr $21bc		jsr	floatingpointHandler
.1676	aa		tax				tax
.1677					_BPIsFloat:
.1677	60		rts				rts
.1678					AddHandler:
.1678	20 c7 18	jsr $18c7			jsr 	DereferenceTwo 				; dereference top two on stack.
.167b	b5 40		lda $40,x			lda 	esType,x 					; check two strings.
.167d	35 41		and $41,x			and 	esType+1,x
.167f	29 40		and #$40			and 	#$40 						; if both have bit 6 set ...
.1681	d0 10		bne $1693			bne 	_AHStringConcat				; concatenate strings.
.1683	20 4c 16	jsr $164c			jsr 	BinaryProcess 				; check to see if either is float
.1686	b0 03		bcs $168b			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.1688	4c 27 1f	jmp $1f27			jmp 	MInt32Add 							; else do it as integer.
.168b					_IsFPOperation:
.168b	8a		txa				txa 								; call the relevant fp routine
.168c	a2 02		ldx #$02		ldx	#2
.168e	20 bc 21	jsr $21bc		jsr	floatingpointHandler
.1691	aa		tax				tax
.1692	60		rts				rts
.1693					_AHStringConcat:
.1693	8a		txa				txa
.1694	a2 04		ldx #$04		ldx	#4
.1696	20 13 24	jsr $2413		jsr	stringHandler
.1699	aa		tax				tax
.169a	60		rts				rts
.169b					SubHandler:
.169b	20 c7 18	jsr $18c7			jsr 	DereferenceTwo
.169e	20 4c 16	jsr $164c			jsr 	BinaryProcess 				; check to see if either is float
.16a1	b0 03		bcs $16a6			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.16a3	4c 41 1f	jmp $1f41			jmp 	MInt32Sub 							; else do it as integer.
.16a6					_IsFPOperation:
.16a6	8a		txa				txa 								; call the relevant fp routine
.16a7	a2 10		ldx #$10		ldx	#16
.16a9	20 bc 21	jsr $21bc		jsr	floatingpointHandler
.16ac	aa		tax				tax
.16ad	60		rts				rts
.16ae					MulHandler:
.16ae	20 c7 18	jsr $18c7			jsr 	DereferenceTwo
.16b1	20 4c 16	jsr $164c			jsr 	BinaryProcess 				; check to see if either is float
.16b4	b0 03		bcs $16b9			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.16b6	4c 5b 1f	jmp $1f5b			jmp 	MInt32Multiply 							; else do it as integer.
.16b9					_IsFPOperation:
.16b9	8a		txa				txa 								; call the relevant fp routine
.16ba	a2 0a		ldx #$0a		ldx	#10
.16bc	20 bc 21	jsr $21bc		jsr	floatingpointHandler
.16bf	aa		tax				tax
.16c0	60		rts				rts
.16c1					DivHandler:
.16c1	20 c7 18	jsr $18c7			jsr 	DereferenceTwo
.16c4	20 4c 16	jsr $164c			jsr 	BinaryProcess 				; check to see if either is float
.16c7	b0 03		bcs $16cc			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.16c9	4c 1f 1e	jmp $1e1f			jmp 	MInt32SDivide 							; else do it as integer.
.16cc					_IsFPOperation:
.16cc	8a		txa				txa 								; call the relevant fp routine
.16cd	a2 06		ldx #$06		ldx	#6
.16cf	20 bc 21	jsr $21bc		jsr	floatingpointHandler
.16d2	aa		tax				tax
.16d3	60		rts				rts
.16d4					ModHandler:
.16d4	20 c7 18	jsr $18c7			jsr 	DereferenceTwo
.16d7	20 4c 16	jsr $164c			jsr 	BinaryProcess 				; check to see if either is float
.16da	b0 03		bcs $16df			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.16dc	4c 9d 1e	jmp $1e9d			jmp 	MInt32Modulus 							; else do it as integer.
.16df					_IsFPOperation:
.16df	8a		txa				txa 								; call the relevant fp routine
.16e0	a2 08		ldx #$08		ldx	#8
.16e2	20 bc 21	jsr $21bc		jsr	floatingpointHandler
.16e5	aa		tax				tax
.16e6	60		rts				rts
.16e7					XorHandler:
.16e7	20 c7 18	jsr $18c7			jsr 	DereferenceTwo
.16ea	20 4c 16	jsr $164c			jsr 	BinaryProcess 				; check to see if either is float
.16ed	b0 03		bcs $16f2			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.16ef	4c d1 1d	jmp $1dd1			jmp 	MInt32Xor 							; else do it as integer.
.16f2					_IsFPOperation:
.16f2	8a		txa				txa 								; call the relevant fp routine
.16f3	a2 08		ldx #$08		ldx	#8
.16f5	20 bc 21	jsr $21bc		jsr	floatingpointHandler
.16f8	aa		tax				tax
.16f9	60		rts				rts
.16fa					OrHandler:
.16fa	20 c7 18	jsr $18c7			jsr 	DereferenceTwo
.16fd	20 4c 16	jsr $164c			jsr 	BinaryProcess 				; check to see if either is float
.1700	b0 03		bcs $1705			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.1702	4c b8 1d	jmp $1db8			jmp 	MInt32Or 							; else do it as integer.
.1705					_IsFPOperation:
.1705	8a		txa				txa 								; call the relevant fp routine
.1706	a2 08		ldx #$08		ldx	#8
.1708	20 bc 21	jsr $21bc		jsr	floatingpointHandler
.170b	aa		tax				tax
.170c	60		rts				rts
.170d					AndHandler:
.170d	20 c7 18	jsr $18c7			jsr 	DereferenceTwo
.1710	20 4c 16	jsr $164c			jsr 	BinaryProcess 				; check to see if either is float
.1713	b0 03		bcs $1718			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.1715	4c 9f 1d	jmp $1d9f			jmp 	MInt32And 							; else do it as integer.
.1718					_IsFPOperation:
.1718	8a		txa				txa 								; call the relevant fp routine
.1719	a2 08		ldx #$08		ldx	#8
.171b	20 bc 21	jsr $21bc		jsr	floatingpointHandler
.171e	aa		tax				tax
.171f	60		rts				rts
.1720					ShlHandler:
.1720	20 c7 18	jsr $18c7			jsr 	DereferenceTwo
.1723	20 4c 16	jsr $164c			jsr 	BinaryProcess 				; check to see if either is float
.1726	b0 03		bcs $172b			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.1728	4c a1 17	jmp $17a1			jmp 	Mint32ShiftLeftX 							; else do it as integer.
.172b					_IsFPOperation:
.172b	8a		txa				txa 								; call the relevant fp routine
.172c	a2 08		ldx #$08		ldx	#8
.172e	20 bc 21	jsr $21bc		jsr	floatingpointHandler
.1731	aa		tax				tax
.1732	60		rts				rts
.1733					ShrHandler:
.1733	20 c7 18	jsr $18c7			jsr 	DereferenceTwo
.1736	20 4c 16	jsr $164c			jsr 	BinaryProcess 				; check to see if either is float
.1739	b0 03		bcs $173e			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.173b	4c a4 17	jmp $17a4			jmp 	MInt32ShiftRightX 							; else do it as integer.
.173e					_IsFPOperation:
.173e	8a		txa				txa 								; call the relevant fp routine
.173f	a2 08		ldx #$08		ldx	#8
.1741	20 bc 21	jsr $21bc		jsr	floatingpointHandler
.1744	aa		tax				tax
.1745	60		rts				rts
.1746					WordRefHandler:
.1746	20 c7 18	jsr $18c7			jsr 	DereferenceTwo
.1749	20 4c 16	jsr $164c			jsr 	BinaryProcess 				; check to see if either is float
.174c	b0 03		bcs $1751			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.174e	4c 93 17	jmp $1793			jmp 	MInt32WordIndirect 							; else do it as integer.
.1751					_IsFPOperation:
.1751	8a		txa				txa 								; call the relevant fp routine
.1752	a2 08		ldx #$08		ldx	#8
.1754	20 bc 21	jsr $21bc		jsr	floatingpointHandler
.1757	aa		tax				tax
.1758	60		rts				rts
.1759					ByteRefHandler:
.1759	20 c7 18	jsr $18c7			jsr 	DereferenceTwo
.175c	20 4c 16	jsr $164c			jsr 	BinaryProcess 				; check to see if either is float
.175f	b0 03		bcs $1764			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.1761	4c 97 17	jmp $1797			jmp 	MInt32ByteIndirect 							; else do it as integer.
.1764					_IsFPOperation:
.1764	8a		txa				txa 								; call the relevant fp routine
.1765	a2 08		ldx #$08		ldx	#8
.1767	20 bc 21	jsr $21bc		jsr	floatingpointHandler
.176a	aa		tax				tax
.176b	60		rts				rts
.176c					PowerHandler:
.176c	20 c7 18	jsr $18c7			jsr 	DereferenceTwo
.176f	20 4c 16	jsr $164c			jsr 	BinaryProcess 				; check to see if either is float
.1772	b0 03		bcs $1777			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.1774	4c 7f 17	jmp $177f			jmp 	PowerInteger 							; else do it as integer.
.1777					_IsFPOperation:
.1777	8a		txa				txa 								; call the relevant fp routine
.1778	a2 16		ldx #$16		ldx	#22
.177a	20 bc 21	jsr $21bc		jsr	floatingpointHandler
.177d	aa		tax				tax
.177e	60		rts				rts
.177f					PowerInteger:
.177f	20 66 16	jsr $1666			jsr 	BPMakeBothFloat				; make them float.
.1782	8a		txa				txa
.1783	a2 16		ldx #$16		ldx	#22
.1785	20 bc 21	jsr $21bc		jsr	floatingpointHandler
.1788	a2 12		ldx #$12		ldx	#18
.178a	20 bc 21	jsr $21bc		jsr	floatingpointHandler
.178d	aa		tax				tax
.178e	a9 00		lda #$00			lda 	#0 							; make type integer
.1790	95 40		sta $40,x			sta 	esType,x
.1792	60		rts				rts
.1793					Mint32WordIndirect:
.1793	a9 80		lda #$80			lda 	#$80 				 		; word reference type
.1795	d0 02		bne $1799			bne 	Min32Indirect
.1797					Mint32ByteIndirect:
.1797	a9 a0		lda #$a0			lda 	#$A0 						; byte reference type
.1799					Min32Indirect:
.1799	48		pha				pha 								; save the indirection
.179a	20 27 1f	jsr $1f27			jsr 	MInt32Add 					; add a!b a?b
.179d	68		pla				pla 								; and set the type to reference.
.179e	95 40		sta $40,x			sta 	esType,x
.17a0	60		rts				rts
.17a1					Mint32ShiftLeftX:
.17a1	18		clc				clc
.17a2	90 01		bcc $17a5			bcc 	Mint32Shift
.17a4					Mint32ShiftRightX:
.17a4	38		sec				sec
.17a5					Mint32Shift:
.17a5	08		php				php 								; save carry flag on stack.
.17a6	b5 51		lda $51,x			lda 	esInt1+1,x 					; if shift >= 32 then it is zero.
.17a8	15 59		ora $59,x			ora 	esInt2+1,x
.17aa	15 61		ora $61,x			ora 	esInt3+1,x
.17ac	d0 1e		bne $17cc			bne 	_MShiftZero
.17ae	b5 49		lda $49,x			lda 	esInt0+1,x
.17b0	c9 20		cmp #$20			cmp 	#32
.17b2	b0 18		bcs $17cc			bcs 	_MShiftZero
.17b4					_MShiftLoop:
.17b4	b5 49		lda $49,x			lda 	esInt0+1,x 					; check count is zero
.17b6	f0 12		beq $17ca			beq 	_MShiftExit
.17b8	d6 49		dec $49,x			dec 	esInt0+1,x
.17ba	28		plp				plp 								; restore and save carry
.17bb	08		php				php
.17bc	90 06		bcc $17c4			bcc 	_MShiftLeft
.17be	20 5a 20	jsr $205a			jsr 	Mint32ShiftRight
.17c1	4c b4 17	jmp $17b4			jmp 	_MShiftLoop
.17c4					_MShiftLeft:
.17c4	20 51 20	jsr $2051			jsr 	Mint32ShiftLeft
.17c7	4c b4 17	jmp $17b4			jmp 	_MShiftLoop
.17ca					_MShiftExit:
.17ca	28		plp				plp	 								; throw saved carry and exit
.17cb	60		rts				rts
.17cc					_MShiftZero:
.17cc	4c 3c 20	jmp $203c			jmp 	MInt32False 				; return 0.

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/compare.asm

.17cf					PerformComparison:
.17cf	20 c7 18	jsr $18c7			jsr 	DereferenceTwo 				; make both values.
.17d2	b5 40		lda $40,x			lda 	esType,x 					; check for two strings.
.17d4	35 41		and $41,x			and 	esType+1,x
.17d6	0a		asl a				asl 	a
.17d7	30 1d		bmi $17f6			bmi 	_PCIsString
.17d9	b5 40		lda $40,x			lda 	esType,x 					; check either is floating point.
.17db	15 41		ora $41,x			ora 	esType+1,x
.17dd	0a		asl a				asl 	a 							; shift bit 6 (string) to bit 7
.17de	30 22		bmi $1802			bmi 	_PCError
.17e0	29 02		and #$02			and 	#$02 						; because of ASL, check type in bit 0
.17e2	f0 0f		beq $17f3			beq 	_PCIsInteger 				; if not two integers
.17e4	20 66 16	jsr $1666			jsr 	BPMakeBothFloat 			; make both float
.17e7	8a		txa				txa
.17e8	a2 04		ldx #$04		ldx	#4
.17ea	20 bc 21	jsr $21bc		jsr	floatingpointHandler
.17ed	86 0c		stx $0c				stx 	tempShort 					; save result
.17ef	aa		tax				tax
.17f0	a5 0c		lda $0c				lda 	tempShort
.17f2	60		rts				rts
.17f3					_PCIsInteger:
.17f3	4c ea 1d	jmp $1dea			jmp 	MInt32Compare
.17f6					_PCIsString:
.17f6	8a		txa				txa 								; A has SP
.17f7	a2 06		ldx #$06		ldx	#6
.17f9	20 13 24	jsr $2413		jsr	stringHandler
.17fc	86 0c		stx $0c				stx 	tempShort 					; save result
.17fe	aa		tax				tax 								; put SP back in X and get result.
.17ff	a5 0c		lda $0c				lda 	tempShort
.1801	60		rts				rts
.1802					_PCError:
.1802	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.1804	20 6a 21	jsr $216a		jsr	errorHandler
.1807					CompareEquals:
.1807	20 cf 17	jsr $17cf			jsr 	PerformComparison
.180a	c9 00		cmp #$00			cmp 	#$00
.180c	f0 35		beq $1843			beq  	CompareTrue
.180e	4c 46 18	jmp $1846			jmp 	CompareFalse
.1811					CompareLess:
.1811	20 cf 17	jsr $17cf			jsr 	PerformComparison
.1814	c9 ff		cmp #$ff			cmp 	#$FF
.1816	f0 2b		beq $1843			beq  	CompareTrue
.1818	4c 46 18	jmp $1846			jmp 	CompareFalse
.181b					CompareGreater:
.181b	20 cf 17	jsr $17cf			jsr 	PerformComparison
.181e	c9 01		cmp #$01			cmp 	#$01
.1820	f0 21		beq $1843			beq  	CompareTrue
.1822	4c 46 18	jmp $1846			jmp 	CompareFalse
.1825					CompareNotEquals:
.1825	20 cf 17	jsr $17cf			jsr 	PerformComparison
.1828	c9 00		cmp #$00			cmp 	#$00
.182a	d0 17		bne $1843			bne  	CompareTrue
.182c	4c 46 18	jmp $1846			jmp 	CompareFalse
.182f					CompareGreaterEq:
.182f	20 cf 17	jsr $17cf			jsr 	PerformComparison
.1832	c9 ff		cmp #$ff			cmp 	#$FF
.1834	d0 0d		bne $1843			bne  	CompareTrue
.1836	4c 46 18	jmp $1846			jmp 	CompareFalse
.1839					CompareLessEq:
.1839	20 cf 17	jsr $17cf			jsr 	PerformComparison
.183c	c9 01		cmp #$01			cmp 	#$01
.183e	d0 03		bne $1843			bne  	CompareTrue
.1840	4c 46 18	jmp $1846			jmp 	CompareFalse
.1843					CompareTrue:
.1843	4c 38 20	jmp $2038			jmp 	MInt32True
.1846					CompareFalse:
.1846	4c 3c 20	jmp $203c			jmp 	MInt32False

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/convert.asm

.1849					Event_Str:
.1849	20 2f 1a	jsr $1a2f			jsr 	EvaluateNumeric 			; get a number.
.184c	b5 40		lda $40,x			lda 	esType,x 					; is it floating point
.184e	d0 13		bne $1863			bne 	_ESFloat
.1850	20 a6 18	jsr $18a6			jsr 	ConvertGetBase
.1853	a9 cd		lda #$cd			lda 	#(convertBuffer) & $FF
.1855	85 04		sta $04				sta 	temp0
.1857	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.1859	85 05		sta $05				sta 	1+(temp0)
.185b	b5 49		lda $49,x			lda 	esInt0+1,x 					; get the base
.185d	20 92 1f	jsr $1f92			jsr 	MInt32ToString 				; convert to string.
.1860	4c 70 18	jmp $1870			jmp 	_ESCloneExit 				; clone and exit.
.1863					_ESFloat:
.1863	20 af 20	jsr $20af			jsr 	CheckRightParen 			; check closing )
.1866	20 26 11	jsr $1126			jsr 	TOSToTemp0 					; string address in temp0, goes here.
.1869	8a		txa				txa
.186a	a2 14		ldx #$14		ldx	#20
.186c	20 bc 21	jsr $21bc		jsr	floatingpointHandler
.186f	aa		tax				tax
.1870					_ESCloneExit:
.1870	8a		txa				txa
.1871	a2 02		ldx #$02		ldx	#2
.1873	20 13 24	jsr $2413		jsr	stringHandler
.1876	aa		tax				tax
.1877	60		rts				rts
.1878					UnaryVal:
.1878	38		sec				sec
.1879	b0 01		bcs $187c			bcs 	ValueMain
.187b					UnaryIsVal:
.187b	18		clc				clc
.187c					ValueMain:
.187c	08		php				php 								; save results (CS is value, CC is validation)
.187d	20 3a 1a	jsr $1a3a			jsr 	EvaluateString
.1880	20 a6 18	jsr $18a6			jsr 	ConvertGetBase 				; get base, if any.
.1883	98		tya				tya
.1884	48		pha				pha
.1885	20 26 11	jsr $1126			jsr 	TOSToTemp0 					; string address in temp0, goes here.
.1888	b5 49		lda $49,x			lda 	esInt0+1,x 					; get the base
.188a	29 7f		and #$7f			and 	#$7F 						; ignore the sign bit.
.188c	20 b1 1e	jsr $1eb1			jsr 	MInt32FromString 			; convert it back from a string.
.188f	b0 0c		bcs $189d			bcs 	_VMSuccess 					; successfully converted.
.1891	b5 49		lda $49,x			lda 	esInt0+1,x 					; is base the default
.1893	c9 8a		cmp #$8a			cmp 	#$80+10 					; if no, then it is integer only.
.1895	f0 00		beq $1897			beq 	_VMFailed 	 				; so we failed.
.1897					_VMFailed:
.1897	68		pla				pla
.1898	a8		tay				tay
.1899	28		plp				plp
.189a	4c 3c 20	jmp $203c			jmp 	MInt32False 				; return 0 whatever.
.189d					_VMSuccess:
.189d	68		pla				pla
.189e	a8		tay				tay
.189f	28		plp				plp 								; if CS the it was val() so we want the value.
.18a0	b0 03		bcs $18a5			bcs 	_VMExit
.18a2	4c 38 20	jmp $2038			jmp 	MInt32True 					; otherwise return true as successful.
.18a5					_VMExit:
.18a5	60		rts				rts
.18a6					ConvertGetBase:
.18a6	a9 8a		lda #$8a			lda 	#10+$80 					; default base 10 signed.
.18a8	95 49		sta $49,x			sta 	esInt0+1,x
.18aa	b1 02		lda ($02),y			lda 	(codePtr),y
.18ac	c9 c6		cmp #$c6			cmp 	#TKW_COMMA
.18ae	d0 0e		bne $18be			bne 	_CGBDone
.18b0	e8		inx				inx 								; next level
.18b1	c8		iny				iny 								; skip comma.
.18b2	20 4d 1a	jsr $1a4d			jsr 	EvaluateSmallInteger		; evaluate the base.
.18b5	ca		dex				dex
.18b6	c9 02		cmp #$02			cmp 	#2
.18b8	90 08		bcc $18c2			bcc 	_CGBValue
.18ba	c9 11		cmp #$11			cmp 	#17
.18bc	b0 04		bcs $18c2			bcs 	_CGBValue
.18be					_CGBDone:
.18be	20 af 20	jsr $20af			jsr 	CheckRightParen
.18c1	60		rts				rts
.18c2					_CGBValue:
.18c2	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.18c4	20 6a 21	jsr $216a		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/dereference.asm

.18c7					DereferenceTwo:
.18c7	e8		inx				inx
.18c8	20 cc 18	jsr $18cc			jsr 	DereferenceOne
.18cb	ca		dex				dex
.18cc					DereferenceOne:
.18cc	b5 40		lda $40,x			lda 	esType,x
.18ce	10 3d		bpl $190d			bpl 	_DRNotReference 			; is it a reference ?
.18d0	4a		lsr a				lsr 	a 							; do float dereference if bit 0 set.
.18d1	b0 3b		bcs $190e			bcs 	_DRFloatDeReference
.18d3	98		tya				tya
.18d4	48		pha				pha
.18d5	b5 48		lda $48,x			lda 	esInt0,x 					; copy address to temp0
.18d7	85 04		sta $04				sta 	temp0
.18d9	b5 50		lda $50,x			lda 	esInt1,x
.18db	85 05		sta $05				sta 	temp0+1
.18dd	a9 00		lda #$00			lda 	#0 							; clear esInt1..3
.18df	95 50		sta $50,x			sta 	esInt1,x
.18e1	95 58		sta $58,x			sta 	esInt2,x
.18e3	95 60		sta $60,x			sta 	esInt3,x
.18e5	b5 40		lda $40,x			lda 	esType,x 					; get the type byte.
.18e7	29 60		and #$60			and 	#$60 						; get string flag ($40) and byte flag ($20)
.18e9	0a		asl a				asl 	a 							; now string ($80) byte ($40)
.18ea	30 0d		bmi $18f9			bmi 	_DeRefString 				; string, 2 bytes only
.18ec	d0 11		bne $18ff			bne 	_DeRefByte 					; byte 1 byte only
.18ee					_DeRefLong:
.18ee	a0 03		ldy #$03			ldy 	#3
.18f0	b1 04		lda ($04),y			lda 	(temp0),y
.18f2	95 60		sta $60,x			sta 	esInt3,x
.18f4	88		dey				dey
.18f5	b1 04		lda ($04),y			lda 	(temp0),y
.18f7	95 58		sta $58,x			sta 	esInt2,x
.18f9					_DeRefString:
.18f9	a0 01		ldy #$01			ldy 	#1
.18fb	b1 04		lda ($04),y			lda 	(temp0),y
.18fd	95 50		sta $50,x			sta 	esInt1,x
.18ff					_DeRefByte:
.18ff	a0 00		ldy #$00			ldy 	#0
.1901	b1 04		lda ($04),y			lda 	(temp0),y
.1903	95 48		sta $48,x			sta 	esInt0,x
.1905	b5 40		lda $40,x			lda 	esType,x 					; clear byte and deref bits.
.1907	29 40		and #$40			and 	#$40
.1909	95 40		sta $40,x			sta 	esType,x
.190b	68		pla				pla
.190c	a8		tay				tay
.190d					_DRNotReference
.190d	60		rts				rts
.190e					_DRFloatDereference:
.190e	20 26 11	jsr $1126			jsr 	TOSToTemp0 					; address to deref in temp0
.1911	8a		txa				txa
.1912	a2 1c		ldx #$1c		ldx	#28
.1914	20 bc 21	jsr $21bc		jsr	floatingpointHandler
.1917	aa		tax				tax
.1918	a9 01		lda #$01			lda 	#$01 						; type to FP (float)
.191a	95 40		sta $40,x			sta 	esType,x
.191c	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/evaluate.asm

.191d					EvaluateLevel:
.191d	48		pha				pha 								; save precedence level.
.191e	a9 00		lda #$00			lda 	#0 							; zero the current stack level.
.1920	95 48		sta $48,x			sta 	esInt0,x
.1922	95 50		sta $50,x			sta 	esInt1,x
.1924	95 58		sta $58,x			sta 	esInt2,x
.1926	95 60		sta $60,x			sta 	esInt3,x
.1928	95 40		sta $40,x			sta 	esType,x 					; zero the type (integer value)
.192a	b1 02		lda ($02),y			lda 	(codePtr),y	 				; look at first token/character
.192c	30 21		bmi $194f			bmi 	_ELIsToken 					; if -ve could be string, float, or unary function.
.192e	0a		asl a				asl 	a 							; if 00-3F then will now be PL and it's a variable.
.192f	30 0a		bmi $193b			bmi 	_ELIsConstant 				; 40-7F will be -ve and that's an integer constant.
.1931	8a		txa				txa 								; stack level in X
.1932	a2 00		ldx #$00		ldx	#0
.1934	20 8f 25	jsr $258f		jsr	variableHandler
.1937	aa		tax				tax
.1938	4c 78 19	jmp $1978			jmp		_ELHasTerm
.193b					_ELIsConstant:
.193b	4a		lsr a				lsr 	a 							; get the value back
.193c	29 3f		and #$3f			and 	#$3F 						; force into range 0-63
.193e	95 48		sta $48,x			sta 	esInt0,x 					; and put in LSB.
.1940					_ELCheckNext:
.1940	c8		iny				iny 								; look at next
.1941	b1 02		lda ($02),y			lda 	(codePtr),y
.1943	49 40		eor #$40			eor 	#$40 						; shift around so 40-7F => 00-3F
.1945	c9 40		cmp #$40			cmp 	#$40 						; out of range ?
.1947	b0 2f		bcs $1978			bcs 	_ELHasTerm 					; done getting the constant.
.1949	20 85 1a	jsr $1a85			jsr 	ELShiftByteIn 				; shift byte into position.
.194c	4c 40 19	jmp $1940			jmp 	_ELCheckNext
.194f					_ELIsToken:
.194f	c9 85		cmp #$85			cmp 	#TOK_STR 					; handle strings.
.1951	f0 0f		beq $1962			beq 	_ELIsString
.1953	c9 84		cmp #$84			cmp 	#TOK_FPC 					; if no, then check unary.
.1955	d0 5f		bne $19b6			bne 	_ELCheckUnary
.1957	8a		txa				txa 								; put X into A
.1958	c8		iny				iny 								; skip over the float marker
.1959	a2 18		ldx #$18		ldx	#24
.195b	20 bc 21	jsr $21bc		jsr	floatingpointHandler
.195e	aa		tax				tax 								; restore X
.195f	4c 78 19	jmp $1978			jmp 	_ELHasTerm
.1962					_ELIsString:
.1962	98		tya				tya 								; address of string is codePtr+y+1
.1963	38		sec				sec
.1964	65 02		adc $02				adc 	codePtr
.1966	95 48		sta $48,x			sta 	esInt0,x
.1968	a5 03		lda $03				lda 	codePtr+1
.196a	69 00		adc #$00			adc 	#0
.196c	95 50		sta $50,x			sta 	esInt1,x
.196e	a9 40		lda #$40			lda 	#$40 						; set type to string value
.1970	95 40		sta $40,x			sta 	esType,x
.1972	c8		iny				iny 								; skip over string.
.1973	98		tya				tya
.1974	38		sec				sec									; +1 for the length itself.
.1975	71 02		adc ($02),y			adc 	(codePtr),y
.1977	a8		tay				tay 								; and fall through to term loop code.
.1978					_ELHasTerm:
.1978	b1 02		lda ($02),y			lda 	(codePtr),y
.197a	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; check in the correct range for binary tokens.
.197c	90 04		bcc $1982			bcc 	_ELPopExit
.197e	c9 99		cmp #$99			cmp 	#TOK_STRUCTST
.1980	90 02		bcc $1984			bcc 	_ELHasBinaryTerm
.1982					_ELPopExit:
.1982	68		pla				pla
.1983					_ELExit:
.1983	60		rts				rts
.1984					_ELHasBinaryTerm:
.1984	84 0c		sty $0c				sty 	tempShort 					; save position
.1986	a8		tay				tay 								; use token as an index and get the precedence.
.1987	b9 2d 1a	lda $1a2d,y			lda 	ELBinaryOperatorInfo-TOK_BINARYST,y
.198a	a4 0c		ldy $0c				ldy 	tempShort 					; restore Y
.198c	85 0c		sta $0c				sta 	tempShort 					; save precedence in memory.
.198e	68		pla				pla 								; restore current level.
.198f	c5 0c		cmp $0c				cmp 	tempShort 					; if current >= operator then exit
.1991	b0 f0		bcs $1983			bcs 	_ELExit
.1993	48		pha				pha 								; save current level back on the stack.
.1994	b1 02		lda ($02),y			lda 	(codePtr),y 				; save the binary operator on the stack and skip it.
.1996	48		pha				pha
.1997	c8		iny				iny
.1998	e8		inx				inx 								; calculate the RHS at the operator precedence.
.1999	a5 0c		lda $0c				lda 	tempShort
.199b	20 1d 19	jsr $191d			jsr 	EvaluateLevel
.199e	ca		dex				dex
.199f	68		pla				pla 								; get the operator back out.
.19a0					_ELExecuteA:
.19a0	86 0c		stx $0c				stx 	tempShort 					; upload the vectors. Would be nice to use jmp (aaaa,x)
.19a2	0a		asl a				asl 	a 							; but not practical. May use push/rts later.
.19a3	aa		tax				tax
.19a4	bd 0e 14	lda $140e,x			lda 	Group0Vectors,x
.19a7	85 04		sta $04				sta 	temp0
.19a9	bd 0f 14	lda $140f,x			lda 	Group0Vectors+1,x
.19ac	85 05		sta $05				sta 	temp0+1
.19ae	a6 0c		ldx $0c				ldx 	tempShort
.19b0	20 f9 19	jsr $19f9			jsr 	_ELCallTemp0
.19b3	4c 78 19	jmp $1978			jmp 	_ELHasTerm 					; and loop back round.
.19b6					_ELCheckUnary:
.19b6	c8		iny				iny 								; skip over token.
.19b7	c9 90		cmp #$90			cmp 	#TKW_MINUS 					; is it - term
.19b9	f0 15		beq $19d0			beq 	_ELMinus
.19bb	c9 97		cmp #$97			cmp 	#TKW_PLING 					; is it ! or ? term
.19bd	f0 28		beq $19e7			beq 	_ELIndirect
.19bf	c9 98		cmp #$98			cmp 	#TKW_QMARK
.19c1	f0 24		beq $19e7			beq 	_ELIndirect
.19c3	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST 				; must be TOK_UNARYST ... TOK_TOKENS
.19c5	90 04		bcc $19cb			bcc 	_ELUSyntax
.19c7	c9 c4		cmp #$c4			cmp 	#TOK_TOKENS
.19c9	90 d5		bcc $19a0			bcc 	_ELExecuteA 				; if so do that token.
.19cb					_ELUSyntax:
.19cb	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.19cd	20 6a 21	jsr $216a		jsr	errorHandler
.19d0					_ELMinus:
.19d0	20 0e 1a	jsr $1a0e			jsr 	EvaluateNumericTerm 		; get a number to negate.
.19d3	b5 40		lda $40,x			lda 	esType,x 					; is it integer
.19d5	f0 0a		beq $19e1			beq 	_ELMinusInteger
.19d7	8a		txa				txa
.19d8	a2 0c		ldx #$0c		ldx	#12
.19da	20 bc 21	jsr $21bc		jsr	floatingpointHandler
.19dd	aa		tax				tax
.19de	4c 78 19	jmp $1978			jmp 	_ELHasTerm
.19e1					_ELMinusInteger:
.19e1	20 f6 1f	jsr $1ff6			jsr 	MInt32Negate 				; do int negate
.19e4	4c 78 19	jmp $1978			jmp 	_ELHasTerm
.19e7					_ELIndirect:
.19e7	48		pha				pha 								; save what we want (TKW_QMARK TWK_PLING)
.19e8	20 17 1a	jsr $1a17			jsr 	EvaluateIntegerTerm 		; integer address
.19eb	68		pla				pla
.19ec	49 97		eor #$97			eor 	#TKW_PLING 					; now $00 if !
.19ee	f0 02		beq $19f2			beq 	_ELHaveModifier
.19f0	a9 20		lda #$20			lda 	#$20 						; now $00 if !, $20 if ?
.19f2					_ELHaveModifier:
.19f2	09 80		ora #$80			ora 	#$80						; make it the appropriate reference.
.19f4	95 40		sta $40,x			sta 	esType,x
.19f6	4c 78 19	jmp $1978			jmp 	_ELHasTerm
.19f9					_ELCallTemp0:
.19f9	6c 04 00	jmp ($0004)			jmp 	(temp0)
.19fc					UnaryParenthesis:
.19fc	a9 00		lda #$00			lda 	#0 							; ( is a unary function ....
.19fe	20 1d 19	jsr $191d			jsr 	EvaluateLevel
.1a01	20 af 20	jsr $20af			jsr 	CheckRightParen 			; check for )
.1a04	60		rts				rts
.1a05					EvaluateTerm:
.1a05	a9 0f		lda #$0f			lda 	#15
.1a07	20 1d 19	jsr $191d			jsr 	EvaluateLevel
.1a0a	20 cc 18	jsr $18cc			jsr 	DereferenceOne
.1a0d	60		rts				rts
.1a0e					EvaluateNumericTerm:
.1a0e	20 05 1a	jsr $1a05			jsr 	EvaluateTerm
.1a11	b5 40		lda $40,x			lda 	esType,x
.1a13	0a		asl a				asl 	a 							; see if it's a string.
.1a14	30 09		bmi $1a1f			bmi 	ENTType
.1a16	60		rts				rts
.1a17					EvaluateIntegerTerm:
.1a17	20 05 1a	jsr $1a05			jsr 	EvaluateTerm
.1a1a	b5 40		lda $40,x			lda 	esType,x
.1a1c	d0 01		bne $1a1f			bne 	ENTType
.1a1e	60		rts				rts
.1a1f					ENTType:
.1a1f	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.1a21	20 6a 21	jsr $216a		jsr	errorHandler
.1a24					EvaluateRoot:
.1a24	a2 00		ldx #$00			ldx 	#0
.1a26					Evaluate:
.1a26	a9 00		lda #$00			lda 	#0
.1a28	20 1d 19	jsr $191d			jsr 	EvaluateLevel
.1a2b	20 cc 18	jsr $18cc			jsr 	DereferenceOne
.1a2e	60		rts				rts
.1a2f					EvaluateNumeric:
.1a2f	20 26 1a	jsr $1a26			jsr 	Evaluate
.1a32	b5 40		lda $40,x			lda 	esType,x
.1a34	0a		asl a				asl 	a 							; see if it's a string.
.1a35	30 e8		bmi $1a1f			bmi 	ENTType
.1a37	4a		lsr a				lsr 	a 							; shift float flag into carry.
.1a38	4a		lsr a				lsr 	a
.1a39	60		rts				rts
.1a3a					EvaluateString:
.1a3a	20 26 1a	jsr $1a26			jsr 	Evaluate
.1a3d	b5 40		lda $40,x			lda 	esType,x
.1a3f	0a		asl a				asl 	a 							; see if it's a string.
.1a40	10 dd		bpl $1a1f			bpl 	ENTType
.1a42	60		rts				rts
.1a43					EvaluateRootInteger:
.1a43	a2 00		ldx #$00			ldx 	#0
.1a45					EvaluateInteger:
.1a45	20 26 1a	jsr $1a26			jsr 	Evaluate
.1a48	b5 40		lda $40,x			lda 	esType,x
.1a4a	d0 d3		bne $1a1f			bne 	ENTType
.1a4c	60		rts				rts
.1a4d					EvaluateSmallInteger:
.1a4d	20 45 1a	jsr $1a45			jsr 	EvaluateInteger
.1a50	b5 50		lda $50,x			lda 	esInt1,x
.1a52	15 58		ora $58,x			ora 	esInt2,x
.1a54	15 60		ora $60,x			ora 	esInt3,x
.1a56	d0 03		bne $1a5b			bne 	_ESIValue
.1a58	b5 48		lda $48,x			lda 	esInt0,x
.1a5a	60		rts				rts
.1a5b					_ESIValue:
.1a5b	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.1a5d	20 6a 21	jsr $216a		jsr	errorHandler
.1a60					LinkEvaluate:
.1a60	aa		tax				tax
.1a61	20 26 1a	jsr $1a26			jsr 	Evaluate
.1a64	8a		txa				txa
.1a65	60		rts				rts
.1a66					LinkEvaluateInteger:
.1a66	aa		tax				tax
.1a67	20 45 1a	jsr $1a45			jsr 	EvaluateInteger
.1a6a	8a		txa				txa
.1a6b	60		rts				rts
.1a6c					LinkEvaluateSmallInt:
.1a6c	aa		tax				tax
.1a6d	20 4d 1a	jsr $1a4d			jsr 	EvaluateSmallInteger
.1a70	8a		txa				txa
.1a71	60		rts				rts
.1a72					EvaluateReference:
.1a72	ad c4 1a	lda $1ac4			lda 	ELBinaryOperatorInfo+TKW_PLING-TOK_BINARYST
.1a75	38		sec				sec 								; sub 1 to allow a!x b?x to work.
.1a76	e9 01		sbc #$01			sbc 	#1
.1a78	20 1d 19	jsr $191d			jsr 	EvaluateLevel
.1a7b	b5 40		lda $40,x			lda 	esType,x
.1a7d	10 01		bpl $1a80			bpl 	_ERFail
.1a7f	60		rts				rts
.1a80					_ERFail:
.1a80	a2 0b		ldx #$0b			ldx 	#ErrorID_NoReference
.1a82	20 6a 21	jsr $216a		jsr	errorHandler
.1a85					ELShiftByteIn:
.1a85	48		pha				pha 								; save bits to shift in.
.1a86	b5 60		lda $60,x			lda 	esInt3,x 					; save top most byte
.1a88	48		pha				pha
.1a89	b5 58		lda $58,x			lda 	esInt2,x 					; shift everything left 8 bits
.1a8b	95 60		sta $60,x			sta 	esInt3,x
.1a8d	b5 50		lda $50,x			lda 	esInt1,x
.1a8f	95 58		sta $58,x			sta 	esInt2,x
.1a91	b5 48		lda $48,x			lda 	esInt0,x
.1a93	95 50		sta $50,x			sta 	esInt1,x
.1a95	a9 00		lda #$00			lda 	#0
.1a97	95 48		sta $48,x			sta 	esInt0,x
.1a99	68		pla				pla 								; now A:TOS is a 5 byte register, shift right twice.
.1a9a	29 03		and #$03			and 	#3 							; only want lower 2 bits
.1a9c	09 04		ora #$04			ora 	#4  						; set bit 2 - when 1 we are done
.1a9e					_ELShiftLoop:
.1a9e	4a		lsr a				lsr 	a
.1a9f	76 60		ror $60,x			ror 	esInt3,x
.1aa1	76 58		ror $58,x			ror 	esInt2,x
.1aa3	76 50		ror $50,x			ror 	esInt1,x
.1aa5	76 48		ror $48,x			ror 	esInt0,x
.1aa7	c9 01		cmp #$01			cmp 	#1
.1aa9	d0 f3		bne $1a9e			bne 	_ELShiftLoop
.1aab	68		pla				pla 								; get original 6 bit value and OR in.
.1aac	29 3f		and #$3f			and 	#$3F
.1aae	15 48		ora $48,x			ora 	esInt0,x
.1ab0	95 48		sta $48,x			sta 	esInt0,x
.1ab2	60		rts				rts
.1ab3					ELBinaryOperatorInfo:

;******  Processing file: main/evaluate/../../generated/binarystructinfo.inc

>1ab3	01					.byte	$01			; $86 and
>1ab4	01					.byte	$01			; $87 or
>1ab5	01					.byte	$01			; $88 xor
>1ab6	02					.byte	$02			; $89 >=
>1ab7	02					.byte	$02			; $8a <=
>1ab8	02					.byte	$02			; $8b >
>1ab9	02					.byte	$02			; $8c <
>1aba	02					.byte	$02			; $8d =
>1abb	02					.byte	$02			; $8e <>
>1abc	03					.byte	$03			; $8f +
>1abd	03					.byte	$03			; $90 -
>1abe	04					.byte	$04			; $91 >>
>1abf	04					.byte	$04			; $92 <<
>1ac0	04					.byte	$04			; $93 *
>1ac1	04					.byte	$04			; $94 /
>1ac2	04					.byte	$04			; $95 mod
>1ac3	05					.byte	$05			; $96 ^
>1ac4	06					.byte	$06			; $97 !
>1ac5	06					.byte	$06			; $98 ?
>1ac6	82					.byte	$82			; $99 repeat
>1ac7	82					.byte	$82			; $9a while
>1ac8	82					.byte	$82			; $9b for
>1ac9	82					.byte	$82			; $9c if
>1aca	82					.byte	$82			; $9d defproc
>1acb	80					.byte	$80			; $9e until
>1acc	80					.byte	$80			; $9f wend
>1acd	80					.byte	$80			; $a0 next
>1ace	80					.byte	$80			; $a1 then
>1acf	80					.byte	$80			; $a2 endif
>1ad0	80					.byte	$80			; $a3 endproc

;******  Return to file: main/evaluate/evaluate.asm


;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/event.asm

.1ad1					EventFunction:
.1ad1	20 72 1a	jsr $1a72			jsr 	EvaluateReference			; get the variable reference.
.1ad4	b5 40		lda $40,x			lda 	esType,x
.1ad6	c9 80		cmp #$80			cmp 	#$80 						; must be int ref
.1ad8	d0 55		bne $1b2f			bne 	_EFType
.1ada	20 bc 20	jsr $20bc			jsr 	CheckComma
.1add	e8		inx				inx
.1ade	20 45 1a	jsr $1a45			jsr 	EvaluateInteger		 		; get the elapsed time between firing.
.1ae1	20 af 20	jsr $20af			jsr 	CheckRightParen 			; finish off with the
.1ae4	ca		dex				dex
.1ae5	b5 50		lda $50,x			lda 	esInt1,x 					; check max of 32767
.1ae7	29 80		and #$80			and 	#$80
.1ae9	15 58		ora $58,x			ora 	esInt2,x
.1aeb	15 60		ora $60,x			ora 	esInt3,x
.1aed	d0 3b		bne $1b2a			bne 	_EFValue
.1aef	98		tya				tya
.1af0	48		pha				pha
.1af1	8a		txa				txa
.1af2	48		pha				pha
.1af3	a2 08		ldx #$08		ldx	#8
.1af5	20 5d 21	jsr $215d		jsr	deviceHandler
.1af8	84 07		sty $07				sty 	temp1+1
.1afa	85 06		sta $06				sta 	temp1
.1afc	68		pla				pla
.1afd	aa		tax				tax
.1afe	20 26 11	jsr $1126			jsr 	TOSToTemp0 					; point temp0 to the variable.
.1b01	a0 00		ldy #$00			ldy 	#0 							; is the fire time zero ?
.1b03	b1 04		lda ($04),y			lda 	(temp0),y
.1b05	c8		iny				iny
.1b06	11 04		ora ($04),y			ora 	(temp0),y
.1b08	f0 17		beq $1b21			beq 	_EFInitialise 				; if so, initialise the value but return false.
.1b0a	a0 00		ldy #$00			ldy 	#0 							; calculate trigger - timer
.1b0c	38		sec				sec
.1b0d	b1 04		lda ($04),y			lda 	(temp0),y
.1b0f	e5 06		sbc $06				sbc 	temp1
.1b11	c8		iny				iny
.1b12	b1 04		lda ($04),y			lda 	(temp0),y
.1b14	e5 07		sbc $07				sbc 	temp1+1
.1b16	10 0c		bpl $1b24			bpl 	_EFFail 					; if trigger >= timer then return False
.1b18	20 34 1b	jsr $1b34			jsr 	SetEventTimer 				; reset the timer for next time.
.1b1b	20 38 20	jsr $2038			jsr	 	MInt32True 					; and treutn true as fired.
.1b1e	68		pla				pla
.1b1f	a8		tay				tay
.1b20	60		rts				rts
.1b21					_EFInitialise:
.1b21	20 34 1b	jsr $1b34			jsr		SetEventTimer 				; set trigger time to time + elapsed
.1b24					_EFFail:
.1b24	20 3c 20	jsr $203c			jsr 	MInt32False
.1b27	68		pla				pla
.1b28	a8		tay				tay
.1b29	60		rts				rts
.1b2a					_EFValue:
.1b2a	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.1b2c	20 6a 21	jsr $216a		jsr	errorHandler
.1b2f					_EFType:
.1b2f	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.1b31	20 6a 21	jsr $216a		jsr	errorHandler
.1b34					SetEventTimer:
.1b34	a0 00		ldy #$00			ldy 	#0 							; add elapsed to current time, store in variable
.1b36	18		clc				clc
.1b37	a5 06		lda $06				lda 	temp1
.1b39	75 49		adc $49,x			adc 	esInt0+1,x
.1b3b	91 04		sta ($04),y			sta		(temp0),y
.1b3d	c8		iny				iny
.1b3e	a5 07		lda $07				lda 	temp1+1
.1b40	75 51		adc $51,x			adc 	esInt1+1,x
.1b42	91 04		sta ($04),y			sta		(temp0),y
.1b44	88		dey				dey
.1b45	11 04		ora ($04),y			ora 	(temp0),y 					; if the result is non zero, exit
.1b47	d0 04		bne $1b4d			bne 	_SETExit
.1b49	a9 01		lda #$01			lda 	#1 							; timer zero won't work, so make it 1, which is
.1b4b	91 04		sta ($04),y			sta 	(temp0),y 					; near enough.
.1b4d					_SETExit:
.1b4d	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary.asm

.1b4e					UnaryLen:
.1b4e	20 5c 1b	jsr $1b5c			jsr 	ULStart
.1b51					ULFinish:
.1b51	b1 04		lda ($04),y			lda 	(temp0),y
.1b53	a4 0c		ldy $0c				ldy 	tempShort
.1b55	20 4b 20	jsr $204b			jsr 	MInt32Set8Bit
.1b58	20 af 20	jsr $20af			jsr 	CheckRightParen
.1b5b	60		rts				rts
.1b5c	20 3a 1a	jsr $1a3a	ULStart:jsr 	EvaluateString
.1b5f	b5 48		lda $48,x			lda 	esInt0,x 					; copy address of string to temp0
.1b61	85 04		sta $04				sta 	temp0
.1b63	b5 50		lda $50,x			lda 	esInt1,x
.1b65	85 05		sta $05				sta 	temp0+1
.1b67	84 0c		sty $0c				sty 	tempShort 					; get length
.1b69	a0 00		ldy #$00			ldy 	#0
.1b6b	60		rts				rts
.1b6c					UnaryAsc:
.1b6c	20 5c 1b	jsr $1b5c			jsr 	ULStart 					; same as LEN() get string, save Y, point to length.
.1b6f	b1 04		lda ($04),y			lda 	(temp0),y
.1b71	c8		iny				iny 		 						; point to first character, we can do LEN code after that
.1b72	c9 00		cmp #$00			cmp 	#0
.1b74	d0 db		bne $1b51			bne 	ULFinish
.1b76	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.1b78	20 6a 21	jsr $216a		jsr	errorHandler
.1b7b					UnaryAbs:
.1b7b	20 2f 1a	jsr $1a2f			jsr 	EvaluateNumeric
.1b7e	b0 07		bcs $1b87			bcs 	_UAFloat
.1b80	20 f1 1f	jsr $1ff1			jsr 	MInt32Absolute
.1b83	20 af 20	jsr $20af			jsr 	CheckRightParen
.1b86	60		rts				rts
.1b87					_UAFloat:
.1b87	8a		txa				txa
.1b88	a2 00		ldx #$00		ldx	#0
.1b8a	20 bc 21	jsr $21bc		jsr	floatingpointHandler
.1b8d	aa		tax				tax
.1b8e	20 af 20	jsr $20af			jsr 	CheckRightParen
.1b91	60		rts				rts
.1b92					UnarySgn:
.1b92	20 2f 1a	jsr $1a2f			jsr 	EvaluateNumeric
.1b95	b0 07		bcs $1b9e			bcs 	_USFloat
.1b97	20 29 20	jsr $2029			jsr 	MInt32Sign
.1b9a	20 af 20	jsr $20af			jsr 	CheckRightParen
.1b9d	60		rts				rts
.1b9e					_USFloat:
.1b9e	8a		txa				txa
.1b9f	a2 0e		ldx #$0e		ldx	#14
.1ba1	20 bc 21	jsr $21bc		jsr	floatingpointHandler
.1ba4	aa		tax				tax
.1ba5	20 af 20	jsr $20af			jsr 	CheckRightParen
.1ba8	60		rts				rts
.1ba9					UnaryPeek:
.1ba9	20 d5 1b	jsr $1bd5			jsr 	PDLCode
.1bac	4c c9 1b	jmp $1bc9			jmp 	PDLByte0
.1baf					UnaryDeek:
.1baf	20 d5 1b	jsr $1bd5			jsr 	PDLCode
.1bb2	4c c3 1b	jmp $1bc3			jmp 	PDLByte1
.1bb5					UnaryLeek:
.1bb5	20 d5 1b	jsr $1bd5			jsr 	PDLCode
.1bb8	a0 03		ldy #$03			ldy 	#3
.1bba	b1 04		lda ($04),y			lda 	(temp0),y
.1bbc	95 60		sta $60,x			sta 	esInt3,x
.1bbe	88		dey				dey
.1bbf	b1 04		lda ($04),y			lda 	(temp0),y
.1bc1	95 58		sta $58,x			sta 	esInt2,x
.1bc3					PDLByte1:
.1bc3	a0 01		ldy #$01			ldy 	#1
.1bc5	b1 04		lda ($04),y			lda 	(temp0),y
.1bc7	95 50		sta $50,x			sta 	esInt1,x
.1bc9					PDLByte0:
.1bc9	a0 00		ldy #$00			ldy 	#0
.1bcb	b1 04		lda ($04),y			lda 	(temp0),y
.1bcd	95 48		sta $48,x			sta 	esInt0,x
.1bcf	a4 0c		ldy $0c				ldy 	tempShort 					; restore Y
.1bd1	20 af 20	jsr $20af			jsr 	CheckRightParen 			; check right and return
.1bd4	60		rts				rts
.1bd5					PDLCode:
.1bd5	20 45 1a	jsr $1a45			jsr 	EvaluateInteger
.1bd8	b5 48		lda $48,x			lda 	esInt0,x 					; copy address of string to temp0
.1bda	85 04		sta $04				sta 	temp0
.1bdc	b5 50		lda $50,x			lda 	esInt1,x
.1bde	85 05		sta $05				sta 	temp0+1
.1be0	a9 00		lda #$00			lda 	#0 							; zero upper 3 bytes of result, type okay.
.1be2	95 50		sta $50,x			sta 	esInt1,x
.1be4	95 58		sta $58,x			sta 	esInt2,x
.1be6	95 60		sta $60,x			sta 	esInt3,x
.1be8	84 0c		sty $0c				sty 	tempShort 					; save Y
.1bea	60		rts				rts
.1beb					Unary_Random:
.1beb	20 6c 20	jsr $206c			jsr 	MInt32Random 				; generate random number.
.1bee	b1 02		lda ($02),y			lda 	(codePtr),y 				; check followed by )
.1bf0	c9 c4		cmp #$c4			cmp 	#TKW_RPAREN
.1bf2	f0 08		beq $1bfc			beq 	_URExit
.1bf4	e8		inx				inx 								; load range 0..r-1 into +1
.1bf5	20 45 1a	jsr $1a45			jsr 	EvaluateInteger
.1bf8	ca		dex				dex
.1bf9	20 9d 1e	jsr $1e9d			jsr 	MInt32Modulus 				; calculate random % modulus
.1bfc					_URExit:
.1bfc	20 af 20	jsr $20af			jsr 	CheckRightParen 			; check right and return
.1bff	60		rts				rts
.1c00					Unary_Min:
.1c00	a9 01		lda #$01			lda 	#1 							; c1 cmp c2 needs to be > e.g. c1 > c2
.1c02	d0 02		bne $1c06			bne 	UnaryMBody
.1c04					Unary_Max:
.1c04	a9 ff		lda #$ff			lda 	#$FF 						; c1 cmp c2 needs to be < e.g. c1 < c2
.1c06					UnaryMBody:
.1c06	48		pha				pha 								; save comparator on stack.
.1c07	20 26 1a	jsr $1a26			jsr 	Evaluate 					; get the first thing to check
.1c0a					_UnaryMLoop:
.1c0a	b1 02		lda ($02),y			lda 	(codePtr),y 				; found ), indicates end.
.1c0c	c8		iny				iny
.1c0d	c9 c4		cmp #$c4			cmp 	#TKW_RPAREN
.1c0f	f0 09		beq $1c1a			beq 	_UnaryMExit
.1c11	c9 c6		cmp #$c6			cmp 	#TKW_COMMA 					; found , indicates more.
.1c13	f0 07		beq $1c1c			beq 	_UnaryMCompare
.1c15	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.1c17	20 6a 21	jsr $216a		jsr	errorHandler
.1c1a					_UnaryMExit:
.1c1a	68		pla				pla 								; throw comparator and return.
.1c1b	60		rts				rts
.1c1c					_UnaryMCompare:
.1c1c	e8		inx				inx 								; get the 2nd thing to evaluate
.1c1d	20 26 1a	jsr $1a26			jsr 	Evaluate
.1c20	ca		dex				dex
.1c21	20 cf 17	jsr $17cf			jsr 	PerformComparison 			; this is part of evaluate/compare.asm
.1c24	85 0c		sta $0c				sta 	tempShort 					; save result
.1c26	68		pla				pla 								; get what we need
.1c27	48		pha				pha
.1c28	c5 0c		cmp $0c				cmp 	tempShort 					; did we get it
.1c2a	d0 de		bne $1c0a			bne 	_UnaryMLoop 				; no, try another value.
.1c2c	20 3c 20	jsr $203c			jsr 	MInt32False 				; promote 2nd to 1st.
.1c2f	20 27 1f	jsr $1f27			jsr 	MInt32Add
.1c32	4c 0a 1c	jmp $1c0a			jmp 	_UnaryMLoop
.1c35					Unary_Page:
.1c35	20 3c 20	jsr $203c			jsr 	MInt32False 				; zero
.1c38	ad c8 0a	lda $0ac8			lda 	basePage 					; copy base page address in.
.1c3b	95 48		sta $48,x			sta 	esInt0,x
.1c3d	ad c9 0a	lda $0ac9			lda 	basePage+1
.1c40	95 50		sta $50,x			sta 	esInt1,x
.1c42	60		rts				rts
.1c43					UnaryReference:
.1c43	a9 0f		lda #$0f			lda 	#15
.1c45	20 1d 19	jsr $191d			jsr 	EvaluateLevel 				; evaluate term and don't deference.
.1c48	b5 40		lda $40,x			lda 	esType,x 					; check it's a reference.
.1c4a	10 05		bpl $1c51			bpl 	UType
.1c4c	a9 00		lda #$00			lda 	#0 							; make it an integer
.1c4e	95 40		sta $40,x			sta 	esType,x
.1c50	60		rts				rts
.1c51					UType:
.1c51	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.1c53	20 6a 21	jsr $216a		jsr	errorHandler
.1c56					UnaryHexMarker:
.1c56	4c 17 1a	jmp $1a17			jmp 	EvaluateIntegerTerm
.1c59					UnaryComplement:
.1c59	20 17 1a	jsr $1a17			jsr 	EvaluateIntegerTerm
.1c5c	20 10 20	jsr $2010			jsr 	MInt32Not
.1c5f	60		rts				rts
.1c60					UnaryIntToFloat:
.1c60	20 2f 1a	jsr $1a2f			jsr 	EvaluateNumeric
.1c63	b5 40		lda $40,x			lda 	esType,x
.1c65	d0 0b		bne $1c72			bne 	_UIFExit
.1c67	8a		txa				txa
.1c68	a2 1a		ldx #$1a		ldx	#26
.1c6a	20 bc 21	jsr $21bc		jsr	floatingpointHandler
.1c6d	aa		tax				tax
.1c6e	a9 01		lda #$01			lda 	#1
.1c70	95 40		sta $40,x			sta 	esType,x
.1c72					_UIFExit:
.1c72	60		rts				rts
.1c73					UnaryFloatToInt:
.1c73	20 2f 1a	jsr $1a2f			jsr 	EvaluateNumeric
.1c76	b5 40		lda $40,x			lda 	esType,x
.1c78	f0 07		beq $1c81			beq 	_UFIExit
.1c7a	8a		txa				txa
.1c7b	a2 12		ldx #$12		ldx	#18
.1c7d	20 bc 21	jsr $21bc		jsr	floatingpointHandler
.1c80	aa		tax				tax
.1c81					_UFIExit:
.1c81	60		rts				rts
.1c82					UnaryAlloc:
.1c82	e8		inx				inx 								; evaluate memory required
.1c83	20 45 1a	jsr $1a45			jsr 	EvaluateInteger
.1c86	20 af 20	jsr $20af			jsr 	CheckRightParen
.1c89	ca		dex				dex
.1c8a	b5 59		lda $59,x			lda 	esInt2+1,x 					; check at least in 64k range.
.1c8c	15 61		ora $61,x			ora 	esInt3+1,x
.1c8e	d0 19		bne $1ca9			bne 	_UABadValue
.1c90	20 3c 20	jsr $203c			jsr 	MInt32False					; zero return.
.1c93	a5 10		lda $10				lda 	lowMemory+1 				; copy low memory in
.1c95	95 50		sta $50,x			sta 	esInt1,x
.1c97	a5 0f		lda $0f				lda 	lowMemory
.1c99	95 48		sta $48,x			sta 	esInt0,x
.1c9b	18		clc				clc 								; add alloc required.
.1c9c	75 49		adc $49,x			adc 	esInt0+1,x
.1c9e	85 0f		sta $0f				sta 	lowMemory
.1ca0	a5 10		lda $10				lda 	lowMemory+1
.1ca2	75 51		adc $51,x			adc 	esInt1+1,x
.1ca4	85 10		sta $10				sta 	lowMemory+1
.1ca6	b0 01		bcs $1ca9			bcs		_UABadValue 				; overflow definitely bad.
.1ca8	60		rts				rts
.1ca9					_UABadValue:
.1ca9	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.1cab	20 6a 21	jsr $216a		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary2.asm

.1cae					UnaryTimer:
.1cae	20 af 20	jsr $20af			jsr 	CheckRightParen
.1cb1	98		tya				tya
.1cb2	48		pha				pha
.1cb3	20 63 20	jsr $2063			jsr 	MInt32Zero 					; zero result
.1cb6	86 04		stx $04				stx 	temp0 						; returning in YA so can't use .pshx
.1cb8	a2 08		ldx #$08		ldx	#8
.1cba	20 5d 21	jsr $215d		jsr	deviceHandler
.1cbd	a6 04		ldx $04				ldx 	temp0						; restore X and update 16 bit result
.1cbf	95 48		sta $48,x			sta 	esInt0,x
.1cc1	98		tya				tya
.1cc2	95 50		sta $50,x			sta 	esInt1,x
.1cc4	68		pla				pla
.1cc5	a8		tay				tay
.1cc6	60		rts				rts
.1cc7					UnaryInkey:
.1cc7	20 af 20	jsr $20af			jsr 	CheckRightParen
.1cca	86 04		stx $04				stx 	temp0
.1ccc	a2 02		ldx #$02		ldx	#2
.1cce	20 5d 21	jsr $215d		jsr	deviceHandler
.1cd1	a6 04		ldx $04				ldx 	temp0
.1cd3	20 4b 20	jsr $204b			jsr 	MInt32Set8Bit
.1cd6	60		rts				rts
.1cd7					UnaryGet:
.1cd7	20 af 20	jsr $20af			jsr 	CheckRightParen
.1cda	86 04		stx $04				stx 	temp0
.1cdc					_UGLoop:
.1cdc	a2 02		ldx #$02		ldx	#2
.1cde	20 5d 21	jsr $215d		jsr	deviceHandler
.1ce1	c9 00		cmp #$00			cmp 	#0
.1ce3	f0 f7		beq $1cdc			beq 	_UGLoop
.1ce5	a6 04		ldx $04				ldx 	temp0
.1ce7	20 4b 20	jsr $204b			jsr 	MInt32Set8Bit
.1cea	60		rts				rts
.1ceb					UnarySys:
.1ceb	20 45 1a	jsr $1a45			jsr 	EvaluateInteger 				; get the address
.1cee	20 af 20	jsr $20af			jsr 	CheckRightParen
.1cf1	20 26 11	jsr $1126			jsr 	TOSToTemp0 						; copy to temp0
.1cf4	8a		txa				txa
.1cf5	48		pha				pha
.1cf6	98		tya				tya
.1cf7	48		pha				pha
.1cf8	ad 00 0a	lda $0a00			lda 	("A"-"A")*4+SingleLetterVar 	; load AXY
.1cfb	ae 5c 0a	ldx $0a5c			ldx 	("X"-"A")*4+SingleLetterVar
.1cfe	ac 60 0a	ldy $0a60			ldy 	("Y"-"A")*4+SingleLetterVar
.1d01	20 10 1d	jsr $1d10			jsr 	_CallTemp0
.1d04	85 0c		sta $0c				sta 	tempShort 						; restore YX
.1d06	68		pla				pla
.1d07	a8		tay				tay
.1d08	68		pla				pla
.1d09	aa		tax				tax
.1d0a	a5 0c		lda $0c				lda 	tempShort
.1d0c	20 4b 20	jsr $204b			jsr 	MInt32Set8Bit 					; return result.
.1d0f	60		rts				rts
.1d10					_CallTemp0:
.1d10	6c 04 00	jmp ($0004)			jmp 	(temp0)

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unarystr.asm

.1d13					ExecChr:
.1d13	20 4d 1a	jsr $1a4d			jsr 	EvaluateSmallInteger		; character number
.1d16	20 af 20	jsr $20af			jsr 	CheckRightParen				; right bracket
.1d19	98		tya				tya
.1d1a	48		pha				pha
.1d1b	8a		txa				txa 								; A = stack
.1d1c	b4 48		ldy $48,x			ldy 	esInt0,x					; Y = character
.1d1e	a2 00		ldx #$00		ldx	#0
.1d20	20 13 24	jsr $2413		jsr	stringHandler
.1d23	aa		tax				tax 								; X = stack
.1d24	68		pla				pla
.1d25	a8		tay				tay
.1d26	60		rts				rts
.1d27					ExecLeft:
.1d27	20 3a 1a	jsr $1a3a			jsr 	EvaluateString 				; string to stack,X
.1d2a	20 bc 20	jsr $20bc			jsr 	CheckComma
.1d2d	e8		inx				inx
.1d2e	a9 01		lda #$01			lda 	#1 							; 1 for 2nd parameter.
.1d30	20 4b 20	jsr $204b			jsr 	MInt32Set8Bit
.1d33	e8		inx				inx
.1d34	20 4d 1a	jsr $1a4d			jsr 	EvaluateSmallInteger 		; smallint 3rd parameter
.1d37					ExecSubstring:
.1d37	ca		dex				dex 								; fix up X
.1d38	ca		dex				dex
.1d39	20 af 20	jsr $20af			jsr 	CheckRightParen 			; check closing right bracket.
.1d3c	8a		txa				txa 								; do the substring and exit.
.1d3d	a2 08		ldx #$08		ldx	#8
.1d3f	20 13 24	jsr $2413		jsr	stringHandler
.1d42	aa		tax				tax
.1d43	60		rts				rts
.1d44					ExecMid:
.1d44	20 3a 1a	jsr $1a3a			jsr 	EvaluateString 				; string to stack,X
.1d47	20 bc 20	jsr $20bc			jsr 	CheckComma
.1d4a	e8		inx				inx
.1d4b	20 4d 1a	jsr $1a4d			jsr 	EvaluateSmallInteger 		; smallint 2nd parameter
.1d4e	c9 00		cmp #$00			cmp 	#0
.1d50	f0 15		beq $1d67			beq 	_EMValue
.1d52	e8		inx				inx
.1d53	a9 ff		lda #$ff			lda 	#255 						; 255 default for 3nd parameter.
.1d55	20 4b 20	jsr $204b			jsr 	MInt32Set8Bit
.1d58	b1 02		lda ($02),y			lda 	(codePtr),y 				; is there a ) next
.1d5a	c9 c4		cmp #$c4			cmp 	#TKW_RPAREN 				; if so, just MID$(a$,2)
.1d5c	f0 d9		beq $1d37			beq 	ExecSubString
.1d5e	20 bc 20	jsr $20bc			jsr 	CheckComma
.1d61	20 4d 1a	jsr $1a4d			jsr 	EvaluateSmallInteger 		; smallint 2nd parameter
.1d64	4c 37 1d	jmp $1d37			jmp 	ExecSubString
.1d67					_EMValue:
.1d67	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.1d69	20 6a 21	jsr $216a		jsr	errorHandler
.1d6c					ExecRight:
.1d6c	20 3a 1a	jsr $1a3a			jsr 	EvaluateString 				; string to stack,X
.1d6f	20 bc 20	jsr $20bc			jsr 	CheckComma
.1d72	e8		inx				inx
.1d73	20 4d 1a	jsr $1a4d			jsr 	EvaluateSmallInteger 		; smallint 2nd parameter.
.1d76	ca		dex				dex
.1d77	98		tya				tya
.1d78	48		pha				pha
.1d79	b5 48		lda $48,x			lda 	esInt0,x 					; copy address of string to temp0
.1d7b	85 04		sta $04				sta 	temp0
.1d7d	b5 50		lda $50,x			lda 	esInt1,x
.1d7f	85 05		sta $05				sta 	temp0+1
.1d81	a0 00		ldy #$00			ldy 	#0 							; point to length
.1d83	b1 04		lda ($04),y			lda 	(temp0),y 					; get the length.
.1d85	18		clc				clc 								; add 1.
.1d86	69 01		adc #$01			adc 	#1
.1d88	38		sec				sec
.1d89	f5 49		sbc $49,x			sbc 	esInt0+1,x  				; subtract right count.
.1d8b	f0 02		beq $1d8f			beq		_ERMake1 					; if zero, make it 1.
.1d8d	b0 02		bcs $1d91			bcs		_EROkay
.1d8f					_ERMake1:
.1d8f	a9 01		lda #$01			lda 	#1 							; start position.
.1d91					_EROkay:
.1d91	e8		inx				inx 								; set start pos.
.1d92	95 48		sta $48,x			sta 	esInt0,x
.1d94	e8		inx				inx
.1d95	a9 ff		lda #$ff			lda 	#255 						; 255 default for 3nd parameter.
.1d97	20 4b 20	jsr $204b			jsr 	MInt32Set8Bit
.1d9a	68		pla				pla
.1d9b	a8		tay				tay
.1d9c	4c 37 1d	jmp $1d37			jmp 	ExecSubString 				; do the substring code.

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32binary.asm

.1d9f					MInt32And:
.1d9f	b5 48		lda $48,x			lda 	esInt0,x
.1da1	35 49		and $49,x			and 	esInt0+1,x
.1da3	95 48		sta $48,x			sta 	esInt0,x
.1da5	b5 50		lda $50,x			lda 	esInt1,x
.1da7	35 51		and $51,x			and 	esInt1+1,x
.1da9	95 50		sta $50,x			sta 	esInt1,x
.1dab	b5 58		lda $58,x			lda 	esInt2,x
.1dad	35 59		and $59,x			and 	esInt2+1,x
.1daf	95 58		sta $58,x			sta 	esInt2,x
.1db1	b5 60		lda $60,x			lda 	esInt3,x
.1db3	35 61		and $61,x			and 	esInt3+1,x
.1db5	95 60		sta $60,x			sta 	esInt3,x
.1db7	60		rts				rts
.1db8					MInt32Or:
.1db8	b5 48		lda $48,x			lda 	esInt0,x
.1dba	15 49		ora $49,x			ora 	esInt0+1,x
.1dbc	95 48		sta $48,x			sta 	esInt0,x
.1dbe	b5 50		lda $50,x			lda 	esInt1,x
.1dc0	15 51		ora $51,x			ora 	esInt1+1,x
.1dc2	95 50		sta $50,x			sta 	esInt1,x
.1dc4	b5 58		lda $58,x			lda 	esInt2,x
.1dc6	15 59		ora $59,x			ora 	esInt2+1,x
.1dc8	95 58		sta $58,x			sta 	esInt2,x
.1dca	b5 60		lda $60,x			lda 	esInt3,x
.1dcc	15 61		ora $61,x			ora 	esInt3+1,x
.1dce	95 60		sta $60,x			sta 	esInt3,x
.1dd0	60		rts				rts
.1dd1					MInt32Xor:
.1dd1	b5 48		lda $48,x			lda 	esInt0,x
.1dd3	55 49		eor $49,x			eor 	esInt0+1,x
.1dd5	95 48		sta $48,x			sta 	esInt0,x
.1dd7	b5 50		lda $50,x			lda 	esInt1,x
.1dd9	55 51		eor $51,x			eor 	esInt1+1,x
.1ddb	95 50		sta $50,x			sta 	esInt1,x
.1ddd	b5 58		lda $58,x			lda 	esInt2,x
.1ddf	55 59		eor $59,x			eor 	esInt2+1,x
.1de1	95 58		sta $58,x			sta 	esInt2,x
.1de3	b5 60		lda $60,x			lda 	esInt3,x
.1de5	55 61		eor $61,x			eor 	esInt3+1,x
.1de7	95 60		sta $60,x			sta 	esInt3,x
.1de9	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32compare.asm

.1dea					MInt32Compare:
.1dea	b5 48		lda $48,x			lda 	esInt0,x 					; equality check.
.1dec	d5 49		cmp $49,x			cmp 	esInt0+1,x
.1dee	d0 13		bne $1e03			bne 	MInt32Compare2
.1df0	b5 50		lda $50,x			lda 	esInt1,x
.1df2	d5 51		cmp $51,x			cmp 	esInt1+1,x
.1df4	d0 0d		bne $1e03			bne 	MInt32Compare2
.1df6	b5 58		lda $58,x			lda 	esInt2,x
.1df8	d5 59		cmp $59,x			cmp 	esInt2+1,x
.1dfa	d0 07		bne $1e03			bne 	MInt32Compare2
.1dfc	b5 60		lda $60,x			lda 	esInt3,x
.1dfe	55 61		eor $61,x			eor 	esInt3+1,x 					; will return 0 if the same.
.1e00	d0 01		bne $1e03			bne 	MInt32Compare2
.1e02	60		rts				rts
.1e03					MInt32Compare2:
.1e03	b5 48		lda $48,x			lda		esInt0,x 					; unsigned 32 bit comparison.
.1e05	d5 49		cmp $49,x			cmp 	esInt0+1,x
.1e07	b5 50		lda $50,x			lda		esInt1,x
.1e09	f5 51		sbc $51,x			sbc 	esInt1+1,x
.1e0b	b5 58		lda $58,x			lda		esInt2,x
.1e0d	f5 59		sbc $59,x			sbc 	esInt2+1,x
.1e0f	b5 60		lda $60,x			lda		esInt3,x
.1e11	f5 61		sbc $61,x			sbc 	esInt3+1,x
.1e13	50 02		bvc $1e17			bvc 	_I32LNoOverflow 			; make it signed 32 bi comparison
.1e15	49 80		eor #$80			eor 	#$80
.1e17					_I32LNoOverflow
.1e17	30 03		bmi $1e1c			bmi 	MInt32CLess					; if -ve then return $FF
.1e19	a9 01		lda #$01			lda 	#$01						; else return $01
.1e1b	60		rts				rts
.1e1c					MInt32CLess:
.1e1c	a9 ff		lda #$ff			lda 	#$FF
.1e1e	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32divide.asm

.1e1f					MInt32SDivide:
.1e1f	98		tya				tya  								; save Y, which is the count of negations
.1e20	48		pha				pha
.1e21	a0 00		ldy #$00			ldy 	#0 							; zero count
.1e23	20 3b 1e	jsr $1e3b			jsr 	_MInt32SRemSign 			; unsign TOS
.1e26	e8		inx				inx 								; unsign TOS+1
.1e27	20 3b 1e	jsr $1e3b			jsr 	_MInt32SRemSign
.1e2a	ca		dex				dex
.1e2b	98		tya				tya 								; save sign count on stack
.1e2c	48		pha				pha
.1e2d	20 44 1e	jsr $1e44			jsr 	MInt32UDivide 				; unsigned division
.1e30	68		pla				pla 								; get sign count back
.1e31	29 01		and #$01			and 	#1 							; if it is odd, then negate result
.1e33	f0 03		beq $1e38			beq 	_I32SNoNeg
.1e35	20 f6 1f	jsr $1ff6			jsr 	MInt32Negate
.1e38					_I32SNoNeg:
.1e38	68		pla				pla 								; restoe Y and exit
.1e39	a8		tay				tay
.1e3a	60		rts				rts
.1e3b					_MInt32SRemSign:
.1e3b	b5 60		lda $60,x			lda 	esInt3,x 					; is it -ve
.1e3d	10 04		bpl $1e43			bpl 	_MInt32SRSExit
.1e3f	c8		iny				iny 								; increment the sign count
.1e40	20 f6 1f	jsr $1ff6			jsr 	MInt32Negate 				; negate the value.
.1e43					_MInt32SRSExit:
.1e43	60		rts				rts
.1e44					MInt32UDivide:
.1e44	b5 49		lda $49,x			lda 	esInt0+1,x 					; check for division by zero
.1e46	15 51		ora $51,x			ora 	esInt1+1,x
.1e48	15 52		ora $52,x			ora 	esInt1+2,x
.1e4a	15 53		ora $53,x			ora 	esInt1+3,x
.1e4c	f0 4a		beq $1e98			beq 	_MInt32DZero
.1e4e	e8		inx				inx 								; clear A
.1e4f	e8		inx				inx
.1e50	20 3c 20	jsr $203c			jsr 	MInt32False
.1e53	ca		dex				dex
.1e54	ca		dex				dex
.1e55	98		tya				tya 								; save Y on the stack
.1e56	48		pha				pha
.1e57	a0 20		ldy #$20			ldy 	#32 						; number of division passes
.1e59					_MInt32UDLoop:
.1e59	16 48		asl $48,x			asl 	esInt0,x					; shift QA left. First Q
.1e5b	36 50		rol $50,x			rol 	esInt1,x
.1e5d	36 58		rol $58,x			rol 	esInt2,x
.1e5f	36 60		rol $60,x			rol 	esInt3,x
.1e61	36 4a		rol $4a,x			rol 	esInt0+2,x 					; then A.
.1e63	36 52		rol $52,x			rol 	esInt1+2,x
.1e65	36 5a		rol $5a,x			rol 	esInt2+2,x
.1e67	36 62		rol $62,x			rol 	esInt3+2,x
.1e69	38		sec				sec 								; calculate A-M saving result on the stack
.1e6a	b5 4a		lda $4a,x			lda 	esInt0+2,x
.1e6c	f5 49		sbc $49,x			sbc 	esInt0+1,x
.1e6e	48		pha				pha
.1e6f	b5 52		lda $52,x			lda 	esInt1+2,x
.1e71	f5 51		sbc $51,x			sbc 	esInt1+1,x
.1e73	48		pha				pha
.1e74	b5 5a		lda $5a,x			lda 	esInt2+2,x
.1e76	f5 59		sbc $59,x			sbc 	esInt2+1,x
.1e78	48		pha				pha
.1e79	b5 62		lda $62,x			lda 	esInt3+2,x
.1e7b	f5 61		sbc $61,x			sbc 	esInt3+1,x
.1e7d	90 10		bcc $1e8f			bcc		_MInt32NoSubtract 			; if A < M (e.g. carry clear) then reject this.
.1e7f	95 62		sta $62,x			sta 	esInt3+2,x 					; write result back to A
.1e81	68		pla				pla
.1e82	95 5a		sta $5a,x			sta 	esInt2+2,x
.1e84	68		pla				pla
.1e85	95 52		sta $52,x			sta 	esInt1+2,x
.1e87	68		pla				pla
.1e88	95 4a		sta $4a,x			sta 	esInt0+2,x
.1e8a	f6 48		inc $48,x			inc 	esInt0,x 					; sets bit 0 of Q - it was shifted left previously.
.1e8c	4c 92 1e	jmp $1e92			jmp 	_MInt32Next 					; do the next iteration
.1e8f					_MInt32NoSubtract:
.1e8f	68		pla				pla
.1e90	68		pla				pla
.1e91	68		pla				pla
.1e92					_MInt32Next:
.1e92	88		dey				dey 								; do this 32 times.
.1e93	d0 c4		bne $1e59			bne 	_MInt32UDLoop
.1e95	68		pla				pla 								; restore Y and exit
.1e96	a8		tay				tay
.1e97	60		rts				rts
.1e98					_MInt32DZero:
.1e98	a2 05		ldx #$05			ldx 	#ErrorID_DivZero
.1e9a	20 6a 21	jsr $216a		jsr	errorHandler
.1e9d					MInt32Modulus:
.1e9d	20 44 1e	jsr $1e44			jsr 	MInt32UDivide 				; do the division.
.1ea0	b5 62		lda $62,x			lda 	esInt3+2,x 					; copy 2nd on stack (the remainder) to the top.
.1ea2	95 60		sta $60,x			sta 	esInt3,x
.1ea4	b5 5a		lda $5a,x			lda 	esInt2+2,x
.1ea6	95 58		sta $58,x			sta 	esInt2,x
.1ea8	b5 52		lda $52,x			lda 	esInt1+2,x
.1eaa	95 50		sta $50,x			sta 	esInt1,x
.1eac	b5 4a		lda $4a,x			lda 	esInt0+2,x
.1eae	95 48		sta $48,x			sta 	esInt0,x
.1eb0	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32fromstr.asm

.0af6					fs32Length:
>0af6							.fill 	1
.1eb1					MInt32FromString:
.1eb1	85 0c		sta $0c				sta 	tempShort 					; save base
.1eb3	98		tya				tya
.1eb4	48		pha				pha
.1eb5	a0 00		ldy #$00			ldy 	#0 							; get length
.1eb7	b1 04		lda ($04),y			lda 	(temp0),y
.1eb9	8d f6 0a	sta $0af6			sta 	fs32Length
.1ebc	f0 65		beq $1f23			beq 	_I32FSFail2					; fail if length zero.
.1ebe	a0 01		ldy #$01			ldy 	#1 							; set index into string being read
.1ec0	b1 04		lda ($04),y			lda 	(temp0),y 					; look at first character
.1ec2	c9 2d		cmp #$2d			cmp 	#"-"						; is it a - character
.1ec4	d0 09		bne $1ecf			bne 	_I32FSNotNegative
.1ec6	ad f6 0a	lda $0af6			lda 	fs32Length 					; get length back.
.1ec9	c9 01		cmp #$01			cmp 	#1 							; if 1 it is just a '-; so fail.'
.1ecb	f0 56		beq $1f23			beq 	_I32FSFail2
.1ecd	a0 02		ldy #$02			ldy 	#2 							; first digit of the number.
.1ecf					_I32FSNotNegative:
.1ecf	a5 0c		lda $0c				lda 	tempShort 					; get the base back.
.1ed1	c0 02		cpy #$02			cpy 	#2 							; if we read a -ve (e.g. Y == 2)
.1ed3	d0 02		bne $1ed7			bne 	_I32FSNN2
.1ed5	09 80		ora #$80			ora 	#$80						; set bit 7, this indicates a negated result.
.1ed7					_I32FSNN2:
.1ed7	48		pha				pha 								; save base + final sign on stack.
.1ed8	20 3c 20	jsr $203c			jsr 	MInt32False 				; zero the return value.
.1edb					_I32FSMainLoop:
.1edb	68		pla				pla 								; get the base back into tempShort
.1edc	48		pha				pha
.1edd	29 7f		and #$7f			and 	#$7F
.1edf	85 0c		sta $0c				sta 	tempShort
.1ee1	b1 04		lda ($04),y			lda 	(temp0),y 					; look at next character.
.1ee3	c9 61		cmp #$61			cmp 	#"a" 						; fix up case.
.1ee5	90 02		bcc $1ee9			bcc 	_I32FSNotLC
.1ee7	e9 20		sbc #$20			sbc 	#32
.1ee9					_I32FSNotLC:
.1ee9	38		sec				sec 								; subtract 48 (ASCII "0")
.1eea	e9 30		sbc #$30			sbc 	#"0"
.1eec	90 34		bcc $1f22			bcc 	_I32FSFail 					; nothing more to do.
.1eee	c9 0a		cmp #$0a			cmp 	#9+1 						; if it is 0-9 validate vs base.
.1ef0	90 06		bcc $1ef8			bcc 	_I32FSValidate
.1ef2	c9 11		cmp #$11			cmp 	#17 						; is it between 58 and 64 ? if so bad.
.1ef4	90 2c		bcc $1f22			bcc 	_I32FSFail
.1ef6	e9 07		sbc #$07			sbc 	#7 							; adjust into range so now character is 0->nnn
.1ef8					_I32FSValidate:
.1ef8	c5 0c		cmp $0c				cmp 	tempShort 					; compare against the base.
.1efa	b0 26		bcs $1f22			bcs 	_I32FSFail 					; sorry, too large for this base.
.1efc	48		pha				pha 								; save the new digit value.
.1efd	e8		inx				inx 								; put base into next slot.
.1efe	a5 0c		lda $0c				lda 	tempShort
.1f00	20 4b 20	jsr $204b			jsr 	MInt32Set8Bit
.1f03	ca		dex				dex
.1f04	20 5b 1f	jsr $1f5b			jsr 	MInt32Multiply 				; multiply current by the base
.1f07	e8		inx				inx
.1f08	68		pla				pla  								; put additive into next slot
.1f09	20 4b 20	jsr $204b			jsr 	MInt32Set8Bit
.1f0c	ca		dex				dex
.1f0d	20 27 1f	jsr $1f27			jsr 	MInt32Add 					; and add it
.1f10	c8		iny				iny 								; look at next character
.1f11	cc f6 0a	cpy $0af6			cpy 	fs32Length 					; until > length.
.1f14	f0 c5		beq $1edb			beq 	_I32FSMainLoop
.1f16	90 c3		bcc $1edb			bcc 	_I32FSMainLoop
.1f18					_I32FSDone:
.1f18	68		pla				pla 								; get base/final sign back
.1f19	10 03		bpl $1f1e			bpl 	_I32FSNN3
.1f1b	20 f6 1f	jsr $1ff6			jsr 	MInt32Negate 				; negate the result.
.1f1e					_I32FSNN3:
.1f1e	68		pla				pla
.1f1f	a8		tay				tay
.1f20	38		sec				sec
.1f21	60		rts				rts
.1f22					_I32FSFail:
.1f22	68		pla				pla
.1f23					_I32FSFail2:
.1f23	68		pla				pla
.1f24	a8		tay				tay
.1f25	18		clc				clc
.1f26	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32math.asm

.1f27					MInt32Add:
.1f27	18		clc				clc
.1f28	b5 48		lda $48,x			lda 	esInt0,x
.1f2a	75 49		adc $49,x			adc 	esInt0+1,x
.1f2c	95 48		sta $48,x			sta 	esInt0,x
.1f2e	b5 50		lda $50,x			lda 	esInt1,x
.1f30	75 51		adc $51,x			adc 	esInt1+1,x
.1f32	95 50		sta $50,x			sta 	esInt1,x
.1f34	b5 58		lda $58,x			lda 	esInt2,x
.1f36	75 59		adc $59,x			adc 	esInt2+1,x
.1f38	95 58		sta $58,x			sta 	esInt2,x
.1f3a	b5 60		lda $60,x			lda 	esInt3,x
.1f3c	75 61		adc $61,x			adc 	esInt3+1,x
.1f3e	95 60		sta $60,x			sta 	esInt3,x
.1f40	60		rts				rts
.1f41					MInt32Sub:
.1f41	38		sec				sec
.1f42	b5 48		lda $48,x			lda 	esInt0,x
.1f44	f5 49		sbc $49,x			sbc 	esInt0+1,x
.1f46	95 48		sta $48,x			sta 	esInt0,x
.1f48	b5 50		lda $50,x			lda 	esInt1,x
.1f4a	f5 51		sbc $51,x			sbc 	esInt1+1,x
.1f4c	95 50		sta $50,x			sta 	esInt1,x
.1f4e	b5 58		lda $58,x			lda 	esInt2,x
.1f50	f5 59		sbc $59,x			sbc 	esInt2+1,x
.1f52	95 58		sta $58,x			sta 	esInt2,x
.1f54	b5 60		lda $60,x			lda 	esInt3,x
.1f56	f5 61		sbc $61,x			sbc 	esInt3+1,x
.1f58	95 60		sta $60,x			sta 	esInt3,x
.1f5a	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32multiply.asm

.1f5b					MInt32Multiply:
.1f5b	e8		inx				inx 								; copy 2nd -> 3rd
.1f5c	20 81 1f	jsr $1f81			jsr 	MInt32CopyUp
.1f5f	ca		dex				dex
.1f60	20 81 1f	jsr $1f81			jsr 	MInt32CopyUp 				; copy 1st -> 2nd
.1f63	20 3c 20	jsr $203c			jsr 	MInt32False 					; zero 1st.
.1f66					_I32Loop:
.1f66	b5 4a		lda $4a,x			lda 	esInt0+2,x 					; get low bit of 3rd
.1f68	29 01		and #$01			and 	#1
.1f6a	f0 03		beq $1f6f			beq 	_I32NoAdd 					; if set
.1f6c	20 27 1f	jsr $1f27			jsr 	MInt32Add 					; add 2nd to 1st.
.1f6f					_I32NoAdd:
.1f6f	e8		inx				inx 								; shift 2nd left
.1f70	20 51 20	jsr $2051			jsr 	MInt32ShiftLeft
.1f73	e8		inx				inx  								; shift 3rd right
.1f74	20 5a 20	jsr $205a			jsr 	MInt32ShiftRight
.1f77	20 63 20	jsr $2063			jsr 	MInt32Zero 					; check if zero.
.1f7a	08		php				php 								; save status bits
.1f7b	ca		dex				dex 	 							; point back to 1st
.1f7c	ca		dex				dex
.1f7d	28		plp				plp 								; get status bits
.1f7e	d0 e6		bne $1f66			bne 	_I32Loop 					; if non-zero keep going.
.1f80	60		rts				rts
.1f81					MInt32CopyUp:
.1f81	b5 48		lda $48,x			lda 	esInt0,x
.1f83	95 49		sta $49,x			sta 	esInt0+1,x
.1f85	b5 50		lda $50,x			lda 	esInt1,x
.1f87	95 51		sta $51,x			sta 	esInt1+1,x
.1f89	b5 58		lda $58,x			lda 	esInt2,x
.1f8b	95 59		sta $59,x			sta 	esInt2+1,x
.1f8d	b5 60		lda $60,x			lda 	esInt3,x
.1f8f	95 61		sta $61,x			sta 	esInt3+1,x
.1f91	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32tostr.asm

>0af7					MCharCount:	.fill 	1						; count of converted characters
.1f92					MInt32ToString:
.1f92	48		pha				pha 								; save base
.1f93	85 0c		sta $0c				sta 	tempShort 					; save target base.
.1f95	a9 00		lda #$00			lda 	#0
.1f97	8d f7 0a	sta $0af7			sta 	MCharCount 					; clear character count to 0
.1f9a	98		tya				tya
.1f9b	48		pha				pha
.1f9c	a5 0c		lda $0c				lda 	tempShort 					; check if we are signed conversion
.1f9e	10 10		bpl $1fb0			bpl 	_I32TSUnsigned
.1fa0	48		pha				pha 								; save base on stack.
.1fa1	b5 60		lda $60,x			lda 	esInt3,x 					; is it actually negative
.1fa3	10 08		bpl $1fad			bpl 	_I32TSNoFlip
.1fa5	a9 2d		lda #$2d			lda 	#"-" 						; write a '-' prefix out.
.1fa7	20 e3 1f	jsr $1fe3			jsr 	MI32WriteCharacter
.1faa	20 f6 1f	jsr $1ff6			jsr 	MInt32Negate 				; negate the value.
.1fad					_I32TSNoFlip:
.1fad	68		pla				pla 								; get the base back
.1fae	29 7f		and #$7f			and 	#$7F 						; clear the sign flag so it's just a base now.
.1fb0					_I32TSUnsigned:
.1fb0	20 be 1f	jsr $1fbe			jsr 	MI32DivideWrite 			; recursive code to output string.
.1fb3	a0 00		ldy #$00			ldy 	#0 							; write charcount to first character.
.1fb5	ad f7 0a	lda $0af7			lda 	MCharCount
.1fb8	91 04		sta ($04),y			sta 	(temp0),y
.1fba	68		pla				pla
.1fbb	a8		tay				tay
.1fbc	68		pla				pla
.1fbd	60		rts				rts
.1fbe					MI32DivideWrite:
.1fbe	48		pha				pha 								; save the divisor/base
.1fbf	e8		inx				inx 								; write in the dividing position.
.1fc0	20 4b 20	jsr $204b			jsr 	MInt32Set8Bit
.1fc3	ca		dex				dex
.1fc4	20 44 1e	jsr $1e44			jsr 	MInt32UDivide 				; divide number by base.
.1fc7	68		pla				pla 								; get the base into Y
.1fc8	a8		tay				tay
.1fc9	b5 4a		lda $4a,x			lda 	esInt0+2,x 					; get the remainder and push on the stack.
.1fcb	48		pha				pha
.1fcc	20 63 20	jsr $2063			jsr 	MInt32Zero 					; is the result zero ?
.1fcf	f0 04		beq $1fd5			beq 	_I32NoRecurse 				; if so, don't recurse.
.1fd1	98		tya				tya 								; put base into A
.1fd2	20 be 1f	jsr $1fbe			jsr 	MI32DivideWrite 				; and jsr the dividor recursively.
.1fd5					_I32NoRecurse:
.1fd5	68		pla				pla 								; get the remainder back
.1fd6	c9 0a		cmp #$0a			cmp 	#10  						; handle hexadecimals.
.1fd8	90 02		bcc $1fdc			bcc 	_I32NotHex
.1fda	69 06		adc #$06			adc 	#7-1
.1fdc					_I32NotHex:
.1fdc	18		clc				clc 								; make it ASCII
.1fdd	69 30		adc #$30			adc 	#48
.1fdf	20 e3 1f	jsr $1fe3			jsr 	MI32WriteCharacter 			; write the character out
.1fe2	60		rts				rts 								; and exit.
.1fe3					MI32WriteCharacter:
.1fe3	ee f7 0a	inc $0af7			inc 	MCharCount 					; bump count (space for leading count)
.1fe6	ac f7 0a	ldy $0af7			ldy 	MCharCount 					; get position
.1fe9	91 04		sta ($04),y			sta 	(temp0),y 					; write out with trailing 0
.1feb	c8		iny				iny
.1fec	a9 00		lda #$00			lda 	#0
.1fee	91 04		sta ($04),y			sta 	(temp0),y
.1ff0	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32unary.asm

>0af8					MSeed32:	.fill 	4							; random number seed.
.1ff1					MInt32Absolute:
.1ff1	b5 60		lda $60,x			lda 	esInt3,x 					; use negate code if -ve.
.1ff3	30 01		bmi $1ff6			bmi 	MInt32Negate
.1ff5	60		rts				rts
.1ff6					MInt32Negate:
.1ff6	38		sec				sec
.1ff7	a9 00		lda #$00			lda 	#0
.1ff9	f5 48		sbc $48,x			sbc 	esInt0,x
.1ffb	95 48		sta $48,x			sta 	esInt0,x
.1ffd	a9 00		lda #$00			lda 	#0
.1fff	f5 50		sbc $50,x			sbc 	esInt1,x
.2001	95 50		sta $50,x			sta 	esInt1,x
.2003	a9 00		lda #$00			lda 	#0
.2005	f5 58		sbc $58,x			sbc 	esInt2,x
.2007	95 58		sta $58,x			sta 	esInt2,x
.2009	a9 00		lda #$00			lda 	#0
.200b	f5 60		sbc $60,x			sbc 	esInt3,x
.200d	95 60		sta $60,x			sta 	esInt3,x
.200f	60		rts				rts
.2010					MInt32Not:
.2010	b5 48		lda $48,x			lda 	esInt0,x
.2012	49 ff		eor #$ff			eor 	#$FF
.2014	95 48		sta $48,x			sta 	esInt0,x
.2016	b5 50		lda $50,x			lda 	esInt1,x
.2018	49 ff		eor #$ff			eor 	#$FF
.201a	95 50		sta $50,x			sta 	esInt1,x
.201c	b5 58		lda $58,x			lda 	esInt2,x
.201e	49 ff		eor #$ff			eor 	#$FF
.2020	95 58		sta $58,x			sta 	esInt2,x
.2022	b5 60		lda $60,x			lda 	esInt3,x
.2024	49 ff		eor #$ff			eor 	#$FF
.2026	95 60		sta $60,x			sta 	esInt3,x
.2028	60		rts				rts
.2029					MInt32Sign:
.2029	b5 60		lda $60,x			lda 	esInt3,x					; look at MSB
.202b	30 0b		bmi $2038			bmi 	MInt32True 					; if set return -1 (true)
.202d	20 63 20	jsr $2063			jsr 	MInt32Zero 					; is it zero ?
.2030	f0 0a		beq $203c			beq 	MInt32False 					; if zero return 0 (false)
.2032	20 3c 20	jsr $203c			jsr 	MInt32False 					; > 0 return 1
.2035	f6 48		inc $48,x			inc 	esInt0,x
.2037	60		rts				rts
.2038					MInt32True:
.2038	a9 ff		lda #$ff			lda 	#$FF 						; set to $FFFFFFFF
.203a	d0 02		bne $203e			bne 	MInt32WriteAll
.203c					MInt32False:
.203c	a9 00		lda #$00			lda 	#0
.203e					MInt32WriteAll:
.203e	95 48		sta $48,x			sta 	esInt0,x
.2040					MInt32Write123:
.2040	95 50		sta $50,x			sta 	esInt1,x
.2042	95 58		sta $58,x			sta 	esInt2,x
.2044	95 60		sta $60,x			sta 	esInt3,x
.2046	a9 00		lda #$00			lda 	#$00						; and make it an integer
.2048	95 40		sta $40,x			sta 	esType,x
.204a	60		rts				rts
.204b					MInt32Set8Bit:
.204b	95 48		sta $48,x			sta 	esInt0,x
.204d	a9 00		lda #$00			lda 	#0
.204f	f0 ef		beq $2040			beq		MInt32Write123
.2051					MInt32ShiftLeft:
.2051	16 48		asl $48,x			asl 	esInt0,x
.2053	36 50		rol $50,x			rol	 	esInt1,x
.2055	36 58		rol $58,x			rol	 	esInt2,x
.2057	36 60		rol $60,x			rol	 	esInt3,x
.2059	60		rts				rts
.205a					MInt32ShiftRight:
.205a	56 60		lsr $60,x			lsr 	esInt3,x
.205c	76 58		ror $58,x			ror 	esInt2,x
.205e	76 50		ror $50,x			ror 	esInt1,x
.2060	76 48		ror $48,x			ror 	esInt0,x
.2062	60		rts				rts
.2063					MInt32Zero:
.2063	b5 48		lda $48,x			lda 	esInt0,x
.2065	15 50		ora $50,x			ora 	esInt1,x
.2067	15 58		ora $58,x			ora 	esInt2,x
.2069	15 60		ora $60,x			ora 	esInt3,x
.206b	60		rts				rts
.206c					MInt32Random:
.206c	98		tya				tya
.206d	48		pha				pha
.206e	a0 07		ldy #$07			ldy 	#7
.2070	ad f8 0a	lda $0af8			lda 	MSeed32+0
.2073	d0 03		bne $2078			bne 	_Random1
.2075	a8		tay				tay
.2076	a9 aa		lda #$aa			lda		#$AA
.2078					_Random1:
.2078	0a		asl a				asl 	a
.2079	2e f9 0a	rol $0af9			rol 	MSeed32+1
.207c	2e fa 0a	rol $0afa			rol 	MSeed32+2
.207f	2e fb 0a	rol $0afb			rol 	MSeed32+3
.2082	90 02		bcc $2086			bcc 	_Random2
.2084	49 c5		eor #$c5			eor 	#$C5
.2086					_Random2:
.2086	88		dey				dey
.2087	d0 ef		bne $2078			bne 	_Random1
.2089	8d f8 0a	sta $0af8			sta 	MSeed32+0
.208c	95 48		sta $48,x			sta 	esInt0,x
.208e	ad f9 0a	lda $0af9			lda 	MSeed32+1
.2091	95 50		sta $50,x			sta 	esInt1,x
.2093	ad fa 0a	lda $0afa			lda 	MSeed32+2
.2096	95 58		sta $58,x			sta 	esInt2,x
.2098	ad fb 0a	lda $0afb			lda 	MSeed32+3
.209b	95 60		sta $60,x			sta 	esInt3,x
.209d	68		pla				pla
.209e	a8		tay				tay
.209f	a9 00		lda #$00			lda 	#0
.20a1	95 40		sta $40,x			sta 	esType,x
.20a3	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/utility/check.asm

.20a4					CheckToken:
.20a4	d1 02		cmp ($02),y			cmp 	(codePtr),y
.20a6	d0 02		bne $20aa			bne 	_CTError
.20a8	c8		iny				iny
.20a9	60		rts				rts
.20aa					_CTError:
.20aa	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.20ac	20 6a 21	jsr $216a		jsr	errorHandler
.20af					CheckRightParen:
.20af	b1 02		lda ($02),y			lda 	(codePtr),y
.20b1	c8		iny				iny
.20b2	c9 c4		cmp #$c4			cmp 	#TKW_RPAREN
.20b4	d0 01		bne $20b7			bne 	_CRPError
.20b6	60		rts				rts
.20b7					_CRPError:
.20b7	a2 09		ldx #$09			ldx 	#ErrorID_MissingRP
.20b9	20 6a 21	jsr $216a		jsr	errorHandler
.20bc					CheckComma:
.20bc	b1 02		lda ($02),y			lda 	(codePtr),y
.20be	c8		iny				iny
.20bf	c9 c6		cmp #$c6			cmp 	#TKW_COMMA
.20c1	d0 01		bne $20c4			bne 	_CCError
.20c3	60		rts				rts
.20c4					_CCError:
.20c4	a2 0a		ldx #$0a			ldx 	#ErrorID_MissingComma
.20c6	20 6a 21	jsr $216a		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/utility/scanner.asm

.270e					ScanForward:
.270e	85 06		sta $06				sta 	temp1 						; save tokens to search in temp1/temp1+1
.2710	86 07		stx $07				stx 	temp1+1
.2712	a9 00		lda #$00			lda 	#0 							; temp2 counts structure levels.
.2714	85 08		sta $08				sta 	temp2
.2716	b1 02		lda ($02),y	_SFLoop:lda 	(codePtr),y 				; look at the next token.
.2718	c8		iny				iny
.2719	a6 08		ldx $08				ldx 	temp2 						; check structure levels are zero.
.271b	d0 08		bne $2725			bne 	_SFNoCheck 					; if so, check token against entered values.
.271d	c5 06		cmp $06				cmp 	temp1
.271f	f0 24		beq $2745			beq 	_SFExit
.2721	c5 07		cmp $07				cmp 	temp1+1
.2723	f0 20		beq $2745			beq 	_SFExit
.2725					_SFNoCheck:
.2725	c9 80		cmp #$80			cmp 	#$80 						; if it is 00-7F (variable/number) just skip it.
.2727	90 ed		bcc $2716			bcc 	_SFLoop
.2729	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; $80-$85 is various specials.
.272b	90 19		bcc $2746			bcc 	_SFSpecials
.272d	c9 99		cmp #$99			cmp 	#TOK_STRUCTST 				; if < structure start then continue
.272f	90 e5		bcc $2716			bcc 	_SFLoop
.2731	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST 				; if >= unary start (after structure) then continue.
.2733	b0 e1		bcs $2716			bcs 	_SFLoop
.2735	aa		tax				tax  								; token in X, and look up the adjuster.
.2736	bd 2d 1a	lda $1a2d,x			lda 	ELBinaryOperatorInfo-TOK_BINARYST,x
.2739	38		sec				sec 								; convert to an offset
.273a	e9 81		sbc #$81			sbc 	#$81
.273c	18		clc				clc 								; add to depth
.273d	65 08		adc $08				adc 	temp2
.273f	85 08		sta $08				sta 	temp2
.2741	10 d3		bpl $2716			bpl 	_SFLoop 					; +ve okay to continue
.2743	30 2a		bmi $276f			bmi 	_SFError 					; if gone -ve then we have a nesting error
.2745	60		rts		_SFExit:rts
.2746					_SFSpecials:
.2746	c9 80		cmp #$80			cmp 	#TOK_EOL 					; $80, advance to next line.
.2748	f0 14		beq $275e			beq 	_SFNextLine
.274a	c9 84		cmp #$84			cmp 	#TOK_FPC					; $84, skip embedded float
.274c	f0 26		beq $2774			beq 	_SFFloatSkip
.274e	c9 85		cmp #$85			cmp 	#TOK_STR 					; $85, skip string
.2750	f0 04		beq $2756			beq 	_SFSkipString
.2752	c8		iny				iny									; $81,$82,$83 shift, so just advance over the shifted
.2753	4c 16 27	jmp $2716			jmp 	_SFLoop 					; token.
.2756					_SFSkipString:
.2756	98		tya				tya
.2757	38		sec				sec
.2758	71 02		adc ($02),y			adc 	(codePtr),y
.275a	a8		tay				tay
.275b	4c 16 27	jmp $2716			jmp 	_SFLoop
.275e					_SFNextLine:
.275e	a0 00		ldy #$00			ldy 	#0 							; get offset
.2760	b1 02		lda ($02),y			lda 	(codePtr),y
.2762	18		clc				clc 								; add to code pointer.
.2763	65 02		adc $02				adc 	codePtr
.2765	85 02		sta $02				sta 	codePtr
.2767	90 02		bcc $276b			bcc		_SFNLNoCarry
.2769	e6 03		inc $03				inc 	codePtr+1
.276b					_SFNLNoCarry:
.276b	b1 02		lda ($02),y			lda 	(codePtr),y 				; reached the end of the program.
.276d	d0 a7		bne $2716			bne		_SFLoop 					; no go round again
.276f					_SFError:
.276f	a2 14		ldx #$14			ldx 	#ErrorID_Struct
.2771	20 6a 21	jsr $216a		jsr	errorHandler
.2774					_SFFloatSkip:
.2774	4c 04 14	jmp $1404			jmp 	Unimplemented

;******  Return to file: main/main.asm


;******  Processing file: main/utility/stack.asm

.0078					rsPointer:
>0078							.fill 	2							; to TOS, which is the current top-token.
.20c9					RSReset:
.20c9	a9 ff		lda #$ff			lda 	#(returnStack+retStackSize-1) & $FF
.20cb	85 78		sta $78				sta 	rsPointer
.20cd	a9 09		lda #$09			lda 	#(returnStack+retStackSize-1) >> 8
.20cf	85 79		sta $79				sta 	1+(rsPointer)
.20d1	a9 ff		lda #$ff			lda 	#$FF 						; put a duff marker on TOS, so nothing will pop
.20d3	8d ff 09	sta $09ff			sta 	returnStack+retStackSize-1
.20d6	60		rts				rts
.20d7					RSClaim:
.20d7	84 0c		sty $0c				sty 	tempShort 					; preserve Y
.20d9	48		pha				pha 								; save marker on stack.
.20da	8a		txa				txa 								; get bytes required.
.20db	38		sec				sec
.20dc	49 ff		eor #$ff			eor 	#$FF 						; add to rsPointer using 2's complement.
.20de	65 78		adc $78				adc 	rsPointer
.20e0	85 78		sta $78				sta 	rsPointer
.20e2	a5 79		lda $79				lda 	rsPointer+1
.20e4	69 ff		adc #$ff			adc 	#$FF
.20e6	85 79		sta $79				sta 	rsPointer+1
.20e8	c9 08		cmp #$08			cmp 	#returnStack>>8 			; overflow. underflow actually :)
.20ea	90 08		bcc $20f4			bcc 	_RSCOverflow
.20ec	68		pla				pla 								; get marker back
.20ed	a0 00		ldy #$00			ldy 	#0 							; write marker out.
.20ef	91 78		sta ($78),y			sta 	(rsPointer),y
.20f1	a4 0c		ldy $0c				ldy 	tempShort 					; restore Y and exit
.20f3	60		rts				rts
.20f4					_RSCOverflow:
.20f4	a2 16		ldx #$16			ldx 	#ErrorID_RetStack
.20f6	20 6a 21	jsr $216a		jsr	errorHandler
.20f9					RSFree:
.20f9	18		clc				clc
.20fa	65 78		adc $78				adc 	rsPointer
.20fc	85 78		sta $78				sta 	rsPointer
.20fe	90 02		bcc $2102			bcc 	_RSFExit
.2100	e6 79		inc $79				inc 	rsPointer+1
.2102					_RSFExit:
.2102	60		rts				rts
.2103					RSSavePosition:
.2103	84 0c		sty $0c				sty 	tempShort 					; save Y position
.2105	a8		tay				tay 								; this is where we write it.
.2106	a5 02		lda $02				lda 	codePtr 					; write codePointer out
.2108	91 78		sta ($78),y			sta 	(rsPointer),y
.210a	c8		iny				iny
.210b	a5 03		lda $03				lda 	codePtr+1
.210d	91 78		sta ($78),y			sta 	(rsPointer),y
.210f	c8		iny				iny
.2110	a5 0c		lda $0c				lda 	tempShort 					; write the Y position out.
.2112	91 78		sta ($78),y			sta 	(rsPointer),y
.2114	a8		tay				tay 								; fix Y back again to original value
.2115	60		rts				rts
.2116					RSLoadPosition:
.2116	a8		tay				tay
.2117	b1 78		lda ($78),y			lda 	(rsPointer),y 				; read codePointer back
.2119	85 02		sta $02				sta 	codePtr
.211b	c8		iny				iny
.211c	b1 78		lda ($78),y			lda 	(rsPointer),y
.211e	85 03		sta $03				sta 	codePtr+1
.2120	c8		iny				iny
.2121	b1 78		lda ($78),y			lda 	(rsPointer),y 				; and the offset
.2123	a8		tay				tay 								; to Y
.2124	60		rts				rts

;******  Return to file: main/main.asm

.2125					mainHandler:
.2125	7c 28 21	jmp ($2128,x)			jmp 	(mainVectors,x)
.2128					mainVectors:
>2128	60 1a					.word LinkEvaluate         ; index 0
>212a	66 1a					.word LinkEvaluateInteger  ; index 2
>212c	6c 1a					.word LinkEvaluateSmallInt ; index 4

;******  Return to file: basic.asm

.212e					section_end_main:
.212e					section_start_assembler:

;******  Processing file: assembler/assembler.asm

.212e					assemblerHandler:
.212e	7c 31 21	jmp ($2131,x)			jmp 	(assemblerVectors,x)
.2131					assemblerVectors:

;******  Return to file: basic.asm

.2131					section_end_assembler:
.2131					section_start_device:

;******  Processing file: device/device.asm


;******  Processing file: device/option_x16/x16io.asm

.2131					IONewLine:
.2131	48		pha				pha
.2132	a9 0d		lda #$0d			lda 	#13
.2134	20 41 21	jsr $2141			jsr 	IOPrintChar
.2137	68		pla				pla
.2138	60		rts				rts
.2139					IOTab:
.2139	48		pha				pha
.213a	a9 20		lda #$20			lda 	#32
.213c	20 41 21	jsr $2141			jsr 	IOPrintChar
.213f	68		pla				pla
.2140	60		rts				rts
.2141					IOPrintChar:
.2141	aa		tax				tax
.2142	5a		phy				phy
.2143	8a		txa				txa
.2144	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.2147	7a		ply				ply
.2148	60		rts				rts
.2149					IOInkey:
.2149	98		tya				tya
.214a	48		pha				pha
.214b	20 e4 ff	jsr $ffe4			jsr 	$FFE4
.214e	85 0c		sta $0c				sta 	tempShort
.2150	68		pla				pla
.2151	a8		tay				tay
.2152	a5 0c		lda $0c				lda 	tempShort
.2154	60		rts				rts

;******  Return to file: device/device.asm


;******  Processing file: device/option_x16/x16timer.asm

.2155					IOReadTimer:
.2155	20 de ff	jsr $ffde			jsr 	$FFDE
.2158	48		pha				pha
.2159	8a		txa				txa
.215a	a8		tay				tay
.215b	68		pla				pla
.215c	60		rts				rts

;******  Return to file: device/device.asm

.215d					deviceHandler:
.215d	7c 60 21	jmp ($2160,x)			jmp 	(deviceVectors,x)
.2160					deviceVectors:
>2160	31 21					.word IONewLine            ; index 0
>2162	49 21					.word IOInkey              ; index 2
>2164	41 21					.word IOPrintChar          ; index 4
>2166	39 21					.word IOTab                ; index 6
>2168	55 21					.word IOReadTimer          ; index 8

;******  Return to file: basic.asm

.216a					section_end_device:
.216a					section_start_error:

;******  Processing file: error/error.asm


;******  Processing file: error/errorhandler.asm

.216a					ErrorHandler:
.216a	a9 ee		lda #$ee			lda 	#$EE
.216c	a8		tay				tay
>216d	db						.byte 	$DB
.216e	4c 6e 21	jmp $216e	_EHHalt:jmp 	_EHHalt

;******  Return to file: error/error.asm


;******  Return to file: basic.asm

.2171					section_end_error:
.2171					section_start_extension:

;******  Processing file: extension/extension.asm


;******  Processing file: extension/extensionhandler.asm

.2171					ExtensionHandler:
.2171	b1 02		lda ($02),y			lda 	(codePtr),y
.2173	c8		iny				iny
.2174	0a		asl a				asl 	a
.2175	aa		tax				tax
.2176	7c 6b 27	jmp ($276b,x)			jmp 	(Group2Vectors-12,X)

;******  Processing file: extension/../generated/tokenvectors2.inc

.2777					Group2Vectors:
>2777	79 21					.word	Command_VPoke            ; $86 vpoke
>2779	7c 21					.word	Command_VDoke            ; $87 vdoke

;******  Return to file: extension/extensionhandler.asm


;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/vpeekpoke.asm

.2179					Command_VPoke:
.2179	38		sec				sec 						; one byte , CS
.217a	b0 01		bcs $217d			bcs 	CmdVideoWrite
.217c					Command_VDoke:
.217c	18		clc				clc 						; two bytes, CC
.217d					CmdVideoWrite:
.217d	08		php				php
.217e	a2 00		ldx #$00			ldx 	#0  				; get address into levels 0,1
.2180	20 45 1a	jsr $1a45			jsr 	EvaluateInteger
.2183	20 bc 20	jsr $20bc			jsr 	CheckComma
.2186	e8		inx				inx
.2187	20 45 1a	jsr $1a45			jsr 	EvaluateInteger
.218a	b5 58		lda $58,x			lda 	esInt2,x 			; check range of address, data to $FFFF
.218c	29 01		and #$01			and 	#1
.218e	15 60		ora $60,x			ora 	esInt3,x
.2190	15 59		ora $59,x			ora 	esInt2+1,x
.2192	15 61		ora $61,x			ora 	esInt3+1,x
.2194	d0 21		bne $21b7			bne 	_CVWValue
.2196	a5 48		lda $48				lda 	esInt0				; set address up
.2198	8d 20 9f	sta $9f20			sta 	$9F20
.219b	a5 50		lda $50				lda 	esInt1
.219d	8d 21 9f	sta $9f21			sta	 	$9F21
.21a0	a5 58		lda $58				lda 	esInt2
.21a2	29 01		and #$01			and 	#1
.21a4	09 10		ora #$10			ora 	#$10 				; step 1.
.21a6	8d 22 9f	sta $9f22			sta 	$9F22
.21a9	a5 49		lda $49				lda 	esInt0+1 			; get MSB of write value
.21ab	8d 23 9f	sta $9f23			sta 	$9F23
.21ae	28		plp				plp 						; if it was Poke then exit
.21af	b0 05		bcs $21b6			bcs 	_CVWExit
.21b1	a5 51		lda $51				lda 	esInt1+1 			; doke, write the MSB.
.21b3	8d 23 9f	sta $9f23			sta 	$9F23
.21b6					_CVWExit:
.21b6	60		rts				rts
.21b7					_CVWValue:
.21b7	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.21b9	20 6a 21	jsr $216a		jsr	errorHandler

;******  Return to file: extension/extension.asm


;******  Return to file: basic.asm

.21bc					section_end_extension:
.21bc					section_start_floatingpoint:

;******  Processing file: floatingpoint/floatingpoint.asm

.21bc					floatingpointHandler:
.21bc	a2 03		ldx #$03			ldx 	#ErrorID_NoModule
.21be	20 6a 21	jsr $216a		jsr	errorHandler

;******  Return to file: basic.asm

.21c1					section_end_floatingpoint:
.21c1					section_start_interaction:

;******  Processing file: interaction/interaction.asm

.21c1					interactionHandler:
.21c1	7c c4 21	jmp ($21c4,x)			jmp 	(interactionVectors,x)
.21c4					interactionVectors:

;******  Return to file: basic.asm

.21c4					section_end_interaction:
.21c4					section_start_string:

;******  Processing file: string/string.asm


;******  Processing file: string/chr.asm

.21c4					StringChrs:
.21c4	aa		tax				tax 								; set up stack
.21c5	a9 02		lda #$02			lda 	#2
.21c7	20 7e 22	jsr $227e			jsr 	AllocateSoftString
.21ca	98		tya				tya
.21cb	20 a4 22	jsr $22a4			jsr 	WriteSoftString
.21ce	20 d3 21	jsr $21d3			jsr 	ReturnSoftString
.21d1	8a		txa				txa
.21d2	60		rts				rts
.21d3					ReturnSoftString:
.21d3	a5 7a		lda $7a				lda 	softMemAlloc
.21d5	95 48		sta $48,x			sta 	esInt0,x
.21d7	a5 7b		lda $7b				lda 	softMemAlloc+1
.21d9	95 50		sta $50,x			sta 	esInt1,x
.21db	a9 00		lda #$00			lda 	#0
.21dd	95 58		sta $58,x			sta 	esInt2,x
.21df	95 60		sta $60,x			sta 	esInt3,x
.21e1	a9 40		lda #$40			lda 	#$40
.21e3	95 40		sta $40,x			sta 	esType,x
.21e5	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/compare.asm

.21e6					STRCompare:
.21e6	48		pha				pha 								; save A
.21e7	aa		tax				tax 								; put stack pos in X
.21e8	98		tya				tya
.21e9	48		pha				pha
.21ea	20 1e 22	jsr $221e			jsr 	CopyStringPair
.21ed	a0 00		ldy #$00			ldy 	#0 							; get the smaller of the two string sizes.
.21ef	b1 04		lda ($04),y			lda 	(temp0),y
.21f1	d1 06		cmp ($06),y			cmp 	(temp1),y
.21f3	90 02		bcc $21f7			bcc 	_SCNotSmaller
.21f5	b1 06		lda ($06),y			lda 	(temp1),y
.21f7					_SCNotSmaller:
.21f7	aa		tax				tax 								; put that in X. We compare this many chars first.
.21f8					_SCCompareLoop:
.21f8	e0 00		cpx #$00			cpx 	#0 							; if compared all the smaller, then it is the shorter
.21fa	f0 0c		beq $2208			beq 	_SCSameToEndShortest 		; one that is the smallest if they are different lengths.
.21fc	ca		dex				dex 								; decrement chars to compare.
.21fd	c8		iny				iny 								; move to next character
.21fe	38		sec				sec 								; calculate s1[y]-s2[y]
.21ff	b1 04		lda ($04),y			lda 	(temp0),y
.2201	f1 06		sbc ($06),y			sbc 	(temp1),y
.2203	d0 0a		bne $220f			bne 	_SCReturnResult 			; if different return sign of A
.2205	4c f8 21	jmp $21f8			jmp 	_SCCompareLoop
.2208					_SCSameToEndShortest
.2208	a0 00		ldy #$00			ldy 	#0 							; compare len(s1) - len(s2)
.220a	38		sec				sec
.220b	b1 04		lda ($04),y			lda 	(temp0),y
.220d	f1 06		sbc ($06),y			sbc 	(temp1),y
.220f					_SCReturnResult:
.220f	08		php				php 								; set return to zero preserving PSW.
.2210	a2 00		ldx #$00			ldx 	#0
.2212	28		plp				plp
.2213	f0 05		beq $221a			beq 	_SCExit 					; two values equal, then exit
.2215	ca		dex				dex 								; X = $FF
.2216	90 02		bcc $221a			bcc 	_SCExit 					; if 1st < 2nd then -1
.2218	a2 01		ldx #$01			ldx 	#1 							; X = $01 if greater
.221a					_SCExit:
.221a	68		pla				pla
.221b	a8		tay				tay
.221c	68		pla				pla
.221d	60		rts				rts
.221e					CopyStringPair:
.221e	b5 49		lda $49,x			lda 	esInt0+1,x
.2220	85 06		sta $06				sta 	temp1
.2222	b5 51		lda $51,x			lda 	esInt1+1,x
.2224	85 07		sta $07				sta 	temp1+1
.2226					CopyStringTop:
.2226	b5 48		lda $48,x			lda 	esInt0,x
.2228	85 04		sta $04				sta 	temp0
.222a	b5 50		lda $50,x			lda 	esInt1,x
.222c	85 05		sta $05				sta 	temp0+1
.222e	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/concat.asm

.222f					StringConcat:
.222f	aa		tax				tax									; stack pos in X
.2230	98		tya				tya
.2231	48		pha				pha
.2232	20 1e 22	jsr $221e			jsr 	CopyStringPair 				; temp0 and temp1 point to strings to concat.
.2235	38		sec				sec 								; calculate alloc strings. lengths added + 1 for size.
.2236	a0 00		ldy #$00			ldy 	#0
.2238	b1 04		lda ($04),y			lda 	(temp0),y
.223a	71 06		adc ($06),y			adc 	(temp1),y
.223c	b0 1c		bcs $225a			bcs 	_SCError 					; just too many characters here.
.223e	c9 fc		cmp #$fc			cmp 	#MaxStringSize
.2240	b0 18		bcs $225a			bcs 	_SCError
.2242	20 7e 22	jsr $227e			jsr 	AllocateSoftString 			; allocate soft string memory, set pointer.
.2245	20 75 22	jsr $2275			jsr 	CopySoftToStack 			; copy that to the stack.
.2248	20 5f 22	jsr $225f			jsr 	SCCopyTemp0 				; copy temp0
.224b	a5 06		lda $06				lda 	temp1 						; copy temp1 to temp0
.224d	85 04		sta $04				sta 	temp0
.224f	a5 07		lda $07				lda 	temp1+1
.2251	85 05		sta $05				sta 	temp0+1
.2253	20 5f 22	jsr $225f			jsr 	SCCopyTemp0 				; copy temp0 e.g. what was temp1.
.2256	68		pla				pla
.2257	a8		tay				tay
.2258	8a		txa				txa 								; and A
.2259	60		rts				rts
.225a					_SCError:
.225a	a2 0d		ldx #$0d			ldx 	#ErrorID_StrLen
.225c	20 6a 21	jsr $216a		jsr	errorHandler
.225f					SCCopyTemp0:
.225f	a0 00		ldy #$00			ldy 	#0 							; put count in temp2
.2261	b1 04		lda ($04),y			lda 	(temp0),y
.2263	85 08		sta $08				sta 	temp2
.2265					_SCCopyLoop:
.2265	a5 08		lda $08				lda 	temp2 						; done the lot
.2267	f0 0b		beq $2274			beq 	_SCCopyExit
.2269	c6 08		dec $08				dec 	temp2
.226b	c8		iny				iny 								; get next char
.226c	b1 04		lda ($04),y			lda 	(temp0),y
.226e	20 a4 22	jsr $22a4			jsr 	WriteSoftString 			; write to soft string.
.2271	4c 65 22	jmp $2265			jmp 	_SCCopyLoop
.2274					_SCCopyExit:
.2274	60		rts				rts
.2275					CopySoftToStack:
.2275	a5 7a		lda $7a				lda 	SoftMemAlloc 				; copy the memory allocation pointer to the stack.
.2277	95 48		sta $48,x			sta 	esInt0,x 					; type is already string.
.2279	a5 7b		lda $7b				lda 	SoftMemAlloc+1
.227b	95 50		sta $50,x			sta 	esInt1,x
.227d	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/memory.asm

.007a					softMemAlloc:
>007a							.fill 	2  							; if MSB is zero needs resetting on allocation.
.227e					AllocateSoftString:
.227e	85 0c		sta $0c				sta 	tempShort 					; save count
.2280	98		tya				tya
.2281	48		pha				pha
.2282	a5 7b		lda $7b				lda 	softMemAlloc+1 				; if the high byte is zero, it needs allocating.
.2284	d0 09		bne $228f			bne 	_ASSDone
.2286	a5 0d		lda $0d				lda 	highMemory 					; reset the soft memory alloc pointer.
.2288	85 7a		sta $7a				sta 	softMemAlloc 				; to speed up slightly, we only reset this when we first need it
.228a	a4 0e		ldy $0e				ldy 	highMemory+1 				; but it needs to be reset before each command.
.228c	88		dey				dey
.228d	84 7b		sty $7b				sty 	softMemAlloc+1
.228f					_ASSDone:
.228f	38		sec				sec 								; allocate downwards enough memory
.2290	a5 7a		lda $7a				lda 	softMemAlloc
.2292	e5 0c		sbc $0c				sbc 	tempShort
.2294	85 7a		sta $7a				sta 	softMemAlloc
.2296	a5 7b		lda $7b				lda 	softMemAlloc+1
.2298	e9 00		sbc #$00			sbc 	#0
.229a	85 7b		sta $7b				sta 	softMemAlloc+1
.229c	a9 00		lda #$00			lda 	#0 							; empty that string, set the length = 0.
.229e	a8		tay				tay
.229f	91 7a		sta ($7a),y			sta 	(softMemAlloc),y
.22a1	68		pla				pla
.22a2	a8		tay				tay
.22a3	60		rts				rts
.22a4					WriteSoftString:
.22a4	84 0c		sty $0c				sty 	tempShort 					; save Y
.22a6	48		pha				pha
.22a7	a0 00		ldy #$00			ldy 	#0 							; get and bump length
.22a9	b1 7a		lda ($7a),y			lda 	(softMemAlloc),y
.22ab	18		clc				clc
.22ac	69 01		adc #$01			adc 	#1
.22ae	91 7a		sta ($7a),y			sta 	(softMemAlloc),y
.22b0	a8		tay				tay 								; pointer in Y
.22b1	68		pla				pla 								; get char and write.
.22b2	91 7a		sta ($7a),y			sta 	(softMemAlloc),y
.22b4	a4 0c		ldy $0c				ldy 	tempShort 					; restore Y and exit.
.22b6	60		rts				rts
.22b7					StrClone:
.22b7	aa		tax				tax 								; set up stack.
.22b8	98		tya				tya
.22b9	48		pha				pha
.22ba	a0 00		ldy #$00			ldy 	#0 							; get length, add 1 for length
.22bc	b1 04		lda ($04),y			lda 	(temp0),y
.22be	18		clc				clc
.22bf	69 01		adc #$01			adc 	#1
.22c1	20 7e 22	jsr $227e			jsr 	AllocateSoftString 			; allocate soft memory
.22c4	a5 7a		lda $7a				lda 	softMemAlloc 				; copy that address to TOS
.22c6	95 48		sta $48,x			sta 	esInt0,x
.22c8	a5 7b		lda $7b				lda 	softMemAlloc+1
.22ca	95 50		sta $50,x			sta 	esInt1,x
.22cc	a9 00		lda #$00			lda 	#0
.22ce	95 58		sta $58,x			sta 	esInt2,x
.22d0	95 60		sta $60,x			sta 	esInt3,x
.22d2	a9 40		lda #$40			lda 	#$40 						; set type to string.
.22d4	95 40		sta $40,x			sta 	esType,x
.22d6	20 5f 22	jsr $225f			jsr 	SCCopyTemp0 				; copy temp0 string to soft memory copy (concat.asm)
.22d9	68		pla				pla
.22da	a8		tay				tay
.22db	8a		txa				txa
.22dc	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/substring.asm

.22dd					StringSubstring:
.22dd	48		pha				pha
.22de	aa		tax				tax 								; access stack.
.22df	98		tya				tya
.22e0	48		pha				pha
.22e1	20 26 22	jsr $2226			jsr 	CopyStringTop 				; point temp0 to the string.
.22e4	a0 00		ldy #$00			ldy 	#0 							; get length.
.22e6	b1 04		lda ($04),y			lda 	(temp0),Y
.22e8	85 06		sta $06				sta 	temp1
.22ea	b5 49		lda $49,x			lda 	esInt0+1,x 					; get the initial offset
.22ec	c5 06		cmp $06				cmp 	temp1 						;
.22ee	f0 02		beq $22f2			beq 	_SSBOkay
.22f0	b0 2a		bcs $231c			bcs 	_SSBReturnNull
.22f2					_SSBOkay:
.22f2	a5 06		lda $06				lda 	temp1 						; get the total length +1
.22f4	18		clc				clc
.22f5	69 01		adc #$01			adc 	#1
.22f7	38		sec				sec
.22f8	f5 49		sbc $49,x			sbc 	esInt0+1,x 					; the anything >= this is bad.
.22fa	d5 4a		cmp $4a,x			cmp 	esInt0+2,x  				; check bad >= required
.22fc	90 02		bcc $2300			bcc		_SSBTrunc
.22fe	b5 4a		lda $4a,x			lda 	esInt0+2,x
.2300					_SSBTrunc:
.2300	85 07		sta $07				sta 	temp1+1 					; characters to copy.
.2302	18		clc				clc
.2303	69 01		adc #$01			adc 	#1 							; add 1
.2305	20 7e 22	jsr $227e			jsr 	AllocateSoftString 			; allocate soft string memory, set pointer.
.2308	20 75 22	jsr $2275			jsr 	CopySoftToStack 			; copy that to the stack.
.230b	b4 49		ldy $49,x			ldy 	esInt0+1,x 					; get initial position of char to copy
.230d					_SSBCopyLoop:
.230d	a5 07		lda $07				lda 	temp1+1 					; done them all
.230f	f0 0e		beq $231f			beq 	_SSBExit
.2311	c6 07		dec $07				dec 	temp1+1
.2313	b1 04		lda ($04),y			lda 	(temp0),y 					; get and write character
.2315	20 a4 22	jsr $22a4			jsr 	WriteSoftString
.2318	c8		iny				iny
.2319	4c 0d 23	jmp $230d			jmp 	_SSBCopyLoop
.231c					_SSBReturnNull:
.231c	20 23 23	jsr $2323			jsr 	ReturnNull
.231f					_SSBExit:
.231f	68		pla				pla
.2320	a8		tay				tay
.2321	68		pla				pla
.2322	60		rts				rts
.2323					ReturnNull:
.2323	a9 00		lda #$00			lda 	#0 							; clear null string
.2325	8d cc 0a	sta $0acc			sta 	NullString
.2328	a9 cc		lda #$cc			lda 	#NullString & $FF 			; set a pointer to it
.232a	95 48		sta $48,x			sta 	esInt0,x
.232c	a9 0a		lda #$0a			lda 	#NullString >> 8
.232e	95 50		sta $50,x			sta 	esInt1,x
.2330	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/write.asm

.0afc					srcStrLen:
>0afc							.fill 	1
.2331					StringWrite:
.2331	aa		tax				tax
.2332	48		pha				pha
.2333	98		tya				tya
.2334	48		pha				pha
.2335	20 5c 23	jsr $235c			jsr 	CheckOverwriteCurrent
.2338	b0 0d		bcs $2347			bcs		_SWCopyCurrent
.233a	20 9a 23	jsr $239a			jsr 	RequiresConcretion
.233d	90 0e		bcc $234d			bcc 	_SWWriteReference
.233f	20 fd 23	jsr $23fd			jsr 	CheckSpecialConcretion
.2342	b0 09		bcs $234d			bcs 	_SWWriteReference
.2344	20 ae 23	jsr $23ae			jsr 	AllocateHardMemory
.2347					_SWCopyCurrent:
.2347	20 e1 23	jsr $23e1			jsr 	CopyStringToHardMemory
.234a	4c 58 23	jmp $2358			jmp 	_SWExit
.234d					_SWWriteReference
.234d	a0 00		ldy #$00			ldy 	#0
.234f	a5 04		lda $04				lda 	temp0
.2351	91 06		sta ($06),y			sta 	(temp1),y
.2353	c8		iny				iny
.2354	a5 05		lda $05				lda 	temp0+1
.2356	91 06		sta ($06),y			sta 	(temp1),y
.2358					_SWExit:
.2358	68		pla				pla
.2359	a8		tay				tay
.235a	68		pla				pla
.235b	60		rts				rts
.235c					CheckOverwriteCurrent:
.235c	a0 00		ldy #$00			ldy 	#0 						; get address of string being written to temp0
.235e	b5 51		lda $51,x			lda 	esInt1+1,x
.2360	85 05		sta $05				sta 	temp0+1
.2362	b5 49		lda $49,x			lda 	esInt0+1,x
.2364	85 04		sta $04				sta 	temp0
.2366	b1 04		lda ($04),y			lda 	(temp0),y 				; get length of string being copied.
.2368	8d fc 0a	sta $0afc			sta 	srcStrLen
.236b	b5 48		lda $48,x			lda 	esInt0,x 				; copy where the final address it being written to temp1.
.236d	85 06		sta $06				sta 	temp1 					; e.g. if it is ax$ then temp1 will point to the ax$
.236f	b5 50		lda $50,x			lda 	esInt1,x 				; data record + 5
.2371	85 07		sta $07				sta 	temp1+1
.2373	a0 01		ldy #$01			ldy 	#1 						; get the MSB of the address of string currently stored there.
.2375	b1 06		lda ($06),y			lda 	(temp1),y
.2377	c5 0e		cmp $0e				cmp 	highMemory+1 			; if < high memory then it cannot be something stored
.2379	90 1b		bcc $2396			bcc 	_COCFail 				; in hard memory.
.237b	a0 00		ldy #$00			ldy 	#0 						; copy target address - 1 into temp2
.237d	b1 06		lda ($06),y			lda 	(temp1),y
.237f	e9 01		sbc #$01			sbc 	#1
.2381	85 08		sta $08				sta 	temp2
.2383	c8		iny				iny
.2384	b1 06		lda ($06),y			lda 	(temp1),y
.2386	e9 00		sbc #$00			sbc 	#0
.2388	85 09		sta $09				sta 	temp2+1
.238a	a0 00		ldy #$00			ldy 	#0 						; how large is this physical chunk.
.238c	b1 08		lda ($08),y			lda 	(temp2),y
.238e	38		sec				sec  							; maximum character capacity.
.238f	e9 02		sbc #$02			sbc 	#2
.2391	cd fc 0a	cmp $0afc			cmp 	srcStrLen 				; if >= the required length
.2394	b0 02		bcs $2398			bcs 	_COCCanReuse
.2396					_COCFail:
.2396	18		clc				clc
.2397	60		rts				rts
.2398					_COCCanReuse:
.2398	38		sec				sec
.2399	60		rts				rts
.239a					RequiresConcretion:
.239a	a5 05		lda $05				lda 	temp0+1 				; get MSB of address of string to be written
.239c	c5 0e		cmp $0e				cmp 	highMemory+1 			; if >= high memory it is concreted
.239e	b0 0a		bcs $23aa			bcs 	_RCSucceed 				; so it needs concreting again - duplication.
.23a0	a5 7b		lda $7b				lda 	softMemAlloc+1 			; have we allocated any soft memory yet ?
.23a2	f0 08		beq $23ac			beq 	_RCFail 				; if not, this cannot be soft memory.
.23a4	a5 05		lda $05				lda 	temp0+1 				; get MSB of address of string to be written
.23a6	c5 7b		cmp $7b				cmp 	softMemAlloc+1 			; if >= soft mem alloc it is either soft
.23a8	90 02		bcc $23ac			bcc 	_RCFail 				; so concreting
.23aa					_RCSucceed:
.23aa	38		sec				sec
.23ab	60		rts				rts
.23ac					_RCFail:
.23ac	18		clc				clc
.23ad	60		rts				rts
.23ae					AllocateHardMemory:
.23ae	98		tya				tya
.23af	48		pha				pha
.23b0	ad fc 0a	lda $0afc			lda 	srcStrLen 				; characters in string
.23b3	69 0a		adc #$0a			adc 	#1+1+8 					; one for hard memory size, one for string size, extra for expansion
.23b5	b0 04		bcs $23bb			bcs 	_AHMSetMax 				; max out that amount.
.23b7	c9 fe		cmp #$fe			cmp 	#MaxStringSize+2
.23b9	90 02		bcc $23bd			bcc 	_AHMIsOkay
.23bb					_AHMSetMax:
.23bb	a9 fe		lda #$fe			lda 	#MaxStringSize+2
.23bd					_AHMIsOkay:
.23bd	48		pha				pha
.23be	49 ff		eor #$ff			eor 	#$FF 					; complement and add to high Memory
.23c0	38		sec				sec  							; and copy result to TOS as target address.
.23c1	65 0d		adc $0d				adc 	highMemory
.23c3	85 0d		sta $0d				sta 	highMemory
.23c5	a5 0e		lda $0e				lda 	highMemory+1
.23c7	69 ff		adc #$ff			adc 	#$FF
.23c9	85 0e		sta $0e				sta 	highMemory+1
.23cb	a0 00		ldy #$00			ldy 	#0 						; Y = 0
.23cd	68		pla				pla 							; get the total size of the storage block
.23ce	91 0d		sta ($0d),y			sta 	(highMemory),y
.23d0	18		clc				clc
.23d1	a5 0d		lda $0d				lda		highMemory 				; point the target address to the byte after this.
.23d3	69 01		adc #$01			adc 	#1
.23d5	91 06		sta ($06),y			sta 	(temp1),y
.23d7	a5 0e		lda $0e				lda 	highMemory+1
.23d9	69 00		adc #$00			adc 	#0
.23db	c8		iny				iny
.23dc	91 06		sta ($06),y			sta 	(temp1),y
.23de	68		pla				pla
.23df	a8		tay				tay
.23e0	60		rts				rts
.23e1					CopyStringToHardMemory:
.23e1	98		tya				tya
.23e2	48		pha				pha
.23e3	a0 00		ldy #$00			ldy 	#0 						; copy target address to temp2
.23e5	b1 06		lda ($06),y			lda 	(temp1),y
.23e7	85 08		sta $08				sta 	temp2
.23e9	c8		iny				iny
.23ea	b1 06		lda ($06),y			lda 	(temp1),y
.23ec	85 09		sta $09				sta 	temp2+1
.23ee	ac fc 0a	ldy $0afc			ldy 	srcStrLen 				; copy this + 1 characters, (length too) hence $FF compare
.23f1					_CSTHMLoop:
.23f1	b1 04		lda ($04),y			lda 	(temp0),y
.23f3	91 08		sta ($08),y			sta 	(temp2),y
.23f5	88		dey				dey
.23f6	c0 ff		cpy #$ff			cpy 	#$FF
.23f8	d0 f7		bne $23f1			bne 	_CSTHMLoop
.23fa	68		pla				pla
.23fb	a8		tay				tay
.23fc	60		rts				rts
.23fd					CheckSpecialConcretion:
.23fd	ad fc 0a	lda $0afc			lda 	srcStrLen 				; check string is null.
.2400	f0 02		beq $2404			beq 	_CSCNullString
.2402	18		clc				clc
.2403	60		rts				rts
.2404					_CSCNullString:
.2404	a9 00		lda #$00			lda 	#0
.2406	8d cc 0a	sta $0acc			sta 	NullString
.2409	a9 cc		lda #$cc			lda 	#(NullString) & $FF
.240b	85 04		sta $04				sta 	temp0
.240d	a9 0a		lda #$0a			lda 	#(NullString) >> 8
.240f	85 05		sta $05				sta 	1+(temp0)
.2411	38		sec				sec
.2412	60		rts				rts

;******  Return to file: string/string.asm

.2413					stringHandler:
.2413	7c 16 24	jmp ($2416,x)			jmp 	(stringVectors,x)
.2416					stringVectors:
>2416	c4 21					.word StringChrs           ; index 0
>2418	b7 22					.word StrClone             ; index 2
>241a	2f 22					.word StringConcat         ; index 4
>241c	e6 21					.word STRCompare           ; index 6
>241e	dd 22					.word StringSubstring      ; index 8
>2420	31 23					.word StringWrite          ; index 10

;******  Return to file: basic.asm

.2422					section_end_string:
.2422					section_start_tokeniser:

;******  Processing file: tokeniser/tokeniser.asm

.2422					tokeniserHandler:
.2422	7c 25 24	jmp ($2425,x)			jmp 	(tokeniserVectors,x)
.2425					tokeniserVectors:

;******  Return to file: basic.asm

.2425					section_end_tokeniser:
.2425					section_start_variable:

;******  Processing file: variable/variable.asm


;******  Processing file: variable/access.asm

.0afd					varHash:
>0afd							.fill	1
.0afe					varType:
>0afe							.fill 	1
.0aff					varEnd:
>0aff							.fill 	1
.007c					hashList:
>007c							.fill 	2
.2425					AccessVariable:
.2425	aa		tax				tax 								; stack in X
.2426	c8		iny				iny
.2427	b1 02		lda ($02),y			lda 	(codePtr),y
.2429	88		dey				dey
.242a	c9 3a		cmp #$3a			cmp 	#TYPE_INT 					; is it one of the end markers ?
.242c	d0 15		bne $2443			bne 	_AVLong
.242e	b1 02		lda ($02),y			lda 	(codePtr),y 				; this is the 6 bit ASCII of A-Z 1-26
.2430	38		sec				sec 	 							; make it 0-25
.2431	e9 01		sbc #$01			sbc 	#1
.2433	0a		asl a				asl 	a 							; x 4 is LSB of address
.2434	0a		asl a				asl 	a
.2435	95 48		sta $48,x			sta 	esInt0,x
.2437	a9 0a		lda #$0a			lda 	#SingleLetterVar >> 8 		; make it an address
.2439	95 50		sta $50,x			sta 	esInt1,x
.243b	a9 80		lda #$80			lda 	#$80 						; type is integer reference.
.243d	95 40		sta $40,x			sta 	esType,x
.243f	c8		iny				iny 								; skip over the variable reference in the code.
.2440	c8		iny				iny
.2441	8a		txa				txa 								; stack in A to return.
.2442	60		rts				rts
.2443					_AVLong:
.2443	8a		txa				txa
.2444	48		pha				pha
.2445	20 83 24	jsr $2483			jsr 	AccessSetup 				; set up the basic stuff.
.2448	20 36 25	jsr $2536			jsr 	FindVariable 				; does the variable exist already
.244b	b0 0e		bcs $245b			bcs 	_AVFound
.244d	ad fe 0a	lda $0afe			lda 	varType 					; is the variable type an array
.2450	4a		lsr a				lsr 	a
.2451	90 05		bcc $2458			bcc 	_AVCanCreate
.2453	a2 15		ldx #$15			ldx 	#ErrorID_noauto
.2455	20 6a 21	jsr $216a		jsr	errorHandler
.2458					_AVCanCreate:
.2458	20 c0 24	jsr $24c0			jsr 	CreateVariable 				; no, create it.
.245b					_AVFound:
.245b	68		pla				pla
.245c	aa		tax				tax
.245d	18		clc				clc 								; copy temp0 (variable record address)
.245e	a5 04		lda $04				lda 	temp0 						; +5 (to point to the data)
.2460	69 05		adc #$05			adc 	#5
.2462	95 48		sta $48,x			sta 	esInt0,x
.2464	a5 05		lda $05				lda 	temp0+1
.2466	69 00		adc #$00			adc 	#0
.2468	95 50		sta $50,x			sta 	esInt1,x
.246a	a9 00		lda #$00			lda 	#0
.246c	95 58		sta $58,x			sta 	esInt2,x
.246e	95 60		sta $60,x			sta 	esInt3,x
.2470	ac fe 0a	ldy $0afe			ldy 	varType 					; get the type ID from the type.
.2473	b9 43 24	lda $2443,y			lda 	_AVTypeTable-$3A,y
.2476	95 40		sta $40,x			sta 	esType,x
.2478	ac ff 0a	ldy $0aff			ldy 	varEnd 						; restore Y
.247b	8a		txa				txa 								; return stack in A and return
.247c	60		rts				rts
.247d					_AVTypeTable:
>247d	80 80						.byte 	$80,$80						; integer
>247f	c0 c0						.byte 	$C0,$C0 					; string
>2481	81 81						.byte 	$81,$81 					; float
.2483					AccessSetup:
.2483	a9 00		lda #$00			lda 	#0 							; zero the hash byte.
.2485	8d fd 0a	sta $0afd			sta 	varHash
.2488	98		tya				tya
.2489	48		pha				pha
.248a	b1 02		lda ($02),y	_ASLoop:lda 	(codePtr),y					; get next identifier character
.248c	c9 3a		cmp #$3a			cmp 	#$3A 						; is it 3A-3F which end all identifiers ?
.248e	b0 0b		bcs $249b			bcs 	_ASComplete
.2490	18		clc				clc 								; add to the hash. Might improve this.
.2491	6d fd 0a	adc $0afd			adc 	varHash
.2494	8d fd 0a	sta $0afd			sta 	varHash
.2497	c8		iny				iny 								; next character
.2498	4c 8a 24	jmp $248a			jmp 	_ASLoop
.249b					_ASComplete:
.249b	8d fe 0a	sta $0afe			sta 	varType 					; save variable type byte
.249e	c8		iny				iny
.249f	8c ff 0a	sty $0aff			sty 	varEnd 						; save the ending position.
.24a2	38		sec				sec 								; convert type byte from $3A-$3F to 0..5
.24a3	e9 3a		sbc #$3a			sbc 	#$3A
.24a5	0a		asl a				asl 	a 							; multiply by hashTableSize (8 in this case)
.24a6	0a		asl a				asl 	a
.24a7	0a		asl a				asl 	a
.24a8	0a		asl a				asl 	a 							; 2 bytes/word
.24a9	85 04		sta $04				sta 	temp0 						; this is the offset to the start of the table.
.24ab	ad fd 0a	lda $0afd			lda 	varHash 					; get hash
.24ae	29 07		and #$07			and 	#(hashTableSize-1)			; force into range
.24b0	0a		asl a				asl  	a 							; x 2 (for word) and CC
.24b1	65 04		adc $04				adc 	temp0 						; now offset from the start of the hash table.
.24b3	69 68		adc #$68			adc 	#hashTables & $FF 			; add to hash table base address
.24b5	85 7c		sta $7c				sta 	hashList
.24b7	a9 0a		lda #$0a			lda 	#hashTables >> 8
.24b9	69 00		adc #$00			adc 	#0
.24bb	85 7d		sta $7d				sta 	hashList+1
.24bd	68		pla				pla
.24be	a8		tay				tay
.24bf	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/create.asm

.24c0					CreateVariable:
.24c0	98		tya				tya 								; push Y on the stack twice.
.24c1	48		pha				pha
.24c2	48		pha				pha
.24c3	ae fe 0a	ldx $0afe			ldx 	varType 					; get var type 0-5
.24c6	bd f6 24	lda $24f6,x			lda		_CVSize-$3A,x 				; the bytes for this new variable.
.24c9	48		pha				pha 								; save length
.24ca	a8		tay				tay 								; put into Y.
.24cb	a5 0f		lda $0f				lda 	lowMemory 					; set low Memory ptr to temp0
.24cd	85 04		sta $04				sta 	temp0
.24cf	a5 10		lda $10				lda 	lowMemory+1
.24d1	85 05		sta $05				sta 	temp0+1
.24d3	68		pla				pla 								; get length
.24d4	20 6b 10	jsr $106b			jsr 	AdvanceLowMemoryByte 		; shift alloc memory forward by the length.
.24d7					_CVClear:
.24d7	88		dey				dey
.24d8	a9 00		lda #$00			lda 	#0
.24da	91 04		sta ($04),y			sta 	(temp0),y
.24dc	c0 04		cpy #$04			cpy 	#4
.24de	d0 f7		bne $24d7			bne 	_CVClear
.24e0	ad fd 0a	lda $0afd			lda 	varHash 					; store hash at offset 4.
.24e3	91 04		sta ($04),y			sta 	(temp0),y
.24e5	68		pla				pla 								; offset, work out where the variable name is.
.24e6	18		clc				clc
.24e7	65 02		adc $02				adc 	codePtr
.24e9	a0 02		ldy #$02			ldy 	#2 							; copy that into slots 2 + 3.
.24eb	91 04		sta ($04),y			sta 	(temp0),y
.24ed	a5 03		lda $03				lda 	codePtr+1
.24ef	69 00		adc #$00			adc 	#0
.24f1	c8		iny				iny
.24f2	91 04		sta ($04),y			sta 	(temp0),y
.24f4	a0 00		ldy #$00			ldy 	#0 							; copy current hash pointer in link
.24f6	b1 7c		lda ($7c),y			lda 	(hashList),y
.24f8	91 04		sta ($04),y			sta 	(temp0),y
.24fa	c8		iny				iny
.24fb	b1 7c		lda ($7c),y			lda 	(hashList),y
.24fd	91 04		sta ($04),y			sta 	(temp0),y
.24ff	a5 05		lda $05				lda 	temp0+1 					; set new link
.2501	91 7c		sta ($7c),y			sta 	(hashList),y
.2503	88		dey				dey
.2504	a5 04		lda $04				lda 	temp0
.2506	91 7c		sta ($7c),y			sta 	(hashList),y
.2508	ad fe 0a	lda $0afe			lda 	varType 					; is it a string ($3C)
.250b	c9 3e		cmp #$3e			cmp 	#$3E
.250d	f0 17		beq $2526			beq 	_CVDefaultFloat0
.250f	c9 3c		cmp #$3c			cmp 	#$3C
.2511	d0 1a		bne $252d			bne 	_CVNoDefaultNull
.2513	a9 00		lda #$00			lda 	#0 							; put a reference to null string as the default value.
.2515	8d cc 0a	sta $0acc			sta 	NullString
.2518	a0 05		ldy #$05			ldy 	#5
.251a	a9 cc		lda #$cc			lda 	#NullString & $FF
.251c	91 04		sta ($04),y			sta 	(temp0),y
.251e	a9 0a		lda #$0a			lda 	#NullString >> 8
.2520	c8		iny				iny
.2521	91 04		sta ($04),y			sta 	(temp0),y
.2523	4c 2d 25	jmp $252d			jmp 	_CVNoDefaultNull
.2526					_CVDefaultFloat0:
.2526	a0 05		ldy #$05			ldy 	#5
.2528	a2 1e		ldx #$1e		ldx	#30
.252a	20 bc 21	jsr $21bc		jsr	floatingpointHandler
.252d					_CVNoDefaultNull:
.252d	68		pla				pla
.252e	a8		tay				tay
.252f	60		rts				rts
>2530	09 09				_CVSize:.byte 	VarHSize+VarISize,VarHSize+VarISize 					; <storage for integer>
>2532	07 07						.byte 	VarHSize+VarSSize,VarHSize+VarSSize 					; <storage for string>
>2534	0b 0b						.byte 	VarHSize+VarFSize,VarHSize+VarFSize 					; <storage for float>

;******  Return to file: variable/variable.asm


;******  Processing file: variable/find.asm

.2536					FindVariable:
.2536	98		tya				tya
.2537	48		pha				pha
.2538	98		tya				tya 								; point temp2 to the actual name.
.2539	18		clc				clc
.253a	65 02		adc $02				adc 	codePtr
.253c	85 08		sta $08				sta 	temp2
.253e	a5 03		lda $03				lda 	codePtr+1
.2540	69 00		adc #$00			adc 	#0
.2542	85 09		sta $09				sta 	temp2+1
.2544	a0 00		ldy #$00			ldy 	#0
.2546	a5 7c		lda $7c				lda 	hashList 					; copy hashlist to temp0
.2548	85 04		sta $04				sta 	temp0
.254a	a5 7d		lda $7d				lda 	hashList+1
.254c	85 05		sta $05				sta 	temp0+1
.254e	a0 01		ldy #$01	_FVNext:ldy 	#1 							; get MSB
.2550	b1 04		lda ($04),y			lda 	(temp0),y
.2552	f0 2c		beq $2580			beq 	_FVFail
.2554	aa		tax				tax
.2555	88		dey				dey		 							; get LSB
.2556	b1 04		lda ($04),y			lda 	(temp0),y
.2558	85 04		sta $04				sta 	temp0 						; update pointer.
.255a	86 05		stx $05				stx 	temp0+1
.255c	a0 04		ldy #$04			ldy 	#4 							; check hashes match
.255e	b1 04		lda ($04),y			lda 	(temp0),y
.2560	cd fd 0a	cmp $0afd			cmp 	varHash
.2563	d0 e9		bne $254e			bne 	_FVNext 					; if not, no point in checking the name.
.2565	88		dey				dey 								; copy name pointer to temp1.
.2566	b1 04		lda ($04),y			lda 	(temp0),y
.2568	85 07		sta $07				sta 	temp1+1
.256a	88		dey				dey
.256b	b1 04		lda ($04),y			lda 	(temp0),y
.256d	85 06		sta $06				sta 	temp1
.256f	a0 00		ldy #$00			ldy 	#0
.2571					_FVCheck:
.2571	b1 06		lda ($06),y			lda 	(temp1),y 					; compare names
.2573	d1 08		cmp ($08),y			cmp 	(temp2),y
.2575	d0 d7		bne $254e			bne 	_FVNext		 				; fail if different.
.2577	c8		iny				iny
.2578	c9 3a		cmp #$3a			cmp 	#$3A 						; until reached the end marker.
.257a	90 f5		bcc $2571			bcc 	_FVCheck
.257c	68		pla				pla
.257d	a8		tay				tay
.257e	38		sec				sec
.257f	60		rts				rts
.2580					_FVFail:
.2580	68		pla				pla
.2581	a8		tay				tay
.2582	18		clc				clc
.2583	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/reset.asm

.2584					HashTableReset:
.2584	a2 60		ldx #$60			ldx 	#6*2*hashTableSize
.2586	a9 00		lda #$00			lda 	#0
.2588					_HTRClear:
.2588	9d 67 0a	sta $0a67,x			sta 	hashTables-1,x
.258b	ca		dex				dex
.258c	d0 fa		bne $2588			bne 	_HTRClear
.258e	60		rts				rts

;******  Return to file: variable/variable.asm

.258f					variableHandler:
.258f	7c 92 25	jmp ($2592,x)			jmp 	(variableVectors,x)
.2592					variableVectors:
>2592	25 24					.word AccessVariable       ; index 0
>2594	84 25					.word HashTableReset       ; index 2

;******  Return to file: basic.asm

.2596					section_end_variable:

;******  End of listing
