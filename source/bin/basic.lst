
; 64tass Turbo Assembler Macro V1.55.2200 listing file
; 64tass -Walias -Wmacro-prefix -Wall -q -c -L ../source/bin/basic.lst -l ../source/bin/basic.lbl -Wall -o ../source/bin/basic.prg basic.asm
; Sun Mar  7 07:00:33 2021

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: basic.asm


;******  Processing file: main/00header/01common.inc


;******  Processing file: main/00header/../../generated/installed.inc

=1					installed_main = 1
=1					installed_variable = 1
=1					installed_assembler = 1
=1					installed_error = 1
=1					installed_extension = 1
=1					installed_string = 1
=1					installed_device = 1
=0					installed_floatingpoint = 0
=1					installed_interaction = 1
=1					installed_tokeniser = 1

;******  Return to file: main/00header/01common.inc

=$1000					CodeStart = $1000
=$800					MemoryStorage = $800
=$02					ZeroPageStorage = $02
=8					StackSize = 8
=512					retStackSize = 512
=8					hashTableSize = 8			; if this changes, the calculation is AccessSetup has to match it.
="G"					markerGOSUB = 'G'
="R"					markerREPEAT = 'R'
="F"					markerFOR = 'F'
="W"					markerWHILE = 'W'
="P"					markerPROC = 'P'
="$"					markerSTRING = '$'
="#"					markerFLOAT = '#'
="%"					markerINT = '%'
=5					VarHSize = 5 								; header (2 link, 2 name, 1 hash)
=5					VarASize = 5 								; array [address,size,byteSize]
=4					VarISize = 4 								; integer (32 bit)
=6					VarFSize = 6 								; float (4 mantissa, 1 exponent 1 sign/zero)
=2					VarSSize = 2 								; address (2 bytes)

;******  Return to file: basic.asm


;******  Processing file: main/00header/02macros.inc


;******  Return to file: basic.asm


;******  Processing file: main/00header/03data.inc

>0002					codePtr:.fill 	2							; (codePtr),y points to code.
>0004					temp0: 	.fill 	2							; working variables.
>0006					temp1: 	.fill 	2
>0008					temp2: 	.fill 	2
>000a					temp3: 	.fill 	2
.000c					tempshort:
>000c							.fill 	1
.000d					highMemory:
>000d							.fill 	2
.000f					lowMemory:
>000f							.fill 	2
>0040					esType:	.fill 	StackSize  					; type byte (see above)
>0048					esInt0:	.fill 	StackSize 					; integer or mantissa
>0050					esInt1:	.fill 	StackSize
>0058					esInt2:	.fill 	StackSize
>0060					esInt3:	.fill 	StackSize
>0068					esExp:	.fill 	StackSize 					; exponent ($80 = 0)
>0070					esZSign:.fill 	StackSize 					; for floating point - sign (bit 7) isZero (bit 6)
=$48					esMant0 = esInt0 							; synonyms.
=$50					esMant1 = esInt1
=$58					esMant2 = esInt2
=$60					esMant3 = esInt3
>0800							.align	256
.0800					returnStack:
>0800							.fill 	retStackSize
>0a00							.align	256
.0a00					SingleLetterVar:
>0a00					 		.fill 	26*4
.0a68					hashTables:
>0a68							.fill 	6*2*hashTableSize
.0ac8					basePage:
>0ac8							.fill 	2
.0aca					endMemory:
>0aca							.fill 	2
.0acc					NullString:
>0acc							.fill 	1							; don't waste memory concreting null strings.
.0acd					convertBuffer:
>0acd							.fill 	35

;******  Processing file: main/00header/../../generated/tokenconst.inc

=$80					TOK_EOL=$80
=$81					TOK_SHIFT1=$81
=$82					TOK_SHIFT2=$82
=$83					TOK_SHIFT3=$83
=$84					TOK_FPC=$84
=$85					TOK_STR=$85
=$86					TOK_BINARYST=$86
=$99					TOK_STRUCTST=$99
=$a4					TOK_UNARYST=$a4
=$c6					TOK_TOKENS=$c6
=$86					TKW_AND                      = $86 ; and
=$87					TKW_OR                       = $87 ; or
=$88					TKW_XOR                      = $88 ; xor
=$89					TKW_GREATEREQUAL             = $89 ; >=
=$8a					TKW_LESSEQUAL                = $8a ; <=
=$8b					TKW_GREATER                  = $8b ; >
=$8c					TKW_LESS                     = $8c ; <
=$8d					TKW_EQUAL                    = $8d ; =
=$8e					TKW_LESSGREATER              = $8e ; <>
=$8f					TKW_PLUS                     = $8f ; +
=$90					TKW_MINUS                    = $90 ; -
=$91					TKW_GREATERGREATER           = $91 ; >>
=$92					TKW_LESSLESS                 = $92 ; <<
=$93					TKW_STAR                     = $93 ; *
=$94					TKW_SLASH                    = $94 ; /
=$95					TKW_MOD                      = $95 ; mod
=$96					TKW_HAT                      = $96 ; ^
=$97					TKW_PLING                    = $97 ; !
=$98					TKW_QMARK                    = $98 ; ?
=$99					TKW_REPEAT                   = $99 ; repeat
=$9a					TKW_WHILE                    = $9a ; while
=$9b					TKW_FOR                      = $9b ; for
=$9c					TKW_IF                       = $9c ; if
=$9d					TKW_DEFPROC                  = $9d ; defproc
=$9e					TKW_UNTIL                    = $9e ; until
=$9f					TKW_WEND                     = $9f ; wend
=$a0					TKW_NEXT                     = $a0 ; next
=$a1					TKW_THEN                     = $a1 ; then
=$a2					TKW_ENDIF                    = $a2 ; endif
=$a3					TKW_ENDPROC                  = $a3 ; endproc
=$a4					TKW_LPAREN                   = $a4 ; (
=$a5					TKW_LENLPAREN                = $a5 ; len(
=$a6					TKW_SGNLPAREN                = $a6 ; sgn(
=$a7					TKW_ABSLPAREN                = $a7 ; abs(
=$a8					TKW_RANDOMLPAREN             = $a8 ; random(
=$a9					TKW_PAGE                     = $a9 ; page
=$aa					TKW_TRUE                     = $aa ; true
=$ab					TKW_FALSE                    = $ab ; false
=$ac					TKW_MINLPAREN                = $ac ; min(
=$ad					TKW_MAXLPAREN                = $ad ; max(
=$ae					TKW_SYSLPAREN                = $ae ; sys(
=$af					TKW_TIMERLPAREN              = $af ; timer(
=$b0					TKW_EVENTLPAREN              = $b0 ; event(
=$b1					TKW_GETLPAREN                = $b1 ; get(
=$b2					TKW_INKEYLPAREN              = $b2 ; inkey(
=$b3					TKW_ALLOCLPAREN              = $b3 ; alloc(
=$b4					TKW_CHRDOLLARLPAREN          = $b4 ; chr$(
=$b5					TKW_LEFTDOLLARLPAREN         = $b5 ; left$(
=$b6					TKW_MIDDOLLARLPAREN          = $b6 ; mid$(
=$b7					TKW_RIGHTDOLLARLPAREN        = $b7 ; right$(
=$b8					TKW_STRDOLLARLPAREN          = $b8 ; str$(
=$b9					TKW_VALLPAREN                = $b9 ; val(
=$ba					TKW_PEEKLPAREN               = $ba ; peek(
=$bb					TKW_DEEKLPAREN               = $bb ; deek(
=$bc					TKW_LEEKLPAREN               = $bc ; leek(
=$bd					TKW_ASCLPAREN                = $bd ; asc(
=$be					TKW_INTLPAREN                = $be ; int(
=$bf					TKW_FLOATLPAREN              = $bf ; float(
=$c0					TKW_ISVALLPAREN              = $c0 ; isval(
=$c1					TKW_UPPERDOLLARLPAREN        = $c1 ; upper$(
=$c2					TKW_LOWERDOLLARLPAREN        = $c2 ; lower$(
=$c3					TKW_AT                       = $c3 ; @
=$c4					TKW_WAVY                     = $c4 ; ~
=$c5					TKW_AMP                      = $c5 ; &
=$c6					TKW_RPAREN                   = $c6 ; )
=$c7					TKW_COLON                    = $c7 ; :
=$c8					TKW_COMMA                    = $c8 ; ,
=$c9					TKW_SEMICOLON                = $c9 ; ;
=$ca					TKW_QUOTE                    = $ca ; '
=$cb					TKW_TO                       = $cb ; to
=$cc					TKW_STEP                     = $cc ; step
=$cd					TKW_PROC                     = $cd ; proc
=$ce					TKW_LOCAL                    = $ce ; local
=$cf					TKW_DIM                      = $cf ; dim
=$d0					TKW_REM                      = $d0 ; rem
=$d1					TKW_LET                      = $d1 ; let
=$d2					TKW_INPUT                    = $d2 ; input
=$d3					TKW_ELSE                     = $d3 ; else
=$d4					TKW_VDU                      = $d4 ; vdu
=$d5					TKW_PRINT                    = $d5 ; print
=$d6					TKW_GOTO                     = $d6 ; goto
=$d7					TKW_GOSUB                    = $d7 ; gosub
=$d8					TKW_RETURN                   = $d8 ; return
=$d9					TKW_DATA                     = $d9 ; data
=$da					TKW_ASSERT                   = $da ; assert
=$db					TKW_POKE                     = $db ; poke
=$dc					TKW_DOKE                     = $dc ; doke
=$dd					TKW_LOKE                     = $dd ; loke
=$de					TKW_INK                      = $de ; ink
=$df					TKW_PAPER                    = $df ; paper
=$e0					TKW_CLS                      = $e0 ; cls
=$e1					TKW_LOCATE                   = $e1 ; locate
=$86					TKW_CLEAR                    = $86 ; clear
=$87					TKW_LOAD                     = $87 ; load
=$88					TKW_SAVE                     = $88 ; save
=$89					TKW_LIST                     = $89 ; list
=$8a					TKW_NEW                      = $8a ; new
=$8b					TKW_RUN                      = $8b ; run
=$8c					TKW_READ                     = $8c ; read
=$8d					TKW_RESTORE                  = $8d ; restore
=$8e					TKW_END                      = $8e ; end
=$8f					TKW_STOP                     = $8f ; stop
=$86					TKW_VPOKE                    = $86 ; vpoke
=$87					TKW_VDOKE                    = $87 ; vdoke
=$86					TKW_VPEEKLPAREN              = $86 ; vpeek(
=$87					TKW_VDEEKLPAREN              = $87 ; vdeek(

;******  Return to file: main/00header/03data.inc

=$3a					TYPE_INT =		($3A) 						; type bytes that end identifier.
=$3b					TYPE_INTARRAY =	($3B)
=$3c					TYPE_STR =		($3C)
=$3d					TYPE_STRARRAY =	($3D)
=$3e					TYPE_FLOAT =	($3E)
=$3f					TYPE_FLOATARRAY=($3F)

;******  Return to file: basic.asm


;******  Processing file: main/imath/intmacros.inc


;******  Return to file: basic.asm


;******  Processing file: main/main.inc


;******  Return to file: basic.asm


;******  Processing file: assembler/assembler.inc


;******  Return to file: basic.asm


;******  Processing file: device/device.inc


;******  Return to file: basic.asm


;******  Processing file: error/error.inc


;******  Return to file: basic.asm


;******  Processing file: error/errorhandler.inc


;******  Processing file: error/../generated/errorid.inc

=1					ErrorID_Missing = 1 ; Feature not Present
=2					ErrorID_Syntax = 2 ; Syntax Error
=3					ErrorID_NoModule = 3 ; Module disabled
=4					ErrorID_Assert = 4 ; Assertion failed
=5					ErrorID_DivZero = 5 ; Divide By Zero
=6					ErrorID_Stop = 6 ; Stop
=7					ErrorID_BadType = 7 ; Type Mismatch
=8					ErrorID_BadValue = 8 ; Illegal Value
=9					ErrorID_MissingRP = 9 ; Missing right bracket
=10					ErrorID_MissingComma = 10 ; Missing comma
=11					ErrorID_NoReference = 11 ; Missing reference
=12					ErrorID_LineNumber = 12 ; Line Number not found
=13					ErrorID_StrLen = 13 ; String too long.
=14					ErrorID_ReturnErr = 14 ; RETURN without GOSUB
=15					ErrorID_UntilErr = 15 ; UNTIL without REPEAT
=16					ErrorID_NextErr = 16 ; NEXT without FOR
=17					ErrorID_WendErr = 17 ; WEND without WHILE
=18					ErrorID_endprocErr = 18 ; ENDPROC without PROC
=19					ErrorID_BadIndex = 19 ; Bad NEXT index
=20					ErrorID_Struct = 20 ; Structures nested wrong
=21					ErrorID_NoAuto = 21 ; Cannot create variable
=22					ErrorID_RetStack = 22 ; Return stack out of space.
=23					ErrorID_NoProc = 23 ; Unknown Procedure
=24					ErrorID_Params = 24 ; Parameters do not match.
=25					ErrorID_DupArray = 25 ; Array already defined
=26					ErrorID_NotArray = 26 ; DIM requires array
=27					ErrorID_ArrayIndex = 27 ; Bad array index.
=28					ErrorID_DataError = 28 ; Out of data

;******  Return to file: error/errorhandler.inc


;******  Return to file: basic.asm


;******  Processing file: extension/extension.inc


;******  Return to file: basic.asm


;******  Processing file: floatingpoint/floatingpoint.inc


;******  Return to file: basic.asm


;******  Processing file: interaction/interaction.inc


;******  Return to file: basic.asm


;******  Processing file: string/memory.inc

=252					MaxStringSize = 252

;******  Return to file: basic.asm


;******  Processing file: string/string.inc


;******  Return to file: basic.asm


;******  Processing file: tokeniser/tokeniser.inc


;******  Return to file: basic.asm


;******  Processing file: variable/variable.inc


;******  Return to file: basic.asm

.1000					section_start_main:

;******  Processing file: main/main.asm


;******  Processing file: main/00header/00start.asm

.1000	a2 ff		ldx #$ff	Start:	ldx 	#$FF
.1002	9a		txs				txs
.1003	a2 04		ldx #$04		ldx	#4
.1005	20 bb 22	jsr $22bb		jsr	deviceHandler
.1008	a9 00		lda #$00			lda 	#(testBaseAddress) & $FF
.100a	8d c8 0a	sta $0ac8			sta 	basePage
.100d	a9 50		lda #$50			lda 	#(testBaseAddress) >> 8
.100f	8d c9 0a	sta $0ac9			sta 	1+(basePage)
.1012	a9 00		lda #$00			lda 	#($9800) & $FF
.1014	8d ca 0a	sta $0aca			sta 	endMemory
.1017	a9 98		lda #$98			lda 	#($9800) >> 8
.1019	8d cb 0a	sta $0acb			sta 	1+(endMemory)
.101c	4c 28 14	jmp $1428			jmp 	Command_Run
.2b30					ReturnPos:
.5000					testBaseAddress:

;******  Processing file: main/00header/../../generated/testcode.inc

>5000	0b 0a 00 9b 09 3a 8d 40			.byte 11,10,0,155,9,58,141,64,203,71,128,7,11,0,222,9,58,128,12,12,0,213,133,5,83,84,65,82,84,128,7,13,0,160,9,58,128,17,14,0,207,3,59,69,198,200,14,1,13,5,61,66,198,128,17,15,0,129,140,1,58,200,2,50,58,200,3,59,67,198,128,16,16,0,213,1,58,200,2,50,58,200,3,59,67,198,128,26,17,0,155,9,58,141,65,203,66,199,129,140,14,1,13,5,61,9,58,198,199,160,9,58,128,25,18,0,155,9,58,141,65,203,66,199,213,14,1,13,5,61,9,58,198,199,160,9,58,128,18,19,0,217,76,200,77,200,78,199,213,133,4,78,69,88,84,128,14,20,0,213,133,7,84,69,88,84,73,69,83,128,18,21,0,217,133,4,80,97,117,108,200,133,4,74,97,110,101,128,16,22,0,225,86,200,69,199,213,133,4,68,79,78,69,128,6,23,0,129,143,128,4,24,0,128,4,25,0,128,0
>5008	cb 47 80 07 0b 00 de 09 3a 80 0c 0c 00 d5 85 05
>5018	53 54 41 52 54 80 07 0d 00 a0 09 3a 80 11 0e 00
>5028	cf 03 3b 45 c6 c8 0e 01 0d 05 3d 42 c6 80 11 0f
>5038	00 81 8c 01 3a c8 02 32 3a c8 03 3b 43 c6 80 10
>5048	10 00 d5 01 3a c8 02 32 3a c8 03 3b 43 c6 80 1a
>5058	11 00 9b 09 3a 8d 41 cb 42 c7 81 8c 0e 01 0d 05
>5068	3d 09 3a c6 c7 a0 09 3a 80 19 12 00 9b 09 3a 8d
>5078	41 cb 42 c7 d5 0e 01 0d 05 3d 09 3a c6 c7 a0 09
>5088	3a 80 12 13 00 d9 4c c8 4d c8 4e c7 d5 85 04 4e
>5098	45 58 54 80 0e 14 00 d5 85 07 54 45 58 54 49 45
>50a8	53 80 12 15 00 d9 85 04 50 61 75 6c c8 85 04 4a
>50b8	61 6e 65 80 10 16 00 e1 56 c8 45 c7 d5 85 04 44
>50c8	4f 4e 45 80 06 17 00 81 8f 80 04 18 00 80 04 19
>50d8	00 80 00

;******  Return to file: main/00header/00start.asm


;******  Return to file: main/main.asm


;******  Processing file: main/commands/assert.asm

.101f					Command_Assert:
.101f	20 1c 1b	jsr $1b1c			jsr 	EvaluateRootInteger 		; what is being asserted.
.1022	20 60 21	jsr $2160			jsr 	MInt32Zero 					; is it true ?
.1025	f0 01		beq $1028			beq 	_CAError
.1027	60		rts				rts
.1028					_CAError:
.1028	a2 04		ldx #$04			ldx 	#ErrorID_Assert
.102a	20 d2 22	jsr $22d2		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/commands/clear.asm

.102d					CommandClear:
.102d	98		tya				tya
.102e	48		pha				pha
.102f	ad ca 0a	lda $0aca			lda 	endMemory					; set high memory = end of memory
.1032	85 0d		sta $0d				sta 	highMemory
.1034	ad cb 0a	lda $0acb			lda 	endMemory+1
.1037	85 0e		sta $0e				sta 	highMemory+1
.1039	ad c8 0a	lda $0ac8			lda 	basePage 					; work out where the program ends.
.103c	85 04		sta $04				sta 	temp0
.103e	ad c9 0a	lda $0ac9			lda 	basePage+1
.1041	85 05		sta $05				sta 	temp0+1
.1043					_CCFindEnd:
.1043	a0 00		ldy #$00			ldy 	#0
.1045	b1 04		lda ($04),y			lda 	(temp0),y
.1047	f0 0c		beq $1055			beq 	_CCFoundEnd 				; offset zero is end.
.1049	18		clc				clc
.104a	65 04		adc $04				adc 	temp0 						; move to next line
.104c	85 04		sta $04				sta 	temp0
.104e	90 f3		bcc $1043			bcc 	_CCFindEnd
.1050	e6 05		inc $05				inc 	temp0+1
.1052	4c 43 10	jmp $1043			jmp 	_CCFindEnd
.1055					_CCFoundEnd:
.1055	a5 04		lda $04				lda 	temp0 						; put temp0 in lowMemory
.1057	85 0f		sta $0f				sta 	lowMemory
.1059	a5 05		lda $05				lda 	temp0+1
.105b	85 10		sta $10				sta 	lowMemory+1
.105d	a9 04		lda #$04			lda 	#4 							; skip low free memory clear, leave a gap.
.105f	20 73 10	jsr $1073			jsr 	AdvanceLowMemoryByte		; need at least one here, to skip the end of program zero offset.
.1062	20 c6 21	jsr $21c6			jsr 	RSReset 					; reset the return stack.
.1065	a2 04		ldx #$04		ldx	#4
.1067	20 27 2b	jsr $2b27		jsr	variableHandler
.106a	20 dd 15	jsr $15dd			jsr 	ScanProc 					; scan for procedures
.106d	20 e9 13	jsr $13e9			jsr 	CommandRestore 				; do a restore
.1070	68		pla				pla
.1071	a8		tay				tay
.1072	60		rts				rts
.1073					AdvanceLowMemoryByte:
.1073	18		clc				clc
.1074	65 0f		adc $0f				adc 	lowMemory
.1076	85 0f		sta $0f				sta 	lowMemory
.1078	90 02		bcc $107c			bcc 	_ALMBExit
.107a	e6 10		inc $10				inc 	lowMemory+1
.107c					_ALMBExit:
.107c	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/dim.asm

.107d					Command_Dim:
.107d	a2 02		ldx #$02		ldx	#2
.107f	20 27 2b	jsr $2b27		jsr	variableHandler
.1082	b1 02		lda ($02),y			lda 	(codePtr),y 				; see what follows.
.1084	c8		iny				iny
.1085	c9 c8		cmp #$c8			cmp 	#TKW_COMMA 					; comma follows, go back and do next
.1087	f0 f4		beq $107d			beq 	Command_Dim
.1089	88		dey				dey 								; unpick get
.108a	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/for.asm

.2b30					Command_FOR:
.2b30	a9 46		lda #$46			lda 	#markerFOR 					; allocate the space.
.2b32	a2 0b		ldx #$0b			ldx 	#11
.2b34	20 d4 21	jsr $21d4			jsr 	RSClaim
.2b37	20 c7 10	jsr $10c7			jsr 	CommandLET 					; do the same as LET.
.2b3a	a5 40		lda $40				lda 	esType 						; check type should be integer reference.
.2b3c	c9 80		cmp #$80			cmp 	#$80
.2b3e	d0 4c		bne $2b8c			bne 	_CFType
.2b40	a9 cb		lda #$cb			lda 	#TKW_TO 					; check TO present.
.2b42	20 a1 21	jsr $21a1			jsr 	CheckToken
.2b45	a2 01		ldx #$01			ldx 	#1 							; keep the variable address in stack 0
.2b47	20 1e 1b	jsr $1b1e			jsr 	EvaluateInteger				; get terminal value in stack 1
.2b4a	98		tya				tya
.2b4b	48		pha				pha
.2b4c	a0 04		ldy #$04			ldy 	#4
.2b4e	a5 48		lda $48				lda		esInt0 						; the address of the index into 4 and 5
.2b50	91 78		sta ($78),y			sta 	(rsPointer),y
.2b52	c8		iny				iny
.2b53	a5 50		lda $50				lda		esInt1
.2b55	91 78		sta ($78),y			sta 	(rsPointer),y
.2b57	c8		iny				iny
.2b58	a9 01		lda #$01			lda 	#1  						; the default step in 6
.2b5a	91 78		sta ($78),y			sta 	(rsPointer),y
.2b5c	c8		iny				iny
.2b5d	a5 49		lda $49				lda		esInt0+1 					; terminal value in 7 to 11.
.2b5f	91 78		sta ($78),y			sta 	(rsPointer),y
.2b61	c8		iny				iny
.2b62	a5 51		lda $51				lda		esInt1+1
.2b64	91 78		sta ($78),y			sta 	(rsPointer),y
.2b66	c8		iny				iny
.2b67	a5 59		lda $59				lda		esInt2+1
.2b69	91 78		sta ($78),y			sta 	(rsPointer),y
.2b6b	c8		iny				iny
.2b6c	a5 61		lda $61				lda		esInt3+1
.2b6e	91 78		sta ($78),y			sta 	(rsPointer),y
.2b70	68		pla				pla
.2b71	a8		tay				tay
.2b72	b1 02		lda ($02),y			lda 	(codePtr),y 				; followed by STEP.
.2b74	c9 cc		cmp #$cc			cmp 	#TKW_STEP
.2b76	d0 0e		bne $2b86			bne 	_CFDone
.2b78	c8		iny				iny									; skip over step.
.2b79	20 1e 1b	jsr $1b1e			jsr 	EvaluateInteger 			; get step
.2b7c	98		tya				tya
.2b7d	48		pha				pha
.2b7e	b5 48		lda $48,x			lda 	esInt0,x 					; copy it into step (bit lazy here)
.2b80	a0 06		ldy #$06			ldy 	#6
.2b82	91 78		sta ($78),y			sta 	(rsPointer),y
.2b84	68		pla				pla
.2b85	a8		tay				tay
.2b86					_CFDone:
.2b86	a9 01		lda #$01			lda 	#1
.2b88	20 00 22	jsr $2200			jsr 	RSSavePosition 				; save position.
.2b8b	60		rts				rts
.2b8c					_CFType:
.2b8c	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.2b8e	20 d2 22	jsr $22d2		jsr	errorHandler
.2b91					Command_NEXT:
.2b91	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.2b93	a1 78		lda ($78,x)			lda 	(rsPointer,x)
.2b95	c9 46		cmp #$46			cmp 	#markerFOR 						; does it match
.2b97	f0 05		beq $2b9e			beq 	_isok
.2b99	a2 10		ldx #$10			ldx 	#ErrorID_nextErr
.2b9b	20 d2 22	jsr $22d2		jsr	errorHandler
.2b9e					_isok:
.2b9e	b1 02		lda ($02),y			lda 	(codePtr),y 				; is it NEXT <index>
.2ba0	c9 40		cmp #$40			cmp 	#$40 						; e.g. a variable follows 00-3F
.2ba2	b0 18		bcs $2bbc			bcs 	_CNNoIndex
.2ba4	a2 00		ldx #$00			ldx 	#0 							; start on stack
.2ba6	20 4b 1b	jsr $1b4b			jsr 	EvaluateReference 			; this is the variable/parameter to localise.
.2ba9	98		tya				tya
.2baa	48		pha				pha
.2bab	a0 04		ldy #$04			ldy 	#4 							; check same variable
.2bad	b1 78		lda ($78),y			lda 	(rsPointer),y
.2baf	d5 48		cmp $48,x			cmp 	esInt0,x
.2bb1	d0 76		bne $2c29			bne 	_CNBadIndex
.2bb3	c8		iny				iny
.2bb4	b1 78		lda ($78),y			lda 	(rsPointer),y
.2bb6	d5 50		cmp $50,x			cmp 	esInt1,x
.2bb8	d0 6f		bne $2c29			bne 	_CNBadIndex
.2bba	68		pla				pla
.2bbb	a8		tay				tay
.2bbc					_CNNoIndex:
.2bbc	98		tya				tya
.2bbd	48		pha				pha
.2bbe	a0 04		ldy #$04			ldy 	#4 							; make temp0 point to the index
.2bc0	b1 78		lda ($78),y			lda 	(rsPointer),y
.2bc2	85 04		sta $04				sta 	temp0
.2bc4	c8		iny				iny
.2bc5	b1 78		lda ($78),y			lda 	(rsPointer),y
.2bc7	85 05		sta $05				sta 	temp0+1
.2bc9	c8		iny				iny
.2bca	a2 00		ldx #$00			ldx 	#0 							; X is the sign extend part of the step.
.2bcc	b1 78		lda ($78),y			lda 	(rsPointer),y 				; get the step.
.2bce	85 09		sta $09				sta 	temp2+1 					; save for later.
.2bd0	10 01		bpl $2bd3			bpl 	_CNSignX
.2bd2	ca		dex				dex  								; X = $FF
.2bd3					_CNSignX:
.2bd3	18		clc				clc 								; add to the LSB
.2bd4	a0 00		ldy #$00			ldy 	#0
.2bd6	71 04		adc ($04),y			adc 	(temp0),y
.2bd8	91 04		sta ($04),y			sta 	(temp0),y
.2bda					_CNPropogate:
.2bda	c8		iny				iny  								; add the sign extended in X to the rest.
.2bdb	8a		txa				txa
.2bdc	71 04		adc ($04),y			adc 	(temp0),y
.2bde	91 04		sta ($04),y			sta 	(temp0),y
.2be0	c8		iny				iny
.2be1	8a		txa				txa
.2be2	71 04		adc ($04),y			adc 	(temp0),y
.2be4	91 04		sta ($04),y			sta 	(temp0),y
.2be6	c8		iny				iny
.2be7	8a		txa				txa
.2be8	71 04		adc ($04),y			adc 	(temp0),y
.2bea	91 04		sta ($04),y			sta 	(temp0),y
.2bec	18		clc				clc 								; point temp1 to the terminal value stored in the stack.
.2bed	a5 78		lda $78				lda 	rsPointer
.2bef	69 07		adc #$07			adc 	#7
.2bf1	85 06		sta $06				sta 	temp1
.2bf3	a9 00		lda #$00			lda 	#0
.2bf5	85 08		sta $08				sta 	temp2 						; clear temp2, which is the OR of all the subtractions.
.2bf7	a8		tay				tay 								; and clear the Y register again.
.2bf8	65 79		adc $79				adc 	rsPointer+1
.2bfa	85 07		sta $07				sta 	temp1+1
.2bfc	38		sec				sec 								; calculate current - limit oring interim values.
.2bfd	20 35 2c	jsr $2c35			jsr 	_CNCompare
.2c00	20 35 2c	jsr $2c35			jsr 	_CNCompare
.2c03	20 35 2c	jsr $2c35			jsr 	_CNCompare
.2c06	20 35 2c	jsr $2c35			jsr 	_CNCompare
.2c09	50 02		bvc $2c0d			bvc 	_CNNoOverflow 				; converts to a signed comparison on the sign bit.
.2c0b	49 80		eor #$80			eor 	#$80
.2c0d					_CNNoOverflow:
.2c0d	a4 09		ldy $09				ldy 	temp2+1						; get step back
.2c0f	30 1d		bmi $2c2e			bmi 	_CNCheckDownto
.2c11	c9 00		cmp #$00			cmp 	#0
.2c13	30 0c		bmi $2c21			bmi 	_CNLoopRound 				; loop round if < =
.2c15	a5 08		lda $08				lda 	temp2
.2c17	f0 08		beq $2c21			beq 	_CNLoopRound
.2c19					_CNLoopExit:
.2c19	68		pla				pla
.2c1a	a8		tay				tay
.2c1b	a9 0b		lda #$0b			lda 	#11
.2c1d	20 f6 21	jsr $21f6			jsr 	RSFree
.2c20	60		rts				rts
.2c21					_CNLoopRound:
.2c21	68		pla				pla
.2c22	a8		tay				tay
.2c23	a9 01		lda #$01			lda 	#1
.2c25	20 13 22	jsr $2213			jsr 	RSLoadPosition				; go back to the loop top
.2c28	60		rts				rts
.2c29					_CNBadIndex:
.2c29	a2 13		ldx #$13			ldx 	#ErrorID_BadIndex
.2c2b	20 d2 22	jsr $22d2		jsr	errorHandler
.2c2e					_CNCheckDownto:
.2c2e	c9 00		cmp #$00			cmp 	#0
.2c30	10 ef		bpl $2c21			bpl 	_CNLoopRound
.2c32	4c 19 2c	jmp $2c19			jmp 	_CNLoopExit
.2c35					_CNCompare:
.2c35	b1 04		lda ($04),y			lda 	(temp0),y 					; do the subtraction - compare don't care about answer
.2c37	f1 06		sbc ($06),y			sbc 	(temp1),y
.2c39	05 08		ora $08				ora 	temp2 						; Or into temp2 (does not affect carry)
.2c3b	85 08		sta $08				sta 	temp2
.2c3d	c8		iny				iny
.2c3e	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/if.asm

.108b					CommandIf:
.108b	20 1c 1b	jsr $1b1c			jsr 	EvaluateRootInteger 		; if what ?
.108e	b1 02		lda ($02),y			lda 	(codePtr),y 				; check for IF .. THEN or IF .. GOTO which are single lines.
.1090	c9 d6		cmp #$d6			cmp 	#TKW_GOTO
.1092	f0 04		beq $1098			beq 	_IfSimple
.1094	c9 a1		cmp #$a1			cmp 	#TKW_THEN
.1096	d0 1b		bne $10b3			bne 	_IfComplex
.1098					_IfSimple:
.1098	20 60 21	jsr $2160			jsr 	MInt32Zero					; check if TOS zero
.109b	f0 10		beq $10ad			beq 	_IfEOL 						; go to next line.
.109d	b1 02		lda ($02),y			lda 	(codePtr),y 				; get and skip token.
.109f	c8		iny				iny
.10a0	c9 d6		cmp #$d6			cmp 	#TKW_GOTO 					; was it if GOTO ?
.10a2	f0 0c		beq $10b0			beq 	_IfGoto 					; do the Goto code
.10a4	b1 02		lda ($02),y			lda 	(codePtr),y 				; what follows the THEN ?
.10a6	29 c0		and #$c0			and 	#$C0 						; check $40-$7F
.10a8	c9 40		cmp #$40			cmp 	#$40 						; e.g. number IF x = 0 THEN 170
.10aa	f0 04		beq $10b0			beq 	_IfGoto
.10ac	60		rts				rts 								; else continue on this line.
.10ad					_IfEOL:
.10ad	4c 51 16	jmp $1651			jmp 	AdvanceNextLine 			; go to next line
.10b0					_IfGoto:
.10b0	4c c6 16	jmp $16c6			jmp 	CommandGoto
.10b3					_IfComplex:
.10b3	20 60 21	jsr $2160			jsr 	MInt32Zero 					; is it true ?
.10b6	f0 01		beq $10b9			beq 	_IFSkip 					; if non-zero then skip to ELSE/ENDIF
.10b8	60		rts				rts 								; else continue.
.10b9					_IFSkip:
.10b9	a9 d3		lda #$d3			lda	 	#TKW_ELSE 					; test failed, go to ELSE or ENDIF whichever comes first.
.10bb	a2 a2		ldx #$a2			ldx 	#TKW_ENDIF
.10bd	4c a8 2c	jmp $2ca8			jmp		ScanForward
.10c0					Command_ELSE:
.10c0	a2 a2		ldx #$a2			ldx 	#TKW_ENDIF
.10c2	8a		txa				txa
.10c3	4c a8 2c	jmp $2ca8			jmp		ScanForward
.10c6					Command_ENDIF:
.10c6	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/let.asm

.10c7					CommandLet:
.10c7	a2 00		ldx #$00			ldx 	#0  						; get address to write.
.10c9	20 4b 1b	jsr $1b4b			jsr 	EvaluateReference
.10cc	a9 8d		lda #$8d			lda 	#TKW_EQUAL 					; check for equals
.10ce	20 a1 21	jsr $21a1			jsr 	CheckToken
.10d1	e8		inx				inx 								; do RHS
.10d2	20 ff 1a	jsr $1aff			jsr 	Evaluate 					; evaluate and derefernce
.10d5	ca		dex				dex
.10d6	20 da 10	jsr $10da			jsr 	WriteValue 					; write it out
.10d9	60		rts				rts
.10da					WriteValue:
.10da	98		tya				tya
.10db	48		pha				pha
.10dc	20 3c 11	jsr $113c			jsr 	TOSToTemp0 					; set temp0 to point to target address.
.10df	b5 40		lda $40,x			lda 	esType,x 					; check the string/integer flags match
.10e1	55 41		eor $41,x			eor 	esType+1,x
.10e3	29 40		and #$40			and 	#$40
.10e5	d0 50		bne $1137			bne		_WVType
.10e7	a0 01		ldy #$01			ldy 	#1 							; for string, copy 0 and 1.
.10e9	b5 40		lda $40,x			lda 	esType,x 					; check for string assignment
.10eb	29 40		and #$40			and 	#$40
.10ed	d0 1f		bne $110e			bne 	_WVCopyString
.10ef	b5 40		lda $40,x			lda 	esType,x 					; check both are integer.
.10f1	15 41		ora $41,x			ora 	esType+1,x
.10f3	4a		lsr a				lsr 	a
.10f4	90 22		bcc $1118			bcc 	_WVCopyData4
.10f6	b5 40		lda $40,x			lda 	esType,x
.10f8	4a		lsr a				lsr 	a
.10f9	90 3c		bcc $1137			bcc 	_WVType
.10fb	e8		inx				inx 								; force the value being written to be a float.
.10fc	20 38 17	jsr $1738			jsr 	BPMakeFloat
.10ff	ca		dex				dex
.1100	20 3c 11	jsr $113c			jsr 	TOSToTemp0 					; set Temp0 to write address
.1103	e8		inx				inx
.1104	8a		txa				txa
.1105	a2 20		ldx #$20		ldx	#32
.1107	20 c3 25	jsr $25c3		jsr	floatingpointHandler
.110a	aa		tax				tax
.110b	4c 34 11	jmp $1134			jmp 	_WVCopyExit
.110e					_WVCopyString:
.110e	8a		txa				txa
.110f	a2 0c		ldx #$0c		ldx	#12
.1111	20 5f 28	jsr $285f		jsr	stringHandler
.1114	aa		tax				tax
.1115	4c 34 11	jmp $1134			jmp 	_WVCopyExit
.1118					_WVCopyData4:
.1118	b5 40		lda $40,x			lda 	esType,x 					; is the int ref a byte ref ?
.111a	29 20		and #$20			and 	#$20
.111c	d0 10		bne $112e			bne 	_WVCopyData1
.111e	a0 03		ldy #$03			ldy 	#3
.1120	b5 61		lda $61,x			lda 	esInt3+1,x
.1122	91 04		sta ($04),y			sta 	(temp0),y
.1124	88		dey				dey
.1125	b5 59		lda $59,x			lda 	esInt2+1,x
.1127	91 04		sta ($04),y			sta 	(temp0),y
.1129	88		dey				dey
.112a	b5 51		lda $51,x			lda 	esInt1+1,x
.112c	91 04		sta ($04),y			sta 	(temp0),y
.112e					_WVCopyData1:
.112e	a0 00		ldy #$00			ldy 	#0
.1130	b5 49		lda $49,x			lda 	esInt0+1,x
.1132	91 04		sta ($04),y			sta 	(temp0),y
.1134					_WVCopyExit:
.1134	68		pla				pla
.1135	a8		tay				tay
.1136	60		rts				rts
.1137					_WVType:
.1137	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.1139	20 d2 22	jsr $22d2		jsr	errorHandler
.113c					TOSToTemp0:
.113c	b5 48		lda $48,x			lda 	esInt0,x
.113e	85 04		sta $04				sta 	temp0
.1140	b5 50		lda $50,x			lda 	esInt1,x
.1142	85 05		sta $05				sta 	temp0+1
.1144	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/local.asm

.0af0					storeSize:
>0af0							.fill 	1
.1145					CommandLocal:
.1145	a2 00		ldx #$00			ldx 	#0
.1147	20 63 11	jsr $1163			jsr 	LocaliseVariable 			; localise one.
.114a					_CLCheckNext:
.114a	b1 02		lda ($02),y			lda 	(codePtr),y 				; what follows ?
.114c	c8		iny				iny
.114d	c9 8d		cmp #$8d			cmp 	#TKW_EQUAL 					; local x = 2 ?
.114f	f0 06		beq $1157			beq 	_CLAssignment
.1151	c9 c8		cmp #$c8			cmp 	#TKW_COMMA 					; comma try again.
.1153	f0 f0		beq $1145			beq 	CommandLocal
.1155	88		dey				dey
.1156	60		rts				rts
.1157					_CLAssignment:
.1157	a2 01		ldx #$01			ldx 	#1
.1159	20 ff 1a	jsr $1aff			jsr 	Evaluate 					; evaluate RHS
.115c	ca		dex				dex
.115d	20 da 10	jsr $10da			jsr 	WriteValue
.1160	4c 4a 11	jmp $114a			jmp 	_CLCheckNext
.1163					LocaliseVariable:
.1163	b1 02		lda ($02),y			lda 	(codePtr),y 				; check it's a variable.
.1165	c9 40		cmp #$40			cmp 	#$40
.1167	b0 67		bcs $11d0			bcs 	_LVSyntax
.1169	8a		txa				txa 								; get the address of that variable.
.116a	a2 00		ldx #$00		ldx	#0
.116c	20 27 2b	jsr $2b27		jsr	variableHandler
.116f	aa		tax				tax
.1170	8a		txa				txa
.1171	48		pha				pha
.1172	98		tya				tya
.1173	48		pha				pha
.1174	20 3c 11	jsr $113c			jsr 	TOSToTemp0 					; the address of the variable is now in temp0.
.1177	b5 40		lda $40,x			lda 	esType,x 					; get the type
.1179	0a		asl a				asl 	a
.117a	10 16		bpl $1192			bpl 	_LVPushNumber
.117c	a0 00		ldy #$00			ldy 	#0 							; put address of data in temp1
.117e	b1 04		lda ($04),y			lda 	(temp0),y
.1180	c8		iny				iny
.1181	85 06		sta $06				sta 	temp1
.1183	b1 04		lda ($04),y			lda 	(temp0),y
.1185	85 07		sta $07				sta 	temp1+1
.1187	a0 00		ldy #$00			ldy 	#0 	 						; get length
.1189	b1 06		lda ($06),y			lda 	(temp1),y
.118b	aa		tax				tax 								; into X
.118c	e8		inx				inx 								; +1 for length.
.118d	a9 24		lda #$24			lda 	#markerString
.118f	4c a7 11	jmp $11a7			jmp 	_LVWriteFrame
.1192					_LVPushNumber:
.1192	a5 04		lda $04				lda 	temp0 						; storage address and data source are the same
.1194	85 06		sta $06				sta 	temp1
.1196	a5 05		lda $05				lda 	temp0+1
.1198	85 07		sta $07				sta 	temp1+1
.119a	b5 40		lda $40,x			lda 	esType,x 					; put float flag into carry.
.119c	4a		lsr a				lsr 	a
.119d	a9 25		lda #$25			lda 	#markerInt 					; get marker and size.
.119f	a2 04		ldx #$04			ldx 	#VarISize
.11a1	90 04		bcc $11a7			bcc 	_LVIsInteger
.11a3	a9 23		lda #$23			lda 	#markerFloat
.11a5	a2 06		ldx #$06			ldx 	#VarFSize
.11a7					_LVIsInteger:
.11a7					_LVWriteFrame:
.11a7	8e f0 0a	stx $0af0			stx 	storeSize 					; number of bytes to copy from (temp0)
.11aa	e8		inx				inx 								; allocate 3 bytes, 2 for the address, 1 for the marker.
.11ab	e8		inx				inx
.11ac	e8		inx				inx
.11ad	20 d4 21	jsr $21d4			jsr 	RSClaim 					; create the stack frame.
.11b0	a5 04		lda $04				lda 	temp0 						; copy the target address to slots 1 & 2
.11b2	a0 01		ldy #$01			ldy 	#1
.11b4	91 78		sta ($78),y			sta 	(rsPointer),y
.11b6	c8		iny				iny
.11b7	a5 05		lda $05				lda 	temp0+1
.11b9	91 78		sta ($78),y			sta 	(rsPointer),y
.11bb	a0 00		ldy #$00			ldy 	#0
.11bd					_LVCopyData:
.11bd	b1 06		lda ($06),y			lda 	(temp1),y 					; get data from source, temp1
.11bf	c8		iny				iny 								; write allowing for the header bit.
.11c0	c8		iny				iny
.11c1	c8		iny				iny
.11c2	91 78		sta ($78),y			sta 	(rsPointer),y
.11c4	88		dey				dey
.11c5	88		dey				dey
.11c6	ce f0 0a	dec $0af0			dec 	storeSize 					; do it storesize times
.11c9	d0 f2		bne $11bd			bne 	_LVCopyData
.11cb	68		pla				pla
.11cc	a8		tay				tay
.11cd	68		pla				pla
.11ce	aa		tax				tax
.11cf	60		rts				rts
.11d0					_LVSyntax:
.11d0	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.11d2	20 d2 22	jsr $22d2		jsr	errorHandler
.11d5					RestoreLocals:
.11d5	a2 00		ldx #$00			ldx 	#0
.11d7	a1 78		lda ($78,x)			lda 	(rsPointer,x)
.11d9	c9 40		cmp #$40			cmp	 	#64
.11db	90 01		bcc $11de			bcc 	_RLocal
.11dd	60		rts				rts
.11de					_RLocal:
.11de	8a		txa				txa
.11df	48		pha				pha
.11e0	98		tya				tya
.11e1	48		pha				pha
.11e2	a0 01		ldy #$01			ldy 	#1 							; copy target address to temp0
.11e4	b1 78		lda ($78),y			lda 	(rsPointer),y
.11e6	85 04		sta $04				sta 	temp0
.11e8	c8		iny				iny
.11e9	b1 78		lda ($78),y			lda 	(rsPointer),y
.11eb	85 05		sta $05				sta 	temp0+1
.11ed	a0 00		ldy #$00			ldy 	#0 							; get type back.
.11ef	b1 78		lda ($78),y			lda 	(rsPointer),y
.11f1	c9 24		cmp #$24			cmp 	#markerString 				; string is ... different :)
.11f3	f0 28		beq $121d			beq 	_RString
.11f5	a2 04		ldx #$04			ldx		#VARISize 					; size integer
.11f7	c9 25		cmp #$25			cmp 	#markerInt
.11f9	f0 02		beq $11fd			beq 	_RIsInteger
.11fb	a2 06		ldx #$06			ldx 	#VARFSize 					; size float
.11fd					_RIsInteger:
.11fd	8a		txa				txa
.11fe	48		pha				pha
.11ff	a0 03		ldy #$03			ldy 	#3							; start size to copy back from pointer.
.1201					_RCopyBack:
.1201	b1 78		lda ($78),y			lda 	(rsPointer),y
.1203	88		dey				dey
.1204	88		dey				dey
.1205	88		dey				dey
.1206	91 04		sta ($04),y			sta 	(temp0),y
.1208	c8		iny				iny
.1209	c8		iny				iny
.120a	c8		iny				iny
.120b	c8		iny				iny
.120c	ca		dex				dex
.120d	d0 f2		bne $1201			bne 	_RCopyBack
.120f	68		pla				pla 								; get size add 3
.1210	18		clc				clc
.1211	69 03		adc #$03			adc 	#3 							; (2 for address one for marker)
.1213					_RRestoreAAndLoop:
.1213	20 f6 21	jsr $21f6			jsr 	RSFree
.1216	68		pla				pla
.1217	a8		tay				tay
.1218	68		pla				pla
.1219	aa		tax				tax
.121a	4c d5 11	jmp $11d5			jmp 	RestoreLocals 				; go see if there are any more locals.
.121d					_RString:
.121d	a2 00		ldx #$00			ldx 	#0
.121f	a0 01		ldy #$01			ldy 	#1 							; set up for a string write.
.1221	b1 78		lda ($78),y			lda 	(rsPointer),y
.1223	95 48		sta $48,x			sta 	esInt0,x
.1225	c8		iny				iny
.1226	b1 78		lda ($78),y			lda 	(rsPointer),y
.1228	95 50		sta $50,x			sta 	esInt1,x
.122a	18		clc				clc
.122b	a5 78		lda $78				lda 	rsPointer
.122d	69 03		adc #$03			adc 	#3
.122f	95 49		sta $49,x			sta 	esInt0+1,x
.1231	a5 79		lda $79				lda 	rsPointer+1
.1233	69 00		adc #$00			adc 	#0
.1235	95 51		sta $51,x			sta 	esInt1+1,x
.1237	8a		txa				txa
.1238	a2 0c		ldx #$0c		ldx	#12
.123a	20 5f 28	jsr $285f		jsr	stringHandler
.123d	a0 03		ldy #$03			ldy 	#3 							; get string length
.123f	b1 78		lda ($78),y			lda 	(rsPointer),y
.1241	18		clc				clc
.1242	69 04		adc #$04			adc 	#4 							; add 4 (pointer, marker, length) to restore.
.1244	4c 13 12	jmp $1213			jmp 	_RRestoreAAndLoop

;******  Return to file: main/main.asm


;******  Processing file: main/commands/new.asm

.1247					Command_New:
.1247	20 82 14	jsr $1482			jsr 	ResetCodeAddress 			; point to first line
.124a	a0 00		ldy #$00			ldy 	#0 							; and zap it.
.124c	98		tya				tya
.124d	91 02		sta ($02),y			sta 	(codePtr),y
.124f	20 2d 10	jsr $102d			jsr 	CommandClear 				; clear everything down.
.1252	4c 4e 16	jmp $164e			jmp 	CommandEND 					; do END code, as there's nothing to run.

;******  Return to file: main/main.asm


;******  Processing file: main/commands/poke.asm

.1255					Command_Poke:
.1255	a9 01		lda #$01			lda 	#1
.1257	d0 06		bne $125f			bne 	PokeGeneral
.1259					Command_Doke:
.1259	a9 02		lda #$02			lda 	#2
.125b	d0 02		bne $125f			bne 	PokeGeneral
.125d					Command_Loke:
.125d	a9 03		lda #$03			lda 	#3
.125f					PokeGeneral:
.125f	48		pha				pha 								; save size
.1260	20 1c 1b	jsr $1b1c			jsr 	EvaluateRootInteger 		; target address
.1263	20 b9 21	jsr $21b9			jsr	 	CheckComma
.1266	e8		inx				inx
.1267	20 1e 1b	jsr $1b1e			jsr 	EvaluateInteger 			; what value to POKE ?
.126a	ca		dex				dex
.126b	20 3c 11	jsr $113c			jsr 	TOSToTemp0 					; temp0 points to the target address
.126e	84 0c		sty $0c				sty 	tempShort 					; save Y
.1270	68		pla				pla 								; get copy type and dispatch
.1271	aa		tax				tax
.1272	ca		dex				dex
.1273	f0 14		beq $1289			beq 	_Poke1
.1275	ca		dex				dex
.1276	f0 0b		beq $1283			beq 	_Poke2
.1278	a0 03		ldy #$03			ldy 	#3
.127a	a5 61		lda $61				lda 	esInt3+1
.127c	91 04		sta ($04),y			sta 	(temp0),y
.127e	88		dey				dey
.127f	a5 59		lda $59				lda 	esInt2+1
.1281	91 04		sta ($04),y			sta 	(temp0),y
.1283					_Poke2:
.1283	a0 01		ldy #$01			ldy 	#1
.1285	a5 51		lda $51				lda 	esInt1+1
.1287	91 04		sta ($04),y			sta 	(temp0),y
.1289					_Poke1:
.1289	a0 00		ldy #$00			ldy 	#0
.128b	a5 49		lda $49				lda 	esInt0+1
.128d	91 04		sta ($04),y			sta 	(temp0),y
.128f	a4 0c		ldy $0c				ldy 	tempShort 					; restore Y and exit
.1291	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/print.asm

.0af1					lastPrintToken:
>0af1							.fill 	1
.1292					Command_Print:
.1292	a9 00		lda #$00			lda 	#0 							; clear LPT flag
.1294	8d f1 0a	sta $0af1			sta 	lastPrintToken
.1297	88		dey				dey
.1298					_PrintLoopSkip:
.1298	c8		iny				iny
.1299					_PrintLoop:
.1299	b1 02		lda ($02),y			lda 	(codePtr),y 				; what follows
.129b	c9 80		cmp #$80			cmp 	#TOK_EOL  					; done if end of line or colon
.129d	f0 5b		beq $12fa			beq 	_PrintExit
.129f	c9 c7		cmp #$c7			cmp 	#TKW_COLON
.12a1	f0 57		beq $12fa			beq 	_PrintExit
.12a3	8d f1 0a	sta $0af1			sta 	lastPrintToken 				; update LPT
.12a6	c9 c9		cmp #$c9			cmp 	#TKW_SEMICOLON 				; ignore semicolon
.12a8	f0 ee		beq $1298			beq 	_PrintLoopSkip
.12aa	c9 ca		cmp #$ca			cmp 	#TKW_QUOTE 					; ' is new line
.12ac	f0 3c		beq $12ea			beq	 	_PrintNewLine
.12ae	c9 c8		cmp #$c8			cmp 	#TKW_COMMA 					; , is print tab
.12b0	f0 40		beq $12f2			beq 	_PrintTab
.12b2	20 fd 1a	jsr $1afd			jsr 	EvaluateRoot 				; evaluate something at the root
.12b5	a9 cd		lda #$cd			lda 	#(convertBuffer) & $FF
.12b7	85 04		sta $04				sta 	temp0
.12b9	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.12bb	85 05		sta $05				sta 	1+(temp0)
.12bd	a5 40		lda $40				lda 	esType 						; get type
.12bf	f0 15		beq $12d6			beq		_PrintInteger
.12c1	4a		lsr a				lsr 	a 							; check for floating point
.12c2	b0 08		bcs $12cc			bcs 	_PrintFloat
.12c4					_PrintString:
.12c4	a2 00		ldx #$00			ldx 	#0 							; bottom string to temp0
.12c6	20 3c 11	jsr $113c			jsr 	TOSToTemp0
.12c9	4c e4 12	jmp $12e4			jmp 	_PrintTemp0 				; print no leading space.
.12cc					_PrintFloat:
.12cc	a9 00		lda #$00			lda 	#0 							; stack level.
.12ce	a2 14		ldx #$14		ldx	#20
.12d0	20 c3 25	jsr $25c3		jsr	floatingpointHandler
.12d3	4c dd 12	jmp $12dd			jmp 	_PrintSpaceTemp0
.12d6					_PrintInteger:
.12d6	a9 8a		lda #$8a			lda 	#10+$80 					; base 10 signed
.12d8	a2 00		ldx #$00			ldx 	#0 							; bottom stack element
.12da	20 8f 20	jsr $208f			jsr 	MInt32ToString				; convert to text
.12dd					_PrintSpaceTemp0:
.12dd	a9 20		lda #$20			lda 	#32
.12df	a2 0e		ldx #$0e		ldx	#14
.12e1	20 bb 22	jsr $22bb		jsr	deviceHandler
.12e4					_PrintTemp0:
.12e4	20 0b 13	jsr $130b			jsr 	PrintString
.12e7	4c 99 12	jmp $1299			jmp 	_PrintLoop
.12ea					_PrintNewLine:
.12ea	a2 02		ldx #$02		ldx	#2
.12ec	20 bb 22	jsr $22bb		jsr	deviceHandler
.12ef	4c 98 12	jmp $1298			jmp 	_PrintLoopSkip
.12f2					_PrintTab:
.12f2	a2 10		ldx #$10		ldx	#16
.12f4	20 bb 22	jsr $22bb		jsr	deviceHandler
.12f7	4c 98 12	jmp $1298			jmp 	_PrintLoopSkip
.12fa					_PrintExit:
.12fa	ad f1 0a	lda $0af1			lda		lastPrintToken 				; check last token
.12fd	c9 c9		cmp #$c9			cmp 	#TKW_SEMICOLON 				; if , or ; do not print NL
.12ff	f0 09		beq $130a			beq 	_PrintExit2
.1301	c9 c8		cmp #$c8			cmp 	#TKW_COMMA
.1303	f0 05		beq $130a			beq 	_PrintExit2
.1305	a2 02		ldx #$02		ldx	#2
.1307	20 bb 22	jsr $22bb		jsr	deviceHandler
.130a					_PrintExit2:
.130a	60		rts				rts
.130b					PrintString:
.130b	8a		txa				txa
.130c	48		pha				pha
.130d	98		tya				tya
.130e	48		pha				pha
.130f	a0 00		ldy #$00			ldy 	#0							; get length
.1311	b1 04		lda ($04),y			lda 	(temp0),y
.1313	aa		tax				tax 								; into X
.1314	e0 00		cpx #$00	_PSLoop:cpx 	#0 							; finished ?
.1316	f0 10		beq $1328			beq 	_PSExit
.1318	ca		dex				dex
.1319	8a		txa				txa
.131a	48		pha				pha
.131b	c8		iny				iny
.131c	b1 04		lda ($04),y			lda 	(temp0),y
.131e	a2 0e		ldx #$0e		ldx	#14
.1320	20 bb 22	jsr $22bb		jsr	deviceHandler
.1323	68		pla				pla
.1324	aa		tax				tax
.1325	4c 14 13	jmp $1314			jmp 	_PSLoop
.1328					_PSExit:
.1328	68		pla				pla
.1329	a8		tay				tay
.132a	68		pla				pla
.132b	aa		tax				tax
.132c	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/proc.asm

.0af2					paramCount:
>0af2							.fill 	1
.132d					CallProc:
.132d	20 71 15	jsr $1571			jsr 	FindProcedure 				; find procedure, put in temp0. A contains name length.
.1330	48		pha				pha 								; save length on stack
.1331	85 0c		sta $0c				sta 	tempShort 					; save length in tempShort
.1333	a5 05		lda $05				lda 	temp0+1 					; save procedure target on stack.
.1335	48		pha				pha
.1336	a5 04		lda $04				lda 	temp0
.1338	48		pha				pha
.1339	98		tya				tya 								; calculate Y + length
.133a	18		clc				clc
.133b	65 0c		adc $0c				adc 	tempShort
.133d	a8		tay				tay
.133e	a2 00		ldx #$00			ldx 	#0 							; where the first parameter goes - 1
.1340					_CallProcEvalParams:
.1340	e8		inx				inx
.1341	b1 02		lda ($02),y			lda 	(codePtr),y 				; do we have ) ?
.1343	c9 c6		cmp #$c6			cmp 	#TKW_RPAREN
.1345	f0 0b		beq $1352			beq 	_CPDoneParams
.1347	20 ff 1a	jsr $1aff			jsr 	Evaluate 					; evaluate a parameter
.134a	b1 02		lda ($02),y			lda 	(codePtr),Y 				; get what's next, preconsume
.134c	c8		iny				iny
.134d	c9 c8		cmp #$c8			cmp 	#TKW_COMMA 					; if comma, go get another parameter
.134f	f0 ef		beq $1340			beq 	_CallProcEvalParams
.1351	88		dey				dey 								; undo consumption.
.1352					_CPDoneParams:
.1352	20 ac 21	jsr $21ac			jsr 	CheckRightParen 			; check closing parenthesis.
.1355	8e f2 0a	stx $0af2			stx 	paramCount 					; store parameter count+1
.1358	a2 04		ldx #$04			ldx 	#4							; make space on stack
.135a	a9 50		lda #$50			lda 	#markerPROC
.135c	20 d4 21	jsr $21d4			jsr 	RSClaim
.135f	a9 01		lda #$01			lda 	#1 							; store return address.
.1361	20 00 22	jsr $2200			jsr 	RSSavePosition
.1364	68		pla				pla 								; get the new code Ptr
.1365	85 02		sta $02				sta 	codePtr
.1367	68		pla				pla
.1368	85 03		sta $03				sta 	codePtr+1
.136a	68		pla				pla 								; length of name + 4 is the param start.
.136b	18		clc				clc
.136c	69 04		adc #$04			adc 	#4
.136e	a8		tay				tay
.136f	a2 ff		ldx #$ff			ldx 	#$FF
.1371					_CPLoadParameters:
.1371	e8		inx				inx 								; point to where the address should be loaded.
.1372	ec f2 0a	cpx $0af2			cpx 	paramCount 					; too many parameters in definition ?
.1375	f0 1e		beq $1395			beq 	_CPParamError
.1377	b1 02		lda ($02),y			lda 	(codePtr),y					; what follows
.1379	c9 c6		cmp #$c6			cmp 	#TKW_RPAREN 				; is it the right bracket
.137b	f0 0e		beq $138b			beq 	_CPParamComplete 			; done all the parameters
.137d	20 63 11	jsr $1163			jsr 	LocaliseVariable 			; make following variable local, ref in tos,x
.1380	20 da 10	jsr $10da			jsr 	WriteValue 					; copy the evaluated parameter into there.
.1383	b1 02		lda ($02),y			lda 	(codePtr),y 				; followed by a comma ?
.1385	c8		iny				iny
.1386	c9 c8		cmp #$c8			cmp 	#TKW_COMMA
.1388	f0 e7		beq $1371			beq 	_CPLoadParameters
.138a	88		dey				dey 								; no, unconsume and check for )
.138b					_CPParamComplete:
.138b	20 ac 21	jsr $21ac			jsr 	CheckRightParen 			; check )
.138e	e8		inx				inx 								; check right number of parameters
.138f	ec f2 0a	cpx $0af2			cpx 	paramCount
.1392	d0 01		bne $1395			bne 	_CPParamError
.1394	60		rts				rts
.1395					_CPParamError:
.1395	a2 18		ldx #$18			ldx 	#ErrorID_Params
.1397	20 d2 22	jsr $22d2		jsr	errorHandler
.139a					ReturnProc:
.139a	20 d5 11	jsr $11d5			jsr 	RestoreLocals 				; get the locals back.
.139d	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.139f	a1 78		lda ($78,x)			lda 	(rsPointer,x)
.13a1	c9 50		cmp #$50			cmp 	#markerPROC 						; does it match
.13a3	f0 05		beq $13aa			beq 	_isok
.13a5	a2 12		ldx #$12			ldx 	#ErrorID_endProcErr
.13a7	20 d2 22	jsr $22d2		jsr	errorHandler
.13aa					_isok:
.13aa	a9 01		lda #$01			lda 	#1
.13ac	20 13 22	jsr $2213			jsr 	RSLoadPosition 				; reload the position from offset 1.
.13af	a9 04		lda #$04			lda 	#4 							; throw 4 bytes from stack.
.13b1	20 f6 21	jsr $21f6			jsr 	RSFree
.13b4	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/readdata.asm

.0af3					dataPtr:
>0af3							.fill 	2
.0af5					dataIndex:
>0af5							.fill 	1
.13b5					CommandRead:
.13b5	a2 00		ldx #$00			ldx 	#0 							; get a reference to a variable in stack:0
.13b7	20 4b 1b	jsr $1b4b			jsr 	EvaluateReference
.13ba	20 fb 13	jsr $13fb			jsr 	SwapDPCP 					; use the data pointer.
.13bd	b1 02		lda ($02),y			lda 	(codePtr),y 				; see where it is.
.13bf	c8		iny				iny
.13c0	c9 c8		cmp #$c8			cmp 	#TKW_COMMA 					; if it is on a comma, it is in data.
.13c2	f0 07		beq $13cb			beq 	_CRInData
.13c4	88		dey				dey
.13c5	a9 d9		lda #$d9			lda 	#TKW_DATA 					; scan forward to a DATA statement.
.13c7	aa		tax				tax
.13c8	20 a8 2c	jsr $2ca8			jsr 	ScanForward
.13cb					_CRInData:
.13cb	a2 01		ldx #$01			ldx 	#1 							; evaluate a value at Stack,1
.13cd	20 ff 1a	jsr $1aff			jsr 	Evaluate
.13d0	ca		dex				dex 								; and write the value.
.13d1	20 da 10	jsr $10da			jsr 	WriteValue
.13d4	20 fb 13	jsr $13fb			jsr 	SwapDPCP 					; get the code pointer back.
.13d7	b1 02		lda ($02),y			lda 	(codePtr),y 				; what follows ?
.13d9	c8		iny				iny
.13da	c9 c8		cmp #$c8			cmp 	#TKW_COMMA 					; if comma, another variable
.13dc	f0 d7		beq $13b5			beq 	CommandRead
.13de	88		dey				dey
.13df	60		rts				rts
.13e0					CommandData:
.13e0	a9 80		lda #$80			lda 	#TOK_EOL 					; go forward to end of line or colon.
.13e2	a2 c7		ldx #$c7			ldx 	#TKW_COLON
.13e4	20 a8 2c	jsr $2ca8			jsr 	ScanForward
.13e7	88		dey				dey 								; ending on EOL is a scan issue, as it increments
.13e8	60		rts				rts
.13e9					CommandRestore:
.13e9	ad c8 0a	lda $0ac8			lda 	basePage
.13ec	8d f3 0a	sta $0af3			sta 	dataPtr
.13ef	ad c9 0a	lda $0ac9			lda 	basePage+1
.13f2	8d f4 0a	sta $0af4			sta 	dataPtr+1
.13f5	a9 03		lda #$03			lda 	#3
.13f7	8d f5 0a	sta $0af5			sta 	dataIndex
.13fa	60		rts				rts
.13fb					SwapDPCP:
.13fb	8a		txa				txa
.13fc	48		pha				pha
.13fd	98		tya				tya 								; swap Y, DataIndex
.13fe	ac f5 0a	ldy $0af5			ldy 	DataIndex
.1401	8d f5 0a	sta $0af5			sta 	DataIndex
.1404	a5 02		lda $02				lda 	codePtr 					; swap code/dataptr low
.1406	ae f3 0a	ldx $0af3			ldx 	dataptr
.1409	8d f3 0a	sta $0af3			sta 	dataPtr
.140c	86 02		stx $02				stx 	codePtr
.140e	a5 03		lda $03				lda 	codePtr+1 					; swap code/dataptr high.
.1410	ae f4 0a	ldx $0af4			ldx 	dataptr+1
.1413	8d f4 0a	sta $0af4			sta 	dataPtr+1
.1416	86 03		stx $03				stx 	codePtr+1
.1418	68		pla				pla
.1419	aa		tax				tax
.141a	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/rem.asm

.141b					Command_Rem:
.141b					Command_Rem2:
.141b	b1 02		lda ($02),y			lda 	(codePtr),y 				; what follows
.141d	c9 85		cmp #$85			cmp 	#TOK_STR 					; if it is a string then skip it.
.141f	d0 06		bne $1427			bne 	_CRNotString
.1421	c8		iny				iny
.1422	98		tya				tya
.1423	38		sec				sec
.1424	71 02		adc ($02),y			adc 	(codePtr),y 				; get string size, add to Y, +1 for the length
.1426	a8		tay				tay
.1427					_CRNotString:
.1427	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/repeat.asm

.2c3f					Command_Repeat:
.2c3f	a2 04		ldx #$04			ldx 	#4 							; allocate 4 bytes on stack for REPEAT
.2c41	a9 52		lda #$52			lda 	#markerREPEAT 				; repeat marker allocate 4 bytes
.2c43	20 d4 21	jsr $21d4			jsr 	RSClaim
.2c46	a9 01		lda #$01			lda 	#1 							; save position at offset 1.
.2c48	20 00 22	jsr $2200			jsr 	RSSavePosition
.2c4b	60		rts				rts
.2c4c					Command_Until:
.2c4c	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.2c4e	a1 78		lda ($78,x)			lda 	(rsPointer,x)
.2c50	c9 52		cmp #$52			cmp 	#markerREPEAT 						; does it match
.2c52	f0 05		beq $2c59			beq 	_isok
.2c54	a2 0f		ldx #$0f			ldx 	#ErrorID_untilErr
.2c56	20 d2 22	jsr $22d2		jsr	errorHandler
.2c59					_isok:
.2c59	20 1c 1b	jsr $1b1c			jsr 	EvaluateRootInteger 		; at the bottom.
.2c5c	20 60 21	jsr $2160			jsr 	MInt32Zero					; check if TOS zero
.2c5f	d0 06		bne $2c67			bne 	_CUExit
.2c61	a9 01		lda #$01			lda 	#1
.2c63	20 13 22	jsr $2213			jsr 	RSLoadPosition 				; reload the position from offset 1.
.2c66	60		rts				rts
.2c67					_CUExit:
.2c67	a9 04		lda #$04			lda 	#4 							; throw 4 bytes from stack.
.2c69	20 f6 21	jsr $21f6			jsr 	RSFree
.2c6c	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/run.asm

.1428					Command_Run:
.1428	a2 ff		ldx #$ff			ldx 	#$FF
.142a	9a		txs				txs
.142b	20 2d 10	jsr $102d			jsr 	CommandClear 				; clear everything.
.142e	20 82 14	jsr $1482			jsr 	ResetCodeAddress 			; back to the start.
.1431	a0 03		ldy #$03			ldy 	#3
.1433					CRNextInstruction:
.1433	64 7b		stz $7b				stz 	softMemAlloc+1
.1435	b1 02		lda ($02),y			lda 	(codePtr),y 				; get next token.
.1437	10 1c		bpl $1455			bpl 	_CRNotToken
.1439	c9 c6		cmp #$c6			cmp 	#TOK_TOKENS 				; if in the tokens then do that token.
.143b	b0 0c		bcs $1449			bcs 	_CRExecute
.143d	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST 				; unary is ignored.
.143f	b0 4e		bcs $148f			bcs 	Unimplemented
.1441	c9 99		cmp #$99			cmp 	#TOK_STRUCTST 				; execute structures.
.1443	b0 04		bcs $1449			bcs 	_CRExecute
.1445	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; if one of the system tokens $80-$85 do that
.1447	b0 16		bcs $145f			bcs 	_CRCheckIndirect 			; if in that unused range check for ! or ?
.1449					_CRExecute:
.1449	c8		iny				iny 								; consume it.
.144a	0a		asl a				asl 	a 							; double it, losing most significant bit.
.144b	aa		tax				tax
.144c	20 52 14	jsr $1452			jsr 	_CRRunRoutine 				; we want to do jsr (group0vectors,x)
.144f	4c 33 14	jmp $1433			jmp 	CRNextInstruction
.1452					_CRRunRoutine:
.1452	7c 99 14	jmp ($1499,x)			jmp 	(Group0Vectors,x)
.1455					_CRNotToken:
.1455	c9 40		cmp #$40			cmp 	#$40 						; if 0-3F then it is a letter
.1457	b0 36		bcs $148f			bcs 	Unimplemented
.1459					_CRDefaultLet:
.1459	20 c7 10	jsr $10c7			jsr 	CommandLet 					; do the default, LET
.145c	4c 33 14	jmp $1433			jmp 	CRNextInstruction
.145f					_CRCheckIndirect:
.145f	c9 97		cmp #$97			cmp 	#TKW_PLING 					; !<term> =
.1461	f0 f6		beq $1459			beq 	_CRDefaultLet
.1463	c9 98		cmp #$98			cmp 	#TKW_QMARK 					; ?<term> =
.1465	f0 f2		beq $1459			beq 	_CRDefaultLet
.1467	d0 26		bne $148f			bne 	Unimplemented
.1469					CommandShift1:
.1469	b1 02		lda ($02),y			lda 	(codePtr),y 				; get shifted value
.146b	10 22		bpl $148f			bpl 	Unimplemented 				; we have an error as this should not happen.
.146d	0a		asl a				asl 	a 							; double into X
.146e	aa		tax				tax
.146f	c8		iny				iny 								; advance over it.
.1470	20 76 14	jsr $1476			jsr 	_RunIt 						; we have no jsr (aaaa,X)
.1473	4c 33 14	jmp $1433			jmp 	CRNextInstruction
.1476					_RunIt:
.1476	7c 51 15	jmp ($1551,x)			jmp 	(Group1Vectors-12,x) 		; and do the code.
.1479					CommandShift2:
.1479	a9 ff		lda #$ff			lda 	#$FF 						; $FF means command not unary function.
.147b	20 32 25	jsr $2532		jsr	extensionHandler
.147e	4c 33 14	jmp $1433			jmp 	CRNextInstruction
.1481					CommandColon:
.1481	60		rts				rts
.1482					ResetCodeAddress:
.1482	ad c8 0a	lda $0ac8			lda 	basePage 					; copy basePage to code Pointer
.1485	85 02		sta $02				sta 	codePtr
.1487	ad c9 0a	lda $0ac9			lda 	basePage+1
.148a	85 03		sta $03				sta 	codePtr+1
.148c	a0 03		ldy #$03			ldy 	#3 							; offset after offset link and line#
.148e	60		rts				rts
.148f					Unimplemented:
.148f	a2 01		ldx #$01			ldx 	#ErrorID_Missing
.1491	20 d2 22	jsr $22d2		jsr	errorHandler
.1494					TKErr01:
.1494					TKErr02:
.1494					TKErr03:
.1494					TKErr04:
.1494					TKErr05:
.1494					TKErr06:
.1494					TKErr07:
.1494					TKErr08:
.1494					TKErr09:
.1494					TKErr10:
.1494	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.1496	20 d2 22	jsr $22d2		jsr	errorHandler

;******  Processing file: main/commands/../../generated/tokenvectors0.inc

.1499					Group0Vectors:
>1499	51 16					.word	AdvanceNextLine          ; $80 [[eol]]
>149b	69 14					.word	CommandShift1            ; $81 [[sh1]]
>149d	79 14					.word	CommandShift2            ; $82 [[sh2]]
>149f	94 14					.word	TKErr09                  ; $83 [[sh3]]
>14a1	94 14					.word	TKErr10                  ; $84 [[fpc]]
>14a3	94 14					.word	TKErr08                  ; $85 [[str]]
>14a5	da 17					.word	AndHandler               ; $86 and
>14a7	c7 17					.word	OrHandler                ; $87 or
>14a9	b4 17					.word	XorHandler               ; $88 xor
>14ab	fc 18					.word	CompareGreaterEq         ; $89 >=
>14ad	06 19					.word	CompareLessEq            ; $8a <=
>14af	e8 18					.word	CompareGreater           ; $8b >
>14b1	de 18					.word	CompareLess              ; $8c <
>14b3	d4 18					.word	CompareEquals            ; $8d =
>14b5	f2 18					.word	CompareNotEquals         ; $8e <>
>14b7	45 17					.word	AddHandler               ; $8f +
>14b9	68 17					.word	SubHandler               ; $90 -
>14bb	00 18					.word	ShrHandler               ; $91 >>
>14bd	ed 17					.word	ShlHandler               ; $92 <<
>14bf	7b 17					.word	MulHandler               ; $93 *
>14c1	8e 17					.word	DivHandler               ; $94 /
>14c3	a1 17					.word	ModHandler               ; $95 mod
>14c5	39 18					.word	PowerHandler             ; $96 ^
>14c7	13 18					.word	WordRefHandler           ; $97 !
>14c9	26 18					.word	ByteRefHandler           ; $98 ?
>14cb	3f 2c					.word	Command_Repeat           ; $99 repeat
>14cd	6d 2c					.word	Command_While            ; $9a while
>14cf	30 2b					.word	Command_FOR              ; $9b for
>14d1	8b 10					.word	CommandIf                ; $9c if
>14d3	94 14					.word	TKErr04                  ; $9d defproc
>14d5	4c 2c					.word	Command_Until            ; $9e until
>14d7	90 2c					.word	Command_Wend             ; $9f wend
>14d9	91 2b					.word	Command_NEXT             ; $a0 next
>14db	94 14					.word	TKErr06                  ; $a1 then
>14dd	c6 10					.word	Command_ENDIF            ; $a2 endif
>14df	9a 13					.word	ReturnProc               ; $a3 endproc
>14e1	d5 1a					.word	UnaryParenthesis         ; $a4 (
>14e3	2d 1c					.word	UnaryLen                 ; $a5 len(
>14e5	71 1c					.word	UnarySgn                 ; $a6 sgn(
>14e7	5a 1c					.word	UnaryAbs                 ; $a7 abs(
>14e9	ca 1c					.word	Unary_Random             ; $a8 random(
>14eb	14 1d					.word	Unary_Page               ; $a9 page
>14ed	35 21					.word	MInt32True               ; $aa true
>14ef	39 21					.word	MInt32False              ; $ab false
>14f1	df 1c					.word	Unary_Min                ; $ac min(
>14f3	e3 1c					.word	Unary_Max                ; $ad max(
>14f5	ca 1d					.word	UnarySys                 ; $ae sys(
>14f7	8d 1d					.word	UnaryTimer               ; $af timer(
>14f9	aa 1b					.word	EventFunction            ; $b0 event(
>14fb	b6 1d					.word	UnaryGet                 ; $b1 get(
>14fd	a6 1d					.word	UnaryInkey               ; $b2 inkey(
>14ff	61 1d					.word	UnaryAlloc               ; $b3 alloc(
>1501	f2 1d					.word	ExecChr                  ; $b4 chr$(
>1503	22 1e					.word	ExecLeft                 ; $b5 left$(
>1505	3f 1e					.word	ExecMid                  ; $b6 mid$(
>1507	67 1e					.word	ExecRight                ; $b7 right$(
>1509	16 19					.word	Event_Str                ; $b8 str$(
>150b	45 19					.word	UnaryVal                 ; $b9 val(
>150d	88 1c					.word	UnaryPeek                ; $ba peek(
>150f	8e 1c					.word	UnaryDeek                ; $bb deek(
>1511	94 1c					.word	UnaryLeek                ; $bc leek(
>1513	4b 1c					.word	UnaryAsc                 ; $bd asc(
>1515	3f 1d					.word	UnaryIntToFloat          ; $be int(
>1517	52 1d					.word	UnaryFloatToInt          ; $bf float(
>1519	48 19					.word	UnaryIsVal               ; $c0 isval(
>151b	09 1e					.word	ExecUpper                ; $c1 upper$(
>151d	06 1e					.word	ExecLower                ; $c2 lower$(
>151f	22 1d					.word	UnaryReference           ; $c3 @
>1521	38 1d					.word	UnaryComplement          ; $c4 ~
>1523	35 1d					.word	UnaryHexMarker           ; $c5 &
>1525	94 14					.word	TKErr01                  ; $c6 )
>1527	81 14					.word	CommandColon             ; $c7 :
>1529	94 14					.word	TKErr02                  ; $c8 ,
>152b	94 14					.word	TKErr03                  ; $c9 ;
>152d	1b 14					.word	Command_Rem2             ; $ca '
>152f	94 14					.word	TKErr07                  ; $cb to
>1531	94 14					.word	TKErr05                  ; $cc step
>1533	2d 13					.word	CallProc                 ; $cd proc
>1535	45 11					.word	CommandLocal             ; $ce local
>1537	7d 10					.word	Command_Dim              ; $cf dim
>1539	1b 14					.word	Command_Rem              ; $d0 rem
>153b	c7 10					.word	CommandLet               ; $d1 let
>153d	8f 14					.word	Unimplemented            ; $d2 input
>153f	c0 10					.word	Command_ELSE             ; $d3 else
>1541	f8 16					.word	Command_VDU              ; $d4 vdu
>1543	92 12					.word	Command_Print            ; $d5 print
>1545	c6 16					.word	CommandGOTO              ; $d6 goto
>1547	9b 16					.word	CommandGOSUB             ; $d7 gosub
>1549	ae 16					.word	CommandRETURN            ; $d8 return
>154b	e0 13					.word	CommandData              ; $d9 data
>154d	1f 10					.word	Command_Assert           ; $da assert
>154f	55 12					.word	Command_Poke             ; $db poke
>1551	59 12					.word	Command_Doke             ; $dc doke
>1553	5d 12					.word	Command_Loke             ; $dd loke
>1555	6b 16					.word	Command_Ink              ; $de ink
>1557	76 16					.word	Command_Paper            ; $df paper
>1559	65 16					.word	Command_CLS              ; $e0 cls
>155b	81 16					.word	Command_Locate           ; $e1 locate

;******  Return to file: main/commands/run.asm


;******  Processing file: main/commands/../../generated/tokenvectors1.inc

.155d					Group1Vectors:
>155d	2d 10					.word	CommandClear             ; $86 clear
>155f	8f 14					.word	Unimplemented            ; $87 load
>1561	8f 14					.word	Unimplemented            ; $88 save
>1563	8f 14					.word	Unimplemented            ; $89 list
>1565	47 12					.word	Command_New              ; $8a new
>1567	28 14					.word	Command_Run              ; $8b run
>1569	b5 13					.word	CommandRead              ; $8c read
>156b	e9 13					.word	CommandRestore           ; $8d restore
>156d	4e 16					.word	CommandEnd               ; $8e end
>156f	49 16					.word	CommandStop              ; $8f stop

;******  Return to file: main/commands/run.asm


;******  Return to file: main/main.asm


;******  Processing file: main/commands/scanner.asm

.0af6					procList:
>0af6							.fill 	2		 					; terminated by name high.
.0af8					yInLine:
>0af8							.fill 	1
.1571					FindProcedure:
.1571	8c f8 0a	sty $0af8			sty 	yInLine
.1574	20 2f 16	jsr $162f			jsr 	CalculateProcedureHash		; calculate the hash of the procedure.
.1577	85 06		sta $06				sta 	temp1
.1579	ad f6 0a	lda $0af6			lda		procList 					; put procList address in temp2
.157c	85 08		sta $08				sta 	temp2
.157e	ad f7 0a	lda $0af7			lda 	procList+1
.1581	85 09		sta $09				sta 	temp2+1
.1583	a0 00		ldy #$00			ldy 	#0 							; position in this table.
.1585					_FPLoop:
.1585	b1 08		lda ($08),y			lda 	(temp2),y
.1587	f0 4f		beq $15d8			beq 	_FPError 					; if so, we don't know this procedure.
.1589	85 05		sta $05				sta 	temp0+1 					; copy MSB/LSB to temp0 as we go.
.158b	c8		iny				iny
.158c	b1 08		lda ($08),y			lda 	(temp2),y
.158e	85 04		sta $04				sta 	temp0
.1590	c8		iny				iny
.1591	b1 08		lda ($08),y			lda 	(temp2),y					; check the procedure hash.
.1593	c5 06		cmp $06				cmp 	temp1
.1595	d0 2b		bne $15c2			bne 	_FPNext 					; hash is different, go to next.
.1597	38		sec				sec
.1598	ad f8 0a	lda $0af8			lda 	yInLine 					; position in line must be at least 4
.159b	e9 04		sbc #$04			sbc 	#4
.159d	18		clc				clc
.159e	65 02		adc $02				adc 	codePtr
.15a0	85 0a		sta $0a				sta 	temp3
.15a2	a5 03		lda $03				lda 	codePtr+1
.15a4	69 00		adc #$00			adc 	#0
.15a6	85 0b		sta $0b				sta 	temp3+1
.15a8	98		tya				tya
.15a9	48		pha				pha
.15aa	a0 04		ldy #$04			ldy 	#4
.15ac					_FPCName:
.15ac	b1 0a		lda ($0a),y			lda 	(temp3),y 					; check the same
.15ae	d1 04		cmp ($04),y			cmp 	(temp0),y
.15b0	d0 0e		bne $15c0			bne 	_FPpulYNext 				; if different go to next one.
.15b2	c8		iny				iny
.15b3	c9 3a		cmp #$3a			cmp 	#$3A
.15b5	90 f5		bcc $15ac			bcc 	_FPCName 					; compare the whole lot....
.15b7	68		pla				pla 								; throw away the saved Y
.15b8	98		tya				tya 								; length of name is Y-4
.15b9	38		sec				sec
.15ba	e9 04		sbc #$04			sbc 	#4
.15bc	ac f8 0a	ldy $0af8			ldy 	yInLine  					; get the original Y back
.15bf	60		rts				rts
.15c0					_FPpulYNext:
.15c0	68		pla				pla
.15c1	a8		tay				tay
.15c2					_FPNext:
.15c2	c8		iny				iny 								; next procedure record.
.15c3	10 c0		bpl $1585			bpl 	_FPLoop 					; if done 128 already ... e.g. Y -ve
.15c5	98		tya				tya 								; subtract 128 from Y
.15c6	38		sec				sec
.15c7	e9 80		sbc #$80			sbc 	#128
.15c9	a8		tay				tay
.15ca	18		clc				clc 								; add 128 to temp2, so we can have more than
.15cb	a5 08		lda $08				lda 	temp2 						; 255/3 = 85 procedures
.15cd	69 80		adc #$80			adc 	#128
.15cf	85 08		sta $08				sta 	temp2
.15d1	90 b2		bcc $1585			bcc 	_FPLoop
.15d3	e6 09		inc $09				inc 	temp2+1
.15d5	4c 85 15	jmp $1585			jmp 	_FPLoop
.15d8					_FPError:
.15d8	a2 17		ldx #$17			ldx 	#ErrorID_NoProc
.15da	20 d2 22	jsr $22d2		jsr	errorHandler
.15dd					ScanProc:
.15dd	98		tya				tya
.15de	48		pha				pha
.15df	a5 0f		lda $0f				lda 	lowMemory 					; copy the start of the procList, at low memory
.15e1	8d f6 0a	sta $0af6			sta 	procList
.15e4	a5 10		lda $10				lda 	lowMemory+1
.15e6	8d f7 0a	sta $0af7			sta 	procList+1
.15e9	20 82 14	jsr $1482			jsr 	ResetCodeAddress 			; back to the start.
.15ec					_ScanLoop:
.15ec	a0 00		ldy #$00			ldy 	#0 							; check reached program end
.15ee	b1 02		lda ($02),y			lda 	(codePtr),y
.15f0	f0 2a		beq $161c			beq 	_ScanExit
.15f2	a0 03		ldy #$03			ldy 	#3							; get first token
.15f4	b1 02		lda ($02),y			lda 	(codePtr),y
.15f6	c9 9d		cmp #$9d			cmp 	#TKW_DEFPROC				; skip next if not DEFPROC
.15f8	d0 12		bne $160c			bne 	_ScanNext
.15fa	a5 03		lda $03				lda 	codePtr+1 					; write high and low
.15fc	20 24 16	jsr $1624			jsr 	_ScanWrite
.15ff	a5 02		lda $02				lda 	codePtr
.1601	20 24 16	jsr $1624			jsr 	_ScanWrite
.1604	a0 04		ldy #$04			ldy 	#4 							; start of name part
.1606	20 2f 16	jsr $162f			jsr 	CalculateProcedureHash 		; calculate procedure hash
.1609	20 24 16	jsr $1624			jsr 	_ScanWrite
.160c					_ScanNext:
.160c	18		clc				clc
.160d	a0 00		ldy #$00			ldy 	#0
.160f	b1 02		lda ($02),y			lda 	(codePtr),y
.1611	65 02		adc $02				adc 	codePtr
.1613	85 02		sta $02				sta 	codePtr
.1615	90 d5		bcc $15ec			bcc 	_ScanLoop
.1617	e6 03		inc $03				inc 	codePtr+1
.1619	4c ec 15	jmp $15ec			jmp 	_ScanLoop
.161c					_ScanExit:
.161c	a9 00		lda #$00			lda 	#0 							; write ending zero.
.161e	20 24 16	jsr $1624			jsr 	_ScanWrite
.1621	68		pla				pla
.1622	a8		tay				tay
.1623	60		rts				rts
.1624					_ScanWrite:
.1624	a0 00		ldy #$00			ldy 	#0
.1626	91 0f		sta ($0f),y			sta 	(lowMemory),y
.1628	e6 0f		inc $0f				inc 	lowMemory
.162a	d0 02		bne $162e			bne 	_SWNoCarry
.162c	e6 10		inc $10				inc 	lowMemory+1
.162e					_SWNoCarry:
.162e	60		rts				rts
.162f					CalculateProcedureHash:
.162f	a9 00		lda #$00			lda 	#0 							; clear hash.
.1631	85 04		sta $04				sta 	temp0
.1633					_CPHLoop:
.1633	18		clc				clc 								; add character and rotate and add carry back in
.1634	b1 02		lda ($02),y			lda 	(codePtr),y
.1636	65 04		adc $04				adc 	temp0
.1638	6a		ror a				ror 	a
.1639	69 0d		adc #$0d			adc 	#13 						; primes usually good for this sort of thing.
.163b	85 04		sta $04				sta 	temp0 						; (down with this sort of thing)
.163d	b1 02		lda ($02),y			lda 	(codePtr),y
.163f	c8		iny				iny 								; advance incase we go round again.
.1640	c9 3a		cmp #$3a			cmp 	#$3A
.1642	90 ef		bcc $1633			bcc 	_CPHLoop
.1644	a5 04		lda $04				lda 	temp0
.1646	a9 aa		lda #$aa			lda 	#$AA
.1648	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/stopend.asm

.1649					CommandStop:
.1649	a2 06		ldx #$06			ldx 	#ErrorID_Stop
.164b	20 d2 22	jsr $22d2		jsr	errorHandler
.164e					CommandEnd:
.164e	4c ff ff	jmp $ffff			jmp 	$FFFF 						; fudge to crash out of emulator
.1651					AdvanceNextLine:
.1651	a0 00		ldy #$00			ldy 	#0 							; get offset
.1653	b1 02		lda ($02),y			lda 	(codePtr),y
.1655	18		clc				clc 								; add to codePtr
.1656	65 02		adc $02				adc 	codePtr
.1658	85 02		sta $02				sta 	codePtr
.165a	90 02		bcc $165e			bcc 	_ANLNoCarry
.165c	e6 03		inc $03				inc 	codePtr+1
.165e					_ANLNoCarry:
.165e	b1 02		lda ($02),y			lda 	(codePtr),y 				; if end of program (or was just stand alone.
.1660	f0 ec		beq $164e			beq 	CommandEnd 					; execute END
.1662	a0 03		ldy #$03			ldy 	#3 							; start of tokens on line.
.1664	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/text.asm

.1665					Command_CLS:
.1665	a2 00		ldx #$00		ldx	#0
.1667	20 bb 22	jsr $22bb		jsr	deviceHandler
.166a	60		rts				rts
.166b					Command_Ink:
.166b	a2 00		ldx #$00			ldx 	#0
.166d	20 26 1b	jsr $1b26			jsr 	EvaluateSmallInteger
.1670	a2 06		ldx #$06		ldx	#6
.1672	20 bb 22	jsr $22bb		jsr	deviceHandler
.1675	60		rts				rts
.1676					Command_Paper:
.1676	a2 00		ldx #$00			ldx 	#0
.1678	20 26 1b	jsr $1b26			jsr 	EvaluateSmallInteger
.167b	a2 0c		ldx #$0c		ldx	#12
.167d	20 bb 22	jsr $22bb		jsr	deviceHandler
.1680	60		rts				rts
.1681					Command_Locate:
.1681	a2 00		ldx #$00			ldx 	#0
.1683	20 26 1b	jsr $1b26			jsr 	EvaluateSmallInteger
.1686	20 b9 21	jsr $21b9			jsr 	CheckComma
.1689	e8		inx				inx
.168a	20 26 1b	jsr $1b26			jsr 	EvaluateSmallInteger
.168d	98		tya				tya
.168e	48		pha				pha
.168f	a4 49		ldy $49				ldy 	esInt0+1
.1691	a5 48		lda $48				lda 	esInt0
.1693	a2 0a		ldx #$0a		ldx	#10
.1695	20 bb 22	jsr $22bb		jsr	deviceHandler
.1698	68		pla				pla
.1699	a8		tay				tay
.169a	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/transfer.asm

.169b					CommandGOSUB:
.169b	20 1c 1b	jsr $1b1c			jsr 	EvaluateRootInteger			; get GOSUB line on stack top.
.169e	a2 04		ldx #$04			ldx 	#4 							; allocate 4 bytes on stack for GOSUB
.16a0	a9 47		lda #$47			lda 	#markerGOSUB  				; <marker> <return addr/offset>
.16a2	20 d4 21	jsr $21d4			jsr 	RSClaim
.16a5	a9 01		lda #$01			lda 	#1 							; save position at offset 1.
.16a7	20 00 22	jsr $2200			jsr 	RSSavePosition
.16aa	a2 00		ldx #$00			ldx 	#0 							; point back at GOSUB line
.16ac	f0 1b		beq $16c9			beq 	GotoTOS 					; and do a GOTO there.
.16ae					CommandRETURN:
.16ae	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.16b0	a1 78		lda ($78,x)			lda 	(rsPointer,x)
.16b2	c9 47		cmp #$47			cmp 	#markerGOSUB 						; does it match
.16b4	f0 05		beq $16bb			beq 	_isok
.16b6	a2 0e		ldx #$0e			ldx 	#ErrorID_returnErr
.16b8	20 d2 22	jsr $22d2		jsr	errorHandler
.16bb					_isok:
.16bb	a9 01		lda #$01			lda 	#1
.16bd	20 13 22	jsr $2213			jsr 	RSLoadPosition 				; reload the position from offset 1.
.16c0	a9 04		lda #$04			lda 	#4 							; throw 4 bytes from stack.
.16c2	20 f6 21	jsr $21f6			jsr 	RSFree
.16c5	60		rts				rts
.16c6					CommandGOTO:
.16c6	20 1c 1b	jsr $1b1c			jsr 	EvaluateRootInteger 		; get GOTO line on stack top.
.16c9					GotoTOS:
.16c9	20 82 14	jsr $1482			jsr 	ResetCodeAddress 			; simple search.
.16cc					_GotoSearch:
.16cc	a0 00		ldy #$00			ldy 	#0 							; get offset
.16ce	b1 02		lda ($02),y			lda 	(codePtr),y
.16d0	f0 21		beq $16f3			beq 	_GotoError 					; not found.
.16d2	c8		iny				iny									; check LSB match
.16d3	b1 02		lda ($02),y			lda 	(codePtr),y
.16d5	d5 48		cmp $48,x			cmp 	esInt0,x
.16d7	d0 07		bne $16e0			bne 	_GotoNext
.16d9	c8		iny				iny
.16da	b1 02		lda ($02),y			lda 	(codePtr),y
.16dc	d5 50		cmp $50,x			cmp 	esInt1,x
.16de	f0 10		beq $16f0			beq 	_GotoFound
.16e0					_GotoNext:
.16e0	a0 00		ldy #$00			ldy 	#0 							; go next line
.16e2	b1 02		lda ($02),y			lda 	(codePtr),y
.16e4	18		clc				clc
.16e5	65 02		adc $02				adc 	codePtr
.16e7	85 02		sta $02				sta 	codePtr
.16e9	90 e1		bcc $16cc			bcc 	_GotoSearch
.16eb	e6 03		inc $03				inc 	codePtr+1
.16ed	4c cc 16	jmp $16cc			jmp 	_GotoSearch
.16f0					_GotoFound:
.16f0	a0 03		ldy #$03			ldy 	#3 							; continue from that line
.16f2	60		rts				rts
.16f3					_GotoError:
.16f3	a2 0c		ldx #$0c			ldx 	#ErrorID_LineNumber
.16f5	20 d2 22	jsr $22d2		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/commands/vdu.asm

.16f8					Command_VDU:
.16f8	20 1c 1b	jsr $1b1c			jsr 	EvaluateRootInteger 			; get integer at root.
.16fb	a5 48		lda $48				lda 	esInt0
.16fd	a2 0e		ldx #$0e		ldx	#14
.16ff	20 bb 22	jsr $22bb		jsr	deviceHandler
.1702					_CVNext:
.1702	b1 02		lda ($02),y			lda 	(codePtr),y 					; what follows ?
.1704	c8		iny				iny
.1705	c9 c8		cmp #$c8			cmp 	#TKW_COMMA 						; comma, do again
.1707	f0 ef		beq $16f8			beq 	Command_VDU
.1709	c9 c9		cmp #$c9			cmp 	#TKW_SEMICOLON 					; semicolon, print MSB
.170b	d0 0a		bne $1717			bne 	_CVExit
.170d	a5 50		lda $50				lda 	esInt1
.170f	a2 0e		ldx #$0e		ldx	#14
.1711	20 bb 22	jsr $22bb		jsr	deviceHandler
.1714	4c 02 17	jmp $1702			jmp 	_CVNext
.1717	88		dey		_CVExit:dey
.1718	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/while.asm

.2c6d					Command_While:
.2c6d	a9 57		lda #$57			lda 	#markerWhile 				; gosub marker allocate 4 bytes.
.2c6f	a2 04		ldx #$04			ldx 	#4
.2c71	20 d4 21	jsr $21d4			jsr 	RSClaim 					; create on stack.
.2c74	88		dey				dey
.2c75	a9 01		lda #$01			lda 	#1
.2c77	20 00 22	jsr $2200			jsr 	RSSavePosition 				; save position before the WHILE keyword.
.2c7a	c8		iny				iny
.2c7b	20 1e 1b	jsr $1b1e			jsr 	EvaluateInteger				; get the conditional
.2c7e	20 60 21	jsr $2160			jsr 	MInt32Zero 	 				; if zero, skip forward.
.2c81	f0 01		beq $2c84			beq 	_CWFail
.2c83	60		rts				rts
.2c84					_CWFail:
.2c84	a9 04		lda #$04			lda 	#4
.2c86	20 f6 21	jsr $21f6			jsr 	RSFree 						; close the just opened position.
.2c89	a9 9f		lda #$9f			lda 	#TKW_WEND 					; scan forward past WEND.
.2c8b	aa		tax				tax
.2c8c	20 a8 2c	jsr $2ca8			jsr 	ScanForward
.2c8f	60		rts				rts
.2c90					Command_Wend:
.2c90	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.2c92	a1 78		lda ($78,x)			lda 	(rsPointer,x)
.2c94	c9 57		cmp #$57			cmp 	#markerWHILE 						; does it match
.2c96	f0 05		beq $2c9d			beq 	_isok
.2c98	a2 11		ldx #$11			ldx 	#ErrorID_wendErr
.2c9a	20 d2 22	jsr $22d2		jsr	errorHandler
.2c9d					_isok:
.2c9d	a9 01		lda #$01			lda 	#1
.2c9f	20 13 22	jsr $2213			jsr 	RSLoadPosition				; go back until true
.2ca2	a9 04		lda #$04			lda 	#4
.2ca4	20 f6 21	jsr $21f6			jsr 	RSFree 						; close the loop
.2ca7	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/binary.asm

.1719					BinaryProcess:
.1719	b5 40		lda $40,x			lda 	esType,x 					; or type bytes together and check bit 6.
.171b	15 41		ora $41,x			ora 	esType+1,x
.171d	0a		asl a				asl 	a
.171e	30 0e		bmi $172e			bmi 	_BPStringType 				; if one is set, then string type.
.1720	18		clc				clc 								; return CC for integer
.1721	29 02		and #$02			and 	#$02 						; $02 because of ASL A.
.1723	f0 08		beq $172d			beq 	_BPExit 					; if both integer then return with CC.
.1725	20 33 17	jsr $1733			jsr 	BPMakeBothFloat 			; make both float
.1728	a9 01		lda #$01			lda 	#$01 						; set result type to float
.172a	95 40		sta $40,x			sta 	esType,x
.172c	38		sec				sec 								; and return with carry set.
.172d					_BPExit:
.172d	60		rts				rts
.172e					_BPStringType:
.172e	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.1730	20 d2 22	jsr $22d2		jsr	errorHandler
.1733					BPMakeBothFloat:
.1733	e8		inx				inx
.1734	20 38 17	jsr $1738			jsr 	BPMakeFloat 				; one is a float, so we do both as floats.
.1737	ca		dex				dex
.1738					BPMakeFloat:
.1738	b5 40		lda $40,x			lda 	esType,x 					; get type bit.
.173a	4a		lsr a				lsr 	a
.173b	b0 07		bcs $1744			bcs 	_BPIsFloat
.173d	8a		txa				txa
.173e	a2 1a		ldx #$1a		ldx	#26
.1740	20 c3 25	jsr $25c3		jsr	floatingpointHandler
.1743	aa		tax				tax
.1744					_BPIsFloat:
.1744	60		rts				rts
.1745					AddHandler:
.1745	20 94 19	jsr $1994			jsr 	DereferenceTwo 				; dereference top two on stack.
.1748	b5 40		lda $40,x			lda 	esType,x 					; check two strings.
.174a	35 41		and $41,x			and 	esType+1,x
.174c	29 40		and #$40			and 	#$40 						; if both have bit 6 set ...
.174e	d0 10		bne $1760			bne 	_AHStringConcat				; concatenate strings.
.1750	20 19 17	jsr $1719			jsr 	BinaryProcess 				; check to see if either is float
.1753	b0 03		bcs $1758			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.1755	4c 22 20	jmp $2022			jmp 	MInt32Add 							; else do it as integer.
.1758					_IsFPOperation:
.1758	8a		txa				txa 								; call the relevant fp routine
.1759	a2 02		ldx #$02		ldx	#2
.175b	20 c3 25	jsr $25c3		jsr	floatingpointHandler
.175e	aa		tax				tax
.175f	60		rts				rts
.1760					_AHStringConcat:
.1760	8a		txa				txa
.1761	a2 04		ldx #$04		ldx	#4
.1763	20 5f 28	jsr $285f		jsr	stringHandler
.1766	aa		tax				tax
.1767	60		rts				rts
.1768					SubHandler:
.1768	20 94 19	jsr $1994			jsr 	DereferenceTwo
.176b	20 19 17	jsr $1719			jsr 	BinaryProcess 				; check to see if either is float
.176e	b0 03		bcs $1773			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.1770	4c 3c 20	jmp $203c			jmp 	MInt32Sub 							; else do it as integer.
.1773					_IsFPOperation:
.1773	8a		txa				txa 								; call the relevant fp routine
.1774	a2 10		ldx #$10		ldx	#16
.1776	20 c3 25	jsr $25c3		jsr	floatingpointHandler
.1779	aa		tax				tax
.177a	60		rts				rts
.177b					MulHandler:
.177b	20 94 19	jsr $1994			jsr 	DereferenceTwo
.177e	20 19 17	jsr $1719			jsr 	BinaryProcess 				; check to see if either is float
.1781	b0 03		bcs $1786			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.1783	4c 56 20	jmp $2056			jmp 	MInt32Multiply 							; else do it as integer.
.1786					_IsFPOperation:
.1786	8a		txa				txa 								; call the relevant fp routine
.1787	a2 0a		ldx #$0a		ldx	#10
.1789	20 c3 25	jsr $25c3		jsr	floatingpointHandler
.178c	aa		tax				tax
.178d	60		rts				rts
.178e					DivHandler:
.178e	20 94 19	jsr $1994			jsr 	DereferenceTwo
.1791	20 19 17	jsr $1719			jsr 	BinaryProcess 				; check to see if either is float
.1794	b0 03		bcs $1799			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.1796	4c 1a 1f	jmp $1f1a			jmp 	MInt32SDivide 							; else do it as integer.
.1799					_IsFPOperation:
.1799	8a		txa				txa 								; call the relevant fp routine
.179a	a2 06		ldx #$06		ldx	#6
.179c	20 c3 25	jsr $25c3		jsr	floatingpointHandler
.179f	aa		tax				tax
.17a0	60		rts				rts
.17a1					ModHandler:
.17a1	20 94 19	jsr $1994			jsr 	DereferenceTwo
.17a4	20 19 17	jsr $1719			jsr 	BinaryProcess 				; check to see if either is float
.17a7	b0 03		bcs $17ac			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.17a9	4c 98 1f	jmp $1f98			jmp 	MInt32Modulus 							; else do it as integer.
.17ac					_IsFPOperation:
.17ac	8a		txa				txa 								; call the relevant fp routine
.17ad	a2 08		ldx #$08		ldx	#8
.17af	20 c3 25	jsr $25c3		jsr	floatingpointHandler
.17b2	aa		tax				tax
.17b3	60		rts				rts
.17b4					XorHandler:
.17b4	20 94 19	jsr $1994			jsr 	DereferenceTwo
.17b7	20 19 17	jsr $1719			jsr 	BinaryProcess 				; check to see if either is float
.17ba	b0 03		bcs $17bf			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.17bc	4c cc 1e	jmp $1ecc			jmp 	MInt32Xor 							; else do it as integer.
.17bf					_IsFPOperation:
.17bf	8a		txa				txa 								; call the relevant fp routine
.17c0	a2 08		ldx #$08		ldx	#8
.17c2	20 c3 25	jsr $25c3		jsr	floatingpointHandler
.17c5	aa		tax				tax
.17c6	60		rts				rts
.17c7					OrHandler:
.17c7	20 94 19	jsr $1994			jsr 	DereferenceTwo
.17ca	20 19 17	jsr $1719			jsr 	BinaryProcess 				; check to see if either is float
.17cd	b0 03		bcs $17d2			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.17cf	4c b3 1e	jmp $1eb3			jmp 	MInt32Or 							; else do it as integer.
.17d2					_IsFPOperation:
.17d2	8a		txa				txa 								; call the relevant fp routine
.17d3	a2 08		ldx #$08		ldx	#8
.17d5	20 c3 25	jsr $25c3		jsr	floatingpointHandler
.17d8	aa		tax				tax
.17d9	60		rts				rts
.17da					AndHandler:
.17da	20 94 19	jsr $1994			jsr 	DereferenceTwo
.17dd	20 19 17	jsr $1719			jsr 	BinaryProcess 				; check to see if either is float
.17e0	b0 03		bcs $17e5			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.17e2	4c 9a 1e	jmp $1e9a			jmp 	MInt32And 							; else do it as integer.
.17e5					_IsFPOperation:
.17e5	8a		txa				txa 								; call the relevant fp routine
.17e6	a2 08		ldx #$08		ldx	#8
.17e8	20 c3 25	jsr $25c3		jsr	floatingpointHandler
.17eb	aa		tax				tax
.17ec	60		rts				rts
.17ed					ShlHandler:
.17ed	20 94 19	jsr $1994			jsr 	DereferenceTwo
.17f0	20 19 17	jsr $1719			jsr 	BinaryProcess 				; check to see if either is float
.17f3	b0 03		bcs $17f8			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.17f5	4c 6e 18	jmp $186e			jmp 	Mint32ShiftLeftX 							; else do it as integer.
.17f8					_IsFPOperation:
.17f8	8a		txa				txa 								; call the relevant fp routine
.17f9	a2 08		ldx #$08		ldx	#8
.17fb	20 c3 25	jsr $25c3		jsr	floatingpointHandler
.17fe	aa		tax				tax
.17ff	60		rts				rts
.1800					ShrHandler:
.1800	20 94 19	jsr $1994			jsr 	DereferenceTwo
.1803	20 19 17	jsr $1719			jsr 	BinaryProcess 				; check to see if either is float
.1806	b0 03		bcs $180b			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.1808	4c 71 18	jmp $1871			jmp 	MInt32ShiftRightX 							; else do it as integer.
.180b					_IsFPOperation:
.180b	8a		txa				txa 								; call the relevant fp routine
.180c	a2 08		ldx #$08		ldx	#8
.180e	20 c3 25	jsr $25c3		jsr	floatingpointHandler
.1811	aa		tax				tax
.1812	60		rts				rts
.1813					WordRefHandler:
.1813	20 94 19	jsr $1994			jsr 	DereferenceTwo
.1816	20 19 17	jsr $1719			jsr 	BinaryProcess 				; check to see if either is float
.1819	b0 03		bcs $181e			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.181b	4c 60 18	jmp $1860			jmp 	MInt32WordIndirect 							; else do it as integer.
.181e					_IsFPOperation:
.181e	8a		txa				txa 								; call the relevant fp routine
.181f	a2 08		ldx #$08		ldx	#8
.1821	20 c3 25	jsr $25c3		jsr	floatingpointHandler
.1824	aa		tax				tax
.1825	60		rts				rts
.1826					ByteRefHandler:
.1826	20 94 19	jsr $1994			jsr 	DereferenceTwo
.1829	20 19 17	jsr $1719			jsr 	BinaryProcess 				; check to see if either is float
.182c	b0 03		bcs $1831			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.182e	4c 64 18	jmp $1864			jmp 	MInt32ByteIndirect 							; else do it as integer.
.1831					_IsFPOperation:
.1831	8a		txa				txa 								; call the relevant fp routine
.1832	a2 08		ldx #$08		ldx	#8
.1834	20 c3 25	jsr $25c3		jsr	floatingpointHandler
.1837	aa		tax				tax
.1838	60		rts				rts
.1839					PowerHandler:
.1839	20 94 19	jsr $1994			jsr 	DereferenceTwo
.183c	20 19 17	jsr $1719			jsr 	BinaryProcess 				; check to see if either is float
.183f	b0 03		bcs $1844			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.1841	4c 4c 18	jmp $184c			jmp 	PowerInteger 							; else do it as integer.
.1844					_IsFPOperation:
.1844	8a		txa				txa 								; call the relevant fp routine
.1845	a2 16		ldx #$16		ldx	#22
.1847	20 c3 25	jsr $25c3		jsr	floatingpointHandler
.184a	aa		tax				tax
.184b	60		rts				rts
.184c					PowerInteger:
.184c	20 33 17	jsr $1733			jsr 	BPMakeBothFloat				; make them float.
.184f	8a		txa				txa
.1850	a2 16		ldx #$16		ldx	#22
.1852	20 c3 25	jsr $25c3		jsr	floatingpointHandler
.1855	a2 12		ldx #$12		ldx	#18
.1857	20 c3 25	jsr $25c3		jsr	floatingpointHandler
.185a	aa		tax				tax
.185b	a9 00		lda #$00			lda 	#0 							; make type integer
.185d	95 40		sta $40,x			sta 	esType,x
.185f	60		rts				rts
.1860					Mint32WordIndirect:
.1860	a9 80		lda #$80			lda 	#$80 				 		; word reference type
.1862	d0 02		bne $1866			bne 	Min32Indirect
.1864					Mint32ByteIndirect:
.1864	a9 a0		lda #$a0			lda 	#$A0 						; byte reference type
.1866					Min32Indirect:
.1866	48		pha				pha 								; save the indirection
.1867	20 22 20	jsr $2022			jsr 	MInt32Add 					; add a!b a?b
.186a	68		pla				pla 								; and set the type to reference.
.186b	95 40		sta $40,x			sta 	esType,x
.186d	60		rts				rts
.186e					Mint32ShiftLeftX:
.186e	18		clc				clc
.186f	90 01		bcc $1872			bcc 	Mint32Shift
.1871					Mint32ShiftRightX:
.1871	38		sec				sec
.1872					Mint32Shift:
.1872	08		php				php 								; save carry flag on stack.
.1873	b5 51		lda $51,x			lda 	esInt1+1,x 					; if shift >= 32 then it is zero.
.1875	15 59		ora $59,x			ora 	esInt2+1,x
.1877	15 61		ora $61,x			ora 	esInt3+1,x
.1879	d0 1e		bne $1899			bne 	_MShiftZero
.187b	b5 49		lda $49,x			lda 	esInt0+1,x
.187d	c9 20		cmp #$20			cmp 	#32
.187f	b0 18		bcs $1899			bcs 	_MShiftZero
.1881					_MShiftLoop:
.1881	b5 49		lda $49,x			lda 	esInt0+1,x 					; check count is zero
.1883	f0 12		beq $1897			beq 	_MShiftExit
.1885	d6 49		dec $49,x			dec 	esInt0+1,x
.1887	28		plp				plp 								; restore and save carry
.1888	08		php				php
.1889	90 06		bcc $1891			bcc 	_MShiftLeft
.188b	20 57 21	jsr $2157			jsr 	Mint32ShiftRight
.188e	4c 81 18	jmp $1881			jmp 	_MShiftLoop
.1891					_MShiftLeft:
.1891	20 4e 21	jsr $214e			jsr 	Mint32ShiftLeft
.1894	4c 81 18	jmp $1881			jmp 	_MShiftLoop
.1897					_MShiftExit:
.1897	28		plp				plp	 								; throw saved carry and exit
.1898	60		rts				rts
.1899					_MShiftZero:
.1899	4c 39 21	jmp $2139			jmp 	MInt32False 				; return 0.

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/compare.asm

.189c					PerformComparison:
.189c	20 94 19	jsr $1994			jsr 	DereferenceTwo 				; make both values.
.189f	b5 40		lda $40,x			lda 	esType,x 					; check for two strings.
.18a1	35 41		and $41,x			and 	esType+1,x
.18a3	0a		asl a				asl 	a
.18a4	30 1d		bmi $18c3			bmi 	_PCIsString
.18a6	b5 40		lda $40,x			lda 	esType,x 					; check either is floating point.
.18a8	15 41		ora $41,x			ora 	esType+1,x
.18aa	0a		asl a				asl 	a 							; shift bit 6 (string) to bit 7
.18ab	30 22		bmi $18cf			bmi 	_PCError
.18ad	29 02		and #$02			and 	#$02 						; because of ASL, check type in bit 0
.18af	f0 0f		beq $18c0			beq 	_PCIsInteger 				; if not two integers
.18b1	20 33 17	jsr $1733			jsr 	BPMakeBothFloat 			; make both float
.18b4	8a		txa				txa
.18b5	a2 04		ldx #$04		ldx	#4
.18b7	20 c3 25	jsr $25c3		jsr	floatingpointHandler
.18ba	86 0c		stx $0c				stx 	tempShort 					; save result
.18bc	aa		tax				tax
.18bd	a5 0c		lda $0c				lda 	tempShort
.18bf	60		rts				rts
.18c0					_PCIsInteger:
.18c0	4c e5 1e	jmp $1ee5			jmp 	MInt32Compare
.18c3					_PCIsString:
.18c3	8a		txa				txa 								; A has SP
.18c4	a2 06		ldx #$06		ldx	#6
.18c6	20 5f 28	jsr $285f		jsr	stringHandler
.18c9	86 0c		stx $0c				stx 	tempShort 					; save result
.18cb	aa		tax				tax 								; put SP back in X and get result.
.18cc	a5 0c		lda $0c				lda 	tempShort
.18ce	60		rts				rts
.18cf					_PCError:
.18cf	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.18d1	20 d2 22	jsr $22d2		jsr	errorHandler
.18d4					CompareEquals:
.18d4	20 9c 18	jsr $189c			jsr 	PerformComparison
.18d7	c9 00		cmp #$00			cmp 	#$00
.18d9	f0 35		beq $1910			beq  	CompareTrue
.18db	4c 13 19	jmp $1913			jmp 	CompareFalse
.18de					CompareLess:
.18de	20 9c 18	jsr $189c			jsr 	PerformComparison
.18e1	c9 ff		cmp #$ff			cmp 	#$FF
.18e3	f0 2b		beq $1910			beq  	CompareTrue
.18e5	4c 13 19	jmp $1913			jmp 	CompareFalse
.18e8					CompareGreater:
.18e8	20 9c 18	jsr $189c			jsr 	PerformComparison
.18eb	c9 01		cmp #$01			cmp 	#$01
.18ed	f0 21		beq $1910			beq  	CompareTrue
.18ef	4c 13 19	jmp $1913			jmp 	CompareFalse
.18f2					CompareNotEquals:
.18f2	20 9c 18	jsr $189c			jsr 	PerformComparison
.18f5	c9 00		cmp #$00			cmp 	#$00
.18f7	d0 17		bne $1910			bne  	CompareTrue
.18f9	4c 13 19	jmp $1913			jmp 	CompareFalse
.18fc					CompareGreaterEq:
.18fc	20 9c 18	jsr $189c			jsr 	PerformComparison
.18ff	c9 ff		cmp #$ff			cmp 	#$FF
.1901	d0 0d		bne $1910			bne  	CompareTrue
.1903	4c 13 19	jmp $1913			jmp 	CompareFalse
.1906					CompareLessEq:
.1906	20 9c 18	jsr $189c			jsr 	PerformComparison
.1909	c9 01		cmp #$01			cmp 	#$01
.190b	d0 03		bne $1910			bne  	CompareTrue
.190d	4c 13 19	jmp $1913			jmp 	CompareFalse
.1910					CompareTrue:
.1910	4c 35 21	jmp $2135			jmp 	MInt32True
.1913					CompareFalse:
.1913	4c 39 21	jmp $2139			jmp 	MInt32False

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/convert.asm

.1916					Event_Str:
.1916	20 08 1b	jsr $1b08			jsr 	EvaluateNumeric 			; get a number.
.1919	b5 40		lda $40,x			lda 	esType,x 					; is it floating point
.191b	d0 13		bne $1930			bne 	_ESFloat
.191d	20 73 19	jsr $1973			jsr 	ConvertGetBase
.1920	a9 cd		lda #$cd			lda 	#(convertBuffer) & $FF
.1922	85 04		sta $04				sta 	temp0
.1924	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.1926	85 05		sta $05				sta 	1+(temp0)
.1928	b5 49		lda $49,x			lda 	esInt0+1,x 					; get the base
.192a	20 8f 20	jsr $208f			jsr 	MInt32ToString 				; convert to string.
.192d	4c 3d 19	jmp $193d			jmp 	_ESCloneExit 				; clone and exit.
.1930					_ESFloat:
.1930	20 ac 21	jsr $21ac			jsr 	CheckRightParen 			; check closing )
.1933	20 3c 11	jsr $113c			jsr 	TOSToTemp0 					; string address in temp0, goes here.
.1936	8a		txa				txa
.1937	a2 14		ldx #$14		ldx	#20
.1939	20 c3 25	jsr $25c3		jsr	floatingpointHandler
.193c	aa		tax				tax
.193d					_ESCloneExit:
.193d	8a		txa				txa
.193e	a2 02		ldx #$02		ldx	#2
.1940	20 5f 28	jsr $285f		jsr	stringHandler
.1943	aa		tax				tax
.1944	60		rts				rts
.1945					UnaryVal:
.1945	38		sec				sec
.1946	b0 01		bcs $1949			bcs 	ValueMain
.1948					UnaryIsVal:
.1948	18		clc				clc
.1949					ValueMain:
.1949	08		php				php 								; save results (CS is value, CC is validation)
.194a	20 13 1b	jsr $1b13			jsr 	EvaluateString
.194d	20 73 19	jsr $1973			jsr 	ConvertGetBase 				; get base, if any.
.1950	98		tya				tya
.1951	48		pha				pha
.1952	20 3c 11	jsr $113c			jsr 	TOSToTemp0 					; string address in temp0, goes here.
.1955	b5 49		lda $49,x			lda 	esInt0+1,x 					; get the base
.1957	29 7f		and #$7f			and 	#$7F 						; ignore the sign bit.
.1959	20 ac 1f	jsr $1fac			jsr 	MInt32FromString 			; convert it back from a string.
.195c	b0 0c		bcs $196a			bcs 	_VMSuccess 					; successfully converted.
.195e	b5 49		lda $49,x			lda 	esInt0+1,x 					; is base the default
.1960	c9 8a		cmp #$8a			cmp 	#$80+10 					; if no, then it is integer only.
.1962	f0 00		beq $1964			beq 	_VMFailed 	 				; so we failed.
.1964					_VMFailed:
.1964	68		pla				pla
.1965	a8		tay				tay
.1966	28		plp				plp
.1967	4c 39 21	jmp $2139			jmp 	MInt32False 				; return 0 whatever.
.196a					_VMSuccess:
.196a	68		pla				pla
.196b	a8		tay				tay
.196c	28		plp				plp 								; if CS the it was val() so we want the value.
.196d	b0 03		bcs $1972			bcs 	_VMExit
.196f	4c 35 21	jmp $2135			jmp 	MInt32True 					; otherwise return true as successful.
.1972					_VMExit:
.1972	60		rts				rts
.1973					ConvertGetBase:
.1973	a9 8a		lda #$8a			lda 	#10+$80 					; default base 10 signed.
.1975	95 49		sta $49,x			sta 	esInt0+1,x
.1977	b1 02		lda ($02),y			lda 	(codePtr),y
.1979	c9 c8		cmp #$c8			cmp 	#TKW_COMMA
.197b	d0 0e		bne $198b			bne 	_CGBDone
.197d	e8		inx				inx 								; next level
.197e	c8		iny				iny 								; skip comma.
.197f	20 26 1b	jsr $1b26			jsr 	EvaluateSmallInteger		; evaluate the base.
.1982	ca		dex				dex
.1983	c9 02		cmp #$02			cmp 	#2
.1985	90 08		bcc $198f			bcc 	_CGBValue
.1987	c9 11		cmp #$11			cmp 	#17
.1989	b0 04		bcs $198f			bcs 	_CGBValue
.198b					_CGBDone:
.198b	20 ac 21	jsr $21ac			jsr 	CheckRightParen
.198e	60		rts				rts
.198f					_CGBValue:
.198f	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.1991	20 d2 22	jsr $22d2		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/dereference.asm

.1994					DereferenceTwo:
.1994	e8		inx				inx
.1995	20 99 19	jsr $1999			jsr 	DereferenceOne
.1998	ca		dex				dex
.1999					DereferenceOne:
.1999	b5 40		lda $40,x			lda 	esType,x
.199b	10 3d		bpl $19da			bpl 	_DRNotReference 			; is it a reference ?
.199d	4a		lsr a				lsr 	a 							; do float dereference if bit 0 set.
.199e	b0 3b		bcs $19db			bcs 	_DRFloatDeReference
.19a0	98		tya				tya
.19a1	48		pha				pha
.19a2	b5 48		lda $48,x			lda 	esInt0,x 					; copy address to temp0
.19a4	85 04		sta $04				sta 	temp0
.19a6	b5 50		lda $50,x			lda 	esInt1,x
.19a8	85 05		sta $05				sta 	temp0+1
.19aa	a9 00		lda #$00			lda 	#0 							; clear esInt1..3
.19ac	95 50		sta $50,x			sta 	esInt1,x
.19ae	95 58		sta $58,x			sta 	esInt2,x
.19b0	95 60		sta $60,x			sta 	esInt3,x
.19b2	b5 40		lda $40,x			lda 	esType,x 					; get the type byte.
.19b4	29 60		and #$60			and 	#$60 						; get string flag ($40) and byte flag ($20)
.19b6	0a		asl a				asl 	a 							; now string ($80) byte ($40)
.19b7	30 0d		bmi $19c6			bmi 	_DeRefString 				; string, 2 bytes only
.19b9	d0 11		bne $19cc			bne 	_DeRefByte 					; byte 1 byte only
.19bb					_DeRefLong:
.19bb	a0 03		ldy #$03			ldy 	#3
.19bd	b1 04		lda ($04),y			lda 	(temp0),y
.19bf	95 60		sta $60,x			sta 	esInt3,x
.19c1	88		dey				dey
.19c2	b1 04		lda ($04),y			lda 	(temp0),y
.19c4	95 58		sta $58,x			sta 	esInt2,x
.19c6					_DeRefString:
.19c6	a0 01		ldy #$01			ldy 	#1
.19c8	b1 04		lda ($04),y			lda 	(temp0),y
.19ca	95 50		sta $50,x			sta 	esInt1,x
.19cc					_DeRefByte:
.19cc	a0 00		ldy #$00			ldy 	#0
.19ce	b1 04		lda ($04),y			lda 	(temp0),y
.19d0	95 48		sta $48,x			sta 	esInt0,x
.19d2	b5 40		lda $40,x			lda 	esType,x 					; clear byte and deref bits.
.19d4	29 40		and #$40			and 	#$40
.19d6	95 40		sta $40,x			sta 	esType,x
.19d8	68		pla				pla
.19d9	a8		tay				tay
.19da					_DRNotReference
.19da	60		rts				rts
.19db					_DRFloatDereference:
.19db	20 3c 11	jsr $113c			jsr 	TOSToTemp0 					; address to deref in temp0
.19de	8a		txa				txa
.19df	a2 1c		ldx #$1c		ldx	#28
.19e1	20 c3 25	jsr $25c3		jsr	floatingpointHandler
.19e4	aa		tax				tax
.19e5	a9 01		lda #$01			lda 	#$01 						; type to FP (float)
.19e7	95 40		sta $40,x			sta 	esType,x
.19e9	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/evaluate.asm

.19ea					EvaluateLevel:
.19ea	48		pha				pha 								; save precedence level.
.19eb	a9 00		lda #$00			lda 	#0 							; zero the current stack level.
.19ed	95 48		sta $48,x			sta 	esInt0,x
.19ef	95 50		sta $50,x			sta 	esInt1,x
.19f1	95 58		sta $58,x			sta 	esInt2,x
.19f3	95 60		sta $60,x			sta 	esInt3,x
.19f5	95 40		sta $40,x			sta 	esType,x 					; zero the type (integer value)
.19f7	b1 02		lda ($02),y			lda 	(codePtr),y	 				; look at first token/character
.19f9	30 21		bmi $1a1c			bmi 	_ELIsToken 					; if -ve could be string, float, or unary function.
.19fb	0a		asl a				asl 	a 							; if 00-3F then will now be PL and it's a variable.
.19fc	30 0a		bmi $1a08			bmi 	_ELIsConstant 				; 40-7F will be -ve and that's an integer constant.
.19fe	8a		txa				txa 								; stack level in X
.19ff	a2 00		ldx #$00		ldx	#0
.1a01	20 27 2b	jsr $2b27		jsr	variableHandler
.1a04	aa		tax				tax
.1a05	4c 45 1a	jmp $1a45			jmp		_ELHasTerm
.1a08					_ELIsConstant:
.1a08	4a		lsr a				lsr 	a 							; get the value back
.1a09	29 3f		and #$3f			and 	#$3F 						; force into range 0-63
.1a0b	95 48		sta $48,x			sta 	esInt0,x 					; and put in LSB.
.1a0d					_ELCheckNext:
.1a0d	c8		iny				iny 								; look at next
.1a0e	b1 02		lda ($02),y			lda 	(codePtr),y
.1a10	49 40		eor #$40			eor 	#$40 						; shift around so 40-7F => 00-3F
.1a12	c9 40		cmp #$40			cmp 	#$40 						; out of range ?
.1a14	b0 2f		bcs $1a45			bcs 	_ELHasTerm 					; done getting the constant.
.1a16	20 5e 1b	jsr $1b5e			jsr 	ELShiftByteIn 				; shift byte into position.
.1a19	4c 0d 1a	jmp $1a0d			jmp 	_ELCheckNext
.1a1c					_ELIsToken:
.1a1c	c9 85		cmp #$85			cmp 	#TOK_STR 					; handle strings.
.1a1e	f0 0f		beq $1a2f			beq 	_ELIsString
.1a20	c9 84		cmp #$84			cmp 	#TOK_FPC 					; if no, then check unary.
.1a22	d0 5f		bne $1a83			bne 	_ELCheckUnary
.1a24	8a		txa				txa 								; put X into A
.1a25	c8		iny				iny 								; skip over the float marker
.1a26	a2 18		ldx #$18		ldx	#24
.1a28	20 c3 25	jsr $25c3		jsr	floatingpointHandler
.1a2b	aa		tax				tax 								; restore X
.1a2c	4c 45 1a	jmp $1a45			jmp 	_ELHasTerm
.1a2f					_ELIsString:
.1a2f	98		tya				tya 								; address of string is codePtr+y+1
.1a30	38		sec				sec
.1a31	65 02		adc $02				adc 	codePtr
.1a33	95 48		sta $48,x			sta 	esInt0,x
.1a35	a5 03		lda $03				lda 	codePtr+1
.1a37	69 00		adc #$00			adc 	#0
.1a39	95 50		sta $50,x			sta 	esInt1,x
.1a3b	a9 40		lda #$40			lda 	#$40 						; set type to string value
.1a3d	95 40		sta $40,x			sta 	esType,x
.1a3f	c8		iny				iny 								; skip over string.
.1a40	98		tya				tya
.1a41	38		sec				sec									; +1 for the length itself.
.1a42	71 02		adc ($02),y			adc 	(codePtr),y
.1a44	a8		tay				tay 								; and fall through to term loop code.
.1a45					_ELHasTerm:
.1a45	b1 02		lda ($02),y			lda 	(codePtr),y
.1a47	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; check in the correct range for binary tokens.
.1a49	90 04		bcc $1a4f			bcc 	_ELPopExit
.1a4b	c9 99		cmp #$99			cmp 	#TOK_STRUCTST
.1a4d	90 02		bcc $1a51			bcc 	_ELHasBinaryTerm
.1a4f					_ELPopExit:
.1a4f	68		pla				pla
.1a50					_ELExit:
.1a50	60		rts				rts
.1a51					_ELHasBinaryTerm:
.1a51	84 0c		sty $0c				sty 	tempShort 					; save position
.1a53	a8		tay				tay 								; use token as an index and get the precedence.
.1a54	b9 06 1b	lda $1b06,y			lda 	ELBinaryOperatorInfo-TOK_BINARYST,y
.1a57	a4 0c		ldy $0c				ldy 	tempShort 					; restore Y
.1a59	85 0c		sta $0c				sta 	tempShort 					; save precedence in memory.
.1a5b	68		pla				pla 								; restore current level.
.1a5c	c5 0c		cmp $0c				cmp 	tempShort 					; if current >= operator then exit
.1a5e	b0 f0		bcs $1a50			bcs 	_ELExit
.1a60	48		pha				pha 								; save current level back on the stack.
.1a61	b1 02		lda ($02),y			lda 	(codePtr),y 				; save the binary operator on the stack and skip it.
.1a63	48		pha				pha
.1a64	c8		iny				iny
.1a65	e8		inx				inx 								; calculate the RHS at the operator precedence.
.1a66	a5 0c		lda $0c				lda 	tempShort
.1a68	20 ea 19	jsr $19ea			jsr 	EvaluateLevel
.1a6b	ca		dex				dex
.1a6c	68		pla				pla 								; get the operator back out.
.1a6d					_ELExecuteA:
.1a6d	86 0c		stx $0c				stx 	tempShort 					; upload the vectors. Would be nice to use jmp (aaaa,x)
.1a6f	0a		asl a				asl 	a 							; but not practical. May use push/rts later.
.1a70	aa		tax				tax
.1a71	bd 99 14	lda $1499,x			lda 	Group0Vectors,x
.1a74	85 04		sta $04				sta 	temp0
.1a76	bd 9a 14	lda $149a,x			lda 	Group0Vectors+1,x
.1a79	85 05		sta $05				sta 	temp0+1
.1a7b	a6 0c		ldx $0c				ldx 	tempShort
.1a7d	20 ca 1a	jsr $1aca			jsr 	_ELCallTemp0
.1a80	4c 45 1a	jmp $1a45			jmp 	_ELHasTerm 					; and loop back round.
.1a83					_ELCheckUnary:
.1a83	c8		iny				iny 								; skip over token.
.1a84	c9 90		cmp #$90			cmp 	#TKW_MINUS 					; is it - term
.1a86	f0 19		beq $1aa1			beq 	_ELMinus
.1a88	c9 97		cmp #$97			cmp 	#TKW_PLING 					; is it ! or ? term
.1a8a	f0 2c		beq $1ab8			beq 	_ELIndirect
.1a8c	c9 98		cmp #$98			cmp 	#TKW_QMARK
.1a8e	f0 28		beq $1ab8			beq 	_ELIndirect
.1a90	c9 83		cmp #$83			cmp 	#TOK_SHIFT3 				; is it the unary extension.
.1a92	f0 39		beq $1acd			beq 	_ELExtension
.1a94	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST 				; must be TOK_UNARYST ... TOK_TOKENS
.1a96	90 04		bcc $1a9c			bcc 	_ELUSyntax
.1a98	c9 c6		cmp #$c6			cmp 	#TOK_TOKENS
.1a9a	90 d1		bcc $1a6d			bcc 	_ELExecuteA 				; if so do that token.
.1a9c					_ELUSyntax:
.1a9c	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.1a9e	20 d2 22	jsr $22d2		jsr	errorHandler
.1aa1					_ELMinus:
.1aa1	20 e7 1a	jsr $1ae7			jsr 	EvaluateNumericTerm 		; get a number to negate.
.1aa4	b5 40		lda $40,x			lda 	esType,x 					; is it integer
.1aa6	f0 0a		beq $1ab2			beq 	_ELMinusInteger
.1aa8	8a		txa				txa
.1aa9	a2 0c		ldx #$0c		ldx	#12
.1aab	20 c3 25	jsr $25c3		jsr	floatingpointHandler
.1aae	aa		tax				tax
.1aaf	4c 45 1a	jmp $1a45			jmp 	_ELHasTerm
.1ab2					_ELMinusInteger:
.1ab2	20 f3 20	jsr $20f3			jsr 	MInt32Negate 				; do int negate
.1ab5	4c 45 1a	jmp $1a45			jmp 	_ELHasTerm
.1ab8					_ELIndirect:
.1ab8	48		pha				pha 								; save what we want (TKW_QMARK TWK_PLING)
.1ab9	20 f0 1a	jsr $1af0			jsr 	EvaluateIntegerTerm 		; integer address
.1abc	68		pla				pla
.1abd	49 97		eor #$97			eor 	#TKW_PLING 					; now $00 if !
.1abf	f0 02		beq $1ac3			beq 	_ELHaveModifier
.1ac1	a9 20		lda #$20			lda 	#$20 						; now $00 if !, $20 if ?
.1ac3					_ELHaveModifier:
.1ac3	09 80		ora #$80			ora 	#$80						; make it the appropriate reference.
.1ac5	95 40		sta $40,x			sta 	esType,x
.1ac7	4c 45 1a	jmp $1a45			jmp 	_ELHasTerm
.1aca					_ELCallTemp0:
.1aca	6c 04 00	jmp ($0004)			jmp 	(temp0)
.1acd					_ELExtension:
.1acd	8a		txa				txa 								; stack pos in A
.1ace	20 32 25	jsr $2532		jsr	extensionHandler
.1ad1	aa		tax				tax 								; restore stack
.1ad2	4c 45 1a	jmp $1a45			jmp 	_ELHasTerm
.1ad5					UnaryParenthesis:
.1ad5	a9 00		lda #$00			lda 	#0 							; ( is a unary function ....
.1ad7	20 ea 19	jsr $19ea			jsr 	EvaluateLevel
.1ada	20 ac 21	jsr $21ac			jsr 	CheckRightParen 			; check for )
.1add	60		rts				rts
.1ade					EvaluateTerm:
.1ade	a9 0f		lda #$0f			lda 	#15
.1ae0	20 ea 19	jsr $19ea			jsr 	EvaluateLevel
.1ae3	20 99 19	jsr $1999			jsr 	DereferenceOne
.1ae6	60		rts				rts
.1ae7					EvaluateNumericTerm:
.1ae7	20 de 1a	jsr $1ade			jsr 	EvaluateTerm
.1aea	b5 40		lda $40,x			lda 	esType,x
.1aec	0a		asl a				asl 	a 							; see if it's a string.
.1aed	30 09		bmi $1af8			bmi 	ENTType
.1aef	60		rts				rts
.1af0					EvaluateIntegerTerm:
.1af0	20 de 1a	jsr $1ade			jsr 	EvaluateTerm
.1af3	b5 40		lda $40,x			lda 	esType,x
.1af5	d0 01		bne $1af8			bne 	ENTType
.1af7	60		rts				rts
.1af8					ENTType:
.1af8	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.1afa	20 d2 22	jsr $22d2		jsr	errorHandler
.1afd					EvaluateRoot:
.1afd	a2 00		ldx #$00			ldx 	#0
.1aff					Evaluate:
.1aff	a9 00		lda #$00			lda 	#0
.1b01	20 ea 19	jsr $19ea			jsr 	EvaluateLevel
.1b04	20 99 19	jsr $1999			jsr 	DereferenceOne
.1b07	60		rts				rts
.1b08					EvaluateNumeric:
.1b08	20 ff 1a	jsr $1aff			jsr 	Evaluate
.1b0b	b5 40		lda $40,x			lda 	esType,x
.1b0d	0a		asl a				asl 	a 							; see if it's a string.
.1b0e	30 e8		bmi $1af8			bmi 	ENTType
.1b10	4a		lsr a				lsr 	a 							; shift float flag into carry.
.1b11	4a		lsr a				lsr 	a
.1b12	60		rts				rts
.1b13					EvaluateString:
.1b13	20 ff 1a	jsr $1aff			jsr 	Evaluate
.1b16	b5 40		lda $40,x			lda 	esType,x
.1b18	0a		asl a				asl 	a 							; see if it's a string.
.1b19	10 dd		bpl $1af8			bpl 	ENTType
.1b1b	60		rts				rts
.1b1c					EvaluateRootInteger:
.1b1c	a2 00		ldx #$00			ldx 	#0
.1b1e					EvaluateInteger:
.1b1e	20 ff 1a	jsr $1aff			jsr 	Evaluate
.1b21	b5 40		lda $40,x			lda 	esType,x
.1b23	d0 d3		bne $1af8			bne 	ENTType
.1b25	60		rts				rts
.1b26					EvaluateSmallInteger:
.1b26	20 1e 1b	jsr $1b1e			jsr 	EvaluateInteger
.1b29	b5 50		lda $50,x			lda 	esInt1,x
.1b2b	15 58		ora $58,x			ora 	esInt2,x
.1b2d	15 60		ora $60,x			ora 	esInt3,x
.1b2f	d0 03		bne $1b34			bne 	_ESIValue
.1b31	b5 48		lda $48,x			lda 	esInt0,x
.1b33	60		rts				rts
.1b34					_ESIValue:
.1b34	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.1b36	20 d2 22	jsr $22d2		jsr	errorHandler
.1b39					LinkEvaluate:
.1b39	aa		tax				tax
.1b3a	20 ff 1a	jsr $1aff			jsr 	Evaluate
.1b3d	8a		txa				txa
.1b3e	60		rts				rts
.1b3f					LinkEvaluateInteger:
.1b3f	aa		tax				tax
.1b40	20 1e 1b	jsr $1b1e			jsr 	EvaluateInteger
.1b43	8a		txa				txa
.1b44	60		rts				rts
.1b45					LinkEvaluateSmallInt:
.1b45	aa		tax				tax
.1b46	20 26 1b	jsr $1b26			jsr 	EvaluateSmallInteger
.1b49	8a		txa				txa
.1b4a	60		rts				rts
.1b4b					EvaluateReference:
.1b4b	ad 9d 1b	lda $1b9d			lda 	ELBinaryOperatorInfo+TKW_PLING-TOK_BINARYST
.1b4e	38		sec				sec 								; sub 1 to allow a!x b?x to work.
.1b4f	e9 01		sbc #$01			sbc 	#1
.1b51	20 ea 19	jsr $19ea			jsr 	EvaluateLevel
.1b54	b5 40		lda $40,x			lda 	esType,x
.1b56	10 01		bpl $1b59			bpl 	_ERFail
.1b58	60		rts				rts
.1b59					_ERFail:
.1b59	a2 0b		ldx #$0b			ldx 	#ErrorID_NoReference
.1b5b	20 d2 22	jsr $22d2		jsr	errorHandler
.1b5e					ELShiftByteIn:
.1b5e	48		pha				pha 								; save bits to shift in.
.1b5f	b5 60		lda $60,x			lda 	esInt3,x 					; save top most byte
.1b61	48		pha				pha
.1b62	b5 58		lda $58,x			lda 	esInt2,x 					; shift everything left 8 bits
.1b64	95 60		sta $60,x			sta 	esInt3,x
.1b66	b5 50		lda $50,x			lda 	esInt1,x
.1b68	95 58		sta $58,x			sta 	esInt2,x
.1b6a	b5 48		lda $48,x			lda 	esInt0,x
.1b6c	95 50		sta $50,x			sta 	esInt1,x
.1b6e	a9 00		lda #$00			lda 	#0
.1b70	95 48		sta $48,x			sta 	esInt0,x
.1b72	68		pla				pla 								; now A:TOS is a 5 byte register, shift right twice.
.1b73	29 03		and #$03			and 	#3 							; only want lower 2 bits
.1b75	09 04		ora #$04			ora 	#4  						; set bit 2 - when 1 we are done
.1b77					_ELShiftLoop:
.1b77	4a		lsr a				lsr 	a
.1b78	76 60		ror $60,x			ror 	esInt3,x
.1b7a	76 58		ror $58,x			ror 	esInt2,x
.1b7c	76 50		ror $50,x			ror 	esInt1,x
.1b7e	76 48		ror $48,x			ror 	esInt0,x
.1b80	c9 01		cmp #$01			cmp 	#1
.1b82	d0 f3		bne $1b77			bne 	_ELShiftLoop
.1b84	68		pla				pla 								; get original 6 bit value and OR in.
.1b85	29 3f		and #$3f			and 	#$3F
.1b87	15 48		ora $48,x			ora 	esInt0,x
.1b89	95 48		sta $48,x			sta 	esInt0,x
.1b8b	60		rts				rts
.1b8c					ELBinaryOperatorInfo:

;******  Processing file: main/evaluate/../../generated/binarystructinfo.inc

>1b8c	01					.byte	$01			; $86 and
>1b8d	01					.byte	$01			; $87 or
>1b8e	01					.byte	$01			; $88 xor
>1b8f	02					.byte	$02			; $89 >=
>1b90	02					.byte	$02			; $8a <=
>1b91	02					.byte	$02			; $8b >
>1b92	02					.byte	$02			; $8c <
>1b93	02					.byte	$02			; $8d =
>1b94	02					.byte	$02			; $8e <>
>1b95	03					.byte	$03			; $8f +
>1b96	03					.byte	$03			; $90 -
>1b97	04					.byte	$04			; $91 >>
>1b98	04					.byte	$04			; $92 <<
>1b99	04					.byte	$04			; $93 *
>1b9a	04					.byte	$04			; $94 /
>1b9b	04					.byte	$04			; $95 mod
>1b9c	05					.byte	$05			; $96 ^
>1b9d	06					.byte	$06			; $97 !
>1b9e	06					.byte	$06			; $98 ?
>1b9f	82					.byte	$82			; $99 repeat
>1ba0	82					.byte	$82			; $9a while
>1ba1	82					.byte	$82			; $9b for
>1ba2	82					.byte	$82			; $9c if
>1ba3	82					.byte	$82			; $9d defproc
>1ba4	80					.byte	$80			; $9e until
>1ba5	80					.byte	$80			; $9f wend
>1ba6	80					.byte	$80			; $a0 next
>1ba7	80					.byte	$80			; $a1 then
>1ba8	80					.byte	$80			; $a2 endif
>1ba9	80					.byte	$80			; $a3 endproc

;******  Return to file: main/evaluate/evaluate.asm


;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/event.asm

.1baa					EventFunction:
.1baa	20 4b 1b	jsr $1b4b			jsr 	EvaluateReference			; get the variable reference.
.1bad	b5 40		lda $40,x			lda 	esType,x
.1baf	c9 80		cmp #$80			cmp 	#$80 						; must be int ref
.1bb1	d0 5b		bne $1c0e			bne 	_EFType
.1bb3	20 b9 21	jsr $21b9			jsr 	CheckComma
.1bb6	e8		inx				inx
.1bb7	20 1e 1b	jsr $1b1e			jsr 	EvaluateInteger		 		; get the elapsed time between firing.
.1bba	20 ac 21	jsr $21ac			jsr 	CheckRightParen 			; finish off with the
.1bbd	ca		dex				dex
.1bbe	b5 50		lda $50,x			lda 	esInt1,x 					; check max of 32767
.1bc0	29 80		and #$80			and 	#$80
.1bc2	15 58		ora $58,x			ora 	esInt2,x
.1bc4	15 60		ora $60,x			ora 	esInt3,x
.1bc6	d0 41		bne $1c09			bne 	_EFValue
.1bc8	98		tya				tya
.1bc9	48		pha				pha
.1bca	8a		txa				txa
.1bcb	48		pha				pha
.1bcc	a2 12		ldx #$12		ldx	#18
.1bce	20 bb 22	jsr $22bb		jsr	deviceHandler
.1bd1	84 07		sty $07				sty 	temp1+1
.1bd3	85 06		sta $06				sta 	temp1
.1bd5	68		pla				pla
.1bd6	aa		tax				tax
.1bd7	20 3c 11	jsr $113c			jsr 	TOSToTemp0 					; point temp0 to the variable.
.1bda	a0 03		ldy #$03			ldy 	#3							; if -ve
.1bdc	b1 04		lda ($04),y			lda 	(temp0),y
.1bde	30 23		bmi $1c03			bmi 	_EFFail 	 				; straight out with fail, means on pause.
.1be0	a0 00		ldy #$00			ldy 	#0 							; is the fire time zero ?
.1be2	b1 04		lda ($04),y			lda 	(temp0),y
.1be4	c8		iny				iny
.1be5	11 04		ora ($04),y			ora 	(temp0),y
.1be7	f0 17		beq $1c00			beq 	_EFInitialise 				; if so, initialise the value but return false.
.1be9	a0 00		ldy #$00			ldy 	#0 							; calculate trigger - timer
.1beb	38		sec				sec
.1bec	b1 04		lda ($04),y			lda 	(temp0),y
.1bee	e5 06		sbc $06				sbc 	temp1
.1bf0	c8		iny				iny
.1bf1	b1 04		lda ($04),y			lda 	(temp0),y
.1bf3	e5 07		sbc $07				sbc 	temp1+1
.1bf5	10 0c		bpl $1c03			bpl 	_EFFail 					; if trigger >= timer then return False
.1bf7	20 13 1c	jsr $1c13			jsr 	SetEventTimer 				; reset the timer for next time.
.1bfa	20 35 21	jsr $2135			jsr	 	MInt32True 					; and treutn true as fired.
.1bfd	68		pla				pla
.1bfe	a8		tay				tay
.1bff	60		rts				rts
.1c00					_EFInitialise:
.1c00	20 13 1c	jsr $1c13			jsr		SetEventTimer 				; set trigger time to time + elapsed
.1c03					_EFFail:
.1c03	68		pla				pla
.1c04	a8		tay				tay
.1c05	20 39 21	jsr $2139			jsr 	MInt32False
.1c08	60		rts				rts
.1c09					_EFValue:
.1c09	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.1c0b	20 d2 22	jsr $22d2		jsr	errorHandler
.1c0e					_EFType:
.1c0e	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.1c10	20 d2 22	jsr $22d2		jsr	errorHandler
.1c13					SetEventTimer:
.1c13	a0 00		ldy #$00			ldy 	#0 							; add elapsed to current time, store in variable
.1c15	18		clc				clc
.1c16	a5 06		lda $06				lda 	temp1
.1c18	75 49		adc $49,x			adc 	esInt0+1,x
.1c1a	91 04		sta ($04),y			sta		(temp0),y
.1c1c	c8		iny				iny
.1c1d	a5 07		lda $07				lda 	temp1+1
.1c1f	75 51		adc $51,x			adc 	esInt1+1,x
.1c21	91 04		sta ($04),y			sta		(temp0),y
.1c23	88		dey				dey
.1c24	11 04		ora ($04),y			ora 	(temp0),y 					; if the result is non zero, exit
.1c26	d0 04		bne $1c2c			bne 	_SETExit
.1c28	a9 01		lda #$01			lda 	#1 							; timer zero won't work, so make it 1, which is
.1c2a	91 04		sta ($04),y			sta 	(temp0),y 					; near enough.
.1c2c					_SETExit:
.1c2c	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary.asm

.1c2d					UnaryLen:
.1c2d	20 3b 1c	jsr $1c3b			jsr 	ULStart
.1c30					ULFinish:
.1c30	b1 04		lda ($04),y			lda 	(temp0),y
.1c32	a4 0c		ldy $0c				ldy 	tempShort
.1c34	20 48 21	jsr $2148			jsr 	MInt32Set8Bit
.1c37	20 ac 21	jsr $21ac			jsr 	CheckRightParen
.1c3a	60		rts				rts
.1c3b	20 13 1b	jsr $1b13	ULStart:jsr 	EvaluateString
.1c3e	b5 48		lda $48,x			lda 	esInt0,x 					; copy address of string to temp0
.1c40	85 04		sta $04				sta 	temp0
.1c42	b5 50		lda $50,x			lda 	esInt1,x
.1c44	85 05		sta $05				sta 	temp0+1
.1c46	84 0c		sty $0c				sty 	tempShort 					; get length
.1c48	a0 00		ldy #$00			ldy 	#0
.1c4a	60		rts				rts
.1c4b					UnaryAsc:
.1c4b	20 3b 1c	jsr $1c3b			jsr 	ULStart 					; same as LEN() get string, save Y, point to length.
.1c4e	b1 04		lda ($04),y			lda 	(temp0),y
.1c50	c8		iny				iny 		 						; point to first character, we can do LEN code after that
.1c51	c9 00		cmp #$00			cmp 	#0
.1c53	d0 db		bne $1c30			bne 	ULFinish
.1c55	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.1c57	20 d2 22	jsr $22d2		jsr	errorHandler
.1c5a					UnaryAbs:
.1c5a	20 08 1b	jsr $1b08			jsr 	EvaluateNumeric
.1c5d	b0 07		bcs $1c66			bcs 	_UAFloat
.1c5f	20 ee 20	jsr $20ee			jsr 	MInt32Absolute
.1c62	20 ac 21	jsr $21ac			jsr 	CheckRightParen
.1c65	60		rts				rts
.1c66					_UAFloat:
.1c66	8a		txa				txa
.1c67	a2 00		ldx #$00		ldx	#0
.1c69	20 c3 25	jsr $25c3		jsr	floatingpointHandler
.1c6c	aa		tax				tax
.1c6d	20 ac 21	jsr $21ac			jsr 	CheckRightParen
.1c70	60		rts				rts
.1c71					UnarySgn:
.1c71	20 08 1b	jsr $1b08			jsr 	EvaluateNumeric
.1c74	b0 07		bcs $1c7d			bcs 	_USFloat
.1c76	20 26 21	jsr $2126			jsr 	MInt32Sign
.1c79	20 ac 21	jsr $21ac			jsr 	CheckRightParen
.1c7c	60		rts				rts
.1c7d					_USFloat:
.1c7d	8a		txa				txa
.1c7e	a2 0e		ldx #$0e		ldx	#14
.1c80	20 c3 25	jsr $25c3		jsr	floatingpointHandler
.1c83	aa		tax				tax
.1c84	20 ac 21	jsr $21ac			jsr 	CheckRightParen
.1c87	60		rts				rts
.1c88					UnaryPeek:
.1c88	20 b4 1c	jsr $1cb4			jsr 	PDLCode
.1c8b	4c a8 1c	jmp $1ca8			jmp 	PDLByte0
.1c8e					UnaryDeek:
.1c8e	20 b4 1c	jsr $1cb4			jsr 	PDLCode
.1c91	4c a2 1c	jmp $1ca2			jmp 	PDLByte1
.1c94					UnaryLeek:
.1c94	20 b4 1c	jsr $1cb4			jsr 	PDLCode
.1c97	a0 03		ldy #$03			ldy 	#3
.1c99	b1 04		lda ($04),y			lda 	(temp0),y
.1c9b	95 60		sta $60,x			sta 	esInt3,x
.1c9d	88		dey				dey
.1c9e	b1 04		lda ($04),y			lda 	(temp0),y
.1ca0	95 58		sta $58,x			sta 	esInt2,x
.1ca2					PDLByte1:
.1ca2	a0 01		ldy #$01			ldy 	#1
.1ca4	b1 04		lda ($04),y			lda 	(temp0),y
.1ca6	95 50		sta $50,x			sta 	esInt1,x
.1ca8					PDLByte0:
.1ca8	a0 00		ldy #$00			ldy 	#0
.1caa	b1 04		lda ($04),y			lda 	(temp0),y
.1cac	95 48		sta $48,x			sta 	esInt0,x
.1cae	a4 0c		ldy $0c				ldy 	tempShort 					; restore Y
.1cb0	20 ac 21	jsr $21ac			jsr 	CheckRightParen 			; check right and return
.1cb3	60		rts				rts
.1cb4					PDLCode:
.1cb4	20 1e 1b	jsr $1b1e			jsr 	EvaluateInteger
.1cb7	b5 48		lda $48,x			lda 	esInt0,x 					; copy address of string to temp0
.1cb9	85 04		sta $04				sta 	temp0
.1cbb	b5 50		lda $50,x			lda 	esInt1,x
.1cbd	85 05		sta $05				sta 	temp0+1
.1cbf	a9 00		lda #$00			lda 	#0 							; zero upper 3 bytes of result, type okay.
.1cc1	95 50		sta $50,x			sta 	esInt1,x
.1cc3	95 58		sta $58,x			sta 	esInt2,x
.1cc5	95 60		sta $60,x			sta 	esInt3,x
.1cc7	84 0c		sty $0c				sty 	tempShort 					; save Y
.1cc9	60		rts				rts
.1cca					Unary_Random:
.1cca	20 69 21	jsr $2169			jsr 	MInt32Random 				; generate random number.
.1ccd	b1 02		lda ($02),y			lda 	(codePtr),y 				; check followed by )
.1ccf	c9 c6		cmp #$c6			cmp 	#TKW_RPAREN
.1cd1	f0 08		beq $1cdb			beq 	_URExit
.1cd3	e8		inx				inx 								; load range 0..r-1 into +1
.1cd4	20 1e 1b	jsr $1b1e			jsr 	EvaluateInteger
.1cd7	ca		dex				dex
.1cd8	20 98 1f	jsr $1f98			jsr 	MInt32Modulus 				; calculate random % modulus
.1cdb					_URExit:
.1cdb	20 ac 21	jsr $21ac			jsr 	CheckRightParen 			; check right and return
.1cde	60		rts				rts
.1cdf					Unary_Min:
.1cdf	a9 01		lda #$01			lda 	#1 							; c1 cmp c2 needs to be > e.g. c1 > c2
.1ce1	d0 02		bne $1ce5			bne 	UnaryMBody
.1ce3					Unary_Max:
.1ce3	a9 ff		lda #$ff			lda 	#$FF 						; c1 cmp c2 needs to be < e.g. c1 < c2
.1ce5					UnaryMBody:
.1ce5	48		pha				pha 								; save comparator on stack.
.1ce6	20 ff 1a	jsr $1aff			jsr 	Evaluate 					; get the first thing to check
.1ce9					_UnaryMLoop:
.1ce9	b1 02		lda ($02),y			lda 	(codePtr),y 				; found ), indicates end.
.1ceb	c8		iny				iny
.1cec	c9 c6		cmp #$c6			cmp 	#TKW_RPAREN
.1cee	f0 09		beq $1cf9			beq 	_UnaryMExit
.1cf0	c9 c8		cmp #$c8			cmp 	#TKW_COMMA 					; found , indicates more.
.1cf2	f0 07		beq $1cfb			beq 	_UnaryMCompare
.1cf4	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.1cf6	20 d2 22	jsr $22d2		jsr	errorHandler
.1cf9					_UnaryMExit:
.1cf9	68		pla				pla 								; throw comparator and return.
.1cfa	60		rts				rts
.1cfb					_UnaryMCompare:
.1cfb	e8		inx				inx 								; get the 2nd thing to evaluate
.1cfc	20 ff 1a	jsr $1aff			jsr 	Evaluate
.1cff	ca		dex				dex
.1d00	20 9c 18	jsr $189c			jsr 	PerformComparison 			; this is part of evaluate/compare.asm
.1d03	85 0c		sta $0c				sta 	tempShort 					; save result
.1d05	68		pla				pla 								; get what we need
.1d06	48		pha				pha
.1d07	c5 0c		cmp $0c				cmp 	tempShort 					; did we get it
.1d09	d0 de		bne $1ce9			bne 	_UnaryMLoop 				; no, try another value.
.1d0b	20 39 21	jsr $2139			jsr 	MInt32False 				; promote 2nd to 1st.
.1d0e	20 22 20	jsr $2022			jsr 	MInt32Add
.1d11	4c e9 1c	jmp $1ce9			jmp 	_UnaryMLoop
.1d14					Unary_Page:
.1d14	20 39 21	jsr $2139			jsr 	MInt32False 				; zero
.1d17	ad c8 0a	lda $0ac8			lda 	basePage 					; copy base page address in.
.1d1a	95 48		sta $48,x			sta 	esInt0,x
.1d1c	ad c9 0a	lda $0ac9			lda 	basePage+1
.1d1f	95 50		sta $50,x			sta 	esInt1,x
.1d21	60		rts				rts
.1d22					UnaryReference:
.1d22	a9 0f		lda #$0f			lda 	#15
.1d24	20 ea 19	jsr $19ea			jsr 	EvaluateLevel 				; evaluate term and don't deference.
.1d27	b5 40		lda $40,x			lda 	esType,x 					; check it's a reference.
.1d29	10 05		bpl $1d30			bpl 	UType
.1d2b	a9 00		lda #$00			lda 	#0 							; make it an integer
.1d2d	95 40		sta $40,x			sta 	esType,x
.1d2f	60		rts				rts
.1d30					UType:
.1d30	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.1d32	20 d2 22	jsr $22d2		jsr	errorHandler
.1d35					UnaryHexMarker:
.1d35	4c f0 1a	jmp $1af0			jmp 	EvaluateIntegerTerm
.1d38					UnaryComplement:
.1d38	20 f0 1a	jsr $1af0			jsr 	EvaluateIntegerTerm
.1d3b	20 0d 21	jsr $210d			jsr 	MInt32Not
.1d3e	60		rts				rts
.1d3f					UnaryIntToFloat:
.1d3f	20 08 1b	jsr $1b08			jsr 	EvaluateNumeric
.1d42	b5 40		lda $40,x			lda 	esType,x
.1d44	d0 0b		bne $1d51			bne 	_UIFExit
.1d46	8a		txa				txa
.1d47	a2 1a		ldx #$1a		ldx	#26
.1d49	20 c3 25	jsr $25c3		jsr	floatingpointHandler
.1d4c	aa		tax				tax
.1d4d	a9 01		lda #$01			lda 	#1
.1d4f	95 40		sta $40,x			sta 	esType,x
.1d51					_UIFExit:
.1d51	60		rts				rts
.1d52					UnaryFloatToInt:
.1d52	20 08 1b	jsr $1b08			jsr 	EvaluateNumeric
.1d55	b5 40		lda $40,x			lda 	esType,x
.1d57	f0 07		beq $1d60			beq 	_UFIExit
.1d59	8a		txa				txa
.1d5a	a2 12		ldx #$12		ldx	#18
.1d5c	20 c3 25	jsr $25c3		jsr	floatingpointHandler
.1d5f	aa		tax				tax
.1d60					_UFIExit:
.1d60	60		rts				rts
.1d61					UnaryAlloc:
.1d61	e8		inx				inx 								; evaluate memory required
.1d62	20 1e 1b	jsr $1b1e			jsr 	EvaluateInteger
.1d65	20 ac 21	jsr $21ac			jsr 	CheckRightParen
.1d68	ca		dex				dex
.1d69	b5 59		lda $59,x			lda 	esInt2+1,x 					; check at least in 64k range.
.1d6b	15 61		ora $61,x			ora 	esInt3+1,x
.1d6d	d0 19		bne $1d88			bne 	_UABadValue
.1d6f	20 39 21	jsr $2139			jsr 	MInt32False					; zero return.
.1d72	a5 10		lda $10				lda 	lowMemory+1 				; copy low memory in
.1d74	95 50		sta $50,x			sta 	esInt1,x
.1d76	a5 0f		lda $0f				lda 	lowMemory
.1d78	95 48		sta $48,x			sta 	esInt0,x
.1d7a	18		clc				clc 								; add alloc required.
.1d7b	75 49		adc $49,x			adc 	esInt0+1,x
.1d7d	85 0f		sta $0f				sta 	lowMemory
.1d7f	a5 10		lda $10				lda 	lowMemory+1
.1d81	75 51		adc $51,x			adc 	esInt1+1,x
.1d83	85 10		sta $10				sta 	lowMemory+1
.1d85	b0 01		bcs $1d88			bcs		_UABadValue 				; overflow definitely bad.
.1d87	60		rts				rts
.1d88					_UABadValue:
.1d88	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.1d8a	20 d2 22	jsr $22d2		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary2.asm

.1d8d					UnaryTimer:
.1d8d	20 ac 21	jsr $21ac			jsr 	CheckRightParen
.1d90	98		tya				tya
.1d91	48		pha				pha
.1d92	20 60 21	jsr $2160			jsr 	MInt32Zero 					; zero result
.1d95	86 04		stx $04				stx 	temp0 						; returning in YA so can't use .pshx
.1d97	a2 12		ldx #$12		ldx	#18
.1d99	20 bb 22	jsr $22bb		jsr	deviceHandler
.1d9c	a6 04		ldx $04				ldx 	temp0						; restore X and update 16 bit result
.1d9e	95 48		sta $48,x			sta 	esInt0,x
.1da0	98		tya				tya
.1da1	95 50		sta $50,x			sta 	esInt1,x
.1da3	68		pla				pla
.1da4	a8		tay				tay
.1da5	60		rts				rts
.1da6					UnaryInkey:
.1da6	20 ac 21	jsr $21ac			jsr 	CheckRightParen
.1da9	86 04		stx $04				stx 	temp0
.1dab	a2 08		ldx #$08		ldx	#8
.1dad	20 bb 22	jsr $22bb		jsr	deviceHandler
.1db0	a6 04		ldx $04				ldx 	temp0
.1db2	20 48 21	jsr $2148			jsr 	MInt32Set8Bit
.1db5	60		rts				rts
.1db6					UnaryGet:
.1db6	20 ac 21	jsr $21ac			jsr 	CheckRightParen
.1db9	86 04		stx $04				stx 	temp0
.1dbb					_UGLoop:
.1dbb	a2 08		ldx #$08		ldx	#8
.1dbd	20 bb 22	jsr $22bb		jsr	deviceHandler
.1dc0	c9 00		cmp #$00			cmp 	#0
.1dc2	f0 f7		beq $1dbb			beq 	_UGLoop
.1dc4	a6 04		ldx $04				ldx 	temp0
.1dc6	20 48 21	jsr $2148			jsr 	MInt32Set8Bit
.1dc9	60		rts				rts
.1dca					UnarySys:
.1dca	20 1e 1b	jsr $1b1e			jsr 	EvaluateInteger 				; get the address
.1dcd	20 ac 21	jsr $21ac			jsr 	CheckRightParen
.1dd0	20 3c 11	jsr $113c			jsr 	TOSToTemp0 						; copy to temp0
.1dd3	8a		txa				txa
.1dd4	48		pha				pha
.1dd5	98		tya				tya
.1dd6	48		pha				pha
.1dd7	ad 00 0a	lda $0a00			lda 	("A"-"A")*4+SingleLetterVar 	; load AXY
.1dda	ae 5c 0a	ldx $0a5c			ldx 	("X"-"A")*4+SingleLetterVar
.1ddd	ac 60 0a	ldy $0a60			ldy 	("Y"-"A")*4+SingleLetterVar
.1de0	20 ef 1d	jsr $1def			jsr 	_CallTemp0
.1de3	85 0c		sta $0c				sta 	tempShort 						; restore YX
.1de5	68		pla				pla
.1de6	a8		tay				tay
.1de7	68		pla				pla
.1de8	aa		tax				tax
.1de9	a5 0c		lda $0c				lda 	tempShort
.1deb	20 48 21	jsr $2148			jsr 	MInt32Set8Bit 					; return result.
.1dee	60		rts				rts
.1def					_CallTemp0:
.1def	6c 04 00	jmp ($0004)			jmp 	(temp0)

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unarystr.asm

.1df2					ExecChr:
.1df2	20 26 1b	jsr $1b26			jsr 	EvaluateSmallInteger		; character number
.1df5	20 ac 21	jsr $21ac			jsr 	CheckRightParen				; right bracket
.1df8	98		tya				tya
.1df9	48		pha				pha
.1dfa	8a		txa				txa 								; A = stack
.1dfb	b4 48		ldy $48,x			ldy 	esInt0,x					; Y = character
.1dfd	a2 00		ldx #$00		ldx	#0
.1dff	20 5f 28	jsr $285f		jsr	stringHandler
.1e02	aa		tax				tax 								; X = stack
.1e03	68		pla				pla
.1e04	a8		tay				tay
.1e05	60		rts				rts
.1e06					ExecLower:
.1e06	38		sec				sec
.1e07	b0 01		bcs $1e0a			bcs 	ExecUpperLower
.1e09					ExecUpper:
.1e09	18		clc				clc
.1e0a					ExecUpperLower:
.1e0a	08		php				php 								; save carry
.1e0b	20 13 1b	jsr $1b13			jsr 	EvaluateString 				; string to stack,X
.1e0e	20 ac 21	jsr $21ac			jsr 	CheckRightParen 			; check closing right bracket.
.1e11	28		plp				plp 								; restore carry, save Y
.1e12	98		tya				tya
.1e13	48		pha				pha
.1e14	a9 00		lda #$00			lda 	#0 							; A zero if upper, 1 if lower.
.1e16	2a		rol a				rol 	a
.1e17	a8		tay				tay 								; now in Y
.1e18	8a		txa				txa 								; do the substring and exit.
.1e19	a2 08		ldx #$08		ldx	#8
.1e1b	20 5f 28	jsr $285f		jsr	stringHandler
.1e1e	aa		tax				tax
.1e1f	68		pla				pla
.1e20	a8		tay				tay
.1e21	60		rts				rts
.1e22					ExecLeft:
.1e22	20 13 1b	jsr $1b13			jsr 	EvaluateString 				; string to stack,X
.1e25	20 b9 21	jsr $21b9			jsr 	CheckComma
.1e28	e8		inx				inx
.1e29	a9 01		lda #$01			lda 	#1 							; 1 for 2nd parameter.
.1e2b	20 48 21	jsr $2148			jsr 	MInt32Set8Bit
.1e2e	e8		inx				inx
.1e2f	20 26 1b	jsr $1b26			jsr 	EvaluateSmallInteger 		; smallint 3rd parameter
.1e32					ExecSubstring:
.1e32	ca		dex				dex 								; fix up X
.1e33	ca		dex				dex
.1e34	20 ac 21	jsr $21ac			jsr 	CheckRightParen 			; check closing right bracket.
.1e37	8a		txa				txa 								; do the substring and exit.
.1e38	a2 0a		ldx #$0a		ldx	#10
.1e3a	20 5f 28	jsr $285f		jsr	stringHandler
.1e3d	aa		tax				tax
.1e3e	60		rts				rts
.1e3f					ExecMid:
.1e3f	20 13 1b	jsr $1b13			jsr 	EvaluateString 				; string to stack,X
.1e42	20 b9 21	jsr $21b9			jsr 	CheckComma
.1e45	e8		inx				inx
.1e46	20 26 1b	jsr $1b26			jsr 	EvaluateSmallInteger 		; smallint 2nd parameter
.1e49	c9 00		cmp #$00			cmp 	#0
.1e4b	f0 15		beq $1e62			beq 	_EMValue
.1e4d	e8		inx				inx
.1e4e	a9 ff		lda #$ff			lda 	#255 						; 255 default for 3nd parameter.
.1e50	20 48 21	jsr $2148			jsr 	MInt32Set8Bit
.1e53	b1 02		lda ($02),y			lda 	(codePtr),y 				; is there a ) next
.1e55	c9 c6		cmp #$c6			cmp 	#TKW_RPAREN 				; if so, just MID$(a$,2)
.1e57	f0 d9		beq $1e32			beq 	ExecSubString
.1e59	20 b9 21	jsr $21b9			jsr 	CheckComma
.1e5c	20 26 1b	jsr $1b26			jsr 	EvaluateSmallInteger 		; smallint 2nd parameter
.1e5f	4c 32 1e	jmp $1e32			jmp 	ExecSubString
.1e62					_EMValue:
.1e62	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.1e64	20 d2 22	jsr $22d2		jsr	errorHandler
.1e67					ExecRight:
.1e67	20 13 1b	jsr $1b13			jsr 	EvaluateString 				; string to stack,X
.1e6a	20 b9 21	jsr $21b9			jsr 	CheckComma
.1e6d	e8		inx				inx
.1e6e	20 26 1b	jsr $1b26			jsr 	EvaluateSmallInteger 		; smallint 2nd parameter.
.1e71	ca		dex				dex
.1e72	98		tya				tya
.1e73	48		pha				pha
.1e74	b5 48		lda $48,x			lda 	esInt0,x 					; copy address of string to temp0
.1e76	85 04		sta $04				sta 	temp0
.1e78	b5 50		lda $50,x			lda 	esInt1,x
.1e7a	85 05		sta $05				sta 	temp0+1
.1e7c	a0 00		ldy #$00			ldy 	#0 							; point to length
.1e7e	b1 04		lda ($04),y			lda 	(temp0),y 					; get the length.
.1e80	18		clc				clc 								; add 1.
.1e81	69 01		adc #$01			adc 	#1
.1e83	38		sec				sec
.1e84	f5 49		sbc $49,x			sbc 	esInt0+1,x  				; subtract right count.
.1e86	f0 02		beq $1e8a			beq		_ERMake1 					; if zero, make it 1.
.1e88	b0 02		bcs $1e8c			bcs		_EROkay
.1e8a					_ERMake1:
.1e8a	a9 01		lda #$01			lda 	#1 							; start position.
.1e8c					_EROkay:
.1e8c	e8		inx				inx 								; set start pos.
.1e8d	95 48		sta $48,x			sta 	esInt0,x
.1e8f	e8		inx				inx
.1e90	a9 ff		lda #$ff			lda 	#255 						; 255 default for 3nd parameter.
.1e92	20 48 21	jsr $2148			jsr 	MInt32Set8Bit
.1e95	68		pla				pla
.1e96	a8		tay				tay
.1e97	4c 32 1e	jmp $1e32			jmp 	ExecSubString 				; do the substring code.

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32binary.asm

.1e9a					MInt32And:
.1e9a	b5 48		lda $48,x			lda 	esInt0,x
.1e9c	35 49		and $49,x			and 	esInt0+1,x
.1e9e	95 48		sta $48,x			sta 	esInt0,x
.1ea0	b5 50		lda $50,x			lda 	esInt1,x
.1ea2	35 51		and $51,x			and 	esInt1+1,x
.1ea4	95 50		sta $50,x			sta 	esInt1,x
.1ea6	b5 58		lda $58,x			lda 	esInt2,x
.1ea8	35 59		and $59,x			and 	esInt2+1,x
.1eaa	95 58		sta $58,x			sta 	esInt2,x
.1eac	b5 60		lda $60,x			lda 	esInt3,x
.1eae	35 61		and $61,x			and 	esInt3+1,x
.1eb0	95 60		sta $60,x			sta 	esInt3,x
.1eb2	60		rts				rts
.1eb3					MInt32Or:
.1eb3	b5 48		lda $48,x			lda 	esInt0,x
.1eb5	15 49		ora $49,x			ora 	esInt0+1,x
.1eb7	95 48		sta $48,x			sta 	esInt0,x
.1eb9	b5 50		lda $50,x			lda 	esInt1,x
.1ebb	15 51		ora $51,x			ora 	esInt1+1,x
.1ebd	95 50		sta $50,x			sta 	esInt1,x
.1ebf	b5 58		lda $58,x			lda 	esInt2,x
.1ec1	15 59		ora $59,x			ora 	esInt2+1,x
.1ec3	95 58		sta $58,x			sta 	esInt2,x
.1ec5	b5 60		lda $60,x			lda 	esInt3,x
.1ec7	15 61		ora $61,x			ora 	esInt3+1,x
.1ec9	95 60		sta $60,x			sta 	esInt3,x
.1ecb	60		rts				rts
.1ecc					MInt32Xor:
.1ecc	b5 48		lda $48,x			lda 	esInt0,x
.1ece	55 49		eor $49,x			eor 	esInt0+1,x
.1ed0	95 48		sta $48,x			sta 	esInt0,x
.1ed2	b5 50		lda $50,x			lda 	esInt1,x
.1ed4	55 51		eor $51,x			eor 	esInt1+1,x
.1ed6	95 50		sta $50,x			sta 	esInt1,x
.1ed8	b5 58		lda $58,x			lda 	esInt2,x
.1eda	55 59		eor $59,x			eor 	esInt2+1,x
.1edc	95 58		sta $58,x			sta 	esInt2,x
.1ede	b5 60		lda $60,x			lda 	esInt3,x
.1ee0	55 61		eor $61,x			eor 	esInt3+1,x
.1ee2	95 60		sta $60,x			sta 	esInt3,x
.1ee4	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32compare.asm

.1ee5					MInt32Compare:
.1ee5	b5 48		lda $48,x			lda 	esInt0,x 					; equality check.
.1ee7	d5 49		cmp $49,x			cmp 	esInt0+1,x
.1ee9	d0 13		bne $1efe			bne 	MInt32Compare2
.1eeb	b5 50		lda $50,x			lda 	esInt1,x
.1eed	d5 51		cmp $51,x			cmp 	esInt1+1,x
.1eef	d0 0d		bne $1efe			bne 	MInt32Compare2
.1ef1	b5 58		lda $58,x			lda 	esInt2,x
.1ef3	d5 59		cmp $59,x			cmp 	esInt2+1,x
.1ef5	d0 07		bne $1efe			bne 	MInt32Compare2
.1ef7	b5 60		lda $60,x			lda 	esInt3,x
.1ef9	55 61		eor $61,x			eor 	esInt3+1,x 					; will return 0 if the same.
.1efb	d0 01		bne $1efe			bne 	MInt32Compare2
.1efd	60		rts				rts
.1efe					MInt32Compare2:
.1efe	b5 48		lda $48,x			lda		esInt0,x 					; unsigned 32 bit comparison.
.1f00	d5 49		cmp $49,x			cmp 	esInt0+1,x
.1f02	b5 50		lda $50,x			lda		esInt1,x
.1f04	f5 51		sbc $51,x			sbc 	esInt1+1,x
.1f06	b5 58		lda $58,x			lda		esInt2,x
.1f08	f5 59		sbc $59,x			sbc 	esInt2+1,x
.1f0a	b5 60		lda $60,x			lda		esInt3,x
.1f0c	f5 61		sbc $61,x			sbc 	esInt3+1,x
.1f0e	50 02		bvc $1f12			bvc 	_I32LNoOverflow 			; make it signed 32 bi comparison
.1f10	49 80		eor #$80			eor 	#$80
.1f12					_I32LNoOverflow
.1f12	30 03		bmi $1f17			bmi 	MInt32CLess					; if -ve then return $FF
.1f14	a9 01		lda #$01			lda 	#$01						; else return $01
.1f16	60		rts				rts
.1f17					MInt32CLess:
.1f17	a9 ff		lda #$ff			lda 	#$FF
.1f19	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32divide.asm

.1f1a					MInt32SDivide:
.1f1a	98		tya				tya  								; save Y, which is the count of negations
.1f1b	48		pha				pha
.1f1c	a0 00		ldy #$00			ldy 	#0 							; zero count
.1f1e	20 36 1f	jsr $1f36			jsr 	_MInt32SRemSign 			; unsign TOS
.1f21	e8		inx				inx 								; unsign TOS+1
.1f22	20 36 1f	jsr $1f36			jsr 	_MInt32SRemSign
.1f25	ca		dex				dex
.1f26	98		tya				tya 								; save sign count on stack
.1f27	48		pha				pha
.1f28	20 3f 1f	jsr $1f3f			jsr 	MInt32UDivide 				; unsigned division
.1f2b	68		pla				pla 								; get sign count back
.1f2c	29 01		and #$01			and 	#1 							; if it is odd, then negate result
.1f2e	f0 03		beq $1f33			beq 	_I32SNoNeg
.1f30	20 f3 20	jsr $20f3			jsr 	MInt32Negate
.1f33					_I32SNoNeg:
.1f33	68		pla				pla 								; restoe Y and exit
.1f34	a8		tay				tay
.1f35	60		rts				rts
.1f36					_MInt32SRemSign:
.1f36	b5 60		lda $60,x			lda 	esInt3,x 					; is it -ve
.1f38	10 04		bpl $1f3e			bpl 	_MInt32SRSExit
.1f3a	c8		iny				iny 								; increment the sign count
.1f3b	20 f3 20	jsr $20f3			jsr 	MInt32Negate 				; negate the value.
.1f3e					_MInt32SRSExit:
.1f3e	60		rts				rts
.1f3f					MInt32UDivide:
.1f3f	b5 49		lda $49,x			lda 	esInt0+1,x 					; check for division by zero
.1f41	15 51		ora $51,x			ora 	esInt1+1,x
.1f43	15 52		ora $52,x			ora 	esInt1+2,x
.1f45	15 53		ora $53,x			ora 	esInt1+3,x
.1f47	f0 4a		beq $1f93			beq 	_MInt32DZero
.1f49	e8		inx				inx 								; clear A
.1f4a	e8		inx				inx
.1f4b	20 39 21	jsr $2139			jsr 	MInt32False
.1f4e	ca		dex				dex
.1f4f	ca		dex				dex
.1f50	98		tya				tya 								; save Y on the stack
.1f51	48		pha				pha
.1f52	a0 20		ldy #$20			ldy 	#32 						; number of division passes
.1f54					_MInt32UDLoop:
.1f54	16 48		asl $48,x			asl 	esInt0,x					; shift QA left. First Q
.1f56	36 50		rol $50,x			rol 	esInt1,x
.1f58	36 58		rol $58,x			rol 	esInt2,x
.1f5a	36 60		rol $60,x			rol 	esInt3,x
.1f5c	36 4a		rol $4a,x			rol 	esInt0+2,x 					; then A.
.1f5e	36 52		rol $52,x			rol 	esInt1+2,x
.1f60	36 5a		rol $5a,x			rol 	esInt2+2,x
.1f62	36 62		rol $62,x			rol 	esInt3+2,x
.1f64	38		sec				sec 								; calculate A-M saving result on the stack
.1f65	b5 4a		lda $4a,x			lda 	esInt0+2,x
.1f67	f5 49		sbc $49,x			sbc 	esInt0+1,x
.1f69	48		pha				pha
.1f6a	b5 52		lda $52,x			lda 	esInt1+2,x
.1f6c	f5 51		sbc $51,x			sbc 	esInt1+1,x
.1f6e	48		pha				pha
.1f6f	b5 5a		lda $5a,x			lda 	esInt2+2,x
.1f71	f5 59		sbc $59,x			sbc 	esInt2+1,x
.1f73	48		pha				pha
.1f74	b5 62		lda $62,x			lda 	esInt3+2,x
.1f76	f5 61		sbc $61,x			sbc 	esInt3+1,x
.1f78	90 10		bcc $1f8a			bcc		_MInt32NoSubtract 			; if A < M (e.g. carry clear) then reject this.
.1f7a	95 62		sta $62,x			sta 	esInt3+2,x 					; write result back to A
.1f7c	68		pla				pla
.1f7d	95 5a		sta $5a,x			sta 	esInt2+2,x
.1f7f	68		pla				pla
.1f80	95 52		sta $52,x			sta 	esInt1+2,x
.1f82	68		pla				pla
.1f83	95 4a		sta $4a,x			sta 	esInt0+2,x
.1f85	f6 48		inc $48,x			inc 	esInt0,x 					; sets bit 0 of Q - it was shifted left previously.
.1f87	4c 8d 1f	jmp $1f8d			jmp 	_MInt32Next 					; do the next iteration
.1f8a					_MInt32NoSubtract:
.1f8a	68		pla				pla
.1f8b	68		pla				pla
.1f8c	68		pla				pla
.1f8d					_MInt32Next:
.1f8d	88		dey				dey 								; do this 32 times.
.1f8e	d0 c4		bne $1f54			bne 	_MInt32UDLoop
.1f90	68		pla				pla 								; restore Y and exit
.1f91	a8		tay				tay
.1f92	60		rts				rts
.1f93					_MInt32DZero:
.1f93	a2 05		ldx #$05			ldx 	#ErrorID_DivZero
.1f95	20 d2 22	jsr $22d2		jsr	errorHandler
.1f98					MInt32Modulus:
.1f98	20 3f 1f	jsr $1f3f			jsr 	MInt32UDivide 				; do the division.
.1f9b	b5 62		lda $62,x			lda 	esInt3+2,x 					; copy 2nd on stack (the remainder) to the top.
.1f9d	95 60		sta $60,x			sta 	esInt3,x
.1f9f	b5 5a		lda $5a,x			lda 	esInt2+2,x
.1fa1	95 58		sta $58,x			sta 	esInt2,x
.1fa3	b5 52		lda $52,x			lda 	esInt1+2,x
.1fa5	95 50		sta $50,x			sta 	esInt1,x
.1fa7	b5 4a		lda $4a,x			lda 	esInt0+2,x
.1fa9	95 48		sta $48,x			sta 	esInt0,x
.1fab	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32fromstr.asm

.0af9					fs32Length:
>0af9							.fill 	1
.1fac					MInt32FromString:
.1fac	85 0c		sta $0c				sta 	tempShort 					; save base
.1fae	98		tya				tya
.1faf	48		pha				pha
.1fb0	a0 00		ldy #$00			ldy 	#0 							; get length
.1fb2	b1 04		lda ($04),y			lda 	(temp0),y
.1fb4	8d f9 0a	sta $0af9			sta 	fs32Length
.1fb7	f0 65		beq $201e			beq 	_I32FSFail2					; fail if length zero.
.1fb9	a0 01		ldy #$01			ldy 	#1 							; set index into string being read
.1fbb	b1 04		lda ($04),y			lda 	(temp0),y 					; look at first character
.1fbd	c9 2d		cmp #$2d			cmp 	#"-"						; is it a - character
.1fbf	d0 09		bne $1fca			bne 	_I32FSNotNegative
.1fc1	ad f9 0a	lda $0af9			lda 	fs32Length 					; get length back.
.1fc4	c9 01		cmp #$01			cmp 	#1 							; if 1 it is just a '-; so fail.'
.1fc6	f0 56		beq $201e			beq 	_I32FSFail2
.1fc8	a0 02		ldy #$02			ldy 	#2 							; first digit of the number.
.1fca					_I32FSNotNegative:
.1fca	a5 0c		lda $0c				lda 	tempShort 					; get the base back.
.1fcc	c0 02		cpy #$02			cpy 	#2 							; if we read a -ve (e.g. Y == 2)
.1fce	d0 02		bne $1fd2			bne 	_I32FSNN2
.1fd0	09 80		ora #$80			ora 	#$80						; set bit 7, this indicates a negated result.
.1fd2					_I32FSNN2:
.1fd2	48		pha				pha 								; save base + final sign on stack.
.1fd3	20 39 21	jsr $2139			jsr 	MInt32False 				; zero the return value.
.1fd6					_I32FSMainLoop:
.1fd6	68		pla				pla 								; get the base back into tempShort
.1fd7	48		pha				pha
.1fd8	29 7f		and #$7f			and 	#$7F
.1fda	85 0c		sta $0c				sta 	tempShort
.1fdc	b1 04		lda ($04),y			lda 	(temp0),y 					; look at next character.
.1fde	c9 61		cmp #$61			cmp 	#"a" 						; fix up case.
.1fe0	90 02		bcc $1fe4			bcc 	_I32FSNotLC
.1fe2	e9 20		sbc #$20			sbc 	#32
.1fe4					_I32FSNotLC:
.1fe4	38		sec				sec 								; subtract 48 (ASCII "0")
.1fe5	e9 30		sbc #$30			sbc 	#"0"
.1fe7	90 34		bcc $201d			bcc 	_I32FSFail 					; nothing more to do.
.1fe9	c9 0a		cmp #$0a			cmp 	#9+1 						; if it is 0-9 validate vs base.
.1feb	90 06		bcc $1ff3			bcc 	_I32FSValidate
.1fed	c9 11		cmp #$11			cmp 	#17 						; is it between 58 and 64 ? if so bad.
.1fef	90 2c		bcc $201d			bcc 	_I32FSFail
.1ff1	e9 07		sbc #$07			sbc 	#7 							; adjust into range so now character is 0->nnn
.1ff3					_I32FSValidate:
.1ff3	c5 0c		cmp $0c				cmp 	tempShort 					; compare against the base.
.1ff5	b0 26		bcs $201d			bcs 	_I32FSFail 					; sorry, too large for this base.
.1ff7	48		pha				pha 								; save the new digit value.
.1ff8	e8		inx				inx 								; put base into next slot.
.1ff9	a5 0c		lda $0c				lda 	tempShort
.1ffb	20 48 21	jsr $2148			jsr 	MInt32Set8Bit
.1ffe	ca		dex				dex
.1fff	20 56 20	jsr $2056			jsr 	MInt32Multiply 				; multiply current by the base
.2002	e8		inx				inx
.2003	68		pla				pla  								; put additive into next slot
.2004	20 48 21	jsr $2148			jsr 	MInt32Set8Bit
.2007	ca		dex				dex
.2008	20 22 20	jsr $2022			jsr 	MInt32Add 					; and add it
.200b	c8		iny				iny 								; look at next character
.200c	cc f9 0a	cpy $0af9			cpy 	fs32Length 					; until > length.
.200f	f0 c5		beq $1fd6			beq 	_I32FSMainLoop
.2011	90 c3		bcc $1fd6			bcc 	_I32FSMainLoop
.2013					_I32FSDone:
.2013	68		pla				pla 								; get base/final sign back
.2014	10 03		bpl $2019			bpl 	_I32FSNN3
.2016	20 f3 20	jsr $20f3			jsr 	MInt32Negate 				; negate the result.
.2019					_I32FSNN3:
.2019	68		pla				pla
.201a	a8		tay				tay
.201b	38		sec				sec
.201c	60		rts				rts
.201d					_I32FSFail:
.201d	68		pla				pla
.201e					_I32FSFail2:
.201e	68		pla				pla
.201f	a8		tay				tay
.2020	18		clc				clc
.2021	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32math.asm

.2022					MInt32Add:
.2022	18		clc				clc
.2023	b5 48		lda $48,x			lda 	esInt0,x
.2025	75 49		adc $49,x			adc 	esInt0+1,x
.2027	95 48		sta $48,x			sta 	esInt0,x
.2029	b5 50		lda $50,x			lda 	esInt1,x
.202b	75 51		adc $51,x			adc 	esInt1+1,x
.202d	95 50		sta $50,x			sta 	esInt1,x
.202f	b5 58		lda $58,x			lda 	esInt2,x
.2031	75 59		adc $59,x			adc 	esInt2+1,x
.2033	95 58		sta $58,x			sta 	esInt2,x
.2035	b5 60		lda $60,x			lda 	esInt3,x
.2037	75 61		adc $61,x			adc 	esInt3+1,x
.2039	95 60		sta $60,x			sta 	esInt3,x
.203b	60		rts				rts
.203c					MInt32Sub:
.203c	38		sec				sec
.203d	b5 48		lda $48,x			lda 	esInt0,x
.203f	f5 49		sbc $49,x			sbc 	esInt0+1,x
.2041	95 48		sta $48,x			sta 	esInt0,x
.2043	b5 50		lda $50,x			lda 	esInt1,x
.2045	f5 51		sbc $51,x			sbc 	esInt1+1,x
.2047	95 50		sta $50,x			sta 	esInt1,x
.2049	b5 58		lda $58,x			lda 	esInt2,x
.204b	f5 59		sbc $59,x			sbc 	esInt2+1,x
.204d	95 58		sta $58,x			sta 	esInt2,x
.204f	b5 60		lda $60,x			lda 	esInt3,x
.2051	f5 61		sbc $61,x			sbc 	esInt3+1,x
.2053	95 60		sta $60,x			sta 	esInt3,x
.2055	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32multiply.asm

.2056					MInt32Multiply:
.2056	e8		inx				inx 								; copy 2nd -> 3rd
.2057	20 7c 20	jsr $207c			jsr 	MInt32CopyUp
.205a	ca		dex				dex
.205b	20 7c 20	jsr $207c			jsr 	MInt32CopyUp 				; copy 1st -> 2nd
.205e	20 39 21	jsr $2139			jsr 	MInt32False 					; zero 1st.
.2061					_I32Loop:
.2061	b5 4a		lda $4a,x			lda 	esInt0+2,x 					; get low bit of 3rd
.2063	29 01		and #$01			and 	#1
.2065	f0 03		beq $206a			beq 	_I32NoAdd 					; if set
.2067	20 22 20	jsr $2022			jsr 	MInt32Add 					; add 2nd to 1st.
.206a					_I32NoAdd:
.206a	e8		inx				inx 								; shift 2nd left
.206b	20 4e 21	jsr $214e			jsr 	MInt32ShiftLeft
.206e	e8		inx				inx  								; shift 3rd right
.206f	20 57 21	jsr $2157			jsr 	MInt32ShiftRight
.2072	20 60 21	jsr $2160			jsr 	MInt32Zero 					; check if zero.
.2075	08		php				php 								; save status bits
.2076	ca		dex				dex 	 							; point back to 1st
.2077	ca		dex				dex
.2078	28		plp				plp 								; get status bits
.2079	d0 e6		bne $2061			bne 	_I32Loop 					; if non-zero keep going.
.207b	60		rts				rts
.207c					MInt32CopyUp:
.207c	b5 48		lda $48,x			lda 	esInt0,x
.207e	95 49		sta $49,x			sta 	esInt0+1,x
.2080	b5 50		lda $50,x			lda 	esInt1,x
.2082	95 51		sta $51,x			sta 	esInt1+1,x
.2084	b5 58		lda $58,x			lda 	esInt2,x
.2086	95 59		sta $59,x			sta 	esInt2+1,x
.2088	b5 60		lda $60,x			lda 	esInt3,x
.208a	95 61		sta $61,x			sta 	esInt3+1,x
.208c	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32tostr.asm

>0afa					MCharCount:	.fill 	1						; count of converted characters
.208d					MLInt32ToString:
.208d	aa		tax				tax									; module passes stack in A, base in Y
.208e	98		tya				tya
.208f					MInt32ToString:
.208f	48		pha				pha 								; save base
.2090	85 0c		sta $0c				sta 	tempShort 					; save target base.
.2092	a9 00		lda #$00			lda 	#0
.2094	8d fa 0a	sta $0afa			sta 	MCharCount 					; clear character count to 0
.2097	98		tya				tya
.2098	48		pha				pha
.2099	a5 0c		lda $0c				lda 	tempShort 					; check if we are signed conversion
.209b	10 10		bpl $20ad			bpl 	_I32TSUnsigned
.209d	48		pha				pha 								; save base on stack.
.209e	b5 60		lda $60,x			lda 	esInt3,x 					; is it actually negative
.20a0	10 08		bpl $20aa			bpl 	_I32TSNoFlip
.20a2	a9 2d		lda #$2d			lda 	#"-" 						; write a '-' prefix out.
.20a4	20 e0 20	jsr $20e0			jsr 	MI32WriteCharacter
.20a7	20 f3 20	jsr $20f3			jsr 	MInt32Negate 				; negate the value.
.20aa					_I32TSNoFlip:
.20aa	68		pla				pla 								; get the base back
.20ab	29 7f		and #$7f			and 	#$7F 						; clear the sign flag so it's just a base now.
.20ad					_I32TSUnsigned:
.20ad	20 bb 20	jsr $20bb			jsr 	MI32DivideWrite 			; recursive code to output string.
.20b0	a0 00		ldy #$00			ldy 	#0 							; write charcount to first character.
.20b2	ad fa 0a	lda $0afa			lda 	MCharCount
.20b5	91 04		sta ($04),y			sta 	(temp0),y
.20b7	68		pla				pla
.20b8	a8		tay				tay
.20b9	68		pla				pla
.20ba	60		rts				rts
.20bb					MI32DivideWrite:
.20bb	48		pha				pha 								; save the divisor/base
.20bc	e8		inx				inx 								; write in the dividing position.
.20bd	20 48 21	jsr $2148			jsr 	MInt32Set8Bit
.20c0	ca		dex				dex
.20c1	20 3f 1f	jsr $1f3f			jsr 	MInt32UDivide 				; divide number by base.
.20c4	68		pla				pla 								; get the base into Y
.20c5	a8		tay				tay
.20c6	b5 4a		lda $4a,x			lda 	esInt0+2,x 					; get the remainder and push on the stack.
.20c8	48		pha				pha
.20c9	20 60 21	jsr $2160			jsr 	MInt32Zero 					; is the result zero ?
.20cc	f0 04		beq $20d2			beq 	_I32NoRecurse 				; if so, don't recurse.
.20ce	98		tya				tya 								; put base into A
.20cf	20 bb 20	jsr $20bb			jsr 	MI32DivideWrite 				; and jsr the dividor recursively.
.20d2					_I32NoRecurse:
.20d2	68		pla				pla 								; get the remainder back
.20d3	c9 0a		cmp #$0a			cmp 	#10  						; handle hexadecimals.
.20d5	90 02		bcc $20d9			bcc 	_I32NotHex
.20d7	69 06		adc #$06			adc 	#7-1
.20d9					_I32NotHex:
.20d9	18		clc				clc 								; make it ASCII
.20da	69 30		adc #$30			adc 	#48
.20dc	20 e0 20	jsr $20e0			jsr 	MI32WriteCharacter 			; write the character out
.20df	60		rts				rts 								; and exit.
.20e0					MI32WriteCharacter:
.20e0	ee fa 0a	inc $0afa			inc 	MCharCount 					; bump count (space for leading count)
.20e3	ac fa 0a	ldy $0afa			ldy 	MCharCount 					; get position
.20e6	91 04		sta ($04),y			sta 	(temp0),y 					; write out with trailing 0
.20e8	c8		iny				iny
.20e9	a9 00		lda #$00			lda 	#0
.20eb	91 04		sta ($04),y			sta 	(temp0),y
.20ed	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32unary.asm

>0afb					MSeed32:	.fill 	4							; random number seed.
.20ee					MInt32Absolute:
.20ee	b5 60		lda $60,x			lda 	esInt3,x 					; use negate code if -ve.
.20f0	30 01		bmi $20f3			bmi 	MInt32Negate
.20f2	60		rts				rts
.20f3					MInt32Negate:
.20f3	38		sec				sec
.20f4	a9 00		lda #$00			lda 	#0
.20f6	f5 48		sbc $48,x			sbc 	esInt0,x
.20f8	95 48		sta $48,x			sta 	esInt0,x
.20fa	a9 00		lda #$00			lda 	#0
.20fc	f5 50		sbc $50,x			sbc 	esInt1,x
.20fe	95 50		sta $50,x			sta 	esInt1,x
.2100	a9 00		lda #$00			lda 	#0
.2102	f5 58		sbc $58,x			sbc 	esInt2,x
.2104	95 58		sta $58,x			sta 	esInt2,x
.2106	a9 00		lda #$00			lda 	#0
.2108	f5 60		sbc $60,x			sbc 	esInt3,x
.210a	95 60		sta $60,x			sta 	esInt3,x
.210c	60		rts				rts
.210d					MInt32Not:
.210d	b5 48		lda $48,x			lda 	esInt0,x
.210f	49 ff		eor #$ff			eor 	#$FF
.2111	95 48		sta $48,x			sta 	esInt0,x
.2113	b5 50		lda $50,x			lda 	esInt1,x
.2115	49 ff		eor #$ff			eor 	#$FF
.2117	95 50		sta $50,x			sta 	esInt1,x
.2119	b5 58		lda $58,x			lda 	esInt2,x
.211b	49 ff		eor #$ff			eor 	#$FF
.211d	95 58		sta $58,x			sta 	esInt2,x
.211f	b5 60		lda $60,x			lda 	esInt3,x
.2121	49 ff		eor #$ff			eor 	#$FF
.2123	95 60		sta $60,x			sta 	esInt3,x
.2125	60		rts				rts
.2126					MInt32Sign:
.2126	b5 60		lda $60,x			lda 	esInt3,x					; look at MSB
.2128	30 0b		bmi $2135			bmi 	MInt32True 					; if set return -1 (true)
.212a	20 60 21	jsr $2160			jsr 	MInt32Zero 					; is it zero ?
.212d	f0 0a		beq $2139			beq 	MInt32False 					; if zero return 0 (false)
.212f	20 39 21	jsr $2139			jsr 	MInt32False 					; > 0 return 1
.2132	f6 48		inc $48,x			inc 	esInt0,x
.2134	60		rts				rts
.2135					MInt32True:
.2135	a9 ff		lda #$ff			lda 	#$FF 						; set to $FFFFFFFF
.2137	d0 02		bne $213b			bne 	MInt32WriteAll
.2139					MInt32False:
.2139	a9 00		lda #$00			lda 	#0
.213b					MInt32WriteAll:
.213b	95 48		sta $48,x			sta 	esInt0,x
.213d					MInt32Write123:
.213d	95 50		sta $50,x			sta 	esInt1,x
.213f	95 58		sta $58,x			sta 	esInt2,x
.2141	95 60		sta $60,x			sta 	esInt3,x
.2143	a9 00		lda #$00			lda 	#$00						; and make it an integer
.2145	95 40		sta $40,x			sta 	esType,x
.2147	60		rts				rts
.2148					MInt32Set8Bit:
.2148	95 48		sta $48,x			sta 	esInt0,x
.214a	a9 00		lda #$00			lda 	#0
.214c	f0 ef		beq $213d			beq		MInt32Write123
.214e					MInt32ShiftLeft:
.214e	16 48		asl $48,x			asl 	esInt0,x
.2150	36 50		rol $50,x			rol	 	esInt1,x
.2152	36 58		rol $58,x			rol	 	esInt2,x
.2154	36 60		rol $60,x			rol	 	esInt3,x
.2156	60		rts				rts
.2157					MInt32ShiftRight:
.2157	56 60		lsr $60,x			lsr 	esInt3,x
.2159	76 58		ror $58,x			ror 	esInt2,x
.215b	76 50		ror $50,x			ror 	esInt1,x
.215d	76 48		ror $48,x			ror 	esInt0,x
.215f	60		rts				rts
.2160					MInt32Zero:
.2160	b5 48		lda $48,x			lda 	esInt0,x
.2162	15 50		ora $50,x			ora 	esInt1,x
.2164	15 58		ora $58,x			ora 	esInt2,x
.2166	15 60		ora $60,x			ora 	esInt3,x
.2168	60		rts				rts
.2169					MInt32Random:
.2169	98		tya				tya
.216a	48		pha				pha
.216b	a0 07		ldy #$07			ldy 	#7
.216d	ad fb 0a	lda $0afb			lda 	MSeed32+0
.2170	d0 03		bne $2175			bne 	_Random1
.2172	a8		tay				tay
.2173	a9 aa		lda #$aa			lda		#$AA
.2175					_Random1:
.2175	0a		asl a				asl 	a
.2176	2e fc 0a	rol $0afc			rol 	MSeed32+1
.2179	2e fd 0a	rol $0afd			rol 	MSeed32+2
.217c	2e fe 0a	rol $0afe			rol 	MSeed32+3
.217f	90 02		bcc $2183			bcc 	_Random2
.2181	49 c5		eor #$c5			eor 	#$C5
.2183					_Random2:
.2183	88		dey				dey
.2184	d0 ef		bne $2175			bne 	_Random1
.2186	8d fb 0a	sta $0afb			sta 	MSeed32+0
.2189	95 48		sta $48,x			sta 	esInt0,x
.218b	ad fc 0a	lda $0afc			lda 	MSeed32+1
.218e	95 50		sta $50,x			sta 	esInt1,x
.2190	ad fd 0a	lda $0afd			lda 	MSeed32+2
.2193	95 58		sta $58,x			sta 	esInt2,x
.2195	ad fe 0a	lda $0afe			lda 	MSeed32+3
.2198	95 60		sta $60,x			sta 	esInt3,x
.219a	68		pla				pla
.219b	a8		tay				tay
.219c	a9 00		lda #$00			lda 	#0
.219e	95 40		sta $40,x			sta 	esType,x
.21a0	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/utility/check.asm

.21a1					CheckToken:
.21a1	d1 02		cmp ($02),y			cmp 	(codePtr),y
.21a3	d0 02		bne $21a7			bne 	_CTError
.21a5	c8		iny				iny
.21a6	60		rts				rts
.21a7					_CTError:
.21a7	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.21a9	20 d2 22	jsr $22d2		jsr	errorHandler
.21ac					CheckRightParen:
.21ac	b1 02		lda ($02),y			lda 	(codePtr),y
.21ae	c8		iny				iny
.21af	c9 c6		cmp #$c6			cmp 	#TKW_RPAREN
.21b1	d0 01		bne $21b4			bne 	_CRPError
.21b3	60		rts				rts
.21b4					_CRPError:
.21b4	a2 09		ldx #$09			ldx 	#ErrorID_MissingRP
.21b6	20 d2 22	jsr $22d2		jsr	errorHandler
.21b9					CheckComma:
.21b9	b1 02		lda ($02),y			lda 	(codePtr),y
.21bb	c8		iny				iny
.21bc	c9 c8		cmp #$c8			cmp 	#TKW_COMMA
.21be	d0 01		bne $21c1			bne 	_CCError
.21c0	60		rts				rts
.21c1					_CCError:
.21c1	a2 0a		ldx #$0a			ldx 	#ErrorID_MissingComma
.21c3	20 d2 22	jsr $22d2		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/utility/scanner.asm

.2ca8					ScanForward:
.2ca8	85 06		sta $06				sta 	temp1 						; save tokens to search in temp1/temp1+1
.2caa	86 07		stx $07				stx 	temp1+1
.2cac	a9 00		lda #$00			lda 	#0 							; temp2 counts structure levels.
.2cae	85 08		sta $08				sta 	temp2
.2cb0	b1 02		lda ($02),y	_SFLoop:lda 	(codePtr),y 				; look at the next token.
.2cb2	c8		iny				iny
.2cb3	a6 08		ldx $08				ldx 	temp2 						; check structure levels are zero.
.2cb5	d0 08		bne $2cbf			bne 	_SFNoCheck 					; if so, check token against entered values.
.2cb7	c5 06		cmp $06				cmp 	temp1
.2cb9	f0 24		beq $2cdf			beq 	_SFExit
.2cbb	c5 07		cmp $07				cmp 	temp1+1
.2cbd	f0 20		beq $2cdf			beq 	_SFExit
.2cbf					_SFNoCheck:
.2cbf	c9 80		cmp #$80			cmp 	#$80 						; if it is 00-7F (variable/number) just skip it.
.2cc1	90 ed		bcc $2cb0			bcc 	_SFLoop
.2cc3	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; $80-$85 is various specials.
.2cc5	90 19		bcc $2ce0			bcc 	_SFSpecials
.2cc7	c9 99		cmp #$99			cmp 	#TOK_STRUCTST 				; if < structure start then continue
.2cc9	90 e5		bcc $2cb0			bcc 	_SFLoop
.2ccb	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST 				; if >= unary start (after structure) then continue.
.2ccd	b0 e1		bcs $2cb0			bcs 	_SFLoop
.2ccf	aa		tax				tax  								; token in X, and look up the adjuster.
.2cd0	bd 06 1b	lda $1b06,x			lda 	ELBinaryOperatorInfo-TOK_BINARYST,x
.2cd3	38		sec				sec 								; convert to an offset
.2cd4	e9 81		sbc #$81			sbc 	#$81
.2cd6	18		clc				clc 								; add to depth
.2cd7	65 08		adc $08				adc 	temp2
.2cd9	85 08		sta $08				sta 	temp2
.2cdb	10 d3		bpl $2cb0			bpl 	_SFLoop 					; +ve okay to continue
.2cdd	30 35		bmi $2d14			bmi 	_SFError 					; if gone -ve then we have a nesting error
.2cdf	60		rts		_SFExit:rts
.2ce0					_SFSpecials:
.2ce0	c9 80		cmp #$80			cmp 	#TOK_EOL 					; $80, advance to next line.
.2ce2	f0 14		beq $2cf8			beq 	_SFNextLine
.2ce4	c9 84		cmp #$84			cmp 	#TOK_FPC					; $84, skip embedded float
.2ce6	f0 31		beq $2d19			beq 	_SFFloatSkip
.2ce8	c9 85		cmp #$85			cmp 	#TOK_STR 					; $85, skip string
.2cea	f0 04		beq $2cf0			beq 	_SFSkipString
.2cec	c8		iny				iny									; $81,$82,$83 shift, so just advance over the shifted
.2ced	4c b0 2c	jmp $2cb0			jmp 	_SFLoop 					; token.
.2cf0					_SFSkipString:
.2cf0	98		tya				tya
.2cf1	38		sec				sec
.2cf2	71 02		adc ($02),y			adc 	(codePtr),y
.2cf4	a8		tay				tay
.2cf5	4c b0 2c	jmp $2cb0			jmp 	_SFLoop
.2cf8					_SFNextLine:
.2cf8	a0 00		ldy #$00			ldy 	#0 							; get offset
.2cfa	b1 02		lda ($02),y			lda 	(codePtr),y
.2cfc	18		clc				clc 								; add to code pointer.
.2cfd	65 02		adc $02				adc 	codePtr
.2cff	85 02		sta $02				sta 	codePtr
.2d01	90 02		bcc $2d05			bcc		_SFNLNoCarry
.2d03	e6 03		inc $03				inc 	codePtr+1
.2d05					_SFNLNoCarry:
.2d05	b1 02		lda ($02),y			lda 	(codePtr),y 				; reached the end of the program.
.2d07	d0 a7		bne $2cb0			bne		_SFLoop 					; no go round again
.2d09	a5 06		lda $06				lda 	temp1
.2d0b	c9 d9		cmp #$d9			cmp 	#TKW_DATA 					; if searching for Data different error.
.2d0d	d0 05		bne $2d14			bne 	_SFError
.2d0f	a2 1c		ldx #$1c			ldx 	#ErrorID_DataError
.2d11	20 d2 22	jsr $22d2		jsr	errorHandler
.2d14					_SFError:
.2d14	a2 14		ldx #$14			ldx 	#ErrorID_Struct
.2d16	20 d2 22	jsr $22d2		jsr	errorHandler
.2d19					_SFFloatSkip:
.2d19	4c 8f 14	jmp $148f			jmp 	Unimplemented

;******  Return to file: main/main.asm


;******  Processing file: main/utility/stack.asm

.0078					rsPointer:
>0078							.fill 	2							; to TOS, which is the current top-token.
.21c6					RSReset:
.21c6	a9 ff		lda #$ff			lda 	#(returnStack+retStackSize-1) & $FF
.21c8	85 78		sta $78				sta 	rsPointer
.21ca	a9 09		lda #$09			lda 	#(returnStack+retStackSize-1) >> 8
.21cc	85 79		sta $79				sta 	1+(rsPointer)
.21ce	a9 ff		lda #$ff			lda 	#$FF 						; put a duff marker on TOS, so nothing will pop
.21d0	8d ff 09	sta $09ff			sta 	returnStack+retStackSize-1
.21d3	60		rts				rts
.21d4					RSClaim:
.21d4	84 0c		sty $0c				sty 	tempShort 					; preserve Y
.21d6	48		pha				pha 								; save marker on stack.
.21d7	8a		txa				txa 								; get bytes required.
.21d8	38		sec				sec
.21d9	49 ff		eor #$ff			eor 	#$FF 						; add to rsPointer using 2's complement.
.21db	65 78		adc $78				adc 	rsPointer
.21dd	85 78		sta $78				sta 	rsPointer
.21df	a5 79		lda $79				lda 	rsPointer+1
.21e1	69 ff		adc #$ff			adc 	#$FF
.21e3	85 79		sta $79				sta 	rsPointer+1
.21e5	c9 08		cmp #$08			cmp 	#returnStack>>8 			; overflow. underflow actually :)
.21e7	90 08		bcc $21f1			bcc 	_RSCOverflow
.21e9	68		pla				pla 								; get marker back
.21ea	a0 00		ldy #$00			ldy 	#0 							; write marker out.
.21ec	91 78		sta ($78),y			sta 	(rsPointer),y
.21ee	a4 0c		ldy $0c				ldy 	tempShort 					; restore Y and exit
.21f0	60		rts				rts
.21f1					_RSCOverflow:
.21f1	a2 16		ldx #$16			ldx 	#ErrorID_RetStack
.21f3	20 d2 22	jsr $22d2		jsr	errorHandler
.21f6					RSFree:
.21f6	18		clc				clc
.21f7	65 78		adc $78				adc 	rsPointer
.21f9	85 78		sta $78				sta 	rsPointer
.21fb	90 02		bcc $21ff			bcc 	_RSFExit
.21fd	e6 79		inc $79				inc 	rsPointer+1
.21ff					_RSFExit:
.21ff	60		rts				rts
.2200					RSSavePosition:
.2200	84 0c		sty $0c				sty 	tempShort 					; save Y position
.2202	a8		tay				tay 								; this is where we write it.
.2203	a5 02		lda $02				lda 	codePtr 					; write codePointer out
.2205	91 78		sta ($78),y			sta 	(rsPointer),y
.2207	c8		iny				iny
.2208	a5 03		lda $03				lda 	codePtr+1
.220a	91 78		sta ($78),y			sta 	(rsPointer),y
.220c	c8		iny				iny
.220d	a5 0c		lda $0c				lda 	tempShort 					; write the Y position out.
.220f	91 78		sta ($78),y			sta 	(rsPointer),y
.2211	a8		tay				tay 								; fix Y back again to original value
.2212	60		rts				rts
.2213					RSLoadPosition:
.2213	a8		tay				tay
.2214	b1 78		lda ($78),y			lda 	(rsPointer),y 				; read codePointer back
.2216	85 02		sta $02				sta 	codePtr
.2218	c8		iny				iny
.2219	b1 78		lda ($78),y			lda 	(rsPointer),y
.221b	85 03		sta $03				sta 	codePtr+1
.221d	c8		iny				iny
.221e	b1 78		lda ($78),y			lda 	(rsPointer),y 				; and the offset
.2220	a8		tay				tay 								; to Y
.2221	60		rts				rts

;******  Return to file: main/main.asm

.2222					mainHandler:
.2222	7c 25 22	jmp ($2225,x)			jmp 	(mainVectors,x)
.2225					mainVectors:
>2225	ac 21					.word CheckRightParen      ; index 0
>2227	39 1b					.word LinkEvaluate         ; index 2
>2229	3f 1b					.word LinkEvaluateInteger  ; index 4
>222b	45 1b					.word LinkEvaluateSmallInt ; index 6
>222d	8d 20					.word MLInt32ToString      ; index 8
>222f	0b 13					.word PrintString          ; index 10

;******  Return to file: basic.asm

.2231					section_end_main:
.2231					section_start_assembler:

;******  Processing file: assembler/assembler.asm

.2231					assemblerHandler:
.2231	7c 34 22	jmp ($2234,x)			jmp 	(assemblerVectors,x)
.2234					assemblerVectors:

;******  Return to file: basic.asm

.2234					section_end_assembler:
.2234					section_start_device:

;******  Processing file: device/device.asm


;******  Processing file: device/option_x16/x16io.asm

.2234					IOInitialise:
.2234	a9 0f		lda #$0f			lda 	#15
.2236	20 5f 22	jsr $225f			jsr 	IOPrintChar
.2239	a9 02		lda #$02			lda 	#2
.223b	20 73 22	jsr $2273			jsr 	IOInk
.223e	a9 00		lda #$00			lda 	#0
.2240	20 87 22	jsr $2287			jsr 	IOPaper
.2243	20 47 22	jsr $2247			jsr 	IOClearScreen
.2246	60		rts				rts
.2247					IOClearScreen:
.2247	48		pha				pha
.2248	a9 93		lda #$93			lda	 	#147
.224a	20 5f 22	jsr $225f			jsr 	IOPrintChar
.224d	68		pla				pla
.224e	60		rts				rts
.224f					IONewLine:
.224f	48		pha				pha
.2250	a9 0d		lda #$0d			lda 	#13
.2252	20 5f 22	jsr $225f			jsr 	IOPrintChar
.2255	68		pla				pla
.2256	60		rts				rts
.2257					IOTab:
.2257	48		pha				pha
.2258	a9 20		lda #$20			lda 	#32
.225a	20 5f 22	jsr $225f			jsr 	IOPrintChar
.225d	68		pla				pla
.225e	60		rts				rts
.225f					IOPrintChar:
.225f	aa		tax				tax
.2260	5a		phy				phy
.2261	8a		txa				txa
.2262	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.2265	7a		ply				ply
.2266	60		rts				rts
.2267					IOInkey:
.2267	98		tya				tya
.2268	48		pha				pha
.2269	20 e4 ff	jsr $ffe4			jsr 	$FFE4
.226c	85 0c		sta $0c				sta 	tempShort
.226e	68		pla				pla
.226f	a8		tay				tay
.2270	a5 0c		lda $0c				lda 	tempShort
.2272	60		rts				rts
.2273					IOInk:
.2273	48		pha				pha
.2274	29 07		and #$07			and 	#7
.2276	aa		tax				tax
.2277	bd 7f 22	lda $227f,x			lda 	_IOColourTable,x
.227a	20 5f 22	jsr $225f			jsr 	IOPrintChar
.227d	68		pla				pla
.227e	60		rts				rts
.227f					_IOColourTable:
>227f	90						.byte 	$90 					; 0 Black
>2280	1c						.byte 	$1C 					; 1 Red
>2281	1e						.byte 	$1E 					; 2 Green
>2282	9e						.byte 	$9E 					; 3 Yellow
>2283	1f						.byte 	$1F 					; 4 Blue
>2284	9c						.byte 	$9C 					; 5 Magenta
>2285	9f						.byte 	$9F 					; 6 Cyan
>2286	05						.byte 	$05 					; 7 White
.2287					IOPaper:
.2287	48		pha				pha
.2288	48		pha				pha
.2289	a9 01		lda #$01			lda 	#1 						; 1 swaps fgr/bgr
.228b	20 5f 22	jsr $225f			jsr 	IOPrintChar
.228e	68		pla				pla
.228f	20 73 22	jsr $2273			jsr 	IOInk
.2292	a9 01		lda #$01			lda 	#1
.2294	20 5f 22	jsr $225f			jsr 	IOPrintChar
.2297	68		pla				pla
.2298	60		rts				rts
.2299					IOLocate:
.2299	48		pha				pha
.229a	a9 13		lda #$13			lda 	#$13 					; home
.229c	20 5f 22	jsr $225f			jsr 	IOPrintChar
.229f	a9 11		lda #$11			lda 	#$11 	 				; print Y x $11 (down)
.22a1	20 a8 22	jsr $22a8			jsr 	_IOLoc2
.22a4	68		pla				pla
.22a5	a8		tay				tay
.22a6	a9 1d		lda #$1d			lda 	#$1D
.22a8					_IOLoc2:
.22a8	c0 00		cpy #$00			cpy 	#0
.22aa	f0 06		beq $22b2			beq 	_IOLocExit
.22ac	20 5f 22	jsr $225f			jsr 	IOPrintChar
.22af	88		dey				dey
.22b0	d0 f6		bne $22a8			bne 	_IOLoc2
.22b2					_IOLocExit:
.22b2	60		rts				rts

;******  Return to file: device/device.asm


;******  Processing file: device/option_x16/x16timer.asm

.22b3					IOReadTimer:
.22b3	20 de ff	jsr $ffde			jsr 	$FFDE
.22b6	48		pha				pha
.22b7	8a		txa				txa
.22b8	a8		tay				tay
.22b9	68		pla				pla
.22ba	60		rts				rts

;******  Return to file: device/device.asm

.22bb					deviceHandler:
.22bb	7c be 22	jmp ($22be,x)			jmp 	(deviceVectors,x)
.22be					deviceVectors:
>22be	47 22					.word IOClearScreen        ; index 0
>22c0	4f 22					.word IONewLine            ; index 2
>22c2	34 22					.word IOInitialise         ; index 4
>22c4	73 22					.word IOInk                ; index 6
>22c6	67 22					.word IOInkey              ; index 8
>22c8	99 22					.word IOLocate             ; index 10
>22ca	87 22					.word IOPaper              ; index 12
>22cc	5f 22					.word IOPrintChar          ; index 14
>22ce	57 22					.word IOTab                ; index 16
>22d0	b3 22					.word IOReadTimer          ; index 18

;******  Return to file: basic.asm

.22d2					section_end_device:
.22d2					section_start_error:

;******  Processing file: error/error.asm


;******  Processing file: error/errorhandler.asm

.22d2					ErrorHandler:
.22d2	a9 35		lda #$35			lda 	#(ErrorTextList) & $FF
.22d4	85 04		sta $04				sta 	temp0
.22d6	a9 23		lda #$23			lda 	#(ErrorTextList) >> 8
.22d8	85 05		sta $05				sta 	1+(temp0)
.22da	ca		dex		_EHFind:dex
.22db	f0 10		beq $22ed			beq 	_EHFound
.22dd	a0 00		ldy #$00			ldy 	#0 							; goto next text message
.22df	38		sec				sec
.22e0	a5 04		lda $04				lda 	temp0
.22e2	71 04		adc ($04),y			adc 	(temp0),y
.22e4	85 04		sta $04				sta 	temp0
.22e6	90 f2		bcc $22da			bcc 	_EHFind
.22e8	e6 05		inc $05				inc 	temp0+1
.22ea	4c da 22	jmp $22da			jmp 	_EHFind
.22ed					_EHFound:
.22ed	a2 0a		ldx #$0a		ldx	#10
.22ef	20 22 22	jsr $2222		jsr	mainHandler
.22f2	a0 00		ldy #$00			ldy 	#0 							; in a line ?
.22f4	b1 02		lda ($02),y			lda 	(codePtr),y
.22f6	f0 36		beq $232e			beq 	_EHNoLine
.22f8	a9 31		lda #$31			lda 	#(EHAtMsg) & $FF
.22fa	85 04		sta $04				sta 	temp0
.22fc	a9 23		lda #$23			lda 	#(EHAtMsg) >> 8
.22fe	85 05		sta $05				sta 	1+(temp0)
.2300	a2 0a		ldx #$0a		ldx	#10
.2302	20 22 22	jsr $2222		jsr	mainHandler
.2305	a0 01		ldy #$01			ldy 	#1 							; set up line number in TOS
.2307	a2 00		ldx #$00			ldx 	#0
.2309	b1 02		lda ($02),y			lda 	(codePtr),y
.230b	95 48		sta $48,x			sta 	esInt0,x
.230d	c8		iny				iny
.230e	b1 02		lda ($02),y			lda 	(codePtr),y
.2310	95 50		sta $50,x			sta 	esInt1,x
.2312	a9 00		lda #$00			lda 	#0
.2314	95 58		sta $58,x			sta 	esInt2,x
.2316	95 60		sta $60,x			sta 	esInt3,x
.2318	a9 cd		lda #$cd			lda 	#(convertBuffer) & $FF
.231a	85 04		sta $04				sta 	temp0
.231c	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.231e	85 05		sta $05				sta 	1+(temp0)
.2320	a0 0a		ldy #$0a			ldy 	#10
.2322	a9 00		lda #$00			lda 	#0
.2324	a2 08		ldx #$08		ldx	#8
.2326	20 22 22	jsr $2222		jsr	mainHandler
.2329	a2 0a		ldx #$0a		ldx	#10
.232b	20 22 22	jsr $2222		jsr	mainHandler
.232e					_EHNoLine:
.232e	4c 2e 23	jmp $232e	_EHHalt:jmp 	_EHHalt
.2331					EHAtMsg:
>2331	03 20 40 20					.text 	3," @ "

;******  Processing file: error/../generated/errortext.inc

.2335					ErrorTextList:
>2335	13 46 65 61 74 75 72 65			.text 19,"Feature not Present"
>233d	20 6e 6f 74 20 50 72 65 73 65 6e 74
>2349	0c 53 79 6e 74 61 78 20			.text 12,"Syntax Error"
>2351	45 72 72 6f 72
>2356	0f 4d 6f 64 75 6c 65 20			.text 15,"Module disabled"
>235e	64 69 73 61 62 6c 65 64
>2366	10 41 73 73 65 72 74 69			.text 16,"Assertion failed"
>236e	6f 6e 20 66 61 69 6c 65 64
>2377	0e 44 69 76 69 64 65 20			.text 14,"Divide By Zero"
>237f	42 79 20 5a 65 72 6f
>2386	04 53 74 6f 70				.text 4,"Stop"
>238b	0d 54 79 70 65 20 4d 69			.text 13,"Type Mismatch"
>2393	73 6d 61 74 63 68
>2399	0d 49 6c 6c 65 67 61 6c			.text 13,"Illegal Value"
>23a1	20 56 61 6c 75 65
>23a7	15 4d 69 73 73 69 6e 67			.text 21,"Missing right bracket"
>23af	20 72 69 67 68 74 20 62 72 61 63 6b 65 74
>23bd	0d 4d 69 73 73 69 6e 67			.text 13,"Missing comma"
>23c5	20 63 6f 6d 6d 61
>23cb	11 4d 69 73 73 69 6e 67			.text 17,"Missing reference"
>23d3	20 72 65 66 65 72 65 6e 63 65
>23dd	15 4c 69 6e 65 20 4e 75			.text 21,"Line Number not found"
>23e5	6d 62 65 72 20 6e 6f 74 20 66 6f 75 6e 64
>23f3	10 53 74 72 69 6e 67 20			.text 16,"String too long."
>23fb	74 6f 6f 20 6c 6f 6e 67 2e
>2404	14 52 45 54 55 52 4e 20			.text 20,"RETURN without GOSUB"
>240c	77 69 74 68 6f 75 74 20 47 4f 53 55 42
>2419	14 55 4e 54 49 4c 20 77			.text 20,"UNTIL without REPEAT"
>2421	69 74 68 6f 75 74 20 52 45 50 45 41 54
>242e	10 4e 45 58 54 20 77 69			.text 16,"NEXT without FOR"
>2436	74 68 6f 75 74 20 46 4f 52
>243f	12 57 45 4e 44 20 77 69			.text 18,"WEND without WHILE"
>2447	74 68 6f 75 74 20 57 48 49 4c 45
>2452	14 45 4e 44 50 52 4f 43			.text 20,"ENDPROC without PROC"
>245a	20 77 69 74 68 6f 75 74 20 50 52 4f 43
>2467	0e 42 61 64 20 4e 45 58			.text 14,"Bad NEXT index"
>246f	54 20 69 6e 64 65 78
>2476	17 53 74 72 75 63 74 75			.text 23,"Structures nested wrong"
>247e	72 65 73 20 6e 65 73 74 65 64 20 77 72 6f 6e 67
>248e	16 43 61 6e 6e 6f 74 20			.text 22,"Cannot create variable"
>2496	63 72 65 61 74 65 20 76 61 72 69 61 62 6c 65
>24a5	1a 52 65 74 75 72 6e 20			.text 26,"Return stack out of space."
>24ad	73 74 61 63 6b 20 6f 75 74 20 6f 66 20 73 70 61
>24bd	63 65 2e
>24c0	11 55 6e 6b 6e 6f 77 6e			.text 17,"Unknown Procedure"
>24c8	20 50 72 6f 63 65 64 75 72 65
>24d2	18 50 61 72 61 6d 65 74			.text 24,"Parameters do not match."
>24da	65 72 73 20 64 6f 20 6e 6f 74 20 6d 61 74 63 68
>24ea	2e
>24eb	15 41 72 72 61 79 20 61			.text 21,"Array already defined"
>24f3	6c 72 65 61 64 79 20 64 65 66 69 6e 65 64
>2501	12 44 49 4d 20 72 65 71			.text 18,"DIM requires array"
>2509	75 69 72 65 73 20 61 72 72 61 79
>2514	10 42 61 64 20 61 72 72			.text 16,"Bad array index."
>251c	61 79 20 69 6e 64 65 78 2e
>2525	0b 4f 75 74 20 6f 66 20			.text 11,"Out of data"
>252d	64 61 74 61
>2531	00					.byte 0

;******  Return to file: error/errorhandler.asm


;******  Return to file: error/error.asm


;******  Return to file: basic.asm

.2532					section_end_error:
.2532					section_start_extension:

;******  Processing file: extension/extension.asm


;******  Processing file: extension/extensionhandler.asm

.2532					ExtensionHandler:
.2532	c9 ff		cmp #$ff			cmp 	#$FF						; A = $FF command, otherwise unary function stack level.
.2534	d0 08		bne $253e			bne 	_ExtensionUnary
.2536	b1 02		lda ($02),y			lda 	(codePtr),y
.2538	c8		iny				iny
.2539	0a		asl a				asl 	a
.253a	aa		tax				tax
.253b	7c 3c 25	jmp ($253c,x)			jmp 	(Group2Vectors-12,X)
.253e					_ExtensionUnary:
.253e	48		pha				pha 								; save stack pos in A
.253f	b1 02		lda ($02),y			lda 	(codePtr),y 				; get shifted token
.2541	c8		iny				iny
.2542	0a		asl a				asl 	a
.2543	aa		tax				tax
.2544	68		pla				pla
.2545	7c 40 25	jmp ($2540,x)			jmp 	(Group3Vectors-12,X)

;******  Processing file: extension/../generated/tokenvectors2.inc

.2548					Group2Vectors:
>2548	58 25					.word	Command_VPoke            ; $86 vpoke
>254a	5b 25					.word	Command_VDoke            ; $87 vdoke

;******  Return to file: extension/extensionhandler.asm


;******  Processing file: extension/../generated/tokenvectors3.inc

.254c					Group3Vectors:
>254c	9c 25					.word	Command_VPeek            ; $86 vpeek(
>254e	9f 25					.word	Command_VDeek            ; $87 vdeek(

;******  Return to file: extension/extensionhandler.asm

.2550					XEvaluateInteger:
.2550	8a		txa				txa
.2551	a2 04		ldx #$04		ldx	#4
.2553	20 22 22	jsr $2222		jsr	mainHandler
.2556	aa		tax				tax
.2557	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/vpeekpoke.asm

.2558					Command_VPoke:
.2558	38		sec				sec 						; one byte , CS
.2559	b0 01		bcs $255c			bcs 	CmdVideoWrite
.255b					Command_VDoke:
.255b	18		clc				clc 						; two bytes, CC
.255c					CmdVideoWrite:
.255c	08		php				php
.255d	a2 00		ldx #$00			ldx 	#0  				; get address into levels 0,1
.255f	20 50 25	jsr $2550			jsr 	XEvaluateInteger
.2562	20 b9 21	jsr $21b9			jsr 	CheckComma
.2565	e8		inx				inx
.2566	20 50 25	jsr $2550			jsr 	XEvaluateInteger
.2569	ca		dex				dex
.256a	20 7b 25	jsr $257b			jsr 	SetUpTOSVRamAddress
.256d	a5 49		lda $49				lda 	esInt0+1 			; get MSB of write value
.256f	8d 23 9f	sta $9f23			sta 	$9F23
.2572	28		plp				plp 						; if it was Poke then exit
.2573	b0 05		bcs $257a			bcs 	_CVWExit
.2575	a5 51		lda $51				lda 	esInt1+1 			; doke, write the MSB.
.2577	8d 23 9f	sta $9f23			sta 	$9F23
.257a					_CVWExit:
.257a	60		rts				rts
.257b					SetUpTOSVRamAddress:
.257b	b5 58		lda $58,x			lda 	esInt2,x 			; check range of address, data to $FFFF
.257d	29 01		and #$01			and 	#1
.257f	15 60		ora $60,x			ora 	esInt3,x
.2581	d0 14		bne $2597			bne 	CVWValue
.2583	b5 48		lda $48,x			lda 	esInt0,x				; set address up
.2585	8d 20 9f	sta $9f20			sta 	$9F20
.2588	b5 50		lda $50,x			lda 	esInt1,x
.258a	8d 21 9f	sta $9f21			sta	 	$9F21
.258d	b5 58		lda $58,x			lda 	esInt2,x
.258f	29 01		and #$01			and 	#1
.2591	09 10		ora #$10			ora 	#$10 				; step 1.
.2593	8d 22 9f	sta $9f22			sta 	$9F22
.2596	60		rts				rts
.2597					CVWValue:
.2597	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.2599	20 d2 22	jsr $22d2		jsr	errorHandler
.259c					Command_VPeek:
.259c	38		sec				sec 						; one byte , CS
.259d	b0 01		bcs $25a0			bcs 	CmdVideoRead
.259f					Command_VDeek:
.259f	18		clc				clc 						; two bytes, CC
.25a0					CmdVideoRead:
>25a0	db						.byte 	$DB
.25a1	08		php				php 						; save action on stack.
.25a2	aa		tax				tax 						; save stack position
.25a3	20 50 25	jsr $2550			jsr 	XEvaluateInteger 	; address
.25a6	20 ac 21	jsr $21ac			jsr 	CheckRightParen 	; closing right bracket.
.25a9	20 7b 25	jsr $257b			jsr 	SetUpTOSVRamAddress	; set up VRAM address.
.25ac	a9 00		lda #$00			lda 	#0 					; zero the return value
.25ae	95 60		sta $60,x			sta 	esInt3,x
.25b0	95 58		sta $58,x			sta 	esInt2,x
.25b2	95 50		sta $50,x			sta 	esInt1,x
.25b4	ad 23 9f	lda $9f23			lda 	$9F23
.25b7	95 48		sta $48,x			sta 	esInt0,x
.25b9	28		plp				plp
.25ba	b0 05		bcs $25c1			bcs 	_CVRExit
.25bc	ad 23 9f	lda $9f23			lda 	$9F23
.25bf	95 50		sta $50,x			sta 	esInt1,x
.25c1					_CVRExit:
.25c1	8a		txa				txa 						; return X position.
.25c2	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Return to file: basic.asm

.25c3					section_end_extension:
.25c3					section_start_floatingpoint:

;******  Processing file: floatingpoint/floatingpoint.asm

.25c3					floatingpointHandler:
.25c3	a2 03		ldx #$03			ldx 	#ErrorID_NoModule
.25c5	20 d2 22	jsr $22d2		jsr	errorHandler

;******  Return to file: basic.asm

.25c8					section_end_floatingpoint:
.25c8					section_start_interaction:

;******  Processing file: interaction/interaction.asm

.25c8					interactionHandler:
.25c8	7c cb 25	jmp ($25cb,x)			jmp 	(interactionVectors,x)
.25cb					interactionVectors:

;******  Return to file: basic.asm

.25cb					section_end_interaction:
.25cb					section_start_string:

;******  Processing file: string/string.asm


;******  Processing file: string/chr.asm

.25cb					StringChrs:
.25cb	aa		tax				tax 								; set up stack
.25cc	a9 02		lda #$02			lda 	#2
.25ce	20 85 26	jsr $2685			jsr 	AllocateSoftString
.25d1	98		tya				tya
.25d2	20 ab 26	jsr $26ab			jsr 	WriteSoftString
.25d5	20 da 25	jsr $25da			jsr 	ReturnSoftString
.25d8	8a		txa				txa
.25d9	60		rts				rts
.25da					ReturnSoftString:
.25da	a5 7a		lda $7a				lda 	softMemAlloc
.25dc	95 48		sta $48,x			sta 	esInt0,x
.25de	a5 7b		lda $7b				lda 	softMemAlloc+1
.25e0	95 50		sta $50,x			sta 	esInt1,x
.25e2	a9 00		lda #$00			lda 	#0
.25e4	95 58		sta $58,x			sta 	esInt2,x
.25e6	95 60		sta $60,x			sta 	esInt3,x
.25e8	a9 40		lda #$40			lda 	#$40
.25ea	95 40		sta $40,x			sta 	esType,x
.25ec	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/compare.asm

.25ed					STRCompare:
.25ed	48		pha				pha 								; save A
.25ee	aa		tax				tax 								; put stack pos in X
.25ef	98		tya				tya
.25f0	48		pha				pha
.25f1	20 25 26	jsr $2625			jsr 	CopyStringPair
.25f4	a0 00		ldy #$00			ldy 	#0 							; get the smaller of the two string sizes.
.25f6	b1 04		lda ($04),y			lda 	(temp0),y
.25f8	d1 06		cmp ($06),y			cmp 	(temp1),y
.25fa	90 02		bcc $25fe			bcc 	_SCNotSmaller
.25fc	b1 06		lda ($06),y			lda 	(temp1),y
.25fe					_SCNotSmaller:
.25fe	aa		tax				tax 								; put that in X. We compare this many chars first.
.25ff					_SCCompareLoop:
.25ff	e0 00		cpx #$00			cpx 	#0 							; if compared all the smaller, then it is the shorter
.2601	f0 0c		beq $260f			beq 	_SCSameToEndShortest 		; one that is the smallest if they are different lengths.
.2603	ca		dex				dex 								; decrement chars to compare.
.2604	c8		iny				iny 								; move to next character
.2605	38		sec				sec 								; calculate s1[y]-s2[y]
.2606	b1 04		lda ($04),y			lda 	(temp0),y
.2608	f1 06		sbc ($06),y			sbc 	(temp1),y
.260a	d0 0a		bne $2616			bne 	_SCReturnResult 			; if different return sign of A
.260c	4c ff 25	jmp $25ff			jmp 	_SCCompareLoop
.260f					_SCSameToEndShortest
.260f	a0 00		ldy #$00			ldy 	#0 							; compare len(s1) - len(s2)
.2611	38		sec				sec
.2612	b1 04		lda ($04),y			lda 	(temp0),y
.2614	f1 06		sbc ($06),y			sbc 	(temp1),y
.2616					_SCReturnResult:
.2616	08		php				php 								; set return to zero preserving PSW.
.2617	a2 00		ldx #$00			ldx 	#0
.2619	28		plp				plp
.261a	f0 05		beq $2621			beq 	_SCExit 					; two values equal, then exit
.261c	ca		dex				dex 								; X = $FF
.261d	90 02		bcc $2621			bcc 	_SCExit 					; if 1st < 2nd then -1
.261f	a2 01		ldx #$01			ldx 	#1 							; X = $01 if greater
.2621					_SCExit:
.2621	68		pla				pla
.2622	a8		tay				tay
.2623	68		pla				pla
.2624	60		rts				rts
.2625					CopyStringPair:
.2625	b5 49		lda $49,x			lda 	esInt0+1,x
.2627	85 06		sta $06				sta 	temp1
.2629	b5 51		lda $51,x			lda 	esInt1+1,x
.262b	85 07		sta $07				sta 	temp1+1
.262d					CopyStringTop:
.262d	b5 48		lda $48,x			lda 	esInt0,x
.262f	85 04		sta $04				sta 	temp0
.2631	b5 50		lda $50,x			lda 	esInt1,x
.2633	85 05		sta $05				sta 	temp0+1
.2635	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/concat.asm

.2636					StringConcat:
.2636	aa		tax				tax									; stack pos in X
.2637	98		tya				tya
.2638	48		pha				pha
.2639	20 25 26	jsr $2625			jsr 	CopyStringPair 				; temp0 and temp1 point to strings to concat.
.263c	38		sec				sec 								; calculate alloc strings. lengths added + 1 for size.
.263d	a0 00		ldy #$00			ldy 	#0
.263f	b1 04		lda ($04),y			lda 	(temp0),y
.2641	71 06		adc ($06),y			adc 	(temp1),y
.2643	b0 1c		bcs $2661			bcs 	_SCError 					; just too many characters here.
.2645	c9 fc		cmp #$fc			cmp 	#MaxStringSize
.2647	b0 18		bcs $2661			bcs 	_SCError
.2649	20 85 26	jsr $2685			jsr 	AllocateSoftString 			; allocate soft string memory, set pointer.
.264c	20 7c 26	jsr $267c			jsr 	CopySoftToStack 			; copy that to the stack.
.264f	20 66 26	jsr $2666			jsr 	SCCopyTemp0 				; copy temp0
.2652	a5 06		lda $06				lda 	temp1 						; copy temp1 to temp0
.2654	85 04		sta $04				sta 	temp0
.2656	a5 07		lda $07				lda 	temp1+1
.2658	85 05		sta $05				sta 	temp0+1
.265a	20 66 26	jsr $2666			jsr 	SCCopyTemp0 				; copy temp0 e.g. what was temp1.
.265d	68		pla				pla
.265e	a8		tay				tay
.265f	8a		txa				txa 								; and A
.2660	60		rts				rts
.2661					_SCError:
.2661	a2 0d		ldx #$0d			ldx 	#ErrorID_StrLen
.2663	20 d2 22	jsr $22d2		jsr	errorHandler
.2666					SCCopyTemp0:
.2666	a0 00		ldy #$00			ldy 	#0 							; put count in temp2
.2668	b1 04		lda ($04),y			lda 	(temp0),y
.266a	85 08		sta $08				sta 	temp2
.266c					_SCCopyLoop:
.266c	a5 08		lda $08				lda 	temp2 						; done the lot
.266e	f0 0b		beq $267b			beq 	_SCCopyExit
.2670	c6 08		dec $08				dec 	temp2
.2672	c8		iny				iny 								; get next char
.2673	b1 04		lda ($04),y			lda 	(temp0),y
.2675	20 ab 26	jsr $26ab			jsr 	WriteSoftString 			; write to soft string.
.2678	4c 6c 26	jmp $266c			jmp 	_SCCopyLoop
.267b					_SCCopyExit:
.267b	60		rts				rts
.267c					CopySoftToStack:
.267c	a5 7a		lda $7a				lda 	SoftMemAlloc 				; copy the memory allocation pointer to the stack.
.267e	95 48		sta $48,x			sta 	esInt0,x 					; type is already string.
.2680	a5 7b		lda $7b				lda 	SoftMemAlloc+1
.2682	95 50		sta $50,x			sta 	esInt1,x
.2684	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/memory.asm

.007a					softMemAlloc:
>007a							.fill 	2  							; if MSB is zero needs resetting on allocation.
.2685					AllocateSoftString:
.2685	85 0c		sta $0c				sta 	tempShort 					; save count
.2687	98		tya				tya
.2688	48		pha				pha
.2689	a5 7b		lda $7b				lda 	softMemAlloc+1 				; if the high byte is zero, it needs allocating.
.268b	d0 09		bne $2696			bne 	_ASSDone
.268d	a5 0d		lda $0d				lda 	highMemory 					; reset the soft memory alloc pointer.
.268f	85 7a		sta $7a				sta 	softMemAlloc 				; to speed up slightly, we only reset this when we first need it
.2691	a4 0e		ldy $0e				ldy 	highMemory+1 				; but it needs to be reset before each command.
.2693	88		dey				dey
.2694	84 7b		sty $7b				sty 	softMemAlloc+1
.2696					_ASSDone:
.2696	38		sec				sec 								; allocate downwards enough memory
.2697	a5 7a		lda $7a				lda 	softMemAlloc
.2699	e5 0c		sbc $0c				sbc 	tempShort
.269b	85 7a		sta $7a				sta 	softMemAlloc
.269d	a5 7b		lda $7b				lda 	softMemAlloc+1
.269f	e9 00		sbc #$00			sbc 	#0
.26a1	85 7b		sta $7b				sta 	softMemAlloc+1
.26a3	a9 00		lda #$00			lda 	#0 							; empty that string, set the length = 0.
.26a5	a8		tay				tay
.26a6	91 7a		sta ($7a),y			sta 	(softMemAlloc),y
.26a8	68		pla				pla
.26a9	a8		tay				tay
.26aa	60		rts				rts
.26ab					WriteSoftString:
.26ab	84 0c		sty $0c				sty 	tempShort 					; save Y
.26ad	48		pha				pha
.26ae	a0 00		ldy #$00			ldy 	#0 							; get and bump length
.26b0	b1 7a		lda ($7a),y			lda 	(softMemAlloc),y
.26b2	18		clc				clc
.26b3	69 01		adc #$01			adc 	#1
.26b5	91 7a		sta ($7a),y			sta 	(softMemAlloc),y
.26b7	a8		tay				tay 								; pointer in Y
.26b8	68		pla				pla 								; get char and write.
.26b9	91 7a		sta ($7a),y			sta 	(softMemAlloc),y
.26bb	a4 0c		ldy $0c				ldy 	tempShort 					; restore Y and exit.
.26bd	60		rts				rts
.26be					StrClone:
.26be	aa		tax				tax 								; set up stack.
.26bf	98		tya				tya
.26c0	48		pha				pha
.26c1	a0 00		ldy #$00			ldy 	#0 							; get length, add 1 for length
.26c3	b1 04		lda ($04),y			lda 	(temp0),y
.26c5	18		clc				clc
.26c6	69 01		adc #$01			adc 	#1
.26c8	20 85 26	jsr $2685			jsr 	AllocateSoftString 			; allocate soft memory
.26cb	a5 7a		lda $7a				lda 	softMemAlloc 				; copy that address to TOS
.26cd	95 48		sta $48,x			sta 	esInt0,x
.26cf	a5 7b		lda $7b				lda 	softMemAlloc+1
.26d1	95 50		sta $50,x			sta 	esInt1,x
.26d3	a9 00		lda #$00			lda 	#0
.26d5	95 58		sta $58,x			sta 	esInt2,x
.26d7	95 60		sta $60,x			sta 	esInt3,x
.26d9	a9 40		lda #$40			lda 	#$40 						; set type to string.
.26db	95 40		sta $40,x			sta 	esType,x
.26dd	20 66 26	jsr $2666			jsr 	SCCopyTemp0 				; copy temp0 string to soft memory copy (concat.asm)
.26e0	68		pla				pla
.26e1	a8		tay				tay
.26e2	8a		txa				txa
.26e3	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/setcase.asm

.26e4					CaseString:
.26e4	48		pha				pha 								; save A and copy to X
.26e5	aa		tax				tax
.26e6	98		tya				tya
.26e7	48		pha				pha
.26e8	20 3c 11	jsr $113c			jsr 	TOSToTemp0 					; target string -> temp0
.26eb	a0 00		ldy #$00			ldy 	#0
.26ed	b1 04		lda ($04),y			lda 	(temp0),y  					; get length,
.26ef	18		clc				clc
.26f0	69 01		adc #$01			adc 	#1 							; one more for length byte
.26f2	20 85 26	jsr $2685			jsr 	AllocateSoftString 			; allocate soft string memory, set pointer.
.26f5	20 7c 26	jsr $267c			jsr 	CopySoftToStack 			; copy that to the stack.
.26f8	a0 00		ldy #$00			ldy 	#0
.26fa	b1 04		lda ($04),y			lda 	(temp0),y 					; count to copy in X
.26fc	aa		tax				tax
.26fd					_CSCopy:
.26fd	e0 00		cpx #$00			cpx 	#0
.26ff	f0 24		beq $2725			beq 	_CSExit
.2701	ca		dex				dex
.2702	c8		iny				iny
.2703	68		pla				pla 								; check direction
.2704	48		pha				pha
.2705	f0 0c		beq $2713			beq 	_CSUpper
.2707	b1 04		lda ($04),y			lda 	(temp0),y 					; lower$() code
.2709	c9 41		cmp #$41			cmp 	#"A"
.270b	90 12		bcc $271f			bcc 	_CSWrite
.270d	c9 5b		cmp #$5b			cmp 	#"Z"+1
.270f	b0 0e		bcs $271f			bcs 	_CSWrite
.2711	90 0a		bcc $271d			bcc 	_CSFlipWrite
.2713					_CSUpper:
.2713	b1 04		lda ($04),y			lda 	(temp0),y 					; upper$() code
.2715	c9 61		cmp #$61			cmp 	#"a"
.2717	90 06		bcc $271f			bcc 	_CSWrite
.2719	c9 7b		cmp #$7b			cmp 	#"z"+1
.271b	b0 02		bcs $271f			bcs 	_CSWrite
.271d					_CSFlipWrite:
.271d	49 20		eor #$20			eor 	#"A"^"a"
.271f					_CSWrite:
.271f	20 ab 26	jsr $26ab			jsr 	WriteSoftString
.2722	4c fd 26	jmp $26fd			jmp 	_CSCopy
.2725					_CSExit:
.2725	68		pla				pla
.2726	a8		tay				tay
.2727	68		pla				pla
.2728	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/substring.asm

.2729					StringSubstring:
.2729	48		pha				pha
.272a	aa		tax				tax 								; access stack.
.272b	98		tya				tya
.272c	48		pha				pha
.272d	20 2d 26	jsr $262d			jsr 	CopyStringTop 				; point temp0 to the string.
.2730	a0 00		ldy #$00			ldy 	#0 							; get length.
.2732	b1 04		lda ($04),y			lda 	(temp0),Y
.2734	85 06		sta $06				sta 	temp1
.2736	b5 49		lda $49,x			lda 	esInt0+1,x 					; get the initial offset
.2738	c5 06		cmp $06				cmp 	temp1 						;
.273a	f0 02		beq $273e			beq 	_SSBOkay
.273c	b0 2a		bcs $2768			bcs 	_SSBReturnNull
.273e					_SSBOkay:
.273e	a5 06		lda $06				lda 	temp1 						; get the total length +1
.2740	18		clc				clc
.2741	69 01		adc #$01			adc 	#1
.2743	38		sec				sec
.2744	f5 49		sbc $49,x			sbc 	esInt0+1,x 					; the anything >= this is bad.
.2746	d5 4a		cmp $4a,x			cmp 	esInt0+2,x  				; check bad >= required
.2748	90 02		bcc $274c			bcc		_SSBTrunc
.274a	b5 4a		lda $4a,x			lda 	esInt0+2,x
.274c					_SSBTrunc:
.274c	85 07		sta $07				sta 	temp1+1 					; characters to copy.
.274e	18		clc				clc
.274f	69 01		adc #$01			adc 	#1 							; add 1
.2751	20 85 26	jsr $2685			jsr 	AllocateSoftString 			; allocate soft string memory, set pointer.
.2754	20 7c 26	jsr $267c			jsr 	CopySoftToStack 			; copy that to the stack.
.2757	b4 49		ldy $49,x			ldy 	esInt0+1,x 					; get initial position of char to copy
.2759					_SSBCopyLoop:
.2759	a5 07		lda $07				lda 	temp1+1 					; done them all
.275b	f0 0e		beq $276b			beq 	_SSBExit
.275d	c6 07		dec $07				dec 	temp1+1
.275f	b1 04		lda ($04),y			lda 	(temp0),y 					; get and write character
.2761	20 ab 26	jsr $26ab			jsr 	WriteSoftString
.2764	c8		iny				iny
.2765	4c 59 27	jmp $2759			jmp 	_SSBCopyLoop
.2768					_SSBReturnNull:
.2768	20 6f 27	jsr $276f			jsr 	ReturnNull
.276b					_SSBExit:
.276b	68		pla				pla
.276c	a8		tay				tay
.276d	68		pla				pla
.276e	60		rts				rts
.276f					ReturnNull:
.276f	a9 00		lda #$00			lda 	#0 							; clear null string
.2771	8d cc 0a	sta $0acc			sta 	NullString
.2774	a9 cc		lda #$cc			lda 	#NullString & $FF 			; set a pointer to it
.2776	95 48		sta $48,x			sta 	esInt0,x
.2778	a9 0a		lda #$0a			lda 	#NullString >> 8
.277a	95 50		sta $50,x			sta 	esInt1,x
.277c	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/write.asm

.0aff					srcStrLen:
>0aff							.fill 	1
.277d					StringWrite:
.277d	aa		tax				tax
.277e	48		pha				pha
.277f	98		tya				tya
.2780	48		pha				pha
.2781	20 a8 27	jsr $27a8			jsr 	CheckOverwriteCurrent
.2784	b0 0d		bcs $2793			bcs		_SWCopyCurrent
.2786	20 e6 27	jsr $27e6			jsr 	RequiresConcretion
.2789	90 0e		bcc $2799			bcc 	_SWWriteReference
.278b	20 49 28	jsr $2849			jsr 	CheckSpecialConcretion
.278e	b0 09		bcs $2799			bcs 	_SWWriteReference
.2790	20 fa 27	jsr $27fa			jsr 	AllocateHardMemory
.2793					_SWCopyCurrent:
.2793	20 2d 28	jsr $282d			jsr 	CopyStringToHardMemory
.2796	4c a4 27	jmp $27a4			jmp 	_SWExit
.2799					_SWWriteReference
.2799	a0 00		ldy #$00			ldy 	#0
.279b	a5 04		lda $04				lda 	temp0
.279d	91 06		sta ($06),y			sta 	(temp1),y
.279f	c8		iny				iny
.27a0	a5 05		lda $05				lda 	temp0+1
.27a2	91 06		sta ($06),y			sta 	(temp1),y
.27a4					_SWExit:
.27a4	68		pla				pla
.27a5	a8		tay				tay
.27a6	68		pla				pla
.27a7	60		rts				rts
.27a8					CheckOverwriteCurrent:
.27a8	a0 00		ldy #$00			ldy 	#0 						; get address of string being written to temp0
.27aa	b5 51		lda $51,x			lda 	esInt1+1,x
.27ac	85 05		sta $05				sta 	temp0+1
.27ae	b5 49		lda $49,x			lda 	esInt0+1,x
.27b0	85 04		sta $04				sta 	temp0
.27b2	b1 04		lda ($04),y			lda 	(temp0),y 				; get length of string being copied.
.27b4	8d ff 0a	sta $0aff			sta 	srcStrLen
.27b7	b5 48		lda $48,x			lda 	esInt0,x 				; copy where the final address it being written to temp1.
.27b9	85 06		sta $06				sta 	temp1 					; e.g. if it is ax$ then temp1 will point to the ax$
.27bb	b5 50		lda $50,x			lda 	esInt1,x 				; data record + 5
.27bd	85 07		sta $07				sta 	temp1+1
.27bf	a0 01		ldy #$01			ldy 	#1 						; get the MSB of the address of string currently stored there.
.27c1	b1 06		lda ($06),y			lda 	(temp1),y
.27c3	c5 0e		cmp $0e				cmp 	highMemory+1 			; if < high memory then it cannot be something stored
.27c5	90 1b		bcc $27e2			bcc 	_COCFail 				; in hard memory.
.27c7	a0 00		ldy #$00			ldy 	#0 						; copy target address - 1 into temp2
.27c9	b1 06		lda ($06),y			lda 	(temp1),y
.27cb	e9 01		sbc #$01			sbc 	#1
.27cd	85 08		sta $08				sta 	temp2
.27cf	c8		iny				iny
.27d0	b1 06		lda ($06),y			lda 	(temp1),y
.27d2	e9 00		sbc #$00			sbc 	#0
.27d4	85 09		sta $09				sta 	temp2+1
.27d6	a0 00		ldy #$00			ldy 	#0 						; how large is this physical chunk.
.27d8	b1 08		lda ($08),y			lda 	(temp2),y
.27da	38		sec				sec  							; maximum character capacity.
.27db	e9 02		sbc #$02			sbc 	#2
.27dd	cd ff 0a	cmp $0aff			cmp 	srcStrLen 				; if >= the required length
.27e0	b0 02		bcs $27e4			bcs 	_COCCanReuse
.27e2					_COCFail:
.27e2	18		clc				clc
.27e3	60		rts				rts
.27e4					_COCCanReuse:
.27e4	38		sec				sec
.27e5	60		rts				rts
.27e6					RequiresConcretion:
.27e6	a5 05		lda $05				lda 	temp0+1 				; get MSB of address of string to be written
.27e8	c5 0e		cmp $0e				cmp 	highMemory+1 			; if >= high memory it is concreted
.27ea	b0 0a		bcs $27f6			bcs 	_RCSucceed 				; so it needs concreting again - duplication.
.27ec	a5 7b		lda $7b				lda 	softMemAlloc+1 			; have we allocated any soft memory yet ?
.27ee	f0 08		beq $27f8			beq 	_RCFail 				; if not, this cannot be soft memory.
.27f0	a5 05		lda $05				lda 	temp0+1 				; get MSB of address of string to be written
.27f2	c5 7b		cmp $7b				cmp 	softMemAlloc+1 			; if >= soft mem alloc it is either soft
.27f4	90 02		bcc $27f8			bcc 	_RCFail 				; so concreting
.27f6					_RCSucceed:
.27f6	38		sec				sec
.27f7	60		rts				rts
.27f8					_RCFail:
.27f8	18		clc				clc
.27f9	60		rts				rts
.27fa					AllocateHardMemory:
.27fa	98		tya				tya
.27fb	48		pha				pha
.27fc	ad ff 0a	lda $0aff			lda 	srcStrLen 				; characters in string
.27ff	69 0a		adc #$0a			adc 	#1+1+8 					; one for hard memory size, one for string size, extra for expansion
.2801	b0 04		bcs $2807			bcs 	_AHMSetMax 				; max out that amount.
.2803	c9 fe		cmp #$fe			cmp 	#MaxStringSize+2
.2805	90 02		bcc $2809			bcc 	_AHMIsOkay
.2807					_AHMSetMax:
.2807	a9 fe		lda #$fe			lda 	#MaxStringSize+2
.2809					_AHMIsOkay:
.2809	48		pha				pha
.280a	49 ff		eor #$ff			eor 	#$FF 					; complement and add to high Memory
.280c	38		sec				sec  							; and copy result to TOS as target address.
.280d	65 0d		adc $0d				adc 	highMemory
.280f	85 0d		sta $0d				sta 	highMemory
.2811	a5 0e		lda $0e				lda 	highMemory+1
.2813	69 ff		adc #$ff			adc 	#$FF
.2815	85 0e		sta $0e				sta 	highMemory+1
.2817	a0 00		ldy #$00			ldy 	#0 						; Y = 0
.2819	68		pla				pla 							; get the total size of the storage block
.281a	91 0d		sta ($0d),y			sta 	(highMemory),y
.281c	18		clc				clc
.281d	a5 0d		lda $0d				lda		highMemory 				; point the target address to the byte after this.
.281f	69 01		adc #$01			adc 	#1
.2821	91 06		sta ($06),y			sta 	(temp1),y
.2823	a5 0e		lda $0e				lda 	highMemory+1
.2825	69 00		adc #$00			adc 	#0
.2827	c8		iny				iny
.2828	91 06		sta ($06),y			sta 	(temp1),y
.282a	68		pla				pla
.282b	a8		tay				tay
.282c	60		rts				rts
.282d					CopyStringToHardMemory:
.282d	98		tya				tya
.282e	48		pha				pha
.282f	a0 00		ldy #$00			ldy 	#0 						; copy target address to temp2
.2831	b1 06		lda ($06),y			lda 	(temp1),y
.2833	85 08		sta $08				sta 	temp2
.2835	c8		iny				iny
.2836	b1 06		lda ($06),y			lda 	(temp1),y
.2838	85 09		sta $09				sta 	temp2+1
.283a	ac ff 0a	ldy $0aff			ldy 	srcStrLen 				; copy this + 1 characters, (length too) hence $FF compare
.283d					_CSTHMLoop:
.283d	b1 04		lda ($04),y			lda 	(temp0),y
.283f	91 08		sta ($08),y			sta 	(temp2),y
.2841	88		dey				dey
.2842	c0 ff		cpy #$ff			cpy 	#$FF
.2844	d0 f7		bne $283d			bne 	_CSTHMLoop
.2846	68		pla				pla
.2847	a8		tay				tay
.2848	60		rts				rts
.2849					CheckSpecialConcretion:
.2849	ad ff 0a	lda $0aff			lda 	srcStrLen 				; check string is null.
.284c	f0 02		beq $2850			beq 	_CSCNullString
.284e	18		clc				clc
.284f	60		rts				rts
.2850					_CSCNullString:
.2850	a9 00		lda #$00			lda 	#0
.2852	8d cc 0a	sta $0acc			sta 	NullString
.2855	a9 cc		lda #$cc			lda 	#(NullString) & $FF
.2857	85 04		sta $04				sta 	temp0
.2859	a9 0a		lda #$0a			lda 	#(NullString) >> 8
.285b	85 05		sta $05				sta 	1+(temp0)
.285d	38		sec				sec
.285e	60		rts				rts

;******  Return to file: string/string.asm

.285f					stringHandler:
.285f	7c 62 28	jmp ($2862,x)			jmp 	(stringVectors,x)
.2862					stringVectors:
>2862	cb 25					.word StringChrs           ; index 0
>2864	be 26					.word StrClone             ; index 2
>2866	36 26					.word StringConcat         ; index 4
>2868	ed 25					.word STRCompare           ; index 6
>286a	e4 26					.word CaseString           ; index 8
>286c	29 27					.word StringSubstring      ; index 10
>286e	7d 27					.word StringWrite          ; index 12

;******  Return to file: basic.asm

.2870					section_end_string:
.2870					section_start_tokeniser:

;******  Processing file: tokeniser/tokeniser.asm

.2870					tokeniserHandler:
.2870	7c 73 28	jmp ($2873,x)			jmp 	(tokeniserVectors,x)
.2873					tokeniserVectors:

;******  Return to file: basic.asm

.2873					section_end_tokeniser:
.2873					section_start_variable:

;******  Processing file: variable/variable.asm


;******  Processing file: variable/access.asm

.0b00					varHash:
>0b00							.fill	1
.0b01					varType:
>0b01							.fill 	1
.0b02					varEnd:
>0b02							.fill 	1
.007c					hashList:
>007c							.fill 	2
.2873					AccessVariable:
.2873	aa		tax				tax 								; stack in X
.2874	c8		iny				iny
.2875	b1 02		lda ($02),y			lda 	(codePtr),y
.2877	88		dey				dey
.2878	c9 3a		cmp #$3a			cmp 	#TYPE_INT 					; is it one of the end markers ?
.287a	d0 15		bne $2891			bne 	_AVLong
.287c	b1 02		lda ($02),y			lda 	(codePtr),y 				; this is the 6 bit ASCII of A-Z 1-26
.287e	38		sec				sec 	 							; make it 0-25
.287f	e9 01		sbc #$01			sbc 	#1
.2881	0a		asl a				asl 	a 							; x 4 is LSB of address
.2882	0a		asl a				asl 	a
.2883	95 48		sta $48,x			sta 	esInt0,x
.2885	a9 0a		lda #$0a			lda 	#SingleLetterVar >> 8 		; make it an address
.2887	95 50		sta $50,x			sta 	esInt1,x
.2889	a9 80		lda #$80			lda 	#$80 						; type is integer reference.
.288b	95 40		sta $40,x			sta 	esType,x
.288d	c8		iny				iny 								; skip over the variable reference in the code.
.288e	c8		iny				iny
.288f	8a		txa				txa 								; stack in A to return.
.2890	60		rts				rts
.2891					_AVLong:
.2891	8a		txa				txa
.2892	48		pha				pha
.2893	20 da 28	jsr $28da			jsr 	AccessSetup 				; set up the basic stuff.
.2896	20 ce 2a	jsr $2ace			jsr 	FindVariable 				; does the variable exist already
.2899	b0 0e		bcs $28a9			bcs 	_AVFound
.289b	ad 01 0b	lda $0b01			lda 	varType 					; is the variable type an array
.289e	4a		lsr a				lsr 	a
.289f	90 05		bcc $28a6			bcc 	_AVCanCreate
.28a1	a2 15		ldx #$15			ldx 	#ErrorID_noauto
.28a3	20 d2 22	jsr $22d2		jsr	errorHandler
.28a6					_AVCanCreate:
.28a6	20 8d 29	jsr $298d			jsr 	CreateVariable 				; no, create it.
.28a9					_AVFound:
.28a9	68		pla				pla
.28aa	aa		tax				tax
.28ab	18		clc				clc 								; copy temp0 (variable record address)
.28ac	a5 04		lda $04				lda 	temp0 						; +5 (to point to the data)
.28ae	69 05		adc #$05			adc 	#5
.28b0	95 48		sta $48,x			sta 	esInt0,x
.28b2	a5 05		lda $05				lda 	temp0+1
.28b4	69 00		adc #$00			adc 	#0
.28b6	95 50		sta $50,x			sta 	esInt1,x
.28b8	a9 00		lda #$00			lda 	#0
.28ba	95 58		sta $58,x			sta 	esInt2,x
.28bc	95 60		sta $60,x			sta 	esInt3,x
.28be	ac 01 0b	ldy $0b01			ldy 	varType 					; get the type ID from the type.
.28c1	b9 9a 28	lda $289a,y			lda 	_AVTypeTable-$3A,y
.28c4	95 40		sta $40,x			sta 	esType,x
.28c6	ac 02 0b	ldy $0b02			ldy 	varEnd 						; restore Y
.28c9	ad 01 0b	lda $0b01			lda 	VarType 					; get variable type, put LSB into C
.28cc	4a		lsr a				lsr 	a
.28cd	90 03		bcc $28d2			bcc 	_AVNotArray
.28cf	20 17 29	jsr $2917			jsr 	AccessArray 				; array lookup. if LSB was set.
.28d2					_AVNotArray:
.28d2	8a		txa				txa 								; return stack in A and return
.28d3	60		rts				rts
.28d4					_AVTypeTable:
>28d4	80 80						.byte 	$80,$80						; integer
>28d6	c0 c0						.byte 	$C0,$C0 					; string
>28d8	81 81						.byte 	$81,$81 					; float
.28da					AccessSetup:
.28da	a9 00		lda #$00			lda 	#0 							; zero the hash byte.
.28dc	8d 00 0b	sta $0b00			sta 	varHash
.28df	98		tya				tya
.28e0	48		pha				pha
.28e1	b1 02		lda ($02),y	_ASLoop:lda 	(codePtr),y					; get next identifier character
.28e3	c9 3a		cmp #$3a			cmp 	#$3A 						; is it 3A-3F which end all identifiers ?
.28e5	b0 0b		bcs $28f2			bcs 	_ASComplete
.28e7	18		clc				clc 								; add to the hash. Might improve this.
.28e8	6d 00 0b	adc $0b00			adc 	varHash
.28eb	8d 00 0b	sta $0b00			sta 	varHash
.28ee	c8		iny				iny 								; next character
.28ef	4c e1 28	jmp $28e1			jmp 	_ASLoop
.28f2					_ASComplete:
.28f2	8d 01 0b	sta $0b01			sta 	varType 					; save variable type byte
.28f5	c8		iny				iny
.28f6	8c 02 0b	sty $0b02			sty 	varEnd 						; save the ending position.
.28f9	38		sec				sec 								; convert type byte from $3A-$3F to 0..5
.28fa	e9 3a		sbc #$3a			sbc 	#$3A
.28fc	0a		asl a				asl 	a 							; multiply by hashTableSize (8 in this case)
.28fd	0a		asl a				asl 	a
.28fe	0a		asl a				asl 	a
.28ff	0a		asl a				asl 	a 							; 2 bytes/word
.2900	85 04		sta $04				sta 	temp0 						; this is the offset to the start of the table.
.2902	ad 00 0b	lda $0b00			lda 	varHash 					; get hash
.2905	29 07		and #$07			and 	#(hashTableSize-1)			; force into range
.2907	0a		asl a				asl  	a 							; x 2 (for word) and CC
.2908	65 04		adc $04				adc 	temp0 						; now offset from the start of the hash table.
.290a	69 68		adc #$68			adc 	#hashTables & $FF 			; add to hash table base address
.290c	85 7c		sta $7c				sta 	hashList
.290e	a9 0a		lda #$0a			lda 	#hashTables >> 8
.2910	69 00		adc #$00			adc 	#0
.2912	85 7d		sta $7d				sta 	hashList+1
.2914	68		pla				pla
.2915	a8		tay				tay
.2916	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/accessarray.asm

.2917					AccessArray:
.2917	e8		inx				inx
.2918	8a		txa				txa
.2919	a2 04		ldx #$04		ldx	#4
.291b	20 22 22	jsr $2222		jsr	mainHandler
.291e	aa		tax				tax
.291f	ca		dex				dex
.2920	a2 00		ldx #$00		ldx	#0
.2922	20 22 22	jsr $2222		jsr	mainHandler
.2925	b5 61		lda $61,x			lda 	esInt3+1,x 					; check index value
.2927	15 59		ora $59,x			ora 	esInt2+1,x
.2929	d0 33		bne $295e			bne 	_AABadIndex
.292b	98		tya				tya
.292c	48		pha				pha
.292d	b5 48		lda $48,x			lda 	esInt0,x 					; put array info ptr in temp0 - this points to the
.292f	85 04		sta $04				sta 	temp0 						; address (+0) max (+2) and size (+4)
.2931	b5 50		lda $50,x			lda 	esInt1,x
.2933	85 05		sta $05				sta 	temp0+1
.2935	a0 02		ldy #$02			ldy 	#2 							; check out of range, compare against max index.
.2937	b5 49		lda $49,x			lda 	esInt0+1,x
.2939	d1 04		cmp ($04),y			cmp 	(temp0),y
.293b	c8		iny				iny
.293c	b5 51		lda $51,x			lda 	esInt1+1,x
.293e	f1 04		sbc ($04),y			sbc 	(temp0),y
.2940	b0 1c		bcs $295e			bcs 	_AABadIndex 				; if >= then fail.
.2942	e8		inx				inx 								; point to index
.2943	a0 04		ldy #$04			ldy 	#4 							; get the size byte.
.2945	b1 04		lda ($04),y			lda 	(temp0),y
.2947	20 63 29	jsr $2963			jsr 	MultiplyTOSByA 				; specialist multiplier.
.294a	ca		dex				dex
.294b	a0 00		ldy #$00			ldy 	#0 							; add this to the array base as the new address
.294d	18		clc				clc
.294e	b5 49		lda $49,x			lda 	esInt0+1,x
.2950	71 04		adc ($04),y			adc 	(temp0),y
.2952	95 48		sta $48,x			sta 	esInt0,x
.2954	b5 51		lda $51,x			lda 	esInt1+1,x
.2956	c8		iny				iny
.2957	71 04		adc ($04),y			adc 	(temp0),y
.2959	95 50		sta $50,x			sta 	esInt1,x
.295b	68		pla				pla
.295c	a8		tay				tay
.295d	60		rts				rts
.295e					_AABadIndex:
.295e	a2 1b		ldx #$1b			ldx 	#ErrorID_ArrayIndex
.2960	20 d2 22	jsr $22d2		jsr	errorHandler
.2963					MultiplyTOSByA:
.2963	48		pha				pha
.2964	b5 48		lda $48,x			lda 	esInt0,x 					; copy index to temp1
.2966	85 06		sta $06				sta 	temp1
.2968	b5 50		lda $50,x			lda 	esInt1,x
.296a	85 07		sta $07				sta 	temp1+1
.296c	68		pla				pla
.296d	16 48		asl $48,x			asl 	esInt0,x 					; double it.
.296f	36 50		rol $50,x			rol 	esInt1,x
.2971	c9 02		cmp #$02			cmp 	#2 							; if x 2 then exit.
.2973	f0 17		beq $298c			beq 	_MTBAExit
.2975	c9 06		cmp #$06			cmp 	#6 							; if x 6 then add temp1 to index
.2977	d0 0f		bne $2988			bne 	_MTBANotFloat
.2979	48		pha				pha
.297a	18		clc				clc 								; so this will make it x 3
.297b	b5 48		lda $48,x			lda 	esInt0,x
.297d	65 06		adc $06				adc 	temp1
.297f	95 48		sta $48,x			sta 	esInt0,x
.2981	b5 50		lda $50,x			lda 	esInt1,x
.2983	65 07		adc $07				adc 	temp1+1
.2985	95 50		sta $50,x			sta 	esInt1,x
.2987	68		pla				pla
.2988					_MTBANotFloat:
.2988	16 48		asl $48,x			asl 	esInt0,x					; now it is x 4 or x 6
.298a	36 50		rol $50,x			rol 	esInt1,x
.298c					_MTBAExit:
.298c	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/create.asm

.298d					CreateVariable:
.298d	98		tya				tya 								; push Y on the stack twice.
.298e	48		pha				pha
.298f	48		pha				pha
.2990	ae 01 0b	ldx $0b01			ldx 	varType 					; get var type 0-5
.2993	bd 9e 29	lda $299e,x			lda		_CVSize-$3A,x 				; the bytes for this new variable.
.2996	48		pha				pha 								; save length
.2997	a5 0f		lda $0f				lda 	lowMemory 					; set low Memory ptr to temp0
.2999	85 04		sta $04				sta 	temp0 						; (address of the new variable)
.299b	a5 10		lda $10				lda 	lowMemory+1
.299d	85 05		sta $05				sta 	temp0+1
.299f	68		pla				pla 								; get length
.29a0	20 73 10	jsr $1073			jsr 	AdvanceLowMemoryByte 		; shift alloc memory forward by the length.
.29a3	ad 00 0b	lda $0b00			lda 	varHash 					; store hash at offset 4.
.29a6	a0 04		ldy #$04			ldy 	#4
.29a8	91 04		sta ($04),y			sta 	(temp0),y
.29aa	68		pla				pla 								; offset, work out where the variable name is.
.29ab	18		clc				clc
.29ac	65 02		adc $02				adc 	codePtr
.29ae	a0 02		ldy #$02			ldy 	#2 							; copy that into slots 2 + 3.
.29b0	91 04		sta ($04),y			sta 	(temp0),y
.29b2	a5 03		lda $03				lda 	codePtr+1
.29b4	69 00		adc #$00			adc 	#0
.29b6	c8		iny				iny
.29b7	91 04		sta ($04),y			sta 	(temp0),y
.29b9	a0 00		ldy #$00			ldy 	#0 							; copy current hash pointer in link
.29bb	b1 7c		lda ($7c),y			lda 	(hashList),y
.29bd	91 04		sta ($04),y			sta 	(temp0),y
.29bf	c8		iny				iny
.29c0	b1 7c		lda ($7c),y			lda 	(hashList),y
.29c2	91 04		sta ($04),y			sta 	(temp0),y
.29c4	a5 05		lda $05				lda 	temp0+1 					; set new link
.29c6	91 7c		sta ($7c),y			sta 	(hashList),y
.29c8	88		dey				dey
.29c9	a5 04		lda $04				lda 	temp0
.29cb	91 7c		sta ($7c),y			sta 	(hashList),y
.29cd	ad 01 0b	lda $0b01			lda 	varType 					; type in A
.29d0	a0 05		ldy #$05			ldy 	#5 							; offset in Y
.29d2	20 de 29	jsr $29de			jsr 	ZeroTemp0Y 					; zero (temp0),y with whatever type.
.29d5	68		pla				pla
.29d6	a8		tay				tay
.29d7	60		rts				rts
>29d8	09 0a				_CVSize:.byte 	VarHSize+VarISize,VarHSize+VarASize 					; <storage for integer>
>29da	07 0a						.byte 	VarHSize+VarSSize,VarHSize+VarASize 					; <storage for string>
>29dc	0b 0a						.byte 	VarHSize+VarFSize,VarHSize+VarASize 					; <storage for float>
.29de					ZeroTemp0Y:
.29de	4a		lsr a				lsr 	a 							; bit 0 in carry
.29df	0a		asl a				asl 	a
.29e0	b0 19		bcs $29fb			bcs 	_ZTExit 					; we don't initialise arrays.
.29e2	c9 3c		cmp #$3c			cmp 	#$3C 						; check string
.29e4	f0 16		beq $29fc			beq 	_ZTWriteNullString 			; write "" string
.29e6	c9 3e		cmp #$3e			cmp 	#$3E 						; check float
.29e8	f0 22		beq $2a0c			beq 	_ZTWriteFloat
.29ea	98		tya				tya
.29eb	48		pha				pha
.29ec	a9 00		lda #$00			lda 	#0
.29ee	91 04		sta ($04),y			sta 	(temp0),y
.29f0	c8		iny				iny
.29f1	91 04		sta ($04),y			sta 	(temp0),y
.29f3	c8		iny				iny
.29f4	91 04		sta ($04),y			sta 	(temp0),y
.29f6	c8		iny				iny
.29f7	91 04		sta ($04),y			sta 	(temp0),y
.29f9	68		pla				pla
.29fa	a8		tay				tay
.29fb					_ZTExit:
.29fb	60		rts				rts
.29fc					_ZTWriteNullString:
.29fc	a9 00		lda #$00			lda 	#0 							; put a reference to null string as the default value.
.29fe	8d cc 0a	sta $0acc			sta 	NullString
.2a01	a9 cc		lda #$cc			lda 	#NullString & $FF
.2a03	91 04		sta ($04),y			sta 	(temp0),y
.2a05	a9 0a		lda #$0a			lda 	#NullString >> 8
.2a07	c8		iny				iny
.2a08	91 04		sta ($04),y			sta 	(temp0),y
.2a0a	88		dey				dey
.2a0b	60		rts				rts
.2a0c					_ZTWriteFloat:
.2a0c	8a		txa				txa
.2a0d	48		pha				pha
.2a0e	a2 1e		ldx #$1e		ldx	#30
.2a10	20 c3 25	jsr $25c3		jsr	floatingpointHandler
.2a13	68		pla				pla
.2a14	aa		tax				tax
.2a15	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/createarray.asm

.2a16					CreateArray:
.2a16	20 da 28	jsr $28da			jsr 	AccessSetup 				; set up the basic stuff.
.2a19	ad 01 0b	lda $0b01			lda 	varType 					; is the variable type an array
.2a1c	4a		lsr a				lsr 	a
.2a1d	90 3f		bcc $2a5e			bcc 	_CANotArray 				; no, cause an error.
.2a1f	20 ce 2a	jsr $2ace			jsr 	FindVariable 				; does the variable exist already
.2a22	b0 35		bcs $2a59			bcs 	_CAFound 					; cannot redefine it.
.2a24	20 8d 29	jsr $298d			jsr 	CreateVariable 				; create the variable entry.
.2a27	ac 02 0b	ldy $0b02			ldy 	varEnd 						; point Y to the end of the variable entry.
.2a2a	a5 04		lda $04				lda 	temp0 						; push address of new variable entry on the stack
.2a2c	48		pha				pha
.2a2d	a5 05		lda $05				lda 	temp0+1
.2a2f	48		pha				pha
.2a30	ad 01 0b	lda $0b01			lda 	varType 					; push variable type on the stack.
.2a33	48		pha				pha
.2a34	a9 00		lda #$00			lda 	#0 							; work out the array dimension on TOS.
.2a36	a2 04		ldx #$04		ldx	#4
.2a38	20 22 22	jsr $2222		jsr	mainHandler
.2a3b	a2 00		ldx #$00		ldx	#0
.2a3d	20 22 22	jsr $2222		jsr	mainHandler
.2a40	68		pla				pla 		 						; restore type and position.
.2a41	8d 01 0b	sta $0b01			sta 	varType
.2a44	68		pla				pla
.2a45	85 05		sta $05				sta 	temp0+1
.2a47	68		pla				pla
.2a48	85 04		sta $04				sta 	temp0
.2a4a	a5 50		lda $50				lda 	esInt1 						; limit array max to 4096.
.2a4c	29 e0		and #$e0			and 	#$E0
.2a4e	05 58		ora $58				ora 	esInt2
.2a50	05 60		ora $60				ora 	esInt3
.2a52	f0 0f		beq $2a63			beq 	_CASizeOk
.2a54					_CASize:
.2a54	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.2a56	20 d2 22	jsr $22d2		jsr	errorHandler
.2a59					_CAFound:
.2a59	a2 19		ldx #$19			ldx 	#ErrorID_DupArray
.2a5b	20 d2 22	jsr $22d2		jsr	errorHandler
.2a5e					_CANotArray:
.2a5e	a2 1a		ldx #$1a			ldx 	#ErrorID_NotArray
.2a60	20 d2 22	jsr $22d2		jsr	errorHandler
.2a63					_CASizeOk:
.2a63	e6 48		inc $48				inc 	esInt0 						; bump it by one, as we index from 0
.2a65	d0 02		bne $2a69			bne 	_CANoCarry 					; e.g. DIM A(10) ... A(0) - A(10)
.2a67	e6 49		inc $49				inc 	esInt0+1
.2a69					_CANoCarry:
.2a69	98		tya				tya
.2a6a	48		pha				pha
.2a6b	a0 05		ldy #$05			ldy 	#5
.2a6d	a5 0f		lda $0f				lda 	lowMemory 					; copy low memory address in +5,+6
.2a6f	91 04		sta ($04),y			sta 	(temp0),y 					; this is where it will come from
.2a71	c8		iny				iny
.2a72	a5 10		lda $10				lda 	lowMemory+1
.2a74	91 04		sta ($04),y			sta 	(temp0),y
.2a76	c8		iny				iny
.2a77	a5 48		lda $48				lda 	esInt0 						; copy maximum index value to +7,+8
.2a79	91 04		sta ($04),y			sta 	(temp0),y
.2a7b	c8		iny				iny
.2a7c	a5 50		lda $50				lda 	esInt1
.2a7e	91 04		sta ($04),y			sta 	(temp0),y
.2a80	c8		iny				iny
.2a81	ae 01 0b	ldx $0b01			ldx 	varType 					; get the length per element
.2a84	bd 8c 2a	lda $2a8c,x			lda 	_CAActualSize-$3A-1,x
.2a87	91 04		sta ($04),y			sta 	(temp0),y
.2a89	aa		tax				tax 								; save size in X
.2a8a	a5 0f		lda $0f				lda 	lowMemory 					; set temp0 to low memory.
.2a8c	85 04		sta $04				sta 	temp0
.2a8e	a5 10		lda $10				lda 	lowMemory+1
.2a90	85 05		sta $05				sta 	temp0+1
.2a92	a9 00		lda #$00			lda 	#0 							; temp1 is the counter.
.2a94	85 06		sta $06				sta 	temp1
.2a96	85 07		sta $07				sta 	temp1+1
.2a98					_CAInitialiseArray:
.2a98	a0 00		ldy #$00			ldy 	#0 							; write a null record at temp0
.2a9a	ad 01 0b	lda $0b01			lda 	varType 					; base type of array in A.
.2a9d	29 fe		and #$fe			and 	#$FE
.2a9f	20 de 29	jsr $29de			jsr 	ZeroTemp0Y
.2aa2	8a		txa				txa 								; add X to temp0, also updating lowMemory
.2aa3	18		clc				clc
.2aa4	65 04		adc $04				adc 	temp0
.2aa6	85 04		sta $04				sta 	temp0
.2aa8	85 0f		sta $0f				sta 	lowMemory
.2aaa	a5 05		lda $05				lda 	temp0+1
.2aac	69 00		adc #$00			adc 	#0
.2aae	85 05		sta $05				sta 	temp0+1
.2ab0	85 10		sta $10				sta 	lowMemory+1
.2ab2	e6 06		inc $06				inc 	temp1 						; bump the counter.
.2ab4	d0 02		bne $2ab8			bne 	_CAIANoCarry
.2ab6	e6 07		inc $07				inc 	temp1+1
.2ab8					_CAIANoCarry:
.2ab8	a5 48		lda $48				lda 	esInt0 						; counter reached max index
.2aba	c5 06		cmp $06				cmp 	temp1
.2abc	d0 da		bne $2a98			bne 	_CAInitialiseArray
.2abe	a5 50		lda $50				lda 	esInt1
.2ac0	c5 07		cmp $07				cmp 	temp1+1
.2ac2	d0 d4		bne $2a98			bne 	_CAInitialiseArray
.2ac4	68		pla				pla
.2ac5	a8		tay				tay
.2ac6	60		rts				rts
.2ac7					_CAActualSize:
>2ac7	04 00						.byte 	VarISize,0
>2ac9	02 00						.byte 	VarSSize,0
>2acb	06 00						.byte 	VarFSize,0
>2acd	db						.byte 	$DB

;******  Return to file: variable/variable.asm


;******  Processing file: variable/find.asm

.2ace					FindVariable:
.2ace	98		tya				tya
.2acf	48		pha				pha
.2ad0	98		tya				tya 								; point temp2 to the actual name.
.2ad1	18		clc				clc
.2ad2	65 02		adc $02				adc 	codePtr
.2ad4	85 08		sta $08				sta 	temp2
.2ad6	a5 03		lda $03				lda 	codePtr+1
.2ad8	69 00		adc #$00			adc 	#0
.2ada	85 09		sta $09				sta 	temp2+1
.2adc	a0 00		ldy #$00			ldy 	#0
.2ade	a5 7c		lda $7c				lda 	hashList 					; copy hashlist to temp0
.2ae0	85 04		sta $04				sta 	temp0
.2ae2	a5 7d		lda $7d				lda 	hashList+1
.2ae4	85 05		sta $05				sta 	temp0+1
.2ae6	a0 01		ldy #$01	_FVNext:ldy 	#1 							; get MSB
.2ae8	b1 04		lda ($04),y			lda 	(temp0),y
.2aea	f0 2c		beq $2b18			beq 	_FVFail
.2aec	aa		tax				tax
.2aed	88		dey				dey		 							; get LSB
.2aee	b1 04		lda ($04),y			lda 	(temp0),y
.2af0	85 04		sta $04				sta 	temp0 						; update pointer.
.2af2	86 05		stx $05				stx 	temp0+1
.2af4	a0 04		ldy #$04			ldy 	#4 							; check hashes match
.2af6	b1 04		lda ($04),y			lda 	(temp0),y
.2af8	cd 00 0b	cmp $0b00			cmp 	varHash
.2afb	d0 e9		bne $2ae6			bne 	_FVNext 					; if not, no point in checking the name.
.2afd	88		dey				dey 								; copy name pointer to temp1.
.2afe	b1 04		lda ($04),y			lda 	(temp0),y
.2b00	85 07		sta $07				sta 	temp1+1
.2b02	88		dey				dey
.2b03	b1 04		lda ($04),y			lda 	(temp0),y
.2b05	85 06		sta $06				sta 	temp1
.2b07	a0 00		ldy #$00			ldy 	#0
.2b09					_FVCheck:
.2b09	b1 06		lda ($06),y			lda 	(temp1),y 					; compare names
.2b0b	d1 08		cmp ($08),y			cmp 	(temp2),y
.2b0d	d0 d7		bne $2ae6			bne 	_FVNext		 				; fail if different.
.2b0f	c8		iny				iny
.2b10	c9 3a		cmp #$3a			cmp 	#$3A 						; until reached the end marker.
.2b12	90 f5		bcc $2b09			bcc 	_FVCheck
.2b14	68		pla				pla
.2b15	a8		tay				tay
.2b16	38		sec				sec
.2b17	60		rts				rts
.2b18					_FVFail:
.2b18	68		pla				pla
.2b19	a8		tay				tay
.2b1a	18		clc				clc
.2b1b	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/reset.asm

.2b1c					HashTableReset:
.2b1c	a2 60		ldx #$60			ldx 	#6*2*hashTableSize
.2b1e	a9 00		lda #$00			lda 	#0
.2b20					_HTRClear:
.2b20	9d 67 0a	sta $0a67,x			sta 	hashTables-1,x
.2b23	ca		dex				dex
.2b24	d0 fa		bne $2b20			bne 	_HTRClear
.2b26	60		rts				rts

;******  Return to file: variable/variable.asm

.2b27					variableHandler:
.2b27	7c 2a 2b	jmp ($2b2a,x)			jmp 	(variableVectors,x)
.2b2a					variableVectors:
>2b2a	73 28					.word AccessVariable       ; index 0
>2b2c	16 2a					.word CreateArray          ; index 2
>2b2e	1c 2b					.word HashTableReset       ; index 4

;******  Return to file: basic.asm

.2b30					section_end_variable:

;******  End of listing
