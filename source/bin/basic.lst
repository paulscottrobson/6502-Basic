
; 64tass Turbo Assembler Macro V1.55.2200 listing file
; 64tass -Walias -Wmacro-prefix -Wall -q -c -L ..\source\bin\basic.lst -l ..\source\bin\basic.lbl -Wall -o ..\source\bin\stub.prg basic.asm
; Sat Apr 03 04:11:34 2021

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: basic.asm

=0					cputype = 0
=1					autorun=1
=0					coldstartnew=0
=$1000					CodeStart = $1000
=$800					MemoryStorage = $800
=$9f00					EndOfMemory = $9F00
=$28					ZeroPageStorage = $28
=$90					StackAddress = $90
=8					StackSize = 8
=2					retStackSizePages = 2

;******  Processing file: header/01common.inc


;******  Processing file: header/../generated/installed.inc

=1					installed_header = 1
=1					installed_main = 1
=1					installed_variable = 1
=1					installed_assembler = 1
=1					installed_error = 1
=1					installed_extension = 1
=1					installed_string = 1
=1					installed_device = 1
=0					installed_floatingpoint = 0
=1					installed_interaction = 1
=1					installed_tokeniser = 1
=1					installed_footer = 1

;******  Return to file: header/01common.inc

=8					hashTableSize = 8			; if this changes, the calculation is AccessSetup has to match it.
="G"					markerGOSUB = 'G'
="R"					markerREPEAT = 'R'
="F"					markerFOR = 'F'
="W"					markerWHILE = 'W'
="P"					markerPROC = 'P'
="$"					markerSTRING = '$'
="#"					markerFLOAT = '#'
="%"					markerINT = '%'
=5					VarHSize = 5 								; header (2 link, 2 name, 1 hash)
=2					VarASize = 2 								; array [address of first level]
=4					VarISize = 4 								; integer (32 bit)
=6					VarFSize = 6 								; float (4 mantissa, 1 exponent 1 sign/zero)
=2					VarSSize = 2 								; address (2 bytes)

;******  Return to file: basic.asm


;******  Processing file: header/02macros.inc


;******  Return to file: basic.asm


;******  Processing file: header/03data.inc

>0028					codePtr:.fill 	2							; (codePtr),y points to code.
>002a					temp0: 	.fill 	2							; working variables.
>002c					temp1: 	.fill 	2
>002e					temp2: 	.fill 	2
>0030					temp3: 	.fill 	2
.0032					tempshort:
>0032							.fill 	1
.0033					highMemory:
>0033							.fill 	2
.0035					lowMemory:
>0035							.fill 	2
>0800							.align	256
.0800					returnStack:
>0800							.fill 	retStackSizePages * 256
=512					retStackSize = retStackSizePages * 256
.0a00					SingleLetterVar:
>0a00					 		.fill 	26*4
.0a68					currentStorage:
>0090					esType:	.fill 	StackSize  					; type byte (see above)
>0098					esInt0:	.fill 	StackSize 					; integer or mantissa
>00a0					esInt1:	.fill 	StackSize
>00a8					esInt2:	.fill 	StackSize
>00b0					esInt3:	.fill 	StackSize
>00b8					esExp:	.fill 	StackSize 					; exponent ($80 = 0)
>00c0					esZSign:.fill 	StackSize 					; for floating point - sign (bit 7) isZero (bit 6)
.00c8					endOfStack:
=$98					esMant0 = esInt0 							; synonyms.
=$a0					esMant1 = esInt1
=$a8					esMant2 = esInt2
=$b0					esMant3 = esInt3
.0a68					hashTables:
>0a68							.fill 	6*2*hashTableSize
.0ac8					basePage:
>0ac8							.fill 	2
.0aca					endProgram:
>0aca							.fill 	2
.0acc					endMemory:
>0acc							.fill 	2
.0ace					NullString:
>0ace							.fill 	1							; don't waste memory concreting null strings.
.0acf					convertBuffer:
>0acf							.fill 	35

;******  Processing file: header/../generated/tokenconst.inc

=$80					TOK_EOL=$80
=$81					TOK_SHIFT1=$81
=$82					TOK_SHIFT2=$82
=$83					TOK_SHIFT3=$83
=$84					TOK_FPC=$84
=$85					TOK_STR=$85
=$86					TOK_BINARYST=$86
=$99					TOK_STRUCTST=$99
=$a4					TOK_UNARYST=$a4
=$c9					TOK_TOKENS=$c9
=$86					TKW_AND                      = $86 ; and
=$87					TKW_OR                       = $87 ; or
=$88					TKW_XOR                      = $88 ; xor
=$89					TKW_GREATEREQUAL             = $89 ; >=
=$8a					TKW_LESSEQUAL                = $8a ; <=
=$8b					TKW_GREATER                  = $8b ; >
=$8c					TKW_LESS                     = $8c ; <
=$8d					TKW_EQUAL                    = $8d ; =
=$8e					TKW_LESSGREATER              = $8e ; <>
=$8f					TKW_PLUS                     = $8f ; +
=$90					TKW_MINUS                    = $90 ; -
=$91					TKW_GREATERGREATER           = $91 ; >>
=$92					TKW_LESSLESS                 = $92 ; <<
=$93					TKW_STAR                     = $93 ; *
=$94					TKW_SLASH                    = $94 ; /
=$95					TKW_MOD                      = $95 ; mod
=$96					TKW_HAT                      = $96 ; ^
=$97					TKW_PLING                    = $97 ; !
=$98					TKW_QMARK                    = $98 ; ?
=$99					TKW_REPEAT                   = $99 ; repeat
=$9a					TKW_WHILE                    = $9a ; while
=$9b					TKW_FOR                      = $9b ; for
=$9c					TKW_IF                       = $9c ; if
=$9d					TKW_DEFPROC                  = $9d ; defproc
=$9e					TKW_UNTIL                    = $9e ; until
=$9f					TKW_WEND                     = $9f ; wend
=$a0					TKW_NEXT                     = $a0 ; next
=$a1					TKW_THEN                     = $a1 ; then
=$a2					TKW_ENDIF                    = $a2 ; endif
=$a3					TKW_ENDPROC                  = $a3 ; endproc
=$a4					TKW_LPAREN                   = $a4 ; (
=$a5					TKW_LENLPAREN                = $a5 ; len(
=$a6					TKW_SGNLPAREN                = $a6 ; sgn(
=$a7					TKW_ABSLPAREN                = $a7 ; abs(
=$a8					TKW_RANDOMLPAREN             = $a8 ; random(
=$a9					TKW_PAGE                     = $a9 ; page
=$aa					TKW_TRUE                     = $aa ; true
=$ab					TKW_FALSE                    = $ab ; false
=$ac					TKW_MINLPAREN                = $ac ; min(
=$ad					TKW_MAXLPAREN                = $ad ; max(
=$ae					TKW_SYSLPAREN                = $ae ; sys(
=$af					TKW_TIMERLPAREN              = $af ; timer(
=$b0					TKW_EVENTLPAREN              = $b0 ; event(
=$b1					TKW_GETLPAREN                = $b1 ; get(
=$b2					TKW_INKEYLPAREN              = $b2 ; inkey(
=$b3					TKW_ALLOCLPAREN              = $b3 ; alloc(
=$b4					TKW_CHRDOLLARLPAREN          = $b4 ; chr$(
=$b5					TKW_LEFTDOLLARLPAREN         = $b5 ; left$(
=$b6					TKW_MIDDOLLARLPAREN          = $b6 ; mid$(
=$b7					TKW_RIGHTDOLLARLPAREN        = $b7 ; right$(
=$b8					TKW_STRDOLLARLPAREN          = $b8 ; str$(
=$b9					TKW_VALLPAREN                = $b9 ; val(
=$ba					TKW_PEEKLPAREN               = $ba ; peek(
=$bb					TKW_DEEKLPAREN               = $bb ; deek(
=$bc					TKW_LEEKLPAREN               = $bc ; leek(
=$bd					TKW_ASCLPAREN                = $bd ; asc(
=$be					TKW_INTLPAREN                = $be ; int(
=$bf					TKW_FLOATLPAREN              = $bf ; float(
=$c0					TKW_ISVALLPAREN              = $c0 ; isval(
=$c1					TKW_UPPERDOLLARLPAREN        = $c1 ; upper$(
=$c2					TKW_LOWERDOLLARLPAREN        = $c2 ; lower$(
=$c3					TKW_ATC                      = $c3 ; @
=$c4					TKW_WAVY                     = $c4 ; ~
=$c5					TKW_AMP                      = $c5 ; &
=$c6					TKW_GETDOLLARLPAREN          = $c6 ; get$(
=$c7					TKW_INKEYDOLLARLPAREN        = $c7 ; inkey$(
=$c8					TKW_MEM                      = $c8 ; mem
=$c9					TKW_RPAREN                   = $c9 ; )
=$ca					TKW_COLON                    = $ca ; :
=$cb					TKW_COMMA                    = $cb ; ,
=$cc					TKW_SEMICOLON                = $cc ; ;
=$cd					TKW_QUOTE                    = $cd ; '
=$ce					TKW_TO                       = $ce ; to
=$cf					TKW_STEP                     = $cf ; step
=$d0					TKW_PROC                     = $d0 ; proc
=$d1					TKW_LOCAL                    = $d1 ; local
=$d2					TKW_DIM                      = $d2 ; dim
=$d3					TKW_REM                      = $d3 ; rem
=$d4					TKW_LET                      = $d4 ; let
=$d5					TKW_INPUT                    = $d5 ; input
=$d6					TKW_ELSE                     = $d6 ; else
=$d7					TKW_VDU                      = $d7 ; vdu
=$d8					TKW_PRINT                    = $d8 ; print
=$d9					TKW_DATA                     = $d9 ; data
=$da					TKW_IMAGE                    = $da ; image
=$db					TKW_AT                       = $db ; at
=$dc					TKW_FLIP                     = $dc ; flip
=$dd					TKW_ASSERT                   = $dd ; assert
=$de					TKW_POKE                     = $de ; poke
=$df					TKW_DOKE                     = $df ; doke
=$e0					TKW_LOKE                     = $e0 ; loke
=$e1					TKW_INK                      = $e1 ; ink
=$e2					TKW_PAPER                    = $e2 ; paper
=$e3					TKW_CLS                      = $e3 ; cls
=$e4					TKW_LOCATE                   = $e4 ; locate
=$e5					TKW_PERIOD                   = $e5 ; .
=$e6					TKW_FROM                     = $e6 ; from
=$e7					TKW_HASH                     = $e7 ; #
=$e8					TKW_CLEAR                    = $e8 ; clear
=$86					TKW_LOAD                     = $86 ; load
=$87					TKW_SAVE                     = $87 ; save
=$88					TKW_LIST                     = $88 ; list
=$89					TKW_NEW                      = $89 ; new
=$8a					TKW_BREAK                    = $8a ; break
=$8b					TKW_RUN                      = $8b ; run
=$8c					TKW_READ                     = $8c ; read
=$8d					TKW_RESTORE                  = $8d ; restore
=$8e					TKW_END                      = $8e ; end
=$8f					TKW_STOP                     = $8f ; stop
=$90					TKW_XEMU                     = $90 ; xemu
=$91					TKW_GOTO                     = $91 ; goto
=$92					TKW_GOSUB                    = $92 ; gosub
=$93					TKW_RETURN                   = $93 ; return
=$94					TKW_ORA                      = $94 ; ora
=$95					TKW_LPARENANDRPAREN          = $95 ; (and)
=$96					TKW_EOR                      = $96 ; eor
=$97					TKW_ADC                      = $97 ; adc
=$98					TKW_STA                      = $98 ; sta
=$99					TKW_LDA                      = $99 ; lda
=$9a					TKW_CMP                      = $9a ; cmp
=$9b					TKW_SBC                      = $9b ; sbc
=$9c					TKW_ASL                      = $9c ; asl
=$9d					TKW_ROL                      = $9d ; rol
=$9e					TKW_LSR                      = $9e ; lsr
=$9f					TKW_ROR                      = $9f ; ror
=$a0					TKW_STX                      = $a0 ; stx
=$a1					TKW_LDX                      = $a1 ; ldx
=$a2					TKW_DEC                      = $a2 ; dec
=$a3					TKW_INC                      = $a3 ; inc
=$a4					TKW_STZ                      = $a4 ; stz
=$a5					TKW_BIT                      = $a5 ; bit
=$a6					TKW_STY                      = $a6 ; sty
=$a7					TKW_LDY                      = $a7 ; ldy
=$a8					TKW_CPY                      = $a8 ; cpy
=$a9					TKW_CPX                      = $a9 ; cpx
=$aa					TKW_TSB                      = $aa ; tsb
=$ab					TKW_TRB                      = $ab ; trb
=$ac					TKW_JSR                      = $ac ; jsr
=$ad					TKW_JMP                      = $ad ; jmp
=$ae					TKW_BPL                      = $ae ; bpl
=$af					TKW_BMI                      = $af ; bmi
=$b0					TKW_BVC                      = $b0 ; bvc
=$b1					TKW_BVS                      = $b1 ; bvs
=$b2					TKW_BCC                      = $b2 ; bcc
=$b3					TKW_BCS                      = $b3 ; bcs
=$b4					TKW_BNE                      = $b4 ; bne
=$b5					TKW_BEQ                      = $b5 ; beq
=$b6					TKW_BRA                      = $b6 ; bra
=$b7					TKW_BRK                      = $b7 ; brk
=$b8					TKW_PHP                      = $b8 ; php
=$b9					TKW_CLC                      = $b9 ; clc
=$ba					TKW_PLP                      = $ba ; plp
=$bb					TKW_SEC                      = $bb ; sec
=$bc					TKW_RTI                      = $bc ; rti
=$bd					TKW_PHA                      = $bd ; pha
=$be					TKW_CLI                      = $be ; cli
=$bf					TKW_PHY                      = $bf ; phy
=$c0					TKW_RTS                      = $c0 ; rts
=$c1					TKW_PLA                      = $c1 ; pla
=$c2					TKW_SEI                      = $c2 ; sei
=$c3					TKW_PLY                      = $c3 ; ply
=$c4					TKW_DEY                      = $c4 ; dey
=$c5					TKW_TXA                      = $c5 ; txa
=$c6					TKW_TYA                      = $c6 ; tya
=$c7					TKW_TXS                      = $c7 ; txs
=$c8					TKW_TAY                      = $c8 ; tay
=$c9					TKW_TAX                      = $c9 ; tax
=$ca					TKW_CLV                      = $ca ; clv
=$cb					TKW_TSX                      = $cb ; tsx
=$cc					TKW_INY                      = $cc ; iny
=$cd					TKW_DEX                      = $cd ; dex
=$ce					TKW_CLD                      = $ce ; cld
=$cf					TKW_PHX                      = $cf ; phx
=$d0					TKW_INX                      = $d0 ; inx
=$d1					TKW_NOP                      = $d1 ; nop
=$d2					TKW_SED                      = $d2 ; sed
=$d3					TKW_PLX                      = $d3 ; plx
=$86					TKW_VPOKE                    = $86 ; vpoke
=$87					TKW_VDOKE                    = $87 ; vdoke
=$88					TKW_VLOAD                    = $88 ; vload
=$89					TKW_MODE                     = $89 ; mode
=$8a					TKW_PALETTE                  = $8a ; palette
=$8b					TKW_SPRITE                   = $8b ; sprite
=$8c					TKW_CLG                      = $8c ; clg
=$8d					TKW_RECT                     = $8d ; rect
=$8e					TKW_FRAME                    = $8e ; frame
=$8f					TKW_DRAW                     = $8f ; draw
=$90					TKW_TEXT                     = $90 ; text
=$91					TKW_PLOT                     = $91 ; plot
=$92					TKW_LINE                     = $92 ; line
=$86					TKW_VPEEKLPAREN              = $86 ; vpeek(
=$87					TKW_VDEEKLPAREN              = $87 ; vdeek(
=$88					TKW_SPRITEPERIODXLPAREN      = $88 ; sprite.x(
=$89					TKW_SPRITEPERIODYLPAREN      = $89 ; sprite.y(
=$8a					TKW_HITLPAREN                = $8a ; hit(
=$8b					TKW_JOYPERIODXLPAREN         = $8b ; joy.x(
=$8c					TKW_JOYPERIODYLPAREN         = $8c ; joy.y(
=$8d					TKW_JOYPERIODBLPAREN         = $8d ; joy.b(
=$8e					TKW_CLOCKLPAREN              = $8e ; clock(

;******  Return to file: header/03data.inc

=$3a					TYPE_INT =		($3A) 						; type bytes that end identifier.
=$3b					TYPE_INTARRAY =	($3B)
=$3c					TYPE_STR =		($3C)
=$3d					TYPE_STRARRAY =	($3D)
=$3e					TYPE_FLOAT =	($3E)
=$3f					TYPE_FLOATARRAY=($3F)

;******  Processing file: header/../generated/asmconst.inc

=$94					TKA_GROUP1 = $94
=$9c					TKA_GROUP2 = $9c
=$ae					TKA_GROUP3 = $ae
=$b7					TKA_GROUP4 = $b7
=$d4					TKA_END4 = $d4

;******  Return to file: header/03data.inc


;******  Return to file: basic.asm


;******  Processing file: header/header.inc


;******  Return to file: basic.asm


;******  Processing file: assembler/asmconst.inc

=0					AMD_IMM		= 0					; Immediate mode.
=1					AMD_ZERO 	= 1					; Zero Page
=2					AMD_ACCIMP	= 2					; Accumulator/Implied
=3					AMD_ABS 	= 3					; Absolute
=4					AMD_ZEROINDY= 4					; Zero Indirect,Y
=5					AMD_ZEROX 	= 5					; Zero Page,X
=6					AMD_ABSY 	= 6					; Absolute,Y
=7					AMD_ABSX 	= 7					; Absolute,X
=8					AMD_ZEROIND = 8					; Zero Indirect
=9					AMD_ZEROY 	= 9					; Zero Page,Y
=10					AMD_ABSIND 	= 10				; Absolute Indirect
=11					AMD_ABSINDX	= 11				; Absolute Indirect Indexed
=12					AMD_REL		= 12				; Relative
=13					AMD_ZEROINDX= 13 				; Zero Indirect,X

;******  Return to file: basic.asm


;******  Processing file: assembler/assembler.inc


;******  Return to file: basic.asm


;******  Processing file: device/device.inc


;******  Return to file: basic.asm


;******  Processing file: error/error.inc


;******  Return to file: basic.asm


;******  Processing file: error/errorhandler.inc


;******  Processing file: error/../generated/errorid.inc

=1					ErrorID_Missing = 1 ; Feature not Present
=2					ErrorID_Syntax = 2 ; Syntax Error
=3					ErrorID_NoModule = 3 ; Module disabled
=4					ErrorID_Assert = 4 ; Assertion failed
=5					ErrorID_DivZero = 5 ; Divide By Zero
=6					ErrorID_Stop = 6 ; Stop
=7					ErrorID_BadType = 7 ; Type Mismatch
=8					ErrorID_BadValue = 8 ; Illegal Value
=9					ErrorID_MissingRP = 9 ; Missing right bracket
=10					ErrorID_MissingComma = 10 ; Missing comma
=11					ErrorID_NoReference = 11 ; Missing reference
=12					ErrorID_LineNumber = 12 ; Line Number not found
=13					ErrorID_StrLen = 13 ; String too long
=14					ErrorID_ReturnErr = 14 ; RETURN without GOSUB
=15					ErrorID_UntilErr = 15 ; UNTIL without REPEAT
=16					ErrorID_NextErr = 16 ; NEXT without FOR
=17					ErrorID_WendErr = 17 ; WEND without WHILE
=18					ErrorID_endprocErr = 18 ; ENDPROC without PROC
=19					ErrorID_BadIndex = 19 ; Bad NEXT index
=20					ErrorID_Struct = 20 ; Structures nested wrong
=21					ErrorID_NoAuto = 21 ; Cannot create variable
=22					ErrorID_RetStack = 22 ; Return stack out of space
=23					ErrorID_NoProc = 23 ; Unknown Procedure
=24					ErrorID_Params = 24 ; Parameters do not match
=25					ErrorID_DupArray = 25 ; Array already defined
=26					ErrorID_NotArray = 26 ; DIM requires array
=27					ErrorID_ArrayIndex = 27 ; Bad array index
=28					ErrorID_ArrayDepth = 28 ; Wrong number of array indices
=29					ErrorID_DataError = 29 ; Out of data
=30					ErrorID_Tokenise = 30 ; Cannot tokenise line
=31					ErrorID_Save = 31 ; Save failed
=32					ErrorID_Load = 32 ; Load failed
=33					ErrorID_Break = 33 ; Break
=34					ErrorID_Memory = 34 ; Out of memory
=35					ErrorID_NumStack = 35 ; Expression too complex
=36					ErrorID_Assembler = 36 ; Bad Operand/Mode
=37					ErrorID_Branch = 37 ; Branch out of range
=38					ErrorID_Label = 38 ; Label changed value
=39					ErrorID_NoSprite = 39 ; No Sprite Selected
=40					ErrorID_Hardware = 40 ; Hardware

;******  Return to file: error/errorhandler.inc


;******  Return to file: basic.asm


;******  Processing file: extension/extension.inc


;******  Return to file: basic.asm


;******  Processing file: extension/option_x16/x16const.inc

=64					X16MaxImages = 64 							; max # of sprite images.

;******  Return to file: basic.asm


;******  Processing file: floatingpoint/float.inc

=5					FloatEmbeddedSize = 5

;******  Return to file: basic.asm


;******  Processing file: floatingpoint/floatingpoint.inc


;******  Return to file: basic.asm


;******  Processing file: interaction/interaction.inc


;******  Return to file: basic.asm


;******  Processing file: main/main.inc


;******  Return to file: basic.asm


;******  Processing file: string/functions/memory.inc

=252					MaxStringSize = 252

;******  Return to file: basic.asm


;******  Processing file: string/string.inc


;******  Return to file: basic.asm


;******  Processing file: tokeniser/detokenise/colouring.inc

=$84					LTYLineNumber = $84
=$82					LTYPunctuation = $82
=$87					LTYIdentifier = $87
=$86					LTYConstant = $86
=$83					LTYKeyword = $83
=$81					LTYString = $81

;******  Return to file: basic.asm


;******  Processing file: tokeniser/tokeniser.inc


;******  Return to file: basic.asm


;******  Processing file: variable/variable.inc


;******  Return to file: basic.asm


;******  Processing file: footer/footer.inc


;******  Return to file: basic.asm

.1000					section_start_header:

;******  Processing file: header/header.asm


;******  Processing file: header/00start.asm

.1000					Start:
.1000	4c 0a 10	jmp $100a			jmp 	GoColdStart 				; +0 	boot BASIC
.1003	4c 58 10	jmp $1058			jmp 	GoTokTest					; +3 	run tokeniser test code.
>1006	80 43						.word 	TokenTableAddress
.1008							else
>1008	00 00						.word 	0
.100a					GoColdStart:
.100a	a9 00		lda #$00			lda 	#(programMemory) & $FF
.100c	8d c8 0a	sta $0ac8			sta 	basePage
.100f	a9 4c		lda #$4c			lda 	#(programMemory) >> 8
.1011	8d c9 0a	sta $0ac9			sta 	1+(basePage)
.1014	a9 00		lda #$00			lda 	#(endOfMemory) & $FF
.1016	8d cc 0a	sta $0acc			sta 	endMemory
.1019	a9 9f		lda #$9f			lda 	#(endOfMemory) >> 8
.101b	8d cd 0a	sta $0acd			sta 	1+(endMemory)
.101e	20 26 10	jsr $1026			jsr 	InitialiseAll 				; initialise everything.
.1021	a2 02		ldx #$02		ldx	#2
.1023	20 53 25	jsr $2553		jsr	interactionHandler

;******  Processing file: header/../generated/initialiseall.asm

.1026					InitialiseAll:
.1026	a9 00		lda #$00		lda #0
.1028	a2 00		ldx #$00		ldx	#0
.102a	20 b4 13	jsr $13b4		jsr	assemblerHandler
.102d	a9 00		lda #$00		lda #0
.102f	a2 00		ldx #$00		ldx	#0
.1031	20 f6 14	jsr $14f6		jsr	deviceHandler
.1034	a9 00		lda #$00		lda #0
.1036	a2 00		ldx #$00		ldx	#0
.1038	20 53 25	jsr $2553		jsr	interactionHandler
.103b	a9 00		lda #$00		lda #0
.103d	a2 00		ldx #$00		ldx	#0
.103f	20 f1 3b	jsr $3bf1		jsr	mainHandler
.1042	a9 00		lda #$00		lda #0
.1044	a2 00		ldx #$00		ldx	#0
.1046	20 ae 3e	jsr $3eae		jsr	stringHandler
.1049	a9 00		lda #$00		lda #0
.104b	a2 00		ldx #$00		ldx	#0
.104d	20 31 47	jsr $4731		jsr	tokeniserHandler
.1050	a9 00		lda #$00		lda #0
.1052	a2 00		ldx #$00		ldx	#0
.1054	20 02 4b	jsr $4b02		jsr	variableHandler
.1057	60		rts			rts

;******  Return to file: header/00start.asm

.1058					GoTokTest:
.1058	a2 06		ldx #$06		ldx	#6
.105a	20 31 47	jsr $4731		jsr	tokeniserHandler

;******  Return to file: header/header.asm


;******  Return to file: basic.asm

.105d					section_end_header:
.105d					section_start_assembler:

;******  Processing file: assembler/assembler.asm


;******  Processing file: assembler/asmoperand.asm

.105d					AsmGetOperand:
.105d	a2 00		ldx #$00			ldx 	#0 							; clear the operand.
.105f	8a		txa				txa
.1060	95 98		sta $98,x			sta 	esInt0,x
.1062	95 a0		sta $a0,x			sta 	esInt1,x
.1064	95 a8		sta $a8,x			sta 	esInt2,x
.1066	95 b0		sta $b0,x			sta 	esInt3,x
.1068	b1 28		lda ($28),y			lda 	(codePtr),y 				; first into X
.106a	aa		tax				tax
.106b	a9 02		lda #$02			lda 	#AMD_ACCIMP
.106d	e0 80		cpx #$80			cpx 	#TOK_EOL 					; if end of line or colon, return implied mode.
.106f	f0 41		beq $10b2			beq 	_AGOExit
.1071	e0 ca		cpx #$ca			cpx 	#TKW_COLON
.1073	f0 3d		beq $10b2			beq 	_AGOExit
.1075	c8		iny				iny 								; consume the token
.1076	a9 00		lda #$00			lda 	#AMD_IMM
.1078	e0 e7		cpx #$e7			cpx 	#TKW_HASH 					; if a hash present, then immediate mode.
.107a	f0 2d		beq $10a9			beq		_AGOEvalExit 				; with an operand.
.107c	e0 a4		cpx #$a4			cpx 	#TKW_LPAREN 				; left bracket ?
.107e	f0 40		beq $10c0			beq 	_AGOIndirect
.1080	e0 01		cpx #$01			cpx 	#$01 						; is it "A" e.g. the variable A.
.1082	d0 0b		bne $108f			bne 	_AGOZeroPage1 				; if not it is zero zero,x zero,y, unpick 1 iny
.1084	b1 28		lda ($28),y			lda 	(codePtr),y 				; get the second character & consume it
.1086	c8		iny				iny
.1087	aa		tax				tax
.1088	a9 02		lda #$02			lda 	#AMD_ACCIMP 				; and return Acc/Implied if it is just A
.108a	e0 3a		cpx #$3a			cpx 	#$3A
.108c	f0 24		beq $10b2			beq 	_AGOExit
.108e	88		dey				dey 								; unpick 2 iny
.108f					_AGOZeroPage1:
.108f	88		dey				dey
.1090	a9 00		lda #$00			lda 	#0 							; get the address into esInt0/1
.1092	a2 0a		ldx #$0a		ldx	#10
.1094	20 f1 3b	jsr $3bf1		jsr	mainHandler
.1097	20 ef 10	jsr $10ef			jsr 	AsmGetIndexing
.109a	a9 01		lda #$01			lda 	#AMD_ZERO
.109c	90 14		bcc $10b2			bcc 	_AGOExit
.109e	a9 05		lda #$05			lda 	#AMD_ZEROX
.10a0	e0 00		cpx #$00			cpx 	#0
.10a2	f0 0e		beq $10b2			beq 	_AGOExit
.10a4	a9 09		lda #$09			lda 	#AMD_ZEROY
.10a6	4c b2 10	jmp $10b2			jmp 	_AGOExit
.10a9					_AGOEvalExit:
.10a9	48		pha				pha
.10aa	a9 00		lda #$00			lda 	#0 							; evaluate operand in root.
.10ac	a2 0a		ldx #$0a		ldx	#10
.10ae	20 f1 3b	jsr $3bf1		jsr	mainHandler
.10b1	68		pla				pla
.10b2					_AGOExit:
.10b2	48		pha				pha 								; save the mode
.10b3	a5 a8		lda $a8				lda 	esInt2 						; check the operand is zero.
.10b5	05 b0		ora $b0				ora 	esInt3
.10b7	d0 02		bne $10bb			bne 	_AGOValue
.10b9	68		pla				pla
.10ba	60		rts				rts
.10bb					_AGOValue:
.10bb	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.10bd	20 18 15	jsr $1518		jsr	errorHandler
.10c0					_AGOIndirect:
.10c0	a9 00		lda #$00			lda 	#0 							; evaluate operand in root.
.10c2	a2 0a		ldx #$0a		ldx	#10
.10c4	20 f1 3b	jsr $3bf1		jsr	mainHandler
.10c7	b1 28		lda ($28),y			lda 	(codePtr),y 				; does ) follow ? if so might be ) or ),Y
.10c9	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.10cb	f0 11		beq $10de			beq 	_AGOIndIndY
.10cd	20 ef 10	jsr $10ef			jsr 	ASMGetIndexing 				; must be ,X)
.10d0	90 39		bcc $110b			bcc 	AGISyntax
.10d2	e0 00		cpx #$00			cpx 	#0
.10d4	d0 35		bne $110b			bne 	AGISyntax
.10d6	a2 04		ldx #$04		ldx	#4
.10d8	20 f1 3b	jsr $3bf1		jsr	mainHandler
.10db	a9 0d		lda #$0d			lda 	#AMD_ZEROINDX
.10dd	60		rts				rts
.10de					_AGOIndIndY:
.10de	c8		iny				iny
.10df	20 ef 10	jsr $10ef			jsr 	ASMGetIndexing 				; get indexing if any
.10e2	a9 08		lda #$08			lda 	#AMD_ZEROIND
.10e4	90 cc		bcc $10b2			bcc 	_AGOExit 					; none then exit
.10e6	e0 00		cpx #$00			cpx 	#0 							; must be ,Y
.10e8	f0 21		beq $110b			beq 	AGISyntax
.10ea	a9 04		lda #$04			lda 	#AMD_ZEROINDY
.10ec	4c b2 10	jmp $10b2			jmp 	_AGOExit
.10ef					AsmGetIndexing:
.10ef	b1 28		lda ($28),y			lda 	(codePtr),y 				; check for comma
.10f1	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.10f3	18		clc				clc
.10f4	d0 14		bne $110a			bne 	_AGIExit 					; no comma, return with CC
.10f6	c8		iny				iny 								; get what SHOULD be X or Y
.10f7	b1 28		lda ($28),y			lda 	(codePtr),y  				; read it
.10f9	38		sec				sec 								; subtract 6 bit ASCII of X
.10fa	e9 18		sbc #$18			sbc 	#"X" & $3F
.10fc	c9 02		cmp #$02			cmp 	#2 							; if unsigned >= 2 then error
.10fe	b0 0b		bcs $110b			bcs 	AGISyntax
.1100	aa		tax				tax 								; put in index
.1101	c8		iny				iny 								; get what follows that, should be the $3A marker
.1102	b1 28		lda ($28),y			lda 	(codePtr),y
.1104	c8		iny				iny
.1105	c9 3a		cmp #$3a			cmp 	#$3A
.1107	d0 02		bne $110b			bne 	AGISyntax
.1109	38		sec				sec 								; return CS and index mode in X
.110a					_AGIExit:
.110a	60		rts				rts
.110b					AGISyntax:
.110b	a2 02		ldx #$02			ldx 	#ErrorID_syntax
.110d	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: assembler/assembler.asm


;******  Processing file: assembler/asmwrite.asm

.0af2					finalOpcode:
>0af2							.fill 	1
.1110					AsmWriteInstruction:
.1110	8d f2 0a	sta $0af2			sta 	finalOpcode					; save opcode.
.1113	98		tya				tya
.1114	48		pha				pha
.1115	ad 38 0a	lda $0a38			lda 	SingleLetterVar+("O"-"A")*4	; check O
.1118	29 02		and #$02			and 	#2
.111a	f0 2d		beq $1149			beq 	_ASMWNoEcho 				; if zero then don't echo.
.111c	ad 3d 0a	lda $0a3d			lda 	SingleLetterVar+("P"-"A")*4+1 ; write address in P
.111f	20 84 11	jsr $1184			jsr 	AWIWriteHex
.1122	ad 3c 0a	lda $0a3c			lda 	SingleLetterVar+("P"-"A")*4
.1125	20 84 11	jsr $1184			jsr 	AWIWriteHex
.1128	ad f2 0a	lda $0af2			lda 	finalOpcode 				; write opcode
.112b	20 7d 11	jsr $117d			jsr 	AWIWriteHexSpace
.112e	e0 00		cpx #$00			cpx 	#0
.1130	f0 0e		beq $1140			beq 	_ASMWEchoExit
.1132	a5 98		lda $98				lda 	esInt0
.1134	20 7d 11	jsr $117d			jsr 	AWIWriteHexSpace
.1137	e0 01		cpx #$01			cpx 	#1
.1139	f0 05		beq $1140			beq 	_ASMWEchoExit
.113b	a5 a0		lda $a0				lda 	esInt1
.113d	20 7d 11	jsr $117d			jsr 	AWIWriteHexSpace
.1140					_ASMWEchoExit:
.1140	8a		txa				txa
.1141	48		pha				pha
.1142	a2 06		ldx #$06		ldx	#6
.1144	20 f6 14	jsr $14f6		jsr	deviceHandler
.1147	68		pla				pla
.1148	aa		tax				tax
.1149					_ASMWNoEcho:
.1149	ad f2 0a	lda $0af2			lda 	finalOpcode
.114c	20 64 11	jsr $1164			jsr 	AsmWriteByte
.114f	e0 00		cpx #$00			cpx 	#0
.1151	f0 0e		beq $1161			beq 	_ASMWExit
.1153	a5 98		lda $98				lda 	esInt0
.1155	20 64 11	jsr $1164			jsr 	AsmWriteByte
.1158	e0 01		cpx #$01			cpx 	#1
.115a	f0 05		beq $1161			beq 	_ASMWExit
.115c	a5 a0		lda $a0				lda 	esInt1
.115e	20 64 11	jsr $1164			jsr 	AsmWriteByte
.1161					_ASMWExit:
.1161	68		pla				pla
.1162	a8		tay				tay
.1163	60		rts				rts
.1164					AsmWriteByte:
.1164	a0 00		ldy #$00			ldy 	#0
.1166	48		pha				pha
.1167	ad 3c 0a	lda $0a3c			lda 	SingleLetterVar+("P"-"A")*4 ; copy address to temp0
.116a	85 2a		sta $2a				sta 	temp0
.116c	ad 3d 0a	lda $0a3d			lda 	SingleLetterVar+("P"-"A")*4+1
.116f	85 2b		sta $2b				sta 	temp0+1
.1171	68		pla				pla 								; write out the byte.
.1172	91 2a		sta ($2a),y			sta 	(temp0),y
.1174	ee 3c 0a	inc $0a3c			inc 	SingleLetterVar+("P"-"A")*4	; increment P
.1177	d0 03		bne $117c			bne 	_AWBNoCarry
.1179	ee 3d 0a	inc $0a3d			inc 	SingleLetterVar+("P"-"A")*4+1
.117c					_AWBNoCarry:
.117c	60		rts				rts
.117d					AWIWriteHexSpace:
.117d	48		pha				pha
.117e	a9 20		lda #$20			lda 	#" "
.1180	20 97 11	jsr $1197			jsr 	AWIPrintChar
.1183	68		pla				pla
.1184					AWIWriteHex:
.1184	48		pha				pha
.1185	4a		lsr a				lsr 	a
.1186	4a		lsr a				lsr 	a
.1187	4a		lsr a				lsr 	a
.1188	4a		lsr a				lsr 	a
.1189	20 8d 11	jsr $118d			jsr 	AWIPrintNibble
.118c	68		pla				pla
.118d					AWIPrintNibble:
.118d	29 0f		and #$0f			and 	#15
.118f	c9 0a		cmp #$0a			cmp 	#10
.1191	90 02		bcc $1195			bcc 	_AWIPNDigit
.1193	69 06		adc #$06			adc 	#6
.1195					_AWIPNDigit:
.1195	69 30		adc #$30			adc 	#48
.1197					AWIPrintChar:
.1197	85 32		sta $32				sta 	tempShort
.1199	8a		txa				txa
.119a	48		pha				pha
.119b	a5 32		lda $32				lda 	tempShort
.119d	a2 16		ldx #$16		ldx	#22
.119f	20 f6 14	jsr $14f6		jsr	deviceHandler
.11a2	68		pla				pla
.11a3	aa		tax				tax
.11a4	60		rts				rts

;******  Return to file: assembler/assembler.asm


;******  Processing file: assembler/assemblecmd.asm

.0af3					asmToken:
>0af3							.fill 	1
.0af4					asmMode:
>0af4							.fill 	1 							; esInt0/1
.0af5					asmBaseOpcode:
>0af5							.fill 	1
.11a5					AssembleOneInstruction:
.11a5	8d f3 0a	sta $0af3			sta 	asmToken 					; save the token
.11a8	aa		tax				tax
.11a9	bd 72 11	lda $1172,x			lda 	OpcodeTable-TKA_GROUP1,x 	; get the base opcode.
.11ac	8d f5 0a	sta $0af5			sta 	asmBaseOpcode
.11af	20 5d 10	jsr $105d			jsr 	AsmGetOperand 				; identify the address mode and operand where applicable.
.11b2	8d f4 0a	sta $0af4			sta 	asmMode
.11b5	a5 a0		lda $a0				lda 	esInt1 						; check if this is a three byte operand.
.11b7	d0 05		bne $11be			bne 	_AOIThreeBytes 				; if so, we have to use three byte
.11b9	20 d4 11	jsr $11d4			jsr 	AssembleAttempt 			; try to assemble token/mode/operand (2 bytes)
.11bc	b0 10		bcs $11ce			bcs 	_AOISuccess 				; worked ok.
.11be					_AOIThreeBytes:
.11be	ae f4 0a	ldx $0af4			ldx 	asmMode 					; convert mode to 3 byte version, where possible.
.11c1	bd f8 11	lda $11f8,x			lda 	AbsoluteVersionTable,x
.11c4	30 09		bmi $11cf			bmi 	_AOIError					; not possible, no equivalent.
.11c6	8d f4 0a	sta $0af4			sta 	asmMode
.11c9	20 d4 11	jsr $11d4			jsr 	AssembleAttempt 			; try to assemble token/mode/operand (3 bytes)
.11cc	90 01		bcc $11cf			bcc 	_AOIError 					; didn't work.
.11ce					_AOISuccess:
.11ce	60		rts				rts
.11cf					_AOIError:
.11cf	a2 24		ldx #$24			ldx 	#ErrorID_Assembler
.11d1	20 18 15	jsr $1518		jsr	errorHandler
.11d4					AssembleAttempt:
.11d4	20 dd 11	jsr $11dd			jsr 	_AADispatch 				; go to the code which dispatches to the appropriate
.11d7	b0 03		bcs $11dc			bcs 	_AAExit 					; exit if carry set, e.g. was successful
.11d9	20 87 13	jsr $1387			jsr 	AssembleSpecialCase
.11dc					_AAExit:
.11dc	60		rts				rts
.11dd					_AADispatch:
.11dd	ad f3 0a	lda $0af3			lda 	asmToken
.11e0	c9 b7		cmp #$b7			cmp 	#TKA_GROUP4
.11e2	b0 11		bcs $11f5			bcs 	_AAGroup4
.11e4	c9 ae		cmp #$ae			cmp 	#TKA_GROUP3
.11e6	b0 0a		bcs $11f2			bcs 	_AAGroup3
.11e8	c9 9c		cmp #$9c			cmp 	#TKA_GROUP2
.11ea	b0 03		bcs $11ef			bcs 	_AAGroup2
.11ec	4c cd 12	jmp $12cd			jmp 	AssembleGroup1
.11ef					_AAGroup2:
.11ef	4c 28 13	jmp $1328			jmp 	AssembleGroup2
.11f2					_AAGroup3:
.11f2	4c 49 13	jmp $1349			jmp 	AssembleGroup3
.11f5					_AAGroup4:
.11f5	4c 7d 13	jmp $137d			jmp 	AssembleGroup4
.11f8					AbsoluteVersionTable:
>11f8	ff						.byte	$FF 			; fail AMD_IMM
>11f9	03						.byte	AMD_ABS 		; absolute AMD_ZERO
>11fa	ff						.byte	$FF 			; fail AMD_ACCIMP
>11fb	ff						.byte	$FF 			; fail AMD_ABS
>11fc	ff						.byte 	$FF 			; fail AMD_ZEROINDY
>11fd	07						.byte	AMD_ABSX 		; absolute AMD_ZEROX
>11fe	ff						.byte	$FF 			; fail AMD_ABSY
>11ff	ff						.byte	$FF 			; fail AMD_ABSX
>1200	0a						.byte	AMD_ABSIND 		; absolute AMD_ZEROIND
>1201	06						.byte	AMD_ABSY 		; absolute AMD_ZEROY
>1202	ff						.byte	$FF 			; fail AMD_ABSIND
>1203	ff						.byte	$FF 			; fail AMD_ABSINDX
>1204	ff						.byte	$FF 			; fail AMD_REL
>1205	0b						.byte 	AMD_ABSINDX 	; absolute AMD_ZEROINDX

;******  Processing file: assembler/../generated/asmtables.inc

.1206					OpcodeTable:
>1206	01					.byte	$01			; $94 ora
>1207	21					.byte	$21			; $95 (and)
>1208	41					.byte	$41			; $96 eor
>1209	61					.byte	$61			; $97 adc
>120a	81					.byte	$81			; $98 sta
>120b	a1					.byte	$a1			; $99 lda
>120c	c1					.byte	$c1			; $9a cmp
>120d	e1					.byte	$e1			; $9b sbc
>120e	02					.byte	$02			; $9c asl
>120f	22					.byte	$22			; $9d rol
>1210	42					.byte	$42			; $9e lsr
>1211	62					.byte	$62			; $9f ror
>1212	82					.byte	$82			; $a0 stx
>1213	a2					.byte	$a2			; $a1 ldx
>1214	c2					.byte	$c2			; $a2 dec
>1215	e2					.byte	$e2			; $a3 inc
>1216	60					.byte	$60			; $a4 stz
>1217	20					.byte	$20			; $a5 bit
>1218	80					.byte	$80			; $a6 sty
>1219	a0					.byte	$a0			; $a7 ldy
>121a	c0					.byte	$c0			; $a8 cpy
>121b	e0					.byte	$e0			; $a9 cpx
>121c	00					.byte	$00			; $aa tsb
>121d	10					.byte	$10			; $ab trb
>121e	14					.byte	$14			; $ac jsr
>121f	40					.byte	$40			; $ad jmp
>1220	10					.byte	$10			; $ae bpl
>1221	30					.byte	$30			; $af bmi
>1222	50					.byte	$50			; $b0 bvc
>1223	70					.byte	$70			; $b1 bvs
>1224	90					.byte	$90			; $b2 bcc
>1225	b0					.byte	$b0			; $b3 bcs
>1226	d0					.byte	$d0			; $b4 bne
>1227	f0					.byte	$f0			; $b5 beq
>1228	80					.byte	$80			; $b6 bra
>1229	00					.byte	$00			; $b7 brk
>122a	08					.byte	$08			; $b8 php
>122b	18					.byte	$18			; $b9 clc
>122c	28					.byte	$28			; $ba plp
>122d	38					.byte	$38			; $bb sec
>122e	40					.byte	$40			; $bc rti
>122f	48					.byte	$48			; $bd pha
>1230	58					.byte	$58			; $be cli
>1231	5a					.byte	$5a			; $bf phy
>1232	60					.byte	$60			; $c0 rts
>1233	68					.byte	$68			; $c1 pla
>1234	78					.byte	$78			; $c2 sei
>1235	7a					.byte	$7a			; $c3 ply
>1236	88					.byte	$88			; $c4 dey
>1237	8a					.byte	$8a			; $c5 txa
>1238	98					.byte	$98			; $c6 tya
>1239	9a					.byte	$9a			; $c7 txs
>123a	a8					.byte	$a8			; $c8 tay
>123b	aa					.byte	$aa			; $c9 tax
>123c	b8					.byte	$b8			; $ca clv
>123d	ba					.byte	$ba			; $cb tsx
>123e	c8					.byte	$c8			; $cc iny
>123f	ca					.byte	$ca			; $cd dex
>1240	d8					.byte	$d8			; $ce cld
>1241	da					.byte	$da			; $cf phx
>1242	e8					.byte	$e8			; $d0 inx
>1243	ea					.byte	$ea			; $d1 nop
>1244	f8					.byte	$f8			; $d2 sed
>1245	fa					.byte	$fa			; $d3 plx
.1246					Group2OpcodeAvailability:
>1246	ae					.byte	$ae			; $9c asl $02
>1247	ae					.byte	$ae			; $9d rol $22
>1248	ae					.byte	$ae			; $9e lsr $42
>1249	ae					.byte	$ae			; $9f ror $62
>124a	0a					.byte	$0a			; $a0 stx $82
>124b	0b					.byte	$0b			; $a1 ldx $a2
>124c	aa					.byte	$aa			; $a2 dec $c2
>124d	aa					.byte	$aa			; $a3 inc $e2
>124e	22					.byte	$22			; $a4 stz $60
>124f	aa					.byte	$aa			; $a5 bit $20
>1250	2a					.byte	$2a			; $a6 sty $80
>1251	ab					.byte	$ab			; $a7 ldy $a0
>1252	2b					.byte	$2b			; $a8 cpy $c0
>1253	0b					.byte	$0b			; $a9 cpx $e0
>1254	0a					.byte	$0a			; $aa tsb $00
>1255	0a					.byte	$0a			; $ab trb $10
>1256	08					.byte	$08			; $ac jsr $14
>1257	08					.byte	$08			; $ad jmp $40
.1258					AssemblerSpecialCases:
>1258	ad 0a 6c				.byte	$ad,10,$6c		; jmp (abs)
>125b	ad 0b 7c				.byte	$ad,11,$7c		; jmp (abs,x)
>125e	a1 06 be				.byte	$a1,6,$be		; ldx abs,y
>1261	a1 09 b6				.byte	$a1,9,$b6		; ldx zp,y
>1264	a0 09 96				.byte	$a0,9,$96		; stx zp,y
>1267	a3 02 1a				.byte	$a3,2,$1a		; inc acc
>126a	a2 02 3a				.byte	$a2,2,$3a		; dec acc
>126d	a5 00 89				.byte	$a5,0,$89		; bit #
>1270	a4 03 9c				.byte	$a4,3,$9c		; stz abs
>1273	a4 07 9e				.byte	$a4,7,$9e		; stz abs,x
>1276	00					.byte	0

;******  Return to file: assembler/assemblecmd.asm


;******  Return to file: assembler/assembler.asm


;******  Processing file: assembler/assemblelabel.asm

.1277					AssembleLabel:
.1277	b1 28		lda ($28),y			lda 	(codePtr),y 				; check it's followed by a variable name.
.1279	c9 3a		cmp #$3a			cmp 	#$3A
.127b	b0 4b		bcs $12c8			bcs 	_ALSyntax
.127d	a9 00		lda #$00			lda 	#0							; get a variable name on to stack:0
.127f	a2 02		ldx #$02		ldx	#2
.1281	20 02 4b	jsr $4b02		jsr	variableHandler
.1284	a5 90		lda $90				lda 	esType 						; check integer reference
.1286	c9 80		cmp #$80			cmp 	#$80
.1288	d0 3e		bne $12c8			bne 	_ALSyntax
.128a	a5 98		lda $98				lda 	esInt0 						; copy that reference address to temp0
.128c	85 2a		sta $2a				sta 	temp0
.128e	a5 a0		lda $a0				lda 	esInt1
.1290	85 2b		sta $2b				sta 	temp0+1
.1292	98		tya				tya
.1293	48		pha				pha
.1294	ad 38 0a	lda $0a38			lda 	SingleLetterVar+("O"-"A")*4	; are we in Pass 2
.1297	4a		lsr a				lsr 	a
.1298	90 11		bcc $12ab			bcc 	_ALWrite
.129a	a0 00		ldy #$00			ldy 	#0
.129c	ad 3c 0a	lda $0a3c			lda 	SingleLetterVar+("P"-"A")*4 ; compare the value in P to the variable
.129f	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.12a1	d0 20		bne $12c3			bne 	_ALChanged
.12a3	c8		iny				iny
.12a4	ad 3d 0a	lda $0a3d			lda 	SingleLetterVar+("P"-"A")*4+1
.12a7	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.12a9	d0 18		bne $12c3			bne 	_ALChanged
.12ab					_ALWrite:
.12ab	a0 00		ldy #$00			ldy 	#0
.12ad	ad 3c 0a	lda $0a3c			lda 	SingleLetterVar+("P"-"A")*4 ; copy the value in P into the variable
.12b0	91 2a		sta ($2a),y			sta 	(temp0),y
.12b2	ad 3d 0a	lda $0a3d			lda 	SingleLetterVar+("P"-"A")*4+1
.12b5	c8		iny				iny
.12b6	91 2a		sta ($2a),y			sta 	(temp0),y
.12b8	a9 00		lda #$00			lda 	#0
.12ba	c8		iny				iny
.12bb	91 2a		sta ($2a),y			sta 	(temp0),y
.12bd	c8		iny				iny
.12be	91 2a		sta ($2a),y			sta 	(temp0),y
.12c0	68		pla				pla
.12c1	a8		tay				tay
.12c2	60		rts				rts
.12c3					_ALChanged:
.12c3	a2 26		ldx #$26			ldx 	#ErrorID_Label
.12c5	20 18 15	jsr $1518		jsr	errorHandler
.12c8					_ALSyntax:
.12c8	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.12ca	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: assembler/assembler.asm


;******  Processing file: assembler/subgroup.asm

.12cd					AssembleGroup1:
.12cd	ad f3 0a	lda $0af3			lda 	asmToken 					; firstly, we throw out STA immediate
.12d0	c9 98		cmp #$98			cmp 	#TKW_STA
.12d2	d0 07		bne $12db			bne 	_AG1NotStoreImm
.12d4	ad f4 0a	lda $0af4			lda 	asmMode
.12d7	c9 00		cmp #$00			cmp 	#AMD_IMM
.12d9	f0 2c		beq $1307			beq 	AG1ModeError
.12db					_AG1NotStoreImm:
.12db	ae f4 0a	ldx $0af4			ldx 	asmMode						; get mode into X.
.12de	bd 0c 13	lda $130c,x			lda		AMDOperandSize,X 			; get the size of the operand and push on stack
.12e1	48		pha				pha
.12e2	f0 23		beq $1307			beq 	AG1ModeError 				; if the size is zero, the mode must be Accumulator
.12e4	e0 00		cpx #$00			cpx 	#0 							; if the mode is zero, e.g. immediate
.12e6	d0 02		bne $12ea			bne 	_AG1NotImmediate
.12e8	a2 02		ldx #$02			ldx 	#2 							; then we use offset 2 here. This is how the 6502
.12ea					_AG1NotImmediate:
.12ea	e0 0d		cpx #$0d			cpx 	#AMD_ZEROINDX 				; (zero,x) uses slot 0.
.12ec	d0 02		bne $12f0			bne 	_AG1NotZX
.12ee	a2 00		ldx #$00			ldx 	#0
.12f0					_AG1NotZX:
.12f0	68		pla				pla 								; restore length
.12f1	e0 09		cpx #$09			cpx 	#9 							; anything > 8 fails.
.12f3	b0 10		bcs $1305			bcs 	AG1Fail
.12f5					AG1ReturnValue:
.12f5	85 32		sta $32				sta 	tempShort 					; save size of operand
.12f7	18		clc				clc
.12f8	bd 1a 13	lda $131a,x			lda 	AMDOffsetFromBase,X 		; get the offset for the address mode.
.12fb	6d f5 0a	adc $0af5			adc 	asmBaseOpcode 				; add the base opcode.
.12fe	a6 32		ldx $32				ldx 	tempShort 					; length in X
.1300	20 10 11	jsr $1110			jsr 	AsmWriteInstruction 		; output instruction.
.1303	38		sec				sec
.1304	60		rts				rts
.1305					AG1Fail:
.1305	18		clc				clc
.1306	60		rts				rts
.1307					AG1ModeError:
.1307	a2 24		ldx #$24			ldx 	#ErrorID_Assembler
.1309	20 18 15	jsr $1518		jsr	errorHandler
.130c					AMDOperandSize:
>130c	01 01 00 02					.byte 	1,1,0,2
>1310	01 01 02 02					.byte 	1,1,2,2
>1314	01 01 02 02					.byte 	1,1,2,2
>1318	01 01						.byte 	1,1
.131a					AMDOffsetFromBase:
>131a	00 04 08 0c					.byte 	0,4,8,12
>131e	10 14 18 1c					.byte	16,20,24,28
>1322	11 00 00 00					.byte 	17,0,0,0
>1326	00 00						.byte 	0,0
.1328					AssembleGroup2:
.1328	ad f4 0a	lda $0af4			lda 	asmMode 					; get the mode; if >= 8 cannot be a legit group 2
.132b	c9 08		cmp #$08			cmp 	#8
.132d	b0 18		bcs $1347			bcs 	_AG2Fail
.132f	85 2a		sta $2a				sta 	temp0 						; save in temp9
.1331	ae f3 0a	ldx $0af3			ldx 	asmToken					; get token in X, then get the availability flags for it
.1334	bd aa 11	lda $11aa,x			lda 	Group2OpcodeAvailability-TKA_GROUP2,x
.1337					_AG2Shift:
.1337	4a		lsr a				lsr 	a
.1338	c6 2a		dec $2a				dec 	temp0
.133a	10 fb		bpl $1337			bpl 	_AG2Shift
.133c	90 09		bcc $1347			bcc 	_AG2Fail 					; cannot do that instruction w/that opcode.
.133e	ae f4 0a	ldx $0af4			ldx  	asmMode 					; mode in X
.1341	bd 0c 13	lda $130c,x			lda		AMDOperandSize,X 			; get the size of the operand in A
.1344	4c f5 12	jmp $12f5			jmp 	AG1ReturnValue 				; and use that with Group 1's exit code
.1347					_AG2Fail:
.1347	18		clc				clc
.1348	60		rts				rts
.1349					AssembleGroup3:
.1349	ad 38 0a	lda $0a38			lda 	SingleLetterVar+("O"-"A")*4	; check bit 0 (pass) of O
.134c	4a		lsr a				lsr 	a
.134d	a9 00		lda #$00			lda 	#0 							; if clear, e.g. pass 1, use default zero.
.134f	90 21		bcc $1372			bcc 	_AG3Default
.1351	38		sec				sec	 								; calculate branch offset
.1352	a5 98		lda $98				lda		esInt0
.1354	ed 3c 0a	sbc $0a3c			sbc 	SingleLetterVar+("P"-"A")*4
.1357	aa		tax				tax
.1358	a5 a0		lda $a0				lda		esInt1
.135a	ed 3d 0a	sbc $0a3d			sbc 	SingleLetterVar+("P"-"A")*4+1
.135d	85 a0		sta $a0				sta 	esInt1
.135f	8a		txa				txa 								; add 126, now 128 too many.
.1360	18		clc				clc 								; we can use this to check the range
.1361	69 7e		adc #$7e			adc 	#126
.1363	85 98		sta $98				sta 	esInt0
.1365	90 02		bcc $1369			bcc 	_AG3NoCarry
.1367	e6 a0		inc $a0				inc 	esInt1
.1369					_AG3NoCarry:
.1369	a5 a0		lda $a0				lda 	esInt1 						; check in range.
.136b	d0 0b		bne $1378			bne 	_AG3Range
.136d	a5 98		lda $98				lda 	esInt0 						; fix up branch distance
.136f	38		sec				sec
.1370	e9 80		sbc #$80			sbc 	#128
.1372					_AG3Default:
.1372	85 98		sta $98				sta 	esInt0
.1374					_AG3ExitOk:
.1374	a2 01		ldx #$01			ldx 	#1 							; one opcode, use AG4 Code
.1376	d0 07		bne $137f			bne 	AG4Write
.1378					_AG3Range:
.1378	a2 25		ldx #$25			ldx 	#ErrorID_Branch
.137a	20 18 15	jsr $1518		jsr	errorHandler
.137d					AssembleGroup4:
.137d	a2 00		ldx #$00			ldx 	#0 							; no parameters in the opcode.
.137f					AG4Write:
.137f	ad f5 0a	lda $0af5			lda 	asmBaseOpcode				; the opcode is the opcode base.
.1382	20 10 11	jsr $1110			jsr 	AsmWriteInstruction 		; output instruction.
.1385	38		sec				sec
.1386	60		rts				rts
.1387					AssembleSpecialCase:
.1387	a2 00		ldx #$00			ldx 	#0
.1389					_ASCScan:
.1389	bd 58 12	lda $1258,x			lda 	AssemblerSpecialCases,x 	; scan token and mode for match
.138c	cd f3 0a	cmp $0af3			cmp 	asmToken
.138f	d0 08		bne $1399			bne 	_ASCNext
.1391	bd 59 12	lda $1259,x			lda 	AssemblerSpecialCases+1,x
.1394	cd f4 0a	cmp $0af4			cmp 	asmMode
.1397	f0 0a		beq $13a3			beq 	_ASCFound
.1399					_ASCNext:
.1399	e8		inx				inx									; next entry
.139a	e8		inx				inx
.139b	e8		inx				inx
.139c	bd 58 12	lda $1258,x			lda 	AssemblerSpecialCases,x 	; until table ends
.139f	d0 e8		bne $1389			bne 	_ASCScan
.13a1	18		clc				clc
.13a2	60		rts				rts
.13a3					_ASCFound:
.13a3	bd 5a 12	lda $125a,x			lda 	AssemblerSpecialCases+2,x 	; get the new opcode.
.13a6	48		pha				pha
.13a7	ae f4 0a	ldx $0af4			ldx  	asmMode 					; mode in X
.13aa	bd 0c 13	lda $130c,x			lda		AMDOperandSize,X 			; get the size of the operand in X
.13ad	aa		tax				tax
.13ae	68		pla				pla 								; opcode back
.13af	20 10 11	jsr $1110			jsr 	AsmWriteInstruction 		; output instruction.
.13b2	38		sec				sec
.13b3	60		rts				rts

;******  Return to file: assembler/assembler.asm

.13b4					assemblerHandler:
.13b4	7c b7 13	jmp ($13b7,x)			jmp 	(assemblerVectors,x)
.13b7					assemblerVectors:
>13b7	bd 13					.word _DummyControlHandler ; index 0
>13b9	a5 11					.word AssembleOneInstruction ; index 2
>13bb	77 12					.word AssembleLabel        ; index 4
.13bd					_DummyControlHandler:
.13bd	60		rts			rts

;******  Return to file: basic.asm

.13be					section_end_assembler:
.13be					section_start_device:

;******  Processing file: device/device.asm


;******  Processing file: device/option_x16/x16break.asm

.13be					X16Break:
.13be	20 e1 ff	jsr $ffe1			jsr 	$FFE1
.13c1	f0 01		beq $13c4			beq 	_IsBreak
.13c3	60		rts				rts
.13c4					_IsBreak:
.13c4	a2 21		ldx #$21			ldx 	#ErrorID_Break
.13c6	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: device/device.asm


;******  Processing file: device/option_x16/x16file.asm

.13c9					ExternSave:
.13c9	98		tya				tya
.13ca	48		pha				pha
.13cb	20 19 14	jsr $1419			jsr 	ExternGetLength 			; get length of file into A name YX
.13ce	20 bd ff	jsr $ffbd			jsr 	$FFBD 						; set name
.13d1	a9 01		lda #$01			lda 	#1
.13d3	a2 08		ldx #$08			ldx 	#8	 						; device #8
.13d5	a0 00		ldy #$00			ldy 	#0
.13d7	20 ba ff	jsr $ffba			jsr 	$FFBA 						; set LFS
.13da	a5 99		lda $99				lda 	esInt0+1 					; copy start of save address to temp0
.13dc	85 2a		sta $2a				sta 	temp0
.13de	a5 a1		lda $a1				lda 	esInt1+1
.13e0	85 2b		sta $2b				sta 	temp0+1
.13e2	a6 9a		ldx $9a				ldx 	esInt0+2 					; end address
.13e4	a4 a2		ldy $a2				ldy 	esInt1+2
.13e6	a9 2a		lda #$2a			lda 	#temp0 						; ref to start address
.13e8	20 d8 ff	jsr $ffd8			jsr 	$FFD8 						; save
.13eb	b0 03		bcs $13f0			bcs 	_ESSave
.13ed	68		pla				pla
.13ee	a8		tay				tay
.13ef	60		rts				rts
.13f0					_ESSave:
.13f0	a2 1f		ldx #$1f			ldx 	#ErrorID_Save
.13f2	20 18 15	jsr $1518		jsr	errorHandler
.13f5					ExternLoad:
.13f5	98		tya				tya
.13f6	48		pha				pha
.13f7	20 19 14	jsr $1419			jsr 	ExternGetLength 			; get length of file into A name YX
.13fa	20 bd ff	jsr $ffbd			jsr 	$FFBD 						; set name
.13fd	a9 01		lda #$01			lda 	#1
.13ff	a2 08		ldx #$08			ldx 	#8	 						; device #8
.1401	a0 00		ldy #$00			ldy 	#0
.1403	20 ba ff	jsr $ffba			jsr 	$FFBA 						; set LFS
.1406	a6 99		ldx $99				ldx 	esInt0+1 					; load address
.1408	a4 a1		ldy $a1				ldy 	esInt1+1
.140a	a9 00		lda #$00			lda 	#0 							; load command
.140c	20 d5 ff	jsr $ffd5			jsr 	$FFD5
.140f	b0 03		bcs $1414			bcs 	_ESLoad
.1411	68		pla				pla
.1412	a8		tay				tay
.1413	60		rts				rts
.1414					_ESLoad:
.1414	a2 20		ldx #$20			ldx 	#ErrorID_Load
.1416	20 18 15	jsr $1518		jsr	errorHandler
.1419					ExternGetLength:
.1419	a5 98		lda $98				lda 	esInt0 						; length into A.
.141b	85 2a		sta $2a				sta 	temp0
.141d	a5 a0		lda $a0				lda 	esInt1
.141f	85 2b		sta $2b				sta 	temp0+1
.1421	a0 00		ldy #$00			ldy 	#0
.1423	b1 2a		lda ($2a),y			lda 	(temp0),y
.1425	a6 98		ldx $98				ldx 	esInt0 						; name into YX
.1427	a4 a0		ldy $a0				ldy 	esInt1
.1429	e8		inx				inx 								; advance over the length pointer.
.142a	d0 01		bne $142d			bne 	_ESNoCarry
.142c	c8		iny				iny
.142d					_ESNoCarry:
.142d	60		rts				rts

;******  Return to file: device/device.asm


;******  Processing file: device/option_x16/x16io.asm

=240					MaxLineInputSize = 240
.0af6					bufferCount:
>0af6							.fill 	0
.0af6					bufferStorage:
>0af6							.fill 	MaxLineInputSize
.142e					IOControlHandler:
.142e	c9 00		cmp #$00			cmp 	#0
.1430	d0 12		bne $1444			bne		_CHExit
.1432	a9 0f		lda #$0f			lda 	#15 						; switch to upper/lower case mode
.1434	20 5d 14	jsr $145d			jsr 	IOPrintChar
.1437	a9 02		lda #$02			lda 	#2 							; green on black and clear screen
.1439	20 89 14	jsr $1489			jsr 	IOInk
.143c	a9 00		lda #$00			lda 	#0
.143e	20 9d 14	jsr $149d			jsr 	IOPaper
.1441	20 45 14	jsr $1445			jsr 	IOClearScreen
.1444					_CHExit:
.1444	60		rts				rts
.1445					IOClearScreen:
.1445	48		pha				pha
.1446	a9 93		lda #$93			lda	 	#147 						; char code $93 clears screen
.1448	20 5d 14	jsr $145d			jsr 	IOPrintChar
.144b	68		pla				pla
.144c	60		rts				rts
.144d					IONewLine:
.144d	48		pha				pha
.144e	a9 0d		lda #$0d			lda 	#13
.1450	20 5d 14	jsr $145d			jsr 	IOPrintChar
.1453	68		pla				pla
.1454	60		rts				rts
.1455					IOTab:
.1455	48		pha				pha
.1456	a9 20		lda #$20			lda 	#32
.1458	20 5d 14	jsr $145d			jsr 	IOPrintChar
.145b	68		pla				pla
.145c	60		rts				rts
.145d					IOPrintAscii:
.145d					IOPrintChar:
.145d	aa		tax				tax 								; save in X so we can save Y
.145e	5a		phy				phy
.145f	8a		txa				txa
.1460	c9 08		cmp #$08			cmp 	#8 							; make BS (8) onto CHR$(14) which is the
.1462	d0 02		bne $1466			bne 	_IOPCNotBS 					; Commodore/X16 backspace code.
.1464	a9 14		lda #$14			lda 	#$14
.1466					_IOPCNotBS:
.1466	20 d2 ff	jsr $ffd2			jsr 	$FFD2 						; CBM OS Call.
.1469	7a		ply				ply
.146a	60		rts				rts
.146b					IOInkey:
.146b	98		tya				tya
.146c	48		pha				pha
.146d	20 e4 ff	jsr $ffe4			jsr 	$FFE4
.1470	85 32		sta $32				sta 	tempShort
.1472	68		pla				pla
.1473	a8		tay				tay
.1474	a5 32		lda $32				lda 	tempShort					; no key pressed.
.1476	f0 10		beq $1488			beq 	_IOIExit
.1478	c9 0d		cmp #$0d			cmp 	#13 						; allow CR (13)
.147a	f0 0c		beq $1488			beq 	_IOIExit
.147c	c9 14		cmp #$14			cmp 	#$14 						; backspace code ($14) returns 8.
.147e	f0 06		beq $1486			beq 	_IOIBackspace
.1480	c9 20		cmp #$20			cmp 	#32 						; no other control allowed.
.1482	90 e7		bcc $146b			bcc 	IOInkey
.1484	b0 02		bcs $1488			bcs 	_IOIExit
.1486					_IOIBackspace:
.1486	a9 08		lda #$08			lda 	#8 							; return chr(8)
.1488					_IOIExit:
.1488	60		rts				rts
.1489					IOInk:
.1489	48		pha				pha
.148a	29 07		and #$07			and 	#7 							; 8 primaries
.148c	aa		tax				tax
.148d	bd 95 14	lda $1495,x			lda 	_IOColourTable,x 			; look up CBM code and print it.
.1490	20 5d 14	jsr $145d			jsr 	IOPrintChar
.1493	68		pla				pla
.1494	60		rts				rts
.1495					_IOColourTable:
>1495	90						.byte 	$90 					; 0 Black
>1496	96						.byte 	$96 					; 1 Red
>1497	1e						.byte 	$1E 					; 2 Green
>1498	9e						.byte 	$9E 					; 3 Yellow
>1499	9a						.byte 	$9A 					; 4 Blue
>149a	9c						.byte 	$9C 					; 5 Magenta
>149b	9f						.byte 	$9F 					; 6 Cyan
>149c	05						.byte 	$05 					; 7 White
.149d					IOPaper:
.149d	48		pha				pha
.149e	48		pha				pha
.149f	a9 01		lda #$01			lda 	#1 						; 1 swaps fgr/bgr, so we swap them, set fgr
.14a1	20 5d 14	jsr $145d			jsr 	IOPrintChar 			; and then swap them again.
.14a4	68		pla				pla
.14a5	20 89 14	jsr $1489			jsr 	IOInk
.14a8	a9 01		lda #$01			lda 	#1
.14aa	20 5d 14	jsr $145d			jsr 	IOPrintChar
.14ad	68		pla				pla
.14ae	60		rts				rts
.14af					IOLocate:
.14af	48		pha				pha
.14b0	a9 13		lda #$13			lda 	#$13 					; home cursor code
.14b2	20 5d 14	jsr $145d			jsr 	IOPrintChar
.14b5	a9 11		lda #$11			lda 	#$11 	 				; print Y x $11 (down)
.14b7	20 be 14	jsr $14be			jsr 	_IOLoc2
.14ba	68		pla				pla
.14bb	a8		tay				tay
.14bc	a9 1d		lda #$1d			lda 	#$1D 					; print Y x $1D (right)
.14be					_IOLoc2:
.14be	c0 00		cpy #$00			cpy 	#0
.14c0	f0 06		beq $14c8			beq 	_IOLocExit
.14c2	20 5d 14	jsr $145d			jsr 	IOPrintChar
.14c5	88		dey				dey
.14c6	d0 f6		bne $14be			bne 	_IOLoc2
.14c8					_IOLocExit:
.14c8	60		rts				rts
.14c9					IOInput:
.14c9	a9 00		lda #$00			lda 	#0
.14cb	8d f6 0a	sta $0af6			sta 	bufferCount
.14ce					_IOILoop:
.14ce	20 cf ff	jsr $ffcf			jsr 	$FFCF
.14d1	c9 0d		cmp #$0d			cmp 	#13
.14d3	f0 10		beq $14e5			beq 	_IOIExit
.14d5	ae f6 0a	ldx $0af6			ldx 	bufferCount
.14d8	e0 f0		cpx #$f0			cpx 	#MaxLineInputSize
.14da	f0 f2		beq $14ce			beq 	_IOILoop
.14dc	ee f6 0a	inc $0af6			inc 	bufferCount
.14df	9d f7 0a	sta $0af7,x			sta 	bufferStorage+1,x
.14e2	4c ce 14	jmp $14ce			jmp 	_IOILoop
.14e5					_IOIExit:
.14e5	a9 f6		lda #$f6			lda 	#(bufferCount) & $FF
.14e7	85 2a		sta $2a				sta 	temp0
.14e9	a9 0a		lda #$0a			lda 	#(bufferCount) >> 8
.14eb	85 2b		sta $2b				sta 	1+(temp0)
.14ed	60		rts				rts

;******  Return to file: device/device.asm


;******  Processing file: device/option_x16/x16timer.asm

.14ee					IOReadTimer:
.14ee	20 de ff	jsr $ffde			jsr 	$FFDE 						; reads timer into YXA so we want only YA
.14f1	48		pha				pha
.14f2	8a		txa				txa
.14f3	a8		tay				tay
.14f4	68		pla				pla
.14f5	60		rts				rts

;******  Return to file: device/device.asm

.14f6					deviceHandler:
.14f6	7c f9 14	jmp ($14f9,x)			jmp 	(deviceVectors,x)
.14f9					deviceVectors:
>14f9	2e 14					.word IOControlHandler     ; index 0
>14fb	be 13					.word X16Break             ; index 2
>14fd	45 14					.word IOClearScreen        ; index 4
>14ff	4d 14					.word IONewLine            ; index 6
>1501	89 14					.word IOInk                ; index 8
>1503	6b 14					.word IOInkey              ; index 10
>1505	c9 14					.word IOInput              ; index 12
>1507	f5 13					.word ExternLoad           ; index 14
>1509	af 14					.word IOLocate             ; index 16
>150b	9d 14					.word IOPaper              ; index 18
>150d	5d 14					.word IOPrintChar          ; index 20
>150f	5d 14					.word IOPrintAscii         ; index 22
>1511	c9 13					.word ExternSave           ; index 24
>1513	55 14					.word IOTab                ; index 26
>1515	ee 14					.word IOReadTimer          ; index 28
.1517					_DummyControlHandler:
.1517	60		rts			rts

;******  Return to file: basic.asm

.1518					section_end_device:
.1518					section_start_error:

;******  Processing file: error/error.asm


;******  Processing file: error/errorhandler.asm

.1518					ErrorHandler:
.1518	8a		txa				txa
.1519	48		pha				pha
.151a	a9 01		lda #$01			lda 	#1 							; red
.151c	a2 08		ldx #$08		ldx	#8
.151e	20 f6 14	jsr $14f6		jsr	deviceHandler
.1521	68		pla				pla
.1522	aa		tax				tax
.1523	a9 8e		lda #$8e			lda 	#(ErrorTextList) & $FF
.1525	85 2a		sta $2a				sta 	temp0
.1527	a9 15		lda #$15			lda 	#(ErrorTextList) >> 8
.1529	85 2b		sta $2b				sta 	1+(temp0)
.152b	ca		dex		_EHFind:dex									; errors start at 1
.152c	f0 10		beq $153e			beq 	_EHFound
.152e	a0 00		ldy #$00			ldy 	#0 							; goto next text message, add length + 1 to the pointer.
.1530	38		sec				sec
.1531	a5 2a		lda $2a				lda 	temp0
.1533	71 2a		adc ($2a),y			adc 	(temp0),y
.1535	85 2a		sta $2a				sta 	temp0
.1537	90 f2		bcc $152b			bcc 	_EHFind
.1539	e6 2b		inc $2b				inc 	temp0+1
.153b	4c 2b 15	jmp $152b			jmp 	_EHFind
.153e					_EHFound:
.153e	20 52 18	jsr $1852			jsr 	EHPrintAscii 				; print the string "temp0" now points to.
.1541	a0 00		ldy #$00			ldy 	#0 							; in a line, e.g. the offset to next is non zero.
.1543	b1 28		lda ($28),y			lda 	(codePtr),y
.1545	f0 39		beq $1580			beq 	_EHNoLine
.1547	a5 29		lda $29				lda 	codePtr+1 					; code running from the command line.
.1549	cd c9 0a	cmp $0ac9			cmp 	basePage+1
.154c	90 32		bcc $1580			bcc 	_EHNoLine
.154e	a9 8a		lda #$8a			lda 	#(EHAtMsg) & $FF
.1550	85 2a		sta $2a				sta 	temp0
.1552	a9 15		lda #$15			lda 	#(EHAtMsg) >> 8
.1554	85 2b		sta $2b				sta 	1+(temp0)
.1556	20 52 18	jsr $1852			jsr 	EHPrintAscii
.1559	a0 01		ldy #$01			ldy 	#1 							; set up line number in TOS
.155b	a2 00		ldx #$00			ldx 	#0
.155d	b1 28		lda ($28),y			lda 	(codePtr),y
.155f	95 98		sta $98,x			sta 	esInt0,x
.1561	c8		iny				iny
.1562	b1 28		lda ($28),y			lda 	(codePtr),y
.1564	95 a0		sta $a0,x			sta 	esInt1,x
.1566	a9 00		lda #$00			lda 	#0
.1568	95 a8		sta $a8,x			sta 	esInt2,x
.156a	95 b0		sta $b0,x			sta 	esInt3,x
.156c	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.156e	85 2a		sta $2a				sta 	temp0
.1570	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.1572	85 2b		sta $2b				sta 	1+(temp0)
.1574	a0 0a		ldy #$0a			ldy 	#10 						; in base 10.
.1576	a9 00		lda #$00			lda 	#0							; stack position zero.
.1578	a2 12		ldx #$12		ldx	#18
.157a	20 f1 3b	jsr $3bf1		jsr	mainHandler
.157d	20 52 18	jsr $1852			jsr 	EHPrintAscii
.1580					_EHNoLine:
.1580	a2 06		ldx #$06		ldx	#6
.1582	20 f6 14	jsr $14f6		jsr	deviceHandler
.1585	a2 04		ldx #$04		ldx	#4
.1587	20 53 25	jsr $2553		jsr	interactionHandler
.158a					EHAtMsg:
>158a	03 20 40 20					.text 	3," @ "

;******  Processing file: error/../generated/errortext.inc

.158e					ErrorTextList:
>158e	13 46 65 61 74 75 72 65			.text 19,"Feature not Present"
>1596	20 6e 6f 74 20 50 72 65 73 65 6e 74
>15a2	0c 53 79 6e 74 61 78 20			.text 12,"Syntax Error"
>15aa	45 72 72 6f 72
>15af	0f 4d 6f 64 75 6c 65 20			.text 15,"Module disabled"
>15b7	64 69 73 61 62 6c 65 64
>15bf	10 41 73 73 65 72 74 69			.text 16,"Assertion failed"
>15c7	6f 6e 20 66 61 69 6c 65 64
>15d0	0e 44 69 76 69 64 65 20			.text 14,"Divide By Zero"
>15d8	42 79 20 5a 65 72 6f
>15df	04 53 74 6f 70				.text 4,"Stop"
>15e4	0d 54 79 70 65 20 4d 69			.text 13,"Type Mismatch"
>15ec	73 6d 61 74 63 68
>15f2	0d 49 6c 6c 65 67 61 6c			.text 13,"Illegal Value"
>15fa	20 56 61 6c 75 65
>1600	15 4d 69 73 73 69 6e 67			.text 21,"Missing right bracket"
>1608	20 72 69 67 68 74 20 62 72 61 63 6b 65 74
>1616	0d 4d 69 73 73 69 6e 67			.text 13,"Missing comma"
>161e	20 63 6f 6d 6d 61
>1624	11 4d 69 73 73 69 6e 67			.text 17,"Missing reference"
>162c	20 72 65 66 65 72 65 6e 63 65
>1636	15 4c 69 6e 65 20 4e 75			.text 21,"Line Number not found"
>163e	6d 62 65 72 20 6e 6f 74 20 66 6f 75 6e 64
>164c	0f 53 74 72 69 6e 67 20			.text 15,"String too long"
>1654	74 6f 6f 20 6c 6f 6e 67
>165c	14 52 45 54 55 52 4e 20			.text 20,"RETURN without GOSUB"
>1664	77 69 74 68 6f 75 74 20 47 4f 53 55 42
>1671	14 55 4e 54 49 4c 20 77			.text 20,"UNTIL without REPEAT"
>1679	69 74 68 6f 75 74 20 52 45 50 45 41 54
>1686	10 4e 45 58 54 20 77 69			.text 16,"NEXT without FOR"
>168e	74 68 6f 75 74 20 46 4f 52
>1697	12 57 45 4e 44 20 77 69			.text 18,"WEND without WHILE"
>169f	74 68 6f 75 74 20 57 48 49 4c 45
>16aa	14 45 4e 44 50 52 4f 43			.text 20,"ENDPROC without PROC"
>16b2	20 77 69 74 68 6f 75 74 20 50 52 4f 43
>16bf	0e 42 61 64 20 4e 45 58			.text 14,"Bad NEXT index"
>16c7	54 20 69 6e 64 65 78
>16ce	17 53 74 72 75 63 74 75			.text 23,"Structures nested wrong"
>16d6	72 65 73 20 6e 65 73 74 65 64 20 77 72 6f 6e 67
>16e6	16 43 61 6e 6e 6f 74 20			.text 22,"Cannot create variable"
>16ee	63 72 65 61 74 65 20 76 61 72 69 61 62 6c 65
>16fd	19 52 65 74 75 72 6e 20			.text 25,"Return stack out of space"
>1705	73 74 61 63 6b 20 6f 75 74 20 6f 66 20 73 70 61
>1715	63 65
>1717	11 55 6e 6b 6e 6f 77 6e			.text 17,"Unknown Procedure"
>171f	20 50 72 6f 63 65 64 75 72 65
>1729	17 50 61 72 61 6d 65 74			.text 23,"Parameters do not match"
>1731	65 72 73 20 64 6f 20 6e 6f 74 20 6d 61 74 63 68
>1741	15 41 72 72 61 79 20 61			.text 21,"Array already defined"
>1749	6c 72 65 61 64 79 20 64 65 66 69 6e 65 64
>1757	12 44 49 4d 20 72 65 71			.text 18,"DIM requires array"
>175f	75 69 72 65 73 20 61 72 72 61 79
>176a	0f 42 61 64 20 61 72 72			.text 15,"Bad array index"
>1772	61 79 20 69 6e 64 65 78
>177a	1d 57 72 6f 6e 67 20 6e			.text 29,"Wrong number of array indices"
>1782	75 6d 62 65 72 20 6f 66 20 61 72 72 61 79 20 69
>1792	6e 64 69 63 65 73
>1798	0b 4f 75 74 20 6f 66 20			.text 11,"Out of data"
>17a0	64 61 74 61
>17a4	14 43 61 6e 6e 6f 74 20			.text 20,"Cannot tokenise line"
>17ac	74 6f 6b 65 6e 69 73 65 20 6c 69 6e 65
>17b9	0b 53 61 76 65 20 66 61			.text 11,"Save failed"
>17c1	69 6c 65 64
>17c5	0b 4c 6f 61 64 20 66 61			.text 11,"Load failed"
>17cd	69 6c 65 64
>17d1	05 42 72 65 61 6b			.text 5,"Break"
>17d7	0d 4f 75 74 20 6f 66 20			.text 13,"Out of memory"
>17df	6d 65 6d 6f 72 79
>17e5	16 45 78 70 72 65 73 73			.text 22,"Expression too complex"
>17ed	69 6f 6e 20 74 6f 6f 20 63 6f 6d 70 6c 65 78
>17fc	10 42 61 64 20 4f 70 65			.text 16,"Bad Operand/Mode"
>1804	72 61 6e 64 2f 4d 6f 64 65
>180d	13 42 72 61 6e 63 68 20			.text 19,"Branch out of range"
>1815	6f 75 74 20 6f 66 20 72 61 6e 67 65
>1821	13 4c 61 62 65 6c 20 63			.text 19,"Label changed value"
>1829	68 61 6e 67 65 64 20 76 61 6c 75 65
>1835	12 4e 6f 20 53 70 72 69			.text 18,"No Sprite Selected"
>183d	74 65 20 53 65 6c 65 63 74 65 64
>1848	08 48 61 72 64 77 61 72			.text 8,"Hardware"
>1850	65
>1851	00					.byte 0

;******  Return to file: error/errorhandler.asm

.1852					EHPrintAscii:
.1852	a0 00		ldy #$00			ldy 	#0
.1854	b1 2a		lda ($2a),y			lda 	(temp0),y
.1856	aa		tax				tax
.1857	f0 0f		beq $1868			beq 	_EHPExit
.1859					_EHPLoop:
.1859	c8		iny				iny
.185a	8a		txa				txa
.185b	48		pha				pha
.185c	b1 2a		lda ($2a),y			lda 	(temp0),y
.185e	a2 16		ldx #$16		ldx	#22
.1860	20 f6 14	jsr $14f6		jsr	deviceHandler
.1863	68		pla				pla
.1864	aa		tax				tax
.1865	ca		dex				dex
.1866	d0 f1		bne $1859			bne 	_EHPLoop
.1868					_EHPExit:
.1868	60		rts				rts

;******  Return to file: error/error.asm


;******  Return to file: basic.asm

.1869					section_end_error:
.1869					section_start_extension:

;******  Processing file: extension/extension.asm


;******  Processing file: extension/extensionhandler.asm

.1869					ExtensionHandler:
.1869	c9 fe		cmp #$fe			cmp 	#$FE 						; check for force mode 0
.186b	f0 16		beq $1883			beq 	_ExtensionForce
.186d	c9 ff		cmp #$ff			cmp 	#$FF						; A = $FF command, otherwise unary function stack level.
.186f	d0 08		bne $1879			bne 	_ExtensionUnary 			; is passed in A.
.1871	b1 28		lda ($28),y			lda 	(codePtr),y 				; so this is a command, using Group 2.
.1873	c8		iny				iny
.1874	0a		asl a				asl 	a
.1875	aa		tax				tax
.1876	7c 7a 18	jmp ($187a,x)			jmp 	(Group2Vectors-12,x)
.1879					_ExtensionUnary:
.1879	48		pha				pha 								; save stack pos in A
.187a	b1 28		lda ($28),y			lda 	(codePtr),y 				; get shifted token, double into X
.187c	c8		iny				iny
.187d	0a		asl a				asl 	a
.187e	aa		tax				tax
.187f	68		pla				pla 								; restore stack pos and call group3 command.
.1880	7c 94 18	jmp ($1894,x)			jmp 	(Group3Vectors-12,X)
.1883					_ExtensionForce:
.1883	4c d2 20	jmp $20d2			jmp 	ForceMode0

;******  Processing file: extension/../generated/tokenvectors2.inc

.1886					Group2Vectors:
>1886	00 22					.word	Command_VPoke            ; $86 vpoke
>1888	03 22					.word	Command_VDoke            ; $87 vdoke
>188a	d8 21					.word	Command_VLoad            ; $88 vload
>188c	e4 20					.word	CommandMode              ; $89 mode
>188e	a1 21					.word	CommandPalette           ; $8a palette
>1890	cf 1e					.word	CommandSprite            ; $8b sprite
>1892	f9 1c					.word	CommandClg               ; $8c clg
>1894	d1 1a					.word	Command_Rect             ; $8d rect
>1896	d9 1a					.word	Command_Frame            ; $8e frame
>1898	97 2f					.word	Unimplemented            ; $8f draw
>189a	97 2f					.word	Unimplemented            ; $90 text
>189c	be 1a					.word	Command_Plot             ; $91 plot
>189e	98 19					.word	Command_Line             ; $92 line

;******  Return to file: extension/extensionhandler.asm


;******  Processing file: extension/../generated/tokenvectors3.inc

.18a0					Group3Vectors:
>18a0	4c 22					.word	Command_VPeek            ; $86 vpeek(
>18a2	4f 22					.word	Command_VDeek            ; $87 vdeek(
>18a4	a2 20					.word	Sprite_GetX              ; $88 sprite.x(
>18a6	a5 20					.word	Sprite_GetY              ; $89 sprite.y(
>18a8	12 1e					.word	FunctionCollide          ; $8a hit(
>18aa	8a 1d					.word	Unary_JoyX               ; $8b joy.x(
>18ac	8d 1d					.word	Unary_JoyY               ; $8c joy.y(
>18ae	c8 1d					.word	Unary_JButton            ; $8d joy.b(
>18b0	5d 1d					.word	Unary_Clock              ; $8e clock(

;******  Return to file: extension/extensionhandler.asm

.18b2					XEvaluateInteger:
.18b2	8a		txa				txa
.18b3	a2 0a		ldx #$0a		ldx	#10
.18b5	20 f1 3b	jsr $3bf1		jsr	mainHandler
.18b8	aa		tax				tax
.18b9	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/graphics/general.asm

.0be6					gStartStorage:
.0be6					gCurrentXPos:
>0be6							.fill 	2 							; copying the coordinate here, and into x2, and the old
.0be8					gCurrentYPos:
>0be8							.fill 	2
.0bea					gX1:
>0bea							.fill 	2		 					; most recently used. x2,y2 are the most recently used.
.0bec					gY1:
>0bec							.fill 	2
.0bee					gX2:
>0bee							.fill 	2
.0bf0					gY2:
>0bf0							.fill 	2
.0bf2					gError:
>0bf2							.fill 	2
.0bf4					g2Error:
>0bf4							.fill 	2
.0bf6					gdx:
>0bf6							.fill 	2
.0bf8					gdy:
>0bf8							.fill 	2
.0bfa					gWordHandler:
>0bfa							.fill 	2
.0bfc					gEndStorage:
.18ba					GResetStorage:
.18ba	8a		txa				txa
.18bb	48		pha				pha
.18bc	a2 15		ldx #$15			ldx 	#gEndStorage-gStartStorage-1 ; fill all storage for gfx with 0
.18be	a9 00		lda #$00			lda 	#0
.18c0					_GRSLoop:
.18c0	9d e6 0b	sta $0be6,x			sta 	gStartStorage,x
.18c3	ca		dex				dex
.18c4	10 fa		bpl $18c0			bpl 	_GRSLoop
.18c6	68		pla				pla
.18c7	aa		tax				tax
.18c8	60		rts				rts
.18c9					GHandler:
.18c9	8e fb 0b	stx $0bfb			stx 	gWordHandler+1 				; save code that draws the actual line or whatever.
.18cc	8d fa 0b	sta $0bfa			sta 	gWordHandler
.18cf	88		dey				dey 								; predecrement
.18d0					_GHLoopNext:
.18d0	c8		iny				iny									; advance one character
.18d1					_GHLoop:
.18d1	b1 28		lda ($28),y			lda 	(codePtr),y 				; look at character.
.18d3	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; , go to next
.18d5	f0 f9		beq $18d0			beq 	_GHLoopNext
.18d7	c9 80		cmp #$80			cmp 	#TOK_EOL 					; end of line or : , exit
.18d9	f0 4c		beq $1927			beq 	_GHExit
.18db	c9 ca		cmp #$ca			cmp 	#TKW_COLON
.18dd	f0 48		beq $1927			beq 	_GHExit
.18df	c9 db		cmp #$db			cmp 	#TKW_AT 					; have we found AT or TO
.18e1	f0 33		beq $1916			beq 	_GHCallHandler 				; update post & call the handler
.18e3	c9 ce		cmp #$ce			cmp 	#TKW_TO
.18e5	f0 2f		beq $1916			beq 	_GHCallHandler
.18e7	c9 e6		cmp #$e6			cmp 	#TKW_FROM
.18e9	f0 10		beq $18fb			beq 	_GHCPairSkip
.18eb	a2 00		ldx #$00			ldx 	#0 							; now see if it matches a token modifier (INK,PAPER etc.)
.18ed					_GHCheckTokens:
.18ed	b1 28		lda ($28),y			lda 	(codePtr),y
.18ef	dd 28 19	cmp $1928,x			cmp 	_GHTokenTable,x
.18f2	f0 0e		beq $1902			beq 	_GHFoundToken
.18f4	e8		inx				inx
.18f5	bd 28 19	lda $1928,x			lda 	_GHTokenTable,x
.18f8	d0 f3		bne $18ed			bne 	_GHCheckTokens
.18fa	88		dey				dey
.18fb					_GHCPairSkip:
.18fb	c8		iny				iny
.18fc					_GHCPair:
.18fc	20 2e 19	jsr $192e			jsr 	GHMakeCurrent 				; should be a coordinate pair then.
.18ff	4c d1 18	jmp $18d1			jmp 	_GHLoop
.1902					_GHFoundToken:
.1902	c8		iny				iny 								; skip token (INK/PAPER etc.)
.1903	8a		txa				txa
.1904	48		pha				pha
.1905	a9 00		lda #$00			lda 	#0 							; evaluate byte
.1907	a2 0c		ldx #$0c		ldx	#12
.1909	20 f1 3b	jsr $3bf1		jsr	mainHandler
.190c	68		pla				pla
.190d	aa		tax				tax
.190e	a5 98		lda $98				lda 	esInt0 						; get evaluated value
.1910	9d 06 0c	sta $0c06,x			sta 	gModifiers,x 				; update the modifiers
.1913	4c d1 18	jmp $18d1			jmp 	_GHLoop 					; and loop back
.1916					_GHCallHandler:
.1916	c8		iny				iny 								; consume AT or TO.
.1917	20 2e 19	jsr $192e			jsr 	GHMakeCurrent 				; update the coordinates.
.191a	98		tya				tya
.191b	48		pha				pha
.191c	20 24 19	jsr $1924			jsr 	_GHCallHandlerCode 			; call the handler code
.191f	68		pla				pla
.1920	a8		tay				tay
.1921	4c d1 18	jmp $18d1			jmp 	_GHLoop 					; and loop round.
.1924					_GHCallHandlerCode:
.1924	6c fa 0b	jmp ($0bfa)			jmp 	(gWordHandler)
.1927					_GHExit:
.1927	60		rts				rts
.1928					_GHTokenTable:
>1928	e1 e2 d2 da dc					.byte 	TKW_INK,TKW_PAPER,TKW_DIM,TKW_IMAGE,TKW_FLIP
>192d	00						.byte 	0
.192e					GHMakeCurrent:
.192e	8a		txa				txa
.192f	48		pha				pha
.1930	a2 00		ldx #$00			ldx 	#0 							; do for 0 offset (X)
.1932	20 42 19	jsr $1942			jsr 	_GHMCDoIt
.1935	a2 02		ldx #$02		ldx	#2
.1937	20 f1 3b	jsr $3bf1		jsr	mainHandler
.193a	a2 02		ldx #$02			ldx 	#2 							; do for 2 offset (Y)
.193c	20 42 19	jsr $1942			jsr 	_GHMCDoIt
.193f	68		pla				pla
.1940	aa		tax				tax
.1941	60		rts				rts
.1942					_GHMCDoIt:
.1942	bd e6 0b	lda $0be6,x			lda 	gCurrentXPos,x 				; copy the current position to X,Y
.1945	9d ea 0b	sta $0bea,x			sta 	gX1,x
.1948	bd e7 0b	lda $0be7,x			lda 	gCurrentXPos+1,x
.194b	9d eb 0b	sta $0beb,x			sta 	gX1+1,x
.194e	8a		txa				txa
.194f	48		pha				pha
.1950	a9 00		lda #$00			lda 	#0 							; evaluate the parameter, now in esInt0,esInt1
.1952	a2 0a		ldx #$0a		ldx	#10
.1954	20 f1 3b	jsr $3bf1		jsr	mainHandler
.1957	68		pla				pla
.1958	aa		tax				tax
.1959	a5 98		lda $98				lda 	esInt0 						; check coordinate range
.195b	dd 0b 0c	cmp $0c0b,x			cmp 	gdXLimit,x
.195e	a5 a0		lda $a0				lda 	esInt1
.1960	fd 0c 0c	sbc $0c0c,x			sbc 	gdXLimit+1,x
.1963	b0 17		bcs $197c			bcs 	_GMHCRange
.1965	a5 a8		lda $a8				lda 	esInt2
.1967	05 b0		ora $b0				ora 	esInt3
.1969	d0 11		bne $197c			bne 	_GMHCRange
.196b	a5 98		lda $98				lda 	esInt0 						; copy into current and X2,Y2
.196d	9d e6 0b	sta $0be6,x			sta 	gCurrentXPos,x
.1970	9d ee 0b	sta $0bee,x			sta 	gX2,x
.1973	a5 a0		lda $a0				lda 	esInt1
.1975	9d e7 0b	sta $0be7,x			sta 	gCurrentXPos+1,x
.1978	9d ef 0b	sta $0bef,x			sta 	gX2+1,x
.197b	60		rts				rts
.197c					_GMHCRange:
.197c	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.197e	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: extension/extension.asm


;******  Processing file: extension/graphics/imagedraw.asm

.1981					TestImageAccess:
.1981	e0 ff		cpx #$ff			cpx 	#255 						; get information
.1983	f0 0c		beq $1991			beq 	_TIAGetInfo
.1985	8a		txa				txa 								; fake up a pattern using the X/Y coordinates.
.1986	4a		lsr a				lsr 	a
.1987	4a		lsr a				lsr 	a
.1988	85 32		sta $32				sta 	tempShort
.198a	98		tya				tya
.198b	4a		lsr a				lsr 	a
.198c	4a		lsr a				lsr 	a
.198d	18		clc				clc
.198e	65 32		adc $32				adc 	tempShort
.1990	60		rts				rts
.1991					_TIAGetInfo:
.1991	a9 01		lda #$01			lda 	#1 							; image (1) bitmap (0)
.1993	a2 10		ldx #$10			ldx 	#16 						; pixel width
.1995	a0 20		ldy #$20			ldy 	#32							; pixel height
.1997	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/graphics/line.asm

.0bfc					gdySign:
>0bfc							.fill 	1
.1998					Command_Line:
.1998	a9 a0		lda #$a0			lda 	#LineHandler & $FF
.199a	a2 19		ldx #$19			ldx 	#LineHandler >> 8
.199c	20 c9 18	jsr $18c9			jsr 	GHandler
.199f	60		rts				rts
.19a0					LineHandler:
.19a0	a2 00		ldx #$00			ldx 	#gX1-gX1 					; check if horizontal, vertical line
.19a2	a0 04		ldy #$04			ldy 	#gX2-gX1
.19a4	20 7d 1b	jsr $1b7d			jsr 	CompareCoordsEq
.19a7	f0 09		beq $19b2			beq 	_LHRectCode
.19a9	a2 02		ldx #$02			ldx 	#gY1-gX1
.19ab	a0 06		ldy #$06			ldy 	#gY2-gX1
.19ad	20 7d 1b	jsr $1b7d			jsr 	CompareCoordsEq
.19b0	d0 03		bne $19b5			bne 	_LHLineDrawer
.19b2					_LHRectCode:
.19b2	4c e5 1a	jmp $1ae5			jmp 	RectHandler
.19b5					_LHLineDrawer:
.19b5	a2 00		ldx #$00			ldx 	#gX1-gX1 					; check if X1 < X2 e.g. it is sloped to the right.
.19b7	a0 04		ldy #$04			ldy 	#gX2-gX1
.19b9	20 68 1b	jsr $1b68			jsr 	CompareCoords
.19bc	90 0a		bcc $19c8			bcc 	_LHNoSwap
.19be	20 b0 1b	jsr $1bb0			jsr 	GSwapCoords					; if so swap coords so X2 > X1, may be going up or down.
.19c1	a2 02		ldx #$02			ldx 	#gY1-gX1
.19c3	a0 06		ldy #$06			ldy 	#gY2-gX1
.19c5	20 b0 1b	jsr $1bb0			jsr 	GSwapCoords
.19c8					_LHNoSwap:
.19c8	20 f1 19	jsr $19f1			jsr 	BresenhamInitialise 		; initialise Bresenham constants
.19cb	a0 00		ldy #$00			ldy 	#gX1-gX1
.19cd	20 52 1b	jsr $1b52			jsr 	SetupXY 					; set up X1,Y1 to draw.
.19d0	b0 15		bcs $19e7			bcs 	_LHExit 					; line off screen.
.19d2					_LHDrawLoop:
.19d2	a2 00		ldx #$00			ldx 	#gX1-gX1 					; check if X1=X2 and Y1 = Y2
.19d4	a0 04		ldy #$04			ldy 	#gX2-gX1
.19d6	20 7d 1b	jsr $1b7d			jsr 	CompareCoordsEq
.19d9	d0 0d		bne $19e8			bne 	_LHNextPixel
.19db	a2 06		ldx #$06			ldx 	#gY2-gX1
.19dd	a0 06		ldy #$06			ldy 	#gY2-gX1
.19df	20 7d 1b	jsr $1b7d			jsr 	CompareCoordsEq
.19e2	d0 04		bne $19e8			bne 	_LHNextPixel
.19e4	20 6c 1c	jsr $1c6c			jsr 	gdPlotInk 					; plot the last pixel.
.19e7					_LHExit:
.19e7	60		rts				rts
.19e8					_LHNextPixel:
.19e8	20 6c 1c	jsr $1c6c			jsr 	gdPlotInk 					; plot the pixel.
.19eb	20 45 1a	jsr $1a45			jsr 	BresenhamIteration 			; do one bresenham iteration calculation
.19ee	4c d2 19	jmp $19d2			jmp  	_LHDrawLoop 				; and loop back if okay
.19f1					BresenhamInitialise:
.19f1	38		sec				sec
.19f2	ad ee 0b	lda $0bee			lda 	gX2
.19f5	ed ea 0b	sbc $0bea			sbc 	gX1
.19f8	8d f6 0b	sta $0bf6			sta 	gdX
.19fb	ad ef 0b	lda $0bef			lda 	gX2+1
.19fe	ed eb 0b	sbc $0beb			sbc 	gX1+1
.1a01	8d f7 0b	sta $0bf7			sta 	gdX+1
.1a04	38		sec				sec
.1a05	ad ec 0b	lda $0bec			lda 	gY1
.1a08	ed f0 0b	sbc $0bf0			sbc 	gY2
.1a0b	8d f8 0b	sta $0bf8			sta 	gdy
.1a0e	ad ed 0b	lda $0bed			lda 	gY1+1
.1a11	ed f1 0b	sbc $0bf1			sbc 	gY2+1
.1a14	8d f9 0b	sta $0bf9			sta 	gdy+1
.1a17	ad f9 0b	lda $0bf9			lda 	gdy+1 						; save sign of dy
.1a1a	8d fc 0b	sta $0bfc			sta 	gdysign
.1a1d	30 12		bmi $1a31			bmi 	_BINormal
.1a1f	38		sec				sec
.1a20	a9 00		lda #$00			lda 	#0
.1a22	ed f8 0b	sbc $0bf8			sbc 	gdy
.1a25	8d f8 0b	sta $0bf8			sta 	gdy
.1a28	a9 00		lda #$00			lda 	#0
.1a2a	ed f9 0b	sbc $0bf9			sbc 	gdy+1
.1a2d	8d f9 0b	sta $0bf9			sta 	gdy+1
.1a30	60		rts				rts
.1a31					_BINormal:
.1a31	18		clc				clc
.1a32	ad f6 0b	lda $0bf6			lda 	gdx
.1a35	6d f8 0b	adc $0bf8			adc 	gdy
.1a38	8d f2 0b	sta $0bf2			sta 	gError
.1a3b	ad f7 0b	lda $0bf7			lda 	gdx+1
.1a3e	6d f9 0b	adc $0bf9			adc 	gdy+1
.1a41	8d f3 0b	sta $0bf3			sta 	gError+1
.1a44	60		rts				rts
.1a45					BresenhamIteration:
.1a45	ad f2 0b	lda $0bf2			lda 	gError
.1a48	0a		asl a				asl 	a
.1a49	8d f4 0b	sta $0bf4			sta 	g2Error
.1a4c	ad f3 0b	lda $0bf3			lda 	gError+1
.1a4f	2a		rol a				rol 	a
.1a50	8d f5 0b	sta $0bf5			sta 	g2Error+1
.1a53	a2 0a		ldx #$0a			ldx 	#g2Error-gX1
.1a55	a0 0e		ldy #$0e			ldy 	#gdy-gX1
.1a57	20 75 1b	jsr $1b75			jsr 	CompareCoordsSigned
.1a5a	30 03		bmi $1a5f			bmi 	_BINoE2DY
.1a5c	20 6c 1a	jsr $1a6c			jsr 	BresenhamE2GEDY
.1a5f					_BINoE2DY:
.1a5f	a2 0c		ldx #$0c			ldx 	#gdx-gX1
.1a61	a0 0a		ldy #$0a			ldy 	#g2Error-gX1
.1a63	20 75 1b	jsr $1b75			jsr 	CompareCoordsSigned
.1a66	30 03		bmi $1a6b			bmi 	_BINoDXE2
.1a68	20 8b 1a	jsr $1a8b			jsr 	BresenhamDXGEE2
.1a6b					_BINoDXE2:
.1a6b	60		rts				rts
.1a6c					BresenhamE2GEDY:
.1a6c	18		clc				clc
.1a6d	ad f2 0b	lda $0bf2			lda 	gError
.1a70	6d f8 0b	adc $0bf8			adc 	gdy
.1a73	8d f2 0b	sta $0bf2			sta 	gError
.1a76	ad f3 0b	lda $0bf3			lda 	gError+1
.1a79	6d f9 0b	adc $0bf9			adc 	gdy+1
.1a7c	8d f3 0b	sta $0bf3			sta 	gError+1
.1a7f	ee ea 0b	inc $0bea			inc 	gX1
.1a82	d0 03		bne $1a87			bne 	_BE2Skip
.1a84	ee eb 0b	inc $0beb			inc 	gX1+1
.1a87					_BE2Skip:
.1a87	20 cd 1b	jsr $1bcd			jsr 	gdMvRight
.1a8a	60		rts				rts
.1a8b					BresenhamDXGEE2:
.1a8b	18		clc				clc
.1a8c	ad f2 0b	lda $0bf2			lda 	gError
.1a8f	6d f6 0b	adc $0bf6			adc 	gdx
.1a92	8d f2 0b	sta $0bf2			sta 	gError
.1a95	ad f3 0b	lda $0bf3			lda 	gError+1
.1a98	6d f7 0b	adc $0bf7			adc 	gdx+1
.1a9b	8d f3 0b	sta $0bf3			sta 	gError+1
.1a9e	ad fc 0b	lda $0bfc			lda 	gdySign
.1aa1	10 0c		bpl $1aaf			bpl 	_BEDXInvertY
.1aa3	ee ec 0b	inc $0bec			inc 	gY1
.1aa6	d0 03		bne $1aab			bne 	_BEDXSkip
.1aa8	ee ed 0b	inc $0bed			inc 	gY1+1
.1aab					_BEDXSkip:
.1aab	20 08 1c	jsr $1c08			jsr 	gdMvDown
.1aae	60		rts				rts
.1aaf					_BEDXInvertY:
.1aaf	ad ec 0b	lda $0bec			lda 	gY1
.1ab2	d0 03		bne $1ab7			bne 	_BEDXSkip2
.1ab4	ce ed 0b	dec $0bed			dec 	gY1+1
.1ab7					_BEDXSkip2:
.1ab7	ce ec 0b	dec $0bec			dec 	gY1
.1aba	20 e3 1b	jsr $1be3			jsr 	gdMvUp
.1abd	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/graphics/plot.asm

.1abe					Command_Plot:
.1abe	a9 c6		lda #$c6			lda 	#PlotHandler & $FF
.1ac0	a2 1a		ldx #$1a			ldx 	#PlotHandler >> 8
.1ac2	20 c9 18	jsr $18c9			jsr 	GHandler
.1ac5	60		rts				rts
.1ac6					PlotHandler:
.1ac6	a0 04		ldy #$04			ldy 	#gX2-gX1
.1ac8	20 52 1b	jsr $1b52			jsr 	SetupXY 					; set up X1,Y1 to draw.
.1acb	b0 03		bcs $1ad0			bcs 	_PHExit 					; off screen, return with CS.
.1acd	20 6c 1c	jsr $1c6c			jsr 	gdPlotInk 					; pixel in Ink.
.1ad0	60		rts		_PHExit:rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/graphics/rectframe.asm

.0bfd					frameFlag:
>0bfd							.fill 	1
.1ad1					Command_Rect:
.1ad1	a9 e5		lda #$e5			lda 	#RectHandler & $FF
.1ad3	a2 1a		ldx #$1a			ldx 	#RectHandler >> 8
.1ad5	20 c9 18	jsr $18c9			jsr 	GHandler
.1ad8	60		rts				rts
.1ad9					Command_Frame:
.1ad9	a9 e1		lda #$e1			lda 	#FrameHandler & $FF
.1adb	a2 1a		ldx #$1a			ldx 	#FrameHandler >> 8
.1add	20 c9 18	jsr $18c9			jsr 	GHandler
.1ae0	60		rts				rts
.1ae1					FrameHandler:
.1ae1	a9 01		lda #$01			lda 	#1
.1ae3	d0 02		bne $1ae7			bne 	RectHandler+2
.1ae5					RectHandler:
.1ae5	a9 00		lda #$00			lda 	#0
.1ae7	8d fd 0b	sta $0bfd			sta 	frameFlag
.1aea	20 8c 1b	jsr $1b8c			jsr 	BoxSort 					; sort so topleft/bottom right
.1aed	20 16 1b	jsr $1b16			jsr 	DrawBoxPart 				; solid first line
.1af0					_FHLoop:
.1af0	a2 02		ldx #$02			ldx 	#gY1-gX1 					; check Y1 = Y2
.1af2	a0 06		ldy #$06			ldy 	#gY2-gX1
.1af4	20 68 1b	jsr $1b68			jsr 	CompareCoords
.1af7	b0 19		bcs $1b12			bcs 	_FHLastLine 				; Y1 >= Y2 then end.
.1af9	ad fd 0b	lda $0bfd			lda 	frameFlag 					; identify solid or frame ?
.1afc	f0 06		beq $1b04			beq 	_FHIsSolidRect
.1afe	20 2f 1b	jsr $1b2f			jsr 	DrawBoxEnds
.1b01	4c 07 1b	jmp $1b07			jmp 	_FHNext
.1b04					_FHIsSolidRect:
.1b04	20 16 1b	jsr $1b16			jsr 	DrawBoxPart
.1b07					_FHNext:
.1b07	ee ec 0b	inc $0bec			inc 	gY1 						; bump Y1 and loop back.
.1b0a	d0 e4		bne $1af0			bne 	_FHLoop
.1b0c	ee ed 0b	inc $0bed			inc 	gY1+1
.1b0f	4c f0 1a	jmp $1af0			jmp 	_FHLoop
.1b12					_FHLastLine:
.1b12	20 16 1b	jsr $1b16			jsr 	DrawBoxPart 				; solid last line whatever
.1b15					_FHExit:
.1b15	60		rts				rts
.1b16					DrawBoxPart:
.1b16	a0 00		ldy #$00			ldy 	#gX1-gX1
.1b18	20 52 1b	jsr $1b52			jsr 	SetupXY 					; set up X1,Y1 to draw.
.1b1b	38		sec				sec 								; calculate line length => temp0
.1b1c	ad ee 0b	lda $0bee			lda 	gX2
.1b1f	ed ea 0b	sbc $0bea			sbc 	gX1
.1b22	48		pha				pha
.1b23	ad ef 0b	lda $0bef			lda 	gX2+1
.1b26	ed eb 0b	sbc $0beb			sbc 	gx1+1
.1b29	aa		tax				tax
.1b2a	68		pla				pla 								; line length in XA.
.1b2b	20 47 1b	jsr $1b47			jsr 	DrawHorizontalLine
.1b2e	60		rts				rts
.1b2f					DrawBoxEnds:
.1b2f	a0 00		ldy #$00			ldy 	#gX1-gX1
.1b31	20 52 1b	jsr $1b52			jsr 	SetupXY 					; set up X1,Y1 to draw.
.1b34	20 6c 1c	jsr $1c6c			jsr 	gdPlotInk 					; LH end.
.1b37	ad ee 0b	lda $0bee			lda 	gX2 						; set position to X2,Y1
.1b3a	ae ef 0b	ldx $0bef			ldx 	gX2+1
.1b3d	20 34 1d	jsr $1d34			jsr 	gdSetX
.1b40	20 2a 1c	jsr $1c2a			jsr		gdSetDrawPosition 			; update position.
.1b43	20 6c 1c	jsr $1c6c			jsr 	gdPlotInk 					; RH end.
.1b46	60		rts				rts
.1b47					DrawHorizontalLine:
.1b47	86 32		stx $32				stx 	tempShort
.1b49	aa		tax				tax
.1b4a	a4 32		ldy $32				ldy 	tempShort
.1b4c	ad 06 0c	lda $0c06			lda 	gdInk
.1b4f	4c 42 1d	jmp $1d42			jmp 	gdOptHorizontalWriter

;******  Return to file: extension/extension.asm


;******  Processing file: extension/graphics/utils.asm

.1b52					SetupXY:
.1b52	b9 ea 0b	lda $0bea,y			lda 	gX1,y
.1b55	be eb 0b	ldx $0beb,y			ldx 	gX1+1,y
.1b58	20 34 1d	jsr $1d34			jsr 	gdSetX
.1b5b	b9 ec 0b	lda $0bec,y			lda 	gY1,y
.1b5e	be ed 0b	ldx $0bed,y			ldx 	gY1+1,y
.1b61	20 3b 1d	jsr $1d3b			jsr 	gdSetY
.1b64	20 2a 1c	jsr $1c2a			jsr 	gdSetDrawPosition
.1b67	60		rts				rts
.1b68					CompareCoords:
.1b68	bd ea 0b	lda $0bea,x			lda 	gX1,x
.1b6b	d9 ea 0b	cmp $0bea,y			cmp 	gX1,y
.1b6e	bd eb 0b	lda $0beb,x			lda 	gX1+1,x
.1b71	f9 eb 0b	sbc $0beb,y			sbc 	gX1+1,y
.1b74	60		rts				rts
.1b75					CompareCoordsSigned:
.1b75	20 68 1b	jsr $1b68			jsr 	CompareCoords
.1b78	50 02		bvc $1b7c			bvc 	_CCSExit
.1b7a	49 80		eor #$80			eor 	#$80
.1b7c					_CCSExit:
.1b7c	60		rts				rts
.1b7d					CompareCoordsEq:
.1b7d	bd ea 0b	lda $0bea,x			lda 	gX1,x
.1b80	d9 ea 0b	cmp $0bea,y			cmp 	gX1,y
.1b83	d0 06		bne $1b8b			bne 	_CCEExit
.1b85	bd eb 0b	lda $0beb,x			lda 	gX1+1,x
.1b88	d9 eb 0b	cmp $0beb,y			cmp 	gX1+1,y
.1b8b					_CCEExit:
.1b8b	60		rts				rts
.1b8c					BoxSort:
.1b8c	a2 00		ldx #$00			ldx 	#gx1-gx1
.1b8e	a0 04		ldy #$04			ldy 	#gx2-gx1
.1b90	20 a1 1b	jsr $1ba1			jsr 	GCompareCoords
.1b93	20 ae 1b	jsr $1bae			jsr 	GSortMinMaxCoords
.1b96	a2 02		ldx #$02			ldx 	#gy1-gx1
.1b98	a0 06		ldy #$06			ldy 	#gy2-gx1
.1b9a	20 a1 1b	jsr $1ba1			jsr 	GCompareCoords
.1b9d	20 ae 1b	jsr $1bae			jsr 	GSortMinMaxCoords
.1ba0	60		rts				rts
.1ba1					GCompareCoords:
.1ba1	bd ea 0b	lda $0bea,x			lda 	gx1,x
.1ba4	d9 ea 0b	cmp $0bea,y			cmp 	gx1,y
.1ba7	bd eb 0b	lda $0beb,x			lda 	gx1+1,x
.1baa	f9 eb 0b	sbc $0beb,y			sbc 	gx1+1,y
.1bad	60		rts				rts
.1bae					GSortMinMaxCoords:
.1bae	90 1c		bcc $1bcc			bcc 	GSMMCExit
.1bb0					GSwapCoords:
.1bb0	bd ea 0b	lda $0bea,x			lda 	gx1,x
.1bb3	48		pha				pha
.1bb4	b9 ea 0b	lda $0bea,y			lda 	gx1,y
.1bb7	9d ea 0b	sta $0bea,x			sta 	gx1,x
.1bba	68		pla				pla
.1bbb	99 ea 0b	sta $0bea,y			sta 	gx1,y
.1bbe	bd eb 0b	lda $0beb,x			lda 	gx1+1,x
.1bc1	48		pha				pha
.1bc2	b9 eb 0b	lda $0beb,y			lda 	gx1+1,y
.1bc5	9d eb 0b	sta $0beb,x			sta 	gx1+1,x
.1bc8	68		pla				pla
.1bc9	99 eb 0b	sta $0beb,y			sta 	gx1+1,y
.1bcc					GSMMCExit:
.1bcc	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/driver/coords.asm

.1bcd					gdMvRight:
.1bcd	ee 20 9f	inc $9f20			inc 	$9F20 						; bump $9F20
.1bd0	d0 08		bne $1bda			bne 	_gdMR0
.1bd2	ee 21 9f	inc $9f21			inc 	$9F21
.1bd5	d0 03		bne $1bda			bne 	_gdMR0
.1bd7	ee 22 9f	inc $9f22			inc 	$9F22
.1bda					_gdMR0:
.1bda	ee 02 0c	inc $0c02			inc 	gdXPos
.1bdd	d0 03		bne $1be2			bne 	_gdMR1
.1bdf	ee 03 0c	inc $0c03			inc 	gdXPos+1
.1be2					_gdMR1:
.1be2	60		rts				rts
.1be3					gdMvUp:
.1be3	ad 04 0c	lda $0c04			lda 	gdYPos 						; decrement Y Pos
.1be6	d0 03		bne $1beb			bne 	_gdMU1
.1be8	ce 05 0c	dec $0c05			dec 	gdYPos+1
.1beb	ce 04 0c	dec $0c04	_gdMU1:	dec 	gdYPos
.1bee	38		sec				sec 								; adjust position by -320
.1bef	ad 20 9f	lda $9f20			lda 	$9F20
.1bf2	e9 40		sbc #$40			sbc 	#64
.1bf4	8d 20 9f	sta $9f20			sta 	$9F20
.1bf7	ad 21 9f	lda $9f21			lda 	$9F21
.1bfa	e9 01		sbc #$01			sbc 	#1
.1bfc	8d 21 9f	sta $9f21			sta 	$9F21
.1bff	ad 22 9f	lda $9f22			lda 	$9F22
.1c02	e9 00		sbc #$00			sbc 	#0
.1c04	8d 22 9f	sta $9f22			sta 	$9F22
.1c07	60		rts				rts
.1c08					gdMvDown:
.1c08	ee 04 0c	inc $0c04			inc 	gdYPos 						; decrement Y Pos
.1c0b	d0 03		bne $1c10			bne 	_gdMU1
.1c0d	ee 05 0c	inc $0c05			inc 	gdYPos+1
.1c10					_gdMU1:
.1c10	18		clc				clc 								; adjust position by -320
.1c11	ad 20 9f	lda $9f20			lda 	$9F20
.1c14	69 40		adc #$40			adc 	#64
.1c16	8d 20 9f	sta $9f20			sta 	$9F20
.1c19	ad 21 9f	lda $9f21			lda 	$9F21
.1c1c	69 01		adc #$01			adc 	#1
.1c1e	8d 21 9f	sta $9f21			sta 	$9F21
.1c21	ad 22 9f	lda $9f22			lda 	$9F22
.1c24	69 00		adc #$00			adc 	#0
.1c26	8d 22 9f	sta $9f22			sta 	$9F22
.1c29	60		rts				rts
.1c2a					gdSetDrawPosition:
.1c2a	a9 00		lda #$00			lda 	#0 							; temp0 is LSB of result start as 256 x Y
.1c2c	85 2a		sta $2a				sta 	temp0
.1c2e	ad 04 0c	lda $0c04			lda 	gdYPos
.1c31	85 2b		sta $2b				sta 	temp0+1
.1c33	46 2b		lsr $2b				lsr 	temp0+1 					; / 4 so temp0 is YC x 64
.1c35	66 2a		ror $2a				ror 	temp0
.1c37	46 2b		lsr $2b				lsr 	temp0+1
.1c39	66 2a		ror $2a				ror 	temp0
.1c3b	ad 04 0c	lda $0c04			lda 	gdYPos 						; add 256 x Y => 320 * Y < 64k
.1c3e	18		clc				clc
.1c3f	65 2b		adc $2b				adc 	temp0+1
.1c41	85 2b		sta $2b				sta 	temp0+1 					; temp0 = 320 x Y now add X => pixeloffset
.1c43	18		clc				clc
.1c44	a5 2a		lda $2a				lda 	temp0
.1c46	6d 02 0c	adc $0c02			adc 	gdXPos
.1c49	85 2a		sta $2a				sta 	temp0
.1c4b	a5 2b		lda $2b				lda 	temp0+1
.1c4d	6d 03 0c	adc $0c03			adc 	gdXPos+1
.1c50	85 2b		sta $2b				sta 	temp0+1
.1c52	18		clc				clc
.1c53	ad ff 0b	lda $0bff			lda 	gdBitmapAddress
.1c56	65 2a		adc $2a				adc 	temp0
.1c58	8d 20 9f	sta $9f20			sta 	$9F20
.1c5b	ad 00 0c	lda $0c00			lda 	gdBitmapAddress+1
.1c5e	65 2b		adc $2b				adc 	temp0+1
.1c60	8d 21 9f	sta $9f21			sta 	$9F21
.1c63	ad 01 0c	lda $0c01			lda 	gdBitmapAddress+2
.1c66	69 00		adc #$00			adc 	#0
.1c68	8d 22 9f	sta $9f22			sta 	$9F22
.1c6b	60		rts				rts
.1c6c					gdPlotInk:
.1c6c	ad 06 0c	lda $0c06			lda 	gdInk
.1c6f	8d 23 9f	sta $9f23			sta 	$9F23
.1c72	60		rts				rts
.1c73					gdPlotPaper:
.1c73	ad 07 0c	lda $0c07			lda 	gdPaper
.1c76	c9 ff		cmp #$ff			cmp 	#$FF
.1c78	f0 03		beq $1c7d			beq 	_gdPPSkip
.1c7a	8d 23 9f	sta $9f23			sta 	$9F23
.1c7d					_gdPPSkip:
.1c7d	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/driver/driver.asm

.0bfe					gdEnabled:
>0bfe							.fill 	1
.0bff					gdBitmapAddress:
>0bff							.fill 	3
.0c02					gdXPos:
>0c02							.fill 	2
.0c04					gdYPos:
>0c04							.fill 	2
.0c06					gModifiers:
.0c06					gdInk:
>0c06							.fill 	1
.0c07					gdPaper:
>0c07							.fill 	1
.0c08					gdSize:
>0c08							.fill 	1
.0c09					gdImage:
>0c09							.fill 	1
.0c0a					gdFlip:
>0c0a							.fill 	1
.0c0b					gdXLimit:
>0c0b							.fill 	2
.0c0d					gdYLimit:
>0c0d							.fill 	2
.1c7e					gdModeChanged:
.1c7e	8a		txa				txa
.1c7f	48		pha				pha
.1c80	98		tya				tya
.1c81	48		pha				pha
.1c82	a9 00		lda #$00			lda 	#0 							; zero the enabled flag.
.1c84	8d fe 0b	sta $0bfe			sta 	gdEnabled
.1c87	ad 2a 9f	lda $9f2a			lda 	$9F2A 						; requires $40 for H/V Scale
.1c8a	c9 40		cmp #$40			cmp 	#$40
.1c8c	d0 1f		bne $1cad			bne 	_gdExit
.1c8e	ad 2b 9f	lda $9f2b			lda 	$9F2B
.1c91	c9 40		cmp #$40			cmp 	#$40
.1c93	d0 18		bne $1cad			bne 	_gdExit
.1c95	ad 29 9f	lda $9f29			lda 	$9F29 						; read DC_Video, see which layers are enabled.
.1c98	0a		asl a				asl 	a 							;
.1c99	0a		asl a				asl 	a 							; bit 7 now set if layer 1 enabled.
.1c9a	10 09		bpl $1ca5			bpl 	_gdNotLayer1
.1c9c	48		pha				pha 								; save A
.1c9d	a2 07		ldx #$07			ldx 	#7 							; check offset 7 (e.g. start at $9F34)
.1c9f	20 c8 1c	jsr $1cc8			jsr 	gdCheckBitmap 				; go see if this is a bitmap
.1ca2	68		pla				pla 								; restore A
.1ca3	b0 08		bcs $1cad			bcs 	_gdExit 					; if successful then exit
.1ca5					_gdNotLayer1:
.1ca5	0a		asl a				asl 	a 							; bit 7 now set if layer 0 enabled.
.1ca6	10 05		bpl $1cad			bpl 	_gdExit 					; if not enabled, exit
.1ca8	a2 00		ldx #$00			ldx 	#0 							; check offset 0 (e.g. start at $9F2D)
.1caa	20 c8 1c	jsr $1cc8			jsr 	gdCheckBitmap 				; go see if this is a bitmap
.1cad					_gdExit:
.1cad	a9 00		lda #$00			lda 	#0 							; initialise modifiers.
.1caf	8d 07 0c	sta $0c07			sta 	gdPaper
.1cb2	8d 0a 0c	sta $0c0a			sta 	gdFlip
.1cb5	8d 09 0c	sta $0c09			sta 	gdImage
.1cb8	a9 01		lda #$01			lda 	#1
.1cba	8d 06 0c	sta $0c06			sta 	gdInk
.1cbd	8d 08 0c	sta $0c08			sta 	gdSize
.1cc0	20 10 1d	jsr $1d10			jsr 	gdClearGraphics 			; clear graphics display.
.1cc3	68		pla				pla
.1cc4	a8		tay				tay
.1cc5	68		pla				pla
.1cc6	aa		tax				tax
.1cc7	60		rts				rts
.1cc8					gdCheckBitmap:
.1cc8	bd 2d 9f	lda $9f2d,x			lda 	$9F2D,x 					; look at bitmap bit.
.1ccb	c9 07		cmp #$07			cmp 	#7 							; must be zero map size, bitmap and 8bpp
.1ccd	d0 28		bne $1cf7			bne 	_gdCBFail
.1ccf	ee fe 0b	inc $0bfe			inc 	gdEnabled 					; set the enabled flag to non zero.
.1cd2	bd 2f 9f	lda $9f2f,x			lda 	$9F2F,x 					; this is the bitmap address / 2
.1cd5	0a		asl a				asl 	a
.1cd6	8d 00 0c	sta $0c00			sta 	gdBitmapAddress+1
.1cd9	69 00		adc #$00			adc 	#$00 						; set to no move, updated manually.
.1cdb	8d 01 0c	sta $0c01			sta 	gdBitmapAddress+2
.1cde	a9 00		lda #$00			lda 	#$00
.1ce0	8d ff 0b	sta $0bff			sta 	gdBitmapAddress 			; this is a 17 bit address.
.1ce3	a9 40		lda #$40			lda 	#(320) & $FF
.1ce5	8d 0b 0c	sta $0c0b			sta 	gdXLimit
.1ce8	a9 01		lda #$01			lda 	#(320) >> 8
.1cea	8d 0c 0c	sta $0c0c			sta 	1+(gdXLimit)
.1ced	a9 c8		lda #$c8			lda 	#(200) & $FF
.1cef	8d 0d 0c	sta $0c0d			sta 	gdYLimit
.1cf2	a9 00		lda #$00			lda 	#(200) >> 8
.1cf4	8d 0e 0c	sta $0c0e			sta 	1+(gdYLimit)
.1cf7					_gdCBFail:
.1cf7	18		clc				clc
.1cf8	60		rts				rts
.1cf9					CommandClg:
.1cf9	b1 28		lda ($28),y			lda 	(codePtr),y
.1cfb	c9 e2		cmp #$e2			cmp 	#TKW_PAPER
.1cfd	d0 0d		bne $1d0c			bne 	_CCLClear
.1cff	c8		iny				iny
.1d00	a9 00		lda #$00			lda 	#0
.1d02	a2 0c		ldx #$0c		ldx	#12
.1d04	20 f1 3b	jsr $3bf1		jsr	mainHandler
.1d07	a5 98		lda $98				lda 	esInt0
.1d09	8d 07 0c	sta $0c07			sta 	gdPaper
.1d0c					_CCLClear:
.1d0c	20 10 1d	jsr $1d10			jsr 	gdClearGraphics
.1d0f	60		rts				rts
.1d10					gdClearGraphics:
.1d10	8a		txa				txa
.1d11	48		pha				pha
.1d12	98		tya				tya
.1d13	48		pha				pha
.1d14	ad fe 0b	lda $0bfe			lda 	gdEnabled 					; screen enabled
.1d17	f0 16		beq $1d2f			beq 	_gdCGExit
.1d19	a9 00		lda #$00			lda 	#0 							; home cursor
.1d1b	aa		tax				tax
.1d1c	20 34 1d	jsr $1d34			jsr 	gdSetX
.1d1f	20 3b 1d	jsr $1d3b			jsr 	gdSetY
.1d22	20 2a 1c	jsr $1c2a			jsr 	gdSetDrawPosition 			; set the draw position.
.1d25	a0 fa		ldy #$fa			ldy 	#$FA						; 320 x 200 pixels = $FA00
.1d27	a2 00		ldx #$00			ldx 	#0
.1d29	ad 07 0c	lda $0c07			lda 	gdPaper
.1d2c	20 42 1d	jsr $1d42			jsr 	gdOptHorizontalWriter
.1d2f					_gdCGExit:
.1d2f	68		pla				pla
.1d30	a8		tay				tay
.1d31	68		pla				pla
.1d32	aa		tax				tax
.1d33	60		rts				rts
.1d34					gdSetX:
.1d34	8d 02 0c	sta $0c02			sta 	gdXPos
.1d37	8e 03 0c	stx $0c03			stx 	gdXPos+1
.1d3a	60		rts				rts
.1d3b					gdSetY:
.1d3b	8d 04 0c	sta $0c04			sta 	gdYPos
.1d3e	8e 05 0c	stx $0c05			stx 	gdYPos+1
.1d41	60		rts				rts
.1d42					gdOptHorizontalWriter:
.1d42	48		pha				pha
.1d43	ad 22 9f	lda $9f22			lda 	$9F22 						; make it autoincrement.
.1d46	09 10		ora #$10			ora 	#$10
.1d48	8d 22 9f	sta $9f22			sta 	$9F22
.1d4b	68		pla				pla
.1d4c					_gdOLoop:
.1d4c	8d 23 9f	sta $9f23			sta 	$9F23
.1d4f	e0 00		cpx #$00			cpx 	#0
.1d51	d0 05		bne $1d58			bne 	_gdNoBorrow
.1d53	c0 00		cpy #$00			cpy 	#0
.1d55	f0 05		beq $1d5c			beq 	_gdExit
.1d57	88		dey				dey
.1d58					_gdNoBorrow:
.1d58	ca		dex				dex
.1d59	4c 4c 1d	jmp $1d4c			jmp 	_gdOLoop
.1d5c					_gdExit:
.1d5c	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/miscellany/clock.asm

.1d5d					Unary_Clock:
.1d5d	a2 0c		ldx #$0c		ldx	#12
.1d5f	20 f1 3b	jsr $3bf1		jsr	mainHandler
.1d62	48		pha				pha 								; save stack pos
.1d63	a2 04		ldx #$04		ldx	#4
.1d65	20 f1 3b	jsr $3bf1		jsr	mainHandler
.1d68	98		tya				tya
.1d69	48		pha				pha
.1d6a	20 50 ff	jsr $ff50			jsr 	$FF50
.1d6d	68		pla				pla
.1d6e	a8		tay				tay
.1d6f	68		pla				pla 								; restore, repush, put into X to read offset
.1d70	48		pha				pha
.1d71	aa		tax				tax
.1d72	b5 98		lda $98,x			lda 	esInt0,x 					; must be 0-5
.1d74	c9 06		cmp #$06			cmp 	#6
.1d76	b0 0d		bcs $1d85			bcs 	_UCValue
.1d78	aa		tax				tax 								; index in X and read RTC.
.1d79	b5 02		lda $02,x			lda 	2,x
.1d7b	85 32		sta $32				sta 	tempshort
.1d7d	68		pla				pla 								; restore number stack index.
.1d7e	aa		tax				tax
.1d7f	a5 32		lda $32				lda 	tempShort
.1d81	95 98		sta $98,x			sta 	esInt0,x 					; rest are set up.
.1d83	8a		txa				txa
.1d84	60		rts				rts
.1d85					_UCValue:
.1d85	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.1d87	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/miscellany/joystick.asm

.1d8a					Unary_JoyX:
.1d8a	38		sec				sec
.1d8b	b0 01		bcs $1d8e			bcs 	JoystickRead
.1d8d					Unary_JoyY:
.1d8d	18		clc				clc
.1d8e					JoystickRead:
.1d8e	48		pha				pha 								; save stack position
.1d8f	08		php				php 								; save test flag.
.1d90	a2 04		ldx #$04		ldx	#4
.1d92	20 f1 3b	jsr $3bf1		jsr	mainHandler
.1d95	20 ef 1d	jsr $1def			jsr 	ReadJoystick 				; read it.
.1d98	28		plp				plp
.1d99	b0 02		bcs $1d9d			bcs 	_JRNoShift 					; if Y, shift right twice so accessing Y buttons
.1d9b	4a		lsr a				lsr 	a
.1d9c	4a		lsr a				lsr 	a
.1d9d					_JRNoShift:
.1d9d	29 03		and #$03			and 	#3 							; isolate the test bits.
.1d9f	f0 0d		beq $1dae			beq 	JoyReturnA 					; if nothing pressed, return A.
.1da1	c9 03		cmp #$03			cmp 	#3
.1da3	f0 07		beq $1dac			beq 	JoyReturnFalse 				; could be both on a keyboard.
.1da5	4a		lsr a				lsr 	a 							; bit 0 set, its +1
.1da6	b0 16		bcs $1dbe			bcs 	JoyReturn1
.1da8					JoyReturnTrue:
.1da8	a9 ff		lda #$ff			lda 	#$FF
.1daa	d0 02		bne $1dae			bne 	JoyReturnA
.1dac					JoyReturnFalse:
.1dac	a9 00		lda #$00			lda 	#0
.1dae					JoyReturnA:
.1dae	85 32		sta $32				sta 	tempShort 					; return A
.1db0	68		pla				pla
.1db1	aa		tax				tax
.1db2	a5 32		lda $32				lda 	tempShort
.1db4	95 98		sta $98,x			sta 	esInt0,x
.1db6					JoyReturn13:
.1db6	95 a0		sta $a0,x			sta 	esInt1,x
.1db8	95 a8		sta $a8,x			sta 	esInt2,x
.1dba	95 b0		sta $b0,x			sta 	esInt3,x
.1dbc	8a		txa				txa 								; return NSP in A
.1dbd	60		rts				rts
.1dbe					JoyReturn1:
.1dbe	68		pla				pla
.1dbf	aa		tax				tax
.1dc0	a9 01		lda #$01			lda 	#1
.1dc2	95 98		sta $98,x			sta 	esInt0,x
.1dc4	a9 00		lda #$00			lda 	#0
.1dc6	f0 ee		beq $1db6			beq 	JoyReturn13
.1dc8					Unary_JButton:
.1dc8	48		pha				pha 								; save X on stack, put in X
.1dc9	a2 0c		ldx #$0c		ldx	#12
.1dcb	20 f1 3b	jsr $3bf1		jsr	mainHandler
.1dce	aa		tax				tax 								; get value to check, push on stack.
.1dcf	b5 98		lda $98,x			lda 	esInt0,x
.1dd1	c9 04		cmp #$04			cmp 	#4 							; check button 0-3
.1dd3	b0 15		bcs $1dea			bcs 	_UJBadValue
.1dd5	69 05		adc #$05			adc 	#5 							; four more shifts to get the bit into carry.
.1dd7	48		pha				pha 								; save that shift count on the stack.
.1dd8	a2 04		ldx #$04		ldx	#4
.1dda	20 f1 3b	jsr $3bf1		jsr	mainHandler
.1ddd	68		pla				pla
.1dde	aa		tax				tax
.1ddf	20 ef 1d	jsr $1def			jsr 	ReadJoystick 				; joystick read
.1de2					_UJShift:
.1de2	4a		lsr a				lsr 	a
.1de3	ca		dex				dex
.1de4	d0 fc		bne $1de2			bne 	_UJShift
.1de6	b0 c0		bcs $1da8			bcs 	JoyReturnTrue
.1de8	90 c2		bcc $1dac			bcc 	JoyReturnFalse
.1dea					_UJBadValue:
.1dea	a2 28		ldx #$28			ldx 	#ErrorID_Hardware
.1dec	20 18 15	jsr $1518		jsr	errorHandler
.1def					ReadJoystick:
.1def	8a		txa				txa
.1df0	48		pha				pha
.1df1	98		tya				tya
.1df2	48		pha				pha
.1df3	a9 00		lda #$00			lda 	#0
.1df5	20 56 ff	jsr $ff56			jsr 	$FF56
.1df8	c0 00		cpy #$00			cpy 	#0
.1dfa	d0 11		bne $1e0d			bne 	_RJError
.1dfc	c9 00		cmp #$00			cmp 	#0 							; bug, returns $00 initially
.1dfe	d0 02		bne $1e02			bne 	_RJNoBug
.1e00	a9 ff		lda #$ff			lda 	#$FF
.1e02					_RJNoBug:
.1e02	85 32		sta $32				sta 	tempShort
.1e04	68		pla				pla
.1e05	a8		tay				tay
.1e06	68		pla				pla
.1e07	aa		tax				tax
.1e08	a5 32		lda $32				lda 	tempShort
.1e0a	49 ff		eor #$ff			eor 	#$FF 						; active 1 bit.
.1e0c	60		rts				rts
.1e0d					_RJError:
.1e0d	a2 28		ldx #$28			ldx 	#ErrorID_Hardware
.1e0f	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/sprites/collide.asm

.0c0f					hitSprite1:
>0c0f							.fill 	1 							; this won't work ... if you nest HIT() which
.0c10					hitSprite2:
>0c10							.fill 	1
.0c11					hitRange:
>0c11							.fill 	1
.1e12					FunctionCollide:
.1e12	48		pha				pha 								; save and put index into X
.1e13	aa		tax				tax
.1e14	a9 00		lda #$00			lda 	#0 							; set hit range to default.
.1e16	8d 11 0c	sta $0c11			sta 	hitRange
.1e19	20 be 1e	jsr $1ebe			jsr 	_FCGetSpriteID
.1e1c	8d 0f 0c	sta $0c0f			sta 	hitSprite1
.1e1f	8a		txa				txa
.1e20	48		pha				pha
.1e21	a2 02		ldx #$02		ldx	#2
.1e23	20 f1 3b	jsr $3bf1		jsr	mainHandler
.1e26	68		pla				pla
.1e27	aa		tax				tax
.1e28	20 be 1e	jsr $1ebe			jsr 	_FCGetSpriteID
.1e2b	8d 10 0c	sta $0c10			sta 	hitSprite2
.1e2e	b1 28		lda ($28),y			lda 	(codePtr),y 				; is there a third parameter
.1e30	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.1e32	f0 13		beq $1e47			beq 	_FCParam2
.1e34	8a		txa				txa
.1e35	48		pha				pha
.1e36	a2 02		ldx #$02		ldx	#2
.1e38	20 f1 3b	jsr $3bf1		jsr	mainHandler
.1e3b	68		pla				pla
.1e3c	a2 0c		ldx #$0c		ldx	#12
.1e3e	20 f1 3b	jsr $3bf1		jsr	mainHandler
.1e41	aa		tax				tax
.1e42	b5 98		lda $98,x			lda 	esInt0,x
.1e44	8d 11 0c	sta $0c11			sta 	hitRange
.1e47					_FCParam2:
.1e47	a2 04		ldx #$04		ldx	#4
.1e49	20 f1 3b	jsr $3bf1		jsr	mainHandler
.1e4c	68		pla				pla 								; set X to point to the stack again.
.1e4d	48		pha				pha
.1e4e	aa		tax				tax
.1e4f	98		tya				tya
.1e50	48		pha				pha
.1e51	18		clc				clc 								; do it with the horizontal values.
.1e52	20 74 1e	jsr $1e74			jsr 	_FCCheck
.1e55	90 0a		bcc $1e61			bcc 	_FCFail
.1e57	38		sec				sec 								; do it with the vertical values.
.1e58	20 74 1e	jsr $1e74			jsr 	_FCCheck
.1e5b	90 04		bcc $1e61			bcc 	_FCFail
.1e5d	a9 ff		lda #$ff			lda 	#255 						; pass, return -1
.1e5f	d0 02		bne $1e63			bne 	_FCReturnA
.1e61					_FCFail:
.1e61	a9 00		lda #$00			lda 	#0 							; return 0, it didn't work.
.1e63					_FCReturnA:
.1e63	85 32		sta $32				sta 	tempShort 					; put result in tempShort
.1e65	68		pla				pla
.1e66	a8		tay				tay
.1e67	68		pla				pla 								; restore stack, return result and exit.
.1e68	aa		tax				tax
.1e69	a5 32		lda $32				lda 	tempShort
.1e6b	95 98		sta $98,x			sta 	esInt0,x
.1e6d	95 a0		sta $a0,x			sta 	esInt1,x
.1e6f	95 a8		sta $a8,x			sta 	esInt2,x
.1e71	95 b0		sta $b0,x			sta 	esInt3,x
.1e73	60		rts				rts
.1e74					_FCCheck:
.1e74	08		php				php 								; save the H/V flag twice
.1e75	08		php				php
.1e76	ad 0f 0c	lda $0c0f			lda 	hitSprite1 					; select sprite 1 and read its location
.1e79	20 fc 1f	jsr $1ffc			jsr 	SelectSpriteA 				; into X
.1e7c	28		plp				plp
.1e7d	20 5e 20	jsr $205e			jsr 	SpriteReadCoordinate
.1e80	ad 10 0c	lda $0c10			lda 	hitSprite2					; now repeat for sprite 2 and location X+1
.1e83	20 fc 1f	jsr $1ffc			jsr 	SelectSpriteA
.1e86	e8		inx				inx
.1e87	28		plp				plp
.1e88	20 5e 20	jsr $205e			jsr 	SpriteReadCoordinate
.1e8b	ca		dex				dex
.1e8c	38		sec				sec 								; calculate |s1.c-s2.c| put in temp0
.1e8d	b5 98		lda $98,x			lda 	esInt0,x
.1e8f	f5 99		sbc $99,x			sbc 	esInt0+1,x
.1e91	85 2a		sta $2a				sta 	temp0
.1e93	b5 a0		lda $a0,x			lda 	esInt1,x
.1e95	f5 a1		sbc $a1,x			sbc 	esInt1+1,x
.1e97	85 2b		sta $2b				sta 	temp0+1
.1e99	10 0d		bpl $1ea8			bpl 	_FCCIsPositive
.1e9b	38		sec				sec 								; if -ve calculate |difference|
.1e9c	a9 00		lda #$00			lda 	#0
.1e9e	e5 2a		sbc $2a				sbc 	temp0
.1ea0	85 2a		sta $2a				sta 	temp0
.1ea2	a9 00		lda #$00			lda 	#0
.1ea4	e5 2b		sbc $2b				sbc 	temp0+1
.1ea6	85 2b		sta $2b				sta 	temp0+1
.1ea8					_FCCIsPositive:
.1ea8	a5 2b		lda $2b				lda 	temp0+1 					; if range >= 256 then definitely fail.
.1eaa	d0 10		bne $1ebc			bne 	_FCCFail
.1eac	18		clc				clc 								; work out required min distance which is
.1ead	b5 b0		lda $b0,x			lda 	esInt3,x 					; the sum of the half width/heights
.1eaf	75 b1		adc $b1,x			adc 	esInt3+1,x
.1eb1	ac 11 0c	ldy $0c11			ldy 	hitRange 					; get the hit range
.1eb4	f0 01		beq $1eb7			beq 	_FCCNoSetRange 				; override if non zero.
.1eb6	98		tya				tya
.1eb7					_FCCNoSetRange:
.1eb7	c5 2a		cmp $2a				cmp 	temp0 						; result is range > distance
.1eb9	f0 01		beq $1ebc			beq 	_FCCFail
.1ebb	60		rts				rts
.1ebc					_FCCFail:
.1ebc	18		clc				clc
.1ebd	60		rts				rts
.1ebe					_FCGetSpriteID:
.1ebe	8a		txa				txa
.1ebf	a2 0c		ldx #$0c		ldx	#12
.1ec1	20 f1 3b	jsr $3bf1		jsr	mainHandler
.1ec4	aa		tax				tax
.1ec5	b5 98		lda $98,x			lda 	esInt0,x
.1ec7	30 01		bmi $1eca			bmi 	_FCGSValue
.1ec9	60		rts				rts
.1eca					_FCGSValue:
.1eca	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.1ecc	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/sprites/sprite.asm

.0c12					currSprite:
>0c12							.fill 	2
.1ecf					CommandSprite:
.1ecf	20 d1 1f	jsr $1fd1			jsr 	CSCheckOnOff 				; look for TRUE/FALSE
.1ed2	d0 0d		bne $1ee1			bne 	_CSCheckClear
.1ed4	ad 29 9f	lda $9f29			lda 	$9F29 						; sprite enable is bit 6.
.1ed7	29 bf		and #$bf			and 	#$BF 						; clear it whatever
.1ed9	90 02		bcc $1edd			bcc 	_CSNotOn 					; if CS turn on, so set it
.1edb	09 40		ora #$40			ora 	#$40
.1edd					_CSNotOn:
.1edd	8d 29 9f	sta $9f29			sta 	$9F29 						; write it back in new state and exit
.1ee0	60		rts				rts
.1ee1					_CSCheckClear:
.1ee1	a9 00		lda #$00			lda 	#0 							; no sprite currently selected.
.1ee3	8d 13 0c	sta $0c13			sta 	currSprite+1
.1ee6	b1 28		lda ($28),y			lda 	(codePtr),y 				; check for CLEAR
.1ee8	c9 e8		cmp #$e8			cmp 	#TKW_CLEAR
.1eea	d0 05		bne $1ef1			bne 	_CSCommandLoop 				; not CLEAR, go to main loop
.1eec	20 e2 1f	jsr $1fe2			jsr 	CSClearSprites 				; clear all the sprites
.1eef	c8		iny				iny 								; consume CLEAR token and exit.
.1ef0	60		rts				rts
.1ef1					_CSCommandLoop:
.1ef1	20 d1 1f	jsr $1fd1			jsr 	CSCheckOnOff 				; check sprite on/off
.1ef4	f0 2c		beq $1f22			beq 	_CSSetVisibility
.1ef6	b1 28		lda ($28),y			lda 	(codePtr),y 				; get and consume character
.1ef8	c9 80		cmp #$80			cmp 	#TOK_EOL					; EOL exit.
.1efa	f0 25		beq $1f21			beq 	_CSExit
.1efc	c8		iny				iny									; consume it
.1efd	c9 ca		cmp #$ca			cmp 	#TKW_COLON 					; colon exit
.1eff	f0 20		beq $1f21			beq 	_CSExit
.1f01	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; semantic comma
.1f03	f0 ec		beq $1ef1			beq 	_CSCommandLoop
.1f05	c9 da		cmp #$da			cmp		#TKW_IMAGE 					; image ?
.1f07	f0 69		beq $1f72			beq 	_CSSetImage
.1f09	c9 dc		cmp #$dc			cmp 	#TKW_FLIP 					; flip ?
.1f0b	f0 2b		beq $1f38			beq 	_CSSetFlip
.1f0d	c9 ce		cmp #$ce			cmp 	#TKW_TO 					; to ?
.1f0f	f0 46		beq $1f57			beq 	_CSSetPos
.1f11	88		dey				dey 								; unpick DEY
.1f12	a9 00		lda #$00			lda 	#0 							; sprite # now at level 0
.1f14	a2 0c		ldx #$0c		ldx	#12
.1f16	20 f1 3b	jsr $3bf1		jsr	mainHandler
.1f19	a5 98		lda $98				lda 	esInt0
.1f1b	20 fc 1f	jsr $1ffc			jsr 	SelectSpriteA
.1f1e	4c f1 1e	jmp $1ef1			jmp 	_CSCommandLoop
.1f21					_CSExit:
.1f21	60		rts				rts
.1f22					_CSSetVisibility:
.1f22	08		php				php 								; save carry
.1f23	a9 06		lda #$06			lda 	#6 							; set pos to offset 6.
.1f25	20 b8 1f	jsr $1fb8			jsr 	SpriteSetTarget
.1f28	ad 23 9f	lda $9f23			lda 	$9F23 						; read it.
.1f2b	29 f3		and #$f3			and 	#$F3 						; clear depth bits, disabling it.
.1f2d	28		plp				plp
.1f2e	90 02		bcc $1f32			bcc 	_CSSetOff 					; check if carry was set
.1f30	09 0c		ora #$0c			ora 	#$0C 						; otherwise set depth bits to 11, on top.
.1f32					_CSSetOff:
.1f32	8d 23 9f	sta $9f23			sta 	$9F23 						; update and loop back
.1f35	4c f1 1e	jmp $1ef1			jmp 	_CSCommandLoop
.1f38					_CSSetFlip:
.1f38	a9 00		lda #$00			lda 	#0 							; image # now at level 0
.1f3a	a2 0c		ldx #$0c		ldx	#12
.1f3c	20 f1 3b	jsr $3bf1		jsr	mainHandler
.1f3f	a9 06		lda #$06			lda 	#6 							; set sprite position to +6
.1f41	20 b8 1f	jsr $1fb8			jsr 	SpriteSetTarget
.1f44	a5 98		lda $98				lda 	esInt0 						; flip value & 3 => temp0
.1f46	29 03		and #$03			and 	#3
.1f48	85 2a		sta $2a				sta 	temp0
.1f4a	ad 23 9f	lda $9f23			lda 	$9F23 						; update the flip.
.1f4d	29 fc		and #$fc			and 	#$FC
.1f4f	05 2a		ora $2a				ora 	temp0
.1f51	8d 23 9f	sta $9f23			sta 	$9F23
.1f54	4c f1 1e	jmp $1ef1			jmp 	_CSCommandLoop
.1f57					_CSSetPos:
.1f57	a9 00		lda #$00			lda 	#0 							; X now at level 0
.1f59	a2 0a		ldx #$0a		ldx	#10
.1f5b	20 f1 3b	jsr $3bf1		jsr	mainHandler
.1f5e	a2 02		ldx #$02		ldx	#2
.1f60	20 f1 3b	jsr $3bf1		jsr	mainHandler
.1f63	a9 01		lda #$01			lda 	#1 							; Y now at level 1
.1f65	a2 0a		ldx #$0a		ldx	#10
.1f67	20 f1 3b	jsr $3bf1		jsr	mainHandler
.1f6a	a2 00		ldx #$00			ldx 	#0 							; coords at 0,1
.1f6c	20 1a 20	jsr $201a			jsr 	SpriteMove 					; move it.
.1f6f	4c f1 1e	jmp $1ef1			jmp 	_CSCommandLoop
.1f72					_CSSetImage:
.1f72	a9 00		lda #$00			lda 	#0 							; image # now at level 0
.1f74	a2 0c		ldx #$0c		ldx	#12
.1f76	20 f1 3b	jsr $3bf1		jsr	mainHandler
.1f79	a9 00		lda #$00			lda 	#0 							; set sprite position to +0
.1f7b	20 b8 1f	jsr $1fb8			jsr 	SpriteSetTarget
.1f7e	a6 98		ldx $98				ldx 	esInt0 						; get image # into X
.1f80	bd 59 0c	lda $0c59,x			lda 	imageAddr2Low,x 			; copy low address in.
.1f83	8d 23 9f	sta $9f23			sta 	$9F23
.1f86	ee 20 9f	inc $9f20			inc 	$9F20 						; bump to offset 1.
.1f89	bd 19 0c	lda $0c19,x			lda 	imageInfo,x 				; get 4/8 bit flag from info.
.1f8c	29 10		and #$10			and 	#$10
.1f8e	0a		asl a				asl 	a
.1f8f	0a		asl a				asl		a
.1f90	0a		asl a				asl 	a 							; put into bit 7
.1f91	1d 99 0c	ora $0c99,x			ora 	imageAddr2High,x 			; or high address with it.
.1f94	8d 23 9f	sta $9f23			sta 	$9F23 						; write the high byte.
.1f97	a9 06		lda #$06			lda 	#6
.1f99	20 b8 1f	jsr $1fb8			jsr 	SpriteSetTarget 			; set sprite on.
.1f9c	ad 23 9f	lda $9f23			lda 	$9F23
.1f9f	09 0c		ora #$0c			ora 	#$0C
.1fa1	8d 23 9f	sta $9f23			sta 	$9F23
.1fa4	ee 20 9f	inc $9f20			inc 	$9F20 						; point to byte 7 : height/width/palette offset
.1fa7	bd 19 0c	lda $0c19,x			lda 	imageInfo,x 				; get image info
.1faa	0a		asl a				asl 	a 							; shift bits 0-3 to 4-7
.1fab	0a		asl a				asl 	a
.1fac	0a		asl a				asl 	a
.1fad	0a		asl a				asl 	a
.1fae	b0 02		bcs $1fb2			bcs		_CSNoOffset 				; if bit 4 was set don't set the offset.
.1fb0	09 0f		ora #$0f			ora 	#$0F 						; set palette offset and write back
.1fb2					_CSNoOffset:
.1fb2	8d 23 9f	sta $9f23			sta 	$9F23
.1fb5	4c f1 1e	jmp $1ef1			jmp 	_CSCommandLoop
.1fb8					SpriteSetTarget:
.1fb8	0d 12 0c	ora $0c12			ora 	currSprite
.1fbb	8d 20 9f	sta $9f20			sta 	$9F20
.1fbe	ad 13 0c	lda $0c13			lda 	currSprite+1
.1fc1	f0 09		beq $1fcc			beq 	_SSTNoSet
.1fc3	8d 21 9f	sta $9f21			sta 	$9F21
.1fc6	a9 01		lda #$01			lda 	#$01
.1fc8	8d 22 9f	sta $9f22			sta 	$9F22
.1fcb	60		rts				rts
.1fcc					_SSTNoSet:
.1fcc	a2 27		ldx #$27			ldx 	#ErrorID_NoSprite
.1fce	20 18 15	jsr $1518		jsr	errorHandler
.1fd1					CSCheckOnOff:
.1fd1	b1 28		lda ($28),y			lda 	(codePtr),y 				; get and consume it.
.1fd3	c8		iny				iny
.1fd4	c9 ab		cmp #$ab			cmp 	#TKW_FALSE					; return CC/EQ if FALSE
.1fd6	18		clc				clc
.1fd7	f0 08		beq $1fe1			beq 	_CSCOExit
.1fd9	c9 aa		cmp #$aa			cmp 	#TKW_TRUE 					; return CS/EQ if TRUE
.1fdb	38		sec				sec 								; return NE if neither.
.1fdc	f0 03		beq $1fe1			beq 	_CSCOExit
.1fde	88		dey				dey 								; undo consume
.1fdf	c9 aa		cmp #$aa			cmp 	#TKW_TRUE 					; and set NE again, DEY will change it.
.1fe1					_CSCOExit:
.1fe1	60		rts				rts
.1fe2					CSClearSprites:
.1fe2	a9 11		lda #$11			lda 	#$11 						; set address to 1FC00 with single bump
.1fe4	8d 22 9f	sta $9f22			sta 	$9F22
.1fe7	a9 fc		lda #$fc			lda 	#$FC
.1fe9	8d 21 9f	sta $9f21			sta 	$9F21
.1fec	a9 00		lda #$00			lda 	#0
.1fee	8d 20 9f	sta $9f20			sta 	$9F20
.1ff1					_CSClear:
.1ff1	a9 00		lda #$00			lda 	#0 							; set everything to $00
.1ff3	8d 23 9f	sta $9f23			sta 	$9F23
.1ff6	ad 21 9f	lda $9f21			lda 	$9F21
.1ff9	d0 f6		bne $1ff1			bne 	_CSClear
.1ffb	60		rts				rts
.1ffc					SelectSpriteA:
.1ffc	85 2a		sta $2a				sta 	temp0
.1ffe	a9 00		lda #$00			lda 	#0
.2000	06 2a		asl $2a				asl		temp0 						; multiply A:esInt0 by 8
.2002	b0 11		bcs $2015			bcs 	_CSBadValue 				; sprites only 0-127
.2004	06 2a		asl $2a				asl 	temp0
.2006	2a		rol a				rol 	a
.2007	06 2a		asl $2a				asl 	temp0
.2009	2a		rol a				rol 	a
.200a	09 fc		ora #$fc			ora 	#$FC 						; MSB of address (barring $01 upper third byte)
.200c	8d 13 0c	sta $0c13			sta 	currSprite+1
.200f	a5 2a		lda $2a				lda 	temp0 						; LSB of address
.2011	8d 12 0c	sta $0c12			sta 	currSprite+0
.2014	60		rts				rts
.2015					_CSBadValue
.2015	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.2017	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/sprites/spritemove.asm

.201a					SpriteMove:
.201a	98		tya				tya
.201b	48		pha				pha
.201c	a9 07		lda #$07			lda 	#7 									; point to height/width byte and read it.
.201e	20 b8 1f	jsr $1fb8			jsr 	SpriteSetTarget
.2021	ad 23 9f	lda $9f23			lda 	$9F23
.2024	4a		lsr a				lsr 	a 									; A now contains bits 0-1 (width) 2-3 (height)
.2025	4a		lsr a				lsr 	a
.2026	4a		lsr a				lsr 	a
.2027	4a		lsr a				lsr 	a
.2028	85 2a		sta $2a				sta 	temp0 								; save these bits so we can work out the centre.
.202a	a9 02		lda #$02			lda 	#2 									; point to X position.Low
.202c	20 b8 1f	jsr $1fb8			jsr 	SpriteSetTarget
.202f	20 3e 20	jsr $203e			jsr 	SMWritePosition 					; write X position out.
.2032	46 2a		lsr $2a				lsr 	temp0 								; shift height bits into 0,1
.2034	46 2a		lsr $2a				lsr 	temp0
.2036	e8		inx				inx 										; get the y position
.2037	20 3e 20	jsr $203e			jsr 	SMWritePosition 					; and write that out.
.203a	ca		dex				dex 										; fix X and quit.
.203b	68		pla				pla
.203c	a8		tay				tay
.203d	60		rts				rts
.203e					SMWritePosition:
.203e	a5 2a		lda $2a				lda 	temp0 								; get dim size
.2040	29 03		and #$03			and 	#3 									; in range into Y
.2042	a8		tay				tay
.2043	38		sec				sec
.2044	b5 98		lda $98,x			lda 	esInt0,x
.2046	f9 5a 20	sbc $205a,y			sbc 	SMHalfSize,y
.2049	8d 23 9f	sta $9f23			sta 	$9F23
.204c	ee 20 9f	inc $9f20			inc 	$9F20
.204f	b5 a0		lda $a0,x			lda 	esInt1,x
.2051	e9 00		sbc #$00			sbc 	#0
.2053	8d 23 9f	sta $9f23			sta 	$9F23
.2056	ee 20 9f	inc $9f20			inc 	$9F20
.2059	60		rts				rts
.205a					SMHalfSize:
>205a	04 08 10 20					.byte 	4,8,16,32 							; half size each dimension.
.205e					SpriteReadCoordinate:
.205e	98		tya				tya
.205f	48		pha				pha
.2060	08		php				php 										; save CTR on stack
.2061	a9 07		lda #$07			lda 	#7 									; point to height/width byte and read it.
.2063	20 b8 1f	jsr $1fb8			jsr 	SpriteSetTarget
.2066	ad 23 9f	lda $9f23			lda 	$9F23
.2069	4a		lsr a				lsr 	a 									; A now contains bits 0-1 (width) 2-3 (height)
.206a	4a		lsr a				lsr 	a
.206b	4a		lsr a				lsr 	a
.206c	4a		lsr a				lsr 	a
.206d	28		plp				plp 										; restore CTS
.206e	08		php				php
.206f	90 02		bcc $2073			bcc 	_SPRCNotY1 							; if it is Y, e.g. CS, shift twice more.
.2071	4a		lsr a				lsr 	a
.2072	4a		lsr a				lsr 	a
.2073					_SPRCNotY1:
.2073	29 03		and #$03			and 	#3 									; point into half width/height
.2075	a8		tay				tay
.2076	b9 5a 20	lda $205a,y			lda 	SMHalfSize,y 						; get half size -> esInt3,x
.2079	95 b0		sta $b0,x			sta 	esInt3,x
.207b	28		plp				plp 										; CS Y CC X
.207c	a9 00		lda #$00			lda 	#0 									; A = 0 X A = 2 Y
.207e	2a		rol a				rol 	a
.207f	2a		rol a				rol 	a
.2080	69 02		adc #$02			adc 	#2 									; A = 2 X A = 4 Y
.2082	20 b8 1f	jsr $1fb8			jsr 	SpriteSetTarget 					; set data pointer offset by that
.2085	18		clc				clc 										; read and unfix centre.
.2086	ad 23 9f	lda $9f23			lda 	$9F23
.2089	75 b0		adc $b0,x			adc 	esInt3,x
.208b	95 98		sta $98,x			sta 	esInt0,x
.208d	ee 20 9f	inc $9f20			inc 	$9F20 								; do MSB
.2090	ad 23 9f	lda $9f23			lda 	$9F23
.2093	69 00		adc #$00			adc 	#0
.2095	29 0f		and #$0f			and 	#$0F 								; sign extend on bit 11.
.2097	c9 08		cmp #$08			cmp		#$08
.2099	90 02		bcc $209d			bcc 	_SPRCNoSX
.209b	09 f0		ora #$f0			ora 	#$F0
.209d					_SPRCNoSX:
.209d	95 a0		sta $a0,x			sta 	esInt1,x
.209f	68		pla				pla
.20a0	a8		tay				tay
.20a1	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/sprites/spriteutils.asm

.20a2					Sprite_GetX:
.20a2	18		clc				clc
.20a3	90 01		bcc $20a6			bcc 	SpriteGetCode
.20a5					Sprite_GetY:
.20a5	38		sec				sec
.20a6					SpriteGetCode:
.20a6	08		php				php 								; CLC : X SEC: Y, save on stack.
.20a7	48		pha				pha 								; save stack position
.20a8	20 c4 20	jsr $20c4			jsr 	GetSpriteNumber 			; get # of sprite.
.20ab	a2 04		ldx #$04		ldx	#4
.20ad	20 f1 3b	jsr $3bf1		jsr	mainHandler
.20b0	68		pla				pla
.20b1	aa		tax				tax
.20b2	28		plp				plp 								; which one ?
.20b3	20 5e 20	jsr $205e			jsr 	SpriteReadCoordinate 		; read appropriate coordinate into esInt0,x
.20b6	b5 a0		lda $a0,x			lda 	esInt1,x 					; get sign bit, sign extend 16->32 bits
.20b8	29 80		and #$80			and 	#$80
.20ba	f0 02		beq $20be			beq 	_SGXYPos
.20bc	a9 ff		lda #$ff			lda 	#$FF
.20be					_SGXYPos:
.20be	95 a8		sta $a8,x			sta 	esInt2,x
.20c0	95 b0		sta $b0,x			sta 	esInt3,x
.20c2	8a		txa				txa 								; return NSP in A
.20c3	60		rts				rts
.20c4					GetSpriteNumber:
.20c4	48		pha				pha
.20c5	a2 0c		ldx #$0c		ldx	#12
.20c7	20 f1 3b	jsr $3bf1		jsr	mainHandler
.20ca	68		pla				pla
.20cb	aa		tax				tax
.20cc	b5 98		lda $98,x			lda 	esInt0,x
.20ce	20 fc 1f	jsr $1ffc			jsr 	SelectSpriteA
.20d1	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/video/mode.asm

.0c14					currentMode:
>0c14							.fill 	4
.20d2					ForceMode0:
.20d2	a2 00		ldx #$00			ldx 	#0
.20d4	86 98		stx $98				stx 	esInt0 						; in case we do it.
.20d6					_FMCheck:
.20d6	bd 69 21	lda $2169,x			lda 	CMModeList,x 				; do we need to switch ?
.20d9	dd 14 0c	cmp $0c14,x			cmp 	currentMode,x
.20dc	d0 13		bne $20f1			bne 	CMSetMode 					; different so switch.
.20de	e8		inx				inx
.20df	e0 04		cpx #$04			cpx 	#4
.20e1	d0 f3		bne $20d6			bne 	_FMCheck
.20e3	60		rts				rts
.20e4					CommandMode:
.20e4	a9 00		lda #$00			lda 	#0
.20e6	a2 0a		ldx #$0a		ldx	#10
.20e8	20 f1 3b	jsr $3bf1		jsr	mainHandler
.20eb	a5 b0		lda $b0				lda 	esInt3
.20ed	29 70		and #$70			and 	#$70
.20ef	d0 06		bne $20f7			bne 	CMNoExpand
.20f1					CMSetMode:
.20f1	20 48 21	jsr $2148			jsr 	CMExpandMode
.20f4	4c 0b 21	jmp $210b			jmp 	CMUpdateMode
.20f7					CMNoExpand:
.20f7	a5 98		lda $98				lda 	esInt0
.20f9	8d 14 0c	sta $0c14			sta 	currentMode
.20fc	a5 a0		lda $a0				lda 	esInt1
.20fe	8d 15 0c	sta $0c15			sta 	currentMode+1
.2101	a5 a8		lda $a8				lda 	esInt2
.2103	8d 16 0c	sta $0c16			sta 	currentMode+2
.2106	a5 b0		lda $b0				lda 	esInt3
.2108	8d 17 0c	sta $0c17			sta 	currentMode+3
.210b					CMUpdateMode:
.210b	a2 11		ldx #$11			ldx 	#$11
.210d					_CMClear:
.210d	a9 00		lda #$00			lda 	#0
.210f	9d 29 9f	sta $9f29,x			sta 	$9F29,X
.2112	ca		dex				dex
.2113	10 f8		bpl $210d			bpl 	_CMClear
.2115	ad 17 0c	lda $0c17			lda 	currentMode+3 				; get current mode
.2118	48		pha				pha 								; stack twice.
.2119	48		pha				pha
.211a	29 70		and #$70			and 	#$70 						; isolates bits 6,5,4 (sprites,L1 enable,L0 enable)
.211c	09 01		ora #$01			ora 	#$01 						; turn the output on.
.211e	8d 29 9f	sta $9f29			sta 	$9F29 						; write to DC_VIDEO
.2121	68		pla				pla 								; get back
.2122	20 79 21	jsr $2179			jsr 	CMToScale 					; convert lower 2 bits to a scale.
.2125	8d 2a 9f	sta $9f2a			sta 	$9F2A 						; write to H-Scale
.2128	68		pla				pla 								; get back, convert bits 2,3 to a scale.
.2129	4a		lsr a				lsr 	a
.212a	4a		lsr a				lsr 	a
.212b	20 79 21	jsr $2179			jsr 	CMToScale 					; convert lower 2 bits to a scale.
.212e	8d 2b 9f	sta $9f2b			sta 	$9F2B
.2131	a2 00		ldx #$00			ldx 	#0 							; this is offset from $9F2D to do L0
.2133	ad 14 0c	lda $0c14			lda 	currentMode					; get L0 config byte
.2136	20 84 21	jsr $2184			jsr 	CMDecodeLayer 				; and decode layer 0
.2139	a2 07		ldx #$07			ldx 	#7 							; when we do layer 1, offset by 7 hence starts at $9F34
.213b	ad 15 0c	lda $0c15			lda 	currentMode+1
.213e	20 84 21	jsr $2184			jsr 	CMDecodeLayer
.2141	20 7e 1c	jsr $1c7e			jsr 	gdModeChanged 				; check the bitmap status.
.2144	20 ba 18	jsr $18ba			jsr 	GResetStorage 				; reset the graphics drawing storage.
.2147	60		rts				rts
.2148					CMExpandMode:
.2148	a5 98		lda $98				lda 	esInt0 						; get mode number
.214a	c9 04		cmp #$04			cmp 	#(CMEndModeList-CMModeList) >> 2
.214c	b0 16		bcs $2164			bcs 	_CMModeError
.214e	0a		asl a				asl 	a 							; x 4 into X
.214f	0a		asl a				asl 	a
.2150	aa		tax				tax
.2151	98		tya				tya
.2152	48		pha				pha
.2153	a0 00		ldy #$00			ldy 	#0
.2155					_CMEMCopy:
.2155	bd 69 21	lda $2169,x			lda 	CMModeList,x
.2158	99 14 0c	sta $0c14,y			sta 	currentMode,y
.215b	e8		inx				inx
.215c	c8		iny				iny
.215d	c0 04		cpy #$04			cpy 	#4
.215f	d0 f4		bne $2155			bne 	_CMEMCopy
.2161	68		pla				pla
.2162	a8		tay				tay
.2163	60		rts				rts
.2164					_CMModeError:
.2164	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.2166	20 18 15	jsr $1518		jsr	errorHandler
.2169					CMModeList:
>2169	00 60 00 20					.dword	$20006000 					; Mode 0 which is the standard 80x60 mode, no sprites
>216d	00 60 00 25					.dword 	$25006000					; Mode 1 (40x30)
>2171	00 60 00 2a					.dword 	$2A006000 					; Mode 2 (20x15)
>2175	07 60 00 15					.dword 	$15006007 					; Mode 3 (320x200 256 colour bitmap)
.2179					CMEndModeList:
.2179					CMToScale:
.2179	29 03		and #$03			and 	#3 							; lower 2 bits only
.217b	aa		tax				tax 								; put in X for counting
.217c	a9 00		lda #$00			lda 	#0 							; zero result
.217e	38		sec				sec 								; first time rotate CS in
.217f					_CMTSLoop:
.217f	6a		ror a				ror 	a
.2180	ca		dex				dex
.2181	10 fc		bpl $217f			bpl 	_CMTSLoop
.2183	60		rts				rts
.2184					CMDecodeLayer:
.2184	48		pha				pha 								; save it.
.2185	29 f7		and #$f7			and 	#$F7 						; all the bits except T256C which you can't set using this
.2187	9d 2d 9f	sta $9f2d,x			sta 	$9F2D,X
.218a	68		pla				pla 								; get it back
.218b	29 08		and #$08			and 	#$08 						; the missing bit sets the tile size.
.218d	f0 02		beq $2191			beq 	_CMDLNotSet
.218f	a9 03		lda #$03			lda 	#$03 						; which sets both lower bits, they're square.
.2191					_CMDLNotSet:
.2191	e0 00		cpx #$00			cpx 	#0
.2193	f0 06		beq $219b			beq 	_CMDLayer0 					; layer 1 has standard defaults for tile table, e.g. $7C
.2195	09 7c		ora #$7c			ora 	#$7C 						; so set those bits and write it out.
.2197	9d 2f 9f	sta $9f2f,x			sta 	$9F2F,X
.219a	60		rts				rts
.219b					_CMDLayer0:
.219b	09 80		ora #$80			ora 	#$80 						; tile base is $80
.219d	9d 2f 9f	sta $9f2f,x			sta 	$9F2F,X
.21a0	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/video/palette.asm

.21a1					CommandPalette:
.21a1	a9 00		lda #$00			lda 	#0
.21a3	a2 0c		ldx #$0c		ldx	#12
.21a5	20 f1 3b	jsr $3bf1		jsr	mainHandler
.21a8	a2 02		ldx #$02		ldx	#2
.21aa	20 f1 3b	jsr $3bf1		jsr	mainHandler
.21ad	a9 01		lda #$01			lda 	#1
.21af	a2 08		ldx #$08		ldx	#8
.21b1	20 f1 3b	jsr $3bf1		jsr	mainHandler
.21b4	a5 98		lda $98				lda 	esInt0 					; get palette #
.21b6	20 c6 21	jsr $21c6			jsr 	PointToPaletteA			; point to palette register
.21b9	a5 99		lda $99				lda 	esInt0+1
.21bb	8d 23 9f	sta $9f23			sta 	$9F23
.21be	a5 a1		lda $a1				lda 	esInt1+1
.21c0	29 0f		and #$0f			and 	#$0F
.21c2	8d 23 9f	sta $9f23			sta 	$9F23
.21c5	60		rts				rts
.21c6					PointToPaletteA:
.21c6	0a		asl a				asl 	a 							; x 2 -> LSB
.21c7	8d 20 9f	sta $9f20			sta 	$9F20
.21ca	a9 00		lda #$00			lda 	#0 							; carry into A
.21cc	2a		rol a				rol 	a
.21cd	09 fa		ora #$fa			ora 	#$FA 						; make correct address
.21cf	8d 21 9f	sta $9f21			sta 	$9F21
.21d2	a9 11		lda #$11			lda 	#$11 						; $01 and single step => $9F22
.21d4	8d 22 9f	sta $9f22			sta 	$9F22
.21d7	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/video/vload.asm

.21d8					Command_VLoad:
.21d8	a9 00		lda #$00			lda 	#0 								; string which is the file name
.21da	a2 0e		ldx #$0e		ldx	#14
.21dc	20 f1 3b	jsr $3bf1		jsr	mainHandler
.21df	a2 01		ldx #$01			ldx 	#1 								; load address at +1.
.21e1	a5 35		lda $35				lda 	lowMemory 						; load it into lowMemory (for now ?)
.21e3	95 98		sta $98,x			sta 	esInt0,x
.21e5	a5 36		lda $36				lda 	lowMemory+1
.21e7	95 a0		sta $a0,x			sta 	esInt1,x
.21e9	a9 00		lda #$00			lda 	#0
.21eb	95 a8		sta $a8,x			sta 	esInt2,x
.21ed	95 b0		sta $b0,x			sta 	esInt3,x
.21ef	a2 0e		ldx #$0e		ldx	#14
.21f1	20 f6 14	jsr $14f6		jsr	deviceHandler
.21f4	a5 99		lda $99				lda 	esInt0+1 						; (temp0) is where we are decoding from.
.21f6	85 2a		sta $2a				sta 	temp0
.21f8	a5 a1		lda $a1				lda 	esInt1+1
.21fa	85 2b		sta $2b				sta 	temp0+1
.21fc	20 78 22	jsr $2278			jsr 	LoadVRAMFile 					; load the VRAM file in.
.21ff	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/video/vpeekpoke.asm

.2200					Command_VPoke:
.2200	38		sec				sec 						; one byte , CS
.2201	b0 01		bcs $2204			bcs 	CmdVideoWrite
.2203					Command_VDoke:
.2203	18		clc				clc 						; two bytes, CC
.2204					CmdVideoWrite:
.2204	08		php				php 						; save one or two btes
.2205	a9 00		lda #$00			lda 	#0  				; get address and value into levels 0,1
.2207	a2 0a		ldx #$0a		ldx	#10
.2209	20 f1 3b	jsr $3bf1		jsr	mainHandler
.220c	a2 02		ldx #$02		ldx	#2
.220e	20 f1 3b	jsr $3bf1		jsr	mainHandler
.2211	a9 01		lda #$01			lda 	#1
.2213	a2 0a		ldx #$0a		ldx	#10
.2215	20 f1 3b	jsr $3bf1		jsr	mainHandler
.2218	a2 00		ldx #$00			ldx 	#0
.221a	20 2b 22	jsr $222b			jsr 	SetUpTOSVRamAddress ; copy target address to VRAM address registers
.221d	a5 99		lda $99				lda 	esInt0+1 			; get MSB of write value
.221f	8d 23 9f	sta $9f23			sta 	$9F23
.2222	28		plp				plp 						; if it was Poke then exit
.2223	b0 05		bcs $222a			bcs 	_CVWExit
.2225	a5 a1		lda $a1				lda 	esInt1+1 			; doke, write the MSB.
.2227	8d 23 9f	sta $9f23			sta 	$9F23
.222a					_CVWExit:
.222a	60		rts				rts
.222b					SetUpTOSVRamAddress:
.222b	b5 a8		lda $a8,x			lda 	esInt2,x 			; check range of address, data to $FFFF
.222d	29 fe		and #$fe			and 	#$FE
.222f	15 b0		ora $b0,x			ora 	esInt3,x
.2231	d0 14		bne $2247			bne 	CVWValue
.2233	b5 98		lda $98,x			lda 	esInt0,x			; set address up
.2235	8d 20 9f	sta $9f20			sta 	$9F20
.2238	b5 a0		lda $a0,x			lda 	esInt1,x
.223a	8d 21 9f	sta $9f21			sta	 	$9F21
.223d	b5 a8		lda $a8,x			lda 	esInt2,x
.223f	29 01		and #$01			and 	#1
.2241	09 10		ora #$10			ora 	#$10 				; step 1.
.2243	8d 22 9f	sta $9f22			sta 	$9F22
.2246	60		rts				rts
.2247					CVWValue:
.2247	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.2249	20 18 15	jsr $1518		jsr	errorHandler
.224c					Command_VPeek:
.224c	38		sec				sec 						; one byte , CS
.224d	b0 01		bcs $2250			bcs 	CmdVideoRead
.224f					Command_VDeek:
.224f	18		clc				clc 						; two bytes, CC
.2250					CmdVideoRead:
.2250	08		php				php 						; save action on stack.
.2251	48		pha				pha 						; save stack position
.2252	a2 0a		ldx #$0a		ldx	#10
.2254	20 f1 3b	jsr $3bf1		jsr	mainHandler
.2257	a2 04		ldx #$04		ldx	#4
.2259	20 f1 3b	jsr $3bf1		jsr	mainHandler
.225c	68		pla				pla
.225d	aa		tax				tax
.225e	20 2b 22	jsr $222b			jsr 	SetUpTOSVRamAddress	; set up VRAM address.
.2261	a9 00		lda #$00			lda 	#0 					; zero upper 3 bytes
.2263	95 a0		sta $a0,x			sta 	esInt1,x
.2265	95 a8		sta $a8,x			sta 	esInt2,x
.2267	95 b0		sta $b0,x			sta 	esInt3,x
.2269	ad 23 9f	lda $9f23			lda 	$9F23				; copy 1st byte
.226c	95 98		sta $98,x			sta 	esInt0,x
.226e	28		plp				plp 						; check if DOKE (carry was clear)
.226f	b0 05		bcs $2276			bcs 	_CVRExit
.2271	ad 23 9f	lda $9f23			lda 	$9F23 				; copy 2nd byte
.2274	95 a0		sta $a0,x			sta 	esInt1,x
.2276					_CVRExit:
.2276	8a		txa				txa 						; return X position.
.2277	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/video/vramprocess.asm

.0c18					compressMode:
>0c18							.fill 	1
.0c19					imageInfo:
>0c19							.fill 	X16MaxImages
.0c59					imageAddr2Low:
>0c59							.fill  	X16MaxImages
.0c99					imageAddr2High:
>0c99							.fill  	X16MaxImages
.2278					LoadVRAMFile:
.2278	8a		txa				txa
.2279	48		pha				pha
.227a	98		tya				tya
.227b	48		pha				pha
.227c					_LVRLoop:
.227c	20 58 23	jsr $2358			jsr 	LVFGet 						; get the next (never access direct)
.227f	c9 80		cmp #$80			cmp 	#$80 						; exit ?
.2281	f0 42		beq $22c5			beq 	_LVRExit
.2283	b0 5c		bcs $22e1			bcs 	_LVRLoad 					; load data in ?
.2285	c9 08		cmp #$08			cmp 	#$08 						; is it set address ?
.2287	90 11		bcc $229a			bcc 	_LVRSetAddress
.2289	c9 0f		cmp #$0f			cmp 	#$0F 						; is it define palette
.228b	f0 3d		beq $22ca			beq 	_LVRSetPalette
.228d	c9 10		cmp #$10			cmp 	#$10 						; is it set compression type ?
.228f	90 2d		bcc $22be			bcc 	_LVRSetCompress
.2291	c9 64		cmp #$64			cmp 	#$64 						; is it set sprite type.
.2293	90 60		bcc $22f5			bcc 	_LVRSetSprite
.2295	a2 01		ldx #$01			ldx 	#ErrorID_missing
.2297	20 18 15	jsr $1518		jsr	errorHandler
.229a					_LVRSetAddress:
.229a	85 2d		sta $2d				sta 	temp1+1 					; 24 bit in temp1+1/temp1/A
.229c	20 58 23	jsr $2358			jsr 	LVFGet
.229f	85 2c		sta $2c				sta 	temp1
.22a1	a9 00		lda #$00			lda 	#0
.22a3	46 2d		lsr $2d				lsr 	temp1+1 					; / 2 twice.
.22a5	66 2c		ror $2c				ror 	temp1
.22a7	6a		ror a				ror		a
.22a8	46 2d		lsr $2d				lsr 	temp1+1
.22aa	66 2c		ror $2c				ror 	temp1
.22ac	6a		ror a				ror		a
.22ad	8d 20 9f	sta $9f20			sta 	$9F20 						; set write address with +1 increment
.22b0	a5 2c		lda $2c				lda 	temp1
.22b2	8d 21 9f	sta $9f21			sta 	$9F21
.22b5	a5 2d		lda $2d				lda 	temp1+1
.22b7	09 10		ora #$10			ora 	#$10
.22b9	8d 22 9f	sta $9f22			sta 	$9F22
.22bc	d0 be		bne $227c			bne 	_LVRLoop
.22be					_LVRSetCompress:
.22be	29 07		and #$07			and 	#7
.22c0	8d 18 0c	sta $0c18			sta 	compressMode
.22c3	10 b7		bpl $227c			bpl 	_LVRLoop
.22c5					_LVRExit:
.22c5	68		pla				pla
.22c6	a8		tay				tay
.22c7	68		pla				pla
.22c8	aa		tax				tax
.22c9	60		rts				rts
.22ca					_LVRSetPalette:
.22ca	20 58 23	jsr $2358			jsr 	LVFGet 						; get palette id.
.22cd	20 c6 21	jsr $21c6			jsr 	PointToPaletteA 			; in palette.asm
.22d0	20 58 23	jsr $2358			jsr 	LVFGet 						; copy 12 bit palette data in.
.22d3	8d 23 9f	sta $9f23			sta 	$9F23
.22d6	20 58 23	jsr $2358			jsr 	LVFGet
.22d9	29 0f		and #$0f			and 	#$0F
.22db	8d 23 9f	sta $9f23			sta 	$9F23
.22de	4c 7c 22	jmp $227c			jmp 	_LVRLoop
.22e1					_LVRLoad:
.22e1	ae 18 0c	ldx $0c18			ldx 	compressMode
.22e4	d0 55		bne $233b			bne 	_LVRNotMode0
.22e6	29 7f		and #$7f			and 	#$7F 						; count in X (is > 0)
.22e8					_LVRLCopyX:
.22e8	aa		tax				tax
.22e9					_LVRLCopy:
.22e9	20 58 23	jsr $2358			jsr 	LVFGet 						; write to data.
.22ec	8d 23 9f	sta $9f23			sta 	$9F23
.22ef	ca		dex				dex
.22f0	d0 f7		bne $22e9			bne 	_LVRLCopy
.22f2	4c 7c 22	jmp $227c			jmp 	_LVRLoop
.22f5					_LVRSetSprite:
.22f5	48		pha				pha 								; save on stack
.22f6	20 58 23	jsr $2358			jsr 	LVFGet 						; get the sprite number into X
.22f9	aa		tax				tax
.22fa	c9 40		cmp #$40			cmp 	#X16MaxImages				; too high ?
.22fc	b0 38		bcs $2336			bcs 	_LVRSSValue
.22fe	68		pla				pla 								; restore the data held in the first byte
.22ff	9d 19 0c	sta $0c19,x			sta 	imageInfo,x 				; and write into the sprite image table.
.2302					_LVRAlignVRAM:
.2302	ad 20 9f	lda $9f20			lda 	$9F20 						; check VRAM on 32 byte boundary
.2305	29 1f		and #$1f			and 	#$1F
.2307	f0 07		beq $2310			beq 	_LVRAligned
.2309	a9 00		lda #$00			lda 	#$00
.230b	8d 23 9f	sta $9f23			sta 	$9F23
.230e	f0 f2		beq $2302			beq 	_LVRAlignVRAM
.2310					_LVRAligned:
.2310	ad 22 9f	lda $9f22			lda 	$9F22 						; put address/32 in sprite image table
.2313	4a		lsr a				lsr 	a 	 						; first halve into temp1
.2314	ad 21 9f	lda $9f21			lda 	$9F21
.2317	6a		ror a				ror 	a
.2318	85 2d		sta $2d				sta 	temp1+1
.231a	ad 20 9f	lda $9f20			lda 	$9F20
.231d	6a		ror a				ror 	a
.231e	85 2c		sta $2c				sta 	temp1
.2320	a0 04		ldy #$04			ldy 	#4 							; divide it by 16 in temp1
.2322					_LVRShift:
.2322	46 2d		lsr $2d				lsr 	temp1+1
.2324	66 2c		ror $2c				ror 	temp1
.2326	88		dey				dey
.2327	d0 f9		bne $2322			bne 	_LVRShift
.2329	a5 2d		lda $2d				lda 	temp1+1 					; copy result.
.232b	9d 99 0c	sta $0c99,x			sta 	imageAddr2High,x
.232e	a5 2c		lda $2c				lda 	temp1
.2330	9d 59 0c	sta $0c59,x			sta 	imageAddr2Low,x
.2333	4c 7c 22	jmp $227c			jmp 	_LVRLoop
.2336					_LVRSSValue:
.2336	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.2338	20 18 15	jsr $1518		jsr	errorHandler
.233b					_LVRNotMode0:
.233b	e0 01		cpx #$01			cpx 	#1
.233d	d0 15		bne $2354			bne 	_LVRNotMode1
.233f	29 7f		and #$7f			and 	#$7F 						; drop bit 7
.2341	c9 40		cmp #$40			cmp 	#$40
.2343	90 a3		bcc $22e8			bcc 	_LVRLCopyX 					; 00-3F use mode 0's copying code.
.2345					_LVRRLEGroup:
.2345	29 3f		and #$3f			and 	#$3F
.2347	aa		tax				tax
.2348	20 58 23	jsr $2358			jsr 	LVFGet
.234b					_LVRLEGroupLoop:
.234b	8d 23 9f	sta $9f23			sta 	$9F23
.234e	ca		dex				dex
.234f	d0 fa		bne $234b			bne 	_LVRLEGroupLoop
.2351	4c 7c 22	jmp $227c			jmp 	_LVRLoop
.2354					_LVRNotMode1:
>2354	db						.byte 	$DB
.2355	4c 54 23	jmp $2354			jmp 	_LVRNotMode1
.2358	84 32		sty $32		LVFGet:	sty 	tempShort
.235a	a0 00		ldy #$00			ldy 	#0
.235c	b1 2a		lda ($2a),y			lda 	(temp0),y
.235e	a4 32		ldy $32				ldy	 	tempShort
.2360	e6 2a		inc $2a				inc 	temp0
.2362	d0 02		bne $2366			bne 	_LVFGExit
.2364	e6 2b		inc $2b				inc 	temp0+1
.2366					_LVFGExit:
.2366	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Return to file: basic.asm

.2367					section_end_extension:
.2367					section_start_floatingpoint:

;******  Processing file: floatingpoint/floatingpoint.asm

.2367					floatingpointHandler:
.2367	a2 03		ldx #$03			ldx 	#ErrorID_NoModule
.2369	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: basic.asm

.236c					section_end_floatingpoint:
.236c					section_start_interaction:

;******  Processing file: interaction/interaction.asm


;******  Processing file: interaction/cold.asm

.236c					ColdStartEntry:
.236c	a2 ff		ldx #$ff			ldx 	#$FF
.236e	9a		txs				txs
.236f	20 f8 23	jsr $23f8			jsr 	ForceStandardMode
.2372	a2 04		ldx #$04		ldx	#4
.2374	20 f6 14	jsr $14f6		jsr	deviceHandler
.2377	a0 ff		ldy #$ff			ldy 	#255
.2379					_CSBanner:
.2379	c8		iny				iny
.237a	b9 a0 23	lda $23a0,y			lda 	Intro,y
.237d	f0 14		beq $2393			beq 	_CSStart
.237f	c9 08		cmp #$08			cmp 	#8
.2381	90 08		bcc $238b			bcc 	_CSInk
.2383	a2 16		ldx #$16		ldx	#22
.2385	20 f6 14	jsr $14f6		jsr	deviceHandler
.2388	4c 79 23	jmp $2379			jmp 	_CSBanner
.238b					_CSInk:
.238b	a2 08		ldx #$08		ldx	#8
.238d	20 f6 14	jsr $14f6		jsr	deviceHandler
.2390	4c 79 23	jmp $2379			jmp 	_CSBanner
.2393					_CSStart:
.2393	a2 16		ldx #$16		ldx	#22
.2395	20 f1 3b	jsr $3bf1		jsr	mainHandler
.2398	a2 06		ldx #$06		ldx	#6
.239a	20 f1 3b	jsr $3bf1		jsr	mainHandler
.239d	4c b8 24	jmp $24b8			jmp 	WarmStartEntry
>23a0	06 2a 2a 2a 20 36 35 30		Intro:	.text 	6,"*** 6502 Extended BASIC ***",13,13
>23a8	32 20 45 78 74 65 6e 64 65 64 20 42 41 53 49 43
>23b8	20 2a 2a 2a 0d 0d
>23be	03 57 72 69 74 74 65 6e				.text 	3,"Written by Paul Robson 2021",13,13
>23c6	20 62 79 20 50 61 75 6c 20 52 6f 62 73 6f 6e 20
>23d6	32 30 32 31 0d 0d
>23dc	02 42 61 73 69 63 20				.text 	2,"Basic "
>23e3	30 2e 32 30					.text "0.20"
>23e7	20 28						.text 	" ("
>23e9	30 33 2d 41 70 72 2d 32				.text "03-Apr-2021"
>23f1	30 32 31
>23f4	29 0d 0d 00					.text 	")",13,13,0
.23f8					ForceStandardMode:
.23f8	a9 fe		lda #$fe			lda 	#$FE
.23fa	20 69 18	jsr $1869		jsr	extensionHandler
.23fd	60		rts				rts

;******  Return to file: interaction/interaction.asm


;******  Processing file: interaction/delete.asm

.23fe					DeleteLine:
.23fe	ad c8 0a	lda $0ac8			lda 	basePage 					; copy program base to temp0
.2401	85 2a		sta $2a				sta 	temp0
.2403	ad c9 0a	lda $0ac9			lda 	basePage+1
.2406	85 2b		sta $2b				sta 	temp0+1
.2408	a0 01		ldy #$01	_DLLoop:ldy 	#1 							; see if found line ?
.240a	a5 98		lda $98				lda 	esInt0 						; e.g. the linenumbers match
.240c	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.240e	d0 07		bne $2417			bne 	_DLNext
.2410	c8		iny				iny
.2411	a5 a0		lda $a0				lda 	esInt1
.2413	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.2415	f0 06		beq $241d			beq 	_DLFound
.2417	20 3b 24	jsr $243b	_DLNext:jsr 	IAdvanceTemp0 				; shift temp0 forward, return Z flag set if end.
.241a	d0 ec		bne $2408			bne 	_DLLoop
.241c	60		rts				rts
.241d					_DLFound:
.241d	a0 00		ldy #$00			ldy 	#0 							; this is the line to cut, so this offset is the bytes to remove
.241f	b1 2a		lda ($2a),y			lda 	(temp0),y
.2421	a8		tay				tay 								; so we copy from (temp0),y
.2422	a2 00		ldx #$00			ldx 	#0  						; to (temp0,x)
.2424					_DLCopyDown:
.2424	b1 2a		lda ($2a),y			lda 	(temp0),y 					; copy one byte.
.2426	81 2a		sta ($2a,x)			sta 	(temp0,x)
.2428	e6 2a		inc $2a				inc 	temp0 						; advance pointer
.242a	d0 02		bne $242e			bne 	_DLNoCarry
.242c	e6 2b		inc $2b				inc 	temp0+1
.242e					_DLNoCarry:
.242e	a5 2a		lda $2a				lda 	temp0 						; until hit low memory
.2430	c5 35		cmp $35				cmp 	lowMemory 					; which is comfortably after End Program.
.2432	d0 f0		bne $2424			bne 	_DLCopyDown
.2434	a5 2b		lda $2b				lda 	temp0+1
.2436	c5 36		cmp $36				cmp 	lowMemory+1
.2438	d0 ea		bne $2424			bne 	_DLCopyDown
.243a	60		rts				rts
.243b					IAdvanceTemp0:
.243b	84 32		sty $32				sty 	tempShort
.243d	18		clc				clc
.243e	a0 00		ldy #$00			ldy 	#0 							; get offset
.2440	b1 2a		lda ($2a),y			lda 	(temp0),y 					; add to temp0
.2442	65 2a		adc $2a				adc 	temp0
.2444	85 2a		sta $2a				sta 	temp0
.2446	90 02		bcc $244a			bcc 	_IATNoCarry
.2448	e6 2b		inc $2b				inc 	temp0+1
.244a					_IATNoCarry:
.244a	b1 2a		lda ($2a),y			lda 	(temp0),y
.244c	a4 32		ldy $32				ldy 	tempShort
.244e	c9 00		cmp #$00			cmp		#0 							; Z set if program end.
.2450	60		rts				rts

;******  Return to file: interaction/interaction.asm


;******  Processing file: interaction/insert.asm

.2451					InsertLine:
.2451	ad c8 0a	lda $0ac8			lda 	basePage 					; copy program base to temp0
.2454	85 2a		sta $2a				sta 	temp0
.2456	ad c9 0a	lda $0ac9			lda 	basePage+1
.2459	85 2b		sta $2b				sta 	temp0+1
.245b					_ILLoop:
.245b	a0 01		ldy #$01			ldy 	#1
.245d	b1 2a		lda ($2a),y			lda 	(temp0),y
.245f	c5 98		cmp $98				cmp 	esInt0
.2461	c8		iny				iny
.2462	b1 2a		lda ($2a),y			lda 	(temp0),y
.2464	e5 a0		sbc $a0				sbc 	esInt1
.2466	b0 05		bcs $246d			bcs 	_ILFound 					; we know it cannot be equal, it would have been deleted
.2468	20 3b 24	jsr $243b			jsr 	IAdvanceTemp0 				; shift temp0 forward, return Z flag set if end.
.246b	d0 ee		bne $245b			bne 	_ILLoop
.246d					_ILFound:
.246d	a5 35		lda $35				lda 	lowMemory 					; shift lowMemory up to make space for it.
.246f	85 2c		sta $2c				sta 	temp1             			; this pointer goes backwards
.2471	a5 36		lda $36				lda 	lowMemory+1
.2473	85 2d		sta $2d				sta 	temp1+1
.2475	ad 16 0e	lda $0e16			lda 	tokenBufferIndex 			; space to make in Y, 0 in X.
.2478	18		clc				clc 								; add 3 for the line number and offset.
.2479	69 03		adc #$03			adc 	#3 							; tokenbuffer already has $80
.247b	a8		tay				tay
.247c	a2 00		ldx #$00			ldx 	#0
.247e	a1 2c		lda ($2c,x)	_ILMove:lda 	(temp1,x)					; shift up
.2480	91 2c		sta ($2c),y			sta 	(temp1),y
.2482	a5 2c		lda $2c				lda 	temp1 						; check reached the insert point ?
.2484	c5 2a		cmp $2a				cmp 	temp0
.2486	d0 06		bne $248e			bne 	_ILMNext
.2488	a5 2d		lda $2d				lda 	temp1+1
.248a	c5 2b		cmp $2b				cmp 	temp0+1
.248c	f0 0b		beq $2499			beq 	_ILMCopy
.248e					_ILMNext:
.248e	a5 2c		lda $2c				lda 	temp1
.2490	d0 02		bne $2494			bne 	_ILNoBorrow
.2492	c6 2d		dec $2d				dec 	temp1+1
.2494					_ILNoBorrow:
.2494	c6 2c		dec $2c				dec 	temp1
.2496	4c 7e 24	jmp $247e			jmp 	_ILMove 					; and go round again
.2499					_ILMCopy:
.2499	98		tya				tya 								; Y is the offset of the new line.
.249a	81 2a		sta ($2a,x)			sta 	(temp0,x)					; X = 0 still.
.249c	a0 01		ldy #$01			ldy 	#1 							; copy in line number.
.249e	a5 98		lda $98				lda 	esInt0
.24a0	91 2a		sta ($2a),y			sta 	(temp0),y
.24a2	c8		iny				iny
.24a3	a5 a0		lda $a0				lda 	esInt1
.24a5	91 2a		sta ($2a),y			sta 	(temp0),y
.24a7	a0 00		ldy #$00			ldy 	#0 							; copy the body in
.24a9					_ILMCopy2:
.24a9	b1 28		lda ($28),y			lda 	(codePtr),y
.24ab	c8		iny				iny
.24ac	c8		iny				iny
.24ad	c8		iny				iny
.24ae	91 2a		sta ($2a),y			sta 	(temp0),y
.24b0	88		dey				dey
.24b1	88		dey				dey
.24b2	cc 16 0e	cpy $0e16			cpy 	tokenBufferIndex
.24b5	d0 f2		bne $24a9			bne 	_ILMCopy2
.24b7	60		rts				rts

;******  Return to file: interaction/interaction.asm


;******  Processing file: interaction/warm.asm

.24b8					WarmStartEntry:
.24b8	a2 ff		ldx #$ff			ldx 	#$FF
.24ba	9a		txs				txs
.24bb	20 f8 23	jsr $23f8			jsr 	ForceStandardMode
.24be	a9 02		lda #$02			lda 	#2							; green text.
.24c0	a2 08		ldx #$08		ldx	#8
.24c2	20 f6 14	jsr $14f6		jsr	deviceHandler
.24c5	a2 0c		ldx #$0c		ldx	#12
.24c7	20 f6 14	jsr $14f6		jsr	deviceHandler
.24ca	a5 2a		lda $2a				lda 	temp0	 					; copy temp0 to codePtr
.24cc	85 28		sta $28				sta 	codePtr
.24ce	a5 2b		lda $2b				lda 	temp0+1
.24d0	85 29		sta $29				sta 	codePtr+1
.24d2	a2 06		ldx #$06		ldx	#6
.24d4	20 f6 14	jsr $14f6		jsr	deviceHandler
.24d7	a2 08		ldx #$08		ldx	#8
.24d9	20 31 47	jsr $4731		jsr	tokeniserHandler
.24dc	c9 00		cmp #$00			cmp 	#0
.24de	f0 25		beq $2505			beq 	WSEError 					; failed (tokenise can fail if it doesn't know a character e.g. |)
.24e0	a9 13		lda #$13			lda 	#(tokenHeader) & $FF
.24e2	85 28		sta $28				sta 	codePtr
.24e4	a9 0d		lda #$0d			lda 	#(tokenHeader) >> 8
.24e6	85 29		sta $29				sta 	1+(codePtr)
.24e8	ad 16 0d	lda $0d16			lda 	tokenBuffer 				; is it a blank line, go get another line.
.24eb	c9 80		cmp #$80			cmp 	#$80
.24ed	f0 c9		beq $24b8			beq 	WarmStartEntry
.24ef	29 c0		and #$c0			and 	#$C0						; does it start with a number
.24f1	c9 40		cmp #$40			cmp 	#$40 						; e.g. is it 01xx xxxx
.24f3	f0 15		beq $250a			beq 	HasLineNumber
.24f5	a9 00		lda #$00			lda 	#0 							; zero the token header, so it will look like a
.24f7	8d 13 0d	sta $0d13			sta 	tokenHeader 				; fake program line.
.24fa	8d 14 0d	sta $0d14			sta 	tokenHeader+1
.24fd	8d 15 0d	sta $0d15			sta 	tokenHeader+2
.2500	a2 18		ldx #$18		ldx	#24
.2502	20 f1 3b	jsr $3bf1		jsr	mainHandler
.2505					WSEError:
.2505	a2 1e		ldx #$1e			ldx 	#ErrorID_Tokenise
.2507	20 18 15	jsr $1518		jsr	errorHandler
.250a					HasLineNumber:
.250a	a0 03		ldy #$03			ldy 	#3 							; get line number
.250c	a9 00		lda #$00			lda 	#0
.250e	a2 0a		ldx #$0a		ldx	#10
.2510	20 f1 3b	jsr $3bf1		jsr	mainHandler
.2513	a5 a8		lda $a8				lda 	esInt2		 				; check in range (only 2 bytes)
.2515	05 b0		ora $b0				ora 	esInt3
.2517	d0 ec		bne $2505			bne 	WSEError
.2519	98		tya				tya 								; make codePtr point to code after the line number.
.251a	18		clc				clc 								; by skipping over the tokenised number.
.251b	65 28		adc $28				adc 	codePtr
.251d	85 28		sta $28				sta 	codePtr
.251f	90 02		bcc $2523			bcc		_HLNNoCarry
.2521	e6 29		inc $29				inc 	codePtr+1
.2523					_HLNNoCarry:
.2523	98		tya				tya 								; subtract that offset from the code buffer index
.2524	38		sec				sec
.2525	49 ff		eor #$ff			eor 	#$FF
.2527	6d 16 0e	adc $0e16			adc 	tokenBufferIndex
.252a	18		clc				clc 								; add space allowing for header & $80 trailer
.252b	69 04		adc #$04			adc 	#4
.252d	8d 16 0e	sta $0e16			sta 	tokenBufferIndex 			; this is the number of bytes occupied.
.2530	20 fe 23	jsr $23fe			jsr 	DeleteLine 					; always delete the line, it's deleted and reinserted.
.2533					_HLNNoDelete:
.2533	ad 16 0e	lda $0e16			lda 	tokenBufferIndex 			; if line was empty, then don't insert
.2536	c9 01		cmp #$01			cmp 	#1 							; (the one character is the EOL marker)
.2538	f0 0c		beq $2546			beq 	_HLMEditDone
.253a	a5 36		lda $36				lda 	lowMemory+1 				; is there space, if we allow a little bit of
.253c	18		clc				clc 								; workspace (1k)
.253d	69 04		adc #$04			adc 	#4 							; e.g. 4 x 256
.253f	c5 34		cmp $34				cmp 	highMemory+1
.2541	b0 0b		bcs $254e			bcs 	_HLMMemory 					; nope, won't allowit.
.2543	20 51 24	jsr $2451			jsr 	InsertLine 					; insert the line in
.2546					_HLMEditDone:
.2546	a2 06		ldx #$06		ldx	#6
.2548	20 f1 3b	jsr $3bf1		jsr	mainHandler
.254b	4c b8 24	jmp $24b8			jmp 	WarmStartEntry
.254e					_HLMMemory:
.254e	a2 22		ldx #$22			ldx 	#ErrorID_Memory
.2550	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: interaction/interaction.asm

.2553					interactionHandler:
.2553	7c 56 25	jmp ($2556,x)			jmp 	(interactionVectors,x)
.2556					interactionVectors:
>2556	5c 25					.word _DummyControlHandler ; index 0
>2558	6c 23					.word ColdStartEntry       ; index 2
>255a	b8 24					.word WarmStartEntry       ; index 4
.255c					_DummyControlHandler:
.255c	60		rts			rts

;******  Return to file: basic.asm

.255d					section_end_interaction:
.255d					section_start_main:

;******  Processing file: main/main.asm


;******  Processing file: main/commands/compat/readdata.asm

.0cd9					dataPtr:
>0cd9							.fill 	2
.0cdb					dataIndex:
>0cdb							.fill 	1
.255d					CommandRead:
.255d	a2 00		ldx #$00			ldx 	#0 							; get a reference to a variable in stack:0
.255f	20 a4 34	jsr $34a4			jsr 	EvaluateReference
.2562	20 a3 25	jsr $25a3			jsr 	SwapDPCP 					; use the data pointer.
.2565	b1 28		lda ($28),y			lda 	(codePtr),y 				; see where it is.
.2567	c8		iny				iny
.2568	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; if it is on a comma, it is in data.
.256a	f0 07		beq $2573			beq 	_CRInData
.256c	88		dey				dey
.256d	a9 d9		lda #$d9			lda 	#TKW_DATA 					; scan forward to a DATA statement.
.256f	aa		tax				tax
.2570	20 a4 2c	jsr $2ca4			jsr 	ScanForward
.2573					_CRInData:
.2573	a2 01		ldx #$01			ldx 	#1 							; evaluate a value at Stack,1
.2575	20 4c 34	jsr $344c			jsr 	Evaluate
.2578	ca		dex				dex 								; and write the value.
.2579	20 f7 27	jsr $27f7			jsr 	WriteValue
.257c	20 a3 25	jsr $25a3			jsr 	SwapDPCP 					; get the code pointer back.
.257f	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows ?
.2581	c8		iny				iny
.2582	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; if comma, another variable
.2584	f0 d7		beq $255d			beq 	CommandRead
.2586	88		dey				dey
.2587	60		rts				rts
.2588					CommandData:
.2588	a9 80		lda #$80			lda 	#TOK_EOL 					; go forward to end of line or colon.
.258a	a2 ca		ldx #$ca			ldx 	#TKW_COLON
.258c	20 a4 2c	jsr $2ca4			jsr 	ScanForward
.258f	88		dey				dey 								; ending on EOL is a scan issue, as it increments
.2590	60		rts				rts
.2591					CommandRestore:
.2591	ad c8 0a	lda $0ac8			lda 	basePage
.2594	8d d9 0c	sta $0cd9			sta 	dataPtr
.2597	ad c9 0a	lda $0ac9			lda 	basePage+1
.259a	8d da 0c	sta $0cda			sta 	dataPtr+1
.259d	a9 03		lda #$03			lda 	#3
.259f	8d db 0c	sta $0cdb			sta 	dataIndex
.25a2	60		rts				rts
.25a3					SwapDPCP:
.25a3	8a		txa				txa
.25a4	48		pha				pha
.25a5	98		tya				tya 								; swap Y, DataIndex
.25a6	ac db 0c	ldy $0cdb			ldy 	DataIndex
.25a9	8d db 0c	sta $0cdb			sta 	DataIndex
.25ac	a5 28		lda $28				lda 	codePtr 					; swap code/dataptr low
.25ae	ae d9 0c	ldx $0cd9			ldx 	dataptr
.25b1	8d d9 0c	sta $0cd9			sta 	dataPtr
.25b4	86 28		stx $28				stx 	codePtr
.25b6	a5 29		lda $29				lda 	codePtr+1 					; swap code/dataptr high.
.25b8	ae da 0c	ldx $0cda			ldx 	dataptr+1
.25bb	8d da 0c	sta $0cda			sta 	dataPtr+1
.25be	86 29		stx $29				stx 	codePtr+1
.25c0	68		pla				pla
.25c1	aa		tax				tax
.25c2	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/compat/transfer.asm

.25c3					CommandGOSUB:
.25c3	20 69 34	jsr $3469			jsr 	EvaluateRootInteger			; get GOSUB line on stack top.
.25c6	a2 04		ldx #$04			ldx 	#4 							; allocate 4 bytes on stack for GOSUB
.25c8	a9 47		lda #$47			lda 	#markerGOSUB  				; <marker> <return addr/offset>
.25ca	20 9e 3b	jsr $3b9e			jsr 	RSClaim
.25cd	a9 01		lda #$01			lda 	#1 							; save position at offset 1.
.25cf	20 ca 3b	jsr $3bca			jsr 	RSSavePosition
.25d2	a2 00		ldx #$00			ldx 	#0 							; point back at GOSUB line
.25d4	f0 1b		beq $25f1			beq 	GotoTOS 					; and do a GOTO there.
.25d6					CommandRETURN:
.25d6	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.25d8	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.25da	c9 47		cmp #$47			cmp 	#markerGOSUB 						; does it match
.25dc	f0 05		beq $25e3			beq 	_isok
.25de	a2 0e		ldx #$0e			ldx 	#ErrorID_returnErr
.25e0	20 18 15	jsr $1518		jsr	errorHandler
.25e3					_isok:
.25e3	a9 01		lda #$01			lda 	#1
.25e5	20 dd 3b	jsr $3bdd			jsr 	RSLoadPosition 				; reload the position from offset 1.
.25e8	a9 04		lda #$04			lda 	#4 							; throw 4 bytes from stack.
.25ea	20 c0 3b	jsr $3bc0			jsr 	RSFree
.25ed	60		rts				rts
.25ee					CommandGOTO:
.25ee	20 69 34	jsr $3469			jsr 	EvaluateRootInteger 		; get GOTO line on stack top.
.25f1					GotoTOS:
.25f1	20 8a 2f	jsr $2f8a			jsr 	ResetCodeAddress 			; simple search.
.25f4					_GotoSearch:
.25f4	a0 00		ldy #$00			ldy 	#0 							; get offset
.25f6	b1 28		lda ($28),y			lda 	(codePtr),y
.25f8	f0 21		beq $261b			beq 	_GotoError 					; not found.
.25fa	c8		iny				iny									; check LSB match
.25fb	b1 28		lda ($28),y			lda 	(codePtr),y
.25fd	d5 98		cmp $98,x			cmp 	esInt0,x
.25ff	d0 07		bne $2608			bne 	_GotoNext
.2601	c8		iny				iny
.2602	b1 28		lda ($28),y			lda 	(codePtr),y
.2604	d5 a0		cmp $a0,x			cmp 	esInt1,x
.2606	f0 10		beq $2618			beq 	_GotoFound
.2608					_GotoNext:
.2608	a0 00		ldy #$00			ldy 	#0 							; go next line
.260a	b1 28		lda ($28),y			lda 	(codePtr),y
.260c	18		clc				clc
.260d	65 28		adc $28				adc 	codePtr
.260f	85 28		sta $28				sta 	codePtr
.2611	90 e1		bcc $25f4			bcc 	_GotoSearch
.2613	e6 29		inc $29				inc 	codePtr+1
.2615	4c f4 25	jmp $25f4			jmp 	_GotoSearch
.2618					_GotoFound:
.2618	a0 03		ldy #$03			ldy 	#3 							; continue from that line
.261a	60		rts				rts
.261b					_GotoError:
.261b	a2 0c		ldx #$0c			ldx 	#ErrorID_LineNumber
.261d	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/commands/io/input.asm

=32					MaxInputSize = 32
.0cdc					InputBuffer:
>0cdc							.fill 	MaxInputSize+1
.2620					Command_Input:
.2620	b1 28		lda ($28),y			lda 	(codePtr),y 			; see what's next.
.2622	c8		iny				iny
.2623	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 				; ignore commas.
.2625	f0 f9		beq $2620			beq 	Command_Input
.2627	88		dey				dey 							; undo consume
.2628	c9 ca		cmp #$ca			cmp 	#TKW_COLON
.262a	f0 54		beq $2680			beq 	_CIExit 				; : or EOL, exit
.262c	c9 80		cmp #$80			cmp 	#TOK_EOL
.262e	f0 50		beq $2680			beq 	_CIExit
.2630	c9 40		cmp #$40			cmp 	#$40 					; variable ?
.2632	90 12		bcc $2646			bcc 	_CIVariable
.2634	c9 85		cmp #$85			cmp 	#TOK_STR 				; if not quoted string syntax error.
.2636	d0 43		bne $267b			bne 	_CISyntax
.2638	a2 00		ldx #$00			ldx 	#0
.263a	20 60 34	jsr $3460			jsr 	EvaluateString 			; evaluate and print string
.263d	20 59 28	jsr $2859			jsr 	TOSToTemp0
.2640	20 4f 27	jsr $274f			jsr 	PrintString
.2643	4c 20 26	jmp $2620			jmp 	Command_Input
.2646					_CIVariable:
.2646	a2 00		ldx #$00			ldx 	#0 						; evaluate a reference.
.2648	20 a4 34	jsr $34a4			jsr 	EvaluateReference  		; this is where its going
.264b					_CIRetry:
.264b	a9 3f		lda #$3f			lda 	#"?"					; print prompt
.264d	a2 14		ldx #$14		ldx	#20
.264f	20 f6 14	jsr $14f6		jsr	deviceHandler
.2652	98		tya				tya
.2653	48		pha				pha
.2654	20 94 26	jsr $2694			jsr 	InputString 			; input a string (manually)
.2657	a2 01		ldx #$01			ldx 	#1
.2659	20 81 26	jsr $2681			jsr 	BufferToStackX 			; make stack,x ref input string.
.265c	a5 90		lda $90				lda 	esType 					; if target type numeric
.265e	29 40		and #$40			and 	#$40 					; then convert to number
.2660	d0 11		bne $2673			bne 	_CIWrite
.2662	a2 01		ldx #$01			ldx 	#1
.2664	20 59 28	jsr $2859			jsr 	TOSToTemp0 				; string address in temp0, goes here.
.2667	a9 0a		lda #$0a			lda 	#10
.2669	20 71 39	jsr $3971			jsr 	MInt32FromString 		; convert it back from a string.
.266c	68		pla				pla
.266d	a8		tay				tay
.266e	b0 03		bcs $2673			bcs 	_CIWrite 				; successfully converted.
.2670	18		clc				clc 							; default fail FP conversion
.2671	90 d8		bcc $264b			bcc		_CIRetry				; failed, try again.
.2673					_CIWrite:
.2673	a2 00		ldx #$00			ldx 	#0
.2675	20 f7 27	jsr $27f7			jsr 	WriteValue
.2678	4c 20 26	jmp $2620			jmp 	Command_Input
.267b					_CISyntax:
.267b	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.267d	20 18 15	jsr $1518		jsr	errorHandler
.2680					_CIExit:
.2680	60		rts				rts
.2681					BufferToStackX:
.2681	a9 dc		lda #$dc			lda 	#InputBuffer & $FF
.2683	95 98		sta $98,x			sta 	esInt0,x
.2685	a9 0c		lda #$0c			lda 	#InputBuffer >> 8
.2687	95 a0		sta $a0,x			sta 	esInt1,x
.2689	a9 00		lda #$00			lda 	#0
.268b	95 a8		sta $a8,x			sta 	esInt2,x
.268d	95 b0		sta $b0,x			sta 	esInt3,x
.268f	a9 40		lda #$40			lda 	#$40
.2691	95 90		sta $90,x			sta 	esType,x
.2693	60		rts				rts
.2694					InputString:
.2694	a9 00		lda #$00			lda 	#0
.2696	8d dc 0c	sta $0cdc			sta 	InputBuffer
.2699					_InputLoop:
.2699	a2 02		ldx #$02		ldx	#2
.269b	20 f6 14	jsr $14f6		jsr	deviceHandler
.269e	a2 0a		ldx #$0a		ldx	#10
.26a0	20 f6 14	jsr $14f6		jsr	deviceHandler
.26a3	c9 00		cmp #$00			cmp 	#0
.26a5	f0 f2		beq $2699			beq 	_InputLoop
.26a7	c9 08		cmp #$08			cmp 	#8
.26a9	f0 19		beq $26c4			beq 	_InputBackspace
.26ab	c9 0d		cmp #$0d			cmp 	#13
.26ad	f0 21		beq $26d0			beq 	_InputExit
.26af	ae dc 0c	ldx $0cdc			ldx 	InputBuffer
.26b2	e0 20		cpx #$20			cpx 	#MaxInputSize 			; too many characters
.26b4	f0 e3		beq $2699			beq 	_InputLoop
.26b6	9d dd 0c	sta $0cdd,x			sta 	InputBuffer+1,x 		; write char
.26b9	ee dc 0c	inc $0cdc			inc 	InputBuffer 			; advance count.
.26bc					_InputPrintLoop:
.26bc	a2 14		ldx #$14		ldx	#20
.26be	20 f6 14	jsr $14f6		jsr	deviceHandler
.26c1	4c 99 26	jmp $2699			jmp	 	_InputLoop
.26c4					_InputBackspace:
.26c4	ad dc 0c	lda $0cdc			lda 	InputBuffer 			; at start
.26c7	f0 d0		beq $2699			beq 	_InputLoop
.26c9	ce dc 0c	dec $0cdc			dec 	InputBuffer
.26cc	a9 08		lda #$08			lda 	#8
.26ce	d0 ec		bne $26bc			bne 	_InputPrintLoop
.26d0					_InputExit:
.26d0	a2 06		ldx #$06		ldx	#6
.26d2	20 f6 14	jsr $14f6		jsr	deviceHandler
.26d5	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/io/print.asm

.0cfd					lastPrintToken:
>0cfd							.fill 	1
.26d6					Command_Print:
.26d6	a9 00		lda #$00			lda 	#0 							; clear LPT to a non token
.26d8	8d fd 0c	sta $0cfd			sta 	lastPrintToken
.26db	88		dey				dey
.26dc					_PrintLoopSkip:
.26dc	c8		iny				iny
.26dd					_PrintLoop:
.26dd	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows
.26df	c9 80		cmp #$80			cmp 	#TOK_EOL  					; done if end of line or colon
.26e1	f0 5b		beq $273e			beq 	_PrintExit
.26e3	c9 ca		cmp #$ca			cmp 	#TKW_COLON
.26e5	f0 57		beq $273e			beq 	_PrintExit
.26e7	8d fd 0c	sta $0cfd			sta 	lastPrintToken 				; update Last print token, so we check ; and ,
.26ea	c9 cc		cmp #$cc			cmp 	#TKW_SEMICOLON 				; ignore semicolon
.26ec	f0 ee		beq $26dc			beq 	_PrintLoopSkip
.26ee	c9 cd		cmp #$cd			cmp 	#TKW_QUOTE 					; ' is new line
.26f0	f0 3c		beq $272e			beq	 	_PrintNewLine
.26f2	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; , is print tab
.26f4	f0 40		beq $2736			beq 	_PrintTab
.26f6	20 4a 34	jsr $344a			jsr 	EvaluateRoot 				; evaluate something at the root
.26f9	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.26fb	85 2a		sta $2a				sta 	temp0
.26fd	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.26ff	85 2b		sta $2b				sta 	1+(temp0)
.2701	a5 90		lda $90				lda 	esType 						; get type
.2703	f0 15		beq $271a			beq		_PrintInteger
.2705	4a		lsr a				lsr 	a 							; check for floating point
.2706	b0 08		bcs $2710			bcs 	_PrintFloat
.2708					_PrintString:
.2708	a2 00		ldx #$00			ldx 	#0 							; bottom string to temp0
.270a	20 59 28	jsr $2859			jsr 	TOSToTemp0
.270d	4c 28 27	jmp $2728			jmp 	_PrintTemp0 				; print no leading space.
.2710					_PrintFloat:
.2710	a9 00		lda #$00			lda 	#0 							; stack level.
.2712	a2 16		ldx #$16		ldx	#22
.2714	20 67 23	jsr $2367		jsr	floatingpointHandler
.2717	4c 21 27	jmp $2721			jmp 	_PrintSpaceTemp0
.271a					_PrintInteger:
.271a	a9 8a		lda #$8a			lda 	#10+$80 					; base 10 signed
.271c	a2 00		ldx #$00			ldx 	#0 							; bottom stack element
.271e	20 59 3a	jsr $3a59			jsr 	MInt32ToString				; convert to text
.2721					_PrintSpaceTemp0:
.2721	a9 20		lda #$20			lda 	#32
.2723	a2 14		ldx #$14		ldx	#20
.2725	20 f6 14	jsr $14f6		jsr	deviceHandler
.2728					_PrintTemp0:
.2728	20 4f 27	jsr $274f			jsr 	PrintString
.272b	4c dd 26	jmp $26dd			jmp 	_PrintLoop
.272e					_PrintNewLine:
.272e	a2 06		ldx #$06		ldx	#6
.2730	20 f6 14	jsr $14f6		jsr	deviceHandler
.2733	4c dc 26	jmp $26dc			jmp 	_PrintLoopSkip
.2736					_PrintTab:
.2736	a2 1a		ldx #$1a		ldx	#26
.2738	20 f6 14	jsr $14f6		jsr	deviceHandler
.273b	4c dc 26	jmp $26dc			jmp 	_PrintLoopSkip
.273e					_PrintExit:
.273e	ad fd 0c	lda $0cfd			lda		lastPrintToken 				; check last token
.2741	c9 cc		cmp #$cc			cmp 	#TKW_SEMICOLON 				; if , or ; do not print NL
.2743	f0 09		beq $274e			beq 	_PrintExit2
.2745	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.2747	f0 05		beq $274e			beq 	_PrintExit2
.2749	a2 06		ldx #$06		ldx	#6
.274b	20 f6 14	jsr $14f6		jsr	deviceHandler
.274e					_PrintExit2:
.274e	60		rts				rts
.274f					PrintString:
.274f	8a		txa				txa
.2750	48		pha				pha
.2751	98		tya				tya
.2752	48		pha				pha
.2753	a0 00		ldy #$00			ldy 	#0							; get length
.2755	b1 2a		lda ($2a),y			lda 	(temp0),y
.2757	aa		tax				tax 								; into X
.2758	e0 00		cpx #$00	_PSLoop:cpx 	#0 							; finished ?
.275a	f0 10		beq $276c			beq 	_PSExit
.275c	ca		dex				dex
.275d	8a		txa				txa
.275e	48		pha				pha
.275f	c8		iny				iny
.2760	b1 2a		lda ($2a),y			lda 	(temp0),y
.2762	a2 14		ldx #$14		ldx	#20
.2764	20 f6 14	jsr $14f6		jsr	deviceHandler
.2767	68		pla				pla
.2768	aa		tax				tax
.2769	4c 58 27	jmp $2758			jmp 	_PSLoop
.276c					_PSExit:
.276c	68		pla				pla
.276d	a8		tay				tay
.276e	68		pla				pla
.276f	aa		tax				tax
.2770	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/io/text.asm

.2771					Command_CLS:
.2771	a2 04		ldx #$04		ldx	#4
.2773	20 f6 14	jsr $14f6		jsr	deviceHandler
.2776	60		rts				rts
.2777					Command_Ink:
.2777	a2 00		ldx #$00			ldx 	#0
.2779	20 73 34	jsr $3473			jsr 	EvaluateSmallInteger
.277c	a2 08		ldx #$08		ldx	#8
.277e	20 f6 14	jsr $14f6		jsr	deviceHandler
.2781	60		rts				rts
.2782					Command_Paper:
.2782	a2 00		ldx #$00			ldx 	#0
.2784	20 73 34	jsr $3473			jsr 	EvaluateSmallInteger
.2787	a2 12		ldx #$12		ldx	#18
.2789	20 f6 14	jsr $14f6		jsr	deviceHandler
.278c	60		rts				rts
.278d					Command_Locate:
.278d	a2 00		ldx #$00			ldx 	#0
.278f	20 73 34	jsr $3473			jsr 	EvaluateSmallInteger
.2792	20 83 3b	jsr $3b83			jsr 	CheckComma
.2795	e8		inx				inx
.2796	20 73 34	jsr $3473			jsr 	EvaluateSmallInteger
.2799	98		tya				tya
.279a	48		pha				pha
.279b	a4 99		ldy $99				ldy 	esInt0+1
.279d	a5 98		lda $98				lda 	esInt0
.279f	a2 10		ldx #$10		ldx	#16
.27a1	20 f6 14	jsr $14f6		jsr	deviceHandler
.27a4	68		pla				pla
.27a5	a8		tay				tay
.27a6	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/io/vdu.asm

.27a7					Command_VDU:
.27a7	20 69 34	jsr $3469			jsr 	EvaluateRootInteger 			; get integer at root.
.27aa	a5 98		lda $98				lda 	esInt0
.27ac	a2 14		ldx #$14		ldx	#20
.27ae	20 f6 14	jsr $14f6		jsr	deviceHandler
.27b1					_CVNext:
.27b1	b1 28		lda ($28),y			lda 	(codePtr),y 					; what follows ?
.27b3	c8		iny				iny
.27b4	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 						; comma, do again
.27b6	f0 ef		beq $27a7			beq 	Command_VDU
.27b8	c9 cc		cmp #$cc			cmp 	#TKW_SEMICOLON 					; semicolon, print MSB
.27ba	d0 0a		bne $27c6			bne 	_CVExit
.27bc	a5 a0		lda $a0				lda 	esInt1
.27be	a2 14		ldx #$14		ldx	#20
.27c0	20 f6 14	jsr $14f6		jsr	deviceHandler
.27c3	4c b1 27	jmp $27b1			jmp 	_CVNext
.27c6	88		dey		_CVExit:dey
.27c7	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/link.asm


;******  Return to file: main/main.asm


;******  Processing file: main/commands/misc/assert.asm

.27c8					Command_Assert:
.27c8	20 69 34	jsr $3469			jsr 	EvaluateRootInteger 		; what is being asserted.
.27cb	20 2a 3b	jsr $3b2a			jsr 	MInt32Zero 					; is it true ?
.27ce	f0 01		beq $27d1			beq 	_CAError
.27d0	60		rts				rts
.27d1					_CAError:
.27d1	a2 04		ldx #$04			ldx 	#ErrorID_Assert
.27d3	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/commands/misc/dim.asm

.27d6					Command_Dim:
.27d6	a2 04		ldx #$04		ldx	#4
.27d8	20 02 4b	jsr $4b02		jsr	variableHandler
.27db	b1 28		lda ($28),y			lda 	(codePtr),y 				; see what follows.
.27dd	c8		iny				iny
.27de	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; comma follows, go back and do next
.27e0	f0 f4		beq $27d6			beq 	Command_Dim
.27e2	88		dey				dey 								; unpick get
.27e3	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/misc/let.asm

.27e4					CommandLet:
.27e4	a2 00		ldx #$00			ldx 	#0  						; get address to write.
.27e6	20 a4 34	jsr $34a4			jsr 	EvaluateReference
.27e9	a9 8d		lda #$8d			lda 	#TKW_EQUAL 					; check for equals
.27eb	20 6b 3b	jsr $3b6b			jsr 	CheckToken
.27ee	e8		inx				inx 								; do RHS
.27ef	20 4c 34	jsr $344c			jsr 	Evaluate 					; evaluate and dereference
.27f2	ca		dex				dex
.27f3	20 f7 27	jsr $27f7			jsr 	WriteValue 					; write it out
.27f6	60		rts				rts
.27f7					WriteValue:
.27f7	98		tya				tya
.27f8	48		pha				pha
.27f9	20 59 28	jsr $2859			jsr 	TOSToTemp0 					; set temp0 to point to target address.
.27fc	b5 90		lda $90,x			lda 	esType,x 					; check the string flags match
.27fe	55 91		eor $91,x			eor 	esType+1,x 					; one string, one number causes an error.
.2800	29 40		and #$40			and 	#$40
.2802	d0 50		bne $2854			bne		_WVType
.2804	a0 01		ldy #$01			ldy 	#1 							; for string, copy 0 and 1.
.2806	b5 90		lda $90,x			lda 	esType,x 					; check for string assignment
.2808	29 40		and #$40			and 	#$40
.280a	d0 1f		bne $282b			bne 	_WVCopyString
.280c	b5 90		lda $90,x			lda 	esType,x 					; check both are integer.
.280e	15 91		ora $91,x			ora 	esType+1,x
.2810	4a		lsr a				lsr 	a
.2811	90 22		bcc $2835			bcc 	_WVCopyData4 				; copy 4 data bytes.
.2813	b5 90		lda $90,x			lda 	esType,x
.2815	4a		lsr a				lsr 	a
.2816	90 3c		bcc $2854			bcc 	_WVType
.2818	e8		inx				inx 								; force the value being written to be a float.
.2819	20 ae 30	jsr $30ae			jsr 	BPMakeFloat
.281c	ca		dex				dex
.281d	20 59 28	jsr $2859			jsr 	TOSToTemp0 					; set Temp0 to write address
.2820	e8		inx				inx
.2821	8a		txa				txa
.2822	a2 22		ldx #$22		ldx	#34
.2824	20 67 23	jsr $2367		jsr	floatingpointHandler
.2827	aa		tax				tax
.2828	4c 51 28	jmp $2851			jmp 	_WVCopyExit
.282b					_WVCopyString:
.282b	8a		txa				txa
.282c	a2 10		ldx #$10		ldx	#16
.282e	20 ae 3e	jsr $3eae		jsr	stringHandler
.2831	aa		tax				tax
.2832	4c 51 28	jmp $2851			jmp 	_WVCopyExit
.2835					_WVCopyData4:
.2835	b5 90		lda $90,x			lda 	esType,x 					; is the int ref a byte ref ?
.2837	29 20		and #$20			and 	#$20 						; (e.g. is bit 5 set)
.2839	d0 10		bne $284b			bne 	_WVCopyData1
.283b	a0 03		ldy #$03			ldy 	#3
.283d	b5 b1		lda $b1,x			lda 	esInt3+1,x
.283f	91 2a		sta ($2a),y			sta 	(temp0),y
.2841	88		dey				dey
.2842	b5 a9		lda $a9,x			lda 	esInt2+1,x
.2844	91 2a		sta ($2a),y			sta 	(temp0),y
.2846	88		dey				dey
.2847	b5 a1		lda $a1,x			lda 	esInt1+1,x
.2849	91 2a		sta ($2a),y			sta 	(temp0),y
.284b					_WVCopyData1:
.284b	a0 00		ldy #$00			ldy 	#0
.284d	b5 99		lda $99,x			lda 	esInt0+1,x
.284f	91 2a		sta ($2a),y			sta 	(temp0),y
.2851					_WVCopyExit:
.2851	68		pla				pla
.2852	a8		tay				tay
.2853	60		rts				rts
.2854					_WVType:
.2854	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.2856	20 18 15	jsr $1518		jsr	errorHandler
.2859					TOSToTemp0:
.2859	b5 98		lda $98,x			lda 	esInt0,x
.285b	85 2a		sta $2a				sta 	temp0
.285d	b5 a0		lda $a0,x			lda 	esInt1,x
.285f	85 2b		sta $2b				sta 	temp0+1
.2861	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/misc/poke.asm

.2862					Command_Poke:
.2862	a9 01		lda #$01			lda 	#1
.2864	d0 06		bne $286c			bne 	PokeGeneral
.2866					Command_Doke:
.2866	a9 02		lda #$02			lda 	#2
.2868	d0 02		bne $286c			bne 	PokeGeneral
.286a					Command_Loke:
.286a	a9 03		lda #$03			lda 	#3
.286c					PokeGeneral:
.286c	48		pha				pha 								; save id (PDL = 123)
.286d	20 69 34	jsr $3469			jsr 	EvaluateRootInteger 		; target address
.2870	20 83 3b	jsr $3b83			jsr	 	CheckComma
.2873	e8		inx				inx
.2874	20 6b 34	jsr $346b			jsr 	EvaluateInteger 			; what value to POKE ?
.2877	ca		dex				dex
.2878	20 59 28	jsr $2859			jsr 	TOSToTemp0 					; temp0 points to the target address
.287b	84 32		sty $32				sty 	tempShort 					; save Y
.287d	68		pla				pla 								; get copy type (1-3) and dispatch
.287e	aa		tax				tax
.287f	ca		dex				dex
.2880	f0 14		beq $2896			beq 	_Poke1
.2882	ca		dex				dex
.2883	f0 0b		beq $2890			beq 	_Poke2
.2885	a0 03		ldy #$03			ldy 	#3							; put 4 bytes
.2887	a5 b1		lda $b1				lda 	esInt3+1
.2889	91 2a		sta ($2a),y			sta 	(temp0),y
.288b	88		dey				dey
.288c	a5 a9		lda $a9				lda 	esInt2+1
.288e	91 2a		sta ($2a),y			sta 	(temp0),y
.2890					_Poke2:
.2890	a0 01		ldy #$01			ldy 	#1
.2892	a5 a1		lda $a1				lda 	esInt1+1
.2894	91 2a		sta ($2a),y			sta 	(temp0),y
.2896					_Poke1:
.2896	a0 00		ldy #$00			ldy 	#0
.2898	a5 99		lda $99				lda 	esInt0+1
.289a	91 2a		sta ($2a),y			sta 	(temp0),y
.289c	a4 32		ldy $32				ldy 	tempShort 					; restore Y and exit
.289e	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/misc/rem.asm

.289f					Command_Rem:
.289f					Command_Rem2:
.289f	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows
.28a1	c9 85		cmp #$85			cmp 	#TOK_STR 					; if it is a string then skip it.
.28a3	d0 06		bne $28ab			bne 	_CRNotString
.28a5	c8		iny				iny
.28a6	98		tya				tya
.28a7	38		sec				sec
.28a8	71 28		adc ($28),y			adc 	(codePtr),y 				; get string size, add to Y, +1 for the length
.28aa	a8		tay				tay
.28ab					_CRNotString:
.28ab	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/misc/stopend.asm

.28ac					CommandStop:
.28ac	a2 06		ldx #$06			ldx 	#ErrorID_Stop
.28ae	20 18 15	jsr $1518		jsr	errorHandler
.28b1					CommandEnd:
.28b1	4c ec 3b	jmp $3bec			jmp 	WarmStart
.28b4					CommandXemu:
.28b4	4c ff ff	jmp $ffff			jmp 	$FFFF 						; fudge to crash out of emulator
.28b7					AdvanceNextLine:
.28b7	a0 00		ldy #$00			ldy 	#0 							; get offset
.28b9	b1 28		lda ($28),y			lda 	(codePtr),y
.28bb	18		clc				clc 								; add to codePtr
.28bc	65 28		adc $28				adc 	codePtr
.28be	85 28		sta $28				sta 	codePtr
.28c0	90 02		bcc $28c4			bcc 	_ANLNoCarry
.28c2	e6 29		inc $29				inc 	codePtr+1
.28c4					_ANLNoCarry:
.28c4	b1 28		lda ($28),y			lda 	(codePtr),y 				; if end of program (or was just stand alone.
.28c6	f0 e9		beq $28b1			beq 	CommandEnd 					; execute END
.28c8	a0 03		ldy #$03			ldy 	#3 							; start of tokens on line.
.28ca	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/for.asm

.28cb					Command_FOR:
.28cb	a9 46		lda #$46			lda 	#markerFOR 					; allocate the space and set the marker
.28cd	a2 0b		ldx #$0b			ldx 	#11
.28cf	20 9e 3b	jsr $3b9e			jsr 	RSClaim
.28d2	20 e4 27	jsr $27e4			jsr 	CommandLET 					; do the same as LET FOR [a = 4]
.28d5	a5 90		lda $90				lda 	esType 						; check type should be integer reference.
.28d7	c9 80		cmp #$80			cmp 	#$80 						; we do not do FOR floats.
.28d9	d0 4c		bne $2927			bne 	_CFType
.28db	a9 ce		lda #$ce			lda 	#TKW_TO 					; check TO present.
.28dd	20 6b 3b	jsr $3b6b			jsr 	CheckToken
.28e0	a2 01		ldx #$01			ldx 	#1 							; keep the variable address in stack 0
.28e2	20 6b 34	jsr $346b			jsr 	EvaluateInteger				; get terminal value in stack 1
.28e5	98		tya				tya
.28e6	48		pha				pha
.28e7	a0 04		ldy #$04			ldy 	#4
.28e9	a5 98		lda $98				lda		esInt0 						; copy the address of the index variable into 4 and 5
.28eb	91 37		sta ($37),y			sta 	(rsPointer),y
.28ed	c8		iny				iny
.28ee	a5 a0		lda $a0				lda		esInt1
.28f0	91 37		sta ($37),y			sta 	(rsPointer),y
.28f2	c8		iny				iny
.28f3	a9 01		lda #$01			lda 	#1  						; the default step in 6, (-128 .. 127 only)
.28f5	91 37		sta ($37),y			sta 	(rsPointer),y
.28f7	c8		iny				iny
.28f8	a5 99		lda $99				lda		esInt0+1 					; terminal value in 7 to 11.
.28fa	91 37		sta ($37),y			sta 	(rsPointer),y
.28fc	c8		iny				iny
.28fd	a5 a1		lda $a1				lda		esInt1+1
.28ff	91 37		sta ($37),y			sta 	(rsPointer),y
.2901	c8		iny				iny
.2902	a5 a9		lda $a9				lda		esInt2+1
.2904	91 37		sta ($37),y			sta 	(rsPointer),y
.2906	c8		iny				iny
.2907	a5 b1		lda $b1				lda		esInt3+1
.2909	91 37		sta ($37),y			sta 	(rsPointer),y
.290b	68		pla				pla
.290c	a8		tay				tay
.290d	b1 28		lda ($28),y			lda 	(codePtr),y 				; followed by STEP.
.290f	c9 cf		cmp #$cf			cmp 	#TKW_STEP
.2911	d0 0e		bne $2921			bne 	_CFDone
.2913	c8		iny				iny									; skip over step.
.2914	20 6b 34	jsr $346b			jsr 	EvaluateInteger 			; get step
.2917	98		tya				tya
.2918	48		pha				pha
.2919	b5 98		lda $98,x			lda 	esInt0,x 					; copy it into step (bit lazy here)
.291b	a0 06		ldy #$06			ldy 	#6
.291d	91 37		sta ($37),y			sta 	(rsPointer),y
.291f	68		pla				pla
.2920	a8		tay				tay
.2921					_CFDone:
.2921	a9 01		lda #$01			lda 	#1
.2923	20 ca 3b	jsr $3bca			jsr 	RSSavePosition 				; save position.
.2926	60		rts				rts
.2927					_CFType:
.2927	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.2929	20 18 15	jsr $1518		jsr	errorHandler
.292c					Command_NEXT:
.292c	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.292e	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.2930	c9 46		cmp #$46			cmp 	#markerFOR 						; does it match
.2932	f0 05		beq $2939			beq 	_isok
.2934	a2 10		ldx #$10			ldx 	#ErrorID_nextErr
.2936	20 18 15	jsr $1518		jsr	errorHandler
.2939					_isok:
.2939	b1 28		lda ($28),y			lda 	(codePtr),y 				; is it NEXT <index>
.293b	c9 40		cmp #$40			cmp 	#$40 						; e.g. a variable follows 00-3F
.293d	b0 18		bcs $2957			bcs 	_CNNoIndex
.293f	a2 00		ldx #$00			ldx 	#0 							; start on stack
.2941	20 a4 34	jsr $34a4			jsr 	EvaluateReference 			; this is the variable/parameter to localise.
.2944	98		tya				tya
.2945	48		pha				pha
.2946	a0 04		ldy #$04			ldy 	#4 							; check same variable as that stored at +4,+5
.2948	b1 37		lda ($37),y			lda 	(rsPointer),y
.294a	d5 98		cmp $98,x			cmp 	esInt0,x
.294c	d0 76		bne $29c4			bne 	_CNBadIndex
.294e	c8		iny				iny
.294f	b1 37		lda ($37),y			lda 	(rsPointer),y
.2951	d5 a0		cmp $a0,x			cmp 	esInt1,x
.2953	d0 6f		bne $29c4			bne 	_CNBadIndex
.2955	68		pla				pla
.2956	a8		tay				tay
.2957					_CNNoIndex:
.2957	98		tya				tya
.2958	48		pha				pha
.2959	a0 04		ldy #$04			ldy 	#4 							; make temp0 point to the index
.295b	b1 37		lda ($37),y			lda 	(rsPointer),y
.295d	85 2a		sta $2a				sta 	temp0
.295f	c8		iny				iny
.2960	b1 37		lda ($37),y			lda 	(rsPointer),y
.2962	85 2b		sta $2b				sta 	temp0+1
.2964	c8		iny				iny
.2965	a2 00		ldx #$00			ldx 	#0 							; X is the sign extend part of the step.
.2967	b1 37		lda ($37),y			lda 	(rsPointer),y 				; get the step.
.2969	85 2f		sta $2f				sta 	temp2+1 					; save for later.
.296b	10 01		bpl $296e			bpl 	_CNSignX
.296d	ca		dex				dex  								; X = $FF
.296e					_CNSignX:
.296e	18		clc				clc 								; add to the LSB
.296f	a0 00		ldy #$00			ldy 	#0
.2971	71 2a		adc ($2a),y			adc 	(temp0),y
.2973	91 2a		sta ($2a),y			sta 	(temp0),y
.2975					_CNPropogate:
.2975	c8		iny				iny  								; add the sign extended in X to the rest.
.2976	8a		txa				txa
.2977	71 2a		adc ($2a),y			adc 	(temp0),y
.2979	91 2a		sta ($2a),y			sta 	(temp0),y
.297b	c8		iny				iny
.297c	8a		txa				txa
.297d	71 2a		adc ($2a),y			adc 	(temp0),y
.297f	91 2a		sta ($2a),y			sta 	(temp0),y
.2981	c8		iny				iny
.2982	8a		txa				txa
.2983	71 2a		adc ($2a),y			adc 	(temp0),y
.2985	91 2a		sta ($2a),y			sta 	(temp0),y
.2987	18		clc				clc 								; point temp1 to the terminal value stored in the stack.
.2988	a5 37		lda $37				lda 	rsPointer
.298a	69 07		adc #$07			adc 	#7
.298c	85 2c		sta $2c				sta 	temp1
.298e	a9 00		lda #$00			lda 	#0
.2990	85 2e		sta $2e				sta 	temp2 						; clear temp2, which is the OR of all the subtractions.
.2992	a8		tay				tay 								; and clear the Y register again.
.2993	65 38		adc $38				adc 	rsPointer+1
.2995	85 2d		sta $2d				sta 	temp1+1
.2997	38		sec				sec 								; calculate current - limit oring interim values.
.2998	20 d0 29	jsr $29d0			jsr 	_CNCompare 					; each of these does a byte.
.299b	20 d0 29	jsr $29d0			jsr 	_CNCompare 					; we calculate the OR of all these subtractions.
.299e	20 d0 29	jsr $29d0			jsr 	_CNCompare 					; and the carry of the subtraction.
.29a1	20 d0 29	jsr $29d0			jsr 	_CNCompare
.29a4	50 02		bvc $29a8			bvc 	_CNNoOverflow 				; converts to a signed comparison on the sign bit.
.29a6	49 80		eor #$80			eor 	#$80
.29a8					_CNNoOverflow:
.29a8	a4 2f		ldy $2f				ldy 	temp2+1						; get step back
.29aa	30 1d		bmi $29c9			bmi 	_CNCheckDownto
.29ac	c9 00		cmp #$00			cmp 	#0
.29ae	30 0c		bmi $29bc			bmi 	_CNLoopRound 				; loop round if < =
.29b0	a5 2e		lda $2e				lda 	temp2
.29b2	f0 08		beq $29bc			beq 	_CNLoopRound
.29b4					_CNLoopExit:
.29b4	68		pla				pla
.29b5	a8		tay				tay
.29b6	a9 0b		lda #$0b			lda 	#11
.29b8	20 c0 3b	jsr $3bc0			jsr 	RSFree
.29bb	60		rts				rts
.29bc					_CNLoopRound:
.29bc	68		pla				pla
.29bd	a8		tay				tay
.29be	a9 01		lda #$01			lda 	#1
.29c0	20 dd 3b	jsr $3bdd			jsr 	RSLoadPosition				; go back to the loop top
.29c3	60		rts				rts
.29c4					_CNBadIndex:
.29c4	a2 13		ldx #$13			ldx 	#ErrorID_BadIndex
.29c6	20 18 15	jsr $1518		jsr	errorHandler
.29c9					_CNCheckDownto:
.29c9	c9 00		cmp #$00			cmp 	#0
.29cb	10 ef		bpl $29bc			bpl 	_CNLoopRound
.29cd	4c b4 29	jmp $29b4			jmp 	_CNLoopExit
.29d0					_CNCompare:
.29d0	b1 2a		lda ($2a),y			lda 	(temp0),y 					; do the subtraction - compare don't care about answer
.29d2	f1 2c		sbc ($2c),y			sbc 	(temp1),y
.29d4	05 2e		ora $2e				ora 	temp2 						; Or into temp2 (does not affect carry)
.29d6	85 2e		sta $2e				sta 	temp2
.29d8	c8		iny				iny
.29d9	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/if.asm

.29da					CommandIf:
.29da	20 69 34	jsr $3469			jsr 	EvaluateRootInteger 		; get what's being tested.
.29dd	b1 28		lda ($28),y			lda 	(codePtr),y 				; check for IF .. THEN or IF .. GOTO which are single lines.
.29df	c9 91		cmp #$91			cmp 	#TKW_GOTO
.29e1	f0 04		beq $29e7			beq 	_IfSimple
.29e3	c9 a1		cmp #$a1			cmp 	#TKW_THEN
.29e5	d0 1b		bne $2a02			bne 	_IfComplex
.29e7					_IfSimple:
.29e7	20 2a 3b	jsr $3b2a			jsr 	MInt32Zero					; check if TOS zero
.29ea	f0 10		beq $29fc			beq 	_IfEOL 						; go to next line.
.29ec	b1 28		lda ($28),y			lda 	(codePtr),y 				; get and skip token.
.29ee	c8		iny				iny
.29ef	c9 91		cmp #$91			cmp 	#TKW_GOTO 					; was it if GOTO ?
.29f1	f0 0c		beq $29ff			beq 	_IfGoto 					; do the Goto code
.29f3	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows the THEN ?
.29f5	29 c0		and #$c0			and 	#$C0 						; check $40-$7F
.29f7	c9 40		cmp #$40			cmp 	#$40 						; e.g. number IF x = 0 THEN 170
.29f9	f0 04		beq $29ff			beq 	_IfGoto
.29fb	60		rts				rts 								; else continue on this line.
.29fc					_IfEOL:
.29fc	4c b7 28	jmp $28b7			jmp 	AdvanceNextLine 			; go to next line
.29ff					_IfGoto:
.29ff	4c ee 25	jmp $25ee			jmp 	CommandGoto
.2a02					_IfComplex:
.2a02	20 2a 3b	jsr $3b2a			jsr 	MInt32Zero 					; is it true ?
.2a05	f0 01		beq $2a08			beq 	_IFSkip 					; if non-zero then skip to ELSE/ENDIF
.2a07	60		rts				rts 								; else continue.
.2a08					_IFSkip:
.2a08	a9 d6		lda #$d6			lda	 	#TKW_ELSE 					; test failed, go to ELSE or ENDIF whichever comes first.
.2a0a	a2 a2		ldx #$a2			ldx 	#TKW_ENDIF
.2a0c	4c a4 2c	jmp $2ca4			jmp		ScanForward
.2a0f					Command_ELSE:
.2a0f	a2 a2		ldx #$a2			ldx 	#TKW_ENDIF
.2a11	8a		txa				txa
.2a12	4c a4 2c	jmp $2ca4			jmp		ScanForward
.2a15					Command_ENDIF:
.2a15	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/local.asm

.0cfe					storeSize:
>0cfe							.fill 	1
.2a16					CommandLocal:
.2a16	a2 00		ldx #$00			ldx 	#0
.2a18	20 34 2a	jsr $2a34			jsr 	LocaliseVariable 			; localise one.
.2a1b					_CLCheckNext:
.2a1b	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows ?
.2a1d	c8		iny				iny
.2a1e	c9 8d		cmp #$8d			cmp 	#TKW_EQUAL 					; something local "x = 2" ?
.2a20	f0 06		beq $2a28			beq 	_CLAssignment
.2a22	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; comma try again.
.2a24	f0 f0		beq $2a16			beq 	CommandLocal
.2a26	88		dey				dey
.2a27	60		rts				rts
.2a28					_CLAssignment:
.2a28	a2 01		ldx #$01			ldx 	#1
.2a2a	20 4c 34	jsr $344c			jsr 	Evaluate 					; evaluate RHS
.2a2d	ca		dex				dex
.2a2e	20 f7 27	jsr $27f7			jsr 	WriteValue
.2a31	4c 1b 2a	jmp $2a1b			jmp 	_CLCheckNext
.2a34					LocaliseVariable:
.2a34	b1 28		lda ($28),y			lda 	(codePtr),y 				; check it's a variable.
.2a36	c9 40		cmp #$40			cmp 	#$40
.2a38	b0 67		bcs $2aa1			bcs 	_LVSyntax
.2a3a	8a		txa				txa 								; get the address of that variable.
.2a3b	a2 02		ldx #$02		ldx	#2
.2a3d	20 02 4b	jsr $4b02		jsr	variableHandler
.2a40	aa		tax				tax
.2a41	8a		txa				txa
.2a42	48		pha				pha
.2a43	98		tya				tya
.2a44	48		pha				pha
.2a45	20 59 28	jsr $2859			jsr 	TOSToTemp0 					; the address of the variable is now in temp0.
.2a48	b5 90		lda $90,x			lda 	esType,x 					; get the type
.2a4a	0a		asl a				asl 	a
.2a4b	10 16		bpl $2a63			bpl 	_LVPushNumber
.2a4d	a0 00		ldy #$00			ldy 	#0 							; put address of data in temp1
.2a4f	b1 2a		lda ($2a),y			lda 	(temp0),y
.2a51	c8		iny				iny
.2a52	85 2c		sta $2c				sta 	temp1
.2a54	b1 2a		lda ($2a),y			lda 	(temp0),y
.2a56	85 2d		sta $2d				sta 	temp1+1
.2a58	a0 00		ldy #$00			ldy 	#0 	 						; get length
.2a5a	b1 2c		lda ($2c),y			lda 	(temp1),y
.2a5c	aa		tax				tax 								; into X
.2a5d	e8		inx				inx 								; +1 for length.
.2a5e	a9 24		lda #$24			lda 	#markerString
.2a60	4c 78 2a	jmp $2a78			jmp 	_LVWriteFrame
.2a63					_LVPushNumber:
.2a63	a5 2a		lda $2a				lda 	temp0 						; storage address and data source are the same
.2a65	85 2c		sta $2c				sta 	temp1
.2a67	a5 2b		lda $2b				lda 	temp0+1
.2a69	85 2d		sta $2d				sta 	temp1+1
.2a6b	b5 90		lda $90,x			lda 	esType,x 					; put float flag into carry.
.2a6d	4a		lsr a				lsr 	a
.2a6e	a9 25		lda #$25			lda 	#markerInt 					; get marker and size.
.2a70	a2 04		ldx #$04			ldx 	#VarISize
.2a72	90 04		bcc $2a78			bcc 	_LVIsInteger
.2a74	a9 23		lda #$23			lda 	#markerFloat
.2a76	a2 06		ldx #$06			ldx 	#VarFSize
.2a78					_LVIsInteger:
.2a78					_LVWriteFrame:
.2a78	8e fe 0c	stx $0cfe			stx 	storeSize 					; number of bytes to copy from (temp0)
.2a7b	e8		inx				inx 								; allocate 3 bytes, 2 for the address, 1 for the marker.
.2a7c	e8		inx				inx
.2a7d	e8		inx				inx
.2a7e	20 9e 3b	jsr $3b9e			jsr 	RSClaim 					; create the stack frame.
.2a81	a5 2a		lda $2a				lda 	temp0 						; copy the target address to slots 1 & 2
.2a83	a0 01		ldy #$01			ldy 	#1
.2a85	91 37		sta ($37),y			sta 	(rsPointer),y
.2a87	c8		iny				iny
.2a88	a5 2b		lda $2b				lda 	temp0+1
.2a8a	91 37		sta ($37),y			sta 	(rsPointer),y
.2a8c	a0 00		ldy #$00			ldy 	#0
.2a8e					_LVCopyData:
.2a8e	b1 2c		lda ($2c),y			lda 	(temp1),y 					; get data from source, temp1
.2a90	c8		iny				iny 								; write allowing for the header bit.
.2a91	c8		iny				iny
.2a92	c8		iny				iny
.2a93	91 37		sta ($37),y			sta 	(rsPointer),y
.2a95	88		dey				dey
.2a96	88		dey				dey
.2a97	ce fe 0c	dec $0cfe			dec 	storeSize 					; do it storesize times
.2a9a	d0 f2		bne $2a8e			bne 	_LVCopyData
.2a9c	68		pla				pla
.2a9d	a8		tay				tay
.2a9e	68		pla				pla
.2a9f	aa		tax				tax
.2aa0	60		rts				rts
.2aa1					_LVSyntax:
.2aa1	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.2aa3	20 18 15	jsr $1518		jsr	errorHandler
.2aa6					RestoreLocals:
.2aa6	a2 00		ldx #$00			ldx 	#0
.2aa8	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.2aaa	c9 40		cmp #$40			cmp	 	#64
.2aac	90 01		bcc $2aaf			bcc 	_RLocal
.2aae	60		rts				rts
.2aaf					_RLocal:
.2aaf	8a		txa				txa
.2ab0	48		pha				pha
.2ab1	98		tya				tya
.2ab2	48		pha				pha
.2ab3	a0 01		ldy #$01			ldy 	#1 							; copy target address to temp0
.2ab5	b1 37		lda ($37),y			lda 	(rsPointer),y
.2ab7	85 2a		sta $2a				sta 	temp0
.2ab9	c8		iny				iny
.2aba	b1 37		lda ($37),y			lda 	(rsPointer),y
.2abc	85 2b		sta $2b				sta 	temp0+1
.2abe	a0 00		ldy #$00			ldy 	#0 							; get type back.
.2ac0	b1 37		lda ($37),y			lda 	(rsPointer),y
.2ac2	c9 24		cmp #$24			cmp 	#markerString 				; string is ... different :)
.2ac4	f0 28		beq $2aee			beq 	_RString
.2ac6	a2 04		ldx #$04			ldx		#VARISize 					; size integer
.2ac8	c9 25		cmp #$25			cmp 	#markerInt
.2aca	f0 02		beq $2ace			beq 	_RIsInteger
.2acc	a2 06		ldx #$06			ldx 	#VARFSize 					; size float
.2ace					_RIsInteger:
.2ace	8a		txa				txa
.2acf	48		pha				pha
.2ad0	a0 03		ldy #$03			ldy 	#3							; start size to copy back from pointer.
.2ad2					_RCopyBack:
.2ad2	b1 37		lda ($37),y			lda 	(rsPointer),y
.2ad4	88		dey				dey
.2ad5	88		dey				dey
.2ad6	88		dey				dey
.2ad7	91 2a		sta ($2a),y			sta 	(temp0),y
.2ad9	c8		iny				iny
.2ada	c8		iny				iny
.2adb	c8		iny				iny
.2adc	c8		iny				iny
.2add	ca		dex				dex
.2ade	d0 f2		bne $2ad2			bne 	_RCopyBack
.2ae0	68		pla				pla 								; get size add 3
.2ae1	18		clc				clc
.2ae2	69 03		adc #$03			adc 	#3 							; (2 for address one for marker)
.2ae4					_RRestoreAAndLoop:
.2ae4	20 c0 3b	jsr $3bc0			jsr 	RSFree
.2ae7	68		pla				pla
.2ae8	a8		tay				tay
.2ae9	68		pla				pla
.2aea	aa		tax				tax
.2aeb	4c a6 2a	jmp $2aa6			jmp 	RestoreLocals 				; go see if there are any more locals.
.2aee					_RString:
.2aee	a2 00		ldx #$00			ldx 	#0
.2af0	a0 01		ldy #$01			ldy 	#1 							; set up for a string write.
.2af2	b1 37		lda ($37),y			lda 	(rsPointer),y
.2af4	95 98		sta $98,x			sta 	esInt0,x
.2af6	c8		iny				iny
.2af7	b1 37		lda ($37),y			lda 	(rsPointer),y
.2af9	95 a0		sta $a0,x			sta 	esInt1,x
.2afb	18		clc				clc
.2afc	a5 37		lda $37				lda 	rsPointer
.2afe	69 03		adc #$03			adc 	#3
.2b00	95 99		sta $99,x			sta 	esInt0+1,x
.2b02	a5 38		lda $38				lda 	rsPointer+1
.2b04	69 00		adc #$00			adc 	#0
.2b06	95 a1		sta $a1,x			sta 	esInt1+1,x
.2b08	8a		txa				txa
.2b09	a2 10		ldx #$10		ldx	#16
.2b0b	20 ae 3e	jsr $3eae		jsr	stringHandler
.2b0e	a0 03		ldy #$03			ldy 	#3 							; get string length
.2b10	b1 37		lda ($37),y			lda 	(rsPointer),y
.2b12	18		clc				clc
.2b13	69 04		adc #$04			adc 	#4 							; add 4 (pointer, marker, length) to restore.
.2b15	4c e4 2a	jmp $2ae4			jmp 	_RRestoreAAndLoop

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/proc.asm

.0cff					paramCount:
>0cff							.fill 	1
.2b18					CallProc:
.2b18	20 a0 2b	jsr $2ba0			jsr 	FindProcedure 				; find procedure, put in temp0. A contains name length.
.2b1b	48		pha				pha 								; save length on stack
.2b1c	85 32		sta $32				sta 	tempShort 					; save length in tempShort
.2b1e	a5 2b		lda $2b				lda 	temp0+1 					; save procedure target on stack.
.2b20	48		pha				pha
.2b21	a5 2a		lda $2a				lda 	temp0
.2b23	48		pha				pha
.2b24	98		tya				tya 								; calculate Y + length
.2b25	18		clc				clc
.2b26	65 32		adc $32				adc 	tempShort
.2b28	a8		tay				tay
.2b29	a2 00		ldx #$00			ldx 	#0 							; where the first parameter goes - 1
.2b2b					_CallProcEvalParams:
.2b2b	e8		inx				inx
.2b2c	b1 28		lda ($28),y			lda 	(codePtr),y 				; do we have ) , e.g. the end of the parameters ?
.2b2e	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.2b30	f0 0b		beq $2b3d			beq 	_CPDoneParams
.2b32	20 4c 34	jsr $344c			jsr 	Evaluate 					; evaluate a parameter
.2b35	b1 28		lda ($28),y			lda 	(codePtr),Y 				; get what's next, preconsume
.2b37	c8		iny				iny
.2b38	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; if comma, go get another parameter
.2b3a	f0 ef		beq $2b2b			beq 	_CallProcEvalParams
.2b3c	88		dey				dey 								; undo consumption.
.2b3d					_CPDoneParams:
.2b3d	20 76 3b	jsr $3b76			jsr 	CheckRightParen 			; check closing parenthesis.
.2b40	8e ff 0c	stx $0cff			stx 	paramCount 					; store parameter count+1
.2b43	a2 04		ldx #$04			ldx 	#4							; make space on stack
.2b45	a9 50		lda #$50			lda 	#markerPROC
.2b47	20 9e 3b	jsr $3b9e			jsr 	RSClaim
.2b4a	a9 01		lda #$01			lda 	#1 							; store return address.
.2b4c	20 ca 3b	jsr $3bca			jsr 	RSSavePosition
.2b4f	68		pla				pla 								; get the new code Ptr
.2b50	85 28		sta $28				sta 	codePtr
.2b52	68		pla				pla
.2b53	85 29		sta $29				sta 	codePtr+1
.2b55	68		pla				pla 								; length of name + 4 is the param start.
.2b56	18		clc				clc
.2b57	69 04		adc #$04			adc 	#4
.2b59	a8		tay				tay
.2b5a	a2 ff		ldx #$ff			ldx 	#$FF
.2b5c					_CPLoadParameters:
.2b5c	e8		inx				inx 								; point to where the address should be loaded.
.2b5d	ec ff 0c	cpx $0cff			cpx 	paramCount 					; too many parameters in definition ?
.2b60	f0 1e		beq $2b80			beq 	_CPParamError
.2b62	b1 28		lda ($28),y			lda 	(codePtr),y					; what follows
.2b64	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN 				; is it the right bracket
.2b66	f0 0e		beq $2b76			beq 	_CPParamComplete 			; done all the parameters, perhaps.
.2b68	20 34 2a	jsr $2a34			jsr 	LocaliseVariable 			; make following variable local, ref in tos,x
.2b6b	20 f7 27	jsr $27f7			jsr 	WriteValue 					; copy the evaluated parameter into there.
.2b6e	b1 28		lda ($28),y			lda 	(codePtr),y 				; followed by a comma ?
.2b70	c8		iny				iny
.2b71	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.2b73	f0 e7		beq $2b5c			beq 	_CPLoadParameters
.2b75	88		dey				dey 								; no, unconsume and check for )
.2b76					_CPParamComplete:
.2b76	20 76 3b	jsr $3b76			jsr 	CheckRightParen 			; check )
.2b79	e8		inx				inx 								; check right number of parameters have been consumed
.2b7a	ec ff 0c	cpx $0cff			cpx 	paramCount
.2b7d	d0 01		bne $2b80			bne 	_CPParamError
.2b7f	60		rts				rts
.2b80					_CPParamError:
.2b80	a2 18		ldx #$18			ldx 	#ErrorID_Params
.2b82	20 18 15	jsr $1518		jsr	errorHandler
.2b85					ReturnProc:
.2b85	20 a6 2a	jsr $2aa6			jsr 	RestoreLocals 				; get the locals back.
.2b88	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.2b8a	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.2b8c	c9 50		cmp #$50			cmp 	#markerPROC 						; does it match
.2b8e	f0 05		beq $2b95			beq 	_isok
.2b90	a2 12		ldx #$12			ldx 	#ErrorID_endProcErr
.2b92	20 18 15	jsr $1518		jsr	errorHandler
.2b95					_isok:
.2b95	a9 01		lda #$01			lda 	#1
.2b97	20 dd 3b	jsr $3bdd			jsr 	RSLoadPosition 				; reload the position from offset 1.
.2b9a	a9 04		lda #$04			lda 	#4 							; throw 4 bytes from stack.
.2b9c	20 c0 3b	jsr $3bc0			jsr 	RSFree
.2b9f	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/proctable.asm

.0d00					procList:
>0d00							.fill 	2		 					; terminated by name high being zero.
.0d02					yInLine:
>0d02							.fill 	1
.2ba0					FindProcedure:
.2ba0	8c 02 0d	sty $0d02			sty 	yInLine 					; save current position.
.2ba3	20 5e 2c	jsr $2c5e			jsr 	CalculateProcedureHash		; calculate the hash of the procedure.
.2ba6	85 2c		sta $2c				sta 	temp1
.2ba8	ad 00 0d	lda $0d00			lda		procList 					; put procList address in temp2
.2bab	85 2e		sta $2e				sta 	temp2
.2bad	ad 01 0d	lda $0d01			lda 	procList+1
.2bb0	85 2f		sta $2f				sta 	temp2+1
.2bb2	a0 00		ldy #$00			ldy 	#0 							; position in this table.
.2bb4					_FPLoop:
.2bb4	b1 2e		lda ($2e),y			lda 	(temp2),y
.2bb6	f0 4f		beq $2c07			beq 	_FPError 					; if so, we don't know this procedure.
.2bb8	85 2b		sta $2b				sta 	temp0+1 					; copy MSB/LSB to temp0 as we go.
.2bba	c8		iny				iny
.2bbb	b1 2e		lda ($2e),y			lda 	(temp2),y
.2bbd	85 2a		sta $2a				sta 	temp0
.2bbf	c8		iny				iny
.2bc0	b1 2e		lda ($2e),y			lda 	(temp2),y					; check the procedure hash.
.2bc2	c5 2c		cmp $2c				cmp 	temp1
.2bc4	d0 2b		bne $2bf1			bne 	_FPNext 					; hash is different, go to next.
.2bc6	38		sec				sec
.2bc7	ad 02 0d	lda $0d02			lda 	yInLine 					; position in line must be at least 4
.2bca	e9 04		sbc #$04			sbc 	#4
.2bcc	18		clc				clc
.2bcd	65 28		adc $28				adc 	codePtr
.2bcf	85 30		sta $30				sta 	temp3
.2bd1	a5 29		lda $29				lda 	codePtr+1
.2bd3	69 00		adc #$00			adc 	#0
.2bd5	85 31		sta $31				sta 	temp3+1
.2bd7	98		tya				tya
.2bd8	48		pha				pha
.2bd9	a0 04		ldy #$04			ldy 	#4
.2bdb					_FPCName:
.2bdb	b1 30		lda ($30),y			lda 	(temp3),y 					; check the same
.2bdd	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.2bdf	d0 0e		bne $2bef			bne 	_FPpulYNext 				; if different go to next one.
.2be1	c8		iny				iny
.2be2	c9 3a		cmp #$3a			cmp 	#$3A
.2be4	90 f5		bcc $2bdb			bcc 	_FPCName 					; compare the whole lot....
.2be6	68		pla				pla 								; throw away the saved Y
.2be7	98		tya				tya 								; length of name is Y-4
.2be8	38		sec				sec
.2be9	e9 04		sbc #$04			sbc 	#4
.2beb	ac 02 0d	ldy $0d02			ldy 	yInLine  					; get the original Y back
.2bee	60		rts				rts
.2bef					_FPpulYNext:
.2bef	68		pla				pla
.2bf0	a8		tay				tay
.2bf1					_FPNext:
.2bf1	c8		iny				iny 								; next procedure record.
.2bf2	10 c0		bpl $2bb4			bpl 	_FPLoop 					; if done 128 already ... e.g. Y -ve
.2bf4	98		tya				tya 								; subtract 128 from Y
.2bf5	38		sec				sec
.2bf6	e9 80		sbc #$80			sbc 	#128
.2bf8	a8		tay				tay
.2bf9	18		clc				clc 								; add 128 to temp2, so we can have more than
.2bfa	a5 2e		lda $2e				lda 	temp2 						; 255/3 = 85 procedures
.2bfc	69 80		adc #$80			adc 	#128
.2bfe	85 2e		sta $2e				sta 	temp2
.2c00	90 b2		bcc $2bb4			bcc 	_FPLoop
.2c02	e6 2f		inc $2f				inc 	temp2+1
.2c04	4c b4 2b	jmp $2bb4			jmp 	_FPLoop
.2c07					_FPError:
.2c07	a2 17		ldx #$17			ldx 	#ErrorID_NoProc
.2c09	20 18 15	jsr $1518		jsr	errorHandler
.2c0c					ScanProc:
.2c0c	98		tya				tya
.2c0d	48		pha				pha
.2c0e	a5 35		lda $35				lda 	lowMemory 					; copy the start of the procList, at low memory
.2c10	8d 00 0d	sta $0d00			sta 	procList
.2c13	a5 36		lda $36				lda 	lowMemory+1
.2c15	8d 01 0d	sta $0d01			sta 	procList+1
.2c18	20 8a 2f	jsr $2f8a			jsr 	ResetCodeAddress 			; back to the start.
.2c1b					_ScanLoop:
.2c1b	a0 00		ldy #$00			ldy 	#0 							; check reached program end
.2c1d	b1 28		lda ($28),y			lda 	(codePtr),y
.2c1f	f0 2a		beq $2c4b			beq 	_ScanExit
.2c21	a0 03		ldy #$03			ldy 	#3							; get first token
.2c23	b1 28		lda ($28),y			lda 	(codePtr),y
.2c25	c9 9d		cmp #$9d			cmp 	#TKW_DEFPROC				; skip to next if not DEFPROC
.2c27	d0 12		bne $2c3b			bne 	_ScanNext
.2c29	a5 29		lda $29				lda 	codePtr+1 					; write high and low address of this line.
.2c2b	20 53 2c	jsr $2c53			jsr 	_ScanWrite
.2c2e	a5 28		lda $28				lda 	codePtr
.2c30	20 53 2c	jsr $2c53			jsr 	_ScanWrite
.2c33	a0 04		ldy #$04			ldy 	#4 							; start of name part
.2c35	20 5e 2c	jsr $2c5e			jsr 	CalculateProcedureHash 		; calculate procedure hash
.2c38	20 53 2c	jsr $2c53			jsr 	_ScanWrite					; and write that
.2c3b					_ScanNext:
.2c3b	18		clc				clc
.2c3c	a0 00		ldy #$00			ldy 	#0
.2c3e	b1 28		lda ($28),y			lda 	(codePtr),y
.2c40	65 28		adc $28				adc 	codePtr
.2c42	85 28		sta $28				sta 	codePtr
.2c44	90 d5		bcc $2c1b			bcc 	_ScanLoop
.2c46	e6 29		inc $29				inc 	codePtr+1
.2c48	4c 1b 2c	jmp $2c1b			jmp 	_ScanLoop
.2c4b					_ScanExit:
.2c4b	a9 00		lda #$00			lda 	#0 							; write ending zero.
.2c4d	20 53 2c	jsr $2c53			jsr 	_ScanWrite
.2c50	68		pla				pla
.2c51	a8		tay				tay
.2c52	60		rts				rts
.2c53					_ScanWrite:
.2c53	a0 00		ldy #$00			ldy 	#0
.2c55	91 35		sta ($35),y			sta 	(lowMemory),y
.2c57	e6 35		inc $35				inc 	lowMemory
.2c59	d0 02		bne $2c5d			bne 	_SWNoCarry
.2c5b	e6 36		inc $36				inc 	lowMemory+1
.2c5d					_SWNoCarry:
.2c5d	60		rts				rts
.2c5e					CalculateProcedureHash:
.2c5e	a9 00		lda #$00			lda 	#0 							; clear hash.
.2c60	85 2a		sta $2a				sta 	temp0
.2c62					_CPHLoop:
.2c62	18		clc				clc 								; add character and rotate and add carry back in
.2c63	b1 28		lda ($28),y			lda 	(codePtr),y
.2c65	65 2a		adc $2a				adc 	temp0
.2c67	6a		ror a				ror 	a
.2c68	69 0d		adc #$0d			adc 	#13 						; primes usually good for this sort of thing.
.2c6a	85 2a		sta $2a				sta 	temp0 						; (down with this sort of thing)
.2c6c	b1 28		lda ($28),y			lda 	(codePtr),y
.2c6e	c8		iny				iny 								; advance incase we go round again.
.2c6f	c9 3a		cmp #$3a			cmp 	#$3A
.2c71	90 ef		bcc $2c62			bcc 	_CPHLoop
.2c73	a5 2a		lda $2a				lda 	temp0
.2c75	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/repeat.asm

.2c76					Command_Repeat:
.2c76	a2 04		ldx #$04			ldx 	#4 							; allocate 4 bytes on stack for REPEAT
.2c78	a9 52		lda #$52			lda 	#markerREPEAT 				; repeat marker allocate 4 bytes
.2c7a	20 9e 3b	jsr $3b9e			jsr 	RSClaim
.2c7d	a9 01		lda #$01			lda 	#1 							; save position at offset 1.
.2c7f	20 ca 3b	jsr $3bca			jsr 	RSSavePosition
.2c82	60		rts				rts
.2c83					Command_Until:
.2c83	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.2c85	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.2c87	c9 52		cmp #$52			cmp 	#markerREPEAT 						; does it match
.2c89	f0 05		beq $2c90			beq 	_isok
.2c8b	a2 0f		ldx #$0f			ldx 	#ErrorID_untilErr
.2c8d	20 18 15	jsr $1518		jsr	errorHandler
.2c90					_isok:
.2c90	20 69 34	jsr $3469			jsr 	EvaluateRootInteger 		; at the bottom.
.2c93	20 2a 3b	jsr $3b2a			jsr 	MInt32Zero					; check if TOS zero
.2c96	d0 06		bne $2c9e			bne 	_CUExit
.2c98	a9 01		lda #$01			lda 	#1
.2c9a	20 dd 3b	jsr $3bdd			jsr 	RSLoadPosition 				; reload the position from offset 1.
.2c9d	60		rts				rts
.2c9e					_CUExit:
.2c9e	a9 04		lda #$04			lda 	#4 							; throw 4 bytes from stack.
.2ca0	20 c0 3b	jsr $3bc0			jsr 	RSFree
.2ca3	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/scanner.asm

.2ca4					ScanForward:
.2ca4	85 2c		sta $2c				sta 	temp1 						; save tokens to search in temp1/temp1+1
.2ca6	86 2d		stx $2d				stx 	temp1+1
.2ca8	a9 00		lda #$00			lda 	#0 							; temp2 counts structure levels.
.2caa	85 2e		sta $2e				sta 	temp2
.2cac	b1 28		lda ($28),y	_SFLoop:lda 	(codePtr),y 				; look at the next token.
.2cae	c8		iny				iny
.2caf	a6 2e		ldx $2e				ldx 	temp2 						; check structure levels are zero.
.2cb1	d0 08		bne $2cbb			bne 	_SFNoCheck 					; if so, check token against entered values.
.2cb3	c5 2c		cmp $2c				cmp 	temp1 						; if either matches, we've reached the token
.2cb5	f0 24		beq $2cdb			beq 	_SFExit 					; at the same strcture depth.
.2cb7	c5 2d		cmp $2d				cmp 	temp1+1
.2cb9	f0 20		beq $2cdb			beq 	_SFExit
.2cbb					_SFNoCheck:
.2cbb	c9 80		cmp #$80			cmp 	#$80 						; if it is 00-7F (variable/number) just skip it.
.2cbd	90 ed		bcc $2cac			bcc 	_SFLoop
.2cbf	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; $80-$85 is various specials.
.2cc1	90 19		bcc $2cdc			bcc 	_SFSpecials
.2cc3	c9 99		cmp #$99			cmp 	#TOK_STRUCTST 				; if < structure start then continue
.2cc5	90 e5		bcc $2cac			bcc 	_SFLoop
.2cc7	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST 				; if >= unary start (after structure) then continue.
.2cc9	b0 e1		bcs $2cac			bcs 	_SFLoop
.2ccb	aa		tax				tax  								; token in X, and look up the adjuster.
.2ccc	bd 87 33	lda $3387,x			lda 	ELBinaryOperatorInfo-TOK_BINARYST,x
.2ccf	38		sec				sec 								; convert to an offset ($FF,$01)
.2cd0	e9 81		sbc #$81			sbc 	#$81
.2cd2	18		clc				clc 								; add to depth
.2cd3	65 2e		adc $2e				adc 	temp2
.2cd5	85 2e		sta $2e				sta 	temp2
.2cd7	10 d3		bpl $2cac			bpl 	_SFLoop 					; +ve okay to continue
.2cd9	30 07		bmi $2ce2			bmi 	SFError 					; if gone -ve then we have a nesting error
.2cdb	60		rts		_SFExit:rts
.2cdc					_SFSpecials:
.2cdc	20 e7 2c	jsr $2ce7			jsr 	ScannerSkipSpecial
.2cdf	4c ac 2c	jmp $2cac			jmp 	_SFLoop
.2ce2					SFError:
.2ce2	a2 14		ldx #$14			ldx 	#ErrorID_Struct
.2ce4	20 18 15	jsr $1518		jsr	errorHandler
.2ce7					ScannerSkipSpecial:
.2ce7	c9 80		cmp #$80			cmp 	#TOK_EOL 					; $80, advance to next line.
.2ce9	f0 10		beq $2cfb			beq 	_SFNextLine
.2ceb	c9 84		cmp #$84			cmp 	#TOK_FPC					; $84, skip embedded float
.2ced	f0 2b		beq $2d1a			beq 	_SFFloatSkip
.2cef	c9 85		cmp #$85			cmp 	#TOK_STR 					; $85, skip string
.2cf1	f0 02		beq $2cf5			beq 	_SFSkipString
.2cf3	c8		iny				iny									; $81,$82,$83 shift, so just advance over the shifted
.2cf4	60		rts				rts 								; token.
.2cf5					_SFSkipString:
.2cf5	98		tya				tya
.2cf6	38		sec				sec
.2cf7	71 28		adc ($28),y			adc 	(codePtr),y
.2cf9	a8		tay				tay
.2cfa	60		rts				rts
.2cfb					_SFNextLine:
.2cfb	a0 00		ldy #$00			ldy 	#0 							; get offset
.2cfd	b1 28		lda ($28),y			lda 	(codePtr),y
.2cff	18		clc				clc 								; add to code pointer.
.2d00	65 28		adc $28				adc 	codePtr
.2d02	85 28		sta $28				sta 	codePtr
.2d04	90 02		bcc $2d08			bcc		_SFNLNoCarry
.2d06	e6 29		inc $29				inc 	codePtr+1
.2d08					_SFNLNoCarry:
.2d08	b1 28		lda ($28),y			lda 	(codePtr),y 				; reached the end of the program.
.2d0a	d0 0b		bne $2d17			bne		_SFXNL 						; no go round again
.2d0c	a5 2c		lda $2c				lda 	temp1
.2d0e	c9 d9		cmp #$d9			cmp 	#TKW_DATA 					; if searching for Data different error.
.2d10	d0 d0		bne $2ce2			bne 	SFError 					; read uses this to search for data statements
.2d12	a2 1d		ldx #$1d			ldx 	#ErrorID_DataError
.2d14	20 18 15	jsr $1518		jsr	errorHandler
.2d17	a0 03		ldy #$03	_SFXNL:	ldy 	#3
.2d19	60		rts				rts
.2d1a					_SFFloatSkip:
.2d1a	98		tya				tya 								; skip over an embedded float.
.2d1b	18		clc				clc
.2d1c	69 05		adc #$05			adc 	#FloatEmbeddedSize
.2d1e	a8		tay				tay
.2d1f	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/while.asm

.2d20					Command_While:
.2d20	a9 57		lda #$57			lda 	#markerWhile 				; gosub marker allocate 4 bytes.
.2d22	a2 04		ldx #$04			ldx 	#4
.2d24	20 9e 3b	jsr $3b9e			jsr 	RSClaim 					; create on stack.
.2d27	88		dey				dey
.2d28	a9 01		lda #$01			lda 	#1
.2d2a	20 ca 3b	jsr $3bca			jsr 	RSSavePosition 				; save position before the WHILE keyword.
.2d2d	c8		iny				iny
.2d2e	20 69 34	jsr $3469			jsr 	EvaluateRootInteger			; get the conditional
.2d31	20 2a 3b	jsr $3b2a			jsr 	MInt32Zero 	 				; if zero, skip forward to the fail code.
.2d34	f0 01		beq $2d37			beq 	_CWFail
.2d36	60		rts				rts
.2d37					_CWFail:
.2d37	a9 04		lda #$04			lda 	#4
.2d39	20 c0 3b	jsr $3bc0			jsr 	RSFree 						; close the just opened position.
.2d3c	a9 9f		lda #$9f			lda 	#TKW_WEND 					; scan forward past WEND.
.2d3e	aa		tax				tax
.2d3f	20 a4 2c	jsr $2ca4			jsr 	ScanForward
.2d42	60		rts				rts
.2d43					Command_Wend:
.2d43	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.2d45	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.2d47	c9 57		cmp #$57			cmp 	#markerWHILE 						; does it match
.2d49	f0 05		beq $2d50			beq 	_isok
.2d4b	a2 11		ldx #$11			ldx 	#ErrorID_wendErr
.2d4d	20 18 15	jsr $1518		jsr	errorHandler
.2d50					_isok:
.2d50	a9 01		lda #$01			lda 	#1
.2d52	20 dd 3b	jsr $3bdd			jsr 	RSLoadPosition				; go back until true
.2d55	a9 04		lda #$04			lda 	#4
.2d57	20 c0 3b	jsr $3bc0			jsr 	RSFree 						; close the loop
.2d5a	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/system/clear.asm

.2d5b					CommandClear:
.2d5b					XCommandClear:
.2d5b	98		tya				tya
.2d5c	48		pha				pha
.2d5d	ad cc 0a	lda $0acc			lda 	endMemory					; set high memory = end of memory
.2d60	85 33		sta $33				sta 	highMemory
.2d62	ad cd 0a	lda $0acd			lda 	endMemory+1
.2d65	85 34		sta $34				sta 	highMemory+1
.2d67	ad c8 0a	lda $0ac8			lda 	basePage 					; work out where the program ends.
.2d6a	85 2a		sta $2a				sta 	temp0
.2d6c	ad c9 0a	lda $0ac9			lda 	basePage+1
.2d6f	85 2b		sta $2b				sta 	temp0+1
.2d71					_CCFindEnd:
.2d71	a0 00		ldy #$00			ldy 	#0
.2d73	b1 2a		lda ($2a),y			lda 	(temp0),y
.2d75	f0 0c		beq $2d83			beq 	_CCFoundEnd 				; offset zero is end.
.2d77	18		clc				clc
.2d78	65 2a		adc $2a				adc 	temp0 						; move to next line
.2d7a	85 2a		sta $2a				sta 	temp0
.2d7c	90 f3		bcc $2d71			bcc 	_CCFindEnd
.2d7e	e6 2b		inc $2b				inc 	temp0+1
.2d80	4c 71 2d	jmp $2d71			jmp 	_CCFindEnd
.2d83					_CCFoundEnd:
.2d83	a5 2a		lda $2a				lda 	temp0 						; put temp0 in lowMemory
.2d85	85 35		sta $35				sta 	lowMemory
.2d87	a5 2b		lda $2b				lda 	temp0+1
.2d89	85 36		sta $36				sta 	lowMemory+1
.2d8b	18		clc				clc 								; put temp0+1 in endProgram
.2d8c	a5 2a		lda $2a				lda 	temp0
.2d8e	69 01		adc #$01			adc 	#1
.2d90	8d ca 0a	sta $0aca			sta 	endProgram
.2d93	a5 2b		lda $2b				lda 	temp0+1
.2d95	69 00		adc #$00			adc 	#0
.2d97	8d cb 0a	sta $0acb			sta 	endProgram+1
.2d9a	18		clc				clc 								; put a bit of space in.
.2d9b	a5 35		lda $35				lda 	lowMemory
.2d9d	69 04		adc #$04			adc 	#4
.2d9f	85 35		sta $35				sta 	lowMemory
.2da1	90 02		bcc $2da5			bcc 	_CCNoCarry
.2da3	e6 36		inc $36				inc 	lowMemory+1
.2da5					_CCNoCarry:
.2da5	20 90 3b	jsr $3b90			jsr 	RSReset 					; reset the return stack.
.2da8	a2 06		ldx #$06		ldx	#6
.2daa	20 02 4b	jsr $4b02		jsr	variableHandler
.2dad	20 0c 2c	jsr $2c0c			jsr 	ScanProc 					; scan for procedures
.2db0	20 91 25	jsr $2591			jsr 	CommandRestore 				; do a restore
.2db3	68		pla				pla
.2db4	a8		tay				tay
.2db5	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/system/list.asm

.0d03					structIndent:
>0d03							.fill 	1
.2db6					CommandList:
.2db6	a2 00		ldx #$00			ldx		#0 							; set start/end lines in stack 0/1 to 0 and $FFFF
.2db8	8e 03 0d	stx $0d03			stx 	structIndent
.2dbb	20 03 3b	jsr $3b03			jsr 	MInt32False
.2dbe	e8		inx				inx
.2dbf	20 ff 3a	jsr $3aff			jsr 	MInt32True
.2dc2	b1 28		lda ($28),y			lda 	(codePtr),y 				; look at first token
.2dc4	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; list ,xxxx
.2dc6	f0 15		beq $2ddd			beq 	_CLEndLine
.2dc8	c9 00		cmp #$00			cmp 	#0 							; list ... on its own.
.2dca	30 1b		bmi $2de7			bmi 	_CLDoListing 				; do the whole lot.
.2dcc	a2 00		ldx #$00			ldx 	#0 							; get start line at stack:0
.2dce	20 6b 34	jsr $346b			jsr 	EvaluateInteger
.2dd1	b1 28		lda ($28),y			lda 	(codePtr),y 				; , follows ?
.2dd3	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.2dd5	f0 06		beq $2ddd			beq 	_CLEndLine
.2dd7	20 41 3a	jsr $3a41			jsr 	MInt32CopyUp 				; copy first to second if just a line number on its
.2dda	4c e7 2d	jmp $2de7			jmp 	_CLDoListing 				; own e.g. list 1100
.2ddd					_CLEndLine:
.2ddd	c8		iny				iny 								; skip comma
.2dde	b1 28		lda ($28),y			lda 	(codePtr),y  				; no number follows, then its list 1000,
.2de0	30 05		bmi $2de7			bmi 	_CLDoListing
.2de2	a2 01		ldx #$01			ldx 	#1 							; get the last line to list
.2de4	20 6b 34	jsr $346b			jsr 	EvaluateInteger				; get end
.2de7					_CLDoListing:
.2de7	20 8a 2f	jsr $2f8a			jsr 	ResetCodeAddress 			; back to the start.
.2dea					_CLCheckLoop:
.2dea	a2 02		ldx #$02		ldx	#2
.2dec	20 f6 14	jsr $14f6		jsr	deviceHandler
.2def	a0 00		ldy #$00			ldy 	#0							; check end.
.2df1	b1 28		lda ($28),y			lda 	(codePtr),y
.2df3	f0 41		beq $2e36			beq 	_CLEnd
.2df5	a2 00		ldx #$00			ldx 	#0 							; compare vs lower.
.2df7	20 39 2e	jsr $2e39			jsr 	CLCompareLineTOS
.2dfa	c9 ff		cmp #$ff			cmp 	#255 						; if < skip
.2dfc	f0 28		beq $2e26			beq 	_CLNext
.2dfe	e8		inx				inx
.2dff	20 39 2e	jsr $2e39			jsr 	CLCompareLineTOS 			; compare vs higher
.2e02	c9 01		cmp #$01			cmp 	#1
.2e04	f0 20		beq $2e26			beq 	_CLNext
.2e06	a9 80		lda #$80			lda 	#$80 						; undo any down indents this line.
.2e08	20 5b 2e	jsr $2e5b			jsr 	CLStructureCheck
.2e0b	ad 03 0d	lda $0d03			lda 	structIndent 				; indent level.
.2e0e	10 02		bpl $2e12			bpl 	_CLPositive
.2e10	a9 00		lda #$00			lda 	#0
.2e12					_CLPositive:
.2e12	a2 04		ldx #$04		ldx	#4
.2e14	20 31 47	jsr $4731		jsr	tokeniserHandler
.2e17	a9 82		lda #$82			lda 	#$82 						; up indents from this point on.
.2e19	20 5b 2e	jsr $2e5b			jsr 	CLStructureCheck
.2e1c	ad 03 0d	lda $0d03			lda 	structIndent
.2e1f	10 05		bpl $2e26			bpl 	_CLNext
.2e21	a9 00		lda #$00			lda 	#0
.2e23	8d 03 0d	sta $0d03			sta 	structIndent
.2e26					_CLNext:
.2e26	a0 00		ldy #$00			ldy 	#0 							; go to next line.
.2e28	b1 28		lda ($28),y			lda 	(codePtr),y
.2e2a	18		clc				clc
.2e2b	65 28		adc $28				adc 	codePtr
.2e2d	85 28		sta $28				sta 	codePtr
.2e2f	90 b9		bcc $2dea			bcc 	_CLCheckLoop
.2e31	e6 29		inc $29				inc 	codePtr+1
.2e33	4c ea 2d	jmp $2dea			jmp 	_CLCheckLoop
.2e36					_CLEnd:
.2e36	4c ec 3b	jmp $3bec			jmp 	WarmStart 					; warm start after list.
.2e39					CLCompareLineTOS:
.2e39	a0 01		ldy #$01			ldy 	#1
.2e3b	b1 28		lda ($28),y			lda 	(codePtr),y
.2e3d	55 98		eor $98,x			eor 	esInt0,x
.2e3f	85 2a		sta $2a				sta 	temp0
.2e41	c8		iny				iny
.2e42	b1 28		lda ($28),y			lda 	(codePtr),y
.2e44	55 a0		eor $a0,x			eor 	esInt1,x
.2e46	05 2a		ora $2a				ora 	temp0
.2e48	f0 10		beq $2e5a			beq 	_CLCLTExit
.2e4a	88		dey				dey
.2e4b	b1 28		lda ($28),y			lda 	(codePtr),y
.2e4d	d5 98		cmp $98,x			cmp 	esInt0,x
.2e4f	c8		iny				iny
.2e50	b1 28		lda ($28),y			lda 	(codePtr),y
.2e52	f5 a0		sbc $a0,x			sbc 	esInt1,x
.2e54	a9 ff		lda #$ff			lda 	#255
.2e56	90 02		bcc $2e5a			bcc 	_CLCLTExit
.2e58	a9 01		lda #$01			lda 	#1
.2e5a					_CLCLTExit:
.2e5a	60		rts				rts
.2e5b					CLStructureCheck:
.2e5b	85 2a		sta $2a				sta 	temp0
.2e5d	a0 03		ldy #$03			ldy 	#3
.2e5f					_CLSCLoop:
.2e5f	b1 28		lda ($28),y			lda 	(codePtr),y 				; get and consume token.
.2e61	c8		iny				iny
.2e62	c9 80		cmp #$80			cmp 	#$80
.2e64	90 f9		bcc $2e5f			bcc 	_CLSCLoop 					; $00-$7F just step over.
.2e66	f0 28		beq $2e90			beq		_CLSCExit					; EOL return
.2e68	c9 86		cmp #$86			cmp 	#$86 						; special handler
.2e6a	90 1e		bcc $2e8a			bcc 	_CLSCSpecial
.2e6c	c9 99		cmp #$99			cmp 	#TOK_STRUCTST 				; check if structure changer.
.2e6e	90 ef		bcc $2e5f			bcc 	_CLSCLoop
.2e70	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST
.2e72	b0 eb		bcs $2e5f			bcs 	_CLSCLoop
.2e74	aa		tax				tax 								; get adjustment
.2e75	bd 87 33	lda $3387,x			lda 	ELBinaryOperatorInfo-TOK_BINARYST,x
.2e78	c5 2a		cmp $2a				cmp 	temp0	 					; if what we're searching for
.2e7a	d0 e3		bne $2e5f			bne 	_CLSCLoop
.2e7c	38		sec				sec
.2e7d	e9 81		sbc #$81			sbc 	#$81 						; convert to offset
.2e7f	0a		asl a				asl 	a 							; double indent step
.2e80	18		clc				clc
.2e81	6d 03 0d	adc $0d03			adc 	structIndent 				; add to structure indent
.2e84	8d 03 0d	sta $0d03			sta 	structIndent
.2e87	4c 5f 2e	jmp $2e5f			jmp 	_CLSCLoop
.2e8a					_CLSCSpecial:
.2e8a	20 e7 2c	jsr $2ce7			jsr 	ScannerSkipSpecial
.2e8d	4c 5f 2e	jmp $2e5f			jmp 	_CLSCLoop
.2e90					_CLSCExit:
.2e90	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/system/loadsave.asm

.2e91					CommandLoad:
.2e91	20 b9 2e	jsr $2eb9			jsr 	CLSParameters 					; get parameters for load.
.2e94	08		php				php
.2e95	a2 0e		ldx #$0e		ldx	#14
.2e97	20 f6 14	jsr $14f6		jsr	deviceHandler
.2e9a	28		plp				plp
.2e9b	b0 08		bcs $2ea5			bcs 	_CLExit 						; if CC then load a program, so warm start.
.2e9d	20 5b 2d	jsr $2d5b			jsr 	CommandClear
.2ea0	a2 04		ldx #$04		ldx	#4
.2ea2	20 53 25	jsr $2553		jsr	interactionHandler
.2ea5					_CLExit
.2ea5	60		rts				rts
.2ea6					CommandSave:
.2ea6	20 b9 2e	jsr $2eb9			jsr 	CLSParameters					; get parameters for save
.2ea9	90 08		bcc $2eb3			bcc 	_CSNoOverrideAddress
.2eab	20 83 3b	jsr $3b83			jsr 	CheckComma 						; should be a comma.
.2eae	a2 02		ldx #$02			ldx 	#2
.2eb0	20 6b 34	jsr $346b			jsr 	EvaluateInteger 				; get save end address.
.2eb3					_CSNoOverrideAddress:
.2eb3	a2 18		ldx #$18		ldx	#24
.2eb5	20 f6 14	jsr $14f6		jsr	deviceHandler
.2eb8	60		rts				rts
.2eb9					CLSParameters:
.2eb9	a2 00		ldx #$00			ldx 	#0 								; string
.2ebb	20 60 34	jsr $3460			jsr 	EvaluateString
.2ebe	e8		inx				inx 									; erase out +1 +2
.2ebf	20 03 3b	jsr $3b03			jsr 	MInt32False
.2ec2	e8		inx				inx
.2ec3	20 03 3b	jsr $3b03			jsr 	MInt32False
.2ec6	ad c8 0a	lda $0ac8			lda 	basePage 						; default start address.
.2ec9	85 99		sta $99				sta 	esInt0+1
.2ecb	ad c9 0a	lda $0ac9			lda 	basePage+1
.2ece	85 a1		sta $a1				sta 	esInt1+1
.2ed0	ad ca 0a	lda $0aca			lda 	endProgram 						; default end address
.2ed3	85 9a		sta $9a				sta 	esInt0+2
.2ed5	ad cb 0a	lda $0acb			lda 	endProgram+1
.2ed8	85 a2		sta $a2				sta 	esInt1+2
.2eda	b1 28		lda ($28),y			lda 	(codePtr),y 					; , following
.2edc	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.2ede	d0 08		bne $2ee8			bne 	_CLSDefault
.2ee0	c8		iny				iny 									; skip comma
.2ee1	a2 01		ldx #$01			ldx 	#1 								; get numeric value.
.2ee3	20 6b 34	jsr $346b			jsr 	EvaluateInteger
.2ee6	38		sec				sec
.2ee7	60		rts				rts
.2ee8					_CLSDefault:
.2ee8	18		clc				clc
.2ee9	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/system/new.asm

.2eea					Command_New:
.2eea					Command_XNew:
.2eea	20 8a 2f	jsr $2f8a			jsr 	ResetCodeAddress 			; point to first line
.2eed	a0 00		ldy #$00			ldy 	#0 							; and zap it.
.2eef	98		tya				tya
.2ef0	91 28		sta ($28),y			sta 	(codePtr),y
.2ef2	20 5b 2d	jsr $2d5b			jsr 	CommandClear 				; clear everything down.
.2ef5	4c b1 28	jmp $28b1			jmp 	CommandEND 					; do END code, as there's nothing to run.

;******  Return to file: main/main.asm


;******  Processing file: main/commands/system/run.asm

.0d04					breakCounter:
>0d04								.fill 	1
.0d05					breakIncrement:
>0d05								.fill 	1
.2ef8					Command_Run:
.2ef8					XCommand_Run:
.2ef8	a2 ff		ldx #$ff			ldx 	#$FF 						; reset the stack.
.2efa	9a		txs				txs
.2efb	20 84 2f	jsr $2f84			jsr 	BreakOn 					; turn break on
.2efe	20 5b 2d	jsr $2d5b			jsr 	CommandClear 				; clear everything.
.2f01	20 8a 2f	jsr $2f8a			jsr 	ResetCodeAddress 			; back to the start.
.2f04					Command_RunFrom:
.2f04	a0 03		ldy #$03			ldy 	#3 							; over offset/line #
.2f06					CRNextInstruction:
.2f06	a9 00		lda #$00			lda 	#0
.2f08	85 3a		sta $3a				sta 	softMemAlloc+1
.2f0a	ad 04 0d	lda $0d04			lda 	breakCounter 				; check for break.
.2f0d	6d 05 0d	adc $0d05			adc 	breakIncrement
.2f10	8d 04 0d	sta $0d04			sta 	breakCounter
.2f13	90 05		bcc $2f1a			bcc 	_CRNoChecks
.2f15	a2 02		ldx #$02		ldx	#2
.2f17	20 f6 14	jsr $14f6		jsr	deviceHandler
.2f1a					_CRNoChecks
.2f1a	b1 28		lda ($28),y			lda 	(codePtr),y 				; get next token.
.2f1c	10 1c		bpl $2f3a			bpl 	_CRNotToken
.2f1e	c9 c9		cmp #$c9			cmp 	#TOK_TOKENS 				; if in the tokens then do that token.
.2f20	b0 0c		bcs $2f2e			bcs 	_CRExecute
.2f22	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST 				; unary is ignored.
.2f24	b0 71		bcs $2f97			bcs 	Unimplemented
.2f26	c9 99		cmp #$99			cmp 	#TOK_STRUCTST 				; execute structures.
.2f28	b0 04		bcs $2f2e			bcs 	_CRExecute
.2f2a	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; if one of the system tokens $80-$85 do that
.2f2c	b0 16		bcs $2f44			bcs 	_CRCheckIndirect 			; if in that unused range check for ! or ? or AND
.2f2e					_CRExecute:
.2f2e	c8		iny				iny 								; consume it.
.2f2f	0a		asl a				asl 	a 							; double it, losing most significant bit.
.2f30	aa		tax				tax
.2f31	20 37 2f	jsr $2f37			jsr 	_CRRunRoutine 				; we want to do jsr (group0vectors,x)
.2f34	4c 06 2f	jmp $2f06			jmp 	CRNextInstruction
.2f37					_CRRunRoutine:
.2f37	7c a1 2f	jmp ($2fa1,x)			jmp 	(Group0Vectors,x)
.2f3a					_CRNotToken:
.2f3a	c9 40		cmp #$40			cmp 	#$40 						; if 0-3F then it is a letter
.2f3c	b0 59		bcs $2f97			bcs 	Unimplemented
.2f3e					_CRDefaultLet:
.2f3e	20 e4 27	jsr $27e4			jsr 	CommandLet 					; do the default, LET
.2f41	4c 06 2f	jmp $2f06			jmp 	CRNextInstruction
.2f44					_CRCheckIndirect:
.2f44	c9 86		cmp #$86			cmp 	#TKW_AND 					; AND (assembler)
.2f46	f0 0a		beq $2f52			beq 	_CRAndCommand
.2f48	c9 97		cmp #$97			cmp 	#TKW_PLING 					; !<term> =
.2f4a	f0 f2		beq $2f3e			beq 	_CRDefaultLet
.2f4c	c9 98		cmp #$98			cmp 	#TKW_QMARK 					; ?<term> =
.2f4e	f0 ee		beq $2f3e			beq 	_CRDefaultLet
.2f50	d0 45		bne $2f97			bne 	Unimplemented
.2f52					_CRAndCommand:
.2f52	c8		iny				iny 								; skip over the AND token
.2f53	a9 95		lda #$95			lda 	#TKW_LPARENANDRPAREN 		; replace it with the pseudo-and
.2f55	20 6f 2f	jsr $2f6f			jsr 	CommandAssembler 			; do the assembler command
.2f58	4c 06 2f	jmp $2f06			jmp 	CRNextInstruction 			; and loop round.
.2f5b					CommandShift1:
.2f5b	b1 28		lda ($28),y			lda 	(codePtr),y 				; get shifted value
.2f5d	10 38		bpl $2f97			bpl 	Unimplemented 				; we have an error as this should not happen.
.2f5f	c8		iny				iny 								; advance over it.
.2f60	c9 94		cmp #$94			cmp 	#TKA_GROUP1 				; is it an assembler constant ?
.2f62	b0 0b		bcs $2f6f			bcs 	CommandAssembler
.2f64	0a		asl a				asl 	a 							; double into X
.2f65	aa		tax				tax
.2f66	7c 67 30	jmp ($3067,x)			jmp 	(Group1Vectors-12,x) 		; and do the code.
.2f69					CommandShift2:
.2f69	a9 ff		lda #$ff			lda 	#$FF 						; $FF means command not unary function.
.2f6b	20 69 18	jsr $1869		jsr	extensionHandler
.2f6e	60		rts				rts
.2f6f					CommandAssembler:
.2f6f	a2 02		ldx #$02		ldx	#2
.2f71	20 b4 13	jsr $13b4		jsr	assemblerHandler
.2f74	60		rts				rts
.2f75					CommandAssemblerLabel:
.2f75	a2 04		ldx #$04		ldx	#4
.2f77	20 b4 13	jsr $13b4		jsr	assemblerHandler
.2f7a	60		rts				rts
.2f7b					CommandColon:
.2f7b	60		rts				rts
.2f7c					CommandBreak:
.2f7c	20 69 34	jsr $3469			jsr 	EvaluateRootInteger
.2f7f	20 2a 3b	jsr $3b2a			jsr 	MInt32Zero
.2f82	f0 02		beq $2f86			beq 	BreakOff
.2f84					BreakOn:
.2f84	a2 08		ldx #$08			ldx 	#8
.2f86					BreakOff:
.2f86	8e 05 0d	stx $0d05			stx 	breakIncrement
.2f89	60		rts				rts
.2f8a					ResetCodeAddress:
.2f8a	ad c8 0a	lda $0ac8			lda 	basePage 					; copy basePage to code Pointer
.2f8d	85 28		sta $28				sta 	codePtr
.2f8f	ad c9 0a	lda $0ac9			lda 	basePage+1
.2f92	85 29		sta $29				sta 	codePtr+1
.2f94	a0 03		ldy #$03			ldy 	#3 							; offset after offset link and line#
.2f96	60		rts				rts
.2f97					Unimplemented:
.2f97	a2 01		ldx #$01			ldx 	#ErrorID_Missing
.2f99	20 18 15	jsr $1518		jsr	errorHandler
.2f9c					TKErr01:
.2f9c					TKErr02:
.2f9c					TKErr03:
.2f9c					TKErr04:
.2f9c					TKErr05:
.2f9c					TKErr06:
.2f9c					TKErr07:
.2f9c					TKErr08:
.2f9c					TKErr09:
.2f9c					TKErr10:
.2f9c					TKErr11:
.2f9c					TKErr12:
.2f9c					TKErr13:
.2f9c					TKErr14:
.2f9c					TKErr15:
.2f9c	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.2f9e	20 18 15	jsr $1518		jsr	errorHandler

;******  Processing file: main/commands/system/../../../generated/tokenvectors0.inc

.2fa1					Group0Vectors:
>2fa1	b7 28					.word	AdvanceNextLine          ; $80 [[eol]]
>2fa3	5b 2f					.word	CommandShift1            ; $81 [[sh1]]
>2fa5	69 2f					.word	CommandShift2            ; $82 [[sh2]]
>2fa7	9c 2f					.word	TKErr09                  ; $83 [[sh3]]
>2fa9	9c 2f					.word	TKErr10                  ; $84 [[fpc]]
>2fab	9c 2f					.word	TKErr08                  ; $85 [[str]]
>2fad	50 31					.word	AndHandler               ; $86 and
>2faf	3d 31					.word	OrHandler                ; $87 or
>2fb1	2a 31					.word	XorHandler               ; $88 xor
>2fb3	72 32					.word	CompareGreaterEq         ; $89 >=
>2fb5	7c 32					.word	CompareLessEq            ; $8a <=
>2fb7	5e 32					.word	CompareGreater           ; $8b >
>2fb9	54 32					.word	CompareLess              ; $8c <
>2fbb	4a 32					.word	CompareEquals            ; $8d =
>2fbd	68 32					.word	CompareNotEquals         ; $8e <>
>2fbf	bb 30					.word	AddHandler               ; $8f +
>2fc1	de 30					.word	SubHandler               ; $90 -
>2fc3	76 31					.word	ShrHandler               ; $91 >>
>2fc5	63 31					.word	ShlHandler               ; $92 <<
>2fc7	f1 30					.word	MulHandler               ; $93 *
>2fc9	04 31					.word	DivHandler               ; $94 /
>2fcb	17 31					.word	ModHandler               ; $95 mod
>2fcd	af 31					.word	PowerHandler             ; $96 ^
>2fcf	89 31					.word	WordRefHandler           ; $97 !
>2fd1	9c 31					.word	ByteRefHandler           ; $98 ?
>2fd3	76 2c					.word	Command_Repeat           ; $99 repeat
>2fd5	20 2d					.word	Command_While            ; $9a while
>2fd7	cb 28					.word	Command_FOR              ; $9b for
>2fd9	da 29					.word	CommandIf                ; $9c if
>2fdb	9c 2f					.word	TKErr04                  ; $9d defproc
>2fdd	83 2c					.word	Command_Until            ; $9e until
>2fdf	43 2d					.word	Command_Wend             ; $9f wend
>2fe1	2c 29					.word	Command_NEXT             ; $a0 next
>2fe3	9c 2f					.word	TKErr06                  ; $a1 then
>2fe5	15 2a					.word	Command_ENDIF            ; $a2 endif
>2fe7	85 2b					.word	ReturnProc               ; $a3 endproc
>2fe9	d6 33					.word	UnaryParenthesis         ; $a4 (
>2feb	b8 35					.word	UnaryLen                 ; $a5 len(
>2fed	fc 35					.word	UnarySgn                 ; $a6 sgn(
>2fef	e5 35					.word	UnaryAbs                 ; $a7 abs(
>2ff1	55 36					.word	Unary_Random             ; $a8 random(
>2ff3	9f 36					.word	Unary_Page               ; $a9 page
>2ff5	ff 3a					.word	MInt32True               ; $aa true
>2ff7	03 3b					.word	MInt32False              ; $ab false
>2ff9	6a 36					.word	Unary_Min                ; $ac min(
>2ffb	6e 36					.word	Unary_Max                ; $ad max(
>2ffd	77 37					.word	UnarySys                 ; $ae sys(
>2fff	20 37					.word	UnaryTimer               ; $af timer(
>3001	35 35					.word	EventFunction            ; $b0 event(
>3003	49 37					.word	UnaryGet                 ; $b1 get(
>3005	39 37					.word	UnaryInkey               ; $b2 inkey(
>3007	f0 36					.word	UnaryAlloc               ; $b3 alloc(
>3009	b0 37					.word	ExecChr                  ; $b4 chr$(
>300b	e0 37					.word	ExecLeft                 ; $b5 left$(
>300d	fd 37					.word	ExecMid                  ; $b6 mid$(
>300f	25 38					.word	ExecRight                ; $b7 right$(
>3011	b7 34					.word	Event_Str                ; $b8 str$(
>3013	e6 34					.word	UnaryVal                 ; $b9 val(
>3015	13 36					.word	UnaryPeek                ; $ba peek(
>3017	19 36					.word	UnaryDeek                ; $bb deek(
>3019	1f 36					.word	UnaryLeek                ; $bc leek(
>301b	d6 35					.word	UnaryAsc                 ; $bd asc(
>301d	ca 36					.word	UnaryIntToFloat          ; $be int(
>301f	dd 36					.word	UnaryFloatToInt          ; $bf float(
>3021	e9 34					.word	UnaryIsVal               ; $c0 isval(
>3023	c7 37					.word	ExecUpper                ; $c1 upper$(
>3025	c4 37					.word	ExecLower                ; $c2 lower$(
>3027	ad 36					.word	UnaryReference           ; $c3 @
>3029	c3 36					.word	UnaryComplement          ; $c4 ~
>302b	c0 36					.word	UnaryHexMarker           ; $c5 &
>302d	62 37					.word	UnaryGetString           ; $c6 get$(
>302f	68 37					.word	UnaryInkeyString         ; $c7 inkey$(
>3031	9f 37					.word	UnaryMem                 ; $c8 mem
>3033	9c 2f					.word	TKErr01                  ; $c9 )
>3035	7b 2f					.word	CommandColon             ; $ca :
>3037	9c 2f					.word	TKErr02                  ; $cb ,
>3039	9c 2f					.word	TKErr03                  ; $cc ;
>303b	9f 28					.word	Command_Rem2             ; $cd '
>303d	9c 2f					.word	TKErr07                  ; $ce to
>303f	9c 2f					.word	TKErr05                  ; $cf step
>3041	18 2b					.word	CallProc                 ; $d0 proc
>3043	16 2a					.word	CommandLocal             ; $d1 local
>3045	d6 27					.word	Command_Dim              ; $d2 dim
>3047	9f 28					.word	Command_Rem              ; $d3 rem
>3049	e4 27					.word	CommandLet               ; $d4 let
>304b	20 26					.word	Command_Input            ; $d5 input
>304d	0f 2a					.word	Command_ELSE             ; $d6 else
>304f	a7 27					.word	Command_VDU              ; $d7 vdu
>3051	d6 26					.word	Command_Print            ; $d8 print
>3053	88 25					.word	CommandData              ; $d9 data
>3055	9c 2f					.word	TKErr13                  ; $da image
>3057	9c 2f					.word	TKErr12                  ; $db at
>3059	9c 2f					.word	TKErr14                  ; $dc flip
>305b	c8 27					.word	Command_Assert           ; $dd assert
>305d	62 28					.word	Command_Poke             ; $de poke
>305f	66 28					.word	Command_Doke             ; $df doke
>3061	6a 28					.word	Command_Loke             ; $e0 loke
>3063	77 27					.word	Command_Ink              ; $e1 ink
>3065	82 27					.word	Command_Paper            ; $e2 paper
>3067	71 27					.word	Command_CLS              ; $e3 cls
>3069	8d 27					.word	Command_Locate           ; $e4 locate
>306b	75 2f					.word	CommandAssemblerLabel    ; $e5 .
>306d	9c 2f					.word	TKErr15                  ; $e6 from
>306f	9c 2f					.word	TKErr11                  ; $e7 #
>3071	5b 2d					.word	CommandClear             ; $e8 clear

;******  Return to file: main/commands/system/run.asm


;******  Processing file: main/commands/system/../../../generated/tokenvectors1.inc

.3073					Group1Vectors:
>3073	91 2e					.word	CommandLoad              ; $86 load
>3075	a6 2e					.word	CommandSave              ; $87 save
>3077	b6 2d					.word	CommandList              ; $88 list
>3079	ea 2e					.word	Command_New              ; $89 new
>307b	7c 2f					.word	CommandBreak             ; $8a break
>307d	f8 2e					.word	Command_Run              ; $8b run
>307f	5d 25					.word	CommandRead              ; $8c read
>3081	91 25					.word	CommandRestore           ; $8d restore
>3083	b1 28					.word	CommandEnd               ; $8e end
>3085	ac 28					.word	CommandStop              ; $8f stop
>3087	b4 28					.word	CommandXemu              ; $90 xemu
>3089	ee 25					.word	CommandGOTO              ; $91 goto
>308b	c3 25					.word	CommandGOSUB             ; $92 gosub
>308d	d6 25					.word	CommandRETURN            ; $93 return

;******  Return to file: main/commands/system/run.asm


;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/binary/binary.asm

.308f					BinaryProcess:
.308f	b5 90		lda $90,x			lda 	esType,x 					; or type bytes together and check bit 6.
.3091	15 91		ora $91,x			ora 	esType+1,x 					; (the float bit)
.3093	0a		asl a				asl 	a
.3094	30 0e		bmi $30a4			bmi 	_BPStringType 				; if bit 6 is set, then string type, error
.3096	18		clc				clc 								; return CC for integer
.3097	29 02		and #$02			and 	#$02 						; $02 because of ASL A. check original bit 1.
.3099	f0 08		beq $30a3			beq 	_BPExit 					; if both integer then return with CC.
.309b	20 a9 30	jsr $30a9			jsr 	BPMakeBothFloat 			; make both float
.309e	a9 01		lda #$01			lda 	#$01 						; set result type to float
.30a0	95 90		sta $90,x			sta 	esType,x
.30a2	38		sec				sec 								; and return with carry set.
.30a3					_BPExit:
.30a3	60		rts				rts
.30a4					_BPStringType:
.30a4	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.30a6	20 18 15	jsr $1518		jsr	errorHandler
.30a9					BPMakeBothFloat:
.30a9	e8		inx				inx
.30aa	20 ae 30	jsr $30ae			jsr 	BPMakeFloat 				; one is a float, so we do both as floats.
.30ad	ca		dex				dex
.30ae					BPMakeFloat:
.30ae	b5 90		lda $90,x			lda 	esType,x 					; get type bit which is in bit 0
.30b0	4a		lsr a				lsr 	a
.30b1	b0 07		bcs $30ba			bcs 	_BPIsFloat 					; already a float if set.
.30b3	8a		txa				txa
.30b4	a2 1c		ldx #$1c		ldx	#28
.30b6	20 67 23	jsr $2367		jsr	floatingpointHandler
.30b9	aa		tax				tax
.30ba					_BPIsFloat:
.30ba	60		rts				rts
.30bb					AddHandler:
.30bb	20 8c 32	jsr $328c			jsr 	DereferenceTwo 				; dereference top two on stack.
.30be	b5 90		lda $90,x			lda 	esType,x 					; check two strings.
.30c0	35 91		and $91,x			and 	esType+1,x
.30c2	29 40		and #$40			and 	#$40 						; if both have bit 6 set ... we have two strings
.30c4	d0 10		bne $30d6			bne 	_AHStringConcat				; concatenate strings.
.30c6	20 8f 30	jsr $308f			jsr 	BinaryProcess 				; check to see if either is float
.30c9	b0 03		bcs $30ce			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.30cb	4c e7 39	jmp $39e7			jmp 	MInt32Add 							; else do it as integer.
.30ce					_IsFPOperation:
.30ce	8a		txa				txa 								; call the relevant fp routine
.30cf	a2 04		ldx #$04		ldx	#4
.30d1	20 67 23	jsr $2367		jsr	floatingpointHandler
.30d4	aa		tax				tax
.30d5	60		rts				rts
.30d6					_AHStringConcat:
.30d6	8a		txa				txa 								; handled by the string module.
.30d7	a2 06		ldx #$06		ldx	#6
.30d9	20 ae 3e	jsr $3eae		jsr	stringHandler
.30dc	aa		tax				tax
.30dd	60		rts				rts
.30de					SubHandler:
.30de	20 8c 32	jsr $328c			jsr 	DereferenceTwo
.30e1	20 8f 30	jsr $308f			jsr 	BinaryProcess 				; check to see if either is float
.30e4	b0 03		bcs $30e9			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.30e6	4c 01 3a	jmp $3a01			jmp 	MInt32Sub 							; else do it as integer.
.30e9					_IsFPOperation:
.30e9	8a		txa				txa 								; call the relevant fp routine
.30ea	a2 12		ldx #$12		ldx	#18
.30ec	20 67 23	jsr $2367		jsr	floatingpointHandler
.30ef	aa		tax				tax
.30f0	60		rts				rts
.30f1					MulHandler:
.30f1	20 8c 32	jsr $328c			jsr 	DereferenceTwo
.30f4	20 8f 30	jsr $308f			jsr 	BinaryProcess 				; check to see if either is float
.30f7	b0 03		bcs $30fc			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.30f9	4c 1b 3a	jmp $3a1b			jmp 	MInt32Multiply 							; else do it as integer.
.30fc					_IsFPOperation:
.30fc	8a		txa				txa 								; call the relevant fp routine
.30fd	a2 0c		ldx #$0c		ldx	#12
.30ff	20 67 23	jsr $2367		jsr	floatingpointHandler
.3102	aa		tax				tax
.3103	60		rts				rts
.3104					DivHandler:
.3104	20 8c 32	jsr $328c			jsr 	DereferenceTwo
.3107	20 8f 30	jsr $308f			jsr 	BinaryProcess 				; check to see if either is float
.310a	b0 03		bcs $310f			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.310c	4c d8 38	jmp $38d8			jmp 	MInt32SDivide 							; else do it as integer.
.310f					_IsFPOperation:
.310f	8a		txa				txa 								; call the relevant fp routine
.3110	a2 08		ldx #$08		ldx	#8
.3112	20 67 23	jsr $2367		jsr	floatingpointHandler
.3115	aa		tax				tax
.3116	60		rts				rts
.3117					ModHandler:
.3117	20 8c 32	jsr $328c			jsr 	DereferenceTwo
.311a	20 8f 30	jsr $308f			jsr 	BinaryProcess 				; check to see if either is float
.311d	b0 03		bcs $3122			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.311f	4c 56 39	jmp $3956			jmp 	MInt32Modulus 							; else do it as integer.
.3122					_IsFPOperation:
.3122	8a		txa				txa 								; call the relevant fp routine
.3123	a2 0a		ldx #$0a		ldx	#10
.3125	20 67 23	jsr $2367		jsr	floatingpointHandler
.3128	aa		tax				tax
.3129	60		rts				rts
.312a					XorHandler:
.312a	20 8c 32	jsr $328c			jsr 	DereferenceTwo
.312d	20 8f 30	jsr $308f			jsr 	BinaryProcess 				; check to see if either is float
.3130	b0 03		bcs $3135			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.3132	4c 8a 38	jmp $388a			jmp 	MInt32Xor 							; else do it as integer.
.3135					_IsFPOperation:
.3135	8a		txa				txa 								; call the relevant fp routine
.3136	a2 0a		ldx #$0a		ldx	#10
.3138	20 67 23	jsr $2367		jsr	floatingpointHandler
.313b	aa		tax				tax
.313c	60		rts				rts
.313d					OrHandler:
.313d	20 8c 32	jsr $328c			jsr 	DereferenceTwo
.3140	20 8f 30	jsr $308f			jsr 	BinaryProcess 				; check to see if either is float
.3143	b0 03		bcs $3148			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.3145	4c 71 38	jmp $3871			jmp 	MInt32Or 							; else do it as integer.
.3148					_IsFPOperation:
.3148	8a		txa				txa 								; call the relevant fp routine
.3149	a2 0a		ldx #$0a		ldx	#10
.314b	20 67 23	jsr $2367		jsr	floatingpointHandler
.314e	aa		tax				tax
.314f	60		rts				rts
.3150					AndHandler:
.3150	20 8c 32	jsr $328c			jsr 	DereferenceTwo
.3153	20 8f 30	jsr $308f			jsr 	BinaryProcess 				; check to see if either is float
.3156	b0 03		bcs $315b			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.3158	4c 58 38	jmp $3858			jmp 	MInt32And 							; else do it as integer.
.315b					_IsFPOperation:
.315b	8a		txa				txa 								; call the relevant fp routine
.315c	a2 0a		ldx #$0a		ldx	#10
.315e	20 67 23	jsr $2367		jsr	floatingpointHandler
.3161	aa		tax				tax
.3162	60		rts				rts
.3163					ShlHandler:
.3163	20 8c 32	jsr $328c			jsr 	DereferenceTwo
.3166	20 8f 30	jsr $308f			jsr 	BinaryProcess 				; check to see if either is float
.3169	b0 03		bcs $316e			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.316b	4c e4 31	jmp $31e4			jmp 	Mint32ShiftLeftX 							; else do it as integer.
.316e					_IsFPOperation:
.316e	8a		txa				txa 								; call the relevant fp routine
.316f	a2 0a		ldx #$0a		ldx	#10
.3171	20 67 23	jsr $2367		jsr	floatingpointHandler
.3174	aa		tax				tax
.3175	60		rts				rts
.3176					ShrHandler:
.3176	20 8c 32	jsr $328c			jsr 	DereferenceTwo
.3179	20 8f 30	jsr $308f			jsr 	BinaryProcess 				; check to see if either is float
.317c	b0 03		bcs $3181			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.317e	4c e7 31	jmp $31e7			jmp 	MInt32ShiftRightX 							; else do it as integer.
.3181					_IsFPOperation:
.3181	8a		txa				txa 								; call the relevant fp routine
.3182	a2 0a		ldx #$0a		ldx	#10
.3184	20 67 23	jsr $2367		jsr	floatingpointHandler
.3187	aa		tax				tax
.3188	60		rts				rts
.3189					WordRefHandler:
.3189	20 8c 32	jsr $328c			jsr 	DereferenceTwo
.318c	20 8f 30	jsr $308f			jsr 	BinaryProcess 				; check to see if either is float
.318f	b0 03		bcs $3194			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.3191	4c d6 31	jmp $31d6			jmp 	MInt32WordIndirect 							; else do it as integer.
.3194					_IsFPOperation:
.3194	8a		txa				txa 								; call the relevant fp routine
.3195	a2 0a		ldx #$0a		ldx	#10
.3197	20 67 23	jsr $2367		jsr	floatingpointHandler
.319a	aa		tax				tax
.319b	60		rts				rts
.319c					ByteRefHandler:
.319c	20 8c 32	jsr $328c			jsr 	DereferenceTwo
.319f	20 8f 30	jsr $308f			jsr 	BinaryProcess 				; check to see if either is float
.31a2	b0 03		bcs $31a7			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.31a4	4c da 31	jmp $31da			jmp 	MInt32ByteIndirect 							; else do it as integer.
.31a7					_IsFPOperation:
.31a7	8a		txa				txa 								; call the relevant fp routine
.31a8	a2 0a		ldx #$0a		ldx	#10
.31aa	20 67 23	jsr $2367		jsr	floatingpointHandler
.31ad	aa		tax				tax
.31ae	60		rts				rts
.31af					PowerHandler:
.31af	20 8c 32	jsr $328c			jsr 	DereferenceTwo
.31b2	20 8f 30	jsr $308f			jsr 	BinaryProcess 				; check to see if either is float
.31b5	b0 03		bcs $31ba			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.31b7	4c c2 31	jmp $31c2			jmp 	PowerInteger 							; else do it as integer.
.31ba					_IsFPOperation:
.31ba	8a		txa				txa 								; call the relevant fp routine
.31bb	a2 18		ldx #$18		ldx	#24
.31bd	20 67 23	jsr $2367		jsr	floatingpointHandler
.31c0	aa		tax				tax
.31c1	60		rts				rts
.31c2					PowerInteger:
.31c2	20 a9 30	jsr $30a9			jsr 	BPMakeBothFloat				; make them float.
.31c5	8a		txa				txa
.31c6	a2 18		ldx #$18		ldx	#24
.31c8	20 67 23	jsr $2367		jsr	floatingpointHandler
.31cb	a2 14		ldx #$14		ldx	#20
.31cd	20 67 23	jsr $2367		jsr	floatingpointHandler
.31d0	aa		tax				tax
.31d1	a9 00		lda #$00			lda 	#0 							; make type integer
.31d3	95 90		sta $90,x			sta 	esType,x
.31d5	60		rts				rts
.31d6					Mint32WordIndirect:
.31d6	a9 80		lda #$80	 		lda 	#$80 				 		; word reference type (bit 7 set)
.31d8	d0 02		bne $31dc			bne 	Min32Indirect
.31da					Mint32ByteIndirect:
.31da	a9 a0		lda #$a0			lda 	#$A0 						; byte reference type (bit 7, bit 5 set)
.31dc					Min32Indirect:
.31dc	48		pha				pha 								; save the indirection
.31dd	20 e7 39	jsr $39e7			jsr 	MInt32Add 					; add a!b a?b
.31e0	68		pla				pla 								; and set the type to reference.
.31e1	95 90		sta $90,x			sta 	esType,x 	 				; so a!b => a+b and it's a reference....
.31e3	60		rts				rts
.31e4					Mint32ShiftLeftX:
.31e4	18		clc				clc 								; CC shift left
.31e5	90 01		bcc $31e8			bcc 	Mint32Shift
.31e7					Mint32ShiftRightX:
.31e7	38		sec				sec 								; CS shift right
.31e8					Mint32Shift:
.31e8	08		php				php 								; save carry flag on stack.
.31e9	b5 a1		lda $a1,x			lda 	esInt1+1,x 					; if shift >= 32 then it is zero.
.31eb	15 a9		ora $a9,x			ora 	esInt2+1,x
.31ed	15 b1		ora $b1,x			ora 	esInt3+1,x
.31ef	d0 1e		bne $320f			bne 	_MShiftZero
.31f1	b5 99		lda $99,x			lda 	esInt0+1,x
.31f3	c9 20		cmp #$20			cmp 	#32
.31f5	b0 18		bcs $320f			bcs 	_MShiftZero
.31f7					_MShiftLoop:
.31f7	b5 99		lda $99,x			lda 	esInt0+1,x 					; check count is zero
.31f9	f0 12		beq $320d			beq 	_MShiftExit
.31fb	d6 99		dec $99,x			dec 	esInt0+1,x
.31fd	28		plp				plp 								; restore and save carry
.31fe	08		php				php
.31ff	90 06		bcc $3207			bcc 	_MShiftLeft 				; and shift left/right accordingly.
.3201	20 21 3b	jsr $3b21			jsr 	Mint32ShiftRight
.3204	4c f7 31	jmp $31f7			jmp 	_MShiftLoop
.3207					_MShiftLeft:
.3207	20 18 3b	jsr $3b18			jsr 	Mint32ShiftLeft
.320a	4c f7 31	jmp $31f7			jmp 	_MShiftLoop
.320d					_MShiftExit:
.320d	28		plp				plp	 								; throw saved carry and exit
.320e	60		rts				rts
.320f					_MShiftZero:
.320f	4c 03 3b	jmp $3b03			jmp 	MInt32False 				; return 0 as shifted >= 32 times.

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/binary/compare.asm

.3212					PerformComparison:
.3212	20 8c 32	jsr $328c			jsr 	DereferenceTwo 				; make both values.
.3215	b5 90		lda $90,x			lda 	esType,x 					; check for two strings.
.3217	35 91		and $91,x			and 	esType+1,x
.3219	0a		asl a				asl 	a 							; bit 7 set if both bit 6s were set.
.321a	30 1d		bmi $3239			bmi 	_PCIsString
.321c	b5 90		lda $90,x			lda 	esType,x 					; check either is floating point.
.321e	15 91		ora $91,x			ora 	esType+1,x
.3220	0a		asl a				asl 	a 							; shift bit 6 (string) to bit 7, mixed types
.3221	30 22		bmi $3245			bmi 	_PCError
.3223	29 02		and #$02			and 	#$02 						; because of ASL, check type in bit 0
.3225	f0 0f		beq $3236			beq 	_PCIsInteger 				; if not two integers, e.g. 1 of the bits is set
.3227	20 a9 30	jsr $30a9			jsr 	BPMakeBothFloat 			; make both float
.322a	8a		txa				txa
.322b	a2 06		ldx #$06		ldx	#6
.322d	20 67 23	jsr $2367		jsr	floatingpointHandler
.3230	86 32		stx $32				stx 	tempShort 					; save result
.3232	aa		tax				tax
.3233	a5 32		lda $32				lda 	tempShort
.3235	60		rts				rts
.3236					_PCIsInteger:
.3236	4c a3 38	jmp $38a3			jmp 	MInt32Compare
.3239					_PCIsString:
.3239	8a		txa				txa 								; A has SP
.323a	a2 0a		ldx #$0a		ldx	#10
.323c	20 ae 3e	jsr $3eae		jsr	stringHandler
.323f	86 32		stx $32				stx 	tempShort 					; save result
.3241	aa		tax				tax 								; put SP back in X and get result.
.3242	a5 32		lda $32				lda 	tempShort
.3244	60		rts				rts
.3245					_PCError:
.3245	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.3247	20 18 15	jsr $1518		jsr	errorHandler
.324a					CompareEquals:
.324a	20 12 32	jsr $3212			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.324d	c9 00		cmp #$00			cmp 	#$00 						; and we do something if it is = or <> a value.
.324f	f0 35		beq $3286			beq  	CompareTrue
.3251	4c 89 32	jmp $3289			jmp 	CompareFalse
.3254					CompareLess:
.3254	20 12 32	jsr $3212			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.3257	c9 ff		cmp #$ff			cmp 	#$FF 						; and we do something if it is = or <> a value.
.3259	f0 2b		beq $3286			beq  	CompareTrue
.325b	4c 89 32	jmp $3289			jmp 	CompareFalse
.325e					CompareGreater:
.325e	20 12 32	jsr $3212			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.3261	c9 01		cmp #$01			cmp 	#$01 						; and we do something if it is = or <> a value.
.3263	f0 21		beq $3286			beq  	CompareTrue
.3265	4c 89 32	jmp $3289			jmp 	CompareFalse
.3268					CompareNotEquals:
.3268	20 12 32	jsr $3212			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.326b	c9 00		cmp #$00			cmp 	#$00 						; and we do something if it is = or <> a value.
.326d	d0 17		bne $3286			bne  	CompareTrue
.326f	4c 89 32	jmp $3289			jmp 	CompareFalse
.3272					CompareGreaterEq:
.3272	20 12 32	jsr $3212			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.3275	c9 ff		cmp #$ff			cmp 	#$FF 						; and we do something if it is = or <> a value.
.3277	d0 0d		bne $3286			bne  	CompareTrue
.3279	4c 89 32	jmp $3289			jmp 	CompareFalse
.327c					CompareLessEq:
.327c	20 12 32	jsr $3212			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.327f	c9 01		cmp #$01			cmp 	#$01 						; and we do something if it is = or <> a value.
.3281	d0 03		bne $3286			bne  	CompareTrue
.3283	4c 89 32	jmp $3289			jmp 	CompareFalse
.3286					CompareTrue:
.3286	4c ff 3a	jmp $3aff			jmp 	MInt32True
.3289					CompareFalse:
.3289	4c 03 3b	jmp $3b03			jmp 	MInt32False

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/dereference.asm

.328c					DereferenceTwo:
.328c	e8		inx				inx
.328d	20 91 32	jsr $3291			jsr 	DereferenceOne
.3290	ca		dex				dex
.3291					DereferenceOne:
.3291	b5 90		lda $90,x			lda 	esType,x
.3293	10 3d		bpl $32d2			bpl 	_DRNotReference 			; is it a reference ? if not, we don't need to do anything
.3295	4a		lsr a				lsr 	a 							; do float dereference if bit 0 set.
.3296	b0 3b		bcs $32d3			bcs 	_DRFloatDeReference
.3298	98		tya				tya
.3299	48		pha				pha
.329a	b5 98		lda $98,x			lda 	esInt0,x 					; copy address to temp0
.329c	85 2a		sta $2a				sta 	temp0
.329e	b5 a0		lda $a0,x			lda 	esInt1,x
.32a0	85 2b		sta $2b				sta 	temp0+1
.32a2	a9 00		lda #$00			lda 	#0 							; clear esInt1..3
.32a4	95 a0		sta $a0,x			sta 	esInt1,x
.32a6	95 a8		sta $a8,x			sta 	esInt2,x
.32a8	95 b0		sta $b0,x			sta 	esInt3,x
.32aa	b5 90		lda $90,x			lda 	esType,x 					; get the type byte.
.32ac	29 60		and #$60			and 	#$60 						; get string flag ($40) and byte flag ($20)
.32ae	0a		asl a				asl 	a 							; now string ($80) byte ($40)
.32af	30 0d		bmi $32be			bmi 	_DeRefString 				; string, 2 bytes only
.32b1	d0 11		bne $32c4			bne 	_DeRefByte 					; byte 1 byte only
.32b3					_DeRefLong:
.32b3	a0 03		ldy #$03			ldy 	#3
.32b5	b1 2a		lda ($2a),y			lda 	(temp0),y
.32b7	95 b0		sta $b0,x			sta 	esInt3,x
.32b9	88		dey				dey
.32ba	b1 2a		lda ($2a),y			lda 	(temp0),y
.32bc	95 a8		sta $a8,x			sta 	esInt2,x
.32be					_DeRefString:
.32be	a0 01		ldy #$01			ldy 	#1
.32c0	b1 2a		lda ($2a),y			lda 	(temp0),y
.32c2	95 a0		sta $a0,x			sta 	esInt1,x
.32c4					_DeRefByte:
.32c4	a0 00		ldy #$00			ldy 	#0
.32c6	b1 2a		lda ($2a),y			lda 	(temp0),y
.32c8	95 98		sta $98,x			sta 	esInt0,x
.32ca	b5 90		lda $90,x			lda 	esType,x 					; clear byte and deref bits.
.32cc	29 40		and #$40			and 	#$40
.32ce	95 90		sta $90,x			sta 	esType,x
.32d0	68		pla				pla
.32d1	a8		tay				tay
.32d2					_DRNotReference
.32d2	60		rts				rts
.32d3					_DRFloatDereference:
.32d3	20 59 28	jsr $2859			jsr 	TOSToTemp0 					; address to deref in temp0
.32d6	8a		txa				txa
.32d7	a2 1e		ldx #$1e		ldx	#30
.32d9	20 67 23	jsr $2367		jsr	floatingpointHandler
.32dc	aa		tax				tax
.32dd	a9 01		lda #$01			lda 	#$01 						; type to FP (float)
.32df	95 90		sta $90,x			sta 	esType,x
.32e1	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/evaluate.asm

.32e2					EvaluateLevel:
.32e2	e0 08		cpx #$08			cpx 	#StackSize 					; check stack overflow
.32e4	b0 1e		bcs $3304			bcs 	_ELStack
.32e6	48		pha				pha 								; save precedence level.
.32e7	a9 00		lda #$00			lda 	#0 							; zero the current stack level.
.32e9	95 98		sta $98,x			sta 	esInt0,x
.32eb	95 a0		sta $a0,x			sta 	esInt1,x
.32ed	95 a8		sta $a8,x			sta 	esInt2,x
.32ef	95 b0		sta $b0,x			sta 	esInt3,x
.32f1	95 90		sta $90,x			sta 	esType,x 					; zero the type (integer value)
.32f3	b1 28		lda ($28),y			lda 	(codePtr),y	 				; look at first token/character
.32f5	30 26		bmi $331d			bmi 	_ELIsToken 					; if -ve could be string, float, or unary function.
.32f7	0a		asl a				asl 	a 							; if 00-3F then will now be PL and it's a variable.
.32f8	30 0f		bmi $3309			bmi 	_ELIsConstant 				; 40-7F will be -ve and that's an integer constant.
.32fa	8a		txa				txa 								; stack level in X
.32fb	a2 02		ldx #$02		ldx	#2
.32fd	20 02 4b	jsr $4b02		jsr	variableHandler
.3300	aa		tax				tax
.3301	4c 46 33	jmp $3346			jmp		_ELHasTerm
.3304					_ELStack:
.3304	a2 23		ldx #$23			ldx 	#ErrorID_NumStack
.3306	20 18 15	jsr $1518		jsr	errorHandler
.3309					_ELIsConstant:
.3309	4a		lsr a				lsr 	a 							; get the value back
.330a	29 3f		and #$3f			and 	#$3F 						; force into range 0-63
.330c	95 98		sta $98,x			sta 	esInt0,x 					; and put in LSB.
.330e					_ELCheckNext:
.330e	c8		iny				iny 								; look at next
.330f	b1 28		lda ($28),y			lda 	(codePtr),y
.3311	49 40		eor #$40			eor 	#$40 						; shift around so 40-7F => 00-3F
.3313	c9 40		cmp #$40			cmp 	#$40 						; out of range ?
.3315	b0 2f		bcs $3346			bcs 	_ELHasTerm 					; done getting the constant.
.3317	20 df 33	jsr $33df			jsr 	ELShiftByteIn 				; shift byte into position.
.331a	4c 0e 33	jmp $330e			jmp 	_ELCheckNext
.331d					_ELIsToken:
.331d	c9 85		cmp #$85			cmp 	#TOK_STR 					; handle strings.
.331f	f0 0f		beq $3330			beq 	_ELIsString
.3321	c9 84		cmp #$84			cmp 	#TOK_FPC 					; if no, then check unary.
.3323	d0 5f		bne $3384			bne 	_ELCheckUnary
.3325	8a		txa				txa 								; put X into A
.3326	c8		iny				iny 								; skip over the float marker
.3327	a2 1a		ldx #$1a		ldx	#26
.3329	20 67 23	jsr $2367		jsr	floatingpointHandler
.332c	aa		tax				tax 								; restore X
.332d	4c 46 33	jmp $3346			jmp 	_ELHasTerm
.3330					_ELIsString:
.3330	98		tya				tya 								; address of string is codePtr+y+1
.3331	38		sec				sec
.3332	65 28		adc $28				adc 	codePtr
.3334	95 98		sta $98,x			sta 	esInt0,x
.3336	a5 29		lda $29				lda 	codePtr+1
.3338	69 00		adc #$00			adc 	#0
.333a	95 a0		sta $a0,x			sta 	esInt1,x
.333c	a9 40		lda #$40			lda 	#$40 						; set type to string value
.333e	95 90		sta $90,x			sta 	esType,x
.3340	c8		iny				iny 								; skip over string.
.3341	98		tya				tya
.3342	38		sec				sec									; +1 for the length itself.
.3343	71 28		adc ($28),y			adc 	(codePtr),y
.3345	a8		tay				tay 								; and fall through to term loop code.
.3346					_ELHasTerm:
.3346	b1 28		lda ($28),y			lda 	(codePtr),y
.3348	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; check in the correct range for binary tokens.
.334a	90 04		bcc $3350			bcc 	_ELPopExit
.334c	c9 99		cmp #$99			cmp 	#TOK_STRUCTST
.334e	90 02		bcc $3352			bcc 	_ELHasBinaryTerm
.3350					_ELPopExit:
.3350	68		pla				pla
.3351					_ELExit:
.3351	60		rts				rts
.3352					_ELHasBinaryTerm:
.3352	84 32		sty $32				sty 	tempShort 					; save position
.3354	a8		tay				tay 								; use token as an index and get the precedence.
.3355	b9 87 33	lda $3387,y			lda 	ELBinaryOperatorInfo-TOK_BINARYST,y
.3358	a4 32		ldy $32				ldy 	tempShort 					; restore Y
.335a	85 32		sta $32				sta 	tempShort 					; save precedence in memory.
.335c	68		pla				pla 								; restore current level.
.335d	c5 32		cmp $32				cmp 	tempShort 					; if current >= operator then exit
.335f	b0 f0		bcs $3351			bcs 	_ELExit
.3361	48		pha				pha 								; save current level back on the stack.
.3362	b1 28		lda ($28),y			lda 	(codePtr),y 				; save the binary operator on the stack and skip it.
.3364	48		pha				pha
.3365	c8		iny				iny
.3366	e8		inx				inx 								; calculate the RHS at the operator precedence.
.3367	a5 32		lda $32				lda 	tempShort
.3369	20 e2 32	jsr $32e2			jsr 	EvaluateLevel
.336c	ca		dex				dex
.336d	68		pla				pla 								; get the operator back out.
.336e					_ELExecuteA:
.336e	86 32		stx $32				stx 	tempShort 					; upload the vectors. Would be nice to use jmp (aaaa,x)
.3370	0a		asl a				asl 	a 							; but not practical. May use push/rts later.
.3371	aa		tax				tax
.3372	bd a1 2f	lda $2fa1,x			lda 	Group0Vectors,x
.3375	85 2a		sta $2a				sta 	temp0
.3377	bd a2 2f	lda $2fa2,x			lda 	Group0Vectors+1,x
.337a	85 2b		sta $2b				sta 	temp0+1
.337c	a6 32		ldx $32				ldx 	tempShort
.337e	20 cb 33	jsr $33cb			jsr 	_ELCallTemp0
.3381	4c 46 33	jmp $3346			jmp 	_ELHasTerm 					; and loop back round.
.3384					_ELCheckUnary:
.3384	c8		iny				iny 								; skip over token.
.3385	c9 90		cmp #$90			cmp 	#TKW_MINUS 					; is it - term
.3387	f0 19		beq $33a2			beq 	_ELMinus
.3389	c9 97		cmp #$97			cmp 	#TKW_PLING 					; is it ! or ? term
.338b	f0 2c		beq $33b9			beq 	_ELIndirect
.338d	c9 98		cmp #$98			cmp 	#TKW_QMARK
.338f	f0 28		beq $33b9			beq 	_ELIndirect
.3391	c9 83		cmp #$83			cmp 	#TOK_SHIFT3 				; is it the unary extension.
.3393	f0 39		beq $33ce			beq 	_ELExtension
.3395	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST 				; must be TOK_UNARYST ... TOK_TOKENS
.3397	90 04		bcc $339d			bcc 	_ELUSyntax
.3399	c9 c9		cmp #$c9			cmp 	#TOK_TOKENS
.339b	90 d1		bcc $336e			bcc 	_ELExecuteA 				; if so do that token.
.339d					_ELUSyntax:
.339d	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.339f	20 18 15	jsr $1518		jsr	errorHandler
.33a2					_ELMinus:
.33a2	20 34 34	jsr $3434			jsr 	EvaluateNumericTerm 		; get a number to negate.
.33a5	b5 90		lda $90,x			lda 	esType,x 					; is it integer
.33a7	f0 0a		beq $33b3			beq 	_ELMinusInteger
.33a9	8a		txa				txa
.33aa	a2 0e		ldx #$0e		ldx	#14
.33ac	20 67 23	jsr $2367		jsr	floatingpointHandler
.33af	aa		tax				tax
.33b0	4c 46 33	jmp $3346			jmp 	_ELHasTerm
.33b3					_ELMinusInteger:
.33b3	20 bd 3a	jsr $3abd			jsr 	MInt32Negate 				; do int negate
.33b6	4c 46 33	jmp $3346			jmp 	_ELHasTerm
.33b9					_ELIndirect:
.33b9	48		pha				pha 								; save what we want (TKW_QMARK TWK_PLING)
.33ba	20 3d 34	jsr $343d			jsr 	EvaluateIntegerTerm 		; integer address
.33bd	68		pla				pla
.33be	49 97		eor #$97			eor 	#TKW_PLING 					; now $00 if !
.33c0	f0 02		beq $33c4			beq 	_ELHaveModifier
.33c2	a9 20		lda #$20			lda 	#$20 						; now $00 if !, $20 if ?
.33c4					_ELHaveModifier:
.33c4	09 80		ora #$80			ora 	#$80						; make it the appropriate reference.
.33c6	95 90		sta $90,x			sta 	esType,x 					; $80 for ! $A0 for ?
.33c8	4c 46 33	jmp $3346			jmp 	_ELHasTerm
.33cb					_ELCallTemp0:
.33cb	6c 2a 00	jmp ($002a)			jmp 	(temp0)
.33ce					_ELExtension:
.33ce	8a		txa				txa 								; stack pos in A
.33cf	20 69 18	jsr $1869		jsr	extensionHandler
.33d2	aa		tax				tax 								; restore stack
.33d3	4c 46 33	jmp $3346			jmp 	_ELHasTerm
.33d6					UnaryParenthesis:
.33d6	a9 00		lda #$00			lda 	#0 							; ( is a unary function ....
.33d8	20 e2 32	jsr $32e2			jsr 	EvaluateLevel
.33db	20 76 3b	jsr $3b76			jsr 	CheckRightParen 			; check for )
.33de	60		rts				rts
.33df					ELShiftByteIn:
.33df	48		pha				pha 								; save bits to shift in.
.33e0	b5 b0		lda $b0,x			lda 	esInt3,x 					; save top most byte
.33e2	48		pha				pha
.33e3	b5 a8		lda $a8,x			lda 	esInt2,x 					; shift everything left 8 bits
.33e5	95 b0		sta $b0,x			sta 	esInt3,x
.33e7	b5 a0		lda $a0,x			lda 	esInt1,x
.33e9	95 a8		sta $a8,x			sta 	esInt2,x
.33eb	b5 98		lda $98,x			lda 	esInt0,x
.33ed	95 a0		sta $a0,x			sta 	esInt1,x
.33ef	a9 00		lda #$00			lda 	#0
.33f1	95 98		sta $98,x			sta 	esInt0,x
.33f3	68		pla				pla 								; now A:TOS is a 5 byte register, shift right twice.
.33f4	29 03		and #$03			and 	#3 							; only want lower 2 bits
.33f6	09 04		ora #$04			ora 	#4  						; set bit 2 - when 1 we are done
.33f8					_ELShiftLoop:
.33f8	4a		lsr a				lsr 	a
.33f9	76 b0		ror $b0,x			ror 	esInt3,x
.33fb	76 a8		ror $a8,x			ror 	esInt2,x
.33fd	76 a0		ror $a0,x			ror 	esInt1,x
.33ff	76 98		ror $98,x			ror 	esInt0,x
.3401	c9 01		cmp #$01			cmp 	#1
.3403	d0 f3		bne $33f8			bne 	_ELShiftLoop
.3405	68		pla				pla 								; get original 6 bit value and OR in.
.3406	29 3f		and #$3f			and 	#$3F
.3408	15 98		ora $98,x			ora 	esInt0,x
.340a	95 98		sta $98,x			sta 	esInt0,x
.340c	60		rts				rts
.340d					ELBinaryOperatorInfo:

;******  Processing file: main/evaluate/../../generated/binarystructinfo.inc

>340d	01					.byte	$01			; $86 and
>340e	01					.byte	$01			; $87 or
>340f	01					.byte	$01			; $88 xor
>3410	02					.byte	$02			; $89 >=
>3411	02					.byte	$02			; $8a <=
>3412	02					.byte	$02			; $8b >
>3413	02					.byte	$02			; $8c <
>3414	02					.byte	$02			; $8d =
>3415	02					.byte	$02			; $8e <>
>3416	03					.byte	$03			; $8f +
>3417	03					.byte	$03			; $90 -
>3418	04					.byte	$04			; $91 >>
>3419	04					.byte	$04			; $92 <<
>341a	04					.byte	$04			; $93 *
>341b	04					.byte	$04			; $94 /
>341c	04					.byte	$04			; $95 mod
>341d	05					.byte	$05			; $96 ^
>341e	06					.byte	$06			; $97 !
>341f	06					.byte	$06			; $98 ?
>3420	82					.byte	$82			; $99 repeat
>3421	82					.byte	$82			; $9a while
>3422	82					.byte	$82			; $9b for
>3423	82					.byte	$82			; $9c if
>3424	82					.byte	$82			; $9d defproc
>3425	80					.byte	$80			; $9e until
>3426	80					.byte	$80			; $9f wend
>3427	80					.byte	$80			; $a0 next
>3428	80					.byte	$80			; $a1 then
>3429	80					.byte	$80			; $a2 endif
>342a	80					.byte	$80			; $a3 endproc

;******  Return to file: main/evaluate/evaluate.asm


;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/support.asm

.342b					EvaluateTerm:
.342b	a9 0f		lda #$0f			lda 	#15 						; no binary operator has this high a precedence.
.342d	20 e2 32	jsr $32e2			jsr 	EvaluateLevel
.3430	20 91 32	jsr $3291			jsr 	DereferenceOne
.3433	60		rts				rts
.3434					EvaluateNumericTerm:
.3434	20 2b 34	jsr $342b			jsr 	EvaluateTerm
.3437	b5 90		lda $90,x			lda 	esType,x
.3439	0a		asl a				asl 	a 							; see if it's a string.
.343a	30 09		bmi $3445			bmi 	ENTType
.343c	60		rts				rts
.343d					EvaluateIntegerTerm:
.343d	20 2b 34	jsr $342b			jsr 	EvaluateTerm
.3440	b5 90		lda $90,x			lda 	esType,x
.3442	d0 01		bne $3445			bne 	ENTType
.3444	60		rts				rts
.3445					ENTType:
.3445	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.3447	20 18 15	jsr $1518		jsr	errorHandler
.344a					EvaluateRoot:
.344a	a2 00		ldx #$00			ldx 	#0
.344c					Evaluate:
.344c	a9 00		lda #$00			lda 	#0
.344e	20 e2 32	jsr $32e2			jsr 	EvaluateLevel
.3451	20 91 32	jsr $3291			jsr 	DereferenceOne
.3454	60		rts				rts
.3455					EvaluateNumeric:
.3455	20 4c 34	jsr $344c			jsr 	Evaluate
.3458	b5 90		lda $90,x			lda 	esType,x
.345a	0a		asl a				asl 	a 							; see if it's a string.
.345b	30 e8		bmi $3445			bmi 	ENTType
.345d	4a		lsr a				lsr 	a 							; shift float flag into carry.
.345e	4a		lsr a				lsr 	a
.345f	60		rts				rts
.3460					EvaluateString:
.3460	20 4c 34	jsr $344c			jsr 	Evaluate
.3463	b5 90		lda $90,x			lda 	esType,x
.3465	0a		asl a				asl 	a 							; see if it's a string.
.3466	10 dd		bpl $3445			bpl 	ENTType
.3468	60		rts				rts
.3469					EvaluateRootInteger:
.3469	a2 00		ldx #$00			ldx 	#0
.346b					EvaluateInteger:
.346b	20 4c 34	jsr $344c			jsr 	Evaluate
.346e	b5 90		lda $90,x			lda 	esType,x
.3470	d0 d3		bne $3445			bne 	ENTType
.3472	60		rts				rts
.3473					EvaluateSmallInteger:
.3473	20 6b 34	jsr $346b			jsr 	EvaluateInteger
.3476	b5 a0		lda $a0,x			lda 	esInt1,x
.3478	15 a8		ora $a8,x			ora 	esInt2,x
.347a	15 b0		ora $b0,x			ora 	esInt3,x
.347c	d0 03		bne $3481			bne 	_ESIValue
.347e	b5 98		lda $98,x			lda 	esInt0,x
.3480	60		rts				rts
.3481					_ESIValue:
.3481	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.3483	20 18 15	jsr $1518		jsr	errorHandler
.3486					LinkEvaluate:
.3486	aa		tax				tax
.3487	20 4c 34	jsr $344c			jsr 	Evaluate
.348a	8a		txa				txa
.348b	60		rts				rts
.348c					LinkEvaluateTerm:
.348c	aa		tax				tax
.348d	20 2b 34	jsr $342b			jsr 	EvaluateTerm
.3490	8a		txa				txa
.3491	60		rts				rts
.3492					LinkEvaluateInteger:
.3492	aa		tax				tax
.3493	20 6b 34	jsr $346b			jsr 	EvaluateInteger
.3496	8a		txa				txa
.3497	60		rts				rts
.3498					LinkEvaluateString:
.3498	aa		tax				tax
.3499	20 60 34	jsr $3460			jsr 	EvaluateString
.349c	8a		txa				txa
.349d	60		rts				rts
.349e					LinkEvaluateSmallInt:
.349e	aa		tax				tax
.349f	20 73 34	jsr $3473			jsr 	EvaluateSmallInteger
.34a2	8a		txa				txa
.34a3	60		rts				rts
.34a4					EvaluateReference:
.34a4	ad 1e 34	lda $341e			lda 	ELBinaryOperatorInfo+TKW_PLING-TOK_BINARYST
.34a7	38		sec				sec 								; sub 1 to allow a!x b?x to work.
.34a8	e9 01		sbc #$01			sbc 	#1
.34aa	20 e2 32	jsr $32e2			jsr 	EvaluateLevel
.34ad	b5 90		lda $90,x			lda 	esType,x
.34af	10 01		bpl $34b2			bpl 	_ERFail
.34b1	60		rts				rts
.34b2					_ERFail:
.34b2	a2 0b		ldx #$0b			ldx 	#ErrorID_NoReference
.34b4	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary/convert.asm

.34b7					Event_Str:
.34b7	20 55 34	jsr $3455			jsr 	EvaluateNumeric 			; get a number.
.34ba	b5 90		lda $90,x			lda 	esType,x 					; is it floating point
.34bc	d0 13		bne $34d1			bne 	_ESFloat
.34be	20 14 35	jsr $3514			jsr 	ConvertGetBase 				; get base, or default.
.34c1	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.34c3	85 2a		sta $2a				sta 	temp0
.34c5	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.34c7	85 2b		sta $2b				sta 	1+(temp0)
.34c9	b5 99		lda $99,x			lda 	esInt0+1,x 					; get the base
.34cb	20 59 3a	jsr $3a59			jsr 	MInt32ToString 				; convert to string.
.34ce	4c de 34	jmp $34de			jmp 	_ESCloneExit 				; clone and exit.
.34d1					_ESFloat:
.34d1	20 76 3b	jsr $3b76			jsr 	CheckRightParen 			; check closing )
.34d4	20 59 28	jsr $2859			jsr 	TOSToTemp0 					; string address in temp0, goes here.
.34d7	8a		txa				txa
.34d8	a2 16		ldx #$16		ldx	#22
.34da	20 67 23	jsr $2367		jsr	floatingpointHandler
.34dd	aa		tax				tax
.34de					_ESCloneExit:
.34de	8a		txa				txa
.34df	a2 04		ldx #$04		ldx	#4
.34e1	20 ae 3e	jsr $3eae		jsr	stringHandler
.34e4	aa		tax				tax
.34e5	60		rts				rts
.34e6					UnaryVal:
.34e6	38		sec				sec 								; Carry set to return value
.34e7	b0 01		bcs $34ea			bcs 	ValueMain
.34e9					UnaryIsVal:
.34e9	18		clc				clc									; Carry clear to return legitimacy
.34ea					ValueMain:
.34ea	08		php				php 								; save results (CS is value, CC is validation)
.34eb	20 60 34	jsr $3460			jsr 	EvaluateString
.34ee	20 14 35	jsr $3514			jsr 	ConvertGetBase 				; get base, if any.
.34f1	98		tya				tya
.34f2	48		pha				pha
.34f3	20 59 28	jsr $2859			jsr 	TOSToTemp0 					; string address in temp0, goes here.
.34f6	b5 99		lda $99,x			lda 	esInt0+1,x 					; get the base
.34f8	29 7f		and #$7f			and 	#$7F 						; ignore the sign bit.
.34fa	20 71 39	jsr $3971			jsr 	MInt32FromString 			; convert it back from a string.
.34fd	b0 0c		bcs $350b			bcs 	_VMSuccess 					; successfully converted.
.34ff	b5 99		lda $99,x			lda 	esInt0+1,x 					; is base the default
.3501	c9 8a		cmp #$8a			cmp 	#$80+10 					; if no, then it is integer only.
.3503	f0 00		beq $3505			beq 	_VMFailed 	 				; so we failed.
.3505					_VMFailed:
.3505	68		pla				pla
.3506	a8		tay				tay
.3507	28		plp				plp
.3508	4c 03 3b	jmp $3b03			jmp 	MInt32False 				; return 0 whatever.
.350b					_VMSuccess:
.350b	68		pla				pla
.350c	a8		tay				tay
.350d	28		plp				plp 								; if CS the it was val() so we want the value.
.350e	b0 03		bcs $3513			bcs 	_VMExit
.3510	4c ff 3a	jmp $3aff			jmp 	MInt32True 					; otherwise return true as successful.
.3513					_VMExit:
.3513	60		rts				rts
.3514					ConvertGetBase:
.3514	a9 8a		lda #$8a			lda 	#10+$80 					; default base 10 signed.
.3516	95 99		sta $99,x			sta 	esInt0+1,x
.3518	b1 28		lda ($28),y			lda 	(codePtr),y 				; check for ,base)
.351a	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.351c	d0 0e		bne $352c			bne 	_CGBDone 					; not found, should be )
.351e	e8		inx				inx 								; next level
.351f	c8		iny				iny 								; skip comma.
.3520	20 73 34	jsr $3473			jsr 	EvaluateSmallInteger		; evaluate the base.
.3523	ca		dex				dex
.3524	c9 02		cmp #$02			cmp 	#2 							; base range is 2..16
.3526	90 08		bcc $3530			bcc 	_CGBValue 					; (it should work as high as 37)
.3528	c9 11		cmp #$11			cmp 	#17
.352a	b0 04		bcs $3530			bcs 	_CGBValue
.352c					_CGBDone:
.352c	20 76 3b	jsr $3b76			jsr 	CheckRightParen
.352f	60		rts				rts
.3530					_CGBValue:
.3530	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.3532	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary/event.asm

.3535					EventFunction:
.3535	20 a4 34	jsr $34a4			jsr 	EvaluateReference			; get the variable reference that tracks the event
.3538	b5 90		lda $90,x			lda 	esType,x
.353a	c9 80		cmp #$80			cmp 	#$80 						; must be integer reference
.353c	d0 5b		bne $3599			bne 	_EFType
.353e	20 83 3b	jsr $3b83			jsr 	CheckComma
.3541	e8		inx				inx
.3542	20 6b 34	jsr $346b			jsr 	EvaluateInteger		 		; get the elapsed time between firing.
.3545	20 76 3b	jsr $3b76			jsr 	CheckRightParen 			; finish off with the right bracket
.3548	ca		dex				dex
.3549	b5 a0		lda $a0,x			lda 	esInt1,x 					; check max of 32767, we use 16 bit for timers and
.354b	29 80		and #$80			and 	#$80 						; it doesn't work > 32767
.354d	15 a8		ora $a8,x			ora 	esInt2,x
.354f	15 b0		ora $b0,x			ora 	esInt3,x
.3551	d0 41		bne $3594			bne 	_EFValue
.3553	98		tya				tya
.3554	48		pha				pha
.3555	8a		txa				txa
.3556	48		pha				pha
.3557	a2 1c		ldx #$1c		ldx	#28
.3559	20 f6 14	jsr $14f6		jsr	deviceHandler
.355c	84 2d		sty $2d				sty 	temp1+1
.355e	85 2c		sta $2c				sta 	temp1
.3560	68		pla				pla
.3561	aa		tax				tax
.3562	20 59 28	jsr $2859			jsr 	TOSToTemp0 					; set temp0 to the address of the event variable
.3565	a0 03		ldy #$03			ldy 	#3							; if -ve
.3567	b1 2a		lda ($2a),y			lda 	(temp0),y
.3569	30 23		bmi $358e			bmi 	_EFFail 	 				; straight out with fail, means "on pause".
.356b	a0 00		ldy #$00			ldy 	#0 							; is the fire time zero ?
.356d	b1 2a		lda ($2a),y			lda 	(temp0),y
.356f	c8		iny				iny
.3570	11 2a		ora ($2a),y			ora 	(temp0),y
.3572	f0 17		beq $358b			beq 	_EFInitialise 				; if so, initialise the value but return false.
.3574	a0 00		ldy #$00			ldy 	#0 							; calculate trigger - timer
.3576	38		sec				sec
.3577	b1 2a		lda ($2a),y			lda 	(temp0),y
.3579	e5 2c		sbc $2c				sbc 	temp1
.357b	c8		iny				iny
.357c	b1 2a		lda ($2a),y			lda 	(temp0),y
.357e	e5 2d		sbc $2d				sbc 	temp1+1
.3580	10 0c		bpl $358e			bpl 	_EFFail 					; if trigger >= timer then return False
.3582	20 9e 35	jsr $359e			jsr 	SetEventTimer 				; reset the timer for next time.
.3585	20 ff 3a	jsr $3aff			jsr	 	MInt32True 					; and treutn true as fired.
.3588	68		pla				pla
.3589	a8		tay				tay
.358a	60		rts				rts
.358b					_EFInitialise:
.358b	20 9e 35	jsr $359e			jsr		SetEventTimer 				; set trigger time to time + elapsed
.358e					_EFFail:
.358e	68		pla				pla
.358f	a8		tay				tay
.3590	20 03 3b	jsr $3b03			jsr 	MInt32False
.3593	60		rts				rts
.3594					_EFValue:
.3594	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.3596	20 18 15	jsr $1518		jsr	errorHandler
.3599					_EFType:
.3599	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.359b	20 18 15	jsr $1518		jsr	errorHandler
.359e					SetEventTimer:
.359e	a0 00		ldy #$00			ldy 	#0
.35a0	18		clc				clc
.35a1	a5 2c		lda $2c				lda 	temp1
.35a3	75 99		adc $99,x			adc 	esInt0+1,x
.35a5	91 2a		sta ($2a),y			sta		(temp0),y
.35a7	c8		iny				iny
.35a8	a5 2d		lda $2d				lda 	temp1+1
.35aa	75 a1		adc $a1,x			adc 	esInt1+1,x
.35ac	91 2a		sta ($2a),y			sta		(temp0),y
.35ae	88		dey				dey
.35af	11 2a		ora ($2a),y			ora 	(temp0),y 					; if the result is non zero, exit
.35b1	d0 04		bne $35b7			bne 	_SETExit 					; zero means initialise.....
.35b3	a9 01		lda #$01			lda 	#1 							; timer zero won't work, so make it 1, which is
.35b5	91 2a		sta ($2a),y			sta 	(temp0),y 					; near enough.
.35b7					_SETExit:
.35b7	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary/unary.asm

.35b8					UnaryLen:
.35b8	20 c6 35	jsr $35c6			jsr 	ULStart
.35bb					ULFinish:
.35bb	b1 2a		lda ($2a),y			lda 	(temp0),y 					; get length prefix
.35bd	a4 32		ldy $32				ldy 	tempShort 					; get Y back
.35bf	20 12 3b	jsr $3b12			jsr 	MInt32Set8Bit 				; write it out.
.35c2	20 76 3b	jsr $3b76			jsr 	CheckRightParen
.35c5	60		rts				rts
.35c6	20 60 34	jsr $3460	ULStart:jsr 	EvaluateString
.35c9	b5 98		lda $98,x			lda 	esInt0,x 					; copy address of string to temp0
.35cb	85 2a		sta $2a				sta 	temp0
.35cd	b5 a0		lda $a0,x			lda 	esInt1,x
.35cf	85 2b		sta $2b				sta 	temp0+1
.35d1	84 32		sty $32				sty 	tempShort 					; get length
.35d3	a0 00		ldy #$00			ldy 	#0
.35d5	60		rts				rts
.35d6					UnaryAsc:
.35d6	20 c6 35	jsr $35c6			jsr 	ULStart 					; same as LEN() get string, save Y, point to length.
.35d9	b1 2a		lda ($2a),y			lda 	(temp0),y 					; read length
.35db	c8		iny				iny 		 						; point to first character, we can do LEN code after that
.35dc	c9 00		cmp #$00			cmp 	#0
.35de	d0 db		bne $35bb			bne 	ULFinish 					; if length = 0 then error : asc("") -> error.
.35e0	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.35e2	20 18 15	jsr $1518		jsr	errorHandler
.35e5					UnaryAbs:
.35e5	20 55 34	jsr $3455			jsr 	EvaluateNumeric 			; some numeric value
.35e8	b0 07		bcs $35f1			bcs 	_UAFloat 					; CS then float, so use that function
.35ea	20 b8 3a	jsr $3ab8			jsr 	MInt32Absolute 				; int version
.35ed	20 76 3b	jsr $3b76			jsr 	CheckRightParen
.35f0	60		rts				rts
.35f1					_UAFloat:
.35f1	8a		txa				txa 								; float version
.35f2	a2 02		ldx #$02		ldx	#2
.35f4	20 67 23	jsr $2367		jsr	floatingpointHandler
.35f7	aa		tax				tax
.35f8	20 76 3b	jsr $3b76			jsr 	CheckRightParen
.35fb	60		rts				rts
.35fc					UnarySgn:
.35fc	20 55 34	jsr $3455			jsr 	EvaluateNumeric 			; same as above but sign of value
.35ff	b0 07		bcs $3608			bcs 	_USFloat
.3601	20 f0 3a	jsr $3af0			jsr 	MInt32Sign
.3604	20 76 3b	jsr $3b76			jsr 	CheckRightParen
.3607	60		rts				rts
.3608					_USFloat:
.3608	8a		txa				txa
.3609	a2 10		ldx #$10		ldx	#16
.360b	20 67 23	jsr $2367		jsr	floatingpointHandler
.360e	aa		tax				tax
.360f	20 76 3b	jsr $3b76			jsr 	CheckRightParen
.3612	60		rts				rts
.3613					UnaryPeek:
.3613	20 3f 36	jsr $363f			jsr 	PDLCode 					; each has common setup code put reads 1,2 or 4 bytes
.3616	4c 33 36	jmp $3633			jmp 	PDLByte0
.3619					UnaryDeek:
.3619	20 3f 36	jsr $363f			jsr 	PDLCode
.361c	4c 2d 36	jmp $362d			jmp 	PDLByte1
.361f					UnaryLeek:
.361f	20 3f 36	jsr $363f			jsr 	PDLCode
.3622	a0 03		ldy #$03			ldy 	#3							; read 3-2
.3624	b1 2a		lda ($2a),y			lda 	(temp0),y
.3626	95 b0		sta $b0,x			sta 	esInt3,x
.3628	88		dey				dey
.3629	b1 2a		lda ($2a),y			lda 	(temp0),y
.362b	95 a8		sta $a8,x			sta 	esInt2,x
.362d					PDLByte1:
.362d	a0 01		ldy #$01			ldy 	#1
.362f	b1 2a		lda ($2a),y			lda 	(temp0),y
.3631	95 a0		sta $a0,x			sta 	esInt1,x
.3633					PDLByte0:
.3633	a0 00		ldy #$00			ldy 	#0
.3635	b1 2a		lda ($2a),y			lda 	(temp0),y
.3637	95 98		sta $98,x			sta 	esInt0,x
.3639	a4 32		ldy $32				ldy 	tempShort 					; restore Y
.363b	20 76 3b	jsr $3b76			jsr 	CheckRightParen 			; check right and return
.363e	60		rts				rts
.363f					PDLCode:
.363f	20 6b 34	jsr $346b			jsr 	EvaluateInteger 			; some address
.3642	b5 98		lda $98,x			lda 	esInt0,x 					; copy address of string to temp0
.3644	85 2a		sta $2a				sta 	temp0
.3646	b5 a0		lda $a0,x			lda 	esInt1,x
.3648	85 2b		sta $2b				sta 	temp0+1
.364a	a9 00		lda #$00			lda 	#0 							; zero upper 3 bytes of result, type okay.
.364c	95 a0		sta $a0,x			sta 	esInt1,x 					; PEEK needs upper 3 cleared
.364e	95 a8		sta $a8,x			sta 	esInt2,x
.3650	95 b0		sta $b0,x			sta 	esInt3,x
.3652	84 32		sty $32				sty 	tempShort 					; save Y
.3654	60		rts				rts
.3655					Unary_Random:
.3655	20 33 3b	jsr $3b33			jsr 	MInt32Random 				; generate random number.
.3658	b1 28		lda ($28),y			lda 	(codePtr),y 				; check followed by )
.365a	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.365c	f0 08		beq $3666			beq 	_URExit
.365e	e8		inx				inx 								; load range 0..r-1 into +1
.365f	20 6b 34	jsr $346b			jsr 	EvaluateInteger
.3662	ca		dex				dex
.3663	20 56 39	jsr $3956			jsr 	MInt32Modulus 				; calculate random % modulus
.3666					_URExit:
.3666	20 76 3b	jsr $3b76			jsr 	CheckRightParen 			; check right and return
.3669	60		rts				rts
.366a					Unary_Min:
.366a	a9 01		lda #$01			lda 	#1 							; c1 cmp c2 needs to be > e.g. c1 > c2
.366c	d0 02		bne $3670			bne 	UnaryMBody
.366e					Unary_Max:
.366e	a9 ff		lda #$ff			lda 	#$FF 						; c1 cmp c2 needs to be < e.g. c1 < c2
.3670					UnaryMBody:
.3670	48		pha				pha 								; save comparator on stack, shows min or max
.3671	20 4c 34	jsr $344c			jsr 	Evaluate 					; get the first thing to check
.3674					_UnaryMLoop:
.3674	b1 28		lda ($28),y			lda 	(codePtr),y 				; found ), indicates end.
.3676	c8		iny				iny
.3677	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.3679	f0 09		beq $3684			beq 	_UnaryMExit
.367b	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; found , indicates more.
.367d	f0 07		beq $3686			beq 	_UnaryMCompare
.367f	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.3681	20 18 15	jsr $1518		jsr	errorHandler
.3684					_UnaryMExit:
.3684	68		pla				pla 								; done so throw comparator and return.
.3685	60		rts				rts
.3686					_UnaryMCompare:
.3686	e8		inx				inx 								; get the 2nd thing to evaluate
.3687	20 4c 34	jsr $344c			jsr 	Evaluate
.368a	ca		dex				dex
.368b	20 12 32	jsr $3212			jsr 	PerformComparison 			; this is part of evaluate/compare.asm
.368e	85 32		sta $32				sta 	tempShort 					; save result
.3690	68		pla				pla 								; get what we need
.3691	48		pha				pha
.3692	c5 32		cmp $32				cmp 	tempShort 					; did we get it
.3694	d0 de		bne $3674			bne 	_UnaryMLoop 				; no, try another value.
.3696	20 03 3b	jsr $3b03			jsr 	MInt32False 				; promote 2nd to 1st.
.3699	20 e7 39	jsr $39e7			jsr 	MInt32Add
.369c	4c 74 36	jmp $3674			jmp 	_UnaryMLoop
.369f					Unary_Page:
.369f	20 03 3b	jsr $3b03			jsr 	MInt32False 				; zero
.36a2	ad c8 0a	lda $0ac8			lda 	basePage 					; copy base page address in.
.36a5	95 98		sta $98,x			sta 	esInt0,x
.36a7	ad c9 0a	lda $0ac9			lda 	basePage+1
.36aa	95 a0		sta $a0,x			sta 	esInt1,x
.36ac	60		rts				rts
.36ad					UnaryReference:
.36ad	a9 0f		lda #$0f			lda 	#15
.36af	20 e2 32	jsr $32e2			jsr 	EvaluateLevel 				; evaluate term and don't deference.
.36b2	b5 90		lda $90,x			lda 	esType,x 					; check it's a reference.
.36b4	10 05		bpl $36bb			bpl 	UType
.36b6	a9 00		lda #$00			lda 	#0 							; make it an integer
.36b8	95 90		sta $90,x			sta 	esType,x
.36ba	60		rts				rts
.36bb					UType:
.36bb	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.36bd	20 18 15	jsr $1518		jsr	errorHandler
.36c0					UnaryHexMarker:
.36c0	4c 3d 34	jmp $343d			jmp 	EvaluateIntegerTerm
.36c3					UnaryComplement:
.36c3	20 3d 34	jsr $343d			jsr 	EvaluateIntegerTerm
.36c6	20 d7 3a	jsr $3ad7			jsr 	MInt32Not
.36c9	60		rts				rts
.36ca					UnaryIntToFloat:
.36ca	20 55 34	jsr $3455			jsr 	EvaluateNumeric				; some number
.36cd	b5 90		lda $90,x			lda 	esType,x 					; if float already, exit
.36cf	d0 0b		bne $36dc			bne 	_UIFExit
.36d1	8a		txa				txa 								; convert and set type
.36d2	a2 1c		ldx #$1c		ldx	#28
.36d4	20 67 23	jsr $2367		jsr	floatingpointHandler
.36d7	aa		tax				tax
.36d8	a9 01		lda #$01			lda 	#1
.36da	95 90		sta $90,x			sta 	esType,x
.36dc					_UIFExit:
.36dc	60		rts				rts
.36dd					UnaryFloatToInt:
.36dd	20 55 34	jsr $3455			jsr 	EvaluateNumeric 			; the number
.36e0	b5 90		lda $90,x			lda 	esType,x 					; if int already exit
.36e2	f0 0b		beq $36ef			beq 	_UFIExit
.36e4	8a		txa				txa 								; convert to int
.36e5	a2 14		ldx #$14		ldx	#20
.36e7	20 67 23	jsr $2367		jsr	floatingpointHandler
.36ea	aa		tax				tax
.36eb	a9 00		lda #$00			lda 	#0 							; set type
.36ed	95 90		sta $90,x			sta 	esType,x
.36ef					_UFIExit:
.36ef	60		rts				rts
.36f0					UnaryAlloc:
.36f0	e8		inx				inx 								; evaluate memory required
.36f1	20 6b 34	jsr $346b			jsr 	EvaluateInteger
.36f4	20 76 3b	jsr $3b76			jsr 	CheckRightParen
.36f7	ca		dex				dex
.36f8	b5 a9		lda $a9,x			lda 	esInt2+1,x 					; check at least in 64k range.
.36fa	15 b1		ora $b1,x			ora 	esInt3+1,x
.36fc	d0 1d		bne $371b			bne 	_UABadValue
.36fe	20 03 3b	jsr $3b03			jsr 	MInt32False					; zero return.
.3701	a5 36		lda $36				lda 	lowMemory+1 				; copy low memory in
.3703	95 a0		sta $a0,x			sta 	esInt1,x
.3705	a5 35		lda $35				lda 	lowMemory
.3707	95 98		sta $98,x			sta 	esInt0,x
.3709	18		clc				clc 								; add alloc required.
.370a	75 99		adc $99,x			adc 	esInt0+1,x
.370c	85 35		sta $35				sta 	lowMemory
.370e	a5 36		lda $36				lda 	lowMemory+1
.3710	75 a1		adc $a1,x			adc 	esInt1+1,x
.3712	85 36		sta $36				sta 	lowMemory+1
.3714	b0 05		bcs $371b			bcs		_UABadValue 				; overflow definitely bad.
.3716	c5 34		cmp $34				cmp 	highMemory+1
.3718	b0 01		bcs $371b			bcs 	_UABadValue 				; out of memory bad.
.371a	60		rts				rts
.371b					_UABadValue:
.371b	a2 22		ldx #$22			ldx 	#ErrorID_Memory
.371d	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary/unary2.asm

.3720					UnaryTimer:
.3720	20 76 3b	jsr $3b76			jsr 	CheckRightParen 			; no parameters
.3723	98		tya				tya
.3724	48		pha				pha
.3725	20 2a 3b	jsr $3b2a			jsr 	MInt32Zero 					; zero result
.3728	86 2a		stx $2a				stx 	temp0 						; returning in YA so can't use .pshx
.372a	a2 1c		ldx #$1c		ldx	#28
.372c	20 f6 14	jsr $14f6		jsr	deviceHandler
.372f	a6 2a		ldx $2a				ldx 	temp0						; restore X and update 16 bit result
.3731	95 98		sta $98,x			sta 	esInt0,x
.3733	98		tya				tya
.3734	95 a0		sta $a0,x			sta 	esInt1,x
.3736	68		pla				pla
.3737	a8		tay				tay
.3738	60		rts				rts
.3739					UnaryInkey:
.3739	20 76 3b	jsr $3b76			jsr 	CheckRightParen
.373c	86 2a		stx $2a				stx 	temp0
.373e	a2 0a		ldx #$0a		ldx	#10
.3740	20 f6 14	jsr $14f6		jsr	deviceHandler
.3743	a6 2a		ldx $2a				ldx 	temp0
.3745	20 12 3b	jsr $3b12			jsr 	MInt32Set8Bit
.3748	60		rts				rts
.3749					UnaryGet:
.3749	20 76 3b	jsr $3b76			jsr 	CheckRightParen
.374c	86 2a		stx $2a				stx 	temp0
.374e					_UGLoop:
.374e	a2 02		ldx #$02		ldx	#2
.3750	20 f6 14	jsr $14f6		jsr	deviceHandler
.3753	a2 0a		ldx #$0a		ldx	#10
.3755	20 f6 14	jsr $14f6		jsr	deviceHandler
.3758	c9 00		cmp #$00			cmp 	#0
.375a	f0 f2		beq $374e			beq 	_UGLoop
.375c	a6 2a		ldx $2a				ldx 	temp0
.375e	20 12 3b	jsr $3b12			jsr 	MInt32Set8Bit
.3761	60		rts				rts
.3762					UnaryGetString:
.3762	20 49 37	jsr $3749			jsr 	UnaryGet
.3765					UGSDoChr:
.3765	4c b6 37	jmp $37b6			jmp 	ChrCode
.3768					UnaryInkeyString:
.3768	20 39 37	jsr $3739			jsr 	UnaryInkey
.376b	b5 98		lda $98,x			lda 	esInt0,x
.376d	d0 f6		bne $3765			bne 	UGSDoChr
.376f	8a		txa				txa
.3770	a2 08		ldx #$08		ldx	#8
.3772	20 ae 3e	jsr $3eae		jsr	stringHandler
.3775	aa		tax				tax
.3776	60		rts				rts
.3777					UnarySys:
.3777	20 6b 34	jsr $346b			jsr 	EvaluateInteger 				; get the address
.377a	20 76 3b	jsr $3b76			jsr 	CheckRightParen
.377d	20 59 28	jsr $2859			jsr 	TOSToTemp0 						; copy call address to temp0
.3780	8a		txa				txa
.3781	48		pha				pha
.3782	98		tya				tya
.3783	48		pha				pha
.3784	ad 00 0a	lda $0a00			lda 	("A"-"A")*4+SingleLetterVar 	; load AXY
.3787	ae 5c 0a	ldx $0a5c			ldx 	("X"-"A")*4+SingleLetterVar
.378a	ac 60 0a	ldy $0a60			ldy 	("Y"-"A")*4+SingleLetterVar
.378d	20 9c 37	jsr $379c			jsr 	_CallTemp0
.3790	85 32		sta $32				sta 	tempShort 						; restore YX
.3792	68		pla				pla
.3793	a8		tay				tay
.3794	68		pla				pla
.3795	aa		tax				tax
.3796	a5 32		lda $32				lda 	tempShort
.3798	20 12 3b	jsr $3b12			jsr 	MInt32Set8Bit 					; return result.
.379b	60		rts				rts
.379c					_CallTemp0:
.379c	6c 2a 00	jmp ($002a)			jmp 	(temp0)
.379f					UnaryMem:
.379f	20 03 3b	jsr $3b03			jsr 	MInt32False 					; set to false (e.g. 0)
.37a2	38		sec				sec
.37a3	a5 33		lda $33				lda 	highMemory 						; calculate value
.37a5	e5 35		sbc $35				sbc 	lowMemory
.37a7	95 98		sta $98,x			sta 	esInt0,x
.37a9	a5 34		lda $34				lda 	highMemory+1
.37ab	e5 36		sbc $36				sbc 	lowMemory+1
.37ad	95 a0		sta $a0,x			sta 	esInt1,x
.37af	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary/unarystr.asm

.37b0					ExecChr:
.37b0	20 73 34	jsr $3473			jsr 	EvaluateSmallInteger		; character number 0-255
.37b3	20 76 3b	jsr $3b76			jsr 	CheckRightParen				; right bracket
.37b6					ChrCode:
.37b6	98		tya				tya
.37b7	48		pha				pha
.37b8	8a		txa				txa 								; A = stack
.37b9	b4 98		ldy $98,x			ldy 	esInt0,x					; Y = character
.37bb	a2 02		ldx #$02		ldx	#2
.37bd	20 ae 3e	jsr $3eae		jsr	stringHandler
.37c0	aa		tax				tax 								; X = stack
.37c1	68		pla				pla
.37c2	a8		tay				tay
.37c3	60		rts				rts
.37c4					ExecLower:
.37c4	38		sec				sec 								; set carry is lower
.37c5	b0 01		bcs $37c8			bcs 	ExecUpperLower
.37c7					ExecUpper:
.37c7	18		clc				clc 								; clear carry is upper
.37c8					ExecUpperLower:
.37c8	08		php				php 								; save carry
.37c9	20 60 34	jsr $3460			jsr 	EvaluateString 				; string to stack,X
.37cc	20 76 3b	jsr $3b76			jsr 	CheckRightParen 			; check closing right bracket.
.37cf	28		plp				plp 								; restore carry, save Y
.37d0	98		tya				tya
.37d1	48		pha				pha
.37d2	a9 00		lda #$00			lda 	#0 							; A zero if upper, 1 if lower.
.37d4	2a		rol a				rol 	a
.37d5	a8		tay				tay 								; now in Y
.37d6	8a		txa				txa 								; do the substring and exit.
.37d7	a2 0c		ldx #$0c		ldx	#12
.37d9	20 ae 3e	jsr $3eae		jsr	stringHandler
.37dc	aa		tax				tax
.37dd	68		pla				pla
.37de	a8		tay				tay
.37df	60		rts				rts
.37e0					ExecLeft:
.37e0	20 60 34	jsr $3460			jsr 	EvaluateString 				; string to stack,X
.37e3	20 83 3b	jsr $3b83			jsr 	CheckComma
.37e6	e8		inx				inx
.37e7	a9 01		lda #$01			lda 	#1 							; 1 for 2nd parameter.
.37e9	20 12 3b	jsr $3b12			jsr 	MInt32Set8Bit
.37ec	e8		inx				inx
.37ed	20 73 34	jsr $3473			jsr 	EvaluateSmallInteger 		; smallint 3rd parameter
.37f0					ExecSubstring:
.37f0	ca		dex				dex 								; fix up X
.37f1	ca		dex				dex
.37f2	20 76 3b	jsr $3b76			jsr 	CheckRightParen 			; check closing right bracket.
.37f5	8a		txa				txa 								; do the substring and exit.
.37f6	a2 0e		ldx #$0e		ldx	#14
.37f8	20 ae 3e	jsr $3eae		jsr	stringHandler
.37fb	aa		tax				tax
.37fc	60		rts				rts
.37fd					ExecMid:
.37fd	20 60 34	jsr $3460			jsr 	EvaluateString 				; string to stack,X
.3800	20 83 3b	jsr $3b83			jsr 	CheckComma
.3803	e8		inx				inx
.3804	20 73 34	jsr $3473			jsr 	EvaluateSmallInteger 		; smallint 2nd parameter
.3807	c9 00		cmp #$00			cmp 	#0
.3809	f0 15		beq $3820			beq 	_EMValue
.380b	e8		inx				inx
.380c	a9 ff		lda #$ff			lda 	#255 						; 255 default for 3nd parameter - this is optional.
.380e	20 12 3b	jsr $3b12			jsr 	MInt32Set8Bit
.3811	b1 28		lda ($28),y			lda 	(codePtr),y 				; is there a ) next
.3813	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN 				; if so, just MID$(a$,2)
.3815	f0 d9		beq $37f0			beq 	ExecSubString
.3817	20 83 3b	jsr $3b83			jsr 	CheckComma
.381a	20 73 34	jsr $3473			jsr 	EvaluateSmallInteger 		; smallint 2nd parameter
.381d	4c f0 37	jmp $37f0			jmp 	ExecSubString
.3820					_EMValue:
.3820	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.3822	20 18 15	jsr $1518		jsr	errorHandler
.3825					ExecRight:
.3825	20 60 34	jsr $3460			jsr 	EvaluateString 				; string to stack,X
.3828	20 83 3b	jsr $3b83			jsr 	CheckComma
.382b	e8		inx				inx
.382c	20 73 34	jsr $3473			jsr 	EvaluateSmallInteger 		; smallint 2nd parameter.
.382f	ca		dex				dex
.3830	98		tya				tya
.3831	48		pha				pha
.3832	b5 98		lda $98,x			lda 	esInt0,x 					; copy address of string to temp0
.3834	85 2a		sta $2a				sta 	temp0
.3836	b5 a0		lda $a0,x			lda 	esInt1,x
.3838	85 2b		sta $2b				sta 	temp0+1
.383a	a0 00		ldy #$00			ldy 	#0 							; point to length
.383c	b1 2a		lda ($2a),y			lda 	(temp0),y 					; get the length.
.383e	18		clc				clc 								; add 1.
.383f	69 01		adc #$01			adc 	#1
.3841	38		sec				sec
.3842	f5 99		sbc $99,x			sbc 	esInt0+1,x  				; subtract right count.
.3844	f0 02		beq $3848			beq		_ERMake1 					; if zero, make it 1.
.3846	b0 02		bcs $384a			bcs		_EROkay
.3848					_ERMake1:
.3848	a9 01		lda #$01			lda 	#1 							; start position.
.384a					_EROkay:
.384a	e8		inx				inx 								; set start pos.
.384b	95 98		sta $98,x			sta 	esInt0,x
.384d	e8		inx				inx
.384e	a9 ff		lda #$ff			lda 	#255 						; 255 default for 3nd parameter.
.3850	20 12 3b	jsr $3b12			jsr 	MInt32Set8Bit
.3853	68		pla				pla
.3854	a8		tay				tay
.3855	4c f0 37	jmp $37f0			jmp 	ExecSubString 				; do the substring code.

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32binary.asm

.3858					MInt32And:
.3858	b5 98		lda $98,x			lda 	esInt0,x
.385a	35 99		and $99,x			and 	esInt0+1,x
.385c	95 98		sta $98,x			sta 	esInt0,x
.385e	b5 a0		lda $a0,x			lda 	esInt1,x
.3860	35 a1		and $a1,x			and 	esInt1+1,x
.3862	95 a0		sta $a0,x			sta 	esInt1,x
.3864	b5 a8		lda $a8,x			lda 	esInt2,x
.3866	35 a9		and $a9,x			and 	esInt2+1,x
.3868	95 a8		sta $a8,x			sta 	esInt2,x
.386a	b5 b0		lda $b0,x			lda 	esInt3,x
.386c	35 b1		and $b1,x			and 	esInt3+1,x
.386e	95 b0		sta $b0,x			sta 	esInt3,x
.3870	60		rts				rts
.3871					MInt32Or:
.3871	b5 98		lda $98,x			lda 	esInt0,x
.3873	15 99		ora $99,x			ora 	esInt0+1,x
.3875	95 98		sta $98,x			sta 	esInt0,x
.3877	b5 a0		lda $a0,x			lda 	esInt1,x
.3879	15 a1		ora $a1,x			ora 	esInt1+1,x
.387b	95 a0		sta $a0,x			sta 	esInt1,x
.387d	b5 a8		lda $a8,x			lda 	esInt2,x
.387f	15 a9		ora $a9,x			ora 	esInt2+1,x
.3881	95 a8		sta $a8,x			sta 	esInt2,x
.3883	b5 b0		lda $b0,x			lda 	esInt3,x
.3885	15 b1		ora $b1,x			ora 	esInt3+1,x
.3887	95 b0		sta $b0,x			sta 	esInt3,x
.3889	60		rts				rts
.388a					MInt32Xor:
.388a	b5 98		lda $98,x			lda 	esInt0,x
.388c	55 99		eor $99,x			eor 	esInt0+1,x
.388e	95 98		sta $98,x			sta 	esInt0,x
.3890	b5 a0		lda $a0,x			lda 	esInt1,x
.3892	55 a1		eor $a1,x			eor 	esInt1+1,x
.3894	95 a0		sta $a0,x			sta 	esInt1,x
.3896	b5 a8		lda $a8,x			lda 	esInt2,x
.3898	55 a9		eor $a9,x			eor 	esInt2+1,x
.389a	95 a8		sta $a8,x			sta 	esInt2,x
.389c	b5 b0		lda $b0,x			lda 	esInt3,x
.389e	55 b1		eor $b1,x			eor 	esInt3+1,x
.38a0	95 b0		sta $b0,x			sta 	esInt3,x
.38a2	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32compare.asm

.38a3					MInt32Compare:
.38a3	b5 98		lda $98,x			lda 	esInt0,x 					; equality check first.
.38a5	d5 99		cmp $99,x			cmp 	esInt0+1,x
.38a7	d0 13		bne $38bc			bne 	MInt32Compare2
.38a9	b5 a0		lda $a0,x			lda 	esInt1,x
.38ab	d5 a1		cmp $a1,x			cmp 	esInt1+1,x
.38ad	d0 0d		bne $38bc			bne 	MInt32Compare2
.38af	b5 a8		lda $a8,x			lda 	esInt2,x
.38b1	d5 a9		cmp $a9,x			cmp 	esInt2+1,x
.38b3	d0 07		bne $38bc			bne 	MInt32Compare2
.38b5	b5 b0		lda $b0,x			lda 	esInt3,x
.38b7	55 b1		eor $b1,x			eor 	esInt3+1,x 					; EOR will return 0 if the same.
.38b9	d0 01		bne $38bc			bne 	MInt32Compare2
.38bb	60		rts				rts
.38bc					MInt32Compare2:
.38bc	b5 98		lda $98,x			lda		esInt0,x 					; unsigned 32 bit comparison.
.38be	d5 99		cmp $99,x			cmp 	esInt0+1,x
.38c0	b5 a0		lda $a0,x			lda		esInt1,x
.38c2	f5 a1		sbc $a1,x			sbc 	esInt1+1,x
.38c4	b5 a8		lda $a8,x			lda		esInt2,x
.38c6	f5 a9		sbc $a9,x			sbc 	esInt2+1,x
.38c8	b5 b0		lda $b0,x			lda		esInt3,x
.38ca	f5 b1		sbc $b1,x			sbc 	esInt3+1,x
.38cc	50 02		bvc $38d0			bvc 	_I32LNoOverflow 			; make it signed 32 bit comparison
.38ce	49 80		eor #$80			eor 	#$80
.38d0					_I32LNoOverflow
.38d0	30 03		bmi $38d5			bmi 	MInt32CLess					; if -ve then return $FF
.38d2	a9 01		lda #$01			lda 	#$01						; else return $01
.38d4	60		rts				rts
.38d5					MInt32CLess:
.38d5	a9 ff		lda #$ff			lda 	#$FF
.38d7	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32divide.asm

.38d8					MInt32SDivide:
.38d8	98		tya				tya  								; save Y, which is the count of negations
.38d9	48		pha				pha
.38da	a0 00		ldy #$00			ldy 	#0 							; zero count
.38dc	20 f4 38	jsr $38f4			jsr 	_MInt32SRemSign 			; unsign TOS
.38df	e8		inx				inx 								; unsign TOS+1
.38e0	20 f4 38	jsr $38f4			jsr 	_MInt32SRemSign
.38e3	ca		dex				dex
.38e4	98		tya				tya 								; save sign count on stack
.38e5	48		pha				pha
.38e6	20 fd 38	jsr $38fd			jsr 	MInt32UDivide 				; unsigned division
.38e9	68		pla				pla 								; get sign count back
.38ea	29 01		and #$01			and 	#1 							; if it is odd, then negate result
.38ec	f0 03		beq $38f1			beq 	_I32SNoNeg
.38ee	20 bd 3a	jsr $3abd			jsr 	MInt32Negate
.38f1					_I32SNoNeg:
.38f1	68		pla				pla 								; restoe Y and exit
.38f2	a8		tay				tay
.38f3	60		rts				rts
.38f4					_MInt32SRemSign:
.38f4	b5 b0		lda $b0,x			lda 	esInt3,x 					; is it -ve
.38f6	10 04		bpl $38fc			bpl 	_MInt32SRSExit
.38f8	c8		iny				iny 								; increment the sign count
.38f9	20 bd 3a	jsr $3abd			jsr 	MInt32Negate 				; negate the value.
.38fc					_MInt32SRSExit:
.38fc	60		rts				rts
.38fd					MInt32UDivide:
.38fd	b5 99		lda $99,x			lda 	esInt0+1,x 					; check for division by zero
.38ff	15 a1		ora $a1,x			ora 	esInt1+1,x
.3901	15 a2		ora $a2,x			ora 	esInt1+2,x
.3903	15 a3		ora $a3,x			ora 	esInt1+3,x
.3905	f0 4a		beq $3951			beq 	_MInt32DZero
.3907	e8		inx				inx 								; clear A
.3908	e8		inx				inx
.3909	20 03 3b	jsr $3b03			jsr 	MInt32False
.390c	ca		dex				dex
.390d	ca		dex				dex
.390e	98		tya				tya 								; save Y on the stack
.390f	48		pha				pha
.3910	a0 20		ldy #$20			ldy 	#32 						; number of division passes
.3912					_MInt32UDLoop:
.3912	16 98		asl $98,x			asl 	esInt0,x					; shift QA left. First Q
.3914	36 a0		rol $a0,x			rol 	esInt1,x
.3916	36 a8		rol $a8,x			rol 	esInt2,x
.3918	36 b0		rol $b0,x			rol 	esInt3,x
.391a	36 9a		rol $9a,x			rol 	esInt0+2,x 					; then A.
.391c	36 a2		rol $a2,x			rol 	esInt1+2,x
.391e	36 aa		rol $aa,x			rol 	esInt2+2,x
.3920	36 b2		rol $b2,x			rol 	esInt3+2,x
.3922	38		sec				sec 								; calculate A-M saving result on the stack
.3923	b5 9a		lda $9a,x			lda 	esInt0+2,x
.3925	f5 99		sbc $99,x			sbc 	esInt0+1,x
.3927	48		pha				pha
.3928	b5 a2		lda $a2,x			lda 	esInt1+2,x
.392a	f5 a1		sbc $a1,x			sbc 	esInt1+1,x
.392c	48		pha				pha
.392d	b5 aa		lda $aa,x			lda 	esInt2+2,x
.392f	f5 a9		sbc $a9,x			sbc 	esInt2+1,x
.3931	48		pha				pha
.3932	b5 b2		lda $b2,x			lda 	esInt3+2,x
.3934	f5 b1		sbc $b1,x			sbc 	esInt3+1,x
.3936	90 10		bcc $3948			bcc		_MInt32NoSubtract 			; if A < M (e.g. carry clear) then reject this.
.3938	95 b2		sta $b2,x			sta 	esInt3+2,x 					; write result back to A
.393a	68		pla				pla
.393b	95 aa		sta $aa,x			sta 	esInt2+2,x
.393d	68		pla				pla
.393e	95 a2		sta $a2,x			sta 	esInt1+2,x
.3940	68		pla				pla
.3941	95 9a		sta $9a,x			sta 	esInt0+2,x
.3943	f6 98		inc $98,x			inc 	esInt0,x 					; sets bit 0 of Q - it was shifted left previously.
.3945	4c 4b 39	jmp $394b			jmp 	_MInt32Next 					; do the next iteration
.3948					_MInt32NoSubtract:
.3948	68		pla				pla
.3949	68		pla				pla
.394a	68		pla				pla
.394b					_MInt32Next:
.394b	88		dey				dey 								; do this 32 times.
.394c	d0 c4		bne $3912			bne 	_MInt32UDLoop
.394e	68		pla				pla 								; restore Y and exit
.394f	a8		tay				tay
.3950	60		rts				rts
.3951					_MInt32DZero:
.3951	a2 05		ldx #$05			ldx 	#ErrorID_DivZero
.3953	20 18 15	jsr $1518		jsr	errorHandler
.3956					MInt32Modulus:
.3956	20 fd 38	jsr $38fd			jsr 	MInt32UDivide 				; do the division.
.3959	b5 b2		lda $b2,x			lda 	esInt3+2,x 					; copy 2nd on stack (the remainder) to the top.
.395b	95 b0		sta $b0,x			sta 	esInt3,x
.395d	b5 aa		lda $aa,x			lda 	esInt2+2,x
.395f	95 a8		sta $a8,x			sta 	esInt2,x
.3961	b5 a2		lda $a2,x			lda 	esInt1+2,x
.3963	95 a0		sta $a0,x			sta 	esInt1,x
.3965	b5 9a		lda $9a,x			lda 	esInt0+2,x
.3967	95 98		sta $98,x			sta 	esInt0,x
.3969	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32fromstr.asm

.0d06					fs32Length:
>0d06							.fill 	1
.396a					LinkInt32FromString:
.396a	aa		tax				tax
.396b	98		tya				tya
.396c	20 71 39	jsr $3971			jsr 	MInt32FromString
.396f	8a		txa				txa
.3970	60		rts				rts
.3971					MInt32FromString:
.3971	85 32		sta $32				sta 	tempShort 					; save base
.3973	98		tya				tya
.3974	48		pha				pha
.3975	a0 00		ldy #$00			ldy 	#0 							; get length of string to convert
.3977	b1 2a		lda ($2a),y			lda 	(temp0),y
.3979	8d 06 0d	sta $0d06			sta 	fs32Length
.397c	f0 65		beq $39e3			beq 	_I32FSFail2					; fail if length zero.
.397e	a0 01		ldy #$01			ldy 	#1 							; set index into string being read
.3980	b1 2a		lda ($2a),y			lda 	(temp0),y 					; look at first character
.3982	c9 2d		cmp #$2d			cmp 	#"-"						; is it a - character
.3984	d0 09		bne $398f			bne 	_I32FSNotNegative
.3986	ad 06 0d	lda $0d06			lda 	fs32Length 					; get length back.
.3989	c9 01		cmp #$01			cmp 	#1 							; if 1 it is just a - on its own so fail.
.398b	f0 56		beq $39e3			beq 	_I32FSFail2
.398d	a0 02		ldy #$02			ldy 	#2 							; first digit of the number.
.398f					_I32FSNotNegative:
.398f	a5 32		lda $32				lda 	tempShort 					; get the base back.
.3991	c0 02		cpy #$02			cpy 	#2 							; if we read a -ve (e.g. Y == 2)
.3993	d0 02		bne $3997			bne 	_I32FSNN2
.3995	09 80		ora #$80			ora 	#$80						; set bit 7, this indicates a negated result.
.3997					_I32FSNN2:
.3997	48		pha				pha 								; save base + final sign on stack.
.3998	20 03 3b	jsr $3b03			jsr 	MInt32False 				; zero the return value.
.399b					_I32FSMainLoop:
.399b	68		pla				pla 								; get the base back into tempShort
.399c	48		pha				pha
.399d	29 7f		and #$7f			and 	#$7F
.399f	85 32		sta $32				sta 	tempShort
.39a1	b1 2a		lda ($2a),y			lda 	(temp0),y 					; look at next character.
.39a3	c9 61		cmp #$61			cmp 	#"a" 						; fix up case.
.39a5	90 02		bcc $39a9			bcc 	_I32FSNotLC
.39a7	e9 20		sbc #$20			sbc 	#32
.39a9					_I32FSNotLC:
.39a9	38		sec				sec 								; subtract 48 (ASCII "0") - ASCII to Hex conversion
.39aa	e9 30		sbc #$30			sbc 	#"0"
.39ac	90 34		bcc $39e2			bcc 	_I32FSFail 					; nothing more to do.
.39ae	c9 0a		cmp #$0a			cmp 	#9+1 						; if it is 0-9 validate vs base.
.39b0	90 06		bcc $39b8			bcc 	_I32FSValidate
.39b2	c9 11		cmp #$11			cmp 	#17 						; is it between 58 and 64 ? if so bad.
.39b4	90 2c		bcc $39e2			bcc 	_I32FSFail
.39b6	e9 07		sbc #$07			sbc 	#7 							; adjust into range so now character is 0->nnn
.39b8					_I32FSValidate:
.39b8	c5 32		cmp $32				cmp 	tempShort 					; compare against the base.
.39ba	b0 26		bcs $39e2			bcs 	_I32FSFail 					; sorry, too large for this base, so fail.
.39bc	48		pha				pha 								; save the new digit value.
.39bd	e8		inx				inx 								; put base into next slot up on stack
.39be	a5 32		lda $32				lda 	tempShort
.39c0	20 12 3b	jsr $3b12			jsr 	MInt32Set8Bit
.39c3	ca		dex				dex
.39c4	20 1b 3a	jsr $3a1b			jsr 	MInt32Multiply 				; multiply current by the base
.39c7	e8		inx				inx
.39c8	68		pla				pla  								; put additive into next slot
.39c9	20 12 3b	jsr $3b12			jsr 	MInt32Set8Bit
.39cc	ca		dex				dex
.39cd	20 e7 39	jsr $39e7			jsr 	MInt32Add 					; and add it
.39d0	c8		iny				iny 								; bump the character pointer
.39d1	cc 06 0d	cpy $0d06			cpy 	fs32Length 					; until > length.
.39d4	f0 c5		beq $399b			beq 	_I32FSMainLoop
.39d6	90 c3		bcc $399b			bcc 	_I32FSMainLoop
.39d8					_I32FSDone:
.39d8	68		pla				pla 								; get base/final sign back
.39d9	10 03		bpl $39de			bpl 	_I32FSNN3
.39db	20 bd 3a	jsr $3abd			jsr 	MInt32Negate 				; negate the result.
.39de					_I32FSNN3:
.39de	68		pla				pla
.39df	a8		tay				tay
.39e0	38		sec				sec
.39e1	60		rts				rts
.39e2					_I32FSFail:
.39e2	68		pla				pla
.39e3					_I32FSFail2:
.39e3	68		pla				pla
.39e4	a8		tay				tay
.39e5	18		clc				clc
.39e6	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32math.asm

.39e7					MInt32Add:
.39e7	18		clc				clc
.39e8	b5 98		lda $98,x			lda 	esInt0,x
.39ea	75 99		adc $99,x			adc 	esInt0+1,x
.39ec	95 98		sta $98,x			sta 	esInt0,x
.39ee	b5 a0		lda $a0,x			lda 	esInt1,x
.39f0	75 a1		adc $a1,x			adc 	esInt1+1,x
.39f2	95 a0		sta $a0,x			sta 	esInt1,x
.39f4	b5 a8		lda $a8,x			lda 	esInt2,x
.39f6	75 a9		adc $a9,x			adc 	esInt2+1,x
.39f8	95 a8		sta $a8,x			sta 	esInt2,x
.39fa	b5 b0		lda $b0,x			lda 	esInt3,x
.39fc	75 b1		adc $b1,x			adc 	esInt3+1,x
.39fe	95 b0		sta $b0,x			sta 	esInt3,x
.3a00	60		rts				rts
.3a01					MInt32Sub:
.3a01	38		sec				sec
.3a02	b5 98		lda $98,x			lda 	esInt0,x
.3a04	f5 99		sbc $99,x			sbc 	esInt0+1,x
.3a06	95 98		sta $98,x			sta 	esInt0,x
.3a08	b5 a0		lda $a0,x			lda 	esInt1,x
.3a0a	f5 a1		sbc $a1,x			sbc 	esInt1+1,x
.3a0c	95 a0		sta $a0,x			sta 	esInt1,x
.3a0e	b5 a8		lda $a8,x			lda 	esInt2,x
.3a10	f5 a9		sbc $a9,x			sbc 	esInt2+1,x
.3a12	95 a8		sta $a8,x			sta 	esInt2,x
.3a14	b5 b0		lda $b0,x			lda 	esInt3,x
.3a16	f5 b1		sbc $b1,x			sbc 	esInt3+1,x
.3a18	95 b0		sta $b0,x			sta 	esInt3,x
.3a1a	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32multiply.asm

.3a1b					MInt32Multiply:
.3a1b	e8		inx				inx 								; copy 2nd -> 3rd
.3a1c	20 41 3a	jsr $3a41			jsr 	MInt32CopyUp
.3a1f	ca		dex				dex
.3a20	20 41 3a	jsr $3a41			jsr 	MInt32CopyUp 				; copy 1st -> 2nd
.3a23	20 03 3b	jsr $3b03			jsr 	MInt32False 				; zero 1st.
.3a26					_I32Loop:
.3a26	b5 9a		lda $9a,x			lda 	esInt0+2,x 					; get low bit of 3rd
.3a28	29 01		and #$01			and 	#1
.3a2a	f0 03		beq $3a2f			beq 	_I32NoAdd 					; if set
.3a2c	20 e7 39	jsr $39e7			jsr 	MInt32Add 					; add 2nd to 1st.
.3a2f					_I32NoAdd:
.3a2f	e8		inx				inx 								; shift 2nd left
.3a30	20 18 3b	jsr $3b18			jsr 	MInt32ShiftLeft
.3a33	e8		inx				inx  								; shift 3rd right
.3a34	20 21 3b	jsr $3b21			jsr 	MInt32ShiftRight
.3a37	20 2a 3b	jsr $3b2a			jsr 	MInt32Zero 					; check if zero.
.3a3a	08		php				php 								; save status bits
.3a3b	ca		dex				dex 	 							; point back to 1st
.3a3c	ca		dex				dex
.3a3d	28		plp				plp 								; get status bits
.3a3e	d0 e6		bne $3a26			bne 	_I32Loop 					; if non-zero keep going.
.3a40	60		rts				rts
.3a41					MInt32CopyUp:
.3a41	b5 98		lda $98,x			lda 	esInt0,x
.3a43	95 99		sta $99,x			sta 	esInt0+1,x
.3a45	b5 a0		lda $a0,x			lda 	esInt1,x
.3a47	95 a1		sta $a1,x			sta 	esInt1+1,x
.3a49	b5 a8		lda $a8,x			lda 	esInt2,x
.3a4b	95 a9		sta $a9,x			sta 	esInt2+1,x
.3a4d	b5 b0		lda $b0,x			lda 	esInt3,x
.3a4f	95 b1		sta $b1,x			sta 	esInt3+1,x
.3a51	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32tostr.asm

>0d07					MCharCount:	.fill 	1						; count of converted characters
.3a52					MLInt32ToString:
.3a52	aa		tax				tax									; module passes stack in A, base in Y
.3a53	98		tya				tya
.3a54	20 59 3a	jsr $3a59			jsr 	MInt32ToString
.3a57	8a		txa				txa
.3a58	60		rts				rts
.3a59					MInt32ToString:
.3a59	48		pha				pha 								; save base
.3a5a	85 32		sta $32				sta 	tempShort 					; save target base.
.3a5c	a9 00		lda #$00			lda 	#0
.3a5e	8d 07 0d	sta $0d07			sta 	MCharCount 					; clear character count to 0
.3a61	98		tya				tya
.3a62	48		pha				pha
.3a63	a5 32		lda $32				lda 	tempShort 					; check if we are signed conversion
.3a65	10 10		bpl $3a77			bpl 	_I32TSUnsigned
.3a67	48		pha				pha 								; save base on stack.
.3a68	b5 b0		lda $b0,x			lda 	esInt3,x 					; is it actually negative
.3a6a	10 08		bpl $3a74			bpl 	_I32TSNoFlip
.3a6c	a9 2d		lda #$2d			lda 	#"-" 						; write a '-' prefix out.
.3a6e	20 aa 3a	jsr $3aaa			jsr 	MI32WriteCharacter
.3a71	20 bd 3a	jsr $3abd			jsr 	MInt32Negate 				; negate the value, so now it's positive.
.3a74					_I32TSNoFlip:
.3a74	68		pla				pla 								; get the base back
.3a75	29 7f		and #$7f			and 	#$7F 						; clear the sign flag so it's just a base now.
.3a77					_I32TSUnsigned:
.3a77	20 85 3a	jsr $3a85			jsr 	MI32DivideWrite 			; recursive code to output string.
.3a7a	a0 00		ldy #$00			ldy 	#0 							; write charcount to first character.
.3a7c	ad 07 0d	lda $0d07			lda 	MCharCount
.3a7f	91 2a		sta ($2a),y			sta 	(temp0),y
.3a81	68		pla				pla
.3a82	a8		tay				tay
.3a83	68		pla				pla
.3a84	60		rts				rts
.3a85					MI32DivideWrite:
.3a85	48		pha				pha 								; save the divisor/base
.3a86	e8		inx				inx 								; write in the dividing position.
.3a87	20 12 3b	jsr $3b12			jsr 	MInt32Set8Bit
.3a8a	ca		dex				dex
.3a8b	20 fd 38	jsr $38fd			jsr 	MInt32UDivide 				; divide number by base.
.3a8e	68		pla				pla 								; get the base into Y
.3a8f	a8		tay				tay
.3a90	b5 9a		lda $9a,x			lda 	esInt0+2,x 					; get the remainder and push on the stack.
.3a92	48		pha				pha
.3a93	20 2a 3b	jsr $3b2a			jsr 	MInt32Zero 					; is the result zero ?
.3a96	f0 04		beq $3a9c			beq 	_I32NoRecurse 				; if so, don't recurse.
.3a98	98		tya				tya 								; put base into A
.3a99	20 85 3a	jsr $3a85			jsr 	MI32DivideWrite 				; and jsr the dividor recursively.
.3a9c					_I32NoRecurse:
.3a9c	68		pla				pla 								; get the remainder back
.3a9d	c9 0a		cmp #$0a			cmp 	#10  						; handle hexadecimals, now converting to ASCII
.3a9f	90 02		bcc $3aa3			bcc 	_I32NotHex
.3aa1	69 06		adc #$06			adc 	#7-1
.3aa3					_I32NotHex:
.3aa3	18		clc				clc 								; make it ASCII
.3aa4	69 30		adc #$30			adc 	#48
.3aa6	20 aa 3a	jsr $3aaa			jsr 	MI32WriteCharacter 			; write the character out
.3aa9	60		rts				rts 								; and exit.
.3aaa					MI32WriteCharacter:
.3aaa	ee 07 0d	inc $0d07			inc 	MCharCount 					; bump count (space for leading count)
.3aad	ac 07 0d	ldy $0d07			ldy 	MCharCount 					; get position
.3ab0	91 2a		sta ($2a),y			sta 	(temp0),y 					; write out with trailing 0
.3ab2	c8		iny				iny
.3ab3	a9 00		lda #$00			lda 	#0
.3ab5	91 2a		sta ($2a),y			sta 	(temp0),y
.3ab7	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32unary.asm

>0d08					MSeed32:	.fill 	4							; random number seed.
.3ab8					MInt32Absolute:
.3ab8	b5 b0		lda $b0,x			lda 	esInt3,x 					; use negate code if -ve.
.3aba	30 01		bmi $3abd			bmi 	MInt32Negate
.3abc	60		rts				rts
.3abd					MInt32Negate:
.3abd	38		sec				sec 								; subtract from zero.
.3abe	a9 00		lda #$00			lda 	#0
.3ac0	f5 98		sbc $98,x			sbc 	esInt0,x
.3ac2	95 98		sta $98,x			sta 	esInt0,x
.3ac4	a9 00		lda #$00			lda 	#0
.3ac6	f5 a0		sbc $a0,x			sbc 	esInt1,x
.3ac8	95 a0		sta $a0,x			sta 	esInt1,x
.3aca	a9 00		lda #$00			lda 	#0
.3acc	f5 a8		sbc $a8,x			sbc 	esInt2,x
.3ace	95 a8		sta $a8,x			sta 	esInt2,x
.3ad0	a9 00		lda #$00			lda 	#0
.3ad2	f5 b0		sbc $b0,x			sbc 	esInt3,x
.3ad4	95 b0		sta $b0,x			sta 	esInt3,x
.3ad6	60		rts				rts
.3ad7					MInt32Not:
.3ad7	b5 98		lda $98,x			lda 	esInt0,x 					; one's complement all four.
.3ad9	49 ff		eor #$ff			eor 	#$FF
.3adb	95 98		sta $98,x			sta 	esInt0,x
.3add	b5 a0		lda $a0,x			lda 	esInt1,x
.3adf	49 ff		eor #$ff			eor 	#$FF
.3ae1	95 a0		sta $a0,x			sta 	esInt1,x
.3ae3	b5 a8		lda $a8,x			lda 	esInt2,x
.3ae5	49 ff		eor #$ff			eor 	#$FF
.3ae7	95 a8		sta $a8,x			sta 	esInt2,x
.3ae9	b5 b0		lda $b0,x			lda 	esInt3,x
.3aeb	49 ff		eor #$ff			eor 	#$FF
.3aed	95 b0		sta $b0,x			sta 	esInt3,x
.3aef	60		rts				rts
.3af0					MInt32Sign:
.3af0	b5 b0		lda $b0,x			lda 	esInt3,x					; look at MSB
.3af2	30 0b		bmi $3aff			bmi 	MInt32True 					; if set return -1 (true)
.3af4	20 2a 3b	jsr $3b2a			jsr 	MInt32Zero 					; is it zero ?
.3af7	f0 0a		beq $3b03			beq 	MInt32False 				; if zero return 0 (false)
.3af9	20 03 3b	jsr $3b03			jsr 	MInt32False 				; > 0 return 1, by setting it to zero
.3afc	f6 98		inc $98,x			inc 	esInt0,x  					; and bumping the LSB.
.3afe	60		rts				rts
.3aff					MInt32True:
.3aff	a9 ff		lda #$ff			lda 	#$FF 						; set to $FFFFFFFF
.3b01	d0 02		bne $3b05			bne 	MInt32WriteAll
.3b03					MInt32False:
.3b03	a9 00		lda #$00			lda 	#0
.3b05					MInt32WriteAll:
.3b05	95 98		sta $98,x			sta 	esInt0,x
.3b07					MInt32Write123:
.3b07	95 a0		sta $a0,x			sta 	esInt1,x
.3b09	95 a8		sta $a8,x			sta 	esInt2,x
.3b0b	95 b0		sta $b0,x			sta 	esInt3,x
.3b0d	a9 00		lda #$00			lda 	#$00						; and make it an integer
.3b0f	95 90		sta $90,x			sta 	esType,x
.3b11	60		rts				rts
.3b12					MInt32Set8Bit:
.3b12	95 98		sta $98,x			sta 	esInt0,x 					; coopt above function to write
.3b14	a9 00		lda #$00			lda 	#0 							; a value 0-255
.3b16	f0 ef		beq $3b07			beq		MInt32Write123
.3b18					MInt32ShiftLeft:
.3b18	16 98		asl $98,x			asl 	esInt0,x
.3b1a	36 a0		rol $a0,x			rol	 	esInt1,x
.3b1c	36 a8		rol $a8,x			rol	 	esInt2,x
.3b1e	36 b0		rol $b0,x			rol	 	esInt3,x
.3b20	60		rts				rts
.3b21					MInt32ShiftRight:
.3b21	56 b0		lsr $b0,x			lsr 	esInt3,x
.3b23	76 a8		ror $a8,x			ror 	esInt2,x
.3b25	76 a0		ror $a0,x			ror 	esInt1,x
.3b27	76 98		ror $98,x			ror 	esInt0,x
.3b29	60		rts				rts
.3b2a					MInt32Zero:
.3b2a	b5 98		lda $98,x			lda 	esInt0,x
.3b2c	15 a0		ora $a0,x			ora 	esInt1,x
.3b2e	15 a8		ora $a8,x			ora 	esInt2,x
.3b30	15 b0		ora $b0,x			ora 	esInt3,x
.3b32	60		rts				rts
.3b33					MInt32Random:
.3b33	98		tya				tya
.3b34	48		pha				pha
.3b35	a0 07		ldy #$07			ldy 	#7 							; do it 7 times
.3b37	ad 08 0d	lda $0d08			lda 	MSeed32+0 					; check the seed isn't zero
.3b3a	d0 03		bne $3b3f			bne 	_Random1
.3b3c	a8		tay				tay 								; if so do it 256 times
.3b3d	a9 aa		lda #$aa			lda		#$AA 						; and use this to seed the seed....
.3b3f					_Random1:
.3b3f	0a		asl a				asl 	a
.3b40	2e 09 0d	rol $0d09			rol 	MSeed32+1
.3b43	2e 0a 0d	rol $0d0a			rol 	MSeed32+2
.3b46	2e 0b 0d	rol $0d0b			rol 	MSeed32+3
.3b49	90 02		bcc $3b4d			bcc 	_Random2
.3b4b	49 c5		eor #$c5			eor 	#$C5
.3b4d					_Random2:
.3b4d	88		dey				dey
.3b4e	d0 ef		bne $3b3f			bne 	_Random1
.3b50	8d 08 0d	sta $0d08			sta 	MSeed32+0 					; copy the seed in.
.3b53	95 98		sta $98,x			sta 	esInt0,x
.3b55	ad 09 0d	lda $0d09			lda 	MSeed32+1
.3b58	95 a0		sta $a0,x			sta 	esInt1,x
.3b5a	ad 0a 0d	lda $0d0a			lda 	MSeed32+2
.3b5d	95 a8		sta $a8,x			sta 	esInt2,x
.3b5f	ad 0b 0d	lda $0d0b			lda 	MSeed32+3
.3b62	95 b0		sta $b0,x			sta 	esInt3,x
.3b64	68		pla				pla
.3b65	a8		tay				tay
.3b66	a9 00		lda #$00			lda 	#0
.3b68	95 90		sta $90,x			sta 	esType,x
.3b6a	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/utility/check.asm

.3b6b					CheckToken:
.3b6b	d1 28		cmp ($28),y			cmp 	(codePtr),y
.3b6d	d0 02		bne $3b71			bne 	_CTError
.3b6f	c8		iny				iny
.3b70	60		rts				rts
.3b71					_CTError:
.3b71	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.3b73	20 18 15	jsr $1518		jsr	errorHandler
.3b76					CheckRightParen:
.3b76	b1 28		lda ($28),y			lda 	(codePtr),y
.3b78	c8		iny				iny
.3b79	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.3b7b	d0 01		bne $3b7e			bne 	_CRPError
.3b7d	60		rts				rts
.3b7e					_CRPError:
.3b7e	a2 09		ldx #$09			ldx 	#ErrorID_MissingRP
.3b80	20 18 15	jsr $1518		jsr	errorHandler
.3b83					CheckComma:
.3b83	b1 28		lda ($28),y			lda 	(codePtr),y
.3b85	c8		iny				iny
.3b86	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.3b88	d0 01		bne $3b8b			bne 	_CCError
.3b8a	60		rts				rts
.3b8b					_CCError:
.3b8b	a2 0a		ldx #$0a			ldx 	#ErrorID_MissingComma
.3b8d	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/utility/stack.asm

.0037					rsPointer:
>0037							.fill 	2							; to TOS, which is the current top-token.
.3b90					RSReset:
.3b90	a9 ff		lda #$ff			lda 	#(returnStack+retStackSize-1) & $FF
.3b92	85 37		sta $37				sta 	rsPointer
.3b94	a9 09		lda #$09			lda 	#(returnStack+retStackSize-1) >> 8
.3b96	85 38		sta $38				sta 	1+(rsPointer)
.3b98	a9 ff		lda #$ff			lda 	#$FF 						; put a duff marker on TOS, so nothing will pop
.3b9a	8d ff 09	sta $09ff			sta 	returnStack+retStackSize-1
.3b9d	60		rts				rts
.3b9e					RSClaim:
.3b9e	84 32		sty $32				sty 	tempShort 					; preserve Y
.3ba0	48		pha				pha 								; save marker on stack.
.3ba1	8a		txa				txa 								; get bytes required.
.3ba2	38		sec				sec
.3ba3	49 ff		eor #$ff			eor 	#$FF 						; add to rsPointer using 2's complement.
.3ba5	65 37		adc $37				adc 	rsPointer
.3ba7	85 37		sta $37				sta 	rsPointer
.3ba9	a5 38		lda $38				lda 	rsPointer+1
.3bab	69 ff		adc #$ff			adc 	#$FF
.3bad	85 38		sta $38				sta 	rsPointer+1
.3baf	c9 08		cmp #$08			cmp 	#returnStack>>8 			; overflow. underflow actually :)
.3bb1	90 08		bcc $3bbb			bcc 	_RSCOverflow
.3bb3	68		pla				pla 								; get marker back
.3bb4	a0 00		ldy #$00			ldy 	#0 							; write marker out.
.3bb6	91 37		sta ($37),y			sta 	(rsPointer),y
.3bb8	a4 32		ldy $32				ldy 	tempShort 					; restore Y and exit
.3bba	60		rts				rts
.3bbb					_RSCOverflow:
.3bbb	a2 16		ldx #$16			ldx 	#ErrorID_RetStack
.3bbd	20 18 15	jsr $1518		jsr	errorHandler
.3bc0					RSFree:
.3bc0	18		clc				clc
.3bc1	65 37		adc $37				adc 	rsPointer
.3bc3	85 37		sta $37				sta 	rsPointer
.3bc5	90 02		bcc $3bc9			bcc 	_RSFExit
.3bc7	e6 38		inc $38				inc 	rsPointer+1
.3bc9					_RSFExit:
.3bc9	60		rts				rts
.3bca					RSSavePosition:
.3bca	84 32		sty $32				sty 	tempShort 					; save Y position
.3bcc	a8		tay				tay 								; this is where we write it.
.3bcd	a5 28		lda $28				lda 	codePtr 					; write codePointer out
.3bcf	91 37		sta ($37),y			sta 	(rsPointer),y
.3bd1	c8		iny				iny
.3bd2	a5 29		lda $29				lda 	codePtr+1
.3bd4	91 37		sta ($37),y			sta 	(rsPointer),y
.3bd6	c8		iny				iny
.3bd7	a5 32		lda $32				lda 	tempShort 					; write the Y position out.
.3bd9	91 37		sta ($37),y			sta 	(rsPointer),y
.3bdb	a8		tay				tay 								; fix Y back again to original value
.3bdc	60		rts				rts
.3bdd					RSLoadPosition:
.3bdd	a8		tay				tay
.3bde	b1 37		lda ($37),y			lda 	(rsPointer),y 				; read codePointer back
.3be0	85 28		sta $28				sta 	codePtr
.3be2	c8		iny				iny
.3be3	b1 37		lda ($37),y			lda 	(rsPointer),y
.3be5	85 29		sta $29				sta 	codePtr+1
.3be7	c8		iny				iny
.3be8	b1 37		lda ($37),y			lda 	(rsPointer),y 				; and the offset
.3bea	a8		tay				tay 								; to Y
.3beb	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/utility/warmstart.asm

.3bec					WarmStart:
.3bec	a2 04		ldx #$04		ldx	#4
.3bee	20 53 25	jsr $2553		jsr	interactionHandler

;******  Return to file: main/main.asm

.3bf1					mainHandler:
.3bf1	7c f4 3b	jmp ($3bf4,x)			jmp 	(mainVectors,x)
.3bf4					mainVectors:
>3bf4	10 3c					.word _DummyControlHandler ; index 0
>3bf6	83 3b					.word CheckComma           ; index 2
>3bf8	76 3b					.word CheckRightParen      ; index 4
>3bfa	5b 2d					.word XCommandClear        ; index 6
>3bfc	86 34					.word LinkEvaluate         ; index 8
>3bfe	92 34					.word LinkEvaluateInteger  ; index 10
>3c00	9e 34					.word LinkEvaluateSmallInt ; index 12
>3c02	98 34					.word LinkEvaluateString   ; index 14
>3c04	8c 34					.word LinkEvaluateTerm     ; index 16
>3c06	52 3a					.word MLInt32ToString      ; index 18
>3c08	ea 2e					.word Command_XNew         ; index 20
>3c0a	f8 2e					.word XCommand_Run         ; index 22
>3c0c	04 2f					.word Command_RunFrom      ; index 24
>3c0e	6a 39					.word LinkInt32FromString  ; index 26
.3c10					_DummyControlHandler:
.3c10	60		rts			rts

;******  Return to file: basic.asm

.3c11					section_end_main:
.3c11					section_start_string:

;******  Processing file: string/string.asm


;******  Processing file: string/functions/chr.asm

.3c11					StringChrs:
.3c11	aa		tax				tax 								; set up stack
.3c12	a9 02		lda #$02			lda 	#2
.3c14	20 d4 3c	jsr $3cd4			jsr 	AllocateSoftString
.3c17	98		tya				tya
.3c18	20 fa 3c	jsr $3cfa			jsr 	WriteSoftString
.3c1b					StringUpdate:
.3c1b	20 29 3c	jsr $3c29			jsr 	ReturnSoftString
.3c1e	8a		txa				txa
.3c1f	60		rts				rts
.3c20					StringNull:
.3c20	aa		tax				tax
.3c21	a9 01		lda #$01			lda 	#1
.3c23	20 d4 3c	jsr $3cd4			jsr 	AllocateSoftString
.3c26	4c 1b 3c	jmp $3c1b			jmp 	StringUpdate
.3c29					ReturnSoftString:
.3c29	a5 39		lda $39				lda 	softMemAlloc 				; copy address
.3c2b	95 98		sta $98,x			sta 	esInt0,x
.3c2d	a5 3a		lda $3a				lda 	softMemAlloc+1
.3c2f	95 a0		sta $a0,x			sta 	esInt1,x
.3c31	a9 00		lda #$00			lda 	#0 							; zero upper bytes
.3c33	95 a8		sta $a8,x			sta 	esInt2,x
.3c35	95 b0		sta $b0,x			sta 	esInt3,x
.3c37	a9 40		lda #$40			lda 	#$40 						; type string.
.3c39	95 90		sta $90,x			sta 	esType,x
.3c3b	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/functions/compare.asm

.3c3c					STRCompare:
.3c3c	48		pha				pha 								; save A
.3c3d	aa		tax				tax 								; put stack pos in X
.3c3e	98		tya				tya
.3c3f	48		pha				pha
.3c40	20 74 3c	jsr $3c74			jsr 	CopyStringPair 				; copy strings to temp0,temp1
.3c43	a0 00		ldy #$00			ldy 	#0 							; get the smaller of the two string sizes.
.3c45	b1 2a		lda ($2a),y			lda 	(temp0),y
.3c47	d1 2c		cmp ($2c),y			cmp 	(temp1),y
.3c49	90 02		bcc $3c4d			bcc 	_SCNotSmaller
.3c4b	b1 2c		lda ($2c),y			lda 	(temp1),y
.3c4d					_SCNotSmaller:
.3c4d	aa		tax				tax 								; put that in X. We compare this many chars first.
.3c4e					_SCCompareLoop:
.3c4e	e0 00		cpx #$00			cpx 	#0 							; if compared all the smaller, then it is the shorter
.3c50	f0 0c		beq $3c5e			beq 	_SCSameToEndShortest 		; one that is the smallest if they are different lengths.
.3c52	ca		dex				dex 								; decrement chars to compare.
.3c53	c8		iny				iny 								; move to next character
.3c54	38		sec				sec 								; calculate s1[y]-s2[y]
.3c55	b1 2a		lda ($2a),y			lda 	(temp0),y
.3c57	f1 2c		sbc ($2c),y			sbc 	(temp1),y
.3c59	d0 0a		bne $3c65			bne 	_SCReturnResult 			; if different return sign of A
.3c5b	4c 4e 3c	jmp $3c4e			jmp 	_SCCompareLoop
.3c5e					_SCSameToEndShortest
.3c5e	a0 00		ldy #$00			ldy 	#0 							; compare len(s1) - len(s2)
.3c60	38		sec				sec
.3c61	b1 2a		lda ($2a),y			lda 	(temp0),y
.3c63	f1 2c		sbc ($2c),y			sbc 	(temp1),y
.3c65					_SCReturnResult:
.3c65	08		php				php 								; set return to zero preserving PSW.
.3c66	a2 00		ldx #$00			ldx 	#0
.3c68	28		plp				plp
.3c69	f0 05		beq $3c70			beq 	_SCExit 					; two values equal, then exit
.3c6b	ca		dex				dex 								; X = $FF
.3c6c	90 02		bcc $3c70			bcc 	_SCExit 					; if 1st < 2nd then -1
.3c6e	a2 01		ldx #$01			ldx 	#1 							; X = $01 if greater
.3c70					_SCExit:
.3c70	68		pla				pla
.3c71	a8		tay				tay
.3c72	68		pla				pla
.3c73	60		rts				rts
.3c74					CopyStringPair:
.3c74	b5 99		lda $99,x			lda 	esInt0+1,x
.3c76	85 2c		sta $2c				sta 	temp1
.3c78	b5 a1		lda $a1,x			lda 	esInt1+1,x
.3c7a	85 2d		sta $2d				sta 	temp1+1
.3c7c					CopyStringTop:
.3c7c	b5 98		lda $98,x			lda 	esInt0,x
.3c7e	85 2a		sta $2a				sta 	temp0
.3c80	b5 a0		lda $a0,x			lda 	esInt1,x
.3c82	85 2b		sta $2b				sta 	temp0+1
.3c84	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/functions/concat.asm

.3c85					StringConcat:
.3c85	aa		tax				tax									; stack pos in X
.3c86	98		tya				tya
.3c87	48		pha				pha
.3c88	20 74 3c	jsr $3c74			jsr 	CopyStringPair 				; temp0 and temp1 point to strings to concat.
.3c8b	38		sec				sec 								; calculate alloc strings. lengths added + 1 for size.
.3c8c	a0 00		ldy #$00			ldy 	#0
.3c8e	b1 2a		lda ($2a),y			lda 	(temp0),y
.3c90	71 2c		adc ($2c),y			adc 	(temp1),y
.3c92	b0 1c		bcs $3cb0			bcs 	_SCError 					; just too many characters here.
.3c94	c9 fc		cmp #$fc			cmp 	#MaxStringSize
.3c96	b0 18		bcs $3cb0			bcs 	_SCError
.3c98	20 d4 3c	jsr $3cd4			jsr 	AllocateSoftString 			; allocate soft string memory, set pointer.
.3c9b	20 cb 3c	jsr $3ccb			jsr 	CopySoftToStack 			; copy that to the stack.
.3c9e	20 b5 3c	jsr $3cb5			jsr 	SCCopyTemp0 				; copy temp0
.3ca1	a5 2c		lda $2c				lda 	temp1 						; copy temp1 to temp0
.3ca3	85 2a		sta $2a				sta 	temp0
.3ca5	a5 2d		lda $2d				lda 	temp1+1
.3ca7	85 2b		sta $2b				sta 	temp0+1
.3ca9	20 b5 3c	jsr $3cb5			jsr 	SCCopyTemp0 				; copy temp0 e.g. what was temp1.
.3cac	68		pla				pla
.3cad	a8		tay				tay
.3cae	8a		txa				txa 								; and A
.3caf	60		rts				rts
.3cb0					_SCError:
.3cb0	a2 0d		ldx #$0d			ldx 	#ErrorID_StrLen
.3cb2	20 18 15	jsr $1518		jsr	errorHandler
.3cb5					SCCopyTemp0:
.3cb5	a0 00		ldy #$00			ldy 	#0 							; put count in temp2
.3cb7	b1 2a		lda ($2a),y			lda 	(temp0),y
.3cb9	85 2e		sta $2e				sta 	temp2
.3cbb					_SCCopyLoop:
.3cbb	a5 2e		lda $2e				lda 	temp2 						; done the lot
.3cbd	f0 0b		beq $3cca			beq 	_SCCopyExit
.3cbf	c6 2e		dec $2e				dec 	temp2
.3cc1	c8		iny				iny 								; get next char
.3cc2	b1 2a		lda ($2a),y			lda 	(temp0),y
.3cc4	20 fa 3c	jsr $3cfa			jsr 	WriteSoftString 			; write to soft string.
.3cc7	4c bb 3c	jmp $3cbb			jmp 	_SCCopyLoop
.3cca					_SCCopyExit:
.3cca	60		rts				rts
.3ccb					CopySoftToStack:
.3ccb	a5 39		lda $39				lda 	SoftMemAlloc 				; copy the memory allocation pointer to the stack.
.3ccd	95 98		sta $98,x			sta 	esInt0,x 					; type is already string.
.3ccf	a5 3a		lda $3a				lda 	SoftMemAlloc+1
.3cd1	95 a0		sta $a0,x			sta 	esInt1,x
.3cd3	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/functions/memory.asm

.0039					softMemAlloc:
>0039							.fill 	2  							; if MSB is zero needs resetting on allocation.
.3cd4					AllocateSoftString:
.3cd4	85 32		sta $32				sta 	tempShort 					; save count
.3cd6	98		tya				tya
.3cd7	48		pha				pha
.3cd8	a5 3a		lda $3a				lda 	softMemAlloc+1 				; if the high byte is zero, it needs allocating.
.3cda	d0 09		bne $3ce5			bne 	_ASSDone
.3cdc	a5 33		lda $33				lda 	highMemory 					; reset the soft memory alloc pointer.
.3cde	85 39		sta $39				sta 	softMemAlloc 				; to speed up slightly, we only reset this when we first need it
.3ce0	a4 34		ldy $34				ldy 	highMemory+1 				; but it needs to be reset before each command.
.3ce2	88		dey				dey 								; it is set to 1/4k below high memory, allowing space
.3ce3	84 3a		sty $3a				sty 	softMemAlloc+1 				; for a concreted string.
.3ce5					_ASSDone:
.3ce5	38		sec				sec 								; allocate downwards enough memory
.3ce6	a5 39		lda $39				lda 	softMemAlloc 				; subtract the memory requirements in A from
.3ce8	e5 32		sbc $32				sbc 	tempShort 					; the soft memory pointer
.3cea	85 39		sta $39				sta 	softMemAlloc
.3cec	a5 3a		lda $3a				lda 	softMemAlloc+1
.3cee	e9 00		sbc #$00			sbc 	#0
.3cf0	85 3a		sta $3a				sta 	softMemAlloc+1
.3cf2	a9 00		lda #$00			lda 	#0 							; empty that string, set the length = 0.
.3cf4	a8		tay				tay
.3cf5	91 39		sta ($39),y			sta 	(softMemAlloc),y
.3cf7	68		pla				pla
.3cf8	a8		tay				tay
.3cf9	60		rts				rts
.3cfa					WriteSoftString:
.3cfa	84 32		sty $32				sty 	tempShort 					; save Y
.3cfc	48		pha				pha 								; save character on stack
.3cfd	a0 00		ldy #$00			ldy 	#0 							; get and bump length
.3cff	b1 39		lda ($39),y			lda 	(softMemAlloc),y
.3d01	18		clc				clc
.3d02	69 01		adc #$01			adc 	#1
.3d04	91 39		sta ($39),y			sta 	(softMemAlloc),y
.3d06	a8		tay				tay 								; offset in Y
.3d07	68		pla				pla 								; get char and write.
.3d08	91 39		sta ($39),y			sta 	(softMemAlloc),y
.3d0a	a4 32		ldy $32				ldy 	tempShort 					; restore Y and exit.
.3d0c	60		rts				rts
.3d0d					StrClone:
.3d0d	aa		tax				tax 								; set up stack.
.3d0e	98		tya				tya
.3d0f	48		pha				pha
.3d10	a0 00		ldy #$00			ldy 	#0 							; get length, add 1 for length
.3d12	b1 2a		lda ($2a),y			lda 	(temp0),y 					; this is the bytes required.
.3d14	18		clc				clc
.3d15	69 01		adc #$01			adc 	#1
.3d17	20 d4 3c	jsr $3cd4			jsr 	AllocateSoftString 			; allocate soft memory
.3d1a	a5 39		lda $39				lda 	softMemAlloc 				; copy that address to TOS
.3d1c	95 98		sta $98,x			sta 	esInt0,x
.3d1e	a5 3a		lda $3a				lda 	softMemAlloc+1
.3d20	95 a0		sta $a0,x			sta 	esInt1,x
.3d22	a9 00		lda #$00			lda 	#0 							; zero upper 2 bytes
.3d24	95 a8		sta $a8,x			sta 	esInt2,x
.3d26	95 b0		sta $b0,x			sta 	esInt3,x
.3d28	a9 40		lda #$40			lda 	#$40 						; set type to string.
.3d2a	95 90		sta $90,x			sta 	esType,x
.3d2c	20 b5 3c	jsr $3cb5			jsr 	SCCopyTemp0 				; copy temp0 string to soft memory copy (concat.asm)
.3d2f	68		pla				pla
.3d30	a8		tay				tay
.3d31	8a		txa				txa
.3d32	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/functions/setcase.asm

.3d33					CaseString:
.3d33	48		pha				pha 								; save A and copy to X
.3d34	aa		tax				tax
.3d35	98		tya				tya
.3d36	48		pha				pha
.3d37	20 7c 3c	jsr $3c7c			jsr 	CopyStringTop 				; target string -> temp0
.3d3a	a0 00		ldy #$00			ldy 	#0
.3d3c	b1 2a		lda ($2a),y			lda 	(temp0),y  					; get length,
.3d3e	18		clc				clc
.3d3f	69 01		adc #$01			adc 	#1 							; one more for length byte
.3d41	20 d4 3c	jsr $3cd4			jsr 	AllocateSoftString 			; allocate soft string memory, set pointer.
.3d44	20 cb 3c	jsr $3ccb			jsr 	CopySoftToStack 			; copy that to the stack.
.3d47	a0 00		ldy #$00			ldy 	#0
.3d49	b1 2a		lda ($2a),y			lda 	(temp0),y 					; count to copy in X
.3d4b	aa		tax				tax
.3d4c					_CSCopy:
.3d4c	e0 00		cpx #$00			cpx 	#0 							; finished if 0.
.3d4e	f0 24		beq $3d74			beq 	_CSExit
.3d50	ca		dex				dex
.3d51	c8		iny				iny
.3d52	68		pla				pla 								; check direction
.3d53	48		pha				pha
.3d54	f0 0c		beq $3d62			beq 	_CSUpper
.3d56	b1 2a		lda ($2a),y			lda 	(temp0),y 					; lower$() code
.3d58	c9 41		cmp #$41			cmp 	#"A"
.3d5a	90 12		bcc $3d6e			bcc 	_CSWrite
.3d5c	c9 5b		cmp #$5b			cmp 	#"Z"+1
.3d5e	b0 0e		bcs $3d6e			bcs 	_CSWrite
.3d60	90 0a		bcc $3d6c			bcc 	_CSFlipWrite
.3d62					_CSUpper:
.3d62	b1 2a		lda ($2a),y			lda 	(temp0),y 					; upper$() code
.3d64	c9 61		cmp #$61			cmp 	#"a"
.3d66	90 06		bcc $3d6e			bcc 	_CSWrite
.3d68	c9 7b		cmp #$7b			cmp 	#"z"+1
.3d6a	b0 02		bcs $3d6e			bcs 	_CSWrite
.3d6c					_CSFlipWrite:
.3d6c	49 20		eor #$20			eor 	#"A"^"a" 					; switch case.
.3d6e					_CSWrite:
.3d6e	20 fa 3c	jsr $3cfa			jsr 	WriteSoftString 			; add to soft string.
.3d71	4c 4c 3d	jmp $3d4c			jmp 	_CSCopy
.3d74					_CSExit:
.3d74	68		pla				pla
.3d75	a8		tay				tay
.3d76	68		pla				pla
.3d77	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/functions/substring.asm

.3d78					StringSubstring:
.3d78	48		pha				pha
.3d79	aa		tax				tax 								; access stack.
.3d7a	98		tya				tya
.3d7b	48		pha				pha
.3d7c	20 7c 3c	jsr $3c7c			jsr 	CopyStringTop 				; point temp0 to the string.
.3d7f	a0 00		ldy #$00			ldy 	#0 							; get length.
.3d81	b1 2a		lda ($2a),y			lda 	(temp0),Y
.3d83	85 2c		sta $2c				sta 	temp1
.3d85	b5 99		lda $99,x			lda 	esInt0+1,x 					; get the initial offset
.3d87	c5 2c		cmp $2c				cmp 	temp1 						; return "" if > length.
.3d89	f0 02		beq $3d8d			beq 	_SSBOkay
.3d8b	b0 2a		bcs $3db7			bcs 	_SSBReturnNull
.3d8d					_SSBOkay:
.3d8d	a5 2c		lda $2c				lda 	temp1 						; get the total length +1
.3d8f	18		clc				clc
.3d90	69 01		adc #$01			adc 	#1
.3d92	38		sec				sec
.3d93	f5 99		sbc $99,x			sbc 	esInt0+1,x 					; the anything >= this is bad - max size
.3d95	d5 9a		cmp $9a,x			cmp 	esInt0+2,x  				; check bad >= required
.3d97	90 02		bcc $3d9b			bcc		_SSBTrunc
.3d99	b5 9a		lda $9a,x			lda 	esInt0+2,x
.3d9b					_SSBTrunc:
.3d9b	85 2d		sta $2d				sta 	temp1+1 					; characters to copy.
.3d9d	18		clc				clc
.3d9e	69 01		adc #$01			adc 	#1 							; add 1
.3da0	20 d4 3c	jsr $3cd4			jsr 	AllocateSoftString 			; allocate soft string memory, set pointer.
.3da3	20 cb 3c	jsr $3ccb			jsr 	CopySoftToStack 			; copy that to the stack.
.3da6	b4 99		ldy $99,x			ldy 	esInt0+1,x 					; get initial position of char to copy
.3da8					_SSBCopyLoop:
.3da8	a5 2d		lda $2d				lda 	temp1+1 					; done them all
.3daa	f0 0e		beq $3dba			beq 	_SSBExit
.3dac	c6 2d		dec $2d				dec 	temp1+1
.3dae	b1 2a		lda ($2a),y			lda 	(temp0),y 					; get and write character
.3db0	20 fa 3c	jsr $3cfa			jsr 	WriteSoftString
.3db3	c8		iny				iny
.3db4	4c a8 3d	jmp $3da8			jmp 	_SSBCopyLoop
.3db7					_SSBReturnNull:
.3db7	20 be 3d	jsr $3dbe			jsr 	ReturnNull
.3dba					_SSBExit:
.3dba	68		pla				pla
.3dbb	a8		tay				tay
.3dbc	68		pla				pla
.3dbd	60		rts				rts
.3dbe					ReturnNull:
.3dbe	a9 00		lda #$00			lda 	#0 							; clear null string
.3dc0	8d ce 0a	sta $0ace			sta 	NullString
.3dc3	a9 ce		lda #$ce			lda 	#NullString & $FF 			; set a pointer to it
.3dc5	95 98		sta $98,x			sta 	esInt0,x
.3dc7	a9 0a		lda #$0a			lda 	#NullString >> 8
.3dc9	95 a0		sta $a0,x			sta 	esInt1,x
.3dcb	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/functions/write.asm

.0d0c					srcStrLen:
>0d0c							.fill 	1
.3dcc					StringWrite:
.3dcc	aa		tax				tax
.3dcd	48		pha				pha
.3dce	98		tya				tya
.3dcf	48		pha				pha
.3dd0	20 f7 3d	jsr $3df7			jsr 	CheckOverwriteCurrent
.3dd3	b0 0d		bcs $3de2			bcs		_SWCopyCurrent
.3dd5	20 35 3e	jsr $3e35			jsr 	RequiresConcretion
.3dd8	90 0e		bcc $3de8			bcc 	_SWWriteReference
.3dda	20 98 3e	jsr $3e98			jsr 	CheckSpecialConcretion
.3ddd	b0 09		bcs $3de8			bcs 	_SWWriteReference
.3ddf	20 49 3e	jsr $3e49			jsr 	AllocateHardMemory
.3de2					_SWCopyCurrent:
.3de2	20 7c 3e	jsr $3e7c			jsr 	CopyStringToHardMemory
.3de5	4c f3 3d	jmp $3df3			jmp 	_SWExit
.3de8					_SWWriteReference
.3de8	a0 00		ldy #$00			ldy 	#0
.3dea	a5 2a		lda $2a				lda 	temp0
.3dec	91 2c		sta ($2c),y			sta 	(temp1),y
.3dee	c8		iny				iny
.3def	a5 2b		lda $2b				lda 	temp0+1
.3df1	91 2c		sta ($2c),y			sta 	(temp1),y
.3df3					_SWExit:
.3df3	68		pla				pla
.3df4	a8		tay				tay
.3df5	68		pla				pla
.3df6	60		rts				rts
.3df7					CheckOverwriteCurrent:
.3df7	a0 00		ldy #$00			ldy 	#0 						; get address of string being written to temp0
.3df9	b5 a1		lda $a1,x			lda 	esInt1+1,x
.3dfb	85 2b		sta $2b				sta 	temp0+1
.3dfd	b5 99		lda $99,x			lda 	esInt0+1,x
.3dff	85 2a		sta $2a				sta 	temp0
.3e01	b1 2a		lda ($2a),y			lda 	(temp0),y 				; get length of string being copied and save it.
.3e03	8d 0c 0d	sta $0d0c			sta 	srcStrLen
.3e06	b5 98		lda $98,x			lda 	esInt0,x 				; copy where the final address it being written to temp1.
.3e08	85 2c		sta $2c				sta 	temp1 					; e.g. if it is ax$ then temp1 will point to the ax$
.3e0a	b5 a0		lda $a0,x			lda 	esInt1,x 				; data record + 5
.3e0c	85 2d		sta $2d				sta 	temp1+1
.3e0e	a0 01		ldy #$01			ldy 	#1 						; get the MSB of the address of string currently stored there.
.3e10	b1 2c		lda ($2c),y			lda 	(temp1),y
.3e12	c5 34		cmp $34				cmp 	highMemory+1 			; if < high memory then it cannot be something stored
.3e14	90 1b		bcc $3e31			bcc 	_COCFail 				; in hard memory.
.3e16	a0 00		ldy #$00			ldy 	#0 						; copy target address - 1 into temp2
.3e18	b1 2c		lda ($2c),y			lda 	(temp1),y 				; when allocating hard memory, the overall size is
.3e1a	e9 01		sbc #$01			sbc 	#1 						; in the previous byte.
.3e1c	85 2e		sta $2e				sta 	temp2
.3e1e	c8		iny				iny
.3e1f	b1 2c		lda ($2c),y			lda 	(temp1),y
.3e21	e9 00		sbc #$00			sbc 	#0
.3e23	85 2f		sta $2f				sta 	temp2+1
.3e25	a0 00		ldy #$00			ldy 	#0 						; how large is this physical chunk.
.3e27	b1 2e		lda ($2e),y			lda 	(temp2),y
.3e29	38		sec				sec  							; maximum character capacity.
.3e2a	e9 02		sbc #$02			sbc 	#2
.3e2c	cd 0c 0d	cmp $0d0c			cmp 	srcStrLen 				; if >= the required length
.3e2f	b0 02		bcs $3e33			bcs 	_COCCanReuse
.3e31					_COCFail:
.3e31	18		clc				clc
.3e32	60		rts				rts
.3e33					_COCCanReuse:
.3e33	38		sec				sec
.3e34	60		rts				rts
.3e35					RequiresConcretion:
.3e35	a5 2b		lda $2b				lda 	temp0+1 				; get MSB of address of string to be written
.3e37	c5 34		cmp $34				cmp 	highMemory+1 			; if >= high memory it is concreted
.3e39	b0 0a		bcs $3e45			bcs 	_RCSucceed 				; so it needs concreting again - duplication.
.3e3b	a5 3a		lda $3a				lda 	softMemAlloc+1 			; have we allocated any soft memory yet ?
.3e3d	f0 08		beq $3e47			beq 	_RCFail 				; if not, this cannot be soft memory.
.3e3f	a5 2b		lda $2b				lda 	temp0+1 				; get MSB of address of string to be written
.3e41	c5 3a		cmp $3a				cmp 	softMemAlloc+1 			; if >= soft mem alloc it is either soft
.3e43	90 02		bcc $3e47			bcc 	_RCFail 				; so concreting
.3e45					_RCSucceed:
.3e45	38		sec				sec
.3e46	60		rts				rts
.3e47					_RCFail:
.3e47	18		clc				clc
.3e48	60		rts				rts
.3e49					AllocateHardMemory:
.3e49	98		tya				tya
.3e4a	48		pha				pha
.3e4b	ad 0c 0d	lda $0d0c			lda 	srcStrLen 				; characters in string
.3e4e	69 0a		adc #$0a			adc 	#1+1+8 					; one for hard memory size, one for string size, extra for expansion
.3e50	b0 04		bcs $3e56			bcs 	_AHMSetMax 				; max out that amount.
.3e52	c9 fe		cmp #$fe			cmp 	#MaxStringSize+2
.3e54	90 02		bcc $3e58			bcc 	_AHMIsOkay
.3e56					_AHMSetMax:
.3e56	a9 fe		lda #$fe			lda 	#MaxStringSize+2
.3e58					_AHMIsOkay:
.3e58	48		pha				pha	 							; save size to be allocated
.3e59	49 ff		eor #$ff			eor 	#$FF 					; complement and add to high Memory
.3e5b	38		sec				sec  							; and copy result to TOS as target address.
.3e5c	65 33		adc $33				adc 	highMemory
.3e5e	85 33		sta $33				sta 	highMemory
.3e60	a5 34		lda $34				lda 	highMemory+1
.3e62	69 ff		adc #$ff			adc 	#$FF
.3e64	85 34		sta $34				sta 	highMemory+1
.3e66	a0 00		ldy #$00			ldy 	#0 						; Y = 0
.3e68	68		pla				pla 							; get the total size of the storage block
.3e69	91 33		sta ($33),y			sta 	(highMemory),y 			; and set it
.3e6b	18		clc				clc
.3e6c	a5 33		lda $33				lda		highMemory 				; point the target address to the byte after this.
.3e6e	69 01		adc #$01			adc 	#1
.3e70	91 2c		sta ($2c),y			sta 	(temp1),y
.3e72	a5 34		lda $34				lda 	highMemory+1
.3e74	69 00		adc #$00			adc 	#0
.3e76	c8		iny				iny
.3e77	91 2c		sta ($2c),y			sta 	(temp1),y
.3e79	68		pla				pla
.3e7a	a8		tay				tay
.3e7b	60		rts				rts
.3e7c					CopyStringToHardMemory:
.3e7c	98		tya				tya
.3e7d	48		pha				pha
.3e7e	a0 00		ldy #$00			ldy 	#0 						; copy target address to temp2
.3e80	b1 2c		lda ($2c),y			lda 	(temp1),y
.3e82	85 2e		sta $2e				sta 	temp2
.3e84	c8		iny				iny
.3e85	b1 2c		lda ($2c),y			lda 	(temp1),y
.3e87	85 2f		sta $2f				sta 	temp2+1
.3e89	ac 0c 0d	ldy $0d0c			ldy 	srcStrLen 				; copy this + 1 characters, (length too) hence $FF compare
.3e8c					_CSTHMLoop:
.3e8c	b1 2a		lda ($2a),y			lda 	(temp0),y
.3e8e	91 2e		sta ($2e),y			sta 	(temp2),y
.3e90	88		dey				dey
.3e91	c0 ff		cpy #$ff			cpy 	#$FF 					; this does the +1
.3e93	d0 f7		bne $3e8c			bne 	_CSTHMLoop
.3e95	68		pla				pla
.3e96	a8		tay				tay
.3e97	60		rts				rts
.3e98					CheckSpecialConcretion:
.3e98	ad 0c 0d	lda $0d0c			lda 	srcStrLen 				; check string is null e.g. length = 0
.3e9b	f0 02		beq $3e9f			beq 	_CSCNullString
.3e9d	18		clc				clc
.3e9e	60		rts				rts
.3e9f					_CSCNullString:
.3e9f	a9 00		lda #$00			lda 	#0 						; by always returning this address we don't waste
.3ea1	8d ce 0a	sta $0ace			sta 	NullString		 		; storage on null strings.
.3ea4	a9 ce		lda #$ce			lda 	#(NullString) & $FF
.3ea6	85 2a		sta $2a				sta 	temp0
.3ea8	a9 0a		lda #$0a			lda 	#(NullString) >> 8
.3eaa	85 2b		sta $2b				sta 	1+(temp0)
.3eac	38		sec				sec
.3ead	60		rts				rts

;******  Return to file: string/string.asm

.3eae					stringHandler:
.3eae	7c b1 3e	jmp ($3eb1,x)			jmp 	(stringVectors,x)
.3eb1					stringVectors:
>3eb1	c3 3e					.word _DummyControlHandler ; index 0
>3eb3	11 3c					.word StringChrs           ; index 2
>3eb5	0d 3d					.word StrClone             ; index 4
>3eb7	85 3c					.word StringConcat         ; index 6
>3eb9	20 3c					.word StringNull           ; index 8
>3ebb	3c 3c					.word STRCompare           ; index 10
>3ebd	33 3d					.word CaseString           ; index 12
>3ebf	78 3d					.word StringSubstring      ; index 14
>3ec1	cc 3d					.word StringWrite          ; index 16
.3ec3					_DummyControlHandler:
.3ec3	60		rts			rts

;******  Return to file: basic.asm

.3ec4					section_end_string:
.3ec4					section_start_tokeniser:

;******  Processing file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/detokenise/detokenise.asm

.0d0d					deTokeniseVector:
>0d0d							.fill 	2
.0d0f					lastCharacterClass:
>0d0f							.fill 	1
.0d10					indent:
>0d10							.fill 	1
.3ec4					ListLine:
.3ec4	48		pha				pha								; enter here to list to console. sets the output vector
.3ec5	a9 fc		lda #$fc			lda 	#(deTokenPrint) & $FF
.3ec7	8d 0d 0d	sta $0d0d			sta 	deTokeniseVector
.3eca	a9 3f		lda #$3f			lda 	#(deTokenPrint) >> 8
.3ecc	8d 0e 0d	sta $0d0e			sta 	1+(deTokeniseVector)
.3ecf	68		pla				pla
.3ed0					Detokenise:
.3ed0	18		clc				clc 							; space required for line number.
.3ed1	69 06		adc #$06			adc 	#6
.3ed3	8d 10 0d	sta $0d10			sta 	indent
.3ed6	a9 ff		lda #$ff			lda 	#$FF 					; last thing printed is a dummy value.
.3ed8	8d 0f 0d	sta $0d0f			sta 	lastCharacterClass
.3edb	a2 02		ldx #$02			ldx 	#2
.3edd	a9 00		lda #$00			lda 	#0 						; clear upper two bytes
.3edf	95 a8		sta $a8,x			sta 	esInt2,x
.3ee1	95 b0		sta $b0,x			sta 	esInt3,x
.3ee3	a0 01		ldy #$01			ldy 	#1 						; copy line number to stack,2 (as using stack 0,1 for list range)
.3ee5	b1 28		lda ($28),y			lda 	(codePtr),y
.3ee7	95 98		sta $98,x			sta 	esInt0,x
.3ee9	c8		iny				iny
.3eea	b1 28		lda ($28),y			lda 	(codePtr),y
.3eec	95 a0		sta $a0,x			sta 	esInt1,x
.3eee	a9 84		lda #$84			lda 	#LTYLineNumber
.3ef0	20 d7 3f	jsr $3fd7			jsr 	ListOutputCharacter
.3ef3	a9 0a		lda #$0a			lda 	#10 					; base 10
.3ef5	20 9b 3f	jsr $3f9b			jsr 	DTPrintInteger 			; print as integer.
.3ef8	a0 00		ldy #$00			ldy 	#0 						; get length
.3efa	b1 2a		lda ($2a),y			lda 	(temp0),y 				; into X
.3efc	aa		tax				tax
.3efd					_DTPadOut:
.3efd	a9 20		lda #$20			lda 	#" " 					; pad out to indent.
.3eff	20 d7 3f	jsr $3fd7			jsr 	ListOutputCharacter
.3f02	e8		inx				inx
.3f03	ec 10 0d	cpx $0d10			cpx 	indent
.3f06	d0 f5		bne $3efd			bne 	_DTPadOut
.3f08	a0 03		ldy #$03			ldy 	#3 						; start position.
.3f0a					_DTListLoop:
.3f0a	b1 28		lda ($28),y			lda 	(codePtr),y
.3f0c	c9 85		cmp #$85			cmp 	#TOK_STR 				; Inline string.
.3f0e	f0 5e		beq $3f6e			beq 	_DTIsString
.3f10	c9 84		cmp #$84			cmp 	#TOK_FPC 				; Floating point
.3f12	f0 56		beq $3f6a			beq 	_DTIsFloat
.3f14	c9 c5		cmp #$c5			cmp 	#TKW_AMP 				; & hex marker
.3f16	f0 16		beq $3f2e			beq 	_DTHexConstant
.3f18	c9 80		cmp #$80			cmp 	#TOK_EOL 				; End of Line
.3f1a	d0 06		bne $3f22			bne 	_DTNotEnd
.3f1c	a9 ff		lda #$ff			lda 	#255 					; print CR
.3f1e	20 d7 3f	jsr $3fd7			jsr 	ListOutputCharacter
.3f21	60		rts				rts
.3f22					_DTNotEnd:
.3f22	c9 00		cmp #$00			cmp 	#0
.3f24	30 38		bmi $3f5e			bmi 	_DTIsToken
.3f26	c9 40		cmp #$40			cmp 	#$40
.3f28	90 3a		bcc $3f64			bcc 	_DTIsIdentifier
.3f2a	a9 0a		lda #$0a			lda 	#10 					; this is the base, unsigned decimal
.3f2c	d0 0d		bne $3f3b			bne 	_DTConstant
.3f2e					_DTHexConstant:
.3f2e	a9 26		lda #$26			lda 	#"&"
.3f30	20 d7 3f	jsr $3fd7			jsr 	ListOutputCharacter
.3f33	c8		iny				iny
.3f34	a9 01		lda #$01			lda 	#1 						; switch to spaces so &xxxx is treated like a number.
.3f36	20 18 40	jsr $4018			jsr 	DTSwitchMode
.3f39	a9 10		lda #$10			lda 	#16						; print line unsigned hex
.3f3b					_DTConstant:
.3f3b	48		pha				pha
.3f3c	a9 00		lda #$00			lda 	#0 						; now constant, may need spaces
.3f3e	20 18 40	jsr $4018			jsr 	DTSwitchMode
.3f41	a9 86		lda #$86			lda 	#LTYConstant
.3f43	20 d7 3f	jsr $3fd7			jsr 	ListOutputCharacter
.3f46	a2 02		ldx #$02			ldx 	#2 						; get its value
.3f48	8a		txa				txa
.3f49	a2 10		ldx #$10		ldx	#16
.3f4b	20 f1 3b	jsr $3bf1		jsr	mainHandler
.3f4e	aa		tax				tax
.3f4f	68		pla				pla 							; get base back
.3f50	85 32		sta $32				sta 	tempShort
.3f52	98		tya				tya
.3f53	48		pha				pha
.3f54	a5 32		lda $32				lda 	tempShort 				; print in base A stck level X
.3f56	20 9b 3f	jsr $3f9b			jsr 	DTPrintInteger
.3f59	68		pla				pla
.3f5a	a8		tay				tay
.3f5b	4c 0a 3f	jmp $3f0a			jmp 	_DTListLoop
.3f5e					_DTIsToken:
.3f5e	20 71 40	jsr $4071			jsr 	DTDecodeToken
.3f61	4c 0a 3f	jmp $3f0a			jmp 	_DTListLoop
.3f64					_DTIsIdentifier:
.3f64	20 2a 40	jsr $402a			jsr 	DTIdentifier
.3f67	4c 0a 3f	jmp $3f0a			jmp 	_DTListLoop
.3f6a					_DTIsFloat:
>3f6a	db						.byte 	$DB
.3f6b	4c 6a 3f	jmp $3f6a			jmp 	_DTIsFloat
.3f6e					_DTIsString:
.3f6e	a9 01		lda #$01			lda 	#1 							; now punctuation, may need spaces
.3f70	20 18 40	jsr $4018			jsr 	DTSwitchMode
.3f73	a9 81		lda #$81			lda 	#LTYString
.3f75	20 d7 3f	jsr $3fd7			jsr 	ListOutputCharacter
.3f78	a9 22		lda #$22			lda 	#'"'						; open quote
.3f7a	20 d7 3f	jsr $3fd7			jsr 	ListOutputCharacter
.3f7d	a2 02		ldx #$02			ldx 	#2 							; evaluate string to TOS2.
.3f7f	8a		txa				txa
.3f80	a2 10		ldx #$10		ldx	#16
.3f82	20 f1 3b	jsr $3bf1		jsr	mainHandler
.3f85	aa		tax				tax
.3f86	b5 98		lda $98,x			lda 	esInt0,x 					; copy string address to temp0
.3f88	85 2a		sta $2a				sta 	temp0
.3f8a	b5 a0		lda $a0,x			lda 	esInt1,x
.3f8c	85 2b		sta $2b				sta 	temp0+1
.3f8e	a9 00		lda #$00			lda 	#0 							; don't capitalise.
.3f90	20 ad 3f	jsr $3fad			jsr 	DTPrintLengthPrefix
.3f93	a9 22		lda #$22			lda 	#'"'
.3f95	20 d7 3f	jsr $3fd7			jsr 	ListOutputCharacter
.3f98	4c 0a 3f	jmp $3f0a			jmp 	_DTListLoop

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/detokenise/dtprint.asm

.0d11					tPrintCount:
>0d11							.fill 	1
.3f9b					DTPrintInteger:
.3f9b	48		pha				pha									; save base
.3f9c	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.3f9e	85 2a		sta $2a				sta 	temp0
.3fa0	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.3fa2	85 2b		sta $2b				sta 	1+(temp0)
.3fa4	68		pla				pla
.3fa5	a8		tay				tay
.3fa6	8a		txa				txa
.3fa7	a2 12		ldx #$12		ldx	#18
.3fa9	20 f1 3b	jsr $3bf1		jsr	mainHandler
.3fac	aa		tax				tax 								; then drop through here.
.3fad					DTPrintLengthPrefix:
.3fad	aa		tax				tax 								; A = 0 = don't case convert.
.3fae	98		tya				tya
.3faf	48		pha				pha
.3fb0	a0 00		ldy #$00			ldy 	#0 							; get string length = chars to print.
.3fb2	b1 2a		lda ($2a),y			lda 	(temp0),y
.3fb4	8d 11 0d	sta $0d11			sta 	tPrintCount
.3fb7	f0 1b		beq $3fd4			beq 	_DTPLPExit 					; empty string
.3fb9					_DTPLPLoop:
.3fb9	c8		iny				iny 								; get next.
.3fba	b1 2a		lda ($2a),y			lda 	(temp0),y
.3fbc	29 7f		and #$7f			and 	#$7F
.3fbe	e0 00		cpx #$00			cpx 	#0 							; skip if not case converting
.3fc0	f0 0a		beq $3fcc			beq 	_DTPLPNoCase
.3fc2	c9 41		cmp #$41			cmp 	#"A" 						; if converting UC -> LC
.3fc4	90 06		bcc $3fcc			bcc 	_DTPLPNoCase
.3fc6	c9 5b		cmp #$5b			cmp 	#"Z"+1
.3fc8	b0 02		bcs $3fcc			bcs 	_DTPLPNoCase
.3fca	49 20		eor #$20			eor 	#"A"^"a"
.3fcc					_DTPLPNoCase
.3fcc	20 d7 3f	jsr $3fd7			jsr 	ListOutputCharacter 		; call handler
.3fcf	ce 11 0d	dec $0d11			dec 	tPrintCount 				; do all the characters
.3fd2	d0 e5		bne $3fb9			bne 	_DTPLPLoop
.3fd4					_DTPLPExit:
.3fd4	68		pla				pla
.3fd5	a8		tay				tay
.3fd6	60		rts				rts
.3fd7					ListOutputCharacter:
.3fd7	85 32		sta $32				sta 	tempShort
.3fd9	48		pha				pha
.3fda	8a		txa				txa
.3fdb	48		pha				pha
.3fdc	98		tya				tya
.3fdd	48		pha				pha
.3fde	a5 32		lda $32				lda 	tempShort 					; convert ASCII 6 bit (0-31) to 7 bit.
.3fe0	c9 20		cmp #$20			cmp 	#32
.3fe2	b0 0c		bcs $3ff0			bcs		_LOCHiBit
.3fe4	09 40		ora #$40			ora 	#64 						; conversion
.3fe6	c9 40		cmp #$40			cmp 	#64							; make l/c
.3fe8	f0 06		beq $3ff0			beq 	_LOCHiBit
.3fea	c9 5b		cmp #$5b			cmp 	#65+26
.3fec	b0 02		bcs $3ff0			bcs 	_LOCHiBit
.3fee	69 20		adc #$20			adc 	#32
.3ff0					_LOCHiBit:
.3ff0	20 f9 3f	jsr $3ff9			jsr 	_LOCCallVector				; call o/p handler routine
.3ff3	68		pla				pla
.3ff4	a8		tay				tay
.3ff5	68		pla				pla
.3ff6	aa		tax				tax
.3ff7	68		pla				pla
.3ff8					_LOCExit:
.3ff8	60		rts				rts
.3ff9					_LOCCallVector:
.3ff9	6c 0d 0d	jmp ($0d0d)			jmp 	(deTokeniseVector)
.3ffc					deTokenPrint:
.3ffc	c9 00		cmp #$00			cmp 	#0 							; if bit 7 sets ink colour
.3ffe	30 06		bmi $4006			bmi 	_dtpInk
.4000	a2 16		ldx #$16		ldx	#22
.4002	20 f6 14	jsr $14f6		jsr	deviceHandler
.4005	60		rts				rts
.4006	c9 ff		cmp #$ff	_dtpInk:cmp 	#255 						; e.g. herhe, get ink and set it
.4008	f0 08		beq $4012			beq 	_dtpCR						; except $FF => CRLF
.400a	29 07		and #$07			and 	#7
.400c	a2 08		ldx #$08		ldx	#8
.400e	20 f6 14	jsr $14f6		jsr	deviceHandler
.4011	60		rts				rts
.4012					_dtpCR:
.4012	a2 06		ldx #$06		ldx	#6
.4014	20 f6 14	jsr $14f6		jsr	deviceHandler
.4017	60		rts				rts
.4018					DTSwitchMode:
.4018	cd 0f 0d	cmp $0d0f			cmp 	LastCharacterClass 			; if changed, update character class
.401b	f0 04		beq $4021			beq 	_DTSMNoChange
.401d	8d 0f 0d	sta $0d0f			sta 	LastCharacterClass
.4020					_DTSMExit:
.4020	60		rts				rts
.4021					_DTSMNoChange:
.4021	c9 01		cmp #$01			cmp 	#1 							; if didn't change to punctuation, two identifiers so we
.4023	f0 fb		beq $4020			beq 	_DTSMExit 					; need a space.
.4025	a9 20		lda #$20			lda 	#" "
.4027	4c d7 3f	jmp $3fd7			jmp 	ListOutputCharacter

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/detokenise/identifier.asm

.402a					DTIdentifier:
.402a	a9 00		lda #$00			lda 	#0 							; now text, may need spaces
.402c	20 18 40	jsr $4018			jsr 	DTSwitchMode
.402f	a9 87		lda #$87			lda 	#LTYIdentifier
.4031	20 d7 3f	jsr $3fd7			jsr 	ListOutputCharacter
.4034					_DTILoop:
.4034	b1 28		lda ($28),y			lda 	(codePtr),y 				; output main bit of identifier.
.4036	c9 2d		cmp #$2d			cmp 	#"-"						; make - back to _
.4038	d0 02		bne $403c			bne 	_DTINotUS
.403a	a9 5f		lda #$5f			lda 	#"_"
.403c					_DTINotUS:
.403c	20 d7 3f	jsr $3fd7			jsr 	ListOutputCharacter
.403f	c8		iny				iny
.4040	b1 28		lda ($28),y			lda 	(codePtr),y 				; until end identifier marker.
.4042	c9 3a		cmp #$3a			cmp 	#$3A
.4044	90 ee		bcc $4034			bcc 	_DTILoop
.4046	c8		iny				iny
.4047	c9 3a		cmp #$3a			cmp 	#$3A 						; is it integer non array
.4049	f0 25		beq $4070			beq 	_DTIExit 					; no postfix.
.404b	48		pha				pha
.404c	a9 01		lda #$01			lda  	#1 							; it ends in punctuation
.404e	8d 0f 0d	sta $0d0f			sta 	LastCharacterClass
.4051	a9 82		lda #$82			lda 	#LTYPunctuation
.4053	20 d7 3f	jsr $3fd7			jsr 	ListOutputCharacter
.4056	68		pla				pla
.4057	c9 3b		cmp #$3b			cmp 	#$3B
.4059	f0 10		beq $406b			beq 	_DTIArray
.405b	4a		lsr a				lsr 	a 							; array flag in C
.405c	08		php				php
.405d	49 1e		eor #$1e			eor 	#$3C/2 						; check if $
.405f	f0 02		beq $4063			beq 	_DTIDollar
.4061	a9 07		lda #$07			lda 	#"$"^"#" 					; this if #, 0 if $
.4063					_DTIDollar:
.4063	49 24		eor #$24			eor 	#"$"
.4065	20 d7 3f	jsr $3fd7			jsr 	ListOutputCharacter
.4068	28		plp				plp
.4069	90 05		bcc $4070			bcc 	_DTIExit
.406b					_DTIArray:
.406b	a9 28		lda #$28			lda 	#"("
.406d	20 d7 3f	jsr $3fd7			jsr 	ListOutputCharacter
.4070					_DTIExit:
.4070	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/detokenise/token.asm

.4071					DTDecodeToken:
.4071	a2 00		ldx #$00			ldx 	#0 							; table number to use
.4073	b1 28		lda ($28),y			lda 	(codePtr),y
.4075	c9 84		cmp #$84			cmp 	#$84
.4077	b0 05		bcs $407e			bcs 	_DTNotShift
.4079	29 03		and #$03			and 	#3 							; get the shift 1..3
.407b	0a		asl a				asl 	a 							; put 2 x in X
.407c	aa		tax				tax
.407d	c8		iny				iny
.407e					_DTNotShift:
.407e	bd 80 43	lda $4380,x			lda 	TokenTableAddress,x 		; get the token table to use to decode it.
.4081	85 2a		sta $2a				sta 	temp0 						; point into temp0
.4083	bd 81 43	lda $4381,x			lda 	TokenTableAddress+1,x
.4086	85 2b		sta $2b				sta 	temp0+1
.4088	b1 28		lda ($28),y			lda 	(codePtr),y 				; get the token value.
.408a	c8		iny				iny 								; consume it.
.408b	aa		tax				tax
.408c	98		tya				tya
.408d	48		pha				pha
.408e					_DTFindText:
.408e	e0 86		cpx #$86			cpx 	#$86 						; finished ?
.4090	f0 11		beq $40a3			beq 	_DTFoundText
.4092	ca		dex				dex
.4093	a0 00		ldy #$00			ldy 	#0 							; add length+1 to temp0
.4095	38		sec				sec
.4096	b1 2a		lda ($2a),y			lda 	(temp0),y
.4098	65 2a		adc $2a				adc 	temp0
.409a	85 2a		sta $2a				sta 	temp0
.409c	90 f0		bcc $408e			bcc 	_DTFindText
.409e	e6 2b		inc $2b				inc 	temp0+1
.40a0	4c 8e 40	jmp $408e			jmp 	_DTFindText
.40a3					_DTFoundText:
.40a3	a0 01		ldy #$01			ldy 	#1 							; get first character
.40a5	b1 2a		lda ($2a),y			lda 	(temp0),y
.40a7	29 7f		and #$7f			and 	#$7F 						; will have bit 7 set.
.40a9	c9 41		cmp #$41			cmp 	#"A" 						; check for punctuation.
.40ab	90 11		bcc $40be			bcc 	_DTIsPunctuation
.40ad	c9 5b		cmp #$5b			cmp 	#"Z"+1
.40af	b0 0d		bcs $40be			bcs 	_DTIsPunctuation
.40b1	a9 00		lda #$00			lda 	#0 							; now text, may need spaces
.40b3	20 18 40	jsr $4018			jsr 	DTSwitchMode
.40b6	a9 83		lda #$83			lda 	#LTYKeyword
.40b8	20 d7 3f	jsr $3fd7			jsr 	ListOutputCharacter
.40bb	4c c8 40	jmp $40c8			jmp 	_DTPrint
.40be					_DTIsPunctuation:
.40be	a9 01		lda #$01			lda 	#1 							; now punctuation, may need spaces
.40c0	20 18 40	jsr $4018			jsr 	DTSwitchMode
.40c3	a9 82		lda #$82			lda 	#LTYPunctuation
.40c5	20 d7 3f	jsr $3fd7			jsr 	ListOutputCharacter
.40c8					_DTPrint:
.40c8	a9 01		lda #$01			lda 	#1 							; fix case.
.40ca	20 ad 3f	jsr $3fad			jsr 	DTPrintLengthPrefix 		; print it out.
.40cd	a0 00		ldy #$00			ldy 	#0
.40cf	b1 2a		lda ($2a),y			lda 	(temp0),y
.40d1	a8		tay				tay
.40d2	b1 2a		lda ($2a),y			lda 	(temp0),y
.40d4	29 7f		and #$7f			and 	#$7F 						; will have bit 7 set.
.40d6	c9 41		cmp #$41			cmp 	#"A" 						; check for punctuation.
.40d8	90 04		bcc $40de			bcc 	_DTIsNowPunctuation
.40da	c9 5b		cmp #$5b			cmp 	#"Z"+1
.40dc	90 05		bcc $40e3			bcc 	_DTPExit
.40de					_DTIsNowPunctuation:
.40de	a9 01		lda #$01			lda 	#1
.40e0	8d 0f 0d	sta $0d0f			sta		LastCharacterClass
.40e3					_DTPExit:
.40e3	68		pla				pla
.40e4	a8		tay				tay
.40e5	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/search.asm

.0d12					currentSet:
>0d12							.fill 	1
.40e6					TokenSearch:
.40e6	8a		txa				txa
.40e7	48		pha				pha
.40e8	98		tya				tya
.40e9	48		pha				pha
.40ea	a9 00		lda #$00			lda 	#0
.40ec	8d 12 0d	sta $0d12			sta 	currentSet
.40ef					_TSLoop:
.40ef	ad 12 0d	lda $0d12			lda 	currentSet 					; 2 x currentset in X
.40f2	0a		asl a				asl 	a
.40f3	aa		tax				tax
.40f4	bd 80 43	lda $4380,x			lda 	TokenTableAddress,x 		; set temp0 to the table address
.40f7	85 2a		sta $2a				sta 	temp0
.40f9	bd 81 43	lda $4381,x			lda 	TokenTableAddress+1,x
.40fc	85 2b		sta $2b				sta 	temp0+1
.40fe	20 25 41	jsr $4125			jsr 	TokenSearchOne 				; search one table
.4101	b0 0d		bcs $4110			bcs 	_TSFound 					; found a token.
.4103	ee 12 0d	inc $0d12			inc 	currentSet 					; next set
.4106	ad 12 0d	lda $0d12			lda 	currentSet
.4109	c9 04		cmp #$04			cmp 	#4
.410b	d0 e2		bne $40ef			bne 	_TSLoop 					; back if not done all four.
.410d	18		clc				clc 								; clear carry and exit
.410e	90 10		bcc $4120			bcc 	_TSExit
.4110					_TSFound:
.4110	48		pha				pha 								; save token
.4111	ad 12 0d	lda $0d12			lda 	currentSet					; if set zero no shift
.4114	f0 05		beq $411b			beq 	_TSNoShift
.4116	09 80		ora #$80			ora 	#$80 						; Write as $81-$83
.4118	20 d6 41	jsr $41d6			jsr 	TokenWrite
.411b					_TSNoShift:
.411b	68		pla				pla 								; get token back
.411c	20 d6 41	jsr $41d6			jsr 	TokenWrite 					; write it
.411f	38		sec				sec 								; carry set indicating success
.4120					_TSExit:
.4120	68		pla				pla
.4121	a8		tay				tay
.4122	68		pla				pla
.4123	aa		tax				tax
.4124	60		rts				rts
.4125					TokenSearchOne:
.4125	a2 86		ldx #$86			ldx 	#$86 						; current token being tested.
.4127					_TSOLoop:
.4127	a0 00		ldy #$00			ldy 	#0
.4129	b1 2a		lda ($2a),y			lda 	(temp0),y 					; get length of token
.412b	f0 26		beq $4153			beq 	_TSOFail 					; if zero, end of table
.412d	cd cf 0a	cmp $0acf			cmp 	convertBuffer 				; length is the same, compare the text matches.
.4130	f0 11		beq $4143			beq 	_TSOCheckText
.4132					_TSONext:
.4132	e8		inx				inx 								; bump token
.4133	a0 00		ldy #$00			ldy 	#0							; get length
.4135	b1 2a		lda ($2a),y			lda 	(temp0),y
.4137	38		sec				sec
.4138	65 2a		adc $2a				adc 	temp0 						; add to temp0 + 1
.413a	85 2a		sta $2a				sta 	temp0
.413c	90 e9		bcc $4127			bcc 	_TSOLoop
.413e	e6 2b		inc $2b				inc 	temp0+1
.4140	4c 27 41	jmp $4127			jmp 	_TSOLoop
.4143					_TSOCheckText:
.4143	a8		tay				tay 								; compare length downto 1.
.4144					_TSOCheckLoop:
.4144	b1 2a		lda ($2a),y			lda 	(temp0),y 					; use EOR to compare
.4146	59 cf 0a	eor $0acf,y			eor 	convertBuffer,y
.4149	29 7f		and #$7f			and 	#$7F 						; ignore bit 7
.414b	d0 e5		bne $4132			bne 	_TSONext 					; different goto next.
.414d	88		dey				dey 								; do all
.414e	d0 f4		bne $4144			bne 	_TSOCheckLoop
.4150	8a		txa				txa 								; return token in A and carry set
.4151	38		sec				sec
.4152	60		rts				rts
.4153					_TSOFail:
.4153	18		clc				clc
.4154	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/test.asm

.4155					TokTest:
.4155	a2 ff		ldx #$ff				ldx 	#$FF
.4157	9a		txs					txs
.4158	a9 75		lda #$75			lda 	#(TokenText1) & $FF
.415a	85 28		sta $28				sta 	codePtr
.415c	a9 41		lda #$41			lda 	#(TokenText1) >> 8
.415e	85 29		sta $29				sta 	1+(codePtr)
.4160	20 75 41	jsr $4175				jsr 	Tokenise
.4163	a2 00		ldx #$00	TokStop:	ldx 	#0 					; compare vs precalculated result
.4165	bd 75 41	lda $4175,x	_TokCheck:	lda 	TokenBytes1,x
.4168	dd 16 0d	cmp $0d16,x				cmp 	tokenBuffer,x
.416b	d0 fe		bne $416b	_TokFail:	bne 	_TokFail	 		; error.
.416d	e8		inx					inx
.416e	c9 80		cmp #$80				cmp 	#$80
.4170	d0 f3		bne $4165				bne 	_TokCheck
.4172	4c ff ff	jmp $ffff				jmp 	$FFFF 				; successfully tokenised then quit.

;******  Processing file: tokeniser/tokenise/../../generated/toktest.inc

.4175					TokenText1:
.4175					TokenBytes1:

;******  Return to file: tokeniser/tokenise/test.asm


;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokenise.asm

.0d13					tokenHeader:
>0d13							.fill 	3
.0d16					tokenBuffer:
>0d16							.fill 	256
.0e16					tokenBufferIndex:
>0e16							.fill 	1
.4175					Tokenise:
.4175	20 ef 41	jsr $41ef			jsr 	TokeniseMakeASCIIZ 			; convert to ASCIIZ string.
.4178					TokeniseASCIIZ:
.4178	20 00 42	jsr $4200			jsr 	TokeniseFixCase 			; remove controls and lower case outside quotes.
.417b	a9 00		lda #$00			lda 	#0 							; reset the token buffer index
.417d	8d 16 0e	sta $0e16			sta 	tokenBufferIndex
.4180	a8		tay				tay 								; start pointer
.4181	a9 80		lda #$80			lda 	#$80 						; empty token buffer ($80 ends it)
.4183	8d 16 0d	sta $0d16			sta 	tokenBuffer
.4186					_TokLoop:
.4186	b1 28		lda ($28),y			lda 	(codePtr),y 				; get next character
.4188	f0 46		beq $41d0			beq 	_TokExit 					; if zero, then exit.
.418a	c8		iny				iny 								; skip over spaces.
.418b	c9 20		cmp #$20			cmp 	#" "
.418d	f0 f7		beq $4186			beq 	_TokLoop
.418f	88		dey				dey 								; point back to character.
.4190	c9 26		cmp #$26			cmp 	#"&"						; Hexadecimal constant.
.4192	f0 18		beq $41ac			beq 	_TokHexConst
.4194	c9 22		cmp #$22			cmp 	#'"'						; Quoted String
.4196	f0 23		beq $41bb			beq 	_TokQString
.4198	c9 5b		cmp #$5b			cmp 	#"Z"+1 						; > 'Z' is punctuation
.419a	b0 26		bcs $41c2			bcs 	_TokPunctuation
.419c	c9 41		cmp #$41			cmp 	#"A" 						; A..Z identifier
.419e	b0 29		bcs $41c9			bcs 	_TokIdentifier
.41a0	c9 3a		cmp #$3a			cmp 	#"9"+1
.41a2	b0 1e		bcs $41c2			bcs 	_TokPunctuation 			; between 9 and A exclusive, punctuation
.41a4	c9 30		cmp #$30			cmp 	#"0"
.41a6	90 1a		bcc $41c2			bcc 	_TokPunctuation 			; < 0, punctuation.
.41a8	a9 0a		lda #$0a			lda 	#10  						; 0..9 constant in base 10.
.41aa	d0 08		bne $41b4			bne 	_TokConst
.41ac					_TokHexConst:
.41ac	c8		iny				iny									; consume token.
.41ad	a9 c5		lda #$c5			lda 	#TKW_AMP 					; Write ampersand token out
.41af	20 d6 41	jsr $41d6			jsr 	TokenWrite
.41b2	a9 10		lda #$10			lda 	#16
.41b4					_TokConst:
.41b4	20 be 42	jsr $42be			jsr 	TokeniseInteger
.41b7	b0 cd		bcs $4186			bcs 	_TokLoop
.41b9	90 18		bcc $41d3			bcc 	_TokFail
.41bb					_TokQString:
.41bb	20 54 43	jsr $4354			jsr 	TokeniseString
.41be	b0 c6		bcs $4186			bcs 	_TokLoop
.41c0	90 11		bcc $41d3			bcc 	_TokFail
.41c2					_TokPunctuation:
.41c2	20 33 43	jsr $4333			jsr 	TokenisePunctuation
.41c5	b0 bf		bcs $4186			bcs 	_TokLoop
.41c7	90 0a		bcc $41d3			bcc 	_TokFail
.41c9					_TokIdentifier:
.41c9	20 2f 42	jsr $422f			jsr 	TokeniseIdentifier
.41cc	b0 b8		bcs $4186			bcs 	_TokLoop
.41ce	90 03		bcc $41d3			bcc 	_TokFail
.41d0					_TokExit:
.41d0	a9 01		lda #$01			lda 	#1
.41d2	60		rts				rts
.41d3					_TokFail:
.41d3	a9 00		lda #$00			lda 	#0
.41d5	60		rts				rts
.41d6					TokenWrite:
.41d6	85 32		sta $32				sta 	tempShort 					; save XA
.41d8	48		pha				pha
.41d9	8a		txa				txa
.41da	48		pha				pha
.41db	a5 32		lda $32				lda 	tempShort
.41dd	ae 16 0e	ldx $0e16			ldx 	tokenBufferIndex 			; geet index
.41e0	9d 16 0d	sta $0d16,x			sta 	tokenBuffer,x 				; write byte to buffer
.41e3	a9 80		lda #$80			lda 	#TOK_EOL 					; pre-emptively write EOL marker after
.41e5	9d 17 0d	sta $0d17,x			sta 	tokenBuffer+1,x
.41e8	ee 16 0e	inc $0e16			inc 	tokenBufferIndex 			; bump index
.41eb	68		pla				pla
.41ec	aa		tax				tax
.41ed	68		pla				pla
.41ee	60		rts				rts
.41ef					TokeniseMakeASCIIZ:
.41ef	a0 00		ldy #$00			ldy 	#0							; get length of string.
.41f1	b1 28		lda ($28),y			lda 	(codePtr),y
.41f3	a8		tay				tay
.41f4	c8		iny				iny 								; +1, the NULL goes here.
.41f5	a9 00		lda #$00			lda 	#0
.41f7	91 28		sta ($28),y			sta 	(codePtr),y 				; write the trailing NULL.
.41f9	e6 28		inc $28				inc 	codePtr 					; bump the pointer.
.41fb	d0 02		bne $41ff			bne 	_TMKAExit
.41fd	e6 29		inc $29				inc 	codePtr+1
.41ff					_TMKAExit:
.41ff	60		rts				rts
.4200					TokeniseFixCase:
.4200	a0 00		ldy #$00			ldy 	#0 							; position in buffer.
.4202	a2 01		ldx #$01			ldx 	#1 							; bit 0 of this is 'in quotes'
.4204					_TFCFlipQ:
.4204	8a		txa				txa
.4205	49 01		eor #$01			eor 	#1
.4207	aa		tax				tax
.4208					_TFCLoop:
.4208	b1 28		lda ($28),y			lda 	(codePtr),y 				; get character
.420a	f0 22		beq $422e			beq 	_TFCExit 					; if zero exit.
.420c	c9 20		cmp #$20			cmp 	#32 						; if control
.420e	90 1a		bcc $422a			bcc 	_TFCControl
.4210	c8		iny				iny 								; preconsume
.4211	c9 22		cmp #$22			cmp 	#'"'
.4213	f0 ef		beq $4204			beq 	_TFCFlipQ
.4215	c9 61		cmp #$61			cmp 	#"a"						; check if L/C
.4217	90 ef		bcc $4208			bcc 	_TFCLoop
.4219	c9 7b		cmp #$7b			cmp 	#"z"+1
.421b	b0 eb		bcs $4208			bcs 	_TFCLoop
.421d	e0 00		cpx #$00			cpx 	#0 							; in quotes, if so, leave alone.
.421f	d0 e7		bne $4208			bne 	_TFCLoop
.4221	88		dey				dey
.4222	49 20		eor #$20			eor 	#"A"^"a"					; make U/C
.4224					_TFCWrite:
.4224	91 28		sta ($28),y			sta 	(codePtr),y
.4226	c8		iny				iny
.4227	4c 08 42	jmp $4208			jmp 	_TFCLoop
.422a					_TFCControl:
.422a	a9 20		lda #$20			lda 	#" "
.422c	d0 f6		bne $4224			bne 	_TFCWrite
.422e					_TFCExit:
.422e	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokident.asm

.422f					TokeniseIdentifier:
.422f	a2 00		ldx #$00			ldx 	#0
.4231					_TICopyID:
.4231	b1 28		lda ($28),y			lda 	(codePtr),y					; get characters
.4233	c9 5f		cmp #$5f			cmp 	#"_" 						; underscore converted to minus internally.
.4235	f0 16		beq $424d			beq 	_TICopyUnderscore
.4237	c9 2e		cmp #$2e			cmp 	#"."
.4239	f0 14		beq $424f			beq 	_TICopyIn
.423b	c9 30		cmp #$30			cmp 	#"0"
.423d	90 1b		bcc $425a			bcc 	_TIEndCopy
.423f	c9 3a		cmp #$3a			cmp 	#"9"+1
.4241	90 0c		bcc $424f			bcc 	_TICopyIn
.4243	c9 41		cmp #$41			cmp 	#"A"
.4245	90 13		bcc $425a			bcc 	_TIEndCopy
.4247	c9 5b		cmp #$5b			cmp 	#"Z"+1
.4249	b0 0f		bcs $425a			bcs		_TIEndCopy
.424b	90 02		bcc $424f			bcc 	_TICopyIn
.424d					_TICopyUnderScore:
.424d	a9 2d		lda #$2d			lda 	#"-"						; _ is mapped to -
.424f					_TICopyIn:
.424f	e8		inx				inx 								; write into buffer in 7 bit ASCII form
.4250	9d cf 0a	sta $0acf,x			sta 	convertBuffer,x
.4253	8e cf 0a	stx $0acf			stx 	convertBuffer
.4256	c8		iny				iny 								; next character
.4257	4c 31 42	jmp $4231			jmp 	_TICopyID 					; loop round
.425a					_TIEndCopy:
.425a	a9 24		lda #$24			lda 	#"$"
.425c	20 b1 42	jsr $42b1			jsr 	TIDCheckCopy
.425f	a9 23		lda #$23			lda 	#"#"
.4261	20 b1 42	jsr $42b1			jsr 	TIDCheckCopy
.4264	a9 28		lda #$28			lda 	#"("
.4266	20 b1 42	jsr $42b1			jsr 	TIDCheckCopy
.4269	20 e6 40	jsr $40e6			jsr 	TokenSearch 				; is it a token
.426c	b0 41		bcs $42af			bcs 	_TIExit 					; if so, then exit.
.426e	98		tya				tya
.426f	48		pha				pha
.4270	a0 3a		ldy #$3a			ldy 	#$3A 						; default type.
.4272	ae cf 0a	ldx $0acf			ldx 	convertBuffer 				; is last character (
.4275	bd cf 0a	lda $0acf,x			lda 	convertBuffer,x
.4278	c9 28		cmp #$28			cmp 	#"("
.427a	d0 02		bne $427e			bne 	_TINotArray
.427c	ca		dex				dex 								; yes, remove it and convert to array.
.427d	c8		iny				iny
.427e					_TINotArray:
.427e	bd cf 0a	lda $0acf,x			lda 	convertBuffer,x 			; check for $
.4281	c9 24		cmp #$24			cmp 	#"$"
.4283	d0 03		bne $4288			bne 	_TINotString
.4285	ca		dex				dex
.4286	c8		iny				iny
.4287	c8		iny				iny
.4288					_TINotString:
.4288	bd cf 0a	lda $0acf,x			lda 	convertBuffer,x 			; check for #
.428b	c9 23		cmp #$23			cmp 	#"#"
.428d	d0 05		bne $4294			bne 	_TINotFloat
.428f	ca		dex				dex
.4290	c8		iny				iny
.4291	c8		iny				iny
.4292	c8		iny				iny
.4293	c8		iny				iny
.4294					_TINotFloat:
.4294	e8		inx				inx 								; write end marker for identifier.
.4295	98		tya				tya
.4296	9d cf 0a	sta $0acf,x			sta 	convertBuffer,x
.4299	8e cf 0a	stx $0acf			stx 	convertBuffer 				; update length.
.429c	a2 01		ldx #$01			ldx 	#1
.429e					_TIOutput:
.429e	bd cf 0a	lda $0acf,x			lda 	convertBuffer,x
.42a1	29 3f		and #$3f			and 	#$3F
.42a3	48		pha				pha
.42a4	20 d6 41	jsr $41d6			jsr 	TokenWrite
.42a7	e8		inx				inx
.42a8	68		pla				pla
.42a9	c9 3a		cmp #$3a			cmp 	#$3A
.42ab	90 f1		bcc $429e			bcc 	_TIOutput
.42ad	68		pla				pla
.42ae	a8		tay				tay
.42af					_TIExit:
.42af	38		sec				sec 								; this can't fail.
.42b0	60		rts				rts
.42b1					TIDCheckCopy:
.42b1	d1 28		cmp ($28),y			cmp 	(codePtr),y
.42b3	d0 08		bne $42bd			bne 	_TIDCCExit
.42b5	e8		inx				inx
.42b6	9d cf 0a	sta $0acf,x			sta 	convertBuffer,x
.42b9	8e cf 0a	stx $0acf			stx 	convertBuffer
.42bc	c8		iny				iny
.42bd					_TIDCCExit:
.42bd	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokinteger.asm

.42be					TokeniseInteger:
.42be	85 2c		sta $2c				sta 	temp1 						; save base
.42c0	a2 00		ldx #$00			ldx 	#0							; count of chars so far
.42c2	8e cf 0a	stx $0acf			stx 	convertBuffer
.42c5					_TIGetChars:
.42c5	b1 28		lda ($28),y			lda 	(codePtr),y 				; check character is numeric
.42c7	c9 30		cmp #$30			cmp 	#"0"
.42c9	90 1f		bcc $42ea			bcc 	_TIEndGet
.42cb	c9 3a		cmp #$3a			cmp 	#"9"+1
.42cd	90 10		bcc $42df			bcc 	_TIHaveChar
.42cf	a5 2c		lda $2c				lda 	temp1 						; fail if not hex mode
.42d1	c9 0a		cmp #$0a			cmp 	#10
.42d3	f0 15		beq $42ea			beq 	_TIEndGet
.42d5	b1 28		lda ($28),y			lda 	(codePtr),y 				; check legitimate hex.
.42d7	c9 41		cmp #$41			cmp 	#"A"
.42d9	90 0f		bcc $42ea			bcc 	_TIEndGet
.42db	c9 5b		cmp #$5b			cmp 	#"Z"+1
.42dd	b0 0b		bcs $42ea			bcs 	_TIEndGet
.42df					_TIHaveChar:
.42df	e8		inx				inx 								; write into buffer.
.42e0	8e cf 0a	stx $0acf			stx 	convertBuffer
.42e3	9d cf 0a	sta $0acf,x			sta 	convertBuffer,x
.42e6	c8		iny				iny 								; next char
.42e7	4c c5 42	jmp $42c5			jmp 	_TIGetChars
.42ea					_TIEndGet:
.42ea	e0 00		cpx #$00			cpx 	#0 							; no char acquired.
.42ec	f0 1c		beq $430a			beq 	_TIFail
.42ee	98		tya				tya
.42ef	48		pha				pha
.42f0	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.42f2	85 2a		sta $2a				sta 	temp0
.42f4	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.42f6	85 2b		sta $2b				sta 	1+(temp0)
.42f8	a9 00		lda #$00			lda 	#0 							; stack level 0
.42fa	a4 2c		ldy $2c				ldy 	temp1 						; base Y
.42fc	a2 1a		ldx #$1a		ldx	#26
.42fe	20 f1 3b	jsr $3bf1		jsr	mainHandler
.4301	68		pla				pla
.4302	a8		tay				tay
.4303	90 05		bcc $430a			bcc 	_TIFail 					; didn't convert.
.4305	20 0c 43	jsr $430c			jsr 	TIRecursiveOut 				; recursive output ?
.4308	38		sec				sec
.4309	60		rts				rts
.430a					_TIFail:
.430a	18		clc				clc
.430b	60		rts				rts
.430c					TIRecursiveOut:
.430c	a5 98		lda $98				lda 	esInt0 						; get value to output after possible recursion
.430e	29 3f		and #$3f			and 	#$3F
.4310	09 40		ora #$40			ora 	#$40
.4312	48		pha				pha
.4313	a5 98		lda $98				lda 	esInt0 						; are we recursing ?
.4315	29 c0		and #$c0			and 	#$C0
.4317	05 a0		ora $a0				ora 	esInt1
.4319	05 a8		ora $a8				ora 	esInt2
.431b	05 b0		ora $b0				ora 	esInt3
.431d	f0 10		beq $432f			beq 	_TIRONoRecursion
.431f	a2 06		ldx #$06			ldx 	#6 							; shift right x 6
.4321					_TIROShift:
.4321	46 b0		lsr $b0				lsr 	esInt3
.4323	66 a8		ror $a8				ror 	esInt2
.4325	66 a0		ror $a0				ror 	esInt1
.4327	66 98		ror $98				ror 	esInt0
.4329	ca		dex				dex
.432a	d0 f5		bne $4321			bne 	_TIROShift
.432c	20 0c 43	jsr $430c			jsr 	TIRecursiveOut 				; call recursively
.432f					_TIRONoRecursion:
.432f	68		pla				pla 								; pull the old bit.
.4330	4c d6 41	jmp $41d6			jmp 	TokenWrite

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokpunct.asm

.4333					TokenisePunctuation:
.4333	b1 28		lda ($28),y			lda	 	(codePtr),y 				; copy next 2 chars into convertBuffer
.4335	8d d0 0a	sta $0ad0			sta 	convertBuffer+1
.4338	c8		iny				iny
.4339	b1 28		lda ($28),y			lda 	(codePtr),y
.433b	8d d1 0a	sta $0ad1			sta 	convertBuffer+2
.433e	c8		iny				iny 								; Y is +2
.433f	a9 02		lda #$02			lda 	#2 							; 2 character string.
.4341	8d cf 0a	sta $0acf			sta 	convertBuffer
.4344	20 e6 40	jsr $40e6			jsr 	TokenSearch 				; search for that token.
.4347	b0 0a		bcs $4353			bcs 	_TIFound
.4349	ce cf 0a	dec $0acf			dec 	convertBuffer 				; make it a 1 character string
.434c	88		dey				dey 								; Y is now +1
.434d	20 e6 40	jsr $40e6			jsr 	TokenSearch 				; search for that token.
.4350	b0 01		bcs $4353			bcs 	_TIFound
.4352	88		dey				dey 								; Y is now +0, carry clear indicating failure.
.4353					_TIFound:
.4353	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokstring.asm

.4354					TokeniseString:
.4354	c8		iny				iny 								; skip opening quote
.4355	a2 ff		ldx #$ff			ldx 	#255 						; count length of string.
.4357	84 2a		sty $2a				sty 	temp0 						; save start.
.4359					_TSGetLength:
.4359	b1 28		lda ($28),y			lda 	(codePtr),y 				; get next
.435b	f0 21		beq $437e			beq 	_TSFail						; end of line, fail
.435d	c8		iny				iny
.435e	e8		inx				inx
.435f	c9 22		cmp #$22			cmp 	#'"' 						; until end quote found.
.4361	d0 f6		bne $4359			bne 	_TSGetLength
.4363	a9 85		lda #$85			lda 	#TOK_STR 					; write string token out
.4365	20 d6 41	jsr $41d6			jsr 	TokenWrite
.4368	8a		txa				txa 								; output length
.4369	20 d6 41	jsr $41d6			jsr 	TokenWrite
.436c	a4 2a		ldy $2a				ldy 	temp0 						; get original position
.436e	e0 00		cpx #$00			cpx 	#0 							; check ended
.4370	f0 09		beq $437b			beq 	_TSExit
.4372					_TSOutput:
.4372	b1 28		lda ($28),y			lda 	(codePtr),y					; output character
.4374	20 d6 41	jsr $41d6			jsr 	TokenWrite
.4377	c8		iny				iny
.4378	ca		dex				dex
.4379	d0 f7		bne $4372			bne 	_TSOutput
.437b					_TSExit:
.437b	c8		iny				iny 								; skip ending quote
.437c	38		sec				sec 								; return CS.
.437d	60		rts				rts
.437e					_TSFail:
.437e	18		clc				clc
.437f	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokentext.asm

.4380					TokenTableAddress:
>4380	88 43						.word 	Group0Text
>4382	56 45						.word 	Group1Text
>4384	a3 46						.word 	Group2Text
>4386	ed 46						.word 	Group3Text

;******  Processing file: tokeniser/../generated/tokentext0.inc

.4388					Group0Text:
>4388	03 41 4e c4				.byte $03,$41,$4e,$c4                  ; $86 and
>438c	02 4f d2				.byte $02,$4f,$d2                      ; $87 or
>438f	03 58 4f d2				.byte $03,$58,$4f,$d2                  ; $88 xor
>4393	02 3e bd				.byte $02,$3e,$bd                      ; $89 >=
>4396	02 3c bd				.byte $02,$3c,$bd                      ; $8a <=
>4399	01 be					.byte $01,$be                          ; $8b >
>439b	01 bc					.byte $01,$bc                          ; $8c <
>439d	01 bd					.byte $01,$bd                          ; $8d =
>439f	02 3c be				.byte $02,$3c,$be                      ; $8e <>
>43a2	01 ab					.byte $01,$ab                          ; $8f +
>43a4	01 ad					.byte $01,$ad                          ; $90 -
>43a6	02 3e be				.byte $02,$3e,$be                      ; $91 >>
>43a9	02 3c bc				.byte $02,$3c,$bc                      ; $92 <<
>43ac	01 aa					.byte $01,$aa                          ; $93 *
>43ae	01 af					.byte $01,$af                          ; $94 /
>43b0	03 4d 4f c4				.byte $03,$4d,$4f,$c4                  ; $95 mod
>43b4	01 de					.byte $01,$de                          ; $96 ^
>43b6	01 a1					.byte $01,$a1                          ; $97 !
>43b8	01 bf					.byte $01,$bf                          ; $98 ?
>43ba	06 52 45 50 45 41 d4			.byte $06,$52,$45,$50,$45,$41,$d4      ; $99 repeat
>43c1	05 57 48 49 4c c5			.byte $05,$57,$48,$49,$4c,$c5          ; $9a while
>43c7	03 46 4f d2				.byte $03,$46,$4f,$d2                  ; $9b for
>43cb	02 49 c6				.byte $02,$49,$c6                      ; $9c if
>43ce	07 44 45 46 50 52 4f c3			.byte $07,$44,$45,$46,$50,$52,$4f,$c3  ; $9d defproc
>43d6	05 55 4e 54 49 cc			.byte $05,$55,$4e,$54,$49,$cc          ; $9e until
>43dc	04 57 45 4e c4				.byte $04,$57,$45,$4e,$c4              ; $9f wend
>43e1	04 4e 45 58 d4				.byte $04,$4e,$45,$58,$d4              ; $a0 next
>43e6	04 54 48 45 ce				.byte $04,$54,$48,$45,$ce              ; $a1 then
>43eb	05 45 4e 44 49 c6			.byte $05,$45,$4e,$44,$49,$c6          ; $a2 endif
>43f1	07 45 4e 44 50 52 4f c3			.byte $07,$45,$4e,$44,$50,$52,$4f,$c3  ; $a3 endproc
>43f9	01 a8					.byte $01,$a8                          ; $a4 (
>43fb	04 4c 45 4e a8				.byte $04,$4c,$45,$4e,$a8              ; $a5 len(
>4400	04 53 47 4e a8				.byte $04,$53,$47,$4e,$a8              ; $a6 sgn(
>4405	04 41 42 53 a8				.byte $04,$41,$42,$53,$a8              ; $a7 abs(
>440a	07 52 41 4e 44 4f 4d a8			.byte $07,$52,$41,$4e,$44,$4f,$4d,$a8  ; $a8 random(
>4412	04 50 41 47 c5				.byte $04,$50,$41,$47,$c5              ; $a9 page
>4417	04 54 52 55 c5				.byte $04,$54,$52,$55,$c5              ; $aa true
>441c	05 46 41 4c 53 c5			.byte $05,$46,$41,$4c,$53,$c5          ; $ab false
>4422	04 4d 49 4e a8				.byte $04,$4d,$49,$4e,$a8              ; $ac min(
>4427	04 4d 41 58 a8				.byte $04,$4d,$41,$58,$a8              ; $ad max(
>442c	04 53 59 53 a8				.byte $04,$53,$59,$53,$a8              ; $ae sys(
>4431	06 54 49 4d 45 52 a8			.byte $06,$54,$49,$4d,$45,$52,$a8      ; $af timer(
>4438	06 45 56 45 4e 54 a8			.byte $06,$45,$56,$45,$4e,$54,$a8      ; $b0 event(
>443f	04 47 45 54 a8				.byte $04,$47,$45,$54,$a8              ; $b1 get(
>4444	06 49 4e 4b 45 59 a8			.byte $06,$49,$4e,$4b,$45,$59,$a8      ; $b2 inkey(
>444b	06 41 4c 4c 4f 43 a8			.byte $06,$41,$4c,$4c,$4f,$43,$a8      ; $b3 alloc(
>4452	05 43 48 52 24 a8			.byte $05,$43,$48,$52,$24,$a8          ; $b4 chr$(
>4458	06 4c 45 46 54 24 a8			.byte $06,$4c,$45,$46,$54,$24,$a8      ; $b5 left$(
>445f	05 4d 49 44 24 a8			.byte $05,$4d,$49,$44,$24,$a8          ; $b6 mid$(
>4465	07 52 49 47 48 54 24 a8			.byte $07,$52,$49,$47,$48,$54,$24,$a8  ; $b7 right$(
>446d	05 53 54 52 24 a8			.byte $05,$53,$54,$52,$24,$a8          ; $b8 str$(
>4473	04 56 41 4c a8				.byte $04,$56,$41,$4c,$a8              ; $b9 val(
>4478	05 50 45 45 4b a8			.byte $05,$50,$45,$45,$4b,$a8          ; $ba peek(
>447e	05 44 45 45 4b a8			.byte $05,$44,$45,$45,$4b,$a8          ; $bb deek(
>4484	05 4c 45 45 4b a8			.byte $05,$4c,$45,$45,$4b,$a8          ; $bc leek(
>448a	04 41 53 43 a8				.byte $04,$41,$53,$43,$a8              ; $bd asc(
>448f	04 49 4e 54 a8				.byte $04,$49,$4e,$54,$a8              ; $be int(
>4494	06 46 4c 4f 41 54 a8			.byte $06,$46,$4c,$4f,$41,$54,$a8      ; $bf float(
>449b	06 49 53 56 41 4c a8			.byte $06,$49,$53,$56,$41,$4c,$a8      ; $c0 isval(
>44a2	07 55 50 50 45 52 24 a8			.byte $07,$55,$50,$50,$45,$52,$24,$a8  ; $c1 upper$(
>44aa	07 4c 4f 57 45 52 24 a8			.byte $07,$4c,$4f,$57,$45,$52,$24,$a8  ; $c2 lower$(
>44b2	01 c0					.byte $01,$c0                          ; $c3 @
>44b4	01 fe					.byte $01,$fe                          ; $c4 ~
>44b6	01 a6					.byte $01,$a6                          ; $c5 &
>44b8	05 47 45 54 24 a8			.byte $05,$47,$45,$54,$24,$a8          ; $c6 get$(
>44be	07 49 4e 4b 45 59 24 a8			.byte $07,$49,$4e,$4b,$45,$59,$24,$a8  ; $c7 inkey$(
>44c6	03 4d 45 cd				.byte $03,$4d,$45,$cd                  ; $c8 mem
>44ca	01 a9					.byte $01,$a9                          ; $c9 )
>44cc	01 ba					.byte $01,$ba                          ; $ca :
>44ce	01 ac					.byte $01,$ac                          ; $cb ,
>44d0	01 bb					.byte $01,$bb                          ; $cc ;
>44d2	01 a7					.byte $01,$a7                          ; $cd '
>44d4	02 54 cf				.byte $02,$54,$cf                      ; $ce to
>44d7	04 53 54 45 d0				.byte $04,$53,$54,$45,$d0              ; $cf step
>44dc	04 50 52 4f c3				.byte $04,$50,$52,$4f,$c3              ; $d0 proc
>44e1	05 4c 4f 43 41 cc			.byte $05,$4c,$4f,$43,$41,$cc          ; $d1 local
>44e7	03 44 49 cd				.byte $03,$44,$49,$cd                  ; $d2 dim
>44eb	03 52 45 cd				.byte $03,$52,$45,$cd                  ; $d3 rem
>44ef	03 4c 45 d4				.byte $03,$4c,$45,$d4                  ; $d4 let
>44f3	05 49 4e 50 55 d4			.byte $05,$49,$4e,$50,$55,$d4          ; $d5 input
>44f9	04 45 4c 53 c5				.byte $04,$45,$4c,$53,$c5              ; $d6 else
>44fe	03 56 44 d5				.byte $03,$56,$44,$d5                  ; $d7 vdu
>4502	05 50 52 49 4e d4			.byte $05,$50,$52,$49,$4e,$d4          ; $d8 print
>4508	04 44 41 54 c1				.byte $04,$44,$41,$54,$c1              ; $d9 data
>450d	05 49 4d 41 47 c5			.byte $05,$49,$4d,$41,$47,$c5          ; $da image
>4513	02 41 d4				.byte $02,$41,$d4                      ; $db at
>4516	04 46 4c 49 d0				.byte $04,$46,$4c,$49,$d0              ; $dc flip
>451b	06 41 53 53 45 52 d4			.byte $06,$41,$53,$53,$45,$52,$d4      ; $dd assert
>4522	04 50 4f 4b c5				.byte $04,$50,$4f,$4b,$c5              ; $de poke
>4527	04 44 4f 4b c5				.byte $04,$44,$4f,$4b,$c5              ; $df doke
>452c	04 4c 4f 4b c5				.byte $04,$4c,$4f,$4b,$c5              ; $e0 loke
>4531	03 49 4e cb				.byte $03,$49,$4e,$cb                  ; $e1 ink
>4535	05 50 41 50 45 d2			.byte $05,$50,$41,$50,$45,$d2          ; $e2 paper
>453b	03 43 4c d3				.byte $03,$43,$4c,$d3                  ; $e3 cls
>453f	06 4c 4f 43 41 54 c5			.byte $06,$4c,$4f,$43,$41,$54,$c5      ; $e4 locate
>4546	01 ae					.byte $01,$ae                          ; $e5 .
>4548	04 46 52 4f cd				.byte $04,$46,$52,$4f,$cd              ; $e6 from
>454d	01 a3					.byte $01,$a3                          ; $e7 #
>454f	05 43 4c 45 41 d2			.byte $05,$43,$4c,$45,$41,$d2          ; $e8 clear
>4555	00					.byte $00

;******  Return to file: tokeniser/tokentext.asm


;******  Processing file: tokeniser/../generated/tokentext1.inc

.4556					Group1Text:
>4556	04 4c 4f 41 c4				.byte $04,$4c,$4f,$41,$c4              ; $86 load
>455b	04 53 41 56 c5				.byte $04,$53,$41,$56,$c5              ; $87 save
>4560	04 4c 49 53 d4				.byte $04,$4c,$49,$53,$d4              ; $88 list
>4565	03 4e 45 d7				.byte $03,$4e,$45,$d7                  ; $89 new
>4569	05 42 52 45 41 cb			.byte $05,$42,$52,$45,$41,$cb          ; $8a break
>456f	03 52 55 ce				.byte $03,$52,$55,$ce                  ; $8b run
>4573	04 52 45 41 c4				.byte $04,$52,$45,$41,$c4              ; $8c read
>4578	07 52 45 53 54 4f 52 c5			.byte $07,$52,$45,$53,$54,$4f,$52,$c5  ; $8d restore
>4580	03 45 4e c4				.byte $03,$45,$4e,$c4                  ; $8e end
>4584	04 53 54 4f d0				.byte $04,$53,$54,$4f,$d0              ; $8f stop
>4589	04 58 45 4d d5				.byte $04,$58,$45,$4d,$d5              ; $90 xemu
>458e	04 47 4f 54 cf				.byte $04,$47,$4f,$54,$cf              ; $91 goto
>4593	05 47 4f 53 55 c2			.byte $05,$47,$4f,$53,$55,$c2          ; $92 gosub
>4599	06 52 45 54 55 52 ce			.byte $06,$52,$45,$54,$55,$52,$ce      ; $93 return
>45a0	03 4f 52 c1				.byte $03,$4f,$52,$c1                  ; $94 ora
>45a4	05 28 41 4e 44 a9			.byte $05,$28,$41,$4e,$44,$a9          ; $95 (and)
>45aa	03 45 4f d2				.byte $03,$45,$4f,$d2                  ; $96 eor
>45ae	03 41 44 c3				.byte $03,$41,$44,$c3                  ; $97 adc
>45b2	03 53 54 c1				.byte $03,$53,$54,$c1                  ; $98 sta
>45b6	03 4c 44 c1				.byte $03,$4c,$44,$c1                  ; $99 lda
>45ba	03 43 4d d0				.byte $03,$43,$4d,$d0                  ; $9a cmp
>45be	03 53 42 c3				.byte $03,$53,$42,$c3                  ; $9b sbc
>45c2	03 41 53 cc				.byte $03,$41,$53,$cc                  ; $9c asl
>45c6	03 52 4f cc				.byte $03,$52,$4f,$cc                  ; $9d rol
>45ca	03 4c 53 d2				.byte $03,$4c,$53,$d2                  ; $9e lsr
>45ce	03 52 4f d2				.byte $03,$52,$4f,$d2                  ; $9f ror
>45d2	03 53 54 d8				.byte $03,$53,$54,$d8                  ; $a0 stx
>45d6	03 4c 44 d8				.byte $03,$4c,$44,$d8                  ; $a1 ldx
>45da	03 44 45 c3				.byte $03,$44,$45,$c3                  ; $a2 dec
>45de	03 49 4e c3				.byte $03,$49,$4e,$c3                  ; $a3 inc
>45e2	03 53 54 da				.byte $03,$53,$54,$da                  ; $a4 stz
>45e6	03 42 49 d4				.byte $03,$42,$49,$d4                  ; $a5 bit
>45ea	03 53 54 d9				.byte $03,$53,$54,$d9                  ; $a6 sty
>45ee	03 4c 44 d9				.byte $03,$4c,$44,$d9                  ; $a7 ldy
>45f2	03 43 50 d9				.byte $03,$43,$50,$d9                  ; $a8 cpy
>45f6	03 43 50 d8				.byte $03,$43,$50,$d8                  ; $a9 cpx
>45fa	03 54 53 c2				.byte $03,$54,$53,$c2                  ; $aa tsb
>45fe	03 54 52 c2				.byte $03,$54,$52,$c2                  ; $ab trb
>4602	03 4a 53 d2				.byte $03,$4a,$53,$d2                  ; $ac jsr
>4606	03 4a 4d d0				.byte $03,$4a,$4d,$d0                  ; $ad jmp
>460a	03 42 50 cc				.byte $03,$42,$50,$cc                  ; $ae bpl
>460e	03 42 4d c9				.byte $03,$42,$4d,$c9                  ; $af bmi
>4612	03 42 56 c3				.byte $03,$42,$56,$c3                  ; $b0 bvc
>4616	03 42 56 d3				.byte $03,$42,$56,$d3                  ; $b1 bvs
>461a	03 42 43 c3				.byte $03,$42,$43,$c3                  ; $b2 bcc
>461e	03 42 43 d3				.byte $03,$42,$43,$d3                  ; $b3 bcs
>4622	03 42 4e c5				.byte $03,$42,$4e,$c5                  ; $b4 bne
>4626	03 42 45 d1				.byte $03,$42,$45,$d1                  ; $b5 beq
>462a	03 42 52 c1				.byte $03,$42,$52,$c1                  ; $b6 bra
>462e	03 42 52 cb				.byte $03,$42,$52,$cb                  ; $b7 brk
>4632	03 50 48 d0				.byte $03,$50,$48,$d0                  ; $b8 php
>4636	03 43 4c c3				.byte $03,$43,$4c,$c3                  ; $b9 clc
>463a	03 50 4c d0				.byte $03,$50,$4c,$d0                  ; $ba plp
>463e	03 53 45 c3				.byte $03,$53,$45,$c3                  ; $bb sec
>4642	03 52 54 c9				.byte $03,$52,$54,$c9                  ; $bc rti
>4646	03 50 48 c1				.byte $03,$50,$48,$c1                  ; $bd pha
>464a	03 43 4c c9				.byte $03,$43,$4c,$c9                  ; $be cli
>464e	03 50 48 d9				.byte $03,$50,$48,$d9                  ; $bf phy
>4652	03 52 54 d3				.byte $03,$52,$54,$d3                  ; $c0 rts
>4656	03 50 4c c1				.byte $03,$50,$4c,$c1                  ; $c1 pla
>465a	03 53 45 c9				.byte $03,$53,$45,$c9                  ; $c2 sei
>465e	03 50 4c d9				.byte $03,$50,$4c,$d9                  ; $c3 ply
>4662	03 44 45 d9				.byte $03,$44,$45,$d9                  ; $c4 dey
>4666	03 54 58 c1				.byte $03,$54,$58,$c1                  ; $c5 txa
>466a	03 54 59 c1				.byte $03,$54,$59,$c1                  ; $c6 tya
>466e	03 54 58 d3				.byte $03,$54,$58,$d3                  ; $c7 txs
>4672	03 54 41 d9				.byte $03,$54,$41,$d9                  ; $c8 tay
>4676	03 54 41 d8				.byte $03,$54,$41,$d8                  ; $c9 tax
>467a	03 43 4c d6				.byte $03,$43,$4c,$d6                  ; $ca clv
>467e	03 54 53 d8				.byte $03,$54,$53,$d8                  ; $cb tsx
>4682	03 49 4e d9				.byte $03,$49,$4e,$d9                  ; $cc iny
>4686	03 44 45 d8				.byte $03,$44,$45,$d8                  ; $cd dex
>468a	03 43 4c c4				.byte $03,$43,$4c,$c4                  ; $ce cld
>468e	03 50 48 d8				.byte $03,$50,$48,$d8                  ; $cf phx
>4692	03 49 4e d8				.byte $03,$49,$4e,$d8                  ; $d0 inx
>4696	03 4e 4f d0				.byte $03,$4e,$4f,$d0                  ; $d1 nop
>469a	03 53 45 c4				.byte $03,$53,$45,$c4                  ; $d2 sed
>469e	03 50 4c d8				.byte $03,$50,$4c,$d8                  ; $d3 plx
>46a2	00					.byte $00

;******  Return to file: tokeniser/tokentext.asm


;******  Processing file: tokeniser/../generated/tokentext2.inc

.46a3					Group2Text:
>46a3	05 56 50 4f 4b c5			.byte $05,$56,$50,$4f,$4b,$c5          ; $86 vpoke
>46a9	05 56 44 4f 4b c5			.byte $05,$56,$44,$4f,$4b,$c5          ; $87 vdoke
>46af	05 56 4c 4f 41 c4			.byte $05,$56,$4c,$4f,$41,$c4          ; $88 vload
>46b5	04 4d 4f 44 c5				.byte $04,$4d,$4f,$44,$c5              ; $89 mode
>46ba	07 50 41 4c 45 54 54 c5			.byte $07,$50,$41,$4c,$45,$54,$54,$c5  ; $8a palette
>46c2	06 53 50 52 49 54 c5			.byte $06,$53,$50,$52,$49,$54,$c5      ; $8b sprite
>46c9	03 43 4c c7				.byte $03,$43,$4c,$c7                  ; $8c clg
>46cd	04 52 45 43 d4				.byte $04,$52,$45,$43,$d4              ; $8d rect
>46d2	05 46 52 41 4d c5			.byte $05,$46,$52,$41,$4d,$c5          ; $8e frame
>46d8	04 44 52 41 d7				.byte $04,$44,$52,$41,$d7              ; $8f draw
>46dd	04 54 45 58 d4				.byte $04,$54,$45,$58,$d4              ; $90 text
>46e2	04 50 4c 4f d4				.byte $04,$50,$4c,$4f,$d4              ; $91 plot
>46e7	04 4c 49 4e c5				.byte $04,$4c,$49,$4e,$c5              ; $92 line
>46ec	00					.byte $00

;******  Return to file: tokeniser/tokentext.asm


;******  Processing file: tokeniser/../generated/tokentext3.inc

.46ed					Group3Text:
>46ed	06 56 50 45 45 4b a8			.byte $06,$56,$50,$45,$45,$4b,$a8      ; $86 vpeek(
>46f4	06 56 44 45 45 4b a8			.byte $06,$56,$44,$45,$45,$4b,$a8      ; $87 vdeek(
>46fb	09 53 50 52 49 54 45 2e			.byte $09,$53,$50,$52,$49,$54,$45,$2e,$58,$a8 ; $88 sprite.x(
>4703	58 a8
>4705	09 53 50 52 49 54 45 2e			.byte $09,$53,$50,$52,$49,$54,$45,$2e,$59,$a8 ; $89 sprite.y(
>470d	59 a8
>470f	04 48 49 54 a8				.byte $04,$48,$49,$54,$a8              ; $8a hit(
>4714	06 4a 4f 59 2e 58 a8			.byte $06,$4a,$4f,$59,$2e,$58,$a8      ; $8b joy.x(
>471b	06 4a 4f 59 2e 59 a8			.byte $06,$4a,$4f,$59,$2e,$59,$a8      ; $8c joy.y(
>4722	06 4a 4f 59 2e 42 a8			.byte $06,$4a,$4f,$59,$2e,$42,$a8      ; $8d joy.b(
>4729	06 43 4c 4f 43 4b a8			.byte $06,$43,$4c,$4f,$43,$4b,$a8      ; $8e clock(
>4730	00					.byte $00

;******  Return to file: tokeniser/tokentext.asm


;******  Return to file: tokeniser/tokeniser.asm

.4731					tokeniserHandler:
.4731	7c 34 47	jmp ($4734,x)			jmp 	(tokeniserVectors,x)
.4734					tokeniserVectors:
>4734	40 47					.word _DummyControlHandler ; index 0
>4736	d0 3e					.word Detokenise           ; index 2
>4738	c4 3e					.word ListLine             ; index 4
>473a	55 41					.word TokTest              ; index 6
>473c	75 41					.word Tokenise             ; index 8
>473e	78 41					.word TokeniseASCIIZ       ; index 10
.4740					_DummyControlHandler:
.4740	60		rts			rts

;******  Return to file: basic.asm

.4741					section_end_tokeniser:
.4741					section_start_variable:

;******  Processing file: variable/variable.asm


;******  Processing file: variable/array/access.asm

.4741					AccessArray:
.4741	8a		txa				txa
.4742	48		pha				pha
.4743	e8		inx				inx
.4744	20 0d 48	jsr $480d			jsr 	GetArrayDimensions 			; get the array dimensions one up from here.
.4747	68		pla				pla
.4748	aa		tax				tax
.4749	b5 98		lda $98,x			lda 	esInt0,x 					; restore address to follow in temp0.
.474b	85 2a		sta $2a				sta 	temp0
.474d	b5 a0		lda $a0,x			lda 	esInt1,x
.474f	85 2b		sta $2b				sta 	temp0+1
.4751	8a		txa				txa
.4752	48		pha				pha
.4753	98		tya				tya
.4754	48		pha				pha
.4755					_AAFollow:
.4755	a0 00		ldy #$00			ldy 	#0
.4757	b1 2a		lda ($2a),y			lda 	(temp0),y
.4759	48		pha				pha
.475a	c8		iny				iny
.475b	b1 2a		lda ($2a),y			lda 	(temp0),y
.475d	85 2b		sta $2b				sta 	temp0+1
.475f	68		pla				pla
.4760	85 2a		sta $2a				sta 	temp0
.4762	e8		inx				inx 								; advance to next stack slot.
.4763	a0 00		ldy #$00			ldy 	#0
.4765	b1 2a		lda ($2a),y			lda 	(temp0),y 					; compare max index vs required index
.4767	d5 98		cmp $98,x			cmp 	esInt0,x
.4769	c8		iny				iny
.476a	b1 2a		lda ($2a),y			lda 	(temp0),y 					; drop bit 7 of the size, indicates follow.
.476c	85 2c		sta $2c				sta 	temp1 						; save the size in temp1 for later use.
.476e	29 7f		and #$7f			and 	#$7F
.4770	f5 a0		sbc $a0,x			sbc 	esInt1,x
.4772	90 50		bcc $47c4			bcc 	_AABadIndex 				; failed on index if max index < required.
.4774	18		clc				clc
.4775	a5 2a		lda $2a				lda 	temp0
.4777	69 02		adc #$02			adc 	#2
.4779	85 2a		sta $2a				sta 	temp0
.477b	90 02		bcc $477f			bcc 	_AANoCarry
.477d	e6 2b		inc $2b				inc 	temp0+1
.477f					_AANoCarry:
.477f	b5 98		lda $98,x			lda 	esInt0,x
.4781	85 2e		sta $2e				sta 	temp2
.4783	b5 a0		lda $a0,x			lda 	esInt1,x
.4785	85 2f		sta $2f				sta 	temp2+1
.4787	ac 19 0e	ldy $0e19			ldy 	varType
.478a	b9 67 48	lda $4867,y			lda 	CAActualSize-$3A,y
.478d	b4 91		ldy $91,x			ldy 	esType+1,x 					; is it top level
.478f	30 02		bmi $4793			bmi 	_AANotPointer
.4791	a9 02		lda #$02			lda 	#2 							; array of pointers is 2.
.4793					_AANotPointer:
.4793	20 11 49	jsr $4911			jsr 	MultiplyTemp2ByA 			; multiply the index by the data size, in temp2.
.4796	18		clc				clc
.4797	a5 2a		lda $2a				lda 	temp0
.4799	65 2e		adc $2e				adc 	temp2
.479b	85 2a		sta $2a				sta 	temp0
.479d	a5 2b		lda $2b				lda 	temp0+1
.479f	65 2f		adc $2f				adc 	temp2+1
.47a1	85 2b		sta $2b				sta 	temp0+1
.47a3	b5 91		lda $91,x			lda 	esType+1,x
.47a5	30 07		bmi $47ae			bmi 	_AAUsedAllIndices
.47a7	a5 2c		lda $2c				lda 	temp1 						; check if this is a pointer array e.g. there are subarrays
.47a9	10 14		bpl $47bf			bpl 	_AABadDepth 				; no, too many indexes.
.47ab	4c 55 47	jmp $4755			jmp 	_AAFollow 					; otherwise follow them.
.47ae					_AAUsedAllIndices:
.47ae	a5 2c		lda $2c				lda 	temp1 						; get original high length byte.
.47b0	30 0d		bmi $47bf			bmi 	_AABadDepth 				; if -ve then this is an array of pointers.
.47b2	68		pla				pla
.47b3	a8		tay				tay
.47b4	68		pla				pla
.47b5	aa		tax				tax
.47b6	a5 2a		lda $2a				lda 	temp0 						; copy address of array element to stack,x
.47b8	95 98		sta $98,x			sta 	esInt0,x
.47ba	a5 2b		lda $2b				lda 	temp0+1
.47bc	95 a0		sta $a0,x			sta 	esInt1,x
.47be	60		rts				rts
.47bf					_AABadDepth:
.47bf	a2 1c		ldx #$1c			ldx 	#ErrorID_ArrayDepth
.47c1	20 18 15	jsr $1518		jsr	errorHandler
.47c4					_AABadIndex:
.47c4	a2 1b		ldx #$1b			ldx 	#ErrorID_ArrayIndex
.47c6	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: variable/variable.asm


;******  Processing file: variable/array/create.asm

.0e17					elementSize:
>0e17							.fill	 1
.47c9					CreateArray:
.47c9	20 a0 49	jsr $49a0			jsr 	AccessSetup 				; set up the basic stuff.
.47cc	ad 19 0e	lda $0e19			lda 	varType 					; is the variable type an array
.47cf	4a		lsr a				lsr 	a
.47d0	90 36		bcc $4808			bcc 	CANotArray 					; no, cause an error.
.47d2	20 a9 4a	jsr $4aa9			jsr 	FindVariable 				; does the variable exist already
.47d5	b0 2c		bcs $4803			bcs 	CAFound 					; cannot redefine it.
.47d7	20 dd 49	jsr $49dd			jsr 	CreateVariable 				; create the variable entry.
.47da	a5 2a		lda $2a				lda 	temp0 						; push address of new variable entry on the stack
.47dc	48		pha				pha
.47dd	a5 2b		lda $2b				lda 	temp0+1
.47df	48		pha				pha
.47e0	a2 00		ldx #$00			ldx 	#0
.47e2	20 0d 48	jsr $480d			jsr 	GetArrayDimensions 			; get the array dimensions
.47e5	a2 00		ldx #$00			ldx 	#0 							; create at level $00
.47e7	20 3d 48	jsr $483d			jsr 	CreateArrayLevel 			; level to YA
.47ea	aa		tax				tax 								; level now in YX
.47eb	68		pla				pla 								; get address back to temp0 to write.
.47ec	85 2b		sta $2b				sta 	temp0+1
.47ee	68		pla				pla
.47ef	85 2a		sta $2a				sta 	temp0
.47f1	98		tya				tya 								; write YX there.
.47f2	a0 06		ldy #$06			ldy 	#6
.47f4	91 2a		sta ($2a),y			sta 	(temp0),y
.47f6	88		dey				dey
.47f7	8a		txa				txa
.47f8	91 2a		sta ($2a),y			sta 	(temp0),y
.47fa	ac 1a 0e	ldy $0e1a			ldy 	varEnd 						; restore Y and exit.
.47fd	60		rts				rts
.47fe					CASize:
.47fe	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.4800	20 18 15	jsr $1518		jsr	errorHandler
.4803					CAFound:
.4803	a2 19		ldx #$19			ldx 	#ErrorID_DupArray
.4805	20 18 15	jsr $1518		jsr	errorHandler
.4808					CANotArray:
.4808	a2 1a		ldx #$1a			ldx 	#ErrorID_NotArray
.480a	20 18 15	jsr $1518		jsr	errorHandler
.480d					GetArrayDimensions:
.480d	ad 19 0e	lda $0e19			lda 	varType 					; push variable type on the stack.
.4810	48		pha				pha
.4811	ac 1a 0e	ldy $0e1a			ldy 	varEnd
.4814					_CAGetDimensions:
.4814	8a		txa				txa 								; get the next level
.4815	a2 0a		ldx #$0a		ldx	#10
.4817	20 f1 3b	jsr $3bf1		jsr	mainHandler
.481a	aa		tax				tax
.481b	b5 a0		lda $a0,x			lda 	esInt1,x 					; index must be < 8192
.481d	29 e0		and #$e0			and 	#$E0
.481f	15 a8		ora $a8,x			ora 	esInt2,x
.4821	15 b0		ora $b0,x			ora 	esInt3,x
.4823	d0 d9		bne $47fe			bne 	CASize
.4825	e8		inx				inx 								; next level.
.4826	b1 28		lda ($28),y			lda 	(codePtr),y 				; get/consume following character
.4828	c8		iny				iny
.4829	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; loop back if more dimensions
.482b	f0 e7		beq $4814			beq 	_CAGetDimensions
.482d	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN 				; right bracket ?
.482f	d0 cd		bne $47fe			bne 	CASize
.4831	a9 ff		lda #$ff			lda 	#$FF 						; set the type past the end to $FF so we know how many
.4833	95 90		sta $90,x			sta 	esType,x 					; dimensions there are.
.4835	68		pla				pla 								; restore the variable type ($3A-$3F)
.4836	8d 19 0e	sta $0e19			sta 	varType
.4839	8c 1a 0e	sty $0e1a			sty 	varEnd 						; save exit Y value, after dimensions
.483c	60		rts				rts
.483d					CreateArrayLevel:
.483d	ac 19 0e	ldy $0e19			ldy 	varType
.4840	b9 67 48	lda $4867,y			lda 	CAActualSize-$3A,y
.4843	8d 17 0e	sta $0e17			sta 	elementSize 				; get element size this level.
.4846	b4 91		ldy $91,x			ldy 	esType+1,x 					; is it top level
.4848	30 05		bmi $484f			bmi 	_CANotPointer
.484a	a9 02		lda #$02			lda 	#2 							; array of pointers is 2.
.484c	8d 17 0e	sta $0e17			sta 	elementSize
.484f					_CANotPointer:
.484f	a5 35		lda $35				lda 	lowMemory 					; start creating at temp0, saving start on stack.
.4851	85 2a		sta $2a				sta 	temp0
.4853	48		pha				pha
.4854	a5 36		lda $36				lda 	lowMemory+1
.4856	85 2b		sta $2b				sta 	temp0+1
.4858	48		pha				pha
.4859	20 da 48	jsr $48da			jsr 	AllocateArraySpace 			; allocate space for all array stuff at this level.
.485c	a0 00		ldy #$00			ldy 	#0
.485e	b5 98		lda $98,x			lda 	esInt0,x
.4860	91 2a		sta ($2a),y			sta 	(temp0),y
.4862	c8		iny				iny
.4863	b5 a0		lda $a0,x			lda 	esInt1,x
.4865	91 2a		sta ($2a),y			sta 	(temp0),y
.4867	b5 91		lda $91,x			lda 	esType+1,x 					; do we have another level ?
.4869	30 06		bmi $4871			bmi 	_CALNotLast
.486b	b1 2a		lda ($2a),y			lda 	(temp0),y 					; set bit 7, indicates an array of pointers to other levels.
.486d	09 80		ora #$80			ora 	#$80
.486f	91 2a		sta ($2a),y			sta 	(temp0),y
.4871					_CALNotLast:
.4871	a9 02		lda #$02			lda 	#2
.4873	20 97 48	jsr $4897			jsr 	_CALAddTemp0
.4876	b5 98		lda $98,x			lda 	esInt0,x 					; copy stack:01 to stack:23 so we can use it to
.4878	95 a8		sta $a8,x			sta 	esInt2,x 					; count.
.487a	b5 a0		lda $a0,x			lda 	esInt1,x
.487c	95 b0		sta $b0,x			sta 	esInt3,x
.487e					_CALClear:
.487e	20 a7 48	jsr $48a7			jsr 	EraseOneElement
.4881	ad 17 0e	lda $0e17			lda 	elementSize 				; move to next element
.4884	20 97 48	jsr $4897			jsr 	_CALAddTemp0
.4887	b5 a8		lda $a8,x			lda 	esInt2,x 					; decrement counter
.4889	d0 02		bne $488d			bne 	_CALNoBorrow
.488b	d6 b0		dec $b0,x			dec 	esInt3,x
.488d					_CALNoBorrow:
.488d	d6 a8		dec $a8,x			dec 	esInt2,x
.488f	b5 b0		lda $b0,x			lda 	esInt3,x 					; loop back if >= 0 - we need +1 because indices
.4891	10 eb		bpl $487e			bpl 	_CALClear 					; start at 0 e.g. x(10) is actually 11 array entries.
.4893	68		pla				pla 								; restore the start of this into YA.
.4894	a8		tay				tay
.4895	68		pla				pla
.4896	60		rts				rts
.4897					_CALAddTemp0:
.4897	18		clc				clc
.4898	65 2a		adc $2a				adc 	temp0
.489a	85 2a		sta $2a				sta 	temp0
.489c	90 02		bcc $48a0			bcc 	_CALANoCarry
.489e	e6 2b		inc $2b				inc 	temp0+1
.48a0					_CALANoCarry:
.48a0	60		rts				rts
.48a1					CAActualSize:
>48a1	04 04						.byte 	VarISize,VarISize
>48a3	02 02						.byte 	VarSSize,VarSSize
>48a5	06 06						.byte 	VarFSize,VarFSize
.48a7					EraseOneElement:
.48a7	b5 91		lda $91,x			lda 	esType+1,x 					; is this a list of sub arrays
.48a9	10 09		bpl $48b4			bpl 	_EOESubArray
.48ab	a0 00		ldy #$00			ldy 	#0 							; write the empty variable value out.
.48ad	ad 19 0e	lda $0e19			lda 	varType
.48b0	20 47 4a	jsr $4a47			jsr 	ZeroTemp0Y
.48b3	60		rts				rts
.48b4					_EOESubArray:
.48b4	a5 2a		lda $2a				lda 	temp0 						; save temp0, these are effectively locals.
.48b6	48		pha				pha
.48b7	a5 2b		lda $2b				lda 	temp0+1
.48b9	48		pha				pha
.48ba	ad 17 0e	lda $0e17			lda 	elementSize 				; save element size
.48bd	48		pha				pha
.48be	e8		inx				inx 								; create at next level
.48bf	20 3d 48	jsr $483d			jsr 	CreateArrayLevel
.48c2	ca		dex				dex
.48c3	85 32		sta $32				sta 	tempShort 					; save A
.48c5	68		pla				pla  								; restore element size.
.48c6	8d 17 0e	sta $0e17			sta 	elementSize
.48c9	68		pla				pla 								; restore temp0, which is where this new array level goes.
.48ca	85 2b		sta $2b				sta 	temp0+1
.48cc	68		pla				pla
.48cd	85 2a		sta $2a				sta 	temp0
.48cf	98		tya				tya 								; store Y/A there
.48d0	a0 01		ldy #$01			ldy 	#1
.48d2	91 2a		sta ($2a),y			sta 	(temp0),y
.48d4	a5 32		lda $32				lda 	tempShort
.48d6	88		dey				dey
.48d7	91 2a		sta ($2a),y			sta 	(temp0),y
.48d9	60		rts				rts
.48da					AllocateArraySpace:
.48da	18		clc				clc 								; element count + 1 => temp2.
.48db	b5 98		lda $98,x			lda 	esInt0,x
.48dd	69 01		adc #$01			adc 	#1
.48df	85 2e		sta $2e				sta 	temp2
.48e1	b5 a0		lda $a0,x			lda 	esInt1,x
.48e3	69 00		adc #$00			adc 	#0
.48e5	85 2f		sta $2f				sta 	temp2+1
.48e7	ad 17 0e	lda $0e17			lda 	elementSize 				; bytes per element
.48ea	20 11 49	jsr $4911			jsr 	MultiplyTemp2ByA 			; temp2 = (count + 1) x bytes per element.
.48ed	18		clc				clc 								; add 2 for 'max element' byte.
.48ee	a5 2e		lda $2e				lda 	temp2
.48f0	69 02		adc #$02			adc 	#2
.48f2	85 2e		sta $2e				sta 	temp2
.48f4	90 02		bcc $48f8			bcc 	_AASNoCarry
.48f6	e6 2f		inc $2f				inc 	temp2+1
.48f8					_AASNoCarry:
.48f8	18		clc				clc 								; add to low memory, allocating space.
.48f9	a5 35		lda $35				lda 	lowMemory
.48fb	65 2e		adc $2e				adc 	temp2
.48fd	85 35		sta $35				sta 	lowMemory
.48ff	a5 36		lda $36				lda 	lowMemory+1
.4901	65 2f		adc $2f				adc 	temp2+1
.4903	85 36		sta $36				sta 	lowMemory+1
.4905	b0 05		bcs $490c			bcs 	_AASFail 					; out of memory as adding causes wrapround
.4907	c5 34		cmp $34				cmp 	highMemory+1 				; >= high memory pointer.
.4909	b0 01		bcs $490c			bcs 	_AASFail
.490b	60		rts				rts
.490c					_AASFail:
.490c	a2 22		ldx #$22			ldx 	#ErrorID_Memory
.490e	20 18 15	jsr $1518		jsr	errorHandler
.4911					MultiplyTemp2ByA:
.4911	48		pha				pha
.4912	a5 2e		lda $2e				lda 	temp2 						; copy temp2 to temp3.
.4914	85 30		sta $30				sta 	temp3
.4916	a5 2f		lda $2f				lda 	temp2+1
.4918	85 31		sta $31				sta 	temp3+1
.491a	68		pla				pla
.491b	06 2e		asl $2e				asl 	temp2 						; double it.
.491d	26 2f		rol $2f				rol 	temp2+1
.491f	c9 02		cmp #$02			cmp 	#2 							; if x 2 then exit.
.4921	f0 15		beq $4938			beq 	_MTBAExit
.4923	c9 06		cmp #$06			cmp 	#6 							; if x 6 then add temp3 to temp2
.4925	d0 0d		bne $4934			bne 	_MTBANotFloat
.4927	18		clc				clc 								; so this will make it x 3
.4928	a5 2e		lda $2e				lda 	temp2
.492a	65 30		adc $30				adc 	temp3
.492c	85 2e		sta $2e				sta 	temp2
.492e	a5 2f		lda $2f				lda 	temp2+1
.4930	65 31		adc $31				adc 	temp3+1
.4932	85 2f		sta $2f				sta 	temp2+1
.4934					_MTBANotFloat:
.4934	06 2e		asl $2e				asl 	temp2 						; double it.
.4936	26 2f		rol $2f				rol 	temp2+1
.4938					_MTBAExit:
.4938	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/variable/access.asm

.0e18					varHash:
>0e18							.fill	1
.0e19					varType:
>0e19							.fill 	1
.0e1a					varEnd:
>0e1a							.fill 	1
.003b					hashList:
>003b							.fill 	2
.4939					AccessVariable:
.4939	aa		tax				tax 								; stack in X
.493a	c8		iny				iny									; look at second character
.493b	b1 28		lda ($28),y			lda 	(codePtr),y
.493d	88		dey				dey
.493e	c9 3a		cmp #$3a			cmp 	#TYPE_INT 					; is it the integer marker ($3A)
.4940	d0 15		bne $4957			bne 	_AVLong 					; no, always use the hash tables.
.4942	b1 28		lda ($28),y			lda 	(codePtr),y 				; this is the 6 bit ASCII of A-Z 1-26
.4944	38		sec				sec 	 							; make it 0-25
.4945	e9 01		sbc #$01			sbc 	#1
.4947	0a		asl a				asl 	a 							; x 4 as 4 bytes / variable.
.4948	0a		asl a				asl 	a
.4949	95 98		sta $98,x			sta 	esInt0,x
.494b	a9 0a		lda #$0a			lda 	#SingleLetterVar >> 8 		; make it an address
.494d	95 a0		sta $a0,x			sta 	esInt1,x
.494f	a9 80		lda #$80			lda 	#$80 						; type is an integer reference.
.4951	95 90		sta $90,x			sta 	esType,x
.4953	c8		iny				iny 								; skip over the variable reference in the code.
.4954	c8		iny				iny  								; (1 letter, 1 type)
.4955	8a		txa				txa 								; stack in A to return.
.4956	60		rts				rts
.4957					_AVLong:
.4957	8a		txa				txa
.4958	48		pha				pha
.4959	20 a0 49	jsr $49a0			jsr 	AccessSetup 				; set up the basic information we need for later
.495c	20 a9 4a	jsr $4aa9			jsr 	FindVariable 				; does the variable exist already ?
.495f	b0 0e		bcs $496f			bcs 	_AVFound 					; yes, then its found
.4961	ad 19 0e	lda $0e19			lda 	varType 					; otherwise, is the variable type an array
.4964	4a		lsr a				lsr 	a
.4965	90 05		bcc $496c			bcc 	_AVCanCreate 				; if not, we can autocreate
.4967	a2 15		ldx #$15			ldx 	#ErrorID_noauto
.4969	20 18 15	jsr $1518		jsr	errorHandler
.496c					_AVCanCreate:
.496c	20 dd 49	jsr $49dd			jsr 	CreateVariable 				; variable does not exist, create it.
.496f					_AVFound:
.496f	68		pla				pla
.4970	aa		tax				tax
.4971	18		clc				clc 								; copy temp0 (variable record address)
.4972	a5 2a		lda $2a				lda 	temp0 						; +5 (to point to the data)
.4974	69 05		adc #$05			adc 	#5 							; (first 5 bytes are link, name, hash)
.4976	95 98		sta $98,x			sta 	esInt0,x
.4978	a5 2b		lda $2b				lda 	temp0+1
.497a	69 00		adc #$00			adc 	#0
.497c	95 a0		sta $a0,x			sta 	esInt1,x
.497e	a9 00		lda #$00			lda 	#0
.4980	95 a8		sta $a8,x			sta 	esInt2,x
.4982	95 b0		sta $b0,x			sta 	esInt3,x
.4984	ac 19 0e	ldy $0e19			ldy 	varType 					; get the type ID from the type.
.4987	b9 60 49	lda $4960,y			lda 	_AVTypeTable-$3A,y 			; e.g. a reference to int/float/string.
.498a	95 90		sta $90,x			sta 	esType,x
.498c	ac 1a 0e	ldy $0e1a			ldy 	varEnd 						; restore Y
.498f	ad 19 0e	lda $0e19			lda 	VarType 					; get variable type, put LSB into C
.4992	4a		lsr a				lsr 	a
.4993	90 03		bcc $4998			bcc 	_AVNotArray 				; if carry set,it is an array variable.
.4995	20 41 47	jsr $4741			jsr 	AccessArray 				; array lookup. if LSB was set.
.4998					_AVNotArray:
.4998	8a		txa				txa 								; return stack in A and return
.4999	60		rts				rts
.499a					_AVTypeTable:
>499a	80 80						.byte 	$80,$80						; integer
>499c	c0 c0						.byte 	$C0,$C0 					; string
>499e	81 81						.byte 	$81,$81 					; float
.49a0					AccessSetup:
.49a0	a9 00		lda #$00			lda 	#0 							; zero the hash byte.
.49a2	8d 18 0e	sta $0e18			sta 	varHash
.49a5	98		tya				tya
.49a6	48		pha				pha
.49a7	b1 28		lda ($28),y	_ASLoop:lda 	(codePtr),y					; get next identifier character
.49a9	c9 3a		cmp #$3a			cmp 	#$3A 						; is it 3A-3F which end all identifiers ?
.49ab	b0 0b		bcs $49b8			bcs 	_ASComplete
.49ad	18		clc				clc 								; add to the hash. Might improve this.
.49ae	6d 18 0e	adc $0e18			adc 	varHash
.49b1	8d 18 0e	sta $0e18			sta 	varHash
.49b4	c8		iny				iny 								; next character
.49b5	4c a7 49	jmp $49a7			jmp 	_ASLoop
.49b8					_ASComplete:
.49b8	8d 19 0e	sta $0e19			sta 	varType 					; save variable type byte
.49bb	c8		iny				iny
.49bc	8c 1a 0e	sty $0e1a			sty 	varEnd 						; save the ending position.
.49bf	38		sec				sec 								; convert type byte from $3A-$3F to 0..5
.49c0	e9 3a		sbc #$3a			sbc 	#$3A
.49c2	0a		asl a				asl 	a 							; multiply by hashTableSize (8 in this case)
.49c3	0a		asl a				asl 	a
.49c4	0a		asl a				asl 	a
.49c5	0a		asl a				asl 	a 							; 2 bytes/word
.49c6	85 2a		sta $2a				sta 	temp0 						; this is the offset to the start of the table.
.49c8	ad 18 0e	lda $0e18			lda 	varHash 					; get hash
.49cb	29 07		and #$07			and 	#(hashTableSize-1)			; force into range (for 8,0..7)
.49cd	0a		asl a				asl  	a 							; x 2 (for word) and clear carry
.49ce	65 2a		adc $2a				adc 	temp0 						; now offset from the start of the hash table.
.49d0	69 68		adc #$68			adc 	#hashTables & $FF 			; add to hash table base address
.49d2	85 3b		sta $3b				sta 	hashList 					; making hashLists point to the head of the link list.
.49d4	a9 0a		lda #$0a			lda 	#hashTables >> 8
.49d6	69 00		adc #$00			adc 	#0
.49d8	85 3c		sta $3c				sta 	hashList+1
.49da	68		pla				pla
.49db	a8		tay				tay
.49dc	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/variable/create.asm

.49dd					CreateVariable:
.49dd	98		tya				tya 								; push Y on the stack twice.
.49de	48		pha				pha									; position in code of the new variable.
.49df	48		pha				pha
.49e0	ae 19 0e	ldx $0e19			ldx 	varType 					; get var type 0-5 from the var type
.49e3	bd 07 4a	lda $4a07,x			lda		_CVSize-$3A,x 				; the bytes required for this new variable.
.49e6	48		pha				pha 								; save length
.49e7	a5 35		lda $35				lda 	lowMemory 					; set low Memory ptr to temp0
.49e9	85 2a		sta $2a				sta 	temp0 						; (address of the new variable)
.49eb	a5 36		lda $36				lda 	lowMemory+1
.49ed	85 2b		sta $2b				sta 	temp0+1
.49ef	68		pla				pla 								; get length
.49f0	18		clc				clc 								; add to low memory.
.49f1	65 35		adc $35				adc 	lowMemory
.49f3	85 35		sta $35				sta 	lowMemory
.49f5	90 08		bcc $49ff			bcc 	_CVNoCarry
.49f7	e6 36		inc $36				inc 	lowMemory+1
.49f9	a5 36		lda $36				lda 	lowMemory+1 				; check out of memory.
.49fb	c5 34		cmp $34				cmp 	highMemory+1
.49fd	b0 3d		bcs $4a3c			bcs 	_CVMemory
.49ff					_CVNoCarry:
.49ff	ad 18 0e	lda $0e18			lda 	varHash 					; store hash at offset 4.
.4a02	a0 04		ldy #$04			ldy 	#4
.4a04	91 2a		sta ($2a),y			sta 	(temp0),y
.4a06	68		pla				pla 								; offset, work out where the variable name is.
.4a07	18		clc				clc
.4a08	65 28		adc $28				adc 	codePtr
.4a0a	a0 02		ldy #$02			ldy 	#2 							; copy that into slots 2 + 3.
.4a0c	91 2a		sta ($2a),y			sta 	(temp0),y
.4a0e	a5 29		lda $29				lda 	codePtr+1
.4a10	69 00		adc #$00			adc 	#0
.4a12	c8		iny				iny
.4a13	91 2a		sta ($2a),y			sta 	(temp0),y
.4a15	cd c9 0a	cmp $0ac9			cmp 	basePage+1 					; compare against the program base.
.4a18	b0 03		bcs $4a1d			bcs 	_CVNotImmediate
.4a1a	20 7f 4a	jsr $4a7f			jsr 	CloneVariableName 			; we need to clone the variable name (immediate mode)
.4a1d					_CVNotImmediate:
.4a1d	a0 00		ldy #$00			ldy 	#0 							; copy current hash pointer in link
.4a1f	b1 3b		lda ($3b),y			lda 	(hashList),y 				; so we're inserting it in the front of a linked list
.4a21	91 2a		sta ($2a),y			sta 	(temp0),y
.4a23	c8		iny				iny
.4a24	b1 3b		lda ($3b),y			lda 	(hashList),y
.4a26	91 2a		sta ($2a),y			sta 	(temp0),y
.4a28	a5 2b		lda $2b				lda 	temp0+1 					; set new link
.4a2a	91 3b		sta ($3b),y			sta 	(hashList),y
.4a2c	88		dey				dey
.4a2d	a5 2a		lda $2a				lda 	temp0
.4a2f	91 3b		sta ($3b),y			sta 	(hashList),y
.4a31	ad 19 0e	lda $0e19			lda 	varType 					; type in A
.4a34	a0 05		ldy #$05			ldy 	#5 							; offset in Y
.4a36	20 47 4a	jsr $4a47			jsr 	ZeroTemp0Y 					; zero (temp0),y with whatever type.
.4a39	68		pla				pla
.4a3a	a8		tay				tay
.4a3b	60		rts				rts
.4a3c					_CVMemory:
.4a3c	a2 22		ldx #$22			ldx 	#ErrorID_Memory
.4a3e	20 18 15	jsr $1518		jsr	errorHandler
>4a41	09 07				_CVSize:.byte 	VarHSize+VarISize,VarHSize+VarASize 					; <storage for integer>
>4a43	07 07						.byte 	VarHSize+VarSSize,VarHSize+VarASize 					; <storage for string>
>4a45	0b 07						.byte 	VarHSize+VarFSize,VarHSize+VarASize 					; <storage for float>
.4a47					ZeroTemp0Y:
.4a47	4a		lsr a				lsr 	a 							; bit 0 in carry
.4a48	0a		asl a				asl 	a
.4a49	b0 19		bcs $4a64			bcs 	_ZTExit 					; we don't initialise arrays.
.4a4b	c9 3c		cmp #$3c			cmp 	#$3C 						; check string
.4a4d	f0 16		beq $4a65			beq 	_ZTWriteNullString 			; write "" string
.4a4f	c9 3e		cmp #$3e			cmp 	#$3E 						; check float
.4a51	f0 22		beq $4a75			beq 	_ZTWriteFloat
.4a53	98		tya				tya
.4a54	48		pha				pha
.4a55	a9 00		lda #$00			lda 	#0
.4a57	91 2a		sta ($2a),y			sta 	(temp0),y
.4a59	c8		iny				iny
.4a5a	91 2a		sta ($2a),y			sta 	(temp0),y
.4a5c	c8		iny				iny
.4a5d	91 2a		sta ($2a),y			sta 	(temp0),y
.4a5f	c8		iny				iny
.4a60	91 2a		sta ($2a),y			sta 	(temp0),y
.4a62	68		pla				pla
.4a63	a8		tay				tay
.4a64					_ZTExit:
.4a64	60		rts				rts
.4a65					_ZTWriteNullString:
.4a65	a9 00		lda #$00			lda 	#0 							; put a reference to null string as the default value.
.4a67	8d ce 0a	sta $0ace			sta 	NullString
.4a6a	a9 ce		lda #$ce			lda 	#NullString & $FF
.4a6c	91 2a		sta ($2a),y			sta 	(temp0),y
.4a6e	a9 0a		lda #$0a			lda 	#NullString >> 8
.4a70	c8		iny				iny
.4a71	91 2a		sta ($2a),y			sta 	(temp0),y
.4a73	88		dey				dey
.4a74	60		rts				rts
.4a75					_ZTWriteFloat:
.4a75	8a		txa				txa
.4a76	48		pha				pha
.4a77	a2 20		ldx #$20		ldx	#32
.4a79	20 67 23	jsr $2367		jsr	floatingpointHandler
.4a7c	68		pla				pla
.4a7d	aa		tax				tax
.4a7e	60		rts				rts
.4a7f					CloneVariableName:
.4a7f	a0 02		ldy #$02			ldy 	#2 							; copy vname address to temp2
.4a81	b1 2a		lda ($2a),y			lda 	(temp0),y
.4a83	85 2e		sta $2e				sta 	temp2
.4a85	c8		iny				iny
.4a86	b1 2a		lda ($2a),y			lda 	(temp0),y
.4a88	85 2f		sta $2f				sta 	temp2+1
.4a8a	a5 36		lda $36				lda 	lowMemory+1 				; copy lowMemory address to (temp0),2/3
.4a8c	91 2a		sta ($2a),y			sta 	(temp0),y
.4a8e	88		dey				dey
.4a8f	a5 35		lda $35				lda 	lowMemory
.4a91	91 2a		sta ($2a),y			sta 	(temp0),y
.4a93	a0 00		ldy #$00			ldy 	#0 							; copy data from (temp2) to (lowMemory)
.4a95					_CVNCopy:
.4a95	b1 2e		lda ($2e),y			lda		(temp2),y
.4a97	91 35		sta ($35),y			sta 	(lowMemory),y
.4a99	c8		iny				iny
.4a9a	c9 3a		cmp #$3a			cmp 	#$3A 						; until the whole name has been copied.
.4a9c	90 f7		bcc $4a95			bcc 	_CVNCopy
.4a9e	98		tya				tya 								; add Y to low memory
.4a9f	18		clc				clc
.4aa0	65 35		adc $35				adc 	lowMemory
.4aa2	85 35		sta $35				sta 	lowMemory
.4aa4	90 02		bcc $4aa8			bcc 	_CVNNoCarry
.4aa6	e6 36		inc $36				inc 	lowMemory+1
.4aa8					_CVNNoCarry:
.4aa8	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/variable/find.asm

.4aa9					FindVariable:
.4aa9	98		tya				tya
.4aaa	48		pha				pha
.4aab	98		tya				tya 								; point temp2 to the actual name
.4aac	18		clc				clc 								; in memory of the variable being created
.4aad	65 28		adc $28				adc 	codePtr
.4aaf	85 2e		sta $2e				sta 	temp2
.4ab1	a5 29		lda $29				lda 	codePtr+1
.4ab3	69 00		adc #$00			adc 	#0
.4ab5	85 2f		sta $2f				sta 	temp2+1
.4ab7	a0 00		ldy #$00			ldy 	#0
.4ab9	a5 3b		lda $3b				lda 	hashList 					; copy hashlist to temp0
.4abb	85 2a		sta $2a				sta 	temp0
.4abd	a5 3c		lda $3c				lda 	hashList+1
.4abf	85 2b		sta $2b				sta 	temp0+1
.4ac1	a0 01		ldy #$01	_FVNext:ldy 	#1 							; get MSB
.4ac3	b1 2a		lda ($2a),y			lda 	(temp0),y
.4ac5	f0 2c		beq $4af3			beq 	_FVFail
.4ac7	aa		tax				tax
.4ac8	88		dey				dey		 							; get LSB
.4ac9	b1 2a		lda ($2a),y			lda 	(temp0),y
.4acb	85 2a		sta $2a				sta 	temp0 						; update pointer.
.4acd	86 2b		stx $2b				stx 	temp0+1
.4acf	a0 04		ldy #$04			ldy 	#4 							; check hashes match
.4ad1	b1 2a		lda ($2a),y			lda 	(temp0),y
.4ad3	cd 18 0e	cmp $0e18			cmp 	varHash
.4ad6	d0 e9		bne $4ac1			bne 	_FVNext 					; if not, no point in checking the name.
.4ad8	88		dey				dey 								; copy name pointer (+2,+3) to temp1.
.4ad9	b1 2a		lda ($2a),y			lda 	(temp0),y
.4adb	85 2d		sta $2d				sta 	temp1+1
.4add	88		dey				dey
.4ade	b1 2a		lda ($2a),y			lda 	(temp0),y
.4ae0	85 2c		sta $2c				sta 	temp1
.4ae2	a0 00		ldy #$00			ldy 	#0
.4ae4					_FVCheck:
.4ae4	b1 2c		lda ($2c),y			lda 	(temp1),y 					; compare names
.4ae6	d1 2e		cmp ($2e),y			cmp 	(temp2),y
.4ae8	d0 d7		bne $4ac1			bne 	_FVNext		 				; fail if different.
.4aea	c8		iny				iny
.4aeb	c9 3a		cmp #$3a			cmp 	#$3A 						; until reached the end marker.
.4aed	90 f5		bcc $4ae4			bcc 	_FVCheck
.4aef	68		pla				pla
.4af0	a8		tay				tay
.4af1	38		sec				sec
.4af2	60		rts				rts
.4af3					_FVFail:
.4af3	68		pla				pla
.4af4	a8		tay				tay
.4af5	18		clc				clc
.4af6	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/variable/reset.asm

.4af7					HashTableReset:
.4af7	a2 60		ldx #$60			ldx 	#6*2*hashTableSize			; 6 types, 2 bytes per table entry.
.4af9	a9 00		lda #$00			lda 	#0
.4afb					_HTRClear:
.4afb	9d 67 0a	sta $0a67,x			sta 	hashTables-1,x
.4afe	ca		dex				dex
.4aff	d0 fa		bne $4afb			bne 	_HTRClear
.4b01	60		rts				rts

;******  Return to file: variable/variable.asm

.4b02					variableHandler:
.4b02	7c 05 4b	jmp ($4b05,x)			jmp 	(variableVectors,x)
.4b05					variableVectors:
>4b05	0d 4b					.word _DummyControlHandler ; index 0
>4b07	39 49					.word AccessVariable       ; index 2
>4b09	c9 47					.word CreateArray          ; index 4
>4b0b	f7 4a					.word HashTableReset       ; index 6
.4b0d					_DummyControlHandler:
.4b0d	60		rts			rts

;******  Return to file: basic.asm

.4b0e					section_end_variable:
.4b0e					section_start_footer:

;******  Processing file: footer/footer.asm


;******  Processing file: footer/99end.asm

.003d					endZeroPage:
.0e1b					endStorage:
>4b0e							.align 	256
.4c00					programMemory:
>4bff	ff						.byte 	$FF

;******  Return to file: footer/footer.asm


;******  Return to file: basic.asm

.4c00					section_end_footer:

;******  End of listing
