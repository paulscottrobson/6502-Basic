
; 64tass Turbo Assembler Macro V1.55.2200 listing file
; 64tass -Walias -Wmacro-prefix -Wall -q -c -L ../source/bin/basic.lst -l ../source/bin/basic.lbl -Wall -o ../source/bin/stub.prg basic.asm
; Mon Apr  5 04:29:17 2021

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: basic.asm

=0					cputype = 0
=1					autorun=1
=0					coldstartnew=0
=$1000					CodeStart = $1000
=$800					MemoryStorage = $800
=$9f00					EndOfMemory = $9F00
=$28					ZeroPageStorage = $28
=$90					StackAddress = $90
=8					StackSize = 8
=2					retStackSizePages = 2

;******  Processing file: header/01common.inc


;******  Processing file: header/../generated/installed.inc

=1					installed_header = 1
=1					installed_main = 1
=1					installed_variable = 1
=1					installed_assembler = 1
=1					installed_error = 1
=1					installed_extension = 1
=1					installed_string = 1
=1					installed_device = 1
=0					installed_floatingpoint = 0
=1					installed_interaction = 1
=1					installed_tokeniser = 1
=1					installed_footer = 1

;******  Return to file: header/01common.inc

=8					hashTableSize = 8			; if this changes, the calculation is AccessSetup has to match it.
="G"					markerGOSUB = 'G'
="R"					markerREPEAT = 'R'
="F"					markerFOR = 'F'
="W"					markerWHILE = 'W'
="P"					markerPROC = 'P'
="$"					markerSTRING = '$'
="#"					markerFLOAT = '#'
="%"					markerINT = '%'
=5					VarHSize = 5 								; header (2 link, 2 name, 1 hash)
=2					VarASize = 2 								; array [address of first level]
=4					VarISize = 4 								; integer (32 bit)
=6					VarFSize = 6 								; float (4 mantissa, 1 exponent 1 sign/zero)
=2					VarSSize = 2 								; address (2 bytes)

;******  Return to file: basic.asm


;******  Processing file: header/02macros.inc


;******  Return to file: basic.asm


;******  Processing file: header/03data.inc

>0028					codePtr:.fill 	2							; (codePtr),y points to code.
>002a					temp0: 	.fill 	2							; working variables.
>002c					temp1: 	.fill 	2
>002e					temp2: 	.fill 	2
>0030					temp3: 	.fill 	2
.0032					tempshort:
>0032							.fill 	1
.0033					highMemory:
>0033							.fill 	2
.0035					lowMemory:
>0035							.fill 	2
>0800							.align	256
.0800					returnStack:
>0800							.fill 	retStackSizePages * 256
=512					retStackSize = retStackSizePages * 256
.0a00					SingleLetterVar:
>0a00					 		.fill 	26*4
.0a68					currentStorage:
>0090					esType:	.fill 	StackSize  					; type byte (see above)
>0098					esInt0:	.fill 	StackSize 					; integer or mantissa
>00a0					esInt1:	.fill 	StackSize
>00a8					esInt2:	.fill 	StackSize
>00b0					esInt3:	.fill 	StackSize
>00b8					esExp:	.fill 	StackSize 					; exponent ($80 = 0)
>00c0					esZSign:.fill 	StackSize 					; for floating point - sign (bit 7) isZero (bit 6)
.00c8					endOfStack:
=$98					esMant0 = esInt0 							; synonyms.
=$a0					esMant1 = esInt1
=$a8					esMant2 = esInt2
=$b0					esMant3 = esInt3
.0a68					hashTables:
>0a68							.fill 	6*2*hashTableSize
.0ac8					basePage:
>0ac8							.fill 	2
.0aca					endProgram:
>0aca							.fill 	2
.0acc					endMemory:
>0acc							.fill 	2
.0ace					NullString:
>0ace							.fill 	1							; don't waste memory concreting null strings.
.0acf					convertBuffer:
>0acf							.fill 	35

;******  Processing file: header/../generated/tokenconst.inc

=$80					TOK_EOL=$80
=$81					TOK_SHIFT1=$81
=$82					TOK_SHIFT2=$82
=$83					TOK_SHIFT3=$83
=$84					TOK_FPC=$84
=$85					TOK_STR=$85
=$86					TOK_BINARYST=$86
=$99					TOK_STRUCTST=$99
=$a4					TOK_UNARYST=$a4
=$c9					TOK_TOKENS=$c9
=$86					TKW_AND                      = $86 ; and
=$87					TKW_OR                       = $87 ; or
=$88					TKW_XOR                      = $88 ; xor
=$89					TKW_GREATEREQUAL             = $89 ; >=
=$8a					TKW_LESSEQUAL                = $8a ; <=
=$8b					TKW_GREATER                  = $8b ; >
=$8c					TKW_LESS                     = $8c ; <
=$8d					TKW_EQUAL                    = $8d ; =
=$8e					TKW_LESSGREATER              = $8e ; <>
=$8f					TKW_PLUS                     = $8f ; +
=$90					TKW_MINUS                    = $90 ; -
=$91					TKW_GREATERGREATER           = $91 ; >>
=$92					TKW_LESSLESS                 = $92 ; <<
=$93					TKW_STAR                     = $93 ; *
=$94					TKW_SLASH                    = $94 ; /
=$95					TKW_MOD                      = $95 ; mod
=$96					TKW_HAT                      = $96 ; ^
=$97					TKW_PLING                    = $97 ; !
=$98					TKW_QMARK                    = $98 ; ?
=$99					TKW_REPEAT                   = $99 ; repeat
=$9a					TKW_WHILE                    = $9a ; while
=$9b					TKW_FOR                      = $9b ; for
=$9c					TKW_IF                       = $9c ; if
=$9d					TKW_DEFPROC                  = $9d ; defproc
=$9e					TKW_UNTIL                    = $9e ; until
=$9f					TKW_WEND                     = $9f ; wend
=$a0					TKW_NEXT                     = $a0 ; next
=$a1					TKW_THEN                     = $a1 ; then
=$a2					TKW_ENDIF                    = $a2 ; endif
=$a3					TKW_ENDPROC                  = $a3 ; endproc
=$a4					TKW_LPAREN                   = $a4 ; (
=$a5					TKW_LENLPAREN                = $a5 ; len(
=$a6					TKW_SGNLPAREN                = $a6 ; sgn(
=$a7					TKW_ABSLPAREN                = $a7 ; abs(
=$a8					TKW_RANDOMLPAREN             = $a8 ; random(
=$a9					TKW_PAGE                     = $a9 ; page
=$aa					TKW_TRUE                     = $aa ; true
=$ab					TKW_FALSE                    = $ab ; false
=$ac					TKW_MINLPAREN                = $ac ; min(
=$ad					TKW_MAXLPAREN                = $ad ; max(
=$ae					TKW_SYSLPAREN                = $ae ; sys(
=$af					TKW_TIMERLPAREN              = $af ; timer(
=$b0					TKW_EVENTLPAREN              = $b0 ; event(
=$b1					TKW_GETLPAREN                = $b1 ; get(
=$b2					TKW_INKEYLPAREN              = $b2 ; inkey(
=$b3					TKW_ALLOCLPAREN              = $b3 ; alloc(
=$b4					TKW_CHRDOLLARLPAREN          = $b4 ; chr$(
=$b5					TKW_LEFTDOLLARLPAREN         = $b5 ; left$(
=$b6					TKW_MIDDOLLARLPAREN          = $b6 ; mid$(
=$b7					TKW_RIGHTDOLLARLPAREN        = $b7 ; right$(
=$b8					TKW_STRDOLLARLPAREN          = $b8 ; str$(
=$b9					TKW_VALLPAREN                = $b9 ; val(
=$ba					TKW_PEEKLPAREN               = $ba ; peek(
=$bb					TKW_DEEKLPAREN               = $bb ; deek(
=$bc					TKW_LEEKLPAREN               = $bc ; leek(
=$bd					TKW_ASCLPAREN                = $bd ; asc(
=$be					TKW_INTLPAREN                = $be ; int(
=$bf					TKW_FLOATLPAREN              = $bf ; float(
=$c0					TKW_ISVALLPAREN              = $c0 ; isval(
=$c1					TKW_UPPERDOLLARLPAREN        = $c1 ; upper$(
=$c2					TKW_LOWERDOLLARLPAREN        = $c2 ; lower$(
=$c3					TKW_ATC                      = $c3 ; @
=$c4					TKW_WAVY                     = $c4 ; ~
=$c5					TKW_AMP                      = $c5 ; &
=$c6					TKW_GETDOLLARLPAREN          = $c6 ; get$(
=$c7					TKW_INKEYDOLLARLPAREN        = $c7 ; inkey$(
=$c8					TKW_MEM                      = $c8 ; mem
=$c9					TKW_RPAREN                   = $c9 ; )
=$ca					TKW_COLON                    = $ca ; :
=$cb					TKW_COMMA                    = $cb ; ,
=$cc					TKW_SEMICOLON                = $cc ; ;
=$cd					TKW_QUOTE                    = $cd ; '
=$ce					TKW_TO                       = $ce ; to
=$cf					TKW_STEP                     = $cf ; step
=$d0					TKW_PROC                     = $d0 ; proc
=$d1					TKW_LOCAL                    = $d1 ; local
=$d2					TKW_DIM                      = $d2 ; dim
=$d3					TKW_REM                      = $d3 ; rem
=$d4					TKW_LET                      = $d4 ; let
=$d5					TKW_INPUT                    = $d5 ; input
=$d6					TKW_ELSE                     = $d6 ; else
=$d7					TKW_VDU                      = $d7 ; vdu
=$d8					TKW_PRINT                    = $d8 ; print
=$d9					TKW_DATA                     = $d9 ; data
=$da					TKW_IMAGE                    = $da ; image
=$db					TKW_AT                       = $db ; at
=$dc					TKW_FLIP                     = $dc ; flip
=$dd					TKW_ASSERT                   = $dd ; assert
=$de					TKW_POKE                     = $de ; poke
=$df					TKW_DOKE                     = $df ; doke
=$e0					TKW_LOKE                     = $e0 ; loke
=$e1					TKW_INK                      = $e1 ; ink
=$e2					TKW_PAPER                    = $e2 ; paper
=$e3					TKW_CLS                      = $e3 ; cls
=$e4					TKW_LOCATE                   = $e4 ; locate
=$e5					TKW_PERIOD                   = $e5 ; .
=$e6					TKW_FROM                     = $e6 ; from
=$e7					TKW_HASH                     = $e7 ; #
=$e8					TKW_CLEAR                    = $e8 ; clear
=$86					TKW_LOAD                     = $86 ; load
=$87					TKW_SAVE                     = $87 ; save
=$88					TKW_LIST                     = $88 ; list
=$89					TKW_NEW                      = $89 ; new
=$8a					TKW_BREAK                    = $8a ; break
=$8b					TKW_RUN                      = $8b ; run
=$8c					TKW_READ                     = $8c ; read
=$8d					TKW_RESTORE                  = $8d ; restore
=$8e					TKW_END                      = $8e ; end
=$8f					TKW_STOP                     = $8f ; stop
=$90					TKW_XEMU                     = $90 ; xemu
=$91					TKW_GOTO                     = $91 ; goto
=$92					TKW_GOSUB                    = $92 ; gosub
=$93					TKW_RETURN                   = $93 ; return
=$94					TKW_ORA                      = $94 ; ora
=$95					TKW_LPARENANDRPAREN          = $95 ; (and)
=$96					TKW_EOR                      = $96 ; eor
=$97					TKW_ADC                      = $97 ; adc
=$98					TKW_STA                      = $98 ; sta
=$99					TKW_LDA                      = $99 ; lda
=$9a					TKW_CMP                      = $9a ; cmp
=$9b					TKW_SBC                      = $9b ; sbc
=$9c					TKW_ASL                      = $9c ; asl
=$9d					TKW_ROL                      = $9d ; rol
=$9e					TKW_LSR                      = $9e ; lsr
=$9f					TKW_ROR                      = $9f ; ror
=$a0					TKW_STX                      = $a0 ; stx
=$a1					TKW_LDX                      = $a1 ; ldx
=$a2					TKW_DEC                      = $a2 ; dec
=$a3					TKW_INC                      = $a3 ; inc
=$a4					TKW_STZ                      = $a4 ; stz
=$a5					TKW_BIT                      = $a5 ; bit
=$a6					TKW_STY                      = $a6 ; sty
=$a7					TKW_LDY                      = $a7 ; ldy
=$a8					TKW_CPY                      = $a8 ; cpy
=$a9					TKW_CPX                      = $a9 ; cpx
=$aa					TKW_TSB                      = $aa ; tsb
=$ab					TKW_TRB                      = $ab ; trb
=$ac					TKW_JSR                      = $ac ; jsr
=$ad					TKW_JMP                      = $ad ; jmp
=$ae					TKW_BPL                      = $ae ; bpl
=$af					TKW_BMI                      = $af ; bmi
=$b0					TKW_BVC                      = $b0 ; bvc
=$b1					TKW_BVS                      = $b1 ; bvs
=$b2					TKW_BCC                      = $b2 ; bcc
=$b3					TKW_BCS                      = $b3 ; bcs
=$b4					TKW_BNE                      = $b4 ; bne
=$b5					TKW_BEQ                      = $b5 ; beq
=$b6					TKW_BRA                      = $b6 ; bra
=$b7					TKW_BRK                      = $b7 ; brk
=$b8					TKW_PHP                      = $b8 ; php
=$b9					TKW_CLC                      = $b9 ; clc
=$ba					TKW_PLP                      = $ba ; plp
=$bb					TKW_SEC                      = $bb ; sec
=$bc					TKW_RTI                      = $bc ; rti
=$bd					TKW_PHA                      = $bd ; pha
=$be					TKW_CLI                      = $be ; cli
=$bf					TKW_PHY                      = $bf ; phy
=$c0					TKW_RTS                      = $c0 ; rts
=$c1					TKW_PLA                      = $c1 ; pla
=$c2					TKW_SEI                      = $c2 ; sei
=$c3					TKW_PLY                      = $c3 ; ply
=$c4					TKW_DEY                      = $c4 ; dey
=$c5					TKW_TXA                      = $c5 ; txa
=$c6					TKW_TYA                      = $c6 ; tya
=$c7					TKW_TXS                      = $c7 ; txs
=$c8					TKW_TAY                      = $c8 ; tay
=$c9					TKW_TAX                      = $c9 ; tax
=$ca					TKW_CLV                      = $ca ; clv
=$cb					TKW_TSX                      = $cb ; tsx
=$cc					TKW_INY                      = $cc ; iny
=$cd					TKW_DEX                      = $cd ; dex
=$ce					TKW_CLD                      = $ce ; cld
=$cf					TKW_PHX                      = $cf ; phx
=$d0					TKW_INX                      = $d0 ; inx
=$d1					TKW_NOP                      = $d1 ; nop
=$d2					TKW_SED                      = $d2 ; sed
=$d3					TKW_PLX                      = $d3 ; plx
=$86					TKW_VPOKE                    = $86 ; vpoke
=$87					TKW_VDOKE                    = $87 ; vdoke
=$88					TKW_VLOAD                    = $88 ; vload
=$89					TKW_MODE                     = $89 ; mode
=$8a					TKW_PALETTE                  = $8a ; palette
=$8b					TKW_SPRITE                   = $8b ; sprite
=$8c					TKW_CLG                      = $8c ; clg
=$8d					TKW_RECT                     = $8d ; rect
=$8e					TKW_FRAME                    = $8e ; frame
=$8f					TKW_TEXT                     = $8f ; text
=$90					TKW_PLOT                     = $90 ; plot
=$91					TKW_LINE                     = $91 ; line
=$92					TKW_PAINT                    = $92 ; paint
=$86					TKW_VPEEKLPAREN              = $86 ; vpeek(
=$87					TKW_VDEEKLPAREN              = $87 ; vdeek(
=$88					TKW_SPRITEPERIODXLPAREN      = $88 ; sprite.x(
=$89					TKW_SPRITEPERIODYLPAREN      = $89 ; sprite.y(
=$8a					TKW_HITLPAREN                = $8a ; hit(
=$8b					TKW_JOYPERIODXLPAREN         = $8b ; joy.x(
=$8c					TKW_JOYPERIODYLPAREN         = $8c ; joy.y(
=$8d					TKW_JOYPERIODBLPAREN         = $8d ; joy.b(
=$8e					TKW_CLOCKLPAREN              = $8e ; clock(

;******  Return to file: header/03data.inc

=$3a					TYPE_INT =		($3A) 						; type bytes that end identifier.
=$3b					TYPE_INTARRAY =	($3B)
=$3c					TYPE_STR =		($3C)
=$3d					TYPE_STRARRAY =	($3D)
=$3e					TYPE_FLOAT =	($3E)
=$3f					TYPE_FLOATARRAY=($3F)

;******  Processing file: header/../generated/asmconst.inc

=$94					TKA_GROUP1 = $94
=$9c					TKA_GROUP2 = $9c
=$ae					TKA_GROUP3 = $ae
=$b7					TKA_GROUP4 = $b7
=$d4					TKA_END4 = $d4

;******  Return to file: header/03data.inc


;******  Return to file: basic.asm


;******  Processing file: header/header.inc


;******  Return to file: basic.asm


;******  Processing file: assembler/asmconst.inc

=0					AMD_IMM		= 0					; Immediate mode.
=1					AMD_ZERO 	= 1					; Zero Page
=2					AMD_ACCIMP	= 2					; Accumulator/Implied
=3					AMD_ABS 	= 3					; Absolute
=4					AMD_ZEROINDY= 4					; Zero Indirect,Y
=5					AMD_ZEROX 	= 5					; Zero Page,X
=6					AMD_ABSY 	= 6					; Absolute,Y
=7					AMD_ABSX 	= 7					; Absolute,X
=8					AMD_ZEROIND = 8					; Zero Indirect
=9					AMD_ZEROY 	= 9					; Zero Page,Y
=10					AMD_ABSIND 	= 10				; Absolute Indirect
=11					AMD_ABSINDX	= 11				; Absolute Indirect Indexed
=12					AMD_REL		= 12				; Relative
=13					AMD_ZEROINDX= 13 				; Zero Indirect,X

;******  Return to file: basic.asm


;******  Processing file: assembler/assembler.inc


;******  Return to file: basic.asm


;******  Processing file: device/device.inc


;******  Return to file: basic.asm


;******  Processing file: error/error.inc


;******  Return to file: basic.asm


;******  Processing file: error/errorhandler.inc


;******  Processing file: error/../generated/errorid.inc

=1					ErrorID_Missing = 1 ; Feature not Present
=2					ErrorID_Syntax = 2 ; Syntax Error
=3					ErrorID_NoModule = 3 ; Module disabled
=4					ErrorID_Assert = 4 ; Assertion failed
=5					ErrorID_DivZero = 5 ; Divide By Zero
=6					ErrorID_Stop = 6 ; Stop
=7					ErrorID_BadType = 7 ; Type Mismatch
=8					ErrorID_BadValue = 8 ; Illegal Value
=9					ErrorID_MissingRP = 9 ; Missing right bracket
=10					ErrorID_MissingComma = 10 ; Missing comma
=11					ErrorID_NoReference = 11 ; Missing reference
=12					ErrorID_LineNumber = 12 ; Line Number not found
=13					ErrorID_StrLen = 13 ; String too long
=14					ErrorID_ReturnErr = 14 ; RETURN without GOSUB
=15					ErrorID_UntilErr = 15 ; UNTIL without REPEAT
=16					ErrorID_NextErr = 16 ; NEXT without FOR
=17					ErrorID_WendErr = 17 ; WEND without WHILE
=18					ErrorID_endprocErr = 18 ; ENDPROC without PROC
=19					ErrorID_BadIndex = 19 ; Bad NEXT index
=20					ErrorID_Struct = 20 ; Structures nested wrong
=21					ErrorID_NoAuto = 21 ; Cannot create variable
=22					ErrorID_RetStack = 22 ; Return stack out of space
=23					ErrorID_NoProc = 23 ; Unknown Procedure
=24					ErrorID_Params = 24 ; Parameters do not match
=25					ErrorID_DupArray = 25 ; Array already defined
=26					ErrorID_NotArray = 26 ; DIM requires array
=27					ErrorID_ArrayIndex = 27 ; Bad array index
=28					ErrorID_ArrayDepth = 28 ; Wrong number of array indices
=29					ErrorID_DataError = 29 ; Out of data
=30					ErrorID_Tokenise = 30 ; Cannot tokenise line
=31					ErrorID_Save = 31 ; Save failed
=32					ErrorID_Load = 32 ; Load failed
=33					ErrorID_Break = 33 ; Break
=34					ErrorID_Memory = 34 ; Out of memory
=35					ErrorID_NumStack = 35 ; Expression too complex
=36					ErrorID_Assembler = 36 ; Bad Operand/Mode
=37					ErrorID_Branch = 37 ; Branch out of range
=38					ErrorID_Label = 38 ; Label changed value
=39					ErrorID_NoSprite = 39 ; No Sprite Selected
=40					ErrorID_Hardware = 40 ; Hardware

;******  Return to file: error/errorhandler.inc


;******  Return to file: basic.asm


;******  Processing file: extension/extension.inc


;******  Return to file: basic.asm


;******  Processing file: extension/option_x16/x16const.inc

=64					X16MaxImages = 64 							; max # of sprite images.

;******  Return to file: basic.asm


;******  Processing file: floatingpoint/float.inc

=5					FloatEmbeddedSize = 5

;******  Return to file: basic.asm


;******  Processing file: floatingpoint/floatingpoint.inc


;******  Return to file: basic.asm


;******  Processing file: interaction/interaction.inc


;******  Return to file: basic.asm


;******  Processing file: main/main.inc


;******  Return to file: basic.asm


;******  Processing file: string/functions/memory.inc

=252					MaxStringSize = 252

;******  Return to file: basic.asm


;******  Processing file: string/string.inc


;******  Return to file: basic.asm


;******  Processing file: tokeniser/detokenise/colouring.inc

=$84					LTYLineNumber = $84
=$82					LTYPunctuation = $82
=$87					LTYIdentifier = $87
=$86					LTYConstant = $86
=$83					LTYKeyword = $83
=$81					LTYString = $81

;******  Return to file: basic.asm


;******  Processing file: tokeniser/tokeniser.inc


;******  Return to file: basic.asm


;******  Processing file: variable/variable.inc


;******  Return to file: basic.asm


;******  Processing file: footer/footer.inc


;******  Return to file: basic.asm

.1000					section_start_header:

;******  Processing file: header/header.asm


;******  Processing file: header/00start.asm

.1000					Start:
.1000	4c 0a 10	jmp $100a			jmp 	GoColdStart 				; +0 	boot BASIC
.1003	4c 58 10	jmp $1058			jmp 	GoTokTest					; +3 	run tokeniser test code.
>1006	17 45						.word 	TokenTableAddress
.1008							else
>1008	00 00						.word 	0
.100a					GoColdStart:
.100a	a9 00		lda #$00			lda 	#(programMemory) & $FF
.100c	8d c8 0a	sta $0ac8			sta 	basePage
.100f	a9 4d		lda #$4d			lda 	#(programMemory) >> 8
.1011	8d c9 0a	sta $0ac9			sta 	1+(basePage)
.1014	a9 00		lda #$00			lda 	#(endOfMemory) & $FF
.1016	8d cc 0a	sta $0acc			sta 	endMemory
.1019	a9 9f		lda #$9f			lda 	#(endOfMemory) >> 8
.101b	8d cd 0a	sta $0acd			sta 	1+(endMemory)
.101e	20 26 10	jsr $1026			jsr 	InitialiseAll 				; initialise everything.
.1021	a2 02		ldx #$02		ldx	#2
.1023	20 ea 26	jsr $26ea		jsr	interactionHandler

;******  Processing file: header/../generated/initialiseall.asm

.1026					InitialiseAll:
.1026	a9 00		lda #$00		lda #0
.1028	a2 00		ldx #$00		ldx	#0
.102a	20 b4 13	jsr $13b4		jsr	assemblerHandler
.102d	a9 00		lda #$00		lda #0
.102f	a2 00		ldx #$00		ldx	#0
.1031	20 f6 14	jsr $14f6		jsr	deviceHandler
.1034	a9 00		lda #$00		lda #0
.1036	a2 00		ldx #$00		ldx	#0
.1038	20 ea 26	jsr $26ea		jsr	interactionHandler
.103b	a9 00		lda #$00		lda #0
.103d	a2 00		ldx #$00		ldx	#0
.103f	20 88 3d	jsr $3d88		jsr	mainHandler
.1042	a9 00		lda #$00		lda #0
.1044	a2 00		ldx #$00		ldx	#0
.1046	20 45 40	jsr $4045		jsr	stringHandler
.1049	a9 00		lda #$00		lda #0
.104b	a2 00		ldx #$00		ldx	#0
.104d	20 c9 48	jsr $48c9		jsr	tokeniserHandler
.1050	a9 00		lda #$00		lda #0
.1052	a2 00		ldx #$00		ldx	#0
.1054	20 9a 4c	jsr $4c9a		jsr	variableHandler
.1057	60		rts			rts

;******  Return to file: header/00start.asm

.1058					GoTokTest:
.1058	a2 06		ldx #$06		ldx	#6
.105a	20 c9 48	jsr $48c9		jsr	tokeniserHandler

;******  Return to file: header/header.asm


;******  Return to file: basic.asm

.105d					section_end_header:
.105d					section_start_assembler:

;******  Processing file: assembler/assembler.asm


;******  Processing file: assembler/asmoperand.asm

.105d					AsmGetOperand:
.105d	a2 00		ldx #$00			ldx 	#0 							; clear the operand.
.105f	8a		txa				txa
.1060	95 98		sta $98,x			sta 	esInt0,x
.1062	95 a0		sta $a0,x			sta 	esInt1,x
.1064	95 a8		sta $a8,x			sta 	esInt2,x
.1066	95 b0		sta $b0,x			sta 	esInt3,x
.1068	b1 28		lda ($28),y			lda 	(codePtr),y 				; first into X
.106a	aa		tax				tax
.106b	a9 02		lda #$02			lda 	#AMD_ACCIMP
.106d	e0 80		cpx #$80			cpx 	#TOK_EOL 					; if end of line or colon, return implied mode.
.106f	f0 41		beq $10b2			beq 	_AGOExit
.1071	e0 ca		cpx #$ca			cpx 	#TKW_COLON
.1073	f0 3d		beq $10b2			beq 	_AGOExit
.1075	c8		iny				iny 								; consume the token
.1076	a9 00		lda #$00			lda 	#AMD_IMM
.1078	e0 e7		cpx #$e7			cpx 	#TKW_HASH 					; if a hash present, then immediate mode.
.107a	f0 2d		beq $10a9			beq		_AGOEvalExit 				; with an operand.
.107c	e0 a4		cpx #$a4			cpx 	#TKW_LPAREN 				; left bracket ?
.107e	f0 40		beq $10c0			beq 	_AGOIndirect
.1080	e0 01		cpx #$01			cpx 	#$01 						; is it "A" e.g. the variable A.
.1082	d0 0b		bne $108f			bne 	_AGOZeroPage1 				; if not it is zero zero,x zero,y, unpick 1 iny
.1084	b1 28		lda ($28),y			lda 	(codePtr),y 				; get the second character & consume it
.1086	c8		iny				iny
.1087	aa		tax				tax
.1088	a9 02		lda #$02			lda 	#AMD_ACCIMP 				; and return Acc/Implied if it is just A
.108a	e0 3a		cpx #$3a			cpx 	#$3A
.108c	f0 24		beq $10b2			beq 	_AGOExit
.108e	88		dey				dey 								; unpick 2 iny
.108f					_AGOZeroPage1:
.108f	88		dey				dey
.1090	a9 00		lda #$00			lda 	#0 							; get the address into esInt0/1
.1092	a2 0a		ldx #$0a		ldx	#10
.1094	20 88 3d	jsr $3d88		jsr	mainHandler
.1097	20 ef 10	jsr $10ef			jsr 	AsmGetIndexing
.109a	a9 01		lda #$01			lda 	#AMD_ZERO
.109c	90 14		bcc $10b2			bcc 	_AGOExit
.109e	a9 05		lda #$05			lda 	#AMD_ZEROX
.10a0	e0 00		cpx #$00			cpx 	#0
.10a2	f0 0e		beq $10b2			beq 	_AGOExit
.10a4	a9 09		lda #$09			lda 	#AMD_ZEROY
.10a6	4c b2 10	jmp $10b2			jmp 	_AGOExit
.10a9					_AGOEvalExit:
.10a9	48		pha				pha
.10aa	a9 00		lda #$00			lda 	#0 							; evaluate operand in root.
.10ac	a2 0a		ldx #$0a		ldx	#10
.10ae	20 88 3d	jsr $3d88		jsr	mainHandler
.10b1	68		pla				pla
.10b2					_AGOExit:
.10b2	48		pha				pha 								; save the mode
.10b3	a5 a8		lda $a8				lda 	esInt2 						; check the operand is zero.
.10b5	05 b0		ora $b0				ora 	esInt3
.10b7	d0 02		bne $10bb			bne 	_AGOValue
.10b9	68		pla				pla
.10ba	60		rts				rts
.10bb					_AGOValue:
.10bb	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.10bd	20 18 15	jsr $1518		jsr	errorHandler
.10c0					_AGOIndirect:
.10c0	a9 00		lda #$00			lda 	#0 							; evaluate operand in root.
.10c2	a2 0a		ldx #$0a		ldx	#10
.10c4	20 88 3d	jsr $3d88		jsr	mainHandler
.10c7	b1 28		lda ($28),y			lda 	(codePtr),y 				; does ) follow ? if so might be ) or ),Y
.10c9	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.10cb	f0 11		beq $10de			beq 	_AGOIndIndY
.10cd	20 ef 10	jsr $10ef			jsr 	ASMGetIndexing 				; must be ,X)
.10d0	90 39		bcc $110b			bcc 	AGISyntax
.10d2	e0 00		cpx #$00			cpx 	#0
.10d4	d0 35		bne $110b			bne 	AGISyntax
.10d6	a2 04		ldx #$04		ldx	#4
.10d8	20 88 3d	jsr $3d88		jsr	mainHandler
.10db	a9 0d		lda #$0d			lda 	#AMD_ZEROINDX
.10dd	60		rts				rts
.10de					_AGOIndIndY:
.10de	c8		iny				iny
.10df	20 ef 10	jsr $10ef			jsr 	ASMGetIndexing 				; get indexing if any
.10e2	a9 08		lda #$08			lda 	#AMD_ZEROIND
.10e4	90 cc		bcc $10b2			bcc 	_AGOExit 					; none then exit
.10e6	e0 00		cpx #$00			cpx 	#0 							; must be ,Y
.10e8	f0 21		beq $110b			beq 	AGISyntax
.10ea	a9 04		lda #$04			lda 	#AMD_ZEROINDY
.10ec	4c b2 10	jmp $10b2			jmp 	_AGOExit
.10ef					AsmGetIndexing:
.10ef	b1 28		lda ($28),y			lda 	(codePtr),y 				; check for comma
.10f1	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.10f3	18		clc				clc
.10f4	d0 14		bne $110a			bne 	_AGIExit 					; no comma, return with CC
.10f6	c8		iny				iny 								; get what SHOULD be X or Y
.10f7	b1 28		lda ($28),y			lda 	(codePtr),y  				; read it
.10f9	38		sec				sec 								; subtract 6 bit ASCII of X
.10fa	e9 18		sbc #$18			sbc 	#"X" & $3F
.10fc	c9 02		cmp #$02			cmp 	#2 							; if unsigned >= 2 then error
.10fe	b0 0b		bcs $110b			bcs 	AGISyntax
.1100	aa		tax				tax 								; put in index
.1101	c8		iny				iny 								; get what follows that, should be the $3A marker
.1102	b1 28		lda ($28),y			lda 	(codePtr),y
.1104	c8		iny				iny
.1105	c9 3a		cmp #$3a			cmp 	#$3A
.1107	d0 02		bne $110b			bne 	AGISyntax
.1109	38		sec				sec 								; return CS and index mode in X
.110a					_AGIExit:
.110a	60		rts				rts
.110b					AGISyntax:
.110b	a2 02		ldx #$02			ldx 	#ErrorID_syntax
.110d	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: assembler/assembler.asm


;******  Processing file: assembler/asmwrite.asm

.0af2					finalOpcode:
>0af2							.fill 	1
.1110					AsmWriteInstruction:
.1110	8d f2 0a	sta $0af2			sta 	finalOpcode					; save opcode.
.1113	98		tya				tya
.1114	48		pha				pha
.1115	ad 38 0a	lda $0a38			lda 	SingleLetterVar+("O"-"A")*4	; check O
.1118	29 02		and #$02			and 	#2
.111a	f0 2d		beq $1149			beq 	_ASMWNoEcho 				; if zero then don't echo.
.111c	ad 3d 0a	lda $0a3d			lda 	SingleLetterVar+("P"-"A")*4+1 ; write address in P
.111f	20 84 11	jsr $1184			jsr 	AWIWriteHex
.1122	ad 3c 0a	lda $0a3c			lda 	SingleLetterVar+("P"-"A")*4
.1125	20 84 11	jsr $1184			jsr 	AWIWriteHex
.1128	ad f2 0a	lda $0af2			lda 	finalOpcode 				; write opcode
.112b	20 7d 11	jsr $117d			jsr 	AWIWriteHexSpace
.112e	e0 00		cpx #$00			cpx 	#0
.1130	f0 0e		beq $1140			beq 	_ASMWEchoExit
.1132	a5 98		lda $98				lda 	esInt0
.1134	20 7d 11	jsr $117d			jsr 	AWIWriteHexSpace
.1137	e0 01		cpx #$01			cpx 	#1
.1139	f0 05		beq $1140			beq 	_ASMWEchoExit
.113b	a5 a0		lda $a0				lda 	esInt1
.113d	20 7d 11	jsr $117d			jsr 	AWIWriteHexSpace
.1140					_ASMWEchoExit:
.1140	8a		txa				txa
.1141	48		pha				pha
.1142	a2 06		ldx #$06		ldx	#6
.1144	20 f6 14	jsr $14f6		jsr	deviceHandler
.1147	68		pla				pla
.1148	aa		tax				tax
.1149					_ASMWNoEcho:
.1149	ad f2 0a	lda $0af2			lda 	finalOpcode
.114c	20 64 11	jsr $1164			jsr 	AsmWriteByte
.114f	e0 00		cpx #$00			cpx 	#0
.1151	f0 0e		beq $1161			beq 	_ASMWExit
.1153	a5 98		lda $98				lda 	esInt0
.1155	20 64 11	jsr $1164			jsr 	AsmWriteByte
.1158	e0 01		cpx #$01			cpx 	#1
.115a	f0 05		beq $1161			beq 	_ASMWExit
.115c	a5 a0		lda $a0				lda 	esInt1
.115e	20 64 11	jsr $1164			jsr 	AsmWriteByte
.1161					_ASMWExit:
.1161	68		pla				pla
.1162	a8		tay				tay
.1163	60		rts				rts
.1164					AsmWriteByte:
.1164	a0 00		ldy #$00			ldy 	#0
.1166	48		pha				pha
.1167	ad 3c 0a	lda $0a3c			lda 	SingleLetterVar+("P"-"A")*4 ; copy address to temp0
.116a	85 2a		sta $2a				sta 	temp0
.116c	ad 3d 0a	lda $0a3d			lda 	SingleLetterVar+("P"-"A")*4+1
.116f	85 2b		sta $2b				sta 	temp0+1
.1171	68		pla				pla 								; write out the byte.
.1172	91 2a		sta ($2a),y			sta 	(temp0),y
.1174	ee 3c 0a	inc $0a3c			inc 	SingleLetterVar+("P"-"A")*4	; increment P
.1177	d0 03		bne $117c			bne 	_AWBNoCarry
.1179	ee 3d 0a	inc $0a3d			inc 	SingleLetterVar+("P"-"A")*4+1
.117c					_AWBNoCarry:
.117c	60		rts				rts
.117d					AWIWriteHexSpace:
.117d	48		pha				pha
.117e	a9 20		lda #$20			lda 	#" "
.1180	20 97 11	jsr $1197			jsr 	AWIPrintChar
.1183	68		pla				pla
.1184					AWIWriteHex:
.1184	48		pha				pha
.1185	4a		lsr a				lsr 	a
.1186	4a		lsr a				lsr 	a
.1187	4a		lsr a				lsr 	a
.1188	4a		lsr a				lsr 	a
.1189	20 8d 11	jsr $118d			jsr 	AWIPrintNibble
.118c	68		pla				pla
.118d					AWIPrintNibble:
.118d	29 0f		and #$0f			and 	#15
.118f	c9 0a		cmp #$0a			cmp 	#10
.1191	90 02		bcc $1195			bcc 	_AWIPNDigit
.1193	69 06		adc #$06			adc 	#6
.1195					_AWIPNDigit:
.1195	69 30		adc #$30			adc 	#48
.1197					AWIPrintChar:
.1197	85 32		sta $32				sta 	tempShort
.1199	8a		txa				txa
.119a	48		pha				pha
.119b	a5 32		lda $32				lda 	tempShort
.119d	a2 16		ldx #$16		ldx	#22
.119f	20 f6 14	jsr $14f6		jsr	deviceHandler
.11a2	68		pla				pla
.11a3	aa		tax				tax
.11a4	60		rts				rts

;******  Return to file: assembler/assembler.asm


;******  Processing file: assembler/assemblecmd.asm

.0af3					asmToken:
>0af3							.fill 	1
.0af4					asmMode:
>0af4							.fill 	1 							; esInt0/1
.0af5					asmBaseOpcode:
>0af5							.fill 	1
.11a5					AssembleOneInstruction:
.11a5	8d f3 0a	sta $0af3			sta 	asmToken 					; save the token
.11a8	aa		tax				tax
.11a9	bd 72 11	lda $1172,x			lda 	OpcodeTable-TKA_GROUP1,x 	; get the base opcode.
.11ac	8d f5 0a	sta $0af5			sta 	asmBaseOpcode
.11af	20 5d 10	jsr $105d			jsr 	AsmGetOperand 				; identify the address mode and operand where applicable.
.11b2	8d f4 0a	sta $0af4			sta 	asmMode
.11b5	a5 a0		lda $a0				lda 	esInt1 						; check if this is a three byte operand.
.11b7	d0 05		bne $11be			bne 	_AOIThreeBytes 				; if so, we have to use three byte
.11b9	20 d4 11	jsr $11d4			jsr 	AssembleAttempt 			; try to assemble token/mode/operand (2 bytes)
.11bc	b0 10		bcs $11ce			bcs 	_AOISuccess 				; worked ok.
.11be					_AOIThreeBytes:
.11be	ae f4 0a	ldx $0af4			ldx 	asmMode 					; convert mode to 3 byte version, where possible.
.11c1	bd f8 11	lda $11f8,x			lda 	AbsoluteVersionTable,x
.11c4	30 09		bmi $11cf			bmi 	_AOIError					; not possible, no equivalent.
.11c6	8d f4 0a	sta $0af4			sta 	asmMode
.11c9	20 d4 11	jsr $11d4			jsr 	AssembleAttempt 			; try to assemble token/mode/operand (3 bytes)
.11cc	90 01		bcc $11cf			bcc 	_AOIError 					; didn't work.
.11ce					_AOISuccess:
.11ce	60		rts				rts
.11cf					_AOIError:
.11cf	a2 24		ldx #$24			ldx 	#ErrorID_Assembler
.11d1	20 18 15	jsr $1518		jsr	errorHandler
.11d4					AssembleAttempt:
.11d4	20 dd 11	jsr $11dd			jsr 	_AADispatch 				; go to the code which dispatches to the appropriate
.11d7	b0 03		bcs $11dc			bcs 	_AAExit 					; exit if carry set, e.g. was successful
.11d9	20 87 13	jsr $1387			jsr 	AssembleSpecialCase
.11dc					_AAExit:
.11dc	60		rts				rts
.11dd					_AADispatch:
.11dd	ad f3 0a	lda $0af3			lda 	asmToken
.11e0	c9 b7		cmp #$b7			cmp 	#TKA_GROUP4
.11e2	b0 11		bcs $11f5			bcs 	_AAGroup4
.11e4	c9 ae		cmp #$ae			cmp 	#TKA_GROUP3
.11e6	b0 0a		bcs $11f2			bcs 	_AAGroup3
.11e8	c9 9c		cmp #$9c			cmp 	#TKA_GROUP2
.11ea	b0 03		bcs $11ef			bcs 	_AAGroup2
.11ec	4c cd 12	jmp $12cd			jmp 	AssembleGroup1
.11ef					_AAGroup2:
.11ef	4c 28 13	jmp $1328			jmp 	AssembleGroup2
.11f2					_AAGroup3:
.11f2	4c 49 13	jmp $1349			jmp 	AssembleGroup3
.11f5					_AAGroup4:
.11f5	4c 7d 13	jmp $137d			jmp 	AssembleGroup4
.11f8					AbsoluteVersionTable:
>11f8	ff						.byte	$FF 			; fail AMD_IMM
>11f9	03						.byte	AMD_ABS 		; absolute AMD_ZERO
>11fa	ff						.byte	$FF 			; fail AMD_ACCIMP
>11fb	ff						.byte	$FF 			; fail AMD_ABS
>11fc	ff						.byte 	$FF 			; fail AMD_ZEROINDY
>11fd	07						.byte	AMD_ABSX 		; absolute AMD_ZEROX
>11fe	ff						.byte	$FF 			; fail AMD_ABSY
>11ff	ff						.byte	$FF 			; fail AMD_ABSX
>1200	0a						.byte	AMD_ABSIND 		; absolute AMD_ZEROIND
>1201	06						.byte	AMD_ABSY 		; absolute AMD_ZEROY
>1202	ff						.byte	$FF 			; fail AMD_ABSIND
>1203	ff						.byte	$FF 			; fail AMD_ABSINDX
>1204	ff						.byte	$FF 			; fail AMD_REL
>1205	0b						.byte 	AMD_ABSINDX 	; absolute AMD_ZEROINDX

;******  Processing file: assembler/../generated/asmtables.inc

.1206					OpcodeTable:
>1206	01					.byte	$01			; $94 ora
>1207	21					.byte	$21			; $95 (and)
>1208	41					.byte	$41			; $96 eor
>1209	61					.byte	$61			; $97 adc
>120a	81					.byte	$81			; $98 sta
>120b	a1					.byte	$a1			; $99 lda
>120c	c1					.byte	$c1			; $9a cmp
>120d	e1					.byte	$e1			; $9b sbc
>120e	02					.byte	$02			; $9c asl
>120f	22					.byte	$22			; $9d rol
>1210	42					.byte	$42			; $9e lsr
>1211	62					.byte	$62			; $9f ror
>1212	82					.byte	$82			; $a0 stx
>1213	a2					.byte	$a2			; $a1 ldx
>1214	c2					.byte	$c2			; $a2 dec
>1215	e2					.byte	$e2			; $a3 inc
>1216	60					.byte	$60			; $a4 stz
>1217	20					.byte	$20			; $a5 bit
>1218	80					.byte	$80			; $a6 sty
>1219	a0					.byte	$a0			; $a7 ldy
>121a	c0					.byte	$c0			; $a8 cpy
>121b	e0					.byte	$e0			; $a9 cpx
>121c	00					.byte	$00			; $aa tsb
>121d	10					.byte	$10			; $ab trb
>121e	14					.byte	$14			; $ac jsr
>121f	40					.byte	$40			; $ad jmp
>1220	10					.byte	$10			; $ae bpl
>1221	30					.byte	$30			; $af bmi
>1222	50					.byte	$50			; $b0 bvc
>1223	70					.byte	$70			; $b1 bvs
>1224	90					.byte	$90			; $b2 bcc
>1225	b0					.byte	$b0			; $b3 bcs
>1226	d0					.byte	$d0			; $b4 bne
>1227	f0					.byte	$f0			; $b5 beq
>1228	80					.byte	$80			; $b6 bra
>1229	00					.byte	$00			; $b7 brk
>122a	08					.byte	$08			; $b8 php
>122b	18					.byte	$18			; $b9 clc
>122c	28					.byte	$28			; $ba plp
>122d	38					.byte	$38			; $bb sec
>122e	40					.byte	$40			; $bc rti
>122f	48					.byte	$48			; $bd pha
>1230	58					.byte	$58			; $be cli
>1231	5a					.byte	$5a			; $bf phy
>1232	60					.byte	$60			; $c0 rts
>1233	68					.byte	$68			; $c1 pla
>1234	78					.byte	$78			; $c2 sei
>1235	7a					.byte	$7a			; $c3 ply
>1236	88					.byte	$88			; $c4 dey
>1237	8a					.byte	$8a			; $c5 txa
>1238	98					.byte	$98			; $c6 tya
>1239	9a					.byte	$9a			; $c7 txs
>123a	a8					.byte	$a8			; $c8 tay
>123b	aa					.byte	$aa			; $c9 tax
>123c	b8					.byte	$b8			; $ca clv
>123d	ba					.byte	$ba			; $cb tsx
>123e	c8					.byte	$c8			; $cc iny
>123f	ca					.byte	$ca			; $cd dex
>1240	d8					.byte	$d8			; $ce cld
>1241	da					.byte	$da			; $cf phx
>1242	e8					.byte	$e8			; $d0 inx
>1243	ea					.byte	$ea			; $d1 nop
>1244	f8					.byte	$f8			; $d2 sed
>1245	fa					.byte	$fa			; $d3 plx
.1246					Group2OpcodeAvailability:
>1246	ae					.byte	$ae			; $9c asl $02
>1247	ae					.byte	$ae			; $9d rol $22
>1248	ae					.byte	$ae			; $9e lsr $42
>1249	ae					.byte	$ae			; $9f ror $62
>124a	0a					.byte	$0a			; $a0 stx $82
>124b	0b					.byte	$0b			; $a1 ldx $a2
>124c	aa					.byte	$aa			; $a2 dec $c2
>124d	aa					.byte	$aa			; $a3 inc $e2
>124e	22					.byte	$22			; $a4 stz $60
>124f	aa					.byte	$aa			; $a5 bit $20
>1250	2a					.byte	$2a			; $a6 sty $80
>1251	ab					.byte	$ab			; $a7 ldy $a0
>1252	2b					.byte	$2b			; $a8 cpy $c0
>1253	0b					.byte	$0b			; $a9 cpx $e0
>1254	0a					.byte	$0a			; $aa tsb $00
>1255	0a					.byte	$0a			; $ab trb $10
>1256	08					.byte	$08			; $ac jsr $14
>1257	08					.byte	$08			; $ad jmp $40
.1258					AssemblerSpecialCases:
>1258	ad 0a 6c				.byte	$ad,10,$6c		; jmp (abs)
>125b	ad 0b 7c				.byte	$ad,11,$7c		; jmp (abs,x)
>125e	a1 06 be				.byte	$a1,6,$be		; ldx abs,y
>1261	a1 09 b6				.byte	$a1,9,$b6		; ldx zp,y
>1264	a0 09 96				.byte	$a0,9,$96		; stx zp,y
>1267	a3 02 1a				.byte	$a3,2,$1a		; inc acc
>126a	a2 02 3a				.byte	$a2,2,$3a		; dec acc
>126d	a5 00 89				.byte	$a5,0,$89		; bit #
>1270	a4 03 9c				.byte	$a4,3,$9c		; stz abs
>1273	a4 07 9e				.byte	$a4,7,$9e		; stz abs,x
>1276	00					.byte	0

;******  Return to file: assembler/assemblecmd.asm


;******  Return to file: assembler/assembler.asm


;******  Processing file: assembler/assemblelabel.asm

.1277					AssembleLabel:
.1277	b1 28		lda ($28),y			lda 	(codePtr),y 				; check it's followed by a variable name.
.1279	c9 3a		cmp #$3a			cmp 	#$3A
.127b	b0 4b		bcs $12c8			bcs 	_ALSyntax
.127d	a9 00		lda #$00			lda 	#0							; get a variable name on to stack:0
.127f	a2 02		ldx #$02		ldx	#2
.1281	20 9a 4c	jsr $4c9a		jsr	variableHandler
.1284	a5 90		lda $90				lda 	esType 						; check integer reference
.1286	c9 80		cmp #$80			cmp 	#$80
.1288	d0 3e		bne $12c8			bne 	_ALSyntax
.128a	a5 98		lda $98				lda 	esInt0 						; copy that reference address to temp0
.128c	85 2a		sta $2a				sta 	temp0
.128e	a5 a0		lda $a0				lda 	esInt1
.1290	85 2b		sta $2b				sta 	temp0+1
.1292	98		tya				tya
.1293	48		pha				pha
.1294	ad 38 0a	lda $0a38			lda 	SingleLetterVar+("O"-"A")*4	; are we in Pass 2
.1297	4a		lsr a				lsr 	a
.1298	90 11		bcc $12ab			bcc 	_ALWrite
.129a	a0 00		ldy #$00			ldy 	#0
.129c	ad 3c 0a	lda $0a3c			lda 	SingleLetterVar+("P"-"A")*4 ; compare the value in P to the variable
.129f	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.12a1	d0 20		bne $12c3			bne 	_ALChanged
.12a3	c8		iny				iny
.12a4	ad 3d 0a	lda $0a3d			lda 	SingleLetterVar+("P"-"A")*4+1
.12a7	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.12a9	d0 18		bne $12c3			bne 	_ALChanged
.12ab					_ALWrite:
.12ab	a0 00		ldy #$00			ldy 	#0
.12ad	ad 3c 0a	lda $0a3c			lda 	SingleLetterVar+("P"-"A")*4 ; copy the value in P into the variable
.12b0	91 2a		sta ($2a),y			sta 	(temp0),y
.12b2	ad 3d 0a	lda $0a3d			lda 	SingleLetterVar+("P"-"A")*4+1
.12b5	c8		iny				iny
.12b6	91 2a		sta ($2a),y			sta 	(temp0),y
.12b8	a9 00		lda #$00			lda 	#0
.12ba	c8		iny				iny
.12bb	91 2a		sta ($2a),y			sta 	(temp0),y
.12bd	c8		iny				iny
.12be	91 2a		sta ($2a),y			sta 	(temp0),y
.12c0	68		pla				pla
.12c1	a8		tay				tay
.12c2	60		rts				rts
.12c3					_ALChanged:
.12c3	a2 26		ldx #$26			ldx 	#ErrorID_Label
.12c5	20 18 15	jsr $1518		jsr	errorHandler
.12c8					_ALSyntax:
.12c8	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.12ca	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: assembler/assembler.asm


;******  Processing file: assembler/subgroup.asm

.12cd					AssembleGroup1:
.12cd	ad f3 0a	lda $0af3			lda 	asmToken 					; firstly, we throw out STA immediate
.12d0	c9 98		cmp #$98			cmp 	#TKW_STA
.12d2	d0 07		bne $12db			bne 	_AG1NotStoreImm
.12d4	ad f4 0a	lda $0af4			lda 	asmMode
.12d7	c9 00		cmp #$00			cmp 	#AMD_IMM
.12d9	f0 2c		beq $1307			beq 	AG1ModeError
.12db					_AG1NotStoreImm:
.12db	ae f4 0a	ldx $0af4			ldx 	asmMode						; get mode into X.
.12de	bd 0c 13	lda $130c,x			lda		AMDOperandSize,X 			; get the size of the operand and push on stack
.12e1	48		pha				pha
.12e2	f0 23		beq $1307			beq 	AG1ModeError 				; if the size is zero, the mode must be Accumulator
.12e4	e0 00		cpx #$00			cpx 	#0 							; if the mode is zero, e.g. immediate
.12e6	d0 02		bne $12ea			bne 	_AG1NotImmediate
.12e8	a2 02		ldx #$02			ldx 	#2 							; then we use offset 2 here. This is how the 6502
.12ea					_AG1NotImmediate:
.12ea	e0 0d		cpx #$0d			cpx 	#AMD_ZEROINDX 				; (zero,x) uses slot 0.
.12ec	d0 02		bne $12f0			bne 	_AG1NotZX
.12ee	a2 00		ldx #$00			ldx 	#0
.12f0					_AG1NotZX:
.12f0	68		pla				pla 								; restore length
.12f1	e0 09		cpx #$09			cpx 	#9 							; anything > 8 fails.
.12f3	b0 10		bcs $1305			bcs 	AG1Fail
.12f5					AG1ReturnValue:
.12f5	85 32		sta $32				sta 	tempShort 					; save size of operand
.12f7	18		clc				clc
.12f8	bd 1a 13	lda $131a,x			lda 	AMDOffsetFromBase,X 		; get the offset for the address mode.
.12fb	6d f5 0a	adc $0af5			adc 	asmBaseOpcode 				; add the base opcode.
.12fe	a6 32		ldx $32				ldx 	tempShort 					; length in X
.1300	20 10 11	jsr $1110			jsr 	AsmWriteInstruction 		; output instruction.
.1303	38		sec				sec
.1304	60		rts				rts
.1305					AG1Fail:
.1305	18		clc				clc
.1306	60		rts				rts
.1307					AG1ModeError:
.1307	a2 24		ldx #$24			ldx 	#ErrorID_Assembler
.1309	20 18 15	jsr $1518		jsr	errorHandler
.130c					AMDOperandSize:
>130c	01 01 00 02					.byte 	1,1,0,2
>1310	01 01 02 02					.byte 	1,1,2,2
>1314	01 01 02 02					.byte 	1,1,2,2
>1318	01 01						.byte 	1,1
.131a					AMDOffsetFromBase:
>131a	00 04 08 0c					.byte 	0,4,8,12
>131e	10 14 18 1c					.byte	16,20,24,28
>1322	11 00 00 00					.byte 	17,0,0,0
>1326	00 00						.byte 	0,0
.1328					AssembleGroup2:
.1328	ad f4 0a	lda $0af4			lda 	asmMode 					; get the mode; if >= 8 cannot be a legit group 2
.132b	c9 08		cmp #$08			cmp 	#8
.132d	b0 18		bcs $1347			bcs 	_AG2Fail
.132f	85 2a		sta $2a				sta 	temp0 						; save in temp9
.1331	ae f3 0a	ldx $0af3			ldx 	asmToken					; get token in X, then get the availability flags for it
.1334	bd aa 11	lda $11aa,x			lda 	Group2OpcodeAvailability-TKA_GROUP2,x
.1337					_AG2Shift:
.1337	4a		lsr a				lsr 	a
.1338	c6 2a		dec $2a				dec 	temp0
.133a	10 fb		bpl $1337			bpl 	_AG2Shift
.133c	90 09		bcc $1347			bcc 	_AG2Fail 					; cannot do that instruction w/that opcode.
.133e	ae f4 0a	ldx $0af4			ldx  	asmMode 					; mode in X
.1341	bd 0c 13	lda $130c,x			lda		AMDOperandSize,X 			; get the size of the operand in A
.1344	4c f5 12	jmp $12f5			jmp 	AG1ReturnValue 				; and use that with Group 1's exit code
.1347					_AG2Fail:
.1347	18		clc				clc
.1348	60		rts				rts
.1349					AssembleGroup3:
.1349	ad 38 0a	lda $0a38			lda 	SingleLetterVar+("O"-"A")*4	; check bit 0 (pass) of O
.134c	4a		lsr a				lsr 	a
.134d	a9 00		lda #$00			lda 	#0 							; if clear, e.g. pass 1, use default zero.
.134f	90 21		bcc $1372			bcc 	_AG3Default
.1351	38		sec				sec	 								; calculate branch offset
.1352	a5 98		lda $98				lda		esInt0
.1354	ed 3c 0a	sbc $0a3c			sbc 	SingleLetterVar+("P"-"A")*4
.1357	aa		tax				tax
.1358	a5 a0		lda $a0				lda		esInt1
.135a	ed 3d 0a	sbc $0a3d			sbc 	SingleLetterVar+("P"-"A")*4+1
.135d	85 a0		sta $a0				sta 	esInt1
.135f	8a		txa				txa 								; add 126, now 128 too many.
.1360	18		clc				clc 								; we can use this to check the range
.1361	69 7e		adc #$7e			adc 	#126
.1363	85 98		sta $98				sta 	esInt0
.1365	90 02		bcc $1369			bcc 	_AG3NoCarry
.1367	e6 a0		inc $a0				inc 	esInt1
.1369					_AG3NoCarry:
.1369	a5 a0		lda $a0				lda 	esInt1 						; check in range.
.136b	d0 0b		bne $1378			bne 	_AG3Range
.136d	a5 98		lda $98				lda 	esInt0 						; fix up branch distance
.136f	38		sec				sec
.1370	e9 80		sbc #$80			sbc 	#128
.1372					_AG3Default:
.1372	85 98		sta $98				sta 	esInt0
.1374					_AG3ExitOk:
.1374	a2 01		ldx #$01			ldx 	#1 							; one opcode, use AG4 Code
.1376	d0 07		bne $137f			bne 	AG4Write
.1378					_AG3Range:
.1378	a2 25		ldx #$25			ldx 	#ErrorID_Branch
.137a	20 18 15	jsr $1518		jsr	errorHandler
.137d					AssembleGroup4:
.137d	a2 00		ldx #$00			ldx 	#0 							; no parameters in the opcode.
.137f					AG4Write:
.137f	ad f5 0a	lda $0af5			lda 	asmBaseOpcode				; the opcode is the opcode base.
.1382	20 10 11	jsr $1110			jsr 	AsmWriteInstruction 		; output instruction.
.1385	38		sec				sec
.1386	60		rts				rts
.1387					AssembleSpecialCase:
.1387	a2 00		ldx #$00			ldx 	#0
.1389					_ASCScan:
.1389	bd 58 12	lda $1258,x			lda 	AssemblerSpecialCases,x 	; scan token and mode for match
.138c	cd f3 0a	cmp $0af3			cmp 	asmToken
.138f	d0 08		bne $1399			bne 	_ASCNext
.1391	bd 59 12	lda $1259,x			lda 	AssemblerSpecialCases+1,x
.1394	cd f4 0a	cmp $0af4			cmp 	asmMode
.1397	f0 0a		beq $13a3			beq 	_ASCFound
.1399					_ASCNext:
.1399	e8		inx				inx									; next entry
.139a	e8		inx				inx
.139b	e8		inx				inx
.139c	bd 58 12	lda $1258,x			lda 	AssemblerSpecialCases,x 	; until table ends
.139f	d0 e8		bne $1389			bne 	_ASCScan
.13a1	18		clc				clc
.13a2	60		rts				rts
.13a3					_ASCFound:
.13a3	bd 5a 12	lda $125a,x			lda 	AssemblerSpecialCases+2,x 	; get the new opcode.
.13a6	48		pha				pha
.13a7	ae f4 0a	ldx $0af4			ldx  	asmMode 					; mode in X
.13aa	bd 0c 13	lda $130c,x			lda		AMDOperandSize,X 			; get the size of the operand in X
.13ad	aa		tax				tax
.13ae	68		pla				pla 								; opcode back
.13af	20 10 11	jsr $1110			jsr 	AsmWriteInstruction 		; output instruction.
.13b2	38		sec				sec
.13b3	60		rts				rts

;******  Return to file: assembler/assembler.asm

.13b4					assemblerHandler:
.13b4	7c b7 13	jmp ($13b7,x)			jmp 	(assemblerVectors,x)
.13b7					assemblerVectors:
>13b7	bd 13					.word _DummyControlHandler ; index 0
>13b9	a5 11					.word AssembleOneInstruction ; index 2
>13bb	77 12					.word AssembleLabel        ; index 4
.13bd					_DummyControlHandler:
.13bd	60		rts			rts

;******  Return to file: basic.asm

.13be					section_end_assembler:
.13be					section_start_device:

;******  Processing file: device/device.asm


;******  Processing file: device/option_x16/x16break.asm

.13be					X16Break:
.13be	20 e1 ff	jsr $ffe1			jsr 	$FFE1
.13c1	f0 01		beq $13c4			beq 	_IsBreak
.13c3	60		rts				rts
.13c4					_IsBreak:
.13c4	a2 21		ldx #$21			ldx 	#ErrorID_Break
.13c6	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: device/device.asm


;******  Processing file: device/option_x16/x16file.asm

.13c9					ExternSave:
.13c9	98		tya				tya
.13ca	48		pha				pha
.13cb	20 19 14	jsr $1419			jsr 	ExternGetLength 			; get length of file into A name YX
.13ce	20 bd ff	jsr $ffbd			jsr 	$FFBD 						; set name
.13d1	a9 01		lda #$01			lda 	#1
.13d3	a2 08		ldx #$08			ldx 	#8	 						; device #8
.13d5	a0 00		ldy #$00			ldy 	#0
.13d7	20 ba ff	jsr $ffba			jsr 	$FFBA 						; set LFS
.13da	a5 99		lda $99				lda 	esInt0+1 					; copy start of save address to temp0
.13dc	85 2a		sta $2a				sta 	temp0
.13de	a5 a1		lda $a1				lda 	esInt1+1
.13e0	85 2b		sta $2b				sta 	temp0+1
.13e2	a6 9a		ldx $9a				ldx 	esInt0+2 					; end address
.13e4	a4 a2		ldy $a2				ldy 	esInt1+2
.13e6	a9 2a		lda #$2a			lda 	#temp0 						; ref to start address
.13e8	20 d8 ff	jsr $ffd8			jsr 	$FFD8 						; save
.13eb	b0 03		bcs $13f0			bcs 	_ESSave
.13ed	68		pla				pla
.13ee	a8		tay				tay
.13ef	60		rts				rts
.13f0					_ESSave:
.13f0	a2 1f		ldx #$1f			ldx 	#ErrorID_Save
.13f2	20 18 15	jsr $1518		jsr	errorHandler
.13f5					ExternLoad:
.13f5	98		tya				tya
.13f6	48		pha				pha
.13f7	20 19 14	jsr $1419			jsr 	ExternGetLength 			; get length of file into A name YX
.13fa	20 bd ff	jsr $ffbd			jsr 	$FFBD 						; set name
.13fd	a9 01		lda #$01			lda 	#1
.13ff	a2 08		ldx #$08			ldx 	#8	 						; device #8
.1401	a0 00		ldy #$00			ldy 	#0
.1403	20 ba ff	jsr $ffba			jsr 	$FFBA 						; set LFS
.1406	a6 99		ldx $99				ldx 	esInt0+1 					; load address
.1408	a4 a1		ldy $a1				ldy 	esInt1+1
.140a	a9 00		lda #$00			lda 	#0 							; load command
.140c	20 d5 ff	jsr $ffd5			jsr 	$FFD5
.140f	b0 03		bcs $1414			bcs 	_ESLoad
.1411	68		pla				pla
.1412	a8		tay				tay
.1413	60		rts				rts
.1414					_ESLoad:
.1414	a2 20		ldx #$20			ldx 	#ErrorID_Load
.1416	20 18 15	jsr $1518		jsr	errorHandler
.1419					ExternGetLength:
.1419	a5 98		lda $98				lda 	esInt0 						; length into A.
.141b	85 2a		sta $2a				sta 	temp0
.141d	a5 a0		lda $a0				lda 	esInt1
.141f	85 2b		sta $2b				sta 	temp0+1
.1421	a0 00		ldy #$00			ldy 	#0
.1423	b1 2a		lda ($2a),y			lda 	(temp0),y
.1425	a6 98		ldx $98				ldx 	esInt0 						; name into YX
.1427	a4 a0		ldy $a0				ldy 	esInt1
.1429	e8		inx				inx 								; advance over the length pointer.
.142a	d0 01		bne $142d			bne 	_ESNoCarry
.142c	c8		iny				iny
.142d					_ESNoCarry:
.142d	60		rts				rts

;******  Return to file: device/device.asm


;******  Processing file: device/option_x16/x16io.asm

=240					MaxLineInputSize = 240
.0af6					bufferCount:
>0af6							.fill 	0
.0af6					bufferStorage:
>0af6							.fill 	MaxLineInputSize
.142e					IOControlHandler:
.142e	c9 00		cmp #$00			cmp 	#0
.1430	d0 12		bne $1444			bne		_CHExit
.1432	a9 0f		lda #$0f			lda 	#15 						; switch to upper/lower case mode
.1434	20 5d 14	jsr $145d			jsr 	IOPrintChar
.1437	a9 02		lda #$02			lda 	#2 							; green on black and clear screen
.1439	20 89 14	jsr $1489			jsr 	IOInk
.143c	a9 00		lda #$00			lda 	#0
.143e	20 9d 14	jsr $149d			jsr 	IOPaper
.1441	20 45 14	jsr $1445			jsr 	IOClearScreen
.1444					_CHExit:
.1444	60		rts				rts
.1445					IOClearScreen:
.1445	48		pha				pha
.1446	a9 93		lda #$93			lda	 	#147 						; char code $93 clears screen
.1448	20 5d 14	jsr $145d			jsr 	IOPrintChar
.144b	68		pla				pla
.144c	60		rts				rts
.144d					IONewLine:
.144d	48		pha				pha
.144e	a9 0d		lda #$0d			lda 	#13
.1450	20 5d 14	jsr $145d			jsr 	IOPrintChar
.1453	68		pla				pla
.1454	60		rts				rts
.1455					IOTab:
.1455	48		pha				pha
.1456	a9 20		lda #$20			lda 	#32
.1458	20 5d 14	jsr $145d			jsr 	IOPrintChar
.145b	68		pla				pla
.145c	60		rts				rts
.145d					IOPrintAscii:
.145d					IOPrintChar:
.145d	aa		tax				tax 								; save in X so we can save Y
.145e	5a		phy				phy
.145f	8a		txa				txa
.1460	c9 08		cmp #$08			cmp 	#8 							; make BS (8) onto CHR$(14) which is the
.1462	d0 02		bne $1466			bne 	_IOPCNotBS 					; Commodore/X16 backspace code.
.1464	a9 14		lda #$14			lda 	#$14
.1466					_IOPCNotBS:
.1466	20 d2 ff	jsr $ffd2			jsr 	$FFD2 						; CBM OS Call.
.1469	7a		ply				ply
.146a	60		rts				rts
.146b					IOInkey:
.146b	98		tya				tya
.146c	48		pha				pha
.146d	20 e4 ff	jsr $ffe4			jsr 	$FFE4
.1470	85 32		sta $32				sta 	tempShort
.1472	68		pla				pla
.1473	a8		tay				tay
.1474	a5 32		lda $32				lda 	tempShort					; no key pressed.
.1476	f0 10		beq $1488			beq 	_IOIExit
.1478	c9 0d		cmp #$0d			cmp 	#13 						; allow CR (13)
.147a	f0 0c		beq $1488			beq 	_IOIExit
.147c	c9 14		cmp #$14			cmp 	#$14 						; backspace code ($14) returns 8.
.147e	f0 06		beq $1486			beq 	_IOIBackspace
.1480	c9 20		cmp #$20			cmp 	#32 						; no other control allowed.
.1482	90 e7		bcc $146b			bcc 	IOInkey
.1484	b0 02		bcs $1488			bcs 	_IOIExit
.1486					_IOIBackspace:
.1486	a9 08		lda #$08			lda 	#8 							; return chr(8)
.1488					_IOIExit:
.1488	60		rts				rts
.1489					IOInk:
.1489	48		pha				pha
.148a	29 07		and #$07			and 	#7 							; 8 primaries
.148c	aa		tax				tax
.148d	bd 95 14	lda $1495,x			lda 	_IOColourTable,x 			; look up CBM code and print it.
.1490	20 5d 14	jsr $145d			jsr 	IOPrintChar
.1493	68		pla				pla
.1494	60		rts				rts
.1495					_IOColourTable:
>1495	90						.byte 	$90 					; 0 Black
>1496	96						.byte 	$96 					; 1 Red
>1497	1e						.byte 	$1E 					; 2 Green
>1498	9e						.byte 	$9E 					; 3 Yellow
>1499	9a						.byte 	$9A 					; 4 Blue
>149a	9c						.byte 	$9C 					; 5 Magenta
>149b	9f						.byte 	$9F 					; 6 Cyan
>149c	05						.byte 	$05 					; 7 White
.149d					IOPaper:
.149d	48		pha				pha
.149e	48		pha				pha
.149f	a9 01		lda #$01			lda 	#1 						; 1 swaps fgr/bgr, so we swap them, set fgr
.14a1	20 5d 14	jsr $145d			jsr 	IOPrintChar 			; and then swap them again.
.14a4	68		pla				pla
.14a5	20 89 14	jsr $1489			jsr 	IOInk
.14a8	a9 01		lda #$01			lda 	#1
.14aa	20 5d 14	jsr $145d			jsr 	IOPrintChar
.14ad	68		pla				pla
.14ae	60		rts				rts
.14af					IOLocate:
.14af	48		pha				pha
.14b0	a9 13		lda #$13			lda 	#$13 					; home cursor code
.14b2	20 5d 14	jsr $145d			jsr 	IOPrintChar
.14b5	a9 11		lda #$11			lda 	#$11 	 				; print Y x $11 (down)
.14b7	20 be 14	jsr $14be			jsr 	_IOLoc2
.14ba	68		pla				pla
.14bb	a8		tay				tay
.14bc	a9 1d		lda #$1d			lda 	#$1D 					; print Y x $1D (right)
.14be					_IOLoc2:
.14be	c0 00		cpy #$00			cpy 	#0
.14c0	f0 06		beq $14c8			beq 	_IOLocExit
.14c2	20 5d 14	jsr $145d			jsr 	IOPrintChar
.14c5	88		dey				dey
.14c6	d0 f6		bne $14be			bne 	_IOLoc2
.14c8					_IOLocExit:
.14c8	60		rts				rts
.14c9					IOInput:
.14c9	a9 00		lda #$00			lda 	#0
.14cb	8d f6 0a	sta $0af6			sta 	bufferCount
.14ce					_IOILoop:
.14ce	20 cf ff	jsr $ffcf			jsr 	$FFCF
.14d1	c9 0d		cmp #$0d			cmp 	#13
.14d3	f0 10		beq $14e5			beq 	_IOIExit
.14d5	ae f6 0a	ldx $0af6			ldx 	bufferCount
.14d8	e0 f0		cpx #$f0			cpx 	#MaxLineInputSize
.14da	f0 f2		beq $14ce			beq 	_IOILoop
.14dc	ee f6 0a	inc $0af6			inc 	bufferCount
.14df	9d f7 0a	sta $0af7,x			sta 	bufferStorage+1,x
.14e2	4c ce 14	jmp $14ce			jmp 	_IOILoop
.14e5					_IOIExit:
.14e5	a9 f6		lda #$f6			lda 	#(bufferCount) & $FF
.14e7	85 2a		sta $2a				sta 	temp0
.14e9	a9 0a		lda #$0a			lda 	#(bufferCount) >> 8
.14eb	85 2b		sta $2b				sta 	1+(temp0)
.14ed	60		rts				rts

;******  Return to file: device/device.asm


;******  Processing file: device/option_x16/x16timer.asm

.14ee					IOReadTimer:
.14ee	20 de ff	jsr $ffde			jsr 	$FFDE 						; reads timer into YXA so we want only YA
.14f1	48		pha				pha
.14f2	8a		txa				txa
.14f3	a8		tay				tay
.14f4	68		pla				pla
.14f5	60		rts				rts

;******  Return to file: device/device.asm

.14f6					deviceHandler:
.14f6	7c f9 14	jmp ($14f9,x)			jmp 	(deviceVectors,x)
.14f9					deviceVectors:
>14f9	2e 14					.word IOControlHandler     ; index 0
>14fb	be 13					.word X16Break             ; index 2
>14fd	45 14					.word IOClearScreen        ; index 4
>14ff	4d 14					.word IONewLine            ; index 6
>1501	89 14					.word IOInk                ; index 8
>1503	6b 14					.word IOInkey              ; index 10
>1505	c9 14					.word IOInput              ; index 12
>1507	f5 13					.word ExternLoad           ; index 14
>1509	af 14					.word IOLocate             ; index 16
>150b	9d 14					.word IOPaper              ; index 18
>150d	5d 14					.word IOPrintChar          ; index 20
>150f	5d 14					.word IOPrintAscii         ; index 22
>1511	c9 13					.word ExternSave           ; index 24
>1513	55 14					.word IOTab                ; index 26
>1515	ee 14					.word IOReadTimer          ; index 28
.1517					_DummyControlHandler:
.1517	60		rts			rts

;******  Return to file: basic.asm

.1518					section_end_device:
.1518					section_start_error:

;******  Processing file: error/error.asm


;******  Processing file: error/errorhandler.asm

.1518					ErrorHandler:
.1518	8a		txa				txa
.1519	48		pha				pha
.151a	a9 01		lda #$01			lda 	#1 							; red
.151c	a2 08		ldx #$08		ldx	#8
.151e	20 f6 14	jsr $14f6		jsr	deviceHandler
.1521	68		pla				pla
.1522	aa		tax				tax
.1523	a9 8e		lda #$8e			lda 	#(ErrorTextList) & $FF
.1525	85 2a		sta $2a				sta 	temp0
.1527	a9 15		lda #$15			lda 	#(ErrorTextList) >> 8
.1529	85 2b		sta $2b				sta 	1+(temp0)
.152b	ca		dex		_EHFind:dex									; errors start at 1
.152c	f0 10		beq $153e			beq 	_EHFound
.152e	a0 00		ldy #$00			ldy 	#0 							; goto next text message, add length + 1 to the pointer.
.1530	38		sec				sec
.1531	a5 2a		lda $2a				lda 	temp0
.1533	71 2a		adc ($2a),y			adc 	(temp0),y
.1535	85 2a		sta $2a				sta 	temp0
.1537	90 f2		bcc $152b			bcc 	_EHFind
.1539	e6 2b		inc $2b				inc 	temp0+1
.153b	4c 2b 15	jmp $152b			jmp 	_EHFind
.153e					_EHFound:
.153e	20 52 18	jsr $1852			jsr 	EHPrintAscii 				; print the string "temp0" now points to.
.1541	a0 00		ldy #$00			ldy 	#0 							; in a line, e.g. the offset to next is non zero.
.1543	b1 28		lda ($28),y			lda 	(codePtr),y
.1545	f0 39		beq $1580			beq 	_EHNoLine
.1547	a5 29		lda $29				lda 	codePtr+1 					; code running from the command line.
.1549	cd c9 0a	cmp $0ac9			cmp 	basePage+1
.154c	90 32		bcc $1580			bcc 	_EHNoLine
.154e	a9 8a		lda #$8a			lda 	#(EHAtMsg) & $FF
.1550	85 2a		sta $2a				sta 	temp0
.1552	a9 15		lda #$15			lda 	#(EHAtMsg) >> 8
.1554	85 2b		sta $2b				sta 	1+(temp0)
.1556	20 52 18	jsr $1852			jsr 	EHPrintAscii
.1559	a0 01		ldy #$01			ldy 	#1 							; set up line number in TOS
.155b	a2 00		ldx #$00			ldx 	#0
.155d	b1 28		lda ($28),y			lda 	(codePtr),y
.155f	95 98		sta $98,x			sta 	esInt0,x
.1561	c8		iny				iny
.1562	b1 28		lda ($28),y			lda 	(codePtr),y
.1564	95 a0		sta $a0,x			sta 	esInt1,x
.1566	a9 00		lda #$00			lda 	#0
.1568	95 a8		sta $a8,x			sta 	esInt2,x
.156a	95 b0		sta $b0,x			sta 	esInt3,x
.156c	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.156e	85 2a		sta $2a				sta 	temp0
.1570	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.1572	85 2b		sta $2b				sta 	1+(temp0)
.1574	a0 0a		ldy #$0a			ldy 	#10 						; in base 10.
.1576	a9 00		lda #$00			lda 	#0							; stack position zero.
.1578	a2 12		ldx #$12		ldx	#18
.157a	20 88 3d	jsr $3d88		jsr	mainHandler
.157d	20 52 18	jsr $1852			jsr 	EHPrintAscii
.1580					_EHNoLine:
.1580	a2 06		ldx #$06		ldx	#6
.1582	20 f6 14	jsr $14f6		jsr	deviceHandler
.1585	a2 04		ldx #$04		ldx	#4
.1587	20 ea 26	jsr $26ea		jsr	interactionHandler
.158a					EHAtMsg:
>158a	03 20 40 20					.text 	3," @ "

;******  Processing file: error/../generated/errortext.inc

.158e					ErrorTextList:
>158e	13 46 65 61 74 75 72 65			.text 19,"Feature not Present"
>1596	20 6e 6f 74 20 50 72 65 73 65 6e 74
>15a2	0c 53 79 6e 74 61 78 20			.text 12,"Syntax Error"
>15aa	45 72 72 6f 72
>15af	0f 4d 6f 64 75 6c 65 20			.text 15,"Module disabled"
>15b7	64 69 73 61 62 6c 65 64
>15bf	10 41 73 73 65 72 74 69			.text 16,"Assertion failed"
>15c7	6f 6e 20 66 61 69 6c 65 64
>15d0	0e 44 69 76 69 64 65 20			.text 14,"Divide By Zero"
>15d8	42 79 20 5a 65 72 6f
>15df	04 53 74 6f 70				.text 4,"Stop"
>15e4	0d 54 79 70 65 20 4d 69			.text 13,"Type Mismatch"
>15ec	73 6d 61 74 63 68
>15f2	0d 49 6c 6c 65 67 61 6c			.text 13,"Illegal Value"
>15fa	20 56 61 6c 75 65
>1600	15 4d 69 73 73 69 6e 67			.text 21,"Missing right bracket"
>1608	20 72 69 67 68 74 20 62 72 61 63 6b 65 74
>1616	0d 4d 69 73 73 69 6e 67			.text 13,"Missing comma"
>161e	20 63 6f 6d 6d 61
>1624	11 4d 69 73 73 69 6e 67			.text 17,"Missing reference"
>162c	20 72 65 66 65 72 65 6e 63 65
>1636	15 4c 69 6e 65 20 4e 75			.text 21,"Line Number not found"
>163e	6d 62 65 72 20 6e 6f 74 20 66 6f 75 6e 64
>164c	0f 53 74 72 69 6e 67 20			.text 15,"String too long"
>1654	74 6f 6f 20 6c 6f 6e 67
>165c	14 52 45 54 55 52 4e 20			.text 20,"RETURN without GOSUB"
>1664	77 69 74 68 6f 75 74 20 47 4f 53 55 42
>1671	14 55 4e 54 49 4c 20 77			.text 20,"UNTIL without REPEAT"
>1679	69 74 68 6f 75 74 20 52 45 50 45 41 54
>1686	10 4e 45 58 54 20 77 69			.text 16,"NEXT without FOR"
>168e	74 68 6f 75 74 20 46 4f 52
>1697	12 57 45 4e 44 20 77 69			.text 18,"WEND without WHILE"
>169f	74 68 6f 75 74 20 57 48 49 4c 45
>16aa	14 45 4e 44 50 52 4f 43			.text 20,"ENDPROC without PROC"
>16b2	20 77 69 74 68 6f 75 74 20 50 52 4f 43
>16bf	0e 42 61 64 20 4e 45 58			.text 14,"Bad NEXT index"
>16c7	54 20 69 6e 64 65 78
>16ce	17 53 74 72 75 63 74 75			.text 23,"Structures nested wrong"
>16d6	72 65 73 20 6e 65 73 74 65 64 20 77 72 6f 6e 67
>16e6	16 43 61 6e 6e 6f 74 20			.text 22,"Cannot create variable"
>16ee	63 72 65 61 74 65 20 76 61 72 69 61 62 6c 65
>16fd	19 52 65 74 75 72 6e 20			.text 25,"Return stack out of space"
>1705	73 74 61 63 6b 20 6f 75 74 20 6f 66 20 73 70 61
>1715	63 65
>1717	11 55 6e 6b 6e 6f 77 6e			.text 17,"Unknown Procedure"
>171f	20 50 72 6f 63 65 64 75 72 65
>1729	17 50 61 72 61 6d 65 74			.text 23,"Parameters do not match"
>1731	65 72 73 20 64 6f 20 6e 6f 74 20 6d 61 74 63 68
>1741	15 41 72 72 61 79 20 61			.text 21,"Array already defined"
>1749	6c 72 65 61 64 79 20 64 65 66 69 6e 65 64
>1757	12 44 49 4d 20 72 65 71			.text 18,"DIM requires array"
>175f	75 69 72 65 73 20 61 72 72 61 79
>176a	0f 42 61 64 20 61 72 72			.text 15,"Bad array index"
>1772	61 79 20 69 6e 64 65 78
>177a	1d 57 72 6f 6e 67 20 6e			.text 29,"Wrong number of array indices"
>1782	75 6d 62 65 72 20 6f 66 20 61 72 72 61 79 20 69
>1792	6e 64 69 63 65 73
>1798	0b 4f 75 74 20 6f 66 20			.text 11,"Out of data"
>17a0	64 61 74 61
>17a4	14 43 61 6e 6e 6f 74 20			.text 20,"Cannot tokenise line"
>17ac	74 6f 6b 65 6e 69 73 65 20 6c 69 6e 65
>17b9	0b 53 61 76 65 20 66 61			.text 11,"Save failed"
>17c1	69 6c 65 64
>17c5	0b 4c 6f 61 64 20 66 61			.text 11,"Load failed"
>17cd	69 6c 65 64
>17d1	05 42 72 65 61 6b			.text 5,"Break"
>17d7	0d 4f 75 74 20 6f 66 20			.text 13,"Out of memory"
>17df	6d 65 6d 6f 72 79
>17e5	16 45 78 70 72 65 73 73			.text 22,"Expression too complex"
>17ed	69 6f 6e 20 74 6f 6f 20 63 6f 6d 70 6c 65 78
>17fc	10 42 61 64 20 4f 70 65			.text 16,"Bad Operand/Mode"
>1804	72 61 6e 64 2f 4d 6f 64 65
>180d	13 42 72 61 6e 63 68 20			.text 19,"Branch out of range"
>1815	6f 75 74 20 6f 66 20 72 61 6e 67 65
>1821	13 4c 61 62 65 6c 20 63			.text 19,"Label changed value"
>1829	68 61 6e 67 65 64 20 76 61 6c 75 65
>1835	12 4e 6f 20 53 70 72 69			.text 18,"No Sprite Selected"
>183d	74 65 20 53 65 6c 65 63 74 65 64
>1848	08 48 61 72 64 77 61 72			.text 8,"Hardware"
>1850	65
>1851	00					.byte 0

;******  Return to file: error/errorhandler.asm

.1852					EHPrintAscii:
.1852	a0 00		ldy #$00			ldy 	#0
.1854	b1 2a		lda ($2a),y			lda 	(temp0),y
.1856	aa		tax				tax
.1857	f0 0f		beq $1868			beq 	_EHPExit
.1859					_EHPLoop:
.1859	c8		iny				iny
.185a	8a		txa				txa
.185b	48		pha				pha
.185c	b1 2a		lda ($2a),y			lda 	(temp0),y
.185e	a2 16		ldx #$16		ldx	#22
.1860	20 f6 14	jsr $14f6		jsr	deviceHandler
.1863	68		pla				pla
.1864	aa		tax				tax
.1865	ca		dex				dex
.1866	d0 f1		bne $1859			bne 	_EHPLoop
.1868					_EHPExit:
.1868	60		rts				rts

;******  Return to file: error/error.asm


;******  Return to file: basic.asm

.1869					section_end_error:
.1869					section_start_extension:

;******  Processing file: extension/extension.asm


;******  Processing file: extension/extensionhandler.asm

.1869					ExtensionHandler:
.1869	c9 fe		cmp #$fe			cmp 	#$FE 						; check for force mode 0
.186b	f0 16		beq $1883			beq 	_ExtensionForce
.186d	c9 ff		cmp #$ff			cmp 	#$FF						; A = $FF command, otherwise unary function stack level.
.186f	d0 08		bne $1879			bne 	_ExtensionUnary 			; is passed in A.
.1871	b1 28		lda ($28),y			lda 	(codePtr),y 				; so this is a command, using Group 2.
.1873	c8		iny				iny
.1874	0a		asl a				asl 	a
.1875	aa		tax				tax
.1876	7c 7a 18	jmp ($187a,x)			jmp 	(Group2Vectors-12,x)
.1879					_ExtensionUnary:
.1879	48		pha				pha 								; save stack pos in A
.187a	b1 28		lda ($28),y			lda 	(codePtr),y 				; get shifted token, double into X
.187c	c8		iny				iny
.187d	0a		asl a				asl 	a
.187e	aa		tax				tax
.187f	68		pla				pla 								; restore stack pos and call group3 command.
.1880	7c 94 18	jmp ($1894,x)			jmp 	(Group3Vectors-12,X)
.1883					_ExtensionForce:
.1883	4c 69 22	jmp $2269			jmp 	ForceMode0

;******  Processing file: extension/../generated/tokenvectors2.inc

.1886					Group2Vectors:
>1886	97 23					.word	Command_VPoke            ; $86 vpoke
>1888	9a 23					.word	Command_VDoke            ; $87 vdoke
>188a	6f 23					.word	Command_VLoad            ; $88 vload
>188c	7b 22					.word	CommandMode              ; $89 mode
>188e	38 23					.word	CommandPalette           ; $8a palette
>1890	b3 1f					.word	CommandSprite            ; $8b sprite
>1892	c9 1d					.word	CommandClg               ; $8c clg
>1894	c2 1a					.word	Command_Rect             ; $8d rect
>1896	ca 1a					.word	Command_Frame            ; $8e frame
>1898	2e 31					.word	Unimplemented            ; $8f text
>189a	af 1a					.word	Command_Plot             ; $90 plot
>189c	89 19					.word	Command_Line             ; $91 line
>189e	fe 20					.word	Command_Paint            ; $92 paint

;******  Return to file: extension/extensionhandler.asm


;******  Processing file: extension/../generated/tokenvectors3.inc

.18a0					Group3Vectors:
>18a0	e3 23					.word	Command_VPeek            ; $86 vpeek(
>18a2	e6 23					.word	Command_VDeek            ; $87 vdeek(
>18a4	39 22					.word	Sprite_GetX              ; $88 sprite.x(
>18a6	3c 22					.word	Sprite_GetY              ; $89 sprite.y(
>18a8	f6 1e					.word	FunctionCollide          ; $8a hit(
>18aa	6e 1e					.word	Unary_JoyX               ; $8b joy.x(
>18ac	71 1e					.word	Unary_JoyY               ; $8c joy.y(
>18ae	ac 1e					.word	Unary_JButton            ; $8d joy.b(
>18b0	41 1e					.word	Unary_Clock              ; $8e clock(

;******  Return to file: extension/extensionhandler.asm

.18b2					XEvaluateInteger:
.18b2	8a		txa				txa
.18b3	a2 0a		ldx #$0a		ldx	#10
.18b5	20 88 3d	jsr $3d88		jsr	mainHandler
.18b8	aa		tax				tax
.18b9	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/graphics/general.asm

.0be6					gStartStorage:
.0be6					gCurrentXPos:
>0be6							.fill 	2 							; copying the coordinate here, and into x2, and the old
.0be8					gCurrentYPos:
>0be8							.fill 	2
.0bea					gX1:
>0bea							.fill 	2		 					; most recently used. x2,y2 are the most recently used.
.0bec					gY1:
>0bec							.fill 	2
.0bee					gX2:
>0bee							.fill 	2
.0bf0					gY2:
>0bf0							.fill 	2
.0bf2					gError:
>0bf2							.fill 	2
.0bf4					g2Error:
>0bf4							.fill 	2
.0bf6					gdx:
>0bf6							.fill 	2
.0bf8					gdy:
>0bf8							.fill 	2
.0bfa					gWordHandler:
>0bfa							.fill 	2
.0bfc					gModifiers:
.0bfc					gdInk:
>0bfc							.fill 	1
.0bfd					gdPaper:
>0bfd							.fill 	1
.0bfe					gdSize:
>0bfe							.fill 	1
.0bff					gdImage:
>0bff							.fill 	1
.0c00					gdFlip:
>0c00							.fill 	1
.0c01					gdXLimit:
>0c01							.fill 	2
.0c03					gdYLimit:
>0c03							.fill 	2
.0c05					gEndStorage:
.18ba					GResetStorage:
.18ba	8a		txa				txa
.18bb	48		pha				pha
.18bc	a2 1e		ldx #$1e			ldx 	#gEndStorage-gStartStorage-1 ; fill all storage for gfx with 0
.18be	a9 00		lda #$00			lda 	#0
.18c0					_GRSLoop:
.18c0	9d e6 0b	sta $0be6,x			sta 	gStartStorage,x
.18c3	ca		dex				dex
.18c4	10 fa		bpl $18c0			bpl 	_GRSLoop
.18c6	a9 01		lda #$01			lda 	#1
.18c8	8d fc 0b	sta $0bfc			sta 	gdInk
.18cb	8d fe 0b	sta $0bfe			sta 	gdSize
.18ce	68		pla				pla
.18cf	aa		tax				tax
.18d0	60		rts				rts
.18d1					GHandler:
.18d1	8e fb 0b	stx $0bfb			stx 	gWordHandler+1 				; save code that draws the actual line or whatever.
.18d4	8d fa 0b	sta $0bfa			sta 	gWordHandler
.18d7	88		dey				dey 								; predecrement
.18d8					_GHLoopNext:
.18d8	c8		iny				iny									; advance one character
.18d9					_GHLoop:
.18d9	b1 28		lda ($28),y			lda 	(codePtr),y 				; look at character.
.18db	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; , go to next
.18dd	f0 f9		beq $18d8			beq 	_GHLoopNext
.18df	c9 80		cmp #$80			cmp 	#TOK_EOL 					; end of line or : , exit
.18e1	f0 4c		beq $192f			beq 	_GHExit
.18e3	c9 ca		cmp #$ca			cmp 	#TKW_COLON
.18e5	f0 48		beq $192f			beq 	_GHExit
.18e7	c9 db		cmp #$db			cmp 	#TKW_AT 					; have we found AT or TO
.18e9	f0 33		beq $191e			beq 	_GHCallHandler 				; update post & call the handler
.18eb	c9 ce		cmp #$ce			cmp 	#TKW_TO
.18ed	f0 2f		beq $191e			beq 	_GHCallHandler
.18ef	c9 e6		cmp #$e6			cmp 	#TKW_FROM
.18f1	f0 10		beq $1903			beq 	_GHCPairSkip
.18f3	a2 00		ldx #$00			ldx 	#0 							; now see if it matches a token modifier (INK,PAPER etc.)
.18f5					_GHCheckTokens:
.18f5	b1 28		lda ($28),y			lda 	(codePtr),y
.18f7	dd 30 19	cmp $1930,x			cmp 	_GHTokenTable,x
.18fa	f0 0e		beq $190a			beq 	_GHFoundToken
.18fc	e8		inx				inx
.18fd	bd 30 19	lda $1930,x			lda 	_GHTokenTable,x
.1900	d0 f3		bne $18f5			bne 	_GHCheckTokens
.1902	88		dey				dey
.1903					_GHCPairSkip:
.1903	c8		iny				iny
.1904					_GHCPair:
.1904	20 36 19	jsr $1936			jsr 	GHMakeCurrent 				; should be a coordinate pair then.
.1907	4c d9 18	jmp $18d9			jmp 	_GHLoop
.190a					_GHFoundToken:
.190a	c8		iny				iny 								; skip token (INK/PAPER etc.)
.190b	8a		txa				txa
.190c	48		pha				pha
.190d	a9 00		lda #$00			lda 	#0 							; evaluate byte
.190f	a2 0c		ldx #$0c		ldx	#12
.1911	20 88 3d	jsr $3d88		jsr	mainHandler
.1914	68		pla				pla
.1915	aa		tax				tax
.1916	a5 98		lda $98				lda 	esInt0 						; get evaluated value
.1918	9d fc 0b	sta $0bfc,x			sta 	gModifiers,x 				; update the modifiers
.191b	4c d9 18	jmp $18d9			jmp 	_GHLoop 					; and loop back
.191e					_GHCallHandler:
.191e	c8		iny				iny 								; consume AT or TO.
.191f	20 36 19	jsr $1936			jsr 	GHMakeCurrent 				; update the coordinates.
.1922	98		tya				tya
.1923	48		pha				pha
.1924	20 2c 19	jsr $192c			jsr 	_GHCallHandlerCode 			; call the handler code
.1927	68		pla				pla
.1928	a8		tay				tay
.1929	4c d9 18	jmp $18d9			jmp 	_GHLoop 					; and loop round.
.192c					_GHCallHandlerCode:
.192c	6c fa 0b	jmp ($0bfa)			jmp 	(gWordHandler)
.192f					_GHExit:
.192f	60		rts				rts
.1930					_GHTokenTable:
>1930	e1 e2 d2 da dc					.byte 	TKW_INK,TKW_PAPER,TKW_DIM,TKW_IMAGE,TKW_FLIP
>1935	00						.byte 	0
.1936					GHMakeCurrent:
.1936	8a		txa				txa
.1937	48		pha				pha
.1938	a2 00		ldx #$00			ldx 	#0 							; do for 0 offset (X)
.193a	20 4a 19	jsr $194a			jsr 	_GHMCDoIt
.193d	a2 02		ldx #$02		ldx	#2
.193f	20 88 3d	jsr $3d88		jsr	mainHandler
.1942	a2 02		ldx #$02			ldx 	#2 							; do for 2 offset (Y)
.1944	20 4a 19	jsr $194a			jsr 	_GHMCDoIt
.1947	68		pla				pla
.1948	aa		tax				tax
.1949	60		rts				rts
.194a					_GHMCDoIt:
.194a	bd e6 0b	lda $0be6,x			lda 	gCurrentXPos,x 				; copy the current position to X,Y
.194d	9d ea 0b	sta $0bea,x			sta 	gX1,x
.1950	bd e7 0b	lda $0be7,x			lda 	gCurrentXPos+1,x
.1953	9d eb 0b	sta $0beb,x			sta 	gX1+1,x
.1956	8a		txa				txa
.1957	48		pha				pha
.1958	a9 00		lda #$00			lda 	#0 							; evaluate the parameter, now in esInt0,esInt1
.195a	a2 0a		ldx #$0a		ldx	#10
.195c	20 88 3d	jsr $3d88		jsr	mainHandler
.195f	68		pla				pla
.1960	aa		tax				tax
.1961	a5 98		lda $98				lda 	esInt0 						; check coordinate range
.1963	dd 01 0c	cmp $0c01,x			cmp 	gdXLimit,x
.1966	a5 a0		lda $a0				lda 	esInt1
.1968	fd 02 0c	sbc $0c02,x			sbc 	gdXLimit+1,x
.196b	b0 17		bcs $1984			bcs 	_GMHCRange
.196d	a5 a8		lda $a8				lda 	esInt2
.196f	05 b0		ora $b0				ora 	esInt3
.1971	d0 11		bne $1984			bne 	_GMHCRange
.1973	a5 98		lda $98				lda 	esInt0 						; copy into current and X2,Y2
.1975	9d e6 0b	sta $0be6,x			sta 	gCurrentXPos,x
.1978	9d ee 0b	sta $0bee,x			sta 	gX2,x
.197b	a5 a0		lda $a0				lda 	esInt1
.197d	9d e7 0b	sta $0be7,x			sta 	gCurrentXPos+1,x
.1980	9d ef 0b	sta $0bef,x			sta 	gX2+1,x
.1983	60		rts				rts
.1984					_GMHCRange:
.1984	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.1986	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: extension/extension.asm


;******  Processing file: extension/graphics/line.asm

.0c05					gdySign:
>0c05							.fill 	1
.1989					Command_Line:
.1989	a9 91		lda #$91			lda 	#LineHandler & $FF
.198b	a2 19		ldx #$19			ldx 	#LineHandler >> 8
.198d	20 d1 18	jsr $18d1			jsr 	GHandler
.1990	60		rts				rts
.1991					LineHandler:
.1991	a2 00		ldx #$00			ldx 	#gX1-gX1 					; check if horizontal, vertical line
.1993	a0 04		ldy #$04			ldy 	#gX2-gX1
.1995	20 74 1c	jsr $1c74			jsr 	CompareCoordsEq
.1998	f0 09		beq $19a3			beq 	_LHRectCode
.199a	a2 02		ldx #$02			ldx 	#gY1-gX1
.199c	a0 06		ldy #$06			ldy 	#gY2-gX1
.199e	20 74 1c	jsr $1c74			jsr 	CompareCoordsEq
.19a1	d0 03		bne $19a6			bne 	_LHLineDrawer
.19a3					_LHRectCode:
.19a3	4c d6 1a	jmp $1ad6			jmp 	RectHandler
.19a6					_LHLineDrawer:
.19a6	a2 00		ldx #$00			ldx 	#gX1-gX1 					; check if X1 < X2 e.g. it is sloped to the right.
.19a8	a0 04		ldy #$04			ldy 	#gX2-gX1
.19aa	20 5f 1c	jsr $1c5f			jsr 	CompareCoords
.19ad	90 0a		bcc $19b9			bcc 	_LHNoSwap
.19af	20 a7 1c	jsr $1ca7			jsr 	GSwapCoords					; if so swap coords so X2 > X1, may be going up or down.
.19b2	a2 02		ldx #$02			ldx 	#gY1-gX1
.19b4	a0 06		ldy #$06			ldy 	#gY2-gX1
.19b6	20 a7 1c	jsr $1ca7			jsr 	GSwapCoords
.19b9					_LHNoSwap:
.19b9	20 e2 19	jsr $19e2			jsr 	BresenhamInitialise 		; initialise Bresenham constants
.19bc	a0 00		ldy #$00			ldy 	#gX1-gX1
.19be	20 49 1c	jsr $1c49			jsr 	SetupXY 					; set up X1,Y1 to draw.
.19c1	b0 15		bcs $19d8			bcs 	_LHExit 					; line off screen.
.19c3					_LHDrawLoop:
.19c3	a2 00		ldx #$00			ldx 	#gX1-gX1 					; check if X1=X2 and Y1 = Y2
.19c5	a0 04		ldy #$04			ldy 	#gX2-gX1
.19c7	20 74 1c	jsr $1c74			jsr 	CompareCoordsEq
.19ca	d0 0d		bne $19d9			bne 	_LHNextPixel
.19cc	a2 06		ldx #$06			ldx 	#gY2-gX1
.19ce	a0 06		ldy #$06			ldy 	#gY2-gX1
.19d0	20 74 1c	jsr $1c74			jsr 	CompareCoordsEq
.19d3	d0 04		bne $19d9			bne 	_LHNextPixel
.19d5	20 63 1d	jsr $1d63			jsr 	gdPlotInk 					; plot the last pixel.
.19d8					_LHExit:
.19d8	60		rts				rts
.19d9					_LHNextPixel:
.19d9	20 63 1d	jsr $1d63			jsr 	gdPlotInk 					; plot the pixel.
.19dc	20 36 1a	jsr $1a36			jsr 	BresenhamIteration 			; do one bresenham iteration calculation
.19df	4c c3 19	jmp $19c3			jmp  	_LHDrawLoop 				; and loop back if okay
.19e2					BresenhamInitialise:
.19e2	38		sec				sec
.19e3	ad ee 0b	lda $0bee			lda 	gX2
.19e6	ed ea 0b	sbc $0bea			sbc 	gX1
.19e9	8d f6 0b	sta $0bf6			sta 	gdX
.19ec	ad ef 0b	lda $0bef			lda 	gX2+1
.19ef	ed eb 0b	sbc $0beb			sbc 	gX1+1
.19f2	8d f7 0b	sta $0bf7			sta 	gdX+1
.19f5	38		sec				sec
.19f6	ad ec 0b	lda $0bec			lda 	gY1
.19f9	ed f0 0b	sbc $0bf0			sbc 	gY2
.19fc	8d f8 0b	sta $0bf8			sta 	gdy
.19ff	ad ed 0b	lda $0bed			lda 	gY1+1
.1a02	ed f1 0b	sbc $0bf1			sbc 	gY2+1
.1a05	8d f9 0b	sta $0bf9			sta 	gdy+1
.1a08	ad f9 0b	lda $0bf9			lda 	gdy+1 						; save sign of dy
.1a0b	8d 05 0c	sta $0c05			sta 	gdysign
.1a0e	30 12		bmi $1a22			bmi 	_BINormal
.1a10	38		sec				sec
.1a11	a9 00		lda #$00			lda 	#0
.1a13	ed f8 0b	sbc $0bf8			sbc 	gdy
.1a16	8d f8 0b	sta $0bf8			sta 	gdy
.1a19	a9 00		lda #$00			lda 	#0
.1a1b	ed f9 0b	sbc $0bf9			sbc 	gdy+1
.1a1e	8d f9 0b	sta $0bf9			sta 	gdy+1
.1a21	60		rts				rts
.1a22					_BINormal:
.1a22	18		clc				clc
.1a23	ad f6 0b	lda $0bf6			lda 	gdx
.1a26	6d f8 0b	adc $0bf8			adc 	gdy
.1a29	8d f2 0b	sta $0bf2			sta 	gError
.1a2c	ad f7 0b	lda $0bf7			lda 	gdx+1
.1a2f	6d f9 0b	adc $0bf9			adc 	gdy+1
.1a32	8d f3 0b	sta $0bf3			sta 	gError+1
.1a35	60		rts				rts
.1a36					BresenhamIteration:
.1a36	ad f2 0b	lda $0bf2			lda 	gError
.1a39	0a		asl a				asl 	a
.1a3a	8d f4 0b	sta $0bf4			sta 	g2Error
.1a3d	ad f3 0b	lda $0bf3			lda 	gError+1
.1a40	2a		rol a				rol 	a
.1a41	8d f5 0b	sta $0bf5			sta 	g2Error+1
.1a44	a2 0a		ldx #$0a			ldx 	#g2Error-gX1
.1a46	a0 0e		ldy #$0e			ldy 	#gdy-gX1
.1a48	20 6c 1c	jsr $1c6c			jsr 	CompareCoordsSigned
.1a4b	30 03		bmi $1a50			bmi 	_BINoE2DY
.1a4d	20 5d 1a	jsr $1a5d			jsr 	BresenhamE2GEDY
.1a50					_BINoE2DY:
.1a50	a2 0c		ldx #$0c			ldx 	#gdx-gX1
.1a52	a0 0a		ldy #$0a			ldy 	#g2Error-gX1
.1a54	20 6c 1c	jsr $1c6c			jsr 	CompareCoordsSigned
.1a57	30 03		bmi $1a5c			bmi 	_BINoDXE2
.1a59	20 7c 1a	jsr $1a7c			jsr 	BresenhamDXGEE2
.1a5c					_BINoDXE2:
.1a5c	60		rts				rts
.1a5d					BresenhamE2GEDY:
.1a5d	18		clc				clc
.1a5e	ad f2 0b	lda $0bf2			lda 	gError
.1a61	6d f8 0b	adc $0bf8			adc 	gdy
.1a64	8d f2 0b	sta $0bf2			sta 	gError
.1a67	ad f3 0b	lda $0bf3			lda 	gError+1
.1a6a	6d f9 0b	adc $0bf9			adc 	gdy+1
.1a6d	8d f3 0b	sta $0bf3			sta 	gError+1
.1a70	ee ea 0b	inc $0bea			inc 	gX1
.1a73	d0 03		bne $1a78			bne 	_BE2Skip
.1a75	ee eb 0b	inc $0beb			inc 	gX1+1
.1a78					_BE2Skip:
.1a78	20 c4 1c	jsr $1cc4			jsr 	gdMvRight
.1a7b	60		rts				rts
.1a7c					BresenhamDXGEE2:
.1a7c	18		clc				clc
.1a7d	ad f2 0b	lda $0bf2			lda 	gError
.1a80	6d f6 0b	adc $0bf6			adc 	gdx
.1a83	8d f2 0b	sta $0bf2			sta 	gError
.1a86	ad f3 0b	lda $0bf3			lda 	gError+1
.1a89	6d f7 0b	adc $0bf7			adc 	gdx+1
.1a8c	8d f3 0b	sta $0bf3			sta 	gError+1
.1a8f	ad 05 0c	lda $0c05			lda 	gdySign
.1a92	10 0c		bpl $1aa0			bpl 	_BEDXInvertY
.1a94	ee ec 0b	inc $0bec			inc 	gY1
.1a97	d0 03		bne $1a9c			bne 	_BEDXSkip
.1a99	ee ed 0b	inc $0bed			inc 	gY1+1
.1a9c					_BEDXSkip:
.1a9c	20 ff 1c	jsr $1cff			jsr 	gdMvDown
.1a9f	60		rts				rts
.1aa0					_BEDXInvertY:
.1aa0	ad ec 0b	lda $0bec			lda 	gY1
.1aa3	d0 03		bne $1aa8			bne 	_BEDXSkip2
.1aa5	ce ed 0b	dec $0bed			dec 	gY1+1
.1aa8					_BEDXSkip2:
.1aa8	ce ec 0b	dec $0bec			dec 	gY1
.1aab	20 da 1c	jsr $1cda			jsr 	gdMvUp
.1aae	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/graphics/plot.asm

.1aaf					Command_Plot:
.1aaf	a9 b7		lda #$b7			lda 	#PlotHandler & $FF
.1ab1	a2 1a		ldx #$1a			ldx 	#PlotHandler >> 8
.1ab3	20 d1 18	jsr $18d1			jsr 	GHandler
.1ab6	60		rts				rts
.1ab7					PlotHandler:
.1ab7	a0 04		ldy #$04			ldy 	#gX2-gX1
.1ab9	20 49 1c	jsr $1c49			jsr 	SetupXY 					; set up X1,Y1 to draw.
.1abc	b0 03		bcs $1ac1			bcs 	_PHExit 					; off screen, return with CS.
.1abe	20 63 1d	jsr $1d63			jsr 	gdPlotInk 					; pixel in Ink.
.1ac1	60		rts		_PHExit:rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/graphics/rectframe.asm

.0c06					frameFlag:
>0c06							.fill 	1
.1ac2					Command_Rect:
.1ac2	a9 d6		lda #$d6			lda 	#RectHandler & $FF
.1ac4	a2 1a		ldx #$1a			ldx 	#RectHandler >> 8
.1ac6	20 d1 18	jsr $18d1			jsr 	GHandler
.1ac9	60		rts				rts
.1aca					Command_Frame:
.1aca	a9 d2		lda #$d2			lda 	#FrameHandler & $FF
.1acc	a2 1a		ldx #$1a			ldx 	#FrameHandler >> 8
.1ace	20 d1 18	jsr $18d1			jsr 	GHandler
.1ad1	60		rts				rts
.1ad2					FrameHandler:
.1ad2	a9 01		lda #$01			lda 	#1
.1ad4	d0 02		bne $1ad8			bne 	RectHandler+2
.1ad6					RectHandler:
.1ad6	a9 00		lda #$00			lda 	#0
.1ad8	8d 06 0c	sta $0c06			sta 	frameFlag
.1adb	20 83 1c	jsr $1c83			jsr 	BoxSort 					; sort so topleft/bottom right
.1ade	20 07 1b	jsr $1b07			jsr 	DrawBoxPart 				; solid first line
.1ae1					_FHLoop:
.1ae1	a2 02		ldx #$02			ldx 	#gY1-gX1 					; check Y1 = Y2
.1ae3	a0 06		ldy #$06			ldy 	#gY2-gX1
.1ae5	20 5f 1c	jsr $1c5f			jsr 	CompareCoords
.1ae8	b0 19		bcs $1b03			bcs 	_FHLastLine 				; Y1 >= Y2 then end.
.1aea	ad 06 0c	lda $0c06			lda 	frameFlag 					; identify solid or frame ?
.1aed	f0 06		beq $1af5			beq 	_FHIsSolidRect
.1aef	20 20 1b	jsr $1b20			jsr 	DrawBoxEnds
.1af2	4c f8 1a	jmp $1af8			jmp 	_FHNext
.1af5					_FHIsSolidRect:
.1af5	20 07 1b	jsr $1b07			jsr 	DrawBoxPart
.1af8					_FHNext:
.1af8	ee ec 0b	inc $0bec			inc 	gY1 						; bump Y1 and loop back.
.1afb	d0 e4		bne $1ae1			bne 	_FHLoop
.1afd	ee ed 0b	inc $0bed			inc 	gY1+1
.1b00	4c e1 1a	jmp $1ae1			jmp 	_FHLoop
.1b03					_FHLastLine:
.1b03	20 07 1b	jsr $1b07			jsr 	DrawBoxPart 				; solid last line whatever
.1b06					_FHExit:
.1b06	60		rts				rts
.1b07					DrawBoxPart:
.1b07	a0 00		ldy #$00			ldy 	#gX1-gX1
.1b09	20 49 1c	jsr $1c49			jsr 	SetupXY 					; set up X1,Y1 to draw.
.1b0c	38		sec				sec 								; calculate line length => temp0
.1b0d	ad ee 0b	lda $0bee			lda 	gX2
.1b10	ed ea 0b	sbc $0bea			sbc 	gX1
.1b13	48		pha				pha
.1b14	ad ef 0b	lda $0bef			lda 	gX2+1
.1b17	ed eb 0b	sbc $0beb			sbc 	gx1+1
.1b1a	aa		tax				tax
.1b1b	68		pla				pla 								; line length in XA.
.1b1c	20 38 1b	jsr $1b38			jsr 	DrawHorizontalLine
.1b1f	60		rts				rts
.1b20					DrawBoxEnds:
.1b20	a0 00		ldy #$00			ldy 	#gX1-gX1
.1b22	20 49 1c	jsr $1c49			jsr 	SetupXY 					; set up X1,Y1 to draw.
.1b25	20 63 1d	jsr $1d63			jsr 	gdPlotInk 					; LH end.
.1b28	ad ee 0b	lda $0bee			lda 	gX2 						; set position to X2,Y1
.1b2b	ae ef 0b	ldx $0bef			ldx 	gX2+1
.1b2e	20 18 1e	jsr $1e18			jsr 	gdSetX
.1b31	20 21 1d	jsr $1d21			jsr		gdSetDrawPosition 			; update position.
.1b34	20 63 1d	jsr $1d63			jsr 	gdPlotInk 					; RH end.
.1b37	60		rts				rts
.1b38					DrawHorizontalLine:
.1b38	86 32		stx $32				stx 	tempShort
.1b3a	aa		tax				tax
.1b3b	a4 32		ldy $32				ldy 	tempShort
.1b3d	ad fc 0b	lda $0bfc			lda 	gdInk
.1b40	4c 26 1e	jmp $1e26			jmp 	gdOptHorizontalWriter

;******  Return to file: extension/extension.asm


;******  Processing file: extension/graphics/renderer.asm

.0c07					RenderFunction:
>0c07							.fill 	2
.0c09					RenderWidth:
>0c09							.fill 	1
.0c0a					RenderHeight:
>0c0a							.fill 	1
.0c0b					RenderType:
>0c0b							.fill 	1
.1b43					ImageRenderer:
.1b43	8e 08 0c	stx $0c08			stx 	RenderFunction+1
.1b46	8d 07 0c	sta $0c07			sta 	RenderFunction
.1b49	a2 ff		ldx #$ff			ldx 	#255 						; get information.
.1b4b	20 2f 1c	jsr $1c2f			jsr 	CallRenderFunction
.1b4e	8d 0b 0c	sta $0c0b			sta 	RenderType 					; and save it.
.1b51	8e 09 0c	stx $0c09			stx 	RenderWidth
.1b54	8c 0a 0c	sty $0c0a			sty 	RenderHeight
.1b57	8a		txa				txa 								; check X coordinate
.1b58	a2 00		ldx #$00			ldx 	#0 							; offset to check position/limit.
.1b5a	20 f6 1b	jsr $1bf6			jsr 	RenderCheckRange
.1b5d	ad 0a 0c	lda $0c0a			lda 	RenderHeight 				; check Y coordinate
.1b60	a2 02		ldx #$02			ldx 	#2
.1b62	20 f6 1b	jsr $1bf6			jsr 	RenderCheckRange
.1b65	a0 00		ldy #$00			ldy 	#0 							; Y is the current line #
.1b67					_IRLoop1:
.1b67	ae fe 0b	ldx $0bfe			ldx 	gdSize 						; number of times to do the row.
.1b6a					_IRLoop2:
.1b6a	20 77 1b	jsr $1b77			jsr 	RenderDrawRow 				; draw one row.
.1b6d	ca		dex				dex 								; scale # times.
.1b6e	d0 fa		bne $1b6a			bne 	_IRLoop2
.1b70	c8		iny				iny 								; next vertical row
.1b71	cc 0a 0c	cpy $0c0a			cpy 	RenderHeight 				; done the lot ?
.1b74	d0 f1		bne $1b67			bne 	_IRLoop1
.1b76	60		rts				rts
.1b77					RenderDrawRow:
.1b77	8a		txa				txa
.1b78	48		pha				pha
.1b79	98		tya				tya
.1b7a	48		pha				pha
.1b7b	a0 04		ldy #$04			ldy 	#gX2-gX1 					; set the position at (x,y)
.1b7d	20 49 1c	jsr $1c49			jsr 	SetupXY
.1b80	68		pla				pla
.1b81	a8		tay				tay
.1b82	a2 00		ldx #$00			ldx 	#0 							; X is the current pixel.
.1b84					_RDRLoop1:
.1b84	20 98 1b	jsr $1b98			jsr 	RenderDrawPixelSet 			; draw a block of pixels of the correct size.
.1b87	e8		inx				inx
.1b88	ec 09 0c	cpx $0c09			cpx 	RenderWidth 				; until done the whole lot.
.1b8b	d0 f7		bne $1b84			bne 	_RDRLoop1
.1b8d	ee f0 0b	inc $0bf0			inc 	gY2 						; next line down
.1b90	d0 03		bne $1b95			bne 	_RDRNoCarry
.1b92	ee f1 0b	inc $0bf1			inc 	gY2+1
.1b95					_RDRNoCarry:
.1b95	68		pla				pla
.1b96	aa		tax				tax
.1b97	60		rts				rts
.1b98					RenderDrawPixelSet:
.1b98	8a		txa				txa
.1b99	48		pha				pha
.1b9a	98		tya				tya
.1b9b	48		pha				pha
.1b9c	20 d2 1b	jsr $1bd2			jsr 	RenderFlipXY 				; flip positions as required.
.1b9f	20 b9 1b	jsr $1bb9			jsr 	RenderGetInk				; get colour to draw with.
.1ba2	ae fe 0b	ldx $0bfe			ldx 	gdSize 						; X counts the size.
.1ba5					_RDPSLoop:
.1ba5	c9 00		cmp #$00			cmp 	#0							; don't draw if $00
.1ba7	f0 03		beq $1bac			beq 	_RDPSNoDraw
.1ba9	20 66 1d	jsr $1d66			jsr 	gdPlotA 					; draw A otherwise
.1bac					_RDPSNoDraw:
.1bac	48		pha				pha 								; move right
.1bad	20 c4 1c	jsr $1cc4			jsr 	gdMvRight
.1bb0	68		pla				pla
.1bb1	ca		dex				dex
.1bb2	d0 f1		bne $1ba5			bne 	_RDPSLoop 					; do it size times.
.1bb4	68		pla				pla
.1bb5	a8		tay				tay
.1bb6	68		pla				pla
.1bb7	aa		tax				tax
.1bb8	60		rts				rts
.1bb9					RenderGetInk:
.1bb9	ad 0b 0c	lda $0c0b			lda 	RenderType 					; type, if 0 it's a bitmap
.1bbc	f0 04		beq $1bc2			beq 	_RGIBitmap
.1bbe	20 2f 1c	jsr $1c2f			jsr 	CallRenderFunction 			; ask the rendering function.
.1bc1	60		rts				rts
.1bc2					_RGIBitmap:
.1bc2	20 2f 1c	jsr $1c2f			jsr 	CallRenderFunction 			; ask the rendering function.
.1bc5	c9 00		cmp #$00			cmp 	#0
.1bc7	f0 04		beq $1bcd			beq 	_RGIUsePaper
.1bc9	ad fc 0b	lda $0bfc			lda 	gdInk
.1bcc	60		rts				rts
.1bcd					_RGIUsePaper:
.1bcd	ad fd 0b	lda $0bfd			lda 	gdPaper
.1bd0	60		rts				rts
>1bd1	db						.byte 	$DB
.1bd2					RenderFlipXY:
.1bd2	ad 00 0c	lda $0c00			lda 	gdFlip 						; check any flip at all
.1bd5	29 03		and #$03			and 	#3
.1bd7	f0 1c		beq $1bf5			beq 	_RFExit
.1bd9	4a		lsr a				lsr 	a 							; bit 0 in carry flag
.1bda	90 09		bcc $1be5			bcc 	_RFNoHFlip
.1bdc	ad 09 0c	lda $0c09			lda 	RenderWidth 				; X Flip
.1bdf	86 32		stx $32				stx 	tempShort
.1be1	18		clc				clc
.1be2	e5 32		sbc $32				sbc 	tempShort
.1be4	aa		tax				tax
.1be5					_RFNoHFlip:
.1be5	ad 00 0c	lda $0c00			lda 	gdFlip
.1be8	29 02		and #$02			and 	#2 							; bit 1 check
.1bea	f0 09		beq $1bf5			beq 	_RFExit
.1bec	ad 0a 0c	lda $0c0a			lda 	RenderHeight 				; Y Flip
.1bef	84 32		sty $32				sty 	tempShort
.1bf1	18		clc				clc
.1bf2	e5 32		sbc $32				sbc 	tempShort
.1bf4	a8		tay				tay
.1bf5					_RFExit:
.1bf5	60		rts				rts
.1bf6					RenderCheckRange:
.1bf6	85 2b		sta $2b				sta 	temp0+1 					; save multiplier => temp0+1
.1bf8	ac fe 0b	ldy $0bfe			ldy 	gdSize 						; multiplicand (size) => temp0, must be non zero
.1bfb	84 2a		sty $2a				sty 	temp0
.1bfd	f0 2b		beq $1c2a			beq 	_RCRValue
.1bff	a9 00		lda #$00			lda 	#0 							; total
.1c01					_RCRMultiply:
.1c01	46 2a		lsr $2a				lsr 	temp0 						; shift LSB size into carry
.1c03	90 05		bcc $1c0a			bcc 	_RCRNoAdd 					; not adding this time.
.1c05	18		clc				clc
.1c06	65 2b		adc $2b				adc 	temp0+1 					; add the size.
.1c08	b0 20		bcs $1c2a			bcs 	_RCRValue 					; overflow
.1c0a					_RCRNoAdd:
.1c0a	06 2b		asl $2b				asl 	temp0+1 					; double multiplier
.1c0c	a4 2a		ldy $2a				ldy 	temp0 						; until adder is zero
.1c0e	d0 f1		bne $1c01			bne 	_RCRMultiply
.1c10	18		clc				clc 								; add to x2 or y2, store in temp0
.1c11	7d ee 0b	adc $0bee,x			adc 	gX2,x 						; this is the Right/Bottom coordinate of the image
.1c14	85 2a		sta $2a				sta 	temp0
.1c16	bd ef 0b	lda $0bef,x			lda 	gX2+1,x
.1c19	69 00		adc #$00			adc 	#0
.1c1b	85 2b		sta $2b				sta 	temp0+1
.1c1d	a5 2a		lda $2a				lda 	temp0 						; check right vs edge of screen.
.1c1f	dd 01 0c	cmp $0c01,x			cmp 	gdXLimit,x
.1c22	a5 2b		lda $2b				lda 	temp0+1
.1c24	fd 02 0c	sbc $0c02,x			sbc 	gdXLimit+1,x
.1c27	b0 01		bcs $1c2a			bcs 	_RCRValue 					; does not fit, so don't draw.
.1c29	60		rts				rts
.1c2a					_RCRValue:
.1c2a	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.1c2c	20 18 15	jsr $1518		jsr	errorHandler
.1c2f					CallRenderFunction:
.1c2f	6c 07 0c	jmp ($0c07)			jmp 	(RenderFunction)
.1c32					TestImageAccess:
.1c32	e0 ff		cpx #$ff			cpx 	#255 						; get information
.1c34	f0 0c		beq $1c42			beq 	_TIAGetInfo
.1c36	8a		txa				txa 								; fake up a pattern using the X/Y coordinates.
.1c37	4a		lsr a				lsr 	a
.1c38	4a		lsr a				lsr 	a
.1c39	85 32		sta $32				sta 	tempShort
.1c3b	98		tya				tya
.1c3c	4a		lsr a				lsr 	a
.1c3d	4a		lsr a				lsr 	a
.1c3e	18		clc				clc
.1c3f	65 32		adc $32				adc 	tempShort 					; return 0 here for transparency.
.1c41	60		rts				rts
.1c42					_TIAGetInfo:
.1c42	a9 01		lda #$01			lda 	#1 							; image (1) bitmap (0)
.1c44	a2 10		ldx #$10			ldx 	#16 						; pixel width
.1c46	a0 20		ldy #$20			ldy 	#32							; pixel height
.1c48	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/graphics/utils.asm

.1c49					SetupXY:
.1c49	b9 ea 0b	lda $0bea,y			lda 	gX1,y
.1c4c	be eb 0b	ldx $0beb,y			ldx 	gX1+1,y
.1c4f	20 18 1e	jsr $1e18			jsr 	gdSetX
.1c52	b9 ec 0b	lda $0bec,y			lda 	gY1,y
.1c55	be ed 0b	ldx $0bed,y			ldx 	gY1+1,y
.1c58	20 1f 1e	jsr $1e1f			jsr 	gdSetY
.1c5b	20 21 1d	jsr $1d21			jsr 	gdSetDrawPosition
.1c5e	60		rts				rts
.1c5f					CompareCoords:
.1c5f	bd ea 0b	lda $0bea,x			lda 	gX1,x
.1c62	d9 ea 0b	cmp $0bea,y			cmp 	gX1,y
.1c65	bd eb 0b	lda $0beb,x			lda 	gX1+1,x
.1c68	f9 eb 0b	sbc $0beb,y			sbc 	gX1+1,y
.1c6b	60		rts				rts
.1c6c					CompareCoordsSigned:
.1c6c	20 5f 1c	jsr $1c5f			jsr 	CompareCoords
.1c6f	50 02		bvc $1c73			bvc 	_CCSExit
.1c71	49 80		eor #$80			eor 	#$80
.1c73					_CCSExit:
.1c73	60		rts				rts
.1c74					CompareCoordsEq:
.1c74	bd ea 0b	lda $0bea,x			lda 	gX1,x
.1c77	d9 ea 0b	cmp $0bea,y			cmp 	gX1,y
.1c7a	d0 06		bne $1c82			bne 	_CCEExit
.1c7c	bd eb 0b	lda $0beb,x			lda 	gX1+1,x
.1c7f	d9 eb 0b	cmp $0beb,y			cmp 	gX1+1,y
.1c82					_CCEExit:
.1c82	60		rts				rts
.1c83					BoxSort:
.1c83	a2 00		ldx #$00			ldx 	#gx1-gx1
.1c85	a0 04		ldy #$04			ldy 	#gx2-gx1
.1c87	20 98 1c	jsr $1c98			jsr 	GCompareCoords
.1c8a	20 a5 1c	jsr $1ca5			jsr 	GSortMinMaxCoords
.1c8d	a2 02		ldx #$02			ldx 	#gy1-gx1
.1c8f	a0 06		ldy #$06			ldy 	#gy2-gx1
.1c91	20 98 1c	jsr $1c98			jsr 	GCompareCoords
.1c94	20 a5 1c	jsr $1ca5			jsr 	GSortMinMaxCoords
.1c97	60		rts				rts
.1c98					GCompareCoords:
.1c98	bd ea 0b	lda $0bea,x			lda 	gx1,x
.1c9b	d9 ea 0b	cmp $0bea,y			cmp 	gx1,y
.1c9e	bd eb 0b	lda $0beb,x			lda 	gx1+1,x
.1ca1	f9 eb 0b	sbc $0beb,y			sbc 	gx1+1,y
.1ca4	60		rts				rts
.1ca5					GSortMinMaxCoords:
.1ca5	90 1c		bcc $1cc3			bcc 	GSMMCExit
.1ca7					GSwapCoords:
.1ca7	bd ea 0b	lda $0bea,x			lda 	gx1,x
.1caa	48		pha				pha
.1cab	b9 ea 0b	lda $0bea,y			lda 	gx1,y
.1cae	9d ea 0b	sta $0bea,x			sta 	gx1,x
.1cb1	68		pla				pla
.1cb2	99 ea 0b	sta $0bea,y			sta 	gx1,y
.1cb5	bd eb 0b	lda $0beb,x			lda 	gx1+1,x
.1cb8	48		pha				pha
.1cb9	b9 eb 0b	lda $0beb,y			lda 	gx1+1,y
.1cbc	9d eb 0b	sta $0beb,x			sta 	gx1+1,x
.1cbf	68		pla				pla
.1cc0	99 eb 0b	sta $0beb,y			sta 	gx1+1,y
.1cc3					GSMMCExit:
.1cc3	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/driver/coords.asm

.1cc4					gdMvRight:
.1cc4	ee 20 9f	inc $9f20			inc 	$9F20 						; bump $9F20
.1cc7	d0 08		bne $1cd1			bne 	_gdMR0
.1cc9	ee 21 9f	inc $9f21			inc 	$9F21
.1ccc	d0 03		bne $1cd1			bne 	_gdMR0
.1cce	ee 22 9f	inc $9f22			inc 	$9F22
.1cd1					_gdMR0:
.1cd1	ee 10 0c	inc $0c10			inc 	gdXPos
.1cd4	d0 03		bne $1cd9			bne 	_gdMR1
.1cd6	ee 11 0c	inc $0c11			inc 	gdXPos+1
.1cd9					_gdMR1:
.1cd9	60		rts				rts
.1cda					gdMvUp:
.1cda	ad 12 0c	lda $0c12			lda 	gdYPos 						; decrement Y Pos
.1cdd	d0 03		bne $1ce2			bne 	_gdMU1
.1cdf	ce 13 0c	dec $0c13			dec 	gdYPos+1
.1ce2	ce 12 0c	dec $0c12	_gdMU1:	dec 	gdYPos
.1ce5	38		sec				sec 								; adjust position by -320
.1ce6	ad 20 9f	lda $9f20			lda 	$9F20
.1ce9	e9 40		sbc #$40			sbc 	#64
.1ceb	8d 20 9f	sta $9f20			sta 	$9F20
.1cee	ad 21 9f	lda $9f21			lda 	$9F21
.1cf1	e9 01		sbc #$01			sbc 	#1
.1cf3	8d 21 9f	sta $9f21			sta 	$9F21
.1cf6	ad 22 9f	lda $9f22			lda 	$9F22
.1cf9	e9 00		sbc #$00			sbc 	#0
.1cfb	8d 22 9f	sta $9f22			sta 	$9F22
.1cfe	60		rts				rts
.1cff					gdMvDown:
.1cff	ee 12 0c	inc $0c12			inc 	gdYPos 						; decrement Y Pos
.1d02	d0 03		bne $1d07			bne 	_gdMU1
.1d04	ee 13 0c	inc $0c13			inc 	gdYPos+1
.1d07					_gdMU1:
.1d07	18		clc				clc 								; adjust position by -320
.1d08	ad 20 9f	lda $9f20			lda 	$9F20
.1d0b	69 40		adc #$40			adc 	#64
.1d0d	8d 20 9f	sta $9f20			sta 	$9F20
.1d10	ad 21 9f	lda $9f21			lda 	$9F21
.1d13	69 01		adc #$01			adc 	#1
.1d15	8d 21 9f	sta $9f21			sta 	$9F21
.1d18	ad 22 9f	lda $9f22			lda 	$9F22
.1d1b	69 00		adc #$00			adc 	#0
.1d1d	8d 22 9f	sta $9f22			sta 	$9F22
.1d20	60		rts				rts
.1d21					gdSetDrawPosition:
.1d21	a9 00		lda #$00			lda 	#0 							; temp0 is LSB of result start as 256 x Y
.1d23	85 2a		sta $2a				sta 	temp0
.1d25	ad 12 0c	lda $0c12			lda 	gdYPos
.1d28	85 2b		sta $2b				sta 	temp0+1
.1d2a	46 2b		lsr $2b				lsr 	temp0+1 					; / 4 so temp0 is YC x 64
.1d2c	66 2a		ror $2a				ror 	temp0
.1d2e	46 2b		lsr $2b				lsr 	temp0+1
.1d30	66 2a		ror $2a				ror 	temp0
.1d32	ad 12 0c	lda $0c12			lda 	gdYPos 						; add 256 x Y => 320 * Y < 64k
.1d35	18		clc				clc
.1d36	65 2b		adc $2b				adc 	temp0+1
.1d38	85 2b		sta $2b				sta 	temp0+1 					; temp0 = 320 x Y now add X => pixeloffset
.1d3a	18		clc				clc
.1d3b	a5 2a		lda $2a				lda 	temp0
.1d3d	6d 10 0c	adc $0c10			adc 	gdXPos
.1d40	85 2a		sta $2a				sta 	temp0
.1d42	a5 2b		lda $2b				lda 	temp0+1
.1d44	6d 11 0c	adc $0c11			adc 	gdXPos+1
.1d47	85 2b		sta $2b				sta 	temp0+1
.1d49	18		clc				clc
.1d4a	ad 0d 0c	lda $0c0d			lda 	gdBitmapAddress
.1d4d	65 2a		adc $2a				adc 	temp0
.1d4f	8d 20 9f	sta $9f20			sta 	$9F20
.1d52	ad 0e 0c	lda $0c0e			lda 	gdBitmapAddress+1
.1d55	65 2b		adc $2b				adc 	temp0+1
.1d57	8d 21 9f	sta $9f21			sta 	$9F21
.1d5a	ad 0f 0c	lda $0c0f			lda 	gdBitmapAddress+2
.1d5d	69 00		adc #$00			adc 	#0
.1d5f	8d 22 9f	sta $9f22			sta 	$9F22
.1d62	60		rts				rts
.1d63					gdPlotInk:
.1d63	ad fc 0b	lda $0bfc			lda 	gdInk
.1d66					gdPlotA:
.1d66	8d 23 9f	sta $9f23			sta 	$9F23
.1d69	60		rts				rts
.1d6a					gdPlotPaper:
.1d6a	ad fd 0b	lda $0bfd			lda 	gdPaper
.1d6d	c9 ff		cmp #$ff			cmp 	#$FF
.1d6f	f0 03		beq $1d74			beq 	_gdPPSkip
.1d71	8d 23 9f	sta $9f23			sta 	$9F23
.1d74					_gdPPSkip:
.1d74	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/driver/driver.asm

.0c0c					gdEnabled:
>0c0c							.fill 	1
.0c0d					gdBitmapAddress:
>0c0d							.fill 	3
.0c10					gdXPos:
>0c10							.fill 	2
.0c12					gdYPos:
>0c12							.fill 	2
.1d75					gdModeChanged:
.1d75	8a		txa				txa
.1d76	48		pha				pha
.1d77	98		tya				tya
.1d78	48		pha				pha
.1d79	a9 00		lda #$00			lda 	#0 							; zero the enabled flag.
.1d7b	8d 0c 0c	sta $0c0c			sta 	gdEnabled
.1d7e	ad 2a 9f	lda $9f2a			lda 	$9F2A 						; requires $40 for H/V Scale
.1d81	c9 40		cmp #$40			cmp 	#$40
.1d83	d0 1f		bne $1da4			bne 	_gdExit
.1d85	ad 2b 9f	lda $9f2b			lda 	$9F2B
.1d88	c9 40		cmp #$40			cmp 	#$40
.1d8a	d0 18		bne $1da4			bne 	_gdExit
.1d8c	ad 29 9f	lda $9f29			lda 	$9F29 						; read DC_Video, see which layers are enabled.
.1d8f	0a		asl a				asl 	a 							;
.1d90	0a		asl a				asl 	a 							; bit 7 now set if layer 1 enabled.
.1d91	10 09		bpl $1d9c			bpl 	_gdNotLayer1
.1d93	48		pha				pha 								; save A
.1d94	a2 07		ldx #$07			ldx 	#7 							; check offset 7 (e.g. start at $9F34)
.1d96	20 ac 1d	jsr $1dac			jsr 	gdCheckBitmap 				; go see if this is a bitmap
.1d99	68		pla				pla 								; restore A
.1d9a	b0 08		bcs $1da4			bcs 	_gdExit 					; if successful then exit
.1d9c					_gdNotLayer1:
.1d9c	0a		asl a				asl 	a 							; bit 7 now set if layer 0 enabled.
.1d9d	10 05		bpl $1da4			bpl 	_gdExit 					; if not enabled, exit
.1d9f	a2 00		ldx #$00			ldx 	#0 							; check offset 0 (e.g. start at $9F2D)
.1da1	20 ac 1d	jsr $1dac			jsr 	gdCheckBitmap 				; go see if this is a bitmap
.1da4					_gdExit:
.1da4	20 e0 1d	jsr $1de0			jsr 	gdClearGraphics 			; clear graphics display.
.1da7	68		pla				pla
.1da8	a8		tay				tay
.1da9	68		pla				pla
.1daa	aa		tax				tax
.1dab	60		rts				rts
.1dac					gdCheckBitmap:
.1dac	bd 2d 9f	lda $9f2d,x			lda 	$9F2D,x 					; look at bitmap bit.
.1daf	c9 07		cmp #$07			cmp 	#7 							; must be zero map size, bitmap and 8bpp
.1db1	d0 14		bne $1dc7			bne 	_gdCBFail
.1db3	ee 0c 0c	inc $0c0c			inc 	gdEnabled 					; set the enabled flag to non zero.
.1db6	bd 2f 9f	lda $9f2f,x			lda 	$9F2F,x 					; this is the bitmap address / 2
.1db9	0a		asl a				asl 	a
.1dba	8d 0e 0c	sta $0c0e			sta 	gdBitmapAddress+1
.1dbd	69 00		adc #$00			adc 	#$00 						; set to no move, updated manually.
.1dbf	8d 0f 0c	sta $0c0f			sta 	gdBitmapAddress+2
.1dc2	a9 00		lda #$00			lda 	#$00
.1dc4	8d 0d 0c	sta $0c0d			sta 	gdBitmapAddress 			; this is a 17 bit address.
.1dc7					_gdCBFail:
.1dc7	18		clc				clc
.1dc8	60		rts				rts
.1dc9					CommandClg:
.1dc9	b1 28		lda ($28),y			lda 	(codePtr),y
.1dcb	c9 e2		cmp #$e2			cmp 	#TKW_PAPER
.1dcd	d0 0d		bne $1ddc			bne 	_CCLClear
.1dcf	c8		iny				iny
.1dd0	a9 00		lda #$00			lda 	#0
.1dd2	a2 0c		ldx #$0c		ldx	#12
.1dd4	20 88 3d	jsr $3d88		jsr	mainHandler
.1dd7	a5 98		lda $98				lda 	esInt0
.1dd9	8d fd 0b	sta $0bfd			sta 	gdPaper
.1ddc					_CCLClear:
.1ddc	20 e0 1d	jsr $1de0			jsr 	gdClearGraphics
.1ddf	60		rts				rts
.1de0					gdClearGraphics:
.1de0	8a		txa				txa
.1de1	48		pha				pha
.1de2	98		tya				tya
.1de3	48		pha				pha
.1de4	ad 0c 0c	lda $0c0c			lda 	gdEnabled 					; screen enabled
.1de7	f0 2a		beq $1e13			beq 	_gdCGExit
.1de9	a9 00		lda #$00			lda 	#0 							; home cursor
.1deb	aa		tax				tax
.1dec	20 18 1e	jsr $1e18			jsr 	gdSetX
.1def	20 1f 1e	jsr $1e1f			jsr 	gdSetY
.1df2	20 21 1d	jsr $1d21			jsr 	gdSetDrawPosition 			; set the draw position.
.1df5	a9 40		lda #$40			lda 	#(320) & $FF
.1df7	8d 01 0c	sta $0c01			sta 	gdXLimit
.1dfa	a9 01		lda #$01			lda 	#(320) >> 8
.1dfc	8d 02 0c	sta $0c02			sta 	1+(gdXLimit)
.1dff	a9 c8		lda #$c8			lda 	#(200) & $FF
.1e01	8d 03 0c	sta $0c03			sta 	gdYLimit
.1e04	a9 00		lda #$00			lda 	#(200) >> 8
.1e06	8d 04 0c	sta $0c04			sta 	1+(gdYLimit)
.1e09	a0 fa		ldy #$fa			ldy 	#$FA						; 320 x 200 pixels = $FA00
.1e0b	a2 00		ldx #$00			ldx 	#0
.1e0d	ad fd 0b	lda $0bfd			lda 	gdPaper
.1e10	20 26 1e	jsr $1e26			jsr 	gdOptHorizontalWriter
.1e13					_gdCGExit:
.1e13	68		pla				pla
.1e14	a8		tay				tay
.1e15	68		pla				pla
.1e16	aa		tax				tax
.1e17	60		rts				rts
.1e18					gdSetX:
.1e18	8d 10 0c	sta $0c10			sta 	gdXPos
.1e1b	8e 11 0c	stx $0c11			stx 	gdXPos+1
.1e1e	60		rts				rts
.1e1f					gdSetY:
.1e1f	8d 12 0c	sta $0c12			sta 	gdYPos
.1e22	8e 13 0c	stx $0c13			stx 	gdYPos+1
.1e25	60		rts				rts
.1e26					gdOptHorizontalWriter:
.1e26	48		pha				pha
.1e27	ad 22 9f	lda $9f22			lda 	$9F22 						; make it autoincrement.
.1e2a	09 10		ora #$10			ora 	#$10
.1e2c	8d 22 9f	sta $9f22			sta 	$9F22
.1e2f	68		pla				pla
.1e30					_gdOLoop:
.1e30	8d 23 9f	sta $9f23			sta 	$9F23
.1e33	e0 00		cpx #$00			cpx 	#0
.1e35	d0 05		bne $1e3c			bne 	_gdNoBorrow
.1e37	c0 00		cpy #$00			cpy 	#0
.1e39	f0 05		beq $1e40			beq 	_gdExit
.1e3b	88		dey				dey
.1e3c					_gdNoBorrow:
.1e3c	ca		dex				dex
.1e3d	4c 30 1e	jmp $1e30			jmp 	_gdOLoop
.1e40					_gdExit:
.1e40	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/miscellany/clock.asm

.1e41					Unary_Clock:
.1e41	a2 0c		ldx #$0c		ldx	#12
.1e43	20 88 3d	jsr $3d88		jsr	mainHandler
.1e46	48		pha				pha 								; save stack pos
.1e47	a2 04		ldx #$04		ldx	#4
.1e49	20 88 3d	jsr $3d88		jsr	mainHandler
.1e4c	98		tya				tya
.1e4d	48		pha				pha
.1e4e	20 50 ff	jsr $ff50			jsr 	$FF50
.1e51	68		pla				pla
.1e52	a8		tay				tay
.1e53	68		pla				pla 								; restore, repush, put into X to read offset
.1e54	48		pha				pha
.1e55	aa		tax				tax
.1e56	b5 98		lda $98,x			lda 	esInt0,x 					; must be 0-5
.1e58	c9 06		cmp #$06			cmp 	#6
.1e5a	b0 0d		bcs $1e69			bcs 	_UCValue
.1e5c	aa		tax				tax 								; index in X and read RTC.
.1e5d	b5 02		lda $02,x			lda 	2,x
.1e5f	85 32		sta $32				sta 	tempshort
.1e61	68		pla				pla 								; restore number stack index.
.1e62	aa		tax				tax
.1e63	a5 32		lda $32				lda 	tempShort
.1e65	95 98		sta $98,x			sta 	esInt0,x 					; rest are set up.
.1e67	8a		txa				txa
.1e68	60		rts				rts
.1e69					_UCValue:
.1e69	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.1e6b	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/miscellany/joystick.asm

.1e6e					Unary_JoyX:
.1e6e	38		sec				sec
.1e6f	b0 01		bcs $1e72			bcs 	JoystickRead
.1e71					Unary_JoyY:
.1e71	18		clc				clc
.1e72					JoystickRead:
.1e72	48		pha				pha 								; save stack position
.1e73	08		php				php 								; save test flag.
.1e74	a2 04		ldx #$04		ldx	#4
.1e76	20 88 3d	jsr $3d88		jsr	mainHandler
.1e79	20 d3 1e	jsr $1ed3			jsr 	ReadJoystick 				; read it.
.1e7c	28		plp				plp
.1e7d	b0 02		bcs $1e81			bcs 	_JRNoShift 					; if Y, shift right twice so accessing Y buttons
.1e7f	4a		lsr a				lsr 	a
.1e80	4a		lsr a				lsr 	a
.1e81					_JRNoShift:
.1e81	29 03		and #$03			and 	#3 							; isolate the test bits.
.1e83	f0 0d		beq $1e92			beq 	JoyReturnA 					; if nothing pressed, return A.
.1e85	c9 03		cmp #$03			cmp 	#3
.1e87	f0 07		beq $1e90			beq 	JoyReturnFalse 				; could be both on a keyboard.
.1e89	4a		lsr a				lsr 	a 							; bit 0 set, its +1
.1e8a	b0 16		bcs $1ea2			bcs 	JoyReturn1
.1e8c					JoyReturnTrue:
.1e8c	a9 ff		lda #$ff			lda 	#$FF
.1e8e	d0 02		bne $1e92			bne 	JoyReturnA
.1e90					JoyReturnFalse:
.1e90	a9 00		lda #$00			lda 	#0
.1e92					JoyReturnA:
.1e92	85 32		sta $32				sta 	tempShort 					; return A
.1e94	68		pla				pla
.1e95	aa		tax				tax
.1e96	a5 32		lda $32				lda 	tempShort
.1e98	95 98		sta $98,x			sta 	esInt0,x
.1e9a					JoyReturn13:
.1e9a	95 a0		sta $a0,x			sta 	esInt1,x
.1e9c	95 a8		sta $a8,x			sta 	esInt2,x
.1e9e	95 b0		sta $b0,x			sta 	esInt3,x
.1ea0	8a		txa				txa 								; return NSP in A
.1ea1	60		rts				rts
.1ea2					JoyReturn1:
.1ea2	68		pla				pla
.1ea3	aa		tax				tax
.1ea4	a9 01		lda #$01			lda 	#1
.1ea6	95 98		sta $98,x			sta 	esInt0,x
.1ea8	a9 00		lda #$00			lda 	#0
.1eaa	f0 ee		beq $1e9a			beq 	JoyReturn13
.1eac					Unary_JButton:
.1eac	48		pha				pha 								; save X on stack, put in X
.1ead	a2 0c		ldx #$0c		ldx	#12
.1eaf	20 88 3d	jsr $3d88		jsr	mainHandler
.1eb2	aa		tax				tax 								; get value to check, push on stack.
.1eb3	b5 98		lda $98,x			lda 	esInt0,x
.1eb5	c9 04		cmp #$04			cmp 	#4 							; check button 0-3
.1eb7	b0 15		bcs $1ece			bcs 	_UJBadValue
.1eb9	69 05		adc #$05			adc 	#5 							; four more shifts to get the bit into carry.
.1ebb	48		pha				pha 								; save that shift count on the stack.
.1ebc	a2 04		ldx #$04		ldx	#4
.1ebe	20 88 3d	jsr $3d88		jsr	mainHandler
.1ec1	68		pla				pla
.1ec2	aa		tax				tax
.1ec3	20 d3 1e	jsr $1ed3			jsr 	ReadJoystick 				; joystick read
.1ec6					_UJShift:
.1ec6	4a		lsr a				lsr 	a
.1ec7	ca		dex				dex
.1ec8	d0 fc		bne $1ec6			bne 	_UJShift
.1eca	b0 c0		bcs $1e8c			bcs 	JoyReturnTrue
.1ecc	90 c2		bcc $1e90			bcc 	JoyReturnFalse
.1ece					_UJBadValue:
.1ece	a2 28		ldx #$28			ldx 	#ErrorID_Hardware
.1ed0	20 18 15	jsr $1518		jsr	errorHandler
.1ed3					ReadJoystick:
.1ed3	8a		txa				txa
.1ed4	48		pha				pha
.1ed5	98		tya				tya
.1ed6	48		pha				pha
.1ed7	a9 00		lda #$00			lda 	#0
.1ed9	20 56 ff	jsr $ff56			jsr 	$FF56
.1edc	c0 00		cpy #$00			cpy 	#0
.1ede	d0 11		bne $1ef1			bne 	_RJError
.1ee0	c9 00		cmp #$00			cmp 	#0 							; bug, returns $00 initially
.1ee2	d0 02		bne $1ee6			bne 	_RJNoBug
.1ee4	a9 ff		lda #$ff			lda 	#$FF
.1ee6					_RJNoBug:
.1ee6	85 32		sta $32				sta 	tempShort
.1ee8	68		pla				pla
.1ee9	a8		tay				tay
.1eea	68		pla				pla
.1eeb	aa		tax				tax
.1eec	a5 32		lda $32				lda 	tempShort
.1eee	49 ff		eor #$ff			eor 	#$FF 						; active 1 bit.
.1ef0	60		rts				rts
.1ef1					_RJError:
.1ef1	a2 28		ldx #$28			ldx 	#ErrorID_Hardware
.1ef3	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/sprites/collide.asm

.0c14					hitSprite1:
>0c14							.fill 	1 							; this won't work ... if you nest HIT() which
.0c15					hitSprite2:
>0c15							.fill 	1
.0c16					hitRange:
>0c16							.fill 	1
.1ef6					FunctionCollide:
.1ef6	48		pha				pha 								; save and put index into X
.1ef7	aa		tax				tax
.1ef8	a9 00		lda #$00			lda 	#0 							; set hit range to default.
.1efa	8d 16 0c	sta $0c16			sta 	hitRange
.1efd	20 a2 1f	jsr $1fa2			jsr 	_FCGetSpriteID
.1f00	8d 14 0c	sta $0c14			sta 	hitSprite1
.1f03	8a		txa				txa
.1f04	48		pha				pha
.1f05	a2 02		ldx #$02		ldx	#2
.1f07	20 88 3d	jsr $3d88		jsr	mainHandler
.1f0a	68		pla				pla
.1f0b	aa		tax				tax
.1f0c	20 a2 1f	jsr $1fa2			jsr 	_FCGetSpriteID
.1f0f	8d 15 0c	sta $0c15			sta 	hitSprite2
.1f12	b1 28		lda ($28),y			lda 	(codePtr),y 				; is there a third parameter
.1f14	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.1f16	f0 13		beq $1f2b			beq 	_FCParam2
.1f18	8a		txa				txa
.1f19	48		pha				pha
.1f1a	a2 02		ldx #$02		ldx	#2
.1f1c	20 88 3d	jsr $3d88		jsr	mainHandler
.1f1f	68		pla				pla
.1f20	a2 0c		ldx #$0c		ldx	#12
.1f22	20 88 3d	jsr $3d88		jsr	mainHandler
.1f25	aa		tax				tax
.1f26	b5 98		lda $98,x			lda 	esInt0,x
.1f28	8d 16 0c	sta $0c16			sta 	hitRange
.1f2b					_FCParam2:
.1f2b	a2 04		ldx #$04		ldx	#4
.1f2d	20 88 3d	jsr $3d88		jsr	mainHandler
.1f30	68		pla				pla 								; set X to point to the stack again.
.1f31	48		pha				pha
.1f32	aa		tax				tax
.1f33	98		tya				tya
.1f34	48		pha				pha
.1f35	18		clc				clc 								; do it with the horizontal values.
.1f36	20 58 1f	jsr $1f58			jsr 	_FCCheck
.1f39	90 0a		bcc $1f45			bcc 	_FCFail
.1f3b	38		sec				sec 								; do it with the vertical values.
.1f3c	20 58 1f	jsr $1f58			jsr 	_FCCheck
.1f3f	90 04		bcc $1f45			bcc 	_FCFail
.1f41	a9 ff		lda #$ff			lda 	#255 						; pass, return -1
.1f43	d0 02		bne $1f47			bne 	_FCReturnA
.1f45					_FCFail:
.1f45	a9 00		lda #$00			lda 	#0 							; return 0, it didn't work.
.1f47					_FCReturnA:
.1f47	85 32		sta $32				sta 	tempShort 					; put result in tempShort
.1f49	68		pla				pla
.1f4a	a8		tay				tay
.1f4b	68		pla				pla 								; restore stack, return result and exit.
.1f4c	aa		tax				tax
.1f4d	a5 32		lda $32				lda 	tempShort
.1f4f	95 98		sta $98,x			sta 	esInt0,x
.1f51	95 a0		sta $a0,x			sta 	esInt1,x
.1f53	95 a8		sta $a8,x			sta 	esInt2,x
.1f55	95 b0		sta $b0,x			sta 	esInt3,x
.1f57	60		rts				rts
.1f58					_FCCheck:
.1f58	08		php				php 								; save the H/V flag twice
.1f59	08		php				php
.1f5a	ad 14 0c	lda $0c14			lda 	hitSprite1 					; select sprite 1 and read its location
.1f5d	20 e0 20	jsr $20e0			jsr 	SelectSpriteA 				; into X
.1f60	28		plp				plp
.1f61	20 f5 21	jsr $21f5			jsr 	SpriteReadCoordinate
.1f64	ad 15 0c	lda $0c15			lda 	hitSprite2					; now repeat for sprite 2 and location X+1
.1f67	20 e0 20	jsr $20e0			jsr 	SelectSpriteA
.1f6a	e8		inx				inx
.1f6b	28		plp				plp
.1f6c	20 f5 21	jsr $21f5			jsr 	SpriteReadCoordinate
.1f6f	ca		dex				dex
.1f70	38		sec				sec 								; calculate |s1.c-s2.c| put in temp0
.1f71	b5 98		lda $98,x			lda 	esInt0,x
.1f73	f5 99		sbc $99,x			sbc 	esInt0+1,x
.1f75	85 2a		sta $2a				sta 	temp0
.1f77	b5 a0		lda $a0,x			lda 	esInt1,x
.1f79	f5 a1		sbc $a1,x			sbc 	esInt1+1,x
.1f7b	85 2b		sta $2b				sta 	temp0+1
.1f7d	10 0d		bpl $1f8c			bpl 	_FCCIsPositive
.1f7f	38		sec				sec 								; if -ve calculate |difference|
.1f80	a9 00		lda #$00			lda 	#0
.1f82	e5 2a		sbc $2a				sbc 	temp0
.1f84	85 2a		sta $2a				sta 	temp0
.1f86	a9 00		lda #$00			lda 	#0
.1f88	e5 2b		sbc $2b				sbc 	temp0+1
.1f8a	85 2b		sta $2b				sta 	temp0+1
.1f8c					_FCCIsPositive:
.1f8c	a5 2b		lda $2b				lda 	temp0+1 					; if range >= 256 then definitely fail.
.1f8e	d0 10		bne $1fa0			bne 	_FCCFail
.1f90	18		clc				clc 								; work out required min distance which is
.1f91	b5 b0		lda $b0,x			lda 	esInt3,x 					; the sum of the half width/heights
.1f93	75 b1		adc $b1,x			adc 	esInt3+1,x
.1f95	ac 16 0c	ldy $0c16			ldy 	hitRange 					; get the hit range
.1f98	f0 01		beq $1f9b			beq 	_FCCNoSetRange 				; override if non zero.
.1f9a	98		tya				tya
.1f9b					_FCCNoSetRange:
.1f9b	c5 2a		cmp $2a				cmp 	temp0 						; result is range > distance
.1f9d	f0 01		beq $1fa0			beq 	_FCCFail
.1f9f	60		rts				rts
.1fa0					_FCCFail:
.1fa0	18		clc				clc
.1fa1	60		rts				rts
.1fa2					_FCGetSpriteID:
.1fa2	8a		txa				txa
.1fa3	a2 0c		ldx #$0c		ldx	#12
.1fa5	20 88 3d	jsr $3d88		jsr	mainHandler
.1fa8	aa		tax				tax
.1fa9	b5 98		lda $98,x			lda 	esInt0,x
.1fab	30 01		bmi $1fae			bmi 	_FCGSValue
.1fad	60		rts				rts
.1fae					_FCGSValue:
.1fae	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.1fb0	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/sprites/sprite.asm

.0c17					currSprite:
>0c17							.fill 	2
.1fb3					CommandSprite:
.1fb3	20 b5 20	jsr $20b5			jsr 	CSCheckOnOff 				; look for TRUE/FALSE
.1fb6	d0 0d		bne $1fc5			bne 	_CSCheckClear
.1fb8	ad 29 9f	lda $9f29			lda 	$9F29 						; sprite enable is bit 6.
.1fbb	29 bf		and #$bf			and 	#$BF 						; clear it whatever
.1fbd	90 02		bcc $1fc1			bcc 	_CSNotOn 					; if CS turn on, so set it
.1fbf	09 40		ora #$40			ora 	#$40
.1fc1					_CSNotOn:
.1fc1	8d 29 9f	sta $9f29			sta 	$9F29 						; write it back in new state and exit
.1fc4	60		rts				rts
.1fc5					_CSCheckClear:
.1fc5	a9 00		lda #$00			lda 	#0 							; no sprite currently selected.
.1fc7	8d 18 0c	sta $0c18			sta 	currSprite+1
.1fca	b1 28		lda ($28),y			lda 	(codePtr),y 				; check for CLEAR
.1fcc	c9 e8		cmp #$e8			cmp 	#TKW_CLEAR
.1fce	d0 05		bne $1fd5			bne 	_CSCommandLoop 				; not CLEAR, go to main loop
.1fd0	20 c6 20	jsr $20c6			jsr 	CSClearSprites 				; clear all the sprites
.1fd3	c8		iny				iny 								; consume CLEAR token and exit.
.1fd4	60		rts				rts
.1fd5					_CSCommandLoop:
.1fd5	20 b5 20	jsr $20b5			jsr 	CSCheckOnOff 				; check sprite on/off
.1fd8	f0 2c		beq $2006			beq 	_CSSetVisibility
.1fda	b1 28		lda ($28),y			lda 	(codePtr),y 				; get and consume character
.1fdc	c9 80		cmp #$80			cmp 	#TOK_EOL					; EOL exit.
.1fde	f0 25		beq $2005			beq 	_CSExit
.1fe0	c8		iny				iny									; consume it
.1fe1	c9 ca		cmp #$ca			cmp 	#TKW_COLON 					; colon exit
.1fe3	f0 20		beq $2005			beq 	_CSExit
.1fe5	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; semantic comma
.1fe7	f0 ec		beq $1fd5			beq 	_CSCommandLoop
.1fe9	c9 da		cmp #$da			cmp		#TKW_IMAGE 					; image ?
.1feb	f0 69		beq $2056			beq 	_CSSetImage
.1fed	c9 dc		cmp #$dc			cmp 	#TKW_FLIP 					; flip ?
.1fef	f0 2b		beq $201c			beq 	_CSSetFlip
.1ff1	c9 ce		cmp #$ce			cmp 	#TKW_TO 					; to ?
.1ff3	f0 46		beq $203b			beq 	_CSSetPos
.1ff5	88		dey				dey 								; unpick DEY
.1ff6	a9 00		lda #$00			lda 	#0 							; sprite # now at level 0
.1ff8	a2 0c		ldx #$0c		ldx	#12
.1ffa	20 88 3d	jsr $3d88		jsr	mainHandler
.1ffd	a5 98		lda $98				lda 	esInt0
.1fff	20 e0 20	jsr $20e0			jsr 	SelectSpriteA
.2002	4c d5 1f	jmp $1fd5			jmp 	_CSCommandLoop
.2005					_CSExit:
.2005	60		rts				rts
.2006					_CSSetVisibility:
.2006	08		php				php 								; save carry
.2007	a9 06		lda #$06			lda 	#6 							; set pos to offset 6.
.2009	20 9c 20	jsr $209c			jsr 	SpriteSetTarget
.200c	ad 23 9f	lda $9f23			lda 	$9F23 						; read it.
.200f	29 f3		and #$f3			and 	#$F3 						; clear depth bits, disabling it.
.2011	28		plp				plp
.2012	90 02		bcc $2016			bcc 	_CSSetOff 					; check if carry was set
.2014	09 0c		ora #$0c			ora 	#$0C 						; otherwise set depth bits to 11, on top.
.2016					_CSSetOff:
.2016	8d 23 9f	sta $9f23			sta 	$9F23 						; update and loop back
.2019	4c d5 1f	jmp $1fd5			jmp 	_CSCommandLoop
.201c					_CSSetFlip:
.201c	a9 00		lda #$00			lda 	#0 							; image # now at level 0
.201e	a2 0c		ldx #$0c		ldx	#12
.2020	20 88 3d	jsr $3d88		jsr	mainHandler
.2023	a9 06		lda #$06			lda 	#6 							; set sprite position to +6
.2025	20 9c 20	jsr $209c			jsr 	SpriteSetTarget
.2028	a5 98		lda $98				lda 	esInt0 						; flip value & 3 => temp0
.202a	29 03		and #$03			and 	#3
.202c	85 2a		sta $2a				sta 	temp0
.202e	ad 23 9f	lda $9f23			lda 	$9F23 						; update the flip.
.2031	29 fc		and #$fc			and 	#$FC
.2033	05 2a		ora $2a				ora 	temp0
.2035	8d 23 9f	sta $9f23			sta 	$9F23
.2038	4c d5 1f	jmp $1fd5			jmp 	_CSCommandLoop
.203b					_CSSetPos:
.203b	a9 00		lda #$00			lda 	#0 							; X now at level 0
.203d	a2 0a		ldx #$0a		ldx	#10
.203f	20 88 3d	jsr $3d88		jsr	mainHandler
.2042	a2 02		ldx #$02		ldx	#2
.2044	20 88 3d	jsr $3d88		jsr	mainHandler
.2047	a9 01		lda #$01			lda 	#1 							; Y now at level 1
.2049	a2 0a		ldx #$0a		ldx	#10
.204b	20 88 3d	jsr $3d88		jsr	mainHandler
.204e	a2 00		ldx #$00			ldx 	#0 							; coords at 0,1
.2050	20 b1 21	jsr $21b1			jsr 	SpriteMove 					; move it.
.2053	4c d5 1f	jmp $1fd5			jmp 	_CSCommandLoop
.2056					_CSSetImage:
.2056	a9 00		lda #$00			lda 	#0 							; image # now at level 0
.2058	a2 0c		ldx #$0c		ldx	#12
.205a	20 88 3d	jsr $3d88		jsr	mainHandler
.205d	a9 00		lda #$00			lda 	#0 							; set sprite position to +0
.205f	20 9c 20	jsr $209c			jsr 	SpriteSetTarget
.2062	a6 98		ldx $98				ldx 	esInt0 						; get image # into X
.2064	bd 5e 0c	lda $0c5e,x			lda 	imageAddr32Low,x 			; copy low address in.
.2067	8d 23 9f	sta $9f23			sta 	$9F23
.206a	ee 20 9f	inc $9f20			inc 	$9F20 						; bump to offset 1.
.206d	bd 1e 0c	lda $0c1e,x			lda 	imageInfo,x 				; get 4/8 bit flag from info.
.2070	29 10		and #$10			and 	#$10
.2072	0a		asl a				asl 	a
.2073	0a		asl a				asl		a
.2074	0a		asl a				asl 	a 							; put into bit 7
.2075	1d 9e 0c	ora $0c9e,x			ora 	imageAddr32High,x 			; or high address with it.
.2078	8d 23 9f	sta $9f23			sta 	$9F23 						; write the high byte.
.207b	a9 06		lda #$06			lda 	#6
.207d	20 9c 20	jsr $209c			jsr 	SpriteSetTarget 			; set sprite on.
.2080	ad 23 9f	lda $9f23			lda 	$9F23
.2083	09 0c		ora #$0c			ora 	#$0C
.2085	8d 23 9f	sta $9f23			sta 	$9F23
.2088	ee 20 9f	inc $9f20			inc 	$9F20 						; point to byte 7 : height/width/palette offset
.208b	bd 1e 0c	lda $0c1e,x			lda 	imageInfo,x 				; get image info
.208e	0a		asl a				asl 	a 							; shift bits 0-3 to 4-7
.208f	0a		asl a				asl 	a
.2090	0a		asl a				asl 	a
.2091	0a		asl a				asl 	a
.2092	b0 02		bcs $2096			bcs		_CSNoOffset 				; if bit 4 was set don't set the offset.
.2094	09 0f		ora #$0f			ora 	#$0F 						; set palette offset and write back
.2096					_CSNoOffset:
.2096	8d 23 9f	sta $9f23			sta 	$9F23
.2099	4c d5 1f	jmp $1fd5			jmp 	_CSCommandLoop
.209c					SpriteSetTarget:
.209c	0d 17 0c	ora $0c17			ora 	currSprite
.209f	8d 20 9f	sta $9f20			sta 	$9F20
.20a2	ad 18 0c	lda $0c18			lda 	currSprite+1
.20a5	f0 09		beq $20b0			beq 	_SSTNoSet
.20a7	8d 21 9f	sta $9f21			sta 	$9F21
.20aa	a9 01		lda #$01			lda 	#$01
.20ac	8d 22 9f	sta $9f22			sta 	$9F22
.20af	60		rts				rts
.20b0					_SSTNoSet:
.20b0	a2 27		ldx #$27			ldx 	#ErrorID_NoSprite
.20b2	20 18 15	jsr $1518		jsr	errorHandler
.20b5					CSCheckOnOff:
.20b5	b1 28		lda ($28),y			lda 	(codePtr),y 				; get and consume it.
.20b7	c8		iny				iny
.20b8	c9 ab		cmp #$ab			cmp 	#TKW_FALSE					; return CC/EQ if FALSE
.20ba	18		clc				clc
.20bb	f0 08		beq $20c5			beq 	_CSCOExit
.20bd	c9 aa		cmp #$aa			cmp 	#TKW_TRUE 					; return CS/EQ if TRUE
.20bf	38		sec				sec 								; return NE if neither.
.20c0	f0 03		beq $20c5			beq 	_CSCOExit
.20c2	88		dey				dey 								; undo consume
.20c3	c9 aa		cmp #$aa			cmp 	#TKW_TRUE 					; and set NE again, DEY will change it.
.20c5					_CSCOExit:
.20c5	60		rts				rts
.20c6					CSClearSprites:
.20c6	a9 11		lda #$11			lda 	#$11 						; set address to 1FC00 with single bump
.20c8	8d 22 9f	sta $9f22			sta 	$9F22
.20cb	a9 fc		lda #$fc			lda 	#$FC
.20cd	8d 21 9f	sta $9f21			sta 	$9F21
.20d0	a9 00		lda #$00			lda 	#0
.20d2	8d 20 9f	sta $9f20			sta 	$9F20
.20d5					_CSClear:
.20d5	a9 00		lda #$00			lda 	#0 							; set everything to $00
.20d7	8d 23 9f	sta $9f23			sta 	$9F23
.20da	ad 21 9f	lda $9f21			lda 	$9F21
.20dd	d0 f6		bne $20d5			bne 	_CSClear
.20df	60		rts				rts
.20e0					SelectSpriteA:
.20e0	85 2a		sta $2a				sta 	temp0
.20e2	a9 00		lda #$00			lda 	#0
.20e4	06 2a		asl $2a				asl		temp0 						; multiply A:temp0 by 8
.20e6	b0 11		bcs $20f9			bcs 	_CSBadValue 				; sprites only 0-127
.20e8	06 2a		asl $2a				asl 	temp0
.20ea	2a		rol a				rol 	a
.20eb	06 2a		asl $2a				asl 	temp0
.20ed	2a		rol a				rol 	a
.20ee	09 fc		ora #$fc			ora 	#$FC 						; MSB of address (barring $01 upper third byte)
.20f0	8d 18 0c	sta $0c18			sta 	currSprite+1
.20f3	a5 2a		lda $2a				lda 	temp0 						; LSB of address
.20f5	8d 17 0c	sta $0c17			sta 	currSprite+0
.20f8	60		rts				rts
.20f9					_CSBadValue
.20f9	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.20fb	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/sprites/spritedraw.asm

.20fe					Command_Paint:
.20fe	a9 06		lda #$06			lda 	#ImageHandler & $FF
.2100	a2 21		ldx #$21			ldx 	#ImageHandler >> 8
.2102	20 d1 18	jsr $18d1			jsr 	GHandler
.2105	60		rts				rts
.2106					ImageHandler:
.2106	a9 0d		lda #$0d			lda 	#SpriteImageAccess & $FF
.2108	a2 21		ldx #$21			ldx 	#SpriteImageAccess >> 8
.210a	4c 43 1b	jmp $1b43			jmp 	ImageRenderer
.210d					SpriteImageAccess:
.210d	e0 ff		cpx #$ff			cpx 	#255
.210f	d0 1f		bne $2130			bne 	_SIAGetPixel
.2111	ae ff 0b	ldx $0bff			ldx 	gdImage 					; get the image #
.2114	bd 1e 0c	lda $0c1e,x			lda 	imageInfo,x 				; get the image information.
.2117	48		pha				pha
.2118	29 03		and #$03			and 	#3 							; LSB x 2 width
.211a	aa		tax				tax
.211b	bd 2c 21	lda $212c,x			lda 	_SIASizeTable,x
.211e	aa		tax				tax
.211f	68		pla				pla 								; get back next 2 bits are height
.2120	4a		lsr a				lsr 	a
.2121	4a		lsr a				lsr 	a
.2122	29 03		and #$03			and 	#3
.2124	a8		tay				tay
.2125	b9 2c 21	lda $212c,y			lda 	_SIASizeTable,y
.2128	a8		tay				tay
.2129	a9 01		lda #$01			lda 	#1 							; image is type 1, e.g. colour.
.212b	60		rts				rts
.212c					_SIASizeTable:
>212c	08 10 20 40					.byte 	8,16,32,64 					; size of sprites from 2 bits,
.2130					_SIAGetPixel:
.2130	84 2a		sty $2a				sty 	temp0 						; this is the Y size 8,16,32,64 => temp0
.2132	a9 00		lda #$00			lda 	#0
.2134	85 2b		sta $2b				sta 	temp0+1
.2136	86 2d		stx $2d				stx 	temp1+1 					; save X into temp1+1
.2138	ac ff 0b	ldy $0bff			ldy 	gdImage 					; get image info into A
.213b	b9 1e 0c	lda $0c1e,y			lda 	imageInfo,y
.213e	48		pha				pha
.213f	29 10		and #$10			and 	#$10 						; save the 4 bit flag part in temp1
.2141	85 2c		sta $2c				sta 	temp1
.2143	68		pla				pla 								; get width of sprite as 00-11 (8-64)
.2144	29 03		and #$03			and 	#3 							; we shift left +3 e.g. 2^(A+3)
.2146	18		clc				clc
.2147	69 03		adc #$03			adc 	#3
.2149	a8		tay				tay
.214a					_SIAMultiply:
.214a	06 2a		asl $2a				asl 	temp0
.214c	26 2b		rol $2b				rol 	temp0+1
.214e	88		dey				dey
.214f	d0 f9		bne $214a			bne 	_SIAMultiply
.2151	8a		txa				txa 								; add X to it.
.2152	18		clc				clc
.2153	65 2a		adc $2a				adc 	temp0
.2155	85 2a		sta $2a				sta 	temp0
.2157	90 02		bcc $215b			bcc 	_SIANoCarry1
.2159	e6 2b		inc $2b				inc 	temp0+1
.215b					_SIANoCarry1:
.215b	a5 2c		lda $2c				lda 	temp1 						; if the mode bit is 0 then halve this value
.215d	d0 04		bne $2163			bne 	_SIANoHalf 					; because we pack 2 pixels in every byte.
.215f	46 2b		lsr $2b				lsr 	temp0+1
.2161	66 2a		ror $2a				ror 	temp0
.2163					_SIANoHalf:
.2163	ae ff 0b	ldx $0bff			ldx 	gdImage 					; copy the image address / 32 into temp2/temp3
.2166	bd 5e 0c	lda $0c5e,x			lda 	imageAddr32Low,x
.2169	85 2e		sta $2e				sta 	temp2
.216b	bd 9e 0c	lda $0c9e,x			lda 	imageAddr32High,x
.216e	85 2f		sta $2f				sta 	temp2+1
.2170	a9 00		lda #$00			lda 	#0
.2172	85 30		sta $30				sta 	temp3
.2174	a2 05		ldx #$05			ldx 	#5 							; multiply by 32 e.g. 2^5
.2176					_SIMult32:
.2176	06 2e		asl $2e				asl 	temp2
.2178	26 2f		rol $2f				rol 	temp2+1
.217a	26 30		rol $30				rol 	temp3
.217c	ca		dex				dex
.217d	d0 f7		bne $2176			bne 	_SIMult32
.217f	ee 25 9f	inc $9f25			inc 	$9F25 						; select alternate data port
.2182	18		clc				clc
.2183	a5 2a		lda $2a				lda 	temp0 						; add offset to sprite address x 32 and write to address
.2185	65 2e		adc $2e				adc 	temp2
.2187	8d 20 9f	sta $9f20			sta 	$9F20
.218a	a5 2b		lda $2b				lda 	temp0+1
.218c	65 2f		adc $2f				adc 	temp2+1
.218e	8d 21 9f	sta $9f21			sta 	$9F21
.2191	a9 00		lda #$00			lda 	#0
.2193	65 30		adc $30				adc 	temp3
.2195	8d 22 9f	sta $9f22			sta 	$9F22
.2198	ad 24 9f	lda $9f24			lda 	$9F24 						; read the sprite data port 1
.219b	ce 25 9f	dec $9f25			dec 	$9F25 						; select original data port.
.219e	a6 2c		ldx $2c				ldx 	temp1 						; is it 8 bit ? if so, then exit
.21a0	d0 0e		bne $21b0			bne 	_SIExit
.21a2	46 2d		lsr $2d				lsr 	temp1+1 					; get even/odd X and shift A accordingly
.21a4	b0 04		bcs $21aa			bcs 	_SIHalf
.21a6	4a		lsr a				lsr 	a
.21a7	4a		lsr a				lsr 	a
.21a8	4a		lsr a				lsr 	a
.21a9	4a		lsr a				lsr 	a
.21aa					_SIHalf:
.21aa	29 0f		and #$0f			and 	#15 						; if 0 (e.g. would paint 240, return 0 transparent)
.21ac	f0 02		beq $21b0			beq 	_SIExit
.21ae	09 f0		ora #$f0			ora 	#$F0
.21b0					_SIExit:
.21b0	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/sprites/spritemove.asm

.21b1					SpriteMove:
.21b1	98		tya				tya
.21b2	48		pha				pha
.21b3	a9 07		lda #$07			lda 	#7 									; point to height/width byte and read it.
.21b5	20 9c 20	jsr $209c			jsr 	SpriteSetTarget
.21b8	ad 23 9f	lda $9f23			lda 	$9F23
.21bb	4a		lsr a				lsr 	a 									; A now contains bits 0-1 (width) 2-3 (height)
.21bc	4a		lsr a				lsr 	a
.21bd	4a		lsr a				lsr 	a
.21be	4a		lsr a				lsr 	a
.21bf	85 2a		sta $2a				sta 	temp0 								; save these bits so we can work out the centre.
.21c1	a9 02		lda #$02			lda 	#2 									; point to X position.Low
.21c3	20 9c 20	jsr $209c			jsr 	SpriteSetTarget
.21c6	20 d5 21	jsr $21d5			jsr 	SMWritePosition 					; write X position out.
.21c9	46 2a		lsr $2a				lsr 	temp0 								; shift height bits into 0,1
.21cb	46 2a		lsr $2a				lsr 	temp0
.21cd	e8		inx				inx 										; get the y position
.21ce	20 d5 21	jsr $21d5			jsr 	SMWritePosition 					; and write that out.
.21d1	ca		dex				dex 										; fix X and quit.
.21d2	68		pla				pla
.21d3	a8		tay				tay
.21d4	60		rts				rts
.21d5					SMWritePosition:
.21d5	a5 2a		lda $2a				lda 	temp0 								; get dim size
.21d7	29 03		and #$03			and 	#3 									; in range into Y
.21d9	a8		tay				tay
.21da	38		sec				sec
.21db	b5 98		lda $98,x			lda 	esInt0,x
.21dd	f9 f1 21	sbc $21f1,y			sbc 	SMHalfSize,y
.21e0	8d 23 9f	sta $9f23			sta 	$9F23
.21e3	ee 20 9f	inc $9f20			inc 	$9F20
.21e6	b5 a0		lda $a0,x			lda 	esInt1,x
.21e8	e9 00		sbc #$00			sbc 	#0
.21ea	8d 23 9f	sta $9f23			sta 	$9F23
.21ed	ee 20 9f	inc $9f20			inc 	$9F20
.21f0	60		rts				rts
.21f1					SMHalfSize:
>21f1	04 08 10 20					.byte 	4,8,16,32 							; half size each dimension.
.21f5					SpriteReadCoordinate:
.21f5	98		tya				tya
.21f6	48		pha				pha
.21f7	08		php				php 										; save CTR on stack
.21f8	a9 07		lda #$07			lda 	#7 									; point to height/width byte and read it.
.21fa	20 9c 20	jsr $209c			jsr 	SpriteSetTarget
.21fd	ad 23 9f	lda $9f23			lda 	$9F23
.2200	4a		lsr a				lsr 	a 									; A now contains bits 0-1 (width) 2-3 (height)
.2201	4a		lsr a				lsr 	a
.2202	4a		lsr a				lsr 	a
.2203	4a		lsr a				lsr 	a
.2204	28		plp				plp 										; restore CTS
.2205	08		php				php
.2206	90 02		bcc $220a			bcc 	_SPRCNotY1 							; if it is Y, e.g. CS, shift twice more.
.2208	4a		lsr a				lsr 	a
.2209	4a		lsr a				lsr 	a
.220a					_SPRCNotY1:
.220a	29 03		and #$03			and 	#3 									; point into half width/height
.220c	a8		tay				tay
.220d	b9 f1 21	lda $21f1,y			lda 	SMHalfSize,y 						; get half size -> esInt3,x
.2210	95 b0		sta $b0,x			sta 	esInt3,x
.2212	28		plp				plp 										; CS Y CC X
.2213	a9 00		lda #$00			lda 	#0 									; A = 0 X A = 2 Y
.2215	2a		rol a				rol 	a
.2216	2a		rol a				rol 	a
.2217	69 02		adc #$02			adc 	#2 									; A = 2 X A = 4 Y
.2219	20 9c 20	jsr $209c			jsr 	SpriteSetTarget 					; set data pointer offset by that
.221c	18		clc				clc 										; read and unfix centre.
.221d	ad 23 9f	lda $9f23			lda 	$9F23
.2220	75 b0		adc $b0,x			adc 	esInt3,x
.2222	95 98		sta $98,x			sta 	esInt0,x
.2224	ee 20 9f	inc $9f20			inc 	$9F20 								; do MSB
.2227	ad 23 9f	lda $9f23			lda 	$9F23
.222a	69 00		adc #$00			adc 	#0
.222c	29 0f		and #$0f			and 	#$0F 								; sign extend on bit 11.
.222e	c9 08		cmp #$08			cmp		#$08
.2230	90 02		bcc $2234			bcc 	_SPRCNoSX
.2232	09 f0		ora #$f0			ora 	#$F0
.2234					_SPRCNoSX:
.2234	95 a0		sta $a0,x			sta 	esInt1,x
.2236	68		pla				pla
.2237	a8		tay				tay
.2238	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/sprites/spriteutils.asm

.2239					Sprite_GetX:
.2239	18		clc				clc
.223a	90 01		bcc $223d			bcc 	SpriteGetCode
.223c					Sprite_GetY:
.223c	38		sec				sec
.223d					SpriteGetCode:
.223d	08		php				php 								; CLC : X SEC: Y, save on stack.
.223e	48		pha				pha 								; save stack position
.223f	20 5b 22	jsr $225b			jsr 	GetSpriteNumber 			; get # of sprite.
.2242	a2 04		ldx #$04		ldx	#4
.2244	20 88 3d	jsr $3d88		jsr	mainHandler
.2247	68		pla				pla
.2248	aa		tax				tax
.2249	28		plp				plp 								; which one ?
.224a	20 f5 21	jsr $21f5			jsr 	SpriteReadCoordinate 		; read appropriate coordinate into esInt0,x
.224d	b5 a0		lda $a0,x			lda 	esInt1,x 					; get sign bit, sign extend 16->32 bits
.224f	29 80		and #$80			and 	#$80
.2251	f0 02		beq $2255			beq 	_SGXYPos
.2253	a9 ff		lda #$ff			lda 	#$FF
.2255					_SGXYPos:
.2255	95 a8		sta $a8,x			sta 	esInt2,x
.2257	95 b0		sta $b0,x			sta 	esInt3,x
.2259	8a		txa				txa 								; return NSP in A
.225a	60		rts				rts
.225b					GetSpriteNumber:
.225b	48		pha				pha
.225c	a2 0c		ldx #$0c		ldx	#12
.225e	20 88 3d	jsr $3d88		jsr	mainHandler
.2261	68		pla				pla
.2262	aa		tax				tax
.2263	b5 98		lda $98,x			lda 	esInt0,x
.2265	20 e0 20	jsr $20e0			jsr 	SelectSpriteA
.2268	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/video/mode.asm

.0c19					currentMode:
>0c19							.fill 	4
.2269					ForceMode0:
.2269	a2 00		ldx #$00			ldx 	#0
.226b	86 98		stx $98				stx 	esInt0 						; in case we do it.
.226d					_FMCheck:
.226d	bd 00 23	lda $2300,x			lda 	CMModeList,x 				; do we need to switch ?
.2270	dd 19 0c	cmp $0c19,x			cmp 	currentMode,x
.2273	d0 13		bne $2288			bne 	CMSetMode 					; different so switch.
.2275	e8		inx				inx
.2276	e0 04		cpx #$04			cpx 	#4
.2278	d0 f3		bne $226d			bne 	_FMCheck
.227a	60		rts				rts
.227b					CommandMode:
.227b	a9 00		lda #$00			lda 	#0
.227d	a2 0a		ldx #$0a		ldx	#10
.227f	20 88 3d	jsr $3d88		jsr	mainHandler
.2282	a5 b0		lda $b0				lda 	esInt3
.2284	29 70		and #$70			and 	#$70
.2286	d0 06		bne $228e			bne 	CMNoExpand
.2288					CMSetMode:
.2288	20 df 22	jsr $22df			jsr 	CMExpandMode
.228b	4c a2 22	jmp $22a2			jmp 	CMUpdateMode
.228e					CMNoExpand:
.228e	a5 98		lda $98				lda 	esInt0
.2290	8d 19 0c	sta $0c19			sta 	currentMode
.2293	a5 a0		lda $a0				lda 	esInt1
.2295	8d 1a 0c	sta $0c1a			sta 	currentMode+1
.2298	a5 a8		lda $a8				lda 	esInt2
.229a	8d 1b 0c	sta $0c1b			sta 	currentMode+2
.229d	a5 b0		lda $b0				lda 	esInt3
.229f	8d 1c 0c	sta $0c1c			sta 	currentMode+3
.22a2					CMUpdateMode:
.22a2	a2 11		ldx #$11			ldx 	#$11
.22a4					_CMClear:
.22a4	a9 00		lda #$00			lda 	#0
.22a6	9d 29 9f	sta $9f29,x			sta 	$9F29,X
.22a9	ca		dex				dex
.22aa	10 f8		bpl $22a4			bpl 	_CMClear
.22ac	ad 1c 0c	lda $0c1c			lda 	currentMode+3 				; get current mode
.22af	48		pha				pha 								; stack twice.
.22b0	48		pha				pha
.22b1	29 70		and #$70			and 	#$70 						; isolates bits 6,5,4 (sprites,L1 enable,L0 enable)
.22b3	09 01		ora #$01			ora 	#$01 						; turn the output on.
.22b5	8d 29 9f	sta $9f29			sta 	$9F29 						; write to DC_VIDEO
.22b8	68		pla				pla 								; get back
.22b9	20 10 23	jsr $2310			jsr 	CMToScale 					; convert lower 2 bits to a scale.
.22bc	8d 2a 9f	sta $9f2a			sta 	$9F2A 						; write to H-Scale
.22bf	68		pla				pla 								; get back, convert bits 2,3 to a scale.
.22c0	4a		lsr a				lsr 	a
.22c1	4a		lsr a				lsr 	a
.22c2	20 10 23	jsr $2310			jsr 	CMToScale 					; convert lower 2 bits to a scale.
.22c5	8d 2b 9f	sta $9f2b			sta 	$9F2B
.22c8	a2 00		ldx #$00			ldx 	#0 							; this is offset from $9F2D to do L0
.22ca	ad 19 0c	lda $0c19			lda 	currentMode					; get L0 config byte
.22cd	20 1b 23	jsr $231b			jsr 	CMDecodeLayer 				; and decode layer 0
.22d0	a2 07		ldx #$07			ldx 	#7 							; when we do layer 1, offset by 7 hence starts at $9F34
.22d2	ad 1a 0c	lda $0c1a			lda 	currentMode+1
.22d5	20 1b 23	jsr $231b			jsr 	CMDecodeLayer
.22d8	20 75 1d	jsr $1d75			jsr 	gdModeChanged 				; check the bitmap status.
.22db	20 ba 18	jsr $18ba			jsr 	GResetStorage 				; reset the graphics drawing storage.
.22de	60		rts				rts
.22df					CMExpandMode:
.22df	a5 98		lda $98				lda 	esInt0 						; get mode number
.22e1	c9 04		cmp #$04			cmp 	#(CMEndModeList-CMModeList) >> 2
.22e3	b0 16		bcs $22fb			bcs 	_CMModeError
.22e5	0a		asl a				asl 	a 							; x 4 into X
.22e6	0a		asl a				asl 	a
.22e7	aa		tax				tax
.22e8	98		tya				tya
.22e9	48		pha				pha
.22ea	a0 00		ldy #$00			ldy 	#0
.22ec					_CMEMCopy:
.22ec	bd 00 23	lda $2300,x			lda 	CMModeList,x
.22ef	99 19 0c	sta $0c19,y			sta 	currentMode,y
.22f2	e8		inx				inx
.22f3	c8		iny				iny
.22f4	c0 04		cpy #$04			cpy 	#4
.22f6	d0 f4		bne $22ec			bne 	_CMEMCopy
.22f8	68		pla				pla
.22f9	a8		tay				tay
.22fa	60		rts				rts
.22fb					_CMModeError:
.22fb	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.22fd	20 18 15	jsr $1518		jsr	errorHandler
.2300					CMModeList:
>2300	00 60 00 20					.dword	$20006000 					; Mode 0 which is the standard 80x60 mode, no sprites
>2304	00 60 00 25					.dword 	$25006000					; Mode 1 (40x30)
>2308	00 60 00 2a					.dword 	$2A006000 					; Mode 2 (20x15)
>230c	07 60 00 15					.dword 	$15006007 					; Mode 3 (320x200 256 colour bitmap)
.2310					CMEndModeList:
.2310					CMToScale:
.2310	29 03		and #$03			and 	#3 							; lower 2 bits only
.2312	aa		tax				tax 								; put in X for counting
.2313	a9 00		lda #$00			lda 	#0 							; zero result
.2315	38		sec				sec 								; first time rotate CS in
.2316					_CMTSLoop:
.2316	6a		ror a				ror 	a
.2317	ca		dex				dex
.2318	10 fc		bpl $2316			bpl 	_CMTSLoop
.231a	60		rts				rts
.231b					CMDecodeLayer:
.231b	48		pha				pha 								; save it.
.231c	29 f7		and #$f7			and 	#$F7 						; all the bits except T256C which you can't set using this
.231e	9d 2d 9f	sta $9f2d,x			sta 	$9F2D,X
.2321	68		pla				pla 								; get it back
.2322	29 08		and #$08			and 	#$08 						; the missing bit sets the tile size.
.2324	f0 02		beq $2328			beq 	_CMDLNotSet
.2326	a9 03		lda #$03			lda 	#$03 						; which sets both lower bits, they're square.
.2328					_CMDLNotSet:
.2328	e0 00		cpx #$00			cpx 	#0
.232a	f0 06		beq $2332			beq 	_CMDLayer0 					; layer 1 has standard defaults for tile table, e.g. $7C
.232c	09 7c		ora #$7c			ora 	#$7C 						; so set those bits and write it out.
.232e	9d 2f 9f	sta $9f2f,x			sta 	$9F2F,X
.2331	60		rts				rts
.2332					_CMDLayer0:
.2332	09 80		ora #$80			ora 	#$80 						; tile base is $80
.2334	9d 2f 9f	sta $9f2f,x			sta 	$9F2F,X
.2337	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/video/palette.asm

.2338					CommandPalette:
.2338	a9 00		lda #$00			lda 	#0
.233a	a2 0c		ldx #$0c		ldx	#12
.233c	20 88 3d	jsr $3d88		jsr	mainHandler
.233f	a2 02		ldx #$02		ldx	#2
.2341	20 88 3d	jsr $3d88		jsr	mainHandler
.2344	a9 01		lda #$01			lda 	#1
.2346	a2 08		ldx #$08		ldx	#8
.2348	20 88 3d	jsr $3d88		jsr	mainHandler
.234b	a5 98		lda $98				lda 	esInt0 					; get palette #
.234d	20 5d 23	jsr $235d			jsr 	PointToPaletteA			; point to palette register
.2350	a5 99		lda $99				lda 	esInt0+1
.2352	8d 23 9f	sta $9f23			sta 	$9F23
.2355	a5 a1		lda $a1				lda 	esInt1+1
.2357	29 0f		and #$0f			and 	#$0F
.2359	8d 23 9f	sta $9f23			sta 	$9F23
.235c	60		rts				rts
.235d					PointToPaletteA:
.235d	0a		asl a				asl 	a 							; x 2 -> LSB
.235e	8d 20 9f	sta $9f20			sta 	$9F20
.2361	a9 00		lda #$00			lda 	#0 							; carry into A
.2363	2a		rol a				rol 	a
.2364	09 fa		ora #$fa			ora 	#$FA 						; make correct address
.2366	8d 21 9f	sta $9f21			sta 	$9F21
.2369	a9 11		lda #$11			lda 	#$11 						; $01 and single step => $9F22
.236b	8d 22 9f	sta $9f22			sta 	$9F22
.236e	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/video/vload.asm

.236f					Command_VLoad:
.236f	a9 00		lda #$00			lda 	#0 								; string which is the file name
.2371	a2 0e		ldx #$0e		ldx	#14
.2373	20 88 3d	jsr $3d88		jsr	mainHandler
.2376	a2 01		ldx #$01			ldx 	#1 								; load address at +1.
.2378	a5 35		lda $35				lda 	lowMemory 						; load it into lowMemory (for now ?)
.237a	95 98		sta $98,x			sta 	esInt0,x
.237c	a5 36		lda $36				lda 	lowMemory+1
.237e	95 a0		sta $a0,x			sta 	esInt1,x
.2380	a9 00		lda #$00			lda 	#0
.2382	95 a8		sta $a8,x			sta 	esInt2,x
.2384	95 b0		sta $b0,x			sta 	esInt3,x
.2386	a2 0e		ldx #$0e		ldx	#14
.2388	20 f6 14	jsr $14f6		jsr	deviceHandler
.238b	a5 99		lda $99				lda 	esInt0+1 						; (temp0) is where we are decoding from.
.238d	85 2a		sta $2a				sta 	temp0
.238f	a5 a1		lda $a1				lda 	esInt1+1
.2391	85 2b		sta $2b				sta 	temp0+1
.2393	20 0f 24	jsr $240f			jsr 	LoadVRAMFile 					; load the VRAM file in.
.2396	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/video/vpeekpoke.asm

.2397					Command_VPoke:
.2397	38		sec				sec 						; one byte , CS
.2398	b0 01		bcs $239b			bcs 	CmdVideoWrite
.239a					Command_VDoke:
.239a	18		clc				clc 						; two bytes, CC
.239b					CmdVideoWrite:
.239b	08		php				php 						; save one or two btes
.239c	a9 00		lda #$00			lda 	#0  				; get address and value into levels 0,1
.239e	a2 0a		ldx #$0a		ldx	#10
.23a0	20 88 3d	jsr $3d88		jsr	mainHandler
.23a3	a2 02		ldx #$02		ldx	#2
.23a5	20 88 3d	jsr $3d88		jsr	mainHandler
.23a8	a9 01		lda #$01			lda 	#1
.23aa	a2 0a		ldx #$0a		ldx	#10
.23ac	20 88 3d	jsr $3d88		jsr	mainHandler
.23af	a2 00		ldx #$00			ldx 	#0
.23b1	20 c2 23	jsr $23c2			jsr 	SetUpTOSVRamAddress ; copy target address to VRAM address registers
.23b4	a5 99		lda $99				lda 	esInt0+1 			; get MSB of write value
.23b6	8d 23 9f	sta $9f23			sta 	$9F23
.23b9	28		plp				plp 						; if it was Poke then exit
.23ba	b0 05		bcs $23c1			bcs 	_CVWExit
.23bc	a5 a1		lda $a1				lda 	esInt1+1 			; doke, write the MSB.
.23be	8d 23 9f	sta $9f23			sta 	$9F23
.23c1					_CVWExit:
.23c1	60		rts				rts
.23c2					SetUpTOSVRamAddress:
.23c2	b5 a8		lda $a8,x			lda 	esInt2,x 			; check range of address, data to $FFFF
.23c4	29 fe		and #$fe			and 	#$FE
.23c6	15 b0		ora $b0,x			ora 	esInt3,x
.23c8	d0 14		bne $23de			bne 	CVWValue
.23ca	b5 98		lda $98,x			lda 	esInt0,x			; set address up
.23cc	8d 20 9f	sta $9f20			sta 	$9F20
.23cf	b5 a0		lda $a0,x			lda 	esInt1,x
.23d1	8d 21 9f	sta $9f21			sta	 	$9F21
.23d4	b5 a8		lda $a8,x			lda 	esInt2,x
.23d6	29 01		and #$01			and 	#1
.23d8	09 10		ora #$10			ora 	#$10 				; step 1.
.23da	8d 22 9f	sta $9f22			sta 	$9F22
.23dd	60		rts				rts
.23de					CVWValue:
.23de	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.23e0	20 18 15	jsr $1518		jsr	errorHandler
.23e3					Command_VPeek:
.23e3	38		sec				sec 						; one byte , CS
.23e4	b0 01		bcs $23e7			bcs 	CmdVideoRead
.23e6					Command_VDeek:
.23e6	18		clc				clc 						; two bytes, CC
.23e7					CmdVideoRead:
.23e7	08		php				php 						; save action on stack.
.23e8	48		pha				pha 						; save stack position
.23e9	a2 0a		ldx #$0a		ldx	#10
.23eb	20 88 3d	jsr $3d88		jsr	mainHandler
.23ee	a2 04		ldx #$04		ldx	#4
.23f0	20 88 3d	jsr $3d88		jsr	mainHandler
.23f3	68		pla				pla
.23f4	aa		tax				tax
.23f5	20 c2 23	jsr $23c2			jsr 	SetUpTOSVRamAddress	; set up VRAM address.
.23f8	a9 00		lda #$00			lda 	#0 					; zero upper 3 bytes
.23fa	95 a0		sta $a0,x			sta 	esInt1,x
.23fc	95 a8		sta $a8,x			sta 	esInt2,x
.23fe	95 b0		sta $b0,x			sta 	esInt3,x
.2400	ad 23 9f	lda $9f23			lda 	$9F23				; copy 1st byte
.2403	95 98		sta $98,x			sta 	esInt0,x
.2405	28		plp				plp 						; check if DOKE (carry was clear)
.2406	b0 05		bcs $240d			bcs 	_CVRExit
.2408	ad 23 9f	lda $9f23			lda 	$9F23 				; copy 2nd byte
.240b	95 a0		sta $a0,x			sta 	esInt1,x
.240d					_CVRExit:
.240d	8a		txa				txa 						; return X position.
.240e	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/video/vramprocess.asm

.0c1d					compressMode:
>0c1d							.fill 	1
.0c1e					imageInfo:
>0c1e							.fill 	X16MaxImages
.0c5e					imageAddr32Low:
>0c5e							.fill  	X16MaxImages
.0c9e					imageAddr32High:
>0c9e							.fill  	X16MaxImages
.240f					LoadVRAMFile:
.240f	8a		txa				txa
.2410	48		pha				pha
.2411	98		tya				tya
.2412	48		pha				pha
.2413					_LVRLoop:
.2413	20 ef 24	jsr $24ef			jsr 	LVFGet 						; get the next (never access direct)
.2416	c9 80		cmp #$80			cmp 	#$80 						; exit ?
.2418	f0 42		beq $245c			beq 	_LVRExit
.241a	b0 5c		bcs $2478			bcs 	_LVRLoad 					; load data in ?
.241c	c9 08		cmp #$08			cmp 	#$08 						; is it set address ?
.241e	90 11		bcc $2431			bcc 	_LVRSetAddress
.2420	c9 0f		cmp #$0f			cmp 	#$0F 						; is it define palette
.2422	f0 3d		beq $2461			beq 	_LVRSetPalette
.2424	c9 10		cmp #$10			cmp 	#$10 						; is it set compression type ?
.2426	90 2d		bcc $2455			bcc 	_LVRSetCompress
.2428	c9 64		cmp #$64			cmp 	#$64 						; is it set sprite type.
.242a	90 60		bcc $248c			bcc 	_LVRSetSprite
.242c	a2 01		ldx #$01			ldx 	#ErrorID_missing
.242e	20 18 15	jsr $1518		jsr	errorHandler
.2431					_LVRSetAddress:
.2431	85 2d		sta $2d				sta 	temp1+1 					; 24 bit in temp1+1/temp1/A
.2433	20 ef 24	jsr $24ef			jsr 	LVFGet
.2436	85 2c		sta $2c				sta 	temp1
.2438	a9 00		lda #$00			lda 	#0
.243a	46 2d		lsr $2d				lsr 	temp1+1 					; / 2 twice.
.243c	66 2c		ror $2c				ror 	temp1
.243e	6a		ror a				ror		a
.243f	46 2d		lsr $2d				lsr 	temp1+1
.2441	66 2c		ror $2c				ror 	temp1
.2443	6a		ror a				ror		a
.2444	8d 20 9f	sta $9f20			sta 	$9F20 						; set write address with +1 increment
.2447	a5 2c		lda $2c				lda 	temp1
.2449	8d 21 9f	sta $9f21			sta 	$9F21
.244c	a5 2d		lda $2d				lda 	temp1+1
.244e	09 10		ora #$10			ora 	#$10
.2450	8d 22 9f	sta $9f22			sta 	$9F22
.2453	d0 be		bne $2413			bne 	_LVRLoop
.2455					_LVRSetCompress:
.2455	29 07		and #$07			and 	#7
.2457	8d 1d 0c	sta $0c1d			sta 	compressMode
.245a	10 b7		bpl $2413			bpl 	_LVRLoop
.245c					_LVRExit:
.245c	68		pla				pla
.245d	a8		tay				tay
.245e	68		pla				pla
.245f	aa		tax				tax
.2460	60		rts				rts
.2461					_LVRSetPalette:
.2461	20 ef 24	jsr $24ef			jsr 	LVFGet 						; get palette id.
.2464	20 5d 23	jsr $235d			jsr 	PointToPaletteA 			; in palette.asm
.2467	20 ef 24	jsr $24ef			jsr 	LVFGet 						; copy 12 bit palette data in.
.246a	8d 23 9f	sta $9f23			sta 	$9F23
.246d	20 ef 24	jsr $24ef			jsr 	LVFGet
.2470	29 0f		and #$0f			and 	#$0F
.2472	8d 23 9f	sta $9f23			sta 	$9F23
.2475	4c 13 24	jmp $2413			jmp 	_LVRLoop
.2478					_LVRLoad:
.2478	ae 1d 0c	ldx $0c1d			ldx 	compressMode
.247b	d0 55		bne $24d2			bne 	_LVRNotMode0
.247d	29 7f		and #$7f			and 	#$7F 						; count in X (is > 0)
.247f					_LVRLCopyX:
.247f	aa		tax				tax
.2480					_LVRLCopy:
.2480	20 ef 24	jsr $24ef			jsr 	LVFGet 						; write to data.
.2483	8d 23 9f	sta $9f23			sta 	$9F23
.2486	ca		dex				dex
.2487	d0 f7		bne $2480			bne 	_LVRLCopy
.2489	4c 13 24	jmp $2413			jmp 	_LVRLoop
.248c					_LVRSetSprite:
.248c	48		pha				pha 								; save on stack
.248d	20 ef 24	jsr $24ef			jsr 	LVFGet 						; get the sprite number into X
.2490	aa		tax				tax
.2491	c9 40		cmp #$40			cmp 	#X16MaxImages				; too high ?
.2493	b0 38		bcs $24cd			bcs 	_LVRSSValue
.2495	68		pla				pla 								; restore the data held in the first byte
.2496	9d 1e 0c	sta $0c1e,x			sta 	imageInfo,x 				; and write into the sprite image table.
.2499					_LVRAlignVRAM:
.2499	ad 20 9f	lda $9f20			lda 	$9F20 						; check VRAM on 32 byte boundary
.249c	29 1f		and #$1f			and 	#$1F
.249e	f0 07		beq $24a7			beq 	_LVRAligned
.24a0	a9 00		lda #$00			lda 	#$00
.24a2	8d 23 9f	sta $9f23			sta 	$9F23
.24a5	f0 f2		beq $2499			beq 	_LVRAlignVRAM
.24a7					_LVRAligned:
.24a7	ad 22 9f	lda $9f22			lda 	$9F22 						; put address/32 in sprite image table
.24aa	4a		lsr a				lsr 	a 	 						; first halve into temp1
.24ab	ad 21 9f	lda $9f21			lda 	$9F21
.24ae	6a		ror a				ror 	a
.24af	85 2d		sta $2d				sta 	temp1+1
.24b1	ad 20 9f	lda $9f20			lda 	$9F20
.24b4	6a		ror a				ror 	a
.24b5	85 2c		sta $2c				sta 	temp1
.24b7	a0 04		ldy #$04			ldy 	#4 							; divide it by 16 in temp1
.24b9					_LVRShift:
.24b9	46 2d		lsr $2d				lsr 	temp1+1
.24bb	66 2c		ror $2c				ror 	temp1
.24bd	88		dey				dey
.24be	d0 f9		bne $24b9			bne 	_LVRShift
.24c0	a5 2d		lda $2d				lda 	temp1+1 					; copy result.
.24c2	9d 9e 0c	sta $0c9e,x			sta 	imageAddr32High,x
.24c5	a5 2c		lda $2c				lda 	temp1
.24c7	9d 5e 0c	sta $0c5e,x			sta 	imageAddr32Low,x
.24ca	4c 13 24	jmp $2413			jmp 	_LVRLoop
.24cd					_LVRSSValue:
.24cd	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.24cf	20 18 15	jsr $1518		jsr	errorHandler
.24d2					_LVRNotMode0:
.24d2	e0 01		cpx #$01			cpx 	#1
.24d4	d0 15		bne $24eb			bne 	_LVRNotMode1
.24d6	29 7f		and #$7f			and 	#$7F 						; drop bit 7
.24d8	c9 40		cmp #$40			cmp 	#$40
.24da	90 a3		bcc $247f			bcc 	_LVRLCopyX 					; 00-3F use mode 0's copying code.
.24dc					_LVRRLEGroup:
.24dc	29 3f		and #$3f			and 	#$3F
.24de	aa		tax				tax
.24df	20 ef 24	jsr $24ef			jsr 	LVFGet
.24e2					_LVRLEGroupLoop:
.24e2	8d 23 9f	sta $9f23			sta 	$9F23
.24e5	ca		dex				dex
.24e6	d0 fa		bne $24e2			bne 	_LVRLEGroupLoop
.24e8	4c 13 24	jmp $2413			jmp 	_LVRLoop
.24eb					_LVRNotMode1:
>24eb	db						.byte 	$DB
.24ec	4c eb 24	jmp $24eb			jmp 	_LVRNotMode1
.24ef	84 32		sty $32		LVFGet:	sty 	tempShort
.24f1	a0 00		ldy #$00			ldy 	#0
.24f3	b1 2a		lda ($2a),y			lda 	(temp0),y
.24f5	a4 32		ldy $32				ldy	 	tempShort
.24f7	e6 2a		inc $2a				inc 	temp0
.24f9	d0 02		bne $24fd			bne 	_LVFGExit
.24fb	e6 2b		inc $2b				inc 	temp0+1
.24fd					_LVFGExit:
.24fd	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Return to file: basic.asm

.24fe					section_end_extension:
.24fe					section_start_floatingpoint:

;******  Processing file: floatingpoint/floatingpoint.asm

.24fe					floatingpointHandler:
.24fe	a2 03		ldx #$03			ldx 	#ErrorID_NoModule
.2500	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: basic.asm

.2503					section_end_floatingpoint:
.2503					section_start_interaction:

;******  Processing file: interaction/interaction.asm


;******  Processing file: interaction/cold.asm

.2503					ColdStartEntry:
.2503	a2 ff		ldx #$ff			ldx 	#$FF
.2505	9a		txs				txs
.2506	20 8f 25	jsr $258f			jsr 	ForceStandardMode
.2509	a2 04		ldx #$04		ldx	#4
.250b	20 f6 14	jsr $14f6		jsr	deviceHandler
.250e	a0 ff		ldy #$ff			ldy 	#255
.2510					_CSBanner:
.2510	c8		iny				iny
.2511	b9 37 25	lda $2537,y			lda 	Intro,y
.2514	f0 14		beq $252a			beq 	_CSStart
.2516	c9 08		cmp #$08			cmp 	#8
.2518	90 08		bcc $2522			bcc 	_CSInk
.251a	a2 16		ldx #$16		ldx	#22
.251c	20 f6 14	jsr $14f6		jsr	deviceHandler
.251f	4c 10 25	jmp $2510			jmp 	_CSBanner
.2522					_CSInk:
.2522	a2 08		ldx #$08		ldx	#8
.2524	20 f6 14	jsr $14f6		jsr	deviceHandler
.2527	4c 10 25	jmp $2510			jmp 	_CSBanner
.252a					_CSStart:
.252a	a2 16		ldx #$16		ldx	#22
.252c	20 88 3d	jsr $3d88		jsr	mainHandler
.252f	a2 06		ldx #$06		ldx	#6
.2531	20 88 3d	jsr $3d88		jsr	mainHandler
.2534	4c 4f 26	jmp $264f			jmp 	WarmStartEntry
>2537	06 2a 2a 2a 20 36 35 30		Intro:	.text 	6,"*** 6502 Extended BASIC ***",13,13
>253f	32 20 45 78 74 65 6e 64 65 64 20 42 41 53 49 43
>254f	20 2a 2a 2a 0d 0d
>2555	03 57 72 69 74 74 65 6e				.text 	3,"Written by Paul Robson 2021",13,13
>255d	20 62 79 20 50 61 75 6c 20 52 6f 62 73 6f 6e 20
>256d	32 30 32 31 0d 0d
>2573	02 42 61 73 69 63 20				.text 	2,"Basic "
>257a	30 2e 32 30					.text "0.20"
>257e	20 28						.text 	" ("
>2580	30 33 2d 41 70 72 2d 32				.text "03-Apr-2021"
>2588	30 32 31
>258b	29 0d 0d 00					.text 	")",13,13,0
.258f					ForceStandardMode:
.258f	a9 fe		lda #$fe			lda 	#$FE
.2591	20 69 18	jsr $1869		jsr	extensionHandler
.2594	60		rts				rts

;******  Return to file: interaction/interaction.asm


;******  Processing file: interaction/delete.asm

.2595					DeleteLine:
.2595	ad c8 0a	lda $0ac8			lda 	basePage 					; copy program base to temp0
.2598	85 2a		sta $2a				sta 	temp0
.259a	ad c9 0a	lda $0ac9			lda 	basePage+1
.259d	85 2b		sta $2b				sta 	temp0+1
.259f	a0 01		ldy #$01	_DLLoop:ldy 	#1 							; see if found line ?
.25a1	a5 98		lda $98				lda 	esInt0 						; e.g. the linenumbers match
.25a3	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.25a5	d0 07		bne $25ae			bne 	_DLNext
.25a7	c8		iny				iny
.25a8	a5 a0		lda $a0				lda 	esInt1
.25aa	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.25ac	f0 06		beq $25b4			beq 	_DLFound
.25ae	20 d2 25	jsr $25d2	_DLNext:jsr 	IAdvanceTemp0 				; shift temp0 forward, return Z flag set if end.
.25b1	d0 ec		bne $259f			bne 	_DLLoop
.25b3	60		rts				rts
.25b4					_DLFound:
.25b4	a0 00		ldy #$00			ldy 	#0 							; this is the line to cut, so this offset is the bytes to remove
.25b6	b1 2a		lda ($2a),y			lda 	(temp0),y
.25b8	a8		tay				tay 								; so we copy from (temp0),y
.25b9	a2 00		ldx #$00			ldx 	#0  						; to (temp0,x)
.25bb					_DLCopyDown:
.25bb	b1 2a		lda ($2a),y			lda 	(temp0),y 					; copy one byte.
.25bd	81 2a		sta ($2a,x)			sta 	(temp0,x)
.25bf	e6 2a		inc $2a				inc 	temp0 						; advance pointer
.25c1	d0 02		bne $25c5			bne 	_DLNoCarry
.25c3	e6 2b		inc $2b				inc 	temp0+1
.25c5					_DLNoCarry:
.25c5	a5 2a		lda $2a				lda 	temp0 						; until hit low memory
.25c7	c5 35		cmp $35				cmp 	lowMemory 					; which is comfortably after End Program.
.25c9	d0 f0		bne $25bb			bne 	_DLCopyDown
.25cb	a5 2b		lda $2b				lda 	temp0+1
.25cd	c5 36		cmp $36				cmp 	lowMemory+1
.25cf	d0 ea		bne $25bb			bne 	_DLCopyDown
.25d1	60		rts				rts
.25d2					IAdvanceTemp0:
.25d2	84 32		sty $32				sty 	tempShort
.25d4	18		clc				clc
.25d5	a0 00		ldy #$00			ldy 	#0 							; get offset
.25d7	b1 2a		lda ($2a),y			lda 	(temp0),y 					; add to temp0
.25d9	65 2a		adc $2a				adc 	temp0
.25db	85 2a		sta $2a				sta 	temp0
.25dd	90 02		bcc $25e1			bcc 	_IATNoCarry
.25df	e6 2b		inc $2b				inc 	temp0+1
.25e1					_IATNoCarry:
.25e1	b1 2a		lda ($2a),y			lda 	(temp0),y
.25e3	a4 32		ldy $32				ldy 	tempShort
.25e5	c9 00		cmp #$00			cmp		#0 							; Z set if program end.
.25e7	60		rts				rts

;******  Return to file: interaction/interaction.asm


;******  Processing file: interaction/insert.asm

.25e8					InsertLine:
.25e8	ad c8 0a	lda $0ac8			lda 	basePage 					; copy program base to temp0
.25eb	85 2a		sta $2a				sta 	temp0
.25ed	ad c9 0a	lda $0ac9			lda 	basePage+1
.25f0	85 2b		sta $2b				sta 	temp0+1
.25f2					_ILLoop:
.25f2	a0 01		ldy #$01			ldy 	#1
.25f4	b1 2a		lda ($2a),y			lda 	(temp0),y
.25f6	c5 98		cmp $98				cmp 	esInt0
.25f8	c8		iny				iny
.25f9	b1 2a		lda ($2a),y			lda 	(temp0),y
.25fb	e5 a0		sbc $a0				sbc 	esInt1
.25fd	b0 05		bcs $2604			bcs 	_ILFound 					; we know it cannot be equal, it would have been deleted
.25ff	20 d2 25	jsr $25d2			jsr 	IAdvanceTemp0 				; shift temp0 forward, return Z flag set if end.
.2602	d0 ee		bne $25f2			bne 	_ILLoop
.2604					_ILFound:
.2604	a5 35		lda $35				lda 	lowMemory 					; shift lowMemory up to make space for it.
.2606	85 2c		sta $2c				sta 	temp1             			; this pointer goes backwards
.2608	a5 36		lda $36				lda 	lowMemory+1
.260a	85 2d		sta $2d				sta 	temp1+1
.260c	ad 1b 0e	lda $0e1b			lda 	tokenBufferIndex 			; space to make in Y, 0 in X.
.260f	18		clc				clc 								; add 3 for the line number and offset.
.2610	69 03		adc #$03			adc 	#3 							; tokenbuffer already has $80
.2612	a8		tay				tay
.2613	a2 00		ldx #$00			ldx 	#0
.2615	a1 2c		lda ($2c,x)	_ILMove:lda 	(temp1,x)					; shift up
.2617	91 2c		sta ($2c),y			sta 	(temp1),y
.2619	a5 2c		lda $2c				lda 	temp1 						; check reached the insert point ?
.261b	c5 2a		cmp $2a				cmp 	temp0
.261d	d0 06		bne $2625			bne 	_ILMNext
.261f	a5 2d		lda $2d				lda 	temp1+1
.2621	c5 2b		cmp $2b				cmp 	temp0+1
.2623	f0 0b		beq $2630			beq 	_ILMCopy
.2625					_ILMNext:
.2625	a5 2c		lda $2c				lda 	temp1
.2627	d0 02		bne $262b			bne 	_ILNoBorrow
.2629	c6 2d		dec $2d				dec 	temp1+1
.262b					_ILNoBorrow:
.262b	c6 2c		dec $2c				dec 	temp1
.262d	4c 15 26	jmp $2615			jmp 	_ILMove 					; and go round again
.2630					_ILMCopy:
.2630	98		tya				tya 								; Y is the offset of the new line.
.2631	81 2a		sta ($2a,x)			sta 	(temp0,x)					; X = 0 still.
.2633	a0 01		ldy #$01			ldy 	#1 							; copy in line number.
.2635	a5 98		lda $98				lda 	esInt0
.2637	91 2a		sta ($2a),y			sta 	(temp0),y
.2639	c8		iny				iny
.263a	a5 a0		lda $a0				lda 	esInt1
.263c	91 2a		sta ($2a),y			sta 	(temp0),y
.263e	a0 00		ldy #$00			ldy 	#0 							; copy the body in
.2640					_ILMCopy2:
.2640	b1 28		lda ($28),y			lda 	(codePtr),y
.2642	c8		iny				iny
.2643	c8		iny				iny
.2644	c8		iny				iny
.2645	91 2a		sta ($2a),y			sta 	(temp0),y
.2647	88		dey				dey
.2648	88		dey				dey
.2649	cc 1b 0e	cpy $0e1b			cpy 	tokenBufferIndex
.264c	d0 f2		bne $2640			bne 	_ILMCopy2
.264e	60		rts				rts

;******  Return to file: interaction/interaction.asm


;******  Processing file: interaction/warm.asm

.264f					WarmStartEntry:
.264f	a2 ff		ldx #$ff			ldx 	#$FF
.2651	9a		txs				txs
.2652	20 8f 25	jsr $258f			jsr 	ForceStandardMode
.2655	a9 02		lda #$02			lda 	#2							; green text.
.2657	a2 08		ldx #$08		ldx	#8
.2659	20 f6 14	jsr $14f6		jsr	deviceHandler
.265c	a2 0c		ldx #$0c		ldx	#12
.265e	20 f6 14	jsr $14f6		jsr	deviceHandler
.2661	a5 2a		lda $2a				lda 	temp0	 					; copy temp0 to codePtr
.2663	85 28		sta $28				sta 	codePtr
.2665	a5 2b		lda $2b				lda 	temp0+1
.2667	85 29		sta $29				sta 	codePtr+1
.2669	a2 06		ldx #$06		ldx	#6
.266b	20 f6 14	jsr $14f6		jsr	deviceHandler
.266e	a2 08		ldx #$08		ldx	#8
.2670	20 c9 48	jsr $48c9		jsr	tokeniserHandler
.2673	c9 00		cmp #$00			cmp 	#0
.2675	f0 25		beq $269c			beq 	WSEError 					; failed (tokenise can fail if it doesn't know a character e.g. |)
.2677	a9 18		lda #$18			lda 	#(tokenHeader) & $FF
.2679	85 28		sta $28				sta 	codePtr
.267b	a9 0d		lda #$0d			lda 	#(tokenHeader) >> 8
.267d	85 29		sta $29				sta 	1+(codePtr)
.267f	ad 1b 0d	lda $0d1b			lda 	tokenBuffer 				; is it a blank line, go get another line.
.2682	c9 80		cmp #$80			cmp 	#$80
.2684	f0 c9		beq $264f			beq 	WarmStartEntry
.2686	29 c0		and #$c0			and 	#$C0						; does it start with a number
.2688	c9 40		cmp #$40			cmp 	#$40 						; e.g. is it 01xx xxxx
.268a	f0 15		beq $26a1			beq 	HasLineNumber
.268c	a9 00		lda #$00			lda 	#0 							; zero the token header, so it will look like a
.268e	8d 18 0d	sta $0d18			sta 	tokenHeader 				; fake program line.
.2691	8d 19 0d	sta $0d19			sta 	tokenHeader+1
.2694	8d 1a 0d	sta $0d1a			sta 	tokenHeader+2
.2697	a2 18		ldx #$18		ldx	#24
.2699	20 88 3d	jsr $3d88		jsr	mainHandler
.269c					WSEError:
.269c	a2 1e		ldx #$1e			ldx 	#ErrorID_Tokenise
.269e	20 18 15	jsr $1518		jsr	errorHandler
.26a1					HasLineNumber:
.26a1	a0 03		ldy #$03			ldy 	#3 							; get line number
.26a3	a9 00		lda #$00			lda 	#0
.26a5	a2 0a		ldx #$0a		ldx	#10
.26a7	20 88 3d	jsr $3d88		jsr	mainHandler
.26aa	a5 a8		lda $a8				lda 	esInt2		 				; check in range (only 2 bytes)
.26ac	05 b0		ora $b0				ora 	esInt3
.26ae	d0 ec		bne $269c			bne 	WSEError
.26b0	98		tya				tya 								; make codePtr point to code after the line number.
.26b1	18		clc				clc 								; by skipping over the tokenised number.
.26b2	65 28		adc $28				adc 	codePtr
.26b4	85 28		sta $28				sta 	codePtr
.26b6	90 02		bcc $26ba			bcc		_HLNNoCarry
.26b8	e6 29		inc $29				inc 	codePtr+1
.26ba					_HLNNoCarry:
.26ba	98		tya				tya 								; subtract that offset from the code buffer index
.26bb	38		sec				sec
.26bc	49 ff		eor #$ff			eor 	#$FF
.26be	6d 1b 0e	adc $0e1b			adc 	tokenBufferIndex
.26c1	18		clc				clc 								; add space allowing for header & $80 trailer
.26c2	69 04		adc #$04			adc 	#4
.26c4	8d 1b 0e	sta $0e1b			sta 	tokenBufferIndex 			; this is the number of bytes occupied.
.26c7	20 95 25	jsr $2595			jsr 	DeleteLine 					; always delete the line, it's deleted and reinserted.
.26ca					_HLNNoDelete:
.26ca	ad 1b 0e	lda $0e1b			lda 	tokenBufferIndex 			; if line was empty, then don't insert
.26cd	c9 01		cmp #$01			cmp 	#1 							; (the one character is the EOL marker)
.26cf	f0 0c		beq $26dd			beq 	_HLMEditDone
.26d1	a5 36		lda $36				lda 	lowMemory+1 				; is there space, if we allow a little bit of
.26d3	18		clc				clc 								; workspace (1k)
.26d4	69 04		adc #$04			adc 	#4 							; e.g. 4 x 256
.26d6	c5 34		cmp $34				cmp 	highMemory+1
.26d8	b0 0b		bcs $26e5			bcs 	_HLMMemory 					; nope, won't allowit.
.26da	20 e8 25	jsr $25e8			jsr 	InsertLine 					; insert the line in
.26dd					_HLMEditDone:
.26dd	a2 06		ldx #$06		ldx	#6
.26df	20 88 3d	jsr $3d88		jsr	mainHandler
.26e2	4c 4f 26	jmp $264f			jmp 	WarmStartEntry
.26e5					_HLMMemory:
.26e5	a2 22		ldx #$22			ldx 	#ErrorID_Memory
.26e7	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: interaction/interaction.asm

.26ea					interactionHandler:
.26ea	7c ed 26	jmp ($26ed,x)			jmp 	(interactionVectors,x)
.26ed					interactionVectors:
>26ed	f3 26					.word _DummyControlHandler ; index 0
>26ef	03 25					.word ColdStartEntry       ; index 2
>26f1	4f 26					.word WarmStartEntry       ; index 4
.26f3					_DummyControlHandler:
.26f3	60		rts			rts

;******  Return to file: basic.asm

.26f4					section_end_interaction:
.26f4					section_start_main:

;******  Processing file: main/main.asm


;******  Processing file: main/commands/compat/readdata.asm

.0cde					dataPtr:
>0cde							.fill 	2
.0ce0					dataIndex:
>0ce0							.fill 	1
.26f4					CommandRead:
.26f4	a2 00		ldx #$00			ldx 	#0 							; get a reference to a variable in stack:0
.26f6	20 3b 36	jsr $363b			jsr 	EvaluateReference
.26f9	20 3a 27	jsr $273a			jsr 	SwapDPCP 					; use the data pointer.
.26fc	b1 28		lda ($28),y			lda 	(codePtr),y 				; see where it is.
.26fe	c8		iny				iny
.26ff	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; if it is on a comma, it is in data.
.2701	f0 07		beq $270a			beq 	_CRInData
.2703	88		dey				dey
.2704	a9 d9		lda #$d9			lda 	#TKW_DATA 					; scan forward to a DATA statement.
.2706	aa		tax				tax
.2707	20 3b 2e	jsr $2e3b			jsr 	ScanForward
.270a					_CRInData:
.270a	a2 01		ldx #$01			ldx 	#1 							; evaluate a value at Stack,1
.270c	20 e3 35	jsr $35e3			jsr 	Evaluate
.270f	ca		dex				dex 								; and write the value.
.2710	20 8e 29	jsr $298e			jsr 	WriteValue
.2713	20 3a 27	jsr $273a			jsr 	SwapDPCP 					; get the code pointer back.
.2716	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows ?
.2718	c8		iny				iny
.2719	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; if comma, another variable
.271b	f0 d7		beq $26f4			beq 	CommandRead
.271d	88		dey				dey
.271e	60		rts				rts
.271f					CommandData:
.271f	a9 80		lda #$80			lda 	#TOK_EOL 					; go forward to end of line or colon.
.2721	a2 ca		ldx #$ca			ldx 	#TKW_COLON
.2723	20 3b 2e	jsr $2e3b			jsr 	ScanForward
.2726	88		dey				dey 								; ending on EOL is a scan issue, as it increments
.2727	60		rts				rts
.2728					CommandRestore:
.2728	ad c8 0a	lda $0ac8			lda 	basePage
.272b	8d de 0c	sta $0cde			sta 	dataPtr
.272e	ad c9 0a	lda $0ac9			lda 	basePage+1
.2731	8d df 0c	sta $0cdf			sta 	dataPtr+1
.2734	a9 03		lda #$03			lda 	#3
.2736	8d e0 0c	sta $0ce0			sta 	dataIndex
.2739	60		rts				rts
.273a					SwapDPCP:
.273a	8a		txa				txa
.273b	48		pha				pha
.273c	98		tya				tya 								; swap Y, DataIndex
.273d	ac e0 0c	ldy $0ce0			ldy 	DataIndex
.2740	8d e0 0c	sta $0ce0			sta 	DataIndex
.2743	a5 28		lda $28				lda 	codePtr 					; swap code/dataptr low
.2745	ae de 0c	ldx $0cde			ldx 	dataptr
.2748	8d de 0c	sta $0cde			sta 	dataPtr
.274b	86 28		stx $28				stx 	codePtr
.274d	a5 29		lda $29				lda 	codePtr+1 					; swap code/dataptr high.
.274f	ae df 0c	ldx $0cdf			ldx 	dataptr+1
.2752	8d df 0c	sta $0cdf			sta 	dataPtr+1
.2755	86 29		stx $29				stx 	codePtr+1
.2757	68		pla				pla
.2758	aa		tax				tax
.2759	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/compat/transfer.asm

.275a					CommandGOSUB:
.275a	20 00 36	jsr $3600			jsr 	EvaluateRootInteger			; get GOSUB line on stack top.
.275d	a2 04		ldx #$04			ldx 	#4 							; allocate 4 bytes on stack for GOSUB
.275f	a9 47		lda #$47			lda 	#markerGOSUB  				; <marker> <return addr/offset>
.2761	20 35 3d	jsr $3d35			jsr 	RSClaim
.2764	a9 01		lda #$01			lda 	#1 							; save position at offset 1.
.2766	20 61 3d	jsr $3d61			jsr 	RSSavePosition
.2769	a2 00		ldx #$00			ldx 	#0 							; point back at GOSUB line
.276b	f0 1b		beq $2788			beq 	GotoTOS 					; and do a GOTO there.
.276d					CommandRETURN:
.276d	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.276f	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.2771	c9 47		cmp #$47			cmp 	#markerGOSUB 						; does it match
.2773	f0 05		beq $277a			beq 	_isok
.2775	a2 0e		ldx #$0e			ldx 	#ErrorID_returnErr
.2777	20 18 15	jsr $1518		jsr	errorHandler
.277a					_isok:
.277a	a9 01		lda #$01			lda 	#1
.277c	20 74 3d	jsr $3d74			jsr 	RSLoadPosition 				; reload the position from offset 1.
.277f	a9 04		lda #$04			lda 	#4 							; throw 4 bytes from stack.
.2781	20 57 3d	jsr $3d57			jsr 	RSFree
.2784	60		rts				rts
.2785					CommandGOTO:
.2785	20 00 36	jsr $3600			jsr 	EvaluateRootInteger 		; get GOTO line on stack top.
.2788					GotoTOS:
.2788	20 21 31	jsr $3121			jsr 	ResetCodeAddress 			; simple search.
.278b					_GotoSearch:
.278b	a0 00		ldy #$00			ldy 	#0 							; get offset
.278d	b1 28		lda ($28),y			lda 	(codePtr),y
.278f	f0 21		beq $27b2			beq 	_GotoError 					; not found.
.2791	c8		iny				iny									; check LSB match
.2792	b1 28		lda ($28),y			lda 	(codePtr),y
.2794	d5 98		cmp $98,x			cmp 	esInt0,x
.2796	d0 07		bne $279f			bne 	_GotoNext
.2798	c8		iny				iny
.2799	b1 28		lda ($28),y			lda 	(codePtr),y
.279b	d5 a0		cmp $a0,x			cmp 	esInt1,x
.279d	f0 10		beq $27af			beq 	_GotoFound
.279f					_GotoNext:
.279f	a0 00		ldy #$00			ldy 	#0 							; go next line
.27a1	b1 28		lda ($28),y			lda 	(codePtr),y
.27a3	18		clc				clc
.27a4	65 28		adc $28				adc 	codePtr
.27a6	85 28		sta $28				sta 	codePtr
.27a8	90 e1		bcc $278b			bcc 	_GotoSearch
.27aa	e6 29		inc $29				inc 	codePtr+1
.27ac	4c 8b 27	jmp $278b			jmp 	_GotoSearch
.27af					_GotoFound:
.27af	a0 03		ldy #$03			ldy 	#3 							; continue from that line
.27b1	60		rts				rts
.27b2					_GotoError:
.27b2	a2 0c		ldx #$0c			ldx 	#ErrorID_LineNumber
.27b4	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/commands/io/input.asm

=32					MaxInputSize = 32
.0ce1					InputBuffer:
>0ce1							.fill 	MaxInputSize+1
.27b7					Command_Input:
.27b7	b1 28		lda ($28),y			lda 	(codePtr),y 			; see what's next.
.27b9	c8		iny				iny
.27ba	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 				; ignore commas.
.27bc	f0 f9		beq $27b7			beq 	Command_Input
.27be	88		dey				dey 							; undo consume
.27bf	c9 ca		cmp #$ca			cmp 	#TKW_COLON
.27c1	f0 54		beq $2817			beq 	_CIExit 				; : or EOL, exit
.27c3	c9 80		cmp #$80			cmp 	#TOK_EOL
.27c5	f0 50		beq $2817			beq 	_CIExit
.27c7	c9 40		cmp #$40			cmp 	#$40 					; variable ?
.27c9	90 12		bcc $27dd			bcc 	_CIVariable
.27cb	c9 85		cmp #$85			cmp 	#TOK_STR 				; if not quoted string syntax error.
.27cd	d0 43		bne $2812			bne 	_CISyntax
.27cf	a2 00		ldx #$00			ldx 	#0
.27d1	20 f7 35	jsr $35f7			jsr 	EvaluateString 			; evaluate and print string
.27d4	20 f0 29	jsr $29f0			jsr 	TOSToTemp0
.27d7	20 e6 28	jsr $28e6			jsr 	PrintString
.27da	4c b7 27	jmp $27b7			jmp 	Command_Input
.27dd					_CIVariable:
.27dd	a2 00		ldx #$00			ldx 	#0 						; evaluate a reference.
.27df	20 3b 36	jsr $363b			jsr 	EvaluateReference  		; this is where its going
.27e2					_CIRetry:
.27e2	a9 3f		lda #$3f			lda 	#"?"					; print prompt
.27e4	a2 14		ldx #$14		ldx	#20
.27e6	20 f6 14	jsr $14f6		jsr	deviceHandler
.27e9	98		tya				tya
.27ea	48		pha				pha
.27eb	20 2b 28	jsr $282b			jsr 	InputString 			; input a string (manually)
.27ee	a2 01		ldx #$01			ldx 	#1
.27f0	20 18 28	jsr $2818			jsr 	BufferToStackX 			; make stack,x ref input string.
.27f3	a5 90		lda $90				lda 	esType 					; if target type numeric
.27f5	29 40		and #$40			and 	#$40 					; then convert to number
.27f7	d0 11		bne $280a			bne 	_CIWrite
.27f9	a2 01		ldx #$01			ldx 	#1
.27fb	20 f0 29	jsr $29f0			jsr 	TOSToTemp0 				; string address in temp0, goes here.
.27fe	a9 0a		lda #$0a			lda 	#10
.2800	20 08 3b	jsr $3b08			jsr 	MInt32FromString 		; convert it back from a string.
.2803	68		pla				pla
.2804	a8		tay				tay
.2805	b0 03		bcs $280a			bcs 	_CIWrite 				; successfully converted.
.2807	18		clc				clc 							; default fail FP conversion
.2808	90 d8		bcc $27e2			bcc		_CIRetry				; failed, try again.
.280a					_CIWrite:
.280a	a2 00		ldx #$00			ldx 	#0
.280c	20 8e 29	jsr $298e			jsr 	WriteValue
.280f	4c b7 27	jmp $27b7			jmp 	Command_Input
.2812					_CISyntax:
.2812	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.2814	20 18 15	jsr $1518		jsr	errorHandler
.2817					_CIExit:
.2817	60		rts				rts
.2818					BufferToStackX:
.2818	a9 e1		lda #$e1			lda 	#InputBuffer & $FF
.281a	95 98		sta $98,x			sta 	esInt0,x
.281c	a9 0c		lda #$0c			lda 	#InputBuffer >> 8
.281e	95 a0		sta $a0,x			sta 	esInt1,x
.2820	a9 00		lda #$00			lda 	#0
.2822	95 a8		sta $a8,x			sta 	esInt2,x
.2824	95 b0		sta $b0,x			sta 	esInt3,x
.2826	a9 40		lda #$40			lda 	#$40
.2828	95 90		sta $90,x			sta 	esType,x
.282a	60		rts				rts
.282b					InputString:
.282b	a9 00		lda #$00			lda 	#0
.282d	8d e1 0c	sta $0ce1			sta 	InputBuffer
.2830					_InputLoop:
.2830	a2 02		ldx #$02		ldx	#2
.2832	20 f6 14	jsr $14f6		jsr	deviceHandler
.2835	a2 0a		ldx #$0a		ldx	#10
.2837	20 f6 14	jsr $14f6		jsr	deviceHandler
.283a	c9 00		cmp #$00			cmp 	#0
.283c	f0 f2		beq $2830			beq 	_InputLoop
.283e	c9 08		cmp #$08			cmp 	#8
.2840	f0 19		beq $285b			beq 	_InputBackspace
.2842	c9 0d		cmp #$0d			cmp 	#13
.2844	f0 21		beq $2867			beq 	_InputExit
.2846	ae e1 0c	ldx $0ce1			ldx 	InputBuffer
.2849	e0 20		cpx #$20			cpx 	#MaxInputSize 			; too many characters
.284b	f0 e3		beq $2830			beq 	_InputLoop
.284d	9d e2 0c	sta $0ce2,x			sta 	InputBuffer+1,x 		; write char
.2850	ee e1 0c	inc $0ce1			inc 	InputBuffer 			; advance count.
.2853					_InputPrintLoop:
.2853	a2 14		ldx #$14		ldx	#20
.2855	20 f6 14	jsr $14f6		jsr	deviceHandler
.2858	4c 30 28	jmp $2830			jmp	 	_InputLoop
.285b					_InputBackspace:
.285b	ad e1 0c	lda $0ce1			lda 	InputBuffer 			; at start
.285e	f0 d0		beq $2830			beq 	_InputLoop
.2860	ce e1 0c	dec $0ce1			dec 	InputBuffer
.2863	a9 08		lda #$08			lda 	#8
.2865	d0 ec		bne $2853			bne 	_InputPrintLoop
.2867					_InputExit:
.2867	a2 06		ldx #$06		ldx	#6
.2869	20 f6 14	jsr $14f6		jsr	deviceHandler
.286c	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/io/print.asm

.0d02					lastPrintToken:
>0d02							.fill 	1
.286d					Command_Print:
.286d	a9 00		lda #$00			lda 	#0 							; clear LPT to a non token
.286f	8d 02 0d	sta $0d02			sta 	lastPrintToken
.2872	88		dey				dey
.2873					_PrintLoopSkip:
.2873	c8		iny				iny
.2874					_PrintLoop:
.2874	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows
.2876	c9 80		cmp #$80			cmp 	#TOK_EOL  					; done if end of line or colon
.2878	f0 5b		beq $28d5			beq 	_PrintExit
.287a	c9 ca		cmp #$ca			cmp 	#TKW_COLON
.287c	f0 57		beq $28d5			beq 	_PrintExit
.287e	8d 02 0d	sta $0d02			sta 	lastPrintToken 				; update Last print token, so we check ; and ,
.2881	c9 cc		cmp #$cc			cmp 	#TKW_SEMICOLON 				; ignore semicolon
.2883	f0 ee		beq $2873			beq 	_PrintLoopSkip
.2885	c9 cd		cmp #$cd			cmp 	#TKW_QUOTE 					; ' is new line
.2887	f0 3c		beq $28c5			beq	 	_PrintNewLine
.2889	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; , is print tab
.288b	f0 40		beq $28cd			beq 	_PrintTab
.288d	20 e1 35	jsr $35e1			jsr 	EvaluateRoot 				; evaluate something at the root
.2890	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.2892	85 2a		sta $2a				sta 	temp0
.2894	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.2896	85 2b		sta $2b				sta 	1+(temp0)
.2898	a5 90		lda $90				lda 	esType 						; get type
.289a	f0 15		beq $28b1			beq		_PrintInteger
.289c	4a		lsr a				lsr 	a 							; check for floating point
.289d	b0 08		bcs $28a7			bcs 	_PrintFloat
.289f					_PrintString:
.289f	a2 00		ldx #$00			ldx 	#0 							; bottom string to temp0
.28a1	20 f0 29	jsr $29f0			jsr 	TOSToTemp0
.28a4	4c bf 28	jmp $28bf			jmp 	_PrintTemp0 				; print no leading space.
.28a7					_PrintFloat:
.28a7	a9 00		lda #$00			lda 	#0 							; stack level.
.28a9	a2 16		ldx #$16		ldx	#22
.28ab	20 fe 24	jsr $24fe		jsr	floatingpointHandler
.28ae	4c b8 28	jmp $28b8			jmp 	_PrintSpaceTemp0
.28b1					_PrintInteger:
.28b1	a9 8a		lda #$8a			lda 	#10+$80 					; base 10 signed
.28b3	a2 00		ldx #$00			ldx 	#0 							; bottom stack element
.28b5	20 f0 3b	jsr $3bf0			jsr 	MInt32ToString				; convert to text
.28b8					_PrintSpaceTemp0:
.28b8	a9 20		lda #$20			lda 	#32
.28ba	a2 14		ldx #$14		ldx	#20
.28bc	20 f6 14	jsr $14f6		jsr	deviceHandler
.28bf					_PrintTemp0:
.28bf	20 e6 28	jsr $28e6			jsr 	PrintString
.28c2	4c 74 28	jmp $2874			jmp 	_PrintLoop
.28c5					_PrintNewLine:
.28c5	a2 06		ldx #$06		ldx	#6
.28c7	20 f6 14	jsr $14f6		jsr	deviceHandler
.28ca	4c 73 28	jmp $2873			jmp 	_PrintLoopSkip
.28cd					_PrintTab:
.28cd	a2 1a		ldx #$1a		ldx	#26
.28cf	20 f6 14	jsr $14f6		jsr	deviceHandler
.28d2	4c 73 28	jmp $2873			jmp 	_PrintLoopSkip
.28d5					_PrintExit:
.28d5	ad 02 0d	lda $0d02			lda		lastPrintToken 				; check last token
.28d8	c9 cc		cmp #$cc			cmp 	#TKW_SEMICOLON 				; if , or ; do not print NL
.28da	f0 09		beq $28e5			beq 	_PrintExit2
.28dc	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.28de	f0 05		beq $28e5			beq 	_PrintExit2
.28e0	a2 06		ldx #$06		ldx	#6
.28e2	20 f6 14	jsr $14f6		jsr	deviceHandler
.28e5					_PrintExit2:
.28e5	60		rts				rts
.28e6					PrintString:
.28e6	8a		txa				txa
.28e7	48		pha				pha
.28e8	98		tya				tya
.28e9	48		pha				pha
.28ea	a0 00		ldy #$00			ldy 	#0							; get length
.28ec	b1 2a		lda ($2a),y			lda 	(temp0),y
.28ee	aa		tax				tax 								; into X
.28ef	e0 00		cpx #$00	_PSLoop:cpx 	#0 							; finished ?
.28f1	f0 10		beq $2903			beq 	_PSExit
.28f3	ca		dex				dex
.28f4	8a		txa				txa
.28f5	48		pha				pha
.28f6	c8		iny				iny
.28f7	b1 2a		lda ($2a),y			lda 	(temp0),y
.28f9	a2 14		ldx #$14		ldx	#20
.28fb	20 f6 14	jsr $14f6		jsr	deviceHandler
.28fe	68		pla				pla
.28ff	aa		tax				tax
.2900	4c ef 28	jmp $28ef			jmp 	_PSLoop
.2903					_PSExit:
.2903	68		pla				pla
.2904	a8		tay				tay
.2905	68		pla				pla
.2906	aa		tax				tax
.2907	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/io/text.asm

.2908					Command_CLS:
.2908	a2 04		ldx #$04		ldx	#4
.290a	20 f6 14	jsr $14f6		jsr	deviceHandler
.290d	60		rts				rts
.290e					Command_Ink:
.290e	a2 00		ldx #$00			ldx 	#0
.2910	20 0a 36	jsr $360a			jsr 	EvaluateSmallInteger
.2913	a2 08		ldx #$08		ldx	#8
.2915	20 f6 14	jsr $14f6		jsr	deviceHandler
.2918	60		rts				rts
.2919					Command_Paper:
.2919	a2 00		ldx #$00			ldx 	#0
.291b	20 0a 36	jsr $360a			jsr 	EvaluateSmallInteger
.291e	a2 12		ldx #$12		ldx	#18
.2920	20 f6 14	jsr $14f6		jsr	deviceHandler
.2923	60		rts				rts
.2924					Command_Locate:
.2924	a2 00		ldx #$00			ldx 	#0
.2926	20 0a 36	jsr $360a			jsr 	EvaluateSmallInteger
.2929	20 1a 3d	jsr $3d1a			jsr 	CheckComma
.292c	e8		inx				inx
.292d	20 0a 36	jsr $360a			jsr 	EvaluateSmallInteger
.2930	98		tya				tya
.2931	48		pha				pha
.2932	a4 99		ldy $99				ldy 	esInt0+1
.2934	a5 98		lda $98				lda 	esInt0
.2936	a2 10		ldx #$10		ldx	#16
.2938	20 f6 14	jsr $14f6		jsr	deviceHandler
.293b	68		pla				pla
.293c	a8		tay				tay
.293d	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/io/vdu.asm

.293e					Command_VDU:
.293e	20 00 36	jsr $3600			jsr 	EvaluateRootInteger 			; get integer at root.
.2941	a5 98		lda $98				lda 	esInt0
.2943	a2 14		ldx #$14		ldx	#20
.2945	20 f6 14	jsr $14f6		jsr	deviceHandler
.2948					_CVNext:
.2948	b1 28		lda ($28),y			lda 	(codePtr),y 					; what follows ?
.294a	c8		iny				iny
.294b	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 						; comma, do again
.294d	f0 ef		beq $293e			beq 	Command_VDU
.294f	c9 cc		cmp #$cc			cmp 	#TKW_SEMICOLON 					; semicolon, print MSB
.2951	d0 0a		bne $295d			bne 	_CVExit
.2953	a5 a0		lda $a0				lda 	esInt1
.2955	a2 14		ldx #$14		ldx	#20
.2957	20 f6 14	jsr $14f6		jsr	deviceHandler
.295a	4c 48 29	jmp $2948			jmp 	_CVNext
.295d	88		dey		_CVExit:dey
.295e	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/link.asm


;******  Return to file: main/main.asm


;******  Processing file: main/commands/misc/assert.asm

.295f					Command_Assert:
.295f	20 00 36	jsr $3600			jsr 	EvaluateRootInteger 		; what is being asserted.
.2962	20 c1 3c	jsr $3cc1			jsr 	MInt32Zero 					; is it true ?
.2965	f0 01		beq $2968			beq 	_CAError
.2967	60		rts				rts
.2968					_CAError:
.2968	a2 04		ldx #$04			ldx 	#ErrorID_Assert
.296a	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/commands/misc/dim.asm

.296d					Command_Dim:
.296d	a2 04		ldx #$04		ldx	#4
.296f	20 9a 4c	jsr $4c9a		jsr	variableHandler
.2972	b1 28		lda ($28),y			lda 	(codePtr),y 				; see what follows.
.2974	c8		iny				iny
.2975	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; comma follows, go back and do next
.2977	f0 f4		beq $296d			beq 	Command_Dim
.2979	88		dey				dey 								; unpick get
.297a	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/misc/let.asm

.297b					CommandLet:
.297b	a2 00		ldx #$00			ldx 	#0  						; get address to write.
.297d	20 3b 36	jsr $363b			jsr 	EvaluateReference
.2980	a9 8d		lda #$8d			lda 	#TKW_EQUAL 					; check for equals
.2982	20 02 3d	jsr $3d02			jsr 	CheckToken
.2985	e8		inx				inx 								; do RHS
.2986	20 e3 35	jsr $35e3			jsr 	Evaluate 					; evaluate and dereference
.2989	ca		dex				dex
.298a	20 8e 29	jsr $298e			jsr 	WriteValue 					; write it out
.298d	60		rts				rts
.298e					WriteValue:
.298e	98		tya				tya
.298f	48		pha				pha
.2990	20 f0 29	jsr $29f0			jsr 	TOSToTemp0 					; set temp0 to point to target address.
.2993	b5 90		lda $90,x			lda 	esType,x 					; check the string flags match
.2995	55 91		eor $91,x			eor 	esType+1,x 					; one string, one number causes an error.
.2997	29 40		and #$40			and 	#$40
.2999	d0 50		bne $29eb			bne		_WVType
.299b	a0 01		ldy #$01			ldy 	#1 							; for string, copy 0 and 1.
.299d	b5 90		lda $90,x			lda 	esType,x 					; check for string assignment
.299f	29 40		and #$40			and 	#$40
.29a1	d0 1f		bne $29c2			bne 	_WVCopyString
.29a3	b5 90		lda $90,x			lda 	esType,x 					; check both are integer.
.29a5	15 91		ora $91,x			ora 	esType+1,x
.29a7	4a		lsr a				lsr 	a
.29a8	90 22		bcc $29cc			bcc 	_WVCopyData4 				; copy 4 data bytes.
.29aa	b5 90		lda $90,x			lda 	esType,x
.29ac	4a		lsr a				lsr 	a
.29ad	90 3c		bcc $29eb			bcc 	_WVType
.29af	e8		inx				inx 								; force the value being written to be a float.
.29b0	20 45 32	jsr $3245			jsr 	BPMakeFloat
.29b3	ca		dex				dex
.29b4	20 f0 29	jsr $29f0			jsr 	TOSToTemp0 					; set Temp0 to write address
.29b7	e8		inx				inx
.29b8	8a		txa				txa
.29b9	a2 22		ldx #$22		ldx	#34
.29bb	20 fe 24	jsr $24fe		jsr	floatingpointHandler
.29be	aa		tax				tax
.29bf	4c e8 29	jmp $29e8			jmp 	_WVCopyExit
.29c2					_WVCopyString:
.29c2	8a		txa				txa
.29c3	a2 10		ldx #$10		ldx	#16
.29c5	20 45 40	jsr $4045		jsr	stringHandler
.29c8	aa		tax				tax
.29c9	4c e8 29	jmp $29e8			jmp 	_WVCopyExit
.29cc					_WVCopyData4:
.29cc	b5 90		lda $90,x			lda 	esType,x 					; is the int ref a byte ref ?
.29ce	29 20		and #$20			and 	#$20 						; (e.g. is bit 5 set)
.29d0	d0 10		bne $29e2			bne 	_WVCopyData1
.29d2	a0 03		ldy #$03			ldy 	#3
.29d4	b5 b1		lda $b1,x			lda 	esInt3+1,x
.29d6	91 2a		sta ($2a),y			sta 	(temp0),y
.29d8	88		dey				dey
.29d9	b5 a9		lda $a9,x			lda 	esInt2+1,x
.29db	91 2a		sta ($2a),y			sta 	(temp0),y
.29dd	88		dey				dey
.29de	b5 a1		lda $a1,x			lda 	esInt1+1,x
.29e0	91 2a		sta ($2a),y			sta 	(temp0),y
.29e2					_WVCopyData1:
.29e2	a0 00		ldy #$00			ldy 	#0
.29e4	b5 99		lda $99,x			lda 	esInt0+1,x
.29e6	91 2a		sta ($2a),y			sta 	(temp0),y
.29e8					_WVCopyExit:
.29e8	68		pla				pla
.29e9	a8		tay				tay
.29ea	60		rts				rts
.29eb					_WVType:
.29eb	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.29ed	20 18 15	jsr $1518		jsr	errorHandler
.29f0					TOSToTemp0:
.29f0	b5 98		lda $98,x			lda 	esInt0,x
.29f2	85 2a		sta $2a				sta 	temp0
.29f4	b5 a0		lda $a0,x			lda 	esInt1,x
.29f6	85 2b		sta $2b				sta 	temp0+1
.29f8	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/misc/poke.asm

.29f9					Command_Poke:
.29f9	a9 01		lda #$01			lda 	#1
.29fb	d0 06		bne $2a03			bne 	PokeGeneral
.29fd					Command_Doke:
.29fd	a9 02		lda #$02			lda 	#2
.29ff	d0 02		bne $2a03			bne 	PokeGeneral
.2a01					Command_Loke:
.2a01	a9 03		lda #$03			lda 	#3
.2a03					PokeGeneral:
.2a03	48		pha				pha 								; save id (PDL = 123)
.2a04	20 00 36	jsr $3600			jsr 	EvaluateRootInteger 		; target address
.2a07	20 1a 3d	jsr $3d1a			jsr	 	CheckComma
.2a0a	e8		inx				inx
.2a0b	20 02 36	jsr $3602			jsr 	EvaluateInteger 			; what value to POKE ?
.2a0e	ca		dex				dex
.2a0f	20 f0 29	jsr $29f0			jsr 	TOSToTemp0 					; temp0 points to the target address
.2a12	84 32		sty $32				sty 	tempShort 					; save Y
.2a14	68		pla				pla 								; get copy type (1-3) and dispatch
.2a15	aa		tax				tax
.2a16	ca		dex				dex
.2a17	f0 14		beq $2a2d			beq 	_Poke1
.2a19	ca		dex				dex
.2a1a	f0 0b		beq $2a27			beq 	_Poke2
.2a1c	a0 03		ldy #$03			ldy 	#3							; put 4 bytes
.2a1e	a5 b1		lda $b1				lda 	esInt3+1
.2a20	91 2a		sta ($2a),y			sta 	(temp0),y
.2a22	88		dey				dey
.2a23	a5 a9		lda $a9				lda 	esInt2+1
.2a25	91 2a		sta ($2a),y			sta 	(temp0),y
.2a27					_Poke2:
.2a27	a0 01		ldy #$01			ldy 	#1
.2a29	a5 a1		lda $a1				lda 	esInt1+1
.2a2b	91 2a		sta ($2a),y			sta 	(temp0),y
.2a2d					_Poke1:
.2a2d	a0 00		ldy #$00			ldy 	#0
.2a2f	a5 99		lda $99				lda 	esInt0+1
.2a31	91 2a		sta ($2a),y			sta 	(temp0),y
.2a33	a4 32		ldy $32				ldy 	tempShort 					; restore Y and exit
.2a35	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/misc/rem.asm

.2a36					Command_Rem:
.2a36					Command_Rem2:
.2a36	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows
.2a38	c9 85		cmp #$85			cmp 	#TOK_STR 					; if it is a string then skip it.
.2a3a	d0 06		bne $2a42			bne 	_CRNotString
.2a3c	c8		iny				iny
.2a3d	98		tya				tya
.2a3e	38		sec				sec
.2a3f	71 28		adc ($28),y			adc 	(codePtr),y 				; get string size, add to Y, +1 for the length
.2a41	a8		tay				tay
.2a42					_CRNotString:
.2a42	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/misc/stopend.asm

.2a43					CommandStop:
.2a43	a2 06		ldx #$06			ldx 	#ErrorID_Stop
.2a45	20 18 15	jsr $1518		jsr	errorHandler
.2a48					CommandEnd:
.2a48	4c 83 3d	jmp $3d83			jmp 	WarmStart
.2a4b					CommandXemu:
.2a4b	4c ff ff	jmp $ffff			jmp 	$FFFF 						; fudge to crash out of emulator
.2a4e					AdvanceNextLine:
.2a4e	a0 00		ldy #$00			ldy 	#0 							; get offset
.2a50	b1 28		lda ($28),y			lda 	(codePtr),y
.2a52	18		clc				clc 								; add to codePtr
.2a53	65 28		adc $28				adc 	codePtr
.2a55	85 28		sta $28				sta 	codePtr
.2a57	90 02		bcc $2a5b			bcc 	_ANLNoCarry
.2a59	e6 29		inc $29				inc 	codePtr+1
.2a5b					_ANLNoCarry:
.2a5b	b1 28		lda ($28),y			lda 	(codePtr),y 				; if end of program (or was just stand alone.
.2a5d	f0 e9		beq $2a48			beq 	CommandEnd 					; execute END
.2a5f	a0 03		ldy #$03			ldy 	#3 							; start of tokens on line.
.2a61	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/for.asm

.2a62					Command_FOR:
.2a62	a9 46		lda #$46			lda 	#markerFOR 					; allocate the space and set the marker
.2a64	a2 0b		ldx #$0b			ldx 	#11
.2a66	20 35 3d	jsr $3d35			jsr 	RSClaim
.2a69	20 7b 29	jsr $297b			jsr 	CommandLET 					; do the same as LET FOR [a = 4]
.2a6c	a5 90		lda $90				lda 	esType 						; check type should be integer reference.
.2a6e	c9 80		cmp #$80			cmp 	#$80 						; we do not do FOR floats.
.2a70	d0 4c		bne $2abe			bne 	_CFType
.2a72	a9 ce		lda #$ce			lda 	#TKW_TO 					; check TO present.
.2a74	20 02 3d	jsr $3d02			jsr 	CheckToken
.2a77	a2 01		ldx #$01			ldx 	#1 							; keep the variable address in stack 0
.2a79	20 02 36	jsr $3602			jsr 	EvaluateInteger				; get terminal value in stack 1
.2a7c	98		tya				tya
.2a7d	48		pha				pha
.2a7e	a0 04		ldy #$04			ldy 	#4
.2a80	a5 98		lda $98				lda		esInt0 						; copy the address of the index variable into 4 and 5
.2a82	91 37		sta ($37),y			sta 	(rsPointer),y
.2a84	c8		iny				iny
.2a85	a5 a0		lda $a0				lda		esInt1
.2a87	91 37		sta ($37),y			sta 	(rsPointer),y
.2a89	c8		iny				iny
.2a8a	a9 01		lda #$01			lda 	#1  						; the default step in 6, (-128 .. 127 only)
.2a8c	91 37		sta ($37),y			sta 	(rsPointer),y
.2a8e	c8		iny				iny
.2a8f	a5 99		lda $99				lda		esInt0+1 					; terminal value in 7 to 11.
.2a91	91 37		sta ($37),y			sta 	(rsPointer),y
.2a93	c8		iny				iny
.2a94	a5 a1		lda $a1				lda		esInt1+1
.2a96	91 37		sta ($37),y			sta 	(rsPointer),y
.2a98	c8		iny				iny
.2a99	a5 a9		lda $a9				lda		esInt2+1
.2a9b	91 37		sta ($37),y			sta 	(rsPointer),y
.2a9d	c8		iny				iny
.2a9e	a5 b1		lda $b1				lda		esInt3+1
.2aa0	91 37		sta ($37),y			sta 	(rsPointer),y
.2aa2	68		pla				pla
.2aa3	a8		tay				tay
.2aa4	b1 28		lda ($28),y			lda 	(codePtr),y 				; followed by STEP.
.2aa6	c9 cf		cmp #$cf			cmp 	#TKW_STEP
.2aa8	d0 0e		bne $2ab8			bne 	_CFDone
.2aaa	c8		iny				iny									; skip over step.
.2aab	20 02 36	jsr $3602			jsr 	EvaluateInteger 			; get step
.2aae	98		tya				tya
.2aaf	48		pha				pha
.2ab0	b5 98		lda $98,x			lda 	esInt0,x 					; copy it into step (bit lazy here)
.2ab2	a0 06		ldy #$06			ldy 	#6
.2ab4	91 37		sta ($37),y			sta 	(rsPointer),y
.2ab6	68		pla				pla
.2ab7	a8		tay				tay
.2ab8					_CFDone:
.2ab8	a9 01		lda #$01			lda 	#1
.2aba	20 61 3d	jsr $3d61			jsr 	RSSavePosition 				; save position.
.2abd	60		rts				rts
.2abe					_CFType:
.2abe	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.2ac0	20 18 15	jsr $1518		jsr	errorHandler
.2ac3					Command_NEXT:
.2ac3	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.2ac5	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.2ac7	c9 46		cmp #$46			cmp 	#markerFOR 						; does it match
.2ac9	f0 05		beq $2ad0			beq 	_isok
.2acb	a2 10		ldx #$10			ldx 	#ErrorID_nextErr
.2acd	20 18 15	jsr $1518		jsr	errorHandler
.2ad0					_isok:
.2ad0	b1 28		lda ($28),y			lda 	(codePtr),y 				; is it NEXT <index>
.2ad2	c9 40		cmp #$40			cmp 	#$40 						; e.g. a variable follows 00-3F
.2ad4	b0 18		bcs $2aee			bcs 	_CNNoIndex
.2ad6	a2 00		ldx #$00			ldx 	#0 							; start on stack
.2ad8	20 3b 36	jsr $363b			jsr 	EvaluateReference 			; this is the variable/parameter to localise.
.2adb	98		tya				tya
.2adc	48		pha				pha
.2add	a0 04		ldy #$04			ldy 	#4 							; check same variable as that stored at +4,+5
.2adf	b1 37		lda ($37),y			lda 	(rsPointer),y
.2ae1	d5 98		cmp $98,x			cmp 	esInt0,x
.2ae3	d0 76		bne $2b5b			bne 	_CNBadIndex
.2ae5	c8		iny				iny
.2ae6	b1 37		lda ($37),y			lda 	(rsPointer),y
.2ae8	d5 a0		cmp $a0,x			cmp 	esInt1,x
.2aea	d0 6f		bne $2b5b			bne 	_CNBadIndex
.2aec	68		pla				pla
.2aed	a8		tay				tay
.2aee					_CNNoIndex:
.2aee	98		tya				tya
.2aef	48		pha				pha
.2af0	a0 04		ldy #$04			ldy 	#4 							; make temp0 point to the index
.2af2	b1 37		lda ($37),y			lda 	(rsPointer),y
.2af4	85 2a		sta $2a				sta 	temp0
.2af6	c8		iny				iny
.2af7	b1 37		lda ($37),y			lda 	(rsPointer),y
.2af9	85 2b		sta $2b				sta 	temp0+1
.2afb	c8		iny				iny
.2afc	a2 00		ldx #$00			ldx 	#0 							; X is the sign extend part of the step.
.2afe	b1 37		lda ($37),y			lda 	(rsPointer),y 				; get the step.
.2b00	85 2f		sta $2f				sta 	temp2+1 					; save for later.
.2b02	10 01		bpl $2b05			bpl 	_CNSignX
.2b04	ca		dex				dex  								; X = $FF
.2b05					_CNSignX:
.2b05	18		clc				clc 								; add to the LSB
.2b06	a0 00		ldy #$00			ldy 	#0
.2b08	71 2a		adc ($2a),y			adc 	(temp0),y
.2b0a	91 2a		sta ($2a),y			sta 	(temp0),y
.2b0c					_CNPropogate:
.2b0c	c8		iny				iny  								; add the sign extended in X to the rest.
.2b0d	8a		txa				txa
.2b0e	71 2a		adc ($2a),y			adc 	(temp0),y
.2b10	91 2a		sta ($2a),y			sta 	(temp0),y
.2b12	c8		iny				iny
.2b13	8a		txa				txa
.2b14	71 2a		adc ($2a),y			adc 	(temp0),y
.2b16	91 2a		sta ($2a),y			sta 	(temp0),y
.2b18	c8		iny				iny
.2b19	8a		txa				txa
.2b1a	71 2a		adc ($2a),y			adc 	(temp0),y
.2b1c	91 2a		sta ($2a),y			sta 	(temp0),y
.2b1e	18		clc				clc 								; point temp1 to the terminal value stored in the stack.
.2b1f	a5 37		lda $37				lda 	rsPointer
.2b21	69 07		adc #$07			adc 	#7
.2b23	85 2c		sta $2c				sta 	temp1
.2b25	a9 00		lda #$00			lda 	#0
.2b27	85 2e		sta $2e				sta 	temp2 						; clear temp2, which is the OR of all the subtractions.
.2b29	a8		tay				tay 								; and clear the Y register again.
.2b2a	65 38		adc $38				adc 	rsPointer+1
.2b2c	85 2d		sta $2d				sta 	temp1+1
.2b2e	38		sec				sec 								; calculate current - limit oring interim values.
.2b2f	20 67 2b	jsr $2b67			jsr 	_CNCompare 					; each of these does a byte.
.2b32	20 67 2b	jsr $2b67			jsr 	_CNCompare 					; we calculate the OR of all these subtractions.
.2b35	20 67 2b	jsr $2b67			jsr 	_CNCompare 					; and the carry of the subtraction.
.2b38	20 67 2b	jsr $2b67			jsr 	_CNCompare
.2b3b	50 02		bvc $2b3f			bvc 	_CNNoOverflow 				; converts to a signed comparison on the sign bit.
.2b3d	49 80		eor #$80			eor 	#$80
.2b3f					_CNNoOverflow:
.2b3f	a4 2f		ldy $2f				ldy 	temp2+1						; get step back
.2b41	30 1d		bmi $2b60			bmi 	_CNCheckDownto
.2b43	c9 00		cmp #$00			cmp 	#0
.2b45	30 0c		bmi $2b53			bmi 	_CNLoopRound 				; loop round if < =
.2b47	a5 2e		lda $2e				lda 	temp2
.2b49	f0 08		beq $2b53			beq 	_CNLoopRound
.2b4b					_CNLoopExit:
.2b4b	68		pla				pla
.2b4c	a8		tay				tay
.2b4d	a9 0b		lda #$0b			lda 	#11
.2b4f	20 57 3d	jsr $3d57			jsr 	RSFree
.2b52	60		rts				rts
.2b53					_CNLoopRound:
.2b53	68		pla				pla
.2b54	a8		tay				tay
.2b55	a9 01		lda #$01			lda 	#1
.2b57	20 74 3d	jsr $3d74			jsr 	RSLoadPosition				; go back to the loop top
.2b5a	60		rts				rts
.2b5b					_CNBadIndex:
.2b5b	a2 13		ldx #$13			ldx 	#ErrorID_BadIndex
.2b5d	20 18 15	jsr $1518		jsr	errorHandler
.2b60					_CNCheckDownto:
.2b60	c9 00		cmp #$00			cmp 	#0
.2b62	10 ef		bpl $2b53			bpl 	_CNLoopRound
.2b64	4c 4b 2b	jmp $2b4b			jmp 	_CNLoopExit
.2b67					_CNCompare:
.2b67	b1 2a		lda ($2a),y			lda 	(temp0),y 					; do the subtraction - compare don't care about answer
.2b69	f1 2c		sbc ($2c),y			sbc 	(temp1),y
.2b6b	05 2e		ora $2e				ora 	temp2 						; Or into temp2 (does not affect carry)
.2b6d	85 2e		sta $2e				sta 	temp2
.2b6f	c8		iny				iny
.2b70	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/if.asm

.2b71					CommandIf:
.2b71	20 00 36	jsr $3600			jsr 	EvaluateRootInteger 		; get what's being tested.
.2b74	b1 28		lda ($28),y			lda 	(codePtr),y 				; check for IF .. THEN or IF .. GOTO which are single lines.
.2b76	c9 91		cmp #$91			cmp 	#TKW_GOTO
.2b78	f0 04		beq $2b7e			beq 	_IfSimple
.2b7a	c9 a1		cmp #$a1			cmp 	#TKW_THEN
.2b7c	d0 1b		bne $2b99			bne 	_IfComplex
.2b7e					_IfSimple:
.2b7e	20 c1 3c	jsr $3cc1			jsr 	MInt32Zero					; check if TOS zero
.2b81	f0 10		beq $2b93			beq 	_IfEOL 						; go to next line.
.2b83	b1 28		lda ($28),y			lda 	(codePtr),y 				; get and skip token.
.2b85	c8		iny				iny
.2b86	c9 91		cmp #$91			cmp 	#TKW_GOTO 					; was it if GOTO ?
.2b88	f0 0c		beq $2b96			beq 	_IfGoto 					; do the Goto code
.2b8a	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows the THEN ?
.2b8c	29 c0		and #$c0			and 	#$C0 						; check $40-$7F
.2b8e	c9 40		cmp #$40			cmp 	#$40 						; e.g. number IF x = 0 THEN 170
.2b90	f0 04		beq $2b96			beq 	_IfGoto
.2b92	60		rts				rts 								; else continue on this line.
.2b93					_IfEOL:
.2b93	4c 4e 2a	jmp $2a4e			jmp 	AdvanceNextLine 			; go to next line
.2b96					_IfGoto:
.2b96	4c 85 27	jmp $2785			jmp 	CommandGoto
.2b99					_IfComplex:
.2b99	20 c1 3c	jsr $3cc1			jsr 	MInt32Zero 					; is it true ?
.2b9c	f0 01		beq $2b9f			beq 	_IFSkip 					; if non-zero then skip to ELSE/ENDIF
.2b9e	60		rts				rts 								; else continue.
.2b9f					_IFSkip:
.2b9f	a9 d6		lda #$d6			lda	 	#TKW_ELSE 					; test failed, go to ELSE or ENDIF whichever comes first.
.2ba1	a2 a2		ldx #$a2			ldx 	#TKW_ENDIF
.2ba3	4c 3b 2e	jmp $2e3b			jmp		ScanForward
.2ba6					Command_ELSE:
.2ba6	a2 a2		ldx #$a2			ldx 	#TKW_ENDIF
.2ba8	8a		txa				txa
.2ba9	4c 3b 2e	jmp $2e3b			jmp		ScanForward
.2bac					Command_ENDIF:
.2bac	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/local.asm

.0d03					storeSize:
>0d03							.fill 	1
.2bad					CommandLocal:
.2bad	a2 00		ldx #$00			ldx 	#0
.2baf	20 cb 2b	jsr $2bcb			jsr 	LocaliseVariable 			; localise one.
.2bb2					_CLCheckNext:
.2bb2	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows ?
.2bb4	c8		iny				iny
.2bb5	c9 8d		cmp #$8d			cmp 	#TKW_EQUAL 					; something local "x = 2" ?
.2bb7	f0 06		beq $2bbf			beq 	_CLAssignment
.2bb9	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; comma try again.
.2bbb	f0 f0		beq $2bad			beq 	CommandLocal
.2bbd	88		dey				dey
.2bbe	60		rts				rts
.2bbf					_CLAssignment:
.2bbf	a2 01		ldx #$01			ldx 	#1
.2bc1	20 e3 35	jsr $35e3			jsr 	Evaluate 					; evaluate RHS
.2bc4	ca		dex				dex
.2bc5	20 8e 29	jsr $298e			jsr 	WriteValue
.2bc8	4c b2 2b	jmp $2bb2			jmp 	_CLCheckNext
.2bcb					LocaliseVariable:
.2bcb	b1 28		lda ($28),y			lda 	(codePtr),y 				; check it's a variable.
.2bcd	c9 40		cmp #$40			cmp 	#$40
.2bcf	b0 67		bcs $2c38			bcs 	_LVSyntax
.2bd1	8a		txa				txa 								; get the address of that variable.
.2bd2	a2 02		ldx #$02		ldx	#2
.2bd4	20 9a 4c	jsr $4c9a		jsr	variableHandler
.2bd7	aa		tax				tax
.2bd8	8a		txa				txa
.2bd9	48		pha				pha
.2bda	98		tya				tya
.2bdb	48		pha				pha
.2bdc	20 f0 29	jsr $29f0			jsr 	TOSToTemp0 					; the address of the variable is now in temp0.
.2bdf	b5 90		lda $90,x			lda 	esType,x 					; get the type
.2be1	0a		asl a				asl 	a
.2be2	10 16		bpl $2bfa			bpl 	_LVPushNumber
.2be4	a0 00		ldy #$00			ldy 	#0 							; put address of data in temp1
.2be6	b1 2a		lda ($2a),y			lda 	(temp0),y
.2be8	c8		iny				iny
.2be9	85 2c		sta $2c				sta 	temp1
.2beb	b1 2a		lda ($2a),y			lda 	(temp0),y
.2bed	85 2d		sta $2d				sta 	temp1+1
.2bef	a0 00		ldy #$00			ldy 	#0 	 						; get length
.2bf1	b1 2c		lda ($2c),y			lda 	(temp1),y
.2bf3	aa		tax				tax 								; into X
.2bf4	e8		inx				inx 								; +1 for length.
.2bf5	a9 24		lda #$24			lda 	#markerString
.2bf7	4c 0f 2c	jmp $2c0f			jmp 	_LVWriteFrame
.2bfa					_LVPushNumber:
.2bfa	a5 2a		lda $2a				lda 	temp0 						; storage address and data source are the same
.2bfc	85 2c		sta $2c				sta 	temp1
.2bfe	a5 2b		lda $2b				lda 	temp0+1
.2c00	85 2d		sta $2d				sta 	temp1+1
.2c02	b5 90		lda $90,x			lda 	esType,x 					; put float flag into carry.
.2c04	4a		lsr a				lsr 	a
.2c05	a9 25		lda #$25			lda 	#markerInt 					; get marker and size.
.2c07	a2 04		ldx #$04			ldx 	#VarISize
.2c09	90 04		bcc $2c0f			bcc 	_LVIsInteger
.2c0b	a9 23		lda #$23			lda 	#markerFloat
.2c0d	a2 06		ldx #$06			ldx 	#VarFSize
.2c0f					_LVIsInteger:
.2c0f					_LVWriteFrame:
.2c0f	8e 03 0d	stx $0d03			stx 	storeSize 					; number of bytes to copy from (temp0)
.2c12	e8		inx				inx 								; allocate 3 bytes, 2 for the address, 1 for the marker.
.2c13	e8		inx				inx
.2c14	e8		inx				inx
.2c15	20 35 3d	jsr $3d35			jsr 	RSClaim 					; create the stack frame.
.2c18	a5 2a		lda $2a				lda 	temp0 						; copy the target address to slots 1 & 2
.2c1a	a0 01		ldy #$01			ldy 	#1
.2c1c	91 37		sta ($37),y			sta 	(rsPointer),y
.2c1e	c8		iny				iny
.2c1f	a5 2b		lda $2b				lda 	temp0+1
.2c21	91 37		sta ($37),y			sta 	(rsPointer),y
.2c23	a0 00		ldy #$00			ldy 	#0
.2c25					_LVCopyData:
.2c25	b1 2c		lda ($2c),y			lda 	(temp1),y 					; get data from source, temp1
.2c27	c8		iny				iny 								; write allowing for the header bit.
.2c28	c8		iny				iny
.2c29	c8		iny				iny
.2c2a	91 37		sta ($37),y			sta 	(rsPointer),y
.2c2c	88		dey				dey
.2c2d	88		dey				dey
.2c2e	ce 03 0d	dec $0d03			dec 	storeSize 					; do it storesize times
.2c31	d0 f2		bne $2c25			bne 	_LVCopyData
.2c33	68		pla				pla
.2c34	a8		tay				tay
.2c35	68		pla				pla
.2c36	aa		tax				tax
.2c37	60		rts				rts
.2c38					_LVSyntax:
.2c38	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.2c3a	20 18 15	jsr $1518		jsr	errorHandler
.2c3d					RestoreLocals:
.2c3d	a2 00		ldx #$00			ldx 	#0
.2c3f	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.2c41	c9 40		cmp #$40			cmp	 	#64
.2c43	90 01		bcc $2c46			bcc 	_RLocal
.2c45	60		rts				rts
.2c46					_RLocal:
.2c46	8a		txa				txa
.2c47	48		pha				pha
.2c48	98		tya				tya
.2c49	48		pha				pha
.2c4a	a0 01		ldy #$01			ldy 	#1 							; copy target address to temp0
.2c4c	b1 37		lda ($37),y			lda 	(rsPointer),y
.2c4e	85 2a		sta $2a				sta 	temp0
.2c50	c8		iny				iny
.2c51	b1 37		lda ($37),y			lda 	(rsPointer),y
.2c53	85 2b		sta $2b				sta 	temp0+1
.2c55	a0 00		ldy #$00			ldy 	#0 							; get type back.
.2c57	b1 37		lda ($37),y			lda 	(rsPointer),y
.2c59	c9 24		cmp #$24			cmp 	#markerString 				; string is ... different :)
.2c5b	f0 28		beq $2c85			beq 	_RString
.2c5d	a2 04		ldx #$04			ldx		#VARISize 					; size integer
.2c5f	c9 25		cmp #$25			cmp 	#markerInt
.2c61	f0 02		beq $2c65			beq 	_RIsInteger
.2c63	a2 06		ldx #$06			ldx 	#VARFSize 					; size float
.2c65					_RIsInteger:
.2c65	8a		txa				txa
.2c66	48		pha				pha
.2c67	a0 03		ldy #$03			ldy 	#3							; start size to copy back from pointer.
.2c69					_RCopyBack:
.2c69	b1 37		lda ($37),y			lda 	(rsPointer),y
.2c6b	88		dey				dey
.2c6c	88		dey				dey
.2c6d	88		dey				dey
.2c6e	91 2a		sta ($2a),y			sta 	(temp0),y
.2c70	c8		iny				iny
.2c71	c8		iny				iny
.2c72	c8		iny				iny
.2c73	c8		iny				iny
.2c74	ca		dex				dex
.2c75	d0 f2		bne $2c69			bne 	_RCopyBack
.2c77	68		pla				pla 								; get size add 3
.2c78	18		clc				clc
.2c79	69 03		adc #$03			adc 	#3 							; (2 for address one for marker)
.2c7b					_RRestoreAAndLoop:
.2c7b	20 57 3d	jsr $3d57			jsr 	RSFree
.2c7e	68		pla				pla
.2c7f	a8		tay				tay
.2c80	68		pla				pla
.2c81	aa		tax				tax
.2c82	4c 3d 2c	jmp $2c3d			jmp 	RestoreLocals 				; go see if there are any more locals.
.2c85					_RString:
.2c85	a2 00		ldx #$00			ldx 	#0
.2c87	a0 01		ldy #$01			ldy 	#1 							; set up for a string write.
.2c89	b1 37		lda ($37),y			lda 	(rsPointer),y
.2c8b	95 98		sta $98,x			sta 	esInt0,x
.2c8d	c8		iny				iny
.2c8e	b1 37		lda ($37),y			lda 	(rsPointer),y
.2c90	95 a0		sta $a0,x			sta 	esInt1,x
.2c92	18		clc				clc
.2c93	a5 37		lda $37				lda 	rsPointer
.2c95	69 03		adc #$03			adc 	#3
.2c97	95 99		sta $99,x			sta 	esInt0+1,x
.2c99	a5 38		lda $38				lda 	rsPointer+1
.2c9b	69 00		adc #$00			adc 	#0
.2c9d	95 a1		sta $a1,x			sta 	esInt1+1,x
.2c9f	8a		txa				txa
.2ca0	a2 10		ldx #$10		ldx	#16
.2ca2	20 45 40	jsr $4045		jsr	stringHandler
.2ca5	a0 03		ldy #$03			ldy 	#3 							; get string length
.2ca7	b1 37		lda ($37),y			lda 	(rsPointer),y
.2ca9	18		clc				clc
.2caa	69 04		adc #$04			adc 	#4 							; add 4 (pointer, marker, length) to restore.
.2cac	4c 7b 2c	jmp $2c7b			jmp 	_RRestoreAAndLoop

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/proc.asm

.0d04					paramCount:
>0d04							.fill 	1
.2caf					CallProc:
.2caf	20 37 2d	jsr $2d37			jsr 	FindProcedure 				; find procedure, put in temp0. A contains name length.
.2cb2	48		pha				pha 								; save length on stack
.2cb3	85 32		sta $32				sta 	tempShort 					; save length in tempShort
.2cb5	a5 2b		lda $2b				lda 	temp0+1 					; save procedure target on stack.
.2cb7	48		pha				pha
.2cb8	a5 2a		lda $2a				lda 	temp0
.2cba	48		pha				pha
.2cbb	98		tya				tya 								; calculate Y + length
.2cbc	18		clc				clc
.2cbd	65 32		adc $32				adc 	tempShort
.2cbf	a8		tay				tay
.2cc0	a2 00		ldx #$00			ldx 	#0 							; where the first parameter goes - 1
.2cc2					_CallProcEvalParams:
.2cc2	e8		inx				inx
.2cc3	b1 28		lda ($28),y			lda 	(codePtr),y 				; do we have ) , e.g. the end of the parameters ?
.2cc5	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.2cc7	f0 0b		beq $2cd4			beq 	_CPDoneParams
.2cc9	20 e3 35	jsr $35e3			jsr 	Evaluate 					; evaluate a parameter
.2ccc	b1 28		lda ($28),y			lda 	(codePtr),Y 				; get what's next, preconsume
.2cce	c8		iny				iny
.2ccf	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; if comma, go get another parameter
.2cd1	f0 ef		beq $2cc2			beq 	_CallProcEvalParams
.2cd3	88		dey				dey 								; undo consumption.
.2cd4					_CPDoneParams:
.2cd4	20 0d 3d	jsr $3d0d			jsr 	CheckRightParen 			; check closing parenthesis.
.2cd7	8e 04 0d	stx $0d04			stx 	paramCount 					; store parameter count+1
.2cda	a2 04		ldx #$04			ldx 	#4							; make space on stack
.2cdc	a9 50		lda #$50			lda 	#markerPROC
.2cde	20 35 3d	jsr $3d35			jsr 	RSClaim
.2ce1	a9 01		lda #$01			lda 	#1 							; store return address.
.2ce3	20 61 3d	jsr $3d61			jsr 	RSSavePosition
.2ce6	68		pla				pla 								; get the new code Ptr
.2ce7	85 28		sta $28				sta 	codePtr
.2ce9	68		pla				pla
.2cea	85 29		sta $29				sta 	codePtr+1
.2cec	68		pla				pla 								; length of name + 4 is the param start.
.2ced	18		clc				clc
.2cee	69 04		adc #$04			adc 	#4
.2cf0	a8		tay				tay
.2cf1	a2 ff		ldx #$ff			ldx 	#$FF
.2cf3					_CPLoadParameters:
.2cf3	e8		inx				inx 								; point to where the address should be loaded.
.2cf4	ec 04 0d	cpx $0d04			cpx 	paramCount 					; too many parameters in definition ?
.2cf7	f0 1e		beq $2d17			beq 	_CPParamError
.2cf9	b1 28		lda ($28),y			lda 	(codePtr),y					; what follows
.2cfb	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN 				; is it the right bracket
.2cfd	f0 0e		beq $2d0d			beq 	_CPParamComplete 			; done all the parameters, perhaps.
.2cff	20 cb 2b	jsr $2bcb			jsr 	LocaliseVariable 			; make following variable local, ref in tos,x
.2d02	20 8e 29	jsr $298e			jsr 	WriteValue 					; copy the evaluated parameter into there.
.2d05	b1 28		lda ($28),y			lda 	(codePtr),y 				; followed by a comma ?
.2d07	c8		iny				iny
.2d08	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.2d0a	f0 e7		beq $2cf3			beq 	_CPLoadParameters
.2d0c	88		dey				dey 								; no, unconsume and check for )
.2d0d					_CPParamComplete:
.2d0d	20 0d 3d	jsr $3d0d			jsr 	CheckRightParen 			; check )
.2d10	e8		inx				inx 								; check right number of parameters have been consumed
.2d11	ec 04 0d	cpx $0d04			cpx 	paramCount
.2d14	d0 01		bne $2d17			bne 	_CPParamError
.2d16	60		rts				rts
.2d17					_CPParamError:
.2d17	a2 18		ldx #$18			ldx 	#ErrorID_Params
.2d19	20 18 15	jsr $1518		jsr	errorHandler
.2d1c					ReturnProc:
.2d1c	20 3d 2c	jsr $2c3d			jsr 	RestoreLocals 				; get the locals back.
.2d1f	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.2d21	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.2d23	c9 50		cmp #$50			cmp 	#markerPROC 						; does it match
.2d25	f0 05		beq $2d2c			beq 	_isok
.2d27	a2 12		ldx #$12			ldx 	#ErrorID_endProcErr
.2d29	20 18 15	jsr $1518		jsr	errorHandler
.2d2c					_isok:
.2d2c	a9 01		lda #$01			lda 	#1
.2d2e	20 74 3d	jsr $3d74			jsr 	RSLoadPosition 				; reload the position from offset 1.
.2d31	a9 04		lda #$04			lda 	#4 							; throw 4 bytes from stack.
.2d33	20 57 3d	jsr $3d57			jsr 	RSFree
.2d36	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/proctable.asm

.0d05					procList:
>0d05							.fill 	2		 					; terminated by name high being zero.
.0d07					yInLine:
>0d07							.fill 	1
.2d37					FindProcedure:
.2d37	8c 07 0d	sty $0d07			sty 	yInLine 					; save current position.
.2d3a	20 f5 2d	jsr $2df5			jsr 	CalculateProcedureHash		; calculate the hash of the procedure.
.2d3d	85 2c		sta $2c				sta 	temp1
.2d3f	ad 05 0d	lda $0d05			lda		procList 					; put procList address in temp2
.2d42	85 2e		sta $2e				sta 	temp2
.2d44	ad 06 0d	lda $0d06			lda 	procList+1
.2d47	85 2f		sta $2f				sta 	temp2+1
.2d49	a0 00		ldy #$00			ldy 	#0 							; position in this table.
.2d4b					_FPLoop:
.2d4b	b1 2e		lda ($2e),y			lda 	(temp2),y
.2d4d	f0 4f		beq $2d9e			beq 	_FPError 					; if so, we don't know this procedure.
.2d4f	85 2b		sta $2b				sta 	temp0+1 					; copy MSB/LSB to temp0 as we go.
.2d51	c8		iny				iny
.2d52	b1 2e		lda ($2e),y			lda 	(temp2),y
.2d54	85 2a		sta $2a				sta 	temp0
.2d56	c8		iny				iny
.2d57	b1 2e		lda ($2e),y			lda 	(temp2),y					; check the procedure hash.
.2d59	c5 2c		cmp $2c				cmp 	temp1
.2d5b	d0 2b		bne $2d88			bne 	_FPNext 					; hash is different, go to next.
.2d5d	38		sec				sec
.2d5e	ad 07 0d	lda $0d07			lda 	yInLine 					; position in line must be at least 4
.2d61	e9 04		sbc #$04			sbc 	#4
.2d63	18		clc				clc
.2d64	65 28		adc $28				adc 	codePtr
.2d66	85 30		sta $30				sta 	temp3
.2d68	a5 29		lda $29				lda 	codePtr+1
.2d6a	69 00		adc #$00			adc 	#0
.2d6c	85 31		sta $31				sta 	temp3+1
.2d6e	98		tya				tya
.2d6f	48		pha				pha
.2d70	a0 04		ldy #$04			ldy 	#4
.2d72					_FPCName:
.2d72	b1 30		lda ($30),y			lda 	(temp3),y 					; check the same
.2d74	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.2d76	d0 0e		bne $2d86			bne 	_FPpulYNext 				; if different go to next one.
.2d78	c8		iny				iny
.2d79	c9 3a		cmp #$3a			cmp 	#$3A
.2d7b	90 f5		bcc $2d72			bcc 	_FPCName 					; compare the whole lot....
.2d7d	68		pla				pla 								; throw away the saved Y
.2d7e	98		tya				tya 								; length of name is Y-4
.2d7f	38		sec				sec
.2d80	e9 04		sbc #$04			sbc 	#4
.2d82	ac 07 0d	ldy $0d07			ldy 	yInLine  					; get the original Y back
.2d85	60		rts				rts
.2d86					_FPpulYNext:
.2d86	68		pla				pla
.2d87	a8		tay				tay
.2d88					_FPNext:
.2d88	c8		iny				iny 								; next procedure record.
.2d89	10 c0		bpl $2d4b			bpl 	_FPLoop 					; if done 128 already ... e.g. Y -ve
.2d8b	98		tya				tya 								; subtract 128 from Y
.2d8c	38		sec				sec
.2d8d	e9 80		sbc #$80			sbc 	#128
.2d8f	a8		tay				tay
.2d90	18		clc				clc 								; add 128 to temp2, so we can have more than
.2d91	a5 2e		lda $2e				lda 	temp2 						; 255/3 = 85 procedures
.2d93	69 80		adc #$80			adc 	#128
.2d95	85 2e		sta $2e				sta 	temp2
.2d97	90 b2		bcc $2d4b			bcc 	_FPLoop
.2d99	e6 2f		inc $2f				inc 	temp2+1
.2d9b	4c 4b 2d	jmp $2d4b			jmp 	_FPLoop
.2d9e					_FPError:
.2d9e	a2 17		ldx #$17			ldx 	#ErrorID_NoProc
.2da0	20 18 15	jsr $1518		jsr	errorHandler
.2da3					ScanProc:
.2da3	98		tya				tya
.2da4	48		pha				pha
.2da5	a5 35		lda $35				lda 	lowMemory 					; copy the start of the procList, at low memory
.2da7	8d 05 0d	sta $0d05			sta 	procList
.2daa	a5 36		lda $36				lda 	lowMemory+1
.2dac	8d 06 0d	sta $0d06			sta 	procList+1
.2daf	20 21 31	jsr $3121			jsr 	ResetCodeAddress 			; back to the start.
.2db2					_ScanLoop:
.2db2	a0 00		ldy #$00			ldy 	#0 							; check reached program end
.2db4	b1 28		lda ($28),y			lda 	(codePtr),y
.2db6	f0 2a		beq $2de2			beq 	_ScanExit
.2db8	a0 03		ldy #$03			ldy 	#3							; get first token
.2dba	b1 28		lda ($28),y			lda 	(codePtr),y
.2dbc	c9 9d		cmp #$9d			cmp 	#TKW_DEFPROC				; skip to next if not DEFPROC
.2dbe	d0 12		bne $2dd2			bne 	_ScanNext
.2dc0	a5 29		lda $29				lda 	codePtr+1 					; write high and low address of this line.
.2dc2	20 ea 2d	jsr $2dea			jsr 	_ScanWrite
.2dc5	a5 28		lda $28				lda 	codePtr
.2dc7	20 ea 2d	jsr $2dea			jsr 	_ScanWrite
.2dca	a0 04		ldy #$04			ldy 	#4 							; start of name part
.2dcc	20 f5 2d	jsr $2df5			jsr 	CalculateProcedureHash 		; calculate procedure hash
.2dcf	20 ea 2d	jsr $2dea			jsr 	_ScanWrite					; and write that
.2dd2					_ScanNext:
.2dd2	18		clc				clc
.2dd3	a0 00		ldy #$00			ldy 	#0
.2dd5	b1 28		lda ($28),y			lda 	(codePtr),y
.2dd7	65 28		adc $28				adc 	codePtr
.2dd9	85 28		sta $28				sta 	codePtr
.2ddb	90 d5		bcc $2db2			bcc 	_ScanLoop
.2ddd	e6 29		inc $29				inc 	codePtr+1
.2ddf	4c b2 2d	jmp $2db2			jmp 	_ScanLoop
.2de2					_ScanExit:
.2de2	a9 00		lda #$00			lda 	#0 							; write ending zero.
.2de4	20 ea 2d	jsr $2dea			jsr 	_ScanWrite
.2de7	68		pla				pla
.2de8	a8		tay				tay
.2de9	60		rts				rts
.2dea					_ScanWrite:
.2dea	a0 00		ldy #$00			ldy 	#0
.2dec	91 35		sta ($35),y			sta 	(lowMemory),y
.2dee	e6 35		inc $35				inc 	lowMemory
.2df0	d0 02		bne $2df4			bne 	_SWNoCarry
.2df2	e6 36		inc $36				inc 	lowMemory+1
.2df4					_SWNoCarry:
.2df4	60		rts				rts
.2df5					CalculateProcedureHash:
.2df5	a9 00		lda #$00			lda 	#0 							; clear hash.
.2df7	85 2a		sta $2a				sta 	temp0
.2df9					_CPHLoop:
.2df9	18		clc				clc 								; add character and rotate and add carry back in
.2dfa	b1 28		lda ($28),y			lda 	(codePtr),y
.2dfc	65 2a		adc $2a				adc 	temp0
.2dfe	6a		ror a				ror 	a
.2dff	69 0d		adc #$0d			adc 	#13 						; primes usually good for this sort of thing.
.2e01	85 2a		sta $2a				sta 	temp0 						; (down with this sort of thing)
.2e03	b1 28		lda ($28),y			lda 	(codePtr),y
.2e05	c8		iny				iny 								; advance incase we go round again.
.2e06	c9 3a		cmp #$3a			cmp 	#$3A
.2e08	90 ef		bcc $2df9			bcc 	_CPHLoop
.2e0a	a5 2a		lda $2a				lda 	temp0
.2e0c	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/repeat.asm

.2e0d					Command_Repeat:
.2e0d	a2 04		ldx #$04			ldx 	#4 							; allocate 4 bytes on stack for REPEAT
.2e0f	a9 52		lda #$52			lda 	#markerREPEAT 				; repeat marker allocate 4 bytes
.2e11	20 35 3d	jsr $3d35			jsr 	RSClaim
.2e14	a9 01		lda #$01			lda 	#1 							; save position at offset 1.
.2e16	20 61 3d	jsr $3d61			jsr 	RSSavePosition
.2e19	60		rts				rts
.2e1a					Command_Until:
.2e1a	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.2e1c	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.2e1e	c9 52		cmp #$52			cmp 	#markerREPEAT 						; does it match
.2e20	f0 05		beq $2e27			beq 	_isok
.2e22	a2 0f		ldx #$0f			ldx 	#ErrorID_untilErr
.2e24	20 18 15	jsr $1518		jsr	errorHandler
.2e27					_isok:
.2e27	20 00 36	jsr $3600			jsr 	EvaluateRootInteger 		; at the bottom.
.2e2a	20 c1 3c	jsr $3cc1			jsr 	MInt32Zero					; check if TOS zero
.2e2d	d0 06		bne $2e35			bne 	_CUExit
.2e2f	a9 01		lda #$01			lda 	#1
.2e31	20 74 3d	jsr $3d74			jsr 	RSLoadPosition 				; reload the position from offset 1.
.2e34	60		rts				rts
.2e35					_CUExit:
.2e35	a9 04		lda #$04			lda 	#4 							; throw 4 bytes from stack.
.2e37	20 57 3d	jsr $3d57			jsr 	RSFree
.2e3a	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/scanner.asm

.2e3b					ScanForward:
.2e3b	85 2c		sta $2c				sta 	temp1 						; save tokens to search in temp1/temp1+1
.2e3d	86 2d		stx $2d				stx 	temp1+1
.2e3f	a9 00		lda #$00			lda 	#0 							; temp2 counts structure levels.
.2e41	85 2e		sta $2e				sta 	temp2
.2e43	b1 28		lda ($28),y	_SFLoop:lda 	(codePtr),y 				; look at the next token.
.2e45	c8		iny				iny
.2e46	a6 2e		ldx $2e				ldx 	temp2 						; check structure levels are zero.
.2e48	d0 08		bne $2e52			bne 	_SFNoCheck 					; if so, check token against entered values.
.2e4a	c5 2c		cmp $2c				cmp 	temp1 						; if either matches, we've reached the token
.2e4c	f0 24		beq $2e72			beq 	_SFExit 					; at the same strcture depth.
.2e4e	c5 2d		cmp $2d				cmp 	temp1+1
.2e50	f0 20		beq $2e72			beq 	_SFExit
.2e52					_SFNoCheck:
.2e52	c9 80		cmp #$80			cmp 	#$80 						; if it is 00-7F (variable/number) just skip it.
.2e54	90 ed		bcc $2e43			bcc 	_SFLoop
.2e56	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; $80-$85 is various specials.
.2e58	90 19		bcc $2e73			bcc 	_SFSpecials
.2e5a	c9 99		cmp #$99			cmp 	#TOK_STRUCTST 				; if < structure start then continue
.2e5c	90 e5		bcc $2e43			bcc 	_SFLoop
.2e5e	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST 				; if >= unary start (after structure) then continue.
.2e60	b0 e1		bcs $2e43			bcs 	_SFLoop
.2e62	aa		tax				tax  								; token in X, and look up the adjuster.
.2e63	bd 1e 35	lda $351e,x			lda 	ELBinaryOperatorInfo-TOK_BINARYST,x
.2e66	38		sec				sec 								; convert to an offset ($FF,$01)
.2e67	e9 81		sbc #$81			sbc 	#$81
.2e69	18		clc				clc 								; add to depth
.2e6a	65 2e		adc $2e				adc 	temp2
.2e6c	85 2e		sta $2e				sta 	temp2
.2e6e	10 d3		bpl $2e43			bpl 	_SFLoop 					; +ve okay to continue
.2e70	30 07		bmi $2e79			bmi 	SFError 					; if gone -ve then we have a nesting error
.2e72	60		rts		_SFExit:rts
.2e73					_SFSpecials:
.2e73	20 7e 2e	jsr $2e7e			jsr 	ScannerSkipSpecial
.2e76	4c 43 2e	jmp $2e43			jmp 	_SFLoop
.2e79					SFError:
.2e79	a2 14		ldx #$14			ldx 	#ErrorID_Struct
.2e7b	20 18 15	jsr $1518		jsr	errorHandler
.2e7e					ScannerSkipSpecial:
.2e7e	c9 80		cmp #$80			cmp 	#TOK_EOL 					; $80, advance to next line.
.2e80	f0 10		beq $2e92			beq 	_SFNextLine
.2e82	c9 84		cmp #$84			cmp 	#TOK_FPC					; $84, skip embedded float
.2e84	f0 2b		beq $2eb1			beq 	_SFFloatSkip
.2e86	c9 85		cmp #$85			cmp 	#TOK_STR 					; $85, skip string
.2e88	f0 02		beq $2e8c			beq 	_SFSkipString
.2e8a	c8		iny				iny									; $81,$82,$83 shift, so just advance over the shifted
.2e8b	60		rts				rts 								; token.
.2e8c					_SFSkipString:
.2e8c	98		tya				tya
.2e8d	38		sec				sec
.2e8e	71 28		adc ($28),y			adc 	(codePtr),y
.2e90	a8		tay				tay
.2e91	60		rts				rts
.2e92					_SFNextLine:
.2e92	a0 00		ldy #$00			ldy 	#0 							; get offset
.2e94	b1 28		lda ($28),y			lda 	(codePtr),y
.2e96	18		clc				clc 								; add to code pointer.
.2e97	65 28		adc $28				adc 	codePtr
.2e99	85 28		sta $28				sta 	codePtr
.2e9b	90 02		bcc $2e9f			bcc		_SFNLNoCarry
.2e9d	e6 29		inc $29				inc 	codePtr+1
.2e9f					_SFNLNoCarry:
.2e9f	b1 28		lda ($28),y			lda 	(codePtr),y 				; reached the end of the program.
.2ea1	d0 0b		bne $2eae			bne		_SFXNL 						; no go round again
.2ea3	a5 2c		lda $2c				lda 	temp1
.2ea5	c9 d9		cmp #$d9			cmp 	#TKW_DATA 					; if searching for Data different error.
.2ea7	d0 d0		bne $2e79			bne 	SFError 					; read uses this to search for data statements
.2ea9	a2 1d		ldx #$1d			ldx 	#ErrorID_DataError
.2eab	20 18 15	jsr $1518		jsr	errorHandler
.2eae	a0 03		ldy #$03	_SFXNL:	ldy 	#3
.2eb0	60		rts				rts
.2eb1					_SFFloatSkip:
.2eb1	98		tya				tya 								; skip over an embedded float.
.2eb2	18		clc				clc
.2eb3	69 05		adc #$05			adc 	#FloatEmbeddedSize
.2eb5	a8		tay				tay
.2eb6	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/while.asm

.2eb7					Command_While:
.2eb7	a9 57		lda #$57			lda 	#markerWhile 				; gosub marker allocate 4 bytes.
.2eb9	a2 04		ldx #$04			ldx 	#4
.2ebb	20 35 3d	jsr $3d35			jsr 	RSClaim 					; create on stack.
.2ebe	88		dey				dey
.2ebf	a9 01		lda #$01			lda 	#1
.2ec1	20 61 3d	jsr $3d61			jsr 	RSSavePosition 				; save position before the WHILE keyword.
.2ec4	c8		iny				iny
.2ec5	20 00 36	jsr $3600			jsr 	EvaluateRootInteger			; get the conditional
.2ec8	20 c1 3c	jsr $3cc1			jsr 	MInt32Zero 	 				; if zero, skip forward to the fail code.
.2ecb	f0 01		beq $2ece			beq 	_CWFail
.2ecd	60		rts				rts
.2ece					_CWFail:
.2ece	a9 04		lda #$04			lda 	#4
.2ed0	20 57 3d	jsr $3d57			jsr 	RSFree 						; close the just opened position.
.2ed3	a9 9f		lda #$9f			lda 	#TKW_WEND 					; scan forward past WEND.
.2ed5	aa		tax				tax
.2ed6	20 3b 2e	jsr $2e3b			jsr 	ScanForward
.2ed9	60		rts				rts
.2eda					Command_Wend:
.2eda	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.2edc	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.2ede	c9 57		cmp #$57			cmp 	#markerWHILE 						; does it match
.2ee0	f0 05		beq $2ee7			beq 	_isok
.2ee2	a2 11		ldx #$11			ldx 	#ErrorID_wendErr
.2ee4	20 18 15	jsr $1518		jsr	errorHandler
.2ee7					_isok:
.2ee7	a9 01		lda #$01			lda 	#1
.2ee9	20 74 3d	jsr $3d74			jsr 	RSLoadPosition				; go back until true
.2eec	a9 04		lda #$04			lda 	#4
.2eee	20 57 3d	jsr $3d57			jsr 	RSFree 						; close the loop
.2ef1	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/system/clear.asm

.2ef2					CommandClear:
.2ef2					XCommandClear:
.2ef2	98		tya				tya
.2ef3	48		pha				pha
.2ef4	ad cc 0a	lda $0acc			lda 	endMemory					; set high memory = end of memory
.2ef7	85 33		sta $33				sta 	highMemory
.2ef9	ad cd 0a	lda $0acd			lda 	endMemory+1
.2efc	85 34		sta $34				sta 	highMemory+1
.2efe	ad c8 0a	lda $0ac8			lda 	basePage 					; work out where the program ends.
.2f01	85 2a		sta $2a				sta 	temp0
.2f03	ad c9 0a	lda $0ac9			lda 	basePage+1
.2f06	85 2b		sta $2b				sta 	temp0+1
.2f08					_CCFindEnd:
.2f08	a0 00		ldy #$00			ldy 	#0
.2f0a	b1 2a		lda ($2a),y			lda 	(temp0),y
.2f0c	f0 0c		beq $2f1a			beq 	_CCFoundEnd 				; offset zero is end.
.2f0e	18		clc				clc
.2f0f	65 2a		adc $2a				adc 	temp0 						; move to next line
.2f11	85 2a		sta $2a				sta 	temp0
.2f13	90 f3		bcc $2f08			bcc 	_CCFindEnd
.2f15	e6 2b		inc $2b				inc 	temp0+1
.2f17	4c 08 2f	jmp $2f08			jmp 	_CCFindEnd
.2f1a					_CCFoundEnd:
.2f1a	a5 2a		lda $2a				lda 	temp0 						; put temp0 in lowMemory
.2f1c	85 35		sta $35				sta 	lowMemory
.2f1e	a5 2b		lda $2b				lda 	temp0+1
.2f20	85 36		sta $36				sta 	lowMemory+1
.2f22	18		clc				clc 								; put temp0+1 in endProgram
.2f23	a5 2a		lda $2a				lda 	temp0
.2f25	69 01		adc #$01			adc 	#1
.2f27	8d ca 0a	sta $0aca			sta 	endProgram
.2f2a	a5 2b		lda $2b				lda 	temp0+1
.2f2c	69 00		adc #$00			adc 	#0
.2f2e	8d cb 0a	sta $0acb			sta 	endProgram+1
.2f31	18		clc				clc 								; put a bit of space in.
.2f32	a5 35		lda $35				lda 	lowMemory
.2f34	69 04		adc #$04			adc 	#4
.2f36	85 35		sta $35				sta 	lowMemory
.2f38	90 02		bcc $2f3c			bcc 	_CCNoCarry
.2f3a	e6 36		inc $36				inc 	lowMemory+1
.2f3c					_CCNoCarry:
.2f3c	20 27 3d	jsr $3d27			jsr 	RSReset 					; reset the return stack.
.2f3f	a2 06		ldx #$06		ldx	#6
.2f41	20 9a 4c	jsr $4c9a		jsr	variableHandler
.2f44	20 a3 2d	jsr $2da3			jsr 	ScanProc 					; scan for procedures
.2f47	20 28 27	jsr $2728			jsr 	CommandRestore 				; do a restore
.2f4a	68		pla				pla
.2f4b	a8		tay				tay
.2f4c	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/system/list.asm

.0d08					structIndent:
>0d08							.fill 	1
.2f4d					CommandList:
.2f4d	a2 00		ldx #$00			ldx		#0 							; set start/end lines in stack 0/1 to 0 and $FFFF
.2f4f	8e 08 0d	stx $0d08			stx 	structIndent
.2f52	20 9a 3c	jsr $3c9a			jsr 	MInt32False
.2f55	e8		inx				inx
.2f56	20 96 3c	jsr $3c96			jsr 	MInt32True
.2f59	b1 28		lda ($28),y			lda 	(codePtr),y 				; look at first token
.2f5b	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; list ,xxxx
.2f5d	f0 15		beq $2f74			beq 	_CLEndLine
.2f5f	c9 00		cmp #$00			cmp 	#0 							; list ... on its own.
.2f61	30 1b		bmi $2f7e			bmi 	_CLDoListing 				; do the whole lot.
.2f63	a2 00		ldx #$00			ldx 	#0 							; get start line at stack:0
.2f65	20 02 36	jsr $3602			jsr 	EvaluateInteger
.2f68	b1 28		lda ($28),y			lda 	(codePtr),y 				; , follows ?
.2f6a	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.2f6c	f0 06		beq $2f74			beq 	_CLEndLine
.2f6e	20 d8 3b	jsr $3bd8			jsr 	MInt32CopyUp 				; copy first to second if just a line number on its
.2f71	4c 7e 2f	jmp $2f7e			jmp 	_CLDoListing 				; own e.g. list 1100
.2f74					_CLEndLine:
.2f74	c8		iny				iny 								; skip comma
.2f75	b1 28		lda ($28),y			lda 	(codePtr),y  				; no number follows, then its list 1000,
.2f77	30 05		bmi $2f7e			bmi 	_CLDoListing
.2f79	a2 01		ldx #$01			ldx 	#1 							; get the last line to list
.2f7b	20 02 36	jsr $3602			jsr 	EvaluateInteger				; get end
.2f7e					_CLDoListing:
.2f7e	20 21 31	jsr $3121			jsr 	ResetCodeAddress 			; back to the start.
.2f81					_CLCheckLoop:
.2f81	a2 02		ldx #$02		ldx	#2
.2f83	20 f6 14	jsr $14f6		jsr	deviceHandler
.2f86	a0 00		ldy #$00			ldy 	#0							; check end.
.2f88	b1 28		lda ($28),y			lda 	(codePtr),y
.2f8a	f0 41		beq $2fcd			beq 	_CLEnd
.2f8c	a2 00		ldx #$00			ldx 	#0 							; compare vs lower.
.2f8e	20 d0 2f	jsr $2fd0			jsr 	CLCompareLineTOS
.2f91	c9 ff		cmp #$ff			cmp 	#255 						; if < skip
.2f93	f0 28		beq $2fbd			beq 	_CLNext
.2f95	e8		inx				inx
.2f96	20 d0 2f	jsr $2fd0			jsr 	CLCompareLineTOS 			; compare vs higher
.2f99	c9 01		cmp #$01			cmp 	#1
.2f9b	f0 20		beq $2fbd			beq 	_CLNext
.2f9d	a9 80		lda #$80			lda 	#$80 						; undo any down indents this line.
.2f9f	20 f2 2f	jsr $2ff2			jsr 	CLStructureCheck
.2fa2	ad 08 0d	lda $0d08			lda 	structIndent 				; indent level.
.2fa5	10 02		bpl $2fa9			bpl 	_CLPositive
.2fa7	a9 00		lda #$00			lda 	#0
.2fa9					_CLPositive:
.2fa9	a2 04		ldx #$04		ldx	#4
.2fab	20 c9 48	jsr $48c9		jsr	tokeniserHandler
.2fae	a9 82		lda #$82			lda 	#$82 						; up indents from this point on.
.2fb0	20 f2 2f	jsr $2ff2			jsr 	CLStructureCheck
.2fb3	ad 08 0d	lda $0d08			lda 	structIndent
.2fb6	10 05		bpl $2fbd			bpl 	_CLNext
.2fb8	a9 00		lda #$00			lda 	#0
.2fba	8d 08 0d	sta $0d08			sta 	structIndent
.2fbd					_CLNext:
.2fbd	a0 00		ldy #$00			ldy 	#0 							; go to next line.
.2fbf	b1 28		lda ($28),y			lda 	(codePtr),y
.2fc1	18		clc				clc
.2fc2	65 28		adc $28				adc 	codePtr
.2fc4	85 28		sta $28				sta 	codePtr
.2fc6	90 b9		bcc $2f81			bcc 	_CLCheckLoop
.2fc8	e6 29		inc $29				inc 	codePtr+1
.2fca	4c 81 2f	jmp $2f81			jmp 	_CLCheckLoop
.2fcd					_CLEnd:
.2fcd	4c 83 3d	jmp $3d83			jmp 	WarmStart 					; warm start after list.
.2fd0					CLCompareLineTOS:
.2fd0	a0 01		ldy #$01			ldy 	#1
.2fd2	b1 28		lda ($28),y			lda 	(codePtr),y
.2fd4	55 98		eor $98,x			eor 	esInt0,x
.2fd6	85 2a		sta $2a				sta 	temp0
.2fd8	c8		iny				iny
.2fd9	b1 28		lda ($28),y			lda 	(codePtr),y
.2fdb	55 a0		eor $a0,x			eor 	esInt1,x
.2fdd	05 2a		ora $2a				ora 	temp0
.2fdf	f0 10		beq $2ff1			beq 	_CLCLTExit
.2fe1	88		dey				dey
.2fe2	b1 28		lda ($28),y			lda 	(codePtr),y
.2fe4	d5 98		cmp $98,x			cmp 	esInt0,x
.2fe6	c8		iny				iny
.2fe7	b1 28		lda ($28),y			lda 	(codePtr),y
.2fe9	f5 a0		sbc $a0,x			sbc 	esInt1,x
.2feb	a9 ff		lda #$ff			lda 	#255
.2fed	90 02		bcc $2ff1			bcc 	_CLCLTExit
.2fef	a9 01		lda #$01			lda 	#1
.2ff1					_CLCLTExit:
.2ff1	60		rts				rts
.2ff2					CLStructureCheck:
.2ff2	85 2a		sta $2a				sta 	temp0
.2ff4	a0 03		ldy #$03			ldy 	#3
.2ff6					_CLSCLoop:
.2ff6	b1 28		lda ($28),y			lda 	(codePtr),y 				; get and consume token.
.2ff8	c8		iny				iny
.2ff9	c9 80		cmp #$80			cmp 	#$80
.2ffb	90 f9		bcc $2ff6			bcc 	_CLSCLoop 					; $00-$7F just step over.
.2ffd	f0 28		beq $3027			beq		_CLSCExit					; EOL return
.2fff	c9 86		cmp #$86			cmp 	#$86 						; special handler
.3001	90 1e		bcc $3021			bcc 	_CLSCSpecial
.3003	c9 99		cmp #$99			cmp 	#TOK_STRUCTST 				; check if structure changer.
.3005	90 ef		bcc $2ff6			bcc 	_CLSCLoop
.3007	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST
.3009	b0 eb		bcs $2ff6			bcs 	_CLSCLoop
.300b	aa		tax				tax 								; get adjustment
.300c	bd 1e 35	lda $351e,x			lda 	ELBinaryOperatorInfo-TOK_BINARYST,x
.300f	c5 2a		cmp $2a				cmp 	temp0	 					; if what we're searching for
.3011	d0 e3		bne $2ff6			bne 	_CLSCLoop
.3013	38		sec				sec
.3014	e9 81		sbc #$81			sbc 	#$81 						; convert to offset
.3016	0a		asl a				asl 	a 							; double indent step
.3017	18		clc				clc
.3018	6d 08 0d	adc $0d08			adc 	structIndent 				; add to structure indent
.301b	8d 08 0d	sta $0d08			sta 	structIndent
.301e	4c f6 2f	jmp $2ff6			jmp 	_CLSCLoop
.3021					_CLSCSpecial:
.3021	20 7e 2e	jsr $2e7e			jsr 	ScannerSkipSpecial
.3024	4c f6 2f	jmp $2ff6			jmp 	_CLSCLoop
.3027					_CLSCExit:
.3027	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/system/loadsave.asm

.3028					CommandLoad:
.3028	20 50 30	jsr $3050			jsr 	CLSParameters 					; get parameters for load.
.302b	08		php				php
.302c	a2 0e		ldx #$0e		ldx	#14
.302e	20 f6 14	jsr $14f6		jsr	deviceHandler
.3031	28		plp				plp
.3032	b0 08		bcs $303c			bcs 	_CLExit 						; if CC then load a program, so warm start.
.3034	20 f2 2e	jsr $2ef2			jsr 	CommandClear
.3037	a2 04		ldx #$04		ldx	#4
.3039	20 ea 26	jsr $26ea		jsr	interactionHandler
.303c					_CLExit
.303c	60		rts				rts
.303d					CommandSave:
.303d	20 50 30	jsr $3050			jsr 	CLSParameters					; get parameters for save
.3040	90 08		bcc $304a			bcc 	_CSNoOverrideAddress
.3042	20 1a 3d	jsr $3d1a			jsr 	CheckComma 						; should be a comma.
.3045	a2 02		ldx #$02			ldx 	#2
.3047	20 02 36	jsr $3602			jsr 	EvaluateInteger 				; get save end address.
.304a					_CSNoOverrideAddress:
.304a	a2 18		ldx #$18		ldx	#24
.304c	20 f6 14	jsr $14f6		jsr	deviceHandler
.304f	60		rts				rts
.3050					CLSParameters:
.3050	a2 00		ldx #$00			ldx 	#0 								; string
.3052	20 f7 35	jsr $35f7			jsr 	EvaluateString
.3055	e8		inx				inx 									; erase out +1 +2
.3056	20 9a 3c	jsr $3c9a			jsr 	MInt32False
.3059	e8		inx				inx
.305a	20 9a 3c	jsr $3c9a			jsr 	MInt32False
.305d	ad c8 0a	lda $0ac8			lda 	basePage 						; default start address.
.3060	85 99		sta $99				sta 	esInt0+1
.3062	ad c9 0a	lda $0ac9			lda 	basePage+1
.3065	85 a1		sta $a1				sta 	esInt1+1
.3067	ad ca 0a	lda $0aca			lda 	endProgram 						; default end address
.306a	85 9a		sta $9a				sta 	esInt0+2
.306c	ad cb 0a	lda $0acb			lda 	endProgram+1
.306f	85 a2		sta $a2				sta 	esInt1+2
.3071	b1 28		lda ($28),y			lda 	(codePtr),y 					; , following
.3073	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.3075	d0 08		bne $307f			bne 	_CLSDefault
.3077	c8		iny				iny 									; skip comma
.3078	a2 01		ldx #$01			ldx 	#1 								; get numeric value.
.307a	20 02 36	jsr $3602			jsr 	EvaluateInteger
.307d	38		sec				sec
.307e	60		rts				rts
.307f					_CLSDefault:
.307f	18		clc				clc
.3080	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/system/new.asm

.3081					Command_New:
.3081					Command_XNew:
.3081	20 21 31	jsr $3121			jsr 	ResetCodeAddress 			; point to first line
.3084	a0 00		ldy #$00			ldy 	#0 							; and zap it.
.3086	98		tya				tya
.3087	91 28		sta ($28),y			sta 	(codePtr),y
.3089	20 f2 2e	jsr $2ef2			jsr 	CommandClear 				; clear everything down.
.308c	4c 48 2a	jmp $2a48			jmp 	CommandEND 					; do END code, as there's nothing to run.

;******  Return to file: main/main.asm


;******  Processing file: main/commands/system/run.asm

.0d09					breakCounter:
>0d09								.fill 	1
.0d0a					breakIncrement:
>0d0a								.fill 	1
.308f					Command_Run:
.308f					XCommand_Run:
.308f	a2 ff		ldx #$ff			ldx 	#$FF 						; reset the stack.
.3091	9a		txs				txs
.3092	20 1b 31	jsr $311b			jsr 	BreakOn 					; turn break on
.3095	20 f2 2e	jsr $2ef2			jsr 	CommandClear 				; clear everything.
.3098	20 21 31	jsr $3121			jsr 	ResetCodeAddress 			; back to the start.
.309b					Command_RunFrom:
.309b	a0 03		ldy #$03			ldy 	#3 							; over offset/line #
.309d					CRNextInstruction:
.309d	a9 00		lda #$00			lda 	#0
.309f	85 3a		sta $3a				sta 	softMemAlloc+1
.30a1	ad 09 0d	lda $0d09			lda 	breakCounter 				; check for break.
.30a4	6d 0a 0d	adc $0d0a			adc 	breakIncrement
.30a7	8d 09 0d	sta $0d09			sta 	breakCounter
.30aa	90 05		bcc $30b1			bcc 	_CRNoChecks
.30ac	a2 02		ldx #$02		ldx	#2
.30ae	20 f6 14	jsr $14f6		jsr	deviceHandler
.30b1					_CRNoChecks
.30b1	b1 28		lda ($28),y			lda 	(codePtr),y 				; get next token.
.30b3	10 1c		bpl $30d1			bpl 	_CRNotToken
.30b5	c9 c9		cmp #$c9			cmp 	#TOK_TOKENS 				; if in the tokens then do that token.
.30b7	b0 0c		bcs $30c5			bcs 	_CRExecute
.30b9	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST 				; unary is ignored.
.30bb	b0 71		bcs $312e			bcs 	Unimplemented
.30bd	c9 99		cmp #$99			cmp 	#TOK_STRUCTST 				; execute structures.
.30bf	b0 04		bcs $30c5			bcs 	_CRExecute
.30c1	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; if one of the system tokens $80-$85 do that
.30c3	b0 16		bcs $30db			bcs 	_CRCheckIndirect 			; if in that unused range check for ! or ? or AND
.30c5					_CRExecute:
.30c5	c8		iny				iny 								; consume it.
.30c6	0a		asl a				asl 	a 							; double it, losing most significant bit.
.30c7	aa		tax				tax
.30c8	20 ce 30	jsr $30ce			jsr 	_CRRunRoutine 				; we want to do jsr (group0vectors,x)
.30cb	4c 9d 30	jmp $309d			jmp 	CRNextInstruction
.30ce					_CRRunRoutine:
.30ce	7c 38 31	jmp ($3138,x)			jmp 	(Group0Vectors,x)
.30d1					_CRNotToken:
.30d1	c9 40		cmp #$40			cmp 	#$40 						; if 0-3F then it is a letter
.30d3	b0 59		bcs $312e			bcs 	Unimplemented
.30d5					_CRDefaultLet:
.30d5	20 7b 29	jsr $297b			jsr 	CommandLet 					; do the default, LET
.30d8	4c 9d 30	jmp $309d			jmp 	CRNextInstruction
.30db					_CRCheckIndirect:
.30db	c9 86		cmp #$86			cmp 	#TKW_AND 					; AND (assembler)
.30dd	f0 0a		beq $30e9			beq 	_CRAndCommand
.30df	c9 97		cmp #$97			cmp 	#TKW_PLING 					; !<term> =
.30e1	f0 f2		beq $30d5			beq 	_CRDefaultLet
.30e3	c9 98		cmp #$98			cmp 	#TKW_QMARK 					; ?<term> =
.30e5	f0 ee		beq $30d5			beq 	_CRDefaultLet
.30e7	d0 45		bne $312e			bne 	Unimplemented
.30e9					_CRAndCommand:
.30e9	c8		iny				iny 								; skip over the AND token
.30ea	a9 95		lda #$95			lda 	#TKW_LPARENANDRPAREN 		; replace it with the pseudo-and
.30ec	20 06 31	jsr $3106			jsr 	CommandAssembler 			; do the assembler command
.30ef	4c 9d 30	jmp $309d			jmp 	CRNextInstruction 			; and loop round.
.30f2					CommandShift1:
.30f2	b1 28		lda ($28),y			lda 	(codePtr),y 				; get shifted value
.30f4	10 38		bpl $312e			bpl 	Unimplemented 				; we have an error as this should not happen.
.30f6	c8		iny				iny 								; advance over it.
.30f7	c9 94		cmp #$94			cmp 	#TKA_GROUP1 				; is it an assembler constant ?
.30f9	b0 0b		bcs $3106			bcs 	CommandAssembler
.30fb	0a		asl a				asl 	a 							; double into X
.30fc	aa		tax				tax
.30fd	7c fe 31	jmp ($31fe,x)			jmp 	(Group1Vectors-12,x) 		; and do the code.
.3100					CommandShift2:
.3100	a9 ff		lda #$ff			lda 	#$FF 						; $FF means command not unary function.
.3102	20 69 18	jsr $1869		jsr	extensionHandler
.3105	60		rts				rts
.3106					CommandAssembler:
.3106	a2 02		ldx #$02		ldx	#2
.3108	20 b4 13	jsr $13b4		jsr	assemblerHandler
.310b	60		rts				rts
.310c					CommandAssemblerLabel:
.310c	a2 04		ldx #$04		ldx	#4
.310e	20 b4 13	jsr $13b4		jsr	assemblerHandler
.3111	60		rts				rts
.3112					CommandColon:
.3112	60		rts				rts
.3113					CommandBreak:
.3113	20 00 36	jsr $3600			jsr 	EvaluateRootInteger
.3116	20 c1 3c	jsr $3cc1			jsr 	MInt32Zero
.3119	f0 02		beq $311d			beq 	BreakOff
.311b					BreakOn:
.311b	a2 08		ldx #$08			ldx 	#8
.311d					BreakOff:
.311d	8e 0a 0d	stx $0d0a			stx 	breakIncrement
.3120	60		rts				rts
.3121					ResetCodeAddress:
.3121	ad c8 0a	lda $0ac8			lda 	basePage 					; copy basePage to code Pointer
.3124	85 28		sta $28				sta 	codePtr
.3126	ad c9 0a	lda $0ac9			lda 	basePage+1
.3129	85 29		sta $29				sta 	codePtr+1
.312b	a0 03		ldy #$03			ldy 	#3 							; offset after offset link and line#
.312d	60		rts				rts
.312e					Unimplemented:
.312e	a2 01		ldx #$01			ldx 	#ErrorID_Missing
.3130	20 18 15	jsr $1518		jsr	errorHandler
.3133					TKErr01:
.3133					TKErr02:
.3133					TKErr03:
.3133					TKErr04:
.3133					TKErr05:
.3133					TKErr06:
.3133					TKErr07:
.3133					TKErr08:
.3133					TKErr09:
.3133					TKErr10:
.3133					TKErr11:
.3133					TKErr12:
.3133					TKErr13:
.3133					TKErr14:
.3133					TKErr15:
.3133	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.3135	20 18 15	jsr $1518		jsr	errorHandler

;******  Processing file: main/commands/system/../../../generated/tokenvectors0.inc

.3138					Group0Vectors:
>3138	4e 2a					.word	AdvanceNextLine          ; $80 [[eol]]
>313a	f2 30					.word	CommandShift1            ; $81 [[sh1]]
>313c	00 31					.word	CommandShift2            ; $82 [[sh2]]
>313e	33 31					.word	TKErr09                  ; $83 [[sh3]]
>3140	33 31					.word	TKErr10                  ; $84 [[fpc]]
>3142	33 31					.word	TKErr08                  ; $85 [[str]]
>3144	e7 32					.word	AndHandler               ; $86 and
>3146	d4 32					.word	OrHandler                ; $87 or
>3148	c1 32					.word	XorHandler               ; $88 xor
>314a	09 34					.word	CompareGreaterEq         ; $89 >=
>314c	13 34					.word	CompareLessEq            ; $8a <=
>314e	f5 33					.word	CompareGreater           ; $8b >
>3150	eb 33					.word	CompareLess              ; $8c <
>3152	e1 33					.word	CompareEquals            ; $8d =
>3154	ff 33					.word	CompareNotEquals         ; $8e <>
>3156	52 32					.word	AddHandler               ; $8f +
>3158	75 32					.word	SubHandler               ; $90 -
>315a	0d 33					.word	ShrHandler               ; $91 >>
>315c	fa 32					.word	ShlHandler               ; $92 <<
>315e	88 32					.word	MulHandler               ; $93 *
>3160	9b 32					.word	DivHandler               ; $94 /
>3162	ae 32					.word	ModHandler               ; $95 mod
>3164	46 33					.word	PowerHandler             ; $96 ^
>3166	20 33					.word	WordRefHandler           ; $97 !
>3168	33 33					.word	ByteRefHandler           ; $98 ?
>316a	0d 2e					.word	Command_Repeat           ; $99 repeat
>316c	b7 2e					.word	Command_While            ; $9a while
>316e	62 2a					.word	Command_FOR              ; $9b for
>3170	71 2b					.word	CommandIf                ; $9c if
>3172	33 31					.word	TKErr04                  ; $9d defproc
>3174	1a 2e					.word	Command_Until            ; $9e until
>3176	da 2e					.word	Command_Wend             ; $9f wend
>3178	c3 2a					.word	Command_NEXT             ; $a0 next
>317a	33 31					.word	TKErr06                  ; $a1 then
>317c	ac 2b					.word	Command_ENDIF            ; $a2 endif
>317e	1c 2d					.word	ReturnProc               ; $a3 endproc
>3180	6d 35					.word	UnaryParenthesis         ; $a4 (
>3182	4f 37					.word	UnaryLen                 ; $a5 len(
>3184	93 37					.word	UnarySgn                 ; $a6 sgn(
>3186	7c 37					.word	UnaryAbs                 ; $a7 abs(
>3188	ec 37					.word	Unary_Random             ; $a8 random(
>318a	36 38					.word	Unary_Page               ; $a9 page
>318c	96 3c					.word	MInt32True               ; $aa true
>318e	9a 3c					.word	MInt32False              ; $ab false
>3190	01 38					.word	Unary_Min                ; $ac min(
>3192	05 38					.word	Unary_Max                ; $ad max(
>3194	0e 39					.word	UnarySys                 ; $ae sys(
>3196	b7 38					.word	UnaryTimer               ; $af timer(
>3198	cc 36					.word	EventFunction            ; $b0 event(
>319a	e0 38					.word	UnaryGet                 ; $b1 get(
>319c	d0 38					.word	UnaryInkey               ; $b2 inkey(
>319e	87 38					.word	UnaryAlloc               ; $b3 alloc(
>31a0	47 39					.word	ExecChr                  ; $b4 chr$(
>31a2	77 39					.word	ExecLeft                 ; $b5 left$(
>31a4	94 39					.word	ExecMid                  ; $b6 mid$(
>31a6	bc 39					.word	ExecRight                ; $b7 right$(
>31a8	4e 36					.word	Event_Str                ; $b8 str$(
>31aa	7d 36					.word	UnaryVal                 ; $b9 val(
>31ac	aa 37					.word	UnaryPeek                ; $ba peek(
>31ae	b0 37					.word	UnaryDeek                ; $bb deek(
>31b0	b6 37					.word	UnaryLeek                ; $bc leek(
>31b2	6d 37					.word	UnaryAsc                 ; $bd asc(
>31b4	61 38					.word	UnaryIntToFloat          ; $be int(
>31b6	74 38					.word	UnaryFloatToInt          ; $bf float(
>31b8	80 36					.word	UnaryIsVal               ; $c0 isval(
>31ba	5e 39					.word	ExecUpper                ; $c1 upper$(
>31bc	5b 39					.word	ExecLower                ; $c2 lower$(
>31be	44 38					.word	UnaryReference           ; $c3 @
>31c0	5a 38					.word	UnaryComplement          ; $c4 ~
>31c2	57 38					.word	UnaryHexMarker           ; $c5 &
>31c4	f9 38					.word	UnaryGetString           ; $c6 get$(
>31c6	ff 38					.word	UnaryInkeyString         ; $c7 inkey$(
>31c8	36 39					.word	UnaryMem                 ; $c8 mem
>31ca	33 31					.word	TKErr01                  ; $c9 )
>31cc	12 31					.word	CommandColon             ; $ca :
>31ce	33 31					.word	TKErr02                  ; $cb ,
>31d0	33 31					.word	TKErr03                  ; $cc ;
>31d2	36 2a					.word	Command_Rem2             ; $cd '
>31d4	33 31					.word	TKErr07                  ; $ce to
>31d6	33 31					.word	TKErr05                  ; $cf step
>31d8	af 2c					.word	CallProc                 ; $d0 proc
>31da	ad 2b					.word	CommandLocal             ; $d1 local
>31dc	6d 29					.word	Command_Dim              ; $d2 dim
>31de	36 2a					.word	Command_Rem              ; $d3 rem
>31e0	7b 29					.word	CommandLet               ; $d4 let
>31e2	b7 27					.word	Command_Input            ; $d5 input
>31e4	a6 2b					.word	Command_ELSE             ; $d6 else
>31e6	3e 29					.word	Command_VDU              ; $d7 vdu
>31e8	6d 28					.word	Command_Print            ; $d8 print
>31ea	1f 27					.word	CommandData              ; $d9 data
>31ec	33 31					.word	TKErr13                  ; $da image
>31ee	33 31					.word	TKErr12                  ; $db at
>31f0	33 31					.word	TKErr14                  ; $dc flip
>31f2	5f 29					.word	Command_Assert           ; $dd assert
>31f4	f9 29					.word	Command_Poke             ; $de poke
>31f6	fd 29					.word	Command_Doke             ; $df doke
>31f8	01 2a					.word	Command_Loke             ; $e0 loke
>31fa	0e 29					.word	Command_Ink              ; $e1 ink
>31fc	19 29					.word	Command_Paper            ; $e2 paper
>31fe	08 29					.word	Command_CLS              ; $e3 cls
>3200	24 29					.word	Command_Locate           ; $e4 locate
>3202	0c 31					.word	CommandAssemblerLabel    ; $e5 .
>3204	33 31					.word	TKErr15                  ; $e6 from
>3206	33 31					.word	TKErr11                  ; $e7 #
>3208	f2 2e					.word	CommandClear             ; $e8 clear

;******  Return to file: main/commands/system/run.asm


;******  Processing file: main/commands/system/../../../generated/tokenvectors1.inc

.320a					Group1Vectors:
>320a	28 30					.word	CommandLoad              ; $86 load
>320c	3d 30					.word	CommandSave              ; $87 save
>320e	4d 2f					.word	CommandList              ; $88 list
>3210	81 30					.word	Command_New              ; $89 new
>3212	13 31					.word	CommandBreak             ; $8a break
>3214	8f 30					.word	Command_Run              ; $8b run
>3216	f4 26					.word	CommandRead              ; $8c read
>3218	28 27					.word	CommandRestore           ; $8d restore
>321a	48 2a					.word	CommandEnd               ; $8e end
>321c	43 2a					.word	CommandStop              ; $8f stop
>321e	4b 2a					.word	CommandXemu              ; $90 xemu
>3220	85 27					.word	CommandGOTO              ; $91 goto
>3222	5a 27					.word	CommandGOSUB             ; $92 gosub
>3224	6d 27					.word	CommandRETURN            ; $93 return

;******  Return to file: main/commands/system/run.asm


;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/binary/binary.asm

.3226					BinaryProcess:
.3226	b5 90		lda $90,x			lda 	esType,x 					; or type bytes together and check bit 6.
.3228	15 91		ora $91,x			ora 	esType+1,x 					; (the float bit)
.322a	0a		asl a				asl 	a
.322b	30 0e		bmi $323b			bmi 	_BPStringType 				; if bit 6 is set, then string type, error
.322d	18		clc				clc 								; return CC for integer
.322e	29 02		and #$02			and 	#$02 						; $02 because of ASL A. check original bit 1.
.3230	f0 08		beq $323a			beq 	_BPExit 					; if both integer then return with CC.
.3232	20 40 32	jsr $3240			jsr 	BPMakeBothFloat 			; make both float
.3235	a9 01		lda #$01			lda 	#$01 						; set result type to float
.3237	95 90		sta $90,x			sta 	esType,x
.3239	38		sec				sec 								; and return with carry set.
.323a					_BPExit:
.323a	60		rts				rts
.323b					_BPStringType:
.323b	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.323d	20 18 15	jsr $1518		jsr	errorHandler
.3240					BPMakeBothFloat:
.3240	e8		inx				inx
.3241	20 45 32	jsr $3245			jsr 	BPMakeFloat 				; one is a float, so we do both as floats.
.3244	ca		dex				dex
.3245					BPMakeFloat:
.3245	b5 90		lda $90,x			lda 	esType,x 					; get type bit which is in bit 0
.3247	4a		lsr a				lsr 	a
.3248	b0 07		bcs $3251			bcs 	_BPIsFloat 					; already a float if set.
.324a	8a		txa				txa
.324b	a2 1c		ldx #$1c		ldx	#28
.324d	20 fe 24	jsr $24fe		jsr	floatingpointHandler
.3250	aa		tax				tax
.3251					_BPIsFloat:
.3251	60		rts				rts
.3252					AddHandler:
.3252	20 23 34	jsr $3423			jsr 	DereferenceTwo 				; dereference top two on stack.
.3255	b5 90		lda $90,x			lda 	esType,x 					; check two strings.
.3257	35 91		and $91,x			and 	esType+1,x
.3259	29 40		and #$40			and 	#$40 						; if both have bit 6 set ... we have two strings
.325b	d0 10		bne $326d			bne 	_AHStringConcat				; concatenate strings.
.325d	20 26 32	jsr $3226			jsr 	BinaryProcess 				; check to see if either is float
.3260	b0 03		bcs $3265			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.3262	4c 7e 3b	jmp $3b7e			jmp 	MInt32Add 							; else do it as integer.
.3265					_IsFPOperation:
.3265	8a		txa				txa 								; call the relevant fp routine
.3266	a2 04		ldx #$04		ldx	#4
.3268	20 fe 24	jsr $24fe		jsr	floatingpointHandler
.326b	aa		tax				tax
.326c	60		rts				rts
.326d					_AHStringConcat:
.326d	8a		txa				txa 								; handled by the string module.
.326e	a2 06		ldx #$06		ldx	#6
.3270	20 45 40	jsr $4045		jsr	stringHandler
.3273	aa		tax				tax
.3274	60		rts				rts
.3275					SubHandler:
.3275	20 23 34	jsr $3423			jsr 	DereferenceTwo
.3278	20 26 32	jsr $3226			jsr 	BinaryProcess 				; check to see if either is float
.327b	b0 03		bcs $3280			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.327d	4c 98 3b	jmp $3b98			jmp 	MInt32Sub 							; else do it as integer.
.3280					_IsFPOperation:
.3280	8a		txa				txa 								; call the relevant fp routine
.3281	a2 12		ldx #$12		ldx	#18
.3283	20 fe 24	jsr $24fe		jsr	floatingpointHandler
.3286	aa		tax				tax
.3287	60		rts				rts
.3288					MulHandler:
.3288	20 23 34	jsr $3423			jsr 	DereferenceTwo
.328b	20 26 32	jsr $3226			jsr 	BinaryProcess 				; check to see if either is float
.328e	b0 03		bcs $3293			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.3290	4c b2 3b	jmp $3bb2			jmp 	MInt32Multiply 							; else do it as integer.
.3293					_IsFPOperation:
.3293	8a		txa				txa 								; call the relevant fp routine
.3294	a2 0c		ldx #$0c		ldx	#12
.3296	20 fe 24	jsr $24fe		jsr	floatingpointHandler
.3299	aa		tax				tax
.329a	60		rts				rts
.329b					DivHandler:
.329b	20 23 34	jsr $3423			jsr 	DereferenceTwo
.329e	20 26 32	jsr $3226			jsr 	BinaryProcess 				; check to see if either is float
.32a1	b0 03		bcs $32a6			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.32a3	4c 6f 3a	jmp $3a6f			jmp 	MInt32SDivide 							; else do it as integer.
.32a6					_IsFPOperation:
.32a6	8a		txa				txa 								; call the relevant fp routine
.32a7	a2 08		ldx #$08		ldx	#8
.32a9	20 fe 24	jsr $24fe		jsr	floatingpointHandler
.32ac	aa		tax				tax
.32ad	60		rts				rts
.32ae					ModHandler:
.32ae	20 23 34	jsr $3423			jsr 	DereferenceTwo
.32b1	20 26 32	jsr $3226			jsr 	BinaryProcess 				; check to see if either is float
.32b4	b0 03		bcs $32b9			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.32b6	4c ed 3a	jmp $3aed			jmp 	MInt32Modulus 							; else do it as integer.
.32b9					_IsFPOperation:
.32b9	8a		txa				txa 								; call the relevant fp routine
.32ba	a2 0a		ldx #$0a		ldx	#10
.32bc	20 fe 24	jsr $24fe		jsr	floatingpointHandler
.32bf	aa		tax				tax
.32c0	60		rts				rts
.32c1					XorHandler:
.32c1	20 23 34	jsr $3423			jsr 	DereferenceTwo
.32c4	20 26 32	jsr $3226			jsr 	BinaryProcess 				; check to see if either is float
.32c7	b0 03		bcs $32cc			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.32c9	4c 21 3a	jmp $3a21			jmp 	MInt32Xor 							; else do it as integer.
.32cc					_IsFPOperation:
.32cc	8a		txa				txa 								; call the relevant fp routine
.32cd	a2 0a		ldx #$0a		ldx	#10
.32cf	20 fe 24	jsr $24fe		jsr	floatingpointHandler
.32d2	aa		tax				tax
.32d3	60		rts				rts
.32d4					OrHandler:
.32d4	20 23 34	jsr $3423			jsr 	DereferenceTwo
.32d7	20 26 32	jsr $3226			jsr 	BinaryProcess 				; check to see if either is float
.32da	b0 03		bcs $32df			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.32dc	4c 08 3a	jmp $3a08			jmp 	MInt32Or 							; else do it as integer.
.32df					_IsFPOperation:
.32df	8a		txa				txa 								; call the relevant fp routine
.32e0	a2 0a		ldx #$0a		ldx	#10
.32e2	20 fe 24	jsr $24fe		jsr	floatingpointHandler
.32e5	aa		tax				tax
.32e6	60		rts				rts
.32e7					AndHandler:
.32e7	20 23 34	jsr $3423			jsr 	DereferenceTwo
.32ea	20 26 32	jsr $3226			jsr 	BinaryProcess 				; check to see if either is float
.32ed	b0 03		bcs $32f2			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.32ef	4c ef 39	jmp $39ef			jmp 	MInt32And 							; else do it as integer.
.32f2					_IsFPOperation:
.32f2	8a		txa				txa 								; call the relevant fp routine
.32f3	a2 0a		ldx #$0a		ldx	#10
.32f5	20 fe 24	jsr $24fe		jsr	floatingpointHandler
.32f8	aa		tax				tax
.32f9	60		rts				rts
.32fa					ShlHandler:
.32fa	20 23 34	jsr $3423			jsr 	DereferenceTwo
.32fd	20 26 32	jsr $3226			jsr 	BinaryProcess 				; check to see if either is float
.3300	b0 03		bcs $3305			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.3302	4c 7b 33	jmp $337b			jmp 	Mint32ShiftLeftX 							; else do it as integer.
.3305					_IsFPOperation:
.3305	8a		txa				txa 								; call the relevant fp routine
.3306	a2 0a		ldx #$0a		ldx	#10
.3308	20 fe 24	jsr $24fe		jsr	floatingpointHandler
.330b	aa		tax				tax
.330c	60		rts				rts
.330d					ShrHandler:
.330d	20 23 34	jsr $3423			jsr 	DereferenceTwo
.3310	20 26 32	jsr $3226			jsr 	BinaryProcess 				; check to see if either is float
.3313	b0 03		bcs $3318			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.3315	4c 7e 33	jmp $337e			jmp 	MInt32ShiftRightX 							; else do it as integer.
.3318					_IsFPOperation:
.3318	8a		txa				txa 								; call the relevant fp routine
.3319	a2 0a		ldx #$0a		ldx	#10
.331b	20 fe 24	jsr $24fe		jsr	floatingpointHandler
.331e	aa		tax				tax
.331f	60		rts				rts
.3320					WordRefHandler:
.3320	20 23 34	jsr $3423			jsr 	DereferenceTwo
.3323	20 26 32	jsr $3226			jsr 	BinaryProcess 				; check to see if either is float
.3326	b0 03		bcs $332b			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.3328	4c 6d 33	jmp $336d			jmp 	MInt32WordIndirect 							; else do it as integer.
.332b					_IsFPOperation:
.332b	8a		txa				txa 								; call the relevant fp routine
.332c	a2 0a		ldx #$0a		ldx	#10
.332e	20 fe 24	jsr $24fe		jsr	floatingpointHandler
.3331	aa		tax				tax
.3332	60		rts				rts
.3333					ByteRefHandler:
.3333	20 23 34	jsr $3423			jsr 	DereferenceTwo
.3336	20 26 32	jsr $3226			jsr 	BinaryProcess 				; check to see if either is float
.3339	b0 03		bcs $333e			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.333b	4c 71 33	jmp $3371			jmp 	MInt32ByteIndirect 							; else do it as integer.
.333e					_IsFPOperation:
.333e	8a		txa				txa 								; call the relevant fp routine
.333f	a2 0a		ldx #$0a		ldx	#10
.3341	20 fe 24	jsr $24fe		jsr	floatingpointHandler
.3344	aa		tax				tax
.3345	60		rts				rts
.3346					PowerHandler:
.3346	20 23 34	jsr $3423			jsr 	DereferenceTwo
.3349	20 26 32	jsr $3226			jsr 	BinaryProcess 				; check to see if either is float
.334c	b0 03		bcs $3351			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.334e	4c 59 33	jmp $3359			jmp 	PowerInteger 							; else do it as integer.
.3351					_IsFPOperation:
.3351	8a		txa				txa 								; call the relevant fp routine
.3352	a2 18		ldx #$18		ldx	#24
.3354	20 fe 24	jsr $24fe		jsr	floatingpointHandler
.3357	aa		tax				tax
.3358	60		rts				rts
.3359					PowerInteger:
.3359	20 40 32	jsr $3240			jsr 	BPMakeBothFloat				; make them float.
.335c	8a		txa				txa
.335d	a2 18		ldx #$18		ldx	#24
.335f	20 fe 24	jsr $24fe		jsr	floatingpointHandler
.3362	a2 14		ldx #$14		ldx	#20
.3364	20 fe 24	jsr $24fe		jsr	floatingpointHandler
.3367	aa		tax				tax
.3368	a9 00		lda #$00			lda 	#0 							; make type integer
.336a	95 90		sta $90,x			sta 	esType,x
.336c	60		rts				rts
.336d					Mint32WordIndirect:
.336d	a9 80		lda #$80	 		lda 	#$80 				 		; word reference type (bit 7 set)
.336f	d0 02		bne $3373			bne 	Min32Indirect
.3371					Mint32ByteIndirect:
.3371	a9 a0		lda #$a0			lda 	#$A0 						; byte reference type (bit 7, bit 5 set)
.3373					Min32Indirect:
.3373	48		pha				pha 								; save the indirection
.3374	20 7e 3b	jsr $3b7e			jsr 	MInt32Add 					; add a!b a?b
.3377	68		pla				pla 								; and set the type to reference.
.3378	95 90		sta $90,x			sta 	esType,x 	 				; so a!b => a+b and it's a reference....
.337a	60		rts				rts
.337b					Mint32ShiftLeftX:
.337b	18		clc				clc 								; CC shift left
.337c	90 01		bcc $337f			bcc 	Mint32Shift
.337e					Mint32ShiftRightX:
.337e	38		sec				sec 								; CS shift right
.337f					Mint32Shift:
.337f	08		php				php 								; save carry flag on stack.
.3380	b5 a1		lda $a1,x			lda 	esInt1+1,x 					; if shift >= 32 then it is zero.
.3382	15 a9		ora $a9,x			ora 	esInt2+1,x
.3384	15 b1		ora $b1,x			ora 	esInt3+1,x
.3386	d0 1e		bne $33a6			bne 	_MShiftZero
.3388	b5 99		lda $99,x			lda 	esInt0+1,x
.338a	c9 20		cmp #$20			cmp 	#32
.338c	b0 18		bcs $33a6			bcs 	_MShiftZero
.338e					_MShiftLoop:
.338e	b5 99		lda $99,x			lda 	esInt0+1,x 					; check count is zero
.3390	f0 12		beq $33a4			beq 	_MShiftExit
.3392	d6 99		dec $99,x			dec 	esInt0+1,x
.3394	28		plp				plp 								; restore and save carry
.3395	08		php				php
.3396	90 06		bcc $339e			bcc 	_MShiftLeft 				; and shift left/right accordingly.
.3398	20 b8 3c	jsr $3cb8			jsr 	Mint32ShiftRight
.339b	4c 8e 33	jmp $338e			jmp 	_MShiftLoop
.339e					_MShiftLeft:
.339e	20 af 3c	jsr $3caf			jsr 	Mint32ShiftLeft
.33a1	4c 8e 33	jmp $338e			jmp 	_MShiftLoop
.33a4					_MShiftExit:
.33a4	28		plp				plp	 								; throw saved carry and exit
.33a5	60		rts				rts
.33a6					_MShiftZero:
.33a6	4c 9a 3c	jmp $3c9a			jmp 	MInt32False 				; return 0 as shifted >= 32 times.

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/binary/compare.asm

.33a9					PerformComparison:
.33a9	20 23 34	jsr $3423			jsr 	DereferenceTwo 				; make both values.
.33ac	b5 90		lda $90,x			lda 	esType,x 					; check for two strings.
.33ae	35 91		and $91,x			and 	esType+1,x
.33b0	0a		asl a				asl 	a 							; bit 7 set if both bit 6s were set.
.33b1	30 1d		bmi $33d0			bmi 	_PCIsString
.33b3	b5 90		lda $90,x			lda 	esType,x 					; check either is floating point.
.33b5	15 91		ora $91,x			ora 	esType+1,x
.33b7	0a		asl a				asl 	a 							; shift bit 6 (string) to bit 7, mixed types
.33b8	30 22		bmi $33dc			bmi 	_PCError
.33ba	29 02		and #$02			and 	#$02 						; because of ASL, check type in bit 0
.33bc	f0 0f		beq $33cd			beq 	_PCIsInteger 				; if not two integers, e.g. 1 of the bits is set
.33be	20 40 32	jsr $3240			jsr 	BPMakeBothFloat 			; make both float
.33c1	8a		txa				txa
.33c2	a2 06		ldx #$06		ldx	#6
.33c4	20 fe 24	jsr $24fe		jsr	floatingpointHandler
.33c7	86 32		stx $32				stx 	tempShort 					; save result
.33c9	aa		tax				tax
.33ca	a5 32		lda $32				lda 	tempShort
.33cc	60		rts				rts
.33cd					_PCIsInteger:
.33cd	4c 3a 3a	jmp $3a3a			jmp 	MInt32Compare
.33d0					_PCIsString:
.33d0	8a		txa				txa 								; A has SP
.33d1	a2 0a		ldx #$0a		ldx	#10
.33d3	20 45 40	jsr $4045		jsr	stringHandler
.33d6	86 32		stx $32				stx 	tempShort 					; save result
.33d8	aa		tax				tax 								; put SP back in X and get result.
.33d9	a5 32		lda $32				lda 	tempShort
.33db	60		rts				rts
.33dc					_PCError:
.33dc	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.33de	20 18 15	jsr $1518		jsr	errorHandler
.33e1					CompareEquals:
.33e1	20 a9 33	jsr $33a9			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.33e4	c9 00		cmp #$00			cmp 	#$00 						; and we do something if it is = or <> a value.
.33e6	f0 35		beq $341d			beq  	CompareTrue
.33e8	4c 20 34	jmp $3420			jmp 	CompareFalse
.33eb					CompareLess:
.33eb	20 a9 33	jsr $33a9			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.33ee	c9 ff		cmp #$ff			cmp 	#$FF 						; and we do something if it is = or <> a value.
.33f0	f0 2b		beq $341d			beq  	CompareTrue
.33f2	4c 20 34	jmp $3420			jmp 	CompareFalse
.33f5					CompareGreater:
.33f5	20 a9 33	jsr $33a9			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.33f8	c9 01		cmp #$01			cmp 	#$01 						; and we do something if it is = or <> a value.
.33fa	f0 21		beq $341d			beq  	CompareTrue
.33fc	4c 20 34	jmp $3420			jmp 	CompareFalse
.33ff					CompareNotEquals:
.33ff	20 a9 33	jsr $33a9			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.3402	c9 00		cmp #$00			cmp 	#$00 						; and we do something if it is = or <> a value.
.3404	d0 17		bne $341d			bne  	CompareTrue
.3406	4c 20 34	jmp $3420			jmp 	CompareFalse
.3409					CompareGreaterEq:
.3409	20 a9 33	jsr $33a9			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.340c	c9 ff		cmp #$ff			cmp 	#$FF 						; and we do something if it is = or <> a value.
.340e	d0 0d		bne $341d			bne  	CompareTrue
.3410	4c 20 34	jmp $3420			jmp 	CompareFalse
.3413					CompareLessEq:
.3413	20 a9 33	jsr $33a9			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.3416	c9 01		cmp #$01			cmp 	#$01 						; and we do something if it is = or <> a value.
.3418	d0 03		bne $341d			bne  	CompareTrue
.341a	4c 20 34	jmp $3420			jmp 	CompareFalse
.341d					CompareTrue:
.341d	4c 96 3c	jmp $3c96			jmp 	MInt32True
.3420					CompareFalse:
.3420	4c 9a 3c	jmp $3c9a			jmp 	MInt32False

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/dereference.asm

.3423					DereferenceTwo:
.3423	e8		inx				inx
.3424	20 28 34	jsr $3428			jsr 	DereferenceOne
.3427	ca		dex				dex
.3428					DereferenceOne:
.3428	b5 90		lda $90,x			lda 	esType,x
.342a	10 3d		bpl $3469			bpl 	_DRNotReference 			; is it a reference ? if not, we don't need to do anything
.342c	4a		lsr a				lsr 	a 							; do float dereference if bit 0 set.
.342d	b0 3b		bcs $346a			bcs 	_DRFloatDeReference
.342f	98		tya				tya
.3430	48		pha				pha
.3431	b5 98		lda $98,x			lda 	esInt0,x 					; copy address to temp0
.3433	85 2a		sta $2a				sta 	temp0
.3435	b5 a0		lda $a0,x			lda 	esInt1,x
.3437	85 2b		sta $2b				sta 	temp0+1
.3439	a9 00		lda #$00			lda 	#0 							; clear esInt1..3
.343b	95 a0		sta $a0,x			sta 	esInt1,x
.343d	95 a8		sta $a8,x			sta 	esInt2,x
.343f	95 b0		sta $b0,x			sta 	esInt3,x
.3441	b5 90		lda $90,x			lda 	esType,x 					; get the type byte.
.3443	29 60		and #$60			and 	#$60 						; get string flag ($40) and byte flag ($20)
.3445	0a		asl a				asl 	a 							; now string ($80) byte ($40)
.3446	30 0d		bmi $3455			bmi 	_DeRefString 				; string, 2 bytes only
.3448	d0 11		bne $345b			bne 	_DeRefByte 					; byte 1 byte only
.344a					_DeRefLong:
.344a	a0 03		ldy #$03			ldy 	#3
.344c	b1 2a		lda ($2a),y			lda 	(temp0),y
.344e	95 b0		sta $b0,x			sta 	esInt3,x
.3450	88		dey				dey
.3451	b1 2a		lda ($2a),y			lda 	(temp0),y
.3453	95 a8		sta $a8,x			sta 	esInt2,x
.3455					_DeRefString:
.3455	a0 01		ldy #$01			ldy 	#1
.3457	b1 2a		lda ($2a),y			lda 	(temp0),y
.3459	95 a0		sta $a0,x			sta 	esInt1,x
.345b					_DeRefByte:
.345b	a0 00		ldy #$00			ldy 	#0
.345d	b1 2a		lda ($2a),y			lda 	(temp0),y
.345f	95 98		sta $98,x			sta 	esInt0,x
.3461	b5 90		lda $90,x			lda 	esType,x 					; clear byte and deref bits.
.3463	29 40		and #$40			and 	#$40
.3465	95 90		sta $90,x			sta 	esType,x
.3467	68		pla				pla
.3468	a8		tay				tay
.3469					_DRNotReference
.3469	60		rts				rts
.346a					_DRFloatDereference:
.346a	20 f0 29	jsr $29f0			jsr 	TOSToTemp0 					; address to deref in temp0
.346d	8a		txa				txa
.346e	a2 1e		ldx #$1e		ldx	#30
.3470	20 fe 24	jsr $24fe		jsr	floatingpointHandler
.3473	aa		tax				tax
.3474	a9 01		lda #$01			lda 	#$01 						; type to FP (float)
.3476	95 90		sta $90,x			sta 	esType,x
.3478	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/evaluate.asm

.3479					EvaluateLevel:
.3479	e0 08		cpx #$08			cpx 	#StackSize 					; check stack overflow
.347b	b0 1e		bcs $349b			bcs 	_ELStack
.347d	48		pha				pha 								; save precedence level.
.347e	a9 00		lda #$00			lda 	#0 							; zero the current stack level.
.3480	95 98		sta $98,x			sta 	esInt0,x
.3482	95 a0		sta $a0,x			sta 	esInt1,x
.3484	95 a8		sta $a8,x			sta 	esInt2,x
.3486	95 b0		sta $b0,x			sta 	esInt3,x
.3488	95 90		sta $90,x			sta 	esType,x 					; zero the type (integer value)
.348a	b1 28		lda ($28),y			lda 	(codePtr),y	 				; look at first token/character
.348c	30 26		bmi $34b4			bmi 	_ELIsToken 					; if -ve could be string, float, or unary function.
.348e	0a		asl a				asl 	a 							; if 00-3F then will now be PL and it's a variable.
.348f	30 0f		bmi $34a0			bmi 	_ELIsConstant 				; 40-7F will be -ve and that's an integer constant.
.3491	8a		txa				txa 								; stack level in X
.3492	a2 02		ldx #$02		ldx	#2
.3494	20 9a 4c	jsr $4c9a		jsr	variableHandler
.3497	aa		tax				tax
.3498	4c dd 34	jmp $34dd			jmp		_ELHasTerm
.349b					_ELStack:
.349b	a2 23		ldx #$23			ldx 	#ErrorID_NumStack
.349d	20 18 15	jsr $1518		jsr	errorHandler
.34a0					_ELIsConstant:
.34a0	4a		lsr a				lsr 	a 							; get the value back
.34a1	29 3f		and #$3f			and 	#$3F 						; force into range 0-63
.34a3	95 98		sta $98,x			sta 	esInt0,x 					; and put in LSB.
.34a5					_ELCheckNext:
.34a5	c8		iny				iny 								; look at next
.34a6	b1 28		lda ($28),y			lda 	(codePtr),y
.34a8	49 40		eor #$40			eor 	#$40 						; shift around so 40-7F => 00-3F
.34aa	c9 40		cmp #$40			cmp 	#$40 						; out of range ?
.34ac	b0 2f		bcs $34dd			bcs 	_ELHasTerm 					; done getting the constant.
.34ae	20 76 35	jsr $3576			jsr 	ELShiftByteIn 				; shift byte into position.
.34b1	4c a5 34	jmp $34a5			jmp 	_ELCheckNext
.34b4					_ELIsToken:
.34b4	c9 85		cmp #$85			cmp 	#TOK_STR 					; handle strings.
.34b6	f0 0f		beq $34c7			beq 	_ELIsString
.34b8	c9 84		cmp #$84			cmp 	#TOK_FPC 					; if no, then check unary.
.34ba	d0 5f		bne $351b			bne 	_ELCheckUnary
.34bc	8a		txa				txa 								; put X into A
.34bd	c8		iny				iny 								; skip over the float marker
.34be	a2 1a		ldx #$1a		ldx	#26
.34c0	20 fe 24	jsr $24fe		jsr	floatingpointHandler
.34c3	aa		tax				tax 								; restore X
.34c4	4c dd 34	jmp $34dd			jmp 	_ELHasTerm
.34c7					_ELIsString:
.34c7	98		tya				tya 								; address of string is codePtr+y+1
.34c8	38		sec				sec
.34c9	65 28		adc $28				adc 	codePtr
.34cb	95 98		sta $98,x			sta 	esInt0,x
.34cd	a5 29		lda $29				lda 	codePtr+1
.34cf	69 00		adc #$00			adc 	#0
.34d1	95 a0		sta $a0,x			sta 	esInt1,x
.34d3	a9 40		lda #$40			lda 	#$40 						; set type to string value
.34d5	95 90		sta $90,x			sta 	esType,x
.34d7	c8		iny				iny 								; skip over string.
.34d8	98		tya				tya
.34d9	38		sec				sec									; +1 for the length itself.
.34da	71 28		adc ($28),y			adc 	(codePtr),y
.34dc	a8		tay				tay 								; and fall through to term loop code.
.34dd					_ELHasTerm:
.34dd	b1 28		lda ($28),y			lda 	(codePtr),y
.34df	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; check in the correct range for binary tokens.
.34e1	90 04		bcc $34e7			bcc 	_ELPopExit
.34e3	c9 99		cmp #$99			cmp 	#TOK_STRUCTST
.34e5	90 02		bcc $34e9			bcc 	_ELHasBinaryTerm
.34e7					_ELPopExit:
.34e7	68		pla				pla
.34e8					_ELExit:
.34e8	60		rts				rts
.34e9					_ELHasBinaryTerm:
.34e9	84 32		sty $32				sty 	tempShort 					; save position
.34eb	a8		tay				tay 								; use token as an index and get the precedence.
.34ec	b9 1e 35	lda $351e,y			lda 	ELBinaryOperatorInfo-TOK_BINARYST,y
.34ef	a4 32		ldy $32				ldy 	tempShort 					; restore Y
.34f1	85 32		sta $32				sta 	tempShort 					; save precedence in memory.
.34f3	68		pla				pla 								; restore current level.
.34f4	c5 32		cmp $32				cmp 	tempShort 					; if current >= operator then exit
.34f6	b0 f0		bcs $34e8			bcs 	_ELExit
.34f8	48		pha				pha 								; save current level back on the stack.
.34f9	b1 28		lda ($28),y			lda 	(codePtr),y 				; save the binary operator on the stack and skip it.
.34fb	48		pha				pha
.34fc	c8		iny				iny
.34fd	e8		inx				inx 								; calculate the RHS at the operator precedence.
.34fe	a5 32		lda $32				lda 	tempShort
.3500	20 79 34	jsr $3479			jsr 	EvaluateLevel
.3503	ca		dex				dex
.3504	68		pla				pla 								; get the operator back out.
.3505					_ELExecuteA:
.3505	86 32		stx $32				stx 	tempShort 					; upload the vectors. Would be nice to use jmp (aaaa,x)
.3507	0a		asl a				asl 	a 							; but not practical. May use push/rts later.
.3508	aa		tax				tax
.3509	bd 38 31	lda $3138,x			lda 	Group0Vectors,x
.350c	85 2a		sta $2a				sta 	temp0
.350e	bd 39 31	lda $3139,x			lda 	Group0Vectors+1,x
.3511	85 2b		sta $2b				sta 	temp0+1
.3513	a6 32		ldx $32				ldx 	tempShort
.3515	20 62 35	jsr $3562			jsr 	_ELCallTemp0
.3518	4c dd 34	jmp $34dd			jmp 	_ELHasTerm 					; and loop back round.
.351b					_ELCheckUnary:
.351b	c8		iny				iny 								; skip over token.
.351c	c9 90		cmp #$90			cmp 	#TKW_MINUS 					; is it - term
.351e	f0 19		beq $3539			beq 	_ELMinus
.3520	c9 97		cmp #$97			cmp 	#TKW_PLING 					; is it ! or ? term
.3522	f0 2c		beq $3550			beq 	_ELIndirect
.3524	c9 98		cmp #$98			cmp 	#TKW_QMARK
.3526	f0 28		beq $3550			beq 	_ELIndirect
.3528	c9 83		cmp #$83			cmp 	#TOK_SHIFT3 				; is it the unary extension.
.352a	f0 39		beq $3565			beq 	_ELExtension
.352c	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST 				; must be TOK_UNARYST ... TOK_TOKENS
.352e	90 04		bcc $3534			bcc 	_ELUSyntax
.3530	c9 c9		cmp #$c9			cmp 	#TOK_TOKENS
.3532	90 d1		bcc $3505			bcc 	_ELExecuteA 				; if so do that token.
.3534					_ELUSyntax:
.3534	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.3536	20 18 15	jsr $1518		jsr	errorHandler
.3539					_ELMinus:
.3539	20 cb 35	jsr $35cb			jsr 	EvaluateNumericTerm 		; get a number to negate.
.353c	b5 90		lda $90,x			lda 	esType,x 					; is it integer
.353e	f0 0a		beq $354a			beq 	_ELMinusInteger
.3540	8a		txa				txa
.3541	a2 0e		ldx #$0e		ldx	#14
.3543	20 fe 24	jsr $24fe		jsr	floatingpointHandler
.3546	aa		tax				tax
.3547	4c dd 34	jmp $34dd			jmp 	_ELHasTerm
.354a					_ELMinusInteger:
.354a	20 54 3c	jsr $3c54			jsr 	MInt32Negate 				; do int negate
.354d	4c dd 34	jmp $34dd			jmp 	_ELHasTerm
.3550					_ELIndirect:
.3550	48		pha				pha 								; save what we want (TKW_QMARK TWK_PLING)
.3551	20 d4 35	jsr $35d4			jsr 	EvaluateIntegerTerm 		; integer address
.3554	68		pla				pla
.3555	49 97		eor #$97			eor 	#TKW_PLING 					; now $00 if !
.3557	f0 02		beq $355b			beq 	_ELHaveModifier
.3559	a9 20		lda #$20			lda 	#$20 						; now $00 if !, $20 if ?
.355b					_ELHaveModifier:
.355b	09 80		ora #$80			ora 	#$80						; make it the appropriate reference.
.355d	95 90		sta $90,x			sta 	esType,x 					; $80 for ! $A0 for ?
.355f	4c dd 34	jmp $34dd			jmp 	_ELHasTerm
.3562					_ELCallTemp0:
.3562	6c 2a 00	jmp ($002a)			jmp 	(temp0)
.3565					_ELExtension:
.3565	8a		txa				txa 								; stack pos in A
.3566	20 69 18	jsr $1869		jsr	extensionHandler
.3569	aa		tax				tax 								; restore stack
.356a	4c dd 34	jmp $34dd			jmp 	_ELHasTerm
.356d					UnaryParenthesis:
.356d	a9 00		lda #$00			lda 	#0 							; ( is a unary function ....
.356f	20 79 34	jsr $3479			jsr 	EvaluateLevel
.3572	20 0d 3d	jsr $3d0d			jsr 	CheckRightParen 			; check for )
.3575	60		rts				rts
.3576					ELShiftByteIn:
.3576	48		pha				pha 								; save bits to shift in.
.3577	b5 b0		lda $b0,x			lda 	esInt3,x 					; save top most byte
.3579	48		pha				pha
.357a	b5 a8		lda $a8,x			lda 	esInt2,x 					; shift everything left 8 bits
.357c	95 b0		sta $b0,x			sta 	esInt3,x
.357e	b5 a0		lda $a0,x			lda 	esInt1,x
.3580	95 a8		sta $a8,x			sta 	esInt2,x
.3582	b5 98		lda $98,x			lda 	esInt0,x
.3584	95 a0		sta $a0,x			sta 	esInt1,x
.3586	a9 00		lda #$00			lda 	#0
.3588	95 98		sta $98,x			sta 	esInt0,x
.358a	68		pla				pla 								; now A:TOS is a 5 byte register, shift right twice.
.358b	29 03		and #$03			and 	#3 							; only want lower 2 bits
.358d	09 04		ora #$04			ora 	#4  						; set bit 2 - when 1 we are done
.358f					_ELShiftLoop:
.358f	4a		lsr a				lsr 	a
.3590	76 b0		ror $b0,x			ror 	esInt3,x
.3592	76 a8		ror $a8,x			ror 	esInt2,x
.3594	76 a0		ror $a0,x			ror 	esInt1,x
.3596	76 98		ror $98,x			ror 	esInt0,x
.3598	c9 01		cmp #$01			cmp 	#1
.359a	d0 f3		bne $358f			bne 	_ELShiftLoop
.359c	68		pla				pla 								; get original 6 bit value and OR in.
.359d	29 3f		and #$3f			and 	#$3F
.359f	15 98		ora $98,x			ora 	esInt0,x
.35a1	95 98		sta $98,x			sta 	esInt0,x
.35a3	60		rts				rts
.35a4					ELBinaryOperatorInfo:

;******  Processing file: main/evaluate/../../generated/binarystructinfo.inc

>35a4	01					.byte	$01			; $86 and
>35a5	01					.byte	$01			; $87 or
>35a6	01					.byte	$01			; $88 xor
>35a7	02					.byte	$02			; $89 >=
>35a8	02					.byte	$02			; $8a <=
>35a9	02					.byte	$02			; $8b >
>35aa	02					.byte	$02			; $8c <
>35ab	02					.byte	$02			; $8d =
>35ac	02					.byte	$02			; $8e <>
>35ad	03					.byte	$03			; $8f +
>35ae	03					.byte	$03			; $90 -
>35af	04					.byte	$04			; $91 >>
>35b0	04					.byte	$04			; $92 <<
>35b1	04					.byte	$04			; $93 *
>35b2	04					.byte	$04			; $94 /
>35b3	04					.byte	$04			; $95 mod
>35b4	05					.byte	$05			; $96 ^
>35b5	06					.byte	$06			; $97 !
>35b6	06					.byte	$06			; $98 ?
>35b7	82					.byte	$82			; $99 repeat
>35b8	82					.byte	$82			; $9a while
>35b9	82					.byte	$82			; $9b for
>35ba	82					.byte	$82			; $9c if
>35bb	82					.byte	$82			; $9d defproc
>35bc	80					.byte	$80			; $9e until
>35bd	80					.byte	$80			; $9f wend
>35be	80					.byte	$80			; $a0 next
>35bf	80					.byte	$80			; $a1 then
>35c0	80					.byte	$80			; $a2 endif
>35c1	80					.byte	$80			; $a3 endproc

;******  Return to file: main/evaluate/evaluate.asm


;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/support.asm

.35c2					EvaluateTerm:
.35c2	a9 0f		lda #$0f			lda 	#15 						; no binary operator has this high a precedence.
.35c4	20 79 34	jsr $3479			jsr 	EvaluateLevel
.35c7	20 28 34	jsr $3428			jsr 	DereferenceOne
.35ca	60		rts				rts
.35cb					EvaluateNumericTerm:
.35cb	20 c2 35	jsr $35c2			jsr 	EvaluateTerm
.35ce	b5 90		lda $90,x			lda 	esType,x
.35d0	0a		asl a				asl 	a 							; see if it's a string.
.35d1	30 09		bmi $35dc			bmi 	ENTType
.35d3	60		rts				rts
.35d4					EvaluateIntegerTerm:
.35d4	20 c2 35	jsr $35c2			jsr 	EvaluateTerm
.35d7	b5 90		lda $90,x			lda 	esType,x
.35d9	d0 01		bne $35dc			bne 	ENTType
.35db	60		rts				rts
.35dc					ENTType:
.35dc	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.35de	20 18 15	jsr $1518		jsr	errorHandler
.35e1					EvaluateRoot:
.35e1	a2 00		ldx #$00			ldx 	#0
.35e3					Evaluate:
.35e3	a9 00		lda #$00			lda 	#0
.35e5	20 79 34	jsr $3479			jsr 	EvaluateLevel
.35e8	20 28 34	jsr $3428			jsr 	DereferenceOne
.35eb	60		rts				rts
.35ec					EvaluateNumeric:
.35ec	20 e3 35	jsr $35e3			jsr 	Evaluate
.35ef	b5 90		lda $90,x			lda 	esType,x
.35f1	0a		asl a				asl 	a 							; see if it's a string.
.35f2	30 e8		bmi $35dc			bmi 	ENTType
.35f4	4a		lsr a				lsr 	a 							; shift float flag into carry.
.35f5	4a		lsr a				lsr 	a
.35f6	60		rts				rts
.35f7					EvaluateString:
.35f7	20 e3 35	jsr $35e3			jsr 	Evaluate
.35fa	b5 90		lda $90,x			lda 	esType,x
.35fc	0a		asl a				asl 	a 							; see if it's a string.
.35fd	10 dd		bpl $35dc			bpl 	ENTType
.35ff	60		rts				rts
.3600					EvaluateRootInteger:
.3600	a2 00		ldx #$00			ldx 	#0
.3602					EvaluateInteger:
.3602	20 e3 35	jsr $35e3			jsr 	Evaluate
.3605	b5 90		lda $90,x			lda 	esType,x
.3607	d0 d3		bne $35dc			bne 	ENTType
.3609	60		rts				rts
.360a					EvaluateSmallInteger:
.360a	20 02 36	jsr $3602			jsr 	EvaluateInteger
.360d	b5 a0		lda $a0,x			lda 	esInt1,x
.360f	15 a8		ora $a8,x			ora 	esInt2,x
.3611	15 b0		ora $b0,x			ora 	esInt3,x
.3613	d0 03		bne $3618			bne 	_ESIValue
.3615	b5 98		lda $98,x			lda 	esInt0,x
.3617	60		rts				rts
.3618					_ESIValue:
.3618	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.361a	20 18 15	jsr $1518		jsr	errorHandler
.361d					LinkEvaluate:
.361d	aa		tax				tax
.361e	20 e3 35	jsr $35e3			jsr 	Evaluate
.3621	8a		txa				txa
.3622	60		rts				rts
.3623					LinkEvaluateTerm:
.3623	aa		tax				tax
.3624	20 c2 35	jsr $35c2			jsr 	EvaluateTerm
.3627	8a		txa				txa
.3628	60		rts				rts
.3629					LinkEvaluateInteger:
.3629	aa		tax				tax
.362a	20 02 36	jsr $3602			jsr 	EvaluateInteger
.362d	8a		txa				txa
.362e	60		rts				rts
.362f					LinkEvaluateString:
.362f	aa		tax				tax
.3630	20 f7 35	jsr $35f7			jsr 	EvaluateString
.3633	8a		txa				txa
.3634	60		rts				rts
.3635					LinkEvaluateSmallInt:
.3635	aa		tax				tax
.3636	20 0a 36	jsr $360a			jsr 	EvaluateSmallInteger
.3639	8a		txa				txa
.363a	60		rts				rts
.363b					EvaluateReference:
.363b	ad b5 35	lda $35b5			lda 	ELBinaryOperatorInfo+TKW_PLING-TOK_BINARYST
.363e	38		sec				sec 								; sub 1 to allow a!x b?x to work.
.363f	e9 01		sbc #$01			sbc 	#1
.3641	20 79 34	jsr $3479			jsr 	EvaluateLevel
.3644	b5 90		lda $90,x			lda 	esType,x
.3646	10 01		bpl $3649			bpl 	_ERFail
.3648	60		rts				rts
.3649					_ERFail:
.3649	a2 0b		ldx #$0b			ldx 	#ErrorID_NoReference
.364b	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary/convert.asm

.364e					Event_Str:
.364e	20 ec 35	jsr $35ec			jsr 	EvaluateNumeric 			; get a number.
.3651	b5 90		lda $90,x			lda 	esType,x 					; is it floating point
.3653	d0 13		bne $3668			bne 	_ESFloat
.3655	20 ab 36	jsr $36ab			jsr 	ConvertGetBase 				; get base, or default.
.3658	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.365a	85 2a		sta $2a				sta 	temp0
.365c	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.365e	85 2b		sta $2b				sta 	1+(temp0)
.3660	b5 99		lda $99,x			lda 	esInt0+1,x 					; get the base
.3662	20 f0 3b	jsr $3bf0			jsr 	MInt32ToString 				; convert to string.
.3665	4c 75 36	jmp $3675			jmp 	_ESCloneExit 				; clone and exit.
.3668					_ESFloat:
.3668	20 0d 3d	jsr $3d0d			jsr 	CheckRightParen 			; check closing )
.366b	20 f0 29	jsr $29f0			jsr 	TOSToTemp0 					; string address in temp0, goes here.
.366e	8a		txa				txa
.366f	a2 16		ldx #$16		ldx	#22
.3671	20 fe 24	jsr $24fe		jsr	floatingpointHandler
.3674	aa		tax				tax
.3675					_ESCloneExit:
.3675	8a		txa				txa
.3676	a2 04		ldx #$04		ldx	#4
.3678	20 45 40	jsr $4045		jsr	stringHandler
.367b	aa		tax				tax
.367c	60		rts				rts
.367d					UnaryVal:
.367d	38		sec				sec 								; Carry set to return value
.367e	b0 01		bcs $3681			bcs 	ValueMain
.3680					UnaryIsVal:
.3680	18		clc				clc									; Carry clear to return legitimacy
.3681					ValueMain:
.3681	08		php				php 								; save results (CS is value, CC is validation)
.3682	20 f7 35	jsr $35f7			jsr 	EvaluateString
.3685	20 ab 36	jsr $36ab			jsr 	ConvertGetBase 				; get base, if any.
.3688	98		tya				tya
.3689	48		pha				pha
.368a	20 f0 29	jsr $29f0			jsr 	TOSToTemp0 					; string address in temp0, goes here.
.368d	b5 99		lda $99,x			lda 	esInt0+1,x 					; get the base
.368f	29 7f		and #$7f			and 	#$7F 						; ignore the sign bit.
.3691	20 08 3b	jsr $3b08			jsr 	MInt32FromString 			; convert it back from a string.
.3694	b0 0c		bcs $36a2			bcs 	_VMSuccess 					; successfully converted.
.3696	b5 99		lda $99,x			lda 	esInt0+1,x 					; is base the default
.3698	c9 8a		cmp #$8a			cmp 	#$80+10 					; if no, then it is integer only.
.369a	f0 00		beq $369c			beq 	_VMFailed 	 				; so we failed.
.369c					_VMFailed:
.369c	68		pla				pla
.369d	a8		tay				tay
.369e	28		plp				plp
.369f	4c 9a 3c	jmp $3c9a			jmp 	MInt32False 				; return 0 whatever.
.36a2					_VMSuccess:
.36a2	68		pla				pla
.36a3	a8		tay				tay
.36a4	28		plp				plp 								; if CS the it was val() so we want the value.
.36a5	b0 03		bcs $36aa			bcs 	_VMExit
.36a7	4c 96 3c	jmp $3c96			jmp 	MInt32True 					; otherwise return true as successful.
.36aa					_VMExit:
.36aa	60		rts				rts
.36ab					ConvertGetBase:
.36ab	a9 8a		lda #$8a			lda 	#10+$80 					; default base 10 signed.
.36ad	95 99		sta $99,x			sta 	esInt0+1,x
.36af	b1 28		lda ($28),y			lda 	(codePtr),y 				; check for ,base)
.36b1	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.36b3	d0 0e		bne $36c3			bne 	_CGBDone 					; not found, should be )
.36b5	e8		inx				inx 								; next level
.36b6	c8		iny				iny 								; skip comma.
.36b7	20 0a 36	jsr $360a			jsr 	EvaluateSmallInteger		; evaluate the base.
.36ba	ca		dex				dex
.36bb	c9 02		cmp #$02			cmp 	#2 							; base range is 2..16
.36bd	90 08		bcc $36c7			bcc 	_CGBValue 					; (it should work as high as 37)
.36bf	c9 11		cmp #$11			cmp 	#17
.36c1	b0 04		bcs $36c7			bcs 	_CGBValue
.36c3					_CGBDone:
.36c3	20 0d 3d	jsr $3d0d			jsr 	CheckRightParen
.36c6	60		rts				rts
.36c7					_CGBValue:
.36c7	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.36c9	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary/event.asm

.36cc					EventFunction:
.36cc	20 3b 36	jsr $363b			jsr 	EvaluateReference			; get the variable reference that tracks the event
.36cf	b5 90		lda $90,x			lda 	esType,x
.36d1	c9 80		cmp #$80			cmp 	#$80 						; must be integer reference
.36d3	d0 5b		bne $3730			bne 	_EFType
.36d5	20 1a 3d	jsr $3d1a			jsr 	CheckComma
.36d8	e8		inx				inx
.36d9	20 02 36	jsr $3602			jsr 	EvaluateInteger		 		; get the elapsed time between firing.
.36dc	20 0d 3d	jsr $3d0d			jsr 	CheckRightParen 			; finish off with the right bracket
.36df	ca		dex				dex
.36e0	b5 a0		lda $a0,x			lda 	esInt1,x 					; check max of 32767, we use 16 bit for timers and
.36e2	29 80		and #$80			and 	#$80 						; it doesn't work > 32767
.36e4	15 a8		ora $a8,x			ora 	esInt2,x
.36e6	15 b0		ora $b0,x			ora 	esInt3,x
.36e8	d0 41		bne $372b			bne 	_EFValue
.36ea	98		tya				tya
.36eb	48		pha				pha
.36ec	8a		txa				txa
.36ed	48		pha				pha
.36ee	a2 1c		ldx #$1c		ldx	#28
.36f0	20 f6 14	jsr $14f6		jsr	deviceHandler
.36f3	84 2d		sty $2d				sty 	temp1+1
.36f5	85 2c		sta $2c				sta 	temp1
.36f7	68		pla				pla
.36f8	aa		tax				tax
.36f9	20 f0 29	jsr $29f0			jsr 	TOSToTemp0 					; set temp0 to the address of the event variable
.36fc	a0 03		ldy #$03			ldy 	#3							; if -ve
.36fe	b1 2a		lda ($2a),y			lda 	(temp0),y
.3700	30 23		bmi $3725			bmi 	_EFFail 	 				; straight out with fail, means "on pause".
.3702	a0 00		ldy #$00			ldy 	#0 							; is the fire time zero ?
.3704	b1 2a		lda ($2a),y			lda 	(temp0),y
.3706	c8		iny				iny
.3707	11 2a		ora ($2a),y			ora 	(temp0),y
.3709	f0 17		beq $3722			beq 	_EFInitialise 				; if so, initialise the value but return false.
.370b	a0 00		ldy #$00			ldy 	#0 							; calculate trigger - timer
.370d	38		sec				sec
.370e	b1 2a		lda ($2a),y			lda 	(temp0),y
.3710	e5 2c		sbc $2c				sbc 	temp1
.3712	c8		iny				iny
.3713	b1 2a		lda ($2a),y			lda 	(temp0),y
.3715	e5 2d		sbc $2d				sbc 	temp1+1
.3717	10 0c		bpl $3725			bpl 	_EFFail 					; if trigger >= timer then return False
.3719	20 35 37	jsr $3735			jsr 	SetEventTimer 				; reset the timer for next time.
.371c	20 96 3c	jsr $3c96			jsr	 	MInt32True 					; and treutn true as fired.
.371f	68		pla				pla
.3720	a8		tay				tay
.3721	60		rts				rts
.3722					_EFInitialise:
.3722	20 35 37	jsr $3735			jsr		SetEventTimer 				; set trigger time to time + elapsed
.3725					_EFFail:
.3725	68		pla				pla
.3726	a8		tay				tay
.3727	20 9a 3c	jsr $3c9a			jsr 	MInt32False
.372a	60		rts				rts
.372b					_EFValue:
.372b	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.372d	20 18 15	jsr $1518		jsr	errorHandler
.3730					_EFType:
.3730	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.3732	20 18 15	jsr $1518		jsr	errorHandler
.3735					SetEventTimer:
.3735	a0 00		ldy #$00			ldy 	#0
.3737	18		clc				clc
.3738	a5 2c		lda $2c				lda 	temp1
.373a	75 99		adc $99,x			adc 	esInt0+1,x
.373c	91 2a		sta ($2a),y			sta		(temp0),y
.373e	c8		iny				iny
.373f	a5 2d		lda $2d				lda 	temp1+1
.3741	75 a1		adc $a1,x			adc 	esInt1+1,x
.3743	91 2a		sta ($2a),y			sta		(temp0),y
.3745	88		dey				dey
.3746	11 2a		ora ($2a),y			ora 	(temp0),y 					; if the result is non zero, exit
.3748	d0 04		bne $374e			bne 	_SETExit 					; zero means initialise.....
.374a	a9 01		lda #$01			lda 	#1 							; timer zero won't work, so make it 1, which is
.374c	91 2a		sta ($2a),y			sta 	(temp0),y 					; near enough.
.374e					_SETExit:
.374e	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary/unary.asm

.374f					UnaryLen:
.374f	20 5d 37	jsr $375d			jsr 	ULStart
.3752					ULFinish:
.3752	b1 2a		lda ($2a),y			lda 	(temp0),y 					; get length prefix
.3754	a4 32		ldy $32				ldy 	tempShort 					; get Y back
.3756	20 a9 3c	jsr $3ca9			jsr 	MInt32Set8Bit 				; write it out.
.3759	20 0d 3d	jsr $3d0d			jsr 	CheckRightParen
.375c	60		rts				rts
.375d	20 f7 35	jsr $35f7	ULStart:jsr 	EvaluateString
.3760	b5 98		lda $98,x			lda 	esInt0,x 					; copy address of string to temp0
.3762	85 2a		sta $2a				sta 	temp0
.3764	b5 a0		lda $a0,x			lda 	esInt1,x
.3766	85 2b		sta $2b				sta 	temp0+1
.3768	84 32		sty $32				sty 	tempShort 					; get length
.376a	a0 00		ldy #$00			ldy 	#0
.376c	60		rts				rts
.376d					UnaryAsc:
.376d	20 5d 37	jsr $375d			jsr 	ULStart 					; same as LEN() get string, save Y, point to length.
.3770	b1 2a		lda ($2a),y			lda 	(temp0),y 					; read length
.3772	c8		iny				iny 		 						; point to first character, we can do LEN code after that
.3773	c9 00		cmp #$00			cmp 	#0
.3775	d0 db		bne $3752			bne 	ULFinish 					; if length = 0 then error : asc("") -> error.
.3777	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.3779	20 18 15	jsr $1518		jsr	errorHandler
.377c					UnaryAbs:
.377c	20 ec 35	jsr $35ec			jsr 	EvaluateNumeric 			; some numeric value
.377f	b0 07		bcs $3788			bcs 	_UAFloat 					; CS then float, so use that function
.3781	20 4f 3c	jsr $3c4f			jsr 	MInt32Absolute 				; int version
.3784	20 0d 3d	jsr $3d0d			jsr 	CheckRightParen
.3787	60		rts				rts
.3788					_UAFloat:
.3788	8a		txa				txa 								; float version
.3789	a2 02		ldx #$02		ldx	#2
.378b	20 fe 24	jsr $24fe		jsr	floatingpointHandler
.378e	aa		tax				tax
.378f	20 0d 3d	jsr $3d0d			jsr 	CheckRightParen
.3792	60		rts				rts
.3793					UnarySgn:
.3793	20 ec 35	jsr $35ec			jsr 	EvaluateNumeric 			; same as above but sign of value
.3796	b0 07		bcs $379f			bcs 	_USFloat
.3798	20 87 3c	jsr $3c87			jsr 	MInt32Sign
.379b	20 0d 3d	jsr $3d0d			jsr 	CheckRightParen
.379e	60		rts				rts
.379f					_USFloat:
.379f	8a		txa				txa
.37a0	a2 10		ldx #$10		ldx	#16
.37a2	20 fe 24	jsr $24fe		jsr	floatingpointHandler
.37a5	aa		tax				tax
.37a6	20 0d 3d	jsr $3d0d			jsr 	CheckRightParen
.37a9	60		rts				rts
.37aa					UnaryPeek:
.37aa	20 d6 37	jsr $37d6			jsr 	PDLCode 					; each has common setup code put reads 1,2 or 4 bytes
.37ad	4c ca 37	jmp $37ca			jmp 	PDLByte0
.37b0					UnaryDeek:
.37b0	20 d6 37	jsr $37d6			jsr 	PDLCode
.37b3	4c c4 37	jmp $37c4			jmp 	PDLByte1
.37b6					UnaryLeek:
.37b6	20 d6 37	jsr $37d6			jsr 	PDLCode
.37b9	a0 03		ldy #$03			ldy 	#3							; read 3-2
.37bb	b1 2a		lda ($2a),y			lda 	(temp0),y
.37bd	95 b0		sta $b0,x			sta 	esInt3,x
.37bf	88		dey				dey
.37c0	b1 2a		lda ($2a),y			lda 	(temp0),y
.37c2	95 a8		sta $a8,x			sta 	esInt2,x
.37c4					PDLByte1:
.37c4	a0 01		ldy #$01			ldy 	#1
.37c6	b1 2a		lda ($2a),y			lda 	(temp0),y
.37c8	95 a0		sta $a0,x			sta 	esInt1,x
.37ca					PDLByte0:
.37ca	a0 00		ldy #$00			ldy 	#0
.37cc	b1 2a		lda ($2a),y			lda 	(temp0),y
.37ce	95 98		sta $98,x			sta 	esInt0,x
.37d0	a4 32		ldy $32				ldy 	tempShort 					; restore Y
.37d2	20 0d 3d	jsr $3d0d			jsr 	CheckRightParen 			; check right and return
.37d5	60		rts				rts
.37d6					PDLCode:
.37d6	20 02 36	jsr $3602			jsr 	EvaluateInteger 			; some address
.37d9	b5 98		lda $98,x			lda 	esInt0,x 					; copy address of string to temp0
.37db	85 2a		sta $2a				sta 	temp0
.37dd	b5 a0		lda $a0,x			lda 	esInt1,x
.37df	85 2b		sta $2b				sta 	temp0+1
.37e1	a9 00		lda #$00			lda 	#0 							; zero upper 3 bytes of result, type okay.
.37e3	95 a0		sta $a0,x			sta 	esInt1,x 					; PEEK needs upper 3 cleared
.37e5	95 a8		sta $a8,x			sta 	esInt2,x
.37e7	95 b0		sta $b0,x			sta 	esInt3,x
.37e9	84 32		sty $32				sty 	tempShort 					; save Y
.37eb	60		rts				rts
.37ec					Unary_Random:
.37ec	20 ca 3c	jsr $3cca			jsr 	MInt32Random 				; generate random number.
.37ef	b1 28		lda ($28),y			lda 	(codePtr),y 				; check followed by )
.37f1	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.37f3	f0 08		beq $37fd			beq 	_URExit
.37f5	e8		inx				inx 								; load range 0..r-1 into +1
.37f6	20 02 36	jsr $3602			jsr 	EvaluateInteger
.37f9	ca		dex				dex
.37fa	20 ed 3a	jsr $3aed			jsr 	MInt32Modulus 				; calculate random % modulus
.37fd					_URExit:
.37fd	20 0d 3d	jsr $3d0d			jsr 	CheckRightParen 			; check right and return
.3800	60		rts				rts
.3801					Unary_Min:
.3801	a9 01		lda #$01			lda 	#1 							; c1 cmp c2 needs to be > e.g. c1 > c2
.3803	d0 02		bne $3807			bne 	UnaryMBody
.3805					Unary_Max:
.3805	a9 ff		lda #$ff			lda 	#$FF 						; c1 cmp c2 needs to be < e.g. c1 < c2
.3807					UnaryMBody:
.3807	48		pha				pha 								; save comparator on stack, shows min or max
.3808	20 e3 35	jsr $35e3			jsr 	Evaluate 					; get the first thing to check
.380b					_UnaryMLoop:
.380b	b1 28		lda ($28),y			lda 	(codePtr),y 				; found ), indicates end.
.380d	c8		iny				iny
.380e	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.3810	f0 09		beq $381b			beq 	_UnaryMExit
.3812	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; found , indicates more.
.3814	f0 07		beq $381d			beq 	_UnaryMCompare
.3816	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.3818	20 18 15	jsr $1518		jsr	errorHandler
.381b					_UnaryMExit:
.381b	68		pla				pla 								; done so throw comparator and return.
.381c	60		rts				rts
.381d					_UnaryMCompare:
.381d	e8		inx				inx 								; get the 2nd thing to evaluate
.381e	20 e3 35	jsr $35e3			jsr 	Evaluate
.3821	ca		dex				dex
.3822	20 a9 33	jsr $33a9			jsr 	PerformComparison 			; this is part of evaluate/compare.asm
.3825	85 32		sta $32				sta 	tempShort 					; save result
.3827	68		pla				pla 								; get what we need
.3828	48		pha				pha
.3829	c5 32		cmp $32				cmp 	tempShort 					; did we get it
.382b	d0 de		bne $380b			bne 	_UnaryMLoop 				; no, try another value.
.382d	20 9a 3c	jsr $3c9a			jsr 	MInt32False 				; promote 2nd to 1st.
.3830	20 7e 3b	jsr $3b7e			jsr 	MInt32Add
.3833	4c 0b 38	jmp $380b			jmp 	_UnaryMLoop
.3836					Unary_Page:
.3836	20 9a 3c	jsr $3c9a			jsr 	MInt32False 				; zero
.3839	ad c8 0a	lda $0ac8			lda 	basePage 					; copy base page address in.
.383c	95 98		sta $98,x			sta 	esInt0,x
.383e	ad c9 0a	lda $0ac9			lda 	basePage+1
.3841	95 a0		sta $a0,x			sta 	esInt1,x
.3843	60		rts				rts
.3844					UnaryReference:
.3844	a9 0f		lda #$0f			lda 	#15
.3846	20 79 34	jsr $3479			jsr 	EvaluateLevel 				; evaluate term and don't deference.
.3849	b5 90		lda $90,x			lda 	esType,x 					; check it's a reference.
.384b	10 05		bpl $3852			bpl 	UType
.384d	a9 00		lda #$00			lda 	#0 							; make it an integer
.384f	95 90		sta $90,x			sta 	esType,x
.3851	60		rts				rts
.3852					UType:
.3852	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.3854	20 18 15	jsr $1518		jsr	errorHandler
.3857					UnaryHexMarker:
.3857	4c d4 35	jmp $35d4			jmp 	EvaluateIntegerTerm
.385a					UnaryComplement:
.385a	20 d4 35	jsr $35d4			jsr 	EvaluateIntegerTerm
.385d	20 6e 3c	jsr $3c6e			jsr 	MInt32Not
.3860	60		rts				rts
.3861					UnaryIntToFloat:
.3861	20 ec 35	jsr $35ec			jsr 	EvaluateNumeric				; some number
.3864	b5 90		lda $90,x			lda 	esType,x 					; if float already, exit
.3866	d0 0b		bne $3873			bne 	_UIFExit
.3868	8a		txa				txa 								; convert and set type
.3869	a2 1c		ldx #$1c		ldx	#28
.386b	20 fe 24	jsr $24fe		jsr	floatingpointHandler
.386e	aa		tax				tax
.386f	a9 01		lda #$01			lda 	#1
.3871	95 90		sta $90,x			sta 	esType,x
.3873					_UIFExit:
.3873	60		rts				rts
.3874					UnaryFloatToInt:
.3874	20 ec 35	jsr $35ec			jsr 	EvaluateNumeric 			; the number
.3877	b5 90		lda $90,x			lda 	esType,x 					; if int already exit
.3879	f0 0b		beq $3886			beq 	_UFIExit
.387b	8a		txa				txa 								; convert to int
.387c	a2 14		ldx #$14		ldx	#20
.387e	20 fe 24	jsr $24fe		jsr	floatingpointHandler
.3881	aa		tax				tax
.3882	a9 00		lda #$00			lda 	#0 							; set type
.3884	95 90		sta $90,x			sta 	esType,x
.3886					_UFIExit:
.3886	60		rts				rts
.3887					UnaryAlloc:
.3887	e8		inx				inx 								; evaluate memory required
.3888	20 02 36	jsr $3602			jsr 	EvaluateInteger
.388b	20 0d 3d	jsr $3d0d			jsr 	CheckRightParen
.388e	ca		dex				dex
.388f	b5 a9		lda $a9,x			lda 	esInt2+1,x 					; check at least in 64k range.
.3891	15 b1		ora $b1,x			ora 	esInt3+1,x
.3893	d0 1d		bne $38b2			bne 	_UABadValue
.3895	20 9a 3c	jsr $3c9a			jsr 	MInt32False					; zero return.
.3898	a5 36		lda $36				lda 	lowMemory+1 				; copy low memory in
.389a	95 a0		sta $a0,x			sta 	esInt1,x
.389c	a5 35		lda $35				lda 	lowMemory
.389e	95 98		sta $98,x			sta 	esInt0,x
.38a0	18		clc				clc 								; add alloc required.
.38a1	75 99		adc $99,x			adc 	esInt0+1,x
.38a3	85 35		sta $35				sta 	lowMemory
.38a5	a5 36		lda $36				lda 	lowMemory+1
.38a7	75 a1		adc $a1,x			adc 	esInt1+1,x
.38a9	85 36		sta $36				sta 	lowMemory+1
.38ab	b0 05		bcs $38b2			bcs		_UABadValue 				; overflow definitely bad.
.38ad	c5 34		cmp $34				cmp 	highMemory+1
.38af	b0 01		bcs $38b2			bcs 	_UABadValue 				; out of memory bad.
.38b1	60		rts				rts
.38b2					_UABadValue:
.38b2	a2 22		ldx #$22			ldx 	#ErrorID_Memory
.38b4	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary/unary2.asm

.38b7					UnaryTimer:
.38b7	20 0d 3d	jsr $3d0d			jsr 	CheckRightParen 			; no parameters
.38ba	98		tya				tya
.38bb	48		pha				pha
.38bc	20 c1 3c	jsr $3cc1			jsr 	MInt32Zero 					; zero result
.38bf	86 2a		stx $2a				stx 	temp0 						; returning in YA so can't use .pshx
.38c1	a2 1c		ldx #$1c		ldx	#28
.38c3	20 f6 14	jsr $14f6		jsr	deviceHandler
.38c6	a6 2a		ldx $2a				ldx 	temp0						; restore X and update 16 bit result
.38c8	95 98		sta $98,x			sta 	esInt0,x
.38ca	98		tya				tya
.38cb	95 a0		sta $a0,x			sta 	esInt1,x
.38cd	68		pla				pla
.38ce	a8		tay				tay
.38cf	60		rts				rts
.38d0					UnaryInkey:
.38d0	20 0d 3d	jsr $3d0d			jsr 	CheckRightParen
.38d3	86 2a		stx $2a				stx 	temp0
.38d5	a2 0a		ldx #$0a		ldx	#10
.38d7	20 f6 14	jsr $14f6		jsr	deviceHandler
.38da	a6 2a		ldx $2a				ldx 	temp0
.38dc	20 a9 3c	jsr $3ca9			jsr 	MInt32Set8Bit
.38df	60		rts				rts
.38e0					UnaryGet:
.38e0	20 0d 3d	jsr $3d0d			jsr 	CheckRightParen
.38e3	86 2a		stx $2a				stx 	temp0
.38e5					_UGLoop:
.38e5	a2 02		ldx #$02		ldx	#2
.38e7	20 f6 14	jsr $14f6		jsr	deviceHandler
.38ea	a2 0a		ldx #$0a		ldx	#10
.38ec	20 f6 14	jsr $14f6		jsr	deviceHandler
.38ef	c9 00		cmp #$00			cmp 	#0
.38f1	f0 f2		beq $38e5			beq 	_UGLoop
.38f3	a6 2a		ldx $2a				ldx 	temp0
.38f5	20 a9 3c	jsr $3ca9			jsr 	MInt32Set8Bit
.38f8	60		rts				rts
.38f9					UnaryGetString:
.38f9	20 e0 38	jsr $38e0			jsr 	UnaryGet
.38fc					UGSDoChr:
.38fc	4c 4d 39	jmp $394d			jmp 	ChrCode
.38ff					UnaryInkeyString:
.38ff	20 d0 38	jsr $38d0			jsr 	UnaryInkey
.3902	b5 98		lda $98,x			lda 	esInt0,x
.3904	d0 f6		bne $38fc			bne 	UGSDoChr
.3906	8a		txa				txa
.3907	a2 08		ldx #$08		ldx	#8
.3909	20 45 40	jsr $4045		jsr	stringHandler
.390c	aa		tax				tax
.390d	60		rts				rts
.390e					UnarySys:
.390e	20 02 36	jsr $3602			jsr 	EvaluateInteger 				; get the address
.3911	20 0d 3d	jsr $3d0d			jsr 	CheckRightParen
.3914	20 f0 29	jsr $29f0			jsr 	TOSToTemp0 						; copy call address to temp0
.3917	8a		txa				txa
.3918	48		pha				pha
.3919	98		tya				tya
.391a	48		pha				pha
.391b	ad 00 0a	lda $0a00			lda 	("A"-"A")*4+SingleLetterVar 	; load AXY
.391e	ae 5c 0a	ldx $0a5c			ldx 	("X"-"A")*4+SingleLetterVar
.3921	ac 60 0a	ldy $0a60			ldy 	("Y"-"A")*4+SingleLetterVar
.3924	20 33 39	jsr $3933			jsr 	_CallTemp0
.3927	85 32		sta $32				sta 	tempShort 						; restore YX
.3929	68		pla				pla
.392a	a8		tay				tay
.392b	68		pla				pla
.392c	aa		tax				tax
.392d	a5 32		lda $32				lda 	tempShort
.392f	20 a9 3c	jsr $3ca9			jsr 	MInt32Set8Bit 					; return result.
.3932	60		rts				rts
.3933					_CallTemp0:
.3933	6c 2a 00	jmp ($002a)			jmp 	(temp0)
.3936					UnaryMem:
.3936	20 9a 3c	jsr $3c9a			jsr 	MInt32False 					; set to false (e.g. 0)
.3939	38		sec				sec
.393a	a5 33		lda $33				lda 	highMemory 						; calculate value
.393c	e5 35		sbc $35				sbc 	lowMemory
.393e	95 98		sta $98,x			sta 	esInt0,x
.3940	a5 34		lda $34				lda 	highMemory+1
.3942	e5 36		sbc $36				sbc 	lowMemory+1
.3944	95 a0		sta $a0,x			sta 	esInt1,x
.3946	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary/unarystr.asm

.3947					ExecChr:
.3947	20 0a 36	jsr $360a			jsr 	EvaluateSmallInteger		; character number 0-255
.394a	20 0d 3d	jsr $3d0d			jsr 	CheckRightParen				; right bracket
.394d					ChrCode:
.394d	98		tya				tya
.394e	48		pha				pha
.394f	8a		txa				txa 								; A = stack
.3950	b4 98		ldy $98,x			ldy 	esInt0,x					; Y = character
.3952	a2 02		ldx #$02		ldx	#2
.3954	20 45 40	jsr $4045		jsr	stringHandler
.3957	aa		tax				tax 								; X = stack
.3958	68		pla				pla
.3959	a8		tay				tay
.395a	60		rts				rts
.395b					ExecLower:
.395b	38		sec				sec 								; set carry is lower
.395c	b0 01		bcs $395f			bcs 	ExecUpperLower
.395e					ExecUpper:
.395e	18		clc				clc 								; clear carry is upper
.395f					ExecUpperLower:
.395f	08		php				php 								; save carry
.3960	20 f7 35	jsr $35f7			jsr 	EvaluateString 				; string to stack,X
.3963	20 0d 3d	jsr $3d0d			jsr 	CheckRightParen 			; check closing right bracket.
.3966	28		plp				plp 								; restore carry, save Y
.3967	98		tya				tya
.3968	48		pha				pha
.3969	a9 00		lda #$00			lda 	#0 							; A zero if upper, 1 if lower.
.396b	2a		rol a				rol 	a
.396c	a8		tay				tay 								; now in Y
.396d	8a		txa				txa 								; do the substring and exit.
.396e	a2 0c		ldx #$0c		ldx	#12
.3970	20 45 40	jsr $4045		jsr	stringHandler
.3973	aa		tax				tax
.3974	68		pla				pla
.3975	a8		tay				tay
.3976	60		rts				rts
.3977					ExecLeft:
.3977	20 f7 35	jsr $35f7			jsr 	EvaluateString 				; string to stack,X
.397a	20 1a 3d	jsr $3d1a			jsr 	CheckComma
.397d	e8		inx				inx
.397e	a9 01		lda #$01			lda 	#1 							; 1 for 2nd parameter.
.3980	20 a9 3c	jsr $3ca9			jsr 	MInt32Set8Bit
.3983	e8		inx				inx
.3984	20 0a 36	jsr $360a			jsr 	EvaluateSmallInteger 		; smallint 3rd parameter
.3987					ExecSubstring:
.3987	ca		dex				dex 								; fix up X
.3988	ca		dex				dex
.3989	20 0d 3d	jsr $3d0d			jsr 	CheckRightParen 			; check closing right bracket.
.398c	8a		txa				txa 								; do the substring and exit.
.398d	a2 0e		ldx #$0e		ldx	#14
.398f	20 45 40	jsr $4045		jsr	stringHandler
.3992	aa		tax				tax
.3993	60		rts				rts
.3994					ExecMid:
.3994	20 f7 35	jsr $35f7			jsr 	EvaluateString 				; string to stack,X
.3997	20 1a 3d	jsr $3d1a			jsr 	CheckComma
.399a	e8		inx				inx
.399b	20 0a 36	jsr $360a			jsr 	EvaluateSmallInteger 		; smallint 2nd parameter
.399e	c9 00		cmp #$00			cmp 	#0
.39a0	f0 15		beq $39b7			beq 	_EMValue
.39a2	e8		inx				inx
.39a3	a9 ff		lda #$ff			lda 	#255 						; 255 default for 3nd parameter - this is optional.
.39a5	20 a9 3c	jsr $3ca9			jsr 	MInt32Set8Bit
.39a8	b1 28		lda ($28),y			lda 	(codePtr),y 				; is there a ) next
.39aa	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN 				; if so, just MID$(a$,2)
.39ac	f0 d9		beq $3987			beq 	ExecSubString
.39ae	20 1a 3d	jsr $3d1a			jsr 	CheckComma
.39b1	20 0a 36	jsr $360a			jsr 	EvaluateSmallInteger 		; smallint 2nd parameter
.39b4	4c 87 39	jmp $3987			jmp 	ExecSubString
.39b7					_EMValue:
.39b7	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.39b9	20 18 15	jsr $1518		jsr	errorHandler
.39bc					ExecRight:
.39bc	20 f7 35	jsr $35f7			jsr 	EvaluateString 				; string to stack,X
.39bf	20 1a 3d	jsr $3d1a			jsr 	CheckComma
.39c2	e8		inx				inx
.39c3	20 0a 36	jsr $360a			jsr 	EvaluateSmallInteger 		; smallint 2nd parameter.
.39c6	ca		dex				dex
.39c7	98		tya				tya
.39c8	48		pha				pha
.39c9	b5 98		lda $98,x			lda 	esInt0,x 					; copy address of string to temp0
.39cb	85 2a		sta $2a				sta 	temp0
.39cd	b5 a0		lda $a0,x			lda 	esInt1,x
.39cf	85 2b		sta $2b				sta 	temp0+1
.39d1	a0 00		ldy #$00			ldy 	#0 							; point to length
.39d3	b1 2a		lda ($2a),y			lda 	(temp0),y 					; get the length.
.39d5	18		clc				clc 								; add 1.
.39d6	69 01		adc #$01			adc 	#1
.39d8	38		sec				sec
.39d9	f5 99		sbc $99,x			sbc 	esInt0+1,x  				; subtract right count.
.39db	f0 02		beq $39df			beq		_ERMake1 					; if zero, make it 1.
.39dd	b0 02		bcs $39e1			bcs		_EROkay
.39df					_ERMake1:
.39df	a9 01		lda #$01			lda 	#1 							; start position.
.39e1					_EROkay:
.39e1	e8		inx				inx 								; set start pos.
.39e2	95 98		sta $98,x			sta 	esInt0,x
.39e4	e8		inx				inx
.39e5	a9 ff		lda #$ff			lda 	#255 						; 255 default for 3nd parameter.
.39e7	20 a9 3c	jsr $3ca9			jsr 	MInt32Set8Bit
.39ea	68		pla				pla
.39eb	a8		tay				tay
.39ec	4c 87 39	jmp $3987			jmp 	ExecSubString 				; do the substring code.

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32binary.asm

.39ef					MInt32And:
.39ef	b5 98		lda $98,x			lda 	esInt0,x
.39f1	35 99		and $99,x			and 	esInt0+1,x
.39f3	95 98		sta $98,x			sta 	esInt0,x
.39f5	b5 a0		lda $a0,x			lda 	esInt1,x
.39f7	35 a1		and $a1,x			and 	esInt1+1,x
.39f9	95 a0		sta $a0,x			sta 	esInt1,x
.39fb	b5 a8		lda $a8,x			lda 	esInt2,x
.39fd	35 a9		and $a9,x			and 	esInt2+1,x
.39ff	95 a8		sta $a8,x			sta 	esInt2,x
.3a01	b5 b0		lda $b0,x			lda 	esInt3,x
.3a03	35 b1		and $b1,x			and 	esInt3+1,x
.3a05	95 b0		sta $b0,x			sta 	esInt3,x
.3a07	60		rts				rts
.3a08					MInt32Or:
.3a08	b5 98		lda $98,x			lda 	esInt0,x
.3a0a	15 99		ora $99,x			ora 	esInt0+1,x
.3a0c	95 98		sta $98,x			sta 	esInt0,x
.3a0e	b5 a0		lda $a0,x			lda 	esInt1,x
.3a10	15 a1		ora $a1,x			ora 	esInt1+1,x
.3a12	95 a0		sta $a0,x			sta 	esInt1,x
.3a14	b5 a8		lda $a8,x			lda 	esInt2,x
.3a16	15 a9		ora $a9,x			ora 	esInt2+1,x
.3a18	95 a8		sta $a8,x			sta 	esInt2,x
.3a1a	b5 b0		lda $b0,x			lda 	esInt3,x
.3a1c	15 b1		ora $b1,x			ora 	esInt3+1,x
.3a1e	95 b0		sta $b0,x			sta 	esInt3,x
.3a20	60		rts				rts
.3a21					MInt32Xor:
.3a21	b5 98		lda $98,x			lda 	esInt0,x
.3a23	55 99		eor $99,x			eor 	esInt0+1,x
.3a25	95 98		sta $98,x			sta 	esInt0,x
.3a27	b5 a0		lda $a0,x			lda 	esInt1,x
.3a29	55 a1		eor $a1,x			eor 	esInt1+1,x
.3a2b	95 a0		sta $a0,x			sta 	esInt1,x
.3a2d	b5 a8		lda $a8,x			lda 	esInt2,x
.3a2f	55 a9		eor $a9,x			eor 	esInt2+1,x
.3a31	95 a8		sta $a8,x			sta 	esInt2,x
.3a33	b5 b0		lda $b0,x			lda 	esInt3,x
.3a35	55 b1		eor $b1,x			eor 	esInt3+1,x
.3a37	95 b0		sta $b0,x			sta 	esInt3,x
.3a39	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32compare.asm

.3a3a					MInt32Compare:
.3a3a	b5 98		lda $98,x			lda 	esInt0,x 					; equality check first.
.3a3c	d5 99		cmp $99,x			cmp 	esInt0+1,x
.3a3e	d0 13		bne $3a53			bne 	MInt32Compare2
.3a40	b5 a0		lda $a0,x			lda 	esInt1,x
.3a42	d5 a1		cmp $a1,x			cmp 	esInt1+1,x
.3a44	d0 0d		bne $3a53			bne 	MInt32Compare2
.3a46	b5 a8		lda $a8,x			lda 	esInt2,x
.3a48	d5 a9		cmp $a9,x			cmp 	esInt2+1,x
.3a4a	d0 07		bne $3a53			bne 	MInt32Compare2
.3a4c	b5 b0		lda $b0,x			lda 	esInt3,x
.3a4e	55 b1		eor $b1,x			eor 	esInt3+1,x 					; EOR will return 0 if the same.
.3a50	d0 01		bne $3a53			bne 	MInt32Compare2
.3a52	60		rts				rts
.3a53					MInt32Compare2:
.3a53	b5 98		lda $98,x			lda		esInt0,x 					; unsigned 32 bit comparison.
.3a55	d5 99		cmp $99,x			cmp 	esInt0+1,x
.3a57	b5 a0		lda $a0,x			lda		esInt1,x
.3a59	f5 a1		sbc $a1,x			sbc 	esInt1+1,x
.3a5b	b5 a8		lda $a8,x			lda		esInt2,x
.3a5d	f5 a9		sbc $a9,x			sbc 	esInt2+1,x
.3a5f	b5 b0		lda $b0,x			lda		esInt3,x
.3a61	f5 b1		sbc $b1,x			sbc 	esInt3+1,x
.3a63	50 02		bvc $3a67			bvc 	_I32LNoOverflow 			; make it signed 32 bit comparison
.3a65	49 80		eor #$80			eor 	#$80
.3a67					_I32LNoOverflow
.3a67	30 03		bmi $3a6c			bmi 	MInt32CLess					; if -ve then return $FF
.3a69	a9 01		lda #$01			lda 	#$01						; else return $01
.3a6b	60		rts				rts
.3a6c					MInt32CLess:
.3a6c	a9 ff		lda #$ff			lda 	#$FF
.3a6e	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32divide.asm

.3a6f					MInt32SDivide:
.3a6f	98		tya				tya  								; save Y, which is the count of negations
.3a70	48		pha				pha
.3a71	a0 00		ldy #$00			ldy 	#0 							; zero count
.3a73	20 8b 3a	jsr $3a8b			jsr 	_MInt32SRemSign 			; unsign TOS
.3a76	e8		inx				inx 								; unsign TOS+1
.3a77	20 8b 3a	jsr $3a8b			jsr 	_MInt32SRemSign
.3a7a	ca		dex				dex
.3a7b	98		tya				tya 								; save sign count on stack
.3a7c	48		pha				pha
.3a7d	20 94 3a	jsr $3a94			jsr 	MInt32UDivide 				; unsigned division
.3a80	68		pla				pla 								; get sign count back
.3a81	29 01		and #$01			and 	#1 							; if it is odd, then negate result
.3a83	f0 03		beq $3a88			beq 	_I32SNoNeg
.3a85	20 54 3c	jsr $3c54			jsr 	MInt32Negate
.3a88					_I32SNoNeg:
.3a88	68		pla				pla 								; restoe Y and exit
.3a89	a8		tay				tay
.3a8a	60		rts				rts
.3a8b					_MInt32SRemSign:
.3a8b	b5 b0		lda $b0,x			lda 	esInt3,x 					; is it -ve
.3a8d	10 04		bpl $3a93			bpl 	_MInt32SRSExit
.3a8f	c8		iny				iny 								; increment the sign count
.3a90	20 54 3c	jsr $3c54			jsr 	MInt32Negate 				; negate the value.
.3a93					_MInt32SRSExit:
.3a93	60		rts				rts
.3a94					MInt32UDivide:
.3a94	b5 99		lda $99,x			lda 	esInt0+1,x 					; check for division by zero
.3a96	15 a1		ora $a1,x			ora 	esInt1+1,x
.3a98	15 a2		ora $a2,x			ora 	esInt1+2,x
.3a9a	15 a3		ora $a3,x			ora 	esInt1+3,x
.3a9c	f0 4a		beq $3ae8			beq 	_MInt32DZero
.3a9e	e8		inx				inx 								; clear A
.3a9f	e8		inx				inx
.3aa0	20 9a 3c	jsr $3c9a			jsr 	MInt32False
.3aa3	ca		dex				dex
.3aa4	ca		dex				dex
.3aa5	98		tya				tya 								; save Y on the stack
.3aa6	48		pha				pha
.3aa7	a0 20		ldy #$20			ldy 	#32 						; number of division passes
.3aa9					_MInt32UDLoop:
.3aa9	16 98		asl $98,x			asl 	esInt0,x					; shift QA left. First Q
.3aab	36 a0		rol $a0,x			rol 	esInt1,x
.3aad	36 a8		rol $a8,x			rol 	esInt2,x
.3aaf	36 b0		rol $b0,x			rol 	esInt3,x
.3ab1	36 9a		rol $9a,x			rol 	esInt0+2,x 					; then A.
.3ab3	36 a2		rol $a2,x			rol 	esInt1+2,x
.3ab5	36 aa		rol $aa,x			rol 	esInt2+2,x
.3ab7	36 b2		rol $b2,x			rol 	esInt3+2,x
.3ab9	38		sec				sec 								; calculate A-M saving result on the stack
.3aba	b5 9a		lda $9a,x			lda 	esInt0+2,x
.3abc	f5 99		sbc $99,x			sbc 	esInt0+1,x
.3abe	48		pha				pha
.3abf	b5 a2		lda $a2,x			lda 	esInt1+2,x
.3ac1	f5 a1		sbc $a1,x			sbc 	esInt1+1,x
.3ac3	48		pha				pha
.3ac4	b5 aa		lda $aa,x			lda 	esInt2+2,x
.3ac6	f5 a9		sbc $a9,x			sbc 	esInt2+1,x
.3ac8	48		pha				pha
.3ac9	b5 b2		lda $b2,x			lda 	esInt3+2,x
.3acb	f5 b1		sbc $b1,x			sbc 	esInt3+1,x
.3acd	90 10		bcc $3adf			bcc		_MInt32NoSubtract 			; if A < M (e.g. carry clear) then reject this.
.3acf	95 b2		sta $b2,x			sta 	esInt3+2,x 					; write result back to A
.3ad1	68		pla				pla
.3ad2	95 aa		sta $aa,x			sta 	esInt2+2,x
.3ad4	68		pla				pla
.3ad5	95 a2		sta $a2,x			sta 	esInt1+2,x
.3ad7	68		pla				pla
.3ad8	95 9a		sta $9a,x			sta 	esInt0+2,x
.3ada	f6 98		inc $98,x			inc 	esInt0,x 					; sets bit 0 of Q - it was shifted left previously.
.3adc	4c e2 3a	jmp $3ae2			jmp 	_MInt32Next 					; do the next iteration
.3adf					_MInt32NoSubtract:
.3adf	68		pla				pla
.3ae0	68		pla				pla
.3ae1	68		pla				pla
.3ae2					_MInt32Next:
.3ae2	88		dey				dey 								; do this 32 times.
.3ae3	d0 c4		bne $3aa9			bne 	_MInt32UDLoop
.3ae5	68		pla				pla 								; restore Y and exit
.3ae6	a8		tay				tay
.3ae7	60		rts				rts
.3ae8					_MInt32DZero:
.3ae8	a2 05		ldx #$05			ldx 	#ErrorID_DivZero
.3aea	20 18 15	jsr $1518		jsr	errorHandler
.3aed					MInt32Modulus:
.3aed	20 94 3a	jsr $3a94			jsr 	MInt32UDivide 				; do the division.
.3af0	b5 b2		lda $b2,x			lda 	esInt3+2,x 					; copy 2nd on stack (the remainder) to the top.
.3af2	95 b0		sta $b0,x			sta 	esInt3,x
.3af4	b5 aa		lda $aa,x			lda 	esInt2+2,x
.3af6	95 a8		sta $a8,x			sta 	esInt2,x
.3af8	b5 a2		lda $a2,x			lda 	esInt1+2,x
.3afa	95 a0		sta $a0,x			sta 	esInt1,x
.3afc	b5 9a		lda $9a,x			lda 	esInt0+2,x
.3afe	95 98		sta $98,x			sta 	esInt0,x
.3b00	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32fromstr.asm

.0d0b					fs32Length:
>0d0b							.fill 	1
.3b01					LinkInt32FromString:
.3b01	aa		tax				tax
.3b02	98		tya				tya
.3b03	20 08 3b	jsr $3b08			jsr 	MInt32FromString
.3b06	8a		txa				txa
.3b07	60		rts				rts
.3b08					MInt32FromString:
.3b08	85 32		sta $32				sta 	tempShort 					; save base
.3b0a	98		tya				tya
.3b0b	48		pha				pha
.3b0c	a0 00		ldy #$00			ldy 	#0 							; get length of string to convert
.3b0e	b1 2a		lda ($2a),y			lda 	(temp0),y
.3b10	8d 0b 0d	sta $0d0b			sta 	fs32Length
.3b13	f0 65		beq $3b7a			beq 	_I32FSFail2					; fail if length zero.
.3b15	a0 01		ldy #$01			ldy 	#1 							; set index into string being read
.3b17	b1 2a		lda ($2a),y			lda 	(temp0),y 					; look at first character
.3b19	c9 2d		cmp #$2d			cmp 	#"-"						; is it a - character
.3b1b	d0 09		bne $3b26			bne 	_I32FSNotNegative
.3b1d	ad 0b 0d	lda $0d0b			lda 	fs32Length 					; get length back.
.3b20	c9 01		cmp #$01			cmp 	#1 							; if 1 it is just a - on its own so fail.
.3b22	f0 56		beq $3b7a			beq 	_I32FSFail2
.3b24	a0 02		ldy #$02			ldy 	#2 							; first digit of the number.
.3b26					_I32FSNotNegative:
.3b26	a5 32		lda $32				lda 	tempShort 					; get the base back.
.3b28	c0 02		cpy #$02			cpy 	#2 							; if we read a -ve (e.g. Y == 2)
.3b2a	d0 02		bne $3b2e			bne 	_I32FSNN2
.3b2c	09 80		ora #$80			ora 	#$80						; set bit 7, this indicates a negated result.
.3b2e					_I32FSNN2:
.3b2e	48		pha				pha 								; save base + final sign on stack.
.3b2f	20 9a 3c	jsr $3c9a			jsr 	MInt32False 				; zero the return value.
.3b32					_I32FSMainLoop:
.3b32	68		pla				pla 								; get the base back into tempShort
.3b33	48		pha				pha
.3b34	29 7f		and #$7f			and 	#$7F
.3b36	85 32		sta $32				sta 	tempShort
.3b38	b1 2a		lda ($2a),y			lda 	(temp0),y 					; look at next character.
.3b3a	c9 61		cmp #$61			cmp 	#"a" 						; fix up case.
.3b3c	90 02		bcc $3b40			bcc 	_I32FSNotLC
.3b3e	e9 20		sbc #$20			sbc 	#32
.3b40					_I32FSNotLC:
.3b40	38		sec				sec 								; subtract 48 (ASCII "0") - ASCII to Hex conversion
.3b41	e9 30		sbc #$30			sbc 	#"0"
.3b43	90 34		bcc $3b79			bcc 	_I32FSFail 					; nothing more to do.
.3b45	c9 0a		cmp #$0a			cmp 	#9+1 						; if it is 0-9 validate vs base.
.3b47	90 06		bcc $3b4f			bcc 	_I32FSValidate
.3b49	c9 11		cmp #$11			cmp 	#17 						; is it between 58 and 64 ? if so bad.
.3b4b	90 2c		bcc $3b79			bcc 	_I32FSFail
.3b4d	e9 07		sbc #$07			sbc 	#7 							; adjust into range so now character is 0->nnn
.3b4f					_I32FSValidate:
.3b4f	c5 32		cmp $32				cmp 	tempShort 					; compare against the base.
.3b51	b0 26		bcs $3b79			bcs 	_I32FSFail 					; sorry, too large for this base, so fail.
.3b53	48		pha				pha 								; save the new digit value.
.3b54	e8		inx				inx 								; put base into next slot up on stack
.3b55	a5 32		lda $32				lda 	tempShort
.3b57	20 a9 3c	jsr $3ca9			jsr 	MInt32Set8Bit
.3b5a	ca		dex				dex
.3b5b	20 b2 3b	jsr $3bb2			jsr 	MInt32Multiply 				; multiply current by the base
.3b5e	e8		inx				inx
.3b5f	68		pla				pla  								; put additive into next slot
.3b60	20 a9 3c	jsr $3ca9			jsr 	MInt32Set8Bit
.3b63	ca		dex				dex
.3b64	20 7e 3b	jsr $3b7e			jsr 	MInt32Add 					; and add it
.3b67	c8		iny				iny 								; bump the character pointer
.3b68	cc 0b 0d	cpy $0d0b			cpy 	fs32Length 					; until > length.
.3b6b	f0 c5		beq $3b32			beq 	_I32FSMainLoop
.3b6d	90 c3		bcc $3b32			bcc 	_I32FSMainLoop
.3b6f					_I32FSDone:
.3b6f	68		pla				pla 								; get base/final sign back
.3b70	10 03		bpl $3b75			bpl 	_I32FSNN3
.3b72	20 54 3c	jsr $3c54			jsr 	MInt32Negate 				; negate the result.
.3b75					_I32FSNN3:
.3b75	68		pla				pla
.3b76	a8		tay				tay
.3b77	38		sec				sec
.3b78	60		rts				rts
.3b79					_I32FSFail:
.3b79	68		pla				pla
.3b7a					_I32FSFail2:
.3b7a	68		pla				pla
.3b7b	a8		tay				tay
.3b7c	18		clc				clc
.3b7d	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32math.asm

.3b7e					MInt32Add:
.3b7e	18		clc				clc
.3b7f	b5 98		lda $98,x			lda 	esInt0,x
.3b81	75 99		adc $99,x			adc 	esInt0+1,x
.3b83	95 98		sta $98,x			sta 	esInt0,x
.3b85	b5 a0		lda $a0,x			lda 	esInt1,x
.3b87	75 a1		adc $a1,x			adc 	esInt1+1,x
.3b89	95 a0		sta $a0,x			sta 	esInt1,x
.3b8b	b5 a8		lda $a8,x			lda 	esInt2,x
.3b8d	75 a9		adc $a9,x			adc 	esInt2+1,x
.3b8f	95 a8		sta $a8,x			sta 	esInt2,x
.3b91	b5 b0		lda $b0,x			lda 	esInt3,x
.3b93	75 b1		adc $b1,x			adc 	esInt3+1,x
.3b95	95 b0		sta $b0,x			sta 	esInt3,x
.3b97	60		rts				rts
.3b98					MInt32Sub:
.3b98	38		sec				sec
.3b99	b5 98		lda $98,x			lda 	esInt0,x
.3b9b	f5 99		sbc $99,x			sbc 	esInt0+1,x
.3b9d	95 98		sta $98,x			sta 	esInt0,x
.3b9f	b5 a0		lda $a0,x			lda 	esInt1,x
.3ba1	f5 a1		sbc $a1,x			sbc 	esInt1+1,x
.3ba3	95 a0		sta $a0,x			sta 	esInt1,x
.3ba5	b5 a8		lda $a8,x			lda 	esInt2,x
.3ba7	f5 a9		sbc $a9,x			sbc 	esInt2+1,x
.3ba9	95 a8		sta $a8,x			sta 	esInt2,x
.3bab	b5 b0		lda $b0,x			lda 	esInt3,x
.3bad	f5 b1		sbc $b1,x			sbc 	esInt3+1,x
.3baf	95 b0		sta $b0,x			sta 	esInt3,x
.3bb1	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32multiply.asm

.3bb2					MInt32Multiply:
.3bb2	e8		inx				inx 								; copy 2nd -> 3rd
.3bb3	20 d8 3b	jsr $3bd8			jsr 	MInt32CopyUp
.3bb6	ca		dex				dex
.3bb7	20 d8 3b	jsr $3bd8			jsr 	MInt32CopyUp 				; copy 1st -> 2nd
.3bba	20 9a 3c	jsr $3c9a			jsr 	MInt32False 				; zero 1st.
.3bbd					_I32Loop:
.3bbd	b5 9a		lda $9a,x			lda 	esInt0+2,x 					; get low bit of 3rd
.3bbf	29 01		and #$01			and 	#1
.3bc1	f0 03		beq $3bc6			beq 	_I32NoAdd 					; if set
.3bc3	20 7e 3b	jsr $3b7e			jsr 	MInt32Add 					; add 2nd to 1st.
.3bc6					_I32NoAdd:
.3bc6	e8		inx				inx 								; shift 2nd left
.3bc7	20 af 3c	jsr $3caf			jsr 	MInt32ShiftLeft
.3bca	e8		inx				inx  								; shift 3rd right
.3bcb	20 b8 3c	jsr $3cb8			jsr 	MInt32ShiftRight
.3bce	20 c1 3c	jsr $3cc1			jsr 	MInt32Zero 					; check if zero.
.3bd1	08		php				php 								; save status bits
.3bd2	ca		dex				dex 	 							; point back to 1st
.3bd3	ca		dex				dex
.3bd4	28		plp				plp 								; get status bits
.3bd5	d0 e6		bne $3bbd			bne 	_I32Loop 					; if non-zero keep going.
.3bd7	60		rts				rts
.3bd8					MInt32CopyUp:
.3bd8	b5 98		lda $98,x			lda 	esInt0,x
.3bda	95 99		sta $99,x			sta 	esInt0+1,x
.3bdc	b5 a0		lda $a0,x			lda 	esInt1,x
.3bde	95 a1		sta $a1,x			sta 	esInt1+1,x
.3be0	b5 a8		lda $a8,x			lda 	esInt2,x
.3be2	95 a9		sta $a9,x			sta 	esInt2+1,x
.3be4	b5 b0		lda $b0,x			lda 	esInt3,x
.3be6	95 b1		sta $b1,x			sta 	esInt3+1,x
.3be8	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32tostr.asm

>0d0c					MCharCount:	.fill 	1						; count of converted characters
.3be9					MLInt32ToString:
.3be9	aa		tax				tax									; module passes stack in A, base in Y
.3bea	98		tya				tya
.3beb	20 f0 3b	jsr $3bf0			jsr 	MInt32ToString
.3bee	8a		txa				txa
.3bef	60		rts				rts
.3bf0					MInt32ToString:
.3bf0	48		pha				pha 								; save base
.3bf1	85 32		sta $32				sta 	tempShort 					; save target base.
.3bf3	a9 00		lda #$00			lda 	#0
.3bf5	8d 0c 0d	sta $0d0c			sta 	MCharCount 					; clear character count to 0
.3bf8	98		tya				tya
.3bf9	48		pha				pha
.3bfa	a5 32		lda $32				lda 	tempShort 					; check if we are signed conversion
.3bfc	10 10		bpl $3c0e			bpl 	_I32TSUnsigned
.3bfe	48		pha				pha 								; save base on stack.
.3bff	b5 b0		lda $b0,x			lda 	esInt3,x 					; is it actually negative
.3c01	10 08		bpl $3c0b			bpl 	_I32TSNoFlip
.3c03	a9 2d		lda #$2d			lda 	#"-" 						; write a '-' prefix out.
.3c05	20 41 3c	jsr $3c41			jsr 	MI32WriteCharacter
.3c08	20 54 3c	jsr $3c54			jsr 	MInt32Negate 				; negate the value, so now it's positive.
.3c0b					_I32TSNoFlip:
.3c0b	68		pla				pla 								; get the base back
.3c0c	29 7f		and #$7f			and 	#$7F 						; clear the sign flag so it's just a base now.
.3c0e					_I32TSUnsigned:
.3c0e	20 1c 3c	jsr $3c1c			jsr 	MI32DivideWrite 			; recursive code to output string.
.3c11	a0 00		ldy #$00			ldy 	#0 							; write charcount to first character.
.3c13	ad 0c 0d	lda $0d0c			lda 	MCharCount
.3c16	91 2a		sta ($2a),y			sta 	(temp0),y
.3c18	68		pla				pla
.3c19	a8		tay				tay
.3c1a	68		pla				pla
.3c1b	60		rts				rts
.3c1c					MI32DivideWrite:
.3c1c	48		pha				pha 								; save the divisor/base
.3c1d	e8		inx				inx 								; write in the dividing position.
.3c1e	20 a9 3c	jsr $3ca9			jsr 	MInt32Set8Bit
.3c21	ca		dex				dex
.3c22	20 94 3a	jsr $3a94			jsr 	MInt32UDivide 				; divide number by base.
.3c25	68		pla				pla 								; get the base into Y
.3c26	a8		tay				tay
.3c27	b5 9a		lda $9a,x			lda 	esInt0+2,x 					; get the remainder and push on the stack.
.3c29	48		pha				pha
.3c2a	20 c1 3c	jsr $3cc1			jsr 	MInt32Zero 					; is the result zero ?
.3c2d	f0 04		beq $3c33			beq 	_I32NoRecurse 				; if so, don't recurse.
.3c2f	98		tya				tya 								; put base into A
.3c30	20 1c 3c	jsr $3c1c			jsr 	MI32DivideWrite 				; and jsr the dividor recursively.
.3c33					_I32NoRecurse:
.3c33	68		pla				pla 								; get the remainder back
.3c34	c9 0a		cmp #$0a			cmp 	#10  						; handle hexadecimals, now converting to ASCII
.3c36	90 02		bcc $3c3a			bcc 	_I32NotHex
.3c38	69 06		adc #$06			adc 	#7-1
.3c3a					_I32NotHex:
.3c3a	18		clc				clc 								; make it ASCII
.3c3b	69 30		adc #$30			adc 	#48
.3c3d	20 41 3c	jsr $3c41			jsr 	MI32WriteCharacter 			; write the character out
.3c40	60		rts				rts 								; and exit.
.3c41					MI32WriteCharacter:
.3c41	ee 0c 0d	inc $0d0c			inc 	MCharCount 					; bump count (space for leading count)
.3c44	ac 0c 0d	ldy $0d0c			ldy 	MCharCount 					; get position
.3c47	91 2a		sta ($2a),y			sta 	(temp0),y 					; write out with trailing 0
.3c49	c8		iny				iny
.3c4a	a9 00		lda #$00			lda 	#0
.3c4c	91 2a		sta ($2a),y			sta 	(temp0),y
.3c4e	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32unary.asm

>0d0d					MSeed32:	.fill 	4							; random number seed.
.3c4f					MInt32Absolute:
.3c4f	b5 b0		lda $b0,x			lda 	esInt3,x 					; use negate code if -ve.
.3c51	30 01		bmi $3c54			bmi 	MInt32Negate
.3c53	60		rts				rts
.3c54					MInt32Negate:
.3c54	38		sec				sec 								; subtract from zero.
.3c55	a9 00		lda #$00			lda 	#0
.3c57	f5 98		sbc $98,x			sbc 	esInt0,x
.3c59	95 98		sta $98,x			sta 	esInt0,x
.3c5b	a9 00		lda #$00			lda 	#0
.3c5d	f5 a0		sbc $a0,x			sbc 	esInt1,x
.3c5f	95 a0		sta $a0,x			sta 	esInt1,x
.3c61	a9 00		lda #$00			lda 	#0
.3c63	f5 a8		sbc $a8,x			sbc 	esInt2,x
.3c65	95 a8		sta $a8,x			sta 	esInt2,x
.3c67	a9 00		lda #$00			lda 	#0
.3c69	f5 b0		sbc $b0,x			sbc 	esInt3,x
.3c6b	95 b0		sta $b0,x			sta 	esInt3,x
.3c6d	60		rts				rts
.3c6e					MInt32Not:
.3c6e	b5 98		lda $98,x			lda 	esInt0,x 					; one's complement all four.
.3c70	49 ff		eor #$ff			eor 	#$FF
.3c72	95 98		sta $98,x			sta 	esInt0,x
.3c74	b5 a0		lda $a0,x			lda 	esInt1,x
.3c76	49 ff		eor #$ff			eor 	#$FF
.3c78	95 a0		sta $a0,x			sta 	esInt1,x
.3c7a	b5 a8		lda $a8,x			lda 	esInt2,x
.3c7c	49 ff		eor #$ff			eor 	#$FF
.3c7e	95 a8		sta $a8,x			sta 	esInt2,x
.3c80	b5 b0		lda $b0,x			lda 	esInt3,x
.3c82	49 ff		eor #$ff			eor 	#$FF
.3c84	95 b0		sta $b0,x			sta 	esInt3,x
.3c86	60		rts				rts
.3c87					MInt32Sign:
.3c87	b5 b0		lda $b0,x			lda 	esInt3,x					; look at MSB
.3c89	30 0b		bmi $3c96			bmi 	MInt32True 					; if set return -1 (true)
.3c8b	20 c1 3c	jsr $3cc1			jsr 	MInt32Zero 					; is it zero ?
.3c8e	f0 0a		beq $3c9a			beq 	MInt32False 				; if zero return 0 (false)
.3c90	20 9a 3c	jsr $3c9a			jsr 	MInt32False 				; > 0 return 1, by setting it to zero
.3c93	f6 98		inc $98,x			inc 	esInt0,x  					; and bumping the LSB.
.3c95	60		rts				rts
.3c96					MInt32True:
.3c96	a9 ff		lda #$ff			lda 	#$FF 						; set to $FFFFFFFF
.3c98	d0 02		bne $3c9c			bne 	MInt32WriteAll
.3c9a					MInt32False:
.3c9a	a9 00		lda #$00			lda 	#0
.3c9c					MInt32WriteAll:
.3c9c	95 98		sta $98,x			sta 	esInt0,x
.3c9e					MInt32Write123:
.3c9e	95 a0		sta $a0,x			sta 	esInt1,x
.3ca0	95 a8		sta $a8,x			sta 	esInt2,x
.3ca2	95 b0		sta $b0,x			sta 	esInt3,x
.3ca4	a9 00		lda #$00			lda 	#$00						; and make it an integer
.3ca6	95 90		sta $90,x			sta 	esType,x
.3ca8	60		rts				rts
.3ca9					MInt32Set8Bit:
.3ca9	95 98		sta $98,x			sta 	esInt0,x 					; coopt above function to write
.3cab	a9 00		lda #$00			lda 	#0 							; a value 0-255
.3cad	f0 ef		beq $3c9e			beq		MInt32Write123
.3caf					MInt32ShiftLeft:
.3caf	16 98		asl $98,x			asl 	esInt0,x
.3cb1	36 a0		rol $a0,x			rol	 	esInt1,x
.3cb3	36 a8		rol $a8,x			rol	 	esInt2,x
.3cb5	36 b0		rol $b0,x			rol	 	esInt3,x
.3cb7	60		rts				rts
.3cb8					MInt32ShiftRight:
.3cb8	56 b0		lsr $b0,x			lsr 	esInt3,x
.3cba	76 a8		ror $a8,x			ror 	esInt2,x
.3cbc	76 a0		ror $a0,x			ror 	esInt1,x
.3cbe	76 98		ror $98,x			ror 	esInt0,x
.3cc0	60		rts				rts
.3cc1					MInt32Zero:
.3cc1	b5 98		lda $98,x			lda 	esInt0,x
.3cc3	15 a0		ora $a0,x			ora 	esInt1,x
.3cc5	15 a8		ora $a8,x			ora 	esInt2,x
.3cc7	15 b0		ora $b0,x			ora 	esInt3,x
.3cc9	60		rts				rts
.3cca					MInt32Random:
.3cca	98		tya				tya
.3ccb	48		pha				pha
.3ccc	a0 07		ldy #$07			ldy 	#7 							; do it 7 times
.3cce	ad 0d 0d	lda $0d0d			lda 	MSeed32+0 					; check the seed isn't zero
.3cd1	d0 03		bne $3cd6			bne 	_Random1
.3cd3	a8		tay				tay 								; if so do it 256 times
.3cd4	a9 aa		lda #$aa			lda		#$AA 						; and use this to seed the seed....
.3cd6					_Random1:
.3cd6	0a		asl a				asl 	a
.3cd7	2e 0e 0d	rol $0d0e			rol 	MSeed32+1
.3cda	2e 0f 0d	rol $0d0f			rol 	MSeed32+2
.3cdd	2e 10 0d	rol $0d10			rol 	MSeed32+3
.3ce0	90 02		bcc $3ce4			bcc 	_Random2
.3ce2	49 c5		eor #$c5			eor 	#$C5
.3ce4					_Random2:
.3ce4	88		dey				dey
.3ce5	d0 ef		bne $3cd6			bne 	_Random1
.3ce7	8d 0d 0d	sta $0d0d			sta 	MSeed32+0 					; copy the seed in.
.3cea	95 98		sta $98,x			sta 	esInt0,x
.3cec	ad 0e 0d	lda $0d0e			lda 	MSeed32+1
.3cef	95 a0		sta $a0,x			sta 	esInt1,x
.3cf1	ad 0f 0d	lda $0d0f			lda 	MSeed32+2
.3cf4	95 a8		sta $a8,x			sta 	esInt2,x
.3cf6	ad 10 0d	lda $0d10			lda 	MSeed32+3
.3cf9	95 b0		sta $b0,x			sta 	esInt3,x
.3cfb	68		pla				pla
.3cfc	a8		tay				tay
.3cfd	a9 00		lda #$00			lda 	#0
.3cff	95 90		sta $90,x			sta 	esType,x
.3d01	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/utility/check.asm

.3d02					CheckToken:
.3d02	d1 28		cmp ($28),y			cmp 	(codePtr),y
.3d04	d0 02		bne $3d08			bne 	_CTError
.3d06	c8		iny				iny
.3d07	60		rts				rts
.3d08					_CTError:
.3d08	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.3d0a	20 18 15	jsr $1518		jsr	errorHandler
.3d0d					CheckRightParen:
.3d0d	b1 28		lda ($28),y			lda 	(codePtr),y
.3d0f	c8		iny				iny
.3d10	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.3d12	d0 01		bne $3d15			bne 	_CRPError
.3d14	60		rts				rts
.3d15					_CRPError:
.3d15	a2 09		ldx #$09			ldx 	#ErrorID_MissingRP
.3d17	20 18 15	jsr $1518		jsr	errorHandler
.3d1a					CheckComma:
.3d1a	b1 28		lda ($28),y			lda 	(codePtr),y
.3d1c	c8		iny				iny
.3d1d	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.3d1f	d0 01		bne $3d22			bne 	_CCError
.3d21	60		rts				rts
.3d22					_CCError:
.3d22	a2 0a		ldx #$0a			ldx 	#ErrorID_MissingComma
.3d24	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/utility/stack.asm

.0037					rsPointer:
>0037							.fill 	2							; to TOS, which is the current top-token.
.3d27					RSReset:
.3d27	a9 ff		lda #$ff			lda 	#(returnStack+retStackSize-1) & $FF
.3d29	85 37		sta $37				sta 	rsPointer
.3d2b	a9 09		lda #$09			lda 	#(returnStack+retStackSize-1) >> 8
.3d2d	85 38		sta $38				sta 	1+(rsPointer)
.3d2f	a9 ff		lda #$ff			lda 	#$FF 						; put a duff marker on TOS, so nothing will pop
.3d31	8d ff 09	sta $09ff			sta 	returnStack+retStackSize-1
.3d34	60		rts				rts
.3d35					RSClaim:
.3d35	84 32		sty $32				sty 	tempShort 					; preserve Y
.3d37	48		pha				pha 								; save marker on stack.
.3d38	8a		txa				txa 								; get bytes required.
.3d39	38		sec				sec
.3d3a	49 ff		eor #$ff			eor 	#$FF 						; add to rsPointer using 2's complement.
.3d3c	65 37		adc $37				adc 	rsPointer
.3d3e	85 37		sta $37				sta 	rsPointer
.3d40	a5 38		lda $38				lda 	rsPointer+1
.3d42	69 ff		adc #$ff			adc 	#$FF
.3d44	85 38		sta $38				sta 	rsPointer+1
.3d46	c9 08		cmp #$08			cmp 	#returnStack>>8 			; overflow. underflow actually :)
.3d48	90 08		bcc $3d52			bcc 	_RSCOverflow
.3d4a	68		pla				pla 								; get marker back
.3d4b	a0 00		ldy #$00			ldy 	#0 							; write marker out.
.3d4d	91 37		sta ($37),y			sta 	(rsPointer),y
.3d4f	a4 32		ldy $32				ldy 	tempShort 					; restore Y and exit
.3d51	60		rts				rts
.3d52					_RSCOverflow:
.3d52	a2 16		ldx #$16			ldx 	#ErrorID_RetStack
.3d54	20 18 15	jsr $1518		jsr	errorHandler
.3d57					RSFree:
.3d57	18		clc				clc
.3d58	65 37		adc $37				adc 	rsPointer
.3d5a	85 37		sta $37				sta 	rsPointer
.3d5c	90 02		bcc $3d60			bcc 	_RSFExit
.3d5e	e6 38		inc $38				inc 	rsPointer+1
.3d60					_RSFExit:
.3d60	60		rts				rts
.3d61					RSSavePosition:
.3d61	84 32		sty $32				sty 	tempShort 					; save Y position
.3d63	a8		tay				tay 								; this is where we write it.
.3d64	a5 28		lda $28				lda 	codePtr 					; write codePointer out
.3d66	91 37		sta ($37),y			sta 	(rsPointer),y
.3d68	c8		iny				iny
.3d69	a5 29		lda $29				lda 	codePtr+1
.3d6b	91 37		sta ($37),y			sta 	(rsPointer),y
.3d6d	c8		iny				iny
.3d6e	a5 32		lda $32				lda 	tempShort 					; write the Y position out.
.3d70	91 37		sta ($37),y			sta 	(rsPointer),y
.3d72	a8		tay				tay 								; fix Y back again to original value
.3d73	60		rts				rts
.3d74					RSLoadPosition:
.3d74	a8		tay				tay
.3d75	b1 37		lda ($37),y			lda 	(rsPointer),y 				; read codePointer back
.3d77	85 28		sta $28				sta 	codePtr
.3d79	c8		iny				iny
.3d7a	b1 37		lda ($37),y			lda 	(rsPointer),y
.3d7c	85 29		sta $29				sta 	codePtr+1
.3d7e	c8		iny				iny
.3d7f	b1 37		lda ($37),y			lda 	(rsPointer),y 				; and the offset
.3d81	a8		tay				tay 								; to Y
.3d82	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/utility/warmstart.asm

.3d83					WarmStart:
.3d83	a2 04		ldx #$04		ldx	#4
.3d85	20 ea 26	jsr $26ea		jsr	interactionHandler

;******  Return to file: main/main.asm

.3d88					mainHandler:
.3d88	7c 8b 3d	jmp ($3d8b,x)			jmp 	(mainVectors,x)
.3d8b					mainVectors:
>3d8b	a7 3d					.word _DummyControlHandler ; index 0
>3d8d	1a 3d					.word CheckComma           ; index 2
>3d8f	0d 3d					.word CheckRightParen      ; index 4
>3d91	f2 2e					.word XCommandClear        ; index 6
>3d93	1d 36					.word LinkEvaluate         ; index 8
>3d95	29 36					.word LinkEvaluateInteger  ; index 10
>3d97	35 36					.word LinkEvaluateSmallInt ; index 12
>3d99	2f 36					.word LinkEvaluateString   ; index 14
>3d9b	23 36					.word LinkEvaluateTerm     ; index 16
>3d9d	e9 3b					.word MLInt32ToString      ; index 18
>3d9f	81 30					.word Command_XNew         ; index 20
>3da1	8f 30					.word XCommand_Run         ; index 22
>3da3	9b 30					.word Command_RunFrom      ; index 24
>3da5	01 3b					.word LinkInt32FromString  ; index 26
.3da7					_DummyControlHandler:
.3da7	60		rts			rts

;******  Return to file: basic.asm

.3da8					section_end_main:
.3da8					section_start_string:

;******  Processing file: string/string.asm


;******  Processing file: string/functions/chr.asm

.3da8					StringChrs:
.3da8	aa		tax				tax 								; set up stack
.3da9	a9 02		lda #$02			lda 	#2
.3dab	20 6b 3e	jsr $3e6b			jsr 	AllocateSoftString
.3dae	98		tya				tya
.3daf	20 91 3e	jsr $3e91			jsr 	WriteSoftString
.3db2					StringUpdate:
.3db2	20 c0 3d	jsr $3dc0			jsr 	ReturnSoftString
.3db5	8a		txa				txa
.3db6	60		rts				rts
.3db7					StringNull:
.3db7	aa		tax				tax
.3db8	a9 01		lda #$01			lda 	#1
.3dba	20 6b 3e	jsr $3e6b			jsr 	AllocateSoftString
.3dbd	4c b2 3d	jmp $3db2			jmp 	StringUpdate
.3dc0					ReturnSoftString:
.3dc0	a5 39		lda $39				lda 	softMemAlloc 				; copy address
.3dc2	95 98		sta $98,x			sta 	esInt0,x
.3dc4	a5 3a		lda $3a				lda 	softMemAlloc+1
.3dc6	95 a0		sta $a0,x			sta 	esInt1,x
.3dc8	a9 00		lda #$00			lda 	#0 							; zero upper bytes
.3dca	95 a8		sta $a8,x			sta 	esInt2,x
.3dcc	95 b0		sta $b0,x			sta 	esInt3,x
.3dce	a9 40		lda #$40			lda 	#$40 						; type string.
.3dd0	95 90		sta $90,x			sta 	esType,x
.3dd2	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/functions/compare.asm

.3dd3					STRCompare:
.3dd3	48		pha				pha 								; save A
.3dd4	aa		tax				tax 								; put stack pos in X
.3dd5	98		tya				tya
.3dd6	48		pha				pha
.3dd7	20 0b 3e	jsr $3e0b			jsr 	CopyStringPair 				; copy strings to temp0,temp1
.3dda	a0 00		ldy #$00			ldy 	#0 							; get the smaller of the two string sizes.
.3ddc	b1 2a		lda ($2a),y			lda 	(temp0),y
.3dde	d1 2c		cmp ($2c),y			cmp 	(temp1),y
.3de0	90 02		bcc $3de4			bcc 	_SCNotSmaller
.3de2	b1 2c		lda ($2c),y			lda 	(temp1),y
.3de4					_SCNotSmaller:
.3de4	aa		tax				tax 								; put that in X. We compare this many chars first.
.3de5					_SCCompareLoop:
.3de5	e0 00		cpx #$00			cpx 	#0 							; if compared all the smaller, then it is the shorter
.3de7	f0 0c		beq $3df5			beq 	_SCSameToEndShortest 		; one that is the smallest if they are different lengths.
.3de9	ca		dex				dex 								; decrement chars to compare.
.3dea	c8		iny				iny 								; move to next character
.3deb	38		sec				sec 								; calculate s1[y]-s2[y]
.3dec	b1 2a		lda ($2a),y			lda 	(temp0),y
.3dee	f1 2c		sbc ($2c),y			sbc 	(temp1),y
.3df0	d0 0a		bne $3dfc			bne 	_SCReturnResult 			; if different return sign of A
.3df2	4c e5 3d	jmp $3de5			jmp 	_SCCompareLoop
.3df5					_SCSameToEndShortest
.3df5	a0 00		ldy #$00			ldy 	#0 							; compare len(s1) - len(s2)
.3df7	38		sec				sec
.3df8	b1 2a		lda ($2a),y			lda 	(temp0),y
.3dfa	f1 2c		sbc ($2c),y			sbc 	(temp1),y
.3dfc					_SCReturnResult:
.3dfc	08		php				php 								; set return to zero preserving PSW.
.3dfd	a2 00		ldx #$00			ldx 	#0
.3dff	28		plp				plp
.3e00	f0 05		beq $3e07			beq 	_SCExit 					; two values equal, then exit
.3e02	ca		dex				dex 								; X = $FF
.3e03	90 02		bcc $3e07			bcc 	_SCExit 					; if 1st < 2nd then -1
.3e05	a2 01		ldx #$01			ldx 	#1 							; X = $01 if greater
.3e07					_SCExit:
.3e07	68		pla				pla
.3e08	a8		tay				tay
.3e09	68		pla				pla
.3e0a	60		rts				rts
.3e0b					CopyStringPair:
.3e0b	b5 99		lda $99,x			lda 	esInt0+1,x
.3e0d	85 2c		sta $2c				sta 	temp1
.3e0f	b5 a1		lda $a1,x			lda 	esInt1+1,x
.3e11	85 2d		sta $2d				sta 	temp1+1
.3e13					CopyStringTop:
.3e13	b5 98		lda $98,x			lda 	esInt0,x
.3e15	85 2a		sta $2a				sta 	temp0
.3e17	b5 a0		lda $a0,x			lda 	esInt1,x
.3e19	85 2b		sta $2b				sta 	temp0+1
.3e1b	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/functions/concat.asm

.3e1c					StringConcat:
.3e1c	aa		tax				tax									; stack pos in X
.3e1d	98		tya				tya
.3e1e	48		pha				pha
.3e1f	20 0b 3e	jsr $3e0b			jsr 	CopyStringPair 				; temp0 and temp1 point to strings to concat.
.3e22	38		sec				sec 								; calculate alloc strings. lengths added + 1 for size.
.3e23	a0 00		ldy #$00			ldy 	#0
.3e25	b1 2a		lda ($2a),y			lda 	(temp0),y
.3e27	71 2c		adc ($2c),y			adc 	(temp1),y
.3e29	b0 1c		bcs $3e47			bcs 	_SCError 					; just too many characters here.
.3e2b	c9 fc		cmp #$fc			cmp 	#MaxStringSize
.3e2d	b0 18		bcs $3e47			bcs 	_SCError
.3e2f	20 6b 3e	jsr $3e6b			jsr 	AllocateSoftString 			; allocate soft string memory, set pointer.
.3e32	20 62 3e	jsr $3e62			jsr 	CopySoftToStack 			; copy that to the stack.
.3e35	20 4c 3e	jsr $3e4c			jsr 	SCCopyTemp0 				; copy temp0
.3e38	a5 2c		lda $2c				lda 	temp1 						; copy temp1 to temp0
.3e3a	85 2a		sta $2a				sta 	temp0
.3e3c	a5 2d		lda $2d				lda 	temp1+1
.3e3e	85 2b		sta $2b				sta 	temp0+1
.3e40	20 4c 3e	jsr $3e4c			jsr 	SCCopyTemp0 				; copy temp0 e.g. what was temp1.
.3e43	68		pla				pla
.3e44	a8		tay				tay
.3e45	8a		txa				txa 								; and A
.3e46	60		rts				rts
.3e47					_SCError:
.3e47	a2 0d		ldx #$0d			ldx 	#ErrorID_StrLen
.3e49	20 18 15	jsr $1518		jsr	errorHandler
.3e4c					SCCopyTemp0:
.3e4c	a0 00		ldy #$00			ldy 	#0 							; put count in temp2
.3e4e	b1 2a		lda ($2a),y			lda 	(temp0),y
.3e50	85 2e		sta $2e				sta 	temp2
.3e52					_SCCopyLoop:
.3e52	a5 2e		lda $2e				lda 	temp2 						; done the lot
.3e54	f0 0b		beq $3e61			beq 	_SCCopyExit
.3e56	c6 2e		dec $2e				dec 	temp2
.3e58	c8		iny				iny 								; get next char
.3e59	b1 2a		lda ($2a),y			lda 	(temp0),y
.3e5b	20 91 3e	jsr $3e91			jsr 	WriteSoftString 			; write to soft string.
.3e5e	4c 52 3e	jmp $3e52			jmp 	_SCCopyLoop
.3e61					_SCCopyExit:
.3e61	60		rts				rts
.3e62					CopySoftToStack:
.3e62	a5 39		lda $39				lda 	SoftMemAlloc 				; copy the memory allocation pointer to the stack.
.3e64	95 98		sta $98,x			sta 	esInt0,x 					; type is already string.
.3e66	a5 3a		lda $3a				lda 	SoftMemAlloc+1
.3e68	95 a0		sta $a0,x			sta 	esInt1,x
.3e6a	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/functions/memory.asm

.0039					softMemAlloc:
>0039							.fill 	2  							; if MSB is zero needs resetting on allocation.
.3e6b					AllocateSoftString:
.3e6b	85 32		sta $32				sta 	tempShort 					; save count
.3e6d	98		tya				tya
.3e6e	48		pha				pha
.3e6f	a5 3a		lda $3a				lda 	softMemAlloc+1 				; if the high byte is zero, it needs allocating.
.3e71	d0 09		bne $3e7c			bne 	_ASSDone
.3e73	a5 33		lda $33				lda 	highMemory 					; reset the soft memory alloc pointer.
.3e75	85 39		sta $39				sta 	softMemAlloc 				; to speed up slightly, we only reset this when we first need it
.3e77	a4 34		ldy $34				ldy 	highMemory+1 				; but it needs to be reset before each command.
.3e79	88		dey				dey 								; it is set to 1/4k below high memory, allowing space
.3e7a	84 3a		sty $3a				sty 	softMemAlloc+1 				; for a concreted string.
.3e7c					_ASSDone:
.3e7c	38		sec				sec 								; allocate downwards enough memory
.3e7d	a5 39		lda $39				lda 	softMemAlloc 				; subtract the memory requirements in A from
.3e7f	e5 32		sbc $32				sbc 	tempShort 					; the soft memory pointer
.3e81	85 39		sta $39				sta 	softMemAlloc
.3e83	a5 3a		lda $3a				lda 	softMemAlloc+1
.3e85	e9 00		sbc #$00			sbc 	#0
.3e87	85 3a		sta $3a				sta 	softMemAlloc+1
.3e89	a9 00		lda #$00			lda 	#0 							; empty that string, set the length = 0.
.3e8b	a8		tay				tay
.3e8c	91 39		sta ($39),y			sta 	(softMemAlloc),y
.3e8e	68		pla				pla
.3e8f	a8		tay				tay
.3e90	60		rts				rts
.3e91					WriteSoftString:
.3e91	84 32		sty $32				sty 	tempShort 					; save Y
.3e93	48		pha				pha 								; save character on stack
.3e94	a0 00		ldy #$00			ldy 	#0 							; get and bump length
.3e96	b1 39		lda ($39),y			lda 	(softMemAlloc),y
.3e98	18		clc				clc
.3e99	69 01		adc #$01			adc 	#1
.3e9b	91 39		sta ($39),y			sta 	(softMemAlloc),y
.3e9d	a8		tay				tay 								; offset in Y
.3e9e	68		pla				pla 								; get char and write.
.3e9f	91 39		sta ($39),y			sta 	(softMemAlloc),y
.3ea1	a4 32		ldy $32				ldy 	tempShort 					; restore Y and exit.
.3ea3	60		rts				rts
.3ea4					StrClone:
.3ea4	aa		tax				tax 								; set up stack.
.3ea5	98		tya				tya
.3ea6	48		pha				pha
.3ea7	a0 00		ldy #$00			ldy 	#0 							; get length, add 1 for length
.3ea9	b1 2a		lda ($2a),y			lda 	(temp0),y 					; this is the bytes required.
.3eab	18		clc				clc
.3eac	69 01		adc #$01			adc 	#1
.3eae	20 6b 3e	jsr $3e6b			jsr 	AllocateSoftString 			; allocate soft memory
.3eb1	a5 39		lda $39				lda 	softMemAlloc 				; copy that address to TOS
.3eb3	95 98		sta $98,x			sta 	esInt0,x
.3eb5	a5 3a		lda $3a				lda 	softMemAlloc+1
.3eb7	95 a0		sta $a0,x			sta 	esInt1,x
.3eb9	a9 00		lda #$00			lda 	#0 							; zero upper 2 bytes
.3ebb	95 a8		sta $a8,x			sta 	esInt2,x
.3ebd	95 b0		sta $b0,x			sta 	esInt3,x
.3ebf	a9 40		lda #$40			lda 	#$40 						; set type to string.
.3ec1	95 90		sta $90,x			sta 	esType,x
.3ec3	20 4c 3e	jsr $3e4c			jsr 	SCCopyTemp0 				; copy temp0 string to soft memory copy (concat.asm)
.3ec6	68		pla				pla
.3ec7	a8		tay				tay
.3ec8	8a		txa				txa
.3ec9	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/functions/setcase.asm

.3eca					CaseString:
.3eca	48		pha				pha 								; save A and copy to X
.3ecb	aa		tax				tax
.3ecc	98		tya				tya
.3ecd	48		pha				pha
.3ece	20 13 3e	jsr $3e13			jsr 	CopyStringTop 				; target string -> temp0
.3ed1	a0 00		ldy #$00			ldy 	#0
.3ed3	b1 2a		lda ($2a),y			lda 	(temp0),y  					; get length,
.3ed5	18		clc				clc
.3ed6	69 01		adc #$01			adc 	#1 							; one more for length byte
.3ed8	20 6b 3e	jsr $3e6b			jsr 	AllocateSoftString 			; allocate soft string memory, set pointer.
.3edb	20 62 3e	jsr $3e62			jsr 	CopySoftToStack 			; copy that to the stack.
.3ede	a0 00		ldy #$00			ldy 	#0
.3ee0	b1 2a		lda ($2a),y			lda 	(temp0),y 					; count to copy in X
.3ee2	aa		tax				tax
.3ee3					_CSCopy:
.3ee3	e0 00		cpx #$00			cpx 	#0 							; finished if 0.
.3ee5	f0 24		beq $3f0b			beq 	_CSExit
.3ee7	ca		dex				dex
.3ee8	c8		iny				iny
.3ee9	68		pla				pla 								; check direction
.3eea	48		pha				pha
.3eeb	f0 0c		beq $3ef9			beq 	_CSUpper
.3eed	b1 2a		lda ($2a),y			lda 	(temp0),y 					; lower$() code
.3eef	c9 41		cmp #$41			cmp 	#"A"
.3ef1	90 12		bcc $3f05			bcc 	_CSWrite
.3ef3	c9 5b		cmp #$5b			cmp 	#"Z"+1
.3ef5	b0 0e		bcs $3f05			bcs 	_CSWrite
.3ef7	90 0a		bcc $3f03			bcc 	_CSFlipWrite
.3ef9					_CSUpper:
.3ef9	b1 2a		lda ($2a),y			lda 	(temp0),y 					; upper$() code
.3efb	c9 61		cmp #$61			cmp 	#"a"
.3efd	90 06		bcc $3f05			bcc 	_CSWrite
.3eff	c9 7b		cmp #$7b			cmp 	#"z"+1
.3f01	b0 02		bcs $3f05			bcs 	_CSWrite
.3f03					_CSFlipWrite:
.3f03	49 20		eor #$20			eor 	#"A"^"a" 					; switch case.
.3f05					_CSWrite:
.3f05	20 91 3e	jsr $3e91			jsr 	WriteSoftString 			; add to soft string.
.3f08	4c e3 3e	jmp $3ee3			jmp 	_CSCopy
.3f0b					_CSExit:
.3f0b	68		pla				pla
.3f0c	a8		tay				tay
.3f0d	68		pla				pla
.3f0e	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/functions/substring.asm

.3f0f					StringSubstring:
.3f0f	48		pha				pha
.3f10	aa		tax				tax 								; access stack.
.3f11	98		tya				tya
.3f12	48		pha				pha
.3f13	20 13 3e	jsr $3e13			jsr 	CopyStringTop 				; point temp0 to the string.
.3f16	a0 00		ldy #$00			ldy 	#0 							; get length.
.3f18	b1 2a		lda ($2a),y			lda 	(temp0),Y
.3f1a	85 2c		sta $2c				sta 	temp1
.3f1c	b5 99		lda $99,x			lda 	esInt0+1,x 					; get the initial offset
.3f1e	c5 2c		cmp $2c				cmp 	temp1 						; return "" if > length.
.3f20	f0 02		beq $3f24			beq 	_SSBOkay
.3f22	b0 2a		bcs $3f4e			bcs 	_SSBReturnNull
.3f24					_SSBOkay:
.3f24	a5 2c		lda $2c				lda 	temp1 						; get the total length +1
.3f26	18		clc				clc
.3f27	69 01		adc #$01			adc 	#1
.3f29	38		sec				sec
.3f2a	f5 99		sbc $99,x			sbc 	esInt0+1,x 					; the anything >= this is bad - max size
.3f2c	d5 9a		cmp $9a,x			cmp 	esInt0+2,x  				; check bad >= required
.3f2e	90 02		bcc $3f32			bcc		_SSBTrunc
.3f30	b5 9a		lda $9a,x			lda 	esInt0+2,x
.3f32					_SSBTrunc:
.3f32	85 2d		sta $2d				sta 	temp1+1 					; characters to copy.
.3f34	18		clc				clc
.3f35	69 01		adc #$01			adc 	#1 							; add 1
.3f37	20 6b 3e	jsr $3e6b			jsr 	AllocateSoftString 			; allocate soft string memory, set pointer.
.3f3a	20 62 3e	jsr $3e62			jsr 	CopySoftToStack 			; copy that to the stack.
.3f3d	b4 99		ldy $99,x			ldy 	esInt0+1,x 					; get initial position of char to copy
.3f3f					_SSBCopyLoop:
.3f3f	a5 2d		lda $2d				lda 	temp1+1 					; done them all
.3f41	f0 0e		beq $3f51			beq 	_SSBExit
.3f43	c6 2d		dec $2d				dec 	temp1+1
.3f45	b1 2a		lda ($2a),y			lda 	(temp0),y 					; get and write character
.3f47	20 91 3e	jsr $3e91			jsr 	WriteSoftString
.3f4a	c8		iny				iny
.3f4b	4c 3f 3f	jmp $3f3f			jmp 	_SSBCopyLoop
.3f4e					_SSBReturnNull:
.3f4e	20 55 3f	jsr $3f55			jsr 	ReturnNull
.3f51					_SSBExit:
.3f51	68		pla				pla
.3f52	a8		tay				tay
.3f53	68		pla				pla
.3f54	60		rts				rts
.3f55					ReturnNull:
.3f55	a9 00		lda #$00			lda 	#0 							; clear null string
.3f57	8d ce 0a	sta $0ace			sta 	NullString
.3f5a	a9 ce		lda #$ce			lda 	#NullString & $FF 			; set a pointer to it
.3f5c	95 98		sta $98,x			sta 	esInt0,x
.3f5e	a9 0a		lda #$0a			lda 	#NullString >> 8
.3f60	95 a0		sta $a0,x			sta 	esInt1,x
.3f62	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/functions/write.asm

.0d11					srcStrLen:
>0d11							.fill 	1
.3f63					StringWrite:
.3f63	aa		tax				tax
.3f64	48		pha				pha
.3f65	98		tya				tya
.3f66	48		pha				pha
.3f67	20 8e 3f	jsr $3f8e			jsr 	CheckOverwriteCurrent
.3f6a	b0 0d		bcs $3f79			bcs		_SWCopyCurrent
.3f6c	20 cc 3f	jsr $3fcc			jsr 	RequiresConcretion
.3f6f	90 0e		bcc $3f7f			bcc 	_SWWriteReference
.3f71	20 2f 40	jsr $402f			jsr 	CheckSpecialConcretion
.3f74	b0 09		bcs $3f7f			bcs 	_SWWriteReference
.3f76	20 e0 3f	jsr $3fe0			jsr 	AllocateHardMemory
.3f79					_SWCopyCurrent:
.3f79	20 13 40	jsr $4013			jsr 	CopyStringToHardMemory
.3f7c	4c 8a 3f	jmp $3f8a			jmp 	_SWExit
.3f7f					_SWWriteReference
.3f7f	a0 00		ldy #$00			ldy 	#0
.3f81	a5 2a		lda $2a				lda 	temp0
.3f83	91 2c		sta ($2c),y			sta 	(temp1),y
.3f85	c8		iny				iny
.3f86	a5 2b		lda $2b				lda 	temp0+1
.3f88	91 2c		sta ($2c),y			sta 	(temp1),y
.3f8a					_SWExit:
.3f8a	68		pla				pla
.3f8b	a8		tay				tay
.3f8c	68		pla				pla
.3f8d	60		rts				rts
.3f8e					CheckOverwriteCurrent:
.3f8e	a0 00		ldy #$00			ldy 	#0 						; get address of string being written to temp0
.3f90	b5 a1		lda $a1,x			lda 	esInt1+1,x
.3f92	85 2b		sta $2b				sta 	temp0+1
.3f94	b5 99		lda $99,x			lda 	esInt0+1,x
.3f96	85 2a		sta $2a				sta 	temp0
.3f98	b1 2a		lda ($2a),y			lda 	(temp0),y 				; get length of string being copied and save it.
.3f9a	8d 11 0d	sta $0d11			sta 	srcStrLen
.3f9d	b5 98		lda $98,x			lda 	esInt0,x 				; copy where the final address it being written to temp1.
.3f9f	85 2c		sta $2c				sta 	temp1 					; e.g. if it is ax$ then temp1 will point to the ax$
.3fa1	b5 a0		lda $a0,x			lda 	esInt1,x 				; data record + 5
.3fa3	85 2d		sta $2d				sta 	temp1+1
.3fa5	a0 01		ldy #$01			ldy 	#1 						; get the MSB of the address of string currently stored there.
.3fa7	b1 2c		lda ($2c),y			lda 	(temp1),y
.3fa9	c5 34		cmp $34				cmp 	highMemory+1 			; if < high memory then it cannot be something stored
.3fab	90 1b		bcc $3fc8			bcc 	_COCFail 				; in hard memory.
.3fad	a0 00		ldy #$00			ldy 	#0 						; copy target address - 1 into temp2
.3faf	b1 2c		lda ($2c),y			lda 	(temp1),y 				; when allocating hard memory, the overall size is
.3fb1	e9 01		sbc #$01			sbc 	#1 						; in the previous byte.
.3fb3	85 2e		sta $2e				sta 	temp2
.3fb5	c8		iny				iny
.3fb6	b1 2c		lda ($2c),y			lda 	(temp1),y
.3fb8	e9 00		sbc #$00			sbc 	#0
.3fba	85 2f		sta $2f				sta 	temp2+1
.3fbc	a0 00		ldy #$00			ldy 	#0 						; how large is this physical chunk.
.3fbe	b1 2e		lda ($2e),y			lda 	(temp2),y
.3fc0	38		sec				sec  							; maximum character capacity.
.3fc1	e9 02		sbc #$02			sbc 	#2
.3fc3	cd 11 0d	cmp $0d11			cmp 	srcStrLen 				; if >= the required length
.3fc6	b0 02		bcs $3fca			bcs 	_COCCanReuse
.3fc8					_COCFail:
.3fc8	18		clc				clc
.3fc9	60		rts				rts
.3fca					_COCCanReuse:
.3fca	38		sec				sec
.3fcb	60		rts				rts
.3fcc					RequiresConcretion:
.3fcc	a5 2b		lda $2b				lda 	temp0+1 				; get MSB of address of string to be written
.3fce	c5 34		cmp $34				cmp 	highMemory+1 			; if >= high memory it is concreted
.3fd0	b0 0a		bcs $3fdc			bcs 	_RCSucceed 				; so it needs concreting again - duplication.
.3fd2	a5 3a		lda $3a				lda 	softMemAlloc+1 			; have we allocated any soft memory yet ?
.3fd4	f0 08		beq $3fde			beq 	_RCFail 				; if not, this cannot be soft memory.
.3fd6	a5 2b		lda $2b				lda 	temp0+1 				; get MSB of address of string to be written
.3fd8	c5 3a		cmp $3a				cmp 	softMemAlloc+1 			; if >= soft mem alloc it is either soft
.3fda	90 02		bcc $3fde			bcc 	_RCFail 				; so concreting
.3fdc					_RCSucceed:
.3fdc	38		sec				sec
.3fdd	60		rts				rts
.3fde					_RCFail:
.3fde	18		clc				clc
.3fdf	60		rts				rts
.3fe0					AllocateHardMemory:
.3fe0	98		tya				tya
.3fe1	48		pha				pha
.3fe2	ad 11 0d	lda $0d11			lda 	srcStrLen 				; characters in string
.3fe5	69 0a		adc #$0a			adc 	#1+1+8 					; one for hard memory size, one for string size, extra for expansion
.3fe7	b0 04		bcs $3fed			bcs 	_AHMSetMax 				; max out that amount.
.3fe9	c9 fe		cmp #$fe			cmp 	#MaxStringSize+2
.3feb	90 02		bcc $3fef			bcc 	_AHMIsOkay
.3fed					_AHMSetMax:
.3fed	a9 fe		lda #$fe			lda 	#MaxStringSize+2
.3fef					_AHMIsOkay:
.3fef	48		pha				pha	 							; save size to be allocated
.3ff0	49 ff		eor #$ff			eor 	#$FF 					; complement and add to high Memory
.3ff2	38		sec				sec  							; and copy result to TOS as target address.
.3ff3	65 33		adc $33				adc 	highMemory
.3ff5	85 33		sta $33				sta 	highMemory
.3ff7	a5 34		lda $34				lda 	highMemory+1
.3ff9	69 ff		adc #$ff			adc 	#$FF
.3ffb	85 34		sta $34				sta 	highMemory+1
.3ffd	a0 00		ldy #$00			ldy 	#0 						; Y = 0
.3fff	68		pla				pla 							; get the total size of the storage block
.4000	91 33		sta ($33),y			sta 	(highMemory),y 			; and set it
.4002	18		clc				clc
.4003	a5 33		lda $33				lda		highMemory 				; point the target address to the byte after this.
.4005	69 01		adc #$01			adc 	#1
.4007	91 2c		sta ($2c),y			sta 	(temp1),y
.4009	a5 34		lda $34				lda 	highMemory+1
.400b	69 00		adc #$00			adc 	#0
.400d	c8		iny				iny
.400e	91 2c		sta ($2c),y			sta 	(temp1),y
.4010	68		pla				pla
.4011	a8		tay				tay
.4012	60		rts				rts
.4013					CopyStringToHardMemory:
.4013	98		tya				tya
.4014	48		pha				pha
.4015	a0 00		ldy #$00			ldy 	#0 						; copy target address to temp2
.4017	b1 2c		lda ($2c),y			lda 	(temp1),y
.4019	85 2e		sta $2e				sta 	temp2
.401b	c8		iny				iny
.401c	b1 2c		lda ($2c),y			lda 	(temp1),y
.401e	85 2f		sta $2f				sta 	temp2+1
.4020	ac 11 0d	ldy $0d11			ldy 	srcStrLen 				; copy this + 1 characters, (length too) hence $FF compare
.4023					_CSTHMLoop:
.4023	b1 2a		lda ($2a),y			lda 	(temp0),y
.4025	91 2e		sta ($2e),y			sta 	(temp2),y
.4027	88		dey				dey
.4028	c0 ff		cpy #$ff			cpy 	#$FF 					; this does the +1
.402a	d0 f7		bne $4023			bne 	_CSTHMLoop
.402c	68		pla				pla
.402d	a8		tay				tay
.402e	60		rts				rts
.402f					CheckSpecialConcretion:
.402f	ad 11 0d	lda $0d11			lda 	srcStrLen 				; check string is null e.g. length = 0
.4032	f0 02		beq $4036			beq 	_CSCNullString
.4034	18		clc				clc
.4035	60		rts				rts
.4036					_CSCNullString:
.4036	a9 00		lda #$00			lda 	#0 						; by always returning this address we don't waste
.4038	8d ce 0a	sta $0ace			sta 	NullString		 		; storage on null strings.
.403b	a9 ce		lda #$ce			lda 	#(NullString) & $FF
.403d	85 2a		sta $2a				sta 	temp0
.403f	a9 0a		lda #$0a			lda 	#(NullString) >> 8
.4041	85 2b		sta $2b				sta 	1+(temp0)
.4043	38		sec				sec
.4044	60		rts				rts

;******  Return to file: string/string.asm

.4045					stringHandler:
.4045	7c 48 40	jmp ($4048,x)			jmp 	(stringVectors,x)
.4048					stringVectors:
>4048	5a 40					.word _DummyControlHandler ; index 0
>404a	a8 3d					.word StringChrs           ; index 2
>404c	a4 3e					.word StrClone             ; index 4
>404e	1c 3e					.word StringConcat         ; index 6
>4050	b7 3d					.word StringNull           ; index 8
>4052	d3 3d					.word STRCompare           ; index 10
>4054	ca 3e					.word CaseString           ; index 12
>4056	0f 3f					.word StringSubstring      ; index 14
>4058	63 3f					.word StringWrite          ; index 16
.405a					_DummyControlHandler:
.405a	60		rts			rts

;******  Return to file: basic.asm

.405b					section_end_string:
.405b					section_start_tokeniser:

;******  Processing file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/detokenise/detokenise.asm

.0d12					deTokeniseVector:
>0d12							.fill 	2
.0d14					lastCharacterClass:
>0d14							.fill 	1
.0d15					indent:
>0d15							.fill 	1
.405b					ListLine:
.405b	48		pha				pha								; enter here to list to console. sets the output vector
.405c	a9 93		lda #$93			lda 	#(deTokenPrint) & $FF
.405e	8d 12 0d	sta $0d12			sta 	deTokeniseVector
.4061	a9 41		lda #$41			lda 	#(deTokenPrint) >> 8
.4063	8d 13 0d	sta $0d13			sta 	1+(deTokeniseVector)
.4066	68		pla				pla
.4067					Detokenise:
.4067	18		clc				clc 							; space required for line number.
.4068	69 06		adc #$06			adc 	#6
.406a	8d 15 0d	sta $0d15			sta 	indent
.406d	a9 ff		lda #$ff			lda 	#$FF 					; last thing printed is a dummy value.
.406f	8d 14 0d	sta $0d14			sta 	lastCharacterClass
.4072	a2 02		ldx #$02			ldx 	#2
.4074	a9 00		lda #$00			lda 	#0 						; clear upper two bytes
.4076	95 a8		sta $a8,x			sta 	esInt2,x
.4078	95 b0		sta $b0,x			sta 	esInt3,x
.407a	a0 01		ldy #$01			ldy 	#1 						; copy line number to stack,2 (as using stack 0,1 for list range)
.407c	b1 28		lda ($28),y			lda 	(codePtr),y
.407e	95 98		sta $98,x			sta 	esInt0,x
.4080	c8		iny				iny
.4081	b1 28		lda ($28),y			lda 	(codePtr),y
.4083	95 a0		sta $a0,x			sta 	esInt1,x
.4085	a9 84		lda #$84			lda 	#LTYLineNumber
.4087	20 6e 41	jsr $416e			jsr 	ListOutputCharacter
.408a	a9 0a		lda #$0a			lda 	#10 					; base 10
.408c	20 32 41	jsr $4132			jsr 	DTPrintInteger 			; print as integer.
.408f	a0 00		ldy #$00			ldy 	#0 						; get length
.4091	b1 2a		lda ($2a),y			lda 	(temp0),y 				; into X
.4093	aa		tax				tax
.4094					_DTPadOut:
.4094	a9 20		lda #$20			lda 	#" " 					; pad out to indent.
.4096	20 6e 41	jsr $416e			jsr 	ListOutputCharacter
.4099	e8		inx				inx
.409a	ec 15 0d	cpx $0d15			cpx 	indent
.409d	d0 f5		bne $4094			bne 	_DTPadOut
.409f	a0 03		ldy #$03			ldy 	#3 						; start position.
.40a1					_DTListLoop:
.40a1	b1 28		lda ($28),y			lda 	(codePtr),y
.40a3	c9 85		cmp #$85			cmp 	#TOK_STR 				; Inline string.
.40a5	f0 5e		beq $4105			beq 	_DTIsString
.40a7	c9 84		cmp #$84			cmp 	#TOK_FPC 				; Floating point
.40a9	f0 56		beq $4101			beq 	_DTIsFloat
.40ab	c9 c5		cmp #$c5			cmp 	#TKW_AMP 				; & hex marker
.40ad	f0 16		beq $40c5			beq 	_DTHexConstant
.40af	c9 80		cmp #$80			cmp 	#TOK_EOL 				; End of Line
.40b1	d0 06		bne $40b9			bne 	_DTNotEnd
.40b3	a9 ff		lda #$ff			lda 	#255 					; print CR
.40b5	20 6e 41	jsr $416e			jsr 	ListOutputCharacter
.40b8	60		rts				rts
.40b9					_DTNotEnd:
.40b9	c9 00		cmp #$00			cmp 	#0
.40bb	30 38		bmi $40f5			bmi 	_DTIsToken
.40bd	c9 40		cmp #$40			cmp 	#$40
.40bf	90 3a		bcc $40fb			bcc 	_DTIsIdentifier
.40c1	a9 0a		lda #$0a			lda 	#10 					; this is the base, unsigned decimal
.40c3	d0 0d		bne $40d2			bne 	_DTConstant
.40c5					_DTHexConstant:
.40c5	a9 26		lda #$26			lda 	#"&"
.40c7	20 6e 41	jsr $416e			jsr 	ListOutputCharacter
.40ca	c8		iny				iny
.40cb	a9 01		lda #$01			lda 	#1 						; switch to spaces so &xxxx is treated like a number.
.40cd	20 af 41	jsr $41af			jsr 	DTSwitchMode
.40d0	a9 10		lda #$10			lda 	#16						; print line unsigned hex
.40d2					_DTConstant:
.40d2	48		pha				pha
.40d3	a9 00		lda #$00			lda 	#0 						; now constant, may need spaces
.40d5	20 af 41	jsr $41af			jsr 	DTSwitchMode
.40d8	a9 86		lda #$86			lda 	#LTYConstant
.40da	20 6e 41	jsr $416e			jsr 	ListOutputCharacter
.40dd	a2 02		ldx #$02			ldx 	#2 						; get its value
.40df	8a		txa				txa
.40e0	a2 10		ldx #$10		ldx	#16
.40e2	20 88 3d	jsr $3d88		jsr	mainHandler
.40e5	aa		tax				tax
.40e6	68		pla				pla 							; get base back
.40e7	85 32		sta $32				sta 	tempShort
.40e9	98		tya				tya
.40ea	48		pha				pha
.40eb	a5 32		lda $32				lda 	tempShort 				; print in base A stck level X
.40ed	20 32 41	jsr $4132			jsr 	DTPrintInteger
.40f0	68		pla				pla
.40f1	a8		tay				tay
.40f2	4c a1 40	jmp $40a1			jmp 	_DTListLoop
.40f5					_DTIsToken:
.40f5	20 08 42	jsr $4208			jsr 	DTDecodeToken
.40f8	4c a1 40	jmp $40a1			jmp 	_DTListLoop
.40fb					_DTIsIdentifier:
.40fb	20 c1 41	jsr $41c1			jsr 	DTIdentifier
.40fe	4c a1 40	jmp $40a1			jmp 	_DTListLoop
.4101					_DTIsFloat:
>4101	db						.byte 	$DB
.4102	4c 01 41	jmp $4101			jmp 	_DTIsFloat
.4105					_DTIsString:
.4105	a9 01		lda #$01			lda 	#1 							; now punctuation, may need spaces
.4107	20 af 41	jsr $41af			jsr 	DTSwitchMode
.410a	a9 81		lda #$81			lda 	#LTYString
.410c	20 6e 41	jsr $416e			jsr 	ListOutputCharacter
.410f	a9 22		lda #$22			lda 	#'"'						; open quote
.4111	20 6e 41	jsr $416e			jsr 	ListOutputCharacter
.4114	a2 02		ldx #$02			ldx 	#2 							; evaluate string to TOS2.
.4116	8a		txa				txa
.4117	a2 10		ldx #$10		ldx	#16
.4119	20 88 3d	jsr $3d88		jsr	mainHandler
.411c	aa		tax				tax
.411d	b5 98		lda $98,x			lda 	esInt0,x 					; copy string address to temp0
.411f	85 2a		sta $2a				sta 	temp0
.4121	b5 a0		lda $a0,x			lda 	esInt1,x
.4123	85 2b		sta $2b				sta 	temp0+1
.4125	a9 00		lda #$00			lda 	#0 							; don't capitalise.
.4127	20 44 41	jsr $4144			jsr 	DTPrintLengthPrefix
.412a	a9 22		lda #$22			lda 	#'"'
.412c	20 6e 41	jsr $416e			jsr 	ListOutputCharacter
.412f	4c a1 40	jmp $40a1			jmp 	_DTListLoop

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/detokenise/dtprint.asm

.0d16					tPrintCount:
>0d16							.fill 	1
.4132					DTPrintInteger:
.4132	48		pha				pha									; save base
.4133	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.4135	85 2a		sta $2a				sta 	temp0
.4137	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.4139	85 2b		sta $2b				sta 	1+(temp0)
.413b	68		pla				pla
.413c	a8		tay				tay
.413d	8a		txa				txa
.413e	a2 12		ldx #$12		ldx	#18
.4140	20 88 3d	jsr $3d88		jsr	mainHandler
.4143	aa		tax				tax 								; then drop through here.
.4144					DTPrintLengthPrefix:
.4144	aa		tax				tax 								; A = 0 = don't case convert.
.4145	98		tya				tya
.4146	48		pha				pha
.4147	a0 00		ldy #$00			ldy 	#0 							; get string length = chars to print.
.4149	b1 2a		lda ($2a),y			lda 	(temp0),y
.414b	8d 16 0d	sta $0d16			sta 	tPrintCount
.414e	f0 1b		beq $416b			beq 	_DTPLPExit 					; empty string
.4150					_DTPLPLoop:
.4150	c8		iny				iny 								; get next.
.4151	b1 2a		lda ($2a),y			lda 	(temp0),y
.4153	29 7f		and #$7f			and 	#$7F
.4155	e0 00		cpx #$00			cpx 	#0 							; skip if not case converting
.4157	f0 0a		beq $4163			beq 	_DTPLPNoCase
.4159	c9 41		cmp #$41			cmp 	#"A" 						; if converting UC -> LC
.415b	90 06		bcc $4163			bcc 	_DTPLPNoCase
.415d	c9 5b		cmp #$5b			cmp 	#"Z"+1
.415f	b0 02		bcs $4163			bcs 	_DTPLPNoCase
.4161	49 20		eor #$20			eor 	#"A"^"a"
.4163					_DTPLPNoCase
.4163	20 6e 41	jsr $416e			jsr 	ListOutputCharacter 		; call handler
.4166	ce 16 0d	dec $0d16			dec 	tPrintCount 				; do all the characters
.4169	d0 e5		bne $4150			bne 	_DTPLPLoop
.416b					_DTPLPExit:
.416b	68		pla				pla
.416c	a8		tay				tay
.416d	60		rts				rts
.416e					ListOutputCharacter:
.416e	85 32		sta $32				sta 	tempShort
.4170	48		pha				pha
.4171	8a		txa				txa
.4172	48		pha				pha
.4173	98		tya				tya
.4174	48		pha				pha
.4175	a5 32		lda $32				lda 	tempShort 					; convert ASCII 6 bit (0-31) to 7 bit.
.4177	c9 20		cmp #$20			cmp 	#32
.4179	b0 0c		bcs $4187			bcs		_LOCHiBit
.417b	09 40		ora #$40			ora 	#64 						; conversion
.417d	c9 40		cmp #$40			cmp 	#64							; make l/c
.417f	f0 06		beq $4187			beq 	_LOCHiBit
.4181	c9 5b		cmp #$5b			cmp 	#65+26
.4183	b0 02		bcs $4187			bcs 	_LOCHiBit
.4185	69 20		adc #$20			adc 	#32
.4187					_LOCHiBit:
.4187	20 90 41	jsr $4190			jsr 	_LOCCallVector				; call o/p handler routine
.418a	68		pla				pla
.418b	a8		tay				tay
.418c	68		pla				pla
.418d	aa		tax				tax
.418e	68		pla				pla
.418f					_LOCExit:
.418f	60		rts				rts
.4190					_LOCCallVector:
.4190	6c 12 0d	jmp ($0d12)			jmp 	(deTokeniseVector)
.4193					deTokenPrint:
.4193	c9 00		cmp #$00			cmp 	#0 							; if bit 7 sets ink colour
.4195	30 06		bmi $419d			bmi 	_dtpInk
.4197	a2 16		ldx #$16		ldx	#22
.4199	20 f6 14	jsr $14f6		jsr	deviceHandler
.419c	60		rts				rts
.419d	c9 ff		cmp #$ff	_dtpInk:cmp 	#255 						; e.g. herhe, get ink and set it
.419f	f0 08		beq $41a9			beq 	_dtpCR						; except $FF => CRLF
.41a1	29 07		and #$07			and 	#7
.41a3	a2 08		ldx #$08		ldx	#8
.41a5	20 f6 14	jsr $14f6		jsr	deviceHandler
.41a8	60		rts				rts
.41a9					_dtpCR:
.41a9	a2 06		ldx #$06		ldx	#6
.41ab	20 f6 14	jsr $14f6		jsr	deviceHandler
.41ae	60		rts				rts
.41af					DTSwitchMode:
.41af	cd 14 0d	cmp $0d14			cmp 	LastCharacterClass 			; if changed, update character class
.41b2	f0 04		beq $41b8			beq 	_DTSMNoChange
.41b4	8d 14 0d	sta $0d14			sta 	LastCharacterClass
.41b7					_DTSMExit:
.41b7	60		rts				rts
.41b8					_DTSMNoChange:
.41b8	c9 01		cmp #$01			cmp 	#1 							; if didn't change to punctuation, two identifiers so we
.41ba	f0 fb		beq $41b7			beq 	_DTSMExit 					; need a space.
.41bc	a9 20		lda #$20			lda 	#" "
.41be	4c 6e 41	jmp $416e			jmp 	ListOutputCharacter

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/detokenise/identifier.asm

.41c1					DTIdentifier:
.41c1	a9 00		lda #$00			lda 	#0 							; now text, may need spaces
.41c3	20 af 41	jsr $41af			jsr 	DTSwitchMode
.41c6	a9 87		lda #$87			lda 	#LTYIdentifier
.41c8	20 6e 41	jsr $416e			jsr 	ListOutputCharacter
.41cb					_DTILoop:
.41cb	b1 28		lda ($28),y			lda 	(codePtr),y 				; output main bit of identifier.
.41cd	c9 2d		cmp #$2d			cmp 	#"-"						; make - back to _
.41cf	d0 02		bne $41d3			bne 	_DTINotUS
.41d1	a9 5f		lda #$5f			lda 	#"_"
.41d3					_DTINotUS:
.41d3	20 6e 41	jsr $416e			jsr 	ListOutputCharacter
.41d6	c8		iny				iny
.41d7	b1 28		lda ($28),y			lda 	(codePtr),y 				; until end identifier marker.
.41d9	c9 3a		cmp #$3a			cmp 	#$3A
.41db	90 ee		bcc $41cb			bcc 	_DTILoop
.41dd	c8		iny				iny
.41de	c9 3a		cmp #$3a			cmp 	#$3A 						; is it integer non array
.41e0	f0 25		beq $4207			beq 	_DTIExit 					; no postfix.
.41e2	48		pha				pha
.41e3	a9 01		lda #$01			lda  	#1 							; it ends in punctuation
.41e5	8d 14 0d	sta $0d14			sta 	LastCharacterClass
.41e8	a9 82		lda #$82			lda 	#LTYPunctuation
.41ea	20 6e 41	jsr $416e			jsr 	ListOutputCharacter
.41ed	68		pla				pla
.41ee	c9 3b		cmp #$3b			cmp 	#$3B
.41f0	f0 10		beq $4202			beq 	_DTIArray
.41f2	4a		lsr a				lsr 	a 							; array flag in C
.41f3	08		php				php
.41f4	49 1e		eor #$1e			eor 	#$3C/2 						; check if $
.41f6	f0 02		beq $41fa			beq 	_DTIDollar
.41f8	a9 07		lda #$07			lda 	#"$"^"#" 					; this if #, 0 if $
.41fa					_DTIDollar:
.41fa	49 24		eor #$24			eor 	#"$"
.41fc	20 6e 41	jsr $416e			jsr 	ListOutputCharacter
.41ff	28		plp				plp
.4200	90 05		bcc $4207			bcc 	_DTIExit
.4202					_DTIArray:
.4202	a9 28		lda #$28			lda 	#"("
.4204	20 6e 41	jsr $416e			jsr 	ListOutputCharacter
.4207					_DTIExit:
.4207	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/detokenise/token.asm

.4208					DTDecodeToken:
.4208	a2 00		ldx #$00			ldx 	#0 							; table number to use
.420a	b1 28		lda ($28),y			lda 	(codePtr),y
.420c	c9 84		cmp #$84			cmp 	#$84
.420e	b0 05		bcs $4215			bcs 	_DTNotShift
.4210	29 03		and #$03			and 	#3 							; get the shift 1..3
.4212	0a		asl a				asl 	a 							; put 2 x in X
.4213	aa		tax				tax
.4214	c8		iny				iny
.4215					_DTNotShift:
.4215	bd 17 45	lda $4517,x			lda 	TokenTableAddress,x 		; get the token table to use to decode it.
.4218	85 2a		sta $2a				sta 	temp0 						; point into temp0
.421a	bd 18 45	lda $4518,x			lda 	TokenTableAddress+1,x
.421d	85 2b		sta $2b				sta 	temp0+1
.421f	b1 28		lda ($28),y			lda 	(codePtr),y 				; get the token value.
.4221	c8		iny				iny 								; consume it.
.4222	aa		tax				tax
.4223	98		tya				tya
.4224	48		pha				pha
.4225					_DTFindText:
.4225	e0 86		cpx #$86			cpx 	#$86 						; finished ?
.4227	f0 11		beq $423a			beq 	_DTFoundText
.4229	ca		dex				dex
.422a	a0 00		ldy #$00			ldy 	#0 							; add length+1 to temp0
.422c	38		sec				sec
.422d	b1 2a		lda ($2a),y			lda 	(temp0),y
.422f	65 2a		adc $2a				adc 	temp0
.4231	85 2a		sta $2a				sta 	temp0
.4233	90 f0		bcc $4225			bcc 	_DTFindText
.4235	e6 2b		inc $2b				inc 	temp0+1
.4237	4c 25 42	jmp $4225			jmp 	_DTFindText
.423a					_DTFoundText:
.423a	a0 01		ldy #$01			ldy 	#1 							; get first character
.423c	b1 2a		lda ($2a),y			lda 	(temp0),y
.423e	29 7f		and #$7f			and 	#$7F 						; will have bit 7 set.
.4240	c9 41		cmp #$41			cmp 	#"A" 						; check for punctuation.
.4242	90 11		bcc $4255			bcc 	_DTIsPunctuation
.4244	c9 5b		cmp #$5b			cmp 	#"Z"+1
.4246	b0 0d		bcs $4255			bcs 	_DTIsPunctuation
.4248	a9 00		lda #$00			lda 	#0 							; now text, may need spaces
.424a	20 af 41	jsr $41af			jsr 	DTSwitchMode
.424d	a9 83		lda #$83			lda 	#LTYKeyword
.424f	20 6e 41	jsr $416e			jsr 	ListOutputCharacter
.4252	4c 5f 42	jmp $425f			jmp 	_DTPrint
.4255					_DTIsPunctuation:
.4255	a9 01		lda #$01			lda 	#1 							; now punctuation, may need spaces
.4257	20 af 41	jsr $41af			jsr 	DTSwitchMode
.425a	a9 82		lda #$82			lda 	#LTYPunctuation
.425c	20 6e 41	jsr $416e			jsr 	ListOutputCharacter
.425f					_DTPrint:
.425f	a9 01		lda #$01			lda 	#1 							; fix case.
.4261	20 44 41	jsr $4144			jsr 	DTPrintLengthPrefix 		; print it out.
.4264	a0 00		ldy #$00			ldy 	#0
.4266	b1 2a		lda ($2a),y			lda 	(temp0),y
.4268	a8		tay				tay
.4269	b1 2a		lda ($2a),y			lda 	(temp0),y
.426b	29 7f		and #$7f			and 	#$7F 						; will have bit 7 set.
.426d	c9 41		cmp #$41			cmp 	#"A" 						; check for punctuation.
.426f	90 04		bcc $4275			bcc 	_DTIsNowPunctuation
.4271	c9 5b		cmp #$5b			cmp 	#"Z"+1
.4273	90 05		bcc $427a			bcc 	_DTPExit
.4275					_DTIsNowPunctuation:
.4275	a9 01		lda #$01			lda 	#1
.4277	8d 14 0d	sta $0d14			sta		LastCharacterClass
.427a					_DTPExit:
.427a	68		pla				pla
.427b	a8		tay				tay
.427c	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/search.asm

.0d17					currentSet:
>0d17							.fill 	1
.427d					TokenSearch:
.427d	8a		txa				txa
.427e	48		pha				pha
.427f	98		tya				tya
.4280	48		pha				pha
.4281	a9 00		lda #$00			lda 	#0
.4283	8d 17 0d	sta $0d17			sta 	currentSet
.4286					_TSLoop:
.4286	ad 17 0d	lda $0d17			lda 	currentSet 					; 2 x currentset in X
.4289	0a		asl a				asl 	a
.428a	aa		tax				tax
.428b	bd 17 45	lda $4517,x			lda 	TokenTableAddress,x 		; set temp0 to the table address
.428e	85 2a		sta $2a				sta 	temp0
.4290	bd 18 45	lda $4518,x			lda 	TokenTableAddress+1,x
.4293	85 2b		sta $2b				sta 	temp0+1
.4295	20 bc 42	jsr $42bc			jsr 	TokenSearchOne 				; search one table
.4298	b0 0d		bcs $42a7			bcs 	_TSFound 					; found a token.
.429a	ee 17 0d	inc $0d17			inc 	currentSet 					; next set
.429d	ad 17 0d	lda $0d17			lda 	currentSet
.42a0	c9 04		cmp #$04			cmp 	#4
.42a2	d0 e2		bne $4286			bne 	_TSLoop 					; back if not done all four.
.42a4	18		clc				clc 								; clear carry and exit
.42a5	90 10		bcc $42b7			bcc 	_TSExit
.42a7					_TSFound:
.42a7	48		pha				pha 								; save token
.42a8	ad 17 0d	lda $0d17			lda 	currentSet					; if set zero no shift
.42ab	f0 05		beq $42b2			beq 	_TSNoShift
.42ad	09 80		ora #$80			ora 	#$80 						; Write as $81-$83
.42af	20 6d 43	jsr $436d			jsr 	TokenWrite
.42b2					_TSNoShift:
.42b2	68		pla				pla 								; get token back
.42b3	20 6d 43	jsr $436d			jsr 	TokenWrite 					; write it
.42b6	38		sec				sec 								; carry set indicating success
.42b7					_TSExit:
.42b7	68		pla				pla
.42b8	a8		tay				tay
.42b9	68		pla				pla
.42ba	aa		tax				tax
.42bb	60		rts				rts
.42bc					TokenSearchOne:
.42bc	a2 86		ldx #$86			ldx 	#$86 						; current token being tested.
.42be					_TSOLoop:
.42be	a0 00		ldy #$00			ldy 	#0
.42c0	b1 2a		lda ($2a),y			lda 	(temp0),y 					; get length of token
.42c2	f0 26		beq $42ea			beq 	_TSOFail 					; if zero, end of table
.42c4	cd cf 0a	cmp $0acf			cmp 	convertBuffer 				; length is the same, compare the text matches.
.42c7	f0 11		beq $42da			beq 	_TSOCheckText
.42c9					_TSONext:
.42c9	e8		inx				inx 								; bump token
.42ca	a0 00		ldy #$00			ldy 	#0							; get length
.42cc	b1 2a		lda ($2a),y			lda 	(temp0),y
.42ce	38		sec				sec
.42cf	65 2a		adc $2a				adc 	temp0 						; add to temp0 + 1
.42d1	85 2a		sta $2a				sta 	temp0
.42d3	90 e9		bcc $42be			bcc 	_TSOLoop
.42d5	e6 2b		inc $2b				inc 	temp0+1
.42d7	4c be 42	jmp $42be			jmp 	_TSOLoop
.42da					_TSOCheckText:
.42da	a8		tay				tay 								; compare length downto 1.
.42db					_TSOCheckLoop:
.42db	b1 2a		lda ($2a),y			lda 	(temp0),y 					; use EOR to compare
.42dd	59 cf 0a	eor $0acf,y			eor 	convertBuffer,y
.42e0	29 7f		and #$7f			and 	#$7F 						; ignore bit 7
.42e2	d0 e5		bne $42c9			bne 	_TSONext 					; different goto next.
.42e4	88		dey				dey 								; do all
.42e5	d0 f4		bne $42db			bne 	_TSOCheckLoop
.42e7	8a		txa				txa 								; return token in A and carry set
.42e8	38		sec				sec
.42e9	60		rts				rts
.42ea					_TSOFail:
.42ea	18		clc				clc
.42eb	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/test.asm

.42ec					TokTest:
.42ec	a2 ff		ldx #$ff				ldx 	#$FF
.42ee	9a		txs					txs
.42ef	a9 0c		lda #$0c			lda 	#(TokenText1) & $FF
.42f1	85 28		sta $28				sta 	codePtr
.42f3	a9 43		lda #$43			lda 	#(TokenText1) >> 8
.42f5	85 29		sta $29				sta 	1+(codePtr)
.42f7	20 0c 43	jsr $430c				jsr 	Tokenise
.42fa	a2 00		ldx #$00	TokStop:	ldx 	#0 					; compare vs precalculated result
.42fc	bd 0c 43	lda $430c,x	_TokCheck:	lda 	TokenBytes1,x
.42ff	dd 1b 0d	cmp $0d1b,x				cmp 	tokenBuffer,x
.4302	d0 fe		bne $4302	_TokFail:	bne 	_TokFail	 		; error.
.4304	e8		inx					inx
.4305	c9 80		cmp #$80				cmp 	#$80
.4307	d0 f3		bne $42fc				bne 	_TokCheck
.4309	4c ff ff	jmp $ffff				jmp 	$FFFF 				; successfully tokenised then quit.

;******  Processing file: tokeniser/tokenise/../../generated/toktest.inc

.430c					TokenText1:
.430c					TokenBytes1:

;******  Return to file: tokeniser/tokenise/test.asm


;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokenise.asm

.0d18					tokenHeader:
>0d18							.fill 	3
.0d1b					tokenBuffer:
>0d1b							.fill 	256
.0e1b					tokenBufferIndex:
>0e1b							.fill 	1
.430c					Tokenise:
.430c	20 86 43	jsr $4386			jsr 	TokeniseMakeASCIIZ 			; convert to ASCIIZ string.
.430f					TokeniseASCIIZ:
.430f	20 97 43	jsr $4397			jsr 	TokeniseFixCase 			; remove controls and lower case outside quotes.
.4312	a9 00		lda #$00			lda 	#0 							; reset the token buffer index
.4314	8d 1b 0e	sta $0e1b			sta 	tokenBufferIndex
.4317	a8		tay				tay 								; start pointer
.4318	a9 80		lda #$80			lda 	#$80 						; empty token buffer ($80 ends it)
.431a	8d 1b 0d	sta $0d1b			sta 	tokenBuffer
.431d					_TokLoop:
.431d	b1 28		lda ($28),y			lda 	(codePtr),y 				; get next character
.431f	f0 46		beq $4367			beq 	_TokExit 					; if zero, then exit.
.4321	c8		iny				iny 								; skip over spaces.
.4322	c9 20		cmp #$20			cmp 	#" "
.4324	f0 f7		beq $431d			beq 	_TokLoop
.4326	88		dey				dey 								; point back to character.
.4327	c9 26		cmp #$26			cmp 	#"&"						; Hexadecimal constant.
.4329	f0 18		beq $4343			beq 	_TokHexConst
.432b	c9 22		cmp #$22			cmp 	#'"'						; Quoted String
.432d	f0 23		beq $4352			beq 	_TokQString
.432f	c9 5b		cmp #$5b			cmp 	#"Z"+1 						; > 'Z' is punctuation
.4331	b0 26		bcs $4359			bcs 	_TokPunctuation
.4333	c9 41		cmp #$41			cmp 	#"A" 						; A..Z identifier
.4335	b0 29		bcs $4360			bcs 	_TokIdentifier
.4337	c9 3a		cmp #$3a			cmp 	#"9"+1
.4339	b0 1e		bcs $4359			bcs 	_TokPunctuation 			; between 9 and A exclusive, punctuation
.433b	c9 30		cmp #$30			cmp 	#"0"
.433d	90 1a		bcc $4359			bcc 	_TokPunctuation 			; < 0, punctuation.
.433f	a9 0a		lda #$0a			lda 	#10  						; 0..9 constant in base 10.
.4341	d0 08		bne $434b			bne 	_TokConst
.4343					_TokHexConst:
.4343	c8		iny				iny									; consume token.
.4344	a9 c5		lda #$c5			lda 	#TKW_AMP 					; Write ampersand token out
.4346	20 6d 43	jsr $436d			jsr 	TokenWrite
.4349	a9 10		lda #$10			lda 	#16
.434b					_TokConst:
.434b	20 55 44	jsr $4455			jsr 	TokeniseInteger
.434e	b0 cd		bcs $431d			bcs 	_TokLoop
.4350	90 18		bcc $436a			bcc 	_TokFail
.4352					_TokQString:
.4352	20 eb 44	jsr $44eb			jsr 	TokeniseString
.4355	b0 c6		bcs $431d			bcs 	_TokLoop
.4357	90 11		bcc $436a			bcc 	_TokFail
.4359					_TokPunctuation:
.4359	20 ca 44	jsr $44ca			jsr 	TokenisePunctuation
.435c	b0 bf		bcs $431d			bcs 	_TokLoop
.435e	90 0a		bcc $436a			bcc 	_TokFail
.4360					_TokIdentifier:
.4360	20 c6 43	jsr $43c6			jsr 	TokeniseIdentifier
.4363	b0 b8		bcs $431d			bcs 	_TokLoop
.4365	90 03		bcc $436a			bcc 	_TokFail
.4367					_TokExit:
.4367	a9 01		lda #$01			lda 	#1
.4369	60		rts				rts
.436a					_TokFail:
.436a	a9 00		lda #$00			lda 	#0
.436c	60		rts				rts
.436d					TokenWrite:
.436d	85 32		sta $32				sta 	tempShort 					; save XA
.436f	48		pha				pha
.4370	8a		txa				txa
.4371	48		pha				pha
.4372	a5 32		lda $32				lda 	tempShort
.4374	ae 1b 0e	ldx $0e1b			ldx 	tokenBufferIndex 			; geet index
.4377	9d 1b 0d	sta $0d1b,x			sta 	tokenBuffer,x 				; write byte to buffer
.437a	a9 80		lda #$80			lda 	#TOK_EOL 					; pre-emptively write EOL marker after
.437c	9d 1c 0d	sta $0d1c,x			sta 	tokenBuffer+1,x
.437f	ee 1b 0e	inc $0e1b			inc 	tokenBufferIndex 			; bump index
.4382	68		pla				pla
.4383	aa		tax				tax
.4384	68		pla				pla
.4385	60		rts				rts
.4386					TokeniseMakeASCIIZ:
.4386	a0 00		ldy #$00			ldy 	#0							; get length of string.
.4388	b1 28		lda ($28),y			lda 	(codePtr),y
.438a	a8		tay				tay
.438b	c8		iny				iny 								; +1, the NULL goes here.
.438c	a9 00		lda #$00			lda 	#0
.438e	91 28		sta ($28),y			sta 	(codePtr),y 				; write the trailing NULL.
.4390	e6 28		inc $28				inc 	codePtr 					; bump the pointer.
.4392	d0 02		bne $4396			bne 	_TMKAExit
.4394	e6 29		inc $29				inc 	codePtr+1
.4396					_TMKAExit:
.4396	60		rts				rts
.4397					TokeniseFixCase:
.4397	a0 00		ldy #$00			ldy 	#0 							; position in buffer.
.4399	a2 01		ldx #$01			ldx 	#1 							; bit 0 of this is 'in quotes'
.439b					_TFCFlipQ:
.439b	8a		txa				txa
.439c	49 01		eor #$01			eor 	#1
.439e	aa		tax				tax
.439f					_TFCLoop:
.439f	b1 28		lda ($28),y			lda 	(codePtr),y 				; get character
.43a1	f0 22		beq $43c5			beq 	_TFCExit 					; if zero exit.
.43a3	c9 20		cmp #$20			cmp 	#32 						; if control
.43a5	90 1a		bcc $43c1			bcc 	_TFCControl
.43a7	c8		iny				iny 								; preconsume
.43a8	c9 22		cmp #$22			cmp 	#'"'
.43aa	f0 ef		beq $439b			beq 	_TFCFlipQ
.43ac	c9 61		cmp #$61			cmp 	#"a"						; check if L/C
.43ae	90 ef		bcc $439f			bcc 	_TFCLoop
.43b0	c9 7b		cmp #$7b			cmp 	#"z"+1
.43b2	b0 eb		bcs $439f			bcs 	_TFCLoop
.43b4	e0 00		cpx #$00			cpx 	#0 							; in quotes, if so, leave alone.
.43b6	d0 e7		bne $439f			bne 	_TFCLoop
.43b8	88		dey				dey
.43b9	49 20		eor #$20			eor 	#"A"^"a"					; make U/C
.43bb					_TFCWrite:
.43bb	91 28		sta ($28),y			sta 	(codePtr),y
.43bd	c8		iny				iny
.43be	4c 9f 43	jmp $439f			jmp 	_TFCLoop
.43c1					_TFCControl:
.43c1	a9 20		lda #$20			lda 	#" "
.43c3	d0 f6		bne $43bb			bne 	_TFCWrite
.43c5					_TFCExit:
.43c5	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokident.asm

.43c6					TokeniseIdentifier:
.43c6	a2 00		ldx #$00			ldx 	#0
.43c8					_TICopyID:
.43c8	b1 28		lda ($28),y			lda 	(codePtr),y					; get characters
.43ca	c9 5f		cmp #$5f			cmp 	#"_" 						; underscore converted to minus internally.
.43cc	f0 16		beq $43e4			beq 	_TICopyUnderscore
.43ce	c9 2e		cmp #$2e			cmp 	#"."
.43d0	f0 14		beq $43e6			beq 	_TICopyIn
.43d2	c9 30		cmp #$30			cmp 	#"0"
.43d4	90 1b		bcc $43f1			bcc 	_TIEndCopy
.43d6	c9 3a		cmp #$3a			cmp 	#"9"+1
.43d8	90 0c		bcc $43e6			bcc 	_TICopyIn
.43da	c9 41		cmp #$41			cmp 	#"A"
.43dc	90 13		bcc $43f1			bcc 	_TIEndCopy
.43de	c9 5b		cmp #$5b			cmp 	#"Z"+1
.43e0	b0 0f		bcs $43f1			bcs		_TIEndCopy
.43e2	90 02		bcc $43e6			bcc 	_TICopyIn
.43e4					_TICopyUnderScore:
.43e4	a9 2d		lda #$2d			lda 	#"-"						; _ is mapped to -
.43e6					_TICopyIn:
.43e6	e8		inx				inx 								; write into buffer in 7 bit ASCII form
.43e7	9d cf 0a	sta $0acf,x			sta 	convertBuffer,x
.43ea	8e cf 0a	stx $0acf			stx 	convertBuffer
.43ed	c8		iny				iny 								; next character
.43ee	4c c8 43	jmp $43c8			jmp 	_TICopyID 					; loop round
.43f1					_TIEndCopy:
.43f1	a9 24		lda #$24			lda 	#"$"
.43f3	20 48 44	jsr $4448			jsr 	TIDCheckCopy
.43f6	a9 23		lda #$23			lda 	#"#"
.43f8	20 48 44	jsr $4448			jsr 	TIDCheckCopy
.43fb	a9 28		lda #$28			lda 	#"("
.43fd	20 48 44	jsr $4448			jsr 	TIDCheckCopy
.4400	20 7d 42	jsr $427d			jsr 	TokenSearch 				; is it a token
.4403	b0 41		bcs $4446			bcs 	_TIExit 					; if so, then exit.
.4405	98		tya				tya
.4406	48		pha				pha
.4407	a0 3a		ldy #$3a			ldy 	#$3A 						; default type.
.4409	ae cf 0a	ldx $0acf			ldx 	convertBuffer 				; is last character (
.440c	bd cf 0a	lda $0acf,x			lda 	convertBuffer,x
.440f	c9 28		cmp #$28			cmp 	#"("
.4411	d0 02		bne $4415			bne 	_TINotArray
.4413	ca		dex				dex 								; yes, remove it and convert to array.
.4414	c8		iny				iny
.4415					_TINotArray:
.4415	bd cf 0a	lda $0acf,x			lda 	convertBuffer,x 			; check for $
.4418	c9 24		cmp #$24			cmp 	#"$"
.441a	d0 03		bne $441f			bne 	_TINotString
.441c	ca		dex				dex
.441d	c8		iny				iny
.441e	c8		iny				iny
.441f					_TINotString:
.441f	bd cf 0a	lda $0acf,x			lda 	convertBuffer,x 			; check for #
.4422	c9 23		cmp #$23			cmp 	#"#"
.4424	d0 05		bne $442b			bne 	_TINotFloat
.4426	ca		dex				dex
.4427	c8		iny				iny
.4428	c8		iny				iny
.4429	c8		iny				iny
.442a	c8		iny				iny
.442b					_TINotFloat:
.442b	e8		inx				inx 								; write end marker for identifier.
.442c	98		tya				tya
.442d	9d cf 0a	sta $0acf,x			sta 	convertBuffer,x
.4430	8e cf 0a	stx $0acf			stx 	convertBuffer 				; update length.
.4433	a2 01		ldx #$01			ldx 	#1
.4435					_TIOutput:
.4435	bd cf 0a	lda $0acf,x			lda 	convertBuffer,x
.4438	29 3f		and #$3f			and 	#$3F
.443a	48		pha				pha
.443b	20 6d 43	jsr $436d			jsr 	TokenWrite
.443e	e8		inx				inx
.443f	68		pla				pla
.4440	c9 3a		cmp #$3a			cmp 	#$3A
.4442	90 f1		bcc $4435			bcc 	_TIOutput
.4444	68		pla				pla
.4445	a8		tay				tay
.4446					_TIExit:
.4446	38		sec				sec 								; this can't fail.
.4447	60		rts				rts
.4448					TIDCheckCopy:
.4448	d1 28		cmp ($28),y			cmp 	(codePtr),y
.444a	d0 08		bne $4454			bne 	_TIDCCExit
.444c	e8		inx				inx
.444d	9d cf 0a	sta $0acf,x			sta 	convertBuffer,x
.4450	8e cf 0a	stx $0acf			stx 	convertBuffer
.4453	c8		iny				iny
.4454					_TIDCCExit:
.4454	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokinteger.asm

.4455					TokeniseInteger:
.4455	85 2c		sta $2c				sta 	temp1 						; save base
.4457	a2 00		ldx #$00			ldx 	#0							; count of chars so far
.4459	8e cf 0a	stx $0acf			stx 	convertBuffer
.445c					_TIGetChars:
.445c	b1 28		lda ($28),y			lda 	(codePtr),y 				; check character is numeric
.445e	c9 30		cmp #$30			cmp 	#"0"
.4460	90 1f		bcc $4481			bcc 	_TIEndGet
.4462	c9 3a		cmp #$3a			cmp 	#"9"+1
.4464	90 10		bcc $4476			bcc 	_TIHaveChar
.4466	a5 2c		lda $2c				lda 	temp1 						; fail if not hex mode
.4468	c9 0a		cmp #$0a			cmp 	#10
.446a	f0 15		beq $4481			beq 	_TIEndGet
.446c	b1 28		lda ($28),y			lda 	(codePtr),y 				; check legitimate hex.
.446e	c9 41		cmp #$41			cmp 	#"A"
.4470	90 0f		bcc $4481			bcc 	_TIEndGet
.4472	c9 5b		cmp #$5b			cmp 	#"Z"+1
.4474	b0 0b		bcs $4481			bcs 	_TIEndGet
.4476					_TIHaveChar:
.4476	e8		inx				inx 								; write into buffer.
.4477	8e cf 0a	stx $0acf			stx 	convertBuffer
.447a	9d cf 0a	sta $0acf,x			sta 	convertBuffer,x
.447d	c8		iny				iny 								; next char
.447e	4c 5c 44	jmp $445c			jmp 	_TIGetChars
.4481					_TIEndGet:
.4481	e0 00		cpx #$00			cpx 	#0 							; no char acquired.
.4483	f0 1c		beq $44a1			beq 	_TIFail
.4485	98		tya				tya
.4486	48		pha				pha
.4487	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.4489	85 2a		sta $2a				sta 	temp0
.448b	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.448d	85 2b		sta $2b				sta 	1+(temp0)
.448f	a9 00		lda #$00			lda 	#0 							; stack level 0
.4491	a4 2c		ldy $2c				ldy 	temp1 						; base Y
.4493	a2 1a		ldx #$1a		ldx	#26
.4495	20 88 3d	jsr $3d88		jsr	mainHandler
.4498	68		pla				pla
.4499	a8		tay				tay
.449a	90 05		bcc $44a1			bcc 	_TIFail 					; didn't convert.
.449c	20 a3 44	jsr $44a3			jsr 	TIRecursiveOut 				; recursive output ?
.449f	38		sec				sec
.44a0	60		rts				rts
.44a1					_TIFail:
.44a1	18		clc				clc
.44a2	60		rts				rts
.44a3					TIRecursiveOut:
.44a3	a5 98		lda $98				lda 	esInt0 						; get value to output after possible recursion
.44a5	29 3f		and #$3f			and 	#$3F
.44a7	09 40		ora #$40			ora 	#$40
.44a9	48		pha				pha
.44aa	a5 98		lda $98				lda 	esInt0 						; are we recursing ?
.44ac	29 c0		and #$c0			and 	#$C0
.44ae	05 a0		ora $a0				ora 	esInt1
.44b0	05 a8		ora $a8				ora 	esInt2
.44b2	05 b0		ora $b0				ora 	esInt3
.44b4	f0 10		beq $44c6			beq 	_TIRONoRecursion
.44b6	a2 06		ldx #$06			ldx 	#6 							; shift right x 6
.44b8					_TIROShift:
.44b8	46 b0		lsr $b0				lsr 	esInt3
.44ba	66 a8		ror $a8				ror 	esInt2
.44bc	66 a0		ror $a0				ror 	esInt1
.44be	66 98		ror $98				ror 	esInt0
.44c0	ca		dex				dex
.44c1	d0 f5		bne $44b8			bne 	_TIROShift
.44c3	20 a3 44	jsr $44a3			jsr 	TIRecursiveOut 				; call recursively
.44c6					_TIRONoRecursion:
.44c6	68		pla				pla 								; pull the old bit.
.44c7	4c 6d 43	jmp $436d			jmp 	TokenWrite

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokpunct.asm

.44ca					TokenisePunctuation:
.44ca	b1 28		lda ($28),y			lda	 	(codePtr),y 				; copy next 2 chars into convertBuffer
.44cc	8d d0 0a	sta $0ad0			sta 	convertBuffer+1
.44cf	c8		iny				iny
.44d0	b1 28		lda ($28),y			lda 	(codePtr),y
.44d2	8d d1 0a	sta $0ad1			sta 	convertBuffer+2
.44d5	c8		iny				iny 								; Y is +2
.44d6	a9 02		lda #$02			lda 	#2 							; 2 character string.
.44d8	8d cf 0a	sta $0acf			sta 	convertBuffer
.44db	20 7d 42	jsr $427d			jsr 	TokenSearch 				; search for that token.
.44de	b0 0a		bcs $44ea			bcs 	_TIFound
.44e0	ce cf 0a	dec $0acf			dec 	convertBuffer 				; make it a 1 character string
.44e3	88		dey				dey 								; Y is now +1
.44e4	20 7d 42	jsr $427d			jsr 	TokenSearch 				; search for that token.
.44e7	b0 01		bcs $44ea			bcs 	_TIFound
.44e9	88		dey				dey 								; Y is now +0, carry clear indicating failure.
.44ea					_TIFound:
.44ea	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokstring.asm

.44eb					TokeniseString:
.44eb	c8		iny				iny 								; skip opening quote
.44ec	a2 ff		ldx #$ff			ldx 	#255 						; count length of string.
.44ee	84 2a		sty $2a				sty 	temp0 						; save start.
.44f0					_TSGetLength:
.44f0	b1 28		lda ($28),y			lda 	(codePtr),y 				; get next
.44f2	f0 21		beq $4515			beq 	_TSFail						; end of line, fail
.44f4	c8		iny				iny
.44f5	e8		inx				inx
.44f6	c9 22		cmp #$22			cmp 	#'"' 						; until end quote found.
.44f8	d0 f6		bne $44f0			bne 	_TSGetLength
.44fa	a9 85		lda #$85			lda 	#TOK_STR 					; write string token out
.44fc	20 6d 43	jsr $436d			jsr 	TokenWrite
.44ff	8a		txa				txa 								; output length
.4500	20 6d 43	jsr $436d			jsr 	TokenWrite
.4503	a4 2a		ldy $2a				ldy 	temp0 						; get original position
.4505	e0 00		cpx #$00			cpx 	#0 							; check ended
.4507	f0 09		beq $4512			beq 	_TSExit
.4509					_TSOutput:
.4509	b1 28		lda ($28),y			lda 	(codePtr),y					; output character
.450b	20 6d 43	jsr $436d			jsr 	TokenWrite
.450e	c8		iny				iny
.450f	ca		dex				dex
.4510	d0 f7		bne $4509			bne 	_TSOutput
.4512					_TSExit:
.4512	c8		iny				iny 								; skip ending quote
.4513	38		sec				sec 								; return CS.
.4514	60		rts				rts
.4515					_TSFail:
.4515	18		clc				clc
.4516	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokentext.asm

.4517					TokenTableAddress:
>4517	1f 45						.word 	Group0Text
>4519	ed 46						.word 	Group1Text
>451b	3a 48						.word 	Group2Text
>451d	85 48						.word 	Group3Text

;******  Processing file: tokeniser/../generated/tokentext0.inc

.451f					Group0Text:
>451f	03 41 4e c4				.byte $03,$41,$4e,$c4                  ; $86 and
>4523	02 4f d2				.byte $02,$4f,$d2                      ; $87 or
>4526	03 58 4f d2				.byte $03,$58,$4f,$d2                  ; $88 xor
>452a	02 3e bd				.byte $02,$3e,$bd                      ; $89 >=
>452d	02 3c bd				.byte $02,$3c,$bd                      ; $8a <=
>4530	01 be					.byte $01,$be                          ; $8b >
>4532	01 bc					.byte $01,$bc                          ; $8c <
>4534	01 bd					.byte $01,$bd                          ; $8d =
>4536	02 3c be				.byte $02,$3c,$be                      ; $8e <>
>4539	01 ab					.byte $01,$ab                          ; $8f +
>453b	01 ad					.byte $01,$ad                          ; $90 -
>453d	02 3e be				.byte $02,$3e,$be                      ; $91 >>
>4540	02 3c bc				.byte $02,$3c,$bc                      ; $92 <<
>4543	01 aa					.byte $01,$aa                          ; $93 *
>4545	01 af					.byte $01,$af                          ; $94 /
>4547	03 4d 4f c4				.byte $03,$4d,$4f,$c4                  ; $95 mod
>454b	01 de					.byte $01,$de                          ; $96 ^
>454d	01 a1					.byte $01,$a1                          ; $97 !
>454f	01 bf					.byte $01,$bf                          ; $98 ?
>4551	06 52 45 50 45 41 d4			.byte $06,$52,$45,$50,$45,$41,$d4      ; $99 repeat
>4558	05 57 48 49 4c c5			.byte $05,$57,$48,$49,$4c,$c5          ; $9a while
>455e	03 46 4f d2				.byte $03,$46,$4f,$d2                  ; $9b for
>4562	02 49 c6				.byte $02,$49,$c6                      ; $9c if
>4565	07 44 45 46 50 52 4f c3			.byte $07,$44,$45,$46,$50,$52,$4f,$c3  ; $9d defproc
>456d	05 55 4e 54 49 cc			.byte $05,$55,$4e,$54,$49,$cc          ; $9e until
>4573	04 57 45 4e c4				.byte $04,$57,$45,$4e,$c4              ; $9f wend
>4578	04 4e 45 58 d4				.byte $04,$4e,$45,$58,$d4              ; $a0 next
>457d	04 54 48 45 ce				.byte $04,$54,$48,$45,$ce              ; $a1 then
>4582	05 45 4e 44 49 c6			.byte $05,$45,$4e,$44,$49,$c6          ; $a2 endif
>4588	07 45 4e 44 50 52 4f c3			.byte $07,$45,$4e,$44,$50,$52,$4f,$c3  ; $a3 endproc
>4590	01 a8					.byte $01,$a8                          ; $a4 (
>4592	04 4c 45 4e a8				.byte $04,$4c,$45,$4e,$a8              ; $a5 len(
>4597	04 53 47 4e a8				.byte $04,$53,$47,$4e,$a8              ; $a6 sgn(
>459c	04 41 42 53 a8				.byte $04,$41,$42,$53,$a8              ; $a7 abs(
>45a1	07 52 41 4e 44 4f 4d a8			.byte $07,$52,$41,$4e,$44,$4f,$4d,$a8  ; $a8 random(
>45a9	04 50 41 47 c5				.byte $04,$50,$41,$47,$c5              ; $a9 page
>45ae	04 54 52 55 c5				.byte $04,$54,$52,$55,$c5              ; $aa true
>45b3	05 46 41 4c 53 c5			.byte $05,$46,$41,$4c,$53,$c5          ; $ab false
>45b9	04 4d 49 4e a8				.byte $04,$4d,$49,$4e,$a8              ; $ac min(
>45be	04 4d 41 58 a8				.byte $04,$4d,$41,$58,$a8              ; $ad max(
>45c3	04 53 59 53 a8				.byte $04,$53,$59,$53,$a8              ; $ae sys(
>45c8	06 54 49 4d 45 52 a8			.byte $06,$54,$49,$4d,$45,$52,$a8      ; $af timer(
>45cf	06 45 56 45 4e 54 a8			.byte $06,$45,$56,$45,$4e,$54,$a8      ; $b0 event(
>45d6	04 47 45 54 a8				.byte $04,$47,$45,$54,$a8              ; $b1 get(
>45db	06 49 4e 4b 45 59 a8			.byte $06,$49,$4e,$4b,$45,$59,$a8      ; $b2 inkey(
>45e2	06 41 4c 4c 4f 43 a8			.byte $06,$41,$4c,$4c,$4f,$43,$a8      ; $b3 alloc(
>45e9	05 43 48 52 24 a8			.byte $05,$43,$48,$52,$24,$a8          ; $b4 chr$(
>45ef	06 4c 45 46 54 24 a8			.byte $06,$4c,$45,$46,$54,$24,$a8      ; $b5 left$(
>45f6	05 4d 49 44 24 a8			.byte $05,$4d,$49,$44,$24,$a8          ; $b6 mid$(
>45fc	07 52 49 47 48 54 24 a8			.byte $07,$52,$49,$47,$48,$54,$24,$a8  ; $b7 right$(
>4604	05 53 54 52 24 a8			.byte $05,$53,$54,$52,$24,$a8          ; $b8 str$(
>460a	04 56 41 4c a8				.byte $04,$56,$41,$4c,$a8              ; $b9 val(
>460f	05 50 45 45 4b a8			.byte $05,$50,$45,$45,$4b,$a8          ; $ba peek(
>4615	05 44 45 45 4b a8			.byte $05,$44,$45,$45,$4b,$a8          ; $bb deek(
>461b	05 4c 45 45 4b a8			.byte $05,$4c,$45,$45,$4b,$a8          ; $bc leek(
>4621	04 41 53 43 a8				.byte $04,$41,$53,$43,$a8              ; $bd asc(
>4626	04 49 4e 54 a8				.byte $04,$49,$4e,$54,$a8              ; $be int(
>462b	06 46 4c 4f 41 54 a8			.byte $06,$46,$4c,$4f,$41,$54,$a8      ; $bf float(
>4632	06 49 53 56 41 4c a8			.byte $06,$49,$53,$56,$41,$4c,$a8      ; $c0 isval(
>4639	07 55 50 50 45 52 24 a8			.byte $07,$55,$50,$50,$45,$52,$24,$a8  ; $c1 upper$(
>4641	07 4c 4f 57 45 52 24 a8			.byte $07,$4c,$4f,$57,$45,$52,$24,$a8  ; $c2 lower$(
>4649	01 c0					.byte $01,$c0                          ; $c3 @
>464b	01 fe					.byte $01,$fe                          ; $c4 ~
>464d	01 a6					.byte $01,$a6                          ; $c5 &
>464f	05 47 45 54 24 a8			.byte $05,$47,$45,$54,$24,$a8          ; $c6 get$(
>4655	07 49 4e 4b 45 59 24 a8			.byte $07,$49,$4e,$4b,$45,$59,$24,$a8  ; $c7 inkey$(
>465d	03 4d 45 cd				.byte $03,$4d,$45,$cd                  ; $c8 mem
>4661	01 a9					.byte $01,$a9                          ; $c9 )
>4663	01 ba					.byte $01,$ba                          ; $ca :
>4665	01 ac					.byte $01,$ac                          ; $cb ,
>4667	01 bb					.byte $01,$bb                          ; $cc ;
>4669	01 a7					.byte $01,$a7                          ; $cd '
>466b	02 54 cf				.byte $02,$54,$cf                      ; $ce to
>466e	04 53 54 45 d0				.byte $04,$53,$54,$45,$d0              ; $cf step
>4673	04 50 52 4f c3				.byte $04,$50,$52,$4f,$c3              ; $d0 proc
>4678	05 4c 4f 43 41 cc			.byte $05,$4c,$4f,$43,$41,$cc          ; $d1 local
>467e	03 44 49 cd				.byte $03,$44,$49,$cd                  ; $d2 dim
>4682	03 52 45 cd				.byte $03,$52,$45,$cd                  ; $d3 rem
>4686	03 4c 45 d4				.byte $03,$4c,$45,$d4                  ; $d4 let
>468a	05 49 4e 50 55 d4			.byte $05,$49,$4e,$50,$55,$d4          ; $d5 input
>4690	04 45 4c 53 c5				.byte $04,$45,$4c,$53,$c5              ; $d6 else
>4695	03 56 44 d5				.byte $03,$56,$44,$d5                  ; $d7 vdu
>4699	05 50 52 49 4e d4			.byte $05,$50,$52,$49,$4e,$d4          ; $d8 print
>469f	04 44 41 54 c1				.byte $04,$44,$41,$54,$c1              ; $d9 data
>46a4	05 49 4d 41 47 c5			.byte $05,$49,$4d,$41,$47,$c5          ; $da image
>46aa	02 41 d4				.byte $02,$41,$d4                      ; $db at
>46ad	04 46 4c 49 d0				.byte $04,$46,$4c,$49,$d0              ; $dc flip
>46b2	06 41 53 53 45 52 d4			.byte $06,$41,$53,$53,$45,$52,$d4      ; $dd assert
>46b9	04 50 4f 4b c5				.byte $04,$50,$4f,$4b,$c5              ; $de poke
>46be	04 44 4f 4b c5				.byte $04,$44,$4f,$4b,$c5              ; $df doke
>46c3	04 4c 4f 4b c5				.byte $04,$4c,$4f,$4b,$c5              ; $e0 loke
>46c8	03 49 4e cb				.byte $03,$49,$4e,$cb                  ; $e1 ink
>46cc	05 50 41 50 45 d2			.byte $05,$50,$41,$50,$45,$d2          ; $e2 paper
>46d2	03 43 4c d3				.byte $03,$43,$4c,$d3                  ; $e3 cls
>46d6	06 4c 4f 43 41 54 c5			.byte $06,$4c,$4f,$43,$41,$54,$c5      ; $e4 locate
>46dd	01 ae					.byte $01,$ae                          ; $e5 .
>46df	04 46 52 4f cd				.byte $04,$46,$52,$4f,$cd              ; $e6 from
>46e4	01 a3					.byte $01,$a3                          ; $e7 #
>46e6	05 43 4c 45 41 d2			.byte $05,$43,$4c,$45,$41,$d2          ; $e8 clear
>46ec	00					.byte $00

;******  Return to file: tokeniser/tokentext.asm


;******  Processing file: tokeniser/../generated/tokentext1.inc

.46ed					Group1Text:
>46ed	04 4c 4f 41 c4				.byte $04,$4c,$4f,$41,$c4              ; $86 load
>46f2	04 53 41 56 c5				.byte $04,$53,$41,$56,$c5              ; $87 save
>46f7	04 4c 49 53 d4				.byte $04,$4c,$49,$53,$d4              ; $88 list
>46fc	03 4e 45 d7				.byte $03,$4e,$45,$d7                  ; $89 new
>4700	05 42 52 45 41 cb			.byte $05,$42,$52,$45,$41,$cb          ; $8a break
>4706	03 52 55 ce				.byte $03,$52,$55,$ce                  ; $8b run
>470a	04 52 45 41 c4				.byte $04,$52,$45,$41,$c4              ; $8c read
>470f	07 52 45 53 54 4f 52 c5			.byte $07,$52,$45,$53,$54,$4f,$52,$c5  ; $8d restore
>4717	03 45 4e c4				.byte $03,$45,$4e,$c4                  ; $8e end
>471b	04 53 54 4f d0				.byte $04,$53,$54,$4f,$d0              ; $8f stop
>4720	04 58 45 4d d5				.byte $04,$58,$45,$4d,$d5              ; $90 xemu
>4725	04 47 4f 54 cf				.byte $04,$47,$4f,$54,$cf              ; $91 goto
>472a	05 47 4f 53 55 c2			.byte $05,$47,$4f,$53,$55,$c2          ; $92 gosub
>4730	06 52 45 54 55 52 ce			.byte $06,$52,$45,$54,$55,$52,$ce      ; $93 return
>4737	03 4f 52 c1				.byte $03,$4f,$52,$c1                  ; $94 ora
>473b	05 28 41 4e 44 a9			.byte $05,$28,$41,$4e,$44,$a9          ; $95 (and)
>4741	03 45 4f d2				.byte $03,$45,$4f,$d2                  ; $96 eor
>4745	03 41 44 c3				.byte $03,$41,$44,$c3                  ; $97 adc
>4749	03 53 54 c1				.byte $03,$53,$54,$c1                  ; $98 sta
>474d	03 4c 44 c1				.byte $03,$4c,$44,$c1                  ; $99 lda
>4751	03 43 4d d0				.byte $03,$43,$4d,$d0                  ; $9a cmp
>4755	03 53 42 c3				.byte $03,$53,$42,$c3                  ; $9b sbc
>4759	03 41 53 cc				.byte $03,$41,$53,$cc                  ; $9c asl
>475d	03 52 4f cc				.byte $03,$52,$4f,$cc                  ; $9d rol
>4761	03 4c 53 d2				.byte $03,$4c,$53,$d2                  ; $9e lsr
>4765	03 52 4f d2				.byte $03,$52,$4f,$d2                  ; $9f ror
>4769	03 53 54 d8				.byte $03,$53,$54,$d8                  ; $a0 stx
>476d	03 4c 44 d8				.byte $03,$4c,$44,$d8                  ; $a1 ldx
>4771	03 44 45 c3				.byte $03,$44,$45,$c3                  ; $a2 dec
>4775	03 49 4e c3				.byte $03,$49,$4e,$c3                  ; $a3 inc
>4779	03 53 54 da				.byte $03,$53,$54,$da                  ; $a4 stz
>477d	03 42 49 d4				.byte $03,$42,$49,$d4                  ; $a5 bit
>4781	03 53 54 d9				.byte $03,$53,$54,$d9                  ; $a6 sty
>4785	03 4c 44 d9				.byte $03,$4c,$44,$d9                  ; $a7 ldy
>4789	03 43 50 d9				.byte $03,$43,$50,$d9                  ; $a8 cpy
>478d	03 43 50 d8				.byte $03,$43,$50,$d8                  ; $a9 cpx
>4791	03 54 53 c2				.byte $03,$54,$53,$c2                  ; $aa tsb
>4795	03 54 52 c2				.byte $03,$54,$52,$c2                  ; $ab trb
>4799	03 4a 53 d2				.byte $03,$4a,$53,$d2                  ; $ac jsr
>479d	03 4a 4d d0				.byte $03,$4a,$4d,$d0                  ; $ad jmp
>47a1	03 42 50 cc				.byte $03,$42,$50,$cc                  ; $ae bpl
>47a5	03 42 4d c9				.byte $03,$42,$4d,$c9                  ; $af bmi
>47a9	03 42 56 c3				.byte $03,$42,$56,$c3                  ; $b0 bvc
>47ad	03 42 56 d3				.byte $03,$42,$56,$d3                  ; $b1 bvs
>47b1	03 42 43 c3				.byte $03,$42,$43,$c3                  ; $b2 bcc
>47b5	03 42 43 d3				.byte $03,$42,$43,$d3                  ; $b3 bcs
>47b9	03 42 4e c5				.byte $03,$42,$4e,$c5                  ; $b4 bne
>47bd	03 42 45 d1				.byte $03,$42,$45,$d1                  ; $b5 beq
>47c1	03 42 52 c1				.byte $03,$42,$52,$c1                  ; $b6 bra
>47c5	03 42 52 cb				.byte $03,$42,$52,$cb                  ; $b7 brk
>47c9	03 50 48 d0				.byte $03,$50,$48,$d0                  ; $b8 php
>47cd	03 43 4c c3				.byte $03,$43,$4c,$c3                  ; $b9 clc
>47d1	03 50 4c d0				.byte $03,$50,$4c,$d0                  ; $ba plp
>47d5	03 53 45 c3				.byte $03,$53,$45,$c3                  ; $bb sec
>47d9	03 52 54 c9				.byte $03,$52,$54,$c9                  ; $bc rti
>47dd	03 50 48 c1				.byte $03,$50,$48,$c1                  ; $bd pha
>47e1	03 43 4c c9				.byte $03,$43,$4c,$c9                  ; $be cli
>47e5	03 50 48 d9				.byte $03,$50,$48,$d9                  ; $bf phy
>47e9	03 52 54 d3				.byte $03,$52,$54,$d3                  ; $c0 rts
>47ed	03 50 4c c1				.byte $03,$50,$4c,$c1                  ; $c1 pla
>47f1	03 53 45 c9				.byte $03,$53,$45,$c9                  ; $c2 sei
>47f5	03 50 4c d9				.byte $03,$50,$4c,$d9                  ; $c3 ply
>47f9	03 44 45 d9				.byte $03,$44,$45,$d9                  ; $c4 dey
>47fd	03 54 58 c1				.byte $03,$54,$58,$c1                  ; $c5 txa
>4801	03 54 59 c1				.byte $03,$54,$59,$c1                  ; $c6 tya
>4805	03 54 58 d3				.byte $03,$54,$58,$d3                  ; $c7 txs
>4809	03 54 41 d9				.byte $03,$54,$41,$d9                  ; $c8 tay
>480d	03 54 41 d8				.byte $03,$54,$41,$d8                  ; $c9 tax
>4811	03 43 4c d6				.byte $03,$43,$4c,$d6                  ; $ca clv
>4815	03 54 53 d8				.byte $03,$54,$53,$d8                  ; $cb tsx
>4819	03 49 4e d9				.byte $03,$49,$4e,$d9                  ; $cc iny
>481d	03 44 45 d8				.byte $03,$44,$45,$d8                  ; $cd dex
>4821	03 43 4c c4				.byte $03,$43,$4c,$c4                  ; $ce cld
>4825	03 50 48 d8				.byte $03,$50,$48,$d8                  ; $cf phx
>4829	03 49 4e d8				.byte $03,$49,$4e,$d8                  ; $d0 inx
>482d	03 4e 4f d0				.byte $03,$4e,$4f,$d0                  ; $d1 nop
>4831	03 53 45 c4				.byte $03,$53,$45,$c4                  ; $d2 sed
>4835	03 50 4c d8				.byte $03,$50,$4c,$d8                  ; $d3 plx
>4839	00					.byte $00

;******  Return to file: tokeniser/tokentext.asm


;******  Processing file: tokeniser/../generated/tokentext2.inc

.483a					Group2Text:
>483a	05 56 50 4f 4b c5			.byte $05,$56,$50,$4f,$4b,$c5          ; $86 vpoke
>4840	05 56 44 4f 4b c5			.byte $05,$56,$44,$4f,$4b,$c5          ; $87 vdoke
>4846	05 56 4c 4f 41 c4			.byte $05,$56,$4c,$4f,$41,$c4          ; $88 vload
>484c	04 4d 4f 44 c5				.byte $04,$4d,$4f,$44,$c5              ; $89 mode
>4851	07 50 41 4c 45 54 54 c5			.byte $07,$50,$41,$4c,$45,$54,$54,$c5  ; $8a palette
>4859	06 53 50 52 49 54 c5			.byte $06,$53,$50,$52,$49,$54,$c5      ; $8b sprite
>4860	03 43 4c c7				.byte $03,$43,$4c,$c7                  ; $8c clg
>4864	04 52 45 43 d4				.byte $04,$52,$45,$43,$d4              ; $8d rect
>4869	05 46 52 41 4d c5			.byte $05,$46,$52,$41,$4d,$c5          ; $8e frame
>486f	04 54 45 58 d4				.byte $04,$54,$45,$58,$d4              ; $8f text
>4874	04 50 4c 4f d4				.byte $04,$50,$4c,$4f,$d4              ; $90 plot
>4879	04 4c 49 4e c5				.byte $04,$4c,$49,$4e,$c5              ; $91 line
>487e	05 50 41 49 4e d4			.byte $05,$50,$41,$49,$4e,$d4          ; $92 paint
>4884	00					.byte $00

;******  Return to file: tokeniser/tokentext.asm


;******  Processing file: tokeniser/../generated/tokentext3.inc

.4885					Group3Text:
>4885	06 56 50 45 45 4b a8			.byte $06,$56,$50,$45,$45,$4b,$a8      ; $86 vpeek(
>488c	06 56 44 45 45 4b a8			.byte $06,$56,$44,$45,$45,$4b,$a8      ; $87 vdeek(
>4893	09 53 50 52 49 54 45 2e			.byte $09,$53,$50,$52,$49,$54,$45,$2e,$58,$a8 ; $88 sprite.x(
>489b	58 a8
>489d	09 53 50 52 49 54 45 2e			.byte $09,$53,$50,$52,$49,$54,$45,$2e,$59,$a8 ; $89 sprite.y(
>48a5	59 a8
>48a7	04 48 49 54 a8				.byte $04,$48,$49,$54,$a8              ; $8a hit(
>48ac	06 4a 4f 59 2e 58 a8			.byte $06,$4a,$4f,$59,$2e,$58,$a8      ; $8b joy.x(
>48b3	06 4a 4f 59 2e 59 a8			.byte $06,$4a,$4f,$59,$2e,$59,$a8      ; $8c joy.y(
>48ba	06 4a 4f 59 2e 42 a8			.byte $06,$4a,$4f,$59,$2e,$42,$a8      ; $8d joy.b(
>48c1	06 43 4c 4f 43 4b a8			.byte $06,$43,$4c,$4f,$43,$4b,$a8      ; $8e clock(
>48c8	00					.byte $00

;******  Return to file: tokeniser/tokentext.asm


;******  Return to file: tokeniser/tokeniser.asm

.48c9					tokeniserHandler:
.48c9	7c cc 48	jmp ($48cc,x)			jmp 	(tokeniserVectors,x)
.48cc					tokeniserVectors:
>48cc	d8 48					.word _DummyControlHandler ; index 0
>48ce	67 40					.word Detokenise           ; index 2
>48d0	5b 40					.word ListLine             ; index 4
>48d2	ec 42					.word TokTest              ; index 6
>48d4	0c 43					.word Tokenise             ; index 8
>48d6	0f 43					.word TokeniseASCIIZ       ; index 10
.48d8					_DummyControlHandler:
.48d8	60		rts			rts

;******  Return to file: basic.asm

.48d9					section_end_tokeniser:
.48d9					section_start_variable:

;******  Processing file: variable/variable.asm


;******  Processing file: variable/array/access.asm

.48d9					AccessArray:
.48d9	8a		txa				txa
.48da	48		pha				pha
.48db	e8		inx				inx
.48dc	20 a5 49	jsr $49a5			jsr 	GetArrayDimensions 			; get the array dimensions one up from here.
.48df	68		pla				pla
.48e0	aa		tax				tax
.48e1	b5 98		lda $98,x			lda 	esInt0,x 					; restore address to follow in temp0.
.48e3	85 2a		sta $2a				sta 	temp0
.48e5	b5 a0		lda $a0,x			lda 	esInt1,x
.48e7	85 2b		sta $2b				sta 	temp0+1
.48e9	8a		txa				txa
.48ea	48		pha				pha
.48eb	98		tya				tya
.48ec	48		pha				pha
.48ed					_AAFollow:
.48ed	a0 00		ldy #$00			ldy 	#0
.48ef	b1 2a		lda ($2a),y			lda 	(temp0),y
.48f1	48		pha				pha
.48f2	c8		iny				iny
.48f3	b1 2a		lda ($2a),y			lda 	(temp0),y
.48f5	85 2b		sta $2b				sta 	temp0+1
.48f7	68		pla				pla
.48f8	85 2a		sta $2a				sta 	temp0
.48fa	e8		inx				inx 								; advance to next stack slot.
.48fb	a0 00		ldy #$00			ldy 	#0
.48fd	b1 2a		lda ($2a),y			lda 	(temp0),y 					; compare max index vs required index
.48ff	d5 98		cmp $98,x			cmp 	esInt0,x
.4901	c8		iny				iny
.4902	b1 2a		lda ($2a),y			lda 	(temp0),y 					; drop bit 7 of the size, indicates follow.
.4904	85 2c		sta $2c				sta 	temp1 						; save the size in temp1 for later use.
.4906	29 7f		and #$7f			and 	#$7F
.4908	f5 a0		sbc $a0,x			sbc 	esInt1,x
.490a	90 50		bcc $495c			bcc 	_AABadIndex 				; failed on index if max index < required.
.490c	18		clc				clc
.490d	a5 2a		lda $2a				lda 	temp0
.490f	69 02		adc #$02			adc 	#2
.4911	85 2a		sta $2a				sta 	temp0
.4913	90 02		bcc $4917			bcc 	_AANoCarry
.4915	e6 2b		inc $2b				inc 	temp0+1
.4917					_AANoCarry:
.4917	b5 98		lda $98,x			lda 	esInt0,x
.4919	85 2e		sta $2e				sta 	temp2
.491b	b5 a0		lda $a0,x			lda 	esInt1,x
.491d	85 2f		sta $2f				sta 	temp2+1
.491f	ac 1e 0e	ldy $0e1e			ldy 	varType
.4922	b9 ff 49	lda $49ff,y			lda 	CAActualSize-$3A,y
.4925	b4 91		ldy $91,x			ldy 	esType+1,x 					; is it top level
.4927	30 02		bmi $492b			bmi 	_AANotPointer
.4929	a9 02		lda #$02			lda 	#2 							; array of pointers is 2.
.492b					_AANotPointer:
.492b	20 a9 4a	jsr $4aa9			jsr 	MultiplyTemp2ByA 			; multiply the index by the data size, in temp2.
.492e	18		clc				clc
.492f	a5 2a		lda $2a				lda 	temp0
.4931	65 2e		adc $2e				adc 	temp2
.4933	85 2a		sta $2a				sta 	temp0
.4935	a5 2b		lda $2b				lda 	temp0+1
.4937	65 2f		adc $2f				adc 	temp2+1
.4939	85 2b		sta $2b				sta 	temp0+1
.493b	b5 91		lda $91,x			lda 	esType+1,x
.493d	30 07		bmi $4946			bmi 	_AAUsedAllIndices
.493f	a5 2c		lda $2c				lda 	temp1 						; check if this is a pointer array e.g. there are subarrays
.4941	10 14		bpl $4957			bpl 	_AABadDepth 				; no, too many indexes.
.4943	4c ed 48	jmp $48ed			jmp 	_AAFollow 					; otherwise follow them.
.4946					_AAUsedAllIndices:
.4946	a5 2c		lda $2c				lda 	temp1 						; get original high length byte.
.4948	30 0d		bmi $4957			bmi 	_AABadDepth 				; if -ve then this is an array of pointers.
.494a	68		pla				pla
.494b	a8		tay				tay
.494c	68		pla				pla
.494d	aa		tax				tax
.494e	a5 2a		lda $2a				lda 	temp0 						; copy address of array element to stack,x
.4950	95 98		sta $98,x			sta 	esInt0,x
.4952	a5 2b		lda $2b				lda 	temp0+1
.4954	95 a0		sta $a0,x			sta 	esInt1,x
.4956	60		rts				rts
.4957					_AABadDepth:
.4957	a2 1c		ldx #$1c			ldx 	#ErrorID_ArrayDepth
.4959	20 18 15	jsr $1518		jsr	errorHandler
.495c					_AABadIndex:
.495c	a2 1b		ldx #$1b			ldx 	#ErrorID_ArrayIndex
.495e	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: variable/variable.asm


;******  Processing file: variable/array/create.asm

.0e1c					elementSize:
>0e1c							.fill	 1
.4961					CreateArray:
.4961	20 38 4b	jsr $4b38			jsr 	AccessSetup 				; set up the basic stuff.
.4964	ad 1e 0e	lda $0e1e			lda 	varType 					; is the variable type an array
.4967	4a		lsr a				lsr 	a
.4968	90 36		bcc $49a0			bcc 	CANotArray 					; no, cause an error.
.496a	20 41 4c	jsr $4c41			jsr 	FindVariable 				; does the variable exist already
.496d	b0 2c		bcs $499b			bcs 	CAFound 					; cannot redefine it.
.496f	20 75 4b	jsr $4b75			jsr 	CreateVariable 				; create the variable entry.
.4972	a5 2a		lda $2a				lda 	temp0 						; push address of new variable entry on the stack
.4974	48		pha				pha
.4975	a5 2b		lda $2b				lda 	temp0+1
.4977	48		pha				pha
.4978	a2 00		ldx #$00			ldx 	#0
.497a	20 a5 49	jsr $49a5			jsr 	GetArrayDimensions 			; get the array dimensions
.497d	a2 00		ldx #$00			ldx 	#0 							; create at level $00
.497f	20 d5 49	jsr $49d5			jsr 	CreateArrayLevel 			; level to YA
.4982	aa		tax				tax 								; level now in YX
.4983	68		pla				pla 								; get address back to temp0 to write.
.4984	85 2b		sta $2b				sta 	temp0+1
.4986	68		pla				pla
.4987	85 2a		sta $2a				sta 	temp0
.4989	98		tya				tya 								; write YX there.
.498a	a0 06		ldy #$06			ldy 	#6
.498c	91 2a		sta ($2a),y			sta 	(temp0),y
.498e	88		dey				dey
.498f	8a		txa				txa
.4990	91 2a		sta ($2a),y			sta 	(temp0),y
.4992	ac 1f 0e	ldy $0e1f			ldy 	varEnd 						; restore Y and exit.
.4995	60		rts				rts
.4996					CASize:
.4996	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.4998	20 18 15	jsr $1518		jsr	errorHandler
.499b					CAFound:
.499b	a2 19		ldx #$19			ldx 	#ErrorID_DupArray
.499d	20 18 15	jsr $1518		jsr	errorHandler
.49a0					CANotArray:
.49a0	a2 1a		ldx #$1a			ldx 	#ErrorID_NotArray
.49a2	20 18 15	jsr $1518		jsr	errorHandler
.49a5					GetArrayDimensions:
.49a5	ad 1e 0e	lda $0e1e			lda 	varType 					; push variable type on the stack.
.49a8	48		pha				pha
.49a9	ac 1f 0e	ldy $0e1f			ldy 	varEnd
.49ac					_CAGetDimensions:
.49ac	8a		txa				txa 								; get the next level
.49ad	a2 0a		ldx #$0a		ldx	#10
.49af	20 88 3d	jsr $3d88		jsr	mainHandler
.49b2	aa		tax				tax
.49b3	b5 a0		lda $a0,x			lda 	esInt1,x 					; index must be < 8192
.49b5	29 e0		and #$e0			and 	#$E0
.49b7	15 a8		ora $a8,x			ora 	esInt2,x
.49b9	15 b0		ora $b0,x			ora 	esInt3,x
.49bb	d0 d9		bne $4996			bne 	CASize
.49bd	e8		inx				inx 								; next level.
.49be	b1 28		lda ($28),y			lda 	(codePtr),y 				; get/consume following character
.49c0	c8		iny				iny
.49c1	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; loop back if more dimensions
.49c3	f0 e7		beq $49ac			beq 	_CAGetDimensions
.49c5	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN 				; right bracket ?
.49c7	d0 cd		bne $4996			bne 	CASize
.49c9	a9 ff		lda #$ff			lda 	#$FF 						; set the type past the end to $FF so we know how many
.49cb	95 90		sta $90,x			sta 	esType,x 					; dimensions there are.
.49cd	68		pla				pla 								; restore the variable type ($3A-$3F)
.49ce	8d 1e 0e	sta $0e1e			sta 	varType
.49d1	8c 1f 0e	sty $0e1f			sty 	varEnd 						; save exit Y value, after dimensions
.49d4	60		rts				rts
.49d5					CreateArrayLevel:
.49d5	ac 1e 0e	ldy $0e1e			ldy 	varType
.49d8	b9 ff 49	lda $49ff,y			lda 	CAActualSize-$3A,y
.49db	8d 1c 0e	sta $0e1c			sta 	elementSize 				; get element size this level.
.49de	b4 91		ldy $91,x			ldy 	esType+1,x 					; is it top level
.49e0	30 05		bmi $49e7			bmi 	_CANotPointer
.49e2	a9 02		lda #$02			lda 	#2 							; array of pointers is 2.
.49e4	8d 1c 0e	sta $0e1c			sta 	elementSize
.49e7					_CANotPointer:
.49e7	a5 35		lda $35				lda 	lowMemory 					; start creating at temp0, saving start on stack.
.49e9	85 2a		sta $2a				sta 	temp0
.49eb	48		pha				pha
.49ec	a5 36		lda $36				lda 	lowMemory+1
.49ee	85 2b		sta $2b				sta 	temp0+1
.49f0	48		pha				pha
.49f1	20 72 4a	jsr $4a72			jsr 	AllocateArraySpace 			; allocate space for all array stuff at this level.
.49f4	a0 00		ldy #$00			ldy 	#0
.49f6	b5 98		lda $98,x			lda 	esInt0,x
.49f8	91 2a		sta ($2a),y			sta 	(temp0),y
.49fa	c8		iny				iny
.49fb	b5 a0		lda $a0,x			lda 	esInt1,x
.49fd	91 2a		sta ($2a),y			sta 	(temp0),y
.49ff	b5 91		lda $91,x			lda 	esType+1,x 					; do we have another level ?
.4a01	30 06		bmi $4a09			bmi 	_CALNotLast
.4a03	b1 2a		lda ($2a),y			lda 	(temp0),y 					; set bit 7, indicates an array of pointers to other levels.
.4a05	09 80		ora #$80			ora 	#$80
.4a07	91 2a		sta ($2a),y			sta 	(temp0),y
.4a09					_CALNotLast:
.4a09	a9 02		lda #$02			lda 	#2
.4a0b	20 2f 4a	jsr $4a2f			jsr 	_CALAddTemp0
.4a0e	b5 98		lda $98,x			lda 	esInt0,x 					; copy stack:01 to stack:23 so we can use it to
.4a10	95 a8		sta $a8,x			sta 	esInt2,x 					; count.
.4a12	b5 a0		lda $a0,x			lda 	esInt1,x
.4a14	95 b0		sta $b0,x			sta 	esInt3,x
.4a16					_CALClear:
.4a16	20 3f 4a	jsr $4a3f			jsr 	EraseOneElement
.4a19	ad 1c 0e	lda $0e1c			lda 	elementSize 				; move to next element
.4a1c	20 2f 4a	jsr $4a2f			jsr 	_CALAddTemp0
.4a1f	b5 a8		lda $a8,x			lda 	esInt2,x 					; decrement counter
.4a21	d0 02		bne $4a25			bne 	_CALNoBorrow
.4a23	d6 b0		dec $b0,x			dec 	esInt3,x
.4a25					_CALNoBorrow:
.4a25	d6 a8		dec $a8,x			dec 	esInt2,x
.4a27	b5 b0		lda $b0,x			lda 	esInt3,x 					; loop back if >= 0 - we need +1 because indices
.4a29	10 eb		bpl $4a16			bpl 	_CALClear 					; start at 0 e.g. x(10) is actually 11 array entries.
.4a2b	68		pla				pla 								; restore the start of this into YA.
.4a2c	a8		tay				tay
.4a2d	68		pla				pla
.4a2e	60		rts				rts
.4a2f					_CALAddTemp0:
.4a2f	18		clc				clc
.4a30	65 2a		adc $2a				adc 	temp0
.4a32	85 2a		sta $2a				sta 	temp0
.4a34	90 02		bcc $4a38			bcc 	_CALANoCarry
.4a36	e6 2b		inc $2b				inc 	temp0+1
.4a38					_CALANoCarry:
.4a38	60		rts				rts
.4a39					CAActualSize:
>4a39	04 04						.byte 	VarISize,VarISize
>4a3b	02 02						.byte 	VarSSize,VarSSize
>4a3d	06 06						.byte 	VarFSize,VarFSize
.4a3f					EraseOneElement:
.4a3f	b5 91		lda $91,x			lda 	esType+1,x 					; is this a list of sub arrays
.4a41	10 09		bpl $4a4c			bpl 	_EOESubArray
.4a43	a0 00		ldy #$00			ldy 	#0 							; write the empty variable value out.
.4a45	ad 1e 0e	lda $0e1e			lda 	varType
.4a48	20 df 4b	jsr $4bdf			jsr 	ZeroTemp0Y
.4a4b	60		rts				rts
.4a4c					_EOESubArray:
.4a4c	a5 2a		lda $2a				lda 	temp0 						; save temp0, these are effectively locals.
.4a4e	48		pha				pha
.4a4f	a5 2b		lda $2b				lda 	temp0+1
.4a51	48		pha				pha
.4a52	ad 1c 0e	lda $0e1c			lda 	elementSize 				; save element size
.4a55	48		pha				pha
.4a56	e8		inx				inx 								; create at next level
.4a57	20 d5 49	jsr $49d5			jsr 	CreateArrayLevel
.4a5a	ca		dex				dex
.4a5b	85 32		sta $32				sta 	tempShort 					; save A
.4a5d	68		pla				pla  								; restore element size.
.4a5e	8d 1c 0e	sta $0e1c			sta 	elementSize
.4a61	68		pla				pla 								; restore temp0, which is where this new array level goes.
.4a62	85 2b		sta $2b				sta 	temp0+1
.4a64	68		pla				pla
.4a65	85 2a		sta $2a				sta 	temp0
.4a67	98		tya				tya 								; store Y/A there
.4a68	a0 01		ldy #$01			ldy 	#1
.4a6a	91 2a		sta ($2a),y			sta 	(temp0),y
.4a6c	a5 32		lda $32				lda 	tempShort
.4a6e	88		dey				dey
.4a6f	91 2a		sta ($2a),y			sta 	(temp0),y
.4a71	60		rts				rts
.4a72					AllocateArraySpace:
.4a72	18		clc				clc 								; element count + 1 => temp2.
.4a73	b5 98		lda $98,x			lda 	esInt0,x
.4a75	69 01		adc #$01			adc 	#1
.4a77	85 2e		sta $2e				sta 	temp2
.4a79	b5 a0		lda $a0,x			lda 	esInt1,x
.4a7b	69 00		adc #$00			adc 	#0
.4a7d	85 2f		sta $2f				sta 	temp2+1
.4a7f	ad 1c 0e	lda $0e1c			lda 	elementSize 				; bytes per element
.4a82	20 a9 4a	jsr $4aa9			jsr 	MultiplyTemp2ByA 			; temp2 = (count + 1) x bytes per element.
.4a85	18		clc				clc 								; add 2 for 'max element' byte.
.4a86	a5 2e		lda $2e				lda 	temp2
.4a88	69 02		adc #$02			adc 	#2
.4a8a	85 2e		sta $2e				sta 	temp2
.4a8c	90 02		bcc $4a90			bcc 	_AASNoCarry
.4a8e	e6 2f		inc $2f				inc 	temp2+1
.4a90					_AASNoCarry:
.4a90	18		clc				clc 								; add to low memory, allocating space.
.4a91	a5 35		lda $35				lda 	lowMemory
.4a93	65 2e		adc $2e				adc 	temp2
.4a95	85 35		sta $35				sta 	lowMemory
.4a97	a5 36		lda $36				lda 	lowMemory+1
.4a99	65 2f		adc $2f				adc 	temp2+1
.4a9b	85 36		sta $36				sta 	lowMemory+1
.4a9d	b0 05		bcs $4aa4			bcs 	_AASFail 					; out of memory as adding causes wrapround
.4a9f	c5 34		cmp $34				cmp 	highMemory+1 				; >= high memory pointer.
.4aa1	b0 01		bcs $4aa4			bcs 	_AASFail
.4aa3	60		rts				rts
.4aa4					_AASFail:
.4aa4	a2 22		ldx #$22			ldx 	#ErrorID_Memory
.4aa6	20 18 15	jsr $1518		jsr	errorHandler
.4aa9					MultiplyTemp2ByA:
.4aa9	48		pha				pha
.4aaa	a5 2e		lda $2e				lda 	temp2 						; copy temp2 to temp3.
.4aac	85 30		sta $30				sta 	temp3
.4aae	a5 2f		lda $2f				lda 	temp2+1
.4ab0	85 31		sta $31				sta 	temp3+1
.4ab2	68		pla				pla
.4ab3	06 2e		asl $2e				asl 	temp2 						; double it.
.4ab5	26 2f		rol $2f				rol 	temp2+1
.4ab7	c9 02		cmp #$02			cmp 	#2 							; if x 2 then exit.
.4ab9	f0 15		beq $4ad0			beq 	_MTBAExit
.4abb	c9 06		cmp #$06			cmp 	#6 							; if x 6 then add temp3 to temp2
.4abd	d0 0d		bne $4acc			bne 	_MTBANotFloat
.4abf	18		clc				clc 								; so this will make it x 3
.4ac0	a5 2e		lda $2e				lda 	temp2
.4ac2	65 30		adc $30				adc 	temp3
.4ac4	85 2e		sta $2e				sta 	temp2
.4ac6	a5 2f		lda $2f				lda 	temp2+1
.4ac8	65 31		adc $31				adc 	temp3+1
.4aca	85 2f		sta $2f				sta 	temp2+1
.4acc					_MTBANotFloat:
.4acc	06 2e		asl $2e				asl 	temp2 						; double it.
.4ace	26 2f		rol $2f				rol 	temp2+1
.4ad0					_MTBAExit:
.4ad0	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/variable/access.asm

.0e1d					varHash:
>0e1d							.fill	1
.0e1e					varType:
>0e1e							.fill 	1
.0e1f					varEnd:
>0e1f							.fill 	1
.003b					hashList:
>003b							.fill 	2
.4ad1					AccessVariable:
.4ad1	aa		tax				tax 								; stack in X
.4ad2	c8		iny				iny									; look at second character
.4ad3	b1 28		lda ($28),y			lda 	(codePtr),y
.4ad5	88		dey				dey
.4ad6	c9 3a		cmp #$3a			cmp 	#TYPE_INT 					; is it the integer marker ($3A)
.4ad8	d0 15		bne $4aef			bne 	_AVLong 					; no, always use the hash tables.
.4ada	b1 28		lda ($28),y			lda 	(codePtr),y 				; this is the 6 bit ASCII of A-Z 1-26
.4adc	38		sec				sec 	 							; make it 0-25
.4add	e9 01		sbc #$01			sbc 	#1
.4adf	0a		asl a				asl 	a 							; x 4 as 4 bytes / variable.
.4ae0	0a		asl a				asl 	a
.4ae1	95 98		sta $98,x			sta 	esInt0,x
.4ae3	a9 0a		lda #$0a			lda 	#SingleLetterVar >> 8 		; make it an address
.4ae5	95 a0		sta $a0,x			sta 	esInt1,x
.4ae7	a9 80		lda #$80			lda 	#$80 						; type is an integer reference.
.4ae9	95 90		sta $90,x			sta 	esType,x
.4aeb	c8		iny				iny 								; skip over the variable reference in the code.
.4aec	c8		iny				iny  								; (1 letter, 1 type)
.4aed	8a		txa				txa 								; stack in A to return.
.4aee	60		rts				rts
.4aef					_AVLong:
.4aef	8a		txa				txa
.4af0	48		pha				pha
.4af1	20 38 4b	jsr $4b38			jsr 	AccessSetup 				; set up the basic information we need for later
.4af4	20 41 4c	jsr $4c41			jsr 	FindVariable 				; does the variable exist already ?
.4af7	b0 0e		bcs $4b07			bcs 	_AVFound 					; yes, then its found
.4af9	ad 1e 0e	lda $0e1e			lda 	varType 					; otherwise, is the variable type an array
.4afc	4a		lsr a				lsr 	a
.4afd	90 05		bcc $4b04			bcc 	_AVCanCreate 				; if not, we can autocreate
.4aff	a2 15		ldx #$15			ldx 	#ErrorID_noauto
.4b01	20 18 15	jsr $1518		jsr	errorHandler
.4b04					_AVCanCreate:
.4b04	20 75 4b	jsr $4b75			jsr 	CreateVariable 				; variable does not exist, create it.
.4b07					_AVFound:
.4b07	68		pla				pla
.4b08	aa		tax				tax
.4b09	18		clc				clc 								; copy temp0 (variable record address)
.4b0a	a5 2a		lda $2a				lda 	temp0 						; +5 (to point to the data)
.4b0c	69 05		adc #$05			adc 	#5 							; (first 5 bytes are link, name, hash)
.4b0e	95 98		sta $98,x			sta 	esInt0,x
.4b10	a5 2b		lda $2b				lda 	temp0+1
.4b12	69 00		adc #$00			adc 	#0
.4b14	95 a0		sta $a0,x			sta 	esInt1,x
.4b16	a9 00		lda #$00			lda 	#0
.4b18	95 a8		sta $a8,x			sta 	esInt2,x
.4b1a	95 b0		sta $b0,x			sta 	esInt3,x
.4b1c	ac 1e 0e	ldy $0e1e			ldy 	varType 					; get the type ID from the type.
.4b1f	b9 f8 4a	lda $4af8,y			lda 	_AVTypeTable-$3A,y 			; e.g. a reference to int/float/string.
.4b22	95 90		sta $90,x			sta 	esType,x
.4b24	ac 1f 0e	ldy $0e1f			ldy 	varEnd 						; restore Y
.4b27	ad 1e 0e	lda $0e1e			lda 	VarType 					; get variable type, put LSB into C
.4b2a	4a		lsr a				lsr 	a
.4b2b	90 03		bcc $4b30			bcc 	_AVNotArray 				; if carry set,it is an array variable.
.4b2d	20 d9 48	jsr $48d9			jsr 	AccessArray 				; array lookup. if LSB was set.
.4b30					_AVNotArray:
.4b30	8a		txa				txa 								; return stack in A and return
.4b31	60		rts				rts
.4b32					_AVTypeTable:
>4b32	80 80						.byte 	$80,$80						; integer
>4b34	c0 c0						.byte 	$C0,$C0 					; string
>4b36	81 81						.byte 	$81,$81 					; float
.4b38					AccessSetup:
.4b38	a9 00		lda #$00			lda 	#0 							; zero the hash byte.
.4b3a	8d 1d 0e	sta $0e1d			sta 	varHash
.4b3d	98		tya				tya
.4b3e	48		pha				pha
.4b3f	b1 28		lda ($28),y	_ASLoop:lda 	(codePtr),y					; get next identifier character
.4b41	c9 3a		cmp #$3a			cmp 	#$3A 						; is it 3A-3F which end all identifiers ?
.4b43	b0 0b		bcs $4b50			bcs 	_ASComplete
.4b45	18		clc				clc 								; add to the hash. Might improve this.
.4b46	6d 1d 0e	adc $0e1d			adc 	varHash
.4b49	8d 1d 0e	sta $0e1d			sta 	varHash
.4b4c	c8		iny				iny 								; next character
.4b4d	4c 3f 4b	jmp $4b3f			jmp 	_ASLoop
.4b50					_ASComplete:
.4b50	8d 1e 0e	sta $0e1e			sta 	varType 					; save variable type byte
.4b53	c8		iny				iny
.4b54	8c 1f 0e	sty $0e1f			sty 	varEnd 						; save the ending position.
.4b57	38		sec				sec 								; convert type byte from $3A-$3F to 0..5
.4b58	e9 3a		sbc #$3a			sbc 	#$3A
.4b5a	0a		asl a				asl 	a 							; multiply by hashTableSize (8 in this case)
.4b5b	0a		asl a				asl 	a
.4b5c	0a		asl a				asl 	a
.4b5d	0a		asl a				asl 	a 							; 2 bytes/word
.4b5e	85 2a		sta $2a				sta 	temp0 						; this is the offset to the start of the table.
.4b60	ad 1d 0e	lda $0e1d			lda 	varHash 					; get hash
.4b63	29 07		and #$07			and 	#(hashTableSize-1)			; force into range (for 8,0..7)
.4b65	0a		asl a				asl  	a 							; x 2 (for word) and clear carry
.4b66	65 2a		adc $2a				adc 	temp0 						; now offset from the start of the hash table.
.4b68	69 68		adc #$68			adc 	#hashTables & $FF 			; add to hash table base address
.4b6a	85 3b		sta $3b				sta 	hashList 					; making hashLists point to the head of the link list.
.4b6c	a9 0a		lda #$0a			lda 	#hashTables >> 8
.4b6e	69 00		adc #$00			adc 	#0
.4b70	85 3c		sta $3c				sta 	hashList+1
.4b72	68		pla				pla
.4b73	a8		tay				tay
.4b74	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/variable/create.asm

.4b75					CreateVariable:
.4b75	98		tya				tya 								; push Y on the stack twice.
.4b76	48		pha				pha									; position in code of the new variable.
.4b77	48		pha				pha
.4b78	ae 1e 0e	ldx $0e1e			ldx 	varType 					; get var type 0-5 from the var type
.4b7b	bd 9f 4b	lda $4b9f,x			lda		_CVSize-$3A,x 				; the bytes required for this new variable.
.4b7e	48		pha				pha 								; save length
.4b7f	a5 35		lda $35				lda 	lowMemory 					; set low Memory ptr to temp0
.4b81	85 2a		sta $2a				sta 	temp0 						; (address of the new variable)
.4b83	a5 36		lda $36				lda 	lowMemory+1
.4b85	85 2b		sta $2b				sta 	temp0+1
.4b87	68		pla				pla 								; get length
.4b88	18		clc				clc 								; add to low memory.
.4b89	65 35		adc $35				adc 	lowMemory
.4b8b	85 35		sta $35				sta 	lowMemory
.4b8d	90 08		bcc $4b97			bcc 	_CVNoCarry
.4b8f	e6 36		inc $36				inc 	lowMemory+1
.4b91	a5 36		lda $36				lda 	lowMemory+1 				; check out of memory.
.4b93	c5 34		cmp $34				cmp 	highMemory+1
.4b95	b0 3d		bcs $4bd4			bcs 	_CVMemory
.4b97					_CVNoCarry:
.4b97	ad 1d 0e	lda $0e1d			lda 	varHash 					; store hash at offset 4.
.4b9a	a0 04		ldy #$04			ldy 	#4
.4b9c	91 2a		sta ($2a),y			sta 	(temp0),y
.4b9e	68		pla				pla 								; offset, work out where the variable name is.
.4b9f	18		clc				clc
.4ba0	65 28		adc $28				adc 	codePtr
.4ba2	a0 02		ldy #$02			ldy 	#2 							; copy that into slots 2 + 3.
.4ba4	91 2a		sta ($2a),y			sta 	(temp0),y
.4ba6	a5 29		lda $29				lda 	codePtr+1
.4ba8	69 00		adc #$00			adc 	#0
.4baa	c8		iny				iny
.4bab	91 2a		sta ($2a),y			sta 	(temp0),y
.4bad	cd c9 0a	cmp $0ac9			cmp 	basePage+1 					; compare against the program base.
.4bb0	b0 03		bcs $4bb5			bcs 	_CVNotImmediate
.4bb2	20 17 4c	jsr $4c17			jsr 	CloneVariableName 			; we need to clone the variable name (immediate mode)
.4bb5					_CVNotImmediate:
.4bb5	a0 00		ldy #$00			ldy 	#0 							; copy current hash pointer in link
.4bb7	b1 3b		lda ($3b),y			lda 	(hashList),y 				; so we're inserting it in the front of a linked list
.4bb9	91 2a		sta ($2a),y			sta 	(temp0),y
.4bbb	c8		iny				iny
.4bbc	b1 3b		lda ($3b),y			lda 	(hashList),y
.4bbe	91 2a		sta ($2a),y			sta 	(temp0),y
.4bc0	a5 2b		lda $2b				lda 	temp0+1 					; set new link
.4bc2	91 3b		sta ($3b),y			sta 	(hashList),y
.4bc4	88		dey				dey
.4bc5	a5 2a		lda $2a				lda 	temp0
.4bc7	91 3b		sta ($3b),y			sta 	(hashList),y
.4bc9	ad 1e 0e	lda $0e1e			lda 	varType 					; type in A
.4bcc	a0 05		ldy #$05			ldy 	#5 							; offset in Y
.4bce	20 df 4b	jsr $4bdf			jsr 	ZeroTemp0Y 					; zero (temp0),y with whatever type.
.4bd1	68		pla				pla
.4bd2	a8		tay				tay
.4bd3	60		rts				rts
.4bd4					_CVMemory:
.4bd4	a2 22		ldx #$22			ldx 	#ErrorID_Memory
.4bd6	20 18 15	jsr $1518		jsr	errorHandler
>4bd9	09 07				_CVSize:.byte 	VarHSize+VarISize,VarHSize+VarASize 					; <storage for integer>
>4bdb	07 07						.byte 	VarHSize+VarSSize,VarHSize+VarASize 					; <storage for string>
>4bdd	0b 07						.byte 	VarHSize+VarFSize,VarHSize+VarASize 					; <storage for float>
.4bdf					ZeroTemp0Y:
.4bdf	4a		lsr a				lsr 	a 							; bit 0 in carry
.4be0	0a		asl a				asl 	a
.4be1	b0 19		bcs $4bfc			bcs 	_ZTExit 					; we don't initialise arrays.
.4be3	c9 3c		cmp #$3c			cmp 	#$3C 						; check string
.4be5	f0 16		beq $4bfd			beq 	_ZTWriteNullString 			; write "" string
.4be7	c9 3e		cmp #$3e			cmp 	#$3E 						; check float
.4be9	f0 22		beq $4c0d			beq 	_ZTWriteFloat
.4beb	98		tya				tya
.4bec	48		pha				pha
.4bed	a9 00		lda #$00			lda 	#0
.4bef	91 2a		sta ($2a),y			sta 	(temp0),y
.4bf1	c8		iny				iny
.4bf2	91 2a		sta ($2a),y			sta 	(temp0),y
.4bf4	c8		iny				iny
.4bf5	91 2a		sta ($2a),y			sta 	(temp0),y
.4bf7	c8		iny				iny
.4bf8	91 2a		sta ($2a),y			sta 	(temp0),y
.4bfa	68		pla				pla
.4bfb	a8		tay				tay
.4bfc					_ZTExit:
.4bfc	60		rts				rts
.4bfd					_ZTWriteNullString:
.4bfd	a9 00		lda #$00			lda 	#0 							; put a reference to null string as the default value.
.4bff	8d ce 0a	sta $0ace			sta 	NullString
.4c02	a9 ce		lda #$ce			lda 	#NullString & $FF
.4c04	91 2a		sta ($2a),y			sta 	(temp0),y
.4c06	a9 0a		lda #$0a			lda 	#NullString >> 8
.4c08	c8		iny				iny
.4c09	91 2a		sta ($2a),y			sta 	(temp0),y
.4c0b	88		dey				dey
.4c0c	60		rts				rts
.4c0d					_ZTWriteFloat:
.4c0d	8a		txa				txa
.4c0e	48		pha				pha
.4c0f	a2 20		ldx #$20		ldx	#32
.4c11	20 fe 24	jsr $24fe		jsr	floatingpointHandler
.4c14	68		pla				pla
.4c15	aa		tax				tax
.4c16	60		rts				rts
.4c17					CloneVariableName:
.4c17	a0 02		ldy #$02			ldy 	#2 							; copy vname address to temp2
.4c19	b1 2a		lda ($2a),y			lda 	(temp0),y
.4c1b	85 2e		sta $2e				sta 	temp2
.4c1d	c8		iny				iny
.4c1e	b1 2a		lda ($2a),y			lda 	(temp0),y
.4c20	85 2f		sta $2f				sta 	temp2+1
.4c22	a5 36		lda $36				lda 	lowMemory+1 				; copy lowMemory address to (temp0),2/3
.4c24	91 2a		sta ($2a),y			sta 	(temp0),y
.4c26	88		dey				dey
.4c27	a5 35		lda $35				lda 	lowMemory
.4c29	91 2a		sta ($2a),y			sta 	(temp0),y
.4c2b	a0 00		ldy #$00			ldy 	#0 							; copy data from (temp2) to (lowMemory)
.4c2d					_CVNCopy:
.4c2d	b1 2e		lda ($2e),y			lda		(temp2),y
.4c2f	91 35		sta ($35),y			sta 	(lowMemory),y
.4c31	c8		iny				iny
.4c32	c9 3a		cmp #$3a			cmp 	#$3A 						; until the whole name has been copied.
.4c34	90 f7		bcc $4c2d			bcc 	_CVNCopy
.4c36	98		tya				tya 								; add Y to low memory
.4c37	18		clc				clc
.4c38	65 35		adc $35				adc 	lowMemory
.4c3a	85 35		sta $35				sta 	lowMemory
.4c3c	90 02		bcc $4c40			bcc 	_CVNNoCarry
.4c3e	e6 36		inc $36				inc 	lowMemory+1
.4c40					_CVNNoCarry:
.4c40	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/variable/find.asm

.4c41					FindVariable:
.4c41	98		tya				tya
.4c42	48		pha				pha
.4c43	98		tya				tya 								; point temp2 to the actual name
.4c44	18		clc				clc 								; in memory of the variable being created
.4c45	65 28		adc $28				adc 	codePtr
.4c47	85 2e		sta $2e				sta 	temp2
.4c49	a5 29		lda $29				lda 	codePtr+1
.4c4b	69 00		adc #$00			adc 	#0
.4c4d	85 2f		sta $2f				sta 	temp2+1
.4c4f	a0 00		ldy #$00			ldy 	#0
.4c51	a5 3b		lda $3b				lda 	hashList 					; copy hashlist to temp0
.4c53	85 2a		sta $2a				sta 	temp0
.4c55	a5 3c		lda $3c				lda 	hashList+1
.4c57	85 2b		sta $2b				sta 	temp0+1
.4c59	a0 01		ldy #$01	_FVNext:ldy 	#1 							; get MSB
.4c5b	b1 2a		lda ($2a),y			lda 	(temp0),y
.4c5d	f0 2c		beq $4c8b			beq 	_FVFail
.4c5f	aa		tax				tax
.4c60	88		dey				dey		 							; get LSB
.4c61	b1 2a		lda ($2a),y			lda 	(temp0),y
.4c63	85 2a		sta $2a				sta 	temp0 						; update pointer.
.4c65	86 2b		stx $2b				stx 	temp0+1
.4c67	a0 04		ldy #$04			ldy 	#4 							; check hashes match
.4c69	b1 2a		lda ($2a),y			lda 	(temp0),y
.4c6b	cd 1d 0e	cmp $0e1d			cmp 	varHash
.4c6e	d0 e9		bne $4c59			bne 	_FVNext 					; if not, no point in checking the name.
.4c70	88		dey				dey 								; copy name pointer (+2,+3) to temp1.
.4c71	b1 2a		lda ($2a),y			lda 	(temp0),y
.4c73	85 2d		sta $2d				sta 	temp1+1
.4c75	88		dey				dey
.4c76	b1 2a		lda ($2a),y			lda 	(temp0),y
.4c78	85 2c		sta $2c				sta 	temp1
.4c7a	a0 00		ldy #$00			ldy 	#0
.4c7c					_FVCheck:
.4c7c	b1 2c		lda ($2c),y			lda 	(temp1),y 					; compare names
.4c7e	d1 2e		cmp ($2e),y			cmp 	(temp2),y
.4c80	d0 d7		bne $4c59			bne 	_FVNext		 				; fail if different.
.4c82	c8		iny				iny
.4c83	c9 3a		cmp #$3a			cmp 	#$3A 						; until reached the end marker.
.4c85	90 f5		bcc $4c7c			bcc 	_FVCheck
.4c87	68		pla				pla
.4c88	a8		tay				tay
.4c89	38		sec				sec
.4c8a	60		rts				rts
.4c8b					_FVFail:
.4c8b	68		pla				pla
.4c8c	a8		tay				tay
.4c8d	18		clc				clc
.4c8e	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/variable/reset.asm

.4c8f					HashTableReset:
.4c8f	a2 60		ldx #$60			ldx 	#6*2*hashTableSize			; 6 types, 2 bytes per table entry.
.4c91	a9 00		lda #$00			lda 	#0
.4c93					_HTRClear:
.4c93	9d 67 0a	sta $0a67,x			sta 	hashTables-1,x
.4c96	ca		dex				dex
.4c97	d0 fa		bne $4c93			bne 	_HTRClear
.4c99	60		rts				rts

;******  Return to file: variable/variable.asm

.4c9a					variableHandler:
.4c9a	7c 9d 4c	jmp ($4c9d,x)			jmp 	(variableVectors,x)
.4c9d					variableVectors:
>4c9d	a5 4c					.word _DummyControlHandler ; index 0
>4c9f	d1 4a					.word AccessVariable       ; index 2
>4ca1	61 49					.word CreateArray          ; index 4
>4ca3	8f 4c					.word HashTableReset       ; index 6
.4ca5					_DummyControlHandler:
.4ca5	60		rts			rts

;******  Return to file: basic.asm

.4ca6					section_end_variable:
.4ca6					section_start_footer:

;******  Processing file: footer/footer.asm


;******  Processing file: footer/99end.asm

.003d					endZeroPage:
.0e20					endStorage:
>4ca6							.align 	256
.4d00					programMemory:
>4cff	ff						.byte 	$FF

;******  Return to file: footer/footer.asm


;******  Return to file: basic.asm

.4d00					section_end_footer:

;******  End of listing
