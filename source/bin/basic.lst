
; 64tass Turbo Assembler Macro V1.55.2200 listing file
; 64tass -D autorun=1 -D coldstartnew=0 -Walias -Wmacro-prefix -Wall -q -c -L ../source/bin/basic.lst -l ../source/bin/basic.lbl -Wall -o ../source/bin/stub.prg basic.asm
; Mon Mar 29 21:08:53 2021

;Offset	;Hex		;Monitor	;Source

;******  Command line definitions

=1					autorun=1
=0					coldstartnew=0

;******  Processing input file: basic.asm


;******  Processing file: header/01common.inc


;******  Processing file: header/../generated/installed.inc

=1					installed_header = 1
=1					installed_main = 1
=1					installed_variable = 1
=1					installed_assembler = 1
=1					installed_error = 1
=1					installed_extension = 1
=1					installed_string = 1
=1					installed_device = 1
=0					installed_floatingpoint = 0
=1					installed_interaction = 1
=1					installed_tokeniser = 1
=1					installed_footer = 1

;******  Return to file: header/01common.inc

=$1000					CodeStart = $1000
=$800					MemoryStorage = $800
=$9f00					EndOfMemory = $9F00
=$28					ZeroPageStorage = $28
=$48					StackAddress = $48
=8					StackSize = 8
=2					retStackSizePages = 2
=8					hashTableSize = 8			; if this changes, the calculation is AccessSetup has to match it.
="G"					markerGOSUB = 'G'
="R"					markerREPEAT = 'R'
="F"					markerFOR = 'F'
="W"					markerWHILE = 'W'
="P"					markerPROC = 'P'
="$"					markerSTRING = '$'
="#"					markerFLOAT = '#'
="%"					markerINT = '%'
=5					VarHSize = 5 								; header (2 link, 2 name, 1 hash)
=2					VarASize = 2 								; array [address of first level]
=4					VarISize = 4 								; integer (32 bit)
=6					VarFSize = 6 								; float (4 mantissa, 1 exponent 1 sign/zero)
=2					VarSSize = 2 								; address (2 bytes)

;******  Return to file: basic.asm


;******  Processing file: header/02macros.inc


;******  Return to file: basic.asm


;******  Processing file: header/03data.inc

>0028					codePtr:.fill 	2							; (codePtr),y points to code.
>002a					temp0: 	.fill 	2							; working variables.
>002c					temp1: 	.fill 	2
>002e					temp2: 	.fill 	2
>0030					temp3: 	.fill 	2
.0032					tempshort:
>0032							.fill 	1
.0033					highMemory:
>0033							.fill 	2
.0035					lowMemory:
>0035							.fill 	2
>0800							.align	256
.0800					returnStack:
>0800							.fill 	retStackSizePages * 256
=512					retStackSize = retStackSizePages * 256
.0a00					SingleLetterVar:
>0a00					 		.fill 	26*4
.0a68					currentStorage:
>0048					esType:	.fill 	StackSize  					; type byte (see above)
>0050					esInt0:	.fill 	StackSize 					; integer or mantissa
>0058					esInt1:	.fill 	StackSize
>0060					esInt2:	.fill 	StackSize
>0068					esInt3:	.fill 	StackSize
>0070					esExp:	.fill 	StackSize 					; exponent ($80 = 0)
>0078					esZSign:.fill 	StackSize 					; for floating point - sign (bit 7) isZero (bit 6)
.0080					endOfStack:
=$50					esMant0 = esInt0 							; synonyms.
=$58					esMant1 = esInt1
=$60					esMant2 = esInt2
=$68					esMant3 = esInt3
.0a68					hashTables:
>0a68							.fill 	6*2*hashTableSize
.0ac8					basePage:
>0ac8							.fill 	2
.0aca					endProgram:
>0aca							.fill 	2
.0acc					endMemory:
>0acc							.fill 	2
.0ace					NullString:
>0ace							.fill 	1							; don't waste memory concreting null strings.
.0acf					convertBuffer:
>0acf							.fill 	35

;******  Processing file: header/../generated/tokenconst.inc

=$80					TOK_EOL=$80
=$81					TOK_SHIFT1=$81
=$82					TOK_SHIFT2=$82
=$83					TOK_SHIFT3=$83
=$84					TOK_FPC=$84
=$85					TOK_STR=$85
=$86					TOK_BINARYST=$86
=$99					TOK_STRUCTST=$99
=$a4					TOK_UNARYST=$a4
=$c9					TOK_TOKENS=$c9
=$86					TKW_AND                      = $86 ; and
=$87					TKW_OR                       = $87 ; or
=$88					TKW_XOR                      = $88 ; xor
=$89					TKW_GREATEREQUAL             = $89 ; >=
=$8a					TKW_LESSEQUAL                = $8a ; <=
=$8b					TKW_GREATER                  = $8b ; >
=$8c					TKW_LESS                     = $8c ; <
=$8d					TKW_EQUAL                    = $8d ; =
=$8e					TKW_LESSGREATER              = $8e ; <>
=$8f					TKW_PLUS                     = $8f ; +
=$90					TKW_MINUS                    = $90 ; -
=$91					TKW_GREATERGREATER           = $91 ; >>
=$92					TKW_LESSLESS                 = $92 ; <<
=$93					TKW_STAR                     = $93 ; *
=$94					TKW_SLASH                    = $94 ; /
=$95					TKW_MOD                      = $95 ; mod
=$96					TKW_HAT                      = $96 ; ^
=$97					TKW_PLING                    = $97 ; !
=$98					TKW_QMARK                    = $98 ; ?
=$99					TKW_REPEAT                   = $99 ; repeat
=$9a					TKW_WHILE                    = $9a ; while
=$9b					TKW_FOR                      = $9b ; for
=$9c					TKW_IF                       = $9c ; if
=$9d					TKW_DEFPROC                  = $9d ; defproc
=$9e					TKW_UNTIL                    = $9e ; until
=$9f					TKW_WEND                     = $9f ; wend
=$a0					TKW_NEXT                     = $a0 ; next
=$a1					TKW_THEN                     = $a1 ; then
=$a2					TKW_ENDIF                    = $a2 ; endif
=$a3					TKW_ENDPROC                  = $a3 ; endproc
=$a4					TKW_LPAREN                   = $a4 ; (
=$a5					TKW_LENLPAREN                = $a5 ; len(
=$a6					TKW_SGNLPAREN                = $a6 ; sgn(
=$a7					TKW_ABSLPAREN                = $a7 ; abs(
=$a8					TKW_RANDOMLPAREN             = $a8 ; random(
=$a9					TKW_PAGE                     = $a9 ; page
=$aa					TKW_TRUE                     = $aa ; true
=$ab					TKW_FALSE                    = $ab ; false
=$ac					TKW_MINLPAREN                = $ac ; min(
=$ad					TKW_MAXLPAREN                = $ad ; max(
=$ae					TKW_SYSLPAREN                = $ae ; sys(
=$af					TKW_TIMERLPAREN              = $af ; timer(
=$b0					TKW_EVENTLPAREN              = $b0 ; event(
=$b1					TKW_GETLPAREN                = $b1 ; get(
=$b2					TKW_INKEYLPAREN              = $b2 ; inkey(
=$b3					TKW_ALLOCLPAREN              = $b3 ; alloc(
=$b4					TKW_CHRDOLLARLPAREN          = $b4 ; chr$(
=$b5					TKW_LEFTDOLLARLPAREN         = $b5 ; left$(
=$b6					TKW_MIDDOLLARLPAREN          = $b6 ; mid$(
=$b7					TKW_RIGHTDOLLARLPAREN        = $b7 ; right$(
=$b8					TKW_STRDOLLARLPAREN          = $b8 ; str$(
=$b9					TKW_VALLPAREN                = $b9 ; val(
=$ba					TKW_PEEKLPAREN               = $ba ; peek(
=$bb					TKW_DEEKLPAREN               = $bb ; deek(
=$bc					TKW_LEEKLPAREN               = $bc ; leek(
=$bd					TKW_ASCLPAREN                = $bd ; asc(
=$be					TKW_INTLPAREN                = $be ; int(
=$bf					TKW_FLOATLPAREN              = $bf ; float(
=$c0					TKW_ISVALLPAREN              = $c0 ; isval(
=$c1					TKW_UPPERDOLLARLPAREN        = $c1 ; upper$(
=$c2					TKW_LOWERDOLLARLPAREN        = $c2 ; lower$(
=$c3					TKW_ATC                      = $c3 ; @
=$c4					TKW_WAVY                     = $c4 ; ~
=$c5					TKW_AMP                      = $c5 ; &
=$c6					TKW_GETDOLLARLPAREN          = $c6 ; get$(
=$c7					TKW_INKEYDOLLARLPAREN        = $c7 ; inkey$(
=$c8					TKW_MEM                      = $c8 ; mem
=$c9					TKW_RPAREN                   = $c9 ; )
=$ca					TKW_COLON                    = $ca ; :
=$cb					TKW_COMMA                    = $cb ; ,
=$cc					TKW_SEMICOLON                = $cc ; ;
=$cd					TKW_QUOTE                    = $cd ; '
=$ce					TKW_TO                       = $ce ; to
=$cf					TKW_STEP                     = $cf ; step
=$d0					TKW_PROC                     = $d0 ; proc
=$d1					TKW_LOCAL                    = $d1 ; local
=$d2					TKW_DIM                      = $d2 ; dim
=$d3					TKW_REM                      = $d3 ; rem
=$d4					TKW_LET                      = $d4 ; let
=$d5					TKW_INPUT                    = $d5 ; input
=$d6					TKW_ELSE                     = $d6 ; else
=$d7					TKW_VDU                      = $d7 ; vdu
=$d8					TKW_PRINT                    = $d8 ; print
=$d9					TKW_DATA                     = $d9 ; data
=$da					TKW_IMAGE                    = $da ; image
=$db					TKW_AT                       = $db ; at
=$dc					TKW_FLIP                     = $dc ; flip
=$dd					TKW_ASSERT                   = $dd ; assert
=$de					TKW_POKE                     = $de ; poke
=$df					TKW_DOKE                     = $df ; doke
=$e0					TKW_LOKE                     = $e0 ; loke
=$e1					TKW_INK                      = $e1 ; ink
=$e2					TKW_PAPER                    = $e2 ; paper
=$e3					TKW_CLS                      = $e3 ; cls
=$e4					TKW_LOCATE                   = $e4 ; locate
=$e5					TKW_PERIOD                   = $e5 ; .
=$e6					TKW_HASH                     = $e6 ; #
=$e7					TKW_CLEAR                    = $e7 ; clear
=$86					TKW_LOAD                     = $86 ; load
=$87					TKW_SAVE                     = $87 ; save
=$88					TKW_LIST                     = $88 ; list
=$89					TKW_NEW                      = $89 ; new
=$8a					TKW_BREAK                    = $8a ; break
=$8b					TKW_RUN                      = $8b ; run
=$8c					TKW_READ                     = $8c ; read
=$8d					TKW_RESTORE                  = $8d ; restore
=$8e					TKW_END                      = $8e ; end
=$8f					TKW_STOP                     = $8f ; stop
=$90					TKW_XEMU                     = $90 ; xemu
=$91					TKW_GOTO                     = $91 ; goto
=$92					TKW_GOSUB                    = $92 ; gosub
=$93					TKW_RETURN                   = $93 ; return
=$94					TKW_ORA                      = $94 ; ora
=$95					TKW_LPARENANDRPAREN          = $95 ; (and)
=$96					TKW_EOR                      = $96 ; eor
=$97					TKW_ADC                      = $97 ; adc
=$98					TKW_STA                      = $98 ; sta
=$99					TKW_LDA                      = $99 ; lda
=$9a					TKW_CMP                      = $9a ; cmp
=$9b					TKW_SBC                      = $9b ; sbc
=$9c					TKW_ASL                      = $9c ; asl
=$9d					TKW_ROL                      = $9d ; rol
=$9e					TKW_LSR                      = $9e ; lsr
=$9f					TKW_ROR                      = $9f ; ror
=$a0					TKW_STX                      = $a0 ; stx
=$a1					TKW_LDX                      = $a1 ; ldx
=$a2					TKW_DEC                      = $a2 ; dec
=$a3					TKW_INC                      = $a3 ; inc
=$a4					TKW_STZ                      = $a4 ; stz
=$a5					TKW_BIT                      = $a5 ; bit
=$a6					TKW_STY                      = $a6 ; sty
=$a7					TKW_LDY                      = $a7 ; ldy
=$a8					TKW_CPY                      = $a8 ; cpy
=$a9					TKW_CPX                      = $a9 ; cpx
=$aa					TKW_TSB                      = $aa ; tsb
=$ab					TKW_TRB                      = $ab ; trb
=$ac					TKW_JSR                      = $ac ; jsr
=$ad					TKW_JMP                      = $ad ; jmp
=$ae					TKW_BPL                      = $ae ; bpl
=$af					TKW_BMI                      = $af ; bmi
=$b0					TKW_BVC                      = $b0 ; bvc
=$b1					TKW_BVS                      = $b1 ; bvs
=$b2					TKW_BCC                      = $b2 ; bcc
=$b3					TKW_BCS                      = $b3 ; bcs
=$b4					TKW_BNE                      = $b4 ; bne
=$b5					TKW_BEQ                      = $b5 ; beq
=$b6					TKW_BRA                      = $b6 ; bra
=$b7					TKW_BRK                      = $b7 ; brk
=$b8					TKW_PHP                      = $b8 ; php
=$b9					TKW_CLC                      = $b9 ; clc
=$ba					TKW_PLP                      = $ba ; plp
=$bb					TKW_SEC                      = $bb ; sec
=$bc					TKW_RTI                      = $bc ; rti
=$bd					TKW_PHA                      = $bd ; pha
=$be					TKW_CLI                      = $be ; cli
=$bf					TKW_PHY                      = $bf ; phy
=$c0					TKW_RTS                      = $c0 ; rts
=$c1					TKW_PLA                      = $c1 ; pla
=$c2					TKW_SEI                      = $c2 ; sei
=$c3					TKW_PLY                      = $c3 ; ply
=$c4					TKW_DEY                      = $c4 ; dey
=$c5					TKW_TXA                      = $c5 ; txa
=$c6					TKW_TYA                      = $c6 ; tya
=$c7					TKW_TXS                      = $c7 ; txs
=$c8					TKW_TAY                      = $c8 ; tay
=$c9					TKW_TAX                      = $c9 ; tax
=$ca					TKW_CLV                      = $ca ; clv
=$cb					TKW_TSX                      = $cb ; tsx
=$cc					TKW_INY                      = $cc ; iny
=$cd					TKW_DEX                      = $cd ; dex
=$ce					TKW_CLD                      = $ce ; cld
=$cf					TKW_PHX                      = $cf ; phx
=$d0					TKW_INX                      = $d0 ; inx
=$d1					TKW_NOP                      = $d1 ; nop
=$d2					TKW_SED                      = $d2 ; sed
=$d3					TKW_PLX                      = $d3 ; plx
=$86					TKW_VPOKE                    = $86 ; vpoke
=$87					TKW_VDOKE                    = $87 ; vdoke
=$88					TKW_VLOAD                    = $88 ; vload
=$89					TKW_MODE                     = $89 ; mode
=$8a					TKW_PALETTE                  = $8a ; palette
=$8b					TKW_SPRITE                   = $8b ; sprite
=$86					TKW_VPEEKLPAREN              = $86 ; vpeek(
=$87					TKW_VDEEKLPAREN              = $87 ; vdeek(
=$88					TKW_SPRITEPERIODXLPAREN      = $88 ; sprite.x(
=$89					TKW_SPRITEPERIODYLPAREN      = $89 ; sprite.y(
=$8a					TKW_HITLPAREN                = $8a ; hit(

;******  Return to file: header/03data.inc

=$3a					TYPE_INT =		($3A) 						; type bytes that end identifier.
=$3b					TYPE_INTARRAY =	($3B)
=$3c					TYPE_STR =		($3C)
=$3d					TYPE_STRARRAY =	($3D)
=$3e					TYPE_FLOAT =	($3E)
=$3f					TYPE_FLOATARRAY=($3F)

;******  Processing file: header/../generated/asmconst.inc

=$94					TKA_GROUP1 = $94
=$9c					TKA_GROUP2 = $9c
=$ae					TKA_GROUP3 = $ae
=$b7					TKA_GROUP4 = $b7
=$d4					TKA_END4 = $d4

;******  Return to file: header/03data.inc


;******  Return to file: basic.asm


;******  Processing file: header/header.inc


;******  Return to file: basic.asm


;******  Processing file: assembler/asmconst.inc

=0					AMD_IMM		= 0					; Immediate mode.
=1					AMD_ZERO 	= 1					; Zero Page
=2					AMD_ACCIMP	= 2					; Accumulator/Implied
=3					AMD_ABS 	= 3					; Absolute
=4					AMD_ZEROINDY= 4					; Zero Indirect,Y
=5					AMD_ZEROX 	= 5					; Zero Page,X
=6					AMD_ABSY 	= 6					; Absolute,Y
=7					AMD_ABSX 	= 7					; Absolute,X
=8					AMD_ZEROIND = 8					; Zero Indirect
=9					AMD_ZEROY 	= 9					; Zero Page,Y
=10					AMD_ABSIND 	= 10				; Absolute Indirect
=11					AMD_ABSINDX	= 11				; Absolute Indirect Indexed
=12					AMD_REL		= 12				; Relative
=13					AMD_ZEROINDX= 13 				; Zero Indirect,X

;******  Return to file: basic.asm


;******  Processing file: assembler/assembler.inc


;******  Return to file: basic.asm


;******  Processing file: device/device.inc


;******  Return to file: basic.asm


;******  Processing file: error/error.inc


;******  Return to file: basic.asm


;******  Processing file: error/errorhandler.inc


;******  Processing file: error/../generated/errorid.inc

=1					ErrorID_Missing = 1 ; Feature not Present
=2					ErrorID_Syntax = 2 ; Syntax Error
=3					ErrorID_NoModule = 3 ; Module disabled
=4					ErrorID_Assert = 4 ; Assertion failed
=5					ErrorID_DivZero = 5 ; Divide By Zero
=6					ErrorID_Stop = 6 ; Stop
=7					ErrorID_BadType = 7 ; Type Mismatch
=8					ErrorID_BadValue = 8 ; Illegal Value
=9					ErrorID_MissingRP = 9 ; Missing right bracket
=10					ErrorID_MissingComma = 10 ; Missing comma
=11					ErrorID_NoReference = 11 ; Missing reference
=12					ErrorID_LineNumber = 12 ; Line Number not found
=13					ErrorID_StrLen = 13 ; String too long
=14					ErrorID_ReturnErr = 14 ; RETURN without GOSUB
=15					ErrorID_UntilErr = 15 ; UNTIL without REPEAT
=16					ErrorID_NextErr = 16 ; NEXT without FOR
=17					ErrorID_WendErr = 17 ; WEND without WHILE
=18					ErrorID_endprocErr = 18 ; ENDPROC without PROC
=19					ErrorID_BadIndex = 19 ; Bad NEXT index
=20					ErrorID_Struct = 20 ; Structures nested wrong
=21					ErrorID_NoAuto = 21 ; Cannot create variable
=22					ErrorID_RetStack = 22 ; Return stack out of space
=23					ErrorID_NoProc = 23 ; Unknown Procedure
=24					ErrorID_Params = 24 ; Parameters do not match
=25					ErrorID_DupArray = 25 ; Array already defined
=26					ErrorID_NotArray = 26 ; DIM requires array
=27					ErrorID_ArrayIndex = 27 ; Bad array index
=28					ErrorID_ArrayDepth = 28 ; Wrong number of array indices
=29					ErrorID_DataError = 29 ; Out of data
=30					ErrorID_Tokenise = 30 ; Cannot tokenise line
=31					ErrorID_Save = 31 ; Save failed
=32					ErrorID_Load = 32 ; Load failed
=33					ErrorID_Break = 33 ; Break
=34					ErrorID_Memory = 34 ; Out of memory
=35					ErrorID_NumStack = 35 ; Expression too complex
=36					ErrorID_Assembler = 36 ; Bad Operand/Mode
=37					ErrorID_Branch = 37 ; Branch out of range
=38					ErrorID_Label = 38 ; Label changed value
=39					ErrorID_NoSprite = 39 ; No Sprite Selected

;******  Return to file: error/errorhandler.inc


;******  Return to file: basic.asm


;******  Processing file: extension/extension.inc


;******  Return to file: basic.asm


;******  Processing file: extension/option_x16/x16const.inc

=64					X16MaxImages = 64 							; max # of sprite images.

;******  Return to file: basic.asm


;******  Processing file: floatingpoint/float.inc

=5					FloatEmbeddedSize = 5

;******  Return to file: basic.asm


;******  Processing file: floatingpoint/floatingpoint.inc


;******  Return to file: basic.asm


;******  Processing file: interaction/interaction.inc


;******  Return to file: basic.asm


;******  Processing file: main/main.inc


;******  Return to file: basic.asm


;******  Processing file: string/functions/memory.inc

=252					MaxStringSize = 252

;******  Return to file: basic.asm


;******  Processing file: string/string.inc


;******  Return to file: basic.asm


;******  Processing file: tokeniser/detokenise/colouring.inc

=$84					LTYLineNumber = $84
=$82					LTYPunctuation = $82
=$87					LTYIdentifier = $87
=$86					LTYConstant = $86
=$83					LTYKeyword = $83
=$81					LTYString = $81

;******  Return to file: basic.asm


;******  Processing file: tokeniser/tokeniser.inc


;******  Return to file: basic.asm


;******  Processing file: variable/variable.inc


;******  Return to file: basic.asm


;******  Processing file: footer/footer.inc


;******  Return to file: basic.asm

.1000					section_start_header:

;******  Processing file: header/header.asm


;******  Processing file: header/00start.asm

.1000					Start:
.1000	4c 0a 10	jmp $100a			jmp 	GoColdStart 				; +0 	boot BASIC
.1003	4c 58 10	jmp $1058			jmp 	GoTokTest					; +3 	run tokeniser test code.
>1006	ff 3d						.word 	TokenTableAddress
.1008							else
>1008	00 00						.word 	0
.100a					GoColdStart:
.100a	a9 00		lda #$00			lda 	#(programMemory) & $FF
.100c	8d c8 0a	sta $0ac8			sta 	basePage
.100f	a9 46		lda #$46			lda 	#(programMemory) >> 8
.1011	8d c9 0a	sta $0ac9			sta 	1+(basePage)
.1014	a9 00		lda #$00			lda 	#(endOfMemory) & $FF
.1016	8d cc 0a	sta $0acc			sta 	endMemory
.1019	a9 9f		lda #$9f			lda 	#(endOfMemory) >> 8
.101b	8d cd 0a	sta $0acd			sta 	1+(endMemory)
.101e	20 26 10	jsr $1026			jsr 	InitialiseAll 				; initialise everything.
.1021	a2 02		ldx #$02		ldx	#2
.1023	20 d6 1f	jsr $1fd6		jsr	interactionHandler

;******  Processing file: header/../generated/initialiseall.asm

.1026					InitialiseAll:
.1026	a9 00		lda #$00		lda #0
.1028	a2 00		ldx #$00		ldx	#0
.102a	20 b4 13	jsr $13b4		jsr	assemblerHandler
.102d	a9 00		lda #$00		lda #0
.102f	a2 00		ldx #$00		ldx	#0
.1031	20 f6 14	jsr $14f6		jsr	deviceHandler
.1034	a9 00		lda #$00		lda #0
.1036	a2 00		ldx #$00		ldx	#0
.1038	20 d6 1f	jsr $1fd6		jsr	interactionHandler
.103b	a9 00		lda #$00		lda #0
.103d	a2 00		ldx #$00		ldx	#0
.103f	20 70 36	jsr $3670		jsr	mainHandler
.1042	a9 00		lda #$00		lda #0
.1044	a2 00		ldx #$00		ldx	#0
.1046	20 2d 39	jsr $392d		jsr	stringHandler
.1049	a9 00		lda #$00		lda #0
.104b	a2 00		ldx #$00		ldx	#0
.104d	20 6c 41	jsr $416c		jsr	tokeniserHandler
.1050	a9 00		lda #$00		lda #0
.1052	a2 00		ldx #$00		ldx	#0
.1054	20 3d 45	jsr $453d		jsr	variableHandler
.1057	60		rts			rts

;******  Return to file: header/00start.asm

.1058					GoTokTest:
.1058	a2 06		ldx #$06		ldx	#6
.105a	20 6c 41	jsr $416c		jsr	tokeniserHandler

;******  Return to file: header/header.asm


;******  Return to file: basic.asm

.105d					section_end_header:
.105d					section_start_assembler:

;******  Processing file: assembler/assembler.asm


;******  Processing file: assembler/asmoperand.asm

.105d					AsmGetOperand:
.105d	a2 00		ldx #$00			ldx 	#0 							; clear the operand.
.105f	8a		txa				txa
.1060	95 50		sta $50,x			sta 	esInt0,x
.1062	95 58		sta $58,x			sta 	esInt1,x
.1064	95 60		sta $60,x			sta 	esInt2,x
.1066	95 68		sta $68,x			sta 	esInt3,x
.1068	b1 28		lda ($28),y			lda 	(codePtr),y 				; first into X
.106a	aa		tax				tax
.106b	a9 02		lda #$02			lda 	#AMD_ACCIMP
.106d	e0 80		cpx #$80			cpx 	#TOK_EOL 					; if end of line or colon, return implied mode.
.106f	f0 41		beq $10b2			beq 	_AGOExit
.1071	e0 ca		cpx #$ca			cpx 	#TKW_COLON
.1073	f0 3d		beq $10b2			beq 	_AGOExit
.1075	c8		iny				iny 								; consume the token
.1076	a9 00		lda #$00			lda 	#AMD_IMM
.1078	e0 e6		cpx #$e6			cpx 	#TKW_HASH 					; if a hash present, then immediate mode.
.107a	f0 2d		beq $10a9			beq		_AGOEvalExit 				; with an operand.
.107c	e0 a4		cpx #$a4			cpx 	#TKW_LPAREN 				; left bracket ?
.107e	f0 40		beq $10c0			beq 	_AGOIndirect
.1080	e0 01		cpx #$01			cpx 	#$01 						; is it "A" e.g. the variable A.
.1082	d0 0b		bne $108f			bne 	_AGOZeroPage1 				; if not it is zero zero,x zero,y, unpick 1 iny
.1084	b1 28		lda ($28),y			lda 	(codePtr),y 				; get the second character & consume it
.1086	c8		iny				iny
.1087	aa		tax				tax
.1088	a9 02		lda #$02			lda 	#AMD_ACCIMP 				; and return Acc/Implied if it is just A
.108a	e0 3a		cpx #$3a			cpx 	#$3A
.108c	f0 24		beq $10b2			beq 	_AGOExit
.108e	88		dey				dey 								; unpick 2 iny
.108f					_AGOZeroPage1:
.108f	88		dey				dey
.1090	a9 00		lda #$00			lda 	#0 							; get the address into esInt0/1
.1092	a2 0a		ldx #$0a		ldx	#10
.1094	20 70 36	jsr $3670		jsr	mainHandler
.1097	20 ef 10	jsr $10ef			jsr 	AsmGetIndexing
.109a	a9 01		lda #$01			lda 	#AMD_ZERO
.109c	90 14		bcc $10b2			bcc 	_AGOExit
.109e	a9 05		lda #$05			lda 	#AMD_ZEROX
.10a0	e0 00		cpx #$00			cpx 	#0
.10a2	f0 0e		beq $10b2			beq 	_AGOExit
.10a4	a9 09		lda #$09			lda 	#AMD_ZEROY
.10a6	4c b2 10	jmp $10b2			jmp 	_AGOExit
.10a9					_AGOEvalExit:
.10a9	48		pha				pha
.10aa	a9 00		lda #$00			lda 	#0 							; evaluate operand in root.
.10ac	a2 0a		ldx #$0a		ldx	#10
.10ae	20 70 36	jsr $3670		jsr	mainHandler
.10b1	68		pla				pla
.10b2					_AGOExit:
.10b2	48		pha				pha 								; save the mode
.10b3	a5 60		lda $60				lda 	esInt2 						; check the operand is zero.
.10b5	05 68		ora $68				ora 	esInt3
.10b7	d0 02		bne $10bb			bne 	_AGOValue
.10b9	68		pla				pla
.10ba	60		rts				rts
.10bb					_AGOValue:
.10bb	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.10bd	20 18 15	jsr $1518		jsr	errorHandler
.10c0					_AGOIndirect:
.10c0	a9 00		lda #$00			lda 	#0 							; evaluate operand in root.
.10c2	a2 0a		ldx #$0a		ldx	#10
.10c4	20 70 36	jsr $3670		jsr	mainHandler
.10c7	b1 28		lda ($28),y			lda 	(codePtr),y 				; does ) follow ? if so might be ) or ),Y
.10c9	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.10cb	f0 11		beq $10de			beq 	_AGOIndIndY
.10cd	20 ef 10	jsr $10ef			jsr 	ASMGetIndexing 				; must be ,X)
.10d0	90 39		bcc $110b			bcc 	AGISyntax
.10d2	e0 00		cpx #$00			cpx 	#0
.10d4	d0 35		bne $110b			bne 	AGISyntax
.10d6	a2 04		ldx #$04		ldx	#4
.10d8	20 70 36	jsr $3670		jsr	mainHandler
.10db	a9 0d		lda #$0d			lda 	#AMD_ZEROINDX
.10dd	60		rts				rts
.10de					_AGOIndIndY:
.10de	c8		iny				iny
.10df	20 ef 10	jsr $10ef			jsr 	ASMGetIndexing 				; get indexing if any
.10e2	a9 08		lda #$08			lda 	#AMD_ZEROIND
.10e4	90 cc		bcc $10b2			bcc 	_AGOExit 					; none then exit
.10e6	e0 00		cpx #$00			cpx 	#0 							; must be ,Y
.10e8	f0 21		beq $110b			beq 	AGISyntax
.10ea	a9 04		lda #$04			lda 	#AMD_ZEROINDY
.10ec	4c b2 10	jmp $10b2			jmp 	_AGOExit
.10ef					AsmGetIndexing:
.10ef	b1 28		lda ($28),y			lda 	(codePtr),y 				; check for comma
.10f1	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.10f3	18		clc				clc
.10f4	d0 14		bne $110a			bne 	_AGIExit 					; no comma, return with CC
.10f6	c8		iny				iny 								; get what SHOULD be X or Y
.10f7	b1 28		lda ($28),y			lda 	(codePtr),y  				; read it
.10f9	38		sec				sec 								; subtract 6 bit ASCII of X
.10fa	e9 18		sbc #$18			sbc 	#"X" & $3F
.10fc	c9 02		cmp #$02			cmp 	#2 							; if unsigned >= 2 then error
.10fe	b0 0b		bcs $110b			bcs 	AGISyntax
.1100	aa		tax				tax 								; put in index
.1101	c8		iny				iny 								; get what follows that, should be the $3A marker
.1102	b1 28		lda ($28),y			lda 	(codePtr),y
.1104	c8		iny				iny
.1105	c9 3a		cmp #$3a			cmp 	#$3A
.1107	d0 02		bne $110b			bne 	AGISyntax
.1109	38		sec				sec 								; return CS and index mode in X
.110a					_AGIExit:
.110a	60		rts				rts
.110b					AGISyntax:
.110b	a2 02		ldx #$02			ldx 	#ErrorID_syntax
.110d	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: assembler/assembler.asm


;******  Processing file: assembler/asmwrite.asm

.0af2					finalOpcode:
>0af2							.fill 	1
.1110					AsmWriteInstruction:
.1110	8d f2 0a	sta $0af2			sta 	finalOpcode					; save opcode.
.1113	98		tya				tya
.1114	48		pha				pha
.1115	ad 38 0a	lda $0a38			lda 	SingleLetterVar+("O"-"A")*4	; check O
.1118	29 02		and #$02			and 	#2
.111a	f0 2d		beq $1149			beq 	_ASMWNoEcho 				; if zero then don't echo.
.111c	ad 3d 0a	lda $0a3d			lda 	SingleLetterVar+("P"-"A")*4+1 ; write address in P
.111f	20 84 11	jsr $1184			jsr 	AWIWriteHex
.1122	ad 3c 0a	lda $0a3c			lda 	SingleLetterVar+("P"-"A")*4
.1125	20 84 11	jsr $1184			jsr 	AWIWriteHex
.1128	ad f2 0a	lda $0af2			lda 	finalOpcode 				; write opcode
.112b	20 7d 11	jsr $117d			jsr 	AWIWriteHexSpace
.112e	e0 00		cpx #$00			cpx 	#0
.1130	f0 0e		beq $1140			beq 	_ASMWEchoExit
.1132	a5 50		lda $50				lda 	esInt0
.1134	20 7d 11	jsr $117d			jsr 	AWIWriteHexSpace
.1137	e0 01		cpx #$01			cpx 	#1
.1139	f0 05		beq $1140			beq 	_ASMWEchoExit
.113b	a5 58		lda $58				lda 	esInt1
.113d	20 7d 11	jsr $117d			jsr 	AWIWriteHexSpace
.1140					_ASMWEchoExit:
.1140	8a		txa				txa
.1141	48		pha				pha
.1142	a2 06		ldx #$06		ldx	#6
.1144	20 f6 14	jsr $14f6		jsr	deviceHandler
.1147	68		pla				pla
.1148	aa		tax				tax
.1149					_ASMWNoEcho:
.1149	ad f2 0a	lda $0af2			lda 	finalOpcode
.114c	20 64 11	jsr $1164			jsr 	AsmWriteByte
.114f	e0 00		cpx #$00			cpx 	#0
.1151	f0 0e		beq $1161			beq 	_ASMWExit
.1153	a5 50		lda $50				lda 	esInt0
.1155	20 64 11	jsr $1164			jsr 	AsmWriteByte
.1158	e0 01		cpx #$01			cpx 	#1
.115a	f0 05		beq $1161			beq 	_ASMWExit
.115c	a5 58		lda $58				lda 	esInt1
.115e	20 64 11	jsr $1164			jsr 	AsmWriteByte
.1161					_ASMWExit:
.1161	68		pla				pla
.1162	a8		tay				tay
.1163	60		rts				rts
.1164					AsmWriteByte:
.1164	a0 00		ldy #$00			ldy 	#0
.1166	48		pha				pha
.1167	ad 3c 0a	lda $0a3c			lda 	SingleLetterVar+("P"-"A")*4 ; copy address to temp0
.116a	85 2a		sta $2a				sta 	temp0
.116c	ad 3d 0a	lda $0a3d			lda 	SingleLetterVar+("P"-"A")*4+1
.116f	85 2b		sta $2b				sta 	temp0+1
.1171	68		pla				pla 								; write out the byte.
.1172	91 2a		sta ($2a),y			sta 	(temp0),y
.1174	ee 3c 0a	inc $0a3c			inc 	SingleLetterVar+("P"-"A")*4	; increment P
.1177	d0 03		bne $117c			bne 	_AWBNoCarry
.1179	ee 3d 0a	inc $0a3d			inc 	SingleLetterVar+("P"-"A")*4+1
.117c					_AWBNoCarry:
.117c	60		rts				rts
.117d					AWIWriteHexSpace:
.117d	48		pha				pha
.117e	a9 20		lda #$20			lda 	#" "
.1180	20 97 11	jsr $1197			jsr 	AWIPrintChar
.1183	68		pla				pla
.1184					AWIWriteHex:
.1184	48		pha				pha
.1185	4a		lsr a				lsr 	a
.1186	4a		lsr a				lsr 	a
.1187	4a		lsr a				lsr 	a
.1188	4a		lsr a				lsr 	a
.1189	20 8d 11	jsr $118d			jsr 	AWIPrintNibble
.118c	68		pla				pla
.118d					AWIPrintNibble:
.118d	29 0f		and #$0f			and 	#15
.118f	c9 0a		cmp #$0a			cmp 	#10
.1191	90 02		bcc $1195			bcc 	_AWIPNDigit
.1193	69 06		adc #$06			adc 	#6
.1195					_AWIPNDigit:
.1195	69 30		adc #$30			adc 	#48
.1197					AWIPrintChar:
.1197	85 32		sta $32				sta 	tempShort
.1199	8a		txa				txa
.119a	48		pha				pha
.119b	a5 32		lda $32				lda 	tempShort
.119d	a2 16		ldx #$16		ldx	#22
.119f	20 f6 14	jsr $14f6		jsr	deviceHandler
.11a2	68		pla				pla
.11a3	aa		tax				tax
.11a4	60		rts				rts

;******  Return to file: assembler/assembler.asm


;******  Processing file: assembler/assemblecmd.asm

.0af3					asmToken:
>0af3							.fill 	1
.0af4					asmMode:
>0af4							.fill 	1 							; esInt0/1
.0af5					asmBaseOpcode:
>0af5							.fill 	1
.11a5					AssembleOneInstruction:
.11a5	8d f3 0a	sta $0af3			sta 	asmToken 					; save the token
.11a8	aa		tax				tax
.11a9	bd 72 11	lda $1172,x			lda 	OpcodeTable-TKA_GROUP1,x 	; get the base opcode.
.11ac	8d f5 0a	sta $0af5			sta 	asmBaseOpcode
.11af	20 5d 10	jsr $105d			jsr 	AsmGetOperand 				; identify the address mode and operand where applicable.
.11b2	8d f4 0a	sta $0af4			sta 	asmMode
.11b5	a5 58		lda $58				lda 	esInt1 						; check if this is a three byte operand.
.11b7	d0 05		bne $11be			bne 	_AOIThreeBytes 				; if so, we have to use three byte
.11b9	20 d4 11	jsr $11d4			jsr 	AssembleAttempt 			; try to assemble token/mode/operand (2 bytes)
.11bc	b0 10		bcs $11ce			bcs 	_AOISuccess 				; worked ok.
.11be					_AOIThreeBytes:
.11be	ae f4 0a	ldx $0af4			ldx 	asmMode 					; convert mode to 3 byte version, where possible.
.11c1	bd f8 11	lda $11f8,x			lda 	AbsoluteVersionTable,x
.11c4	30 09		bmi $11cf			bmi 	_AOIError					; not possible, no equivalent.
.11c6	8d f4 0a	sta $0af4			sta 	asmMode
.11c9	20 d4 11	jsr $11d4			jsr 	AssembleAttempt 			; try to assemble token/mode/operand (3 bytes)
.11cc	90 01		bcc $11cf			bcc 	_AOIError 					; didn't work.
.11ce					_AOISuccess:
.11ce	60		rts				rts
.11cf					_AOIError:
.11cf	a2 24		ldx #$24			ldx 	#ErrorID_Assembler
.11d1	20 18 15	jsr $1518		jsr	errorHandler
.11d4					AssembleAttempt:
.11d4	20 dd 11	jsr $11dd			jsr 	_AADispatch 				; go to the code which dispatches to the appropriate
.11d7	b0 03		bcs $11dc			bcs 	_AAExit 					; exit if carry set, e.g. was successful
.11d9	20 87 13	jsr $1387			jsr 	AssembleSpecialCase
.11dc					_AAExit:
.11dc	60		rts				rts
.11dd					_AADispatch:
.11dd	ad f3 0a	lda $0af3			lda 	asmToken
.11e0	c9 b7		cmp #$b7			cmp 	#TKA_GROUP4
.11e2	b0 11		bcs $11f5			bcs 	_AAGroup4
.11e4	c9 ae		cmp #$ae			cmp 	#TKA_GROUP3
.11e6	b0 0a		bcs $11f2			bcs 	_AAGroup3
.11e8	c9 9c		cmp #$9c			cmp 	#TKA_GROUP2
.11ea	b0 03		bcs $11ef			bcs 	_AAGroup2
.11ec	4c cd 12	jmp $12cd			jmp 	AssembleGroup1
.11ef					_AAGroup2:
.11ef	4c 28 13	jmp $1328			jmp 	AssembleGroup2
.11f2					_AAGroup3:
.11f2	4c 49 13	jmp $1349			jmp 	AssembleGroup3
.11f5					_AAGroup4:
.11f5	4c 7d 13	jmp $137d			jmp 	AssembleGroup4
.11f8					AbsoluteVersionTable:
>11f8	ff						.byte	$FF 			; fail AMD_IMM
>11f9	03						.byte	AMD_ABS 		; absolute AMD_ZERO
>11fa	ff						.byte	$FF 			; fail AMD_ACCIMP
>11fb	ff						.byte	$FF 			; fail AMD_ABS
>11fc	ff						.byte 	$FF 			; fail AMD_ZEROINDY
>11fd	07						.byte	AMD_ABSX 		; absolute AMD_ZEROX
>11fe	ff						.byte	$FF 			; fail AMD_ABSY
>11ff	ff						.byte	$FF 			; fail AMD_ABSX
>1200	0a						.byte	AMD_ABSIND 		; absolute AMD_ZEROIND
>1201	06						.byte	AMD_ABSY 		; absolute AMD_ZEROY
>1202	ff						.byte	$FF 			; fail AMD_ABSIND
>1203	ff						.byte	$FF 			; fail AMD_ABSINDX
>1204	ff						.byte	$FF 			; fail AMD_REL
>1205	0b						.byte 	AMD_ABSINDX 	; absolute AMD_ZEROINDX

;******  Processing file: assembler/../generated/asmtables.inc

.1206					OpcodeTable:
>1206	01					.byte	$01			; $94 ora
>1207	21					.byte	$21			; $95 (and)
>1208	41					.byte	$41			; $96 eor
>1209	61					.byte	$61			; $97 adc
>120a	81					.byte	$81			; $98 sta
>120b	a1					.byte	$a1			; $99 lda
>120c	c1					.byte	$c1			; $9a cmp
>120d	e1					.byte	$e1			; $9b sbc
>120e	02					.byte	$02			; $9c asl
>120f	22					.byte	$22			; $9d rol
>1210	42					.byte	$42			; $9e lsr
>1211	62					.byte	$62			; $9f ror
>1212	82					.byte	$82			; $a0 stx
>1213	a2					.byte	$a2			; $a1 ldx
>1214	c2					.byte	$c2			; $a2 dec
>1215	e2					.byte	$e2			; $a3 inc
>1216	60					.byte	$60			; $a4 stz
>1217	20					.byte	$20			; $a5 bit
>1218	80					.byte	$80			; $a6 sty
>1219	a0					.byte	$a0			; $a7 ldy
>121a	c0					.byte	$c0			; $a8 cpy
>121b	e0					.byte	$e0			; $a9 cpx
>121c	00					.byte	$00			; $aa tsb
>121d	10					.byte	$10			; $ab trb
>121e	14					.byte	$14			; $ac jsr
>121f	40					.byte	$40			; $ad jmp
>1220	10					.byte	$10			; $ae bpl
>1221	30					.byte	$30			; $af bmi
>1222	50					.byte	$50			; $b0 bvc
>1223	70					.byte	$70			; $b1 bvs
>1224	90					.byte	$90			; $b2 bcc
>1225	b0					.byte	$b0			; $b3 bcs
>1226	d0					.byte	$d0			; $b4 bne
>1227	f0					.byte	$f0			; $b5 beq
>1228	80					.byte	$80			; $b6 bra
>1229	00					.byte	$00			; $b7 brk
>122a	08					.byte	$08			; $b8 php
>122b	18					.byte	$18			; $b9 clc
>122c	28					.byte	$28			; $ba plp
>122d	38					.byte	$38			; $bb sec
>122e	40					.byte	$40			; $bc rti
>122f	48					.byte	$48			; $bd pha
>1230	58					.byte	$58			; $be cli
>1231	5a					.byte	$5a			; $bf phy
>1232	60					.byte	$60			; $c0 rts
>1233	68					.byte	$68			; $c1 pla
>1234	78					.byte	$78			; $c2 sei
>1235	7a					.byte	$7a			; $c3 ply
>1236	88					.byte	$88			; $c4 dey
>1237	8a					.byte	$8a			; $c5 txa
>1238	98					.byte	$98			; $c6 tya
>1239	9a					.byte	$9a			; $c7 txs
>123a	a8					.byte	$a8			; $c8 tay
>123b	aa					.byte	$aa			; $c9 tax
>123c	b8					.byte	$b8			; $ca clv
>123d	ba					.byte	$ba			; $cb tsx
>123e	c8					.byte	$c8			; $cc iny
>123f	ca					.byte	$ca			; $cd dex
>1240	d8					.byte	$d8			; $ce cld
>1241	da					.byte	$da			; $cf phx
>1242	e8					.byte	$e8			; $d0 inx
>1243	ea					.byte	$ea			; $d1 nop
>1244	f8					.byte	$f8			; $d2 sed
>1245	fa					.byte	$fa			; $d3 plx
.1246					Group2OpcodeAvailability:
>1246	ae					.byte	$ae			; $9c asl $02
>1247	ae					.byte	$ae			; $9d rol $22
>1248	ae					.byte	$ae			; $9e lsr $42
>1249	ae					.byte	$ae			; $9f ror $62
>124a	0a					.byte	$0a			; $a0 stx $82
>124b	0b					.byte	$0b			; $a1 ldx $a2
>124c	aa					.byte	$aa			; $a2 dec $c2
>124d	aa					.byte	$aa			; $a3 inc $e2
>124e	22					.byte	$22			; $a4 stz $60
>124f	aa					.byte	$aa			; $a5 bit $20
>1250	2a					.byte	$2a			; $a6 sty $80
>1251	ab					.byte	$ab			; $a7 ldy $a0
>1252	2b					.byte	$2b			; $a8 cpy $c0
>1253	0b					.byte	$0b			; $a9 cpx $e0
>1254	0a					.byte	$0a			; $aa tsb $00
>1255	0a					.byte	$0a			; $ab trb $10
>1256	08					.byte	$08			; $ac jsr $14
>1257	08					.byte	$08			; $ad jmp $40
.1258					AssemblerSpecialCases:
>1258	ad 0a 6c				.byte	$ad,10,$6c		; jmp (abs)
>125b	ad 0b 7c				.byte	$ad,11,$7c		; jmp (abs,x)
>125e	a1 06 be				.byte	$a1,6,$be		; ldx abs,y
>1261	a1 09 b6				.byte	$a1,9,$b6		; ldx zp,y
>1264	a0 09 96				.byte	$a0,9,$96		; stx zp,y
>1267	a3 02 1a				.byte	$a3,2,$1a		; inc acc
>126a	a2 02 3a				.byte	$a2,2,$3a		; dec acc
>126d	a5 00 89				.byte	$a5,0,$89		; bit #
>1270	a4 03 9c				.byte	$a4,3,$9c		; stz abs
>1273	a4 07 9e				.byte	$a4,7,$9e		; stz abs,x
>1276	00					.byte	0

;******  Return to file: assembler/assemblecmd.asm


;******  Return to file: assembler/assembler.asm


;******  Processing file: assembler/assemblelabel.asm

.1277					AssembleLabel:
.1277	b1 28		lda ($28),y			lda 	(codePtr),y 				; check it's followed by a variable name.
.1279	c9 3a		cmp #$3a			cmp 	#$3A
.127b	b0 4b		bcs $12c8			bcs 	_ALSyntax
.127d	a9 00		lda #$00			lda 	#0							; get a variable name on to stack:0
.127f	a2 02		ldx #$02		ldx	#2
.1281	20 3d 45	jsr $453d		jsr	variableHandler
.1284	a5 48		lda $48				lda 	esType 						; check integer reference
.1286	c9 80		cmp #$80			cmp 	#$80
.1288	d0 3e		bne $12c8			bne 	_ALSyntax
.128a	a5 50		lda $50				lda 	esInt0 						; copy that reference address to temp0
.128c	85 2a		sta $2a				sta 	temp0
.128e	a5 58		lda $58				lda 	esInt1
.1290	85 2b		sta $2b				sta 	temp0+1
.1292	98		tya				tya
.1293	48		pha				pha
.1294	ad 38 0a	lda $0a38			lda 	SingleLetterVar+("O"-"A")*4	; are we in Pass 2
.1297	4a		lsr a				lsr 	a
.1298	90 11		bcc $12ab			bcc 	_ALWrite
.129a	a0 00		ldy #$00			ldy 	#0
.129c	ad 3c 0a	lda $0a3c			lda 	SingleLetterVar+("P"-"A")*4 ; compare the value in P to the variable
.129f	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.12a1	d0 20		bne $12c3			bne 	_ALChanged
.12a3	c8		iny				iny
.12a4	ad 3d 0a	lda $0a3d			lda 	SingleLetterVar+("P"-"A")*4+1
.12a7	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.12a9	d0 18		bne $12c3			bne 	_ALChanged
.12ab					_ALWrite:
.12ab	a0 00		ldy #$00			ldy 	#0
.12ad	ad 3c 0a	lda $0a3c			lda 	SingleLetterVar+("P"-"A")*4 ; copy the value in P into the variable
.12b0	91 2a		sta ($2a),y			sta 	(temp0),y
.12b2	ad 3d 0a	lda $0a3d			lda 	SingleLetterVar+("P"-"A")*4+1
.12b5	c8		iny				iny
.12b6	91 2a		sta ($2a),y			sta 	(temp0),y
.12b8	a9 00		lda #$00			lda 	#0
.12ba	c8		iny				iny
.12bb	91 2a		sta ($2a),y			sta 	(temp0),y
.12bd	c8		iny				iny
.12be	91 2a		sta ($2a),y			sta 	(temp0),y
.12c0	68		pla				pla
.12c1	a8		tay				tay
.12c2	60		rts				rts
.12c3					_ALChanged:
.12c3	a2 26		ldx #$26			ldx 	#ErrorID_Label
.12c5	20 18 15	jsr $1518		jsr	errorHandler
.12c8					_ALSyntax:
.12c8	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.12ca	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: assembler/assembler.asm


;******  Processing file: assembler/subgroup.asm

.12cd					AssembleGroup1:
.12cd	ad f3 0a	lda $0af3			lda 	asmToken 					; firstly, we throw out STA immediate
.12d0	c9 98		cmp #$98			cmp 	#TKW_STA
.12d2	d0 07		bne $12db			bne 	_AG1NotStoreImm
.12d4	ad f4 0a	lda $0af4			lda 	asmMode
.12d7	c9 00		cmp #$00			cmp 	#AMD_IMM
.12d9	f0 2c		beq $1307			beq 	AG1ModeError
.12db					_AG1NotStoreImm:
.12db	ae f4 0a	ldx $0af4			ldx 	asmMode						; get mode into X.
.12de	bd 0c 13	lda $130c,x			lda		AMDOperandSize,X 			; get the size of the operand and push on stack
.12e1	48		pha				pha
.12e2	f0 23		beq $1307			beq 	AG1ModeError 				; if the size is zero, the mode must be Accumulator
.12e4	e0 00		cpx #$00			cpx 	#0 							; if the mode is zero, e.g. immediate
.12e6	d0 02		bne $12ea			bne 	_AG1NotImmediate
.12e8	a2 02		ldx #$02			ldx 	#2 							; then we use offset 2 here. This is how the 6502
.12ea					_AG1NotImmediate:
.12ea	e0 0d		cpx #$0d			cpx 	#AMD_ZEROINDX 				; (zero,x) uses slot 0.
.12ec	d0 02		bne $12f0			bne 	_AG1NotZX
.12ee	a2 00		ldx #$00			ldx 	#0
.12f0					_AG1NotZX:
.12f0	68		pla				pla 								; restore length
.12f1	e0 09		cpx #$09			cpx 	#9 							; anything > 8 fails.
.12f3	b0 10		bcs $1305			bcs 	AG1Fail
.12f5					AG1ReturnValue:
.12f5	85 32		sta $32				sta 	tempShort 					; save size of operand
.12f7	18		clc				clc
.12f8	bd 1a 13	lda $131a,x			lda 	AMDOffsetFromBase,X 		; get the offset for the address mode.
.12fb	6d f5 0a	adc $0af5			adc 	asmBaseOpcode 				; add the base opcode.
.12fe	a6 32		ldx $32				ldx 	tempShort 					; length in X
.1300	20 10 11	jsr $1110			jsr 	AsmWriteInstruction 		; output instruction.
.1303	38		sec				sec
.1304	60		rts				rts
.1305					AG1Fail:
.1305	18		clc				clc
.1306	60		rts				rts
.1307					AG1ModeError:
.1307	a2 24		ldx #$24			ldx 	#ErrorID_Assembler
.1309	20 18 15	jsr $1518		jsr	errorHandler
.130c					AMDOperandSize:
>130c	01 01 00 02					.byte 	1,1,0,2
>1310	01 01 02 02					.byte 	1,1,2,2
>1314	01 01 02 02					.byte 	1,1,2,2
>1318	01 01						.byte 	1,1
.131a					AMDOffsetFromBase:
>131a	00 04 08 0c					.byte 	0,4,8,12
>131e	10 14 18 1c					.byte	16,20,24,28
>1322	11 00 00 00					.byte 	17,0,0,0
>1326	00 00						.byte 	0,0
.1328					AssembleGroup2:
.1328	ad f4 0a	lda $0af4			lda 	asmMode 					; get the mode; if >= 8 cannot be a legit group 2
.132b	c9 08		cmp #$08			cmp 	#8
.132d	b0 18		bcs $1347			bcs 	_AG2Fail
.132f	85 2a		sta $2a				sta 	temp0 						; save in temp9
.1331	ae f3 0a	ldx $0af3			ldx 	asmToken					; get token in X, then get the availability flags for it
.1334	bd aa 11	lda $11aa,x			lda 	Group2OpcodeAvailability-TKA_GROUP2,x
.1337					_AG2Shift:
.1337	4a		lsr a				lsr 	a
.1338	c6 2a		dec $2a				dec 	temp0
.133a	10 fb		bpl $1337			bpl 	_AG2Shift
.133c	90 09		bcc $1347			bcc 	_AG2Fail 					; cannot do that instruction w/that opcode.
.133e	ae f4 0a	ldx $0af4			ldx  	asmMode 					; mode in X
.1341	bd 0c 13	lda $130c,x			lda		AMDOperandSize,X 			; get the size of the operand in A
.1344	4c f5 12	jmp $12f5			jmp 	AG1ReturnValue 				; and use that with Group 1's exit code
.1347					_AG2Fail:
.1347	18		clc				clc
.1348	60		rts				rts
.1349					AssembleGroup3:
.1349	ad 38 0a	lda $0a38			lda 	SingleLetterVar+("O"-"A")*4	; check bit 0 (pass) of O
.134c	4a		lsr a				lsr 	a
.134d	a9 00		lda #$00			lda 	#0 							; if clear, e.g. pass 1, use default zero.
.134f	90 21		bcc $1372			bcc 	_AG3Default
.1351	38		sec				sec	 								; calculate branch offset
.1352	a5 50		lda $50				lda		esInt0
.1354	ed 3c 0a	sbc $0a3c			sbc 	SingleLetterVar+("P"-"A")*4
.1357	aa		tax				tax
.1358	a5 58		lda $58				lda		esInt1
.135a	ed 3d 0a	sbc $0a3d			sbc 	SingleLetterVar+("P"-"A")*4+1
.135d	85 58		sta $58				sta 	esInt1
.135f	8a		txa				txa 								; add 126, now 128 too many.
.1360	18		clc				clc 								; we can use this to check the range
.1361	69 7e		adc #$7e			adc 	#126
.1363	85 50		sta $50				sta 	esInt0
.1365	90 02		bcc $1369			bcc 	_AG3NoCarry
.1367	e6 58		inc $58				inc 	esInt1
.1369					_AG3NoCarry:
.1369	a5 58		lda $58				lda 	esInt1 						; check in range.
.136b	d0 0b		bne $1378			bne 	_AG3Range
.136d	a5 50		lda $50				lda 	esInt0 						; fix up branch distance
.136f	38		sec				sec
.1370	e9 80		sbc #$80			sbc 	#128
.1372					_AG3Default:
.1372	85 50		sta $50				sta 	esInt0
.1374					_AG3ExitOk:
.1374	a2 01		ldx #$01			ldx 	#1 							; one opcode, use AG4 Code
.1376	d0 07		bne $137f			bne 	AG4Write
.1378					_AG3Range:
.1378	a2 25		ldx #$25			ldx 	#ErrorID_Branch
.137a	20 18 15	jsr $1518		jsr	errorHandler
.137d					AssembleGroup4:
.137d	a2 00		ldx #$00			ldx 	#0 							; no parameters in the opcode.
.137f					AG4Write:
.137f	ad f5 0a	lda $0af5			lda 	asmBaseOpcode				; the opcode is the opcode base.
.1382	20 10 11	jsr $1110			jsr 	AsmWriteInstruction 		; output instruction.
.1385	38		sec				sec
.1386	60		rts				rts
.1387					AssembleSpecialCase:
.1387	a2 00		ldx #$00			ldx 	#0
.1389					_ASCScan:
.1389	bd 58 12	lda $1258,x			lda 	AssemblerSpecialCases,x 	; scan token and mode for match
.138c	cd f3 0a	cmp $0af3			cmp 	asmToken
.138f	d0 08		bne $1399			bne 	_ASCNext
.1391	bd 59 12	lda $1259,x			lda 	AssemblerSpecialCases+1,x
.1394	cd f4 0a	cmp $0af4			cmp 	asmMode
.1397	f0 0a		beq $13a3			beq 	_ASCFound
.1399					_ASCNext:
.1399	e8		inx				inx									; next entry
.139a	e8		inx				inx
.139b	e8		inx				inx
.139c	bd 58 12	lda $1258,x			lda 	AssemblerSpecialCases,x 	; until table ends
.139f	d0 e8		bne $1389			bne 	_ASCScan
.13a1	18		clc				clc
.13a2	60		rts				rts
.13a3					_ASCFound:
.13a3	bd 5a 12	lda $125a,x			lda 	AssemblerSpecialCases+2,x 	; get the new opcode.
.13a6	48		pha				pha
.13a7	ae f4 0a	ldx $0af4			ldx  	asmMode 					; mode in X
.13aa	bd 0c 13	lda $130c,x			lda		AMDOperandSize,X 			; get the size of the operand in X
.13ad	aa		tax				tax
.13ae	68		pla				pla 								; opcode back
.13af	20 10 11	jsr $1110			jsr 	AsmWriteInstruction 		; output instruction.
.13b2	38		sec				sec
.13b3	60		rts				rts

;******  Return to file: assembler/assembler.asm

.13b4					assemblerHandler:
.13b4	7c b7 13	jmp ($13b7,x)			jmp 	(assemblerVectors,x)
.13b7					assemblerVectors:
>13b7	bd 13					.word _DummyControlHandler ; index 0
>13b9	a5 11					.word AssembleOneInstruction ; index 2
>13bb	77 12					.word AssembleLabel        ; index 4
.13bd					_DummyControlHandler:
.13bd	60		rts			rts

;******  Return to file: basic.asm

.13be					section_end_assembler:
.13be					section_start_device:

;******  Processing file: device/device.asm


;******  Processing file: device/option_x16/x16break.asm

.13be					X16Break:
.13be	20 e1 ff	jsr $ffe1			jsr 	$FFE1
.13c1	f0 01		beq $13c4			beq 	_IsBreak
.13c3	60		rts				rts
.13c4					_IsBreak:
.13c4	a2 21		ldx #$21			ldx 	#ErrorID_Break
.13c6	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: device/device.asm


;******  Processing file: device/option_x16/x16file.asm

.13c9					ExternSave:
.13c9	98		tya				tya
.13ca	48		pha				pha
.13cb	20 19 14	jsr $1419			jsr 	ExternGetLength 			; get length of file into A name YX
.13ce	20 bd ff	jsr $ffbd			jsr 	$FFBD 						; set name
.13d1	a9 01		lda #$01			lda 	#1
.13d3	a2 08		ldx #$08			ldx 	#8	 						; device #8
.13d5	a0 00		ldy #$00			ldy 	#0
.13d7	20 ba ff	jsr $ffba			jsr 	$FFBA 						; set LFS
.13da	a5 51		lda $51				lda 	esInt0+1 					; copy start of save address to temp0
.13dc	85 2a		sta $2a				sta 	temp0
.13de	a5 59		lda $59				lda 	esInt1+1
.13e0	85 2b		sta $2b				sta 	temp0+1
.13e2	a6 52		ldx $52				ldx 	esInt0+2 					; end address
.13e4	a4 5a		ldy $5a				ldy 	esInt1+2
.13e6	a9 2a		lda #$2a			lda 	#temp0 						; ref to start address
.13e8	20 d8 ff	jsr $ffd8			jsr 	$FFD8 						; save
.13eb	b0 03		bcs $13f0			bcs 	_ESSave
.13ed	68		pla				pla
.13ee	a8		tay				tay
.13ef	60		rts				rts
.13f0					_ESSave:
.13f0	a2 1f		ldx #$1f			ldx 	#ErrorID_Save
.13f2	20 18 15	jsr $1518		jsr	errorHandler
.13f5					ExternLoad:
.13f5	98		tya				tya
.13f6	48		pha				pha
.13f7	20 19 14	jsr $1419			jsr 	ExternGetLength 			; get length of file into A name YX
.13fa	20 bd ff	jsr $ffbd			jsr 	$FFBD 						; set name
.13fd	a9 01		lda #$01			lda 	#1
.13ff	a2 08		ldx #$08			ldx 	#8	 						; device #8
.1401	a0 00		ldy #$00			ldy 	#0
.1403	20 ba ff	jsr $ffba			jsr 	$FFBA 						; set LFS
.1406	a6 51		ldx $51				ldx 	esInt0+1 					; load address
.1408	a4 59		ldy $59				ldy 	esInt1+1
.140a	a9 00		lda #$00			lda 	#0 							; load command
.140c	20 d5 ff	jsr $ffd5			jsr 	$FFD5
.140f	b0 03		bcs $1414			bcs 	_ESLoad
.1411	68		pla				pla
.1412	a8		tay				tay
.1413	60		rts				rts
.1414					_ESLoad:
.1414	a2 20		ldx #$20			ldx 	#ErrorID_Load
.1416	20 18 15	jsr $1518		jsr	errorHandler
.1419					ExternGetLength:
.1419	a5 50		lda $50				lda 	esInt0 						; length into A.
.141b	85 2a		sta $2a				sta 	temp0
.141d	a5 58		lda $58				lda 	esInt1
.141f	85 2b		sta $2b				sta 	temp0+1
.1421	a0 00		ldy #$00			ldy 	#0
.1423	b1 2a		lda ($2a),y			lda 	(temp0),y
.1425	a6 50		ldx $50				ldx 	esInt0 						; name into YX
.1427	a4 58		ldy $58				ldy 	esInt1
.1429	e8		inx				inx 								; advance over the length pointer.
.142a	d0 01		bne $142d			bne 	_ESNoCarry
.142c	c8		iny				iny
.142d					_ESNoCarry:
.142d	60		rts				rts

;******  Return to file: device/device.asm


;******  Processing file: device/option_x16/x16io.asm

=240					MaxLineInputSize = 240
.0af6					bufferCount:
>0af6							.fill 	0
.0af6					bufferStorage:
>0af6							.fill 	MaxLineInputSize
.142e					IOControlHandler:
.142e	c9 00		cmp #$00			cmp 	#0
.1430	d0 12		bne $1444			bne		_CHExit
.1432	a9 0f		lda #$0f			lda 	#15 						; switch to upper/lower case mode
.1434	20 5d 14	jsr $145d			jsr 	IOPrintChar
.1437	a9 02		lda #$02			lda 	#2 							; green on black and clear screen
.1439	20 89 14	jsr $1489			jsr 	IOInk
.143c	a9 00		lda #$00			lda 	#0
.143e	20 9d 14	jsr $149d			jsr 	IOPaper
.1441	20 45 14	jsr $1445			jsr 	IOClearScreen
.1444					_CHExit:
.1444	60		rts				rts
.1445					IOClearScreen:
.1445	48		pha				pha
.1446	a9 93		lda #$93			lda	 	#147 						; char code $93 clears screen
.1448	20 5d 14	jsr $145d			jsr 	IOPrintChar
.144b	68		pla				pla
.144c	60		rts				rts
.144d					IONewLine:
.144d	48		pha				pha
.144e	a9 0d		lda #$0d			lda 	#13
.1450	20 5d 14	jsr $145d			jsr 	IOPrintChar
.1453	68		pla				pla
.1454	60		rts				rts
.1455					IOTab:
.1455	48		pha				pha
.1456	a9 20		lda #$20			lda 	#32
.1458	20 5d 14	jsr $145d			jsr 	IOPrintChar
.145b	68		pla				pla
.145c	60		rts				rts
.145d					IOPrintAscii:
.145d					IOPrintChar:
.145d	aa		tax				tax 								; save in X so we can save Y
.145e	5a		phy				phy
.145f	8a		txa				txa
.1460	c9 08		cmp #$08			cmp 	#8 							; make BS (8) onto CHR$(14) which is the
.1462	d0 02		bne $1466			bne 	_IOPCNotBS 					; Commodore/X16 backspace code.
.1464	a9 14		lda #$14			lda 	#$14
.1466					_IOPCNotBS:
.1466	20 d2 ff	jsr $ffd2			jsr 	$FFD2 						; CBM OS Call.
.1469	7a		ply				ply
.146a	60		rts				rts
.146b					IOInkey:
.146b	98		tya				tya
.146c	48		pha				pha
.146d	20 e4 ff	jsr $ffe4			jsr 	$FFE4
.1470	85 32		sta $32				sta 	tempShort
.1472	68		pla				pla
.1473	a8		tay				tay
.1474	a5 32		lda $32				lda 	tempShort					; no key pressed.
.1476	f0 10		beq $1488			beq 	_IOIExit
.1478	c9 0d		cmp #$0d			cmp 	#13 						; allow CR (13)
.147a	f0 0c		beq $1488			beq 	_IOIExit
.147c	c9 14		cmp #$14			cmp 	#$14 						; backspace code ($14) returns 8.
.147e	f0 06		beq $1486			beq 	_IOIBackspace
.1480	c9 20		cmp #$20			cmp 	#32 						; no other control allowed.
.1482	90 e7		bcc $146b			bcc 	IOInkey
.1484	b0 02		bcs $1488			bcs 	_IOIExit
.1486					_IOIBackspace:
.1486	a9 08		lda #$08			lda 	#8 							; return chr(8)
.1488					_IOIExit:
.1488	60		rts				rts
.1489					IOInk:
.1489	48		pha				pha
.148a	29 07		and #$07			and 	#7 							; 8 primaries
.148c	aa		tax				tax
.148d	bd 95 14	lda $1495,x			lda 	_IOColourTable,x 			; look up CBM code and print it.
.1490	20 5d 14	jsr $145d			jsr 	IOPrintChar
.1493	68		pla				pla
.1494	60		rts				rts
.1495					_IOColourTable:
>1495	90						.byte 	$90 					; 0 Black
>1496	96						.byte 	$96 					; 1 Red
>1497	1e						.byte 	$1E 					; 2 Green
>1498	9e						.byte 	$9E 					; 3 Yellow
>1499	9a						.byte 	$9A 					; 4 Blue
>149a	9c						.byte 	$9C 					; 5 Magenta
>149b	9f						.byte 	$9F 					; 6 Cyan
>149c	05						.byte 	$05 					; 7 White
.149d					IOPaper:
.149d	48		pha				pha
.149e	48		pha				pha
.149f	a9 01		lda #$01			lda 	#1 						; 1 swaps fgr/bgr, so we swap them, set fgr
.14a1	20 5d 14	jsr $145d			jsr 	IOPrintChar 			; and then swap them again.
.14a4	68		pla				pla
.14a5	20 89 14	jsr $1489			jsr 	IOInk
.14a8	a9 01		lda #$01			lda 	#1
.14aa	20 5d 14	jsr $145d			jsr 	IOPrintChar
.14ad	68		pla				pla
.14ae	60		rts				rts
.14af					IOLocate:
.14af	48		pha				pha
.14b0	a9 13		lda #$13			lda 	#$13 					; home cursor code
.14b2	20 5d 14	jsr $145d			jsr 	IOPrintChar
.14b5	a9 11		lda #$11			lda 	#$11 	 				; print Y x $11 (down)
.14b7	20 be 14	jsr $14be			jsr 	_IOLoc2
.14ba	68		pla				pla
.14bb	a8		tay				tay
.14bc	a9 1d		lda #$1d			lda 	#$1D 					; print Y x $1D (right)
.14be					_IOLoc2:
.14be	c0 00		cpy #$00			cpy 	#0
.14c0	f0 06		beq $14c8			beq 	_IOLocExit
.14c2	20 5d 14	jsr $145d			jsr 	IOPrintChar
.14c5	88		dey				dey
.14c6	d0 f6		bne $14be			bne 	_IOLoc2
.14c8					_IOLocExit:
.14c8	60		rts				rts
.14c9					IOInput:
.14c9	a9 00		lda #$00			lda 	#0
.14cb	8d f6 0a	sta $0af6			sta 	bufferCount
.14ce					_IOILoop:
.14ce	20 cf ff	jsr $ffcf			jsr 	$FFCF
.14d1	c9 0d		cmp #$0d			cmp 	#13
.14d3	f0 10		beq $14e5			beq 	_IOIExit
.14d5	ae f6 0a	ldx $0af6			ldx 	bufferCount
.14d8	e0 f0		cpx #$f0			cpx 	#MaxLineInputSize
.14da	f0 f2		beq $14ce			beq 	_IOILoop
.14dc	ee f6 0a	inc $0af6			inc 	bufferCount
.14df	9d f7 0a	sta $0af7,x			sta 	bufferStorage+1,x
.14e2	4c ce 14	jmp $14ce			jmp 	_IOILoop
.14e5					_IOIExit:
.14e5	a9 f6		lda #$f6			lda 	#(bufferCount) & $FF
.14e7	85 2a		sta $2a				sta 	temp0
.14e9	a9 0a		lda #$0a			lda 	#(bufferCount) >> 8
.14eb	85 2b		sta $2b				sta 	1+(temp0)
.14ed	60		rts				rts

;******  Return to file: device/device.asm


;******  Processing file: device/option_x16/x16timer.asm

.14ee					IOReadTimer:
.14ee	20 de ff	jsr $ffde			jsr 	$FFDE 						; reads timer into YXA so we want only YA
.14f1	48		pha				pha
.14f2	8a		txa				txa
.14f3	a8		tay				tay
.14f4	68		pla				pla
.14f5	60		rts				rts

;******  Return to file: device/device.asm

.14f6					deviceHandler:
.14f6	7c f9 14	jmp ($14f9,x)			jmp 	(deviceVectors,x)
.14f9					deviceVectors:
>14f9	2e 14					.word IOControlHandler     ; index 0
>14fb	be 13					.word X16Break             ; index 2
>14fd	45 14					.word IOClearScreen        ; index 4
>14ff	4d 14					.word IONewLine            ; index 6
>1501	89 14					.word IOInk                ; index 8
>1503	6b 14					.word IOInkey              ; index 10
>1505	c9 14					.word IOInput              ; index 12
>1507	f5 13					.word ExternLoad           ; index 14
>1509	af 14					.word IOLocate             ; index 16
>150b	9d 14					.word IOPaper              ; index 18
>150d	5d 14					.word IOPrintChar          ; index 20
>150f	5d 14					.word IOPrintAscii         ; index 22
>1511	c9 13					.word ExternSave           ; index 24
>1513	55 14					.word IOTab                ; index 26
>1515	ee 14					.word IOReadTimer          ; index 28
.1517					_DummyControlHandler:
.1517	60		rts			rts

;******  Return to file: basic.asm

.1518					section_end_device:
.1518					section_start_error:

;******  Processing file: error/error.asm


;******  Processing file: error/errorhandler.asm

.1518					ErrorHandler:
.1518	8a		txa				txa
.1519	48		pha				pha
.151a	a9 01		lda #$01			lda 	#1 							; red
.151c	a2 08		ldx #$08		ldx	#8
.151e	20 f6 14	jsr $14f6		jsr	deviceHandler
.1521	68		pla				pla
.1522	aa		tax				tax
.1523	a9 8e		lda #$8e			lda 	#(ErrorTextList) & $FF
.1525	85 2a		sta $2a				sta 	temp0
.1527	a9 15		lda #$15			lda 	#(ErrorTextList) >> 8
.1529	85 2b		sta $2b				sta 	1+(temp0)
.152b	ca		dex		_EHFind:dex									; errors start at 1
.152c	f0 10		beq $153e			beq 	_EHFound
.152e	a0 00		ldy #$00			ldy 	#0 							; goto next text message, add length + 1 to the pointer.
.1530	38		sec				sec
.1531	a5 2a		lda $2a				lda 	temp0
.1533	71 2a		adc ($2a),y			adc 	(temp0),y
.1535	85 2a		sta $2a				sta 	temp0
.1537	90 f2		bcc $152b			bcc 	_EHFind
.1539	e6 2b		inc $2b				inc 	temp0+1
.153b	4c 2b 15	jmp $152b			jmp 	_EHFind
.153e					_EHFound:
.153e	20 49 18	jsr $1849			jsr 	EHPrintAscii 				; print the string "temp0" now points to.
.1541	a0 00		ldy #$00			ldy 	#0 							; in a line, e.g. the offset to next is non zero.
.1543	b1 28		lda ($28),y			lda 	(codePtr),y
.1545	f0 39		beq $1580			beq 	_EHNoLine
.1547	a5 29		lda $29				lda 	codePtr+1 					; code running from the command line.
.1549	cd c9 0a	cmp $0ac9			cmp 	basePage+1
.154c	90 32		bcc $1580			bcc 	_EHNoLine
.154e	a9 8a		lda #$8a			lda 	#(EHAtMsg) & $FF
.1550	85 2a		sta $2a				sta 	temp0
.1552	a9 15		lda #$15			lda 	#(EHAtMsg) >> 8
.1554	85 2b		sta $2b				sta 	1+(temp0)
.1556	20 49 18	jsr $1849			jsr 	EHPrintAscii
.1559	a0 01		ldy #$01			ldy 	#1 							; set up line number in TOS
.155b	a2 00		ldx #$00			ldx 	#0
.155d	b1 28		lda ($28),y			lda 	(codePtr),y
.155f	95 50		sta $50,x			sta 	esInt0,x
.1561	c8		iny				iny
.1562	b1 28		lda ($28),y			lda 	(codePtr),y
.1564	95 58		sta $58,x			sta 	esInt1,x
.1566	a9 00		lda #$00			lda 	#0
.1568	95 60		sta $60,x			sta 	esInt2,x
.156a	95 68		sta $68,x			sta 	esInt3,x
.156c	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.156e	85 2a		sta $2a				sta 	temp0
.1570	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.1572	85 2b		sta $2b				sta 	1+(temp0)
.1574	a0 0a		ldy #$0a			ldy 	#10 						; in base 10.
.1576	a9 00		lda #$00			lda 	#0							; stack position zero.
.1578	a2 12		ldx #$12		ldx	#18
.157a	20 70 36	jsr $3670		jsr	mainHandler
.157d	20 49 18	jsr $1849			jsr 	EHPrintAscii
.1580					_EHNoLine:
.1580	a2 06		ldx #$06		ldx	#6
.1582	20 f6 14	jsr $14f6		jsr	deviceHandler
.1585	a2 04		ldx #$04		ldx	#4
.1587	20 d6 1f	jsr $1fd6		jsr	interactionHandler
.158a					EHAtMsg:
>158a	03 20 40 20					.text 	3," @ "

;******  Processing file: error/../generated/errortext.inc

.158e					ErrorTextList:
>158e	13 46 65 61 74 75 72 65			.text 19,"Feature not Present"
>1596	20 6e 6f 74 20 50 72 65 73 65 6e 74
>15a2	0c 53 79 6e 74 61 78 20			.text 12,"Syntax Error"
>15aa	45 72 72 6f 72
>15af	0f 4d 6f 64 75 6c 65 20			.text 15,"Module disabled"
>15b7	64 69 73 61 62 6c 65 64
>15bf	10 41 73 73 65 72 74 69			.text 16,"Assertion failed"
>15c7	6f 6e 20 66 61 69 6c 65 64
>15d0	0e 44 69 76 69 64 65 20			.text 14,"Divide By Zero"
>15d8	42 79 20 5a 65 72 6f
>15df	04 53 74 6f 70				.text 4,"Stop"
>15e4	0d 54 79 70 65 20 4d 69			.text 13,"Type Mismatch"
>15ec	73 6d 61 74 63 68
>15f2	0d 49 6c 6c 65 67 61 6c			.text 13,"Illegal Value"
>15fa	20 56 61 6c 75 65
>1600	15 4d 69 73 73 69 6e 67			.text 21,"Missing right bracket"
>1608	20 72 69 67 68 74 20 62 72 61 63 6b 65 74
>1616	0d 4d 69 73 73 69 6e 67			.text 13,"Missing comma"
>161e	20 63 6f 6d 6d 61
>1624	11 4d 69 73 73 69 6e 67			.text 17,"Missing reference"
>162c	20 72 65 66 65 72 65 6e 63 65
>1636	15 4c 69 6e 65 20 4e 75			.text 21,"Line Number not found"
>163e	6d 62 65 72 20 6e 6f 74 20 66 6f 75 6e 64
>164c	0f 53 74 72 69 6e 67 20			.text 15,"String too long"
>1654	74 6f 6f 20 6c 6f 6e 67
>165c	14 52 45 54 55 52 4e 20			.text 20,"RETURN without GOSUB"
>1664	77 69 74 68 6f 75 74 20 47 4f 53 55 42
>1671	14 55 4e 54 49 4c 20 77			.text 20,"UNTIL without REPEAT"
>1679	69 74 68 6f 75 74 20 52 45 50 45 41 54
>1686	10 4e 45 58 54 20 77 69			.text 16,"NEXT without FOR"
>168e	74 68 6f 75 74 20 46 4f 52
>1697	12 57 45 4e 44 20 77 69			.text 18,"WEND without WHILE"
>169f	74 68 6f 75 74 20 57 48 49 4c 45
>16aa	14 45 4e 44 50 52 4f 43			.text 20,"ENDPROC without PROC"
>16b2	20 77 69 74 68 6f 75 74 20 50 52 4f 43
>16bf	0e 42 61 64 20 4e 45 58			.text 14,"Bad NEXT index"
>16c7	54 20 69 6e 64 65 78
>16ce	17 53 74 72 75 63 74 75			.text 23,"Structures nested wrong"
>16d6	72 65 73 20 6e 65 73 74 65 64 20 77 72 6f 6e 67
>16e6	16 43 61 6e 6e 6f 74 20			.text 22,"Cannot create variable"
>16ee	63 72 65 61 74 65 20 76 61 72 69 61 62 6c 65
>16fd	19 52 65 74 75 72 6e 20			.text 25,"Return stack out of space"
>1705	73 74 61 63 6b 20 6f 75 74 20 6f 66 20 73 70 61
>1715	63 65
>1717	11 55 6e 6b 6e 6f 77 6e			.text 17,"Unknown Procedure"
>171f	20 50 72 6f 63 65 64 75 72 65
>1729	17 50 61 72 61 6d 65 74			.text 23,"Parameters do not match"
>1731	65 72 73 20 64 6f 20 6e 6f 74 20 6d 61 74 63 68
>1741	15 41 72 72 61 79 20 61			.text 21,"Array already defined"
>1749	6c 72 65 61 64 79 20 64 65 66 69 6e 65 64
>1757	12 44 49 4d 20 72 65 71			.text 18,"DIM requires array"
>175f	75 69 72 65 73 20 61 72 72 61 79
>176a	0f 42 61 64 20 61 72 72			.text 15,"Bad array index"
>1772	61 79 20 69 6e 64 65 78
>177a	1d 57 72 6f 6e 67 20 6e			.text 29,"Wrong number of array indices"
>1782	75 6d 62 65 72 20 6f 66 20 61 72 72 61 79 20 69
>1792	6e 64 69 63 65 73
>1798	0b 4f 75 74 20 6f 66 20			.text 11,"Out of data"
>17a0	64 61 74 61
>17a4	14 43 61 6e 6e 6f 74 20			.text 20,"Cannot tokenise line"
>17ac	74 6f 6b 65 6e 69 73 65 20 6c 69 6e 65
>17b9	0b 53 61 76 65 20 66 61			.text 11,"Save failed"
>17c1	69 6c 65 64
>17c5	0b 4c 6f 61 64 20 66 61			.text 11,"Load failed"
>17cd	69 6c 65 64
>17d1	05 42 72 65 61 6b			.text 5,"Break"
>17d7	0d 4f 75 74 20 6f 66 20			.text 13,"Out of memory"
>17df	6d 65 6d 6f 72 79
>17e5	16 45 78 70 72 65 73 73			.text 22,"Expression too complex"
>17ed	69 6f 6e 20 74 6f 6f 20 63 6f 6d 70 6c 65 78
>17fc	10 42 61 64 20 4f 70 65			.text 16,"Bad Operand/Mode"
>1804	72 61 6e 64 2f 4d 6f 64 65
>180d	13 42 72 61 6e 63 68 20			.text 19,"Branch out of range"
>1815	6f 75 74 20 6f 66 20 72 61 6e 67 65
>1821	13 4c 61 62 65 6c 20 63			.text 19,"Label changed value"
>1829	68 61 6e 67 65 64 20 76 61 6c 75 65
>1835	12 4e 6f 20 53 70 72 69			.text 18,"No Sprite Selected"
>183d	74 65 20 53 65 6c 65 63 74 65 64
>1848	00					.byte 0

;******  Return to file: error/errorhandler.asm

.1849					EHPrintAscii:
.1849	a0 00		ldy #$00			ldy 	#0
.184b	b1 2a		lda ($2a),y			lda 	(temp0),y
.184d	aa		tax				tax
.184e	f0 0f		beq $185f			beq 	_EHPExit
.1850					_EHPLoop:
.1850	c8		iny				iny
.1851	8a		txa				txa
.1852	48		pha				pha
.1853	b1 2a		lda ($2a),y			lda 	(temp0),y
.1855	a2 16		ldx #$16		ldx	#22
.1857	20 f6 14	jsr $14f6		jsr	deviceHandler
.185a	68		pla				pla
.185b	aa		tax				tax
.185c	ca		dex				dex
.185d	d0 f1		bne $1850			bne 	_EHPLoop
.185f					_EHPExit:
.185f	60		rts				rts

;******  Return to file: error/error.asm


;******  Return to file: basic.asm

.1860					section_end_error:
.1860					section_start_extension:

;******  Processing file: extension/extension.asm


;******  Processing file: extension/extensionhandler.asm

.1860					ExtensionHandler:
.1860	c9 fe		cmp #$fe			cmp 	#$FE 						; check for force mode 0
.1862	f0 16		beq $187a			beq 	_ExtensionForce
.1864	c9 ff		cmp #$ff			cmp 	#$FF						; A = $FF command, otherwise unary function stack level.
.1866	d0 08		bne $1870			bne 	_ExtensionUnary 			; is passed in A.
.1868	b1 28		lda ($28),y			lda 	(codePtr),y 				; so this is a command, using Group 2.
.186a	c8		iny				iny
.186b	0a		asl a				asl 	a
.186c	aa		tax				tax
.186d	7c 71 18	jmp ($1871,x)			jmp 	(Group2Vectors-12,x)
.1870					_ExtensionUnary:
.1870	48		pha				pha 								; save stack pos in A
.1871	b1 28		lda ($28),y			lda 	(codePtr),y 				; get shifted token, double into X
.1873	c8		iny				iny
.1874	0a		asl a				asl 	a
.1875	aa		tax				tax
.1876	68		pla				pla 								; restore stack pos and call group3 command.
.1877	7c 7d 18	jmp ($187d,x)			jmp 	(Group3Vectors-12,X)
.187a					_ExtensionForce:
.187a	4c 5b 1b	jmp $1b5b			jmp 	ForceMode0

;******  Processing file: extension/../generated/tokenvectors2.inc

.187d					Group2Vectors:
>187d	83 1c					.word	Command_VPoke            ; $86 vpoke
>187f	86 1c					.word	Command_VDoke            ; $87 vdoke
>1881	5b 1c					.word	Command_VLoad            ; $88 vload
>1883	6d 1b					.word	CommandMode              ; $89 mode
>1885	24 1c					.word	CommandPalette           ; $8a palette
>1887	58 19					.word	CommandSprite            ; $8b sprite

;******  Return to file: extension/extensionhandler.asm


;******  Processing file: extension/../generated/tokenvectors3.inc

.1889					Group3Vectors:
>1889	cf 1c					.word	Command_VPeek            ; $86 vpeek(
>188b	d2 1c					.word	Command_VDeek            ; $87 vdeek(
>188d	2b 1b					.word	Sprite_GetX              ; $88 sprite.x(
>188f	2e 1b					.word	Sprite_GetY              ; $89 sprite.y(
>1891	9b 18					.word	FunctionCollide          ; $8a hit(

;******  Return to file: extension/extensionhandler.asm

.1893					XEvaluateInteger:
.1893	8a		txa				txa
.1894	a2 0a		ldx #$0a		ldx	#10
.1896	20 70 36	jsr $3670		jsr	mainHandler
.1899	aa		tax				tax
.189a	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/sprites/collide.asm

.0be6					hitSprite1:
>0be6							.fill 	1 							; this won't work ... if you nest HIT() which
.0be7					hitSprite2:
>0be7							.fill 	1
.0be8					hitRange:
>0be8							.fill 	1
.189b					FunctionCollide:
.189b	48		pha				pha 								; save and put index into X
.189c	aa		tax				tax
.189d	a9 00		lda #$00			lda 	#0 							; set hit range to default.
.189f	8d e8 0b	sta $0be8			sta 	hitRange
.18a2	20 47 19	jsr $1947			jsr 	_FCGetSpriteID
.18a5	8d e6 0b	sta $0be6			sta 	hitSprite1
.18a8	8a		txa				txa
.18a9	48		pha				pha
.18aa	a2 02		ldx #$02		ldx	#2
.18ac	20 70 36	jsr $3670		jsr	mainHandler
.18af	68		pla				pla
.18b0	aa		tax				tax
.18b1	20 47 19	jsr $1947			jsr 	_FCGetSpriteID
.18b4	8d e7 0b	sta $0be7			sta 	hitSprite2
.18b7	b1 28		lda ($28),y			lda 	(codePtr),y 				; is there a third parameter
.18b9	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.18bb	f0 13		beq $18d0			beq 	_FCParam2
.18bd	8a		txa				txa
.18be	48		pha				pha
.18bf	a2 02		ldx #$02		ldx	#2
.18c1	20 70 36	jsr $3670		jsr	mainHandler
.18c4	68		pla				pla
.18c5	a2 0c		ldx #$0c		ldx	#12
.18c7	20 70 36	jsr $3670		jsr	mainHandler
.18ca	aa		tax				tax
.18cb	b5 50		lda $50,x			lda 	esInt0,x
.18cd	8d e8 0b	sta $0be8			sta 	hitRange
.18d0					_FCParam2:
.18d0	a2 04		ldx #$04		ldx	#4
.18d2	20 70 36	jsr $3670		jsr	mainHandler
.18d5	68		pla				pla 								; set X to point to the stack again.
.18d6	48		pha				pha
.18d7	aa		tax				tax
.18d8	98		tya				tya
.18d9	48		pha				pha
.18da	18		clc				clc 								; do it with the horizontal values.
.18db	20 fd 18	jsr $18fd			jsr 	_FCCheck
.18de	90 0a		bcc $18ea			bcc 	_FCFail
.18e0	38		sec				sec 								; do it with the vertical values.
.18e1	20 fd 18	jsr $18fd			jsr 	_FCCheck
.18e4	90 04		bcc $18ea			bcc 	_FCFail
.18e6	a9 ff		lda #$ff			lda 	#255 						; pass, return -1
.18e8	d0 02		bne $18ec			bne 	_FCReturnA
.18ea					_FCFail:
.18ea	a9 00		lda #$00			lda 	#0 							; return 0, it didn't work.
.18ec					_FCReturnA:
.18ec	85 32		sta $32				sta 	tempShort 					; put result in tempShort
.18ee	68		pla				pla
.18ef	a8		tay				tay
.18f0	68		pla				pla 								; restore stack, return result and exit.
.18f1	aa		tax				tax
.18f2	a5 32		lda $32				lda 	tempShort
.18f4	95 50		sta $50,x			sta 	esInt0,x
.18f6	95 58		sta $58,x			sta 	esInt1,x
.18f8	95 60		sta $60,x			sta 	esInt2,x
.18fa	95 68		sta $68,x			sta 	esInt3,x
.18fc	60		rts				rts
.18fd					_FCCheck:
.18fd	08		php				php 								; save the H/V flag twice
.18fe	08		php				php
.18ff	ad e6 0b	lda $0be6			lda 	hitSprite1 					; select sprite 1 and read its location
.1902	20 85 1a	jsr $1a85			jsr 	SelectSpriteA 				; into X
.1905	28		plp				plp
.1906	20 e7 1a	jsr $1ae7			jsr 	SpriteReadCoordinate
.1909	ad e7 0b	lda $0be7			lda 	hitSprite2					; now repeat for sprite 2 and location X+1
.190c	20 85 1a	jsr $1a85			jsr 	SelectSpriteA
.190f	e8		inx				inx
.1910	28		plp				plp
.1911	20 e7 1a	jsr $1ae7			jsr 	SpriteReadCoordinate
.1914	ca		dex				dex
.1915	38		sec				sec 								; calculate |s1.c-s2.c| put in temp0
.1916	b5 50		lda $50,x			lda 	esInt0,x
.1918	f5 51		sbc $51,x			sbc 	esInt0+1,x
.191a	85 2a		sta $2a				sta 	temp0
.191c	b5 58		lda $58,x			lda 	esInt1,x
.191e	f5 59		sbc $59,x			sbc 	esInt1+1,x
.1920	85 2b		sta $2b				sta 	temp0+1
.1922	10 0d		bpl $1931			bpl 	_FCCIsPositive
.1924	38		sec				sec 								; if -ve calculate |difference|
.1925	a9 00		lda #$00			lda 	#0
.1927	e5 2a		sbc $2a				sbc 	temp0
.1929	85 2a		sta $2a				sta 	temp0
.192b	a9 00		lda #$00			lda 	#0
.192d	e5 2b		sbc $2b				sbc 	temp0+1
.192f	85 2b		sta $2b				sta 	temp0+1
.1931					_FCCIsPositive:
.1931	a5 2b		lda $2b				lda 	temp0+1 					; if range >= 256 then definitely fail.
.1933	d0 10		bne $1945			bne 	_FCCFail
.1935	18		clc				clc 								; work out required min distance which is
.1936	b5 68		lda $68,x			lda 	esInt3,x 					; the sum of the half width/heights
.1938	75 69		adc $69,x			adc 	esInt3+1,x
.193a	ac e8 0b	ldy $0be8			ldy 	hitRange 					; get the hit range
.193d	f0 01		beq $1940			beq 	_FCCNoSetRange 				; override if non zero.
.193f	98		tya				tya
.1940					_FCCNoSetRange:
.1940	c5 2a		cmp $2a				cmp 	temp0 						; result is range > distance
.1942	f0 01		beq $1945			beq 	_FCCFail
.1944	60		rts				rts
.1945					_FCCFail:
.1945	18		clc				clc
.1946	60		rts				rts
.1947					_FCGetSpriteID:
.1947	8a		txa				txa
.1948	a2 0c		ldx #$0c		ldx	#12
.194a	20 70 36	jsr $3670		jsr	mainHandler
.194d	aa		tax				tax
.194e	b5 50		lda $50,x			lda 	esInt0,x
.1950	30 01		bmi $1953			bmi 	_FCGSValue
.1952	60		rts				rts
.1953					_FCGSValue:
.1953	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.1955	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/sprites/sprite.asm

.0be9					currSprite:
>0be9							.fill 	2
.1958					CommandSprite:
.1958	20 5a 1a	jsr $1a5a			jsr 	CSCheckOnOff 				; look for TRUE/FALSE
.195b	d0 0d		bne $196a			bne 	_CSCheckClear
.195d	ad 29 9f	lda $9f29			lda 	$9F29 						; sprite enable is bit 6.
.1960	29 bf		and #$bf			and 	#$BF 						; clear it whatever
.1962	90 02		bcc $1966			bcc 	_CSNotOn 					; if CS turn on, so set it
.1964	09 40		ora #$40			ora 	#$40
.1966					_CSNotOn:
.1966	8d 29 9f	sta $9f29			sta 	$9F29 						; write it back in new state and exit
.1969	60		rts				rts
.196a					_CSCheckClear:
.196a	a9 00		lda #$00			lda 	#0 							; no sprite currently selected.
.196c	8d ea 0b	sta $0bea			sta 	currSprite+1
.196f	b1 28		lda ($28),y			lda 	(codePtr),y 				; check for CLEAR
.1971	c9 e7		cmp #$e7			cmp 	#TKW_CLEAR
.1973	d0 05		bne $197a			bne 	_CSCommandLoop 				; not CLEAR, go to main loop
.1975	20 6b 1a	jsr $1a6b			jsr 	CSClearSprites 				; clear all the sprites
.1978	c8		iny				iny 								; consume CLEAR token and exit.
.1979	60		rts				rts
.197a					_CSCommandLoop:
.197a	20 5a 1a	jsr $1a5a			jsr 	CSCheckOnOff 				; check sprite on/off
.197d	f0 2c		beq $19ab			beq 	_CSSetVisibility
.197f	b1 28		lda ($28),y			lda 	(codePtr),y 				; get and consume character
.1981	c9 80		cmp #$80			cmp 	#TOK_EOL					; EOL exit.
.1983	f0 25		beq $19aa			beq 	_CSExit
.1985	c8		iny				iny									; consume it
.1986	c9 ca		cmp #$ca			cmp 	#TKW_COLON 					; colon exit
.1988	f0 20		beq $19aa			beq 	_CSExit
.198a	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; semantic comma
.198c	f0 ec		beq $197a			beq 	_CSCommandLoop
.198e	c9 da		cmp #$da			cmp		#TKW_IMAGE 					; image ?
.1990	f0 69		beq $19fb			beq 	_CSSetImage
.1992	c9 dc		cmp #$dc			cmp 	#TKW_FLIP 					; flip ?
.1994	f0 2b		beq $19c1			beq 	_CSSetFlip
.1996	c9 ce		cmp #$ce			cmp 	#TKW_TO 					; to ?
.1998	f0 46		beq $19e0			beq 	_CSSetPos
.199a	88		dey				dey 								; unpick DEY
.199b	a9 00		lda #$00			lda 	#0 							; sprite # now at level 0
.199d	a2 0c		ldx #$0c		ldx	#12
.199f	20 70 36	jsr $3670		jsr	mainHandler
.19a2	a5 50		lda $50				lda 	esInt0
.19a4	20 85 1a	jsr $1a85			jsr 	SelectSpriteA
.19a7	4c 7a 19	jmp $197a			jmp 	_CSCommandLoop
.19aa					_CSExit:
.19aa	60		rts				rts
.19ab					_CSSetVisibility:
.19ab	08		php				php 								; save carry
.19ac	a9 06		lda #$06			lda 	#6 							; set pos to offset 6.
.19ae	20 41 1a	jsr $1a41			jsr 	SpriteSetTarget
.19b1	ad 23 9f	lda $9f23			lda 	$9F23 						; read it.
.19b4	29 f3		and #$f3			and 	#$F3 						; clear depth bits, disabling it.
.19b6	28		plp				plp
.19b7	90 02		bcc $19bb			bcc 	_CSSetOff 					; check if carry was set
.19b9	09 0c		ora #$0c			ora 	#$0C 						; otherwise set depth bits to 11, on top.
.19bb					_CSSetOff:
.19bb	8d 23 9f	sta $9f23			sta 	$9F23 						; update and loop back
.19be	4c 7a 19	jmp $197a			jmp 	_CSCommandLoop
.19c1					_CSSetFlip:
.19c1	a9 00		lda #$00			lda 	#0 							; image # now at level 0
.19c3	a2 0c		ldx #$0c		ldx	#12
.19c5	20 70 36	jsr $3670		jsr	mainHandler
.19c8	a9 06		lda #$06			lda 	#6 							; set sprite position to +6
.19ca	20 41 1a	jsr $1a41			jsr 	SpriteSetTarget
.19cd	a5 50		lda $50				lda 	esInt0 						; flip value & 3 => temp0
.19cf	29 03		and #$03			and 	#3
.19d1	85 2a		sta $2a				sta 	temp0
.19d3	ad 23 9f	lda $9f23			lda 	$9F23 						; update the flip.
.19d6	29 fc		and #$fc			and 	#$FC
.19d8	05 2a		ora $2a				ora 	temp0
.19da	8d 23 9f	sta $9f23			sta 	$9F23
.19dd	4c 7a 19	jmp $197a			jmp 	_CSCommandLoop
.19e0					_CSSetPos:
.19e0	a9 00		lda #$00			lda 	#0 							; X now at level 0
.19e2	a2 0a		ldx #$0a		ldx	#10
.19e4	20 70 36	jsr $3670		jsr	mainHandler
.19e7	a2 02		ldx #$02		ldx	#2
.19e9	20 70 36	jsr $3670		jsr	mainHandler
.19ec	a9 01		lda #$01			lda 	#1 							; Y now at level 1
.19ee	a2 0a		ldx #$0a		ldx	#10
.19f0	20 70 36	jsr $3670		jsr	mainHandler
.19f3	a2 00		ldx #$00			ldx 	#0 							; coords at 0,1
.19f5	20 a3 1a	jsr $1aa3			jsr 	SpriteMove 					; move it.
.19f8	4c 7a 19	jmp $197a			jmp 	_CSCommandLoop
.19fb					_CSSetImage:
.19fb	a9 00		lda #$00			lda 	#0 							; image # now at level 0
.19fd	a2 0c		ldx #$0c		ldx	#12
.19ff	20 70 36	jsr $3670		jsr	mainHandler
.1a02	a9 00		lda #$00			lda 	#0 							; set sprite position to +0
.1a04	20 41 1a	jsr $1a41			jsr 	SpriteSetTarget
.1a07	a6 50		ldx $50				ldx 	esInt0 						; get image # into X
.1a09	bd 30 0c	lda $0c30,x			lda 	imageAddr2Low,x 			; copy low address in.
.1a0c	8d 23 9f	sta $9f23			sta 	$9F23
.1a0f	ee 20 9f	inc $9f20			inc 	$9F20 						; bump to offset 1.
.1a12	bd f0 0b	lda $0bf0,x			lda 	imageInfo,x 				; get 4/8 bit flag from info.
.1a15	29 10		and #$10			and 	#$10
.1a17	0a		asl a				asl 	a
.1a18	0a		asl a				asl		a
.1a19	0a		asl a				asl 	a 							; put into bit 7
.1a1a	1d 70 0c	ora $0c70,x			ora 	imageAddr2High,x 			; or high address with it.
.1a1d	8d 23 9f	sta $9f23			sta 	$9F23 						; write the high byte.
.1a20	a9 06		lda #$06			lda 	#6
.1a22	20 41 1a	jsr $1a41			jsr 	SpriteSetTarget 			; set sprite on.
.1a25	ad 23 9f	lda $9f23			lda 	$9F23
.1a28	09 0c		ora #$0c			ora 	#$0C
.1a2a	8d 23 9f	sta $9f23			sta 	$9F23
.1a2d	ee 20 9f	inc $9f20			inc 	$9F20 						; point to byte 7 : height/width/palette offset
.1a30	bd f0 0b	lda $0bf0,x			lda 	imageInfo,x 				; get image info
.1a33	0a		asl a				asl 	a 							; shift bits 0-3 to 4-7
.1a34	0a		asl a				asl 	a
.1a35	0a		asl a				asl 	a
.1a36	0a		asl a				asl 	a
.1a37	b0 02		bcs $1a3b			bcs		_CSNoOffset 				; if bit 4 was set don't set the offset.
.1a39	09 0f		ora #$0f			ora 	#$0F 						; set palette offset and write back
.1a3b					_CSNoOffset:
.1a3b	8d 23 9f	sta $9f23			sta 	$9F23
.1a3e	4c 7a 19	jmp $197a			jmp 	_CSCommandLoop
.1a41					SpriteSetTarget:
.1a41	0d e9 0b	ora $0be9			ora 	currSprite
.1a44	8d 20 9f	sta $9f20			sta 	$9F20
.1a47	ad ea 0b	lda $0bea			lda 	currSprite+1
.1a4a	f0 09		beq $1a55			beq 	_SSTNoSet
.1a4c	8d 21 9f	sta $9f21			sta 	$9F21
.1a4f	a9 01		lda #$01			lda 	#$01
.1a51	8d 22 9f	sta $9f22			sta 	$9F22
.1a54	60		rts				rts
.1a55					_SSTNoSet:
.1a55	a2 27		ldx #$27			ldx 	#ErrorID_NoSprite
.1a57	20 18 15	jsr $1518		jsr	errorHandler
.1a5a					CSCheckOnOff:
.1a5a	b1 28		lda ($28),y			lda 	(codePtr),y 				; get and consume it.
.1a5c	c8		iny				iny
.1a5d	c9 ab		cmp #$ab			cmp 	#TKW_FALSE					; return CC/EQ if FALSE
.1a5f	18		clc				clc
.1a60	f0 08		beq $1a6a			beq 	_CSCOExit
.1a62	c9 aa		cmp #$aa			cmp 	#TKW_TRUE 					; return CS/EQ if TRUE
.1a64	38		sec				sec 								; return NE if neither.
.1a65	f0 03		beq $1a6a			beq 	_CSCOExit
.1a67	88		dey				dey 								; undo consume
.1a68	c9 aa		cmp #$aa			cmp 	#TKW_TRUE 					; and set NE again, DEY will change it.
.1a6a					_CSCOExit:
.1a6a	60		rts				rts
.1a6b					CSClearSprites:
.1a6b	a9 11		lda #$11			lda 	#$11 						; set address to 1FC00 with single bump
.1a6d	8d 22 9f	sta $9f22			sta 	$9F22
.1a70	a9 fc		lda #$fc			lda 	#$FC
.1a72	8d 21 9f	sta $9f21			sta 	$9F21
.1a75	a9 00		lda #$00			lda 	#0
.1a77	8d 20 9f	sta $9f20			sta 	$9F20
.1a7a					_CSClear:
.1a7a	a9 00		lda #$00			lda 	#0 							; set everything to $00
.1a7c	8d 23 9f	sta $9f23			sta 	$9F23
.1a7f	ad 21 9f	lda $9f21			lda 	$9F21
.1a82	d0 f6		bne $1a7a			bne 	_CSClear
.1a84	60		rts				rts
.1a85					SelectSpriteA:
.1a85	85 2a		sta $2a				sta 	temp0
.1a87	a9 00		lda #$00			lda 	#0
.1a89	06 2a		asl $2a				asl		temp0 						; multiply A:esInt0 by 8
.1a8b	b0 11		bcs $1a9e			bcs 	_CSBadValue 				; sprites only 0-127
.1a8d	06 2a		asl $2a				asl 	temp0
.1a8f	2a		rol a				rol 	a
.1a90	06 2a		asl $2a				asl 	temp0
.1a92	2a		rol a				rol 	a
.1a93	09 fc		ora #$fc			ora 	#$FC 						; MSB of address (barring $01 upper third byte)
.1a95	8d ea 0b	sta $0bea			sta 	currSprite+1
.1a98	a5 2a		lda $2a				lda 	temp0 						; LSB of address
.1a9a	8d e9 0b	sta $0be9			sta 	currSprite+0
.1a9d	60		rts				rts
.1a9e					_CSBadValue
.1a9e	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.1aa0	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/sprites/spritemove.asm

.1aa3					SpriteMove:
.1aa3	98		tya				tya
.1aa4	48		pha				pha
.1aa5	a9 07		lda #$07			lda 	#7 									; point to height/width byte and read it.
.1aa7	20 41 1a	jsr $1a41			jsr 	SpriteSetTarget
.1aaa	ad 23 9f	lda $9f23			lda 	$9F23
.1aad	4a		lsr a				lsr 	a 									; A now contains bits 0-1 (width) 2-3 (height)
.1aae	4a		lsr a				lsr 	a
.1aaf	4a		lsr a				lsr 	a
.1ab0	4a		lsr a				lsr 	a
.1ab1	85 2a		sta $2a				sta 	temp0 								; save these bits so we can work out the centre.
.1ab3	a9 02		lda #$02			lda 	#2 									; point to X position.Low
.1ab5	20 41 1a	jsr $1a41			jsr 	SpriteSetTarget
.1ab8	20 c7 1a	jsr $1ac7			jsr 	SMWritePosition 					; write X position out.
.1abb	46 2a		lsr $2a				lsr 	temp0 								; shift height bits into 0,1
.1abd	46 2a		lsr $2a				lsr 	temp0
.1abf	e8		inx				inx 										; get the y position
.1ac0	20 c7 1a	jsr $1ac7			jsr 	SMWritePosition 					; and write that out.
.1ac3	ca		dex				dex 										; fix X and quit.
.1ac4	68		pla				pla
.1ac5	a8		tay				tay
.1ac6	60		rts				rts
.1ac7					SMWritePosition:
.1ac7	a5 2a		lda $2a				lda 	temp0 								; get dim size
.1ac9	29 03		and #$03			and 	#3 									; in range into Y
.1acb	a8		tay				tay
.1acc	38		sec				sec
.1acd	b5 50		lda $50,x			lda 	esInt0,x
.1acf	f9 e3 1a	sbc $1ae3,y			sbc 	SMHalfSize,y
.1ad2	8d 23 9f	sta $9f23			sta 	$9F23
.1ad5	ee 20 9f	inc $9f20			inc 	$9F20
.1ad8	b5 58		lda $58,x			lda 	esInt1,x
.1ada	e9 00		sbc #$00			sbc 	#0
.1adc	8d 23 9f	sta $9f23			sta 	$9F23
.1adf	ee 20 9f	inc $9f20			inc 	$9F20
.1ae2	60		rts				rts
.1ae3					SMHalfSize:
>1ae3	04 08 10 20					.byte 	4,8,16,32 							; half size each dimension.
.1ae7					SpriteReadCoordinate:
.1ae7	98		tya				tya
.1ae8	48		pha				pha
.1ae9	08		php				php 										; save CTR on stack
.1aea	a9 07		lda #$07			lda 	#7 									; point to height/width byte and read it.
.1aec	20 41 1a	jsr $1a41			jsr 	SpriteSetTarget
.1aef	ad 23 9f	lda $9f23			lda 	$9F23
.1af2	4a		lsr a				lsr 	a 									; A now contains bits 0-1 (width) 2-3 (height)
.1af3	4a		lsr a				lsr 	a
.1af4	4a		lsr a				lsr 	a
.1af5	4a		lsr a				lsr 	a
.1af6	28		plp				plp 										; restore CTS
.1af7	08		php				php
.1af8	90 02		bcc $1afc			bcc 	_SPRCNotY1 							; if it is Y, e.g. CS, shift twice more.
.1afa	4a		lsr a				lsr 	a
.1afb	4a		lsr a				lsr 	a
.1afc					_SPRCNotY1:
.1afc	29 03		and #$03			and 	#3 									; point into half width/height
.1afe	a8		tay				tay
.1aff	b9 e3 1a	lda $1ae3,y			lda 	SMHalfSize,y 						; get half size -> esInt3,x
.1b02	95 68		sta $68,x			sta 	esInt3,x
.1b04	28		plp				plp 										; CS Y CC X
.1b05	a9 00		lda #$00			lda 	#0 									; A = 0 X A = 2 Y
.1b07	2a		rol a				rol 	a
.1b08	2a		rol a				rol 	a
.1b09	69 02		adc #$02			adc 	#2 									; A = 2 X A = 4 Y
.1b0b	20 41 1a	jsr $1a41			jsr 	SpriteSetTarget 					; set data pointer offset by that
.1b0e	18		clc				clc 										; read and unfix centre.
.1b0f	ad 23 9f	lda $9f23			lda 	$9F23
.1b12	75 68		adc $68,x			adc 	esInt3,x
.1b14	95 50		sta $50,x			sta 	esInt0,x
.1b16	ee 20 9f	inc $9f20			inc 	$9F20 								; do MSB
.1b19	ad 23 9f	lda $9f23			lda 	$9F23
.1b1c	69 00		adc #$00			adc 	#0
.1b1e	29 0f		and #$0f			and 	#$0F 								; sign extend on bit 11.
.1b20	c9 08		cmp #$08			cmp		#$08
.1b22	90 02		bcc $1b26			bcc 	_SPRCNoSX
.1b24	09 f0		ora #$f0			ora 	#$F0
.1b26					_SPRCNoSX:
.1b26	95 58		sta $58,x			sta 	esInt1,x
.1b28	68		pla				pla
.1b29	a8		tay				tay
.1b2a	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/sprites/spriteutils.asm

.1b2b					Sprite_GetX:
.1b2b	18		clc				clc
.1b2c	90 01		bcc $1b2f			bcc 	SpriteGetCode
.1b2e					Sprite_GetY:
.1b2e	38		sec				sec
.1b2f					SpriteGetCode:
.1b2f	08		php				php 								; CLC : X SEC: Y, save on stack.
.1b30	48		pha				pha 								; save stack position
.1b31	20 4d 1b	jsr $1b4d			jsr 	GetSpriteNumber 			; get # of sprite.
.1b34	a2 04		ldx #$04		ldx	#4
.1b36	20 70 36	jsr $3670		jsr	mainHandler
.1b39	68		pla				pla
.1b3a	aa		tax				tax
.1b3b	28		plp				plp 								; which one ?
.1b3c	20 e7 1a	jsr $1ae7			jsr 	SpriteReadCoordinate 		; read appropriate coordinate into esInt0,x
.1b3f	b5 58		lda $58,x			lda 	esInt1,x 					; get sign bit, sign extend 16->32 bits
.1b41	29 80		and #$80			and 	#$80
.1b43	f0 02		beq $1b47			beq 	_SGXYPos
.1b45	a9 ff		lda #$ff			lda 	#$FF
.1b47					_SGXYPos:
.1b47	95 60		sta $60,x			sta 	esInt2,x
.1b49	95 68		sta $68,x			sta 	esInt3,x
.1b4b	8a		txa				txa 								; return NSP in A
.1b4c	60		rts				rts
.1b4d					GetSpriteNumber:
.1b4d	48		pha				pha
.1b4e	a2 0c		ldx #$0c		ldx	#12
.1b50	20 70 36	jsr $3670		jsr	mainHandler
.1b53	68		pla				pla
.1b54	aa		tax				tax
.1b55	b5 50		lda $50,x			lda 	esInt0,x
.1b57	20 85 1a	jsr $1a85			jsr 	SelectSpriteA
.1b5a	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/video/mode.asm

.0beb					currentMode:
>0beb							.fill 	4
.1b5b					ForceMode0:
.1b5b	a2 00		ldx #$00			ldx 	#0
.1b5d	86 50		stx $50				stx 	esInt0 						; in case we do it.
.1b5f					_FMCheck:
.1b5f	bd ec 1b	lda $1bec,x			lda 	CMModeList,x 				; do we need to switch ?
.1b62	dd eb 0b	cmp $0beb,x			cmp 	currentMode,x
.1b65	d0 13		bne $1b7a			bne 	CMSetMode 					; different so switch.
.1b67	e8		inx				inx
.1b68	e0 04		cpx #$04			cpx 	#4
.1b6a	d0 f3		bne $1b5f			bne 	_FMCheck
.1b6c	60		rts				rts
.1b6d					CommandMode:
.1b6d	a9 00		lda #$00			lda 	#0
.1b6f	a2 0a		ldx #$0a		ldx	#10
.1b71	20 70 36	jsr $3670		jsr	mainHandler
.1b74	a5 68		lda $68				lda 	esInt3
.1b76	29 70		and #$70			and 	#$70
.1b78	d0 06		bne $1b80			bne 	CMNoExpand
.1b7a					CMSetMode:
.1b7a	20 cb 1b	jsr $1bcb			jsr 	CMExpandMode
.1b7d	4c 94 1b	jmp $1b94			jmp 	CMUpdateMode
.1b80					CMNoExpand:
.1b80	a5 50		lda $50				lda 	esInt0
.1b82	8d eb 0b	sta $0beb			sta 	currentMode
.1b85	a5 58		lda $58				lda 	esInt1
.1b87	8d ec 0b	sta $0bec			sta 	currentMode+1
.1b8a	a5 60		lda $60				lda 	esInt2
.1b8c	8d ed 0b	sta $0bed			sta 	currentMode+2
.1b8f	a5 68		lda $68				lda 	esInt3
.1b91	8d ee 0b	sta $0bee			sta 	currentMode+3
.1b94					CMUpdateMode:
.1b94	a2 11		ldx #$11			ldx 	#$11
.1b96					_CMClear:
.1b96	a9 00		lda #$00			lda 	#0
.1b98	9d 29 9f	sta $9f29,x			sta 	$9F29,X
.1b9b	ca		dex				dex
.1b9c	10 f8		bpl $1b96			bpl 	_CMClear
.1b9e	ad ee 0b	lda $0bee			lda 	currentMode+3 				; get current mode
.1ba1	48		pha				pha 								; stack twice.
.1ba2	48		pha				pha
.1ba3	29 70		and #$70			and 	#$70 						; isolates bits 6,5,4 (sprites,L1 enable,L0 enable)
.1ba5	09 01		ora #$01			ora 	#$01 						; turn the output on.
.1ba7	8d 29 9f	sta $9f29			sta 	$9F29 						; write to DC_VIDEO
.1baa	68		pla				pla 								; get back
.1bab	20 fc 1b	jsr $1bfc			jsr 	CMToScale 					; convert lower 2 bits to a scale.
.1bae	8d 2a 9f	sta $9f2a			sta 	$9F2A 						; write to H-Scale
.1bb1	68		pla				pla 								; get back, convert bits 2,3 to a scale.
.1bb2	4a		lsr a				lsr 	a
.1bb3	4a		lsr a				lsr 	a
.1bb4	20 fc 1b	jsr $1bfc			jsr 	CMToScale 					; convert lower 2 bits to a scale.
.1bb7	8d 2b 9f	sta $9f2b			sta 	$9F2B
.1bba	a2 00		ldx #$00			ldx 	#0 							; this is offset from $9F2D to do L0
.1bbc	ad eb 0b	lda $0beb			lda 	currentMode					; get L0 config byte
.1bbf	20 07 1c	jsr $1c07			jsr 	CMDecodeLayer 				; and decode layer 0
.1bc2	a2 07		ldx #$07			ldx 	#7 							; when we do layer 1, offset by 7 hence starts at $9F34
.1bc4	ad ec 0b	lda $0bec			lda 	currentMode+1
.1bc7	20 07 1c	jsr $1c07			jsr 	CMDecodeLayer
.1bca	60		rts				rts
.1bcb					CMExpandMode:
.1bcb	a5 50		lda $50				lda 	esInt0 						; get mode number
.1bcd	c9 04		cmp #$04			cmp 	#(CMEndModeList-CMModeList) >> 2
.1bcf	b0 16		bcs $1be7			bcs 	_CMModeError
.1bd1	0a		asl a				asl 	a 							; x 4 into X
.1bd2	0a		asl a				asl 	a
.1bd3	aa		tax				tax
.1bd4	98		tya				tya
.1bd5	48		pha				pha
.1bd6	a0 00		ldy #$00			ldy 	#0
.1bd8					_CMEMCopy:
.1bd8	bd ec 1b	lda $1bec,x			lda 	CMModeList,x
.1bdb	99 eb 0b	sta $0beb,y			sta 	currentMode,y
.1bde	e8		inx				inx
.1bdf	c8		iny				iny
.1be0	c0 04		cpy #$04			cpy 	#4
.1be2	d0 f4		bne $1bd8			bne 	_CMEMCopy
.1be4	68		pla				pla
.1be5	a8		tay				tay
.1be6	60		rts				rts
.1be7					_CMModeError:
.1be7	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.1be9	20 18 15	jsr $1518		jsr	errorHandler
.1bec					CMModeList:
>1bec	00 60 00 20					.dword	$20006000 					; Mode 0 which is the standard 80x60 mode, no sprites
>1bf0	00 60 00 25					.dword 	$25006000					; Mode 1 (40x30)
>1bf4	00 60 00 2a					.dword 	$2A006000 					; Mode 2 (20x15)
>1bf8	07 60 00 15					.dword 	$15006007 					; Mode 3 (320x200 256 colour bitmap)
.1bfc					CMEndModeList:
.1bfc					CMToScale:
.1bfc	29 03		and #$03			and 	#3 							; lower 2 bits only
.1bfe	aa		tax				tax 								; put in X for counting
.1bff	a9 00		lda #$00			lda 	#0 							; zero result
.1c01	38		sec				sec 								; first time rotate CS in
.1c02					_CMTSLoop:
.1c02	6a		ror a				ror 	a
.1c03	ca		dex				dex
.1c04	10 fc		bpl $1c02			bpl 	_CMTSLoop
.1c06	60		rts				rts
.1c07					CMDecodeLayer:
.1c07	48		pha				pha 								; save it.
.1c08	29 f7		and #$f7			and 	#$F7 						; all the bits except T256C which you can't set using this
.1c0a	9d 2d 9f	sta $9f2d,x			sta 	$9F2D,X
.1c0d	68		pla				pla 								; get it back
.1c0e	29 08		and #$08			and 	#$08 						; the missing bit sets the tile size.
.1c10	f0 02		beq $1c14			beq 	_CMDLNotSet
.1c12	a9 03		lda #$03			lda 	#$03 						; which sets both lower bits, they're square.
.1c14					_CMDLNotSet:
.1c14	e0 00		cpx #$00			cpx 	#0
.1c16	f0 06		beq $1c1e			beq 	_CMDLayer0 					; layer 1 has standard defaults for tile table, e.g. $7C
.1c18	09 7c		ora #$7c			ora 	#$7C 						; so set those bits and write it out.
.1c1a	9d 2f 9f	sta $9f2f,x			sta 	$9F2F,X
.1c1d	60		rts				rts
.1c1e					_CMDLayer0:
.1c1e	09 80		ora #$80			ora 	#$80 						; tile base is $80
.1c20	9d 2f 9f	sta $9f2f,x			sta 	$9F2F,X
.1c23	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/video/palette.asm

.1c24					CommandPalette:
.1c24	a9 00		lda #$00			lda 	#0
.1c26	a2 0c		ldx #$0c		ldx	#12
.1c28	20 70 36	jsr $3670		jsr	mainHandler
.1c2b	a2 02		ldx #$02		ldx	#2
.1c2d	20 70 36	jsr $3670		jsr	mainHandler
.1c30	a9 01		lda #$01			lda 	#1
.1c32	a2 08		ldx #$08		ldx	#8
.1c34	20 70 36	jsr $3670		jsr	mainHandler
.1c37	a5 50		lda $50				lda 	esInt0 					; get palette #
.1c39	20 49 1c	jsr $1c49			jsr 	PointToPaletteA			; point to palette register
.1c3c	a5 51		lda $51				lda 	esInt0+1
.1c3e	8d 23 9f	sta $9f23			sta 	$9F23
.1c41	a5 59		lda $59				lda 	esInt1+1
.1c43	29 0f		and #$0f			and 	#$0F
.1c45	8d 23 9f	sta $9f23			sta 	$9F23
.1c48	60		rts				rts
.1c49					PointToPaletteA:
.1c49	0a		asl a				asl 	a 							; x 2 -> LSB
.1c4a	8d 20 9f	sta $9f20			sta 	$9F20
.1c4d	a9 00		lda #$00			lda 	#0 							; carry into A
.1c4f	2a		rol a				rol 	a
.1c50	09 fa		ora #$fa			ora 	#$FA 						; make correct address
.1c52	8d 21 9f	sta $9f21			sta 	$9F21
.1c55	a9 11		lda #$11			lda 	#$11 						; $01 and single step => $9F22
.1c57	8d 22 9f	sta $9f22			sta 	$9F22
.1c5a	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/video/vload.asm

.1c5b					Command_VLoad:
.1c5b	a9 00		lda #$00			lda 	#0 								; string which is the file name
.1c5d	a2 0e		ldx #$0e		ldx	#14
.1c5f	20 70 36	jsr $3670		jsr	mainHandler
.1c62	a2 01		ldx #$01			ldx 	#1 								; load address at +1.
.1c64	a5 35		lda $35				lda 	lowMemory 						; load it into lowMemory (for now ?)
.1c66	95 50		sta $50,x			sta 	esInt0,x
.1c68	a5 36		lda $36				lda 	lowMemory+1
.1c6a	95 58		sta $58,x			sta 	esInt1,x
.1c6c	a9 00		lda #$00			lda 	#0
.1c6e	95 60		sta $60,x			sta 	esInt2,x
.1c70	95 68		sta $68,x			sta 	esInt3,x
.1c72	a2 0e		ldx #$0e		ldx	#14
.1c74	20 f6 14	jsr $14f6		jsr	deviceHandler
.1c77	a5 51		lda $51				lda 	esInt0+1 						; (temp0) is where we are decoding from.
.1c79	85 2a		sta $2a				sta 	temp0
.1c7b	a5 59		lda $59				lda 	esInt1+1
.1c7d	85 2b		sta $2b				sta 	temp0+1
.1c7f	20 fb 1c	jsr $1cfb			jsr 	LoadVRAMFile 					; load the VRAM file in.
.1c82	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/video/vpeekpoke.asm

.1c83					Command_VPoke:
.1c83	38		sec				sec 						; one byte , CS
.1c84	b0 01		bcs $1c87			bcs 	CmdVideoWrite
.1c86					Command_VDoke:
.1c86	18		clc				clc 						; two bytes, CC
.1c87					CmdVideoWrite:
.1c87	08		php				php 						; save one or two btes
.1c88	a9 00		lda #$00			lda 	#0  				; get address and value into levels 0,1
.1c8a	a2 0a		ldx #$0a		ldx	#10
.1c8c	20 70 36	jsr $3670		jsr	mainHandler
.1c8f	a2 02		ldx #$02		ldx	#2
.1c91	20 70 36	jsr $3670		jsr	mainHandler
.1c94	a9 01		lda #$01			lda 	#1
.1c96	a2 0a		ldx #$0a		ldx	#10
.1c98	20 70 36	jsr $3670		jsr	mainHandler
.1c9b	a2 00		ldx #$00			ldx 	#0
.1c9d	20 ae 1c	jsr $1cae			jsr 	SetUpTOSVRamAddress ; copy target address to VRAM address registers
.1ca0	a5 51		lda $51				lda 	esInt0+1 			; get MSB of write value
.1ca2	8d 23 9f	sta $9f23			sta 	$9F23
.1ca5	28		plp				plp 						; if it was Poke then exit
.1ca6	b0 05		bcs $1cad			bcs 	_CVWExit
.1ca8	a5 59		lda $59				lda 	esInt1+1 			; doke, write the MSB.
.1caa	8d 23 9f	sta $9f23			sta 	$9F23
.1cad					_CVWExit:
.1cad	60		rts				rts
.1cae					SetUpTOSVRamAddress:
.1cae	b5 60		lda $60,x			lda 	esInt2,x 			; check range of address, data to $FFFF
.1cb0	29 fe		and #$fe			and 	#$FE
.1cb2	15 68		ora $68,x			ora 	esInt3,x
.1cb4	d0 14		bne $1cca			bne 	CVWValue
.1cb6	b5 50		lda $50,x			lda 	esInt0,x			; set address up
.1cb8	8d 20 9f	sta $9f20			sta 	$9F20
.1cbb	b5 58		lda $58,x			lda 	esInt1,x
.1cbd	8d 21 9f	sta $9f21			sta	 	$9F21
.1cc0	b5 60		lda $60,x			lda 	esInt2,x
.1cc2	29 01		and #$01			and 	#1
.1cc4	09 10		ora #$10			ora 	#$10 				; step 1.
.1cc6	8d 22 9f	sta $9f22			sta 	$9F22
.1cc9	60		rts				rts
.1cca					CVWValue:
.1cca	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.1ccc	20 18 15	jsr $1518		jsr	errorHandler
.1ccf					Command_VPeek:
.1ccf	38		sec				sec 						; one byte , CS
.1cd0	b0 01		bcs $1cd3			bcs 	CmdVideoRead
.1cd2					Command_VDeek:
.1cd2	18		clc				clc 						; two bytes, CC
.1cd3					CmdVideoRead:
.1cd3	08		php				php 						; save action on stack.
.1cd4	48		pha				pha 						; save stack position
.1cd5	a2 0a		ldx #$0a		ldx	#10
.1cd7	20 70 36	jsr $3670		jsr	mainHandler
.1cda	a2 04		ldx #$04		ldx	#4
.1cdc	20 70 36	jsr $3670		jsr	mainHandler
.1cdf	68		pla				pla
.1ce0	aa		tax				tax
.1ce1	20 ae 1c	jsr $1cae			jsr 	SetUpTOSVRamAddress	; set up VRAM address.
.1ce4	a9 00		lda #$00			lda 	#0 					; zero upper 3 bytes
.1ce6	95 58		sta $58,x			sta 	esInt1,x
.1ce8	95 60		sta $60,x			sta 	esInt2,x
.1cea	95 68		sta $68,x			sta 	esInt3,x
.1cec	ad 23 9f	lda $9f23			lda 	$9F23				; copy 1st byte
.1cef	95 50		sta $50,x			sta 	esInt0,x
.1cf1	28		plp				plp 						; check if DOKE (carry was clear)
.1cf2	b0 05		bcs $1cf9			bcs 	_CVRExit
.1cf4	ad 23 9f	lda $9f23			lda 	$9F23 				; copy 2nd byte
.1cf7	95 58		sta $58,x			sta 	esInt1,x
.1cf9					_CVRExit:
.1cf9	8a		txa				txa 						; return X position.
.1cfa	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/video/vramprocess.asm

.0bef					compressMode:
>0bef							.fill 	1
.0bf0					imageInfo:
>0bf0							.fill 	X16MaxImages
.0c30					imageAddr2Low:
>0c30							.fill  	X16MaxImages
.0c70					imageAddr2High:
>0c70							.fill  	X16MaxImages
.1cfb					LoadVRAMFile:
.1cfb	8a		txa				txa
.1cfc	48		pha				pha
.1cfd	98		tya				tya
.1cfe	48		pha				pha
.1cff					_LVRLoop:
.1cff	20 db 1d	jsr $1ddb			jsr 	LVFGet 						; get the next (never access direct)
.1d02	c9 80		cmp #$80			cmp 	#$80 						; exit ?
.1d04	f0 42		beq $1d48			beq 	_LVRExit
.1d06	b0 5c		bcs $1d64			bcs 	_LVRLoad 					; load data in ?
.1d08	c9 08		cmp #$08			cmp 	#$08 						; is it set address ?
.1d0a	90 11		bcc $1d1d			bcc 	_LVRSetAddress
.1d0c	c9 0f		cmp #$0f			cmp 	#$0F 						; is it define palette
.1d0e	f0 3d		beq $1d4d			beq 	_LVRSetPalette
.1d10	c9 10		cmp #$10			cmp 	#$10 						; is it set compression type ?
.1d12	90 2d		bcc $1d41			bcc 	_LVRSetCompress
.1d14	c9 64		cmp #$64			cmp 	#$64 						; is it set sprite type.
.1d16	90 60		bcc $1d78			bcc 	_LVRSetSprite
.1d18	a2 01		ldx #$01			ldx 	#ErrorID_missing
.1d1a	20 18 15	jsr $1518		jsr	errorHandler
.1d1d					_LVRSetAddress:
.1d1d	85 2d		sta $2d				sta 	temp1+1 					; 24 bit in temp1+1/temp1/A
.1d1f	20 db 1d	jsr $1ddb			jsr 	LVFGet
.1d22	85 2c		sta $2c				sta 	temp1
.1d24	a9 00		lda #$00			lda 	#0
.1d26	46 2d		lsr $2d				lsr 	temp1+1 					; / 2 twice.
.1d28	66 2c		ror $2c				ror 	temp1
.1d2a	6a		ror a				ror		a
.1d2b	46 2d		lsr $2d				lsr 	temp1+1
.1d2d	66 2c		ror $2c				ror 	temp1
.1d2f	6a		ror a				ror		a
.1d30	8d 20 9f	sta $9f20			sta 	$9F20 						; set write address with +1 increment
.1d33	a5 2c		lda $2c				lda 	temp1
.1d35	8d 21 9f	sta $9f21			sta 	$9F21
.1d38	a5 2d		lda $2d				lda 	temp1+1
.1d3a	09 10		ora #$10			ora 	#$10
.1d3c	8d 22 9f	sta $9f22			sta 	$9F22
.1d3f	d0 be		bne $1cff			bne 	_LVRLoop
.1d41					_LVRSetCompress:
.1d41	29 07		and #$07			and 	#7
.1d43	8d ef 0b	sta $0bef			sta 	compressMode
.1d46	10 b7		bpl $1cff			bpl 	_LVRLoop
.1d48					_LVRExit:
.1d48	68		pla				pla
.1d49	a8		tay				tay
.1d4a	68		pla				pla
.1d4b	aa		tax				tax
.1d4c	60		rts				rts
.1d4d					_LVRSetPalette:
.1d4d	20 db 1d	jsr $1ddb			jsr 	LVFGet 						; get palette id.
.1d50	20 49 1c	jsr $1c49			jsr 	PointToPaletteA 			; in palette.asm
.1d53	20 db 1d	jsr $1ddb			jsr 	LVFGet 						; copy 12 bit palette data in.
.1d56	8d 23 9f	sta $9f23			sta 	$9F23
.1d59	20 db 1d	jsr $1ddb			jsr 	LVFGet
.1d5c	29 0f		and #$0f			and 	#$0F
.1d5e	8d 23 9f	sta $9f23			sta 	$9F23
.1d61	4c ff 1c	jmp $1cff			jmp 	_LVRLoop
.1d64					_LVRLoad:
.1d64	ae ef 0b	ldx $0bef			ldx 	compressMode
.1d67	d0 55		bne $1dbe			bne 	_LVRNotMode0
.1d69	29 7f		and #$7f			and 	#$7F 						; count in X (is > 0)
.1d6b					_LVRLCopyX:
.1d6b	aa		tax				tax
.1d6c					_LVRLCopy:
.1d6c	20 db 1d	jsr $1ddb			jsr 	LVFGet 						; write to data.
.1d6f	8d 23 9f	sta $9f23			sta 	$9F23
.1d72	ca		dex				dex
.1d73	d0 f7		bne $1d6c			bne 	_LVRLCopy
.1d75	4c ff 1c	jmp $1cff			jmp 	_LVRLoop
.1d78					_LVRSetSprite:
.1d78	48		pha				pha 								; save on stack
.1d79	20 db 1d	jsr $1ddb			jsr 	LVFGet 						; get the sprite number into X
.1d7c	aa		tax				tax
.1d7d	c9 40		cmp #$40			cmp 	#X16MaxImages				; too high ?
.1d7f	b0 38		bcs $1db9			bcs 	_LVRSSValue
.1d81	68		pla				pla 								; restore the data held in the first byte
.1d82	9d f0 0b	sta $0bf0,x			sta 	imageInfo,x 				; and write into the sprite image table.
.1d85					_LVRAlignVRAM:
.1d85	ad 20 9f	lda $9f20			lda 	$9F20 						; check VRAM on 32 byte boundary
.1d88	29 1f		and #$1f			and 	#$1F
.1d8a	f0 07		beq $1d93			beq 	_LVRAligned
.1d8c	a9 00		lda #$00			lda 	#$00
.1d8e	8d 23 9f	sta $9f23			sta 	$9F23
.1d91	f0 f2		beq $1d85			beq 	_LVRAlignVRAM
.1d93					_LVRAligned:
.1d93	ad 22 9f	lda $9f22			lda 	$9F22 						; put address/32 in sprite image table
.1d96	4a		lsr a				lsr 	a 	 						; first halve into temp1
.1d97	ad 21 9f	lda $9f21			lda 	$9F21
.1d9a	6a		ror a				ror 	a
.1d9b	85 2d		sta $2d				sta 	temp1+1
.1d9d	ad 20 9f	lda $9f20			lda 	$9F20
.1da0	6a		ror a				ror 	a
.1da1	85 2c		sta $2c				sta 	temp1
.1da3	a0 04		ldy #$04			ldy 	#4 							; divide it by 16 in temp1
.1da5					_LVRShift:
.1da5	46 2d		lsr $2d				lsr 	temp1+1
.1da7	66 2c		ror $2c				ror 	temp1
.1da9	88		dey				dey
.1daa	d0 f9		bne $1da5			bne 	_LVRShift
.1dac	a5 2d		lda $2d				lda 	temp1+1 					; copy result.
.1dae	9d 70 0c	sta $0c70,x			sta 	imageAddr2High,x
.1db1	a5 2c		lda $2c				lda 	temp1
.1db3	9d 30 0c	sta $0c30,x			sta 	imageAddr2Low,x
.1db6	4c ff 1c	jmp $1cff			jmp 	_LVRLoop
.1db9					_LVRSSValue:
.1db9	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.1dbb	20 18 15	jsr $1518		jsr	errorHandler
.1dbe					_LVRNotMode0:
.1dbe	e0 01		cpx #$01			cpx 	#1
.1dc0	d0 15		bne $1dd7			bne 	_LVRNotMode1
.1dc2	29 7f		and #$7f			and 	#$7F 						; drop bit 7
.1dc4	c9 40		cmp #$40			cmp 	#$40
.1dc6	90 a3		bcc $1d6b			bcc 	_LVRLCopyX 					; 00-3F use mode 0's copying code.
.1dc8					_LVRRLEGroup:
.1dc8	29 3f		and #$3f			and 	#$3F
.1dca	aa		tax				tax
.1dcb	20 db 1d	jsr $1ddb			jsr 	LVFGet
.1dce					_LVRLEGroupLoop:
.1dce	8d 23 9f	sta $9f23			sta 	$9F23
.1dd1	ca		dex				dex
.1dd2	d0 fa		bne $1dce			bne 	_LVRLEGroupLoop
.1dd4	4c ff 1c	jmp $1cff			jmp 	_LVRLoop
.1dd7					_LVRNotMode1:
>1dd7	db						.byte 	$DB
.1dd8	4c d7 1d	jmp $1dd7			jmp 	_LVRNotMode1
.1ddb	84 32		sty $32		LVFGet:	sty 	tempShort
.1ddd	a0 00		ldy #$00			ldy 	#0
.1ddf	b1 2a		lda ($2a),y			lda 	(temp0),y
.1de1	a4 32		ldy $32				ldy	 	tempShort
.1de3	e6 2a		inc $2a				inc 	temp0
.1de5	d0 02		bne $1de9			bne 	_LVFGExit
.1de7	e6 2b		inc $2b				inc 	temp0+1
.1de9					_LVFGExit:
.1de9	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Return to file: basic.asm

.1dea					section_end_extension:
.1dea					section_start_floatingpoint:

;******  Processing file: floatingpoint/floatingpoint.asm

.1dea					floatingpointHandler:
.1dea	a2 03		ldx #$03			ldx 	#ErrorID_NoModule
.1dec	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: basic.asm

.1def					section_end_floatingpoint:
.1def					section_start_interaction:

;******  Processing file: interaction/interaction.asm


;******  Processing file: interaction/cold.asm

.1def					ColdStartEntry:
.1def	a2 ff		ldx #$ff			ldx 	#$FF
.1df1	9a		txs				txs
.1df2	20 7b 1e	jsr $1e7b			jsr 	ForceStandardMode
.1df5	a2 04		ldx #$04		ldx	#4
.1df7	20 f6 14	jsr $14f6		jsr	deviceHandler
.1dfa	a0 ff		ldy #$ff			ldy 	#255
.1dfc					_CSBanner:
.1dfc	c8		iny				iny
.1dfd	b9 23 1e	lda $1e23,y			lda 	Intro,y
.1e00	f0 14		beq $1e16			beq 	_CSStart
.1e02	c9 08		cmp #$08			cmp 	#8
.1e04	90 08		bcc $1e0e			bcc 	_CSInk
.1e06	a2 16		ldx #$16		ldx	#22
.1e08	20 f6 14	jsr $14f6		jsr	deviceHandler
.1e0b	4c fc 1d	jmp $1dfc			jmp 	_CSBanner
.1e0e					_CSInk:
.1e0e	a2 08		ldx #$08		ldx	#8
.1e10	20 f6 14	jsr $14f6		jsr	deviceHandler
.1e13	4c fc 1d	jmp $1dfc			jmp 	_CSBanner
.1e16					_CSStart:
.1e16	a2 16		ldx #$16		ldx	#22
.1e18	20 70 36	jsr $3670		jsr	mainHandler
.1e1b	a2 06		ldx #$06		ldx	#6
.1e1d	20 70 36	jsr $3670		jsr	mainHandler
.1e20	4c 3b 1f	jmp $1f3b			jmp 	WarmStartEntry
>1e23	06 2a 2a 2a 20 36 35 30		Intro:	.text 	6,"*** 6502 Extended BASIC ***",13,13
>1e2b	32 20 45 78 74 65 6e 64 65 64 20 42 41 53 49 43
>1e3b	20 2a 2a 2a 0d 0d
>1e41	03 57 72 69 74 74 65 6e				.text 	3,"Written by Paul Robson 2021",13,13
>1e49	20 62 79 20 50 61 75 6c 20 52 6f 62 73 6f 6e 20
>1e59	32 30 32 31 0d 0d
>1e5f	02 42 61 73 69 63 20				.text 	2,"Basic "
>1e66	30 2e 31 39					.text "0.19"
>1e6a	20 28						.text 	" ("
>1e6c	32 38 2d 4d 61 72 2d 32				.text "28-Mar-2021"
>1e74	30 32 31
>1e77	29 0d 0d 00					.text 	")",13,13,0
.1e7b					ForceStandardMode:
.1e7b	a9 fe		lda #$fe			lda 	#$FE
.1e7d	20 60 18	jsr $1860		jsr	extensionHandler
.1e80	60		rts				rts

;******  Return to file: interaction/interaction.asm


;******  Processing file: interaction/delete.asm

.1e81					DeleteLine:
.1e81	ad c8 0a	lda $0ac8			lda 	basePage 					; copy program base to temp0
.1e84	85 2a		sta $2a				sta 	temp0
.1e86	ad c9 0a	lda $0ac9			lda 	basePage+1
.1e89	85 2b		sta $2b				sta 	temp0+1
.1e8b	a0 01		ldy #$01	_DLLoop:ldy 	#1 							; see if found line ?
.1e8d	a5 50		lda $50				lda 	esInt0 						; e.g. the linenumbers match
.1e8f	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.1e91	d0 07		bne $1e9a			bne 	_DLNext
.1e93	c8		iny				iny
.1e94	a5 58		lda $58				lda 	esInt1
.1e96	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.1e98	f0 06		beq $1ea0			beq 	_DLFound
.1e9a	20 be 1e	jsr $1ebe	_DLNext:jsr 	IAdvanceTemp0 				; shift temp0 forward, return Z flag set if end.
.1e9d	d0 ec		bne $1e8b			bne 	_DLLoop
.1e9f	60		rts				rts
.1ea0					_DLFound:
.1ea0	a0 00		ldy #$00			ldy 	#0 							; this is the line to cut, so this offset is the bytes to remove
.1ea2	b1 2a		lda ($2a),y			lda 	(temp0),y
.1ea4	a8		tay				tay 								; so we copy from (temp0),y
.1ea5	a2 00		ldx #$00			ldx 	#0  						; to (temp0,x)
.1ea7					_DLCopyDown:
.1ea7	b1 2a		lda ($2a),y			lda 	(temp0),y 					; copy one byte.
.1ea9	81 2a		sta ($2a,x)			sta 	(temp0,x)
.1eab	e6 2a		inc $2a				inc 	temp0 						; advance pointer
.1ead	d0 02		bne $1eb1			bne 	_DLNoCarry
.1eaf	e6 2b		inc $2b				inc 	temp0+1
.1eb1					_DLNoCarry:
.1eb1	a5 2a		lda $2a				lda 	temp0 						; until hit low memory
.1eb3	c5 35		cmp $35				cmp 	lowMemory 					; which is comfortably after End Program.
.1eb5	d0 f0		bne $1ea7			bne 	_DLCopyDown
.1eb7	a5 2b		lda $2b				lda 	temp0+1
.1eb9	c5 36		cmp $36				cmp 	lowMemory+1
.1ebb	d0 ea		bne $1ea7			bne 	_DLCopyDown
.1ebd	60		rts				rts
.1ebe					IAdvanceTemp0:
.1ebe	84 32		sty $32				sty 	tempShort
.1ec0	18		clc				clc
.1ec1	a0 00		ldy #$00			ldy 	#0 							; get offset
.1ec3	b1 2a		lda ($2a),y			lda 	(temp0),y 					; add to temp0
.1ec5	65 2a		adc $2a				adc 	temp0
.1ec7	85 2a		sta $2a				sta 	temp0
.1ec9	90 02		bcc $1ecd			bcc 	_IATNoCarry
.1ecb	e6 2b		inc $2b				inc 	temp0+1
.1ecd					_IATNoCarry:
.1ecd	b1 2a		lda ($2a),y			lda 	(temp0),y
.1ecf	a4 32		ldy $32				ldy 	tempShort
.1ed1	c9 00		cmp #$00			cmp		#0 							; Z set if program end.
.1ed3	60		rts				rts

;******  Return to file: interaction/interaction.asm


;******  Processing file: interaction/insert.asm

.1ed4					InsertLine:
.1ed4	ad c8 0a	lda $0ac8			lda 	basePage 					; copy program base to temp0
.1ed7	85 2a		sta $2a				sta 	temp0
.1ed9	ad c9 0a	lda $0ac9			lda 	basePage+1
.1edc	85 2b		sta $2b				sta 	temp0+1
.1ede					_ILLoop:
.1ede	a0 01		ldy #$01			ldy 	#1
.1ee0	b1 2a		lda ($2a),y			lda 	(temp0),y
.1ee2	c5 50		cmp $50				cmp 	esInt0
.1ee4	c8		iny				iny
.1ee5	b1 2a		lda ($2a),y			lda 	(temp0),y
.1ee7	e5 58		sbc $58				sbc 	esInt1
.1ee9	b0 05		bcs $1ef0			bcs 	_ILFound 					; we know it cannot be equal, it would have been deleted
.1eeb	20 be 1e	jsr $1ebe			jsr 	IAdvanceTemp0 				; shift temp0 forward, return Z flag set if end.
.1eee	d0 ee		bne $1ede			bne 	_ILLoop
.1ef0					_ILFound:
.1ef0	a5 35		lda $35				lda 	lowMemory 					; shift lowMemory up to make space for it.
.1ef2	85 2c		sta $2c				sta 	temp1             			; this pointer goes backwards
.1ef4	a5 36		lda $36				lda 	lowMemory+1
.1ef6	85 2d		sta $2d				sta 	temp1+1
.1ef8	ad ed 0d	lda $0ded			lda 	tokenBufferIndex 			; space to make in Y, 0 in X.
.1efb	18		clc				clc 								; add 3 for the line number and offset.
.1efc	69 03		adc #$03			adc 	#3 							; tokenbuffer already has $80
.1efe	a8		tay				tay
.1eff	a2 00		ldx #$00			ldx 	#0
.1f01	a1 2c		lda ($2c,x)	_ILMove:lda 	(temp1,x)					; shift up
.1f03	91 2c		sta ($2c),y			sta 	(temp1),y
.1f05	a5 2c		lda $2c				lda 	temp1 						; check reached the insert point ?
.1f07	c5 2a		cmp $2a				cmp 	temp0
.1f09	d0 06		bne $1f11			bne 	_ILMNext
.1f0b	a5 2d		lda $2d				lda 	temp1+1
.1f0d	c5 2b		cmp $2b				cmp 	temp0+1
.1f0f	f0 0b		beq $1f1c			beq 	_ILMCopy
.1f11					_ILMNext:
.1f11	a5 2c		lda $2c				lda 	temp1
.1f13	d0 02		bne $1f17			bne 	_ILNoBorrow
.1f15	c6 2d		dec $2d				dec 	temp1+1
.1f17					_ILNoBorrow:
.1f17	c6 2c		dec $2c				dec 	temp1
.1f19	4c 01 1f	jmp $1f01			jmp 	_ILMove 					; and go round again
.1f1c					_ILMCopy:
.1f1c	98		tya				tya 								; Y is the offset of the new line.
.1f1d	81 2a		sta ($2a,x)			sta 	(temp0,x)					; X = 0 still.
.1f1f	a0 01		ldy #$01			ldy 	#1 							; copy in line number.
.1f21	a5 50		lda $50				lda 	esInt0
.1f23	91 2a		sta ($2a),y			sta 	(temp0),y
.1f25	c8		iny				iny
.1f26	a5 58		lda $58				lda 	esInt1
.1f28	91 2a		sta ($2a),y			sta 	(temp0),y
.1f2a	a0 00		ldy #$00			ldy 	#0 							; copy the body in
.1f2c					_ILMCopy2:
.1f2c	b1 28		lda ($28),y			lda 	(codePtr),y
.1f2e	c8		iny				iny
.1f2f	c8		iny				iny
.1f30	c8		iny				iny
.1f31	91 2a		sta ($2a),y			sta 	(temp0),y
.1f33	88		dey				dey
.1f34	88		dey				dey
.1f35	cc ed 0d	cpy $0ded			cpy 	tokenBufferIndex
.1f38	d0 f2		bne $1f2c			bne 	_ILMCopy2
.1f3a	60		rts				rts

;******  Return to file: interaction/interaction.asm


;******  Processing file: interaction/warm.asm

.1f3b					WarmStartEntry:
.1f3b	a2 ff		ldx #$ff			ldx 	#$FF
.1f3d	9a		txs				txs
.1f3e	20 7b 1e	jsr $1e7b			jsr 	ForceStandardMode
.1f41	a9 02		lda #$02			lda 	#2							; green text.
.1f43	a2 08		ldx #$08		ldx	#8
.1f45	20 f6 14	jsr $14f6		jsr	deviceHandler
.1f48	a2 0c		ldx #$0c		ldx	#12
.1f4a	20 f6 14	jsr $14f6		jsr	deviceHandler
.1f4d	a5 2a		lda $2a				lda 	temp0	 					; copy temp0 to codePtr
.1f4f	85 28		sta $28				sta 	codePtr
.1f51	a5 2b		lda $2b				lda 	temp0+1
.1f53	85 29		sta $29				sta 	codePtr+1
.1f55	a2 06		ldx #$06		ldx	#6
.1f57	20 f6 14	jsr $14f6		jsr	deviceHandler
.1f5a	a2 08		ldx #$08		ldx	#8
.1f5c	20 6c 41	jsr $416c		jsr	tokeniserHandler
.1f5f	c9 00		cmp #$00			cmp 	#0
.1f61	f0 25		beq $1f88			beq 	WSEError 					; failed (tokenise can fail if it doesn't know a character e.g. |)
.1f63	a9 ea		lda #$ea			lda 	#(tokenHeader) & $FF
.1f65	85 28		sta $28				sta 	codePtr
.1f67	a9 0c		lda #$0c			lda 	#(tokenHeader) >> 8
.1f69	85 29		sta $29				sta 	1+(codePtr)
.1f6b	ad ed 0c	lda $0ced			lda 	tokenBuffer 				; is it a blank line, go get another line.
.1f6e	c9 80		cmp #$80			cmp 	#$80
.1f70	f0 c9		beq $1f3b			beq 	WarmStartEntry
.1f72	29 c0		and #$c0			and 	#$C0						; does it start with a number
.1f74	c9 40		cmp #$40			cmp 	#$40 						; e.g. is it 01xx xxxx
.1f76	f0 15		beq $1f8d			beq 	HasLineNumber
.1f78	a9 00		lda #$00			lda 	#0 							; zero the token header, so it will look like a
.1f7a	8d ea 0c	sta $0cea			sta 	tokenHeader 				; fake program line.
.1f7d	8d eb 0c	sta $0ceb			sta 	tokenHeader+1
.1f80	8d ec 0c	sta $0cec			sta 	tokenHeader+2
.1f83	a2 18		ldx #$18		ldx	#24
.1f85	20 70 36	jsr $3670		jsr	mainHandler
.1f88					WSEError:
.1f88	a2 1e		ldx #$1e			ldx 	#ErrorID_Tokenise
.1f8a	20 18 15	jsr $1518		jsr	errorHandler
.1f8d					HasLineNumber:
.1f8d	a0 03		ldy #$03			ldy 	#3 							; get line number
.1f8f	a9 00		lda #$00			lda 	#0
.1f91	a2 0a		ldx #$0a		ldx	#10
.1f93	20 70 36	jsr $3670		jsr	mainHandler
.1f96	a5 60		lda $60				lda 	esInt2		 				; check in range (only 2 bytes)
.1f98	05 68		ora $68				ora 	esInt3
.1f9a	d0 ec		bne $1f88			bne 	WSEError
.1f9c	98		tya				tya 								; make codePtr point to code after the line number.
.1f9d	18		clc				clc 								; by skipping over the tokenised number.
.1f9e	65 28		adc $28				adc 	codePtr
.1fa0	85 28		sta $28				sta 	codePtr
.1fa2	90 02		bcc $1fa6			bcc		_HLNNoCarry
.1fa4	e6 29		inc $29				inc 	codePtr+1
.1fa6					_HLNNoCarry:
.1fa6	98		tya				tya 								; subtract that offset from the code buffer index
.1fa7	38		sec				sec
.1fa8	49 ff		eor #$ff			eor 	#$FF
.1faa	6d ed 0d	adc $0ded			adc 	tokenBufferIndex
.1fad	18		clc				clc 								; add space allowing for header & $80 trailer
.1fae	69 04		adc #$04			adc 	#4
.1fb0	8d ed 0d	sta $0ded			sta 	tokenBufferIndex 			; this is the number of bytes occupied.
.1fb3	20 81 1e	jsr $1e81			jsr 	DeleteLine 					; always delete the line, it's deleted and reinserted.
.1fb6					_HLNNoDelete:
.1fb6	ad ed 0d	lda $0ded			lda 	tokenBufferIndex 			; if line was empty, then don't insert
.1fb9	c9 01		cmp #$01			cmp 	#1 							; (the one character is the EOL marker)
.1fbb	f0 0c		beq $1fc9			beq 	_HLMEditDone
.1fbd	a5 36		lda $36				lda 	lowMemory+1 				; is there space, if we allow a little bit of
.1fbf	18		clc				clc 								; workspace (1k)
.1fc0	69 04		adc #$04			adc 	#4 							; e.g. 4 x 256
.1fc2	c5 34		cmp $34				cmp 	highMemory+1
.1fc4	b0 0b		bcs $1fd1			bcs 	_HLMMemory 					; nope, won't allowit.
.1fc6	20 d4 1e	jsr $1ed4			jsr 	InsertLine 					; insert the line in
.1fc9					_HLMEditDone:
.1fc9	a2 06		ldx #$06		ldx	#6
.1fcb	20 70 36	jsr $3670		jsr	mainHandler
.1fce	4c 3b 1f	jmp $1f3b			jmp 	WarmStartEntry
.1fd1					_HLMMemory:
.1fd1	a2 22		ldx #$22			ldx 	#ErrorID_Memory
.1fd3	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: interaction/interaction.asm

.1fd6					interactionHandler:
.1fd6	7c d9 1f	jmp ($1fd9,x)			jmp 	(interactionVectors,x)
.1fd9					interactionVectors:
>1fd9	df 1f					.word _DummyControlHandler ; index 0
>1fdb	ef 1d					.word ColdStartEntry       ; index 2
>1fdd	3b 1f					.word WarmStartEntry       ; index 4
.1fdf					_DummyControlHandler:
.1fdf	60		rts			rts

;******  Return to file: basic.asm

.1fe0					section_end_interaction:
.1fe0					section_start_main:

;******  Processing file: main/main.asm


;******  Processing file: main/commands/compat/readdata.asm

.0cb0					dataPtr:
>0cb0							.fill 	2
.0cb2					dataIndex:
>0cb2							.fill 	1
.1fe0					CommandRead:
.1fe0	a2 00		ldx #$00			ldx 	#0 							; get a reference to a variable in stack:0
.1fe2	20 23 2f	jsr $2f23			jsr 	EvaluateReference
.1fe5	20 26 20	jsr $2026			jsr 	SwapDPCP 					; use the data pointer.
.1fe8	b1 28		lda ($28),y			lda 	(codePtr),y 				; see where it is.
.1fea	c8		iny				iny
.1feb	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; if it is on a comma, it is in data.
.1fed	f0 07		beq $1ff6			beq 	_CRInData
.1fef	88		dey				dey
.1ff0	a9 d9		lda #$d9			lda 	#TKW_DATA 					; scan forward to a DATA statement.
.1ff2	aa		tax				tax
.1ff3	20 27 27	jsr $2727			jsr 	ScanForward
.1ff6					_CRInData:
.1ff6	a2 01		ldx #$01			ldx 	#1 							; evaluate a value at Stack,1
.1ff8	20 cb 2e	jsr $2ecb			jsr 	Evaluate
.1ffb	ca		dex				dex 								; and write the value.
.1ffc	20 7a 22	jsr $227a			jsr 	WriteValue
.1fff	20 26 20	jsr $2026			jsr 	SwapDPCP 					; get the code pointer back.
.2002	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows ?
.2004	c8		iny				iny
.2005	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; if comma, another variable
.2007	f0 d7		beq $1fe0			beq 	CommandRead
.2009	88		dey				dey
.200a	60		rts				rts
.200b					CommandData:
.200b	a9 80		lda #$80			lda 	#TOK_EOL 					; go forward to end of line or colon.
.200d	a2 ca		ldx #$ca			ldx 	#TKW_COLON
.200f	20 27 27	jsr $2727			jsr 	ScanForward
.2012	88		dey				dey 								; ending on EOL is a scan issue, as it increments
.2013	60		rts				rts
.2014					CommandRestore:
.2014	ad c8 0a	lda $0ac8			lda 	basePage
.2017	8d b0 0c	sta $0cb0			sta 	dataPtr
.201a	ad c9 0a	lda $0ac9			lda 	basePage+1
.201d	8d b1 0c	sta $0cb1			sta 	dataPtr+1
.2020	a9 03		lda #$03			lda 	#3
.2022	8d b2 0c	sta $0cb2			sta 	dataIndex
.2025	60		rts				rts
.2026					SwapDPCP:
.2026	8a		txa				txa
.2027	48		pha				pha
.2028	98		tya				tya 								; swap Y, DataIndex
.2029	ac b2 0c	ldy $0cb2			ldy 	DataIndex
.202c	8d b2 0c	sta $0cb2			sta 	DataIndex
.202f	a5 28		lda $28				lda 	codePtr 					; swap code/dataptr low
.2031	ae b0 0c	ldx $0cb0			ldx 	dataptr
.2034	8d b0 0c	sta $0cb0			sta 	dataPtr
.2037	86 28		stx $28				stx 	codePtr
.2039	a5 29		lda $29				lda 	codePtr+1 					; swap code/dataptr high.
.203b	ae b1 0c	ldx $0cb1			ldx 	dataptr+1
.203e	8d b1 0c	sta $0cb1			sta 	dataPtr+1
.2041	86 29		stx $29				stx 	codePtr+1
.2043	68		pla				pla
.2044	aa		tax				tax
.2045	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/compat/transfer.asm

.2046					CommandGOSUB:
.2046	20 e8 2e	jsr $2ee8			jsr 	EvaluateRootInteger			; get GOSUB line on stack top.
.2049	a2 04		ldx #$04			ldx 	#4 							; allocate 4 bytes on stack for GOSUB
.204b	a9 47		lda #$47			lda 	#markerGOSUB  				; <marker> <return addr/offset>
.204d	20 1d 36	jsr $361d			jsr 	RSClaim
.2050	a9 01		lda #$01			lda 	#1 							; save position at offset 1.
.2052	20 49 36	jsr $3649			jsr 	RSSavePosition
.2055	a2 00		ldx #$00			ldx 	#0 							; point back at GOSUB line
.2057	f0 1b		beq $2074			beq 	GotoTOS 					; and do a GOTO there.
.2059					CommandRETURN:
.2059	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.205b	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.205d	c9 47		cmp #$47			cmp 	#markerGOSUB 						; does it match
.205f	f0 05		beq $2066			beq 	_isok
.2061	a2 0e		ldx #$0e			ldx 	#ErrorID_returnErr
.2063	20 18 15	jsr $1518		jsr	errorHandler
.2066					_isok:
.2066	a9 01		lda #$01			lda 	#1
.2068	20 5c 36	jsr $365c			jsr 	RSLoadPosition 				; reload the position from offset 1.
.206b	a9 04		lda #$04			lda 	#4 							; throw 4 bytes from stack.
.206d	20 3f 36	jsr $363f			jsr 	RSFree
.2070	60		rts				rts
.2071					CommandGOTO:
.2071	20 e8 2e	jsr $2ee8			jsr 	EvaluateRootInteger 		; get GOTO line on stack top.
.2074					GotoTOS:
.2074	20 0b 2a	jsr $2a0b			jsr 	ResetCodeAddress 			; simple search.
.2077					_GotoSearch:
.2077	a0 00		ldy #$00			ldy 	#0 							; get offset
.2079	b1 28		lda ($28),y			lda 	(codePtr),y
.207b	f0 21		beq $209e			beq 	_GotoError 					; not found.
.207d	c8		iny				iny									; check LSB match
.207e	b1 28		lda ($28),y			lda 	(codePtr),y
.2080	d5 50		cmp $50,x			cmp 	esInt0,x
.2082	d0 07		bne $208b			bne 	_GotoNext
.2084	c8		iny				iny
.2085	b1 28		lda ($28),y			lda 	(codePtr),y
.2087	d5 58		cmp $58,x			cmp 	esInt1,x
.2089	f0 10		beq $209b			beq 	_GotoFound
.208b					_GotoNext:
.208b	a0 00		ldy #$00			ldy 	#0 							; go next line
.208d	b1 28		lda ($28),y			lda 	(codePtr),y
.208f	18		clc				clc
.2090	65 28		adc $28				adc 	codePtr
.2092	85 28		sta $28				sta 	codePtr
.2094	90 e1		bcc $2077			bcc 	_GotoSearch
.2096	e6 29		inc $29				inc 	codePtr+1
.2098	4c 77 20	jmp $2077			jmp 	_GotoSearch
.209b					_GotoFound:
.209b	a0 03		ldy #$03			ldy 	#3 							; continue from that line
.209d	60		rts				rts
.209e					_GotoError:
.209e	a2 0c		ldx #$0c			ldx 	#ErrorID_LineNumber
.20a0	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/commands/io/input.asm

=32					MaxInputSize = 32
.0cb3					InputBuffer:
>0cb3							.fill 	MaxInputSize+1
.20a3					Command_Input:
.20a3	b1 28		lda ($28),y			lda 	(codePtr),y 			; see what's next.
.20a5	c8		iny				iny
.20a6	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 				; ignore commas.
.20a8	f0 f9		beq $20a3			beq 	Command_Input
.20aa	88		dey				dey 							; undo consume
.20ab	c9 ca		cmp #$ca			cmp 	#TKW_COLON
.20ad	f0 54		beq $2103			beq 	_CIExit 				; : or EOL, exit
.20af	c9 80		cmp #$80			cmp 	#TOK_EOL
.20b1	f0 50		beq $2103			beq 	_CIExit
.20b3	c9 40		cmp #$40			cmp 	#$40 					; variable ?
.20b5	90 12		bcc $20c9			bcc 	_CIVariable
.20b7	c9 85		cmp #$85			cmp 	#TOK_STR 				; if not quoted string syntax error.
.20b9	d0 43		bne $20fe			bne 	_CISyntax
.20bb	a2 00		ldx #$00			ldx 	#0
.20bd	20 df 2e	jsr $2edf			jsr 	EvaluateString 			; evaluate and print string
.20c0	20 dc 22	jsr $22dc			jsr 	TOSToTemp0
.20c3	20 d2 21	jsr $21d2			jsr 	PrintString
.20c6	4c a3 20	jmp $20a3			jmp 	Command_Input
.20c9					_CIVariable:
.20c9	a2 00		ldx #$00			ldx 	#0 						; evaluate a reference.
.20cb	20 23 2f	jsr $2f23			jsr 	EvaluateReference  		; this is where its going
.20ce					_CIRetry:
.20ce	a9 3f		lda #$3f			lda 	#"?"					; print prompt
.20d0	a2 14		ldx #$14		ldx	#20
.20d2	20 f6 14	jsr $14f6		jsr	deviceHandler
.20d5	98		tya				tya
.20d6	48		pha				pha
.20d7	20 17 21	jsr $2117			jsr 	InputString 			; input a string (manually)
.20da	a2 01		ldx #$01			ldx 	#1
.20dc	20 04 21	jsr $2104			jsr 	BufferToStackX 			; make stack,x ref input string.
.20df	a5 48		lda $48				lda 	esType 					; if target type numeric
.20e1	29 40		and #$40			and 	#$40 					; then convert to number
.20e3	d0 11		bne $20f6			bne 	_CIWrite
.20e5	a2 01		ldx #$01			ldx 	#1
.20e7	20 dc 22	jsr $22dc			jsr 	TOSToTemp0 				; string address in temp0, goes here.
.20ea	a9 0a		lda #$0a			lda 	#10
.20ec	20 f0 33	jsr $33f0			jsr 	MInt32FromString 		; convert it back from a string.
.20ef	68		pla				pla
.20f0	a8		tay				tay
.20f1	b0 03		bcs $20f6			bcs 	_CIWrite 				; successfully converted.
.20f3	18		clc				clc 							; default fail FP conversion
.20f4	90 d8		bcc $20ce			bcc		_CIRetry				; failed, try again.
.20f6					_CIWrite:
.20f6	a2 00		ldx #$00			ldx 	#0
.20f8	20 7a 22	jsr $227a			jsr 	WriteValue
.20fb	4c a3 20	jmp $20a3			jmp 	Command_Input
.20fe					_CISyntax:
.20fe	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.2100	20 18 15	jsr $1518		jsr	errorHandler
.2103					_CIExit:
.2103	60		rts				rts
.2104					BufferToStackX:
.2104	a9 b3		lda #$b3			lda 	#InputBuffer & $FF
.2106	95 50		sta $50,x			sta 	esInt0,x
.2108	a9 0c		lda #$0c			lda 	#InputBuffer >> 8
.210a	95 58		sta $58,x			sta 	esInt1,x
.210c	a9 00		lda #$00			lda 	#0
.210e	95 60		sta $60,x			sta 	esInt2,x
.2110	95 68		sta $68,x			sta 	esInt3,x
.2112	a9 40		lda #$40			lda 	#$40
.2114	95 48		sta $48,x			sta 	esType,x
.2116	60		rts				rts
.2117					InputString:
.2117	a9 00		lda #$00			lda 	#0
.2119	8d b3 0c	sta $0cb3			sta 	InputBuffer
.211c					_InputLoop:
.211c	a2 02		ldx #$02		ldx	#2
.211e	20 f6 14	jsr $14f6		jsr	deviceHandler
.2121	a2 0a		ldx #$0a		ldx	#10
.2123	20 f6 14	jsr $14f6		jsr	deviceHandler
.2126	c9 00		cmp #$00			cmp 	#0
.2128	f0 f2		beq $211c			beq 	_InputLoop
.212a	c9 08		cmp #$08			cmp 	#8
.212c	f0 19		beq $2147			beq 	_InputBackspace
.212e	c9 0d		cmp #$0d			cmp 	#13
.2130	f0 21		beq $2153			beq 	_InputExit
.2132	ae b3 0c	ldx $0cb3			ldx 	InputBuffer
.2135	e0 20		cpx #$20			cpx 	#MaxInputSize 			; too many characters
.2137	f0 e3		beq $211c			beq 	_InputLoop
.2139	9d b4 0c	sta $0cb4,x			sta 	InputBuffer+1,x 		; write char
.213c	ee b3 0c	inc $0cb3			inc 	InputBuffer 			; advance count.
.213f					_InputPrintLoop:
.213f	a2 14		ldx #$14		ldx	#20
.2141	20 f6 14	jsr $14f6		jsr	deviceHandler
.2144	4c 1c 21	jmp $211c			jmp	 	_InputLoop
.2147					_InputBackspace:
.2147	ad b3 0c	lda $0cb3			lda 	InputBuffer 			; at start
.214a	f0 d0		beq $211c			beq 	_InputLoop
.214c	ce b3 0c	dec $0cb3			dec 	InputBuffer
.214f	a9 08		lda #$08			lda 	#8
.2151	d0 ec		bne $213f			bne 	_InputPrintLoop
.2153					_InputExit:
.2153	a2 06		ldx #$06		ldx	#6
.2155	20 f6 14	jsr $14f6		jsr	deviceHandler
.2158	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/io/print.asm

.0cd4					lastPrintToken:
>0cd4							.fill 	1
.2159					Command_Print:
.2159	a9 00		lda #$00			lda 	#0 							; clear LPT to a non token
.215b	8d d4 0c	sta $0cd4			sta 	lastPrintToken
.215e	88		dey				dey
.215f					_PrintLoopSkip:
.215f	c8		iny				iny
.2160					_PrintLoop:
.2160	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows
.2162	c9 80		cmp #$80			cmp 	#TOK_EOL  					; done if end of line or colon
.2164	f0 5b		beq $21c1			beq 	_PrintExit
.2166	c9 ca		cmp #$ca			cmp 	#TKW_COLON
.2168	f0 57		beq $21c1			beq 	_PrintExit
.216a	8d d4 0c	sta $0cd4			sta 	lastPrintToken 				; update Last print token, so we check ; and ,
.216d	c9 cc		cmp #$cc			cmp 	#TKW_SEMICOLON 				; ignore semicolon
.216f	f0 ee		beq $215f			beq 	_PrintLoopSkip
.2171	c9 cd		cmp #$cd			cmp 	#TKW_QUOTE 					; ' is new line
.2173	f0 3c		beq $21b1			beq	 	_PrintNewLine
.2175	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; , is print tab
.2177	f0 40		beq $21b9			beq 	_PrintTab
.2179	20 c9 2e	jsr $2ec9			jsr 	EvaluateRoot 				; evaluate something at the root
.217c	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.217e	85 2a		sta $2a				sta 	temp0
.2180	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.2182	85 2b		sta $2b				sta 	1+(temp0)
.2184	a5 48		lda $48				lda 	esType 						; get type
.2186	f0 15		beq $219d			beq		_PrintInteger
.2188	4a		lsr a				lsr 	a 							; check for floating point
.2189	b0 08		bcs $2193			bcs 	_PrintFloat
.218b					_PrintString:
.218b	a2 00		ldx #$00			ldx 	#0 							; bottom string to temp0
.218d	20 dc 22	jsr $22dc			jsr 	TOSToTemp0
.2190	4c ab 21	jmp $21ab			jmp 	_PrintTemp0 				; print no leading space.
.2193					_PrintFloat:
.2193	a9 00		lda #$00			lda 	#0 							; stack level.
.2195	a2 16		ldx #$16		ldx	#22
.2197	20 ea 1d	jsr $1dea		jsr	floatingpointHandler
.219a	4c a4 21	jmp $21a4			jmp 	_PrintSpaceTemp0
.219d					_PrintInteger:
.219d	a9 8a		lda #$8a			lda 	#10+$80 					; base 10 signed
.219f	a2 00		ldx #$00			ldx 	#0 							; bottom stack element
.21a1	20 d8 34	jsr $34d8			jsr 	MInt32ToString				; convert to text
.21a4					_PrintSpaceTemp0:
.21a4	a9 20		lda #$20			lda 	#32
.21a6	a2 14		ldx #$14		ldx	#20
.21a8	20 f6 14	jsr $14f6		jsr	deviceHandler
.21ab					_PrintTemp0:
.21ab	20 d2 21	jsr $21d2			jsr 	PrintString
.21ae	4c 60 21	jmp $2160			jmp 	_PrintLoop
.21b1					_PrintNewLine:
.21b1	a2 06		ldx #$06		ldx	#6
.21b3	20 f6 14	jsr $14f6		jsr	deviceHandler
.21b6	4c 5f 21	jmp $215f			jmp 	_PrintLoopSkip
.21b9					_PrintTab:
.21b9	a2 1a		ldx #$1a		ldx	#26
.21bb	20 f6 14	jsr $14f6		jsr	deviceHandler
.21be	4c 5f 21	jmp $215f			jmp 	_PrintLoopSkip
.21c1					_PrintExit:
.21c1	ad d4 0c	lda $0cd4			lda		lastPrintToken 				; check last token
.21c4	c9 cc		cmp #$cc			cmp 	#TKW_SEMICOLON 				; if , or ; do not print NL
.21c6	f0 09		beq $21d1			beq 	_PrintExit2
.21c8	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.21ca	f0 05		beq $21d1			beq 	_PrintExit2
.21cc	a2 06		ldx #$06		ldx	#6
.21ce	20 f6 14	jsr $14f6		jsr	deviceHandler
.21d1					_PrintExit2:
.21d1	60		rts				rts
.21d2					PrintString:
.21d2	8a		txa				txa
.21d3	48		pha				pha
.21d4	98		tya				tya
.21d5	48		pha				pha
.21d6	a0 00		ldy #$00			ldy 	#0							; get length
.21d8	b1 2a		lda ($2a),y			lda 	(temp0),y
.21da	aa		tax				tax 								; into X
.21db	e0 00		cpx #$00	_PSLoop:cpx 	#0 							; finished ?
.21dd	f0 10		beq $21ef			beq 	_PSExit
.21df	ca		dex				dex
.21e0	8a		txa				txa
.21e1	48		pha				pha
.21e2	c8		iny				iny
.21e3	b1 2a		lda ($2a),y			lda 	(temp0),y
.21e5	a2 14		ldx #$14		ldx	#20
.21e7	20 f6 14	jsr $14f6		jsr	deviceHandler
.21ea	68		pla				pla
.21eb	aa		tax				tax
.21ec	4c db 21	jmp $21db			jmp 	_PSLoop
.21ef					_PSExit:
.21ef	68		pla				pla
.21f0	a8		tay				tay
.21f1	68		pla				pla
.21f2	aa		tax				tax
.21f3	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/io/text.asm

.21f4					Command_CLS:
.21f4	a2 04		ldx #$04		ldx	#4
.21f6	20 f6 14	jsr $14f6		jsr	deviceHandler
.21f9	60		rts				rts
.21fa					Command_Ink:
.21fa	a2 00		ldx #$00			ldx 	#0
.21fc	20 f2 2e	jsr $2ef2			jsr 	EvaluateSmallInteger
.21ff	a2 08		ldx #$08		ldx	#8
.2201	20 f6 14	jsr $14f6		jsr	deviceHandler
.2204	60		rts				rts
.2205					Command_Paper:
.2205	a2 00		ldx #$00			ldx 	#0
.2207	20 f2 2e	jsr $2ef2			jsr 	EvaluateSmallInteger
.220a	a2 12		ldx #$12		ldx	#18
.220c	20 f6 14	jsr $14f6		jsr	deviceHandler
.220f	60		rts				rts
.2210					Command_Locate:
.2210	a2 00		ldx #$00			ldx 	#0
.2212	20 f2 2e	jsr $2ef2			jsr 	EvaluateSmallInteger
.2215	20 02 36	jsr $3602			jsr 	CheckComma
.2218	e8		inx				inx
.2219	20 f2 2e	jsr $2ef2			jsr 	EvaluateSmallInteger
.221c	98		tya				tya
.221d	48		pha				pha
.221e	a4 51		ldy $51				ldy 	esInt0+1
.2220	a5 50		lda $50				lda 	esInt0
.2222	a2 10		ldx #$10		ldx	#16
.2224	20 f6 14	jsr $14f6		jsr	deviceHandler
.2227	68		pla				pla
.2228	a8		tay				tay
.2229	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/io/vdu.asm

.222a					Command_VDU:
.222a	20 e8 2e	jsr $2ee8			jsr 	EvaluateRootInteger 			; get integer at root.
.222d	a5 50		lda $50				lda 	esInt0
.222f	a2 14		ldx #$14		ldx	#20
.2231	20 f6 14	jsr $14f6		jsr	deviceHandler
.2234					_CVNext:
.2234	b1 28		lda ($28),y			lda 	(codePtr),y 					; what follows ?
.2236	c8		iny				iny
.2237	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 						; comma, do again
.2239	f0 ef		beq $222a			beq 	Command_VDU
.223b	c9 cc		cmp #$cc			cmp 	#TKW_SEMICOLON 					; semicolon, print MSB
.223d	d0 0a		bne $2249			bne 	_CVExit
.223f	a5 58		lda $58				lda 	esInt1
.2241	a2 14		ldx #$14		ldx	#20
.2243	20 f6 14	jsr $14f6		jsr	deviceHandler
.2246	4c 34 22	jmp $2234			jmp 	_CVNext
.2249	88		dey		_CVExit:dey
.224a	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/link.asm


;******  Return to file: main/main.asm


;******  Processing file: main/commands/misc/assert.asm

.224b					Command_Assert:
.224b	20 e8 2e	jsr $2ee8			jsr 	EvaluateRootInteger 		; what is being asserted.
.224e	20 a9 35	jsr $35a9			jsr 	MInt32Zero 					; is it true ?
.2251	f0 01		beq $2254			beq 	_CAError
.2253	60		rts				rts
.2254					_CAError:
.2254	a2 04		ldx #$04			ldx 	#ErrorID_Assert
.2256	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/commands/misc/dim.asm

.2259					Command_Dim:
.2259	a2 04		ldx #$04		ldx	#4
.225b	20 3d 45	jsr $453d		jsr	variableHandler
.225e	b1 28		lda ($28),y			lda 	(codePtr),y 				; see what follows.
.2260	c8		iny				iny
.2261	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; comma follows, go back and do next
.2263	f0 f4		beq $2259			beq 	Command_Dim
.2265	88		dey				dey 								; unpick get
.2266	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/misc/let.asm

.2267					CommandLet:
.2267	a2 00		ldx #$00			ldx 	#0  						; get address to write.
.2269	20 23 2f	jsr $2f23			jsr 	EvaluateReference
.226c	a9 8d		lda #$8d			lda 	#TKW_EQUAL 					; check for equals
.226e	20 ea 35	jsr $35ea			jsr 	CheckToken
.2271	e8		inx				inx 								; do RHS
.2272	20 cb 2e	jsr $2ecb			jsr 	Evaluate 					; evaluate and dereference
.2275	ca		dex				dex
.2276	20 7a 22	jsr $227a			jsr 	WriteValue 					; write it out
.2279	60		rts				rts
.227a					WriteValue:
.227a	98		tya				tya
.227b	48		pha				pha
.227c	20 dc 22	jsr $22dc			jsr 	TOSToTemp0 					; set temp0 to point to target address.
.227f	b5 48		lda $48,x			lda 	esType,x 					; check the string flags match
.2281	55 49		eor $49,x			eor 	esType+1,x 					; one string, one number causes an error.
.2283	29 40		and #$40			and 	#$40
.2285	d0 50		bne $22d7			bne		_WVType
.2287	a0 01		ldy #$01			ldy 	#1 							; for string, copy 0 and 1.
.2289	b5 48		lda $48,x			lda 	esType,x 					; check for string assignment
.228b	29 40		and #$40			and 	#$40
.228d	d0 1f		bne $22ae			bne 	_WVCopyString
.228f	b5 48		lda $48,x			lda 	esType,x 					; check both are integer.
.2291	15 49		ora $49,x			ora 	esType+1,x
.2293	4a		lsr a				lsr 	a
.2294	90 22		bcc $22b8			bcc 	_WVCopyData4 				; copy 4 data bytes.
.2296	b5 48		lda $48,x			lda 	esType,x
.2298	4a		lsr a				lsr 	a
.2299	90 3c		bcc $22d7			bcc 	_WVType
.229b	e8		inx				inx 								; force the value being written to be a float.
.229c	20 2d 2b	jsr $2b2d			jsr 	BPMakeFloat
.229f	ca		dex				dex
.22a0	20 dc 22	jsr $22dc			jsr 	TOSToTemp0 					; set Temp0 to write address
.22a3	e8		inx				inx
.22a4	8a		txa				txa
.22a5	a2 22		ldx #$22		ldx	#34
.22a7	20 ea 1d	jsr $1dea		jsr	floatingpointHandler
.22aa	aa		tax				tax
.22ab	4c d4 22	jmp $22d4			jmp 	_WVCopyExit
.22ae					_WVCopyString:
.22ae	8a		txa				txa
.22af	a2 10		ldx #$10		ldx	#16
.22b1	20 2d 39	jsr $392d		jsr	stringHandler
.22b4	aa		tax				tax
.22b5	4c d4 22	jmp $22d4			jmp 	_WVCopyExit
.22b8					_WVCopyData4:
.22b8	b5 48		lda $48,x			lda 	esType,x 					; is the int ref a byte ref ?
.22ba	29 20		and #$20			and 	#$20 						; (e.g. is bit 5 set)
.22bc	d0 10		bne $22ce			bne 	_WVCopyData1
.22be	a0 03		ldy #$03			ldy 	#3
.22c0	b5 69		lda $69,x			lda 	esInt3+1,x
.22c2	91 2a		sta ($2a),y			sta 	(temp0),y
.22c4	88		dey				dey
.22c5	b5 61		lda $61,x			lda 	esInt2+1,x
.22c7	91 2a		sta ($2a),y			sta 	(temp0),y
.22c9	88		dey				dey
.22ca	b5 59		lda $59,x			lda 	esInt1+1,x
.22cc	91 2a		sta ($2a),y			sta 	(temp0),y
.22ce					_WVCopyData1:
.22ce	a0 00		ldy #$00			ldy 	#0
.22d0	b5 51		lda $51,x			lda 	esInt0+1,x
.22d2	91 2a		sta ($2a),y			sta 	(temp0),y
.22d4					_WVCopyExit:
.22d4	68		pla				pla
.22d5	a8		tay				tay
.22d6	60		rts				rts
.22d7					_WVType:
.22d7	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.22d9	20 18 15	jsr $1518		jsr	errorHandler
.22dc					TOSToTemp0:
.22dc	b5 50		lda $50,x			lda 	esInt0,x
.22de	85 2a		sta $2a				sta 	temp0
.22e0	b5 58		lda $58,x			lda 	esInt1,x
.22e2	85 2b		sta $2b				sta 	temp0+1
.22e4	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/misc/poke.asm

.22e5					Command_Poke:
.22e5	a9 01		lda #$01			lda 	#1
.22e7	d0 06		bne $22ef			bne 	PokeGeneral
.22e9					Command_Doke:
.22e9	a9 02		lda #$02			lda 	#2
.22eb	d0 02		bne $22ef			bne 	PokeGeneral
.22ed					Command_Loke:
.22ed	a9 03		lda #$03			lda 	#3
.22ef					PokeGeneral:
.22ef	48		pha				pha 								; save id (PDL = 123)
.22f0	20 e8 2e	jsr $2ee8			jsr 	EvaluateRootInteger 		; target address
.22f3	20 02 36	jsr $3602			jsr	 	CheckComma
.22f6	e8		inx				inx
.22f7	20 ea 2e	jsr $2eea			jsr 	EvaluateInteger 			; what value to POKE ?
.22fa	ca		dex				dex
.22fb	20 dc 22	jsr $22dc			jsr 	TOSToTemp0 					; temp0 points to the target address
.22fe	84 32		sty $32				sty 	tempShort 					; save Y
.2300	68		pla				pla 								; get copy type (1-3) and dispatch
.2301	aa		tax				tax
.2302	ca		dex				dex
.2303	f0 14		beq $2319			beq 	_Poke1
.2305	ca		dex				dex
.2306	f0 0b		beq $2313			beq 	_Poke2
.2308	a0 03		ldy #$03			ldy 	#3							; put 4 bytes
.230a	a5 69		lda $69				lda 	esInt3+1
.230c	91 2a		sta ($2a),y			sta 	(temp0),y
.230e	88		dey				dey
.230f	a5 61		lda $61				lda 	esInt2+1
.2311	91 2a		sta ($2a),y			sta 	(temp0),y
.2313					_Poke2:
.2313	a0 01		ldy #$01			ldy 	#1
.2315	a5 59		lda $59				lda 	esInt1+1
.2317	91 2a		sta ($2a),y			sta 	(temp0),y
.2319					_Poke1:
.2319	a0 00		ldy #$00			ldy 	#0
.231b	a5 51		lda $51				lda 	esInt0+1
.231d	91 2a		sta ($2a),y			sta 	(temp0),y
.231f	a4 32		ldy $32				ldy 	tempShort 					; restore Y and exit
.2321	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/misc/rem.asm

.2322					Command_Rem:
.2322					Command_Rem2:
.2322	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows
.2324	c9 85		cmp #$85			cmp 	#TOK_STR 					; if it is a string then skip it.
.2326	d0 06		bne $232e			bne 	_CRNotString
.2328	c8		iny				iny
.2329	98		tya				tya
.232a	38		sec				sec
.232b	71 28		adc ($28),y			adc 	(codePtr),y 				; get string size, add to Y, +1 for the length
.232d	a8		tay				tay
.232e					_CRNotString:
.232e	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/misc/stopend.asm

.232f					CommandStop:
.232f	a2 06		ldx #$06			ldx 	#ErrorID_Stop
.2331	20 18 15	jsr $1518		jsr	errorHandler
.2334					CommandEnd:
.2334	4c 6b 36	jmp $366b			jmp 	WarmStart
.2337					CommandXemu:
.2337	4c ff ff	jmp $ffff			jmp 	$FFFF 						; fudge to crash out of emulator
.233a					AdvanceNextLine:
.233a	a0 00		ldy #$00			ldy 	#0 							; get offset
.233c	b1 28		lda ($28),y			lda 	(codePtr),y
.233e	18		clc				clc 								; add to codePtr
.233f	65 28		adc $28				adc 	codePtr
.2341	85 28		sta $28				sta 	codePtr
.2343	90 02		bcc $2347			bcc 	_ANLNoCarry
.2345	e6 29		inc $29				inc 	codePtr+1
.2347					_ANLNoCarry:
.2347	b1 28		lda ($28),y			lda 	(codePtr),y 				; if end of program (or was just stand alone.
.2349	f0 e9		beq $2334			beq 	CommandEnd 					; execute END
.234b	a0 03		ldy #$03			ldy 	#3 							; start of tokens on line.
.234d	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/for.asm

.234e					Command_FOR:
.234e	a9 46		lda #$46			lda 	#markerFOR 					; allocate the space and set the marker
.2350	a2 0b		ldx #$0b			ldx 	#11
.2352	20 1d 36	jsr $361d			jsr 	RSClaim
.2355	20 67 22	jsr $2267			jsr 	CommandLET 					; do the same as LET FOR [a = 4]
.2358	a5 48		lda $48				lda 	esType 						; check type should be integer reference.
.235a	c9 80		cmp #$80			cmp 	#$80 						; we do not do FOR floats.
.235c	d0 4c		bne $23aa			bne 	_CFType
.235e	a9 ce		lda #$ce			lda 	#TKW_TO 					; check TO present.
.2360	20 ea 35	jsr $35ea			jsr 	CheckToken
.2363	a2 01		ldx #$01			ldx 	#1 							; keep the variable address in stack 0
.2365	20 ea 2e	jsr $2eea			jsr 	EvaluateInteger				; get terminal value in stack 1
.2368	98		tya				tya
.2369	48		pha				pha
.236a	a0 04		ldy #$04			ldy 	#4
.236c	a5 50		lda $50				lda		esInt0 						; copy the address of the index variable into 4 and 5
.236e	91 37		sta ($37),y			sta 	(rsPointer),y
.2370	c8		iny				iny
.2371	a5 58		lda $58				lda		esInt1
.2373	91 37		sta ($37),y			sta 	(rsPointer),y
.2375	c8		iny				iny
.2376	a9 01		lda #$01			lda 	#1  						; the default step in 6, (-128 .. 127 only)
.2378	91 37		sta ($37),y			sta 	(rsPointer),y
.237a	c8		iny				iny
.237b	a5 51		lda $51				lda		esInt0+1 					; terminal value in 7 to 11.
.237d	91 37		sta ($37),y			sta 	(rsPointer),y
.237f	c8		iny				iny
.2380	a5 59		lda $59				lda		esInt1+1
.2382	91 37		sta ($37),y			sta 	(rsPointer),y
.2384	c8		iny				iny
.2385	a5 61		lda $61				lda		esInt2+1
.2387	91 37		sta ($37),y			sta 	(rsPointer),y
.2389	c8		iny				iny
.238a	a5 69		lda $69				lda		esInt3+1
.238c	91 37		sta ($37),y			sta 	(rsPointer),y
.238e	68		pla				pla
.238f	a8		tay				tay
.2390	b1 28		lda ($28),y			lda 	(codePtr),y 				; followed by STEP.
.2392	c9 cf		cmp #$cf			cmp 	#TKW_STEP
.2394	d0 0e		bne $23a4			bne 	_CFDone
.2396	c8		iny				iny									; skip over step.
.2397	20 ea 2e	jsr $2eea			jsr 	EvaluateInteger 			; get step
.239a	98		tya				tya
.239b	48		pha				pha
.239c	b5 50		lda $50,x			lda 	esInt0,x 					; copy it into step (bit lazy here)
.239e	a0 06		ldy #$06			ldy 	#6
.23a0	91 37		sta ($37),y			sta 	(rsPointer),y
.23a2	68		pla				pla
.23a3	a8		tay				tay
.23a4					_CFDone:
.23a4	a9 01		lda #$01			lda 	#1
.23a6	20 49 36	jsr $3649			jsr 	RSSavePosition 				; save position.
.23a9	60		rts				rts
.23aa					_CFType:
.23aa	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.23ac	20 18 15	jsr $1518		jsr	errorHandler
.23af					Command_NEXT:
.23af	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.23b1	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.23b3	c9 46		cmp #$46			cmp 	#markerFOR 						; does it match
.23b5	f0 05		beq $23bc			beq 	_isok
.23b7	a2 10		ldx #$10			ldx 	#ErrorID_nextErr
.23b9	20 18 15	jsr $1518		jsr	errorHandler
.23bc					_isok:
.23bc	b1 28		lda ($28),y			lda 	(codePtr),y 				; is it NEXT <index>
.23be	c9 40		cmp #$40			cmp 	#$40 						; e.g. a variable follows 00-3F
.23c0	b0 18		bcs $23da			bcs 	_CNNoIndex
.23c2	a2 00		ldx #$00			ldx 	#0 							; start on stack
.23c4	20 23 2f	jsr $2f23			jsr 	EvaluateReference 			; this is the variable/parameter to localise.
.23c7	98		tya				tya
.23c8	48		pha				pha
.23c9	a0 04		ldy #$04			ldy 	#4 							; check same variable as that stored at +4,+5
.23cb	b1 37		lda ($37),y			lda 	(rsPointer),y
.23cd	d5 50		cmp $50,x			cmp 	esInt0,x
.23cf	d0 76		bne $2447			bne 	_CNBadIndex
.23d1	c8		iny				iny
.23d2	b1 37		lda ($37),y			lda 	(rsPointer),y
.23d4	d5 58		cmp $58,x			cmp 	esInt1,x
.23d6	d0 6f		bne $2447			bne 	_CNBadIndex
.23d8	68		pla				pla
.23d9	a8		tay				tay
.23da					_CNNoIndex:
.23da	98		tya				tya
.23db	48		pha				pha
.23dc	a0 04		ldy #$04			ldy 	#4 							; make temp0 point to the index
.23de	b1 37		lda ($37),y			lda 	(rsPointer),y
.23e0	85 2a		sta $2a				sta 	temp0
.23e2	c8		iny				iny
.23e3	b1 37		lda ($37),y			lda 	(rsPointer),y
.23e5	85 2b		sta $2b				sta 	temp0+1
.23e7	c8		iny				iny
.23e8	a2 00		ldx #$00			ldx 	#0 							; X is the sign extend part of the step.
.23ea	b1 37		lda ($37),y			lda 	(rsPointer),y 				; get the step.
.23ec	85 2f		sta $2f				sta 	temp2+1 					; save for later.
.23ee	10 01		bpl $23f1			bpl 	_CNSignX
.23f0	ca		dex				dex  								; X = $FF
.23f1					_CNSignX:
.23f1	18		clc				clc 								; add to the LSB
.23f2	a0 00		ldy #$00			ldy 	#0
.23f4	71 2a		adc ($2a),y			adc 	(temp0),y
.23f6	91 2a		sta ($2a),y			sta 	(temp0),y
.23f8					_CNPropogate:
.23f8	c8		iny				iny  								; add the sign extended in X to the rest.
.23f9	8a		txa				txa
.23fa	71 2a		adc ($2a),y			adc 	(temp0),y
.23fc	91 2a		sta ($2a),y			sta 	(temp0),y
.23fe	c8		iny				iny
.23ff	8a		txa				txa
.2400	71 2a		adc ($2a),y			adc 	(temp0),y
.2402	91 2a		sta ($2a),y			sta 	(temp0),y
.2404	c8		iny				iny
.2405	8a		txa				txa
.2406	71 2a		adc ($2a),y			adc 	(temp0),y
.2408	91 2a		sta ($2a),y			sta 	(temp0),y
.240a	18		clc				clc 								; point temp1 to the terminal value stored in the stack.
.240b	a5 37		lda $37				lda 	rsPointer
.240d	69 07		adc #$07			adc 	#7
.240f	85 2c		sta $2c				sta 	temp1
.2411	a9 00		lda #$00			lda 	#0
.2413	85 2e		sta $2e				sta 	temp2 						; clear temp2, which is the OR of all the subtractions.
.2415	a8		tay				tay 								; and clear the Y register again.
.2416	65 38		adc $38				adc 	rsPointer+1
.2418	85 2d		sta $2d				sta 	temp1+1
.241a	38		sec				sec 								; calculate current - limit oring interim values.
.241b	20 53 24	jsr $2453			jsr 	_CNCompare 					; each of these does a byte.
.241e	20 53 24	jsr $2453			jsr 	_CNCompare 					; we calculate the OR of all these subtractions.
.2421	20 53 24	jsr $2453			jsr 	_CNCompare 					; and the carry of the subtraction.
.2424	20 53 24	jsr $2453			jsr 	_CNCompare
.2427	50 02		bvc $242b			bvc 	_CNNoOverflow 				; converts to a signed comparison on the sign bit.
.2429	49 80		eor #$80			eor 	#$80
.242b					_CNNoOverflow:
.242b	a4 2f		ldy $2f				ldy 	temp2+1						; get step back
.242d	30 1d		bmi $244c			bmi 	_CNCheckDownto
.242f	c9 00		cmp #$00			cmp 	#0
.2431	30 0c		bmi $243f			bmi 	_CNLoopRound 				; loop round if < =
.2433	a5 2e		lda $2e				lda 	temp2
.2435	f0 08		beq $243f			beq 	_CNLoopRound
.2437					_CNLoopExit:
.2437	68		pla				pla
.2438	a8		tay				tay
.2439	a9 0b		lda #$0b			lda 	#11
.243b	20 3f 36	jsr $363f			jsr 	RSFree
.243e	60		rts				rts
.243f					_CNLoopRound:
.243f	68		pla				pla
.2440	a8		tay				tay
.2441	a9 01		lda #$01			lda 	#1
.2443	20 5c 36	jsr $365c			jsr 	RSLoadPosition				; go back to the loop top
.2446	60		rts				rts
.2447					_CNBadIndex:
.2447	a2 13		ldx #$13			ldx 	#ErrorID_BadIndex
.2449	20 18 15	jsr $1518		jsr	errorHandler
.244c					_CNCheckDownto:
.244c	c9 00		cmp #$00			cmp 	#0
.244e	10 ef		bpl $243f			bpl 	_CNLoopRound
.2450	4c 37 24	jmp $2437			jmp 	_CNLoopExit
.2453					_CNCompare:
.2453	b1 2a		lda ($2a),y			lda 	(temp0),y 					; do the subtraction - compare don't care about answer
.2455	f1 2c		sbc ($2c),y			sbc 	(temp1),y
.2457	05 2e		ora $2e				ora 	temp2 						; Or into temp2 (does not affect carry)
.2459	85 2e		sta $2e				sta 	temp2
.245b	c8		iny				iny
.245c	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/if.asm

.245d					CommandIf:
.245d	20 e8 2e	jsr $2ee8			jsr 	EvaluateRootInteger 		; get what's being tested.
.2460	b1 28		lda ($28),y			lda 	(codePtr),y 				; check for IF .. THEN or IF .. GOTO which are single lines.
.2462	c9 91		cmp #$91			cmp 	#TKW_GOTO
.2464	f0 04		beq $246a			beq 	_IfSimple
.2466	c9 a1		cmp #$a1			cmp 	#TKW_THEN
.2468	d0 1b		bne $2485			bne 	_IfComplex
.246a					_IfSimple:
.246a	20 a9 35	jsr $35a9			jsr 	MInt32Zero					; check if TOS zero
.246d	f0 10		beq $247f			beq 	_IfEOL 						; go to next line.
.246f	b1 28		lda ($28),y			lda 	(codePtr),y 				; get and skip token.
.2471	c8		iny				iny
.2472	c9 91		cmp #$91			cmp 	#TKW_GOTO 					; was it if GOTO ?
.2474	f0 0c		beq $2482			beq 	_IfGoto 					; do the Goto code
.2476	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows the THEN ?
.2478	29 c0		and #$c0			and 	#$C0 						; check $40-$7F
.247a	c9 40		cmp #$40			cmp 	#$40 						; e.g. number IF x = 0 THEN 170
.247c	f0 04		beq $2482			beq 	_IfGoto
.247e	60		rts				rts 								; else continue on this line.
.247f					_IfEOL:
.247f	4c 3a 23	jmp $233a			jmp 	AdvanceNextLine 			; go to next line
.2482					_IfGoto:
.2482	4c 71 20	jmp $2071			jmp 	CommandGoto
.2485					_IfComplex:
.2485	20 a9 35	jsr $35a9			jsr 	MInt32Zero 					; is it true ?
.2488	f0 01		beq $248b			beq 	_IFSkip 					; if non-zero then skip to ELSE/ENDIF
.248a	60		rts				rts 								; else continue.
.248b					_IFSkip:
.248b	a9 d6		lda #$d6			lda	 	#TKW_ELSE 					; test failed, go to ELSE or ENDIF whichever comes first.
.248d	a2 a2		ldx #$a2			ldx 	#TKW_ENDIF
.248f	4c 27 27	jmp $2727			jmp		ScanForward
.2492					Command_ELSE:
.2492	a2 a2		ldx #$a2			ldx 	#TKW_ENDIF
.2494	8a		txa				txa
.2495	4c 27 27	jmp $2727			jmp		ScanForward
.2498					Command_ENDIF:
.2498	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/local.asm

.0cd5					storeSize:
>0cd5							.fill 	1
.2499					CommandLocal:
.2499	a2 00		ldx #$00			ldx 	#0
.249b	20 b7 24	jsr $24b7			jsr 	LocaliseVariable 			; localise one.
.249e					_CLCheckNext:
.249e	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows ?
.24a0	c8		iny				iny
.24a1	c9 8d		cmp #$8d			cmp 	#TKW_EQUAL 					; something local "x = 2" ?
.24a3	f0 06		beq $24ab			beq 	_CLAssignment
.24a5	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; comma try again.
.24a7	f0 f0		beq $2499			beq 	CommandLocal
.24a9	88		dey				dey
.24aa	60		rts				rts
.24ab					_CLAssignment:
.24ab	a2 01		ldx #$01			ldx 	#1
.24ad	20 cb 2e	jsr $2ecb			jsr 	Evaluate 					; evaluate RHS
.24b0	ca		dex				dex
.24b1	20 7a 22	jsr $227a			jsr 	WriteValue
.24b4	4c 9e 24	jmp $249e			jmp 	_CLCheckNext
.24b7					LocaliseVariable:
.24b7	b1 28		lda ($28),y			lda 	(codePtr),y 				; check it's a variable.
.24b9	c9 40		cmp #$40			cmp 	#$40
.24bb	b0 67		bcs $2524			bcs 	_LVSyntax
.24bd	8a		txa				txa 								; get the address of that variable.
.24be	a2 02		ldx #$02		ldx	#2
.24c0	20 3d 45	jsr $453d		jsr	variableHandler
.24c3	aa		tax				tax
.24c4	8a		txa				txa
.24c5	48		pha				pha
.24c6	98		tya				tya
.24c7	48		pha				pha
.24c8	20 dc 22	jsr $22dc			jsr 	TOSToTemp0 					; the address of the variable is now in temp0.
.24cb	b5 48		lda $48,x			lda 	esType,x 					; get the type
.24cd	0a		asl a				asl 	a
.24ce	10 16		bpl $24e6			bpl 	_LVPushNumber
.24d0	a0 00		ldy #$00			ldy 	#0 							; put address of data in temp1
.24d2	b1 2a		lda ($2a),y			lda 	(temp0),y
.24d4	c8		iny				iny
.24d5	85 2c		sta $2c				sta 	temp1
.24d7	b1 2a		lda ($2a),y			lda 	(temp0),y
.24d9	85 2d		sta $2d				sta 	temp1+1
.24db	a0 00		ldy #$00			ldy 	#0 	 						; get length
.24dd	b1 2c		lda ($2c),y			lda 	(temp1),y
.24df	aa		tax				tax 								; into X
.24e0	e8		inx				inx 								; +1 for length.
.24e1	a9 24		lda #$24			lda 	#markerString
.24e3	4c fb 24	jmp $24fb			jmp 	_LVWriteFrame
.24e6					_LVPushNumber:
.24e6	a5 2a		lda $2a				lda 	temp0 						; storage address and data source are the same
.24e8	85 2c		sta $2c				sta 	temp1
.24ea	a5 2b		lda $2b				lda 	temp0+1
.24ec	85 2d		sta $2d				sta 	temp1+1
.24ee	b5 48		lda $48,x			lda 	esType,x 					; put float flag into carry.
.24f0	4a		lsr a				lsr 	a
.24f1	a9 25		lda #$25			lda 	#markerInt 					; get marker and size.
.24f3	a2 04		ldx #$04			ldx 	#VarISize
.24f5	90 04		bcc $24fb			bcc 	_LVIsInteger
.24f7	a9 23		lda #$23			lda 	#markerFloat
.24f9	a2 06		ldx #$06			ldx 	#VarFSize
.24fb					_LVIsInteger:
.24fb					_LVWriteFrame:
.24fb	8e d5 0c	stx $0cd5			stx 	storeSize 					; number of bytes to copy from (temp0)
.24fe	e8		inx				inx 								; allocate 3 bytes, 2 for the address, 1 for the marker.
.24ff	e8		inx				inx
.2500	e8		inx				inx
.2501	20 1d 36	jsr $361d			jsr 	RSClaim 					; create the stack frame.
.2504	a5 2a		lda $2a				lda 	temp0 						; copy the target address to slots 1 & 2
.2506	a0 01		ldy #$01			ldy 	#1
.2508	91 37		sta ($37),y			sta 	(rsPointer),y
.250a	c8		iny				iny
.250b	a5 2b		lda $2b				lda 	temp0+1
.250d	91 37		sta ($37),y			sta 	(rsPointer),y
.250f	a0 00		ldy #$00			ldy 	#0
.2511					_LVCopyData:
.2511	b1 2c		lda ($2c),y			lda 	(temp1),y 					; get data from source, temp1
.2513	c8		iny				iny 								; write allowing for the header bit.
.2514	c8		iny				iny
.2515	c8		iny				iny
.2516	91 37		sta ($37),y			sta 	(rsPointer),y
.2518	88		dey				dey
.2519	88		dey				dey
.251a	ce d5 0c	dec $0cd5			dec 	storeSize 					; do it storesize times
.251d	d0 f2		bne $2511			bne 	_LVCopyData
.251f	68		pla				pla
.2520	a8		tay				tay
.2521	68		pla				pla
.2522	aa		tax				tax
.2523	60		rts				rts
.2524					_LVSyntax:
.2524	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.2526	20 18 15	jsr $1518		jsr	errorHandler
.2529					RestoreLocals:
.2529	a2 00		ldx #$00			ldx 	#0
.252b	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.252d	c9 40		cmp #$40			cmp	 	#64
.252f	90 01		bcc $2532			bcc 	_RLocal
.2531	60		rts				rts
.2532					_RLocal:
.2532	8a		txa				txa
.2533	48		pha				pha
.2534	98		tya				tya
.2535	48		pha				pha
.2536	a0 01		ldy #$01			ldy 	#1 							; copy target address to temp0
.2538	b1 37		lda ($37),y			lda 	(rsPointer),y
.253a	85 2a		sta $2a				sta 	temp0
.253c	c8		iny				iny
.253d	b1 37		lda ($37),y			lda 	(rsPointer),y
.253f	85 2b		sta $2b				sta 	temp0+1
.2541	a0 00		ldy #$00			ldy 	#0 							; get type back.
.2543	b1 37		lda ($37),y			lda 	(rsPointer),y
.2545	c9 24		cmp #$24			cmp 	#markerString 				; string is ... different :)
.2547	f0 28		beq $2571			beq 	_RString
.2549	a2 04		ldx #$04			ldx		#VARISize 					; size integer
.254b	c9 25		cmp #$25			cmp 	#markerInt
.254d	f0 02		beq $2551			beq 	_RIsInteger
.254f	a2 06		ldx #$06			ldx 	#VARFSize 					; size float
.2551					_RIsInteger:
.2551	8a		txa				txa
.2552	48		pha				pha
.2553	a0 03		ldy #$03			ldy 	#3							; start size to copy back from pointer.
.2555					_RCopyBack:
.2555	b1 37		lda ($37),y			lda 	(rsPointer),y
.2557	88		dey				dey
.2558	88		dey				dey
.2559	88		dey				dey
.255a	91 2a		sta ($2a),y			sta 	(temp0),y
.255c	c8		iny				iny
.255d	c8		iny				iny
.255e	c8		iny				iny
.255f	c8		iny				iny
.2560	ca		dex				dex
.2561	d0 f2		bne $2555			bne 	_RCopyBack
.2563	68		pla				pla 								; get size add 3
.2564	18		clc				clc
.2565	69 03		adc #$03			adc 	#3 							; (2 for address one for marker)
.2567					_RRestoreAAndLoop:
.2567	20 3f 36	jsr $363f			jsr 	RSFree
.256a	68		pla				pla
.256b	a8		tay				tay
.256c	68		pla				pla
.256d	aa		tax				tax
.256e	4c 29 25	jmp $2529			jmp 	RestoreLocals 				; go see if there are any more locals.
.2571					_RString:
.2571	a2 00		ldx #$00			ldx 	#0
.2573	a0 01		ldy #$01			ldy 	#1 							; set up for a string write.
.2575	b1 37		lda ($37),y			lda 	(rsPointer),y
.2577	95 50		sta $50,x			sta 	esInt0,x
.2579	c8		iny				iny
.257a	b1 37		lda ($37),y			lda 	(rsPointer),y
.257c	95 58		sta $58,x			sta 	esInt1,x
.257e	18		clc				clc
.257f	a5 37		lda $37				lda 	rsPointer
.2581	69 03		adc #$03			adc 	#3
.2583	95 51		sta $51,x			sta 	esInt0+1,x
.2585	a5 38		lda $38				lda 	rsPointer+1
.2587	69 00		adc #$00			adc 	#0
.2589	95 59		sta $59,x			sta 	esInt1+1,x
.258b	8a		txa				txa
.258c	a2 10		ldx #$10		ldx	#16
.258e	20 2d 39	jsr $392d		jsr	stringHandler
.2591	a0 03		ldy #$03			ldy 	#3 							; get string length
.2593	b1 37		lda ($37),y			lda 	(rsPointer),y
.2595	18		clc				clc
.2596	69 04		adc #$04			adc 	#4 							; add 4 (pointer, marker, length) to restore.
.2598	4c 67 25	jmp $2567			jmp 	_RRestoreAAndLoop

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/proc.asm

.0cd6					paramCount:
>0cd6							.fill 	1
.259b					CallProc:
.259b	20 23 26	jsr $2623			jsr 	FindProcedure 				; find procedure, put in temp0. A contains name length.
.259e	48		pha				pha 								; save length on stack
.259f	85 32		sta $32				sta 	tempShort 					; save length in tempShort
.25a1	a5 2b		lda $2b				lda 	temp0+1 					; save procedure target on stack.
.25a3	48		pha				pha
.25a4	a5 2a		lda $2a				lda 	temp0
.25a6	48		pha				pha
.25a7	98		tya				tya 								; calculate Y + length
.25a8	18		clc				clc
.25a9	65 32		adc $32				adc 	tempShort
.25ab	a8		tay				tay
.25ac	a2 00		ldx #$00			ldx 	#0 							; where the first parameter goes - 1
.25ae					_CallProcEvalParams:
.25ae	e8		inx				inx
.25af	b1 28		lda ($28),y			lda 	(codePtr),y 				; do we have ) , e.g. the end of the parameters ?
.25b1	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.25b3	f0 0b		beq $25c0			beq 	_CPDoneParams
.25b5	20 cb 2e	jsr $2ecb			jsr 	Evaluate 					; evaluate a parameter
.25b8	b1 28		lda ($28),y			lda 	(codePtr),Y 				; get what's next, preconsume
.25ba	c8		iny				iny
.25bb	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; if comma, go get another parameter
.25bd	f0 ef		beq $25ae			beq 	_CallProcEvalParams
.25bf	88		dey				dey 								; undo consumption.
.25c0					_CPDoneParams:
.25c0	20 f5 35	jsr $35f5			jsr 	CheckRightParen 			; check closing parenthesis.
.25c3	8e d6 0c	stx $0cd6			stx 	paramCount 					; store parameter count+1
.25c6	a2 04		ldx #$04			ldx 	#4							; make space on stack
.25c8	a9 50		lda #$50			lda 	#markerPROC
.25ca	20 1d 36	jsr $361d			jsr 	RSClaim
.25cd	a9 01		lda #$01			lda 	#1 							; store return address.
.25cf	20 49 36	jsr $3649			jsr 	RSSavePosition
.25d2	68		pla				pla 								; get the new code Ptr
.25d3	85 28		sta $28				sta 	codePtr
.25d5	68		pla				pla
.25d6	85 29		sta $29				sta 	codePtr+1
.25d8	68		pla				pla 								; length of name + 4 is the param start.
.25d9	18		clc				clc
.25da	69 04		adc #$04			adc 	#4
.25dc	a8		tay				tay
.25dd	a2 ff		ldx #$ff			ldx 	#$FF
.25df					_CPLoadParameters:
.25df	e8		inx				inx 								; point to where the address should be loaded.
.25e0	ec d6 0c	cpx $0cd6			cpx 	paramCount 					; too many parameters in definition ?
.25e3	f0 1e		beq $2603			beq 	_CPParamError
.25e5	b1 28		lda ($28),y			lda 	(codePtr),y					; what follows
.25e7	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN 				; is it the right bracket
.25e9	f0 0e		beq $25f9			beq 	_CPParamComplete 			; done all the parameters, perhaps.
.25eb	20 b7 24	jsr $24b7			jsr 	LocaliseVariable 			; make following variable local, ref in tos,x
.25ee	20 7a 22	jsr $227a			jsr 	WriteValue 					; copy the evaluated parameter into there.
.25f1	b1 28		lda ($28),y			lda 	(codePtr),y 				; followed by a comma ?
.25f3	c8		iny				iny
.25f4	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.25f6	f0 e7		beq $25df			beq 	_CPLoadParameters
.25f8	88		dey				dey 								; no, unconsume and check for )
.25f9					_CPParamComplete:
.25f9	20 f5 35	jsr $35f5			jsr 	CheckRightParen 			; check )
.25fc	e8		inx				inx 								; check right number of parameters have been consumed
.25fd	ec d6 0c	cpx $0cd6			cpx 	paramCount
.2600	d0 01		bne $2603			bne 	_CPParamError
.2602	60		rts				rts
.2603					_CPParamError:
.2603	a2 18		ldx #$18			ldx 	#ErrorID_Params
.2605	20 18 15	jsr $1518		jsr	errorHandler
.2608					ReturnProc:
.2608	20 29 25	jsr $2529			jsr 	RestoreLocals 				; get the locals back.
.260b	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.260d	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.260f	c9 50		cmp #$50			cmp 	#markerPROC 						; does it match
.2611	f0 05		beq $2618			beq 	_isok
.2613	a2 12		ldx #$12			ldx 	#ErrorID_endProcErr
.2615	20 18 15	jsr $1518		jsr	errorHandler
.2618					_isok:
.2618	a9 01		lda #$01			lda 	#1
.261a	20 5c 36	jsr $365c			jsr 	RSLoadPosition 				; reload the position from offset 1.
.261d	a9 04		lda #$04			lda 	#4 							; throw 4 bytes from stack.
.261f	20 3f 36	jsr $363f			jsr 	RSFree
.2622	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/proctable.asm

.0cd7					procList:
>0cd7							.fill 	2		 					; terminated by name high being zero.
.0cd9					yInLine:
>0cd9							.fill 	1
.2623					FindProcedure:
.2623	8c d9 0c	sty $0cd9			sty 	yInLine 					; save current position.
.2626	20 e1 26	jsr $26e1			jsr 	CalculateProcedureHash		; calculate the hash of the procedure.
.2629	85 2c		sta $2c				sta 	temp1
.262b	ad d7 0c	lda $0cd7			lda		procList 					; put procList address in temp2
.262e	85 2e		sta $2e				sta 	temp2
.2630	ad d8 0c	lda $0cd8			lda 	procList+1
.2633	85 2f		sta $2f				sta 	temp2+1
.2635	a0 00		ldy #$00			ldy 	#0 							; position in this table.
.2637					_FPLoop:
.2637	b1 2e		lda ($2e),y			lda 	(temp2),y
.2639	f0 4f		beq $268a			beq 	_FPError 					; if so, we don't know this procedure.
.263b	85 2b		sta $2b				sta 	temp0+1 					; copy MSB/LSB to temp0 as we go.
.263d	c8		iny				iny
.263e	b1 2e		lda ($2e),y			lda 	(temp2),y
.2640	85 2a		sta $2a				sta 	temp0
.2642	c8		iny				iny
.2643	b1 2e		lda ($2e),y			lda 	(temp2),y					; check the procedure hash.
.2645	c5 2c		cmp $2c				cmp 	temp1
.2647	d0 2b		bne $2674			bne 	_FPNext 					; hash is different, go to next.
.2649	38		sec				sec
.264a	ad d9 0c	lda $0cd9			lda 	yInLine 					; position in line must be at least 4
.264d	e9 04		sbc #$04			sbc 	#4
.264f	18		clc				clc
.2650	65 28		adc $28				adc 	codePtr
.2652	85 30		sta $30				sta 	temp3
.2654	a5 29		lda $29				lda 	codePtr+1
.2656	69 00		adc #$00			adc 	#0
.2658	85 31		sta $31				sta 	temp3+1
.265a	98		tya				tya
.265b	48		pha				pha
.265c	a0 04		ldy #$04			ldy 	#4
.265e					_FPCName:
.265e	b1 30		lda ($30),y			lda 	(temp3),y 					; check the same
.2660	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.2662	d0 0e		bne $2672			bne 	_FPpulYNext 				; if different go to next one.
.2664	c8		iny				iny
.2665	c9 3a		cmp #$3a			cmp 	#$3A
.2667	90 f5		bcc $265e			bcc 	_FPCName 					; compare the whole lot....
.2669	68		pla				pla 								; throw away the saved Y
.266a	98		tya				tya 								; length of name is Y-4
.266b	38		sec				sec
.266c	e9 04		sbc #$04			sbc 	#4
.266e	ac d9 0c	ldy $0cd9			ldy 	yInLine  					; get the original Y back
.2671	60		rts				rts
.2672					_FPpulYNext:
.2672	68		pla				pla
.2673	a8		tay				tay
.2674					_FPNext:
.2674	c8		iny				iny 								; next procedure record.
.2675	10 c0		bpl $2637			bpl 	_FPLoop 					; if done 128 already ... e.g. Y -ve
.2677	98		tya				tya 								; subtract 128 from Y
.2678	38		sec				sec
.2679	e9 80		sbc #$80			sbc 	#128
.267b	a8		tay				tay
.267c	18		clc				clc 								; add 128 to temp2, so we can have more than
.267d	a5 2e		lda $2e				lda 	temp2 						; 255/3 = 85 procedures
.267f	69 80		adc #$80			adc 	#128
.2681	85 2e		sta $2e				sta 	temp2
.2683	90 b2		bcc $2637			bcc 	_FPLoop
.2685	e6 2f		inc $2f				inc 	temp2+1
.2687	4c 37 26	jmp $2637			jmp 	_FPLoop
.268a					_FPError:
.268a	a2 17		ldx #$17			ldx 	#ErrorID_NoProc
.268c	20 18 15	jsr $1518		jsr	errorHandler
.268f					ScanProc:
.268f	98		tya				tya
.2690	48		pha				pha
.2691	a5 35		lda $35				lda 	lowMemory 					; copy the start of the procList, at low memory
.2693	8d d7 0c	sta $0cd7			sta 	procList
.2696	a5 36		lda $36				lda 	lowMemory+1
.2698	8d d8 0c	sta $0cd8			sta 	procList+1
.269b	20 0b 2a	jsr $2a0b			jsr 	ResetCodeAddress 			; back to the start.
.269e					_ScanLoop:
.269e	a0 00		ldy #$00			ldy 	#0 							; check reached program end
.26a0	b1 28		lda ($28),y			lda 	(codePtr),y
.26a2	f0 2a		beq $26ce			beq 	_ScanExit
.26a4	a0 03		ldy #$03			ldy 	#3							; get first token
.26a6	b1 28		lda ($28),y			lda 	(codePtr),y
.26a8	c9 9d		cmp #$9d			cmp 	#TKW_DEFPROC				; skip to next if not DEFPROC
.26aa	d0 12		bne $26be			bne 	_ScanNext
.26ac	a5 29		lda $29				lda 	codePtr+1 					; write high and low address of this line.
.26ae	20 d6 26	jsr $26d6			jsr 	_ScanWrite
.26b1	a5 28		lda $28				lda 	codePtr
.26b3	20 d6 26	jsr $26d6			jsr 	_ScanWrite
.26b6	a0 04		ldy #$04			ldy 	#4 							; start of name part
.26b8	20 e1 26	jsr $26e1			jsr 	CalculateProcedureHash 		; calculate procedure hash
.26bb	20 d6 26	jsr $26d6			jsr 	_ScanWrite					; and write that
.26be					_ScanNext:
.26be	18		clc				clc
.26bf	a0 00		ldy #$00			ldy 	#0
.26c1	b1 28		lda ($28),y			lda 	(codePtr),y
.26c3	65 28		adc $28				adc 	codePtr
.26c5	85 28		sta $28				sta 	codePtr
.26c7	90 d5		bcc $269e			bcc 	_ScanLoop
.26c9	e6 29		inc $29				inc 	codePtr+1
.26cb	4c 9e 26	jmp $269e			jmp 	_ScanLoop
.26ce					_ScanExit:
.26ce	a9 00		lda #$00			lda 	#0 							; write ending zero.
.26d0	20 d6 26	jsr $26d6			jsr 	_ScanWrite
.26d3	68		pla				pla
.26d4	a8		tay				tay
.26d5	60		rts				rts
.26d6					_ScanWrite:
.26d6	a0 00		ldy #$00			ldy 	#0
.26d8	91 35		sta ($35),y			sta 	(lowMemory),y
.26da	e6 35		inc $35				inc 	lowMemory
.26dc	d0 02		bne $26e0			bne 	_SWNoCarry
.26de	e6 36		inc $36				inc 	lowMemory+1
.26e0					_SWNoCarry:
.26e0	60		rts				rts
.26e1					CalculateProcedureHash:
.26e1	a9 00		lda #$00			lda 	#0 							; clear hash.
.26e3	85 2a		sta $2a				sta 	temp0
.26e5					_CPHLoop:
.26e5	18		clc				clc 								; add character and rotate and add carry back in
.26e6	b1 28		lda ($28),y			lda 	(codePtr),y
.26e8	65 2a		adc $2a				adc 	temp0
.26ea	6a		ror a				ror 	a
.26eb	69 0d		adc #$0d			adc 	#13 						; primes usually good for this sort of thing.
.26ed	85 2a		sta $2a				sta 	temp0 						; (down with this sort of thing)
.26ef	b1 28		lda ($28),y			lda 	(codePtr),y
.26f1	c8		iny				iny 								; advance incase we go round again.
.26f2	c9 3a		cmp #$3a			cmp 	#$3A
.26f4	90 ef		bcc $26e5			bcc 	_CPHLoop
.26f6	a5 2a		lda $2a				lda 	temp0
.26f8	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/repeat.asm

.26f9					Command_Repeat:
.26f9	a2 04		ldx #$04			ldx 	#4 							; allocate 4 bytes on stack for REPEAT
.26fb	a9 52		lda #$52			lda 	#markerREPEAT 				; repeat marker allocate 4 bytes
.26fd	20 1d 36	jsr $361d			jsr 	RSClaim
.2700	a9 01		lda #$01			lda 	#1 							; save position at offset 1.
.2702	20 49 36	jsr $3649			jsr 	RSSavePosition
.2705	60		rts				rts
.2706					Command_Until:
.2706	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.2708	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.270a	c9 52		cmp #$52			cmp 	#markerREPEAT 						; does it match
.270c	f0 05		beq $2713			beq 	_isok
.270e	a2 0f		ldx #$0f			ldx 	#ErrorID_untilErr
.2710	20 18 15	jsr $1518		jsr	errorHandler
.2713					_isok:
.2713	20 e8 2e	jsr $2ee8			jsr 	EvaluateRootInteger 		; at the bottom.
.2716	20 a9 35	jsr $35a9			jsr 	MInt32Zero					; check if TOS zero
.2719	d0 06		bne $2721			bne 	_CUExit
.271b	a9 01		lda #$01			lda 	#1
.271d	20 5c 36	jsr $365c			jsr 	RSLoadPosition 				; reload the position from offset 1.
.2720	60		rts				rts
.2721					_CUExit:
.2721	a9 04		lda #$04			lda 	#4 							; throw 4 bytes from stack.
.2723	20 3f 36	jsr $363f			jsr 	RSFree
.2726	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/scanner.asm

.2727					ScanForward:
.2727	85 2c		sta $2c				sta 	temp1 						; save tokens to search in temp1/temp1+1
.2729	86 2d		stx $2d				stx 	temp1+1
.272b	a9 00		lda #$00			lda 	#0 							; temp2 counts structure levels.
.272d	85 2e		sta $2e				sta 	temp2
.272f	b1 28		lda ($28),y	_SFLoop:lda 	(codePtr),y 				; look at the next token.
.2731	c8		iny				iny
.2732	a6 2e		ldx $2e				ldx 	temp2 						; check structure levels are zero.
.2734	d0 08		bne $273e			bne 	_SFNoCheck 					; if so, check token against entered values.
.2736	c5 2c		cmp $2c				cmp 	temp1 						; if either matches, we've reached the token
.2738	f0 24		beq $275e			beq 	_SFExit 					; at the same strcture depth.
.273a	c5 2d		cmp $2d				cmp 	temp1+1
.273c	f0 20		beq $275e			beq 	_SFExit
.273e					_SFNoCheck:
.273e	c9 80		cmp #$80			cmp 	#$80 						; if it is 00-7F (variable/number) just skip it.
.2740	90 ed		bcc $272f			bcc 	_SFLoop
.2742	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; $80-$85 is various specials.
.2744	90 19		bcc $275f			bcc 	_SFSpecials
.2746	c9 99		cmp #$99			cmp 	#TOK_STRUCTST 				; if < structure start then continue
.2748	90 e5		bcc $272f			bcc 	_SFLoop
.274a	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST 				; if >= unary start (after structure) then continue.
.274c	b0 e1		bcs $272f			bcs 	_SFLoop
.274e	aa		tax				tax  								; token in X, and look up the adjuster.
.274f	bd 06 2e	lda $2e06,x			lda 	ELBinaryOperatorInfo-TOK_BINARYST,x
.2752	38		sec				sec 								; convert to an offset ($FF,$01)
.2753	e9 81		sbc #$81			sbc 	#$81
.2755	18		clc				clc 								; add to depth
.2756	65 2e		adc $2e				adc 	temp2
.2758	85 2e		sta $2e				sta 	temp2
.275a	10 d3		bpl $272f			bpl 	_SFLoop 					; +ve okay to continue
.275c	30 07		bmi $2765			bmi 	SFError 					; if gone -ve then we have a nesting error
.275e	60		rts		_SFExit:rts
.275f					_SFSpecials:
.275f	20 6a 27	jsr $276a			jsr 	ScannerSkipSpecial
.2762	4c 2f 27	jmp $272f			jmp 	_SFLoop
.2765					SFError:
.2765	a2 14		ldx #$14			ldx 	#ErrorID_Struct
.2767	20 18 15	jsr $1518		jsr	errorHandler
.276a					ScannerSkipSpecial:
.276a	c9 80		cmp #$80			cmp 	#TOK_EOL 					; $80, advance to next line.
.276c	f0 10		beq $277e			beq 	_SFNextLine
.276e	c9 84		cmp #$84			cmp 	#TOK_FPC					; $84, skip embedded float
.2770	f0 2b		beq $279d			beq 	_SFFloatSkip
.2772	c9 85		cmp #$85			cmp 	#TOK_STR 					; $85, skip string
.2774	f0 02		beq $2778			beq 	_SFSkipString
.2776	c8		iny				iny									; $81,$82,$83 shift, so just advance over the shifted
.2777	60		rts				rts 								; token.
.2778					_SFSkipString:
.2778	98		tya				tya
.2779	38		sec				sec
.277a	71 28		adc ($28),y			adc 	(codePtr),y
.277c	a8		tay				tay
.277d	60		rts				rts
.277e					_SFNextLine:
.277e	a0 00		ldy #$00			ldy 	#0 							; get offset
.2780	b1 28		lda ($28),y			lda 	(codePtr),y
.2782	18		clc				clc 								; add to code pointer.
.2783	65 28		adc $28				adc 	codePtr
.2785	85 28		sta $28				sta 	codePtr
.2787	90 02		bcc $278b			bcc		_SFNLNoCarry
.2789	e6 29		inc $29				inc 	codePtr+1
.278b					_SFNLNoCarry:
.278b	b1 28		lda ($28),y			lda 	(codePtr),y 				; reached the end of the program.
.278d	d0 0b		bne $279a			bne		_SFXNL 						; no go round again
.278f	a5 2c		lda $2c				lda 	temp1
.2791	c9 d9		cmp #$d9			cmp 	#TKW_DATA 					; if searching for Data different error.
.2793	d0 d0		bne $2765			bne 	SFError 					; read uses this to search for data statements
.2795	a2 1d		ldx #$1d			ldx 	#ErrorID_DataError
.2797	20 18 15	jsr $1518		jsr	errorHandler
.279a	a0 03		ldy #$03	_SFXNL:	ldy 	#3
.279c	60		rts				rts
.279d					_SFFloatSkip:
.279d	98		tya				tya 								; skip over an embedded float.
.279e	18		clc				clc
.279f	69 05		adc #$05			adc 	#FloatEmbeddedSize
.27a1	a8		tay				tay
.27a2	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/while.asm

.27a3					Command_While:
.27a3	a9 57		lda #$57			lda 	#markerWhile 				; gosub marker allocate 4 bytes.
.27a5	a2 04		ldx #$04			ldx 	#4
.27a7	20 1d 36	jsr $361d			jsr 	RSClaim 					; create on stack.
.27aa	88		dey				dey
.27ab	a9 01		lda #$01			lda 	#1
.27ad	20 49 36	jsr $3649			jsr 	RSSavePosition 				; save position before the WHILE keyword.
.27b0	c8		iny				iny
.27b1	20 e8 2e	jsr $2ee8			jsr 	EvaluateRootInteger			; get the conditional
.27b4	20 a9 35	jsr $35a9			jsr 	MInt32Zero 	 				; if zero, skip forward to the fail code.
.27b7	f0 01		beq $27ba			beq 	_CWFail
.27b9	60		rts				rts
.27ba					_CWFail:
.27ba	a9 04		lda #$04			lda 	#4
.27bc	20 3f 36	jsr $363f			jsr 	RSFree 						; close the just opened position.
.27bf	a9 9f		lda #$9f			lda 	#TKW_WEND 					; scan forward past WEND.
.27c1	aa		tax				tax
.27c2	20 27 27	jsr $2727			jsr 	ScanForward
.27c5	60		rts				rts
.27c6					Command_Wend:
.27c6	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.27c8	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.27ca	c9 57		cmp #$57			cmp 	#markerWHILE 						; does it match
.27cc	f0 05		beq $27d3			beq 	_isok
.27ce	a2 11		ldx #$11			ldx 	#ErrorID_wendErr
.27d0	20 18 15	jsr $1518		jsr	errorHandler
.27d3					_isok:
.27d3	a9 01		lda #$01			lda 	#1
.27d5	20 5c 36	jsr $365c			jsr 	RSLoadPosition				; go back until true
.27d8	a9 04		lda #$04			lda 	#4
.27da	20 3f 36	jsr $363f			jsr 	RSFree 						; close the loop
.27dd	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/system/clear.asm

.27de					CommandClear:
.27de					XCommandClear:
.27de	98		tya				tya
.27df	48		pha				pha
.27e0	ad cc 0a	lda $0acc			lda 	endMemory					; set high memory = end of memory
.27e3	85 33		sta $33				sta 	highMemory
.27e5	ad cd 0a	lda $0acd			lda 	endMemory+1
.27e8	85 34		sta $34				sta 	highMemory+1
.27ea	ad c8 0a	lda $0ac8			lda 	basePage 					; work out where the program ends.
.27ed	85 2a		sta $2a				sta 	temp0
.27ef	ad c9 0a	lda $0ac9			lda 	basePage+1
.27f2	85 2b		sta $2b				sta 	temp0+1
.27f4					_CCFindEnd:
.27f4	a0 00		ldy #$00			ldy 	#0
.27f6	b1 2a		lda ($2a),y			lda 	(temp0),y
.27f8	f0 0c		beq $2806			beq 	_CCFoundEnd 				; offset zero is end.
.27fa	18		clc				clc
.27fb	65 2a		adc $2a				adc 	temp0 						; move to next line
.27fd	85 2a		sta $2a				sta 	temp0
.27ff	90 f3		bcc $27f4			bcc 	_CCFindEnd
.2801	e6 2b		inc $2b				inc 	temp0+1
.2803	4c f4 27	jmp $27f4			jmp 	_CCFindEnd
.2806					_CCFoundEnd:
.2806	a5 2a		lda $2a				lda 	temp0 						; put temp0 in lowMemory
.2808	85 35		sta $35				sta 	lowMemory
.280a	a5 2b		lda $2b				lda 	temp0+1
.280c	85 36		sta $36				sta 	lowMemory+1
.280e	18		clc				clc 								; put temp0+1 in endProgram
.280f	a5 2a		lda $2a				lda 	temp0
.2811	69 01		adc #$01			adc 	#1
.2813	8d ca 0a	sta $0aca			sta 	endProgram
.2816	a5 2b		lda $2b				lda 	temp0+1
.2818	69 00		adc #$00			adc 	#0
.281a	8d cb 0a	sta $0acb			sta 	endProgram+1
.281d	18		clc				clc 								; put a bit of space in.
.281e	a5 35		lda $35				lda 	lowMemory
.2820	69 04		adc #$04			adc 	#4
.2822	85 35		sta $35				sta 	lowMemory
.2824	90 02		bcc $2828			bcc 	_CCNoCarry
.2826	e6 36		inc $36				inc 	lowMemory+1
.2828					_CCNoCarry:
.2828	20 0f 36	jsr $360f			jsr 	RSReset 					; reset the return stack.
.282b	a2 06		ldx #$06		ldx	#6
.282d	20 3d 45	jsr $453d		jsr	variableHandler
.2830	20 8f 26	jsr $268f			jsr 	ScanProc 					; scan for procedures
.2833	20 14 20	jsr $2014			jsr 	CommandRestore 				; do a restore
.2836	68		pla				pla
.2837	a8		tay				tay
.2838	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/system/list.asm

.0cda					structIndent:
>0cda							.fill 	1
.2839					CommandList:
.2839	a2 00		ldx #$00			ldx		#0 							; set start/end lines in stack 0/1 to 0 and $FFFF
.283b	8e da 0c	stx $0cda			stx 	structIndent
.283e	20 82 35	jsr $3582			jsr 	MInt32False
.2841	e8		inx				inx
.2842	20 7e 35	jsr $357e			jsr 	MInt32True
.2845	b1 28		lda ($28),y			lda 	(codePtr),y 				; look at first token
.2847	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; list ,xxxx
.2849	f0 15		beq $2860			beq 	_CLEndLine
.284b	c9 00		cmp #$00			cmp 	#0 							; list ... on its own.
.284d	30 1b		bmi $286a			bmi 	_CLDoListing 				; do the whole lot.
.284f	a2 00		ldx #$00			ldx 	#0 							; get start line at stack:0
.2851	20 ea 2e	jsr $2eea			jsr 	EvaluateInteger
.2854	b1 28		lda ($28),y			lda 	(codePtr),y 				; , follows ?
.2856	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.2858	f0 06		beq $2860			beq 	_CLEndLine
.285a	20 c0 34	jsr $34c0			jsr 	MInt32CopyUp 				; copy first to second if just a line number on its
.285d	4c 6a 28	jmp $286a			jmp 	_CLDoListing 				; own e.g. list 1100
.2860					_CLEndLine:
.2860	c8		iny				iny 								; skip comma
.2861	b1 28		lda ($28),y			lda 	(codePtr),y  				; no number follows, then its list 1000,
.2863	30 05		bmi $286a			bmi 	_CLDoListing
.2865	a2 01		ldx #$01			ldx 	#1 							; get the last line to list
.2867	20 ea 2e	jsr $2eea			jsr 	EvaluateInteger				; get end
.286a					_CLDoListing:
.286a	20 0b 2a	jsr $2a0b			jsr 	ResetCodeAddress 			; back to the start.
.286d					_CLCheckLoop:
.286d	a2 02		ldx #$02		ldx	#2
.286f	20 f6 14	jsr $14f6		jsr	deviceHandler
.2872	a0 00		ldy #$00			ldy 	#0							; check end.
.2874	b1 28		lda ($28),y			lda 	(codePtr),y
.2876	f0 41		beq $28b9			beq 	_CLEnd
.2878	a2 00		ldx #$00			ldx 	#0 							; compare vs lower.
.287a	20 bc 28	jsr $28bc			jsr 	CLCompareLineTOS
.287d	c9 ff		cmp #$ff			cmp 	#255 						; if < skip
.287f	f0 28		beq $28a9			beq 	_CLNext
.2881	e8		inx				inx
.2882	20 bc 28	jsr $28bc			jsr 	CLCompareLineTOS 			; compare vs higher
.2885	c9 01		cmp #$01			cmp 	#1
.2887	f0 20		beq $28a9			beq 	_CLNext
.2889	a9 80		lda #$80			lda 	#$80 						; undo any down indents this line.
.288b	20 de 28	jsr $28de			jsr 	CLStructureCheck
.288e	ad da 0c	lda $0cda			lda 	structIndent 				; indent level.
.2891	10 02		bpl $2895			bpl 	_CLPositive
.2893	a9 00		lda #$00			lda 	#0
.2895					_CLPositive:
.2895	a2 04		ldx #$04		ldx	#4
.2897	20 6c 41	jsr $416c		jsr	tokeniserHandler
.289a	a9 82		lda #$82			lda 	#$82 						; up indents from this point on.
.289c	20 de 28	jsr $28de			jsr 	CLStructureCheck
.289f	ad da 0c	lda $0cda			lda 	structIndent
.28a2	10 05		bpl $28a9			bpl 	_CLNext
.28a4	a9 00		lda #$00			lda 	#0
.28a6	8d da 0c	sta $0cda			sta 	structIndent
.28a9					_CLNext:
.28a9	a0 00		ldy #$00			ldy 	#0 							; go to next line.
.28ab	b1 28		lda ($28),y			lda 	(codePtr),y
.28ad	18		clc				clc
.28ae	65 28		adc $28				adc 	codePtr
.28b0	85 28		sta $28				sta 	codePtr
.28b2	90 b9		bcc $286d			bcc 	_CLCheckLoop
.28b4	e6 29		inc $29				inc 	codePtr+1
.28b6	4c 6d 28	jmp $286d			jmp 	_CLCheckLoop
.28b9					_CLEnd:
.28b9	4c 6b 36	jmp $366b			jmp 	WarmStart 					; warm start after list.
.28bc					CLCompareLineTOS:
.28bc	a0 01		ldy #$01			ldy 	#1
.28be	b1 28		lda ($28),y			lda 	(codePtr),y
.28c0	55 50		eor $50,x			eor 	esInt0,x
.28c2	85 2a		sta $2a				sta 	temp0
.28c4	c8		iny				iny
.28c5	b1 28		lda ($28),y			lda 	(codePtr),y
.28c7	55 58		eor $58,x			eor 	esInt1,x
.28c9	05 2a		ora $2a				ora 	temp0
.28cb	f0 10		beq $28dd			beq 	_CLCLTExit
.28cd	88		dey				dey
.28ce	b1 28		lda ($28),y			lda 	(codePtr),y
.28d0	d5 50		cmp $50,x			cmp 	esInt0,x
.28d2	c8		iny				iny
.28d3	b1 28		lda ($28),y			lda 	(codePtr),y
.28d5	f5 58		sbc $58,x			sbc 	esInt1,x
.28d7	a9 ff		lda #$ff			lda 	#255
.28d9	90 02		bcc $28dd			bcc 	_CLCLTExit
.28db	a9 01		lda #$01			lda 	#1
.28dd					_CLCLTExit:
.28dd	60		rts				rts
.28de					CLStructureCheck:
.28de	85 2a		sta $2a				sta 	temp0
.28e0	a0 03		ldy #$03			ldy 	#3
.28e2					_CLSCLoop:
.28e2	b1 28		lda ($28),y			lda 	(codePtr),y 				; get and consume token.
.28e4	c8		iny				iny
.28e5	c9 80		cmp #$80			cmp 	#$80
.28e7	90 f9		bcc $28e2			bcc 	_CLSCLoop 					; $00-$7F just step over.
.28e9	f0 28		beq $2913			beq		_CLSCExit					; EOL return
.28eb	c9 86		cmp #$86			cmp 	#$86 						; special handler
.28ed	90 1e		bcc $290d			bcc 	_CLSCSpecial
.28ef	c9 99		cmp #$99			cmp 	#TOK_STRUCTST 				; check if structure changer.
.28f1	90 ef		bcc $28e2			bcc 	_CLSCLoop
.28f3	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST
.28f5	b0 eb		bcs $28e2			bcs 	_CLSCLoop
.28f7	aa		tax				tax 								; get adjustment
.28f8	bd 06 2e	lda $2e06,x			lda 	ELBinaryOperatorInfo-TOK_BINARYST,x
.28fb	c5 2a		cmp $2a				cmp 	temp0	 					; if what we're searching for
.28fd	d0 e3		bne $28e2			bne 	_CLSCLoop
.28ff	38		sec				sec
.2900	e9 81		sbc #$81			sbc 	#$81 						; convert to offset
.2902	0a		asl a				asl 	a 							; double indent step
.2903	18		clc				clc
.2904	6d da 0c	adc $0cda			adc 	structIndent 				; add to structure indent
.2907	8d da 0c	sta $0cda			sta 	structIndent
.290a	4c e2 28	jmp $28e2			jmp 	_CLSCLoop
.290d					_CLSCSpecial:
.290d	20 6a 27	jsr $276a			jsr 	ScannerSkipSpecial
.2910	4c e2 28	jmp $28e2			jmp 	_CLSCLoop
.2913					_CLSCExit:
.2913	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/system/loadsave.asm

.2914					CommandLoad:
.2914	20 3c 29	jsr $293c			jsr 	CLSParameters 					; get parameters for load.
.2917	08		php				php
.2918	a2 0e		ldx #$0e		ldx	#14
.291a	20 f6 14	jsr $14f6		jsr	deviceHandler
.291d	28		plp				plp
.291e	b0 08		bcs $2928			bcs 	_CLExit 						; if CC then load a program, so warm start.
.2920	20 de 27	jsr $27de			jsr 	CommandClear
.2923	a2 04		ldx #$04		ldx	#4
.2925	20 d6 1f	jsr $1fd6		jsr	interactionHandler
.2928					_CLExit
.2928	60		rts				rts
.2929					CommandSave:
.2929	20 3c 29	jsr $293c			jsr 	CLSParameters					; get parameters for save
.292c	90 08		bcc $2936			bcc 	_CSNoOverrideAddress
.292e	20 02 36	jsr $3602			jsr 	CheckComma 						; should be a comma.
.2931	a2 02		ldx #$02			ldx 	#2
.2933	20 ea 2e	jsr $2eea			jsr 	EvaluateInteger 				; get save end address.
.2936					_CSNoOverrideAddress:
.2936	a2 18		ldx #$18		ldx	#24
.2938	20 f6 14	jsr $14f6		jsr	deviceHandler
.293b	60		rts				rts
.293c					CLSParameters:
.293c	a2 00		ldx #$00			ldx 	#0 								; string
.293e	20 df 2e	jsr $2edf			jsr 	EvaluateString
.2941	e8		inx				inx 									; erase out +1 +2
.2942	20 82 35	jsr $3582			jsr 	MInt32False
.2945	e8		inx				inx
.2946	20 82 35	jsr $3582			jsr 	MInt32False
.2949	ad c8 0a	lda $0ac8			lda 	basePage 						; default start address.
.294c	85 51		sta $51				sta 	esInt0+1
.294e	ad c9 0a	lda $0ac9			lda 	basePage+1
.2951	85 59		sta $59				sta 	esInt1+1
.2953	ad ca 0a	lda $0aca			lda 	endProgram 						; default end address
.2956	85 52		sta $52				sta 	esInt0+2
.2958	ad cb 0a	lda $0acb			lda 	endProgram+1
.295b	85 5a		sta $5a				sta 	esInt1+2
.295d	b1 28		lda ($28),y			lda 	(codePtr),y 					; , following
.295f	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.2961	d0 08		bne $296b			bne 	_CLSDefault
.2963	c8		iny				iny 									; skip comma
.2964	a2 01		ldx #$01			ldx 	#1 								; get numeric value.
.2966	20 ea 2e	jsr $2eea			jsr 	EvaluateInteger
.2969	38		sec				sec
.296a	60		rts				rts
.296b					_CLSDefault:
.296b	18		clc				clc
.296c	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/system/new.asm

.296d					Command_New:
.296d					Command_XNew:
.296d	20 0b 2a	jsr $2a0b			jsr 	ResetCodeAddress 			; point to first line
.2970	a0 00		ldy #$00			ldy 	#0 							; and zap it.
.2972	98		tya				tya
.2973	91 28		sta ($28),y			sta 	(codePtr),y
.2975	20 de 27	jsr $27de			jsr 	CommandClear 				; clear everything down.
.2978	4c 34 23	jmp $2334			jmp 	CommandEND 					; do END code, as there's nothing to run.

;******  Return to file: main/main.asm


;******  Processing file: main/commands/system/run.asm

.0cdb					breakCounter:
>0cdb								.fill 	1
.0cdc					breakIncrement:
>0cdc								.fill 	1
.297b					Command_Run:
.297b					XCommand_Run:
.297b	a2 ff		ldx #$ff			ldx 	#$FF 						; reset the stack.
.297d	9a		txs				txs
.297e	20 05 2a	jsr $2a05			jsr 	BreakOn 					; turn break on
.2981	20 de 27	jsr $27de			jsr 	CommandClear 				; clear everything.
.2984	20 0b 2a	jsr $2a0b			jsr 	ResetCodeAddress 			; back to the start.
.2987					Command_RunFrom:
.2987	a0 03		ldy #$03			ldy 	#3 							; over offset/line #
.2989					CRNextInstruction:
.2989	64 3a		stz $3a				stz 	softMemAlloc+1
.298b	ad db 0c	lda $0cdb			lda 	breakCounter 				; check for break.
.298e	6d dc 0c	adc $0cdc			adc 	breakIncrement
.2991	8d db 0c	sta $0cdb			sta 	breakCounter
.2994	90 05		bcc $299b			bcc 	_CRNoChecks
.2996	a2 02		ldx #$02		ldx	#2
.2998	20 f6 14	jsr $14f6		jsr	deviceHandler
.299b					_CRNoChecks
.299b	b1 28		lda ($28),y			lda 	(codePtr),y 				; get next token.
.299d	10 1c		bpl $29bb			bpl 	_CRNotToken
.299f	c9 c9		cmp #$c9			cmp 	#TOK_TOKENS 				; if in the tokens then do that token.
.29a1	b0 0c		bcs $29af			bcs 	_CRExecute
.29a3	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST 				; unary is ignored.
.29a5	b0 71		bcs $2a18			bcs 	Unimplemented
.29a7	c9 99		cmp #$99			cmp 	#TOK_STRUCTST 				; execute structures.
.29a9	b0 04		bcs $29af			bcs 	_CRExecute
.29ab	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; if one of the system tokens $80-$85 do that
.29ad	b0 16		bcs $29c5			bcs 	_CRCheckIndirect 			; if in that unused range check for ! or ? or AND
.29af					_CRExecute:
.29af	c8		iny				iny 								; consume it.
.29b0	0a		asl a				asl 	a 							; double it, losing most significant bit.
.29b1	aa		tax				tax
.29b2	20 b8 29	jsr $29b8			jsr 	_CRRunRoutine 				; we want to do jsr (group0vectors,x)
.29b5	4c 89 29	jmp $2989			jmp 	CRNextInstruction
.29b8					_CRRunRoutine:
.29b8	7c 22 2a	jmp ($2a22,x)			jmp 	(Group0Vectors,x)
.29bb					_CRNotToken:
.29bb	c9 40		cmp #$40			cmp 	#$40 						; if 0-3F then it is a letter
.29bd	b0 59		bcs $2a18			bcs 	Unimplemented
.29bf					_CRDefaultLet:
.29bf	20 67 22	jsr $2267			jsr 	CommandLet 					; do the default, LET
.29c2	4c 89 29	jmp $2989			jmp 	CRNextInstruction
.29c5					_CRCheckIndirect:
.29c5	c9 86		cmp #$86			cmp 	#TKW_AND 					; AND (assembler)
.29c7	f0 0a		beq $29d3			beq 	_CRAndCommand
.29c9	c9 97		cmp #$97			cmp 	#TKW_PLING 					; !<term> =
.29cb	f0 f2		beq $29bf			beq 	_CRDefaultLet
.29cd	c9 98		cmp #$98			cmp 	#TKW_QMARK 					; ?<term> =
.29cf	f0 ee		beq $29bf			beq 	_CRDefaultLet
.29d1	d0 45		bne $2a18			bne 	Unimplemented
.29d3					_CRAndCommand:
.29d3	c8		iny				iny 								; skip over the AND token
.29d4	a9 95		lda #$95			lda 	#TKW_LPARENANDRPAREN 		; replace it with the pseudo-and
.29d6	20 f0 29	jsr $29f0			jsr 	CommandAssembler 			; do the assembler command
.29d9	4c 89 29	jmp $2989			jmp 	CRNextInstruction 			; and loop round.
.29dc					CommandShift1:
.29dc	b1 28		lda ($28),y			lda 	(codePtr),y 				; get shifted value
.29de	10 38		bpl $2a18			bpl 	Unimplemented 				; we have an error as this should not happen.
.29e0	c8		iny				iny 								; advance over it.
.29e1	c9 94		cmp #$94			cmp 	#TKA_GROUP1 				; is it an assembler constant ?
.29e3	b0 0b		bcs $29f0			bcs 	CommandAssembler
.29e5	0a		asl a				asl 	a 							; double into X
.29e6	aa		tax				tax
.29e7	7c e6 2a	jmp ($2ae6,x)			jmp 	(Group1Vectors-12,x) 		; and do the code.
.29ea					CommandShift2:
.29ea	a9 ff		lda #$ff			lda 	#$FF 						; $FF means command not unary function.
.29ec	20 60 18	jsr $1860		jsr	extensionHandler
.29ef	60		rts				rts
.29f0					CommandAssembler:
.29f0	a2 02		ldx #$02		ldx	#2
.29f2	20 b4 13	jsr $13b4		jsr	assemblerHandler
.29f5	60		rts				rts
.29f6					CommandAssemblerLabel:
.29f6	a2 04		ldx #$04		ldx	#4
.29f8	20 b4 13	jsr $13b4		jsr	assemblerHandler
.29fb	60		rts				rts
.29fc					CommandColon:
.29fc	60		rts				rts
.29fd					CommandBreak:
.29fd	20 e8 2e	jsr $2ee8			jsr 	EvaluateRootInteger
.2a00	20 a9 35	jsr $35a9			jsr 	MInt32Zero
.2a03	f0 02		beq $2a07			beq 	BreakOff
.2a05					BreakOn:
.2a05	a2 08		ldx #$08			ldx 	#8
.2a07					BreakOff:
.2a07	8e dc 0c	stx $0cdc			stx 	breakIncrement
.2a0a	60		rts				rts
.2a0b					ResetCodeAddress:
.2a0b	ad c8 0a	lda $0ac8			lda 	basePage 					; copy basePage to code Pointer
.2a0e	85 28		sta $28				sta 	codePtr
.2a10	ad c9 0a	lda $0ac9			lda 	basePage+1
.2a13	85 29		sta $29				sta 	codePtr+1
.2a15	a0 03		ldy #$03			ldy 	#3 							; offset after offset link and line#
.2a17	60		rts				rts
.2a18					Unimplemented:
.2a18	a2 01		ldx #$01			ldx 	#ErrorID_Missing
.2a1a	20 18 15	jsr $1518		jsr	errorHandler
.2a1d					TKErr01:
.2a1d					TKErr02:
.2a1d					TKErr03:
.2a1d					TKErr04:
.2a1d					TKErr05:
.2a1d					TKErr06:
.2a1d					TKErr07:
.2a1d					TKErr08:
.2a1d					TKErr09:
.2a1d					TKErr10:
.2a1d					TKErr11:
.2a1d					TKErr12:
.2a1d					TKErr13:
.2a1d					TKErr14:
.2a1d	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.2a1f	20 18 15	jsr $1518		jsr	errorHandler

;******  Processing file: main/commands/system/../../../generated/tokenvectors0.inc

.2a22					Group0Vectors:
>2a22	3a 23					.word	AdvanceNextLine          ; $80 [[eol]]
>2a24	dc 29					.word	CommandShift1            ; $81 [[sh1]]
>2a26	ea 29					.word	CommandShift2            ; $82 [[sh2]]
>2a28	1d 2a					.word	TKErr09                  ; $83 [[sh3]]
>2a2a	1d 2a					.word	TKErr10                  ; $84 [[fpc]]
>2a2c	1d 2a					.word	TKErr08                  ; $85 [[str]]
>2a2e	cf 2b					.word	AndHandler               ; $86 and
>2a30	bc 2b					.word	OrHandler                ; $87 or
>2a32	a9 2b					.word	XorHandler               ; $88 xor
>2a34	f1 2c					.word	CompareGreaterEq         ; $89 >=
>2a36	fb 2c					.word	CompareLessEq            ; $8a <=
>2a38	dd 2c					.word	CompareGreater           ; $8b >
>2a3a	d3 2c					.word	CompareLess              ; $8c <
>2a3c	c9 2c					.word	CompareEquals            ; $8d =
>2a3e	e7 2c					.word	CompareNotEquals         ; $8e <>
>2a40	3a 2b					.word	AddHandler               ; $8f +
>2a42	5d 2b					.word	SubHandler               ; $90 -
>2a44	f5 2b					.word	ShrHandler               ; $91 >>
>2a46	e2 2b					.word	ShlHandler               ; $92 <<
>2a48	70 2b					.word	MulHandler               ; $93 *
>2a4a	83 2b					.word	DivHandler               ; $94 /
>2a4c	96 2b					.word	ModHandler               ; $95 mod
>2a4e	2e 2c					.word	PowerHandler             ; $96 ^
>2a50	08 2c					.word	WordRefHandler           ; $97 !
>2a52	1b 2c					.word	ByteRefHandler           ; $98 ?
>2a54	f9 26					.word	Command_Repeat           ; $99 repeat
>2a56	a3 27					.word	Command_While            ; $9a while
>2a58	4e 23					.word	Command_FOR              ; $9b for
>2a5a	5d 24					.word	CommandIf                ; $9c if
>2a5c	1d 2a					.word	TKErr04                  ; $9d defproc
>2a5e	06 27					.word	Command_Until            ; $9e until
>2a60	c6 27					.word	Command_Wend             ; $9f wend
>2a62	af 23					.word	Command_NEXT             ; $a0 next
>2a64	1d 2a					.word	TKErr06                  ; $a1 then
>2a66	98 24					.word	Command_ENDIF            ; $a2 endif
>2a68	08 26					.word	ReturnProc               ; $a3 endproc
>2a6a	55 2e					.word	UnaryParenthesis         ; $a4 (
>2a6c	37 30					.word	UnaryLen                 ; $a5 len(
>2a6e	7b 30					.word	UnarySgn                 ; $a6 sgn(
>2a70	64 30					.word	UnaryAbs                 ; $a7 abs(
>2a72	d4 30					.word	Unary_Random             ; $a8 random(
>2a74	1e 31					.word	Unary_Page               ; $a9 page
>2a76	7e 35					.word	MInt32True               ; $aa true
>2a78	82 35					.word	MInt32False              ; $ab false
>2a7a	e9 30					.word	Unary_Min                ; $ac min(
>2a7c	ed 30					.word	Unary_Max                ; $ad max(
>2a7e	f6 31					.word	UnarySys                 ; $ae sys(
>2a80	9f 31					.word	UnaryTimer               ; $af timer(
>2a82	b4 2f					.word	EventFunction            ; $b0 event(
>2a84	c8 31					.word	UnaryGet                 ; $b1 get(
>2a86	b8 31					.word	UnaryInkey               ; $b2 inkey(
>2a88	6f 31					.word	UnaryAlloc               ; $b3 alloc(
>2a8a	2f 32					.word	ExecChr                  ; $b4 chr$(
>2a8c	5f 32					.word	ExecLeft                 ; $b5 left$(
>2a8e	7c 32					.word	ExecMid                  ; $b6 mid$(
>2a90	a4 32					.word	ExecRight                ; $b7 right$(
>2a92	36 2f					.word	Event_Str                ; $b8 str$(
>2a94	65 2f					.word	UnaryVal                 ; $b9 val(
>2a96	92 30					.word	UnaryPeek                ; $ba peek(
>2a98	98 30					.word	UnaryDeek                ; $bb deek(
>2a9a	9e 30					.word	UnaryLeek                ; $bc leek(
>2a9c	55 30					.word	UnaryAsc                 ; $bd asc(
>2a9e	49 31					.word	UnaryIntToFloat          ; $be int(
>2aa0	5c 31					.word	UnaryFloatToInt          ; $bf float(
>2aa2	68 2f					.word	UnaryIsVal               ; $c0 isval(
>2aa4	46 32					.word	ExecUpper                ; $c1 upper$(
>2aa6	43 32					.word	ExecLower                ; $c2 lower$(
>2aa8	2c 31					.word	UnaryReference           ; $c3 @
>2aaa	42 31					.word	UnaryComplement          ; $c4 ~
>2aac	3f 31					.word	UnaryHexMarker           ; $c5 &
>2aae	e1 31					.word	UnaryGetString           ; $c6 get$(
>2ab0	e7 31					.word	UnaryInkeyString         ; $c7 inkey$(
>2ab2	1e 32					.word	UnaryMem                 ; $c8 mem
>2ab4	1d 2a					.word	TKErr01                  ; $c9 )
>2ab6	fc 29					.word	CommandColon             ; $ca :
>2ab8	1d 2a					.word	TKErr02                  ; $cb ,
>2aba	1d 2a					.word	TKErr03                  ; $cc ;
>2abc	22 23					.word	Command_Rem2             ; $cd '
>2abe	1d 2a					.word	TKErr07                  ; $ce to
>2ac0	1d 2a					.word	TKErr05                  ; $cf step
>2ac2	9b 25					.word	CallProc                 ; $d0 proc
>2ac4	99 24					.word	CommandLocal             ; $d1 local
>2ac6	59 22					.word	Command_Dim              ; $d2 dim
>2ac8	22 23					.word	Command_Rem              ; $d3 rem
>2aca	67 22					.word	CommandLet               ; $d4 let
>2acc	a3 20					.word	Command_Input            ; $d5 input
>2ace	92 24					.word	Command_ELSE             ; $d6 else
>2ad0	2a 22					.word	Command_VDU              ; $d7 vdu
>2ad2	59 21					.word	Command_Print            ; $d8 print
>2ad4	0b 20					.word	CommandData              ; $d9 data
>2ad6	1d 2a					.word	TKErr13                  ; $da image
>2ad8	1d 2a					.word	TKErr12                  ; $db at
>2ada	1d 2a					.word	TKErr14                  ; $dc flip
>2adc	4b 22					.word	Command_Assert           ; $dd assert
>2ade	e5 22					.word	Command_Poke             ; $de poke
>2ae0	e9 22					.word	Command_Doke             ; $df doke
>2ae2	ed 22					.word	Command_Loke             ; $e0 loke
>2ae4	fa 21					.word	Command_Ink              ; $e1 ink
>2ae6	05 22					.word	Command_Paper            ; $e2 paper
>2ae8	f4 21					.word	Command_CLS              ; $e3 cls
>2aea	10 22					.word	Command_Locate           ; $e4 locate
>2aec	f6 29					.word	CommandAssemblerLabel    ; $e5 .
>2aee	1d 2a					.word	TKErr11                  ; $e6 #
>2af0	de 27					.word	CommandClear             ; $e7 clear

;******  Return to file: main/commands/system/run.asm


;******  Processing file: main/commands/system/../../../generated/tokenvectors1.inc

.2af2					Group1Vectors:
>2af2	14 29					.word	CommandLoad              ; $86 load
>2af4	29 29					.word	CommandSave              ; $87 save
>2af6	39 28					.word	CommandList              ; $88 list
>2af8	6d 29					.word	Command_New              ; $89 new
>2afa	fd 29					.word	CommandBreak             ; $8a break
>2afc	7b 29					.word	Command_Run              ; $8b run
>2afe	e0 1f					.word	CommandRead              ; $8c read
>2b00	14 20					.word	CommandRestore           ; $8d restore
>2b02	34 23					.word	CommandEnd               ; $8e end
>2b04	2f 23					.word	CommandStop              ; $8f stop
>2b06	37 23					.word	CommandXemu              ; $90 xemu
>2b08	71 20					.word	CommandGOTO              ; $91 goto
>2b0a	46 20					.word	CommandGOSUB             ; $92 gosub
>2b0c	59 20					.word	CommandRETURN            ; $93 return

;******  Return to file: main/commands/system/run.asm


;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/binary/binary.asm

.2b0e					BinaryProcess:
.2b0e	b5 48		lda $48,x			lda 	esType,x 					; or type bytes together and check bit 6.
.2b10	15 49		ora $49,x			ora 	esType+1,x 					; (the float bit)
.2b12	0a		asl a				asl 	a
.2b13	30 0e		bmi $2b23			bmi 	_BPStringType 				; if bit 6 is set, then string type, error
.2b15	18		clc				clc 								; return CC for integer
.2b16	29 02		and #$02			and 	#$02 						; $02 because of ASL A. check original bit 1.
.2b18	f0 08		beq $2b22			beq 	_BPExit 					; if both integer then return with CC.
.2b1a	20 28 2b	jsr $2b28			jsr 	BPMakeBothFloat 			; make both float
.2b1d	a9 01		lda #$01			lda 	#$01 						; set result type to float
.2b1f	95 48		sta $48,x			sta 	esType,x
.2b21	38		sec				sec 								; and return with carry set.
.2b22					_BPExit:
.2b22	60		rts				rts
.2b23					_BPStringType:
.2b23	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.2b25	20 18 15	jsr $1518		jsr	errorHandler
.2b28					BPMakeBothFloat:
.2b28	e8		inx				inx
.2b29	20 2d 2b	jsr $2b2d			jsr 	BPMakeFloat 				; one is a float, so we do both as floats.
.2b2c	ca		dex				dex
.2b2d					BPMakeFloat:
.2b2d	b5 48		lda $48,x			lda 	esType,x 					; get type bit which is in bit 0
.2b2f	4a		lsr a				lsr 	a
.2b30	b0 07		bcs $2b39			bcs 	_BPIsFloat 					; already a float if set.
.2b32	8a		txa				txa
.2b33	a2 1c		ldx #$1c		ldx	#28
.2b35	20 ea 1d	jsr $1dea		jsr	floatingpointHandler
.2b38	aa		tax				tax
.2b39					_BPIsFloat:
.2b39	60		rts				rts
.2b3a					AddHandler:
.2b3a	20 0b 2d	jsr $2d0b			jsr 	DereferenceTwo 				; dereference top two on stack.
.2b3d	b5 48		lda $48,x			lda 	esType,x 					; check two strings.
.2b3f	35 49		and $49,x			and 	esType+1,x
.2b41	29 40		and #$40			and 	#$40 						; if both have bit 6 set ... we have two strings
.2b43	d0 10		bne $2b55			bne 	_AHStringConcat				; concatenate strings.
.2b45	20 0e 2b	jsr $2b0e			jsr 	BinaryProcess 				; check to see if either is float
.2b48	b0 03		bcs $2b4d			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.2b4a	4c 66 34	jmp $3466			jmp 	MInt32Add 							; else do it as integer.
.2b4d					_IsFPOperation:
.2b4d	8a		txa				txa 								; call the relevant fp routine
.2b4e	a2 04		ldx #$04		ldx	#4
.2b50	20 ea 1d	jsr $1dea		jsr	floatingpointHandler
.2b53	aa		tax				tax
.2b54	60		rts				rts
.2b55					_AHStringConcat:
.2b55	8a		txa				txa 								; handled by the string module.
.2b56	a2 06		ldx #$06		ldx	#6
.2b58	20 2d 39	jsr $392d		jsr	stringHandler
.2b5b	aa		tax				tax
.2b5c	60		rts				rts
.2b5d					SubHandler:
.2b5d	20 0b 2d	jsr $2d0b			jsr 	DereferenceTwo
.2b60	20 0e 2b	jsr $2b0e			jsr 	BinaryProcess 				; check to see if either is float
.2b63	b0 03		bcs $2b68			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.2b65	4c 80 34	jmp $3480			jmp 	MInt32Sub 							; else do it as integer.
.2b68					_IsFPOperation:
.2b68	8a		txa				txa 								; call the relevant fp routine
.2b69	a2 12		ldx #$12		ldx	#18
.2b6b	20 ea 1d	jsr $1dea		jsr	floatingpointHandler
.2b6e	aa		tax				tax
.2b6f	60		rts				rts
.2b70					MulHandler:
.2b70	20 0b 2d	jsr $2d0b			jsr 	DereferenceTwo
.2b73	20 0e 2b	jsr $2b0e			jsr 	BinaryProcess 				; check to see if either is float
.2b76	b0 03		bcs $2b7b			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.2b78	4c 9a 34	jmp $349a			jmp 	MInt32Multiply 							; else do it as integer.
.2b7b					_IsFPOperation:
.2b7b	8a		txa				txa 								; call the relevant fp routine
.2b7c	a2 0c		ldx #$0c		ldx	#12
.2b7e	20 ea 1d	jsr $1dea		jsr	floatingpointHandler
.2b81	aa		tax				tax
.2b82	60		rts				rts
.2b83					DivHandler:
.2b83	20 0b 2d	jsr $2d0b			jsr 	DereferenceTwo
.2b86	20 0e 2b	jsr $2b0e			jsr 	BinaryProcess 				; check to see if either is float
.2b89	b0 03		bcs $2b8e			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.2b8b	4c 57 33	jmp $3357			jmp 	MInt32SDivide 							; else do it as integer.
.2b8e					_IsFPOperation:
.2b8e	8a		txa				txa 								; call the relevant fp routine
.2b8f	a2 08		ldx #$08		ldx	#8
.2b91	20 ea 1d	jsr $1dea		jsr	floatingpointHandler
.2b94	aa		tax				tax
.2b95	60		rts				rts
.2b96					ModHandler:
.2b96	20 0b 2d	jsr $2d0b			jsr 	DereferenceTwo
.2b99	20 0e 2b	jsr $2b0e			jsr 	BinaryProcess 				; check to see if either is float
.2b9c	b0 03		bcs $2ba1			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.2b9e	4c d5 33	jmp $33d5			jmp 	MInt32Modulus 							; else do it as integer.
.2ba1					_IsFPOperation:
.2ba1	8a		txa				txa 								; call the relevant fp routine
.2ba2	a2 0a		ldx #$0a		ldx	#10
.2ba4	20 ea 1d	jsr $1dea		jsr	floatingpointHandler
.2ba7	aa		tax				tax
.2ba8	60		rts				rts
.2ba9					XorHandler:
.2ba9	20 0b 2d	jsr $2d0b			jsr 	DereferenceTwo
.2bac	20 0e 2b	jsr $2b0e			jsr 	BinaryProcess 				; check to see if either is float
.2baf	b0 03		bcs $2bb4			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.2bb1	4c 09 33	jmp $3309			jmp 	MInt32Xor 							; else do it as integer.
.2bb4					_IsFPOperation:
.2bb4	8a		txa				txa 								; call the relevant fp routine
.2bb5	a2 0a		ldx #$0a		ldx	#10
.2bb7	20 ea 1d	jsr $1dea		jsr	floatingpointHandler
.2bba	aa		tax				tax
.2bbb	60		rts				rts
.2bbc					OrHandler:
.2bbc	20 0b 2d	jsr $2d0b			jsr 	DereferenceTwo
.2bbf	20 0e 2b	jsr $2b0e			jsr 	BinaryProcess 				; check to see if either is float
.2bc2	b0 03		bcs $2bc7			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.2bc4	4c f0 32	jmp $32f0			jmp 	MInt32Or 							; else do it as integer.
.2bc7					_IsFPOperation:
.2bc7	8a		txa				txa 								; call the relevant fp routine
.2bc8	a2 0a		ldx #$0a		ldx	#10
.2bca	20 ea 1d	jsr $1dea		jsr	floatingpointHandler
.2bcd	aa		tax				tax
.2bce	60		rts				rts
.2bcf					AndHandler:
.2bcf	20 0b 2d	jsr $2d0b			jsr 	DereferenceTwo
.2bd2	20 0e 2b	jsr $2b0e			jsr 	BinaryProcess 				; check to see if either is float
.2bd5	b0 03		bcs $2bda			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.2bd7	4c d7 32	jmp $32d7			jmp 	MInt32And 							; else do it as integer.
.2bda					_IsFPOperation:
.2bda	8a		txa				txa 								; call the relevant fp routine
.2bdb	a2 0a		ldx #$0a		ldx	#10
.2bdd	20 ea 1d	jsr $1dea		jsr	floatingpointHandler
.2be0	aa		tax				tax
.2be1	60		rts				rts
.2be2					ShlHandler:
.2be2	20 0b 2d	jsr $2d0b			jsr 	DereferenceTwo
.2be5	20 0e 2b	jsr $2b0e			jsr 	BinaryProcess 				; check to see if either is float
.2be8	b0 03		bcs $2bed			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.2bea	4c 63 2c	jmp $2c63			jmp 	Mint32ShiftLeftX 							; else do it as integer.
.2bed					_IsFPOperation:
.2bed	8a		txa				txa 								; call the relevant fp routine
.2bee	a2 0a		ldx #$0a		ldx	#10
.2bf0	20 ea 1d	jsr $1dea		jsr	floatingpointHandler
.2bf3	aa		tax				tax
.2bf4	60		rts				rts
.2bf5					ShrHandler:
.2bf5	20 0b 2d	jsr $2d0b			jsr 	DereferenceTwo
.2bf8	20 0e 2b	jsr $2b0e			jsr 	BinaryProcess 				; check to see if either is float
.2bfb	b0 03		bcs $2c00			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.2bfd	4c 66 2c	jmp $2c66			jmp 	MInt32ShiftRightX 							; else do it as integer.
.2c00					_IsFPOperation:
.2c00	8a		txa				txa 								; call the relevant fp routine
.2c01	a2 0a		ldx #$0a		ldx	#10
.2c03	20 ea 1d	jsr $1dea		jsr	floatingpointHandler
.2c06	aa		tax				tax
.2c07	60		rts				rts
.2c08					WordRefHandler:
.2c08	20 0b 2d	jsr $2d0b			jsr 	DereferenceTwo
.2c0b	20 0e 2b	jsr $2b0e			jsr 	BinaryProcess 				; check to see if either is float
.2c0e	b0 03		bcs $2c13			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.2c10	4c 55 2c	jmp $2c55			jmp 	MInt32WordIndirect 							; else do it as integer.
.2c13					_IsFPOperation:
.2c13	8a		txa				txa 								; call the relevant fp routine
.2c14	a2 0a		ldx #$0a		ldx	#10
.2c16	20 ea 1d	jsr $1dea		jsr	floatingpointHandler
.2c19	aa		tax				tax
.2c1a	60		rts				rts
.2c1b					ByteRefHandler:
.2c1b	20 0b 2d	jsr $2d0b			jsr 	DereferenceTwo
.2c1e	20 0e 2b	jsr $2b0e			jsr 	BinaryProcess 				; check to see if either is float
.2c21	b0 03		bcs $2c26			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.2c23	4c 59 2c	jmp $2c59			jmp 	MInt32ByteIndirect 							; else do it as integer.
.2c26					_IsFPOperation:
.2c26	8a		txa				txa 								; call the relevant fp routine
.2c27	a2 0a		ldx #$0a		ldx	#10
.2c29	20 ea 1d	jsr $1dea		jsr	floatingpointHandler
.2c2c	aa		tax				tax
.2c2d	60		rts				rts
.2c2e					PowerHandler:
.2c2e	20 0b 2d	jsr $2d0b			jsr 	DereferenceTwo
.2c31	20 0e 2b	jsr $2b0e			jsr 	BinaryProcess 				; check to see if either is float
.2c34	b0 03		bcs $2c39			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.2c36	4c 41 2c	jmp $2c41			jmp 	PowerInteger 							; else do it as integer.
.2c39					_IsFPOperation:
.2c39	8a		txa				txa 								; call the relevant fp routine
.2c3a	a2 18		ldx #$18		ldx	#24
.2c3c	20 ea 1d	jsr $1dea		jsr	floatingpointHandler
.2c3f	aa		tax				tax
.2c40	60		rts				rts
.2c41					PowerInteger:
.2c41	20 28 2b	jsr $2b28			jsr 	BPMakeBothFloat				; make them float.
.2c44	8a		txa				txa
.2c45	a2 18		ldx #$18		ldx	#24
.2c47	20 ea 1d	jsr $1dea		jsr	floatingpointHandler
.2c4a	a2 14		ldx #$14		ldx	#20
.2c4c	20 ea 1d	jsr $1dea		jsr	floatingpointHandler
.2c4f	aa		tax				tax
.2c50	a9 00		lda #$00			lda 	#0 							; make type integer
.2c52	95 48		sta $48,x			sta 	esType,x
.2c54	60		rts				rts
.2c55					Mint32WordIndirect:
.2c55	a9 80		lda #$80	 		lda 	#$80 				 		; word reference type (bit 7 set)
.2c57	d0 02		bne $2c5b			bne 	Min32Indirect
.2c59					Mint32ByteIndirect:
.2c59	a9 a0		lda #$a0			lda 	#$A0 						; byte reference type (bit 7, bit 5 set)
.2c5b					Min32Indirect:
.2c5b	48		pha				pha 								; save the indirection
.2c5c	20 66 34	jsr $3466			jsr 	MInt32Add 					; add a!b a?b
.2c5f	68		pla				pla 								; and set the type to reference.
.2c60	95 48		sta $48,x			sta 	esType,x 	 				; so a!b => a+b and it's a reference....
.2c62	60		rts				rts
.2c63					Mint32ShiftLeftX:
.2c63	18		clc				clc 								; CC shift left
.2c64	90 01		bcc $2c67			bcc 	Mint32Shift
.2c66					Mint32ShiftRightX:
.2c66	38		sec				sec 								; CS shift right
.2c67					Mint32Shift:
.2c67	08		php				php 								; save carry flag on stack.
.2c68	b5 59		lda $59,x			lda 	esInt1+1,x 					; if shift >= 32 then it is zero.
.2c6a	15 61		ora $61,x			ora 	esInt2+1,x
.2c6c	15 69		ora $69,x			ora 	esInt3+1,x
.2c6e	d0 1e		bne $2c8e			bne 	_MShiftZero
.2c70	b5 51		lda $51,x			lda 	esInt0+1,x
.2c72	c9 20		cmp #$20			cmp 	#32
.2c74	b0 18		bcs $2c8e			bcs 	_MShiftZero
.2c76					_MShiftLoop:
.2c76	b5 51		lda $51,x			lda 	esInt0+1,x 					; check count is zero
.2c78	f0 12		beq $2c8c			beq 	_MShiftExit
.2c7a	d6 51		dec $51,x			dec 	esInt0+1,x
.2c7c	28		plp				plp 								; restore and save carry
.2c7d	08		php				php
.2c7e	90 06		bcc $2c86			bcc 	_MShiftLeft 				; and shift left/right accordingly.
.2c80	20 a0 35	jsr $35a0			jsr 	Mint32ShiftRight
.2c83	4c 76 2c	jmp $2c76			jmp 	_MShiftLoop
.2c86					_MShiftLeft:
.2c86	20 97 35	jsr $3597			jsr 	Mint32ShiftLeft
.2c89	4c 76 2c	jmp $2c76			jmp 	_MShiftLoop
.2c8c					_MShiftExit:
.2c8c	28		plp				plp	 								; throw saved carry and exit
.2c8d	60		rts				rts
.2c8e					_MShiftZero:
.2c8e	4c 82 35	jmp $3582			jmp 	MInt32False 				; return 0 as shifted >= 32 times.

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/binary/compare.asm

.2c91					PerformComparison:
.2c91	20 0b 2d	jsr $2d0b			jsr 	DereferenceTwo 				; make both values.
.2c94	b5 48		lda $48,x			lda 	esType,x 					; check for two strings.
.2c96	35 49		and $49,x			and 	esType+1,x
.2c98	0a		asl a				asl 	a 							; bit 7 set if both bit 6s were set.
.2c99	30 1d		bmi $2cb8			bmi 	_PCIsString
.2c9b	b5 48		lda $48,x			lda 	esType,x 					; check either is floating point.
.2c9d	15 49		ora $49,x			ora 	esType+1,x
.2c9f	0a		asl a				asl 	a 							; shift bit 6 (string) to bit 7, mixed types
.2ca0	30 22		bmi $2cc4			bmi 	_PCError
.2ca2	29 02		and #$02			and 	#$02 						; because of ASL, check type in bit 0
.2ca4	f0 0f		beq $2cb5			beq 	_PCIsInteger 				; if not two integers, e.g. 1 of the bits is set
.2ca6	20 28 2b	jsr $2b28			jsr 	BPMakeBothFloat 			; make both float
.2ca9	8a		txa				txa
.2caa	a2 06		ldx #$06		ldx	#6
.2cac	20 ea 1d	jsr $1dea		jsr	floatingpointHandler
.2caf	86 32		stx $32				stx 	tempShort 					; save result
.2cb1	aa		tax				tax
.2cb2	a5 32		lda $32				lda 	tempShort
.2cb4	60		rts				rts
.2cb5					_PCIsInteger:
.2cb5	4c 22 33	jmp $3322			jmp 	MInt32Compare
.2cb8					_PCIsString:
.2cb8	8a		txa				txa 								; A has SP
.2cb9	a2 0a		ldx #$0a		ldx	#10
.2cbb	20 2d 39	jsr $392d		jsr	stringHandler
.2cbe	86 32		stx $32				stx 	tempShort 					; save result
.2cc0	aa		tax				tax 								; put SP back in X and get result.
.2cc1	a5 32		lda $32				lda 	tempShort
.2cc3	60		rts				rts
.2cc4					_PCError:
.2cc4	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.2cc6	20 18 15	jsr $1518		jsr	errorHandler
.2cc9					CompareEquals:
.2cc9	20 91 2c	jsr $2c91			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.2ccc	c9 00		cmp #$00			cmp 	#$00 						; and we do something if it is = or <> a value.
.2cce	f0 35		beq $2d05			beq  	CompareTrue
.2cd0	4c 08 2d	jmp $2d08			jmp 	CompareFalse
.2cd3					CompareLess:
.2cd3	20 91 2c	jsr $2c91			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.2cd6	c9 ff		cmp #$ff			cmp 	#$FF 						; and we do something if it is = or <> a value.
.2cd8	f0 2b		beq $2d05			beq  	CompareTrue
.2cda	4c 08 2d	jmp $2d08			jmp 	CompareFalse
.2cdd					CompareGreater:
.2cdd	20 91 2c	jsr $2c91			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.2ce0	c9 01		cmp #$01			cmp 	#$01 						; and we do something if it is = or <> a value.
.2ce2	f0 21		beq $2d05			beq  	CompareTrue
.2ce4	4c 08 2d	jmp $2d08			jmp 	CompareFalse
.2ce7					CompareNotEquals:
.2ce7	20 91 2c	jsr $2c91			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.2cea	c9 00		cmp #$00			cmp 	#$00 						; and we do something if it is = or <> a value.
.2cec	d0 17		bne $2d05			bne  	CompareTrue
.2cee	4c 08 2d	jmp $2d08			jmp 	CompareFalse
.2cf1					CompareGreaterEq:
.2cf1	20 91 2c	jsr $2c91			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.2cf4	c9 ff		cmp #$ff			cmp 	#$FF 						; and we do something if it is = or <> a value.
.2cf6	d0 0d		bne $2d05			bne  	CompareTrue
.2cf8	4c 08 2d	jmp $2d08			jmp 	CompareFalse
.2cfb					CompareLessEq:
.2cfb	20 91 2c	jsr $2c91			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.2cfe	c9 01		cmp #$01			cmp 	#$01 						; and we do something if it is = or <> a value.
.2d00	d0 03		bne $2d05			bne  	CompareTrue
.2d02	4c 08 2d	jmp $2d08			jmp 	CompareFalse
.2d05					CompareTrue:
.2d05	4c 7e 35	jmp $357e			jmp 	MInt32True
.2d08					CompareFalse:
.2d08	4c 82 35	jmp $3582			jmp 	MInt32False

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/dereference.asm

.2d0b					DereferenceTwo:
.2d0b	e8		inx				inx
.2d0c	20 10 2d	jsr $2d10			jsr 	DereferenceOne
.2d0f	ca		dex				dex
.2d10					DereferenceOne:
.2d10	b5 48		lda $48,x			lda 	esType,x
.2d12	10 3d		bpl $2d51			bpl 	_DRNotReference 			; is it a reference ? if not, we don't need to do anything
.2d14	4a		lsr a				lsr 	a 							; do float dereference if bit 0 set.
.2d15	b0 3b		bcs $2d52			bcs 	_DRFloatDeReference
.2d17	98		tya				tya
.2d18	48		pha				pha
.2d19	b5 50		lda $50,x			lda 	esInt0,x 					; copy address to temp0
.2d1b	85 2a		sta $2a				sta 	temp0
.2d1d	b5 58		lda $58,x			lda 	esInt1,x
.2d1f	85 2b		sta $2b				sta 	temp0+1
.2d21	a9 00		lda #$00			lda 	#0 							; clear esInt1..3
.2d23	95 58		sta $58,x			sta 	esInt1,x
.2d25	95 60		sta $60,x			sta 	esInt2,x
.2d27	95 68		sta $68,x			sta 	esInt3,x
.2d29	b5 48		lda $48,x			lda 	esType,x 					; get the type byte.
.2d2b	29 60		and #$60			and 	#$60 						; get string flag ($40) and byte flag ($20)
.2d2d	0a		asl a				asl 	a 							; now string ($80) byte ($40)
.2d2e	30 0d		bmi $2d3d			bmi 	_DeRefString 				; string, 2 bytes only
.2d30	d0 11		bne $2d43			bne 	_DeRefByte 					; byte 1 byte only
.2d32					_DeRefLong:
.2d32	a0 03		ldy #$03			ldy 	#3
.2d34	b1 2a		lda ($2a),y			lda 	(temp0),y
.2d36	95 68		sta $68,x			sta 	esInt3,x
.2d38	88		dey				dey
.2d39	b1 2a		lda ($2a),y			lda 	(temp0),y
.2d3b	95 60		sta $60,x			sta 	esInt2,x
.2d3d					_DeRefString:
.2d3d	a0 01		ldy #$01			ldy 	#1
.2d3f	b1 2a		lda ($2a),y			lda 	(temp0),y
.2d41	95 58		sta $58,x			sta 	esInt1,x
.2d43					_DeRefByte:
.2d43	a0 00		ldy #$00			ldy 	#0
.2d45	b1 2a		lda ($2a),y			lda 	(temp0),y
.2d47	95 50		sta $50,x			sta 	esInt0,x
.2d49	b5 48		lda $48,x			lda 	esType,x 					; clear byte and deref bits.
.2d4b	29 40		and #$40			and 	#$40
.2d4d	95 48		sta $48,x			sta 	esType,x
.2d4f	68		pla				pla
.2d50	a8		tay				tay
.2d51					_DRNotReference
.2d51	60		rts				rts
.2d52					_DRFloatDereference:
.2d52	20 dc 22	jsr $22dc			jsr 	TOSToTemp0 					; address to deref in temp0
.2d55	8a		txa				txa
.2d56	a2 1e		ldx #$1e		ldx	#30
.2d58	20 ea 1d	jsr $1dea		jsr	floatingpointHandler
.2d5b	aa		tax				tax
.2d5c	a9 01		lda #$01			lda 	#$01 						; type to FP (float)
.2d5e	95 48		sta $48,x			sta 	esType,x
.2d60	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/evaluate.asm

.2d61					EvaluateLevel:
.2d61	e0 08		cpx #$08			cpx 	#StackSize 					; check stack overflow
.2d63	b0 1e		bcs $2d83			bcs 	_ELStack
.2d65	48		pha				pha 								; save precedence level.
.2d66	a9 00		lda #$00			lda 	#0 							; zero the current stack level.
.2d68	95 50		sta $50,x			sta 	esInt0,x
.2d6a	95 58		sta $58,x			sta 	esInt1,x
.2d6c	95 60		sta $60,x			sta 	esInt2,x
.2d6e	95 68		sta $68,x			sta 	esInt3,x
.2d70	95 48		sta $48,x			sta 	esType,x 					; zero the type (integer value)
.2d72	b1 28		lda ($28),y			lda 	(codePtr),y	 				; look at first token/character
.2d74	30 26		bmi $2d9c			bmi 	_ELIsToken 					; if -ve could be string, float, or unary function.
.2d76	0a		asl a				asl 	a 							; if 00-3F then will now be PL and it's a variable.
.2d77	30 0f		bmi $2d88			bmi 	_ELIsConstant 				; 40-7F will be -ve and that's an integer constant.
.2d79	8a		txa				txa 								; stack level in X
.2d7a	a2 02		ldx #$02		ldx	#2
.2d7c	20 3d 45	jsr $453d		jsr	variableHandler
.2d7f	aa		tax				tax
.2d80	4c c5 2d	jmp $2dc5			jmp		_ELHasTerm
.2d83					_ELStack:
.2d83	a2 23		ldx #$23			ldx 	#ErrorID_NumStack
.2d85	20 18 15	jsr $1518		jsr	errorHandler
.2d88					_ELIsConstant:
.2d88	4a		lsr a				lsr 	a 							; get the value back
.2d89	29 3f		and #$3f			and 	#$3F 						; force into range 0-63
.2d8b	95 50		sta $50,x			sta 	esInt0,x 					; and put in LSB.
.2d8d					_ELCheckNext:
.2d8d	c8		iny				iny 								; look at next
.2d8e	b1 28		lda ($28),y			lda 	(codePtr),y
.2d90	49 40		eor #$40			eor 	#$40 						; shift around so 40-7F => 00-3F
.2d92	c9 40		cmp #$40			cmp 	#$40 						; out of range ?
.2d94	b0 2f		bcs $2dc5			bcs 	_ELHasTerm 					; done getting the constant.
.2d96	20 5e 2e	jsr $2e5e			jsr 	ELShiftByteIn 				; shift byte into position.
.2d99	4c 8d 2d	jmp $2d8d			jmp 	_ELCheckNext
.2d9c					_ELIsToken:
.2d9c	c9 85		cmp #$85			cmp 	#TOK_STR 					; handle strings.
.2d9e	f0 0f		beq $2daf			beq 	_ELIsString
.2da0	c9 84		cmp #$84			cmp 	#TOK_FPC 					; if no, then check unary.
.2da2	d0 5f		bne $2e03			bne 	_ELCheckUnary
.2da4	8a		txa				txa 								; put X into A
.2da5	c8		iny				iny 								; skip over the float marker
.2da6	a2 1a		ldx #$1a		ldx	#26
.2da8	20 ea 1d	jsr $1dea		jsr	floatingpointHandler
.2dab	aa		tax				tax 								; restore X
.2dac	4c c5 2d	jmp $2dc5			jmp 	_ELHasTerm
.2daf					_ELIsString:
.2daf	98		tya				tya 								; address of string is codePtr+y+1
.2db0	38		sec				sec
.2db1	65 28		adc $28				adc 	codePtr
.2db3	95 50		sta $50,x			sta 	esInt0,x
.2db5	a5 29		lda $29				lda 	codePtr+1
.2db7	69 00		adc #$00			adc 	#0
.2db9	95 58		sta $58,x			sta 	esInt1,x
.2dbb	a9 40		lda #$40			lda 	#$40 						; set type to string value
.2dbd	95 48		sta $48,x			sta 	esType,x
.2dbf	c8		iny				iny 								; skip over string.
.2dc0	98		tya				tya
.2dc1	38		sec				sec									; +1 for the length itself.
.2dc2	71 28		adc ($28),y			adc 	(codePtr),y
.2dc4	a8		tay				tay 								; and fall through to term loop code.
.2dc5					_ELHasTerm:
.2dc5	b1 28		lda ($28),y			lda 	(codePtr),y
.2dc7	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; check in the correct range for binary tokens.
.2dc9	90 04		bcc $2dcf			bcc 	_ELPopExit
.2dcb	c9 99		cmp #$99			cmp 	#TOK_STRUCTST
.2dcd	90 02		bcc $2dd1			bcc 	_ELHasBinaryTerm
.2dcf					_ELPopExit:
.2dcf	68		pla				pla
.2dd0					_ELExit:
.2dd0	60		rts				rts
.2dd1					_ELHasBinaryTerm:
.2dd1	84 32		sty $32				sty 	tempShort 					; save position
.2dd3	a8		tay				tay 								; use token as an index and get the precedence.
.2dd4	b9 06 2e	lda $2e06,y			lda 	ELBinaryOperatorInfo-TOK_BINARYST,y
.2dd7	a4 32		ldy $32				ldy 	tempShort 					; restore Y
.2dd9	85 32		sta $32				sta 	tempShort 					; save precedence in memory.
.2ddb	68		pla				pla 								; restore current level.
.2ddc	c5 32		cmp $32				cmp 	tempShort 					; if current >= operator then exit
.2dde	b0 f0		bcs $2dd0			bcs 	_ELExit
.2de0	48		pha				pha 								; save current level back on the stack.
.2de1	b1 28		lda ($28),y			lda 	(codePtr),y 				; save the binary operator on the stack and skip it.
.2de3	48		pha				pha
.2de4	c8		iny				iny
.2de5	e8		inx				inx 								; calculate the RHS at the operator precedence.
.2de6	a5 32		lda $32				lda 	tempShort
.2de8	20 61 2d	jsr $2d61			jsr 	EvaluateLevel
.2deb	ca		dex				dex
.2dec	68		pla				pla 								; get the operator back out.
.2ded					_ELExecuteA:
.2ded	86 32		stx $32				stx 	tempShort 					; upload the vectors. Would be nice to use jmp (aaaa,x)
.2def	0a		asl a				asl 	a 							; but not practical. May use push/rts later.
.2df0	aa		tax				tax
.2df1	bd 22 2a	lda $2a22,x			lda 	Group0Vectors,x
.2df4	85 2a		sta $2a				sta 	temp0
.2df6	bd 23 2a	lda $2a23,x			lda 	Group0Vectors+1,x
.2df9	85 2b		sta $2b				sta 	temp0+1
.2dfb	a6 32		ldx $32				ldx 	tempShort
.2dfd	20 4a 2e	jsr $2e4a			jsr 	_ELCallTemp0
.2e00	4c c5 2d	jmp $2dc5			jmp 	_ELHasTerm 					; and loop back round.
.2e03					_ELCheckUnary:
.2e03	c8		iny				iny 								; skip over token.
.2e04	c9 90		cmp #$90			cmp 	#TKW_MINUS 					; is it - term
.2e06	f0 19		beq $2e21			beq 	_ELMinus
.2e08	c9 97		cmp #$97			cmp 	#TKW_PLING 					; is it ! or ? term
.2e0a	f0 2c		beq $2e38			beq 	_ELIndirect
.2e0c	c9 98		cmp #$98			cmp 	#TKW_QMARK
.2e0e	f0 28		beq $2e38			beq 	_ELIndirect
.2e10	c9 83		cmp #$83			cmp 	#TOK_SHIFT3 				; is it the unary extension.
.2e12	f0 39		beq $2e4d			beq 	_ELExtension
.2e14	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST 				; must be TOK_UNARYST ... TOK_TOKENS
.2e16	90 04		bcc $2e1c			bcc 	_ELUSyntax
.2e18	c9 c9		cmp #$c9			cmp 	#TOK_TOKENS
.2e1a	90 d1		bcc $2ded			bcc 	_ELExecuteA 				; if so do that token.
.2e1c					_ELUSyntax:
.2e1c	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.2e1e	20 18 15	jsr $1518		jsr	errorHandler
.2e21					_ELMinus:
.2e21	20 b3 2e	jsr $2eb3			jsr 	EvaluateNumericTerm 		; get a number to negate.
.2e24	b5 48		lda $48,x			lda 	esType,x 					; is it integer
.2e26	f0 0a		beq $2e32			beq 	_ELMinusInteger
.2e28	8a		txa				txa
.2e29	a2 0e		ldx #$0e		ldx	#14
.2e2b	20 ea 1d	jsr $1dea		jsr	floatingpointHandler
.2e2e	aa		tax				tax
.2e2f	4c c5 2d	jmp $2dc5			jmp 	_ELHasTerm
.2e32					_ELMinusInteger:
.2e32	20 3c 35	jsr $353c			jsr 	MInt32Negate 				; do int negate
.2e35	4c c5 2d	jmp $2dc5			jmp 	_ELHasTerm
.2e38					_ELIndirect:
.2e38	48		pha				pha 								; save what we want (TKW_QMARK TWK_PLING)
.2e39	20 bc 2e	jsr $2ebc			jsr 	EvaluateIntegerTerm 		; integer address
.2e3c	68		pla				pla
.2e3d	49 97		eor #$97			eor 	#TKW_PLING 					; now $00 if !
.2e3f	f0 02		beq $2e43			beq 	_ELHaveModifier
.2e41	a9 20		lda #$20			lda 	#$20 						; now $00 if !, $20 if ?
.2e43					_ELHaveModifier:
.2e43	09 80		ora #$80			ora 	#$80						; make it the appropriate reference.
.2e45	95 48		sta $48,x			sta 	esType,x 					; $80 for ! $A0 for ?
.2e47	4c c5 2d	jmp $2dc5			jmp 	_ELHasTerm
.2e4a					_ELCallTemp0:
.2e4a	6c 2a 00	jmp ($002a)			jmp 	(temp0)
.2e4d					_ELExtension:
.2e4d	8a		txa				txa 								; stack pos in A
.2e4e	20 60 18	jsr $1860		jsr	extensionHandler
.2e51	aa		tax				tax 								; restore stack
.2e52	4c c5 2d	jmp $2dc5			jmp 	_ELHasTerm
.2e55					UnaryParenthesis:
.2e55	a9 00		lda #$00			lda 	#0 							; ( is a unary function ....
.2e57	20 61 2d	jsr $2d61			jsr 	EvaluateLevel
.2e5a	20 f5 35	jsr $35f5			jsr 	CheckRightParen 			; check for )
.2e5d	60		rts				rts
.2e5e					ELShiftByteIn:
.2e5e	48		pha				pha 								; save bits to shift in.
.2e5f	b5 68		lda $68,x			lda 	esInt3,x 					; save top most byte
.2e61	48		pha				pha
.2e62	b5 60		lda $60,x			lda 	esInt2,x 					; shift everything left 8 bits
.2e64	95 68		sta $68,x			sta 	esInt3,x
.2e66	b5 58		lda $58,x			lda 	esInt1,x
.2e68	95 60		sta $60,x			sta 	esInt2,x
.2e6a	b5 50		lda $50,x			lda 	esInt0,x
.2e6c	95 58		sta $58,x			sta 	esInt1,x
.2e6e	a9 00		lda #$00			lda 	#0
.2e70	95 50		sta $50,x			sta 	esInt0,x
.2e72	68		pla				pla 								; now A:TOS is a 5 byte register, shift right twice.
.2e73	29 03		and #$03			and 	#3 							; only want lower 2 bits
.2e75	09 04		ora #$04			ora 	#4  						; set bit 2 - when 1 we are done
.2e77					_ELShiftLoop:
.2e77	4a		lsr a				lsr 	a
.2e78	76 68		ror $68,x			ror 	esInt3,x
.2e7a	76 60		ror $60,x			ror 	esInt2,x
.2e7c	76 58		ror $58,x			ror 	esInt1,x
.2e7e	76 50		ror $50,x			ror 	esInt0,x
.2e80	c9 01		cmp #$01			cmp 	#1
.2e82	d0 f3		bne $2e77			bne 	_ELShiftLoop
.2e84	68		pla				pla 								; get original 6 bit value and OR in.
.2e85	29 3f		and #$3f			and 	#$3F
.2e87	15 50		ora $50,x			ora 	esInt0,x
.2e89	95 50		sta $50,x			sta 	esInt0,x
.2e8b	60		rts				rts
.2e8c					ELBinaryOperatorInfo:

;******  Processing file: main/evaluate/../../generated/binarystructinfo.inc

>2e8c	01					.byte	$01			; $86 and
>2e8d	01					.byte	$01			; $87 or
>2e8e	01					.byte	$01			; $88 xor
>2e8f	02					.byte	$02			; $89 >=
>2e90	02					.byte	$02			; $8a <=
>2e91	02					.byte	$02			; $8b >
>2e92	02					.byte	$02			; $8c <
>2e93	02					.byte	$02			; $8d =
>2e94	02					.byte	$02			; $8e <>
>2e95	03					.byte	$03			; $8f +
>2e96	03					.byte	$03			; $90 -
>2e97	04					.byte	$04			; $91 >>
>2e98	04					.byte	$04			; $92 <<
>2e99	04					.byte	$04			; $93 *
>2e9a	04					.byte	$04			; $94 /
>2e9b	04					.byte	$04			; $95 mod
>2e9c	05					.byte	$05			; $96 ^
>2e9d	06					.byte	$06			; $97 !
>2e9e	06					.byte	$06			; $98 ?
>2e9f	82					.byte	$82			; $99 repeat
>2ea0	82					.byte	$82			; $9a while
>2ea1	82					.byte	$82			; $9b for
>2ea2	82					.byte	$82			; $9c if
>2ea3	82					.byte	$82			; $9d defproc
>2ea4	80					.byte	$80			; $9e until
>2ea5	80					.byte	$80			; $9f wend
>2ea6	80					.byte	$80			; $a0 next
>2ea7	80					.byte	$80			; $a1 then
>2ea8	80					.byte	$80			; $a2 endif
>2ea9	80					.byte	$80			; $a3 endproc

;******  Return to file: main/evaluate/evaluate.asm


;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/support.asm

.2eaa					EvaluateTerm:
.2eaa	a9 0f		lda #$0f			lda 	#15 						; no binary operator has this high a precedence.
.2eac	20 61 2d	jsr $2d61			jsr 	EvaluateLevel
.2eaf	20 10 2d	jsr $2d10			jsr 	DereferenceOne
.2eb2	60		rts				rts
.2eb3					EvaluateNumericTerm:
.2eb3	20 aa 2e	jsr $2eaa			jsr 	EvaluateTerm
.2eb6	b5 48		lda $48,x			lda 	esType,x
.2eb8	0a		asl a				asl 	a 							; see if it's a string.
.2eb9	30 09		bmi $2ec4			bmi 	ENTType
.2ebb	60		rts				rts
.2ebc					EvaluateIntegerTerm:
.2ebc	20 aa 2e	jsr $2eaa			jsr 	EvaluateTerm
.2ebf	b5 48		lda $48,x			lda 	esType,x
.2ec1	d0 01		bne $2ec4			bne 	ENTType
.2ec3	60		rts				rts
.2ec4					ENTType:
.2ec4	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.2ec6	20 18 15	jsr $1518		jsr	errorHandler
.2ec9					EvaluateRoot:
.2ec9	a2 00		ldx #$00			ldx 	#0
.2ecb					Evaluate:
.2ecb	a9 00		lda #$00			lda 	#0
.2ecd	20 61 2d	jsr $2d61			jsr 	EvaluateLevel
.2ed0	20 10 2d	jsr $2d10			jsr 	DereferenceOne
.2ed3	60		rts				rts
.2ed4					EvaluateNumeric:
.2ed4	20 cb 2e	jsr $2ecb			jsr 	Evaluate
.2ed7	b5 48		lda $48,x			lda 	esType,x
.2ed9	0a		asl a				asl 	a 							; see if it's a string.
.2eda	30 e8		bmi $2ec4			bmi 	ENTType
.2edc	4a		lsr a				lsr 	a 							; shift float flag into carry.
.2edd	4a		lsr a				lsr 	a
.2ede	60		rts				rts
.2edf					EvaluateString:
.2edf	20 cb 2e	jsr $2ecb			jsr 	Evaluate
.2ee2	b5 48		lda $48,x			lda 	esType,x
.2ee4	0a		asl a				asl 	a 							; see if it's a string.
.2ee5	10 dd		bpl $2ec4			bpl 	ENTType
.2ee7	60		rts				rts
.2ee8					EvaluateRootInteger:
.2ee8	a2 00		ldx #$00			ldx 	#0
.2eea					EvaluateInteger:
.2eea	20 cb 2e	jsr $2ecb			jsr 	Evaluate
.2eed	b5 48		lda $48,x			lda 	esType,x
.2eef	d0 d3		bne $2ec4			bne 	ENTType
.2ef1	60		rts				rts
.2ef2					EvaluateSmallInteger:
.2ef2	20 ea 2e	jsr $2eea			jsr 	EvaluateInteger
.2ef5	b5 58		lda $58,x			lda 	esInt1,x
.2ef7	15 60		ora $60,x			ora 	esInt2,x
.2ef9	15 68		ora $68,x			ora 	esInt3,x
.2efb	d0 03		bne $2f00			bne 	_ESIValue
.2efd	b5 50		lda $50,x			lda 	esInt0,x
.2eff	60		rts				rts
.2f00					_ESIValue:
.2f00	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.2f02	20 18 15	jsr $1518		jsr	errorHandler
.2f05					LinkEvaluate:
.2f05	aa		tax				tax
.2f06	20 cb 2e	jsr $2ecb			jsr 	Evaluate
.2f09	8a		txa				txa
.2f0a	60		rts				rts
.2f0b					LinkEvaluateTerm:
.2f0b	aa		tax				tax
.2f0c	20 aa 2e	jsr $2eaa			jsr 	EvaluateTerm
.2f0f	8a		txa				txa
.2f10	60		rts				rts
.2f11					LinkEvaluateInteger:
.2f11	aa		tax				tax
.2f12	20 ea 2e	jsr $2eea			jsr 	EvaluateInteger
.2f15	8a		txa				txa
.2f16	60		rts				rts
.2f17					LinkEvaluateString:
.2f17	aa		tax				tax
.2f18	20 df 2e	jsr $2edf			jsr 	EvaluateString
.2f1b	8a		txa				txa
.2f1c	60		rts				rts
.2f1d					LinkEvaluateSmallInt:
.2f1d	aa		tax				tax
.2f1e	20 f2 2e	jsr $2ef2			jsr 	EvaluateSmallInteger
.2f21	8a		txa				txa
.2f22	60		rts				rts
.2f23					EvaluateReference:
.2f23	ad 9d 2e	lda $2e9d			lda 	ELBinaryOperatorInfo+TKW_PLING-TOK_BINARYST
.2f26	38		sec				sec 								; sub 1 to allow a!x b?x to work.
.2f27	e9 01		sbc #$01			sbc 	#1
.2f29	20 61 2d	jsr $2d61			jsr 	EvaluateLevel
.2f2c	b5 48		lda $48,x			lda 	esType,x
.2f2e	10 01		bpl $2f31			bpl 	_ERFail
.2f30	60		rts				rts
.2f31					_ERFail:
.2f31	a2 0b		ldx #$0b			ldx 	#ErrorID_NoReference
.2f33	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary/convert.asm

.2f36					Event_Str:
.2f36	20 d4 2e	jsr $2ed4			jsr 	EvaluateNumeric 			; get a number.
.2f39	b5 48		lda $48,x			lda 	esType,x 					; is it floating point
.2f3b	d0 13		bne $2f50			bne 	_ESFloat
.2f3d	20 93 2f	jsr $2f93			jsr 	ConvertGetBase 				; get base, or default.
.2f40	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.2f42	85 2a		sta $2a				sta 	temp0
.2f44	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.2f46	85 2b		sta $2b				sta 	1+(temp0)
.2f48	b5 51		lda $51,x			lda 	esInt0+1,x 					; get the base
.2f4a	20 d8 34	jsr $34d8			jsr 	MInt32ToString 				; convert to string.
.2f4d	4c 5d 2f	jmp $2f5d			jmp 	_ESCloneExit 				; clone and exit.
.2f50					_ESFloat:
.2f50	20 f5 35	jsr $35f5			jsr 	CheckRightParen 			; check closing )
.2f53	20 dc 22	jsr $22dc			jsr 	TOSToTemp0 					; string address in temp0, goes here.
.2f56	8a		txa				txa
.2f57	a2 16		ldx #$16		ldx	#22
.2f59	20 ea 1d	jsr $1dea		jsr	floatingpointHandler
.2f5c	aa		tax				tax
.2f5d					_ESCloneExit:
.2f5d	8a		txa				txa
.2f5e	a2 04		ldx #$04		ldx	#4
.2f60	20 2d 39	jsr $392d		jsr	stringHandler
.2f63	aa		tax				tax
.2f64	60		rts				rts
.2f65					UnaryVal:
.2f65	38		sec				sec 								; Carry set to return value
.2f66	b0 01		bcs $2f69			bcs 	ValueMain
.2f68					UnaryIsVal:
.2f68	18		clc				clc									; Carry clear to return legitimacy
.2f69					ValueMain:
.2f69	08		php				php 								; save results (CS is value, CC is validation)
.2f6a	20 df 2e	jsr $2edf			jsr 	EvaluateString
.2f6d	20 93 2f	jsr $2f93			jsr 	ConvertGetBase 				; get base, if any.
.2f70	98		tya				tya
.2f71	48		pha				pha
.2f72	20 dc 22	jsr $22dc			jsr 	TOSToTemp0 					; string address in temp0, goes here.
.2f75	b5 51		lda $51,x			lda 	esInt0+1,x 					; get the base
.2f77	29 7f		and #$7f			and 	#$7F 						; ignore the sign bit.
.2f79	20 f0 33	jsr $33f0			jsr 	MInt32FromString 			; convert it back from a string.
.2f7c	b0 0c		bcs $2f8a			bcs 	_VMSuccess 					; successfully converted.
.2f7e	b5 51		lda $51,x			lda 	esInt0+1,x 					; is base the default
.2f80	c9 8a		cmp #$8a			cmp 	#$80+10 					; if no, then it is integer only.
.2f82	f0 00		beq $2f84			beq 	_VMFailed 	 				; so we failed.
.2f84					_VMFailed:
.2f84	68		pla				pla
.2f85	a8		tay				tay
.2f86	28		plp				plp
.2f87	4c 82 35	jmp $3582			jmp 	MInt32False 				; return 0 whatever.
.2f8a					_VMSuccess:
.2f8a	68		pla				pla
.2f8b	a8		tay				tay
.2f8c	28		plp				plp 								; if CS the it was val() so we want the value.
.2f8d	b0 03		bcs $2f92			bcs 	_VMExit
.2f8f	4c 7e 35	jmp $357e			jmp 	MInt32True 					; otherwise return true as successful.
.2f92					_VMExit:
.2f92	60		rts				rts
.2f93					ConvertGetBase:
.2f93	a9 8a		lda #$8a			lda 	#10+$80 					; default base 10 signed.
.2f95	95 51		sta $51,x			sta 	esInt0+1,x
.2f97	b1 28		lda ($28),y			lda 	(codePtr),y 				; check for ,base)
.2f99	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.2f9b	d0 0e		bne $2fab			bne 	_CGBDone 					; not found, should be )
.2f9d	e8		inx				inx 								; next level
.2f9e	c8		iny				iny 								; skip comma.
.2f9f	20 f2 2e	jsr $2ef2			jsr 	EvaluateSmallInteger		; evaluate the base.
.2fa2	ca		dex				dex
.2fa3	c9 02		cmp #$02			cmp 	#2 							; base range is 2..16
.2fa5	90 08		bcc $2faf			bcc 	_CGBValue 					; (it should work as high as 37)
.2fa7	c9 11		cmp #$11			cmp 	#17
.2fa9	b0 04		bcs $2faf			bcs 	_CGBValue
.2fab					_CGBDone:
.2fab	20 f5 35	jsr $35f5			jsr 	CheckRightParen
.2fae	60		rts				rts
.2faf					_CGBValue:
.2faf	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.2fb1	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary/event.asm

.2fb4					EventFunction:
.2fb4	20 23 2f	jsr $2f23			jsr 	EvaluateReference			; get the variable reference that tracks the event
.2fb7	b5 48		lda $48,x			lda 	esType,x
.2fb9	c9 80		cmp #$80			cmp 	#$80 						; must be integer reference
.2fbb	d0 5b		bne $3018			bne 	_EFType
.2fbd	20 02 36	jsr $3602			jsr 	CheckComma
.2fc0	e8		inx				inx
.2fc1	20 ea 2e	jsr $2eea			jsr 	EvaluateInteger		 		; get the elapsed time between firing.
.2fc4	20 f5 35	jsr $35f5			jsr 	CheckRightParen 			; finish off with the right bracket
.2fc7	ca		dex				dex
.2fc8	b5 58		lda $58,x			lda 	esInt1,x 					; check max of 32767, we use 16 bit for timers and
.2fca	29 80		and #$80			and 	#$80 						; it doesn't work > 32767
.2fcc	15 60		ora $60,x			ora 	esInt2,x
.2fce	15 68		ora $68,x			ora 	esInt3,x
.2fd0	d0 41		bne $3013			bne 	_EFValue
.2fd2	98		tya				tya
.2fd3	48		pha				pha
.2fd4	8a		txa				txa
.2fd5	48		pha				pha
.2fd6	a2 1c		ldx #$1c		ldx	#28
.2fd8	20 f6 14	jsr $14f6		jsr	deviceHandler
.2fdb	84 2d		sty $2d				sty 	temp1+1
.2fdd	85 2c		sta $2c				sta 	temp1
.2fdf	68		pla				pla
.2fe0	aa		tax				tax
.2fe1	20 dc 22	jsr $22dc			jsr 	TOSToTemp0 					; set temp0 to the address of the event variable
.2fe4	a0 03		ldy #$03			ldy 	#3							; if -ve
.2fe6	b1 2a		lda ($2a),y			lda 	(temp0),y
.2fe8	30 23		bmi $300d			bmi 	_EFFail 	 				; straight out with fail, means "on pause".
.2fea	a0 00		ldy #$00			ldy 	#0 							; is the fire time zero ?
.2fec	b1 2a		lda ($2a),y			lda 	(temp0),y
.2fee	c8		iny				iny
.2fef	11 2a		ora ($2a),y			ora 	(temp0),y
.2ff1	f0 17		beq $300a			beq 	_EFInitialise 				; if so, initialise the value but return false.
.2ff3	a0 00		ldy #$00			ldy 	#0 							; calculate trigger - timer
.2ff5	38		sec				sec
.2ff6	b1 2a		lda ($2a),y			lda 	(temp0),y
.2ff8	e5 2c		sbc $2c				sbc 	temp1
.2ffa	c8		iny				iny
.2ffb	b1 2a		lda ($2a),y			lda 	(temp0),y
.2ffd	e5 2d		sbc $2d				sbc 	temp1+1
.2fff	10 0c		bpl $300d			bpl 	_EFFail 					; if trigger >= timer then return False
.3001	20 1d 30	jsr $301d			jsr 	SetEventTimer 				; reset the timer for next time.
.3004	20 7e 35	jsr $357e			jsr	 	MInt32True 					; and treutn true as fired.
.3007	68		pla				pla
.3008	a8		tay				tay
.3009	60		rts				rts
.300a					_EFInitialise:
.300a	20 1d 30	jsr $301d			jsr		SetEventTimer 				; set trigger time to time + elapsed
.300d					_EFFail:
.300d	68		pla				pla
.300e	a8		tay				tay
.300f	20 82 35	jsr $3582			jsr 	MInt32False
.3012	60		rts				rts
.3013					_EFValue:
.3013	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.3015	20 18 15	jsr $1518		jsr	errorHandler
.3018					_EFType:
.3018	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.301a	20 18 15	jsr $1518		jsr	errorHandler
.301d					SetEventTimer:
.301d	a0 00		ldy #$00			ldy 	#0
.301f	18		clc				clc
.3020	a5 2c		lda $2c				lda 	temp1
.3022	75 51		adc $51,x			adc 	esInt0+1,x
.3024	91 2a		sta ($2a),y			sta		(temp0),y
.3026	c8		iny				iny
.3027	a5 2d		lda $2d				lda 	temp1+1
.3029	75 59		adc $59,x			adc 	esInt1+1,x
.302b	91 2a		sta ($2a),y			sta		(temp0),y
.302d	88		dey				dey
.302e	11 2a		ora ($2a),y			ora 	(temp0),y 					; if the result is non zero, exit
.3030	d0 04		bne $3036			bne 	_SETExit 					; zero means initialise.....
.3032	a9 01		lda #$01			lda 	#1 							; timer zero won't work, so make it 1, which is
.3034	91 2a		sta ($2a),y			sta 	(temp0),y 					; near enough.
.3036					_SETExit:
.3036	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary/unary.asm

.3037					UnaryLen:
.3037	20 45 30	jsr $3045			jsr 	ULStart
.303a					ULFinish:
.303a	b1 2a		lda ($2a),y			lda 	(temp0),y 					; get length prefix
.303c	a4 32		ldy $32				ldy 	tempShort 					; get Y back
.303e	20 91 35	jsr $3591			jsr 	MInt32Set8Bit 				; write it out.
.3041	20 f5 35	jsr $35f5			jsr 	CheckRightParen
.3044	60		rts				rts
.3045	20 df 2e	jsr $2edf	ULStart:jsr 	EvaluateString
.3048	b5 50		lda $50,x			lda 	esInt0,x 					; copy address of string to temp0
.304a	85 2a		sta $2a				sta 	temp0
.304c	b5 58		lda $58,x			lda 	esInt1,x
.304e	85 2b		sta $2b				sta 	temp0+1
.3050	84 32		sty $32				sty 	tempShort 					; get length
.3052	a0 00		ldy #$00			ldy 	#0
.3054	60		rts				rts
.3055					UnaryAsc:
.3055	20 45 30	jsr $3045			jsr 	ULStart 					; same as LEN() get string, save Y, point to length.
.3058	b1 2a		lda ($2a),y			lda 	(temp0),y 					; read length
.305a	c8		iny				iny 		 						; point to first character, we can do LEN code after that
.305b	c9 00		cmp #$00			cmp 	#0
.305d	d0 db		bne $303a			bne 	ULFinish 					; if length = 0 then error : asc("") -> error.
.305f	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.3061	20 18 15	jsr $1518		jsr	errorHandler
.3064					UnaryAbs:
.3064	20 d4 2e	jsr $2ed4			jsr 	EvaluateNumeric 			; some numeric value
.3067	b0 07		bcs $3070			bcs 	_UAFloat 					; CS then float, so use that function
.3069	20 37 35	jsr $3537			jsr 	MInt32Absolute 				; int version
.306c	20 f5 35	jsr $35f5			jsr 	CheckRightParen
.306f	60		rts				rts
.3070					_UAFloat:
.3070	8a		txa				txa 								; float version
.3071	a2 02		ldx #$02		ldx	#2
.3073	20 ea 1d	jsr $1dea		jsr	floatingpointHandler
.3076	aa		tax				tax
.3077	20 f5 35	jsr $35f5			jsr 	CheckRightParen
.307a	60		rts				rts
.307b					UnarySgn:
.307b	20 d4 2e	jsr $2ed4			jsr 	EvaluateNumeric 			; same as above but sign of value
.307e	b0 07		bcs $3087			bcs 	_USFloat
.3080	20 6f 35	jsr $356f			jsr 	MInt32Sign
.3083	20 f5 35	jsr $35f5			jsr 	CheckRightParen
.3086	60		rts				rts
.3087					_USFloat:
.3087	8a		txa				txa
.3088	a2 10		ldx #$10		ldx	#16
.308a	20 ea 1d	jsr $1dea		jsr	floatingpointHandler
.308d	aa		tax				tax
.308e	20 f5 35	jsr $35f5			jsr 	CheckRightParen
.3091	60		rts				rts
.3092					UnaryPeek:
.3092	20 be 30	jsr $30be			jsr 	PDLCode 					; each has common setup code put reads 1,2 or 4 bytes
.3095	4c b2 30	jmp $30b2			jmp 	PDLByte0
.3098					UnaryDeek:
.3098	20 be 30	jsr $30be			jsr 	PDLCode
.309b	4c ac 30	jmp $30ac			jmp 	PDLByte1
.309e					UnaryLeek:
.309e	20 be 30	jsr $30be			jsr 	PDLCode
.30a1	a0 03		ldy #$03			ldy 	#3							; read 3-2
.30a3	b1 2a		lda ($2a),y			lda 	(temp0),y
.30a5	95 68		sta $68,x			sta 	esInt3,x
.30a7	88		dey				dey
.30a8	b1 2a		lda ($2a),y			lda 	(temp0),y
.30aa	95 60		sta $60,x			sta 	esInt2,x
.30ac					PDLByte1:
.30ac	a0 01		ldy #$01			ldy 	#1
.30ae	b1 2a		lda ($2a),y			lda 	(temp0),y
.30b0	95 58		sta $58,x			sta 	esInt1,x
.30b2					PDLByte0:
.30b2	a0 00		ldy #$00			ldy 	#0
.30b4	b1 2a		lda ($2a),y			lda 	(temp0),y
.30b6	95 50		sta $50,x			sta 	esInt0,x
.30b8	a4 32		ldy $32				ldy 	tempShort 					; restore Y
.30ba	20 f5 35	jsr $35f5			jsr 	CheckRightParen 			; check right and return
.30bd	60		rts				rts
.30be					PDLCode:
.30be	20 ea 2e	jsr $2eea			jsr 	EvaluateInteger 			; some address
.30c1	b5 50		lda $50,x			lda 	esInt0,x 					; copy address of string to temp0
.30c3	85 2a		sta $2a				sta 	temp0
.30c5	b5 58		lda $58,x			lda 	esInt1,x
.30c7	85 2b		sta $2b				sta 	temp0+1
.30c9	a9 00		lda #$00			lda 	#0 							; zero upper 3 bytes of result, type okay.
.30cb	95 58		sta $58,x			sta 	esInt1,x 					; PEEK needs upper 3 cleared
.30cd	95 60		sta $60,x			sta 	esInt2,x
.30cf	95 68		sta $68,x			sta 	esInt3,x
.30d1	84 32		sty $32				sty 	tempShort 					; save Y
.30d3	60		rts				rts
.30d4					Unary_Random:
.30d4	20 b2 35	jsr $35b2			jsr 	MInt32Random 				; generate random number.
.30d7	b1 28		lda ($28),y			lda 	(codePtr),y 				; check followed by )
.30d9	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.30db	f0 08		beq $30e5			beq 	_URExit
.30dd	e8		inx				inx 								; load range 0..r-1 into +1
.30de	20 ea 2e	jsr $2eea			jsr 	EvaluateInteger
.30e1	ca		dex				dex
.30e2	20 d5 33	jsr $33d5			jsr 	MInt32Modulus 				; calculate random % modulus
.30e5					_URExit:
.30e5	20 f5 35	jsr $35f5			jsr 	CheckRightParen 			; check right and return
.30e8	60		rts				rts
.30e9					Unary_Min:
.30e9	a9 01		lda #$01			lda 	#1 							; c1 cmp c2 needs to be > e.g. c1 > c2
.30eb	d0 02		bne $30ef			bne 	UnaryMBody
.30ed					Unary_Max:
.30ed	a9 ff		lda #$ff			lda 	#$FF 						; c1 cmp c2 needs to be < e.g. c1 < c2
.30ef					UnaryMBody:
.30ef	48		pha				pha 								; save comparator on stack, shows min or max
.30f0	20 cb 2e	jsr $2ecb			jsr 	Evaluate 					; get the first thing to check
.30f3					_UnaryMLoop:
.30f3	b1 28		lda ($28),y			lda 	(codePtr),y 				; found ), indicates end.
.30f5	c8		iny				iny
.30f6	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.30f8	f0 09		beq $3103			beq 	_UnaryMExit
.30fa	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; found , indicates more.
.30fc	f0 07		beq $3105			beq 	_UnaryMCompare
.30fe	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.3100	20 18 15	jsr $1518		jsr	errorHandler
.3103					_UnaryMExit:
.3103	68		pla				pla 								; done so throw comparator and return.
.3104	60		rts				rts
.3105					_UnaryMCompare:
.3105	e8		inx				inx 								; get the 2nd thing to evaluate
.3106	20 cb 2e	jsr $2ecb			jsr 	Evaluate
.3109	ca		dex				dex
.310a	20 91 2c	jsr $2c91			jsr 	PerformComparison 			; this is part of evaluate/compare.asm
.310d	85 32		sta $32				sta 	tempShort 					; save result
.310f	68		pla				pla 								; get what we need
.3110	48		pha				pha
.3111	c5 32		cmp $32				cmp 	tempShort 					; did we get it
.3113	d0 de		bne $30f3			bne 	_UnaryMLoop 				; no, try another value.
.3115	20 82 35	jsr $3582			jsr 	MInt32False 				; promote 2nd to 1st.
.3118	20 66 34	jsr $3466			jsr 	MInt32Add
.311b	4c f3 30	jmp $30f3			jmp 	_UnaryMLoop
.311e					Unary_Page:
.311e	20 82 35	jsr $3582			jsr 	MInt32False 				; zero
.3121	ad c8 0a	lda $0ac8			lda 	basePage 					; copy base page address in.
.3124	95 50		sta $50,x			sta 	esInt0,x
.3126	ad c9 0a	lda $0ac9			lda 	basePage+1
.3129	95 58		sta $58,x			sta 	esInt1,x
.312b	60		rts				rts
.312c					UnaryReference:
.312c	a9 0f		lda #$0f			lda 	#15
.312e	20 61 2d	jsr $2d61			jsr 	EvaluateLevel 				; evaluate term and don't deference.
.3131	b5 48		lda $48,x			lda 	esType,x 					; check it's a reference.
.3133	10 05		bpl $313a			bpl 	UType
.3135	a9 00		lda #$00			lda 	#0 							; make it an integer
.3137	95 48		sta $48,x			sta 	esType,x
.3139	60		rts				rts
.313a					UType:
.313a	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.313c	20 18 15	jsr $1518		jsr	errorHandler
.313f					UnaryHexMarker:
.313f	4c bc 2e	jmp $2ebc			jmp 	EvaluateIntegerTerm
.3142					UnaryComplement:
.3142	20 bc 2e	jsr $2ebc			jsr 	EvaluateIntegerTerm
.3145	20 56 35	jsr $3556			jsr 	MInt32Not
.3148	60		rts				rts
.3149					UnaryIntToFloat:
.3149	20 d4 2e	jsr $2ed4			jsr 	EvaluateNumeric				; some number
.314c	b5 48		lda $48,x			lda 	esType,x 					; if float already, exit
.314e	d0 0b		bne $315b			bne 	_UIFExit
.3150	8a		txa				txa 								; convert and set type
.3151	a2 1c		ldx #$1c		ldx	#28
.3153	20 ea 1d	jsr $1dea		jsr	floatingpointHandler
.3156	aa		tax				tax
.3157	a9 01		lda #$01			lda 	#1
.3159	95 48		sta $48,x			sta 	esType,x
.315b					_UIFExit:
.315b	60		rts				rts
.315c					UnaryFloatToInt:
.315c	20 d4 2e	jsr $2ed4			jsr 	EvaluateNumeric 			; the number
.315f	b5 48		lda $48,x			lda 	esType,x 					; if int already exit
.3161	f0 0b		beq $316e			beq 	_UFIExit
.3163	8a		txa				txa 								; convert to int
.3164	a2 14		ldx #$14		ldx	#20
.3166	20 ea 1d	jsr $1dea		jsr	floatingpointHandler
.3169	aa		tax				tax
.316a	a9 00		lda #$00			lda 	#0 							; set type
.316c	95 48		sta $48,x			sta 	esType,x
.316e					_UFIExit:
.316e	60		rts				rts
.316f					UnaryAlloc:
.316f	e8		inx				inx 								; evaluate memory required
.3170	20 ea 2e	jsr $2eea			jsr 	EvaluateInteger
.3173	20 f5 35	jsr $35f5			jsr 	CheckRightParen
.3176	ca		dex				dex
.3177	b5 61		lda $61,x			lda 	esInt2+1,x 					; check at least in 64k range.
.3179	15 69		ora $69,x			ora 	esInt3+1,x
.317b	d0 1d		bne $319a			bne 	_UABadValue
.317d	20 82 35	jsr $3582			jsr 	MInt32False					; zero return.
.3180	a5 36		lda $36				lda 	lowMemory+1 				; copy low memory in
.3182	95 58		sta $58,x			sta 	esInt1,x
.3184	a5 35		lda $35				lda 	lowMemory
.3186	95 50		sta $50,x			sta 	esInt0,x
.3188	18		clc				clc 								; add alloc required.
.3189	75 51		adc $51,x			adc 	esInt0+1,x
.318b	85 35		sta $35				sta 	lowMemory
.318d	a5 36		lda $36				lda 	lowMemory+1
.318f	75 59		adc $59,x			adc 	esInt1+1,x
.3191	85 36		sta $36				sta 	lowMemory+1
.3193	b0 05		bcs $319a			bcs		_UABadValue 				; overflow definitely bad.
.3195	c5 34		cmp $34				cmp 	highMemory+1
.3197	b0 01		bcs $319a			bcs 	_UABadValue 				; out of memory bad.
.3199	60		rts				rts
.319a					_UABadValue:
.319a	a2 22		ldx #$22			ldx 	#ErrorID_Memory
.319c	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary/unary2.asm

.319f					UnaryTimer:
.319f	20 f5 35	jsr $35f5			jsr 	CheckRightParen 			; no parameters
.31a2	98		tya				tya
.31a3	48		pha				pha
.31a4	20 a9 35	jsr $35a9			jsr 	MInt32Zero 					; zero result
.31a7	86 2a		stx $2a				stx 	temp0 						; returning in YA so can't use .pshx
.31a9	a2 1c		ldx #$1c		ldx	#28
.31ab	20 f6 14	jsr $14f6		jsr	deviceHandler
.31ae	a6 2a		ldx $2a				ldx 	temp0						; restore X and update 16 bit result
.31b0	95 50		sta $50,x			sta 	esInt0,x
.31b2	98		tya				tya
.31b3	95 58		sta $58,x			sta 	esInt1,x
.31b5	68		pla				pla
.31b6	a8		tay				tay
.31b7	60		rts				rts
.31b8					UnaryInkey:
.31b8	20 f5 35	jsr $35f5			jsr 	CheckRightParen
.31bb	86 2a		stx $2a				stx 	temp0
.31bd	a2 0a		ldx #$0a		ldx	#10
.31bf	20 f6 14	jsr $14f6		jsr	deviceHandler
.31c2	a6 2a		ldx $2a				ldx 	temp0
.31c4	20 91 35	jsr $3591			jsr 	MInt32Set8Bit
.31c7	60		rts				rts
.31c8					UnaryGet:
.31c8	20 f5 35	jsr $35f5			jsr 	CheckRightParen
.31cb	86 2a		stx $2a				stx 	temp0
.31cd					_UGLoop:
.31cd	a2 02		ldx #$02		ldx	#2
.31cf	20 f6 14	jsr $14f6		jsr	deviceHandler
.31d2	a2 0a		ldx #$0a		ldx	#10
.31d4	20 f6 14	jsr $14f6		jsr	deviceHandler
.31d7	c9 00		cmp #$00			cmp 	#0
.31d9	f0 f2		beq $31cd			beq 	_UGLoop
.31db	a6 2a		ldx $2a				ldx 	temp0
.31dd	20 91 35	jsr $3591			jsr 	MInt32Set8Bit
.31e0	60		rts				rts
.31e1					UnaryGetString:
.31e1	20 c8 31	jsr $31c8			jsr 	UnaryGet
.31e4					UGSDoChr:
.31e4	4c 35 32	jmp $3235			jmp 	ChrCode
.31e7					UnaryInkeyString:
.31e7	20 b8 31	jsr $31b8			jsr 	UnaryInkey
.31ea	b5 50		lda $50,x			lda 	esInt0,x
.31ec	d0 f6		bne $31e4			bne 	UGSDoChr
.31ee	8a		txa				txa
.31ef	a2 08		ldx #$08		ldx	#8
.31f1	20 2d 39	jsr $392d		jsr	stringHandler
.31f4	aa		tax				tax
.31f5	60		rts				rts
.31f6					UnarySys:
.31f6	20 ea 2e	jsr $2eea			jsr 	EvaluateInteger 				; get the address
.31f9	20 f5 35	jsr $35f5			jsr 	CheckRightParen
.31fc	20 dc 22	jsr $22dc			jsr 	TOSToTemp0 						; copy call address to temp0
.31ff	8a		txa				txa
.3200	48		pha				pha
.3201	98		tya				tya
.3202	48		pha				pha
.3203	ad 00 0a	lda $0a00			lda 	("A"-"A")*4+SingleLetterVar 	; load AXY
.3206	ae 5c 0a	ldx $0a5c			ldx 	("X"-"A")*4+SingleLetterVar
.3209	ac 60 0a	ldy $0a60			ldy 	("Y"-"A")*4+SingleLetterVar
.320c	20 1b 32	jsr $321b			jsr 	_CallTemp0
.320f	85 32		sta $32				sta 	tempShort 						; restore YX
.3211	68		pla				pla
.3212	a8		tay				tay
.3213	68		pla				pla
.3214	aa		tax				tax
.3215	a5 32		lda $32				lda 	tempShort
.3217	20 91 35	jsr $3591			jsr 	MInt32Set8Bit 					; return result.
.321a	60		rts				rts
.321b					_CallTemp0:
.321b	6c 2a 00	jmp ($002a)			jmp 	(temp0)
.321e					UnaryMem:
.321e	20 82 35	jsr $3582			jsr 	MInt32False 					; set to false (e.g. 0)
.3221	38		sec				sec
.3222	a5 33		lda $33				lda 	highMemory 						; calculate value
.3224	e5 35		sbc $35				sbc 	lowMemory
.3226	95 50		sta $50,x			sta 	esInt0,x
.3228	a5 34		lda $34				lda 	highMemory+1
.322a	e5 36		sbc $36				sbc 	lowMemory+1
.322c	95 58		sta $58,x			sta 	esInt1,x
.322e	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary/unarystr.asm

.322f					ExecChr:
.322f	20 f2 2e	jsr $2ef2			jsr 	EvaluateSmallInteger		; character number 0-255
.3232	20 f5 35	jsr $35f5			jsr 	CheckRightParen				; right bracket
.3235					ChrCode:
.3235	98		tya				tya
.3236	48		pha				pha
.3237	8a		txa				txa 								; A = stack
.3238	b4 50		ldy $50,x			ldy 	esInt0,x					; Y = character
.323a	a2 02		ldx #$02		ldx	#2
.323c	20 2d 39	jsr $392d		jsr	stringHandler
.323f	aa		tax				tax 								; X = stack
.3240	68		pla				pla
.3241	a8		tay				tay
.3242	60		rts				rts
.3243					ExecLower:
.3243	38		sec				sec 								; set carry is lower
.3244	b0 01		bcs $3247			bcs 	ExecUpperLower
.3246					ExecUpper:
.3246	18		clc				clc 								; clear carry is upper
.3247					ExecUpperLower:
.3247	08		php				php 								; save carry
.3248	20 df 2e	jsr $2edf			jsr 	EvaluateString 				; string to stack,X
.324b	20 f5 35	jsr $35f5			jsr 	CheckRightParen 			; check closing right bracket.
.324e	28		plp				plp 								; restore carry, save Y
.324f	98		tya				tya
.3250	48		pha				pha
.3251	a9 00		lda #$00			lda 	#0 							; A zero if upper, 1 if lower.
.3253	2a		rol a				rol 	a
.3254	a8		tay				tay 								; now in Y
.3255	8a		txa				txa 								; do the substring and exit.
.3256	a2 0c		ldx #$0c		ldx	#12
.3258	20 2d 39	jsr $392d		jsr	stringHandler
.325b	aa		tax				tax
.325c	68		pla				pla
.325d	a8		tay				tay
.325e	60		rts				rts
.325f					ExecLeft:
.325f	20 df 2e	jsr $2edf			jsr 	EvaluateString 				; string to stack,X
.3262	20 02 36	jsr $3602			jsr 	CheckComma
.3265	e8		inx				inx
.3266	a9 01		lda #$01			lda 	#1 							; 1 for 2nd parameter.
.3268	20 91 35	jsr $3591			jsr 	MInt32Set8Bit
.326b	e8		inx				inx
.326c	20 f2 2e	jsr $2ef2			jsr 	EvaluateSmallInteger 		; smallint 3rd parameter
.326f					ExecSubstring:
.326f	ca		dex				dex 								; fix up X
.3270	ca		dex				dex
.3271	20 f5 35	jsr $35f5			jsr 	CheckRightParen 			; check closing right bracket.
.3274	8a		txa				txa 								; do the substring and exit.
.3275	a2 0e		ldx #$0e		ldx	#14
.3277	20 2d 39	jsr $392d		jsr	stringHandler
.327a	aa		tax				tax
.327b	60		rts				rts
.327c					ExecMid:
.327c	20 df 2e	jsr $2edf			jsr 	EvaluateString 				; string to stack,X
.327f	20 02 36	jsr $3602			jsr 	CheckComma
.3282	e8		inx				inx
.3283	20 f2 2e	jsr $2ef2			jsr 	EvaluateSmallInteger 		; smallint 2nd parameter
.3286	c9 00		cmp #$00			cmp 	#0
.3288	f0 15		beq $329f			beq 	_EMValue
.328a	e8		inx				inx
.328b	a9 ff		lda #$ff			lda 	#255 						; 255 default for 3nd parameter - this is optional.
.328d	20 91 35	jsr $3591			jsr 	MInt32Set8Bit
.3290	b1 28		lda ($28),y			lda 	(codePtr),y 				; is there a ) next
.3292	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN 				; if so, just MID$(a$,2)
.3294	f0 d9		beq $326f			beq 	ExecSubString
.3296	20 02 36	jsr $3602			jsr 	CheckComma
.3299	20 f2 2e	jsr $2ef2			jsr 	EvaluateSmallInteger 		; smallint 2nd parameter
.329c	4c 6f 32	jmp $326f			jmp 	ExecSubString
.329f					_EMValue:
.329f	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.32a1	20 18 15	jsr $1518		jsr	errorHandler
.32a4					ExecRight:
.32a4	20 df 2e	jsr $2edf			jsr 	EvaluateString 				; string to stack,X
.32a7	20 02 36	jsr $3602			jsr 	CheckComma
.32aa	e8		inx				inx
.32ab	20 f2 2e	jsr $2ef2			jsr 	EvaluateSmallInteger 		; smallint 2nd parameter.
.32ae	ca		dex				dex
.32af	98		tya				tya
.32b0	48		pha				pha
.32b1	b5 50		lda $50,x			lda 	esInt0,x 					; copy address of string to temp0
.32b3	85 2a		sta $2a				sta 	temp0
.32b5	b5 58		lda $58,x			lda 	esInt1,x
.32b7	85 2b		sta $2b				sta 	temp0+1
.32b9	a0 00		ldy #$00			ldy 	#0 							; point to length
.32bb	b1 2a		lda ($2a),y			lda 	(temp0),y 					; get the length.
.32bd	18		clc				clc 								; add 1.
.32be	69 01		adc #$01			adc 	#1
.32c0	38		sec				sec
.32c1	f5 51		sbc $51,x			sbc 	esInt0+1,x  				; subtract right count.
.32c3	f0 02		beq $32c7			beq		_ERMake1 					; if zero, make it 1.
.32c5	b0 02		bcs $32c9			bcs		_EROkay
.32c7					_ERMake1:
.32c7	a9 01		lda #$01			lda 	#1 							; start position.
.32c9					_EROkay:
.32c9	e8		inx				inx 								; set start pos.
.32ca	95 50		sta $50,x			sta 	esInt0,x
.32cc	e8		inx				inx
.32cd	a9 ff		lda #$ff			lda 	#255 						; 255 default for 3nd parameter.
.32cf	20 91 35	jsr $3591			jsr 	MInt32Set8Bit
.32d2	68		pla				pla
.32d3	a8		tay				tay
.32d4	4c 6f 32	jmp $326f			jmp 	ExecSubString 				; do the substring code.

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32binary.asm

.32d7					MInt32And:
.32d7	b5 50		lda $50,x			lda 	esInt0,x
.32d9	35 51		and $51,x			and 	esInt0+1,x
.32db	95 50		sta $50,x			sta 	esInt0,x
.32dd	b5 58		lda $58,x			lda 	esInt1,x
.32df	35 59		and $59,x			and 	esInt1+1,x
.32e1	95 58		sta $58,x			sta 	esInt1,x
.32e3	b5 60		lda $60,x			lda 	esInt2,x
.32e5	35 61		and $61,x			and 	esInt2+1,x
.32e7	95 60		sta $60,x			sta 	esInt2,x
.32e9	b5 68		lda $68,x			lda 	esInt3,x
.32eb	35 69		and $69,x			and 	esInt3+1,x
.32ed	95 68		sta $68,x			sta 	esInt3,x
.32ef	60		rts				rts
.32f0					MInt32Or:
.32f0	b5 50		lda $50,x			lda 	esInt0,x
.32f2	15 51		ora $51,x			ora 	esInt0+1,x
.32f4	95 50		sta $50,x			sta 	esInt0,x
.32f6	b5 58		lda $58,x			lda 	esInt1,x
.32f8	15 59		ora $59,x			ora 	esInt1+1,x
.32fa	95 58		sta $58,x			sta 	esInt1,x
.32fc	b5 60		lda $60,x			lda 	esInt2,x
.32fe	15 61		ora $61,x			ora 	esInt2+1,x
.3300	95 60		sta $60,x			sta 	esInt2,x
.3302	b5 68		lda $68,x			lda 	esInt3,x
.3304	15 69		ora $69,x			ora 	esInt3+1,x
.3306	95 68		sta $68,x			sta 	esInt3,x
.3308	60		rts				rts
.3309					MInt32Xor:
.3309	b5 50		lda $50,x			lda 	esInt0,x
.330b	55 51		eor $51,x			eor 	esInt0+1,x
.330d	95 50		sta $50,x			sta 	esInt0,x
.330f	b5 58		lda $58,x			lda 	esInt1,x
.3311	55 59		eor $59,x			eor 	esInt1+1,x
.3313	95 58		sta $58,x			sta 	esInt1,x
.3315	b5 60		lda $60,x			lda 	esInt2,x
.3317	55 61		eor $61,x			eor 	esInt2+1,x
.3319	95 60		sta $60,x			sta 	esInt2,x
.331b	b5 68		lda $68,x			lda 	esInt3,x
.331d	55 69		eor $69,x			eor 	esInt3+1,x
.331f	95 68		sta $68,x			sta 	esInt3,x
.3321	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32compare.asm

.3322					MInt32Compare:
.3322	b5 50		lda $50,x			lda 	esInt0,x 					; equality check first.
.3324	d5 51		cmp $51,x			cmp 	esInt0+1,x
.3326	d0 13		bne $333b			bne 	MInt32Compare2
.3328	b5 58		lda $58,x			lda 	esInt1,x
.332a	d5 59		cmp $59,x			cmp 	esInt1+1,x
.332c	d0 0d		bne $333b			bne 	MInt32Compare2
.332e	b5 60		lda $60,x			lda 	esInt2,x
.3330	d5 61		cmp $61,x			cmp 	esInt2+1,x
.3332	d0 07		bne $333b			bne 	MInt32Compare2
.3334	b5 68		lda $68,x			lda 	esInt3,x
.3336	55 69		eor $69,x			eor 	esInt3+1,x 					; EOR will return 0 if the same.
.3338	d0 01		bne $333b			bne 	MInt32Compare2
.333a	60		rts				rts
.333b					MInt32Compare2:
.333b	b5 50		lda $50,x			lda		esInt0,x 					; unsigned 32 bit comparison.
.333d	d5 51		cmp $51,x			cmp 	esInt0+1,x
.333f	b5 58		lda $58,x			lda		esInt1,x
.3341	f5 59		sbc $59,x			sbc 	esInt1+1,x
.3343	b5 60		lda $60,x			lda		esInt2,x
.3345	f5 61		sbc $61,x			sbc 	esInt2+1,x
.3347	b5 68		lda $68,x			lda		esInt3,x
.3349	f5 69		sbc $69,x			sbc 	esInt3+1,x
.334b	50 02		bvc $334f			bvc 	_I32LNoOverflow 			; make it signed 32 bit comparison
.334d	49 80		eor #$80			eor 	#$80
.334f					_I32LNoOverflow
.334f	30 03		bmi $3354			bmi 	MInt32CLess					; if -ve then return $FF
.3351	a9 01		lda #$01			lda 	#$01						; else return $01
.3353	60		rts				rts
.3354					MInt32CLess:
.3354	a9 ff		lda #$ff			lda 	#$FF
.3356	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32divide.asm

.3357					MInt32SDivide:
.3357	98		tya				tya  								; save Y, which is the count of negations
.3358	48		pha				pha
.3359	a0 00		ldy #$00			ldy 	#0 							; zero count
.335b	20 73 33	jsr $3373			jsr 	_MInt32SRemSign 			; unsign TOS
.335e	e8		inx				inx 								; unsign TOS+1
.335f	20 73 33	jsr $3373			jsr 	_MInt32SRemSign
.3362	ca		dex				dex
.3363	98		tya				tya 								; save sign count on stack
.3364	48		pha				pha
.3365	20 7c 33	jsr $337c			jsr 	MInt32UDivide 				; unsigned division
.3368	68		pla				pla 								; get sign count back
.3369	29 01		and #$01			and 	#1 							; if it is odd, then negate result
.336b	f0 03		beq $3370			beq 	_I32SNoNeg
.336d	20 3c 35	jsr $353c			jsr 	MInt32Negate
.3370					_I32SNoNeg:
.3370	68		pla				pla 								; restoe Y and exit
.3371	a8		tay				tay
.3372	60		rts				rts
.3373					_MInt32SRemSign:
.3373	b5 68		lda $68,x			lda 	esInt3,x 					; is it -ve
.3375	10 04		bpl $337b			bpl 	_MInt32SRSExit
.3377	c8		iny				iny 								; increment the sign count
.3378	20 3c 35	jsr $353c			jsr 	MInt32Negate 				; negate the value.
.337b					_MInt32SRSExit:
.337b	60		rts				rts
.337c					MInt32UDivide:
.337c	b5 51		lda $51,x			lda 	esInt0+1,x 					; check for division by zero
.337e	15 59		ora $59,x			ora 	esInt1+1,x
.3380	15 5a		ora $5a,x			ora 	esInt1+2,x
.3382	15 5b		ora $5b,x			ora 	esInt1+3,x
.3384	f0 4a		beq $33d0			beq 	_MInt32DZero
.3386	e8		inx				inx 								; clear A
.3387	e8		inx				inx
.3388	20 82 35	jsr $3582			jsr 	MInt32False
.338b	ca		dex				dex
.338c	ca		dex				dex
.338d	98		tya				tya 								; save Y on the stack
.338e	48		pha				pha
.338f	a0 20		ldy #$20			ldy 	#32 						; number of division passes
.3391					_MInt32UDLoop:
.3391	16 50		asl $50,x			asl 	esInt0,x					; shift QA left. First Q
.3393	36 58		rol $58,x			rol 	esInt1,x
.3395	36 60		rol $60,x			rol 	esInt2,x
.3397	36 68		rol $68,x			rol 	esInt3,x
.3399	36 52		rol $52,x			rol 	esInt0+2,x 					; then A.
.339b	36 5a		rol $5a,x			rol 	esInt1+2,x
.339d	36 62		rol $62,x			rol 	esInt2+2,x
.339f	36 6a		rol $6a,x			rol 	esInt3+2,x
.33a1	38		sec				sec 								; calculate A-M saving result on the stack
.33a2	b5 52		lda $52,x			lda 	esInt0+2,x
.33a4	f5 51		sbc $51,x			sbc 	esInt0+1,x
.33a6	48		pha				pha
.33a7	b5 5a		lda $5a,x			lda 	esInt1+2,x
.33a9	f5 59		sbc $59,x			sbc 	esInt1+1,x
.33ab	48		pha				pha
.33ac	b5 62		lda $62,x			lda 	esInt2+2,x
.33ae	f5 61		sbc $61,x			sbc 	esInt2+1,x
.33b0	48		pha				pha
.33b1	b5 6a		lda $6a,x			lda 	esInt3+2,x
.33b3	f5 69		sbc $69,x			sbc 	esInt3+1,x
.33b5	90 10		bcc $33c7			bcc		_MInt32NoSubtract 			; if A < M (e.g. carry clear) then reject this.
.33b7	95 6a		sta $6a,x			sta 	esInt3+2,x 					; write result back to A
.33b9	68		pla				pla
.33ba	95 62		sta $62,x			sta 	esInt2+2,x
.33bc	68		pla				pla
.33bd	95 5a		sta $5a,x			sta 	esInt1+2,x
.33bf	68		pla				pla
.33c0	95 52		sta $52,x			sta 	esInt0+2,x
.33c2	f6 50		inc $50,x			inc 	esInt0,x 					; sets bit 0 of Q - it was shifted left previously.
.33c4	4c ca 33	jmp $33ca			jmp 	_MInt32Next 					; do the next iteration
.33c7					_MInt32NoSubtract:
.33c7	68		pla				pla
.33c8	68		pla				pla
.33c9	68		pla				pla
.33ca					_MInt32Next:
.33ca	88		dey				dey 								; do this 32 times.
.33cb	d0 c4		bne $3391			bne 	_MInt32UDLoop
.33cd	68		pla				pla 								; restore Y and exit
.33ce	a8		tay				tay
.33cf	60		rts				rts
.33d0					_MInt32DZero:
.33d0	a2 05		ldx #$05			ldx 	#ErrorID_DivZero
.33d2	20 18 15	jsr $1518		jsr	errorHandler
.33d5					MInt32Modulus:
.33d5	20 7c 33	jsr $337c			jsr 	MInt32UDivide 				; do the division.
.33d8	b5 6a		lda $6a,x			lda 	esInt3+2,x 					; copy 2nd on stack (the remainder) to the top.
.33da	95 68		sta $68,x			sta 	esInt3,x
.33dc	b5 62		lda $62,x			lda 	esInt2+2,x
.33de	95 60		sta $60,x			sta 	esInt2,x
.33e0	b5 5a		lda $5a,x			lda 	esInt1+2,x
.33e2	95 58		sta $58,x			sta 	esInt1,x
.33e4	b5 52		lda $52,x			lda 	esInt0+2,x
.33e6	95 50		sta $50,x			sta 	esInt0,x
.33e8	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32fromstr.asm

.0cdd					fs32Length:
>0cdd							.fill 	1
.33e9					LinkInt32FromString:
.33e9	aa		tax				tax
.33ea	98		tya				tya
.33eb	20 f0 33	jsr $33f0			jsr 	MInt32FromString
.33ee	8a		txa				txa
.33ef	60		rts				rts
.33f0					MInt32FromString:
.33f0	85 32		sta $32				sta 	tempShort 					; save base
.33f2	98		tya				tya
.33f3	48		pha				pha
.33f4	a0 00		ldy #$00			ldy 	#0 							; get length of string to convert
.33f6	b1 2a		lda ($2a),y			lda 	(temp0),y
.33f8	8d dd 0c	sta $0cdd			sta 	fs32Length
.33fb	f0 65		beq $3462			beq 	_I32FSFail2					; fail if length zero.
.33fd	a0 01		ldy #$01			ldy 	#1 							; set index into string being read
.33ff	b1 2a		lda ($2a),y			lda 	(temp0),y 					; look at first character
.3401	c9 2d		cmp #$2d			cmp 	#"-"						; is it a - character
.3403	d0 09		bne $340e			bne 	_I32FSNotNegative
.3405	ad dd 0c	lda $0cdd			lda 	fs32Length 					; get length back.
.3408	c9 01		cmp #$01			cmp 	#1 							; if 1 it is just a - on its own so fail.
.340a	f0 56		beq $3462			beq 	_I32FSFail2
.340c	a0 02		ldy #$02			ldy 	#2 							; first digit of the number.
.340e					_I32FSNotNegative:
.340e	a5 32		lda $32				lda 	tempShort 					; get the base back.
.3410	c0 02		cpy #$02			cpy 	#2 							; if we read a -ve (e.g. Y == 2)
.3412	d0 02		bne $3416			bne 	_I32FSNN2
.3414	09 80		ora #$80			ora 	#$80						; set bit 7, this indicates a negated result.
.3416					_I32FSNN2:
.3416	48		pha				pha 								; save base + final sign on stack.
.3417	20 82 35	jsr $3582			jsr 	MInt32False 				; zero the return value.
.341a					_I32FSMainLoop:
.341a	68		pla				pla 								; get the base back into tempShort
.341b	48		pha				pha
.341c	29 7f		and #$7f			and 	#$7F
.341e	85 32		sta $32				sta 	tempShort
.3420	b1 2a		lda ($2a),y			lda 	(temp0),y 					; look at next character.
.3422	c9 61		cmp #$61			cmp 	#"a" 						; fix up case.
.3424	90 02		bcc $3428			bcc 	_I32FSNotLC
.3426	e9 20		sbc #$20			sbc 	#32
.3428					_I32FSNotLC:
.3428	38		sec				sec 								; subtract 48 (ASCII "0") - ASCII to Hex conversion
.3429	e9 30		sbc #$30			sbc 	#"0"
.342b	90 34		bcc $3461			bcc 	_I32FSFail 					; nothing more to do.
.342d	c9 0a		cmp #$0a			cmp 	#9+1 						; if it is 0-9 validate vs base.
.342f	90 06		bcc $3437			bcc 	_I32FSValidate
.3431	c9 11		cmp #$11			cmp 	#17 						; is it between 58 and 64 ? if so bad.
.3433	90 2c		bcc $3461			bcc 	_I32FSFail
.3435	e9 07		sbc #$07			sbc 	#7 							; adjust into range so now character is 0->nnn
.3437					_I32FSValidate:
.3437	c5 32		cmp $32				cmp 	tempShort 					; compare against the base.
.3439	b0 26		bcs $3461			bcs 	_I32FSFail 					; sorry, too large for this base, so fail.
.343b	48		pha				pha 								; save the new digit value.
.343c	e8		inx				inx 								; put base into next slot up on stack
.343d	a5 32		lda $32				lda 	tempShort
.343f	20 91 35	jsr $3591			jsr 	MInt32Set8Bit
.3442	ca		dex				dex
.3443	20 9a 34	jsr $349a			jsr 	MInt32Multiply 				; multiply current by the base
.3446	e8		inx				inx
.3447	68		pla				pla  								; put additive into next slot
.3448	20 91 35	jsr $3591			jsr 	MInt32Set8Bit
.344b	ca		dex				dex
.344c	20 66 34	jsr $3466			jsr 	MInt32Add 					; and add it
.344f	c8		iny				iny 								; bump the character pointer
.3450	cc dd 0c	cpy $0cdd			cpy 	fs32Length 					; until > length.
.3453	f0 c5		beq $341a			beq 	_I32FSMainLoop
.3455	90 c3		bcc $341a			bcc 	_I32FSMainLoop
.3457					_I32FSDone:
.3457	68		pla				pla 								; get base/final sign back
.3458	10 03		bpl $345d			bpl 	_I32FSNN3
.345a	20 3c 35	jsr $353c			jsr 	MInt32Negate 				; negate the result.
.345d					_I32FSNN3:
.345d	68		pla				pla
.345e	a8		tay				tay
.345f	38		sec				sec
.3460	60		rts				rts
.3461					_I32FSFail:
.3461	68		pla				pla
.3462					_I32FSFail2:
.3462	68		pla				pla
.3463	a8		tay				tay
.3464	18		clc				clc
.3465	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32math.asm

.3466					MInt32Add:
.3466	18		clc				clc
.3467	b5 50		lda $50,x			lda 	esInt0,x
.3469	75 51		adc $51,x			adc 	esInt0+1,x
.346b	95 50		sta $50,x			sta 	esInt0,x
.346d	b5 58		lda $58,x			lda 	esInt1,x
.346f	75 59		adc $59,x			adc 	esInt1+1,x
.3471	95 58		sta $58,x			sta 	esInt1,x
.3473	b5 60		lda $60,x			lda 	esInt2,x
.3475	75 61		adc $61,x			adc 	esInt2+1,x
.3477	95 60		sta $60,x			sta 	esInt2,x
.3479	b5 68		lda $68,x			lda 	esInt3,x
.347b	75 69		adc $69,x			adc 	esInt3+1,x
.347d	95 68		sta $68,x			sta 	esInt3,x
.347f	60		rts				rts
.3480					MInt32Sub:
.3480	38		sec				sec
.3481	b5 50		lda $50,x			lda 	esInt0,x
.3483	f5 51		sbc $51,x			sbc 	esInt0+1,x
.3485	95 50		sta $50,x			sta 	esInt0,x
.3487	b5 58		lda $58,x			lda 	esInt1,x
.3489	f5 59		sbc $59,x			sbc 	esInt1+1,x
.348b	95 58		sta $58,x			sta 	esInt1,x
.348d	b5 60		lda $60,x			lda 	esInt2,x
.348f	f5 61		sbc $61,x			sbc 	esInt2+1,x
.3491	95 60		sta $60,x			sta 	esInt2,x
.3493	b5 68		lda $68,x			lda 	esInt3,x
.3495	f5 69		sbc $69,x			sbc 	esInt3+1,x
.3497	95 68		sta $68,x			sta 	esInt3,x
.3499	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32multiply.asm

.349a					MInt32Multiply:
.349a	e8		inx				inx 								; copy 2nd -> 3rd
.349b	20 c0 34	jsr $34c0			jsr 	MInt32CopyUp
.349e	ca		dex				dex
.349f	20 c0 34	jsr $34c0			jsr 	MInt32CopyUp 				; copy 1st -> 2nd
.34a2	20 82 35	jsr $3582			jsr 	MInt32False 				; zero 1st.
.34a5					_I32Loop:
.34a5	b5 52		lda $52,x			lda 	esInt0+2,x 					; get low bit of 3rd
.34a7	29 01		and #$01			and 	#1
.34a9	f0 03		beq $34ae			beq 	_I32NoAdd 					; if set
.34ab	20 66 34	jsr $3466			jsr 	MInt32Add 					; add 2nd to 1st.
.34ae					_I32NoAdd:
.34ae	e8		inx				inx 								; shift 2nd left
.34af	20 97 35	jsr $3597			jsr 	MInt32ShiftLeft
.34b2	e8		inx				inx  								; shift 3rd right
.34b3	20 a0 35	jsr $35a0			jsr 	MInt32ShiftRight
.34b6	20 a9 35	jsr $35a9			jsr 	MInt32Zero 					; check if zero.
.34b9	08		php				php 								; save status bits
.34ba	ca		dex				dex 	 							; point back to 1st
.34bb	ca		dex				dex
.34bc	28		plp				plp 								; get status bits
.34bd	d0 e6		bne $34a5			bne 	_I32Loop 					; if non-zero keep going.
.34bf	60		rts				rts
.34c0					MInt32CopyUp:
.34c0	b5 50		lda $50,x			lda 	esInt0,x
.34c2	95 51		sta $51,x			sta 	esInt0+1,x
.34c4	b5 58		lda $58,x			lda 	esInt1,x
.34c6	95 59		sta $59,x			sta 	esInt1+1,x
.34c8	b5 60		lda $60,x			lda 	esInt2,x
.34ca	95 61		sta $61,x			sta 	esInt2+1,x
.34cc	b5 68		lda $68,x			lda 	esInt3,x
.34ce	95 69		sta $69,x			sta 	esInt3+1,x
.34d0	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32tostr.asm

>0cde					MCharCount:	.fill 	1						; count of converted characters
.34d1					MLInt32ToString:
.34d1	aa		tax				tax									; module passes stack in A, base in Y
.34d2	98		tya				tya
.34d3	20 d8 34	jsr $34d8			jsr 	MInt32ToString
.34d6	8a		txa				txa
.34d7	60		rts				rts
.34d8					MInt32ToString:
.34d8	48		pha				pha 								; save base
.34d9	85 32		sta $32				sta 	tempShort 					; save target base.
.34db	a9 00		lda #$00			lda 	#0
.34dd	8d de 0c	sta $0cde			sta 	MCharCount 					; clear character count to 0
.34e0	98		tya				tya
.34e1	48		pha				pha
.34e2	a5 32		lda $32				lda 	tempShort 					; check if we are signed conversion
.34e4	10 10		bpl $34f6			bpl 	_I32TSUnsigned
.34e6	48		pha				pha 								; save base on stack.
.34e7	b5 68		lda $68,x			lda 	esInt3,x 					; is it actually negative
.34e9	10 08		bpl $34f3			bpl 	_I32TSNoFlip
.34eb	a9 2d		lda #$2d			lda 	#"-" 						; write a '-' prefix out.
.34ed	20 29 35	jsr $3529			jsr 	MI32WriteCharacter
.34f0	20 3c 35	jsr $353c			jsr 	MInt32Negate 				; negate the value, so now it's positive.
.34f3					_I32TSNoFlip:
.34f3	68		pla				pla 								; get the base back
.34f4	29 7f		and #$7f			and 	#$7F 						; clear the sign flag so it's just a base now.
.34f6					_I32TSUnsigned:
.34f6	20 04 35	jsr $3504			jsr 	MI32DivideWrite 			; recursive code to output string.
.34f9	a0 00		ldy #$00			ldy 	#0 							; write charcount to first character.
.34fb	ad de 0c	lda $0cde			lda 	MCharCount
.34fe	91 2a		sta ($2a),y			sta 	(temp0),y
.3500	68		pla				pla
.3501	a8		tay				tay
.3502	68		pla				pla
.3503	60		rts				rts
.3504					MI32DivideWrite:
.3504	48		pha				pha 								; save the divisor/base
.3505	e8		inx				inx 								; write in the dividing position.
.3506	20 91 35	jsr $3591			jsr 	MInt32Set8Bit
.3509	ca		dex				dex
.350a	20 7c 33	jsr $337c			jsr 	MInt32UDivide 				; divide number by base.
.350d	68		pla				pla 								; get the base into Y
.350e	a8		tay				tay
.350f	b5 52		lda $52,x			lda 	esInt0+2,x 					; get the remainder and push on the stack.
.3511	48		pha				pha
.3512	20 a9 35	jsr $35a9			jsr 	MInt32Zero 					; is the result zero ?
.3515	f0 04		beq $351b			beq 	_I32NoRecurse 				; if so, don't recurse.
.3517	98		tya				tya 								; put base into A
.3518	20 04 35	jsr $3504			jsr 	MI32DivideWrite 				; and jsr the dividor recursively.
.351b					_I32NoRecurse:
.351b	68		pla				pla 								; get the remainder back
.351c	c9 0a		cmp #$0a			cmp 	#10  						; handle hexadecimals, now converting to ASCII
.351e	90 02		bcc $3522			bcc 	_I32NotHex
.3520	69 06		adc #$06			adc 	#7-1
.3522					_I32NotHex:
.3522	18		clc				clc 								; make it ASCII
.3523	69 30		adc #$30			adc 	#48
.3525	20 29 35	jsr $3529			jsr 	MI32WriteCharacter 			; write the character out
.3528	60		rts				rts 								; and exit.
.3529					MI32WriteCharacter:
.3529	ee de 0c	inc $0cde			inc 	MCharCount 					; bump count (space for leading count)
.352c	ac de 0c	ldy $0cde			ldy 	MCharCount 					; get position
.352f	91 2a		sta ($2a),y			sta 	(temp0),y 					; write out with trailing 0
.3531	c8		iny				iny
.3532	a9 00		lda #$00			lda 	#0
.3534	91 2a		sta ($2a),y			sta 	(temp0),y
.3536	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32unary.asm

>0cdf					MSeed32:	.fill 	4							; random number seed.
.3537					MInt32Absolute:
.3537	b5 68		lda $68,x			lda 	esInt3,x 					; use negate code if -ve.
.3539	30 01		bmi $353c			bmi 	MInt32Negate
.353b	60		rts				rts
.353c					MInt32Negate:
.353c	38		sec				sec 								; subtract from zero.
.353d	a9 00		lda #$00			lda 	#0
.353f	f5 50		sbc $50,x			sbc 	esInt0,x
.3541	95 50		sta $50,x			sta 	esInt0,x
.3543	a9 00		lda #$00			lda 	#0
.3545	f5 58		sbc $58,x			sbc 	esInt1,x
.3547	95 58		sta $58,x			sta 	esInt1,x
.3549	a9 00		lda #$00			lda 	#0
.354b	f5 60		sbc $60,x			sbc 	esInt2,x
.354d	95 60		sta $60,x			sta 	esInt2,x
.354f	a9 00		lda #$00			lda 	#0
.3551	f5 68		sbc $68,x			sbc 	esInt3,x
.3553	95 68		sta $68,x			sta 	esInt3,x
.3555	60		rts				rts
.3556					MInt32Not:
.3556	b5 50		lda $50,x			lda 	esInt0,x 					; one's complement all four.
.3558	49 ff		eor #$ff			eor 	#$FF
.355a	95 50		sta $50,x			sta 	esInt0,x
.355c	b5 58		lda $58,x			lda 	esInt1,x
.355e	49 ff		eor #$ff			eor 	#$FF
.3560	95 58		sta $58,x			sta 	esInt1,x
.3562	b5 60		lda $60,x			lda 	esInt2,x
.3564	49 ff		eor #$ff			eor 	#$FF
.3566	95 60		sta $60,x			sta 	esInt2,x
.3568	b5 68		lda $68,x			lda 	esInt3,x
.356a	49 ff		eor #$ff			eor 	#$FF
.356c	95 68		sta $68,x			sta 	esInt3,x
.356e	60		rts				rts
.356f					MInt32Sign:
.356f	b5 68		lda $68,x			lda 	esInt3,x					; look at MSB
.3571	30 0b		bmi $357e			bmi 	MInt32True 					; if set return -1 (true)
.3573	20 a9 35	jsr $35a9			jsr 	MInt32Zero 					; is it zero ?
.3576	f0 0a		beq $3582			beq 	MInt32False 				; if zero return 0 (false)
.3578	20 82 35	jsr $3582			jsr 	MInt32False 				; > 0 return 1, by setting it to zero
.357b	f6 50		inc $50,x			inc 	esInt0,x  					; and bumping the LSB.
.357d	60		rts				rts
.357e					MInt32True:
.357e	a9 ff		lda #$ff			lda 	#$FF 						; set to $FFFFFFFF
.3580	d0 02		bne $3584			bne 	MInt32WriteAll
.3582					MInt32False:
.3582	a9 00		lda #$00			lda 	#0
.3584					MInt32WriteAll:
.3584	95 50		sta $50,x			sta 	esInt0,x
.3586					MInt32Write123:
.3586	95 58		sta $58,x			sta 	esInt1,x
.3588	95 60		sta $60,x			sta 	esInt2,x
.358a	95 68		sta $68,x			sta 	esInt3,x
.358c	a9 00		lda #$00			lda 	#$00						; and make it an integer
.358e	95 48		sta $48,x			sta 	esType,x
.3590	60		rts				rts
.3591					MInt32Set8Bit:
.3591	95 50		sta $50,x			sta 	esInt0,x 					; coopt above function to write
.3593	a9 00		lda #$00			lda 	#0 							; a value 0-255
.3595	f0 ef		beq $3586			beq		MInt32Write123
.3597					MInt32ShiftLeft:
.3597	16 50		asl $50,x			asl 	esInt0,x
.3599	36 58		rol $58,x			rol	 	esInt1,x
.359b	36 60		rol $60,x			rol	 	esInt2,x
.359d	36 68		rol $68,x			rol	 	esInt3,x
.359f	60		rts				rts
.35a0					MInt32ShiftRight:
.35a0	56 68		lsr $68,x			lsr 	esInt3,x
.35a2	76 60		ror $60,x			ror 	esInt2,x
.35a4	76 58		ror $58,x			ror 	esInt1,x
.35a6	76 50		ror $50,x			ror 	esInt0,x
.35a8	60		rts				rts
.35a9					MInt32Zero:
.35a9	b5 50		lda $50,x			lda 	esInt0,x
.35ab	15 58		ora $58,x			ora 	esInt1,x
.35ad	15 60		ora $60,x			ora 	esInt2,x
.35af	15 68		ora $68,x			ora 	esInt3,x
.35b1	60		rts				rts
.35b2					MInt32Random:
.35b2	98		tya				tya
.35b3	48		pha				pha
.35b4	a0 07		ldy #$07			ldy 	#7 							; do it 7 times
.35b6	ad df 0c	lda $0cdf			lda 	MSeed32+0 					; check the seed isn't zero
.35b9	d0 03		bne $35be			bne 	_Random1
.35bb	a8		tay				tay 								; if so do it 256 times
.35bc	a9 aa		lda #$aa			lda		#$AA 						; and use this to seed the seed....
.35be					_Random1:
.35be	0a		asl a				asl 	a
.35bf	2e e0 0c	rol $0ce0			rol 	MSeed32+1
.35c2	2e e1 0c	rol $0ce1			rol 	MSeed32+2
.35c5	2e e2 0c	rol $0ce2			rol 	MSeed32+3
.35c8	90 02		bcc $35cc			bcc 	_Random2
.35ca	49 c5		eor #$c5			eor 	#$C5
.35cc					_Random2:
.35cc	88		dey				dey
.35cd	d0 ef		bne $35be			bne 	_Random1
.35cf	8d df 0c	sta $0cdf			sta 	MSeed32+0 					; copy the seed in.
.35d2	95 50		sta $50,x			sta 	esInt0,x
.35d4	ad e0 0c	lda $0ce0			lda 	MSeed32+1
.35d7	95 58		sta $58,x			sta 	esInt1,x
.35d9	ad e1 0c	lda $0ce1			lda 	MSeed32+2
.35dc	95 60		sta $60,x			sta 	esInt2,x
.35de	ad e2 0c	lda $0ce2			lda 	MSeed32+3
.35e1	95 68		sta $68,x			sta 	esInt3,x
.35e3	68		pla				pla
.35e4	a8		tay				tay
.35e5	a9 00		lda #$00			lda 	#0
.35e7	95 48		sta $48,x			sta 	esType,x
.35e9	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/utility/check.asm

.35ea					CheckToken:
.35ea	d1 28		cmp ($28),y			cmp 	(codePtr),y
.35ec	d0 02		bne $35f0			bne 	_CTError
.35ee	c8		iny				iny
.35ef	60		rts				rts
.35f0					_CTError:
.35f0	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.35f2	20 18 15	jsr $1518		jsr	errorHandler
.35f5					CheckRightParen:
.35f5	b1 28		lda ($28),y			lda 	(codePtr),y
.35f7	c8		iny				iny
.35f8	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.35fa	d0 01		bne $35fd			bne 	_CRPError
.35fc	60		rts				rts
.35fd					_CRPError:
.35fd	a2 09		ldx #$09			ldx 	#ErrorID_MissingRP
.35ff	20 18 15	jsr $1518		jsr	errorHandler
.3602					CheckComma:
.3602	b1 28		lda ($28),y			lda 	(codePtr),y
.3604	c8		iny				iny
.3605	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.3607	d0 01		bne $360a			bne 	_CCError
.3609	60		rts				rts
.360a					_CCError:
.360a	a2 0a		ldx #$0a			ldx 	#ErrorID_MissingComma
.360c	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/utility/stack.asm

.0037					rsPointer:
>0037							.fill 	2							; to TOS, which is the current top-token.
.360f					RSReset:
.360f	a9 ff		lda #$ff			lda 	#(returnStack+retStackSize-1) & $FF
.3611	85 37		sta $37				sta 	rsPointer
.3613	a9 09		lda #$09			lda 	#(returnStack+retStackSize-1) >> 8
.3615	85 38		sta $38				sta 	1+(rsPointer)
.3617	a9 ff		lda #$ff			lda 	#$FF 						; put a duff marker on TOS, so nothing will pop
.3619	8d ff 09	sta $09ff			sta 	returnStack+retStackSize-1
.361c	60		rts				rts
.361d					RSClaim:
.361d	84 32		sty $32				sty 	tempShort 					; preserve Y
.361f	48		pha				pha 								; save marker on stack.
.3620	8a		txa				txa 								; get bytes required.
.3621	38		sec				sec
.3622	49 ff		eor #$ff			eor 	#$FF 						; add to rsPointer using 2's complement.
.3624	65 37		adc $37				adc 	rsPointer
.3626	85 37		sta $37				sta 	rsPointer
.3628	a5 38		lda $38				lda 	rsPointer+1
.362a	69 ff		adc #$ff			adc 	#$FF
.362c	85 38		sta $38				sta 	rsPointer+1
.362e	c9 08		cmp #$08			cmp 	#returnStack>>8 			; overflow. underflow actually :)
.3630	90 08		bcc $363a			bcc 	_RSCOverflow
.3632	68		pla				pla 								; get marker back
.3633	a0 00		ldy #$00			ldy 	#0 							; write marker out.
.3635	91 37		sta ($37),y			sta 	(rsPointer),y
.3637	a4 32		ldy $32				ldy 	tempShort 					; restore Y and exit
.3639	60		rts				rts
.363a					_RSCOverflow:
.363a	a2 16		ldx #$16			ldx 	#ErrorID_RetStack
.363c	20 18 15	jsr $1518		jsr	errorHandler
.363f					RSFree:
.363f	18		clc				clc
.3640	65 37		adc $37				adc 	rsPointer
.3642	85 37		sta $37				sta 	rsPointer
.3644	90 02		bcc $3648			bcc 	_RSFExit
.3646	e6 38		inc $38				inc 	rsPointer+1
.3648					_RSFExit:
.3648	60		rts				rts
.3649					RSSavePosition:
.3649	84 32		sty $32				sty 	tempShort 					; save Y position
.364b	a8		tay				tay 								; this is where we write it.
.364c	a5 28		lda $28				lda 	codePtr 					; write codePointer out
.364e	91 37		sta ($37),y			sta 	(rsPointer),y
.3650	c8		iny				iny
.3651	a5 29		lda $29				lda 	codePtr+1
.3653	91 37		sta ($37),y			sta 	(rsPointer),y
.3655	c8		iny				iny
.3656	a5 32		lda $32				lda 	tempShort 					; write the Y position out.
.3658	91 37		sta ($37),y			sta 	(rsPointer),y
.365a	a8		tay				tay 								; fix Y back again to original value
.365b	60		rts				rts
.365c					RSLoadPosition:
.365c	a8		tay				tay
.365d	b1 37		lda ($37),y			lda 	(rsPointer),y 				; read codePointer back
.365f	85 28		sta $28				sta 	codePtr
.3661	c8		iny				iny
.3662	b1 37		lda ($37),y			lda 	(rsPointer),y
.3664	85 29		sta $29				sta 	codePtr+1
.3666	c8		iny				iny
.3667	b1 37		lda ($37),y			lda 	(rsPointer),y 				; and the offset
.3669	a8		tay				tay 								; to Y
.366a	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/utility/warmstart.asm

.366b					WarmStart:
.366b	a2 04		ldx #$04		ldx	#4
.366d	20 d6 1f	jsr $1fd6		jsr	interactionHandler

;******  Return to file: main/main.asm

.3670					mainHandler:
.3670	7c 73 36	jmp ($3673,x)			jmp 	(mainVectors,x)
.3673					mainVectors:
>3673	8f 36					.word _DummyControlHandler ; index 0
>3675	02 36					.word CheckComma           ; index 2
>3677	f5 35					.word CheckRightParen      ; index 4
>3679	de 27					.word XCommandClear        ; index 6
>367b	05 2f					.word LinkEvaluate         ; index 8
>367d	11 2f					.word LinkEvaluateInteger  ; index 10
>367f	1d 2f					.word LinkEvaluateSmallInt ; index 12
>3681	17 2f					.word LinkEvaluateString   ; index 14
>3683	0b 2f					.word LinkEvaluateTerm     ; index 16
>3685	d1 34					.word MLInt32ToString      ; index 18
>3687	6d 29					.word Command_XNew         ; index 20
>3689	7b 29					.word XCommand_Run         ; index 22
>368b	87 29					.word Command_RunFrom      ; index 24
>368d	e9 33					.word LinkInt32FromString  ; index 26
.368f					_DummyControlHandler:
.368f	60		rts			rts

;******  Return to file: basic.asm

.3690					section_end_main:
.3690					section_start_string:

;******  Processing file: string/string.asm


;******  Processing file: string/functions/chr.asm

.3690					StringChrs:
.3690	aa		tax				tax 								; set up stack
.3691	a9 02		lda #$02			lda 	#2
.3693	20 53 37	jsr $3753			jsr 	AllocateSoftString
.3696	98		tya				tya
.3697	20 79 37	jsr $3779			jsr 	WriteSoftString
.369a					StringUpdate:
.369a	20 a8 36	jsr $36a8			jsr 	ReturnSoftString
.369d	8a		txa				txa
.369e	60		rts				rts
.369f					StringNull:
.369f	aa		tax				tax
.36a0	a9 01		lda #$01			lda 	#1
.36a2	20 53 37	jsr $3753			jsr 	AllocateSoftString
.36a5	4c 9a 36	jmp $369a			jmp 	StringUpdate
.36a8					ReturnSoftString:
.36a8	a5 39		lda $39				lda 	softMemAlloc 				; copy address
.36aa	95 50		sta $50,x			sta 	esInt0,x
.36ac	a5 3a		lda $3a				lda 	softMemAlloc+1
.36ae	95 58		sta $58,x			sta 	esInt1,x
.36b0	a9 00		lda #$00			lda 	#0 							; zero upper bytes
.36b2	95 60		sta $60,x			sta 	esInt2,x
.36b4	95 68		sta $68,x			sta 	esInt3,x
.36b6	a9 40		lda #$40			lda 	#$40 						; type string.
.36b8	95 48		sta $48,x			sta 	esType,x
.36ba	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/functions/compare.asm

.36bb					STRCompare:
.36bb	48		pha				pha 								; save A
.36bc	aa		tax				tax 								; put stack pos in X
.36bd	98		tya				tya
.36be	48		pha				pha
.36bf	20 f3 36	jsr $36f3			jsr 	CopyStringPair 				; copy strings to temp0,temp1
.36c2	a0 00		ldy #$00			ldy 	#0 							; get the smaller of the two string sizes.
.36c4	b1 2a		lda ($2a),y			lda 	(temp0),y
.36c6	d1 2c		cmp ($2c),y			cmp 	(temp1),y
.36c8	90 02		bcc $36cc			bcc 	_SCNotSmaller
.36ca	b1 2c		lda ($2c),y			lda 	(temp1),y
.36cc					_SCNotSmaller:
.36cc	aa		tax				tax 								; put that in X. We compare this many chars first.
.36cd					_SCCompareLoop:
.36cd	e0 00		cpx #$00			cpx 	#0 							; if compared all the smaller, then it is the shorter
.36cf	f0 0c		beq $36dd			beq 	_SCSameToEndShortest 		; one that is the smallest if they are different lengths.
.36d1	ca		dex				dex 								; decrement chars to compare.
.36d2	c8		iny				iny 								; move to next character
.36d3	38		sec				sec 								; calculate s1[y]-s2[y]
.36d4	b1 2a		lda ($2a),y			lda 	(temp0),y
.36d6	f1 2c		sbc ($2c),y			sbc 	(temp1),y
.36d8	d0 0a		bne $36e4			bne 	_SCReturnResult 			; if different return sign of A
.36da	4c cd 36	jmp $36cd			jmp 	_SCCompareLoop
.36dd					_SCSameToEndShortest
.36dd	a0 00		ldy #$00			ldy 	#0 							; compare len(s1) - len(s2)
.36df	38		sec				sec
.36e0	b1 2a		lda ($2a),y			lda 	(temp0),y
.36e2	f1 2c		sbc ($2c),y			sbc 	(temp1),y
.36e4					_SCReturnResult:
.36e4	08		php				php 								; set return to zero preserving PSW.
.36e5	a2 00		ldx #$00			ldx 	#0
.36e7	28		plp				plp
.36e8	f0 05		beq $36ef			beq 	_SCExit 					; two values equal, then exit
.36ea	ca		dex				dex 								; X = $FF
.36eb	90 02		bcc $36ef			bcc 	_SCExit 					; if 1st < 2nd then -1
.36ed	a2 01		ldx #$01			ldx 	#1 							; X = $01 if greater
.36ef					_SCExit:
.36ef	68		pla				pla
.36f0	a8		tay				tay
.36f1	68		pla				pla
.36f2	60		rts				rts
.36f3					CopyStringPair:
.36f3	b5 51		lda $51,x			lda 	esInt0+1,x
.36f5	85 2c		sta $2c				sta 	temp1
.36f7	b5 59		lda $59,x			lda 	esInt1+1,x
.36f9	85 2d		sta $2d				sta 	temp1+1
.36fb					CopyStringTop:
.36fb	b5 50		lda $50,x			lda 	esInt0,x
.36fd	85 2a		sta $2a				sta 	temp0
.36ff	b5 58		lda $58,x			lda 	esInt1,x
.3701	85 2b		sta $2b				sta 	temp0+1
.3703	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/functions/concat.asm

.3704					StringConcat:
.3704	aa		tax				tax									; stack pos in X
.3705	98		tya				tya
.3706	48		pha				pha
.3707	20 f3 36	jsr $36f3			jsr 	CopyStringPair 				; temp0 and temp1 point to strings to concat.
.370a	38		sec				sec 								; calculate alloc strings. lengths added + 1 for size.
.370b	a0 00		ldy #$00			ldy 	#0
.370d	b1 2a		lda ($2a),y			lda 	(temp0),y
.370f	71 2c		adc ($2c),y			adc 	(temp1),y
.3711	b0 1c		bcs $372f			bcs 	_SCError 					; just too many characters here.
.3713	c9 fc		cmp #$fc			cmp 	#MaxStringSize
.3715	b0 18		bcs $372f			bcs 	_SCError
.3717	20 53 37	jsr $3753			jsr 	AllocateSoftString 			; allocate soft string memory, set pointer.
.371a	20 4a 37	jsr $374a			jsr 	CopySoftToStack 			; copy that to the stack.
.371d	20 34 37	jsr $3734			jsr 	SCCopyTemp0 				; copy temp0
.3720	a5 2c		lda $2c				lda 	temp1 						; copy temp1 to temp0
.3722	85 2a		sta $2a				sta 	temp0
.3724	a5 2d		lda $2d				lda 	temp1+1
.3726	85 2b		sta $2b				sta 	temp0+1
.3728	20 34 37	jsr $3734			jsr 	SCCopyTemp0 				; copy temp0 e.g. what was temp1.
.372b	68		pla				pla
.372c	a8		tay				tay
.372d	8a		txa				txa 								; and A
.372e	60		rts				rts
.372f					_SCError:
.372f	a2 0d		ldx #$0d			ldx 	#ErrorID_StrLen
.3731	20 18 15	jsr $1518		jsr	errorHandler
.3734					SCCopyTemp0:
.3734	a0 00		ldy #$00			ldy 	#0 							; put count in temp2
.3736	b1 2a		lda ($2a),y			lda 	(temp0),y
.3738	85 2e		sta $2e				sta 	temp2
.373a					_SCCopyLoop:
.373a	a5 2e		lda $2e				lda 	temp2 						; done the lot
.373c	f0 0b		beq $3749			beq 	_SCCopyExit
.373e	c6 2e		dec $2e				dec 	temp2
.3740	c8		iny				iny 								; get next char
.3741	b1 2a		lda ($2a),y			lda 	(temp0),y
.3743	20 79 37	jsr $3779			jsr 	WriteSoftString 			; write to soft string.
.3746	4c 3a 37	jmp $373a			jmp 	_SCCopyLoop
.3749					_SCCopyExit:
.3749	60		rts				rts
.374a					CopySoftToStack:
.374a	a5 39		lda $39				lda 	SoftMemAlloc 				; copy the memory allocation pointer to the stack.
.374c	95 50		sta $50,x			sta 	esInt0,x 					; type is already string.
.374e	a5 3a		lda $3a				lda 	SoftMemAlloc+1
.3750	95 58		sta $58,x			sta 	esInt1,x
.3752	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/functions/memory.asm

.0039					softMemAlloc:
>0039							.fill 	2  							; if MSB is zero needs resetting on allocation.
.3753					AllocateSoftString:
.3753	85 32		sta $32				sta 	tempShort 					; save count
.3755	98		tya				tya
.3756	48		pha				pha
.3757	a5 3a		lda $3a				lda 	softMemAlloc+1 				; if the high byte is zero, it needs allocating.
.3759	d0 09		bne $3764			bne 	_ASSDone
.375b	a5 33		lda $33				lda 	highMemory 					; reset the soft memory alloc pointer.
.375d	85 39		sta $39				sta 	softMemAlloc 				; to speed up slightly, we only reset this when we first need it
.375f	a4 34		ldy $34				ldy 	highMemory+1 				; but it needs to be reset before each command.
.3761	88		dey				dey 								; it is set to 1/4k below high memory, allowing space
.3762	84 3a		sty $3a				sty 	softMemAlloc+1 				; for a concreted string.
.3764					_ASSDone:
.3764	38		sec				sec 								; allocate downwards enough memory
.3765	a5 39		lda $39				lda 	softMemAlloc 				; subtract the memory requirements in A from
.3767	e5 32		sbc $32				sbc 	tempShort 					; the soft memory pointer
.3769	85 39		sta $39				sta 	softMemAlloc
.376b	a5 3a		lda $3a				lda 	softMemAlloc+1
.376d	e9 00		sbc #$00			sbc 	#0
.376f	85 3a		sta $3a				sta 	softMemAlloc+1
.3771	a9 00		lda #$00			lda 	#0 							; empty that string, set the length = 0.
.3773	a8		tay				tay
.3774	91 39		sta ($39),y			sta 	(softMemAlloc),y
.3776	68		pla				pla
.3777	a8		tay				tay
.3778	60		rts				rts
.3779					WriteSoftString:
.3779	84 32		sty $32				sty 	tempShort 					; save Y
.377b	48		pha				pha 								; save character on stack
.377c	a0 00		ldy #$00			ldy 	#0 							; get and bump length
.377e	b1 39		lda ($39),y			lda 	(softMemAlloc),y
.3780	18		clc				clc
.3781	69 01		adc #$01			adc 	#1
.3783	91 39		sta ($39),y			sta 	(softMemAlloc),y
.3785	a8		tay				tay 								; offset in Y
.3786	68		pla				pla 								; get char and write.
.3787	91 39		sta ($39),y			sta 	(softMemAlloc),y
.3789	a4 32		ldy $32				ldy 	tempShort 					; restore Y and exit.
.378b	60		rts				rts
.378c					StrClone:
.378c	aa		tax				tax 								; set up stack.
.378d	98		tya				tya
.378e	48		pha				pha
.378f	a0 00		ldy #$00			ldy 	#0 							; get length, add 1 for length
.3791	b1 2a		lda ($2a),y			lda 	(temp0),y 					; this is the bytes required.
.3793	18		clc				clc
.3794	69 01		adc #$01			adc 	#1
.3796	20 53 37	jsr $3753			jsr 	AllocateSoftString 			; allocate soft memory
.3799	a5 39		lda $39				lda 	softMemAlloc 				; copy that address to TOS
.379b	95 50		sta $50,x			sta 	esInt0,x
.379d	a5 3a		lda $3a				lda 	softMemAlloc+1
.379f	95 58		sta $58,x			sta 	esInt1,x
.37a1	a9 00		lda #$00			lda 	#0 							; zero upper 2 bytes
.37a3	95 60		sta $60,x			sta 	esInt2,x
.37a5	95 68		sta $68,x			sta 	esInt3,x
.37a7	a9 40		lda #$40			lda 	#$40 						; set type to string.
.37a9	95 48		sta $48,x			sta 	esType,x
.37ab	20 34 37	jsr $3734			jsr 	SCCopyTemp0 				; copy temp0 string to soft memory copy (concat.asm)
.37ae	68		pla				pla
.37af	a8		tay				tay
.37b0	8a		txa				txa
.37b1	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/functions/setcase.asm

.37b2					CaseString:
.37b2	48		pha				pha 								; save A and copy to X
.37b3	aa		tax				tax
.37b4	98		tya				tya
.37b5	48		pha				pha
.37b6	20 fb 36	jsr $36fb			jsr 	CopyStringTop 				; target string -> temp0
.37b9	a0 00		ldy #$00			ldy 	#0
.37bb	b1 2a		lda ($2a),y			lda 	(temp0),y  					; get length,
.37bd	18		clc				clc
.37be	69 01		adc #$01			adc 	#1 							; one more for length byte
.37c0	20 53 37	jsr $3753			jsr 	AllocateSoftString 			; allocate soft string memory, set pointer.
.37c3	20 4a 37	jsr $374a			jsr 	CopySoftToStack 			; copy that to the stack.
.37c6	a0 00		ldy #$00			ldy 	#0
.37c8	b1 2a		lda ($2a),y			lda 	(temp0),y 					; count to copy in X
.37ca	aa		tax				tax
.37cb					_CSCopy:
.37cb	e0 00		cpx #$00			cpx 	#0 							; finished if 0.
.37cd	f0 24		beq $37f3			beq 	_CSExit
.37cf	ca		dex				dex
.37d0	c8		iny				iny
.37d1	68		pla				pla 								; check direction
.37d2	48		pha				pha
.37d3	f0 0c		beq $37e1			beq 	_CSUpper
.37d5	b1 2a		lda ($2a),y			lda 	(temp0),y 					; lower$() code
.37d7	c9 41		cmp #$41			cmp 	#"A"
.37d9	90 12		bcc $37ed			bcc 	_CSWrite
.37db	c9 5b		cmp #$5b			cmp 	#"Z"+1
.37dd	b0 0e		bcs $37ed			bcs 	_CSWrite
.37df	90 0a		bcc $37eb			bcc 	_CSFlipWrite
.37e1					_CSUpper:
.37e1	b1 2a		lda ($2a),y			lda 	(temp0),y 					; upper$() code
.37e3	c9 61		cmp #$61			cmp 	#"a"
.37e5	90 06		bcc $37ed			bcc 	_CSWrite
.37e7	c9 7b		cmp #$7b			cmp 	#"z"+1
.37e9	b0 02		bcs $37ed			bcs 	_CSWrite
.37eb					_CSFlipWrite:
.37eb	49 20		eor #$20			eor 	#"A"^"a" 					; switch case.
.37ed					_CSWrite:
.37ed	20 79 37	jsr $3779			jsr 	WriteSoftString 			; add to soft string.
.37f0	4c cb 37	jmp $37cb			jmp 	_CSCopy
.37f3					_CSExit:
.37f3	68		pla				pla
.37f4	a8		tay				tay
.37f5	68		pla				pla
.37f6	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/functions/substring.asm

.37f7					StringSubstring:
.37f7	48		pha				pha
.37f8	aa		tax				tax 								; access stack.
.37f9	98		tya				tya
.37fa	48		pha				pha
.37fb	20 fb 36	jsr $36fb			jsr 	CopyStringTop 				; point temp0 to the string.
.37fe	a0 00		ldy #$00			ldy 	#0 							; get length.
.3800	b1 2a		lda ($2a),y			lda 	(temp0),Y
.3802	85 2c		sta $2c				sta 	temp1
.3804	b5 51		lda $51,x			lda 	esInt0+1,x 					; get the initial offset
.3806	c5 2c		cmp $2c				cmp 	temp1 						; return "" if > length.
.3808	f0 02		beq $380c			beq 	_SSBOkay
.380a	b0 2a		bcs $3836			bcs 	_SSBReturnNull
.380c					_SSBOkay:
.380c	a5 2c		lda $2c				lda 	temp1 						; get the total length +1
.380e	18		clc				clc
.380f	69 01		adc #$01			adc 	#1
.3811	38		sec				sec
.3812	f5 51		sbc $51,x			sbc 	esInt0+1,x 					; the anything >= this is bad - max size
.3814	d5 52		cmp $52,x			cmp 	esInt0+2,x  				; check bad >= required
.3816	90 02		bcc $381a			bcc		_SSBTrunc
.3818	b5 52		lda $52,x			lda 	esInt0+2,x
.381a					_SSBTrunc:
.381a	85 2d		sta $2d				sta 	temp1+1 					; characters to copy.
.381c	18		clc				clc
.381d	69 01		adc #$01			adc 	#1 							; add 1
.381f	20 53 37	jsr $3753			jsr 	AllocateSoftString 			; allocate soft string memory, set pointer.
.3822	20 4a 37	jsr $374a			jsr 	CopySoftToStack 			; copy that to the stack.
.3825	b4 51		ldy $51,x			ldy 	esInt0+1,x 					; get initial position of char to copy
.3827					_SSBCopyLoop:
.3827	a5 2d		lda $2d				lda 	temp1+1 					; done them all
.3829	f0 0e		beq $3839			beq 	_SSBExit
.382b	c6 2d		dec $2d				dec 	temp1+1
.382d	b1 2a		lda ($2a),y			lda 	(temp0),y 					; get and write character
.382f	20 79 37	jsr $3779			jsr 	WriteSoftString
.3832	c8		iny				iny
.3833	4c 27 38	jmp $3827			jmp 	_SSBCopyLoop
.3836					_SSBReturnNull:
.3836	20 3d 38	jsr $383d			jsr 	ReturnNull
.3839					_SSBExit:
.3839	68		pla				pla
.383a	a8		tay				tay
.383b	68		pla				pla
.383c	60		rts				rts
.383d					ReturnNull:
.383d	a9 00		lda #$00			lda 	#0 							; clear null string
.383f	8d ce 0a	sta $0ace			sta 	NullString
.3842	a9 ce		lda #$ce			lda 	#NullString & $FF 			; set a pointer to it
.3844	95 50		sta $50,x			sta 	esInt0,x
.3846	a9 0a		lda #$0a			lda 	#NullString >> 8
.3848	95 58		sta $58,x			sta 	esInt1,x
.384a	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/functions/write.asm

.0ce3					srcStrLen:
>0ce3							.fill 	1
.384b					StringWrite:
.384b	aa		tax				tax
.384c	48		pha				pha
.384d	98		tya				tya
.384e	48		pha				pha
.384f	20 76 38	jsr $3876			jsr 	CheckOverwriteCurrent
.3852	b0 0d		bcs $3861			bcs		_SWCopyCurrent
.3854	20 b4 38	jsr $38b4			jsr 	RequiresConcretion
.3857	90 0e		bcc $3867			bcc 	_SWWriteReference
.3859	20 17 39	jsr $3917			jsr 	CheckSpecialConcretion
.385c	b0 09		bcs $3867			bcs 	_SWWriteReference
.385e	20 c8 38	jsr $38c8			jsr 	AllocateHardMemory
.3861					_SWCopyCurrent:
.3861	20 fb 38	jsr $38fb			jsr 	CopyStringToHardMemory
.3864	4c 72 38	jmp $3872			jmp 	_SWExit
.3867					_SWWriteReference
.3867	a0 00		ldy #$00			ldy 	#0
.3869	a5 2a		lda $2a				lda 	temp0
.386b	91 2c		sta ($2c),y			sta 	(temp1),y
.386d	c8		iny				iny
.386e	a5 2b		lda $2b				lda 	temp0+1
.3870	91 2c		sta ($2c),y			sta 	(temp1),y
.3872					_SWExit:
.3872	68		pla				pla
.3873	a8		tay				tay
.3874	68		pla				pla
.3875	60		rts				rts
.3876					CheckOverwriteCurrent:
.3876	a0 00		ldy #$00			ldy 	#0 						; get address of string being written to temp0
.3878	b5 59		lda $59,x			lda 	esInt1+1,x
.387a	85 2b		sta $2b				sta 	temp0+1
.387c	b5 51		lda $51,x			lda 	esInt0+1,x
.387e	85 2a		sta $2a				sta 	temp0
.3880	b1 2a		lda ($2a),y			lda 	(temp0),y 				; get length of string being copied and save it.
.3882	8d e3 0c	sta $0ce3			sta 	srcStrLen
.3885	b5 50		lda $50,x			lda 	esInt0,x 				; copy where the final address it being written to temp1.
.3887	85 2c		sta $2c				sta 	temp1 					; e.g. if it is ax$ then temp1 will point to the ax$
.3889	b5 58		lda $58,x			lda 	esInt1,x 				; data record + 5
.388b	85 2d		sta $2d				sta 	temp1+1
.388d	a0 01		ldy #$01			ldy 	#1 						; get the MSB of the address of string currently stored there.
.388f	b1 2c		lda ($2c),y			lda 	(temp1),y
.3891	c5 34		cmp $34				cmp 	highMemory+1 			; if < high memory then it cannot be something stored
.3893	90 1b		bcc $38b0			bcc 	_COCFail 				; in hard memory.
.3895	a0 00		ldy #$00			ldy 	#0 						; copy target address - 1 into temp2
.3897	b1 2c		lda ($2c),y			lda 	(temp1),y 				; when allocating hard memory, the overall size is
.3899	e9 01		sbc #$01			sbc 	#1 						; in the previous byte.
.389b	85 2e		sta $2e				sta 	temp2
.389d	c8		iny				iny
.389e	b1 2c		lda ($2c),y			lda 	(temp1),y
.38a0	e9 00		sbc #$00			sbc 	#0
.38a2	85 2f		sta $2f				sta 	temp2+1
.38a4	a0 00		ldy #$00			ldy 	#0 						; how large is this physical chunk.
.38a6	b1 2e		lda ($2e),y			lda 	(temp2),y
.38a8	38		sec				sec  							; maximum character capacity.
.38a9	e9 02		sbc #$02			sbc 	#2
.38ab	cd e3 0c	cmp $0ce3			cmp 	srcStrLen 				; if >= the required length
.38ae	b0 02		bcs $38b2			bcs 	_COCCanReuse
.38b0					_COCFail:
.38b0	18		clc				clc
.38b1	60		rts				rts
.38b2					_COCCanReuse:
.38b2	38		sec				sec
.38b3	60		rts				rts
.38b4					RequiresConcretion:
.38b4	a5 2b		lda $2b				lda 	temp0+1 				; get MSB of address of string to be written
.38b6	c5 34		cmp $34				cmp 	highMemory+1 			; if >= high memory it is concreted
.38b8	b0 0a		bcs $38c4			bcs 	_RCSucceed 				; so it needs concreting again - duplication.
.38ba	a5 3a		lda $3a				lda 	softMemAlloc+1 			; have we allocated any soft memory yet ?
.38bc	f0 08		beq $38c6			beq 	_RCFail 				; if not, this cannot be soft memory.
.38be	a5 2b		lda $2b				lda 	temp0+1 				; get MSB of address of string to be written
.38c0	c5 3a		cmp $3a				cmp 	softMemAlloc+1 			; if >= soft mem alloc it is either soft
.38c2	90 02		bcc $38c6			bcc 	_RCFail 				; so concreting
.38c4					_RCSucceed:
.38c4	38		sec				sec
.38c5	60		rts				rts
.38c6					_RCFail:
.38c6	18		clc				clc
.38c7	60		rts				rts
.38c8					AllocateHardMemory:
.38c8	98		tya				tya
.38c9	48		pha				pha
.38ca	ad e3 0c	lda $0ce3			lda 	srcStrLen 				; characters in string
.38cd	69 0a		adc #$0a			adc 	#1+1+8 					; one for hard memory size, one for string size, extra for expansion
.38cf	b0 04		bcs $38d5			bcs 	_AHMSetMax 				; max out that amount.
.38d1	c9 fe		cmp #$fe			cmp 	#MaxStringSize+2
.38d3	90 02		bcc $38d7			bcc 	_AHMIsOkay
.38d5					_AHMSetMax:
.38d5	a9 fe		lda #$fe			lda 	#MaxStringSize+2
.38d7					_AHMIsOkay:
.38d7	48		pha				pha	 							; save size to be allocated
.38d8	49 ff		eor #$ff			eor 	#$FF 					; complement and add to high Memory
.38da	38		sec				sec  							; and copy result to TOS as target address.
.38db	65 33		adc $33				adc 	highMemory
.38dd	85 33		sta $33				sta 	highMemory
.38df	a5 34		lda $34				lda 	highMemory+1
.38e1	69 ff		adc #$ff			adc 	#$FF
.38e3	85 34		sta $34				sta 	highMemory+1
.38e5	a0 00		ldy #$00			ldy 	#0 						; Y = 0
.38e7	68		pla				pla 							; get the total size of the storage block
.38e8	91 33		sta ($33),y			sta 	(highMemory),y 			; and set it
.38ea	18		clc				clc
.38eb	a5 33		lda $33				lda		highMemory 				; point the target address to the byte after this.
.38ed	69 01		adc #$01			adc 	#1
.38ef	91 2c		sta ($2c),y			sta 	(temp1),y
.38f1	a5 34		lda $34				lda 	highMemory+1
.38f3	69 00		adc #$00			adc 	#0
.38f5	c8		iny				iny
.38f6	91 2c		sta ($2c),y			sta 	(temp1),y
.38f8	68		pla				pla
.38f9	a8		tay				tay
.38fa	60		rts				rts
.38fb					CopyStringToHardMemory:
.38fb	98		tya				tya
.38fc	48		pha				pha
.38fd	a0 00		ldy #$00			ldy 	#0 						; copy target address to temp2
.38ff	b1 2c		lda ($2c),y			lda 	(temp1),y
.3901	85 2e		sta $2e				sta 	temp2
.3903	c8		iny				iny
.3904	b1 2c		lda ($2c),y			lda 	(temp1),y
.3906	85 2f		sta $2f				sta 	temp2+1
.3908	ac e3 0c	ldy $0ce3			ldy 	srcStrLen 				; copy this + 1 characters, (length too) hence $FF compare
.390b					_CSTHMLoop:
.390b	b1 2a		lda ($2a),y			lda 	(temp0),y
.390d	91 2e		sta ($2e),y			sta 	(temp2),y
.390f	88		dey				dey
.3910	c0 ff		cpy #$ff			cpy 	#$FF 					; this does the +1
.3912	d0 f7		bne $390b			bne 	_CSTHMLoop
.3914	68		pla				pla
.3915	a8		tay				tay
.3916	60		rts				rts
.3917					CheckSpecialConcretion:
.3917	ad e3 0c	lda $0ce3			lda 	srcStrLen 				; check string is null e.g. length = 0
.391a	f0 02		beq $391e			beq 	_CSCNullString
.391c	18		clc				clc
.391d	60		rts				rts
.391e					_CSCNullString:
.391e	a9 00		lda #$00			lda 	#0 						; by always returning this address we don't waste
.3920	8d ce 0a	sta $0ace			sta 	NullString		 		; storage on null strings.
.3923	a9 ce		lda #$ce			lda 	#(NullString) & $FF
.3925	85 2a		sta $2a				sta 	temp0
.3927	a9 0a		lda #$0a			lda 	#(NullString) >> 8
.3929	85 2b		sta $2b				sta 	1+(temp0)
.392b	38		sec				sec
.392c	60		rts				rts

;******  Return to file: string/string.asm

.392d					stringHandler:
.392d	7c 30 39	jmp ($3930,x)			jmp 	(stringVectors,x)
.3930					stringVectors:
>3930	42 39					.word _DummyControlHandler ; index 0
>3932	90 36					.word StringChrs           ; index 2
>3934	8c 37					.word StrClone             ; index 4
>3936	04 37					.word StringConcat         ; index 6
>3938	9f 36					.word StringNull           ; index 8
>393a	bb 36					.word STRCompare           ; index 10
>393c	b2 37					.word CaseString           ; index 12
>393e	f7 37					.word StringSubstring      ; index 14
>3940	4b 38					.word StringWrite          ; index 16
.3942					_DummyControlHandler:
.3942	60		rts			rts

;******  Return to file: basic.asm

.3943					section_end_string:
.3943					section_start_tokeniser:

;******  Processing file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/detokenise/detokenise.asm

.0ce4					deTokeniseVector:
>0ce4							.fill 	2
.0ce6					lastCharacterClass:
>0ce6							.fill 	1
.0ce7					indent:
>0ce7							.fill 	1
.3943					ListLine:
.3943	48		pha				pha								; enter here to list to console. sets the output vector
.3944	a9 7b		lda #$7b			lda 	#(deTokenPrint) & $FF
.3946	8d e4 0c	sta $0ce4			sta 	deTokeniseVector
.3949	a9 3a		lda #$3a			lda 	#(deTokenPrint) >> 8
.394b	8d e5 0c	sta $0ce5			sta 	1+(deTokeniseVector)
.394e	68		pla				pla
.394f					Detokenise:
.394f	18		clc				clc 							; space required for line number.
.3950	69 06		adc #$06			adc 	#6
.3952	8d e7 0c	sta $0ce7			sta 	indent
.3955	a9 ff		lda #$ff			lda 	#$FF 					; last thing printed is a dummy value.
.3957	8d e6 0c	sta $0ce6			sta 	lastCharacterClass
.395a	a2 02		ldx #$02			ldx 	#2
.395c	a9 00		lda #$00			lda 	#0 						; clear upper two bytes
.395e	95 60		sta $60,x			sta 	esInt2,x
.3960	95 68		sta $68,x			sta 	esInt3,x
.3962	a0 01		ldy #$01			ldy 	#1 						; copy line number to stack,2 (as using stack 0,1 for list range)
.3964	b1 28		lda ($28),y			lda 	(codePtr),y
.3966	95 50		sta $50,x			sta 	esInt0,x
.3968	c8		iny				iny
.3969	b1 28		lda ($28),y			lda 	(codePtr),y
.396b	95 58		sta $58,x			sta 	esInt1,x
.396d	a9 84		lda #$84			lda 	#LTYLineNumber
.396f	20 56 3a	jsr $3a56			jsr 	ListOutputCharacter
.3972	a9 0a		lda #$0a			lda 	#10 					; base 10
.3974	20 1a 3a	jsr $3a1a			jsr 	DTPrintInteger 			; print as integer.
.3977	a0 00		ldy #$00			ldy 	#0 						; get length
.3979	b1 2a		lda ($2a),y			lda 	(temp0),y 				; into X
.397b	aa		tax				tax
.397c					_DTPadOut:
.397c	a9 20		lda #$20			lda 	#" " 					; pad out to indent.
.397e	20 56 3a	jsr $3a56			jsr 	ListOutputCharacter
.3981	e8		inx				inx
.3982	ec e7 0c	cpx $0ce7			cpx 	indent
.3985	d0 f5		bne $397c			bne 	_DTPadOut
.3987	a0 03		ldy #$03			ldy 	#3 						; start position.
.3989					_DTListLoop:
.3989	b1 28		lda ($28),y			lda 	(codePtr),y
.398b	c9 85		cmp #$85			cmp 	#TOK_STR 				; Inline string.
.398d	f0 5e		beq $39ed			beq 	_DTIsString
.398f	c9 84		cmp #$84			cmp 	#TOK_FPC 				; Floating point
.3991	f0 56		beq $39e9			beq 	_DTIsFloat
.3993	c9 c5		cmp #$c5			cmp 	#TKW_AMP 				; & hex marker
.3995	f0 16		beq $39ad			beq 	_DTHexConstant
.3997	c9 80		cmp #$80			cmp 	#TOK_EOL 				; End of Line
.3999	d0 06		bne $39a1			bne 	_DTNotEnd
.399b	a9 ff		lda #$ff			lda 	#255 					; print CR
.399d	20 56 3a	jsr $3a56			jsr 	ListOutputCharacter
.39a0	60		rts				rts
.39a1					_DTNotEnd:
.39a1	c9 00		cmp #$00			cmp 	#0
.39a3	30 38		bmi $39dd			bmi 	_DTIsToken
.39a5	c9 40		cmp #$40			cmp 	#$40
.39a7	90 3a		bcc $39e3			bcc 	_DTIsIdentifier
.39a9	a9 0a		lda #$0a			lda 	#10 					; this is the base, unsigned decimal
.39ab	d0 0d		bne $39ba			bne 	_DTConstant
.39ad					_DTHexConstant:
.39ad	a9 26		lda #$26			lda 	#"&"
.39af	20 56 3a	jsr $3a56			jsr 	ListOutputCharacter
.39b2	c8		iny				iny
.39b3	a9 01		lda #$01			lda 	#1 						; switch to spaces so &xxxx is treated like a number.
.39b5	20 97 3a	jsr $3a97			jsr 	DTSwitchMode
.39b8	a9 10		lda #$10			lda 	#16						; print line unsigned hex
.39ba					_DTConstant:
.39ba	48		pha				pha
.39bb	a9 00		lda #$00			lda 	#0 						; now constant, may need spaces
.39bd	20 97 3a	jsr $3a97			jsr 	DTSwitchMode
.39c0	a9 86		lda #$86			lda 	#LTYConstant
.39c2	20 56 3a	jsr $3a56			jsr 	ListOutputCharacter
.39c5	a2 02		ldx #$02			ldx 	#2 						; get its value
.39c7	8a		txa				txa
.39c8	a2 10		ldx #$10		ldx	#16
.39ca	20 70 36	jsr $3670		jsr	mainHandler
.39cd	aa		tax				tax
.39ce	68		pla				pla 							; get base back
.39cf	85 32		sta $32				sta 	tempShort
.39d1	98		tya				tya
.39d2	48		pha				pha
.39d3	a5 32		lda $32				lda 	tempShort 				; print in base A stck level X
.39d5	20 1a 3a	jsr $3a1a			jsr 	DTPrintInteger
.39d8	68		pla				pla
.39d9	a8		tay				tay
.39da	4c 89 39	jmp $3989			jmp 	_DTListLoop
.39dd					_DTIsToken:
.39dd	20 f0 3a	jsr $3af0			jsr 	DTDecodeToken
.39e0	4c 89 39	jmp $3989			jmp 	_DTListLoop
.39e3					_DTIsIdentifier:
.39e3	20 a9 3a	jsr $3aa9			jsr 	DTIdentifier
.39e6	4c 89 39	jmp $3989			jmp 	_DTListLoop
.39e9					_DTIsFloat:
>39e9	db						.byte 	$DB
.39ea	4c e9 39	jmp $39e9			jmp 	_DTIsFloat
.39ed					_DTIsString:
.39ed	a9 01		lda #$01			lda 	#1 							; now punctuation, may need spaces
.39ef	20 97 3a	jsr $3a97			jsr 	DTSwitchMode
.39f2	a9 81		lda #$81			lda 	#LTYString
.39f4	20 56 3a	jsr $3a56			jsr 	ListOutputCharacter
.39f7	a9 22		lda #$22			lda 	#'"'						; open quote
.39f9	20 56 3a	jsr $3a56			jsr 	ListOutputCharacter
.39fc	a2 02		ldx #$02			ldx 	#2 							; evaluate string to TOS2.
.39fe	8a		txa				txa
.39ff	a2 10		ldx #$10		ldx	#16
.3a01	20 70 36	jsr $3670		jsr	mainHandler
.3a04	aa		tax				tax
.3a05	b5 50		lda $50,x			lda 	esInt0,x 					; copy string address to temp0
.3a07	85 2a		sta $2a				sta 	temp0
.3a09	b5 58		lda $58,x			lda 	esInt1,x
.3a0b	85 2b		sta $2b				sta 	temp0+1
.3a0d	a9 00		lda #$00			lda 	#0 							; don't capitalise.
.3a0f	20 2c 3a	jsr $3a2c			jsr 	DTPrintLengthPrefix
.3a12	a9 22		lda #$22			lda 	#'"'
.3a14	20 56 3a	jsr $3a56			jsr 	ListOutputCharacter
.3a17	4c 89 39	jmp $3989			jmp 	_DTListLoop

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/detokenise/dtprint.asm

.0ce8					tPrintCount:
>0ce8							.fill 	1
.3a1a					DTPrintInteger:
.3a1a	48		pha				pha									; save base
.3a1b	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.3a1d	85 2a		sta $2a				sta 	temp0
.3a1f	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.3a21	85 2b		sta $2b				sta 	1+(temp0)
.3a23	68		pla				pla
.3a24	a8		tay				tay
.3a25	8a		txa				txa
.3a26	a2 12		ldx #$12		ldx	#18
.3a28	20 70 36	jsr $3670		jsr	mainHandler
.3a2b	aa		tax				tax 								; then drop through here.
.3a2c					DTPrintLengthPrefix:
.3a2c	aa		tax				tax 								; A = 0 = don't case convert.
.3a2d	98		tya				tya
.3a2e	48		pha				pha
.3a2f	a0 00		ldy #$00			ldy 	#0 							; get string length = chars to print.
.3a31	b1 2a		lda ($2a),y			lda 	(temp0),y
.3a33	8d e8 0c	sta $0ce8			sta 	tPrintCount
.3a36	f0 1b		beq $3a53			beq 	_DTPLPExit 					; empty string
.3a38					_DTPLPLoop:
.3a38	c8		iny				iny 								; get next.
.3a39	b1 2a		lda ($2a),y			lda 	(temp0),y
.3a3b	29 7f		and #$7f			and 	#$7F
.3a3d	e0 00		cpx #$00			cpx 	#0 							; skip if not case converting
.3a3f	f0 0a		beq $3a4b			beq 	_DTPLPNoCase
.3a41	c9 41		cmp #$41			cmp 	#"A" 						; if converting UC -> LC
.3a43	90 06		bcc $3a4b			bcc 	_DTPLPNoCase
.3a45	c9 5b		cmp #$5b			cmp 	#"Z"+1
.3a47	b0 02		bcs $3a4b			bcs 	_DTPLPNoCase
.3a49	49 20		eor #$20			eor 	#"A"^"a"
.3a4b					_DTPLPNoCase
.3a4b	20 56 3a	jsr $3a56			jsr 	ListOutputCharacter 		; call handler
.3a4e	ce e8 0c	dec $0ce8			dec 	tPrintCount 				; do all the characters
.3a51	d0 e5		bne $3a38			bne 	_DTPLPLoop
.3a53					_DTPLPExit:
.3a53	68		pla				pla
.3a54	a8		tay				tay
.3a55	60		rts				rts
.3a56					ListOutputCharacter:
.3a56	85 32		sta $32				sta 	tempShort
.3a58	48		pha				pha
.3a59	8a		txa				txa
.3a5a	48		pha				pha
.3a5b	98		tya				tya
.3a5c	48		pha				pha
.3a5d	a5 32		lda $32				lda 	tempShort 					; convert ASCII 6 bit (0-31) to 7 bit.
.3a5f	c9 20		cmp #$20			cmp 	#32
.3a61	b0 0c		bcs $3a6f			bcs		_LOCHiBit
.3a63	09 40		ora #$40			ora 	#64 						; conversion
.3a65	c9 40		cmp #$40			cmp 	#64							; make l/c
.3a67	f0 06		beq $3a6f			beq 	_LOCHiBit
.3a69	c9 5b		cmp #$5b			cmp 	#65+26
.3a6b	b0 02		bcs $3a6f			bcs 	_LOCHiBit
.3a6d	69 20		adc #$20			adc 	#32
.3a6f					_LOCHiBit:
.3a6f	20 78 3a	jsr $3a78			jsr 	_LOCCallVector				; call o/p handler routine
.3a72	68		pla				pla
.3a73	a8		tay				tay
.3a74	68		pla				pla
.3a75	aa		tax				tax
.3a76	68		pla				pla
.3a77					_LOCExit:
.3a77	60		rts				rts
.3a78					_LOCCallVector:
.3a78	6c e4 0c	jmp ($0ce4)			jmp 	(deTokeniseVector)
.3a7b					deTokenPrint:
.3a7b	c9 00		cmp #$00			cmp 	#0 							; if bit 7 sets ink colour
.3a7d	30 06		bmi $3a85			bmi 	_dtpInk
.3a7f	a2 16		ldx #$16		ldx	#22
.3a81	20 f6 14	jsr $14f6		jsr	deviceHandler
.3a84	60		rts				rts
.3a85	c9 ff		cmp #$ff	_dtpInk:cmp 	#255 						; e.g. herhe, get ink and set it
.3a87	f0 08		beq $3a91			beq 	_dtpCR						; except $FF => CRLF
.3a89	29 07		and #$07			and 	#7
.3a8b	a2 08		ldx #$08		ldx	#8
.3a8d	20 f6 14	jsr $14f6		jsr	deviceHandler
.3a90	60		rts				rts
.3a91					_dtpCR:
.3a91	a2 06		ldx #$06		ldx	#6
.3a93	20 f6 14	jsr $14f6		jsr	deviceHandler
.3a96	60		rts				rts
.3a97					DTSwitchMode:
.3a97	cd e6 0c	cmp $0ce6			cmp 	LastCharacterClass 			; if changed, update character class
.3a9a	f0 04		beq $3aa0			beq 	_DTSMNoChange
.3a9c	8d e6 0c	sta $0ce6			sta 	LastCharacterClass
.3a9f					_DTSMExit:
.3a9f	60		rts				rts
.3aa0					_DTSMNoChange:
.3aa0	c9 01		cmp #$01			cmp 	#1 							; if didn't change to punctuation, two identifiers so we
.3aa2	f0 fb		beq $3a9f			beq 	_DTSMExit 					; need a space.
.3aa4	a9 20		lda #$20			lda 	#" "
.3aa6	4c 56 3a	jmp $3a56			jmp 	ListOutputCharacter

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/detokenise/identifier.asm

.3aa9					DTIdentifier:
.3aa9	a9 00		lda #$00			lda 	#0 							; now text, may need spaces
.3aab	20 97 3a	jsr $3a97			jsr 	DTSwitchMode
.3aae	a9 87		lda #$87			lda 	#LTYIdentifier
.3ab0	20 56 3a	jsr $3a56			jsr 	ListOutputCharacter
.3ab3					_DTILoop:
.3ab3	b1 28		lda ($28),y			lda 	(codePtr),y 				; output main bit of identifier.
.3ab5	c9 2d		cmp #$2d			cmp 	#"-"						; make - back to _
.3ab7	d0 02		bne $3abb			bne 	_DTINotUS
.3ab9	a9 5f		lda #$5f			lda 	#"_"
.3abb					_DTINotUS:
.3abb	20 56 3a	jsr $3a56			jsr 	ListOutputCharacter
.3abe	c8		iny				iny
.3abf	b1 28		lda ($28),y			lda 	(codePtr),y 				; until end identifier marker.
.3ac1	c9 3a		cmp #$3a			cmp 	#$3A
.3ac3	90 ee		bcc $3ab3			bcc 	_DTILoop
.3ac5	c8		iny				iny
.3ac6	c9 3a		cmp #$3a			cmp 	#$3A 						; is it integer non array
.3ac8	f0 25		beq $3aef			beq 	_DTIExit 					; no postfix.
.3aca	48		pha				pha
.3acb	a9 01		lda #$01			lda  	#1 							; it ends in punctuation
.3acd	8d e6 0c	sta $0ce6			sta 	LastCharacterClass
.3ad0	a9 82		lda #$82			lda 	#LTYPunctuation
.3ad2	20 56 3a	jsr $3a56			jsr 	ListOutputCharacter
.3ad5	68		pla				pla
.3ad6	c9 3b		cmp #$3b			cmp 	#$3B
.3ad8	f0 10		beq $3aea			beq 	_DTIArray
.3ada	4a		lsr a				lsr 	a 							; array flag in C
.3adb	08		php				php
.3adc	49 1e		eor #$1e			eor 	#$3C/2 						; check if $
.3ade	f0 02		beq $3ae2			beq 	_DTIDollar
.3ae0	a9 07		lda #$07			lda 	#"$"^"#" 					; this if #, 0 if $
.3ae2					_DTIDollar:
.3ae2	49 24		eor #$24			eor 	#"$"
.3ae4	20 56 3a	jsr $3a56			jsr 	ListOutputCharacter
.3ae7	28		plp				plp
.3ae8	90 05		bcc $3aef			bcc 	_DTIExit
.3aea					_DTIArray:
.3aea	a9 28		lda #$28			lda 	#"("
.3aec	20 56 3a	jsr $3a56			jsr 	ListOutputCharacter
.3aef					_DTIExit:
.3aef	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/detokenise/token.asm

.3af0					DTDecodeToken:
.3af0	a2 00		ldx #$00			ldx 	#0 							; table number to use
.3af2	b1 28		lda ($28),y			lda 	(codePtr),y
.3af4	c9 84		cmp #$84			cmp 	#$84
.3af6	b0 05		bcs $3afd			bcs 	_DTNotShift
.3af8	29 03		and #$03			and 	#3 							; get the shift 1..3
.3afa	0a		asl a				asl 	a 							; put 2 x in X
.3afb	aa		tax				tax
.3afc	c8		iny				iny
.3afd					_DTNotShift:
.3afd	bd ff 3d	lda $3dff,x			lda 	TokenTableAddress,x 		; get the token table to use to decode it.
.3b00	85 2a		sta $2a				sta 	temp0 						; point into temp0
.3b02	bd 00 3e	lda $3e00,x			lda 	TokenTableAddress+1,x
.3b05	85 2b		sta $2b				sta 	temp0+1
.3b07	b1 28		lda ($28),y			lda 	(codePtr),y 				; get the token value.
.3b09	c8		iny				iny 								; consume it.
.3b0a	aa		tax				tax
.3b0b	98		tya				tya
.3b0c	48		pha				pha
.3b0d					_DTFindText:
.3b0d	e0 86		cpx #$86			cpx 	#$86 						; finished ?
.3b0f	f0 11		beq $3b22			beq 	_DTFoundText
.3b11	ca		dex				dex
.3b12	a0 00		ldy #$00			ldy 	#0 							; add length+1 to temp0
.3b14	38		sec				sec
.3b15	b1 2a		lda ($2a),y			lda 	(temp0),y
.3b17	65 2a		adc $2a				adc 	temp0
.3b19	85 2a		sta $2a				sta 	temp0
.3b1b	90 f0		bcc $3b0d			bcc 	_DTFindText
.3b1d	e6 2b		inc $2b				inc 	temp0+1
.3b1f	4c 0d 3b	jmp $3b0d			jmp 	_DTFindText
.3b22					_DTFoundText:
.3b22	a0 01		ldy #$01			ldy 	#1 							; get first character
.3b24	b1 2a		lda ($2a),y			lda 	(temp0),y
.3b26	29 7f		and #$7f			and 	#$7F 						; will have bit 7 set.
.3b28	c9 41		cmp #$41			cmp 	#"A" 						; check for punctuation.
.3b2a	90 11		bcc $3b3d			bcc 	_DTIsPunctuation
.3b2c	c9 5b		cmp #$5b			cmp 	#"Z"+1
.3b2e	b0 0d		bcs $3b3d			bcs 	_DTIsPunctuation
.3b30	a9 00		lda #$00			lda 	#0 							; now text, may need spaces
.3b32	20 97 3a	jsr $3a97			jsr 	DTSwitchMode
.3b35	a9 83		lda #$83			lda 	#LTYKeyword
.3b37	20 56 3a	jsr $3a56			jsr 	ListOutputCharacter
.3b3a	4c 47 3b	jmp $3b47			jmp 	_DTPrint
.3b3d					_DTIsPunctuation:
.3b3d	a9 01		lda #$01			lda 	#1 							; now punctuation, may need spaces
.3b3f	20 97 3a	jsr $3a97			jsr 	DTSwitchMode
.3b42	a9 82		lda #$82			lda 	#LTYPunctuation
.3b44	20 56 3a	jsr $3a56			jsr 	ListOutputCharacter
.3b47					_DTPrint:
.3b47	a9 01		lda #$01			lda 	#1 							; fix case.
.3b49	20 2c 3a	jsr $3a2c			jsr 	DTPrintLengthPrefix 		; print it out.
.3b4c	a0 00		ldy #$00			ldy 	#0
.3b4e	b1 2a		lda ($2a),y			lda 	(temp0),y
.3b50	a8		tay				tay
.3b51	b1 2a		lda ($2a),y			lda 	(temp0),y
.3b53	29 7f		and #$7f			and 	#$7F 						; will have bit 7 set.
.3b55	c9 41		cmp #$41			cmp 	#"A" 						; check for punctuation.
.3b57	90 04		bcc $3b5d			bcc 	_DTIsNowPunctuation
.3b59	c9 5b		cmp #$5b			cmp 	#"Z"+1
.3b5b	90 05		bcc $3b62			bcc 	_DTPExit
.3b5d					_DTIsNowPunctuation:
.3b5d	a9 01		lda #$01			lda 	#1
.3b5f	8d e6 0c	sta $0ce6			sta		LastCharacterClass
.3b62					_DTPExit:
.3b62	68		pla				pla
.3b63	a8		tay				tay
.3b64	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/search.asm

.0ce9					currentSet:
>0ce9							.fill 	1
.3b65					TokenSearch:
.3b65	8a		txa				txa
.3b66	48		pha				pha
.3b67	98		tya				tya
.3b68	48		pha				pha
.3b69	a9 00		lda #$00			lda 	#0
.3b6b	8d e9 0c	sta $0ce9			sta 	currentSet
.3b6e					_TSLoop:
.3b6e	ad e9 0c	lda $0ce9			lda 	currentSet 					; 2 x currentset in X
.3b71	0a		asl a				asl 	a
.3b72	aa		tax				tax
.3b73	bd ff 3d	lda $3dff,x			lda 	TokenTableAddress,x 		; set temp0 to the table address
.3b76	85 2a		sta $2a				sta 	temp0
.3b78	bd 00 3e	lda $3e00,x			lda 	TokenTableAddress+1,x
.3b7b	85 2b		sta $2b				sta 	temp0+1
.3b7d	20 a4 3b	jsr $3ba4			jsr 	TokenSearchOne 				; search one table
.3b80	b0 0d		bcs $3b8f			bcs 	_TSFound 					; found a token.
.3b82	ee e9 0c	inc $0ce9			inc 	currentSet 					; next set
.3b85	ad e9 0c	lda $0ce9			lda 	currentSet
.3b88	c9 04		cmp #$04			cmp 	#4
.3b8a	d0 e2		bne $3b6e			bne 	_TSLoop 					; back if not done all four.
.3b8c	18		clc				clc 								; clear carry and exit
.3b8d	90 10		bcc $3b9f			bcc 	_TSExit
.3b8f					_TSFound:
.3b8f	48		pha				pha 								; save token
.3b90	ad e9 0c	lda $0ce9			lda 	currentSet					; if set zero no shift
.3b93	f0 05		beq $3b9a			beq 	_TSNoShift
.3b95	09 80		ora #$80			ora 	#$80 						; Write as $81-$83
.3b97	20 55 3c	jsr $3c55			jsr 	TokenWrite
.3b9a					_TSNoShift:
.3b9a	68		pla				pla 								; get token back
.3b9b	20 55 3c	jsr $3c55			jsr 	TokenWrite 					; write it
.3b9e	38		sec				sec 								; carry set indicating success
.3b9f					_TSExit:
.3b9f	68		pla				pla
.3ba0	a8		tay				tay
.3ba1	68		pla				pla
.3ba2	aa		tax				tax
.3ba3	60		rts				rts
.3ba4					TokenSearchOne:
.3ba4	a2 86		ldx #$86			ldx 	#$86 						; current token being tested.
.3ba6					_TSOLoop:
.3ba6	a0 00		ldy #$00			ldy 	#0
.3ba8	b1 2a		lda ($2a),y			lda 	(temp0),y 					; get length of token
.3baa	f0 26		beq $3bd2			beq 	_TSOFail 					; if zero, end of table
.3bac	cd cf 0a	cmp $0acf			cmp 	convertBuffer 				; length is the same, compare the text matches.
.3baf	f0 11		beq $3bc2			beq 	_TSOCheckText
.3bb1					_TSONext:
.3bb1	e8		inx				inx 								; bump token
.3bb2	a0 00		ldy #$00			ldy 	#0							; get length
.3bb4	b1 2a		lda ($2a),y			lda 	(temp0),y
.3bb6	38		sec				sec
.3bb7	65 2a		adc $2a				adc 	temp0 						; add to temp0 + 1
.3bb9	85 2a		sta $2a				sta 	temp0
.3bbb	90 e9		bcc $3ba6			bcc 	_TSOLoop
.3bbd	e6 2b		inc $2b				inc 	temp0+1
.3bbf	4c a6 3b	jmp $3ba6			jmp 	_TSOLoop
.3bc2					_TSOCheckText:
.3bc2	a8		tay				tay 								; compare length downto 1.
.3bc3					_TSOCheckLoop:
.3bc3	b1 2a		lda ($2a),y			lda 	(temp0),y 					; use EOR to compare
.3bc5	59 cf 0a	eor $0acf,y			eor 	convertBuffer,y
.3bc8	29 7f		and #$7f			and 	#$7F 						; ignore bit 7
.3bca	d0 e5		bne $3bb1			bne 	_TSONext 					; different goto next.
.3bcc	88		dey				dey 								; do all
.3bcd	d0 f4		bne $3bc3			bne 	_TSOCheckLoop
.3bcf	8a		txa				txa 								; return token in A and carry set
.3bd0	38		sec				sec
.3bd1	60		rts				rts
.3bd2					_TSOFail:
.3bd2	18		clc				clc
.3bd3	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/test.asm

.3bd4					TokTest:
.3bd4	a2 ff		ldx #$ff				ldx 	#$FF
.3bd6	9a		txs					txs
.3bd7	a9 f4		lda #$f4			lda 	#(TokenText1) & $FF
.3bd9	85 28		sta $28				sta 	codePtr
.3bdb	a9 3b		lda #$3b			lda 	#(TokenText1) >> 8
.3bdd	85 29		sta $29				sta 	1+(codePtr)
.3bdf	20 f4 3b	jsr $3bf4				jsr 	Tokenise
.3be2	a2 00		ldx #$00	TokStop:	ldx 	#0 					; compare vs precalculated result
.3be4	bd f4 3b	lda $3bf4,x	_TokCheck:	lda 	TokenBytes1,x
.3be7	dd ed 0c	cmp $0ced,x				cmp 	tokenBuffer,x
.3bea	d0 fe		bne $3bea	_TokFail:	bne 	_TokFail	 		; error.
.3bec	e8		inx					inx
.3bed	c9 80		cmp #$80				cmp 	#$80
.3bef	d0 f3		bne $3be4				bne 	_TokCheck
.3bf1	4c ff ff	jmp $ffff				jmp 	$FFFF 				; successfully tokenised then quit.

;******  Processing file: tokeniser/tokenise/../../generated/toktest.inc

.3bf4					TokenText1:
.3bf4					TokenBytes1:

;******  Return to file: tokeniser/tokenise/test.asm


;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokenise.asm

.0cea					tokenHeader:
>0cea							.fill 	3
.0ced					tokenBuffer:
>0ced							.fill 	256
.0ded					tokenBufferIndex:
>0ded							.fill 	1
.3bf4					Tokenise:
.3bf4	20 6e 3c	jsr $3c6e			jsr 	TokeniseMakeASCIIZ 			; convert to ASCIIZ string.
.3bf7					TokeniseASCIIZ:
.3bf7	20 7f 3c	jsr $3c7f			jsr 	TokeniseFixCase 			; remove controls and lower case outside quotes.
.3bfa	a9 00		lda #$00			lda 	#0 							; reset the token buffer index
.3bfc	8d ed 0d	sta $0ded			sta 	tokenBufferIndex
.3bff	a8		tay				tay 								; start pointer
.3c00	a9 80		lda #$80			lda 	#$80 						; empty token buffer ($80 ends it)
.3c02	8d ed 0c	sta $0ced			sta 	tokenBuffer
.3c05					_TokLoop:
.3c05	b1 28		lda ($28),y			lda 	(codePtr),y 				; get next character
.3c07	f0 46		beq $3c4f			beq 	_TokExit 					; if zero, then exit.
.3c09	c8		iny				iny 								; skip over spaces.
.3c0a	c9 20		cmp #$20			cmp 	#" "
.3c0c	f0 f7		beq $3c05			beq 	_TokLoop
.3c0e	88		dey				dey 								; point back to character.
.3c0f	c9 26		cmp #$26			cmp 	#"&"						; Hexadecimal constant.
.3c11	f0 18		beq $3c2b			beq 	_TokHexConst
.3c13	c9 22		cmp #$22			cmp 	#'"'						; Quoted String
.3c15	f0 23		beq $3c3a			beq 	_TokQString
.3c17	c9 5b		cmp #$5b			cmp 	#"Z"+1 						; > 'Z' is punctuation
.3c19	b0 26		bcs $3c41			bcs 	_TokPunctuation
.3c1b	c9 41		cmp #$41			cmp 	#"A" 						; A..Z identifier
.3c1d	b0 29		bcs $3c48			bcs 	_TokIdentifier
.3c1f	c9 3a		cmp #$3a			cmp 	#"9"+1
.3c21	b0 1e		bcs $3c41			bcs 	_TokPunctuation 			; between 9 and A exclusive, punctuation
.3c23	c9 30		cmp #$30			cmp 	#"0"
.3c25	90 1a		bcc $3c41			bcc 	_TokPunctuation 			; < 0, punctuation.
.3c27	a9 0a		lda #$0a			lda 	#10  						; 0..9 constant in base 10.
.3c29	d0 08		bne $3c33			bne 	_TokConst
.3c2b					_TokHexConst:
.3c2b	c8		iny				iny									; consume token.
.3c2c	a9 c5		lda #$c5			lda 	#TKW_AMP 					; Write ampersand token out
.3c2e	20 55 3c	jsr $3c55			jsr 	TokenWrite
.3c31	a9 10		lda #$10			lda 	#16
.3c33					_TokConst:
.3c33	20 3d 3d	jsr $3d3d			jsr 	TokeniseInteger
.3c36	b0 cd		bcs $3c05			bcs 	_TokLoop
.3c38	90 18		bcc $3c52			bcc 	_TokFail
.3c3a					_TokQString:
.3c3a	20 d3 3d	jsr $3dd3			jsr 	TokeniseString
.3c3d	b0 c6		bcs $3c05			bcs 	_TokLoop
.3c3f	90 11		bcc $3c52			bcc 	_TokFail
.3c41					_TokPunctuation:
.3c41	20 b2 3d	jsr $3db2			jsr 	TokenisePunctuation
.3c44	b0 bf		bcs $3c05			bcs 	_TokLoop
.3c46	90 0a		bcc $3c52			bcc 	_TokFail
.3c48					_TokIdentifier:
.3c48	20 ae 3c	jsr $3cae			jsr 	TokeniseIdentifier
.3c4b	b0 b8		bcs $3c05			bcs 	_TokLoop
.3c4d	90 03		bcc $3c52			bcc 	_TokFail
.3c4f					_TokExit:
.3c4f	a9 01		lda #$01			lda 	#1
.3c51	60		rts				rts
.3c52					_TokFail:
.3c52	a9 00		lda #$00			lda 	#0
.3c54	60		rts				rts
.3c55					TokenWrite:
.3c55	85 32		sta $32				sta 	tempShort 					; save XA
.3c57	48		pha				pha
.3c58	8a		txa				txa
.3c59	48		pha				pha
.3c5a	a5 32		lda $32				lda 	tempShort
.3c5c	ae ed 0d	ldx $0ded			ldx 	tokenBufferIndex 			; geet index
.3c5f	9d ed 0c	sta $0ced,x			sta 	tokenBuffer,x 				; write byte to buffer
.3c62	a9 80		lda #$80			lda 	#TOK_EOL 					; pre-emptively write EOL marker after
.3c64	9d ee 0c	sta $0cee,x			sta 	tokenBuffer+1,x
.3c67	ee ed 0d	inc $0ded			inc 	tokenBufferIndex 			; bump index
.3c6a	68		pla				pla
.3c6b	aa		tax				tax
.3c6c	68		pla				pla
.3c6d	60		rts				rts
.3c6e					TokeniseMakeASCIIZ:
.3c6e	a0 00		ldy #$00			ldy 	#0							; get length of string.
.3c70	b1 28		lda ($28),y			lda 	(codePtr),y
.3c72	a8		tay				tay
.3c73	c8		iny				iny 								; +1, the NULL goes here.
.3c74	a9 00		lda #$00			lda 	#0
.3c76	91 28		sta ($28),y			sta 	(codePtr),y 				; write the trailing NULL.
.3c78	e6 28		inc $28				inc 	codePtr 					; bump the pointer.
.3c7a	d0 02		bne $3c7e			bne 	_TMKAExit
.3c7c	e6 29		inc $29				inc 	codePtr+1
.3c7e					_TMKAExit:
.3c7e	60		rts				rts
.3c7f					TokeniseFixCase:
.3c7f	a0 00		ldy #$00			ldy 	#0 							; position in buffer.
.3c81	a2 01		ldx #$01			ldx 	#1 							; bit 0 of this is 'in quotes'
.3c83					_TFCFlipQ:
.3c83	8a		txa				txa
.3c84	49 01		eor #$01			eor 	#1
.3c86	aa		tax				tax
.3c87					_TFCLoop:
.3c87	b1 28		lda ($28),y			lda 	(codePtr),y 				; get character
.3c89	f0 22		beq $3cad			beq 	_TFCExit 					; if zero exit.
.3c8b	c9 20		cmp #$20			cmp 	#32 						; if control
.3c8d	90 1a		bcc $3ca9			bcc 	_TFCControl
.3c8f	c8		iny				iny 								; preconsume
.3c90	c9 22		cmp #$22			cmp 	#'"'
.3c92	f0 ef		beq $3c83			beq 	_TFCFlipQ
.3c94	c9 61		cmp #$61			cmp 	#"a"						; check if L/C
.3c96	90 ef		bcc $3c87			bcc 	_TFCLoop
.3c98	c9 7b		cmp #$7b			cmp 	#"z"+1
.3c9a	b0 eb		bcs $3c87			bcs 	_TFCLoop
.3c9c	e0 00		cpx #$00			cpx 	#0 							; in quotes, if so, leave alone.
.3c9e	d0 e7		bne $3c87			bne 	_TFCLoop
.3ca0	88		dey				dey
.3ca1	49 20		eor #$20			eor 	#"A"^"a"					; make U/C
.3ca3					_TFCWrite:
.3ca3	91 28		sta ($28),y			sta 	(codePtr),y
.3ca5	c8		iny				iny
.3ca6	4c 87 3c	jmp $3c87			jmp 	_TFCLoop
.3ca9					_TFCControl:
.3ca9	a9 20		lda #$20			lda 	#" "
.3cab	d0 f6		bne $3ca3			bne 	_TFCWrite
.3cad					_TFCExit:
.3cad	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokident.asm

.3cae					TokeniseIdentifier:
.3cae	a2 00		ldx #$00			ldx 	#0
.3cb0					_TICopyID:
.3cb0	b1 28		lda ($28),y			lda 	(codePtr),y					; get characters
.3cb2	c9 5f		cmp #$5f			cmp 	#"_" 						; underscore converted to minus internally.
.3cb4	f0 16		beq $3ccc			beq 	_TICopyUnderscore
.3cb6	c9 2e		cmp #$2e			cmp 	#"."
.3cb8	f0 14		beq $3cce			beq 	_TICopyIn
.3cba	c9 30		cmp #$30			cmp 	#"0"
.3cbc	90 1b		bcc $3cd9			bcc 	_TIEndCopy
.3cbe	c9 3a		cmp #$3a			cmp 	#"9"+1
.3cc0	90 0c		bcc $3cce			bcc 	_TICopyIn
.3cc2	c9 41		cmp #$41			cmp 	#"A"
.3cc4	90 13		bcc $3cd9			bcc 	_TIEndCopy
.3cc6	c9 5b		cmp #$5b			cmp 	#"Z"+1
.3cc8	b0 0f		bcs $3cd9			bcs		_TIEndCopy
.3cca	90 02		bcc $3cce			bcc 	_TICopyIn
.3ccc					_TICopyUnderScore:
.3ccc	a9 2d		lda #$2d			lda 	#"-"						; _ is mapped to -
.3cce					_TICopyIn:
.3cce	e8		inx				inx 								; write into buffer in 7 bit ASCII form
.3ccf	9d cf 0a	sta $0acf,x			sta 	convertBuffer,x
.3cd2	8e cf 0a	stx $0acf			stx 	convertBuffer
.3cd5	c8		iny				iny 								; next character
.3cd6	4c b0 3c	jmp $3cb0			jmp 	_TICopyID 					; loop round
.3cd9					_TIEndCopy:
.3cd9	a9 24		lda #$24			lda 	#"$"
.3cdb	20 30 3d	jsr $3d30			jsr 	TIDCheckCopy
.3cde	a9 23		lda #$23			lda 	#"#"
.3ce0	20 30 3d	jsr $3d30			jsr 	TIDCheckCopy
.3ce3	a9 28		lda #$28			lda 	#"("
.3ce5	20 30 3d	jsr $3d30			jsr 	TIDCheckCopy
.3ce8	20 65 3b	jsr $3b65			jsr 	TokenSearch 				; is it a token
.3ceb	b0 41		bcs $3d2e			bcs 	_TIExit 					; if so, then exit.
.3ced	98		tya				tya
.3cee	48		pha				pha
.3cef	a0 3a		ldy #$3a			ldy 	#$3A 						; default type.
.3cf1	ae cf 0a	ldx $0acf			ldx 	convertBuffer 				; is last character (
.3cf4	bd cf 0a	lda $0acf,x			lda 	convertBuffer,x
.3cf7	c9 28		cmp #$28			cmp 	#"("
.3cf9	d0 02		bne $3cfd			bne 	_TINotArray
.3cfb	ca		dex				dex 								; yes, remove it and convert to array.
.3cfc	c8		iny				iny
.3cfd					_TINotArray:
.3cfd	bd cf 0a	lda $0acf,x			lda 	convertBuffer,x 			; check for $
.3d00	c9 24		cmp #$24			cmp 	#"$"
.3d02	d0 03		bne $3d07			bne 	_TINotString
.3d04	ca		dex				dex
.3d05	c8		iny				iny
.3d06	c8		iny				iny
.3d07					_TINotString:
.3d07	bd cf 0a	lda $0acf,x			lda 	convertBuffer,x 			; check for #
.3d0a	c9 23		cmp #$23			cmp 	#"#"
.3d0c	d0 05		bne $3d13			bne 	_TINotFloat
.3d0e	ca		dex				dex
.3d0f	c8		iny				iny
.3d10	c8		iny				iny
.3d11	c8		iny				iny
.3d12	c8		iny				iny
.3d13					_TINotFloat:
.3d13	e8		inx				inx 								; write end marker for identifier.
.3d14	98		tya				tya
.3d15	9d cf 0a	sta $0acf,x			sta 	convertBuffer,x
.3d18	8e cf 0a	stx $0acf			stx 	convertBuffer 				; update length.
.3d1b	a2 01		ldx #$01			ldx 	#1
.3d1d					_TIOutput:
.3d1d	bd cf 0a	lda $0acf,x			lda 	convertBuffer,x
.3d20	29 3f		and #$3f			and 	#$3F
.3d22	48		pha				pha
.3d23	20 55 3c	jsr $3c55			jsr 	TokenWrite
.3d26	e8		inx				inx
.3d27	68		pla				pla
.3d28	c9 3a		cmp #$3a			cmp 	#$3A
.3d2a	90 f1		bcc $3d1d			bcc 	_TIOutput
.3d2c	68		pla				pla
.3d2d	a8		tay				tay
.3d2e					_TIExit:
.3d2e	38		sec				sec 								; this can't fail.
.3d2f	60		rts				rts
.3d30					TIDCheckCopy:
.3d30	d1 28		cmp ($28),y			cmp 	(codePtr),y
.3d32	d0 08		bne $3d3c			bne 	_TIDCCExit
.3d34	e8		inx				inx
.3d35	9d cf 0a	sta $0acf,x			sta 	convertBuffer,x
.3d38	8e cf 0a	stx $0acf			stx 	convertBuffer
.3d3b	c8		iny				iny
.3d3c					_TIDCCExit:
.3d3c	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokinteger.asm

.3d3d					TokeniseInteger:
.3d3d	85 2c		sta $2c				sta 	temp1 						; save base
.3d3f	a2 00		ldx #$00			ldx 	#0							; count of chars so far
.3d41	8e cf 0a	stx $0acf			stx 	convertBuffer
.3d44					_TIGetChars:
.3d44	b1 28		lda ($28),y			lda 	(codePtr),y 				; check character is numeric
.3d46	c9 30		cmp #$30			cmp 	#"0"
.3d48	90 1f		bcc $3d69			bcc 	_TIEndGet
.3d4a	c9 3a		cmp #$3a			cmp 	#"9"+1
.3d4c	90 10		bcc $3d5e			bcc 	_TIHaveChar
.3d4e	a5 2c		lda $2c				lda 	temp1 						; fail if not hex mode
.3d50	c9 0a		cmp #$0a			cmp 	#10
.3d52	f0 15		beq $3d69			beq 	_TIEndGet
.3d54	b1 28		lda ($28),y			lda 	(codePtr),y 				; check legitimate hex.
.3d56	c9 41		cmp #$41			cmp 	#"A"
.3d58	90 0f		bcc $3d69			bcc 	_TIEndGet
.3d5a	c9 5b		cmp #$5b			cmp 	#"Z"+1
.3d5c	b0 0b		bcs $3d69			bcs 	_TIEndGet
.3d5e					_TIHaveChar:
.3d5e	e8		inx				inx 								; write into buffer.
.3d5f	8e cf 0a	stx $0acf			stx 	convertBuffer
.3d62	9d cf 0a	sta $0acf,x			sta 	convertBuffer,x
.3d65	c8		iny				iny 								; next char
.3d66	4c 44 3d	jmp $3d44			jmp 	_TIGetChars
.3d69					_TIEndGet:
.3d69	e0 00		cpx #$00			cpx 	#0 							; no char acquired.
.3d6b	f0 1c		beq $3d89			beq 	_TIFail
.3d6d	98		tya				tya
.3d6e	48		pha				pha
.3d6f	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.3d71	85 2a		sta $2a				sta 	temp0
.3d73	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.3d75	85 2b		sta $2b				sta 	1+(temp0)
.3d77	a9 00		lda #$00			lda 	#0 							; stack level 0
.3d79	a4 2c		ldy $2c				ldy 	temp1 						; base Y
.3d7b	a2 1a		ldx #$1a		ldx	#26
.3d7d	20 70 36	jsr $3670		jsr	mainHandler
.3d80	68		pla				pla
.3d81	a8		tay				tay
.3d82	90 05		bcc $3d89			bcc 	_TIFail 					; didn't convert.
.3d84	20 8b 3d	jsr $3d8b			jsr 	TIRecursiveOut 				; recursive output ?
.3d87	38		sec				sec
.3d88	60		rts				rts
.3d89					_TIFail:
.3d89	18		clc				clc
.3d8a	60		rts				rts
.3d8b					TIRecursiveOut:
.3d8b	a5 50		lda $50				lda 	esInt0 						; get value to output after possible recursion
.3d8d	29 3f		and #$3f			and 	#$3F
.3d8f	09 40		ora #$40			ora 	#$40
.3d91	48		pha				pha
.3d92	a5 50		lda $50				lda 	esInt0 						; are we recursing ?
.3d94	29 c0		and #$c0			and 	#$C0
.3d96	05 58		ora $58				ora 	esInt1
.3d98	05 60		ora $60				ora 	esInt2
.3d9a	05 68		ora $68				ora 	esInt3
.3d9c	f0 10		beq $3dae			beq 	_TIRONoRecursion
.3d9e	a2 06		ldx #$06			ldx 	#6 							; shift right x 6
.3da0					_TIROShift:
.3da0	46 68		lsr $68				lsr 	esInt3
.3da2	66 60		ror $60				ror 	esInt2
.3da4	66 58		ror $58				ror 	esInt1
.3da6	66 50		ror $50				ror 	esInt0
.3da8	ca		dex				dex
.3da9	d0 f5		bne $3da0			bne 	_TIROShift
.3dab	20 8b 3d	jsr $3d8b			jsr 	TIRecursiveOut 				; call recursively
.3dae					_TIRONoRecursion:
.3dae	68		pla				pla 								; pull the old bit.
.3daf	4c 55 3c	jmp $3c55			jmp 	TokenWrite

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokpunct.asm

.3db2					TokenisePunctuation:
.3db2	b1 28		lda ($28),y			lda	 	(codePtr),y 				; copy next 2 chars into convertBuffer
.3db4	8d d0 0a	sta $0ad0			sta 	convertBuffer+1
.3db7	c8		iny				iny
.3db8	b1 28		lda ($28),y			lda 	(codePtr),y
.3dba	8d d1 0a	sta $0ad1			sta 	convertBuffer+2
.3dbd	c8		iny				iny 								; Y is +2
.3dbe	a9 02		lda #$02			lda 	#2 							; 2 character string.
.3dc0	8d cf 0a	sta $0acf			sta 	convertBuffer
.3dc3	20 65 3b	jsr $3b65			jsr 	TokenSearch 				; search for that token.
.3dc6	b0 0a		bcs $3dd2			bcs 	_TIFound
.3dc8	ce cf 0a	dec $0acf			dec 	convertBuffer 				; make it a 1 character string
.3dcb	88		dey				dey 								; Y is now +1
.3dcc	20 65 3b	jsr $3b65			jsr 	TokenSearch 				; search for that token.
.3dcf	b0 01		bcs $3dd2			bcs 	_TIFound
.3dd1	88		dey				dey 								; Y is now +0, carry clear indicating failure.
.3dd2					_TIFound:
.3dd2	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokstring.asm

.3dd3					TokeniseString:
.3dd3	c8		iny				iny 								; skip opening quote
.3dd4	a2 ff		ldx #$ff			ldx 	#255 						; count length of string.
.3dd6	84 2a		sty $2a				sty 	temp0 						; save start.
.3dd8					_TSGetLength:
.3dd8	b1 28		lda ($28),y			lda 	(codePtr),y 				; get next
.3dda	f0 21		beq $3dfd			beq 	_TSFail						; end of line, fail
.3ddc	c8		iny				iny
.3ddd	e8		inx				inx
.3dde	c9 22		cmp #$22			cmp 	#'"' 						; until end quote found.
.3de0	d0 f6		bne $3dd8			bne 	_TSGetLength
.3de2	a9 85		lda #$85			lda 	#TOK_STR 					; write string token out
.3de4	20 55 3c	jsr $3c55			jsr 	TokenWrite
.3de7	8a		txa				txa 								; output length
.3de8	20 55 3c	jsr $3c55			jsr 	TokenWrite
.3deb	a4 2a		ldy $2a				ldy 	temp0 						; get original position
.3ded	e0 00		cpx #$00			cpx 	#0 							; check ended
.3def	f0 09		beq $3dfa			beq 	_TSExit
.3df1					_TSOutput:
.3df1	b1 28		lda ($28),y			lda 	(codePtr),y					; output character
.3df3	20 55 3c	jsr $3c55			jsr 	TokenWrite
.3df6	c8		iny				iny
.3df7	ca		dex				dex
.3df8	d0 f7		bne $3df1			bne 	_TSOutput
.3dfa					_TSExit:
.3dfa	c8		iny				iny 								; skip ending quote
.3dfb	38		sec				sec 								; return CS.
.3dfc	60		rts				rts
.3dfd					_TSFail:
.3dfd	18		clc				clc
.3dfe	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokentext.asm

.3dff					TokenTableAddress:
>3dff	07 3e						.word 	Group0Text
>3e01	d0 3f						.word 	Group1Text
>3e03	1d 41						.word 	Group2Text
>3e05	44 41						.word 	Group3Text

;******  Processing file: tokeniser/../generated/tokentext0.inc

.3e07					Group0Text:
>3e07	03 41 4e c4				.byte $03,$41,$4e,$c4                  ; $86 and
>3e0b	02 4f d2				.byte $02,$4f,$d2                      ; $87 or
>3e0e	03 58 4f d2				.byte $03,$58,$4f,$d2                  ; $88 xor
>3e12	02 3e bd				.byte $02,$3e,$bd                      ; $89 >=
>3e15	02 3c bd				.byte $02,$3c,$bd                      ; $8a <=
>3e18	01 be					.byte $01,$be                          ; $8b >
>3e1a	01 bc					.byte $01,$bc                          ; $8c <
>3e1c	01 bd					.byte $01,$bd                          ; $8d =
>3e1e	02 3c be				.byte $02,$3c,$be                      ; $8e <>
>3e21	01 ab					.byte $01,$ab                          ; $8f +
>3e23	01 ad					.byte $01,$ad                          ; $90 -
>3e25	02 3e be				.byte $02,$3e,$be                      ; $91 >>
>3e28	02 3c bc				.byte $02,$3c,$bc                      ; $92 <<
>3e2b	01 aa					.byte $01,$aa                          ; $93 *
>3e2d	01 af					.byte $01,$af                          ; $94 /
>3e2f	03 4d 4f c4				.byte $03,$4d,$4f,$c4                  ; $95 mod
>3e33	01 de					.byte $01,$de                          ; $96 ^
>3e35	01 a1					.byte $01,$a1                          ; $97 !
>3e37	01 bf					.byte $01,$bf                          ; $98 ?
>3e39	06 52 45 50 45 41 d4			.byte $06,$52,$45,$50,$45,$41,$d4      ; $99 repeat
>3e40	05 57 48 49 4c c5			.byte $05,$57,$48,$49,$4c,$c5          ; $9a while
>3e46	03 46 4f d2				.byte $03,$46,$4f,$d2                  ; $9b for
>3e4a	02 49 c6				.byte $02,$49,$c6                      ; $9c if
>3e4d	07 44 45 46 50 52 4f c3			.byte $07,$44,$45,$46,$50,$52,$4f,$c3  ; $9d defproc
>3e55	05 55 4e 54 49 cc			.byte $05,$55,$4e,$54,$49,$cc          ; $9e until
>3e5b	04 57 45 4e c4				.byte $04,$57,$45,$4e,$c4              ; $9f wend
>3e60	04 4e 45 58 d4				.byte $04,$4e,$45,$58,$d4              ; $a0 next
>3e65	04 54 48 45 ce				.byte $04,$54,$48,$45,$ce              ; $a1 then
>3e6a	05 45 4e 44 49 c6			.byte $05,$45,$4e,$44,$49,$c6          ; $a2 endif
>3e70	07 45 4e 44 50 52 4f c3			.byte $07,$45,$4e,$44,$50,$52,$4f,$c3  ; $a3 endproc
>3e78	01 a8					.byte $01,$a8                          ; $a4 (
>3e7a	04 4c 45 4e a8				.byte $04,$4c,$45,$4e,$a8              ; $a5 len(
>3e7f	04 53 47 4e a8				.byte $04,$53,$47,$4e,$a8              ; $a6 sgn(
>3e84	04 41 42 53 a8				.byte $04,$41,$42,$53,$a8              ; $a7 abs(
>3e89	07 52 41 4e 44 4f 4d a8			.byte $07,$52,$41,$4e,$44,$4f,$4d,$a8  ; $a8 random(
>3e91	04 50 41 47 c5				.byte $04,$50,$41,$47,$c5              ; $a9 page
>3e96	04 54 52 55 c5				.byte $04,$54,$52,$55,$c5              ; $aa true
>3e9b	05 46 41 4c 53 c5			.byte $05,$46,$41,$4c,$53,$c5          ; $ab false
>3ea1	04 4d 49 4e a8				.byte $04,$4d,$49,$4e,$a8              ; $ac min(
>3ea6	04 4d 41 58 a8				.byte $04,$4d,$41,$58,$a8              ; $ad max(
>3eab	04 53 59 53 a8				.byte $04,$53,$59,$53,$a8              ; $ae sys(
>3eb0	06 54 49 4d 45 52 a8			.byte $06,$54,$49,$4d,$45,$52,$a8      ; $af timer(
>3eb7	06 45 56 45 4e 54 a8			.byte $06,$45,$56,$45,$4e,$54,$a8      ; $b0 event(
>3ebe	04 47 45 54 a8				.byte $04,$47,$45,$54,$a8              ; $b1 get(
>3ec3	06 49 4e 4b 45 59 a8			.byte $06,$49,$4e,$4b,$45,$59,$a8      ; $b2 inkey(
>3eca	06 41 4c 4c 4f 43 a8			.byte $06,$41,$4c,$4c,$4f,$43,$a8      ; $b3 alloc(
>3ed1	05 43 48 52 24 a8			.byte $05,$43,$48,$52,$24,$a8          ; $b4 chr$(
>3ed7	06 4c 45 46 54 24 a8			.byte $06,$4c,$45,$46,$54,$24,$a8      ; $b5 left$(
>3ede	05 4d 49 44 24 a8			.byte $05,$4d,$49,$44,$24,$a8          ; $b6 mid$(
>3ee4	07 52 49 47 48 54 24 a8			.byte $07,$52,$49,$47,$48,$54,$24,$a8  ; $b7 right$(
>3eec	05 53 54 52 24 a8			.byte $05,$53,$54,$52,$24,$a8          ; $b8 str$(
>3ef2	04 56 41 4c a8				.byte $04,$56,$41,$4c,$a8              ; $b9 val(
>3ef7	05 50 45 45 4b a8			.byte $05,$50,$45,$45,$4b,$a8          ; $ba peek(
>3efd	05 44 45 45 4b a8			.byte $05,$44,$45,$45,$4b,$a8          ; $bb deek(
>3f03	05 4c 45 45 4b a8			.byte $05,$4c,$45,$45,$4b,$a8          ; $bc leek(
>3f09	04 41 53 43 a8				.byte $04,$41,$53,$43,$a8              ; $bd asc(
>3f0e	04 49 4e 54 a8				.byte $04,$49,$4e,$54,$a8              ; $be int(
>3f13	06 46 4c 4f 41 54 a8			.byte $06,$46,$4c,$4f,$41,$54,$a8      ; $bf float(
>3f1a	06 49 53 56 41 4c a8			.byte $06,$49,$53,$56,$41,$4c,$a8      ; $c0 isval(
>3f21	07 55 50 50 45 52 24 a8			.byte $07,$55,$50,$50,$45,$52,$24,$a8  ; $c1 upper$(
>3f29	07 4c 4f 57 45 52 24 a8			.byte $07,$4c,$4f,$57,$45,$52,$24,$a8  ; $c2 lower$(
>3f31	01 c0					.byte $01,$c0                          ; $c3 @
>3f33	01 fe					.byte $01,$fe                          ; $c4 ~
>3f35	01 a6					.byte $01,$a6                          ; $c5 &
>3f37	05 47 45 54 24 a8			.byte $05,$47,$45,$54,$24,$a8          ; $c6 get$(
>3f3d	07 49 4e 4b 45 59 24 a8			.byte $07,$49,$4e,$4b,$45,$59,$24,$a8  ; $c7 inkey$(
>3f45	03 4d 45 cd				.byte $03,$4d,$45,$cd                  ; $c8 mem
>3f49	01 a9					.byte $01,$a9                          ; $c9 )
>3f4b	01 ba					.byte $01,$ba                          ; $ca :
>3f4d	01 ac					.byte $01,$ac                          ; $cb ,
>3f4f	01 bb					.byte $01,$bb                          ; $cc ;
>3f51	01 a7					.byte $01,$a7                          ; $cd '
>3f53	02 54 cf				.byte $02,$54,$cf                      ; $ce to
>3f56	04 53 54 45 d0				.byte $04,$53,$54,$45,$d0              ; $cf step
>3f5b	04 50 52 4f c3				.byte $04,$50,$52,$4f,$c3              ; $d0 proc
>3f60	05 4c 4f 43 41 cc			.byte $05,$4c,$4f,$43,$41,$cc          ; $d1 local
>3f66	03 44 49 cd				.byte $03,$44,$49,$cd                  ; $d2 dim
>3f6a	03 52 45 cd				.byte $03,$52,$45,$cd                  ; $d3 rem
>3f6e	03 4c 45 d4				.byte $03,$4c,$45,$d4                  ; $d4 let
>3f72	05 49 4e 50 55 d4			.byte $05,$49,$4e,$50,$55,$d4          ; $d5 input
>3f78	04 45 4c 53 c5				.byte $04,$45,$4c,$53,$c5              ; $d6 else
>3f7d	03 56 44 d5				.byte $03,$56,$44,$d5                  ; $d7 vdu
>3f81	05 50 52 49 4e d4			.byte $05,$50,$52,$49,$4e,$d4          ; $d8 print
>3f87	04 44 41 54 c1				.byte $04,$44,$41,$54,$c1              ; $d9 data
>3f8c	05 49 4d 41 47 c5			.byte $05,$49,$4d,$41,$47,$c5          ; $da image
>3f92	02 41 d4				.byte $02,$41,$d4                      ; $db at
>3f95	04 46 4c 49 d0				.byte $04,$46,$4c,$49,$d0              ; $dc flip
>3f9a	06 41 53 53 45 52 d4			.byte $06,$41,$53,$53,$45,$52,$d4      ; $dd assert
>3fa1	04 50 4f 4b c5				.byte $04,$50,$4f,$4b,$c5              ; $de poke
>3fa6	04 44 4f 4b c5				.byte $04,$44,$4f,$4b,$c5              ; $df doke
>3fab	04 4c 4f 4b c5				.byte $04,$4c,$4f,$4b,$c5              ; $e0 loke
>3fb0	03 49 4e cb				.byte $03,$49,$4e,$cb                  ; $e1 ink
>3fb4	05 50 41 50 45 d2			.byte $05,$50,$41,$50,$45,$d2          ; $e2 paper
>3fba	03 43 4c d3				.byte $03,$43,$4c,$d3                  ; $e3 cls
>3fbe	06 4c 4f 43 41 54 c5			.byte $06,$4c,$4f,$43,$41,$54,$c5      ; $e4 locate
>3fc5	01 ae					.byte $01,$ae                          ; $e5 .
>3fc7	01 a3					.byte $01,$a3                          ; $e6 #
>3fc9	05 43 4c 45 41 d2			.byte $05,$43,$4c,$45,$41,$d2          ; $e7 clear
>3fcf	00					.byte $00

;******  Return to file: tokeniser/tokentext.asm


;******  Processing file: tokeniser/../generated/tokentext1.inc

.3fd0					Group1Text:
>3fd0	04 4c 4f 41 c4				.byte $04,$4c,$4f,$41,$c4              ; $86 load
>3fd5	04 53 41 56 c5				.byte $04,$53,$41,$56,$c5              ; $87 save
>3fda	04 4c 49 53 d4				.byte $04,$4c,$49,$53,$d4              ; $88 list
>3fdf	03 4e 45 d7				.byte $03,$4e,$45,$d7                  ; $89 new
>3fe3	05 42 52 45 41 cb			.byte $05,$42,$52,$45,$41,$cb          ; $8a break
>3fe9	03 52 55 ce				.byte $03,$52,$55,$ce                  ; $8b run
>3fed	04 52 45 41 c4				.byte $04,$52,$45,$41,$c4              ; $8c read
>3ff2	07 52 45 53 54 4f 52 c5			.byte $07,$52,$45,$53,$54,$4f,$52,$c5  ; $8d restore
>3ffa	03 45 4e c4				.byte $03,$45,$4e,$c4                  ; $8e end
>3ffe	04 53 54 4f d0				.byte $04,$53,$54,$4f,$d0              ; $8f stop
>4003	04 58 45 4d d5				.byte $04,$58,$45,$4d,$d5              ; $90 xemu
>4008	04 47 4f 54 cf				.byte $04,$47,$4f,$54,$cf              ; $91 goto
>400d	05 47 4f 53 55 c2			.byte $05,$47,$4f,$53,$55,$c2          ; $92 gosub
>4013	06 52 45 54 55 52 ce			.byte $06,$52,$45,$54,$55,$52,$ce      ; $93 return
>401a	03 4f 52 c1				.byte $03,$4f,$52,$c1                  ; $94 ora
>401e	05 28 41 4e 44 a9			.byte $05,$28,$41,$4e,$44,$a9          ; $95 (and)
>4024	03 45 4f d2				.byte $03,$45,$4f,$d2                  ; $96 eor
>4028	03 41 44 c3				.byte $03,$41,$44,$c3                  ; $97 adc
>402c	03 53 54 c1				.byte $03,$53,$54,$c1                  ; $98 sta
>4030	03 4c 44 c1				.byte $03,$4c,$44,$c1                  ; $99 lda
>4034	03 43 4d d0				.byte $03,$43,$4d,$d0                  ; $9a cmp
>4038	03 53 42 c3				.byte $03,$53,$42,$c3                  ; $9b sbc
>403c	03 41 53 cc				.byte $03,$41,$53,$cc                  ; $9c asl
>4040	03 52 4f cc				.byte $03,$52,$4f,$cc                  ; $9d rol
>4044	03 4c 53 d2				.byte $03,$4c,$53,$d2                  ; $9e lsr
>4048	03 52 4f d2				.byte $03,$52,$4f,$d2                  ; $9f ror
>404c	03 53 54 d8				.byte $03,$53,$54,$d8                  ; $a0 stx
>4050	03 4c 44 d8				.byte $03,$4c,$44,$d8                  ; $a1 ldx
>4054	03 44 45 c3				.byte $03,$44,$45,$c3                  ; $a2 dec
>4058	03 49 4e c3				.byte $03,$49,$4e,$c3                  ; $a3 inc
>405c	03 53 54 da				.byte $03,$53,$54,$da                  ; $a4 stz
>4060	03 42 49 d4				.byte $03,$42,$49,$d4                  ; $a5 bit
>4064	03 53 54 d9				.byte $03,$53,$54,$d9                  ; $a6 sty
>4068	03 4c 44 d9				.byte $03,$4c,$44,$d9                  ; $a7 ldy
>406c	03 43 50 d9				.byte $03,$43,$50,$d9                  ; $a8 cpy
>4070	03 43 50 d8				.byte $03,$43,$50,$d8                  ; $a9 cpx
>4074	03 54 53 c2				.byte $03,$54,$53,$c2                  ; $aa tsb
>4078	03 54 52 c2				.byte $03,$54,$52,$c2                  ; $ab trb
>407c	03 4a 53 d2				.byte $03,$4a,$53,$d2                  ; $ac jsr
>4080	03 4a 4d d0				.byte $03,$4a,$4d,$d0                  ; $ad jmp
>4084	03 42 50 cc				.byte $03,$42,$50,$cc                  ; $ae bpl
>4088	03 42 4d c9				.byte $03,$42,$4d,$c9                  ; $af bmi
>408c	03 42 56 c3				.byte $03,$42,$56,$c3                  ; $b0 bvc
>4090	03 42 56 d3				.byte $03,$42,$56,$d3                  ; $b1 bvs
>4094	03 42 43 c3				.byte $03,$42,$43,$c3                  ; $b2 bcc
>4098	03 42 43 d3				.byte $03,$42,$43,$d3                  ; $b3 bcs
>409c	03 42 4e c5				.byte $03,$42,$4e,$c5                  ; $b4 bne
>40a0	03 42 45 d1				.byte $03,$42,$45,$d1                  ; $b5 beq
>40a4	03 42 52 c1				.byte $03,$42,$52,$c1                  ; $b6 bra
>40a8	03 42 52 cb				.byte $03,$42,$52,$cb                  ; $b7 brk
>40ac	03 50 48 d0				.byte $03,$50,$48,$d0                  ; $b8 php
>40b0	03 43 4c c3				.byte $03,$43,$4c,$c3                  ; $b9 clc
>40b4	03 50 4c d0				.byte $03,$50,$4c,$d0                  ; $ba plp
>40b8	03 53 45 c3				.byte $03,$53,$45,$c3                  ; $bb sec
>40bc	03 52 54 c9				.byte $03,$52,$54,$c9                  ; $bc rti
>40c0	03 50 48 c1				.byte $03,$50,$48,$c1                  ; $bd pha
>40c4	03 43 4c c9				.byte $03,$43,$4c,$c9                  ; $be cli
>40c8	03 50 48 d9				.byte $03,$50,$48,$d9                  ; $bf phy
>40cc	03 52 54 d3				.byte $03,$52,$54,$d3                  ; $c0 rts
>40d0	03 50 4c c1				.byte $03,$50,$4c,$c1                  ; $c1 pla
>40d4	03 53 45 c9				.byte $03,$53,$45,$c9                  ; $c2 sei
>40d8	03 50 4c d9				.byte $03,$50,$4c,$d9                  ; $c3 ply
>40dc	03 44 45 d9				.byte $03,$44,$45,$d9                  ; $c4 dey
>40e0	03 54 58 c1				.byte $03,$54,$58,$c1                  ; $c5 txa
>40e4	03 54 59 c1				.byte $03,$54,$59,$c1                  ; $c6 tya
>40e8	03 54 58 d3				.byte $03,$54,$58,$d3                  ; $c7 txs
>40ec	03 54 41 d9				.byte $03,$54,$41,$d9                  ; $c8 tay
>40f0	03 54 41 d8				.byte $03,$54,$41,$d8                  ; $c9 tax
>40f4	03 43 4c d6				.byte $03,$43,$4c,$d6                  ; $ca clv
>40f8	03 54 53 d8				.byte $03,$54,$53,$d8                  ; $cb tsx
>40fc	03 49 4e d9				.byte $03,$49,$4e,$d9                  ; $cc iny
>4100	03 44 45 d8				.byte $03,$44,$45,$d8                  ; $cd dex
>4104	03 43 4c c4				.byte $03,$43,$4c,$c4                  ; $ce cld
>4108	03 50 48 d8				.byte $03,$50,$48,$d8                  ; $cf phx
>410c	03 49 4e d8				.byte $03,$49,$4e,$d8                  ; $d0 inx
>4110	03 4e 4f d0				.byte $03,$4e,$4f,$d0                  ; $d1 nop
>4114	03 53 45 c4				.byte $03,$53,$45,$c4                  ; $d2 sed
>4118	03 50 4c d8				.byte $03,$50,$4c,$d8                  ; $d3 plx
>411c	00					.byte $00

;******  Return to file: tokeniser/tokentext.asm


;******  Processing file: tokeniser/../generated/tokentext2.inc

.411d					Group2Text:
>411d	05 56 50 4f 4b c5			.byte $05,$56,$50,$4f,$4b,$c5          ; $86 vpoke
>4123	05 56 44 4f 4b c5			.byte $05,$56,$44,$4f,$4b,$c5          ; $87 vdoke
>4129	05 56 4c 4f 41 c4			.byte $05,$56,$4c,$4f,$41,$c4          ; $88 vload
>412f	04 4d 4f 44 c5				.byte $04,$4d,$4f,$44,$c5              ; $89 mode
>4134	07 50 41 4c 45 54 54 c5			.byte $07,$50,$41,$4c,$45,$54,$54,$c5  ; $8a palette
>413c	06 53 50 52 49 54 c5			.byte $06,$53,$50,$52,$49,$54,$c5      ; $8b sprite
>4143	00					.byte $00

;******  Return to file: tokeniser/tokentext.asm


;******  Processing file: tokeniser/../generated/tokentext3.inc

.4144					Group3Text:
>4144	06 56 50 45 45 4b a8			.byte $06,$56,$50,$45,$45,$4b,$a8      ; $86 vpeek(
>414b	06 56 44 45 45 4b a8			.byte $06,$56,$44,$45,$45,$4b,$a8      ; $87 vdeek(
>4152	09 53 50 52 49 54 45 2e			.byte $09,$53,$50,$52,$49,$54,$45,$2e,$58,$a8 ; $88 sprite.x(
>415a	58 a8
>415c	09 53 50 52 49 54 45 2e			.byte $09,$53,$50,$52,$49,$54,$45,$2e,$59,$a8 ; $89 sprite.y(
>4164	59 a8
>4166	04 48 49 54 a8				.byte $04,$48,$49,$54,$a8              ; $8a hit(
>416b	00					.byte $00

;******  Return to file: tokeniser/tokentext.asm


;******  Return to file: tokeniser/tokeniser.asm

.416c					tokeniserHandler:
.416c	7c 6f 41	jmp ($416f,x)			jmp 	(tokeniserVectors,x)
.416f					tokeniserVectors:
>416f	7b 41					.word _DummyControlHandler ; index 0
>4171	4f 39					.word Detokenise           ; index 2
>4173	43 39					.word ListLine             ; index 4
>4175	d4 3b					.word TokTest              ; index 6
>4177	f4 3b					.word Tokenise             ; index 8
>4179	f7 3b					.word TokeniseASCIIZ       ; index 10
.417b					_DummyControlHandler:
.417b	60		rts			rts

;******  Return to file: basic.asm

.417c					section_end_tokeniser:
.417c					section_start_variable:

;******  Processing file: variable/variable.asm


;******  Processing file: variable/array/access.asm

.417c					AccessArray:
.417c	8a		txa				txa
.417d	48		pha				pha
.417e	e8		inx				inx
.417f	20 48 42	jsr $4248			jsr 	GetArrayDimensions 			; get the array dimensions one up from here.
.4182	68		pla				pla
.4183	aa		tax				tax
.4184	b5 50		lda $50,x			lda 	esInt0,x 					; restore address to follow in temp0.
.4186	85 2a		sta $2a				sta 	temp0
.4188	b5 58		lda $58,x			lda 	esInt1,x
.418a	85 2b		sta $2b				sta 	temp0+1
.418c	8a		txa				txa
.418d	48		pha				pha
.418e	98		tya				tya
.418f	48		pha				pha
.4190					_AAFollow:
.4190	a0 00		ldy #$00			ldy 	#0
.4192	b1 2a		lda ($2a),y			lda 	(temp0),y
.4194	48		pha				pha
.4195	c8		iny				iny
.4196	b1 2a		lda ($2a),y			lda 	(temp0),y
.4198	85 2b		sta $2b				sta 	temp0+1
.419a	68		pla				pla
.419b	85 2a		sta $2a				sta 	temp0
.419d	e8		inx				inx 								; advance to next stack slot.
.419e	a0 00		ldy #$00			ldy 	#0
.41a0	b1 2a		lda ($2a),y			lda 	(temp0),y 					; compare max index vs required index
.41a2	d5 50		cmp $50,x			cmp 	esInt0,x
.41a4	c8		iny				iny
.41a5	b1 2a		lda ($2a),y			lda 	(temp0),y 					; drop bit 7 of the size, indicates follow.
.41a7	85 2c		sta $2c				sta 	temp1 						; save the size in temp1 for later use.
.41a9	29 7f		and #$7f			and 	#$7F
.41ab	f5 58		sbc $58,x			sbc 	esInt1,x
.41ad	90 50		bcc $41ff			bcc 	_AABadIndex 				; failed on index if max index < required.
.41af	18		clc				clc
.41b0	a5 2a		lda $2a				lda 	temp0
.41b2	69 02		adc #$02			adc 	#2
.41b4	85 2a		sta $2a				sta 	temp0
.41b6	90 02		bcc $41ba			bcc 	_AANoCarry
.41b8	e6 2b		inc $2b				inc 	temp0+1
.41ba					_AANoCarry:
.41ba	b5 50		lda $50,x			lda 	esInt0,x
.41bc	85 2e		sta $2e				sta 	temp2
.41be	b5 58		lda $58,x			lda 	esInt1,x
.41c0	85 2f		sta $2f				sta 	temp2+1
.41c2	ac f0 0d	ldy $0df0			ldy 	varType
.41c5	b9 a2 42	lda $42a2,y			lda 	CAActualSize-$3A,y
.41c8	b4 49		ldy $49,x			ldy 	esType+1,x 					; is it top level
.41ca	30 02		bmi $41ce			bmi 	_AANotPointer
.41cc	a9 02		lda #$02			lda 	#2 							; array of pointers is 2.
.41ce					_AANotPointer:
.41ce	20 4c 43	jsr $434c			jsr 	MultiplyTemp2ByA 			; multiply the index by the data size, in temp2.
.41d1	18		clc				clc
.41d2	a5 2a		lda $2a				lda 	temp0
.41d4	65 2e		adc $2e				adc 	temp2
.41d6	85 2a		sta $2a				sta 	temp0
.41d8	a5 2b		lda $2b				lda 	temp0+1
.41da	65 2f		adc $2f				adc 	temp2+1
.41dc	85 2b		sta $2b				sta 	temp0+1
.41de	b5 49		lda $49,x			lda 	esType+1,x
.41e0	30 07		bmi $41e9			bmi 	_AAUsedAllIndices
.41e2	a5 2c		lda $2c				lda 	temp1 						; check if this is a pointer array e.g. there are subarrays
.41e4	10 14		bpl $41fa			bpl 	_AABadDepth 				; no, too many indexes.
.41e6	4c 90 41	jmp $4190			jmp 	_AAFollow 					; otherwise follow them.
.41e9					_AAUsedAllIndices:
.41e9	a5 2c		lda $2c				lda 	temp1 						; get original high length byte.
.41eb	30 0d		bmi $41fa			bmi 	_AABadDepth 				; if -ve then this is an array of pointers.
.41ed	68		pla				pla
.41ee	a8		tay				tay
.41ef	68		pla				pla
.41f0	aa		tax				tax
.41f1	a5 2a		lda $2a				lda 	temp0 						; copy address of array element to stack,x
.41f3	95 50		sta $50,x			sta 	esInt0,x
.41f5	a5 2b		lda $2b				lda 	temp0+1
.41f7	95 58		sta $58,x			sta 	esInt1,x
.41f9	60		rts				rts
.41fa					_AABadDepth:
.41fa	a2 1c		ldx #$1c			ldx 	#ErrorID_ArrayDepth
.41fc	20 18 15	jsr $1518		jsr	errorHandler
.41ff					_AABadIndex:
.41ff	a2 1b		ldx #$1b			ldx 	#ErrorID_ArrayIndex
.4201	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: variable/variable.asm


;******  Processing file: variable/array/create.asm

.0dee					elementSize:
>0dee							.fill	 1
.4204					CreateArray:
.4204	20 db 43	jsr $43db			jsr 	AccessSetup 				; set up the basic stuff.
.4207	ad f0 0d	lda $0df0			lda 	varType 					; is the variable type an array
.420a	4a		lsr a				lsr 	a
.420b	90 36		bcc $4243			bcc 	CANotArray 					; no, cause an error.
.420d	20 e4 44	jsr $44e4			jsr 	FindVariable 				; does the variable exist already
.4210	b0 2c		bcs $423e			bcs 	CAFound 					; cannot redefine it.
.4212	20 18 44	jsr $4418			jsr 	CreateVariable 				; create the variable entry.
.4215	a5 2a		lda $2a				lda 	temp0 						; push address of new variable entry on the stack
.4217	48		pha				pha
.4218	a5 2b		lda $2b				lda 	temp0+1
.421a	48		pha				pha
.421b	a2 00		ldx #$00			ldx 	#0
.421d	20 48 42	jsr $4248			jsr 	GetArrayDimensions 			; get the array dimensions
.4220	a2 00		ldx #$00			ldx 	#0 							; create at level $00
.4222	20 78 42	jsr $4278			jsr 	CreateArrayLevel 			; level to YA
.4225	aa		tax				tax 								; level now in YX
.4226	68		pla				pla 								; get address back to temp0 to write.
.4227	85 2b		sta $2b				sta 	temp0+1
.4229	68		pla				pla
.422a	85 2a		sta $2a				sta 	temp0
.422c	98		tya				tya 								; write YX there.
.422d	a0 06		ldy #$06			ldy 	#6
.422f	91 2a		sta ($2a),y			sta 	(temp0),y
.4231	88		dey				dey
.4232	8a		txa				txa
.4233	91 2a		sta ($2a),y			sta 	(temp0),y
.4235	ac f1 0d	ldy $0df1			ldy 	varEnd 						; restore Y and exit.
.4238	60		rts				rts
.4239					CASize:
.4239	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.423b	20 18 15	jsr $1518		jsr	errorHandler
.423e					CAFound:
.423e	a2 19		ldx #$19			ldx 	#ErrorID_DupArray
.4240	20 18 15	jsr $1518		jsr	errorHandler
.4243					CANotArray:
.4243	a2 1a		ldx #$1a			ldx 	#ErrorID_NotArray
.4245	20 18 15	jsr $1518		jsr	errorHandler
.4248					GetArrayDimensions:
.4248	ad f0 0d	lda $0df0			lda 	varType 					; push variable type on the stack.
.424b	48		pha				pha
.424c	ac f1 0d	ldy $0df1			ldy 	varEnd
.424f					_CAGetDimensions:
.424f	8a		txa				txa 								; get the next level
.4250	a2 0a		ldx #$0a		ldx	#10
.4252	20 70 36	jsr $3670		jsr	mainHandler
.4255	aa		tax				tax
.4256	b5 58		lda $58,x			lda 	esInt1,x 					; index must be < 8192
.4258	29 e0		and #$e0			and 	#$E0
.425a	15 60		ora $60,x			ora 	esInt2,x
.425c	15 68		ora $68,x			ora 	esInt3,x
.425e	d0 d9		bne $4239			bne 	CASize
.4260	e8		inx				inx 								; next level.
.4261	b1 28		lda ($28),y			lda 	(codePtr),y 				; get/consume following character
.4263	c8		iny				iny
.4264	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; loop back if more dimensions
.4266	f0 e7		beq $424f			beq 	_CAGetDimensions
.4268	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN 				; right bracket ?
.426a	d0 cd		bne $4239			bne 	CASize
.426c	a9 ff		lda #$ff			lda 	#$FF 						; set the type past the end to $FF so we know how many
.426e	95 48		sta $48,x			sta 	esType,x 					; dimensions there are.
.4270	68		pla				pla 								; restore the variable type ($3A-$3F)
.4271	8d f0 0d	sta $0df0			sta 	varType
.4274	8c f1 0d	sty $0df1			sty 	varEnd 						; save exit Y value, after dimensions
.4277	60		rts				rts
.4278					CreateArrayLevel:
.4278	ac f0 0d	ldy $0df0			ldy 	varType
.427b	b9 a2 42	lda $42a2,y			lda 	CAActualSize-$3A,y
.427e	8d ee 0d	sta $0dee			sta 	elementSize 				; get element size this level.
.4281	b4 49		ldy $49,x			ldy 	esType+1,x 					; is it top level
.4283	30 05		bmi $428a			bmi 	_CANotPointer
.4285	a9 02		lda #$02			lda 	#2 							; array of pointers is 2.
.4287	8d ee 0d	sta $0dee			sta 	elementSize
.428a					_CANotPointer:
.428a	a5 35		lda $35				lda 	lowMemory 					; start creating at temp0, saving start on stack.
.428c	85 2a		sta $2a				sta 	temp0
.428e	48		pha				pha
.428f	a5 36		lda $36				lda 	lowMemory+1
.4291	85 2b		sta $2b				sta 	temp0+1
.4293	48		pha				pha
.4294	20 15 43	jsr $4315			jsr 	AllocateArraySpace 			; allocate space for all array stuff at this level.
.4297	a0 00		ldy #$00			ldy 	#0
.4299	b5 50		lda $50,x			lda 	esInt0,x
.429b	91 2a		sta ($2a),y			sta 	(temp0),y
.429d	c8		iny				iny
.429e	b5 58		lda $58,x			lda 	esInt1,x
.42a0	91 2a		sta ($2a),y			sta 	(temp0),y
.42a2	b5 49		lda $49,x			lda 	esType+1,x 					; do we have another level ?
.42a4	30 06		bmi $42ac			bmi 	_CALNotLast
.42a6	b1 2a		lda ($2a),y			lda 	(temp0),y 					; set bit 7, indicates an array of pointers to other levels.
.42a8	09 80		ora #$80			ora 	#$80
.42aa	91 2a		sta ($2a),y			sta 	(temp0),y
.42ac					_CALNotLast:
.42ac	a9 02		lda #$02			lda 	#2
.42ae	20 d2 42	jsr $42d2			jsr 	_CALAddTemp0
.42b1	b5 50		lda $50,x			lda 	esInt0,x 					; copy stack:01 to stack:23 so we can use it to
.42b3	95 60		sta $60,x			sta 	esInt2,x 					; count.
.42b5	b5 58		lda $58,x			lda 	esInt1,x
.42b7	95 68		sta $68,x			sta 	esInt3,x
.42b9					_CALClear:
.42b9	20 e2 42	jsr $42e2			jsr 	EraseOneElement
.42bc	ad ee 0d	lda $0dee			lda 	elementSize 				; move to next element
.42bf	20 d2 42	jsr $42d2			jsr 	_CALAddTemp0
.42c2	b5 60		lda $60,x			lda 	esInt2,x 					; decrement counter
.42c4	d0 02		bne $42c8			bne 	_CALNoBorrow
.42c6	d6 68		dec $68,x			dec 	esInt3,x
.42c8					_CALNoBorrow:
.42c8	d6 60		dec $60,x			dec 	esInt2,x
.42ca	b5 68		lda $68,x			lda 	esInt3,x 					; loop back if >= 0 - we need +1 because indices
.42cc	10 eb		bpl $42b9			bpl 	_CALClear 					; start at 0 e.g. x(10) is actually 11 array entries.
.42ce	68		pla				pla 								; restore the start of this into YA.
.42cf	a8		tay				tay
.42d0	68		pla				pla
.42d1	60		rts				rts
.42d2					_CALAddTemp0:
.42d2	18		clc				clc
.42d3	65 2a		adc $2a				adc 	temp0
.42d5	85 2a		sta $2a				sta 	temp0
.42d7	90 02		bcc $42db			bcc 	_CALANoCarry
.42d9	e6 2b		inc $2b				inc 	temp0+1
.42db					_CALANoCarry:
.42db	60		rts				rts
.42dc					CAActualSize:
>42dc	04 04						.byte 	VarISize,VarISize
>42de	02 02						.byte 	VarSSize,VarSSize
>42e0	06 06						.byte 	VarFSize,VarFSize
.42e2					EraseOneElement:
.42e2	b5 49		lda $49,x			lda 	esType+1,x 					; is this a list of sub arrays
.42e4	10 09		bpl $42ef			bpl 	_EOESubArray
.42e6	a0 00		ldy #$00			ldy 	#0 							; write the empty variable value out.
.42e8	ad f0 0d	lda $0df0			lda 	varType
.42eb	20 82 44	jsr $4482			jsr 	ZeroTemp0Y
.42ee	60		rts				rts
.42ef					_EOESubArray:
.42ef	a5 2a		lda $2a				lda 	temp0 						; save temp0, these are effectively locals.
.42f1	48		pha				pha
.42f2	a5 2b		lda $2b				lda 	temp0+1
.42f4	48		pha				pha
.42f5	ad ee 0d	lda $0dee			lda 	elementSize 				; save element size
.42f8	48		pha				pha
.42f9	e8		inx				inx 								; create at next level
.42fa	20 78 42	jsr $4278			jsr 	CreateArrayLevel
.42fd	ca		dex				dex
.42fe	85 32		sta $32				sta 	tempShort 					; save A
.4300	68		pla				pla  								; restore element size.
.4301	8d ee 0d	sta $0dee			sta 	elementSize
.4304	68		pla				pla 								; restore temp0, which is where this new array level goes.
.4305	85 2b		sta $2b				sta 	temp0+1
.4307	68		pla				pla
.4308	85 2a		sta $2a				sta 	temp0
.430a	98		tya				tya 								; store Y/A there
.430b	a0 01		ldy #$01			ldy 	#1
.430d	91 2a		sta ($2a),y			sta 	(temp0),y
.430f	a5 32		lda $32				lda 	tempShort
.4311	88		dey				dey
.4312	91 2a		sta ($2a),y			sta 	(temp0),y
.4314	60		rts				rts
.4315					AllocateArraySpace:
.4315	18		clc				clc 								; element count + 1 => temp2.
.4316	b5 50		lda $50,x			lda 	esInt0,x
.4318	69 01		adc #$01			adc 	#1
.431a	85 2e		sta $2e				sta 	temp2
.431c	b5 58		lda $58,x			lda 	esInt1,x
.431e	69 00		adc #$00			adc 	#0
.4320	85 2f		sta $2f				sta 	temp2+1
.4322	ad ee 0d	lda $0dee			lda 	elementSize 				; bytes per element
.4325	20 4c 43	jsr $434c			jsr 	MultiplyTemp2ByA 			; temp2 = (count + 1) x bytes per element.
.4328	18		clc				clc 								; add 2 for 'max element' byte.
.4329	a5 2e		lda $2e				lda 	temp2
.432b	69 02		adc #$02			adc 	#2
.432d	85 2e		sta $2e				sta 	temp2
.432f	90 02		bcc $4333			bcc 	_AASNoCarry
.4331	e6 2f		inc $2f				inc 	temp2+1
.4333					_AASNoCarry:
.4333	18		clc				clc 								; add to low memory, allocating space.
.4334	a5 35		lda $35				lda 	lowMemory
.4336	65 2e		adc $2e				adc 	temp2
.4338	85 35		sta $35				sta 	lowMemory
.433a	a5 36		lda $36				lda 	lowMemory+1
.433c	65 2f		adc $2f				adc 	temp2+1
.433e	85 36		sta $36				sta 	lowMemory+1
.4340	b0 05		bcs $4347			bcs 	_AASFail 					; out of memory as adding causes wrapround
.4342	c5 34		cmp $34				cmp 	highMemory+1 				; >= high memory pointer.
.4344	b0 01		bcs $4347			bcs 	_AASFail
.4346	60		rts				rts
.4347					_AASFail:
.4347	a2 22		ldx #$22			ldx 	#ErrorID_Memory
.4349	20 18 15	jsr $1518		jsr	errorHandler
.434c					MultiplyTemp2ByA:
.434c	48		pha				pha
.434d	a5 2e		lda $2e				lda 	temp2 						; copy temp2 to temp3.
.434f	85 30		sta $30				sta 	temp3
.4351	a5 2f		lda $2f				lda 	temp2+1
.4353	85 31		sta $31				sta 	temp3+1
.4355	68		pla				pla
.4356	06 2e		asl $2e				asl 	temp2 						; double it.
.4358	26 2f		rol $2f				rol 	temp2+1
.435a	c9 02		cmp #$02			cmp 	#2 							; if x 2 then exit.
.435c	f0 15		beq $4373			beq 	_MTBAExit
.435e	c9 06		cmp #$06			cmp 	#6 							; if x 6 then add temp3 to temp2
.4360	d0 0d		bne $436f			bne 	_MTBANotFloat
.4362	18		clc				clc 								; so this will make it x 3
.4363	a5 2e		lda $2e				lda 	temp2
.4365	65 30		adc $30				adc 	temp3
.4367	85 2e		sta $2e				sta 	temp2
.4369	a5 2f		lda $2f				lda 	temp2+1
.436b	65 31		adc $31				adc 	temp3+1
.436d	85 2f		sta $2f				sta 	temp2+1
.436f					_MTBANotFloat:
.436f	06 2e		asl $2e				asl 	temp2 						; double it.
.4371	26 2f		rol $2f				rol 	temp2+1
.4373					_MTBAExit:
.4373	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/variable/access.asm

.0def					varHash:
>0def							.fill	1
.0df0					varType:
>0df0							.fill 	1
.0df1					varEnd:
>0df1							.fill 	1
.003b					hashList:
>003b							.fill 	2
.4374					AccessVariable:
.4374	aa		tax				tax 								; stack in X
.4375	c8		iny				iny									; look at second character
.4376	b1 28		lda ($28),y			lda 	(codePtr),y
.4378	88		dey				dey
.4379	c9 3a		cmp #$3a			cmp 	#TYPE_INT 					; is it the integer marker ($3A)
.437b	d0 15		bne $4392			bne 	_AVLong 					; no, always use the hash tables.
.437d	b1 28		lda ($28),y			lda 	(codePtr),y 				; this is the 6 bit ASCII of A-Z 1-26
.437f	38		sec				sec 	 							; make it 0-25
.4380	e9 01		sbc #$01			sbc 	#1
.4382	0a		asl a				asl 	a 							; x 4 as 4 bytes / variable.
.4383	0a		asl a				asl 	a
.4384	95 50		sta $50,x			sta 	esInt0,x
.4386	a9 0a		lda #$0a			lda 	#SingleLetterVar >> 8 		; make it an address
.4388	95 58		sta $58,x			sta 	esInt1,x
.438a	a9 80		lda #$80			lda 	#$80 						; type is an integer reference.
.438c	95 48		sta $48,x			sta 	esType,x
.438e	c8		iny				iny 								; skip over the variable reference in the code.
.438f	c8		iny				iny  								; (1 letter, 1 type)
.4390	8a		txa				txa 								; stack in A to return.
.4391	60		rts				rts
.4392					_AVLong:
.4392	8a		txa				txa
.4393	48		pha				pha
.4394	20 db 43	jsr $43db			jsr 	AccessSetup 				; set up the basic information we need for later
.4397	20 e4 44	jsr $44e4			jsr 	FindVariable 				; does the variable exist already ?
.439a	b0 0e		bcs $43aa			bcs 	_AVFound 					; yes, then its found
.439c	ad f0 0d	lda $0df0			lda 	varType 					; otherwise, is the variable type an array
.439f	4a		lsr a				lsr 	a
.43a0	90 05		bcc $43a7			bcc 	_AVCanCreate 				; if not, we can autocreate
.43a2	a2 15		ldx #$15			ldx 	#ErrorID_noauto
.43a4	20 18 15	jsr $1518		jsr	errorHandler
.43a7					_AVCanCreate:
.43a7	20 18 44	jsr $4418			jsr 	CreateVariable 				; variable does not exist, create it.
.43aa					_AVFound:
.43aa	68		pla				pla
.43ab	aa		tax				tax
.43ac	18		clc				clc 								; copy temp0 (variable record address)
.43ad	a5 2a		lda $2a				lda 	temp0 						; +5 (to point to the data)
.43af	69 05		adc #$05			adc 	#5 							; (first 5 bytes are link, name, hash)
.43b1	95 50		sta $50,x			sta 	esInt0,x
.43b3	a5 2b		lda $2b				lda 	temp0+1
.43b5	69 00		adc #$00			adc 	#0
.43b7	95 58		sta $58,x			sta 	esInt1,x
.43b9	a9 00		lda #$00			lda 	#0
.43bb	95 60		sta $60,x			sta 	esInt2,x
.43bd	95 68		sta $68,x			sta 	esInt3,x
.43bf	ac f0 0d	ldy $0df0			ldy 	varType 					; get the type ID from the type.
.43c2	b9 9b 43	lda $439b,y			lda 	_AVTypeTable-$3A,y 			; e.g. a reference to int/float/string.
.43c5	95 48		sta $48,x			sta 	esType,x
.43c7	ac f1 0d	ldy $0df1			ldy 	varEnd 						; restore Y
.43ca	ad f0 0d	lda $0df0			lda 	VarType 					; get variable type, put LSB into C
.43cd	4a		lsr a				lsr 	a
.43ce	90 03		bcc $43d3			bcc 	_AVNotArray 				; if carry set,it is an array variable.
.43d0	20 7c 41	jsr $417c			jsr 	AccessArray 				; array lookup. if LSB was set.
.43d3					_AVNotArray:
.43d3	8a		txa				txa 								; return stack in A and return
.43d4	60		rts				rts
.43d5					_AVTypeTable:
>43d5	80 80						.byte 	$80,$80						; integer
>43d7	c0 c0						.byte 	$C0,$C0 					; string
>43d9	81 81						.byte 	$81,$81 					; float
.43db					AccessSetup:
.43db	a9 00		lda #$00			lda 	#0 							; zero the hash byte.
.43dd	8d ef 0d	sta $0def			sta 	varHash
.43e0	98		tya				tya
.43e1	48		pha				pha
.43e2	b1 28		lda ($28),y	_ASLoop:lda 	(codePtr),y					; get next identifier character
.43e4	c9 3a		cmp #$3a			cmp 	#$3A 						; is it 3A-3F which end all identifiers ?
.43e6	b0 0b		bcs $43f3			bcs 	_ASComplete
.43e8	18		clc				clc 								; add to the hash. Might improve this.
.43e9	6d ef 0d	adc $0def			adc 	varHash
.43ec	8d ef 0d	sta $0def			sta 	varHash
.43ef	c8		iny				iny 								; next character
.43f0	4c e2 43	jmp $43e2			jmp 	_ASLoop
.43f3					_ASComplete:
.43f3	8d f0 0d	sta $0df0			sta 	varType 					; save variable type byte
.43f6	c8		iny				iny
.43f7	8c f1 0d	sty $0df1			sty 	varEnd 						; save the ending position.
.43fa	38		sec				sec 								; convert type byte from $3A-$3F to 0..5
.43fb	e9 3a		sbc #$3a			sbc 	#$3A
.43fd	0a		asl a				asl 	a 							; multiply by hashTableSize (8 in this case)
.43fe	0a		asl a				asl 	a
.43ff	0a		asl a				asl 	a
.4400	0a		asl a				asl 	a 							; 2 bytes/word
.4401	85 2a		sta $2a				sta 	temp0 						; this is the offset to the start of the table.
.4403	ad ef 0d	lda $0def			lda 	varHash 					; get hash
.4406	29 07		and #$07			and 	#(hashTableSize-1)			; force into range (for 8,0..7)
.4408	0a		asl a				asl  	a 							; x 2 (for word) and clear carry
.4409	65 2a		adc $2a				adc 	temp0 						; now offset from the start of the hash table.
.440b	69 68		adc #$68			adc 	#hashTables & $FF 			; add to hash table base address
.440d	85 3b		sta $3b				sta 	hashList 					; making hashLists point to the head of the link list.
.440f	a9 0a		lda #$0a			lda 	#hashTables >> 8
.4411	69 00		adc #$00			adc 	#0
.4413	85 3c		sta $3c				sta 	hashList+1
.4415	68		pla				pla
.4416	a8		tay				tay
.4417	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/variable/create.asm

.4418					CreateVariable:
.4418	98		tya				tya 								; push Y on the stack twice.
.4419	48		pha				pha									; position in code of the new variable.
.441a	48		pha				pha
.441b	ae f0 0d	ldx $0df0			ldx 	varType 					; get var type 0-5 from the var type
.441e	bd 42 44	lda $4442,x			lda		_CVSize-$3A,x 				; the bytes required for this new variable.
.4421	48		pha				pha 								; save length
.4422	a5 35		lda $35				lda 	lowMemory 					; set low Memory ptr to temp0
.4424	85 2a		sta $2a				sta 	temp0 						; (address of the new variable)
.4426	a5 36		lda $36				lda 	lowMemory+1
.4428	85 2b		sta $2b				sta 	temp0+1
.442a	68		pla				pla 								; get length
.442b	18		clc				clc 								; add to low memory.
.442c	65 35		adc $35				adc 	lowMemory
.442e	85 35		sta $35				sta 	lowMemory
.4430	90 08		bcc $443a			bcc 	_CVNoCarry
.4432	e6 36		inc $36				inc 	lowMemory+1
.4434	a5 36		lda $36				lda 	lowMemory+1 				; check out of memory.
.4436	c5 34		cmp $34				cmp 	highMemory+1
.4438	b0 3d		bcs $4477			bcs 	_CVMemory
.443a					_CVNoCarry:
.443a	ad ef 0d	lda $0def			lda 	varHash 					; store hash at offset 4.
.443d	a0 04		ldy #$04			ldy 	#4
.443f	91 2a		sta ($2a),y			sta 	(temp0),y
.4441	68		pla				pla 								; offset, work out where the variable name is.
.4442	18		clc				clc
.4443	65 28		adc $28				adc 	codePtr
.4445	a0 02		ldy #$02			ldy 	#2 							; copy that into slots 2 + 3.
.4447	91 2a		sta ($2a),y			sta 	(temp0),y
.4449	a5 29		lda $29				lda 	codePtr+1
.444b	69 00		adc #$00			adc 	#0
.444d	c8		iny				iny
.444e	91 2a		sta ($2a),y			sta 	(temp0),y
.4450	cd c9 0a	cmp $0ac9			cmp 	basePage+1 					; compare against the program base.
.4453	b0 03		bcs $4458			bcs 	_CVNotImmediate
.4455	20 ba 44	jsr $44ba			jsr 	CloneVariableName 			; we need to clone the variable name (immediate mode)
.4458					_CVNotImmediate:
.4458	a0 00		ldy #$00			ldy 	#0 							; copy current hash pointer in link
.445a	b1 3b		lda ($3b),y			lda 	(hashList),y 				; so we're inserting it in the front of a linked list
.445c	91 2a		sta ($2a),y			sta 	(temp0),y
.445e	c8		iny				iny
.445f	b1 3b		lda ($3b),y			lda 	(hashList),y
.4461	91 2a		sta ($2a),y			sta 	(temp0),y
.4463	a5 2b		lda $2b				lda 	temp0+1 					; set new link
.4465	91 3b		sta ($3b),y			sta 	(hashList),y
.4467	88		dey				dey
.4468	a5 2a		lda $2a				lda 	temp0
.446a	91 3b		sta ($3b),y			sta 	(hashList),y
.446c	ad f0 0d	lda $0df0			lda 	varType 					; type in A
.446f	a0 05		ldy #$05			ldy 	#5 							; offset in Y
.4471	20 82 44	jsr $4482			jsr 	ZeroTemp0Y 					; zero (temp0),y with whatever type.
.4474	68		pla				pla
.4475	a8		tay				tay
.4476	60		rts				rts
.4477					_CVMemory:
.4477	a2 22		ldx #$22			ldx 	#ErrorID_Memory
.4479	20 18 15	jsr $1518		jsr	errorHandler
>447c	09 07				_CVSize:.byte 	VarHSize+VarISize,VarHSize+VarASize 					; <storage for integer>
>447e	07 07						.byte 	VarHSize+VarSSize,VarHSize+VarASize 					; <storage for string>
>4480	0b 07						.byte 	VarHSize+VarFSize,VarHSize+VarASize 					; <storage for float>
.4482					ZeroTemp0Y:
.4482	4a		lsr a				lsr 	a 							; bit 0 in carry
.4483	0a		asl a				asl 	a
.4484	b0 19		bcs $449f			bcs 	_ZTExit 					; we don't initialise arrays.
.4486	c9 3c		cmp #$3c			cmp 	#$3C 						; check string
.4488	f0 16		beq $44a0			beq 	_ZTWriteNullString 			; write "" string
.448a	c9 3e		cmp #$3e			cmp 	#$3E 						; check float
.448c	f0 22		beq $44b0			beq 	_ZTWriteFloat
.448e	98		tya				tya
.448f	48		pha				pha
.4490	a9 00		lda #$00			lda 	#0
.4492	91 2a		sta ($2a),y			sta 	(temp0),y
.4494	c8		iny				iny
.4495	91 2a		sta ($2a),y			sta 	(temp0),y
.4497	c8		iny				iny
.4498	91 2a		sta ($2a),y			sta 	(temp0),y
.449a	c8		iny				iny
.449b	91 2a		sta ($2a),y			sta 	(temp0),y
.449d	68		pla				pla
.449e	a8		tay				tay
.449f					_ZTExit:
.449f	60		rts				rts
.44a0					_ZTWriteNullString:
.44a0	a9 00		lda #$00			lda 	#0 							; put a reference to null string as the default value.
.44a2	8d ce 0a	sta $0ace			sta 	NullString
.44a5	a9 ce		lda #$ce			lda 	#NullString & $FF
.44a7	91 2a		sta ($2a),y			sta 	(temp0),y
.44a9	a9 0a		lda #$0a			lda 	#NullString >> 8
.44ab	c8		iny				iny
.44ac	91 2a		sta ($2a),y			sta 	(temp0),y
.44ae	88		dey				dey
.44af	60		rts				rts
.44b0					_ZTWriteFloat:
.44b0	8a		txa				txa
.44b1	48		pha				pha
.44b2	a2 20		ldx #$20		ldx	#32
.44b4	20 ea 1d	jsr $1dea		jsr	floatingpointHandler
.44b7	68		pla				pla
.44b8	aa		tax				tax
.44b9	60		rts				rts
.44ba					CloneVariableName:
.44ba	a0 02		ldy #$02			ldy 	#2 							; copy vname address to temp2
.44bc	b1 2a		lda ($2a),y			lda 	(temp0),y
.44be	85 2e		sta $2e				sta 	temp2
.44c0	c8		iny				iny
.44c1	b1 2a		lda ($2a),y			lda 	(temp0),y
.44c3	85 2f		sta $2f				sta 	temp2+1
.44c5	a5 36		lda $36				lda 	lowMemory+1 				; copy lowMemory address to (temp0),2/3
.44c7	91 2a		sta ($2a),y			sta 	(temp0),y
.44c9	88		dey				dey
.44ca	a5 35		lda $35				lda 	lowMemory
.44cc	91 2a		sta ($2a),y			sta 	(temp0),y
.44ce	a0 00		ldy #$00			ldy 	#0 							; copy data from (temp2) to (lowMemory)
.44d0					_CVNCopy:
.44d0	b1 2e		lda ($2e),y			lda		(temp2),y
.44d2	91 35		sta ($35),y			sta 	(lowMemory),y
.44d4	c8		iny				iny
.44d5	c9 3a		cmp #$3a			cmp 	#$3A 						; until the whole name has been copied.
.44d7	90 f7		bcc $44d0			bcc 	_CVNCopy
.44d9	98		tya				tya 								; add Y to low memory
.44da	18		clc				clc
.44db	65 35		adc $35				adc 	lowMemory
.44dd	85 35		sta $35				sta 	lowMemory
.44df	90 02		bcc $44e3			bcc 	_CVNNoCarry
.44e1	e6 36		inc $36				inc 	lowMemory+1
.44e3					_CVNNoCarry:
.44e3	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/variable/find.asm

.44e4					FindVariable:
.44e4	98		tya				tya
.44e5	48		pha				pha
.44e6	98		tya				tya 								; point temp2 to the actual name
.44e7	18		clc				clc 								; in memory of the variable being created
.44e8	65 28		adc $28				adc 	codePtr
.44ea	85 2e		sta $2e				sta 	temp2
.44ec	a5 29		lda $29				lda 	codePtr+1
.44ee	69 00		adc #$00			adc 	#0
.44f0	85 2f		sta $2f				sta 	temp2+1
.44f2	a0 00		ldy #$00			ldy 	#0
.44f4	a5 3b		lda $3b				lda 	hashList 					; copy hashlist to temp0
.44f6	85 2a		sta $2a				sta 	temp0
.44f8	a5 3c		lda $3c				lda 	hashList+1
.44fa	85 2b		sta $2b				sta 	temp0+1
.44fc	a0 01		ldy #$01	_FVNext:ldy 	#1 							; get MSB
.44fe	b1 2a		lda ($2a),y			lda 	(temp0),y
.4500	f0 2c		beq $452e			beq 	_FVFail
.4502	aa		tax				tax
.4503	88		dey				dey		 							; get LSB
.4504	b1 2a		lda ($2a),y			lda 	(temp0),y
.4506	85 2a		sta $2a				sta 	temp0 						; update pointer.
.4508	86 2b		stx $2b				stx 	temp0+1
.450a	a0 04		ldy #$04			ldy 	#4 							; check hashes match
.450c	b1 2a		lda ($2a),y			lda 	(temp0),y
.450e	cd ef 0d	cmp $0def			cmp 	varHash
.4511	d0 e9		bne $44fc			bne 	_FVNext 					; if not, no point in checking the name.
.4513	88		dey				dey 								; copy name pointer (+2,+3) to temp1.
.4514	b1 2a		lda ($2a),y			lda 	(temp0),y
.4516	85 2d		sta $2d				sta 	temp1+1
.4518	88		dey				dey
.4519	b1 2a		lda ($2a),y			lda 	(temp0),y
.451b	85 2c		sta $2c				sta 	temp1
.451d	a0 00		ldy #$00			ldy 	#0
.451f					_FVCheck:
.451f	b1 2c		lda ($2c),y			lda 	(temp1),y 					; compare names
.4521	d1 2e		cmp ($2e),y			cmp 	(temp2),y
.4523	d0 d7		bne $44fc			bne 	_FVNext		 				; fail if different.
.4525	c8		iny				iny
.4526	c9 3a		cmp #$3a			cmp 	#$3A 						; until reached the end marker.
.4528	90 f5		bcc $451f			bcc 	_FVCheck
.452a	68		pla				pla
.452b	a8		tay				tay
.452c	38		sec				sec
.452d	60		rts				rts
.452e					_FVFail:
.452e	68		pla				pla
.452f	a8		tay				tay
.4530	18		clc				clc
.4531	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/variable/reset.asm

.4532					HashTableReset:
.4532	a2 60		ldx #$60			ldx 	#6*2*hashTableSize			; 6 types, 2 bytes per table entry.
.4534	a9 00		lda #$00			lda 	#0
.4536					_HTRClear:
.4536	9d 67 0a	sta $0a67,x			sta 	hashTables-1,x
.4539	ca		dex				dex
.453a	d0 fa		bne $4536			bne 	_HTRClear
.453c	60		rts				rts

;******  Return to file: variable/variable.asm

.453d					variableHandler:
.453d	7c 40 45	jmp ($4540,x)			jmp 	(variableVectors,x)
.4540					variableVectors:
>4540	48 45					.word _DummyControlHandler ; index 0
>4542	74 43					.word AccessVariable       ; index 2
>4544	04 42					.word CreateArray          ; index 4
>4546	32 45					.word HashTableReset       ; index 6
.4548					_DummyControlHandler:
.4548	60		rts			rts

;******  Return to file: basic.asm

.4549					section_end_variable:
.4549					section_start_footer:

;******  Processing file: footer/footer.asm


;******  Processing file: footer/99end.asm

.003d					endZeroPage:
.0df2					endStorage:
>4549							.align 	256
.4600					programMemory:
>45ff	ff						.byte 	$FF

;******  Return to file: footer/footer.asm


;******  Return to file: basic.asm

.4600					section_end_footer:

;******  End of listing
