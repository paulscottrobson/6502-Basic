
; 64tass Turbo Assembler Macro V1.55.2200 listing file
; 64tass -D autorun=1 -D coldstartnew=0 -Walias -Wmacro-prefix -Wall -q -c -L ../source/bin/basic.lst -l ../source/bin/basic.lbl -Wall -o ../source/bin/stub.prg basic.asm
; Mon Mar 15 17:36:15 2021

;Offset	;Hex		;Monitor	;Source

;******  Command line definitions

=1					autorun=1
=0					coldstartnew=0

;******  Processing input file: basic.asm


;******  Processing file: header/01common.inc


;******  Processing file: header/../generated/installed.inc

=1					installed_header = 1
=1					installed_main = 1
=1					installed_variable = 1
=1					installed_assembler = 1
=1					installed_error = 1
=1					installed_extension = 1
=1					installed_string = 1
=1					installed_device = 1
=0					installed_floatingpoint = 0
=1					installed_interaction = 1
=1					installed_tokeniser = 1
=1					installed_footer = 1

;******  Return to file: header/01common.inc

=$1000					CodeStart = $1000
=$800					MemoryStorage = $800
=$9f00					EndOfMemory = $9F00
=$28					ZeroPageStorage = $28
=$40					StackAddress = $40
=8					StackSize = 8
=2					retStackSizePages = 2
=8					hashTableSize = 8			; if this changes, the calculation is AccessSetup has to match it.
="G"					markerGOSUB = 'G'
="R"					markerREPEAT = 'R'
="F"					markerFOR = 'F'
="W"					markerWHILE = 'W'
="P"					markerPROC = 'P'
="$"					markerSTRING = '$'
="#"					markerFLOAT = '#'
="%"					markerINT = '%'
=5					VarHSize = 5 								; header (2 link, 2 name, 1 hash)
=5					VarASize = 5 								; array [address,size,byteSize]
=4					VarISize = 4 								; integer (32 bit)
=6					VarFSize = 6 								; float (4 mantissa, 1 exponent 1 sign/zero)
=2					VarSSize = 2 								; address (2 bytes)

;******  Return to file: basic.asm


;******  Processing file: header/02macros.inc


;******  Return to file: basic.asm


;******  Processing file: header/03data.inc

>0028					codePtr:.fill 	2							; (codePtr),y points to code.
>002a					temp0: 	.fill 	2							; working variables.
>002c					temp1: 	.fill 	2
>002e					temp2: 	.fill 	2
>0030					temp3: 	.fill 	2
.0032					tempshort:
>0032							.fill 	1
.0033					highMemory:
>0033							.fill 	2
.0035					lowMemory:
>0035							.fill 	2
>0800							.align	256
.0800					returnStack:
>0800							.fill 	retStackSizePages * 256
=512					retStackSize = retStackSizePages * 256
.0a00					SingleLetterVar:
>0a00					 		.fill 	26*4
.0a68					currentStorage:
>0040					esType:	.fill 	StackSize  					; type byte (see above)
>0048					esInt0:	.fill 	StackSize 					; integer or mantissa
>0050					esInt1:	.fill 	StackSize
>0058					esInt2:	.fill 	StackSize
>0060					esInt3:	.fill 	StackSize
>0068					esExp:	.fill 	StackSize 					; exponent ($80 = 0)
>0070					esZSign:.fill 	StackSize 					; for floating point - sign (bit 7) isZero (bit 6)
.0078					endOfStack:
=$48					esMant0 = esInt0 							; synonyms.
=$50					esMant1 = esInt1
=$58					esMant2 = esInt2
=$60					esMant3 = esInt3
.0a68					hashTables:
>0a68							.fill 	6*2*hashTableSize
.0ac8					basePage:
>0ac8							.fill 	2
.0aca					endProgram:
>0aca							.fill 	2
.0acc					endMemory:
>0acc							.fill 	2
.0ace					NullString:
>0ace							.fill 	1							; don't waste memory concreting null strings.
.0acf					convertBuffer:
>0acf							.fill 	35

;******  Processing file: header/../generated/tokenconst.inc

=$80					TOK_EOL=$80
=$81					TOK_SHIFT1=$81
=$82					TOK_SHIFT2=$82
=$83					TOK_SHIFT3=$83
=$84					TOK_FPC=$84
=$85					TOK_STR=$85
=$86					TOK_BINARYST=$86
=$99					TOK_STRUCTST=$99
=$a4					TOK_UNARYST=$a4
=$c9					TOK_TOKENS=$c9
=$86					TKW_AND                      = $86 ; and
=$87					TKW_OR                       = $87 ; or
=$88					TKW_XOR                      = $88 ; xor
=$89					TKW_GREATEREQUAL             = $89 ; >=
=$8a					TKW_LESSEQUAL                = $8a ; <=
=$8b					TKW_GREATER                  = $8b ; >
=$8c					TKW_LESS                     = $8c ; <
=$8d					TKW_EQUAL                    = $8d ; =
=$8e					TKW_LESSGREATER              = $8e ; <>
=$8f					TKW_PLUS                     = $8f ; +
=$90					TKW_MINUS                    = $90 ; -
=$91					TKW_GREATERGREATER           = $91 ; >>
=$92					TKW_LESSLESS                 = $92 ; <<
=$93					TKW_STAR                     = $93 ; *
=$94					TKW_SLASH                    = $94 ; /
=$95					TKW_MOD                      = $95 ; mod
=$96					TKW_HAT                      = $96 ; ^
=$97					TKW_PLING                    = $97 ; !
=$98					TKW_QMARK                    = $98 ; ?
=$99					TKW_REPEAT                   = $99 ; repeat
=$9a					TKW_WHILE                    = $9a ; while
=$9b					TKW_FOR                      = $9b ; for
=$9c					TKW_IF                       = $9c ; if
=$9d					TKW_DEFPROC                  = $9d ; defproc
=$9e					TKW_UNTIL                    = $9e ; until
=$9f					TKW_WEND                     = $9f ; wend
=$a0					TKW_NEXT                     = $a0 ; next
=$a1					TKW_THEN                     = $a1 ; then
=$a2					TKW_ENDIF                    = $a2 ; endif
=$a3					TKW_ENDPROC                  = $a3 ; endproc
=$a4					TKW_LPAREN                   = $a4 ; (
=$a5					TKW_LENLPAREN                = $a5 ; len(
=$a6					TKW_SGNLPAREN                = $a6 ; sgn(
=$a7					TKW_ABSLPAREN                = $a7 ; abs(
=$a8					TKW_RANDOMLPAREN             = $a8 ; random(
=$a9					TKW_PAGE                     = $a9 ; page
=$aa					TKW_TRUE                     = $aa ; true
=$ab					TKW_FALSE                    = $ab ; false
=$ac					TKW_MINLPAREN                = $ac ; min(
=$ad					TKW_MAXLPAREN                = $ad ; max(
=$ae					TKW_SYSLPAREN                = $ae ; sys(
=$af					TKW_TIMERLPAREN              = $af ; timer(
=$b0					TKW_EVENTLPAREN              = $b0 ; event(
=$b1					TKW_GETLPAREN                = $b1 ; get(
=$b2					TKW_INKEYLPAREN              = $b2 ; inkey(
=$b3					TKW_ALLOCLPAREN              = $b3 ; alloc(
=$b4					TKW_CHRDOLLARLPAREN          = $b4 ; chr$(
=$b5					TKW_LEFTDOLLARLPAREN         = $b5 ; left$(
=$b6					TKW_MIDDOLLARLPAREN          = $b6 ; mid$(
=$b7					TKW_RIGHTDOLLARLPAREN        = $b7 ; right$(
=$b8					TKW_STRDOLLARLPAREN          = $b8 ; str$(
=$b9					TKW_VALLPAREN                = $b9 ; val(
=$ba					TKW_PEEKLPAREN               = $ba ; peek(
=$bb					TKW_DEEKLPAREN               = $bb ; deek(
=$bc					TKW_LEEKLPAREN               = $bc ; leek(
=$bd					TKW_ASCLPAREN                = $bd ; asc(
=$be					TKW_INTLPAREN                = $be ; int(
=$bf					TKW_FLOATLPAREN              = $bf ; float(
=$c0					TKW_ISVALLPAREN              = $c0 ; isval(
=$c1					TKW_UPPERDOLLARLPAREN        = $c1 ; upper$(
=$c2					TKW_LOWERDOLLARLPAREN        = $c2 ; lower$(
=$c3					TKW_AT                       = $c3 ; @
=$c4					TKW_WAVY                     = $c4 ; ~
=$c5					TKW_AMP                      = $c5 ; &
=$c6					TKW_GETDOLLARLPAREN          = $c6 ; get$(
=$c7					TKW_INKEYDOLLARLPAREN        = $c7 ; inkey$(
=$c8					TKW_MEM                      = $c8 ; mem
=$c9					TKW_RPAREN                   = $c9 ; )
=$ca					TKW_COLON                    = $ca ; :
=$cb					TKW_COMMA                    = $cb ; ,
=$cc					TKW_SEMICOLON                = $cc ; ;
=$cd					TKW_QUOTE                    = $cd ; '
=$ce					TKW_TO                       = $ce ; to
=$cf					TKW_STEP                     = $cf ; step
=$d0					TKW_PROC                     = $d0 ; proc
=$d1					TKW_LOCAL                    = $d1 ; local
=$d2					TKW_DIM                      = $d2 ; dim
=$d3					TKW_REM                      = $d3 ; rem
=$d4					TKW_LET                      = $d4 ; let
=$d5					TKW_INPUT                    = $d5 ; input
=$d6					TKW_ELSE                     = $d6 ; else
=$d7					TKW_VDU                      = $d7 ; vdu
=$d8					TKW_PRINT                    = $d8 ; print
=$d9					TKW_GOTO                     = $d9 ; goto
=$da					TKW_GOSUB                    = $da ; gosub
=$db					TKW_RETURN                   = $db ; return
=$dc					TKW_DATA                     = $dc ; data
=$dd					TKW_ASSERT                   = $dd ; assert
=$de					TKW_POKE                     = $de ; poke
=$df					TKW_DOKE                     = $df ; doke
=$e0					TKW_LOKE                     = $e0 ; loke
=$e1					TKW_INK                      = $e1 ; ink
=$e2					TKW_PAPER                    = $e2 ; paper
=$e3					TKW_CLS                      = $e3 ; cls
=$e4					TKW_LOCATE                   = $e4 ; locate
=$e5					TKW_BREAK                    = $e5 ; break
=$e6					TKW_PERIOD                   = $e6 ; .
=$e7					TKW_HASH                     = $e7 ; #
=$86					TKW_CLEAR                    = $86 ; clear
=$87					TKW_LOAD                     = $87 ; load
=$88					TKW_SAVE                     = $88 ; save
=$89					TKW_LIST                     = $89 ; list
=$8a					TKW_NEW                      = $8a ; new
=$8b					TKW_RUN                      = $8b ; run
=$8c					TKW_READ                     = $8c ; read
=$8d					TKW_RESTORE                  = $8d ; restore
=$8e					TKW_END                      = $8e ; end
=$8f					TKW_STOP                     = $8f ; stop
=$90					TKW_XEMU                     = $90 ; xemu
=$91					TKW_ORA                      = $91 ; ora
=$92					TKW_LPARENANDRPAREN          = $92 ; (and)
=$93					TKW_EOR                      = $93 ; eor
=$94					TKW_ADC                      = $94 ; adc
=$95					TKW_STA                      = $95 ; sta
=$96					TKW_LDA                      = $96 ; lda
=$97					TKW_CMP                      = $97 ; cmp
=$98					TKW_SBC                      = $98 ; sbc
=$99					TKW_ASL                      = $99 ; asl
=$9a					TKW_ROL                      = $9a ; rol
=$9b					TKW_LSR                      = $9b ; lsr
=$9c					TKW_ROR                      = $9c ; ror
=$9d					TKW_STX                      = $9d ; stx
=$9e					TKW_LDX                      = $9e ; ldx
=$9f					TKW_DEC                      = $9f ; dec
=$a0					TKW_INC                      = $a0 ; inc
=$a1					TKW_STZ                      = $a1 ; stz
=$a2					TKW_BIT                      = $a2 ; bit
=$a3					TKW_STY                      = $a3 ; sty
=$a4					TKW_LDY                      = $a4 ; ldy
=$a5					TKW_CPY                      = $a5 ; cpy
=$a6					TKW_CPX                      = $a6 ; cpx
=$a7					TKW_TSB                      = $a7 ; tsb
=$a8					TKW_TRB                      = $a8 ; trb
=$a9					TKW_JSR                      = $a9 ; jsr
=$aa					TKW_JMP                      = $aa ; jmp
=$ab					TKW_BPL                      = $ab ; bpl
=$ac					TKW_BMI                      = $ac ; bmi
=$ad					TKW_BVC                      = $ad ; bvc
=$ae					TKW_BVS                      = $ae ; bvs
=$af					TKW_BCC                      = $af ; bcc
=$b0					TKW_BCS                      = $b0 ; bcs
=$b1					TKW_BNE                      = $b1 ; bne
=$b2					TKW_BEQ                      = $b2 ; beq
=$b3					TKW_BRA                      = $b3 ; bra
=$b4					TKW_BRK                      = $b4 ; brk
=$b5					TKW_PHP                      = $b5 ; php
=$b6					TKW_CLC                      = $b6 ; clc
=$b7					TKW_PLP                      = $b7 ; plp
=$b8					TKW_SEC                      = $b8 ; sec
=$b9					TKW_RTI                      = $b9 ; rti
=$ba					TKW_PHA                      = $ba ; pha
=$bb					TKW_CLI                      = $bb ; cli
=$bc					TKW_PHY                      = $bc ; phy
=$bd					TKW_RTS                      = $bd ; rts
=$be					TKW_PLA                      = $be ; pla
=$bf					TKW_SEI                      = $bf ; sei
=$c0					TKW_PLY                      = $c0 ; ply
=$c1					TKW_DEY                      = $c1 ; dey
=$c2					TKW_TXA                      = $c2 ; txa
=$c3					TKW_TYA                      = $c3 ; tya
=$c4					TKW_TXS                      = $c4 ; txs
=$c5					TKW_TAY                      = $c5 ; tay
=$c6					TKW_TAX                      = $c6 ; tax
=$c7					TKW_CLV                      = $c7 ; clv
=$c8					TKW_TSX                      = $c8 ; tsx
=$c9					TKW_INY                      = $c9 ; iny
=$ca					TKW_DEX                      = $ca ; dex
=$cb					TKW_CLD                      = $cb ; cld
=$cc					TKW_PHX                      = $cc ; phx
=$cd					TKW_INX                      = $cd ; inx
=$ce					TKW_NOP                      = $ce ; nop
=$cf					TKW_SED                      = $cf ; sed
=$d0					TKW_PLX                      = $d0 ; plx
=$86					TKW_VPOKE                    = $86 ; vpoke
=$87					TKW_VDOKE                    = $87 ; vdoke
=$88					TKW_VLOAD                    = $88 ; vload
=$86					TKW_VPEEKLPAREN              = $86 ; vpeek(
=$87					TKW_VDEEKLPAREN              = $87 ; vdeek(

;******  Return to file: header/03data.inc

=$3a					TYPE_INT =		($3A) 						; type bytes that end identifier.
=$3b					TYPE_INTARRAY =	($3B)
=$3c					TYPE_STR =		($3C)
=$3d					TYPE_STRARRAY =	($3D)
=$3e					TYPE_FLOAT =	($3E)
=$3f					TYPE_FLOATARRAY=($3F)

;******  Processing file: header/../generated/asmconst.inc

=$91					TKA_GROUP1 = $91
=$99					TKA_GROUP2 = $99
=$ab					TKA_GROUP3 = $ab
=$b4					TKA_GROUP4 = $b4
=$d1					TKA_END4 = $d1

;******  Return to file: header/03data.inc


;******  Return to file: basic.asm


;******  Processing file: header/header.inc


;******  Return to file: basic.asm


;******  Processing file: assembler/asmconst.inc

=0					AMD_IMM		= 0					; Immediate mode.
=1					AMD_ZERO 	= 1					; Zero Page
=2					AMD_ACCIMP	= 2					; Accumulator/Implied
=3					AMD_ABS 	= 3					; Absolute
=4					AMD_ZEROINDY= 4					; Zero Indirect,Y
=5					AMD_ZEROX 	= 5					; Zero Page,X
=6					AMD_ABSY 	= 6					; Absolute,Y
=7					AMD_ABSX 	= 7					; Absolute,X
=8					AMD_ZEROIND = 8					; Zero Indirect
=9					AMD_ZEROY 	= 9					; Zero Page,Y
=10					AMD_ABSIND 	= 10				; Absolute Indirect
=11					AMD_ABSINDX	= 11				; Absolute Indirect Indexed
=12					AMD_REL		= 12				; Relative
=13					AMD_ZEROINDX= 13 				; Zero Indirect,X

;******  Return to file: basic.asm


;******  Processing file: assembler/assembler.inc


;******  Return to file: basic.asm


;******  Processing file: device/device.inc


;******  Return to file: basic.asm


;******  Processing file: error/error.inc


;******  Return to file: basic.asm


;******  Processing file: error/errorhandler.inc


;******  Processing file: error/../generated/errorid.inc

=1					ErrorID_Missing = 1 ; Feature not Present
=2					ErrorID_Syntax = 2 ; Syntax Error
=3					ErrorID_NoModule = 3 ; Module disabled
=4					ErrorID_Assert = 4 ; Assertion failed
=5					ErrorID_DivZero = 5 ; Divide By Zero
=6					ErrorID_Stop = 6 ; Stop
=7					ErrorID_BadType = 7 ; Type Mismatch
=8					ErrorID_BadValue = 8 ; Illegal Value
=9					ErrorID_MissingRP = 9 ; Missing right bracket
=10					ErrorID_MissingComma = 10 ; Missing comma
=11					ErrorID_NoReference = 11 ; Missing reference
=12					ErrorID_LineNumber = 12 ; Line Number not found
=13					ErrorID_StrLen = 13 ; String too long
=14					ErrorID_ReturnErr = 14 ; RETURN without GOSUB
=15					ErrorID_UntilErr = 15 ; UNTIL without REPEAT
=16					ErrorID_NextErr = 16 ; NEXT without FOR
=17					ErrorID_WendErr = 17 ; WEND without WHILE
=18					ErrorID_endprocErr = 18 ; ENDPROC without PROC
=19					ErrorID_BadIndex = 19 ; Bad NEXT index
=20					ErrorID_Struct = 20 ; Structures nested wrong
=21					ErrorID_NoAuto = 21 ; Cannot create variable
=22					ErrorID_RetStack = 22 ; Return stack out of space
=23					ErrorID_NoProc = 23 ; Unknown Procedure
=24					ErrorID_Params = 24 ; Parameters do not match
=25					ErrorID_DupArray = 25 ; Array already defined
=26					ErrorID_NotArray = 26 ; DIM requires array
=27					ErrorID_ArrayIndex = 27 ; Bad array index
=28					ErrorID_DataError = 28 ; Out of data
=29					ErrorID_Tokenise = 29 ; Cannot tokenise line
=30					ErrorID_Save = 30 ; Save failed
=31					ErrorID_Load = 31 ; Load failed
=32					ErrorID_Break = 32 ; Break
=33					ErrorID_Memory = 33 ; Out of memory
=34					ErrorID_NumStack = 34 ; Expression too complex
=35					ErrorID_Assembler = 35 ; Bad Operand/Mode
=36					ErrorID_Branch = 36 ; Branch out of range
=37					ErrorID_Label = 37 ; Label changed value

;******  Return to file: error/errorhandler.inc


;******  Return to file: basic.asm


;******  Processing file: extension/extension.inc


;******  Return to file: basic.asm


;******  Processing file: floatingpoint/float.inc

=5					FloatEmbeddedSize = 5

;******  Return to file: basic.asm


;******  Processing file: floatingpoint/floatingpoint.inc


;******  Return to file: basic.asm


;******  Processing file: interaction/interaction.inc


;******  Return to file: basic.asm


;******  Processing file: main/main.inc


;******  Return to file: basic.asm


;******  Processing file: string/memory.inc

=252					MaxStringSize = 252

;******  Return to file: basic.asm


;******  Processing file: string/string.inc


;******  Return to file: basic.asm


;******  Processing file: tokeniser/detokenise/colouring.inc

=$84					LTYLineNumber = $84
=$82					LTYPunctuation = $82
=$87					LTYIdentifier = $87
=$86					LTYConstant = $86
=$83					LTYKeyword = $83
=$81					LTYString = $81

;******  Return to file: basic.asm


;******  Processing file: tokeniser/tokeniser.inc


;******  Return to file: basic.asm


;******  Processing file: variable/variable.inc


;******  Return to file: basic.asm


;******  Processing file: footer/footer.inc


;******  Return to file: basic.asm

.1000					section_start_header:

;******  Processing file: header/header.asm


;******  Processing file: header/00start.asm

.1000					Start:
.1000	4c 0a 10	jmp $100a			jmp 	GoColdStart 				; +0 	boot BASIC
.1003	4c 28 10	jmp $1028			jmp 	GoTokTest					; +3 	run tokeniser test code.
>1006	e4 38						.word 	TokenTableAddress
.1008							else
>1008	00 00						.word 	0
.100a					GoColdStart:
.100a	a9 00		lda #$00			lda 	#(programMemory) & $FF
.100c	8d c8 0a	sta $0ac8			sta 	basePage
.100f	a9 40		lda #$40			lda 	#(programMemory) >> 8
.1011	8d c9 0a	sta $0ac9			sta 	1+(basePage)
.1014	a9 00		lda #$00			lda 	#(endOfMemory) & $FF
.1016	8d cc 0a	sta $0acc			sta 	endMemory
.1019	a9 9f		lda #$9f			lda 	#(endOfMemory) >> 8
.101b	8d cd 0a	sta $0acd			sta 	1+(endMemory)
.101e	a2 06		ldx #$06		ldx	#6
.1020	20 b9 14	jsr $14b9		jsr	deviceHandler
.1023	a2 00		ldx #$00		ldx	#0
.1025	20 e0 1a	jsr $1ae0		jsr	interactionHandler
.1028					GoTokTest:
.1028	a2 04		ldx #$04		ldx	#4
.102a	20 16 3c	jsr $3c16		jsr	tokeniserHandler

;******  Return to file: header/header.asm


;******  Return to file: basic.asm

.102d					section_end_header:
.102d					section_start_assembler:

;******  Processing file: assembler/assembler.asm


;******  Processing file: assembler/asmoperand.asm

.102d					AsmGetOperand:
.102d	a2 00		ldx #$00			ldx 	#0 							; clear the operand.
.102f	20 01 30	jsr $3001			jsr 	MInt32False
.1032	b1 28		lda ($28),y			lda 	(codePtr),y 				; first into X
.1034	aa		tax				tax
.1035	a9 02		lda #$02			lda 	#AMD_ACCIMP
.1037	e0 80		cpx #$80			cpx 	#TOK_EOL 					; if end of line or colon, return implied mode.
.1039	f0 41		beq $107c			beq 	_AGOExit
.103b	e0 ca		cpx #$ca			cpx 	#TKW_COLON
.103d	f0 3d		beq $107c			beq 	_AGOExit
.103f	c8		iny				iny 								; consume the token
.1040	a9 00		lda #$00			lda 	#AMD_IMM
.1042	e0 e7		cpx #$e7			cpx 	#TKW_HASH 					; if a hash present, then immediate mode.
.1044	f0 2d		beq $1073			beq		_AGOEvalExit 				; with an operand.
.1046	e0 a4		cpx #$a4			cpx 	#TKW_LPAREN 				; left bracket ?
.1048	f0 40		beq $108a			beq 	_AGOIndirect
.104a	e0 01		cpx #$01			cpx 	#$01 						; is it "A" e.g. the variable A.
.104c	d0 0b		bne $1059			bne 	_AGOZeroPage1 				; if not it is zero zero,x zero,y, unpick 1 iny
.104e	b1 28		lda ($28),y			lda 	(codePtr),y 				; get the second character & consume it
.1050	c8		iny				iny
.1051	aa		tax				tax
.1052	a9 02		lda #$02			lda 	#AMD_ACCIMP 				; and return Acc/Implied if it is just A
.1054	e0 3a		cpx #$3a			cpx 	#$3A
.1056	f0 24		beq $107c			beq 	_AGOExit
.1058	88		dey				dey 								; unpick 2 iny
.1059					_AGOZeroPage1:
.1059	88		dey				dey
.105a	a9 00		lda #$00			lda 	#0 							; get the address into esInt0/1
.105c	a2 06		ldx #$06		ldx	#6
.105e	20 6b 31	jsr $316b		jsr	mainHandler
.1061	20 b9 10	jsr $10b9			jsr 	AsmGetIndexing
.1064	a9 01		lda #$01			lda 	#AMD_ZERO
.1066	90 14		bcc $107c			bcc 	_AGOExit
.1068	a9 05		lda #$05			lda 	#AMD_ZEROX
.106a	e0 00		cpx #$00			cpx 	#0
.106c	f0 0e		beq $107c			beq 	_AGOExit
.106e	a9 09		lda #$09			lda 	#AMD_ZEROY
.1070	4c 7c 10	jmp $107c			jmp 	_AGOExit
.1073					_AGOEvalExit:
.1073	48		pha				pha
.1074	a9 00		lda #$00			lda 	#0 							; evaluate operand in root.
.1076	a2 06		ldx #$06		ldx	#6
.1078	20 6b 31	jsr $316b		jsr	mainHandler
.107b	68		pla				pla
.107c					_AGOExit:
.107c	48		pha				pha 								; save the mode
.107d	a5 58		lda $58				lda 	esInt2 						; check the operand is zero.
.107f	05 60		ora $60				ora 	esInt3
.1081	d0 02		bne $1085			bne 	_AGOValue
.1083	68		pla				pla
.1084	60		rts				rts
.1085					_AGOValue:
.1085	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.1087	20 da 14	jsr $14da		jsr	errorHandler
.108a					_AGOIndirect:
.108a	a9 00		lda #$00			lda 	#0 							; evaluate operand in root.
.108c	a2 06		ldx #$06		ldx	#6
.108e	20 6b 31	jsr $316b		jsr	mainHandler
.1091	b1 28		lda ($28),y			lda 	(codePtr),y 				; does ) follow ? if so might be ) or ),Y
.1093	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.1095	f0 11		beq $10a8			beq 	_AGOIndIndY
.1097	20 b9 10	jsr $10b9			jsr 	ASMGetIndexing 				; must be ,X)
.109a	90 39		bcc $10d5			bcc 	AGISyntax
.109c	e0 00		cpx #$00			cpx 	#0
.109e	d0 35		bne $10d5			bne 	AGISyntax
.10a0	a2 00		ldx #$00		ldx	#0
.10a2	20 6b 31	jsr $316b		jsr	mainHandler
.10a5	a9 0d		lda #$0d			lda 	#AMD_ZEROINDX
.10a7	60		rts				rts
.10a8					_AGOIndIndY:
.10a8	c8		iny				iny
.10a9	20 b9 10	jsr $10b9			jsr 	ASMGetIndexing 				; get indexing if any
.10ac	a9 08		lda #$08			lda 	#AMD_ZEROIND
.10ae	90 cc		bcc $107c			bcc 	_AGOExit 					; none then exit
.10b0	e0 00		cpx #$00			cpx 	#0 							; must be ,Y
.10b2	f0 21		beq $10d5			beq 	AGISyntax
.10b4	a9 04		lda #$04			lda 	#AMD_ZEROINDY
.10b6	4c 7c 10	jmp $107c			jmp 	_AGOExit
.10b9					AsmGetIndexing:
.10b9	b1 28		lda ($28),y			lda 	(codePtr),y 				; check for comma
.10bb	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.10bd	18		clc				clc
.10be	d0 14		bne $10d4			bne 	_AGIExit 					; no comma, return with CC
.10c0	c8		iny				iny 								; get what SHOULD be X or Y
.10c1	b1 28		lda ($28),y			lda 	(codePtr),y  				; read it
.10c3	38		sec				sec 								; subtract 6 bit ASCII of X
.10c4	e9 18		sbc #$18			sbc 	#"X" & $3F
.10c6	c9 02		cmp #$02			cmp 	#2 							; if unsigned >= 2 then error
.10c8	b0 0b		bcs $10d5			bcs 	AGISyntax
.10ca	aa		tax				tax 								; put in index
.10cb	c8		iny				iny 								; get what follows that, should be the $3A marker
.10cc	b1 28		lda ($28),y			lda 	(codePtr),y
.10ce	c8		iny				iny
.10cf	c9 3a		cmp #$3a			cmp 	#$3A
.10d1	d0 02		bne $10d5			bne 	AGISyntax
.10d3	38		sec				sec 								; return CS and index mode in X
.10d4					_AGIExit:
.10d4	60		rts				rts
.10d5					AGISyntax:
.10d5	a2 02		ldx #$02			ldx 	#ErrorID_syntax
.10d7	20 da 14	jsr $14da		jsr	errorHandler

;******  Return to file: assembler/assembler.asm


;******  Processing file: assembler/asmwrite.asm

.0af2					finalOpcode:
>0af2							.fill 	1
.10da					AsmWriteInstruction:
.10da	8d f2 0a	sta $0af2			sta 	finalOpcode					; save opcode.
.10dd	98		tya				tya
.10de	48		pha				pha
.10df	ad 38 0a	lda $0a38			lda 	SingleLetterVar+("O"-"A")*4	; check O
.10e2	29 02		and #$02			and 	#2
.10e4	f0 2d		beq $1113			beq 	_ASMWNoEcho 				; if zero then don't echo.
.10e6	ad 3d 0a	lda $0a3d			lda 	SingleLetterVar+("P"-"A")*4+1 ; write address in P
.10e9	20 4e 11	jsr $114e			jsr 	AWIWriteHex
.10ec	ad 3c 0a	lda $0a3c			lda 	SingleLetterVar+("P"-"A")*4
.10ef	20 4e 11	jsr $114e			jsr 	AWIWriteHex
.10f2	ad f2 0a	lda $0af2			lda 	finalOpcode 				; write opcode
.10f5	20 47 11	jsr $1147			jsr 	AWIWriteHexSpace
.10f8	e0 00		cpx #$00			cpx 	#0
.10fa	f0 0e		beq $110a			beq 	_ASMWEchoExit
.10fc	a5 48		lda $48				lda 	esInt0
.10fe	20 47 11	jsr $1147			jsr 	AWIWriteHexSpace
.1101	e0 01		cpx #$01			cpx 	#1
.1103	f0 05		beq $110a			beq 	_ASMWEchoExit
.1105	a5 50		lda $50				lda 	esInt1
.1107	20 47 11	jsr $1147			jsr 	AWIWriteHexSpace
.110a					_ASMWEchoExit:
.110a	8a		txa				txa
.110b	48		pha				pha
.110c	a2 04		ldx #$04		ldx	#4
.110e	20 b9 14	jsr $14b9		jsr	deviceHandler
.1111	68		pla				pla
.1112	aa		tax				tax
.1113					_ASMWNoEcho:
.1113	ad f2 0a	lda $0af2			lda 	finalOpcode
.1116	20 2e 11	jsr $112e			jsr 	AsmWriteByte
.1119	e0 00		cpx #$00			cpx 	#0
.111b	f0 0e		beq $112b			beq 	_ASMWExit
.111d	a5 48		lda $48				lda 	esInt0
.111f	20 2e 11	jsr $112e			jsr 	AsmWriteByte
.1122	e0 01		cpx #$01			cpx 	#1
.1124	f0 05		beq $112b			beq 	_ASMWExit
.1126	a5 50		lda $50				lda 	esInt1
.1128	20 2e 11	jsr $112e			jsr 	AsmWriteByte
.112b					_ASMWExit:
.112b	68		pla				pla
.112c	a8		tay				tay
.112d	60		rts				rts
.112e					AsmWriteByte:
.112e	a0 00		ldy #$00			ldy 	#0
.1130	48		pha				pha
.1131	ad 3c 0a	lda $0a3c			lda 	SingleLetterVar+("P"-"A")*4 ; copy address to temp0
.1134	85 2a		sta $2a				sta 	temp0
.1136	ad 3d 0a	lda $0a3d			lda 	SingleLetterVar+("P"-"A")*4+1
.1139	85 2b		sta $2b				sta 	temp0+1
.113b	68		pla				pla 								; write out the byte.
.113c	91 2a		sta ($2a),y			sta 	(temp0),y
.113e	ee 3c 0a	inc $0a3c			inc 	SingleLetterVar+("P"-"A")*4	; increment P
.1141	d0 03		bne $1146			bne 	_AWBNoCarry
.1143	ee 3d 0a	inc $0a3d			inc 	SingleLetterVar+("P"-"A")*4+1
.1146					_AWBNoCarry:
.1146	60		rts				rts
.1147					AWIWriteHexSpace:
.1147	48		pha				pha
.1148	a9 20		lda #$20			lda 	#" "
.114a	20 61 11	jsr $1161			jsr 	AWIPrintChar
.114d	68		pla				pla
.114e					AWIWriteHex:
.114e	48		pha				pha
.114f	4a		lsr a				lsr 	a
.1150	4a		lsr a				lsr 	a
.1151	4a		lsr a				lsr 	a
.1152	4a		lsr a				lsr 	a
.1153	20 57 11	jsr $1157			jsr 	AWIPrintNibble
.1156	68		pla				pla
.1157					AWIPrintNibble:
.1157	29 0f		and #$0f			and 	#15
.1159	c9 0a		cmp #$0a			cmp 	#10
.115b	90 02		bcc $115f			bcc 	_AWIPNDigit
.115d	69 06		adc #$06			adc 	#6
.115f					_AWIPNDigit:
.115f	69 30		adc #$30			adc 	#48
.1161					AWIPrintChar:
.1161	85 32		sta $32				sta 	tempShort
.1163	8a		txa				txa
.1164	48		pha				pha
.1165	a5 32		lda $32				lda 	tempShort
.1167	a2 16		ldx #$16		ldx	#22
.1169	20 b9 14	jsr $14b9		jsr	deviceHandler
.116c	68		pla				pla
.116d	aa		tax				tax
.116e	60		rts				rts

;******  Return to file: assembler/assembler.asm


;******  Processing file: assembler/assemblecmd.asm

.0af3					asmToken:
>0af3							.fill 	1
.0af4					asmMode:
>0af4							.fill 	1 							; esInt0/1
.0af5					asmBaseOpcode:
>0af5							.fill 	1
.116f					AssembleOneInstruction:
.116f	8d f3 0a	sta $0af3			sta 	asmToken 					; save the token
.1172	aa		tax				tax
.1173	bd 3f 11	lda $113f,x			lda 	OpcodeTable-TKA_GROUP1,x 	; get the base opcode.
.1176	8d f5 0a	sta $0af5			sta 	asmBaseOpcode
.1179	20 2d 10	jsr $102d			jsr 	AsmGetOperand 				; identify the address mode and operand where applicable.
.117c	8d f4 0a	sta $0af4			sta 	asmMode
.117f	a5 50		lda $50				lda 	esInt1 						; check if this is a three byte operand.
.1181	d0 05		bne $1188			bne 	_AOIThreeBytes 				; if so, we have to use three byte
.1183	20 9e 11	jsr $119e			jsr 	AssembleAttempt 			; try to assemble token/mode/operand (2 bytes)
.1186	b0 10		bcs $1198			bcs 	_AOISuccess 				; worked ok.
.1188					_AOIThreeBytes:
.1188	ae f4 0a	ldx $0af4			ldx 	asmMode 					; convert mode to 3 byte version, where possible.
.118b	bd c2 11	lda $11c2,x			lda 	AbsoluteVersionTable,x
.118e	30 09		bmi $1199			bmi 	_AOIError					; not possible, no equivalent.
.1190	8d f4 0a	sta $0af4			sta 	asmMode
.1193	20 9e 11	jsr $119e			jsr 	AssembleAttempt 			; try to assemble token/mode/operand (3 bytes)
.1196	90 01		bcc $1199			bcc 	_AOIError 					; didn't work.
.1198					_AOISuccess:
.1198	60		rts				rts
.1199					_AOIError:
.1199	a2 23		ldx #$23			ldx 	#ErrorID_Assembler
.119b	20 da 14	jsr $14da		jsr	errorHandler
.119e					AssembleAttempt:
.119e	20 a7 11	jsr $11a7			jsr 	_AADispatch 				; go to the code which dispatches to the appropriate
.11a1	b0 03		bcs $11a6			bcs 	_AAExit 					; exit if carry set, e.g. was successful
.11a3	20 51 13	jsr $1351			jsr 	AssembleSpecialCase
.11a6					_AAExit:
.11a6	60		rts				rts
.11a7					_AADispatch:
.11a7	ad f3 0a	lda $0af3			lda 	asmToken
.11aa	c9 b4		cmp #$b4			cmp 	#TKA_GROUP4
.11ac	b0 11		bcs $11bf			bcs 	_AAGroup4
.11ae	c9 ab		cmp #$ab			cmp 	#TKA_GROUP3
.11b0	b0 0a		bcs $11bc			bcs 	_AAGroup3
.11b2	c9 99		cmp #$99			cmp 	#TKA_GROUP2
.11b4	b0 03		bcs $11b9			bcs 	_AAGroup2
.11b6	4c 97 12	jmp $1297			jmp 	AssembleGroup1
.11b9					_AAGroup2:
.11b9	4c f2 12	jmp $12f2			jmp 	AssembleGroup2
.11bc					_AAGroup3:
.11bc	4c 13 13	jmp $1313			jmp 	AssembleGroup3
.11bf					_AAGroup4:
.11bf	4c 47 13	jmp $1347			jmp 	AssembleGroup4
.11c2					AbsoluteVersionTable:
>11c2	ff						.byte	$FF 			; fail AMD_IMM
>11c3	03						.byte	AMD_ABS 		; absolute AMD_ZERO
>11c4	ff						.byte	$FF 			; fail AMD_ACCIMP
>11c5	ff						.byte	$FF 			; fail AMD_ABS
>11c6	ff						.byte 	$FF 			; fail AMD_ZEROINDY
>11c7	07						.byte	AMD_ABSX 		; absolute AMD_ZEROX
>11c8	ff						.byte	$FF 			; fail AMD_ABSY
>11c9	ff						.byte	$FF 			; fail AMD_ABSX
>11ca	0a						.byte	AMD_ABSIND 		; absolute AMD_ZEROIND
>11cb	06						.byte	AMD_ABSY 		; absolute AMD_ZEROY
>11cc	ff						.byte	$FF 			; fail AMD_ABSIND
>11cd	ff						.byte	$FF 			; fail AMD_ABSINDX
>11ce	ff						.byte	$FF 			; fail AMD_REL
>11cf	0b						.byte 	AMD_ABSINDX 	; absolute AMD_ZEROINDX

;******  Processing file: assembler/../generated/asmtables.inc

.11d0					OpcodeTable:
>11d0	01					.byte	$01			; $91 ora
>11d1	21					.byte	$21			; $92 (and)
>11d2	41					.byte	$41			; $93 eor
>11d3	61					.byte	$61			; $94 adc
>11d4	81					.byte	$81			; $95 sta
>11d5	a1					.byte	$a1			; $96 lda
>11d6	c1					.byte	$c1			; $97 cmp
>11d7	e1					.byte	$e1			; $98 sbc
>11d8	02					.byte	$02			; $99 asl
>11d9	22					.byte	$22			; $9a rol
>11da	42					.byte	$42			; $9b lsr
>11db	62					.byte	$62			; $9c ror
>11dc	82					.byte	$82			; $9d stx
>11dd	a2					.byte	$a2			; $9e ldx
>11de	c2					.byte	$c2			; $9f dec
>11df	e2					.byte	$e2			; $a0 inc
>11e0	60					.byte	$60			; $a1 stz
>11e1	20					.byte	$20			; $a2 bit
>11e2	80					.byte	$80			; $a3 sty
>11e3	a0					.byte	$a0			; $a4 ldy
>11e4	c0					.byte	$c0			; $a5 cpy
>11e5	e0					.byte	$e0			; $a6 cpx
>11e6	00					.byte	$00			; $a7 tsb
>11e7	10					.byte	$10			; $a8 trb
>11e8	14					.byte	$14			; $a9 jsr
>11e9	40					.byte	$40			; $aa jmp
>11ea	10					.byte	$10			; $ab bpl
>11eb	30					.byte	$30			; $ac bmi
>11ec	50					.byte	$50			; $ad bvc
>11ed	70					.byte	$70			; $ae bvs
>11ee	90					.byte	$90			; $af bcc
>11ef	b0					.byte	$b0			; $b0 bcs
>11f0	d0					.byte	$d0			; $b1 bne
>11f1	f0					.byte	$f0			; $b2 beq
>11f2	80					.byte	$80			; $b3 bra
>11f3	00					.byte	$00			; $b4 brk
>11f4	08					.byte	$08			; $b5 php
>11f5	18					.byte	$18			; $b6 clc
>11f6	28					.byte	$28			; $b7 plp
>11f7	38					.byte	$38			; $b8 sec
>11f8	40					.byte	$40			; $b9 rti
>11f9	48					.byte	$48			; $ba pha
>11fa	58					.byte	$58			; $bb cli
>11fb	5a					.byte	$5a			; $bc phy
>11fc	60					.byte	$60			; $bd rts
>11fd	68					.byte	$68			; $be pla
>11fe	78					.byte	$78			; $bf sei
>11ff	7a					.byte	$7a			; $c0 ply
>1200	88					.byte	$88			; $c1 dey
>1201	8a					.byte	$8a			; $c2 txa
>1202	98					.byte	$98			; $c3 tya
>1203	9a					.byte	$9a			; $c4 txs
>1204	a8					.byte	$a8			; $c5 tay
>1205	aa					.byte	$aa			; $c6 tax
>1206	b8					.byte	$b8			; $c7 clv
>1207	ba					.byte	$ba			; $c8 tsx
>1208	c8					.byte	$c8			; $c9 iny
>1209	ca					.byte	$ca			; $ca dex
>120a	d8					.byte	$d8			; $cb cld
>120b	da					.byte	$da			; $cc phx
>120c	e8					.byte	$e8			; $cd inx
>120d	ea					.byte	$ea			; $ce nop
>120e	f8					.byte	$f8			; $cf sed
>120f	fa					.byte	$fa			; $d0 plx
.1210					Group2OpcodeAvailability:
>1210	ae					.byte	$ae			; $99 asl $02
>1211	ae					.byte	$ae			; $9a rol $22
>1212	ae					.byte	$ae			; $9b lsr $42
>1213	ae					.byte	$ae			; $9c ror $62
>1214	0a					.byte	$0a			; $9d stx $82
>1215	0b					.byte	$0b			; $9e ldx $a2
>1216	aa					.byte	$aa			; $9f dec $c2
>1217	aa					.byte	$aa			; $a0 inc $e2
>1218	22					.byte	$22			; $a1 stz $60
>1219	aa					.byte	$aa			; $a2 bit $20
>121a	0a					.byte	$0a			; $a3 sty $80
>121b	ab					.byte	$ab			; $a4 ldy $a0
>121c	2b					.byte	$2b			; $a5 cpy $c0
>121d	0b					.byte	$0b			; $a6 cpx $e0
>121e	0a					.byte	$0a			; $a7 tsb $00
>121f	0a					.byte	$0a			; $a8 trb $10
>1220	08					.byte	$08			; $a9 jsr $14
>1221	08					.byte	$08			; $aa jmp $40
.1222					AssemblerSpecialCases:
>1222	aa 0a 6c				.byte	$aa,10,$6c		; jmp (abs)
>1225	aa 0b 7c				.byte	$aa,11,$7c		; jmp (abs,x)
>1228	9e 06 be				.byte	$9e,6,$be		; ldx abs,y
>122b	9e 09 b6				.byte	$9e,9,$b6		; ldx zp,y
>122e	9d 09 96				.byte	$9d,9,$96		; stx zp,y
>1231	a0 02 1a				.byte	$a0,2,$1a		; inc acc
>1234	9f 02 3a				.byte	$9f,2,$3a		; dec acc
>1237	a2 00 89				.byte	$a2,0,$89		; bit #
>123a	a1 03 9c				.byte	$a1,3,$9c		; stz abs
>123d	a1 07 9e				.byte	$a1,7,$9e		; stz abs,x
>1240	00					.byte	0

;******  Return to file: assembler/assemblecmd.asm


;******  Return to file: assembler/assembler.asm


;******  Processing file: assembler/assemblelabel.asm

.1241					AssembleLabel:
.1241	b1 28		lda ($28),y			lda 	(codePtr),y 				; check it's followed by a variable name.
.1243	c9 3a		cmp #$3a			cmp 	#$3A
.1245	b0 4b		bcs $1292			bcs 	_ALSyntax
.1247	a9 00		lda #$00			lda 	#0							; get a variable name on to stack:0
.1249	a2 00		ldx #$00		ldx	#0
.124b	20 25 3f	jsr $3f25		jsr	variableHandler
.124e	a5 40		lda $40				lda 	esType 						; check integer reference
.1250	c9 80		cmp #$80			cmp 	#$80
.1252	d0 3e		bne $1292			bne 	_ALSyntax
.1254	a5 48		lda $48				lda 	esInt0 						; copy that reference address to temp0
.1256	85 2a		sta $2a				sta 	temp0
.1258	a5 50		lda $50				lda 	esInt1
.125a	85 2b		sta $2b				sta 	temp0+1
.125c	98		tya				tya
.125d	48		pha				pha
.125e	ad 38 0a	lda $0a38			lda 	SingleLetterVar+("O"-"A")*4	; are we in Pass 2
.1261	4a		lsr a				lsr 	a
.1262	90 11		bcc $1275			bcc 	_ALWrite
.1264	a0 00		ldy #$00			ldy 	#0
.1266	ad 3c 0a	lda $0a3c			lda 	SingleLetterVar+("P"-"A")*4 ; compare the value in P to the variable
.1269	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.126b	d0 20		bne $128d			bne 	_ALChanged
.126d	c8		iny				iny
.126e	ad 3d 0a	lda $0a3d			lda 	SingleLetterVar+("P"-"A")*4+1
.1271	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.1273	d0 18		bne $128d			bne 	_ALChanged
.1275					_ALWrite:
.1275	a0 00		ldy #$00			ldy 	#0
.1277	ad 3c 0a	lda $0a3c			lda 	SingleLetterVar+("P"-"A")*4 ; copy the value in P into the variable
.127a	91 2a		sta ($2a),y			sta 	(temp0),y
.127c	ad 3d 0a	lda $0a3d			lda 	SingleLetterVar+("P"-"A")*4+1
.127f	c8		iny				iny
.1280	91 2a		sta ($2a),y			sta 	(temp0),y
.1282	a9 00		lda #$00			lda 	#0
.1284	c8		iny				iny
.1285	91 2a		sta ($2a),y			sta 	(temp0),y
.1287	c8		iny				iny
.1288	91 2a		sta ($2a),y			sta 	(temp0),y
.128a	68		pla				pla
.128b	a8		tay				tay
.128c	60		rts				rts
.128d					_ALChanged:
.128d	a2 25		ldx #$25			ldx 	#ErrorID_Label
.128f	20 da 14	jsr $14da		jsr	errorHandler
.1292					_ALSyntax:
.1292	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.1294	20 da 14	jsr $14da		jsr	errorHandler

;******  Return to file: assembler/assembler.asm


;******  Processing file: assembler/subgroup.asm

.1297					AssembleGroup1:
.1297	ad f3 0a	lda $0af3			lda 	asmToken 					; firstly, we throw out STA immediate
.129a	c9 95		cmp #$95			cmp 	#TKW_STA
.129c	d0 07		bne $12a5			bne 	_AG1NotStoreImm
.129e	ad f4 0a	lda $0af4			lda 	asmMode
.12a1	c9 00		cmp #$00			cmp 	#AMD_IMM
.12a3	f0 2c		beq $12d1			beq 	AG1ModeError
.12a5					_AG1NotStoreImm:
.12a5	ae f4 0a	ldx $0af4			ldx 	asmMode						; get mode into X.
.12a8	bd d6 12	lda $12d6,x			lda		AMDOperandSize,X 			; get the size of the operand and push on stack
.12ab	48		pha				pha
.12ac	f0 23		beq $12d1			beq 	AG1ModeError 				; if the size is zero, the mode must be Accumulator
.12ae	e0 00		cpx #$00			cpx 	#0 							; if the mode is zero, e.g. immediate
.12b0	d0 02		bne $12b4			bne 	_AG1NotImmediate
.12b2	a2 02		ldx #$02			ldx 	#2 							; then we use offset 2 here. This is how the 6502
.12b4					_AG1NotImmediate:
.12b4	e0 0d		cpx #$0d			cpx 	#AMD_ZEROINDX 				; (zero,x) uses slot 0.
.12b6	d0 02		bne $12ba			bne 	_AG1NotZX
.12b8	a2 00		ldx #$00			ldx 	#0
.12ba					_AG1NotZX:
.12ba	68		pla				pla 								; restore length
.12bb	e0 09		cpx #$09			cpx 	#9 							; anything > 8 fails.
.12bd	b0 10		bcs $12cf			bcs 	AG1Fail
.12bf					AG1ReturnValue:
.12bf	85 32		sta $32				sta 	tempShort 					; save size of operand
.12c1	18		clc				clc
.12c2	bd e4 12	lda $12e4,x			lda 	AMDOffsetFromBase,X 		; get the offset for the address mode.
.12c5	6d f5 0a	adc $0af5			adc 	asmBaseOpcode 				; add the base opcode.
.12c8	a6 32		ldx $32				ldx 	tempShort 					; length in X
.12ca	20 da 10	jsr $10da			jsr 	AsmWriteInstruction 		; output instruction.
.12cd	38		sec				sec
.12ce	60		rts				rts
.12cf					AG1Fail:
.12cf	18		clc				clc
.12d0	60		rts				rts
.12d1					AG1ModeError:
.12d1	a2 23		ldx #$23			ldx 	#ErrorID_Assembler
.12d3	20 da 14	jsr $14da		jsr	errorHandler
.12d6					AMDOperandSize:
>12d6	01 01 00 02					.byte 	1,1,0,2
>12da	01 01 02 02					.byte 	1,1,2,2
>12de	01 01 02 02					.byte 	1,1,2,2
>12e2	01 01						.byte 	1,1
.12e4					AMDOffsetFromBase:
>12e4	00 04 08 0c					.byte 	0,4,8,12
>12e8	10 14 18 1c					.byte	16,20,24,28
>12ec	11 00 00 00					.byte 	17,0,0,0
>12f0	00 00						.byte 	0,0
.12f2					AssembleGroup2:
.12f2	ad f4 0a	lda $0af4			lda 	asmMode 					; get the mode; if >= 8 cannot be a legit group 2
.12f5	c9 08		cmp #$08			cmp 	#8
.12f7	b0 18		bcs $1311			bcs 	_AG2Fail
.12f9	85 2a		sta $2a				sta 	temp0 						; save in temp9
.12fb	ae f3 0a	ldx $0af3			ldx 	asmToken					; get token in X, then get the availability flags for it
.12fe	bd 77 11	lda $1177,x			lda 	Group2OpcodeAvailability-TKA_GROUP2,x
.1301					_AG2Shift:
.1301	4a		lsr a				lsr 	a
.1302	c6 2a		dec $2a				dec 	temp0
.1304	10 fb		bpl $1301			bpl 	_AG2Shift
.1306	90 09		bcc $1311			bcc 	_AG2Fail 					; cannot do that instruction w/that opcode.
.1308	ae f4 0a	ldx $0af4			ldx  	asmMode 					; mode in X
.130b	bd d6 12	lda $12d6,x			lda		AMDOperandSize,X 			; get the size of the operand in A
.130e	4c bf 12	jmp $12bf			jmp 	AG1ReturnValue 				; and use that with Group 1's exit code
.1311					_AG2Fail:
.1311	18		clc				clc
.1312	60		rts				rts
.1313					AssembleGroup3:
.1313	ad 38 0a	lda $0a38			lda 	SingleLetterVar+("O"-"A")*4	; check bit 0 (pass) of O
.1316	4a		lsr a				lsr 	a
.1317	a9 00		lda #$00			lda 	#0 							; if clear, e.g. pass 1, use default zero.
.1319	90 21		bcc $133c			bcc 	_AG3Default
.131b	38		sec				sec	 								; calculate branch offset
.131c	a5 48		lda $48				lda		esInt0
.131e	ed 3c 0a	sbc $0a3c			sbc 	SingleLetterVar+("P"-"A")*4
.1321	aa		tax				tax
.1322	a5 50		lda $50				lda		esInt1
.1324	ed 3d 0a	sbc $0a3d			sbc 	SingleLetterVar+("P"-"A")*4+1
.1327	85 50		sta $50				sta 	esInt1
.1329	8a		txa				txa 								; add 126, now 128 too many.
.132a	18		clc				clc 								; we can use this to check the range
.132b	69 7e		adc #$7e			adc 	#126
.132d	85 48		sta $48				sta 	esInt0
.132f	90 02		bcc $1333			bcc 	_AG3NoCarry
.1331	e6 50		inc $50				inc 	esInt1
.1333					_AG3NoCarry:
.1333	a5 50		lda $50				lda 	esInt1 						; check in range.
.1335	d0 0b		bne $1342			bne 	_AG3Range
.1337	a5 48		lda $48				lda 	esInt0 						; fix up branch distance
.1339	38		sec				sec
.133a	e9 80		sbc #$80			sbc 	#128
.133c					_AG3Default:
.133c	85 48		sta $48				sta 	esInt0
.133e					_AG3ExitOk:
.133e	a2 01		ldx #$01			ldx 	#1 							; one opcode, use AG4 Code
.1340	d0 07		bne $1349			bne 	AG4Write
.1342					_AG3Range:
.1342	a2 24		ldx #$24			ldx 	#ErrorID_Branch
.1344	20 da 14	jsr $14da		jsr	errorHandler
.1347					AssembleGroup4:
.1347	a2 00		ldx #$00			ldx 	#0 							; no parameters in the opcode.
.1349					AG4Write:
.1349	ad f5 0a	lda $0af5			lda 	asmBaseOpcode				; the opcode is the opcode base.
.134c	20 da 10	jsr $10da			jsr 	AsmWriteInstruction 		; output instruction.
.134f	38		sec				sec
.1350	60		rts				rts
.1351					AssembleSpecialCase:
.1351	a2 00		ldx #$00			ldx 	#0
.1353					_ASCScan:
.1353	bd 22 12	lda $1222,x			lda 	AssemblerSpecialCases,x 	; scan token and mode for match
.1356	cd f3 0a	cmp $0af3			cmp 	asmToken
.1359	d0 08		bne $1363			bne 	_ASCNext
.135b	bd 23 12	lda $1223,x			lda 	AssemblerSpecialCases+1,x
.135e	cd f4 0a	cmp $0af4			cmp 	asmMode
.1361	f0 0a		beq $136d			beq 	_ASCFound
.1363					_ASCNext:
.1363	e8		inx				inx									; next entry
.1364	e8		inx				inx
.1365	e8		inx				inx
.1366	bd 22 12	lda $1222,x			lda 	AssemblerSpecialCases,x 	; until table ends
.1369	d0 e8		bne $1353			bne 	_ASCScan
.136b	18		clc				clc
.136c	60		rts				rts
.136d					_ASCFound:
.136d	bd 24 12	lda $1224,x			lda 	AssemblerSpecialCases+2,x 	; get the new opcode.
.1370	48		pha				pha
.1371	ae f4 0a	ldx $0af4			ldx  	asmMode 					; mode in X
.1374	bd d6 12	lda $12d6,x			lda		AMDOperandSize,X 			; get the size of the operand in X
.1377	aa		tax				tax
.1378	68		pla				pla 								; opcode back
.1379	20 da 10	jsr $10da			jsr 	AsmWriteInstruction 		; output instruction.
.137c	38		sec				sec
.137d	60		rts				rts

;******  Return to file: assembler/assembler.asm

.137e					assemblerHandler:
.137e	7c 81 13	jmp ($1381,x)			jmp 	(assemblerVectors,x)
.1381					assemblerVectors:
>1381	6f 11					.word AssembleOneInstruction ; index 0
>1383	41 12					.word AssembleLabel        ; index 2

;******  Return to file: basic.asm

.1385					section_end_assembler:
.1385					section_start_device:

;******  Processing file: device/device.asm


;******  Processing file: device/option_x16/x16break.asm

.1385					X16Break:
.1385	20 e1 ff	jsr $ffe1			jsr 	$FFE1
.1388	f0 01		beq $138b			beq 	_IsBreak
.138a	60		rts				rts
.138b					_IsBreak:
.138b	a2 20		ldx #$20			ldx 	#ErrorID_Break
.138d	20 da 14	jsr $14da		jsr	errorHandler

;******  Return to file: device/device.asm


;******  Processing file: device/option_x16/x16file.asm

.1390					ExternSave:
.1390	98		tya				tya
.1391	48		pha				pha
.1392	20 e0 13	jsr $13e0			jsr 	ExternGetLength 			; get length of file into A name YX
.1395	20 bd ff	jsr $ffbd			jsr 	$FFBD 						; set name
.1398	a9 01		lda #$01			lda 	#1
.139a	a2 08		ldx #$08			ldx 	#8	 						; device #8
.139c	a0 00		ldy #$00			ldy 	#0
.139e	20 ba ff	jsr $ffba			jsr 	$FFBA 						; set LFS
.13a1	a5 49		lda $49				lda 	esInt0+1 					; copy start of save address to temp0
.13a3	85 2a		sta $2a				sta 	temp0
.13a5	a5 51		lda $51				lda 	esInt1+1
.13a7	85 2b		sta $2b				sta 	temp0+1
.13a9	a6 4a		ldx $4a				ldx 	esInt0+2 					; end address
.13ab	a4 52		ldy $52				ldy 	esInt1+2
.13ad	a9 2a		lda #$2a			lda 	#temp0 						; ref to start address
.13af	20 d8 ff	jsr $ffd8			jsr 	$FFD8 						; save
.13b2	b0 03		bcs $13b7			bcs 	_ESSave
.13b4	68		pla				pla
.13b5	a8		tay				tay
.13b6	60		rts				rts
.13b7					_ESSave:
.13b7	a2 1e		ldx #$1e			ldx 	#ErrorID_Save
.13b9	20 da 14	jsr $14da		jsr	errorHandler
.13bc					ExternLoad:
.13bc	98		tya				tya
.13bd	48		pha				pha
.13be	20 e0 13	jsr $13e0			jsr 	ExternGetLength 			; get length of file into A name YX
.13c1	20 bd ff	jsr $ffbd			jsr 	$FFBD 						; set name
.13c4	a9 01		lda #$01			lda 	#1
.13c6	a2 08		ldx #$08			ldx 	#8	 						; device #8
.13c8	a0 00		ldy #$00			ldy 	#0
.13ca	20 ba ff	jsr $ffba			jsr 	$FFBA 						; set LFS
.13cd	a6 49		ldx $49				ldx 	esInt0+1 					; load address
.13cf	a4 51		ldy $51				ldy 	esInt1+1
.13d1	a9 00		lda #$00			lda 	#0 							; load command
.13d3	20 d5 ff	jsr $ffd5			jsr 	$FFD5
.13d6	b0 03		bcs $13db			bcs 	_ESLoad
.13d8	68		pla				pla
.13d9	a8		tay				tay
.13da	60		rts				rts
.13db					_ESLoad:
.13db	a2 1f		ldx #$1f			ldx 	#ErrorID_Load
.13dd	20 da 14	jsr $14da		jsr	errorHandler
.13e0					ExternGetLength:
.13e0	a5 48		lda $48				lda 	esInt0 						; length into A.
.13e2	85 2a		sta $2a				sta 	temp0
.13e4	a5 50		lda $50				lda 	esInt1
.13e6	85 2b		sta $2b				sta 	temp0+1
.13e8	a0 00		ldy #$00			ldy 	#0
.13ea	b1 2a		lda ($2a),y			lda 	(temp0),y
.13ec	a6 48		ldx $48				ldx 	esInt0 						; name into YX
.13ee	a4 50		ldy $50				ldy 	esInt1
.13f0	e8		inx				inx 								; advance over the length pointer.
.13f1	d0 01		bne $13f4			bne 	_ESNoCarry
.13f3	c8		iny				iny
.13f4					_ESNoCarry:
.13f4	60		rts				rts

;******  Return to file: device/device.asm


;******  Processing file: device/option_x16/x16io.asm

=240					MaxLineInputSize = 240
.0af6					bufferCount:
>0af6							.fill 	0
.0af6					bufferStorage:
>0af6							.fill 	MaxLineInputSize
.13f5					IOInitialise:
.13f5	a9 0f		lda #$0f			lda 	#15 						; switch to upper/lower case mode
.13f7	20 20 14	jsr $1420			jsr 	IOPrintChar
.13fa	a9 02		lda #$02			lda 	#2 							; green on black and clear screen
.13fc	20 4c 14	jsr $144c			jsr 	IOInk
.13ff	a9 00		lda #$00			lda 	#0
.1401	20 60 14	jsr $1460			jsr 	IOPaper
.1404	20 08 14	jsr $1408			jsr 	IOClearScreen
.1407	60		rts				rts
.1408					IOClearScreen:
.1408	48		pha				pha
.1409	a9 93		lda #$93			lda	 	#147 						; char code $93 clears screen
.140b	20 20 14	jsr $1420			jsr 	IOPrintChar
.140e	68		pla				pla
.140f	60		rts				rts
.1410					IONewLine:
.1410	48		pha				pha
.1411	a9 0d		lda #$0d			lda 	#13
.1413	20 20 14	jsr $1420			jsr 	IOPrintChar
.1416	68		pla				pla
.1417	60		rts				rts
.1418					IOTab:
.1418	48		pha				pha
.1419	a9 20		lda #$20			lda 	#32
.141b	20 20 14	jsr $1420			jsr 	IOPrintChar
.141e	68		pla				pla
.141f	60		rts				rts
.1420					IOPrintAscii:
.1420					IOPrintChar:
.1420	aa		tax				tax 								; save in X so we can save Y
.1421	5a		phy				phy
.1422	8a		txa				txa
.1423	c9 08		cmp #$08			cmp 	#8 							; make BS (8) onto CHR$(14) which is the
.1425	d0 02		bne $1429			bne 	_IOPCNotBS 					; Commodore/X16 backspace code.
.1427	a9 14		lda #$14			lda 	#$14
.1429					_IOPCNotBS:
.1429	20 d2 ff	jsr $ffd2			jsr 	$FFD2 						; CBM OS Call.
.142c	7a		ply				ply
.142d	60		rts				rts
.142e					IOInkey:
.142e	98		tya				tya
.142f	48		pha				pha
.1430	20 e4 ff	jsr $ffe4			jsr 	$FFE4
.1433	85 32		sta $32				sta 	tempShort
.1435	68		pla				pla
.1436	a8		tay				tay
.1437	a5 32		lda $32				lda 	tempShort					; no key pressed.
.1439	f0 10		beq $144b			beq 	_IOIExit
.143b	c9 0d		cmp #$0d			cmp 	#13 						; allow CR (13)
.143d	f0 0c		beq $144b			beq 	_IOIExit
.143f	c9 14		cmp #$14			cmp 	#$14 						; backspace code ($14) returns 8.
.1441	f0 06		beq $1449			beq 	_IOIBackspace
.1443	c9 20		cmp #$20			cmp 	#32 						; no other control allowed.
.1445	90 e7		bcc $142e			bcc 	IOInkey
.1447	b0 02		bcs $144b			bcs 	_IOIExit
.1449					_IOIBackspace:
.1449	a9 08		lda #$08			lda 	#8 							; return chr(8)
.144b					_IOIExit:
.144b	60		rts				rts
.144c					IOInk:
.144c	48		pha				pha
.144d	29 07		and #$07			and 	#7 							; 8 primaries
.144f	aa		tax				tax
.1450	bd 58 14	lda $1458,x			lda 	_IOColourTable,x 			; look up CBM code and print it.
.1453	20 20 14	jsr $1420			jsr 	IOPrintChar
.1456	68		pla				pla
.1457	60		rts				rts
.1458					_IOColourTable:
>1458	90						.byte 	$90 					; 0 Black
>1459	96						.byte 	$96 					; 1 Red
>145a	1e						.byte 	$1E 					; 2 Green
>145b	9e						.byte 	$9E 					; 3 Yellow
>145c	9a						.byte 	$9A 					; 4 Blue
>145d	9c						.byte 	$9C 					; 5 Magenta
>145e	9f						.byte 	$9F 					; 6 Cyan
>145f	05						.byte 	$05 					; 7 White
.1460					IOPaper:
.1460	48		pha				pha
.1461	48		pha				pha
.1462	a9 01		lda #$01			lda 	#1 						; 1 swaps fgr/bgr, so we swap them, set fgr
.1464	20 20 14	jsr $1420			jsr 	IOPrintChar 			; and then swap them again.
.1467	68		pla				pla
.1468	20 4c 14	jsr $144c			jsr 	IOInk
.146b	a9 01		lda #$01			lda 	#1
.146d	20 20 14	jsr $1420			jsr 	IOPrintChar
.1470	68		pla				pla
.1471	60		rts				rts
.1472					IOLocate:
.1472	48		pha				pha
.1473	a9 13		lda #$13			lda 	#$13 					; home cursor code
.1475	20 20 14	jsr $1420			jsr 	IOPrintChar
.1478	a9 11		lda #$11			lda 	#$11 	 				; print Y x $11 (down)
.147a	20 81 14	jsr $1481			jsr 	_IOLoc2
.147d	68		pla				pla
.147e	a8		tay				tay
.147f	a9 1d		lda #$1d			lda 	#$1D 					; print Y x $1D (right)
.1481					_IOLoc2:
.1481	c0 00		cpy #$00			cpy 	#0
.1483	f0 06		beq $148b			beq 	_IOLocExit
.1485	20 20 14	jsr $1420			jsr 	IOPrintChar
.1488	88		dey				dey
.1489	d0 f6		bne $1481			bne 	_IOLoc2
.148b					_IOLocExit:
.148b	60		rts				rts
.148c					IOInput:
.148c	a9 00		lda #$00			lda 	#0
.148e	8d f6 0a	sta $0af6			sta 	bufferCount
.1491					_IOILoop:
.1491	20 cf ff	jsr $ffcf			jsr 	$FFCF
.1494	c9 0d		cmp #$0d			cmp 	#13
.1496	f0 10		beq $14a8			beq 	_IOIExit
.1498	ae f6 0a	ldx $0af6			ldx 	bufferCount
.149b	e0 f0		cpx #$f0			cpx 	#MaxLineInputSize
.149d	f0 f2		beq $1491			beq 	_IOILoop
.149f	ee f6 0a	inc $0af6			inc 	bufferCount
.14a2	9d f7 0a	sta $0af7,x			sta 	bufferStorage+1,x
.14a5	4c 91 14	jmp $1491			jmp 	_IOILoop
.14a8					_IOIExit:
.14a8	a9 f6		lda #$f6			lda 	#(bufferCount) & $FF
.14aa	85 2a		sta $2a				sta 	temp0
.14ac	a9 0a		lda #$0a			lda 	#(bufferCount) >> 8
.14ae	85 2b		sta $2b				sta 	1+(temp0)
.14b0	60		rts				rts

;******  Return to file: device/device.asm


;******  Processing file: device/option_x16/x16timer.asm

.14b1					IOReadTimer:
.14b1	20 de ff	jsr $ffde			jsr 	$FFDE 						; reads timer into YXA so we want only YA
.14b4	48		pha				pha
.14b5	8a		txa				txa
.14b6	a8		tay				tay
.14b7	68		pla				pla
.14b8	60		rts				rts

;******  Return to file: device/device.asm

.14b9					deviceHandler:
.14b9	7c bc 14	jmp ($14bc,x)			jmp 	(deviceVectors,x)
.14bc					deviceVectors:
>14bc	85 13					.word X16Break             ; index 0
>14be	08 14					.word IOClearScreen        ; index 2
>14c0	10 14					.word IONewLine            ; index 4
>14c2	f5 13					.word IOInitialise         ; index 6
>14c4	4c 14					.word IOInk                ; index 8
>14c6	2e 14					.word IOInkey              ; index 10
>14c8	8c 14					.word IOInput              ; index 12
>14ca	bc 13					.word ExternLoad           ; index 14
>14cc	72 14					.word IOLocate             ; index 16
>14ce	60 14					.word IOPaper              ; index 18
>14d0	20 14					.word IOPrintChar          ; index 20
>14d2	20 14					.word IOPrintAscii         ; index 22
>14d4	90 13					.word ExternSave           ; index 24
>14d6	18 14					.word IOTab                ; index 26
>14d8	b1 14					.word IOReadTimer          ; index 28

;******  Return to file: basic.asm

.14da					section_end_device:
.14da					section_start_error:

;******  Processing file: error/error.asm


;******  Processing file: error/errorhandler.asm

.14da					ErrorHandler:
.14da	8a		txa				txa
.14db	48		pha				pha
.14dc	a9 01		lda #$01			lda 	#1 							; red
.14de	a2 08		ldx #$08		ldx	#8
.14e0	20 b9 14	jsr $14b9		jsr	deviceHandler
.14e3	68		pla				pla
.14e4	aa		tax				tax
.14e5	a9 50		lda #$50			lda 	#(ErrorTextList) & $FF
.14e7	85 2a		sta $2a				sta 	temp0
.14e9	a9 15		lda #$15			lda 	#(ErrorTextList) >> 8
.14eb	85 2b		sta $2b				sta 	1+(temp0)
.14ed	ca		dex		_EHFind:dex									; errors start at 1
.14ee	f0 10		beq $1500			beq 	_EHFound
.14f0	a0 00		ldy #$00			ldy 	#0 							; goto next text message, add length + 1 to the pointer.
.14f2	38		sec				sec
.14f3	a5 2a		lda $2a				lda 	temp0
.14f5	71 2a		adc ($2a),y			adc 	(temp0),y
.14f7	85 2a		sta $2a				sta 	temp0
.14f9	90 f2		bcc $14ed			bcc 	_EHFind
.14fb	e6 2b		inc $2b				inc 	temp0+1
.14fd	4c ed 14	jmp $14ed			jmp 	_EHFind
.1500					_EHFound:
.1500	20 da 17	jsr $17da			jsr 	EHPrintAscii 				; print the string "temp0" now points to.
.1503	a0 00		ldy #$00			ldy 	#0 							; in a line, e.g. the offset to next is non zero.
.1505	b1 28		lda ($28),y			lda 	(codePtr),y
.1507	f0 39		beq $1542			beq 	_EHNoLine
.1509	a5 29		lda $29				lda 	codePtr+1 					; code running from the command line.
.150b	cd c9 0a	cmp $0ac9			cmp 	basePage+1
.150e	90 32		bcc $1542			bcc 	_EHNoLine
.1510	a9 4c		lda #$4c			lda 	#(EHAtMsg) & $FF
.1512	85 2a		sta $2a				sta 	temp0
.1514	a9 15		lda #$15			lda 	#(EHAtMsg) >> 8
.1516	85 2b		sta $2b				sta 	1+(temp0)
.1518	20 da 17	jsr $17da			jsr 	EHPrintAscii
.151b	a0 01		ldy #$01			ldy 	#1 							; set up line number in TOS
.151d	a2 00		ldx #$00			ldx 	#0
.151f	b1 28		lda ($28),y			lda 	(codePtr),y
.1521	95 48		sta $48,x			sta 	esInt0,x
.1523	c8		iny				iny
.1524	b1 28		lda ($28),y			lda 	(codePtr),y
.1526	95 50		sta $50,x			sta 	esInt1,x
.1528	a9 00		lda #$00			lda 	#0
.152a	95 58		sta $58,x			sta 	esInt2,x
.152c	95 60		sta $60,x			sta 	esInt3,x
.152e	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.1530	85 2a		sta $2a				sta 	temp0
.1532	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.1534	85 2b		sta $2b				sta 	1+(temp0)
.1536	a0 0a		ldy #$0a			ldy 	#10 						; in base 10.
.1538	a9 00		lda #$00			lda 	#0							; stack position zero.
.153a	a2 0c		ldx #$0c		ldx	#12
.153c	20 6b 31	jsr $316b		jsr	mainHandler
.153f	20 da 17	jsr $17da			jsr 	EHPrintAscii
.1542					_EHNoLine:
.1542	a2 04		ldx #$04		ldx	#4
.1544	20 b9 14	jsr $14b9		jsr	deviceHandler
.1547	a2 02		ldx #$02		ldx	#2
.1549	20 e0 1a	jsr $1ae0		jsr	interactionHandler
.154c					EHAtMsg:
>154c	03 20 40 20					.text 	3," @ "

;******  Processing file: error/../generated/errortext.inc

.1550					ErrorTextList:
>1550	13 46 65 61 74 75 72 65			.text 19,"Feature not Present"
>1558	20 6e 6f 74 20 50 72 65 73 65 6e 74
>1564	0c 53 79 6e 74 61 78 20			.text 12,"Syntax Error"
>156c	45 72 72 6f 72
>1571	0f 4d 6f 64 75 6c 65 20			.text 15,"Module disabled"
>1579	64 69 73 61 62 6c 65 64
>1581	10 41 73 73 65 72 74 69			.text 16,"Assertion failed"
>1589	6f 6e 20 66 61 69 6c 65 64
>1592	0e 44 69 76 69 64 65 20			.text 14,"Divide By Zero"
>159a	42 79 20 5a 65 72 6f
>15a1	04 53 74 6f 70				.text 4,"Stop"
>15a6	0d 54 79 70 65 20 4d 69			.text 13,"Type Mismatch"
>15ae	73 6d 61 74 63 68
>15b4	0d 49 6c 6c 65 67 61 6c			.text 13,"Illegal Value"
>15bc	20 56 61 6c 75 65
>15c2	15 4d 69 73 73 69 6e 67			.text 21,"Missing right bracket"
>15ca	20 72 69 67 68 74 20 62 72 61 63 6b 65 74
>15d8	0d 4d 69 73 73 69 6e 67			.text 13,"Missing comma"
>15e0	20 63 6f 6d 6d 61
>15e6	11 4d 69 73 73 69 6e 67			.text 17,"Missing reference"
>15ee	20 72 65 66 65 72 65 6e 63 65
>15f8	15 4c 69 6e 65 20 4e 75			.text 21,"Line Number not found"
>1600	6d 62 65 72 20 6e 6f 74 20 66 6f 75 6e 64
>160e	0f 53 74 72 69 6e 67 20			.text 15,"String too long"
>1616	74 6f 6f 20 6c 6f 6e 67
>161e	14 52 45 54 55 52 4e 20			.text 20,"RETURN without GOSUB"
>1626	77 69 74 68 6f 75 74 20 47 4f 53 55 42
>1633	14 55 4e 54 49 4c 20 77			.text 20,"UNTIL without REPEAT"
>163b	69 74 68 6f 75 74 20 52 45 50 45 41 54
>1648	10 4e 45 58 54 20 77 69			.text 16,"NEXT without FOR"
>1650	74 68 6f 75 74 20 46 4f 52
>1659	12 57 45 4e 44 20 77 69			.text 18,"WEND without WHILE"
>1661	74 68 6f 75 74 20 57 48 49 4c 45
>166c	14 45 4e 44 50 52 4f 43			.text 20,"ENDPROC without PROC"
>1674	20 77 69 74 68 6f 75 74 20 50 52 4f 43
>1681	0e 42 61 64 20 4e 45 58			.text 14,"Bad NEXT index"
>1689	54 20 69 6e 64 65 78
>1690	17 53 74 72 75 63 74 75			.text 23,"Structures nested wrong"
>1698	72 65 73 20 6e 65 73 74 65 64 20 77 72 6f 6e 67
>16a8	16 43 61 6e 6e 6f 74 20			.text 22,"Cannot create variable"
>16b0	63 72 65 61 74 65 20 76 61 72 69 61 62 6c 65
>16bf	19 52 65 74 75 72 6e 20			.text 25,"Return stack out of space"
>16c7	73 74 61 63 6b 20 6f 75 74 20 6f 66 20 73 70 61
>16d7	63 65
>16d9	11 55 6e 6b 6e 6f 77 6e			.text 17,"Unknown Procedure"
>16e1	20 50 72 6f 63 65 64 75 72 65
>16eb	17 50 61 72 61 6d 65 74			.text 23,"Parameters do not match"
>16f3	65 72 73 20 64 6f 20 6e 6f 74 20 6d 61 74 63 68
>1703	15 41 72 72 61 79 20 61			.text 21,"Array already defined"
>170b	6c 72 65 61 64 79 20 64 65 66 69 6e 65 64
>1719	12 44 49 4d 20 72 65 71			.text 18,"DIM requires array"
>1721	75 69 72 65 73 20 61 72 72 61 79
>172c	0f 42 61 64 20 61 72 72			.text 15,"Bad array index"
>1734	61 79 20 69 6e 64 65 78
>173c	0b 4f 75 74 20 6f 66 20			.text 11,"Out of data"
>1744	64 61 74 61
>1748	14 43 61 6e 6e 6f 74 20			.text 20,"Cannot tokenise line"
>1750	74 6f 6b 65 6e 69 73 65 20 6c 69 6e 65
>175d	0b 53 61 76 65 20 66 61			.text 11,"Save failed"
>1765	69 6c 65 64
>1769	0b 4c 6f 61 64 20 66 61			.text 11,"Load failed"
>1771	69 6c 65 64
>1775	05 42 72 65 61 6b			.text 5,"Break"
>177b	0d 4f 75 74 20 6f 66 20			.text 13,"Out of memory"
>1783	6d 65 6d 6f 72 79
>1789	16 45 78 70 72 65 73 73			.text 22,"Expression too complex"
>1791	69 6f 6e 20 74 6f 6f 20 63 6f 6d 70 6c 65 78
>17a0	10 42 61 64 20 4f 70 65			.text 16,"Bad Operand/Mode"
>17a8	72 61 6e 64 2f 4d 6f 64 65
>17b1	13 42 72 61 6e 63 68 20			.text 19,"Branch out of range"
>17b9	6f 75 74 20 6f 66 20 72 61 6e 67 65
>17c5	13 4c 61 62 65 6c 20 63			.text 19,"Label changed value"
>17cd	68 61 6e 67 65 64 20 76 61 6c 75 65
>17d9	00					.byte 0

;******  Return to file: error/errorhandler.asm

.17da					EHPrintAscii:
.17da	a0 00		ldy #$00			ldy 	#0
.17dc	b1 2a		lda ($2a),y			lda 	(temp0),y
.17de	aa		tax				tax
.17df	f0 0f		beq $17f0			beq 	_EHPExit
.17e1					_EHPLoop:
.17e1	c8		iny				iny
.17e2	8a		txa				txa
.17e3	48		pha				pha
.17e4	b1 2a		lda ($2a),y			lda 	(temp0),y
.17e6	a2 16		ldx #$16		ldx	#22
.17e8	20 b9 14	jsr $14b9		jsr	deviceHandler
.17eb	68		pla				pla
.17ec	aa		tax				tax
.17ed	ca		dex				dex
.17ee	d0 f1		bne $17e1			bne 	_EHPLoop
.17f0					_EHPExit:
.17f0	60		rts				rts

;******  Return to file: error/error.asm


;******  Return to file: basic.asm

.17f1					section_end_error:
.17f1					section_start_extension:

;******  Processing file: extension/extension.asm


;******  Processing file: extension/extensionhandler.asm

.17f1					ExtensionHandler:
.17f1	c9 ff		cmp #$ff			cmp 	#$FF						; A = $FF command, otherwise unary function stack level.
.17f3	d0 08		bne $17fd			bne 	_ExtensionUnary 			; is passed in A.
.17f5	b1 28		lda ($28),y			lda 	(codePtr),y 				; so this is a command, using Group 2.
.17f7	c8		iny				iny
.17f8	0a		asl a				asl 	a
.17f9	aa		tax				tax
.17fa	7c fb 17	jmp ($17fb,x)			jmp 	(Group2Vectors-12,x)
.17fd					_ExtensionUnary:
.17fd	48		pha				pha 								; save stack pos in A
.17fe	b1 28		lda ($28),y			lda 	(codePtr),y 				; get shifted token, double into X
.1800	c8		iny				iny
.1801	0a		asl a				asl 	a
.1802	aa		tax				tax
.1803	68		pla				pla 								; restore stack pos and call group3 command.
.1804	7c 01 18	jmp ($1801,x)			jmp 	(Group3Vectors-12,X)

;******  Processing file: extension/../generated/tokenvectors2.inc

.1807					Group2Vectors:
>1807	3c 18					.word	Command_VPoke            ; $86 vpoke
>1809	3f 18					.word	Command_VDoke            ; $87 vdoke
>180b	19 18					.word	Command_VLoad            ; $88 vload

;******  Return to file: extension/extensionhandler.asm


;******  Processing file: extension/../generated/tokenvectors3.inc

.180d					Group3Vectors:
>180d	80 18					.word	Command_VPeek            ; $86 vpeek(
>180f	83 18					.word	Command_VDeek            ; $87 vdeek(

;******  Return to file: extension/extensionhandler.asm

.1811					XEvaluateInteger:
.1811	8a		txa				txa
.1812	a2 06		ldx #$06		ldx	#6
.1814	20 6b 31	jsr $316b		jsr	mainHandler
.1817	aa		tax				tax
.1818	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/vload.asm

.1819					Command_VLoad:
.1819	a2 00		ldx #$00			ldx 	#0 								; string which is the file name
.181b	20 65 2a	jsr $2a65			jsr 	EvaluateString
.181e	e8		inx				inx
.181f	20 01 30	jsr $3001			jsr 	MInt32False
.1822	a5 35		lda $35				lda 	lowMemory 						; load it into lowMemory (for now ?)
.1824	95 48		sta $48,x			sta 	esInt0,x
.1826	a5 36		lda $36				lda 	lowMemory+1
.1828	95 50		sta $50,x			sta 	esInt1,x
.182a	ca		dex				dex
.182b	a2 0e		ldx #$0e		ldx	#14
.182d	20 b9 14	jsr $14b9		jsr	deviceHandler
.1830	a5 49		lda $49				lda 	esInt0+1 						; (temp0) is where we are decoding from.
.1832	85 2a		sta $2a				sta 	temp0
.1834	a5 51		lda $51				lda 	esInt1+1
.1836	85 2b		sta $2b				sta 	temp0+1
.1838	20 a1 18	jsr $18a1			jsr 	LoadVRAMFile 					; load the VRAM file in.
.183b	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/vpeekpoke.asm

.183c					Command_VPoke:
.183c	38		sec				sec 						; one byte , CS
.183d	b0 01		bcs $1840			bcs 	CmdVideoWrite
.183f					Command_VDoke:
.183f	18		clc				clc 						; two bytes, CC
.1840					CmdVideoWrite:
.1840	08		php				php 						; save one or two btes
.1841	a2 00		ldx #$00			ldx 	#0  				; get address and value into levels 0,1
.1843	20 11 18	jsr $1811			jsr 	XEvaluateInteger
.1846	20 81 30	jsr $3081			jsr 	CheckComma
.1849	e8		inx				inx
.184a	20 11 18	jsr $1811			jsr 	XEvaluateInteger
.184d	ca		dex				dex
.184e	20 5f 18	jsr $185f			jsr 	SetUpTOSVRamAddress ; copy target address to VRAM address registers
.1851	a5 49		lda $49				lda 	esInt0+1 			; get MSB of write value
.1853	8d 23 9f	sta $9f23			sta 	$9F23
.1856	28		plp				plp 						; if it was Poke then exit
.1857	b0 05		bcs $185e			bcs 	_CVWExit
.1859	a5 51		lda $51				lda 	esInt1+1 			; doke, write the MSB.
.185b	8d 23 9f	sta $9f23			sta 	$9F23
.185e					_CVWExit:
.185e	60		rts				rts
.185f					SetUpTOSVRamAddress:
.185f	b5 58		lda $58,x			lda 	esInt2,x 			; check range of address, data to $FFFF
.1861	29 01		and #$01			and 	#1
.1863	15 60		ora $60,x			ora 	esInt3,x
.1865	d0 14		bne $187b			bne 	CVWValue
.1867	b5 48		lda $48,x			lda 	esInt0,x			; set address up
.1869	8d 20 9f	sta $9f20			sta 	$9F20
.186c	b5 50		lda $50,x			lda 	esInt1,x
.186e	8d 21 9f	sta $9f21			sta	 	$9F21
.1871	b5 58		lda $58,x			lda 	esInt2,x
.1873	29 01		and #$01			and 	#1
.1875	09 10		ora #$10			ora 	#$10 				; step 1.
.1877	8d 22 9f	sta $9f22			sta 	$9F22
.187a	60		rts				rts
.187b					CVWValue:
.187b	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.187d	20 da 14	jsr $14da		jsr	errorHandler
.1880					Command_VPeek:
.1880	38		sec				sec 						; one byte , CS
.1881	b0 01		bcs $1884			bcs 	CmdVideoRead
.1883					Command_VDeek:
.1883	18		clc				clc 						; two bytes, CC
.1884					CmdVideoRead:
.1884	08		php				php 						; save action on stack.
.1885	aa		tax				tax 						; save stack position
.1886	20 11 18	jsr $1811			jsr 	XEvaluateInteger 	; address
.1889	20 74 30	jsr $3074			jsr 	CheckRightParen 	; closing right bracket.
.188c	20 5f 18	jsr $185f			jsr 	SetUpTOSVRamAddress	; set up VRAM address.
.188f	20 01 30	jsr $3001			jsr 	MInt32False 		; zero return.
.1892	ad 23 9f	lda $9f23			lda 	$9F23				; copy 1st byte
.1895	95 48		sta $48,x			sta 	esInt0,x
.1897	28		plp				plp 						; check if DOKE (carry was clear)
.1898	b0 05		bcs $189f			bcs 	_CVRExit
.189a	ad 23 9f	lda $9f23			lda 	$9F23 				; copy 2nd byte
.189d	95 50		sta $50,x			sta 	esInt1,x
.189f					_CVRExit:
.189f	8a		txa				txa 						; return X position.
.18a0	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/vramprocess.asm

.0be6					compressMode:
>0be6							.fill 	1
.18a1					LoadVRAMFile:
.18a1					_LVRLoop:
.18a1	20 f1 18	jsr $18f1			jsr 	LVFGet 						; get the next (never access direct)
.18a4	c9 80		cmp #$80			cmp 	#$80 						; exit ?
.18a6	f0 3a		beq $18e2			beq 	_LVRExit
.18a8	b0 39		bcs $18e3			bcs 	_LVRLoad 					; load data in ?
.18aa	c9 08		cmp #$08			cmp 	#$08 						; is it set address ?
.18ac	90 09		bcc $18b7			bcc 	_LVRSetAddress
.18ae	c9 10		cmp #$10			cmp 	#$10 						; is it set compression type ?
.18b0	90 29		bcc $18db			bcc 	_LVRSetCompress
.18b2	a2 01		ldx #$01			ldx 	#ErrorID_missing
.18b4	20 da 14	jsr $14da		jsr	errorHandler
.18b7					_LVRSetAddress:
.18b7	85 2d		sta $2d				sta 	temp1+1 					; 24 bit in temp1+1/temp1/A
.18b9	20 f1 18	jsr $18f1			jsr 	LVFGet
.18bc	85 2c		sta $2c				sta 	temp1
.18be	a9 00		lda #$00			lda 	#0
.18c0	46 2d		lsr $2d				lsr 	temp1+1 					; / 2 twice.
.18c2	66 2c		ror $2c				ror 	temp1
.18c4	6a		ror a				ror		a
.18c5	46 2d		lsr $2d				lsr 	temp1+1
.18c7	66 2c		ror $2c				ror 	temp1
.18c9	6a		ror a				ror		a
.18ca	8d 20 9f	sta $9f20			sta 	$9F20 						; set write address with +1 increment
.18cd	a5 2c		lda $2c				lda 	temp1
.18cf	8d 21 9f	sta $9f21			sta 	$9F21
.18d2	a5 2d		lda $2d				lda 	temp1+1
.18d4	09 10		ora #$10			ora 	#$10
.18d6	8d 22 9f	sta $9f22			sta 	$9F22
.18d9	d0 c6		bne $18a1			bne 	_LVRLoop
.18db					_LVRSetCompress:
.18db	29 07		and #$07			and 	#7
.18dd	8d e6 0b	sta $0be6			sta 	compressMode
.18e0	10 bf		bpl $18a1			bpl 	_LVRLoop
.18e2					_LVRExit:
.18e2	60		rts				rts
.18e3					_LVRLoad:
.18e3	29 7f		and #$7f			and 	#$7F 						; count in X (is > 0)
.18e5	aa		tax				tax
.18e6					_LVRLCopy:
.18e6	20 f1 18	jsr $18f1			jsr 	LVFGet 						; write to data.
.18e9	8d 23 9f	sta $9f23			sta 	$9F23
.18ec	ca		dex				dex
.18ed	d0 f7		bne $18e6			bne 	_LVRLCopy
.18ef	f0 b0		beq $18a1			beq 	_LVRLoop
.18f1	84 32		sty $32		LVFGet:	sty 	tempShort
.18f3	a0 00		ldy #$00			ldy 	#0
.18f5	b1 2a		lda ($2a),y			lda 	(temp0),y
.18f7	a4 32		ldy $32				ldy	 	tempShort
.18f9	e6 2a		inc $2a				inc 	temp0
.18fb	d0 02		bne $18ff			bne 	_LVFGExit
.18fd	e6 2b		inc $2b				inc 	temp0+1
.18ff					_LVFGExit:
.18ff	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Return to file: basic.asm

.1900					section_end_extension:
.1900					section_start_floatingpoint:

;******  Processing file: floatingpoint/floatingpoint.asm

.1900					floatingpointHandler:
.1900	a2 03		ldx #$03			ldx 	#ErrorID_NoModule
.1902	20 da 14	jsr $14da		jsr	errorHandler

;******  Return to file: basic.asm

.1905					section_end_floatingpoint:
.1905					section_start_interaction:

;******  Processing file: interaction/interaction.asm


;******  Processing file: interaction/cold.asm

.1905					ColdStartEntry:
.1905	a2 ff		ldx #$ff			ldx 	#$FF
.1907	9a		txs				txs
.1908	a2 02		ldx #$02		ldx	#2
.190a	20 b9 14	jsr $14b9		jsr	deviceHandler
.190d	a0 ff		ldy #$ff			ldy 	#255
.190f					_CSBanner:
.190f	c8		iny				iny
.1910	b9 36 19	lda $1936,y			lda 	Intro,y
.1913	f0 14		beq $1929			beq 	_CSStart
.1915	c9 08		cmp #$08			cmp 	#8
.1917	90 08		bcc $1921			bcc 	_CSInk
.1919	a2 16		ldx #$16		ldx	#22
.191b	20 b9 14	jsr $14b9		jsr	deviceHandler
.191e	4c 0f 19	jmp $190f			jmp 	_CSBanner
.1921					_CSInk:
.1921	a2 08		ldx #$08		ldx	#8
.1923	20 b9 14	jsr $14b9		jsr	deviceHandler
.1926	4c 0f 19	jmp $190f			jmp 	_CSBanner
.1929					_CSStart:
.1929	a2 10		ldx #$10		ldx	#16
.192b	20 6b 31	jsr $316b		jsr	mainHandler
.192e	a2 02		ldx #$02		ldx	#2
.1930	20 6b 31	jsr $316b		jsr	mainHandler
.1933	4c 4a 1a	jmp $1a4a			jmp 	WarmStartEntry
>1936	06 2a 2a 2a 20 36 35 30		Intro:	.text 	6,"*** 6502 Extended BASIC ***",13,13
>193e	32 20 45 78 74 65 6e 64 65 64 20 42 41 53 49 43
>194e	20 2a 2a 2a 0d 0d
>1954	03 57 72 69 74 74 65 6e				.text 	3,"Written by Paul Robson 2021",13,13
>195c	20 62 79 20 50 61 75 6c 20 52 6f 62 73 6f 6e 20
>196c	32 30 32 31 0d 0d
>1972	02 42 61 73 69 63 20				.text 	2,"Basic "
>1979	30 2e 31 35					.text "0.15"
>197d	20 28						.text 	" ("
>197f	31 35 2d 4d 61 72 2d 32				.text "15-Mar-21"
>1987	31
>1988	29 0d 0d 00					.text 	")",13,13,0

;******  Return to file: interaction/interaction.asm


;******  Processing file: interaction/delete.asm

.198c					DeleteLine:
.198c	ad c8 0a	lda $0ac8			lda 	basePage 					; copy program base to temp0
.198f	85 2a		sta $2a				sta 	temp0
.1991	ad c9 0a	lda $0ac9			lda 	basePage+1
.1994	85 2b		sta $2b				sta 	temp0+1
.1996	a0 01		ldy #$01	_DLLoop:ldy 	#1 							; see if found line ?
.1998	a5 48		lda $48				lda 	esInt0
.199a	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.199c	d0 07		bne $19a5			bne 	_DLNext
.199e	c8		iny				iny
.199f	a5 50		lda $50				lda 	esInt1
.19a1	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.19a3	f0 0a		beq $19af			beq 	_DLFound
.19a5	20 cd 19	jsr $19cd	_DLNext:jsr 	IAdvanceTemp0 				; shift temp0 forward, return Z flag set if end.
.19a8	d0 ec		bne $1996			bne 	_DLLoop
.19aa	a0 00		ldy #$00			ldy 	#0 							; size of chunk to cut out.
.19ac	b1 2a		lda ($2a),y			lda 	(temp0),y
.19ae	60		rts				rts
.19af					_DLFound:
.19af	a0 00		ldy #$00			ldy 	#0 							; from here (temp0),y
.19b1	b1 2a		lda ($2a),y			lda 	(temp0),y
.19b3	a8		tay				tay
.19b4	a2 00		ldx #$00			ldx 	#0  						; to (temp0,x)
.19b6					_DLCopyDown:
.19b6	b1 2a		lda ($2a),y			lda 	(temp0),y
.19b8	81 2a		sta ($2a,x)			sta 	(temp0,x)
.19ba	e6 2a		inc $2a				inc 	temp0 						; advance pointer
.19bc	d0 02		bne $19c0			bne 	_DLNoCarry
.19be	e6 2b		inc $2b				inc 	temp0+1
.19c0					_DLNoCarry:
.19c0	a5 2a		lda $2a				lda 	temp0 						; until hit low memory
.19c2	c5 35		cmp $35				cmp 	lowMemory
.19c4	d0 f0		bne $19b6			bne 	_DLCopyDown
.19c6	a5 2b		lda $2b				lda 	temp0+1
.19c8	c5 36		cmp $36				cmp 	lowMemory+1
.19ca	d0 ea		bne $19b6			bne 	_DLCopyDown
.19cc	60		rts				rts
.19cd					IAdvanceTemp0:
.19cd	84 32		sty $32				sty 	tempShort
.19cf	18		clc				clc
.19d0	a0 00		ldy #$00			ldy 	#0
.19d2	b1 2a		lda ($2a),y			lda 	(temp0),y
.19d4	65 2a		adc $2a				adc 	temp0
.19d6	85 2a		sta $2a				sta 	temp0
.19d8	90 02		bcc $19dc			bcc 	_IATNoCarry
.19da	e6 2b		inc $2b				inc 	temp0+1
.19dc					_IATNoCarry:
.19dc	b1 2a		lda ($2a),y			lda 	(temp0),y
.19de	a4 32		ldy $32				ldy 	tempShort
.19e0	c9 00		cmp #$00			cmp		#0
.19e2	60		rts				rts

;******  Return to file: interaction/interaction.asm


;******  Processing file: interaction/insert.asm

.19e3					InsertLine:
.19e3	ad c8 0a	lda $0ac8			lda 	basePage 					; copy program base to temp0
.19e6	85 2a		sta $2a				sta 	temp0
.19e8	ad c9 0a	lda $0ac9			lda 	basePage+1
.19eb	85 2b		sta $2b				sta 	temp0+1
.19ed					_ILLoop:
.19ed	a0 01		ldy #$01			ldy 	#1
.19ef	b1 2a		lda ($2a),y			lda 	(temp0),y
.19f1	c5 48		cmp $48				cmp 	esInt0
.19f3	c8		iny				iny
.19f4	b1 2a		lda ($2a),y			lda 	(temp0),y
.19f6	e5 50		sbc $50				sbc 	esInt1
.19f8	b0 05		bcs $19ff			bcs 	_ILFound 					; we know it cannot be equal, it would have been deleted
.19fa	20 cd 19	jsr $19cd			jsr 	IAdvanceTemp0 				; shift temp0 forward, return Z flag set if end.
.19fd	d0 ee		bne $19ed			bne 	_ILLoop
.19ff					_ILFound:
.19ff	a5 35		lda $35				lda 	lowMemory 					; shift lowMemory up to make space for it.
.1a01	85 2c		sta $2c				sta 	temp1
.1a03	a5 36		lda $36				lda 	lowMemory+1
.1a05	85 2d		sta $2d				sta 	temp1+1
.1a07	ad 24 0d	lda $0d24			lda 	tokenBufferIndex 			; space to make in Y, 0 in X.
.1a0a	18		clc				clc
.1a0b	69 03		adc #$03			adc 	#3
.1a0d	a8		tay				tay
.1a0e	a2 00		ldx #$00			ldx 	#0
.1a10	a1 2c		lda ($2c,x)	_ILMove:lda 	(temp1,x)
.1a12	91 2c		sta ($2c),y			sta 	(temp1),y
.1a14	a5 2c		lda $2c				lda 	temp1
.1a16	c5 2a		cmp $2a				cmp 	temp0
.1a18	d0 06		bne $1a20			bne 	_ILMNext
.1a1a	a5 2d		lda $2d				lda 	temp1+1
.1a1c	c5 2b		cmp $2b				cmp 	temp0+1
.1a1e	f0 0b		beq $1a2b			beq 	_ILMCopy
.1a20					_ILMNext:
.1a20	a5 2c		lda $2c				lda 	temp1
.1a22	d0 02		bne $1a26			bne 	_ILNoBorrow
.1a24	c6 2d		dec $2d				dec 	temp1+1
.1a26					_ILNoBorrow:
.1a26	c6 2c		dec $2c				dec 	temp1
.1a28	4c 10 1a	jmp $1a10			jmp 	_ILMove
.1a2b					_ILMCopy:
.1a2b	98		tya				tya 								; Y is the offset of the new line.
.1a2c	81 2a		sta ($2a,x)			sta 	(temp0,x)					; X = 0 still.
.1a2e	a0 01		ldy #$01			ldy 	#1 							; copy in line number.
.1a30	a5 48		lda $48				lda 	esInt0
.1a32	91 2a		sta ($2a),y			sta 	(temp0),y
.1a34	c8		iny				iny
.1a35	a5 50		lda $50				lda 	esInt1
.1a37	91 2a		sta ($2a),y			sta 	(temp0),y
.1a39	a0 00		ldy #$00			ldy 	#0 							; copy the body in
.1a3b					_ILMCopy2:
.1a3b	b1 28		lda ($28),y			lda 	(codePtr),y
.1a3d	c8		iny				iny
.1a3e	c8		iny				iny
.1a3f	c8		iny				iny
.1a40	91 2a		sta ($2a),y			sta 	(temp0),y
.1a42	88		dey				dey
.1a43	88		dey				dey
.1a44	cc 24 0d	cpy $0d24			cpy 	tokenBufferIndex
.1a47	d0 f2		bne $1a3b			bne 	_ILMCopy2
.1a49	60		rts				rts

;******  Return to file: interaction/interaction.asm


;******  Processing file: interaction/warm.asm

.1a4a					WarmStartEntry:
.1a4a	a2 ff		ldx #$ff			ldx 	#$FF
.1a4c	9a		txs				txs
.1a4d	a9 02		lda #$02			lda 	#2							; green text.
.1a4f	a2 08		ldx #$08		ldx	#8
.1a51	20 b9 14	jsr $14b9		jsr	deviceHandler
.1a54	a2 0c		ldx #$0c		ldx	#12
.1a56	20 b9 14	jsr $14b9		jsr	deviceHandler
.1a59	a5 2a		lda $2a				lda 	temp0	 					; copy temp0 to codePtr
.1a5b	85 28		sta $28				sta 	codePtr
.1a5d	a5 2b		lda $2b				lda 	temp0+1
.1a5f	85 29		sta $29				sta 	codePtr+1
.1a61	a2 04		ldx #$04		ldx	#4
.1a63	20 b9 14	jsr $14b9		jsr	deviceHandler
.1a66	a2 06		ldx #$06		ldx	#6
.1a68	20 16 3c	jsr $3c16		jsr	tokeniserHandler
.1a6b	90 25		bcc $1a92			bcc 	WSEError 					; failed.
.1a6d	a9 21		lda #$21			lda 	#(tokenHeader) & $FF
.1a6f	85 28		sta $28				sta 	codePtr
.1a71	a9 0c		lda #$0c			lda 	#(tokenHeader) >> 8
.1a73	85 29		sta $29				sta 	1+(codePtr)
.1a75	ad 24 0c	lda $0c24			lda 	tokenBuffer 				; is it a blank line, go get another line.
.1a78	c9 80		cmp #$80			cmp 	#$80
.1a7a	f0 ce		beq $1a4a			beq 	WarmStartEntry
.1a7c	29 c0		and #$c0			and 	#$C0						; does it start with a number
.1a7e	c9 40		cmp #$40			cmp 	#$40
.1a80	f0 15		beq $1a97			beq 	HasLineNumber
.1a82	a9 00		lda #$00			lda 	#0 							; zero the token header, so it will look like a
.1a84	8d 21 0c	sta $0c21			sta 	tokenHeader 				; fake program line.
.1a87	8d 22 0c	sta $0c22			sta 	tokenHeader+1
.1a8a	8d 23 0c	sta $0c23			sta 	tokenHeader+2
.1a8d	a2 12		ldx #$12		ldx	#18
.1a8f	20 6b 31	jsr $316b		jsr	mainHandler
.1a92					WSEError:
.1a92	a2 1d		ldx #$1d			ldx 	#ErrorID_Tokenise
.1a94	20 da 14	jsr $14da		jsr	errorHandler
.1a97					HasLineNumber:
.1a97	a0 03		ldy #$03			ldy 	#3 							; get line number
.1a99	a9 00		lda #$00			lda 	#0
.1a9b	a2 06		ldx #$06		ldx	#6
.1a9d	20 6b 31	jsr $316b		jsr	mainHandler
.1aa0	a5 58		lda $58				lda 	esInt2		 				; check in range.
.1aa2	05 60		ora $60				ora 	esInt3
.1aa4	d0 ec		bne $1a92			bne 	WSEError
.1aa6	98		tya				tya 								; make codePtr point to code after the line number.
.1aa7	18		clc				clc
.1aa8	65 28		adc $28				adc 	codePtr
.1aaa	85 28		sta $28				sta 	codePtr
.1aac	90 02		bcc $1ab0			bcc		_HLNNoCarry
.1aae	e6 29		inc $29				inc 	codePtr+1
.1ab0					_HLNNoCarry:
.1ab0	98		tya				tya 								; subtract that offset from the code buffer index
.1ab1	38		sec				sec
.1ab2	49 ff		eor #$ff			eor 	#$FF
.1ab4	6d 24 0d	adc $0d24			adc 	tokenBufferIndex
.1ab7	18		clc				clc 								; add space allowing for header & $80 trailer
.1ab8	69 04		adc #$04			adc 	#4
.1aba	8d 24 0d	sta $0d24			sta 	tokenBufferIndex 			; this is the number of bytes occupied.
.1abd	20 8c 19	jsr $198c			jsr 	DeleteLine 					; always delete the line, it's deleted and reinserted.
.1ac0					_HLNNoDelete:
.1ac0	ad 24 0d	lda $0d24			lda 	tokenBufferIndex 			; if line was empty, then don't insert
.1ac3	c9 01		cmp #$01			cmp 	#1 							; (the one character is the EOL marker)
.1ac5	f0 0c		beq $1ad3			beq 	_HLMEditDone
.1ac7	a5 36		lda $36				lda 	lowMemory+1 				; is there space, if we allow a little bit of
.1ac9	18		clc				clc 								; workspace (1k)
.1aca	69 04		adc #$04			adc 	#4
.1acc	c5 34		cmp $34				cmp 	highMemory+1
.1ace	b0 0b		bcs $1adb			bcs 	_HLMMemory
.1ad0	20 e3 19	jsr $19e3			jsr 	InsertLine 					; insert the line in
.1ad3					_HLMEditDone:
.1ad3	a2 02		ldx #$02		ldx	#2
.1ad5	20 6b 31	jsr $316b		jsr	mainHandler
.1ad8	4c 4a 1a	jmp $1a4a			jmp 	WarmStartEntry
.1adb					_HLMMemory:
.1adb	a2 21		ldx #$21			ldx 	#ErrorID_Memory
.1add	20 da 14	jsr $14da		jsr	errorHandler

;******  Return to file: interaction/interaction.asm

.1ae0					interactionHandler:
.1ae0	7c e3 1a	jmp ($1ae3,x)			jmp 	(interactionVectors,x)
.1ae3					interactionVectors:
>1ae3	05 19					.word ColdStartEntry       ; index 0
>1ae5	4a 1a					.word WarmStartEntry       ; index 2

;******  Return to file: basic.asm

.1ae7					section_end_interaction:
.1ae7					section_start_main:

;******  Processing file: main/main.asm


;******  Processing file: main/commands/assert.asm

.1ae7					Command_Assert:
.1ae7	20 6e 2a	jsr $2a6e			jsr 	EvaluateRootInteger 		; what is being asserted.
.1aea	20 28 30	jsr $3028			jsr 	MInt32Zero 					; is it true ?
.1aed	f0 01		beq $1af0			beq 	_CAError
.1aef	60		rts				rts
.1af0					_CAError:
.1af0	a2 04		ldx #$04			ldx 	#ErrorID_Assert
.1af2	20 da 14	jsr $14da		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/commands/clear.asm

.1af5					CommandClear:
.1af5					XCommandClear:
.1af5	98		tya				tya
.1af6	48		pha				pha
.1af7	ad cc 0a	lda $0acc			lda 	endMemory					; set high memory = end of memory
.1afa	85 33		sta $33				sta 	highMemory
.1afc	ad cd 0a	lda $0acd			lda 	endMemory+1
.1aff	85 34		sta $34				sta 	highMemory+1
.1b01	ad c8 0a	lda $0ac8			lda 	basePage 					; work out where the program ends.
.1b04	85 2a		sta $2a				sta 	temp0
.1b06	ad c9 0a	lda $0ac9			lda 	basePage+1
.1b09	85 2b		sta $2b				sta 	temp0+1
.1b0b					_CCFindEnd:
.1b0b	a0 00		ldy #$00			ldy 	#0
.1b0d	b1 2a		lda ($2a),y			lda 	(temp0),y
.1b0f	f0 0c		beq $1b1d			beq 	_CCFoundEnd 				; offset zero is end.
.1b11	18		clc				clc
.1b12	65 2a		adc $2a				adc 	temp0 						; move to next line
.1b14	85 2a		sta $2a				sta 	temp0
.1b16	90 f3		bcc $1b0b			bcc 	_CCFindEnd
.1b18	e6 2b		inc $2b				inc 	temp0+1
.1b1a	4c 0b 1b	jmp $1b0b			jmp 	_CCFindEnd
.1b1d					_CCFoundEnd:
.1b1d	a5 2a		lda $2a				lda 	temp0 						; put temp0 in lowMemory
.1b1f	85 35		sta $35				sta 	lowMemory
.1b21	a5 2b		lda $2b				lda 	temp0+1
.1b23	85 36		sta $36				sta 	lowMemory+1
.1b25	18		clc				clc 								; put temp0+1 in endProgram
.1b26	a5 2a		lda $2a				lda 	temp0
.1b28	69 01		adc #$01			adc 	#1
.1b2a	8d ca 0a	sta $0aca			sta 	endProgram
.1b2d	a5 2b		lda $2b				lda 	temp0+1
.1b2f	69 00		adc #$00			adc 	#0
.1b31	8d cb 0a	sta $0acb			sta 	endProgram+1
.1b34	18		clc				clc 								; put a bit of space in.
.1b35	a5 35		lda $35				lda 	lowMemory
.1b37	69 04		adc #$04			adc 	#4
.1b39	85 35		sta $35				sta 	lowMemory
.1b3b	90 02		bcc $1b3f			bcc 	_CCNoCarry
.1b3d	e6 36		inc $36				inc 	lowMemory+1
.1b3f					_CCNoCarry:
.1b3f	20 0a 31	jsr $310a			jsr 	RSReset 					; reset the return stack.
.1b42	a2 04		ldx #$04		ldx	#4
.1b44	20 25 3f	jsr $3f25		jsr	variableHandler
.1b47	20 1b 24	jsr $241b			jsr 	ScanProc 					; scan for procedures
.1b4a	20 b5 21	jsr $21b5			jsr 	CommandRestore 				; do a restore
.1b4d	68		pla				pla
.1b4e	a8		tay				tay
.1b4f	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/dim.asm

.1b50					Command_Dim:
.1b50	a2 02		ldx #$02		ldx	#2
.1b52	20 25 3f	jsr $3f25		jsr	variableHandler
.1b55	b1 28		lda ($28),y			lda 	(codePtr),y 				; see what follows.
.1b57	c8		iny				iny
.1b58	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; comma follows, go back and do next
.1b5a	f0 f4		beq $1b50			beq 	Command_Dim
.1b5c	88		dey				dey 								; unpick get
.1b5d	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/for.asm

.1b5e					Command_FOR:
.1b5e	a9 46		lda #$46			lda 	#markerFOR 					; allocate the space and set the marker
.1b60	a2 0b		ldx #$0b			ldx 	#11
.1b62	20 18 31	jsr $3118			jsr 	RSClaim
.1b65	20 5f 1d	jsr $1d5f			jsr 	CommandLET 					; do the same as LET FOR [a = 4]
.1b68	a5 40		lda $40				lda 	esType 						; check type should be integer reference.
.1b6a	c9 80		cmp #$80			cmp 	#$80 						; we do not do FOR floats.
.1b6c	d0 4c		bne $1bba			bne 	_CFType
.1b6e	a9 ce		lda #$ce			lda 	#TKW_TO 					; check TO present.
.1b70	20 69 30	jsr $3069			jsr 	CheckToken
.1b73	a2 01		ldx #$01			ldx 	#1 							; keep the variable address in stack 0
.1b75	20 70 2a	jsr $2a70			jsr 	EvaluateInteger				; get terminal value in stack 1
.1b78	98		tya				tya
.1b79	48		pha				pha
.1b7a	a0 04		ldy #$04			ldy 	#4
.1b7c	a5 48		lda $48				lda		esInt0 						; copy the address of the index variable into 4 and 5
.1b7e	91 37		sta ($37),y			sta 	(rsPointer),y
.1b80	c8		iny				iny
.1b81	a5 50		lda $50				lda		esInt1
.1b83	91 37		sta ($37),y			sta 	(rsPointer),y
.1b85	c8		iny				iny
.1b86	a9 01		lda #$01			lda 	#1  						; the default step in 6, (-128 .. 127 only)
.1b88	91 37		sta ($37),y			sta 	(rsPointer),y
.1b8a	c8		iny				iny
.1b8b	a5 49		lda $49				lda		esInt0+1 					; terminal value in 7 to 11.
.1b8d	91 37		sta ($37),y			sta 	(rsPointer),y
.1b8f	c8		iny				iny
.1b90	a5 51		lda $51				lda		esInt1+1
.1b92	91 37		sta ($37),y			sta 	(rsPointer),y
.1b94	c8		iny				iny
.1b95	a5 59		lda $59				lda		esInt2+1
.1b97	91 37		sta ($37),y			sta 	(rsPointer),y
.1b99	c8		iny				iny
.1b9a	a5 61		lda $61				lda		esInt3+1
.1b9c	91 37		sta ($37),y			sta 	(rsPointer),y
.1b9e	68		pla				pla
.1b9f	a8		tay				tay
.1ba0	b1 28		lda ($28),y			lda 	(codePtr),y 				; followed by STEP.
.1ba2	c9 cf		cmp #$cf			cmp 	#TKW_STEP
.1ba4	d0 0e		bne $1bb4			bne 	_CFDone
.1ba6	c8		iny				iny									; skip over step.
.1ba7	20 70 2a	jsr $2a70			jsr 	EvaluateInteger 			; get step
.1baa	98		tya				tya
.1bab	48		pha				pha
.1bac	b5 48		lda $48,x			lda 	esInt0,x 					; copy it into step (bit lazy here)
.1bae	a0 06		ldy #$06			ldy 	#6
.1bb0	91 37		sta ($37),y			sta 	(rsPointer),y
.1bb2	68		pla				pla
.1bb3	a8		tay				tay
.1bb4					_CFDone:
.1bb4	a9 01		lda #$01			lda 	#1
.1bb6	20 44 31	jsr $3144			jsr 	RSSavePosition 				; save position.
.1bb9	60		rts				rts
.1bba					_CFType:
.1bba	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.1bbc	20 da 14	jsr $14da		jsr	errorHandler
.1bbf					Command_NEXT:
.1bbf	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.1bc1	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.1bc3	c9 46		cmp #$46			cmp 	#markerFOR 						; does it match
.1bc5	f0 05		beq $1bcc			beq 	_isok
.1bc7	a2 10		ldx #$10			ldx 	#ErrorID_nextErr
.1bc9	20 da 14	jsr $14da		jsr	errorHandler
.1bcc					_isok:
.1bcc	b1 28		lda ($28),y			lda 	(codePtr),y 				; is it NEXT <index>
.1bce	c9 40		cmp #$40			cmp 	#$40 						; e.g. a variable follows 00-3F
.1bd0	b0 18		bcs $1bea			bcs 	_CNNoIndex
.1bd2	a2 00		ldx #$00			ldx 	#0 							; start on stack
.1bd4	20 a3 2a	jsr $2aa3			jsr 	EvaluateReference 			; this is the variable/parameter to localise.
.1bd7	98		tya				tya
.1bd8	48		pha				pha
.1bd9	a0 04		ldy #$04			ldy 	#4 							; check same variable as that stored at +4,+5
.1bdb	b1 37		lda ($37),y			lda 	(rsPointer),y
.1bdd	d5 48		cmp $48,x			cmp 	esInt0,x
.1bdf	d0 76		bne $1c57			bne 	_CNBadIndex
.1be1	c8		iny				iny
.1be2	b1 37		lda ($37),y			lda 	(rsPointer),y
.1be4	d5 50		cmp $50,x			cmp 	esInt1,x
.1be6	d0 6f		bne $1c57			bne 	_CNBadIndex
.1be8	68		pla				pla
.1be9	a8		tay				tay
.1bea					_CNNoIndex:
.1bea	98		tya				tya
.1beb	48		pha				pha
.1bec	a0 04		ldy #$04			ldy 	#4 							; make temp0 point to the index
.1bee	b1 37		lda ($37),y			lda 	(rsPointer),y
.1bf0	85 2a		sta $2a				sta 	temp0
.1bf2	c8		iny				iny
.1bf3	b1 37		lda ($37),y			lda 	(rsPointer),y
.1bf5	85 2b		sta $2b				sta 	temp0+1
.1bf7	c8		iny				iny
.1bf8	a2 00		ldx #$00			ldx 	#0 							; X is the sign extend part of the step.
.1bfa	b1 37		lda ($37),y			lda 	(rsPointer),y 				; get the step.
.1bfc	85 2f		sta $2f				sta 	temp2+1 					; save for later.
.1bfe	10 01		bpl $1c01			bpl 	_CNSignX
.1c00	ca		dex				dex  								; X = $FF
.1c01					_CNSignX:
.1c01	18		clc				clc 								; add to the LSB
.1c02	a0 00		ldy #$00			ldy 	#0
.1c04	71 2a		adc ($2a),y			adc 	(temp0),y
.1c06	91 2a		sta ($2a),y			sta 	(temp0),y
.1c08					_CNPropogate:
.1c08	c8		iny				iny  								; add the sign extended in X to the rest.
.1c09	8a		txa				txa
.1c0a	71 2a		adc ($2a),y			adc 	(temp0),y
.1c0c	91 2a		sta ($2a),y			sta 	(temp0),y
.1c0e	c8		iny				iny
.1c0f	8a		txa				txa
.1c10	71 2a		adc ($2a),y			adc 	(temp0),y
.1c12	91 2a		sta ($2a),y			sta 	(temp0),y
.1c14	c8		iny				iny
.1c15	8a		txa				txa
.1c16	71 2a		adc ($2a),y			adc 	(temp0),y
.1c18	91 2a		sta ($2a),y			sta 	(temp0),y
.1c1a	18		clc				clc 								; point temp1 to the terminal value stored in the stack.
.1c1b	a5 37		lda $37				lda 	rsPointer
.1c1d	69 07		adc #$07			adc 	#7
.1c1f	85 2c		sta $2c				sta 	temp1
.1c21	a9 00		lda #$00			lda 	#0
.1c23	85 2e		sta $2e				sta 	temp2 						; clear temp2, which is the OR of all the subtractions.
.1c25	a8		tay				tay 								; and clear the Y register again.
.1c26	65 38		adc $38				adc 	rsPointer+1
.1c28	85 2d		sta $2d				sta 	temp1+1
.1c2a	38		sec				sec 								; calculate current - limit oring interim values.
.1c2b	20 63 1c	jsr $1c63			jsr 	_CNCompare 					; each of these does a byte.
.1c2e	20 63 1c	jsr $1c63			jsr 	_CNCompare 					; we calculate the OR of all these subtractions.
.1c31	20 63 1c	jsr $1c63			jsr 	_CNCompare 					; and the carry of the subtraction.
.1c34	20 63 1c	jsr $1c63			jsr 	_CNCompare
.1c37	50 02		bvc $1c3b			bvc 	_CNNoOverflow 				; converts to a signed comparison on the sign bit.
.1c39	49 80		eor #$80			eor 	#$80
.1c3b					_CNNoOverflow:
.1c3b	a4 2f		ldy $2f				ldy 	temp2+1						; get step back
.1c3d	30 1d		bmi $1c5c			bmi 	_CNCheckDownto
.1c3f	c9 00		cmp #$00			cmp 	#0
.1c41	30 0c		bmi $1c4f			bmi 	_CNLoopRound 				; loop round if < =
.1c43	a5 2e		lda $2e				lda 	temp2
.1c45	f0 08		beq $1c4f			beq 	_CNLoopRound
.1c47					_CNLoopExit:
.1c47	68		pla				pla
.1c48	a8		tay				tay
.1c49	a9 0b		lda #$0b			lda 	#11
.1c4b	20 3a 31	jsr $313a			jsr 	RSFree
.1c4e	60		rts				rts
.1c4f					_CNLoopRound:
.1c4f	68		pla				pla
.1c50	a8		tay				tay
.1c51	a9 01		lda #$01			lda 	#1
.1c53	20 57 31	jsr $3157			jsr 	RSLoadPosition				; go back to the loop top
.1c56	60		rts				rts
.1c57					_CNBadIndex:
.1c57	a2 13		ldx #$13			ldx 	#ErrorID_BadIndex
.1c59	20 da 14	jsr $14da		jsr	errorHandler
.1c5c					_CNCheckDownto:
.1c5c	c9 00		cmp #$00			cmp 	#0
.1c5e	10 ef		bpl $1c4f			bpl 	_CNLoopRound
.1c60	4c 47 1c	jmp $1c47			jmp 	_CNLoopExit
.1c63					_CNCompare:
.1c63	b1 2a		lda ($2a),y			lda 	(temp0),y 					; do the subtraction - compare don't care about answer
.1c65	f1 2c		sbc ($2c),y			sbc 	(temp1),y
.1c67	05 2e		ora $2e				ora 	temp2 						; Or into temp2 (does not affect carry)
.1c69	85 2e		sta $2e				sta 	temp2
.1c6b	c8		iny				iny
.1c6c	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/if.asm

.1c6d					CommandIf:
.1c6d	20 6e 2a	jsr $2a6e			jsr 	EvaluateRootInteger 		; get what's being tested.
.1c70	b1 28		lda ($28),y			lda 	(codePtr),y 				; check for IF .. THEN or IF .. GOTO which are single lines.
.1c72	c9 d9		cmp #$d9			cmp 	#TKW_GOTO
.1c74	f0 04		beq $1c7a			beq 	_IfSimple
.1c76	c9 a1		cmp #$a1			cmp 	#TKW_THEN
.1c78	d0 1b		bne $1c95			bne 	_IfComplex
.1c7a					_IfSimple:
.1c7a	20 28 30	jsr $3028			jsr 	MInt32Zero					; check if TOS zero
.1c7d	f0 10		beq $1c8f			beq 	_IfEOL 						; go to next line.
.1c7f	b1 28		lda ($28),y			lda 	(codePtr),y 				; get and skip token.
.1c81	c8		iny				iny
.1c82	c9 d9		cmp #$d9			cmp 	#TKW_GOTO 					; was it if GOTO ?
.1c84	f0 0c		beq $1c92			beq 	_IfGoto 					; do the Goto code
.1c86	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows the THEN ?
.1c88	29 c0		and #$c0			and 	#$C0 						; check $40-$7F
.1c8a	c9 40		cmp #$40			cmp 	#$40 						; e.g. number IF x = 0 THEN 170
.1c8c	f0 04		beq $1c92			beq 	_IfGoto
.1c8e	60		rts				rts 								; else continue on this line.
.1c8f					_IfEOL:
.1c8f	4c 90 24	jmp $2490			jmp 	AdvanceNextLine 			; go to next line
.1c92					_IfGoto:
.1c92	4c 05 25	jmp $2505			jmp 	CommandGoto
.1c95					_IfComplex:
.1c95	20 28 30	jsr $3028			jsr 	MInt32Zero 					; is it true ?
.1c98	f0 01		beq $1c9b			beq 	_IFSkip 					; if non-zero then skip to ELSE/ENDIF
.1c9a	60		rts				rts 								; else continue.
.1c9b					_IFSkip:
.1c9b	a9 d6		lda #$d6			lda	 	#TKW_ELSE 					; test failed, go to ELSE or ENDIF whichever comes first.
.1c9d	a2 a2		ldx #$a2			ldx 	#TKW_ENDIF
.1c9f	4c 8e 30	jmp $308e			jmp		ScanForward
.1ca2					Command_ELSE:
.1ca2	a2 a2		ldx #$a2			ldx 	#TKW_ENDIF
.1ca4	8a		txa				txa
.1ca5	4c 8e 30	jmp $308e			jmp		ScanForward
.1ca8					Command_ENDIF:
.1ca8	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/input.asm

=32					MaxInputSize = 32
.0be7					InputBuffer:
>0be7							.fill 	MaxInputSize+1
.1ca9					Command_Input:
.1ca9	b1 28		lda ($28),y			lda 	(codePtr),y 			; see what's next.
.1cab	c8		iny				iny
.1cac	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 				; ignore commas.
.1cae	f0 f9		beq $1ca9			beq 	Command_Input
.1cb0	88		dey				dey 							; undo consume
.1cb1	c9 ca		cmp #$ca			cmp 	#TKW_COLON
.1cb3	f0 54		beq $1d09			beq 	_CIExit 				; : or EOL, exit
.1cb5	c9 80		cmp #$80			cmp 	#TOK_EOL
.1cb7	f0 50		beq $1d09			beq 	_CIExit
.1cb9	c9 40		cmp #$40			cmp 	#$40 					; variable ?
.1cbb	90 12		bcc $1ccf			bcc 	_CIVariable
.1cbd	c9 85		cmp #$85			cmp 	#TOK_STR 				; if not quoted string syntax error.
.1cbf	d0 43		bne $1d04			bne 	_CISyntax
.1cc1	a2 00		ldx #$00			ldx 	#0
.1cc3	20 65 2a	jsr $2a65			jsr 	EvaluateString 			; evaluate and print string
.1cc6	20 d4 1d	jsr $1dd4			jsr 	TOSToTemp0
.1cc9	20 d7 20	jsr $20d7			jsr 	PrintString
.1ccc	4c a9 1c	jmp $1ca9			jmp 	Command_Input
.1ccf					_CIVariable:
.1ccf	a2 00		ldx #$00			ldx 	#0 						; evaluate a reference.
.1cd1	20 a3 2a	jsr $2aa3			jsr 	EvaluateReference  		; this is where its going
.1cd4					_CIRetry:
.1cd4	a9 3f		lda #$3f			lda 	#"?"					; print prompt
.1cd6	a2 14		ldx #$14		ldx	#20
.1cd8	20 b9 14	jsr $14b9		jsr	deviceHandler
.1cdb	98		tya				tya
.1cdc	48		pha				pha
.1cdd	20 1d 1d	jsr $1d1d			jsr 	InputString 			; input a string (manually)
.1ce0	a2 01		ldx #$01			ldx 	#1
.1ce2	20 0a 1d	jsr $1d0a			jsr 	BufferToStackX 			; make stack,x ref input string.
.1ce5	a5 40		lda $40				lda 	esType 					; if target type numeric
.1ce7	29 40		and #$40			and 	#$40 					; then convert to number
.1ce9	d0 11		bne $1cfc			bne 	_CIWrite
.1ceb	a2 01		ldx #$01			ldx 	#1
.1ced	20 d4 1d	jsr $1dd4			jsr 	TOSToTemp0 				; string address in temp0, goes here.
.1cf0	a9 0a		lda #$0a			lda 	#10
.1cf2	20 6f 2e	jsr $2e6f			jsr 	MInt32FromString 		; convert it back from a string.
.1cf5	68		pla				pla
.1cf6	a8		tay				tay
.1cf7	b0 03		bcs $1cfc			bcs 	_CIWrite 				; successfully converted.
.1cf9	18		clc				clc 							; default fail FP conversion
.1cfa	90 d8		bcc $1cd4			bcc		_CIRetry				; failed, try again.
.1cfc					_CIWrite:
.1cfc	a2 00		ldx #$00			ldx 	#0
.1cfe	20 72 1d	jsr $1d72			jsr 	WriteValue
.1d01	4c a9 1c	jmp $1ca9			jmp 	Command_Input
.1d04					_CISyntax:
.1d04	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.1d06	20 da 14	jsr $14da		jsr	errorHandler
.1d09					_CIExit:
.1d09	60		rts				rts
.1d0a					BufferToStackX:
.1d0a	a9 e7		lda #$e7			lda 	#InputBuffer & $FF
.1d0c	95 48		sta $48,x			sta 	esInt0,x
.1d0e	a9 0b		lda #$0b			lda 	#InputBuffer >> 8
.1d10	95 50		sta $50,x			sta 	esInt1,x
.1d12	a9 00		lda #$00			lda 	#0
.1d14	95 58		sta $58,x			sta 	esInt2,x
.1d16	95 60		sta $60,x			sta 	esInt3,x
.1d18	a9 40		lda #$40			lda 	#$40
.1d1a	95 40		sta $40,x			sta 	esType,x
.1d1c	60		rts				rts
.1d1d					InputString:
.1d1d	a9 00		lda #$00			lda 	#0
.1d1f	8d e7 0b	sta $0be7			sta 	InputBuffer
.1d22					_InputLoop:
.1d22	a2 00		ldx #$00		ldx	#0
.1d24	20 b9 14	jsr $14b9		jsr	deviceHandler
.1d27	a2 0a		ldx #$0a		ldx	#10
.1d29	20 b9 14	jsr $14b9		jsr	deviceHandler
.1d2c	c9 00		cmp #$00			cmp 	#0
.1d2e	f0 f2		beq $1d22			beq 	_InputLoop
.1d30	c9 08		cmp #$08			cmp 	#8
.1d32	f0 19		beq $1d4d			beq 	_InputBackspace
.1d34	c9 0d		cmp #$0d			cmp 	#13
.1d36	f0 21		beq $1d59			beq 	_InputExit
.1d38	ae e7 0b	ldx $0be7			ldx 	InputBuffer
.1d3b	e0 20		cpx #$20			cpx 	#MaxInputSize 			; too many characters
.1d3d	f0 e3		beq $1d22			beq 	_InputLoop
.1d3f	9d e8 0b	sta $0be8,x			sta 	InputBuffer+1,x 		; write char
.1d42	ee e7 0b	inc $0be7			inc 	InputBuffer 			; advance count.
.1d45					_InputPrintLoop:
.1d45	a2 14		ldx #$14		ldx	#20
.1d47	20 b9 14	jsr $14b9		jsr	deviceHandler
.1d4a	4c 22 1d	jmp $1d22			jmp	 	_InputLoop
.1d4d					_InputBackspace:
.1d4d	ad e7 0b	lda $0be7			lda 	InputBuffer 			; at start
.1d50	f0 d0		beq $1d22			beq 	_InputLoop
.1d52	ce e7 0b	dec $0be7			dec 	InputBuffer
.1d55	a9 08		lda #$08			lda 	#8
.1d57	d0 ec		bne $1d45			bne 	_InputPrintLoop
.1d59					_InputExit:
.1d59	a2 04		ldx #$04		ldx	#4
.1d5b	20 b9 14	jsr $14b9		jsr	deviceHandler
.1d5e	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/let.asm

.1d5f					CommandLet:
.1d5f	a2 00		ldx #$00			ldx 	#0  						; get address to write.
.1d61	20 a3 2a	jsr $2aa3			jsr 	EvaluateReference
.1d64	a9 8d		lda #$8d			lda 	#TKW_EQUAL 					; check for equals
.1d66	20 69 30	jsr $3069			jsr 	CheckToken
.1d69	e8		inx				inx 								; do RHS
.1d6a	20 51 2a	jsr $2a51			jsr 	Evaluate 					; evaluate and dereference
.1d6d	ca		dex				dex
.1d6e	20 72 1d	jsr $1d72			jsr 	WriteValue 					; write it out
.1d71	60		rts				rts
.1d72					WriteValue:
.1d72	98		tya				tya
.1d73	48		pha				pha
.1d74	20 d4 1d	jsr $1dd4			jsr 	TOSToTemp0 					; set temp0 to point to target address.
.1d77	b5 40		lda $40,x			lda 	esType,x 					; check the string flags match
.1d79	55 41		eor $41,x			eor 	esType+1,x 					; one string, one number causes an error.
.1d7b	29 40		and #$40			and 	#$40
.1d7d	d0 50		bne $1dcf			bne		_WVType
.1d7f	a0 01		ldy #$01			ldy 	#1 							; for string, copy 0 and 1.
.1d81	b5 40		lda $40,x			lda 	esType,x 					; check for string assignment
.1d83	29 40		and #$40			and 	#$40
.1d85	d0 1f		bne $1da6			bne 	_WVCopyString
.1d87	b5 40		lda $40,x			lda 	esType,x 					; check both are integer.
.1d89	15 41		ora $41,x			ora 	esType+1,x
.1d8b	4a		lsr a				lsr 	a
.1d8c	90 22		bcc $1db0			bcc 	_WVCopyData4 				; copy 4 data bytes.
.1d8e	b5 40		lda $40,x			lda 	esType,x
.1d90	4a		lsr a				lsr 	a
.1d91	90 3c		bcc $1dcf			bcc 	_WVType
.1d93	e8		inx				inx 								; force the value being written to be a float.
.1d94	20 b2 25	jsr $25b2			jsr 	BPMakeFloat
.1d97	ca		dex				dex
.1d98	20 d4 1d	jsr $1dd4			jsr 	TOSToTemp0 					; set Temp0 to write address
.1d9b	e8		inx				inx
.1d9c	8a		txa				txa
.1d9d	a2 20		ldx #$20		ldx	#32
.1d9f	20 00 19	jsr $1900		jsr	floatingpointHandler
.1da2	aa		tax				tax
.1da3	4c cc 1d	jmp $1dcc			jmp 	_WVCopyExit
.1da6					_WVCopyString:
.1da6	8a		txa				txa
.1da7	a2 0e		ldx #$0e		ldx	#14
.1da9	20 21 34	jsr $3421		jsr	stringHandler
.1dac	aa		tax				tax
.1dad	4c cc 1d	jmp $1dcc			jmp 	_WVCopyExit
.1db0					_WVCopyData4:
.1db0	b5 40		lda $40,x			lda 	esType,x 					; is the int ref a byte ref ?
.1db2	29 20		and #$20			and 	#$20 						; (e.g. is bit 5 set)
.1db4	d0 10		bne $1dc6			bne 	_WVCopyData1
.1db6	a0 03		ldy #$03			ldy 	#3
.1db8	b5 61		lda $61,x			lda 	esInt3+1,x
.1dba	91 2a		sta ($2a),y			sta 	(temp0),y
.1dbc	88		dey				dey
.1dbd	b5 59		lda $59,x			lda 	esInt2+1,x
.1dbf	91 2a		sta ($2a),y			sta 	(temp0),y
.1dc1	88		dey				dey
.1dc2	b5 51		lda $51,x			lda 	esInt1+1,x
.1dc4	91 2a		sta ($2a),y			sta 	(temp0),y
.1dc6					_WVCopyData1:
.1dc6	a0 00		ldy #$00			ldy 	#0
.1dc8	b5 49		lda $49,x			lda 	esInt0+1,x
.1dca	91 2a		sta ($2a),y			sta 	(temp0),y
.1dcc					_WVCopyExit:
.1dcc	68		pla				pla
.1dcd	a8		tay				tay
.1dce	60		rts				rts
.1dcf					_WVType:
.1dcf	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.1dd1	20 da 14	jsr $14da		jsr	errorHandler
.1dd4					TOSToTemp0:
.1dd4	b5 48		lda $48,x			lda 	esInt0,x
.1dd6	85 2a		sta $2a				sta 	temp0
.1dd8	b5 50		lda $50,x			lda 	esInt1,x
.1dda	85 2b		sta $2b				sta 	temp0+1
.1ddc	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/link.asm


;******  Return to file: main/main.asm


;******  Processing file: main/commands/list.asm

.0c08					structIndent:
>0c08							.fill 	1
.1ddd					CommandList:
.1ddd	a2 00		ldx #$00			ldx		#0 							; set start/end lines in stack 0/1 to 0 and $FFFF
.1ddf	8e 08 0c	stx $0c08			stx 	structIndent
.1de2	20 01 30	jsr $3001			jsr 	MInt32False
.1de5	e8		inx				inx
.1de6	20 fd 2f	jsr $2ffd			jsr 	MInt32True
.1de9	b1 28		lda ($28),y			lda 	(codePtr),y 				; look at first token
.1deb	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; list ,xxxx
.1ded	f0 15		beq $1e04			beq 	_CLEndLine
.1def	c9 00		cmp #$00			cmp 	#0 							; list ... on its own.
.1df1	30 1b		bmi $1e0e			bmi 	_CLDoListing 				; do the whole lot.
.1df3	a2 00		ldx #$00			ldx 	#0 							; get start line at stack:0
.1df5	20 70 2a	jsr $2a70			jsr 	EvaluateInteger
.1df8	b1 28		lda ($28),y			lda 	(codePtr),y 				; , follows ?
.1dfa	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.1dfc	f0 06		beq $1e04			beq 	_CLEndLine
.1dfe	20 3f 2f	jsr $2f3f			jsr 	MInt32CopyUp 				; copy first to second if just a line number on its
.1e01	4c 0e 1e	jmp $1e0e			jmp 	_CLDoListing 				; own e.g. list 1100
.1e04					_CLEndLine:
.1e04	c8		iny				iny 								; skip comma
.1e05	b1 28		lda ($28),y			lda 	(codePtr),y  				; no number follows, then its list 1000,
.1e07	30 05		bmi $1e0e			bmi 	_CLDoListing
.1e09	a2 01		ldx #$01			ldx 	#1 							; get the last line to list
.1e0b	20 70 2a	jsr $2a70			jsr 	EvaluateInteger				; get end
.1e0e					_CLDoListing:
.1e0e	20 b2 22	jsr $22b2			jsr 	ResetCodeAddress 			; back to the start.
.1e11					_CLCheckLoop:
.1e11	a2 00		ldx #$00		ldx	#0
.1e13	20 b9 14	jsr $14b9		jsr	deviceHandler
.1e16	a0 00		ldy #$00			ldy 	#0							; check end.
.1e18	b1 28		lda ($28),y			lda 	(codePtr),y
.1e1a	f0 41		beq $1e5d			beq 	_CLEnd
.1e1c	a2 00		ldx #$00			ldx 	#0 							; compare vs lower.
.1e1e	20 60 1e	jsr $1e60			jsr 	CLCompareLineTOS
.1e21	c9 ff		cmp #$ff			cmp 	#255 						; if < skip
.1e23	f0 28		beq $1e4d			beq 	_CLNext
.1e25	e8		inx				inx
.1e26	20 60 1e	jsr $1e60			jsr 	CLCompareLineTOS 			; compare vs higher
.1e29	c9 01		cmp #$01			cmp 	#1
.1e2b	f0 20		beq $1e4d			beq 	_CLNext
.1e2d	a9 80		lda #$80			lda 	#$80 						; undo any down indents this line.
.1e2f	20 82 1e	jsr $1e82			jsr 	CLStructureCheck
.1e32	ad 08 0c	lda $0c08			lda 	structIndent 				; indent level.
.1e35	10 02		bpl $1e39			bpl 	_CLPositive
.1e37	a9 00		lda #$00			lda 	#0
.1e39					_CLPositive:
.1e39	a2 02		ldx #$02		ldx	#2
.1e3b	20 16 3c	jsr $3c16		jsr	tokeniserHandler
.1e3e	a9 82		lda #$82			lda 	#$82 						; up indents from this point on.
.1e40	20 82 1e	jsr $1e82			jsr 	CLStructureCheck
.1e43	ad 08 0c	lda $0c08			lda 	structIndent
.1e46	10 05		bpl $1e4d			bpl 	_CLNext
.1e48	a9 00		lda #$00			lda 	#0
.1e4a	8d 08 0c	sta $0c08			sta 	structIndent
.1e4d					_CLNext:
.1e4d	a0 00		ldy #$00			ldy 	#0 							; go to next line.
.1e4f	b1 28		lda ($28),y			lda 	(codePtr),y
.1e51	18		clc				clc
.1e52	65 28		adc $28				adc 	codePtr
.1e54	85 28		sta $28				sta 	codePtr
.1e56	90 b9		bcc $1e11			bcc 	_CLCheckLoop
.1e58	e6 29		inc $29				inc 	codePtr+1
.1e5a	4c 11 1e	jmp $1e11			jmp 	_CLCheckLoop
.1e5d					_CLEnd:
.1e5d	4c 66 31	jmp $3166			jmp 	WarmStart 					; warm start after list.
.1e60					CLCompareLineTOS:
.1e60	a0 01		ldy #$01			ldy 	#1
.1e62	b1 28		lda ($28),y			lda 	(codePtr),y
.1e64	55 48		eor $48,x			eor 	esInt0,x
.1e66	85 2a		sta $2a				sta 	temp0
.1e68	c8		iny				iny
.1e69	b1 28		lda ($28),y			lda 	(codePtr),y
.1e6b	55 50		eor $50,x			eor 	esInt1,x
.1e6d	05 2a		ora $2a				ora 	temp0
.1e6f	f0 10		beq $1e81			beq 	_CLCLTExit
.1e71	88		dey				dey
.1e72	b1 28		lda ($28),y			lda 	(codePtr),y
.1e74	d5 48		cmp $48,x			cmp 	esInt0,x
.1e76	c8		iny				iny
.1e77	b1 28		lda ($28),y			lda 	(codePtr),y
.1e79	f5 50		sbc $50,x			sbc 	esInt1,x
.1e7b	a9 ff		lda #$ff			lda 	#255
.1e7d	90 02		bcc $1e81			bcc 	_CLCLTExit
.1e7f	a9 01		lda #$01			lda 	#1
.1e81					_CLCLTExit:
.1e81	60		rts				rts
.1e82					CLStructureCheck:
.1e82	85 2a		sta $2a				sta 	temp0
.1e84	a0 03		ldy #$03			ldy 	#3
.1e86					_CLSCLoop:
.1e86	b1 28		lda ($28),y			lda 	(codePtr),y 				; get and consume token.
.1e88	c8		iny				iny
.1e89	c9 80		cmp #$80			cmp 	#$80
.1e8b	90 f9		bcc $1e86			bcc 	_CLSCLoop 					; $00-$7F just step over.
.1e8d	f0 28		beq $1eb7			beq		_CLSCExit					; EOL return
.1e8f	c9 86		cmp #$86			cmp 	#$86 						; special handler
.1e91	90 1e		bcc $1eb1			bcc 	_CLSCSpecial
.1e93	c9 99		cmp #$99			cmp 	#TOK_STRUCTST 				; check if structure changer.
.1e95	90 ef		bcc $1e86			bcc 	_CLSCLoop
.1e97	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST
.1e99	b0 eb		bcs $1e86			bcs 	_CLSCLoop
.1e9b	aa		tax				tax 								; get adjustment
.1e9c	bd 09 29	lda $2909,x			lda 	ELBinaryOperatorInfo-TOK_BINARYST,x
.1e9f	c5 2a		cmp $2a				cmp 	temp0	 					; if what we're searching for
.1ea1	d0 e3		bne $1e86			bne 	_CLSCLoop
.1ea3	38		sec				sec
.1ea4	e9 81		sbc #$81			sbc 	#$81 						; convert to offset
.1ea6	0a		asl a				asl 	a 							; double indent step
.1ea7	18		clc				clc
.1ea8	6d 08 0c	adc $0c08			adc 	structIndent 				; add to structure indent
.1eab	8d 08 0c	sta $0c08			sta 	structIndent
.1eae	4c 86 1e	jmp $1e86			jmp 	_CLSCLoop
.1eb1					_CLSCSpecial:
.1eb1	20 d1 30	jsr $30d1			jsr 	ScannerSkipSpecial
.1eb4	4c 86 1e	jmp $1e86			jmp 	_CLSCLoop
.1eb7					_CLSCExit:
.1eb7	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/loadsave.asm

.1eb8					CommandLoad:
.1eb8	20 e0 1e	jsr $1ee0			jsr 	CLSParameters 					; get parameters for load.
.1ebb	08		php				php
.1ebc	a2 0e		ldx #$0e		ldx	#14
.1ebe	20 b9 14	jsr $14b9		jsr	deviceHandler
.1ec1	28		plp				plp
.1ec2	b0 08		bcs $1ecc			bcs 	_CLExit 						; if CC then load a program, so warm start.
.1ec4	20 f5 1a	jsr $1af5			jsr 	CommandClear
.1ec7	a2 02		ldx #$02		ldx	#2
.1ec9	20 e0 1a	jsr $1ae0		jsr	interactionHandler
.1ecc					_CLExit
.1ecc	60		rts				rts
.1ecd					CommandSave:
.1ecd	20 e0 1e	jsr $1ee0			jsr 	CLSParameters					; get parameters for save
.1ed0	90 08		bcc $1eda			bcc 	_CSNoOverrideAddress
.1ed2	20 81 30	jsr $3081			jsr 	CheckComma 						; should be a comma.
.1ed5	a2 02		ldx #$02			ldx 	#2
.1ed7	20 70 2a	jsr $2a70			jsr 	EvaluateInteger 				; get save end address.
.1eda					_CSNoOverrideAddress:
.1eda	a2 18		ldx #$18		ldx	#24
.1edc	20 b9 14	jsr $14b9		jsr	deviceHandler
.1edf	60		rts				rts
.1ee0					CLSParameters:
.1ee0	a2 00		ldx #$00			ldx 	#0 								; string
.1ee2	20 65 2a	jsr $2a65			jsr 	EvaluateString
.1ee5	e8		inx				inx 									; erase out +1 +2
.1ee6	20 01 30	jsr $3001			jsr 	MInt32False
.1ee9	e8		inx				inx
.1eea	20 01 30	jsr $3001			jsr 	MInt32False
.1eed	ad c8 0a	lda $0ac8			lda 	basePage 						; default start address.
.1ef0	85 49		sta $49				sta 	esInt0+1
.1ef2	ad c9 0a	lda $0ac9			lda 	basePage+1
.1ef5	85 51		sta $51				sta 	esInt1+1
.1ef7	ad ca 0a	lda $0aca			lda 	endProgram 						; default end address
.1efa	85 4a		sta $4a				sta 	esInt0+2
.1efc	ad cb 0a	lda $0acb			lda 	endProgram+1
.1eff	85 52		sta $52				sta 	esInt1+2
.1f01	b1 28		lda ($28),y			lda 	(codePtr),y 					; , following
.1f03	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.1f05	d0 08		bne $1f0f			bne 	_CLSDefault
.1f07	c8		iny				iny 									; skip comma
.1f08	a2 01		ldx #$01			ldx 	#1 								; get numeric value.
.1f0a	20 70 2a	jsr $2a70			jsr 	EvaluateInteger
.1f0d	38		sec				sec
.1f0e	60		rts				rts
.1f0f					_CLSDefault:
.1f0f	18		clc				clc
.1f10	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/local.asm

.0c09					storeSize:
>0c09							.fill 	1
.1f11					CommandLocal:
.1f11	a2 00		ldx #$00			ldx 	#0
.1f13	20 2f 1f	jsr $1f2f			jsr 	LocaliseVariable 			; localise one.
.1f16					_CLCheckNext:
.1f16	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows ?
.1f18	c8		iny				iny
.1f19	c9 8d		cmp #$8d			cmp 	#TKW_EQUAL 					; something local "x = 2" ?
.1f1b	f0 06		beq $1f23			beq 	_CLAssignment
.1f1d	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; comma try again.
.1f1f	f0 f0		beq $1f11			beq 	CommandLocal
.1f21	88		dey				dey
.1f22	60		rts				rts
.1f23					_CLAssignment:
.1f23	a2 01		ldx #$01			ldx 	#1
.1f25	20 51 2a	jsr $2a51			jsr 	Evaluate 					; evaluate RHS
.1f28	ca		dex				dex
.1f29	20 72 1d	jsr $1d72			jsr 	WriteValue
.1f2c	4c 16 1f	jmp $1f16			jmp 	_CLCheckNext
.1f2f					LocaliseVariable:
.1f2f	b1 28		lda ($28),y			lda 	(codePtr),y 				; check it's a variable.
.1f31	c9 40		cmp #$40			cmp 	#$40
.1f33	b0 67		bcs $1f9c			bcs 	_LVSyntax
.1f35	8a		txa				txa 								; get the address of that variable.
.1f36	a2 00		ldx #$00		ldx	#0
.1f38	20 25 3f	jsr $3f25		jsr	variableHandler
.1f3b	aa		tax				tax
.1f3c	8a		txa				txa
.1f3d	48		pha				pha
.1f3e	98		tya				tya
.1f3f	48		pha				pha
.1f40	20 d4 1d	jsr $1dd4			jsr 	TOSToTemp0 					; the address of the variable is now in temp0.
.1f43	b5 40		lda $40,x			lda 	esType,x 					; get the type
.1f45	0a		asl a				asl 	a
.1f46	10 16		bpl $1f5e			bpl 	_LVPushNumber
.1f48	a0 00		ldy #$00			ldy 	#0 							; put address of data in temp1
.1f4a	b1 2a		lda ($2a),y			lda 	(temp0),y
.1f4c	c8		iny				iny
.1f4d	85 2c		sta $2c				sta 	temp1
.1f4f	b1 2a		lda ($2a),y			lda 	(temp0),y
.1f51	85 2d		sta $2d				sta 	temp1+1
.1f53	a0 00		ldy #$00			ldy 	#0 	 						; get length
.1f55	b1 2c		lda ($2c),y			lda 	(temp1),y
.1f57	aa		tax				tax 								; into X
.1f58	e8		inx				inx 								; +1 for length.
.1f59	a9 24		lda #$24			lda 	#markerString
.1f5b	4c 73 1f	jmp $1f73			jmp 	_LVWriteFrame
.1f5e					_LVPushNumber:
.1f5e	a5 2a		lda $2a				lda 	temp0 						; storage address and data source are the same
.1f60	85 2c		sta $2c				sta 	temp1
.1f62	a5 2b		lda $2b				lda 	temp0+1
.1f64	85 2d		sta $2d				sta 	temp1+1
.1f66	b5 40		lda $40,x			lda 	esType,x 					; put float flag into carry.
.1f68	4a		lsr a				lsr 	a
.1f69	a9 25		lda #$25			lda 	#markerInt 					; get marker and size.
.1f6b	a2 04		ldx #$04			ldx 	#VarISize
.1f6d	90 04		bcc $1f73			bcc 	_LVIsInteger
.1f6f	a9 23		lda #$23			lda 	#markerFloat
.1f71	a2 06		ldx #$06			ldx 	#VarFSize
.1f73					_LVIsInteger:
.1f73					_LVWriteFrame:
.1f73	8e 09 0c	stx $0c09			stx 	storeSize 					; number of bytes to copy from (temp0)
.1f76	e8		inx				inx 								; allocate 3 bytes, 2 for the address, 1 for the marker.
.1f77	e8		inx				inx
.1f78	e8		inx				inx
.1f79	20 18 31	jsr $3118			jsr 	RSClaim 					; create the stack frame.
.1f7c	a5 2a		lda $2a				lda 	temp0 						; copy the target address to slots 1 & 2
.1f7e	a0 01		ldy #$01			ldy 	#1
.1f80	91 37		sta ($37),y			sta 	(rsPointer),y
.1f82	c8		iny				iny
.1f83	a5 2b		lda $2b				lda 	temp0+1
.1f85	91 37		sta ($37),y			sta 	(rsPointer),y
.1f87	a0 00		ldy #$00			ldy 	#0
.1f89					_LVCopyData:
.1f89	b1 2c		lda ($2c),y			lda 	(temp1),y 					; get data from source, temp1
.1f8b	c8		iny				iny 								; write allowing for the header bit.
.1f8c	c8		iny				iny
.1f8d	c8		iny				iny
.1f8e	91 37		sta ($37),y			sta 	(rsPointer),y
.1f90	88		dey				dey
.1f91	88		dey				dey
.1f92	ce 09 0c	dec $0c09			dec 	storeSize 					; do it storesize times
.1f95	d0 f2		bne $1f89			bne 	_LVCopyData
.1f97	68		pla				pla
.1f98	a8		tay				tay
.1f99	68		pla				pla
.1f9a	aa		tax				tax
.1f9b	60		rts				rts
.1f9c					_LVSyntax:
.1f9c	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.1f9e	20 da 14	jsr $14da		jsr	errorHandler
.1fa1					RestoreLocals:
.1fa1	a2 00		ldx #$00			ldx 	#0
.1fa3	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.1fa5	c9 40		cmp #$40			cmp	 	#64
.1fa7	90 01		bcc $1faa			bcc 	_RLocal
.1fa9	60		rts				rts
.1faa					_RLocal:
.1faa	8a		txa				txa
.1fab	48		pha				pha
.1fac	98		tya				tya
.1fad	48		pha				pha
.1fae	a0 01		ldy #$01			ldy 	#1 							; copy target address to temp0
.1fb0	b1 37		lda ($37),y			lda 	(rsPointer),y
.1fb2	85 2a		sta $2a				sta 	temp0
.1fb4	c8		iny				iny
.1fb5	b1 37		lda ($37),y			lda 	(rsPointer),y
.1fb7	85 2b		sta $2b				sta 	temp0+1
.1fb9	a0 00		ldy #$00			ldy 	#0 							; get type back.
.1fbb	b1 37		lda ($37),y			lda 	(rsPointer),y
.1fbd	c9 24		cmp #$24			cmp 	#markerString 				; string is ... different :)
.1fbf	f0 28		beq $1fe9			beq 	_RString
.1fc1	a2 04		ldx #$04			ldx		#VARISize 					; size integer
.1fc3	c9 25		cmp #$25			cmp 	#markerInt
.1fc5	f0 02		beq $1fc9			beq 	_RIsInteger
.1fc7	a2 06		ldx #$06			ldx 	#VARFSize 					; size float
.1fc9					_RIsInteger:
.1fc9	8a		txa				txa
.1fca	48		pha				pha
.1fcb	a0 03		ldy #$03			ldy 	#3							; start size to copy back from pointer.
.1fcd					_RCopyBack:
.1fcd	b1 37		lda ($37),y			lda 	(rsPointer),y
.1fcf	88		dey				dey
.1fd0	88		dey				dey
.1fd1	88		dey				dey
.1fd2	91 2a		sta ($2a),y			sta 	(temp0),y
.1fd4	c8		iny				iny
.1fd5	c8		iny				iny
.1fd6	c8		iny				iny
.1fd7	c8		iny				iny
.1fd8	ca		dex				dex
.1fd9	d0 f2		bne $1fcd			bne 	_RCopyBack
.1fdb	68		pla				pla 								; get size add 3
.1fdc	18		clc				clc
.1fdd	69 03		adc #$03			adc 	#3 							; (2 for address one for marker)
.1fdf					_RRestoreAAndLoop:
.1fdf	20 3a 31	jsr $313a			jsr 	RSFree
.1fe2	68		pla				pla
.1fe3	a8		tay				tay
.1fe4	68		pla				pla
.1fe5	aa		tax				tax
.1fe6	4c a1 1f	jmp $1fa1			jmp 	RestoreLocals 				; go see if there are any more locals.
.1fe9					_RString:
.1fe9	a2 00		ldx #$00			ldx 	#0
.1feb	a0 01		ldy #$01			ldy 	#1 							; set up for a string write.
.1fed	b1 37		lda ($37),y			lda 	(rsPointer),y
.1fef	95 48		sta $48,x			sta 	esInt0,x
.1ff1	c8		iny				iny
.1ff2	b1 37		lda ($37),y			lda 	(rsPointer),y
.1ff4	95 50		sta $50,x			sta 	esInt1,x
.1ff6	18		clc				clc
.1ff7	a5 37		lda $37				lda 	rsPointer
.1ff9	69 03		adc #$03			adc 	#3
.1ffb	95 49		sta $49,x			sta 	esInt0+1,x
.1ffd	a5 38		lda $38				lda 	rsPointer+1
.1fff	69 00		adc #$00			adc 	#0
.2001	95 51		sta $51,x			sta 	esInt1+1,x
.2003	8a		txa				txa
.2004	a2 0e		ldx #$0e		ldx	#14
.2006	20 21 34	jsr $3421		jsr	stringHandler
.2009	a0 03		ldy #$03			ldy 	#3 							; get string length
.200b	b1 37		lda ($37),y			lda 	(rsPointer),y
.200d	18		clc				clc
.200e	69 04		adc #$04			adc 	#4 							; add 4 (pointer, marker, length) to restore.
.2010	4c df 1f	jmp $1fdf			jmp 	_RRestoreAAndLoop

;******  Return to file: main/main.asm


;******  Processing file: main/commands/new.asm

.2013					Command_New:
.2013					Command_XNew:
.2013	20 b2 22	jsr $22b2			jsr 	ResetCodeAddress 			; point to first line
.2016	a0 00		ldy #$00			ldy 	#0 							; and zap it.
.2018	98		tya				tya
.2019	91 28		sta ($28),y			sta 	(codePtr),y
.201b	20 f5 1a	jsr $1af5			jsr 	CommandClear 				; clear everything down.
.201e	4c 8a 24	jmp $248a			jmp 	CommandEND 					; do END code, as there's nothing to run.

;******  Return to file: main/main.asm


;******  Processing file: main/commands/poke.asm

.2021					Command_Poke:
.2021	a9 01		lda #$01			lda 	#1
.2023	d0 06		bne $202b			bne 	PokeGeneral
.2025					Command_Doke:
.2025	a9 02		lda #$02			lda 	#2
.2027	d0 02		bne $202b			bne 	PokeGeneral
.2029					Command_Loke:
.2029	a9 03		lda #$03			lda 	#3
.202b					PokeGeneral:
.202b	48		pha				pha 								; save id (PDL = 123)
.202c	20 6e 2a	jsr $2a6e			jsr 	EvaluateRootInteger 		; target address
.202f	20 81 30	jsr $3081			jsr	 	CheckComma
.2032	e8		inx				inx
.2033	20 70 2a	jsr $2a70			jsr 	EvaluateInteger 			; what value to POKE ?
.2036	ca		dex				dex
.2037	20 d4 1d	jsr $1dd4			jsr 	TOSToTemp0 					; temp0 points to the target address
.203a	84 32		sty $32				sty 	tempShort 					; save Y
.203c	68		pla				pla 								; get copy type (1-3) and dispatch
.203d	aa		tax				tax
.203e	ca		dex				dex
.203f	f0 14		beq $2055			beq 	_Poke1
.2041	ca		dex				dex
.2042	f0 0b		beq $204f			beq 	_Poke2
.2044	a0 03		ldy #$03			ldy 	#3							; put 4 bytes
.2046	a5 61		lda $61				lda 	esInt3+1
.2048	91 2a		sta ($2a),y			sta 	(temp0),y
.204a	88		dey				dey
.204b	a5 59		lda $59				lda 	esInt2+1
.204d	91 2a		sta ($2a),y			sta 	(temp0),y
.204f					_Poke2:
.204f	a0 01		ldy #$01			ldy 	#1
.2051	a5 51		lda $51				lda 	esInt1+1
.2053	91 2a		sta ($2a),y			sta 	(temp0),y
.2055					_Poke1:
.2055	a0 00		ldy #$00			ldy 	#0
.2057	a5 49		lda $49				lda 	esInt0+1
.2059	91 2a		sta ($2a),y			sta 	(temp0),y
.205b	a4 32		ldy $32				ldy 	tempShort 					; restore Y and exit
.205d	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/print.asm

.0c0a					lastPrintToken:
>0c0a							.fill 	1
.205e					Command_Print:
.205e	a9 00		lda #$00			lda 	#0 							; clear LPT to a non token
.2060	8d 0a 0c	sta $0c0a			sta 	lastPrintToken
.2063	88		dey				dey
.2064					_PrintLoopSkip:
.2064	c8		iny				iny
.2065					_PrintLoop:
.2065	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows
.2067	c9 80		cmp #$80			cmp 	#TOK_EOL  					; done if end of line or colon
.2069	f0 5b		beq $20c6			beq 	_PrintExit
.206b	c9 ca		cmp #$ca			cmp 	#TKW_COLON
.206d	f0 57		beq $20c6			beq 	_PrintExit
.206f	8d 0a 0c	sta $0c0a			sta 	lastPrintToken 				; update Last print token, so we check ; and ,
.2072	c9 cc		cmp #$cc			cmp 	#TKW_SEMICOLON 				; ignore semicolon
.2074	f0 ee		beq $2064			beq 	_PrintLoopSkip
.2076	c9 cd		cmp #$cd			cmp 	#TKW_QUOTE 					; ' is new line
.2078	f0 3c		beq $20b6			beq	 	_PrintNewLine
.207a	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; , is print tab
.207c	f0 40		beq $20be			beq 	_PrintTab
.207e	20 4f 2a	jsr $2a4f			jsr 	EvaluateRoot 				; evaluate something at the root
.2081	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.2083	85 2a		sta $2a				sta 	temp0
.2085	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.2087	85 2b		sta $2b				sta 	1+(temp0)
.2089	a5 40		lda $40				lda 	esType 						; get type
.208b	f0 15		beq $20a2			beq		_PrintInteger
.208d	4a		lsr a				lsr 	a 							; check for floating point
.208e	b0 08		bcs $2098			bcs 	_PrintFloat
.2090					_PrintString:
.2090	a2 00		ldx #$00			ldx 	#0 							; bottom string to temp0
.2092	20 d4 1d	jsr $1dd4			jsr 	TOSToTemp0
.2095	4c b0 20	jmp $20b0			jmp 	_PrintTemp0 				; print no leading space.
.2098					_PrintFloat:
.2098	a9 00		lda #$00			lda 	#0 							; stack level.
.209a	a2 14		ldx #$14		ldx	#20
.209c	20 00 19	jsr $1900		jsr	floatingpointHandler
.209f	4c a9 20	jmp $20a9			jmp 	_PrintSpaceTemp0
.20a2					_PrintInteger:
.20a2	a9 8a		lda #$8a			lda 	#10+$80 					; base 10 signed
.20a4	a2 00		ldx #$00			ldx 	#0 							; bottom stack element
.20a6	20 57 2f	jsr $2f57			jsr 	MInt32ToString				; convert to text
.20a9					_PrintSpaceTemp0:
.20a9	a9 20		lda #$20			lda 	#32
.20ab	a2 14		ldx #$14		ldx	#20
.20ad	20 b9 14	jsr $14b9		jsr	deviceHandler
.20b0					_PrintTemp0:
.20b0	20 d7 20	jsr $20d7			jsr 	PrintString
.20b3	4c 65 20	jmp $2065			jmp 	_PrintLoop
.20b6					_PrintNewLine:
.20b6	a2 04		ldx #$04		ldx	#4
.20b8	20 b9 14	jsr $14b9		jsr	deviceHandler
.20bb	4c 64 20	jmp $2064			jmp 	_PrintLoopSkip
.20be					_PrintTab:
.20be	a2 1a		ldx #$1a		ldx	#26
.20c0	20 b9 14	jsr $14b9		jsr	deviceHandler
.20c3	4c 64 20	jmp $2064			jmp 	_PrintLoopSkip
.20c6					_PrintExit:
.20c6	ad 0a 0c	lda $0c0a			lda		lastPrintToken 				; check last token
.20c9	c9 cc		cmp #$cc			cmp 	#TKW_SEMICOLON 				; if , or ; do not print NL
.20cb	f0 09		beq $20d6			beq 	_PrintExit2
.20cd	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.20cf	f0 05		beq $20d6			beq 	_PrintExit2
.20d1	a2 04		ldx #$04		ldx	#4
.20d3	20 b9 14	jsr $14b9		jsr	deviceHandler
.20d6					_PrintExit2:
.20d6	60		rts				rts
.20d7					PrintString:
.20d7	8a		txa				txa
.20d8	48		pha				pha
.20d9	98		tya				tya
.20da	48		pha				pha
.20db	a0 00		ldy #$00			ldy 	#0							; get length
.20dd	b1 2a		lda ($2a),y			lda 	(temp0),y
.20df	aa		tax				tax 								; into X
.20e0	e0 00		cpx #$00	_PSLoop:cpx 	#0 							; finished ?
.20e2	f0 10		beq $20f4			beq 	_PSExit
.20e4	ca		dex				dex
.20e5	8a		txa				txa
.20e6	48		pha				pha
.20e7	c8		iny				iny
.20e8	b1 2a		lda ($2a),y			lda 	(temp0),y
.20ea	a2 14		ldx #$14		ldx	#20
.20ec	20 b9 14	jsr $14b9		jsr	deviceHandler
.20ef	68		pla				pla
.20f0	aa		tax				tax
.20f1	4c e0 20	jmp $20e0			jmp 	_PSLoop
.20f4					_PSExit:
.20f4	68		pla				pla
.20f5	a8		tay				tay
.20f6	68		pla				pla
.20f7	aa		tax				tax
.20f8	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/proc.asm

.0c0b					paramCount:
>0c0b							.fill 	1
.20f9					CallProc:
.20f9	20 af 23	jsr $23af			jsr 	FindProcedure 				; find procedure, put in temp0. A contains name length.
.20fc	48		pha				pha 								; save length on stack
.20fd	85 32		sta $32				sta 	tempShort 					; save length in tempShort
.20ff	a5 2b		lda $2b				lda 	temp0+1 					; save procedure target on stack.
.2101	48		pha				pha
.2102	a5 2a		lda $2a				lda 	temp0
.2104	48		pha				pha
.2105	98		tya				tya 								; calculate Y + length
.2106	18		clc				clc
.2107	65 32		adc $32				adc 	tempShort
.2109	a8		tay				tay
.210a	a2 00		ldx #$00			ldx 	#0 							; where the first parameter goes - 1
.210c					_CallProcEvalParams:
.210c	e8		inx				inx
.210d	b1 28		lda ($28),y			lda 	(codePtr),y 				; do we have ) , e.g. the end of the parameters ?
.210f	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.2111	f0 0b		beq $211e			beq 	_CPDoneParams
.2113	20 51 2a	jsr $2a51			jsr 	Evaluate 					; evaluate a parameter
.2116	b1 28		lda ($28),y			lda 	(codePtr),Y 				; get what's next, preconsume
.2118	c8		iny				iny
.2119	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; if comma, go get another parameter
.211b	f0 ef		beq $210c			beq 	_CallProcEvalParams
.211d	88		dey				dey 								; undo consumption.
.211e					_CPDoneParams:
.211e	20 74 30	jsr $3074			jsr 	CheckRightParen 			; check closing parenthesis.
.2121	8e 0b 0c	stx $0c0b			stx 	paramCount 					; store parameter count+1
.2124	a2 04		ldx #$04			ldx 	#4							; make space on stack
.2126	a9 50		lda #$50			lda 	#markerPROC
.2128	20 18 31	jsr $3118			jsr 	RSClaim
.212b	a9 01		lda #$01			lda 	#1 							; store return address.
.212d	20 44 31	jsr $3144			jsr 	RSSavePosition
.2130	68		pla				pla 								; get the new code Ptr
.2131	85 28		sta $28				sta 	codePtr
.2133	68		pla				pla
.2134	85 29		sta $29				sta 	codePtr+1
.2136	68		pla				pla 								; length of name + 4 is the param start.
.2137	18		clc				clc
.2138	69 04		adc #$04			adc 	#4
.213a	a8		tay				tay
.213b	a2 ff		ldx #$ff			ldx 	#$FF
.213d					_CPLoadParameters:
.213d	e8		inx				inx 								; point to where the address should be loaded.
.213e	ec 0b 0c	cpx $0c0b			cpx 	paramCount 					; too many parameters in definition ?
.2141	f0 1e		beq $2161			beq 	_CPParamError
.2143	b1 28		lda ($28),y			lda 	(codePtr),y					; what follows
.2145	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN 				; is it the right bracket
.2147	f0 0e		beq $2157			beq 	_CPParamComplete 			; done all the parameters, perhaps.
.2149	20 2f 1f	jsr $1f2f			jsr 	LocaliseVariable 			; make following variable local, ref in tos,x
.214c	20 72 1d	jsr $1d72			jsr 	WriteValue 					; copy the evaluated parameter into there.
.214f	b1 28		lda ($28),y			lda 	(codePtr),y 				; followed by a comma ?
.2151	c8		iny				iny
.2152	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.2154	f0 e7		beq $213d			beq 	_CPLoadParameters
.2156	88		dey				dey 								; no, unconsume and check for )
.2157					_CPParamComplete:
.2157	20 74 30	jsr $3074			jsr 	CheckRightParen 			; check )
.215a	e8		inx				inx 								; check right number of parameters have been consumed
.215b	ec 0b 0c	cpx $0c0b			cpx 	paramCount
.215e	d0 01		bne $2161			bne 	_CPParamError
.2160	60		rts				rts
.2161					_CPParamError:
.2161	a2 18		ldx #$18			ldx 	#ErrorID_Params
.2163	20 da 14	jsr $14da		jsr	errorHandler
.2166					ReturnProc:
.2166	20 a1 1f	jsr $1fa1			jsr 	RestoreLocals 				; get the locals back.
.2169	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.216b	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.216d	c9 50		cmp #$50			cmp 	#markerPROC 						; does it match
.216f	f0 05		beq $2176			beq 	_isok
.2171	a2 12		ldx #$12			ldx 	#ErrorID_endProcErr
.2173	20 da 14	jsr $14da		jsr	errorHandler
.2176					_isok:
.2176	a9 01		lda #$01			lda 	#1
.2178	20 57 31	jsr $3157			jsr 	RSLoadPosition 				; reload the position from offset 1.
.217b	a9 04		lda #$04			lda 	#4 							; throw 4 bytes from stack.
.217d	20 3a 31	jsr $313a			jsr 	RSFree
.2180	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/readdata.asm

.0c0c					dataPtr:
>0c0c							.fill 	2
.0c0e					dataIndex:
>0c0e							.fill 	1
.2181					CommandRead:
.2181	a2 00		ldx #$00			ldx 	#0 							; get a reference to a variable in stack:0
.2183	20 a3 2a	jsr $2aa3			jsr 	EvaluateReference
.2186	20 c7 21	jsr $21c7			jsr 	SwapDPCP 					; use the data pointer.
.2189	b1 28		lda ($28),y			lda 	(codePtr),y 				; see where it is.
.218b	c8		iny				iny
.218c	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; if it is on a comma, it is in data.
.218e	f0 07		beq $2197			beq 	_CRInData
.2190	88		dey				dey
.2191	a9 dc		lda #$dc			lda 	#TKW_DATA 					; scan forward to a DATA statement.
.2193	aa		tax				tax
.2194	20 8e 30	jsr $308e			jsr 	ScanForward
.2197					_CRInData:
.2197	a2 01		ldx #$01			ldx 	#1 							; evaluate a value at Stack,1
.2199	20 51 2a	jsr $2a51			jsr 	Evaluate
.219c	ca		dex				dex 								; and write the value.
.219d	20 72 1d	jsr $1d72			jsr 	WriteValue
.21a0	20 c7 21	jsr $21c7			jsr 	SwapDPCP 					; get the code pointer back.
.21a3	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows ?
.21a5	c8		iny				iny
.21a6	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; if comma, another variable
.21a8	f0 d7		beq $2181			beq 	CommandRead
.21aa	88		dey				dey
.21ab	60		rts				rts
.21ac					CommandData:
.21ac	a9 80		lda #$80			lda 	#TOK_EOL 					; go forward to end of line or colon.
.21ae	a2 ca		ldx #$ca			ldx 	#TKW_COLON
.21b0	20 8e 30	jsr $308e			jsr 	ScanForward
.21b3	88		dey				dey 								; ending on EOL is a scan issue, as it increments
.21b4	60		rts				rts
.21b5					CommandRestore:
.21b5	ad c8 0a	lda $0ac8			lda 	basePage
.21b8	8d 0c 0c	sta $0c0c			sta 	dataPtr
.21bb	ad c9 0a	lda $0ac9			lda 	basePage+1
.21be	8d 0d 0c	sta $0c0d			sta 	dataPtr+1
.21c1	a9 03		lda #$03			lda 	#3
.21c3	8d 0e 0c	sta $0c0e			sta 	dataIndex
.21c6	60		rts				rts
.21c7					SwapDPCP:
.21c7	8a		txa				txa
.21c8	48		pha				pha
.21c9	98		tya				tya 								; swap Y, DataIndex
.21ca	ac 0e 0c	ldy $0c0e			ldy 	DataIndex
.21cd	8d 0e 0c	sta $0c0e			sta 	DataIndex
.21d0	a5 28		lda $28				lda 	codePtr 					; swap code/dataptr low
.21d2	ae 0c 0c	ldx $0c0c			ldx 	dataptr
.21d5	8d 0c 0c	sta $0c0c			sta 	dataPtr
.21d8	86 28		stx $28				stx 	codePtr
.21da	a5 29		lda $29				lda 	codePtr+1 					; swap code/dataptr high.
.21dc	ae 0d 0c	ldx $0c0d			ldx 	dataptr+1
.21df	8d 0d 0c	sta $0c0d			sta 	dataPtr+1
.21e2	86 29		stx $29				stx 	codePtr+1
.21e4	68		pla				pla
.21e5	aa		tax				tax
.21e6	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/rem.asm

.21e7					Command_Rem:
.21e7					Command_Rem2:
.21e7	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows
.21e9	c9 85		cmp #$85			cmp 	#TOK_STR 					; if it is a string then skip it.
.21eb	d0 06		bne $21f3			bne 	_CRNotString
.21ed	c8		iny				iny
.21ee	98		tya				tya
.21ef	38		sec				sec
.21f0	71 28		adc ($28),y			adc 	(codePtr),y 				; get string size, add to Y, +1 for the length
.21f2	a8		tay				tay
.21f3					_CRNotString:
.21f3	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/repeat.asm

.21f4					Command_Repeat:
.21f4	a2 04		ldx #$04			ldx 	#4 							; allocate 4 bytes on stack for REPEAT
.21f6	a9 52		lda #$52			lda 	#markerREPEAT 				; repeat marker allocate 4 bytes
.21f8	20 18 31	jsr $3118			jsr 	RSClaim
.21fb	a9 01		lda #$01			lda 	#1 							; save position at offset 1.
.21fd	20 44 31	jsr $3144			jsr 	RSSavePosition
.2200	60		rts				rts
.2201					Command_Until:
.2201	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.2203	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.2205	c9 52		cmp #$52			cmp 	#markerREPEAT 						; does it match
.2207	f0 05		beq $220e			beq 	_isok
.2209	a2 0f		ldx #$0f			ldx 	#ErrorID_untilErr
.220b	20 da 14	jsr $14da		jsr	errorHandler
.220e					_isok:
.220e	20 6e 2a	jsr $2a6e			jsr 	EvaluateRootInteger 		; at the bottom.
.2211	20 28 30	jsr $3028			jsr 	MInt32Zero					; check if TOS zero
.2214	d0 06		bne $221c			bne 	_CUExit
.2216	a9 01		lda #$01			lda 	#1
.2218	20 57 31	jsr $3157			jsr 	RSLoadPosition 				; reload the position from offset 1.
.221b	60		rts				rts
.221c					_CUExit:
.221c	a9 04		lda #$04			lda 	#4 							; throw 4 bytes from stack.
.221e	20 3a 31	jsr $313a			jsr 	RSFree
.2221	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/run.asm

.0c0f					breakCounter:
>0c0f								.fill 	1
.0c10					breakIncrement:
>0c10								.fill 	1
.2222					Command_Run:
.2222					XCommand_Run:
.2222	a2 ff		ldx #$ff			ldx 	#$FF 						; reset the stack.
.2224	9a		txs				txs
.2225	20 ac 22	jsr $22ac			jsr 	BreakOn 					; turn break on
.2228	20 f5 1a	jsr $1af5			jsr 	CommandClear 				; clear everything.
.222b	20 b2 22	jsr $22b2			jsr 	ResetCodeAddress 			; back to the start.
.222e					Command_RunFrom:
.222e	a0 03		ldy #$03			ldy 	#3 							; over offset/line #
.2230					CRNextInstruction:
.2230	64 3a		stz $3a				stz 	softMemAlloc+1
.2232	ad 0f 0c	lda $0c0f			lda 	breakCounter 				; check for break.
.2235	6d 10 0c	adc $0c10			adc 	breakIncrement
.2238	8d 0f 0c	sta $0c0f			sta 	breakCounter
.223b	90 05		bcc $2242			bcc 	_CRNoChecks
.223d	a2 00		ldx #$00		ldx	#0
.223f	20 b9 14	jsr $14b9		jsr	deviceHandler
.2242					_CRNoChecks
.2242	b1 28		lda ($28),y			lda 	(codePtr),y 				; get next token.
.2244	10 1c		bpl $2262			bpl 	_CRNotToken
.2246	c9 c9		cmp #$c9			cmp 	#TOK_TOKENS 				; if in the tokens then do that token.
.2248	b0 0c		bcs $2256			bcs 	_CRExecute
.224a	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST 				; unary is ignored.
.224c	b0 71		bcs $22bf			bcs 	Unimplemented
.224e	c9 99		cmp #$99			cmp 	#TOK_STRUCTST 				; execute structures.
.2250	b0 04		bcs $2256			bcs 	_CRExecute
.2252	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; if one of the system tokens $80-$85 do that
.2254	b0 16		bcs $226c			bcs 	_CRCheckIndirect 			; if in that unused range check for ! or ? or AND
.2256					_CRExecute:
.2256	c8		iny				iny 								; consume it.
.2257	0a		asl a				asl 	a 							; double it, losing most significant bit.
.2258	aa		tax				tax
.2259	20 5f 22	jsr $225f			jsr 	_CRRunRoutine 				; we want to do jsr (group0vectors,x)
.225c	4c 30 22	jmp $2230			jmp 	CRNextInstruction
.225f					_CRRunRoutine:
.225f	7c c9 22	jmp ($22c9,x)			jmp 	(Group0Vectors,x)
.2262					_CRNotToken:
.2262	c9 40		cmp #$40			cmp 	#$40 						; if 0-3F then it is a letter
.2264	b0 59		bcs $22bf			bcs 	Unimplemented
.2266					_CRDefaultLet:
.2266	20 5f 1d	jsr $1d5f			jsr 	CommandLet 					; do the default, LET
.2269	4c 30 22	jmp $2230			jmp 	CRNextInstruction
.226c					_CRCheckIndirect:
.226c	c9 86		cmp #$86			cmp 	#TKW_AND 					; AND (assembler)
.226e	f0 0a		beq $227a			beq 	_CRAndCommand
.2270	c9 97		cmp #$97			cmp 	#TKW_PLING 					; !<term> =
.2272	f0 f2		beq $2266			beq 	_CRDefaultLet
.2274	c9 98		cmp #$98			cmp 	#TKW_QMARK 					; ?<term> =
.2276	f0 ee		beq $2266			beq 	_CRDefaultLet
.2278	d0 45		bne $22bf			bne 	Unimplemented
.227a					_CRAndCommand:
.227a	c8		iny				iny 								; skip over the AND token
.227b	a9 92		lda #$92			lda 	#TKW_LPARENANDRPAREN 		; replace it with the pseudo-and
.227d	20 97 22	jsr $2297			jsr 	CommandAssembler 			; do the assembler command
.2280	4c 30 22	jmp $2230			jmp 	CRNextInstruction 			; and loop round.
.2283					CommandShift1:
.2283	b1 28		lda ($28),y			lda 	(codePtr),y 				; get shifted value
.2285	10 38		bpl $22bf			bpl 	Unimplemented 				; we have an error as this should not happen.
.2287	c8		iny				iny 								; advance over it.
.2288	c9 91		cmp #$91			cmp 	#TKA_GROUP1 				; is it an assembler constant ?
.228a	b0 0b		bcs $2297			bcs 	CommandAssembler
.228c	0a		asl a				asl 	a 							; double into X
.228d	aa		tax				tax
.228e	7c 8d 23	jmp ($238d,x)			jmp 	(Group1Vectors-12,x) 		; and do the code.
.2291					CommandShift2:
.2291	a9 ff		lda #$ff			lda 	#$FF 						; $FF means command not unary function.
.2293	20 f1 17	jsr $17f1		jsr	extensionHandler
.2296	60		rts				rts
.2297					CommandAssembler:
.2297	a2 00		ldx #$00		ldx	#0
.2299	20 7e 13	jsr $137e		jsr	assemblerHandler
.229c	60		rts				rts
.229d					CommandAssemblerLabel:
.229d	a2 02		ldx #$02		ldx	#2
.229f	20 7e 13	jsr $137e		jsr	assemblerHandler
.22a2	60		rts				rts
.22a3					CommandColon:
.22a3	60		rts				rts
.22a4					CommandBreak:
.22a4	20 6e 2a	jsr $2a6e			jsr 	EvaluateRootInteger
.22a7	20 28 30	jsr $3028			jsr 	MInt32Zero
.22aa	f0 02		beq $22ae			beq 	BreakOff
.22ac					BreakOn:
.22ac	a2 08		ldx #$08			ldx 	#8
.22ae					BreakOff:
.22ae	8e 10 0c	stx $0c10			stx 	breakIncrement
.22b1	60		rts				rts
.22b2					ResetCodeAddress:
.22b2	ad c8 0a	lda $0ac8			lda 	basePage 					; copy basePage to code Pointer
.22b5	85 28		sta $28				sta 	codePtr
.22b7	ad c9 0a	lda $0ac9			lda 	basePage+1
.22ba	85 29		sta $29				sta 	codePtr+1
.22bc	a0 03		ldy #$03			ldy 	#3 							; offset after offset link and line#
.22be	60		rts				rts
.22bf					Unimplemented:
.22bf	a2 01		ldx #$01			ldx 	#ErrorID_Missing
.22c1	20 da 14	jsr $14da		jsr	errorHandler
.22c4					TKErr01:
.22c4					TKErr02:
.22c4					TKErr03:
.22c4					TKErr04:
.22c4					TKErr05:
.22c4					TKErr06:
.22c4					TKErr07:
.22c4					TKErr08:
.22c4					TKErr09:
.22c4					TKErr10:
.22c4					TKErr11:
.22c4	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.22c6	20 da 14	jsr $14da		jsr	errorHandler

;******  Processing file: main/commands/../../generated/tokenvectors0.inc

.22c9					Group0Vectors:
>22c9	90 24					.word	AdvanceNextLine          ; $80 [[eol]]
>22cb	83 22					.word	CommandShift1            ; $81 [[sh1]]
>22cd	91 22					.word	CommandShift2            ; $82 [[sh2]]
>22cf	c4 22					.word	TKErr09                  ; $83 [[sh3]]
>22d1	c4 22					.word	TKErr10                  ; $84 [[fpc]]
>22d3	c4 22					.word	TKErr08                  ; $85 [[str]]
>22d5	54 26					.word	AndHandler               ; $86 and
>22d7	41 26					.word	OrHandler                ; $87 or
>22d9	2e 26					.word	XorHandler               ; $88 xor
>22db	76 27					.word	CompareGreaterEq         ; $89 >=
>22dd	80 27					.word	CompareLessEq            ; $8a <=
>22df	62 27					.word	CompareGreater           ; $8b >
>22e1	58 27					.word	CompareLess              ; $8c <
>22e3	4e 27					.word	CompareEquals            ; $8d =
>22e5	6c 27					.word	CompareNotEquals         ; $8e <>
>22e7	bf 25					.word	AddHandler               ; $8f +
>22e9	e2 25					.word	SubHandler               ; $90 -
>22eb	7a 26					.word	ShrHandler               ; $91 >>
>22ed	67 26					.word	ShlHandler               ; $92 <<
>22ef	f5 25					.word	MulHandler               ; $93 *
>22f1	08 26					.word	DivHandler               ; $94 /
>22f3	1b 26					.word	ModHandler               ; $95 mod
>22f5	b3 26					.word	PowerHandler             ; $96 ^
>22f7	8d 26					.word	WordRefHandler           ; $97 !
>22f9	a0 26					.word	ByteRefHandler           ; $98 ?
>22fb	f4 21					.word	Command_Repeat           ; $99 repeat
>22fd	58 25					.word	Command_While            ; $9a while
>22ff	5e 1b					.word	Command_FOR              ; $9b for
>2301	6d 1c					.word	CommandIf                ; $9c if
>2303	c4 22					.word	TKErr04                  ; $9d defproc
>2305	01 22					.word	Command_Until            ; $9e until
>2307	7b 25					.word	Command_Wend             ; $9f wend
>2309	bf 1b					.word	Command_NEXT             ; $a0 next
>230b	c4 22					.word	TKErr06                  ; $a1 then
>230d	a8 1c					.word	Command_ENDIF            ; $a2 endif
>230f	66 21					.word	ReturnProc               ; $a3 endproc
>2311	58 29					.word	UnaryParenthesis         ; $a4 (
>2313	b6 2a					.word	UnaryLen                 ; $a5 len(
>2315	fa 2a					.word	UnarySgn                 ; $a6 sgn(
>2317	e3 2a					.word	UnaryAbs                 ; $a7 abs(
>2319	53 2b					.word	Unary_Random             ; $a8 random(
>231b	9d 2b					.word	Unary_Page               ; $a9 page
>231d	fd 2f					.word	MInt32True               ; $aa true
>231f	01 30					.word	MInt32False              ; $ab false
>2321	68 2b					.word	Unary_Min                ; $ac min(
>2323	6c 2b					.word	Unary_Max                ; $ad max(
>2325	75 2c					.word	UnarySys                 ; $ae sys(
>2327	1e 2c					.word	UnaryTimer               ; $af timer(
>2329	ad 29					.word	EventFunction            ; $b0 event(
>232b	47 2c					.word	UnaryGet                 ; $b1 get(
>232d	37 2c					.word	UnaryInkey               ; $b2 inkey(
>232f	ee 2b					.word	UnaryAlloc               ; $b3 alloc(
>2331	ae 2c					.word	ExecChr                  ; $b4 chr$(
>2333	de 2c					.word	ExecLeft                 ; $b5 left$(
>2335	fb 2c					.word	ExecMid                  ; $b6 mid$(
>2337	23 2d					.word	ExecRight                ; $b7 right$(
>2339	90 27					.word	Event_Str                ; $b8 str$(
>233b	bf 27					.word	UnaryVal                 ; $b9 val(
>233d	11 2b					.word	UnaryPeek                ; $ba peek(
>233f	17 2b					.word	UnaryDeek                ; $bb deek(
>2341	1d 2b					.word	UnaryLeek                ; $bc leek(
>2343	d4 2a					.word	UnaryAsc                 ; $bd asc(
>2345	c8 2b					.word	UnaryIntToFloat          ; $be int(
>2347	db 2b					.word	UnaryFloatToInt          ; $bf float(
>2349	c2 27					.word	UnaryIsVal               ; $c0 isval(
>234b	c5 2c					.word	ExecUpper                ; $c1 upper$(
>234d	c2 2c					.word	ExecLower                ; $c2 lower$(
>234f	ab 2b					.word	UnaryReference           ; $c3 @
>2351	c1 2b					.word	UnaryComplement          ; $c4 ~
>2353	be 2b					.word	UnaryHexMarker           ; $c5 &
>2355	60 2c					.word	UnaryGetString           ; $c6 get$(
>2357	66 2c					.word	UnaryInkeyString         ; $c7 inkey$(
>2359	9d 2c					.word	UnaryMem                 ; $c8 mem
>235b	c4 22					.word	TKErr01                  ; $c9 )
>235d	a3 22					.word	CommandColon             ; $ca :
>235f	c4 22					.word	TKErr02                  ; $cb ,
>2361	c4 22					.word	TKErr03                  ; $cc ;
>2363	e7 21					.word	Command_Rem2             ; $cd '
>2365	c4 22					.word	TKErr07                  ; $ce to
>2367	c4 22					.word	TKErr05                  ; $cf step
>2369	f9 20					.word	CallProc                 ; $d0 proc
>236b	11 1f					.word	CommandLocal             ; $d1 local
>236d	50 1b					.word	Command_Dim              ; $d2 dim
>236f	e7 21					.word	Command_Rem              ; $d3 rem
>2371	5f 1d					.word	CommandLet               ; $d4 let
>2373	a9 1c					.word	Command_Input            ; $d5 input
>2375	a2 1c					.word	Command_ELSE             ; $d6 else
>2377	37 25					.word	Command_VDU              ; $d7 vdu
>2379	5e 20					.word	Command_Print            ; $d8 print
>237b	05 25					.word	CommandGOTO              ; $d9 goto
>237d	da 24					.word	CommandGOSUB             ; $da gosub
>237f	ed 24					.word	CommandRETURN            ; $db return
>2381	ac 21					.word	CommandData              ; $dc data
>2383	e7 1a					.word	Command_Assert           ; $dd assert
>2385	21 20					.word	Command_Poke             ; $de poke
>2387	25 20					.word	Command_Doke             ; $df doke
>2389	29 20					.word	Command_Loke             ; $e0 loke
>238b	aa 24					.word	Command_Ink              ; $e1 ink
>238d	b5 24					.word	Command_Paper            ; $e2 paper
>238f	a4 24					.word	Command_CLS              ; $e3 cls
>2391	c0 24					.word	Command_Locate           ; $e4 locate
>2393	a4 22					.word	CommandBreak             ; $e5 break
>2395	9d 22					.word	CommandAssemblerLabel    ; $e6 .
>2397	c4 22					.word	TKErr11                  ; $e7 #

;******  Return to file: main/commands/run.asm


;******  Processing file: main/commands/../../generated/tokenvectors1.inc

.2399					Group1Vectors:
>2399	f5 1a					.word	CommandClear             ; $86 clear
>239b	b8 1e					.word	CommandLoad              ; $87 load
>239d	cd 1e					.word	CommandSave              ; $88 save
>239f	dd 1d					.word	CommandList              ; $89 list
>23a1	13 20					.word	Command_New              ; $8a new
>23a3	22 22					.word	Command_Run              ; $8b run
>23a5	81 21					.word	CommandRead              ; $8c read
>23a7	b5 21					.word	CommandRestore           ; $8d restore
>23a9	8a 24					.word	CommandEnd               ; $8e end
>23ab	85 24					.word	CommandStop              ; $8f stop
>23ad	8d 24					.word	CommandXemu              ; $90 xemu

;******  Return to file: main/commands/run.asm


;******  Return to file: main/main.asm


;******  Processing file: main/commands/scanner.asm

.0c11					procList:
>0c11							.fill 	2		 					; terminated by name high being zero.
.0c13					yInLine:
>0c13							.fill 	1
.23af					FindProcedure:
.23af	8c 13 0c	sty $0c13			sty 	yInLine 					; save current position.
.23b2	20 6d 24	jsr $246d			jsr 	CalculateProcedureHash		; calculate the hash of the procedure.
.23b5	85 2c		sta $2c				sta 	temp1
.23b7	ad 11 0c	lda $0c11			lda		procList 					; put procList address in temp2
.23ba	85 2e		sta $2e				sta 	temp2
.23bc	ad 12 0c	lda $0c12			lda 	procList+1
.23bf	85 2f		sta $2f				sta 	temp2+1
.23c1	a0 00		ldy #$00			ldy 	#0 							; position in this table.
.23c3					_FPLoop:
.23c3	b1 2e		lda ($2e),y			lda 	(temp2),y
.23c5	f0 4f		beq $2416			beq 	_FPError 					; if so, we don't know this procedure.
.23c7	85 2b		sta $2b				sta 	temp0+1 					; copy MSB/LSB to temp0 as we go.
.23c9	c8		iny				iny
.23ca	b1 2e		lda ($2e),y			lda 	(temp2),y
.23cc	85 2a		sta $2a				sta 	temp0
.23ce	c8		iny				iny
.23cf	b1 2e		lda ($2e),y			lda 	(temp2),y					; check the procedure hash.
.23d1	c5 2c		cmp $2c				cmp 	temp1
.23d3	d0 2b		bne $2400			bne 	_FPNext 					; hash is different, go to next.
.23d5	38		sec				sec
.23d6	ad 13 0c	lda $0c13			lda 	yInLine 					; position in line must be at least 4
.23d9	e9 04		sbc #$04			sbc 	#4
.23db	18		clc				clc
.23dc	65 28		adc $28				adc 	codePtr
.23de	85 30		sta $30				sta 	temp3
.23e0	a5 29		lda $29				lda 	codePtr+1
.23e2	69 00		adc #$00			adc 	#0
.23e4	85 31		sta $31				sta 	temp3+1
.23e6	98		tya				tya
.23e7	48		pha				pha
.23e8	a0 04		ldy #$04			ldy 	#4
.23ea					_FPCName:
.23ea	b1 30		lda ($30),y			lda 	(temp3),y 					; check the same
.23ec	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.23ee	d0 0e		bne $23fe			bne 	_FPpulYNext 				; if different go to next one.
.23f0	c8		iny				iny
.23f1	c9 3a		cmp #$3a			cmp 	#$3A
.23f3	90 f5		bcc $23ea			bcc 	_FPCName 					; compare the whole lot....
.23f5	68		pla				pla 								; throw away the saved Y
.23f6	98		tya				tya 								; length of name is Y-4
.23f7	38		sec				sec
.23f8	e9 04		sbc #$04			sbc 	#4
.23fa	ac 13 0c	ldy $0c13			ldy 	yInLine  					; get the original Y back
.23fd	60		rts				rts
.23fe					_FPpulYNext:
.23fe	68		pla				pla
.23ff	a8		tay				tay
.2400					_FPNext:
.2400	c8		iny				iny 								; next procedure record.
.2401	10 c0		bpl $23c3			bpl 	_FPLoop 					; if done 128 already ... e.g. Y -ve
.2403	98		tya				tya 								; subtract 128 from Y
.2404	38		sec				sec
.2405	e9 80		sbc #$80			sbc 	#128
.2407	a8		tay				tay
.2408	18		clc				clc 								; add 128 to temp2, so we can have more than
.2409	a5 2e		lda $2e				lda 	temp2 						; 255/3 = 85 procedures
.240b	69 80		adc #$80			adc 	#128
.240d	85 2e		sta $2e				sta 	temp2
.240f	90 b2		bcc $23c3			bcc 	_FPLoop
.2411	e6 2f		inc $2f				inc 	temp2+1
.2413	4c c3 23	jmp $23c3			jmp 	_FPLoop
.2416					_FPError:
.2416	a2 17		ldx #$17			ldx 	#ErrorID_NoProc
.2418	20 da 14	jsr $14da		jsr	errorHandler
.241b					ScanProc:
.241b	98		tya				tya
.241c	48		pha				pha
.241d	a5 35		lda $35				lda 	lowMemory 					; copy the start of the procList, at low memory
.241f	8d 11 0c	sta $0c11			sta 	procList
.2422	a5 36		lda $36				lda 	lowMemory+1
.2424	8d 12 0c	sta $0c12			sta 	procList+1
.2427	20 b2 22	jsr $22b2			jsr 	ResetCodeAddress 			; back to the start.
.242a					_ScanLoop:
.242a	a0 00		ldy #$00			ldy 	#0 							; check reached program end
.242c	b1 28		lda ($28),y			lda 	(codePtr),y
.242e	f0 2a		beq $245a			beq 	_ScanExit
.2430	a0 03		ldy #$03			ldy 	#3							; get first token
.2432	b1 28		lda ($28),y			lda 	(codePtr),y
.2434	c9 9d		cmp #$9d			cmp 	#TKW_DEFPROC				; skip to next if not DEFPROC
.2436	d0 12		bne $244a			bne 	_ScanNext
.2438	a5 29		lda $29				lda 	codePtr+1 					; write high and low address of this line.
.243a	20 62 24	jsr $2462			jsr 	_ScanWrite
.243d	a5 28		lda $28				lda 	codePtr
.243f	20 62 24	jsr $2462			jsr 	_ScanWrite
.2442	a0 04		ldy #$04			ldy 	#4 							; start of name part
.2444	20 6d 24	jsr $246d			jsr 	CalculateProcedureHash 		; calculate procedure hash
.2447	20 62 24	jsr $2462			jsr 	_ScanWrite					; and write that
.244a					_ScanNext:
.244a	18		clc				clc
.244b	a0 00		ldy #$00			ldy 	#0
.244d	b1 28		lda ($28),y			lda 	(codePtr),y
.244f	65 28		adc $28				adc 	codePtr
.2451	85 28		sta $28				sta 	codePtr
.2453	90 d5		bcc $242a			bcc 	_ScanLoop
.2455	e6 29		inc $29				inc 	codePtr+1
.2457	4c 2a 24	jmp $242a			jmp 	_ScanLoop
.245a					_ScanExit:
.245a	a9 00		lda #$00			lda 	#0 							; write ending zero.
.245c	20 62 24	jsr $2462			jsr 	_ScanWrite
.245f	68		pla				pla
.2460	a8		tay				tay
.2461	60		rts				rts
.2462					_ScanWrite:
.2462	a0 00		ldy #$00			ldy 	#0
.2464	91 35		sta ($35),y			sta 	(lowMemory),y
.2466	e6 35		inc $35				inc 	lowMemory
.2468	d0 02		bne $246c			bne 	_SWNoCarry
.246a	e6 36		inc $36				inc 	lowMemory+1
.246c					_SWNoCarry:
.246c	60		rts				rts
.246d					CalculateProcedureHash:
.246d	a9 00		lda #$00			lda 	#0 							; clear hash.
.246f	85 2a		sta $2a				sta 	temp0
.2471					_CPHLoop:
.2471	18		clc				clc 								; add character and rotate and add carry back in
.2472	b1 28		lda ($28),y			lda 	(codePtr),y
.2474	65 2a		adc $2a				adc 	temp0
.2476	6a		ror a				ror 	a
.2477	69 0d		adc #$0d			adc 	#13 						; primes usually good for this sort of thing.
.2479	85 2a		sta $2a				sta 	temp0 						; (down with this sort of thing)
.247b	b1 28		lda ($28),y			lda 	(codePtr),y
.247d	c8		iny				iny 								; advance incase we go round again.
.247e	c9 3a		cmp #$3a			cmp 	#$3A
.2480	90 ef		bcc $2471			bcc 	_CPHLoop
.2482	a5 2a		lda $2a				lda 	temp0
.2484	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/stopend.asm

.2485					CommandStop:
.2485	a2 06		ldx #$06			ldx 	#ErrorID_Stop
.2487	20 da 14	jsr $14da		jsr	errorHandler
.248a					CommandEnd:
.248a	4c 66 31	jmp $3166			jmp 	WarmStart
.248d					CommandXemu:
.248d	4c ff ff	jmp $ffff			jmp 	$FFFF 						; fudge to crash out of emulator
.2490					AdvanceNextLine:
.2490	a0 00		ldy #$00			ldy 	#0 							; get offset
.2492	b1 28		lda ($28),y			lda 	(codePtr),y
.2494	18		clc				clc 								; add to codePtr
.2495	65 28		adc $28				adc 	codePtr
.2497	85 28		sta $28				sta 	codePtr
.2499	90 02		bcc $249d			bcc 	_ANLNoCarry
.249b	e6 29		inc $29				inc 	codePtr+1
.249d					_ANLNoCarry:
.249d	b1 28		lda ($28),y			lda 	(codePtr),y 				; if end of program (or was just stand alone.
.249f	f0 e9		beq $248a			beq 	CommandEnd 					; execute END
.24a1	a0 03		ldy #$03			ldy 	#3 							; start of tokens on line.
.24a3	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/text.asm

.24a4					Command_CLS:
.24a4	a2 02		ldx #$02		ldx	#2
.24a6	20 b9 14	jsr $14b9		jsr	deviceHandler
.24a9	60		rts				rts
.24aa					Command_Ink:
.24aa	a2 00		ldx #$00			ldx 	#0
.24ac	20 78 2a	jsr $2a78			jsr 	EvaluateSmallInteger
.24af	a2 08		ldx #$08		ldx	#8
.24b1	20 b9 14	jsr $14b9		jsr	deviceHandler
.24b4	60		rts				rts
.24b5					Command_Paper:
.24b5	a2 00		ldx #$00			ldx 	#0
.24b7	20 78 2a	jsr $2a78			jsr 	EvaluateSmallInteger
.24ba	a2 12		ldx #$12		ldx	#18
.24bc	20 b9 14	jsr $14b9		jsr	deviceHandler
.24bf	60		rts				rts
.24c0					Command_Locate:
.24c0	a2 00		ldx #$00			ldx 	#0
.24c2	20 78 2a	jsr $2a78			jsr 	EvaluateSmallInteger
.24c5	20 81 30	jsr $3081			jsr 	CheckComma
.24c8	e8		inx				inx
.24c9	20 78 2a	jsr $2a78			jsr 	EvaluateSmallInteger
.24cc	98		tya				tya
.24cd	48		pha				pha
.24ce	a4 49		ldy $49				ldy 	esInt0+1
.24d0	a5 48		lda $48				lda 	esInt0
.24d2	a2 10		ldx #$10		ldx	#16
.24d4	20 b9 14	jsr $14b9		jsr	deviceHandler
.24d7	68		pla				pla
.24d8	a8		tay				tay
.24d9	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/transfer.asm

.24da					CommandGOSUB:
.24da	20 6e 2a	jsr $2a6e			jsr 	EvaluateRootInteger			; get GOSUB line on stack top.
.24dd	a2 04		ldx #$04			ldx 	#4 							; allocate 4 bytes on stack for GOSUB
.24df	a9 47		lda #$47			lda 	#markerGOSUB  				; <marker> <return addr/offset>
.24e1	20 18 31	jsr $3118			jsr 	RSClaim
.24e4	a9 01		lda #$01			lda 	#1 							; save position at offset 1.
.24e6	20 44 31	jsr $3144			jsr 	RSSavePosition
.24e9	a2 00		ldx #$00			ldx 	#0 							; point back at GOSUB line
.24eb	f0 1b		beq $2508			beq 	GotoTOS 					; and do a GOTO there.
.24ed					CommandRETURN:
.24ed	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.24ef	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.24f1	c9 47		cmp #$47			cmp 	#markerGOSUB 						; does it match
.24f3	f0 05		beq $24fa			beq 	_isok
.24f5	a2 0e		ldx #$0e			ldx 	#ErrorID_returnErr
.24f7	20 da 14	jsr $14da		jsr	errorHandler
.24fa					_isok:
.24fa	a9 01		lda #$01			lda 	#1
.24fc	20 57 31	jsr $3157			jsr 	RSLoadPosition 				; reload the position from offset 1.
.24ff	a9 04		lda #$04			lda 	#4 							; throw 4 bytes from stack.
.2501	20 3a 31	jsr $313a			jsr 	RSFree
.2504	60		rts				rts
.2505					CommandGOTO:
.2505	20 6e 2a	jsr $2a6e			jsr 	EvaluateRootInteger 		; get GOTO line on stack top.
.2508					GotoTOS:
.2508	20 b2 22	jsr $22b2			jsr 	ResetCodeAddress 			; simple search.
.250b					_GotoSearch:
.250b	a0 00		ldy #$00			ldy 	#0 							; get offset
.250d	b1 28		lda ($28),y			lda 	(codePtr),y
.250f	f0 21		beq $2532			beq 	_GotoError 					; not found.
.2511	c8		iny				iny									; check LSB match
.2512	b1 28		lda ($28),y			lda 	(codePtr),y
.2514	d5 48		cmp $48,x			cmp 	esInt0,x
.2516	d0 07		bne $251f			bne 	_GotoNext
.2518	c8		iny				iny
.2519	b1 28		lda ($28),y			lda 	(codePtr),y
.251b	d5 50		cmp $50,x			cmp 	esInt1,x
.251d	f0 10		beq $252f			beq 	_GotoFound
.251f					_GotoNext:
.251f	a0 00		ldy #$00			ldy 	#0 							; go next line
.2521	b1 28		lda ($28),y			lda 	(codePtr),y
.2523	18		clc				clc
.2524	65 28		adc $28				adc 	codePtr
.2526	85 28		sta $28				sta 	codePtr
.2528	90 e1		bcc $250b			bcc 	_GotoSearch
.252a	e6 29		inc $29				inc 	codePtr+1
.252c	4c 0b 25	jmp $250b			jmp 	_GotoSearch
.252f					_GotoFound:
.252f	a0 03		ldy #$03			ldy 	#3 							; continue from that line
.2531	60		rts				rts
.2532					_GotoError:
.2532	a2 0c		ldx #$0c			ldx 	#ErrorID_LineNumber
.2534	20 da 14	jsr $14da		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/commands/vdu.asm

.2537					Command_VDU:
.2537	20 6e 2a	jsr $2a6e			jsr 	EvaluateRootInteger 			; get integer at root.
.253a	a5 48		lda $48				lda 	esInt0
.253c	a2 14		ldx #$14		ldx	#20
.253e	20 b9 14	jsr $14b9		jsr	deviceHandler
.2541					_CVNext:
.2541	b1 28		lda ($28),y			lda 	(codePtr),y 					; what follows ?
.2543	c8		iny				iny
.2544	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 						; comma, do again
.2546	f0 ef		beq $2537			beq 	Command_VDU
.2548	c9 cc		cmp #$cc			cmp 	#TKW_SEMICOLON 					; semicolon, print MSB
.254a	d0 0a		bne $2556			bne 	_CVExit
.254c	a5 50		lda $50				lda 	esInt1
.254e	a2 14		ldx #$14		ldx	#20
.2550	20 b9 14	jsr $14b9		jsr	deviceHandler
.2553	4c 41 25	jmp $2541			jmp 	_CVNext
.2556	88		dey		_CVExit:dey
.2557	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/while.asm

.2558					Command_While:
.2558	a9 57		lda #$57			lda 	#markerWhile 				; gosub marker allocate 4 bytes.
.255a	a2 04		ldx #$04			ldx 	#4
.255c	20 18 31	jsr $3118			jsr 	RSClaim 					; create on stack.
.255f	88		dey				dey
.2560	a9 01		lda #$01			lda 	#1
.2562	20 44 31	jsr $3144			jsr 	RSSavePosition 				; save position before the WHILE keyword.
.2565	c8		iny				iny
.2566	20 70 2a	jsr $2a70			jsr 	EvaluateInteger				; get the conditional
.2569	20 28 30	jsr $3028			jsr 	MInt32Zero 	 				; if zero, skip forward to the fail code.
.256c	f0 01		beq $256f			beq 	_CWFail
.256e	60		rts				rts
.256f					_CWFail:
.256f	a9 04		lda #$04			lda 	#4
.2571	20 3a 31	jsr $313a			jsr 	RSFree 						; close the just opened position.
.2574	a9 9f		lda #$9f			lda 	#TKW_WEND 					; scan forward past WEND.
.2576	aa		tax				tax
.2577	20 8e 30	jsr $308e			jsr 	ScanForward
.257a	60		rts				rts
.257b					Command_Wend:
.257b	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.257d	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.257f	c9 57		cmp #$57			cmp 	#markerWHILE 						; does it match
.2581	f0 05		beq $2588			beq 	_isok
.2583	a2 11		ldx #$11			ldx 	#ErrorID_wendErr
.2585	20 da 14	jsr $14da		jsr	errorHandler
.2588					_isok:
.2588	a9 01		lda #$01			lda 	#1
.258a	20 57 31	jsr $3157			jsr 	RSLoadPosition				; go back until true
.258d	a9 04		lda #$04			lda 	#4
.258f	20 3a 31	jsr $313a			jsr 	RSFree 						; close the loop
.2592	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/binary.asm

.2593					BinaryProcess:
.2593	b5 40		lda $40,x			lda 	esType,x 					; or type bytes together and check bit 6.
.2595	15 41		ora $41,x			ora 	esType+1,x 					; (the float bit)
.2597	0a		asl a				asl 	a
.2598	30 0e		bmi $25a8			bmi 	_BPStringType 				; if bit 6 is set, then string type, error
.259a	18		clc				clc 								; return CC for integer
.259b	29 02		and #$02			and 	#$02 						; $02 because of ASL A. check original bit 1.
.259d	f0 08		beq $25a7			beq 	_BPExit 					; if both integer then return with CC.
.259f	20 ad 25	jsr $25ad			jsr 	BPMakeBothFloat 			; make both float
.25a2	a9 01		lda #$01			lda 	#$01 						; set result type to float
.25a4	95 40		sta $40,x			sta 	esType,x
.25a6	38		sec				sec 								; and return with carry set.
.25a7					_BPExit:
.25a7	60		rts				rts
.25a8					_BPStringType:
.25a8	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.25aa	20 da 14	jsr $14da		jsr	errorHandler
.25ad					BPMakeBothFloat:
.25ad	e8		inx				inx
.25ae	20 b2 25	jsr $25b2			jsr 	BPMakeFloat 				; one is a float, so we do both as floats.
.25b1	ca		dex				dex
.25b2					BPMakeFloat:
.25b2	b5 40		lda $40,x			lda 	esType,x 					; get type bit which is in bit 0
.25b4	4a		lsr a				lsr 	a
.25b5	b0 07		bcs $25be			bcs 	_BPIsFloat 					; already a float if set.
.25b7	8a		txa				txa
.25b8	a2 1a		ldx #$1a		ldx	#26
.25ba	20 00 19	jsr $1900		jsr	floatingpointHandler
.25bd	aa		tax				tax
.25be					_BPIsFloat:
.25be	60		rts				rts
.25bf					AddHandler:
.25bf	20 0e 28	jsr $280e			jsr 	DereferenceTwo 				; dereference top two on stack.
.25c2	b5 40		lda $40,x			lda 	esType,x 					; check two strings.
.25c4	35 41		and $41,x			and 	esType+1,x
.25c6	29 40		and #$40			and 	#$40 						; if both have bit 6 set ... we have two strings
.25c8	d0 10		bne $25da			bne 	_AHStringConcat				; concatenate strings.
.25ca	20 93 25	jsr $2593			jsr 	BinaryProcess 				; check to see if either is float
.25cd	b0 03		bcs $25d2			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.25cf	4c e5 2e	jmp $2ee5			jmp 	MInt32Add 							; else do it as integer.
.25d2					_IsFPOperation:
.25d2	8a		txa				txa 								; call the relevant fp routine
.25d3	a2 02		ldx #$02		ldx	#2
.25d5	20 00 19	jsr $1900		jsr	floatingpointHandler
.25d8	aa		tax				tax
.25d9	60		rts				rts
.25da					_AHStringConcat:
.25da	8a		txa				txa 								; handled by the string module.
.25db	a2 04		ldx #$04		ldx	#4
.25dd	20 21 34	jsr $3421		jsr	stringHandler
.25e0	aa		tax				tax
.25e1	60		rts				rts
.25e2					SubHandler:
.25e2	20 0e 28	jsr $280e			jsr 	DereferenceTwo
.25e5	20 93 25	jsr $2593			jsr 	BinaryProcess 				; check to see if either is float
.25e8	b0 03		bcs $25ed			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.25ea	4c ff 2e	jmp $2eff			jmp 	MInt32Sub 							; else do it as integer.
.25ed					_IsFPOperation:
.25ed	8a		txa				txa 								; call the relevant fp routine
.25ee	a2 10		ldx #$10		ldx	#16
.25f0	20 00 19	jsr $1900		jsr	floatingpointHandler
.25f3	aa		tax				tax
.25f4	60		rts				rts
.25f5					MulHandler:
.25f5	20 0e 28	jsr $280e			jsr 	DereferenceTwo
.25f8	20 93 25	jsr $2593			jsr 	BinaryProcess 				; check to see if either is float
.25fb	b0 03		bcs $2600			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.25fd	4c 19 2f	jmp $2f19			jmp 	MInt32Multiply 							; else do it as integer.
.2600					_IsFPOperation:
.2600	8a		txa				txa 								; call the relevant fp routine
.2601	a2 0a		ldx #$0a		ldx	#10
.2603	20 00 19	jsr $1900		jsr	floatingpointHandler
.2606	aa		tax				tax
.2607	60		rts				rts
.2608					DivHandler:
.2608	20 0e 28	jsr $280e			jsr 	DereferenceTwo
.260b	20 93 25	jsr $2593			jsr 	BinaryProcess 				; check to see if either is float
.260e	b0 03		bcs $2613			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.2610	4c d6 2d	jmp $2dd6			jmp 	MInt32SDivide 							; else do it as integer.
.2613					_IsFPOperation:
.2613	8a		txa				txa 								; call the relevant fp routine
.2614	a2 06		ldx #$06		ldx	#6
.2616	20 00 19	jsr $1900		jsr	floatingpointHandler
.2619	aa		tax				tax
.261a	60		rts				rts
.261b					ModHandler:
.261b	20 0e 28	jsr $280e			jsr 	DereferenceTwo
.261e	20 93 25	jsr $2593			jsr 	BinaryProcess 				; check to see if either is float
.2621	b0 03		bcs $2626			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.2623	4c 54 2e	jmp $2e54			jmp 	MInt32Modulus 							; else do it as integer.
.2626					_IsFPOperation:
.2626	8a		txa				txa 								; call the relevant fp routine
.2627	a2 08		ldx #$08		ldx	#8
.2629	20 00 19	jsr $1900		jsr	floatingpointHandler
.262c	aa		tax				tax
.262d	60		rts				rts
.262e					XorHandler:
.262e	20 0e 28	jsr $280e			jsr 	DereferenceTwo
.2631	20 93 25	jsr $2593			jsr 	BinaryProcess 				; check to see if either is float
.2634	b0 03		bcs $2639			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.2636	4c 88 2d	jmp $2d88			jmp 	MInt32Xor 							; else do it as integer.
.2639					_IsFPOperation:
.2639	8a		txa				txa 								; call the relevant fp routine
.263a	a2 08		ldx #$08		ldx	#8
.263c	20 00 19	jsr $1900		jsr	floatingpointHandler
.263f	aa		tax				tax
.2640	60		rts				rts
.2641					OrHandler:
.2641	20 0e 28	jsr $280e			jsr 	DereferenceTwo
.2644	20 93 25	jsr $2593			jsr 	BinaryProcess 				; check to see if either is float
.2647	b0 03		bcs $264c			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.2649	4c 6f 2d	jmp $2d6f			jmp 	MInt32Or 							; else do it as integer.
.264c					_IsFPOperation:
.264c	8a		txa				txa 								; call the relevant fp routine
.264d	a2 08		ldx #$08		ldx	#8
.264f	20 00 19	jsr $1900		jsr	floatingpointHandler
.2652	aa		tax				tax
.2653	60		rts				rts
.2654					AndHandler:
.2654	20 0e 28	jsr $280e			jsr 	DereferenceTwo
.2657	20 93 25	jsr $2593			jsr 	BinaryProcess 				; check to see if either is float
.265a	b0 03		bcs $265f			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.265c	4c 56 2d	jmp $2d56			jmp 	MInt32And 							; else do it as integer.
.265f					_IsFPOperation:
.265f	8a		txa				txa 								; call the relevant fp routine
.2660	a2 08		ldx #$08		ldx	#8
.2662	20 00 19	jsr $1900		jsr	floatingpointHandler
.2665	aa		tax				tax
.2666	60		rts				rts
.2667					ShlHandler:
.2667	20 0e 28	jsr $280e			jsr 	DereferenceTwo
.266a	20 93 25	jsr $2593			jsr 	BinaryProcess 				; check to see if either is float
.266d	b0 03		bcs $2672			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.266f	4c e8 26	jmp $26e8			jmp 	Mint32ShiftLeftX 							; else do it as integer.
.2672					_IsFPOperation:
.2672	8a		txa				txa 								; call the relevant fp routine
.2673	a2 08		ldx #$08		ldx	#8
.2675	20 00 19	jsr $1900		jsr	floatingpointHandler
.2678	aa		tax				tax
.2679	60		rts				rts
.267a					ShrHandler:
.267a	20 0e 28	jsr $280e			jsr 	DereferenceTwo
.267d	20 93 25	jsr $2593			jsr 	BinaryProcess 				; check to see if either is float
.2680	b0 03		bcs $2685			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.2682	4c eb 26	jmp $26eb			jmp 	MInt32ShiftRightX 							; else do it as integer.
.2685					_IsFPOperation:
.2685	8a		txa				txa 								; call the relevant fp routine
.2686	a2 08		ldx #$08		ldx	#8
.2688	20 00 19	jsr $1900		jsr	floatingpointHandler
.268b	aa		tax				tax
.268c	60		rts				rts
.268d					WordRefHandler:
.268d	20 0e 28	jsr $280e			jsr 	DereferenceTwo
.2690	20 93 25	jsr $2593			jsr 	BinaryProcess 				; check to see if either is float
.2693	b0 03		bcs $2698			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.2695	4c da 26	jmp $26da			jmp 	MInt32WordIndirect 							; else do it as integer.
.2698					_IsFPOperation:
.2698	8a		txa				txa 								; call the relevant fp routine
.2699	a2 08		ldx #$08		ldx	#8
.269b	20 00 19	jsr $1900		jsr	floatingpointHandler
.269e	aa		tax				tax
.269f	60		rts				rts
.26a0					ByteRefHandler:
.26a0	20 0e 28	jsr $280e			jsr 	DereferenceTwo
.26a3	20 93 25	jsr $2593			jsr 	BinaryProcess 				; check to see if either is float
.26a6	b0 03		bcs $26ab			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.26a8	4c de 26	jmp $26de			jmp 	MInt32ByteIndirect 							; else do it as integer.
.26ab					_IsFPOperation:
.26ab	8a		txa				txa 								; call the relevant fp routine
.26ac	a2 08		ldx #$08		ldx	#8
.26ae	20 00 19	jsr $1900		jsr	floatingpointHandler
.26b1	aa		tax				tax
.26b2	60		rts				rts
.26b3					PowerHandler:
.26b3	20 0e 28	jsr $280e			jsr 	DereferenceTwo
.26b6	20 93 25	jsr $2593			jsr 	BinaryProcess 				; check to see if either is float
.26b9	b0 03		bcs $26be			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.26bb	4c c6 26	jmp $26c6			jmp 	PowerInteger 							; else do it as integer.
.26be					_IsFPOperation:
.26be	8a		txa				txa 								; call the relevant fp routine
.26bf	a2 16		ldx #$16		ldx	#22
.26c1	20 00 19	jsr $1900		jsr	floatingpointHandler
.26c4	aa		tax				tax
.26c5	60		rts				rts
.26c6					PowerInteger:
.26c6	20 ad 25	jsr $25ad			jsr 	BPMakeBothFloat				; make them float.
.26c9	8a		txa				txa
.26ca	a2 16		ldx #$16		ldx	#22
.26cc	20 00 19	jsr $1900		jsr	floatingpointHandler
.26cf	a2 12		ldx #$12		ldx	#18
.26d1	20 00 19	jsr $1900		jsr	floatingpointHandler
.26d4	aa		tax				tax
.26d5	a9 00		lda #$00			lda 	#0 							; make type integer
.26d7	95 40		sta $40,x			sta 	esType,x
.26d9	60		rts				rts
.26da					Mint32WordIndirect:
.26da	a9 80		lda #$80	 		lda 	#$80 				 		; word reference type (bit 7 set)
.26dc	d0 02		bne $26e0			bne 	Min32Indirect
.26de					Mint32ByteIndirect:
.26de	a9 a0		lda #$a0			lda 	#$A0 						; byte reference type (bit 7, bit 5 set)
.26e0					Min32Indirect:
.26e0	48		pha				pha 								; save the indirection
.26e1	20 e5 2e	jsr $2ee5			jsr 	MInt32Add 					; add a!b a?b
.26e4	68		pla				pla 								; and set the type to reference.
.26e5	95 40		sta $40,x			sta 	esType,x 	 				; so a!b => a+b and it's a reference....
.26e7	60		rts				rts
.26e8					Mint32ShiftLeftX:
.26e8	18		clc				clc 								; CC shift left
.26e9	90 01		bcc $26ec			bcc 	Mint32Shift
.26eb					Mint32ShiftRightX:
.26eb	38		sec				sec 								; CS shift right
.26ec					Mint32Shift:
.26ec	08		php				php 								; save carry flag on stack.
.26ed	b5 51		lda $51,x			lda 	esInt1+1,x 					; if shift >= 32 then it is zero.
.26ef	15 59		ora $59,x			ora 	esInt2+1,x
.26f1	15 61		ora $61,x			ora 	esInt3+1,x
.26f3	d0 1e		bne $2713			bne 	_MShiftZero
.26f5	b5 49		lda $49,x			lda 	esInt0+1,x
.26f7	c9 20		cmp #$20			cmp 	#32
.26f9	b0 18		bcs $2713			bcs 	_MShiftZero
.26fb					_MShiftLoop:
.26fb	b5 49		lda $49,x			lda 	esInt0+1,x 					; check count is zero
.26fd	f0 12		beq $2711			beq 	_MShiftExit
.26ff	d6 49		dec $49,x			dec 	esInt0+1,x
.2701	28		plp				plp 								; restore and save carry
.2702	08		php				php
.2703	90 06		bcc $270b			bcc 	_MShiftLeft 				; and shift left/right accordingly.
.2705	20 1f 30	jsr $301f			jsr 	Mint32ShiftRight
.2708	4c fb 26	jmp $26fb			jmp 	_MShiftLoop
.270b					_MShiftLeft:
.270b	20 16 30	jsr $3016			jsr 	Mint32ShiftLeft
.270e	4c fb 26	jmp $26fb			jmp 	_MShiftLoop
.2711					_MShiftExit:
.2711	28		plp				plp	 								; throw saved carry and exit
.2712	60		rts				rts
.2713					_MShiftZero:
.2713	4c 01 30	jmp $3001			jmp 	MInt32False 				; return 0 as shifted >= 32 times.

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/compare.asm

.2716					PerformComparison:
.2716	20 0e 28	jsr $280e			jsr 	DereferenceTwo 				; make both values.
.2719	b5 40		lda $40,x			lda 	esType,x 					; check for two strings.
.271b	35 41		and $41,x			and 	esType+1,x
.271d	0a		asl a				asl 	a 							; bit 7 set if both bit 6s were set.
.271e	30 1d		bmi $273d			bmi 	_PCIsString
.2720	b5 40		lda $40,x			lda 	esType,x 					; check either is floating point.
.2722	15 41		ora $41,x			ora 	esType+1,x
.2724	0a		asl a				asl 	a 							; shift bit 6 (string) to bit 7, mixed types
.2725	30 22		bmi $2749			bmi 	_PCError
.2727	29 02		and #$02			and 	#$02 						; because of ASL, check type in bit 0
.2729	f0 0f		beq $273a			beq 	_PCIsInteger 				; if not two integers, e.g. 1 of the bits is set
.272b	20 ad 25	jsr $25ad			jsr 	BPMakeBothFloat 			; make both float
.272e	8a		txa				txa
.272f	a2 04		ldx #$04		ldx	#4
.2731	20 00 19	jsr $1900		jsr	floatingpointHandler
.2734	86 32		stx $32				stx 	tempShort 					; save result
.2736	aa		tax				tax
.2737	a5 32		lda $32				lda 	tempShort
.2739	60		rts				rts
.273a					_PCIsInteger:
.273a	4c a1 2d	jmp $2da1			jmp 	MInt32Compare
.273d					_PCIsString:
.273d	8a		txa				txa 								; A has SP
.273e	a2 08		ldx #$08		ldx	#8
.2740	20 21 34	jsr $3421		jsr	stringHandler
.2743	86 32		stx $32				stx 	tempShort 					; save result
.2745	aa		tax				tax 								; put SP back in X and get result.
.2746	a5 32		lda $32				lda 	tempShort
.2748	60		rts				rts
.2749					_PCError:
.2749	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.274b	20 da 14	jsr $14da		jsr	errorHandler
.274e					CompareEquals:
.274e	20 16 27	jsr $2716			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.2751	c9 00		cmp #$00			cmp 	#$00 						; and we do something if it is = or <> a value.
.2753	f0 35		beq $278a			beq  	CompareTrue
.2755	4c 8d 27	jmp $278d			jmp 	CompareFalse
.2758					CompareLess:
.2758	20 16 27	jsr $2716			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.275b	c9 ff		cmp #$ff			cmp 	#$FF 						; and we do something if it is = or <> a value.
.275d	f0 2b		beq $278a			beq  	CompareTrue
.275f	4c 8d 27	jmp $278d			jmp 	CompareFalse
.2762					CompareGreater:
.2762	20 16 27	jsr $2716			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.2765	c9 01		cmp #$01			cmp 	#$01 						; and we do something if it is = or <> a value.
.2767	f0 21		beq $278a			beq  	CompareTrue
.2769	4c 8d 27	jmp $278d			jmp 	CompareFalse
.276c					CompareNotEquals:
.276c	20 16 27	jsr $2716			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.276f	c9 00		cmp #$00			cmp 	#$00 						; and we do something if it is = or <> a value.
.2771	d0 17		bne $278a			bne  	CompareTrue
.2773	4c 8d 27	jmp $278d			jmp 	CompareFalse
.2776					CompareGreaterEq:
.2776	20 16 27	jsr $2716			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.2779	c9 ff		cmp #$ff			cmp 	#$FF 						; and we do something if it is = or <> a value.
.277b	d0 0d		bne $278a			bne  	CompareTrue
.277d	4c 8d 27	jmp $278d			jmp 	CompareFalse
.2780					CompareLessEq:
.2780	20 16 27	jsr $2716			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.2783	c9 01		cmp #$01			cmp 	#$01 						; and we do something if it is = or <> a value.
.2785	d0 03		bne $278a			bne  	CompareTrue
.2787	4c 8d 27	jmp $278d			jmp 	CompareFalse
.278a					CompareTrue:
.278a	4c fd 2f	jmp $2ffd			jmp 	MInt32True
.278d					CompareFalse:
.278d	4c 01 30	jmp $3001			jmp 	MInt32False

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/convert.asm

.2790					Event_Str:
.2790	20 5a 2a	jsr $2a5a			jsr 	EvaluateNumeric 			; get a number.
.2793	b5 40		lda $40,x			lda 	esType,x 					; is it floating point
.2795	d0 13		bne $27aa			bne 	_ESFloat
.2797	20 ed 27	jsr $27ed			jsr 	ConvertGetBase 				; get base, or default.
.279a	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.279c	85 2a		sta $2a				sta 	temp0
.279e	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.27a0	85 2b		sta $2b				sta 	1+(temp0)
.27a2	b5 49		lda $49,x			lda 	esInt0+1,x 					; get the base
.27a4	20 57 2f	jsr $2f57			jsr 	MInt32ToString 				; convert to string.
.27a7	4c b7 27	jmp $27b7			jmp 	_ESCloneExit 				; clone and exit.
.27aa					_ESFloat:
.27aa	20 74 30	jsr $3074			jsr 	CheckRightParen 			; check closing )
.27ad	20 d4 1d	jsr $1dd4			jsr 	TOSToTemp0 					; string address in temp0, goes here.
.27b0	8a		txa				txa
.27b1	a2 14		ldx #$14		ldx	#20
.27b3	20 00 19	jsr $1900		jsr	floatingpointHandler
.27b6	aa		tax				tax
.27b7					_ESCloneExit:
.27b7	8a		txa				txa
.27b8	a2 02		ldx #$02		ldx	#2
.27ba	20 21 34	jsr $3421		jsr	stringHandler
.27bd	aa		tax				tax
.27be	60		rts				rts
.27bf					UnaryVal:
.27bf	38		sec				sec 								; Carry set to return value
.27c0	b0 01		bcs $27c3			bcs 	ValueMain
.27c2					UnaryIsVal:
.27c2	18		clc				clc									; Carry clear to return legitimacy
.27c3					ValueMain:
.27c3	08		php				php 								; save results (CS is value, CC is validation)
.27c4	20 65 2a	jsr $2a65			jsr 	EvaluateString
.27c7	20 ed 27	jsr $27ed			jsr 	ConvertGetBase 				; get base, if any.
.27ca	98		tya				tya
.27cb	48		pha				pha
.27cc	20 d4 1d	jsr $1dd4			jsr 	TOSToTemp0 					; string address in temp0, goes here.
.27cf	b5 49		lda $49,x			lda 	esInt0+1,x 					; get the base
.27d1	29 7f		and #$7f			and 	#$7F 						; ignore the sign bit.
.27d3	20 6f 2e	jsr $2e6f			jsr 	MInt32FromString 			; convert it back from a string.
.27d6	b0 0c		bcs $27e4			bcs 	_VMSuccess 					; successfully converted.
.27d8	b5 49		lda $49,x			lda 	esInt0+1,x 					; is base the default
.27da	c9 8a		cmp #$8a			cmp 	#$80+10 					; if no, then it is integer only.
.27dc	f0 00		beq $27de			beq 	_VMFailed 	 				; so we failed.
.27de					_VMFailed:
.27de	68		pla				pla
.27df	a8		tay				tay
.27e0	28		plp				plp
.27e1	4c 01 30	jmp $3001			jmp 	MInt32False 				; return 0 whatever.
.27e4					_VMSuccess:
.27e4	68		pla				pla
.27e5	a8		tay				tay
.27e6	28		plp				plp 								; if CS the it was val() so we want the value.
.27e7	b0 03		bcs $27ec			bcs 	_VMExit
.27e9	4c fd 2f	jmp $2ffd			jmp 	MInt32True 					; otherwise return true as successful.
.27ec					_VMExit:
.27ec	60		rts				rts
.27ed					ConvertGetBase:
.27ed	a9 8a		lda #$8a			lda 	#10+$80 					; default base 10 signed.
.27ef	95 49		sta $49,x			sta 	esInt0+1,x
.27f1	b1 28		lda ($28),y			lda 	(codePtr),y 				; check for ,base)
.27f3	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.27f5	d0 0e		bne $2805			bne 	_CGBDone 					; not found, should be )
.27f7	e8		inx				inx 								; next level
.27f8	c8		iny				iny 								; skip comma.
.27f9	20 78 2a	jsr $2a78			jsr 	EvaluateSmallInteger		; evaluate the base.
.27fc	ca		dex				dex
.27fd	c9 02		cmp #$02			cmp 	#2 							; base range is 2..16
.27ff	90 08		bcc $2809			bcc 	_CGBValue 					; (it should work as high as 37)
.2801	c9 11		cmp #$11			cmp 	#17
.2803	b0 04		bcs $2809			bcs 	_CGBValue
.2805					_CGBDone:
.2805	20 74 30	jsr $3074			jsr 	CheckRightParen
.2808	60		rts				rts
.2809					_CGBValue:
.2809	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.280b	20 da 14	jsr $14da		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/dereference.asm

.280e					DereferenceTwo:
.280e	e8		inx				inx
.280f	20 13 28	jsr $2813			jsr 	DereferenceOne
.2812	ca		dex				dex
.2813					DereferenceOne:
.2813	b5 40		lda $40,x			lda 	esType,x
.2815	10 3d		bpl $2854			bpl 	_DRNotReference 			; is it a reference ? if not, we don't need to do anything
.2817	4a		lsr a				lsr 	a 							; do float dereference if bit 0 set.
.2818	b0 3b		bcs $2855			bcs 	_DRFloatDeReference
.281a	98		tya				tya
.281b	48		pha				pha
.281c	b5 48		lda $48,x			lda 	esInt0,x 					; copy address to temp0
.281e	85 2a		sta $2a				sta 	temp0
.2820	b5 50		lda $50,x			lda 	esInt1,x
.2822	85 2b		sta $2b				sta 	temp0+1
.2824	a9 00		lda #$00			lda 	#0 							; clear esInt1..3
.2826	95 50		sta $50,x			sta 	esInt1,x
.2828	95 58		sta $58,x			sta 	esInt2,x
.282a	95 60		sta $60,x			sta 	esInt3,x
.282c	b5 40		lda $40,x			lda 	esType,x 					; get the type byte.
.282e	29 60		and #$60			and 	#$60 						; get string flag ($40) and byte flag ($20)
.2830	0a		asl a				asl 	a 							; now string ($80) byte ($40)
.2831	30 0d		bmi $2840			bmi 	_DeRefString 				; string, 2 bytes only
.2833	d0 11		bne $2846			bne 	_DeRefByte 					; byte 1 byte only
.2835					_DeRefLong:
.2835	a0 03		ldy #$03			ldy 	#3
.2837	b1 2a		lda ($2a),y			lda 	(temp0),y
.2839	95 60		sta $60,x			sta 	esInt3,x
.283b	88		dey				dey
.283c	b1 2a		lda ($2a),y			lda 	(temp0),y
.283e	95 58		sta $58,x			sta 	esInt2,x
.2840					_DeRefString:
.2840	a0 01		ldy #$01			ldy 	#1
.2842	b1 2a		lda ($2a),y			lda 	(temp0),y
.2844	95 50		sta $50,x			sta 	esInt1,x
.2846					_DeRefByte:
.2846	a0 00		ldy #$00			ldy 	#0
.2848	b1 2a		lda ($2a),y			lda 	(temp0),y
.284a	95 48		sta $48,x			sta 	esInt0,x
.284c	b5 40		lda $40,x			lda 	esType,x 					; clear byte and deref bits.
.284e	29 40		and #$40			and 	#$40
.2850	95 40		sta $40,x			sta 	esType,x
.2852	68		pla				pla
.2853	a8		tay				tay
.2854					_DRNotReference
.2854	60		rts				rts
.2855					_DRFloatDereference:
.2855	20 d4 1d	jsr $1dd4			jsr 	TOSToTemp0 					; address to deref in temp0
.2858	8a		txa				txa
.2859	a2 1c		ldx #$1c		ldx	#28
.285b	20 00 19	jsr $1900		jsr	floatingpointHandler
.285e	aa		tax				tax
.285f	a9 01		lda #$01			lda 	#$01 						; type to FP (float)
.2861	95 40		sta $40,x			sta 	esType,x
.2863	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/evaluate.asm

.2864					EvaluateLevel:
.2864	e0 08		cpx #$08			cpx 	#StackSize 					; check stack overflow
.2866	b0 1e		bcs $2886			bcs 	_ELStack
.2868	48		pha				pha 								; save precedence level.
.2869	a9 00		lda #$00			lda 	#0 							; zero the current stack level.
.286b	95 48		sta $48,x			sta 	esInt0,x
.286d	95 50		sta $50,x			sta 	esInt1,x
.286f	95 58		sta $58,x			sta 	esInt2,x
.2871	95 60		sta $60,x			sta 	esInt3,x
.2873	95 40		sta $40,x			sta 	esType,x 					; zero the type (integer value)
.2875	b1 28		lda ($28),y			lda 	(codePtr),y	 				; look at first token/character
.2877	30 26		bmi $289f			bmi 	_ELIsToken 					; if -ve could be string, float, or unary function.
.2879	0a		asl a				asl 	a 							; if 00-3F then will now be PL and it's a variable.
.287a	30 0f		bmi $288b			bmi 	_ELIsConstant 				; 40-7F will be -ve and that's an integer constant.
.287c	8a		txa				txa 								; stack level in X
.287d	a2 00		ldx #$00		ldx	#0
.287f	20 25 3f	jsr $3f25		jsr	variableHandler
.2882	aa		tax				tax
.2883	4c c8 28	jmp $28c8			jmp		_ELHasTerm
.2886					_ELStack:
.2886	a2 22		ldx #$22			ldx 	#ErrorID_NumStack
.2888	20 da 14	jsr $14da		jsr	errorHandler
.288b					_ELIsConstant:
.288b	4a		lsr a				lsr 	a 							; get the value back
.288c	29 3f		and #$3f			and 	#$3F 						; force into range 0-63
.288e	95 48		sta $48,x			sta 	esInt0,x 					; and put in LSB.
.2890					_ELCheckNext:
.2890	c8		iny				iny 								; look at next
.2891	b1 28		lda ($28),y			lda 	(codePtr),y
.2893	49 40		eor #$40			eor 	#$40 						; shift around so 40-7F => 00-3F
.2895	c9 40		cmp #$40			cmp 	#$40 						; out of range ?
.2897	b0 2f		bcs $28c8			bcs 	_ELHasTerm 					; done getting the constant.
.2899	20 61 29	jsr $2961			jsr 	ELShiftByteIn 				; shift byte into position.
.289c	4c 90 28	jmp $2890			jmp 	_ELCheckNext
.289f					_ELIsToken:
.289f	c9 85		cmp #$85			cmp 	#TOK_STR 					; handle strings.
.28a1	f0 0f		beq $28b2			beq 	_ELIsString
.28a3	c9 84		cmp #$84			cmp 	#TOK_FPC 					; if no, then check unary.
.28a5	d0 5f		bne $2906			bne 	_ELCheckUnary
.28a7	8a		txa				txa 								; put X into A
.28a8	c8		iny				iny 								; skip over the float marker
.28a9	a2 18		ldx #$18		ldx	#24
.28ab	20 00 19	jsr $1900		jsr	floatingpointHandler
.28ae	aa		tax				tax 								; restore X
.28af	4c c8 28	jmp $28c8			jmp 	_ELHasTerm
.28b2					_ELIsString:
.28b2	98		tya				tya 								; address of string is codePtr+y+1
.28b3	38		sec				sec
.28b4	65 28		adc $28				adc 	codePtr
.28b6	95 48		sta $48,x			sta 	esInt0,x
.28b8	a5 29		lda $29				lda 	codePtr+1
.28ba	69 00		adc #$00			adc 	#0
.28bc	95 50		sta $50,x			sta 	esInt1,x
.28be	a9 40		lda #$40			lda 	#$40 						; set type to string value
.28c0	95 40		sta $40,x			sta 	esType,x
.28c2	c8		iny				iny 								; skip over string.
.28c3	98		tya				tya
.28c4	38		sec				sec									; +1 for the length itself.
.28c5	71 28		adc ($28),y			adc 	(codePtr),y
.28c7	a8		tay				tay 								; and fall through to term loop code.
.28c8					_ELHasTerm:
.28c8	b1 28		lda ($28),y			lda 	(codePtr),y
.28ca	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; check in the correct range for binary tokens.
.28cc	90 04		bcc $28d2			bcc 	_ELPopExit
.28ce	c9 99		cmp #$99			cmp 	#TOK_STRUCTST
.28d0	90 02		bcc $28d4			bcc 	_ELHasBinaryTerm
.28d2					_ELPopExit:
.28d2	68		pla				pla
.28d3					_ELExit:
.28d3	60		rts				rts
.28d4					_ELHasBinaryTerm:
.28d4	84 32		sty $32				sty 	tempShort 					; save position
.28d6	a8		tay				tay 								; use token as an index and get the precedence.
.28d7	b9 09 29	lda $2909,y			lda 	ELBinaryOperatorInfo-TOK_BINARYST,y
.28da	a4 32		ldy $32				ldy 	tempShort 					; restore Y
.28dc	85 32		sta $32				sta 	tempShort 					; save precedence in memory.
.28de	68		pla				pla 								; restore current level.
.28df	c5 32		cmp $32				cmp 	tempShort 					; if current >= operator then exit
.28e1	b0 f0		bcs $28d3			bcs 	_ELExit
.28e3	48		pha				pha 								; save current level back on the stack.
.28e4	b1 28		lda ($28),y			lda 	(codePtr),y 				; save the binary operator on the stack and skip it.
.28e6	48		pha				pha
.28e7	c8		iny				iny
.28e8	e8		inx				inx 								; calculate the RHS at the operator precedence.
.28e9	a5 32		lda $32				lda 	tempShort
.28eb	20 64 28	jsr $2864			jsr 	EvaluateLevel
.28ee	ca		dex				dex
.28ef	68		pla				pla 								; get the operator back out.
.28f0					_ELExecuteA:
.28f0	86 32		stx $32				stx 	tempShort 					; upload the vectors. Would be nice to use jmp (aaaa,x)
.28f2	0a		asl a				asl 	a 							; but not practical. May use push/rts later.
.28f3	aa		tax				tax
.28f4	bd c9 22	lda $22c9,x			lda 	Group0Vectors,x
.28f7	85 2a		sta $2a				sta 	temp0
.28f9	bd ca 22	lda $22ca,x			lda 	Group0Vectors+1,x
.28fc	85 2b		sta $2b				sta 	temp0+1
.28fe	a6 32		ldx $32				ldx 	tempShort
.2900	20 4d 29	jsr $294d			jsr 	_ELCallTemp0
.2903	4c c8 28	jmp $28c8			jmp 	_ELHasTerm 					; and loop back round.
.2906					_ELCheckUnary:
.2906	c8		iny				iny 								; skip over token.
.2907	c9 90		cmp #$90			cmp 	#TKW_MINUS 					; is it - term
.2909	f0 19		beq $2924			beq 	_ELMinus
.290b	c9 97		cmp #$97			cmp 	#TKW_PLING 					; is it ! or ? term
.290d	f0 2c		beq $293b			beq 	_ELIndirect
.290f	c9 98		cmp #$98			cmp 	#TKW_QMARK
.2911	f0 28		beq $293b			beq 	_ELIndirect
.2913	c9 83		cmp #$83			cmp 	#TOK_SHIFT3 				; is it the unary extension.
.2915	f0 39		beq $2950			beq 	_ELExtension
.2917	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST 				; must be TOK_UNARYST ... TOK_TOKENS
.2919	90 04		bcc $291f			bcc 	_ELUSyntax
.291b	c9 c9		cmp #$c9			cmp 	#TOK_TOKENS
.291d	90 d1		bcc $28f0			bcc 	_ELExecuteA 				; if so do that token.
.291f					_ELUSyntax:
.291f	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.2921	20 da 14	jsr $14da		jsr	errorHandler
.2924					_ELMinus:
.2924	20 39 2a	jsr $2a39			jsr 	EvaluateNumericTerm 		; get a number to negate.
.2927	b5 40		lda $40,x			lda 	esType,x 					; is it integer
.2929	f0 0a		beq $2935			beq 	_ELMinusInteger
.292b	8a		txa				txa
.292c	a2 0c		ldx #$0c		ldx	#12
.292e	20 00 19	jsr $1900		jsr	floatingpointHandler
.2931	aa		tax				tax
.2932	4c c8 28	jmp $28c8			jmp 	_ELHasTerm
.2935					_ELMinusInteger:
.2935	20 bb 2f	jsr $2fbb			jsr 	MInt32Negate 				; do int negate
.2938	4c c8 28	jmp $28c8			jmp 	_ELHasTerm
.293b					_ELIndirect:
.293b	48		pha				pha 								; save what we want (TKW_QMARK TWK_PLING)
.293c	20 42 2a	jsr $2a42			jsr 	EvaluateIntegerTerm 		; integer address
.293f	68		pla				pla
.2940	49 97		eor #$97			eor 	#TKW_PLING 					; now $00 if !
.2942	f0 02		beq $2946			beq 	_ELHaveModifier
.2944	a9 20		lda #$20			lda 	#$20 						; now $00 if !, $20 if ?
.2946					_ELHaveModifier:
.2946	09 80		ora #$80			ora 	#$80						; make it the appropriate reference.
.2948	95 40		sta $40,x			sta 	esType,x 					; $80 for ! $A0 for ?
.294a	4c c8 28	jmp $28c8			jmp 	_ELHasTerm
.294d					_ELCallTemp0:
.294d	6c 2a 00	jmp ($002a)			jmp 	(temp0)
.2950					_ELExtension:
.2950	8a		txa				txa 								; stack pos in A
.2951	20 f1 17	jsr $17f1		jsr	extensionHandler
.2954	aa		tax				tax 								; restore stack
.2955	4c c8 28	jmp $28c8			jmp 	_ELHasTerm
.2958					UnaryParenthesis:
.2958	a9 00		lda #$00			lda 	#0 							; ( is a unary function ....
.295a	20 64 28	jsr $2864			jsr 	EvaluateLevel
.295d	20 74 30	jsr $3074			jsr 	CheckRightParen 			; check for )
.2960	60		rts				rts
.2961					ELShiftByteIn:
.2961	48		pha				pha 								; save bits to shift in.
.2962	b5 60		lda $60,x			lda 	esInt3,x 					; save top most byte
.2964	48		pha				pha
.2965	b5 58		lda $58,x			lda 	esInt2,x 					; shift everything left 8 bits
.2967	95 60		sta $60,x			sta 	esInt3,x
.2969	b5 50		lda $50,x			lda 	esInt1,x
.296b	95 58		sta $58,x			sta 	esInt2,x
.296d	b5 48		lda $48,x			lda 	esInt0,x
.296f	95 50		sta $50,x			sta 	esInt1,x
.2971	a9 00		lda #$00			lda 	#0
.2973	95 48		sta $48,x			sta 	esInt0,x
.2975	68		pla				pla 								; now A:TOS is a 5 byte register, shift right twice.
.2976	29 03		and #$03			and 	#3 							; only want lower 2 bits
.2978	09 04		ora #$04			ora 	#4  						; set bit 2 - when 1 we are done
.297a					_ELShiftLoop:
.297a	4a		lsr a				lsr 	a
.297b	76 60		ror $60,x			ror 	esInt3,x
.297d	76 58		ror $58,x			ror 	esInt2,x
.297f	76 50		ror $50,x			ror 	esInt1,x
.2981	76 48		ror $48,x			ror 	esInt0,x
.2983	c9 01		cmp #$01			cmp 	#1
.2985	d0 f3		bne $297a			bne 	_ELShiftLoop
.2987	68		pla				pla 								; get original 6 bit value and OR in.
.2988	29 3f		and #$3f			and 	#$3F
.298a	15 48		ora $48,x			ora 	esInt0,x
.298c	95 48		sta $48,x			sta 	esInt0,x
.298e	60		rts				rts
.298f					ELBinaryOperatorInfo:

;******  Processing file: main/evaluate/../../generated/binarystructinfo.inc

>298f	01					.byte	$01			; $86 and
>2990	01					.byte	$01			; $87 or
>2991	01					.byte	$01			; $88 xor
>2992	02					.byte	$02			; $89 >=
>2993	02					.byte	$02			; $8a <=
>2994	02					.byte	$02			; $8b >
>2995	02					.byte	$02			; $8c <
>2996	02					.byte	$02			; $8d =
>2997	02					.byte	$02			; $8e <>
>2998	03					.byte	$03			; $8f +
>2999	03					.byte	$03			; $90 -
>299a	04					.byte	$04			; $91 >>
>299b	04					.byte	$04			; $92 <<
>299c	04					.byte	$04			; $93 *
>299d	04					.byte	$04			; $94 /
>299e	04					.byte	$04			; $95 mod
>299f	05					.byte	$05			; $96 ^
>29a0	06					.byte	$06			; $97 !
>29a1	06					.byte	$06			; $98 ?
>29a2	82					.byte	$82			; $99 repeat
>29a3	82					.byte	$82			; $9a while
>29a4	82					.byte	$82			; $9b for
>29a5	82					.byte	$82			; $9c if
>29a6	82					.byte	$82			; $9d defproc
>29a7	80					.byte	$80			; $9e until
>29a8	80					.byte	$80			; $9f wend
>29a9	80					.byte	$80			; $a0 next
>29aa	80					.byte	$80			; $a1 then
>29ab	80					.byte	$80			; $a2 endif
>29ac	80					.byte	$80			; $a3 endproc

;******  Return to file: main/evaluate/evaluate.asm


;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/event.asm

.29ad					EventFunction:
.29ad	20 a3 2a	jsr $2aa3			jsr 	EvaluateReference			; get the variable reference that tracks the event
.29b0	b5 40		lda $40,x			lda 	esType,x
.29b2	c9 80		cmp #$80			cmp 	#$80 						; must be integer reference
.29b4	d0 5b		bne $2a11			bne 	_EFType
.29b6	20 81 30	jsr $3081			jsr 	CheckComma
.29b9	e8		inx				inx
.29ba	20 70 2a	jsr $2a70			jsr 	EvaluateInteger		 		; get the elapsed time between firing.
.29bd	20 74 30	jsr $3074			jsr 	CheckRightParen 			; finish off with the right bracket
.29c0	ca		dex				dex
.29c1	b5 50		lda $50,x			lda 	esInt1,x 					; check max of 32767, we use 16 bit for timers and
.29c3	29 80		and #$80			and 	#$80 						; it doesn't work > 32767
.29c5	15 58		ora $58,x			ora 	esInt2,x
.29c7	15 60		ora $60,x			ora 	esInt3,x
.29c9	d0 41		bne $2a0c			bne 	_EFValue
.29cb	98		tya				tya
.29cc	48		pha				pha
.29cd	8a		txa				txa
.29ce	48		pha				pha
.29cf	a2 1c		ldx #$1c		ldx	#28
.29d1	20 b9 14	jsr $14b9		jsr	deviceHandler
.29d4	84 2d		sty $2d				sty 	temp1+1
.29d6	85 2c		sta $2c				sta 	temp1
.29d8	68		pla				pla
.29d9	aa		tax				tax
.29da	20 d4 1d	jsr $1dd4			jsr 	TOSToTemp0 					; set temp0 to the address of the event variable
.29dd	a0 03		ldy #$03			ldy 	#3							; if -ve
.29df	b1 2a		lda ($2a),y			lda 	(temp0),y
.29e1	30 23		bmi $2a06			bmi 	_EFFail 	 				; straight out with fail, means "on pause".
.29e3	a0 00		ldy #$00			ldy 	#0 							; is the fire time zero ?
.29e5	b1 2a		lda ($2a),y			lda 	(temp0),y
.29e7	c8		iny				iny
.29e8	11 2a		ora ($2a),y			ora 	(temp0),y
.29ea	f0 17		beq $2a03			beq 	_EFInitialise 				; if so, initialise the value but return false.
.29ec	a0 00		ldy #$00			ldy 	#0 							; calculate trigger - timer
.29ee	38		sec				sec
.29ef	b1 2a		lda ($2a),y			lda 	(temp0),y
.29f1	e5 2c		sbc $2c				sbc 	temp1
.29f3	c8		iny				iny
.29f4	b1 2a		lda ($2a),y			lda 	(temp0),y
.29f6	e5 2d		sbc $2d				sbc 	temp1+1
.29f8	10 0c		bpl $2a06			bpl 	_EFFail 					; if trigger >= timer then return False
.29fa	20 16 2a	jsr $2a16			jsr 	SetEventTimer 				; reset the timer for next time.
.29fd	20 fd 2f	jsr $2ffd			jsr	 	MInt32True 					; and treutn true as fired.
.2a00	68		pla				pla
.2a01	a8		tay				tay
.2a02	60		rts				rts
.2a03					_EFInitialise:
.2a03	20 16 2a	jsr $2a16			jsr		SetEventTimer 				; set trigger time to time + elapsed
.2a06					_EFFail:
.2a06	68		pla				pla
.2a07	a8		tay				tay
.2a08	20 01 30	jsr $3001			jsr 	MInt32False
.2a0b	60		rts				rts
.2a0c					_EFValue:
.2a0c	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.2a0e	20 da 14	jsr $14da		jsr	errorHandler
.2a11					_EFType:
.2a11	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.2a13	20 da 14	jsr $14da		jsr	errorHandler
.2a16					SetEventTimer:
.2a16	a0 00		ldy #$00			ldy 	#0
.2a18	18		clc				clc
.2a19	a5 2c		lda $2c				lda 	temp1
.2a1b	75 49		adc $49,x			adc 	esInt0+1,x
.2a1d	91 2a		sta ($2a),y			sta		(temp0),y
.2a1f	c8		iny				iny
.2a20	a5 2d		lda $2d				lda 	temp1+1
.2a22	75 51		adc $51,x			adc 	esInt1+1,x
.2a24	91 2a		sta ($2a),y			sta		(temp0),y
.2a26	88		dey				dey
.2a27	11 2a		ora ($2a),y			ora 	(temp0),y 					; if the result is non zero, exit
.2a29	d0 04		bne $2a2f			bne 	_SETExit 					; zero means initialise.....
.2a2b	a9 01		lda #$01			lda 	#1 							; timer zero won't work, so make it 1, which is
.2a2d	91 2a		sta ($2a),y			sta 	(temp0),y 					; near enough.
.2a2f					_SETExit:
.2a2f	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/support.asm

.2a30					EvaluateTerm:
.2a30	a9 0f		lda #$0f			lda 	#15 						; no binary operator has this high a precedence.
.2a32	20 64 28	jsr $2864			jsr 	EvaluateLevel
.2a35	20 13 28	jsr $2813			jsr 	DereferenceOne
.2a38	60		rts				rts
.2a39					EvaluateNumericTerm:
.2a39	20 30 2a	jsr $2a30			jsr 	EvaluateTerm
.2a3c	b5 40		lda $40,x			lda 	esType,x
.2a3e	0a		asl a				asl 	a 							; see if it's a string.
.2a3f	30 09		bmi $2a4a			bmi 	ENTType
.2a41	60		rts				rts
.2a42					EvaluateIntegerTerm:
.2a42	20 30 2a	jsr $2a30			jsr 	EvaluateTerm
.2a45	b5 40		lda $40,x			lda 	esType,x
.2a47	d0 01		bne $2a4a			bne 	ENTType
.2a49	60		rts				rts
.2a4a					ENTType:
.2a4a	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.2a4c	20 da 14	jsr $14da		jsr	errorHandler
.2a4f					EvaluateRoot:
.2a4f	a2 00		ldx #$00			ldx 	#0
.2a51					Evaluate:
.2a51	a9 00		lda #$00			lda 	#0
.2a53	20 64 28	jsr $2864			jsr 	EvaluateLevel
.2a56	20 13 28	jsr $2813			jsr 	DereferenceOne
.2a59	60		rts				rts
.2a5a					EvaluateNumeric:
.2a5a	20 51 2a	jsr $2a51			jsr 	Evaluate
.2a5d	b5 40		lda $40,x			lda 	esType,x
.2a5f	0a		asl a				asl 	a 							; see if it's a string.
.2a60	30 e8		bmi $2a4a			bmi 	ENTType
.2a62	4a		lsr a				lsr 	a 							; shift float flag into carry.
.2a63	4a		lsr a				lsr 	a
.2a64	60		rts				rts
.2a65					EvaluateString:
.2a65	20 51 2a	jsr $2a51			jsr 	Evaluate
.2a68	b5 40		lda $40,x			lda 	esType,x
.2a6a	0a		asl a				asl 	a 							; see if it's a string.
.2a6b	10 dd		bpl $2a4a			bpl 	ENTType
.2a6d	60		rts				rts
.2a6e					EvaluateRootInteger:
.2a6e	a2 00		ldx #$00			ldx 	#0
.2a70					EvaluateInteger:
.2a70	20 51 2a	jsr $2a51			jsr 	Evaluate
.2a73	b5 40		lda $40,x			lda 	esType,x
.2a75	d0 d3		bne $2a4a			bne 	ENTType
.2a77	60		rts				rts
.2a78					EvaluateSmallInteger:
.2a78	20 70 2a	jsr $2a70			jsr 	EvaluateInteger
.2a7b	b5 50		lda $50,x			lda 	esInt1,x
.2a7d	15 58		ora $58,x			ora 	esInt2,x
.2a7f	15 60		ora $60,x			ora 	esInt3,x
.2a81	d0 03		bne $2a86			bne 	_ESIValue
.2a83	b5 48		lda $48,x			lda 	esInt0,x
.2a85	60		rts				rts
.2a86					_ESIValue:
.2a86	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.2a88	20 da 14	jsr $14da		jsr	errorHandler
.2a8b					LinkEvaluate:
.2a8b	aa		tax				tax
.2a8c	20 51 2a	jsr $2a51			jsr 	Evaluate
.2a8f	8a		txa				txa
.2a90	60		rts				rts
.2a91					LinkEvaluateTerm:
.2a91	aa		tax				tax
.2a92	20 30 2a	jsr $2a30			jsr 	EvaluateTerm
.2a95	8a		txa				txa
.2a96	60		rts				rts
.2a97					LinkEvaluateInteger:
.2a97	aa		tax				tax
.2a98	20 70 2a	jsr $2a70			jsr 	EvaluateInteger
.2a9b	8a		txa				txa
.2a9c	60		rts				rts
.2a9d					LinkEvaluateSmallInt:
.2a9d	aa		tax				tax
.2a9e	20 78 2a	jsr $2a78			jsr 	EvaluateSmallInteger
.2aa1	8a		txa				txa
.2aa2	60		rts				rts
.2aa3					EvaluateReference:
.2aa3	ad a0 29	lda $29a0			lda 	ELBinaryOperatorInfo+TKW_PLING-TOK_BINARYST
.2aa6	38		sec				sec 								; sub 1 to allow a!x b?x to work.
.2aa7	e9 01		sbc #$01			sbc 	#1
.2aa9	20 64 28	jsr $2864			jsr 	EvaluateLevel
.2aac	b5 40		lda $40,x			lda 	esType,x
.2aae	10 01		bpl $2ab1			bpl 	_ERFail
.2ab0	60		rts				rts
.2ab1					_ERFail:
.2ab1	a2 0b		ldx #$0b			ldx 	#ErrorID_NoReference
.2ab3	20 da 14	jsr $14da		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary.asm

.2ab6					UnaryLen:
.2ab6	20 c4 2a	jsr $2ac4			jsr 	ULStart
.2ab9					ULFinish:
.2ab9	b1 2a		lda ($2a),y			lda 	(temp0),y 					; get length prefix
.2abb	a4 32		ldy $32				ldy 	tempShort 					; get Y back
.2abd	20 10 30	jsr $3010			jsr 	MInt32Set8Bit 				; write it out.
.2ac0	20 74 30	jsr $3074			jsr 	CheckRightParen
.2ac3	60		rts				rts
.2ac4	20 65 2a	jsr $2a65	ULStart:jsr 	EvaluateString
.2ac7	b5 48		lda $48,x			lda 	esInt0,x 					; copy address of string to temp0
.2ac9	85 2a		sta $2a				sta 	temp0
.2acb	b5 50		lda $50,x			lda 	esInt1,x
.2acd	85 2b		sta $2b				sta 	temp0+1
.2acf	84 32		sty $32				sty 	tempShort 					; get length
.2ad1	a0 00		ldy #$00			ldy 	#0
.2ad3	60		rts				rts
.2ad4					UnaryAsc:
.2ad4	20 c4 2a	jsr $2ac4			jsr 	ULStart 					; same as LEN() get string, save Y, point to length.
.2ad7	b1 2a		lda ($2a),y			lda 	(temp0),y 					; read length
.2ad9	c8		iny				iny 		 						; point to first character, we can do LEN code after that
.2ada	c9 00		cmp #$00			cmp 	#0
.2adc	d0 db		bne $2ab9			bne 	ULFinish 					; if length = 0 then error : asc("") -> error.
.2ade	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.2ae0	20 da 14	jsr $14da		jsr	errorHandler
.2ae3					UnaryAbs:
.2ae3	20 5a 2a	jsr $2a5a			jsr 	EvaluateNumeric 			; some numeric value
.2ae6	b0 07		bcs $2aef			bcs 	_UAFloat 					; CS then float, so use that function
.2ae8	20 b6 2f	jsr $2fb6			jsr 	MInt32Absolute 				; int version
.2aeb	20 74 30	jsr $3074			jsr 	CheckRightParen
.2aee	60		rts				rts
.2aef					_UAFloat:
.2aef	8a		txa				txa 								; float version
.2af0	a2 00		ldx #$00		ldx	#0
.2af2	20 00 19	jsr $1900		jsr	floatingpointHandler
.2af5	aa		tax				tax
.2af6	20 74 30	jsr $3074			jsr 	CheckRightParen
.2af9	60		rts				rts
.2afa					UnarySgn:
.2afa	20 5a 2a	jsr $2a5a			jsr 	EvaluateNumeric 			; same as above but sign of value
.2afd	b0 07		bcs $2b06			bcs 	_USFloat
.2aff	20 ee 2f	jsr $2fee			jsr 	MInt32Sign
.2b02	20 74 30	jsr $3074			jsr 	CheckRightParen
.2b05	60		rts				rts
.2b06					_USFloat:
.2b06	8a		txa				txa
.2b07	a2 0e		ldx #$0e		ldx	#14
.2b09	20 00 19	jsr $1900		jsr	floatingpointHandler
.2b0c	aa		tax				tax
.2b0d	20 74 30	jsr $3074			jsr 	CheckRightParen
.2b10	60		rts				rts
.2b11					UnaryPeek:
.2b11	20 3d 2b	jsr $2b3d			jsr 	PDLCode 					; each has common setup code put reads 1,2 or 4 bytes
.2b14	4c 31 2b	jmp $2b31			jmp 	PDLByte0
.2b17					UnaryDeek:
.2b17	20 3d 2b	jsr $2b3d			jsr 	PDLCode
.2b1a	4c 2b 2b	jmp $2b2b			jmp 	PDLByte1
.2b1d					UnaryLeek:
.2b1d	20 3d 2b	jsr $2b3d			jsr 	PDLCode
.2b20	a0 03		ldy #$03			ldy 	#3							; read 3-2
.2b22	b1 2a		lda ($2a),y			lda 	(temp0),y
.2b24	95 60		sta $60,x			sta 	esInt3,x
.2b26	88		dey				dey
.2b27	b1 2a		lda ($2a),y			lda 	(temp0),y
.2b29	95 58		sta $58,x			sta 	esInt2,x
.2b2b					PDLByte1:
.2b2b	a0 01		ldy #$01			ldy 	#1
.2b2d	b1 2a		lda ($2a),y			lda 	(temp0),y
.2b2f	95 50		sta $50,x			sta 	esInt1,x
.2b31					PDLByte0:
.2b31	a0 00		ldy #$00			ldy 	#0
.2b33	b1 2a		lda ($2a),y			lda 	(temp0),y
.2b35	95 48		sta $48,x			sta 	esInt0,x
.2b37	a4 32		ldy $32				ldy 	tempShort 					; restore Y
.2b39	20 74 30	jsr $3074			jsr 	CheckRightParen 			; check right and return
.2b3c	60		rts				rts
.2b3d					PDLCode:
.2b3d	20 70 2a	jsr $2a70			jsr 	EvaluateInteger 			; some address
.2b40	b5 48		lda $48,x			lda 	esInt0,x 					; copy address of string to temp0
.2b42	85 2a		sta $2a				sta 	temp0
.2b44	b5 50		lda $50,x			lda 	esInt1,x
.2b46	85 2b		sta $2b				sta 	temp0+1
.2b48	a9 00		lda #$00			lda 	#0 							; zero upper 3 bytes of result, type okay.
.2b4a	95 50		sta $50,x			sta 	esInt1,x 					; PEEK needs upper 3 cleared
.2b4c	95 58		sta $58,x			sta 	esInt2,x
.2b4e	95 60		sta $60,x			sta 	esInt3,x
.2b50	84 32		sty $32				sty 	tempShort 					; save Y
.2b52	60		rts				rts
.2b53					Unary_Random:
.2b53	20 31 30	jsr $3031			jsr 	MInt32Random 				; generate random number.
.2b56	b1 28		lda ($28),y			lda 	(codePtr),y 				; check followed by )
.2b58	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.2b5a	f0 08		beq $2b64			beq 	_URExit
.2b5c	e8		inx				inx 								; load range 0..r-1 into +1
.2b5d	20 70 2a	jsr $2a70			jsr 	EvaluateInteger
.2b60	ca		dex				dex
.2b61	20 54 2e	jsr $2e54			jsr 	MInt32Modulus 				; calculate random % modulus
.2b64					_URExit:
.2b64	20 74 30	jsr $3074			jsr 	CheckRightParen 			; check right and return
.2b67	60		rts				rts
.2b68					Unary_Min:
.2b68	a9 01		lda #$01			lda 	#1 							; c1 cmp c2 needs to be > e.g. c1 > c2
.2b6a	d0 02		bne $2b6e			bne 	UnaryMBody
.2b6c					Unary_Max:
.2b6c	a9 ff		lda #$ff			lda 	#$FF 						; c1 cmp c2 needs to be < e.g. c1 < c2
.2b6e					UnaryMBody:
.2b6e	48		pha				pha 								; save comparator on stack, shows min or max
.2b6f	20 51 2a	jsr $2a51			jsr 	Evaluate 					; get the first thing to check
.2b72					_UnaryMLoop:
.2b72	b1 28		lda ($28),y			lda 	(codePtr),y 				; found ), indicates end.
.2b74	c8		iny				iny
.2b75	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.2b77	f0 09		beq $2b82			beq 	_UnaryMExit
.2b79	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; found , indicates more.
.2b7b	f0 07		beq $2b84			beq 	_UnaryMCompare
.2b7d	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.2b7f	20 da 14	jsr $14da		jsr	errorHandler
.2b82					_UnaryMExit:
.2b82	68		pla				pla 								; done so throw comparator and return.
.2b83	60		rts				rts
.2b84					_UnaryMCompare:
.2b84	e8		inx				inx 								; get the 2nd thing to evaluate
.2b85	20 51 2a	jsr $2a51			jsr 	Evaluate
.2b88	ca		dex				dex
.2b89	20 16 27	jsr $2716			jsr 	PerformComparison 			; this is part of evaluate/compare.asm
.2b8c	85 32		sta $32				sta 	tempShort 					; save result
.2b8e	68		pla				pla 								; get what we need
.2b8f	48		pha				pha
.2b90	c5 32		cmp $32				cmp 	tempShort 					; did we get it
.2b92	d0 de		bne $2b72			bne 	_UnaryMLoop 				; no, try another value.
.2b94	20 01 30	jsr $3001			jsr 	MInt32False 				; promote 2nd to 1st.
.2b97	20 e5 2e	jsr $2ee5			jsr 	MInt32Add
.2b9a	4c 72 2b	jmp $2b72			jmp 	_UnaryMLoop
.2b9d					Unary_Page:
.2b9d	20 01 30	jsr $3001			jsr 	MInt32False 				; zero
.2ba0	ad c8 0a	lda $0ac8			lda 	basePage 					; copy base page address in.
.2ba3	95 48		sta $48,x			sta 	esInt0,x
.2ba5	ad c9 0a	lda $0ac9			lda 	basePage+1
.2ba8	95 50		sta $50,x			sta 	esInt1,x
.2baa	60		rts				rts
.2bab					UnaryReference:
.2bab	a9 0f		lda #$0f			lda 	#15
.2bad	20 64 28	jsr $2864			jsr 	EvaluateLevel 				; evaluate term and don't deference.
.2bb0	b5 40		lda $40,x			lda 	esType,x 					; check it's a reference.
.2bb2	10 05		bpl $2bb9			bpl 	UType
.2bb4	a9 00		lda #$00			lda 	#0 							; make it an integer
.2bb6	95 40		sta $40,x			sta 	esType,x
.2bb8	60		rts				rts
.2bb9					UType:
.2bb9	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.2bbb	20 da 14	jsr $14da		jsr	errorHandler
.2bbe					UnaryHexMarker:
.2bbe	4c 42 2a	jmp $2a42			jmp 	EvaluateIntegerTerm
.2bc1					UnaryComplement:
.2bc1	20 42 2a	jsr $2a42			jsr 	EvaluateIntegerTerm
.2bc4	20 d5 2f	jsr $2fd5			jsr 	MInt32Not
.2bc7	60		rts				rts
.2bc8					UnaryIntToFloat:
.2bc8	20 5a 2a	jsr $2a5a			jsr 	EvaluateNumeric				; some number
.2bcb	b5 40		lda $40,x			lda 	esType,x 					; if float already, exit
.2bcd	d0 0b		bne $2bda			bne 	_UIFExit
.2bcf	8a		txa				txa 								; convert and set type
.2bd0	a2 1a		ldx #$1a		ldx	#26
.2bd2	20 00 19	jsr $1900		jsr	floatingpointHandler
.2bd5	aa		tax				tax
.2bd6	a9 01		lda #$01			lda 	#1
.2bd8	95 40		sta $40,x			sta 	esType,x
.2bda					_UIFExit:
.2bda	60		rts				rts
.2bdb					UnaryFloatToInt:
.2bdb	20 5a 2a	jsr $2a5a			jsr 	EvaluateNumeric 			; the number
.2bde	b5 40		lda $40,x			lda 	esType,x 					; if int already exit
.2be0	f0 0b		beq $2bed			beq 	_UFIExit
.2be2	8a		txa				txa 								; convert to int
.2be3	a2 12		ldx #$12		ldx	#18
.2be5	20 00 19	jsr $1900		jsr	floatingpointHandler
.2be8	aa		tax				tax
.2be9	a9 00		lda #$00			lda 	#0 							; set type
.2beb	95 40		sta $40,x			sta 	esType,x
.2bed					_UFIExit:
.2bed	60		rts				rts
.2bee					UnaryAlloc:
.2bee	e8		inx				inx 								; evaluate memory required
.2bef	20 70 2a	jsr $2a70			jsr 	EvaluateInteger
.2bf2	20 74 30	jsr $3074			jsr 	CheckRightParen
.2bf5	ca		dex				dex
.2bf6	b5 59		lda $59,x			lda 	esInt2+1,x 					; check at least in 64k range.
.2bf8	15 61		ora $61,x			ora 	esInt3+1,x
.2bfa	d0 1d		bne $2c19			bne 	_UABadValue
.2bfc	20 01 30	jsr $3001			jsr 	MInt32False					; zero return.
.2bff	a5 36		lda $36				lda 	lowMemory+1 				; copy low memory in
.2c01	95 50		sta $50,x			sta 	esInt1,x
.2c03	a5 35		lda $35				lda 	lowMemory
.2c05	95 48		sta $48,x			sta 	esInt0,x
.2c07	18		clc				clc 								; add alloc required.
.2c08	75 49		adc $49,x			adc 	esInt0+1,x
.2c0a	85 35		sta $35				sta 	lowMemory
.2c0c	a5 36		lda $36				lda 	lowMemory+1
.2c0e	75 51		adc $51,x			adc 	esInt1+1,x
.2c10	85 36		sta $36				sta 	lowMemory+1
.2c12	b0 05		bcs $2c19			bcs		_UABadValue 				; overflow definitely bad.
.2c14	c5 34		cmp $34				cmp 	highMemory+1
.2c16	b0 01		bcs $2c19			bcs 	_UABadValue 				; out of memory bad.
.2c18	60		rts				rts
.2c19					_UABadValue:
.2c19	a2 21		ldx #$21			ldx 	#ErrorID_Memory
.2c1b	20 da 14	jsr $14da		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary2.asm

.2c1e					UnaryTimer:
.2c1e	20 74 30	jsr $3074			jsr 	CheckRightParen 			; no parameters
.2c21	98		tya				tya
.2c22	48		pha				pha
.2c23	20 28 30	jsr $3028			jsr 	MInt32Zero 					; zero result
.2c26	86 2a		stx $2a				stx 	temp0 						; returning in YA so can't use .pshx
.2c28	a2 1c		ldx #$1c		ldx	#28
.2c2a	20 b9 14	jsr $14b9		jsr	deviceHandler
.2c2d	a6 2a		ldx $2a				ldx 	temp0						; restore X and update 16 bit result
.2c2f	95 48		sta $48,x			sta 	esInt0,x
.2c31	98		tya				tya
.2c32	95 50		sta $50,x			sta 	esInt1,x
.2c34	68		pla				pla
.2c35	a8		tay				tay
.2c36	60		rts				rts
.2c37					UnaryInkey:
.2c37	20 74 30	jsr $3074			jsr 	CheckRightParen
.2c3a	86 2a		stx $2a				stx 	temp0
.2c3c	a2 0a		ldx #$0a		ldx	#10
.2c3e	20 b9 14	jsr $14b9		jsr	deviceHandler
.2c41	a6 2a		ldx $2a				ldx 	temp0
.2c43	20 10 30	jsr $3010			jsr 	MInt32Set8Bit
.2c46	60		rts				rts
.2c47					UnaryGet:
.2c47	20 74 30	jsr $3074			jsr 	CheckRightParen
.2c4a	86 2a		stx $2a				stx 	temp0
.2c4c					_UGLoop:
.2c4c	a2 00		ldx #$00		ldx	#0
.2c4e	20 b9 14	jsr $14b9		jsr	deviceHandler
.2c51	a2 0a		ldx #$0a		ldx	#10
.2c53	20 b9 14	jsr $14b9		jsr	deviceHandler
.2c56	c9 00		cmp #$00			cmp 	#0
.2c58	f0 f2		beq $2c4c			beq 	_UGLoop
.2c5a	a6 2a		ldx $2a				ldx 	temp0
.2c5c	20 10 30	jsr $3010			jsr 	MInt32Set8Bit
.2c5f	60		rts				rts
.2c60					UnaryGetString:
.2c60	20 47 2c	jsr $2c47			jsr 	UnaryGet
.2c63					UGSDoChr:
.2c63	4c b4 2c	jmp $2cb4			jmp 	ChrCode
.2c66					UnaryInkeyString:
.2c66	20 37 2c	jsr $2c37			jsr 	UnaryInkey
.2c69	b5 48		lda $48,x			lda 	esInt0,x
.2c6b	d0 f6		bne $2c63			bne 	UGSDoChr
.2c6d	8a		txa				txa
.2c6e	a2 06		ldx #$06		ldx	#6
.2c70	20 21 34	jsr $3421		jsr	stringHandler
.2c73	aa		tax				tax
.2c74	60		rts				rts
.2c75					UnarySys:
.2c75	20 70 2a	jsr $2a70			jsr 	EvaluateInteger 				; get the address
.2c78	20 74 30	jsr $3074			jsr 	CheckRightParen
.2c7b	20 d4 1d	jsr $1dd4			jsr 	TOSToTemp0 						; copy call address to temp0
.2c7e	8a		txa				txa
.2c7f	48		pha				pha
.2c80	98		tya				tya
.2c81	48		pha				pha
.2c82	ad 00 0a	lda $0a00			lda 	("A"-"A")*4+SingleLetterVar 	; load AXY
.2c85	ae 5c 0a	ldx $0a5c			ldx 	("X"-"A")*4+SingleLetterVar
.2c88	ac 60 0a	ldy $0a60			ldy 	("Y"-"A")*4+SingleLetterVar
.2c8b	20 9a 2c	jsr $2c9a			jsr 	_CallTemp0
.2c8e	85 32		sta $32				sta 	tempShort 						; restore YX
.2c90	68		pla				pla
.2c91	a8		tay				tay
.2c92	68		pla				pla
.2c93	aa		tax				tax
.2c94	a5 32		lda $32				lda 	tempShort
.2c96	20 10 30	jsr $3010			jsr 	MInt32Set8Bit 					; return result.
.2c99	60		rts				rts
.2c9a					_CallTemp0:
.2c9a	6c 2a 00	jmp ($002a)			jmp 	(temp0)
.2c9d					UnaryMem:
.2c9d	20 01 30	jsr $3001			jsr 	MInt32False 					; set to false (e.g. 0)
.2ca0	38		sec				sec
.2ca1	a5 33		lda $33				lda 	highMemory 						; calculate value
.2ca3	e5 35		sbc $35				sbc 	lowMemory
.2ca5	95 48		sta $48,x			sta 	esInt0,x
.2ca7	a5 34		lda $34				lda 	highMemory+1
.2ca9	e5 36		sbc $36				sbc 	lowMemory+1
.2cab	95 50		sta $50,x			sta 	esInt1,x
.2cad	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unarystr.asm

.2cae					ExecChr:
.2cae	20 78 2a	jsr $2a78			jsr 	EvaluateSmallInteger		; character number 0-255
.2cb1	20 74 30	jsr $3074			jsr 	CheckRightParen				; right bracket
.2cb4					ChrCode:
.2cb4	98		tya				tya
.2cb5	48		pha				pha
.2cb6	8a		txa				txa 								; A = stack
.2cb7	b4 48		ldy $48,x			ldy 	esInt0,x					; Y = character
.2cb9	a2 00		ldx #$00		ldx	#0
.2cbb	20 21 34	jsr $3421		jsr	stringHandler
.2cbe	aa		tax				tax 								; X = stack
.2cbf	68		pla				pla
.2cc0	a8		tay				tay
.2cc1	60		rts				rts
.2cc2					ExecLower:
.2cc2	38		sec				sec 								; set carry is lower
.2cc3	b0 01		bcs $2cc6			bcs 	ExecUpperLower
.2cc5					ExecUpper:
.2cc5	18		clc				clc 								; clear carry is upper
.2cc6					ExecUpperLower:
.2cc6	08		php				php 								; save carry
.2cc7	20 65 2a	jsr $2a65			jsr 	EvaluateString 				; string to stack,X
.2cca	20 74 30	jsr $3074			jsr 	CheckRightParen 			; check closing right bracket.
.2ccd	28		plp				plp 								; restore carry, save Y
.2cce	98		tya				tya
.2ccf	48		pha				pha
.2cd0	a9 00		lda #$00			lda 	#0 							; A zero if upper, 1 if lower.
.2cd2	2a		rol a				rol 	a
.2cd3	a8		tay				tay 								; now in Y
.2cd4	8a		txa				txa 								; do the substring and exit.
.2cd5	a2 0a		ldx #$0a		ldx	#10
.2cd7	20 21 34	jsr $3421		jsr	stringHandler
.2cda	aa		tax				tax
.2cdb	68		pla				pla
.2cdc	a8		tay				tay
.2cdd	60		rts				rts
.2cde					ExecLeft:
.2cde	20 65 2a	jsr $2a65			jsr 	EvaluateString 				; string to stack,X
.2ce1	20 81 30	jsr $3081			jsr 	CheckComma
.2ce4	e8		inx				inx
.2ce5	a9 01		lda #$01			lda 	#1 							; 1 for 2nd parameter.
.2ce7	20 10 30	jsr $3010			jsr 	MInt32Set8Bit
.2cea	e8		inx				inx
.2ceb	20 78 2a	jsr $2a78			jsr 	EvaluateSmallInteger 		; smallint 3rd parameter
.2cee					ExecSubstring:
.2cee	ca		dex				dex 								; fix up X
.2cef	ca		dex				dex
.2cf0	20 74 30	jsr $3074			jsr 	CheckRightParen 			; check closing right bracket.
.2cf3	8a		txa				txa 								; do the substring and exit.
.2cf4	a2 0c		ldx #$0c		ldx	#12
.2cf6	20 21 34	jsr $3421		jsr	stringHandler
.2cf9	aa		tax				tax
.2cfa	60		rts				rts
.2cfb					ExecMid:
.2cfb	20 65 2a	jsr $2a65			jsr 	EvaluateString 				; string to stack,X
.2cfe	20 81 30	jsr $3081			jsr 	CheckComma
.2d01	e8		inx				inx
.2d02	20 78 2a	jsr $2a78			jsr 	EvaluateSmallInteger 		; smallint 2nd parameter
.2d05	c9 00		cmp #$00			cmp 	#0
.2d07	f0 15		beq $2d1e			beq 	_EMValue
.2d09	e8		inx				inx
.2d0a	a9 ff		lda #$ff			lda 	#255 						; 255 default for 3nd parameter - this is optional.
.2d0c	20 10 30	jsr $3010			jsr 	MInt32Set8Bit
.2d0f	b1 28		lda ($28),y			lda 	(codePtr),y 				; is there a ) next
.2d11	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN 				; if so, just MID$(a$,2)
.2d13	f0 d9		beq $2cee			beq 	ExecSubString
.2d15	20 81 30	jsr $3081			jsr 	CheckComma
.2d18	20 78 2a	jsr $2a78			jsr 	EvaluateSmallInteger 		; smallint 2nd parameter
.2d1b	4c ee 2c	jmp $2cee			jmp 	ExecSubString
.2d1e					_EMValue:
.2d1e	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.2d20	20 da 14	jsr $14da		jsr	errorHandler
.2d23					ExecRight:
.2d23	20 65 2a	jsr $2a65			jsr 	EvaluateString 				; string to stack,X
.2d26	20 81 30	jsr $3081			jsr 	CheckComma
.2d29	e8		inx				inx
.2d2a	20 78 2a	jsr $2a78			jsr 	EvaluateSmallInteger 		; smallint 2nd parameter.
.2d2d	ca		dex				dex
.2d2e	98		tya				tya
.2d2f	48		pha				pha
.2d30	b5 48		lda $48,x			lda 	esInt0,x 					; copy address of string to temp0
.2d32	85 2a		sta $2a				sta 	temp0
.2d34	b5 50		lda $50,x			lda 	esInt1,x
.2d36	85 2b		sta $2b				sta 	temp0+1
.2d38	a0 00		ldy #$00			ldy 	#0 							; point to length
.2d3a	b1 2a		lda ($2a),y			lda 	(temp0),y 					; get the length.
.2d3c	18		clc				clc 								; add 1.
.2d3d	69 01		adc #$01			adc 	#1
.2d3f	38		sec				sec
.2d40	f5 49		sbc $49,x			sbc 	esInt0+1,x  				; subtract right count.
.2d42	f0 02		beq $2d46			beq		_ERMake1 					; if zero, make it 1.
.2d44	b0 02		bcs $2d48			bcs		_EROkay
.2d46					_ERMake1:
.2d46	a9 01		lda #$01			lda 	#1 							; start position.
.2d48					_EROkay:
.2d48	e8		inx				inx 								; set start pos.
.2d49	95 48		sta $48,x			sta 	esInt0,x
.2d4b	e8		inx				inx
.2d4c	a9 ff		lda #$ff			lda 	#255 						; 255 default for 3nd parameter.
.2d4e	20 10 30	jsr $3010			jsr 	MInt32Set8Bit
.2d51	68		pla				pla
.2d52	a8		tay				tay
.2d53	4c ee 2c	jmp $2cee			jmp 	ExecSubString 				; do the substring code.

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32binary.asm

.2d56					MInt32And:
.2d56	b5 48		lda $48,x			lda 	esInt0,x
.2d58	35 49		and $49,x			and 	esInt0+1,x
.2d5a	95 48		sta $48,x			sta 	esInt0,x
.2d5c	b5 50		lda $50,x			lda 	esInt1,x
.2d5e	35 51		and $51,x			and 	esInt1+1,x
.2d60	95 50		sta $50,x			sta 	esInt1,x
.2d62	b5 58		lda $58,x			lda 	esInt2,x
.2d64	35 59		and $59,x			and 	esInt2+1,x
.2d66	95 58		sta $58,x			sta 	esInt2,x
.2d68	b5 60		lda $60,x			lda 	esInt3,x
.2d6a	35 61		and $61,x			and 	esInt3+1,x
.2d6c	95 60		sta $60,x			sta 	esInt3,x
.2d6e	60		rts				rts
.2d6f					MInt32Or:
.2d6f	b5 48		lda $48,x			lda 	esInt0,x
.2d71	15 49		ora $49,x			ora 	esInt0+1,x
.2d73	95 48		sta $48,x			sta 	esInt0,x
.2d75	b5 50		lda $50,x			lda 	esInt1,x
.2d77	15 51		ora $51,x			ora 	esInt1+1,x
.2d79	95 50		sta $50,x			sta 	esInt1,x
.2d7b	b5 58		lda $58,x			lda 	esInt2,x
.2d7d	15 59		ora $59,x			ora 	esInt2+1,x
.2d7f	95 58		sta $58,x			sta 	esInt2,x
.2d81	b5 60		lda $60,x			lda 	esInt3,x
.2d83	15 61		ora $61,x			ora 	esInt3+1,x
.2d85	95 60		sta $60,x			sta 	esInt3,x
.2d87	60		rts				rts
.2d88					MInt32Xor:
.2d88	b5 48		lda $48,x			lda 	esInt0,x
.2d8a	55 49		eor $49,x			eor 	esInt0+1,x
.2d8c	95 48		sta $48,x			sta 	esInt0,x
.2d8e	b5 50		lda $50,x			lda 	esInt1,x
.2d90	55 51		eor $51,x			eor 	esInt1+1,x
.2d92	95 50		sta $50,x			sta 	esInt1,x
.2d94	b5 58		lda $58,x			lda 	esInt2,x
.2d96	55 59		eor $59,x			eor 	esInt2+1,x
.2d98	95 58		sta $58,x			sta 	esInt2,x
.2d9a	b5 60		lda $60,x			lda 	esInt3,x
.2d9c	55 61		eor $61,x			eor 	esInt3+1,x
.2d9e	95 60		sta $60,x			sta 	esInt3,x
.2da0	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32compare.asm

.2da1					MInt32Compare:
.2da1	b5 48		lda $48,x			lda 	esInt0,x 					; equality check first.
.2da3	d5 49		cmp $49,x			cmp 	esInt0+1,x
.2da5	d0 13		bne $2dba			bne 	MInt32Compare2
.2da7	b5 50		lda $50,x			lda 	esInt1,x
.2da9	d5 51		cmp $51,x			cmp 	esInt1+1,x
.2dab	d0 0d		bne $2dba			bne 	MInt32Compare2
.2dad	b5 58		lda $58,x			lda 	esInt2,x
.2daf	d5 59		cmp $59,x			cmp 	esInt2+1,x
.2db1	d0 07		bne $2dba			bne 	MInt32Compare2
.2db3	b5 60		lda $60,x			lda 	esInt3,x
.2db5	55 61		eor $61,x			eor 	esInt3+1,x 					; EOR will return 0 if the same.
.2db7	d0 01		bne $2dba			bne 	MInt32Compare2
.2db9	60		rts				rts
.2dba					MInt32Compare2:
.2dba	b5 48		lda $48,x			lda		esInt0,x 					; unsigned 32 bit comparison.
.2dbc	d5 49		cmp $49,x			cmp 	esInt0+1,x
.2dbe	b5 50		lda $50,x			lda		esInt1,x
.2dc0	f5 51		sbc $51,x			sbc 	esInt1+1,x
.2dc2	b5 58		lda $58,x			lda		esInt2,x
.2dc4	f5 59		sbc $59,x			sbc 	esInt2+1,x
.2dc6	b5 60		lda $60,x			lda		esInt3,x
.2dc8	f5 61		sbc $61,x			sbc 	esInt3+1,x
.2dca	50 02		bvc $2dce			bvc 	_I32LNoOverflow 			; make it signed 32 bit comparison
.2dcc	49 80		eor #$80			eor 	#$80
.2dce					_I32LNoOverflow
.2dce	30 03		bmi $2dd3			bmi 	MInt32CLess					; if -ve then return $FF
.2dd0	a9 01		lda #$01			lda 	#$01						; else return $01
.2dd2	60		rts				rts
.2dd3					MInt32CLess:
.2dd3	a9 ff		lda #$ff			lda 	#$FF
.2dd5	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32divide.asm

.2dd6					MInt32SDivide:
.2dd6	98		tya				tya  								; save Y, which is the count of negations
.2dd7	48		pha				pha
.2dd8	a0 00		ldy #$00			ldy 	#0 							; zero count
.2dda	20 f2 2d	jsr $2df2			jsr 	_MInt32SRemSign 			; unsign TOS
.2ddd	e8		inx				inx 								; unsign TOS+1
.2dde	20 f2 2d	jsr $2df2			jsr 	_MInt32SRemSign
.2de1	ca		dex				dex
.2de2	98		tya				tya 								; save sign count on stack
.2de3	48		pha				pha
.2de4	20 fb 2d	jsr $2dfb			jsr 	MInt32UDivide 				; unsigned division
.2de7	68		pla				pla 								; get sign count back
.2de8	29 01		and #$01			and 	#1 							; if it is odd, then negate result
.2dea	f0 03		beq $2def			beq 	_I32SNoNeg
.2dec	20 bb 2f	jsr $2fbb			jsr 	MInt32Negate
.2def					_I32SNoNeg:
.2def	68		pla				pla 								; restoe Y and exit
.2df0	a8		tay				tay
.2df1	60		rts				rts
.2df2					_MInt32SRemSign:
.2df2	b5 60		lda $60,x			lda 	esInt3,x 					; is it -ve
.2df4	10 04		bpl $2dfa			bpl 	_MInt32SRSExit
.2df6	c8		iny				iny 								; increment the sign count
.2df7	20 bb 2f	jsr $2fbb			jsr 	MInt32Negate 				; negate the value.
.2dfa					_MInt32SRSExit:
.2dfa	60		rts				rts
.2dfb					MInt32UDivide:
.2dfb	b5 49		lda $49,x			lda 	esInt0+1,x 					; check for division by zero
.2dfd	15 51		ora $51,x			ora 	esInt1+1,x
.2dff	15 52		ora $52,x			ora 	esInt1+2,x
.2e01	15 53		ora $53,x			ora 	esInt1+3,x
.2e03	f0 4a		beq $2e4f			beq 	_MInt32DZero
.2e05	e8		inx				inx 								; clear A
.2e06	e8		inx				inx
.2e07	20 01 30	jsr $3001			jsr 	MInt32False
.2e0a	ca		dex				dex
.2e0b	ca		dex				dex
.2e0c	98		tya				tya 								; save Y on the stack
.2e0d	48		pha				pha
.2e0e	a0 20		ldy #$20			ldy 	#32 						; number of division passes
.2e10					_MInt32UDLoop:
.2e10	16 48		asl $48,x			asl 	esInt0,x					; shift QA left. First Q
.2e12	36 50		rol $50,x			rol 	esInt1,x
.2e14	36 58		rol $58,x			rol 	esInt2,x
.2e16	36 60		rol $60,x			rol 	esInt3,x
.2e18	36 4a		rol $4a,x			rol 	esInt0+2,x 					; then A.
.2e1a	36 52		rol $52,x			rol 	esInt1+2,x
.2e1c	36 5a		rol $5a,x			rol 	esInt2+2,x
.2e1e	36 62		rol $62,x			rol 	esInt3+2,x
.2e20	38		sec				sec 								; calculate A-M saving result on the stack
.2e21	b5 4a		lda $4a,x			lda 	esInt0+2,x
.2e23	f5 49		sbc $49,x			sbc 	esInt0+1,x
.2e25	48		pha				pha
.2e26	b5 52		lda $52,x			lda 	esInt1+2,x
.2e28	f5 51		sbc $51,x			sbc 	esInt1+1,x
.2e2a	48		pha				pha
.2e2b	b5 5a		lda $5a,x			lda 	esInt2+2,x
.2e2d	f5 59		sbc $59,x			sbc 	esInt2+1,x
.2e2f	48		pha				pha
.2e30	b5 62		lda $62,x			lda 	esInt3+2,x
.2e32	f5 61		sbc $61,x			sbc 	esInt3+1,x
.2e34	90 10		bcc $2e46			bcc		_MInt32NoSubtract 			; if A < M (e.g. carry clear) then reject this.
.2e36	95 62		sta $62,x			sta 	esInt3+2,x 					; write result back to A
.2e38	68		pla				pla
.2e39	95 5a		sta $5a,x			sta 	esInt2+2,x
.2e3b	68		pla				pla
.2e3c	95 52		sta $52,x			sta 	esInt1+2,x
.2e3e	68		pla				pla
.2e3f	95 4a		sta $4a,x			sta 	esInt0+2,x
.2e41	f6 48		inc $48,x			inc 	esInt0,x 					; sets bit 0 of Q - it was shifted left previously.
.2e43	4c 49 2e	jmp $2e49			jmp 	_MInt32Next 					; do the next iteration
.2e46					_MInt32NoSubtract:
.2e46	68		pla				pla
.2e47	68		pla				pla
.2e48	68		pla				pla
.2e49					_MInt32Next:
.2e49	88		dey				dey 								; do this 32 times.
.2e4a	d0 c4		bne $2e10			bne 	_MInt32UDLoop
.2e4c	68		pla				pla 								; restore Y and exit
.2e4d	a8		tay				tay
.2e4e	60		rts				rts
.2e4f					_MInt32DZero:
.2e4f	a2 05		ldx #$05			ldx 	#ErrorID_DivZero
.2e51	20 da 14	jsr $14da		jsr	errorHandler
.2e54					MInt32Modulus:
.2e54	20 fb 2d	jsr $2dfb			jsr 	MInt32UDivide 				; do the division.
.2e57	b5 62		lda $62,x			lda 	esInt3+2,x 					; copy 2nd on stack (the remainder) to the top.
.2e59	95 60		sta $60,x			sta 	esInt3,x
.2e5b	b5 5a		lda $5a,x			lda 	esInt2+2,x
.2e5d	95 58		sta $58,x			sta 	esInt2,x
.2e5f	b5 52		lda $52,x			lda 	esInt1+2,x
.2e61	95 50		sta $50,x			sta 	esInt1,x
.2e63	b5 4a		lda $4a,x			lda 	esInt0+2,x
.2e65	95 48		sta $48,x			sta 	esInt0,x
.2e67	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32fromstr.asm

.0c14					fs32Length:
>0c14							.fill 	1
.2e68					LinkInt32FromString:
.2e68	aa		tax				tax
.2e69	98		tya				tya
.2e6a	20 6f 2e	jsr $2e6f			jsr 	MInt32FromString
.2e6d	8a		txa				txa
.2e6e	60		rts				rts
.2e6f					MInt32FromString:
.2e6f	85 32		sta $32				sta 	tempShort 					; save base
.2e71	98		tya				tya
.2e72	48		pha				pha
.2e73	a0 00		ldy #$00			ldy 	#0 							; get length of string to convert
.2e75	b1 2a		lda ($2a),y			lda 	(temp0),y
.2e77	8d 14 0c	sta $0c14			sta 	fs32Length
.2e7a	f0 65		beq $2ee1			beq 	_I32FSFail2					; fail if length zero.
.2e7c	a0 01		ldy #$01			ldy 	#1 							; set index into string being read
.2e7e	b1 2a		lda ($2a),y			lda 	(temp0),y 					; look at first character
.2e80	c9 2d		cmp #$2d			cmp 	#"-"						; is it a - character
.2e82	d0 09		bne $2e8d			bne 	_I32FSNotNegative
.2e84	ad 14 0c	lda $0c14			lda 	fs32Length 					; get length back.
.2e87	c9 01		cmp #$01			cmp 	#1 							; if 1 it is just a - on its own so fail.
.2e89	f0 56		beq $2ee1			beq 	_I32FSFail2
.2e8b	a0 02		ldy #$02			ldy 	#2 							; first digit of the number.
.2e8d					_I32FSNotNegative:
.2e8d	a5 32		lda $32				lda 	tempShort 					; get the base back.
.2e8f	c0 02		cpy #$02			cpy 	#2 							; if we read a -ve (e.g. Y == 2)
.2e91	d0 02		bne $2e95			bne 	_I32FSNN2
.2e93	09 80		ora #$80			ora 	#$80						; set bit 7, this indicates a negated result.
.2e95					_I32FSNN2:
.2e95	48		pha				pha 								; save base + final sign on stack.
.2e96	20 01 30	jsr $3001			jsr 	MInt32False 				; zero the return value.
.2e99					_I32FSMainLoop:
.2e99	68		pla				pla 								; get the base back into tempShort
.2e9a	48		pha				pha
.2e9b	29 7f		and #$7f			and 	#$7F
.2e9d	85 32		sta $32				sta 	tempShort
.2e9f	b1 2a		lda ($2a),y			lda 	(temp0),y 					; look at next character.
.2ea1	c9 61		cmp #$61			cmp 	#"a" 						; fix up case.
.2ea3	90 02		bcc $2ea7			bcc 	_I32FSNotLC
.2ea5	e9 20		sbc #$20			sbc 	#32
.2ea7					_I32FSNotLC:
.2ea7	38		sec				sec 								; subtract 48 (ASCII "0") - ASCII to Hex conversion
.2ea8	e9 30		sbc #$30			sbc 	#"0"
.2eaa	90 34		bcc $2ee0			bcc 	_I32FSFail 					; nothing more to do.
.2eac	c9 0a		cmp #$0a			cmp 	#9+1 						; if it is 0-9 validate vs base.
.2eae	90 06		bcc $2eb6			bcc 	_I32FSValidate
.2eb0	c9 11		cmp #$11			cmp 	#17 						; is it between 58 and 64 ? if so bad.
.2eb2	90 2c		bcc $2ee0			bcc 	_I32FSFail
.2eb4	e9 07		sbc #$07			sbc 	#7 							; adjust into range so now character is 0->nnn
.2eb6					_I32FSValidate:
.2eb6	c5 32		cmp $32				cmp 	tempShort 					; compare against the base.
.2eb8	b0 26		bcs $2ee0			bcs 	_I32FSFail 					; sorry, too large for this base, so fail.
.2eba	48		pha				pha 								; save the new digit value.
.2ebb	e8		inx				inx 								; put base into next slot up on stack
.2ebc	a5 32		lda $32				lda 	tempShort
.2ebe	20 10 30	jsr $3010			jsr 	MInt32Set8Bit
.2ec1	ca		dex				dex
.2ec2	20 19 2f	jsr $2f19			jsr 	MInt32Multiply 				; multiply current by the base
.2ec5	e8		inx				inx
.2ec6	68		pla				pla  								; put additive into next slot
.2ec7	20 10 30	jsr $3010			jsr 	MInt32Set8Bit
.2eca	ca		dex				dex
.2ecb	20 e5 2e	jsr $2ee5			jsr 	MInt32Add 					; and add it
.2ece	c8		iny				iny 								; bump the character pointer
.2ecf	cc 14 0c	cpy $0c14			cpy 	fs32Length 					; until > length.
.2ed2	f0 c5		beq $2e99			beq 	_I32FSMainLoop
.2ed4	90 c3		bcc $2e99			bcc 	_I32FSMainLoop
.2ed6					_I32FSDone:
.2ed6	68		pla				pla 								; get base/final sign back
.2ed7	10 03		bpl $2edc			bpl 	_I32FSNN3
.2ed9	20 bb 2f	jsr $2fbb			jsr 	MInt32Negate 				; negate the result.
.2edc					_I32FSNN3:
.2edc	68		pla				pla
.2edd	a8		tay				tay
.2ede	38		sec				sec
.2edf	60		rts				rts
.2ee0					_I32FSFail:
.2ee0	68		pla				pla
.2ee1					_I32FSFail2:
.2ee1	68		pla				pla
.2ee2	a8		tay				tay
.2ee3	18		clc				clc
.2ee4	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32math.asm

.2ee5					MInt32Add:
.2ee5	18		clc				clc
.2ee6	b5 48		lda $48,x			lda 	esInt0,x
.2ee8	75 49		adc $49,x			adc 	esInt0+1,x
.2eea	95 48		sta $48,x			sta 	esInt0,x
.2eec	b5 50		lda $50,x			lda 	esInt1,x
.2eee	75 51		adc $51,x			adc 	esInt1+1,x
.2ef0	95 50		sta $50,x			sta 	esInt1,x
.2ef2	b5 58		lda $58,x			lda 	esInt2,x
.2ef4	75 59		adc $59,x			adc 	esInt2+1,x
.2ef6	95 58		sta $58,x			sta 	esInt2,x
.2ef8	b5 60		lda $60,x			lda 	esInt3,x
.2efa	75 61		adc $61,x			adc 	esInt3+1,x
.2efc	95 60		sta $60,x			sta 	esInt3,x
.2efe	60		rts				rts
.2eff					MInt32Sub:
.2eff	38		sec				sec
.2f00	b5 48		lda $48,x			lda 	esInt0,x
.2f02	f5 49		sbc $49,x			sbc 	esInt0+1,x
.2f04	95 48		sta $48,x			sta 	esInt0,x
.2f06	b5 50		lda $50,x			lda 	esInt1,x
.2f08	f5 51		sbc $51,x			sbc 	esInt1+1,x
.2f0a	95 50		sta $50,x			sta 	esInt1,x
.2f0c	b5 58		lda $58,x			lda 	esInt2,x
.2f0e	f5 59		sbc $59,x			sbc 	esInt2+1,x
.2f10	95 58		sta $58,x			sta 	esInt2,x
.2f12	b5 60		lda $60,x			lda 	esInt3,x
.2f14	f5 61		sbc $61,x			sbc 	esInt3+1,x
.2f16	95 60		sta $60,x			sta 	esInt3,x
.2f18	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32multiply.asm

.2f19					MInt32Multiply:
.2f19	e8		inx				inx 								; copy 2nd -> 3rd
.2f1a	20 3f 2f	jsr $2f3f			jsr 	MInt32CopyUp
.2f1d	ca		dex				dex
.2f1e	20 3f 2f	jsr $2f3f			jsr 	MInt32CopyUp 				; copy 1st -> 2nd
.2f21	20 01 30	jsr $3001			jsr 	MInt32False 				; zero 1st.
.2f24					_I32Loop:
.2f24	b5 4a		lda $4a,x			lda 	esInt0+2,x 					; get low bit of 3rd
.2f26	29 01		and #$01			and 	#1
.2f28	f0 03		beq $2f2d			beq 	_I32NoAdd 					; if set
.2f2a	20 e5 2e	jsr $2ee5			jsr 	MInt32Add 					; add 2nd to 1st.
.2f2d					_I32NoAdd:
.2f2d	e8		inx				inx 								; shift 2nd left
.2f2e	20 16 30	jsr $3016			jsr 	MInt32ShiftLeft
.2f31	e8		inx				inx  								; shift 3rd right
.2f32	20 1f 30	jsr $301f			jsr 	MInt32ShiftRight
.2f35	20 28 30	jsr $3028			jsr 	MInt32Zero 					; check if zero.
.2f38	08		php				php 								; save status bits
.2f39	ca		dex				dex 	 							; point back to 1st
.2f3a	ca		dex				dex
.2f3b	28		plp				plp 								; get status bits
.2f3c	d0 e6		bne $2f24			bne 	_I32Loop 					; if non-zero keep going.
.2f3e	60		rts				rts
.2f3f					MInt32CopyUp:
.2f3f	b5 48		lda $48,x			lda 	esInt0,x
.2f41	95 49		sta $49,x			sta 	esInt0+1,x
.2f43	b5 50		lda $50,x			lda 	esInt1,x
.2f45	95 51		sta $51,x			sta 	esInt1+1,x
.2f47	b5 58		lda $58,x			lda 	esInt2,x
.2f49	95 59		sta $59,x			sta 	esInt2+1,x
.2f4b	b5 60		lda $60,x			lda 	esInt3,x
.2f4d	95 61		sta $61,x			sta 	esInt3+1,x
.2f4f	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32tostr.asm

>0c15					MCharCount:	.fill 	1						; count of converted characters
.2f50					MLInt32ToString:
.2f50	aa		tax				tax									; module passes stack in A, base in Y
.2f51	98		tya				tya
.2f52	20 57 2f	jsr $2f57			jsr 	MInt32ToString
.2f55	8a		txa				txa
.2f56	60		rts				rts
.2f57					MInt32ToString:
.2f57	48		pha				pha 								; save base
.2f58	85 32		sta $32				sta 	tempShort 					; save target base.
.2f5a	a9 00		lda #$00			lda 	#0
.2f5c	8d 15 0c	sta $0c15			sta 	MCharCount 					; clear character count to 0
.2f5f	98		tya				tya
.2f60	48		pha				pha
.2f61	a5 32		lda $32				lda 	tempShort 					; check if we are signed conversion
.2f63	10 10		bpl $2f75			bpl 	_I32TSUnsigned
.2f65	48		pha				pha 								; save base on stack.
.2f66	b5 60		lda $60,x			lda 	esInt3,x 					; is it actually negative
.2f68	10 08		bpl $2f72			bpl 	_I32TSNoFlip
.2f6a	a9 2d		lda #$2d			lda 	#"-" 						; write a '-' prefix out.
.2f6c	20 a8 2f	jsr $2fa8			jsr 	MI32WriteCharacter
.2f6f	20 bb 2f	jsr $2fbb			jsr 	MInt32Negate 				; negate the value, so now it's positive.
.2f72					_I32TSNoFlip:
.2f72	68		pla				pla 								; get the base back
.2f73	29 7f		and #$7f			and 	#$7F 						; clear the sign flag so it's just a base now.
.2f75					_I32TSUnsigned:
.2f75	20 83 2f	jsr $2f83			jsr 	MI32DivideWrite 			; recursive code to output string.
.2f78	a0 00		ldy #$00			ldy 	#0 							; write charcount to first character.
.2f7a	ad 15 0c	lda $0c15			lda 	MCharCount
.2f7d	91 2a		sta ($2a),y			sta 	(temp0),y
.2f7f	68		pla				pla
.2f80	a8		tay				tay
.2f81	68		pla				pla
.2f82	60		rts				rts
.2f83					MI32DivideWrite:
.2f83	48		pha				pha 								; save the divisor/base
.2f84	e8		inx				inx 								; write in the dividing position.
.2f85	20 10 30	jsr $3010			jsr 	MInt32Set8Bit
.2f88	ca		dex				dex
.2f89	20 fb 2d	jsr $2dfb			jsr 	MInt32UDivide 				; divide number by base.
.2f8c	68		pla				pla 								; get the base into Y
.2f8d	a8		tay				tay
.2f8e	b5 4a		lda $4a,x			lda 	esInt0+2,x 					; get the remainder and push on the stack.
.2f90	48		pha				pha
.2f91	20 28 30	jsr $3028			jsr 	MInt32Zero 					; is the result zero ?
.2f94	f0 04		beq $2f9a			beq 	_I32NoRecurse 				; if so, don't recurse.
.2f96	98		tya				tya 								; put base into A
.2f97	20 83 2f	jsr $2f83			jsr 	MI32DivideWrite 				; and jsr the dividor recursively.
.2f9a					_I32NoRecurse:
.2f9a	68		pla				pla 								; get the remainder back
.2f9b	c9 0a		cmp #$0a			cmp 	#10  						; handle hexadecimals, now converting to ASCII
.2f9d	90 02		bcc $2fa1			bcc 	_I32NotHex
.2f9f	69 06		adc #$06			adc 	#7-1
.2fa1					_I32NotHex:
.2fa1	18		clc				clc 								; make it ASCII
.2fa2	69 30		adc #$30			adc 	#48
.2fa4	20 a8 2f	jsr $2fa8			jsr 	MI32WriteCharacter 			; write the character out
.2fa7	60		rts				rts 								; and exit.
.2fa8					MI32WriteCharacter:
.2fa8	ee 15 0c	inc $0c15			inc 	MCharCount 					; bump count (space for leading count)
.2fab	ac 15 0c	ldy $0c15			ldy 	MCharCount 					; get position
.2fae	91 2a		sta ($2a),y			sta 	(temp0),y 					; write out with trailing 0
.2fb0	c8		iny				iny
.2fb1	a9 00		lda #$00			lda 	#0
.2fb3	91 2a		sta ($2a),y			sta 	(temp0),y
.2fb5	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32unary.asm

>0c16					MSeed32:	.fill 	4							; random number seed.
.2fb6					MInt32Absolute:
.2fb6	b5 60		lda $60,x			lda 	esInt3,x 					; use negate code if -ve.
.2fb8	30 01		bmi $2fbb			bmi 	MInt32Negate
.2fba	60		rts				rts
.2fbb					MInt32Negate:
.2fbb	38		sec				sec 								; subtract from zero.
.2fbc	a9 00		lda #$00			lda 	#0
.2fbe	f5 48		sbc $48,x			sbc 	esInt0,x
.2fc0	95 48		sta $48,x			sta 	esInt0,x
.2fc2	a9 00		lda #$00			lda 	#0
.2fc4	f5 50		sbc $50,x			sbc 	esInt1,x
.2fc6	95 50		sta $50,x			sta 	esInt1,x
.2fc8	a9 00		lda #$00			lda 	#0
.2fca	f5 58		sbc $58,x			sbc 	esInt2,x
.2fcc	95 58		sta $58,x			sta 	esInt2,x
.2fce	a9 00		lda #$00			lda 	#0
.2fd0	f5 60		sbc $60,x			sbc 	esInt3,x
.2fd2	95 60		sta $60,x			sta 	esInt3,x
.2fd4	60		rts				rts
.2fd5					MInt32Not:
.2fd5	b5 48		lda $48,x			lda 	esInt0,x 					; one's complement all four.
.2fd7	49 ff		eor #$ff			eor 	#$FF
.2fd9	95 48		sta $48,x			sta 	esInt0,x
.2fdb	b5 50		lda $50,x			lda 	esInt1,x
.2fdd	49 ff		eor #$ff			eor 	#$FF
.2fdf	95 50		sta $50,x			sta 	esInt1,x
.2fe1	b5 58		lda $58,x			lda 	esInt2,x
.2fe3	49 ff		eor #$ff			eor 	#$FF
.2fe5	95 58		sta $58,x			sta 	esInt2,x
.2fe7	b5 60		lda $60,x			lda 	esInt3,x
.2fe9	49 ff		eor #$ff			eor 	#$FF
.2feb	95 60		sta $60,x			sta 	esInt3,x
.2fed	60		rts				rts
.2fee					MInt32Sign:
.2fee	b5 60		lda $60,x			lda 	esInt3,x					; look at MSB
.2ff0	30 0b		bmi $2ffd			bmi 	MInt32True 					; if set return -1 (true)
.2ff2	20 28 30	jsr $3028			jsr 	MInt32Zero 					; is it zero ?
.2ff5	f0 0a		beq $3001			beq 	MInt32False 				; if zero return 0 (false)
.2ff7	20 01 30	jsr $3001			jsr 	MInt32False 				; > 0 return 1, by setting it to zero
.2ffa	f6 48		inc $48,x			inc 	esInt0,x  					; and bumping the LSB.
.2ffc	60		rts				rts
.2ffd					MInt32True:
.2ffd	a9 ff		lda #$ff			lda 	#$FF 						; set to $FFFFFFFF
.2fff	d0 02		bne $3003			bne 	MInt32WriteAll
.3001					MInt32False:
.3001	a9 00		lda #$00			lda 	#0
.3003					MInt32WriteAll:
.3003	95 48		sta $48,x			sta 	esInt0,x
.3005					MInt32Write123:
.3005	95 50		sta $50,x			sta 	esInt1,x
.3007	95 58		sta $58,x			sta 	esInt2,x
.3009	95 60		sta $60,x			sta 	esInt3,x
.300b	a9 00		lda #$00			lda 	#$00						; and make it an integer
.300d	95 40		sta $40,x			sta 	esType,x
.300f	60		rts				rts
.3010					MInt32Set8Bit:
.3010	95 48		sta $48,x			sta 	esInt0,x 					; coopt above function to write
.3012	a9 00		lda #$00			lda 	#0 							; a value 0-255
.3014	f0 ef		beq $3005			beq		MInt32Write123
.3016					MInt32ShiftLeft:
.3016	16 48		asl $48,x			asl 	esInt0,x
.3018	36 50		rol $50,x			rol	 	esInt1,x
.301a	36 58		rol $58,x			rol	 	esInt2,x
.301c	36 60		rol $60,x			rol	 	esInt3,x
.301e	60		rts				rts
.301f					MInt32ShiftRight:
.301f	56 60		lsr $60,x			lsr 	esInt3,x
.3021	76 58		ror $58,x			ror 	esInt2,x
.3023	76 50		ror $50,x			ror 	esInt1,x
.3025	76 48		ror $48,x			ror 	esInt0,x
.3027	60		rts				rts
.3028					MInt32Zero:
.3028	b5 48		lda $48,x			lda 	esInt0,x
.302a	15 50		ora $50,x			ora 	esInt1,x
.302c	15 58		ora $58,x			ora 	esInt2,x
.302e	15 60		ora $60,x			ora 	esInt3,x
.3030	60		rts				rts
.3031					MInt32Random:
.3031	98		tya				tya
.3032	48		pha				pha
.3033	a0 07		ldy #$07			ldy 	#7 							; do it 7 times
.3035	ad 16 0c	lda $0c16			lda 	MSeed32+0 					; check the seed isn't zero
.3038	d0 03		bne $303d			bne 	_Random1
.303a	a8		tay				tay 								; if so do it 256 times
.303b	a9 aa		lda #$aa			lda		#$AA 						; and use this to seed the seed....
.303d					_Random1:
.303d	0a		asl a				asl 	a
.303e	2e 17 0c	rol $0c17			rol 	MSeed32+1
.3041	2e 18 0c	rol $0c18			rol 	MSeed32+2
.3044	2e 19 0c	rol $0c19			rol 	MSeed32+3
.3047	90 02		bcc $304b			bcc 	_Random2
.3049	49 c5		eor #$c5			eor 	#$C5
.304b					_Random2:
.304b	88		dey				dey
.304c	d0 ef		bne $303d			bne 	_Random1
.304e	8d 16 0c	sta $0c16			sta 	MSeed32+0 					; copy the seed in.
.3051	95 48		sta $48,x			sta 	esInt0,x
.3053	ad 17 0c	lda $0c17			lda 	MSeed32+1
.3056	95 50		sta $50,x			sta 	esInt1,x
.3058	ad 18 0c	lda $0c18			lda 	MSeed32+2
.305b	95 58		sta $58,x			sta 	esInt2,x
.305d	ad 19 0c	lda $0c19			lda 	MSeed32+3
.3060	95 60		sta $60,x			sta 	esInt3,x
.3062	68		pla				pla
.3063	a8		tay				tay
.3064	a9 00		lda #$00			lda 	#0
.3066	95 40		sta $40,x			sta 	esType,x
.3068	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/utility/check.asm

.3069					CheckToken:
.3069	d1 28		cmp ($28),y			cmp 	(codePtr),y
.306b	d0 02		bne $306f			bne 	_CTError
.306d	c8		iny				iny
.306e	60		rts				rts
.306f					_CTError:
.306f	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.3071	20 da 14	jsr $14da		jsr	errorHandler
.3074					CheckRightParen:
.3074	b1 28		lda ($28),y			lda 	(codePtr),y
.3076	c8		iny				iny
.3077	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.3079	d0 01		bne $307c			bne 	_CRPError
.307b	60		rts				rts
.307c					_CRPError:
.307c	a2 09		ldx #$09			ldx 	#ErrorID_MissingRP
.307e	20 da 14	jsr $14da		jsr	errorHandler
.3081					CheckComma:
.3081	b1 28		lda ($28),y			lda 	(codePtr),y
.3083	c8		iny				iny
.3084	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.3086	d0 01		bne $3089			bne 	_CCError
.3088	60		rts				rts
.3089					_CCError:
.3089	a2 0a		ldx #$0a			ldx 	#ErrorID_MissingComma
.308b	20 da 14	jsr $14da		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/utility/scanner.asm

.308e					ScanForward:
.308e	85 2c		sta $2c				sta 	temp1 						; save tokens to search in temp1/temp1+1
.3090	86 2d		stx $2d				stx 	temp1+1
.3092	a9 00		lda #$00			lda 	#0 							; temp2 counts structure levels.
.3094	85 2e		sta $2e				sta 	temp2
.3096	b1 28		lda ($28),y	_SFLoop:lda 	(codePtr),y 				; look at the next token.
.3098	c8		iny				iny
.3099	a6 2e		ldx $2e				ldx 	temp2 						; check structure levels are zero.
.309b	d0 08		bne $30a5			bne 	_SFNoCheck 					; if so, check token against entered values.
.309d	c5 2c		cmp $2c				cmp 	temp1 						; if either matches, we've reached the token
.309f	f0 24		beq $30c5			beq 	_SFExit 					; at the same strcture depth.
.30a1	c5 2d		cmp $2d				cmp 	temp1+1
.30a3	f0 20		beq $30c5			beq 	_SFExit
.30a5					_SFNoCheck:
.30a5	c9 80		cmp #$80			cmp 	#$80 						; if it is 00-7F (variable/number) just skip it.
.30a7	90 ed		bcc $3096			bcc 	_SFLoop
.30a9	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; $80-$85 is various specials.
.30ab	90 19		bcc $30c6			bcc 	_SFSpecials
.30ad	c9 99		cmp #$99			cmp 	#TOK_STRUCTST 				; if < structure start then continue
.30af	90 e5		bcc $3096			bcc 	_SFLoop
.30b1	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST 				; if >= unary start (after structure) then continue.
.30b3	b0 e1		bcs $3096			bcs 	_SFLoop
.30b5	aa		tax				tax  								; token in X, and look up the adjuster.
.30b6	bd 09 29	lda $2909,x			lda 	ELBinaryOperatorInfo-TOK_BINARYST,x
.30b9	38		sec				sec 								; convert to an offset ($FF,$01)
.30ba	e9 81		sbc #$81			sbc 	#$81
.30bc	18		clc				clc 								; add to depth
.30bd	65 2e		adc $2e				adc 	temp2
.30bf	85 2e		sta $2e				sta 	temp2
.30c1	10 d3		bpl $3096			bpl 	_SFLoop 					; +ve okay to continue
.30c3	30 07		bmi $30cc			bmi 	SFError 					; if gone -ve then we have a nesting error
.30c5	60		rts		_SFExit:rts
.30c6					_SFSpecials:
.30c6	20 d1 30	jsr $30d1			jsr 	ScannerSkipSpecial
.30c9	4c 96 30	jmp $3096			jmp 	_SFLoop
.30cc					SFError:
.30cc	a2 14		ldx #$14			ldx 	#ErrorID_Struct
.30ce	20 da 14	jsr $14da		jsr	errorHandler
.30d1					ScannerSkipSpecial:
.30d1	c9 80		cmp #$80			cmp 	#TOK_EOL 					; $80, advance to next line.
.30d3	f0 10		beq $30e5			beq 	_SFNextLine
.30d5	c9 84		cmp #$84			cmp 	#TOK_FPC					; $84, skip embedded float
.30d7	f0 2b		beq $3104			beq 	_SFFloatSkip
.30d9	c9 85		cmp #$85			cmp 	#TOK_STR 					; $85, skip string
.30db	f0 02		beq $30df			beq 	_SFSkipString
.30dd	c8		iny				iny									; $81,$82,$83 shift, so just advance over the shifted
.30de	60		rts				rts 								; token.
.30df					_SFSkipString:
.30df	98		tya				tya
.30e0	38		sec				sec
.30e1	71 28		adc ($28),y			adc 	(codePtr),y
.30e3	a8		tay				tay
.30e4	60		rts				rts
.30e5					_SFNextLine:
.30e5	a0 00		ldy #$00			ldy 	#0 							; get offset
.30e7	b1 28		lda ($28),y			lda 	(codePtr),y
.30e9	18		clc				clc 								; add to code pointer.
.30ea	65 28		adc $28				adc 	codePtr
.30ec	85 28		sta $28				sta 	codePtr
.30ee	90 02		bcc $30f2			bcc		_SFNLNoCarry
.30f0	e6 29		inc $29				inc 	codePtr+1
.30f2					_SFNLNoCarry:
.30f2	b1 28		lda ($28),y			lda 	(codePtr),y 				; reached the end of the program.
.30f4	d0 0b		bne $3101			bne		_SFXNL 						; no go round again
.30f6	a5 2c		lda $2c				lda 	temp1
.30f8	c9 dc		cmp #$dc			cmp 	#TKW_DATA 					; if searching for Data different error.
.30fa	d0 d0		bne $30cc			bne 	SFError 					; read uses this to search for data statements
.30fc	a2 1c		ldx #$1c			ldx 	#ErrorID_DataError
.30fe	20 da 14	jsr $14da		jsr	errorHandler
.3101	a0 03		ldy #$03	_SFXNL:	ldy 	#3
.3103	60		rts				rts
.3104					_SFFloatSkip:
.3104	98		tya				tya 								; skip over an embedded float.
.3105	18		clc				clc
.3106	69 05		adc #$05			adc 	#FloatEmbeddedSize
.3108	a8		tay				tay
.3109	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/utility/stack.asm

.0037					rsPointer:
>0037							.fill 	2							; to TOS, which is the current top-token.
.310a					RSReset:
.310a	a9 ff		lda #$ff			lda 	#(returnStack+retStackSize-1) & $FF
.310c	85 37		sta $37				sta 	rsPointer
.310e	a9 09		lda #$09			lda 	#(returnStack+retStackSize-1) >> 8
.3110	85 38		sta $38				sta 	1+(rsPointer)
.3112	a9 ff		lda #$ff			lda 	#$FF 						; put a duff marker on TOS, so nothing will pop
.3114	8d ff 09	sta $09ff			sta 	returnStack+retStackSize-1
.3117	60		rts				rts
.3118					RSClaim:
.3118	84 32		sty $32				sty 	tempShort 					; preserve Y
.311a	48		pha				pha 								; save marker on stack.
.311b	8a		txa				txa 								; get bytes required.
.311c	38		sec				sec
.311d	49 ff		eor #$ff			eor 	#$FF 						; add to rsPointer using 2's complement.
.311f	65 37		adc $37				adc 	rsPointer
.3121	85 37		sta $37				sta 	rsPointer
.3123	a5 38		lda $38				lda 	rsPointer+1
.3125	69 ff		adc #$ff			adc 	#$FF
.3127	85 38		sta $38				sta 	rsPointer+1
.3129	c9 08		cmp #$08			cmp 	#returnStack>>8 			; overflow. underflow actually :)
.312b	90 08		bcc $3135			bcc 	_RSCOverflow
.312d	68		pla				pla 								; get marker back
.312e	a0 00		ldy #$00			ldy 	#0 							; write marker out.
.3130	91 37		sta ($37),y			sta 	(rsPointer),y
.3132	a4 32		ldy $32				ldy 	tempShort 					; restore Y and exit
.3134	60		rts				rts
.3135					_RSCOverflow:
.3135	a2 16		ldx #$16			ldx 	#ErrorID_RetStack
.3137	20 da 14	jsr $14da		jsr	errorHandler
.313a					RSFree:
.313a	18		clc				clc
.313b	65 37		adc $37				adc 	rsPointer
.313d	85 37		sta $37				sta 	rsPointer
.313f	90 02		bcc $3143			bcc 	_RSFExit
.3141	e6 38		inc $38				inc 	rsPointer+1
.3143					_RSFExit:
.3143	60		rts				rts
.3144					RSSavePosition:
.3144	84 32		sty $32				sty 	tempShort 					; save Y position
.3146	a8		tay				tay 								; this is where we write it.
.3147	a5 28		lda $28				lda 	codePtr 					; write codePointer out
.3149	91 37		sta ($37),y			sta 	(rsPointer),y
.314b	c8		iny				iny
.314c	a5 29		lda $29				lda 	codePtr+1
.314e	91 37		sta ($37),y			sta 	(rsPointer),y
.3150	c8		iny				iny
.3151	a5 32		lda $32				lda 	tempShort 					; write the Y position out.
.3153	91 37		sta ($37),y			sta 	(rsPointer),y
.3155	a8		tay				tay 								; fix Y back again to original value
.3156	60		rts				rts
.3157					RSLoadPosition:
.3157	a8		tay				tay
.3158	b1 37		lda ($37),y			lda 	(rsPointer),y 				; read codePointer back
.315a	85 28		sta $28				sta 	codePtr
.315c	c8		iny				iny
.315d	b1 37		lda ($37),y			lda 	(rsPointer),y
.315f	85 29		sta $29				sta 	codePtr+1
.3161	c8		iny				iny
.3162	b1 37		lda ($37),y			lda 	(rsPointer),y 				; and the offset
.3164	a8		tay				tay 								; to Y
.3165	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/utility/warmstart.asm

.3166					WarmStart:
.3166	a2 02		ldx #$02		ldx	#2
.3168	20 e0 1a	jsr $1ae0		jsr	interactionHandler

;******  Return to file: main/main.asm

.316b					mainHandler:
.316b	7c 6e 31	jmp ($316e,x)			jmp 	(mainVectors,x)
.316e					mainVectors:
>316e	74 30					.word CheckRightParen      ; index 0
>3170	f5 1a					.word XCommandClear        ; index 2
>3172	8b 2a					.word LinkEvaluate         ; index 4
>3174	97 2a					.word LinkEvaluateInteger  ; index 6
>3176	9d 2a					.word LinkEvaluateSmallInt ; index 8
>3178	91 2a					.word LinkEvaluateTerm     ; index 10
>317a	50 2f					.word MLInt32ToString      ; index 12
>317c	13 20					.word Command_XNew         ; index 14
>317e	22 22					.word XCommand_Run         ; index 16
>3180	2e 22					.word Command_RunFrom      ; index 18
>3182	68 2e					.word LinkInt32FromString  ; index 20

;******  Return to file: basic.asm

.3184					section_end_main:
.3184					section_start_string:

;******  Processing file: string/string.asm


;******  Processing file: string/chr.asm

.3184					StringChrs:
.3184	aa		tax				tax 								; set up stack
.3185	a9 02		lda #$02			lda 	#2
.3187	20 47 32	jsr $3247			jsr 	AllocateSoftString
.318a	98		tya				tya
.318b	20 6d 32	jsr $326d			jsr 	WriteSoftString
.318e					StringUpdate:
.318e	20 9c 31	jsr $319c			jsr 	ReturnSoftString
.3191	8a		txa				txa
.3192	60		rts				rts
.3193					StringNull:
.3193	aa		tax				tax
.3194	a9 01		lda #$01			lda 	#1
.3196	20 47 32	jsr $3247			jsr 	AllocateSoftString
.3199	4c 8e 31	jmp $318e			jmp 	StringUpdate
.319c					ReturnSoftString:
.319c	a5 39		lda $39				lda 	softMemAlloc 				; copy address
.319e	95 48		sta $48,x			sta 	esInt0,x
.31a0	a5 3a		lda $3a				lda 	softMemAlloc+1
.31a2	95 50		sta $50,x			sta 	esInt1,x
.31a4	a9 00		lda #$00			lda 	#0 							; zero upper bytes
.31a6	95 58		sta $58,x			sta 	esInt2,x
.31a8	95 60		sta $60,x			sta 	esInt3,x
.31aa	a9 40		lda #$40			lda 	#$40 						; type string.
.31ac	95 40		sta $40,x			sta 	esType,x
.31ae	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/compare.asm

.31af					STRCompare:
.31af	48		pha				pha 								; save A
.31b0	aa		tax				tax 								; put stack pos in X
.31b1	98		tya				tya
.31b2	48		pha				pha
.31b3	20 e7 31	jsr $31e7			jsr 	CopyStringPair 				; copy strings to temp0,temp1
.31b6	a0 00		ldy #$00			ldy 	#0 							; get the smaller of the two string sizes.
.31b8	b1 2a		lda ($2a),y			lda 	(temp0),y
.31ba	d1 2c		cmp ($2c),y			cmp 	(temp1),y
.31bc	90 02		bcc $31c0			bcc 	_SCNotSmaller
.31be	b1 2c		lda ($2c),y			lda 	(temp1),y
.31c0					_SCNotSmaller:
.31c0	aa		tax				tax 								; put that in X. We compare this many chars first.
.31c1					_SCCompareLoop:
.31c1	e0 00		cpx #$00			cpx 	#0 							; if compared all the smaller, then it is the shorter
.31c3	f0 0c		beq $31d1			beq 	_SCSameToEndShortest 		; one that is the smallest if they are different lengths.
.31c5	ca		dex				dex 								; decrement chars to compare.
.31c6	c8		iny				iny 								; move to next character
.31c7	38		sec				sec 								; calculate s1[y]-s2[y]
.31c8	b1 2a		lda ($2a),y			lda 	(temp0),y
.31ca	f1 2c		sbc ($2c),y			sbc 	(temp1),y
.31cc	d0 0a		bne $31d8			bne 	_SCReturnResult 			; if different return sign of A
.31ce	4c c1 31	jmp $31c1			jmp 	_SCCompareLoop
.31d1					_SCSameToEndShortest
.31d1	a0 00		ldy #$00			ldy 	#0 							; compare len(s1) - len(s2)
.31d3	38		sec				sec
.31d4	b1 2a		lda ($2a),y			lda 	(temp0),y
.31d6	f1 2c		sbc ($2c),y			sbc 	(temp1),y
.31d8					_SCReturnResult:
.31d8	08		php				php 								; set return to zero preserving PSW.
.31d9	a2 00		ldx #$00			ldx 	#0
.31db	28		plp				plp
.31dc	f0 05		beq $31e3			beq 	_SCExit 					; two values equal, then exit
.31de	ca		dex				dex 								; X = $FF
.31df	90 02		bcc $31e3			bcc 	_SCExit 					; if 1st < 2nd then -1
.31e1	a2 01		ldx #$01			ldx 	#1 							; X = $01 if greater
.31e3					_SCExit:
.31e3	68		pla				pla
.31e4	a8		tay				tay
.31e5	68		pla				pla
.31e6	60		rts				rts
.31e7					CopyStringPair:
.31e7	b5 49		lda $49,x			lda 	esInt0+1,x
.31e9	85 2c		sta $2c				sta 	temp1
.31eb	b5 51		lda $51,x			lda 	esInt1+1,x
.31ed	85 2d		sta $2d				sta 	temp1+1
.31ef					CopyStringTop:
.31ef	b5 48		lda $48,x			lda 	esInt0,x
.31f1	85 2a		sta $2a				sta 	temp0
.31f3	b5 50		lda $50,x			lda 	esInt1,x
.31f5	85 2b		sta $2b				sta 	temp0+1
.31f7	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/concat.asm

.31f8					StringConcat:
.31f8	aa		tax				tax									; stack pos in X
.31f9	98		tya				tya
.31fa	48		pha				pha
.31fb	20 e7 31	jsr $31e7			jsr 	CopyStringPair 				; temp0 and temp1 point to strings to concat.
.31fe	38		sec				sec 								; calculate alloc strings. lengths added + 1 for size.
.31ff	a0 00		ldy #$00			ldy 	#0
.3201	b1 2a		lda ($2a),y			lda 	(temp0),y
.3203	71 2c		adc ($2c),y			adc 	(temp1),y
.3205	b0 1c		bcs $3223			bcs 	_SCError 					; just too many characters here.
.3207	c9 fc		cmp #$fc			cmp 	#MaxStringSize
.3209	b0 18		bcs $3223			bcs 	_SCError
.320b	20 47 32	jsr $3247			jsr 	AllocateSoftString 			; allocate soft string memory, set pointer.
.320e	20 3e 32	jsr $323e			jsr 	CopySoftToStack 			; copy that to the stack.
.3211	20 28 32	jsr $3228			jsr 	SCCopyTemp0 				; copy temp0
.3214	a5 2c		lda $2c				lda 	temp1 						; copy temp1 to temp0
.3216	85 2a		sta $2a				sta 	temp0
.3218	a5 2d		lda $2d				lda 	temp1+1
.321a	85 2b		sta $2b				sta 	temp0+1
.321c	20 28 32	jsr $3228			jsr 	SCCopyTemp0 				; copy temp0 e.g. what was temp1.
.321f	68		pla				pla
.3220	a8		tay				tay
.3221	8a		txa				txa 								; and A
.3222	60		rts				rts
.3223					_SCError:
.3223	a2 0d		ldx #$0d			ldx 	#ErrorID_StrLen
.3225	20 da 14	jsr $14da		jsr	errorHandler
.3228					SCCopyTemp0:
.3228	a0 00		ldy #$00			ldy 	#0 							; put count in temp2
.322a	b1 2a		lda ($2a),y			lda 	(temp0),y
.322c	85 2e		sta $2e				sta 	temp2
.322e					_SCCopyLoop:
.322e	a5 2e		lda $2e				lda 	temp2 						; done the lot
.3230	f0 0b		beq $323d			beq 	_SCCopyExit
.3232	c6 2e		dec $2e				dec 	temp2
.3234	c8		iny				iny 								; get next char
.3235	b1 2a		lda ($2a),y			lda 	(temp0),y
.3237	20 6d 32	jsr $326d			jsr 	WriteSoftString 			; write to soft string.
.323a	4c 2e 32	jmp $322e			jmp 	_SCCopyLoop
.323d					_SCCopyExit:
.323d	60		rts				rts
.323e					CopySoftToStack:
.323e	a5 39		lda $39				lda 	SoftMemAlloc 				; copy the memory allocation pointer to the stack.
.3240	95 48		sta $48,x			sta 	esInt0,x 					; type is already string.
.3242	a5 3a		lda $3a				lda 	SoftMemAlloc+1
.3244	95 50		sta $50,x			sta 	esInt1,x
.3246	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/memory.asm

.0039					softMemAlloc:
>0039							.fill 	2  							; if MSB is zero needs resetting on allocation.
.3247					AllocateSoftString:
.3247	85 32		sta $32				sta 	tempShort 					; save count
.3249	98		tya				tya
.324a	48		pha				pha
.324b	a5 3a		lda $3a				lda 	softMemAlloc+1 				; if the high byte is zero, it needs allocating.
.324d	d0 09		bne $3258			bne 	_ASSDone
.324f	a5 33		lda $33				lda 	highMemory 					; reset the soft memory alloc pointer.
.3251	85 39		sta $39				sta 	softMemAlloc 				; to speed up slightly, we only reset this when we first need it
.3253	a4 34		ldy $34				ldy 	highMemory+1 				; but it needs to be reset before each command.
.3255	88		dey				dey 								; it is set to 1/4k below high memory, allowing space
.3256	84 3a		sty $3a				sty 	softMemAlloc+1 				; for a concreted string.
.3258					_ASSDone:
.3258	38		sec				sec 								; allocate downwards enough memory
.3259	a5 39		lda $39				lda 	softMemAlloc 				; subtract the memory requirements in A from
.325b	e5 32		sbc $32				sbc 	tempShort 					; the soft memory pointer
.325d	85 39		sta $39				sta 	softMemAlloc
.325f	a5 3a		lda $3a				lda 	softMemAlloc+1
.3261	e9 00		sbc #$00			sbc 	#0
.3263	85 3a		sta $3a				sta 	softMemAlloc+1
.3265	a9 00		lda #$00			lda 	#0 							; empty that string, set the length = 0.
.3267	a8		tay				tay
.3268	91 39		sta ($39),y			sta 	(softMemAlloc),y
.326a	68		pla				pla
.326b	a8		tay				tay
.326c	60		rts				rts
.326d					WriteSoftString:
.326d	84 32		sty $32				sty 	tempShort 					; save Y
.326f	48		pha				pha 								; save character on stack
.3270	a0 00		ldy #$00			ldy 	#0 							; get and bump length
.3272	b1 39		lda ($39),y			lda 	(softMemAlloc),y
.3274	18		clc				clc
.3275	69 01		adc #$01			adc 	#1
.3277	91 39		sta ($39),y			sta 	(softMemAlloc),y
.3279	a8		tay				tay 								; offset in Y
.327a	68		pla				pla 								; get char and write.
.327b	91 39		sta ($39),y			sta 	(softMemAlloc),y
.327d	a4 32		ldy $32				ldy 	tempShort 					; restore Y and exit.
.327f	60		rts				rts
.3280					StrClone:
.3280	aa		tax				tax 								; set up stack.
.3281	98		tya				tya
.3282	48		pha				pha
.3283	a0 00		ldy #$00			ldy 	#0 							; get length, add 1 for length
.3285	b1 2a		lda ($2a),y			lda 	(temp0),y 					; this is the bytes required.
.3287	18		clc				clc
.3288	69 01		adc #$01			adc 	#1
.328a	20 47 32	jsr $3247			jsr 	AllocateSoftString 			; allocate soft memory
.328d	a5 39		lda $39				lda 	softMemAlloc 				; copy that address to TOS
.328f	95 48		sta $48,x			sta 	esInt0,x
.3291	a5 3a		lda $3a				lda 	softMemAlloc+1
.3293	95 50		sta $50,x			sta 	esInt1,x
.3295	a9 00		lda #$00			lda 	#0 							; zero upper 2 bytes
.3297	95 58		sta $58,x			sta 	esInt2,x
.3299	95 60		sta $60,x			sta 	esInt3,x
.329b	a9 40		lda #$40			lda 	#$40 						; set type to string.
.329d	95 40		sta $40,x			sta 	esType,x
.329f	20 28 32	jsr $3228			jsr 	SCCopyTemp0 				; copy temp0 string to soft memory copy (concat.asm)
.32a2	68		pla				pla
.32a3	a8		tay				tay
.32a4	8a		txa				txa
.32a5	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/setcase.asm

.32a6					CaseString:
.32a6	48		pha				pha 								; save A and copy to X
.32a7	aa		tax				tax
.32a8	98		tya				tya
.32a9	48		pha				pha
.32aa	20 ef 31	jsr $31ef			jsr 	CopyStringTop 				; target string -> temp0
.32ad	a0 00		ldy #$00			ldy 	#0
.32af	b1 2a		lda ($2a),y			lda 	(temp0),y  					; get length,
.32b1	18		clc				clc
.32b2	69 01		adc #$01			adc 	#1 							; one more for length byte
.32b4	20 47 32	jsr $3247			jsr 	AllocateSoftString 			; allocate soft string memory, set pointer.
.32b7	20 3e 32	jsr $323e			jsr 	CopySoftToStack 			; copy that to the stack.
.32ba	a0 00		ldy #$00			ldy 	#0
.32bc	b1 2a		lda ($2a),y			lda 	(temp0),y 					; count to copy in X
.32be	aa		tax				tax
.32bf					_CSCopy:
.32bf	e0 00		cpx #$00			cpx 	#0 							; finished if 0.
.32c1	f0 24		beq $32e7			beq 	_CSExit
.32c3	ca		dex				dex
.32c4	c8		iny				iny
.32c5	68		pla				pla 								; check direction
.32c6	48		pha				pha
.32c7	f0 0c		beq $32d5			beq 	_CSUpper
.32c9	b1 2a		lda ($2a),y			lda 	(temp0),y 					; lower$() code
.32cb	c9 41		cmp #$41			cmp 	#"A"
.32cd	90 12		bcc $32e1			bcc 	_CSWrite
.32cf	c9 5b		cmp #$5b			cmp 	#"Z"+1
.32d1	b0 0e		bcs $32e1			bcs 	_CSWrite
.32d3	90 0a		bcc $32df			bcc 	_CSFlipWrite
.32d5					_CSUpper:
.32d5	b1 2a		lda ($2a),y			lda 	(temp0),y 					; upper$() code
.32d7	c9 61		cmp #$61			cmp 	#"a"
.32d9	90 06		bcc $32e1			bcc 	_CSWrite
.32db	c9 7b		cmp #$7b			cmp 	#"z"+1
.32dd	b0 02		bcs $32e1			bcs 	_CSWrite
.32df					_CSFlipWrite:
.32df	49 20		eor #$20			eor 	#"A"^"a" 					; switch case.
.32e1					_CSWrite:
.32e1	20 6d 32	jsr $326d			jsr 	WriteSoftString 			; add to soft string.
.32e4	4c bf 32	jmp $32bf			jmp 	_CSCopy
.32e7					_CSExit:
.32e7	68		pla				pla
.32e8	a8		tay				tay
.32e9	68		pla				pla
.32ea	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/substring.asm

.32eb					StringSubstring:
.32eb	48		pha				pha
.32ec	aa		tax				tax 								; access stack.
.32ed	98		tya				tya
.32ee	48		pha				pha
.32ef	20 ef 31	jsr $31ef			jsr 	CopyStringTop 				; point temp0 to the string.
.32f2	a0 00		ldy #$00			ldy 	#0 							; get length.
.32f4	b1 2a		lda ($2a),y			lda 	(temp0),Y
.32f6	85 2c		sta $2c				sta 	temp1
.32f8	b5 49		lda $49,x			lda 	esInt0+1,x 					; get the initial offset
.32fa	c5 2c		cmp $2c				cmp 	temp1 						; return "" if > length.
.32fc	f0 02		beq $3300			beq 	_SSBOkay
.32fe	b0 2a		bcs $332a			bcs 	_SSBReturnNull
.3300					_SSBOkay:
.3300	a5 2c		lda $2c				lda 	temp1 						; get the total length +1
.3302	18		clc				clc
.3303	69 01		adc #$01			adc 	#1
.3305	38		sec				sec
.3306	f5 49		sbc $49,x			sbc 	esInt0+1,x 					; the anything >= this is bad - max size
.3308	d5 4a		cmp $4a,x			cmp 	esInt0+2,x  				; check bad >= required
.330a	90 02		bcc $330e			bcc		_SSBTrunc
.330c	b5 4a		lda $4a,x			lda 	esInt0+2,x
.330e					_SSBTrunc:
.330e	85 2d		sta $2d				sta 	temp1+1 					; characters to copy.
.3310	18		clc				clc
.3311	69 01		adc #$01			adc 	#1 							; add 1
.3313	20 47 32	jsr $3247			jsr 	AllocateSoftString 			; allocate soft string memory, set pointer.
.3316	20 3e 32	jsr $323e			jsr 	CopySoftToStack 			; copy that to the stack.
.3319	b4 49		ldy $49,x			ldy 	esInt0+1,x 					; get initial position of char to copy
.331b					_SSBCopyLoop:
.331b	a5 2d		lda $2d				lda 	temp1+1 					; done them all
.331d	f0 0e		beq $332d			beq 	_SSBExit
.331f	c6 2d		dec $2d				dec 	temp1+1
.3321	b1 2a		lda ($2a),y			lda 	(temp0),y 					; get and write character
.3323	20 6d 32	jsr $326d			jsr 	WriteSoftString
.3326	c8		iny				iny
.3327	4c 1b 33	jmp $331b			jmp 	_SSBCopyLoop
.332a					_SSBReturnNull:
.332a	20 31 33	jsr $3331			jsr 	ReturnNull
.332d					_SSBExit:
.332d	68		pla				pla
.332e	a8		tay				tay
.332f	68		pla				pla
.3330	60		rts				rts
.3331					ReturnNull:
.3331	a9 00		lda #$00			lda 	#0 							; clear null string
.3333	8d ce 0a	sta $0ace			sta 	NullString
.3336	a9 ce		lda #$ce			lda 	#NullString & $FF 			; set a pointer to it
.3338	95 48		sta $48,x			sta 	esInt0,x
.333a	a9 0a		lda #$0a			lda 	#NullString >> 8
.333c	95 50		sta $50,x			sta 	esInt1,x
.333e	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/write.asm

.0c1a					srcStrLen:
>0c1a							.fill 	1
.333f					StringWrite:
.333f	aa		tax				tax
.3340	48		pha				pha
.3341	98		tya				tya
.3342	48		pha				pha
.3343	20 6a 33	jsr $336a			jsr 	CheckOverwriteCurrent
.3346	b0 0d		bcs $3355			bcs		_SWCopyCurrent
.3348	20 a8 33	jsr $33a8			jsr 	RequiresConcretion
.334b	90 0e		bcc $335b			bcc 	_SWWriteReference
.334d	20 0b 34	jsr $340b			jsr 	CheckSpecialConcretion
.3350	b0 09		bcs $335b			bcs 	_SWWriteReference
.3352	20 bc 33	jsr $33bc			jsr 	AllocateHardMemory
.3355					_SWCopyCurrent:
.3355	20 ef 33	jsr $33ef			jsr 	CopyStringToHardMemory
.3358	4c 66 33	jmp $3366			jmp 	_SWExit
.335b					_SWWriteReference
.335b	a0 00		ldy #$00			ldy 	#0
.335d	a5 2a		lda $2a				lda 	temp0
.335f	91 2c		sta ($2c),y			sta 	(temp1),y
.3361	c8		iny				iny
.3362	a5 2b		lda $2b				lda 	temp0+1
.3364	91 2c		sta ($2c),y			sta 	(temp1),y
.3366					_SWExit:
.3366	68		pla				pla
.3367	a8		tay				tay
.3368	68		pla				pla
.3369	60		rts				rts
.336a					CheckOverwriteCurrent:
.336a	a0 00		ldy #$00			ldy 	#0 						; get address of string being written to temp0
.336c	b5 51		lda $51,x			lda 	esInt1+1,x
.336e	85 2b		sta $2b				sta 	temp0+1
.3370	b5 49		lda $49,x			lda 	esInt0+1,x
.3372	85 2a		sta $2a				sta 	temp0
.3374	b1 2a		lda ($2a),y			lda 	(temp0),y 				; get length of string being copied and save it.
.3376	8d 1a 0c	sta $0c1a			sta 	srcStrLen
.3379	b5 48		lda $48,x			lda 	esInt0,x 				; copy where the final address it being written to temp1.
.337b	85 2c		sta $2c				sta 	temp1 					; e.g. if it is ax$ then temp1 will point to the ax$
.337d	b5 50		lda $50,x			lda 	esInt1,x 				; data record + 5
.337f	85 2d		sta $2d				sta 	temp1+1
.3381	a0 01		ldy #$01			ldy 	#1 						; get the MSB of the address of string currently stored there.
.3383	b1 2c		lda ($2c),y			lda 	(temp1),y
.3385	c5 34		cmp $34				cmp 	highMemory+1 			; if < high memory then it cannot be something stored
.3387	90 1b		bcc $33a4			bcc 	_COCFail 				; in hard memory.
.3389	a0 00		ldy #$00			ldy 	#0 						; copy target address - 1 into temp2
.338b	b1 2c		lda ($2c),y			lda 	(temp1),y 				; when allocating hard memory, the overall size is
.338d	e9 01		sbc #$01			sbc 	#1 						; in the previous byte.
.338f	85 2e		sta $2e				sta 	temp2
.3391	c8		iny				iny
.3392	b1 2c		lda ($2c),y			lda 	(temp1),y
.3394	e9 00		sbc #$00			sbc 	#0
.3396	85 2f		sta $2f				sta 	temp2+1
.3398	a0 00		ldy #$00			ldy 	#0 						; how large is this physical chunk.
.339a	b1 2e		lda ($2e),y			lda 	(temp2),y
.339c	38		sec				sec  							; maximum character capacity.
.339d	e9 02		sbc #$02			sbc 	#2
.339f	cd 1a 0c	cmp $0c1a			cmp 	srcStrLen 				; if >= the required length
.33a2	b0 02		bcs $33a6			bcs 	_COCCanReuse
.33a4					_COCFail:
.33a4	18		clc				clc
.33a5	60		rts				rts
.33a6					_COCCanReuse:
.33a6	38		sec				sec
.33a7	60		rts				rts
.33a8					RequiresConcretion:
.33a8	a5 2b		lda $2b				lda 	temp0+1 				; get MSB of address of string to be written
.33aa	c5 34		cmp $34				cmp 	highMemory+1 			; if >= high memory it is concreted
.33ac	b0 0a		bcs $33b8			bcs 	_RCSucceed 				; so it needs concreting again - duplication.
.33ae	a5 3a		lda $3a				lda 	softMemAlloc+1 			; have we allocated any soft memory yet ?
.33b0	f0 08		beq $33ba			beq 	_RCFail 				; if not, this cannot be soft memory.
.33b2	a5 2b		lda $2b				lda 	temp0+1 				; get MSB of address of string to be written
.33b4	c5 3a		cmp $3a				cmp 	softMemAlloc+1 			; if >= soft mem alloc it is either soft
.33b6	90 02		bcc $33ba			bcc 	_RCFail 				; so concreting
.33b8					_RCSucceed:
.33b8	38		sec				sec
.33b9	60		rts				rts
.33ba					_RCFail:
.33ba	18		clc				clc
.33bb	60		rts				rts
.33bc					AllocateHardMemory:
.33bc	98		tya				tya
.33bd	48		pha				pha
.33be	ad 1a 0c	lda $0c1a			lda 	srcStrLen 				; characters in string
.33c1	69 0a		adc #$0a			adc 	#1+1+8 					; one for hard memory size, one for string size, extra for expansion
.33c3	b0 04		bcs $33c9			bcs 	_AHMSetMax 				; max out that amount.
.33c5	c9 fe		cmp #$fe			cmp 	#MaxStringSize+2
.33c7	90 02		bcc $33cb			bcc 	_AHMIsOkay
.33c9					_AHMSetMax:
.33c9	a9 fe		lda #$fe			lda 	#MaxStringSize+2
.33cb					_AHMIsOkay:
.33cb	48		pha				pha	 							; save size to be allocated
.33cc	49 ff		eor #$ff			eor 	#$FF 					; complement and add to high Memory
.33ce	38		sec				sec  							; and copy result to TOS as target address.
.33cf	65 33		adc $33				adc 	highMemory
.33d1	85 33		sta $33				sta 	highMemory
.33d3	a5 34		lda $34				lda 	highMemory+1
.33d5	69 ff		adc #$ff			adc 	#$FF
.33d7	85 34		sta $34				sta 	highMemory+1
.33d9	a0 00		ldy #$00			ldy 	#0 						; Y = 0
.33db	68		pla				pla 							; get the total size of the storage block
.33dc	91 33		sta ($33),y			sta 	(highMemory),y 			; and set it
.33de	18		clc				clc
.33df	a5 33		lda $33				lda		highMemory 				; point the target address to the byte after this.
.33e1	69 01		adc #$01			adc 	#1
.33e3	91 2c		sta ($2c),y			sta 	(temp1),y
.33e5	a5 34		lda $34				lda 	highMemory+1
.33e7	69 00		adc #$00			adc 	#0
.33e9	c8		iny				iny
.33ea	91 2c		sta ($2c),y			sta 	(temp1),y
.33ec	68		pla				pla
.33ed	a8		tay				tay
.33ee	60		rts				rts
.33ef					CopyStringToHardMemory:
.33ef	98		tya				tya
.33f0	48		pha				pha
.33f1	a0 00		ldy #$00			ldy 	#0 						; copy target address to temp2
.33f3	b1 2c		lda ($2c),y			lda 	(temp1),y
.33f5	85 2e		sta $2e				sta 	temp2
.33f7	c8		iny				iny
.33f8	b1 2c		lda ($2c),y			lda 	(temp1),y
.33fa	85 2f		sta $2f				sta 	temp2+1
.33fc	ac 1a 0c	ldy $0c1a			ldy 	srcStrLen 				; copy this + 1 characters, (length too) hence $FF compare
.33ff					_CSTHMLoop:
.33ff	b1 2a		lda ($2a),y			lda 	(temp0),y
.3401	91 2e		sta ($2e),y			sta 	(temp2),y
.3403	88		dey				dey
.3404	c0 ff		cpy #$ff			cpy 	#$FF 					; this does the +1
.3406	d0 f7		bne $33ff			bne 	_CSTHMLoop
.3408	68		pla				pla
.3409	a8		tay				tay
.340a	60		rts				rts
.340b					CheckSpecialConcretion:
.340b	ad 1a 0c	lda $0c1a			lda 	srcStrLen 				; check string is null e.g. length = 0
.340e	f0 02		beq $3412			beq 	_CSCNullString
.3410	18		clc				clc
.3411	60		rts				rts
.3412					_CSCNullString:
.3412	a9 00		lda #$00			lda 	#0 						; by always returning this address we don't waste
.3414	8d ce 0a	sta $0ace			sta 	NullString		 		; storage on null strings.
.3417	a9 ce		lda #$ce			lda 	#(NullString) & $FF
.3419	85 2a		sta $2a				sta 	temp0
.341b	a9 0a		lda #$0a			lda 	#(NullString) >> 8
.341d	85 2b		sta $2b				sta 	1+(temp0)
.341f	38		sec				sec
.3420	60		rts				rts

;******  Return to file: string/string.asm

.3421					stringHandler:
.3421	7c 24 34	jmp ($3424,x)			jmp 	(stringVectors,x)
.3424					stringVectors:
>3424	84 31					.word StringChrs           ; index 0
>3426	80 32					.word StrClone             ; index 2
>3428	f8 31					.word StringConcat         ; index 4
>342a	93 31					.word StringNull           ; index 6
>342c	af 31					.word STRCompare           ; index 8
>342e	a6 32					.word CaseString           ; index 10
>3430	eb 32					.word StringSubstring      ; index 12
>3432	3f 33					.word StringWrite          ; index 14

;******  Return to file: basic.asm

.3434					section_end_string:
.3434					section_start_tokeniser:

;******  Processing file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/detokenise/detokenise.asm

.0c1b					deTokeniseVector:
>0c1b							.fill 	2
.0c1d					lastCharacterClass:
>0c1d							.fill 	1
.0c1e					indent:
>0c1e							.fill 	1
.3434					ListLine:
.3434	48		pha				pha
.3435	a9 62		lda #$62			lda 	#(deTokenPrint) & $FF
.3437	8d 1b 0c	sta $0c1b			sta 	deTokeniseVector
.343a	a9 35		lda #$35			lda 	#(deTokenPrint) >> 8
.343c	8d 1c 0c	sta $0c1c			sta 	1+(deTokeniseVector)
.343f	68		pla				pla
.3440					Detokenise:
.3440	18		clc				clc
.3441	69 06		adc #$06			adc 	#6
.3443	8d 1e 0c	sta $0c1e			sta 	indent
.3446	a9 ff		lda #$ff			lda 	#$FF 					; last thing printed is a dummy value.
.3448	8d 1d 0c	sta $0c1d			sta 	lastCharacterClass
.344b	a2 02		ldx #$02			ldx 	#2
.344d	20 01 30	jsr $3001			jsr 	MInt32False
.3450	a0 01		ldy #$01			ldy 	#1 						; copy line number to stack,2 (as using stack 0,1)
.3452	b1 28		lda ($28),y			lda 	(codePtr),y
.3454	95 48		sta $48,x			sta 	esInt0,x
.3456	c8		iny				iny
.3457	b1 28		lda ($28),y			lda 	(codePtr),y
.3459	95 50		sta $50,x			sta 	esInt1,x
.345b	a9 84		lda #$84			lda 	#LTYLineNumber
.345d	20 3d 35	jsr $353d			jsr 	ListOutputCharacter
.3460	a9 0a		lda #$0a			lda 	#10 					; base 10
.3462	20 01 35	jsr $3501			jsr 	DTPrintInteger 			; print as integer.
.3465	a0 00		ldy #$00			ldy 	#0 						; get length
.3467	b1 2a		lda ($2a),y			lda 	(temp0),y 				; into X
.3469	aa		tax				tax
.346a					_DTPadOut:
.346a	a9 20		lda #$20			lda 	#" " 					; pad out to indent.
.346c	20 3d 35	jsr $353d			jsr 	ListOutputCharacter
.346f	e8		inx				inx
.3470	ec 1e 0c	cpx $0c1e			cpx 	indent
.3473	d0 f5		bne $346a			bne 	_DTPadOut
.3475	a0 03		ldy #$03			ldy 	#3 						; start position.
.3477					_DTListLoop
.3477	b1 28		lda ($28),y			lda 	(codePtr),y
.3479	c9 85		cmp #$85			cmp 	#TOK_STR 				; Inline string.
.347b	f0 58		beq $34d5			beq 	_DTIsString
.347d	c9 84		cmp #$84			cmp 	#TOK_FPC 				; Floating point
.347f	f0 7c		beq $34fd			beq 	_DTIsFloat
.3481	c9 c5		cmp #$c5			cmp 	#TKW_AMP 				; & hex marker
.3483	f0 16		beq $349b			beq 	_DTHexConstant
.3485	c9 80		cmp #$80			cmp 	#TOK_EOL 				; End of Line
.3487	d0 06		bne $348f			bne 	_DTNotEnd
.3489	a9 ff		lda #$ff			lda 	#255 					; print CR
.348b	20 3d 35	jsr $353d			jsr 	ListOutputCharacter
.348e	60		rts				rts
.348f					_DTNotEnd:
.348f	c9 00		cmp #$00			cmp 	#0
.3491	30 36		bmi $34c9			bmi 	_DTIsToken
.3493	c9 40		cmp #$40			cmp 	#$40
.3495	90 38		bcc $34cf			bcc 	_DTIsIdentifier
.3497	a9 0a		lda #$0a			lda 	#10 					; this is the base
.3499	d0 08		bne $34a3			bne 	_DTConstant
.349b					_DTHexConstant:
.349b	a9 26		lda #$26			lda 	#"&"
.349d	20 3d 35	jsr $353d			jsr 	ListOutputCharacter
.34a0	c8		iny				iny
.34a1	a9 10		lda #$10			lda 	#16
.34a3					_DTConstant:
.34a3	48		pha				pha
.34a4	a9 00		lda #$00			lda 	#0 							; now constant, may need spaces
.34a6	20 7e 35	jsr $357e			jsr 	DTSwitchMode
.34a9	a9 86		lda #$86			lda 	#LTYConstant
.34ab	20 3d 35	jsr $353d			jsr 	ListOutputCharacter
.34ae	a2 02		ldx #$02			ldx 	#2
.34b0	8a		txa				txa
.34b1	a2 0a		ldx #$0a		ldx	#10
.34b3	20 6b 31	jsr $316b		jsr	mainHandler
.34b6	aa		tax				tax
.34b7	20 d4 1d	jsr $1dd4			jsr 	TOSToTemp0
.34ba	68		pla				pla
.34bb	85 32		sta $32				sta 	tempShort
.34bd	98		tya				tya
.34be	48		pha				pha
.34bf	a5 32		lda $32				lda 	tempShort
.34c1	20 01 35	jsr $3501			jsr 	DTPrintInteger
.34c4	68		pla				pla
.34c5	a8		tay				tay
.34c6	4c 77 34	jmp $3477			jmp 	_DTListLoop
.34c9					_DTIsToken:
.34c9	20 d7 35	jsr $35d7			jsr 	DTDecodeToken
.34cc	4c 77 34	jmp $3477			jmp 	_DTListLoop
.34cf					_DTIsIdentifier:
.34cf	20 90 35	jsr $3590			jsr 	DTIdentifier
.34d2	4c 77 34	jmp $3477			jmp 	_DTListLoop
.34d5					_DTIsString:
.34d5	a9 01		lda #$01			lda 	#1 							; now punctuation, may need spaces
.34d7	20 7e 35	jsr $357e			jsr 	DTSwitchMode
.34da	a9 81		lda #$81			lda 	#LTYString
.34dc	20 3d 35	jsr $353d			jsr 	ListOutputCharacter
.34df	a9 22		lda #$22			lda 	#'"'						; open quote
.34e1	20 3d 35	jsr $353d			jsr 	ListOutputCharacter
.34e4	a2 02		ldx #$02			ldx 	#2 							; evaluate string to TOS2.
.34e6	8a		txa				txa
.34e7	a2 0a		ldx #$0a		ldx	#10
.34e9	20 6b 31	jsr $316b		jsr	mainHandler
.34ec	aa		tax				tax
.34ed	20 d4 1d	jsr $1dd4			jsr 	TOSToTemp0
.34f0	a9 00		lda #$00			lda 	#0 							; don't capitalise.
.34f2	20 13 35	jsr $3513			jsr 	DTPrintLengthPrefix
.34f5	a9 22		lda #$22			lda 	#'"'
.34f7	20 3d 35	jsr $353d			jsr 	ListOutputCharacter
.34fa	4c 77 34	jmp $3477			jmp 	_DTListLoop
.34fd					_DTIsFloat:
>34fd	db						.byte 	$DB
.34fe	4c fd 34	jmp $34fd			jmp 	_DTIsFloat

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/detokenise/dtprint.asm

.0c1f					tPrintCount:
>0c1f							.fill 	1
.3501					DTPrintInteger:
.3501	48		pha				pha
.3502	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.3504	85 2a		sta $2a				sta 	temp0
.3506	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.3508	85 2b		sta $2b				sta 	1+(temp0)
.350a	68		pla				pla
.350b	a8		tay				tay
.350c	8a		txa				txa
.350d	a2 0c		ldx #$0c		ldx	#12
.350f	20 6b 31	jsr $316b		jsr	mainHandler
.3512	aa		tax				tax
.3513					DTPrintLengthPrefix:
.3513	aa		tax				tax
.3514	98		tya				tya
.3515	48		pha				pha
.3516	a0 00		ldy #$00			ldy 	#0
.3518	b1 2a		lda ($2a),y			lda 	(temp0),y
.351a	8d 1f 0c	sta $0c1f			sta 	tPrintCount
.351d	f0 1b		beq $353a			beq 	_DTPLPExit
.351f					_DTPLPLoop:
.351f	c8		iny				iny
.3520	b1 2a		lda ($2a),y			lda 	(temp0),y
.3522	29 7f		and #$7f			and 	#$7F
.3524	e0 00		cpx #$00			cpx 	#0
.3526	f0 0a		beq $3532			beq 	_DTPLPNoCase
.3528	c9 41		cmp #$41			cmp 	#"A"
.352a	90 06		bcc $3532			bcc 	_DTPLPNoCase
.352c	c9 5b		cmp #$5b			cmp 	#"Z"+1
.352e	b0 02		bcs $3532			bcs 	_DTPLPNoCase
.3530	49 20		eor #$20			eor 	#"A"^"a"
.3532					_DTPLPNoCase
.3532	20 3d 35	jsr $353d			jsr 	ListOutputCharacter
.3535	ce 1f 0c	dec $0c1f			dec 	tPrintCount
.3538	d0 e5		bne $351f			bne 	_DTPLPLoop
.353a					_DTPLPExit:
.353a	68		pla				pla
.353b	a8		tay				tay
.353c	60		rts				rts
.353d					ListOutputCharacter:
.353d	85 32		sta $32				sta 	tempShort
.353f	48		pha				pha
.3540	8a		txa				txa
.3541	48		pha				pha
.3542	98		tya				tya
.3543	48		pha				pha
.3544	a5 32		lda $32				lda 	tempShort
.3546	c9 20		cmp #$20			cmp 	#32
.3548	b0 0c		bcs $3556			bcs		_LOCHiBit
.354a	09 40		ora #$40			ora 	#64
.354c	c9 40		cmp #$40			cmp 	#64
.354e	f0 06		beq $3556			beq 	_LOCHiBit
.3550	c9 5b		cmp #$5b			cmp 	#65+26
.3552	b0 02		bcs $3556			bcs 	_LOCHiBit
.3554	69 20		adc #$20			adc 	#32
.3556					_LOCHiBit:
.3556	20 5f 35	jsr $355f			jsr 	_LOCCallVector
.3559	68		pla				pla
.355a	a8		tay				tay
.355b	68		pla				pla
.355c	aa		tax				tax
.355d	68		pla				pla
.355e					_LOCExit:
.355e	60		rts				rts
.355f					_LOCCallVector:
.355f	6c 1b 0c	jmp ($0c1b)			jmp 	(deTokeniseVector)
.3562					deTokenPrint:
.3562	c9 00		cmp #$00			cmp 	#0
.3564	30 06		bmi $356c			bmi 	_dtpInk
.3566	a2 16		ldx #$16		ldx	#22
.3568	20 b9 14	jsr $14b9		jsr	deviceHandler
.356b	60		rts				rts
.356c	c9 ff		cmp #$ff	_dtpInk:cmp 	#255
.356e	f0 08		beq $3578			beq 	_dtpCR
.3570	29 07		and #$07			and 	#7
.3572	a2 08		ldx #$08		ldx	#8
.3574	20 b9 14	jsr $14b9		jsr	deviceHandler
.3577	60		rts				rts
.3578					_dtpCR:
.3578	a2 04		ldx #$04		ldx	#4
.357a	20 b9 14	jsr $14b9		jsr	deviceHandler
.357d	60		rts				rts
.357e					DTSwitchMode:
.357e	cd 1d 0c	cmp $0c1d			cmp 	LastCharacterClass
.3581	f0 04		beq $3587			beq 	_DTSMNoChange
.3583	8d 1d 0c	sta $0c1d			sta 	LastCharacterClass
.3586					_DTSMExit:
.3586	60		rts				rts
.3587					_DTSMNoChange:
.3587	c9 01		cmp #$01			cmp 	#1
.3589	f0 fb		beq $3586			beq 	_DTSMExit
.358b	a9 20		lda #$20			lda 	#" "
.358d	4c 3d 35	jmp $353d			jmp 	ListOutputCharacter

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/detokenise/identifier.asm

.3590					DTIdentifier:
.3590	a9 00		lda #$00			lda 	#0 							; now text, may need spaces
.3592	20 7e 35	jsr $357e			jsr 	DTSwitchMode
.3595	a9 87		lda #$87			lda 	#LTYIdentifier
.3597	20 3d 35	jsr $353d			jsr 	ListOutputCharacter
.359a					_DTILoop:
.359a	b1 28		lda ($28),y			lda 	(codePtr),y 				; output main bit of identifier.
.359c	c9 2d		cmp #$2d			cmp 	#"-"						; make - back to _
.359e	d0 02		bne $35a2			bne 	_DTINotUS
.35a0	a9 5f		lda #$5f			lda 	#"_"
.35a2					_DTINotUS:
.35a2	20 3d 35	jsr $353d			jsr 	ListOutputCharacter
.35a5	c8		iny				iny
.35a6	b1 28		lda ($28),y			lda 	(codePtr),y 				; until end identifier marker.
.35a8	c9 3a		cmp #$3a			cmp 	#$3A
.35aa	90 ee		bcc $359a			bcc 	_DTILoop
.35ac	c8		iny				iny
.35ad	c9 3a		cmp #$3a			cmp 	#$3A 						; is it integer non array
.35af	f0 25		beq $35d6			beq 	_DTIExit 					; no postfix.
.35b1	48		pha				pha
.35b2	a9 01		lda #$01			lda  	#1 							; it ends in punctuation
.35b4	8d 1d 0c	sta $0c1d			sta 	LastCharacterClass
.35b7	a9 82		lda #$82			lda 	#LTYPunctuation
.35b9	20 3d 35	jsr $353d			jsr 	ListOutputCharacter
.35bc	68		pla				pla
.35bd	c9 3b		cmp #$3b			cmp 	#$3B
.35bf	f0 10		beq $35d1			beq 	_DTIArray
.35c1	4a		lsr a				lsr 	a 							; array flag in C
.35c2	08		php				php
.35c3	49 1e		eor #$1e			eor 	#$3C/2 						; check if $
.35c5	f0 02		beq $35c9			beq 	_DTIDollar
.35c7	a9 07		lda #$07			lda 	#"$"^"#" 					; this if #, 0 if $
.35c9					_DTIDollar:
.35c9	49 24		eor #$24			eor 	#"$"
.35cb	20 3d 35	jsr $353d			jsr 	ListOutputCharacter
.35ce	28		plp				plp
.35cf	90 05		bcc $35d6			bcc 	_DTIExit
.35d1					_DTIArray:
.35d1	a9 28		lda #$28			lda 	#"("
.35d3	20 3d 35	jsr $353d			jsr 	ListOutputCharacter
.35d6					_DTIExit:
.35d6	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/detokenise/token.asm

.35d7					DTDecodeToken:
.35d7	a2 00		ldx #$00			ldx 	#0 							; table number to use
.35d9	b1 28		lda ($28),y			lda 	(codePtr),y
.35db	c9 84		cmp #$84			cmp 	#$84
.35dd	b0 05		bcs $35e4			bcs 	_DTNotShift
.35df	29 03		and #$03			and 	#3 							; get the shift 1..3
.35e1	0a		asl a				asl 	a 							; put 2 x in X
.35e2	aa		tax				tax
.35e3	c8		iny				iny
.35e4					_DTNotShift:
.35e4	bd e4 38	lda $38e4,x			lda 	TokenTableAddress,x 		; get the token table to use to decode it.
.35e7	85 2a		sta $2a				sta 	temp0 						; point into temp0
.35e9	bd e5 38	lda $38e5,x			lda 	TokenTableAddress+1,x
.35ec	85 2b		sta $2b				sta 	temp0+1
.35ee	b1 28		lda ($28),y			lda 	(codePtr),y 				; get the token value.
.35f0	c8		iny				iny 								; consume it.
.35f1	aa		tax				tax
.35f2	98		tya				tya
.35f3	48		pha				pha
.35f4					_DTFindText:
.35f4	e0 86		cpx #$86			cpx 	#$86 						; finished ?
.35f6	f0 11		beq $3609			beq 	_DTFoundText
.35f8	ca		dex				dex
.35f9	a0 00		ldy #$00			ldy 	#0
.35fb	38		sec				sec
.35fc	b1 2a		lda ($2a),y			lda 	(temp0),y
.35fe	65 2a		adc $2a				adc 	temp0
.3600	85 2a		sta $2a				sta 	temp0
.3602	90 f0		bcc $35f4			bcc 	_DTFindText
.3604	e6 2b		inc $2b				inc 	temp0+1
.3606	4c f4 35	jmp $35f4			jmp 	_DTFindText
.3609					_DTFoundText:
.3609	a0 01		ldy #$01			ldy 	#1 							; get first character
.360b	b1 2a		lda ($2a),y			lda 	(temp0),y
.360d	29 7f		and #$7f			and 	#$7F 						; will have bit 7 set.
.360f	c9 41		cmp #$41			cmp 	#"A" 						; check for punctuation.
.3611	90 11		bcc $3624			bcc 	_DTIsPunctuation
.3613	c9 5b		cmp #$5b			cmp 	#"Z"+1
.3615	b0 0d		bcs $3624			bcs 	_DTIsPunctuation
.3617	a9 00		lda #$00			lda 	#0 							; now text, may need spaces
.3619	20 7e 35	jsr $357e			jsr 	DTSwitchMode
.361c	a9 83		lda #$83			lda 	#LTYKeyword
.361e	20 3d 35	jsr $353d			jsr 	ListOutputCharacter
.3621	4c 2e 36	jmp $362e			jmp 	_DTPrint
.3624					_DTIsPunctuation:
.3624	a9 01		lda #$01			lda 	#1 							; now punctuation, may need spaces
.3626	20 7e 35	jsr $357e			jsr 	DTSwitchMode
.3629	a9 82		lda #$82			lda 	#LTYPunctuation
.362b	20 3d 35	jsr $353d			jsr 	ListOutputCharacter
.362e					_DTPrint:
.362e	a9 01		lda #$01			lda 	#1 							; fix case.
.3630	20 13 35	jsr $3513			jsr 	DTPrintLengthPrefix 		; print it out.
.3633	a0 00		ldy #$00			ldy 	#0
.3635	b1 2a		lda ($2a),y			lda 	(temp0),y
.3637	a8		tay				tay
.3638	b1 2a		lda ($2a),y			lda 	(temp0),y
.363a	29 7f		and #$7f			and 	#$7F 						; will have bit 7 set.
.363c	c9 41		cmp #$41			cmp 	#"A" 						; check for punctuation.
.363e	90 04		bcc $3644			bcc 	_DTIsNowPunctuation
.3640	c9 5b		cmp #$5b			cmp 	#"Z"+1
.3642	90 05		bcc $3649			bcc 	_DTPExit
.3644					_DTIsNowPunctuation:
.3644	a9 01		lda #$01			lda 	#1
.3646	8d 1d 0c	sta $0c1d			sta		LastCharacterClass
.3649					_DTPExit:
.3649	68		pla				pla
.364a	a8		tay				tay
.364b	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/search.asm

.0c20					currentSet:
>0c20							.fill 	1
.364c					TokenSearch:
.364c	8a		txa				txa
.364d	48		pha				pha
.364e	98		tya				tya
.364f	48		pha				pha
.3650	a9 00		lda #$00			lda 	#0
.3652	8d 20 0c	sta $0c20			sta 	currentSet
.3655					_TSLoop:
.3655	ad 20 0c	lda $0c20			lda 	currentSet 					; 2 x currentset in X
.3658	0a		asl a				asl 	a
.3659	aa		tax				tax
.365a	bd e4 38	lda $38e4,x			lda 	TokenTableAddress,x 		; set temp0 to the table address
.365d	85 2a		sta $2a				sta 	temp0
.365f	bd e5 38	lda $38e5,x			lda 	TokenTableAddress+1,x
.3662	85 2b		sta $2b				sta 	temp0+1
.3664	20 8b 36	jsr $368b			jsr 	TokenSearchOne 				; search one table
.3667	b0 0d		bcs $3676			bcs 	_TSFound 					; found a token.
.3669	ee 20 0c	inc $0c20			inc 	currentSet 					; next set
.366c	ad 20 0c	lda $0c20			lda 	currentSet
.366f	c9 04		cmp #$04			cmp 	#4
.3671	d0 e2		bne $3655			bne 	_TSLoop 					; back if not done all four.
.3673	18		clc				clc 								; clear carry and exit
.3674	90 10		bcc $3686			bcc 	_TSExit
.3676					_TSFound:
.3676	48		pha				pha 								; save token
.3677	ad 20 0c	lda $0c20			lda 	currentSet					; if set zero no shift
.367a	f0 05		beq $3681			beq 	_TSNoShift
.367c	09 80		ora #$80			ora 	#$80 						; Write as $81-$83
.367e	20 3a 37	jsr $373a			jsr 	TokenWrite
.3681					_TSNoShift:
.3681	68		pla				pla 								; get token back
.3682	20 3a 37	jsr $373a			jsr 	TokenWrite 					; write it
.3685	38		sec				sec 								; carry set indicating success
.3686					_TSExit:
.3686	68		pla				pla
.3687	a8		tay				tay
.3688	68		pla				pla
.3689	aa		tax				tax
.368a	60		rts				rts
.368b					TokenSearchOne:
.368b	a2 86		ldx #$86			ldx 	#$86 						; current token being tested.
.368d					_TSOLoop:
.368d	a0 00		ldy #$00			ldy 	#0
.368f	b1 2a		lda ($2a),y			lda 	(temp0),y 					; get length of token
.3691	f0 26		beq $36b9			beq 	_TSOFail 					; if zero, end of table
.3693	cd cf 0a	cmp $0acf			cmp 	convertBuffer 				; length is the same, compare the text matches.
.3696	f0 11		beq $36a9			beq 	_TSOCheckText
.3698					_TSONext:
.3698	e8		inx				inx 								; bump token
.3699	a0 00		ldy #$00			ldy 	#0							; get length
.369b	b1 2a		lda ($2a),y			lda 	(temp0),y
.369d	38		sec				sec
.369e	65 2a		adc $2a				adc 	temp0 						; add to temp0 + 1
.36a0	85 2a		sta $2a				sta 	temp0
.36a2	90 e9		bcc $368d			bcc 	_TSOLoop
.36a4	e6 2b		inc $2b				inc 	temp0+1
.36a6	4c 8d 36	jmp $368d			jmp 	_TSOLoop
.36a9					_TSOCheckText:
.36a9	a8		tay				tay 								; compare length downto 1.
.36aa					_TSOCheckLoop:
.36aa	b1 2a		lda ($2a),y			lda 	(temp0),y 					; use EOR to compare
.36ac	59 cf 0a	eor $0acf,y			eor 	convertBuffer,y
.36af	29 7f		and #$7f			and 	#$7F 						; ignore bit 7
.36b1	d0 e5		bne $3698			bne 	_TSONext 					; different goto next.
.36b3	88		dey				dey 								; do all
.36b4	d0 f4		bne $36aa			bne 	_TSOCheckLoop
.36b6	8a		txa				txa 								; return token in A and carry set
.36b7	38		sec				sec
.36b8	60		rts				rts
.36b9					_TSOFail:
.36b9	18		clc				clc
.36ba	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/test.asm

.36bb					TokTest:
.36bb	a2 ff		ldx #$ff				ldx 	#$FF
.36bd	9a		txs					txs
.36be	a9 db		lda #$db			lda 	#(TokenText1) & $FF
.36c0	85 28		sta $28				sta 	codePtr
.36c2	a9 36		lda #$36			lda 	#(TokenText1) >> 8
.36c4	85 29		sta $29				sta 	1+(codePtr)
.36c6	20 db 36	jsr $36db				jsr 	Tokenise
.36c9	a2 00		ldx #$00	TokStop:	ldx 	#0
.36cb	bd db 36	lda $36db,x	_TokCheck:	lda 	TokenBytes1,x
.36ce	dd 24 0c	cmp $0c24,x				cmp 	tokenBuffer,x
.36d1	d0 fe		bne $36d1	_TokFail:	bne 	_TokFail
.36d3	e8		inx					inx
.36d4	c9 80		cmp #$80				cmp 	#$80
.36d6	d0 f3		bne $36cb				bne 	_TokCheck
.36d8	4c ff ff	jmp $ffff				jmp 	$FFFF

;******  Processing file: tokeniser/tokenise/../../generated/toktest.inc

.36db					TokenText1:
.36db					TokenBytes1:

;******  Return to file: tokeniser/tokenise/test.asm


;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokenise.asm

.0c21					tokenHeader:
>0c21							.fill 	3
.0c24					tokenBuffer:
>0c24							.fill 	256
.0d24					tokenBufferIndex:
>0d24							.fill 	1
.36db					Tokenise:
.36db	20 53 37	jsr $3753			jsr 	TokeniseMakeASCIIZ 			; convert to ASCIIZ string.
.36de					TokeniseASCIIZ:
.36de	20 64 37	jsr $3764			jsr 	TokeniseFixCase 			; remove controls and lower case outside quotes.
.36e1	a9 00		lda #$00			lda 	#0 							; reset the token buffer index
.36e3	8d 24 0d	sta $0d24			sta 	tokenBufferIndex
.36e6	a8		tay				tay 								; start pointer
.36e7	a9 80		lda #$80			lda 	#$80 						; empty token buffer ($80 ends it)
.36e9	8d 24 0c	sta $0c24			sta 	tokenBuffer
.36ec					_TokLoop:
.36ec	b1 28		lda ($28),y			lda 	(codePtr),y 				; get next character
.36ee	f0 46		beq $3736			beq 	_TokExit 					; if zero, then exit.
.36f0	c8		iny				iny 								; skip over spaces.
.36f1	c9 20		cmp #$20			cmp 	#" "
.36f3	f0 f7		beq $36ec			beq 	_TokLoop
.36f5	88		dey				dey 								; point back to character.
.36f6	c9 26		cmp #$26			cmp 	#"&"						; Hexadecimal constant.
.36f8	f0 18		beq $3712			beq 	_TokHexConst
.36fa	c9 22		cmp #$22			cmp 	#'"'						; Quoted String
.36fc	f0 23		beq $3721			beq 	_TokQString
.36fe	c9 5b		cmp #$5b			cmp 	#"Z"+1 						; > 'Z' is punctuation
.3700	b0 26		bcs $3728			bcs 	_TokPunctuation
.3702	c9 41		cmp #$41			cmp 	#"A" 						; A..Z identifier
.3704	b0 29		bcs $372f			bcs 	_TokIdentifier
.3706	c9 3a		cmp #$3a			cmp 	#"9"+1
.3708	b0 1e		bcs $3728			bcs 	_TokPunctuation 			; between 9 and A exclusive, punctuation
.370a	c9 30		cmp #$30			cmp 	#"0"
.370c	90 1a		bcc $3728			bcc 	_TokPunctuation 			; < 0, punctuation.
.370e	a9 0a		lda #$0a			lda 	#10  						; 0..9 constant in base 10.
.3710	d0 08		bne $371a			bne 	_TokConst
.3712					_TokHexConst:
.3712	c8		iny				iny									; consume token.
.3713	a9 c5		lda #$c5			lda 	#TKW_AMP 					; Write ampersand token out
.3715	20 3a 37	jsr $373a			jsr 	TokenWrite
.3718	a9 10		lda #$10			lda 	#16
.371a					_TokConst:
.371a	20 22 38	jsr $3822			jsr 	TokeniseInteger
.371d	b0 cd		bcs $36ec			bcs 	_TokLoop
.371f	90 17		bcc $3738			bcc 	_TokFail
.3721					_TokQString:
.3721	20 b8 38	jsr $38b8			jsr 	TokeniseString
.3724	b0 c6		bcs $36ec			bcs 	_TokLoop
.3726	90 10		bcc $3738			bcc 	_TokFail
.3728					_TokPunctuation:
.3728	20 97 38	jsr $3897			jsr 	TokenisePunctuation
.372b	b0 bf		bcs $36ec			bcs 	_TokLoop
.372d	90 09		bcc $3738			bcc 	_TokFail
.372f					_TokIdentifier:
.372f	20 93 37	jsr $3793			jsr 	TokeniseIdentifier
.3732	b0 b8		bcs $36ec			bcs 	_TokLoop
.3734	90 02		bcc $3738			bcc 	_TokFail
.3736					_TokExit:
.3736	38		sec				sec
.3737	60		rts				rts
.3738					_TokFail:
.3738	18		clc				clc
.3739	60		rts				rts
.373a					TokenWrite:
.373a	85 32		sta $32				sta 	tempShort 					; save XA
.373c	48		pha				pha
.373d	8a		txa				txa
.373e	48		pha				pha
.373f	a5 32		lda $32				lda 	tempShort
.3741	ae 24 0d	ldx $0d24			ldx 	tokenBufferIndex 			; geet index
.3744	9d 24 0c	sta $0c24,x			sta 	tokenBuffer,x 				; write byte to buffer
.3747	a9 80		lda #$80			lda 	#TOK_EOL 					; pre-emptively write EOL marker after
.3749	9d 25 0c	sta $0c25,x			sta 	tokenBuffer+1,x
.374c	ee 24 0d	inc $0d24			inc 	tokenBufferIndex 			; bump index
.374f	68		pla				pla
.3750	aa		tax				tax
.3751	68		pla				pla
.3752	60		rts				rts
.3753					TokeniseMakeASCIIZ:
.3753	a0 00		ldy #$00			ldy 	#0							; get length of string.
.3755	b1 28		lda ($28),y			lda 	(codePtr),y
.3757	a8		tay				tay
.3758	c8		iny				iny 								; +1, the NULL goes here.
.3759	a9 00		lda #$00			lda 	#0
.375b	91 28		sta ($28),y			sta 	(codePtr),y 				; write the trailing NULL.
.375d	e6 28		inc $28				inc 	codePtr 					; bump the pointer.
.375f	d0 02		bne $3763			bne 	_TMKAExit
.3761	e6 29		inc $29				inc 	codePtr+1
.3763					_TMKAExit:
.3763	60		rts				rts
.3764					TokeniseFixCase:
.3764	a0 00		ldy #$00			ldy 	#0 							; position in buffer.
.3766	a2 01		ldx #$01			ldx 	#1 							; bit 0 of this is 'in quotes'
.3768					_TFCFlipQ:
.3768	8a		txa				txa
.3769	49 01		eor #$01			eor 	#1
.376b	aa		tax				tax
.376c					_TFCLoop:
.376c	b1 28		lda ($28),y			lda 	(codePtr),y 				; get character
.376e	f0 22		beq $3792			beq 	_TFCExit 					; if zero exit.
.3770	c9 20		cmp #$20			cmp 	#32 						; if control
.3772	90 1a		bcc $378e			bcc 	_TFCControl
.3774	c8		iny				iny 								; preconsume
.3775	c9 22		cmp #$22			cmp 	#'"'
.3777	f0 ef		beq $3768			beq 	_TFCFlipQ
.3779	c9 61		cmp #$61			cmp 	#"a"						; check if L/C
.377b	90 ef		bcc $376c			bcc 	_TFCLoop
.377d	c9 7b		cmp #$7b			cmp 	#"z"+1
.377f	b0 eb		bcs $376c			bcs 	_TFCLoop
.3781	e0 00		cpx #$00			cpx 	#0 							; in quotes, if so, leave alone.
.3783	d0 e7		bne $376c			bne 	_TFCLoop
.3785	88		dey				dey
.3786	49 20		eor #$20			eor 	#"A"^"a"					; make U/C
.3788					_TFCWrite:
.3788	91 28		sta ($28),y			sta 	(codePtr),y
.378a	c8		iny				iny
.378b	4c 6c 37	jmp $376c			jmp 	_TFCLoop
.378e					_TFCControl:
.378e	a9 20		lda #$20			lda 	#" "
.3790	d0 f6		bne $3788			bne 	_TFCWrite
.3792					_TFCExit:
.3792	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokident.asm

.3793					TokeniseIdentifier:
.3793	a2 00		ldx #$00			ldx 	#0
.3795					_TICopyID:
.3795	b1 28		lda ($28),y			lda 	(codePtr),y					; get characters
.3797	c9 5f		cmp #$5f			cmp 	#"_" 						; underscore converted to minus internally.
.3799	f0 16		beq $37b1			beq 	_TICopyUnderscore
.379b	c9 2e		cmp #$2e			cmp 	#"."
.379d	f0 14		beq $37b3			beq 	_TICopyIn
.379f	c9 30		cmp #$30			cmp 	#"0"
.37a1	90 1b		bcc $37be			bcc 	_TIEndCopy
.37a3	c9 3a		cmp #$3a			cmp 	#"9"+1
.37a5	90 0c		bcc $37b3			bcc 	_TICopyIn
.37a7	c9 41		cmp #$41			cmp 	#"A"
.37a9	90 13		bcc $37be			bcc 	_TIEndCopy
.37ab	c9 5b		cmp #$5b			cmp 	#"Z"+1
.37ad	b0 0f		bcs $37be			bcs		_TIEndCopy
.37af	90 02		bcc $37b3			bcc 	_TICopyIn
.37b1					_TICopyUnderScore:
.37b1	a9 2d		lda #$2d			lda 	#"-"						; _ is mapped to -
.37b3					_TICopyIn:
.37b3	e8		inx				inx 								; write into buffer in 7 bit ASCII form
.37b4	9d cf 0a	sta $0acf,x			sta 	convertBuffer,x
.37b7	8e cf 0a	stx $0acf			stx 	convertBuffer
.37ba	c8		iny				iny 								; next character
.37bb	4c 95 37	jmp $3795			jmp 	_TICopyID 					; loop round
.37be					_TIEndCopy:
.37be	a9 24		lda #$24			lda 	#"$"
.37c0	20 15 38	jsr $3815			jsr 	TIDCheckCopy
.37c3	a9 23		lda #$23			lda 	#"#"
.37c5	20 15 38	jsr $3815			jsr 	TIDCheckCopy
.37c8	a9 28		lda #$28			lda 	#"("
.37ca	20 15 38	jsr $3815			jsr 	TIDCheckCopy
.37cd	20 4c 36	jsr $364c			jsr 	TokenSearch 				; is it a token
.37d0	b0 41		bcs $3813			bcs 	_TIExit 					; if so, then exit.
.37d2	98		tya				tya
.37d3	48		pha				pha
.37d4	a0 3a		ldy #$3a			ldy 	#$3A 						; default type.
.37d6	ae cf 0a	ldx $0acf			ldx 	convertBuffer 				; is last character (
.37d9	bd cf 0a	lda $0acf,x			lda 	convertBuffer,x
.37dc	c9 28		cmp #$28			cmp 	#"("
.37de	d0 02		bne $37e2			bne 	_TINotArray
.37e0	ca		dex				dex 								; yes, remove it and convert to array.
.37e1	c8		iny				iny
.37e2					_TINotArray:
.37e2	bd cf 0a	lda $0acf,x			lda 	convertBuffer,x 			; check for $
.37e5	c9 24		cmp #$24			cmp 	#"$"
.37e7	d0 03		bne $37ec			bne 	_TINotString
.37e9	ca		dex				dex
.37ea	c8		iny				iny
.37eb	c8		iny				iny
.37ec					_TINotString:
.37ec	bd cf 0a	lda $0acf,x			lda 	convertBuffer,x 			; check for #
.37ef	c9 23		cmp #$23			cmp 	#"#"
.37f1	d0 05		bne $37f8			bne 	_TINotFloat
.37f3	ca		dex				dex
.37f4	c8		iny				iny
.37f5	c8		iny				iny
.37f6	c8		iny				iny
.37f7	c8		iny				iny
.37f8					_TINotFloat:
.37f8	e8		inx				inx 								; write end marker for identifier.
.37f9	98		tya				tya
.37fa	9d cf 0a	sta $0acf,x			sta 	convertBuffer,x
.37fd	8e cf 0a	stx $0acf			stx 	convertBuffer 				; update length.
.3800	a2 01		ldx #$01			ldx 	#1
.3802					_TIOutput:
.3802	bd cf 0a	lda $0acf,x			lda 	convertBuffer,x
.3805	29 3f		and #$3f			and 	#$3F
.3807	48		pha				pha
.3808	20 3a 37	jsr $373a			jsr 	TokenWrite
.380b	e8		inx				inx
.380c	68		pla				pla
.380d	c9 3a		cmp #$3a			cmp 	#$3A
.380f	90 f1		bcc $3802			bcc 	_TIOutput
.3811	68		pla				pla
.3812	a8		tay				tay
.3813					_TIExit:
.3813	38		sec				sec 								; this can't fail.
.3814	60		rts				rts
.3815					TIDCheckCopy:
.3815	d1 28		cmp ($28),y			cmp 	(codePtr),y
.3817	d0 08		bne $3821			bne 	_TIDCCExit
.3819	e8		inx				inx
.381a	9d cf 0a	sta $0acf,x			sta 	convertBuffer,x
.381d	8e cf 0a	stx $0acf			stx 	convertBuffer
.3820	c8		iny				iny
.3821					_TIDCCExit:
.3821	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokinteger.asm

.3822					TokeniseInteger:
.3822	85 2c		sta $2c				sta 	temp1 						; save base
.3824	a2 00		ldx #$00			ldx 	#0							; count of chars so far
.3826	8e cf 0a	stx $0acf			stx 	convertBuffer
.3829					_TIGetChars:
.3829	b1 28		lda ($28),y			lda 	(codePtr),y 				; check character is numeric
.382b	c9 30		cmp #$30			cmp 	#"0"
.382d	90 1f		bcc $384e			bcc 	_TIEndGet
.382f	c9 3a		cmp #$3a			cmp 	#"9"+1
.3831	90 10		bcc $3843			bcc 	_TIHaveChar
.3833	a5 2c		lda $2c				lda 	temp1 						; fail if not hex mode
.3835	c9 0a		cmp #$0a			cmp 	#10
.3837	f0 15		beq $384e			beq 	_TIEndGet
.3839	b1 28		lda ($28),y			lda 	(codePtr),y 				; check legitimate hex.
.383b	c9 41		cmp #$41			cmp 	#"A"
.383d	90 0f		bcc $384e			bcc 	_TIEndGet
.383f	c9 5b		cmp #$5b			cmp 	#"Z"+1
.3841	b0 0b		bcs $384e			bcs 	_TIEndGet
.3843					_TIHaveChar:
.3843	e8		inx				inx 								; write into buffer.
.3844	8e cf 0a	stx $0acf			stx 	convertBuffer
.3847	9d cf 0a	sta $0acf,x			sta 	convertBuffer,x
.384a	c8		iny				iny 								; next char
.384b	4c 29 38	jmp $3829			jmp 	_TIGetChars
.384e					_TIEndGet:
.384e	e0 00		cpx #$00			cpx 	#0 							; no char acquired.
.3850	f0 1c		beq $386e			beq 	_TIFail
.3852	98		tya				tya
.3853	48		pha				pha
.3854	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.3856	85 2a		sta $2a				sta 	temp0
.3858	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.385a	85 2b		sta $2b				sta 	1+(temp0)
.385c	a9 00		lda #$00			lda 	#0 							; stack 0
.385e	a4 2c		ldy $2c				ldy 	temp1 						; base Y
.3860	a2 14		ldx #$14		ldx	#20
.3862	20 6b 31	jsr $316b		jsr	mainHandler
.3865	68		pla				pla
.3866	a8		tay				tay
.3867	90 05		bcc $386e			bcc 	_TIFail 					; didn't convert.
.3869	20 70 38	jsr $3870			jsr 	TIRecursiveOut 				; recursive output ?
.386c	38		sec				sec
.386d	60		rts				rts
.386e					_TIFail:
.386e	18		clc				clc
.386f	60		rts				rts
.3870					TIRecursiveOut:
.3870	a5 48		lda $48				lda 	esInt0 						; get value to output after possible recursion
.3872	29 3f		and #$3f			and 	#$3F
.3874	09 40		ora #$40			ora 	#$40
.3876	48		pha				pha
.3877	a5 48		lda $48				lda 	esInt0 						; are we recursing ?
.3879	29 c0		and #$c0			and 	#$C0
.387b	05 50		ora $50				ora 	esInt1
.387d	05 58		ora $58				ora 	esInt2
.387f	05 60		ora $60				ora 	esInt3
.3881	f0 10		beq $3893			beq 	_TIRONoRecursion
.3883	a2 06		ldx #$06			ldx 	#6 							; shift right x 6
.3885					_TIROShift:
.3885	46 60		lsr $60				lsr 	esInt3
.3887	66 58		ror $58				ror 	esInt2
.3889	66 50		ror $50				ror 	esInt1
.388b	66 48		ror $48				ror 	esInt0
.388d	ca		dex				dex
.388e	d0 f5		bne $3885			bne 	_TIROShift
.3890	20 70 38	jsr $3870			jsr 	TIRecursiveOut 				; call recursively
.3893					_TIRONoRecursion:
.3893	68		pla				pla 								; pull the old bit.
.3894	4c 3a 37	jmp $373a			jmp 	TokenWrite

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokpunct.asm

.3897					TokenisePunctuation:
.3897	b1 28		lda ($28),y			lda	 	(codePtr),y 				; copy next 2 chars into convertBuffer
.3899	8d d0 0a	sta $0ad0			sta 	convertBuffer+1
.389c	c8		iny				iny
.389d	b1 28		lda ($28),y			lda 	(codePtr),y
.389f	8d d1 0a	sta $0ad1			sta 	convertBuffer+2
.38a2	c8		iny				iny 								; Y is +2
.38a3	a9 02		lda #$02			lda 	#2 							; 2 character string.
.38a5	8d cf 0a	sta $0acf			sta 	convertBuffer
.38a8	20 4c 36	jsr $364c			jsr 	TokenSearch 				; search for that token.
.38ab	b0 0a		bcs $38b7			bcs 	_TIFound
.38ad	ce cf 0a	dec $0acf			dec 	convertBuffer 				; make it a 1 character string
.38b0	88		dey				dey 								; Y is now +1
.38b1	20 4c 36	jsr $364c			jsr 	TokenSearch 				; search for that token.
.38b4	b0 01		bcs $38b7			bcs 	_TIFound
.38b6	88		dey				dey 								; Y is now +0, carry clear indicating failure.
.38b7					_TIFound:
.38b7	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokstring.asm

.38b8					TokeniseString:
.38b8	c8		iny				iny 								; skip opening quote
.38b9	a2 ff		ldx #$ff			ldx 	#255 						; count length of string.
.38bb	84 2a		sty $2a				sty 	temp0 						; save start.
.38bd					_TSGetLength:
.38bd	b1 28		lda ($28),y			lda 	(codePtr),y 				; get next
.38bf	f0 21		beq $38e2			beq 	_TSFail						; end of line, fail
.38c1	c8		iny				iny
.38c2	e8		inx				inx
.38c3	c9 22		cmp #$22			cmp 	#'"' 						; until end quote found.
.38c5	d0 f6		bne $38bd			bne 	_TSGetLength
.38c7	a9 85		lda #$85			lda 	#TOK_STR 					; write string token out
.38c9	20 3a 37	jsr $373a			jsr 	TokenWrite
.38cc	8a		txa				txa 								; output length
.38cd	20 3a 37	jsr $373a			jsr 	TokenWrite
.38d0	a4 2a		ldy $2a				ldy 	temp0 						; get original position
.38d2	e0 00		cpx #$00			cpx 	#0 							; check ended
.38d4	f0 09		beq $38df			beq 	_TSExit
.38d6					_TSOutput:
.38d6	b1 28		lda ($28),y			lda 	(codePtr),y					; output character
.38d8	20 3a 37	jsr $373a			jsr 	TokenWrite
.38db	c8		iny				iny
.38dc	ca		dex				dex
.38dd	d0 f7		bne $38d6			bne 	_TSOutput
.38df					_TSExit:
.38df	c8		iny				iny 								; skip ending quote
.38e0	38		sec				sec 								; return CS.
.38e1	60		rts				rts
.38e2					_TSFail:
.38e2	18		clc				clc
.38e3	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokentext.asm

.38e4					TokenTableAddress:
>38e4	ec 38						.word 	Group0Text
>38e6	b9 3a						.word 	Group1Text
>38e8	f4 3b						.word 	Group2Text
>38ea	07 3c						.word 	Group3Text

;******  Processing file: tokeniser/../generated/tokentext0.inc

.38ec					Group0Text:
>38ec	03 41 4e c4				.byte $03,$41,$4e,$c4                  ; $86 and
>38f0	02 4f d2				.byte $02,$4f,$d2                      ; $87 or
>38f3	03 58 4f d2				.byte $03,$58,$4f,$d2                  ; $88 xor
>38f7	02 3e bd				.byte $02,$3e,$bd                      ; $89 >=
>38fa	02 3c bd				.byte $02,$3c,$bd                      ; $8a <=
>38fd	01 be					.byte $01,$be                          ; $8b >
>38ff	01 bc					.byte $01,$bc                          ; $8c <
>3901	01 bd					.byte $01,$bd                          ; $8d =
>3903	02 3c be				.byte $02,$3c,$be                      ; $8e <>
>3906	01 ab					.byte $01,$ab                          ; $8f +
>3908	01 ad					.byte $01,$ad                          ; $90 -
>390a	02 3e be				.byte $02,$3e,$be                      ; $91 >>
>390d	02 3c bc				.byte $02,$3c,$bc                      ; $92 <<
>3910	01 aa					.byte $01,$aa                          ; $93 *
>3912	01 af					.byte $01,$af                          ; $94 /
>3914	03 4d 4f c4				.byte $03,$4d,$4f,$c4                  ; $95 mod
>3918	01 de					.byte $01,$de                          ; $96 ^
>391a	01 a1					.byte $01,$a1                          ; $97 !
>391c	01 bf					.byte $01,$bf                          ; $98 ?
>391e	06 52 45 50 45 41 d4			.byte $06,$52,$45,$50,$45,$41,$d4      ; $99 repeat
>3925	05 57 48 49 4c c5			.byte $05,$57,$48,$49,$4c,$c5          ; $9a while
>392b	03 46 4f d2				.byte $03,$46,$4f,$d2                  ; $9b for
>392f	02 49 c6				.byte $02,$49,$c6                      ; $9c if
>3932	07 44 45 46 50 52 4f c3			.byte $07,$44,$45,$46,$50,$52,$4f,$c3  ; $9d defproc
>393a	05 55 4e 54 49 cc			.byte $05,$55,$4e,$54,$49,$cc          ; $9e until
>3940	04 57 45 4e c4				.byte $04,$57,$45,$4e,$c4              ; $9f wend
>3945	04 4e 45 58 d4				.byte $04,$4e,$45,$58,$d4              ; $a0 next
>394a	04 54 48 45 ce				.byte $04,$54,$48,$45,$ce              ; $a1 then
>394f	05 45 4e 44 49 c6			.byte $05,$45,$4e,$44,$49,$c6          ; $a2 endif
>3955	07 45 4e 44 50 52 4f c3			.byte $07,$45,$4e,$44,$50,$52,$4f,$c3  ; $a3 endproc
>395d	01 a8					.byte $01,$a8                          ; $a4 (
>395f	04 4c 45 4e a8				.byte $04,$4c,$45,$4e,$a8              ; $a5 len(
>3964	04 53 47 4e a8				.byte $04,$53,$47,$4e,$a8              ; $a6 sgn(
>3969	04 41 42 53 a8				.byte $04,$41,$42,$53,$a8              ; $a7 abs(
>396e	07 52 41 4e 44 4f 4d a8			.byte $07,$52,$41,$4e,$44,$4f,$4d,$a8  ; $a8 random(
>3976	04 50 41 47 c5				.byte $04,$50,$41,$47,$c5              ; $a9 page
>397b	04 54 52 55 c5				.byte $04,$54,$52,$55,$c5              ; $aa true
>3980	05 46 41 4c 53 c5			.byte $05,$46,$41,$4c,$53,$c5          ; $ab false
>3986	04 4d 49 4e a8				.byte $04,$4d,$49,$4e,$a8              ; $ac min(
>398b	04 4d 41 58 a8				.byte $04,$4d,$41,$58,$a8              ; $ad max(
>3990	04 53 59 53 a8				.byte $04,$53,$59,$53,$a8              ; $ae sys(
>3995	06 54 49 4d 45 52 a8			.byte $06,$54,$49,$4d,$45,$52,$a8      ; $af timer(
>399c	06 45 56 45 4e 54 a8			.byte $06,$45,$56,$45,$4e,$54,$a8      ; $b0 event(
>39a3	04 47 45 54 a8				.byte $04,$47,$45,$54,$a8              ; $b1 get(
>39a8	06 49 4e 4b 45 59 a8			.byte $06,$49,$4e,$4b,$45,$59,$a8      ; $b2 inkey(
>39af	06 41 4c 4c 4f 43 a8			.byte $06,$41,$4c,$4c,$4f,$43,$a8      ; $b3 alloc(
>39b6	05 43 48 52 24 a8			.byte $05,$43,$48,$52,$24,$a8          ; $b4 chr$(
>39bc	06 4c 45 46 54 24 a8			.byte $06,$4c,$45,$46,$54,$24,$a8      ; $b5 left$(
>39c3	05 4d 49 44 24 a8			.byte $05,$4d,$49,$44,$24,$a8          ; $b6 mid$(
>39c9	07 52 49 47 48 54 24 a8			.byte $07,$52,$49,$47,$48,$54,$24,$a8  ; $b7 right$(
>39d1	05 53 54 52 24 a8			.byte $05,$53,$54,$52,$24,$a8          ; $b8 str$(
>39d7	04 56 41 4c a8				.byte $04,$56,$41,$4c,$a8              ; $b9 val(
>39dc	05 50 45 45 4b a8			.byte $05,$50,$45,$45,$4b,$a8          ; $ba peek(
>39e2	05 44 45 45 4b a8			.byte $05,$44,$45,$45,$4b,$a8          ; $bb deek(
>39e8	05 4c 45 45 4b a8			.byte $05,$4c,$45,$45,$4b,$a8          ; $bc leek(
>39ee	04 41 53 43 a8				.byte $04,$41,$53,$43,$a8              ; $bd asc(
>39f3	04 49 4e 54 a8				.byte $04,$49,$4e,$54,$a8              ; $be int(
>39f8	06 46 4c 4f 41 54 a8			.byte $06,$46,$4c,$4f,$41,$54,$a8      ; $bf float(
>39ff	06 49 53 56 41 4c a8			.byte $06,$49,$53,$56,$41,$4c,$a8      ; $c0 isval(
>3a06	07 55 50 50 45 52 24 a8			.byte $07,$55,$50,$50,$45,$52,$24,$a8  ; $c1 upper$(
>3a0e	07 4c 4f 57 45 52 24 a8			.byte $07,$4c,$4f,$57,$45,$52,$24,$a8  ; $c2 lower$(
>3a16	01 c0					.byte $01,$c0                          ; $c3 @
>3a18	01 fe					.byte $01,$fe                          ; $c4 ~
>3a1a	01 a6					.byte $01,$a6                          ; $c5 &
>3a1c	05 47 45 54 24 a8			.byte $05,$47,$45,$54,$24,$a8          ; $c6 get$(
>3a22	07 49 4e 4b 45 59 24 a8			.byte $07,$49,$4e,$4b,$45,$59,$24,$a8  ; $c7 inkey$(
>3a2a	03 4d 45 cd				.byte $03,$4d,$45,$cd                  ; $c8 mem
>3a2e	01 a9					.byte $01,$a9                          ; $c9 )
>3a30	01 ba					.byte $01,$ba                          ; $ca :
>3a32	01 ac					.byte $01,$ac                          ; $cb ,
>3a34	01 bb					.byte $01,$bb                          ; $cc ;
>3a36	01 a7					.byte $01,$a7                          ; $cd '
>3a38	02 54 cf				.byte $02,$54,$cf                      ; $ce to
>3a3b	04 53 54 45 d0				.byte $04,$53,$54,$45,$d0              ; $cf step
>3a40	04 50 52 4f c3				.byte $04,$50,$52,$4f,$c3              ; $d0 proc
>3a45	05 4c 4f 43 41 cc			.byte $05,$4c,$4f,$43,$41,$cc          ; $d1 local
>3a4b	03 44 49 cd				.byte $03,$44,$49,$cd                  ; $d2 dim
>3a4f	03 52 45 cd				.byte $03,$52,$45,$cd                  ; $d3 rem
>3a53	03 4c 45 d4				.byte $03,$4c,$45,$d4                  ; $d4 let
>3a57	05 49 4e 50 55 d4			.byte $05,$49,$4e,$50,$55,$d4          ; $d5 input
>3a5d	04 45 4c 53 c5				.byte $04,$45,$4c,$53,$c5              ; $d6 else
>3a62	03 56 44 d5				.byte $03,$56,$44,$d5                  ; $d7 vdu
>3a66	05 50 52 49 4e d4			.byte $05,$50,$52,$49,$4e,$d4          ; $d8 print
>3a6c	04 47 4f 54 cf				.byte $04,$47,$4f,$54,$cf              ; $d9 goto
>3a71	05 47 4f 53 55 c2			.byte $05,$47,$4f,$53,$55,$c2          ; $da gosub
>3a77	06 52 45 54 55 52 ce			.byte $06,$52,$45,$54,$55,$52,$ce      ; $db return
>3a7e	04 44 41 54 c1				.byte $04,$44,$41,$54,$c1              ; $dc data
>3a83	06 41 53 53 45 52 d4			.byte $06,$41,$53,$53,$45,$52,$d4      ; $dd assert
>3a8a	04 50 4f 4b c5				.byte $04,$50,$4f,$4b,$c5              ; $de poke
>3a8f	04 44 4f 4b c5				.byte $04,$44,$4f,$4b,$c5              ; $df doke
>3a94	04 4c 4f 4b c5				.byte $04,$4c,$4f,$4b,$c5              ; $e0 loke
>3a99	03 49 4e cb				.byte $03,$49,$4e,$cb                  ; $e1 ink
>3a9d	05 50 41 50 45 d2			.byte $05,$50,$41,$50,$45,$d2          ; $e2 paper
>3aa3	03 43 4c d3				.byte $03,$43,$4c,$d3                  ; $e3 cls
>3aa7	06 4c 4f 43 41 54 c5			.byte $06,$4c,$4f,$43,$41,$54,$c5      ; $e4 locate
>3aae	05 42 52 45 41 cb			.byte $05,$42,$52,$45,$41,$cb          ; $e5 break
>3ab4	01 ae					.byte $01,$ae                          ; $e6 .
>3ab6	01 a3					.byte $01,$a3                          ; $e7 #
>3ab8	00					.byte $00

;******  Return to file: tokeniser/tokentext.asm


;******  Processing file: tokeniser/../generated/tokentext1.inc

.3ab9					Group1Text:
>3ab9	05 43 4c 45 41 d2			.byte $05,$43,$4c,$45,$41,$d2          ; $86 clear
>3abf	04 4c 4f 41 c4				.byte $04,$4c,$4f,$41,$c4              ; $87 load
>3ac4	04 53 41 56 c5				.byte $04,$53,$41,$56,$c5              ; $88 save
>3ac9	04 4c 49 53 d4				.byte $04,$4c,$49,$53,$d4              ; $89 list
>3ace	03 4e 45 d7				.byte $03,$4e,$45,$d7                  ; $8a new
>3ad2	03 52 55 ce				.byte $03,$52,$55,$ce                  ; $8b run
>3ad6	04 52 45 41 c4				.byte $04,$52,$45,$41,$c4              ; $8c read
>3adb	07 52 45 53 54 4f 52 c5			.byte $07,$52,$45,$53,$54,$4f,$52,$c5  ; $8d restore
>3ae3	03 45 4e c4				.byte $03,$45,$4e,$c4                  ; $8e end
>3ae7	04 53 54 4f d0				.byte $04,$53,$54,$4f,$d0              ; $8f stop
>3aec	04 58 45 4d d5				.byte $04,$58,$45,$4d,$d5              ; $90 xemu
>3af1	03 4f 52 c1				.byte $03,$4f,$52,$c1                  ; $91 ora
>3af5	05 28 41 4e 44 a9			.byte $05,$28,$41,$4e,$44,$a9          ; $92 (and)
>3afb	03 45 4f d2				.byte $03,$45,$4f,$d2                  ; $93 eor
>3aff	03 41 44 c3				.byte $03,$41,$44,$c3                  ; $94 adc
>3b03	03 53 54 c1				.byte $03,$53,$54,$c1                  ; $95 sta
>3b07	03 4c 44 c1				.byte $03,$4c,$44,$c1                  ; $96 lda
>3b0b	03 43 4d d0				.byte $03,$43,$4d,$d0                  ; $97 cmp
>3b0f	03 53 42 c3				.byte $03,$53,$42,$c3                  ; $98 sbc
>3b13	03 41 53 cc				.byte $03,$41,$53,$cc                  ; $99 asl
>3b17	03 52 4f cc				.byte $03,$52,$4f,$cc                  ; $9a rol
>3b1b	03 4c 53 d2				.byte $03,$4c,$53,$d2                  ; $9b lsr
>3b1f	03 52 4f d2				.byte $03,$52,$4f,$d2                  ; $9c ror
>3b23	03 53 54 d8				.byte $03,$53,$54,$d8                  ; $9d stx
>3b27	03 4c 44 d8				.byte $03,$4c,$44,$d8                  ; $9e ldx
>3b2b	03 44 45 c3				.byte $03,$44,$45,$c3                  ; $9f dec
>3b2f	03 49 4e c3				.byte $03,$49,$4e,$c3                  ; $a0 inc
>3b33	03 53 54 da				.byte $03,$53,$54,$da                  ; $a1 stz
>3b37	03 42 49 d4				.byte $03,$42,$49,$d4                  ; $a2 bit
>3b3b	03 53 54 d9				.byte $03,$53,$54,$d9                  ; $a3 sty
>3b3f	03 4c 44 d9				.byte $03,$4c,$44,$d9                  ; $a4 ldy
>3b43	03 43 50 d9				.byte $03,$43,$50,$d9                  ; $a5 cpy
>3b47	03 43 50 d8				.byte $03,$43,$50,$d8                  ; $a6 cpx
>3b4b	03 54 53 c2				.byte $03,$54,$53,$c2                  ; $a7 tsb
>3b4f	03 54 52 c2				.byte $03,$54,$52,$c2                  ; $a8 trb
>3b53	03 4a 53 d2				.byte $03,$4a,$53,$d2                  ; $a9 jsr
>3b57	03 4a 4d d0				.byte $03,$4a,$4d,$d0                  ; $aa jmp
>3b5b	03 42 50 cc				.byte $03,$42,$50,$cc                  ; $ab bpl
>3b5f	03 42 4d c9				.byte $03,$42,$4d,$c9                  ; $ac bmi
>3b63	03 42 56 c3				.byte $03,$42,$56,$c3                  ; $ad bvc
>3b67	03 42 56 d3				.byte $03,$42,$56,$d3                  ; $ae bvs
>3b6b	03 42 43 c3				.byte $03,$42,$43,$c3                  ; $af bcc
>3b6f	03 42 43 d3				.byte $03,$42,$43,$d3                  ; $b0 bcs
>3b73	03 42 4e c5				.byte $03,$42,$4e,$c5                  ; $b1 bne
>3b77	03 42 45 d1				.byte $03,$42,$45,$d1                  ; $b2 beq
>3b7b	03 42 52 c1				.byte $03,$42,$52,$c1                  ; $b3 bra
>3b7f	03 42 52 cb				.byte $03,$42,$52,$cb                  ; $b4 brk
>3b83	03 50 48 d0				.byte $03,$50,$48,$d0                  ; $b5 php
>3b87	03 43 4c c3				.byte $03,$43,$4c,$c3                  ; $b6 clc
>3b8b	03 50 4c d0				.byte $03,$50,$4c,$d0                  ; $b7 plp
>3b8f	03 53 45 c3				.byte $03,$53,$45,$c3                  ; $b8 sec
>3b93	03 52 54 c9				.byte $03,$52,$54,$c9                  ; $b9 rti
>3b97	03 50 48 c1				.byte $03,$50,$48,$c1                  ; $ba pha
>3b9b	03 43 4c c9				.byte $03,$43,$4c,$c9                  ; $bb cli
>3b9f	03 50 48 d9				.byte $03,$50,$48,$d9                  ; $bc phy
>3ba3	03 52 54 d3				.byte $03,$52,$54,$d3                  ; $bd rts
>3ba7	03 50 4c c1				.byte $03,$50,$4c,$c1                  ; $be pla
>3bab	03 53 45 c9				.byte $03,$53,$45,$c9                  ; $bf sei
>3baf	03 50 4c d9				.byte $03,$50,$4c,$d9                  ; $c0 ply
>3bb3	03 44 45 d9				.byte $03,$44,$45,$d9                  ; $c1 dey
>3bb7	03 54 58 c1				.byte $03,$54,$58,$c1                  ; $c2 txa
>3bbb	03 54 59 c1				.byte $03,$54,$59,$c1                  ; $c3 tya
>3bbf	03 54 58 d3				.byte $03,$54,$58,$d3                  ; $c4 txs
>3bc3	03 54 41 d9				.byte $03,$54,$41,$d9                  ; $c5 tay
>3bc7	03 54 41 d8				.byte $03,$54,$41,$d8                  ; $c6 tax
>3bcb	03 43 4c d6				.byte $03,$43,$4c,$d6                  ; $c7 clv
>3bcf	03 54 53 d8				.byte $03,$54,$53,$d8                  ; $c8 tsx
>3bd3	03 49 4e d9				.byte $03,$49,$4e,$d9                  ; $c9 iny
>3bd7	03 44 45 d8				.byte $03,$44,$45,$d8                  ; $ca dex
>3bdb	03 43 4c c4				.byte $03,$43,$4c,$c4                  ; $cb cld
>3bdf	03 50 48 d8				.byte $03,$50,$48,$d8                  ; $cc phx
>3be3	03 49 4e d8				.byte $03,$49,$4e,$d8                  ; $cd inx
>3be7	03 4e 4f d0				.byte $03,$4e,$4f,$d0                  ; $ce nop
>3beb	03 53 45 c4				.byte $03,$53,$45,$c4                  ; $cf sed
>3bef	03 50 4c d8				.byte $03,$50,$4c,$d8                  ; $d0 plx
>3bf3	00					.byte $00

;******  Return to file: tokeniser/tokentext.asm


;******  Processing file: tokeniser/../generated/tokentext2.inc

.3bf4					Group2Text:
>3bf4	05 56 50 4f 4b c5			.byte $05,$56,$50,$4f,$4b,$c5          ; $86 vpoke
>3bfa	05 56 44 4f 4b c5			.byte $05,$56,$44,$4f,$4b,$c5          ; $87 vdoke
>3c00	05 56 4c 4f 41 c4			.byte $05,$56,$4c,$4f,$41,$c4          ; $88 vload
>3c06	00					.byte $00

;******  Return to file: tokeniser/tokentext.asm


;******  Processing file: tokeniser/../generated/tokentext3.inc

.3c07					Group3Text:
>3c07	06 56 50 45 45 4b a8			.byte $06,$56,$50,$45,$45,$4b,$a8      ; $86 vpeek(
>3c0e	06 56 44 45 45 4b a8			.byte $06,$56,$44,$45,$45,$4b,$a8      ; $87 vdeek(
>3c15	00					.byte $00

;******  Return to file: tokeniser/tokentext.asm


;******  Return to file: tokeniser/tokeniser.asm

.3c16					tokeniserHandler:
.3c16	7c 19 3c	jmp ($3c19,x)			jmp 	(tokeniserVectors,x)
.3c19					tokeniserVectors:
>3c19	40 34					.word Detokenise           ; index 0
>3c1b	34 34					.word ListLine             ; index 2
>3c1d	bb 36					.word TokTest              ; index 4
>3c1f	db 36					.word Tokenise             ; index 6
>3c21	de 36					.word TokeniseASCIIZ       ; index 8

;******  Return to file: basic.asm

.3c23					section_end_tokeniser:
.3c23					section_start_variable:

;******  Processing file: variable/variable.asm


;******  Processing file: variable/access.asm

.0d25					varHash:
>0d25							.fill	1
.0d26					varType:
>0d26							.fill 	1
.0d27					varEnd:
>0d27							.fill 	1
.003b					hashList:
>003b							.fill 	2
.3c23					AccessVariable:
.3c23	aa		tax				tax 								; stack in X
.3c24	c8		iny				iny									; look at second character
.3c25	b1 28		lda ($28),y			lda 	(codePtr),y
.3c27	88		dey				dey
.3c28	c9 3a		cmp #$3a			cmp 	#TYPE_INT 					; is it the integer marker ($3A)
.3c2a	d0 15		bne $3c41			bne 	_AVLong 					; no, always use the hash tables.
.3c2c	b1 28		lda ($28),y			lda 	(codePtr),y 				; this is the 6 bit ASCII of A-Z 1-26
.3c2e	38		sec				sec 	 							; make it 0-25
.3c2f	e9 01		sbc #$01			sbc 	#1
.3c31	0a		asl a				asl 	a 							; x 4 as 4 bytes / variable.
.3c32	0a		asl a				asl 	a
.3c33	95 48		sta $48,x			sta 	esInt0,x
.3c35	a9 0a		lda #$0a			lda 	#SingleLetterVar >> 8 		; make it an address
.3c37	95 50		sta $50,x			sta 	esInt1,x
.3c39	a9 80		lda #$80			lda 	#$80 						; type is an integer reference.
.3c3b	95 40		sta $40,x			sta 	esType,x
.3c3d	c8		iny				iny 								; skip over the variable reference in the code.
.3c3e	c8		iny				iny  								; (1 letter, 1 type)
.3c3f	8a		txa				txa 								; stack in A to return.
.3c40	60		rts				rts
.3c41					_AVLong:
.3c41	8a		txa				txa
.3c42	48		pha				pha
.3c43	20 8a 3c	jsr $3c8a			jsr 	AccessSetup 				; set up the basic information we need for later
.3c46	20 cc 3e	jsr $3ecc			jsr 	FindVariable 				; does the variable exist already ?
.3c49	b0 0e		bcs $3c59			bcs 	_AVFound 					; yes, then its found
.3c4b	ad 26 0d	lda $0d26			lda 	varType 					; otherwise, is the variable type an array
.3c4e	4a		lsr a				lsr 	a
.3c4f	90 05		bcc $3c56			bcc 	_AVCanCreate 				; if not, we can autocreate
.3c51	a2 15		ldx #$15			ldx 	#ErrorID_noauto
.3c53	20 da 14	jsr $14da		jsr	errorHandler
.3c56					_AVCanCreate:
.3c56	20 3f 3d	jsr $3d3f			jsr 	CreateVariable 				; variable does not exist, create it.
.3c59					_AVFound:
.3c59	68		pla				pla
.3c5a	aa		tax				tax
.3c5b	18		clc				clc 								; copy temp0 (variable record address)
.3c5c	a5 2a		lda $2a				lda 	temp0 						; +5 (to point to the data)
.3c5e	69 05		adc #$05			adc 	#5 							; (first 5 bytes are link, name, hash)
.3c60	95 48		sta $48,x			sta 	esInt0,x
.3c62	a5 2b		lda $2b				lda 	temp0+1
.3c64	69 00		adc #$00			adc 	#0
.3c66	95 50		sta $50,x			sta 	esInt1,x
.3c68	a9 00		lda #$00			lda 	#0
.3c6a	95 58		sta $58,x			sta 	esInt2,x
.3c6c	95 60		sta $60,x			sta 	esInt3,x
.3c6e	ac 26 0d	ldy $0d26			ldy 	varType 					; get the type ID from the type.
.3c71	b9 4a 3c	lda $3c4a,y			lda 	_AVTypeTable-$3A,y 			; e.g. a reference to int/float/string.
.3c74	95 40		sta $40,x			sta 	esType,x
.3c76	ac 27 0d	ldy $0d27			ldy 	varEnd 						; restore Y
.3c79	ad 26 0d	lda $0d26			lda 	VarType 					; get variable type, put LSB into C
.3c7c	4a		lsr a				lsr 	a
.3c7d	90 03		bcc $3c82			bcc 	_AVNotArray 				; if carry set,it is an array variable.
.3c7f	20 c7 3c	jsr $3cc7			jsr 	AccessArray 				; array lookup. if LSB was set.
.3c82					_AVNotArray:
.3c82	8a		txa				txa 								; return stack in A and return
.3c83	60		rts				rts
.3c84					_AVTypeTable:
>3c84	80 80						.byte 	$80,$80						; integer
>3c86	c0 c0						.byte 	$C0,$C0 					; string
>3c88	81 81						.byte 	$81,$81 					; float
.3c8a					AccessSetup:
.3c8a	a9 00		lda #$00			lda 	#0 							; zero the hash byte.
.3c8c	8d 25 0d	sta $0d25			sta 	varHash
.3c8f	98		tya				tya
.3c90	48		pha				pha
.3c91	b1 28		lda ($28),y	_ASLoop:lda 	(codePtr),y					; get next identifier character
.3c93	c9 3a		cmp #$3a			cmp 	#$3A 						; is it 3A-3F which end all identifiers ?
.3c95	b0 0b		bcs $3ca2			bcs 	_ASComplete
.3c97	18		clc				clc 								; add to the hash. Might improve this.
.3c98	6d 25 0d	adc $0d25			adc 	varHash
.3c9b	8d 25 0d	sta $0d25			sta 	varHash
.3c9e	c8		iny				iny 								; next character
.3c9f	4c 91 3c	jmp $3c91			jmp 	_ASLoop
.3ca2					_ASComplete:
.3ca2	8d 26 0d	sta $0d26			sta 	varType 					; save variable type byte
.3ca5	c8		iny				iny
.3ca6	8c 27 0d	sty $0d27			sty 	varEnd 						; save the ending position.
.3ca9	38		sec				sec 								; convert type byte from $3A-$3F to 0..5
.3caa	e9 3a		sbc #$3a			sbc 	#$3A
.3cac	0a		asl a				asl 	a 							; multiply by hashTableSize (8 in this case)
.3cad	0a		asl a				asl 	a
.3cae	0a		asl a				asl 	a
.3caf	0a		asl a				asl 	a 							; 2 bytes/word
.3cb0	85 2a		sta $2a				sta 	temp0 						; this is the offset to the start of the table.
.3cb2	ad 25 0d	lda $0d25			lda 	varHash 					; get hash
.3cb5	29 07		and #$07			and 	#(hashTableSize-1)			; force into range (for 8,0..7)
.3cb7	0a		asl a				asl  	a 							; x 2 (for word) and clear carry
.3cb8	65 2a		adc $2a				adc 	temp0 						; now offset from the start of the hash table.
.3cba	69 68		adc #$68			adc 	#hashTables & $FF 			; add to hash table base address
.3cbc	85 3b		sta $3b				sta 	hashList 					; making hashLists point to the head of the link list.
.3cbe	a9 0a		lda #$0a			lda 	#hashTables >> 8
.3cc0	69 00		adc #$00			adc 	#0
.3cc2	85 3c		sta $3c				sta 	hashList+1
.3cc4	68		pla				pla
.3cc5	a8		tay				tay
.3cc6	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/accessarray.asm

.3cc7					AccessArray:
.3cc7	e8		inx				inx
.3cc8	8a		txa				txa
.3cc9	a2 06		ldx #$06		ldx	#6
.3ccb	20 6b 31	jsr $316b		jsr	mainHandler
.3cce	48		pha				pha
.3ccf	a2 00		ldx #$00		ldx	#0
.3cd1	20 6b 31	jsr $316b		jsr	mainHandler
.3cd4	68		pla				pla
.3cd5	aa		tax				tax
.3cd6	ca		dex				dex
.3cd7	b5 61		lda $61,x			lda 	esInt3+1,x 					; check index value at least < 64k
.3cd9	15 59		ora $59,x			ora 	esInt2+1,x
.3cdb	d0 33		bne $3d10			bne 	_AABadIndex
.3cdd	98		tya				tya
.3cde	48		pha				pha
.3cdf	b5 48		lda $48,x			lda 	esInt0,x 					; put array info ptr in temp0 - this points to the
.3ce1	85 2a		sta $2a				sta 	temp0 						; address (+0) max (+2) and size (+4)
.3ce3	b5 50		lda $50,x			lda 	esInt1,x
.3ce5	85 2b		sta $2b				sta 	temp0+1
.3ce7	a0 02		ldy #$02			ldy 	#2 							; check out of range, compare against max index.
.3ce9	b5 49		lda $49,x			lda 	esInt0+1,x
.3ceb	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.3ced	c8		iny				iny
.3cee	b5 51		lda $51,x			lda 	esInt1+1,x
.3cf0	f1 2a		sbc ($2a),y			sbc 	(temp0),y
.3cf2	b0 1c		bcs $3d10			bcs 	_AABadIndex 				; if >= then fail.
.3cf4	e8		inx				inx 								; point to index
.3cf5	a0 04		ldy #$04			ldy 	#4 							; get the size byte.
.3cf7	b1 2a		lda ($2a),y			lda 	(temp0),y
.3cf9	20 15 3d	jsr $3d15			jsr 	MultiplyTOSByA 				; specialist multiplier.
.3cfc	ca		dex				dex
.3cfd	a0 00		ldy #$00			ldy 	#0 							; add this to the array base as the new address
.3cff	18		clc				clc
.3d00	b5 49		lda $49,x			lda 	esInt0+1,x
.3d02	71 2a		adc ($2a),y			adc 	(temp0),y
.3d04	95 48		sta $48,x			sta 	esInt0,x
.3d06	b5 51		lda $51,x			lda 	esInt1+1,x
.3d08	c8		iny				iny
.3d09	71 2a		adc ($2a),y			adc 	(temp0),y
.3d0b	95 50		sta $50,x			sta 	esInt1,x
.3d0d	68		pla				pla
.3d0e	a8		tay				tay
.3d0f	60		rts				rts
.3d10					_AABadIndex:
.3d10	a2 1b		ldx #$1b			ldx 	#ErrorID_ArrayIndex
.3d12	20 da 14	jsr $14da		jsr	errorHandler
.3d15					MultiplyTOSByA:
.3d15	48		pha				pha
.3d16	b5 48		lda $48,x			lda 	esInt0,x 					; copy index to temp1
.3d18	85 2c		sta $2c				sta 	temp1
.3d1a	b5 50		lda $50,x			lda 	esInt1,x
.3d1c	85 2d		sta $2d				sta 	temp1+1
.3d1e	68		pla				pla
.3d1f	16 48		asl $48,x			asl 	esInt0,x 					; double it.
.3d21	36 50		rol $50,x			rol 	esInt1,x
.3d23	c9 02		cmp #$02			cmp 	#2 							; if x 2 then exit.
.3d25	f0 17		beq $3d3e			beq 	_MTBAExit
.3d27	c9 06		cmp #$06			cmp 	#6 							; if x 6 then add temp1 to index
.3d29	d0 0f		bne $3d3a			bne 	_MTBANotFloat
.3d2b	48		pha				pha
.3d2c	18		clc				clc 								; so this will make it x 3
.3d2d	b5 48		lda $48,x			lda 	esInt0,x
.3d2f	65 2c		adc $2c				adc 	temp1
.3d31	95 48		sta $48,x			sta 	esInt0,x
.3d33	b5 50		lda $50,x			lda 	esInt1,x
.3d35	65 2d		adc $2d				adc 	temp1+1
.3d37	95 50		sta $50,x			sta 	esInt1,x
.3d39	68		pla				pla
.3d3a					_MTBANotFloat:
.3d3a	16 48		asl $48,x			asl 	esInt0,x					; now it is x 4 or x 6
.3d3c	36 50		rol $50,x			rol 	esInt1,x
.3d3e					_MTBAExit:
.3d3e	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/create.asm

.3d3f					CreateVariable:
.3d3f	98		tya				tya 								; push Y on the stack twice.
.3d40	48		pha				pha									; position in code of the new variable.
.3d41	48		pha				pha
.3d42	ae 26 0d	ldx $0d26			ldx 	varType 					; get var type 0-5 from the var type
.3d45	bd 69 3d	lda $3d69,x			lda		_CVSize-$3A,x 				; the bytes required for this new variable.
.3d48	48		pha				pha 								; save length
.3d49	a5 35		lda $35				lda 	lowMemory 					; set low Memory ptr to temp0
.3d4b	85 2a		sta $2a				sta 	temp0 						; (address of the new variable)
.3d4d	a5 36		lda $36				lda 	lowMemory+1
.3d4f	85 2b		sta $2b				sta 	temp0+1
.3d51	68		pla				pla 								; get length
.3d52	18		clc				clc 								; add to low memory.
.3d53	65 35		adc $35				adc 	lowMemory
.3d55	85 35		sta $35				sta 	lowMemory
.3d57	90 08		bcc $3d61			bcc 	_CVNoCarry
.3d59	e6 36		inc $36				inc 	lowMemory+1
.3d5b	a5 36		lda $36				lda 	lowMemory+1 				; check out of memory.
.3d5d	c5 34		cmp $34				cmp 	highMemory+1
.3d5f	b0 3d		bcs $3d9e			bcs 	_CVMemory
.3d61					_CVNoCarry:
.3d61	ad 25 0d	lda $0d25			lda 	varHash 					; store hash at offset 4.
.3d64	a0 04		ldy #$04			ldy 	#4
.3d66	91 2a		sta ($2a),y			sta 	(temp0),y
.3d68	68		pla				pla 								; offset, work out where the variable name is.
.3d69	18		clc				clc
.3d6a	65 28		adc $28				adc 	codePtr
.3d6c	a0 02		ldy #$02			ldy 	#2 							; copy that into slots 2 + 3.
.3d6e	91 2a		sta ($2a),y			sta 	(temp0),y
.3d70	a5 29		lda $29				lda 	codePtr+1
.3d72	69 00		adc #$00			adc 	#0
.3d74	c8		iny				iny
.3d75	91 2a		sta ($2a),y			sta 	(temp0),y
.3d77	cd c9 0a	cmp $0ac9			cmp 	basePage+1 					; compare against the program base.
.3d7a	b0 03		bcs $3d7f			bcs 	_CVNotImmediate
.3d7c	20 e1 3d	jsr $3de1			jsr 	CloneVariableName 			; we need to clone the variable name (immediate mode)
.3d7f					_CVNotImmediate:
.3d7f	a0 00		ldy #$00			ldy 	#0 							; copy current hash pointer in link
.3d81	b1 3b		lda ($3b),y			lda 	(hashList),y 				; so we're inserting it in the front of a linked list
.3d83	91 2a		sta ($2a),y			sta 	(temp0),y
.3d85	c8		iny				iny
.3d86	b1 3b		lda ($3b),y			lda 	(hashList),y
.3d88	91 2a		sta ($2a),y			sta 	(temp0),y
.3d8a	a5 2b		lda $2b				lda 	temp0+1 					; set new link
.3d8c	91 3b		sta ($3b),y			sta 	(hashList),y
.3d8e	88		dey				dey
.3d8f	a5 2a		lda $2a				lda 	temp0
.3d91	91 3b		sta ($3b),y			sta 	(hashList),y
.3d93	ad 26 0d	lda $0d26			lda 	varType 					; type in A
.3d96	a0 05		ldy #$05			ldy 	#5 							; offset in Y
.3d98	20 a9 3d	jsr $3da9			jsr 	ZeroTemp0Y 					; zero (temp0),y with whatever type.
.3d9b	68		pla				pla
.3d9c	a8		tay				tay
.3d9d	60		rts				rts
.3d9e					_CVMemory:
.3d9e	a2 21		ldx #$21			ldx 	#ErrorID_Memory
.3da0	20 da 14	jsr $14da		jsr	errorHandler
>3da3	09 0a				_CVSize:.byte 	VarHSize+VarISize,VarHSize+VarASize 					; <storage for integer>
>3da5	07 0a						.byte 	VarHSize+VarSSize,VarHSize+VarASize 					; <storage for string>
>3da7	0b 0a						.byte 	VarHSize+VarFSize,VarHSize+VarASize 					; <storage for float>
.3da9					ZeroTemp0Y:
.3da9	4a		lsr a				lsr 	a 							; bit 0 in carry
.3daa	0a		asl a				asl 	a
.3dab	b0 19		bcs $3dc6			bcs 	_ZTExit 					; we don't initialise arrays.
.3dad	c9 3c		cmp #$3c			cmp 	#$3C 						; check string
.3daf	f0 16		beq $3dc7			beq 	_ZTWriteNullString 			; write "" string
.3db1	c9 3e		cmp #$3e			cmp 	#$3E 						; check float
.3db3	f0 22		beq $3dd7			beq 	_ZTWriteFloat
.3db5	98		tya				tya
.3db6	48		pha				pha
.3db7	a9 00		lda #$00			lda 	#0
.3db9	91 2a		sta ($2a),y			sta 	(temp0),y
.3dbb	c8		iny				iny
.3dbc	91 2a		sta ($2a),y			sta 	(temp0),y
.3dbe	c8		iny				iny
.3dbf	91 2a		sta ($2a),y			sta 	(temp0),y
.3dc1	c8		iny				iny
.3dc2	91 2a		sta ($2a),y			sta 	(temp0),y
.3dc4	68		pla				pla
.3dc5	a8		tay				tay
.3dc6					_ZTExit:
.3dc6	60		rts				rts
.3dc7					_ZTWriteNullString:
.3dc7	a9 00		lda #$00			lda 	#0 							; put a reference to null string as the default value.
.3dc9	8d ce 0a	sta $0ace			sta 	NullString
.3dcc	a9 ce		lda #$ce			lda 	#NullString & $FF
.3dce	91 2a		sta ($2a),y			sta 	(temp0),y
.3dd0	a9 0a		lda #$0a			lda 	#NullString >> 8
.3dd2	c8		iny				iny
.3dd3	91 2a		sta ($2a),y			sta 	(temp0),y
.3dd5	88		dey				dey
.3dd6	60		rts				rts
.3dd7					_ZTWriteFloat:
.3dd7	8a		txa				txa
.3dd8	48		pha				pha
.3dd9	a2 1e		ldx #$1e		ldx	#30
.3ddb	20 00 19	jsr $1900		jsr	floatingpointHandler
.3dde	68		pla				pla
.3ddf	aa		tax				tax
.3de0	60		rts				rts
.3de1					CloneVariableName:
.3de1	a0 02		ldy #$02			ldy 	#2 							; copy vname address to temp2
.3de3	b1 2a		lda ($2a),y			lda 	(temp0),y
.3de5	85 2e		sta $2e				sta 	temp2
.3de7	c8		iny				iny
.3de8	b1 2a		lda ($2a),y			lda 	(temp0),y
.3dea	85 2f		sta $2f				sta 	temp2+1
.3dec	a5 36		lda $36				lda 	lowMemory+1 				; copy lowMemory address to (temp0),2/3
.3dee	91 2a		sta ($2a),y			sta 	(temp0),y
.3df0	88		dey				dey
.3df1	a5 35		lda $35				lda 	lowMemory
.3df3	91 2a		sta ($2a),y			sta 	(temp0),y
.3df5	a0 00		ldy #$00			ldy 	#0 							; copy data from (temp2) to (lowMemory)
.3df7					_CVNCopy:
.3df7	b1 2e		lda ($2e),y			lda		(temp2),y
.3df9	91 35		sta ($35),y			sta 	(lowMemory),y
.3dfb	c8		iny				iny
.3dfc	c9 3a		cmp #$3a			cmp 	#$3A 						; until the whole name has been copied.
.3dfe	90 f7		bcc $3df7			bcc 	_CVNCopy
.3e00	98		tya				tya 								; add Y to low memory
.3e01	18		clc				clc
.3e02	65 35		adc $35				adc 	lowMemory
.3e04	85 35		sta $35				sta 	lowMemory
.3e06	90 02		bcc $3e0a			bcc 	_CVNNoCarry
.3e08	e6 36		inc $36				inc 	lowMemory+1
.3e0a					_CVNNoCarry:
.3e0a	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/createarray.asm

.3e0b					CreateArray:
.3e0b	20 8a 3c	jsr $3c8a			jsr 	AccessSetup 				; set up the basic stuff.
.3e0e	ad 26 0d	lda $0d26			lda 	varType 					; is the variable type an array
.3e11	4a		lsr a				lsr 	a
.3e12	90 3f		bcc $3e53			bcc 	_CANotArray 				; no, cause an error.
.3e14	20 cc 3e	jsr $3ecc			jsr 	FindVariable 				; does the variable exist already
.3e17	b0 35		bcs $3e4e			bcs 	_CAFound 					; cannot redefine it.
.3e19	20 3f 3d	jsr $3d3f			jsr 	CreateVariable 				; create the variable entry.
.3e1c	ac 27 0d	ldy $0d27			ldy 	varEnd 						; point Y to the end of the variable entry.
.3e1f	a5 2a		lda $2a				lda 	temp0 						; push address of new variable entry on the stack
.3e21	48		pha				pha
.3e22	a5 2b		lda $2b				lda 	temp0+1
.3e24	48		pha				pha
.3e25	ad 26 0d	lda $0d26			lda 	varType 					; push variable type on the stack.
.3e28	48		pha				pha
.3e29	a9 00		lda #$00			lda 	#0 							; work out the array dimension on TOS.
.3e2b	a2 06		ldx #$06		ldx	#6
.3e2d	20 6b 31	jsr $316b		jsr	mainHandler
.3e30	a2 00		ldx #$00		ldx	#0
.3e32	20 6b 31	jsr $316b		jsr	mainHandler
.3e35	68		pla				pla 		 						; restore type and position.
.3e36	8d 26 0d	sta $0d26			sta 	varType
.3e39	68		pla				pla
.3e3a	85 2b		sta $2b				sta 	temp0+1
.3e3c	68		pla				pla
.3e3d	85 2a		sta $2a				sta 	temp0
.3e3f	a5 50		lda $50				lda 	esInt1 						; limit array max to 4096.
.3e41	29 e0		and #$e0			and 	#$E0
.3e43	05 58		ora $58				ora 	esInt2
.3e45	05 60		ora $60				ora 	esInt3
.3e47	f0 0f		beq $3e58			beq 	_CASizeOk
.3e49					_CASize:
.3e49	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.3e4b	20 da 14	jsr $14da		jsr	errorHandler
.3e4e					_CAFound:
.3e4e	a2 19		ldx #$19			ldx 	#ErrorID_DupArray
.3e50	20 da 14	jsr $14da		jsr	errorHandler
.3e53					_CANotArray:
.3e53	a2 1a		ldx #$1a			ldx 	#ErrorID_NotArray
.3e55	20 da 14	jsr $14da		jsr	errorHandler
.3e58					_CASizeOk:
.3e58	e6 48		inc $48				inc 	esInt0 						; bump it by one, as we index from 0
.3e5a	d0 02		bne $3e5e			bne 	_CANoCarry 					; e.g. DIM A(10) ... A(0) - A(10)
.3e5c	e6 49		inc $49				inc 	esInt0+1
.3e5e					_CANoCarry:
.3e5e	98		tya				tya
.3e5f	48		pha				pha
.3e60	a0 05		ldy #$05			ldy 	#5
.3e62	a5 35		lda $35				lda 	lowMemory 					; copy low memory address in +5,+6
.3e64	91 2a		sta ($2a),y			sta 	(temp0),y 					; this is where it will come from
.3e66	c8		iny				iny
.3e67	a5 36		lda $36				lda 	lowMemory+1
.3e69	91 2a		sta ($2a),y			sta 	(temp0),y
.3e6b	c8		iny				iny
.3e6c	a5 48		lda $48				lda 	esInt0 						; copy maximum index value to +7,+8
.3e6e	91 2a		sta ($2a),y			sta 	(temp0),y
.3e70	c8		iny				iny
.3e71	a5 50		lda $50				lda 	esInt1
.3e73	91 2a		sta ($2a),y			sta 	(temp0),y
.3e75	c8		iny				iny
.3e76	ae 26 0d	ldx $0d26			ldx 	varType 					; get the length per element
.3e79	bd 85 3e	lda $3e85,x			lda 	_CAActualSize-$3A-1,x
.3e7c	91 2a		sta ($2a),y			sta 	(temp0),y
.3e7e	aa		tax				tax 								; save size in X
.3e7f	a5 35		lda $35				lda 	lowMemory 					; set temp0 to low memory.
.3e81	85 2a		sta $2a				sta 	temp0
.3e83	a5 36		lda $36				lda 	lowMemory+1
.3e85	85 2b		sta $2b				sta 	temp0+1
.3e87	a9 00		lda #$00			lda 	#0 							; temp1 is the counter.
.3e89	85 2c		sta $2c				sta 	temp1
.3e8b	85 2d		sta $2d				sta 	temp1+1
.3e8d					_CAInitialiseArray:
.3e8d	a0 00		ldy #$00			ldy 	#0 							; write a null record at temp0
.3e8f	ad 26 0d	lda $0d26			lda 	varType 					; base type of array in A.
.3e92	29 fe		and #$fe			and 	#$FE
.3e94	20 a9 3d	jsr $3da9			jsr 	ZeroTemp0Y
.3e97	8a		txa				txa 								; add X to temp0, also updating lowMemory
.3e98	18		clc				clc
.3e99	65 2a		adc $2a				adc 	temp0
.3e9b	85 2a		sta $2a				sta 	temp0
.3e9d	85 35		sta $35				sta 	lowMemory
.3e9f	a5 2b		lda $2b				lda 	temp0+1
.3ea1	69 00		adc #$00			adc 	#0
.3ea3	85 2b		sta $2b				sta 	temp0+1
.3ea5	85 36		sta $36				sta 	lowMemory+1
.3ea7	c5 34		cmp $34				cmp 	highMemory+1				; out of memory check
.3ea9	b0 1c		bcs $3ec7			bcs 	_CAMemory
.3eab	e6 2c		inc $2c				inc 	temp1 						; bump the counter.
.3ead	d0 02		bne $3eb1			bne 	_CAIANoCarry
.3eaf	e6 2d		inc $2d				inc 	temp1+1
.3eb1					_CAIANoCarry:
.3eb1	a5 48		lda $48				lda 	esInt0 						; counter reached max index
.3eb3	c5 2c		cmp $2c				cmp 	temp1
.3eb5	d0 d6		bne $3e8d			bne 	_CAInitialiseArray
.3eb7	a5 50		lda $50				lda 	esInt1
.3eb9	c5 2d		cmp $2d				cmp 	temp1+1
.3ebb	d0 d0		bne $3e8d			bne 	_CAInitialiseArray
.3ebd	68		pla				pla
.3ebe	a8		tay				tay
.3ebf	60		rts				rts
.3ec0					_CAActualSize:
>3ec0	04 00						.byte 	VarISize,0
>3ec2	02 00						.byte 	VarSSize,0
>3ec4	06 00						.byte 	VarFSize,0
>3ec6	db						.byte 	$DB
.3ec7					_CAMemory:
.3ec7	a2 21		ldx #$21			ldx 	#ErrorID_Memory
.3ec9	20 da 14	jsr $14da		jsr	errorHandler

;******  Return to file: variable/variable.asm


;******  Processing file: variable/find.asm

.3ecc					FindVariable:
.3ecc	98		tya				tya
.3ecd	48		pha				pha
.3ece	98		tya				tya 								; point temp2 to the actual name
.3ecf	18		clc				clc 								; in memory of the variable being created
.3ed0	65 28		adc $28				adc 	codePtr
.3ed2	85 2e		sta $2e				sta 	temp2
.3ed4	a5 29		lda $29				lda 	codePtr+1
.3ed6	69 00		adc #$00			adc 	#0
.3ed8	85 2f		sta $2f				sta 	temp2+1
.3eda	a0 00		ldy #$00			ldy 	#0
.3edc	a5 3b		lda $3b				lda 	hashList 					; copy hashlist to temp0
.3ede	85 2a		sta $2a				sta 	temp0
.3ee0	a5 3c		lda $3c				lda 	hashList+1
.3ee2	85 2b		sta $2b				sta 	temp0+1
.3ee4	a0 01		ldy #$01	_FVNext:ldy 	#1 							; get MSB
.3ee6	b1 2a		lda ($2a),y			lda 	(temp0),y
.3ee8	f0 2c		beq $3f16			beq 	_FVFail
.3eea	aa		tax				tax
.3eeb	88		dey				dey		 							; get LSB
.3eec	b1 2a		lda ($2a),y			lda 	(temp0),y
.3eee	85 2a		sta $2a				sta 	temp0 						; update pointer.
.3ef0	86 2b		stx $2b				stx 	temp0+1
.3ef2	a0 04		ldy #$04			ldy 	#4 							; check hashes match
.3ef4	b1 2a		lda ($2a),y			lda 	(temp0),y
.3ef6	cd 25 0d	cmp $0d25			cmp 	varHash
.3ef9	d0 e9		bne $3ee4			bne 	_FVNext 					; if not, no point in checking the name.
.3efb	88		dey				dey 								; copy name pointer (+2,+3) to temp1.
.3efc	b1 2a		lda ($2a),y			lda 	(temp0),y
.3efe	85 2d		sta $2d				sta 	temp1+1
.3f00	88		dey				dey
.3f01	b1 2a		lda ($2a),y			lda 	(temp0),y
.3f03	85 2c		sta $2c				sta 	temp1
.3f05	a0 00		ldy #$00			ldy 	#0
.3f07					_FVCheck:
.3f07	b1 2c		lda ($2c),y			lda 	(temp1),y 					; compare names
.3f09	d1 2e		cmp ($2e),y			cmp 	(temp2),y
.3f0b	d0 d7		bne $3ee4			bne 	_FVNext		 				; fail if different.
.3f0d	c8		iny				iny
.3f0e	c9 3a		cmp #$3a			cmp 	#$3A 						; until reached the end marker.
.3f10	90 f5		bcc $3f07			bcc 	_FVCheck
.3f12	68		pla				pla
.3f13	a8		tay				tay
.3f14	38		sec				sec
.3f15	60		rts				rts
.3f16					_FVFail:
.3f16	68		pla				pla
.3f17	a8		tay				tay
.3f18	18		clc				clc
.3f19	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/reset.asm

.3f1a					HashTableReset:
.3f1a	a2 60		ldx #$60			ldx 	#6*2*hashTableSize			; 6 types, 2 bytes per table entry.
.3f1c	a9 00		lda #$00			lda 	#0
.3f1e					_HTRClear:
.3f1e	9d 67 0a	sta $0a67,x			sta 	hashTables-1,x
.3f21	ca		dex				dex
.3f22	d0 fa		bne $3f1e			bne 	_HTRClear
.3f24	60		rts				rts

;******  Return to file: variable/variable.asm

.3f25					variableHandler:
.3f25	7c 28 3f	jmp ($3f28,x)			jmp 	(variableVectors,x)
.3f28					variableVectors:
>3f28	23 3c					.word AccessVariable       ; index 0
>3f2a	0b 3e					.word CreateArray          ; index 2
>3f2c	1a 3f					.word HashTableReset       ; index 4

;******  Return to file: basic.asm

.3f2e					section_end_variable:
.3f2e					section_start_footer:

;******  Processing file: footer/footer.asm


;******  Processing file: footer/99end.asm

.003d					endZeroPage:
.0d28					endStorage:
>3f2e							.align 	256
.4000					programMemory:
>3fff	ff						.byte 	$FF

;******  Return to file: footer/footer.asm


;******  Return to file: basic.asm

.4000					section_end_footer:

;******  End of listing
