
; 64tass Turbo Assembler Macro V1.55.2200 listing file
; 64tass -D autorun=1 -D coldstartnew=0 -Walias -Wmacro-prefix -Wall -q -c -L ../source/bin/basic.lst -l ../source/bin/basic.lbl -Wall -o ../source/bin/stub.prg basic.asm
; Thu Mar 25 16:45:47 2021

;Offset	;Hex		;Monitor	;Source

;******  Command line definitions

=1					autorun=1
=0					coldstartnew=0

;******  Processing input file: basic.asm


;******  Processing file: header/01common.inc


;******  Processing file: header/../generated/installed.inc

=1					installed_header = 1
=1					installed_main = 1
=1					installed_variable = 1
=1					installed_assembler = 1
=1					installed_error = 1
=1					installed_extension = 1
=1					installed_string = 1
=1					installed_device = 1
=0					installed_floatingpoint = 0
=1					installed_interaction = 1
=1					installed_tokeniser = 1
=1					installed_footer = 1

;******  Return to file: header/01common.inc

=$1000					CodeStart = $1000
=$800					MemoryStorage = $800
=$9f00					EndOfMemory = $9F00
=$28					ZeroPageStorage = $28
=$48					StackAddress = $48
=8					StackSize = 8
=2					retStackSizePages = 2
=8					hashTableSize = 8			; if this changes, the calculation is AccessSetup has to match it.
="G"					markerGOSUB = 'G'
="R"					markerREPEAT = 'R'
="F"					markerFOR = 'F'
="W"					markerWHILE = 'W'
="P"					markerPROC = 'P'
="$"					markerSTRING = '$'
="#"					markerFLOAT = '#'
="%"					markerINT = '%'
=5					VarHSize = 5 								; header (2 link, 2 name, 1 hash)
=2					VarASize = 2 								; array [address of first level]
=4					VarISize = 4 								; integer (32 bit)
=6					VarFSize = 6 								; float (4 mantissa, 1 exponent 1 sign/zero)
=2					VarSSize = 2 								; address (2 bytes)

;******  Return to file: basic.asm


;******  Processing file: header/02macros.inc


;******  Return to file: basic.asm


;******  Processing file: header/03data.inc

>0028					codePtr:.fill 	2							; (codePtr),y points to code.
>002a					temp0: 	.fill 	2							; working variables.
>002c					temp1: 	.fill 	2
>002e					temp2: 	.fill 	2
>0030					temp3: 	.fill 	2
.0032					tempshort:
>0032							.fill 	1
.0033					highMemory:
>0033							.fill 	2
.0035					lowMemory:
>0035							.fill 	2
>0800							.align	256
.0800					returnStack:
>0800							.fill 	retStackSizePages * 256
=512					retStackSize = retStackSizePages * 256
.0a00					SingleLetterVar:
>0a00					 		.fill 	26*4
.0a68					currentStorage:
>0048					esType:	.fill 	StackSize  					; type byte (see above)
>0050					esInt0:	.fill 	StackSize 					; integer or mantissa
>0058					esInt1:	.fill 	StackSize
>0060					esInt2:	.fill 	StackSize
>0068					esInt3:	.fill 	StackSize
>0070					esExp:	.fill 	StackSize 					; exponent ($80 = 0)
>0078					esZSign:.fill 	StackSize 					; for floating point - sign (bit 7) isZero (bit 6)
.0080					endOfStack:
=$50					esMant0 = esInt0 							; synonyms.
=$58					esMant1 = esInt1
=$60					esMant2 = esInt2
=$68					esMant3 = esInt3
.0a68					hashTables:
>0a68							.fill 	6*2*hashTableSize
.0ac8					basePage:
>0ac8							.fill 	2
.0aca					endProgram:
>0aca							.fill 	2
.0acc					endMemory:
>0acc							.fill 	2
.0ace					NullString:
>0ace							.fill 	1							; don't waste memory concreting null strings.
.0acf					convertBuffer:
>0acf							.fill 	35

;******  Processing file: header/../generated/tokenconst.inc

=$80					TOK_EOL=$80
=$81					TOK_SHIFT1=$81
=$82					TOK_SHIFT2=$82
=$83					TOK_SHIFT3=$83
=$84					TOK_FPC=$84
=$85					TOK_STR=$85
=$86					TOK_BINARYST=$86
=$99					TOK_STRUCTST=$99
=$a4					TOK_UNARYST=$a4
=$c9					TOK_TOKENS=$c9
=$86					TKW_AND                      = $86 ; and
=$87					TKW_OR                       = $87 ; or
=$88					TKW_XOR                      = $88 ; xor
=$89					TKW_GREATEREQUAL             = $89 ; >=
=$8a					TKW_LESSEQUAL                = $8a ; <=
=$8b					TKW_GREATER                  = $8b ; >
=$8c					TKW_LESS                     = $8c ; <
=$8d					TKW_EQUAL                    = $8d ; =
=$8e					TKW_LESSGREATER              = $8e ; <>
=$8f					TKW_PLUS                     = $8f ; +
=$90					TKW_MINUS                    = $90 ; -
=$91					TKW_GREATERGREATER           = $91 ; >>
=$92					TKW_LESSLESS                 = $92 ; <<
=$93					TKW_STAR                     = $93 ; *
=$94					TKW_SLASH                    = $94 ; /
=$95					TKW_MOD                      = $95 ; mod
=$96					TKW_HAT                      = $96 ; ^
=$97					TKW_PLING                    = $97 ; !
=$98					TKW_QMARK                    = $98 ; ?
=$99					TKW_REPEAT                   = $99 ; repeat
=$9a					TKW_WHILE                    = $9a ; while
=$9b					TKW_FOR                      = $9b ; for
=$9c					TKW_IF                       = $9c ; if
=$9d					TKW_DEFPROC                  = $9d ; defproc
=$9e					TKW_UNTIL                    = $9e ; until
=$9f					TKW_WEND                     = $9f ; wend
=$a0					TKW_NEXT                     = $a0 ; next
=$a1					TKW_THEN                     = $a1 ; then
=$a2					TKW_ENDIF                    = $a2 ; endif
=$a3					TKW_ENDPROC                  = $a3 ; endproc
=$a4					TKW_LPAREN                   = $a4 ; (
=$a5					TKW_LENLPAREN                = $a5 ; len(
=$a6					TKW_SGNLPAREN                = $a6 ; sgn(
=$a7					TKW_ABSLPAREN                = $a7 ; abs(
=$a8					TKW_RANDOMLPAREN             = $a8 ; random(
=$a9					TKW_PAGE                     = $a9 ; page
=$aa					TKW_TRUE                     = $aa ; true
=$ab					TKW_FALSE                    = $ab ; false
=$ac					TKW_MINLPAREN                = $ac ; min(
=$ad					TKW_MAXLPAREN                = $ad ; max(
=$ae					TKW_SYSLPAREN                = $ae ; sys(
=$af					TKW_TIMERLPAREN              = $af ; timer(
=$b0					TKW_EVENTLPAREN              = $b0 ; event(
=$b1					TKW_GETLPAREN                = $b1 ; get(
=$b2					TKW_INKEYLPAREN              = $b2 ; inkey(
=$b3					TKW_ALLOCLPAREN              = $b3 ; alloc(
=$b4					TKW_CHRDOLLARLPAREN          = $b4 ; chr$(
=$b5					TKW_LEFTDOLLARLPAREN         = $b5 ; left$(
=$b6					TKW_MIDDOLLARLPAREN          = $b6 ; mid$(
=$b7					TKW_RIGHTDOLLARLPAREN        = $b7 ; right$(
=$b8					TKW_STRDOLLARLPAREN          = $b8 ; str$(
=$b9					TKW_VALLPAREN                = $b9 ; val(
=$ba					TKW_PEEKLPAREN               = $ba ; peek(
=$bb					TKW_DEEKLPAREN               = $bb ; deek(
=$bc					TKW_LEEKLPAREN               = $bc ; leek(
=$bd					TKW_ASCLPAREN                = $bd ; asc(
=$be					TKW_INTLPAREN                = $be ; int(
=$bf					TKW_FLOATLPAREN              = $bf ; float(
=$c0					TKW_ISVALLPAREN              = $c0 ; isval(
=$c1					TKW_UPPERDOLLARLPAREN        = $c1 ; upper$(
=$c2					TKW_LOWERDOLLARLPAREN        = $c2 ; lower$(
=$c3					TKW_ATC                      = $c3 ; @
=$c4					TKW_WAVY                     = $c4 ; ~
=$c5					TKW_AMP                      = $c5 ; &
=$c6					TKW_GETDOLLARLPAREN          = $c6 ; get$(
=$c7					TKW_INKEYDOLLARLPAREN        = $c7 ; inkey$(
=$c8					TKW_MEM                      = $c8 ; mem
=$c9					TKW_RPAREN                   = $c9 ; )
=$ca					TKW_COLON                    = $ca ; :
=$cb					TKW_COMMA                    = $cb ; ,
=$cc					TKW_SEMICOLON                = $cc ; ;
=$cd					TKW_QUOTE                    = $cd ; '
=$ce					TKW_TO                       = $ce ; to
=$cf					TKW_STEP                     = $cf ; step
=$d0					TKW_PROC                     = $d0 ; proc
=$d1					TKW_LOCAL                    = $d1 ; local
=$d2					TKW_DIM                      = $d2 ; dim
=$d3					TKW_REM                      = $d3 ; rem
=$d4					TKW_LET                      = $d4 ; let
=$d5					TKW_INPUT                    = $d5 ; input
=$d6					TKW_ELSE                     = $d6 ; else
=$d7					TKW_VDU                      = $d7 ; vdu
=$d8					TKW_PRINT                    = $d8 ; print
=$d9					TKW_DATA                     = $d9 ; data
=$da					TKW_IMAGE                    = $da ; image
=$db					TKW_AT                       = $db ; at
=$dc					TKW_FLIP                     = $dc ; flip
=$dd					TKW_ASSERT                   = $dd ; assert
=$de					TKW_POKE                     = $de ; poke
=$df					TKW_DOKE                     = $df ; doke
=$e0					TKW_LOKE                     = $e0 ; loke
=$e1					TKW_INK                      = $e1 ; ink
=$e2					TKW_PAPER                    = $e2 ; paper
=$e3					TKW_CLS                      = $e3 ; cls
=$e4					TKW_LOCATE                   = $e4 ; locate
=$e5					TKW_PERIOD                   = $e5 ; .
=$e6					TKW_HASH                     = $e6 ; #
=$e7					TKW_CLEAR                    = $e7 ; clear
=$86					TKW_LOAD                     = $86 ; load
=$87					TKW_SAVE                     = $87 ; save
=$88					TKW_LIST                     = $88 ; list
=$89					TKW_NEW                      = $89 ; new
=$8a					TKW_BREAK                    = $8a ; break
=$8b					TKW_RUN                      = $8b ; run
=$8c					TKW_READ                     = $8c ; read
=$8d					TKW_RESTORE                  = $8d ; restore
=$8e					TKW_END                      = $8e ; end
=$8f					TKW_STOP                     = $8f ; stop
=$90					TKW_XEMU                     = $90 ; xemu
=$91					TKW_GOTO                     = $91 ; goto
=$92					TKW_GOSUB                    = $92 ; gosub
=$93					TKW_RETURN                   = $93 ; return
=$94					TKW_ORA                      = $94 ; ora
=$95					TKW_LPARENANDRPAREN          = $95 ; (and)
=$96					TKW_EOR                      = $96 ; eor
=$97					TKW_ADC                      = $97 ; adc
=$98					TKW_STA                      = $98 ; sta
=$99					TKW_LDA                      = $99 ; lda
=$9a					TKW_CMP                      = $9a ; cmp
=$9b					TKW_SBC                      = $9b ; sbc
=$9c					TKW_ASL                      = $9c ; asl
=$9d					TKW_ROL                      = $9d ; rol
=$9e					TKW_LSR                      = $9e ; lsr
=$9f					TKW_ROR                      = $9f ; ror
=$a0					TKW_STX                      = $a0 ; stx
=$a1					TKW_LDX                      = $a1 ; ldx
=$a2					TKW_DEC                      = $a2 ; dec
=$a3					TKW_INC                      = $a3 ; inc
=$a4					TKW_STZ                      = $a4 ; stz
=$a5					TKW_BIT                      = $a5 ; bit
=$a6					TKW_STY                      = $a6 ; sty
=$a7					TKW_LDY                      = $a7 ; ldy
=$a8					TKW_CPY                      = $a8 ; cpy
=$a9					TKW_CPX                      = $a9 ; cpx
=$aa					TKW_TSB                      = $aa ; tsb
=$ab					TKW_TRB                      = $ab ; trb
=$ac					TKW_JSR                      = $ac ; jsr
=$ad					TKW_JMP                      = $ad ; jmp
=$ae					TKW_BPL                      = $ae ; bpl
=$af					TKW_BMI                      = $af ; bmi
=$b0					TKW_BVC                      = $b0 ; bvc
=$b1					TKW_BVS                      = $b1 ; bvs
=$b2					TKW_BCC                      = $b2 ; bcc
=$b3					TKW_BCS                      = $b3 ; bcs
=$b4					TKW_BNE                      = $b4 ; bne
=$b5					TKW_BEQ                      = $b5 ; beq
=$b6					TKW_BRA                      = $b6 ; bra
=$b7					TKW_BRK                      = $b7 ; brk
=$b8					TKW_PHP                      = $b8 ; php
=$b9					TKW_CLC                      = $b9 ; clc
=$ba					TKW_PLP                      = $ba ; plp
=$bb					TKW_SEC                      = $bb ; sec
=$bc					TKW_RTI                      = $bc ; rti
=$bd					TKW_PHA                      = $bd ; pha
=$be					TKW_CLI                      = $be ; cli
=$bf					TKW_PHY                      = $bf ; phy
=$c0					TKW_RTS                      = $c0 ; rts
=$c1					TKW_PLA                      = $c1 ; pla
=$c2					TKW_SEI                      = $c2 ; sei
=$c3					TKW_PLY                      = $c3 ; ply
=$c4					TKW_DEY                      = $c4 ; dey
=$c5					TKW_TXA                      = $c5 ; txa
=$c6					TKW_TYA                      = $c6 ; tya
=$c7					TKW_TXS                      = $c7 ; txs
=$c8					TKW_TAY                      = $c8 ; tay
=$c9					TKW_TAX                      = $c9 ; tax
=$ca					TKW_CLV                      = $ca ; clv
=$cb					TKW_TSX                      = $cb ; tsx
=$cc					TKW_INY                      = $cc ; iny
=$cd					TKW_DEX                      = $cd ; dex
=$ce					TKW_CLD                      = $ce ; cld
=$cf					TKW_PHX                      = $cf ; phx
=$d0					TKW_INX                      = $d0 ; inx
=$d1					TKW_NOP                      = $d1 ; nop
=$d2					TKW_SED                      = $d2 ; sed
=$d3					TKW_PLX                      = $d3 ; plx
=$86					TKW_VPOKE                    = $86 ; vpoke
=$87					TKW_VDOKE                    = $87 ; vdoke
=$88					TKW_VLOAD                    = $88 ; vload
=$89					TKW_MODE                     = $89 ; mode
=$8a					TKW_PALETTE                  = $8a ; palette
=$8b					TKW_SPRITE                   = $8b ; sprite
=$86					TKW_VPEEKLPAREN              = $86 ; vpeek(
=$87					TKW_VDEEKLPAREN              = $87 ; vdeek(

;******  Return to file: header/03data.inc

=$3a					TYPE_INT =		($3A) 						; type bytes that end identifier.
=$3b					TYPE_INTARRAY =	($3B)
=$3c					TYPE_STR =		($3C)
=$3d					TYPE_STRARRAY =	($3D)
=$3e					TYPE_FLOAT =	($3E)
=$3f					TYPE_FLOATARRAY=($3F)

;******  Processing file: header/../generated/asmconst.inc

=$94					TKA_GROUP1 = $94
=$9c					TKA_GROUP2 = $9c
=$ae					TKA_GROUP3 = $ae
=$b7					TKA_GROUP4 = $b7
=$d4					TKA_END4 = $d4

;******  Return to file: header/03data.inc


;******  Return to file: basic.asm


;******  Processing file: header/header.inc


;******  Return to file: basic.asm


;******  Processing file: assembler/asmconst.inc

=0					AMD_IMM		= 0					; Immediate mode.
=1					AMD_ZERO 	= 1					; Zero Page
=2					AMD_ACCIMP	= 2					; Accumulator/Implied
=3					AMD_ABS 	= 3					; Absolute
=4					AMD_ZEROINDY= 4					; Zero Indirect,Y
=5					AMD_ZEROX 	= 5					; Zero Page,X
=6					AMD_ABSY 	= 6					; Absolute,Y
=7					AMD_ABSX 	= 7					; Absolute,X
=8					AMD_ZEROIND = 8					; Zero Indirect
=9					AMD_ZEROY 	= 9					; Zero Page,Y
=10					AMD_ABSIND 	= 10				; Absolute Indirect
=11					AMD_ABSINDX	= 11				; Absolute Indirect Indexed
=12					AMD_REL		= 12				; Relative
=13					AMD_ZEROINDX= 13 				; Zero Indirect,X

;******  Return to file: basic.asm


;******  Processing file: assembler/assembler.inc


;******  Return to file: basic.asm


;******  Processing file: device/device.inc


;******  Return to file: basic.asm


;******  Processing file: error/error.inc


;******  Return to file: basic.asm


;******  Processing file: error/errorhandler.inc


;******  Processing file: error/../generated/errorid.inc

=1					ErrorID_Missing = 1 ; Feature not Present
=2					ErrorID_Syntax = 2 ; Syntax Error
=3					ErrorID_NoModule = 3 ; Module disabled
=4					ErrorID_Assert = 4 ; Assertion failed
=5					ErrorID_DivZero = 5 ; Divide By Zero
=6					ErrorID_Stop = 6 ; Stop
=7					ErrorID_BadType = 7 ; Type Mismatch
=8					ErrorID_BadValue = 8 ; Illegal Value
=9					ErrorID_MissingRP = 9 ; Missing right bracket
=10					ErrorID_MissingComma = 10 ; Missing comma
=11					ErrorID_NoReference = 11 ; Missing reference
=12					ErrorID_LineNumber = 12 ; Line Number not found
=13					ErrorID_StrLen = 13 ; String too long
=14					ErrorID_ReturnErr = 14 ; RETURN without GOSUB
=15					ErrorID_UntilErr = 15 ; UNTIL without REPEAT
=16					ErrorID_NextErr = 16 ; NEXT without FOR
=17					ErrorID_WendErr = 17 ; WEND without WHILE
=18					ErrorID_endprocErr = 18 ; ENDPROC without PROC
=19					ErrorID_BadIndex = 19 ; Bad NEXT index
=20					ErrorID_Struct = 20 ; Structures nested wrong
=21					ErrorID_NoAuto = 21 ; Cannot create variable
=22					ErrorID_RetStack = 22 ; Return stack out of space
=23					ErrorID_NoProc = 23 ; Unknown Procedure
=24					ErrorID_Params = 24 ; Parameters do not match
=25					ErrorID_DupArray = 25 ; Array already defined
=26					ErrorID_NotArray = 26 ; DIM requires array
=27					ErrorID_ArrayIndex = 27 ; Bad array index
=28					ErrorID_ArrayDepth = 28 ; Wrong number of array indices
=29					ErrorID_DataError = 29 ; Out of data
=30					ErrorID_Tokenise = 30 ; Cannot tokenise line
=31					ErrorID_Save = 31 ; Save failed
=32					ErrorID_Load = 32 ; Load failed
=33					ErrorID_Break = 33 ; Break
=34					ErrorID_Memory = 34 ; Out of memory
=35					ErrorID_NumStack = 35 ; Expression too complex
=36					ErrorID_Assembler = 36 ; Bad Operand/Mode
=37					ErrorID_Branch = 37 ; Branch out of range
=38					ErrorID_Label = 38 ; Label changed value

;******  Return to file: error/errorhandler.inc


;******  Return to file: basic.asm


;******  Processing file: extension/extension.inc


;******  Return to file: basic.asm


;******  Processing file: extension/option_x16/x16const.inc

=64					X16MaxImages = 64 							; max # of sprite images.

;******  Return to file: basic.asm


;******  Processing file: floatingpoint/float.inc

=5					FloatEmbeddedSize = 5

;******  Return to file: basic.asm


;******  Processing file: floatingpoint/floatingpoint.inc


;******  Return to file: basic.asm


;******  Processing file: interaction/interaction.inc


;******  Return to file: basic.asm


;******  Processing file: main/main.inc


;******  Return to file: basic.asm


;******  Processing file: string/functions/memory.inc

=252					MaxStringSize = 252

;******  Return to file: basic.asm


;******  Processing file: string/string.inc


;******  Return to file: basic.asm


;******  Processing file: tokeniser/detokenise/colouring.inc

=$84					LTYLineNumber = $84
=$82					LTYPunctuation = $82
=$87					LTYIdentifier = $87
=$86					LTYConstant = $86
=$83					LTYKeyword = $83
=$81					LTYString = $81

;******  Return to file: basic.asm


;******  Processing file: tokeniser/tokeniser.inc


;******  Return to file: basic.asm


;******  Processing file: variable/variable.inc


;******  Return to file: basic.asm


;******  Processing file: footer/footer.inc


;******  Return to file: basic.asm

.1000					section_start_header:

;******  Processing file: header/header.asm


;******  Processing file: header/00start.asm

.1000					Start:
.1000	4c 0a 10	jmp $100a			jmp 	GoColdStart 				; +0 	boot BASIC
.1003	4c 58 10	jmp $1058			jmp 	GoTokTest					; +3 	run tokeniser test code.
>1006	8a 3b						.word 	TokenTableAddress
.1008							else
>1008	00 00						.word 	0
.100a					GoColdStart:
.100a	a9 00		lda #$00			lda 	#(programMemory) & $FF
.100c	8d c8 0a	sta $0ac8			sta 	basePage
.100f	a9 43		lda #$43			lda 	#(programMemory) >> 8
.1011	8d c9 0a	sta $0ac9			sta 	1+(basePage)
.1014	a9 00		lda #$00			lda 	#(endOfMemory) & $FF
.1016	8d cc 0a	sta $0acc			sta 	endMemory
.1019	a9 9f		lda #$9f			lda 	#(endOfMemory) >> 8
.101b	8d cd 0a	sta $0acd			sta 	1+(endMemory)
.101e	20 26 10	jsr $1026			jsr 	InitialiseAll 				; initialise everything.
.1021	a2 02		ldx #$02		ldx	#2
.1023	20 61 1d	jsr $1d61		jsr	interactionHandler

;******  Processing file: header/../generated/initialiseall.asm

.1026					InitialiseAll:
.1026	a9 00		lda #$00		lda #0
.1028	a2 00		ldx #$00		ldx	#0
.102a	20 b4 13	jsr $13b4		jsr	assemblerHandler
.102d	a9 00		lda #$00		lda #0
.102f	a2 00		ldx #$00		ldx	#0
.1031	20 f6 14	jsr $14f6		jsr	deviceHandler
.1034	a9 00		lda #$00		lda #0
.1036	a2 00		ldx #$00		ldx	#0
.1038	20 61 1d	jsr $1d61		jsr	interactionHandler
.103b	a9 00		lda #$00		lda #0
.103d	a2 00		ldx #$00		ldx	#0
.103f	20 fb 33	jsr $33fb		jsr	mainHandler
.1042	a9 00		lda #$00		lda #0
.1044	a2 00		ldx #$00		ldx	#0
.1046	20 b8 36	jsr $36b8		jsr	stringHandler
.1049	a9 00		lda #$00		lda #0
.104b	a2 00		ldx #$00		ldx	#0
.104d	20 de 3e	jsr $3ede		jsr	tokeniserHandler
.1050	a9 00		lda #$00		lda #0
.1052	a2 00		ldx #$00		ldx	#0
.1054	20 af 42	jsr $42af		jsr	variableHandler
.1057	60		rts			rts

;******  Return to file: header/00start.asm

.1058					GoTokTest:
.1058	a2 06		ldx #$06		ldx	#6
.105a	20 de 3e	jsr $3ede		jsr	tokeniserHandler

;******  Return to file: header/header.asm


;******  Return to file: basic.asm

.105d					section_end_header:
.105d					section_start_assembler:

;******  Processing file: assembler/assembler.asm


;******  Processing file: assembler/asmoperand.asm

.105d					AsmGetOperand:
.105d	a2 00		ldx #$00			ldx 	#0 							; clear the operand.
.105f	8a		txa				txa
.1060	95 50		sta $50,x			sta 	esInt0,x
.1062	95 58		sta $58,x			sta 	esInt1,x
.1064	95 60		sta $60,x			sta 	esInt2,x
.1066	95 68		sta $68,x			sta 	esInt3,x
.1068	b1 28		lda ($28),y			lda 	(codePtr),y 				; first into X
.106a	aa		tax				tax
.106b	a9 02		lda #$02			lda 	#AMD_ACCIMP
.106d	e0 80		cpx #$80			cpx 	#TOK_EOL 					; if end of line or colon, return implied mode.
.106f	f0 41		beq $10b2			beq 	_AGOExit
.1071	e0 ca		cpx #$ca			cpx 	#TKW_COLON
.1073	f0 3d		beq $10b2			beq 	_AGOExit
.1075	c8		iny				iny 								; consume the token
.1076	a9 00		lda #$00			lda 	#AMD_IMM
.1078	e0 e6		cpx #$e6			cpx 	#TKW_HASH 					; if a hash present, then immediate mode.
.107a	f0 2d		beq $10a9			beq		_AGOEvalExit 				; with an operand.
.107c	e0 a4		cpx #$a4			cpx 	#TKW_LPAREN 				; left bracket ?
.107e	f0 40		beq $10c0			beq 	_AGOIndirect
.1080	e0 01		cpx #$01			cpx 	#$01 						; is it "A" e.g. the variable A.
.1082	d0 0b		bne $108f			bne 	_AGOZeroPage1 				; if not it is zero zero,x zero,y, unpick 1 iny
.1084	b1 28		lda ($28),y			lda 	(codePtr),y 				; get the second character & consume it
.1086	c8		iny				iny
.1087	aa		tax				tax
.1088	a9 02		lda #$02			lda 	#AMD_ACCIMP 				; and return Acc/Implied if it is just A
.108a	e0 3a		cpx #$3a			cpx 	#$3A
.108c	f0 24		beq $10b2			beq 	_AGOExit
.108e	88		dey				dey 								; unpick 2 iny
.108f					_AGOZeroPage1:
.108f	88		dey				dey
.1090	a9 00		lda #$00			lda 	#0 							; get the address into esInt0/1
.1092	a2 0a		ldx #$0a		ldx	#10
.1094	20 fb 33	jsr $33fb		jsr	mainHandler
.1097	20 ef 10	jsr $10ef			jsr 	AsmGetIndexing
.109a	a9 01		lda #$01			lda 	#AMD_ZERO
.109c	90 14		bcc $10b2			bcc 	_AGOExit
.109e	a9 05		lda #$05			lda 	#AMD_ZEROX
.10a0	e0 00		cpx #$00			cpx 	#0
.10a2	f0 0e		beq $10b2			beq 	_AGOExit
.10a4	a9 09		lda #$09			lda 	#AMD_ZEROY
.10a6	4c b2 10	jmp $10b2			jmp 	_AGOExit
.10a9					_AGOEvalExit:
.10a9	48		pha				pha
.10aa	a9 00		lda #$00			lda 	#0 							; evaluate operand in root.
.10ac	a2 0a		ldx #$0a		ldx	#10
.10ae	20 fb 33	jsr $33fb		jsr	mainHandler
.10b1	68		pla				pla
.10b2					_AGOExit:
.10b2	48		pha				pha 								; save the mode
.10b3	a5 60		lda $60				lda 	esInt2 						; check the operand is zero.
.10b5	05 68		ora $68				ora 	esInt3
.10b7	d0 02		bne $10bb			bne 	_AGOValue
.10b9	68		pla				pla
.10ba	60		rts				rts
.10bb					_AGOValue:
.10bb	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.10bd	20 18 15	jsr $1518		jsr	errorHandler
.10c0					_AGOIndirect:
.10c0	a9 00		lda #$00			lda 	#0 							; evaluate operand in root.
.10c2	a2 0a		ldx #$0a		ldx	#10
.10c4	20 fb 33	jsr $33fb		jsr	mainHandler
.10c7	b1 28		lda ($28),y			lda 	(codePtr),y 				; does ) follow ? if so might be ) or ),Y
.10c9	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.10cb	f0 11		beq $10de			beq 	_AGOIndIndY
.10cd	20 ef 10	jsr $10ef			jsr 	ASMGetIndexing 				; must be ,X)
.10d0	90 39		bcc $110b			bcc 	AGISyntax
.10d2	e0 00		cpx #$00			cpx 	#0
.10d4	d0 35		bne $110b			bne 	AGISyntax
.10d6	a2 04		ldx #$04		ldx	#4
.10d8	20 fb 33	jsr $33fb		jsr	mainHandler
.10db	a9 0d		lda #$0d			lda 	#AMD_ZEROINDX
.10dd	60		rts				rts
.10de					_AGOIndIndY:
.10de	c8		iny				iny
.10df	20 ef 10	jsr $10ef			jsr 	ASMGetIndexing 				; get indexing if any
.10e2	a9 08		lda #$08			lda 	#AMD_ZEROIND
.10e4	90 cc		bcc $10b2			bcc 	_AGOExit 					; none then exit
.10e6	e0 00		cpx #$00			cpx 	#0 							; must be ,Y
.10e8	f0 21		beq $110b			beq 	AGISyntax
.10ea	a9 04		lda #$04			lda 	#AMD_ZEROINDY
.10ec	4c b2 10	jmp $10b2			jmp 	_AGOExit
.10ef					AsmGetIndexing:
.10ef	b1 28		lda ($28),y			lda 	(codePtr),y 				; check for comma
.10f1	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.10f3	18		clc				clc
.10f4	d0 14		bne $110a			bne 	_AGIExit 					; no comma, return with CC
.10f6	c8		iny				iny 								; get what SHOULD be X or Y
.10f7	b1 28		lda ($28),y			lda 	(codePtr),y  				; read it
.10f9	38		sec				sec 								; subtract 6 bit ASCII of X
.10fa	e9 18		sbc #$18			sbc 	#"X" & $3F
.10fc	c9 02		cmp #$02			cmp 	#2 							; if unsigned >= 2 then error
.10fe	b0 0b		bcs $110b			bcs 	AGISyntax
.1100	aa		tax				tax 								; put in index
.1101	c8		iny				iny 								; get what follows that, should be the $3A marker
.1102	b1 28		lda ($28),y			lda 	(codePtr),y
.1104	c8		iny				iny
.1105	c9 3a		cmp #$3a			cmp 	#$3A
.1107	d0 02		bne $110b			bne 	AGISyntax
.1109	38		sec				sec 								; return CS and index mode in X
.110a					_AGIExit:
.110a	60		rts				rts
.110b					AGISyntax:
.110b	a2 02		ldx #$02			ldx 	#ErrorID_syntax
.110d	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: assembler/assembler.asm


;******  Processing file: assembler/asmwrite.asm

.0af2					finalOpcode:
>0af2							.fill 	1
.1110					AsmWriteInstruction:
.1110	8d f2 0a	sta $0af2			sta 	finalOpcode					; save opcode.
.1113	98		tya				tya
.1114	48		pha				pha
.1115	ad 38 0a	lda $0a38			lda 	SingleLetterVar+("O"-"A")*4	; check O
.1118	29 02		and #$02			and 	#2
.111a	f0 2d		beq $1149			beq 	_ASMWNoEcho 				; if zero then don't echo.
.111c	ad 3d 0a	lda $0a3d			lda 	SingleLetterVar+("P"-"A")*4+1 ; write address in P
.111f	20 84 11	jsr $1184			jsr 	AWIWriteHex
.1122	ad 3c 0a	lda $0a3c			lda 	SingleLetterVar+("P"-"A")*4
.1125	20 84 11	jsr $1184			jsr 	AWIWriteHex
.1128	ad f2 0a	lda $0af2			lda 	finalOpcode 				; write opcode
.112b	20 7d 11	jsr $117d			jsr 	AWIWriteHexSpace
.112e	e0 00		cpx #$00			cpx 	#0
.1130	f0 0e		beq $1140			beq 	_ASMWEchoExit
.1132	a5 50		lda $50				lda 	esInt0
.1134	20 7d 11	jsr $117d			jsr 	AWIWriteHexSpace
.1137	e0 01		cpx #$01			cpx 	#1
.1139	f0 05		beq $1140			beq 	_ASMWEchoExit
.113b	a5 58		lda $58				lda 	esInt1
.113d	20 7d 11	jsr $117d			jsr 	AWIWriteHexSpace
.1140					_ASMWEchoExit:
.1140	8a		txa				txa
.1141	48		pha				pha
.1142	a2 06		ldx #$06		ldx	#6
.1144	20 f6 14	jsr $14f6		jsr	deviceHandler
.1147	68		pla				pla
.1148	aa		tax				tax
.1149					_ASMWNoEcho:
.1149	ad f2 0a	lda $0af2			lda 	finalOpcode
.114c	20 64 11	jsr $1164			jsr 	AsmWriteByte
.114f	e0 00		cpx #$00			cpx 	#0
.1151	f0 0e		beq $1161			beq 	_ASMWExit
.1153	a5 50		lda $50				lda 	esInt0
.1155	20 64 11	jsr $1164			jsr 	AsmWriteByte
.1158	e0 01		cpx #$01			cpx 	#1
.115a	f0 05		beq $1161			beq 	_ASMWExit
.115c	a5 58		lda $58				lda 	esInt1
.115e	20 64 11	jsr $1164			jsr 	AsmWriteByte
.1161					_ASMWExit:
.1161	68		pla				pla
.1162	a8		tay				tay
.1163	60		rts				rts
.1164					AsmWriteByte:
.1164	a0 00		ldy #$00			ldy 	#0
.1166	48		pha				pha
.1167	ad 3c 0a	lda $0a3c			lda 	SingleLetterVar+("P"-"A")*4 ; copy address to temp0
.116a	85 2a		sta $2a				sta 	temp0
.116c	ad 3d 0a	lda $0a3d			lda 	SingleLetterVar+("P"-"A")*4+1
.116f	85 2b		sta $2b				sta 	temp0+1
.1171	68		pla				pla 								; write out the byte.
.1172	91 2a		sta ($2a),y			sta 	(temp0),y
.1174	ee 3c 0a	inc $0a3c			inc 	SingleLetterVar+("P"-"A")*4	; increment P
.1177	d0 03		bne $117c			bne 	_AWBNoCarry
.1179	ee 3d 0a	inc $0a3d			inc 	SingleLetterVar+("P"-"A")*4+1
.117c					_AWBNoCarry:
.117c	60		rts				rts
.117d					AWIWriteHexSpace:
.117d	48		pha				pha
.117e	a9 20		lda #$20			lda 	#" "
.1180	20 97 11	jsr $1197			jsr 	AWIPrintChar
.1183	68		pla				pla
.1184					AWIWriteHex:
.1184	48		pha				pha
.1185	4a		lsr a				lsr 	a
.1186	4a		lsr a				lsr 	a
.1187	4a		lsr a				lsr 	a
.1188	4a		lsr a				lsr 	a
.1189	20 8d 11	jsr $118d			jsr 	AWIPrintNibble
.118c	68		pla				pla
.118d					AWIPrintNibble:
.118d	29 0f		and #$0f			and 	#15
.118f	c9 0a		cmp #$0a			cmp 	#10
.1191	90 02		bcc $1195			bcc 	_AWIPNDigit
.1193	69 06		adc #$06			adc 	#6
.1195					_AWIPNDigit:
.1195	69 30		adc #$30			adc 	#48
.1197					AWIPrintChar:
.1197	85 32		sta $32				sta 	tempShort
.1199	8a		txa				txa
.119a	48		pha				pha
.119b	a5 32		lda $32				lda 	tempShort
.119d	a2 16		ldx #$16		ldx	#22
.119f	20 f6 14	jsr $14f6		jsr	deviceHandler
.11a2	68		pla				pla
.11a3	aa		tax				tax
.11a4	60		rts				rts

;******  Return to file: assembler/assembler.asm


;******  Processing file: assembler/assemblecmd.asm

.0af3					asmToken:
>0af3							.fill 	1
.0af4					asmMode:
>0af4							.fill 	1 							; esInt0/1
.0af5					asmBaseOpcode:
>0af5							.fill 	1
.11a5					AssembleOneInstruction:
.11a5	8d f3 0a	sta $0af3			sta 	asmToken 					; save the token
.11a8	aa		tax				tax
.11a9	bd 72 11	lda $1172,x			lda 	OpcodeTable-TKA_GROUP1,x 	; get the base opcode.
.11ac	8d f5 0a	sta $0af5			sta 	asmBaseOpcode
.11af	20 5d 10	jsr $105d			jsr 	AsmGetOperand 				; identify the address mode and operand where applicable.
.11b2	8d f4 0a	sta $0af4			sta 	asmMode
.11b5	a5 58		lda $58				lda 	esInt1 						; check if this is a three byte operand.
.11b7	d0 05		bne $11be			bne 	_AOIThreeBytes 				; if so, we have to use three byte
.11b9	20 d4 11	jsr $11d4			jsr 	AssembleAttempt 			; try to assemble token/mode/operand (2 bytes)
.11bc	b0 10		bcs $11ce			bcs 	_AOISuccess 				; worked ok.
.11be					_AOIThreeBytes:
.11be	ae f4 0a	ldx $0af4			ldx 	asmMode 					; convert mode to 3 byte version, where possible.
.11c1	bd f8 11	lda $11f8,x			lda 	AbsoluteVersionTable,x
.11c4	30 09		bmi $11cf			bmi 	_AOIError					; not possible, no equivalent.
.11c6	8d f4 0a	sta $0af4			sta 	asmMode
.11c9	20 d4 11	jsr $11d4			jsr 	AssembleAttempt 			; try to assemble token/mode/operand (3 bytes)
.11cc	90 01		bcc $11cf			bcc 	_AOIError 					; didn't work.
.11ce					_AOISuccess:
.11ce	60		rts				rts
.11cf					_AOIError:
.11cf	a2 24		ldx #$24			ldx 	#ErrorID_Assembler
.11d1	20 18 15	jsr $1518		jsr	errorHandler
.11d4					AssembleAttempt:
.11d4	20 dd 11	jsr $11dd			jsr 	_AADispatch 				; go to the code which dispatches to the appropriate
.11d7	b0 03		bcs $11dc			bcs 	_AAExit 					; exit if carry set, e.g. was successful
.11d9	20 87 13	jsr $1387			jsr 	AssembleSpecialCase
.11dc					_AAExit:
.11dc	60		rts				rts
.11dd					_AADispatch:
.11dd	ad f3 0a	lda $0af3			lda 	asmToken
.11e0	c9 b7		cmp #$b7			cmp 	#TKA_GROUP4
.11e2	b0 11		bcs $11f5			bcs 	_AAGroup4
.11e4	c9 ae		cmp #$ae			cmp 	#TKA_GROUP3
.11e6	b0 0a		bcs $11f2			bcs 	_AAGroup3
.11e8	c9 9c		cmp #$9c			cmp 	#TKA_GROUP2
.11ea	b0 03		bcs $11ef			bcs 	_AAGroup2
.11ec	4c cd 12	jmp $12cd			jmp 	AssembleGroup1
.11ef					_AAGroup2:
.11ef	4c 28 13	jmp $1328			jmp 	AssembleGroup2
.11f2					_AAGroup3:
.11f2	4c 49 13	jmp $1349			jmp 	AssembleGroup3
.11f5					_AAGroup4:
.11f5	4c 7d 13	jmp $137d			jmp 	AssembleGroup4
.11f8					AbsoluteVersionTable:
>11f8	ff						.byte	$FF 			; fail AMD_IMM
>11f9	03						.byte	AMD_ABS 		; absolute AMD_ZERO
>11fa	ff						.byte	$FF 			; fail AMD_ACCIMP
>11fb	ff						.byte	$FF 			; fail AMD_ABS
>11fc	ff						.byte 	$FF 			; fail AMD_ZEROINDY
>11fd	07						.byte	AMD_ABSX 		; absolute AMD_ZEROX
>11fe	ff						.byte	$FF 			; fail AMD_ABSY
>11ff	ff						.byte	$FF 			; fail AMD_ABSX
>1200	0a						.byte	AMD_ABSIND 		; absolute AMD_ZEROIND
>1201	06						.byte	AMD_ABSY 		; absolute AMD_ZEROY
>1202	ff						.byte	$FF 			; fail AMD_ABSIND
>1203	ff						.byte	$FF 			; fail AMD_ABSINDX
>1204	ff						.byte	$FF 			; fail AMD_REL
>1205	0b						.byte 	AMD_ABSINDX 	; absolute AMD_ZEROINDX

;******  Processing file: assembler/../generated/asmtables.inc

.1206					OpcodeTable:
>1206	01					.byte	$01			; $94 ora
>1207	21					.byte	$21			; $95 (and)
>1208	41					.byte	$41			; $96 eor
>1209	61					.byte	$61			; $97 adc
>120a	81					.byte	$81			; $98 sta
>120b	a1					.byte	$a1			; $99 lda
>120c	c1					.byte	$c1			; $9a cmp
>120d	e1					.byte	$e1			; $9b sbc
>120e	02					.byte	$02			; $9c asl
>120f	22					.byte	$22			; $9d rol
>1210	42					.byte	$42			; $9e lsr
>1211	62					.byte	$62			; $9f ror
>1212	82					.byte	$82			; $a0 stx
>1213	a2					.byte	$a2			; $a1 ldx
>1214	c2					.byte	$c2			; $a2 dec
>1215	e2					.byte	$e2			; $a3 inc
>1216	60					.byte	$60			; $a4 stz
>1217	20					.byte	$20			; $a5 bit
>1218	80					.byte	$80			; $a6 sty
>1219	a0					.byte	$a0			; $a7 ldy
>121a	c0					.byte	$c0			; $a8 cpy
>121b	e0					.byte	$e0			; $a9 cpx
>121c	00					.byte	$00			; $aa tsb
>121d	10					.byte	$10			; $ab trb
>121e	14					.byte	$14			; $ac jsr
>121f	40					.byte	$40			; $ad jmp
>1220	10					.byte	$10			; $ae bpl
>1221	30					.byte	$30			; $af bmi
>1222	50					.byte	$50			; $b0 bvc
>1223	70					.byte	$70			; $b1 bvs
>1224	90					.byte	$90			; $b2 bcc
>1225	b0					.byte	$b0			; $b3 bcs
>1226	d0					.byte	$d0			; $b4 bne
>1227	f0					.byte	$f0			; $b5 beq
>1228	80					.byte	$80			; $b6 bra
>1229	00					.byte	$00			; $b7 brk
>122a	08					.byte	$08			; $b8 php
>122b	18					.byte	$18			; $b9 clc
>122c	28					.byte	$28			; $ba plp
>122d	38					.byte	$38			; $bb sec
>122e	40					.byte	$40			; $bc rti
>122f	48					.byte	$48			; $bd pha
>1230	58					.byte	$58			; $be cli
>1231	5a					.byte	$5a			; $bf phy
>1232	60					.byte	$60			; $c0 rts
>1233	68					.byte	$68			; $c1 pla
>1234	78					.byte	$78			; $c2 sei
>1235	7a					.byte	$7a			; $c3 ply
>1236	88					.byte	$88			; $c4 dey
>1237	8a					.byte	$8a			; $c5 txa
>1238	98					.byte	$98			; $c6 tya
>1239	9a					.byte	$9a			; $c7 txs
>123a	a8					.byte	$a8			; $c8 tay
>123b	aa					.byte	$aa			; $c9 tax
>123c	b8					.byte	$b8			; $ca clv
>123d	ba					.byte	$ba			; $cb tsx
>123e	c8					.byte	$c8			; $cc iny
>123f	ca					.byte	$ca			; $cd dex
>1240	d8					.byte	$d8			; $ce cld
>1241	da					.byte	$da			; $cf phx
>1242	e8					.byte	$e8			; $d0 inx
>1243	ea					.byte	$ea			; $d1 nop
>1244	f8					.byte	$f8			; $d2 sed
>1245	fa					.byte	$fa			; $d3 plx
.1246					Group2OpcodeAvailability:
>1246	ae					.byte	$ae			; $9c asl $02
>1247	ae					.byte	$ae			; $9d rol $22
>1248	ae					.byte	$ae			; $9e lsr $42
>1249	ae					.byte	$ae			; $9f ror $62
>124a	0a					.byte	$0a			; $a0 stx $82
>124b	0b					.byte	$0b			; $a1 ldx $a2
>124c	aa					.byte	$aa			; $a2 dec $c2
>124d	aa					.byte	$aa			; $a3 inc $e2
>124e	22					.byte	$22			; $a4 stz $60
>124f	aa					.byte	$aa			; $a5 bit $20
>1250	2a					.byte	$2a			; $a6 sty $80
>1251	ab					.byte	$ab			; $a7 ldy $a0
>1252	2b					.byte	$2b			; $a8 cpy $c0
>1253	0b					.byte	$0b			; $a9 cpx $e0
>1254	0a					.byte	$0a			; $aa tsb $00
>1255	0a					.byte	$0a			; $ab trb $10
>1256	08					.byte	$08			; $ac jsr $14
>1257	08					.byte	$08			; $ad jmp $40
.1258					AssemblerSpecialCases:
>1258	ad 0a 6c				.byte	$ad,10,$6c		; jmp (abs)
>125b	ad 0b 7c				.byte	$ad,11,$7c		; jmp (abs,x)
>125e	a1 06 be				.byte	$a1,6,$be		; ldx abs,y
>1261	a1 09 b6				.byte	$a1,9,$b6		; ldx zp,y
>1264	a0 09 96				.byte	$a0,9,$96		; stx zp,y
>1267	a3 02 1a				.byte	$a3,2,$1a		; inc acc
>126a	a2 02 3a				.byte	$a2,2,$3a		; dec acc
>126d	a5 00 89				.byte	$a5,0,$89		; bit #
>1270	a4 03 9c				.byte	$a4,3,$9c		; stz abs
>1273	a4 07 9e				.byte	$a4,7,$9e		; stz abs,x
>1276	00					.byte	0

;******  Return to file: assembler/assemblecmd.asm


;******  Return to file: assembler/assembler.asm


;******  Processing file: assembler/assemblelabel.asm

.1277					AssembleLabel:
.1277	b1 28		lda ($28),y			lda 	(codePtr),y 				; check it's followed by a variable name.
.1279	c9 3a		cmp #$3a			cmp 	#$3A
.127b	b0 4b		bcs $12c8			bcs 	_ALSyntax
.127d	a9 00		lda #$00			lda 	#0							; get a variable name on to stack:0
.127f	a2 02		ldx #$02		ldx	#2
.1281	20 af 42	jsr $42af		jsr	variableHandler
.1284	a5 48		lda $48				lda 	esType 						; check integer reference
.1286	c9 80		cmp #$80			cmp 	#$80
.1288	d0 3e		bne $12c8			bne 	_ALSyntax
.128a	a5 50		lda $50				lda 	esInt0 						; copy that reference address to temp0
.128c	85 2a		sta $2a				sta 	temp0
.128e	a5 58		lda $58				lda 	esInt1
.1290	85 2b		sta $2b				sta 	temp0+1
.1292	98		tya				tya
.1293	48		pha				pha
.1294	ad 38 0a	lda $0a38			lda 	SingleLetterVar+("O"-"A")*4	; are we in Pass 2
.1297	4a		lsr a				lsr 	a
.1298	90 11		bcc $12ab			bcc 	_ALWrite
.129a	a0 00		ldy #$00			ldy 	#0
.129c	ad 3c 0a	lda $0a3c			lda 	SingleLetterVar+("P"-"A")*4 ; compare the value in P to the variable
.129f	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.12a1	d0 20		bne $12c3			bne 	_ALChanged
.12a3	c8		iny				iny
.12a4	ad 3d 0a	lda $0a3d			lda 	SingleLetterVar+("P"-"A")*4+1
.12a7	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.12a9	d0 18		bne $12c3			bne 	_ALChanged
.12ab					_ALWrite:
.12ab	a0 00		ldy #$00			ldy 	#0
.12ad	ad 3c 0a	lda $0a3c			lda 	SingleLetterVar+("P"-"A")*4 ; copy the value in P into the variable
.12b0	91 2a		sta ($2a),y			sta 	(temp0),y
.12b2	ad 3d 0a	lda $0a3d			lda 	SingleLetterVar+("P"-"A")*4+1
.12b5	c8		iny				iny
.12b6	91 2a		sta ($2a),y			sta 	(temp0),y
.12b8	a9 00		lda #$00			lda 	#0
.12ba	c8		iny				iny
.12bb	91 2a		sta ($2a),y			sta 	(temp0),y
.12bd	c8		iny				iny
.12be	91 2a		sta ($2a),y			sta 	(temp0),y
.12c0	68		pla				pla
.12c1	a8		tay				tay
.12c2	60		rts				rts
.12c3					_ALChanged:
.12c3	a2 26		ldx #$26			ldx 	#ErrorID_Label
.12c5	20 18 15	jsr $1518		jsr	errorHandler
.12c8					_ALSyntax:
.12c8	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.12ca	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: assembler/assembler.asm


;******  Processing file: assembler/subgroup.asm

.12cd					AssembleGroup1:
.12cd	ad f3 0a	lda $0af3			lda 	asmToken 					; firstly, we throw out STA immediate
.12d0	c9 98		cmp #$98			cmp 	#TKW_STA
.12d2	d0 07		bne $12db			bne 	_AG1NotStoreImm
.12d4	ad f4 0a	lda $0af4			lda 	asmMode
.12d7	c9 00		cmp #$00			cmp 	#AMD_IMM
.12d9	f0 2c		beq $1307			beq 	AG1ModeError
.12db					_AG1NotStoreImm:
.12db	ae f4 0a	ldx $0af4			ldx 	asmMode						; get mode into X.
.12de	bd 0c 13	lda $130c,x			lda		AMDOperandSize,X 			; get the size of the operand and push on stack
.12e1	48		pha				pha
.12e2	f0 23		beq $1307			beq 	AG1ModeError 				; if the size is zero, the mode must be Accumulator
.12e4	e0 00		cpx #$00			cpx 	#0 							; if the mode is zero, e.g. immediate
.12e6	d0 02		bne $12ea			bne 	_AG1NotImmediate
.12e8	a2 02		ldx #$02			ldx 	#2 							; then we use offset 2 here. This is how the 6502
.12ea					_AG1NotImmediate:
.12ea	e0 0d		cpx #$0d			cpx 	#AMD_ZEROINDX 				; (zero,x) uses slot 0.
.12ec	d0 02		bne $12f0			bne 	_AG1NotZX
.12ee	a2 00		ldx #$00			ldx 	#0
.12f0					_AG1NotZX:
.12f0	68		pla				pla 								; restore length
.12f1	e0 09		cpx #$09			cpx 	#9 							; anything > 8 fails.
.12f3	b0 10		bcs $1305			bcs 	AG1Fail
.12f5					AG1ReturnValue:
.12f5	85 32		sta $32				sta 	tempShort 					; save size of operand
.12f7	18		clc				clc
.12f8	bd 1a 13	lda $131a,x			lda 	AMDOffsetFromBase,X 		; get the offset for the address mode.
.12fb	6d f5 0a	adc $0af5			adc 	asmBaseOpcode 				; add the base opcode.
.12fe	a6 32		ldx $32				ldx 	tempShort 					; length in X
.1300	20 10 11	jsr $1110			jsr 	AsmWriteInstruction 		; output instruction.
.1303	38		sec				sec
.1304	60		rts				rts
.1305					AG1Fail:
.1305	18		clc				clc
.1306	60		rts				rts
.1307					AG1ModeError:
.1307	a2 24		ldx #$24			ldx 	#ErrorID_Assembler
.1309	20 18 15	jsr $1518		jsr	errorHandler
.130c					AMDOperandSize:
>130c	01 01 00 02					.byte 	1,1,0,2
>1310	01 01 02 02					.byte 	1,1,2,2
>1314	01 01 02 02					.byte 	1,1,2,2
>1318	01 01						.byte 	1,1
.131a					AMDOffsetFromBase:
>131a	00 04 08 0c					.byte 	0,4,8,12
>131e	10 14 18 1c					.byte	16,20,24,28
>1322	11 00 00 00					.byte 	17,0,0,0
>1326	00 00						.byte 	0,0
.1328					AssembleGroup2:
.1328	ad f4 0a	lda $0af4			lda 	asmMode 					; get the mode; if >= 8 cannot be a legit group 2
.132b	c9 08		cmp #$08			cmp 	#8
.132d	b0 18		bcs $1347			bcs 	_AG2Fail
.132f	85 2a		sta $2a				sta 	temp0 						; save in temp9
.1331	ae f3 0a	ldx $0af3			ldx 	asmToken					; get token in X, then get the availability flags for it
.1334	bd aa 11	lda $11aa,x			lda 	Group2OpcodeAvailability-TKA_GROUP2,x
.1337					_AG2Shift:
.1337	4a		lsr a				lsr 	a
.1338	c6 2a		dec $2a				dec 	temp0
.133a	10 fb		bpl $1337			bpl 	_AG2Shift
.133c	90 09		bcc $1347			bcc 	_AG2Fail 					; cannot do that instruction w/that opcode.
.133e	ae f4 0a	ldx $0af4			ldx  	asmMode 					; mode in X
.1341	bd 0c 13	lda $130c,x			lda		AMDOperandSize,X 			; get the size of the operand in A
.1344	4c f5 12	jmp $12f5			jmp 	AG1ReturnValue 				; and use that with Group 1's exit code
.1347					_AG2Fail:
.1347	18		clc				clc
.1348	60		rts				rts
.1349					AssembleGroup3:
.1349	ad 38 0a	lda $0a38			lda 	SingleLetterVar+("O"-"A")*4	; check bit 0 (pass) of O
.134c	4a		lsr a				lsr 	a
.134d	a9 00		lda #$00			lda 	#0 							; if clear, e.g. pass 1, use default zero.
.134f	90 21		bcc $1372			bcc 	_AG3Default
.1351	38		sec				sec	 								; calculate branch offset
.1352	a5 50		lda $50				lda		esInt0
.1354	ed 3c 0a	sbc $0a3c			sbc 	SingleLetterVar+("P"-"A")*4
.1357	aa		tax				tax
.1358	a5 58		lda $58				lda		esInt1
.135a	ed 3d 0a	sbc $0a3d			sbc 	SingleLetterVar+("P"-"A")*4+1
.135d	85 58		sta $58				sta 	esInt1
.135f	8a		txa				txa 								; add 126, now 128 too many.
.1360	18		clc				clc 								; we can use this to check the range
.1361	69 7e		adc #$7e			adc 	#126
.1363	85 50		sta $50				sta 	esInt0
.1365	90 02		bcc $1369			bcc 	_AG3NoCarry
.1367	e6 58		inc $58				inc 	esInt1
.1369					_AG3NoCarry:
.1369	a5 58		lda $58				lda 	esInt1 						; check in range.
.136b	d0 0b		bne $1378			bne 	_AG3Range
.136d	a5 50		lda $50				lda 	esInt0 						; fix up branch distance
.136f	38		sec				sec
.1370	e9 80		sbc #$80			sbc 	#128
.1372					_AG3Default:
.1372	85 50		sta $50				sta 	esInt0
.1374					_AG3ExitOk:
.1374	a2 01		ldx #$01			ldx 	#1 							; one opcode, use AG4 Code
.1376	d0 07		bne $137f			bne 	AG4Write
.1378					_AG3Range:
.1378	a2 25		ldx #$25			ldx 	#ErrorID_Branch
.137a	20 18 15	jsr $1518		jsr	errorHandler
.137d					AssembleGroup4:
.137d	a2 00		ldx #$00			ldx 	#0 							; no parameters in the opcode.
.137f					AG4Write:
.137f	ad f5 0a	lda $0af5			lda 	asmBaseOpcode				; the opcode is the opcode base.
.1382	20 10 11	jsr $1110			jsr 	AsmWriteInstruction 		; output instruction.
.1385	38		sec				sec
.1386	60		rts				rts
.1387					AssembleSpecialCase:
.1387	a2 00		ldx #$00			ldx 	#0
.1389					_ASCScan:
.1389	bd 58 12	lda $1258,x			lda 	AssemblerSpecialCases,x 	; scan token and mode for match
.138c	cd f3 0a	cmp $0af3			cmp 	asmToken
.138f	d0 08		bne $1399			bne 	_ASCNext
.1391	bd 59 12	lda $1259,x			lda 	AssemblerSpecialCases+1,x
.1394	cd f4 0a	cmp $0af4			cmp 	asmMode
.1397	f0 0a		beq $13a3			beq 	_ASCFound
.1399					_ASCNext:
.1399	e8		inx				inx									; next entry
.139a	e8		inx				inx
.139b	e8		inx				inx
.139c	bd 58 12	lda $1258,x			lda 	AssemblerSpecialCases,x 	; until table ends
.139f	d0 e8		bne $1389			bne 	_ASCScan
.13a1	18		clc				clc
.13a2	60		rts				rts
.13a3					_ASCFound:
.13a3	bd 5a 12	lda $125a,x			lda 	AssemblerSpecialCases+2,x 	; get the new opcode.
.13a6	48		pha				pha
.13a7	ae f4 0a	ldx $0af4			ldx  	asmMode 					; mode in X
.13aa	bd 0c 13	lda $130c,x			lda		AMDOperandSize,X 			; get the size of the operand in X
.13ad	aa		tax				tax
.13ae	68		pla				pla 								; opcode back
.13af	20 10 11	jsr $1110			jsr 	AsmWriteInstruction 		; output instruction.
.13b2	38		sec				sec
.13b3	60		rts				rts

;******  Return to file: assembler/assembler.asm

.13b4					assemblerHandler:
.13b4	7c b7 13	jmp ($13b7,x)			jmp 	(assemblerVectors,x)
.13b7					assemblerVectors:
>13b7	bd 13					.word _DummyControlHandler ; index 0
>13b9	a5 11					.word AssembleOneInstruction ; index 2
>13bb	77 12					.word AssembleLabel        ; index 4
.13bd					_DummyControlHandler:
.13bd	60		rts			rts

;******  Return to file: basic.asm

.13be					section_end_assembler:
.13be					section_start_device:

;******  Processing file: device/device.asm


;******  Processing file: device/option_x16/x16break.asm

.13be					X16Break:
.13be	20 e1 ff	jsr $ffe1			jsr 	$FFE1
.13c1	f0 01		beq $13c4			beq 	_IsBreak
.13c3	60		rts				rts
.13c4					_IsBreak:
.13c4	a2 21		ldx #$21			ldx 	#ErrorID_Break
.13c6	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: device/device.asm


;******  Processing file: device/option_x16/x16file.asm

.13c9					ExternSave:
.13c9	98		tya				tya
.13ca	48		pha				pha
.13cb	20 19 14	jsr $1419			jsr 	ExternGetLength 			; get length of file into A name YX
.13ce	20 bd ff	jsr $ffbd			jsr 	$FFBD 						; set name
.13d1	a9 01		lda #$01			lda 	#1
.13d3	a2 08		ldx #$08			ldx 	#8	 						; device #8
.13d5	a0 00		ldy #$00			ldy 	#0
.13d7	20 ba ff	jsr $ffba			jsr 	$FFBA 						; set LFS
.13da	a5 51		lda $51				lda 	esInt0+1 					; copy start of save address to temp0
.13dc	85 2a		sta $2a				sta 	temp0
.13de	a5 59		lda $59				lda 	esInt1+1
.13e0	85 2b		sta $2b				sta 	temp0+1
.13e2	a6 52		ldx $52				ldx 	esInt0+2 					; end address
.13e4	a4 5a		ldy $5a				ldy 	esInt1+2
.13e6	a9 2a		lda #$2a			lda 	#temp0 						; ref to start address
.13e8	20 d8 ff	jsr $ffd8			jsr 	$FFD8 						; save
.13eb	b0 03		bcs $13f0			bcs 	_ESSave
.13ed	68		pla				pla
.13ee	a8		tay				tay
.13ef	60		rts				rts
.13f0					_ESSave:
.13f0	a2 1f		ldx #$1f			ldx 	#ErrorID_Save
.13f2	20 18 15	jsr $1518		jsr	errorHandler
.13f5					ExternLoad:
.13f5	98		tya				tya
.13f6	48		pha				pha
.13f7	20 19 14	jsr $1419			jsr 	ExternGetLength 			; get length of file into A name YX
.13fa	20 bd ff	jsr $ffbd			jsr 	$FFBD 						; set name
.13fd	a9 01		lda #$01			lda 	#1
.13ff	a2 08		ldx #$08			ldx 	#8	 						; device #8
.1401	a0 00		ldy #$00			ldy 	#0
.1403	20 ba ff	jsr $ffba			jsr 	$FFBA 						; set LFS
.1406	a6 51		ldx $51				ldx 	esInt0+1 					; load address
.1408	a4 59		ldy $59				ldy 	esInt1+1
.140a	a9 00		lda #$00			lda 	#0 							; load command
.140c	20 d5 ff	jsr $ffd5			jsr 	$FFD5
.140f	b0 03		bcs $1414			bcs 	_ESLoad
.1411	68		pla				pla
.1412	a8		tay				tay
.1413	60		rts				rts
.1414					_ESLoad:
.1414	a2 20		ldx #$20			ldx 	#ErrorID_Load
.1416	20 18 15	jsr $1518		jsr	errorHandler
.1419					ExternGetLength:
.1419	a5 50		lda $50				lda 	esInt0 						; length into A.
.141b	85 2a		sta $2a				sta 	temp0
.141d	a5 58		lda $58				lda 	esInt1
.141f	85 2b		sta $2b				sta 	temp0+1
.1421	a0 00		ldy #$00			ldy 	#0
.1423	b1 2a		lda ($2a),y			lda 	(temp0),y
.1425	a6 50		ldx $50				ldx 	esInt0 						; name into YX
.1427	a4 58		ldy $58				ldy 	esInt1
.1429	e8		inx				inx 								; advance over the length pointer.
.142a	d0 01		bne $142d			bne 	_ESNoCarry
.142c	c8		iny				iny
.142d					_ESNoCarry:
.142d	60		rts				rts

;******  Return to file: device/device.asm


;******  Processing file: device/option_x16/x16io.asm

=240					MaxLineInputSize = 240
.0af6					bufferCount:
>0af6							.fill 	0
.0af6					bufferStorage:
>0af6							.fill 	MaxLineInputSize
.142e					IOControlHandler:
.142e	c9 00		cmp #$00			cmp 	#0
.1430	d0 12		bne $1444			bne		_CHExit
.1432	a9 0f		lda #$0f			lda 	#15 						; switch to upper/lower case mode
.1434	20 5d 14	jsr $145d			jsr 	IOPrintChar
.1437	a9 02		lda #$02			lda 	#2 							; green on black and clear screen
.1439	20 89 14	jsr $1489			jsr 	IOInk
.143c	a9 00		lda #$00			lda 	#0
.143e	20 9d 14	jsr $149d			jsr 	IOPaper
.1441	20 45 14	jsr $1445			jsr 	IOClearScreen
.1444					_CHExit:
.1444	60		rts				rts
.1445					IOClearScreen:
.1445	48		pha				pha
.1446	a9 93		lda #$93			lda	 	#147 						; char code $93 clears screen
.1448	20 5d 14	jsr $145d			jsr 	IOPrintChar
.144b	68		pla				pla
.144c	60		rts				rts
.144d					IONewLine:
.144d	48		pha				pha
.144e	a9 0d		lda #$0d			lda 	#13
.1450	20 5d 14	jsr $145d			jsr 	IOPrintChar
.1453	68		pla				pla
.1454	60		rts				rts
.1455					IOTab:
.1455	48		pha				pha
.1456	a9 20		lda #$20			lda 	#32
.1458	20 5d 14	jsr $145d			jsr 	IOPrintChar
.145b	68		pla				pla
.145c	60		rts				rts
.145d					IOPrintAscii:
.145d					IOPrintChar:
.145d	aa		tax				tax 								; save in X so we can save Y
.145e	5a		phy				phy
.145f	8a		txa				txa
.1460	c9 08		cmp #$08			cmp 	#8 							; make BS (8) onto CHR$(14) which is the
.1462	d0 02		bne $1466			bne 	_IOPCNotBS 					; Commodore/X16 backspace code.
.1464	a9 14		lda #$14			lda 	#$14
.1466					_IOPCNotBS:
.1466	20 d2 ff	jsr $ffd2			jsr 	$FFD2 						; CBM OS Call.
.1469	7a		ply				ply
.146a	60		rts				rts
.146b					IOInkey:
.146b	98		tya				tya
.146c	48		pha				pha
.146d	20 e4 ff	jsr $ffe4			jsr 	$FFE4
.1470	85 32		sta $32				sta 	tempShort
.1472	68		pla				pla
.1473	a8		tay				tay
.1474	a5 32		lda $32				lda 	tempShort					; no key pressed.
.1476	f0 10		beq $1488			beq 	_IOIExit
.1478	c9 0d		cmp #$0d			cmp 	#13 						; allow CR (13)
.147a	f0 0c		beq $1488			beq 	_IOIExit
.147c	c9 14		cmp #$14			cmp 	#$14 						; backspace code ($14) returns 8.
.147e	f0 06		beq $1486			beq 	_IOIBackspace
.1480	c9 20		cmp #$20			cmp 	#32 						; no other control allowed.
.1482	90 e7		bcc $146b			bcc 	IOInkey
.1484	b0 02		bcs $1488			bcs 	_IOIExit
.1486					_IOIBackspace:
.1486	a9 08		lda #$08			lda 	#8 							; return chr(8)
.1488					_IOIExit:
.1488	60		rts				rts
.1489					IOInk:
.1489	48		pha				pha
.148a	29 07		and #$07			and 	#7 							; 8 primaries
.148c	aa		tax				tax
.148d	bd 95 14	lda $1495,x			lda 	_IOColourTable,x 			; look up CBM code and print it.
.1490	20 5d 14	jsr $145d			jsr 	IOPrintChar
.1493	68		pla				pla
.1494	60		rts				rts
.1495					_IOColourTable:
>1495	90						.byte 	$90 					; 0 Black
>1496	96						.byte 	$96 					; 1 Red
>1497	1e						.byte 	$1E 					; 2 Green
>1498	9e						.byte 	$9E 					; 3 Yellow
>1499	9a						.byte 	$9A 					; 4 Blue
>149a	9c						.byte 	$9C 					; 5 Magenta
>149b	9f						.byte 	$9F 					; 6 Cyan
>149c	05						.byte 	$05 					; 7 White
.149d					IOPaper:
.149d	48		pha				pha
.149e	48		pha				pha
.149f	a9 01		lda #$01			lda 	#1 						; 1 swaps fgr/bgr, so we swap them, set fgr
.14a1	20 5d 14	jsr $145d			jsr 	IOPrintChar 			; and then swap them again.
.14a4	68		pla				pla
.14a5	20 89 14	jsr $1489			jsr 	IOInk
.14a8	a9 01		lda #$01			lda 	#1
.14aa	20 5d 14	jsr $145d			jsr 	IOPrintChar
.14ad	68		pla				pla
.14ae	60		rts				rts
.14af					IOLocate:
.14af	48		pha				pha
.14b0	a9 13		lda #$13			lda 	#$13 					; home cursor code
.14b2	20 5d 14	jsr $145d			jsr 	IOPrintChar
.14b5	a9 11		lda #$11			lda 	#$11 	 				; print Y x $11 (down)
.14b7	20 be 14	jsr $14be			jsr 	_IOLoc2
.14ba	68		pla				pla
.14bb	a8		tay				tay
.14bc	a9 1d		lda #$1d			lda 	#$1D 					; print Y x $1D (right)
.14be					_IOLoc2:
.14be	c0 00		cpy #$00			cpy 	#0
.14c0	f0 06		beq $14c8			beq 	_IOLocExit
.14c2	20 5d 14	jsr $145d			jsr 	IOPrintChar
.14c5	88		dey				dey
.14c6	d0 f6		bne $14be			bne 	_IOLoc2
.14c8					_IOLocExit:
.14c8	60		rts				rts
.14c9					IOInput:
.14c9	a9 00		lda #$00			lda 	#0
.14cb	8d f6 0a	sta $0af6			sta 	bufferCount
.14ce					_IOILoop:
.14ce	20 cf ff	jsr $ffcf			jsr 	$FFCF
.14d1	c9 0d		cmp #$0d			cmp 	#13
.14d3	f0 10		beq $14e5			beq 	_IOIExit
.14d5	ae f6 0a	ldx $0af6			ldx 	bufferCount
.14d8	e0 f0		cpx #$f0			cpx 	#MaxLineInputSize
.14da	f0 f2		beq $14ce			beq 	_IOILoop
.14dc	ee f6 0a	inc $0af6			inc 	bufferCount
.14df	9d f7 0a	sta $0af7,x			sta 	bufferStorage+1,x
.14e2	4c ce 14	jmp $14ce			jmp 	_IOILoop
.14e5					_IOIExit:
.14e5	a9 f6		lda #$f6			lda 	#(bufferCount) & $FF
.14e7	85 2a		sta $2a				sta 	temp0
.14e9	a9 0a		lda #$0a			lda 	#(bufferCount) >> 8
.14eb	85 2b		sta $2b				sta 	1+(temp0)
.14ed	60		rts				rts

;******  Return to file: device/device.asm


;******  Processing file: device/option_x16/x16timer.asm

.14ee					IOReadTimer:
.14ee	20 de ff	jsr $ffde			jsr 	$FFDE 						; reads timer into YXA so we want only YA
.14f1	48		pha				pha
.14f2	8a		txa				txa
.14f3	a8		tay				tay
.14f4	68		pla				pla
.14f5	60		rts				rts

;******  Return to file: device/device.asm

.14f6					deviceHandler:
.14f6	7c f9 14	jmp ($14f9,x)			jmp 	(deviceVectors,x)
.14f9					deviceVectors:
>14f9	2e 14					.word IOControlHandler     ; index 0
>14fb	be 13					.word X16Break             ; index 2
>14fd	45 14					.word IOClearScreen        ; index 4
>14ff	4d 14					.word IONewLine            ; index 6
>1501	89 14					.word IOInk                ; index 8
>1503	6b 14					.word IOInkey              ; index 10
>1505	c9 14					.word IOInput              ; index 12
>1507	f5 13					.word ExternLoad           ; index 14
>1509	af 14					.word IOLocate             ; index 16
>150b	9d 14					.word IOPaper              ; index 18
>150d	5d 14					.word IOPrintChar          ; index 20
>150f	5d 14					.word IOPrintAscii         ; index 22
>1511	c9 13					.word ExternSave           ; index 24
>1513	55 14					.word IOTab                ; index 26
>1515	ee 14					.word IOReadTimer          ; index 28
.1517					_DummyControlHandler:
.1517	60		rts			rts

;******  Return to file: basic.asm

.1518					section_end_device:
.1518					section_start_error:

;******  Processing file: error/error.asm


;******  Processing file: error/errorhandler.asm

.1518					ErrorHandler:
.1518	8a		txa				txa
.1519	48		pha				pha
.151a	a9 01		lda #$01			lda 	#1 							; red
.151c	a2 08		ldx #$08		ldx	#8
.151e	20 f6 14	jsr $14f6		jsr	deviceHandler
.1521	68		pla				pla
.1522	aa		tax				tax
.1523	a9 8e		lda #$8e			lda 	#(ErrorTextList) & $FF
.1525	85 2a		sta $2a				sta 	temp0
.1527	a9 15		lda #$15			lda 	#(ErrorTextList) >> 8
.1529	85 2b		sta $2b				sta 	1+(temp0)
.152b	ca		dex		_EHFind:dex									; errors start at 1
.152c	f0 10		beq $153e			beq 	_EHFound
.152e	a0 00		ldy #$00			ldy 	#0 							; goto next text message, add length + 1 to the pointer.
.1530	38		sec				sec
.1531	a5 2a		lda $2a				lda 	temp0
.1533	71 2a		adc ($2a),y			adc 	(temp0),y
.1535	85 2a		sta $2a				sta 	temp0
.1537	90 f2		bcc $152b			bcc 	_EHFind
.1539	e6 2b		inc $2b				inc 	temp0+1
.153b	4c 2b 15	jmp $152b			jmp 	_EHFind
.153e					_EHFound:
.153e	20 36 18	jsr $1836			jsr 	EHPrintAscii 				; print the string "temp0" now points to.
.1541	a0 00		ldy #$00			ldy 	#0 							; in a line, e.g. the offset to next is non zero.
.1543	b1 28		lda ($28),y			lda 	(codePtr),y
.1545	f0 39		beq $1580			beq 	_EHNoLine
.1547	a5 29		lda $29				lda 	codePtr+1 					; code running from the command line.
.1549	cd c9 0a	cmp $0ac9			cmp 	basePage+1
.154c	90 32		bcc $1580			bcc 	_EHNoLine
.154e	a9 8a		lda #$8a			lda 	#(EHAtMsg) & $FF
.1550	85 2a		sta $2a				sta 	temp0
.1552	a9 15		lda #$15			lda 	#(EHAtMsg) >> 8
.1554	85 2b		sta $2b				sta 	1+(temp0)
.1556	20 36 18	jsr $1836			jsr 	EHPrintAscii
.1559	a0 01		ldy #$01			ldy 	#1 							; set up line number in TOS
.155b	a2 00		ldx #$00			ldx 	#0
.155d	b1 28		lda ($28),y			lda 	(codePtr),y
.155f	95 50		sta $50,x			sta 	esInt0,x
.1561	c8		iny				iny
.1562	b1 28		lda ($28),y			lda 	(codePtr),y
.1564	95 58		sta $58,x			sta 	esInt1,x
.1566	a9 00		lda #$00			lda 	#0
.1568	95 60		sta $60,x			sta 	esInt2,x
.156a	95 68		sta $68,x			sta 	esInt3,x
.156c	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.156e	85 2a		sta $2a				sta 	temp0
.1570	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.1572	85 2b		sta $2b				sta 	1+(temp0)
.1574	a0 0a		ldy #$0a			ldy 	#10 						; in base 10.
.1576	a9 00		lda #$00			lda 	#0							; stack position zero.
.1578	a2 12		ldx #$12		ldx	#18
.157a	20 fb 33	jsr $33fb		jsr	mainHandler
.157d	20 36 18	jsr $1836			jsr 	EHPrintAscii
.1580					_EHNoLine:
.1580	a2 06		ldx #$06		ldx	#6
.1582	20 f6 14	jsr $14f6		jsr	deviceHandler
.1585	a2 04		ldx #$04		ldx	#4
.1587	20 61 1d	jsr $1d61		jsr	interactionHandler
.158a					EHAtMsg:
>158a	03 20 40 20					.text 	3," @ "

;******  Processing file: error/../generated/errortext.inc

.158e					ErrorTextList:
>158e	13 46 65 61 74 75 72 65			.text 19,"Feature not Present"
>1596	20 6e 6f 74 20 50 72 65 73 65 6e 74
>15a2	0c 53 79 6e 74 61 78 20			.text 12,"Syntax Error"
>15aa	45 72 72 6f 72
>15af	0f 4d 6f 64 75 6c 65 20			.text 15,"Module disabled"
>15b7	64 69 73 61 62 6c 65 64
>15bf	10 41 73 73 65 72 74 69			.text 16,"Assertion failed"
>15c7	6f 6e 20 66 61 69 6c 65 64
>15d0	0e 44 69 76 69 64 65 20			.text 14,"Divide By Zero"
>15d8	42 79 20 5a 65 72 6f
>15df	04 53 74 6f 70				.text 4,"Stop"
>15e4	0d 54 79 70 65 20 4d 69			.text 13,"Type Mismatch"
>15ec	73 6d 61 74 63 68
>15f2	0d 49 6c 6c 65 67 61 6c			.text 13,"Illegal Value"
>15fa	20 56 61 6c 75 65
>1600	15 4d 69 73 73 69 6e 67			.text 21,"Missing right bracket"
>1608	20 72 69 67 68 74 20 62 72 61 63 6b 65 74
>1616	0d 4d 69 73 73 69 6e 67			.text 13,"Missing comma"
>161e	20 63 6f 6d 6d 61
>1624	11 4d 69 73 73 69 6e 67			.text 17,"Missing reference"
>162c	20 72 65 66 65 72 65 6e 63 65
>1636	15 4c 69 6e 65 20 4e 75			.text 21,"Line Number not found"
>163e	6d 62 65 72 20 6e 6f 74 20 66 6f 75 6e 64
>164c	0f 53 74 72 69 6e 67 20			.text 15,"String too long"
>1654	74 6f 6f 20 6c 6f 6e 67
>165c	14 52 45 54 55 52 4e 20			.text 20,"RETURN without GOSUB"
>1664	77 69 74 68 6f 75 74 20 47 4f 53 55 42
>1671	14 55 4e 54 49 4c 20 77			.text 20,"UNTIL without REPEAT"
>1679	69 74 68 6f 75 74 20 52 45 50 45 41 54
>1686	10 4e 45 58 54 20 77 69			.text 16,"NEXT without FOR"
>168e	74 68 6f 75 74 20 46 4f 52
>1697	12 57 45 4e 44 20 77 69			.text 18,"WEND without WHILE"
>169f	74 68 6f 75 74 20 57 48 49 4c 45
>16aa	14 45 4e 44 50 52 4f 43			.text 20,"ENDPROC without PROC"
>16b2	20 77 69 74 68 6f 75 74 20 50 52 4f 43
>16bf	0e 42 61 64 20 4e 45 58			.text 14,"Bad NEXT index"
>16c7	54 20 69 6e 64 65 78
>16ce	17 53 74 72 75 63 74 75			.text 23,"Structures nested wrong"
>16d6	72 65 73 20 6e 65 73 74 65 64 20 77 72 6f 6e 67
>16e6	16 43 61 6e 6e 6f 74 20			.text 22,"Cannot create variable"
>16ee	63 72 65 61 74 65 20 76 61 72 69 61 62 6c 65
>16fd	19 52 65 74 75 72 6e 20			.text 25,"Return stack out of space"
>1705	73 74 61 63 6b 20 6f 75 74 20 6f 66 20 73 70 61
>1715	63 65
>1717	11 55 6e 6b 6e 6f 77 6e			.text 17,"Unknown Procedure"
>171f	20 50 72 6f 63 65 64 75 72 65
>1729	17 50 61 72 61 6d 65 74			.text 23,"Parameters do not match"
>1731	65 72 73 20 64 6f 20 6e 6f 74 20 6d 61 74 63 68
>1741	15 41 72 72 61 79 20 61			.text 21,"Array already defined"
>1749	6c 72 65 61 64 79 20 64 65 66 69 6e 65 64
>1757	12 44 49 4d 20 72 65 71			.text 18,"DIM requires array"
>175f	75 69 72 65 73 20 61 72 72 61 79
>176a	0f 42 61 64 20 61 72 72			.text 15,"Bad array index"
>1772	61 79 20 69 6e 64 65 78
>177a	1d 57 72 6f 6e 67 20 6e			.text 29,"Wrong number of array indices"
>1782	75 6d 62 65 72 20 6f 66 20 61 72 72 61 79 20 69
>1792	6e 64 69 63 65 73
>1798	0b 4f 75 74 20 6f 66 20			.text 11,"Out of data"
>17a0	64 61 74 61
>17a4	14 43 61 6e 6e 6f 74 20			.text 20,"Cannot tokenise line"
>17ac	74 6f 6b 65 6e 69 73 65 20 6c 69 6e 65
>17b9	0b 53 61 76 65 20 66 61			.text 11,"Save failed"
>17c1	69 6c 65 64
>17c5	0b 4c 6f 61 64 20 66 61			.text 11,"Load failed"
>17cd	69 6c 65 64
>17d1	05 42 72 65 61 6b			.text 5,"Break"
>17d7	0d 4f 75 74 20 6f 66 20			.text 13,"Out of memory"
>17df	6d 65 6d 6f 72 79
>17e5	16 45 78 70 72 65 73 73			.text 22,"Expression too complex"
>17ed	69 6f 6e 20 74 6f 6f 20 63 6f 6d 70 6c 65 78
>17fc	10 42 61 64 20 4f 70 65			.text 16,"Bad Operand/Mode"
>1804	72 61 6e 64 2f 4d 6f 64 65
>180d	13 42 72 61 6e 63 68 20			.text 19,"Branch out of range"
>1815	6f 75 74 20 6f 66 20 72 61 6e 67 65
>1821	13 4c 61 62 65 6c 20 63			.text 19,"Label changed value"
>1829	68 61 6e 67 65 64 20 76 61 6c 75 65
>1835	00					.byte 0

;******  Return to file: error/errorhandler.asm

.1836					EHPrintAscii:
.1836	a0 00		ldy #$00			ldy 	#0
.1838	b1 2a		lda ($2a),y			lda 	(temp0),y
.183a	aa		tax				tax
.183b	f0 0f		beq $184c			beq 	_EHPExit
.183d					_EHPLoop:
.183d	c8		iny				iny
.183e	8a		txa				txa
.183f	48		pha				pha
.1840	b1 2a		lda ($2a),y			lda 	(temp0),y
.1842	a2 16		ldx #$16		ldx	#22
.1844	20 f6 14	jsr $14f6		jsr	deviceHandler
.1847	68		pla				pla
.1848	aa		tax				tax
.1849	ca		dex				dex
.184a	d0 f1		bne $183d			bne 	_EHPLoop
.184c					_EHPExit:
.184c	60		rts				rts

;******  Return to file: error/error.asm


;******  Return to file: basic.asm

.184d					section_end_error:
.184d					section_start_extension:

;******  Processing file: extension/extension.asm


;******  Processing file: extension/extensionhandler.asm

.184d					ExtensionHandler:
.184d	c9 fe		cmp #$fe			cmp 	#$FE 						; check for force mode 0
.184f	f0 16		beq $1867			beq 	_ExtensionForce
.1851	c9 ff		cmp #$ff			cmp 	#$FF						; A = $FF command, otherwise unary function stack level.
.1853	d0 08		bne $185d			bne 	_ExtensionUnary 			; is passed in A.
.1855	b1 28		lda ($28),y			lda 	(codePtr),y 				; so this is a command, using Group 2.
.1857	c8		iny				iny
.1858	0a		asl a				asl 	a
.1859	aa		tax				tax
.185a	7c 5e 18	jmp ($185e,x)			jmp 	(Group2Vectors-12,x)
.185d					_ExtensionUnary:
.185d	48		pha				pha 								; save stack pos in A
.185e	b1 28		lda ($28),y			lda 	(codePtr),y 				; get shifted token, double into X
.1860	c8		iny				iny
.1861	0a		asl a				asl 	a
.1862	aa		tax				tax
.1863	68		pla				pla 								; restore stack pos and call group3 command.
.1864	7c 6a 18	jmp ($186a,x)			jmp 	(Group3Vectors-12,X)
.1867					_ExtensionForce:
.1867	4c 82 18	jmp $1882			jmp 	ForceMode0

;******  Processing file: extension/../generated/tokenvectors2.inc

.186a					Group2Vectors:
>186a	4c 1a					.word	Command_VPoke            ; $86 vpoke
>186c	4f 1a					.word	Command_VDoke            ; $87 vdoke
>186e	24 1a					.word	Command_VLoad            ; $88 vload
>1870	94 18					.word	CommandMode              ; $89 mode
>1872	3f 19					.word	CommandPalette           ; $8a palette
>1874	76 19					.word	CommandSprite            ; $8b sprite

;******  Return to file: extension/extensionhandler.asm


;******  Processing file: extension/../generated/tokenvectors3.inc

.1876					Group3Vectors:
>1876	98 1a					.word	Command_VPeek            ; $86 vpeek(
>1878	9b 1a					.word	Command_VDeek            ; $87 vdeek(

;******  Return to file: extension/extensionhandler.asm

.187a					XEvaluateInteger:
.187a	8a		txa				txa
.187b	a2 0a		ldx #$0a		ldx	#10
.187d	20 fb 33	jsr $33fb		jsr	mainHandler
.1880	aa		tax				tax
.1881	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/mode.asm

.0be6					currentMode:
>0be6							.fill 	4
.1882					ForceMode0:
.1882	a2 00		ldx #$00			ldx 	#0
.1884	86 50		stx $50				stx 	esInt0 						; in case we do it.
.1886					_FMCheck:
.1886	bd 13 19	lda $1913,x			lda 	CMModeList,x 				; do we need to switch ?
.1889	dd e6 0b	cmp $0be6,x			cmp 	currentMode,x
.188c	d0 13		bne $18a1			bne 	CMSetMode 					; different so switch.
.188e	e8		inx				inx
.188f	e0 04		cpx #$04			cpx 	#4
.1891	d0 f3		bne $1886			bne 	_FMCheck
.1893	60		rts				rts
.1894					CommandMode:
.1894	a9 00		lda #$00			lda 	#0
.1896	a2 0a		ldx #$0a		ldx	#10
.1898	20 fb 33	jsr $33fb		jsr	mainHandler
.189b	a5 68		lda $68				lda 	esInt3
.189d	29 70		and #$70			and 	#$70
.189f	d0 06		bne $18a7			bne 	CMNoExpand
.18a1					CMSetMode:
.18a1	20 f2 18	jsr $18f2			jsr 	CMExpandMode
.18a4	4c bb 18	jmp $18bb			jmp 	CMUpdateMode
.18a7					CMNoExpand:
.18a7	a5 50		lda $50				lda 	esInt0
.18a9	8d e6 0b	sta $0be6			sta 	currentMode
.18ac	a5 58		lda $58				lda 	esInt1
.18ae	8d e7 0b	sta $0be7			sta 	currentMode+1
.18b1	a5 60		lda $60				lda 	esInt2
.18b3	8d e8 0b	sta $0be8			sta 	currentMode+2
.18b6	a5 68		lda $68				lda 	esInt3
.18b8	8d e9 0b	sta $0be9			sta 	currentMode+3
.18bb					CMUpdateMode:
.18bb	a2 11		ldx #$11			ldx 	#$11
.18bd					_CMClear:
.18bd	a9 00		lda #$00			lda 	#0
.18bf	9d 29 9f	sta $9f29,x			sta 	$9F29,X
.18c2	ca		dex				dex
.18c3	10 f8		bpl $18bd			bpl 	_CMClear
.18c5	ad e9 0b	lda $0be9			lda 	currentMode+3 				; get current mode
.18c8	48		pha				pha 								; stack twice.
.18c9	48		pha				pha
.18ca	29 70		and #$70			and 	#$70 						; isolates bits 6,5,4 (sprites,L1 enable,L0 enable)
.18cc	09 01		ora #$01			ora 	#$01 						; turn the output on.
.18ce	8d 29 9f	sta $9f29			sta 	$9F29 						; write to DC_VIDEO
.18d1	68		pla				pla 								; get back
.18d2	20 17 19	jsr $1917			jsr 	CMToScale 					; convert lower 2 bits to a scale.
.18d5	8d 2a 9f	sta $9f2a			sta 	$9F2A 						; write to H-Scale
.18d8	68		pla				pla 								; get back, convert bits 2,3 to a scale.
.18d9	4a		lsr a				lsr 	a
.18da	4a		lsr a				lsr 	a
.18db	20 17 19	jsr $1917			jsr 	CMToScale 					; convert lower 2 bits to a scale.
.18de	8d 2b 9f	sta $9f2b			sta 	$9F2B
.18e1	a2 00		ldx #$00			ldx 	#0 							; this is offset from $9F2D to do L0
.18e3	ad e6 0b	lda $0be6			lda 	currentMode					; get L0 config byte
.18e6	20 22 19	jsr $1922			jsr 	CMDecodeLayer 				; and decode layer 0
.18e9	a2 07		ldx #$07			ldx 	#7 							; when we do layer 1, offset by 7 hence starts at $9F34
.18eb	ad e7 0b	lda $0be7			lda 	currentMode+1
.18ee	20 22 19	jsr $1922			jsr 	CMDecodeLayer
.18f1	60		rts				rts
.18f2					CMExpandMode:
.18f2	a5 50		lda $50				lda 	esInt0 						; get mode number
.18f4	c9 01		cmp #$01			cmp 	#(CMEndModeList-CMModeList) >> 2
.18f6	b0 16		bcs $190e			bcs 	_CMModeError
.18f8	0a		asl a				asl 	a 							; x 4 into X
.18f9	0a		asl a				asl 	a
.18fa	aa		tax				tax
.18fb	98		tya				tya
.18fc	48		pha				pha
.18fd	a0 00		ldy #$00			ldy 	#0
.18ff					_CMEMCopy:
.18ff	bd 13 19	lda $1913,x			lda 	CMModeList,x
.1902	99 e6 0b	sta $0be6,y			sta 	currentMode,y
.1905	e8		inx				inx
.1906	c8		iny				iny
.1907	c0 04		cpy #$04			cpy 	#4
.1909	d0 f4		bne $18ff			bne 	_CMEMCopy
.190b	68		pla				pla
.190c	a8		tay				tay
.190d	60		rts				rts
.190e					_CMModeError:
.190e	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.1910	20 18 15	jsr $1518		jsr	errorHandler
.1913					CMModeList:
>1913	00 60 00 20					.dword	$20006000 					; Mode 0 which is the standard 80x60 mode, no sprites
.1917					CMEndModeList:
.1917					CMToScale:
.1917	29 03		and #$03			and 	#3 							; lower 2 bits only
.1919	aa		tax				tax 								; put in X for counting
.191a	a9 00		lda #$00			lda 	#0 							; zero result
.191c	38		sec				sec 								; first time rotate CS in
.191d					_CMTSLoop:
.191d	6a		ror a				ror 	a
.191e	ca		dex				dex
.191f	10 fc		bpl $191d			bpl 	_CMTSLoop
.1921	60		rts				rts
.1922					CMDecodeLayer:
.1922	48		pha				pha 								; save it.
.1923	29 f7		and #$f7			and 	#$F7 						; all the bits except T256C which you can't set using this
.1925	9d 2d 9f	sta $9f2d,x			sta 	$9F2D,X
.1928	68		pla				pla 								; get it back
.1929	29 08		and #$08			and 	#$08 						; the missing bit sets the tile size.
.192b	f0 02		beq $192f			beq 	_CMDLNotSet
.192d	a9 03		lda #$03			lda 	#$03 						; which sets both lower bits, they're square.
.192f					_CMDLNotSet:
.192f	e0 00		cpx #$00			cpx 	#0
.1931	f0 06		beq $1939			beq 	_CMDLayer0 					; layer 1 has standard defaults for tile table, e.g. $7C
.1933	09 7c		ora #$7c			ora 	#$7C 						; so set those bits and write it out.
.1935	9d 2f 9f	sta $9f2f,x			sta 	$9F2F,X
.1938	60		rts				rts
.1939					_CMDLayer0:
.1939	09 80		ora #$80			ora 	#$80 						; tile base is $80
.193b	9d 2f 9f	sta $9f2f,x			sta 	$9F2F,X
.193e	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/palette.asm

.193f					CommandPalette:
.193f	a9 00		lda #$00			lda 	#0
.1941	a2 0c		ldx #$0c		ldx	#12
.1943	20 fb 33	jsr $33fb		jsr	mainHandler
.1946	a2 02		ldx #$02		ldx	#2
.1948	20 fb 33	jsr $33fb		jsr	mainHandler
.194b	a9 01		lda #$01			lda 	#1
.194d	a2 08		ldx #$08		ldx	#8
.194f	20 fb 33	jsr $33fb		jsr	mainHandler
.1952	a5 50		lda $50				lda 	esInt0 					; get palette #
.1954	20 64 19	jsr $1964			jsr 	PointToPaletteA			; point to palette register
.1957	a5 51		lda $51				lda 	esInt0+1
.1959	8d 23 9f	sta $9f23			sta 	$9F23
.195c	a5 59		lda $59				lda 	esInt1+1
.195e	29 0f		and #$0f			and 	#$0F
.1960	8d 23 9f	sta $9f23			sta 	$9F23
.1963	60		rts				rts
.1964					PointToPaletteA:
.1964	0a		asl a				asl 	a 							; x 2 -> LSB
.1965	8d 20 9f	sta $9f20			sta 	$9F20
.1968	a9 00		lda #$00			lda 	#0 							; carry into A
.196a	2a		rol a				rol 	a
.196b	09 fa		ora #$fa			ora 	#$FA 						; make correct address
.196d	8d 21 9f	sta $9f21			sta 	$9F21
.1970	a9 11		lda #$11			lda 	#$11 						; $01 and single step => $9F22
.1972	8d 22 9f	sta $9f22			sta 	$9F22
.1975	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/sprite.asm

.0bea					currSprite:
>0bea							.fill 	2
.1976					CommandSprite:
.1976	20 f9 19	jsr $19f9			jsr 	CSCheckOnOff 				; look for TRUE/FALSE
.1979	d0 0d		bne $1988			bne 	_CSCheckClear
.197b	ad 29 9f	lda $9f29			lda 	$9F29 						; sprite enable is bit 6.
.197e	29 bf		and #$bf			and 	#$BF 						; clear it whatever
.1980	90 02		bcc $1984			bcc 	_CSNotOn 					; if CS turn on, so set it
.1982	09 40		ora #$40			ora 	#$40
.1984					_CSNotOn:
.1984	8d 29 9f	sta $9f29			sta 	$9F29 						; write it back in new state and exit
.1987	60		rts				rts
.1988					_CSCheckClear:
.1988	a9 00		lda #$00			lda 	#0 							; no sprite currently selected.
.198a	8d eb 0b	sta $0beb			sta 	currSprite+1
.198d	b1 28		lda ($28),y			lda 	(codePtr),y 				; check for CLEAR
.198f	c9 e7		cmp #$e7			cmp 	#TKW_CLEAR
.1991	d0 05		bne $1998			bne 	_CSCommandLoop 				; not CLEAR, go to main loop
.1993	20 0a 1a	jsr $1a0a			jsr 	CSClearSprites 				; clear all the sprites
.1996	c8		iny				iny 								; consume CLEAR token and exit.
.1997	60		rts				rts
.1998					_CSCommandLoop:
.1998	20 f9 19	jsr $19f9			jsr 	CSCheckOnOff 				; check sprite on/off
.199b	f0 34		beq $19d1			beq 	_CSSetVisibility
.199d	b1 28		lda ($28),y			lda 	(codePtr),y 				; get and consume character
.199f	c9 80		cmp #$80			cmp 	#TOK_EOL					; EOL exit.
.19a1	f0 2d		beq $19d0			beq 	_CSExit
.19a3	c8		iny				iny									; consume it
.19a4	c9 ca		cmp #$ca			cmp 	#TKW_COLON 					; colon exit
.19a6	f0 28		beq $19d0			beq 	_CSExit
.19a8	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; semantic comma
.19aa	f0 ec		beq $1998			beq 	_CSCommandLoop
.19ac	88		dey				dey 								; unpick DEY
.19ad	a9 00		lda #$00			lda 	#0 							; sprite # now at level 0
.19af	a2 0c		ldx #$0c		ldx	#12
.19b1	20 fb 33	jsr $33fb		jsr	mainHandler
.19b4	06 50		asl $50				asl		esInt0 						; multiply A:esInt0 by 8
.19b6	b0 13		bcs $19cb			bcs 	_CSBadValue 				; sprites only 0-127
.19b8	06 50		asl $50				asl 	esInt0
.19ba	2a		rol a				rol 	a
.19bb	06 50		asl $50				asl 	esInt0
.19bd	2a		rol a				rol 	a
.19be	09 fc		ora #$fc			ora 	#$FC 						; MSB of address (barring $01 upper third byte)
.19c0	8d eb 0b	sta $0beb			sta 	currSprite+1
.19c3	a5 50		lda $50				lda 	esInt0 						; LSB of address
.19c5	8d ea 0b	sta $0bea			sta 	currSprite+0
.19c8	4c 98 19	jmp $1998			jmp 	_CSCommandLoop
.19cb					_CSBadValue
.19cb	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.19cd	20 18 15	jsr $1518		jsr	errorHandler
.19d0					_CSExit:
.19d0	60		rts				rts
.19d1					_CSSetVisibility:
.19d1	08		php				php 								; save carry
.19d2	a9 06		lda #$06			lda 	#6 							; set pos to offset 6.
.19d4	20 e7 19	jsr $19e7			jsr 	SpriteSetTarget
.19d7	ad 23 9f	lda $9f23			lda 	$9F23 						; read it.
.19da	29 f3		and #$f3			and 	#$F3 						; clear depth bits, disabling it.
.19dc	28		plp				plp
.19dd	90 02		bcc $19e1			bcc 	_CSSetOff 					; check if carry was set
.19df	09 0c		ora #$0c			ora 	#$0C 						; otherwise set depth bits to 11, on top.
.19e1					_CSSetOff:
.19e1	8d 23 9f	sta $9f23			sta 	$9F23 						; update and loop back
.19e4	4c 98 19	jmp $1998			jmp 	_CSCommandLoop
.19e7					SpriteSetTarget:
.19e7	0d ea 0b	ora $0bea			ora 	currSprite
.19ea	8d 20 9f	sta $9f20			sta 	$9F20
.19ed	ad eb 0b	lda $0beb			lda 	currSprite+1
.19f0	8d 21 9f	sta $9f21			sta 	$9F21
.19f3	a9 01		lda #$01			lda 	#$01
.19f5	8d 22 9f	sta $9f22			sta 	$9F22
.19f8	60		rts				rts
.19f9					CSCheckOnOff:
.19f9	b1 28		lda ($28),y			lda 	(codePtr),y 				; get and consume it.
.19fb	c8		iny				iny
.19fc	c9 ab		cmp #$ab			cmp 	#TKW_FALSE					; return CC/EQ if FALSE
.19fe	18		clc				clc
.19ff	f0 08		beq $1a09			beq 	_CSCOExit
.1a01	c9 aa		cmp #$aa			cmp 	#TKW_TRUE 					; return CS/EQ if TRUE
.1a03	38		sec				sec 								; return NE if neither.
.1a04	f0 03		beq $1a09			beq 	_CSCOExit
.1a06	88		dey				dey 								; undo consume
.1a07	c9 aa		cmp #$aa			cmp 	#TKW_TRUE 					; and set NE again, DEY will change it.
.1a09					_CSCOExit:
.1a09	60		rts				rts
.1a0a					CSClearSprites:
.1a0a	a9 11		lda #$11			lda 	#$11 						; set address to 1FC00 with single bump
.1a0c	8d 22 9f	sta $9f22			sta 	$9F22
.1a0f	a9 fc		lda #$fc			lda 	#$FC
.1a11	8d 21 9f	sta $9f21			sta 	$9F21
.1a14	a9 00		lda #$00			lda 	#0
.1a16	8d 20 9f	sta $9f20			sta 	$9F20
.1a19					_CSClear:
.1a19	a9 00		lda #$00			lda 	#0 							; set everything to $00
.1a1b	8d 23 9f	sta $9f23			sta 	$9F23
.1a1e	ad 21 9f	lda $9f21			lda 	$9F21
.1a21	d0 f6		bne $1a19			bne 	_CSClear
.1a23	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/vload.asm

.1a24					Command_VLoad:
.1a24	a9 00		lda #$00			lda 	#0 								; string which is the file name
.1a26	a2 0e		ldx #$0e		ldx	#14
.1a28	20 fb 33	jsr $33fb		jsr	mainHandler
.1a2b	a2 01		ldx #$01			ldx 	#1 								; load address at +1.
.1a2d	a5 35		lda $35				lda 	lowMemory 						; load it into lowMemory (for now ?)
.1a2f	95 50		sta $50,x			sta 	esInt0,x
.1a31	a5 36		lda $36				lda 	lowMemory+1
.1a33	95 58		sta $58,x			sta 	esInt1,x
.1a35	a9 00		lda #$00			lda 	#0
.1a37	95 60		sta $60,x			sta 	esInt2,x
.1a39	95 68		sta $68,x			sta 	esInt3,x
.1a3b	a2 0e		ldx #$0e		ldx	#14
.1a3d	20 f6 14	jsr $14f6		jsr	deviceHandler
.1a40	a5 51		lda $51				lda 	esInt0+1 						; (temp0) is where we are decoding from.
.1a42	85 2a		sta $2a				sta 	temp0
.1a44	a5 59		lda $59				lda 	esInt1+1
.1a46	85 2b		sta $2b				sta 	temp0+1
.1a48	20 c4 1a	jsr $1ac4			jsr 	LoadVRAMFile 					; load the VRAM file in.
.1a4b	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/vpeekpoke.asm

.1a4c					Command_VPoke:
.1a4c	38		sec				sec 						; one byte , CS
.1a4d	b0 01		bcs $1a50			bcs 	CmdVideoWrite
.1a4f					Command_VDoke:
.1a4f	18		clc				clc 						; two bytes, CC
.1a50					CmdVideoWrite:
.1a50	08		php				php 						; save one or two btes
.1a51	a9 00		lda #$00			lda 	#0  				; get address and value into levels 0,1
.1a53	a2 0a		ldx #$0a		ldx	#10
.1a55	20 fb 33	jsr $33fb		jsr	mainHandler
.1a58	a2 02		ldx #$02		ldx	#2
.1a5a	20 fb 33	jsr $33fb		jsr	mainHandler
.1a5d	a9 01		lda #$01			lda 	#1
.1a5f	a2 0a		ldx #$0a		ldx	#10
.1a61	20 fb 33	jsr $33fb		jsr	mainHandler
.1a64	a2 00		ldx #$00			ldx 	#0
.1a66	20 77 1a	jsr $1a77			jsr 	SetUpTOSVRamAddress ; copy target address to VRAM address registers
.1a69	a5 51		lda $51				lda 	esInt0+1 			; get MSB of write value
.1a6b	8d 23 9f	sta $9f23			sta 	$9F23
.1a6e	28		plp				plp 						; if it was Poke then exit
.1a6f	b0 05		bcs $1a76			bcs 	_CVWExit
.1a71	a5 59		lda $59				lda 	esInt1+1 			; doke, write the MSB.
.1a73	8d 23 9f	sta $9f23			sta 	$9F23
.1a76					_CVWExit:
.1a76	60		rts				rts
.1a77					SetUpTOSVRamAddress:
.1a77	b5 60		lda $60,x			lda 	esInt2,x 			; check range of address, data to $FFFF
.1a79	29 fe		and #$fe			and 	#$FE
.1a7b	15 68		ora $68,x			ora 	esInt3,x
.1a7d	d0 14		bne $1a93			bne 	CVWValue
.1a7f	b5 50		lda $50,x			lda 	esInt0,x			; set address up
.1a81	8d 20 9f	sta $9f20			sta 	$9F20
.1a84	b5 58		lda $58,x			lda 	esInt1,x
.1a86	8d 21 9f	sta $9f21			sta	 	$9F21
.1a89	b5 60		lda $60,x			lda 	esInt2,x
.1a8b	29 01		and #$01			and 	#1
.1a8d	09 10		ora #$10			ora 	#$10 				; step 1.
.1a8f	8d 22 9f	sta $9f22			sta 	$9F22
.1a92	60		rts				rts
.1a93					CVWValue:
.1a93	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.1a95	20 18 15	jsr $1518		jsr	errorHandler
.1a98					Command_VPeek:
.1a98	38		sec				sec 						; one byte , CS
.1a99	b0 01		bcs $1a9c			bcs 	CmdVideoRead
.1a9b					Command_VDeek:
.1a9b	18		clc				clc 						; two bytes, CC
.1a9c					CmdVideoRead:
.1a9c	08		php				php 						; save action on stack.
.1a9d	48		pha				pha 						; save stack position
.1a9e	a2 0a		ldx #$0a		ldx	#10
.1aa0	20 fb 33	jsr $33fb		jsr	mainHandler
.1aa3	a2 04		ldx #$04		ldx	#4
.1aa5	20 fb 33	jsr $33fb		jsr	mainHandler
.1aa8	68		pla				pla
.1aa9	aa		tax				tax
.1aaa	20 77 1a	jsr $1a77			jsr 	SetUpTOSVRamAddress	; set up VRAM address.
.1aad	a9 00		lda #$00			lda 	#0 					; zero upper 3 bytes
.1aaf	95 58		sta $58,x			sta 	esInt1,x
.1ab1	95 60		sta $60,x			sta 	esInt2,x
.1ab3	95 68		sta $68,x			sta 	esInt3,x
.1ab5	ad 23 9f	lda $9f23			lda 	$9F23				; copy 1st byte
.1ab8	95 50		sta $50,x			sta 	esInt0,x
.1aba	28		plp				plp 						; check if DOKE (carry was clear)
.1abb	b0 05		bcs $1ac2			bcs 	_CVRExit
.1abd	ad 23 9f	lda $9f23			lda 	$9F23 				; copy 2nd byte
.1ac0	95 58		sta $58,x			sta 	esInt1,x
.1ac2					_CVRExit:
.1ac2	8a		txa				txa 						; return X position.
.1ac3	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/vramprocess.asm

.0bec					compressMode:
>0bec							.fill 	1
.0bed					imageInfo:
>0bed							.fill 	X16MaxImages
.0c2d					imageAddr2Low:
>0c2d							.fill  	X16MaxImages
.0c6d					imageAddr2High:
>0c6d							.fill  	X16MaxImages
.1ac4					LoadVRAMFile:
.1ac4	8a		txa				txa
.1ac5	48		pha				pha
.1ac6	98		tya				tya
.1ac7	48		pha				pha
.1ac8					_LVRLoop:
.1ac8	20 66 1b	jsr $1b66			jsr 	LVFGet 						; get the next (never access direct)
.1acb	c9 80		cmp #$80			cmp 	#$80 						; exit ?
.1acd	f0 3e		beq $1b0d			beq 	_LVRExit
.1acf	b0 41		bcs $1b12			bcs 	_LVRLoad 					; load data in ?
.1ad1	c9 08		cmp #$08			cmp 	#$08 						; is it set address ?
.1ad3	90 0d		bcc $1ae2			bcc 	_LVRSetAddress
.1ad5	c9 10		cmp #$10			cmp 	#$10 						; is it set compression type ?
.1ad7	90 2d		bcc $1b06			bcc 	_LVRSetCompress
.1ad9	c9 64		cmp #$64			cmp 	#$64 						; is it set sprite type.
.1adb	90 43		bcc $1b20			bcc 	_LVRSetSprite
.1add	a2 01		ldx #$01			ldx 	#ErrorID_missing
.1adf	20 18 15	jsr $1518		jsr	errorHandler
.1ae2					_LVRSetAddress:
.1ae2	85 2d		sta $2d				sta 	temp1+1 					; 24 bit in temp1+1/temp1/A
.1ae4	20 66 1b	jsr $1b66			jsr 	LVFGet
.1ae7	85 2c		sta $2c				sta 	temp1
.1ae9	a9 00		lda #$00			lda 	#0
.1aeb	46 2d		lsr $2d				lsr 	temp1+1 					; / 2 twice.
.1aed	66 2c		ror $2c				ror 	temp1
.1aef	6a		ror a				ror		a
.1af0	46 2d		lsr $2d				lsr 	temp1+1
.1af2	66 2c		ror $2c				ror 	temp1
.1af4	6a		ror a				ror		a
.1af5	8d 20 9f	sta $9f20			sta 	$9F20 						; set write address with +1 increment
.1af8	a5 2c		lda $2c				lda 	temp1
.1afa	8d 21 9f	sta $9f21			sta 	$9F21
.1afd	a5 2d		lda $2d				lda 	temp1+1
.1aff	09 10		ora #$10			ora 	#$10
.1b01	8d 22 9f	sta $9f22			sta 	$9F22
.1b04	d0 c2		bne $1ac8			bne 	_LVRLoop
.1b06					_LVRSetCompress:
.1b06	29 07		and #$07			and 	#7
.1b08	8d ec 0b	sta $0bec			sta 	compressMode
.1b0b	10 bb		bpl $1ac8			bpl 	_LVRLoop
.1b0d					_LVRExit:
.1b0d	68		pla				pla
.1b0e	a8		tay				tay
.1b0f	68		pla				pla
.1b10	aa		tax				tax
.1b11	60		rts				rts
.1b12					_LVRLoad:
.1b12	29 7f		and #$7f			and 	#$7F 						; count in X (is > 0)
.1b14	aa		tax				tax
.1b15					_LVRLCopy:
.1b15	20 66 1b	jsr $1b66			jsr 	LVFGet 						; write to data.
.1b18	8d 23 9f	sta $9f23			sta 	$9F23
.1b1b	ca		dex				dex
.1b1c	d0 f7		bne $1b15			bne 	_LVRLCopy
.1b1e	f0 a8		beq $1ac8			beq 	_LVRLoop
.1b20					_LVRSetSprite:
.1b20	48		pha				pha 								; save on stack
.1b21	20 66 1b	jsr $1b66			jsr 	LVFGet 						; get the sprite number into X
.1b24	aa		tax				tax
.1b25	c9 40		cmp #$40			cmp 	#X16MaxImages				; too high ?
.1b27	b0 38		bcs $1b61			bcs 	_LVRSSValue
.1b29	68		pla				pla 								; restore the data held in the first byte
.1b2a	9d ed 0b	sta $0bed,x			sta 	imageInfo,x 				; and write into the sprite image table.
.1b2d					_LVRAlignVRAM:
.1b2d	ad 20 9f	lda $9f20			lda 	$9F20 						; check VRAM on 32 byte boundary
.1b30	29 1f		and #$1f			and 	#$1F
.1b32	f0 07		beq $1b3b			beq 	_LVRAligned
.1b34	a9 00		lda #$00			lda 	#$00
.1b36	8d 23 9f	sta $9f23			sta 	$9F23
.1b39	f0 f2		beq $1b2d			beq 	_LVRAlignVRAM
.1b3b					_LVRAligned:
.1b3b	ad 22 9f	lda $9f22			lda 	$9F22 						; put address/32 in sprite image table
.1b3e	4a		lsr a				lsr 	a 	 						; first halve into temp1
.1b3f	ad 21 9f	lda $9f21			lda 	$9F21
.1b42	6a		ror a				ror 	a
.1b43	85 2d		sta $2d				sta 	temp1+1
.1b45	ad 20 9f	lda $9f20			lda 	$9F20
.1b48	6a		ror a				ror 	a
.1b49	85 2c		sta $2c				sta 	temp1
.1b4b	a0 04		ldy #$04			ldy 	#4 							; divide it by 16 in temp1
.1b4d					_LVRShift:
.1b4d	46 2d		lsr $2d				lsr 	temp1+1
.1b4f	66 2c		ror $2c				ror 	temp1
.1b51	88		dey				dey
.1b52	d0 f9		bne $1b4d			bne 	_LVRShift
.1b54	a5 2d		lda $2d				lda 	temp1+1 					; copy result.
.1b56	9d 6d 0c	sta $0c6d,x			sta 	imageAddr2High,x
.1b59	a5 2c		lda $2c				lda 	temp1
.1b5b	9d 2d 0c	sta $0c2d,x			sta 	imageAddr2Low,x
.1b5e	4c c8 1a	jmp $1ac8			jmp 	_LVRLoop
.1b61					_LVRSSValue:
.1b61	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.1b63	20 18 15	jsr $1518		jsr	errorHandler
.1b66	84 32		sty $32		LVFGet:	sty 	tempShort
.1b68	a0 00		ldy #$00			ldy 	#0
.1b6a	b1 2a		lda ($2a),y			lda 	(temp0),y
.1b6c	a4 32		ldy $32				ldy	 	tempShort
.1b6e	e6 2a		inc $2a				inc 	temp0
.1b70	d0 02		bne $1b74			bne 	_LVFGExit
.1b72	e6 2b		inc $2b				inc 	temp0+1
.1b74					_LVFGExit:
.1b74	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Return to file: basic.asm

.1b75					section_end_extension:
.1b75					section_start_floatingpoint:

;******  Processing file: floatingpoint/floatingpoint.asm

.1b75					floatingpointHandler:
.1b75	a2 03		ldx #$03			ldx 	#ErrorID_NoModule
.1b77	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: basic.asm

.1b7a					section_end_floatingpoint:
.1b7a					section_start_interaction:

;******  Processing file: interaction/interaction.asm


;******  Processing file: interaction/cold.asm

.1b7a					ColdStartEntry:
.1b7a	a2 ff		ldx #$ff			ldx 	#$FF
.1b7c	9a		txs				txs
.1b7d	20 06 1c	jsr $1c06			jsr 	ForceStandardMode
.1b80	a2 04		ldx #$04		ldx	#4
.1b82	20 f6 14	jsr $14f6		jsr	deviceHandler
.1b85	a0 ff		ldy #$ff			ldy 	#255
.1b87					_CSBanner:
.1b87	c8		iny				iny
.1b88	b9 ae 1b	lda $1bae,y			lda 	Intro,y
.1b8b	f0 14		beq $1ba1			beq 	_CSStart
.1b8d	c9 08		cmp #$08			cmp 	#8
.1b8f	90 08		bcc $1b99			bcc 	_CSInk
.1b91	a2 16		ldx #$16		ldx	#22
.1b93	20 f6 14	jsr $14f6		jsr	deviceHandler
.1b96	4c 87 1b	jmp $1b87			jmp 	_CSBanner
.1b99					_CSInk:
.1b99	a2 08		ldx #$08		ldx	#8
.1b9b	20 f6 14	jsr $14f6		jsr	deviceHandler
.1b9e	4c 87 1b	jmp $1b87			jmp 	_CSBanner
.1ba1					_CSStart:
.1ba1	a2 16		ldx #$16		ldx	#22
.1ba3	20 fb 33	jsr $33fb		jsr	mainHandler
.1ba6	a2 06		ldx #$06		ldx	#6
.1ba8	20 fb 33	jsr $33fb		jsr	mainHandler
.1bab	4c c6 1c	jmp $1cc6			jmp 	WarmStartEntry
>1bae	06 2a 2a 2a 20 36 35 30		Intro:	.text 	6,"*** 6502 Extended BASIC ***",13,13
>1bb6	32 20 45 78 74 65 6e 64 65 64 20 42 41 53 49 43
>1bc6	20 2a 2a 2a 0d 0d
>1bcc	03 57 72 69 74 74 65 6e				.text 	3,"Written by Paul Robson 2021",13,13
>1bd4	20 62 79 20 50 61 75 6c 20 52 6f 62 73 6f 6e 20
>1be4	32 30 32 31 0d 0d
>1bea	02 42 61 73 69 63 20				.text 	2,"Basic "
>1bf1	30 2e 31 37					.text "0.17"
>1bf5	20 28						.text 	" ("
>1bf7	31 38 2d 4d 61 72 2d 32				.text "18-Mar-2021"
>1bff	30 32 31
>1c02	29 0d 0d 00					.text 	")",13,13,0
.1c06					ForceStandardMode:
.1c06	a9 fe		lda #$fe			lda 	#$FE
.1c08	20 4d 18	jsr $184d		jsr	extensionHandler
.1c0b	60		rts				rts

;******  Return to file: interaction/interaction.asm


;******  Processing file: interaction/delete.asm

.1c0c					DeleteLine:
.1c0c	ad c8 0a	lda $0ac8			lda 	basePage 					; copy program base to temp0
.1c0f	85 2a		sta $2a				sta 	temp0
.1c11	ad c9 0a	lda $0ac9			lda 	basePage+1
.1c14	85 2b		sta $2b				sta 	temp0+1
.1c16	a0 01		ldy #$01	_DLLoop:ldy 	#1 							; see if found line ?
.1c18	a5 50		lda $50				lda 	esInt0 						; e.g. the linenumbers match
.1c1a	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.1c1c	d0 07		bne $1c25			bne 	_DLNext
.1c1e	c8		iny				iny
.1c1f	a5 58		lda $58				lda 	esInt1
.1c21	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.1c23	f0 06		beq $1c2b			beq 	_DLFound
.1c25	20 49 1c	jsr $1c49	_DLNext:jsr 	IAdvanceTemp0 				; shift temp0 forward, return Z flag set if end.
.1c28	d0 ec		bne $1c16			bne 	_DLLoop
.1c2a	60		rts				rts
.1c2b					_DLFound:
.1c2b	a0 00		ldy #$00			ldy 	#0 							; this is the line to cut, so this offset is the bytes to remove
.1c2d	b1 2a		lda ($2a),y			lda 	(temp0),y
.1c2f	a8		tay				tay 								; so we copy from (temp0),y
.1c30	a2 00		ldx #$00			ldx 	#0  						; to (temp0,x)
.1c32					_DLCopyDown:
.1c32	b1 2a		lda ($2a),y			lda 	(temp0),y 					; copy one byte.
.1c34	81 2a		sta ($2a,x)			sta 	(temp0,x)
.1c36	e6 2a		inc $2a				inc 	temp0 						; advance pointer
.1c38	d0 02		bne $1c3c			bne 	_DLNoCarry
.1c3a	e6 2b		inc $2b				inc 	temp0+1
.1c3c					_DLNoCarry:
.1c3c	a5 2a		lda $2a				lda 	temp0 						; until hit low memory
.1c3e	c5 35		cmp $35				cmp 	lowMemory 					; which is comfortably after End Program.
.1c40	d0 f0		bne $1c32			bne 	_DLCopyDown
.1c42	a5 2b		lda $2b				lda 	temp0+1
.1c44	c5 36		cmp $36				cmp 	lowMemory+1
.1c46	d0 ea		bne $1c32			bne 	_DLCopyDown
.1c48	60		rts				rts
.1c49					IAdvanceTemp0:
.1c49	84 32		sty $32				sty 	tempShort
.1c4b	18		clc				clc
.1c4c	a0 00		ldy #$00			ldy 	#0 							; get offset
.1c4e	b1 2a		lda ($2a),y			lda 	(temp0),y 					; add to temp0
.1c50	65 2a		adc $2a				adc 	temp0
.1c52	85 2a		sta $2a				sta 	temp0
.1c54	90 02		bcc $1c58			bcc 	_IATNoCarry
.1c56	e6 2b		inc $2b				inc 	temp0+1
.1c58					_IATNoCarry:
.1c58	b1 2a		lda ($2a),y			lda 	(temp0),y
.1c5a	a4 32		ldy $32				ldy 	tempShort
.1c5c	c9 00		cmp #$00			cmp		#0 							; Z set if program end.
.1c5e	60		rts				rts

;******  Return to file: interaction/interaction.asm


;******  Processing file: interaction/insert.asm

.1c5f					InsertLine:
.1c5f	ad c8 0a	lda $0ac8			lda 	basePage 					; copy program base to temp0
.1c62	85 2a		sta $2a				sta 	temp0
.1c64	ad c9 0a	lda $0ac9			lda 	basePage+1
.1c67	85 2b		sta $2b				sta 	temp0+1
.1c69					_ILLoop:
.1c69	a0 01		ldy #$01			ldy 	#1
.1c6b	b1 2a		lda ($2a),y			lda 	(temp0),y
.1c6d	c5 50		cmp $50				cmp 	esInt0
.1c6f	c8		iny				iny
.1c70	b1 2a		lda ($2a),y			lda 	(temp0),y
.1c72	e5 58		sbc $58				sbc 	esInt1
.1c74	b0 05		bcs $1c7b			bcs 	_ILFound 					; we know it cannot be equal, it would have been deleted
.1c76	20 49 1c	jsr $1c49			jsr 	IAdvanceTemp0 				; shift temp0 forward, return Z flag set if end.
.1c79	d0 ee		bne $1c69			bne 	_ILLoop
.1c7b					_ILFound:
.1c7b	a5 35		lda $35				lda 	lowMemory 					; shift lowMemory up to make space for it.
.1c7d	85 2c		sta $2c				sta 	temp1             			; this pointer goes backwards
.1c7f	a5 36		lda $36				lda 	lowMemory+1
.1c81	85 2d		sta $2d				sta 	temp1+1
.1c83	ad ea 0d	lda $0dea			lda 	tokenBufferIndex 			; space to make in Y, 0 in X.
.1c86	18		clc				clc 								; add 3 for the line number and offset.
.1c87	69 03		adc #$03			adc 	#3 							; tokenbuffer already has $80
.1c89	a8		tay				tay
.1c8a	a2 00		ldx #$00			ldx 	#0
.1c8c	a1 2c		lda ($2c,x)	_ILMove:lda 	(temp1,x)					; shift up
.1c8e	91 2c		sta ($2c),y			sta 	(temp1),y
.1c90	a5 2c		lda $2c				lda 	temp1 						; check reached the insert point ?
.1c92	c5 2a		cmp $2a				cmp 	temp0
.1c94	d0 06		bne $1c9c			bne 	_ILMNext
.1c96	a5 2d		lda $2d				lda 	temp1+1
.1c98	c5 2b		cmp $2b				cmp 	temp0+1
.1c9a	f0 0b		beq $1ca7			beq 	_ILMCopy
.1c9c					_ILMNext:
.1c9c	a5 2c		lda $2c				lda 	temp1
.1c9e	d0 02		bne $1ca2			bne 	_ILNoBorrow
.1ca0	c6 2d		dec $2d				dec 	temp1+1
.1ca2					_ILNoBorrow:
.1ca2	c6 2c		dec $2c				dec 	temp1
.1ca4	4c 8c 1c	jmp $1c8c			jmp 	_ILMove 					; and go round again
.1ca7					_ILMCopy:
.1ca7	98		tya				tya 								; Y is the offset of the new line.
.1ca8	81 2a		sta ($2a,x)			sta 	(temp0,x)					; X = 0 still.
.1caa	a0 01		ldy #$01			ldy 	#1 							; copy in line number.
.1cac	a5 50		lda $50				lda 	esInt0
.1cae	91 2a		sta ($2a),y			sta 	(temp0),y
.1cb0	c8		iny				iny
.1cb1	a5 58		lda $58				lda 	esInt1
.1cb3	91 2a		sta ($2a),y			sta 	(temp0),y
.1cb5	a0 00		ldy #$00			ldy 	#0 							; copy the body in
.1cb7					_ILMCopy2:
.1cb7	b1 28		lda ($28),y			lda 	(codePtr),y
.1cb9	c8		iny				iny
.1cba	c8		iny				iny
.1cbb	c8		iny				iny
.1cbc	91 2a		sta ($2a),y			sta 	(temp0),y
.1cbe	88		dey				dey
.1cbf	88		dey				dey
.1cc0	cc ea 0d	cpy $0dea			cpy 	tokenBufferIndex
.1cc3	d0 f2		bne $1cb7			bne 	_ILMCopy2
.1cc5	60		rts				rts

;******  Return to file: interaction/interaction.asm


;******  Processing file: interaction/warm.asm

.1cc6					WarmStartEntry:
.1cc6	a2 ff		ldx #$ff			ldx 	#$FF
.1cc8	9a		txs				txs
.1cc9	20 06 1c	jsr $1c06			jsr 	ForceStandardMode
.1ccc	a9 02		lda #$02			lda 	#2							; green text.
.1cce	a2 08		ldx #$08		ldx	#8
.1cd0	20 f6 14	jsr $14f6		jsr	deviceHandler
.1cd3	a2 0c		ldx #$0c		ldx	#12
.1cd5	20 f6 14	jsr $14f6		jsr	deviceHandler
.1cd8	a5 2a		lda $2a				lda 	temp0	 					; copy temp0 to codePtr
.1cda	85 28		sta $28				sta 	codePtr
.1cdc	a5 2b		lda $2b				lda 	temp0+1
.1cde	85 29		sta $29				sta 	codePtr+1
.1ce0	a2 06		ldx #$06		ldx	#6
.1ce2	20 f6 14	jsr $14f6		jsr	deviceHandler
.1ce5	a2 08		ldx #$08		ldx	#8
.1ce7	20 de 3e	jsr $3ede		jsr	tokeniserHandler
.1cea	c9 00		cmp #$00			cmp 	#0
.1cec	f0 25		beq $1d13			beq 	WSEError 					; failed (tokenise can fail if it doesn't know a character e.g. |)
.1cee	a9 e7		lda #$e7			lda 	#(tokenHeader) & $FF
.1cf0	85 28		sta $28				sta 	codePtr
.1cf2	a9 0c		lda #$0c			lda 	#(tokenHeader) >> 8
.1cf4	85 29		sta $29				sta 	1+(codePtr)
.1cf6	ad ea 0c	lda $0cea			lda 	tokenBuffer 				; is it a blank line, go get another line.
.1cf9	c9 80		cmp #$80			cmp 	#$80
.1cfb	f0 c9		beq $1cc6			beq 	WarmStartEntry
.1cfd	29 c0		and #$c0			and 	#$C0						; does it start with a number
.1cff	c9 40		cmp #$40			cmp 	#$40 						; e.g. is it 01xx xxxx
.1d01	f0 15		beq $1d18			beq 	HasLineNumber
.1d03	a9 00		lda #$00			lda 	#0 							; zero the token header, so it will look like a
.1d05	8d e7 0c	sta $0ce7			sta 	tokenHeader 				; fake program line.
.1d08	8d e8 0c	sta $0ce8			sta 	tokenHeader+1
.1d0b	8d e9 0c	sta $0ce9			sta 	tokenHeader+2
.1d0e	a2 18		ldx #$18		ldx	#24
.1d10	20 fb 33	jsr $33fb		jsr	mainHandler
.1d13					WSEError:
.1d13	a2 1e		ldx #$1e			ldx 	#ErrorID_Tokenise
.1d15	20 18 15	jsr $1518		jsr	errorHandler
.1d18					HasLineNumber:
.1d18	a0 03		ldy #$03			ldy 	#3 							; get line number
.1d1a	a9 00		lda #$00			lda 	#0
.1d1c	a2 0a		ldx #$0a		ldx	#10
.1d1e	20 fb 33	jsr $33fb		jsr	mainHandler
.1d21	a5 60		lda $60				lda 	esInt2		 				; check in range (only 2 bytes)
.1d23	05 68		ora $68				ora 	esInt3
.1d25	d0 ec		bne $1d13			bne 	WSEError
.1d27	98		tya				tya 								; make codePtr point to code after the line number.
.1d28	18		clc				clc 								; by skipping over the tokenised number.
.1d29	65 28		adc $28				adc 	codePtr
.1d2b	85 28		sta $28				sta 	codePtr
.1d2d	90 02		bcc $1d31			bcc		_HLNNoCarry
.1d2f	e6 29		inc $29				inc 	codePtr+1
.1d31					_HLNNoCarry:
.1d31	98		tya				tya 								; subtract that offset from the code buffer index
.1d32	38		sec				sec
.1d33	49 ff		eor #$ff			eor 	#$FF
.1d35	6d ea 0d	adc $0dea			adc 	tokenBufferIndex
.1d38	18		clc				clc 								; add space allowing for header & $80 trailer
.1d39	69 04		adc #$04			adc 	#4
.1d3b	8d ea 0d	sta $0dea			sta 	tokenBufferIndex 			; this is the number of bytes occupied.
.1d3e	20 0c 1c	jsr $1c0c			jsr 	DeleteLine 					; always delete the line, it's deleted and reinserted.
.1d41					_HLNNoDelete:
.1d41	ad ea 0d	lda $0dea			lda 	tokenBufferIndex 			; if line was empty, then don't insert
.1d44	c9 01		cmp #$01			cmp 	#1 							; (the one character is the EOL marker)
.1d46	f0 0c		beq $1d54			beq 	_HLMEditDone
.1d48	a5 36		lda $36				lda 	lowMemory+1 				; is there space, if we allow a little bit of
.1d4a	18		clc				clc 								; workspace (1k)
.1d4b	69 04		adc #$04			adc 	#4 							; e.g. 4 x 256
.1d4d	c5 34		cmp $34				cmp 	highMemory+1
.1d4f	b0 0b		bcs $1d5c			bcs 	_HLMMemory 					; nope, won't allowit.
.1d51	20 5f 1c	jsr $1c5f			jsr 	InsertLine 					; insert the line in
.1d54					_HLMEditDone:
.1d54	a2 06		ldx #$06		ldx	#6
.1d56	20 fb 33	jsr $33fb		jsr	mainHandler
.1d59	4c c6 1c	jmp $1cc6			jmp 	WarmStartEntry
.1d5c					_HLMMemory:
.1d5c	a2 22		ldx #$22			ldx 	#ErrorID_Memory
.1d5e	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: interaction/interaction.asm

.1d61					interactionHandler:
.1d61	7c 64 1d	jmp ($1d64,x)			jmp 	(interactionVectors,x)
.1d64					interactionVectors:
>1d64	6a 1d					.word _DummyControlHandler ; index 0
>1d66	7a 1b					.word ColdStartEntry       ; index 2
>1d68	c6 1c					.word WarmStartEntry       ; index 4
.1d6a					_DummyControlHandler:
.1d6a	60		rts			rts

;******  Return to file: basic.asm

.1d6b					section_end_interaction:
.1d6b					section_start_main:

;******  Processing file: main/main.asm


;******  Processing file: main/commands/compat/readdata.asm

.0cad					dataPtr:
>0cad							.fill 	2
.0caf					dataIndex:
>0caf							.fill 	1
.1d6b					CommandRead:
.1d6b	a2 00		ldx #$00			ldx 	#0 							; get a reference to a variable in stack:0
.1d6d	20 ae 2c	jsr $2cae			jsr 	EvaluateReference
.1d70	20 b1 1d	jsr $1db1			jsr 	SwapDPCP 					; use the data pointer.
.1d73	b1 28		lda ($28),y			lda 	(codePtr),y 				; see where it is.
.1d75	c8		iny				iny
.1d76	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; if it is on a comma, it is in data.
.1d78	f0 07		beq $1d81			beq 	_CRInData
.1d7a	88		dey				dey
.1d7b	a9 d9		lda #$d9			lda 	#TKW_DATA 					; scan forward to a DATA statement.
.1d7d	aa		tax				tax
.1d7e	20 b2 24	jsr $24b2			jsr 	ScanForward
.1d81					_CRInData:
.1d81	a2 01		ldx #$01			ldx 	#1 							; evaluate a value at Stack,1
.1d83	20 56 2c	jsr $2c56			jsr 	Evaluate
.1d86	ca		dex				dex 								; and write the value.
.1d87	20 05 20	jsr $2005			jsr 	WriteValue
.1d8a	20 b1 1d	jsr $1db1			jsr 	SwapDPCP 					; get the code pointer back.
.1d8d	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows ?
.1d8f	c8		iny				iny
.1d90	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; if comma, another variable
.1d92	f0 d7		beq $1d6b			beq 	CommandRead
.1d94	88		dey				dey
.1d95	60		rts				rts
.1d96					CommandData:
.1d96	a9 80		lda #$80			lda 	#TOK_EOL 					; go forward to end of line or colon.
.1d98	a2 ca		ldx #$ca			ldx 	#TKW_COLON
.1d9a	20 b2 24	jsr $24b2			jsr 	ScanForward
.1d9d	88		dey				dey 								; ending on EOL is a scan issue, as it increments
.1d9e	60		rts				rts
.1d9f					CommandRestore:
.1d9f	ad c8 0a	lda $0ac8			lda 	basePage
.1da2	8d ad 0c	sta $0cad			sta 	dataPtr
.1da5	ad c9 0a	lda $0ac9			lda 	basePage+1
.1da8	8d ae 0c	sta $0cae			sta 	dataPtr+1
.1dab	a9 03		lda #$03			lda 	#3
.1dad	8d af 0c	sta $0caf			sta 	dataIndex
.1db0	60		rts				rts
.1db1					SwapDPCP:
.1db1	8a		txa				txa
.1db2	48		pha				pha
.1db3	98		tya				tya 								; swap Y, DataIndex
.1db4	ac af 0c	ldy $0caf			ldy 	DataIndex
.1db7	8d af 0c	sta $0caf			sta 	DataIndex
.1dba	a5 28		lda $28				lda 	codePtr 					; swap code/dataptr low
.1dbc	ae ad 0c	ldx $0cad			ldx 	dataptr
.1dbf	8d ad 0c	sta $0cad			sta 	dataPtr
.1dc2	86 28		stx $28				stx 	codePtr
.1dc4	a5 29		lda $29				lda 	codePtr+1 					; swap code/dataptr high.
.1dc6	ae ae 0c	ldx $0cae			ldx 	dataptr+1
.1dc9	8d ae 0c	sta $0cae			sta 	dataPtr+1
.1dcc	86 29		stx $29				stx 	codePtr+1
.1dce	68		pla				pla
.1dcf	aa		tax				tax
.1dd0	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/compat/transfer.asm

.1dd1					CommandGOSUB:
.1dd1	20 73 2c	jsr $2c73			jsr 	EvaluateRootInteger			; get GOSUB line on stack top.
.1dd4	a2 04		ldx #$04			ldx 	#4 							; allocate 4 bytes on stack for GOSUB
.1dd6	a9 47		lda #$47			lda 	#markerGOSUB  				; <marker> <return addr/offset>
.1dd8	20 a8 33	jsr $33a8			jsr 	RSClaim
.1ddb	a9 01		lda #$01			lda 	#1 							; save position at offset 1.
.1ddd	20 d4 33	jsr $33d4			jsr 	RSSavePosition
.1de0	a2 00		ldx #$00			ldx 	#0 							; point back at GOSUB line
.1de2	f0 1b		beq $1dff			beq 	GotoTOS 					; and do a GOTO there.
.1de4					CommandRETURN:
.1de4	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.1de6	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.1de8	c9 47		cmp #$47			cmp 	#markerGOSUB 						; does it match
.1dea	f0 05		beq $1df1			beq 	_isok
.1dec	a2 0e		ldx #$0e			ldx 	#ErrorID_returnErr
.1dee	20 18 15	jsr $1518		jsr	errorHandler
.1df1					_isok:
.1df1	a9 01		lda #$01			lda 	#1
.1df3	20 e7 33	jsr $33e7			jsr 	RSLoadPosition 				; reload the position from offset 1.
.1df6	a9 04		lda #$04			lda 	#4 							; throw 4 bytes from stack.
.1df8	20 ca 33	jsr $33ca			jsr 	RSFree
.1dfb	60		rts				rts
.1dfc					CommandGOTO:
.1dfc	20 73 2c	jsr $2c73			jsr 	EvaluateRootInteger 		; get GOTO line on stack top.
.1dff					GotoTOS:
.1dff	20 96 27	jsr $2796			jsr 	ResetCodeAddress 			; simple search.
.1e02					_GotoSearch:
.1e02	a0 00		ldy #$00			ldy 	#0 							; get offset
.1e04	b1 28		lda ($28),y			lda 	(codePtr),y
.1e06	f0 21		beq $1e29			beq 	_GotoError 					; not found.
.1e08	c8		iny				iny									; check LSB match
.1e09	b1 28		lda ($28),y			lda 	(codePtr),y
.1e0b	d5 50		cmp $50,x			cmp 	esInt0,x
.1e0d	d0 07		bne $1e16			bne 	_GotoNext
.1e0f	c8		iny				iny
.1e10	b1 28		lda ($28),y			lda 	(codePtr),y
.1e12	d5 58		cmp $58,x			cmp 	esInt1,x
.1e14	f0 10		beq $1e26			beq 	_GotoFound
.1e16					_GotoNext:
.1e16	a0 00		ldy #$00			ldy 	#0 							; go next line
.1e18	b1 28		lda ($28),y			lda 	(codePtr),y
.1e1a	18		clc				clc
.1e1b	65 28		adc $28				adc 	codePtr
.1e1d	85 28		sta $28				sta 	codePtr
.1e1f	90 e1		bcc $1e02			bcc 	_GotoSearch
.1e21	e6 29		inc $29				inc 	codePtr+1
.1e23	4c 02 1e	jmp $1e02			jmp 	_GotoSearch
.1e26					_GotoFound:
.1e26	a0 03		ldy #$03			ldy 	#3 							; continue from that line
.1e28	60		rts				rts
.1e29					_GotoError:
.1e29	a2 0c		ldx #$0c			ldx 	#ErrorID_LineNumber
.1e2b	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/commands/io/input.asm

=32					MaxInputSize = 32
.0cb0					InputBuffer:
>0cb0							.fill 	MaxInputSize+1
.1e2e					Command_Input:
.1e2e	b1 28		lda ($28),y			lda 	(codePtr),y 			; see what's next.
.1e30	c8		iny				iny
.1e31	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 				; ignore commas.
.1e33	f0 f9		beq $1e2e			beq 	Command_Input
.1e35	88		dey				dey 							; undo consume
.1e36	c9 ca		cmp #$ca			cmp 	#TKW_COLON
.1e38	f0 54		beq $1e8e			beq 	_CIExit 				; : or EOL, exit
.1e3a	c9 80		cmp #$80			cmp 	#TOK_EOL
.1e3c	f0 50		beq $1e8e			beq 	_CIExit
.1e3e	c9 40		cmp #$40			cmp 	#$40 					; variable ?
.1e40	90 12		bcc $1e54			bcc 	_CIVariable
.1e42	c9 85		cmp #$85			cmp 	#TOK_STR 				; if not quoted string syntax error.
.1e44	d0 43		bne $1e89			bne 	_CISyntax
.1e46	a2 00		ldx #$00			ldx 	#0
.1e48	20 6a 2c	jsr $2c6a			jsr 	EvaluateString 			; evaluate and print string
.1e4b	20 67 20	jsr $2067			jsr 	TOSToTemp0
.1e4e	20 5d 1f	jsr $1f5d			jsr 	PrintString
.1e51	4c 2e 1e	jmp $1e2e			jmp 	Command_Input
.1e54					_CIVariable:
.1e54	a2 00		ldx #$00			ldx 	#0 						; evaluate a reference.
.1e56	20 ae 2c	jsr $2cae			jsr 	EvaluateReference  		; this is where its going
.1e59					_CIRetry:
.1e59	a9 3f		lda #$3f			lda 	#"?"					; print prompt
.1e5b	a2 14		ldx #$14		ldx	#20
.1e5d	20 f6 14	jsr $14f6		jsr	deviceHandler
.1e60	98		tya				tya
.1e61	48		pha				pha
.1e62	20 a2 1e	jsr $1ea2			jsr 	InputString 			; input a string (manually)
.1e65	a2 01		ldx #$01			ldx 	#1
.1e67	20 8f 1e	jsr $1e8f			jsr 	BufferToStackX 			; make stack,x ref input string.
.1e6a	a5 48		lda $48				lda 	esType 					; if target type numeric
.1e6c	29 40		and #$40			and 	#$40 					; then convert to number
.1e6e	d0 11		bne $1e81			bne 	_CIWrite
.1e70	a2 01		ldx #$01			ldx 	#1
.1e72	20 67 20	jsr $2067			jsr 	TOSToTemp0 				; string address in temp0, goes here.
.1e75	a9 0a		lda #$0a			lda 	#10
.1e77	20 7b 31	jsr $317b			jsr 	MInt32FromString 		; convert it back from a string.
.1e7a	68		pla				pla
.1e7b	a8		tay				tay
.1e7c	b0 03		bcs $1e81			bcs 	_CIWrite 				; successfully converted.
.1e7e	18		clc				clc 							; default fail FP conversion
.1e7f	90 d8		bcc $1e59			bcc		_CIRetry				; failed, try again.
.1e81					_CIWrite:
.1e81	a2 00		ldx #$00			ldx 	#0
.1e83	20 05 20	jsr $2005			jsr 	WriteValue
.1e86	4c 2e 1e	jmp $1e2e			jmp 	Command_Input
.1e89					_CISyntax:
.1e89	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.1e8b	20 18 15	jsr $1518		jsr	errorHandler
.1e8e					_CIExit:
.1e8e	60		rts				rts
.1e8f					BufferToStackX:
.1e8f	a9 b0		lda #$b0			lda 	#InputBuffer & $FF
.1e91	95 50		sta $50,x			sta 	esInt0,x
.1e93	a9 0c		lda #$0c			lda 	#InputBuffer >> 8
.1e95	95 58		sta $58,x			sta 	esInt1,x
.1e97	a9 00		lda #$00			lda 	#0
.1e99	95 60		sta $60,x			sta 	esInt2,x
.1e9b	95 68		sta $68,x			sta 	esInt3,x
.1e9d	a9 40		lda #$40			lda 	#$40
.1e9f	95 48		sta $48,x			sta 	esType,x
.1ea1	60		rts				rts
.1ea2					InputString:
.1ea2	a9 00		lda #$00			lda 	#0
.1ea4	8d b0 0c	sta $0cb0			sta 	InputBuffer
.1ea7					_InputLoop:
.1ea7	a2 02		ldx #$02		ldx	#2
.1ea9	20 f6 14	jsr $14f6		jsr	deviceHandler
.1eac	a2 0a		ldx #$0a		ldx	#10
.1eae	20 f6 14	jsr $14f6		jsr	deviceHandler
.1eb1	c9 00		cmp #$00			cmp 	#0
.1eb3	f0 f2		beq $1ea7			beq 	_InputLoop
.1eb5	c9 08		cmp #$08			cmp 	#8
.1eb7	f0 19		beq $1ed2			beq 	_InputBackspace
.1eb9	c9 0d		cmp #$0d			cmp 	#13
.1ebb	f0 21		beq $1ede			beq 	_InputExit
.1ebd	ae b0 0c	ldx $0cb0			ldx 	InputBuffer
.1ec0	e0 20		cpx #$20			cpx 	#MaxInputSize 			; too many characters
.1ec2	f0 e3		beq $1ea7			beq 	_InputLoop
.1ec4	9d b1 0c	sta $0cb1,x			sta 	InputBuffer+1,x 		; write char
.1ec7	ee b0 0c	inc $0cb0			inc 	InputBuffer 			; advance count.
.1eca					_InputPrintLoop:
.1eca	a2 14		ldx #$14		ldx	#20
.1ecc	20 f6 14	jsr $14f6		jsr	deviceHandler
.1ecf	4c a7 1e	jmp $1ea7			jmp	 	_InputLoop
.1ed2					_InputBackspace:
.1ed2	ad b0 0c	lda $0cb0			lda 	InputBuffer 			; at start
.1ed5	f0 d0		beq $1ea7			beq 	_InputLoop
.1ed7	ce b0 0c	dec $0cb0			dec 	InputBuffer
.1eda	a9 08		lda #$08			lda 	#8
.1edc	d0 ec		bne $1eca			bne 	_InputPrintLoop
.1ede					_InputExit:
.1ede	a2 06		ldx #$06		ldx	#6
.1ee0	20 f6 14	jsr $14f6		jsr	deviceHandler
.1ee3	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/io/print.asm

.0cd1					lastPrintToken:
>0cd1							.fill 	1
.1ee4					Command_Print:
.1ee4	a9 00		lda #$00			lda 	#0 							; clear LPT to a non token
.1ee6	8d d1 0c	sta $0cd1			sta 	lastPrintToken
.1ee9	88		dey				dey
.1eea					_PrintLoopSkip:
.1eea	c8		iny				iny
.1eeb					_PrintLoop:
.1eeb	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows
.1eed	c9 80		cmp #$80			cmp 	#TOK_EOL  					; done if end of line or colon
.1eef	f0 5b		beq $1f4c			beq 	_PrintExit
.1ef1	c9 ca		cmp #$ca			cmp 	#TKW_COLON
.1ef3	f0 57		beq $1f4c			beq 	_PrintExit
.1ef5	8d d1 0c	sta $0cd1			sta 	lastPrintToken 				; update Last print token, so we check ; and ,
.1ef8	c9 cc		cmp #$cc			cmp 	#TKW_SEMICOLON 				; ignore semicolon
.1efa	f0 ee		beq $1eea			beq 	_PrintLoopSkip
.1efc	c9 cd		cmp #$cd			cmp 	#TKW_QUOTE 					; ' is new line
.1efe	f0 3c		beq $1f3c			beq	 	_PrintNewLine
.1f00	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; , is print tab
.1f02	f0 40		beq $1f44			beq 	_PrintTab
.1f04	20 54 2c	jsr $2c54			jsr 	EvaluateRoot 				; evaluate something at the root
.1f07	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.1f09	85 2a		sta $2a				sta 	temp0
.1f0b	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.1f0d	85 2b		sta $2b				sta 	1+(temp0)
.1f0f	a5 48		lda $48				lda 	esType 						; get type
.1f11	f0 15		beq $1f28			beq		_PrintInteger
.1f13	4a		lsr a				lsr 	a 							; check for floating point
.1f14	b0 08		bcs $1f1e			bcs 	_PrintFloat
.1f16					_PrintString:
.1f16	a2 00		ldx #$00			ldx 	#0 							; bottom string to temp0
.1f18	20 67 20	jsr $2067			jsr 	TOSToTemp0
.1f1b	4c 36 1f	jmp $1f36			jmp 	_PrintTemp0 				; print no leading space.
.1f1e					_PrintFloat:
.1f1e	a9 00		lda #$00			lda 	#0 							; stack level.
.1f20	a2 16		ldx #$16		ldx	#22
.1f22	20 75 1b	jsr $1b75		jsr	floatingpointHandler
.1f25	4c 2f 1f	jmp $1f2f			jmp 	_PrintSpaceTemp0
.1f28					_PrintInteger:
.1f28	a9 8a		lda #$8a			lda 	#10+$80 					; base 10 signed
.1f2a	a2 00		ldx #$00			ldx 	#0 							; bottom stack element
.1f2c	20 63 32	jsr $3263			jsr 	MInt32ToString				; convert to text
.1f2f					_PrintSpaceTemp0:
.1f2f	a9 20		lda #$20			lda 	#32
.1f31	a2 14		ldx #$14		ldx	#20
.1f33	20 f6 14	jsr $14f6		jsr	deviceHandler
.1f36					_PrintTemp0:
.1f36	20 5d 1f	jsr $1f5d			jsr 	PrintString
.1f39	4c eb 1e	jmp $1eeb			jmp 	_PrintLoop
.1f3c					_PrintNewLine:
.1f3c	a2 06		ldx #$06		ldx	#6
.1f3e	20 f6 14	jsr $14f6		jsr	deviceHandler
.1f41	4c ea 1e	jmp $1eea			jmp 	_PrintLoopSkip
.1f44					_PrintTab:
.1f44	a2 1a		ldx #$1a		ldx	#26
.1f46	20 f6 14	jsr $14f6		jsr	deviceHandler
.1f49	4c ea 1e	jmp $1eea			jmp 	_PrintLoopSkip
.1f4c					_PrintExit:
.1f4c	ad d1 0c	lda $0cd1			lda		lastPrintToken 				; check last token
.1f4f	c9 cc		cmp #$cc			cmp 	#TKW_SEMICOLON 				; if , or ; do not print NL
.1f51	f0 09		beq $1f5c			beq 	_PrintExit2
.1f53	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.1f55	f0 05		beq $1f5c			beq 	_PrintExit2
.1f57	a2 06		ldx #$06		ldx	#6
.1f59	20 f6 14	jsr $14f6		jsr	deviceHandler
.1f5c					_PrintExit2:
.1f5c	60		rts				rts
.1f5d					PrintString:
.1f5d	8a		txa				txa
.1f5e	48		pha				pha
.1f5f	98		tya				tya
.1f60	48		pha				pha
.1f61	a0 00		ldy #$00			ldy 	#0							; get length
.1f63	b1 2a		lda ($2a),y			lda 	(temp0),y
.1f65	aa		tax				tax 								; into X
.1f66	e0 00		cpx #$00	_PSLoop:cpx 	#0 							; finished ?
.1f68	f0 10		beq $1f7a			beq 	_PSExit
.1f6a	ca		dex				dex
.1f6b	8a		txa				txa
.1f6c	48		pha				pha
.1f6d	c8		iny				iny
.1f6e	b1 2a		lda ($2a),y			lda 	(temp0),y
.1f70	a2 14		ldx #$14		ldx	#20
.1f72	20 f6 14	jsr $14f6		jsr	deviceHandler
.1f75	68		pla				pla
.1f76	aa		tax				tax
.1f77	4c 66 1f	jmp $1f66			jmp 	_PSLoop
.1f7a					_PSExit:
.1f7a	68		pla				pla
.1f7b	a8		tay				tay
.1f7c	68		pla				pla
.1f7d	aa		tax				tax
.1f7e	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/io/text.asm

.1f7f					Command_CLS:
.1f7f	a2 04		ldx #$04		ldx	#4
.1f81	20 f6 14	jsr $14f6		jsr	deviceHandler
.1f84	60		rts				rts
.1f85					Command_Ink:
.1f85	a2 00		ldx #$00			ldx 	#0
.1f87	20 7d 2c	jsr $2c7d			jsr 	EvaluateSmallInteger
.1f8a	a2 08		ldx #$08		ldx	#8
.1f8c	20 f6 14	jsr $14f6		jsr	deviceHandler
.1f8f	60		rts				rts
.1f90					Command_Paper:
.1f90	a2 00		ldx #$00			ldx 	#0
.1f92	20 7d 2c	jsr $2c7d			jsr 	EvaluateSmallInteger
.1f95	a2 12		ldx #$12		ldx	#18
.1f97	20 f6 14	jsr $14f6		jsr	deviceHandler
.1f9a	60		rts				rts
.1f9b					Command_Locate:
.1f9b	a2 00		ldx #$00			ldx 	#0
.1f9d	20 7d 2c	jsr $2c7d			jsr 	EvaluateSmallInteger
.1fa0	20 8d 33	jsr $338d			jsr 	CheckComma
.1fa3	e8		inx				inx
.1fa4	20 7d 2c	jsr $2c7d			jsr 	EvaluateSmallInteger
.1fa7	98		tya				tya
.1fa8	48		pha				pha
.1fa9	a4 51		ldy $51				ldy 	esInt0+1
.1fab	a5 50		lda $50				lda 	esInt0
.1fad	a2 10		ldx #$10		ldx	#16
.1faf	20 f6 14	jsr $14f6		jsr	deviceHandler
.1fb2	68		pla				pla
.1fb3	a8		tay				tay
.1fb4	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/io/vdu.asm

.1fb5					Command_VDU:
.1fb5	20 73 2c	jsr $2c73			jsr 	EvaluateRootInteger 			; get integer at root.
.1fb8	a5 50		lda $50				lda 	esInt0
.1fba	a2 14		ldx #$14		ldx	#20
.1fbc	20 f6 14	jsr $14f6		jsr	deviceHandler
.1fbf					_CVNext:
.1fbf	b1 28		lda ($28),y			lda 	(codePtr),y 					; what follows ?
.1fc1	c8		iny				iny
.1fc2	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 						; comma, do again
.1fc4	f0 ef		beq $1fb5			beq 	Command_VDU
.1fc6	c9 cc		cmp #$cc			cmp 	#TKW_SEMICOLON 					; semicolon, print MSB
.1fc8	d0 0a		bne $1fd4			bne 	_CVExit
.1fca	a5 58		lda $58				lda 	esInt1
.1fcc	a2 14		ldx #$14		ldx	#20
.1fce	20 f6 14	jsr $14f6		jsr	deviceHandler
.1fd1	4c bf 1f	jmp $1fbf			jmp 	_CVNext
.1fd4	88		dey		_CVExit:dey
.1fd5	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/link.asm


;******  Return to file: main/main.asm


;******  Processing file: main/commands/misc/assert.asm

.1fd6					Command_Assert:
.1fd6	20 73 2c	jsr $2c73			jsr 	EvaluateRootInteger 		; what is being asserted.
.1fd9	20 34 33	jsr $3334			jsr 	MInt32Zero 					; is it true ?
.1fdc	f0 01		beq $1fdf			beq 	_CAError
.1fde	60		rts				rts
.1fdf					_CAError:
.1fdf	a2 04		ldx #$04			ldx 	#ErrorID_Assert
.1fe1	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/commands/misc/dim.asm

.1fe4					Command_Dim:
.1fe4	a2 04		ldx #$04		ldx	#4
.1fe6	20 af 42	jsr $42af		jsr	variableHandler
.1fe9	b1 28		lda ($28),y			lda 	(codePtr),y 				; see what follows.
.1feb	c8		iny				iny
.1fec	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; comma follows, go back and do next
.1fee	f0 f4		beq $1fe4			beq 	Command_Dim
.1ff0	88		dey				dey 								; unpick get
.1ff1	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/misc/let.asm

.1ff2					CommandLet:
.1ff2	a2 00		ldx #$00			ldx 	#0  						; get address to write.
.1ff4	20 ae 2c	jsr $2cae			jsr 	EvaluateReference
.1ff7	a9 8d		lda #$8d			lda 	#TKW_EQUAL 					; check for equals
.1ff9	20 75 33	jsr $3375			jsr 	CheckToken
.1ffc	e8		inx				inx 								; do RHS
.1ffd	20 56 2c	jsr $2c56			jsr 	Evaluate 					; evaluate and dereference
.2000	ca		dex				dex
.2001	20 05 20	jsr $2005			jsr 	WriteValue 					; write it out
.2004	60		rts				rts
.2005					WriteValue:
.2005	98		tya				tya
.2006	48		pha				pha
.2007	20 67 20	jsr $2067			jsr 	TOSToTemp0 					; set temp0 to point to target address.
.200a	b5 48		lda $48,x			lda 	esType,x 					; check the string flags match
.200c	55 49		eor $49,x			eor 	esType+1,x 					; one string, one number causes an error.
.200e	29 40		and #$40			and 	#$40
.2010	d0 50		bne $2062			bne		_WVType
.2012	a0 01		ldy #$01			ldy 	#1 							; for string, copy 0 and 1.
.2014	b5 48		lda $48,x			lda 	esType,x 					; check for string assignment
.2016	29 40		and #$40			and 	#$40
.2018	d0 1f		bne $2039			bne 	_WVCopyString
.201a	b5 48		lda $48,x			lda 	esType,x 					; check both are integer.
.201c	15 49		ora $49,x			ora 	esType+1,x
.201e	4a		lsr a				lsr 	a
.201f	90 22		bcc $2043			bcc 	_WVCopyData4 				; copy 4 data bytes.
.2021	b5 48		lda $48,x			lda 	esType,x
.2023	4a		lsr a				lsr 	a
.2024	90 3c		bcc $2062			bcc 	_WVType
.2026	e8		inx				inx 								; force the value being written to be a float.
.2027	20 b8 28	jsr $28b8			jsr 	BPMakeFloat
.202a	ca		dex				dex
.202b	20 67 20	jsr $2067			jsr 	TOSToTemp0 					; set Temp0 to write address
.202e	e8		inx				inx
.202f	8a		txa				txa
.2030	a2 22		ldx #$22		ldx	#34
.2032	20 75 1b	jsr $1b75		jsr	floatingpointHandler
.2035	aa		tax				tax
.2036	4c 5f 20	jmp $205f			jmp 	_WVCopyExit
.2039					_WVCopyString:
.2039	8a		txa				txa
.203a	a2 10		ldx #$10		ldx	#16
.203c	20 b8 36	jsr $36b8		jsr	stringHandler
.203f	aa		tax				tax
.2040	4c 5f 20	jmp $205f			jmp 	_WVCopyExit
.2043					_WVCopyData4:
.2043	b5 48		lda $48,x			lda 	esType,x 					; is the int ref a byte ref ?
.2045	29 20		and #$20			and 	#$20 						; (e.g. is bit 5 set)
.2047	d0 10		bne $2059			bne 	_WVCopyData1
.2049	a0 03		ldy #$03			ldy 	#3
.204b	b5 69		lda $69,x			lda 	esInt3+1,x
.204d	91 2a		sta ($2a),y			sta 	(temp0),y
.204f	88		dey				dey
.2050	b5 61		lda $61,x			lda 	esInt2+1,x
.2052	91 2a		sta ($2a),y			sta 	(temp0),y
.2054	88		dey				dey
.2055	b5 59		lda $59,x			lda 	esInt1+1,x
.2057	91 2a		sta ($2a),y			sta 	(temp0),y
.2059					_WVCopyData1:
.2059	a0 00		ldy #$00			ldy 	#0
.205b	b5 51		lda $51,x			lda 	esInt0+1,x
.205d	91 2a		sta ($2a),y			sta 	(temp0),y
.205f					_WVCopyExit:
.205f	68		pla				pla
.2060	a8		tay				tay
.2061	60		rts				rts
.2062					_WVType:
.2062	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.2064	20 18 15	jsr $1518		jsr	errorHandler
.2067					TOSToTemp0:
.2067	b5 50		lda $50,x			lda 	esInt0,x
.2069	85 2a		sta $2a				sta 	temp0
.206b	b5 58		lda $58,x			lda 	esInt1,x
.206d	85 2b		sta $2b				sta 	temp0+1
.206f	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/misc/poke.asm

.2070					Command_Poke:
.2070	a9 01		lda #$01			lda 	#1
.2072	d0 06		bne $207a			bne 	PokeGeneral
.2074					Command_Doke:
.2074	a9 02		lda #$02			lda 	#2
.2076	d0 02		bne $207a			bne 	PokeGeneral
.2078					Command_Loke:
.2078	a9 03		lda #$03			lda 	#3
.207a					PokeGeneral:
.207a	48		pha				pha 								; save id (PDL = 123)
.207b	20 73 2c	jsr $2c73			jsr 	EvaluateRootInteger 		; target address
.207e	20 8d 33	jsr $338d			jsr	 	CheckComma
.2081	e8		inx				inx
.2082	20 75 2c	jsr $2c75			jsr 	EvaluateInteger 			; what value to POKE ?
.2085	ca		dex				dex
.2086	20 67 20	jsr $2067			jsr 	TOSToTemp0 					; temp0 points to the target address
.2089	84 32		sty $32				sty 	tempShort 					; save Y
.208b	68		pla				pla 								; get copy type (1-3) and dispatch
.208c	aa		tax				tax
.208d	ca		dex				dex
.208e	f0 14		beq $20a4			beq 	_Poke1
.2090	ca		dex				dex
.2091	f0 0b		beq $209e			beq 	_Poke2
.2093	a0 03		ldy #$03			ldy 	#3							; put 4 bytes
.2095	a5 69		lda $69				lda 	esInt3+1
.2097	91 2a		sta ($2a),y			sta 	(temp0),y
.2099	88		dey				dey
.209a	a5 61		lda $61				lda 	esInt2+1
.209c	91 2a		sta ($2a),y			sta 	(temp0),y
.209e					_Poke2:
.209e	a0 01		ldy #$01			ldy 	#1
.20a0	a5 59		lda $59				lda 	esInt1+1
.20a2	91 2a		sta ($2a),y			sta 	(temp0),y
.20a4					_Poke1:
.20a4	a0 00		ldy #$00			ldy 	#0
.20a6	a5 51		lda $51				lda 	esInt0+1
.20a8	91 2a		sta ($2a),y			sta 	(temp0),y
.20aa	a4 32		ldy $32				ldy 	tempShort 					; restore Y and exit
.20ac	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/misc/rem.asm

.20ad					Command_Rem:
.20ad					Command_Rem2:
.20ad	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows
.20af	c9 85		cmp #$85			cmp 	#TOK_STR 					; if it is a string then skip it.
.20b1	d0 06		bne $20b9			bne 	_CRNotString
.20b3	c8		iny				iny
.20b4	98		tya				tya
.20b5	38		sec				sec
.20b6	71 28		adc ($28),y			adc 	(codePtr),y 				; get string size, add to Y, +1 for the length
.20b8	a8		tay				tay
.20b9					_CRNotString:
.20b9	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/misc/stopend.asm

.20ba					CommandStop:
.20ba	a2 06		ldx #$06			ldx 	#ErrorID_Stop
.20bc	20 18 15	jsr $1518		jsr	errorHandler
.20bf					CommandEnd:
.20bf	4c f6 33	jmp $33f6			jmp 	WarmStart
.20c2					CommandXemu:
.20c2	4c ff ff	jmp $ffff			jmp 	$FFFF 						; fudge to crash out of emulator
.20c5					AdvanceNextLine:
.20c5	a0 00		ldy #$00			ldy 	#0 							; get offset
.20c7	b1 28		lda ($28),y			lda 	(codePtr),y
.20c9	18		clc				clc 								; add to codePtr
.20ca	65 28		adc $28				adc 	codePtr
.20cc	85 28		sta $28				sta 	codePtr
.20ce	90 02		bcc $20d2			bcc 	_ANLNoCarry
.20d0	e6 29		inc $29				inc 	codePtr+1
.20d2					_ANLNoCarry:
.20d2	b1 28		lda ($28),y			lda 	(codePtr),y 				; if end of program (or was just stand alone.
.20d4	f0 e9		beq $20bf			beq 	CommandEnd 					; execute END
.20d6	a0 03		ldy #$03			ldy 	#3 							; start of tokens on line.
.20d8	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/for.asm

.20d9					Command_FOR:
.20d9	a9 46		lda #$46			lda 	#markerFOR 					; allocate the space and set the marker
.20db	a2 0b		ldx #$0b			ldx 	#11
.20dd	20 a8 33	jsr $33a8			jsr 	RSClaim
.20e0	20 f2 1f	jsr $1ff2			jsr 	CommandLET 					; do the same as LET FOR [a = 4]
.20e3	a5 48		lda $48				lda 	esType 						; check type should be integer reference.
.20e5	c9 80		cmp #$80			cmp 	#$80 						; we do not do FOR floats.
.20e7	d0 4c		bne $2135			bne 	_CFType
.20e9	a9 ce		lda #$ce			lda 	#TKW_TO 					; check TO present.
.20eb	20 75 33	jsr $3375			jsr 	CheckToken
.20ee	a2 01		ldx #$01			ldx 	#1 							; keep the variable address in stack 0
.20f0	20 75 2c	jsr $2c75			jsr 	EvaluateInteger				; get terminal value in stack 1
.20f3	98		tya				tya
.20f4	48		pha				pha
.20f5	a0 04		ldy #$04			ldy 	#4
.20f7	a5 50		lda $50				lda		esInt0 						; copy the address of the index variable into 4 and 5
.20f9	91 37		sta ($37),y			sta 	(rsPointer),y
.20fb	c8		iny				iny
.20fc	a5 58		lda $58				lda		esInt1
.20fe	91 37		sta ($37),y			sta 	(rsPointer),y
.2100	c8		iny				iny
.2101	a9 01		lda #$01			lda 	#1  						; the default step in 6, (-128 .. 127 only)
.2103	91 37		sta ($37),y			sta 	(rsPointer),y
.2105	c8		iny				iny
.2106	a5 51		lda $51				lda		esInt0+1 					; terminal value in 7 to 11.
.2108	91 37		sta ($37),y			sta 	(rsPointer),y
.210a	c8		iny				iny
.210b	a5 59		lda $59				lda		esInt1+1
.210d	91 37		sta ($37),y			sta 	(rsPointer),y
.210f	c8		iny				iny
.2110	a5 61		lda $61				lda		esInt2+1
.2112	91 37		sta ($37),y			sta 	(rsPointer),y
.2114	c8		iny				iny
.2115	a5 69		lda $69				lda		esInt3+1
.2117	91 37		sta ($37),y			sta 	(rsPointer),y
.2119	68		pla				pla
.211a	a8		tay				tay
.211b	b1 28		lda ($28),y			lda 	(codePtr),y 				; followed by STEP.
.211d	c9 cf		cmp #$cf			cmp 	#TKW_STEP
.211f	d0 0e		bne $212f			bne 	_CFDone
.2121	c8		iny				iny									; skip over step.
.2122	20 75 2c	jsr $2c75			jsr 	EvaluateInteger 			; get step
.2125	98		tya				tya
.2126	48		pha				pha
.2127	b5 50		lda $50,x			lda 	esInt0,x 					; copy it into step (bit lazy here)
.2129	a0 06		ldy #$06			ldy 	#6
.212b	91 37		sta ($37),y			sta 	(rsPointer),y
.212d	68		pla				pla
.212e	a8		tay				tay
.212f					_CFDone:
.212f	a9 01		lda #$01			lda 	#1
.2131	20 d4 33	jsr $33d4			jsr 	RSSavePosition 				; save position.
.2134	60		rts				rts
.2135					_CFType:
.2135	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.2137	20 18 15	jsr $1518		jsr	errorHandler
.213a					Command_NEXT:
.213a	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.213c	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.213e	c9 46		cmp #$46			cmp 	#markerFOR 						; does it match
.2140	f0 05		beq $2147			beq 	_isok
.2142	a2 10		ldx #$10			ldx 	#ErrorID_nextErr
.2144	20 18 15	jsr $1518		jsr	errorHandler
.2147					_isok:
.2147	b1 28		lda ($28),y			lda 	(codePtr),y 				; is it NEXT <index>
.2149	c9 40		cmp #$40			cmp 	#$40 						; e.g. a variable follows 00-3F
.214b	b0 18		bcs $2165			bcs 	_CNNoIndex
.214d	a2 00		ldx #$00			ldx 	#0 							; start on stack
.214f	20 ae 2c	jsr $2cae			jsr 	EvaluateReference 			; this is the variable/parameter to localise.
.2152	98		tya				tya
.2153	48		pha				pha
.2154	a0 04		ldy #$04			ldy 	#4 							; check same variable as that stored at +4,+5
.2156	b1 37		lda ($37),y			lda 	(rsPointer),y
.2158	d5 50		cmp $50,x			cmp 	esInt0,x
.215a	d0 76		bne $21d2			bne 	_CNBadIndex
.215c	c8		iny				iny
.215d	b1 37		lda ($37),y			lda 	(rsPointer),y
.215f	d5 58		cmp $58,x			cmp 	esInt1,x
.2161	d0 6f		bne $21d2			bne 	_CNBadIndex
.2163	68		pla				pla
.2164	a8		tay				tay
.2165					_CNNoIndex:
.2165	98		tya				tya
.2166	48		pha				pha
.2167	a0 04		ldy #$04			ldy 	#4 							; make temp0 point to the index
.2169	b1 37		lda ($37),y			lda 	(rsPointer),y
.216b	85 2a		sta $2a				sta 	temp0
.216d	c8		iny				iny
.216e	b1 37		lda ($37),y			lda 	(rsPointer),y
.2170	85 2b		sta $2b				sta 	temp0+1
.2172	c8		iny				iny
.2173	a2 00		ldx #$00			ldx 	#0 							; X is the sign extend part of the step.
.2175	b1 37		lda ($37),y			lda 	(rsPointer),y 				; get the step.
.2177	85 2f		sta $2f				sta 	temp2+1 					; save for later.
.2179	10 01		bpl $217c			bpl 	_CNSignX
.217b	ca		dex				dex  								; X = $FF
.217c					_CNSignX:
.217c	18		clc				clc 								; add to the LSB
.217d	a0 00		ldy #$00			ldy 	#0
.217f	71 2a		adc ($2a),y			adc 	(temp0),y
.2181	91 2a		sta ($2a),y			sta 	(temp0),y
.2183					_CNPropogate:
.2183	c8		iny				iny  								; add the sign extended in X to the rest.
.2184	8a		txa				txa
.2185	71 2a		adc ($2a),y			adc 	(temp0),y
.2187	91 2a		sta ($2a),y			sta 	(temp0),y
.2189	c8		iny				iny
.218a	8a		txa				txa
.218b	71 2a		adc ($2a),y			adc 	(temp0),y
.218d	91 2a		sta ($2a),y			sta 	(temp0),y
.218f	c8		iny				iny
.2190	8a		txa				txa
.2191	71 2a		adc ($2a),y			adc 	(temp0),y
.2193	91 2a		sta ($2a),y			sta 	(temp0),y
.2195	18		clc				clc 								; point temp1 to the terminal value stored in the stack.
.2196	a5 37		lda $37				lda 	rsPointer
.2198	69 07		adc #$07			adc 	#7
.219a	85 2c		sta $2c				sta 	temp1
.219c	a9 00		lda #$00			lda 	#0
.219e	85 2e		sta $2e				sta 	temp2 						; clear temp2, which is the OR of all the subtractions.
.21a0	a8		tay				tay 								; and clear the Y register again.
.21a1	65 38		adc $38				adc 	rsPointer+1
.21a3	85 2d		sta $2d				sta 	temp1+1
.21a5	38		sec				sec 								; calculate current - limit oring interim values.
.21a6	20 de 21	jsr $21de			jsr 	_CNCompare 					; each of these does a byte.
.21a9	20 de 21	jsr $21de			jsr 	_CNCompare 					; we calculate the OR of all these subtractions.
.21ac	20 de 21	jsr $21de			jsr 	_CNCompare 					; and the carry of the subtraction.
.21af	20 de 21	jsr $21de			jsr 	_CNCompare
.21b2	50 02		bvc $21b6			bvc 	_CNNoOverflow 				; converts to a signed comparison on the sign bit.
.21b4	49 80		eor #$80			eor 	#$80
.21b6					_CNNoOverflow:
.21b6	a4 2f		ldy $2f				ldy 	temp2+1						; get step back
.21b8	30 1d		bmi $21d7			bmi 	_CNCheckDownto
.21ba	c9 00		cmp #$00			cmp 	#0
.21bc	30 0c		bmi $21ca			bmi 	_CNLoopRound 				; loop round if < =
.21be	a5 2e		lda $2e				lda 	temp2
.21c0	f0 08		beq $21ca			beq 	_CNLoopRound
.21c2					_CNLoopExit:
.21c2	68		pla				pla
.21c3	a8		tay				tay
.21c4	a9 0b		lda #$0b			lda 	#11
.21c6	20 ca 33	jsr $33ca			jsr 	RSFree
.21c9	60		rts				rts
.21ca					_CNLoopRound:
.21ca	68		pla				pla
.21cb	a8		tay				tay
.21cc	a9 01		lda #$01			lda 	#1
.21ce	20 e7 33	jsr $33e7			jsr 	RSLoadPosition				; go back to the loop top
.21d1	60		rts				rts
.21d2					_CNBadIndex:
.21d2	a2 13		ldx #$13			ldx 	#ErrorID_BadIndex
.21d4	20 18 15	jsr $1518		jsr	errorHandler
.21d7					_CNCheckDownto:
.21d7	c9 00		cmp #$00			cmp 	#0
.21d9	10 ef		bpl $21ca			bpl 	_CNLoopRound
.21db	4c c2 21	jmp $21c2			jmp 	_CNLoopExit
.21de					_CNCompare:
.21de	b1 2a		lda ($2a),y			lda 	(temp0),y 					; do the subtraction - compare don't care about answer
.21e0	f1 2c		sbc ($2c),y			sbc 	(temp1),y
.21e2	05 2e		ora $2e				ora 	temp2 						; Or into temp2 (does not affect carry)
.21e4	85 2e		sta $2e				sta 	temp2
.21e6	c8		iny				iny
.21e7	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/if.asm

.21e8					CommandIf:
.21e8	20 73 2c	jsr $2c73			jsr 	EvaluateRootInteger 		; get what's being tested.
.21eb	b1 28		lda ($28),y			lda 	(codePtr),y 				; check for IF .. THEN or IF .. GOTO which are single lines.
.21ed	c9 91		cmp #$91			cmp 	#TKW_GOTO
.21ef	f0 04		beq $21f5			beq 	_IfSimple
.21f1	c9 a1		cmp #$a1			cmp 	#TKW_THEN
.21f3	d0 1b		bne $2210			bne 	_IfComplex
.21f5					_IfSimple:
.21f5	20 34 33	jsr $3334			jsr 	MInt32Zero					; check if TOS zero
.21f8	f0 10		beq $220a			beq 	_IfEOL 						; go to next line.
.21fa	b1 28		lda ($28),y			lda 	(codePtr),y 				; get and skip token.
.21fc	c8		iny				iny
.21fd	c9 91		cmp #$91			cmp 	#TKW_GOTO 					; was it if GOTO ?
.21ff	f0 0c		beq $220d			beq 	_IfGoto 					; do the Goto code
.2201	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows the THEN ?
.2203	29 c0		and #$c0			and 	#$C0 						; check $40-$7F
.2205	c9 40		cmp #$40			cmp 	#$40 						; e.g. number IF x = 0 THEN 170
.2207	f0 04		beq $220d			beq 	_IfGoto
.2209	60		rts				rts 								; else continue on this line.
.220a					_IfEOL:
.220a	4c c5 20	jmp $20c5			jmp 	AdvanceNextLine 			; go to next line
.220d					_IfGoto:
.220d	4c fc 1d	jmp $1dfc			jmp 	CommandGoto
.2210					_IfComplex:
.2210	20 34 33	jsr $3334			jsr 	MInt32Zero 					; is it true ?
.2213	f0 01		beq $2216			beq 	_IFSkip 					; if non-zero then skip to ELSE/ENDIF
.2215	60		rts				rts 								; else continue.
.2216					_IFSkip:
.2216	a9 d6		lda #$d6			lda	 	#TKW_ELSE 					; test failed, go to ELSE or ENDIF whichever comes first.
.2218	a2 a2		ldx #$a2			ldx 	#TKW_ENDIF
.221a	4c b2 24	jmp $24b2			jmp		ScanForward
.221d					Command_ELSE:
.221d	a2 a2		ldx #$a2			ldx 	#TKW_ENDIF
.221f	8a		txa				txa
.2220	4c b2 24	jmp $24b2			jmp		ScanForward
.2223					Command_ENDIF:
.2223	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/local.asm

.0cd2					storeSize:
>0cd2							.fill 	1
.2224					CommandLocal:
.2224	a2 00		ldx #$00			ldx 	#0
.2226	20 42 22	jsr $2242			jsr 	LocaliseVariable 			; localise one.
.2229					_CLCheckNext:
.2229	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows ?
.222b	c8		iny				iny
.222c	c9 8d		cmp #$8d			cmp 	#TKW_EQUAL 					; something local "x = 2" ?
.222e	f0 06		beq $2236			beq 	_CLAssignment
.2230	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; comma try again.
.2232	f0 f0		beq $2224			beq 	CommandLocal
.2234	88		dey				dey
.2235	60		rts				rts
.2236					_CLAssignment:
.2236	a2 01		ldx #$01			ldx 	#1
.2238	20 56 2c	jsr $2c56			jsr 	Evaluate 					; evaluate RHS
.223b	ca		dex				dex
.223c	20 05 20	jsr $2005			jsr 	WriteValue
.223f	4c 29 22	jmp $2229			jmp 	_CLCheckNext
.2242					LocaliseVariable:
.2242	b1 28		lda ($28),y			lda 	(codePtr),y 				; check it's a variable.
.2244	c9 40		cmp #$40			cmp 	#$40
.2246	b0 67		bcs $22af			bcs 	_LVSyntax
.2248	8a		txa				txa 								; get the address of that variable.
.2249	a2 02		ldx #$02		ldx	#2
.224b	20 af 42	jsr $42af		jsr	variableHandler
.224e	aa		tax				tax
.224f	8a		txa				txa
.2250	48		pha				pha
.2251	98		tya				tya
.2252	48		pha				pha
.2253	20 67 20	jsr $2067			jsr 	TOSToTemp0 					; the address of the variable is now in temp0.
.2256	b5 48		lda $48,x			lda 	esType,x 					; get the type
.2258	0a		asl a				asl 	a
.2259	10 16		bpl $2271			bpl 	_LVPushNumber
.225b	a0 00		ldy #$00			ldy 	#0 							; put address of data in temp1
.225d	b1 2a		lda ($2a),y			lda 	(temp0),y
.225f	c8		iny				iny
.2260	85 2c		sta $2c				sta 	temp1
.2262	b1 2a		lda ($2a),y			lda 	(temp0),y
.2264	85 2d		sta $2d				sta 	temp1+1
.2266	a0 00		ldy #$00			ldy 	#0 	 						; get length
.2268	b1 2c		lda ($2c),y			lda 	(temp1),y
.226a	aa		tax				tax 								; into X
.226b	e8		inx				inx 								; +1 for length.
.226c	a9 24		lda #$24			lda 	#markerString
.226e	4c 86 22	jmp $2286			jmp 	_LVWriteFrame
.2271					_LVPushNumber:
.2271	a5 2a		lda $2a				lda 	temp0 						; storage address and data source are the same
.2273	85 2c		sta $2c				sta 	temp1
.2275	a5 2b		lda $2b				lda 	temp0+1
.2277	85 2d		sta $2d				sta 	temp1+1
.2279	b5 48		lda $48,x			lda 	esType,x 					; put float flag into carry.
.227b	4a		lsr a				lsr 	a
.227c	a9 25		lda #$25			lda 	#markerInt 					; get marker and size.
.227e	a2 04		ldx #$04			ldx 	#VarISize
.2280	90 04		bcc $2286			bcc 	_LVIsInteger
.2282	a9 23		lda #$23			lda 	#markerFloat
.2284	a2 06		ldx #$06			ldx 	#VarFSize
.2286					_LVIsInteger:
.2286					_LVWriteFrame:
.2286	8e d2 0c	stx $0cd2			stx 	storeSize 					; number of bytes to copy from (temp0)
.2289	e8		inx				inx 								; allocate 3 bytes, 2 for the address, 1 for the marker.
.228a	e8		inx				inx
.228b	e8		inx				inx
.228c	20 a8 33	jsr $33a8			jsr 	RSClaim 					; create the stack frame.
.228f	a5 2a		lda $2a				lda 	temp0 						; copy the target address to slots 1 & 2
.2291	a0 01		ldy #$01			ldy 	#1
.2293	91 37		sta ($37),y			sta 	(rsPointer),y
.2295	c8		iny				iny
.2296	a5 2b		lda $2b				lda 	temp0+1
.2298	91 37		sta ($37),y			sta 	(rsPointer),y
.229a	a0 00		ldy #$00			ldy 	#0
.229c					_LVCopyData:
.229c	b1 2c		lda ($2c),y			lda 	(temp1),y 					; get data from source, temp1
.229e	c8		iny				iny 								; write allowing for the header bit.
.229f	c8		iny				iny
.22a0	c8		iny				iny
.22a1	91 37		sta ($37),y			sta 	(rsPointer),y
.22a3	88		dey				dey
.22a4	88		dey				dey
.22a5	ce d2 0c	dec $0cd2			dec 	storeSize 					; do it storesize times
.22a8	d0 f2		bne $229c			bne 	_LVCopyData
.22aa	68		pla				pla
.22ab	a8		tay				tay
.22ac	68		pla				pla
.22ad	aa		tax				tax
.22ae	60		rts				rts
.22af					_LVSyntax:
.22af	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.22b1	20 18 15	jsr $1518		jsr	errorHandler
.22b4					RestoreLocals:
.22b4	a2 00		ldx #$00			ldx 	#0
.22b6	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.22b8	c9 40		cmp #$40			cmp	 	#64
.22ba	90 01		bcc $22bd			bcc 	_RLocal
.22bc	60		rts				rts
.22bd					_RLocal:
.22bd	8a		txa				txa
.22be	48		pha				pha
.22bf	98		tya				tya
.22c0	48		pha				pha
.22c1	a0 01		ldy #$01			ldy 	#1 							; copy target address to temp0
.22c3	b1 37		lda ($37),y			lda 	(rsPointer),y
.22c5	85 2a		sta $2a				sta 	temp0
.22c7	c8		iny				iny
.22c8	b1 37		lda ($37),y			lda 	(rsPointer),y
.22ca	85 2b		sta $2b				sta 	temp0+1
.22cc	a0 00		ldy #$00			ldy 	#0 							; get type back.
.22ce	b1 37		lda ($37),y			lda 	(rsPointer),y
.22d0	c9 24		cmp #$24			cmp 	#markerString 				; string is ... different :)
.22d2	f0 28		beq $22fc			beq 	_RString
.22d4	a2 04		ldx #$04			ldx		#VARISize 					; size integer
.22d6	c9 25		cmp #$25			cmp 	#markerInt
.22d8	f0 02		beq $22dc			beq 	_RIsInteger
.22da	a2 06		ldx #$06			ldx 	#VARFSize 					; size float
.22dc					_RIsInteger:
.22dc	8a		txa				txa
.22dd	48		pha				pha
.22de	a0 03		ldy #$03			ldy 	#3							; start size to copy back from pointer.
.22e0					_RCopyBack:
.22e0	b1 37		lda ($37),y			lda 	(rsPointer),y
.22e2	88		dey				dey
.22e3	88		dey				dey
.22e4	88		dey				dey
.22e5	91 2a		sta ($2a),y			sta 	(temp0),y
.22e7	c8		iny				iny
.22e8	c8		iny				iny
.22e9	c8		iny				iny
.22ea	c8		iny				iny
.22eb	ca		dex				dex
.22ec	d0 f2		bne $22e0			bne 	_RCopyBack
.22ee	68		pla				pla 								; get size add 3
.22ef	18		clc				clc
.22f0	69 03		adc #$03			adc 	#3 							; (2 for address one for marker)
.22f2					_RRestoreAAndLoop:
.22f2	20 ca 33	jsr $33ca			jsr 	RSFree
.22f5	68		pla				pla
.22f6	a8		tay				tay
.22f7	68		pla				pla
.22f8	aa		tax				tax
.22f9	4c b4 22	jmp $22b4			jmp 	RestoreLocals 				; go see if there are any more locals.
.22fc					_RString:
.22fc	a2 00		ldx #$00			ldx 	#0
.22fe	a0 01		ldy #$01			ldy 	#1 							; set up for a string write.
.2300	b1 37		lda ($37),y			lda 	(rsPointer),y
.2302	95 50		sta $50,x			sta 	esInt0,x
.2304	c8		iny				iny
.2305	b1 37		lda ($37),y			lda 	(rsPointer),y
.2307	95 58		sta $58,x			sta 	esInt1,x
.2309	18		clc				clc
.230a	a5 37		lda $37				lda 	rsPointer
.230c	69 03		adc #$03			adc 	#3
.230e	95 51		sta $51,x			sta 	esInt0+1,x
.2310	a5 38		lda $38				lda 	rsPointer+1
.2312	69 00		adc #$00			adc 	#0
.2314	95 59		sta $59,x			sta 	esInt1+1,x
.2316	8a		txa				txa
.2317	a2 10		ldx #$10		ldx	#16
.2319	20 b8 36	jsr $36b8		jsr	stringHandler
.231c	a0 03		ldy #$03			ldy 	#3 							; get string length
.231e	b1 37		lda ($37),y			lda 	(rsPointer),y
.2320	18		clc				clc
.2321	69 04		adc #$04			adc 	#4 							; add 4 (pointer, marker, length) to restore.
.2323	4c f2 22	jmp $22f2			jmp 	_RRestoreAAndLoop

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/proc.asm

.0cd3					paramCount:
>0cd3							.fill 	1
.2326					CallProc:
.2326	20 ae 23	jsr $23ae			jsr 	FindProcedure 				; find procedure, put in temp0. A contains name length.
.2329	48		pha				pha 								; save length on stack
.232a	85 32		sta $32				sta 	tempShort 					; save length in tempShort
.232c	a5 2b		lda $2b				lda 	temp0+1 					; save procedure target on stack.
.232e	48		pha				pha
.232f	a5 2a		lda $2a				lda 	temp0
.2331	48		pha				pha
.2332	98		tya				tya 								; calculate Y + length
.2333	18		clc				clc
.2334	65 32		adc $32				adc 	tempShort
.2336	a8		tay				tay
.2337	a2 00		ldx #$00			ldx 	#0 							; where the first parameter goes - 1
.2339					_CallProcEvalParams:
.2339	e8		inx				inx
.233a	b1 28		lda ($28),y			lda 	(codePtr),y 				; do we have ) , e.g. the end of the parameters ?
.233c	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.233e	f0 0b		beq $234b			beq 	_CPDoneParams
.2340	20 56 2c	jsr $2c56			jsr 	Evaluate 					; evaluate a parameter
.2343	b1 28		lda ($28),y			lda 	(codePtr),Y 				; get what's next, preconsume
.2345	c8		iny				iny
.2346	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; if comma, go get another parameter
.2348	f0 ef		beq $2339			beq 	_CallProcEvalParams
.234a	88		dey				dey 								; undo consumption.
.234b					_CPDoneParams:
.234b	20 80 33	jsr $3380			jsr 	CheckRightParen 			; check closing parenthesis.
.234e	8e d3 0c	stx $0cd3			stx 	paramCount 					; store parameter count+1
.2351	a2 04		ldx #$04			ldx 	#4							; make space on stack
.2353	a9 50		lda #$50			lda 	#markerPROC
.2355	20 a8 33	jsr $33a8			jsr 	RSClaim
.2358	a9 01		lda #$01			lda 	#1 							; store return address.
.235a	20 d4 33	jsr $33d4			jsr 	RSSavePosition
.235d	68		pla				pla 								; get the new code Ptr
.235e	85 28		sta $28				sta 	codePtr
.2360	68		pla				pla
.2361	85 29		sta $29				sta 	codePtr+1
.2363	68		pla				pla 								; length of name + 4 is the param start.
.2364	18		clc				clc
.2365	69 04		adc #$04			adc 	#4
.2367	a8		tay				tay
.2368	a2 ff		ldx #$ff			ldx 	#$FF
.236a					_CPLoadParameters:
.236a	e8		inx				inx 								; point to where the address should be loaded.
.236b	ec d3 0c	cpx $0cd3			cpx 	paramCount 					; too many parameters in definition ?
.236e	f0 1e		beq $238e			beq 	_CPParamError
.2370	b1 28		lda ($28),y			lda 	(codePtr),y					; what follows
.2372	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN 				; is it the right bracket
.2374	f0 0e		beq $2384			beq 	_CPParamComplete 			; done all the parameters, perhaps.
.2376	20 42 22	jsr $2242			jsr 	LocaliseVariable 			; make following variable local, ref in tos,x
.2379	20 05 20	jsr $2005			jsr 	WriteValue 					; copy the evaluated parameter into there.
.237c	b1 28		lda ($28),y			lda 	(codePtr),y 				; followed by a comma ?
.237e	c8		iny				iny
.237f	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.2381	f0 e7		beq $236a			beq 	_CPLoadParameters
.2383	88		dey				dey 								; no, unconsume and check for )
.2384					_CPParamComplete:
.2384	20 80 33	jsr $3380			jsr 	CheckRightParen 			; check )
.2387	e8		inx				inx 								; check right number of parameters have been consumed
.2388	ec d3 0c	cpx $0cd3			cpx 	paramCount
.238b	d0 01		bne $238e			bne 	_CPParamError
.238d	60		rts				rts
.238e					_CPParamError:
.238e	a2 18		ldx #$18			ldx 	#ErrorID_Params
.2390	20 18 15	jsr $1518		jsr	errorHandler
.2393					ReturnProc:
.2393	20 b4 22	jsr $22b4			jsr 	RestoreLocals 				; get the locals back.
.2396	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.2398	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.239a	c9 50		cmp #$50			cmp 	#markerPROC 						; does it match
.239c	f0 05		beq $23a3			beq 	_isok
.239e	a2 12		ldx #$12			ldx 	#ErrorID_endProcErr
.23a0	20 18 15	jsr $1518		jsr	errorHandler
.23a3					_isok:
.23a3	a9 01		lda #$01			lda 	#1
.23a5	20 e7 33	jsr $33e7			jsr 	RSLoadPosition 				; reload the position from offset 1.
.23a8	a9 04		lda #$04			lda 	#4 							; throw 4 bytes from stack.
.23aa	20 ca 33	jsr $33ca			jsr 	RSFree
.23ad	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/proctable.asm

.0cd4					procList:
>0cd4							.fill 	2		 					; terminated by name high being zero.
.0cd6					yInLine:
>0cd6							.fill 	1
.23ae					FindProcedure:
.23ae	8c d6 0c	sty $0cd6			sty 	yInLine 					; save current position.
.23b1	20 6c 24	jsr $246c			jsr 	CalculateProcedureHash		; calculate the hash of the procedure.
.23b4	85 2c		sta $2c				sta 	temp1
.23b6	ad d4 0c	lda $0cd4			lda		procList 					; put procList address in temp2
.23b9	85 2e		sta $2e				sta 	temp2
.23bb	ad d5 0c	lda $0cd5			lda 	procList+1
.23be	85 2f		sta $2f				sta 	temp2+1
.23c0	a0 00		ldy #$00			ldy 	#0 							; position in this table.
.23c2					_FPLoop:
.23c2	b1 2e		lda ($2e),y			lda 	(temp2),y
.23c4	f0 4f		beq $2415			beq 	_FPError 					; if so, we don't know this procedure.
.23c6	85 2b		sta $2b				sta 	temp0+1 					; copy MSB/LSB to temp0 as we go.
.23c8	c8		iny				iny
.23c9	b1 2e		lda ($2e),y			lda 	(temp2),y
.23cb	85 2a		sta $2a				sta 	temp0
.23cd	c8		iny				iny
.23ce	b1 2e		lda ($2e),y			lda 	(temp2),y					; check the procedure hash.
.23d0	c5 2c		cmp $2c				cmp 	temp1
.23d2	d0 2b		bne $23ff			bne 	_FPNext 					; hash is different, go to next.
.23d4	38		sec				sec
.23d5	ad d6 0c	lda $0cd6			lda 	yInLine 					; position in line must be at least 4
.23d8	e9 04		sbc #$04			sbc 	#4
.23da	18		clc				clc
.23db	65 28		adc $28				adc 	codePtr
.23dd	85 30		sta $30				sta 	temp3
.23df	a5 29		lda $29				lda 	codePtr+1
.23e1	69 00		adc #$00			adc 	#0
.23e3	85 31		sta $31				sta 	temp3+1
.23e5	98		tya				tya
.23e6	48		pha				pha
.23e7	a0 04		ldy #$04			ldy 	#4
.23e9					_FPCName:
.23e9	b1 30		lda ($30),y			lda 	(temp3),y 					; check the same
.23eb	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.23ed	d0 0e		bne $23fd			bne 	_FPpulYNext 				; if different go to next one.
.23ef	c8		iny				iny
.23f0	c9 3a		cmp #$3a			cmp 	#$3A
.23f2	90 f5		bcc $23e9			bcc 	_FPCName 					; compare the whole lot....
.23f4	68		pla				pla 								; throw away the saved Y
.23f5	98		tya				tya 								; length of name is Y-4
.23f6	38		sec				sec
.23f7	e9 04		sbc #$04			sbc 	#4
.23f9	ac d6 0c	ldy $0cd6			ldy 	yInLine  					; get the original Y back
.23fc	60		rts				rts
.23fd					_FPpulYNext:
.23fd	68		pla				pla
.23fe	a8		tay				tay
.23ff					_FPNext:
.23ff	c8		iny				iny 								; next procedure record.
.2400	10 c0		bpl $23c2			bpl 	_FPLoop 					; if done 128 already ... e.g. Y -ve
.2402	98		tya				tya 								; subtract 128 from Y
.2403	38		sec				sec
.2404	e9 80		sbc #$80			sbc 	#128
.2406	a8		tay				tay
.2407	18		clc				clc 								; add 128 to temp2, so we can have more than
.2408	a5 2e		lda $2e				lda 	temp2 						; 255/3 = 85 procedures
.240a	69 80		adc #$80			adc 	#128
.240c	85 2e		sta $2e				sta 	temp2
.240e	90 b2		bcc $23c2			bcc 	_FPLoop
.2410	e6 2f		inc $2f				inc 	temp2+1
.2412	4c c2 23	jmp $23c2			jmp 	_FPLoop
.2415					_FPError:
.2415	a2 17		ldx #$17			ldx 	#ErrorID_NoProc
.2417	20 18 15	jsr $1518		jsr	errorHandler
.241a					ScanProc:
.241a	98		tya				tya
.241b	48		pha				pha
.241c	a5 35		lda $35				lda 	lowMemory 					; copy the start of the procList, at low memory
.241e	8d d4 0c	sta $0cd4			sta 	procList
.2421	a5 36		lda $36				lda 	lowMemory+1
.2423	8d d5 0c	sta $0cd5			sta 	procList+1
.2426	20 96 27	jsr $2796			jsr 	ResetCodeAddress 			; back to the start.
.2429					_ScanLoop:
.2429	a0 00		ldy #$00			ldy 	#0 							; check reached program end
.242b	b1 28		lda ($28),y			lda 	(codePtr),y
.242d	f0 2a		beq $2459			beq 	_ScanExit
.242f	a0 03		ldy #$03			ldy 	#3							; get first token
.2431	b1 28		lda ($28),y			lda 	(codePtr),y
.2433	c9 9d		cmp #$9d			cmp 	#TKW_DEFPROC				; skip to next if not DEFPROC
.2435	d0 12		bne $2449			bne 	_ScanNext
.2437	a5 29		lda $29				lda 	codePtr+1 					; write high and low address of this line.
.2439	20 61 24	jsr $2461			jsr 	_ScanWrite
.243c	a5 28		lda $28				lda 	codePtr
.243e	20 61 24	jsr $2461			jsr 	_ScanWrite
.2441	a0 04		ldy #$04			ldy 	#4 							; start of name part
.2443	20 6c 24	jsr $246c			jsr 	CalculateProcedureHash 		; calculate procedure hash
.2446	20 61 24	jsr $2461			jsr 	_ScanWrite					; and write that
.2449					_ScanNext:
.2449	18		clc				clc
.244a	a0 00		ldy #$00			ldy 	#0
.244c	b1 28		lda ($28),y			lda 	(codePtr),y
.244e	65 28		adc $28				adc 	codePtr
.2450	85 28		sta $28				sta 	codePtr
.2452	90 d5		bcc $2429			bcc 	_ScanLoop
.2454	e6 29		inc $29				inc 	codePtr+1
.2456	4c 29 24	jmp $2429			jmp 	_ScanLoop
.2459					_ScanExit:
.2459	a9 00		lda #$00			lda 	#0 							; write ending zero.
.245b	20 61 24	jsr $2461			jsr 	_ScanWrite
.245e	68		pla				pla
.245f	a8		tay				tay
.2460	60		rts				rts
.2461					_ScanWrite:
.2461	a0 00		ldy #$00			ldy 	#0
.2463	91 35		sta ($35),y			sta 	(lowMemory),y
.2465	e6 35		inc $35				inc 	lowMemory
.2467	d0 02		bne $246b			bne 	_SWNoCarry
.2469	e6 36		inc $36				inc 	lowMemory+1
.246b					_SWNoCarry:
.246b	60		rts				rts
.246c					CalculateProcedureHash:
.246c	a9 00		lda #$00			lda 	#0 							; clear hash.
.246e	85 2a		sta $2a				sta 	temp0
.2470					_CPHLoop:
.2470	18		clc				clc 								; add character and rotate and add carry back in
.2471	b1 28		lda ($28),y			lda 	(codePtr),y
.2473	65 2a		adc $2a				adc 	temp0
.2475	6a		ror a				ror 	a
.2476	69 0d		adc #$0d			adc 	#13 						; primes usually good for this sort of thing.
.2478	85 2a		sta $2a				sta 	temp0 						; (down with this sort of thing)
.247a	b1 28		lda ($28),y			lda 	(codePtr),y
.247c	c8		iny				iny 								; advance incase we go round again.
.247d	c9 3a		cmp #$3a			cmp 	#$3A
.247f	90 ef		bcc $2470			bcc 	_CPHLoop
.2481	a5 2a		lda $2a				lda 	temp0
.2483	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/repeat.asm

.2484					Command_Repeat:
.2484	a2 04		ldx #$04			ldx 	#4 							; allocate 4 bytes on stack for REPEAT
.2486	a9 52		lda #$52			lda 	#markerREPEAT 				; repeat marker allocate 4 bytes
.2488	20 a8 33	jsr $33a8			jsr 	RSClaim
.248b	a9 01		lda #$01			lda 	#1 							; save position at offset 1.
.248d	20 d4 33	jsr $33d4			jsr 	RSSavePosition
.2490	60		rts				rts
.2491					Command_Until:
.2491	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.2493	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.2495	c9 52		cmp #$52			cmp 	#markerREPEAT 						; does it match
.2497	f0 05		beq $249e			beq 	_isok
.2499	a2 0f		ldx #$0f			ldx 	#ErrorID_untilErr
.249b	20 18 15	jsr $1518		jsr	errorHandler
.249e					_isok:
.249e	20 73 2c	jsr $2c73			jsr 	EvaluateRootInteger 		; at the bottom.
.24a1	20 34 33	jsr $3334			jsr 	MInt32Zero					; check if TOS zero
.24a4	d0 06		bne $24ac			bne 	_CUExit
.24a6	a9 01		lda #$01			lda 	#1
.24a8	20 e7 33	jsr $33e7			jsr 	RSLoadPosition 				; reload the position from offset 1.
.24ab	60		rts				rts
.24ac					_CUExit:
.24ac	a9 04		lda #$04			lda 	#4 							; throw 4 bytes from stack.
.24ae	20 ca 33	jsr $33ca			jsr 	RSFree
.24b1	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/scanner.asm

.24b2					ScanForward:
.24b2	85 2c		sta $2c				sta 	temp1 						; save tokens to search in temp1/temp1+1
.24b4	86 2d		stx $2d				stx 	temp1+1
.24b6	a9 00		lda #$00			lda 	#0 							; temp2 counts structure levels.
.24b8	85 2e		sta $2e				sta 	temp2
.24ba	b1 28		lda ($28),y	_SFLoop:lda 	(codePtr),y 				; look at the next token.
.24bc	c8		iny				iny
.24bd	a6 2e		ldx $2e				ldx 	temp2 						; check structure levels are zero.
.24bf	d0 08		bne $24c9			bne 	_SFNoCheck 					; if so, check token against entered values.
.24c1	c5 2c		cmp $2c				cmp 	temp1 						; if either matches, we've reached the token
.24c3	f0 24		beq $24e9			beq 	_SFExit 					; at the same strcture depth.
.24c5	c5 2d		cmp $2d				cmp 	temp1+1
.24c7	f0 20		beq $24e9			beq 	_SFExit
.24c9					_SFNoCheck:
.24c9	c9 80		cmp #$80			cmp 	#$80 						; if it is 00-7F (variable/number) just skip it.
.24cb	90 ed		bcc $24ba			bcc 	_SFLoop
.24cd	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; $80-$85 is various specials.
.24cf	90 19		bcc $24ea			bcc 	_SFSpecials
.24d1	c9 99		cmp #$99			cmp 	#TOK_STRUCTST 				; if < structure start then continue
.24d3	90 e5		bcc $24ba			bcc 	_SFLoop
.24d5	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST 				; if >= unary start (after structure) then continue.
.24d7	b0 e1		bcs $24ba			bcs 	_SFLoop
.24d9	aa		tax				tax  								; token in X, and look up the adjuster.
.24da	bd 91 2b	lda $2b91,x			lda 	ELBinaryOperatorInfo-TOK_BINARYST,x
.24dd	38		sec				sec 								; convert to an offset ($FF,$01)
.24de	e9 81		sbc #$81			sbc 	#$81
.24e0	18		clc				clc 								; add to depth
.24e1	65 2e		adc $2e				adc 	temp2
.24e3	85 2e		sta $2e				sta 	temp2
.24e5	10 d3		bpl $24ba			bpl 	_SFLoop 					; +ve okay to continue
.24e7	30 07		bmi $24f0			bmi 	SFError 					; if gone -ve then we have a nesting error
.24e9	60		rts		_SFExit:rts
.24ea					_SFSpecials:
.24ea	20 f5 24	jsr $24f5			jsr 	ScannerSkipSpecial
.24ed	4c ba 24	jmp $24ba			jmp 	_SFLoop
.24f0					SFError:
.24f0	a2 14		ldx #$14			ldx 	#ErrorID_Struct
.24f2	20 18 15	jsr $1518		jsr	errorHandler
.24f5					ScannerSkipSpecial:
.24f5	c9 80		cmp #$80			cmp 	#TOK_EOL 					; $80, advance to next line.
.24f7	f0 10		beq $2509			beq 	_SFNextLine
.24f9	c9 84		cmp #$84			cmp 	#TOK_FPC					; $84, skip embedded float
.24fb	f0 2b		beq $2528			beq 	_SFFloatSkip
.24fd	c9 85		cmp #$85			cmp 	#TOK_STR 					; $85, skip string
.24ff	f0 02		beq $2503			beq 	_SFSkipString
.2501	c8		iny				iny									; $81,$82,$83 shift, so just advance over the shifted
.2502	60		rts				rts 								; token.
.2503					_SFSkipString:
.2503	98		tya				tya
.2504	38		sec				sec
.2505	71 28		adc ($28),y			adc 	(codePtr),y
.2507	a8		tay				tay
.2508	60		rts				rts
.2509					_SFNextLine:
.2509	a0 00		ldy #$00			ldy 	#0 							; get offset
.250b	b1 28		lda ($28),y			lda 	(codePtr),y
.250d	18		clc				clc 								; add to code pointer.
.250e	65 28		adc $28				adc 	codePtr
.2510	85 28		sta $28				sta 	codePtr
.2512	90 02		bcc $2516			bcc		_SFNLNoCarry
.2514	e6 29		inc $29				inc 	codePtr+1
.2516					_SFNLNoCarry:
.2516	b1 28		lda ($28),y			lda 	(codePtr),y 				; reached the end of the program.
.2518	d0 0b		bne $2525			bne		_SFXNL 						; no go round again
.251a	a5 2c		lda $2c				lda 	temp1
.251c	c9 d9		cmp #$d9			cmp 	#TKW_DATA 					; if searching for Data different error.
.251e	d0 d0		bne $24f0			bne 	SFError 					; read uses this to search for data statements
.2520	a2 1d		ldx #$1d			ldx 	#ErrorID_DataError
.2522	20 18 15	jsr $1518		jsr	errorHandler
.2525	a0 03		ldy #$03	_SFXNL:	ldy 	#3
.2527	60		rts				rts
.2528					_SFFloatSkip:
.2528	98		tya				tya 								; skip over an embedded float.
.2529	18		clc				clc
.252a	69 05		adc #$05			adc 	#FloatEmbeddedSize
.252c	a8		tay				tay
.252d	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/while.asm

.252e					Command_While:
.252e	a9 57		lda #$57			lda 	#markerWhile 				; gosub marker allocate 4 bytes.
.2530	a2 04		ldx #$04			ldx 	#4
.2532	20 a8 33	jsr $33a8			jsr 	RSClaim 					; create on stack.
.2535	88		dey				dey
.2536	a9 01		lda #$01			lda 	#1
.2538	20 d4 33	jsr $33d4			jsr 	RSSavePosition 				; save position before the WHILE keyword.
.253b	c8		iny				iny
.253c	20 75 2c	jsr $2c75			jsr 	EvaluateInteger				; get the conditional
.253f	20 34 33	jsr $3334			jsr 	MInt32Zero 	 				; if zero, skip forward to the fail code.
.2542	f0 01		beq $2545			beq 	_CWFail
.2544	60		rts				rts
.2545					_CWFail:
.2545	a9 04		lda #$04			lda 	#4
.2547	20 ca 33	jsr $33ca			jsr 	RSFree 						; close the just opened position.
.254a	a9 9f		lda #$9f			lda 	#TKW_WEND 					; scan forward past WEND.
.254c	aa		tax				tax
.254d	20 b2 24	jsr $24b2			jsr 	ScanForward
.2550	60		rts				rts
.2551					Command_Wend:
.2551	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.2553	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.2555	c9 57		cmp #$57			cmp 	#markerWHILE 						; does it match
.2557	f0 05		beq $255e			beq 	_isok
.2559	a2 11		ldx #$11			ldx 	#ErrorID_wendErr
.255b	20 18 15	jsr $1518		jsr	errorHandler
.255e					_isok:
.255e	a9 01		lda #$01			lda 	#1
.2560	20 e7 33	jsr $33e7			jsr 	RSLoadPosition				; go back until true
.2563	a9 04		lda #$04			lda 	#4
.2565	20 ca 33	jsr $33ca			jsr 	RSFree 						; close the loop
.2568	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/system/clear.asm

.2569					CommandClear:
.2569					XCommandClear:
.2569	98		tya				tya
.256a	48		pha				pha
.256b	ad cc 0a	lda $0acc			lda 	endMemory					; set high memory = end of memory
.256e	85 33		sta $33				sta 	highMemory
.2570	ad cd 0a	lda $0acd			lda 	endMemory+1
.2573	85 34		sta $34				sta 	highMemory+1
.2575	ad c8 0a	lda $0ac8			lda 	basePage 					; work out where the program ends.
.2578	85 2a		sta $2a				sta 	temp0
.257a	ad c9 0a	lda $0ac9			lda 	basePage+1
.257d	85 2b		sta $2b				sta 	temp0+1
.257f					_CCFindEnd:
.257f	a0 00		ldy #$00			ldy 	#0
.2581	b1 2a		lda ($2a),y			lda 	(temp0),y
.2583	f0 0c		beq $2591			beq 	_CCFoundEnd 				; offset zero is end.
.2585	18		clc				clc
.2586	65 2a		adc $2a				adc 	temp0 						; move to next line
.2588	85 2a		sta $2a				sta 	temp0
.258a	90 f3		bcc $257f			bcc 	_CCFindEnd
.258c	e6 2b		inc $2b				inc 	temp0+1
.258e	4c 7f 25	jmp $257f			jmp 	_CCFindEnd
.2591					_CCFoundEnd:
.2591	a5 2a		lda $2a				lda 	temp0 						; put temp0 in lowMemory
.2593	85 35		sta $35				sta 	lowMemory
.2595	a5 2b		lda $2b				lda 	temp0+1
.2597	85 36		sta $36				sta 	lowMemory+1
.2599	18		clc				clc 								; put temp0+1 in endProgram
.259a	a5 2a		lda $2a				lda 	temp0
.259c	69 01		adc #$01			adc 	#1
.259e	8d ca 0a	sta $0aca			sta 	endProgram
.25a1	a5 2b		lda $2b				lda 	temp0+1
.25a3	69 00		adc #$00			adc 	#0
.25a5	8d cb 0a	sta $0acb			sta 	endProgram+1
.25a8	18		clc				clc 								; put a bit of space in.
.25a9	a5 35		lda $35				lda 	lowMemory
.25ab	69 04		adc #$04			adc 	#4
.25ad	85 35		sta $35				sta 	lowMemory
.25af	90 02		bcc $25b3			bcc 	_CCNoCarry
.25b1	e6 36		inc $36				inc 	lowMemory+1
.25b3					_CCNoCarry:
.25b3	20 9a 33	jsr $339a			jsr 	RSReset 					; reset the return stack.
.25b6	a2 06		ldx #$06		ldx	#6
.25b8	20 af 42	jsr $42af		jsr	variableHandler
.25bb	20 1a 24	jsr $241a			jsr 	ScanProc 					; scan for procedures
.25be	20 9f 1d	jsr $1d9f			jsr 	CommandRestore 				; do a restore
.25c1	68		pla				pla
.25c2	a8		tay				tay
.25c3	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/system/list.asm

.0cd7					structIndent:
>0cd7							.fill 	1
.25c4					CommandList:
.25c4	a2 00		ldx #$00			ldx		#0 							; set start/end lines in stack 0/1 to 0 and $FFFF
.25c6	8e d7 0c	stx $0cd7			stx 	structIndent
.25c9	20 0d 33	jsr $330d			jsr 	MInt32False
.25cc	e8		inx				inx
.25cd	20 09 33	jsr $3309			jsr 	MInt32True
.25d0	b1 28		lda ($28),y			lda 	(codePtr),y 				; look at first token
.25d2	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; list ,xxxx
.25d4	f0 15		beq $25eb			beq 	_CLEndLine
.25d6	c9 00		cmp #$00			cmp 	#0 							; list ... on its own.
.25d8	30 1b		bmi $25f5			bmi 	_CLDoListing 				; do the whole lot.
.25da	a2 00		ldx #$00			ldx 	#0 							; get start line at stack:0
.25dc	20 75 2c	jsr $2c75			jsr 	EvaluateInteger
.25df	b1 28		lda ($28),y			lda 	(codePtr),y 				; , follows ?
.25e1	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.25e3	f0 06		beq $25eb			beq 	_CLEndLine
.25e5	20 4b 32	jsr $324b			jsr 	MInt32CopyUp 				; copy first to second if just a line number on its
.25e8	4c f5 25	jmp $25f5			jmp 	_CLDoListing 				; own e.g. list 1100
.25eb					_CLEndLine:
.25eb	c8		iny				iny 								; skip comma
.25ec	b1 28		lda ($28),y			lda 	(codePtr),y  				; no number follows, then its list 1000,
.25ee	30 05		bmi $25f5			bmi 	_CLDoListing
.25f0	a2 01		ldx #$01			ldx 	#1 							; get the last line to list
.25f2	20 75 2c	jsr $2c75			jsr 	EvaluateInteger				; get end
.25f5					_CLDoListing:
.25f5	20 96 27	jsr $2796			jsr 	ResetCodeAddress 			; back to the start.
.25f8					_CLCheckLoop:
.25f8	a2 02		ldx #$02		ldx	#2
.25fa	20 f6 14	jsr $14f6		jsr	deviceHandler
.25fd	a0 00		ldy #$00			ldy 	#0							; check end.
.25ff	b1 28		lda ($28),y			lda 	(codePtr),y
.2601	f0 41		beq $2644			beq 	_CLEnd
.2603	a2 00		ldx #$00			ldx 	#0 							; compare vs lower.
.2605	20 47 26	jsr $2647			jsr 	CLCompareLineTOS
.2608	c9 ff		cmp #$ff			cmp 	#255 						; if < skip
.260a	f0 28		beq $2634			beq 	_CLNext
.260c	e8		inx				inx
.260d	20 47 26	jsr $2647			jsr 	CLCompareLineTOS 			; compare vs higher
.2610	c9 01		cmp #$01			cmp 	#1
.2612	f0 20		beq $2634			beq 	_CLNext
.2614	a9 80		lda #$80			lda 	#$80 						; undo any down indents this line.
.2616	20 69 26	jsr $2669			jsr 	CLStructureCheck
.2619	ad d7 0c	lda $0cd7			lda 	structIndent 				; indent level.
.261c	10 02		bpl $2620			bpl 	_CLPositive
.261e	a9 00		lda #$00			lda 	#0
.2620					_CLPositive:
.2620	a2 04		ldx #$04		ldx	#4
.2622	20 de 3e	jsr $3ede		jsr	tokeniserHandler
.2625	a9 82		lda #$82			lda 	#$82 						; up indents from this point on.
.2627	20 69 26	jsr $2669			jsr 	CLStructureCheck
.262a	ad d7 0c	lda $0cd7			lda 	structIndent
.262d	10 05		bpl $2634			bpl 	_CLNext
.262f	a9 00		lda #$00			lda 	#0
.2631	8d d7 0c	sta $0cd7			sta 	structIndent
.2634					_CLNext:
.2634	a0 00		ldy #$00			ldy 	#0 							; go to next line.
.2636	b1 28		lda ($28),y			lda 	(codePtr),y
.2638	18		clc				clc
.2639	65 28		adc $28				adc 	codePtr
.263b	85 28		sta $28				sta 	codePtr
.263d	90 b9		bcc $25f8			bcc 	_CLCheckLoop
.263f	e6 29		inc $29				inc 	codePtr+1
.2641	4c f8 25	jmp $25f8			jmp 	_CLCheckLoop
.2644					_CLEnd:
.2644	4c f6 33	jmp $33f6			jmp 	WarmStart 					; warm start after list.
.2647					CLCompareLineTOS:
.2647	a0 01		ldy #$01			ldy 	#1
.2649	b1 28		lda ($28),y			lda 	(codePtr),y
.264b	55 50		eor $50,x			eor 	esInt0,x
.264d	85 2a		sta $2a				sta 	temp0
.264f	c8		iny				iny
.2650	b1 28		lda ($28),y			lda 	(codePtr),y
.2652	55 58		eor $58,x			eor 	esInt1,x
.2654	05 2a		ora $2a				ora 	temp0
.2656	f0 10		beq $2668			beq 	_CLCLTExit
.2658	88		dey				dey
.2659	b1 28		lda ($28),y			lda 	(codePtr),y
.265b	d5 50		cmp $50,x			cmp 	esInt0,x
.265d	c8		iny				iny
.265e	b1 28		lda ($28),y			lda 	(codePtr),y
.2660	f5 58		sbc $58,x			sbc 	esInt1,x
.2662	a9 ff		lda #$ff			lda 	#255
.2664	90 02		bcc $2668			bcc 	_CLCLTExit
.2666	a9 01		lda #$01			lda 	#1
.2668					_CLCLTExit:
.2668	60		rts				rts
.2669					CLStructureCheck:
.2669	85 2a		sta $2a				sta 	temp0
.266b	a0 03		ldy #$03			ldy 	#3
.266d					_CLSCLoop:
.266d	b1 28		lda ($28),y			lda 	(codePtr),y 				; get and consume token.
.266f	c8		iny				iny
.2670	c9 80		cmp #$80			cmp 	#$80
.2672	90 f9		bcc $266d			bcc 	_CLSCLoop 					; $00-$7F just step over.
.2674	f0 28		beq $269e			beq		_CLSCExit					; EOL return
.2676	c9 86		cmp #$86			cmp 	#$86 						; special handler
.2678	90 1e		bcc $2698			bcc 	_CLSCSpecial
.267a	c9 99		cmp #$99			cmp 	#TOK_STRUCTST 				; check if structure changer.
.267c	90 ef		bcc $266d			bcc 	_CLSCLoop
.267e	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST
.2680	b0 eb		bcs $266d			bcs 	_CLSCLoop
.2682	aa		tax				tax 								; get adjustment
.2683	bd 91 2b	lda $2b91,x			lda 	ELBinaryOperatorInfo-TOK_BINARYST,x
.2686	c5 2a		cmp $2a				cmp 	temp0	 					; if what we're searching for
.2688	d0 e3		bne $266d			bne 	_CLSCLoop
.268a	38		sec				sec
.268b	e9 81		sbc #$81			sbc 	#$81 						; convert to offset
.268d	0a		asl a				asl 	a 							; double indent step
.268e	18		clc				clc
.268f	6d d7 0c	adc $0cd7			adc 	structIndent 				; add to structure indent
.2692	8d d7 0c	sta $0cd7			sta 	structIndent
.2695	4c 6d 26	jmp $266d			jmp 	_CLSCLoop
.2698					_CLSCSpecial:
.2698	20 f5 24	jsr $24f5			jsr 	ScannerSkipSpecial
.269b	4c 6d 26	jmp $266d			jmp 	_CLSCLoop
.269e					_CLSCExit:
.269e	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/system/loadsave.asm

.269f					CommandLoad:
.269f	20 c7 26	jsr $26c7			jsr 	CLSParameters 					; get parameters for load.
.26a2	08		php				php
.26a3	a2 0e		ldx #$0e		ldx	#14
.26a5	20 f6 14	jsr $14f6		jsr	deviceHandler
.26a8	28		plp				plp
.26a9	b0 08		bcs $26b3			bcs 	_CLExit 						; if CC then load a program, so warm start.
.26ab	20 69 25	jsr $2569			jsr 	CommandClear
.26ae	a2 04		ldx #$04		ldx	#4
.26b0	20 61 1d	jsr $1d61		jsr	interactionHandler
.26b3					_CLExit
.26b3	60		rts				rts
.26b4					CommandSave:
.26b4	20 c7 26	jsr $26c7			jsr 	CLSParameters					; get parameters for save
.26b7	90 08		bcc $26c1			bcc 	_CSNoOverrideAddress
.26b9	20 8d 33	jsr $338d			jsr 	CheckComma 						; should be a comma.
.26bc	a2 02		ldx #$02			ldx 	#2
.26be	20 75 2c	jsr $2c75			jsr 	EvaluateInteger 				; get save end address.
.26c1					_CSNoOverrideAddress:
.26c1	a2 18		ldx #$18		ldx	#24
.26c3	20 f6 14	jsr $14f6		jsr	deviceHandler
.26c6	60		rts				rts
.26c7					CLSParameters:
.26c7	a2 00		ldx #$00			ldx 	#0 								; string
.26c9	20 6a 2c	jsr $2c6a			jsr 	EvaluateString
.26cc	e8		inx				inx 									; erase out +1 +2
.26cd	20 0d 33	jsr $330d			jsr 	MInt32False
.26d0	e8		inx				inx
.26d1	20 0d 33	jsr $330d			jsr 	MInt32False
.26d4	ad c8 0a	lda $0ac8			lda 	basePage 						; default start address.
.26d7	85 51		sta $51				sta 	esInt0+1
.26d9	ad c9 0a	lda $0ac9			lda 	basePage+1
.26dc	85 59		sta $59				sta 	esInt1+1
.26de	ad ca 0a	lda $0aca			lda 	endProgram 						; default end address
.26e1	85 52		sta $52				sta 	esInt0+2
.26e3	ad cb 0a	lda $0acb			lda 	endProgram+1
.26e6	85 5a		sta $5a				sta 	esInt1+2
.26e8	b1 28		lda ($28),y			lda 	(codePtr),y 					; , following
.26ea	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.26ec	d0 08		bne $26f6			bne 	_CLSDefault
.26ee	c8		iny				iny 									; skip comma
.26ef	a2 01		ldx #$01			ldx 	#1 								; get numeric value.
.26f1	20 75 2c	jsr $2c75			jsr 	EvaluateInteger
.26f4	38		sec				sec
.26f5	60		rts				rts
.26f6					_CLSDefault:
.26f6	18		clc				clc
.26f7	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/system/new.asm

.26f8					Command_New:
.26f8					Command_XNew:
.26f8	20 96 27	jsr $2796			jsr 	ResetCodeAddress 			; point to first line
.26fb	a0 00		ldy #$00			ldy 	#0 							; and zap it.
.26fd	98		tya				tya
.26fe	91 28		sta ($28),y			sta 	(codePtr),y
.2700	20 69 25	jsr $2569			jsr 	CommandClear 				; clear everything down.
.2703	4c bf 20	jmp $20bf			jmp 	CommandEND 					; do END code, as there's nothing to run.

;******  Return to file: main/main.asm


;******  Processing file: main/commands/system/run.asm

.0cd8					breakCounter:
>0cd8								.fill 	1
.0cd9					breakIncrement:
>0cd9								.fill 	1
.2706					Command_Run:
.2706					XCommand_Run:
.2706	a2 ff		ldx #$ff			ldx 	#$FF 						; reset the stack.
.2708	9a		txs				txs
.2709	20 90 27	jsr $2790			jsr 	BreakOn 					; turn break on
.270c	20 69 25	jsr $2569			jsr 	CommandClear 				; clear everything.
.270f	20 96 27	jsr $2796			jsr 	ResetCodeAddress 			; back to the start.
.2712					Command_RunFrom:
.2712	a0 03		ldy #$03			ldy 	#3 							; over offset/line #
.2714					CRNextInstruction:
.2714	64 3a		stz $3a				stz 	softMemAlloc+1
.2716	ad d8 0c	lda $0cd8			lda 	breakCounter 				; check for break.
.2719	6d d9 0c	adc $0cd9			adc 	breakIncrement
.271c	8d d8 0c	sta $0cd8			sta 	breakCounter
.271f	90 05		bcc $2726			bcc 	_CRNoChecks
.2721	a2 02		ldx #$02		ldx	#2
.2723	20 f6 14	jsr $14f6		jsr	deviceHandler
.2726					_CRNoChecks
.2726	b1 28		lda ($28),y			lda 	(codePtr),y 				; get next token.
.2728	10 1c		bpl $2746			bpl 	_CRNotToken
.272a	c9 c9		cmp #$c9			cmp 	#TOK_TOKENS 				; if in the tokens then do that token.
.272c	b0 0c		bcs $273a			bcs 	_CRExecute
.272e	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST 				; unary is ignored.
.2730	b0 71		bcs $27a3			bcs 	Unimplemented
.2732	c9 99		cmp #$99			cmp 	#TOK_STRUCTST 				; execute structures.
.2734	b0 04		bcs $273a			bcs 	_CRExecute
.2736	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; if one of the system tokens $80-$85 do that
.2738	b0 16		bcs $2750			bcs 	_CRCheckIndirect 			; if in that unused range check for ! or ? or AND
.273a					_CRExecute:
.273a	c8		iny				iny 								; consume it.
.273b	0a		asl a				asl 	a 							; double it, losing most significant bit.
.273c	aa		tax				tax
.273d	20 43 27	jsr $2743			jsr 	_CRRunRoutine 				; we want to do jsr (group0vectors,x)
.2740	4c 14 27	jmp $2714			jmp 	CRNextInstruction
.2743					_CRRunRoutine:
.2743	7c ad 27	jmp ($27ad,x)			jmp 	(Group0Vectors,x)
.2746					_CRNotToken:
.2746	c9 40		cmp #$40			cmp 	#$40 						; if 0-3F then it is a letter
.2748	b0 59		bcs $27a3			bcs 	Unimplemented
.274a					_CRDefaultLet:
.274a	20 f2 1f	jsr $1ff2			jsr 	CommandLet 					; do the default, LET
.274d	4c 14 27	jmp $2714			jmp 	CRNextInstruction
.2750					_CRCheckIndirect:
.2750	c9 86		cmp #$86			cmp 	#TKW_AND 					; AND (assembler)
.2752	f0 0a		beq $275e			beq 	_CRAndCommand
.2754	c9 97		cmp #$97			cmp 	#TKW_PLING 					; !<term> =
.2756	f0 f2		beq $274a			beq 	_CRDefaultLet
.2758	c9 98		cmp #$98			cmp 	#TKW_QMARK 					; ?<term> =
.275a	f0 ee		beq $274a			beq 	_CRDefaultLet
.275c	d0 45		bne $27a3			bne 	Unimplemented
.275e					_CRAndCommand:
.275e	c8		iny				iny 								; skip over the AND token
.275f	a9 95		lda #$95			lda 	#TKW_LPARENANDRPAREN 		; replace it with the pseudo-and
.2761	20 7b 27	jsr $277b			jsr 	CommandAssembler 			; do the assembler command
.2764	4c 14 27	jmp $2714			jmp 	CRNextInstruction 			; and loop round.
.2767					CommandShift1:
.2767	b1 28		lda ($28),y			lda 	(codePtr),y 				; get shifted value
.2769	10 38		bpl $27a3			bpl 	Unimplemented 				; we have an error as this should not happen.
.276b	c8		iny				iny 								; advance over it.
.276c	c9 94		cmp #$94			cmp 	#TKA_GROUP1 				; is it an assembler constant ?
.276e	b0 0b		bcs $277b			bcs 	CommandAssembler
.2770	0a		asl a				asl 	a 							; double into X
.2771	aa		tax				tax
.2772	7c 71 28	jmp ($2871,x)			jmp 	(Group1Vectors-12,x) 		; and do the code.
.2775					CommandShift2:
.2775	a9 ff		lda #$ff			lda 	#$FF 						; $FF means command not unary function.
.2777	20 4d 18	jsr $184d		jsr	extensionHandler
.277a	60		rts				rts
.277b					CommandAssembler:
.277b	a2 02		ldx #$02		ldx	#2
.277d	20 b4 13	jsr $13b4		jsr	assemblerHandler
.2780	60		rts				rts
.2781					CommandAssemblerLabel:
.2781	a2 04		ldx #$04		ldx	#4
.2783	20 b4 13	jsr $13b4		jsr	assemblerHandler
.2786	60		rts				rts
.2787					CommandColon:
.2787	60		rts				rts
.2788					CommandBreak:
.2788	20 73 2c	jsr $2c73			jsr 	EvaluateRootInteger
.278b	20 34 33	jsr $3334			jsr 	MInt32Zero
.278e	f0 02		beq $2792			beq 	BreakOff
.2790					BreakOn:
.2790	a2 08		ldx #$08			ldx 	#8
.2792					BreakOff:
.2792	8e d9 0c	stx $0cd9			stx 	breakIncrement
.2795	60		rts				rts
.2796					ResetCodeAddress:
.2796	ad c8 0a	lda $0ac8			lda 	basePage 					; copy basePage to code Pointer
.2799	85 28		sta $28				sta 	codePtr
.279b	ad c9 0a	lda $0ac9			lda 	basePage+1
.279e	85 29		sta $29				sta 	codePtr+1
.27a0	a0 03		ldy #$03			ldy 	#3 							; offset after offset link and line#
.27a2	60		rts				rts
.27a3					Unimplemented:
.27a3	a2 01		ldx #$01			ldx 	#ErrorID_Missing
.27a5	20 18 15	jsr $1518		jsr	errorHandler
.27a8					TKErr01:
.27a8					TKErr02:
.27a8					TKErr03:
.27a8					TKErr04:
.27a8					TKErr05:
.27a8					TKErr06:
.27a8					TKErr07:
.27a8					TKErr08:
.27a8					TKErr09:
.27a8					TKErr10:
.27a8					TKErr11:
.27a8					TKErr12:
.27a8					TKErr13:
.27a8					TKErr14:
.27a8	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.27aa	20 18 15	jsr $1518		jsr	errorHandler

;******  Processing file: main/commands/system/../../../generated/tokenvectors0.inc

.27ad					Group0Vectors:
>27ad	c5 20					.word	AdvanceNextLine          ; $80 [[eol]]
>27af	67 27					.word	CommandShift1            ; $81 [[sh1]]
>27b1	75 27					.word	CommandShift2            ; $82 [[sh2]]
>27b3	a8 27					.word	TKErr09                  ; $83 [[sh3]]
>27b5	a8 27					.word	TKErr10                  ; $84 [[fpc]]
>27b7	a8 27					.word	TKErr08                  ; $85 [[str]]
>27b9	5a 29					.word	AndHandler               ; $86 and
>27bb	47 29					.word	OrHandler                ; $87 or
>27bd	34 29					.word	XorHandler               ; $88 xor
>27bf	7c 2a					.word	CompareGreaterEq         ; $89 >=
>27c1	86 2a					.word	CompareLessEq            ; $8a <=
>27c3	68 2a					.word	CompareGreater           ; $8b >
>27c5	5e 2a					.word	CompareLess              ; $8c <
>27c7	54 2a					.word	CompareEquals            ; $8d =
>27c9	72 2a					.word	CompareNotEquals         ; $8e <>
>27cb	c5 28					.word	AddHandler               ; $8f +
>27cd	e8 28					.word	SubHandler               ; $90 -
>27cf	80 29					.word	ShrHandler               ; $91 >>
>27d1	6d 29					.word	ShlHandler               ; $92 <<
>27d3	fb 28					.word	MulHandler               ; $93 *
>27d5	0e 29					.word	DivHandler               ; $94 /
>27d7	21 29					.word	ModHandler               ; $95 mod
>27d9	b9 29					.word	PowerHandler             ; $96 ^
>27db	93 29					.word	WordRefHandler           ; $97 !
>27dd	a6 29					.word	ByteRefHandler           ; $98 ?
>27df	84 24					.word	Command_Repeat           ; $99 repeat
>27e1	2e 25					.word	Command_While            ; $9a while
>27e3	d9 20					.word	Command_FOR              ; $9b for
>27e5	e8 21					.word	CommandIf                ; $9c if
>27e7	a8 27					.word	TKErr04                  ; $9d defproc
>27e9	91 24					.word	Command_Until            ; $9e until
>27eb	51 25					.word	Command_Wend             ; $9f wend
>27ed	3a 21					.word	Command_NEXT             ; $a0 next
>27ef	a8 27					.word	TKErr06                  ; $a1 then
>27f1	23 22					.word	Command_ENDIF            ; $a2 endif
>27f3	93 23					.word	ReturnProc               ; $a3 endproc
>27f5	e0 2b					.word	UnaryParenthesis         ; $a4 (
>27f7	c2 2d					.word	UnaryLen                 ; $a5 len(
>27f9	06 2e					.word	UnarySgn                 ; $a6 sgn(
>27fb	ef 2d					.word	UnaryAbs                 ; $a7 abs(
>27fd	5f 2e					.word	Unary_Random             ; $a8 random(
>27ff	a9 2e					.word	Unary_Page               ; $a9 page
>2801	09 33					.word	MInt32True               ; $aa true
>2803	0d 33					.word	MInt32False              ; $ab false
>2805	74 2e					.word	Unary_Min                ; $ac min(
>2807	78 2e					.word	Unary_Max                ; $ad max(
>2809	81 2f					.word	UnarySys                 ; $ae sys(
>280b	2a 2f					.word	UnaryTimer               ; $af timer(
>280d	3f 2d					.word	EventFunction            ; $b0 event(
>280f	53 2f					.word	UnaryGet                 ; $b1 get(
>2811	43 2f					.word	UnaryInkey               ; $b2 inkey(
>2813	fa 2e					.word	UnaryAlloc               ; $b3 alloc(
>2815	ba 2f					.word	ExecChr                  ; $b4 chr$(
>2817	ea 2f					.word	ExecLeft                 ; $b5 left$(
>2819	07 30					.word	ExecMid                  ; $b6 mid$(
>281b	2f 30					.word	ExecRight                ; $b7 right$(
>281d	c1 2c					.word	Event_Str                ; $b8 str$(
>281f	f0 2c					.word	UnaryVal                 ; $b9 val(
>2821	1d 2e					.word	UnaryPeek                ; $ba peek(
>2823	23 2e					.word	UnaryDeek                ; $bb deek(
>2825	29 2e					.word	UnaryLeek                ; $bc leek(
>2827	e0 2d					.word	UnaryAsc                 ; $bd asc(
>2829	d4 2e					.word	UnaryIntToFloat          ; $be int(
>282b	e7 2e					.word	UnaryFloatToInt          ; $bf float(
>282d	f3 2c					.word	UnaryIsVal               ; $c0 isval(
>282f	d1 2f					.word	ExecUpper                ; $c1 upper$(
>2831	ce 2f					.word	ExecLower                ; $c2 lower$(
>2833	b7 2e					.word	UnaryReference           ; $c3 @
>2835	cd 2e					.word	UnaryComplement          ; $c4 ~
>2837	ca 2e					.word	UnaryHexMarker           ; $c5 &
>2839	6c 2f					.word	UnaryGetString           ; $c6 get$(
>283b	72 2f					.word	UnaryInkeyString         ; $c7 inkey$(
>283d	a9 2f					.word	UnaryMem                 ; $c8 mem
>283f	a8 27					.word	TKErr01                  ; $c9 )
>2841	87 27					.word	CommandColon             ; $ca :
>2843	a8 27					.word	TKErr02                  ; $cb ,
>2845	a8 27					.word	TKErr03                  ; $cc ;
>2847	ad 20					.word	Command_Rem2             ; $cd '
>2849	a8 27					.word	TKErr07                  ; $ce to
>284b	a8 27					.word	TKErr05                  ; $cf step
>284d	26 23					.word	CallProc                 ; $d0 proc
>284f	24 22					.word	CommandLocal             ; $d1 local
>2851	e4 1f					.word	Command_Dim              ; $d2 dim
>2853	ad 20					.word	Command_Rem              ; $d3 rem
>2855	f2 1f					.word	CommandLet               ; $d4 let
>2857	2e 1e					.word	Command_Input            ; $d5 input
>2859	1d 22					.word	Command_ELSE             ; $d6 else
>285b	b5 1f					.word	Command_VDU              ; $d7 vdu
>285d	e4 1e					.word	Command_Print            ; $d8 print
>285f	96 1d					.word	CommandData              ; $d9 data
>2861	a8 27					.word	TKErr13                  ; $da image
>2863	a8 27					.word	TKErr12                  ; $db at
>2865	a8 27					.word	TKErr14                  ; $dc flip
>2867	d6 1f					.word	Command_Assert           ; $dd assert
>2869	70 20					.word	Command_Poke             ; $de poke
>286b	74 20					.word	Command_Doke             ; $df doke
>286d	78 20					.word	Command_Loke             ; $e0 loke
>286f	85 1f					.word	Command_Ink              ; $e1 ink
>2871	90 1f					.word	Command_Paper            ; $e2 paper
>2873	7f 1f					.word	Command_CLS              ; $e3 cls
>2875	9b 1f					.word	Command_Locate           ; $e4 locate
>2877	81 27					.word	CommandAssemblerLabel    ; $e5 .
>2879	a8 27					.word	TKErr11                  ; $e6 #
>287b	69 25					.word	CommandClear             ; $e7 clear

;******  Return to file: main/commands/system/run.asm


;******  Processing file: main/commands/system/../../../generated/tokenvectors1.inc

.287d					Group1Vectors:
>287d	9f 26					.word	CommandLoad              ; $86 load
>287f	b4 26					.word	CommandSave              ; $87 save
>2881	c4 25					.word	CommandList              ; $88 list
>2883	f8 26					.word	Command_New              ; $89 new
>2885	88 27					.word	CommandBreak             ; $8a break
>2887	06 27					.word	Command_Run              ; $8b run
>2889	6b 1d					.word	CommandRead              ; $8c read
>288b	9f 1d					.word	CommandRestore           ; $8d restore
>288d	bf 20					.word	CommandEnd               ; $8e end
>288f	ba 20					.word	CommandStop              ; $8f stop
>2891	c2 20					.word	CommandXemu              ; $90 xemu
>2893	fc 1d					.word	CommandGOTO              ; $91 goto
>2895	d1 1d					.word	CommandGOSUB             ; $92 gosub
>2897	e4 1d					.word	CommandRETURN            ; $93 return

;******  Return to file: main/commands/system/run.asm


;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/binary/binary.asm

.2899					BinaryProcess:
.2899	b5 48		lda $48,x			lda 	esType,x 					; or type bytes together and check bit 6.
.289b	15 49		ora $49,x			ora 	esType+1,x 					; (the float bit)
.289d	0a		asl a				asl 	a
.289e	30 0e		bmi $28ae			bmi 	_BPStringType 				; if bit 6 is set, then string type, error
.28a0	18		clc				clc 								; return CC for integer
.28a1	29 02		and #$02			and 	#$02 						; $02 because of ASL A. check original bit 1.
.28a3	f0 08		beq $28ad			beq 	_BPExit 					; if both integer then return with CC.
.28a5	20 b3 28	jsr $28b3			jsr 	BPMakeBothFloat 			; make both float
.28a8	a9 01		lda #$01			lda 	#$01 						; set result type to float
.28aa	95 48		sta $48,x			sta 	esType,x
.28ac	38		sec				sec 								; and return with carry set.
.28ad					_BPExit:
.28ad	60		rts				rts
.28ae					_BPStringType:
.28ae	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.28b0	20 18 15	jsr $1518		jsr	errorHandler
.28b3					BPMakeBothFloat:
.28b3	e8		inx				inx
.28b4	20 b8 28	jsr $28b8			jsr 	BPMakeFloat 				; one is a float, so we do both as floats.
.28b7	ca		dex				dex
.28b8					BPMakeFloat:
.28b8	b5 48		lda $48,x			lda 	esType,x 					; get type bit which is in bit 0
.28ba	4a		lsr a				lsr 	a
.28bb	b0 07		bcs $28c4			bcs 	_BPIsFloat 					; already a float if set.
.28bd	8a		txa				txa
.28be	a2 1c		ldx #$1c		ldx	#28
.28c0	20 75 1b	jsr $1b75		jsr	floatingpointHandler
.28c3	aa		tax				tax
.28c4					_BPIsFloat:
.28c4	60		rts				rts
.28c5					AddHandler:
.28c5	20 96 2a	jsr $2a96			jsr 	DereferenceTwo 				; dereference top two on stack.
.28c8	b5 48		lda $48,x			lda 	esType,x 					; check two strings.
.28ca	35 49		and $49,x			and 	esType+1,x
.28cc	29 40		and #$40			and 	#$40 						; if both have bit 6 set ... we have two strings
.28ce	d0 10		bne $28e0			bne 	_AHStringConcat				; concatenate strings.
.28d0	20 99 28	jsr $2899			jsr 	BinaryProcess 				; check to see if either is float
.28d3	b0 03		bcs $28d8			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.28d5	4c f1 31	jmp $31f1			jmp 	MInt32Add 							; else do it as integer.
.28d8					_IsFPOperation:
.28d8	8a		txa				txa 								; call the relevant fp routine
.28d9	a2 04		ldx #$04		ldx	#4
.28db	20 75 1b	jsr $1b75		jsr	floatingpointHandler
.28de	aa		tax				tax
.28df	60		rts				rts
.28e0					_AHStringConcat:
.28e0	8a		txa				txa 								; handled by the string module.
.28e1	a2 06		ldx #$06		ldx	#6
.28e3	20 b8 36	jsr $36b8		jsr	stringHandler
.28e6	aa		tax				tax
.28e7	60		rts				rts
.28e8					SubHandler:
.28e8	20 96 2a	jsr $2a96			jsr 	DereferenceTwo
.28eb	20 99 28	jsr $2899			jsr 	BinaryProcess 				; check to see if either is float
.28ee	b0 03		bcs $28f3			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.28f0	4c 0b 32	jmp $320b			jmp 	MInt32Sub 							; else do it as integer.
.28f3					_IsFPOperation:
.28f3	8a		txa				txa 								; call the relevant fp routine
.28f4	a2 12		ldx #$12		ldx	#18
.28f6	20 75 1b	jsr $1b75		jsr	floatingpointHandler
.28f9	aa		tax				tax
.28fa	60		rts				rts
.28fb					MulHandler:
.28fb	20 96 2a	jsr $2a96			jsr 	DereferenceTwo
.28fe	20 99 28	jsr $2899			jsr 	BinaryProcess 				; check to see if either is float
.2901	b0 03		bcs $2906			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.2903	4c 25 32	jmp $3225			jmp 	MInt32Multiply 							; else do it as integer.
.2906					_IsFPOperation:
.2906	8a		txa				txa 								; call the relevant fp routine
.2907	a2 0c		ldx #$0c		ldx	#12
.2909	20 75 1b	jsr $1b75		jsr	floatingpointHandler
.290c	aa		tax				tax
.290d	60		rts				rts
.290e					DivHandler:
.290e	20 96 2a	jsr $2a96			jsr 	DereferenceTwo
.2911	20 99 28	jsr $2899			jsr 	BinaryProcess 				; check to see if either is float
.2914	b0 03		bcs $2919			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.2916	4c e2 30	jmp $30e2			jmp 	MInt32SDivide 							; else do it as integer.
.2919					_IsFPOperation:
.2919	8a		txa				txa 								; call the relevant fp routine
.291a	a2 08		ldx #$08		ldx	#8
.291c	20 75 1b	jsr $1b75		jsr	floatingpointHandler
.291f	aa		tax				tax
.2920	60		rts				rts
.2921					ModHandler:
.2921	20 96 2a	jsr $2a96			jsr 	DereferenceTwo
.2924	20 99 28	jsr $2899			jsr 	BinaryProcess 				; check to see if either is float
.2927	b0 03		bcs $292c			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.2929	4c 60 31	jmp $3160			jmp 	MInt32Modulus 							; else do it as integer.
.292c					_IsFPOperation:
.292c	8a		txa				txa 								; call the relevant fp routine
.292d	a2 0a		ldx #$0a		ldx	#10
.292f	20 75 1b	jsr $1b75		jsr	floatingpointHandler
.2932	aa		tax				tax
.2933	60		rts				rts
.2934					XorHandler:
.2934	20 96 2a	jsr $2a96			jsr 	DereferenceTwo
.2937	20 99 28	jsr $2899			jsr 	BinaryProcess 				; check to see if either is float
.293a	b0 03		bcs $293f			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.293c	4c 94 30	jmp $3094			jmp 	MInt32Xor 							; else do it as integer.
.293f					_IsFPOperation:
.293f	8a		txa				txa 								; call the relevant fp routine
.2940	a2 0a		ldx #$0a		ldx	#10
.2942	20 75 1b	jsr $1b75		jsr	floatingpointHandler
.2945	aa		tax				tax
.2946	60		rts				rts
.2947					OrHandler:
.2947	20 96 2a	jsr $2a96			jsr 	DereferenceTwo
.294a	20 99 28	jsr $2899			jsr 	BinaryProcess 				; check to see if either is float
.294d	b0 03		bcs $2952			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.294f	4c 7b 30	jmp $307b			jmp 	MInt32Or 							; else do it as integer.
.2952					_IsFPOperation:
.2952	8a		txa				txa 								; call the relevant fp routine
.2953	a2 0a		ldx #$0a		ldx	#10
.2955	20 75 1b	jsr $1b75		jsr	floatingpointHandler
.2958	aa		tax				tax
.2959	60		rts				rts
.295a					AndHandler:
.295a	20 96 2a	jsr $2a96			jsr 	DereferenceTwo
.295d	20 99 28	jsr $2899			jsr 	BinaryProcess 				; check to see if either is float
.2960	b0 03		bcs $2965			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.2962	4c 62 30	jmp $3062			jmp 	MInt32And 							; else do it as integer.
.2965					_IsFPOperation:
.2965	8a		txa				txa 								; call the relevant fp routine
.2966	a2 0a		ldx #$0a		ldx	#10
.2968	20 75 1b	jsr $1b75		jsr	floatingpointHandler
.296b	aa		tax				tax
.296c	60		rts				rts
.296d					ShlHandler:
.296d	20 96 2a	jsr $2a96			jsr 	DereferenceTwo
.2970	20 99 28	jsr $2899			jsr 	BinaryProcess 				; check to see if either is float
.2973	b0 03		bcs $2978			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.2975	4c ee 29	jmp $29ee			jmp 	Mint32ShiftLeftX 							; else do it as integer.
.2978					_IsFPOperation:
.2978	8a		txa				txa 								; call the relevant fp routine
.2979	a2 0a		ldx #$0a		ldx	#10
.297b	20 75 1b	jsr $1b75		jsr	floatingpointHandler
.297e	aa		tax				tax
.297f	60		rts				rts
.2980					ShrHandler:
.2980	20 96 2a	jsr $2a96			jsr 	DereferenceTwo
.2983	20 99 28	jsr $2899			jsr 	BinaryProcess 				; check to see if either is float
.2986	b0 03		bcs $298b			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.2988	4c f1 29	jmp $29f1			jmp 	MInt32ShiftRightX 							; else do it as integer.
.298b					_IsFPOperation:
.298b	8a		txa				txa 								; call the relevant fp routine
.298c	a2 0a		ldx #$0a		ldx	#10
.298e	20 75 1b	jsr $1b75		jsr	floatingpointHandler
.2991	aa		tax				tax
.2992	60		rts				rts
.2993					WordRefHandler:
.2993	20 96 2a	jsr $2a96			jsr 	DereferenceTwo
.2996	20 99 28	jsr $2899			jsr 	BinaryProcess 				; check to see if either is float
.2999	b0 03		bcs $299e			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.299b	4c e0 29	jmp $29e0			jmp 	MInt32WordIndirect 							; else do it as integer.
.299e					_IsFPOperation:
.299e	8a		txa				txa 								; call the relevant fp routine
.299f	a2 0a		ldx #$0a		ldx	#10
.29a1	20 75 1b	jsr $1b75		jsr	floatingpointHandler
.29a4	aa		tax				tax
.29a5	60		rts				rts
.29a6					ByteRefHandler:
.29a6	20 96 2a	jsr $2a96			jsr 	DereferenceTwo
.29a9	20 99 28	jsr $2899			jsr 	BinaryProcess 				; check to see if either is float
.29ac	b0 03		bcs $29b1			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.29ae	4c e4 29	jmp $29e4			jmp 	MInt32ByteIndirect 							; else do it as integer.
.29b1					_IsFPOperation:
.29b1	8a		txa				txa 								; call the relevant fp routine
.29b2	a2 0a		ldx #$0a		ldx	#10
.29b4	20 75 1b	jsr $1b75		jsr	floatingpointHandler
.29b7	aa		tax				tax
.29b8	60		rts				rts
.29b9					PowerHandler:
.29b9	20 96 2a	jsr $2a96			jsr 	DereferenceTwo
.29bc	20 99 28	jsr $2899			jsr 	BinaryProcess 				; check to see if either is float
.29bf	b0 03		bcs $29c4			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.29c1	4c cc 29	jmp $29cc			jmp 	PowerInteger 							; else do it as integer.
.29c4					_IsFPOperation:
.29c4	8a		txa				txa 								; call the relevant fp routine
.29c5	a2 18		ldx #$18		ldx	#24
.29c7	20 75 1b	jsr $1b75		jsr	floatingpointHandler
.29ca	aa		tax				tax
.29cb	60		rts				rts
.29cc					PowerInteger:
.29cc	20 b3 28	jsr $28b3			jsr 	BPMakeBothFloat				; make them float.
.29cf	8a		txa				txa
.29d0	a2 18		ldx #$18		ldx	#24
.29d2	20 75 1b	jsr $1b75		jsr	floatingpointHandler
.29d5	a2 14		ldx #$14		ldx	#20
.29d7	20 75 1b	jsr $1b75		jsr	floatingpointHandler
.29da	aa		tax				tax
.29db	a9 00		lda #$00			lda 	#0 							; make type integer
.29dd	95 48		sta $48,x			sta 	esType,x
.29df	60		rts				rts
.29e0					Mint32WordIndirect:
.29e0	a9 80		lda #$80	 		lda 	#$80 				 		; word reference type (bit 7 set)
.29e2	d0 02		bne $29e6			bne 	Min32Indirect
.29e4					Mint32ByteIndirect:
.29e4	a9 a0		lda #$a0			lda 	#$A0 						; byte reference type (bit 7, bit 5 set)
.29e6					Min32Indirect:
.29e6	48		pha				pha 								; save the indirection
.29e7	20 f1 31	jsr $31f1			jsr 	MInt32Add 					; add a!b a?b
.29ea	68		pla				pla 								; and set the type to reference.
.29eb	95 48		sta $48,x			sta 	esType,x 	 				; so a!b => a+b and it's a reference....
.29ed	60		rts				rts
.29ee					Mint32ShiftLeftX:
.29ee	18		clc				clc 								; CC shift left
.29ef	90 01		bcc $29f2			bcc 	Mint32Shift
.29f1					Mint32ShiftRightX:
.29f1	38		sec				sec 								; CS shift right
.29f2					Mint32Shift:
.29f2	08		php				php 								; save carry flag on stack.
.29f3	b5 59		lda $59,x			lda 	esInt1+1,x 					; if shift >= 32 then it is zero.
.29f5	15 61		ora $61,x			ora 	esInt2+1,x
.29f7	15 69		ora $69,x			ora 	esInt3+1,x
.29f9	d0 1e		bne $2a19			bne 	_MShiftZero
.29fb	b5 51		lda $51,x			lda 	esInt0+1,x
.29fd	c9 20		cmp #$20			cmp 	#32
.29ff	b0 18		bcs $2a19			bcs 	_MShiftZero
.2a01					_MShiftLoop:
.2a01	b5 51		lda $51,x			lda 	esInt0+1,x 					; check count is zero
.2a03	f0 12		beq $2a17			beq 	_MShiftExit
.2a05	d6 51		dec $51,x			dec 	esInt0+1,x
.2a07	28		plp				plp 								; restore and save carry
.2a08	08		php				php
.2a09	90 06		bcc $2a11			bcc 	_MShiftLeft 				; and shift left/right accordingly.
.2a0b	20 2b 33	jsr $332b			jsr 	Mint32ShiftRight
.2a0e	4c 01 2a	jmp $2a01			jmp 	_MShiftLoop
.2a11					_MShiftLeft:
.2a11	20 22 33	jsr $3322			jsr 	Mint32ShiftLeft
.2a14	4c 01 2a	jmp $2a01			jmp 	_MShiftLoop
.2a17					_MShiftExit:
.2a17	28		plp				plp	 								; throw saved carry and exit
.2a18	60		rts				rts
.2a19					_MShiftZero:
.2a19	4c 0d 33	jmp $330d			jmp 	MInt32False 				; return 0 as shifted >= 32 times.

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/binary/compare.asm

.2a1c					PerformComparison:
.2a1c	20 96 2a	jsr $2a96			jsr 	DereferenceTwo 				; make both values.
.2a1f	b5 48		lda $48,x			lda 	esType,x 					; check for two strings.
.2a21	35 49		and $49,x			and 	esType+1,x
.2a23	0a		asl a				asl 	a 							; bit 7 set if both bit 6s were set.
.2a24	30 1d		bmi $2a43			bmi 	_PCIsString
.2a26	b5 48		lda $48,x			lda 	esType,x 					; check either is floating point.
.2a28	15 49		ora $49,x			ora 	esType+1,x
.2a2a	0a		asl a				asl 	a 							; shift bit 6 (string) to bit 7, mixed types
.2a2b	30 22		bmi $2a4f			bmi 	_PCError
.2a2d	29 02		and #$02			and 	#$02 						; because of ASL, check type in bit 0
.2a2f	f0 0f		beq $2a40			beq 	_PCIsInteger 				; if not two integers, e.g. 1 of the bits is set
.2a31	20 b3 28	jsr $28b3			jsr 	BPMakeBothFloat 			; make both float
.2a34	8a		txa				txa
.2a35	a2 06		ldx #$06		ldx	#6
.2a37	20 75 1b	jsr $1b75		jsr	floatingpointHandler
.2a3a	86 32		stx $32				stx 	tempShort 					; save result
.2a3c	aa		tax				tax
.2a3d	a5 32		lda $32				lda 	tempShort
.2a3f	60		rts				rts
.2a40					_PCIsInteger:
.2a40	4c ad 30	jmp $30ad			jmp 	MInt32Compare
.2a43					_PCIsString:
.2a43	8a		txa				txa 								; A has SP
.2a44	a2 0a		ldx #$0a		ldx	#10
.2a46	20 b8 36	jsr $36b8		jsr	stringHandler
.2a49	86 32		stx $32				stx 	tempShort 					; save result
.2a4b	aa		tax				tax 								; put SP back in X and get result.
.2a4c	a5 32		lda $32				lda 	tempShort
.2a4e	60		rts				rts
.2a4f					_PCError:
.2a4f	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.2a51	20 18 15	jsr $1518		jsr	errorHandler
.2a54					CompareEquals:
.2a54	20 1c 2a	jsr $2a1c			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.2a57	c9 00		cmp #$00			cmp 	#$00 						; and we do something if it is = or <> a value.
.2a59	f0 35		beq $2a90			beq  	CompareTrue
.2a5b	4c 93 2a	jmp $2a93			jmp 	CompareFalse
.2a5e					CompareLess:
.2a5e	20 1c 2a	jsr $2a1c			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.2a61	c9 ff		cmp #$ff			cmp 	#$FF 						; and we do something if it is = or <> a value.
.2a63	f0 2b		beq $2a90			beq  	CompareTrue
.2a65	4c 93 2a	jmp $2a93			jmp 	CompareFalse
.2a68					CompareGreater:
.2a68	20 1c 2a	jsr $2a1c			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.2a6b	c9 01		cmp #$01			cmp 	#$01 						; and we do something if it is = or <> a value.
.2a6d	f0 21		beq $2a90			beq  	CompareTrue
.2a6f	4c 93 2a	jmp $2a93			jmp 	CompareFalse
.2a72					CompareNotEquals:
.2a72	20 1c 2a	jsr $2a1c			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.2a75	c9 00		cmp #$00			cmp 	#$00 						; and we do something if it is = or <> a value.
.2a77	d0 17		bne $2a90			bne  	CompareTrue
.2a79	4c 93 2a	jmp $2a93			jmp 	CompareFalse
.2a7c					CompareGreaterEq:
.2a7c	20 1c 2a	jsr $2a1c			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.2a7f	c9 ff		cmp #$ff			cmp 	#$FF 						; and we do something if it is = or <> a value.
.2a81	d0 0d		bne $2a90			bne  	CompareTrue
.2a83	4c 93 2a	jmp $2a93			jmp 	CompareFalse
.2a86					CompareLessEq:
.2a86	20 1c 2a	jsr $2a1c			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.2a89	c9 01		cmp #$01			cmp 	#$01 						; and we do something if it is = or <> a value.
.2a8b	d0 03		bne $2a90			bne  	CompareTrue
.2a8d	4c 93 2a	jmp $2a93			jmp 	CompareFalse
.2a90					CompareTrue:
.2a90	4c 09 33	jmp $3309			jmp 	MInt32True
.2a93					CompareFalse:
.2a93	4c 0d 33	jmp $330d			jmp 	MInt32False

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/dereference.asm

.2a96					DereferenceTwo:
.2a96	e8		inx				inx
.2a97	20 9b 2a	jsr $2a9b			jsr 	DereferenceOne
.2a9a	ca		dex				dex
.2a9b					DereferenceOne:
.2a9b	b5 48		lda $48,x			lda 	esType,x
.2a9d	10 3d		bpl $2adc			bpl 	_DRNotReference 			; is it a reference ? if not, we don't need to do anything
.2a9f	4a		lsr a				lsr 	a 							; do float dereference if bit 0 set.
.2aa0	b0 3b		bcs $2add			bcs 	_DRFloatDeReference
.2aa2	98		tya				tya
.2aa3	48		pha				pha
.2aa4	b5 50		lda $50,x			lda 	esInt0,x 					; copy address to temp0
.2aa6	85 2a		sta $2a				sta 	temp0
.2aa8	b5 58		lda $58,x			lda 	esInt1,x
.2aaa	85 2b		sta $2b				sta 	temp0+1
.2aac	a9 00		lda #$00			lda 	#0 							; clear esInt1..3
.2aae	95 58		sta $58,x			sta 	esInt1,x
.2ab0	95 60		sta $60,x			sta 	esInt2,x
.2ab2	95 68		sta $68,x			sta 	esInt3,x
.2ab4	b5 48		lda $48,x			lda 	esType,x 					; get the type byte.
.2ab6	29 60		and #$60			and 	#$60 						; get string flag ($40) and byte flag ($20)
.2ab8	0a		asl a				asl 	a 							; now string ($80) byte ($40)
.2ab9	30 0d		bmi $2ac8			bmi 	_DeRefString 				; string, 2 bytes only
.2abb	d0 11		bne $2ace			bne 	_DeRefByte 					; byte 1 byte only
.2abd					_DeRefLong:
.2abd	a0 03		ldy #$03			ldy 	#3
.2abf	b1 2a		lda ($2a),y			lda 	(temp0),y
.2ac1	95 68		sta $68,x			sta 	esInt3,x
.2ac3	88		dey				dey
.2ac4	b1 2a		lda ($2a),y			lda 	(temp0),y
.2ac6	95 60		sta $60,x			sta 	esInt2,x
.2ac8					_DeRefString:
.2ac8	a0 01		ldy #$01			ldy 	#1
.2aca	b1 2a		lda ($2a),y			lda 	(temp0),y
.2acc	95 58		sta $58,x			sta 	esInt1,x
.2ace					_DeRefByte:
.2ace	a0 00		ldy #$00			ldy 	#0
.2ad0	b1 2a		lda ($2a),y			lda 	(temp0),y
.2ad2	95 50		sta $50,x			sta 	esInt0,x
.2ad4	b5 48		lda $48,x			lda 	esType,x 					; clear byte and deref bits.
.2ad6	29 40		and #$40			and 	#$40
.2ad8	95 48		sta $48,x			sta 	esType,x
.2ada	68		pla				pla
.2adb	a8		tay				tay
.2adc					_DRNotReference
.2adc	60		rts				rts
.2add					_DRFloatDereference:
.2add	20 67 20	jsr $2067			jsr 	TOSToTemp0 					; address to deref in temp0
.2ae0	8a		txa				txa
.2ae1	a2 1e		ldx #$1e		ldx	#30
.2ae3	20 75 1b	jsr $1b75		jsr	floatingpointHandler
.2ae6	aa		tax				tax
.2ae7	a9 01		lda #$01			lda 	#$01 						; type to FP (float)
.2ae9	95 48		sta $48,x			sta 	esType,x
.2aeb	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/evaluate.asm

.2aec					EvaluateLevel:
.2aec	e0 08		cpx #$08			cpx 	#StackSize 					; check stack overflow
.2aee	b0 1e		bcs $2b0e			bcs 	_ELStack
.2af0	48		pha				pha 								; save precedence level.
.2af1	a9 00		lda #$00			lda 	#0 							; zero the current stack level.
.2af3	95 50		sta $50,x			sta 	esInt0,x
.2af5	95 58		sta $58,x			sta 	esInt1,x
.2af7	95 60		sta $60,x			sta 	esInt2,x
.2af9	95 68		sta $68,x			sta 	esInt3,x
.2afb	95 48		sta $48,x			sta 	esType,x 					; zero the type (integer value)
.2afd	b1 28		lda ($28),y			lda 	(codePtr),y	 				; look at first token/character
.2aff	30 26		bmi $2b27			bmi 	_ELIsToken 					; if -ve could be string, float, or unary function.
.2b01	0a		asl a				asl 	a 							; if 00-3F then will now be PL and it's a variable.
.2b02	30 0f		bmi $2b13			bmi 	_ELIsConstant 				; 40-7F will be -ve and that's an integer constant.
.2b04	8a		txa				txa 								; stack level in X
.2b05	a2 02		ldx #$02		ldx	#2
.2b07	20 af 42	jsr $42af		jsr	variableHandler
.2b0a	aa		tax				tax
.2b0b	4c 50 2b	jmp $2b50			jmp		_ELHasTerm
.2b0e					_ELStack:
.2b0e	a2 23		ldx #$23			ldx 	#ErrorID_NumStack
.2b10	20 18 15	jsr $1518		jsr	errorHandler
.2b13					_ELIsConstant:
.2b13	4a		lsr a				lsr 	a 							; get the value back
.2b14	29 3f		and #$3f			and 	#$3F 						; force into range 0-63
.2b16	95 50		sta $50,x			sta 	esInt0,x 					; and put in LSB.
.2b18					_ELCheckNext:
.2b18	c8		iny				iny 								; look at next
.2b19	b1 28		lda ($28),y			lda 	(codePtr),y
.2b1b	49 40		eor #$40			eor 	#$40 						; shift around so 40-7F => 00-3F
.2b1d	c9 40		cmp #$40			cmp 	#$40 						; out of range ?
.2b1f	b0 2f		bcs $2b50			bcs 	_ELHasTerm 					; done getting the constant.
.2b21	20 e9 2b	jsr $2be9			jsr 	ELShiftByteIn 				; shift byte into position.
.2b24	4c 18 2b	jmp $2b18			jmp 	_ELCheckNext
.2b27					_ELIsToken:
.2b27	c9 85		cmp #$85			cmp 	#TOK_STR 					; handle strings.
.2b29	f0 0f		beq $2b3a			beq 	_ELIsString
.2b2b	c9 84		cmp #$84			cmp 	#TOK_FPC 					; if no, then check unary.
.2b2d	d0 5f		bne $2b8e			bne 	_ELCheckUnary
.2b2f	8a		txa				txa 								; put X into A
.2b30	c8		iny				iny 								; skip over the float marker
.2b31	a2 1a		ldx #$1a		ldx	#26
.2b33	20 75 1b	jsr $1b75		jsr	floatingpointHandler
.2b36	aa		tax				tax 								; restore X
.2b37	4c 50 2b	jmp $2b50			jmp 	_ELHasTerm
.2b3a					_ELIsString:
.2b3a	98		tya				tya 								; address of string is codePtr+y+1
.2b3b	38		sec				sec
.2b3c	65 28		adc $28				adc 	codePtr
.2b3e	95 50		sta $50,x			sta 	esInt0,x
.2b40	a5 29		lda $29				lda 	codePtr+1
.2b42	69 00		adc #$00			adc 	#0
.2b44	95 58		sta $58,x			sta 	esInt1,x
.2b46	a9 40		lda #$40			lda 	#$40 						; set type to string value
.2b48	95 48		sta $48,x			sta 	esType,x
.2b4a	c8		iny				iny 								; skip over string.
.2b4b	98		tya				tya
.2b4c	38		sec				sec									; +1 for the length itself.
.2b4d	71 28		adc ($28),y			adc 	(codePtr),y
.2b4f	a8		tay				tay 								; and fall through to term loop code.
.2b50					_ELHasTerm:
.2b50	b1 28		lda ($28),y			lda 	(codePtr),y
.2b52	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; check in the correct range for binary tokens.
.2b54	90 04		bcc $2b5a			bcc 	_ELPopExit
.2b56	c9 99		cmp #$99			cmp 	#TOK_STRUCTST
.2b58	90 02		bcc $2b5c			bcc 	_ELHasBinaryTerm
.2b5a					_ELPopExit:
.2b5a	68		pla				pla
.2b5b					_ELExit:
.2b5b	60		rts				rts
.2b5c					_ELHasBinaryTerm:
.2b5c	84 32		sty $32				sty 	tempShort 					; save position
.2b5e	a8		tay				tay 								; use token as an index and get the precedence.
.2b5f	b9 91 2b	lda $2b91,y			lda 	ELBinaryOperatorInfo-TOK_BINARYST,y
.2b62	a4 32		ldy $32				ldy 	tempShort 					; restore Y
.2b64	85 32		sta $32				sta 	tempShort 					; save precedence in memory.
.2b66	68		pla				pla 								; restore current level.
.2b67	c5 32		cmp $32				cmp 	tempShort 					; if current >= operator then exit
.2b69	b0 f0		bcs $2b5b			bcs 	_ELExit
.2b6b	48		pha				pha 								; save current level back on the stack.
.2b6c	b1 28		lda ($28),y			lda 	(codePtr),y 				; save the binary operator on the stack and skip it.
.2b6e	48		pha				pha
.2b6f	c8		iny				iny
.2b70	e8		inx				inx 								; calculate the RHS at the operator precedence.
.2b71	a5 32		lda $32				lda 	tempShort
.2b73	20 ec 2a	jsr $2aec			jsr 	EvaluateLevel
.2b76	ca		dex				dex
.2b77	68		pla				pla 								; get the operator back out.
.2b78					_ELExecuteA:
.2b78	86 32		stx $32				stx 	tempShort 					; upload the vectors. Would be nice to use jmp (aaaa,x)
.2b7a	0a		asl a				asl 	a 							; but not practical. May use push/rts later.
.2b7b	aa		tax				tax
.2b7c	bd ad 27	lda $27ad,x			lda 	Group0Vectors,x
.2b7f	85 2a		sta $2a				sta 	temp0
.2b81	bd ae 27	lda $27ae,x			lda 	Group0Vectors+1,x
.2b84	85 2b		sta $2b				sta 	temp0+1
.2b86	a6 32		ldx $32				ldx 	tempShort
.2b88	20 d5 2b	jsr $2bd5			jsr 	_ELCallTemp0
.2b8b	4c 50 2b	jmp $2b50			jmp 	_ELHasTerm 					; and loop back round.
.2b8e					_ELCheckUnary:
.2b8e	c8		iny				iny 								; skip over token.
.2b8f	c9 90		cmp #$90			cmp 	#TKW_MINUS 					; is it - term
.2b91	f0 19		beq $2bac			beq 	_ELMinus
.2b93	c9 97		cmp #$97			cmp 	#TKW_PLING 					; is it ! or ? term
.2b95	f0 2c		beq $2bc3			beq 	_ELIndirect
.2b97	c9 98		cmp #$98			cmp 	#TKW_QMARK
.2b99	f0 28		beq $2bc3			beq 	_ELIndirect
.2b9b	c9 83		cmp #$83			cmp 	#TOK_SHIFT3 				; is it the unary extension.
.2b9d	f0 39		beq $2bd8			beq 	_ELExtension
.2b9f	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST 				; must be TOK_UNARYST ... TOK_TOKENS
.2ba1	90 04		bcc $2ba7			bcc 	_ELUSyntax
.2ba3	c9 c9		cmp #$c9			cmp 	#TOK_TOKENS
.2ba5	90 d1		bcc $2b78			bcc 	_ELExecuteA 				; if so do that token.
.2ba7					_ELUSyntax:
.2ba7	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.2ba9	20 18 15	jsr $1518		jsr	errorHandler
.2bac					_ELMinus:
.2bac	20 3e 2c	jsr $2c3e			jsr 	EvaluateNumericTerm 		; get a number to negate.
.2baf	b5 48		lda $48,x			lda 	esType,x 					; is it integer
.2bb1	f0 0a		beq $2bbd			beq 	_ELMinusInteger
.2bb3	8a		txa				txa
.2bb4	a2 0e		ldx #$0e		ldx	#14
.2bb6	20 75 1b	jsr $1b75		jsr	floatingpointHandler
.2bb9	aa		tax				tax
.2bba	4c 50 2b	jmp $2b50			jmp 	_ELHasTerm
.2bbd					_ELMinusInteger:
.2bbd	20 c7 32	jsr $32c7			jsr 	MInt32Negate 				; do int negate
.2bc0	4c 50 2b	jmp $2b50			jmp 	_ELHasTerm
.2bc3					_ELIndirect:
.2bc3	48		pha				pha 								; save what we want (TKW_QMARK TWK_PLING)
.2bc4	20 47 2c	jsr $2c47			jsr 	EvaluateIntegerTerm 		; integer address
.2bc7	68		pla				pla
.2bc8	49 97		eor #$97			eor 	#TKW_PLING 					; now $00 if !
.2bca	f0 02		beq $2bce			beq 	_ELHaveModifier
.2bcc	a9 20		lda #$20			lda 	#$20 						; now $00 if !, $20 if ?
.2bce					_ELHaveModifier:
.2bce	09 80		ora #$80			ora 	#$80						; make it the appropriate reference.
.2bd0	95 48		sta $48,x			sta 	esType,x 					; $80 for ! $A0 for ?
.2bd2	4c 50 2b	jmp $2b50			jmp 	_ELHasTerm
.2bd5					_ELCallTemp0:
.2bd5	6c 2a 00	jmp ($002a)			jmp 	(temp0)
.2bd8					_ELExtension:
.2bd8	8a		txa				txa 								; stack pos in A
.2bd9	20 4d 18	jsr $184d		jsr	extensionHandler
.2bdc	aa		tax				tax 								; restore stack
.2bdd	4c 50 2b	jmp $2b50			jmp 	_ELHasTerm
.2be0					UnaryParenthesis:
.2be0	a9 00		lda #$00			lda 	#0 							; ( is a unary function ....
.2be2	20 ec 2a	jsr $2aec			jsr 	EvaluateLevel
.2be5	20 80 33	jsr $3380			jsr 	CheckRightParen 			; check for )
.2be8	60		rts				rts
.2be9					ELShiftByteIn:
.2be9	48		pha				pha 								; save bits to shift in.
.2bea	b5 68		lda $68,x			lda 	esInt3,x 					; save top most byte
.2bec	48		pha				pha
.2bed	b5 60		lda $60,x			lda 	esInt2,x 					; shift everything left 8 bits
.2bef	95 68		sta $68,x			sta 	esInt3,x
.2bf1	b5 58		lda $58,x			lda 	esInt1,x
.2bf3	95 60		sta $60,x			sta 	esInt2,x
.2bf5	b5 50		lda $50,x			lda 	esInt0,x
.2bf7	95 58		sta $58,x			sta 	esInt1,x
.2bf9	a9 00		lda #$00			lda 	#0
.2bfb	95 50		sta $50,x			sta 	esInt0,x
.2bfd	68		pla				pla 								; now A:TOS is a 5 byte register, shift right twice.
.2bfe	29 03		and #$03			and 	#3 							; only want lower 2 bits
.2c00	09 04		ora #$04			ora 	#4  						; set bit 2 - when 1 we are done
.2c02					_ELShiftLoop:
.2c02	4a		lsr a				lsr 	a
.2c03	76 68		ror $68,x			ror 	esInt3,x
.2c05	76 60		ror $60,x			ror 	esInt2,x
.2c07	76 58		ror $58,x			ror 	esInt1,x
.2c09	76 50		ror $50,x			ror 	esInt0,x
.2c0b	c9 01		cmp #$01			cmp 	#1
.2c0d	d0 f3		bne $2c02			bne 	_ELShiftLoop
.2c0f	68		pla				pla 								; get original 6 bit value and OR in.
.2c10	29 3f		and #$3f			and 	#$3F
.2c12	15 50		ora $50,x			ora 	esInt0,x
.2c14	95 50		sta $50,x			sta 	esInt0,x
.2c16	60		rts				rts
.2c17					ELBinaryOperatorInfo:

;******  Processing file: main/evaluate/../../generated/binarystructinfo.inc

>2c17	01					.byte	$01			; $86 and
>2c18	01					.byte	$01			; $87 or
>2c19	01					.byte	$01			; $88 xor
>2c1a	02					.byte	$02			; $89 >=
>2c1b	02					.byte	$02			; $8a <=
>2c1c	02					.byte	$02			; $8b >
>2c1d	02					.byte	$02			; $8c <
>2c1e	02					.byte	$02			; $8d =
>2c1f	02					.byte	$02			; $8e <>
>2c20	03					.byte	$03			; $8f +
>2c21	03					.byte	$03			; $90 -
>2c22	04					.byte	$04			; $91 >>
>2c23	04					.byte	$04			; $92 <<
>2c24	04					.byte	$04			; $93 *
>2c25	04					.byte	$04			; $94 /
>2c26	04					.byte	$04			; $95 mod
>2c27	05					.byte	$05			; $96 ^
>2c28	06					.byte	$06			; $97 !
>2c29	06					.byte	$06			; $98 ?
>2c2a	82					.byte	$82			; $99 repeat
>2c2b	82					.byte	$82			; $9a while
>2c2c	82					.byte	$82			; $9b for
>2c2d	82					.byte	$82			; $9c if
>2c2e	82					.byte	$82			; $9d defproc
>2c2f	80					.byte	$80			; $9e until
>2c30	80					.byte	$80			; $9f wend
>2c31	80					.byte	$80			; $a0 next
>2c32	80					.byte	$80			; $a1 then
>2c33	80					.byte	$80			; $a2 endif
>2c34	80					.byte	$80			; $a3 endproc

;******  Return to file: main/evaluate/evaluate.asm


;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/support.asm

.2c35					EvaluateTerm:
.2c35	a9 0f		lda #$0f			lda 	#15 						; no binary operator has this high a precedence.
.2c37	20 ec 2a	jsr $2aec			jsr 	EvaluateLevel
.2c3a	20 9b 2a	jsr $2a9b			jsr 	DereferenceOne
.2c3d	60		rts				rts
.2c3e					EvaluateNumericTerm:
.2c3e	20 35 2c	jsr $2c35			jsr 	EvaluateTerm
.2c41	b5 48		lda $48,x			lda 	esType,x
.2c43	0a		asl a				asl 	a 							; see if it's a string.
.2c44	30 09		bmi $2c4f			bmi 	ENTType
.2c46	60		rts				rts
.2c47					EvaluateIntegerTerm:
.2c47	20 35 2c	jsr $2c35			jsr 	EvaluateTerm
.2c4a	b5 48		lda $48,x			lda 	esType,x
.2c4c	d0 01		bne $2c4f			bne 	ENTType
.2c4e	60		rts				rts
.2c4f					ENTType:
.2c4f	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.2c51	20 18 15	jsr $1518		jsr	errorHandler
.2c54					EvaluateRoot:
.2c54	a2 00		ldx #$00			ldx 	#0
.2c56					Evaluate:
.2c56	a9 00		lda #$00			lda 	#0
.2c58	20 ec 2a	jsr $2aec			jsr 	EvaluateLevel
.2c5b	20 9b 2a	jsr $2a9b			jsr 	DereferenceOne
.2c5e	60		rts				rts
.2c5f					EvaluateNumeric:
.2c5f	20 56 2c	jsr $2c56			jsr 	Evaluate
.2c62	b5 48		lda $48,x			lda 	esType,x
.2c64	0a		asl a				asl 	a 							; see if it's a string.
.2c65	30 e8		bmi $2c4f			bmi 	ENTType
.2c67	4a		lsr a				lsr 	a 							; shift float flag into carry.
.2c68	4a		lsr a				lsr 	a
.2c69	60		rts				rts
.2c6a					EvaluateString:
.2c6a	20 56 2c	jsr $2c56			jsr 	Evaluate
.2c6d	b5 48		lda $48,x			lda 	esType,x
.2c6f	0a		asl a				asl 	a 							; see if it's a string.
.2c70	10 dd		bpl $2c4f			bpl 	ENTType
.2c72	60		rts				rts
.2c73					EvaluateRootInteger:
.2c73	a2 00		ldx #$00			ldx 	#0
.2c75					EvaluateInteger:
.2c75	20 56 2c	jsr $2c56			jsr 	Evaluate
.2c78	b5 48		lda $48,x			lda 	esType,x
.2c7a	d0 d3		bne $2c4f			bne 	ENTType
.2c7c	60		rts				rts
.2c7d					EvaluateSmallInteger:
.2c7d	20 75 2c	jsr $2c75			jsr 	EvaluateInteger
.2c80	b5 58		lda $58,x			lda 	esInt1,x
.2c82	15 60		ora $60,x			ora 	esInt2,x
.2c84	15 68		ora $68,x			ora 	esInt3,x
.2c86	d0 03		bne $2c8b			bne 	_ESIValue
.2c88	b5 50		lda $50,x			lda 	esInt0,x
.2c8a	60		rts				rts
.2c8b					_ESIValue:
.2c8b	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.2c8d	20 18 15	jsr $1518		jsr	errorHandler
.2c90					LinkEvaluate:
.2c90	aa		tax				tax
.2c91	20 56 2c	jsr $2c56			jsr 	Evaluate
.2c94	8a		txa				txa
.2c95	60		rts				rts
.2c96					LinkEvaluateTerm:
.2c96	aa		tax				tax
.2c97	20 35 2c	jsr $2c35			jsr 	EvaluateTerm
.2c9a	8a		txa				txa
.2c9b	60		rts				rts
.2c9c					LinkEvaluateInteger:
.2c9c	aa		tax				tax
.2c9d	20 75 2c	jsr $2c75			jsr 	EvaluateInteger
.2ca0	8a		txa				txa
.2ca1	60		rts				rts
.2ca2					LinkEvaluateString:
.2ca2	aa		tax				tax
.2ca3	20 6a 2c	jsr $2c6a			jsr 	EvaluateString
.2ca6	8a		txa				txa
.2ca7	60		rts				rts
.2ca8					LinkEvaluateSmallInt:
.2ca8	aa		tax				tax
.2ca9	20 7d 2c	jsr $2c7d			jsr 	EvaluateSmallInteger
.2cac	8a		txa				txa
.2cad	60		rts				rts
.2cae					EvaluateReference:
.2cae	ad 28 2c	lda $2c28			lda 	ELBinaryOperatorInfo+TKW_PLING-TOK_BINARYST
.2cb1	38		sec				sec 								; sub 1 to allow a!x b?x to work.
.2cb2	e9 01		sbc #$01			sbc 	#1
.2cb4	20 ec 2a	jsr $2aec			jsr 	EvaluateLevel
.2cb7	b5 48		lda $48,x			lda 	esType,x
.2cb9	10 01		bpl $2cbc			bpl 	_ERFail
.2cbb	60		rts				rts
.2cbc					_ERFail:
.2cbc	a2 0b		ldx #$0b			ldx 	#ErrorID_NoReference
.2cbe	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary/convert.asm

.2cc1					Event_Str:
.2cc1	20 5f 2c	jsr $2c5f			jsr 	EvaluateNumeric 			; get a number.
.2cc4	b5 48		lda $48,x			lda 	esType,x 					; is it floating point
.2cc6	d0 13		bne $2cdb			bne 	_ESFloat
.2cc8	20 1e 2d	jsr $2d1e			jsr 	ConvertGetBase 				; get base, or default.
.2ccb	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.2ccd	85 2a		sta $2a				sta 	temp0
.2ccf	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.2cd1	85 2b		sta $2b				sta 	1+(temp0)
.2cd3	b5 51		lda $51,x			lda 	esInt0+1,x 					; get the base
.2cd5	20 63 32	jsr $3263			jsr 	MInt32ToString 				; convert to string.
.2cd8	4c e8 2c	jmp $2ce8			jmp 	_ESCloneExit 				; clone and exit.
.2cdb					_ESFloat:
.2cdb	20 80 33	jsr $3380			jsr 	CheckRightParen 			; check closing )
.2cde	20 67 20	jsr $2067			jsr 	TOSToTemp0 					; string address in temp0, goes here.
.2ce1	8a		txa				txa
.2ce2	a2 16		ldx #$16		ldx	#22
.2ce4	20 75 1b	jsr $1b75		jsr	floatingpointHandler
.2ce7	aa		tax				tax
.2ce8					_ESCloneExit:
.2ce8	8a		txa				txa
.2ce9	a2 04		ldx #$04		ldx	#4
.2ceb	20 b8 36	jsr $36b8		jsr	stringHandler
.2cee	aa		tax				tax
.2cef	60		rts				rts
.2cf0					UnaryVal:
.2cf0	38		sec				sec 								; Carry set to return value
.2cf1	b0 01		bcs $2cf4			bcs 	ValueMain
.2cf3					UnaryIsVal:
.2cf3	18		clc				clc									; Carry clear to return legitimacy
.2cf4					ValueMain:
.2cf4	08		php				php 								; save results (CS is value, CC is validation)
.2cf5	20 6a 2c	jsr $2c6a			jsr 	EvaluateString
.2cf8	20 1e 2d	jsr $2d1e			jsr 	ConvertGetBase 				; get base, if any.
.2cfb	98		tya				tya
.2cfc	48		pha				pha
.2cfd	20 67 20	jsr $2067			jsr 	TOSToTemp0 					; string address in temp0, goes here.
.2d00	b5 51		lda $51,x			lda 	esInt0+1,x 					; get the base
.2d02	29 7f		and #$7f			and 	#$7F 						; ignore the sign bit.
.2d04	20 7b 31	jsr $317b			jsr 	MInt32FromString 			; convert it back from a string.
.2d07	b0 0c		bcs $2d15			bcs 	_VMSuccess 					; successfully converted.
.2d09	b5 51		lda $51,x			lda 	esInt0+1,x 					; is base the default
.2d0b	c9 8a		cmp #$8a			cmp 	#$80+10 					; if no, then it is integer only.
.2d0d	f0 00		beq $2d0f			beq 	_VMFailed 	 				; so we failed.
.2d0f					_VMFailed:
.2d0f	68		pla				pla
.2d10	a8		tay				tay
.2d11	28		plp				plp
.2d12	4c 0d 33	jmp $330d			jmp 	MInt32False 				; return 0 whatever.
.2d15					_VMSuccess:
.2d15	68		pla				pla
.2d16	a8		tay				tay
.2d17	28		plp				plp 								; if CS the it was val() so we want the value.
.2d18	b0 03		bcs $2d1d			bcs 	_VMExit
.2d1a	4c 09 33	jmp $3309			jmp 	MInt32True 					; otherwise return true as successful.
.2d1d					_VMExit:
.2d1d	60		rts				rts
.2d1e					ConvertGetBase:
.2d1e	a9 8a		lda #$8a			lda 	#10+$80 					; default base 10 signed.
.2d20	95 51		sta $51,x			sta 	esInt0+1,x
.2d22	b1 28		lda ($28),y			lda 	(codePtr),y 				; check for ,base)
.2d24	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.2d26	d0 0e		bne $2d36			bne 	_CGBDone 					; not found, should be )
.2d28	e8		inx				inx 								; next level
.2d29	c8		iny				iny 								; skip comma.
.2d2a	20 7d 2c	jsr $2c7d			jsr 	EvaluateSmallInteger		; evaluate the base.
.2d2d	ca		dex				dex
.2d2e	c9 02		cmp #$02			cmp 	#2 							; base range is 2..16
.2d30	90 08		bcc $2d3a			bcc 	_CGBValue 					; (it should work as high as 37)
.2d32	c9 11		cmp #$11			cmp 	#17
.2d34	b0 04		bcs $2d3a			bcs 	_CGBValue
.2d36					_CGBDone:
.2d36	20 80 33	jsr $3380			jsr 	CheckRightParen
.2d39	60		rts				rts
.2d3a					_CGBValue:
.2d3a	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.2d3c	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary/event.asm

.2d3f					EventFunction:
.2d3f	20 ae 2c	jsr $2cae			jsr 	EvaluateReference			; get the variable reference that tracks the event
.2d42	b5 48		lda $48,x			lda 	esType,x
.2d44	c9 80		cmp #$80			cmp 	#$80 						; must be integer reference
.2d46	d0 5b		bne $2da3			bne 	_EFType
.2d48	20 8d 33	jsr $338d			jsr 	CheckComma
.2d4b	e8		inx				inx
.2d4c	20 75 2c	jsr $2c75			jsr 	EvaluateInteger		 		; get the elapsed time between firing.
.2d4f	20 80 33	jsr $3380			jsr 	CheckRightParen 			; finish off with the right bracket
.2d52	ca		dex				dex
.2d53	b5 58		lda $58,x			lda 	esInt1,x 					; check max of 32767, we use 16 bit for timers and
.2d55	29 80		and #$80			and 	#$80 						; it doesn't work > 32767
.2d57	15 60		ora $60,x			ora 	esInt2,x
.2d59	15 68		ora $68,x			ora 	esInt3,x
.2d5b	d0 41		bne $2d9e			bne 	_EFValue
.2d5d	98		tya				tya
.2d5e	48		pha				pha
.2d5f	8a		txa				txa
.2d60	48		pha				pha
.2d61	a2 1c		ldx #$1c		ldx	#28
.2d63	20 f6 14	jsr $14f6		jsr	deviceHandler
.2d66	84 2d		sty $2d				sty 	temp1+1
.2d68	85 2c		sta $2c				sta 	temp1
.2d6a	68		pla				pla
.2d6b	aa		tax				tax
.2d6c	20 67 20	jsr $2067			jsr 	TOSToTemp0 					; set temp0 to the address of the event variable
.2d6f	a0 03		ldy #$03			ldy 	#3							; if -ve
.2d71	b1 2a		lda ($2a),y			lda 	(temp0),y
.2d73	30 23		bmi $2d98			bmi 	_EFFail 	 				; straight out with fail, means "on pause".
.2d75	a0 00		ldy #$00			ldy 	#0 							; is the fire time zero ?
.2d77	b1 2a		lda ($2a),y			lda 	(temp0),y
.2d79	c8		iny				iny
.2d7a	11 2a		ora ($2a),y			ora 	(temp0),y
.2d7c	f0 17		beq $2d95			beq 	_EFInitialise 				; if so, initialise the value but return false.
.2d7e	a0 00		ldy #$00			ldy 	#0 							; calculate trigger - timer
.2d80	38		sec				sec
.2d81	b1 2a		lda ($2a),y			lda 	(temp0),y
.2d83	e5 2c		sbc $2c				sbc 	temp1
.2d85	c8		iny				iny
.2d86	b1 2a		lda ($2a),y			lda 	(temp0),y
.2d88	e5 2d		sbc $2d				sbc 	temp1+1
.2d8a	10 0c		bpl $2d98			bpl 	_EFFail 					; if trigger >= timer then return False
.2d8c	20 a8 2d	jsr $2da8			jsr 	SetEventTimer 				; reset the timer for next time.
.2d8f	20 09 33	jsr $3309			jsr	 	MInt32True 					; and treutn true as fired.
.2d92	68		pla				pla
.2d93	a8		tay				tay
.2d94	60		rts				rts
.2d95					_EFInitialise:
.2d95	20 a8 2d	jsr $2da8			jsr		SetEventTimer 				; set trigger time to time + elapsed
.2d98					_EFFail:
.2d98	68		pla				pla
.2d99	a8		tay				tay
.2d9a	20 0d 33	jsr $330d			jsr 	MInt32False
.2d9d	60		rts				rts
.2d9e					_EFValue:
.2d9e	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.2da0	20 18 15	jsr $1518		jsr	errorHandler
.2da3					_EFType:
.2da3	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.2da5	20 18 15	jsr $1518		jsr	errorHandler
.2da8					SetEventTimer:
.2da8	a0 00		ldy #$00			ldy 	#0
.2daa	18		clc				clc
.2dab	a5 2c		lda $2c				lda 	temp1
.2dad	75 51		adc $51,x			adc 	esInt0+1,x
.2daf	91 2a		sta ($2a),y			sta		(temp0),y
.2db1	c8		iny				iny
.2db2	a5 2d		lda $2d				lda 	temp1+1
.2db4	75 59		adc $59,x			adc 	esInt1+1,x
.2db6	91 2a		sta ($2a),y			sta		(temp0),y
.2db8	88		dey				dey
.2db9	11 2a		ora ($2a),y			ora 	(temp0),y 					; if the result is non zero, exit
.2dbb	d0 04		bne $2dc1			bne 	_SETExit 					; zero means initialise.....
.2dbd	a9 01		lda #$01			lda 	#1 							; timer zero won't work, so make it 1, which is
.2dbf	91 2a		sta ($2a),y			sta 	(temp0),y 					; near enough.
.2dc1					_SETExit:
.2dc1	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary/unary.asm

.2dc2					UnaryLen:
.2dc2	20 d0 2d	jsr $2dd0			jsr 	ULStart
.2dc5					ULFinish:
.2dc5	b1 2a		lda ($2a),y			lda 	(temp0),y 					; get length prefix
.2dc7	a4 32		ldy $32				ldy 	tempShort 					; get Y back
.2dc9	20 1c 33	jsr $331c			jsr 	MInt32Set8Bit 				; write it out.
.2dcc	20 80 33	jsr $3380			jsr 	CheckRightParen
.2dcf	60		rts				rts
.2dd0	20 6a 2c	jsr $2c6a	ULStart:jsr 	EvaluateString
.2dd3	b5 50		lda $50,x			lda 	esInt0,x 					; copy address of string to temp0
.2dd5	85 2a		sta $2a				sta 	temp0
.2dd7	b5 58		lda $58,x			lda 	esInt1,x
.2dd9	85 2b		sta $2b				sta 	temp0+1
.2ddb	84 32		sty $32				sty 	tempShort 					; get length
.2ddd	a0 00		ldy #$00			ldy 	#0
.2ddf	60		rts				rts
.2de0					UnaryAsc:
.2de0	20 d0 2d	jsr $2dd0			jsr 	ULStart 					; same as LEN() get string, save Y, point to length.
.2de3	b1 2a		lda ($2a),y			lda 	(temp0),y 					; read length
.2de5	c8		iny				iny 		 						; point to first character, we can do LEN code after that
.2de6	c9 00		cmp #$00			cmp 	#0
.2de8	d0 db		bne $2dc5			bne 	ULFinish 					; if length = 0 then error : asc("") -> error.
.2dea	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.2dec	20 18 15	jsr $1518		jsr	errorHandler
.2def					UnaryAbs:
.2def	20 5f 2c	jsr $2c5f			jsr 	EvaluateNumeric 			; some numeric value
.2df2	b0 07		bcs $2dfb			bcs 	_UAFloat 					; CS then float, so use that function
.2df4	20 c2 32	jsr $32c2			jsr 	MInt32Absolute 				; int version
.2df7	20 80 33	jsr $3380			jsr 	CheckRightParen
.2dfa	60		rts				rts
.2dfb					_UAFloat:
.2dfb	8a		txa				txa 								; float version
.2dfc	a2 02		ldx #$02		ldx	#2
.2dfe	20 75 1b	jsr $1b75		jsr	floatingpointHandler
.2e01	aa		tax				tax
.2e02	20 80 33	jsr $3380			jsr 	CheckRightParen
.2e05	60		rts				rts
.2e06					UnarySgn:
.2e06	20 5f 2c	jsr $2c5f			jsr 	EvaluateNumeric 			; same as above but sign of value
.2e09	b0 07		bcs $2e12			bcs 	_USFloat
.2e0b	20 fa 32	jsr $32fa			jsr 	MInt32Sign
.2e0e	20 80 33	jsr $3380			jsr 	CheckRightParen
.2e11	60		rts				rts
.2e12					_USFloat:
.2e12	8a		txa				txa
.2e13	a2 10		ldx #$10		ldx	#16
.2e15	20 75 1b	jsr $1b75		jsr	floatingpointHandler
.2e18	aa		tax				tax
.2e19	20 80 33	jsr $3380			jsr 	CheckRightParen
.2e1c	60		rts				rts
.2e1d					UnaryPeek:
.2e1d	20 49 2e	jsr $2e49			jsr 	PDLCode 					; each has common setup code put reads 1,2 or 4 bytes
.2e20	4c 3d 2e	jmp $2e3d			jmp 	PDLByte0
.2e23					UnaryDeek:
.2e23	20 49 2e	jsr $2e49			jsr 	PDLCode
.2e26	4c 37 2e	jmp $2e37			jmp 	PDLByte1
.2e29					UnaryLeek:
.2e29	20 49 2e	jsr $2e49			jsr 	PDLCode
.2e2c	a0 03		ldy #$03			ldy 	#3							; read 3-2
.2e2e	b1 2a		lda ($2a),y			lda 	(temp0),y
.2e30	95 68		sta $68,x			sta 	esInt3,x
.2e32	88		dey				dey
.2e33	b1 2a		lda ($2a),y			lda 	(temp0),y
.2e35	95 60		sta $60,x			sta 	esInt2,x
.2e37					PDLByte1:
.2e37	a0 01		ldy #$01			ldy 	#1
.2e39	b1 2a		lda ($2a),y			lda 	(temp0),y
.2e3b	95 58		sta $58,x			sta 	esInt1,x
.2e3d					PDLByte0:
.2e3d	a0 00		ldy #$00			ldy 	#0
.2e3f	b1 2a		lda ($2a),y			lda 	(temp0),y
.2e41	95 50		sta $50,x			sta 	esInt0,x
.2e43	a4 32		ldy $32				ldy 	tempShort 					; restore Y
.2e45	20 80 33	jsr $3380			jsr 	CheckRightParen 			; check right and return
.2e48	60		rts				rts
.2e49					PDLCode:
.2e49	20 75 2c	jsr $2c75			jsr 	EvaluateInteger 			; some address
.2e4c	b5 50		lda $50,x			lda 	esInt0,x 					; copy address of string to temp0
.2e4e	85 2a		sta $2a				sta 	temp0
.2e50	b5 58		lda $58,x			lda 	esInt1,x
.2e52	85 2b		sta $2b				sta 	temp0+1
.2e54	a9 00		lda #$00			lda 	#0 							; zero upper 3 bytes of result, type okay.
.2e56	95 58		sta $58,x			sta 	esInt1,x 					; PEEK needs upper 3 cleared
.2e58	95 60		sta $60,x			sta 	esInt2,x
.2e5a	95 68		sta $68,x			sta 	esInt3,x
.2e5c	84 32		sty $32				sty 	tempShort 					; save Y
.2e5e	60		rts				rts
.2e5f					Unary_Random:
.2e5f	20 3d 33	jsr $333d			jsr 	MInt32Random 				; generate random number.
.2e62	b1 28		lda ($28),y			lda 	(codePtr),y 				; check followed by )
.2e64	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.2e66	f0 08		beq $2e70			beq 	_URExit
.2e68	e8		inx				inx 								; load range 0..r-1 into +1
.2e69	20 75 2c	jsr $2c75			jsr 	EvaluateInteger
.2e6c	ca		dex				dex
.2e6d	20 60 31	jsr $3160			jsr 	MInt32Modulus 				; calculate random % modulus
.2e70					_URExit:
.2e70	20 80 33	jsr $3380			jsr 	CheckRightParen 			; check right and return
.2e73	60		rts				rts
.2e74					Unary_Min:
.2e74	a9 01		lda #$01			lda 	#1 							; c1 cmp c2 needs to be > e.g. c1 > c2
.2e76	d0 02		bne $2e7a			bne 	UnaryMBody
.2e78					Unary_Max:
.2e78	a9 ff		lda #$ff			lda 	#$FF 						; c1 cmp c2 needs to be < e.g. c1 < c2
.2e7a					UnaryMBody:
.2e7a	48		pha				pha 								; save comparator on stack, shows min or max
.2e7b	20 56 2c	jsr $2c56			jsr 	Evaluate 					; get the first thing to check
.2e7e					_UnaryMLoop:
.2e7e	b1 28		lda ($28),y			lda 	(codePtr),y 				; found ), indicates end.
.2e80	c8		iny				iny
.2e81	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.2e83	f0 09		beq $2e8e			beq 	_UnaryMExit
.2e85	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; found , indicates more.
.2e87	f0 07		beq $2e90			beq 	_UnaryMCompare
.2e89	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.2e8b	20 18 15	jsr $1518		jsr	errorHandler
.2e8e					_UnaryMExit:
.2e8e	68		pla				pla 								; done so throw comparator and return.
.2e8f	60		rts				rts
.2e90					_UnaryMCompare:
.2e90	e8		inx				inx 								; get the 2nd thing to evaluate
.2e91	20 56 2c	jsr $2c56			jsr 	Evaluate
.2e94	ca		dex				dex
.2e95	20 1c 2a	jsr $2a1c			jsr 	PerformComparison 			; this is part of evaluate/compare.asm
.2e98	85 32		sta $32				sta 	tempShort 					; save result
.2e9a	68		pla				pla 								; get what we need
.2e9b	48		pha				pha
.2e9c	c5 32		cmp $32				cmp 	tempShort 					; did we get it
.2e9e	d0 de		bne $2e7e			bne 	_UnaryMLoop 				; no, try another value.
.2ea0	20 0d 33	jsr $330d			jsr 	MInt32False 				; promote 2nd to 1st.
.2ea3	20 f1 31	jsr $31f1			jsr 	MInt32Add
.2ea6	4c 7e 2e	jmp $2e7e			jmp 	_UnaryMLoop
.2ea9					Unary_Page:
.2ea9	20 0d 33	jsr $330d			jsr 	MInt32False 				; zero
.2eac	ad c8 0a	lda $0ac8			lda 	basePage 					; copy base page address in.
.2eaf	95 50		sta $50,x			sta 	esInt0,x
.2eb1	ad c9 0a	lda $0ac9			lda 	basePage+1
.2eb4	95 58		sta $58,x			sta 	esInt1,x
.2eb6	60		rts				rts
.2eb7					UnaryReference:
.2eb7	a9 0f		lda #$0f			lda 	#15
.2eb9	20 ec 2a	jsr $2aec			jsr 	EvaluateLevel 				; evaluate term and don't deference.
.2ebc	b5 48		lda $48,x			lda 	esType,x 					; check it's a reference.
.2ebe	10 05		bpl $2ec5			bpl 	UType
.2ec0	a9 00		lda #$00			lda 	#0 							; make it an integer
.2ec2	95 48		sta $48,x			sta 	esType,x
.2ec4	60		rts				rts
.2ec5					UType:
.2ec5	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.2ec7	20 18 15	jsr $1518		jsr	errorHandler
.2eca					UnaryHexMarker:
.2eca	4c 47 2c	jmp $2c47			jmp 	EvaluateIntegerTerm
.2ecd					UnaryComplement:
.2ecd	20 47 2c	jsr $2c47			jsr 	EvaluateIntegerTerm
.2ed0	20 e1 32	jsr $32e1			jsr 	MInt32Not
.2ed3	60		rts				rts
.2ed4					UnaryIntToFloat:
.2ed4	20 5f 2c	jsr $2c5f			jsr 	EvaluateNumeric				; some number
.2ed7	b5 48		lda $48,x			lda 	esType,x 					; if float already, exit
.2ed9	d0 0b		bne $2ee6			bne 	_UIFExit
.2edb	8a		txa				txa 								; convert and set type
.2edc	a2 1c		ldx #$1c		ldx	#28
.2ede	20 75 1b	jsr $1b75		jsr	floatingpointHandler
.2ee1	aa		tax				tax
.2ee2	a9 01		lda #$01			lda 	#1
.2ee4	95 48		sta $48,x			sta 	esType,x
.2ee6					_UIFExit:
.2ee6	60		rts				rts
.2ee7					UnaryFloatToInt:
.2ee7	20 5f 2c	jsr $2c5f			jsr 	EvaluateNumeric 			; the number
.2eea	b5 48		lda $48,x			lda 	esType,x 					; if int already exit
.2eec	f0 0b		beq $2ef9			beq 	_UFIExit
.2eee	8a		txa				txa 								; convert to int
.2eef	a2 14		ldx #$14		ldx	#20
.2ef1	20 75 1b	jsr $1b75		jsr	floatingpointHandler
.2ef4	aa		tax				tax
.2ef5	a9 00		lda #$00			lda 	#0 							; set type
.2ef7	95 48		sta $48,x			sta 	esType,x
.2ef9					_UFIExit:
.2ef9	60		rts				rts
.2efa					UnaryAlloc:
.2efa	e8		inx				inx 								; evaluate memory required
.2efb	20 75 2c	jsr $2c75			jsr 	EvaluateInteger
.2efe	20 80 33	jsr $3380			jsr 	CheckRightParen
.2f01	ca		dex				dex
.2f02	b5 61		lda $61,x			lda 	esInt2+1,x 					; check at least in 64k range.
.2f04	15 69		ora $69,x			ora 	esInt3+1,x
.2f06	d0 1d		bne $2f25			bne 	_UABadValue
.2f08	20 0d 33	jsr $330d			jsr 	MInt32False					; zero return.
.2f0b	a5 36		lda $36				lda 	lowMemory+1 				; copy low memory in
.2f0d	95 58		sta $58,x			sta 	esInt1,x
.2f0f	a5 35		lda $35				lda 	lowMemory
.2f11	95 50		sta $50,x			sta 	esInt0,x
.2f13	18		clc				clc 								; add alloc required.
.2f14	75 51		adc $51,x			adc 	esInt0+1,x
.2f16	85 35		sta $35				sta 	lowMemory
.2f18	a5 36		lda $36				lda 	lowMemory+1
.2f1a	75 59		adc $59,x			adc 	esInt1+1,x
.2f1c	85 36		sta $36				sta 	lowMemory+1
.2f1e	b0 05		bcs $2f25			bcs		_UABadValue 				; overflow definitely bad.
.2f20	c5 34		cmp $34				cmp 	highMemory+1
.2f22	b0 01		bcs $2f25			bcs 	_UABadValue 				; out of memory bad.
.2f24	60		rts				rts
.2f25					_UABadValue:
.2f25	a2 22		ldx #$22			ldx 	#ErrorID_Memory
.2f27	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary/unary2.asm

.2f2a					UnaryTimer:
.2f2a	20 80 33	jsr $3380			jsr 	CheckRightParen 			; no parameters
.2f2d	98		tya				tya
.2f2e	48		pha				pha
.2f2f	20 34 33	jsr $3334			jsr 	MInt32Zero 					; zero result
.2f32	86 2a		stx $2a				stx 	temp0 						; returning in YA so can't use .pshx
.2f34	a2 1c		ldx #$1c		ldx	#28
.2f36	20 f6 14	jsr $14f6		jsr	deviceHandler
.2f39	a6 2a		ldx $2a				ldx 	temp0						; restore X and update 16 bit result
.2f3b	95 50		sta $50,x			sta 	esInt0,x
.2f3d	98		tya				tya
.2f3e	95 58		sta $58,x			sta 	esInt1,x
.2f40	68		pla				pla
.2f41	a8		tay				tay
.2f42	60		rts				rts
.2f43					UnaryInkey:
.2f43	20 80 33	jsr $3380			jsr 	CheckRightParen
.2f46	86 2a		stx $2a				stx 	temp0
.2f48	a2 0a		ldx #$0a		ldx	#10
.2f4a	20 f6 14	jsr $14f6		jsr	deviceHandler
.2f4d	a6 2a		ldx $2a				ldx 	temp0
.2f4f	20 1c 33	jsr $331c			jsr 	MInt32Set8Bit
.2f52	60		rts				rts
.2f53					UnaryGet:
.2f53	20 80 33	jsr $3380			jsr 	CheckRightParen
.2f56	86 2a		stx $2a				stx 	temp0
.2f58					_UGLoop:
.2f58	a2 02		ldx #$02		ldx	#2
.2f5a	20 f6 14	jsr $14f6		jsr	deviceHandler
.2f5d	a2 0a		ldx #$0a		ldx	#10
.2f5f	20 f6 14	jsr $14f6		jsr	deviceHandler
.2f62	c9 00		cmp #$00			cmp 	#0
.2f64	f0 f2		beq $2f58			beq 	_UGLoop
.2f66	a6 2a		ldx $2a				ldx 	temp0
.2f68	20 1c 33	jsr $331c			jsr 	MInt32Set8Bit
.2f6b	60		rts				rts
.2f6c					UnaryGetString:
.2f6c	20 53 2f	jsr $2f53			jsr 	UnaryGet
.2f6f					UGSDoChr:
.2f6f	4c c0 2f	jmp $2fc0			jmp 	ChrCode
.2f72					UnaryInkeyString:
.2f72	20 43 2f	jsr $2f43			jsr 	UnaryInkey
.2f75	b5 50		lda $50,x			lda 	esInt0,x
.2f77	d0 f6		bne $2f6f			bne 	UGSDoChr
.2f79	8a		txa				txa
.2f7a	a2 08		ldx #$08		ldx	#8
.2f7c	20 b8 36	jsr $36b8		jsr	stringHandler
.2f7f	aa		tax				tax
.2f80	60		rts				rts
.2f81					UnarySys:
.2f81	20 75 2c	jsr $2c75			jsr 	EvaluateInteger 				; get the address
.2f84	20 80 33	jsr $3380			jsr 	CheckRightParen
.2f87	20 67 20	jsr $2067			jsr 	TOSToTemp0 						; copy call address to temp0
.2f8a	8a		txa				txa
.2f8b	48		pha				pha
.2f8c	98		tya				tya
.2f8d	48		pha				pha
.2f8e	ad 00 0a	lda $0a00			lda 	("A"-"A")*4+SingleLetterVar 	; load AXY
.2f91	ae 5c 0a	ldx $0a5c			ldx 	("X"-"A")*4+SingleLetterVar
.2f94	ac 60 0a	ldy $0a60			ldy 	("Y"-"A")*4+SingleLetterVar
.2f97	20 a6 2f	jsr $2fa6			jsr 	_CallTemp0
.2f9a	85 32		sta $32				sta 	tempShort 						; restore YX
.2f9c	68		pla				pla
.2f9d	a8		tay				tay
.2f9e	68		pla				pla
.2f9f	aa		tax				tax
.2fa0	a5 32		lda $32				lda 	tempShort
.2fa2	20 1c 33	jsr $331c			jsr 	MInt32Set8Bit 					; return result.
.2fa5	60		rts				rts
.2fa6					_CallTemp0:
.2fa6	6c 2a 00	jmp ($002a)			jmp 	(temp0)
.2fa9					UnaryMem:
.2fa9	20 0d 33	jsr $330d			jsr 	MInt32False 					; set to false (e.g. 0)
.2fac	38		sec				sec
.2fad	a5 33		lda $33				lda 	highMemory 						; calculate value
.2faf	e5 35		sbc $35				sbc 	lowMemory
.2fb1	95 50		sta $50,x			sta 	esInt0,x
.2fb3	a5 34		lda $34				lda 	highMemory+1
.2fb5	e5 36		sbc $36				sbc 	lowMemory+1
.2fb7	95 58		sta $58,x			sta 	esInt1,x
.2fb9	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary/unarystr.asm

.2fba					ExecChr:
.2fba	20 7d 2c	jsr $2c7d			jsr 	EvaluateSmallInteger		; character number 0-255
.2fbd	20 80 33	jsr $3380			jsr 	CheckRightParen				; right bracket
.2fc0					ChrCode:
.2fc0	98		tya				tya
.2fc1	48		pha				pha
.2fc2	8a		txa				txa 								; A = stack
.2fc3	b4 50		ldy $50,x			ldy 	esInt0,x					; Y = character
.2fc5	a2 02		ldx #$02		ldx	#2
.2fc7	20 b8 36	jsr $36b8		jsr	stringHandler
.2fca	aa		tax				tax 								; X = stack
.2fcb	68		pla				pla
.2fcc	a8		tay				tay
.2fcd	60		rts				rts
.2fce					ExecLower:
.2fce	38		sec				sec 								; set carry is lower
.2fcf	b0 01		bcs $2fd2			bcs 	ExecUpperLower
.2fd1					ExecUpper:
.2fd1	18		clc				clc 								; clear carry is upper
.2fd2					ExecUpperLower:
.2fd2	08		php				php 								; save carry
.2fd3	20 6a 2c	jsr $2c6a			jsr 	EvaluateString 				; string to stack,X
.2fd6	20 80 33	jsr $3380			jsr 	CheckRightParen 			; check closing right bracket.
.2fd9	28		plp				plp 								; restore carry, save Y
.2fda	98		tya				tya
.2fdb	48		pha				pha
.2fdc	a9 00		lda #$00			lda 	#0 							; A zero if upper, 1 if lower.
.2fde	2a		rol a				rol 	a
.2fdf	a8		tay				tay 								; now in Y
.2fe0	8a		txa				txa 								; do the substring and exit.
.2fe1	a2 0c		ldx #$0c		ldx	#12
.2fe3	20 b8 36	jsr $36b8		jsr	stringHandler
.2fe6	aa		tax				tax
.2fe7	68		pla				pla
.2fe8	a8		tay				tay
.2fe9	60		rts				rts
.2fea					ExecLeft:
.2fea	20 6a 2c	jsr $2c6a			jsr 	EvaluateString 				; string to stack,X
.2fed	20 8d 33	jsr $338d			jsr 	CheckComma
.2ff0	e8		inx				inx
.2ff1	a9 01		lda #$01			lda 	#1 							; 1 for 2nd parameter.
.2ff3	20 1c 33	jsr $331c			jsr 	MInt32Set8Bit
.2ff6	e8		inx				inx
.2ff7	20 7d 2c	jsr $2c7d			jsr 	EvaluateSmallInteger 		; smallint 3rd parameter
.2ffa					ExecSubstring:
.2ffa	ca		dex				dex 								; fix up X
.2ffb	ca		dex				dex
.2ffc	20 80 33	jsr $3380			jsr 	CheckRightParen 			; check closing right bracket.
.2fff	8a		txa				txa 								; do the substring and exit.
.3000	a2 0e		ldx #$0e		ldx	#14
.3002	20 b8 36	jsr $36b8		jsr	stringHandler
.3005	aa		tax				tax
.3006	60		rts				rts
.3007					ExecMid:
.3007	20 6a 2c	jsr $2c6a			jsr 	EvaluateString 				; string to stack,X
.300a	20 8d 33	jsr $338d			jsr 	CheckComma
.300d	e8		inx				inx
.300e	20 7d 2c	jsr $2c7d			jsr 	EvaluateSmallInteger 		; smallint 2nd parameter
.3011	c9 00		cmp #$00			cmp 	#0
.3013	f0 15		beq $302a			beq 	_EMValue
.3015	e8		inx				inx
.3016	a9 ff		lda #$ff			lda 	#255 						; 255 default for 3nd parameter - this is optional.
.3018	20 1c 33	jsr $331c			jsr 	MInt32Set8Bit
.301b	b1 28		lda ($28),y			lda 	(codePtr),y 				; is there a ) next
.301d	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN 				; if so, just MID$(a$,2)
.301f	f0 d9		beq $2ffa			beq 	ExecSubString
.3021	20 8d 33	jsr $338d			jsr 	CheckComma
.3024	20 7d 2c	jsr $2c7d			jsr 	EvaluateSmallInteger 		; smallint 2nd parameter
.3027	4c fa 2f	jmp $2ffa			jmp 	ExecSubString
.302a					_EMValue:
.302a	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.302c	20 18 15	jsr $1518		jsr	errorHandler
.302f					ExecRight:
.302f	20 6a 2c	jsr $2c6a			jsr 	EvaluateString 				; string to stack,X
.3032	20 8d 33	jsr $338d			jsr 	CheckComma
.3035	e8		inx				inx
.3036	20 7d 2c	jsr $2c7d			jsr 	EvaluateSmallInteger 		; smallint 2nd parameter.
.3039	ca		dex				dex
.303a	98		tya				tya
.303b	48		pha				pha
.303c	b5 50		lda $50,x			lda 	esInt0,x 					; copy address of string to temp0
.303e	85 2a		sta $2a				sta 	temp0
.3040	b5 58		lda $58,x			lda 	esInt1,x
.3042	85 2b		sta $2b				sta 	temp0+1
.3044	a0 00		ldy #$00			ldy 	#0 							; point to length
.3046	b1 2a		lda ($2a),y			lda 	(temp0),y 					; get the length.
.3048	18		clc				clc 								; add 1.
.3049	69 01		adc #$01			adc 	#1
.304b	38		sec				sec
.304c	f5 51		sbc $51,x			sbc 	esInt0+1,x  				; subtract right count.
.304e	f0 02		beq $3052			beq		_ERMake1 					; if zero, make it 1.
.3050	b0 02		bcs $3054			bcs		_EROkay
.3052					_ERMake1:
.3052	a9 01		lda #$01			lda 	#1 							; start position.
.3054					_EROkay:
.3054	e8		inx				inx 								; set start pos.
.3055	95 50		sta $50,x			sta 	esInt0,x
.3057	e8		inx				inx
.3058	a9 ff		lda #$ff			lda 	#255 						; 255 default for 3nd parameter.
.305a	20 1c 33	jsr $331c			jsr 	MInt32Set8Bit
.305d	68		pla				pla
.305e	a8		tay				tay
.305f	4c fa 2f	jmp $2ffa			jmp 	ExecSubString 				; do the substring code.

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32binary.asm

.3062					MInt32And:
.3062	b5 50		lda $50,x			lda 	esInt0,x
.3064	35 51		and $51,x			and 	esInt0+1,x
.3066	95 50		sta $50,x			sta 	esInt0,x
.3068	b5 58		lda $58,x			lda 	esInt1,x
.306a	35 59		and $59,x			and 	esInt1+1,x
.306c	95 58		sta $58,x			sta 	esInt1,x
.306e	b5 60		lda $60,x			lda 	esInt2,x
.3070	35 61		and $61,x			and 	esInt2+1,x
.3072	95 60		sta $60,x			sta 	esInt2,x
.3074	b5 68		lda $68,x			lda 	esInt3,x
.3076	35 69		and $69,x			and 	esInt3+1,x
.3078	95 68		sta $68,x			sta 	esInt3,x
.307a	60		rts				rts
.307b					MInt32Or:
.307b	b5 50		lda $50,x			lda 	esInt0,x
.307d	15 51		ora $51,x			ora 	esInt0+1,x
.307f	95 50		sta $50,x			sta 	esInt0,x
.3081	b5 58		lda $58,x			lda 	esInt1,x
.3083	15 59		ora $59,x			ora 	esInt1+1,x
.3085	95 58		sta $58,x			sta 	esInt1,x
.3087	b5 60		lda $60,x			lda 	esInt2,x
.3089	15 61		ora $61,x			ora 	esInt2+1,x
.308b	95 60		sta $60,x			sta 	esInt2,x
.308d	b5 68		lda $68,x			lda 	esInt3,x
.308f	15 69		ora $69,x			ora 	esInt3+1,x
.3091	95 68		sta $68,x			sta 	esInt3,x
.3093	60		rts				rts
.3094					MInt32Xor:
.3094	b5 50		lda $50,x			lda 	esInt0,x
.3096	55 51		eor $51,x			eor 	esInt0+1,x
.3098	95 50		sta $50,x			sta 	esInt0,x
.309a	b5 58		lda $58,x			lda 	esInt1,x
.309c	55 59		eor $59,x			eor 	esInt1+1,x
.309e	95 58		sta $58,x			sta 	esInt1,x
.30a0	b5 60		lda $60,x			lda 	esInt2,x
.30a2	55 61		eor $61,x			eor 	esInt2+1,x
.30a4	95 60		sta $60,x			sta 	esInt2,x
.30a6	b5 68		lda $68,x			lda 	esInt3,x
.30a8	55 69		eor $69,x			eor 	esInt3+1,x
.30aa	95 68		sta $68,x			sta 	esInt3,x
.30ac	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32compare.asm

.30ad					MInt32Compare:
.30ad	b5 50		lda $50,x			lda 	esInt0,x 					; equality check first.
.30af	d5 51		cmp $51,x			cmp 	esInt0+1,x
.30b1	d0 13		bne $30c6			bne 	MInt32Compare2
.30b3	b5 58		lda $58,x			lda 	esInt1,x
.30b5	d5 59		cmp $59,x			cmp 	esInt1+1,x
.30b7	d0 0d		bne $30c6			bne 	MInt32Compare2
.30b9	b5 60		lda $60,x			lda 	esInt2,x
.30bb	d5 61		cmp $61,x			cmp 	esInt2+1,x
.30bd	d0 07		bne $30c6			bne 	MInt32Compare2
.30bf	b5 68		lda $68,x			lda 	esInt3,x
.30c1	55 69		eor $69,x			eor 	esInt3+1,x 					; EOR will return 0 if the same.
.30c3	d0 01		bne $30c6			bne 	MInt32Compare2
.30c5	60		rts				rts
.30c6					MInt32Compare2:
.30c6	b5 50		lda $50,x			lda		esInt0,x 					; unsigned 32 bit comparison.
.30c8	d5 51		cmp $51,x			cmp 	esInt0+1,x
.30ca	b5 58		lda $58,x			lda		esInt1,x
.30cc	f5 59		sbc $59,x			sbc 	esInt1+1,x
.30ce	b5 60		lda $60,x			lda		esInt2,x
.30d0	f5 61		sbc $61,x			sbc 	esInt2+1,x
.30d2	b5 68		lda $68,x			lda		esInt3,x
.30d4	f5 69		sbc $69,x			sbc 	esInt3+1,x
.30d6	50 02		bvc $30da			bvc 	_I32LNoOverflow 			; make it signed 32 bit comparison
.30d8	49 80		eor #$80			eor 	#$80
.30da					_I32LNoOverflow
.30da	30 03		bmi $30df			bmi 	MInt32CLess					; if -ve then return $FF
.30dc	a9 01		lda #$01			lda 	#$01						; else return $01
.30de	60		rts				rts
.30df					MInt32CLess:
.30df	a9 ff		lda #$ff			lda 	#$FF
.30e1	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32divide.asm

.30e2					MInt32SDivide:
.30e2	98		tya				tya  								; save Y, which is the count of negations
.30e3	48		pha				pha
.30e4	a0 00		ldy #$00			ldy 	#0 							; zero count
.30e6	20 fe 30	jsr $30fe			jsr 	_MInt32SRemSign 			; unsign TOS
.30e9	e8		inx				inx 								; unsign TOS+1
.30ea	20 fe 30	jsr $30fe			jsr 	_MInt32SRemSign
.30ed	ca		dex				dex
.30ee	98		tya				tya 								; save sign count on stack
.30ef	48		pha				pha
.30f0	20 07 31	jsr $3107			jsr 	MInt32UDivide 				; unsigned division
.30f3	68		pla				pla 								; get sign count back
.30f4	29 01		and #$01			and 	#1 							; if it is odd, then negate result
.30f6	f0 03		beq $30fb			beq 	_I32SNoNeg
.30f8	20 c7 32	jsr $32c7			jsr 	MInt32Negate
.30fb					_I32SNoNeg:
.30fb	68		pla				pla 								; restoe Y and exit
.30fc	a8		tay				tay
.30fd	60		rts				rts
.30fe					_MInt32SRemSign:
.30fe	b5 68		lda $68,x			lda 	esInt3,x 					; is it -ve
.3100	10 04		bpl $3106			bpl 	_MInt32SRSExit
.3102	c8		iny				iny 								; increment the sign count
.3103	20 c7 32	jsr $32c7			jsr 	MInt32Negate 				; negate the value.
.3106					_MInt32SRSExit:
.3106	60		rts				rts
.3107					MInt32UDivide:
.3107	b5 51		lda $51,x			lda 	esInt0+1,x 					; check for division by zero
.3109	15 59		ora $59,x			ora 	esInt1+1,x
.310b	15 5a		ora $5a,x			ora 	esInt1+2,x
.310d	15 5b		ora $5b,x			ora 	esInt1+3,x
.310f	f0 4a		beq $315b			beq 	_MInt32DZero
.3111	e8		inx				inx 								; clear A
.3112	e8		inx				inx
.3113	20 0d 33	jsr $330d			jsr 	MInt32False
.3116	ca		dex				dex
.3117	ca		dex				dex
.3118	98		tya				tya 								; save Y on the stack
.3119	48		pha				pha
.311a	a0 20		ldy #$20			ldy 	#32 						; number of division passes
.311c					_MInt32UDLoop:
.311c	16 50		asl $50,x			asl 	esInt0,x					; shift QA left. First Q
.311e	36 58		rol $58,x			rol 	esInt1,x
.3120	36 60		rol $60,x			rol 	esInt2,x
.3122	36 68		rol $68,x			rol 	esInt3,x
.3124	36 52		rol $52,x			rol 	esInt0+2,x 					; then A.
.3126	36 5a		rol $5a,x			rol 	esInt1+2,x
.3128	36 62		rol $62,x			rol 	esInt2+2,x
.312a	36 6a		rol $6a,x			rol 	esInt3+2,x
.312c	38		sec				sec 								; calculate A-M saving result on the stack
.312d	b5 52		lda $52,x			lda 	esInt0+2,x
.312f	f5 51		sbc $51,x			sbc 	esInt0+1,x
.3131	48		pha				pha
.3132	b5 5a		lda $5a,x			lda 	esInt1+2,x
.3134	f5 59		sbc $59,x			sbc 	esInt1+1,x
.3136	48		pha				pha
.3137	b5 62		lda $62,x			lda 	esInt2+2,x
.3139	f5 61		sbc $61,x			sbc 	esInt2+1,x
.313b	48		pha				pha
.313c	b5 6a		lda $6a,x			lda 	esInt3+2,x
.313e	f5 69		sbc $69,x			sbc 	esInt3+1,x
.3140	90 10		bcc $3152			bcc		_MInt32NoSubtract 			; if A < M (e.g. carry clear) then reject this.
.3142	95 6a		sta $6a,x			sta 	esInt3+2,x 					; write result back to A
.3144	68		pla				pla
.3145	95 62		sta $62,x			sta 	esInt2+2,x
.3147	68		pla				pla
.3148	95 5a		sta $5a,x			sta 	esInt1+2,x
.314a	68		pla				pla
.314b	95 52		sta $52,x			sta 	esInt0+2,x
.314d	f6 50		inc $50,x			inc 	esInt0,x 					; sets bit 0 of Q - it was shifted left previously.
.314f	4c 55 31	jmp $3155			jmp 	_MInt32Next 					; do the next iteration
.3152					_MInt32NoSubtract:
.3152	68		pla				pla
.3153	68		pla				pla
.3154	68		pla				pla
.3155					_MInt32Next:
.3155	88		dey				dey 								; do this 32 times.
.3156	d0 c4		bne $311c			bne 	_MInt32UDLoop
.3158	68		pla				pla 								; restore Y and exit
.3159	a8		tay				tay
.315a	60		rts				rts
.315b					_MInt32DZero:
.315b	a2 05		ldx #$05			ldx 	#ErrorID_DivZero
.315d	20 18 15	jsr $1518		jsr	errorHandler
.3160					MInt32Modulus:
.3160	20 07 31	jsr $3107			jsr 	MInt32UDivide 				; do the division.
.3163	b5 6a		lda $6a,x			lda 	esInt3+2,x 					; copy 2nd on stack (the remainder) to the top.
.3165	95 68		sta $68,x			sta 	esInt3,x
.3167	b5 62		lda $62,x			lda 	esInt2+2,x
.3169	95 60		sta $60,x			sta 	esInt2,x
.316b	b5 5a		lda $5a,x			lda 	esInt1+2,x
.316d	95 58		sta $58,x			sta 	esInt1,x
.316f	b5 52		lda $52,x			lda 	esInt0+2,x
.3171	95 50		sta $50,x			sta 	esInt0,x
.3173	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32fromstr.asm

.0cda					fs32Length:
>0cda							.fill 	1
.3174					LinkInt32FromString:
.3174	aa		tax				tax
.3175	98		tya				tya
.3176	20 7b 31	jsr $317b			jsr 	MInt32FromString
.3179	8a		txa				txa
.317a	60		rts				rts
.317b					MInt32FromString:
.317b	85 32		sta $32				sta 	tempShort 					; save base
.317d	98		tya				tya
.317e	48		pha				pha
.317f	a0 00		ldy #$00			ldy 	#0 							; get length of string to convert
.3181	b1 2a		lda ($2a),y			lda 	(temp0),y
.3183	8d da 0c	sta $0cda			sta 	fs32Length
.3186	f0 65		beq $31ed			beq 	_I32FSFail2					; fail if length zero.
.3188	a0 01		ldy #$01			ldy 	#1 							; set index into string being read
.318a	b1 2a		lda ($2a),y			lda 	(temp0),y 					; look at first character
.318c	c9 2d		cmp #$2d			cmp 	#"-"						; is it a - character
.318e	d0 09		bne $3199			bne 	_I32FSNotNegative
.3190	ad da 0c	lda $0cda			lda 	fs32Length 					; get length back.
.3193	c9 01		cmp #$01			cmp 	#1 							; if 1 it is just a - on its own so fail.
.3195	f0 56		beq $31ed			beq 	_I32FSFail2
.3197	a0 02		ldy #$02			ldy 	#2 							; first digit of the number.
.3199					_I32FSNotNegative:
.3199	a5 32		lda $32				lda 	tempShort 					; get the base back.
.319b	c0 02		cpy #$02			cpy 	#2 							; if we read a -ve (e.g. Y == 2)
.319d	d0 02		bne $31a1			bne 	_I32FSNN2
.319f	09 80		ora #$80			ora 	#$80						; set bit 7, this indicates a negated result.
.31a1					_I32FSNN2:
.31a1	48		pha				pha 								; save base + final sign on stack.
.31a2	20 0d 33	jsr $330d			jsr 	MInt32False 				; zero the return value.
.31a5					_I32FSMainLoop:
.31a5	68		pla				pla 								; get the base back into tempShort
.31a6	48		pha				pha
.31a7	29 7f		and #$7f			and 	#$7F
.31a9	85 32		sta $32				sta 	tempShort
.31ab	b1 2a		lda ($2a),y			lda 	(temp0),y 					; look at next character.
.31ad	c9 61		cmp #$61			cmp 	#"a" 						; fix up case.
.31af	90 02		bcc $31b3			bcc 	_I32FSNotLC
.31b1	e9 20		sbc #$20			sbc 	#32
.31b3					_I32FSNotLC:
.31b3	38		sec				sec 								; subtract 48 (ASCII "0") - ASCII to Hex conversion
.31b4	e9 30		sbc #$30			sbc 	#"0"
.31b6	90 34		bcc $31ec			bcc 	_I32FSFail 					; nothing more to do.
.31b8	c9 0a		cmp #$0a			cmp 	#9+1 						; if it is 0-9 validate vs base.
.31ba	90 06		bcc $31c2			bcc 	_I32FSValidate
.31bc	c9 11		cmp #$11			cmp 	#17 						; is it between 58 and 64 ? if so bad.
.31be	90 2c		bcc $31ec			bcc 	_I32FSFail
.31c0	e9 07		sbc #$07			sbc 	#7 							; adjust into range so now character is 0->nnn
.31c2					_I32FSValidate:
.31c2	c5 32		cmp $32				cmp 	tempShort 					; compare against the base.
.31c4	b0 26		bcs $31ec			bcs 	_I32FSFail 					; sorry, too large for this base, so fail.
.31c6	48		pha				pha 								; save the new digit value.
.31c7	e8		inx				inx 								; put base into next slot up on stack
.31c8	a5 32		lda $32				lda 	tempShort
.31ca	20 1c 33	jsr $331c			jsr 	MInt32Set8Bit
.31cd	ca		dex				dex
.31ce	20 25 32	jsr $3225			jsr 	MInt32Multiply 				; multiply current by the base
.31d1	e8		inx				inx
.31d2	68		pla				pla  								; put additive into next slot
.31d3	20 1c 33	jsr $331c			jsr 	MInt32Set8Bit
.31d6	ca		dex				dex
.31d7	20 f1 31	jsr $31f1			jsr 	MInt32Add 					; and add it
.31da	c8		iny				iny 								; bump the character pointer
.31db	cc da 0c	cpy $0cda			cpy 	fs32Length 					; until > length.
.31de	f0 c5		beq $31a5			beq 	_I32FSMainLoop
.31e0	90 c3		bcc $31a5			bcc 	_I32FSMainLoop
.31e2					_I32FSDone:
.31e2	68		pla				pla 								; get base/final sign back
.31e3	10 03		bpl $31e8			bpl 	_I32FSNN3
.31e5	20 c7 32	jsr $32c7			jsr 	MInt32Negate 				; negate the result.
.31e8					_I32FSNN3:
.31e8	68		pla				pla
.31e9	a8		tay				tay
.31ea	38		sec				sec
.31eb	60		rts				rts
.31ec					_I32FSFail:
.31ec	68		pla				pla
.31ed					_I32FSFail2:
.31ed	68		pla				pla
.31ee	a8		tay				tay
.31ef	18		clc				clc
.31f0	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32math.asm

.31f1					MInt32Add:
.31f1	18		clc				clc
.31f2	b5 50		lda $50,x			lda 	esInt0,x
.31f4	75 51		adc $51,x			adc 	esInt0+1,x
.31f6	95 50		sta $50,x			sta 	esInt0,x
.31f8	b5 58		lda $58,x			lda 	esInt1,x
.31fa	75 59		adc $59,x			adc 	esInt1+1,x
.31fc	95 58		sta $58,x			sta 	esInt1,x
.31fe	b5 60		lda $60,x			lda 	esInt2,x
.3200	75 61		adc $61,x			adc 	esInt2+1,x
.3202	95 60		sta $60,x			sta 	esInt2,x
.3204	b5 68		lda $68,x			lda 	esInt3,x
.3206	75 69		adc $69,x			adc 	esInt3+1,x
.3208	95 68		sta $68,x			sta 	esInt3,x
.320a	60		rts				rts
.320b					MInt32Sub:
.320b	38		sec				sec
.320c	b5 50		lda $50,x			lda 	esInt0,x
.320e	f5 51		sbc $51,x			sbc 	esInt0+1,x
.3210	95 50		sta $50,x			sta 	esInt0,x
.3212	b5 58		lda $58,x			lda 	esInt1,x
.3214	f5 59		sbc $59,x			sbc 	esInt1+1,x
.3216	95 58		sta $58,x			sta 	esInt1,x
.3218	b5 60		lda $60,x			lda 	esInt2,x
.321a	f5 61		sbc $61,x			sbc 	esInt2+1,x
.321c	95 60		sta $60,x			sta 	esInt2,x
.321e	b5 68		lda $68,x			lda 	esInt3,x
.3220	f5 69		sbc $69,x			sbc 	esInt3+1,x
.3222	95 68		sta $68,x			sta 	esInt3,x
.3224	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32multiply.asm

.3225					MInt32Multiply:
.3225	e8		inx				inx 								; copy 2nd -> 3rd
.3226	20 4b 32	jsr $324b			jsr 	MInt32CopyUp
.3229	ca		dex				dex
.322a	20 4b 32	jsr $324b			jsr 	MInt32CopyUp 				; copy 1st -> 2nd
.322d	20 0d 33	jsr $330d			jsr 	MInt32False 				; zero 1st.
.3230					_I32Loop:
.3230	b5 52		lda $52,x			lda 	esInt0+2,x 					; get low bit of 3rd
.3232	29 01		and #$01			and 	#1
.3234	f0 03		beq $3239			beq 	_I32NoAdd 					; if set
.3236	20 f1 31	jsr $31f1			jsr 	MInt32Add 					; add 2nd to 1st.
.3239					_I32NoAdd:
.3239	e8		inx				inx 								; shift 2nd left
.323a	20 22 33	jsr $3322			jsr 	MInt32ShiftLeft
.323d	e8		inx				inx  								; shift 3rd right
.323e	20 2b 33	jsr $332b			jsr 	MInt32ShiftRight
.3241	20 34 33	jsr $3334			jsr 	MInt32Zero 					; check if zero.
.3244	08		php				php 								; save status bits
.3245	ca		dex				dex 	 							; point back to 1st
.3246	ca		dex				dex
.3247	28		plp				plp 								; get status bits
.3248	d0 e6		bne $3230			bne 	_I32Loop 					; if non-zero keep going.
.324a	60		rts				rts
.324b					MInt32CopyUp:
.324b	b5 50		lda $50,x			lda 	esInt0,x
.324d	95 51		sta $51,x			sta 	esInt0+1,x
.324f	b5 58		lda $58,x			lda 	esInt1,x
.3251	95 59		sta $59,x			sta 	esInt1+1,x
.3253	b5 60		lda $60,x			lda 	esInt2,x
.3255	95 61		sta $61,x			sta 	esInt2+1,x
.3257	b5 68		lda $68,x			lda 	esInt3,x
.3259	95 69		sta $69,x			sta 	esInt3+1,x
.325b	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32tostr.asm

>0cdb					MCharCount:	.fill 	1						; count of converted characters
.325c					MLInt32ToString:
.325c	aa		tax				tax									; module passes stack in A, base in Y
.325d	98		tya				tya
.325e	20 63 32	jsr $3263			jsr 	MInt32ToString
.3261	8a		txa				txa
.3262	60		rts				rts
.3263					MInt32ToString:
.3263	48		pha				pha 								; save base
.3264	85 32		sta $32				sta 	tempShort 					; save target base.
.3266	a9 00		lda #$00			lda 	#0
.3268	8d db 0c	sta $0cdb			sta 	MCharCount 					; clear character count to 0
.326b	98		tya				tya
.326c	48		pha				pha
.326d	a5 32		lda $32				lda 	tempShort 					; check if we are signed conversion
.326f	10 10		bpl $3281			bpl 	_I32TSUnsigned
.3271	48		pha				pha 								; save base on stack.
.3272	b5 68		lda $68,x			lda 	esInt3,x 					; is it actually negative
.3274	10 08		bpl $327e			bpl 	_I32TSNoFlip
.3276	a9 2d		lda #$2d			lda 	#"-" 						; write a '-' prefix out.
.3278	20 b4 32	jsr $32b4			jsr 	MI32WriteCharacter
.327b	20 c7 32	jsr $32c7			jsr 	MInt32Negate 				; negate the value, so now it's positive.
.327e					_I32TSNoFlip:
.327e	68		pla				pla 								; get the base back
.327f	29 7f		and #$7f			and 	#$7F 						; clear the sign flag so it's just a base now.
.3281					_I32TSUnsigned:
.3281	20 8f 32	jsr $328f			jsr 	MI32DivideWrite 			; recursive code to output string.
.3284	a0 00		ldy #$00			ldy 	#0 							; write charcount to first character.
.3286	ad db 0c	lda $0cdb			lda 	MCharCount
.3289	91 2a		sta ($2a),y			sta 	(temp0),y
.328b	68		pla				pla
.328c	a8		tay				tay
.328d	68		pla				pla
.328e	60		rts				rts
.328f					MI32DivideWrite:
.328f	48		pha				pha 								; save the divisor/base
.3290	e8		inx				inx 								; write in the dividing position.
.3291	20 1c 33	jsr $331c			jsr 	MInt32Set8Bit
.3294	ca		dex				dex
.3295	20 07 31	jsr $3107			jsr 	MInt32UDivide 				; divide number by base.
.3298	68		pla				pla 								; get the base into Y
.3299	a8		tay				tay
.329a	b5 52		lda $52,x			lda 	esInt0+2,x 					; get the remainder and push on the stack.
.329c	48		pha				pha
.329d	20 34 33	jsr $3334			jsr 	MInt32Zero 					; is the result zero ?
.32a0	f0 04		beq $32a6			beq 	_I32NoRecurse 				; if so, don't recurse.
.32a2	98		tya				tya 								; put base into A
.32a3	20 8f 32	jsr $328f			jsr 	MI32DivideWrite 				; and jsr the dividor recursively.
.32a6					_I32NoRecurse:
.32a6	68		pla				pla 								; get the remainder back
.32a7	c9 0a		cmp #$0a			cmp 	#10  						; handle hexadecimals, now converting to ASCII
.32a9	90 02		bcc $32ad			bcc 	_I32NotHex
.32ab	69 06		adc #$06			adc 	#7-1
.32ad					_I32NotHex:
.32ad	18		clc				clc 								; make it ASCII
.32ae	69 30		adc #$30			adc 	#48
.32b0	20 b4 32	jsr $32b4			jsr 	MI32WriteCharacter 			; write the character out
.32b3	60		rts				rts 								; and exit.
.32b4					MI32WriteCharacter:
.32b4	ee db 0c	inc $0cdb			inc 	MCharCount 					; bump count (space for leading count)
.32b7	ac db 0c	ldy $0cdb			ldy 	MCharCount 					; get position
.32ba	91 2a		sta ($2a),y			sta 	(temp0),y 					; write out with trailing 0
.32bc	c8		iny				iny
.32bd	a9 00		lda #$00			lda 	#0
.32bf	91 2a		sta ($2a),y			sta 	(temp0),y
.32c1	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32unary.asm

>0cdc					MSeed32:	.fill 	4							; random number seed.
.32c2					MInt32Absolute:
.32c2	b5 68		lda $68,x			lda 	esInt3,x 					; use negate code if -ve.
.32c4	30 01		bmi $32c7			bmi 	MInt32Negate
.32c6	60		rts				rts
.32c7					MInt32Negate:
.32c7	38		sec				sec 								; subtract from zero.
.32c8	a9 00		lda #$00			lda 	#0
.32ca	f5 50		sbc $50,x			sbc 	esInt0,x
.32cc	95 50		sta $50,x			sta 	esInt0,x
.32ce	a9 00		lda #$00			lda 	#0
.32d0	f5 58		sbc $58,x			sbc 	esInt1,x
.32d2	95 58		sta $58,x			sta 	esInt1,x
.32d4	a9 00		lda #$00			lda 	#0
.32d6	f5 60		sbc $60,x			sbc 	esInt2,x
.32d8	95 60		sta $60,x			sta 	esInt2,x
.32da	a9 00		lda #$00			lda 	#0
.32dc	f5 68		sbc $68,x			sbc 	esInt3,x
.32de	95 68		sta $68,x			sta 	esInt3,x
.32e0	60		rts				rts
.32e1					MInt32Not:
.32e1	b5 50		lda $50,x			lda 	esInt0,x 					; one's complement all four.
.32e3	49 ff		eor #$ff			eor 	#$FF
.32e5	95 50		sta $50,x			sta 	esInt0,x
.32e7	b5 58		lda $58,x			lda 	esInt1,x
.32e9	49 ff		eor #$ff			eor 	#$FF
.32eb	95 58		sta $58,x			sta 	esInt1,x
.32ed	b5 60		lda $60,x			lda 	esInt2,x
.32ef	49 ff		eor #$ff			eor 	#$FF
.32f1	95 60		sta $60,x			sta 	esInt2,x
.32f3	b5 68		lda $68,x			lda 	esInt3,x
.32f5	49 ff		eor #$ff			eor 	#$FF
.32f7	95 68		sta $68,x			sta 	esInt3,x
.32f9	60		rts				rts
.32fa					MInt32Sign:
.32fa	b5 68		lda $68,x			lda 	esInt3,x					; look at MSB
.32fc	30 0b		bmi $3309			bmi 	MInt32True 					; if set return -1 (true)
.32fe	20 34 33	jsr $3334			jsr 	MInt32Zero 					; is it zero ?
.3301	f0 0a		beq $330d			beq 	MInt32False 				; if zero return 0 (false)
.3303	20 0d 33	jsr $330d			jsr 	MInt32False 				; > 0 return 1, by setting it to zero
.3306	f6 50		inc $50,x			inc 	esInt0,x  					; and bumping the LSB.
.3308	60		rts				rts
.3309					MInt32True:
.3309	a9 ff		lda #$ff			lda 	#$FF 						; set to $FFFFFFFF
.330b	d0 02		bne $330f			bne 	MInt32WriteAll
.330d					MInt32False:
.330d	a9 00		lda #$00			lda 	#0
.330f					MInt32WriteAll:
.330f	95 50		sta $50,x			sta 	esInt0,x
.3311					MInt32Write123:
.3311	95 58		sta $58,x			sta 	esInt1,x
.3313	95 60		sta $60,x			sta 	esInt2,x
.3315	95 68		sta $68,x			sta 	esInt3,x
.3317	a9 00		lda #$00			lda 	#$00						; and make it an integer
.3319	95 48		sta $48,x			sta 	esType,x
.331b	60		rts				rts
.331c					MInt32Set8Bit:
.331c	95 50		sta $50,x			sta 	esInt0,x 					; coopt above function to write
.331e	a9 00		lda #$00			lda 	#0 							; a value 0-255
.3320	f0 ef		beq $3311			beq		MInt32Write123
.3322					MInt32ShiftLeft:
.3322	16 50		asl $50,x			asl 	esInt0,x
.3324	36 58		rol $58,x			rol	 	esInt1,x
.3326	36 60		rol $60,x			rol	 	esInt2,x
.3328	36 68		rol $68,x			rol	 	esInt3,x
.332a	60		rts				rts
.332b					MInt32ShiftRight:
.332b	56 68		lsr $68,x			lsr 	esInt3,x
.332d	76 60		ror $60,x			ror 	esInt2,x
.332f	76 58		ror $58,x			ror 	esInt1,x
.3331	76 50		ror $50,x			ror 	esInt0,x
.3333	60		rts				rts
.3334					MInt32Zero:
.3334	b5 50		lda $50,x			lda 	esInt0,x
.3336	15 58		ora $58,x			ora 	esInt1,x
.3338	15 60		ora $60,x			ora 	esInt2,x
.333a	15 68		ora $68,x			ora 	esInt3,x
.333c	60		rts				rts
.333d					MInt32Random:
.333d	98		tya				tya
.333e	48		pha				pha
.333f	a0 07		ldy #$07			ldy 	#7 							; do it 7 times
.3341	ad dc 0c	lda $0cdc			lda 	MSeed32+0 					; check the seed isn't zero
.3344	d0 03		bne $3349			bne 	_Random1
.3346	a8		tay				tay 								; if so do it 256 times
.3347	a9 aa		lda #$aa			lda		#$AA 						; and use this to seed the seed....
.3349					_Random1:
.3349	0a		asl a				asl 	a
.334a	2e dd 0c	rol $0cdd			rol 	MSeed32+1
.334d	2e de 0c	rol $0cde			rol 	MSeed32+2
.3350	2e df 0c	rol $0cdf			rol 	MSeed32+3
.3353	90 02		bcc $3357			bcc 	_Random2
.3355	49 c5		eor #$c5			eor 	#$C5
.3357					_Random2:
.3357	88		dey				dey
.3358	d0 ef		bne $3349			bne 	_Random1
.335a	8d dc 0c	sta $0cdc			sta 	MSeed32+0 					; copy the seed in.
.335d	95 50		sta $50,x			sta 	esInt0,x
.335f	ad dd 0c	lda $0cdd			lda 	MSeed32+1
.3362	95 58		sta $58,x			sta 	esInt1,x
.3364	ad de 0c	lda $0cde			lda 	MSeed32+2
.3367	95 60		sta $60,x			sta 	esInt2,x
.3369	ad df 0c	lda $0cdf			lda 	MSeed32+3
.336c	95 68		sta $68,x			sta 	esInt3,x
.336e	68		pla				pla
.336f	a8		tay				tay
.3370	a9 00		lda #$00			lda 	#0
.3372	95 48		sta $48,x			sta 	esType,x
.3374	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/utility/check.asm

.3375					CheckToken:
.3375	d1 28		cmp ($28),y			cmp 	(codePtr),y
.3377	d0 02		bne $337b			bne 	_CTError
.3379	c8		iny				iny
.337a	60		rts				rts
.337b					_CTError:
.337b	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.337d	20 18 15	jsr $1518		jsr	errorHandler
.3380					CheckRightParen:
.3380	b1 28		lda ($28),y			lda 	(codePtr),y
.3382	c8		iny				iny
.3383	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.3385	d0 01		bne $3388			bne 	_CRPError
.3387	60		rts				rts
.3388					_CRPError:
.3388	a2 09		ldx #$09			ldx 	#ErrorID_MissingRP
.338a	20 18 15	jsr $1518		jsr	errorHandler
.338d					CheckComma:
.338d	b1 28		lda ($28),y			lda 	(codePtr),y
.338f	c8		iny				iny
.3390	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.3392	d0 01		bne $3395			bne 	_CCError
.3394	60		rts				rts
.3395					_CCError:
.3395	a2 0a		ldx #$0a			ldx 	#ErrorID_MissingComma
.3397	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/utility/stack.asm

.0037					rsPointer:
>0037							.fill 	2							; to TOS, which is the current top-token.
.339a					RSReset:
.339a	a9 ff		lda #$ff			lda 	#(returnStack+retStackSize-1) & $FF
.339c	85 37		sta $37				sta 	rsPointer
.339e	a9 09		lda #$09			lda 	#(returnStack+retStackSize-1) >> 8
.33a0	85 38		sta $38				sta 	1+(rsPointer)
.33a2	a9 ff		lda #$ff			lda 	#$FF 						; put a duff marker on TOS, so nothing will pop
.33a4	8d ff 09	sta $09ff			sta 	returnStack+retStackSize-1
.33a7	60		rts				rts
.33a8					RSClaim:
.33a8	84 32		sty $32				sty 	tempShort 					; preserve Y
.33aa	48		pha				pha 								; save marker on stack.
.33ab	8a		txa				txa 								; get bytes required.
.33ac	38		sec				sec
.33ad	49 ff		eor #$ff			eor 	#$FF 						; add to rsPointer using 2's complement.
.33af	65 37		adc $37				adc 	rsPointer
.33b1	85 37		sta $37				sta 	rsPointer
.33b3	a5 38		lda $38				lda 	rsPointer+1
.33b5	69 ff		adc #$ff			adc 	#$FF
.33b7	85 38		sta $38				sta 	rsPointer+1
.33b9	c9 08		cmp #$08			cmp 	#returnStack>>8 			; overflow. underflow actually :)
.33bb	90 08		bcc $33c5			bcc 	_RSCOverflow
.33bd	68		pla				pla 								; get marker back
.33be	a0 00		ldy #$00			ldy 	#0 							; write marker out.
.33c0	91 37		sta ($37),y			sta 	(rsPointer),y
.33c2	a4 32		ldy $32				ldy 	tempShort 					; restore Y and exit
.33c4	60		rts				rts
.33c5					_RSCOverflow:
.33c5	a2 16		ldx #$16			ldx 	#ErrorID_RetStack
.33c7	20 18 15	jsr $1518		jsr	errorHandler
.33ca					RSFree:
.33ca	18		clc				clc
.33cb	65 37		adc $37				adc 	rsPointer
.33cd	85 37		sta $37				sta 	rsPointer
.33cf	90 02		bcc $33d3			bcc 	_RSFExit
.33d1	e6 38		inc $38				inc 	rsPointer+1
.33d3					_RSFExit:
.33d3	60		rts				rts
.33d4					RSSavePosition:
.33d4	84 32		sty $32				sty 	tempShort 					; save Y position
.33d6	a8		tay				tay 								; this is where we write it.
.33d7	a5 28		lda $28				lda 	codePtr 					; write codePointer out
.33d9	91 37		sta ($37),y			sta 	(rsPointer),y
.33db	c8		iny				iny
.33dc	a5 29		lda $29				lda 	codePtr+1
.33de	91 37		sta ($37),y			sta 	(rsPointer),y
.33e0	c8		iny				iny
.33e1	a5 32		lda $32				lda 	tempShort 					; write the Y position out.
.33e3	91 37		sta ($37),y			sta 	(rsPointer),y
.33e5	a8		tay				tay 								; fix Y back again to original value
.33e6	60		rts				rts
.33e7					RSLoadPosition:
.33e7	a8		tay				tay
.33e8	b1 37		lda ($37),y			lda 	(rsPointer),y 				; read codePointer back
.33ea	85 28		sta $28				sta 	codePtr
.33ec	c8		iny				iny
.33ed	b1 37		lda ($37),y			lda 	(rsPointer),y
.33ef	85 29		sta $29				sta 	codePtr+1
.33f1	c8		iny				iny
.33f2	b1 37		lda ($37),y			lda 	(rsPointer),y 				; and the offset
.33f4	a8		tay				tay 								; to Y
.33f5	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/utility/warmstart.asm

.33f6					WarmStart:
.33f6	a2 04		ldx #$04		ldx	#4
.33f8	20 61 1d	jsr $1d61		jsr	interactionHandler

;******  Return to file: main/main.asm

.33fb					mainHandler:
.33fb	7c fe 33	jmp ($33fe,x)			jmp 	(mainVectors,x)
.33fe					mainVectors:
>33fe	1a 34					.word _DummyControlHandler ; index 0
>3400	8d 33					.word CheckComma           ; index 2
>3402	80 33					.word CheckRightParen      ; index 4
>3404	69 25					.word XCommandClear        ; index 6
>3406	90 2c					.word LinkEvaluate         ; index 8
>3408	9c 2c					.word LinkEvaluateInteger  ; index 10
>340a	a8 2c					.word LinkEvaluateSmallInt ; index 12
>340c	a2 2c					.word LinkEvaluateString   ; index 14
>340e	96 2c					.word LinkEvaluateTerm     ; index 16
>3410	5c 32					.word MLInt32ToString      ; index 18
>3412	f8 26					.word Command_XNew         ; index 20
>3414	06 27					.word XCommand_Run         ; index 22
>3416	12 27					.word Command_RunFrom      ; index 24
>3418	74 31					.word LinkInt32FromString  ; index 26
.341a					_DummyControlHandler:
.341a	60		rts			rts

;******  Return to file: basic.asm

.341b					section_end_main:
.341b					section_start_string:

;******  Processing file: string/string.asm


;******  Processing file: string/functions/chr.asm

.341b					StringChrs:
.341b	aa		tax				tax 								; set up stack
.341c	a9 02		lda #$02			lda 	#2
.341e	20 de 34	jsr $34de			jsr 	AllocateSoftString
.3421	98		tya				tya
.3422	20 04 35	jsr $3504			jsr 	WriteSoftString
.3425					StringUpdate:
.3425	20 33 34	jsr $3433			jsr 	ReturnSoftString
.3428	8a		txa				txa
.3429	60		rts				rts
.342a					StringNull:
.342a	aa		tax				tax
.342b	a9 01		lda #$01			lda 	#1
.342d	20 de 34	jsr $34de			jsr 	AllocateSoftString
.3430	4c 25 34	jmp $3425			jmp 	StringUpdate
.3433					ReturnSoftString:
.3433	a5 39		lda $39				lda 	softMemAlloc 				; copy address
.3435	95 50		sta $50,x			sta 	esInt0,x
.3437	a5 3a		lda $3a				lda 	softMemAlloc+1
.3439	95 58		sta $58,x			sta 	esInt1,x
.343b	a9 00		lda #$00			lda 	#0 							; zero upper bytes
.343d	95 60		sta $60,x			sta 	esInt2,x
.343f	95 68		sta $68,x			sta 	esInt3,x
.3441	a9 40		lda #$40			lda 	#$40 						; type string.
.3443	95 48		sta $48,x			sta 	esType,x
.3445	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/functions/compare.asm

.3446					STRCompare:
.3446	48		pha				pha 								; save A
.3447	aa		tax				tax 								; put stack pos in X
.3448	98		tya				tya
.3449	48		pha				pha
.344a	20 7e 34	jsr $347e			jsr 	CopyStringPair 				; copy strings to temp0,temp1
.344d	a0 00		ldy #$00			ldy 	#0 							; get the smaller of the two string sizes.
.344f	b1 2a		lda ($2a),y			lda 	(temp0),y
.3451	d1 2c		cmp ($2c),y			cmp 	(temp1),y
.3453	90 02		bcc $3457			bcc 	_SCNotSmaller
.3455	b1 2c		lda ($2c),y			lda 	(temp1),y
.3457					_SCNotSmaller:
.3457	aa		tax				tax 								; put that in X. We compare this many chars first.
.3458					_SCCompareLoop:
.3458	e0 00		cpx #$00			cpx 	#0 							; if compared all the smaller, then it is the shorter
.345a	f0 0c		beq $3468			beq 	_SCSameToEndShortest 		; one that is the smallest if they are different lengths.
.345c	ca		dex				dex 								; decrement chars to compare.
.345d	c8		iny				iny 								; move to next character
.345e	38		sec				sec 								; calculate s1[y]-s2[y]
.345f	b1 2a		lda ($2a),y			lda 	(temp0),y
.3461	f1 2c		sbc ($2c),y			sbc 	(temp1),y
.3463	d0 0a		bne $346f			bne 	_SCReturnResult 			; if different return sign of A
.3465	4c 58 34	jmp $3458			jmp 	_SCCompareLoop
.3468					_SCSameToEndShortest
.3468	a0 00		ldy #$00			ldy 	#0 							; compare len(s1) - len(s2)
.346a	38		sec				sec
.346b	b1 2a		lda ($2a),y			lda 	(temp0),y
.346d	f1 2c		sbc ($2c),y			sbc 	(temp1),y
.346f					_SCReturnResult:
.346f	08		php				php 								; set return to zero preserving PSW.
.3470	a2 00		ldx #$00			ldx 	#0
.3472	28		plp				plp
.3473	f0 05		beq $347a			beq 	_SCExit 					; two values equal, then exit
.3475	ca		dex				dex 								; X = $FF
.3476	90 02		bcc $347a			bcc 	_SCExit 					; if 1st < 2nd then -1
.3478	a2 01		ldx #$01			ldx 	#1 							; X = $01 if greater
.347a					_SCExit:
.347a	68		pla				pla
.347b	a8		tay				tay
.347c	68		pla				pla
.347d	60		rts				rts
.347e					CopyStringPair:
.347e	b5 51		lda $51,x			lda 	esInt0+1,x
.3480	85 2c		sta $2c				sta 	temp1
.3482	b5 59		lda $59,x			lda 	esInt1+1,x
.3484	85 2d		sta $2d				sta 	temp1+1
.3486					CopyStringTop:
.3486	b5 50		lda $50,x			lda 	esInt0,x
.3488	85 2a		sta $2a				sta 	temp0
.348a	b5 58		lda $58,x			lda 	esInt1,x
.348c	85 2b		sta $2b				sta 	temp0+1
.348e	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/functions/concat.asm

.348f					StringConcat:
.348f	aa		tax				tax									; stack pos in X
.3490	98		tya				tya
.3491	48		pha				pha
.3492	20 7e 34	jsr $347e			jsr 	CopyStringPair 				; temp0 and temp1 point to strings to concat.
.3495	38		sec				sec 								; calculate alloc strings. lengths added + 1 for size.
.3496	a0 00		ldy #$00			ldy 	#0
.3498	b1 2a		lda ($2a),y			lda 	(temp0),y
.349a	71 2c		adc ($2c),y			adc 	(temp1),y
.349c	b0 1c		bcs $34ba			bcs 	_SCError 					; just too many characters here.
.349e	c9 fc		cmp #$fc			cmp 	#MaxStringSize
.34a0	b0 18		bcs $34ba			bcs 	_SCError
.34a2	20 de 34	jsr $34de			jsr 	AllocateSoftString 			; allocate soft string memory, set pointer.
.34a5	20 d5 34	jsr $34d5			jsr 	CopySoftToStack 			; copy that to the stack.
.34a8	20 bf 34	jsr $34bf			jsr 	SCCopyTemp0 				; copy temp0
.34ab	a5 2c		lda $2c				lda 	temp1 						; copy temp1 to temp0
.34ad	85 2a		sta $2a				sta 	temp0
.34af	a5 2d		lda $2d				lda 	temp1+1
.34b1	85 2b		sta $2b				sta 	temp0+1
.34b3	20 bf 34	jsr $34bf			jsr 	SCCopyTemp0 				; copy temp0 e.g. what was temp1.
.34b6	68		pla				pla
.34b7	a8		tay				tay
.34b8	8a		txa				txa 								; and A
.34b9	60		rts				rts
.34ba					_SCError:
.34ba	a2 0d		ldx #$0d			ldx 	#ErrorID_StrLen
.34bc	20 18 15	jsr $1518		jsr	errorHandler
.34bf					SCCopyTemp0:
.34bf	a0 00		ldy #$00			ldy 	#0 							; put count in temp2
.34c1	b1 2a		lda ($2a),y			lda 	(temp0),y
.34c3	85 2e		sta $2e				sta 	temp2
.34c5					_SCCopyLoop:
.34c5	a5 2e		lda $2e				lda 	temp2 						; done the lot
.34c7	f0 0b		beq $34d4			beq 	_SCCopyExit
.34c9	c6 2e		dec $2e				dec 	temp2
.34cb	c8		iny				iny 								; get next char
.34cc	b1 2a		lda ($2a),y			lda 	(temp0),y
.34ce	20 04 35	jsr $3504			jsr 	WriteSoftString 			; write to soft string.
.34d1	4c c5 34	jmp $34c5			jmp 	_SCCopyLoop
.34d4					_SCCopyExit:
.34d4	60		rts				rts
.34d5					CopySoftToStack:
.34d5	a5 39		lda $39				lda 	SoftMemAlloc 				; copy the memory allocation pointer to the stack.
.34d7	95 50		sta $50,x			sta 	esInt0,x 					; type is already string.
.34d9	a5 3a		lda $3a				lda 	SoftMemAlloc+1
.34db	95 58		sta $58,x			sta 	esInt1,x
.34dd	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/functions/memory.asm

.0039					softMemAlloc:
>0039							.fill 	2  							; if MSB is zero needs resetting on allocation.
.34de					AllocateSoftString:
.34de	85 32		sta $32				sta 	tempShort 					; save count
.34e0	98		tya				tya
.34e1	48		pha				pha
.34e2	a5 3a		lda $3a				lda 	softMemAlloc+1 				; if the high byte is zero, it needs allocating.
.34e4	d0 09		bne $34ef			bne 	_ASSDone
.34e6	a5 33		lda $33				lda 	highMemory 					; reset the soft memory alloc pointer.
.34e8	85 39		sta $39				sta 	softMemAlloc 				; to speed up slightly, we only reset this when we first need it
.34ea	a4 34		ldy $34				ldy 	highMemory+1 				; but it needs to be reset before each command.
.34ec	88		dey				dey 								; it is set to 1/4k below high memory, allowing space
.34ed	84 3a		sty $3a				sty 	softMemAlloc+1 				; for a concreted string.
.34ef					_ASSDone:
.34ef	38		sec				sec 								; allocate downwards enough memory
.34f0	a5 39		lda $39				lda 	softMemAlloc 				; subtract the memory requirements in A from
.34f2	e5 32		sbc $32				sbc 	tempShort 					; the soft memory pointer
.34f4	85 39		sta $39				sta 	softMemAlloc
.34f6	a5 3a		lda $3a				lda 	softMemAlloc+1
.34f8	e9 00		sbc #$00			sbc 	#0
.34fa	85 3a		sta $3a				sta 	softMemAlloc+1
.34fc	a9 00		lda #$00			lda 	#0 							; empty that string, set the length = 0.
.34fe	a8		tay				tay
.34ff	91 39		sta ($39),y			sta 	(softMemAlloc),y
.3501	68		pla				pla
.3502	a8		tay				tay
.3503	60		rts				rts
.3504					WriteSoftString:
.3504	84 32		sty $32				sty 	tempShort 					; save Y
.3506	48		pha				pha 								; save character on stack
.3507	a0 00		ldy #$00			ldy 	#0 							; get and bump length
.3509	b1 39		lda ($39),y			lda 	(softMemAlloc),y
.350b	18		clc				clc
.350c	69 01		adc #$01			adc 	#1
.350e	91 39		sta ($39),y			sta 	(softMemAlloc),y
.3510	a8		tay				tay 								; offset in Y
.3511	68		pla				pla 								; get char and write.
.3512	91 39		sta ($39),y			sta 	(softMemAlloc),y
.3514	a4 32		ldy $32				ldy 	tempShort 					; restore Y and exit.
.3516	60		rts				rts
.3517					StrClone:
.3517	aa		tax				tax 								; set up stack.
.3518	98		tya				tya
.3519	48		pha				pha
.351a	a0 00		ldy #$00			ldy 	#0 							; get length, add 1 for length
.351c	b1 2a		lda ($2a),y			lda 	(temp0),y 					; this is the bytes required.
.351e	18		clc				clc
.351f	69 01		adc #$01			adc 	#1
.3521	20 de 34	jsr $34de			jsr 	AllocateSoftString 			; allocate soft memory
.3524	a5 39		lda $39				lda 	softMemAlloc 				; copy that address to TOS
.3526	95 50		sta $50,x			sta 	esInt0,x
.3528	a5 3a		lda $3a				lda 	softMemAlloc+1
.352a	95 58		sta $58,x			sta 	esInt1,x
.352c	a9 00		lda #$00			lda 	#0 							; zero upper 2 bytes
.352e	95 60		sta $60,x			sta 	esInt2,x
.3530	95 68		sta $68,x			sta 	esInt3,x
.3532	a9 40		lda #$40			lda 	#$40 						; set type to string.
.3534	95 48		sta $48,x			sta 	esType,x
.3536	20 bf 34	jsr $34bf			jsr 	SCCopyTemp0 				; copy temp0 string to soft memory copy (concat.asm)
.3539	68		pla				pla
.353a	a8		tay				tay
.353b	8a		txa				txa
.353c	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/functions/setcase.asm

.353d					CaseString:
.353d	48		pha				pha 								; save A and copy to X
.353e	aa		tax				tax
.353f	98		tya				tya
.3540	48		pha				pha
.3541	20 86 34	jsr $3486			jsr 	CopyStringTop 				; target string -> temp0
.3544	a0 00		ldy #$00			ldy 	#0
.3546	b1 2a		lda ($2a),y			lda 	(temp0),y  					; get length,
.3548	18		clc				clc
.3549	69 01		adc #$01			adc 	#1 							; one more for length byte
.354b	20 de 34	jsr $34de			jsr 	AllocateSoftString 			; allocate soft string memory, set pointer.
.354e	20 d5 34	jsr $34d5			jsr 	CopySoftToStack 			; copy that to the stack.
.3551	a0 00		ldy #$00			ldy 	#0
.3553	b1 2a		lda ($2a),y			lda 	(temp0),y 					; count to copy in X
.3555	aa		tax				tax
.3556					_CSCopy:
.3556	e0 00		cpx #$00			cpx 	#0 							; finished if 0.
.3558	f0 24		beq $357e			beq 	_CSExit
.355a	ca		dex				dex
.355b	c8		iny				iny
.355c	68		pla				pla 								; check direction
.355d	48		pha				pha
.355e	f0 0c		beq $356c			beq 	_CSUpper
.3560	b1 2a		lda ($2a),y			lda 	(temp0),y 					; lower$() code
.3562	c9 41		cmp #$41			cmp 	#"A"
.3564	90 12		bcc $3578			bcc 	_CSWrite
.3566	c9 5b		cmp #$5b			cmp 	#"Z"+1
.3568	b0 0e		bcs $3578			bcs 	_CSWrite
.356a	90 0a		bcc $3576			bcc 	_CSFlipWrite
.356c					_CSUpper:
.356c	b1 2a		lda ($2a),y			lda 	(temp0),y 					; upper$() code
.356e	c9 61		cmp #$61			cmp 	#"a"
.3570	90 06		bcc $3578			bcc 	_CSWrite
.3572	c9 7b		cmp #$7b			cmp 	#"z"+1
.3574	b0 02		bcs $3578			bcs 	_CSWrite
.3576					_CSFlipWrite:
.3576	49 20		eor #$20			eor 	#"A"^"a" 					; switch case.
.3578					_CSWrite:
.3578	20 04 35	jsr $3504			jsr 	WriteSoftString 			; add to soft string.
.357b	4c 56 35	jmp $3556			jmp 	_CSCopy
.357e					_CSExit:
.357e	68		pla				pla
.357f	a8		tay				tay
.3580	68		pla				pla
.3581	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/functions/substring.asm

.3582					StringSubstring:
.3582	48		pha				pha
.3583	aa		tax				tax 								; access stack.
.3584	98		tya				tya
.3585	48		pha				pha
.3586	20 86 34	jsr $3486			jsr 	CopyStringTop 				; point temp0 to the string.
.3589	a0 00		ldy #$00			ldy 	#0 							; get length.
.358b	b1 2a		lda ($2a),y			lda 	(temp0),Y
.358d	85 2c		sta $2c				sta 	temp1
.358f	b5 51		lda $51,x			lda 	esInt0+1,x 					; get the initial offset
.3591	c5 2c		cmp $2c				cmp 	temp1 						; return "" if > length.
.3593	f0 02		beq $3597			beq 	_SSBOkay
.3595	b0 2a		bcs $35c1			bcs 	_SSBReturnNull
.3597					_SSBOkay:
.3597	a5 2c		lda $2c				lda 	temp1 						; get the total length +1
.3599	18		clc				clc
.359a	69 01		adc #$01			adc 	#1
.359c	38		sec				sec
.359d	f5 51		sbc $51,x			sbc 	esInt0+1,x 					; the anything >= this is bad - max size
.359f	d5 52		cmp $52,x			cmp 	esInt0+2,x  				; check bad >= required
.35a1	90 02		bcc $35a5			bcc		_SSBTrunc
.35a3	b5 52		lda $52,x			lda 	esInt0+2,x
.35a5					_SSBTrunc:
.35a5	85 2d		sta $2d				sta 	temp1+1 					; characters to copy.
.35a7	18		clc				clc
.35a8	69 01		adc #$01			adc 	#1 							; add 1
.35aa	20 de 34	jsr $34de			jsr 	AllocateSoftString 			; allocate soft string memory, set pointer.
.35ad	20 d5 34	jsr $34d5			jsr 	CopySoftToStack 			; copy that to the stack.
.35b0	b4 51		ldy $51,x			ldy 	esInt0+1,x 					; get initial position of char to copy
.35b2					_SSBCopyLoop:
.35b2	a5 2d		lda $2d				lda 	temp1+1 					; done them all
.35b4	f0 0e		beq $35c4			beq 	_SSBExit
.35b6	c6 2d		dec $2d				dec 	temp1+1
.35b8	b1 2a		lda ($2a),y			lda 	(temp0),y 					; get and write character
.35ba	20 04 35	jsr $3504			jsr 	WriteSoftString
.35bd	c8		iny				iny
.35be	4c b2 35	jmp $35b2			jmp 	_SSBCopyLoop
.35c1					_SSBReturnNull:
.35c1	20 c8 35	jsr $35c8			jsr 	ReturnNull
.35c4					_SSBExit:
.35c4	68		pla				pla
.35c5	a8		tay				tay
.35c6	68		pla				pla
.35c7	60		rts				rts
.35c8					ReturnNull:
.35c8	a9 00		lda #$00			lda 	#0 							; clear null string
.35ca	8d ce 0a	sta $0ace			sta 	NullString
.35cd	a9 ce		lda #$ce			lda 	#NullString & $FF 			; set a pointer to it
.35cf	95 50		sta $50,x			sta 	esInt0,x
.35d1	a9 0a		lda #$0a			lda 	#NullString >> 8
.35d3	95 58		sta $58,x			sta 	esInt1,x
.35d5	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/functions/write.asm

.0ce0					srcStrLen:
>0ce0							.fill 	1
.35d6					StringWrite:
.35d6	aa		tax				tax
.35d7	48		pha				pha
.35d8	98		tya				tya
.35d9	48		pha				pha
.35da	20 01 36	jsr $3601			jsr 	CheckOverwriteCurrent
.35dd	b0 0d		bcs $35ec			bcs		_SWCopyCurrent
.35df	20 3f 36	jsr $363f			jsr 	RequiresConcretion
.35e2	90 0e		bcc $35f2			bcc 	_SWWriteReference
.35e4	20 a2 36	jsr $36a2			jsr 	CheckSpecialConcretion
.35e7	b0 09		bcs $35f2			bcs 	_SWWriteReference
.35e9	20 53 36	jsr $3653			jsr 	AllocateHardMemory
.35ec					_SWCopyCurrent:
.35ec	20 86 36	jsr $3686			jsr 	CopyStringToHardMemory
.35ef	4c fd 35	jmp $35fd			jmp 	_SWExit
.35f2					_SWWriteReference
.35f2	a0 00		ldy #$00			ldy 	#0
.35f4	a5 2a		lda $2a				lda 	temp0
.35f6	91 2c		sta ($2c),y			sta 	(temp1),y
.35f8	c8		iny				iny
.35f9	a5 2b		lda $2b				lda 	temp0+1
.35fb	91 2c		sta ($2c),y			sta 	(temp1),y
.35fd					_SWExit:
.35fd	68		pla				pla
.35fe	a8		tay				tay
.35ff	68		pla				pla
.3600	60		rts				rts
.3601					CheckOverwriteCurrent:
.3601	a0 00		ldy #$00			ldy 	#0 						; get address of string being written to temp0
.3603	b5 59		lda $59,x			lda 	esInt1+1,x
.3605	85 2b		sta $2b				sta 	temp0+1
.3607	b5 51		lda $51,x			lda 	esInt0+1,x
.3609	85 2a		sta $2a				sta 	temp0
.360b	b1 2a		lda ($2a),y			lda 	(temp0),y 				; get length of string being copied and save it.
.360d	8d e0 0c	sta $0ce0			sta 	srcStrLen
.3610	b5 50		lda $50,x			lda 	esInt0,x 				; copy where the final address it being written to temp1.
.3612	85 2c		sta $2c				sta 	temp1 					; e.g. if it is ax$ then temp1 will point to the ax$
.3614	b5 58		lda $58,x			lda 	esInt1,x 				; data record + 5
.3616	85 2d		sta $2d				sta 	temp1+1
.3618	a0 01		ldy #$01			ldy 	#1 						; get the MSB of the address of string currently stored there.
.361a	b1 2c		lda ($2c),y			lda 	(temp1),y
.361c	c5 34		cmp $34				cmp 	highMemory+1 			; if < high memory then it cannot be something stored
.361e	90 1b		bcc $363b			bcc 	_COCFail 				; in hard memory.
.3620	a0 00		ldy #$00			ldy 	#0 						; copy target address - 1 into temp2
.3622	b1 2c		lda ($2c),y			lda 	(temp1),y 				; when allocating hard memory, the overall size is
.3624	e9 01		sbc #$01			sbc 	#1 						; in the previous byte.
.3626	85 2e		sta $2e				sta 	temp2
.3628	c8		iny				iny
.3629	b1 2c		lda ($2c),y			lda 	(temp1),y
.362b	e9 00		sbc #$00			sbc 	#0
.362d	85 2f		sta $2f				sta 	temp2+1
.362f	a0 00		ldy #$00			ldy 	#0 						; how large is this physical chunk.
.3631	b1 2e		lda ($2e),y			lda 	(temp2),y
.3633	38		sec				sec  							; maximum character capacity.
.3634	e9 02		sbc #$02			sbc 	#2
.3636	cd e0 0c	cmp $0ce0			cmp 	srcStrLen 				; if >= the required length
.3639	b0 02		bcs $363d			bcs 	_COCCanReuse
.363b					_COCFail:
.363b	18		clc				clc
.363c	60		rts				rts
.363d					_COCCanReuse:
.363d	38		sec				sec
.363e	60		rts				rts
.363f					RequiresConcretion:
.363f	a5 2b		lda $2b				lda 	temp0+1 				; get MSB of address of string to be written
.3641	c5 34		cmp $34				cmp 	highMemory+1 			; if >= high memory it is concreted
.3643	b0 0a		bcs $364f			bcs 	_RCSucceed 				; so it needs concreting again - duplication.
.3645	a5 3a		lda $3a				lda 	softMemAlloc+1 			; have we allocated any soft memory yet ?
.3647	f0 08		beq $3651			beq 	_RCFail 				; if not, this cannot be soft memory.
.3649	a5 2b		lda $2b				lda 	temp0+1 				; get MSB of address of string to be written
.364b	c5 3a		cmp $3a				cmp 	softMemAlloc+1 			; if >= soft mem alloc it is either soft
.364d	90 02		bcc $3651			bcc 	_RCFail 				; so concreting
.364f					_RCSucceed:
.364f	38		sec				sec
.3650	60		rts				rts
.3651					_RCFail:
.3651	18		clc				clc
.3652	60		rts				rts
.3653					AllocateHardMemory:
.3653	98		tya				tya
.3654	48		pha				pha
.3655	ad e0 0c	lda $0ce0			lda 	srcStrLen 				; characters in string
.3658	69 0a		adc #$0a			adc 	#1+1+8 					; one for hard memory size, one for string size, extra for expansion
.365a	b0 04		bcs $3660			bcs 	_AHMSetMax 				; max out that amount.
.365c	c9 fe		cmp #$fe			cmp 	#MaxStringSize+2
.365e	90 02		bcc $3662			bcc 	_AHMIsOkay
.3660					_AHMSetMax:
.3660	a9 fe		lda #$fe			lda 	#MaxStringSize+2
.3662					_AHMIsOkay:
.3662	48		pha				pha	 							; save size to be allocated
.3663	49 ff		eor #$ff			eor 	#$FF 					; complement and add to high Memory
.3665	38		sec				sec  							; and copy result to TOS as target address.
.3666	65 33		adc $33				adc 	highMemory
.3668	85 33		sta $33				sta 	highMemory
.366a	a5 34		lda $34				lda 	highMemory+1
.366c	69 ff		adc #$ff			adc 	#$FF
.366e	85 34		sta $34				sta 	highMemory+1
.3670	a0 00		ldy #$00			ldy 	#0 						; Y = 0
.3672	68		pla				pla 							; get the total size of the storage block
.3673	91 33		sta ($33),y			sta 	(highMemory),y 			; and set it
.3675	18		clc				clc
.3676	a5 33		lda $33				lda		highMemory 				; point the target address to the byte after this.
.3678	69 01		adc #$01			adc 	#1
.367a	91 2c		sta ($2c),y			sta 	(temp1),y
.367c	a5 34		lda $34				lda 	highMemory+1
.367e	69 00		adc #$00			adc 	#0
.3680	c8		iny				iny
.3681	91 2c		sta ($2c),y			sta 	(temp1),y
.3683	68		pla				pla
.3684	a8		tay				tay
.3685	60		rts				rts
.3686					CopyStringToHardMemory:
.3686	98		tya				tya
.3687	48		pha				pha
.3688	a0 00		ldy #$00			ldy 	#0 						; copy target address to temp2
.368a	b1 2c		lda ($2c),y			lda 	(temp1),y
.368c	85 2e		sta $2e				sta 	temp2
.368e	c8		iny				iny
.368f	b1 2c		lda ($2c),y			lda 	(temp1),y
.3691	85 2f		sta $2f				sta 	temp2+1
.3693	ac e0 0c	ldy $0ce0			ldy 	srcStrLen 				; copy this + 1 characters, (length too) hence $FF compare
.3696					_CSTHMLoop:
.3696	b1 2a		lda ($2a),y			lda 	(temp0),y
.3698	91 2e		sta ($2e),y			sta 	(temp2),y
.369a	88		dey				dey
.369b	c0 ff		cpy #$ff			cpy 	#$FF 					; this does the +1
.369d	d0 f7		bne $3696			bne 	_CSTHMLoop
.369f	68		pla				pla
.36a0	a8		tay				tay
.36a1	60		rts				rts
.36a2					CheckSpecialConcretion:
.36a2	ad e0 0c	lda $0ce0			lda 	srcStrLen 				; check string is null e.g. length = 0
.36a5	f0 02		beq $36a9			beq 	_CSCNullString
.36a7	18		clc				clc
.36a8	60		rts				rts
.36a9					_CSCNullString:
.36a9	a9 00		lda #$00			lda 	#0 						; by always returning this address we don't waste
.36ab	8d ce 0a	sta $0ace			sta 	NullString		 		; storage on null strings.
.36ae	a9 ce		lda #$ce			lda 	#(NullString) & $FF
.36b0	85 2a		sta $2a				sta 	temp0
.36b2	a9 0a		lda #$0a			lda 	#(NullString) >> 8
.36b4	85 2b		sta $2b				sta 	1+(temp0)
.36b6	38		sec				sec
.36b7	60		rts				rts

;******  Return to file: string/string.asm

.36b8					stringHandler:
.36b8	7c bb 36	jmp ($36bb,x)			jmp 	(stringVectors,x)
.36bb					stringVectors:
>36bb	cd 36					.word _DummyControlHandler ; index 0
>36bd	1b 34					.word StringChrs           ; index 2
>36bf	17 35					.word StrClone             ; index 4
>36c1	8f 34					.word StringConcat         ; index 6
>36c3	2a 34					.word StringNull           ; index 8
>36c5	46 34					.word STRCompare           ; index 10
>36c7	3d 35					.word CaseString           ; index 12
>36c9	82 35					.word StringSubstring      ; index 14
>36cb	d6 35					.word StringWrite          ; index 16
.36cd					_DummyControlHandler:
.36cd	60		rts			rts

;******  Return to file: basic.asm

.36ce					section_end_string:
.36ce					section_start_tokeniser:

;******  Processing file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/detokenise/detokenise.asm

.0ce1					deTokeniseVector:
>0ce1							.fill 	2
.0ce3					lastCharacterClass:
>0ce3							.fill 	1
.0ce4					indent:
>0ce4							.fill 	1
.36ce					ListLine:
.36ce	48		pha				pha								; enter here to list to console. sets the output vector
.36cf	a9 06		lda #$06			lda 	#(deTokenPrint) & $FF
.36d1	8d e1 0c	sta $0ce1			sta 	deTokeniseVector
.36d4	a9 38		lda #$38			lda 	#(deTokenPrint) >> 8
.36d6	8d e2 0c	sta $0ce2			sta 	1+(deTokeniseVector)
.36d9	68		pla				pla
.36da					Detokenise:
.36da	18		clc				clc 							; space required for line number.
.36db	69 06		adc #$06			adc 	#6
.36dd	8d e4 0c	sta $0ce4			sta 	indent
.36e0	a9 ff		lda #$ff			lda 	#$FF 					; last thing printed is a dummy value.
.36e2	8d e3 0c	sta $0ce3			sta 	lastCharacterClass
.36e5	a2 02		ldx #$02			ldx 	#2
.36e7	a9 00		lda #$00			lda 	#0 						; clear upper two bytes
.36e9	95 60		sta $60,x			sta 	esInt2,x
.36eb	95 68		sta $68,x			sta 	esInt3,x
.36ed	a0 01		ldy #$01			ldy 	#1 						; copy line number to stack,2 (as using stack 0,1 for list range)
.36ef	b1 28		lda ($28),y			lda 	(codePtr),y
.36f1	95 50		sta $50,x			sta 	esInt0,x
.36f3	c8		iny				iny
.36f4	b1 28		lda ($28),y			lda 	(codePtr),y
.36f6	95 58		sta $58,x			sta 	esInt1,x
.36f8	a9 84		lda #$84			lda 	#LTYLineNumber
.36fa	20 e1 37	jsr $37e1			jsr 	ListOutputCharacter
.36fd	a9 0a		lda #$0a			lda 	#10 					; base 10
.36ff	20 a5 37	jsr $37a5			jsr 	DTPrintInteger 			; print as integer.
.3702	a0 00		ldy #$00			ldy 	#0 						; get length
.3704	b1 2a		lda ($2a),y			lda 	(temp0),y 				; into X
.3706	aa		tax				tax
.3707					_DTPadOut:
.3707	a9 20		lda #$20			lda 	#" " 					; pad out to indent.
.3709	20 e1 37	jsr $37e1			jsr 	ListOutputCharacter
.370c	e8		inx				inx
.370d	ec e4 0c	cpx $0ce4			cpx 	indent
.3710	d0 f5		bne $3707			bne 	_DTPadOut
.3712	a0 03		ldy #$03			ldy 	#3 						; start position.
.3714					_DTListLoop:
.3714	b1 28		lda ($28),y			lda 	(codePtr),y
.3716	c9 85		cmp #$85			cmp 	#TOK_STR 				; Inline string.
.3718	f0 5e		beq $3778			beq 	_DTIsString
.371a	c9 84		cmp #$84			cmp 	#TOK_FPC 				; Floating point
.371c	f0 56		beq $3774			beq 	_DTIsFloat
.371e	c9 c5		cmp #$c5			cmp 	#TKW_AMP 				; & hex marker
.3720	f0 16		beq $3738			beq 	_DTHexConstant
.3722	c9 80		cmp #$80			cmp 	#TOK_EOL 				; End of Line
.3724	d0 06		bne $372c			bne 	_DTNotEnd
.3726	a9 ff		lda #$ff			lda 	#255 					; print CR
.3728	20 e1 37	jsr $37e1			jsr 	ListOutputCharacter
.372b	60		rts				rts
.372c					_DTNotEnd:
.372c	c9 00		cmp #$00			cmp 	#0
.372e	30 38		bmi $3768			bmi 	_DTIsToken
.3730	c9 40		cmp #$40			cmp 	#$40
.3732	90 3a		bcc $376e			bcc 	_DTIsIdentifier
.3734	a9 0a		lda #$0a			lda 	#10 					; this is the base, unsigned decimal
.3736	d0 0d		bne $3745			bne 	_DTConstant
.3738					_DTHexConstant:
.3738	a9 26		lda #$26			lda 	#"&"
.373a	20 e1 37	jsr $37e1			jsr 	ListOutputCharacter
.373d	c8		iny				iny
.373e	a9 01		lda #$01			lda 	#1 						; switch to spaces so &xxxx is treated like a number.
.3740	20 22 38	jsr $3822			jsr 	DTSwitchMode
.3743	a9 10		lda #$10			lda 	#16						; print line unsigned hex
.3745					_DTConstant:
.3745	48		pha				pha
.3746	a9 00		lda #$00			lda 	#0 						; now constant, may need spaces
.3748	20 22 38	jsr $3822			jsr 	DTSwitchMode
.374b	a9 86		lda #$86			lda 	#LTYConstant
.374d	20 e1 37	jsr $37e1			jsr 	ListOutputCharacter
.3750	a2 02		ldx #$02			ldx 	#2 						; get its value
.3752	8a		txa				txa
.3753	a2 10		ldx #$10		ldx	#16
.3755	20 fb 33	jsr $33fb		jsr	mainHandler
.3758	aa		tax				tax
.3759	68		pla				pla 							; get base back
.375a	85 32		sta $32				sta 	tempShort
.375c	98		tya				tya
.375d	48		pha				pha
.375e	a5 32		lda $32				lda 	tempShort 				; print in base A stck level X
.3760	20 a5 37	jsr $37a5			jsr 	DTPrintInteger
.3763	68		pla				pla
.3764	a8		tay				tay
.3765	4c 14 37	jmp $3714			jmp 	_DTListLoop
.3768					_DTIsToken:
.3768	20 7b 38	jsr $387b			jsr 	DTDecodeToken
.376b	4c 14 37	jmp $3714			jmp 	_DTListLoop
.376e					_DTIsIdentifier:
.376e	20 34 38	jsr $3834			jsr 	DTIdentifier
.3771	4c 14 37	jmp $3714			jmp 	_DTListLoop
.3774					_DTIsFloat:
>3774	db						.byte 	$DB
.3775	4c 74 37	jmp $3774			jmp 	_DTIsFloat
.3778					_DTIsString:
.3778	a9 01		lda #$01			lda 	#1 							; now punctuation, may need spaces
.377a	20 22 38	jsr $3822			jsr 	DTSwitchMode
.377d	a9 81		lda #$81			lda 	#LTYString
.377f	20 e1 37	jsr $37e1			jsr 	ListOutputCharacter
.3782	a9 22		lda #$22			lda 	#'"'						; open quote
.3784	20 e1 37	jsr $37e1			jsr 	ListOutputCharacter
.3787	a2 02		ldx #$02			ldx 	#2 							; evaluate string to TOS2.
.3789	8a		txa				txa
.378a	a2 10		ldx #$10		ldx	#16
.378c	20 fb 33	jsr $33fb		jsr	mainHandler
.378f	aa		tax				tax
.3790	b5 50		lda $50,x			lda 	esInt0,x 					; copy string address to temp0
.3792	85 2a		sta $2a				sta 	temp0
.3794	b5 58		lda $58,x			lda 	esInt1,x
.3796	85 2b		sta $2b				sta 	temp0+1
.3798	a9 00		lda #$00			lda 	#0 							; don't capitalise.
.379a	20 b7 37	jsr $37b7			jsr 	DTPrintLengthPrefix
.379d	a9 22		lda #$22			lda 	#'"'
.379f	20 e1 37	jsr $37e1			jsr 	ListOutputCharacter
.37a2	4c 14 37	jmp $3714			jmp 	_DTListLoop

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/detokenise/dtprint.asm

.0ce5					tPrintCount:
>0ce5							.fill 	1
.37a5					DTPrintInteger:
.37a5	48		pha				pha									; save base
.37a6	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.37a8	85 2a		sta $2a				sta 	temp0
.37aa	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.37ac	85 2b		sta $2b				sta 	1+(temp0)
.37ae	68		pla				pla
.37af	a8		tay				tay
.37b0	8a		txa				txa
.37b1	a2 12		ldx #$12		ldx	#18
.37b3	20 fb 33	jsr $33fb		jsr	mainHandler
.37b6	aa		tax				tax 								; then drop through here.
.37b7					DTPrintLengthPrefix:
.37b7	aa		tax				tax 								; A = 0 = don't case convert.
.37b8	98		tya				tya
.37b9	48		pha				pha
.37ba	a0 00		ldy #$00			ldy 	#0 							; get string length = chars to print.
.37bc	b1 2a		lda ($2a),y			lda 	(temp0),y
.37be	8d e5 0c	sta $0ce5			sta 	tPrintCount
.37c1	f0 1b		beq $37de			beq 	_DTPLPExit 					; empty string
.37c3					_DTPLPLoop:
.37c3	c8		iny				iny 								; get next.
.37c4	b1 2a		lda ($2a),y			lda 	(temp0),y
.37c6	29 7f		and #$7f			and 	#$7F
.37c8	e0 00		cpx #$00			cpx 	#0 							; skip if not case converting
.37ca	f0 0a		beq $37d6			beq 	_DTPLPNoCase
.37cc	c9 41		cmp #$41			cmp 	#"A" 						; if converting UC -> LC
.37ce	90 06		bcc $37d6			bcc 	_DTPLPNoCase
.37d0	c9 5b		cmp #$5b			cmp 	#"Z"+1
.37d2	b0 02		bcs $37d6			bcs 	_DTPLPNoCase
.37d4	49 20		eor #$20			eor 	#"A"^"a"
.37d6					_DTPLPNoCase
.37d6	20 e1 37	jsr $37e1			jsr 	ListOutputCharacter 		; call handler
.37d9	ce e5 0c	dec $0ce5			dec 	tPrintCount 				; do all the characters
.37dc	d0 e5		bne $37c3			bne 	_DTPLPLoop
.37de					_DTPLPExit:
.37de	68		pla				pla
.37df	a8		tay				tay
.37e0	60		rts				rts
.37e1					ListOutputCharacter:
.37e1	85 32		sta $32				sta 	tempShort
.37e3	48		pha				pha
.37e4	8a		txa				txa
.37e5	48		pha				pha
.37e6	98		tya				tya
.37e7	48		pha				pha
.37e8	a5 32		lda $32				lda 	tempShort 					; convert ASCII 6 bit (0-31) to 7 bit.
.37ea	c9 20		cmp #$20			cmp 	#32
.37ec	b0 0c		bcs $37fa			bcs		_LOCHiBit
.37ee	09 40		ora #$40			ora 	#64 						; conversion
.37f0	c9 40		cmp #$40			cmp 	#64							; make l/c
.37f2	f0 06		beq $37fa			beq 	_LOCHiBit
.37f4	c9 5b		cmp #$5b			cmp 	#65+26
.37f6	b0 02		bcs $37fa			bcs 	_LOCHiBit
.37f8	69 20		adc #$20			adc 	#32
.37fa					_LOCHiBit:
.37fa	20 03 38	jsr $3803			jsr 	_LOCCallVector				; call o/p handler routine
.37fd	68		pla				pla
.37fe	a8		tay				tay
.37ff	68		pla				pla
.3800	aa		tax				tax
.3801	68		pla				pla
.3802					_LOCExit:
.3802	60		rts				rts
.3803					_LOCCallVector:
.3803	6c e1 0c	jmp ($0ce1)			jmp 	(deTokeniseVector)
.3806					deTokenPrint:
.3806	c9 00		cmp #$00			cmp 	#0 							; if bit 7 sets ink colour
.3808	30 06		bmi $3810			bmi 	_dtpInk
.380a	a2 16		ldx #$16		ldx	#22
.380c	20 f6 14	jsr $14f6		jsr	deviceHandler
.380f	60		rts				rts
.3810	c9 ff		cmp #$ff	_dtpInk:cmp 	#255 						; e.g. herhe, get ink and set it
.3812	f0 08		beq $381c			beq 	_dtpCR						; except $FF => CRLF
.3814	29 07		and #$07			and 	#7
.3816	a2 08		ldx #$08		ldx	#8
.3818	20 f6 14	jsr $14f6		jsr	deviceHandler
.381b	60		rts				rts
.381c					_dtpCR:
.381c	a2 06		ldx #$06		ldx	#6
.381e	20 f6 14	jsr $14f6		jsr	deviceHandler
.3821	60		rts				rts
.3822					DTSwitchMode:
.3822	cd e3 0c	cmp $0ce3			cmp 	LastCharacterClass 			; if changed, update character class
.3825	f0 04		beq $382b			beq 	_DTSMNoChange
.3827	8d e3 0c	sta $0ce3			sta 	LastCharacterClass
.382a					_DTSMExit:
.382a	60		rts				rts
.382b					_DTSMNoChange:
.382b	c9 01		cmp #$01			cmp 	#1 							; if didn't change to punctuation, two identifiers so we
.382d	f0 fb		beq $382a			beq 	_DTSMExit 					; need a space.
.382f	a9 20		lda #$20			lda 	#" "
.3831	4c e1 37	jmp $37e1			jmp 	ListOutputCharacter

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/detokenise/identifier.asm

.3834					DTIdentifier:
.3834	a9 00		lda #$00			lda 	#0 							; now text, may need spaces
.3836	20 22 38	jsr $3822			jsr 	DTSwitchMode
.3839	a9 87		lda #$87			lda 	#LTYIdentifier
.383b	20 e1 37	jsr $37e1			jsr 	ListOutputCharacter
.383e					_DTILoop:
.383e	b1 28		lda ($28),y			lda 	(codePtr),y 				; output main bit of identifier.
.3840	c9 2d		cmp #$2d			cmp 	#"-"						; make - back to _
.3842	d0 02		bne $3846			bne 	_DTINotUS
.3844	a9 5f		lda #$5f			lda 	#"_"
.3846					_DTINotUS:
.3846	20 e1 37	jsr $37e1			jsr 	ListOutputCharacter
.3849	c8		iny				iny
.384a	b1 28		lda ($28),y			lda 	(codePtr),y 				; until end identifier marker.
.384c	c9 3a		cmp #$3a			cmp 	#$3A
.384e	90 ee		bcc $383e			bcc 	_DTILoop
.3850	c8		iny				iny
.3851	c9 3a		cmp #$3a			cmp 	#$3A 						; is it integer non array
.3853	f0 25		beq $387a			beq 	_DTIExit 					; no postfix.
.3855	48		pha				pha
.3856	a9 01		lda #$01			lda  	#1 							; it ends in punctuation
.3858	8d e3 0c	sta $0ce3			sta 	LastCharacterClass
.385b	a9 82		lda #$82			lda 	#LTYPunctuation
.385d	20 e1 37	jsr $37e1			jsr 	ListOutputCharacter
.3860	68		pla				pla
.3861	c9 3b		cmp #$3b			cmp 	#$3B
.3863	f0 10		beq $3875			beq 	_DTIArray
.3865	4a		lsr a				lsr 	a 							; array flag in C
.3866	08		php				php
.3867	49 1e		eor #$1e			eor 	#$3C/2 						; check if $
.3869	f0 02		beq $386d			beq 	_DTIDollar
.386b	a9 07		lda #$07			lda 	#"$"^"#" 					; this if #, 0 if $
.386d					_DTIDollar:
.386d	49 24		eor #$24			eor 	#"$"
.386f	20 e1 37	jsr $37e1			jsr 	ListOutputCharacter
.3872	28		plp				plp
.3873	90 05		bcc $387a			bcc 	_DTIExit
.3875					_DTIArray:
.3875	a9 28		lda #$28			lda 	#"("
.3877	20 e1 37	jsr $37e1			jsr 	ListOutputCharacter
.387a					_DTIExit:
.387a	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/detokenise/token.asm

.387b					DTDecodeToken:
.387b	a2 00		ldx #$00			ldx 	#0 							; table number to use
.387d	b1 28		lda ($28),y			lda 	(codePtr),y
.387f	c9 84		cmp #$84			cmp 	#$84
.3881	b0 05		bcs $3888			bcs 	_DTNotShift
.3883	29 03		and #$03			and 	#3 							; get the shift 1..3
.3885	0a		asl a				asl 	a 							; put 2 x in X
.3886	aa		tax				tax
.3887	c8		iny				iny
.3888					_DTNotShift:
.3888	bd 8a 3b	lda $3b8a,x			lda 	TokenTableAddress,x 		; get the token table to use to decode it.
.388b	85 2a		sta $2a				sta 	temp0 						; point into temp0
.388d	bd 8b 3b	lda $3b8b,x			lda 	TokenTableAddress+1,x
.3890	85 2b		sta $2b				sta 	temp0+1
.3892	b1 28		lda ($28),y			lda 	(codePtr),y 				; get the token value.
.3894	c8		iny				iny 								; consume it.
.3895	aa		tax				tax
.3896	98		tya				tya
.3897	48		pha				pha
.3898					_DTFindText:
.3898	e0 86		cpx #$86			cpx 	#$86 						; finished ?
.389a	f0 11		beq $38ad			beq 	_DTFoundText
.389c	ca		dex				dex
.389d	a0 00		ldy #$00			ldy 	#0 							; add length+1 to temp0
.389f	38		sec				sec
.38a0	b1 2a		lda ($2a),y			lda 	(temp0),y
.38a2	65 2a		adc $2a				adc 	temp0
.38a4	85 2a		sta $2a				sta 	temp0
.38a6	90 f0		bcc $3898			bcc 	_DTFindText
.38a8	e6 2b		inc $2b				inc 	temp0+1
.38aa	4c 98 38	jmp $3898			jmp 	_DTFindText
.38ad					_DTFoundText:
.38ad	a0 01		ldy #$01			ldy 	#1 							; get first character
.38af	b1 2a		lda ($2a),y			lda 	(temp0),y
.38b1	29 7f		and #$7f			and 	#$7F 						; will have bit 7 set.
.38b3	c9 41		cmp #$41			cmp 	#"A" 						; check for punctuation.
.38b5	90 11		bcc $38c8			bcc 	_DTIsPunctuation
.38b7	c9 5b		cmp #$5b			cmp 	#"Z"+1
.38b9	b0 0d		bcs $38c8			bcs 	_DTIsPunctuation
.38bb	a9 00		lda #$00			lda 	#0 							; now text, may need spaces
.38bd	20 22 38	jsr $3822			jsr 	DTSwitchMode
.38c0	a9 83		lda #$83			lda 	#LTYKeyword
.38c2	20 e1 37	jsr $37e1			jsr 	ListOutputCharacter
.38c5	4c d2 38	jmp $38d2			jmp 	_DTPrint
.38c8					_DTIsPunctuation:
.38c8	a9 01		lda #$01			lda 	#1 							; now punctuation, may need spaces
.38ca	20 22 38	jsr $3822			jsr 	DTSwitchMode
.38cd	a9 82		lda #$82			lda 	#LTYPunctuation
.38cf	20 e1 37	jsr $37e1			jsr 	ListOutputCharacter
.38d2					_DTPrint:
.38d2	a9 01		lda #$01			lda 	#1 							; fix case.
.38d4	20 b7 37	jsr $37b7			jsr 	DTPrintLengthPrefix 		; print it out.
.38d7	a0 00		ldy #$00			ldy 	#0
.38d9	b1 2a		lda ($2a),y			lda 	(temp0),y
.38db	a8		tay				tay
.38dc	b1 2a		lda ($2a),y			lda 	(temp0),y
.38de	29 7f		and #$7f			and 	#$7F 						; will have bit 7 set.
.38e0	c9 41		cmp #$41			cmp 	#"A" 						; check for punctuation.
.38e2	90 04		bcc $38e8			bcc 	_DTIsNowPunctuation
.38e4	c9 5b		cmp #$5b			cmp 	#"Z"+1
.38e6	90 05		bcc $38ed			bcc 	_DTPExit
.38e8					_DTIsNowPunctuation:
.38e8	a9 01		lda #$01			lda 	#1
.38ea	8d e3 0c	sta $0ce3			sta		LastCharacterClass
.38ed					_DTPExit:
.38ed	68		pla				pla
.38ee	a8		tay				tay
.38ef	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/search.asm

.0ce6					currentSet:
>0ce6							.fill 	1
.38f0					TokenSearch:
.38f0	8a		txa				txa
.38f1	48		pha				pha
.38f2	98		tya				tya
.38f3	48		pha				pha
.38f4	a9 00		lda #$00			lda 	#0
.38f6	8d e6 0c	sta $0ce6			sta 	currentSet
.38f9					_TSLoop:
.38f9	ad e6 0c	lda $0ce6			lda 	currentSet 					; 2 x currentset in X
.38fc	0a		asl a				asl 	a
.38fd	aa		tax				tax
.38fe	bd 8a 3b	lda $3b8a,x			lda 	TokenTableAddress,x 		; set temp0 to the table address
.3901	85 2a		sta $2a				sta 	temp0
.3903	bd 8b 3b	lda $3b8b,x			lda 	TokenTableAddress+1,x
.3906	85 2b		sta $2b				sta 	temp0+1
.3908	20 2f 39	jsr $392f			jsr 	TokenSearchOne 				; search one table
.390b	b0 0d		bcs $391a			bcs 	_TSFound 					; found a token.
.390d	ee e6 0c	inc $0ce6			inc 	currentSet 					; next set
.3910	ad e6 0c	lda $0ce6			lda 	currentSet
.3913	c9 04		cmp #$04			cmp 	#4
.3915	d0 e2		bne $38f9			bne 	_TSLoop 					; back if not done all four.
.3917	18		clc				clc 								; clear carry and exit
.3918	90 10		bcc $392a			bcc 	_TSExit
.391a					_TSFound:
.391a	48		pha				pha 								; save token
.391b	ad e6 0c	lda $0ce6			lda 	currentSet					; if set zero no shift
.391e	f0 05		beq $3925			beq 	_TSNoShift
.3920	09 80		ora #$80			ora 	#$80 						; Write as $81-$83
.3922	20 e0 39	jsr $39e0			jsr 	TokenWrite
.3925					_TSNoShift:
.3925	68		pla				pla 								; get token back
.3926	20 e0 39	jsr $39e0			jsr 	TokenWrite 					; write it
.3929	38		sec				sec 								; carry set indicating success
.392a					_TSExit:
.392a	68		pla				pla
.392b	a8		tay				tay
.392c	68		pla				pla
.392d	aa		tax				tax
.392e	60		rts				rts
.392f					TokenSearchOne:
.392f	a2 86		ldx #$86			ldx 	#$86 						; current token being tested.
.3931					_TSOLoop:
.3931	a0 00		ldy #$00			ldy 	#0
.3933	b1 2a		lda ($2a),y			lda 	(temp0),y 					; get length of token
.3935	f0 26		beq $395d			beq 	_TSOFail 					; if zero, end of table
.3937	cd cf 0a	cmp $0acf			cmp 	convertBuffer 				; length is the same, compare the text matches.
.393a	f0 11		beq $394d			beq 	_TSOCheckText
.393c					_TSONext:
.393c	e8		inx				inx 								; bump token
.393d	a0 00		ldy #$00			ldy 	#0							; get length
.393f	b1 2a		lda ($2a),y			lda 	(temp0),y
.3941	38		sec				sec
.3942	65 2a		adc $2a				adc 	temp0 						; add to temp0 + 1
.3944	85 2a		sta $2a				sta 	temp0
.3946	90 e9		bcc $3931			bcc 	_TSOLoop
.3948	e6 2b		inc $2b				inc 	temp0+1
.394a	4c 31 39	jmp $3931			jmp 	_TSOLoop
.394d					_TSOCheckText:
.394d	a8		tay				tay 								; compare length downto 1.
.394e					_TSOCheckLoop:
.394e	b1 2a		lda ($2a),y			lda 	(temp0),y 					; use EOR to compare
.3950	59 cf 0a	eor $0acf,y			eor 	convertBuffer,y
.3953	29 7f		and #$7f			and 	#$7F 						; ignore bit 7
.3955	d0 e5		bne $393c			bne 	_TSONext 					; different goto next.
.3957	88		dey				dey 								; do all
.3958	d0 f4		bne $394e			bne 	_TSOCheckLoop
.395a	8a		txa				txa 								; return token in A and carry set
.395b	38		sec				sec
.395c	60		rts				rts
.395d					_TSOFail:
.395d	18		clc				clc
.395e	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/test.asm

.395f					TokTest:
.395f	a2 ff		ldx #$ff				ldx 	#$FF
.3961	9a		txs					txs
.3962	a9 7f		lda #$7f			lda 	#(TokenText1) & $FF
.3964	85 28		sta $28				sta 	codePtr
.3966	a9 39		lda #$39			lda 	#(TokenText1) >> 8
.3968	85 29		sta $29				sta 	1+(codePtr)
.396a	20 7f 39	jsr $397f				jsr 	Tokenise
.396d	a2 00		ldx #$00	TokStop:	ldx 	#0 					; compare vs precalculated result
.396f	bd 7f 39	lda $397f,x	_TokCheck:	lda 	TokenBytes1,x
.3972	dd ea 0c	cmp $0cea,x				cmp 	tokenBuffer,x
.3975	d0 fe		bne $3975	_TokFail:	bne 	_TokFail	 		; error.
.3977	e8		inx					inx
.3978	c9 80		cmp #$80				cmp 	#$80
.397a	d0 f3		bne $396f				bne 	_TokCheck
.397c	4c ff ff	jmp $ffff				jmp 	$FFFF 				; successfully tokenised then quit.

;******  Processing file: tokeniser/tokenise/../../generated/toktest.inc

.397f					TokenText1:
.397f					TokenBytes1:

;******  Return to file: tokeniser/tokenise/test.asm


;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokenise.asm

.0ce7					tokenHeader:
>0ce7							.fill 	3
.0cea					tokenBuffer:
>0cea							.fill 	256
.0dea					tokenBufferIndex:
>0dea							.fill 	1
.397f					Tokenise:
.397f	20 f9 39	jsr $39f9			jsr 	TokeniseMakeASCIIZ 			; convert to ASCIIZ string.
.3982					TokeniseASCIIZ:
.3982	20 0a 3a	jsr $3a0a			jsr 	TokeniseFixCase 			; remove controls and lower case outside quotes.
.3985	a9 00		lda #$00			lda 	#0 							; reset the token buffer index
.3987	8d ea 0d	sta $0dea			sta 	tokenBufferIndex
.398a	a8		tay				tay 								; start pointer
.398b	a9 80		lda #$80			lda 	#$80 						; empty token buffer ($80 ends it)
.398d	8d ea 0c	sta $0cea			sta 	tokenBuffer
.3990					_TokLoop:
.3990	b1 28		lda ($28),y			lda 	(codePtr),y 				; get next character
.3992	f0 46		beq $39da			beq 	_TokExit 					; if zero, then exit.
.3994	c8		iny				iny 								; skip over spaces.
.3995	c9 20		cmp #$20			cmp 	#" "
.3997	f0 f7		beq $3990			beq 	_TokLoop
.3999	88		dey				dey 								; point back to character.
.399a	c9 26		cmp #$26			cmp 	#"&"						; Hexadecimal constant.
.399c	f0 18		beq $39b6			beq 	_TokHexConst
.399e	c9 22		cmp #$22			cmp 	#'"'						; Quoted String
.39a0	f0 23		beq $39c5			beq 	_TokQString
.39a2	c9 5b		cmp #$5b			cmp 	#"Z"+1 						; > 'Z' is punctuation
.39a4	b0 26		bcs $39cc			bcs 	_TokPunctuation
.39a6	c9 41		cmp #$41			cmp 	#"A" 						; A..Z identifier
.39a8	b0 29		bcs $39d3			bcs 	_TokIdentifier
.39aa	c9 3a		cmp #$3a			cmp 	#"9"+1
.39ac	b0 1e		bcs $39cc			bcs 	_TokPunctuation 			; between 9 and A exclusive, punctuation
.39ae	c9 30		cmp #$30			cmp 	#"0"
.39b0	90 1a		bcc $39cc			bcc 	_TokPunctuation 			; < 0, punctuation.
.39b2	a9 0a		lda #$0a			lda 	#10  						; 0..9 constant in base 10.
.39b4	d0 08		bne $39be			bne 	_TokConst
.39b6					_TokHexConst:
.39b6	c8		iny				iny									; consume token.
.39b7	a9 c5		lda #$c5			lda 	#TKW_AMP 					; Write ampersand token out
.39b9	20 e0 39	jsr $39e0			jsr 	TokenWrite
.39bc	a9 10		lda #$10			lda 	#16
.39be					_TokConst:
.39be	20 c8 3a	jsr $3ac8			jsr 	TokeniseInteger
.39c1	b0 cd		bcs $3990			bcs 	_TokLoop
.39c3	90 18		bcc $39dd			bcc 	_TokFail
.39c5					_TokQString:
.39c5	20 5e 3b	jsr $3b5e			jsr 	TokeniseString
.39c8	b0 c6		bcs $3990			bcs 	_TokLoop
.39ca	90 11		bcc $39dd			bcc 	_TokFail
.39cc					_TokPunctuation:
.39cc	20 3d 3b	jsr $3b3d			jsr 	TokenisePunctuation
.39cf	b0 bf		bcs $3990			bcs 	_TokLoop
.39d1	90 0a		bcc $39dd			bcc 	_TokFail
.39d3					_TokIdentifier:
.39d3	20 39 3a	jsr $3a39			jsr 	TokeniseIdentifier
.39d6	b0 b8		bcs $3990			bcs 	_TokLoop
.39d8	90 03		bcc $39dd			bcc 	_TokFail
.39da					_TokExit:
.39da	a9 01		lda #$01			lda 	#1
.39dc	60		rts				rts
.39dd					_TokFail:
.39dd	a9 00		lda #$00			lda 	#0
.39df	60		rts				rts
.39e0					TokenWrite:
.39e0	85 32		sta $32				sta 	tempShort 					; save XA
.39e2	48		pha				pha
.39e3	8a		txa				txa
.39e4	48		pha				pha
.39e5	a5 32		lda $32				lda 	tempShort
.39e7	ae ea 0d	ldx $0dea			ldx 	tokenBufferIndex 			; geet index
.39ea	9d ea 0c	sta $0cea,x			sta 	tokenBuffer,x 				; write byte to buffer
.39ed	a9 80		lda #$80			lda 	#TOK_EOL 					; pre-emptively write EOL marker after
.39ef	9d eb 0c	sta $0ceb,x			sta 	tokenBuffer+1,x
.39f2	ee ea 0d	inc $0dea			inc 	tokenBufferIndex 			; bump index
.39f5	68		pla				pla
.39f6	aa		tax				tax
.39f7	68		pla				pla
.39f8	60		rts				rts
.39f9					TokeniseMakeASCIIZ:
.39f9	a0 00		ldy #$00			ldy 	#0							; get length of string.
.39fb	b1 28		lda ($28),y			lda 	(codePtr),y
.39fd	a8		tay				tay
.39fe	c8		iny				iny 								; +1, the NULL goes here.
.39ff	a9 00		lda #$00			lda 	#0
.3a01	91 28		sta ($28),y			sta 	(codePtr),y 				; write the trailing NULL.
.3a03	e6 28		inc $28				inc 	codePtr 					; bump the pointer.
.3a05	d0 02		bne $3a09			bne 	_TMKAExit
.3a07	e6 29		inc $29				inc 	codePtr+1
.3a09					_TMKAExit:
.3a09	60		rts				rts
.3a0a					TokeniseFixCase:
.3a0a	a0 00		ldy #$00			ldy 	#0 							; position in buffer.
.3a0c	a2 01		ldx #$01			ldx 	#1 							; bit 0 of this is 'in quotes'
.3a0e					_TFCFlipQ:
.3a0e	8a		txa				txa
.3a0f	49 01		eor #$01			eor 	#1
.3a11	aa		tax				tax
.3a12					_TFCLoop:
.3a12	b1 28		lda ($28),y			lda 	(codePtr),y 				; get character
.3a14	f0 22		beq $3a38			beq 	_TFCExit 					; if zero exit.
.3a16	c9 20		cmp #$20			cmp 	#32 						; if control
.3a18	90 1a		bcc $3a34			bcc 	_TFCControl
.3a1a	c8		iny				iny 								; preconsume
.3a1b	c9 22		cmp #$22			cmp 	#'"'
.3a1d	f0 ef		beq $3a0e			beq 	_TFCFlipQ
.3a1f	c9 61		cmp #$61			cmp 	#"a"						; check if L/C
.3a21	90 ef		bcc $3a12			bcc 	_TFCLoop
.3a23	c9 7b		cmp #$7b			cmp 	#"z"+1
.3a25	b0 eb		bcs $3a12			bcs 	_TFCLoop
.3a27	e0 00		cpx #$00			cpx 	#0 							; in quotes, if so, leave alone.
.3a29	d0 e7		bne $3a12			bne 	_TFCLoop
.3a2b	88		dey				dey
.3a2c	49 20		eor #$20			eor 	#"A"^"a"					; make U/C
.3a2e					_TFCWrite:
.3a2e	91 28		sta ($28),y			sta 	(codePtr),y
.3a30	c8		iny				iny
.3a31	4c 12 3a	jmp $3a12			jmp 	_TFCLoop
.3a34					_TFCControl:
.3a34	a9 20		lda #$20			lda 	#" "
.3a36	d0 f6		bne $3a2e			bne 	_TFCWrite
.3a38					_TFCExit:
.3a38	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokident.asm

.3a39					TokeniseIdentifier:
.3a39	a2 00		ldx #$00			ldx 	#0
.3a3b					_TICopyID:
.3a3b	b1 28		lda ($28),y			lda 	(codePtr),y					; get characters
.3a3d	c9 5f		cmp #$5f			cmp 	#"_" 						; underscore converted to minus internally.
.3a3f	f0 16		beq $3a57			beq 	_TICopyUnderscore
.3a41	c9 2e		cmp #$2e			cmp 	#"."
.3a43	f0 14		beq $3a59			beq 	_TICopyIn
.3a45	c9 30		cmp #$30			cmp 	#"0"
.3a47	90 1b		bcc $3a64			bcc 	_TIEndCopy
.3a49	c9 3a		cmp #$3a			cmp 	#"9"+1
.3a4b	90 0c		bcc $3a59			bcc 	_TICopyIn
.3a4d	c9 41		cmp #$41			cmp 	#"A"
.3a4f	90 13		bcc $3a64			bcc 	_TIEndCopy
.3a51	c9 5b		cmp #$5b			cmp 	#"Z"+1
.3a53	b0 0f		bcs $3a64			bcs		_TIEndCopy
.3a55	90 02		bcc $3a59			bcc 	_TICopyIn
.3a57					_TICopyUnderScore:
.3a57	a9 2d		lda #$2d			lda 	#"-"						; _ is mapped to -
.3a59					_TICopyIn:
.3a59	e8		inx				inx 								; write into buffer in 7 bit ASCII form
.3a5a	9d cf 0a	sta $0acf,x			sta 	convertBuffer,x
.3a5d	8e cf 0a	stx $0acf			stx 	convertBuffer
.3a60	c8		iny				iny 								; next character
.3a61	4c 3b 3a	jmp $3a3b			jmp 	_TICopyID 					; loop round
.3a64					_TIEndCopy:
.3a64	a9 24		lda #$24			lda 	#"$"
.3a66	20 bb 3a	jsr $3abb			jsr 	TIDCheckCopy
.3a69	a9 23		lda #$23			lda 	#"#"
.3a6b	20 bb 3a	jsr $3abb			jsr 	TIDCheckCopy
.3a6e	a9 28		lda #$28			lda 	#"("
.3a70	20 bb 3a	jsr $3abb			jsr 	TIDCheckCopy
.3a73	20 f0 38	jsr $38f0			jsr 	TokenSearch 				; is it a token
.3a76	b0 41		bcs $3ab9			bcs 	_TIExit 					; if so, then exit.
.3a78	98		tya				tya
.3a79	48		pha				pha
.3a7a	a0 3a		ldy #$3a			ldy 	#$3A 						; default type.
.3a7c	ae cf 0a	ldx $0acf			ldx 	convertBuffer 				; is last character (
.3a7f	bd cf 0a	lda $0acf,x			lda 	convertBuffer,x
.3a82	c9 28		cmp #$28			cmp 	#"("
.3a84	d0 02		bne $3a88			bne 	_TINotArray
.3a86	ca		dex				dex 								; yes, remove it and convert to array.
.3a87	c8		iny				iny
.3a88					_TINotArray:
.3a88	bd cf 0a	lda $0acf,x			lda 	convertBuffer,x 			; check for $
.3a8b	c9 24		cmp #$24			cmp 	#"$"
.3a8d	d0 03		bne $3a92			bne 	_TINotString
.3a8f	ca		dex				dex
.3a90	c8		iny				iny
.3a91	c8		iny				iny
.3a92					_TINotString:
.3a92	bd cf 0a	lda $0acf,x			lda 	convertBuffer,x 			; check for #
.3a95	c9 23		cmp #$23			cmp 	#"#"
.3a97	d0 05		bne $3a9e			bne 	_TINotFloat
.3a99	ca		dex				dex
.3a9a	c8		iny				iny
.3a9b	c8		iny				iny
.3a9c	c8		iny				iny
.3a9d	c8		iny				iny
.3a9e					_TINotFloat:
.3a9e	e8		inx				inx 								; write end marker for identifier.
.3a9f	98		tya				tya
.3aa0	9d cf 0a	sta $0acf,x			sta 	convertBuffer,x
.3aa3	8e cf 0a	stx $0acf			stx 	convertBuffer 				; update length.
.3aa6	a2 01		ldx #$01			ldx 	#1
.3aa8					_TIOutput:
.3aa8	bd cf 0a	lda $0acf,x			lda 	convertBuffer,x
.3aab	29 3f		and #$3f			and 	#$3F
.3aad	48		pha				pha
.3aae	20 e0 39	jsr $39e0			jsr 	TokenWrite
.3ab1	e8		inx				inx
.3ab2	68		pla				pla
.3ab3	c9 3a		cmp #$3a			cmp 	#$3A
.3ab5	90 f1		bcc $3aa8			bcc 	_TIOutput
.3ab7	68		pla				pla
.3ab8	a8		tay				tay
.3ab9					_TIExit:
.3ab9	38		sec				sec 								; this can't fail.
.3aba	60		rts				rts
.3abb					TIDCheckCopy:
.3abb	d1 28		cmp ($28),y			cmp 	(codePtr),y
.3abd	d0 08		bne $3ac7			bne 	_TIDCCExit
.3abf	e8		inx				inx
.3ac0	9d cf 0a	sta $0acf,x			sta 	convertBuffer,x
.3ac3	8e cf 0a	stx $0acf			stx 	convertBuffer
.3ac6	c8		iny				iny
.3ac7					_TIDCCExit:
.3ac7	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokinteger.asm

.3ac8					TokeniseInteger:
.3ac8	85 2c		sta $2c				sta 	temp1 						; save base
.3aca	a2 00		ldx #$00			ldx 	#0							; count of chars so far
.3acc	8e cf 0a	stx $0acf			stx 	convertBuffer
.3acf					_TIGetChars:
.3acf	b1 28		lda ($28),y			lda 	(codePtr),y 				; check character is numeric
.3ad1	c9 30		cmp #$30			cmp 	#"0"
.3ad3	90 1f		bcc $3af4			bcc 	_TIEndGet
.3ad5	c9 3a		cmp #$3a			cmp 	#"9"+1
.3ad7	90 10		bcc $3ae9			bcc 	_TIHaveChar
.3ad9	a5 2c		lda $2c				lda 	temp1 						; fail if not hex mode
.3adb	c9 0a		cmp #$0a			cmp 	#10
.3add	f0 15		beq $3af4			beq 	_TIEndGet
.3adf	b1 28		lda ($28),y			lda 	(codePtr),y 				; check legitimate hex.
.3ae1	c9 41		cmp #$41			cmp 	#"A"
.3ae3	90 0f		bcc $3af4			bcc 	_TIEndGet
.3ae5	c9 5b		cmp #$5b			cmp 	#"Z"+1
.3ae7	b0 0b		bcs $3af4			bcs 	_TIEndGet
.3ae9					_TIHaveChar:
.3ae9	e8		inx				inx 								; write into buffer.
.3aea	8e cf 0a	stx $0acf			stx 	convertBuffer
.3aed	9d cf 0a	sta $0acf,x			sta 	convertBuffer,x
.3af0	c8		iny				iny 								; next char
.3af1	4c cf 3a	jmp $3acf			jmp 	_TIGetChars
.3af4					_TIEndGet:
.3af4	e0 00		cpx #$00			cpx 	#0 							; no char acquired.
.3af6	f0 1c		beq $3b14			beq 	_TIFail
.3af8	98		tya				tya
.3af9	48		pha				pha
.3afa	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.3afc	85 2a		sta $2a				sta 	temp0
.3afe	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.3b00	85 2b		sta $2b				sta 	1+(temp0)
.3b02	a9 00		lda #$00			lda 	#0 							; stack level 0
.3b04	a4 2c		ldy $2c				ldy 	temp1 						; base Y
.3b06	a2 1a		ldx #$1a		ldx	#26
.3b08	20 fb 33	jsr $33fb		jsr	mainHandler
.3b0b	68		pla				pla
.3b0c	a8		tay				tay
.3b0d	90 05		bcc $3b14			bcc 	_TIFail 					; didn't convert.
.3b0f	20 16 3b	jsr $3b16			jsr 	TIRecursiveOut 				; recursive output ?
.3b12	38		sec				sec
.3b13	60		rts				rts
.3b14					_TIFail:
.3b14	18		clc				clc
.3b15	60		rts				rts
.3b16					TIRecursiveOut:
.3b16	a5 50		lda $50				lda 	esInt0 						; get value to output after possible recursion
.3b18	29 3f		and #$3f			and 	#$3F
.3b1a	09 40		ora #$40			ora 	#$40
.3b1c	48		pha				pha
.3b1d	a5 50		lda $50				lda 	esInt0 						; are we recursing ?
.3b1f	29 c0		and #$c0			and 	#$C0
.3b21	05 58		ora $58				ora 	esInt1
.3b23	05 60		ora $60				ora 	esInt2
.3b25	05 68		ora $68				ora 	esInt3
.3b27	f0 10		beq $3b39			beq 	_TIRONoRecursion
.3b29	a2 06		ldx #$06			ldx 	#6 							; shift right x 6
.3b2b					_TIROShift:
.3b2b	46 68		lsr $68				lsr 	esInt3
.3b2d	66 60		ror $60				ror 	esInt2
.3b2f	66 58		ror $58				ror 	esInt1
.3b31	66 50		ror $50				ror 	esInt0
.3b33	ca		dex				dex
.3b34	d0 f5		bne $3b2b			bne 	_TIROShift
.3b36	20 16 3b	jsr $3b16			jsr 	TIRecursiveOut 				; call recursively
.3b39					_TIRONoRecursion:
.3b39	68		pla				pla 								; pull the old bit.
.3b3a	4c e0 39	jmp $39e0			jmp 	TokenWrite

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokpunct.asm

.3b3d					TokenisePunctuation:
.3b3d	b1 28		lda ($28),y			lda	 	(codePtr),y 				; copy next 2 chars into convertBuffer
.3b3f	8d d0 0a	sta $0ad0			sta 	convertBuffer+1
.3b42	c8		iny				iny
.3b43	b1 28		lda ($28),y			lda 	(codePtr),y
.3b45	8d d1 0a	sta $0ad1			sta 	convertBuffer+2
.3b48	c8		iny				iny 								; Y is +2
.3b49	a9 02		lda #$02			lda 	#2 							; 2 character string.
.3b4b	8d cf 0a	sta $0acf			sta 	convertBuffer
.3b4e	20 f0 38	jsr $38f0			jsr 	TokenSearch 				; search for that token.
.3b51	b0 0a		bcs $3b5d			bcs 	_TIFound
.3b53	ce cf 0a	dec $0acf			dec 	convertBuffer 				; make it a 1 character string
.3b56	88		dey				dey 								; Y is now +1
.3b57	20 f0 38	jsr $38f0			jsr 	TokenSearch 				; search for that token.
.3b5a	b0 01		bcs $3b5d			bcs 	_TIFound
.3b5c	88		dey				dey 								; Y is now +0, carry clear indicating failure.
.3b5d					_TIFound:
.3b5d	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokstring.asm

.3b5e					TokeniseString:
.3b5e	c8		iny				iny 								; skip opening quote
.3b5f	a2 ff		ldx #$ff			ldx 	#255 						; count length of string.
.3b61	84 2a		sty $2a				sty 	temp0 						; save start.
.3b63					_TSGetLength:
.3b63	b1 28		lda ($28),y			lda 	(codePtr),y 				; get next
.3b65	f0 21		beq $3b88			beq 	_TSFail						; end of line, fail
.3b67	c8		iny				iny
.3b68	e8		inx				inx
.3b69	c9 22		cmp #$22			cmp 	#'"' 						; until end quote found.
.3b6b	d0 f6		bne $3b63			bne 	_TSGetLength
.3b6d	a9 85		lda #$85			lda 	#TOK_STR 					; write string token out
.3b6f	20 e0 39	jsr $39e0			jsr 	TokenWrite
.3b72	8a		txa				txa 								; output length
.3b73	20 e0 39	jsr $39e0			jsr 	TokenWrite
.3b76	a4 2a		ldy $2a				ldy 	temp0 						; get original position
.3b78	e0 00		cpx #$00			cpx 	#0 							; check ended
.3b7a	f0 09		beq $3b85			beq 	_TSExit
.3b7c					_TSOutput:
.3b7c	b1 28		lda ($28),y			lda 	(codePtr),y					; output character
.3b7e	20 e0 39	jsr $39e0			jsr 	TokenWrite
.3b81	c8		iny				iny
.3b82	ca		dex				dex
.3b83	d0 f7		bne $3b7c			bne 	_TSOutput
.3b85					_TSExit:
.3b85	c8		iny				iny 								; skip ending quote
.3b86	38		sec				sec 								; return CS.
.3b87	60		rts				rts
.3b88					_TSFail:
.3b88	18		clc				clc
.3b89	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokentext.asm

.3b8a					TokenTableAddress:
>3b8a	92 3b						.word 	Group0Text
>3b8c	5b 3d						.word 	Group1Text
>3b8e	a8 3e						.word 	Group2Text
>3b90	cf 3e						.word 	Group3Text

;******  Processing file: tokeniser/../generated/tokentext0.inc

.3b92					Group0Text:
>3b92	03 41 4e c4				.byte $03,$41,$4e,$c4                  ; $86 and
>3b96	02 4f d2				.byte $02,$4f,$d2                      ; $87 or
>3b99	03 58 4f d2				.byte $03,$58,$4f,$d2                  ; $88 xor
>3b9d	02 3e bd				.byte $02,$3e,$bd                      ; $89 >=
>3ba0	02 3c bd				.byte $02,$3c,$bd                      ; $8a <=
>3ba3	01 be					.byte $01,$be                          ; $8b >
>3ba5	01 bc					.byte $01,$bc                          ; $8c <
>3ba7	01 bd					.byte $01,$bd                          ; $8d =
>3ba9	02 3c be				.byte $02,$3c,$be                      ; $8e <>
>3bac	01 ab					.byte $01,$ab                          ; $8f +
>3bae	01 ad					.byte $01,$ad                          ; $90 -
>3bb0	02 3e be				.byte $02,$3e,$be                      ; $91 >>
>3bb3	02 3c bc				.byte $02,$3c,$bc                      ; $92 <<
>3bb6	01 aa					.byte $01,$aa                          ; $93 *
>3bb8	01 af					.byte $01,$af                          ; $94 /
>3bba	03 4d 4f c4				.byte $03,$4d,$4f,$c4                  ; $95 mod
>3bbe	01 de					.byte $01,$de                          ; $96 ^
>3bc0	01 a1					.byte $01,$a1                          ; $97 !
>3bc2	01 bf					.byte $01,$bf                          ; $98 ?
>3bc4	06 52 45 50 45 41 d4			.byte $06,$52,$45,$50,$45,$41,$d4      ; $99 repeat
>3bcb	05 57 48 49 4c c5			.byte $05,$57,$48,$49,$4c,$c5          ; $9a while
>3bd1	03 46 4f d2				.byte $03,$46,$4f,$d2                  ; $9b for
>3bd5	02 49 c6				.byte $02,$49,$c6                      ; $9c if
>3bd8	07 44 45 46 50 52 4f c3			.byte $07,$44,$45,$46,$50,$52,$4f,$c3  ; $9d defproc
>3be0	05 55 4e 54 49 cc			.byte $05,$55,$4e,$54,$49,$cc          ; $9e until
>3be6	04 57 45 4e c4				.byte $04,$57,$45,$4e,$c4              ; $9f wend
>3beb	04 4e 45 58 d4				.byte $04,$4e,$45,$58,$d4              ; $a0 next
>3bf0	04 54 48 45 ce				.byte $04,$54,$48,$45,$ce              ; $a1 then
>3bf5	05 45 4e 44 49 c6			.byte $05,$45,$4e,$44,$49,$c6          ; $a2 endif
>3bfb	07 45 4e 44 50 52 4f c3			.byte $07,$45,$4e,$44,$50,$52,$4f,$c3  ; $a3 endproc
>3c03	01 a8					.byte $01,$a8                          ; $a4 (
>3c05	04 4c 45 4e a8				.byte $04,$4c,$45,$4e,$a8              ; $a5 len(
>3c0a	04 53 47 4e a8				.byte $04,$53,$47,$4e,$a8              ; $a6 sgn(
>3c0f	04 41 42 53 a8				.byte $04,$41,$42,$53,$a8              ; $a7 abs(
>3c14	07 52 41 4e 44 4f 4d a8			.byte $07,$52,$41,$4e,$44,$4f,$4d,$a8  ; $a8 random(
>3c1c	04 50 41 47 c5				.byte $04,$50,$41,$47,$c5              ; $a9 page
>3c21	04 54 52 55 c5				.byte $04,$54,$52,$55,$c5              ; $aa true
>3c26	05 46 41 4c 53 c5			.byte $05,$46,$41,$4c,$53,$c5          ; $ab false
>3c2c	04 4d 49 4e a8				.byte $04,$4d,$49,$4e,$a8              ; $ac min(
>3c31	04 4d 41 58 a8				.byte $04,$4d,$41,$58,$a8              ; $ad max(
>3c36	04 53 59 53 a8				.byte $04,$53,$59,$53,$a8              ; $ae sys(
>3c3b	06 54 49 4d 45 52 a8			.byte $06,$54,$49,$4d,$45,$52,$a8      ; $af timer(
>3c42	06 45 56 45 4e 54 a8			.byte $06,$45,$56,$45,$4e,$54,$a8      ; $b0 event(
>3c49	04 47 45 54 a8				.byte $04,$47,$45,$54,$a8              ; $b1 get(
>3c4e	06 49 4e 4b 45 59 a8			.byte $06,$49,$4e,$4b,$45,$59,$a8      ; $b2 inkey(
>3c55	06 41 4c 4c 4f 43 a8			.byte $06,$41,$4c,$4c,$4f,$43,$a8      ; $b3 alloc(
>3c5c	05 43 48 52 24 a8			.byte $05,$43,$48,$52,$24,$a8          ; $b4 chr$(
>3c62	06 4c 45 46 54 24 a8			.byte $06,$4c,$45,$46,$54,$24,$a8      ; $b5 left$(
>3c69	05 4d 49 44 24 a8			.byte $05,$4d,$49,$44,$24,$a8          ; $b6 mid$(
>3c6f	07 52 49 47 48 54 24 a8			.byte $07,$52,$49,$47,$48,$54,$24,$a8  ; $b7 right$(
>3c77	05 53 54 52 24 a8			.byte $05,$53,$54,$52,$24,$a8          ; $b8 str$(
>3c7d	04 56 41 4c a8				.byte $04,$56,$41,$4c,$a8              ; $b9 val(
>3c82	05 50 45 45 4b a8			.byte $05,$50,$45,$45,$4b,$a8          ; $ba peek(
>3c88	05 44 45 45 4b a8			.byte $05,$44,$45,$45,$4b,$a8          ; $bb deek(
>3c8e	05 4c 45 45 4b a8			.byte $05,$4c,$45,$45,$4b,$a8          ; $bc leek(
>3c94	04 41 53 43 a8				.byte $04,$41,$53,$43,$a8              ; $bd asc(
>3c99	04 49 4e 54 a8				.byte $04,$49,$4e,$54,$a8              ; $be int(
>3c9e	06 46 4c 4f 41 54 a8			.byte $06,$46,$4c,$4f,$41,$54,$a8      ; $bf float(
>3ca5	06 49 53 56 41 4c a8			.byte $06,$49,$53,$56,$41,$4c,$a8      ; $c0 isval(
>3cac	07 55 50 50 45 52 24 a8			.byte $07,$55,$50,$50,$45,$52,$24,$a8  ; $c1 upper$(
>3cb4	07 4c 4f 57 45 52 24 a8			.byte $07,$4c,$4f,$57,$45,$52,$24,$a8  ; $c2 lower$(
>3cbc	01 c0					.byte $01,$c0                          ; $c3 @
>3cbe	01 fe					.byte $01,$fe                          ; $c4 ~
>3cc0	01 a6					.byte $01,$a6                          ; $c5 &
>3cc2	05 47 45 54 24 a8			.byte $05,$47,$45,$54,$24,$a8          ; $c6 get$(
>3cc8	07 49 4e 4b 45 59 24 a8			.byte $07,$49,$4e,$4b,$45,$59,$24,$a8  ; $c7 inkey$(
>3cd0	03 4d 45 cd				.byte $03,$4d,$45,$cd                  ; $c8 mem
>3cd4	01 a9					.byte $01,$a9                          ; $c9 )
>3cd6	01 ba					.byte $01,$ba                          ; $ca :
>3cd8	01 ac					.byte $01,$ac                          ; $cb ,
>3cda	01 bb					.byte $01,$bb                          ; $cc ;
>3cdc	01 a7					.byte $01,$a7                          ; $cd '
>3cde	02 54 cf				.byte $02,$54,$cf                      ; $ce to
>3ce1	04 53 54 45 d0				.byte $04,$53,$54,$45,$d0              ; $cf step
>3ce6	04 50 52 4f c3				.byte $04,$50,$52,$4f,$c3              ; $d0 proc
>3ceb	05 4c 4f 43 41 cc			.byte $05,$4c,$4f,$43,$41,$cc          ; $d1 local
>3cf1	03 44 49 cd				.byte $03,$44,$49,$cd                  ; $d2 dim
>3cf5	03 52 45 cd				.byte $03,$52,$45,$cd                  ; $d3 rem
>3cf9	03 4c 45 d4				.byte $03,$4c,$45,$d4                  ; $d4 let
>3cfd	05 49 4e 50 55 d4			.byte $05,$49,$4e,$50,$55,$d4          ; $d5 input
>3d03	04 45 4c 53 c5				.byte $04,$45,$4c,$53,$c5              ; $d6 else
>3d08	03 56 44 d5				.byte $03,$56,$44,$d5                  ; $d7 vdu
>3d0c	05 50 52 49 4e d4			.byte $05,$50,$52,$49,$4e,$d4          ; $d8 print
>3d12	04 44 41 54 c1				.byte $04,$44,$41,$54,$c1              ; $d9 data
>3d17	05 49 4d 41 47 c5			.byte $05,$49,$4d,$41,$47,$c5          ; $da image
>3d1d	02 41 d4				.byte $02,$41,$d4                      ; $db at
>3d20	04 46 4c 49 d0				.byte $04,$46,$4c,$49,$d0              ; $dc flip
>3d25	06 41 53 53 45 52 d4			.byte $06,$41,$53,$53,$45,$52,$d4      ; $dd assert
>3d2c	04 50 4f 4b c5				.byte $04,$50,$4f,$4b,$c5              ; $de poke
>3d31	04 44 4f 4b c5				.byte $04,$44,$4f,$4b,$c5              ; $df doke
>3d36	04 4c 4f 4b c5				.byte $04,$4c,$4f,$4b,$c5              ; $e0 loke
>3d3b	03 49 4e cb				.byte $03,$49,$4e,$cb                  ; $e1 ink
>3d3f	05 50 41 50 45 d2			.byte $05,$50,$41,$50,$45,$d2          ; $e2 paper
>3d45	03 43 4c d3				.byte $03,$43,$4c,$d3                  ; $e3 cls
>3d49	06 4c 4f 43 41 54 c5			.byte $06,$4c,$4f,$43,$41,$54,$c5      ; $e4 locate
>3d50	01 ae					.byte $01,$ae                          ; $e5 .
>3d52	01 a3					.byte $01,$a3                          ; $e6 #
>3d54	05 43 4c 45 41 d2			.byte $05,$43,$4c,$45,$41,$d2          ; $e7 clear
>3d5a	00					.byte $00

;******  Return to file: tokeniser/tokentext.asm


;******  Processing file: tokeniser/../generated/tokentext1.inc

.3d5b					Group1Text:
>3d5b	04 4c 4f 41 c4				.byte $04,$4c,$4f,$41,$c4              ; $86 load
>3d60	04 53 41 56 c5				.byte $04,$53,$41,$56,$c5              ; $87 save
>3d65	04 4c 49 53 d4				.byte $04,$4c,$49,$53,$d4              ; $88 list
>3d6a	03 4e 45 d7				.byte $03,$4e,$45,$d7                  ; $89 new
>3d6e	05 42 52 45 41 cb			.byte $05,$42,$52,$45,$41,$cb          ; $8a break
>3d74	03 52 55 ce				.byte $03,$52,$55,$ce                  ; $8b run
>3d78	04 52 45 41 c4				.byte $04,$52,$45,$41,$c4              ; $8c read
>3d7d	07 52 45 53 54 4f 52 c5			.byte $07,$52,$45,$53,$54,$4f,$52,$c5  ; $8d restore
>3d85	03 45 4e c4				.byte $03,$45,$4e,$c4                  ; $8e end
>3d89	04 53 54 4f d0				.byte $04,$53,$54,$4f,$d0              ; $8f stop
>3d8e	04 58 45 4d d5				.byte $04,$58,$45,$4d,$d5              ; $90 xemu
>3d93	04 47 4f 54 cf				.byte $04,$47,$4f,$54,$cf              ; $91 goto
>3d98	05 47 4f 53 55 c2			.byte $05,$47,$4f,$53,$55,$c2          ; $92 gosub
>3d9e	06 52 45 54 55 52 ce			.byte $06,$52,$45,$54,$55,$52,$ce      ; $93 return
>3da5	03 4f 52 c1				.byte $03,$4f,$52,$c1                  ; $94 ora
>3da9	05 28 41 4e 44 a9			.byte $05,$28,$41,$4e,$44,$a9          ; $95 (and)
>3daf	03 45 4f d2				.byte $03,$45,$4f,$d2                  ; $96 eor
>3db3	03 41 44 c3				.byte $03,$41,$44,$c3                  ; $97 adc
>3db7	03 53 54 c1				.byte $03,$53,$54,$c1                  ; $98 sta
>3dbb	03 4c 44 c1				.byte $03,$4c,$44,$c1                  ; $99 lda
>3dbf	03 43 4d d0				.byte $03,$43,$4d,$d0                  ; $9a cmp
>3dc3	03 53 42 c3				.byte $03,$53,$42,$c3                  ; $9b sbc
>3dc7	03 41 53 cc				.byte $03,$41,$53,$cc                  ; $9c asl
>3dcb	03 52 4f cc				.byte $03,$52,$4f,$cc                  ; $9d rol
>3dcf	03 4c 53 d2				.byte $03,$4c,$53,$d2                  ; $9e lsr
>3dd3	03 52 4f d2				.byte $03,$52,$4f,$d2                  ; $9f ror
>3dd7	03 53 54 d8				.byte $03,$53,$54,$d8                  ; $a0 stx
>3ddb	03 4c 44 d8				.byte $03,$4c,$44,$d8                  ; $a1 ldx
>3ddf	03 44 45 c3				.byte $03,$44,$45,$c3                  ; $a2 dec
>3de3	03 49 4e c3				.byte $03,$49,$4e,$c3                  ; $a3 inc
>3de7	03 53 54 da				.byte $03,$53,$54,$da                  ; $a4 stz
>3deb	03 42 49 d4				.byte $03,$42,$49,$d4                  ; $a5 bit
>3def	03 53 54 d9				.byte $03,$53,$54,$d9                  ; $a6 sty
>3df3	03 4c 44 d9				.byte $03,$4c,$44,$d9                  ; $a7 ldy
>3df7	03 43 50 d9				.byte $03,$43,$50,$d9                  ; $a8 cpy
>3dfb	03 43 50 d8				.byte $03,$43,$50,$d8                  ; $a9 cpx
>3dff	03 54 53 c2				.byte $03,$54,$53,$c2                  ; $aa tsb
>3e03	03 54 52 c2				.byte $03,$54,$52,$c2                  ; $ab trb
>3e07	03 4a 53 d2				.byte $03,$4a,$53,$d2                  ; $ac jsr
>3e0b	03 4a 4d d0				.byte $03,$4a,$4d,$d0                  ; $ad jmp
>3e0f	03 42 50 cc				.byte $03,$42,$50,$cc                  ; $ae bpl
>3e13	03 42 4d c9				.byte $03,$42,$4d,$c9                  ; $af bmi
>3e17	03 42 56 c3				.byte $03,$42,$56,$c3                  ; $b0 bvc
>3e1b	03 42 56 d3				.byte $03,$42,$56,$d3                  ; $b1 bvs
>3e1f	03 42 43 c3				.byte $03,$42,$43,$c3                  ; $b2 bcc
>3e23	03 42 43 d3				.byte $03,$42,$43,$d3                  ; $b3 bcs
>3e27	03 42 4e c5				.byte $03,$42,$4e,$c5                  ; $b4 bne
>3e2b	03 42 45 d1				.byte $03,$42,$45,$d1                  ; $b5 beq
>3e2f	03 42 52 c1				.byte $03,$42,$52,$c1                  ; $b6 bra
>3e33	03 42 52 cb				.byte $03,$42,$52,$cb                  ; $b7 brk
>3e37	03 50 48 d0				.byte $03,$50,$48,$d0                  ; $b8 php
>3e3b	03 43 4c c3				.byte $03,$43,$4c,$c3                  ; $b9 clc
>3e3f	03 50 4c d0				.byte $03,$50,$4c,$d0                  ; $ba plp
>3e43	03 53 45 c3				.byte $03,$53,$45,$c3                  ; $bb sec
>3e47	03 52 54 c9				.byte $03,$52,$54,$c9                  ; $bc rti
>3e4b	03 50 48 c1				.byte $03,$50,$48,$c1                  ; $bd pha
>3e4f	03 43 4c c9				.byte $03,$43,$4c,$c9                  ; $be cli
>3e53	03 50 48 d9				.byte $03,$50,$48,$d9                  ; $bf phy
>3e57	03 52 54 d3				.byte $03,$52,$54,$d3                  ; $c0 rts
>3e5b	03 50 4c c1				.byte $03,$50,$4c,$c1                  ; $c1 pla
>3e5f	03 53 45 c9				.byte $03,$53,$45,$c9                  ; $c2 sei
>3e63	03 50 4c d9				.byte $03,$50,$4c,$d9                  ; $c3 ply
>3e67	03 44 45 d9				.byte $03,$44,$45,$d9                  ; $c4 dey
>3e6b	03 54 58 c1				.byte $03,$54,$58,$c1                  ; $c5 txa
>3e6f	03 54 59 c1				.byte $03,$54,$59,$c1                  ; $c6 tya
>3e73	03 54 58 d3				.byte $03,$54,$58,$d3                  ; $c7 txs
>3e77	03 54 41 d9				.byte $03,$54,$41,$d9                  ; $c8 tay
>3e7b	03 54 41 d8				.byte $03,$54,$41,$d8                  ; $c9 tax
>3e7f	03 43 4c d6				.byte $03,$43,$4c,$d6                  ; $ca clv
>3e83	03 54 53 d8				.byte $03,$54,$53,$d8                  ; $cb tsx
>3e87	03 49 4e d9				.byte $03,$49,$4e,$d9                  ; $cc iny
>3e8b	03 44 45 d8				.byte $03,$44,$45,$d8                  ; $cd dex
>3e8f	03 43 4c c4				.byte $03,$43,$4c,$c4                  ; $ce cld
>3e93	03 50 48 d8				.byte $03,$50,$48,$d8                  ; $cf phx
>3e97	03 49 4e d8				.byte $03,$49,$4e,$d8                  ; $d0 inx
>3e9b	03 4e 4f d0				.byte $03,$4e,$4f,$d0                  ; $d1 nop
>3e9f	03 53 45 c4				.byte $03,$53,$45,$c4                  ; $d2 sed
>3ea3	03 50 4c d8				.byte $03,$50,$4c,$d8                  ; $d3 plx
>3ea7	00					.byte $00

;******  Return to file: tokeniser/tokentext.asm


;******  Processing file: tokeniser/../generated/tokentext2.inc

.3ea8					Group2Text:
>3ea8	05 56 50 4f 4b c5			.byte $05,$56,$50,$4f,$4b,$c5          ; $86 vpoke
>3eae	05 56 44 4f 4b c5			.byte $05,$56,$44,$4f,$4b,$c5          ; $87 vdoke
>3eb4	05 56 4c 4f 41 c4			.byte $05,$56,$4c,$4f,$41,$c4          ; $88 vload
>3eba	04 4d 4f 44 c5				.byte $04,$4d,$4f,$44,$c5              ; $89 mode
>3ebf	07 50 41 4c 45 54 54 c5			.byte $07,$50,$41,$4c,$45,$54,$54,$c5  ; $8a palette
>3ec7	06 53 50 52 49 54 c5			.byte $06,$53,$50,$52,$49,$54,$c5      ; $8b sprite
>3ece	00					.byte $00

;******  Return to file: tokeniser/tokentext.asm


;******  Processing file: tokeniser/../generated/tokentext3.inc

.3ecf					Group3Text:
>3ecf	06 56 50 45 45 4b a8			.byte $06,$56,$50,$45,$45,$4b,$a8      ; $86 vpeek(
>3ed6	06 56 44 45 45 4b a8			.byte $06,$56,$44,$45,$45,$4b,$a8      ; $87 vdeek(
>3edd	00					.byte $00

;******  Return to file: tokeniser/tokentext.asm


;******  Return to file: tokeniser/tokeniser.asm

.3ede					tokeniserHandler:
.3ede	7c e1 3e	jmp ($3ee1,x)			jmp 	(tokeniserVectors,x)
.3ee1					tokeniserVectors:
>3ee1	ed 3e					.word _DummyControlHandler ; index 0
>3ee3	da 36					.word Detokenise           ; index 2
>3ee5	ce 36					.word ListLine             ; index 4
>3ee7	5f 39					.word TokTest              ; index 6
>3ee9	7f 39					.word Tokenise             ; index 8
>3eeb	82 39					.word TokeniseASCIIZ       ; index 10
.3eed					_DummyControlHandler:
.3eed	60		rts			rts

;******  Return to file: basic.asm

.3eee					section_end_tokeniser:
.3eee					section_start_variable:

;******  Processing file: variable/variable.asm


;******  Processing file: variable/array/access.asm

.3eee					AccessArray:
.3eee	8a		txa				txa
.3eef	48		pha				pha
.3ef0	e8		inx				inx
.3ef1	20 ba 3f	jsr $3fba			jsr 	GetArrayDimensions 			; get the array dimensions one up from here.
.3ef4	68		pla				pla
.3ef5	aa		tax				tax
.3ef6	b5 50		lda $50,x			lda 	esInt0,x 					; restore address to follow in temp0.
.3ef8	85 2a		sta $2a				sta 	temp0
.3efa	b5 58		lda $58,x			lda 	esInt1,x
.3efc	85 2b		sta $2b				sta 	temp0+1
.3efe	8a		txa				txa
.3eff	48		pha				pha
.3f00	98		tya				tya
.3f01	48		pha				pha
.3f02					_AAFollow:
.3f02	a0 00		ldy #$00			ldy 	#0
.3f04	b1 2a		lda ($2a),y			lda 	(temp0),y
.3f06	48		pha				pha
.3f07	c8		iny				iny
.3f08	b1 2a		lda ($2a),y			lda 	(temp0),y
.3f0a	85 2b		sta $2b				sta 	temp0+1
.3f0c	68		pla				pla
.3f0d	85 2a		sta $2a				sta 	temp0
.3f0f	e8		inx				inx 								; advance to next stack slot.
.3f10	a0 00		ldy #$00			ldy 	#0
.3f12	b1 2a		lda ($2a),y			lda 	(temp0),y 					; compare max index vs required index
.3f14	d5 50		cmp $50,x			cmp 	esInt0,x
.3f16	c8		iny				iny
.3f17	b1 2a		lda ($2a),y			lda 	(temp0),y 					; drop bit 7 of the size, indicates follow.
.3f19	85 2c		sta $2c				sta 	temp1 						; save the size in temp1 for later use.
.3f1b	29 7f		and #$7f			and 	#$7F
.3f1d	f5 58		sbc $58,x			sbc 	esInt1,x
.3f1f	90 50		bcc $3f71			bcc 	_AABadIndex 				; failed on index if max index < required.
.3f21	18		clc				clc
.3f22	a5 2a		lda $2a				lda 	temp0
.3f24	69 02		adc #$02			adc 	#2
.3f26	85 2a		sta $2a				sta 	temp0
.3f28	90 02		bcc $3f2c			bcc 	_AANoCarry
.3f2a	e6 2b		inc $2b				inc 	temp0+1
.3f2c					_AANoCarry:
.3f2c	b5 50		lda $50,x			lda 	esInt0,x
.3f2e	85 2e		sta $2e				sta 	temp2
.3f30	b5 58		lda $58,x			lda 	esInt1,x
.3f32	85 2f		sta $2f				sta 	temp2+1
.3f34	ac ed 0d	ldy $0ded			ldy 	varType
.3f37	b9 14 40	lda $4014,y			lda 	CAActualSize-$3A,y
.3f3a	b4 49		ldy $49,x			ldy 	esType+1,x 					; is it top level
.3f3c	30 02		bmi $3f40			bmi 	_AANotPointer
.3f3e	a9 02		lda #$02			lda 	#2 							; array of pointers is 2.
.3f40					_AANotPointer:
.3f40	20 be 40	jsr $40be			jsr 	MultiplyTemp2ByA 			; multiply the index by the data size, in temp2.
.3f43	18		clc				clc
.3f44	a5 2a		lda $2a				lda 	temp0
.3f46	65 2e		adc $2e				adc 	temp2
.3f48	85 2a		sta $2a				sta 	temp0
.3f4a	a5 2b		lda $2b				lda 	temp0+1
.3f4c	65 2f		adc $2f				adc 	temp2+1
.3f4e	85 2b		sta $2b				sta 	temp0+1
.3f50	b5 49		lda $49,x			lda 	esType+1,x
.3f52	30 07		bmi $3f5b			bmi 	_AAUsedAllIndices
.3f54	a5 2c		lda $2c				lda 	temp1 						; check if this is a pointer array e.g. there are subarrays
.3f56	10 14		bpl $3f6c			bpl 	_AABadDepth 				; no, too many indexes.
.3f58	4c 02 3f	jmp $3f02			jmp 	_AAFollow 					; otherwise follow them.
.3f5b					_AAUsedAllIndices:
.3f5b	a5 2c		lda $2c				lda 	temp1 						; get original high length byte.
.3f5d	30 0d		bmi $3f6c			bmi 	_AABadDepth 				; if -ve then this is an array of pointers.
.3f5f	68		pla				pla
.3f60	a8		tay				tay
.3f61	68		pla				pla
.3f62	aa		tax				tax
.3f63	a5 2a		lda $2a				lda 	temp0 						; copy address of array element to stack,x
.3f65	95 50		sta $50,x			sta 	esInt0,x
.3f67	a5 2b		lda $2b				lda 	temp0+1
.3f69	95 58		sta $58,x			sta 	esInt1,x
.3f6b	60		rts				rts
.3f6c					_AABadDepth:
.3f6c	a2 1c		ldx #$1c			ldx 	#ErrorID_ArrayDepth
.3f6e	20 18 15	jsr $1518		jsr	errorHandler
.3f71					_AABadIndex:
.3f71	a2 1b		ldx #$1b			ldx 	#ErrorID_ArrayIndex
.3f73	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: variable/variable.asm


;******  Processing file: variable/array/create.asm

.0deb					elementSize:
>0deb							.fill	 1
.3f76					CreateArray:
.3f76	20 4d 41	jsr $414d			jsr 	AccessSetup 				; set up the basic stuff.
.3f79	ad ed 0d	lda $0ded			lda 	varType 					; is the variable type an array
.3f7c	4a		lsr a				lsr 	a
.3f7d	90 36		bcc $3fb5			bcc 	CANotArray 					; no, cause an error.
.3f7f	20 56 42	jsr $4256			jsr 	FindVariable 				; does the variable exist already
.3f82	b0 2c		bcs $3fb0			bcs 	CAFound 					; cannot redefine it.
.3f84	20 8a 41	jsr $418a			jsr 	CreateVariable 				; create the variable entry.
.3f87	a5 2a		lda $2a				lda 	temp0 						; push address of new variable entry on the stack
.3f89	48		pha				pha
.3f8a	a5 2b		lda $2b				lda 	temp0+1
.3f8c	48		pha				pha
.3f8d	a2 00		ldx #$00			ldx 	#0
.3f8f	20 ba 3f	jsr $3fba			jsr 	GetArrayDimensions 			; get the array dimensions
.3f92	a2 00		ldx #$00			ldx 	#0 							; create at level $00
.3f94	20 ea 3f	jsr $3fea			jsr 	CreateArrayLevel 			; level to YA
.3f97	aa		tax				tax 								; level now in YX
.3f98	68		pla				pla 								; get address back to temp0 to write.
.3f99	85 2b		sta $2b				sta 	temp0+1
.3f9b	68		pla				pla
.3f9c	85 2a		sta $2a				sta 	temp0
.3f9e	98		tya				tya 								; write YX there.
.3f9f	a0 06		ldy #$06			ldy 	#6
.3fa1	91 2a		sta ($2a),y			sta 	(temp0),y
.3fa3	88		dey				dey
.3fa4	8a		txa				txa
.3fa5	91 2a		sta ($2a),y			sta 	(temp0),y
.3fa7	ac ee 0d	ldy $0dee			ldy 	varEnd 						; restore Y and exit.
.3faa	60		rts				rts
.3fab					CASize:
.3fab	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.3fad	20 18 15	jsr $1518		jsr	errorHandler
.3fb0					CAFound:
.3fb0	a2 19		ldx #$19			ldx 	#ErrorID_DupArray
.3fb2	20 18 15	jsr $1518		jsr	errorHandler
.3fb5					CANotArray:
.3fb5	a2 1a		ldx #$1a			ldx 	#ErrorID_NotArray
.3fb7	20 18 15	jsr $1518		jsr	errorHandler
.3fba					GetArrayDimensions:
.3fba	ad ed 0d	lda $0ded			lda 	varType 					; push variable type on the stack.
.3fbd	48		pha				pha
.3fbe	ac ee 0d	ldy $0dee			ldy 	varEnd
.3fc1					_CAGetDimensions:
.3fc1	8a		txa				txa 								; get the next level
.3fc2	a2 0a		ldx #$0a		ldx	#10
.3fc4	20 fb 33	jsr $33fb		jsr	mainHandler
.3fc7	aa		tax				tax
.3fc8	b5 58		lda $58,x			lda 	esInt1,x 					; index must be < 8192
.3fca	29 e0		and #$e0			and 	#$E0
.3fcc	15 60		ora $60,x			ora 	esInt2,x
.3fce	15 68		ora $68,x			ora 	esInt3,x
.3fd0	d0 d9		bne $3fab			bne 	CASize
.3fd2	e8		inx				inx 								; next level.
.3fd3	b1 28		lda ($28),y			lda 	(codePtr),y 				; get/consume following character
.3fd5	c8		iny				iny
.3fd6	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; loop back if more dimensions
.3fd8	f0 e7		beq $3fc1			beq 	_CAGetDimensions
.3fda	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN 				; right bracket ?
.3fdc	d0 cd		bne $3fab			bne 	CASize
.3fde	a9 ff		lda #$ff			lda 	#$FF 						; set the type past the end to $FF so we know how many
.3fe0	95 48		sta $48,x			sta 	esType,x 					; dimensions there are.
.3fe2	68		pla				pla 								; restore the variable type ($3A-$3F)
.3fe3	8d ed 0d	sta $0ded			sta 	varType
.3fe6	8c ee 0d	sty $0dee			sty 	varEnd 						; save exit Y value, after dimensions
.3fe9	60		rts				rts
.3fea					CreateArrayLevel:
.3fea	ac ed 0d	ldy $0ded			ldy 	varType
.3fed	b9 14 40	lda $4014,y			lda 	CAActualSize-$3A,y
.3ff0	8d eb 0d	sta $0deb			sta 	elementSize 				; get element size this level.
.3ff3	b4 49		ldy $49,x			ldy 	esType+1,x 					; is it top level
.3ff5	30 05		bmi $3ffc			bmi 	_CANotPointer
.3ff7	a9 02		lda #$02			lda 	#2 							; array of pointers is 2.
.3ff9	8d eb 0d	sta $0deb			sta 	elementSize
.3ffc					_CANotPointer:
.3ffc	a5 35		lda $35				lda 	lowMemory 					; start creating at temp0, saving start on stack.
.3ffe	85 2a		sta $2a				sta 	temp0
.4000	48		pha				pha
.4001	a5 36		lda $36				lda 	lowMemory+1
.4003	85 2b		sta $2b				sta 	temp0+1
.4005	48		pha				pha
.4006	20 87 40	jsr $4087			jsr 	AllocateArraySpace 			; allocate space for all array stuff at this level.
.4009	a0 00		ldy #$00			ldy 	#0
.400b	b5 50		lda $50,x			lda 	esInt0,x
.400d	91 2a		sta ($2a),y			sta 	(temp0),y
.400f	c8		iny				iny
.4010	b5 58		lda $58,x			lda 	esInt1,x
.4012	91 2a		sta ($2a),y			sta 	(temp0),y
.4014	b5 49		lda $49,x			lda 	esType+1,x 					; do we have another level ?
.4016	30 06		bmi $401e			bmi 	_CALNotLast
.4018	b1 2a		lda ($2a),y			lda 	(temp0),y 					; set bit 7, indicates an array of pointers to other levels.
.401a	09 80		ora #$80			ora 	#$80
.401c	91 2a		sta ($2a),y			sta 	(temp0),y
.401e					_CALNotLast:
.401e	a9 02		lda #$02			lda 	#2
.4020	20 44 40	jsr $4044			jsr 	_CALAddTemp0
.4023	b5 50		lda $50,x			lda 	esInt0,x 					; copy stack:01 to stack:23 so we can use it to
.4025	95 60		sta $60,x			sta 	esInt2,x 					; count.
.4027	b5 58		lda $58,x			lda 	esInt1,x
.4029	95 68		sta $68,x			sta 	esInt3,x
.402b					_CALClear:
.402b	20 54 40	jsr $4054			jsr 	EraseOneElement
.402e	ad eb 0d	lda $0deb			lda 	elementSize 				; move to next element
.4031	20 44 40	jsr $4044			jsr 	_CALAddTemp0
.4034	b5 60		lda $60,x			lda 	esInt2,x 					; decrement counter
.4036	d0 02		bne $403a			bne 	_CALNoBorrow
.4038	d6 68		dec $68,x			dec 	esInt3,x
.403a					_CALNoBorrow:
.403a	d6 60		dec $60,x			dec 	esInt2,x
.403c	b5 68		lda $68,x			lda 	esInt3,x 					; loop back if >= 0 - we need +1 because indices
.403e	10 eb		bpl $402b			bpl 	_CALClear 					; start at 0 e.g. x(10) is actually 11 array entries.
.4040	68		pla				pla 								; restore the start of this into YA.
.4041	a8		tay				tay
.4042	68		pla				pla
.4043	60		rts				rts
.4044					_CALAddTemp0:
.4044	18		clc				clc
.4045	65 2a		adc $2a				adc 	temp0
.4047	85 2a		sta $2a				sta 	temp0
.4049	90 02		bcc $404d			bcc 	_CALANoCarry
.404b	e6 2b		inc $2b				inc 	temp0+1
.404d					_CALANoCarry:
.404d	60		rts				rts
.404e					CAActualSize:
>404e	04 04						.byte 	VarISize,VarISize
>4050	02 02						.byte 	VarSSize,VarSSize
>4052	06 06						.byte 	VarFSize,VarFSize
.4054					EraseOneElement:
.4054	b5 49		lda $49,x			lda 	esType+1,x 					; is this a list of sub arrays
.4056	10 09		bpl $4061			bpl 	_EOESubArray
.4058	a0 00		ldy #$00			ldy 	#0 							; write the empty variable value out.
.405a	ad ed 0d	lda $0ded			lda 	varType
.405d	20 f4 41	jsr $41f4			jsr 	ZeroTemp0Y
.4060	60		rts				rts
.4061					_EOESubArray:
.4061	a5 2a		lda $2a				lda 	temp0 						; save temp0, these are effectively locals.
.4063	48		pha				pha
.4064	a5 2b		lda $2b				lda 	temp0+1
.4066	48		pha				pha
.4067	ad eb 0d	lda $0deb			lda 	elementSize 				; save element size
.406a	48		pha				pha
.406b	e8		inx				inx 								; create at next level
.406c	20 ea 3f	jsr $3fea			jsr 	CreateArrayLevel
.406f	ca		dex				dex
.4070	85 32		sta $32				sta 	tempShort 					; save A
.4072	68		pla				pla  								; restore element size.
.4073	8d eb 0d	sta $0deb			sta 	elementSize
.4076	68		pla				pla 								; restore temp0, which is where this new array level goes.
.4077	85 2b		sta $2b				sta 	temp0+1
.4079	68		pla				pla
.407a	85 2a		sta $2a				sta 	temp0
.407c	98		tya				tya 								; store Y/A there
.407d	a0 01		ldy #$01			ldy 	#1
.407f	91 2a		sta ($2a),y			sta 	(temp0),y
.4081	a5 32		lda $32				lda 	tempShort
.4083	88		dey				dey
.4084	91 2a		sta ($2a),y			sta 	(temp0),y
.4086	60		rts				rts
.4087					AllocateArraySpace:
.4087	18		clc				clc 								; element count + 1 => temp2.
.4088	b5 50		lda $50,x			lda 	esInt0,x
.408a	69 01		adc #$01			adc 	#1
.408c	85 2e		sta $2e				sta 	temp2
.408e	b5 58		lda $58,x			lda 	esInt1,x
.4090	69 00		adc #$00			adc 	#0
.4092	85 2f		sta $2f				sta 	temp2+1
.4094	ad eb 0d	lda $0deb			lda 	elementSize 				; bytes per element
.4097	20 be 40	jsr $40be			jsr 	MultiplyTemp2ByA 			; temp2 = (count + 1) x bytes per element.
.409a	18		clc				clc 								; add 2 for 'max element' byte.
.409b	a5 2e		lda $2e				lda 	temp2
.409d	69 02		adc #$02			adc 	#2
.409f	85 2e		sta $2e				sta 	temp2
.40a1	90 02		bcc $40a5			bcc 	_AASNoCarry
.40a3	e6 2f		inc $2f				inc 	temp2+1
.40a5					_AASNoCarry:
.40a5	18		clc				clc 								; add to low memory, allocating space.
.40a6	a5 35		lda $35				lda 	lowMemory
.40a8	65 2e		adc $2e				adc 	temp2
.40aa	85 35		sta $35				sta 	lowMemory
.40ac	a5 36		lda $36				lda 	lowMemory+1
.40ae	65 2f		adc $2f				adc 	temp2+1
.40b0	85 36		sta $36				sta 	lowMemory+1
.40b2	b0 05		bcs $40b9			bcs 	_AASFail 					; out of memory as adding causes wrapround
.40b4	c5 34		cmp $34				cmp 	highMemory+1 				; >= high memory pointer.
.40b6	b0 01		bcs $40b9			bcs 	_AASFail
.40b8	60		rts				rts
.40b9					_AASFail:
.40b9	a2 22		ldx #$22			ldx 	#ErrorID_Memory
.40bb	20 18 15	jsr $1518		jsr	errorHandler
.40be					MultiplyTemp2ByA:
.40be	48		pha				pha
.40bf	a5 2e		lda $2e				lda 	temp2 						; copy temp2 to temp3.
.40c1	85 30		sta $30				sta 	temp3
.40c3	a5 2f		lda $2f				lda 	temp2+1
.40c5	85 31		sta $31				sta 	temp3+1
.40c7	68		pla				pla
.40c8	06 2e		asl $2e				asl 	temp2 						; double it.
.40ca	26 2f		rol $2f				rol 	temp2+1
.40cc	c9 02		cmp #$02			cmp 	#2 							; if x 2 then exit.
.40ce	f0 15		beq $40e5			beq 	_MTBAExit
.40d0	c9 06		cmp #$06			cmp 	#6 							; if x 6 then add temp3 to temp2
.40d2	d0 0d		bne $40e1			bne 	_MTBANotFloat
.40d4	18		clc				clc 								; so this will make it x 3
.40d5	a5 2e		lda $2e				lda 	temp2
.40d7	65 30		adc $30				adc 	temp3
.40d9	85 2e		sta $2e				sta 	temp2
.40db	a5 2f		lda $2f				lda 	temp2+1
.40dd	65 31		adc $31				adc 	temp3+1
.40df	85 2f		sta $2f				sta 	temp2+1
.40e1					_MTBANotFloat:
.40e1	06 2e		asl $2e				asl 	temp2 						; double it.
.40e3	26 2f		rol $2f				rol 	temp2+1
.40e5					_MTBAExit:
.40e5	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/variable/access.asm

.0dec					varHash:
>0dec							.fill	1
.0ded					varType:
>0ded							.fill 	1
.0dee					varEnd:
>0dee							.fill 	1
.003b					hashList:
>003b							.fill 	2
.40e6					AccessVariable:
.40e6	aa		tax				tax 								; stack in X
.40e7	c8		iny				iny									; look at second character
.40e8	b1 28		lda ($28),y			lda 	(codePtr),y
.40ea	88		dey				dey
.40eb	c9 3a		cmp #$3a			cmp 	#TYPE_INT 					; is it the integer marker ($3A)
.40ed	d0 15		bne $4104			bne 	_AVLong 					; no, always use the hash tables.
.40ef	b1 28		lda ($28),y			lda 	(codePtr),y 				; this is the 6 bit ASCII of A-Z 1-26
.40f1	38		sec				sec 	 							; make it 0-25
.40f2	e9 01		sbc #$01			sbc 	#1
.40f4	0a		asl a				asl 	a 							; x 4 as 4 bytes / variable.
.40f5	0a		asl a				asl 	a
.40f6	95 50		sta $50,x			sta 	esInt0,x
.40f8	a9 0a		lda #$0a			lda 	#SingleLetterVar >> 8 		; make it an address
.40fa	95 58		sta $58,x			sta 	esInt1,x
.40fc	a9 80		lda #$80			lda 	#$80 						; type is an integer reference.
.40fe	95 48		sta $48,x			sta 	esType,x
.4100	c8		iny				iny 								; skip over the variable reference in the code.
.4101	c8		iny				iny  								; (1 letter, 1 type)
.4102	8a		txa				txa 								; stack in A to return.
.4103	60		rts				rts
.4104					_AVLong:
.4104	8a		txa				txa
.4105	48		pha				pha
.4106	20 4d 41	jsr $414d			jsr 	AccessSetup 				; set up the basic information we need for later
.4109	20 56 42	jsr $4256			jsr 	FindVariable 				; does the variable exist already ?
.410c	b0 0e		bcs $411c			bcs 	_AVFound 					; yes, then its found
.410e	ad ed 0d	lda $0ded			lda 	varType 					; otherwise, is the variable type an array
.4111	4a		lsr a				lsr 	a
.4112	90 05		bcc $4119			bcc 	_AVCanCreate 				; if not, we can autocreate
.4114	a2 15		ldx #$15			ldx 	#ErrorID_noauto
.4116	20 18 15	jsr $1518		jsr	errorHandler
.4119					_AVCanCreate:
.4119	20 8a 41	jsr $418a			jsr 	CreateVariable 				; variable does not exist, create it.
.411c					_AVFound:
.411c	68		pla				pla
.411d	aa		tax				tax
.411e	18		clc				clc 								; copy temp0 (variable record address)
.411f	a5 2a		lda $2a				lda 	temp0 						; +5 (to point to the data)
.4121	69 05		adc #$05			adc 	#5 							; (first 5 bytes are link, name, hash)
.4123	95 50		sta $50,x			sta 	esInt0,x
.4125	a5 2b		lda $2b				lda 	temp0+1
.4127	69 00		adc #$00			adc 	#0
.4129	95 58		sta $58,x			sta 	esInt1,x
.412b	a9 00		lda #$00			lda 	#0
.412d	95 60		sta $60,x			sta 	esInt2,x
.412f	95 68		sta $68,x			sta 	esInt3,x
.4131	ac ed 0d	ldy $0ded			ldy 	varType 					; get the type ID from the type.
.4134	b9 0d 41	lda $410d,y			lda 	_AVTypeTable-$3A,y 			; e.g. a reference to int/float/string.
.4137	95 48		sta $48,x			sta 	esType,x
.4139	ac ee 0d	ldy $0dee			ldy 	varEnd 						; restore Y
.413c	ad ed 0d	lda $0ded			lda 	VarType 					; get variable type, put LSB into C
.413f	4a		lsr a				lsr 	a
.4140	90 03		bcc $4145			bcc 	_AVNotArray 				; if carry set,it is an array variable.
.4142	20 ee 3e	jsr $3eee			jsr 	AccessArray 				; array lookup. if LSB was set.
.4145					_AVNotArray:
.4145	8a		txa				txa 								; return stack in A and return
.4146	60		rts				rts
.4147					_AVTypeTable:
>4147	80 80						.byte 	$80,$80						; integer
>4149	c0 c0						.byte 	$C0,$C0 					; string
>414b	81 81						.byte 	$81,$81 					; float
.414d					AccessSetup:
.414d	a9 00		lda #$00			lda 	#0 							; zero the hash byte.
.414f	8d ec 0d	sta $0dec			sta 	varHash
.4152	98		tya				tya
.4153	48		pha				pha
.4154	b1 28		lda ($28),y	_ASLoop:lda 	(codePtr),y					; get next identifier character
.4156	c9 3a		cmp #$3a			cmp 	#$3A 						; is it 3A-3F which end all identifiers ?
.4158	b0 0b		bcs $4165			bcs 	_ASComplete
.415a	18		clc				clc 								; add to the hash. Might improve this.
.415b	6d ec 0d	adc $0dec			adc 	varHash
.415e	8d ec 0d	sta $0dec			sta 	varHash
.4161	c8		iny				iny 								; next character
.4162	4c 54 41	jmp $4154			jmp 	_ASLoop
.4165					_ASComplete:
.4165	8d ed 0d	sta $0ded			sta 	varType 					; save variable type byte
.4168	c8		iny				iny
.4169	8c ee 0d	sty $0dee			sty 	varEnd 						; save the ending position.
.416c	38		sec				sec 								; convert type byte from $3A-$3F to 0..5
.416d	e9 3a		sbc #$3a			sbc 	#$3A
.416f	0a		asl a				asl 	a 							; multiply by hashTableSize (8 in this case)
.4170	0a		asl a				asl 	a
.4171	0a		asl a				asl 	a
.4172	0a		asl a				asl 	a 							; 2 bytes/word
.4173	85 2a		sta $2a				sta 	temp0 						; this is the offset to the start of the table.
.4175	ad ec 0d	lda $0dec			lda 	varHash 					; get hash
.4178	29 07		and #$07			and 	#(hashTableSize-1)			; force into range (for 8,0..7)
.417a	0a		asl a				asl  	a 							; x 2 (for word) and clear carry
.417b	65 2a		adc $2a				adc 	temp0 						; now offset from the start of the hash table.
.417d	69 68		adc #$68			adc 	#hashTables & $FF 			; add to hash table base address
.417f	85 3b		sta $3b				sta 	hashList 					; making hashLists point to the head of the link list.
.4181	a9 0a		lda #$0a			lda 	#hashTables >> 8
.4183	69 00		adc #$00			adc 	#0
.4185	85 3c		sta $3c				sta 	hashList+1
.4187	68		pla				pla
.4188	a8		tay				tay
.4189	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/variable/create.asm

.418a					CreateVariable:
.418a	98		tya				tya 								; push Y on the stack twice.
.418b	48		pha				pha									; position in code of the new variable.
.418c	48		pha				pha
.418d	ae ed 0d	ldx $0ded			ldx 	varType 					; get var type 0-5 from the var type
.4190	bd b4 41	lda $41b4,x			lda		_CVSize-$3A,x 				; the bytes required for this new variable.
.4193	48		pha				pha 								; save length
.4194	a5 35		lda $35				lda 	lowMemory 					; set low Memory ptr to temp0
.4196	85 2a		sta $2a				sta 	temp0 						; (address of the new variable)
.4198	a5 36		lda $36				lda 	lowMemory+1
.419a	85 2b		sta $2b				sta 	temp0+1
.419c	68		pla				pla 								; get length
.419d	18		clc				clc 								; add to low memory.
.419e	65 35		adc $35				adc 	lowMemory
.41a0	85 35		sta $35				sta 	lowMemory
.41a2	90 08		bcc $41ac			bcc 	_CVNoCarry
.41a4	e6 36		inc $36				inc 	lowMemory+1
.41a6	a5 36		lda $36				lda 	lowMemory+1 				; check out of memory.
.41a8	c5 34		cmp $34				cmp 	highMemory+1
.41aa	b0 3d		bcs $41e9			bcs 	_CVMemory
.41ac					_CVNoCarry:
.41ac	ad ec 0d	lda $0dec			lda 	varHash 					; store hash at offset 4.
.41af	a0 04		ldy #$04			ldy 	#4
.41b1	91 2a		sta ($2a),y			sta 	(temp0),y
.41b3	68		pla				pla 								; offset, work out where the variable name is.
.41b4	18		clc				clc
.41b5	65 28		adc $28				adc 	codePtr
.41b7	a0 02		ldy #$02			ldy 	#2 							; copy that into slots 2 + 3.
.41b9	91 2a		sta ($2a),y			sta 	(temp0),y
.41bb	a5 29		lda $29				lda 	codePtr+1
.41bd	69 00		adc #$00			adc 	#0
.41bf	c8		iny				iny
.41c0	91 2a		sta ($2a),y			sta 	(temp0),y
.41c2	cd c9 0a	cmp $0ac9			cmp 	basePage+1 					; compare against the program base.
.41c5	b0 03		bcs $41ca			bcs 	_CVNotImmediate
.41c7	20 2c 42	jsr $422c			jsr 	CloneVariableName 			; we need to clone the variable name (immediate mode)
.41ca					_CVNotImmediate:
.41ca	a0 00		ldy #$00			ldy 	#0 							; copy current hash pointer in link
.41cc	b1 3b		lda ($3b),y			lda 	(hashList),y 				; so we're inserting it in the front of a linked list
.41ce	91 2a		sta ($2a),y			sta 	(temp0),y
.41d0	c8		iny				iny
.41d1	b1 3b		lda ($3b),y			lda 	(hashList),y
.41d3	91 2a		sta ($2a),y			sta 	(temp0),y
.41d5	a5 2b		lda $2b				lda 	temp0+1 					; set new link
.41d7	91 3b		sta ($3b),y			sta 	(hashList),y
.41d9	88		dey				dey
.41da	a5 2a		lda $2a				lda 	temp0
.41dc	91 3b		sta ($3b),y			sta 	(hashList),y
.41de	ad ed 0d	lda $0ded			lda 	varType 					; type in A
.41e1	a0 05		ldy #$05			ldy 	#5 							; offset in Y
.41e3	20 f4 41	jsr $41f4			jsr 	ZeroTemp0Y 					; zero (temp0),y with whatever type.
.41e6	68		pla				pla
.41e7	a8		tay				tay
.41e8	60		rts				rts
.41e9					_CVMemory:
.41e9	a2 22		ldx #$22			ldx 	#ErrorID_Memory
.41eb	20 18 15	jsr $1518		jsr	errorHandler
>41ee	09 07				_CVSize:.byte 	VarHSize+VarISize,VarHSize+VarASize 					; <storage for integer>
>41f0	07 07						.byte 	VarHSize+VarSSize,VarHSize+VarASize 					; <storage for string>
>41f2	0b 07						.byte 	VarHSize+VarFSize,VarHSize+VarASize 					; <storage for float>
.41f4					ZeroTemp0Y:
.41f4	4a		lsr a				lsr 	a 							; bit 0 in carry
.41f5	0a		asl a				asl 	a
.41f6	b0 19		bcs $4211			bcs 	_ZTExit 					; we don't initialise arrays.
.41f8	c9 3c		cmp #$3c			cmp 	#$3C 						; check string
.41fa	f0 16		beq $4212			beq 	_ZTWriteNullString 			; write "" string
.41fc	c9 3e		cmp #$3e			cmp 	#$3E 						; check float
.41fe	f0 22		beq $4222			beq 	_ZTWriteFloat
.4200	98		tya				tya
.4201	48		pha				pha
.4202	a9 00		lda #$00			lda 	#0
.4204	91 2a		sta ($2a),y			sta 	(temp0),y
.4206	c8		iny				iny
.4207	91 2a		sta ($2a),y			sta 	(temp0),y
.4209	c8		iny				iny
.420a	91 2a		sta ($2a),y			sta 	(temp0),y
.420c	c8		iny				iny
.420d	91 2a		sta ($2a),y			sta 	(temp0),y
.420f	68		pla				pla
.4210	a8		tay				tay
.4211					_ZTExit:
.4211	60		rts				rts
.4212					_ZTWriteNullString:
.4212	a9 00		lda #$00			lda 	#0 							; put a reference to null string as the default value.
.4214	8d ce 0a	sta $0ace			sta 	NullString
.4217	a9 ce		lda #$ce			lda 	#NullString & $FF
.4219	91 2a		sta ($2a),y			sta 	(temp0),y
.421b	a9 0a		lda #$0a			lda 	#NullString >> 8
.421d	c8		iny				iny
.421e	91 2a		sta ($2a),y			sta 	(temp0),y
.4220	88		dey				dey
.4221	60		rts				rts
.4222					_ZTWriteFloat:
.4222	8a		txa				txa
.4223	48		pha				pha
.4224	a2 20		ldx #$20		ldx	#32
.4226	20 75 1b	jsr $1b75		jsr	floatingpointHandler
.4229	68		pla				pla
.422a	aa		tax				tax
.422b	60		rts				rts
.422c					CloneVariableName:
.422c	a0 02		ldy #$02			ldy 	#2 							; copy vname address to temp2
.422e	b1 2a		lda ($2a),y			lda 	(temp0),y
.4230	85 2e		sta $2e				sta 	temp2
.4232	c8		iny				iny
.4233	b1 2a		lda ($2a),y			lda 	(temp0),y
.4235	85 2f		sta $2f				sta 	temp2+1
.4237	a5 36		lda $36				lda 	lowMemory+1 				; copy lowMemory address to (temp0),2/3
.4239	91 2a		sta ($2a),y			sta 	(temp0),y
.423b	88		dey				dey
.423c	a5 35		lda $35				lda 	lowMemory
.423e	91 2a		sta ($2a),y			sta 	(temp0),y
.4240	a0 00		ldy #$00			ldy 	#0 							; copy data from (temp2) to (lowMemory)
.4242					_CVNCopy:
.4242	b1 2e		lda ($2e),y			lda		(temp2),y
.4244	91 35		sta ($35),y			sta 	(lowMemory),y
.4246	c8		iny				iny
.4247	c9 3a		cmp #$3a			cmp 	#$3A 						; until the whole name has been copied.
.4249	90 f7		bcc $4242			bcc 	_CVNCopy
.424b	98		tya				tya 								; add Y to low memory
.424c	18		clc				clc
.424d	65 35		adc $35				adc 	lowMemory
.424f	85 35		sta $35				sta 	lowMemory
.4251	90 02		bcc $4255			bcc 	_CVNNoCarry
.4253	e6 36		inc $36				inc 	lowMemory+1
.4255					_CVNNoCarry:
.4255	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/variable/find.asm

.4256					FindVariable:
.4256	98		tya				tya
.4257	48		pha				pha
.4258	98		tya				tya 								; point temp2 to the actual name
.4259	18		clc				clc 								; in memory of the variable being created
.425a	65 28		adc $28				adc 	codePtr
.425c	85 2e		sta $2e				sta 	temp2
.425e	a5 29		lda $29				lda 	codePtr+1
.4260	69 00		adc #$00			adc 	#0
.4262	85 2f		sta $2f				sta 	temp2+1
.4264	a0 00		ldy #$00			ldy 	#0
.4266	a5 3b		lda $3b				lda 	hashList 					; copy hashlist to temp0
.4268	85 2a		sta $2a				sta 	temp0
.426a	a5 3c		lda $3c				lda 	hashList+1
.426c	85 2b		sta $2b				sta 	temp0+1
.426e	a0 01		ldy #$01	_FVNext:ldy 	#1 							; get MSB
.4270	b1 2a		lda ($2a),y			lda 	(temp0),y
.4272	f0 2c		beq $42a0			beq 	_FVFail
.4274	aa		tax				tax
.4275	88		dey				dey		 							; get LSB
.4276	b1 2a		lda ($2a),y			lda 	(temp0),y
.4278	85 2a		sta $2a				sta 	temp0 						; update pointer.
.427a	86 2b		stx $2b				stx 	temp0+1
.427c	a0 04		ldy #$04			ldy 	#4 							; check hashes match
.427e	b1 2a		lda ($2a),y			lda 	(temp0),y
.4280	cd ec 0d	cmp $0dec			cmp 	varHash
.4283	d0 e9		bne $426e			bne 	_FVNext 					; if not, no point in checking the name.
.4285	88		dey				dey 								; copy name pointer (+2,+3) to temp1.
.4286	b1 2a		lda ($2a),y			lda 	(temp0),y
.4288	85 2d		sta $2d				sta 	temp1+1
.428a	88		dey				dey
.428b	b1 2a		lda ($2a),y			lda 	(temp0),y
.428d	85 2c		sta $2c				sta 	temp1
.428f	a0 00		ldy #$00			ldy 	#0
.4291					_FVCheck:
.4291	b1 2c		lda ($2c),y			lda 	(temp1),y 					; compare names
.4293	d1 2e		cmp ($2e),y			cmp 	(temp2),y
.4295	d0 d7		bne $426e			bne 	_FVNext		 				; fail if different.
.4297	c8		iny				iny
.4298	c9 3a		cmp #$3a			cmp 	#$3A 						; until reached the end marker.
.429a	90 f5		bcc $4291			bcc 	_FVCheck
.429c	68		pla				pla
.429d	a8		tay				tay
.429e	38		sec				sec
.429f	60		rts				rts
.42a0					_FVFail:
.42a0	68		pla				pla
.42a1	a8		tay				tay
.42a2	18		clc				clc
.42a3	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/variable/reset.asm

.42a4					HashTableReset:
.42a4	a2 60		ldx #$60			ldx 	#6*2*hashTableSize			; 6 types, 2 bytes per table entry.
.42a6	a9 00		lda #$00			lda 	#0
.42a8					_HTRClear:
.42a8	9d 67 0a	sta $0a67,x			sta 	hashTables-1,x
.42ab	ca		dex				dex
.42ac	d0 fa		bne $42a8			bne 	_HTRClear
.42ae	60		rts				rts

;******  Return to file: variable/variable.asm

.42af					variableHandler:
.42af	7c b2 42	jmp ($42b2,x)			jmp 	(variableVectors,x)
.42b2					variableVectors:
>42b2	ba 42					.word _DummyControlHandler ; index 0
>42b4	e6 40					.word AccessVariable       ; index 2
>42b6	76 3f					.word CreateArray          ; index 4
>42b8	a4 42					.word HashTableReset       ; index 6
.42ba					_DummyControlHandler:
.42ba	60		rts			rts

;******  Return to file: basic.asm

.42bb					section_end_variable:
.42bb					section_start_footer:

;******  Processing file: footer/footer.asm


;******  Processing file: footer/99end.asm

.003d					endZeroPage:
.0def					endStorage:
>42bb							.align 	256
.4300					programMemory:
>42ff	ff						.byte 	$FF

;******  Return to file: footer/footer.asm


;******  Return to file: basic.asm

.4300					section_end_footer:

;******  End of listing
