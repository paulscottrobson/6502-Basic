
; 64tass Turbo Assembler Macro V1.55.2200 listing file
; 64tass -Wall -q -c -L ../source/bin/basic.lst -l ../source/bin/basic.lbl -Wall -o ../source/bin/basic.prg basic.asm
; Tue Mar  2 09:10:27 2021

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: basic.asm


;******  Processing file: main/01common.inc

=$1000					CodeStart = $1000
=$800					MemoryStorage = $800
=$02					ZeroPageStorage = $02
=8					StackSize = 8
=512					retStackSize = 512
=8					hashTableSize = 8			; if this changes, the calculation is AccessSetup has to match it.
="G"					markerGOSUB = 'G'
="R"					markerREPEAT = 'R'
="F"					markerFOR = 'F'
="W"					markerWHILE = 'W'

;******  Return to file: basic.asm


;******  Processing file: main/02macros.inc


;******  Return to file: basic.asm


;******  Processing file: main/03data.inc

>0002					codePtr:.fill 	2							; (codePtr),y points to code.
>0004					temp0: 	.fill 	2							; working variables.
>0006					temp1: 	.fill 	2
>0008					temp2: 	.fill 	2
.000a					tempShort:
>000a							.fill 	1
>0040					esType:	.fill 	StackSize  					; type byte (see above)
>0048					esInt0:	.fill 	StackSize 					; integer or mantissa
>0050					esInt1:	.fill 	StackSize
>0058					esInt2:	.fill 	StackSize
>0060					esInt3:	.fill 	StackSize
>0068					esExp:	.fill 	StackSize 					; exponent ($80 = 0)
>0070					esZSign:.fill 	StackSize 					; for floating point - sign (bit 7) isZero (bit 6)
=$48					esMant0 = esInt0 							; synonyms.
=$50					esMant1 = esInt1
=$58					esMant2 = esInt2
=$60					esMant3 = esInt3
>0800							.align	256
.0800					returnStack:
>0800							.fill 	retStackSize
>0a00							.align	256
.0a00					SingleLetterVar:
>0a00					 		.fill 	26*4
.0a68					hashTables:
>0a68							.fill 	6*2*hashTableSize
.0ac8					basePage:
>0ac8							.fill 	2
.0aca					endMemory:
>0aca							.fill 	2
.0acc					highMemory:
>0acc							.fill 	2
.0ace					lowMemory:
>0ace							.fill 	2
.0ad0					convertBuffer:
>0ad0							.fill 	35

;******  Processing file: main/../generated/tokenconst.inc

=$80					TOK_EOL=$80
=$81					TOK_SHIFT1=$81
=$82					TOK_SHIFT2=$82
=$83					TOK_SHIFT3=$83
=$84					TOK_FPC=$84
=$85					TOK_STR=$85
=$86					TOK_BINARYST=$86
=$99					TOK_STRUCTST=$99
=$a4					TOK_UNARYST=$a4
=$c4					TOK_TOKENS=$c4
=$86					TKW_AND                      = $86 ; and
=$87					TKW_OR                       = $87 ; or
=$88					TKW_XOR                      = $88 ; xor
=$89					TKW_GREATEREQUAL             = $89 ; >=
=$8a					TKW_LESSEQUAL                = $8a ; <=
=$8b					TKW_GREATER                  = $8b ; >
=$8c					TKW_LESS                     = $8c ; <
=$8d					TKW_EQUAL                    = $8d ; =
=$8e					TKW_LESSGREATER              = $8e ; <>
=$8f					TKW_PLUS                     = $8f ; +
=$90					TKW_MINUS                    = $90 ; -
=$91					TKW_GREATERGREATER           = $91 ; >>
=$92					TKW_LESSLESS                 = $92 ; <<
=$93					TKW_STAR                     = $93 ; *
=$94					TKW_SLASH                    = $94 ; /
=$95					TKW_MOD                      = $95 ; mod
=$96					TKW_HAT                      = $96 ; ^
=$97					TKW_PLING                    = $97 ; !
=$98					TKW_QMARK                    = $98 ; ?
=$99					TKW_REPEAT                   = $99 ; repeat
=$9a					TKW_WHILE                    = $9a ; while
=$9b					TKW_FOR                      = $9b ; for
=$9c					TKW_IF                       = $9c ; if
=$9d					TKW_DEFPROC                  = $9d ; defproc
=$9e					TKW_UNTIL                    = $9e ; until
=$9f					TKW_WEND                     = $9f ; wend
=$a0					TKW_NEXT                     = $a0 ; next
=$a1					TKW_THEN                     = $a1 ; then
=$a2					TKW_ENDIF                    = $a2 ; endif
=$a3					TKW_ENDPROC                  = $a3 ; endproc
=$a4					TKW_LPAREN                   = $a4 ; (
=$a5					TKW_LENLPAREN                = $a5 ; len(
=$a6					TKW_SGNLPAREN                = $a6 ; sgn(
=$a7					TKW_ABSLPAREN                = $a7 ; abs(
=$a8					TKW_RANDOMLPAREN             = $a8 ; random(
=$a9					TKW_PAGE                     = $a9 ; page
=$aa					TKW_TRUE                     = $aa ; true
=$ab					TKW_FALSE                    = $ab ; false
=$ac					TKW_MINLPAREN                = $ac ; min(
=$ad					TKW_MAXLPAREN                = $ad ; max(
=$ae					TKW_SYSLPAREN                = $ae ; sys(
=$af					TKW_TIMERLPAREN              = $af ; timer(
=$b0					TKW_EVENTLPAREN              = $b0 ; event(
=$b1					TKW_GETLPAREN                = $b1 ; get(
=$b2					TKW_INKEYLPAREN              = $b2 ; inkey(
=$b3					TKW_ALLOCLPAREN              = $b3 ; alloc(
=$b4					TKW_CHRDOLLARLPAREN          = $b4 ; chr$(
=$b5					TKW_LEFTDOLLARLPAREN         = $b5 ; left$(
=$b6					TKW_MIDDOLLARLPAREN          = $b6 ; mid$(
=$b7					TKW_RIGHTDOLLARLPAREN        = $b7 ; right$(
=$b8					TKW_STRDOLLARLPAREN          = $b8 ; str$(
=$b9					TKW_VALLPAREN                = $b9 ; val(
=$ba					TKW_PEEKLPAREN               = $ba ; peek(
=$bb					TKW_DEEKLPAREN               = $bb ; deek(
=$bc					TKW_LEEKLPAREN               = $bc ; leek(
=$bd					TKW_ASCLPAREN                = $bd ; asc(
=$be					TKW_INTLPAREN                = $be ; int(
=$bf					TKW_FLOATLPAREN              = $bf ; float(
=$c0					TKW_ISVALLPAREN              = $c0 ; isval(
=$c1					TKW_AT                       = $c1 ; @
=$c2					TKW_WAVY                     = $c2 ; ~
=$c3					TKW_AMP                      = $c3 ; &
=$c4					TKW_RPAREN                   = $c4 ; )
=$c5					TKW_COLON                    = $c5 ; :
=$c6					TKW_COMMA                    = $c6 ; ,
=$c7					TKW_SEMICOLON                = $c7 ; ;
=$c8					TKW_QUOTE                    = $c8 ; '
=$c9					TKW_TO                       = $c9 ; to
=$ca					TKW_STEP                     = $ca ; step
=$cb					TKW_PROC                     = $cb ; proc
=$cc					TKW_LOCAL                    = $cc ; local
=$cd					TKW_DIM                      = $cd ; dim
=$ce					TKW_REM                      = $ce ; rem
=$cf					TKW_LET                      = $cf ; let
=$d0					TKW_INPUT                    = $d0 ; input
=$d1					TKW_ELSE                     = $d1 ; else
=$d2					TKW_VDU                      = $d2 ; vdu
=$d3					TKW_PRINT                    = $d3 ; print
=$d4					TKW_GOTO                     = $d4 ; goto
=$d5					TKW_GOSUB                    = $d5 ; gosub
=$d6					TKW_RETURN                   = $d6 ; return
=$d7					TKW_DATA                     = $d7 ; data
=$d8					TKW_ASSERT                   = $d8 ; assert
=$d9					TKW_POKE                     = $d9 ; poke
=$da					TKW_DOKE                     = $da ; doke
=$db					TKW_LOKE                     = $db ; loke
=$86					TKW_CLEAR                    = $86 ; clear
=$87					TKW_LOAD                     = $87 ; load
=$88					TKW_SAVE                     = $88 ; save
=$89					TKW_LIST                     = $89 ; list
=$8a					TKW_NEW                      = $8a ; new
=$8b					TKW_RUN                      = $8b ; run
=$8c					TKW_READ                     = $8c ; read
=$8d					TKW_RESTORE                  = $8d ; restore
=$8e					TKW_END                      = $8e ; end
=$8f					TKW_STOP                     = $8f ; stop
=$86					TKW_VPOKE                    = $86 ; vpoke
=$86					TKW_VPEEKLPAREN              = $86 ; vpeek(

;******  Return to file: main/03data.inc

=$3a					TYPE_INT =		($3A) 						; type bytes that end identifier.
=$3b					TYPE_INTARRAY =	($3B)
=$3c					TYPE_STR =		($3C)
=$3d					TYPE_STRARRAY =	($3D)
=$3e					TYPE_FLOAT =	($3E)
=$3f					TYPE_FLOATARRAY=($3F)

;******  Return to file: basic.asm


;******  Processing file: main/imath/intmacros.inc


;******  Return to file: basic.asm


;******  Processing file: main/main.inc


;******  Return to file: basic.asm


;******  Processing file: assembler/assembler.inc


;******  Return to file: basic.asm


;******  Processing file: device/device.inc


;******  Return to file: basic.asm


;******  Processing file: error/error.inc


;******  Return to file: basic.asm


;******  Processing file: error/errorhandler.inc


;******  Processing file: error/../generated/errorid.inc

=1					ErrorID_Missing = 1 ; Feature not Present
=2					ErrorID_Syntax = 2 ; Syntax Error
=3					ErrorID_NoModule = 3 ; Module disabled
=4					ErrorID_Assert = 4 ; Assertion failed
=5					ErrorID_DivZero = 5 ; Divide By Zero
=6					ErrorID_Stop = 6 ; Stop
=7					ErrorID_BadType = 7 ; Type Mismatch
=8					ErrorID_BadValue = 8 ; Illegal Value
=9					ErrorID_MissingRP = 9 ; Missing right bracket
=10					ErrorID_MissingComma = 10 ; Missing comma
=11					ErrorID_NoReference = 11 ; Missing reference
=12					ErrorID_LineNumber = 12 ; Line Number not found
=13					ErrorID_StrLen = 13 ; String too long.
=14					ErrorID_ReturnErr = 14 ; RETURN without GOSUB
=15					ErrorID_UntilErr = 15 ; UNTIL without REPEAT
=16					ErrorID_NextErr = 16 ; NEXT without FOR
=17					ErrorID_WendErr = 17 ; WEND without WHILE
=18					ErrorID_BadIndex = 18 ; Bad NEXT index
=19					ErrorID_Struct = 19 ; Structures nested wrong
=20					ErrorID_NoAuto = 20 ; Cannot create variable
=21					ErrorID_RetStack = 21 ; Return stack out of space.

;******  Return to file: error/errorhandler.inc


;******  Return to file: basic.asm


;******  Processing file: floatingpoint/floatingpoint.inc


;******  Return to file: basic.asm


;******  Processing file: interaction/interaction.inc


;******  Return to file: basic.asm


;******  Processing file: string/memory.inc

=252					MaxStringSize = 252

;******  Return to file: basic.asm


;******  Processing file: string/string.inc


;******  Return to file: basic.asm


;******  Processing file: tokeniser/tokeniser.inc


;******  Return to file: basic.asm


;******  Processing file: variable/variable.inc


;******  Return to file: basic.asm


;******  Processing file: main/main.asm


;******  Processing file: main/00start.asm

.1000	a2 ff		ldx #$ff	Start:	ldx 	#$FF
.1002	9a		txs				txs
.1003	a9 00		lda #$00			lda 	#(testBaseAddress) & $FF
.1005	8d c8 0a	sta $0ac8			sta 	basePage
.1008	a9 50		lda #$50			lda 	#(testBaseAddress) >> 8
.100a	8d c9 0a	sta $0ac9			sta 	1+(basePage)
.100d	a9 00		lda #$00			lda 	#($9800) & $FF
.100f	8d ca 0a	sta $0aca			sta 	endMemory
.1012	a9 98		lda #$98			lda 	#($9800) >> 8
.1014	8d cb 0a	sta $0acb			sta 	1+(endMemory)
.1017	4c 26 12	jmp $1226			jmp 	Command_Run
.20c9					ReturnPos:
.5000					testBaseAddress:

;******  Processing file: main/../generated/testcode.inc

>5000	06 0a 00 81 8e 80 00			.byte 6,10,0,129,142,128,0

;******  Return to file: main/00start.asm


;******  Return to file: main/main.asm


;******  Processing file: main/commands/assert.asm

.101a					Command_Assert:
.101a	20 78 17	jsr $1778			jsr 	EvaluateRootInteger 		; what is being asserted.
.101d	20 09 1d	jsr $1d09			jsr 	MInt32Zero 					; is it true ?
.1020	f0 01		beq $1023			beq 	_CAError
.1022	60		rts				rts
.1023					_CAError:
.1023	a2 04		ldx #$04			ldx 	#ErrorID_Assert
.1025	20 10 1e	jsr $1e10			jsr 	ErrorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/commands/clear.asm

.1028					CommandClear:
.1028	98		tya				tya
.1029	48		pha				pha
.102a	ad ca 0a	lda $0aca			lda 	endMemory					; set high memory = end of memory
.102d	8d cc 0a	sta $0acc			sta 	highMemory
.1030	ad cb 0a	lda $0acb			lda 	endMemory+1
.1033	8d cd 0a	sta $0acd			sta 	highMemory+1
.1036	ad c8 0a	lda $0ac8			lda 	basePage 					; work out where the program ends.
.1039	85 04		sta $04				sta 	temp0
.103b	ad c9 0a	lda $0ac9			lda 	basePage+1
.103e	85 05		sta $05				sta 	temp0+1
.1040					_CCFindEnd:
.1040	a0 00		ldy #$00			ldy 	#0
.1042	b1 04		lda ($04),y			lda 	(temp0),y
.1044	f0 0c		beq $1052			beq 	_CCFoundEnd 				; offset zero is end.
.1046	18		clc				clc
.1047	65 04		adc $04				adc 	temp0 						; move to next line
.1049	85 04		sta $04				sta 	temp0
.104b	90 f3		bcc $1040			bcc 	_CCFindEnd
.104d	e6 05		inc $05				inc 	temp0+1
.104f	4c 40 10	jmp $1040			jmp 	_CCFindEnd
.1052					_CCFoundEnd:
.1052	a5 04		lda $04				lda 	temp0 						; put temp0 in lowMemory
.1054	8d ce 0a	sta $0ace			sta 	lowMemory
.1057	a5 05		lda $05				lda 	temp0+1
.1059	8d cf 0a	sta $0acf			sta 	lowMemory+1
.105c	a9 04		lda #$04			lda 	#4 							; skip low free memory clear, leave a gap.
.105e	20 6c 10	jsr $106c			jsr 	AdvanceLowMemoryByte		; need at least one here, to skip the end of program zero offset.
.1061	20 6f 1d	jsr $1d6f			jsr 	RSReset 					; reset the return stack.
.1064	a2 02		ldx #$02		ldx	#2
.1066	20 c2 20	jsr $20c2		jsr	variableHandler
.1069	68		pla				pla
.106a	a8		tay				tay
.106b	60		rts				rts
.106c					AdvanceLowMemoryByte:
.106c	18		clc				clc
.106d	6d ce 0a	adc $0ace			adc 	lowMemory
.1070	8d ce 0a	sta $0ace			sta 	lowMemory
.1073	90 03		bcc $1078			bcc 	_ALMBExit
.1075	ee cf 0a	inc $0acf			inc 	lowMemory+1
.1078					_ALMBExit:
.1078	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/for.asm

.20c9					Command_FOR:
.20c9	a9 46		lda #$46			lda 	#markerFOR 					; allocate the space.
.20cb	a2 0b		ldx #$0b			ldx 	#11
.20cd	20 7d 1d	jsr $1d7d			jsr 	RSClaim
.20d0	20 b5 10	jsr $10b5			jsr 	CommandLET 					; do the same as LET.
.20d3	a5 40		lda $40				lda 	esType 						; check type should be integer reference.
.20d5	c9 80		cmp #$80			cmp 	#$80
.20d7	d0 4c		bne $2125			bne 	_CFType
.20d9	a9 c9		lda #$c9			lda 	#TKW_TO 					; check TO present.
.20db	20 4a 1d	jsr $1d4a			jsr 	CheckToken
.20de	a2 01		ldx #$01			ldx 	#1 							; keep the variable address in stack 0
.20e0	20 7a 17	jsr $177a			jsr 	EvaluateInteger				; get terminal value in stack 1
.20e3	98		tya				tya
.20e4	48		pha				pha
.20e5	a0 04		ldy #$04			ldy 	#4
.20e7	a5 48		lda $48				lda		esInt0 						; the address of the index into 4 and 5
.20e9	91 78		sta ($78),y			sta 	(rsPointer),y
.20eb	c8		iny				iny
.20ec	a5 50		lda $50				lda		esInt1
.20ee	91 78		sta ($78),y			sta 	(rsPointer),y
.20f0	c8		iny				iny
.20f1	a9 01		lda #$01			lda 	#1  						; the default step in 6
.20f3	91 78		sta ($78),y			sta 	(rsPointer),y
.20f5	c8		iny				iny
.20f6	a5 49		lda $49				lda		esInt0+1 					; terminal value in 7 to 11.
.20f8	91 78		sta ($78),y			sta 	(rsPointer),y
.20fa	c8		iny				iny
.20fb	a5 51		lda $51				lda		esInt1+1
.20fd	91 78		sta ($78),y			sta 	(rsPointer),y
.20ff	c8		iny				iny
.2100	a5 59		lda $59				lda		esInt2+1
.2102	91 78		sta ($78),y			sta 	(rsPointer),y
.2104	c8		iny				iny
.2105	a5 61		lda $61				lda		esInt3+1
.2107	91 78		sta ($78),y			sta 	(rsPointer),y
.2109	68		pla				pla
.210a	a8		tay				tay
.210b	b1 02		lda ($02),y			lda 	(codePtr),y 				; followed by STEP.
.210d	c9 ca		cmp #$ca			cmp 	#TKW_STEP
.210f	d0 0e		bne $211f			bne 	_CFDone
.2111	c8		iny				iny									; skip over step.
.2112	20 7a 17	jsr $177a			jsr 	EvaluateInteger 			; get step
.2115	98		tya				tya
.2116	48		pha				pha
.2117	b5 48		lda $48,x			lda 	esInt0,x 					; copy it into step (bit lazy here)
.2119	a0 06		ldy #$06			ldy 	#6
.211b	91 78		sta ($78),y			sta 	(rsPointer),y
.211d	68		pla				pla
.211e	a8		tay				tay
.211f					_CFDone:
.211f	a9 01		lda #$01			lda 	#1
.2121	20 a9 1d	jsr $1da9			jsr 	RSSavePosition 				; save position.
.2124	60		rts				rts
.2125					_CFType:
.2125	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.2127	20 10 1e	jsr $1e10			jsr 	ErrorHandler
.212a					Command_NEXT:
.212a	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.212c	a1 78		lda ($78,x)			lda 	(rsPointer,x)
.212e	c9 46		cmp #$46			cmp 	#markerFOR 						; does it match
.2130	f0 05		beq $2137			beq 	_isok
.2132	a2 10		ldx #$10			ldx 	#ErrorID_nextErr
.2134	20 10 1e	jsr $1e10			jsr 	ErrorHandler
.2137					_isok:
.2137	b1 02		lda ($02),y			lda 	(codePtr),y 				; is it NEXT <index>
.2139	c9 40		cmp #$40			cmp 	#$40 						; e.g. a variable follows 00-3F
.213b	b0 18		bcs $2155			bcs 	_CNNoIndex
.213d	a2 00		ldx #$00			ldx 	#0 							; start on stack
.213f	20 a7 17	jsr $17a7			jsr 	EvaluateReference 			; this is the variable/parameter to localise.
.2142	98		tya				tya
.2143	48		pha				pha
.2144	a0 04		ldy #$04			ldy 	#4 							; check same variable
.2146	b1 78		lda ($78),y			lda 	(rsPointer),y
.2148	d5 48		cmp $48,x			cmp 	esInt0,x
.214a	d0 76		bne $21c2			bne 	_CNBadIndex
.214c	c8		iny				iny
.214d	b1 78		lda ($78),y			lda 	(rsPointer),y
.214f	d5 50		cmp $50,x			cmp 	esInt1,x
.2151	d0 6f		bne $21c2			bne 	_CNBadIndex
.2153	68		pla				pla
.2154	a8		tay				tay
.2155					_CNNoIndex:
.2155	98		tya				tya
.2156	48		pha				pha
.2157	a0 04		ldy #$04			ldy 	#4 							; make temp0 point to the index
.2159	b1 78		lda ($78),y			lda 	(rsPointer),y
.215b	85 04		sta $04				sta 	temp0
.215d	c8		iny				iny
.215e	b1 78		lda ($78),y			lda 	(rsPointer),y
.2160	85 05		sta $05				sta 	temp0+1
.2162	c8		iny				iny
.2163	a2 00		ldx #$00			ldx 	#0 							; X is the sign extend part of the step.
.2165	b1 78		lda ($78),y			lda 	(rsPointer),y 				; get the step.
.2167	85 09		sta $09				sta 	temp2+1 					; save for later.
.2169	10 01		bpl $216c			bpl 	_CNSignX
.216b	ca		dex				dex  								; X = $FF
.216c					_CNSignX:
.216c	18		clc				clc 								; add to the LSB
.216d	a0 00		ldy #$00			ldy 	#0
.216f	71 04		adc ($04),y			adc 	(temp0),y
.2171	91 04		sta ($04),y			sta 	(temp0),y
.2173					_CNPropogate:
.2173	c8		iny				iny  								; add the sign extended in X to the rest.
.2174	8a		txa				txa
.2175	71 04		adc ($04),y			adc 	(temp0),y
.2177	91 04		sta ($04),y			sta 	(temp0),y
.2179	c8		iny				iny
.217a	8a		txa				txa
.217b	71 04		adc ($04),y			adc 	(temp0),y
.217d	91 04		sta ($04),y			sta 	(temp0),y
.217f	c8		iny				iny
.2180	8a		txa				txa
.2181	71 04		adc ($04),y			adc 	(temp0),y
.2183	91 04		sta ($04),y			sta 	(temp0),y
.2185	18		clc				clc 								; point temp1 to the terminal value stored in the stack.
.2186	a5 78		lda $78				lda 	rsPointer
.2188	69 07		adc #$07			adc 	#7
.218a	85 06		sta $06				sta 	temp1
.218c	a9 00		lda #$00			lda 	#0
.218e	85 08		sta $08				sta 	temp2 						; clear temp2, which is the OR of all the subtractions.
.2190	a8		tay				tay 								; and clear the Y register again.
.2191	65 79		adc $79				adc 	rsPointer+1
.2193	85 07		sta $07				sta 	temp1+1
.2195	38		sec				sec 								; calculate current - limit oring interim values.
.2196	20 ce 21	jsr $21ce			jsr 	_CNCompare
.2199	20 ce 21	jsr $21ce			jsr 	_CNCompare
.219c	20 ce 21	jsr $21ce			jsr 	_CNCompare
.219f	20 ce 21	jsr $21ce			jsr 	_CNCompare
.21a2	50 02		bvc $21a6			bvc 	_CNNoOverflow 				; converts to a signed comparison on the sign bit.
.21a4	49 80		eor #$80			eor 	#$80
.21a6					_CNNoOverflow:
.21a6	a4 09		ldy $09				ldy 	temp2+1						; get step back
.21a8	30 1d		bmi $21c7			bmi 	_CNCheckDownto
.21aa	c9 00		cmp #$00			cmp 	#0
.21ac	30 0c		bmi $21ba			bmi 	_CNLoopRound 				; loop round if < =
.21ae	a5 08		lda $08				lda 	temp2
.21b0	f0 08		beq $21ba			beq 	_CNLoopRound
.21b2					_CNLoopExit:
.21b2	68		pla				pla
.21b3	a8		tay				tay
.21b4	a9 0b		lda #$0b			lda 	#11
.21b6	20 9f 1d	jsr $1d9f			jsr 	RSFree
.21b9	60		rts				rts
.21ba					_CNLoopRound:
.21ba	68		pla				pla
.21bb	a8		tay				tay
.21bc	a9 01		lda #$01			lda 	#1
.21be	20 bc 1d	jsr $1dbc			jsr 	RSLoadPosition				; go back to the loop top
.21c1	60		rts				rts
.21c2					_CNBadIndex:
.21c2	a2 12		ldx #$12			ldx 	#ErrorID_BadIndex
.21c4	20 10 1e	jsr $1e10			jsr 	ErrorHandler
.21c7					_CNCheckDownto:
.21c7	c9 00		cmp #$00			cmp 	#0
.21c9	10 ef		bpl $21ba			bpl 	_CNLoopRound
.21cb	4c b2 21	jmp $21b2			jmp 	_CNLoopExit
.21ce					_CNCompare:
.21ce	b1 04		lda ($04),y			lda 	(temp0),y 					; do the subtraction - compare don't care about answer
.21d0	f1 06		sbc ($06),y			sbc 	(temp1),y
.21d2	05 08		ora $08				ora 	temp2 						; Or into temp2 (does not affect carry)
.21d4	85 08		sta $08				sta 	temp2
.21d6	c8		iny				iny
.21d7	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/if.asm

.1079					CommandIf:
.1079	20 78 17	jsr $1778			jsr 	EvaluateRootInteger 		; if what ?
.107c	b1 02		lda ($02),y			lda 	(codePtr),y 				; check for IF .. THEN or IF .. GOTO which are single lines.
.107e	c9 d4		cmp #$d4			cmp 	#TKW_GOTO
.1080	f0 04		beq $1086			beq 	_IfSimple
.1082	c9 a1		cmp #$a1			cmp 	#TKW_THEN
.1084	d0 1b		bne $10a1			bne 	_IfComplex
.1086					_IfSimple:
.1086	20 09 1d	jsr $1d09			jsr 	MInt32Zero					; check if TOS zero
.1089	f0 10		beq $109b			beq 	_IfEOL 						; go to next line.
.108b	b1 02		lda ($02),y			lda 	(codePtr),y 				; get and skip token.
.108d	c8		iny				iny
.108e	c9 d4		cmp #$d4			cmp 	#TKW_GOTO 					; was it if GOTO ?
.1090	f0 0c		beq $109e			beq 	_IfGoto 					; do the Goto code
.1092	b1 02		lda ($02),y			lda 	(codePtr),y 				; what follows the THEN ?
.1094	29 c0		and #$c0			and 	#$C0 						; check $40-$7F
.1096	c9 40		cmp #$40			cmp 	#$40 						; e.g. number IF x = 0 THEN 170
.1098	f0 04		beq $109e			beq 	_IfGoto
.109a	60		rts				rts 								; else continue on this line.
.109b					_IfEOL:
.109b	4c 75 13	jmp $1375			jmp 	AdvanceNextLine 			; go to next line
.109e					_IfGoto:
.109e	4c b4 13	jmp $13b4			jmp 	CommandGoto
.10a1					_IfComplex:
.10a1	20 09 1d	jsr $1d09			jsr 	MInt32Zero 					; is it true ?
.10a4	f0 01		beq $10a7			beq 	_IFSkip 					; if non-zero then skip to ELSE/ENDIF
.10a6	60		rts				rts 								; else continue.
.10a7					_IFSkip:
.10a7	a9 d1		lda #$d1			lda	 	#TKW_ELSE 					; test failed, go to ELSE or ENDIF whichever comes first.
.10a9	a2 a2		ldx #$a2			ldx 	#TKW_ENDIF
.10ab	4c 41 22	jmp $2241			jmp		ScanForward
.10ae					Command_ELSE:
.10ae	a2 a2		ldx #$a2			ldx 	#TKW_ENDIF
.10b0	8a		txa				txa
.10b1	4c 41 22	jmp $2241			jmp		ScanForward
.10b4					Command_ENDIF:
.10b4	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/let.asm

.10b5					CommandLet:
.10b5	a2 00		ldx #$00			ldx 	#0  						; get address to write.
.10b7	20 a7 17	jsr $17a7			jsr 	EvaluateReference
.10ba	a9 8d		lda #$8d			lda 	#TKW_EQUAL 					; check for equals
.10bc	20 4a 1d	jsr $1d4a			jsr 	CheckToken
.10bf	e8		inx				inx 								; do RHS
.10c0	20 5b 17	jsr $175b			jsr 	Evaluate 					; evaluate and derefernce
.10c3	ca		dex				dex
.10c4	20 c8 10	jsr $10c8			jsr 	WriteValue 					; write it out
.10c7	60		rts				rts
.10c8					WriteValue:
.10c8	98		tya				tya
.10c9	48		pha				pha
.10ca	20 2a 11	jsr $112a			jsr 	TOSToTemp0 					; set temp0 to point to target address.
.10cd	b5 40		lda $40,x			lda 	esType,x 					; check the string/integer flags match
.10cf	55 41		eor $41,x			eor 	esType+1,x
.10d1	29 40		and #$40			and 	#$40
.10d3	d0 50		bne $1125			bne		_WVType
.10d5	a0 01		ldy #$01			ldy 	#1 							; for string, copy 0 and 1.
.10d7	b5 40		lda $40,x			lda 	esType,x 					; check for string assignment
.10d9	29 40		and #$40			and 	#$40
.10db	d0 1f		bne $10fc			bne 	_WVCopyString
.10dd	b5 40		lda $40,x			lda 	esType,x 					; check both are integer.
.10df	15 41		ora $41,x			ora 	esType+1,x
.10e1	4a		lsr a				lsr 	a
.10e2	90 22		bcc $1106			bcc 	_WVCopyData4
.10e4	b5 40		lda $40,x			lda 	esType,x
.10e6	4a		lsr a				lsr 	a
.10e7	90 3c		bcc $1125			bcc 	_WVType
.10e9	e8		inx				inx 								; force the value being written to be a float.
.10ea	20 26 14	jsr $1426			jsr 	BPMakeFloat
.10ed	ca		dex				dex
.10ee	20 2a 11	jsr $112a			jsr 	TOSToTemp0 					; set Temp0 to write address
.10f1	e8		inx				inx
.10f2	8a		txa				txa
.10f3	a2 1e		ldx #$1e		ldx	#30
.10f5	20 17 1e	jsr $1e17		jsr	floatingpointHandler
.10f8	aa		tax				tax
.10f9	4c 22 11	jmp $1122			jmp 	_WVCopyExit
.10fc					_WVCopyString:
.10fc	8a		txa				txa
.10fd	a2 08		ldx #$08		ldx	#8
.10ff	20 69 1f	jsr $1f69		jsr	stringHandler
.1102	aa		tax				tax
.1103	4c 22 11	jmp $1122			jmp 	_WVCopyExit
.1106					_WVCopyData4:
.1106	b5 40		lda $40,x			lda 	esType,x 					; is the int ref a byte ref ?
.1108	29 20		and #$20			and 	#$20
.110a	d0 10		bne $111c			bne 	_WVCopyData1
.110c	a0 03		ldy #$03			ldy 	#3
.110e	b5 61		lda $61,x			lda 	esInt3+1,x
.1110	91 04		sta ($04),y			sta 	(temp0),y
.1112	88		dey				dey
.1113	b5 59		lda $59,x			lda 	esInt2+1,x
.1115	91 04		sta ($04),y			sta 	(temp0),y
.1117	88		dey				dey
.1118	b5 51		lda $51,x			lda 	esInt1+1,x
.111a	91 04		sta ($04),y			sta 	(temp0),y
.111c					_WVCopyData1:
.111c	a0 00		ldy #$00			ldy 	#0
.111e	b5 49		lda $49,x			lda 	esInt0+1,x
.1120	91 04		sta ($04),y			sta 	(temp0),y
.1122					_WVCopyExit:
.1122	68		pla				pla
.1123	a8		tay				tay
.1124	60		rts				rts
.1125					_WVType:
.1125	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.1127	20 10 1e	jsr $1e10			jsr 	ErrorHandler
.112a					TOSToTemp0:
.112a	b5 48		lda $48,x			lda 	esInt0,x
.112c	85 04		sta $04				sta 	temp0
.112e	b5 50		lda $50,x			lda 	esInt1,x
.1130	85 05		sta $05				sta 	temp0+1
.1132	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/new.asm

.1133					Command_New:
.1133	20 88 12	jsr $1288			jsr 	ResetCodeAddress 			; point to first line
.1136	a0 00		ldy #$00			ldy 	#0 							; and zap it.
.1138	98		tya				tya
.1139	91 02		sta ($02),y			sta 	(codePtr),y
.113b	20 28 10	jsr $1028			jsr 	CommandClear 				; clear everything down.
.113e	4c 72 13	jmp $1372			jmp 	CommandEND 					; do END code, as there's nothing to run.

;******  Return to file: main/main.asm


;******  Processing file: main/commands/poke.asm

.1141					Command_Poke:
.1141	a9 01		lda #$01			lda 	#1
.1143	d0 06		bne $114b			bne 	PokeGeneral
.1145					Command_Doke:
.1145	a9 02		lda #$02			lda 	#2
.1147	d0 02		bne $114b			bne 	PokeGeneral
.1149					Command_Loke:
.1149	a9 03		lda #$03			lda 	#3
.114b					PokeGeneral:
.114b	48		pha				pha 								; save size
.114c	20 78 17	jsr $1778			jsr 	EvaluateRootInteger 		; target address
.114f	20 62 1d	jsr $1d62			jsr	 	CheckComma
.1152	e8		inx				inx
.1153	20 7a 17	jsr $177a			jsr 	EvaluateInteger 			; what value to POKE ?
.1156	ca		dex				dex
.1157	20 2a 11	jsr $112a			jsr 	TOSToTemp0 					; temp0 points to the target address
.115a	84 0a		sty $0a				sty 	tempShort 					; save Y
.115c	68		pla				pla 								; get copy type and dispatch
.115d	aa		tax				tax
.115e	ca		dex				dex
.115f	f0 14		beq $1175			beq 	_Poke1
.1161	ca		dex				dex
.1162	f0 0b		beq $116f			beq 	_Poke2
.1164	a0 03		ldy #$03			ldy 	#3
.1166	a5 61		lda $61				lda 	esInt3+1
.1168	91 04		sta ($04),y			sta 	(temp0),y
.116a	88		dey				dey
.116b	a5 59		lda $59				lda 	esInt2+1
.116d	91 04		sta ($04),y			sta 	(temp0),y
.116f					_Poke2:
.116f	a0 01		ldy #$01			ldy 	#1
.1171	a5 51		lda $51				lda 	esInt1+1
.1173	91 04		sta ($04),y			sta 	(temp0),y
.1175					_Poke1:
.1175	a0 00		ldy #$00			ldy 	#0
.1177	a5 49		lda $49				lda 	esInt0+1
.1179	91 04		sta ($04),y			sta 	(temp0),y
.117b	a4 0a		ldy $0a				ldy 	tempShort 					; restore Y and exit
.117d	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/print.asm

.0af3					lastPrintToken:
>0af3							.fill 	1
.117e					Command_Print:
.117e	a9 00		lda #$00			lda 	#0 							; clear LPT flag
.1180	8d f3 0a	sta $0af3			sta 	lastPrintToken
.1183	88		dey				dey
.1184					_PrintLoopSkip:
.1184	c8		iny				iny
.1185					_PrintLoop:
.1185	b1 02		lda ($02),y			lda 	(codePtr),y 				; what follows
.1187	c9 80		cmp #$80			cmp 	#TOK_EOL  					; done if end of line or colon
.1189	f0 5b		beq $11e6			beq 	_PrintExit
.118b	c9 c5		cmp #$c5			cmp 	#TKW_COLON
.118d	f0 57		beq $11e6			beq 	_PrintExit
.118f	8d f3 0a	sta $0af3			sta 	lastPrintToken 				; update LPT
.1192	c9 c7		cmp #$c7			cmp 	#TKW_SEMICOLON 				; ignore semicolon
.1194	f0 ee		beq $1184			beq 	_PrintLoopSkip
.1196	c9 c8		cmp #$c8			cmp 	#TKW_QUOTE 					; ' is new line
.1198	f0 3c		beq $11d6			beq	 	_PrintNewLine
.119a	c9 c6		cmp #$c6			cmp 	#TKW_COMMA 					; , is print tab
.119c	f0 40		beq $11de			beq 	_PrintTab
.119e	20 59 17	jsr $1759			jsr 	EvaluateRoot 				; evaluate something at the root
.11a1	a9 d0		lda #$d0			lda 	#(convertBuffer) & $FF
.11a3	85 04		sta $04				sta 	temp0
.11a5	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.11a7	85 05		sta $05				sta 	1+(temp0)
.11a9	a5 40		lda $40				lda 	esType 						; get type
.11ab	f0 15		beq $11c2			beq		_PrintInteger
.11ad	4a		lsr a				lsr 	a 							; check for floating point
.11ae	b0 08		bcs $11b8			bcs 	_PrintFloat
.11b0					_PrintString:
.11b0	a2 00		ldx #$00			ldx 	#0 							; bottom string to temp0
.11b2	20 2a 11	jsr $112a			jsr 	TOSToTemp0
.11b5	4c d0 11	jmp $11d0			jmp 	_PrintTemp0 				; print no leading space.
.11b8					_PrintFloat:
.11b8	a9 00		lda #$00			lda 	#0 							; stack level.
.11ba	a2 14		ldx #$14		ldx	#20
.11bc	20 17 1e	jsr $1e17		jsr	floatingpointHandler
.11bf	4c c9 11	jmp $11c9			jmp 	_PrintSpaceTemp0
.11c2					_PrintInteger:
.11c2	a9 8a		lda #$8a			lda 	#10+$80 					; base 10 signed
.11c4	a2 00		ldx #$00			ldx 	#0 							; bottom stack element
.11c6	20 38 1c	jsr $1c38			jsr 	MInt32ToString				; convert to text
.11c9					_PrintSpaceTemp0:
.11c9	a9 20		lda #$20			lda 	#32
.11cb	a2 04		ldx #$04		ldx	#4
.11cd	20 03 1e	jsr $1e03		jsr	deviceHandler
.11d0					_PrintTemp0:
.11d0	20 f7 11	jsr $11f7			jsr 	PrintString
.11d3	4c 85 11	jmp $1185			jmp 	_PrintLoop
.11d6					_PrintNewLine:
.11d6	a2 00		ldx #$00		ldx	#0
.11d8	20 03 1e	jsr $1e03		jsr	deviceHandler
.11db	4c 84 11	jmp $1184			jmp 	_PrintLoopSkip
.11de					_PrintTab:
.11de	a2 06		ldx #$06		ldx	#6
.11e0	20 03 1e	jsr $1e03		jsr	deviceHandler
.11e3	4c 84 11	jmp $1184			jmp 	_PrintLoopSkip
.11e6					_PrintExit:
.11e6	ad f3 0a	lda $0af3			lda		lastPrintToken 				; check last token
.11e9	c9 c7		cmp #$c7			cmp 	#TKW_SEMICOLON 				; if , or ; do not print NL
.11eb	f0 09		beq $11f6			beq 	_PrintExit2
.11ed	c9 c6		cmp #$c6			cmp 	#TKW_COMMA
.11ef	f0 05		beq $11f6			beq 	_PrintExit2
.11f1	a2 00		ldx #$00		ldx	#0
.11f3	20 03 1e	jsr $1e03		jsr	deviceHandler
.11f6					_PrintExit2:
.11f6	60		rts				rts
.11f7					PrintString:
.11f7	8a		txa				txa
.11f8	48		pha				pha
.11f9	98		tya				tya
.11fa	48		pha				pha
.11fb	a0 00		ldy #$00			ldy 	#0							; get length
.11fd	b1 04		lda ($04),y			lda 	(temp0),y
.11ff	aa		tax				tax 								; into X
.1200	e0 00		cpx #$00	_PSLoop:cpx 	#0 							; finished ?
.1202	f0 10		beq $1214			beq 	_PSExit
.1204	ca		dex				dex
.1205	8a		txa				txa
.1206	48		pha				pha
.1207	c8		iny				iny
.1208	b1 04		lda ($04),y			lda 	(temp0),y
.120a	a2 04		ldx #$04		ldx	#4
.120c	20 03 1e	jsr $1e03		jsr	deviceHandler
.120f	68		pla				pla
.1210	aa		tax				tax
.1211	4c 00 12	jmp $1200			jmp 	_PSLoop
.1214					_PSExit:
.1214	68		pla				pla
.1215	a8		tay				tay
.1216	68		pla				pla
.1217	aa		tax				tax
.1218	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/rem.asm

.1219					Command_Rem:
.1219					Command_Rem2:
.1219	b1 02		lda ($02),y			lda 	(codePtr),y 				; what follows
.121b	c9 85		cmp #$85			cmp 	#TOK_STR 					; if it is a string then skip it.
.121d	d0 06		bne $1225			bne 	_CRNotString
.121f	c8		iny				iny
.1220	98		tya				tya
.1221	38		sec				sec
.1222	71 02		adc ($02),y			adc 	(codePtr),y 				; get string size, add to Y, +1 for the length
.1224	a8		tay				tay
.1225					_CRNotString:
.1225	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/repeat.asm

.21d8					Command_Repeat:
.21d8	a2 04		ldx #$04			ldx 	#4 							; allocate 4 bytes on stack for REPEAT
.21da	a9 52		lda #$52			lda 	#markerREPEAT 				; repeat marker allocate 4 bytes
.21dc	20 7d 1d	jsr $1d7d			jsr 	RSClaim
.21df	a9 01		lda #$01			lda 	#1 							; save position at offset 1.
.21e1	20 a9 1d	jsr $1da9			jsr 	RSSavePosition
.21e4	60		rts				rts
.21e5					Command_Until:
.21e5	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.21e7	a1 78		lda ($78,x)			lda 	(rsPointer,x)
.21e9	c9 52		cmp #$52			cmp 	#markerREPEAT 						; does it match
.21eb	f0 05		beq $21f2			beq 	_isok
.21ed	a2 0f		ldx #$0f			ldx 	#ErrorID_untilErr
.21ef	20 10 1e	jsr $1e10			jsr 	ErrorHandler
.21f2					_isok:
.21f2	20 78 17	jsr $1778			jsr 	EvaluateRootInteger 		; at the bottom.
.21f5	20 09 1d	jsr $1d09			jsr 	MInt32Zero					; check if TOS zero
.21f8	d0 06		bne $2200			bne 	_CUExit
.21fa	a9 01		lda #$01			lda 	#1
.21fc	20 bc 1d	jsr $1dbc			jsr 	RSLoadPosition 				; reload the position from offset 1.
.21ff	60		rts				rts
.2200					_CUExit:
.2200	a9 04		lda #$04			lda 	#4 							; throw 4 bytes from stack.
.2202	20 9f 1d	jsr $1d9f			jsr 	RSFree
.2205	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/run.asm

.1226					Command_Run:
.1226	a2 ff		ldx #$ff			ldx 	#$FF
.1228	9a		txs				txs
.1229	20 28 10	jsr $1028			jsr 	CommandClear 				; clear everything.
.122c	20 88 12	jsr $1288			jsr 	ResetCodeAddress
.122f	a0 03		ldy #$03			ldy 	#3
.1231					CRNextInstruction:
.1231	64 7b		stz $7b				stz 	softMemAlloc+1
.1233	b1 02		lda ($02),y			lda 	(codePtr),y 				; get next token.
.1235	10 1c		bpl $1253			bpl 	_CRNotToken
.1237	c9 c4		cmp #$c4			cmp 	#TOK_TOKENS 				; if in the tokens then do that token.
.1239	b0 0c		bcs $1247			bcs 	_CRExecute
.123b	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST 				; unary is ignored.
.123d	b0 56		bcs $1295			bcs 	Unimplemented
.123f	c9 99		cmp #$99			cmp 	#TOK_STRUCTST 				; execute structures.
.1241	b0 04		bcs $1247			bcs 	_CRExecute
.1243	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; if one of the system tokens $80-$85 do that
.1245	b0 16		bcs $125d			bcs 	_CRCheckIndirect 			; if in that unused range check for ! or ?
.1247					_CRExecute:
.1247	c8		iny				iny 								; consume it.
.1248	0a		asl a				asl 	a 							; double it, losing most significant bit.
.1249	aa		tax				tax
.124a	20 50 12	jsr $1250			jsr 	_CRRunRoutine 				; we want to do jsr (group0vectors,x)
.124d	4c 31 12	jmp $1231			jmp 	CRNextInstruction
.1250					_CRRunRoutine:
.1250	7c 9f 12	jmp ($129f,x)			jmp 	(Group0Vectors,x)
.1253					_CRNotToken:
.1253	c9 40		cmp #$40			cmp 	#$40 						; if 0-3F then it is a letter
.1255	b0 3e		bcs $1295			bcs 	Unimplemented
.1257					_CRDefaultLet:
.1257	20 b5 10	jsr $10b5			jsr 	CommandLet 					; do the default, LET
.125a	4c 31 12	jmp $1231			jmp 	CRNextInstruction
.125d					_CRCheckIndirect:
.125d	c9 97		cmp #$97			cmp 	#TKW_PLING 					; !<term> =
.125f	f0 f6		beq $1257			beq 	_CRDefaultLet
.1261	c9 98		cmp #$98			cmp 	#TKW_QMARK 					; ?<term> =
.1263	f0 f2		beq $1257			beq 	_CRDefaultLet
.1265	d0 2e		bne $1295			bne 	Unimplemented
.1267					CommandShift1:
.1267	b1 02		lda ($02),y			lda 	(codePtr),y 				; get shifted value
.1269	10 2a		bpl $1295			bpl 	Unimplemented 				; we have an error as this should not happen.
.126b	0a		asl a				asl 	a 							; double into X
.126c	aa		tax				tax
.126d	c8		iny				iny 								; advance over it.
.126e	20 74 12	jsr $1274			jsr 	_RunIt 						; we have no jsr (aaaa,X)
.1271	4c 31 12	jmp $1231			jmp 	CRNextInstruction
.1274					_RunIt:
.1274	7c 4b 13	jmp ($134b,x)			jmp 	(Group1Vectors-6*2,x) 					; and do the code.
.1277					CommandShift2:
.1277	b1 02		lda ($02),y			lda 	(codePtr),y 				; get shifted value
.1279	10 1a		bpl $1295			bpl 	Unimplemented 				; we have an error as this should not happen.
.127b	0a		asl a				asl 	a 							; double into X
.127c	aa		tax				tax
.127d	c8		iny				iny 								; advance over it.
.127e	20 84 12	jsr $1284			jsr 	_RunIt 						; we have no jsr (aaaa,X)
.1281	4c 31 12	jmp $1231			jmp 	CRNextInstruction
.1284					_RunIt:
.1284	7c 5f 13	jmp ($135f,x)			jmp 	(Group2Vectors-6*2,x) 					; and do the code.
.1287					CommandColon:
.1287	60		rts				rts
.1288					ResetCodeAddress:
.1288	ad c8 0a	lda $0ac8			lda 	basePage 					; copy basePage to code Pointer
.128b	85 02		sta $02				sta 	codePtr
.128d	ad c9 0a	lda $0ac9			lda 	basePage+1
.1290	85 03		sta $03				sta 	codePtr+1
.1292	a0 03		ldy #$03			ldy 	#3 							; offset after offset link and line#
.1294	60		rts				rts
.1295					Unimplemented:
.1295	a2 01		ldx #$01			ldx 	#ErrorID_Missing
.1297	20 10 1e	jsr $1e10			jsr 	ErrorHandler
.129a					TKErr01:
.129a					TKErr02:
.129a					TKErr03:
.129a					TKErr04:
.129a					TKErr05:
.129a					TKErr06:
.129a					TKErr07:
.129a					TKErr08:
.129a	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.129c	20 10 1e	jsr $1e10			jsr 	ErrorHandler

;******  Processing file: main/commands/../../generated/tokenvectors0.inc

.129f					Group0Vectors:
>129f	75 13					.word	AdvanceNextLine          ; $80 [[eol]]
>12a1	67 12					.word	CommandShift1            ; $81 [[sh1]]
>12a3	77 12					.word	CommandShift2            ; $82 [[sh2]]
>12a5	95 12					.word	Unimplemented            ; $83 [[sh3]]
>12a7	95 12					.word	Unimplemented            ; $84 [[fpc]]
>12a9	9a 12					.word	TKErr08                  ; $85 [[str]]
>12ab	c8 14					.word	AndHandler               ; $86 and
>12ad	b5 14					.word	OrHandler                ; $87 or
>12af	a2 14					.word	XorHandler               ; $88 xor
>12b1	ea 15					.word	CompareGreaterEq         ; $89 >=
>12b3	f4 15					.word	CompareLessEq            ; $8a <=
>12b5	d6 15					.word	CompareGreater           ; $8b >
>12b7	cc 15					.word	CompareLess              ; $8c <
>12b9	c2 15					.word	CompareEquals            ; $8d =
>12bb	e0 15					.word	CompareNotEquals         ; $8e <>
>12bd	33 14					.word	AddHandler               ; $8f +
>12bf	56 14					.word	SubHandler               ; $90 -
>12c1	ee 14					.word	ShrHandler               ; $91 >>
>12c3	db 14					.word	ShlHandler               ; $92 <<
>12c5	69 14					.word	MulHandler               ; $93 *
>12c7	7c 14					.word	DivHandler               ; $94 /
>12c9	8f 14					.word	ModHandler               ; $95 mod
>12cb	27 15					.word	PowerHandler             ; $96 ^
>12cd	01 15					.word	WordRefHandler           ; $97 !
>12cf	14 15					.word	ByteRefHandler           ; $98 ?
>12d1	d8 21					.word	Command_Repeat           ; $99 repeat
>12d3	06 22					.word	Command_While            ; $9a while
>12d5	c9 20					.word	Command_FOR              ; $9b for
>12d7	79 10					.word	CommandIf                ; $9c if
>12d9	9a 12					.word	TKErr04                  ; $9d defproc
>12db	e5 21					.word	Command_Until            ; $9e until
>12dd	29 22					.word	Command_Wend             ; $9f wend
>12df	2a 21					.word	Command_NEXT             ; $a0 next
>12e1	9a 12					.word	TKErr06                  ; $a1 then
>12e3	b4 10					.word	Command_ENDIF            ; $a2 endif
>12e5	95 12					.word	Unimplemented            ; $a3 endproc
>12e7	31 17					.word	UnaryParenthesis         ; $a4 (
>12e9	06 18					.word	UnaryLen                 ; $a5 len(
>12eb	4a 18					.word	UnarySgn                 ; $a6 sgn(
>12ed	33 18					.word	UnaryAbs                 ; $a7 abs(
>12ef	a3 18					.word	Unary_Random             ; $a8 random(
>12f1	ed 18					.word	Unary_Page               ; $a9 page
>12f3	de 1c					.word	MInt32True               ; $aa true
>12f5	e2 1c					.word	MInt32False              ; $ab false
>12f7	b8 18					.word	Unary_Min                ; $ac min(
>12f9	bc 18					.word	Unary_Max                ; $ad max(
>12fb	a7 19					.word	UnarySys                 ; $ae sys(
>12fd	6b 19					.word	UnaryTimer               ; $af timer(
>12ff	95 12					.word	Unimplemented            ; $b0 event(
>1301	93 19					.word	UnaryGet                 ; $b1 get(
>1303	83 19					.word	UnaryInkey               ; $b2 inkey(
>1305	3a 19					.word	UnaryAlloc               ; $b3 alloc(
>1307	cf 19					.word	ExecChr                  ; $b4 chr$(
>1309	e3 19					.word	ExecLeft                 ; $b5 left$(
>130b	00 1a					.word	ExecMid                  ; $b6 mid$(
>130d	28 1a					.word	ExecRight                ; $b7 right$(
>130f	95 12					.word	Unimplemented            ; $b8 str$(
>1311	95 12					.word	Unimplemented            ; $b9 val(
>1313	61 18					.word	UnaryPeek                ; $ba peek(
>1315	67 18					.word	UnaryDeek                ; $bb deek(
>1317	6d 18					.word	UnaryLeek                ; $bc leek(
>1319	24 18					.word	UnaryAsc                 ; $bd asc(
>131b	18 19					.word	UnaryIntToFloat          ; $be int(
>131d	2b 19					.word	UnaryFloatToInt          ; $bf float(
>131f	95 12					.word	Unimplemented            ; $c0 isval(
>1321	fb 18					.word	UnaryReference           ; $c1 @
>1323	11 19					.word	UnaryComplement          ; $c2 ~
>1325	0e 19					.word	UnaryHexMarker           ; $c3 &
>1327	9a 12					.word	TKErr01                  ; $c4 )
>1329	87 12					.word	CommandColon             ; $c5 :
>132b	9a 12					.word	TKErr02                  ; $c6 ,
>132d	9a 12					.word	TKErr03                  ; $c7 ;
>132f	19 12					.word	Command_Rem2             ; $c8 '
>1331	9a 12					.word	TKErr07                  ; $c9 to
>1333	9a 12					.word	TKErr05                  ; $ca step
>1335	95 12					.word	Unimplemented            ; $cb proc
>1337	95 12					.word	Unimplemented            ; $cc local
>1339	95 12					.word	Unimplemented            ; $cd dim
>133b	19 12					.word	Command_Rem              ; $ce rem
>133d	b5 10					.word	CommandLet               ; $cf let
>133f	95 12					.word	Unimplemented            ; $d0 input
>1341	ae 10					.word	Command_ELSE             ; $d1 else
>1343	e6 13					.word	Command_VDU              ; $d2 vdu
>1345	7e 11					.word	Command_Print            ; $d3 print
>1347	b4 13					.word	CommandGOTO              ; $d4 goto
>1349	89 13					.word	CommandGOSUB             ; $d5 gosub
>134b	9c 13					.word	CommandRETURN            ; $d6 return
>134d	95 12					.word	Unimplemented            ; $d7 data
>134f	1a 10					.word	Command_Assert           ; $d8 assert
>1351	41 11					.word	Command_Poke             ; $d9 poke
>1353	45 11					.word	Command_Doke             ; $da doke
>1355	49 11					.word	Command_Loke             ; $db loke

;******  Return to file: main/commands/run.asm


;******  Processing file: main/commands/../../generated/tokenvectors1.inc

.1357					Group1Vectors:
>1357	28 10					.word	CommandClear             ; $86 clear
>1359	95 12					.word	Unimplemented            ; $87 load
>135b	95 12					.word	Unimplemented            ; $88 save
>135d	95 12					.word	Unimplemented            ; $89 list
>135f	33 11					.word	Command_New              ; $8a new
>1361	26 12					.word	Command_Run              ; $8b run
>1363	95 12					.word	Unimplemented            ; $8c read
>1365	95 12					.word	Unimplemented            ; $8d restore
>1367	72 13					.word	CommandEnd               ; $8e end
>1369	6d 13					.word	CommandStop              ; $8f stop

;******  Return to file: main/commands/run.asm


;******  Processing file: main/commands/../../generated/tokenvectors2.inc

.136b					Group2Vectors:
>136b	95 12					.word	Unimplemented            ; $86 vpoke

;******  Return to file: main/commands/run.asm


;******  Return to file: main/main.asm


;******  Processing file: main/commands/stopend.asm

.136d					CommandStop:
.136d	a2 06		ldx #$06			ldx 	#ErrorID_Stop
.136f	20 10 1e	jsr $1e10			jsr 	ErrorHandler
.1372					CommandEnd:
.1372	4c ff ff	jmp $ffff			jmp 	$FFFF 						; fudge to crash out of emulator
.1375					AdvanceNextLine:
.1375	a0 00		ldy #$00			ldy 	#0 							; get offset
.1377	b1 02		lda ($02),y			lda 	(codePtr),y
.1379	18		clc				clc 								; add to codePtr
.137a	65 02		adc $02				adc 	codePtr
.137c	85 02		sta $02				sta 	codePtr
.137e	90 02		bcc $1382			bcc 	_ANLNoCarry
.1380	e6 03		inc $03				inc 	codePtr+1
.1382					_ANLNoCarry:
.1382	b1 02		lda ($02),y			lda 	(codePtr),y 				; if end of program (or was just stand alone.
.1384	f0 ec		beq $1372			beq 	CommandEnd 					; execute END
.1386	a0 03		ldy #$03			ldy 	#3 							; start of tokens on line.
.1388	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/transfer.asm

.1389					CommandGOSUB:
.1389	20 78 17	jsr $1778			jsr 	EvaluateRootInteger			; get GOSUB line on stack top.
.138c	a2 04		ldx #$04			ldx 	#4 							; allocate 4 bytes on stack for GOSUB
.138e	a9 47		lda #$47			lda 	#markerGOSUB  				; <marker> <return addr/offset>
.1390	20 7d 1d	jsr $1d7d			jsr 	RSClaim
.1393	a9 01		lda #$01			lda 	#1 							; save position at offset 1.
.1395	20 a9 1d	jsr $1da9			jsr 	RSSavePosition
.1398	a2 00		ldx #$00			ldx 	#0 							; point back at GOSUB line
.139a	f0 1b		beq $13b7			beq 	GotoTOS 					; and do a GOTO there.
.139c					CommandRETURN:
.139c	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.139e	a1 78		lda ($78,x)			lda 	(rsPointer,x)
.13a0	c9 47		cmp #$47			cmp 	#markerGOSUB 						; does it match
.13a2	f0 05		beq $13a9			beq 	_isok
.13a4	a2 0e		ldx #$0e			ldx 	#ErrorID_returnErr
.13a6	20 10 1e	jsr $1e10			jsr 	ErrorHandler
.13a9					_isok:
.13a9	a9 01		lda #$01			lda 	#1
.13ab	20 bc 1d	jsr $1dbc			jsr 	RSLoadPosition 				; reload the position from offset 1.
.13ae	a9 04		lda #$04			lda 	#4 							; throw 4 bytes from stack.
.13b0	20 9f 1d	jsr $1d9f			jsr 	RSFree
.13b3	60		rts				rts
.13b4					CommandGOTO:
.13b4	20 78 17	jsr $1778			jsr 	EvaluateRootInteger 		; get GOTO line on stack top.
.13b7					GotoTOS:
.13b7	20 88 12	jsr $1288			jsr 	ResetCodeAddress 			; simple search.
.13ba					_GotoSearch:
.13ba	a0 00		ldy #$00			ldy 	#0 							; get offset
.13bc	b1 02		lda ($02),y			lda 	(codePtr),y
.13be	f0 21		beq $13e1			beq 	_GotoError 					; not found.
.13c0	c8		iny				iny									; check LSB match
.13c1	b1 02		lda ($02),y			lda 	(codePtr),y
.13c3	d5 48		cmp $48,x			cmp 	esInt0,x
.13c5	d0 07		bne $13ce			bne 	_GotoNext
.13c7	c8		iny				iny
.13c8	b1 02		lda ($02),y			lda 	(codePtr),y
.13ca	d5 50		cmp $50,x			cmp 	esInt1,x
.13cc	f0 10		beq $13de			beq 	_GotoFound
.13ce					_GotoNext:
.13ce	a0 00		ldy #$00			ldy 	#0 							; go next line
.13d0	b1 02		lda ($02),y			lda 	(codePtr),y
.13d2	18		clc				clc
.13d3	65 02		adc $02				adc 	codePtr
.13d5	85 02		sta $02				sta 	codePtr
.13d7	90 e1		bcc $13ba			bcc 	_GotoSearch
.13d9	e6 03		inc $03				inc 	codePtr+1
.13db	4c ba 13	jmp $13ba			jmp 	_GotoSearch
.13de					_GotoFound:
.13de	a0 03		ldy #$03			ldy 	#3 							; continue from that line
.13e0	60		rts				rts
.13e1					_GotoError:
.13e1	a2 0c		ldx #$0c			ldx 	#ErrorID_LineNumber
.13e3	20 10 1e	jsr $1e10			jsr 	ErrorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/commands/vdu.asm

.13e6					Command_VDU:
.13e6	20 78 17	jsr $1778			jsr 	EvaluateRootInteger 			; get integer at root.
.13e9	a5 48		lda $48				lda 	esInt0
.13eb	a2 04		ldx #$04		ldx	#4
.13ed	20 03 1e	jsr $1e03		jsr	deviceHandler
.13f0					_CVNext:
.13f0	b1 02		lda ($02),y			lda 	(codePtr),y 					; what follows ?
.13f2	c8		iny				iny
.13f3	c9 c6		cmp #$c6			cmp 	#TKW_COMMA 						; comma, do again
.13f5	f0 ef		beq $13e6			beq 	Command_VDU
.13f7	c9 c7		cmp #$c7			cmp 	#TKW_SEMICOLON 					; semicolon, print MSB
.13f9	d0 0a		bne $1405			bne 	_CVExit
.13fb	a5 50		lda $50				lda 	esInt1
.13fd	a2 04		ldx #$04		ldx	#4
.13ff	20 03 1e	jsr $1e03		jsr	deviceHandler
.1402	4c f0 13	jmp $13f0			jmp 	_CVNext
.1405	88		dey		_CVExit:dey
.1406	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/while.asm

.2206					Command_While:
.2206	a9 57		lda #$57			lda 	#markerWhile 				; gosub marker allocate 4 bytes.
.2208	a2 04		ldx #$04			ldx 	#4
.220a	20 7d 1d	jsr $1d7d			jsr 	RSClaim 					; create on stack.
.220d	88		dey				dey
.220e	a9 01		lda #$01			lda 	#1
.2210	20 a9 1d	jsr $1da9			jsr 	RSSavePosition 				; save position before the WHILE keyword.
.2213	c8		iny				iny
.2214	20 7a 17	jsr $177a			jsr 	EvaluateInteger				; get the conditional
.2217	20 09 1d	jsr $1d09			jsr 	MInt32Zero 	 				; if zero, skip forward.
.221a	f0 01		beq $221d			beq 	_CWFail
.221c	60		rts				rts
.221d					_CWFail:
.221d	a9 04		lda #$04			lda 	#4
.221f	20 9f 1d	jsr $1d9f			jsr 	RSFree 						; close the just opened position.
.2222	a9 9f		lda #$9f			lda 	#TKW_WEND 					; scan forward past WEND.
.2224	aa		tax				tax
.2225	20 41 22	jsr $2241			jsr 	ScanForward
.2228	60		rts				rts
.2229					Command_Wend:
.2229	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.222b	a1 78		lda ($78,x)			lda 	(rsPointer,x)
.222d	c9 57		cmp #$57			cmp 	#markerWHILE 						; does it match
.222f	f0 05		beq $2236			beq 	_isok
.2231	a2 11		ldx #$11			ldx 	#ErrorID_wendErr
.2233	20 10 1e	jsr $1e10			jsr 	ErrorHandler
.2236					_isok:
.2236	a9 01		lda #$01			lda 	#1
.2238	20 bc 1d	jsr $1dbc			jsr 	RSLoadPosition				; go back until true
.223b	a9 04		lda #$04			lda 	#4
.223d	20 9f 1d	jsr $1d9f			jsr 	RSFree 						; close the loop
.2240	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/binary.asm

.1407					BinaryProcess:
.1407	b5 40		lda $40,x			lda 	esType,x 					; or type bytes together and check bit 6.
.1409	15 41		ora $41,x			ora 	esType+1,x
.140b	0a		asl a				asl 	a
.140c	30 0e		bmi $141c			bmi 	_BPStringType 				; if one is set, then string type.
.140e	18		clc				clc 								; return CC for integer
.140f	29 02		and #$02			and 	#$02 						; $02 because of ASL A.
.1411	f0 08		beq $141b			beq 	_BPExit 					; if both integer then return with CC.
.1413	20 21 14	jsr $1421			jsr 	BPMakeBothFloat 			; make both float
.1416	a9 01		lda #$01			lda 	#$01 						; set result type to float
.1418	95 40		sta $40,x			sta 	esType,x
.141a	38		sec				sec 								; and return with carry set.
.141b					_BPExit:
.141b	60		rts				rts
.141c					_BPStringType:
.141c	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.141e	20 10 1e	jsr $1e10			jsr 	ErrorHandler
.1421					BPMakeBothFloat:
.1421	e8		inx				inx
.1422	20 26 14	jsr $1426			jsr 	BPMakeFloat 				; one is a float, so we do both as floats.
.1425	ca		dex				dex
.1426					BPMakeFloat:
.1426	b5 40		lda $40,x			lda 	esType,x 					; get type bit.
.1428	4a		lsr a				lsr 	a
.1429	b0 07		bcs $1432			bcs 	_BPIsFloat
.142b	8a		txa				txa
.142c	a2 1a		ldx #$1a		ldx	#26
.142e	20 17 1e	jsr $1e17		jsr	floatingpointHandler
.1431	aa		tax				tax
.1432					_BPIsFloat:
.1432	60		rts				rts
.1433					AddHandler:
.1433	20 04 16	jsr $1604			jsr 	DereferenceTwo 				; dereference top two on stack.
.1436	b5 40		lda $40,x			lda 	esType,x 					; check two strings.
.1438	35 41		and $41,x			and 	esType+1,x
.143a	29 40		and #$40			and 	#$40 						; if both have bit 6 set ...
.143c	d0 10		bne $144e			bne 	_AHStringConcat				; concatenate strings.
.143e	20 07 14	jsr $1407			jsr 	BinaryProcess 				; check to see if either is float
.1441	b0 03		bcs $1446			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.1443	4c cd 1b	jmp $1bcd			jmp 	MInt32Add 							; else do it as integer.
.1446					_IsFPOperation:
.1446	8a		txa				txa 								; call the relevant fp routine
.1447	a2 02		ldx #$02		ldx	#2
.1449	20 17 1e	jsr $1e17		jsr	floatingpointHandler
.144c	aa		tax				tax
.144d	60		rts				rts
.144e					_AHStringConcat:
.144e	8a		txa				txa
.144f	a2 02		ldx #$02		ldx	#2
.1451	20 69 1f	jsr $1f69		jsr	stringHandler
.1454	aa		tax				tax
.1455	60		rts				rts
.1456					SubHandler:
.1456	20 04 16	jsr $1604			jsr 	DereferenceTwo
.1459	20 07 14	jsr $1407			jsr 	BinaryProcess 				; check to see if either is float
.145c	b0 03		bcs $1461			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.145e	4c e7 1b	jmp $1be7			jmp 	MInt32Sub 							; else do it as integer.
.1461					_IsFPOperation:
.1461	8a		txa				txa 								; call the relevant fp routine
.1462	a2 10		ldx #$10		ldx	#16
.1464	20 17 1e	jsr $1e17		jsr	floatingpointHandler
.1467	aa		tax				tax
.1468	60		rts				rts
.1469					MulHandler:
.1469	20 04 16	jsr $1604			jsr 	DereferenceTwo
.146c	20 07 14	jsr $1407			jsr 	BinaryProcess 				; check to see if either is float
.146f	b0 03		bcs $1474			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.1471	4c 01 1c	jmp $1c01			jmp 	MInt32Multiply 							; else do it as integer.
.1474					_IsFPOperation:
.1474	8a		txa				txa 								; call the relevant fp routine
.1475	a2 0a		ldx #$0a		ldx	#10
.1477	20 17 1e	jsr $1e17		jsr	floatingpointHandler
.147a	aa		tax				tax
.147b	60		rts				rts
.147c					DivHandler:
.147c	20 04 16	jsr $1604			jsr 	DereferenceTwo
.147f	20 07 14	jsr $1407			jsr 	BinaryProcess 				; check to see if either is float
.1482	b0 03		bcs $1487			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.1484	4c db 1a	jmp $1adb			jmp 	MInt32SDivide 							; else do it as integer.
.1487					_IsFPOperation:
.1487	8a		txa				txa 								; call the relevant fp routine
.1488	a2 06		ldx #$06		ldx	#6
.148a	20 17 1e	jsr $1e17		jsr	floatingpointHandler
.148d	aa		tax				tax
.148e	60		rts				rts
.148f					ModHandler:
.148f	20 04 16	jsr $1604			jsr 	DereferenceTwo
.1492	20 07 14	jsr $1407			jsr 	BinaryProcess 				; check to see if either is float
.1495	b0 03		bcs $149a			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.1497	4c 59 1b	jmp $1b59			jmp 	MInt32Modulus 							; else do it as integer.
.149a					_IsFPOperation:
.149a	8a		txa				txa 								; call the relevant fp routine
.149b	a2 08		ldx #$08		ldx	#8
.149d	20 17 1e	jsr $1e17		jsr	floatingpointHandler
.14a0	aa		tax				tax
.14a1	60		rts				rts
.14a2					XorHandler:
.14a2	20 04 16	jsr $1604			jsr 	DereferenceTwo
.14a5	20 07 14	jsr $1407			jsr 	BinaryProcess 				; check to see if either is float
.14a8	b0 03		bcs $14ad			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.14aa	4c 8d 1a	jmp $1a8d			jmp 	MInt32Xor 							; else do it as integer.
.14ad					_IsFPOperation:
.14ad	8a		txa				txa 								; call the relevant fp routine
.14ae	a2 08		ldx #$08		ldx	#8
.14b0	20 17 1e	jsr $1e17		jsr	floatingpointHandler
.14b3	aa		tax				tax
.14b4	60		rts				rts
.14b5					OrHandler:
.14b5	20 04 16	jsr $1604			jsr 	DereferenceTwo
.14b8	20 07 14	jsr $1407			jsr 	BinaryProcess 				; check to see if either is float
.14bb	b0 03		bcs $14c0			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.14bd	4c 74 1a	jmp $1a74			jmp 	MInt32Or 							; else do it as integer.
.14c0					_IsFPOperation:
.14c0	8a		txa				txa 								; call the relevant fp routine
.14c1	a2 08		ldx #$08		ldx	#8
.14c3	20 17 1e	jsr $1e17		jsr	floatingpointHandler
.14c6	aa		tax				tax
.14c7	60		rts				rts
.14c8					AndHandler:
.14c8	20 04 16	jsr $1604			jsr 	DereferenceTwo
.14cb	20 07 14	jsr $1407			jsr 	BinaryProcess 				; check to see if either is float
.14ce	b0 03		bcs $14d3			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.14d0	4c 5b 1a	jmp $1a5b			jmp 	MInt32And 							; else do it as integer.
.14d3					_IsFPOperation:
.14d3	8a		txa				txa 								; call the relevant fp routine
.14d4	a2 08		ldx #$08		ldx	#8
.14d6	20 17 1e	jsr $1e17		jsr	floatingpointHandler
.14d9	aa		tax				tax
.14da	60		rts				rts
.14db					ShlHandler:
.14db	20 04 16	jsr $1604			jsr 	DereferenceTwo
.14de	20 07 14	jsr $1407			jsr 	BinaryProcess 				; check to see if either is float
.14e1	b0 03		bcs $14e6			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.14e3	4c 5c 15	jmp $155c			jmp 	Mint32ShiftLeftX 							; else do it as integer.
.14e6					_IsFPOperation:
.14e6	8a		txa				txa 								; call the relevant fp routine
.14e7	a2 08		ldx #$08		ldx	#8
.14e9	20 17 1e	jsr $1e17		jsr	floatingpointHandler
.14ec	aa		tax				tax
.14ed	60		rts				rts
.14ee					ShrHandler:
.14ee	20 04 16	jsr $1604			jsr 	DereferenceTwo
.14f1	20 07 14	jsr $1407			jsr 	BinaryProcess 				; check to see if either is float
.14f4	b0 03		bcs $14f9			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.14f6	4c 5f 15	jmp $155f			jmp 	MInt32ShiftRightX 							; else do it as integer.
.14f9					_IsFPOperation:
.14f9	8a		txa				txa 								; call the relevant fp routine
.14fa	a2 08		ldx #$08		ldx	#8
.14fc	20 17 1e	jsr $1e17		jsr	floatingpointHandler
.14ff	aa		tax				tax
.1500	60		rts				rts
.1501					WordRefHandler:
.1501	20 04 16	jsr $1604			jsr 	DereferenceTwo
.1504	20 07 14	jsr $1407			jsr 	BinaryProcess 				; check to see if either is float
.1507	b0 03		bcs $150c			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.1509	4c 4e 15	jmp $154e			jmp 	MInt32WordIndirect 							; else do it as integer.
.150c					_IsFPOperation:
.150c	8a		txa				txa 								; call the relevant fp routine
.150d	a2 08		ldx #$08		ldx	#8
.150f	20 17 1e	jsr $1e17		jsr	floatingpointHandler
.1512	aa		tax				tax
.1513	60		rts				rts
.1514					ByteRefHandler:
.1514	20 04 16	jsr $1604			jsr 	DereferenceTwo
.1517	20 07 14	jsr $1407			jsr 	BinaryProcess 				; check to see if either is float
.151a	b0 03		bcs $151f			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.151c	4c 52 15	jmp $1552			jmp 	MInt32ByteIndirect 							; else do it as integer.
.151f					_IsFPOperation:
.151f	8a		txa				txa 								; call the relevant fp routine
.1520	a2 08		ldx #$08		ldx	#8
.1522	20 17 1e	jsr $1e17		jsr	floatingpointHandler
.1525	aa		tax				tax
.1526	60		rts				rts
.1527					PowerHandler:
.1527	20 04 16	jsr $1604			jsr 	DereferenceTwo
.152a	20 07 14	jsr $1407			jsr 	BinaryProcess 				; check to see if either is float
.152d	b0 03		bcs $1532			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.152f	4c 3a 15	jmp $153a			jmp 	PowerInteger 							; else do it as integer.
.1532					_IsFPOperation:
.1532	8a		txa				txa 								; call the relevant fp routine
.1533	a2 16		ldx #$16		ldx	#22
.1535	20 17 1e	jsr $1e17		jsr	floatingpointHandler
.1538	aa		tax				tax
.1539	60		rts				rts
.153a					PowerInteger:
.153a	20 21 14	jsr $1421			jsr 	BPMakeBothFloat				; make them float.
.153d	8a		txa				txa
.153e	a2 16		ldx #$16		ldx	#22
.1540	20 17 1e	jsr $1e17		jsr	floatingpointHandler
.1543	a2 12		ldx #$12		ldx	#18
.1545	20 17 1e	jsr $1e17		jsr	floatingpointHandler
.1548	aa		tax				tax
.1549	a9 00		lda #$00			lda 	#0 							; make type integer
.154b	95 40		sta $40,x			sta 	esType,x
.154d	60		rts				rts
.154e					Mint32WordIndirect:
.154e	a9 80		lda #$80			lda 	#$80 				 		; word reference type
.1550	d0 02		bne $1554			bne 	Min32Indirect
.1552					Mint32ByteIndirect:
.1552	a9 a0		lda #$a0			lda 	#$A0 						; byte reference type
.1554					Min32Indirect:
.1554	48		pha				pha 								; save the indirection
.1555	20 cd 1b	jsr $1bcd			jsr 	MInt32Add 					; add a!b a?b
.1558	68		pla				pla 								; and set the type to reference.
.1559	95 40		sta $40,x			sta 	esType,x
.155b	60		rts				rts
.155c					Mint32ShiftLeftX:
.155c	18		clc				clc
.155d	90 01		bcc $1560			bcc 	Mint32Shift
.155f					Mint32ShiftRightX:
.155f	38		sec				sec
.1560					Mint32Shift:
.1560	08		php				php 								; save carry flag on stack.
.1561	b5 51		lda $51,x			lda 	esInt1+1,x 					; if shift >= 32 then it is zero.
.1563	15 59		ora $59,x			ora 	esInt2+1,x
.1565	15 61		ora $61,x			ora 	esInt3+1,x
.1567	d0 1e		bne $1587			bne 	_MShiftZero
.1569	b5 49		lda $49,x			lda 	esInt0+1,x
.156b	c9 20		cmp #$20			cmp 	#32
.156d	b0 18		bcs $1587			bcs 	_MShiftZero
.156f					_MShiftLoop:
.156f	b5 49		lda $49,x			lda 	esInt0+1,x 					; check count is zero
.1571	f0 12		beq $1585			beq 	_MShiftExit
.1573	d6 49		dec $49,x			dec 	esInt0+1,x
.1575	28		plp				plp 								; restore and save carry
.1576	08		php				php
.1577	90 06		bcc $157f			bcc 	_MShiftLeft
.1579	20 00 1d	jsr $1d00			jsr 	Mint32ShiftRight
.157c	4c 6f 15	jmp $156f			jmp 	_MShiftLoop
.157f					_MShiftLeft:
.157f	20 f7 1c	jsr $1cf7			jsr 	Mint32ShiftLeft
.1582	4c 6f 15	jmp $156f			jmp 	_MShiftLoop
.1585					_MShiftExit:
.1585	28		plp				plp	 								; throw saved carry and exit
.1586	60		rts				rts
.1587					_MShiftZero:
.1587	4c e2 1c	jmp $1ce2			jmp 	MInt32False 				; return 0.

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/compare.asm

.158a					PerformComparison:
.158a	20 04 16	jsr $1604			jsr 	DereferenceTwo 				; make both values.
.158d	b5 40		lda $40,x			lda 	esType,x 					; check for two strings.
.158f	35 41		and $41,x			and 	esType+1,x
.1591	0a		asl a				asl 	a
.1592	30 1d		bmi $15b1			bmi 	_PCIsString
.1594	b5 40		lda $40,x			lda 	esType,x 					; check either is floating point.
.1596	15 41		ora $41,x			ora 	esType+1,x
.1598	0a		asl a				asl 	a 							; shift bit 6 (string) to bit 7
.1599	30 22		bmi $15bd			bmi 	_PCError
.159b	29 02		and #$02			and 	#$02 						; because of ASL, check type in bit 0
.159d	f0 0f		beq $15ae			beq 	_PCIsInteger 				; if not two integers
.159f	20 21 14	jsr $1421			jsr 	BPMakeBothFloat 			; make both float
.15a2	8a		txa				txa
.15a3	a2 04		ldx #$04		ldx	#4
.15a5	20 17 1e	jsr $1e17		jsr	floatingpointHandler
.15a8	86 0a		stx $0a				stx 	tempShort 					; save result
.15aa	aa		tax				tax
.15ab	a5 0a		lda $0a				lda 	tempShort
.15ad	60		rts				rts
.15ae					_PCIsInteger:
.15ae	4c a6 1a	jmp $1aa6			jmp 	MInt32Compare
.15b1					_PCIsString:
.15b1	8a		txa				txa 								; A has SP
.15b2	a2 04		ldx #$04		ldx	#4
.15b4	20 69 1f	jsr $1f69		jsr	stringHandler
.15b7	86 0a		stx $0a				stx 	tempShort 					; save result
.15b9	aa		tax				tax 								; put SP back in X and get result.
.15ba	a5 0a		lda $0a				lda 	tempShort
.15bc	60		rts				rts
.15bd					_PCError:
.15bd	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.15bf	20 10 1e	jsr $1e10			jsr 	ErrorHandler
.15c2					CompareEquals:
.15c2	20 8a 15	jsr $158a			jsr 	PerformComparison
.15c5	c9 00		cmp #$00			cmp 	#$00
.15c7	f0 35		beq $15fe			beq  	CompareTrue
.15c9	4c 01 16	jmp $1601			jmp 	CompareFalse
.15cc					CompareLess:
.15cc	20 8a 15	jsr $158a			jsr 	PerformComparison
.15cf	c9 ff		cmp #$ff			cmp 	#$FF
.15d1	f0 2b		beq $15fe			beq  	CompareTrue
.15d3	4c 01 16	jmp $1601			jmp 	CompareFalse
.15d6					CompareGreater:
.15d6	20 8a 15	jsr $158a			jsr 	PerformComparison
.15d9	c9 01		cmp #$01			cmp 	#$01
.15db	f0 21		beq $15fe			beq  	CompareTrue
.15dd	4c 01 16	jmp $1601			jmp 	CompareFalse
.15e0					CompareNotEquals:
.15e0	20 8a 15	jsr $158a			jsr 	PerformComparison
.15e3	c9 00		cmp #$00			cmp 	#$00
.15e5	d0 17		bne $15fe			bne  	CompareTrue
.15e7	4c 01 16	jmp $1601			jmp 	CompareFalse
.15ea					CompareGreaterEq:
.15ea	20 8a 15	jsr $158a			jsr 	PerformComparison
.15ed	c9 ff		cmp #$ff			cmp 	#$FF
.15ef	d0 0d		bne $15fe			bne  	CompareTrue
.15f1	4c 01 16	jmp $1601			jmp 	CompareFalse
.15f4					CompareLessEq:
.15f4	20 8a 15	jsr $158a			jsr 	PerformComparison
.15f7	c9 01		cmp #$01			cmp 	#$01
.15f9	d0 03		bne $15fe			bne  	CompareTrue
.15fb	4c 01 16	jmp $1601			jmp 	CompareFalse
.15fe					CompareTrue:
.15fe	4c de 1c	jmp $1cde			jmp 	MInt32True
.1601					CompareFalse:
.1601	4c e2 1c	jmp $1ce2			jmp 	MInt32False

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/dereference.asm

.1604					DereferenceTwo:
.1604	e8		inx				inx
.1605	20 09 16	jsr $1609			jsr 	DereferenceOne
.1608	ca		dex				dex
.1609					DereferenceOne:
.1609	b5 40		lda $40,x			lda 	esType,x
.160b	10 3d		bpl $164a			bpl 	_DRNotReference 			; is it a reference ?
.160d	4a		lsr a				lsr 	a 							; do float dereference if bit 0 set.
.160e	b0 3b		bcs $164b			bcs 	_DRFloatDeReference
.1610	98		tya				tya
.1611	48		pha				pha
.1612	b5 48		lda $48,x			lda 	esInt0,x 					; copy address to temp0
.1614	85 04		sta $04				sta 	temp0
.1616	b5 50		lda $50,x			lda 	esInt1,x
.1618	85 05		sta $05				sta 	temp0+1
.161a	a9 00		lda #$00			lda 	#0 							; clear esInt1..3
.161c	95 50		sta $50,x			sta 	esInt1,x
.161e	95 58		sta $58,x			sta 	esInt2,x
.1620	95 60		sta $60,x			sta 	esInt3,x
.1622	b5 40		lda $40,x			lda 	esType,x 					; get the type byte.
.1624	29 60		and #$60			and 	#$60 						; get string flag ($40) and byte flag ($20)
.1626	0a		asl a				asl 	a 							; now string ($80) byte ($40)
.1627	30 0d		bmi $1636			bmi 	_DeRefString 				; string, 2 bytes only
.1629	d0 11		bne $163c			bne 	_DeRefByte 					; byte 1 byte only
.162b					_DeRefLong:
.162b	a0 03		ldy #$03			ldy 	#3
.162d	b1 04		lda ($04),y			lda 	(temp0),y
.162f	95 60		sta $60,x			sta 	esInt3,x
.1631	88		dey				dey
.1632	b1 04		lda ($04),y			lda 	(temp0),y
.1634	95 58		sta $58,x			sta 	esInt2,x
.1636					_DeRefString:
.1636	a0 01		ldy #$01			ldy 	#1
.1638	b1 04		lda ($04),y			lda 	(temp0),y
.163a	95 50		sta $50,x			sta 	esInt1,x
.163c					_DeRefByte:
.163c	a0 00		ldy #$00			ldy 	#0
.163e	b1 04		lda ($04),y			lda 	(temp0),y
.1640	95 48		sta $48,x			sta 	esInt0,x
.1642	b5 40		lda $40,x			lda 	esType,x 					; clear byte and deref bits.
.1644	29 40		and #$40			and 	#$40
.1646	95 40		sta $40,x			sta 	esType,x
.1648	68		pla				pla
.1649	a8		tay				tay
.164a					_DRNotReference
.164a	60		rts				rts
.164b					_DRFloatDereference:
.164b	8a		txa				txa
.164c							floatingpoint_deref
.164c	aa		tax				tax
.164d	a9 01		lda #$01			lda 	#$01 						; type to FP (float)
.164f	95 40		sta $40,x			sta 	esType,x
.1651	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/evaluate.asm

.1652					EvaluateLevel:
.1652	48		pha				pha 								; save precedence level.
.1653	a9 00		lda #$00			lda 	#0 							; zero the current stack level.
.1655	95 48		sta $48,x			sta 	esInt0,x
.1657	95 50		sta $50,x			sta 	esInt1,x
.1659	95 58		sta $58,x			sta 	esInt2,x
.165b	95 60		sta $60,x			sta 	esInt3,x
.165d	95 40		sta $40,x			sta 	esType,x 					; zero the type (integer value)
.165f	b1 02		lda ($02),y			lda 	(codePtr),y	 				; look at first token/character
.1661	30 21		bmi $1684			bmi 	_ELIsToken 					; if -ve could be string, float, or unary function.
.1663	0a		asl a				asl 	a 							; if 00-3F then will now be PL and it's a variable.
.1664	30 0a		bmi $1670			bmi 	_ELIsConstant 				; 40-7F will be -ve and that's an integer constant.
.1666	8a		txa				txa 								; stack level in X
.1667	a2 00		ldx #$00		ldx	#0
.1669	20 c2 20	jsr $20c2		jsr	variableHandler
.166c	aa		tax				tax
.166d	4c ad 16	jmp $16ad			jmp		_ELHasTerm
.1670					_ELIsConstant:
.1670	4a		lsr a				lsr 	a 							; get the value back
.1671	29 3f		and #$3f			and 	#$3F 						; force into range 0-63
.1673	95 48		sta $48,x			sta 	esInt0,x 					; and put in LSB.
.1675					_ELCheckNext:
.1675	c8		iny				iny 								; look at next
.1676	b1 02		lda ($02),y			lda 	(codePtr),y
.1678	49 40		eor #$40			eor 	#$40 						; shift around so 40-7F => 00-3F
.167a	c9 40		cmp #$40			cmp 	#$40 						; out of range ?
.167c	b0 2f		bcs $16ad			bcs 	_ELHasTerm 					; done getting the constant.
.167e	20 ba 17	jsr $17ba			jsr 	ELShiftByteIn 				; shift byte into position.
.1681	4c 75 16	jmp $1675			jmp 	_ELCheckNext
.1684					_ELIsToken:
.1684	c9 85		cmp #$85			cmp 	#TOK_STR 					; handle strings.
.1686	f0 0f		beq $1697			beq 	_ELIsString
.1688	c9 84		cmp #$84			cmp 	#TOK_FPC 					; if no, then check unary.
.168a	d0 5f		bne $16eb			bne 	_ELCheckUnary
.168c	8a		txa				txa 								; put X into A
.168d	c8		iny				iny 								; skip over the float marker
.168e	a2 18		ldx #$18		ldx	#24
.1690	20 17 1e	jsr $1e17		jsr	floatingpointHandler
.1693	aa		tax				tax 								; restore X
.1694	4c ad 16	jmp $16ad			jmp 	_ELHasTerm
.1697					_ELIsString:
.1697	98		tya				tya 								; address of string is codePtr+y+1
.1698	38		sec				sec
.1699	65 02		adc $02				adc 	codePtr
.169b	95 48		sta $48,x			sta 	esInt0,x
.169d	a5 03		lda $03				lda 	codePtr+1
.169f	69 00		adc #$00			adc 	#0
.16a1	95 50		sta $50,x			sta 	esInt1,x
.16a3	a9 40		lda #$40			lda 	#$40 						; set type to string value
.16a5	95 40		sta $40,x			sta 	esType,x
.16a7	c8		iny				iny 								; skip over string.
.16a8	98		tya				tya
.16a9	38		sec				sec									; +1 for the length itself.
.16aa	71 02		adc ($02),y			adc 	(codePtr),y
.16ac	a8		tay				tay 								; and fall through to term loop code.
.16ad					_ELHasTerm:
.16ad	b1 02		lda ($02),y			lda 	(codePtr),y
.16af	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; check in the correct range for binary tokens.
.16b1	90 04		bcc $16b7			bcc 	_ELPopExit
.16b3	c9 99		cmp #$99			cmp 	#TOK_STRUCTST
.16b5	90 02		bcc $16b9			bcc 	_ELHasBinaryTerm
.16b7					_ELPopExit:
.16b7	68		pla				pla
.16b8					_ELExit:
.16b8	60		rts				rts
.16b9					_ELHasBinaryTerm:
.16b9	84 0a		sty $0a				sty 	tempShort 					; save position
.16bb	a8		tay				tay 								; use token as an index and get the precedence.
.16bc	b9 62 17	lda $1762,y			lda 	ELBinaryOperatorInfo-TOK_BINARYST,y
.16bf	a4 0a		ldy $0a				ldy 	tempShort 					; restore Y
.16c1	85 0a		sta $0a				sta 	tempShort 					; save precedence in memory.
.16c3	68		pla				pla 								; restore current level.
.16c4	c5 0a		cmp $0a				cmp 	tempShort 					; if current >= operator then exit
.16c6	b0 f0		bcs $16b8			bcs 	_ELExit
.16c8	48		pha				pha 								; save current level back on the stack.
.16c9	b1 02		lda ($02),y			lda 	(codePtr),y 				; save the binary operator on the stack and skip it.
.16cb	48		pha				pha
.16cc	c8		iny				iny
.16cd	e8		inx				inx 								; calculate the RHS at the operator precedence.
.16ce	a5 0a		lda $0a				lda 	tempShort
.16d0	20 52 16	jsr $1652			jsr 	EvaluateLevel
.16d3	ca		dex				dex
.16d4	68		pla				pla 								; get the operator back out.
.16d5					_ELExecuteA:
.16d5	86 0a		stx $0a				stx 	tempShort 					; upload the vectors. Would be nice to use jmp (aaaa,x)
.16d7	0a		asl a				asl 	a 							; but not practical. May use push/rts later.
.16d8	aa		tax				tax
.16d9	bd 9f 12	lda $129f,x			lda 	Group0Vectors,x
.16dc	85 04		sta $04				sta 	temp0
.16de	bd a0 12	lda $12a0,x			lda 	Group0Vectors+1,x
.16e1	85 05		sta $05				sta 	temp0+1
.16e3	a6 0a		ldx $0a				ldx 	tempShort
.16e5	20 2e 17	jsr $172e			jsr 	_ELCallTemp0
.16e8	4c ad 16	jmp $16ad			jmp 	_ELHasTerm 					; and loop back round.
.16eb					_ELCheckUnary:
.16eb	c8		iny				iny 								; skip over token.
.16ec	c9 90		cmp #$90			cmp 	#TKW_MINUS 					; is it - term
.16ee	f0 15		beq $1705			beq 	_ELMinus
.16f0	c9 97		cmp #$97			cmp 	#TKW_PLING 					; is it ! or ? term
.16f2	f0 28		beq $171c			beq 	_ELIndirect
.16f4	c9 98		cmp #$98			cmp 	#TKW_QMARK
.16f6	f0 24		beq $171c			beq 	_ELIndirect
.16f8	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST 				; must be TOK_UNARYST ... TOK_TOKENS
.16fa	90 04		bcc $1700			bcc 	_ELUSyntax
.16fc	c9 c4		cmp #$c4			cmp 	#TOK_TOKENS
.16fe	90 d5		bcc $16d5			bcc 	_ELExecuteA 				; if so do that token.
.1700					_ELUSyntax:
.1700	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.1702	20 10 1e	jsr $1e10			jsr 	ErrorHandler
.1705					_ELMinus:
.1705	20 43 17	jsr $1743			jsr 	EvaluateNumericTerm 		; get a number to negate.
.1708	b5 40		lda $40,x			lda 	esType,x 					; is it integer
.170a	f0 0a		beq $1716			beq 	_ELMinusInteger
.170c	8a		txa				txa
.170d	a2 0c		ldx #$0c		ldx	#12
.170f	20 17 1e	jsr $1e17		jsr	floatingpointHandler
.1712	aa		tax				tax
.1713	4c ad 16	jmp $16ad			jmp 	_ELHasTerm
.1716					_ELMinusInteger:
.1716	20 9c 1c	jsr $1c9c			jsr 	MInt32Negate 				; do int negate
.1719	4c ad 16	jmp $16ad			jmp 	_ELHasTerm
.171c					_ELIndirect:
.171c	48		pha				pha 								; save what we want (TKW_QMARK TWK_PLING)
.171d	20 4c 17	jsr $174c			jsr 	EvaluateIntegerTerm 		; integer address
.1720	68		pla				pla
.1721	49 97		eor #$97			eor 	#TKW_PLING 					; now $00 if !
.1723	f0 02		beq $1727			beq 	_ELHaveModifier
.1725	a9 20		lda #$20			lda 	#$20 						; now $00 if !, $20 if ?
.1727					_ELHaveModifier:
.1727	09 80		ora #$80			ora 	#$80						; make it the appropriate reference.
.1729	95 40		sta $40,x			sta 	esType,x
.172b	4c ad 16	jmp $16ad			jmp 	_ELHasTerm
.172e					_ELCallTemp0:
.172e	6c 04 00	jmp ($0004)			jmp 	(temp0)
.1731					UnaryParenthesis:
.1731	a9 00		lda #$00			lda 	#0 							; ( is a unary function ....
.1733	20 52 16	jsr $1652			jsr 	EvaluateLevel
.1736	20 55 1d	jsr $1d55			jsr 	CheckRightParen 			; check for )
.1739	60		rts				rts
.173a					EvaluateTerm:
.173a	a9 0f		lda #$0f			lda 	#15
.173c	20 52 16	jsr $1652			jsr 	EvaluateLevel
.173f	20 09 16	jsr $1609			jsr 	DereferenceOne
.1742	60		rts				rts
.1743					EvaluateNumericTerm:
.1743	20 3a 17	jsr $173a			jsr 	EvaluateTerm
.1746	b5 40		lda $40,x			lda 	esType,x
.1748	0a		asl a				asl 	a 							; see if it's a string.
.1749	30 09		bmi $1754			bmi 	ENTType
.174b	60		rts				rts
.174c					EvaluateIntegerTerm:
.174c	20 3a 17	jsr $173a			jsr 	EvaluateTerm
.174f	b5 40		lda $40,x			lda 	esType,x
.1751	d0 01		bne $1754			bne 	ENTType
.1753	60		rts				rts
.1754					ENTType:
.1754	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.1756	20 10 1e	jsr $1e10			jsr 	ErrorHandler
.1759					EvaluateRoot:
.1759	a2 00		ldx #$00			ldx 	#0
.175b					Evaluate:
.175b	a9 00		lda #$00			lda 	#0
.175d	20 52 16	jsr $1652			jsr 	EvaluateLevel
.1760	20 09 16	jsr $1609			jsr 	DereferenceOne
.1763	60		rts				rts
.1764					EvaluateNumeric:
.1764	20 5b 17	jsr $175b			jsr 	Evaluate
.1767	b5 40		lda $40,x			lda 	esType,x
.1769	0a		asl a				asl 	a 							; see if it's a string.
.176a	30 e8		bmi $1754			bmi 	ENTType
.176c	4a		lsr a				lsr 	a 							; shift float flag into carry.
.176d	4a		lsr a				lsr 	a
.176e	60		rts				rts
.176f					EvaluateString:
.176f	20 5b 17	jsr $175b			jsr 	Evaluate
.1772	b5 40		lda $40,x			lda 	esType,x
.1774	0a		asl a				asl 	a 							; see if it's a string.
.1775	10 dd		bpl $1754			bpl 	ENTType
.1777	60		rts				rts
.1778					EvaluateRootInteger:
.1778	a2 00		ldx #$00			ldx 	#0
.177a					EvaluateInteger:
.177a	20 5b 17	jsr $175b			jsr 	Evaluate
.177d	b5 40		lda $40,x			lda 	esType,x
.177f	d0 d3		bne $1754			bne 	ENTType
.1781	60		rts				rts
.1782					EvaluateSmallInteger:
.1782	20 7a 17	jsr $177a			jsr 	EvaluateInteger
.1785	b5 50		lda $50,x			lda 	esInt1,x
.1787	15 58		ora $58,x			ora 	esInt2,x
.1789	15 60		ora $60,x			ora 	esInt3,x
.178b	d0 03		bne $1790			bne 	_ESIValue
.178d	b5 48		lda $48,x			lda 	esInt0,x
.178f	60		rts				rts
.1790					_ESIValue:
.1790	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.1792	20 10 1e	jsr $1e10			jsr 	ErrorHandler
.1795					LinkEvaluate:
.1795	aa		tax				tax
.1796	20 5b 17	jsr $175b			jsr 	Evaluate
.1799	8a		txa				txa
.179a	60		rts				rts
.179b					LinkEvaluateInteger:
.179b	aa		tax				tax
.179c	20 7a 17	jsr $177a			jsr 	EvaluateInteger
.179f	8a		txa				txa
.17a0	60		rts				rts
.17a1					LinkEvaluateSmallInt:
.17a1	aa		tax				tax
.17a2	20 82 17	jsr $1782			jsr 	EvaluateSmallInteger
.17a5	8a		txa				txa
.17a6	60		rts				rts
.17a7					EvaluateReference:
.17a7	ad f9 17	lda $17f9			lda 	ELBinaryOperatorInfo+TKW_PLING-TOK_BINARYST
.17aa	38		sec				sec 								; sub 1 to allow a!x b?x to work.
.17ab	e9 01		sbc #$01			sbc 	#1
.17ad	20 52 16	jsr $1652			jsr 	EvaluateLevel
.17b0	b5 40		lda $40,x			lda 	esType,x
.17b2	10 01		bpl $17b5			bpl 	_ERFail
.17b4	60		rts				rts
.17b5					_ERFail:
.17b5	a2 0b		ldx #$0b			ldx 	#ErrorID_NoReference
.17b7	20 10 1e	jsr $1e10			jsr 	ErrorHandler
.17ba					ELShiftByteIn:
.17ba	48		pha				pha 								; save bits to shift in.
.17bb	b5 60		lda $60,x			lda 	esInt3,x 					; save top most byte
.17bd	48		pha				pha
.17be	b5 58		lda $58,x			lda 	esInt2,x 					; shift everything left 8 bits
.17c0	95 60		sta $60,x			sta 	esInt3,x
.17c2	b5 50		lda $50,x			lda 	esInt1,x
.17c4	95 58		sta $58,x			sta 	esInt2,x
.17c6	b5 48		lda $48,x			lda 	esInt0,x
.17c8	95 50		sta $50,x			sta 	esInt1,x
.17ca	a9 00		lda #$00			lda 	#0
.17cc	95 48		sta $48,x			sta 	esInt0,x
.17ce	68		pla				pla 								; now A:TOS is a 5 byte register, shift right twice.
.17cf	29 03		and #$03			and 	#3 							; only want lower 2 bits
.17d1	09 04		ora #$04			ora 	#4  						; set bit 2 - when 1 we are done
.17d3					_ELShiftLoop:
.17d3	4a		lsr a				lsr 	a
.17d4	76 60		ror $60,x			ror 	esInt3,x
.17d6	76 58		ror $58,x			ror 	esInt2,x
.17d8	76 50		ror $50,x			ror 	esInt1,x
.17da	76 48		ror $48,x			ror 	esInt0,x
.17dc	c9 01		cmp #$01			cmp 	#1
.17de	d0 f3		bne $17d3			bne 	_ELShiftLoop
.17e0	68		pla				pla 								; get original 6 bit value and OR in.
.17e1	29 3f		and #$3f			and 	#$3F
.17e3	15 48		ora $48,x			ora 	esInt0,x
.17e5	95 48		sta $48,x			sta 	esInt0,x
.17e7	60		rts				rts
.17e8					ELBinaryOperatorInfo:

;******  Processing file: main/evaluate/../../generated/binarystructinfo.inc

>17e8	01					.byte	$01			; $86 and
>17e9	01					.byte	$01			; $87 or
>17ea	01					.byte	$01			; $88 xor
>17eb	02					.byte	$02			; $89 >=
>17ec	02					.byte	$02			; $8a <=
>17ed	02					.byte	$02			; $8b >
>17ee	02					.byte	$02			; $8c <
>17ef	02					.byte	$02			; $8d =
>17f0	02					.byte	$02			; $8e <>
>17f1	03					.byte	$03			; $8f +
>17f2	03					.byte	$03			; $90 -
>17f3	04					.byte	$04			; $91 >>
>17f4	04					.byte	$04			; $92 <<
>17f5	04					.byte	$04			; $93 *
>17f6	04					.byte	$04			; $94 /
>17f7	04					.byte	$04			; $95 mod
>17f8	05					.byte	$05			; $96 ^
>17f9	06					.byte	$06			; $97 !
>17fa	06					.byte	$06			; $98 ?
>17fb	82					.byte	$82			; $99 repeat
>17fc	82					.byte	$82			; $9a while
>17fd	82					.byte	$82			; $9b for
>17fe	82					.byte	$82			; $9c if
>17ff	82					.byte	$82			; $9d defproc
>1800	80					.byte	$80			; $9e until
>1801	80					.byte	$80			; $9f wend
>1802	80					.byte	$80			; $a0 next
>1803	80					.byte	$80			; $a1 then
>1804	80					.byte	$80			; $a2 endif
>1805	80					.byte	$80			; $a3 endproc

;******  Return to file: main/evaluate/evaluate.asm


;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary.asm

.1806					UnaryLen:
.1806	20 14 18	jsr $1814			jsr 	ULStart
.1809					ULFinish:
.1809	b1 04		lda ($04),y			lda 	(temp0),y
.180b	a4 0a		ldy $0a				ldy 	tempShort
.180d	20 f1 1c	jsr $1cf1			jsr 	MInt32Set8Bit
.1810	20 55 1d	jsr $1d55			jsr 	CheckRightParen
.1813	60		rts				rts
.1814	20 6f 17	jsr $176f	ULStart:jsr 	EvaluateString
.1817	b5 48		lda $48,x			lda 	esInt0,x 					; copy address of string to temp0
.1819	85 04		sta $04				sta 	temp0
.181b	b5 50		lda $50,x			lda 	esInt1,x
.181d	85 05		sta $05				sta 	temp0+1
.181f	84 0a		sty $0a				sty 	tempShort 					; get length
.1821	a0 00		ldy #$00			ldy 	#0
.1823	60		rts				rts
.1824					UnaryAsc:
.1824	20 14 18	jsr $1814			jsr 	ULStart 					; same as LEN() get string, save Y, point to length.
.1827	b1 04		lda ($04),y			lda 	(temp0),y
.1829	c8		iny				iny 		 						; point to first character, we can do LEN code after that
.182a	c9 00		cmp #$00			cmp 	#0
.182c	d0 db		bne $1809			bne 	ULFinish
.182e	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.1830	20 10 1e	jsr $1e10			jsr 	ErrorHandler
.1833					UnaryAbs:
.1833	20 64 17	jsr $1764			jsr 	EvaluateNumeric
.1836	b0 07		bcs $183f			bcs 	_UAFloat
.1838	20 97 1c	jsr $1c97			jsr 	MInt32Absolute
.183b	20 55 1d	jsr $1d55			jsr 	CheckRightParen
.183e	60		rts				rts
.183f					_UAFloat:
.183f	8a		txa				txa
.1840	a2 00		ldx #$00		ldx	#0
.1842	20 17 1e	jsr $1e17		jsr	floatingpointHandler
.1845	aa		tax				tax
.1846	20 55 1d	jsr $1d55			jsr 	CheckRightParen
.1849	60		rts				rts
.184a					UnarySgn:
.184a	20 64 17	jsr $1764			jsr 	EvaluateNumeric
.184d	b0 07		bcs $1856			bcs 	_USFloat
.184f	20 cf 1c	jsr $1ccf			jsr 	MInt32Sign
.1852	20 55 1d	jsr $1d55			jsr 	CheckRightParen
.1855	60		rts				rts
.1856					_USFloat:
.1856	8a		txa				txa
.1857	a2 0e		ldx #$0e		ldx	#14
.1859	20 17 1e	jsr $1e17		jsr	floatingpointHandler
.185c	aa		tax				tax
.185d	20 55 1d	jsr $1d55			jsr 	CheckRightParen
.1860	60		rts				rts
.1861					UnaryPeek:
.1861	20 8d 18	jsr $188d			jsr 	PDLCode
.1864	4c 81 18	jmp $1881			jmp 	PDLByte0
.1867					UnaryDeek:
.1867	20 8d 18	jsr $188d			jsr 	PDLCode
.186a	4c 7b 18	jmp $187b			jmp 	PDLByte1
.186d					UnaryLeek:
.186d	20 8d 18	jsr $188d			jsr 	PDLCode
.1870	a0 03		ldy #$03			ldy 	#3
.1872	b1 04		lda ($04),y			lda 	(temp0),y
.1874	95 60		sta $60,x			sta 	esInt3,x
.1876	88		dey				dey
.1877	b1 04		lda ($04),y			lda 	(temp0),y
.1879	95 58		sta $58,x			sta 	esInt2,x
.187b					PDLByte1:
.187b	a0 01		ldy #$01			ldy 	#1
.187d	b1 04		lda ($04),y			lda 	(temp0),y
.187f	95 50		sta $50,x			sta 	esInt1,x
.1881					PDLByte0:
.1881	a0 00		ldy #$00			ldy 	#0
.1883	b1 04		lda ($04),y			lda 	(temp0),y
.1885	95 48		sta $48,x			sta 	esInt0,x
.1887	a4 0a		ldy $0a				ldy 	tempShort 					; restore Y
.1889	20 55 1d	jsr $1d55			jsr 	CheckRightParen 			; check right and return
.188c	60		rts				rts
.188d					PDLCode:
.188d	20 7a 17	jsr $177a			jsr 	EvaluateInteger
.1890	b5 48		lda $48,x			lda 	esInt0,x 					; copy address of string to temp0
.1892	85 04		sta $04				sta 	temp0
.1894	b5 50		lda $50,x			lda 	esInt1,x
.1896	85 05		sta $05				sta 	temp0+1
.1898	a9 00		lda #$00			lda 	#0 							; zero upper 3 bytes of result, type okay.
.189a	95 50		sta $50,x			sta 	esInt1,x
.189c	95 58		sta $58,x			sta 	esInt2,x
.189e	95 60		sta $60,x			sta 	esInt3,x
.18a0	84 0a		sty $0a				sty 	tempShort 					; save Y
.18a2	60		rts				rts
.18a3					Unary_Random:
.18a3	20 12 1d	jsr $1d12			jsr 	MInt32Random 				; generate random number.
.18a6	b1 02		lda ($02),y			lda 	(codePtr),y 				; check followed by )
.18a8	c9 c4		cmp #$c4			cmp 	#TKW_RPAREN
.18aa	f0 08		beq $18b4			beq 	_URExit
.18ac	e8		inx				inx 								; load range 0..r-1 into +1
.18ad	20 7a 17	jsr $177a			jsr 	EvaluateInteger
.18b0	ca		dex				dex
.18b1	20 59 1b	jsr $1b59			jsr 	MInt32Modulus 				; calculate random % modulus
.18b4					_URExit:
.18b4	20 55 1d	jsr $1d55			jsr 	CheckRightParen 			; check right and return
.18b7	60		rts				rts
.18b8					Unary_Min:
.18b8	a9 01		lda #$01			lda 	#1 							; c1 cmp c2 needs to be > e.g. c1 > c2
.18ba	d0 02		bne $18be			bne 	UnaryMBody
.18bc					Unary_Max:
.18bc	a9 ff		lda #$ff			lda 	#$FF 						; c1 cmp c2 needs to be < e.g. c1 < c2
.18be					UnaryMBody:
.18be	48		pha				pha 								; save comparator on stack.
.18bf	20 5b 17	jsr $175b			jsr 	Evaluate 					; get the first thing to check
.18c2					_UnaryMLoop:
.18c2	b1 02		lda ($02),y			lda 	(codePtr),y 				; found ), indicates end.
.18c4	c8		iny				iny
.18c5	c9 c4		cmp #$c4			cmp 	#TKW_RPAREN
.18c7	f0 09		beq $18d2			beq 	_UnaryMExit
.18c9	c9 c6		cmp #$c6			cmp 	#TKW_COMMA 					; found , indicates more.
.18cb	f0 07		beq $18d4			beq 	_UnaryMCompare
.18cd	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.18cf	20 10 1e	jsr $1e10			jsr 	ErrorHandler
.18d2					_UnaryMExit:
.18d2	68		pla				pla 								; throw comparator and return.
.18d3	60		rts				rts
.18d4					_UnaryMCompare:
.18d4	e8		inx				inx 								; get the 2nd thing to evaluate
.18d5	20 5b 17	jsr $175b			jsr 	Evaluate
.18d8	ca		dex				dex
.18d9	20 8a 15	jsr $158a			jsr 	PerformComparison 			; this is part of evaluate/compare.asm
.18dc	85 0a		sta $0a				sta 	tempShort 					; save result
.18de	68		pla				pla 								; get what we need
.18df	48		pha				pha
.18e0	c5 0a		cmp $0a				cmp 	tempShort 					; did we get it
.18e2	d0 de		bne $18c2			bne 	_UnaryMLoop 				; no, try another value.
.18e4	20 e2 1c	jsr $1ce2			jsr 	MInt32False 				; promote 2nd to 1st.
.18e7	20 cd 1b	jsr $1bcd			jsr 	MInt32Add
.18ea	4c c2 18	jmp $18c2			jmp 	_UnaryMLoop
.18ed					Unary_Page:
.18ed	20 e2 1c	jsr $1ce2			jsr 	MInt32False 				; zero
.18f0	ad c8 0a	lda $0ac8			lda 	basePage 					; copy base page address in.
.18f3	95 48		sta $48,x			sta 	esInt0,x
.18f5	ad c9 0a	lda $0ac9			lda 	basePage+1
.18f8	95 50		sta $50,x			sta 	esInt1,x
.18fa	60		rts				rts
.18fb					UnaryReference:
.18fb	a9 0f		lda #$0f			lda 	#15
.18fd	20 52 16	jsr $1652			jsr 	EvaluateLevel 				; evaluate term and don't deference.
.1900	b5 40		lda $40,x			lda 	esType,x 					; check it's a reference.
.1902	10 05		bpl $1909			bpl 	UType
.1904	a9 00		lda #$00			lda 	#0 							; make it an integer
.1906	95 40		sta $40,x			sta 	esType,x
.1908	60		rts				rts
.1909					UType:
.1909	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.190b	20 10 1e	jsr $1e10			jsr 	ErrorHandler
.190e					UnaryHexMarker:
.190e	4c 4c 17	jmp $174c			jmp 	EvaluateIntegerTerm
.1911					UnaryComplement:
.1911	20 4c 17	jsr $174c			jsr 	EvaluateIntegerTerm
.1914	20 b6 1c	jsr $1cb6			jsr 	MInt32Not
.1917	60		rts				rts
.1918					UnaryIntToFloat:
.1918	20 64 17	jsr $1764			jsr 	EvaluateNumeric
.191b	b5 40		lda $40,x			lda 	esType,x
.191d	d0 0b		bne $192a			bne 	_UIFExit
.191f	8a		txa				txa
.1920	a2 1a		ldx #$1a		ldx	#26
.1922	20 17 1e	jsr $1e17		jsr	floatingpointHandler
.1925	aa		tax				tax
.1926	a9 01		lda #$01			lda 	#1
.1928	95 40		sta $40,x			sta 	esType,x
.192a					_UIFExit:
.192a	60		rts				rts
.192b					UnaryFloatToInt:
.192b	20 64 17	jsr $1764			jsr 	EvaluateNumeric
.192e	b5 40		lda $40,x			lda 	esType,x
.1930	f0 07		beq $1939			beq 	_UFIExit
.1932	8a		txa				txa
.1933	a2 12		ldx #$12		ldx	#18
.1935	20 17 1e	jsr $1e17		jsr	floatingpointHandler
.1938	aa		tax				tax
.1939					_UFIExit:
.1939	60		rts				rts
.193a					UnaryAlloc:
.193a	e8		inx				inx 								; evaluate memory required
.193b	20 7a 17	jsr $177a			jsr 	EvaluateInteger
.193e	20 55 1d	jsr $1d55			jsr 	CheckRightParen
.1941	ca		dex				dex
.1942	b5 59		lda $59,x			lda 	esInt2+1,x 					; check at least in 64k range.
.1944	15 61		ora $61,x			ora 	esInt3+1,x
.1946	d0 1e		bne $1966			bne 	_UABadValue
.1948	20 e2 1c	jsr $1ce2			jsr 	MInt32False					; zero return.
.194b	ad cf 0a	lda $0acf			lda 	lowMemory+1 				; copy low memory in
.194e	95 50		sta $50,x			sta 	esInt1,x
.1950	ad ce 0a	lda $0ace			lda 	lowMemory
.1953	95 48		sta $48,x			sta 	esInt0,x
.1955	18		clc				clc 								; add alloc required.
.1956	75 49		adc $49,x			adc 	esInt0+1,x
.1958	8d ce 0a	sta $0ace			sta 	lowMemory
.195b	ad cf 0a	lda $0acf			lda 	lowMemory+1
.195e	75 51		adc $51,x			adc 	esInt1+1,x
.1960	8d cf 0a	sta $0acf			sta 	lowMemory+1
.1963	b0 01		bcs $1966			bcs		_UABadValue 				; overflow definitely bad.
.1965	60		rts				rts
.1966					_UABadValue:
.1966	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.1968	20 10 1e	jsr $1e10			jsr 	ErrorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary2.asm

.196b					UnaryTimer:
.196b	20 55 1d	jsr $1d55			jsr 	CheckRightParen
.196e	98		tya				tya
.196f	48		pha				pha
.1970	20 09 1d	jsr $1d09			jsr 	MInt32Zero 					; zero result
.1973	86 04		stx $04				stx 	temp0 						; returning in YA so can't use pshx
.1975	a2 08		ldx #$08		ldx	#8
.1977	20 03 1e	jsr $1e03		jsr	deviceHandler
.197a	a6 04		ldx $04				ldx 	temp0						; restore X and update 16 bit result
.197c	95 48		sta $48,x			sta 	esInt0,x
.197e	94 50		sty $50,x			sty 	esInt1,x
.1980	68		pla				pla
.1981	a8		tay				tay
.1982	60		rts				rts
.1983					UnaryInkey:
.1983	20 55 1d	jsr $1d55			jsr 	CheckRightParen
.1986	86 04		stx $04				stx 	temp0
.1988	a2 02		ldx #$02		ldx	#2
.198a	20 03 1e	jsr $1e03		jsr	deviceHandler
.198d	a6 04		ldx $04				ldx 	temp0
.198f	20 f1 1c	jsr $1cf1			jsr 	MInt32Set8Bit
.1992	60		rts				rts
.1993					UnaryGet:
.1993	20 55 1d	jsr $1d55			jsr 	CheckRightParen
.1996	86 04		stx $04				stx 	temp0
.1998					_UGLoop:
.1998	a2 02		ldx #$02		ldx	#2
.199a	20 03 1e	jsr $1e03		jsr	deviceHandler
.199d	c9 00		cmp #$00			cmp 	#0
.199f	f0 f7		beq $1998			beq 	_UGLoop
.19a1	a6 04		ldx $04				ldx 	temp0
.19a3	20 f1 1c	jsr $1cf1			jsr 	MInt32Set8Bit
.19a6	60		rts				rts
.19a7					UnarySys:
.19a7	20 7a 17	jsr $177a			jsr 	EvaluateInteger 				; get the address
.19aa	20 55 1d	jsr $1d55			jsr 	CheckRightParen
.19ad	20 2a 11	jsr $112a			jsr 	TOSToTemp0 						; copy to temp0
.19b0	8a		txa				txa
.19b1	48		pha				pha
.19b2	98		tya				tya
.19b3	48		pha				pha
.19b4	ad 00 0a	lda $0a00			lda 	("A"-"A")*4+SingleLetterVar 	; load AXY
.19b7	ae 5c 0a	ldx $0a5c			ldx 	("X"-"A")*4+SingleLetterVar
.19ba	ac 60 0a	ldy $0a60			ldy 	("Y"-"A")*4+SingleLetterVar
.19bd	20 cc 19	jsr $19cc			jsr 	_CallTemp0
.19c0	85 0a		sta $0a				sta 	tempShort 						; restore YX
.19c2	68		pla				pla
.19c3	a8		tay				tay
.19c4	68		pla				pla
.19c5	aa		tax				tax
.19c6	a5 0a		lda $0a				lda 	tempShort
.19c8	20 f1 1c	jsr $1cf1			jsr 	MInt32Set8Bit 					; return result.
.19cb	60		rts				rts
.19cc					_CallTemp0:
.19cc	6c 04 00	jmp ($0004)			jmp 	(temp0)

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unarystr.asm

.19cf					ExecChr:
.19cf	20 82 17	jsr $1782			jsr 	EvaluateSmallInteger		; character number
.19d2	20 55 1d	jsr $1d55			jsr 	CheckRightParen				; right bracket
.19d5	98		tya				tya
.19d6	48		pha				pha
.19d7	8a		txa				txa 								; A = stack
.19d8	b4 48		ldy $48,x			ldy 	esInt0,x					; Y = character
.19da	a2 00		ldx #$00		ldx	#0
.19dc	20 69 1f	jsr $1f69		jsr	stringHandler
.19df	aa		tax				tax 								; X = stack
.19e0	68		pla				pla
.19e1	a8		tay				tay
.19e2	60		rts				rts
.19e3					ExecLeft:
.19e3	20 6f 17	jsr $176f			jsr 	EvaluateString 				; string to stack,X
.19e6	20 62 1d	jsr $1d62			jsr 	CheckComma
.19e9	e8		inx				inx
.19ea	a9 01		lda #$01			lda 	#1 							; 1 for 2nd parameter.
.19ec	20 f1 1c	jsr $1cf1			jsr 	MInt32Set8Bit
.19ef	e8		inx				inx
.19f0	20 82 17	jsr $1782			jsr 	EvaluateSmallInteger 		; smallint 3rd parameter
.19f3					ExecSubstring:
.19f3	ca		dex				dex 								; fix up X
.19f4	ca		dex				dex
.19f5	20 55 1d	jsr $1d55			jsr 	CheckRightParen 			; check closing right bracket.
.19f8	8a		txa				txa 								; do the substring and exit.
.19f9	a2 06		ldx #$06		ldx	#6
.19fb	20 69 1f	jsr $1f69		jsr	stringHandler
.19fe	aa		tax				tax
.19ff	60		rts				rts
.1a00					ExecMid:
.1a00	20 6f 17	jsr $176f			jsr 	EvaluateString 				; string to stack,X
.1a03	20 62 1d	jsr $1d62			jsr 	CheckComma
.1a06	e8		inx				inx
.1a07	20 82 17	jsr $1782			jsr 	EvaluateSmallInteger 		; smallint 2nd parameter
.1a0a	c9 00		cmp #$00			cmp 	#0
.1a0c	f0 15		beq $1a23			beq 	_EMValue
.1a0e	e8		inx				inx
.1a0f	a9 ff		lda #$ff			lda 	#255 						; 255 default for 3nd parameter.
.1a11	20 f1 1c	jsr $1cf1			jsr 	MInt32Set8Bit
.1a14	b1 02		lda ($02),y			lda 	(codePtr),y 				; is there a ) next
.1a16	c9 c4		cmp #$c4			cmp 	#TKW_RPAREN 				; if so, just MID$(a$,2)
.1a18	f0 d9		beq $19f3			beq 	ExecSubString
.1a1a	20 62 1d	jsr $1d62			jsr 	CheckComma
.1a1d	20 82 17	jsr $1782			jsr 	EvaluateSmallInteger 		; smallint 2nd parameter
.1a20	4c f3 19	jmp $19f3			jmp 	ExecSubString
.1a23					_EMValue:
.1a23	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.1a25	20 10 1e	jsr $1e10			jsr 	ErrorHandler
.1a28					ExecRight:
.1a28	20 6f 17	jsr $176f			jsr 	EvaluateString 				; string to stack,X
.1a2b	20 62 1d	jsr $1d62			jsr 	CheckComma
.1a2e	e8		inx				inx
.1a2f	20 82 17	jsr $1782			jsr 	EvaluateSmallInteger 		; smallint 2nd parameter.
.1a32	ca		dex				dex
.1a33	98		tya				tya
.1a34	48		pha				pha
.1a35	b5 48		lda $48,x			lda 	esInt0,x 					; copy address of string to temp0
.1a37	85 04		sta $04				sta 	temp0
.1a39	b5 50		lda $50,x			lda 	esInt1,x
.1a3b	85 05		sta $05				sta 	temp0+1
.1a3d	a0 00		ldy #$00			ldy 	#0 							; point to length
.1a3f	b1 04		lda ($04),y			lda 	(temp0),y 					; get the length.
.1a41	18		clc				clc 								; add 1.
.1a42	69 01		adc #$01			adc 	#1
.1a44	38		sec				sec
.1a45	f5 49		sbc $49,x			sbc 	esInt0+1,x  				; subtract right count.
.1a47	f0 02		beq $1a4b			beq		_ERMake1 					; if zero, make it 1.
.1a49	b0 02		bcs $1a4d			bcs		_EROkay
.1a4b					_ERMake1:
.1a4b	a9 01		lda #$01			lda 	#1 							; start position.
.1a4d					_EROkay:
.1a4d	e8		inx				inx 								; set start pos.
.1a4e	95 48		sta $48,x			sta 	esInt0,x
.1a50	e8		inx				inx
.1a51	a9 ff		lda #$ff			lda 	#255 						; 255 default for 3nd parameter.
.1a53	20 f1 1c	jsr $1cf1			jsr 	MInt32Set8Bit
.1a56	68		pla				pla
.1a57	a8		tay				tay
.1a58	4c f3 19	jmp $19f3			jmp 	ExecSubString 				; do the substring code.

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32binary.asm

.1a5b					MInt32And:
.1a5b	b5 48		lda $48,x			lda 	esInt0,x
.1a5d	35 49		and $49,x			and 	esInt0+1,x
.1a5f	95 48		sta $48,x			sta 	esInt0,x
.1a61	b5 50		lda $50,x			lda 	esInt1,x
.1a63	35 51		and $51,x			and 	esInt1+1,x
.1a65	95 50		sta $50,x			sta 	esInt1,x
.1a67	b5 58		lda $58,x			lda 	esInt2,x
.1a69	35 59		and $59,x			and 	esInt2+1,x
.1a6b	95 58		sta $58,x			sta 	esInt2,x
.1a6d	b5 60		lda $60,x			lda 	esInt3,x
.1a6f	35 61		and $61,x			and 	esInt3+1,x
.1a71	95 60		sta $60,x			sta 	esInt3,x
.1a73	60		rts				rts
.1a74					MInt32Or:
.1a74	b5 48		lda $48,x			lda 	esInt0,x
.1a76	15 49		ora $49,x			ora 	esInt0+1,x
.1a78	95 48		sta $48,x			sta 	esInt0,x
.1a7a	b5 50		lda $50,x			lda 	esInt1,x
.1a7c	15 51		ora $51,x			ora 	esInt1+1,x
.1a7e	95 50		sta $50,x			sta 	esInt1,x
.1a80	b5 58		lda $58,x			lda 	esInt2,x
.1a82	15 59		ora $59,x			ora 	esInt2+1,x
.1a84	95 58		sta $58,x			sta 	esInt2,x
.1a86	b5 60		lda $60,x			lda 	esInt3,x
.1a88	15 61		ora $61,x			ora 	esInt3+1,x
.1a8a	95 60		sta $60,x			sta 	esInt3,x
.1a8c	60		rts				rts
.1a8d					MInt32Xor:
.1a8d	b5 48		lda $48,x			lda 	esInt0,x
.1a8f	55 49		eor $49,x			eor 	esInt0+1,x
.1a91	95 48		sta $48,x			sta 	esInt0,x
.1a93	b5 50		lda $50,x			lda 	esInt1,x
.1a95	55 51		eor $51,x			eor 	esInt1+1,x
.1a97	95 50		sta $50,x			sta 	esInt1,x
.1a99	b5 58		lda $58,x			lda 	esInt2,x
.1a9b	55 59		eor $59,x			eor 	esInt2+1,x
.1a9d	95 58		sta $58,x			sta 	esInt2,x
.1a9f	b5 60		lda $60,x			lda 	esInt3,x
.1aa1	55 61		eor $61,x			eor 	esInt3+1,x
.1aa3	95 60		sta $60,x			sta 	esInt3,x
.1aa5	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32compare.asm

.1aa6					MInt32Compare:
.1aa6	b5 48		lda $48,x			lda 	esInt0,x 					; equality check.
.1aa8	d5 49		cmp $49,x			cmp 	esInt0+1,x
.1aaa	d0 13		bne $1abf			bne 	MInt32Compare2
.1aac	b5 50		lda $50,x			lda 	esInt1,x
.1aae	d5 51		cmp $51,x			cmp 	esInt1+1,x
.1ab0	d0 0d		bne $1abf			bne 	MInt32Compare2
.1ab2	b5 58		lda $58,x			lda 	esInt2,x
.1ab4	d5 59		cmp $59,x			cmp 	esInt2+1,x
.1ab6	d0 07		bne $1abf			bne 	MInt32Compare2
.1ab8	b5 60		lda $60,x			lda 	esInt3,x
.1aba	55 61		eor $61,x			eor 	esInt3+1,x 					; will return 0 if the same.
.1abc	d0 01		bne $1abf			bne 	MInt32Compare2
.1abe	60		rts				rts
.1abf					MInt32Compare2:
.1abf	b5 48		lda $48,x			lda		esInt0,x 					; unsigned 32 bit comparison.
.1ac1	d5 49		cmp $49,x			cmp 	esInt0+1,x
.1ac3	b5 50		lda $50,x			lda		esInt1,x
.1ac5	f5 51		sbc $51,x			sbc 	esInt1+1,x
.1ac7	b5 58		lda $58,x			lda		esInt2,x
.1ac9	f5 59		sbc $59,x			sbc 	esInt2+1,x
.1acb	b5 60		lda $60,x			lda		esInt3,x
.1acd	f5 61		sbc $61,x			sbc 	esInt3+1,x
.1acf	50 02		bvc $1ad3			bvc 	_I32LNoOverflow 			; make it signed 32 bi comparison
.1ad1	49 80		eor #$80			eor 	#$80
.1ad3					_I32LNoOverflow
.1ad3	30 03		bmi $1ad8			bmi 	MInt32CLess					; if -ve then return $FF
.1ad5	a9 01		lda #$01			lda 	#$01						; else return $01
.1ad7	60		rts				rts
.1ad8					MInt32CLess:
.1ad8	a9 ff		lda #$ff			lda 	#$FF
.1ada	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32divide.asm

.1adb					MInt32SDivide:
.1adb	98		tya				tya  								; save Y, which is the count of negations
.1adc	48		pha				pha
.1add	a0 00		ldy #$00			ldy 	#0 							; zero count
.1adf	20 f7 1a	jsr $1af7			jsr 	_MInt32SRemSign 			; unsign TOS
.1ae2	e8		inx				inx 								; unsign TOS+1
.1ae3	20 f7 1a	jsr $1af7			jsr 	_MInt32SRemSign
.1ae6	ca		dex				dex
.1ae7	98		tya				tya 								; save sign count on stack
.1ae8	48		pha				pha
.1ae9	20 00 1b	jsr $1b00			jsr 	MInt32UDivide 				; unsigned division
.1aec	68		pla				pla 								; get sign count back
.1aed	29 01		and #$01			and 	#1 							; if it is odd, then negate result
.1aef	f0 03		beq $1af4			beq 	_I32SNoNeg
.1af1	20 9c 1c	jsr $1c9c			jsr 	MInt32Negate
.1af4					_I32SNoNeg:
.1af4	68		pla				pla 								; restoe Y and exit
.1af5	a8		tay				tay
.1af6	60		rts				rts
.1af7					_MInt32SRemSign:
.1af7	b5 60		lda $60,x			lda 	esInt3,x 					; is it -ve
.1af9	10 04		bpl $1aff			bpl 	_MInt32SRSExit
.1afb	c8		iny				iny 								; increment the sign count
.1afc	20 9c 1c	jsr $1c9c			jsr 	MInt32Negate 				; negate the value.
.1aff					_MInt32SRSExit:
.1aff	60		rts				rts
.1b00					MInt32UDivide:
.1b00	b5 49		lda $49,x			lda 	esInt0+1,x 					; check for division by zero
.1b02	15 51		ora $51,x			ora 	esInt1+1,x
.1b04	15 52		ora $52,x			ora 	esInt1+2,x
.1b06	15 53		ora $53,x			ora 	esInt1+3,x
.1b08	f0 4a		beq $1b54			beq 	_MInt32DZero
.1b0a	e8		inx				inx 								; clear A
.1b0b	e8		inx				inx
.1b0c	20 e2 1c	jsr $1ce2			jsr 	MInt32False
.1b0f	ca		dex				dex
.1b10	ca		dex				dex
.1b11	98		tya				tya 								; save Y on the stack
.1b12	48		pha				pha
.1b13	a0 20		ldy #$20			ldy 	#32 						; number of division passes
.1b15					_MInt32UDLoop:
.1b15	16 48		asl $48,x			asl 	esInt0,x					; shift QA left. First Q
.1b17	36 50		rol $50,x			rol 	esInt1,x
.1b19	36 58		rol $58,x			rol 	esInt2,x
.1b1b	36 60		rol $60,x			rol 	esInt3,x
.1b1d	36 4a		rol $4a,x			rol 	esInt0+2,x 					; then A.
.1b1f	36 52		rol $52,x			rol 	esInt1+2,x
.1b21	36 5a		rol $5a,x			rol 	esInt2+2,x
.1b23	36 62		rol $62,x			rol 	esInt3+2,x
.1b25	38		sec				sec 								; calculate A-M saving result on the stack
.1b26	b5 4a		lda $4a,x			lda 	esInt0+2,x
.1b28	f5 49		sbc $49,x			sbc 	esInt0+1,x
.1b2a	48		pha				pha
.1b2b	b5 52		lda $52,x			lda 	esInt1+2,x
.1b2d	f5 51		sbc $51,x			sbc 	esInt1+1,x
.1b2f	48		pha				pha
.1b30	b5 5a		lda $5a,x			lda 	esInt2+2,x
.1b32	f5 59		sbc $59,x			sbc 	esInt2+1,x
.1b34	48		pha				pha
.1b35	b5 62		lda $62,x			lda 	esInt3+2,x
.1b37	f5 61		sbc $61,x			sbc 	esInt3+1,x
.1b39	90 10		bcc $1b4b			bcc		_MInt32NoSubtract 			; if A < M (e.g. carry clear) then reject this.
.1b3b	95 62		sta $62,x			sta 	esInt3+2,x 					; write result back to A
.1b3d	68		pla				pla
.1b3e	95 5a		sta $5a,x			sta 	esInt2+2,x
.1b40	68		pla				pla
.1b41	95 52		sta $52,x			sta 	esInt1+2,x
.1b43	68		pla				pla
.1b44	95 4a		sta $4a,x			sta 	esInt0+2,x
.1b46	f6 48		inc $48,x			inc 	esInt0,x 					; sets bit 0 of Q - it was shifted left previously.
.1b48	4c 4e 1b	jmp $1b4e			jmp 	_MInt32Next 					; do the next iteration
.1b4b					_MInt32NoSubtract:
.1b4b	68		pla				pla
.1b4c	68		pla				pla
.1b4d	68		pla				pla
.1b4e					_MInt32Next:
.1b4e	88		dey				dey 								; do this 32 times.
.1b4f	d0 c4		bne $1b15			bne 	_MInt32UDLoop
.1b51	68		pla				pla 								; restore Y and exit
.1b52	a8		tay				tay
.1b53	60		rts				rts
.1b54					_MInt32DZero:
.1b54	a2 05		ldx #$05			ldx 	#ErrorID_DivZero
.1b56	20 10 1e	jsr $1e10			jsr 	ErrorHandler
.1b59					MInt32Modulus:
.1b59	20 00 1b	jsr $1b00			jsr 	MInt32UDivide 				; do the division.
.1b5c	b5 62		lda $62,x			lda 	esInt3+2,x 					; copy 2nd on stack (the remainder) to the top.
.1b5e	95 60		sta $60,x			sta 	esInt3,x
.1b60	b5 5a		lda $5a,x			lda 	esInt2+2,x
.1b62	95 58		sta $58,x			sta 	esInt2,x
.1b64	b5 52		lda $52,x			lda 	esInt1+2,x
.1b66	95 50		sta $50,x			sta 	esInt1,x
.1b68	b5 4a		lda $4a,x			lda 	esInt0+2,x
.1b6a	95 48		sta $48,x			sta 	esInt0,x
.1b6c	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32fromstr.asm

.1b6d					MInt32FromString:
.1b6d	85 0a		sta $0a				sta 	tempShort 					; save base
.1b6f	98		tya				tya
.1b70	48		pha				pha
.1b71	a0 00		ldy #$00			ldy 	#0 							; set index into string being read
.1b73	b1 04		lda ($04),y			lda 	(temp0),y 					; look at first character
.1b75	c9 2d		cmp #$2d			cmp 	#"-"						; is it a - character
.1b77	d0 01		bne $1b7a			bne 	_I32FSNotNegative
.1b79	c8		iny				iny 								; if so consume it.
.1b7a					_I32FSNotNegative:
.1b7a	a5 0a		lda $0a				lda 	tempShort 					; get the base back.
.1b7c	c0 00		cpy #$00			cpy 	#0 							; if we read a -ve (e.g. Y != 0)
.1b7e	f0 02		beq $1b82			beq 	_I32FSNN2
.1b80	09 80		ora #$80			ora 	#$80						; set bit 7, this indicates a negated result.
.1b82					_I32FSNN2:
.1b82	48		pha				pha 								; save base + final sign on stack.
.1b83	20 e2 1c	jsr $1ce2			jsr 	MInt32False 					; zero the return value.
.1b86					I32FSMainLoop:
.1b86	68		pla				pla 								; get the base back into tempshort
.1b87	48		pha				pha
.1b88	29 7f		and #$7f			and 	#$7F
.1b8a	85 0a		sta $0a				sta 	tempShort
.1b8c	b1 04		lda ($04),y			lda 	(temp0),y 					; look at next character.
.1b8e	c9 61		cmp #$61			cmp 	#"a" 						; fix up case.
.1b90	90 02		bcc $1b94			bcc 	_I32FSNotLC
.1b92	e9 20		sbc #$20			sbc 	#32
.1b94					_I32FSNotLC:
.1b94	38		sec				sec 								; subtract 48 (ASCII "0")
.1b95	e9 30		sbc #$30			sbc 	#"0"
.1b97	90 26		bcc $1bbf			bcc 	_I32FSDone 					; nothing more to do.
.1b99	c9 0a		cmp #$0a			cmp 	#9+1 						; if it is 0-9 validate vs base.
.1b9b	90 06		bcc $1ba3			bcc 	_I32FSValidate
.1b9d	c9 11		cmp #$11			cmp 	#17 						; is it between 58 and 64 ? if so bad.
.1b9f	90 1e		bcc $1bbf			bcc 	_I32FSDone
.1ba1	e9 07		sbc #$07			sbc 	#7 							; adjust into range so now character is 0->nnn
.1ba3					_I32FSValidate:
.1ba3	c5 0a		cmp $0a				cmp 	tempShort 					; compare against the base.
.1ba5	b0 18		bcs $1bbf			bcs 	_I32FSDone 					; sorry, too large for this base.
.1ba7	48		pha				pha 								; save the new digit value.
.1ba8	e8		inx				inx 								; put base into next slot.
.1ba9	a5 0a		lda $0a				lda 	tempShort
.1bab	20 f1 1c	jsr $1cf1			jsr 	MInt32Set8Bit
.1bae	ca		dex				dex
.1baf	20 01 1c	jsr $1c01			jsr 	MInt32Multiply 				; multiply current by the base
.1bb2	e8		inx				inx
.1bb3	68		pla				pla  								; put additive into next slot
.1bb4	20 f1 1c	jsr $1cf1			jsr 	MInt32Set8Bit
.1bb7	ca		dex				dex
.1bb8	20 cd 1b	jsr $1bcd			jsr 	MInt32Add 					; and add it
.1bbb	c8		iny				iny 								; look at next character
.1bbc	4c 86 1b	jmp $1b86			jmp 	I32FSMainLoop 				; and go round again.
.1bbf					_I32FSDone:
.1bbf	68		pla				pla 								; get base/final sign back
.1bc0	10 04		bpl $1bc6			bpl 	_I32FSNN3
.1bc2	88		dey				dey 								; one fewer character to allow for the - prefix.
.1bc3	20 9c 1c	jsr $1c9c			jsr 	MInt32Negate 				; negate the result.
.1bc6					_I32FSNN3:
.1bc6	84 0a		sty $0a				sty 	tempShort 					; save the count of characters read
.1bc8	68		pla				pla
.1bc9	a8		tay				tay
.1bca	a5 0a		lda $0a				lda 	tempShort 					; get the count of characters read into A and exit
.1bcc	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32math.asm

.1bcd					MInt32Add:
.1bcd	18		clc				clc
.1bce	b5 48		lda $48,x			lda 	esInt0,x
.1bd0	75 49		adc $49,x			adc 	esInt0+1,x
.1bd2	95 48		sta $48,x			sta 	esInt0,x
.1bd4	b5 50		lda $50,x			lda 	esInt1,x
.1bd6	75 51		adc $51,x			adc 	esInt1+1,x
.1bd8	95 50		sta $50,x			sta 	esInt1,x
.1bda	b5 58		lda $58,x			lda 	esInt2,x
.1bdc	75 59		adc $59,x			adc 	esInt2+1,x
.1bde	95 58		sta $58,x			sta 	esInt2,x
.1be0	b5 60		lda $60,x			lda 	esInt3,x
.1be2	75 61		adc $61,x			adc 	esInt3+1,x
.1be4	95 60		sta $60,x			sta 	esInt3,x
.1be6	60		rts				rts
.1be7					MInt32Sub:
.1be7	38		sec				sec
.1be8	b5 48		lda $48,x			lda 	esInt0,x
.1bea	f5 49		sbc $49,x			sbc 	esInt0+1,x
.1bec	95 48		sta $48,x			sta 	esInt0,x
.1bee	b5 50		lda $50,x			lda 	esInt1,x
.1bf0	f5 51		sbc $51,x			sbc 	esInt1+1,x
.1bf2	95 50		sta $50,x			sta 	esInt1,x
.1bf4	b5 58		lda $58,x			lda 	esInt2,x
.1bf6	f5 59		sbc $59,x			sbc 	esInt2+1,x
.1bf8	95 58		sta $58,x			sta 	esInt2,x
.1bfa	b5 60		lda $60,x			lda 	esInt3,x
.1bfc	f5 61		sbc $61,x			sbc 	esInt3+1,x
.1bfe	95 60		sta $60,x			sta 	esInt3,x
.1c00	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32multiply.asm

.1c01					MInt32Multiply:
.1c01	e8		inx				inx 								; copy 2nd -> 3rd
.1c02	20 27 1c	jsr $1c27			jsr 	MInt32CopyUp
.1c05	ca		dex				dex
.1c06	20 27 1c	jsr $1c27			jsr 	MInt32CopyUp 				; copy 1st -> 2nd
.1c09	20 e2 1c	jsr $1ce2			jsr 	MInt32False 					; zero 1st.
.1c0c					_I32Loop:
.1c0c	b5 4a		lda $4a,x			lda 	esInt0+2,x 					; get low bit of 3rd
.1c0e	29 01		and #$01			and 	#1
.1c10	f0 03		beq $1c15			beq 	_I32NoAdd 					; if set
.1c12	20 cd 1b	jsr $1bcd			jsr 	MInt32Add 					; add 2nd to 1st.
.1c15					_I32NoAdd:
.1c15	e8		inx				inx 								; shift 2nd left
.1c16	20 f7 1c	jsr $1cf7			jsr 	MInt32ShiftLeft
.1c19	e8		inx				inx  								; shift 3rd right
.1c1a	20 00 1d	jsr $1d00			jsr 	MInt32ShiftRight
.1c1d	20 09 1d	jsr $1d09			jsr 	MInt32Zero 					; check if zero.
.1c20	08		php				php 								; save status bits
.1c21	ca		dex				dex 	 							; point back to 1st
.1c22	ca		dex				dex
.1c23	28		plp				plp 								; get status bits
.1c24	d0 e6		bne $1c0c			bne 	_I32Loop 					; if non-zero keep going.
.1c26	60		rts				rts
.1c27					MInt32CopyUp:
.1c27	b5 48		lda $48,x			lda 	esInt0,x
.1c29	95 49		sta $49,x			sta 	esInt0+1,x
.1c2b	b5 50		lda $50,x			lda 	esInt1,x
.1c2d	95 51		sta $51,x			sta 	esInt1+1,x
.1c2f	b5 58		lda $58,x			lda 	esInt2,x
.1c31	95 59		sta $59,x			sta 	esInt2+1,x
.1c33	b5 60		lda $60,x			lda 	esInt3,x
.1c35	95 61		sta $61,x			sta 	esInt3+1,x
.1c37	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32tostr.asm

>0af4					MCharCount:	.fill 	1						; count of converted characters
.1c38					MInt32ToString:
.1c38	48		pha				pha 								; save base
.1c39	85 0a		sta $0a				sta 	tempShort 					; save target base.
.1c3b	a9 00		lda #$00			lda 	#0
.1c3d	8d f4 0a	sta $0af4			sta 	MCharCount 					; clear character count to 0
.1c40	98		tya				tya
.1c41	48		pha				pha
.1c42	a5 0a		lda $0a				lda 	tempShort 					; check if we are signed conversion
.1c44	10 10		bpl $1c56			bpl 	_I32TSUnsigned
.1c46	48		pha				pha 								; save base on stack.
.1c47	b5 60		lda $60,x			lda 	esInt3,x 					; is it actually negative
.1c49	10 08		bpl $1c53			bpl 	_I32TSNoFlip
.1c4b	a9 2d		lda #$2d			lda 	#"-" 						; write a '-' prefix out.
.1c4d	20 89 1c	jsr $1c89			jsr 	MI32WriteCharacter
.1c50	20 9c 1c	jsr $1c9c			jsr 	MInt32Negate 				; negate the value.
.1c53					_I32TSNoFlip:
.1c53	68		pla				pla 								; get the base back
.1c54	29 7f		and #$7f			and 	#$7F 						; clear the sign flag so it's just a base now.
.1c56					_I32TSUnsigned:
.1c56	20 64 1c	jsr $1c64			jsr 	MI32DivideWrite 			; recursive code to output string.
.1c59	a0 00		ldy #$00			ldy 	#0 							; write charcount to first character.
.1c5b	ad f4 0a	lda $0af4			lda 	MCharCount
.1c5e	91 04		sta ($04),y			sta 	(temp0),y
.1c60	68		pla				pla
.1c61	a8		tay				tay
.1c62	68		pla				pla
.1c63	60		rts				rts
.1c64					MI32DivideWrite:
.1c64	48		pha				pha 								; save the divisor/base
.1c65	e8		inx				inx 								; write in the dividing position.
.1c66	20 f1 1c	jsr $1cf1			jsr 	MInt32Set8Bit
.1c69	ca		dex				dex
.1c6a	20 00 1b	jsr $1b00			jsr 	MInt32UDivide 				; divide number by base.
.1c6d	68		pla				pla 								; get the base into Y
.1c6e	a8		tay				tay
.1c6f	b5 4a		lda $4a,x			lda 	esInt0+2,x 					; get the remainder and push on the stack.
.1c71	48		pha				pha
.1c72	20 09 1d	jsr $1d09			jsr 	MInt32Zero 					; is the result zero ?
.1c75	f0 04		beq $1c7b			beq 	_I32NoRecurse 				; if so, don't recurse.
.1c77	98		tya				tya 								; put base into A
.1c78	20 64 1c	jsr $1c64			jsr 	MI32DivideWrite 				; and jsr the dividor recursively.
.1c7b					_I32NoRecurse:
.1c7b	68		pla				pla 								; get the remainder back
.1c7c	c9 0a		cmp #$0a			cmp 	#10  						; handle hexadecimals.
.1c7e	90 02		bcc $1c82			bcc 	_I32NotHex
.1c80	69 06		adc #$06			adc 	#7-1
.1c82					_I32NotHex:
.1c82	18		clc				clc 								; make it ASCII
.1c83	69 30		adc #$30			adc 	#48
.1c85	20 89 1c	jsr $1c89			jsr 	MI32WriteCharacter 			; write the character out
.1c88	60		rts				rts 								; and exit.
.1c89					MI32WriteCharacter:
.1c89	ee f4 0a	inc $0af4			inc 	MCharCount 					; bump count (space for leading count)
.1c8c	ac f4 0a	ldy $0af4			ldy 	MCharCount 					; get position
.1c8f	91 04		sta ($04),y			sta 	(temp0),y 					; write out with trailing 0
.1c91	c8		iny				iny
.1c92	a9 00		lda #$00			lda 	#0
.1c94	91 04		sta ($04),y			sta 	(temp0),y
.1c96	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32unary.asm

>0af5					MSeed32:	.fill 	4							; random number seed.
.1c97					MInt32Absolute:
.1c97	b5 60		lda $60,x			lda 	esInt3,x 					; use negate code if -ve.
.1c99	30 01		bmi $1c9c			bmi 	MInt32Negate
.1c9b	60		rts				rts
.1c9c					MInt32Negate:
.1c9c	38		sec				sec
.1c9d	a9 00		lda #$00			lda 	#0
.1c9f	f5 48		sbc $48,x			sbc 	esInt0,x
.1ca1	95 48		sta $48,x			sta 	esInt0,x
.1ca3	a9 00		lda #$00			lda 	#0
.1ca5	f5 50		sbc $50,x			sbc 	esInt1,x
.1ca7	95 50		sta $50,x			sta 	esInt1,x
.1ca9	a9 00		lda #$00			lda 	#0
.1cab	f5 58		sbc $58,x			sbc 	esInt2,x
.1cad	95 58		sta $58,x			sta 	esInt2,x
.1caf	a9 00		lda #$00			lda 	#0
.1cb1	f5 60		sbc $60,x			sbc 	esInt3,x
.1cb3	95 60		sta $60,x			sta 	esInt3,x
.1cb5	60		rts				rts
.1cb6					MInt32Not:
.1cb6	b5 48		lda $48,x			lda 	esInt0,x
.1cb8	49 ff		eor #$ff			eor 	#$FF
.1cba	95 48		sta $48,x			sta 	esInt0,x
.1cbc	b5 50		lda $50,x			lda 	esInt1,x
.1cbe	49 ff		eor #$ff			eor 	#$FF
.1cc0	95 50		sta $50,x			sta 	esInt1,x
.1cc2	b5 58		lda $58,x			lda 	esInt2,x
.1cc4	49 ff		eor #$ff			eor 	#$FF
.1cc6	95 58		sta $58,x			sta 	esInt2,x
.1cc8	b5 60		lda $60,x			lda 	esInt3,x
.1cca	49 ff		eor #$ff			eor 	#$FF
.1ccc	95 60		sta $60,x			sta 	esInt3,x
.1cce	60		rts				rts
.1ccf					MInt32Sign:
.1ccf	b5 60		lda $60,x			lda 	esInt3,x					; look at MSB
.1cd1	30 0b		bmi $1cde			bmi 	MInt32True 					; if set return -1 (true)
.1cd3	20 09 1d	jsr $1d09			jsr 	MInt32Zero 					; is it zero ?
.1cd6	f0 0a		beq $1ce2			beq 	MInt32False 					; if zero return 0 (false)
.1cd8	20 e2 1c	jsr $1ce2			jsr 	MInt32False 					; > 0 return 1
.1cdb	f6 48		inc $48,x			inc 	esInt0,x
.1cdd	60		rts				rts
.1cde					MInt32True:
.1cde	a9 ff		lda #$ff			lda 	#$FF 						; set to $FFFFFFFF
.1ce0	d0 02		bne $1ce4			bne 	MInt32WriteAll
.1ce2					MInt32False:
.1ce2	a9 00		lda #$00			lda 	#0
.1ce4					MInt32WriteAll:
.1ce4	95 48		sta $48,x			sta 	esInt0,x
.1ce6					MInt32Write123:
.1ce6	95 50		sta $50,x			sta 	esInt1,x
.1ce8	95 58		sta $58,x			sta 	esInt2,x
.1cea	95 60		sta $60,x			sta 	esInt3,x
.1cec	a9 00		lda #$00			lda 	#$00						; and make it an integer
.1cee	95 40		sta $40,x			sta 	esType,x
.1cf0	60		rts				rts
.1cf1					MInt32Set8Bit:
.1cf1	95 48		sta $48,x			sta 	esInt0,x
.1cf3	a9 00		lda #$00			lda 	#0
.1cf5	f0 ef		beq $1ce6			beq		MInt32Write123
.1cf7					MInt32ShiftLeft:
.1cf7	16 48		asl $48,x			asl 	esInt0,x
.1cf9	36 50		rol $50,x			rol	 	esInt1,x
.1cfb	36 58		rol $58,x			rol	 	esInt2,x
.1cfd	36 60		rol $60,x			rol	 	esInt3,x
.1cff	60		rts				rts
.1d00					MInt32ShiftRight:
.1d00	56 60		lsr $60,x			lsr 	esInt3,x
.1d02	76 58		ror $58,x			ror 	esInt2,x
.1d04	76 50		ror $50,x			ror 	esInt1,x
.1d06	76 48		ror $48,x			ror 	esInt0,x
.1d08	60		rts				rts
.1d09					MInt32Zero:
.1d09	b5 48		lda $48,x			lda 	esInt0,x
.1d0b	15 50		ora $50,x			ora 	esInt1,x
.1d0d	15 58		ora $58,x			ora 	esInt2,x
.1d0f	15 60		ora $60,x			ora 	esInt3,x
.1d11	60		rts				rts
.1d12					MInt32Random:
.1d12	98		tya				tya
.1d13	48		pha				pha
.1d14	a0 07		ldy #$07			ldy 	#7
.1d16	ad f5 0a	lda $0af5			lda 	MSeed32+0
.1d19	d0 03		bne $1d1e			bne 	_Random1
.1d1b	a8		tay				tay
.1d1c	a9 aa		lda #$aa			lda		#$AA
.1d1e					_Random1:
.1d1e	0a		asl a				asl 	a
.1d1f	2e f6 0a	rol $0af6			rol 	MSeed32+1
.1d22	2e f7 0a	rol $0af7			rol 	MSeed32+2
.1d25	2e f8 0a	rol $0af8			rol 	MSeed32+3
.1d28	90 02		bcc $1d2c			bcc 	_Random2
.1d2a	49 c5		eor #$c5			eor 	#$C5
.1d2c					_Random2:
.1d2c	88		dey				dey
.1d2d	d0 ef		bne $1d1e			bne 	_Random1
.1d2f	8d f5 0a	sta $0af5			sta 	MSeed32+0
.1d32	95 48		sta $48,x			sta 	esInt0,x
.1d34	ad f6 0a	lda $0af6			lda 	MSeed32+1
.1d37	95 50		sta $50,x			sta 	esInt1,x
.1d39	ad f7 0a	lda $0af7			lda 	MSeed32+2
.1d3c	95 58		sta $58,x			sta 	esInt2,x
.1d3e	ad f8 0a	lda $0af8			lda 	MSeed32+3
.1d41	95 60		sta $60,x			sta 	esInt3,x
.1d43	68		pla				pla
.1d44	a8		tay				tay
.1d45	a9 00		lda #$00			lda 	#0
.1d47	95 40		sta $40,x			sta 	esType,x
.1d49	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/utility/check.asm

.1d4a					CheckToken:
.1d4a	d1 02		cmp ($02),y			cmp 	(codePtr),y
.1d4c	d0 02		bne $1d50			bne 	_CTError
.1d4e	c8		iny				iny
.1d4f	60		rts				rts
.1d50					_CTError:
.1d50	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.1d52	20 10 1e	jsr $1e10			jsr 	ErrorHandler
.1d55					CheckRightParen:
.1d55	b1 02		lda ($02),y			lda 	(codePtr),y
.1d57	c8		iny				iny
.1d58	c9 c4		cmp #$c4			cmp 	#TKW_RPAREN
.1d5a	d0 01		bne $1d5d			bne 	_CRPError
.1d5c	60		rts				rts
.1d5d					_CRPError:
.1d5d	a2 09		ldx #$09			ldx 	#ErrorID_MissingRP
.1d5f	20 10 1e	jsr $1e10			jsr 	ErrorHandler
.1d62					CheckComma:
.1d62	b1 02		lda ($02),y			lda 	(codePtr),y
.1d64	c8		iny				iny
.1d65	c9 c6		cmp #$c6			cmp 	#TKW_COMMA
.1d67	d0 01		bne $1d6a			bne 	_CCError
.1d69	60		rts				rts
.1d6a					_CCError:
.1d6a	a2 0a		ldx #$0a			ldx 	#ErrorID_MissingComma
.1d6c	20 10 1e	jsr $1e10			jsr 	ErrorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/utility/scanner.asm

.2241					ScanForward:
.2241	85 06		sta $06				sta 	temp1 						; save tokens to search in temp1/temp1+1
.2243	86 07		stx $07				stx 	temp1+1
.2245	a9 00		lda #$00			lda 	#0 							; temp2 counts structure levels.
.2247	85 08		sta $08				sta 	temp2
.2249	b1 02		lda ($02),y	_SFLoop:lda 	(codePtr),y 				; look at the next token.
.224b	c8		iny				iny
.224c	a6 08		ldx $08				ldx 	temp2 						; check structure levels are zero.
.224e	d0 08		bne $2258			bne 	_SFNoCheck 					; if so, check token against entered values.
.2250	c5 06		cmp $06				cmp 	temp1
.2252	f0 24		beq $2278			beq 	_SFExit
.2254	c5 07		cmp $07				cmp 	temp1+1
.2256	f0 20		beq $2278			beq 	_SFExit
.2258					_SFNoCheck:
.2258	c9 80		cmp #$80			cmp 	#$80 						; if it is 00-7F (variable/number) just skip it.
.225a	90 ed		bcc $2249			bcc 	_SFLoop
.225c	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; $80-$85 is various specials.
.225e	90 19		bcc $2279			bcc 	_SFSpecials
.2260	c9 99		cmp #$99			cmp 	#TOK_STRUCTST 				; if < structure start then continue
.2262	90 e5		bcc $2249			bcc 	_SFLoop
.2264	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST 				; if >= unary start (after structure) then continue.
.2266	b0 e1		bcs $2249			bcs 	_SFLoop
.2268	aa		tax				tax  								; token in X, and look up the adjuster.
.2269	bd 62 17	lda $1762,x			lda 	ELBinaryOperatorInfo-TOK_BINARYST,x
.226c	38		sec				sec 								; convert to an offset
.226d	e9 81		sbc #$81			sbc 	#$81
.226f	18		clc				clc 								; add to depth
.2270	65 08		adc $08				adc 	temp2
.2272	85 08		sta $08				sta 	temp2
.2274	10 d3		bpl $2249			bpl 	_SFLoop 					; +ve okay to continue
.2276	30 2a		bmi $22a2			bmi 	_SFError 					; if gone -ve then we have a nesting error
.2278	60		rts		_SFExit:rts
.2279					_SFSpecials:
.2279	c9 80		cmp #$80			cmp 	#TOK_EOL 					; $80, advance to next line.
.227b	f0 14		beq $2291			beq 	_SFNextLine
.227d	c9 84		cmp #$84			cmp 	#TOK_FPC					; $84, skip embedded float
.227f	f0 26		beq $22a7			beq 	_SFFloatSkip
.2281	c9 85		cmp #$85			cmp 	#TOK_STR 					; $85, skip string
.2283	f0 04		beq $2289			beq 	_SFSkipString
.2285	c8		iny				iny									; $81,$82,$83 shift, so just advance over the shifted
.2286	4c 49 22	jmp $2249			jmp 	_SFLoop 					; token.
.2289					_SFSkipString:
.2289	98		tya				tya
.228a	38		sec				sec
.228b	71 02		adc ($02),y			adc 	(codePtr),y
.228d	a8		tay				tay
.228e	4c 49 22	jmp $2249			jmp 	_SFLoop
.2291					_SFNextLine:
.2291	a0 00		ldy #$00			ldy 	#0 							; get offset
.2293	b1 02		lda ($02),y			lda 	(codePtr),y
.2295	18		clc				clc 								; add to code pointer.
.2296	65 02		adc $02				adc 	codePtr
.2298	85 02		sta $02				sta 	codePtr
.229a	90 02		bcc $229e			bcc		_SFNLNoCarry
.229c	e6 03		inc $03				inc 	codePtr+1
.229e					_SFNLNoCarry:
.229e	b1 02		lda ($02),y			lda 	(codePtr),y 				; reached the end of the program.
.22a0	d0 a7		bne $2249			bne		_SFLoop 					; no go round again
.22a2					_SFError:
.22a2	a2 13		ldx #$13			ldx 	#ErrorID_Struct
.22a4	20 10 1e	jsr $1e10			jsr 	ErrorHandler
.22a7					_SFFloatSkip:
.22a7	4c 95 12	jmp $1295			jmp 	Unimplemented

;******  Return to file: main/main.asm


;******  Processing file: main/utility/stack.asm

.0078					rsPointer:
>0078							.fill 	2							; to TOS, which is the current top-token.
.1d6f					RSReset:
.1d6f	a9 ff		lda #$ff			lda 	#(returnStack+retStackSize-1) & $FF
.1d71	85 78		sta $78				sta 	rsPointer
.1d73	a9 09		lda #$09			lda 	#(returnStack+retStackSize-1) >> 8
.1d75	85 79		sta $79				sta 	1+(rsPointer)
.1d77	a9 ff		lda #$ff			lda 	#$FF 						; put a duff marker on TOS, so nothing will pop
.1d79	8d ff 09	sta $09ff			sta 	returnStack+retStackSize-1
.1d7c	60		rts				rts
.1d7d					RSClaim:
.1d7d	84 0a		sty $0a				sty 	tempShort 					; preserve Y
.1d7f	48		pha				pha 								; save marker on stack.
.1d80	8a		txa				txa 								; get bytes required.
.1d81	38		sec				sec
.1d82	49 ff		eor #$ff			eor 	#$FF 						; add to rsPointer using 2's complement.
.1d84	65 78		adc $78				adc 	rsPointer
.1d86	85 78		sta $78				sta 	rsPointer
.1d88	a5 79		lda $79				lda 	rsPointer+1
.1d8a	69 ff		adc #$ff			adc 	#$FF
.1d8c	85 79		sta $79				sta 	rsPointer+1
.1d8e	c9 08		cmp #$08			cmp 	#returnStack>>8 			; overflow. underflow actually :)
.1d90	90 08		bcc $1d9a			bcc 	_RSCOverflow
.1d92	68		pla				pla 								; get marker back
.1d93	a0 00		ldy #$00			ldy 	#0 							; write marker out.
.1d95	91 78		sta ($78),y			sta 	(rsPointer),y
.1d97	a4 0a		ldy $0a				ldy 	tempShort 					; restore Y and exit
.1d99	60		rts				rts
.1d9a					_RSCOverflow:
.1d9a	a2 15		ldx #$15			ldx 	#ErrorID_RetStack
.1d9c	20 10 1e	jsr $1e10			jsr 	ErrorHandler
.1d9f					RSFree:
.1d9f	18		clc				clc
.1da0	65 78		adc $78				adc 	rsPointer
.1da2	85 78		sta $78				sta 	rsPointer
.1da4	90 02		bcc $1da8			bcc 	_RSFExit
.1da6	e6 79		inc $79				inc 	rsPointer+1
.1da8					_RSFExit:
.1da8	60		rts				rts
.1da9					RSSavePosition:
.1da9	84 0a		sty $0a				sty 	tempShort 					; save Y position
.1dab	a8		tay				tay 								; this is where we write it.
.1dac	a5 02		lda $02				lda 	codePtr 					; write codePointer out
.1dae	91 78		sta ($78),y			sta 	(rsPointer),y
.1db0	c8		iny				iny
.1db1	a5 03		lda $03				lda 	codePtr+1
.1db3	91 78		sta ($78),y			sta 	(rsPointer),y
.1db5	c8		iny				iny
.1db6	a5 0a		lda $0a				lda 	tempShort 					; write the Y position out.
.1db8	91 78		sta ($78),y			sta 	(rsPointer),y
.1dba	a8		tay				tay 								; fix Y back again to original value
.1dbb	60		rts				rts
.1dbc					RSLoadPosition:
.1dbc	a8		tay				tay
.1dbd	b1 78		lda ($78),y			lda 	(rsPointer),y 				; read codePointer back
.1dbf	85 02		sta $02				sta 	codePtr
.1dc1	c8		iny				iny
.1dc2	b1 78		lda ($78),y			lda 	(rsPointer),y
.1dc4	85 03		sta $03				sta 	codePtr+1
.1dc6	c8		iny				iny
.1dc7	b1 78		lda ($78),y			lda 	(rsPointer),y 				; and the offset
.1dc9	a8		tay				tay 								; to Y
.1dca	60		rts				rts

;******  Return to file: main/main.asm

.1dcb					mainHandler:
.1dcb	7c ce 1d	jmp ($1dce,x)			jmp 	(mainVectors,x)
.1dce					mainVectors:
>1dce	95 17					.word LinkEvaluate         ; index 0
>1dd0	9b 17					.word LinkEvaluateInteger  ; index 2
>1dd2	a1 17					.word LinkEvaluateSmallInt ; index 4

;******  Return to file: basic.asm


;******  Processing file: assembler/assembler.asm

.1dd4					assemblerHandler:
.1dd4	7c d7 1d	jmp ($1dd7,x)			jmp 	(assemblerVectors,x)
.1dd7					assemblerVectors:

;******  Return to file: basic.asm


;******  Processing file: device/device.asm


;******  Processing file: device/x16/x16io.asm

.1dd7					IONewLine:
.1dd7	48		pha				pha
.1dd8	a9 0d		lda #$0d			lda 	#13
.1dda	20 e7 1d	jsr $1de7			jsr 	IOPrintChar
.1ddd	68		pla				pla
.1dde	60		rts				rts
.1ddf					IOTab:
.1ddf	48		pha				pha
.1de0	a9 20		lda #$20			lda 	#32
.1de2	20 e7 1d	jsr $1de7			jsr 	IOPrintChar
.1de5	68		pla				pla
.1de6	60		rts				rts
.1de7					IOPrintChar:
.1de7	aa		tax				tax
.1de8	5a		phy				phy
.1de9	8a		txa				txa
.1dea	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.1ded	7a		ply				ply
.1dee	60		rts				rts
.1def					IOInkey:
.1def	98		tya				tya
.1df0	48		pha				pha
.1df1	20 e4 ff	jsr $ffe4			jsr 	$FFE4
.1df4	85 0a		sta $0a				sta 	tempShort
.1df6	68		pla				pla
.1df7	a8		tay				tay
.1df8	a5 0a		lda $0a				lda 	tempShort
.1dfa	60		rts				rts

;******  Return to file: device/device.asm


;******  Processing file: device/x16/x16timer.asm

.1dfb					IOReadTimer:
.1dfb	20 de ff	jsr $ffde			jsr 	$FFDE
.1dfe	48		pha				pha
.1dff	8a		txa				txa
.1e00	a8		tay				tay
.1e01	68		pla				pla
.1e02	60		rts				rts

;******  Return to file: device/device.asm

.1e03					deviceHandler:
.1e03	7c 06 1e	jmp ($1e06,x)			jmp 	(deviceVectors,x)
.1e06					deviceVectors:
>1e06	d7 1d					.word IONewLine            ; index 0
>1e08	ef 1d					.word IOInkey              ; index 2
>1e0a	e7 1d					.word IOPrintChar          ; index 4
>1e0c	df 1d					.word IOTab                ; index 6
>1e0e	fb 1d					.word IOReadTimer          ; index 8

;******  Return to file: basic.asm


;******  Processing file: error/error.asm


;******  Processing file: error/errorhandler.asm

.1e10					ErrorHandler:
.1e10	a9 ee		lda #$ee			lda 	#$EE
.1e12	a8		tay				tay
>1e13	db						.byte 	$DB
.1e14	4c 14 1e	jmp $1e14	_EHHalt:jmp 	_EHHalt

;******  Return to file: error/error.asm


;******  Return to file: basic.asm


;******  Processing file: floatingpoint/floatingpoint.asm

.1e17					floatingpointHandler:
.1e17	a2 03		ldx #$03			ldx 	#ErrorID_NoModule
.1e19	20 10 1e	jsr $1e10			jsr 	ErrorHandler

;******  Return to file: basic.asm


;******  Processing file: interaction/interaction.asm

.1e1c					interactionHandler:
.1e1c	7c 1f 1e	jmp ($1e1f,x)			jmp 	(interactionVectors,x)
.1e1f					interactionVectors:

;******  Return to file: basic.asm


;******  Processing file: string/string.asm


;******  Processing file: string/chr.asm

.1e1f					StringChrs:
.1e1f	aa		tax				tax 								; set up stack
.1e20	a9 02		lda #$02			lda 	#2
.1e22	20 d9 1e	jsr $1ed9			jsr 	AllocateSoftString
.1e25	98		tya				tya
.1e26	20 01 1f	jsr $1f01			jsr 	WriteSoftString
.1e29	20 2e 1e	jsr $1e2e			jsr 	ReturnSoftString
.1e2c	8a		txa				txa
.1e2d	60		rts				rts
.1e2e					ReturnSoftString:
.1e2e	a5 7a		lda $7a				lda 	softMemAlloc
.1e30	95 48		sta $48,x			sta 	esInt0,x
.1e32	a5 7b		lda $7b				lda 	softMemAlloc+1
.1e34	95 50		sta $50,x			sta 	esInt1,x
.1e36	a9 00		lda #$00			lda 	#0
.1e38	95 58		sta $58,x			sta 	esInt2,x
.1e3a	95 60		sta $60,x			sta 	esInt3,x
.1e3c	a9 40		lda #$40			lda 	#$40
.1e3e	95 40		sta $40,x			sta 	esType,x
.1e40	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/compare.asm

.1e41					STRCompare:
.1e41	48		pha				pha 								; save A
.1e42	aa		tax				tax 								; put stack pos in X
.1e43	98		tya				tya
.1e44	48		pha				pha
.1e45	20 79 1e	jsr $1e79			jsr 	CopyStringPair
.1e48	a0 00		ldy #$00			ldy 	#0 							; get the smaller of the two string sizes.
.1e4a	b1 04		lda ($04),y			lda 	(temp0),y
.1e4c	d1 06		cmp ($06),y			cmp 	(temp1),y
.1e4e	90 02		bcc $1e52			bcc 	_SCNotSmaller
.1e50	b1 06		lda ($06),y			lda 	(temp1),y
.1e52					_SCNotSmaller:
.1e52	aa		tax				tax 								; put that in X. We compare this many chars first.
.1e53					_SCCompareLoop:
.1e53	e0 00		cpx #$00			cpx 	#0 							; if compared all the smaller, then it is the shorter
.1e55	f0 0c		beq $1e63			beq 	_SCSameToEndShortest 		; one that is the smallest if they are different lengths.
.1e57	ca		dex				dex 								; decrement chars to compare.
.1e58	c8		iny				iny 								; move to next character
.1e59	38		sec				sec 								; calculate s1[y]-s2[y]
.1e5a	b1 04		lda ($04),y			lda 	(temp0),y
.1e5c	f1 06		sbc ($06),y			sbc 	(temp1),y
.1e5e	d0 0a		bne $1e6a			bne 	_SCReturnResult 			; if different return sign of A
.1e60	4c 53 1e	jmp $1e53			jmp 	_SCCompareLoop
.1e63					_SCSameToEndShortest
.1e63	a0 00		ldy #$00			ldy 	#0 							; compare len(s1) - len(s2)
.1e65	38		sec				sec
.1e66	b1 04		lda ($04),y			lda 	(temp0),y
.1e68	f1 06		sbc ($06),y			sbc 	(temp1),y
.1e6a					_SCReturnResult:
.1e6a	08		php				php 								; set return to zero preserving PSW.
.1e6b	a2 00		ldx #$00			ldx 	#0
.1e6d	28		plp				plp
.1e6e	f0 05		beq $1e75			beq 	_SCExit 					; two values equal, then exit
.1e70	ca		dex				dex 								; X = $FF
.1e71	90 02		bcc $1e75			bcc 	_SCExit 					; if 1st < 2nd then -1
.1e73	a2 01		ldx #$01			ldx 	#1 							; X = $01 if greater
.1e75					_SCExit:
.1e75	68		pla				pla
.1e76	a8		tay				tay
.1e77	68		pla				pla
.1e78	60		rts				rts
.1e79					CopyStringPair:
.1e79	b5 49		lda $49,x			lda 	esInt0+1,x
.1e7b	85 06		sta $06				sta 	temp1
.1e7d	b5 51		lda $51,x			lda 	esInt1+1,x
.1e7f	85 07		sta $07				sta 	temp1+1
.1e81					CopyStringTop:
.1e81	b5 48		lda $48,x			lda 	esInt0,x
.1e83	85 04		sta $04				sta 	temp0
.1e85	b5 50		lda $50,x			lda 	esInt1,x
.1e87	85 05		sta $05				sta 	temp0+1
.1e89	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/concat.asm

.1e8a					StringConcat:
.1e8a	aa		tax				tax									; stack pos in X
.1e8b	98		tya				tya
.1e8c	48		pha				pha
.1e8d	20 79 1e	jsr $1e79			jsr 	CopyStringPair 				; temp0 and temp1 point to strings to concat.
.1e90	38		sec				sec 								; calculate alloc strings. lengths added + 1 for size.
.1e91	a0 00		ldy #$00			ldy 	#0
.1e93	b1 04		lda ($04),y			lda 	(temp0),y
.1e95	71 06		adc ($06),y			adc 	(temp1),y
.1e97	b0 1c		bcs $1eb5			bcs 	_SCError 					; just too many characters here.
.1e99	c9 fc		cmp #$fc			cmp 	#MaxStringSize
.1e9b	b0 18		bcs $1eb5			bcs 	_SCError
.1e9d	20 d9 1e	jsr $1ed9			jsr 	AllocateSoftString 			; allocate soft string memory, set pointer.
.1ea0	20 d0 1e	jsr $1ed0			jsr 	CopySoftToStack 			; copy that to the stack.
.1ea3	20 ba 1e	jsr $1eba			jsr 	_SCCopyTemp0 				; copy temp0
.1ea6	a5 06		lda $06				lda 	temp1 						; copy temp1 to temp0
.1ea8	85 04		sta $04				sta 	temp0
.1eaa	a5 07		lda $07				lda 	temp1+1
.1eac	85 05		sta $05				sta 	temp0+1
.1eae	20 ba 1e	jsr $1eba			jsr 	_SCCopyTemp0 				; copy temp0 e.g. what was temp1.
.1eb1	68		pla				pla
.1eb2	a8		tay				tay
.1eb3	8a		txa				txa 								; and A
.1eb4	60		rts				rts
.1eb5					_SCError:
.1eb5	a2 0d		ldx #$0d			ldx 	#ErrorID_StrLen
.1eb7	20 10 1e	jsr $1e10			jsr 	ErrorHandler
.1eba					_SCCopyTemp0:
.1eba	a0 00		ldy #$00			ldy 	#0 							; put count in temp2
.1ebc	b1 04		lda ($04),y			lda 	(temp0),y
.1ebe	85 08		sta $08				sta 	temp2
.1ec0					_SCCopyLoop:
.1ec0	a5 08		lda $08				lda 	temp2 						; done the lot
.1ec2	f0 0b		beq $1ecf			beq 	_SCCopyExit
.1ec4	c6 08		dec $08				dec 	temp2
.1ec6	c8		iny				iny 								; get next char
.1ec7	b1 04		lda ($04),y			lda 	(temp0),y
.1ec9	20 01 1f	jsr $1f01			jsr 	WriteSoftString 			; write to soft string.
.1ecc	4c c0 1e	jmp $1ec0			jmp 	_SCCopyLoop
.1ecf					_SCCopyExit:
.1ecf	60		rts				rts
.1ed0					CopySoftToStack:
.1ed0	a5 7a		lda $7a				lda 	SoftMemAlloc 				; copy the memory allocation pointer to the stack.
.1ed2	95 48		sta $48,x			sta 	esInt0,x 					; type is already string.
.1ed4	a5 7b		lda $7b				lda 	SoftMemAlloc+1
.1ed6	95 50		sta $50,x			sta 	esInt1,x
.1ed8	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/memory.asm

.007a					softMemAlloc:
>007a							.fill 	2  							; if MSB is zero needs resetting on allocation.
.1ed9					AllocateSoftString:
.1ed9	85 0a		sta $0a				sta 	tempShort 					; save count
.1edb	98		tya				tya
.1edc	48		pha				pha
.1edd	a5 7b		lda $7b				lda 	softMemAlloc+1 				; if the high byte is zero, it needs allocating.
.1edf	d0 0b		bne $1eec			bne 	_ASSDone
.1ee1	ad cc 0a	lda $0acc			lda 	highMemory 					; reset the soft memory alloc pointer.
.1ee4	85 7a		sta $7a				sta 	softMemAlloc 				; to speed up slightly, we only reset this when we first need it
.1ee6	ac cd 0a	ldy $0acd			ldy 	highMemory+1 				; but it needs to be reset before each command.
.1ee9	88		dey				dey
.1eea	84 7b		sty $7b				sty 	softMemAlloc+1
.1eec					_ASSDone:
.1eec	38		sec				sec 								; allocate downwards enough memory
.1eed	a5 7a		lda $7a				lda 	softMemAlloc
.1eef	e5 0a		sbc $0a				sbc 	tempShort
.1ef1	85 7a		sta $7a				sta 	softMemAlloc
.1ef3	a5 7b		lda $7b				lda 	softMemAlloc+1
.1ef5	e9 00		sbc #$00			sbc 	#0
.1ef7	85 7b		sta $7b				sta 	softMemAlloc+1
.1ef9	a9 00		lda #$00			lda 	#0 							; empty that string, set the length = 0.
.1efb	a8		tay				tay
.1efc	91 7a		sta ($7a),y			sta 	(softMemAlloc),y
.1efe	68		pla				pla
.1eff	a8		tay				tay
.1f00	60		rts				rts
.1f01					WriteSoftString:
.1f01	84 0a		sty $0a				sty 	tempShort 					; save Y
.1f03	48		pha				pha
.1f04	a0 00		ldy #$00			ldy 	#0 							; get and bump length
.1f06	b1 7a		lda ($7a),y			lda 	(softMemAlloc),y
.1f08	18		clc				clc
.1f09	69 01		adc #$01			adc 	#1
.1f0b	91 7a		sta ($7a),y			sta 	(softMemAlloc),y
.1f0d	a8		tay				tay 								; pointer in Y
.1f0e	68		pla				pla 								; get char and write.
.1f0f	91 7a		sta ($7a),y			sta 	(softMemAlloc),y
.1f11	a4 0a		ldy $0a				ldy 	tempShort 					; restore Y and exit.
.1f13	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/substring.asm

.0af9					NullString:
>0af9							.fill 	1							; don't waste memory concreting null strings.
.1f14					StringSubstring:
.1f14	48		pha				pha
.1f15	aa		tax				tax 								; access stack.
.1f16	98		tya				tya
.1f17	48		pha				pha
.1f18	20 81 1e	jsr $1e81			jsr 	CopyStringTop 				; point temp0 to the string.
.1f1b	a0 00		ldy #$00			ldy 	#0 							; get length.
.1f1d	b1 04		lda ($04),y			lda 	(temp0),Y
.1f1f	85 06		sta $06				sta 	temp1
.1f21	b5 49		lda $49,x			lda 	esInt0+1,x 					; get the initial offset
.1f23	c5 06		cmp $06				cmp 	temp1 						;
.1f25	f0 02		beq $1f29			beq 	_SSBOkay
.1f27	b0 2a		bcs $1f53			bcs 	_SSBReturnNull
.1f29					_SSBOkay:
.1f29	a5 06		lda $06				lda 	temp1 						; get the total length +1
.1f2b	18		clc				clc
.1f2c	69 01		adc #$01			adc 	#1
.1f2e	38		sec				sec
.1f2f	f5 49		sbc $49,x			sbc 	esInt0+1,x 					; the anything >= this is bad.
.1f31	d5 4a		cmp $4a,x			cmp 	esInt0+2,x  				; check bad >= required
.1f33	90 02		bcc $1f37			bcc		_SSBTrunc
.1f35	b5 4a		lda $4a,x			lda 	esInt0+2,x
.1f37					_SSBTrunc:
.1f37	85 07		sta $07				sta 	temp1+1 					; characters to copy.
.1f39	18		clc				clc
.1f3a	69 01		adc #$01			adc 	#1 							; add 1
.1f3c	20 d9 1e	jsr $1ed9			jsr 	AllocateSoftString 			; allocate soft string memory, set pointer.
.1f3f	20 d0 1e	jsr $1ed0			jsr 	CopySoftToStack 			; copy that to the stack.
.1f42	b4 49		ldy $49,x			ldy 	esInt0+1,x 					; get initial position of char to copy
.1f44					_SSBCopyLoop:
.1f44	a5 07		lda $07				lda 	temp1+1 					; done them all
.1f46	f0 0e		beq $1f56			beq 	_SSBExit
.1f48	c6 07		dec $07				dec 	temp1+1
.1f4a	b1 04		lda ($04),y			lda 	(temp0),y 					; get and write character
.1f4c	20 01 1f	jsr $1f01			jsr 	WriteSoftString
.1f4f	c8		iny				iny
.1f50	4c 44 1f	jmp $1f44			jmp 	_SSBCopyLoop
.1f53					_SSBReturnNull:
.1f53	20 5a 1f	jsr $1f5a			jsr 	ReturnNull
.1f56					_SSBExit:
.1f56	68		pla				pla
.1f57	a8		tay				tay
.1f58	68		pla				pla
.1f59	60		rts				rts
.1f5a					ReturnNull:
.1f5a	a9 00		lda #$00			lda 	#0 							; clear null string
.1f5c	8d f9 0a	sta $0af9			sta 	NullString
.1f5f	a9 f9		lda #$f9			lda 	#NullString & $FF 			; set a pointer to it
.1f61	95 48		sta $48,x			sta 	esInt0,x
.1f63	a9 0a		lda #$0a			lda 	#NullString >> 8
.1f65	95 50		sta $50,x			sta 	esInt1,x
.1f67	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/write.asm

.1f68					StringWrite:
>1f68	db						.byte 	$DB

;******  Return to file: string/string.asm

.1f69					stringHandler:
.1f69	7c 6c 1f	jmp ($1f6c,x)			jmp 	(stringVectors,x)
.1f6c					stringVectors:
>1f6c	1f 1e					.word StringChrs           ; index 0
>1f6e	8a 1e					.word StringConcat         ; index 2
>1f70	41 1e					.word STRCompare           ; index 4
>1f72	14 1f					.word StringSubstring      ; index 6
>1f74	68 1f					.word StringWrite          ; index 8

;******  Return to file: basic.asm


;******  Processing file: tokeniser/tokeniser.asm

.1f76					tokeniserHandler:
.1f76	7c 79 1f	jmp ($1f79,x)			jmp 	(tokeniserVectors,x)
.1f79					tokeniserVectors:

;******  Return to file: basic.asm


;******  Processing file: variable/variable.asm


;******  Processing file: variable/access.asm

.0afa					varHash:
>0afa							.fill	1
.0afb					varType:
>0afb							.fill 	1
.0afc					varEnd:
>0afc							.fill 	1
.007c					hashList:
>007c							.fill 	2
.1f79					AccessVariable:
.1f79	aa		tax				tax 								; stack in X
.1f7a	c8		iny				iny
.1f7b	b1 02		lda ($02),y			lda 	(codePtr),y
.1f7d	88		dey				dey
.1f7e	c9 3a		cmp #$3a			cmp 	#TYPE_INT 					; is it one of the end markers ?
.1f80	d0 15		bne $1f97			bne 	_AVLong
.1f82	b1 02		lda ($02),y			lda 	(codePtr),y 				; this is the 6 bit ASCII of A-Z 1-26
.1f84	38		sec				sec 	 							; make it 0-25
.1f85	e9 01		sbc #$01			sbc 	#1
.1f87	0a		asl a				asl 	a 							; x 4 is LSB of address
.1f88	0a		asl a				asl 	a
.1f89	95 48		sta $48,x			sta 	esInt0,x
.1f8b	a9 0a		lda #$0a			lda 	#SingleLetterVar >> 8 		; make it an address
.1f8d	95 50		sta $50,x			sta 	esInt1,x
.1f8f	a9 80		lda #$80			lda 	#$80 						; type is integer reference.
.1f91	95 40		sta $40,x			sta 	esType,x
.1f93	c8		iny				iny 								; skip over the variable reference in the code.
.1f94	c8		iny				iny
.1f95	8a		txa				txa 								; stack in A to return.
.1f96	60		rts				rts
.1f97					_AVLong:
.1f97	8a		txa				txa
.1f98	48		pha				pha
.1f99	20 d7 1f	jsr $1fd7			jsr 	AccessSetup 				; set up the basic stuff.
.1f9c	20 69 20	jsr $2069			jsr 	FindVariable 				; does the variable exist already
.1f9f	b0 0e		bcs $1faf			bcs 	_AVFound
.1fa1	ad fb 0a	lda $0afb			lda 	varType 					; is the variable type an array
.1fa4	4a		lsr a				lsr 	a
.1fa5	90 05		bcc $1fac			bcc 	_AVCanCreate
.1fa7	a2 14		ldx #$14			ldx 	#ErrorID_noauto
.1fa9	20 10 1e	jsr $1e10			jsr 	ErrorHandler
.1fac					_AVCanCreate:
.1fac	20 16 20	jsr $2016			jsr 	CreateVariable 				; no, create it.
.1faf					_AVFound:
.1faf	68		pla				pla
.1fb0	aa		tax				tax
.1fb1	18		clc				clc 								; copy temp0 (variable record address)
.1fb2	a5 04		lda $04				lda 	temp0 						; +5 (to point to the data)
.1fb4	69 05		adc #$05			adc 	#5
.1fb6	95 48		sta $48,x			sta 	esInt0,x
.1fb8	a5 05		lda $05				lda 	temp0+1
.1fba	69 00		adc #$00			adc 	#0
.1fbc	95 50		sta $50,x			sta 	esInt1,x
.1fbe	a9 00		lda #$00			lda 	#0
.1fc0	95 58		sta $58,x			sta 	esInt2,x
.1fc2	95 60		sta $60,x			sta 	esInt3,x
.1fc4	ac fb 0a	ldy $0afb			ldy 	varType 					; get the type ID from the type.
.1fc7	b9 97 1f	lda $1f97,y			lda 	_AVTypeTable-$3A,y
.1fca	95 40		sta $40,x			sta 	esType,x
.1fcc	ac fc 0a	ldy $0afc			ldy 	varEnd 						; restore Y
.1fcf	8a		txa				txa 								; return stack in A and return
.1fd0	60		rts				rts
.1fd1					_AVTypeTable:
>1fd1	80 80						.byte 	$80,$80						; integer
>1fd3	c0 c0						.byte 	$C0,$C0 					; string
>1fd5	81 81						.byte 	$81,$81 					; float
.1fd7					AccessSetup:
.1fd7	a9 00		lda #$00			lda 	#0 							; zero the hash byte.
.1fd9	8d fa 0a	sta $0afa			sta 	varHash
.1fdc	98		tya				tya
.1fdd	48		pha				pha
.1fde	b1 02		lda ($02),y	_ASLoop:lda 	(codePtr),y					; get next identifier character
.1fe0	c9 3a		cmp #$3a			cmp 	#$3A 						; is it 3A-3F which end all identifiers ?
.1fe2	b0 0d		bcs $1ff1			bcs 	_ASComplete
.1fe4	18		clc				clc 								; add to the hash. Might improve this.
.1fe5	6d fa 0a	adc $0afa			adc 	varHash
.1fe8	a9 00		lda #$00			lda 	#0
.1fea	8d fa 0a	sta $0afa			sta 	varHash
.1fed	c8		iny				iny 								; next character
.1fee	4c de 1f	jmp $1fde			jmp 	_ASLoop
.1ff1					_ASComplete:
.1ff1	8d fb 0a	sta $0afb			sta 	varType 					; save variable type byte
.1ff4	c8		iny				iny
.1ff5	8c fc 0a	sty $0afc			sty 	varEnd 						; save the ending position.
.1ff8	38		sec				sec 								; convert type byte from $3A-$3F to 0..5
.1ff9	e9 3a		sbc #$3a			sbc 	#$3A
.1ffb	0a		asl a				asl 	a 							; multiply by hashTableSize (8 in this case)
.1ffc	0a		asl a				asl 	a
.1ffd	0a		asl a				asl 	a
.1ffe	0a		asl a				asl 	a 							; 2 bytes/word
.1fff	85 04		sta $04				sta 	temp0 						; this is the offset to the start of the table.
.2001	ad fa 0a	lda $0afa			lda 	varHash 					; get hash
.2004	29 07		and #$07			and 	#(hashTableSize-1)			; force into range
.2006	0a		asl a				asl  	a 							; x 2 (for word) and CC
.2007	65 04		adc $04				adc 	temp0 						; now offset from the start of the hash table.
.2009	69 68		adc #$68			adc 	#hashTables & $FF 			; add to hash table base address
.200b	85 7c		sta $7c				sta 	hashList
.200d	a9 0a		lda #$0a			lda 	#hashTables >> 8
.200f	69 00		adc #$00			adc 	#0
.2011	85 7d		sta $7d				sta 	hashList+1
.2013	68		pla				pla
.2014	a8		tay				tay
.2015	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/create.asm

.2016					CreateVariable:
.2016	98		tya				tya 								; push Y on the stack twice.
.2017	48		pha				pha
.2018	48		pha				pha
.2019	ae fb 0a	ldx $0afb			ldx 	varType 					; get var type 0-5
.201c	bd 29 20	lda $2029,x			lda		_CVSize-$3A,x 				; the bytes for this new variable.
.201f	48		pha				pha 								; save length
.2020	a8		tay				tay 								; put into Y.
.2021	ad ce 0a	lda $0ace			lda 	lowMemory 					; set low Memory ptr to temp0
.2024	85 04		sta $04				sta 	temp0
.2026	ad cf 0a	lda $0acf			lda 	lowMemory+1
.2029	85 05		sta $05				sta 	temp0+1
.202b	68		pla				pla 								; get length
.202c	20 6c 10	jsr $106c			jsr 	AdvanceLowMemoryByte 		; shift alloc memory forward by the length.
.202f					_CVClear:
.202f	88		dey				dey
.2030	a9 00		lda #$00			lda 	#0
.2032	91 04		sta ($04),y			sta 	(temp0),y
.2034	c0 04		cpy #$04			cpy 	#4
.2036	d0 f7		bne $202f			bne 	_CVClear
.2038	ad fa 0a	lda $0afa			lda 	varHash 					; store hash at offset 4.
.203b	91 04		sta ($04),y			sta 	(temp0),y
.203d	68		pla				pla 								; offset, work out where the variable name is.
.203e	18		clc				clc
.203f	65 02		adc $02				adc 	codePtr
.2041	a0 02		ldy #$02			ldy 	#2 							; copy that into slots 2 + 3.
.2043	91 04		sta ($04),y			sta 	(temp0),y
.2045	a5 03		lda $03				lda 	codePtr+1
.2047	69 00		adc #$00			adc 	#0
.2049	c8		iny				iny
.204a	91 04		sta ($04),y			sta 	(temp0),y
.204c	a0 00		ldy #$00			ldy 	#0 							; copy current hash pointer in link
.204e	b1 7c		lda ($7c),y			lda 	(hashList),y
.2050	91 04		sta ($04),y			sta 	(temp0),y
.2052	c8		iny				iny
.2053	b1 7c		lda ($7c),y			lda 	(hashList),y
.2055	91 04		sta ($04),y			sta 	(temp0),y
.2057	a5 05		lda $05				lda 	temp0+1 					; set new link
.2059	91 7c		sta ($7c),y			sta 	(hashList),y
.205b	88		dey				dey
.205c	a5 04		lda $04				lda 	temp0
.205e	91 7c		sta ($7c),y			sta 	(hashList),y
.2060	68		pla				pla
.2061	a8		tay				tay
.2062	60		rts				rts
>2063	09 09				_CVSize:.byte 	5+4,5+4 					; <storage for integer>
>2065	07 07						.byte 	5+2,5+2 					; <storage for string>
>2067	0b 0b						.byte 	5+6,5+6 					; <storage for float>

;******  Return to file: variable/variable.asm


;******  Processing file: variable/find.asm

.2069					FindVariable:
.2069	98		tya				tya
.206a	48		pha				pha
.206b	98		tya				tya 								; point temp2 to the actual name.
.206c	18		clc				clc
.206d	65 02		adc $02				adc 	codePtr
.206f	85 08		sta $08				sta 	temp2
.2071	a5 03		lda $03				lda 	codePtr+1
.2073	69 00		adc #$00			adc 	#0
.2075	85 09		sta $09				sta 	temp2+1
.2077	a0 00		ldy #$00			ldy 	#0
.2079	a5 7c		lda $7c				lda 	hashList 					; copy hashlist to temp0
.207b	85 04		sta $04				sta 	temp0
.207d	a5 7d		lda $7d				lda 	hashList+1
.207f	85 05		sta $05				sta 	temp0+1
.2081	a0 01		ldy #$01	_FVNext:ldy 	#1 							; get MSB
.2083	b1 04		lda ($04),y			lda 	(temp0),y
.2085	f0 2c		beq $20b3			beq 	_FVFail
.2087	aa		tax				tax
.2088	88		dey				dey		 							; get LSB
.2089	b1 04		lda ($04),y			lda 	(temp0),y
.208b	85 04		sta $04				sta 	temp0 						; update pointer.
.208d	86 05		stx $05				stx 	temp0+1
.208f	a0 04		ldy #$04			ldy 	#4 							; check hashes match
.2091	b1 04		lda ($04),y			lda 	(temp0),y
.2093	cd fa 0a	cmp $0afa			cmp 	varHash
.2096	d0 e9		bne $2081			bne 	_FVNext 					; if not, no point in checking the name.
.2098	88		dey				dey 								; copy name pointer to temp1.
.2099	b1 04		lda ($04),y			lda 	(temp0),y
.209b	85 07		sta $07				sta 	temp1+1
.209d	88		dey				dey
.209e	b1 04		lda ($04),y			lda 	(temp0),y
.20a0	85 06		sta $06				sta 	temp1
.20a2	a0 00		ldy #$00			ldy 	#0
.20a4					_FVCheck:
.20a4	b1 06		lda ($06),y			lda 	(temp1),y 					; compare names
.20a6	d1 08		cmp ($08),y			cmp 	(temp2),y
.20a8	d0 d7		bne $2081			bne 	_FVNext		 				; fail if different.
.20aa	c8		iny				iny
.20ab	c9 3a		cmp #$3a			cmp 	#$3A 						; until reached the end marker.
.20ad	90 f5		bcc $20a4			bcc 	_FVCheck
.20af	68		pla				pla
.20b0	a8		tay				tay
.20b1	38		sec				sec
.20b2	60		rts				rts
.20b3					_FVFail:
.20b3	68		pla				pla
.20b4	a8		tay				tay
.20b5	18		clc				clc
.20b6	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/reset.asm

.20b7					HashTableReset:
.20b7	a2 60		ldx #$60			ldx 	#6*2*hashTableSize
.20b9	a9 00		lda #$00			lda 	#0
.20bb					_HTRClear:
.20bb	9d 67 0a	sta $0a67,x			sta 	hashTables-1,x
.20be	ca		dex				dex
.20bf	d0 fa		bne $20bb			bne 	_HTRClear
.20c1	60		rts				rts

;******  Return to file: variable/variable.asm

.20c2					variableHandler:
.20c2	7c c5 20	jmp ($20c5,x)			jmp 	(variableVectors,x)
.20c5					variableVectors:
>20c5	79 1f					.word AccessVariable       ; index 0
>20c7	b7 20					.word HashTableReset       ; index 2

;******  Return to file: basic.asm


;******  End of listing
