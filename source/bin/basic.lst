
; 64tass Turbo Assembler Macro V1.55.2200 listing file
; 64tass -D autorun=1 -D coldstartnew=0 -Walias -Wmacro-prefix -Wall -q -c -L ..\source\bin\basic.lst -l ..\source\bin\basic.lbl -Wall -o ..\source\bin\stub.prg basic.asm
; Thu Apr 01 19:02:11 2021

;Offset	;Hex		;Monitor	;Source

;******  Command line definitions

=1					autorun=1
=0					coldstartnew=0

;******  Processing input file: basic.asm


;******  Processing file: header/01common.inc


;******  Processing file: header/../generated/installed.inc

=1					installed_header = 1
=1					installed_main = 1
=1					installed_variable = 1
=1					installed_assembler = 1
=1					installed_error = 1
=1					installed_extension = 1
=1					installed_string = 1
=1					installed_device = 1
=0					installed_floatingpoint = 0
=1					installed_interaction = 1
=1					installed_tokeniser = 1
=1					installed_footer = 1

;******  Return to file: header/01common.inc

=$1000					CodeStart = $1000
=$800					MemoryStorage = $800
=$9f00					EndOfMemory = $9F00
=$28					ZeroPageStorage = $28
=$90					StackAddress = $90
=8					StackSize = 8
=2					retStackSizePages = 2
=8					hashTableSize = 8			; if this changes, the calculation is AccessSetup has to match it.
="G"					markerGOSUB = 'G'
="R"					markerREPEAT = 'R'
="F"					markerFOR = 'F'
="W"					markerWHILE = 'W'
="P"					markerPROC = 'P'
="$"					markerSTRING = '$'
="#"					markerFLOAT = '#'
="%"					markerINT = '%'
=5					VarHSize = 5 								; header (2 link, 2 name, 1 hash)
=2					VarASize = 2 								; array [address of first level]
=4					VarISize = 4 								; integer (32 bit)
=6					VarFSize = 6 								; float (4 mantissa, 1 exponent 1 sign/zero)
=2					VarSSize = 2 								; address (2 bytes)

;******  Return to file: basic.asm


;******  Processing file: header/02macros.inc


;******  Return to file: basic.asm


;******  Processing file: header/03data.inc

>0028					codePtr:.fill 	2							; (codePtr),y points to code.
>002a					temp0: 	.fill 	2							; working variables.
>002c					temp1: 	.fill 	2
>002e					temp2: 	.fill 	2
>0030					temp3: 	.fill 	2
.0032					tempshort:
>0032							.fill 	1
.0033					highMemory:
>0033							.fill 	2
.0035					lowMemory:
>0035							.fill 	2
>0800							.align	256
.0800					returnStack:
>0800							.fill 	retStackSizePages * 256
=512					retStackSize = retStackSizePages * 256
.0a00					SingleLetterVar:
>0a00					 		.fill 	26*4
.0a68					currentStorage:
>0090					esType:	.fill 	StackSize  					; type byte (see above)
>0098					esInt0:	.fill 	StackSize 					; integer or mantissa
>00a0					esInt1:	.fill 	StackSize
>00a8					esInt2:	.fill 	StackSize
>00b0					esInt3:	.fill 	StackSize
>00b8					esExp:	.fill 	StackSize 					; exponent ($80 = 0)
>00c0					esZSign:.fill 	StackSize 					; for floating point - sign (bit 7) isZero (bit 6)
.00c8					endOfStack:
=$98					esMant0 = esInt0 							; synonyms.
=$a0					esMant1 = esInt1
=$a8					esMant2 = esInt2
=$b0					esMant3 = esInt3
.0a68					hashTables:
>0a68							.fill 	6*2*hashTableSize
.0ac8					basePage:
>0ac8							.fill 	2
.0aca					endProgram:
>0aca							.fill 	2
.0acc					endMemory:
>0acc							.fill 	2
.0ace					NullString:
>0ace							.fill 	1							; don't waste memory concreting null strings.
.0acf					convertBuffer:
>0acf							.fill 	35

;******  Processing file: header/../generated/tokenconst.inc

=$80					TOK_EOL=$80
=$81					TOK_SHIFT1=$81
=$82					TOK_SHIFT2=$82
=$83					TOK_SHIFT3=$83
=$84					TOK_FPC=$84
=$85					TOK_STR=$85
=$86					TOK_BINARYST=$86
=$99					TOK_STRUCTST=$99
=$a4					TOK_UNARYST=$a4
=$c9					TOK_TOKENS=$c9
=$86					TKW_AND                      = $86 ; and
=$87					TKW_OR                       = $87 ; or
=$88					TKW_XOR                      = $88 ; xor
=$89					TKW_GREATEREQUAL             = $89 ; >=
=$8a					TKW_LESSEQUAL                = $8a ; <=
=$8b					TKW_GREATER                  = $8b ; >
=$8c					TKW_LESS                     = $8c ; <
=$8d					TKW_EQUAL                    = $8d ; =
=$8e					TKW_LESSGREATER              = $8e ; <>
=$8f					TKW_PLUS                     = $8f ; +
=$90					TKW_MINUS                    = $90 ; -
=$91					TKW_GREATERGREATER           = $91 ; >>
=$92					TKW_LESSLESS                 = $92 ; <<
=$93					TKW_STAR                     = $93 ; *
=$94					TKW_SLASH                    = $94 ; /
=$95					TKW_MOD                      = $95 ; mod
=$96					TKW_HAT                      = $96 ; ^
=$97					TKW_PLING                    = $97 ; !
=$98					TKW_QMARK                    = $98 ; ?
=$99					TKW_REPEAT                   = $99 ; repeat
=$9a					TKW_WHILE                    = $9a ; while
=$9b					TKW_FOR                      = $9b ; for
=$9c					TKW_IF                       = $9c ; if
=$9d					TKW_DEFPROC                  = $9d ; defproc
=$9e					TKW_UNTIL                    = $9e ; until
=$9f					TKW_WEND                     = $9f ; wend
=$a0					TKW_NEXT                     = $a0 ; next
=$a1					TKW_THEN                     = $a1 ; then
=$a2					TKW_ENDIF                    = $a2 ; endif
=$a3					TKW_ENDPROC                  = $a3 ; endproc
=$a4					TKW_LPAREN                   = $a4 ; (
=$a5					TKW_LENLPAREN                = $a5 ; len(
=$a6					TKW_SGNLPAREN                = $a6 ; sgn(
=$a7					TKW_ABSLPAREN                = $a7 ; abs(
=$a8					TKW_RANDOMLPAREN             = $a8 ; random(
=$a9					TKW_PAGE                     = $a9 ; page
=$aa					TKW_TRUE                     = $aa ; true
=$ab					TKW_FALSE                    = $ab ; false
=$ac					TKW_MINLPAREN                = $ac ; min(
=$ad					TKW_MAXLPAREN                = $ad ; max(
=$ae					TKW_SYSLPAREN                = $ae ; sys(
=$af					TKW_TIMERLPAREN              = $af ; timer(
=$b0					TKW_EVENTLPAREN              = $b0 ; event(
=$b1					TKW_GETLPAREN                = $b1 ; get(
=$b2					TKW_INKEYLPAREN              = $b2 ; inkey(
=$b3					TKW_ALLOCLPAREN              = $b3 ; alloc(
=$b4					TKW_CHRDOLLARLPAREN          = $b4 ; chr$(
=$b5					TKW_LEFTDOLLARLPAREN         = $b5 ; left$(
=$b6					TKW_MIDDOLLARLPAREN          = $b6 ; mid$(
=$b7					TKW_RIGHTDOLLARLPAREN        = $b7 ; right$(
=$b8					TKW_STRDOLLARLPAREN          = $b8 ; str$(
=$b9					TKW_VALLPAREN                = $b9 ; val(
=$ba					TKW_PEEKLPAREN               = $ba ; peek(
=$bb					TKW_DEEKLPAREN               = $bb ; deek(
=$bc					TKW_LEEKLPAREN               = $bc ; leek(
=$bd					TKW_ASCLPAREN                = $bd ; asc(
=$be					TKW_INTLPAREN                = $be ; int(
=$bf					TKW_FLOATLPAREN              = $bf ; float(
=$c0					TKW_ISVALLPAREN              = $c0 ; isval(
=$c1					TKW_UPPERDOLLARLPAREN        = $c1 ; upper$(
=$c2					TKW_LOWERDOLLARLPAREN        = $c2 ; lower$(
=$c3					TKW_ATC                      = $c3 ; @
=$c4					TKW_WAVY                     = $c4 ; ~
=$c5					TKW_AMP                      = $c5 ; &
=$c6					TKW_GETDOLLARLPAREN          = $c6 ; get$(
=$c7					TKW_INKEYDOLLARLPAREN        = $c7 ; inkey$(
=$c8					TKW_MEM                      = $c8 ; mem
=$c9					TKW_RPAREN                   = $c9 ; )
=$ca					TKW_COLON                    = $ca ; :
=$cb					TKW_COMMA                    = $cb ; ,
=$cc					TKW_SEMICOLON                = $cc ; ;
=$cd					TKW_QUOTE                    = $cd ; '
=$ce					TKW_TO                       = $ce ; to
=$cf					TKW_STEP                     = $cf ; step
=$d0					TKW_PROC                     = $d0 ; proc
=$d1					TKW_LOCAL                    = $d1 ; local
=$d2					TKW_DIM                      = $d2 ; dim
=$d3					TKW_REM                      = $d3 ; rem
=$d4					TKW_LET                      = $d4 ; let
=$d5					TKW_INPUT                    = $d5 ; input
=$d6					TKW_ELSE                     = $d6 ; else
=$d7					TKW_VDU                      = $d7 ; vdu
=$d8					TKW_PRINT                    = $d8 ; print
=$d9					TKW_DATA                     = $d9 ; data
=$da					TKW_IMAGE                    = $da ; image
=$db					TKW_AT                       = $db ; at
=$dc					TKW_FLIP                     = $dc ; flip
=$dd					TKW_ASSERT                   = $dd ; assert
=$de					TKW_POKE                     = $de ; poke
=$df					TKW_DOKE                     = $df ; doke
=$e0					TKW_LOKE                     = $e0 ; loke
=$e1					TKW_INK                      = $e1 ; ink
=$e2					TKW_PAPER                    = $e2 ; paper
=$e3					TKW_CLS                      = $e3 ; cls
=$e4					TKW_LOCATE                   = $e4 ; locate
=$e5					TKW_PERIOD                   = $e5 ; .
=$e6					TKW_FROM                     = $e6 ; from
=$e7					TKW_HASH                     = $e7 ; #
=$e8					TKW_CLEAR                    = $e8 ; clear
=$86					TKW_LOAD                     = $86 ; load
=$87					TKW_SAVE                     = $87 ; save
=$88					TKW_LIST                     = $88 ; list
=$89					TKW_NEW                      = $89 ; new
=$8a					TKW_BREAK                    = $8a ; break
=$8b					TKW_RUN                      = $8b ; run
=$8c					TKW_READ                     = $8c ; read
=$8d					TKW_RESTORE                  = $8d ; restore
=$8e					TKW_END                      = $8e ; end
=$8f					TKW_STOP                     = $8f ; stop
=$90					TKW_XEMU                     = $90 ; xemu
=$91					TKW_GOTO                     = $91 ; goto
=$92					TKW_GOSUB                    = $92 ; gosub
=$93					TKW_RETURN                   = $93 ; return
=$94					TKW_ORA                      = $94 ; ora
=$95					TKW_LPARENANDRPAREN          = $95 ; (and)
=$96					TKW_EOR                      = $96 ; eor
=$97					TKW_ADC                      = $97 ; adc
=$98					TKW_STA                      = $98 ; sta
=$99					TKW_LDA                      = $99 ; lda
=$9a					TKW_CMP                      = $9a ; cmp
=$9b					TKW_SBC                      = $9b ; sbc
=$9c					TKW_ASL                      = $9c ; asl
=$9d					TKW_ROL                      = $9d ; rol
=$9e					TKW_LSR                      = $9e ; lsr
=$9f					TKW_ROR                      = $9f ; ror
=$a0					TKW_STX                      = $a0 ; stx
=$a1					TKW_LDX                      = $a1 ; ldx
=$a2					TKW_DEC                      = $a2 ; dec
=$a3					TKW_INC                      = $a3 ; inc
=$a4					TKW_STZ                      = $a4 ; stz
=$a5					TKW_BIT                      = $a5 ; bit
=$a6					TKW_STY                      = $a6 ; sty
=$a7					TKW_LDY                      = $a7 ; ldy
=$a8					TKW_CPY                      = $a8 ; cpy
=$a9					TKW_CPX                      = $a9 ; cpx
=$aa					TKW_TSB                      = $aa ; tsb
=$ab					TKW_TRB                      = $ab ; trb
=$ac					TKW_JSR                      = $ac ; jsr
=$ad					TKW_JMP                      = $ad ; jmp
=$ae					TKW_BPL                      = $ae ; bpl
=$af					TKW_BMI                      = $af ; bmi
=$b0					TKW_BVC                      = $b0 ; bvc
=$b1					TKW_BVS                      = $b1 ; bvs
=$b2					TKW_BCC                      = $b2 ; bcc
=$b3					TKW_BCS                      = $b3 ; bcs
=$b4					TKW_BNE                      = $b4 ; bne
=$b5					TKW_BEQ                      = $b5 ; beq
=$b6					TKW_BRA                      = $b6 ; bra
=$b7					TKW_BRK                      = $b7 ; brk
=$b8					TKW_PHP                      = $b8 ; php
=$b9					TKW_CLC                      = $b9 ; clc
=$ba					TKW_PLP                      = $ba ; plp
=$bb					TKW_SEC                      = $bb ; sec
=$bc					TKW_RTI                      = $bc ; rti
=$bd					TKW_PHA                      = $bd ; pha
=$be					TKW_CLI                      = $be ; cli
=$bf					TKW_PHY                      = $bf ; phy
=$c0					TKW_RTS                      = $c0 ; rts
=$c1					TKW_PLA                      = $c1 ; pla
=$c2					TKW_SEI                      = $c2 ; sei
=$c3					TKW_PLY                      = $c3 ; ply
=$c4					TKW_DEY                      = $c4 ; dey
=$c5					TKW_TXA                      = $c5 ; txa
=$c6					TKW_TYA                      = $c6 ; tya
=$c7					TKW_TXS                      = $c7 ; txs
=$c8					TKW_TAY                      = $c8 ; tay
=$c9					TKW_TAX                      = $c9 ; tax
=$ca					TKW_CLV                      = $ca ; clv
=$cb					TKW_TSX                      = $cb ; tsx
=$cc					TKW_INY                      = $cc ; iny
=$cd					TKW_DEX                      = $cd ; dex
=$ce					TKW_CLD                      = $ce ; cld
=$cf					TKW_PHX                      = $cf ; phx
=$d0					TKW_INX                      = $d0 ; inx
=$d1					TKW_NOP                      = $d1 ; nop
=$d2					TKW_SED                      = $d2 ; sed
=$d3					TKW_PLX                      = $d3 ; plx
=$86					TKW_VPOKE                    = $86 ; vpoke
=$87					TKW_VDOKE                    = $87 ; vdoke
=$88					TKW_VLOAD                    = $88 ; vload
=$89					TKW_MODE                     = $89 ; mode
=$8a					TKW_PALETTE                  = $8a ; palette
=$8b					TKW_SPRITE                   = $8b ; sprite
=$8c					TKW_CLG                      = $8c ; clg
=$8d					TKW_RECT                     = $8d ; rect
=$8e					TKW_FRAME                    = $8e ; frame
=$8f					TKW_DRAW                     = $8f ; draw
=$90					TKW_TEXT                     = $90 ; text
=$86					TKW_VPEEKLPAREN              = $86 ; vpeek(
=$87					TKW_VDEEKLPAREN              = $87 ; vdeek(
=$88					TKW_SPRITEPERIODXLPAREN      = $88 ; sprite.x(
=$89					TKW_SPRITEPERIODYLPAREN      = $89 ; sprite.y(
=$8a					TKW_HITLPAREN                = $8a ; hit(
=$8b					TKW_JOYPERIODXLPAREN         = $8b ; joy.x(
=$8c					TKW_JOYPERIODYLPAREN         = $8c ; joy.y(
=$8d					TKW_JOYPERIODBLPAREN         = $8d ; joy.b(
=$8e					TKW_CLOCKLPAREN              = $8e ; clock(

;******  Return to file: header/03data.inc

=$3a					TYPE_INT =		($3A) 						; type bytes that end identifier.
=$3b					TYPE_INTARRAY =	($3B)
=$3c					TYPE_STR =		($3C)
=$3d					TYPE_STRARRAY =	($3D)
=$3e					TYPE_FLOAT =	($3E)
=$3f					TYPE_FLOATARRAY=($3F)

;******  Processing file: header/../generated/asmconst.inc

=$94					TKA_GROUP1 = $94
=$9c					TKA_GROUP2 = $9c
=$ae					TKA_GROUP3 = $ae
=$b7					TKA_GROUP4 = $b7
=$d4					TKA_END4 = $d4

;******  Return to file: header/03data.inc


;******  Return to file: basic.asm


;******  Processing file: header/header.inc


;******  Return to file: basic.asm


;******  Processing file: assembler/asmconst.inc

=0					AMD_IMM		= 0					; Immediate mode.
=1					AMD_ZERO 	= 1					; Zero Page
=2					AMD_ACCIMP	= 2					; Accumulator/Implied
=3					AMD_ABS 	= 3					; Absolute
=4					AMD_ZEROINDY= 4					; Zero Indirect,Y
=5					AMD_ZEROX 	= 5					; Zero Page,X
=6					AMD_ABSY 	= 6					; Absolute,Y
=7					AMD_ABSX 	= 7					; Absolute,X
=8					AMD_ZEROIND = 8					; Zero Indirect
=9					AMD_ZEROY 	= 9					; Zero Page,Y
=10					AMD_ABSIND 	= 10				; Absolute Indirect
=11					AMD_ABSINDX	= 11				; Absolute Indirect Indexed
=12					AMD_REL		= 12				; Relative
=13					AMD_ZEROINDX= 13 				; Zero Indirect,X

;******  Return to file: basic.asm


;******  Processing file: assembler/assembler.inc


;******  Return to file: basic.asm


;******  Processing file: device/device.inc


;******  Return to file: basic.asm


;******  Processing file: error/error.inc


;******  Return to file: basic.asm


;******  Processing file: error/errorhandler.inc


;******  Processing file: error/../generated/errorid.inc

=1					ErrorID_Missing = 1 ; Feature not Present
=2					ErrorID_Syntax = 2 ; Syntax Error
=3					ErrorID_NoModule = 3 ; Module disabled
=4					ErrorID_Assert = 4 ; Assertion failed
=5					ErrorID_DivZero = 5 ; Divide By Zero
=6					ErrorID_Stop = 6 ; Stop
=7					ErrorID_BadType = 7 ; Type Mismatch
=8					ErrorID_BadValue = 8 ; Illegal Value
=9					ErrorID_MissingRP = 9 ; Missing right bracket
=10					ErrorID_MissingComma = 10 ; Missing comma
=11					ErrorID_NoReference = 11 ; Missing reference
=12					ErrorID_LineNumber = 12 ; Line Number not found
=13					ErrorID_StrLen = 13 ; String too long
=14					ErrorID_ReturnErr = 14 ; RETURN without GOSUB
=15					ErrorID_UntilErr = 15 ; UNTIL without REPEAT
=16					ErrorID_NextErr = 16 ; NEXT without FOR
=17					ErrorID_WendErr = 17 ; WEND without WHILE
=18					ErrorID_endprocErr = 18 ; ENDPROC without PROC
=19					ErrorID_BadIndex = 19 ; Bad NEXT index
=20					ErrorID_Struct = 20 ; Structures nested wrong
=21					ErrorID_NoAuto = 21 ; Cannot create variable
=22					ErrorID_RetStack = 22 ; Return stack out of space
=23					ErrorID_NoProc = 23 ; Unknown Procedure
=24					ErrorID_Params = 24 ; Parameters do not match
=25					ErrorID_DupArray = 25 ; Array already defined
=26					ErrorID_NotArray = 26 ; DIM requires array
=27					ErrorID_ArrayIndex = 27 ; Bad array index
=28					ErrorID_ArrayDepth = 28 ; Wrong number of array indices
=29					ErrorID_DataError = 29 ; Out of data
=30					ErrorID_Tokenise = 30 ; Cannot tokenise line
=31					ErrorID_Save = 31 ; Save failed
=32					ErrorID_Load = 32 ; Load failed
=33					ErrorID_Break = 33 ; Break
=34					ErrorID_Memory = 34 ; Out of memory
=35					ErrorID_NumStack = 35 ; Expression too complex
=36					ErrorID_Assembler = 36 ; Bad Operand/Mode
=37					ErrorID_Branch = 37 ; Branch out of range
=38					ErrorID_Label = 38 ; Label changed value
=39					ErrorID_NoSprite = 39 ; No Sprite Selected
=40					ErrorID_Hardware = 40 ; Hardware

;******  Return to file: error/errorhandler.inc


;******  Return to file: basic.asm


;******  Processing file: extension/extension.inc


;******  Return to file: basic.asm


;******  Processing file: extension/option_x16/x16const.inc

=64					X16MaxImages = 64 							; max # of sprite images.

;******  Return to file: basic.asm


;******  Processing file: floatingpoint/float.inc

=5					FloatEmbeddedSize = 5

;******  Return to file: basic.asm


;******  Processing file: floatingpoint/floatingpoint.inc


;******  Return to file: basic.asm


;******  Processing file: interaction/interaction.inc


;******  Return to file: basic.asm


;******  Processing file: main/main.inc


;******  Return to file: basic.asm


;******  Processing file: string/functions/memory.inc

=252					MaxStringSize = 252

;******  Return to file: basic.asm


;******  Processing file: string/string.inc


;******  Return to file: basic.asm


;******  Processing file: tokeniser/detokenise/colouring.inc

=$84					LTYLineNumber = $84
=$82					LTYPunctuation = $82
=$87					LTYIdentifier = $87
=$86					LTYConstant = $86
=$83					LTYKeyword = $83
=$81					LTYString = $81

;******  Return to file: basic.asm


;******  Processing file: tokeniser/tokeniser.inc


;******  Return to file: basic.asm


;******  Processing file: variable/variable.inc


;******  Return to file: basic.asm


;******  Processing file: footer/footer.inc


;******  Return to file: basic.asm

.1000					section_start_header:

;******  Processing file: header/header.asm


;******  Processing file: header/00start.asm

.1000					Start:
.1000	4c 0a 10	jmp $100a			jmp 	GoColdStart 				; +0 	boot BASIC
.1003	4c 58 10	jmp $1058			jmp 	GoTokTest					; +3 	run tokeniser test code.
>1006	47 42						.word 	TokenTableAddress
.1008							else
>1008	00 00						.word 	0
.100a					GoColdStart:
.100a	a9 00		lda #$00			lda 	#(programMemory) & $FF
.100c	8d c8 0a	sta $0ac8			sta 	basePage
.100f	a9 4a		lda #$4a			lda 	#(programMemory) >> 8
.1011	8d c9 0a	sta $0ac9			sta 	1+(basePage)
.1014	a9 00		lda #$00			lda 	#(endOfMemory) & $FF
.1016	8d cc 0a	sta $0acc			sta 	endMemory
.1019	a9 9f		lda #$9f			lda 	#(endOfMemory) >> 8
.101b	8d cd 0a	sta $0acd			sta 	1+(endMemory)
.101e	20 26 10	jsr $1026			jsr 	InitialiseAll 				; initialise everything.
.1021	a2 02		ldx #$02		ldx	#2
.1023	20 1c 24	jsr $241c		jsr	interactionHandler

;******  Processing file: header/../generated/initialiseall.asm

.1026					InitialiseAll:
.1026	a9 00		lda #$00		lda #0
.1028	a2 00		ldx #$00		ldx	#0
.102a	20 b4 13	jsr $13b4		jsr	assemblerHandler
.102d	a9 00		lda #$00		lda #0
.102f	a2 00		ldx #$00		ldx	#0
.1031	20 f6 14	jsr $14f6		jsr	deviceHandler
.1034	a9 00		lda #$00		lda #0
.1036	a2 00		ldx #$00		ldx	#0
.1038	20 1c 24	jsr $241c		jsr	interactionHandler
.103b	a9 00		lda #$00		lda #0
.103d	a2 00		ldx #$00		ldx	#0
.103f	20 b8 3a	jsr $3ab8		jsr	mainHandler
.1042	a9 00		lda #$00		lda #0
.1044	a2 00		ldx #$00		ldx	#0
.1046	20 75 3d	jsr $3d75		jsr	stringHandler
.1049	a9 00		lda #$00		lda #0
.104b	a2 00		ldx #$00		ldx	#0
.104d	20 ee 45	jsr $45ee		jsr	tokeniserHandler
.1050	a9 00		lda #$00		lda #0
.1052	a2 00		ldx #$00		ldx	#0
.1054	20 bf 49	jsr $49bf		jsr	variableHandler
.1057	60		rts			rts

;******  Return to file: header/00start.asm

.1058					GoTokTest:
.1058	a2 06		ldx #$06		ldx	#6
.105a	20 ee 45	jsr $45ee		jsr	tokeniserHandler

;******  Return to file: header/header.asm


;******  Return to file: basic.asm

.105d					section_end_header:
.105d					section_start_assembler:

;******  Processing file: assembler/assembler.asm


;******  Processing file: assembler/asmoperand.asm

.105d					AsmGetOperand:
.105d	a2 00		ldx #$00			ldx 	#0 							; clear the operand.
.105f	8a		txa				txa
.1060	95 98		sta $98,x			sta 	esInt0,x
.1062	95 a0		sta $a0,x			sta 	esInt1,x
.1064	95 a8		sta $a8,x			sta 	esInt2,x
.1066	95 b0		sta $b0,x			sta 	esInt3,x
.1068	b1 28		lda ($28),y			lda 	(codePtr),y 				; first into X
.106a	aa		tax				tax
.106b	a9 02		lda #$02			lda 	#AMD_ACCIMP
.106d	e0 80		cpx #$80			cpx 	#TOK_EOL 					; if end of line or colon, return implied mode.
.106f	f0 41		beq $10b2			beq 	_AGOExit
.1071	e0 ca		cpx #$ca			cpx 	#TKW_COLON
.1073	f0 3d		beq $10b2			beq 	_AGOExit
.1075	c8		iny				iny 								; consume the token
.1076	a9 00		lda #$00			lda 	#AMD_IMM
.1078	e0 e7		cpx #$e7			cpx 	#TKW_HASH 					; if a hash present, then immediate mode.
.107a	f0 2d		beq $10a9			beq		_AGOEvalExit 				; with an operand.
.107c	e0 a4		cpx #$a4			cpx 	#TKW_LPAREN 				; left bracket ?
.107e	f0 40		beq $10c0			beq 	_AGOIndirect
.1080	e0 01		cpx #$01			cpx 	#$01 						; is it "A" e.g. the variable A.
.1082	d0 0b		bne $108f			bne 	_AGOZeroPage1 				; if not it is zero zero,x zero,y, unpick 1 iny
.1084	b1 28		lda ($28),y			lda 	(codePtr),y 				; get the second character & consume it
.1086	c8		iny				iny
.1087	aa		tax				tax
.1088	a9 02		lda #$02			lda 	#AMD_ACCIMP 				; and return Acc/Implied if it is just A
.108a	e0 3a		cpx #$3a			cpx 	#$3A
.108c	f0 24		beq $10b2			beq 	_AGOExit
.108e	88		dey				dey 								; unpick 2 iny
.108f					_AGOZeroPage1:
.108f	88		dey				dey
.1090	a9 00		lda #$00			lda 	#0 							; get the address into esInt0/1
.1092	a2 0a		ldx #$0a		ldx	#10
.1094	20 b8 3a	jsr $3ab8		jsr	mainHandler
.1097	20 ef 10	jsr $10ef			jsr 	AsmGetIndexing
.109a	a9 01		lda #$01			lda 	#AMD_ZERO
.109c	90 14		bcc $10b2			bcc 	_AGOExit
.109e	a9 05		lda #$05			lda 	#AMD_ZEROX
.10a0	e0 00		cpx #$00			cpx 	#0
.10a2	f0 0e		beq $10b2			beq 	_AGOExit
.10a4	a9 09		lda #$09			lda 	#AMD_ZEROY
.10a6	4c b2 10	jmp $10b2			jmp 	_AGOExit
.10a9					_AGOEvalExit:
.10a9	48		pha				pha
.10aa	a9 00		lda #$00			lda 	#0 							; evaluate operand in root.
.10ac	a2 0a		ldx #$0a		ldx	#10
.10ae	20 b8 3a	jsr $3ab8		jsr	mainHandler
.10b1	68		pla				pla
.10b2					_AGOExit:
.10b2	48		pha				pha 								; save the mode
.10b3	a5 a8		lda $a8				lda 	esInt2 						; check the operand is zero.
.10b5	05 b0		ora $b0				ora 	esInt3
.10b7	d0 02		bne $10bb			bne 	_AGOValue
.10b9	68		pla				pla
.10ba	60		rts				rts
.10bb					_AGOValue:
.10bb	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.10bd	20 18 15	jsr $1518		jsr	errorHandler
.10c0					_AGOIndirect:
.10c0	a9 00		lda #$00			lda 	#0 							; evaluate operand in root.
.10c2	a2 0a		ldx #$0a		ldx	#10
.10c4	20 b8 3a	jsr $3ab8		jsr	mainHandler
.10c7	b1 28		lda ($28),y			lda 	(codePtr),y 				; does ) follow ? if so might be ) or ),Y
.10c9	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.10cb	f0 11		beq $10de			beq 	_AGOIndIndY
.10cd	20 ef 10	jsr $10ef			jsr 	ASMGetIndexing 				; must be ,X)
.10d0	90 39		bcc $110b			bcc 	AGISyntax
.10d2	e0 00		cpx #$00			cpx 	#0
.10d4	d0 35		bne $110b			bne 	AGISyntax
.10d6	a2 04		ldx #$04		ldx	#4
.10d8	20 b8 3a	jsr $3ab8		jsr	mainHandler
.10db	a9 0d		lda #$0d			lda 	#AMD_ZEROINDX
.10dd	60		rts				rts
.10de					_AGOIndIndY:
.10de	c8		iny				iny
.10df	20 ef 10	jsr $10ef			jsr 	ASMGetIndexing 				; get indexing if any
.10e2	a9 08		lda #$08			lda 	#AMD_ZEROIND
.10e4	90 cc		bcc $10b2			bcc 	_AGOExit 					; none then exit
.10e6	e0 00		cpx #$00			cpx 	#0 							; must be ,Y
.10e8	f0 21		beq $110b			beq 	AGISyntax
.10ea	a9 04		lda #$04			lda 	#AMD_ZEROINDY
.10ec	4c b2 10	jmp $10b2			jmp 	_AGOExit
.10ef					AsmGetIndexing:
.10ef	b1 28		lda ($28),y			lda 	(codePtr),y 				; check for comma
.10f1	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.10f3	18		clc				clc
.10f4	d0 14		bne $110a			bne 	_AGIExit 					; no comma, return with CC
.10f6	c8		iny				iny 								; get what SHOULD be X or Y
.10f7	b1 28		lda ($28),y			lda 	(codePtr),y  				; read it
.10f9	38		sec				sec 								; subtract 6 bit ASCII of X
.10fa	e9 18		sbc #$18			sbc 	#"X" & $3F
.10fc	c9 02		cmp #$02			cmp 	#2 							; if unsigned >= 2 then error
.10fe	b0 0b		bcs $110b			bcs 	AGISyntax
.1100	aa		tax				tax 								; put in index
.1101	c8		iny				iny 								; get what follows that, should be the $3A marker
.1102	b1 28		lda ($28),y			lda 	(codePtr),y
.1104	c8		iny				iny
.1105	c9 3a		cmp #$3a			cmp 	#$3A
.1107	d0 02		bne $110b			bne 	AGISyntax
.1109	38		sec				sec 								; return CS and index mode in X
.110a					_AGIExit:
.110a	60		rts				rts
.110b					AGISyntax:
.110b	a2 02		ldx #$02			ldx 	#ErrorID_syntax
.110d	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: assembler/assembler.asm


;******  Processing file: assembler/asmwrite.asm

.0af2					finalOpcode:
>0af2							.fill 	1
.1110					AsmWriteInstruction:
.1110	8d f2 0a	sta $0af2			sta 	finalOpcode					; save opcode.
.1113	98		tya				tya
.1114	48		pha				pha
.1115	ad 38 0a	lda $0a38			lda 	SingleLetterVar+("O"-"A")*4	; check O
.1118	29 02		and #$02			and 	#2
.111a	f0 2d		beq $1149			beq 	_ASMWNoEcho 				; if zero then don't echo.
.111c	ad 3d 0a	lda $0a3d			lda 	SingleLetterVar+("P"-"A")*4+1 ; write address in P
.111f	20 84 11	jsr $1184			jsr 	AWIWriteHex
.1122	ad 3c 0a	lda $0a3c			lda 	SingleLetterVar+("P"-"A")*4
.1125	20 84 11	jsr $1184			jsr 	AWIWriteHex
.1128	ad f2 0a	lda $0af2			lda 	finalOpcode 				; write opcode
.112b	20 7d 11	jsr $117d			jsr 	AWIWriteHexSpace
.112e	e0 00		cpx #$00			cpx 	#0
.1130	f0 0e		beq $1140			beq 	_ASMWEchoExit
.1132	a5 98		lda $98				lda 	esInt0
.1134	20 7d 11	jsr $117d			jsr 	AWIWriteHexSpace
.1137	e0 01		cpx #$01			cpx 	#1
.1139	f0 05		beq $1140			beq 	_ASMWEchoExit
.113b	a5 a0		lda $a0				lda 	esInt1
.113d	20 7d 11	jsr $117d			jsr 	AWIWriteHexSpace
.1140					_ASMWEchoExit:
.1140	8a		txa				txa
.1141	48		pha				pha
.1142	a2 06		ldx #$06		ldx	#6
.1144	20 f6 14	jsr $14f6		jsr	deviceHandler
.1147	68		pla				pla
.1148	aa		tax				tax
.1149					_ASMWNoEcho:
.1149	ad f2 0a	lda $0af2			lda 	finalOpcode
.114c	20 64 11	jsr $1164			jsr 	AsmWriteByte
.114f	e0 00		cpx #$00			cpx 	#0
.1151	f0 0e		beq $1161			beq 	_ASMWExit
.1153	a5 98		lda $98				lda 	esInt0
.1155	20 64 11	jsr $1164			jsr 	AsmWriteByte
.1158	e0 01		cpx #$01			cpx 	#1
.115a	f0 05		beq $1161			beq 	_ASMWExit
.115c	a5 a0		lda $a0				lda 	esInt1
.115e	20 64 11	jsr $1164			jsr 	AsmWriteByte
.1161					_ASMWExit:
.1161	68		pla				pla
.1162	a8		tay				tay
.1163	60		rts				rts
.1164					AsmWriteByte:
.1164	a0 00		ldy #$00			ldy 	#0
.1166	48		pha				pha
.1167	ad 3c 0a	lda $0a3c			lda 	SingleLetterVar+("P"-"A")*4 ; copy address to temp0
.116a	85 2a		sta $2a				sta 	temp0
.116c	ad 3d 0a	lda $0a3d			lda 	SingleLetterVar+("P"-"A")*4+1
.116f	85 2b		sta $2b				sta 	temp0+1
.1171	68		pla				pla 								; write out the byte.
.1172	91 2a		sta ($2a),y			sta 	(temp0),y
.1174	ee 3c 0a	inc $0a3c			inc 	SingleLetterVar+("P"-"A")*4	; increment P
.1177	d0 03		bne $117c			bne 	_AWBNoCarry
.1179	ee 3d 0a	inc $0a3d			inc 	SingleLetterVar+("P"-"A")*4+1
.117c					_AWBNoCarry:
.117c	60		rts				rts
.117d					AWIWriteHexSpace:
.117d	48		pha				pha
.117e	a9 20		lda #$20			lda 	#" "
.1180	20 97 11	jsr $1197			jsr 	AWIPrintChar
.1183	68		pla				pla
.1184					AWIWriteHex:
.1184	48		pha				pha
.1185	4a		lsr a				lsr 	a
.1186	4a		lsr a				lsr 	a
.1187	4a		lsr a				lsr 	a
.1188	4a		lsr a				lsr 	a
.1189	20 8d 11	jsr $118d			jsr 	AWIPrintNibble
.118c	68		pla				pla
.118d					AWIPrintNibble:
.118d	29 0f		and #$0f			and 	#15
.118f	c9 0a		cmp #$0a			cmp 	#10
.1191	90 02		bcc $1195			bcc 	_AWIPNDigit
.1193	69 06		adc #$06			adc 	#6
.1195					_AWIPNDigit:
.1195	69 30		adc #$30			adc 	#48
.1197					AWIPrintChar:
.1197	85 32		sta $32				sta 	tempShort
.1199	8a		txa				txa
.119a	48		pha				pha
.119b	a5 32		lda $32				lda 	tempShort
.119d	a2 16		ldx #$16		ldx	#22
.119f	20 f6 14	jsr $14f6		jsr	deviceHandler
.11a2	68		pla				pla
.11a3	aa		tax				tax
.11a4	60		rts				rts

;******  Return to file: assembler/assembler.asm


;******  Processing file: assembler/assemblecmd.asm

.0af3					asmToken:
>0af3							.fill 	1
.0af4					asmMode:
>0af4							.fill 	1 							; esInt0/1
.0af5					asmBaseOpcode:
>0af5							.fill 	1
.11a5					AssembleOneInstruction:
.11a5	8d f3 0a	sta $0af3			sta 	asmToken 					; save the token
.11a8	aa		tax				tax
.11a9	bd 72 11	lda $1172,x			lda 	OpcodeTable-TKA_GROUP1,x 	; get the base opcode.
.11ac	8d f5 0a	sta $0af5			sta 	asmBaseOpcode
.11af	20 5d 10	jsr $105d			jsr 	AsmGetOperand 				; identify the address mode and operand where applicable.
.11b2	8d f4 0a	sta $0af4			sta 	asmMode
.11b5	a5 a0		lda $a0				lda 	esInt1 						; check if this is a three byte operand.
.11b7	d0 05		bne $11be			bne 	_AOIThreeBytes 				; if so, we have to use three byte
.11b9	20 d4 11	jsr $11d4			jsr 	AssembleAttempt 			; try to assemble token/mode/operand (2 bytes)
.11bc	b0 10		bcs $11ce			bcs 	_AOISuccess 				; worked ok.
.11be					_AOIThreeBytes:
.11be	ae f4 0a	ldx $0af4			ldx 	asmMode 					; convert mode to 3 byte version, where possible.
.11c1	bd f8 11	lda $11f8,x			lda 	AbsoluteVersionTable,x
.11c4	30 09		bmi $11cf			bmi 	_AOIError					; not possible, no equivalent.
.11c6	8d f4 0a	sta $0af4			sta 	asmMode
.11c9	20 d4 11	jsr $11d4			jsr 	AssembleAttempt 			; try to assemble token/mode/operand (3 bytes)
.11cc	90 01		bcc $11cf			bcc 	_AOIError 					; didn't work.
.11ce					_AOISuccess:
.11ce	60		rts				rts
.11cf					_AOIError:
.11cf	a2 24		ldx #$24			ldx 	#ErrorID_Assembler
.11d1	20 18 15	jsr $1518		jsr	errorHandler
.11d4					AssembleAttempt:
.11d4	20 dd 11	jsr $11dd			jsr 	_AADispatch 				; go to the code which dispatches to the appropriate
.11d7	b0 03		bcs $11dc			bcs 	_AAExit 					; exit if carry set, e.g. was successful
.11d9	20 87 13	jsr $1387			jsr 	AssembleSpecialCase
.11dc					_AAExit:
.11dc	60		rts				rts
.11dd					_AADispatch:
.11dd	ad f3 0a	lda $0af3			lda 	asmToken
.11e0	c9 b7		cmp #$b7			cmp 	#TKA_GROUP4
.11e2	b0 11		bcs $11f5			bcs 	_AAGroup4
.11e4	c9 ae		cmp #$ae			cmp 	#TKA_GROUP3
.11e6	b0 0a		bcs $11f2			bcs 	_AAGroup3
.11e8	c9 9c		cmp #$9c			cmp 	#TKA_GROUP2
.11ea	b0 03		bcs $11ef			bcs 	_AAGroup2
.11ec	4c cd 12	jmp $12cd			jmp 	AssembleGroup1
.11ef					_AAGroup2:
.11ef	4c 28 13	jmp $1328			jmp 	AssembleGroup2
.11f2					_AAGroup3:
.11f2	4c 49 13	jmp $1349			jmp 	AssembleGroup3
.11f5					_AAGroup4:
.11f5	4c 7d 13	jmp $137d			jmp 	AssembleGroup4
.11f8					AbsoluteVersionTable:
>11f8	ff						.byte	$FF 			; fail AMD_IMM
>11f9	03						.byte	AMD_ABS 		; absolute AMD_ZERO
>11fa	ff						.byte	$FF 			; fail AMD_ACCIMP
>11fb	ff						.byte	$FF 			; fail AMD_ABS
>11fc	ff						.byte 	$FF 			; fail AMD_ZEROINDY
>11fd	07						.byte	AMD_ABSX 		; absolute AMD_ZEROX
>11fe	ff						.byte	$FF 			; fail AMD_ABSY
>11ff	ff						.byte	$FF 			; fail AMD_ABSX
>1200	0a						.byte	AMD_ABSIND 		; absolute AMD_ZEROIND
>1201	06						.byte	AMD_ABSY 		; absolute AMD_ZEROY
>1202	ff						.byte	$FF 			; fail AMD_ABSIND
>1203	ff						.byte	$FF 			; fail AMD_ABSINDX
>1204	ff						.byte	$FF 			; fail AMD_REL
>1205	0b						.byte 	AMD_ABSINDX 	; absolute AMD_ZEROINDX

;******  Processing file: assembler/../generated/asmtables.inc

.1206					OpcodeTable:
>1206	01					.byte	$01			; $94 ora
>1207	21					.byte	$21			; $95 (and)
>1208	41					.byte	$41			; $96 eor
>1209	61					.byte	$61			; $97 adc
>120a	81					.byte	$81			; $98 sta
>120b	a1					.byte	$a1			; $99 lda
>120c	c1					.byte	$c1			; $9a cmp
>120d	e1					.byte	$e1			; $9b sbc
>120e	02					.byte	$02			; $9c asl
>120f	22					.byte	$22			; $9d rol
>1210	42					.byte	$42			; $9e lsr
>1211	62					.byte	$62			; $9f ror
>1212	82					.byte	$82			; $a0 stx
>1213	a2					.byte	$a2			; $a1 ldx
>1214	c2					.byte	$c2			; $a2 dec
>1215	e2					.byte	$e2			; $a3 inc
>1216	60					.byte	$60			; $a4 stz
>1217	20					.byte	$20			; $a5 bit
>1218	80					.byte	$80			; $a6 sty
>1219	a0					.byte	$a0			; $a7 ldy
>121a	c0					.byte	$c0			; $a8 cpy
>121b	e0					.byte	$e0			; $a9 cpx
>121c	00					.byte	$00			; $aa tsb
>121d	10					.byte	$10			; $ab trb
>121e	14					.byte	$14			; $ac jsr
>121f	40					.byte	$40			; $ad jmp
>1220	10					.byte	$10			; $ae bpl
>1221	30					.byte	$30			; $af bmi
>1222	50					.byte	$50			; $b0 bvc
>1223	70					.byte	$70			; $b1 bvs
>1224	90					.byte	$90			; $b2 bcc
>1225	b0					.byte	$b0			; $b3 bcs
>1226	d0					.byte	$d0			; $b4 bne
>1227	f0					.byte	$f0			; $b5 beq
>1228	80					.byte	$80			; $b6 bra
>1229	00					.byte	$00			; $b7 brk
>122a	08					.byte	$08			; $b8 php
>122b	18					.byte	$18			; $b9 clc
>122c	28					.byte	$28			; $ba plp
>122d	38					.byte	$38			; $bb sec
>122e	40					.byte	$40			; $bc rti
>122f	48					.byte	$48			; $bd pha
>1230	58					.byte	$58			; $be cli
>1231	5a					.byte	$5a			; $bf phy
>1232	60					.byte	$60			; $c0 rts
>1233	68					.byte	$68			; $c1 pla
>1234	78					.byte	$78			; $c2 sei
>1235	7a					.byte	$7a			; $c3 ply
>1236	88					.byte	$88			; $c4 dey
>1237	8a					.byte	$8a			; $c5 txa
>1238	98					.byte	$98			; $c6 tya
>1239	9a					.byte	$9a			; $c7 txs
>123a	a8					.byte	$a8			; $c8 tay
>123b	aa					.byte	$aa			; $c9 tax
>123c	b8					.byte	$b8			; $ca clv
>123d	ba					.byte	$ba			; $cb tsx
>123e	c8					.byte	$c8			; $cc iny
>123f	ca					.byte	$ca			; $cd dex
>1240	d8					.byte	$d8			; $ce cld
>1241	da					.byte	$da			; $cf phx
>1242	e8					.byte	$e8			; $d0 inx
>1243	ea					.byte	$ea			; $d1 nop
>1244	f8					.byte	$f8			; $d2 sed
>1245	fa					.byte	$fa			; $d3 plx
.1246					Group2OpcodeAvailability:
>1246	ae					.byte	$ae			; $9c asl $02
>1247	ae					.byte	$ae			; $9d rol $22
>1248	ae					.byte	$ae			; $9e lsr $42
>1249	ae					.byte	$ae			; $9f ror $62
>124a	0a					.byte	$0a			; $a0 stx $82
>124b	0b					.byte	$0b			; $a1 ldx $a2
>124c	aa					.byte	$aa			; $a2 dec $c2
>124d	aa					.byte	$aa			; $a3 inc $e2
>124e	22					.byte	$22			; $a4 stz $60
>124f	aa					.byte	$aa			; $a5 bit $20
>1250	2a					.byte	$2a			; $a6 sty $80
>1251	ab					.byte	$ab			; $a7 ldy $a0
>1252	2b					.byte	$2b			; $a8 cpy $c0
>1253	0b					.byte	$0b			; $a9 cpx $e0
>1254	0a					.byte	$0a			; $aa tsb $00
>1255	0a					.byte	$0a			; $ab trb $10
>1256	08					.byte	$08			; $ac jsr $14
>1257	08					.byte	$08			; $ad jmp $40
.1258					AssemblerSpecialCases:
>1258	ad 0a 6c				.byte	$ad,10,$6c		; jmp (abs)
>125b	ad 0b 7c				.byte	$ad,11,$7c		; jmp (abs,x)
>125e	a1 06 be				.byte	$a1,6,$be		; ldx abs,y
>1261	a1 09 b6				.byte	$a1,9,$b6		; ldx zp,y
>1264	a0 09 96				.byte	$a0,9,$96		; stx zp,y
>1267	a3 02 1a				.byte	$a3,2,$1a		; inc acc
>126a	a2 02 3a				.byte	$a2,2,$3a		; dec acc
>126d	a5 00 89				.byte	$a5,0,$89		; bit #
>1270	a4 03 9c				.byte	$a4,3,$9c		; stz abs
>1273	a4 07 9e				.byte	$a4,7,$9e		; stz abs,x
>1276	00					.byte	0

;******  Return to file: assembler/assemblecmd.asm


;******  Return to file: assembler/assembler.asm


;******  Processing file: assembler/assemblelabel.asm

.1277					AssembleLabel:
.1277	b1 28		lda ($28),y			lda 	(codePtr),y 				; check it's followed by a variable name.
.1279	c9 3a		cmp #$3a			cmp 	#$3A
.127b	b0 4b		bcs $12c8			bcs 	_ALSyntax
.127d	a9 00		lda #$00			lda 	#0							; get a variable name on to stack:0
.127f	a2 02		ldx #$02		ldx	#2
.1281	20 bf 49	jsr $49bf		jsr	variableHandler
.1284	a5 90		lda $90				lda 	esType 						; check integer reference
.1286	c9 80		cmp #$80			cmp 	#$80
.1288	d0 3e		bne $12c8			bne 	_ALSyntax
.128a	a5 98		lda $98				lda 	esInt0 						; copy that reference address to temp0
.128c	85 2a		sta $2a				sta 	temp0
.128e	a5 a0		lda $a0				lda 	esInt1
.1290	85 2b		sta $2b				sta 	temp0+1
.1292	98		tya				tya
.1293	48		pha				pha
.1294	ad 38 0a	lda $0a38			lda 	SingleLetterVar+("O"-"A")*4	; are we in Pass 2
.1297	4a		lsr a				lsr 	a
.1298	90 11		bcc $12ab			bcc 	_ALWrite
.129a	a0 00		ldy #$00			ldy 	#0
.129c	ad 3c 0a	lda $0a3c			lda 	SingleLetterVar+("P"-"A")*4 ; compare the value in P to the variable
.129f	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.12a1	d0 20		bne $12c3			bne 	_ALChanged
.12a3	c8		iny				iny
.12a4	ad 3d 0a	lda $0a3d			lda 	SingleLetterVar+("P"-"A")*4+1
.12a7	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.12a9	d0 18		bne $12c3			bne 	_ALChanged
.12ab					_ALWrite:
.12ab	a0 00		ldy #$00			ldy 	#0
.12ad	ad 3c 0a	lda $0a3c			lda 	SingleLetterVar+("P"-"A")*4 ; copy the value in P into the variable
.12b0	91 2a		sta ($2a),y			sta 	(temp0),y
.12b2	ad 3d 0a	lda $0a3d			lda 	SingleLetterVar+("P"-"A")*4+1
.12b5	c8		iny				iny
.12b6	91 2a		sta ($2a),y			sta 	(temp0),y
.12b8	a9 00		lda #$00			lda 	#0
.12ba	c8		iny				iny
.12bb	91 2a		sta ($2a),y			sta 	(temp0),y
.12bd	c8		iny				iny
.12be	91 2a		sta ($2a),y			sta 	(temp0),y
.12c0	68		pla				pla
.12c1	a8		tay				tay
.12c2	60		rts				rts
.12c3					_ALChanged:
.12c3	a2 26		ldx #$26			ldx 	#ErrorID_Label
.12c5	20 18 15	jsr $1518		jsr	errorHandler
.12c8					_ALSyntax:
.12c8	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.12ca	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: assembler/assembler.asm


;******  Processing file: assembler/subgroup.asm

.12cd					AssembleGroup1:
.12cd	ad f3 0a	lda $0af3			lda 	asmToken 					; firstly, we throw out STA immediate
.12d0	c9 98		cmp #$98			cmp 	#TKW_STA
.12d2	d0 07		bne $12db			bne 	_AG1NotStoreImm
.12d4	ad f4 0a	lda $0af4			lda 	asmMode
.12d7	c9 00		cmp #$00			cmp 	#AMD_IMM
.12d9	f0 2c		beq $1307			beq 	AG1ModeError
.12db					_AG1NotStoreImm:
.12db	ae f4 0a	ldx $0af4			ldx 	asmMode						; get mode into X.
.12de	bd 0c 13	lda $130c,x			lda		AMDOperandSize,X 			; get the size of the operand and push on stack
.12e1	48		pha				pha
.12e2	f0 23		beq $1307			beq 	AG1ModeError 				; if the size is zero, the mode must be Accumulator
.12e4	e0 00		cpx #$00			cpx 	#0 							; if the mode is zero, e.g. immediate
.12e6	d0 02		bne $12ea			bne 	_AG1NotImmediate
.12e8	a2 02		ldx #$02			ldx 	#2 							; then we use offset 2 here. This is how the 6502
.12ea					_AG1NotImmediate:
.12ea	e0 0d		cpx #$0d			cpx 	#AMD_ZEROINDX 				; (zero,x) uses slot 0.
.12ec	d0 02		bne $12f0			bne 	_AG1NotZX
.12ee	a2 00		ldx #$00			ldx 	#0
.12f0					_AG1NotZX:
.12f0	68		pla				pla 								; restore length
.12f1	e0 09		cpx #$09			cpx 	#9 							; anything > 8 fails.
.12f3	b0 10		bcs $1305			bcs 	AG1Fail
.12f5					AG1ReturnValue:
.12f5	85 32		sta $32				sta 	tempShort 					; save size of operand
.12f7	18		clc				clc
.12f8	bd 1a 13	lda $131a,x			lda 	AMDOffsetFromBase,X 		; get the offset for the address mode.
.12fb	6d f5 0a	adc $0af5			adc 	asmBaseOpcode 				; add the base opcode.
.12fe	a6 32		ldx $32				ldx 	tempShort 					; length in X
.1300	20 10 11	jsr $1110			jsr 	AsmWriteInstruction 		; output instruction.
.1303	38		sec				sec
.1304	60		rts				rts
.1305					AG1Fail:
.1305	18		clc				clc
.1306	60		rts				rts
.1307					AG1ModeError:
.1307	a2 24		ldx #$24			ldx 	#ErrorID_Assembler
.1309	20 18 15	jsr $1518		jsr	errorHandler
.130c					AMDOperandSize:
>130c	01 01 00 02					.byte 	1,1,0,2
>1310	01 01 02 02					.byte 	1,1,2,2
>1314	01 01 02 02					.byte 	1,1,2,2
>1318	01 01						.byte 	1,1
.131a					AMDOffsetFromBase:
>131a	00 04 08 0c					.byte 	0,4,8,12
>131e	10 14 18 1c					.byte	16,20,24,28
>1322	11 00 00 00					.byte 	17,0,0,0
>1326	00 00						.byte 	0,0
.1328					AssembleGroup2:
.1328	ad f4 0a	lda $0af4			lda 	asmMode 					; get the mode; if >= 8 cannot be a legit group 2
.132b	c9 08		cmp #$08			cmp 	#8
.132d	b0 18		bcs $1347			bcs 	_AG2Fail
.132f	85 2a		sta $2a				sta 	temp0 						; save in temp9
.1331	ae f3 0a	ldx $0af3			ldx 	asmToken					; get token in X, then get the availability flags for it
.1334	bd aa 11	lda $11aa,x			lda 	Group2OpcodeAvailability-TKA_GROUP2,x
.1337					_AG2Shift:
.1337	4a		lsr a				lsr 	a
.1338	c6 2a		dec $2a				dec 	temp0
.133a	10 fb		bpl $1337			bpl 	_AG2Shift
.133c	90 09		bcc $1347			bcc 	_AG2Fail 					; cannot do that instruction w/that opcode.
.133e	ae f4 0a	ldx $0af4			ldx  	asmMode 					; mode in X
.1341	bd 0c 13	lda $130c,x			lda		AMDOperandSize,X 			; get the size of the operand in A
.1344	4c f5 12	jmp $12f5			jmp 	AG1ReturnValue 				; and use that with Group 1's exit code
.1347					_AG2Fail:
.1347	18		clc				clc
.1348	60		rts				rts
.1349					AssembleGroup3:
.1349	ad 38 0a	lda $0a38			lda 	SingleLetterVar+("O"-"A")*4	; check bit 0 (pass) of O
.134c	4a		lsr a				lsr 	a
.134d	a9 00		lda #$00			lda 	#0 							; if clear, e.g. pass 1, use default zero.
.134f	90 21		bcc $1372			bcc 	_AG3Default
.1351	38		sec				sec	 								; calculate branch offset
.1352	a5 98		lda $98				lda		esInt0
.1354	ed 3c 0a	sbc $0a3c			sbc 	SingleLetterVar+("P"-"A")*4
.1357	aa		tax				tax
.1358	a5 a0		lda $a0				lda		esInt1
.135a	ed 3d 0a	sbc $0a3d			sbc 	SingleLetterVar+("P"-"A")*4+1
.135d	85 a0		sta $a0				sta 	esInt1
.135f	8a		txa				txa 								; add 126, now 128 too many.
.1360	18		clc				clc 								; we can use this to check the range
.1361	69 7e		adc #$7e			adc 	#126
.1363	85 98		sta $98				sta 	esInt0
.1365	90 02		bcc $1369			bcc 	_AG3NoCarry
.1367	e6 a0		inc $a0				inc 	esInt1
.1369					_AG3NoCarry:
.1369	a5 a0		lda $a0				lda 	esInt1 						; check in range.
.136b	d0 0b		bne $1378			bne 	_AG3Range
.136d	a5 98		lda $98				lda 	esInt0 						; fix up branch distance
.136f	38		sec				sec
.1370	e9 80		sbc #$80			sbc 	#128
.1372					_AG3Default:
.1372	85 98		sta $98				sta 	esInt0
.1374					_AG3ExitOk:
.1374	a2 01		ldx #$01			ldx 	#1 							; one opcode, use AG4 Code
.1376	d0 07		bne $137f			bne 	AG4Write
.1378					_AG3Range:
.1378	a2 25		ldx #$25			ldx 	#ErrorID_Branch
.137a	20 18 15	jsr $1518		jsr	errorHandler
.137d					AssembleGroup4:
.137d	a2 00		ldx #$00			ldx 	#0 							; no parameters in the opcode.
.137f					AG4Write:
.137f	ad f5 0a	lda $0af5			lda 	asmBaseOpcode				; the opcode is the opcode base.
.1382	20 10 11	jsr $1110			jsr 	AsmWriteInstruction 		; output instruction.
.1385	38		sec				sec
.1386	60		rts				rts
.1387					AssembleSpecialCase:
.1387	a2 00		ldx #$00			ldx 	#0
.1389					_ASCScan:
.1389	bd 58 12	lda $1258,x			lda 	AssemblerSpecialCases,x 	; scan token and mode for match
.138c	cd f3 0a	cmp $0af3			cmp 	asmToken
.138f	d0 08		bne $1399			bne 	_ASCNext
.1391	bd 59 12	lda $1259,x			lda 	AssemblerSpecialCases+1,x
.1394	cd f4 0a	cmp $0af4			cmp 	asmMode
.1397	f0 0a		beq $13a3			beq 	_ASCFound
.1399					_ASCNext:
.1399	e8		inx				inx									; next entry
.139a	e8		inx				inx
.139b	e8		inx				inx
.139c	bd 58 12	lda $1258,x			lda 	AssemblerSpecialCases,x 	; until table ends
.139f	d0 e8		bne $1389			bne 	_ASCScan
.13a1	18		clc				clc
.13a2	60		rts				rts
.13a3					_ASCFound:
.13a3	bd 5a 12	lda $125a,x			lda 	AssemblerSpecialCases+2,x 	; get the new opcode.
.13a6	48		pha				pha
.13a7	ae f4 0a	ldx $0af4			ldx  	asmMode 					; mode in X
.13aa	bd 0c 13	lda $130c,x			lda		AMDOperandSize,X 			; get the size of the operand in X
.13ad	aa		tax				tax
.13ae	68		pla				pla 								; opcode back
.13af	20 10 11	jsr $1110			jsr 	AsmWriteInstruction 		; output instruction.
.13b2	38		sec				sec
.13b3	60		rts				rts

;******  Return to file: assembler/assembler.asm

.13b4					assemblerHandler:
.13b4	7c b7 13	jmp ($13b7,x)			jmp 	(assemblerVectors,x)
.13b7					assemblerVectors:
>13b7	bd 13					.word _DummyControlHandler ; index 0
>13b9	a5 11					.word AssembleOneInstruction ; index 2
>13bb	77 12					.word AssembleLabel        ; index 4
.13bd					_DummyControlHandler:
.13bd	60		rts			rts

;******  Return to file: basic.asm

.13be					section_end_assembler:
.13be					section_start_device:

;******  Processing file: device/device.asm


;******  Processing file: device/option_x16/x16break.asm

.13be					X16Break:
.13be	20 e1 ff	jsr $ffe1			jsr 	$FFE1
.13c1	f0 01		beq $13c4			beq 	_IsBreak
.13c3	60		rts				rts
.13c4					_IsBreak:
.13c4	a2 21		ldx #$21			ldx 	#ErrorID_Break
.13c6	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: device/device.asm


;******  Processing file: device/option_x16/x16file.asm

.13c9					ExternSave:
.13c9	98		tya				tya
.13ca	48		pha				pha
.13cb	20 19 14	jsr $1419			jsr 	ExternGetLength 			; get length of file into A name YX
.13ce	20 bd ff	jsr $ffbd			jsr 	$FFBD 						; set name
.13d1	a9 01		lda #$01			lda 	#1
.13d3	a2 08		ldx #$08			ldx 	#8	 						; device #8
.13d5	a0 00		ldy #$00			ldy 	#0
.13d7	20 ba ff	jsr $ffba			jsr 	$FFBA 						; set LFS
.13da	a5 99		lda $99				lda 	esInt0+1 					; copy start of save address to temp0
.13dc	85 2a		sta $2a				sta 	temp0
.13de	a5 a1		lda $a1				lda 	esInt1+1
.13e0	85 2b		sta $2b				sta 	temp0+1
.13e2	a6 9a		ldx $9a				ldx 	esInt0+2 					; end address
.13e4	a4 a2		ldy $a2				ldy 	esInt1+2
.13e6	a9 2a		lda #$2a			lda 	#temp0 						; ref to start address
.13e8	20 d8 ff	jsr $ffd8			jsr 	$FFD8 						; save
.13eb	b0 03		bcs $13f0			bcs 	_ESSave
.13ed	68		pla				pla
.13ee	a8		tay				tay
.13ef	60		rts				rts
.13f0					_ESSave:
.13f0	a2 1f		ldx #$1f			ldx 	#ErrorID_Save
.13f2	20 18 15	jsr $1518		jsr	errorHandler
.13f5					ExternLoad:
.13f5	98		tya				tya
.13f6	48		pha				pha
.13f7	20 19 14	jsr $1419			jsr 	ExternGetLength 			; get length of file into A name YX
.13fa	20 bd ff	jsr $ffbd			jsr 	$FFBD 						; set name
.13fd	a9 01		lda #$01			lda 	#1
.13ff	a2 08		ldx #$08			ldx 	#8	 						; device #8
.1401	a0 00		ldy #$00			ldy 	#0
.1403	20 ba ff	jsr $ffba			jsr 	$FFBA 						; set LFS
.1406	a6 99		ldx $99				ldx 	esInt0+1 					; load address
.1408	a4 a1		ldy $a1				ldy 	esInt1+1
.140a	a9 00		lda #$00			lda 	#0 							; load command
.140c	20 d5 ff	jsr $ffd5			jsr 	$FFD5
.140f	b0 03		bcs $1414			bcs 	_ESLoad
.1411	68		pla				pla
.1412	a8		tay				tay
.1413	60		rts				rts
.1414					_ESLoad:
.1414	a2 20		ldx #$20			ldx 	#ErrorID_Load
.1416	20 18 15	jsr $1518		jsr	errorHandler
.1419					ExternGetLength:
.1419	a5 98		lda $98				lda 	esInt0 						; length into A.
.141b	85 2a		sta $2a				sta 	temp0
.141d	a5 a0		lda $a0				lda 	esInt1
.141f	85 2b		sta $2b				sta 	temp0+1
.1421	a0 00		ldy #$00			ldy 	#0
.1423	b1 2a		lda ($2a),y			lda 	(temp0),y
.1425	a6 98		ldx $98				ldx 	esInt0 						; name into YX
.1427	a4 a0		ldy $a0				ldy 	esInt1
.1429	e8		inx				inx 								; advance over the length pointer.
.142a	d0 01		bne $142d			bne 	_ESNoCarry
.142c	c8		iny				iny
.142d					_ESNoCarry:
.142d	60		rts				rts

;******  Return to file: device/device.asm


;******  Processing file: device/option_x16/x16io.asm

=240					MaxLineInputSize = 240
.0af6					bufferCount:
>0af6							.fill 	0
.0af6					bufferStorage:
>0af6							.fill 	MaxLineInputSize
.142e					IOControlHandler:
.142e	c9 00		cmp #$00			cmp 	#0
.1430	d0 12		bne $1444			bne		_CHExit
.1432	a9 0f		lda #$0f			lda 	#15 						; switch to upper/lower case mode
.1434	20 5d 14	jsr $145d			jsr 	IOPrintChar
.1437	a9 02		lda #$02			lda 	#2 							; green on black and clear screen
.1439	20 89 14	jsr $1489			jsr 	IOInk
.143c	a9 00		lda #$00			lda 	#0
.143e	20 9d 14	jsr $149d			jsr 	IOPaper
.1441	20 45 14	jsr $1445			jsr 	IOClearScreen
.1444					_CHExit:
.1444	60		rts				rts
.1445					IOClearScreen:
.1445	48		pha				pha
.1446	a9 93		lda #$93			lda	 	#147 						; char code $93 clears screen
.1448	20 5d 14	jsr $145d			jsr 	IOPrintChar
.144b	68		pla				pla
.144c	60		rts				rts
.144d					IONewLine:
.144d	48		pha				pha
.144e	a9 0d		lda #$0d			lda 	#13
.1450	20 5d 14	jsr $145d			jsr 	IOPrintChar
.1453	68		pla				pla
.1454	60		rts				rts
.1455					IOTab:
.1455	48		pha				pha
.1456	a9 20		lda #$20			lda 	#32
.1458	20 5d 14	jsr $145d			jsr 	IOPrintChar
.145b	68		pla				pla
.145c	60		rts				rts
.145d					IOPrintAscii:
.145d					IOPrintChar:
.145d	aa		tax				tax 								; save in X so we can save Y
.145e	5a		phy				phy
.145f	8a		txa				txa
.1460	c9 08		cmp #$08			cmp 	#8 							; make BS (8) onto CHR$(14) which is the
.1462	d0 02		bne $1466			bne 	_IOPCNotBS 					; Commodore/X16 backspace code.
.1464	a9 14		lda #$14			lda 	#$14
.1466					_IOPCNotBS:
.1466	20 d2 ff	jsr $ffd2			jsr 	$FFD2 						; CBM OS Call.
.1469	7a		ply				ply
.146a	60		rts				rts
.146b					IOInkey:
.146b	98		tya				tya
.146c	48		pha				pha
.146d	20 e4 ff	jsr $ffe4			jsr 	$FFE4
.1470	85 32		sta $32				sta 	tempShort
.1472	68		pla				pla
.1473	a8		tay				tay
.1474	a5 32		lda $32				lda 	tempShort					; no key pressed.
.1476	f0 10		beq $1488			beq 	_IOIExit
.1478	c9 0d		cmp #$0d			cmp 	#13 						; allow CR (13)
.147a	f0 0c		beq $1488			beq 	_IOIExit
.147c	c9 14		cmp #$14			cmp 	#$14 						; backspace code ($14) returns 8.
.147e	f0 06		beq $1486			beq 	_IOIBackspace
.1480	c9 20		cmp #$20			cmp 	#32 						; no other control allowed.
.1482	90 e7		bcc $146b			bcc 	IOInkey
.1484	b0 02		bcs $1488			bcs 	_IOIExit
.1486					_IOIBackspace:
.1486	a9 08		lda #$08			lda 	#8 							; return chr(8)
.1488					_IOIExit:
.1488	60		rts				rts
.1489					IOInk:
.1489	48		pha				pha
.148a	29 07		and #$07			and 	#7 							; 8 primaries
.148c	aa		tax				tax
.148d	bd 95 14	lda $1495,x			lda 	_IOColourTable,x 			; look up CBM code and print it.
.1490	20 5d 14	jsr $145d			jsr 	IOPrintChar
.1493	68		pla				pla
.1494	60		rts				rts
.1495					_IOColourTable:
>1495	90						.byte 	$90 					; 0 Black
>1496	96						.byte 	$96 					; 1 Red
>1497	1e						.byte 	$1E 					; 2 Green
>1498	9e						.byte 	$9E 					; 3 Yellow
>1499	9a						.byte 	$9A 					; 4 Blue
>149a	9c						.byte 	$9C 					; 5 Magenta
>149b	9f						.byte 	$9F 					; 6 Cyan
>149c	05						.byte 	$05 					; 7 White
.149d					IOPaper:
.149d	48		pha				pha
.149e	48		pha				pha
.149f	a9 01		lda #$01			lda 	#1 						; 1 swaps fgr/bgr, so we swap them, set fgr
.14a1	20 5d 14	jsr $145d			jsr 	IOPrintChar 			; and then swap them again.
.14a4	68		pla				pla
.14a5	20 89 14	jsr $1489			jsr 	IOInk
.14a8	a9 01		lda #$01			lda 	#1
.14aa	20 5d 14	jsr $145d			jsr 	IOPrintChar
.14ad	68		pla				pla
.14ae	60		rts				rts
.14af					IOLocate:
.14af	48		pha				pha
.14b0	a9 13		lda #$13			lda 	#$13 					; home cursor code
.14b2	20 5d 14	jsr $145d			jsr 	IOPrintChar
.14b5	a9 11		lda #$11			lda 	#$11 	 				; print Y x $11 (down)
.14b7	20 be 14	jsr $14be			jsr 	_IOLoc2
.14ba	68		pla				pla
.14bb	a8		tay				tay
.14bc	a9 1d		lda #$1d			lda 	#$1D 					; print Y x $1D (right)
.14be					_IOLoc2:
.14be	c0 00		cpy #$00			cpy 	#0
.14c0	f0 06		beq $14c8			beq 	_IOLocExit
.14c2	20 5d 14	jsr $145d			jsr 	IOPrintChar
.14c5	88		dey				dey
.14c6	d0 f6		bne $14be			bne 	_IOLoc2
.14c8					_IOLocExit:
.14c8	60		rts				rts
.14c9					IOInput:
.14c9	a9 00		lda #$00			lda 	#0
.14cb	8d f6 0a	sta $0af6			sta 	bufferCount
.14ce					_IOILoop:
.14ce	20 cf ff	jsr $ffcf			jsr 	$FFCF
.14d1	c9 0d		cmp #$0d			cmp 	#13
.14d3	f0 10		beq $14e5			beq 	_IOIExit
.14d5	ae f6 0a	ldx $0af6			ldx 	bufferCount
.14d8	e0 f0		cpx #$f0			cpx 	#MaxLineInputSize
.14da	f0 f2		beq $14ce			beq 	_IOILoop
.14dc	ee f6 0a	inc $0af6			inc 	bufferCount
.14df	9d f7 0a	sta $0af7,x			sta 	bufferStorage+1,x
.14e2	4c ce 14	jmp $14ce			jmp 	_IOILoop
.14e5					_IOIExit:
.14e5	a9 f6		lda #$f6			lda 	#(bufferCount) & $FF
.14e7	85 2a		sta $2a				sta 	temp0
.14e9	a9 0a		lda #$0a			lda 	#(bufferCount) >> 8
.14eb	85 2b		sta $2b				sta 	1+(temp0)
.14ed	60		rts				rts

;******  Return to file: device/device.asm


;******  Processing file: device/option_x16/x16timer.asm

.14ee					IOReadTimer:
.14ee	20 de ff	jsr $ffde			jsr 	$FFDE 						; reads timer into YXA so we want only YA
.14f1	48		pha				pha
.14f2	8a		txa				txa
.14f3	a8		tay				tay
.14f4	68		pla				pla
.14f5	60		rts				rts

;******  Return to file: device/device.asm

.14f6					deviceHandler:
.14f6	7c f9 14	jmp ($14f9,x)			jmp 	(deviceVectors,x)
.14f9					deviceVectors:
>14f9	2e 14					.word IOControlHandler     ; index 0
>14fb	be 13					.word X16Break             ; index 2
>14fd	45 14					.word IOClearScreen        ; index 4
>14ff	4d 14					.word IONewLine            ; index 6
>1501	89 14					.word IOInk                ; index 8
>1503	6b 14					.word IOInkey              ; index 10
>1505	c9 14					.word IOInput              ; index 12
>1507	f5 13					.word ExternLoad           ; index 14
>1509	af 14					.word IOLocate             ; index 16
>150b	9d 14					.word IOPaper              ; index 18
>150d	5d 14					.word IOPrintChar          ; index 20
>150f	5d 14					.word IOPrintAscii         ; index 22
>1511	c9 13					.word ExternSave           ; index 24
>1513	55 14					.word IOTab                ; index 26
>1515	ee 14					.word IOReadTimer          ; index 28
.1517					_DummyControlHandler:
.1517	60		rts			rts

;******  Return to file: basic.asm

.1518					section_end_device:
.1518					section_start_error:

;******  Processing file: error/error.asm


;******  Processing file: error/errorhandler.asm

.1518					ErrorHandler:
.1518	8a		txa				txa
.1519	48		pha				pha
.151a	a9 01		lda #$01			lda 	#1 							; red
.151c	a2 08		ldx #$08		ldx	#8
.151e	20 f6 14	jsr $14f6		jsr	deviceHandler
.1521	68		pla				pla
.1522	aa		tax				tax
.1523	a9 8e		lda #$8e			lda 	#(ErrorTextList) & $FF
.1525	85 2a		sta $2a				sta 	temp0
.1527	a9 15		lda #$15			lda 	#(ErrorTextList) >> 8
.1529	85 2b		sta $2b				sta 	1+(temp0)
.152b	ca		dex		_EHFind:dex									; errors start at 1
.152c	f0 10		beq $153e			beq 	_EHFound
.152e	a0 00		ldy #$00			ldy 	#0 							; goto next text message, add length + 1 to the pointer.
.1530	38		sec				sec
.1531	a5 2a		lda $2a				lda 	temp0
.1533	71 2a		adc ($2a),y			adc 	(temp0),y
.1535	85 2a		sta $2a				sta 	temp0
.1537	90 f2		bcc $152b			bcc 	_EHFind
.1539	e6 2b		inc $2b				inc 	temp0+1
.153b	4c 2b 15	jmp $152b			jmp 	_EHFind
.153e					_EHFound:
.153e	20 52 18	jsr $1852			jsr 	EHPrintAscii 				; print the string "temp0" now points to.
.1541	a0 00		ldy #$00			ldy 	#0 							; in a line, e.g. the offset to next is non zero.
.1543	b1 28		lda ($28),y			lda 	(codePtr),y
.1545	f0 39		beq $1580			beq 	_EHNoLine
.1547	a5 29		lda $29				lda 	codePtr+1 					; code running from the command line.
.1549	cd c9 0a	cmp $0ac9			cmp 	basePage+1
.154c	90 32		bcc $1580			bcc 	_EHNoLine
.154e	a9 8a		lda #$8a			lda 	#(EHAtMsg) & $FF
.1550	85 2a		sta $2a				sta 	temp0
.1552	a9 15		lda #$15			lda 	#(EHAtMsg) >> 8
.1554	85 2b		sta $2b				sta 	1+(temp0)
.1556	20 52 18	jsr $1852			jsr 	EHPrintAscii
.1559	a0 01		ldy #$01			ldy 	#1 							; set up line number in TOS
.155b	a2 00		ldx #$00			ldx 	#0
.155d	b1 28		lda ($28),y			lda 	(codePtr),y
.155f	95 98		sta $98,x			sta 	esInt0,x
.1561	c8		iny				iny
.1562	b1 28		lda ($28),y			lda 	(codePtr),y
.1564	95 a0		sta $a0,x			sta 	esInt1,x
.1566	a9 00		lda #$00			lda 	#0
.1568	95 a8		sta $a8,x			sta 	esInt2,x
.156a	95 b0		sta $b0,x			sta 	esInt3,x
.156c	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.156e	85 2a		sta $2a				sta 	temp0
.1570	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.1572	85 2b		sta $2b				sta 	1+(temp0)
.1574	a0 0a		ldy #$0a			ldy 	#10 						; in base 10.
.1576	a9 00		lda #$00			lda 	#0							; stack position zero.
.1578	a2 12		ldx #$12		ldx	#18
.157a	20 b8 3a	jsr $3ab8		jsr	mainHandler
.157d	20 52 18	jsr $1852			jsr 	EHPrintAscii
.1580					_EHNoLine:
.1580	a2 06		ldx #$06		ldx	#6
.1582	20 f6 14	jsr $14f6		jsr	deviceHandler
.1585	a2 04		ldx #$04		ldx	#4
.1587	20 1c 24	jsr $241c		jsr	interactionHandler
.158a					EHAtMsg:
>158a	03 20 40 20					.text 	3," @ "

;******  Processing file: error/../generated/errortext.inc

.158e					ErrorTextList:
>158e	13 46 65 61 74 75 72 65			.text 19,"Feature not Present"
>1596	20 6e 6f 74 20 50 72 65 73 65 6e 74
>15a2	0c 53 79 6e 74 61 78 20			.text 12,"Syntax Error"
>15aa	45 72 72 6f 72
>15af	0f 4d 6f 64 75 6c 65 20			.text 15,"Module disabled"
>15b7	64 69 73 61 62 6c 65 64
>15bf	10 41 73 73 65 72 74 69			.text 16,"Assertion failed"
>15c7	6f 6e 20 66 61 69 6c 65 64
>15d0	0e 44 69 76 69 64 65 20			.text 14,"Divide By Zero"
>15d8	42 79 20 5a 65 72 6f
>15df	04 53 74 6f 70				.text 4,"Stop"
>15e4	0d 54 79 70 65 20 4d 69			.text 13,"Type Mismatch"
>15ec	73 6d 61 74 63 68
>15f2	0d 49 6c 6c 65 67 61 6c			.text 13,"Illegal Value"
>15fa	20 56 61 6c 75 65
>1600	15 4d 69 73 73 69 6e 67			.text 21,"Missing right bracket"
>1608	20 72 69 67 68 74 20 62 72 61 63 6b 65 74
>1616	0d 4d 69 73 73 69 6e 67			.text 13,"Missing comma"
>161e	20 63 6f 6d 6d 61
>1624	11 4d 69 73 73 69 6e 67			.text 17,"Missing reference"
>162c	20 72 65 66 65 72 65 6e 63 65
>1636	15 4c 69 6e 65 20 4e 75			.text 21,"Line Number not found"
>163e	6d 62 65 72 20 6e 6f 74 20 66 6f 75 6e 64
>164c	0f 53 74 72 69 6e 67 20			.text 15,"String too long"
>1654	74 6f 6f 20 6c 6f 6e 67
>165c	14 52 45 54 55 52 4e 20			.text 20,"RETURN without GOSUB"
>1664	77 69 74 68 6f 75 74 20 47 4f 53 55 42
>1671	14 55 4e 54 49 4c 20 77			.text 20,"UNTIL without REPEAT"
>1679	69 74 68 6f 75 74 20 52 45 50 45 41 54
>1686	10 4e 45 58 54 20 77 69			.text 16,"NEXT without FOR"
>168e	74 68 6f 75 74 20 46 4f 52
>1697	12 57 45 4e 44 20 77 69			.text 18,"WEND without WHILE"
>169f	74 68 6f 75 74 20 57 48 49 4c 45
>16aa	14 45 4e 44 50 52 4f 43			.text 20,"ENDPROC without PROC"
>16b2	20 77 69 74 68 6f 75 74 20 50 52 4f 43
>16bf	0e 42 61 64 20 4e 45 58			.text 14,"Bad NEXT index"
>16c7	54 20 69 6e 64 65 78
>16ce	17 53 74 72 75 63 74 75			.text 23,"Structures nested wrong"
>16d6	72 65 73 20 6e 65 73 74 65 64 20 77 72 6f 6e 67
>16e6	16 43 61 6e 6e 6f 74 20			.text 22,"Cannot create variable"
>16ee	63 72 65 61 74 65 20 76 61 72 69 61 62 6c 65
>16fd	19 52 65 74 75 72 6e 20			.text 25,"Return stack out of space"
>1705	73 74 61 63 6b 20 6f 75 74 20 6f 66 20 73 70 61
>1715	63 65
>1717	11 55 6e 6b 6e 6f 77 6e			.text 17,"Unknown Procedure"
>171f	20 50 72 6f 63 65 64 75 72 65
>1729	17 50 61 72 61 6d 65 74			.text 23,"Parameters do not match"
>1731	65 72 73 20 64 6f 20 6e 6f 74 20 6d 61 74 63 68
>1741	15 41 72 72 61 79 20 61			.text 21,"Array already defined"
>1749	6c 72 65 61 64 79 20 64 65 66 69 6e 65 64
>1757	12 44 49 4d 20 72 65 71			.text 18,"DIM requires array"
>175f	75 69 72 65 73 20 61 72 72 61 79
>176a	0f 42 61 64 20 61 72 72			.text 15,"Bad array index"
>1772	61 79 20 69 6e 64 65 78
>177a	1d 57 72 6f 6e 67 20 6e			.text 29,"Wrong number of array indices"
>1782	75 6d 62 65 72 20 6f 66 20 61 72 72 61 79 20 69
>1792	6e 64 69 63 65 73
>1798	0b 4f 75 74 20 6f 66 20			.text 11,"Out of data"
>17a0	64 61 74 61
>17a4	14 43 61 6e 6e 6f 74 20			.text 20,"Cannot tokenise line"
>17ac	74 6f 6b 65 6e 69 73 65 20 6c 69 6e 65
>17b9	0b 53 61 76 65 20 66 61			.text 11,"Save failed"
>17c1	69 6c 65 64
>17c5	0b 4c 6f 61 64 20 66 61			.text 11,"Load failed"
>17cd	69 6c 65 64
>17d1	05 42 72 65 61 6b			.text 5,"Break"
>17d7	0d 4f 75 74 20 6f 66 20			.text 13,"Out of memory"
>17df	6d 65 6d 6f 72 79
>17e5	16 45 78 70 72 65 73 73			.text 22,"Expression too complex"
>17ed	69 6f 6e 20 74 6f 6f 20 63 6f 6d 70 6c 65 78
>17fc	10 42 61 64 20 4f 70 65			.text 16,"Bad Operand/Mode"
>1804	72 61 6e 64 2f 4d 6f 64 65
>180d	13 42 72 61 6e 63 68 20			.text 19,"Branch out of range"
>1815	6f 75 74 20 6f 66 20 72 61 6e 67 65
>1821	13 4c 61 62 65 6c 20 63			.text 19,"Label changed value"
>1829	68 61 6e 67 65 64 20 76 61 6c 75 65
>1835	12 4e 6f 20 53 70 72 69			.text 18,"No Sprite Selected"
>183d	74 65 20 53 65 6c 65 63 74 65 64
>1848	08 48 61 72 64 77 61 72			.text 8,"Hardware"
>1850	65
>1851	00					.byte 0

;******  Return to file: error/errorhandler.asm

.1852					EHPrintAscii:
.1852	a0 00		ldy #$00			ldy 	#0
.1854	b1 2a		lda ($2a),y			lda 	(temp0),y
.1856	aa		tax				tax
.1857	f0 0f		beq $1868			beq 	_EHPExit
.1859					_EHPLoop:
.1859	c8		iny				iny
.185a	8a		txa				txa
.185b	48		pha				pha
.185c	b1 2a		lda ($2a),y			lda 	(temp0),y
.185e	a2 16		ldx #$16		ldx	#22
.1860	20 f6 14	jsr $14f6		jsr	deviceHandler
.1863	68		pla				pla
.1864	aa		tax				tax
.1865	ca		dex				dex
.1866	d0 f1		bne $1859			bne 	_EHPLoop
.1868					_EHPExit:
.1868	60		rts				rts

;******  Return to file: error/error.asm


;******  Return to file: basic.asm

.1869					section_end_error:
.1869					section_start_extension:

;******  Processing file: extension/extension.asm


;******  Processing file: extension/extensionhandler.asm

.1869					ExtensionHandler:
.1869	c9 fe		cmp #$fe			cmp 	#$FE 						; check for force mode 0
.186b	f0 16		beq $1883			beq 	_ExtensionForce
.186d	c9 ff		cmp #$ff			cmp 	#$FF						; A = $FF command, otherwise unary function stack level.
.186f	d0 08		bne $1879			bne 	_ExtensionUnary 			; is passed in A.
.1871	b1 28		lda ($28),y			lda 	(codePtr),y 				; so this is a command, using Group 2.
.1873	c8		iny				iny
.1874	0a		asl a				asl 	a
.1875	aa		tax				tax
.1876	7c 7a 18	jmp ($187a,x)			jmp 	(Group2Vectors-12,x)
.1879					_ExtensionUnary:
.1879	48		pha				pha 								; save stack pos in A
.187a	b1 28		lda ($28),y			lda 	(codePtr),y 				; get shifted token, double into X
.187c	c8		iny				iny
.187d	0a		asl a				asl 	a
.187e	aa		tax				tax
.187f	68		pla				pla 								; restore stack pos and call group3 command.
.1880	7c 90 18	jmp ($1890,x)			jmp 	(Group3Vectors-12,X)
.1883					_ExtensionForce:
.1883	4c 97 1f	jmp $1f97			jmp 	ForceMode0

;******  Processing file: extension/../generated/tokenvectors2.inc

.1886					Group2Vectors:
>1886	c9 20					.word	Command_VPoke            ; $86 vpoke
>1888	cc 20					.word	Command_VDoke            ; $87 vdoke
>188a	a1 20					.word	Command_VLoad            ; $88 vload
>188c	a9 1f					.word	CommandMode              ; $89 mode
>188e	6a 20					.word	CommandPalette           ; $8a palette
>1890	94 1d					.word	CommandSprite            ; $8b sprite
>1892	66 20					.word	CommandClg               ; $8c clg
>1894	ac 19					.word	Command_Rect             ; $8d rect
>1896	b4 19					.word	Command_Frame            ; $8e frame
>1898	5e 2e					.word	Unimplemented            ; $8f draw
>189a	5e 2e					.word	Unimplemented            ; $90 text

;******  Return to file: extension/extensionhandler.asm


;******  Processing file: extension/../generated/tokenvectors3.inc

.189c					Group3Vectors:
>189c	15 21					.word	Command_VPeek            ; $86 vpeek(
>189e	18 21					.word	Command_VDeek            ; $87 vdeek(
>18a0	67 1f					.word	Sprite_GetX              ; $88 sprite.x(
>18a2	6a 1f					.word	Sprite_GetY              ; $89 sprite.y(
>18a4	d7 1c					.word	FunctionCollide          ; $8a hit(
>18a6	4f 1c					.word	Unary_JoyX               ; $8b joy.x(
>18a8	52 1c					.word	Unary_JoyY               ; $8c joy.y(
>18aa	8d 1c					.word	Unary_JButton            ; $8d joy.b(
>18ac	22 1c					.word	Unary_Clock              ; $8e clock(

;******  Return to file: extension/extensionhandler.asm

.18ae					XEvaluateInteger:
.18ae	8a		txa				txa
.18af	a2 0a		ldx #$0a		ldx	#10
.18b1	20 b8 3a	jsr $3ab8		jsr	mainHandler
.18b4	aa		tax				tax
.18b5	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/graphics/general.asm

.0be6					gStartStorage:
.0be6					gCurrentXPos:
>0be6							.fill 	2 							; copying the coordinate here, and into x2, and the old
.0be8					gCurrentYPos:
>0be8							.fill 	2
.0bea					gX1:
>0bea							.fill 	2		 					; most recently used. x2,y2 are the most recently used.
.0bec					gY1:
>0bec							.fill 	2
.0bee					gX2:
>0bee							.fill 	2
.0bf0					gY2:
>0bf0							.fill 	2
.0bf2					gModifiers:
.0bf2					gInk:
>0bf2							.fill 	1
.0bf3					gPaper:
>0bf3							.fill 	1
.0bf4					gSize:
>0bf4							.fill 	1
.0bf5					gImage:
>0bf5							.fill 	1
.0bf6					gFlip:
>0bf6							.fill 	1
.0bf7					gWordHandler:
>0bf7							.fill 	2
.0bf9					gEndStorage:
.18b6					GResetStorage:
.18b6	8a		txa				txa
.18b7	48		pha				pha
.18b8	a2 12		ldx #$12			ldx 	#gEndStorage-gStartStorage-1 ; fill all storage for gfx with 0
.18ba	a9 00		lda #$00			lda 	#0
.18bc					_GRSLoop:
.18bc	9d e6 0b	sta $0be6,x			sta 	gStartStorage,x
.18bf	ca		dex				dex
.18c0	10 fa		bpl $18bc			bpl 	_GRSLoop
.18c2	ee f2 0b	inc $0bf2			inc 	gInk 						; make ink 1.
.18c5	68		pla				pla
.18c6	aa		tax				tax
.18c7	60		rts				rts
.18c8					GHandler:
.18c8	8e f8 0b	stx $0bf8			stx 	gWordHandler+1 				; save code that draws the actual line or whatever.
.18cb	8d f7 0b	sta $0bf7			sta 	gWordHandler
.18ce	88		dey				dey 								; predecrement
.18cf					_GHLoopNext:
.18cf	c8		iny				iny									; advance one character
.18d0					_GHLoop:
.18d0	b1 28		lda ($28),y			lda 	(codePtr),y 				; look at character.
.18d2	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; , go to next
.18d4	f0 f9		beq $18cf			beq 	_GHLoopNext
.18d6	c9 80		cmp #$80			cmp 	#TOK_EOL 					; end of line or : , exit
.18d8	f0 58		beq $1932			beq 	_GHExit
.18da	c9 ca		cmp #$ca			cmp 	#TKW_COLON
.18dc	f0 54		beq $1932			beq 	_GHExit
.18de	c9 db		cmp #$db			cmp 	#TKW_AT 					; have we found AT or TO
.18e0	f0 3f		beq $1921			beq 	_GHCallHandler 				; update post & call the handler
.18e2	c9 ce		cmp #$ce			cmp 	#TKW_TO
.18e4	f0 3b		beq $1921			beq 	_GHCallHandler
.18e6	c9 e6		cmp #$e6			cmp 	#TKW_FROM
.18e8	f0 10		beq $18fa			beq 	_GHCPairSkip
.18ea	a2 00		ldx #$00			ldx 	#0 							; now see if it matches a token modifier (INK,PAPER etc.)
.18ec					_GHCheckTokens:
.18ec	b1 28		lda ($28),y			lda 	(codePtr),y
.18ee	dd 33 19	cmp $1933,x			cmp 	_GHTokenTable,x
.18f1	f0 0e		beq $1901			beq 	_GHFoundToken
.18f3	e8		inx				inx
.18f4	bd 33 19	lda $1933,x			lda 	_GHTokenTable,x
.18f7	d0 f3		bne $18ec			bne 	_GHCheckTokens
.18f9	88		dey				dey
.18fa					_GHCPairSkip:
.18fa	c8		iny				iny
.18fb					_GHCPair:
.18fb	20 39 19	jsr $1939			jsr 	GHMakeCurrent 				; should be a coordinate pair then.
.18fe	4c d0 18	jmp $18d0			jmp 	_GHLoop
.1901					_GHFoundToken:
.1901	c8		iny				iny 								; skip token (INK/PAPER etc.)
.1902	8a		txa				txa
.1903	48		pha				pha
.1904	a9 00		lda #$00			lda 	#0 							; evaluate byte
.1906	a2 0c		ldx #$0c		ldx	#12
.1908	20 b8 3a	jsr $3ab8		jsr	mainHandler
.190b	68		pla				pla
.190c	aa		tax				tax
.190d	a5 98		lda $98				lda 	esInt0 						; get evaluated value
.190f	9d f2 0b	sta $0bf2,x			sta 	gModifiers,x 				; update the modifiers
.1912	ad f2 0b	lda $0bf2			lda 	gInk 						; update driver ink and paper.
.1915	20 0c 1c	jsr $1c0c			jsr 	gdSetInk
.1918	ad f3 0b	lda $0bf3			lda 	gPaper
.191b	20 10 1c	jsr $1c10			jsr 	gdSetPaper
.191e	4c d0 18	jmp $18d0			jmp 	_GHLoop 					; and loop back
.1921					_GHCallHandler:
.1921	c8		iny				iny 								; consume AT or TO.
.1922	20 39 19	jsr $1939			jsr 	GHMakeCurrent 				; update the coordinates.
.1925	98		tya				tya
.1926	48		pha				pha
.1927	20 2f 19	jsr $192f			jsr 	_GHCallHandlerCode 			; call the handler code
.192a	68		pla				pla
.192b	a8		tay				tay
.192c	4c d0 18	jmp $18d0			jmp 	_GHLoop 					; and loop round.
.192f					_GHCallHandlerCode:
.192f	6c f7 0b	jmp ($0bf7)			jmp 	(gWordHandler)
.1932					_GHExit:
.1932	60		rts				rts
.1933					_GHTokenTable:
>1933	e1 e2 d2 da dc					.byte 	TKW_INK,TKW_PAPER,TKW_DIM,TKW_IMAGE,TKW_FLIP
>1938	00						.byte 	0
.1939					GHMakeCurrent:
.1939	8a		txa				txa
.193a	48		pha				pha
.193b	a2 00		ldx #$00			ldx 	#0 							; do for 0 offset (X)
.193d	20 4d 19	jsr $194d			jsr 	_GHMCDoIt
.1940	a2 02		ldx #$02		ldx	#2
.1942	20 b8 3a	jsr $3ab8		jsr	mainHandler
.1945	a2 02		ldx #$02			ldx 	#2 							; do for 2 offset (Y)
.1947	20 4d 19	jsr $194d			jsr 	_GHMCDoIt
.194a	68		pla				pla
.194b	aa		tax				tax
.194c	60		rts				rts
.194d					_GHMCDoIt:
.194d	bd e6 0b	lda $0be6,x			lda 	gCurrentXPos,x 				; copy the current position to X,Y
.1950	9d ea 0b	sta $0bea,x			sta 	gX1,x
.1953	bd e7 0b	lda $0be7,x			lda 	gCurrentXPos+1,x
.1956	9d eb 0b	sta $0beb,x			sta 	gX1+1,x
.1959	8a		txa				txa
.195a	48		pha				pha
.195b	a9 00		lda #$00			lda 	#0 							; evaluate the parameter, now in esInt0,esInt1
.195d	a2 0a		ldx #$0a		ldx	#10
.195f	20 b8 3a	jsr $3ab8		jsr	mainHandler
.1962	68		pla				pla
.1963	aa		tax				tax
.1964	a5 98		lda $98				lda 	esInt0
.1966	9d e6 0b	sta $0be6,x			sta 	gCurrentXPos,x
.1969	9d ee 0b	sta $0bee,x			sta 	gX2,x
.196c	a5 a0		lda $a0				lda 	esInt1
.196e	9d e7 0b	sta $0be7,x			sta 	gCurrentXPos+1,x
.1971	9d ef 0b	sta $0bef,x			sta 	gX2+1,x
.1974	a5 a8		lda $a8				lda 	esInt2 						; check reasonable range.
.1976	05 b0		ora $b0				ora 	esInt3
.1978	d0 01		bne $197b			bne 	_GMHCRange
.197a	60		rts				rts
.197b					_GMHCRange:
.197b	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.197d	20 18 15	jsr $1518		jsr	errorHandler
.1980					GCompareCoords:
.1980	bd ea 0b	lda $0bea,x			lda 	gx1,x
.1983	d9 ea 0b	cmp $0bea,y			cmp 	gx1,y
.1986	bd eb 0b	lda $0beb,x			lda 	gx1+1,x
.1989	f9 eb 0b	sbc $0beb,y			sbc 	gx1+1,y
.198c	60		rts				rts
.198d					GSortMinMaxCoords:
.198d	90 1c		bcc $19ab			bcc 	GSMMCExit
.198f	bd ea 0b	lda $0bea,x			lda 	gx1,x
.1992	48		pha				pha
.1993	b9 ea 0b	lda $0bea,y			lda 	gx1,y
.1996	9d ea 0b	sta $0bea,x			sta 	gx1,x
.1999	68		pla				pla
.199a	99 ea 0b	sta $0bea,y			sta 	gx1,y
.199d	bd eb 0b	lda $0beb,x			lda 	gx1+1,x
.19a0	48		pha				pha
.19a1	b9 eb 0b	lda $0beb,y			lda 	gx1+1,y
.19a4	9d eb 0b	sta $0beb,x			sta 	gx1+1,x
.19a7	68		pla				pla
.19a8	99 eb 0b	sta $0beb,y			sta 	gx1+1,y
.19ab					GSMMCExit:
.19ab	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/graphics/rectframe.asm

.19ac					Command_Rect:
.19ac	a9 bd		lda #$bd			lda 	#RectHandler & $FF
.19ae	a2 19		ldx #$19			ldx 	#RectHandler >> 8
.19b0	20 c8 18	jsr $18c8			jsr 	GHandler
.19b3	60		rts				rts
.19b4					Command_Frame:
.19b4	a9 bc		lda #$bc			lda 	#FrameHandler & $FF
.19b6	a2 19		ldx #$19			ldx 	#FrameHandler >> 8
.19b8	20 c8 18	jsr $18c8			jsr 	GHandler
.19bb	60		rts				rts
.19bc					FrameHandler:
.19bc	ea		nop				nop
.19bd					RectHandler:
.19bd	20 61 1a	jsr $1a61			jsr 	BoxSort 					; sort so topleft/bottom right
.19c0	20 ed 19	jsr $19ed			jsr 	DrawBoxPart 				; solid first line
.19c3	b0 27		bcs $19ec			bcs 	_FHExit
.19c5					_FHLoop:
.19c5	a2 02		ldx #$02			ldx 	#gY1-gX1 					; check Y1 = Y2
.19c7	a0 06		ldy #$06			ldy 	#gY2-gX1
.19c9	20 54 1a	jsr $1a54			jsr 	CompareCoords
.19cc	b0 1b		bcs $19e9			bcs 	_FHLastLine 				; Y1 >= Y2 then end.
.19ce	ad f7 0b	lda $0bf7			lda 	gWordHandler 				; identify solid or frame ?
.19d1	c9 bd		cmp #$bd			cmp 	#RectHandler & $FF
.19d3	f0 06		beq $19db			beq 	_FHIsSolidRect
.19d5	20 09 1a	jsr $1a09			jsr 	DrawBoxEnds
.19d8	4c de 19	jmp $19de			jmp 	_FHNext
.19db					_FHIsSolidRect:
.19db	20 ed 19	jsr $19ed			jsr 	DrawBoxPart
.19de					_FHNext:
.19de	ee ec 0b	inc $0bec			inc 	gY1 						; bump Y1 and loop back.
.19e1	d0 e2		bne $19c5			bne 	_FHLoop
.19e3	ee ed 0b	inc $0bed			inc 	gY1+1
.19e6	4c c5 19	jmp $19c5			jmp 	_FHLoop
.19e9					_FHLastLine:
.19e9	20 ed 19	jsr $19ed			jsr 	DrawBoxPart 				; solid last line whatever
.19ec					_FHExit:
.19ec	60		rts				rts
.19ed					DrawBoxPart:
.19ed	a0 00		ldy #$00			ldy 	#gX1-gX1
.19ef	20 3e 1a	jsr $1a3e			jsr 	SetupXY 					; set up X1,Y1 to draw.
.19f2	b0 14		bcs $1a08			bcs 	_DBPExit 					; off screen, return with CS.
.19f4	38		sec				sec 								; calculate line length => temp0
.19f5	ad ee 0b	lda $0bee			lda 	gX2
.19f8	ed ea 0b	sbc $0bea			sbc 	gX1
.19fb	48		pha				pha
.19fc	ad ef 0b	lda $0bef			lda 	gX2+1
.19ff	ed eb 0b	sbc $0beb			sbc 	gx1+1
.1a02	aa		tax				tax
.1a03	68		pla				pla 								; line length in XA.
.1a04	20 25 1a	jsr $1a25			jsr 	DrawVerticalLine
.1a07	18		clc				clc
.1a08					_DBPExit:
.1a08	60		rts				rts
.1a09					DrawBoxEnds:
.1a09	a0 00		ldy #$00			ldy 	#gX1-gX1
.1a0b	20 3e 1a	jsr $1a3e			jsr 	SetupXY 					; set up X1,Y1 to draw.
.1a0e	b0 14		bcs $1a24			bcs 	_DBEExit 					; off screen, return with CS.
.1a10	20 6a 1b	jsr $1b6a			jsr 	gdPlotInk 					; LH end.
.1a13	ad ee 0b	lda $0bee			lda 	gX2 						; set position to X2,Y1
.1a16	ae ef 0b	ldx $0bef			ldx 	gX2+1
.1a19	20 14 1c	jsr $1c14			jsr 	gdSetX
.1a1c	20 f5 1a	jsr $1af5			jsr 	gdUpdatePixelOffset 		; update position.
.1a1f	b0 03		bcs $1a24			bcs 	_DBEExit 					; off screen, return with CS.
.1a21	20 6a 1b	jsr $1b6a			jsr 	gdPlotInk 					; RH end.
.1a24					_DBEExit:
.1a24	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/graphics/utils.asm

.1a25					DrawVerticalLine:
.1a25	86 2d		stx $2d				stx 	temp1+1
.1a27	85 2c		sta $2c				sta 	temp1
.1a29					_DVLLoop:
.1a29	20 6a 1b	jsr $1b6a			jsr 	gdPlotInk
.1a2c	20 76 1a	jsr $1a76			jsr		gdMvRight
.1a2f	b0 0c		bcs $1a3d			bcs 	_DVLExit
.1a31	a5 2c		lda $2c				lda 	temp1
.1a33	d0 02		bne $1a37			bne 	_DVLNoBorrow
.1a35	c6 2d		dec $2d				dec 	temp1+1
.1a37					_DVLNoBorrow:
.1a37	c6 2c		dec $2c				dec 	temp1
.1a39	a5 2d		lda $2d				lda 	temp1+1
.1a3b	10 ec		bpl $1a29			bpl 	_DVLLoop
.1a3d					_DVLExit:
.1a3d	60		rts				rts
.1a3e					SetupXY:
.1a3e	b9 ea 0b	lda $0bea,y			lda 	gX1,y
.1a41	be eb 0b	ldx $0beb,y			ldx 	gX1+1,y
.1a44	20 14 1c	jsr $1c14			jsr 	gdSetX
.1a47	b9 ec 0b	lda $0bec,y			lda 	gY1,y
.1a4a	be ed 0b	ldx $0bed,y			ldx 	gY1+1,y
.1a4d	20 1b 1c	jsr $1c1b			jsr 	gdSetY
.1a50	20 f5 1a	jsr $1af5			jsr 	gdUpdatePixelOffset
.1a53	60		rts				rts
.1a54					CompareCoords:
.1a54	bd ea 0b	lda $0bea,x			lda 	gX1,x
.1a57	d9 ea 0b	cmp $0bea,y			cmp 	gX1,y
.1a5a	bd eb 0b	lda $0beb,x			lda 	gX1+1,x
.1a5d	f9 eb 0b	sbc $0beb,y			sbc 	gX1+1,y
.1a60	60		rts				rts
.1a61					BoxSort:
.1a61	a2 00		ldx #$00			ldx 	#gx1-gx1
.1a63	a0 04		ldy #$04			ldy 	#gx2-gx1
.1a65	20 80 19	jsr $1980			jsr 	GCompareCoords
.1a68	20 8d 19	jsr $198d			jsr 	GSortMinMaxCoords
.1a6b	a2 02		ldx #$02			ldx 	#gy1-gx1
.1a6d	a0 06		ldy #$06			ldy 	#gy2-gx1
.1a6f	20 80 19	jsr $1980			jsr 	GCompareCoords
.1a72	20 8d 19	jsr $198d			jsr 	GSortMinMaxCoords
.1a75	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/driver/coords.asm

.1a76					gdMvRight:
.1a76	ee 20 9f	inc $9f20			inc 	$9F20 						; bump $9F20
.1a79	d0 08		bne $1a83			bne 	_gdMR0
.1a7b	ee 21 9f	inc $9f21			inc 	$9F21
.1a7e	d0 03		bne $1a83			bne 	_gdMR0
.1a80	ee 22 9f	inc $9f22			inc 	$9F22
.1a83					_gdMR0:
.1a83	ee ff 0b	inc $0bff			inc 	gdXPos
.1a86	d0 03		bne $1a8b			bne 	_gdMR1
.1a88	ee 00 0c	inc $0c00			inc 	gdXPos+1
.1a8b					_gdMR1:
.1a8b	ad 00 0c	lda $0c00			lda 	gdXPos+1		 			; check MSB
.1a8e	f0 0b		beq $1a9b			beq 	gdMOnScreen
.1a90	c9 02		cmp #$02			cmp 	#2
.1a92	b0 09		bcs $1a9d			bcs 	gdmOffScreen
.1a94	ad ff 0b	lda $0bff			lda 	gdXPos 						; $01xx check < $140
.1a97	c9 40		cmp #$40			cmp 	#$40
.1a99	b0 02		bcs $1a9d			bcs 	gdmOffScreen
.1a9b					gdmOnScreen:
.1a9b	18		clc				clc
.1a9c	60		rts				rts
.1a9d					gdmOffScreen:
.1a9d	38		sec				sec
.1a9e	60		rts				rts
.1a9f					gdMvUp:
.1a9f	ad 01 0c	lda $0c01			lda 	gdYPos 						; decrement Y Pos
.1aa2	d0 03		bne $1aa7			bne 	_gdMU1
.1aa4	ce 02 0c	dec $0c02			dec 	gdYPos+1
.1aa7	ce 01 0c	dec $0c01	_gdMU1:	dec 	gdYPos
.1aaa	38		sec				sec 								; adjust position by -320
.1aab	ad 20 9f	lda $9f20			lda 	$9F20
.1aae	e9 40		sbc #$40			sbc 	#64
.1ab0	8d 20 9f	sta $9f20			sta 	$9F20
.1ab3	ad 21 9f	lda $9f21			lda 	$9F21
.1ab6	e9 01		sbc #$01			sbc 	#1
.1ab8	8d 21 9f	sta $9f21			sta 	$9F21
.1abb	ad 22 9f	lda $9f22			lda 	$9F22
.1abe	e9 00		sbc #$00			sbc 	#0
.1ac0	8d 22 9f	sta $9f22			sta 	$9F22
.1ac3	4c e7 1a	jmp $1ae7			jmp 	gdCheckYRange
.1ac6					gdMvDown:
.1ac6	ee 01 0c	inc $0c01			inc 	gdYPos 						; decrement Y Pos
.1ac9	d0 03		bne $1ace			bne 	_gdMU1
.1acb	ee 02 0c	inc $0c02			inc 	gdYPos+1
.1ace					_gdMU1:
.1ace	18		clc				clc 								; adjust position by -320
.1acf	ad 20 9f	lda $9f20			lda 	$9F20
.1ad2	69 40		adc #$40			adc 	#64
.1ad4	8d 20 9f	sta $9f20			sta 	$9F20
.1ad7	ad 21 9f	lda $9f21			lda 	$9F21
.1ada	69 01		adc #$01			adc 	#1
.1adc	8d 21 9f	sta $9f21			sta 	$9F21
.1adf	ad 22 9f	lda $9f22			lda 	$9F22
.1ae2	69 00		adc #$00			adc 	#0
.1ae4	8d 22 9f	sta $9f22			sta 	$9F22
.1ae7					gdCheckYRange:
.1ae7	ad 02 0c	lda $0c02			lda 	gdYPos+1
.1aea	d0 b1		bne $1a9d			bne 	gdmOffScreen
.1aec	ad 01 0c	lda $0c01			lda 	gdYPos
.1aef	c9 c8		cmp #$c8			cmp 	#200
.1af1	b0 aa		bcs $1a9d			bcs 	gdmOffScreen
.1af3	90 a6		bcc $1a9b			bcc 	gdmOnScreen
.1af5					gdUpdatePixelOffset:
.1af5	ad 00 0c	lda $0c00			lda 	gdXPos+1 					; check X < 320 ($140)
.1af8	f0 0b		beq $1b05			beq 	_gdUPOCheckY
.1afa	c9 02		cmp #$02			cmp 	#2
.1afc	b0 13		bcs $1b11			bcs 	_gdUPOBad
.1afe	ad ff 0b	lda $0bff			lda 	gdXPos
.1b01	c9 40		cmp #$40			cmp 	#$40
.1b03	b0 0c		bcs $1b11			bcs 	_gdUPOBad
.1b05					_gdUPOCheckY:
.1b05	ad 02 0c	lda $0c02			lda 	gdYPos+1 					; check Y < 200
.1b08	d0 0e		bne $1b18			bne 	_gdUPOCalculate
.1b0a	ad 01 0c	lda $0c01			lda 	gdYPos
.1b0d	c9 c8		cmp #$c8			cmp 	#200
.1b0f	90 07		bcc $1b18			bcc 	_gdUPOCalculate
.1b11					_gdUPOBad:
.1b11	a9 00		lda #$00			lda 	#0
.1b13	8d 03 0c	sta $0c03			sta 	gdIsPosOkay
.1b16	38		sec				sec
.1b17	60		rts				rts
.1b18					_gdUPOCalculate:
.1b18	a9 00		lda #$00			lda 	#0 							; temp0 is LSB of result start as 256 x Y
.1b1a	85 2a		sta $2a				sta 	temp0
.1b1c	ad 01 0c	lda $0c01			lda 	gdYPos
.1b1f	85 2b		sta $2b				sta 	temp0+1
.1b21	46 2b		lsr $2b				lsr 	temp0+1 					; / 4 so temp0 is YC x 64
.1b23	66 2a		ror $2a				ror 	temp0
.1b25	46 2b		lsr $2b				lsr 	temp0+1
.1b27	66 2a		ror $2a				ror 	temp0
.1b29	ad 01 0c	lda $0c01			lda 	gdYPos 						; add 256 x Y => 320 * Y < 64k
.1b2c	18		clc				clc
.1b2d	65 2b		adc $2b				adc 	temp0+1
.1b2f	85 2b		sta $2b				sta 	temp0+1 					; temp0 = 320 x Y now add X => pixeloffset
.1b31	18		clc				clc
.1b32	a5 2a		lda $2a				lda 	temp0
.1b34	6d ff 0b	adc $0bff			adc 	gdXPos
.1b37	8d fd 0b	sta $0bfd			sta 	gdPixelOffset
.1b3a	a5 2b		lda $2b				lda 	temp0+1
.1b3c	6d 00 0c	adc $0c00			adc 	gdXPos+1
.1b3f	8d fe 0b	sta $0bfe			sta 	gdPixelOffset+1
.1b42	a9 01		lda #$01			lda 	#1 							; it's legitimate.
.1b44	8d 03 0c	sta $0c03			sta 	gdIsPosOkay
.1b47	20 4c 1b	jsr $1b4c			jsr 	gdCopyPosition 				; copy position over
.1b4a	18		clc				clc
.1b4b	60		rts				rts
.1b4c					gdCopyPosition:
.1b4c	48		pha				pha
.1b4d	18		clc				clc
.1b4e	ad fa 0b	lda $0bfa			lda 	gdBitmapAddress
.1b51	6d fd 0b	adc $0bfd			adc 	gdPixelOffset
.1b54	8d 20 9f	sta $9f20			sta 	$9F20
.1b57	ad fb 0b	lda $0bfb			lda 	gdBitmapAddress+1
.1b5a	6d fe 0b	adc $0bfe			adc 	gdPixelOffset+1
.1b5d	8d 21 9f	sta $9f21			sta 	$9F21
.1b60	ad fc 0b	lda $0bfc			lda 	gdBitmapAddress+2
.1b63	69 00		adc #$00			adc 	#0
.1b65	8d 22 9f	sta $9f22			sta 	$9F22
.1b68	68		pla				pla
.1b69	60		rts				rts
.1b6a					gdPlotInk:
.1b6a	ad 04 0c	lda $0c04			lda 	gdInk
.1b6d	8d 23 9f	sta $9f23			sta 	$9F23
.1b70	60		rts				rts
.1b71					gdPlotPaper:
.1b71	ad 05 0c	lda $0c05			lda 	gdPaper
.1b74	c9 ff		cmp #$ff			cmp 	#$FF
.1b76	f0 03		beq $1b7b			beq 	_gdPPSkip
.1b78	8d 23 9f	sta $9f23			sta 	$9F23
.1b7b					_gdPPSkip:
.1b7b	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/driver/driver.asm

.0bf9					gdEnabled:
>0bf9							.fill 	1
.0bfa					gdBitmapAddress:
>0bfa							.fill 	3
.0bfd					gdPixelOffset:
>0bfd							.fill 	2
.0bff					gdXPos:
>0bff							.fill 	2
.0c01					gdYPos:
>0c01							.fill 	2
.0c03					gdIsPosOkay:
>0c03							.fill 	1
.0c04					gdInk:
>0c04							.fill 	1
.0c05					gdPaper:
>0c05							.fill 	1
.1b7c					gdModeChanged:
.1b7c	8a		txa				txa
.1b7d	48		pha				pha
.1b7e	98		tya				tya
.1b7f	48		pha				pha
.1b80	a9 00		lda #$00			lda 	#0 							; zero the enabled flag.
.1b82	8d f9 0b	sta $0bf9			sta 	gdEnabled
.1b85	ad 2a 9f	lda $9f2a			lda 	$9F2A 						; requires $40 for H/V Scale
.1b88	c9 40		cmp #$40			cmp 	#$40
.1b8a	d0 1f		bne $1bab			bne 	_gdExit
.1b8c	ad 2b 9f	lda $9f2b			lda 	$9F2B
.1b8f	c9 40		cmp #$40			cmp 	#$40
.1b91	d0 18		bne $1bab			bne 	_gdExit
.1b93	ad 29 9f	lda $9f29			lda 	$9F29 						; read DC_Video, see which layers are enabled.
.1b96	0a		asl a				asl 	a 							;
.1b97	0a		asl a				asl 	a 							; bit 7 now set if layer 1 enabled.
.1b98	10 09		bpl $1ba3			bpl 	_gdNotLayer1
.1b9a	48		pha				pha 								; save A
.1b9b	a2 07		ldx #$07			ldx 	#7 							; check offset 7 (e.g. start at $9F34)
.1b9d	20 b3 1b	jsr $1bb3			jsr 	gdCheckBitmap 				; go see if this is a bitmap
.1ba0	68		pla				pla 								; restore A
.1ba1	b0 08		bcs $1bab			bcs 	_gdExit 					; if successful then exit
.1ba3					_gdNotLayer1:
.1ba3	0a		asl a				asl 	a 							; bit 7 now set if layer 0 enabled.
.1ba4	10 05		bpl $1bab			bpl 	_gdExit 					; if not enabled, exit
.1ba6	a2 00		ldx #$00			ldx 	#0 							; check offset 0 (e.g. start at $9F2D)
.1ba8	20 b3 1b	jsr $1bb3			jsr 	gdCheckBitmap 				; go see if this is a bitmap
.1bab					_gdExit:
.1bab	20 d0 1b	jsr $1bd0			jsr 	gdClearGraphics 			; clear graphics display.
.1bae	68		pla				pla
.1baf	a8		tay				tay
.1bb0	68		pla				pla
.1bb1	aa		tax				tax
.1bb2	60		rts				rts
.1bb3					gdCheckBitmap:
.1bb3	bd 2d 9f	lda $9f2d,x			lda 	$9F2D,x 					; look at bitmap bit.
.1bb6	c9 07		cmp #$07			cmp 	#7 							; must be zero map size, bitmap and 8bpp
.1bb8	d0 14		bne $1bce			bne 	_gdCBFail
.1bba	ee f9 0b	inc $0bf9			inc 	gdEnabled 					; set the enabled flag to non zero.
.1bbd	bd 2f 9f	lda $9f2f,x			lda 	$9F2F,x 					; this is the bitmap address / 2
.1bc0	0a		asl a				asl 	a
.1bc1	8d fb 0b	sta $0bfb			sta 	gdBitmapAddress+1
.1bc4	69 00		adc #$00			adc 	#$00 						; set to no move, updated manually.
.1bc6	8d fc 0b	sta $0bfc			sta 	gdBitmapAddress+2
.1bc9	a9 00		lda #$00			lda 	#$00
.1bcb	8d fa 0b	sta $0bfa			sta 	gdBitmapAddress 			; this is a 17 bit address.
.1bce					_gdCBFail:
.1bce	18		clc				clc
.1bcf	60		rts				rts
.1bd0					gdClearGraphics:
.1bd0	8a		txa				txa
.1bd1	48		pha				pha
.1bd2	98		tya				tya
.1bd3	48		pha				pha
.1bd4	ad f9 0b	lda $0bf9			lda 	gdEnabled 					; screen enabled
.1bd7	f0 2e		beq $1c07			beq 	_gdCGExit
.1bd9	a9 00		lda #$00			lda 	#0 							; reset position
.1bdb	8d 03 0c	sta $0c03			sta 	gdIsPosOkay 				; not legal position
.1bde	8d fd 0b	sta $0bfd			sta 	gdPixelOffset 				; zero pixel offset.
.1be1	8d fe 0b	sta $0bfe			sta 	gdPixelOffset+1
.1be4	8d 05 0c	sta $0c05			sta 	gdPaper 					; paper black
.1be7	20 4c 1b	jsr $1b4c			jsr 	gdCopyPosition
.1bea	ad 22 9f	lda $9f22			lda 	$9F22 						; make it autoincrement.
.1bed	09 10		ora #$10			ora 	#$10
.1bef	8d 22 9f	sta $9f22			sta 	$9F22
.1bf2	a9 01		lda #$01			lda 	#1 							; ink white
.1bf4	8d 04 0c	sta $0c04			sta 	gdInk
.1bf7	a0 fa		ldy #$fa			ldy 	#$FA						; 320 x 200 pixels = $FA00
.1bf9	a2 00		ldx #$00			ldx 	#0
.1bfb	ad 05 0c	lda $0c05			lda 	gdPaper
.1bfe					_gdCGLoop1:
.1bfe	8d 23 9f	sta $9f23			sta 	$9F23
.1c01	ca		dex				dex
.1c02	d0 fa		bne $1bfe			bne 	_gdCGLoop1
.1c04	88		dey				dey
.1c05	d0 f7		bne $1bfe			bne 	_gdCGLoop1
.1c07					_gdCGExit:
.1c07	68		pla				pla
.1c08	a8		tay				tay
.1c09	68		pla				pla
.1c0a	aa		tax				tax
.1c0b	60		rts				rts
.1c0c					gdSetInk:
.1c0c	8d 04 0c	sta $0c04			sta 	gdInk
.1c0f	60		rts				rts
.1c10					gdSetPaper:
.1c10	8d 05 0c	sta $0c05			sta 	gdPaper
.1c13	60		rts				rts
.1c14					gdSetX:
.1c14	8d ff 0b	sta $0bff			sta 	gdXPos
.1c17	8e 00 0c	stx $0c00			stx 	gdXPos+1
.1c1a	60		rts				rts
.1c1b					gdSetY:
.1c1b	8d 01 0c	sta $0c01			sta 	gdYPos
.1c1e	8e 02 0c	stx $0c02			stx 	gdYPos+1
.1c21	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/miscellany/clock.asm

.1c22					Unary_Clock:
.1c22	a2 0c		ldx #$0c		ldx	#12
.1c24	20 b8 3a	jsr $3ab8		jsr	mainHandler
.1c27	48		pha				pha 								; save stack pos
.1c28	a2 04		ldx #$04		ldx	#4
.1c2a	20 b8 3a	jsr $3ab8		jsr	mainHandler
.1c2d	98		tya				tya
.1c2e	48		pha				pha
.1c2f	20 50 ff	jsr $ff50			jsr 	$FF50
.1c32	68		pla				pla
.1c33	a8		tay				tay
.1c34	68		pla				pla 								; restore, repush, put into X to read offset
.1c35	48		pha				pha
.1c36	aa		tax				tax
.1c37	b5 98		lda $98,x			lda 	esInt0,x 					; must be 0-5
.1c39	c9 06		cmp #$06			cmp 	#6
.1c3b	b0 0d		bcs $1c4a			bcs 	_UCValue
.1c3d	aa		tax				tax 								; index in X and read RTC.
.1c3e	b5 02		lda $02,x			lda 	2,x
.1c40	85 32		sta $32				sta 	tempshort
.1c42	68		pla				pla 								; restore number stack index.
.1c43	aa		tax				tax
.1c44	a5 32		lda $32				lda 	tempShort
.1c46	95 98		sta $98,x			sta 	esInt0,x 					; rest are set up.
.1c48	8a		txa				txa
.1c49	60		rts				rts
.1c4a					_UCValue:
.1c4a	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.1c4c	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/miscellany/joystick.asm

.1c4f					Unary_JoyX:
.1c4f	38		sec				sec
.1c50	b0 01		bcs $1c53			bcs 	JoystickRead
.1c52					Unary_JoyY:
.1c52	18		clc				clc
.1c53					JoystickRead:
.1c53	48		pha				pha 								; save stack position
.1c54	08		php				php 								; save test flag.
.1c55	a2 04		ldx #$04		ldx	#4
.1c57	20 b8 3a	jsr $3ab8		jsr	mainHandler
.1c5a	20 b4 1c	jsr $1cb4			jsr 	ReadJoystick 				; read it.
.1c5d	28		plp				plp
.1c5e	b0 02		bcs $1c62			bcs 	_JRNoShift 					; if Y, shift right twice so accessing Y buttons
.1c60	4a		lsr a				lsr 	a
.1c61	4a		lsr a				lsr 	a
.1c62					_JRNoShift:
.1c62	29 03		and #$03			and 	#3 							; isolate the test bits.
.1c64	f0 0d		beq $1c73			beq 	JoyReturnA 					; if nothing pressed, return A.
.1c66	c9 03		cmp #$03			cmp 	#3
.1c68	f0 07		beq $1c71			beq 	JoyReturnFalse 				; could be both on a keyboard.
.1c6a	4a		lsr a				lsr 	a 							; bit 0 set, its +1
.1c6b	b0 16		bcs $1c83			bcs 	JoyReturn1
.1c6d					JoyReturnTrue:
.1c6d	a9 ff		lda #$ff			lda 	#$FF
.1c6f	d0 02		bne $1c73			bne 	JoyReturnA
.1c71					JoyReturnFalse:
.1c71	a9 00		lda #$00			lda 	#0
.1c73					JoyReturnA:
.1c73	85 32		sta $32				sta 	tempShort 					; return A
.1c75	68		pla				pla
.1c76	aa		tax				tax
.1c77	a5 32		lda $32				lda 	tempShort
.1c79	95 98		sta $98,x			sta 	esInt0,x
.1c7b					JoyReturn13:
.1c7b	95 a0		sta $a0,x			sta 	esInt1,x
.1c7d	95 a8		sta $a8,x			sta 	esInt2,x
.1c7f	95 b0		sta $b0,x			sta 	esInt3,x
.1c81	8a		txa				txa 								; return NSP in A
.1c82	60		rts				rts
.1c83					JoyReturn1:
.1c83	68		pla				pla
.1c84	aa		tax				tax
.1c85	a9 01		lda #$01			lda 	#1
.1c87	95 98		sta $98,x			sta 	esInt0,x
.1c89	a9 00		lda #$00			lda 	#0
.1c8b	f0 ee		beq $1c7b			beq 	JoyReturn13
.1c8d					Unary_JButton:
.1c8d	48		pha				pha 								; save X on stack, put in X
.1c8e	a2 0c		ldx #$0c		ldx	#12
.1c90	20 b8 3a	jsr $3ab8		jsr	mainHandler
.1c93	aa		tax				tax 								; get value to check, push on stack.
.1c94	b5 98		lda $98,x			lda 	esInt0,x
.1c96	c9 04		cmp #$04			cmp 	#4 							; check button 0-3
.1c98	b0 15		bcs $1caf			bcs 	_UJBadValue
.1c9a	69 05		adc #$05			adc 	#5 							; four more shifts to get the bit into carry.
.1c9c	48		pha				pha 								; save that shift count on the stack.
.1c9d	a2 04		ldx #$04		ldx	#4
.1c9f	20 b8 3a	jsr $3ab8		jsr	mainHandler
.1ca2	68		pla				pla
.1ca3	aa		tax				tax
.1ca4	20 b4 1c	jsr $1cb4			jsr 	ReadJoystick 				; joystick read
.1ca7					_UJShift:
.1ca7	4a		lsr a				lsr 	a
.1ca8	ca		dex				dex
.1ca9	d0 fc		bne $1ca7			bne 	_UJShift
.1cab	b0 c0		bcs $1c6d			bcs 	JoyReturnTrue
.1cad	90 c2		bcc $1c71			bcc 	JoyReturnFalse
.1caf					_UJBadValue:
.1caf	a2 28		ldx #$28			ldx 	#ErrorID_Hardware
.1cb1	20 18 15	jsr $1518		jsr	errorHandler
.1cb4					ReadJoystick:
.1cb4	8a		txa				txa
.1cb5	48		pha				pha
.1cb6	98		tya				tya
.1cb7	48		pha				pha
.1cb8	a9 00		lda #$00			lda 	#0
.1cba	20 56 ff	jsr $ff56			jsr 	$FF56
.1cbd	c0 00		cpy #$00			cpy 	#0
.1cbf	d0 11		bne $1cd2			bne 	_RJError
.1cc1	c9 00		cmp #$00			cmp 	#0 							; bug, returns $00 initially
.1cc3	d0 02		bne $1cc7			bne 	_RJNoBug
.1cc5	a9 ff		lda #$ff			lda 	#$FF
.1cc7					_RJNoBug:
.1cc7	85 32		sta $32				sta 	tempShort
.1cc9	68		pla				pla
.1cca	a8		tay				tay
.1ccb	68		pla				pla
.1ccc	aa		tax				tax
.1ccd	a5 32		lda $32				lda 	tempShort
.1ccf	49 ff		eor #$ff			eor 	#$FF 						; active 1 bit.
.1cd1	60		rts				rts
.1cd2					_RJError:
.1cd2	a2 28		ldx #$28			ldx 	#ErrorID_Hardware
.1cd4	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/sprites/collide.asm

.0c06					hitSprite1:
>0c06							.fill 	1 							; this won't work ... if you nest HIT() which
.0c07					hitSprite2:
>0c07							.fill 	1
.0c08					hitRange:
>0c08							.fill 	1
.1cd7					FunctionCollide:
.1cd7	48		pha				pha 								; save and put index into X
.1cd8	aa		tax				tax
.1cd9	a9 00		lda #$00			lda 	#0 							; set hit range to default.
.1cdb	8d 08 0c	sta $0c08			sta 	hitRange
.1cde	20 83 1d	jsr $1d83			jsr 	_FCGetSpriteID
.1ce1	8d 06 0c	sta $0c06			sta 	hitSprite1
.1ce4	8a		txa				txa
.1ce5	48		pha				pha
.1ce6	a2 02		ldx #$02		ldx	#2
.1ce8	20 b8 3a	jsr $3ab8		jsr	mainHandler
.1ceb	68		pla				pla
.1cec	aa		tax				tax
.1ced	20 83 1d	jsr $1d83			jsr 	_FCGetSpriteID
.1cf0	8d 07 0c	sta $0c07			sta 	hitSprite2
.1cf3	b1 28		lda ($28),y			lda 	(codePtr),y 				; is there a third parameter
.1cf5	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.1cf7	f0 13		beq $1d0c			beq 	_FCParam2
.1cf9	8a		txa				txa
.1cfa	48		pha				pha
.1cfb	a2 02		ldx #$02		ldx	#2
.1cfd	20 b8 3a	jsr $3ab8		jsr	mainHandler
.1d00	68		pla				pla
.1d01	a2 0c		ldx #$0c		ldx	#12
.1d03	20 b8 3a	jsr $3ab8		jsr	mainHandler
.1d06	aa		tax				tax
.1d07	b5 98		lda $98,x			lda 	esInt0,x
.1d09	8d 08 0c	sta $0c08			sta 	hitRange
.1d0c					_FCParam2:
.1d0c	a2 04		ldx #$04		ldx	#4
.1d0e	20 b8 3a	jsr $3ab8		jsr	mainHandler
.1d11	68		pla				pla 								; set X to point to the stack again.
.1d12	48		pha				pha
.1d13	aa		tax				tax
.1d14	98		tya				tya
.1d15	48		pha				pha
.1d16	18		clc				clc 								; do it with the horizontal values.
.1d17	20 39 1d	jsr $1d39			jsr 	_FCCheck
.1d1a	90 0a		bcc $1d26			bcc 	_FCFail
.1d1c	38		sec				sec 								; do it with the vertical values.
.1d1d	20 39 1d	jsr $1d39			jsr 	_FCCheck
.1d20	90 04		bcc $1d26			bcc 	_FCFail
.1d22	a9 ff		lda #$ff			lda 	#255 						; pass, return -1
.1d24	d0 02		bne $1d28			bne 	_FCReturnA
.1d26					_FCFail:
.1d26	a9 00		lda #$00			lda 	#0 							; return 0, it didn't work.
.1d28					_FCReturnA:
.1d28	85 32		sta $32				sta 	tempShort 					; put result in tempShort
.1d2a	68		pla				pla
.1d2b	a8		tay				tay
.1d2c	68		pla				pla 								; restore stack, return result and exit.
.1d2d	aa		tax				tax
.1d2e	a5 32		lda $32				lda 	tempShort
.1d30	95 98		sta $98,x			sta 	esInt0,x
.1d32	95 a0		sta $a0,x			sta 	esInt1,x
.1d34	95 a8		sta $a8,x			sta 	esInt2,x
.1d36	95 b0		sta $b0,x			sta 	esInt3,x
.1d38	60		rts				rts
.1d39					_FCCheck:
.1d39	08		php				php 								; save the H/V flag twice
.1d3a	08		php				php
.1d3b	ad 06 0c	lda $0c06			lda 	hitSprite1 					; select sprite 1 and read its location
.1d3e	20 c1 1e	jsr $1ec1			jsr 	SelectSpriteA 				; into X
.1d41	28		plp				plp
.1d42	20 23 1f	jsr $1f23			jsr 	SpriteReadCoordinate
.1d45	ad 07 0c	lda $0c07			lda 	hitSprite2					; now repeat for sprite 2 and location X+1
.1d48	20 c1 1e	jsr $1ec1			jsr 	SelectSpriteA
.1d4b	e8		inx				inx
.1d4c	28		plp				plp
.1d4d	20 23 1f	jsr $1f23			jsr 	SpriteReadCoordinate
.1d50	ca		dex				dex
.1d51	38		sec				sec 								; calculate |s1.c-s2.c| put in temp0
.1d52	b5 98		lda $98,x			lda 	esInt0,x
.1d54	f5 99		sbc $99,x			sbc 	esInt0+1,x
.1d56	85 2a		sta $2a				sta 	temp0
.1d58	b5 a0		lda $a0,x			lda 	esInt1,x
.1d5a	f5 a1		sbc $a1,x			sbc 	esInt1+1,x
.1d5c	85 2b		sta $2b				sta 	temp0+1
.1d5e	10 0d		bpl $1d6d			bpl 	_FCCIsPositive
.1d60	38		sec				sec 								; if -ve calculate |difference|
.1d61	a9 00		lda #$00			lda 	#0
.1d63	e5 2a		sbc $2a				sbc 	temp0
.1d65	85 2a		sta $2a				sta 	temp0
.1d67	a9 00		lda #$00			lda 	#0
.1d69	e5 2b		sbc $2b				sbc 	temp0+1
.1d6b	85 2b		sta $2b				sta 	temp0+1
.1d6d					_FCCIsPositive:
.1d6d	a5 2b		lda $2b				lda 	temp0+1 					; if range >= 256 then definitely fail.
.1d6f	d0 10		bne $1d81			bne 	_FCCFail
.1d71	18		clc				clc 								; work out required min distance which is
.1d72	b5 b0		lda $b0,x			lda 	esInt3,x 					; the sum of the half width/heights
.1d74	75 b1		adc $b1,x			adc 	esInt3+1,x
.1d76	ac 08 0c	ldy $0c08			ldy 	hitRange 					; get the hit range
.1d79	f0 01		beq $1d7c			beq 	_FCCNoSetRange 				; override if non zero.
.1d7b	98		tya				tya
.1d7c					_FCCNoSetRange:
.1d7c	c5 2a		cmp $2a				cmp 	temp0 						; result is range > distance
.1d7e	f0 01		beq $1d81			beq 	_FCCFail
.1d80	60		rts				rts
.1d81					_FCCFail:
.1d81	18		clc				clc
.1d82	60		rts				rts
.1d83					_FCGetSpriteID:
.1d83	8a		txa				txa
.1d84	a2 0c		ldx #$0c		ldx	#12
.1d86	20 b8 3a	jsr $3ab8		jsr	mainHandler
.1d89	aa		tax				tax
.1d8a	b5 98		lda $98,x			lda 	esInt0,x
.1d8c	30 01		bmi $1d8f			bmi 	_FCGSValue
.1d8e	60		rts				rts
.1d8f					_FCGSValue:
.1d8f	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.1d91	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/sprites/sprite.asm

.0c09					currSprite:
>0c09							.fill 	2
.1d94					CommandSprite:
.1d94	20 96 1e	jsr $1e96			jsr 	CSCheckOnOff 				; look for TRUE/FALSE
.1d97	d0 0d		bne $1da6			bne 	_CSCheckClear
.1d99	ad 29 9f	lda $9f29			lda 	$9F29 						; sprite enable is bit 6.
.1d9c	29 bf		and #$bf			and 	#$BF 						; clear it whatever
.1d9e	90 02		bcc $1da2			bcc 	_CSNotOn 					; if CS turn on, so set it
.1da0	09 40		ora #$40			ora 	#$40
.1da2					_CSNotOn:
.1da2	8d 29 9f	sta $9f29			sta 	$9F29 						; write it back in new state and exit
.1da5	60		rts				rts
.1da6					_CSCheckClear:
.1da6	a9 00		lda #$00			lda 	#0 							; no sprite currently selected.
.1da8	8d 0a 0c	sta $0c0a			sta 	currSprite+1
.1dab	b1 28		lda ($28),y			lda 	(codePtr),y 				; check for CLEAR
.1dad	c9 e8		cmp #$e8			cmp 	#TKW_CLEAR
.1daf	d0 05		bne $1db6			bne 	_CSCommandLoop 				; not CLEAR, go to main loop
.1db1	20 a7 1e	jsr $1ea7			jsr 	CSClearSprites 				; clear all the sprites
.1db4	c8		iny				iny 								; consume CLEAR token and exit.
.1db5	60		rts				rts
.1db6					_CSCommandLoop:
.1db6	20 96 1e	jsr $1e96			jsr 	CSCheckOnOff 				; check sprite on/off
.1db9	f0 2c		beq $1de7			beq 	_CSSetVisibility
.1dbb	b1 28		lda ($28),y			lda 	(codePtr),y 				; get and consume character
.1dbd	c9 80		cmp #$80			cmp 	#TOK_EOL					; EOL exit.
.1dbf	f0 25		beq $1de6			beq 	_CSExit
.1dc1	c8		iny				iny									; consume it
.1dc2	c9 ca		cmp #$ca			cmp 	#TKW_COLON 					; colon exit
.1dc4	f0 20		beq $1de6			beq 	_CSExit
.1dc6	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; semantic comma
.1dc8	f0 ec		beq $1db6			beq 	_CSCommandLoop
.1dca	c9 da		cmp #$da			cmp		#TKW_IMAGE 					; image ?
.1dcc	f0 69		beq $1e37			beq 	_CSSetImage
.1dce	c9 dc		cmp #$dc			cmp 	#TKW_FLIP 					; flip ?
.1dd0	f0 2b		beq $1dfd			beq 	_CSSetFlip
.1dd2	c9 ce		cmp #$ce			cmp 	#TKW_TO 					; to ?
.1dd4	f0 46		beq $1e1c			beq 	_CSSetPos
.1dd6	88		dey				dey 								; unpick DEY
.1dd7	a9 00		lda #$00			lda 	#0 							; sprite # now at level 0
.1dd9	a2 0c		ldx #$0c		ldx	#12
.1ddb	20 b8 3a	jsr $3ab8		jsr	mainHandler
.1dde	a5 98		lda $98				lda 	esInt0
.1de0	20 c1 1e	jsr $1ec1			jsr 	SelectSpriteA
.1de3	4c b6 1d	jmp $1db6			jmp 	_CSCommandLoop
.1de6					_CSExit:
.1de6	60		rts				rts
.1de7					_CSSetVisibility:
.1de7	08		php				php 								; save carry
.1de8	a9 06		lda #$06			lda 	#6 							; set pos to offset 6.
.1dea	20 7d 1e	jsr $1e7d			jsr 	SpriteSetTarget
.1ded	ad 23 9f	lda $9f23			lda 	$9F23 						; read it.
.1df0	29 f3		and #$f3			and 	#$F3 						; clear depth bits, disabling it.
.1df2	28		plp				plp
.1df3	90 02		bcc $1df7			bcc 	_CSSetOff 					; check if carry was set
.1df5	09 0c		ora #$0c			ora 	#$0C 						; otherwise set depth bits to 11, on top.
.1df7					_CSSetOff:
.1df7	8d 23 9f	sta $9f23			sta 	$9F23 						; update and loop back
.1dfa	4c b6 1d	jmp $1db6			jmp 	_CSCommandLoop
.1dfd					_CSSetFlip:
.1dfd	a9 00		lda #$00			lda 	#0 							; image # now at level 0
.1dff	a2 0c		ldx #$0c		ldx	#12
.1e01	20 b8 3a	jsr $3ab8		jsr	mainHandler
.1e04	a9 06		lda #$06			lda 	#6 							; set sprite position to +6
.1e06	20 7d 1e	jsr $1e7d			jsr 	SpriteSetTarget
.1e09	a5 98		lda $98				lda 	esInt0 						; flip value & 3 => temp0
.1e0b	29 03		and #$03			and 	#3
.1e0d	85 2a		sta $2a				sta 	temp0
.1e0f	ad 23 9f	lda $9f23			lda 	$9F23 						; update the flip.
.1e12	29 fc		and #$fc			and 	#$FC
.1e14	05 2a		ora $2a				ora 	temp0
.1e16	8d 23 9f	sta $9f23			sta 	$9F23
.1e19	4c b6 1d	jmp $1db6			jmp 	_CSCommandLoop
.1e1c					_CSSetPos:
.1e1c	a9 00		lda #$00			lda 	#0 							; X now at level 0
.1e1e	a2 0a		ldx #$0a		ldx	#10
.1e20	20 b8 3a	jsr $3ab8		jsr	mainHandler
.1e23	a2 02		ldx #$02		ldx	#2
.1e25	20 b8 3a	jsr $3ab8		jsr	mainHandler
.1e28	a9 01		lda #$01			lda 	#1 							; Y now at level 1
.1e2a	a2 0a		ldx #$0a		ldx	#10
.1e2c	20 b8 3a	jsr $3ab8		jsr	mainHandler
.1e2f	a2 00		ldx #$00			ldx 	#0 							; coords at 0,1
.1e31	20 df 1e	jsr $1edf			jsr 	SpriteMove 					; move it.
.1e34	4c b6 1d	jmp $1db6			jmp 	_CSCommandLoop
.1e37					_CSSetImage:
.1e37	a9 00		lda #$00			lda 	#0 							; image # now at level 0
.1e39	a2 0c		ldx #$0c		ldx	#12
.1e3b	20 b8 3a	jsr $3ab8		jsr	mainHandler
.1e3e	a9 00		lda #$00			lda 	#0 							; set sprite position to +0
.1e40	20 7d 1e	jsr $1e7d			jsr 	SpriteSetTarget
.1e43	a6 98		ldx $98				ldx 	esInt0 						; get image # into X
.1e45	bd 50 0c	lda $0c50,x			lda 	imageAddr2Low,x 			; copy low address in.
.1e48	8d 23 9f	sta $9f23			sta 	$9F23
.1e4b	ee 20 9f	inc $9f20			inc 	$9F20 						; bump to offset 1.
.1e4e	bd 10 0c	lda $0c10,x			lda 	imageInfo,x 				; get 4/8 bit flag from info.
.1e51	29 10		and #$10			and 	#$10
.1e53	0a		asl a				asl 	a
.1e54	0a		asl a				asl		a
.1e55	0a		asl a				asl 	a 							; put into bit 7
.1e56	1d 90 0c	ora $0c90,x			ora 	imageAddr2High,x 			; or high address with it.
.1e59	8d 23 9f	sta $9f23			sta 	$9F23 						; write the high byte.
.1e5c	a9 06		lda #$06			lda 	#6
.1e5e	20 7d 1e	jsr $1e7d			jsr 	SpriteSetTarget 			; set sprite on.
.1e61	ad 23 9f	lda $9f23			lda 	$9F23
.1e64	09 0c		ora #$0c			ora 	#$0C
.1e66	8d 23 9f	sta $9f23			sta 	$9F23
.1e69	ee 20 9f	inc $9f20			inc 	$9F20 						; point to byte 7 : height/width/palette offset
.1e6c	bd 10 0c	lda $0c10,x			lda 	imageInfo,x 				; get image info
.1e6f	0a		asl a				asl 	a 							; shift bits 0-3 to 4-7
.1e70	0a		asl a				asl 	a
.1e71	0a		asl a				asl 	a
.1e72	0a		asl a				asl 	a
.1e73	b0 02		bcs $1e77			bcs		_CSNoOffset 				; if bit 4 was set don't set the offset.
.1e75	09 0f		ora #$0f			ora 	#$0F 						; set palette offset and write back
.1e77					_CSNoOffset:
.1e77	8d 23 9f	sta $9f23			sta 	$9F23
.1e7a	4c b6 1d	jmp $1db6			jmp 	_CSCommandLoop
.1e7d					SpriteSetTarget:
.1e7d	0d 09 0c	ora $0c09			ora 	currSprite
.1e80	8d 20 9f	sta $9f20			sta 	$9F20
.1e83	ad 0a 0c	lda $0c0a			lda 	currSprite+1
.1e86	f0 09		beq $1e91			beq 	_SSTNoSet
.1e88	8d 21 9f	sta $9f21			sta 	$9F21
.1e8b	a9 01		lda #$01			lda 	#$01
.1e8d	8d 22 9f	sta $9f22			sta 	$9F22
.1e90	60		rts				rts
.1e91					_SSTNoSet:
.1e91	a2 27		ldx #$27			ldx 	#ErrorID_NoSprite
.1e93	20 18 15	jsr $1518		jsr	errorHandler
.1e96					CSCheckOnOff:
.1e96	b1 28		lda ($28),y			lda 	(codePtr),y 				; get and consume it.
.1e98	c8		iny				iny
.1e99	c9 ab		cmp #$ab			cmp 	#TKW_FALSE					; return CC/EQ if FALSE
.1e9b	18		clc				clc
.1e9c	f0 08		beq $1ea6			beq 	_CSCOExit
.1e9e	c9 aa		cmp #$aa			cmp 	#TKW_TRUE 					; return CS/EQ if TRUE
.1ea0	38		sec				sec 								; return NE if neither.
.1ea1	f0 03		beq $1ea6			beq 	_CSCOExit
.1ea3	88		dey				dey 								; undo consume
.1ea4	c9 aa		cmp #$aa			cmp 	#TKW_TRUE 					; and set NE again, DEY will change it.
.1ea6					_CSCOExit:
.1ea6	60		rts				rts
.1ea7					CSClearSprites:
.1ea7	a9 11		lda #$11			lda 	#$11 						; set address to 1FC00 with single bump
.1ea9	8d 22 9f	sta $9f22			sta 	$9F22
.1eac	a9 fc		lda #$fc			lda 	#$FC
.1eae	8d 21 9f	sta $9f21			sta 	$9F21
.1eb1	a9 00		lda #$00			lda 	#0
.1eb3	8d 20 9f	sta $9f20			sta 	$9F20
.1eb6					_CSClear:
.1eb6	a9 00		lda #$00			lda 	#0 							; set everything to $00
.1eb8	8d 23 9f	sta $9f23			sta 	$9F23
.1ebb	ad 21 9f	lda $9f21			lda 	$9F21
.1ebe	d0 f6		bne $1eb6			bne 	_CSClear
.1ec0	60		rts				rts
.1ec1					SelectSpriteA:
.1ec1	85 2a		sta $2a				sta 	temp0
.1ec3	a9 00		lda #$00			lda 	#0
.1ec5	06 2a		asl $2a				asl		temp0 						; multiply A:esInt0 by 8
.1ec7	b0 11		bcs $1eda			bcs 	_CSBadValue 				; sprites only 0-127
.1ec9	06 2a		asl $2a				asl 	temp0
.1ecb	2a		rol a				rol 	a
.1ecc	06 2a		asl $2a				asl 	temp0
.1ece	2a		rol a				rol 	a
.1ecf	09 fc		ora #$fc			ora 	#$FC 						; MSB of address (barring $01 upper third byte)
.1ed1	8d 0a 0c	sta $0c0a			sta 	currSprite+1
.1ed4	a5 2a		lda $2a				lda 	temp0 						; LSB of address
.1ed6	8d 09 0c	sta $0c09			sta 	currSprite+0
.1ed9	60		rts				rts
.1eda					_CSBadValue
.1eda	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.1edc	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/sprites/spritemove.asm

.1edf					SpriteMove:
.1edf	98		tya				tya
.1ee0	48		pha				pha
.1ee1	a9 07		lda #$07			lda 	#7 									; point to height/width byte and read it.
.1ee3	20 7d 1e	jsr $1e7d			jsr 	SpriteSetTarget
.1ee6	ad 23 9f	lda $9f23			lda 	$9F23
.1ee9	4a		lsr a				lsr 	a 									; A now contains bits 0-1 (width) 2-3 (height)
.1eea	4a		lsr a				lsr 	a
.1eeb	4a		lsr a				lsr 	a
.1eec	4a		lsr a				lsr 	a
.1eed	85 2a		sta $2a				sta 	temp0 								; save these bits so we can work out the centre.
.1eef	a9 02		lda #$02			lda 	#2 									; point to X position.Low
.1ef1	20 7d 1e	jsr $1e7d			jsr 	SpriteSetTarget
.1ef4	20 03 1f	jsr $1f03			jsr 	SMWritePosition 					; write X position out.
.1ef7	46 2a		lsr $2a				lsr 	temp0 								; shift height bits into 0,1
.1ef9	46 2a		lsr $2a				lsr 	temp0
.1efb	e8		inx				inx 										; get the y position
.1efc	20 03 1f	jsr $1f03			jsr 	SMWritePosition 					; and write that out.
.1eff	ca		dex				dex 										; fix X and quit.
.1f00	68		pla				pla
.1f01	a8		tay				tay
.1f02	60		rts				rts
.1f03					SMWritePosition:
.1f03	a5 2a		lda $2a				lda 	temp0 								; get dim size
.1f05	29 03		and #$03			and 	#3 									; in range into Y
.1f07	a8		tay				tay
.1f08	38		sec				sec
.1f09	b5 98		lda $98,x			lda 	esInt0,x
.1f0b	f9 1f 1f	sbc $1f1f,y			sbc 	SMHalfSize,y
.1f0e	8d 23 9f	sta $9f23			sta 	$9F23
.1f11	ee 20 9f	inc $9f20			inc 	$9F20
.1f14	b5 a0		lda $a0,x			lda 	esInt1,x
.1f16	e9 00		sbc #$00			sbc 	#0
.1f18	8d 23 9f	sta $9f23			sta 	$9F23
.1f1b	ee 20 9f	inc $9f20			inc 	$9F20
.1f1e	60		rts				rts
.1f1f					SMHalfSize:
>1f1f	04 08 10 20					.byte 	4,8,16,32 							; half size each dimension.
.1f23					SpriteReadCoordinate:
.1f23	98		tya				tya
.1f24	48		pha				pha
.1f25	08		php				php 										; save CTR on stack
.1f26	a9 07		lda #$07			lda 	#7 									; point to height/width byte and read it.
.1f28	20 7d 1e	jsr $1e7d			jsr 	SpriteSetTarget
.1f2b	ad 23 9f	lda $9f23			lda 	$9F23
.1f2e	4a		lsr a				lsr 	a 									; A now contains bits 0-1 (width) 2-3 (height)
.1f2f	4a		lsr a				lsr 	a
.1f30	4a		lsr a				lsr 	a
.1f31	4a		lsr a				lsr 	a
.1f32	28		plp				plp 										; restore CTS
.1f33	08		php				php
.1f34	90 02		bcc $1f38			bcc 	_SPRCNotY1 							; if it is Y, e.g. CS, shift twice more.
.1f36	4a		lsr a				lsr 	a
.1f37	4a		lsr a				lsr 	a
.1f38					_SPRCNotY1:
.1f38	29 03		and #$03			and 	#3 									; point into half width/height
.1f3a	a8		tay				tay
.1f3b	b9 1f 1f	lda $1f1f,y			lda 	SMHalfSize,y 						; get half size -> esInt3,x
.1f3e	95 b0		sta $b0,x			sta 	esInt3,x
.1f40	28		plp				plp 										; CS Y CC X
.1f41	a9 00		lda #$00			lda 	#0 									; A = 0 X A = 2 Y
.1f43	2a		rol a				rol 	a
.1f44	2a		rol a				rol 	a
.1f45	69 02		adc #$02			adc 	#2 									; A = 2 X A = 4 Y
.1f47	20 7d 1e	jsr $1e7d			jsr 	SpriteSetTarget 					; set data pointer offset by that
.1f4a	18		clc				clc 										; read and unfix centre.
.1f4b	ad 23 9f	lda $9f23			lda 	$9F23
.1f4e	75 b0		adc $b0,x			adc 	esInt3,x
.1f50	95 98		sta $98,x			sta 	esInt0,x
.1f52	ee 20 9f	inc $9f20			inc 	$9F20 								; do MSB
.1f55	ad 23 9f	lda $9f23			lda 	$9F23
.1f58	69 00		adc #$00			adc 	#0
.1f5a	29 0f		and #$0f			and 	#$0F 								; sign extend on bit 11.
.1f5c	c9 08		cmp #$08			cmp		#$08
.1f5e	90 02		bcc $1f62			bcc 	_SPRCNoSX
.1f60	09 f0		ora #$f0			ora 	#$F0
.1f62					_SPRCNoSX:
.1f62	95 a0		sta $a0,x			sta 	esInt1,x
.1f64	68		pla				pla
.1f65	a8		tay				tay
.1f66	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/sprites/spriteutils.asm

.1f67					Sprite_GetX:
.1f67	18		clc				clc
.1f68	90 01		bcc $1f6b			bcc 	SpriteGetCode
.1f6a					Sprite_GetY:
.1f6a	38		sec				sec
.1f6b					SpriteGetCode:
.1f6b	08		php				php 								; CLC : X SEC: Y, save on stack.
.1f6c	48		pha				pha 								; save stack position
.1f6d	20 89 1f	jsr $1f89			jsr 	GetSpriteNumber 			; get # of sprite.
.1f70	a2 04		ldx #$04		ldx	#4
.1f72	20 b8 3a	jsr $3ab8		jsr	mainHandler
.1f75	68		pla				pla
.1f76	aa		tax				tax
.1f77	28		plp				plp 								; which one ?
.1f78	20 23 1f	jsr $1f23			jsr 	SpriteReadCoordinate 		; read appropriate coordinate into esInt0,x
.1f7b	b5 a0		lda $a0,x			lda 	esInt1,x 					; get sign bit, sign extend 16->32 bits
.1f7d	29 80		and #$80			and 	#$80
.1f7f	f0 02		beq $1f83			beq 	_SGXYPos
.1f81	a9 ff		lda #$ff			lda 	#$FF
.1f83					_SGXYPos:
.1f83	95 a8		sta $a8,x			sta 	esInt2,x
.1f85	95 b0		sta $b0,x			sta 	esInt3,x
.1f87	8a		txa				txa 								; return NSP in A
.1f88	60		rts				rts
.1f89					GetSpriteNumber:
.1f89	48		pha				pha
.1f8a	a2 0c		ldx #$0c		ldx	#12
.1f8c	20 b8 3a	jsr $3ab8		jsr	mainHandler
.1f8f	68		pla				pla
.1f90	aa		tax				tax
.1f91	b5 98		lda $98,x			lda 	esInt0,x
.1f93	20 c1 1e	jsr $1ec1			jsr 	SelectSpriteA
.1f96	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/video/mode.asm

.0c0b					currentMode:
>0c0b							.fill 	4
.1f97					ForceMode0:
.1f97	a2 00		ldx #$00			ldx 	#0
.1f99	86 98		stx $98				stx 	esInt0 						; in case we do it.
.1f9b					_FMCheck:
.1f9b	bd 2e 20	lda $202e,x			lda 	CMModeList,x 				; do we need to switch ?
.1f9e	dd 0b 0c	cmp $0c0b,x			cmp 	currentMode,x
.1fa1	d0 13		bne $1fb6			bne 	CMSetMode 					; different so switch.
.1fa3	e8		inx				inx
.1fa4	e0 04		cpx #$04			cpx 	#4
.1fa6	d0 f3		bne $1f9b			bne 	_FMCheck
.1fa8	60		rts				rts
.1fa9					CommandMode:
.1fa9	a9 00		lda #$00			lda 	#0
.1fab	a2 0a		ldx #$0a		ldx	#10
.1fad	20 b8 3a	jsr $3ab8		jsr	mainHandler
.1fb0	a5 b0		lda $b0				lda 	esInt3
.1fb2	29 70		and #$70			and 	#$70
.1fb4	d0 06		bne $1fbc			bne 	CMNoExpand
.1fb6					CMSetMode:
.1fb6	20 0d 20	jsr $200d			jsr 	CMExpandMode
.1fb9	4c d0 1f	jmp $1fd0			jmp 	CMUpdateMode
.1fbc					CMNoExpand:
.1fbc	a5 98		lda $98				lda 	esInt0
.1fbe	8d 0b 0c	sta $0c0b			sta 	currentMode
.1fc1	a5 a0		lda $a0				lda 	esInt1
.1fc3	8d 0c 0c	sta $0c0c			sta 	currentMode+1
.1fc6	a5 a8		lda $a8				lda 	esInt2
.1fc8	8d 0d 0c	sta $0c0d			sta 	currentMode+2
.1fcb	a5 b0		lda $b0				lda 	esInt3
.1fcd	8d 0e 0c	sta $0c0e			sta 	currentMode+3
.1fd0					CMUpdateMode:
.1fd0	a2 11		ldx #$11			ldx 	#$11
.1fd2					_CMClear:
.1fd2	a9 00		lda #$00			lda 	#0
.1fd4	9d 29 9f	sta $9f29,x			sta 	$9F29,X
.1fd7	ca		dex				dex
.1fd8	10 f8		bpl $1fd2			bpl 	_CMClear
.1fda	ad 0e 0c	lda $0c0e			lda 	currentMode+3 				; get current mode
.1fdd	48		pha				pha 								; stack twice.
.1fde	48		pha				pha
.1fdf	29 70		and #$70			and 	#$70 						; isolates bits 6,5,4 (sprites,L1 enable,L0 enable)
.1fe1	09 01		ora #$01			ora 	#$01 						; turn the output on.
.1fe3	8d 29 9f	sta $9f29			sta 	$9F29 						; write to DC_VIDEO
.1fe6	68		pla				pla 								; get back
.1fe7	20 3e 20	jsr $203e			jsr 	CMToScale 					; convert lower 2 bits to a scale.
.1fea	8d 2a 9f	sta $9f2a			sta 	$9F2A 						; write to H-Scale
.1fed	68		pla				pla 								; get back, convert bits 2,3 to a scale.
.1fee	4a		lsr a				lsr 	a
.1fef	4a		lsr a				lsr 	a
.1ff0	20 3e 20	jsr $203e			jsr 	CMToScale 					; convert lower 2 bits to a scale.
.1ff3	8d 2b 9f	sta $9f2b			sta 	$9F2B
.1ff6	a2 00		ldx #$00			ldx 	#0 							; this is offset from $9F2D to do L0
.1ff8	ad 0b 0c	lda $0c0b			lda 	currentMode					; get L0 config byte
.1ffb	20 49 20	jsr $2049			jsr 	CMDecodeLayer 				; and decode layer 0
.1ffe	a2 07		ldx #$07			ldx 	#7 							; when we do layer 1, offset by 7 hence starts at $9F34
.2000	ad 0c 0c	lda $0c0c			lda 	currentMode+1
.2003	20 49 20	jsr $2049			jsr 	CMDecodeLayer
.2006	20 7c 1b	jsr $1b7c			jsr 	gdModeChanged 				; check the bitmap status.
.2009	20 b6 18	jsr $18b6			jsr 	GResetStorage 				; reset the graphics drawing storage.
.200c	60		rts				rts
.200d					CMExpandMode:
.200d	a5 98		lda $98				lda 	esInt0 						; get mode number
.200f	c9 04		cmp #$04			cmp 	#(CMEndModeList-CMModeList) >> 2
.2011	b0 16		bcs $2029			bcs 	_CMModeError
.2013	0a		asl a				asl 	a 							; x 4 into X
.2014	0a		asl a				asl 	a
.2015	aa		tax				tax
.2016	98		tya				tya
.2017	48		pha				pha
.2018	a0 00		ldy #$00			ldy 	#0
.201a					_CMEMCopy:
.201a	bd 2e 20	lda $202e,x			lda 	CMModeList,x
.201d	99 0b 0c	sta $0c0b,y			sta 	currentMode,y
.2020	e8		inx				inx
.2021	c8		iny				iny
.2022	c0 04		cpy #$04			cpy 	#4
.2024	d0 f4		bne $201a			bne 	_CMEMCopy
.2026	68		pla				pla
.2027	a8		tay				tay
.2028	60		rts				rts
.2029					_CMModeError:
.2029	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.202b	20 18 15	jsr $1518		jsr	errorHandler
.202e					CMModeList:
>202e	00 60 00 20					.dword	$20006000 					; Mode 0 which is the standard 80x60 mode, no sprites
>2032	00 60 00 25					.dword 	$25006000					; Mode 1 (40x30)
>2036	00 60 00 2a					.dword 	$2A006000 					; Mode 2 (20x15)
>203a	07 60 00 15					.dword 	$15006007 					; Mode 3 (320x200 256 colour bitmap)
.203e					CMEndModeList:
.203e					CMToScale:
.203e	29 03		and #$03			and 	#3 							; lower 2 bits only
.2040	aa		tax				tax 								; put in X for counting
.2041	a9 00		lda #$00			lda 	#0 							; zero result
.2043	38		sec				sec 								; first time rotate CS in
.2044					_CMTSLoop:
.2044	6a		ror a				ror 	a
.2045	ca		dex				dex
.2046	10 fc		bpl $2044			bpl 	_CMTSLoop
.2048	60		rts				rts
.2049					CMDecodeLayer:
.2049	48		pha				pha 								; save it.
.204a	29 f7		and #$f7			and 	#$F7 						; all the bits except T256C which you can't set using this
.204c	9d 2d 9f	sta $9f2d,x			sta 	$9F2D,X
.204f	68		pla				pla 								; get it back
.2050	29 08		and #$08			and 	#$08 						; the missing bit sets the tile size.
.2052	f0 02		beq $2056			beq 	_CMDLNotSet
.2054	a9 03		lda #$03			lda 	#$03 						; which sets both lower bits, they're square.
.2056					_CMDLNotSet:
.2056	e0 00		cpx #$00			cpx 	#0
.2058	f0 06		beq $2060			beq 	_CMDLayer0 					; layer 1 has standard defaults for tile table, e.g. $7C
.205a	09 7c		ora #$7c			ora 	#$7C 						; so set those bits and write it out.
.205c	9d 2f 9f	sta $9f2f,x			sta 	$9F2F,X
.205f	60		rts				rts
.2060					_CMDLayer0:
.2060	09 80		ora #$80			ora 	#$80 						; tile base is $80
.2062	9d 2f 9f	sta $9f2f,x			sta 	$9F2F,X
.2065	60		rts				rts
.2066					CommandClg:
.2066	20 d0 1b	jsr $1bd0			jsr 	gdClearGraphics
.2069	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/video/palette.asm

.206a					CommandPalette:
.206a	a9 00		lda #$00			lda 	#0
.206c	a2 0c		ldx #$0c		ldx	#12
.206e	20 b8 3a	jsr $3ab8		jsr	mainHandler
.2071	a2 02		ldx #$02		ldx	#2
.2073	20 b8 3a	jsr $3ab8		jsr	mainHandler
.2076	a9 01		lda #$01			lda 	#1
.2078	a2 08		ldx #$08		ldx	#8
.207a	20 b8 3a	jsr $3ab8		jsr	mainHandler
.207d	a5 98		lda $98				lda 	esInt0 					; get palette #
.207f	20 8f 20	jsr $208f			jsr 	PointToPaletteA			; point to palette register
.2082	a5 99		lda $99				lda 	esInt0+1
.2084	8d 23 9f	sta $9f23			sta 	$9F23
.2087	a5 a1		lda $a1				lda 	esInt1+1
.2089	29 0f		and #$0f			and 	#$0F
.208b	8d 23 9f	sta $9f23			sta 	$9F23
.208e	60		rts				rts
.208f					PointToPaletteA:
.208f	0a		asl a				asl 	a 							; x 2 -> LSB
.2090	8d 20 9f	sta $9f20			sta 	$9F20
.2093	a9 00		lda #$00			lda 	#0 							; carry into A
.2095	2a		rol a				rol 	a
.2096	09 fa		ora #$fa			ora 	#$FA 						; make correct address
.2098	8d 21 9f	sta $9f21			sta 	$9F21
.209b	a9 11		lda #$11			lda 	#$11 						; $01 and single step => $9F22
.209d	8d 22 9f	sta $9f22			sta 	$9F22
.20a0	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/video/vload.asm

.20a1					Command_VLoad:
.20a1	a9 00		lda #$00			lda 	#0 								; string which is the file name
.20a3	a2 0e		ldx #$0e		ldx	#14
.20a5	20 b8 3a	jsr $3ab8		jsr	mainHandler
.20a8	a2 01		ldx #$01			ldx 	#1 								; load address at +1.
.20aa	a5 35		lda $35				lda 	lowMemory 						; load it into lowMemory (for now ?)
.20ac	95 98		sta $98,x			sta 	esInt0,x
.20ae	a5 36		lda $36				lda 	lowMemory+1
.20b0	95 a0		sta $a0,x			sta 	esInt1,x
.20b2	a9 00		lda #$00			lda 	#0
.20b4	95 a8		sta $a8,x			sta 	esInt2,x
.20b6	95 b0		sta $b0,x			sta 	esInt3,x
.20b8	a2 0e		ldx #$0e		ldx	#14
.20ba	20 f6 14	jsr $14f6		jsr	deviceHandler
.20bd	a5 99		lda $99				lda 	esInt0+1 						; (temp0) is where we are decoding from.
.20bf	85 2a		sta $2a				sta 	temp0
.20c1	a5 a1		lda $a1				lda 	esInt1+1
.20c3	85 2b		sta $2b				sta 	temp0+1
.20c5	20 41 21	jsr $2141			jsr 	LoadVRAMFile 					; load the VRAM file in.
.20c8	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/video/vpeekpoke.asm

.20c9					Command_VPoke:
.20c9	38		sec				sec 						; one byte , CS
.20ca	b0 01		bcs $20cd			bcs 	CmdVideoWrite
.20cc					Command_VDoke:
.20cc	18		clc				clc 						; two bytes, CC
.20cd					CmdVideoWrite:
.20cd	08		php				php 						; save one or two btes
.20ce	a9 00		lda #$00			lda 	#0  				; get address and value into levels 0,1
.20d0	a2 0a		ldx #$0a		ldx	#10
.20d2	20 b8 3a	jsr $3ab8		jsr	mainHandler
.20d5	a2 02		ldx #$02		ldx	#2
.20d7	20 b8 3a	jsr $3ab8		jsr	mainHandler
.20da	a9 01		lda #$01			lda 	#1
.20dc	a2 0a		ldx #$0a		ldx	#10
.20de	20 b8 3a	jsr $3ab8		jsr	mainHandler
.20e1	a2 00		ldx #$00			ldx 	#0
.20e3	20 f4 20	jsr $20f4			jsr 	SetUpTOSVRamAddress ; copy target address to VRAM address registers
.20e6	a5 99		lda $99				lda 	esInt0+1 			; get MSB of write value
.20e8	8d 23 9f	sta $9f23			sta 	$9F23
.20eb	28		plp				plp 						; if it was Poke then exit
.20ec	b0 05		bcs $20f3			bcs 	_CVWExit
.20ee	a5 a1		lda $a1				lda 	esInt1+1 			; doke, write the MSB.
.20f0	8d 23 9f	sta $9f23			sta 	$9F23
.20f3					_CVWExit:
.20f3	60		rts				rts
.20f4					SetUpTOSVRamAddress:
.20f4	b5 a8		lda $a8,x			lda 	esInt2,x 			; check range of address, data to $FFFF
.20f6	29 fe		and #$fe			and 	#$FE
.20f8	15 b0		ora $b0,x			ora 	esInt3,x
.20fa	d0 14		bne $2110			bne 	CVWValue
.20fc	b5 98		lda $98,x			lda 	esInt0,x			; set address up
.20fe	8d 20 9f	sta $9f20			sta 	$9F20
.2101	b5 a0		lda $a0,x			lda 	esInt1,x
.2103	8d 21 9f	sta $9f21			sta	 	$9F21
.2106	b5 a8		lda $a8,x			lda 	esInt2,x
.2108	29 01		and #$01			and 	#1
.210a	09 10		ora #$10			ora 	#$10 				; step 1.
.210c	8d 22 9f	sta $9f22			sta 	$9F22
.210f	60		rts				rts
.2110					CVWValue:
.2110	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.2112	20 18 15	jsr $1518		jsr	errorHandler
.2115					Command_VPeek:
.2115	38		sec				sec 						; one byte , CS
.2116	b0 01		bcs $2119			bcs 	CmdVideoRead
.2118					Command_VDeek:
.2118	18		clc				clc 						; two bytes, CC
.2119					CmdVideoRead:
.2119	08		php				php 						; save action on stack.
.211a	48		pha				pha 						; save stack position
.211b	a2 0a		ldx #$0a		ldx	#10
.211d	20 b8 3a	jsr $3ab8		jsr	mainHandler
.2120	a2 04		ldx #$04		ldx	#4
.2122	20 b8 3a	jsr $3ab8		jsr	mainHandler
.2125	68		pla				pla
.2126	aa		tax				tax
.2127	20 f4 20	jsr $20f4			jsr 	SetUpTOSVRamAddress	; set up VRAM address.
.212a	a9 00		lda #$00			lda 	#0 					; zero upper 3 bytes
.212c	95 a0		sta $a0,x			sta 	esInt1,x
.212e	95 a8		sta $a8,x			sta 	esInt2,x
.2130	95 b0		sta $b0,x			sta 	esInt3,x
.2132	ad 23 9f	lda $9f23			lda 	$9F23				; copy 1st byte
.2135	95 98		sta $98,x			sta 	esInt0,x
.2137	28		plp				plp 						; check if DOKE (carry was clear)
.2138	b0 05		bcs $213f			bcs 	_CVRExit
.213a	ad 23 9f	lda $9f23			lda 	$9F23 				; copy 2nd byte
.213d	95 a0		sta $a0,x			sta 	esInt1,x
.213f					_CVRExit:
.213f	8a		txa				txa 						; return X position.
.2140	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/video/vramprocess.asm

.0c0f					compressMode:
>0c0f							.fill 	1
.0c10					imageInfo:
>0c10							.fill 	X16MaxImages
.0c50					imageAddr2Low:
>0c50							.fill  	X16MaxImages
.0c90					imageAddr2High:
>0c90							.fill  	X16MaxImages
.2141					LoadVRAMFile:
.2141	8a		txa				txa
.2142	48		pha				pha
.2143	98		tya				tya
.2144	48		pha				pha
.2145					_LVRLoop:
.2145	20 21 22	jsr $2221			jsr 	LVFGet 						; get the next (never access direct)
.2148	c9 80		cmp #$80			cmp 	#$80 						; exit ?
.214a	f0 42		beq $218e			beq 	_LVRExit
.214c	b0 5c		bcs $21aa			bcs 	_LVRLoad 					; load data in ?
.214e	c9 08		cmp #$08			cmp 	#$08 						; is it set address ?
.2150	90 11		bcc $2163			bcc 	_LVRSetAddress
.2152	c9 0f		cmp #$0f			cmp 	#$0F 						; is it define palette
.2154	f0 3d		beq $2193			beq 	_LVRSetPalette
.2156	c9 10		cmp #$10			cmp 	#$10 						; is it set compression type ?
.2158	90 2d		bcc $2187			bcc 	_LVRSetCompress
.215a	c9 64		cmp #$64			cmp 	#$64 						; is it set sprite type.
.215c	90 60		bcc $21be			bcc 	_LVRSetSprite
.215e	a2 01		ldx #$01			ldx 	#ErrorID_missing
.2160	20 18 15	jsr $1518		jsr	errorHandler
.2163					_LVRSetAddress:
.2163	85 2d		sta $2d				sta 	temp1+1 					; 24 bit in temp1+1/temp1/A
.2165	20 21 22	jsr $2221			jsr 	LVFGet
.2168	85 2c		sta $2c				sta 	temp1
.216a	a9 00		lda #$00			lda 	#0
.216c	46 2d		lsr $2d				lsr 	temp1+1 					; / 2 twice.
.216e	66 2c		ror $2c				ror 	temp1
.2170	6a		ror a				ror		a
.2171	46 2d		lsr $2d				lsr 	temp1+1
.2173	66 2c		ror $2c				ror 	temp1
.2175	6a		ror a				ror		a
.2176	8d 20 9f	sta $9f20			sta 	$9F20 						; set write address with +1 increment
.2179	a5 2c		lda $2c				lda 	temp1
.217b	8d 21 9f	sta $9f21			sta 	$9F21
.217e	a5 2d		lda $2d				lda 	temp1+1
.2180	09 10		ora #$10			ora 	#$10
.2182	8d 22 9f	sta $9f22			sta 	$9F22
.2185	d0 be		bne $2145			bne 	_LVRLoop
.2187					_LVRSetCompress:
.2187	29 07		and #$07			and 	#7
.2189	8d 0f 0c	sta $0c0f			sta 	compressMode
.218c	10 b7		bpl $2145			bpl 	_LVRLoop
.218e					_LVRExit:
.218e	68		pla				pla
.218f	a8		tay				tay
.2190	68		pla				pla
.2191	aa		tax				tax
.2192	60		rts				rts
.2193					_LVRSetPalette:
.2193	20 21 22	jsr $2221			jsr 	LVFGet 						; get palette id.
.2196	20 8f 20	jsr $208f			jsr 	PointToPaletteA 			; in palette.asm
.2199	20 21 22	jsr $2221			jsr 	LVFGet 						; copy 12 bit palette data in.
.219c	8d 23 9f	sta $9f23			sta 	$9F23
.219f	20 21 22	jsr $2221			jsr 	LVFGet
.21a2	29 0f		and #$0f			and 	#$0F
.21a4	8d 23 9f	sta $9f23			sta 	$9F23
.21a7	4c 45 21	jmp $2145			jmp 	_LVRLoop
.21aa					_LVRLoad:
.21aa	ae 0f 0c	ldx $0c0f			ldx 	compressMode
.21ad	d0 55		bne $2204			bne 	_LVRNotMode0
.21af	29 7f		and #$7f			and 	#$7F 						; count in X (is > 0)
.21b1					_LVRLCopyX:
.21b1	aa		tax				tax
.21b2					_LVRLCopy:
.21b2	20 21 22	jsr $2221			jsr 	LVFGet 						; write to data.
.21b5	8d 23 9f	sta $9f23			sta 	$9F23
.21b8	ca		dex				dex
.21b9	d0 f7		bne $21b2			bne 	_LVRLCopy
.21bb	4c 45 21	jmp $2145			jmp 	_LVRLoop
.21be					_LVRSetSprite:
.21be	48		pha				pha 								; save on stack
.21bf	20 21 22	jsr $2221			jsr 	LVFGet 						; get the sprite number into X
.21c2	aa		tax				tax
.21c3	c9 40		cmp #$40			cmp 	#X16MaxImages				; too high ?
.21c5	b0 38		bcs $21ff			bcs 	_LVRSSValue
.21c7	68		pla				pla 								; restore the data held in the first byte
.21c8	9d 10 0c	sta $0c10,x			sta 	imageInfo,x 				; and write into the sprite image table.
.21cb					_LVRAlignVRAM:
.21cb	ad 20 9f	lda $9f20			lda 	$9F20 						; check VRAM on 32 byte boundary
.21ce	29 1f		and #$1f			and 	#$1F
.21d0	f0 07		beq $21d9			beq 	_LVRAligned
.21d2	a9 00		lda #$00			lda 	#$00
.21d4	8d 23 9f	sta $9f23			sta 	$9F23
.21d7	f0 f2		beq $21cb			beq 	_LVRAlignVRAM
.21d9					_LVRAligned:
.21d9	ad 22 9f	lda $9f22			lda 	$9F22 						; put address/32 in sprite image table
.21dc	4a		lsr a				lsr 	a 	 						; first halve into temp1
.21dd	ad 21 9f	lda $9f21			lda 	$9F21
.21e0	6a		ror a				ror 	a
.21e1	85 2d		sta $2d				sta 	temp1+1
.21e3	ad 20 9f	lda $9f20			lda 	$9F20
.21e6	6a		ror a				ror 	a
.21e7	85 2c		sta $2c				sta 	temp1
.21e9	a0 04		ldy #$04			ldy 	#4 							; divide it by 16 in temp1
.21eb					_LVRShift:
.21eb	46 2d		lsr $2d				lsr 	temp1+1
.21ed	66 2c		ror $2c				ror 	temp1
.21ef	88		dey				dey
.21f0	d0 f9		bne $21eb			bne 	_LVRShift
.21f2	a5 2d		lda $2d				lda 	temp1+1 					; copy result.
.21f4	9d 90 0c	sta $0c90,x			sta 	imageAddr2High,x
.21f7	a5 2c		lda $2c				lda 	temp1
.21f9	9d 50 0c	sta $0c50,x			sta 	imageAddr2Low,x
.21fc	4c 45 21	jmp $2145			jmp 	_LVRLoop
.21ff					_LVRSSValue:
.21ff	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.2201	20 18 15	jsr $1518		jsr	errorHandler
.2204					_LVRNotMode0:
.2204	e0 01		cpx #$01			cpx 	#1
.2206	d0 15		bne $221d			bne 	_LVRNotMode1
.2208	29 7f		and #$7f			and 	#$7F 						; drop bit 7
.220a	c9 40		cmp #$40			cmp 	#$40
.220c	90 a3		bcc $21b1			bcc 	_LVRLCopyX 					; 00-3F use mode 0's copying code.
.220e					_LVRRLEGroup:
.220e	29 3f		and #$3f			and 	#$3F
.2210	aa		tax				tax
.2211	20 21 22	jsr $2221			jsr 	LVFGet
.2214					_LVRLEGroupLoop:
.2214	8d 23 9f	sta $9f23			sta 	$9F23
.2217	ca		dex				dex
.2218	d0 fa		bne $2214			bne 	_LVRLEGroupLoop
.221a	4c 45 21	jmp $2145			jmp 	_LVRLoop
.221d					_LVRNotMode1:
>221d	db						.byte 	$DB
.221e	4c 1d 22	jmp $221d			jmp 	_LVRNotMode1
.2221	84 32		sty $32		LVFGet:	sty 	tempShort
.2223	a0 00		ldy #$00			ldy 	#0
.2225	b1 2a		lda ($2a),y			lda 	(temp0),y
.2227	a4 32		ldy $32				ldy	 	tempShort
.2229	e6 2a		inc $2a				inc 	temp0
.222b	d0 02		bne $222f			bne 	_LVFGExit
.222d	e6 2b		inc $2b				inc 	temp0+1
.222f					_LVFGExit:
.222f	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Return to file: basic.asm

.2230					section_end_extension:
.2230					section_start_floatingpoint:

;******  Processing file: floatingpoint/floatingpoint.asm

.2230					floatingpointHandler:
.2230	a2 03		ldx #$03			ldx 	#ErrorID_NoModule
.2232	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: basic.asm

.2235					section_end_floatingpoint:
.2235					section_start_interaction:

;******  Processing file: interaction/interaction.asm


;******  Processing file: interaction/cold.asm

.2235					ColdStartEntry:
.2235	a2 ff		ldx #$ff			ldx 	#$FF
.2237	9a		txs				txs
.2238	20 c1 22	jsr $22c1			jsr 	ForceStandardMode
.223b	a2 04		ldx #$04		ldx	#4
.223d	20 f6 14	jsr $14f6		jsr	deviceHandler
.2240	a0 ff		ldy #$ff			ldy 	#255
.2242					_CSBanner:
.2242	c8		iny				iny
.2243	b9 69 22	lda $2269,y			lda 	Intro,y
.2246	f0 14		beq $225c			beq 	_CSStart
.2248	c9 08		cmp #$08			cmp 	#8
.224a	90 08		bcc $2254			bcc 	_CSInk
.224c	a2 16		ldx #$16		ldx	#22
.224e	20 f6 14	jsr $14f6		jsr	deviceHandler
.2251	4c 42 22	jmp $2242			jmp 	_CSBanner
.2254					_CSInk:
.2254	a2 08		ldx #$08		ldx	#8
.2256	20 f6 14	jsr $14f6		jsr	deviceHandler
.2259	4c 42 22	jmp $2242			jmp 	_CSBanner
.225c					_CSStart:
.225c	a2 16		ldx #$16		ldx	#22
.225e	20 b8 3a	jsr $3ab8		jsr	mainHandler
.2261	a2 06		ldx #$06		ldx	#6
.2263	20 b8 3a	jsr $3ab8		jsr	mainHandler
.2266	4c 81 23	jmp $2381			jmp 	WarmStartEntry
>2269	06 2a 2a 2a 20 36 35 30		Intro:	.text 	6,"*** 6502 Extended BASIC ***",13,13
>2271	32 20 45 78 74 65 6e 64 65 64 20 42 41 53 49 43
>2281	20 2a 2a 2a 0d 0d
>2287	03 57 72 69 74 74 65 6e				.text 	3,"Written by Paul Robson 2021",13,13
>228f	20 62 79 20 50 61 75 6c 20 52 6f 62 73 6f 6e 20
>229f	32 30 32 31 0d 0d
>22a5	02 42 61 73 69 63 20				.text 	2,"Basic "
>22ac	30 2e 32 30					.text "0.20"
>22b0	20 28						.text 	" ("
>22b2	33 30 2d 4d 61 72 2d 32				.text "30-Mar-2021"
>22ba	30 32 31
>22bd	29 0d 0d 00					.text 	")",13,13,0
.22c1					ForceStandardMode:
.22c1	a9 fe		lda #$fe			lda 	#$FE
.22c3	20 69 18	jsr $1869		jsr	extensionHandler
.22c6	60		rts				rts

;******  Return to file: interaction/interaction.asm


;******  Processing file: interaction/delete.asm

.22c7					DeleteLine:
.22c7	ad c8 0a	lda $0ac8			lda 	basePage 					; copy program base to temp0
.22ca	85 2a		sta $2a				sta 	temp0
.22cc	ad c9 0a	lda $0ac9			lda 	basePage+1
.22cf	85 2b		sta $2b				sta 	temp0+1
.22d1	a0 01		ldy #$01	_DLLoop:ldy 	#1 							; see if found line ?
.22d3	a5 98		lda $98				lda 	esInt0 						; e.g. the linenumbers match
.22d5	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.22d7	d0 07		bne $22e0			bne 	_DLNext
.22d9	c8		iny				iny
.22da	a5 a0		lda $a0				lda 	esInt1
.22dc	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.22de	f0 06		beq $22e6			beq 	_DLFound
.22e0	20 04 23	jsr $2304	_DLNext:jsr 	IAdvanceTemp0 				; shift temp0 forward, return Z flag set if end.
.22e3	d0 ec		bne $22d1			bne 	_DLLoop
.22e5	60		rts				rts
.22e6					_DLFound:
.22e6	a0 00		ldy #$00			ldy 	#0 							; this is the line to cut, so this offset is the bytes to remove
.22e8	b1 2a		lda ($2a),y			lda 	(temp0),y
.22ea	a8		tay				tay 								; so we copy from (temp0),y
.22eb	a2 00		ldx #$00			ldx 	#0  						; to (temp0,x)
.22ed					_DLCopyDown:
.22ed	b1 2a		lda ($2a),y			lda 	(temp0),y 					; copy one byte.
.22ef	81 2a		sta ($2a,x)			sta 	(temp0,x)
.22f1	e6 2a		inc $2a				inc 	temp0 						; advance pointer
.22f3	d0 02		bne $22f7			bne 	_DLNoCarry
.22f5	e6 2b		inc $2b				inc 	temp0+1
.22f7					_DLNoCarry:
.22f7	a5 2a		lda $2a				lda 	temp0 						; until hit low memory
.22f9	c5 35		cmp $35				cmp 	lowMemory 					; which is comfortably after End Program.
.22fb	d0 f0		bne $22ed			bne 	_DLCopyDown
.22fd	a5 2b		lda $2b				lda 	temp0+1
.22ff	c5 36		cmp $36				cmp 	lowMemory+1
.2301	d0 ea		bne $22ed			bne 	_DLCopyDown
.2303	60		rts				rts
.2304					IAdvanceTemp0:
.2304	84 32		sty $32				sty 	tempShort
.2306	18		clc				clc
.2307	a0 00		ldy #$00			ldy 	#0 							; get offset
.2309	b1 2a		lda ($2a),y			lda 	(temp0),y 					; add to temp0
.230b	65 2a		adc $2a				adc 	temp0
.230d	85 2a		sta $2a				sta 	temp0
.230f	90 02		bcc $2313			bcc 	_IATNoCarry
.2311	e6 2b		inc $2b				inc 	temp0+1
.2313					_IATNoCarry:
.2313	b1 2a		lda ($2a),y			lda 	(temp0),y
.2315	a4 32		ldy $32				ldy 	tempShort
.2317	c9 00		cmp #$00			cmp		#0 							; Z set if program end.
.2319	60		rts				rts

;******  Return to file: interaction/interaction.asm


;******  Processing file: interaction/insert.asm

.231a					InsertLine:
.231a	ad c8 0a	lda $0ac8			lda 	basePage 					; copy program base to temp0
.231d	85 2a		sta $2a				sta 	temp0
.231f	ad c9 0a	lda $0ac9			lda 	basePage+1
.2322	85 2b		sta $2b				sta 	temp0+1
.2324					_ILLoop:
.2324	a0 01		ldy #$01			ldy 	#1
.2326	b1 2a		lda ($2a),y			lda 	(temp0),y
.2328	c5 98		cmp $98				cmp 	esInt0
.232a	c8		iny				iny
.232b	b1 2a		lda ($2a),y			lda 	(temp0),y
.232d	e5 a0		sbc $a0				sbc 	esInt1
.232f	b0 05		bcs $2336			bcs 	_ILFound 					; we know it cannot be equal, it would have been deleted
.2331	20 04 23	jsr $2304			jsr 	IAdvanceTemp0 				; shift temp0 forward, return Z flag set if end.
.2334	d0 ee		bne $2324			bne 	_ILLoop
.2336					_ILFound:
.2336	a5 35		lda $35				lda 	lowMemory 					; shift lowMemory up to make space for it.
.2338	85 2c		sta $2c				sta 	temp1             			; this pointer goes backwards
.233a	a5 36		lda $36				lda 	lowMemory+1
.233c	85 2d		sta $2d				sta 	temp1+1
.233e	ad 0d 0e	lda $0e0d			lda 	tokenBufferIndex 			; space to make in Y, 0 in X.
.2341	18		clc				clc 								; add 3 for the line number and offset.
.2342	69 03		adc #$03			adc 	#3 							; tokenbuffer already has $80
.2344	a8		tay				tay
.2345	a2 00		ldx #$00			ldx 	#0
.2347	a1 2c		lda ($2c,x)	_ILMove:lda 	(temp1,x)					; shift up
.2349	91 2c		sta ($2c),y			sta 	(temp1),y
.234b	a5 2c		lda $2c				lda 	temp1 						; check reached the insert point ?
.234d	c5 2a		cmp $2a				cmp 	temp0
.234f	d0 06		bne $2357			bne 	_ILMNext
.2351	a5 2d		lda $2d				lda 	temp1+1
.2353	c5 2b		cmp $2b				cmp 	temp0+1
.2355	f0 0b		beq $2362			beq 	_ILMCopy
.2357					_ILMNext:
.2357	a5 2c		lda $2c				lda 	temp1
.2359	d0 02		bne $235d			bne 	_ILNoBorrow
.235b	c6 2d		dec $2d				dec 	temp1+1
.235d					_ILNoBorrow:
.235d	c6 2c		dec $2c				dec 	temp1
.235f	4c 47 23	jmp $2347			jmp 	_ILMove 					; and go round again
.2362					_ILMCopy:
.2362	98		tya				tya 								; Y is the offset of the new line.
.2363	81 2a		sta ($2a,x)			sta 	(temp0,x)					; X = 0 still.
.2365	a0 01		ldy #$01			ldy 	#1 							; copy in line number.
.2367	a5 98		lda $98				lda 	esInt0
.2369	91 2a		sta ($2a),y			sta 	(temp0),y
.236b	c8		iny				iny
.236c	a5 a0		lda $a0				lda 	esInt1
.236e	91 2a		sta ($2a),y			sta 	(temp0),y
.2370	a0 00		ldy #$00			ldy 	#0 							; copy the body in
.2372					_ILMCopy2:
.2372	b1 28		lda ($28),y			lda 	(codePtr),y
.2374	c8		iny				iny
.2375	c8		iny				iny
.2376	c8		iny				iny
.2377	91 2a		sta ($2a),y			sta 	(temp0),y
.2379	88		dey				dey
.237a	88		dey				dey
.237b	cc 0d 0e	cpy $0e0d			cpy 	tokenBufferIndex
.237e	d0 f2		bne $2372			bne 	_ILMCopy2
.2380	60		rts				rts

;******  Return to file: interaction/interaction.asm


;******  Processing file: interaction/warm.asm

.2381					WarmStartEntry:
.2381	a2 ff		ldx #$ff			ldx 	#$FF
.2383	9a		txs				txs
.2384	20 c1 22	jsr $22c1			jsr 	ForceStandardMode
.2387	a9 02		lda #$02			lda 	#2							; green text.
.2389	a2 08		ldx #$08		ldx	#8
.238b	20 f6 14	jsr $14f6		jsr	deviceHandler
.238e	a2 0c		ldx #$0c		ldx	#12
.2390	20 f6 14	jsr $14f6		jsr	deviceHandler
.2393	a5 2a		lda $2a				lda 	temp0	 					; copy temp0 to codePtr
.2395	85 28		sta $28				sta 	codePtr
.2397	a5 2b		lda $2b				lda 	temp0+1
.2399	85 29		sta $29				sta 	codePtr+1
.239b	a2 06		ldx #$06		ldx	#6
.239d	20 f6 14	jsr $14f6		jsr	deviceHandler
.23a0	a2 08		ldx #$08		ldx	#8
.23a2	20 ee 45	jsr $45ee		jsr	tokeniserHandler
.23a5	c9 00		cmp #$00			cmp 	#0
.23a7	f0 25		beq $23ce			beq 	WSEError 					; failed (tokenise can fail if it doesn't know a character e.g. |)
.23a9	a9 0a		lda #$0a			lda 	#(tokenHeader) & $FF
.23ab	85 28		sta $28				sta 	codePtr
.23ad	a9 0d		lda #$0d			lda 	#(tokenHeader) >> 8
.23af	85 29		sta $29				sta 	1+(codePtr)
.23b1	ad 0d 0d	lda $0d0d			lda 	tokenBuffer 				; is it a blank line, go get another line.
.23b4	c9 80		cmp #$80			cmp 	#$80
.23b6	f0 c9		beq $2381			beq 	WarmStartEntry
.23b8	29 c0		and #$c0			and 	#$C0						; does it start with a number
.23ba	c9 40		cmp #$40			cmp 	#$40 						; e.g. is it 01xx xxxx
.23bc	f0 15		beq $23d3			beq 	HasLineNumber
.23be	a9 00		lda #$00			lda 	#0 							; zero the token header, so it will look like a
.23c0	8d 0a 0d	sta $0d0a			sta 	tokenHeader 				; fake program line.
.23c3	8d 0b 0d	sta $0d0b			sta 	tokenHeader+1
.23c6	8d 0c 0d	sta $0d0c			sta 	tokenHeader+2
.23c9	a2 18		ldx #$18		ldx	#24
.23cb	20 b8 3a	jsr $3ab8		jsr	mainHandler
.23ce					WSEError:
.23ce	a2 1e		ldx #$1e			ldx 	#ErrorID_Tokenise
.23d0	20 18 15	jsr $1518		jsr	errorHandler
.23d3					HasLineNumber:
.23d3	a0 03		ldy #$03			ldy 	#3 							; get line number
.23d5	a9 00		lda #$00			lda 	#0
.23d7	a2 0a		ldx #$0a		ldx	#10
.23d9	20 b8 3a	jsr $3ab8		jsr	mainHandler
.23dc	a5 a8		lda $a8				lda 	esInt2		 				; check in range (only 2 bytes)
.23de	05 b0		ora $b0				ora 	esInt3
.23e0	d0 ec		bne $23ce			bne 	WSEError
.23e2	98		tya				tya 								; make codePtr point to code after the line number.
.23e3	18		clc				clc 								; by skipping over the tokenised number.
.23e4	65 28		adc $28				adc 	codePtr
.23e6	85 28		sta $28				sta 	codePtr
.23e8	90 02		bcc $23ec			bcc		_HLNNoCarry
.23ea	e6 29		inc $29				inc 	codePtr+1
.23ec					_HLNNoCarry:
.23ec	98		tya				tya 								; subtract that offset from the code buffer index
.23ed	38		sec				sec
.23ee	49 ff		eor #$ff			eor 	#$FF
.23f0	6d 0d 0e	adc $0e0d			adc 	tokenBufferIndex
.23f3	18		clc				clc 								; add space allowing for header & $80 trailer
.23f4	69 04		adc #$04			adc 	#4
.23f6	8d 0d 0e	sta $0e0d			sta 	tokenBufferIndex 			; this is the number of bytes occupied.
.23f9	20 c7 22	jsr $22c7			jsr 	DeleteLine 					; always delete the line, it's deleted and reinserted.
.23fc					_HLNNoDelete:
.23fc	ad 0d 0e	lda $0e0d			lda 	tokenBufferIndex 			; if line was empty, then don't insert
.23ff	c9 01		cmp #$01			cmp 	#1 							; (the one character is the EOL marker)
.2401	f0 0c		beq $240f			beq 	_HLMEditDone
.2403	a5 36		lda $36				lda 	lowMemory+1 				; is there space, if we allow a little bit of
.2405	18		clc				clc 								; workspace (1k)
.2406	69 04		adc #$04			adc 	#4 							; e.g. 4 x 256
.2408	c5 34		cmp $34				cmp 	highMemory+1
.240a	b0 0b		bcs $2417			bcs 	_HLMMemory 					; nope, won't allowit.
.240c	20 1a 23	jsr $231a			jsr 	InsertLine 					; insert the line in
.240f					_HLMEditDone:
.240f	a2 06		ldx #$06		ldx	#6
.2411	20 b8 3a	jsr $3ab8		jsr	mainHandler
.2414	4c 81 23	jmp $2381			jmp 	WarmStartEntry
.2417					_HLMMemory:
.2417	a2 22		ldx #$22			ldx 	#ErrorID_Memory
.2419	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: interaction/interaction.asm

.241c					interactionHandler:
.241c	7c 1f 24	jmp ($241f,x)			jmp 	(interactionVectors,x)
.241f					interactionVectors:
>241f	25 24					.word _DummyControlHandler ; index 0
>2421	35 22					.word ColdStartEntry       ; index 2
>2423	81 23					.word WarmStartEntry       ; index 4
.2425					_DummyControlHandler:
.2425	60		rts			rts

;******  Return to file: basic.asm

.2426					section_end_interaction:
.2426					section_start_main:

;******  Processing file: main/main.asm


;******  Processing file: main/commands/compat/readdata.asm

.0cd0					dataPtr:
>0cd0							.fill 	2
.0cd2					dataIndex:
>0cd2							.fill 	1
.2426					CommandRead:
.2426	a2 00		ldx #$00			ldx 	#0 							; get a reference to a variable in stack:0
.2428	20 6b 33	jsr $336b			jsr 	EvaluateReference
.242b	20 6c 24	jsr $246c			jsr 	SwapDPCP 					; use the data pointer.
.242e	b1 28		lda ($28),y			lda 	(codePtr),y 				; see where it is.
.2430	c8		iny				iny
.2431	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; if it is on a comma, it is in data.
.2433	f0 07		beq $243c			beq 	_CRInData
.2435	88		dey				dey
.2436	a9 d9		lda #$d9			lda 	#TKW_DATA 					; scan forward to a DATA statement.
.2438	aa		tax				tax
.2439	20 6d 2b	jsr $2b6d			jsr 	ScanForward
.243c					_CRInData:
.243c	a2 01		ldx #$01			ldx 	#1 							; evaluate a value at Stack,1
.243e	20 13 33	jsr $3313			jsr 	Evaluate
.2441	ca		dex				dex 								; and write the value.
.2442	20 c0 26	jsr $26c0			jsr 	WriteValue
.2445	20 6c 24	jsr $246c			jsr 	SwapDPCP 					; get the code pointer back.
.2448	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows ?
.244a	c8		iny				iny
.244b	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; if comma, another variable
.244d	f0 d7		beq $2426			beq 	CommandRead
.244f	88		dey				dey
.2450	60		rts				rts
.2451					CommandData:
.2451	a9 80		lda #$80			lda 	#TOK_EOL 					; go forward to end of line or colon.
.2453	a2 ca		ldx #$ca			ldx 	#TKW_COLON
.2455	20 6d 2b	jsr $2b6d			jsr 	ScanForward
.2458	88		dey				dey 								; ending on EOL is a scan issue, as it increments
.2459	60		rts				rts
.245a					CommandRestore:
.245a	ad c8 0a	lda $0ac8			lda 	basePage
.245d	8d d0 0c	sta $0cd0			sta 	dataPtr
.2460	ad c9 0a	lda $0ac9			lda 	basePage+1
.2463	8d d1 0c	sta $0cd1			sta 	dataPtr+1
.2466	a9 03		lda #$03			lda 	#3
.2468	8d d2 0c	sta $0cd2			sta 	dataIndex
.246b	60		rts				rts
.246c					SwapDPCP:
.246c	8a		txa				txa
.246d	48		pha				pha
.246e	98		tya				tya 								; swap Y, DataIndex
.246f	ac d2 0c	ldy $0cd2			ldy 	DataIndex
.2472	8d d2 0c	sta $0cd2			sta 	DataIndex
.2475	a5 28		lda $28				lda 	codePtr 					; swap code/dataptr low
.2477	ae d0 0c	ldx $0cd0			ldx 	dataptr
.247a	8d d0 0c	sta $0cd0			sta 	dataPtr
.247d	86 28		stx $28				stx 	codePtr
.247f	a5 29		lda $29				lda 	codePtr+1 					; swap code/dataptr high.
.2481	ae d1 0c	ldx $0cd1			ldx 	dataptr+1
.2484	8d d1 0c	sta $0cd1			sta 	dataPtr+1
.2487	86 29		stx $29				stx 	codePtr+1
.2489	68		pla				pla
.248a	aa		tax				tax
.248b	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/compat/transfer.asm

.248c					CommandGOSUB:
.248c	20 30 33	jsr $3330			jsr 	EvaluateRootInteger			; get GOSUB line on stack top.
.248f	a2 04		ldx #$04			ldx 	#4 							; allocate 4 bytes on stack for GOSUB
.2491	a9 47		lda #$47			lda 	#markerGOSUB  				; <marker> <return addr/offset>
.2493	20 65 3a	jsr $3a65			jsr 	RSClaim
.2496	a9 01		lda #$01			lda 	#1 							; save position at offset 1.
.2498	20 91 3a	jsr $3a91			jsr 	RSSavePosition
.249b	a2 00		ldx #$00			ldx 	#0 							; point back at GOSUB line
.249d	f0 1b		beq $24ba			beq 	GotoTOS 					; and do a GOTO there.
.249f					CommandRETURN:
.249f	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.24a1	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.24a3	c9 47		cmp #$47			cmp 	#markerGOSUB 						; does it match
.24a5	f0 05		beq $24ac			beq 	_isok
.24a7	a2 0e		ldx #$0e			ldx 	#ErrorID_returnErr
.24a9	20 18 15	jsr $1518		jsr	errorHandler
.24ac					_isok:
.24ac	a9 01		lda #$01			lda 	#1
.24ae	20 a4 3a	jsr $3aa4			jsr 	RSLoadPosition 				; reload the position from offset 1.
.24b1	a9 04		lda #$04			lda 	#4 							; throw 4 bytes from stack.
.24b3	20 87 3a	jsr $3a87			jsr 	RSFree
.24b6	60		rts				rts
.24b7					CommandGOTO:
.24b7	20 30 33	jsr $3330			jsr 	EvaluateRootInteger 		; get GOTO line on stack top.
.24ba					GotoTOS:
.24ba	20 51 2e	jsr $2e51			jsr 	ResetCodeAddress 			; simple search.
.24bd					_GotoSearch:
.24bd	a0 00		ldy #$00			ldy 	#0 							; get offset
.24bf	b1 28		lda ($28),y			lda 	(codePtr),y
.24c1	f0 21		beq $24e4			beq 	_GotoError 					; not found.
.24c3	c8		iny				iny									; check LSB match
.24c4	b1 28		lda ($28),y			lda 	(codePtr),y
.24c6	d5 98		cmp $98,x			cmp 	esInt0,x
.24c8	d0 07		bne $24d1			bne 	_GotoNext
.24ca	c8		iny				iny
.24cb	b1 28		lda ($28),y			lda 	(codePtr),y
.24cd	d5 a0		cmp $a0,x			cmp 	esInt1,x
.24cf	f0 10		beq $24e1			beq 	_GotoFound
.24d1					_GotoNext:
.24d1	a0 00		ldy #$00			ldy 	#0 							; go next line
.24d3	b1 28		lda ($28),y			lda 	(codePtr),y
.24d5	18		clc				clc
.24d6	65 28		adc $28				adc 	codePtr
.24d8	85 28		sta $28				sta 	codePtr
.24da	90 e1		bcc $24bd			bcc 	_GotoSearch
.24dc	e6 29		inc $29				inc 	codePtr+1
.24de	4c bd 24	jmp $24bd			jmp 	_GotoSearch
.24e1					_GotoFound:
.24e1	a0 03		ldy #$03			ldy 	#3 							; continue from that line
.24e3	60		rts				rts
.24e4					_GotoError:
.24e4	a2 0c		ldx #$0c			ldx 	#ErrorID_LineNumber
.24e6	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/commands/io/input.asm

=32					MaxInputSize = 32
.0cd3					InputBuffer:
>0cd3							.fill 	MaxInputSize+1
.24e9					Command_Input:
.24e9	b1 28		lda ($28),y			lda 	(codePtr),y 			; see what's next.
.24eb	c8		iny				iny
.24ec	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 				; ignore commas.
.24ee	f0 f9		beq $24e9			beq 	Command_Input
.24f0	88		dey				dey 							; undo consume
.24f1	c9 ca		cmp #$ca			cmp 	#TKW_COLON
.24f3	f0 54		beq $2549			beq 	_CIExit 				; : or EOL, exit
.24f5	c9 80		cmp #$80			cmp 	#TOK_EOL
.24f7	f0 50		beq $2549			beq 	_CIExit
.24f9	c9 40		cmp #$40			cmp 	#$40 					; variable ?
.24fb	90 12		bcc $250f			bcc 	_CIVariable
.24fd	c9 85		cmp #$85			cmp 	#TOK_STR 				; if not quoted string syntax error.
.24ff	d0 43		bne $2544			bne 	_CISyntax
.2501	a2 00		ldx #$00			ldx 	#0
.2503	20 27 33	jsr $3327			jsr 	EvaluateString 			; evaluate and print string
.2506	20 22 27	jsr $2722			jsr 	TOSToTemp0
.2509	20 18 26	jsr $2618			jsr 	PrintString
.250c	4c e9 24	jmp $24e9			jmp 	Command_Input
.250f					_CIVariable:
.250f	a2 00		ldx #$00			ldx 	#0 						; evaluate a reference.
.2511	20 6b 33	jsr $336b			jsr 	EvaluateReference  		; this is where its going
.2514					_CIRetry:
.2514	a9 3f		lda #$3f			lda 	#"?"					; print prompt
.2516	a2 14		ldx #$14		ldx	#20
.2518	20 f6 14	jsr $14f6		jsr	deviceHandler
.251b	98		tya				tya
.251c	48		pha				pha
.251d	20 5d 25	jsr $255d			jsr 	InputString 			; input a string (manually)
.2520	a2 01		ldx #$01			ldx 	#1
.2522	20 4a 25	jsr $254a			jsr 	BufferToStackX 			; make stack,x ref input string.
.2525	a5 90		lda $90				lda 	esType 					; if target type numeric
.2527	29 40		and #$40			and 	#$40 					; then convert to number
.2529	d0 11		bne $253c			bne 	_CIWrite
.252b	a2 01		ldx #$01			ldx 	#1
.252d	20 22 27	jsr $2722			jsr 	TOSToTemp0 				; string address in temp0, goes here.
.2530	a9 0a		lda #$0a			lda 	#10
.2532	20 38 38	jsr $3838			jsr 	MInt32FromString 		; convert it back from a string.
.2535	68		pla				pla
.2536	a8		tay				tay
.2537	b0 03		bcs $253c			bcs 	_CIWrite 				; successfully converted.
.2539	18		clc				clc 							; default fail FP conversion
.253a	90 d8		bcc $2514			bcc		_CIRetry				; failed, try again.
.253c					_CIWrite:
.253c	a2 00		ldx #$00			ldx 	#0
.253e	20 c0 26	jsr $26c0			jsr 	WriteValue
.2541	4c e9 24	jmp $24e9			jmp 	Command_Input
.2544					_CISyntax:
.2544	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.2546	20 18 15	jsr $1518		jsr	errorHandler
.2549					_CIExit:
.2549	60		rts				rts
.254a					BufferToStackX:
.254a	a9 d3		lda #$d3			lda 	#InputBuffer & $FF
.254c	95 98		sta $98,x			sta 	esInt0,x
.254e	a9 0c		lda #$0c			lda 	#InputBuffer >> 8
.2550	95 a0		sta $a0,x			sta 	esInt1,x
.2552	a9 00		lda #$00			lda 	#0
.2554	95 a8		sta $a8,x			sta 	esInt2,x
.2556	95 b0		sta $b0,x			sta 	esInt3,x
.2558	a9 40		lda #$40			lda 	#$40
.255a	95 90		sta $90,x			sta 	esType,x
.255c	60		rts				rts
.255d					InputString:
.255d	a9 00		lda #$00			lda 	#0
.255f	8d d3 0c	sta $0cd3			sta 	InputBuffer
.2562					_InputLoop:
.2562	a2 02		ldx #$02		ldx	#2
.2564	20 f6 14	jsr $14f6		jsr	deviceHandler
.2567	a2 0a		ldx #$0a		ldx	#10
.2569	20 f6 14	jsr $14f6		jsr	deviceHandler
.256c	c9 00		cmp #$00			cmp 	#0
.256e	f0 f2		beq $2562			beq 	_InputLoop
.2570	c9 08		cmp #$08			cmp 	#8
.2572	f0 19		beq $258d			beq 	_InputBackspace
.2574	c9 0d		cmp #$0d			cmp 	#13
.2576	f0 21		beq $2599			beq 	_InputExit
.2578	ae d3 0c	ldx $0cd3			ldx 	InputBuffer
.257b	e0 20		cpx #$20			cpx 	#MaxInputSize 			; too many characters
.257d	f0 e3		beq $2562			beq 	_InputLoop
.257f	9d d4 0c	sta $0cd4,x			sta 	InputBuffer+1,x 		; write char
.2582	ee d3 0c	inc $0cd3			inc 	InputBuffer 			; advance count.
.2585					_InputPrintLoop:
.2585	a2 14		ldx #$14		ldx	#20
.2587	20 f6 14	jsr $14f6		jsr	deviceHandler
.258a	4c 62 25	jmp $2562			jmp	 	_InputLoop
.258d					_InputBackspace:
.258d	ad d3 0c	lda $0cd3			lda 	InputBuffer 			; at start
.2590	f0 d0		beq $2562			beq 	_InputLoop
.2592	ce d3 0c	dec $0cd3			dec 	InputBuffer
.2595	a9 08		lda #$08			lda 	#8
.2597	d0 ec		bne $2585			bne 	_InputPrintLoop
.2599					_InputExit:
.2599	a2 06		ldx #$06		ldx	#6
.259b	20 f6 14	jsr $14f6		jsr	deviceHandler
.259e	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/io/print.asm

.0cf4					lastPrintToken:
>0cf4							.fill 	1
.259f					Command_Print:
.259f	a9 00		lda #$00			lda 	#0 							; clear LPT to a non token
.25a1	8d f4 0c	sta $0cf4			sta 	lastPrintToken
.25a4	88		dey				dey
.25a5					_PrintLoopSkip:
.25a5	c8		iny				iny
.25a6					_PrintLoop:
.25a6	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows
.25a8	c9 80		cmp #$80			cmp 	#TOK_EOL  					; done if end of line or colon
.25aa	f0 5b		beq $2607			beq 	_PrintExit
.25ac	c9 ca		cmp #$ca			cmp 	#TKW_COLON
.25ae	f0 57		beq $2607			beq 	_PrintExit
.25b0	8d f4 0c	sta $0cf4			sta 	lastPrintToken 				; update Last print token, so we check ; and ,
.25b3	c9 cc		cmp #$cc			cmp 	#TKW_SEMICOLON 				; ignore semicolon
.25b5	f0 ee		beq $25a5			beq 	_PrintLoopSkip
.25b7	c9 cd		cmp #$cd			cmp 	#TKW_QUOTE 					; ' is new line
.25b9	f0 3c		beq $25f7			beq	 	_PrintNewLine
.25bb	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; , is print tab
.25bd	f0 40		beq $25ff			beq 	_PrintTab
.25bf	20 11 33	jsr $3311			jsr 	EvaluateRoot 				; evaluate something at the root
.25c2	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.25c4	85 2a		sta $2a				sta 	temp0
.25c6	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.25c8	85 2b		sta $2b				sta 	1+(temp0)
.25ca	a5 90		lda $90				lda 	esType 						; get type
.25cc	f0 15		beq $25e3			beq		_PrintInteger
.25ce	4a		lsr a				lsr 	a 							; check for floating point
.25cf	b0 08		bcs $25d9			bcs 	_PrintFloat
.25d1					_PrintString:
.25d1	a2 00		ldx #$00			ldx 	#0 							; bottom string to temp0
.25d3	20 22 27	jsr $2722			jsr 	TOSToTemp0
.25d6	4c f1 25	jmp $25f1			jmp 	_PrintTemp0 				; print no leading space.
.25d9					_PrintFloat:
.25d9	a9 00		lda #$00			lda 	#0 							; stack level.
.25db	a2 16		ldx #$16		ldx	#22
.25dd	20 30 22	jsr $2230		jsr	floatingpointHandler
.25e0	4c ea 25	jmp $25ea			jmp 	_PrintSpaceTemp0
.25e3					_PrintInteger:
.25e3	a9 8a		lda #$8a			lda 	#10+$80 					; base 10 signed
.25e5	a2 00		ldx #$00			ldx 	#0 							; bottom stack element
.25e7	20 20 39	jsr $3920			jsr 	MInt32ToString				; convert to text
.25ea					_PrintSpaceTemp0:
.25ea	a9 20		lda #$20			lda 	#32
.25ec	a2 14		ldx #$14		ldx	#20
.25ee	20 f6 14	jsr $14f6		jsr	deviceHandler
.25f1					_PrintTemp0:
.25f1	20 18 26	jsr $2618			jsr 	PrintString
.25f4	4c a6 25	jmp $25a6			jmp 	_PrintLoop
.25f7					_PrintNewLine:
.25f7	a2 06		ldx #$06		ldx	#6
.25f9	20 f6 14	jsr $14f6		jsr	deviceHandler
.25fc	4c a5 25	jmp $25a5			jmp 	_PrintLoopSkip
.25ff					_PrintTab:
.25ff	a2 1a		ldx #$1a		ldx	#26
.2601	20 f6 14	jsr $14f6		jsr	deviceHandler
.2604	4c a5 25	jmp $25a5			jmp 	_PrintLoopSkip
.2607					_PrintExit:
.2607	ad f4 0c	lda $0cf4			lda		lastPrintToken 				; check last token
.260a	c9 cc		cmp #$cc			cmp 	#TKW_SEMICOLON 				; if , or ; do not print NL
.260c	f0 09		beq $2617			beq 	_PrintExit2
.260e	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.2610	f0 05		beq $2617			beq 	_PrintExit2
.2612	a2 06		ldx #$06		ldx	#6
.2614	20 f6 14	jsr $14f6		jsr	deviceHandler
.2617					_PrintExit2:
.2617	60		rts				rts
.2618					PrintString:
.2618	8a		txa				txa
.2619	48		pha				pha
.261a	98		tya				tya
.261b	48		pha				pha
.261c	a0 00		ldy #$00			ldy 	#0							; get length
.261e	b1 2a		lda ($2a),y			lda 	(temp0),y
.2620	aa		tax				tax 								; into X
.2621	e0 00		cpx #$00	_PSLoop:cpx 	#0 							; finished ?
.2623	f0 10		beq $2635			beq 	_PSExit
.2625	ca		dex				dex
.2626	8a		txa				txa
.2627	48		pha				pha
.2628	c8		iny				iny
.2629	b1 2a		lda ($2a),y			lda 	(temp0),y
.262b	a2 14		ldx #$14		ldx	#20
.262d	20 f6 14	jsr $14f6		jsr	deviceHandler
.2630	68		pla				pla
.2631	aa		tax				tax
.2632	4c 21 26	jmp $2621			jmp 	_PSLoop
.2635					_PSExit:
.2635	68		pla				pla
.2636	a8		tay				tay
.2637	68		pla				pla
.2638	aa		tax				tax
.2639	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/io/text.asm

.263a					Command_CLS:
.263a	a2 04		ldx #$04		ldx	#4
.263c	20 f6 14	jsr $14f6		jsr	deviceHandler
.263f	60		rts				rts
.2640					Command_Ink:
.2640	a2 00		ldx #$00			ldx 	#0
.2642	20 3a 33	jsr $333a			jsr 	EvaluateSmallInteger
.2645	a2 08		ldx #$08		ldx	#8
.2647	20 f6 14	jsr $14f6		jsr	deviceHandler
.264a	60		rts				rts
.264b					Command_Paper:
.264b	a2 00		ldx #$00			ldx 	#0
.264d	20 3a 33	jsr $333a			jsr 	EvaluateSmallInteger
.2650	a2 12		ldx #$12		ldx	#18
.2652	20 f6 14	jsr $14f6		jsr	deviceHandler
.2655	60		rts				rts
.2656					Command_Locate:
.2656	a2 00		ldx #$00			ldx 	#0
.2658	20 3a 33	jsr $333a			jsr 	EvaluateSmallInteger
.265b	20 4a 3a	jsr $3a4a			jsr 	CheckComma
.265e	e8		inx				inx
.265f	20 3a 33	jsr $333a			jsr 	EvaluateSmallInteger
.2662	98		tya				tya
.2663	48		pha				pha
.2664	a4 99		ldy $99				ldy 	esInt0+1
.2666	a5 98		lda $98				lda 	esInt0
.2668	a2 10		ldx #$10		ldx	#16
.266a	20 f6 14	jsr $14f6		jsr	deviceHandler
.266d	68		pla				pla
.266e	a8		tay				tay
.266f	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/io/vdu.asm

.2670					Command_VDU:
.2670	20 30 33	jsr $3330			jsr 	EvaluateRootInteger 			; get integer at root.
.2673	a5 98		lda $98				lda 	esInt0
.2675	a2 14		ldx #$14		ldx	#20
.2677	20 f6 14	jsr $14f6		jsr	deviceHandler
.267a					_CVNext:
.267a	b1 28		lda ($28),y			lda 	(codePtr),y 					; what follows ?
.267c	c8		iny				iny
.267d	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 						; comma, do again
.267f	f0 ef		beq $2670			beq 	Command_VDU
.2681	c9 cc		cmp #$cc			cmp 	#TKW_SEMICOLON 					; semicolon, print MSB
.2683	d0 0a		bne $268f			bne 	_CVExit
.2685	a5 a0		lda $a0				lda 	esInt1
.2687	a2 14		ldx #$14		ldx	#20
.2689	20 f6 14	jsr $14f6		jsr	deviceHandler
.268c	4c 7a 26	jmp $267a			jmp 	_CVNext
.268f	88		dey		_CVExit:dey
.2690	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/link.asm


;******  Return to file: main/main.asm


;******  Processing file: main/commands/misc/assert.asm

.2691					Command_Assert:
.2691	20 30 33	jsr $3330			jsr 	EvaluateRootInteger 		; what is being asserted.
.2694	20 f1 39	jsr $39f1			jsr 	MInt32Zero 					; is it true ?
.2697	f0 01		beq $269a			beq 	_CAError
.2699	60		rts				rts
.269a					_CAError:
.269a	a2 04		ldx #$04			ldx 	#ErrorID_Assert
.269c	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/commands/misc/dim.asm

.269f					Command_Dim:
.269f	a2 04		ldx #$04		ldx	#4
.26a1	20 bf 49	jsr $49bf		jsr	variableHandler
.26a4	b1 28		lda ($28),y			lda 	(codePtr),y 				; see what follows.
.26a6	c8		iny				iny
.26a7	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; comma follows, go back and do next
.26a9	f0 f4		beq $269f			beq 	Command_Dim
.26ab	88		dey				dey 								; unpick get
.26ac	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/misc/let.asm

.26ad					CommandLet:
.26ad	a2 00		ldx #$00			ldx 	#0  						; get address to write.
.26af	20 6b 33	jsr $336b			jsr 	EvaluateReference
.26b2	a9 8d		lda #$8d			lda 	#TKW_EQUAL 					; check for equals
.26b4	20 32 3a	jsr $3a32			jsr 	CheckToken
.26b7	e8		inx				inx 								; do RHS
.26b8	20 13 33	jsr $3313			jsr 	Evaluate 					; evaluate and dereference
.26bb	ca		dex				dex
.26bc	20 c0 26	jsr $26c0			jsr 	WriteValue 					; write it out
.26bf	60		rts				rts
.26c0					WriteValue:
.26c0	98		tya				tya
.26c1	48		pha				pha
.26c2	20 22 27	jsr $2722			jsr 	TOSToTemp0 					; set temp0 to point to target address.
.26c5	b5 90		lda $90,x			lda 	esType,x 					; check the string flags match
.26c7	55 91		eor $91,x			eor 	esType+1,x 					; one string, one number causes an error.
.26c9	29 40		and #$40			and 	#$40
.26cb	d0 50		bne $271d			bne		_WVType
.26cd	a0 01		ldy #$01			ldy 	#1 							; for string, copy 0 and 1.
.26cf	b5 90		lda $90,x			lda 	esType,x 					; check for string assignment
.26d1	29 40		and #$40			and 	#$40
.26d3	d0 1f		bne $26f4			bne 	_WVCopyString
.26d5	b5 90		lda $90,x			lda 	esType,x 					; check both are integer.
.26d7	15 91		ora $91,x			ora 	esType+1,x
.26d9	4a		lsr a				lsr 	a
.26da	90 22		bcc $26fe			bcc 	_WVCopyData4 				; copy 4 data bytes.
.26dc	b5 90		lda $90,x			lda 	esType,x
.26de	4a		lsr a				lsr 	a
.26df	90 3c		bcc $271d			bcc 	_WVType
.26e1	e8		inx				inx 								; force the value being written to be a float.
.26e2	20 75 2f	jsr $2f75			jsr 	BPMakeFloat
.26e5	ca		dex				dex
.26e6	20 22 27	jsr $2722			jsr 	TOSToTemp0 					; set Temp0 to write address
.26e9	e8		inx				inx
.26ea	8a		txa				txa
.26eb	a2 22		ldx #$22		ldx	#34
.26ed	20 30 22	jsr $2230		jsr	floatingpointHandler
.26f0	aa		tax				tax
.26f1	4c 1a 27	jmp $271a			jmp 	_WVCopyExit
.26f4					_WVCopyString:
.26f4	8a		txa				txa
.26f5	a2 10		ldx #$10		ldx	#16
.26f7	20 75 3d	jsr $3d75		jsr	stringHandler
.26fa	aa		tax				tax
.26fb	4c 1a 27	jmp $271a			jmp 	_WVCopyExit
.26fe					_WVCopyData4:
.26fe	b5 90		lda $90,x			lda 	esType,x 					; is the int ref a byte ref ?
.2700	29 20		and #$20			and 	#$20 						; (e.g. is bit 5 set)
.2702	d0 10		bne $2714			bne 	_WVCopyData1
.2704	a0 03		ldy #$03			ldy 	#3
.2706	b5 b1		lda $b1,x			lda 	esInt3+1,x
.2708	91 2a		sta ($2a),y			sta 	(temp0),y
.270a	88		dey				dey
.270b	b5 a9		lda $a9,x			lda 	esInt2+1,x
.270d	91 2a		sta ($2a),y			sta 	(temp0),y
.270f	88		dey				dey
.2710	b5 a1		lda $a1,x			lda 	esInt1+1,x
.2712	91 2a		sta ($2a),y			sta 	(temp0),y
.2714					_WVCopyData1:
.2714	a0 00		ldy #$00			ldy 	#0
.2716	b5 99		lda $99,x			lda 	esInt0+1,x
.2718	91 2a		sta ($2a),y			sta 	(temp0),y
.271a					_WVCopyExit:
.271a	68		pla				pla
.271b	a8		tay				tay
.271c	60		rts				rts
.271d					_WVType:
.271d	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.271f	20 18 15	jsr $1518		jsr	errorHandler
.2722					TOSToTemp0:
.2722	b5 98		lda $98,x			lda 	esInt0,x
.2724	85 2a		sta $2a				sta 	temp0
.2726	b5 a0		lda $a0,x			lda 	esInt1,x
.2728	85 2b		sta $2b				sta 	temp0+1
.272a	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/misc/poke.asm

.272b					Command_Poke:
.272b	a9 01		lda #$01			lda 	#1
.272d	d0 06		bne $2735			bne 	PokeGeneral
.272f					Command_Doke:
.272f	a9 02		lda #$02			lda 	#2
.2731	d0 02		bne $2735			bne 	PokeGeneral
.2733					Command_Loke:
.2733	a9 03		lda #$03			lda 	#3
.2735					PokeGeneral:
.2735	48		pha				pha 								; save id (PDL = 123)
.2736	20 30 33	jsr $3330			jsr 	EvaluateRootInteger 		; target address
.2739	20 4a 3a	jsr $3a4a			jsr	 	CheckComma
.273c	e8		inx				inx
.273d	20 32 33	jsr $3332			jsr 	EvaluateInteger 			; what value to POKE ?
.2740	ca		dex				dex
.2741	20 22 27	jsr $2722			jsr 	TOSToTemp0 					; temp0 points to the target address
.2744	84 32		sty $32				sty 	tempShort 					; save Y
.2746	68		pla				pla 								; get copy type (1-3) and dispatch
.2747	aa		tax				tax
.2748	ca		dex				dex
.2749	f0 14		beq $275f			beq 	_Poke1
.274b	ca		dex				dex
.274c	f0 0b		beq $2759			beq 	_Poke2
.274e	a0 03		ldy #$03			ldy 	#3							; put 4 bytes
.2750	a5 b1		lda $b1				lda 	esInt3+1
.2752	91 2a		sta ($2a),y			sta 	(temp0),y
.2754	88		dey				dey
.2755	a5 a9		lda $a9				lda 	esInt2+1
.2757	91 2a		sta ($2a),y			sta 	(temp0),y
.2759					_Poke2:
.2759	a0 01		ldy #$01			ldy 	#1
.275b	a5 a1		lda $a1				lda 	esInt1+1
.275d	91 2a		sta ($2a),y			sta 	(temp0),y
.275f					_Poke1:
.275f	a0 00		ldy #$00			ldy 	#0
.2761	a5 99		lda $99				lda 	esInt0+1
.2763	91 2a		sta ($2a),y			sta 	(temp0),y
.2765	a4 32		ldy $32				ldy 	tempShort 					; restore Y and exit
.2767	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/misc/rem.asm

.2768					Command_Rem:
.2768					Command_Rem2:
.2768	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows
.276a	c9 85		cmp #$85			cmp 	#TOK_STR 					; if it is a string then skip it.
.276c	d0 06		bne $2774			bne 	_CRNotString
.276e	c8		iny				iny
.276f	98		tya				tya
.2770	38		sec				sec
.2771	71 28		adc ($28),y			adc 	(codePtr),y 				; get string size, add to Y, +1 for the length
.2773	a8		tay				tay
.2774					_CRNotString:
.2774	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/misc/stopend.asm

.2775					CommandStop:
.2775	a2 06		ldx #$06			ldx 	#ErrorID_Stop
.2777	20 18 15	jsr $1518		jsr	errorHandler
.277a					CommandEnd:
.277a	4c b3 3a	jmp $3ab3			jmp 	WarmStart
.277d					CommandXemu:
.277d	4c ff ff	jmp $ffff			jmp 	$FFFF 						; fudge to crash out of emulator
.2780					AdvanceNextLine:
.2780	a0 00		ldy #$00			ldy 	#0 							; get offset
.2782	b1 28		lda ($28),y			lda 	(codePtr),y
.2784	18		clc				clc 								; add to codePtr
.2785	65 28		adc $28				adc 	codePtr
.2787	85 28		sta $28				sta 	codePtr
.2789	90 02		bcc $278d			bcc 	_ANLNoCarry
.278b	e6 29		inc $29				inc 	codePtr+1
.278d					_ANLNoCarry:
.278d	b1 28		lda ($28),y			lda 	(codePtr),y 				; if end of program (or was just stand alone.
.278f	f0 e9		beq $277a			beq 	CommandEnd 					; execute END
.2791	a0 03		ldy #$03			ldy 	#3 							; start of tokens on line.
.2793	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/for.asm

.2794					Command_FOR:
.2794	a9 46		lda #$46			lda 	#markerFOR 					; allocate the space and set the marker
.2796	a2 0b		ldx #$0b			ldx 	#11
.2798	20 65 3a	jsr $3a65			jsr 	RSClaim
.279b	20 ad 26	jsr $26ad			jsr 	CommandLET 					; do the same as LET FOR [a = 4]
.279e	a5 90		lda $90				lda 	esType 						; check type should be integer reference.
.27a0	c9 80		cmp #$80			cmp 	#$80 						; we do not do FOR floats.
.27a2	d0 4c		bne $27f0			bne 	_CFType
.27a4	a9 ce		lda #$ce			lda 	#TKW_TO 					; check TO present.
.27a6	20 32 3a	jsr $3a32			jsr 	CheckToken
.27a9	a2 01		ldx #$01			ldx 	#1 							; keep the variable address in stack 0
.27ab	20 32 33	jsr $3332			jsr 	EvaluateInteger				; get terminal value in stack 1
.27ae	98		tya				tya
.27af	48		pha				pha
.27b0	a0 04		ldy #$04			ldy 	#4
.27b2	a5 98		lda $98				lda		esInt0 						; copy the address of the index variable into 4 and 5
.27b4	91 37		sta ($37),y			sta 	(rsPointer),y
.27b6	c8		iny				iny
.27b7	a5 a0		lda $a0				lda		esInt1
.27b9	91 37		sta ($37),y			sta 	(rsPointer),y
.27bb	c8		iny				iny
.27bc	a9 01		lda #$01			lda 	#1  						; the default step in 6, (-128 .. 127 only)
.27be	91 37		sta ($37),y			sta 	(rsPointer),y
.27c0	c8		iny				iny
.27c1	a5 99		lda $99				lda		esInt0+1 					; terminal value in 7 to 11.
.27c3	91 37		sta ($37),y			sta 	(rsPointer),y
.27c5	c8		iny				iny
.27c6	a5 a1		lda $a1				lda		esInt1+1
.27c8	91 37		sta ($37),y			sta 	(rsPointer),y
.27ca	c8		iny				iny
.27cb	a5 a9		lda $a9				lda		esInt2+1
.27cd	91 37		sta ($37),y			sta 	(rsPointer),y
.27cf	c8		iny				iny
.27d0	a5 b1		lda $b1				lda		esInt3+1
.27d2	91 37		sta ($37),y			sta 	(rsPointer),y
.27d4	68		pla				pla
.27d5	a8		tay				tay
.27d6	b1 28		lda ($28),y			lda 	(codePtr),y 				; followed by STEP.
.27d8	c9 cf		cmp #$cf			cmp 	#TKW_STEP
.27da	d0 0e		bne $27ea			bne 	_CFDone
.27dc	c8		iny				iny									; skip over step.
.27dd	20 32 33	jsr $3332			jsr 	EvaluateInteger 			; get step
.27e0	98		tya				tya
.27e1	48		pha				pha
.27e2	b5 98		lda $98,x			lda 	esInt0,x 					; copy it into step (bit lazy here)
.27e4	a0 06		ldy #$06			ldy 	#6
.27e6	91 37		sta ($37),y			sta 	(rsPointer),y
.27e8	68		pla				pla
.27e9	a8		tay				tay
.27ea					_CFDone:
.27ea	a9 01		lda #$01			lda 	#1
.27ec	20 91 3a	jsr $3a91			jsr 	RSSavePosition 				; save position.
.27ef	60		rts				rts
.27f0					_CFType:
.27f0	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.27f2	20 18 15	jsr $1518		jsr	errorHandler
.27f5					Command_NEXT:
.27f5	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.27f7	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.27f9	c9 46		cmp #$46			cmp 	#markerFOR 						; does it match
.27fb	f0 05		beq $2802			beq 	_isok
.27fd	a2 10		ldx #$10			ldx 	#ErrorID_nextErr
.27ff	20 18 15	jsr $1518		jsr	errorHandler
.2802					_isok:
.2802	b1 28		lda ($28),y			lda 	(codePtr),y 				; is it NEXT <index>
.2804	c9 40		cmp #$40			cmp 	#$40 						; e.g. a variable follows 00-3F
.2806	b0 18		bcs $2820			bcs 	_CNNoIndex
.2808	a2 00		ldx #$00			ldx 	#0 							; start on stack
.280a	20 6b 33	jsr $336b			jsr 	EvaluateReference 			; this is the variable/parameter to localise.
.280d	98		tya				tya
.280e	48		pha				pha
.280f	a0 04		ldy #$04			ldy 	#4 							; check same variable as that stored at +4,+5
.2811	b1 37		lda ($37),y			lda 	(rsPointer),y
.2813	d5 98		cmp $98,x			cmp 	esInt0,x
.2815	d0 76		bne $288d			bne 	_CNBadIndex
.2817	c8		iny				iny
.2818	b1 37		lda ($37),y			lda 	(rsPointer),y
.281a	d5 a0		cmp $a0,x			cmp 	esInt1,x
.281c	d0 6f		bne $288d			bne 	_CNBadIndex
.281e	68		pla				pla
.281f	a8		tay				tay
.2820					_CNNoIndex:
.2820	98		tya				tya
.2821	48		pha				pha
.2822	a0 04		ldy #$04			ldy 	#4 							; make temp0 point to the index
.2824	b1 37		lda ($37),y			lda 	(rsPointer),y
.2826	85 2a		sta $2a				sta 	temp0
.2828	c8		iny				iny
.2829	b1 37		lda ($37),y			lda 	(rsPointer),y
.282b	85 2b		sta $2b				sta 	temp0+1
.282d	c8		iny				iny
.282e	a2 00		ldx #$00			ldx 	#0 							; X is the sign extend part of the step.
.2830	b1 37		lda ($37),y			lda 	(rsPointer),y 				; get the step.
.2832	85 2f		sta $2f				sta 	temp2+1 					; save for later.
.2834	10 01		bpl $2837			bpl 	_CNSignX
.2836	ca		dex				dex  								; X = $FF
.2837					_CNSignX:
.2837	18		clc				clc 								; add to the LSB
.2838	a0 00		ldy #$00			ldy 	#0
.283a	71 2a		adc ($2a),y			adc 	(temp0),y
.283c	91 2a		sta ($2a),y			sta 	(temp0),y
.283e					_CNPropogate:
.283e	c8		iny				iny  								; add the sign extended in X to the rest.
.283f	8a		txa				txa
.2840	71 2a		adc ($2a),y			adc 	(temp0),y
.2842	91 2a		sta ($2a),y			sta 	(temp0),y
.2844	c8		iny				iny
.2845	8a		txa				txa
.2846	71 2a		adc ($2a),y			adc 	(temp0),y
.2848	91 2a		sta ($2a),y			sta 	(temp0),y
.284a	c8		iny				iny
.284b	8a		txa				txa
.284c	71 2a		adc ($2a),y			adc 	(temp0),y
.284e	91 2a		sta ($2a),y			sta 	(temp0),y
.2850	18		clc				clc 								; point temp1 to the terminal value stored in the stack.
.2851	a5 37		lda $37				lda 	rsPointer
.2853	69 07		adc #$07			adc 	#7
.2855	85 2c		sta $2c				sta 	temp1
.2857	a9 00		lda #$00			lda 	#0
.2859	85 2e		sta $2e				sta 	temp2 						; clear temp2, which is the OR of all the subtractions.
.285b	a8		tay				tay 								; and clear the Y register again.
.285c	65 38		adc $38				adc 	rsPointer+1
.285e	85 2d		sta $2d				sta 	temp1+1
.2860	38		sec				sec 								; calculate current - limit oring interim values.
.2861	20 99 28	jsr $2899			jsr 	_CNCompare 					; each of these does a byte.
.2864	20 99 28	jsr $2899			jsr 	_CNCompare 					; we calculate the OR of all these subtractions.
.2867	20 99 28	jsr $2899			jsr 	_CNCompare 					; and the carry of the subtraction.
.286a	20 99 28	jsr $2899			jsr 	_CNCompare
.286d	50 02		bvc $2871			bvc 	_CNNoOverflow 				; converts to a signed comparison on the sign bit.
.286f	49 80		eor #$80			eor 	#$80
.2871					_CNNoOverflow:
.2871	a4 2f		ldy $2f				ldy 	temp2+1						; get step back
.2873	30 1d		bmi $2892			bmi 	_CNCheckDownto
.2875	c9 00		cmp #$00			cmp 	#0
.2877	30 0c		bmi $2885			bmi 	_CNLoopRound 				; loop round if < =
.2879	a5 2e		lda $2e				lda 	temp2
.287b	f0 08		beq $2885			beq 	_CNLoopRound
.287d					_CNLoopExit:
.287d	68		pla				pla
.287e	a8		tay				tay
.287f	a9 0b		lda #$0b			lda 	#11
.2881	20 87 3a	jsr $3a87			jsr 	RSFree
.2884	60		rts				rts
.2885					_CNLoopRound:
.2885	68		pla				pla
.2886	a8		tay				tay
.2887	a9 01		lda #$01			lda 	#1
.2889	20 a4 3a	jsr $3aa4			jsr 	RSLoadPosition				; go back to the loop top
.288c	60		rts				rts
.288d					_CNBadIndex:
.288d	a2 13		ldx #$13			ldx 	#ErrorID_BadIndex
.288f	20 18 15	jsr $1518		jsr	errorHandler
.2892					_CNCheckDownto:
.2892	c9 00		cmp #$00			cmp 	#0
.2894	10 ef		bpl $2885			bpl 	_CNLoopRound
.2896	4c 7d 28	jmp $287d			jmp 	_CNLoopExit
.2899					_CNCompare:
.2899	b1 2a		lda ($2a),y			lda 	(temp0),y 					; do the subtraction - compare don't care about answer
.289b	f1 2c		sbc ($2c),y			sbc 	(temp1),y
.289d	05 2e		ora $2e				ora 	temp2 						; Or into temp2 (does not affect carry)
.289f	85 2e		sta $2e				sta 	temp2
.28a1	c8		iny				iny
.28a2	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/if.asm

.28a3					CommandIf:
.28a3	20 30 33	jsr $3330			jsr 	EvaluateRootInteger 		; get what's being tested.
.28a6	b1 28		lda ($28),y			lda 	(codePtr),y 				; check for IF .. THEN or IF .. GOTO which are single lines.
.28a8	c9 91		cmp #$91			cmp 	#TKW_GOTO
.28aa	f0 04		beq $28b0			beq 	_IfSimple
.28ac	c9 a1		cmp #$a1			cmp 	#TKW_THEN
.28ae	d0 1b		bne $28cb			bne 	_IfComplex
.28b0					_IfSimple:
.28b0	20 f1 39	jsr $39f1			jsr 	MInt32Zero					; check if TOS zero
.28b3	f0 10		beq $28c5			beq 	_IfEOL 						; go to next line.
.28b5	b1 28		lda ($28),y			lda 	(codePtr),y 				; get and skip token.
.28b7	c8		iny				iny
.28b8	c9 91		cmp #$91			cmp 	#TKW_GOTO 					; was it if GOTO ?
.28ba	f0 0c		beq $28c8			beq 	_IfGoto 					; do the Goto code
.28bc	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows the THEN ?
.28be	29 c0		and #$c0			and 	#$C0 						; check $40-$7F
.28c0	c9 40		cmp #$40			cmp 	#$40 						; e.g. number IF x = 0 THEN 170
.28c2	f0 04		beq $28c8			beq 	_IfGoto
.28c4	60		rts				rts 								; else continue on this line.
.28c5					_IfEOL:
.28c5	4c 80 27	jmp $2780			jmp 	AdvanceNextLine 			; go to next line
.28c8					_IfGoto:
.28c8	4c b7 24	jmp $24b7			jmp 	CommandGoto
.28cb					_IfComplex:
.28cb	20 f1 39	jsr $39f1			jsr 	MInt32Zero 					; is it true ?
.28ce	f0 01		beq $28d1			beq 	_IFSkip 					; if non-zero then skip to ELSE/ENDIF
.28d0	60		rts				rts 								; else continue.
.28d1					_IFSkip:
.28d1	a9 d6		lda #$d6			lda	 	#TKW_ELSE 					; test failed, go to ELSE or ENDIF whichever comes first.
.28d3	a2 a2		ldx #$a2			ldx 	#TKW_ENDIF
.28d5	4c 6d 2b	jmp $2b6d			jmp		ScanForward
.28d8					Command_ELSE:
.28d8	a2 a2		ldx #$a2			ldx 	#TKW_ENDIF
.28da	8a		txa				txa
.28db	4c 6d 2b	jmp $2b6d			jmp		ScanForward
.28de					Command_ENDIF:
.28de	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/local.asm

.0cf5					storeSize:
>0cf5							.fill 	1
.28df					CommandLocal:
.28df	a2 00		ldx #$00			ldx 	#0
.28e1	20 fd 28	jsr $28fd			jsr 	LocaliseVariable 			; localise one.
.28e4					_CLCheckNext:
.28e4	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows ?
.28e6	c8		iny				iny
.28e7	c9 8d		cmp #$8d			cmp 	#TKW_EQUAL 					; something local "x = 2" ?
.28e9	f0 06		beq $28f1			beq 	_CLAssignment
.28eb	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; comma try again.
.28ed	f0 f0		beq $28df			beq 	CommandLocal
.28ef	88		dey				dey
.28f0	60		rts				rts
.28f1					_CLAssignment:
.28f1	a2 01		ldx #$01			ldx 	#1
.28f3	20 13 33	jsr $3313			jsr 	Evaluate 					; evaluate RHS
.28f6	ca		dex				dex
.28f7	20 c0 26	jsr $26c0			jsr 	WriteValue
.28fa	4c e4 28	jmp $28e4			jmp 	_CLCheckNext
.28fd					LocaliseVariable:
.28fd	b1 28		lda ($28),y			lda 	(codePtr),y 				; check it's a variable.
.28ff	c9 40		cmp #$40			cmp 	#$40
.2901	b0 67		bcs $296a			bcs 	_LVSyntax
.2903	8a		txa				txa 								; get the address of that variable.
.2904	a2 02		ldx #$02		ldx	#2
.2906	20 bf 49	jsr $49bf		jsr	variableHandler
.2909	aa		tax				tax
.290a	8a		txa				txa
.290b	48		pha				pha
.290c	98		tya				tya
.290d	48		pha				pha
.290e	20 22 27	jsr $2722			jsr 	TOSToTemp0 					; the address of the variable is now in temp0.
.2911	b5 90		lda $90,x			lda 	esType,x 					; get the type
.2913	0a		asl a				asl 	a
.2914	10 16		bpl $292c			bpl 	_LVPushNumber
.2916	a0 00		ldy #$00			ldy 	#0 							; put address of data in temp1
.2918	b1 2a		lda ($2a),y			lda 	(temp0),y
.291a	c8		iny				iny
.291b	85 2c		sta $2c				sta 	temp1
.291d	b1 2a		lda ($2a),y			lda 	(temp0),y
.291f	85 2d		sta $2d				sta 	temp1+1
.2921	a0 00		ldy #$00			ldy 	#0 	 						; get length
.2923	b1 2c		lda ($2c),y			lda 	(temp1),y
.2925	aa		tax				tax 								; into X
.2926	e8		inx				inx 								; +1 for length.
.2927	a9 24		lda #$24			lda 	#markerString
.2929	4c 41 29	jmp $2941			jmp 	_LVWriteFrame
.292c					_LVPushNumber:
.292c	a5 2a		lda $2a				lda 	temp0 						; storage address and data source are the same
.292e	85 2c		sta $2c				sta 	temp1
.2930	a5 2b		lda $2b				lda 	temp0+1
.2932	85 2d		sta $2d				sta 	temp1+1
.2934	b5 90		lda $90,x			lda 	esType,x 					; put float flag into carry.
.2936	4a		lsr a				lsr 	a
.2937	a9 25		lda #$25			lda 	#markerInt 					; get marker and size.
.2939	a2 04		ldx #$04			ldx 	#VarISize
.293b	90 04		bcc $2941			bcc 	_LVIsInteger
.293d	a9 23		lda #$23			lda 	#markerFloat
.293f	a2 06		ldx #$06			ldx 	#VarFSize
.2941					_LVIsInteger:
.2941					_LVWriteFrame:
.2941	8e f5 0c	stx $0cf5			stx 	storeSize 					; number of bytes to copy from (temp0)
.2944	e8		inx				inx 								; allocate 3 bytes, 2 for the address, 1 for the marker.
.2945	e8		inx				inx
.2946	e8		inx				inx
.2947	20 65 3a	jsr $3a65			jsr 	RSClaim 					; create the stack frame.
.294a	a5 2a		lda $2a				lda 	temp0 						; copy the target address to slots 1 & 2
.294c	a0 01		ldy #$01			ldy 	#1
.294e	91 37		sta ($37),y			sta 	(rsPointer),y
.2950	c8		iny				iny
.2951	a5 2b		lda $2b				lda 	temp0+1
.2953	91 37		sta ($37),y			sta 	(rsPointer),y
.2955	a0 00		ldy #$00			ldy 	#0
.2957					_LVCopyData:
.2957	b1 2c		lda ($2c),y			lda 	(temp1),y 					; get data from source, temp1
.2959	c8		iny				iny 								; write allowing for the header bit.
.295a	c8		iny				iny
.295b	c8		iny				iny
.295c	91 37		sta ($37),y			sta 	(rsPointer),y
.295e	88		dey				dey
.295f	88		dey				dey
.2960	ce f5 0c	dec $0cf5			dec 	storeSize 					; do it storesize times
.2963	d0 f2		bne $2957			bne 	_LVCopyData
.2965	68		pla				pla
.2966	a8		tay				tay
.2967	68		pla				pla
.2968	aa		tax				tax
.2969	60		rts				rts
.296a					_LVSyntax:
.296a	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.296c	20 18 15	jsr $1518		jsr	errorHandler
.296f					RestoreLocals:
.296f	a2 00		ldx #$00			ldx 	#0
.2971	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.2973	c9 40		cmp #$40			cmp	 	#64
.2975	90 01		bcc $2978			bcc 	_RLocal
.2977	60		rts				rts
.2978					_RLocal:
.2978	8a		txa				txa
.2979	48		pha				pha
.297a	98		tya				tya
.297b	48		pha				pha
.297c	a0 01		ldy #$01			ldy 	#1 							; copy target address to temp0
.297e	b1 37		lda ($37),y			lda 	(rsPointer),y
.2980	85 2a		sta $2a				sta 	temp0
.2982	c8		iny				iny
.2983	b1 37		lda ($37),y			lda 	(rsPointer),y
.2985	85 2b		sta $2b				sta 	temp0+1
.2987	a0 00		ldy #$00			ldy 	#0 							; get type back.
.2989	b1 37		lda ($37),y			lda 	(rsPointer),y
.298b	c9 24		cmp #$24			cmp 	#markerString 				; string is ... different :)
.298d	f0 28		beq $29b7			beq 	_RString
.298f	a2 04		ldx #$04			ldx		#VARISize 					; size integer
.2991	c9 25		cmp #$25			cmp 	#markerInt
.2993	f0 02		beq $2997			beq 	_RIsInteger
.2995	a2 06		ldx #$06			ldx 	#VARFSize 					; size float
.2997					_RIsInteger:
.2997	8a		txa				txa
.2998	48		pha				pha
.2999	a0 03		ldy #$03			ldy 	#3							; start size to copy back from pointer.
.299b					_RCopyBack:
.299b	b1 37		lda ($37),y			lda 	(rsPointer),y
.299d	88		dey				dey
.299e	88		dey				dey
.299f	88		dey				dey
.29a0	91 2a		sta ($2a),y			sta 	(temp0),y
.29a2	c8		iny				iny
.29a3	c8		iny				iny
.29a4	c8		iny				iny
.29a5	c8		iny				iny
.29a6	ca		dex				dex
.29a7	d0 f2		bne $299b			bne 	_RCopyBack
.29a9	68		pla				pla 								; get size add 3
.29aa	18		clc				clc
.29ab	69 03		adc #$03			adc 	#3 							; (2 for address one for marker)
.29ad					_RRestoreAAndLoop:
.29ad	20 87 3a	jsr $3a87			jsr 	RSFree
.29b0	68		pla				pla
.29b1	a8		tay				tay
.29b2	68		pla				pla
.29b3	aa		tax				tax
.29b4	4c 6f 29	jmp $296f			jmp 	RestoreLocals 				; go see if there are any more locals.
.29b7					_RString:
.29b7	a2 00		ldx #$00			ldx 	#0
.29b9	a0 01		ldy #$01			ldy 	#1 							; set up for a string write.
.29bb	b1 37		lda ($37),y			lda 	(rsPointer),y
.29bd	95 98		sta $98,x			sta 	esInt0,x
.29bf	c8		iny				iny
.29c0	b1 37		lda ($37),y			lda 	(rsPointer),y
.29c2	95 a0		sta $a0,x			sta 	esInt1,x
.29c4	18		clc				clc
.29c5	a5 37		lda $37				lda 	rsPointer
.29c7	69 03		adc #$03			adc 	#3
.29c9	95 99		sta $99,x			sta 	esInt0+1,x
.29cb	a5 38		lda $38				lda 	rsPointer+1
.29cd	69 00		adc #$00			adc 	#0
.29cf	95 a1		sta $a1,x			sta 	esInt1+1,x
.29d1	8a		txa				txa
.29d2	a2 10		ldx #$10		ldx	#16
.29d4	20 75 3d	jsr $3d75		jsr	stringHandler
.29d7	a0 03		ldy #$03			ldy 	#3 							; get string length
.29d9	b1 37		lda ($37),y			lda 	(rsPointer),y
.29db	18		clc				clc
.29dc	69 04		adc #$04			adc 	#4 							; add 4 (pointer, marker, length) to restore.
.29de	4c ad 29	jmp $29ad			jmp 	_RRestoreAAndLoop

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/proc.asm

.0cf6					paramCount:
>0cf6							.fill 	1
.29e1					CallProc:
.29e1	20 69 2a	jsr $2a69			jsr 	FindProcedure 				; find procedure, put in temp0. A contains name length.
.29e4	48		pha				pha 								; save length on stack
.29e5	85 32		sta $32				sta 	tempShort 					; save length in tempShort
.29e7	a5 2b		lda $2b				lda 	temp0+1 					; save procedure target on stack.
.29e9	48		pha				pha
.29ea	a5 2a		lda $2a				lda 	temp0
.29ec	48		pha				pha
.29ed	98		tya				tya 								; calculate Y + length
.29ee	18		clc				clc
.29ef	65 32		adc $32				adc 	tempShort
.29f1	a8		tay				tay
.29f2	a2 00		ldx #$00			ldx 	#0 							; where the first parameter goes - 1
.29f4					_CallProcEvalParams:
.29f4	e8		inx				inx
.29f5	b1 28		lda ($28),y			lda 	(codePtr),y 				; do we have ) , e.g. the end of the parameters ?
.29f7	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.29f9	f0 0b		beq $2a06			beq 	_CPDoneParams
.29fb	20 13 33	jsr $3313			jsr 	Evaluate 					; evaluate a parameter
.29fe	b1 28		lda ($28),y			lda 	(codePtr),Y 				; get what's next, preconsume
.2a00	c8		iny				iny
.2a01	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; if comma, go get another parameter
.2a03	f0 ef		beq $29f4			beq 	_CallProcEvalParams
.2a05	88		dey				dey 								; undo consumption.
.2a06					_CPDoneParams:
.2a06	20 3d 3a	jsr $3a3d			jsr 	CheckRightParen 			; check closing parenthesis.
.2a09	8e f6 0c	stx $0cf6			stx 	paramCount 					; store parameter count+1
.2a0c	a2 04		ldx #$04			ldx 	#4							; make space on stack
.2a0e	a9 50		lda #$50			lda 	#markerPROC
.2a10	20 65 3a	jsr $3a65			jsr 	RSClaim
.2a13	a9 01		lda #$01			lda 	#1 							; store return address.
.2a15	20 91 3a	jsr $3a91			jsr 	RSSavePosition
.2a18	68		pla				pla 								; get the new code Ptr
.2a19	85 28		sta $28				sta 	codePtr
.2a1b	68		pla				pla
.2a1c	85 29		sta $29				sta 	codePtr+1
.2a1e	68		pla				pla 								; length of name + 4 is the param start.
.2a1f	18		clc				clc
.2a20	69 04		adc #$04			adc 	#4
.2a22	a8		tay				tay
.2a23	a2 ff		ldx #$ff			ldx 	#$FF
.2a25					_CPLoadParameters:
.2a25	e8		inx				inx 								; point to where the address should be loaded.
.2a26	ec f6 0c	cpx $0cf6			cpx 	paramCount 					; too many parameters in definition ?
.2a29	f0 1e		beq $2a49			beq 	_CPParamError
.2a2b	b1 28		lda ($28),y			lda 	(codePtr),y					; what follows
.2a2d	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN 				; is it the right bracket
.2a2f	f0 0e		beq $2a3f			beq 	_CPParamComplete 			; done all the parameters, perhaps.
.2a31	20 fd 28	jsr $28fd			jsr 	LocaliseVariable 			; make following variable local, ref in tos,x
.2a34	20 c0 26	jsr $26c0			jsr 	WriteValue 					; copy the evaluated parameter into there.
.2a37	b1 28		lda ($28),y			lda 	(codePtr),y 				; followed by a comma ?
.2a39	c8		iny				iny
.2a3a	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.2a3c	f0 e7		beq $2a25			beq 	_CPLoadParameters
.2a3e	88		dey				dey 								; no, unconsume and check for )
.2a3f					_CPParamComplete:
.2a3f	20 3d 3a	jsr $3a3d			jsr 	CheckRightParen 			; check )
.2a42	e8		inx				inx 								; check right number of parameters have been consumed
.2a43	ec f6 0c	cpx $0cf6			cpx 	paramCount
.2a46	d0 01		bne $2a49			bne 	_CPParamError
.2a48	60		rts				rts
.2a49					_CPParamError:
.2a49	a2 18		ldx #$18			ldx 	#ErrorID_Params
.2a4b	20 18 15	jsr $1518		jsr	errorHandler
.2a4e					ReturnProc:
.2a4e	20 6f 29	jsr $296f			jsr 	RestoreLocals 				; get the locals back.
.2a51	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.2a53	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.2a55	c9 50		cmp #$50			cmp 	#markerPROC 						; does it match
.2a57	f0 05		beq $2a5e			beq 	_isok
.2a59	a2 12		ldx #$12			ldx 	#ErrorID_endProcErr
.2a5b	20 18 15	jsr $1518		jsr	errorHandler
.2a5e					_isok:
.2a5e	a9 01		lda #$01			lda 	#1
.2a60	20 a4 3a	jsr $3aa4			jsr 	RSLoadPosition 				; reload the position from offset 1.
.2a63	a9 04		lda #$04			lda 	#4 							; throw 4 bytes from stack.
.2a65	20 87 3a	jsr $3a87			jsr 	RSFree
.2a68	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/proctable.asm

.0cf7					procList:
>0cf7							.fill 	2		 					; terminated by name high being zero.
.0cf9					yInLine:
>0cf9							.fill 	1
.2a69					FindProcedure:
.2a69	8c f9 0c	sty $0cf9			sty 	yInLine 					; save current position.
.2a6c	20 27 2b	jsr $2b27			jsr 	CalculateProcedureHash		; calculate the hash of the procedure.
.2a6f	85 2c		sta $2c				sta 	temp1
.2a71	ad f7 0c	lda $0cf7			lda		procList 					; put procList address in temp2
.2a74	85 2e		sta $2e				sta 	temp2
.2a76	ad f8 0c	lda $0cf8			lda 	procList+1
.2a79	85 2f		sta $2f				sta 	temp2+1
.2a7b	a0 00		ldy #$00			ldy 	#0 							; position in this table.
.2a7d					_FPLoop:
.2a7d	b1 2e		lda ($2e),y			lda 	(temp2),y
.2a7f	f0 4f		beq $2ad0			beq 	_FPError 					; if so, we don't know this procedure.
.2a81	85 2b		sta $2b				sta 	temp0+1 					; copy MSB/LSB to temp0 as we go.
.2a83	c8		iny				iny
.2a84	b1 2e		lda ($2e),y			lda 	(temp2),y
.2a86	85 2a		sta $2a				sta 	temp0
.2a88	c8		iny				iny
.2a89	b1 2e		lda ($2e),y			lda 	(temp2),y					; check the procedure hash.
.2a8b	c5 2c		cmp $2c				cmp 	temp1
.2a8d	d0 2b		bne $2aba			bne 	_FPNext 					; hash is different, go to next.
.2a8f	38		sec				sec
.2a90	ad f9 0c	lda $0cf9			lda 	yInLine 					; position in line must be at least 4
.2a93	e9 04		sbc #$04			sbc 	#4
.2a95	18		clc				clc
.2a96	65 28		adc $28				adc 	codePtr
.2a98	85 30		sta $30				sta 	temp3
.2a9a	a5 29		lda $29				lda 	codePtr+1
.2a9c	69 00		adc #$00			adc 	#0
.2a9e	85 31		sta $31				sta 	temp3+1
.2aa0	98		tya				tya
.2aa1	48		pha				pha
.2aa2	a0 04		ldy #$04			ldy 	#4
.2aa4					_FPCName:
.2aa4	b1 30		lda ($30),y			lda 	(temp3),y 					; check the same
.2aa6	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.2aa8	d0 0e		bne $2ab8			bne 	_FPpulYNext 				; if different go to next one.
.2aaa	c8		iny				iny
.2aab	c9 3a		cmp #$3a			cmp 	#$3A
.2aad	90 f5		bcc $2aa4			bcc 	_FPCName 					; compare the whole lot....
.2aaf	68		pla				pla 								; throw away the saved Y
.2ab0	98		tya				tya 								; length of name is Y-4
.2ab1	38		sec				sec
.2ab2	e9 04		sbc #$04			sbc 	#4
.2ab4	ac f9 0c	ldy $0cf9			ldy 	yInLine  					; get the original Y back
.2ab7	60		rts				rts
.2ab8					_FPpulYNext:
.2ab8	68		pla				pla
.2ab9	a8		tay				tay
.2aba					_FPNext:
.2aba	c8		iny				iny 								; next procedure record.
.2abb	10 c0		bpl $2a7d			bpl 	_FPLoop 					; if done 128 already ... e.g. Y -ve
.2abd	98		tya				tya 								; subtract 128 from Y
.2abe	38		sec				sec
.2abf	e9 80		sbc #$80			sbc 	#128
.2ac1	a8		tay				tay
.2ac2	18		clc				clc 								; add 128 to temp2, so we can have more than
.2ac3	a5 2e		lda $2e				lda 	temp2 						; 255/3 = 85 procedures
.2ac5	69 80		adc #$80			adc 	#128
.2ac7	85 2e		sta $2e				sta 	temp2
.2ac9	90 b2		bcc $2a7d			bcc 	_FPLoop
.2acb	e6 2f		inc $2f				inc 	temp2+1
.2acd	4c 7d 2a	jmp $2a7d			jmp 	_FPLoop
.2ad0					_FPError:
.2ad0	a2 17		ldx #$17			ldx 	#ErrorID_NoProc
.2ad2	20 18 15	jsr $1518		jsr	errorHandler
.2ad5					ScanProc:
.2ad5	98		tya				tya
.2ad6	48		pha				pha
.2ad7	a5 35		lda $35				lda 	lowMemory 					; copy the start of the procList, at low memory
.2ad9	8d f7 0c	sta $0cf7			sta 	procList
.2adc	a5 36		lda $36				lda 	lowMemory+1
.2ade	8d f8 0c	sta $0cf8			sta 	procList+1
.2ae1	20 51 2e	jsr $2e51			jsr 	ResetCodeAddress 			; back to the start.
.2ae4					_ScanLoop:
.2ae4	a0 00		ldy #$00			ldy 	#0 							; check reached program end
.2ae6	b1 28		lda ($28),y			lda 	(codePtr),y
.2ae8	f0 2a		beq $2b14			beq 	_ScanExit
.2aea	a0 03		ldy #$03			ldy 	#3							; get first token
.2aec	b1 28		lda ($28),y			lda 	(codePtr),y
.2aee	c9 9d		cmp #$9d			cmp 	#TKW_DEFPROC				; skip to next if not DEFPROC
.2af0	d0 12		bne $2b04			bne 	_ScanNext
.2af2	a5 29		lda $29				lda 	codePtr+1 					; write high and low address of this line.
.2af4	20 1c 2b	jsr $2b1c			jsr 	_ScanWrite
.2af7	a5 28		lda $28				lda 	codePtr
.2af9	20 1c 2b	jsr $2b1c			jsr 	_ScanWrite
.2afc	a0 04		ldy #$04			ldy 	#4 							; start of name part
.2afe	20 27 2b	jsr $2b27			jsr 	CalculateProcedureHash 		; calculate procedure hash
.2b01	20 1c 2b	jsr $2b1c			jsr 	_ScanWrite					; and write that
.2b04					_ScanNext:
.2b04	18		clc				clc
.2b05	a0 00		ldy #$00			ldy 	#0
.2b07	b1 28		lda ($28),y			lda 	(codePtr),y
.2b09	65 28		adc $28				adc 	codePtr
.2b0b	85 28		sta $28				sta 	codePtr
.2b0d	90 d5		bcc $2ae4			bcc 	_ScanLoop
.2b0f	e6 29		inc $29				inc 	codePtr+1
.2b11	4c e4 2a	jmp $2ae4			jmp 	_ScanLoop
.2b14					_ScanExit:
.2b14	a9 00		lda #$00			lda 	#0 							; write ending zero.
.2b16	20 1c 2b	jsr $2b1c			jsr 	_ScanWrite
.2b19	68		pla				pla
.2b1a	a8		tay				tay
.2b1b	60		rts				rts
.2b1c					_ScanWrite:
.2b1c	a0 00		ldy #$00			ldy 	#0
.2b1e	91 35		sta ($35),y			sta 	(lowMemory),y
.2b20	e6 35		inc $35				inc 	lowMemory
.2b22	d0 02		bne $2b26			bne 	_SWNoCarry
.2b24	e6 36		inc $36				inc 	lowMemory+1
.2b26					_SWNoCarry:
.2b26	60		rts				rts
.2b27					CalculateProcedureHash:
.2b27	a9 00		lda #$00			lda 	#0 							; clear hash.
.2b29	85 2a		sta $2a				sta 	temp0
.2b2b					_CPHLoop:
.2b2b	18		clc				clc 								; add character and rotate and add carry back in
.2b2c	b1 28		lda ($28),y			lda 	(codePtr),y
.2b2e	65 2a		adc $2a				adc 	temp0
.2b30	6a		ror a				ror 	a
.2b31	69 0d		adc #$0d			adc 	#13 						; primes usually good for this sort of thing.
.2b33	85 2a		sta $2a				sta 	temp0 						; (down with this sort of thing)
.2b35	b1 28		lda ($28),y			lda 	(codePtr),y
.2b37	c8		iny				iny 								; advance incase we go round again.
.2b38	c9 3a		cmp #$3a			cmp 	#$3A
.2b3a	90 ef		bcc $2b2b			bcc 	_CPHLoop
.2b3c	a5 2a		lda $2a				lda 	temp0
.2b3e	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/repeat.asm

.2b3f					Command_Repeat:
.2b3f	a2 04		ldx #$04			ldx 	#4 							; allocate 4 bytes on stack for REPEAT
.2b41	a9 52		lda #$52			lda 	#markerREPEAT 				; repeat marker allocate 4 bytes
.2b43	20 65 3a	jsr $3a65			jsr 	RSClaim
.2b46	a9 01		lda #$01			lda 	#1 							; save position at offset 1.
.2b48	20 91 3a	jsr $3a91			jsr 	RSSavePosition
.2b4b	60		rts				rts
.2b4c					Command_Until:
.2b4c	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.2b4e	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.2b50	c9 52		cmp #$52			cmp 	#markerREPEAT 						; does it match
.2b52	f0 05		beq $2b59			beq 	_isok
.2b54	a2 0f		ldx #$0f			ldx 	#ErrorID_untilErr
.2b56	20 18 15	jsr $1518		jsr	errorHandler
.2b59					_isok:
.2b59	20 30 33	jsr $3330			jsr 	EvaluateRootInteger 		; at the bottom.
.2b5c	20 f1 39	jsr $39f1			jsr 	MInt32Zero					; check if TOS zero
.2b5f	d0 06		bne $2b67			bne 	_CUExit
.2b61	a9 01		lda #$01			lda 	#1
.2b63	20 a4 3a	jsr $3aa4			jsr 	RSLoadPosition 				; reload the position from offset 1.
.2b66	60		rts				rts
.2b67					_CUExit:
.2b67	a9 04		lda #$04			lda 	#4 							; throw 4 bytes from stack.
.2b69	20 87 3a	jsr $3a87			jsr 	RSFree
.2b6c	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/scanner.asm

.2b6d					ScanForward:
.2b6d	85 2c		sta $2c				sta 	temp1 						; save tokens to search in temp1/temp1+1
.2b6f	86 2d		stx $2d				stx 	temp1+1
.2b71	a9 00		lda #$00			lda 	#0 							; temp2 counts structure levels.
.2b73	85 2e		sta $2e				sta 	temp2
.2b75	b1 28		lda ($28),y	_SFLoop:lda 	(codePtr),y 				; look at the next token.
.2b77	c8		iny				iny
.2b78	a6 2e		ldx $2e				ldx 	temp2 						; check structure levels are zero.
.2b7a	d0 08		bne $2b84			bne 	_SFNoCheck 					; if so, check token against entered values.
.2b7c	c5 2c		cmp $2c				cmp 	temp1 						; if either matches, we've reached the token
.2b7e	f0 24		beq $2ba4			beq 	_SFExit 					; at the same strcture depth.
.2b80	c5 2d		cmp $2d				cmp 	temp1+1
.2b82	f0 20		beq $2ba4			beq 	_SFExit
.2b84					_SFNoCheck:
.2b84	c9 80		cmp #$80			cmp 	#$80 						; if it is 00-7F (variable/number) just skip it.
.2b86	90 ed		bcc $2b75			bcc 	_SFLoop
.2b88	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; $80-$85 is various specials.
.2b8a	90 19		bcc $2ba5			bcc 	_SFSpecials
.2b8c	c9 99		cmp #$99			cmp 	#TOK_STRUCTST 				; if < structure start then continue
.2b8e	90 e5		bcc $2b75			bcc 	_SFLoop
.2b90	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST 				; if >= unary start (after structure) then continue.
.2b92	b0 e1		bcs $2b75			bcs 	_SFLoop
.2b94	aa		tax				tax  								; token in X, and look up the adjuster.
.2b95	bd 4e 32	lda $324e,x			lda 	ELBinaryOperatorInfo-TOK_BINARYST,x
.2b98	38		sec				sec 								; convert to an offset ($FF,$01)
.2b99	e9 81		sbc #$81			sbc 	#$81
.2b9b	18		clc				clc 								; add to depth
.2b9c	65 2e		adc $2e				adc 	temp2
.2b9e	85 2e		sta $2e				sta 	temp2
.2ba0	10 d3		bpl $2b75			bpl 	_SFLoop 					; +ve okay to continue
.2ba2	30 07		bmi $2bab			bmi 	SFError 					; if gone -ve then we have a nesting error
.2ba4	60		rts		_SFExit:rts
.2ba5					_SFSpecials:
.2ba5	20 b0 2b	jsr $2bb0			jsr 	ScannerSkipSpecial
.2ba8	4c 75 2b	jmp $2b75			jmp 	_SFLoop
.2bab					SFError:
.2bab	a2 14		ldx #$14			ldx 	#ErrorID_Struct
.2bad	20 18 15	jsr $1518		jsr	errorHandler
.2bb0					ScannerSkipSpecial:
.2bb0	c9 80		cmp #$80			cmp 	#TOK_EOL 					; $80, advance to next line.
.2bb2	f0 10		beq $2bc4			beq 	_SFNextLine
.2bb4	c9 84		cmp #$84			cmp 	#TOK_FPC					; $84, skip embedded float
.2bb6	f0 2b		beq $2be3			beq 	_SFFloatSkip
.2bb8	c9 85		cmp #$85			cmp 	#TOK_STR 					; $85, skip string
.2bba	f0 02		beq $2bbe			beq 	_SFSkipString
.2bbc	c8		iny				iny									; $81,$82,$83 shift, so just advance over the shifted
.2bbd	60		rts				rts 								; token.
.2bbe					_SFSkipString:
.2bbe	98		tya				tya
.2bbf	38		sec				sec
.2bc0	71 28		adc ($28),y			adc 	(codePtr),y
.2bc2	a8		tay				tay
.2bc3	60		rts				rts
.2bc4					_SFNextLine:
.2bc4	a0 00		ldy #$00			ldy 	#0 							; get offset
.2bc6	b1 28		lda ($28),y			lda 	(codePtr),y
.2bc8	18		clc				clc 								; add to code pointer.
.2bc9	65 28		adc $28				adc 	codePtr
.2bcb	85 28		sta $28				sta 	codePtr
.2bcd	90 02		bcc $2bd1			bcc		_SFNLNoCarry
.2bcf	e6 29		inc $29				inc 	codePtr+1
.2bd1					_SFNLNoCarry:
.2bd1	b1 28		lda ($28),y			lda 	(codePtr),y 				; reached the end of the program.
.2bd3	d0 0b		bne $2be0			bne		_SFXNL 						; no go round again
.2bd5	a5 2c		lda $2c				lda 	temp1
.2bd7	c9 d9		cmp #$d9			cmp 	#TKW_DATA 					; if searching for Data different error.
.2bd9	d0 d0		bne $2bab			bne 	SFError 					; read uses this to search for data statements
.2bdb	a2 1d		ldx #$1d			ldx 	#ErrorID_DataError
.2bdd	20 18 15	jsr $1518		jsr	errorHandler
.2be0	a0 03		ldy #$03	_SFXNL:	ldy 	#3
.2be2	60		rts				rts
.2be3					_SFFloatSkip:
.2be3	98		tya				tya 								; skip over an embedded float.
.2be4	18		clc				clc
.2be5	69 05		adc #$05			adc 	#FloatEmbeddedSize
.2be7	a8		tay				tay
.2be8	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/while.asm

.2be9					Command_While:
.2be9	a9 57		lda #$57			lda 	#markerWhile 				; gosub marker allocate 4 bytes.
.2beb	a2 04		ldx #$04			ldx 	#4
.2bed	20 65 3a	jsr $3a65			jsr 	RSClaim 					; create on stack.
.2bf0	88		dey				dey
.2bf1	a9 01		lda #$01			lda 	#1
.2bf3	20 91 3a	jsr $3a91			jsr 	RSSavePosition 				; save position before the WHILE keyword.
.2bf6	c8		iny				iny
.2bf7	20 30 33	jsr $3330			jsr 	EvaluateRootInteger			; get the conditional
.2bfa	20 f1 39	jsr $39f1			jsr 	MInt32Zero 	 				; if zero, skip forward to the fail code.
.2bfd	f0 01		beq $2c00			beq 	_CWFail
.2bff	60		rts				rts
.2c00					_CWFail:
.2c00	a9 04		lda #$04			lda 	#4
.2c02	20 87 3a	jsr $3a87			jsr 	RSFree 						; close the just opened position.
.2c05	a9 9f		lda #$9f			lda 	#TKW_WEND 					; scan forward past WEND.
.2c07	aa		tax				tax
.2c08	20 6d 2b	jsr $2b6d			jsr 	ScanForward
.2c0b	60		rts				rts
.2c0c					Command_Wend:
.2c0c	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.2c0e	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.2c10	c9 57		cmp #$57			cmp 	#markerWHILE 						; does it match
.2c12	f0 05		beq $2c19			beq 	_isok
.2c14	a2 11		ldx #$11			ldx 	#ErrorID_wendErr
.2c16	20 18 15	jsr $1518		jsr	errorHandler
.2c19					_isok:
.2c19	a9 01		lda #$01			lda 	#1
.2c1b	20 a4 3a	jsr $3aa4			jsr 	RSLoadPosition				; go back until true
.2c1e	a9 04		lda #$04			lda 	#4
.2c20	20 87 3a	jsr $3a87			jsr 	RSFree 						; close the loop
.2c23	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/system/clear.asm

.2c24					CommandClear:
.2c24					XCommandClear:
.2c24	98		tya				tya
.2c25	48		pha				pha
.2c26	ad cc 0a	lda $0acc			lda 	endMemory					; set high memory = end of memory
.2c29	85 33		sta $33				sta 	highMemory
.2c2b	ad cd 0a	lda $0acd			lda 	endMemory+1
.2c2e	85 34		sta $34				sta 	highMemory+1
.2c30	ad c8 0a	lda $0ac8			lda 	basePage 					; work out where the program ends.
.2c33	85 2a		sta $2a				sta 	temp0
.2c35	ad c9 0a	lda $0ac9			lda 	basePage+1
.2c38	85 2b		sta $2b				sta 	temp0+1
.2c3a					_CCFindEnd:
.2c3a	a0 00		ldy #$00			ldy 	#0
.2c3c	b1 2a		lda ($2a),y			lda 	(temp0),y
.2c3e	f0 0c		beq $2c4c			beq 	_CCFoundEnd 				; offset zero is end.
.2c40	18		clc				clc
.2c41	65 2a		adc $2a				adc 	temp0 						; move to next line
.2c43	85 2a		sta $2a				sta 	temp0
.2c45	90 f3		bcc $2c3a			bcc 	_CCFindEnd
.2c47	e6 2b		inc $2b				inc 	temp0+1
.2c49	4c 3a 2c	jmp $2c3a			jmp 	_CCFindEnd
.2c4c					_CCFoundEnd:
.2c4c	a5 2a		lda $2a				lda 	temp0 						; put temp0 in lowMemory
.2c4e	85 35		sta $35				sta 	lowMemory
.2c50	a5 2b		lda $2b				lda 	temp0+1
.2c52	85 36		sta $36				sta 	lowMemory+1
.2c54	18		clc				clc 								; put temp0+1 in endProgram
.2c55	a5 2a		lda $2a				lda 	temp0
.2c57	69 01		adc #$01			adc 	#1
.2c59	8d ca 0a	sta $0aca			sta 	endProgram
.2c5c	a5 2b		lda $2b				lda 	temp0+1
.2c5e	69 00		adc #$00			adc 	#0
.2c60	8d cb 0a	sta $0acb			sta 	endProgram+1
.2c63	18		clc				clc 								; put a bit of space in.
.2c64	a5 35		lda $35				lda 	lowMemory
.2c66	69 04		adc #$04			adc 	#4
.2c68	85 35		sta $35				sta 	lowMemory
.2c6a	90 02		bcc $2c6e			bcc 	_CCNoCarry
.2c6c	e6 36		inc $36				inc 	lowMemory+1
.2c6e					_CCNoCarry:
.2c6e	20 57 3a	jsr $3a57			jsr 	RSReset 					; reset the return stack.
.2c71	a2 06		ldx #$06		ldx	#6
.2c73	20 bf 49	jsr $49bf		jsr	variableHandler
.2c76	20 d5 2a	jsr $2ad5			jsr 	ScanProc 					; scan for procedures
.2c79	20 5a 24	jsr $245a			jsr 	CommandRestore 				; do a restore
.2c7c	68		pla				pla
.2c7d	a8		tay				tay
.2c7e	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/system/list.asm

.0cfa					structIndent:
>0cfa							.fill 	1
.2c7f					CommandList:
.2c7f	a2 00		ldx #$00			ldx		#0 							; set start/end lines in stack 0/1 to 0 and $FFFF
.2c81	8e fa 0c	stx $0cfa			stx 	structIndent
.2c84	20 ca 39	jsr $39ca			jsr 	MInt32False
.2c87	e8		inx				inx
.2c88	20 c6 39	jsr $39c6			jsr 	MInt32True
.2c8b	b1 28		lda ($28),y			lda 	(codePtr),y 				; look at first token
.2c8d	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; list ,xxxx
.2c8f	f0 15		beq $2ca6			beq 	_CLEndLine
.2c91	c9 00		cmp #$00			cmp 	#0 							; list ... on its own.
.2c93	30 1b		bmi $2cb0			bmi 	_CLDoListing 				; do the whole lot.
.2c95	a2 00		ldx #$00			ldx 	#0 							; get start line at stack:0
.2c97	20 32 33	jsr $3332			jsr 	EvaluateInteger
.2c9a	b1 28		lda ($28),y			lda 	(codePtr),y 				; , follows ?
.2c9c	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.2c9e	f0 06		beq $2ca6			beq 	_CLEndLine
.2ca0	20 08 39	jsr $3908			jsr 	MInt32CopyUp 				; copy first to second if just a line number on its
.2ca3	4c b0 2c	jmp $2cb0			jmp 	_CLDoListing 				; own e.g. list 1100
.2ca6					_CLEndLine:
.2ca6	c8		iny				iny 								; skip comma
.2ca7	b1 28		lda ($28),y			lda 	(codePtr),y  				; no number follows, then its list 1000,
.2ca9	30 05		bmi $2cb0			bmi 	_CLDoListing
.2cab	a2 01		ldx #$01			ldx 	#1 							; get the last line to list
.2cad	20 32 33	jsr $3332			jsr 	EvaluateInteger				; get end
.2cb0					_CLDoListing:
.2cb0	20 51 2e	jsr $2e51			jsr 	ResetCodeAddress 			; back to the start.
.2cb3					_CLCheckLoop:
.2cb3	a2 02		ldx #$02		ldx	#2
.2cb5	20 f6 14	jsr $14f6		jsr	deviceHandler
.2cb8	a0 00		ldy #$00			ldy 	#0							; check end.
.2cba	b1 28		lda ($28),y			lda 	(codePtr),y
.2cbc	f0 41		beq $2cff			beq 	_CLEnd
.2cbe	a2 00		ldx #$00			ldx 	#0 							; compare vs lower.
.2cc0	20 02 2d	jsr $2d02			jsr 	CLCompareLineTOS
.2cc3	c9 ff		cmp #$ff			cmp 	#255 						; if < skip
.2cc5	f0 28		beq $2cef			beq 	_CLNext
.2cc7	e8		inx				inx
.2cc8	20 02 2d	jsr $2d02			jsr 	CLCompareLineTOS 			; compare vs higher
.2ccb	c9 01		cmp #$01			cmp 	#1
.2ccd	f0 20		beq $2cef			beq 	_CLNext
.2ccf	a9 80		lda #$80			lda 	#$80 						; undo any down indents this line.
.2cd1	20 24 2d	jsr $2d24			jsr 	CLStructureCheck
.2cd4	ad fa 0c	lda $0cfa			lda 	structIndent 				; indent level.
.2cd7	10 02		bpl $2cdb			bpl 	_CLPositive
.2cd9	a9 00		lda #$00			lda 	#0
.2cdb					_CLPositive:
.2cdb	a2 04		ldx #$04		ldx	#4
.2cdd	20 ee 45	jsr $45ee		jsr	tokeniserHandler
.2ce0	a9 82		lda #$82			lda 	#$82 						; up indents from this point on.
.2ce2	20 24 2d	jsr $2d24			jsr 	CLStructureCheck
.2ce5	ad fa 0c	lda $0cfa			lda 	structIndent
.2ce8	10 05		bpl $2cef			bpl 	_CLNext
.2cea	a9 00		lda #$00			lda 	#0
.2cec	8d fa 0c	sta $0cfa			sta 	structIndent
.2cef					_CLNext:
.2cef	a0 00		ldy #$00			ldy 	#0 							; go to next line.
.2cf1	b1 28		lda ($28),y			lda 	(codePtr),y
.2cf3	18		clc				clc
.2cf4	65 28		adc $28				adc 	codePtr
.2cf6	85 28		sta $28				sta 	codePtr
.2cf8	90 b9		bcc $2cb3			bcc 	_CLCheckLoop
.2cfa	e6 29		inc $29				inc 	codePtr+1
.2cfc	4c b3 2c	jmp $2cb3			jmp 	_CLCheckLoop
.2cff					_CLEnd:
.2cff	4c b3 3a	jmp $3ab3			jmp 	WarmStart 					; warm start after list.
.2d02					CLCompareLineTOS:
.2d02	a0 01		ldy #$01			ldy 	#1
.2d04	b1 28		lda ($28),y			lda 	(codePtr),y
.2d06	55 98		eor $98,x			eor 	esInt0,x
.2d08	85 2a		sta $2a				sta 	temp0
.2d0a	c8		iny				iny
.2d0b	b1 28		lda ($28),y			lda 	(codePtr),y
.2d0d	55 a0		eor $a0,x			eor 	esInt1,x
.2d0f	05 2a		ora $2a				ora 	temp0
.2d11	f0 10		beq $2d23			beq 	_CLCLTExit
.2d13	88		dey				dey
.2d14	b1 28		lda ($28),y			lda 	(codePtr),y
.2d16	d5 98		cmp $98,x			cmp 	esInt0,x
.2d18	c8		iny				iny
.2d19	b1 28		lda ($28),y			lda 	(codePtr),y
.2d1b	f5 a0		sbc $a0,x			sbc 	esInt1,x
.2d1d	a9 ff		lda #$ff			lda 	#255
.2d1f	90 02		bcc $2d23			bcc 	_CLCLTExit
.2d21	a9 01		lda #$01			lda 	#1
.2d23					_CLCLTExit:
.2d23	60		rts				rts
.2d24					CLStructureCheck:
.2d24	85 2a		sta $2a				sta 	temp0
.2d26	a0 03		ldy #$03			ldy 	#3
.2d28					_CLSCLoop:
.2d28	b1 28		lda ($28),y			lda 	(codePtr),y 				; get and consume token.
.2d2a	c8		iny				iny
.2d2b	c9 80		cmp #$80			cmp 	#$80
.2d2d	90 f9		bcc $2d28			bcc 	_CLSCLoop 					; $00-$7F just step over.
.2d2f	f0 28		beq $2d59			beq		_CLSCExit					; EOL return
.2d31	c9 86		cmp #$86			cmp 	#$86 						; special handler
.2d33	90 1e		bcc $2d53			bcc 	_CLSCSpecial
.2d35	c9 99		cmp #$99			cmp 	#TOK_STRUCTST 				; check if structure changer.
.2d37	90 ef		bcc $2d28			bcc 	_CLSCLoop
.2d39	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST
.2d3b	b0 eb		bcs $2d28			bcs 	_CLSCLoop
.2d3d	aa		tax				tax 								; get adjustment
.2d3e	bd 4e 32	lda $324e,x			lda 	ELBinaryOperatorInfo-TOK_BINARYST,x
.2d41	c5 2a		cmp $2a				cmp 	temp0	 					; if what we're searching for
.2d43	d0 e3		bne $2d28			bne 	_CLSCLoop
.2d45	38		sec				sec
.2d46	e9 81		sbc #$81			sbc 	#$81 						; convert to offset
.2d48	0a		asl a				asl 	a 							; double indent step
.2d49	18		clc				clc
.2d4a	6d fa 0c	adc $0cfa			adc 	structIndent 				; add to structure indent
.2d4d	8d fa 0c	sta $0cfa			sta 	structIndent
.2d50	4c 28 2d	jmp $2d28			jmp 	_CLSCLoop
.2d53					_CLSCSpecial:
.2d53	20 b0 2b	jsr $2bb0			jsr 	ScannerSkipSpecial
.2d56	4c 28 2d	jmp $2d28			jmp 	_CLSCLoop
.2d59					_CLSCExit:
.2d59	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/system/loadsave.asm

.2d5a					CommandLoad:
.2d5a	20 82 2d	jsr $2d82			jsr 	CLSParameters 					; get parameters for load.
.2d5d	08		php				php
.2d5e	a2 0e		ldx #$0e		ldx	#14
.2d60	20 f6 14	jsr $14f6		jsr	deviceHandler
.2d63	28		plp				plp
.2d64	b0 08		bcs $2d6e			bcs 	_CLExit 						; if CC then load a program, so warm start.
.2d66	20 24 2c	jsr $2c24			jsr 	CommandClear
.2d69	a2 04		ldx #$04		ldx	#4
.2d6b	20 1c 24	jsr $241c		jsr	interactionHandler
.2d6e					_CLExit
.2d6e	60		rts				rts
.2d6f					CommandSave:
.2d6f	20 82 2d	jsr $2d82			jsr 	CLSParameters					; get parameters for save
.2d72	90 08		bcc $2d7c			bcc 	_CSNoOverrideAddress
.2d74	20 4a 3a	jsr $3a4a			jsr 	CheckComma 						; should be a comma.
.2d77	a2 02		ldx #$02			ldx 	#2
.2d79	20 32 33	jsr $3332			jsr 	EvaluateInteger 				; get save end address.
.2d7c					_CSNoOverrideAddress:
.2d7c	a2 18		ldx #$18		ldx	#24
.2d7e	20 f6 14	jsr $14f6		jsr	deviceHandler
.2d81	60		rts				rts
.2d82					CLSParameters:
.2d82	a2 00		ldx #$00			ldx 	#0 								; string
.2d84	20 27 33	jsr $3327			jsr 	EvaluateString
.2d87	e8		inx				inx 									; erase out +1 +2
.2d88	20 ca 39	jsr $39ca			jsr 	MInt32False
.2d8b	e8		inx				inx
.2d8c	20 ca 39	jsr $39ca			jsr 	MInt32False
.2d8f	ad c8 0a	lda $0ac8			lda 	basePage 						; default start address.
.2d92	85 99		sta $99				sta 	esInt0+1
.2d94	ad c9 0a	lda $0ac9			lda 	basePage+1
.2d97	85 a1		sta $a1				sta 	esInt1+1
.2d99	ad ca 0a	lda $0aca			lda 	endProgram 						; default end address
.2d9c	85 9a		sta $9a				sta 	esInt0+2
.2d9e	ad cb 0a	lda $0acb			lda 	endProgram+1
.2da1	85 a2		sta $a2				sta 	esInt1+2
.2da3	b1 28		lda ($28),y			lda 	(codePtr),y 					; , following
.2da5	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.2da7	d0 08		bne $2db1			bne 	_CLSDefault
.2da9	c8		iny				iny 									; skip comma
.2daa	a2 01		ldx #$01			ldx 	#1 								; get numeric value.
.2dac	20 32 33	jsr $3332			jsr 	EvaluateInteger
.2daf	38		sec				sec
.2db0	60		rts				rts
.2db1					_CLSDefault:
.2db1	18		clc				clc
.2db2	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/system/new.asm

.2db3					Command_New:
.2db3					Command_XNew:
.2db3	20 51 2e	jsr $2e51			jsr 	ResetCodeAddress 			; point to first line
.2db6	a0 00		ldy #$00			ldy 	#0 							; and zap it.
.2db8	98		tya				tya
.2db9	91 28		sta ($28),y			sta 	(codePtr),y
.2dbb	20 24 2c	jsr $2c24			jsr 	CommandClear 				; clear everything down.
.2dbe	4c 7a 27	jmp $277a			jmp 	CommandEND 					; do END code, as there's nothing to run.

;******  Return to file: main/main.asm


;******  Processing file: main/commands/system/run.asm

.0cfb					breakCounter:
>0cfb								.fill 	1
.0cfc					breakIncrement:
>0cfc								.fill 	1
.2dc1					Command_Run:
.2dc1					XCommand_Run:
.2dc1	a2 ff		ldx #$ff			ldx 	#$FF 						; reset the stack.
.2dc3	9a		txs				txs
.2dc4	20 4b 2e	jsr $2e4b			jsr 	BreakOn 					; turn break on
.2dc7	20 24 2c	jsr $2c24			jsr 	CommandClear 				; clear everything.
.2dca	20 51 2e	jsr $2e51			jsr 	ResetCodeAddress 			; back to the start.
.2dcd					Command_RunFrom:
.2dcd	a0 03		ldy #$03			ldy 	#3 							; over offset/line #
.2dcf					CRNextInstruction:
.2dcf	64 3a		stz $3a				stz 	softMemAlloc+1
.2dd1	ad fb 0c	lda $0cfb			lda 	breakCounter 				; check for break.
.2dd4	6d fc 0c	adc $0cfc			adc 	breakIncrement
.2dd7	8d fb 0c	sta $0cfb			sta 	breakCounter
.2dda	90 05		bcc $2de1			bcc 	_CRNoChecks
.2ddc	a2 02		ldx #$02		ldx	#2
.2dde	20 f6 14	jsr $14f6		jsr	deviceHandler
.2de1					_CRNoChecks
.2de1	b1 28		lda ($28),y			lda 	(codePtr),y 				; get next token.
.2de3	10 1c		bpl $2e01			bpl 	_CRNotToken
.2de5	c9 c9		cmp #$c9			cmp 	#TOK_TOKENS 				; if in the tokens then do that token.
.2de7	b0 0c		bcs $2df5			bcs 	_CRExecute
.2de9	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST 				; unary is ignored.
.2deb	b0 71		bcs $2e5e			bcs 	Unimplemented
.2ded	c9 99		cmp #$99			cmp 	#TOK_STRUCTST 				; execute structures.
.2def	b0 04		bcs $2df5			bcs 	_CRExecute
.2df1	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; if one of the system tokens $80-$85 do that
.2df3	b0 16		bcs $2e0b			bcs 	_CRCheckIndirect 			; if in that unused range check for ! or ? or AND
.2df5					_CRExecute:
.2df5	c8		iny				iny 								; consume it.
.2df6	0a		asl a				asl 	a 							; double it, losing most significant bit.
.2df7	aa		tax				tax
.2df8	20 fe 2d	jsr $2dfe			jsr 	_CRRunRoutine 				; we want to do jsr (group0vectors,x)
.2dfb	4c cf 2d	jmp $2dcf			jmp 	CRNextInstruction
.2dfe					_CRRunRoutine:
.2dfe	7c 68 2e	jmp ($2e68,x)			jmp 	(Group0Vectors,x)
.2e01					_CRNotToken:
.2e01	c9 40		cmp #$40			cmp 	#$40 						; if 0-3F then it is a letter
.2e03	b0 59		bcs $2e5e			bcs 	Unimplemented
.2e05					_CRDefaultLet:
.2e05	20 ad 26	jsr $26ad			jsr 	CommandLet 					; do the default, LET
.2e08	4c cf 2d	jmp $2dcf			jmp 	CRNextInstruction
.2e0b					_CRCheckIndirect:
.2e0b	c9 86		cmp #$86			cmp 	#TKW_AND 					; AND (assembler)
.2e0d	f0 0a		beq $2e19			beq 	_CRAndCommand
.2e0f	c9 97		cmp #$97			cmp 	#TKW_PLING 					; !<term> =
.2e11	f0 f2		beq $2e05			beq 	_CRDefaultLet
.2e13	c9 98		cmp #$98			cmp 	#TKW_QMARK 					; ?<term> =
.2e15	f0 ee		beq $2e05			beq 	_CRDefaultLet
.2e17	d0 45		bne $2e5e			bne 	Unimplemented
.2e19					_CRAndCommand:
.2e19	c8		iny				iny 								; skip over the AND token
.2e1a	a9 95		lda #$95			lda 	#TKW_LPARENANDRPAREN 		; replace it with the pseudo-and
.2e1c	20 36 2e	jsr $2e36			jsr 	CommandAssembler 			; do the assembler command
.2e1f	4c cf 2d	jmp $2dcf			jmp 	CRNextInstruction 			; and loop round.
.2e22					CommandShift1:
.2e22	b1 28		lda ($28),y			lda 	(codePtr),y 				; get shifted value
.2e24	10 38		bpl $2e5e			bpl 	Unimplemented 				; we have an error as this should not happen.
.2e26	c8		iny				iny 								; advance over it.
.2e27	c9 94		cmp #$94			cmp 	#TKA_GROUP1 				; is it an assembler constant ?
.2e29	b0 0b		bcs $2e36			bcs 	CommandAssembler
.2e2b	0a		asl a				asl 	a 							; double into X
.2e2c	aa		tax				tax
.2e2d	7c 2e 2f	jmp ($2f2e,x)			jmp 	(Group1Vectors-12,x) 		; and do the code.
.2e30					CommandShift2:
.2e30	a9 ff		lda #$ff			lda 	#$FF 						; $FF means command not unary function.
.2e32	20 69 18	jsr $1869		jsr	extensionHandler
.2e35	60		rts				rts
.2e36					CommandAssembler:
.2e36	a2 02		ldx #$02		ldx	#2
.2e38	20 b4 13	jsr $13b4		jsr	assemblerHandler
.2e3b	60		rts				rts
.2e3c					CommandAssemblerLabel:
.2e3c	a2 04		ldx #$04		ldx	#4
.2e3e	20 b4 13	jsr $13b4		jsr	assemblerHandler
.2e41	60		rts				rts
.2e42					CommandColon:
.2e42	60		rts				rts
.2e43					CommandBreak:
.2e43	20 30 33	jsr $3330			jsr 	EvaluateRootInteger
.2e46	20 f1 39	jsr $39f1			jsr 	MInt32Zero
.2e49	f0 02		beq $2e4d			beq 	BreakOff
.2e4b					BreakOn:
.2e4b	a2 08		ldx #$08			ldx 	#8
.2e4d					BreakOff:
.2e4d	8e fc 0c	stx $0cfc			stx 	breakIncrement
.2e50	60		rts				rts
.2e51					ResetCodeAddress:
.2e51	ad c8 0a	lda $0ac8			lda 	basePage 					; copy basePage to code Pointer
.2e54	85 28		sta $28				sta 	codePtr
.2e56	ad c9 0a	lda $0ac9			lda 	basePage+1
.2e59	85 29		sta $29				sta 	codePtr+1
.2e5b	a0 03		ldy #$03			ldy 	#3 							; offset after offset link and line#
.2e5d	60		rts				rts
.2e5e					Unimplemented:
.2e5e	a2 01		ldx #$01			ldx 	#ErrorID_Missing
.2e60	20 18 15	jsr $1518		jsr	errorHandler
.2e63					TKErr01:
.2e63					TKErr02:
.2e63					TKErr03:
.2e63					TKErr04:
.2e63					TKErr05:
.2e63					TKErr06:
.2e63					TKErr07:
.2e63					TKErr08:
.2e63					TKErr09:
.2e63					TKErr10:
.2e63					TKErr11:
.2e63					TKErr12:
.2e63					TKErr13:
.2e63					TKErr14:
.2e63	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.2e65	20 18 15	jsr $1518		jsr	errorHandler

;******  Processing file: main/commands/system/../../../generated/tokenvectors0.inc

.2e68					Group0Vectors:
>2e68	80 27					.word	AdvanceNextLine          ; $80 [[eol]]
>2e6a	22 2e					.word	CommandShift1            ; $81 [[sh1]]
>2e6c	30 2e					.word	CommandShift2            ; $82 [[sh2]]
>2e6e	63 2e					.word	TKErr09                  ; $83 [[sh3]]
>2e70	63 2e					.word	TKErr10                  ; $84 [[fpc]]
>2e72	63 2e					.word	TKErr08                  ; $85 [[str]]
>2e74	17 30					.word	AndHandler               ; $86 and
>2e76	04 30					.word	OrHandler                ; $87 or
>2e78	f1 2f					.word	XorHandler               ; $88 xor
>2e7a	39 31					.word	CompareGreaterEq         ; $89 >=
>2e7c	43 31					.word	CompareLessEq            ; $8a <=
>2e7e	25 31					.word	CompareGreater           ; $8b >
>2e80	1b 31					.word	CompareLess              ; $8c <
>2e82	11 31					.word	CompareEquals            ; $8d =
>2e84	2f 31					.word	CompareNotEquals         ; $8e <>
>2e86	82 2f					.word	AddHandler               ; $8f +
>2e88	a5 2f					.word	SubHandler               ; $90 -
>2e8a	3d 30					.word	ShrHandler               ; $91 >>
>2e8c	2a 30					.word	ShlHandler               ; $92 <<
>2e8e	b8 2f					.word	MulHandler               ; $93 *
>2e90	cb 2f					.word	DivHandler               ; $94 /
>2e92	de 2f					.word	ModHandler               ; $95 mod
>2e94	76 30					.word	PowerHandler             ; $96 ^
>2e96	50 30					.word	WordRefHandler           ; $97 !
>2e98	63 30					.word	ByteRefHandler           ; $98 ?
>2e9a	3f 2b					.word	Command_Repeat           ; $99 repeat
>2e9c	e9 2b					.word	Command_While            ; $9a while
>2e9e	94 27					.word	Command_FOR              ; $9b for
>2ea0	a3 28					.word	CommandIf                ; $9c if
>2ea2	63 2e					.word	TKErr04                  ; $9d defproc
>2ea4	4c 2b					.word	Command_Until            ; $9e until
>2ea6	0c 2c					.word	Command_Wend             ; $9f wend
>2ea8	f5 27					.word	Command_NEXT             ; $a0 next
>2eaa	63 2e					.word	TKErr06                  ; $a1 then
>2eac	de 28					.word	Command_ENDIF            ; $a2 endif
>2eae	4e 2a					.word	ReturnProc               ; $a3 endproc
>2eb0	9d 32					.word	UnaryParenthesis         ; $a4 (
>2eb2	7f 34					.word	UnaryLen                 ; $a5 len(
>2eb4	c3 34					.word	UnarySgn                 ; $a6 sgn(
>2eb6	ac 34					.word	UnaryAbs                 ; $a7 abs(
>2eb8	1c 35					.word	Unary_Random             ; $a8 random(
>2eba	66 35					.word	Unary_Page               ; $a9 page
>2ebc	c6 39					.word	MInt32True               ; $aa true
>2ebe	ca 39					.word	MInt32False              ; $ab false
>2ec0	31 35					.word	Unary_Min                ; $ac min(
>2ec2	35 35					.word	Unary_Max                ; $ad max(
>2ec4	3e 36					.word	UnarySys                 ; $ae sys(
>2ec6	e7 35					.word	UnaryTimer               ; $af timer(
>2ec8	fc 33					.word	EventFunction            ; $b0 event(
>2eca	10 36					.word	UnaryGet                 ; $b1 get(
>2ecc	00 36					.word	UnaryInkey               ; $b2 inkey(
>2ece	b7 35					.word	UnaryAlloc               ; $b3 alloc(
>2ed0	77 36					.word	ExecChr                  ; $b4 chr$(
>2ed2	a7 36					.word	ExecLeft                 ; $b5 left$(
>2ed4	c4 36					.word	ExecMid                  ; $b6 mid$(
>2ed6	ec 36					.word	ExecRight                ; $b7 right$(
>2ed8	7e 33					.word	Event_Str                ; $b8 str$(
>2eda	ad 33					.word	UnaryVal                 ; $b9 val(
>2edc	da 34					.word	UnaryPeek                ; $ba peek(
>2ede	e0 34					.word	UnaryDeek                ; $bb deek(
>2ee0	e6 34					.word	UnaryLeek                ; $bc leek(
>2ee2	9d 34					.word	UnaryAsc                 ; $bd asc(
>2ee4	91 35					.word	UnaryIntToFloat          ; $be int(
>2ee6	a4 35					.word	UnaryFloatToInt          ; $bf float(
>2ee8	b0 33					.word	UnaryIsVal               ; $c0 isval(
>2eea	8e 36					.word	ExecUpper                ; $c1 upper$(
>2eec	8b 36					.word	ExecLower                ; $c2 lower$(
>2eee	74 35					.word	UnaryReference           ; $c3 @
>2ef0	8a 35					.word	UnaryComplement          ; $c4 ~
>2ef2	87 35					.word	UnaryHexMarker           ; $c5 &
>2ef4	29 36					.word	UnaryGetString           ; $c6 get$(
>2ef6	2f 36					.word	UnaryInkeyString         ; $c7 inkey$(
>2ef8	66 36					.word	UnaryMem                 ; $c8 mem
>2efa	63 2e					.word	TKErr01                  ; $c9 )
>2efc	42 2e					.word	CommandColon             ; $ca :
>2efe	63 2e					.word	TKErr02                  ; $cb ,
>2f00	63 2e					.word	TKErr03                  ; $cc ;
>2f02	68 27					.word	Command_Rem2             ; $cd '
>2f04	63 2e					.word	TKErr07                  ; $ce to
>2f06	63 2e					.word	TKErr05                  ; $cf step
>2f08	e1 29					.word	CallProc                 ; $d0 proc
>2f0a	df 28					.word	CommandLocal             ; $d1 local
>2f0c	9f 26					.word	Command_Dim              ; $d2 dim
>2f0e	68 27					.word	Command_Rem              ; $d3 rem
>2f10	ad 26					.word	CommandLet               ; $d4 let
>2f12	e9 24					.word	Command_Input            ; $d5 input
>2f14	d8 28					.word	Command_ELSE             ; $d6 else
>2f16	70 26					.word	Command_VDU              ; $d7 vdu
>2f18	9f 25					.word	Command_Print            ; $d8 print
>2f1a	51 24					.word	CommandData              ; $d9 data
>2f1c	63 2e					.word	TKErr13                  ; $da image
>2f1e	63 2e					.word	TKErr12                  ; $db at
>2f20	63 2e					.word	TKErr14                  ; $dc flip
>2f22	91 26					.word	Command_Assert           ; $dd assert
>2f24	2b 27					.word	Command_Poke             ; $de poke
>2f26	2f 27					.word	Command_Doke             ; $df doke
>2f28	33 27					.word	Command_Loke             ; $e0 loke
>2f2a	40 26					.word	Command_Ink              ; $e1 ink
>2f2c	4b 26					.word	Command_Paper            ; $e2 paper
>2f2e	3a 26					.word	Command_CLS              ; $e3 cls
>2f30	56 26					.word	Command_Locate           ; $e4 locate
>2f32	3c 2e					.word	CommandAssemblerLabel    ; $e5 .
>2f34	5e 2e					.word	Unimplemented            ; $e6 from
>2f36	63 2e					.word	TKErr11                  ; $e7 #
>2f38	24 2c					.word	CommandClear             ; $e8 clear

;******  Return to file: main/commands/system/run.asm


;******  Processing file: main/commands/system/../../../generated/tokenvectors1.inc

.2f3a					Group1Vectors:
>2f3a	5a 2d					.word	CommandLoad              ; $86 load
>2f3c	6f 2d					.word	CommandSave              ; $87 save
>2f3e	7f 2c					.word	CommandList              ; $88 list
>2f40	b3 2d					.word	Command_New              ; $89 new
>2f42	43 2e					.word	CommandBreak             ; $8a break
>2f44	c1 2d					.word	Command_Run              ; $8b run
>2f46	26 24					.word	CommandRead              ; $8c read
>2f48	5a 24					.word	CommandRestore           ; $8d restore
>2f4a	7a 27					.word	CommandEnd               ; $8e end
>2f4c	75 27					.word	CommandStop              ; $8f stop
>2f4e	7d 27					.word	CommandXemu              ; $90 xemu
>2f50	b7 24					.word	CommandGOTO              ; $91 goto
>2f52	8c 24					.word	CommandGOSUB             ; $92 gosub
>2f54	9f 24					.word	CommandRETURN            ; $93 return

;******  Return to file: main/commands/system/run.asm


;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/binary/binary.asm

.2f56					BinaryProcess:
.2f56	b5 90		lda $90,x			lda 	esType,x 					; or type bytes together and check bit 6.
.2f58	15 91		ora $91,x			ora 	esType+1,x 					; (the float bit)
.2f5a	0a		asl a				asl 	a
.2f5b	30 0e		bmi $2f6b			bmi 	_BPStringType 				; if bit 6 is set, then string type, error
.2f5d	18		clc				clc 								; return CC for integer
.2f5e	29 02		and #$02			and 	#$02 						; $02 because of ASL A. check original bit 1.
.2f60	f0 08		beq $2f6a			beq 	_BPExit 					; if both integer then return with CC.
.2f62	20 70 2f	jsr $2f70			jsr 	BPMakeBothFloat 			; make both float
.2f65	a9 01		lda #$01			lda 	#$01 						; set result type to float
.2f67	95 90		sta $90,x			sta 	esType,x
.2f69	38		sec				sec 								; and return with carry set.
.2f6a					_BPExit:
.2f6a	60		rts				rts
.2f6b					_BPStringType:
.2f6b	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.2f6d	20 18 15	jsr $1518		jsr	errorHandler
.2f70					BPMakeBothFloat:
.2f70	e8		inx				inx
.2f71	20 75 2f	jsr $2f75			jsr 	BPMakeFloat 				; one is a float, so we do both as floats.
.2f74	ca		dex				dex
.2f75					BPMakeFloat:
.2f75	b5 90		lda $90,x			lda 	esType,x 					; get type bit which is in bit 0
.2f77	4a		lsr a				lsr 	a
.2f78	b0 07		bcs $2f81			bcs 	_BPIsFloat 					; already a float if set.
.2f7a	8a		txa				txa
.2f7b	a2 1c		ldx #$1c		ldx	#28
.2f7d	20 30 22	jsr $2230		jsr	floatingpointHandler
.2f80	aa		tax				tax
.2f81					_BPIsFloat:
.2f81	60		rts				rts
.2f82					AddHandler:
.2f82	20 53 31	jsr $3153			jsr 	DereferenceTwo 				; dereference top two on stack.
.2f85	b5 90		lda $90,x			lda 	esType,x 					; check two strings.
.2f87	35 91		and $91,x			and 	esType+1,x
.2f89	29 40		and #$40			and 	#$40 						; if both have bit 6 set ... we have two strings
.2f8b	d0 10		bne $2f9d			bne 	_AHStringConcat				; concatenate strings.
.2f8d	20 56 2f	jsr $2f56			jsr 	BinaryProcess 				; check to see if either is float
.2f90	b0 03		bcs $2f95			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.2f92	4c ae 38	jmp $38ae			jmp 	MInt32Add 							; else do it as integer.
.2f95					_IsFPOperation:
.2f95	8a		txa				txa 								; call the relevant fp routine
.2f96	a2 04		ldx #$04		ldx	#4
.2f98	20 30 22	jsr $2230		jsr	floatingpointHandler
.2f9b	aa		tax				tax
.2f9c	60		rts				rts
.2f9d					_AHStringConcat:
.2f9d	8a		txa				txa 								; handled by the string module.
.2f9e	a2 06		ldx #$06		ldx	#6
.2fa0	20 75 3d	jsr $3d75		jsr	stringHandler
.2fa3	aa		tax				tax
.2fa4	60		rts				rts
.2fa5					SubHandler:
.2fa5	20 53 31	jsr $3153			jsr 	DereferenceTwo
.2fa8	20 56 2f	jsr $2f56			jsr 	BinaryProcess 				; check to see if either is float
.2fab	b0 03		bcs $2fb0			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.2fad	4c c8 38	jmp $38c8			jmp 	MInt32Sub 							; else do it as integer.
.2fb0					_IsFPOperation:
.2fb0	8a		txa				txa 								; call the relevant fp routine
.2fb1	a2 12		ldx #$12		ldx	#18
.2fb3	20 30 22	jsr $2230		jsr	floatingpointHandler
.2fb6	aa		tax				tax
.2fb7	60		rts				rts
.2fb8					MulHandler:
.2fb8	20 53 31	jsr $3153			jsr 	DereferenceTwo
.2fbb	20 56 2f	jsr $2f56			jsr 	BinaryProcess 				; check to see if either is float
.2fbe	b0 03		bcs $2fc3			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.2fc0	4c e2 38	jmp $38e2			jmp 	MInt32Multiply 							; else do it as integer.
.2fc3					_IsFPOperation:
.2fc3	8a		txa				txa 								; call the relevant fp routine
.2fc4	a2 0c		ldx #$0c		ldx	#12
.2fc6	20 30 22	jsr $2230		jsr	floatingpointHandler
.2fc9	aa		tax				tax
.2fca	60		rts				rts
.2fcb					DivHandler:
.2fcb	20 53 31	jsr $3153			jsr 	DereferenceTwo
.2fce	20 56 2f	jsr $2f56			jsr 	BinaryProcess 				; check to see if either is float
.2fd1	b0 03		bcs $2fd6			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.2fd3	4c 9f 37	jmp $379f			jmp 	MInt32SDivide 							; else do it as integer.
.2fd6					_IsFPOperation:
.2fd6	8a		txa				txa 								; call the relevant fp routine
.2fd7	a2 08		ldx #$08		ldx	#8
.2fd9	20 30 22	jsr $2230		jsr	floatingpointHandler
.2fdc	aa		tax				tax
.2fdd	60		rts				rts
.2fde					ModHandler:
.2fde	20 53 31	jsr $3153			jsr 	DereferenceTwo
.2fe1	20 56 2f	jsr $2f56			jsr 	BinaryProcess 				; check to see if either is float
.2fe4	b0 03		bcs $2fe9			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.2fe6	4c 1d 38	jmp $381d			jmp 	MInt32Modulus 							; else do it as integer.
.2fe9					_IsFPOperation:
.2fe9	8a		txa				txa 								; call the relevant fp routine
.2fea	a2 0a		ldx #$0a		ldx	#10
.2fec	20 30 22	jsr $2230		jsr	floatingpointHandler
.2fef	aa		tax				tax
.2ff0	60		rts				rts
.2ff1					XorHandler:
.2ff1	20 53 31	jsr $3153			jsr 	DereferenceTwo
.2ff4	20 56 2f	jsr $2f56			jsr 	BinaryProcess 				; check to see if either is float
.2ff7	b0 03		bcs $2ffc			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.2ff9	4c 51 37	jmp $3751			jmp 	MInt32Xor 							; else do it as integer.
.2ffc					_IsFPOperation:
.2ffc	8a		txa				txa 								; call the relevant fp routine
.2ffd	a2 0a		ldx #$0a		ldx	#10
.2fff	20 30 22	jsr $2230		jsr	floatingpointHandler
.3002	aa		tax				tax
.3003	60		rts				rts
.3004					OrHandler:
.3004	20 53 31	jsr $3153			jsr 	DereferenceTwo
.3007	20 56 2f	jsr $2f56			jsr 	BinaryProcess 				; check to see if either is float
.300a	b0 03		bcs $300f			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.300c	4c 38 37	jmp $3738			jmp 	MInt32Or 							; else do it as integer.
.300f					_IsFPOperation:
.300f	8a		txa				txa 								; call the relevant fp routine
.3010	a2 0a		ldx #$0a		ldx	#10
.3012	20 30 22	jsr $2230		jsr	floatingpointHandler
.3015	aa		tax				tax
.3016	60		rts				rts
.3017					AndHandler:
.3017	20 53 31	jsr $3153			jsr 	DereferenceTwo
.301a	20 56 2f	jsr $2f56			jsr 	BinaryProcess 				; check to see if either is float
.301d	b0 03		bcs $3022			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.301f	4c 1f 37	jmp $371f			jmp 	MInt32And 							; else do it as integer.
.3022					_IsFPOperation:
.3022	8a		txa				txa 								; call the relevant fp routine
.3023	a2 0a		ldx #$0a		ldx	#10
.3025	20 30 22	jsr $2230		jsr	floatingpointHandler
.3028	aa		tax				tax
.3029	60		rts				rts
.302a					ShlHandler:
.302a	20 53 31	jsr $3153			jsr 	DereferenceTwo
.302d	20 56 2f	jsr $2f56			jsr 	BinaryProcess 				; check to see if either is float
.3030	b0 03		bcs $3035			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.3032	4c ab 30	jmp $30ab			jmp 	Mint32ShiftLeftX 							; else do it as integer.
.3035					_IsFPOperation:
.3035	8a		txa				txa 								; call the relevant fp routine
.3036	a2 0a		ldx #$0a		ldx	#10
.3038	20 30 22	jsr $2230		jsr	floatingpointHandler
.303b	aa		tax				tax
.303c	60		rts				rts
.303d					ShrHandler:
.303d	20 53 31	jsr $3153			jsr 	DereferenceTwo
.3040	20 56 2f	jsr $2f56			jsr 	BinaryProcess 				; check to see if either is float
.3043	b0 03		bcs $3048			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.3045	4c ae 30	jmp $30ae			jmp 	MInt32ShiftRightX 							; else do it as integer.
.3048					_IsFPOperation:
.3048	8a		txa				txa 								; call the relevant fp routine
.3049	a2 0a		ldx #$0a		ldx	#10
.304b	20 30 22	jsr $2230		jsr	floatingpointHandler
.304e	aa		tax				tax
.304f	60		rts				rts
.3050					WordRefHandler:
.3050	20 53 31	jsr $3153			jsr 	DereferenceTwo
.3053	20 56 2f	jsr $2f56			jsr 	BinaryProcess 				; check to see if either is float
.3056	b0 03		bcs $305b			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.3058	4c 9d 30	jmp $309d			jmp 	MInt32WordIndirect 							; else do it as integer.
.305b					_IsFPOperation:
.305b	8a		txa				txa 								; call the relevant fp routine
.305c	a2 0a		ldx #$0a		ldx	#10
.305e	20 30 22	jsr $2230		jsr	floatingpointHandler
.3061	aa		tax				tax
.3062	60		rts				rts
.3063					ByteRefHandler:
.3063	20 53 31	jsr $3153			jsr 	DereferenceTwo
.3066	20 56 2f	jsr $2f56			jsr 	BinaryProcess 				; check to see if either is float
.3069	b0 03		bcs $306e			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.306b	4c a1 30	jmp $30a1			jmp 	MInt32ByteIndirect 							; else do it as integer.
.306e					_IsFPOperation:
.306e	8a		txa				txa 								; call the relevant fp routine
.306f	a2 0a		ldx #$0a		ldx	#10
.3071	20 30 22	jsr $2230		jsr	floatingpointHandler
.3074	aa		tax				tax
.3075	60		rts				rts
.3076					PowerHandler:
.3076	20 53 31	jsr $3153			jsr 	DereferenceTwo
.3079	20 56 2f	jsr $2f56			jsr 	BinaryProcess 				; check to see if either is float
.307c	b0 03		bcs $3081			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.307e	4c 89 30	jmp $3089			jmp 	PowerInteger 							; else do it as integer.
.3081					_IsFPOperation:
.3081	8a		txa				txa 								; call the relevant fp routine
.3082	a2 18		ldx #$18		ldx	#24
.3084	20 30 22	jsr $2230		jsr	floatingpointHandler
.3087	aa		tax				tax
.3088	60		rts				rts
.3089					PowerInteger:
.3089	20 70 2f	jsr $2f70			jsr 	BPMakeBothFloat				; make them float.
.308c	8a		txa				txa
.308d	a2 18		ldx #$18		ldx	#24
.308f	20 30 22	jsr $2230		jsr	floatingpointHandler
.3092	a2 14		ldx #$14		ldx	#20
.3094	20 30 22	jsr $2230		jsr	floatingpointHandler
.3097	aa		tax				tax
.3098	a9 00		lda #$00			lda 	#0 							; make type integer
.309a	95 90		sta $90,x			sta 	esType,x
.309c	60		rts				rts
.309d					Mint32WordIndirect:
.309d	a9 80		lda #$80	 		lda 	#$80 				 		; word reference type (bit 7 set)
.309f	d0 02		bne $30a3			bne 	Min32Indirect
.30a1					Mint32ByteIndirect:
.30a1	a9 a0		lda #$a0			lda 	#$A0 						; byte reference type (bit 7, bit 5 set)
.30a3					Min32Indirect:
.30a3	48		pha				pha 								; save the indirection
.30a4	20 ae 38	jsr $38ae			jsr 	MInt32Add 					; add a!b a?b
.30a7	68		pla				pla 								; and set the type to reference.
.30a8	95 90		sta $90,x			sta 	esType,x 	 				; so a!b => a+b and it's a reference....
.30aa	60		rts				rts
.30ab					Mint32ShiftLeftX:
.30ab	18		clc				clc 								; CC shift left
.30ac	90 01		bcc $30af			bcc 	Mint32Shift
.30ae					Mint32ShiftRightX:
.30ae	38		sec				sec 								; CS shift right
.30af					Mint32Shift:
.30af	08		php				php 								; save carry flag on stack.
.30b0	b5 a1		lda $a1,x			lda 	esInt1+1,x 					; if shift >= 32 then it is zero.
.30b2	15 a9		ora $a9,x			ora 	esInt2+1,x
.30b4	15 b1		ora $b1,x			ora 	esInt3+1,x
.30b6	d0 1e		bne $30d6			bne 	_MShiftZero
.30b8	b5 99		lda $99,x			lda 	esInt0+1,x
.30ba	c9 20		cmp #$20			cmp 	#32
.30bc	b0 18		bcs $30d6			bcs 	_MShiftZero
.30be					_MShiftLoop:
.30be	b5 99		lda $99,x			lda 	esInt0+1,x 					; check count is zero
.30c0	f0 12		beq $30d4			beq 	_MShiftExit
.30c2	d6 99		dec $99,x			dec 	esInt0+1,x
.30c4	28		plp				plp 								; restore and save carry
.30c5	08		php				php
.30c6	90 06		bcc $30ce			bcc 	_MShiftLeft 				; and shift left/right accordingly.
.30c8	20 e8 39	jsr $39e8			jsr 	Mint32ShiftRight
.30cb	4c be 30	jmp $30be			jmp 	_MShiftLoop
.30ce					_MShiftLeft:
.30ce	20 df 39	jsr $39df			jsr 	Mint32ShiftLeft
.30d1	4c be 30	jmp $30be			jmp 	_MShiftLoop
.30d4					_MShiftExit:
.30d4	28		plp				plp	 								; throw saved carry and exit
.30d5	60		rts				rts
.30d6					_MShiftZero:
.30d6	4c ca 39	jmp $39ca			jmp 	MInt32False 				; return 0 as shifted >= 32 times.

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/binary/compare.asm

.30d9					PerformComparison:
.30d9	20 53 31	jsr $3153			jsr 	DereferenceTwo 				; make both values.
.30dc	b5 90		lda $90,x			lda 	esType,x 					; check for two strings.
.30de	35 91		and $91,x			and 	esType+1,x
.30e0	0a		asl a				asl 	a 							; bit 7 set if both bit 6s were set.
.30e1	30 1d		bmi $3100			bmi 	_PCIsString
.30e3	b5 90		lda $90,x			lda 	esType,x 					; check either is floating point.
.30e5	15 91		ora $91,x			ora 	esType+1,x
.30e7	0a		asl a				asl 	a 							; shift bit 6 (string) to bit 7, mixed types
.30e8	30 22		bmi $310c			bmi 	_PCError
.30ea	29 02		and #$02			and 	#$02 						; because of ASL, check type in bit 0
.30ec	f0 0f		beq $30fd			beq 	_PCIsInteger 				; if not two integers, e.g. 1 of the bits is set
.30ee	20 70 2f	jsr $2f70			jsr 	BPMakeBothFloat 			; make both float
.30f1	8a		txa				txa
.30f2	a2 06		ldx #$06		ldx	#6
.30f4	20 30 22	jsr $2230		jsr	floatingpointHandler
.30f7	86 32		stx $32				stx 	tempShort 					; save result
.30f9	aa		tax				tax
.30fa	a5 32		lda $32				lda 	tempShort
.30fc	60		rts				rts
.30fd					_PCIsInteger:
.30fd	4c 6a 37	jmp $376a			jmp 	MInt32Compare
.3100					_PCIsString:
.3100	8a		txa				txa 								; A has SP
.3101	a2 0a		ldx #$0a		ldx	#10
.3103	20 75 3d	jsr $3d75		jsr	stringHandler
.3106	86 32		stx $32				stx 	tempShort 					; save result
.3108	aa		tax				tax 								; put SP back in X and get result.
.3109	a5 32		lda $32				lda 	tempShort
.310b	60		rts				rts
.310c					_PCError:
.310c	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.310e	20 18 15	jsr $1518		jsr	errorHandler
.3111					CompareEquals:
.3111	20 d9 30	jsr $30d9			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.3114	c9 00		cmp #$00			cmp 	#$00 						; and we do something if it is = or <> a value.
.3116	f0 35		beq $314d			beq  	CompareTrue
.3118	4c 50 31	jmp $3150			jmp 	CompareFalse
.311b					CompareLess:
.311b	20 d9 30	jsr $30d9			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.311e	c9 ff		cmp #$ff			cmp 	#$FF 						; and we do something if it is = or <> a value.
.3120	f0 2b		beq $314d			beq  	CompareTrue
.3122	4c 50 31	jmp $3150			jmp 	CompareFalse
.3125					CompareGreater:
.3125	20 d9 30	jsr $30d9			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.3128	c9 01		cmp #$01			cmp 	#$01 						; and we do something if it is = or <> a value.
.312a	f0 21		beq $314d			beq  	CompareTrue
.312c	4c 50 31	jmp $3150			jmp 	CompareFalse
.312f					CompareNotEquals:
.312f	20 d9 30	jsr $30d9			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.3132	c9 00		cmp #$00			cmp 	#$00 						; and we do something if it is = or <> a value.
.3134	d0 17		bne $314d			bne  	CompareTrue
.3136	4c 50 31	jmp $3150			jmp 	CompareFalse
.3139					CompareGreaterEq:
.3139	20 d9 30	jsr $30d9			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.313c	c9 ff		cmp #$ff			cmp 	#$FF 						; and we do something if it is = or <> a value.
.313e	d0 0d		bne $314d			bne  	CompareTrue
.3140	4c 50 31	jmp $3150			jmp 	CompareFalse
.3143					CompareLessEq:
.3143	20 d9 30	jsr $30d9			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.3146	c9 01		cmp #$01			cmp 	#$01 						; and we do something if it is = or <> a value.
.3148	d0 03		bne $314d			bne  	CompareTrue
.314a	4c 50 31	jmp $3150			jmp 	CompareFalse
.314d					CompareTrue:
.314d	4c c6 39	jmp $39c6			jmp 	MInt32True
.3150					CompareFalse:
.3150	4c ca 39	jmp $39ca			jmp 	MInt32False

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/dereference.asm

.3153					DereferenceTwo:
.3153	e8		inx				inx
.3154	20 58 31	jsr $3158			jsr 	DereferenceOne
.3157	ca		dex				dex
.3158					DereferenceOne:
.3158	b5 90		lda $90,x			lda 	esType,x
.315a	10 3d		bpl $3199			bpl 	_DRNotReference 			; is it a reference ? if not, we don't need to do anything
.315c	4a		lsr a				lsr 	a 							; do float dereference if bit 0 set.
.315d	b0 3b		bcs $319a			bcs 	_DRFloatDeReference
.315f	98		tya				tya
.3160	48		pha				pha
.3161	b5 98		lda $98,x			lda 	esInt0,x 					; copy address to temp0
.3163	85 2a		sta $2a				sta 	temp0
.3165	b5 a0		lda $a0,x			lda 	esInt1,x
.3167	85 2b		sta $2b				sta 	temp0+1
.3169	a9 00		lda #$00			lda 	#0 							; clear esInt1..3
.316b	95 a0		sta $a0,x			sta 	esInt1,x
.316d	95 a8		sta $a8,x			sta 	esInt2,x
.316f	95 b0		sta $b0,x			sta 	esInt3,x
.3171	b5 90		lda $90,x			lda 	esType,x 					; get the type byte.
.3173	29 60		and #$60			and 	#$60 						; get string flag ($40) and byte flag ($20)
.3175	0a		asl a				asl 	a 							; now string ($80) byte ($40)
.3176	30 0d		bmi $3185			bmi 	_DeRefString 				; string, 2 bytes only
.3178	d0 11		bne $318b			bne 	_DeRefByte 					; byte 1 byte only
.317a					_DeRefLong:
.317a	a0 03		ldy #$03			ldy 	#3
.317c	b1 2a		lda ($2a),y			lda 	(temp0),y
.317e	95 b0		sta $b0,x			sta 	esInt3,x
.3180	88		dey				dey
.3181	b1 2a		lda ($2a),y			lda 	(temp0),y
.3183	95 a8		sta $a8,x			sta 	esInt2,x
.3185					_DeRefString:
.3185	a0 01		ldy #$01			ldy 	#1
.3187	b1 2a		lda ($2a),y			lda 	(temp0),y
.3189	95 a0		sta $a0,x			sta 	esInt1,x
.318b					_DeRefByte:
.318b	a0 00		ldy #$00			ldy 	#0
.318d	b1 2a		lda ($2a),y			lda 	(temp0),y
.318f	95 98		sta $98,x			sta 	esInt0,x
.3191	b5 90		lda $90,x			lda 	esType,x 					; clear byte and deref bits.
.3193	29 40		and #$40			and 	#$40
.3195	95 90		sta $90,x			sta 	esType,x
.3197	68		pla				pla
.3198	a8		tay				tay
.3199					_DRNotReference
.3199	60		rts				rts
.319a					_DRFloatDereference:
.319a	20 22 27	jsr $2722			jsr 	TOSToTemp0 					; address to deref in temp0
.319d	8a		txa				txa
.319e	a2 1e		ldx #$1e		ldx	#30
.31a0	20 30 22	jsr $2230		jsr	floatingpointHandler
.31a3	aa		tax				tax
.31a4	a9 01		lda #$01			lda 	#$01 						; type to FP (float)
.31a6	95 90		sta $90,x			sta 	esType,x
.31a8	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/evaluate.asm

.31a9					EvaluateLevel:
.31a9	e0 08		cpx #$08			cpx 	#StackSize 					; check stack overflow
.31ab	b0 1e		bcs $31cb			bcs 	_ELStack
.31ad	48		pha				pha 								; save precedence level.
.31ae	a9 00		lda #$00			lda 	#0 							; zero the current stack level.
.31b0	95 98		sta $98,x			sta 	esInt0,x
.31b2	95 a0		sta $a0,x			sta 	esInt1,x
.31b4	95 a8		sta $a8,x			sta 	esInt2,x
.31b6	95 b0		sta $b0,x			sta 	esInt3,x
.31b8	95 90		sta $90,x			sta 	esType,x 					; zero the type (integer value)
.31ba	b1 28		lda ($28),y			lda 	(codePtr),y	 				; look at first token/character
.31bc	30 26		bmi $31e4			bmi 	_ELIsToken 					; if -ve could be string, float, or unary function.
.31be	0a		asl a				asl 	a 							; if 00-3F then will now be PL and it's a variable.
.31bf	30 0f		bmi $31d0			bmi 	_ELIsConstant 				; 40-7F will be -ve and that's an integer constant.
.31c1	8a		txa				txa 								; stack level in X
.31c2	a2 02		ldx #$02		ldx	#2
.31c4	20 bf 49	jsr $49bf		jsr	variableHandler
.31c7	aa		tax				tax
.31c8	4c 0d 32	jmp $320d			jmp		_ELHasTerm
.31cb					_ELStack:
.31cb	a2 23		ldx #$23			ldx 	#ErrorID_NumStack
.31cd	20 18 15	jsr $1518		jsr	errorHandler
.31d0					_ELIsConstant:
.31d0	4a		lsr a				lsr 	a 							; get the value back
.31d1	29 3f		and #$3f			and 	#$3F 						; force into range 0-63
.31d3	95 98		sta $98,x			sta 	esInt0,x 					; and put in LSB.
.31d5					_ELCheckNext:
.31d5	c8		iny				iny 								; look at next
.31d6	b1 28		lda ($28),y			lda 	(codePtr),y
.31d8	49 40		eor #$40			eor 	#$40 						; shift around so 40-7F => 00-3F
.31da	c9 40		cmp #$40			cmp 	#$40 						; out of range ?
.31dc	b0 2f		bcs $320d			bcs 	_ELHasTerm 					; done getting the constant.
.31de	20 a6 32	jsr $32a6			jsr 	ELShiftByteIn 				; shift byte into position.
.31e1	4c d5 31	jmp $31d5			jmp 	_ELCheckNext
.31e4					_ELIsToken:
.31e4	c9 85		cmp #$85			cmp 	#TOK_STR 					; handle strings.
.31e6	f0 0f		beq $31f7			beq 	_ELIsString
.31e8	c9 84		cmp #$84			cmp 	#TOK_FPC 					; if no, then check unary.
.31ea	d0 5f		bne $324b			bne 	_ELCheckUnary
.31ec	8a		txa				txa 								; put X into A
.31ed	c8		iny				iny 								; skip over the float marker
.31ee	a2 1a		ldx #$1a		ldx	#26
.31f0	20 30 22	jsr $2230		jsr	floatingpointHandler
.31f3	aa		tax				tax 								; restore X
.31f4	4c 0d 32	jmp $320d			jmp 	_ELHasTerm
.31f7					_ELIsString:
.31f7	98		tya				tya 								; address of string is codePtr+y+1
.31f8	38		sec				sec
.31f9	65 28		adc $28				adc 	codePtr
.31fb	95 98		sta $98,x			sta 	esInt0,x
.31fd	a5 29		lda $29				lda 	codePtr+1
.31ff	69 00		adc #$00			adc 	#0
.3201	95 a0		sta $a0,x			sta 	esInt1,x
.3203	a9 40		lda #$40			lda 	#$40 						; set type to string value
.3205	95 90		sta $90,x			sta 	esType,x
.3207	c8		iny				iny 								; skip over string.
.3208	98		tya				tya
.3209	38		sec				sec									; +1 for the length itself.
.320a	71 28		adc ($28),y			adc 	(codePtr),y
.320c	a8		tay				tay 								; and fall through to term loop code.
.320d					_ELHasTerm:
.320d	b1 28		lda ($28),y			lda 	(codePtr),y
.320f	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; check in the correct range for binary tokens.
.3211	90 04		bcc $3217			bcc 	_ELPopExit
.3213	c9 99		cmp #$99			cmp 	#TOK_STRUCTST
.3215	90 02		bcc $3219			bcc 	_ELHasBinaryTerm
.3217					_ELPopExit:
.3217	68		pla				pla
.3218					_ELExit:
.3218	60		rts				rts
.3219					_ELHasBinaryTerm:
.3219	84 32		sty $32				sty 	tempShort 					; save position
.321b	a8		tay				tay 								; use token as an index and get the precedence.
.321c	b9 4e 32	lda $324e,y			lda 	ELBinaryOperatorInfo-TOK_BINARYST,y
.321f	a4 32		ldy $32				ldy 	tempShort 					; restore Y
.3221	85 32		sta $32				sta 	tempShort 					; save precedence in memory.
.3223	68		pla				pla 								; restore current level.
.3224	c5 32		cmp $32				cmp 	tempShort 					; if current >= operator then exit
.3226	b0 f0		bcs $3218			bcs 	_ELExit
.3228	48		pha				pha 								; save current level back on the stack.
.3229	b1 28		lda ($28),y			lda 	(codePtr),y 				; save the binary operator on the stack and skip it.
.322b	48		pha				pha
.322c	c8		iny				iny
.322d	e8		inx				inx 								; calculate the RHS at the operator precedence.
.322e	a5 32		lda $32				lda 	tempShort
.3230	20 a9 31	jsr $31a9			jsr 	EvaluateLevel
.3233	ca		dex				dex
.3234	68		pla				pla 								; get the operator back out.
.3235					_ELExecuteA:
.3235	86 32		stx $32				stx 	tempShort 					; upload the vectors. Would be nice to use jmp (aaaa,x)
.3237	0a		asl a				asl 	a 							; but not practical. May use push/rts later.
.3238	aa		tax				tax
.3239	bd 68 2e	lda $2e68,x			lda 	Group0Vectors,x
.323c	85 2a		sta $2a				sta 	temp0
.323e	bd 69 2e	lda $2e69,x			lda 	Group0Vectors+1,x
.3241	85 2b		sta $2b				sta 	temp0+1
.3243	a6 32		ldx $32				ldx 	tempShort
.3245	20 92 32	jsr $3292			jsr 	_ELCallTemp0
.3248	4c 0d 32	jmp $320d			jmp 	_ELHasTerm 					; and loop back round.
.324b					_ELCheckUnary:
.324b	c8		iny				iny 								; skip over token.
.324c	c9 90		cmp #$90			cmp 	#TKW_MINUS 					; is it - term
.324e	f0 19		beq $3269			beq 	_ELMinus
.3250	c9 97		cmp #$97			cmp 	#TKW_PLING 					; is it ! or ? term
.3252	f0 2c		beq $3280			beq 	_ELIndirect
.3254	c9 98		cmp #$98			cmp 	#TKW_QMARK
.3256	f0 28		beq $3280			beq 	_ELIndirect
.3258	c9 83		cmp #$83			cmp 	#TOK_SHIFT3 				; is it the unary extension.
.325a	f0 39		beq $3295			beq 	_ELExtension
.325c	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST 				; must be TOK_UNARYST ... TOK_TOKENS
.325e	90 04		bcc $3264			bcc 	_ELUSyntax
.3260	c9 c9		cmp #$c9			cmp 	#TOK_TOKENS
.3262	90 d1		bcc $3235			bcc 	_ELExecuteA 				; if so do that token.
.3264					_ELUSyntax:
.3264	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.3266	20 18 15	jsr $1518		jsr	errorHandler
.3269					_ELMinus:
.3269	20 fb 32	jsr $32fb			jsr 	EvaluateNumericTerm 		; get a number to negate.
.326c	b5 90		lda $90,x			lda 	esType,x 					; is it integer
.326e	f0 0a		beq $327a			beq 	_ELMinusInteger
.3270	8a		txa				txa
.3271	a2 0e		ldx #$0e		ldx	#14
.3273	20 30 22	jsr $2230		jsr	floatingpointHandler
.3276	aa		tax				tax
.3277	4c 0d 32	jmp $320d			jmp 	_ELHasTerm
.327a					_ELMinusInteger:
.327a	20 84 39	jsr $3984			jsr 	MInt32Negate 				; do int negate
.327d	4c 0d 32	jmp $320d			jmp 	_ELHasTerm
.3280					_ELIndirect:
.3280	48		pha				pha 								; save what we want (TKW_QMARK TWK_PLING)
.3281	20 04 33	jsr $3304			jsr 	EvaluateIntegerTerm 		; integer address
.3284	68		pla				pla
.3285	49 97		eor #$97			eor 	#TKW_PLING 					; now $00 if !
.3287	f0 02		beq $328b			beq 	_ELHaveModifier
.3289	a9 20		lda #$20			lda 	#$20 						; now $00 if !, $20 if ?
.328b					_ELHaveModifier:
.328b	09 80		ora #$80			ora 	#$80						; make it the appropriate reference.
.328d	95 90		sta $90,x			sta 	esType,x 					; $80 for ! $A0 for ?
.328f	4c 0d 32	jmp $320d			jmp 	_ELHasTerm
.3292					_ELCallTemp0:
.3292	6c 2a 00	jmp ($002a)			jmp 	(temp0)
.3295					_ELExtension:
.3295	8a		txa				txa 								; stack pos in A
.3296	20 69 18	jsr $1869		jsr	extensionHandler
.3299	aa		tax				tax 								; restore stack
.329a	4c 0d 32	jmp $320d			jmp 	_ELHasTerm
.329d					UnaryParenthesis:
.329d	a9 00		lda #$00			lda 	#0 							; ( is a unary function ....
.329f	20 a9 31	jsr $31a9			jsr 	EvaluateLevel
.32a2	20 3d 3a	jsr $3a3d			jsr 	CheckRightParen 			; check for )
.32a5	60		rts				rts
.32a6					ELShiftByteIn:
.32a6	48		pha				pha 								; save bits to shift in.
.32a7	b5 b0		lda $b0,x			lda 	esInt3,x 					; save top most byte
.32a9	48		pha				pha
.32aa	b5 a8		lda $a8,x			lda 	esInt2,x 					; shift everything left 8 bits
.32ac	95 b0		sta $b0,x			sta 	esInt3,x
.32ae	b5 a0		lda $a0,x			lda 	esInt1,x
.32b0	95 a8		sta $a8,x			sta 	esInt2,x
.32b2	b5 98		lda $98,x			lda 	esInt0,x
.32b4	95 a0		sta $a0,x			sta 	esInt1,x
.32b6	a9 00		lda #$00			lda 	#0
.32b8	95 98		sta $98,x			sta 	esInt0,x
.32ba	68		pla				pla 								; now A:TOS is a 5 byte register, shift right twice.
.32bb	29 03		and #$03			and 	#3 							; only want lower 2 bits
.32bd	09 04		ora #$04			ora 	#4  						; set bit 2 - when 1 we are done
.32bf					_ELShiftLoop:
.32bf	4a		lsr a				lsr 	a
.32c0	76 b0		ror $b0,x			ror 	esInt3,x
.32c2	76 a8		ror $a8,x			ror 	esInt2,x
.32c4	76 a0		ror $a0,x			ror 	esInt1,x
.32c6	76 98		ror $98,x			ror 	esInt0,x
.32c8	c9 01		cmp #$01			cmp 	#1
.32ca	d0 f3		bne $32bf			bne 	_ELShiftLoop
.32cc	68		pla				pla 								; get original 6 bit value and OR in.
.32cd	29 3f		and #$3f			and 	#$3F
.32cf	15 98		ora $98,x			ora 	esInt0,x
.32d1	95 98		sta $98,x			sta 	esInt0,x
.32d3	60		rts				rts
.32d4					ELBinaryOperatorInfo:

;******  Processing file: main/evaluate/../../generated/binarystructinfo.inc

>32d4	01					.byte	$01			; $86 and
>32d5	01					.byte	$01			; $87 or
>32d6	01					.byte	$01			; $88 xor
>32d7	02					.byte	$02			; $89 >=
>32d8	02					.byte	$02			; $8a <=
>32d9	02					.byte	$02			; $8b >
>32da	02					.byte	$02			; $8c <
>32db	02					.byte	$02			; $8d =
>32dc	02					.byte	$02			; $8e <>
>32dd	03					.byte	$03			; $8f +
>32de	03					.byte	$03			; $90 -
>32df	04					.byte	$04			; $91 >>
>32e0	04					.byte	$04			; $92 <<
>32e1	04					.byte	$04			; $93 *
>32e2	04					.byte	$04			; $94 /
>32e3	04					.byte	$04			; $95 mod
>32e4	05					.byte	$05			; $96 ^
>32e5	06					.byte	$06			; $97 !
>32e6	06					.byte	$06			; $98 ?
>32e7	82					.byte	$82			; $99 repeat
>32e8	82					.byte	$82			; $9a while
>32e9	82					.byte	$82			; $9b for
>32ea	82					.byte	$82			; $9c if
>32eb	82					.byte	$82			; $9d defproc
>32ec	80					.byte	$80			; $9e until
>32ed	80					.byte	$80			; $9f wend
>32ee	80					.byte	$80			; $a0 next
>32ef	80					.byte	$80			; $a1 then
>32f0	80					.byte	$80			; $a2 endif
>32f1	80					.byte	$80			; $a3 endproc

;******  Return to file: main/evaluate/evaluate.asm


;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/support.asm

.32f2					EvaluateTerm:
.32f2	a9 0f		lda #$0f			lda 	#15 						; no binary operator has this high a precedence.
.32f4	20 a9 31	jsr $31a9			jsr 	EvaluateLevel
.32f7	20 58 31	jsr $3158			jsr 	DereferenceOne
.32fa	60		rts				rts
.32fb					EvaluateNumericTerm:
.32fb	20 f2 32	jsr $32f2			jsr 	EvaluateTerm
.32fe	b5 90		lda $90,x			lda 	esType,x
.3300	0a		asl a				asl 	a 							; see if it's a string.
.3301	30 09		bmi $330c			bmi 	ENTType
.3303	60		rts				rts
.3304					EvaluateIntegerTerm:
.3304	20 f2 32	jsr $32f2			jsr 	EvaluateTerm
.3307	b5 90		lda $90,x			lda 	esType,x
.3309	d0 01		bne $330c			bne 	ENTType
.330b	60		rts				rts
.330c					ENTType:
.330c	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.330e	20 18 15	jsr $1518		jsr	errorHandler
.3311					EvaluateRoot:
.3311	a2 00		ldx #$00			ldx 	#0
.3313					Evaluate:
.3313	a9 00		lda #$00			lda 	#0
.3315	20 a9 31	jsr $31a9			jsr 	EvaluateLevel
.3318	20 58 31	jsr $3158			jsr 	DereferenceOne
.331b	60		rts				rts
.331c					EvaluateNumeric:
.331c	20 13 33	jsr $3313			jsr 	Evaluate
.331f	b5 90		lda $90,x			lda 	esType,x
.3321	0a		asl a				asl 	a 							; see if it's a string.
.3322	30 e8		bmi $330c			bmi 	ENTType
.3324	4a		lsr a				lsr 	a 							; shift float flag into carry.
.3325	4a		lsr a				lsr 	a
.3326	60		rts				rts
.3327					EvaluateString:
.3327	20 13 33	jsr $3313			jsr 	Evaluate
.332a	b5 90		lda $90,x			lda 	esType,x
.332c	0a		asl a				asl 	a 							; see if it's a string.
.332d	10 dd		bpl $330c			bpl 	ENTType
.332f	60		rts				rts
.3330					EvaluateRootInteger:
.3330	a2 00		ldx #$00			ldx 	#0
.3332					EvaluateInteger:
.3332	20 13 33	jsr $3313			jsr 	Evaluate
.3335	b5 90		lda $90,x			lda 	esType,x
.3337	d0 d3		bne $330c			bne 	ENTType
.3339	60		rts				rts
.333a					EvaluateSmallInteger:
.333a	20 32 33	jsr $3332			jsr 	EvaluateInteger
.333d	b5 a0		lda $a0,x			lda 	esInt1,x
.333f	15 a8		ora $a8,x			ora 	esInt2,x
.3341	15 b0		ora $b0,x			ora 	esInt3,x
.3343	d0 03		bne $3348			bne 	_ESIValue
.3345	b5 98		lda $98,x			lda 	esInt0,x
.3347	60		rts				rts
.3348					_ESIValue:
.3348	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.334a	20 18 15	jsr $1518		jsr	errorHandler
.334d					LinkEvaluate:
.334d	aa		tax				tax
.334e	20 13 33	jsr $3313			jsr 	Evaluate
.3351	8a		txa				txa
.3352	60		rts				rts
.3353					LinkEvaluateTerm:
.3353	aa		tax				tax
.3354	20 f2 32	jsr $32f2			jsr 	EvaluateTerm
.3357	8a		txa				txa
.3358	60		rts				rts
.3359					LinkEvaluateInteger:
.3359	aa		tax				tax
.335a	20 32 33	jsr $3332			jsr 	EvaluateInteger
.335d	8a		txa				txa
.335e	60		rts				rts
.335f					LinkEvaluateString:
.335f	aa		tax				tax
.3360	20 27 33	jsr $3327			jsr 	EvaluateString
.3363	8a		txa				txa
.3364	60		rts				rts
.3365					LinkEvaluateSmallInt:
.3365	aa		tax				tax
.3366	20 3a 33	jsr $333a			jsr 	EvaluateSmallInteger
.3369	8a		txa				txa
.336a	60		rts				rts
.336b					EvaluateReference:
.336b	ad e5 32	lda $32e5			lda 	ELBinaryOperatorInfo+TKW_PLING-TOK_BINARYST
.336e	38		sec				sec 								; sub 1 to allow a!x b?x to work.
.336f	e9 01		sbc #$01			sbc 	#1
.3371	20 a9 31	jsr $31a9			jsr 	EvaluateLevel
.3374	b5 90		lda $90,x			lda 	esType,x
.3376	10 01		bpl $3379			bpl 	_ERFail
.3378	60		rts				rts
.3379					_ERFail:
.3379	a2 0b		ldx #$0b			ldx 	#ErrorID_NoReference
.337b	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary/convert.asm

.337e					Event_Str:
.337e	20 1c 33	jsr $331c			jsr 	EvaluateNumeric 			; get a number.
.3381	b5 90		lda $90,x			lda 	esType,x 					; is it floating point
.3383	d0 13		bne $3398			bne 	_ESFloat
.3385	20 db 33	jsr $33db			jsr 	ConvertGetBase 				; get base, or default.
.3388	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.338a	85 2a		sta $2a				sta 	temp0
.338c	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.338e	85 2b		sta $2b				sta 	1+(temp0)
.3390	b5 99		lda $99,x			lda 	esInt0+1,x 					; get the base
.3392	20 20 39	jsr $3920			jsr 	MInt32ToString 				; convert to string.
.3395	4c a5 33	jmp $33a5			jmp 	_ESCloneExit 				; clone and exit.
.3398					_ESFloat:
.3398	20 3d 3a	jsr $3a3d			jsr 	CheckRightParen 			; check closing )
.339b	20 22 27	jsr $2722			jsr 	TOSToTemp0 					; string address in temp0, goes here.
.339e	8a		txa				txa
.339f	a2 16		ldx #$16		ldx	#22
.33a1	20 30 22	jsr $2230		jsr	floatingpointHandler
.33a4	aa		tax				tax
.33a5					_ESCloneExit:
.33a5	8a		txa				txa
.33a6	a2 04		ldx #$04		ldx	#4
.33a8	20 75 3d	jsr $3d75		jsr	stringHandler
.33ab	aa		tax				tax
.33ac	60		rts				rts
.33ad					UnaryVal:
.33ad	38		sec				sec 								; Carry set to return value
.33ae	b0 01		bcs $33b1			bcs 	ValueMain
.33b0					UnaryIsVal:
.33b0	18		clc				clc									; Carry clear to return legitimacy
.33b1					ValueMain:
.33b1	08		php				php 								; save results (CS is value, CC is validation)
.33b2	20 27 33	jsr $3327			jsr 	EvaluateString
.33b5	20 db 33	jsr $33db			jsr 	ConvertGetBase 				; get base, if any.
.33b8	98		tya				tya
.33b9	48		pha				pha
.33ba	20 22 27	jsr $2722			jsr 	TOSToTemp0 					; string address in temp0, goes here.
.33bd	b5 99		lda $99,x			lda 	esInt0+1,x 					; get the base
.33bf	29 7f		and #$7f			and 	#$7F 						; ignore the sign bit.
.33c1	20 38 38	jsr $3838			jsr 	MInt32FromString 			; convert it back from a string.
.33c4	b0 0c		bcs $33d2			bcs 	_VMSuccess 					; successfully converted.
.33c6	b5 99		lda $99,x			lda 	esInt0+1,x 					; is base the default
.33c8	c9 8a		cmp #$8a			cmp 	#$80+10 					; if no, then it is integer only.
.33ca	f0 00		beq $33cc			beq 	_VMFailed 	 				; so we failed.
.33cc					_VMFailed:
.33cc	68		pla				pla
.33cd	a8		tay				tay
.33ce	28		plp				plp
.33cf	4c ca 39	jmp $39ca			jmp 	MInt32False 				; return 0 whatever.
.33d2					_VMSuccess:
.33d2	68		pla				pla
.33d3	a8		tay				tay
.33d4	28		plp				plp 								; if CS the it was val() so we want the value.
.33d5	b0 03		bcs $33da			bcs 	_VMExit
.33d7	4c c6 39	jmp $39c6			jmp 	MInt32True 					; otherwise return true as successful.
.33da					_VMExit:
.33da	60		rts				rts
.33db					ConvertGetBase:
.33db	a9 8a		lda #$8a			lda 	#10+$80 					; default base 10 signed.
.33dd	95 99		sta $99,x			sta 	esInt0+1,x
.33df	b1 28		lda ($28),y			lda 	(codePtr),y 				; check for ,base)
.33e1	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.33e3	d0 0e		bne $33f3			bne 	_CGBDone 					; not found, should be )
.33e5	e8		inx				inx 								; next level
.33e6	c8		iny				iny 								; skip comma.
.33e7	20 3a 33	jsr $333a			jsr 	EvaluateSmallInteger		; evaluate the base.
.33ea	ca		dex				dex
.33eb	c9 02		cmp #$02			cmp 	#2 							; base range is 2..16
.33ed	90 08		bcc $33f7			bcc 	_CGBValue 					; (it should work as high as 37)
.33ef	c9 11		cmp #$11			cmp 	#17
.33f1	b0 04		bcs $33f7			bcs 	_CGBValue
.33f3					_CGBDone:
.33f3	20 3d 3a	jsr $3a3d			jsr 	CheckRightParen
.33f6	60		rts				rts
.33f7					_CGBValue:
.33f7	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.33f9	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary/event.asm

.33fc					EventFunction:
.33fc	20 6b 33	jsr $336b			jsr 	EvaluateReference			; get the variable reference that tracks the event
.33ff	b5 90		lda $90,x			lda 	esType,x
.3401	c9 80		cmp #$80			cmp 	#$80 						; must be integer reference
.3403	d0 5b		bne $3460			bne 	_EFType
.3405	20 4a 3a	jsr $3a4a			jsr 	CheckComma
.3408	e8		inx				inx
.3409	20 32 33	jsr $3332			jsr 	EvaluateInteger		 		; get the elapsed time between firing.
.340c	20 3d 3a	jsr $3a3d			jsr 	CheckRightParen 			; finish off with the right bracket
.340f	ca		dex				dex
.3410	b5 a0		lda $a0,x			lda 	esInt1,x 					; check max of 32767, we use 16 bit for timers and
.3412	29 80		and #$80			and 	#$80 						; it doesn't work > 32767
.3414	15 a8		ora $a8,x			ora 	esInt2,x
.3416	15 b0		ora $b0,x			ora 	esInt3,x
.3418	d0 41		bne $345b			bne 	_EFValue
.341a	98		tya				tya
.341b	48		pha				pha
.341c	8a		txa				txa
.341d	48		pha				pha
.341e	a2 1c		ldx #$1c		ldx	#28
.3420	20 f6 14	jsr $14f6		jsr	deviceHandler
.3423	84 2d		sty $2d				sty 	temp1+1
.3425	85 2c		sta $2c				sta 	temp1
.3427	68		pla				pla
.3428	aa		tax				tax
.3429	20 22 27	jsr $2722			jsr 	TOSToTemp0 					; set temp0 to the address of the event variable
.342c	a0 03		ldy #$03			ldy 	#3							; if -ve
.342e	b1 2a		lda ($2a),y			lda 	(temp0),y
.3430	30 23		bmi $3455			bmi 	_EFFail 	 				; straight out with fail, means "on pause".
.3432	a0 00		ldy #$00			ldy 	#0 							; is the fire time zero ?
.3434	b1 2a		lda ($2a),y			lda 	(temp0),y
.3436	c8		iny				iny
.3437	11 2a		ora ($2a),y			ora 	(temp0),y
.3439	f0 17		beq $3452			beq 	_EFInitialise 				; if so, initialise the value but return false.
.343b	a0 00		ldy #$00			ldy 	#0 							; calculate trigger - timer
.343d	38		sec				sec
.343e	b1 2a		lda ($2a),y			lda 	(temp0),y
.3440	e5 2c		sbc $2c				sbc 	temp1
.3442	c8		iny				iny
.3443	b1 2a		lda ($2a),y			lda 	(temp0),y
.3445	e5 2d		sbc $2d				sbc 	temp1+1
.3447	10 0c		bpl $3455			bpl 	_EFFail 					; if trigger >= timer then return False
.3449	20 65 34	jsr $3465			jsr 	SetEventTimer 				; reset the timer for next time.
.344c	20 c6 39	jsr $39c6			jsr	 	MInt32True 					; and treutn true as fired.
.344f	68		pla				pla
.3450	a8		tay				tay
.3451	60		rts				rts
.3452					_EFInitialise:
.3452	20 65 34	jsr $3465			jsr		SetEventTimer 				; set trigger time to time + elapsed
.3455					_EFFail:
.3455	68		pla				pla
.3456	a8		tay				tay
.3457	20 ca 39	jsr $39ca			jsr 	MInt32False
.345a	60		rts				rts
.345b					_EFValue:
.345b	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.345d	20 18 15	jsr $1518		jsr	errorHandler
.3460					_EFType:
.3460	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.3462	20 18 15	jsr $1518		jsr	errorHandler
.3465					SetEventTimer:
.3465	a0 00		ldy #$00			ldy 	#0
.3467	18		clc				clc
.3468	a5 2c		lda $2c				lda 	temp1
.346a	75 99		adc $99,x			adc 	esInt0+1,x
.346c	91 2a		sta ($2a),y			sta		(temp0),y
.346e	c8		iny				iny
.346f	a5 2d		lda $2d				lda 	temp1+1
.3471	75 a1		adc $a1,x			adc 	esInt1+1,x
.3473	91 2a		sta ($2a),y			sta		(temp0),y
.3475	88		dey				dey
.3476	11 2a		ora ($2a),y			ora 	(temp0),y 					; if the result is non zero, exit
.3478	d0 04		bne $347e			bne 	_SETExit 					; zero means initialise.....
.347a	a9 01		lda #$01			lda 	#1 							; timer zero won't work, so make it 1, which is
.347c	91 2a		sta ($2a),y			sta 	(temp0),y 					; near enough.
.347e					_SETExit:
.347e	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary/unary.asm

.347f					UnaryLen:
.347f	20 8d 34	jsr $348d			jsr 	ULStart
.3482					ULFinish:
.3482	b1 2a		lda ($2a),y			lda 	(temp0),y 					; get length prefix
.3484	a4 32		ldy $32				ldy 	tempShort 					; get Y back
.3486	20 d9 39	jsr $39d9			jsr 	MInt32Set8Bit 				; write it out.
.3489	20 3d 3a	jsr $3a3d			jsr 	CheckRightParen
.348c	60		rts				rts
.348d	20 27 33	jsr $3327	ULStart:jsr 	EvaluateString
.3490	b5 98		lda $98,x			lda 	esInt0,x 					; copy address of string to temp0
.3492	85 2a		sta $2a				sta 	temp0
.3494	b5 a0		lda $a0,x			lda 	esInt1,x
.3496	85 2b		sta $2b				sta 	temp0+1
.3498	84 32		sty $32				sty 	tempShort 					; get length
.349a	a0 00		ldy #$00			ldy 	#0
.349c	60		rts				rts
.349d					UnaryAsc:
.349d	20 8d 34	jsr $348d			jsr 	ULStart 					; same as LEN() get string, save Y, point to length.
.34a0	b1 2a		lda ($2a),y			lda 	(temp0),y 					; read length
.34a2	c8		iny				iny 		 						; point to first character, we can do LEN code after that
.34a3	c9 00		cmp #$00			cmp 	#0
.34a5	d0 db		bne $3482			bne 	ULFinish 					; if length = 0 then error : asc("") -> error.
.34a7	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.34a9	20 18 15	jsr $1518		jsr	errorHandler
.34ac					UnaryAbs:
.34ac	20 1c 33	jsr $331c			jsr 	EvaluateNumeric 			; some numeric value
.34af	b0 07		bcs $34b8			bcs 	_UAFloat 					; CS then float, so use that function
.34b1	20 7f 39	jsr $397f			jsr 	MInt32Absolute 				; int version
.34b4	20 3d 3a	jsr $3a3d			jsr 	CheckRightParen
.34b7	60		rts				rts
.34b8					_UAFloat:
.34b8	8a		txa				txa 								; float version
.34b9	a2 02		ldx #$02		ldx	#2
.34bb	20 30 22	jsr $2230		jsr	floatingpointHandler
.34be	aa		tax				tax
.34bf	20 3d 3a	jsr $3a3d			jsr 	CheckRightParen
.34c2	60		rts				rts
.34c3					UnarySgn:
.34c3	20 1c 33	jsr $331c			jsr 	EvaluateNumeric 			; same as above but sign of value
.34c6	b0 07		bcs $34cf			bcs 	_USFloat
.34c8	20 b7 39	jsr $39b7			jsr 	MInt32Sign
.34cb	20 3d 3a	jsr $3a3d			jsr 	CheckRightParen
.34ce	60		rts				rts
.34cf					_USFloat:
.34cf	8a		txa				txa
.34d0	a2 10		ldx #$10		ldx	#16
.34d2	20 30 22	jsr $2230		jsr	floatingpointHandler
.34d5	aa		tax				tax
.34d6	20 3d 3a	jsr $3a3d			jsr 	CheckRightParen
.34d9	60		rts				rts
.34da					UnaryPeek:
.34da	20 06 35	jsr $3506			jsr 	PDLCode 					; each has common setup code put reads 1,2 or 4 bytes
.34dd	4c fa 34	jmp $34fa			jmp 	PDLByte0
.34e0					UnaryDeek:
.34e0	20 06 35	jsr $3506			jsr 	PDLCode
.34e3	4c f4 34	jmp $34f4			jmp 	PDLByte1
.34e6					UnaryLeek:
.34e6	20 06 35	jsr $3506			jsr 	PDLCode
.34e9	a0 03		ldy #$03			ldy 	#3							; read 3-2
.34eb	b1 2a		lda ($2a),y			lda 	(temp0),y
.34ed	95 b0		sta $b0,x			sta 	esInt3,x
.34ef	88		dey				dey
.34f0	b1 2a		lda ($2a),y			lda 	(temp0),y
.34f2	95 a8		sta $a8,x			sta 	esInt2,x
.34f4					PDLByte1:
.34f4	a0 01		ldy #$01			ldy 	#1
.34f6	b1 2a		lda ($2a),y			lda 	(temp0),y
.34f8	95 a0		sta $a0,x			sta 	esInt1,x
.34fa					PDLByte0:
.34fa	a0 00		ldy #$00			ldy 	#0
.34fc	b1 2a		lda ($2a),y			lda 	(temp0),y
.34fe	95 98		sta $98,x			sta 	esInt0,x
.3500	a4 32		ldy $32				ldy 	tempShort 					; restore Y
.3502	20 3d 3a	jsr $3a3d			jsr 	CheckRightParen 			; check right and return
.3505	60		rts				rts
.3506					PDLCode:
.3506	20 32 33	jsr $3332			jsr 	EvaluateInteger 			; some address
.3509	b5 98		lda $98,x			lda 	esInt0,x 					; copy address of string to temp0
.350b	85 2a		sta $2a				sta 	temp0
.350d	b5 a0		lda $a0,x			lda 	esInt1,x
.350f	85 2b		sta $2b				sta 	temp0+1
.3511	a9 00		lda #$00			lda 	#0 							; zero upper 3 bytes of result, type okay.
.3513	95 a0		sta $a0,x			sta 	esInt1,x 					; PEEK needs upper 3 cleared
.3515	95 a8		sta $a8,x			sta 	esInt2,x
.3517	95 b0		sta $b0,x			sta 	esInt3,x
.3519	84 32		sty $32				sty 	tempShort 					; save Y
.351b	60		rts				rts
.351c					Unary_Random:
.351c	20 fa 39	jsr $39fa			jsr 	MInt32Random 				; generate random number.
.351f	b1 28		lda ($28),y			lda 	(codePtr),y 				; check followed by )
.3521	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.3523	f0 08		beq $352d			beq 	_URExit
.3525	e8		inx				inx 								; load range 0..r-1 into +1
.3526	20 32 33	jsr $3332			jsr 	EvaluateInteger
.3529	ca		dex				dex
.352a	20 1d 38	jsr $381d			jsr 	MInt32Modulus 				; calculate random % modulus
.352d					_URExit:
.352d	20 3d 3a	jsr $3a3d			jsr 	CheckRightParen 			; check right and return
.3530	60		rts				rts
.3531					Unary_Min:
.3531	a9 01		lda #$01			lda 	#1 							; c1 cmp c2 needs to be > e.g. c1 > c2
.3533	d0 02		bne $3537			bne 	UnaryMBody
.3535					Unary_Max:
.3535	a9 ff		lda #$ff			lda 	#$FF 						; c1 cmp c2 needs to be < e.g. c1 < c2
.3537					UnaryMBody:
.3537	48		pha				pha 								; save comparator on stack, shows min or max
.3538	20 13 33	jsr $3313			jsr 	Evaluate 					; get the first thing to check
.353b					_UnaryMLoop:
.353b	b1 28		lda ($28),y			lda 	(codePtr),y 				; found ), indicates end.
.353d	c8		iny				iny
.353e	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.3540	f0 09		beq $354b			beq 	_UnaryMExit
.3542	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; found , indicates more.
.3544	f0 07		beq $354d			beq 	_UnaryMCompare
.3546	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.3548	20 18 15	jsr $1518		jsr	errorHandler
.354b					_UnaryMExit:
.354b	68		pla				pla 								; done so throw comparator and return.
.354c	60		rts				rts
.354d					_UnaryMCompare:
.354d	e8		inx				inx 								; get the 2nd thing to evaluate
.354e	20 13 33	jsr $3313			jsr 	Evaluate
.3551	ca		dex				dex
.3552	20 d9 30	jsr $30d9			jsr 	PerformComparison 			; this is part of evaluate/compare.asm
.3555	85 32		sta $32				sta 	tempShort 					; save result
.3557	68		pla				pla 								; get what we need
.3558	48		pha				pha
.3559	c5 32		cmp $32				cmp 	tempShort 					; did we get it
.355b	d0 de		bne $353b			bne 	_UnaryMLoop 				; no, try another value.
.355d	20 ca 39	jsr $39ca			jsr 	MInt32False 				; promote 2nd to 1st.
.3560	20 ae 38	jsr $38ae			jsr 	MInt32Add
.3563	4c 3b 35	jmp $353b			jmp 	_UnaryMLoop
.3566					Unary_Page:
.3566	20 ca 39	jsr $39ca			jsr 	MInt32False 				; zero
.3569	ad c8 0a	lda $0ac8			lda 	basePage 					; copy base page address in.
.356c	95 98		sta $98,x			sta 	esInt0,x
.356e	ad c9 0a	lda $0ac9			lda 	basePage+1
.3571	95 a0		sta $a0,x			sta 	esInt1,x
.3573	60		rts				rts
.3574					UnaryReference:
.3574	a9 0f		lda #$0f			lda 	#15
.3576	20 a9 31	jsr $31a9			jsr 	EvaluateLevel 				; evaluate term and don't deference.
.3579	b5 90		lda $90,x			lda 	esType,x 					; check it's a reference.
.357b	10 05		bpl $3582			bpl 	UType
.357d	a9 00		lda #$00			lda 	#0 							; make it an integer
.357f	95 90		sta $90,x			sta 	esType,x
.3581	60		rts				rts
.3582					UType:
.3582	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.3584	20 18 15	jsr $1518		jsr	errorHandler
.3587					UnaryHexMarker:
.3587	4c 04 33	jmp $3304			jmp 	EvaluateIntegerTerm
.358a					UnaryComplement:
.358a	20 04 33	jsr $3304			jsr 	EvaluateIntegerTerm
.358d	20 9e 39	jsr $399e			jsr 	MInt32Not
.3590	60		rts				rts
.3591					UnaryIntToFloat:
.3591	20 1c 33	jsr $331c			jsr 	EvaluateNumeric				; some number
.3594	b5 90		lda $90,x			lda 	esType,x 					; if float already, exit
.3596	d0 0b		bne $35a3			bne 	_UIFExit
.3598	8a		txa				txa 								; convert and set type
.3599	a2 1c		ldx #$1c		ldx	#28
.359b	20 30 22	jsr $2230		jsr	floatingpointHandler
.359e	aa		tax				tax
.359f	a9 01		lda #$01			lda 	#1
.35a1	95 90		sta $90,x			sta 	esType,x
.35a3					_UIFExit:
.35a3	60		rts				rts
.35a4					UnaryFloatToInt:
.35a4	20 1c 33	jsr $331c			jsr 	EvaluateNumeric 			; the number
.35a7	b5 90		lda $90,x			lda 	esType,x 					; if int already exit
.35a9	f0 0b		beq $35b6			beq 	_UFIExit
.35ab	8a		txa				txa 								; convert to int
.35ac	a2 14		ldx #$14		ldx	#20
.35ae	20 30 22	jsr $2230		jsr	floatingpointHandler
.35b1	aa		tax				tax
.35b2	a9 00		lda #$00			lda 	#0 							; set type
.35b4	95 90		sta $90,x			sta 	esType,x
.35b6					_UFIExit:
.35b6	60		rts				rts
.35b7					UnaryAlloc:
.35b7	e8		inx				inx 								; evaluate memory required
.35b8	20 32 33	jsr $3332			jsr 	EvaluateInteger
.35bb	20 3d 3a	jsr $3a3d			jsr 	CheckRightParen
.35be	ca		dex				dex
.35bf	b5 a9		lda $a9,x			lda 	esInt2+1,x 					; check at least in 64k range.
.35c1	15 b1		ora $b1,x			ora 	esInt3+1,x
.35c3	d0 1d		bne $35e2			bne 	_UABadValue
.35c5	20 ca 39	jsr $39ca			jsr 	MInt32False					; zero return.
.35c8	a5 36		lda $36				lda 	lowMemory+1 				; copy low memory in
.35ca	95 a0		sta $a0,x			sta 	esInt1,x
.35cc	a5 35		lda $35				lda 	lowMemory
.35ce	95 98		sta $98,x			sta 	esInt0,x
.35d0	18		clc				clc 								; add alloc required.
.35d1	75 99		adc $99,x			adc 	esInt0+1,x
.35d3	85 35		sta $35				sta 	lowMemory
.35d5	a5 36		lda $36				lda 	lowMemory+1
.35d7	75 a1		adc $a1,x			adc 	esInt1+1,x
.35d9	85 36		sta $36				sta 	lowMemory+1
.35db	b0 05		bcs $35e2			bcs		_UABadValue 				; overflow definitely bad.
.35dd	c5 34		cmp $34				cmp 	highMemory+1
.35df	b0 01		bcs $35e2			bcs 	_UABadValue 				; out of memory bad.
.35e1	60		rts				rts
.35e2					_UABadValue:
.35e2	a2 22		ldx #$22			ldx 	#ErrorID_Memory
.35e4	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary/unary2.asm

.35e7					UnaryTimer:
.35e7	20 3d 3a	jsr $3a3d			jsr 	CheckRightParen 			; no parameters
.35ea	98		tya				tya
.35eb	48		pha				pha
.35ec	20 f1 39	jsr $39f1			jsr 	MInt32Zero 					; zero result
.35ef	86 2a		stx $2a				stx 	temp0 						; returning in YA so can't use .pshx
.35f1	a2 1c		ldx #$1c		ldx	#28
.35f3	20 f6 14	jsr $14f6		jsr	deviceHandler
.35f6	a6 2a		ldx $2a				ldx 	temp0						; restore X and update 16 bit result
.35f8	95 98		sta $98,x			sta 	esInt0,x
.35fa	98		tya				tya
.35fb	95 a0		sta $a0,x			sta 	esInt1,x
.35fd	68		pla				pla
.35fe	a8		tay				tay
.35ff	60		rts				rts
.3600					UnaryInkey:
.3600	20 3d 3a	jsr $3a3d			jsr 	CheckRightParen
.3603	86 2a		stx $2a				stx 	temp0
.3605	a2 0a		ldx #$0a		ldx	#10
.3607	20 f6 14	jsr $14f6		jsr	deviceHandler
.360a	a6 2a		ldx $2a				ldx 	temp0
.360c	20 d9 39	jsr $39d9			jsr 	MInt32Set8Bit
.360f	60		rts				rts
.3610					UnaryGet:
.3610	20 3d 3a	jsr $3a3d			jsr 	CheckRightParen
.3613	86 2a		stx $2a				stx 	temp0
.3615					_UGLoop:
.3615	a2 02		ldx #$02		ldx	#2
.3617	20 f6 14	jsr $14f6		jsr	deviceHandler
.361a	a2 0a		ldx #$0a		ldx	#10
.361c	20 f6 14	jsr $14f6		jsr	deviceHandler
.361f	c9 00		cmp #$00			cmp 	#0
.3621	f0 f2		beq $3615			beq 	_UGLoop
.3623	a6 2a		ldx $2a				ldx 	temp0
.3625	20 d9 39	jsr $39d9			jsr 	MInt32Set8Bit
.3628	60		rts				rts
.3629					UnaryGetString:
.3629	20 10 36	jsr $3610			jsr 	UnaryGet
.362c					UGSDoChr:
.362c	4c 7d 36	jmp $367d			jmp 	ChrCode
.362f					UnaryInkeyString:
.362f	20 00 36	jsr $3600			jsr 	UnaryInkey
.3632	b5 98		lda $98,x			lda 	esInt0,x
.3634	d0 f6		bne $362c			bne 	UGSDoChr
.3636	8a		txa				txa
.3637	a2 08		ldx #$08		ldx	#8
.3639	20 75 3d	jsr $3d75		jsr	stringHandler
.363c	aa		tax				tax
.363d	60		rts				rts
.363e					UnarySys:
.363e	20 32 33	jsr $3332			jsr 	EvaluateInteger 				; get the address
.3641	20 3d 3a	jsr $3a3d			jsr 	CheckRightParen
.3644	20 22 27	jsr $2722			jsr 	TOSToTemp0 						; copy call address to temp0
.3647	8a		txa				txa
.3648	48		pha				pha
.3649	98		tya				tya
.364a	48		pha				pha
.364b	ad 00 0a	lda $0a00			lda 	("A"-"A")*4+SingleLetterVar 	; load AXY
.364e	ae 5c 0a	ldx $0a5c			ldx 	("X"-"A")*4+SingleLetterVar
.3651	ac 60 0a	ldy $0a60			ldy 	("Y"-"A")*4+SingleLetterVar
.3654	20 63 36	jsr $3663			jsr 	_CallTemp0
.3657	85 32		sta $32				sta 	tempShort 						; restore YX
.3659	68		pla				pla
.365a	a8		tay				tay
.365b	68		pla				pla
.365c	aa		tax				tax
.365d	a5 32		lda $32				lda 	tempShort
.365f	20 d9 39	jsr $39d9			jsr 	MInt32Set8Bit 					; return result.
.3662	60		rts				rts
.3663					_CallTemp0:
.3663	6c 2a 00	jmp ($002a)			jmp 	(temp0)
.3666					UnaryMem:
.3666	20 ca 39	jsr $39ca			jsr 	MInt32False 					; set to false (e.g. 0)
.3669	38		sec				sec
.366a	a5 33		lda $33				lda 	highMemory 						; calculate value
.366c	e5 35		sbc $35				sbc 	lowMemory
.366e	95 98		sta $98,x			sta 	esInt0,x
.3670	a5 34		lda $34				lda 	highMemory+1
.3672	e5 36		sbc $36				sbc 	lowMemory+1
.3674	95 a0		sta $a0,x			sta 	esInt1,x
.3676	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary/unarystr.asm

.3677					ExecChr:
.3677	20 3a 33	jsr $333a			jsr 	EvaluateSmallInteger		; character number 0-255
.367a	20 3d 3a	jsr $3a3d			jsr 	CheckRightParen				; right bracket
.367d					ChrCode:
.367d	98		tya				tya
.367e	48		pha				pha
.367f	8a		txa				txa 								; A = stack
.3680	b4 98		ldy $98,x			ldy 	esInt0,x					; Y = character
.3682	a2 02		ldx #$02		ldx	#2
.3684	20 75 3d	jsr $3d75		jsr	stringHandler
.3687	aa		tax				tax 								; X = stack
.3688	68		pla				pla
.3689	a8		tay				tay
.368a	60		rts				rts
.368b					ExecLower:
.368b	38		sec				sec 								; set carry is lower
.368c	b0 01		bcs $368f			bcs 	ExecUpperLower
.368e					ExecUpper:
.368e	18		clc				clc 								; clear carry is upper
.368f					ExecUpperLower:
.368f	08		php				php 								; save carry
.3690	20 27 33	jsr $3327			jsr 	EvaluateString 				; string to stack,X
.3693	20 3d 3a	jsr $3a3d			jsr 	CheckRightParen 			; check closing right bracket.
.3696	28		plp				plp 								; restore carry, save Y
.3697	98		tya				tya
.3698	48		pha				pha
.3699	a9 00		lda #$00			lda 	#0 							; A zero if upper, 1 if lower.
.369b	2a		rol a				rol 	a
.369c	a8		tay				tay 								; now in Y
.369d	8a		txa				txa 								; do the substring and exit.
.369e	a2 0c		ldx #$0c		ldx	#12
.36a0	20 75 3d	jsr $3d75		jsr	stringHandler
.36a3	aa		tax				tax
.36a4	68		pla				pla
.36a5	a8		tay				tay
.36a6	60		rts				rts
.36a7					ExecLeft:
.36a7	20 27 33	jsr $3327			jsr 	EvaluateString 				; string to stack,X
.36aa	20 4a 3a	jsr $3a4a			jsr 	CheckComma
.36ad	e8		inx				inx
.36ae	a9 01		lda #$01			lda 	#1 							; 1 for 2nd parameter.
.36b0	20 d9 39	jsr $39d9			jsr 	MInt32Set8Bit
.36b3	e8		inx				inx
.36b4	20 3a 33	jsr $333a			jsr 	EvaluateSmallInteger 		; smallint 3rd parameter
.36b7					ExecSubstring:
.36b7	ca		dex				dex 								; fix up X
.36b8	ca		dex				dex
.36b9	20 3d 3a	jsr $3a3d			jsr 	CheckRightParen 			; check closing right bracket.
.36bc	8a		txa				txa 								; do the substring and exit.
.36bd	a2 0e		ldx #$0e		ldx	#14
.36bf	20 75 3d	jsr $3d75		jsr	stringHandler
.36c2	aa		tax				tax
.36c3	60		rts				rts
.36c4					ExecMid:
.36c4	20 27 33	jsr $3327			jsr 	EvaluateString 				; string to stack,X
.36c7	20 4a 3a	jsr $3a4a			jsr 	CheckComma
.36ca	e8		inx				inx
.36cb	20 3a 33	jsr $333a			jsr 	EvaluateSmallInteger 		; smallint 2nd parameter
.36ce	c9 00		cmp #$00			cmp 	#0
.36d0	f0 15		beq $36e7			beq 	_EMValue
.36d2	e8		inx				inx
.36d3	a9 ff		lda #$ff			lda 	#255 						; 255 default for 3nd parameter - this is optional.
.36d5	20 d9 39	jsr $39d9			jsr 	MInt32Set8Bit
.36d8	b1 28		lda ($28),y			lda 	(codePtr),y 				; is there a ) next
.36da	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN 				; if so, just MID$(a$,2)
.36dc	f0 d9		beq $36b7			beq 	ExecSubString
.36de	20 4a 3a	jsr $3a4a			jsr 	CheckComma
.36e1	20 3a 33	jsr $333a			jsr 	EvaluateSmallInteger 		; smallint 2nd parameter
.36e4	4c b7 36	jmp $36b7			jmp 	ExecSubString
.36e7					_EMValue:
.36e7	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.36e9	20 18 15	jsr $1518		jsr	errorHandler
.36ec					ExecRight:
.36ec	20 27 33	jsr $3327			jsr 	EvaluateString 				; string to stack,X
.36ef	20 4a 3a	jsr $3a4a			jsr 	CheckComma
.36f2	e8		inx				inx
.36f3	20 3a 33	jsr $333a			jsr 	EvaluateSmallInteger 		; smallint 2nd parameter.
.36f6	ca		dex				dex
.36f7	98		tya				tya
.36f8	48		pha				pha
.36f9	b5 98		lda $98,x			lda 	esInt0,x 					; copy address of string to temp0
.36fb	85 2a		sta $2a				sta 	temp0
.36fd	b5 a0		lda $a0,x			lda 	esInt1,x
.36ff	85 2b		sta $2b				sta 	temp0+1
.3701	a0 00		ldy #$00			ldy 	#0 							; point to length
.3703	b1 2a		lda ($2a),y			lda 	(temp0),y 					; get the length.
.3705	18		clc				clc 								; add 1.
.3706	69 01		adc #$01			adc 	#1
.3708	38		sec				sec
.3709	f5 99		sbc $99,x			sbc 	esInt0+1,x  				; subtract right count.
.370b	f0 02		beq $370f			beq		_ERMake1 					; if zero, make it 1.
.370d	b0 02		bcs $3711			bcs		_EROkay
.370f					_ERMake1:
.370f	a9 01		lda #$01			lda 	#1 							; start position.
.3711					_EROkay:
.3711	e8		inx				inx 								; set start pos.
.3712	95 98		sta $98,x			sta 	esInt0,x
.3714	e8		inx				inx
.3715	a9 ff		lda #$ff			lda 	#255 						; 255 default for 3nd parameter.
.3717	20 d9 39	jsr $39d9			jsr 	MInt32Set8Bit
.371a	68		pla				pla
.371b	a8		tay				tay
.371c	4c b7 36	jmp $36b7			jmp 	ExecSubString 				; do the substring code.

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32binary.asm

.371f					MInt32And:
.371f	b5 98		lda $98,x			lda 	esInt0,x
.3721	35 99		and $99,x			and 	esInt0+1,x
.3723	95 98		sta $98,x			sta 	esInt0,x
.3725	b5 a0		lda $a0,x			lda 	esInt1,x
.3727	35 a1		and $a1,x			and 	esInt1+1,x
.3729	95 a0		sta $a0,x			sta 	esInt1,x
.372b	b5 a8		lda $a8,x			lda 	esInt2,x
.372d	35 a9		and $a9,x			and 	esInt2+1,x
.372f	95 a8		sta $a8,x			sta 	esInt2,x
.3731	b5 b0		lda $b0,x			lda 	esInt3,x
.3733	35 b1		and $b1,x			and 	esInt3+1,x
.3735	95 b0		sta $b0,x			sta 	esInt3,x
.3737	60		rts				rts
.3738					MInt32Or:
.3738	b5 98		lda $98,x			lda 	esInt0,x
.373a	15 99		ora $99,x			ora 	esInt0+1,x
.373c	95 98		sta $98,x			sta 	esInt0,x
.373e	b5 a0		lda $a0,x			lda 	esInt1,x
.3740	15 a1		ora $a1,x			ora 	esInt1+1,x
.3742	95 a0		sta $a0,x			sta 	esInt1,x
.3744	b5 a8		lda $a8,x			lda 	esInt2,x
.3746	15 a9		ora $a9,x			ora 	esInt2+1,x
.3748	95 a8		sta $a8,x			sta 	esInt2,x
.374a	b5 b0		lda $b0,x			lda 	esInt3,x
.374c	15 b1		ora $b1,x			ora 	esInt3+1,x
.374e	95 b0		sta $b0,x			sta 	esInt3,x
.3750	60		rts				rts
.3751					MInt32Xor:
.3751	b5 98		lda $98,x			lda 	esInt0,x
.3753	55 99		eor $99,x			eor 	esInt0+1,x
.3755	95 98		sta $98,x			sta 	esInt0,x
.3757	b5 a0		lda $a0,x			lda 	esInt1,x
.3759	55 a1		eor $a1,x			eor 	esInt1+1,x
.375b	95 a0		sta $a0,x			sta 	esInt1,x
.375d	b5 a8		lda $a8,x			lda 	esInt2,x
.375f	55 a9		eor $a9,x			eor 	esInt2+1,x
.3761	95 a8		sta $a8,x			sta 	esInt2,x
.3763	b5 b0		lda $b0,x			lda 	esInt3,x
.3765	55 b1		eor $b1,x			eor 	esInt3+1,x
.3767	95 b0		sta $b0,x			sta 	esInt3,x
.3769	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32compare.asm

.376a					MInt32Compare:
.376a	b5 98		lda $98,x			lda 	esInt0,x 					; equality check first.
.376c	d5 99		cmp $99,x			cmp 	esInt0+1,x
.376e	d0 13		bne $3783			bne 	MInt32Compare2
.3770	b5 a0		lda $a0,x			lda 	esInt1,x
.3772	d5 a1		cmp $a1,x			cmp 	esInt1+1,x
.3774	d0 0d		bne $3783			bne 	MInt32Compare2
.3776	b5 a8		lda $a8,x			lda 	esInt2,x
.3778	d5 a9		cmp $a9,x			cmp 	esInt2+1,x
.377a	d0 07		bne $3783			bne 	MInt32Compare2
.377c	b5 b0		lda $b0,x			lda 	esInt3,x
.377e	55 b1		eor $b1,x			eor 	esInt3+1,x 					; EOR will return 0 if the same.
.3780	d0 01		bne $3783			bne 	MInt32Compare2
.3782	60		rts				rts
.3783					MInt32Compare2:
.3783	b5 98		lda $98,x			lda		esInt0,x 					; unsigned 32 bit comparison.
.3785	d5 99		cmp $99,x			cmp 	esInt0+1,x
.3787	b5 a0		lda $a0,x			lda		esInt1,x
.3789	f5 a1		sbc $a1,x			sbc 	esInt1+1,x
.378b	b5 a8		lda $a8,x			lda		esInt2,x
.378d	f5 a9		sbc $a9,x			sbc 	esInt2+1,x
.378f	b5 b0		lda $b0,x			lda		esInt3,x
.3791	f5 b1		sbc $b1,x			sbc 	esInt3+1,x
.3793	50 02		bvc $3797			bvc 	_I32LNoOverflow 			; make it signed 32 bit comparison
.3795	49 80		eor #$80			eor 	#$80
.3797					_I32LNoOverflow
.3797	30 03		bmi $379c			bmi 	MInt32CLess					; if -ve then return $FF
.3799	a9 01		lda #$01			lda 	#$01						; else return $01
.379b	60		rts				rts
.379c					MInt32CLess:
.379c	a9 ff		lda #$ff			lda 	#$FF
.379e	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32divide.asm

.379f					MInt32SDivide:
.379f	98		tya				tya  								; save Y, which is the count of negations
.37a0	48		pha				pha
.37a1	a0 00		ldy #$00			ldy 	#0 							; zero count
.37a3	20 bb 37	jsr $37bb			jsr 	_MInt32SRemSign 			; unsign TOS
.37a6	e8		inx				inx 								; unsign TOS+1
.37a7	20 bb 37	jsr $37bb			jsr 	_MInt32SRemSign
.37aa	ca		dex				dex
.37ab	98		tya				tya 								; save sign count on stack
.37ac	48		pha				pha
.37ad	20 c4 37	jsr $37c4			jsr 	MInt32UDivide 				; unsigned division
.37b0	68		pla				pla 								; get sign count back
.37b1	29 01		and #$01			and 	#1 							; if it is odd, then negate result
.37b3	f0 03		beq $37b8			beq 	_I32SNoNeg
.37b5	20 84 39	jsr $3984			jsr 	MInt32Negate
.37b8					_I32SNoNeg:
.37b8	68		pla				pla 								; restoe Y and exit
.37b9	a8		tay				tay
.37ba	60		rts				rts
.37bb					_MInt32SRemSign:
.37bb	b5 b0		lda $b0,x			lda 	esInt3,x 					; is it -ve
.37bd	10 04		bpl $37c3			bpl 	_MInt32SRSExit
.37bf	c8		iny				iny 								; increment the sign count
.37c0	20 84 39	jsr $3984			jsr 	MInt32Negate 				; negate the value.
.37c3					_MInt32SRSExit:
.37c3	60		rts				rts
.37c4					MInt32UDivide:
.37c4	b5 99		lda $99,x			lda 	esInt0+1,x 					; check for division by zero
.37c6	15 a1		ora $a1,x			ora 	esInt1+1,x
.37c8	15 a2		ora $a2,x			ora 	esInt1+2,x
.37ca	15 a3		ora $a3,x			ora 	esInt1+3,x
.37cc	f0 4a		beq $3818			beq 	_MInt32DZero
.37ce	e8		inx				inx 								; clear A
.37cf	e8		inx				inx
.37d0	20 ca 39	jsr $39ca			jsr 	MInt32False
.37d3	ca		dex				dex
.37d4	ca		dex				dex
.37d5	98		tya				tya 								; save Y on the stack
.37d6	48		pha				pha
.37d7	a0 20		ldy #$20			ldy 	#32 						; number of division passes
.37d9					_MInt32UDLoop:
.37d9	16 98		asl $98,x			asl 	esInt0,x					; shift QA left. First Q
.37db	36 a0		rol $a0,x			rol 	esInt1,x
.37dd	36 a8		rol $a8,x			rol 	esInt2,x
.37df	36 b0		rol $b0,x			rol 	esInt3,x
.37e1	36 9a		rol $9a,x			rol 	esInt0+2,x 					; then A.
.37e3	36 a2		rol $a2,x			rol 	esInt1+2,x
.37e5	36 aa		rol $aa,x			rol 	esInt2+2,x
.37e7	36 b2		rol $b2,x			rol 	esInt3+2,x
.37e9	38		sec				sec 								; calculate A-M saving result on the stack
.37ea	b5 9a		lda $9a,x			lda 	esInt0+2,x
.37ec	f5 99		sbc $99,x			sbc 	esInt0+1,x
.37ee	48		pha				pha
.37ef	b5 a2		lda $a2,x			lda 	esInt1+2,x
.37f1	f5 a1		sbc $a1,x			sbc 	esInt1+1,x
.37f3	48		pha				pha
.37f4	b5 aa		lda $aa,x			lda 	esInt2+2,x
.37f6	f5 a9		sbc $a9,x			sbc 	esInt2+1,x
.37f8	48		pha				pha
.37f9	b5 b2		lda $b2,x			lda 	esInt3+2,x
.37fb	f5 b1		sbc $b1,x			sbc 	esInt3+1,x
.37fd	90 10		bcc $380f			bcc		_MInt32NoSubtract 			; if A < M (e.g. carry clear) then reject this.
.37ff	95 b2		sta $b2,x			sta 	esInt3+2,x 					; write result back to A
.3801	68		pla				pla
.3802	95 aa		sta $aa,x			sta 	esInt2+2,x
.3804	68		pla				pla
.3805	95 a2		sta $a2,x			sta 	esInt1+2,x
.3807	68		pla				pla
.3808	95 9a		sta $9a,x			sta 	esInt0+2,x
.380a	f6 98		inc $98,x			inc 	esInt0,x 					; sets bit 0 of Q - it was shifted left previously.
.380c	4c 12 38	jmp $3812			jmp 	_MInt32Next 					; do the next iteration
.380f					_MInt32NoSubtract:
.380f	68		pla				pla
.3810	68		pla				pla
.3811	68		pla				pla
.3812					_MInt32Next:
.3812	88		dey				dey 								; do this 32 times.
.3813	d0 c4		bne $37d9			bne 	_MInt32UDLoop
.3815	68		pla				pla 								; restore Y and exit
.3816	a8		tay				tay
.3817	60		rts				rts
.3818					_MInt32DZero:
.3818	a2 05		ldx #$05			ldx 	#ErrorID_DivZero
.381a	20 18 15	jsr $1518		jsr	errorHandler
.381d					MInt32Modulus:
.381d	20 c4 37	jsr $37c4			jsr 	MInt32UDivide 				; do the division.
.3820	b5 b2		lda $b2,x			lda 	esInt3+2,x 					; copy 2nd on stack (the remainder) to the top.
.3822	95 b0		sta $b0,x			sta 	esInt3,x
.3824	b5 aa		lda $aa,x			lda 	esInt2+2,x
.3826	95 a8		sta $a8,x			sta 	esInt2,x
.3828	b5 a2		lda $a2,x			lda 	esInt1+2,x
.382a	95 a0		sta $a0,x			sta 	esInt1,x
.382c	b5 9a		lda $9a,x			lda 	esInt0+2,x
.382e	95 98		sta $98,x			sta 	esInt0,x
.3830	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32fromstr.asm

.0cfd					fs32Length:
>0cfd							.fill 	1
.3831					LinkInt32FromString:
.3831	aa		tax				tax
.3832	98		tya				tya
.3833	20 38 38	jsr $3838			jsr 	MInt32FromString
.3836	8a		txa				txa
.3837	60		rts				rts
.3838					MInt32FromString:
.3838	85 32		sta $32				sta 	tempShort 					; save base
.383a	98		tya				tya
.383b	48		pha				pha
.383c	a0 00		ldy #$00			ldy 	#0 							; get length of string to convert
.383e	b1 2a		lda ($2a),y			lda 	(temp0),y
.3840	8d fd 0c	sta $0cfd			sta 	fs32Length
.3843	f0 65		beq $38aa			beq 	_I32FSFail2					; fail if length zero.
.3845	a0 01		ldy #$01			ldy 	#1 							; set index into string being read
.3847	b1 2a		lda ($2a),y			lda 	(temp0),y 					; look at first character
.3849	c9 2d		cmp #$2d			cmp 	#"-"						; is it a - character
.384b	d0 09		bne $3856			bne 	_I32FSNotNegative
.384d	ad fd 0c	lda $0cfd			lda 	fs32Length 					; get length back.
.3850	c9 01		cmp #$01			cmp 	#1 							; if 1 it is just a - on its own so fail.
.3852	f0 56		beq $38aa			beq 	_I32FSFail2
.3854	a0 02		ldy #$02			ldy 	#2 							; first digit of the number.
.3856					_I32FSNotNegative:
.3856	a5 32		lda $32				lda 	tempShort 					; get the base back.
.3858	c0 02		cpy #$02			cpy 	#2 							; if we read a -ve (e.g. Y == 2)
.385a	d0 02		bne $385e			bne 	_I32FSNN2
.385c	09 80		ora #$80			ora 	#$80						; set bit 7, this indicates a negated result.
.385e					_I32FSNN2:
.385e	48		pha				pha 								; save base + final sign on stack.
.385f	20 ca 39	jsr $39ca			jsr 	MInt32False 				; zero the return value.
.3862					_I32FSMainLoop:
.3862	68		pla				pla 								; get the base back into tempShort
.3863	48		pha				pha
.3864	29 7f		and #$7f			and 	#$7F
.3866	85 32		sta $32				sta 	tempShort
.3868	b1 2a		lda ($2a),y			lda 	(temp0),y 					; look at next character.
.386a	c9 61		cmp #$61			cmp 	#"a" 						; fix up case.
.386c	90 02		bcc $3870			bcc 	_I32FSNotLC
.386e	e9 20		sbc #$20			sbc 	#32
.3870					_I32FSNotLC:
.3870	38		sec				sec 								; subtract 48 (ASCII "0") - ASCII to Hex conversion
.3871	e9 30		sbc #$30			sbc 	#"0"
.3873	90 34		bcc $38a9			bcc 	_I32FSFail 					; nothing more to do.
.3875	c9 0a		cmp #$0a			cmp 	#9+1 						; if it is 0-9 validate vs base.
.3877	90 06		bcc $387f			bcc 	_I32FSValidate
.3879	c9 11		cmp #$11			cmp 	#17 						; is it between 58 and 64 ? if so bad.
.387b	90 2c		bcc $38a9			bcc 	_I32FSFail
.387d	e9 07		sbc #$07			sbc 	#7 							; adjust into range so now character is 0->nnn
.387f					_I32FSValidate:
.387f	c5 32		cmp $32				cmp 	tempShort 					; compare against the base.
.3881	b0 26		bcs $38a9			bcs 	_I32FSFail 					; sorry, too large for this base, so fail.
.3883	48		pha				pha 								; save the new digit value.
.3884	e8		inx				inx 								; put base into next slot up on stack
.3885	a5 32		lda $32				lda 	tempShort
.3887	20 d9 39	jsr $39d9			jsr 	MInt32Set8Bit
.388a	ca		dex				dex
.388b	20 e2 38	jsr $38e2			jsr 	MInt32Multiply 				; multiply current by the base
.388e	e8		inx				inx
.388f	68		pla				pla  								; put additive into next slot
.3890	20 d9 39	jsr $39d9			jsr 	MInt32Set8Bit
.3893	ca		dex				dex
.3894	20 ae 38	jsr $38ae			jsr 	MInt32Add 					; and add it
.3897	c8		iny				iny 								; bump the character pointer
.3898	cc fd 0c	cpy $0cfd			cpy 	fs32Length 					; until > length.
.389b	f0 c5		beq $3862			beq 	_I32FSMainLoop
.389d	90 c3		bcc $3862			bcc 	_I32FSMainLoop
.389f					_I32FSDone:
.389f	68		pla				pla 								; get base/final sign back
.38a0	10 03		bpl $38a5			bpl 	_I32FSNN3
.38a2	20 84 39	jsr $3984			jsr 	MInt32Negate 				; negate the result.
.38a5					_I32FSNN3:
.38a5	68		pla				pla
.38a6	a8		tay				tay
.38a7	38		sec				sec
.38a8	60		rts				rts
.38a9					_I32FSFail:
.38a9	68		pla				pla
.38aa					_I32FSFail2:
.38aa	68		pla				pla
.38ab	a8		tay				tay
.38ac	18		clc				clc
.38ad	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32math.asm

.38ae					MInt32Add:
.38ae	18		clc				clc
.38af	b5 98		lda $98,x			lda 	esInt0,x
.38b1	75 99		adc $99,x			adc 	esInt0+1,x
.38b3	95 98		sta $98,x			sta 	esInt0,x
.38b5	b5 a0		lda $a0,x			lda 	esInt1,x
.38b7	75 a1		adc $a1,x			adc 	esInt1+1,x
.38b9	95 a0		sta $a0,x			sta 	esInt1,x
.38bb	b5 a8		lda $a8,x			lda 	esInt2,x
.38bd	75 a9		adc $a9,x			adc 	esInt2+1,x
.38bf	95 a8		sta $a8,x			sta 	esInt2,x
.38c1	b5 b0		lda $b0,x			lda 	esInt3,x
.38c3	75 b1		adc $b1,x			adc 	esInt3+1,x
.38c5	95 b0		sta $b0,x			sta 	esInt3,x
.38c7	60		rts				rts
.38c8					MInt32Sub:
.38c8	38		sec				sec
.38c9	b5 98		lda $98,x			lda 	esInt0,x
.38cb	f5 99		sbc $99,x			sbc 	esInt0+1,x
.38cd	95 98		sta $98,x			sta 	esInt0,x
.38cf	b5 a0		lda $a0,x			lda 	esInt1,x
.38d1	f5 a1		sbc $a1,x			sbc 	esInt1+1,x
.38d3	95 a0		sta $a0,x			sta 	esInt1,x
.38d5	b5 a8		lda $a8,x			lda 	esInt2,x
.38d7	f5 a9		sbc $a9,x			sbc 	esInt2+1,x
.38d9	95 a8		sta $a8,x			sta 	esInt2,x
.38db	b5 b0		lda $b0,x			lda 	esInt3,x
.38dd	f5 b1		sbc $b1,x			sbc 	esInt3+1,x
.38df	95 b0		sta $b0,x			sta 	esInt3,x
.38e1	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32multiply.asm

.38e2					MInt32Multiply:
.38e2	e8		inx				inx 								; copy 2nd -> 3rd
.38e3	20 08 39	jsr $3908			jsr 	MInt32CopyUp
.38e6	ca		dex				dex
.38e7	20 08 39	jsr $3908			jsr 	MInt32CopyUp 				; copy 1st -> 2nd
.38ea	20 ca 39	jsr $39ca			jsr 	MInt32False 				; zero 1st.
.38ed					_I32Loop:
.38ed	b5 9a		lda $9a,x			lda 	esInt0+2,x 					; get low bit of 3rd
.38ef	29 01		and #$01			and 	#1
.38f1	f0 03		beq $38f6			beq 	_I32NoAdd 					; if set
.38f3	20 ae 38	jsr $38ae			jsr 	MInt32Add 					; add 2nd to 1st.
.38f6					_I32NoAdd:
.38f6	e8		inx				inx 								; shift 2nd left
.38f7	20 df 39	jsr $39df			jsr 	MInt32ShiftLeft
.38fa	e8		inx				inx  								; shift 3rd right
.38fb	20 e8 39	jsr $39e8			jsr 	MInt32ShiftRight
.38fe	20 f1 39	jsr $39f1			jsr 	MInt32Zero 					; check if zero.
.3901	08		php				php 								; save status bits
.3902	ca		dex				dex 	 							; point back to 1st
.3903	ca		dex				dex
.3904	28		plp				plp 								; get status bits
.3905	d0 e6		bne $38ed			bne 	_I32Loop 					; if non-zero keep going.
.3907	60		rts				rts
.3908					MInt32CopyUp:
.3908	b5 98		lda $98,x			lda 	esInt0,x
.390a	95 99		sta $99,x			sta 	esInt0+1,x
.390c	b5 a0		lda $a0,x			lda 	esInt1,x
.390e	95 a1		sta $a1,x			sta 	esInt1+1,x
.3910	b5 a8		lda $a8,x			lda 	esInt2,x
.3912	95 a9		sta $a9,x			sta 	esInt2+1,x
.3914	b5 b0		lda $b0,x			lda 	esInt3,x
.3916	95 b1		sta $b1,x			sta 	esInt3+1,x
.3918	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32tostr.asm

>0cfe					MCharCount:	.fill 	1						; count of converted characters
.3919					MLInt32ToString:
.3919	aa		tax				tax									; module passes stack in A, base in Y
.391a	98		tya				tya
.391b	20 20 39	jsr $3920			jsr 	MInt32ToString
.391e	8a		txa				txa
.391f	60		rts				rts
.3920					MInt32ToString:
.3920	48		pha				pha 								; save base
.3921	85 32		sta $32				sta 	tempShort 					; save target base.
.3923	a9 00		lda #$00			lda 	#0
.3925	8d fe 0c	sta $0cfe			sta 	MCharCount 					; clear character count to 0
.3928	98		tya				tya
.3929	48		pha				pha
.392a	a5 32		lda $32				lda 	tempShort 					; check if we are signed conversion
.392c	10 10		bpl $393e			bpl 	_I32TSUnsigned
.392e	48		pha				pha 								; save base on stack.
.392f	b5 b0		lda $b0,x			lda 	esInt3,x 					; is it actually negative
.3931	10 08		bpl $393b			bpl 	_I32TSNoFlip
.3933	a9 2d		lda #$2d			lda 	#"-" 						; write a '-' prefix out.
.3935	20 71 39	jsr $3971			jsr 	MI32WriteCharacter
.3938	20 84 39	jsr $3984			jsr 	MInt32Negate 				; negate the value, so now it's positive.
.393b					_I32TSNoFlip:
.393b	68		pla				pla 								; get the base back
.393c	29 7f		and #$7f			and 	#$7F 						; clear the sign flag so it's just a base now.
.393e					_I32TSUnsigned:
.393e	20 4c 39	jsr $394c			jsr 	MI32DivideWrite 			; recursive code to output string.
.3941	a0 00		ldy #$00			ldy 	#0 							; write charcount to first character.
.3943	ad fe 0c	lda $0cfe			lda 	MCharCount
.3946	91 2a		sta ($2a),y			sta 	(temp0),y
.3948	68		pla				pla
.3949	a8		tay				tay
.394a	68		pla				pla
.394b	60		rts				rts
.394c					MI32DivideWrite:
.394c	48		pha				pha 								; save the divisor/base
.394d	e8		inx				inx 								; write in the dividing position.
.394e	20 d9 39	jsr $39d9			jsr 	MInt32Set8Bit
.3951	ca		dex				dex
.3952	20 c4 37	jsr $37c4			jsr 	MInt32UDivide 				; divide number by base.
.3955	68		pla				pla 								; get the base into Y
.3956	a8		tay				tay
.3957	b5 9a		lda $9a,x			lda 	esInt0+2,x 					; get the remainder and push on the stack.
.3959	48		pha				pha
.395a	20 f1 39	jsr $39f1			jsr 	MInt32Zero 					; is the result zero ?
.395d	f0 04		beq $3963			beq 	_I32NoRecurse 				; if so, don't recurse.
.395f	98		tya				tya 								; put base into A
.3960	20 4c 39	jsr $394c			jsr 	MI32DivideWrite 				; and jsr the dividor recursively.
.3963					_I32NoRecurse:
.3963	68		pla				pla 								; get the remainder back
.3964	c9 0a		cmp #$0a			cmp 	#10  						; handle hexadecimals, now converting to ASCII
.3966	90 02		bcc $396a			bcc 	_I32NotHex
.3968	69 06		adc #$06			adc 	#7-1
.396a					_I32NotHex:
.396a	18		clc				clc 								; make it ASCII
.396b	69 30		adc #$30			adc 	#48
.396d	20 71 39	jsr $3971			jsr 	MI32WriteCharacter 			; write the character out
.3970	60		rts				rts 								; and exit.
.3971					MI32WriteCharacter:
.3971	ee fe 0c	inc $0cfe			inc 	MCharCount 					; bump count (space for leading count)
.3974	ac fe 0c	ldy $0cfe			ldy 	MCharCount 					; get position
.3977	91 2a		sta ($2a),y			sta 	(temp0),y 					; write out with trailing 0
.3979	c8		iny				iny
.397a	a9 00		lda #$00			lda 	#0
.397c	91 2a		sta ($2a),y			sta 	(temp0),y
.397e	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32unary.asm

>0cff					MSeed32:	.fill 	4							; random number seed.
.397f					MInt32Absolute:
.397f	b5 b0		lda $b0,x			lda 	esInt3,x 					; use negate code if -ve.
.3981	30 01		bmi $3984			bmi 	MInt32Negate
.3983	60		rts				rts
.3984					MInt32Negate:
.3984	38		sec				sec 								; subtract from zero.
.3985	a9 00		lda #$00			lda 	#0
.3987	f5 98		sbc $98,x			sbc 	esInt0,x
.3989	95 98		sta $98,x			sta 	esInt0,x
.398b	a9 00		lda #$00			lda 	#0
.398d	f5 a0		sbc $a0,x			sbc 	esInt1,x
.398f	95 a0		sta $a0,x			sta 	esInt1,x
.3991	a9 00		lda #$00			lda 	#0
.3993	f5 a8		sbc $a8,x			sbc 	esInt2,x
.3995	95 a8		sta $a8,x			sta 	esInt2,x
.3997	a9 00		lda #$00			lda 	#0
.3999	f5 b0		sbc $b0,x			sbc 	esInt3,x
.399b	95 b0		sta $b0,x			sta 	esInt3,x
.399d	60		rts				rts
.399e					MInt32Not:
.399e	b5 98		lda $98,x			lda 	esInt0,x 					; one's complement all four.
.39a0	49 ff		eor #$ff			eor 	#$FF
.39a2	95 98		sta $98,x			sta 	esInt0,x
.39a4	b5 a0		lda $a0,x			lda 	esInt1,x
.39a6	49 ff		eor #$ff			eor 	#$FF
.39a8	95 a0		sta $a0,x			sta 	esInt1,x
.39aa	b5 a8		lda $a8,x			lda 	esInt2,x
.39ac	49 ff		eor #$ff			eor 	#$FF
.39ae	95 a8		sta $a8,x			sta 	esInt2,x
.39b0	b5 b0		lda $b0,x			lda 	esInt3,x
.39b2	49 ff		eor #$ff			eor 	#$FF
.39b4	95 b0		sta $b0,x			sta 	esInt3,x
.39b6	60		rts				rts
.39b7					MInt32Sign:
.39b7	b5 b0		lda $b0,x			lda 	esInt3,x					; look at MSB
.39b9	30 0b		bmi $39c6			bmi 	MInt32True 					; if set return -1 (true)
.39bb	20 f1 39	jsr $39f1			jsr 	MInt32Zero 					; is it zero ?
.39be	f0 0a		beq $39ca			beq 	MInt32False 				; if zero return 0 (false)
.39c0	20 ca 39	jsr $39ca			jsr 	MInt32False 				; > 0 return 1, by setting it to zero
.39c3	f6 98		inc $98,x			inc 	esInt0,x  					; and bumping the LSB.
.39c5	60		rts				rts
.39c6					MInt32True:
.39c6	a9 ff		lda #$ff			lda 	#$FF 						; set to $FFFFFFFF
.39c8	d0 02		bne $39cc			bne 	MInt32WriteAll
.39ca					MInt32False:
.39ca	a9 00		lda #$00			lda 	#0
.39cc					MInt32WriteAll:
.39cc	95 98		sta $98,x			sta 	esInt0,x
.39ce					MInt32Write123:
.39ce	95 a0		sta $a0,x			sta 	esInt1,x
.39d0	95 a8		sta $a8,x			sta 	esInt2,x
.39d2	95 b0		sta $b0,x			sta 	esInt3,x
.39d4	a9 00		lda #$00			lda 	#$00						; and make it an integer
.39d6	95 90		sta $90,x			sta 	esType,x
.39d8	60		rts				rts
.39d9					MInt32Set8Bit:
.39d9	95 98		sta $98,x			sta 	esInt0,x 					; coopt above function to write
.39db	a9 00		lda #$00			lda 	#0 							; a value 0-255
.39dd	f0 ef		beq $39ce			beq		MInt32Write123
.39df					MInt32ShiftLeft:
.39df	16 98		asl $98,x			asl 	esInt0,x
.39e1	36 a0		rol $a0,x			rol	 	esInt1,x
.39e3	36 a8		rol $a8,x			rol	 	esInt2,x
.39e5	36 b0		rol $b0,x			rol	 	esInt3,x
.39e7	60		rts				rts
.39e8					MInt32ShiftRight:
.39e8	56 b0		lsr $b0,x			lsr 	esInt3,x
.39ea	76 a8		ror $a8,x			ror 	esInt2,x
.39ec	76 a0		ror $a0,x			ror 	esInt1,x
.39ee	76 98		ror $98,x			ror 	esInt0,x
.39f0	60		rts				rts
.39f1					MInt32Zero:
.39f1	b5 98		lda $98,x			lda 	esInt0,x
.39f3	15 a0		ora $a0,x			ora 	esInt1,x
.39f5	15 a8		ora $a8,x			ora 	esInt2,x
.39f7	15 b0		ora $b0,x			ora 	esInt3,x
.39f9	60		rts				rts
.39fa					MInt32Random:
.39fa	98		tya				tya
.39fb	48		pha				pha
.39fc	a0 07		ldy #$07			ldy 	#7 							; do it 7 times
.39fe	ad ff 0c	lda $0cff			lda 	MSeed32+0 					; check the seed isn't zero
.3a01	d0 03		bne $3a06			bne 	_Random1
.3a03	a8		tay				tay 								; if so do it 256 times
.3a04	a9 aa		lda #$aa			lda		#$AA 						; and use this to seed the seed....
.3a06					_Random1:
.3a06	0a		asl a				asl 	a
.3a07	2e 00 0d	rol $0d00			rol 	MSeed32+1
.3a0a	2e 01 0d	rol $0d01			rol 	MSeed32+2
.3a0d	2e 02 0d	rol $0d02			rol 	MSeed32+3
.3a10	90 02		bcc $3a14			bcc 	_Random2
.3a12	49 c5		eor #$c5			eor 	#$C5
.3a14					_Random2:
.3a14	88		dey				dey
.3a15	d0 ef		bne $3a06			bne 	_Random1
.3a17	8d ff 0c	sta $0cff			sta 	MSeed32+0 					; copy the seed in.
.3a1a	95 98		sta $98,x			sta 	esInt0,x
.3a1c	ad 00 0d	lda $0d00			lda 	MSeed32+1
.3a1f	95 a0		sta $a0,x			sta 	esInt1,x
.3a21	ad 01 0d	lda $0d01			lda 	MSeed32+2
.3a24	95 a8		sta $a8,x			sta 	esInt2,x
.3a26	ad 02 0d	lda $0d02			lda 	MSeed32+3
.3a29	95 b0		sta $b0,x			sta 	esInt3,x
.3a2b	68		pla				pla
.3a2c	a8		tay				tay
.3a2d	a9 00		lda #$00			lda 	#0
.3a2f	95 90		sta $90,x			sta 	esType,x
.3a31	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/utility/check.asm

.3a32					CheckToken:
.3a32	d1 28		cmp ($28),y			cmp 	(codePtr),y
.3a34	d0 02		bne $3a38			bne 	_CTError
.3a36	c8		iny				iny
.3a37	60		rts				rts
.3a38					_CTError:
.3a38	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.3a3a	20 18 15	jsr $1518		jsr	errorHandler
.3a3d					CheckRightParen:
.3a3d	b1 28		lda ($28),y			lda 	(codePtr),y
.3a3f	c8		iny				iny
.3a40	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.3a42	d0 01		bne $3a45			bne 	_CRPError
.3a44	60		rts				rts
.3a45					_CRPError:
.3a45	a2 09		ldx #$09			ldx 	#ErrorID_MissingRP
.3a47	20 18 15	jsr $1518		jsr	errorHandler
.3a4a					CheckComma:
.3a4a	b1 28		lda ($28),y			lda 	(codePtr),y
.3a4c	c8		iny				iny
.3a4d	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.3a4f	d0 01		bne $3a52			bne 	_CCError
.3a51	60		rts				rts
.3a52					_CCError:
.3a52	a2 0a		ldx #$0a			ldx 	#ErrorID_MissingComma
.3a54	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/utility/stack.asm

.0037					rsPointer:
>0037							.fill 	2							; to TOS, which is the current top-token.
.3a57					RSReset:
.3a57	a9 ff		lda #$ff			lda 	#(returnStack+retStackSize-1) & $FF
.3a59	85 37		sta $37				sta 	rsPointer
.3a5b	a9 09		lda #$09			lda 	#(returnStack+retStackSize-1) >> 8
.3a5d	85 38		sta $38				sta 	1+(rsPointer)
.3a5f	a9 ff		lda #$ff			lda 	#$FF 						; put a duff marker on TOS, so nothing will pop
.3a61	8d ff 09	sta $09ff			sta 	returnStack+retStackSize-1
.3a64	60		rts				rts
.3a65					RSClaim:
.3a65	84 32		sty $32				sty 	tempShort 					; preserve Y
.3a67	48		pha				pha 								; save marker on stack.
.3a68	8a		txa				txa 								; get bytes required.
.3a69	38		sec				sec
.3a6a	49 ff		eor #$ff			eor 	#$FF 						; add to rsPointer using 2's complement.
.3a6c	65 37		adc $37				adc 	rsPointer
.3a6e	85 37		sta $37				sta 	rsPointer
.3a70	a5 38		lda $38				lda 	rsPointer+1
.3a72	69 ff		adc #$ff			adc 	#$FF
.3a74	85 38		sta $38				sta 	rsPointer+1
.3a76	c9 08		cmp #$08			cmp 	#returnStack>>8 			; overflow. underflow actually :)
.3a78	90 08		bcc $3a82			bcc 	_RSCOverflow
.3a7a	68		pla				pla 								; get marker back
.3a7b	a0 00		ldy #$00			ldy 	#0 							; write marker out.
.3a7d	91 37		sta ($37),y			sta 	(rsPointer),y
.3a7f	a4 32		ldy $32				ldy 	tempShort 					; restore Y and exit
.3a81	60		rts				rts
.3a82					_RSCOverflow:
.3a82	a2 16		ldx #$16			ldx 	#ErrorID_RetStack
.3a84	20 18 15	jsr $1518		jsr	errorHandler
.3a87					RSFree:
.3a87	18		clc				clc
.3a88	65 37		adc $37				adc 	rsPointer
.3a8a	85 37		sta $37				sta 	rsPointer
.3a8c	90 02		bcc $3a90			bcc 	_RSFExit
.3a8e	e6 38		inc $38				inc 	rsPointer+1
.3a90					_RSFExit:
.3a90	60		rts				rts
.3a91					RSSavePosition:
.3a91	84 32		sty $32				sty 	tempShort 					; save Y position
.3a93	a8		tay				tay 								; this is where we write it.
.3a94	a5 28		lda $28				lda 	codePtr 					; write codePointer out
.3a96	91 37		sta ($37),y			sta 	(rsPointer),y
.3a98	c8		iny				iny
.3a99	a5 29		lda $29				lda 	codePtr+1
.3a9b	91 37		sta ($37),y			sta 	(rsPointer),y
.3a9d	c8		iny				iny
.3a9e	a5 32		lda $32				lda 	tempShort 					; write the Y position out.
.3aa0	91 37		sta ($37),y			sta 	(rsPointer),y
.3aa2	a8		tay				tay 								; fix Y back again to original value
.3aa3	60		rts				rts
.3aa4					RSLoadPosition:
.3aa4	a8		tay				tay
.3aa5	b1 37		lda ($37),y			lda 	(rsPointer),y 				; read codePointer back
.3aa7	85 28		sta $28				sta 	codePtr
.3aa9	c8		iny				iny
.3aaa	b1 37		lda ($37),y			lda 	(rsPointer),y
.3aac	85 29		sta $29				sta 	codePtr+1
.3aae	c8		iny				iny
.3aaf	b1 37		lda ($37),y			lda 	(rsPointer),y 				; and the offset
.3ab1	a8		tay				tay 								; to Y
.3ab2	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/utility/warmstart.asm

.3ab3					WarmStart:
.3ab3	a2 04		ldx #$04		ldx	#4
.3ab5	20 1c 24	jsr $241c		jsr	interactionHandler

;******  Return to file: main/main.asm

.3ab8					mainHandler:
.3ab8	7c bb 3a	jmp ($3abb,x)			jmp 	(mainVectors,x)
.3abb					mainVectors:
>3abb	d7 3a					.word _DummyControlHandler ; index 0
>3abd	4a 3a					.word CheckComma           ; index 2
>3abf	3d 3a					.word CheckRightParen      ; index 4
>3ac1	24 2c					.word XCommandClear        ; index 6
>3ac3	4d 33					.word LinkEvaluate         ; index 8
>3ac5	59 33					.word LinkEvaluateInteger  ; index 10
>3ac7	65 33					.word LinkEvaluateSmallInt ; index 12
>3ac9	5f 33					.word LinkEvaluateString   ; index 14
>3acb	53 33					.word LinkEvaluateTerm     ; index 16
>3acd	19 39					.word MLInt32ToString      ; index 18
>3acf	b3 2d					.word Command_XNew         ; index 20
>3ad1	c1 2d					.word XCommand_Run         ; index 22
>3ad3	cd 2d					.word Command_RunFrom      ; index 24
>3ad5	31 38					.word LinkInt32FromString  ; index 26
.3ad7					_DummyControlHandler:
.3ad7	60		rts			rts

;******  Return to file: basic.asm

.3ad8					section_end_main:
.3ad8					section_start_string:

;******  Processing file: string/string.asm


;******  Processing file: string/functions/chr.asm

.3ad8					StringChrs:
.3ad8	aa		tax				tax 								; set up stack
.3ad9	a9 02		lda #$02			lda 	#2
.3adb	20 9b 3b	jsr $3b9b			jsr 	AllocateSoftString
.3ade	98		tya				tya
.3adf	20 c1 3b	jsr $3bc1			jsr 	WriteSoftString
.3ae2					StringUpdate:
.3ae2	20 f0 3a	jsr $3af0			jsr 	ReturnSoftString
.3ae5	8a		txa				txa
.3ae6	60		rts				rts
.3ae7					StringNull:
.3ae7	aa		tax				tax
.3ae8	a9 01		lda #$01			lda 	#1
.3aea	20 9b 3b	jsr $3b9b			jsr 	AllocateSoftString
.3aed	4c e2 3a	jmp $3ae2			jmp 	StringUpdate
.3af0					ReturnSoftString:
.3af0	a5 39		lda $39				lda 	softMemAlloc 				; copy address
.3af2	95 98		sta $98,x			sta 	esInt0,x
.3af4	a5 3a		lda $3a				lda 	softMemAlloc+1
.3af6	95 a0		sta $a0,x			sta 	esInt1,x
.3af8	a9 00		lda #$00			lda 	#0 							; zero upper bytes
.3afa	95 a8		sta $a8,x			sta 	esInt2,x
.3afc	95 b0		sta $b0,x			sta 	esInt3,x
.3afe	a9 40		lda #$40			lda 	#$40 						; type string.
.3b00	95 90		sta $90,x			sta 	esType,x
.3b02	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/functions/compare.asm

.3b03					STRCompare:
.3b03	48		pha				pha 								; save A
.3b04	aa		tax				tax 								; put stack pos in X
.3b05	98		tya				tya
.3b06	48		pha				pha
.3b07	20 3b 3b	jsr $3b3b			jsr 	CopyStringPair 				; copy strings to temp0,temp1
.3b0a	a0 00		ldy #$00			ldy 	#0 							; get the smaller of the two string sizes.
.3b0c	b1 2a		lda ($2a),y			lda 	(temp0),y
.3b0e	d1 2c		cmp ($2c),y			cmp 	(temp1),y
.3b10	90 02		bcc $3b14			bcc 	_SCNotSmaller
.3b12	b1 2c		lda ($2c),y			lda 	(temp1),y
.3b14					_SCNotSmaller:
.3b14	aa		tax				tax 								; put that in X. We compare this many chars first.
.3b15					_SCCompareLoop:
.3b15	e0 00		cpx #$00			cpx 	#0 							; if compared all the smaller, then it is the shorter
.3b17	f0 0c		beq $3b25			beq 	_SCSameToEndShortest 		; one that is the smallest if they are different lengths.
.3b19	ca		dex				dex 								; decrement chars to compare.
.3b1a	c8		iny				iny 								; move to next character
.3b1b	38		sec				sec 								; calculate s1[y]-s2[y]
.3b1c	b1 2a		lda ($2a),y			lda 	(temp0),y
.3b1e	f1 2c		sbc ($2c),y			sbc 	(temp1),y
.3b20	d0 0a		bne $3b2c			bne 	_SCReturnResult 			; if different return sign of A
.3b22	4c 15 3b	jmp $3b15			jmp 	_SCCompareLoop
.3b25					_SCSameToEndShortest
.3b25	a0 00		ldy #$00			ldy 	#0 							; compare len(s1) - len(s2)
.3b27	38		sec				sec
.3b28	b1 2a		lda ($2a),y			lda 	(temp0),y
.3b2a	f1 2c		sbc ($2c),y			sbc 	(temp1),y
.3b2c					_SCReturnResult:
.3b2c	08		php				php 								; set return to zero preserving PSW.
.3b2d	a2 00		ldx #$00			ldx 	#0
.3b2f	28		plp				plp
.3b30	f0 05		beq $3b37			beq 	_SCExit 					; two values equal, then exit
.3b32	ca		dex				dex 								; X = $FF
.3b33	90 02		bcc $3b37			bcc 	_SCExit 					; if 1st < 2nd then -1
.3b35	a2 01		ldx #$01			ldx 	#1 							; X = $01 if greater
.3b37					_SCExit:
.3b37	68		pla				pla
.3b38	a8		tay				tay
.3b39	68		pla				pla
.3b3a	60		rts				rts
.3b3b					CopyStringPair:
.3b3b	b5 99		lda $99,x			lda 	esInt0+1,x
.3b3d	85 2c		sta $2c				sta 	temp1
.3b3f	b5 a1		lda $a1,x			lda 	esInt1+1,x
.3b41	85 2d		sta $2d				sta 	temp1+1
.3b43					CopyStringTop:
.3b43	b5 98		lda $98,x			lda 	esInt0,x
.3b45	85 2a		sta $2a				sta 	temp0
.3b47	b5 a0		lda $a0,x			lda 	esInt1,x
.3b49	85 2b		sta $2b				sta 	temp0+1
.3b4b	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/functions/concat.asm

.3b4c					StringConcat:
.3b4c	aa		tax				tax									; stack pos in X
.3b4d	98		tya				tya
.3b4e	48		pha				pha
.3b4f	20 3b 3b	jsr $3b3b			jsr 	CopyStringPair 				; temp0 and temp1 point to strings to concat.
.3b52	38		sec				sec 								; calculate alloc strings. lengths added + 1 for size.
.3b53	a0 00		ldy #$00			ldy 	#0
.3b55	b1 2a		lda ($2a),y			lda 	(temp0),y
.3b57	71 2c		adc ($2c),y			adc 	(temp1),y
.3b59	b0 1c		bcs $3b77			bcs 	_SCError 					; just too many characters here.
.3b5b	c9 fc		cmp #$fc			cmp 	#MaxStringSize
.3b5d	b0 18		bcs $3b77			bcs 	_SCError
.3b5f	20 9b 3b	jsr $3b9b			jsr 	AllocateSoftString 			; allocate soft string memory, set pointer.
.3b62	20 92 3b	jsr $3b92			jsr 	CopySoftToStack 			; copy that to the stack.
.3b65	20 7c 3b	jsr $3b7c			jsr 	SCCopyTemp0 				; copy temp0
.3b68	a5 2c		lda $2c				lda 	temp1 						; copy temp1 to temp0
.3b6a	85 2a		sta $2a				sta 	temp0
.3b6c	a5 2d		lda $2d				lda 	temp1+1
.3b6e	85 2b		sta $2b				sta 	temp0+1
.3b70	20 7c 3b	jsr $3b7c			jsr 	SCCopyTemp0 				; copy temp0 e.g. what was temp1.
.3b73	68		pla				pla
.3b74	a8		tay				tay
.3b75	8a		txa				txa 								; and A
.3b76	60		rts				rts
.3b77					_SCError:
.3b77	a2 0d		ldx #$0d			ldx 	#ErrorID_StrLen
.3b79	20 18 15	jsr $1518		jsr	errorHandler
.3b7c					SCCopyTemp0:
.3b7c	a0 00		ldy #$00			ldy 	#0 							; put count in temp2
.3b7e	b1 2a		lda ($2a),y			lda 	(temp0),y
.3b80	85 2e		sta $2e				sta 	temp2
.3b82					_SCCopyLoop:
.3b82	a5 2e		lda $2e				lda 	temp2 						; done the lot
.3b84	f0 0b		beq $3b91			beq 	_SCCopyExit
.3b86	c6 2e		dec $2e				dec 	temp2
.3b88	c8		iny				iny 								; get next char
.3b89	b1 2a		lda ($2a),y			lda 	(temp0),y
.3b8b	20 c1 3b	jsr $3bc1			jsr 	WriteSoftString 			; write to soft string.
.3b8e	4c 82 3b	jmp $3b82			jmp 	_SCCopyLoop
.3b91					_SCCopyExit:
.3b91	60		rts				rts
.3b92					CopySoftToStack:
.3b92	a5 39		lda $39				lda 	SoftMemAlloc 				; copy the memory allocation pointer to the stack.
.3b94	95 98		sta $98,x			sta 	esInt0,x 					; type is already string.
.3b96	a5 3a		lda $3a				lda 	SoftMemAlloc+1
.3b98	95 a0		sta $a0,x			sta 	esInt1,x
.3b9a	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/functions/memory.asm

.0039					softMemAlloc:
>0039							.fill 	2  							; if MSB is zero needs resetting on allocation.
.3b9b					AllocateSoftString:
.3b9b	85 32		sta $32				sta 	tempShort 					; save count
.3b9d	98		tya				tya
.3b9e	48		pha				pha
.3b9f	a5 3a		lda $3a				lda 	softMemAlloc+1 				; if the high byte is zero, it needs allocating.
.3ba1	d0 09		bne $3bac			bne 	_ASSDone
.3ba3	a5 33		lda $33				lda 	highMemory 					; reset the soft memory alloc pointer.
.3ba5	85 39		sta $39				sta 	softMemAlloc 				; to speed up slightly, we only reset this when we first need it
.3ba7	a4 34		ldy $34				ldy 	highMemory+1 				; but it needs to be reset before each command.
.3ba9	88		dey				dey 								; it is set to 1/4k below high memory, allowing space
.3baa	84 3a		sty $3a				sty 	softMemAlloc+1 				; for a concreted string.
.3bac					_ASSDone:
.3bac	38		sec				sec 								; allocate downwards enough memory
.3bad	a5 39		lda $39				lda 	softMemAlloc 				; subtract the memory requirements in A from
.3baf	e5 32		sbc $32				sbc 	tempShort 					; the soft memory pointer
.3bb1	85 39		sta $39				sta 	softMemAlloc
.3bb3	a5 3a		lda $3a				lda 	softMemAlloc+1
.3bb5	e9 00		sbc #$00			sbc 	#0
.3bb7	85 3a		sta $3a				sta 	softMemAlloc+1
.3bb9	a9 00		lda #$00			lda 	#0 							; empty that string, set the length = 0.
.3bbb	a8		tay				tay
.3bbc	91 39		sta ($39),y			sta 	(softMemAlloc),y
.3bbe	68		pla				pla
.3bbf	a8		tay				tay
.3bc0	60		rts				rts
.3bc1					WriteSoftString:
.3bc1	84 32		sty $32				sty 	tempShort 					; save Y
.3bc3	48		pha				pha 								; save character on stack
.3bc4	a0 00		ldy #$00			ldy 	#0 							; get and bump length
.3bc6	b1 39		lda ($39),y			lda 	(softMemAlloc),y
.3bc8	18		clc				clc
.3bc9	69 01		adc #$01			adc 	#1
.3bcb	91 39		sta ($39),y			sta 	(softMemAlloc),y
.3bcd	a8		tay				tay 								; offset in Y
.3bce	68		pla				pla 								; get char and write.
.3bcf	91 39		sta ($39),y			sta 	(softMemAlloc),y
.3bd1	a4 32		ldy $32				ldy 	tempShort 					; restore Y and exit.
.3bd3	60		rts				rts
.3bd4					StrClone:
.3bd4	aa		tax				tax 								; set up stack.
.3bd5	98		tya				tya
.3bd6	48		pha				pha
.3bd7	a0 00		ldy #$00			ldy 	#0 							; get length, add 1 for length
.3bd9	b1 2a		lda ($2a),y			lda 	(temp0),y 					; this is the bytes required.
.3bdb	18		clc				clc
.3bdc	69 01		adc #$01			adc 	#1
.3bde	20 9b 3b	jsr $3b9b			jsr 	AllocateSoftString 			; allocate soft memory
.3be1	a5 39		lda $39				lda 	softMemAlloc 				; copy that address to TOS
.3be3	95 98		sta $98,x			sta 	esInt0,x
.3be5	a5 3a		lda $3a				lda 	softMemAlloc+1
.3be7	95 a0		sta $a0,x			sta 	esInt1,x
.3be9	a9 00		lda #$00			lda 	#0 							; zero upper 2 bytes
.3beb	95 a8		sta $a8,x			sta 	esInt2,x
.3bed	95 b0		sta $b0,x			sta 	esInt3,x
.3bef	a9 40		lda #$40			lda 	#$40 						; set type to string.
.3bf1	95 90		sta $90,x			sta 	esType,x
.3bf3	20 7c 3b	jsr $3b7c			jsr 	SCCopyTemp0 				; copy temp0 string to soft memory copy (concat.asm)
.3bf6	68		pla				pla
.3bf7	a8		tay				tay
.3bf8	8a		txa				txa
.3bf9	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/functions/setcase.asm

.3bfa					CaseString:
.3bfa	48		pha				pha 								; save A and copy to X
.3bfb	aa		tax				tax
.3bfc	98		tya				tya
.3bfd	48		pha				pha
.3bfe	20 43 3b	jsr $3b43			jsr 	CopyStringTop 				; target string -> temp0
.3c01	a0 00		ldy #$00			ldy 	#0
.3c03	b1 2a		lda ($2a),y			lda 	(temp0),y  					; get length,
.3c05	18		clc				clc
.3c06	69 01		adc #$01			adc 	#1 							; one more for length byte
.3c08	20 9b 3b	jsr $3b9b			jsr 	AllocateSoftString 			; allocate soft string memory, set pointer.
.3c0b	20 92 3b	jsr $3b92			jsr 	CopySoftToStack 			; copy that to the stack.
.3c0e	a0 00		ldy #$00			ldy 	#0
.3c10	b1 2a		lda ($2a),y			lda 	(temp0),y 					; count to copy in X
.3c12	aa		tax				tax
.3c13					_CSCopy:
.3c13	e0 00		cpx #$00			cpx 	#0 							; finished if 0.
.3c15	f0 24		beq $3c3b			beq 	_CSExit
.3c17	ca		dex				dex
.3c18	c8		iny				iny
.3c19	68		pla				pla 								; check direction
.3c1a	48		pha				pha
.3c1b	f0 0c		beq $3c29			beq 	_CSUpper
.3c1d	b1 2a		lda ($2a),y			lda 	(temp0),y 					; lower$() code
.3c1f	c9 41		cmp #$41			cmp 	#"A"
.3c21	90 12		bcc $3c35			bcc 	_CSWrite
.3c23	c9 5b		cmp #$5b			cmp 	#"Z"+1
.3c25	b0 0e		bcs $3c35			bcs 	_CSWrite
.3c27	90 0a		bcc $3c33			bcc 	_CSFlipWrite
.3c29					_CSUpper:
.3c29	b1 2a		lda ($2a),y			lda 	(temp0),y 					; upper$() code
.3c2b	c9 61		cmp #$61			cmp 	#"a"
.3c2d	90 06		bcc $3c35			bcc 	_CSWrite
.3c2f	c9 7b		cmp #$7b			cmp 	#"z"+1
.3c31	b0 02		bcs $3c35			bcs 	_CSWrite
.3c33					_CSFlipWrite:
.3c33	49 20		eor #$20			eor 	#"A"^"a" 					; switch case.
.3c35					_CSWrite:
.3c35	20 c1 3b	jsr $3bc1			jsr 	WriteSoftString 			; add to soft string.
.3c38	4c 13 3c	jmp $3c13			jmp 	_CSCopy
.3c3b					_CSExit:
.3c3b	68		pla				pla
.3c3c	a8		tay				tay
.3c3d	68		pla				pla
.3c3e	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/functions/substring.asm

.3c3f					StringSubstring:
.3c3f	48		pha				pha
.3c40	aa		tax				tax 								; access stack.
.3c41	98		tya				tya
.3c42	48		pha				pha
.3c43	20 43 3b	jsr $3b43			jsr 	CopyStringTop 				; point temp0 to the string.
.3c46	a0 00		ldy #$00			ldy 	#0 							; get length.
.3c48	b1 2a		lda ($2a),y			lda 	(temp0),Y
.3c4a	85 2c		sta $2c				sta 	temp1
.3c4c	b5 99		lda $99,x			lda 	esInt0+1,x 					; get the initial offset
.3c4e	c5 2c		cmp $2c				cmp 	temp1 						; return "" if > length.
.3c50	f0 02		beq $3c54			beq 	_SSBOkay
.3c52	b0 2a		bcs $3c7e			bcs 	_SSBReturnNull
.3c54					_SSBOkay:
.3c54	a5 2c		lda $2c				lda 	temp1 						; get the total length +1
.3c56	18		clc				clc
.3c57	69 01		adc #$01			adc 	#1
.3c59	38		sec				sec
.3c5a	f5 99		sbc $99,x			sbc 	esInt0+1,x 					; the anything >= this is bad - max size
.3c5c	d5 9a		cmp $9a,x			cmp 	esInt0+2,x  				; check bad >= required
.3c5e	90 02		bcc $3c62			bcc		_SSBTrunc
.3c60	b5 9a		lda $9a,x			lda 	esInt0+2,x
.3c62					_SSBTrunc:
.3c62	85 2d		sta $2d				sta 	temp1+1 					; characters to copy.
.3c64	18		clc				clc
.3c65	69 01		adc #$01			adc 	#1 							; add 1
.3c67	20 9b 3b	jsr $3b9b			jsr 	AllocateSoftString 			; allocate soft string memory, set pointer.
.3c6a	20 92 3b	jsr $3b92			jsr 	CopySoftToStack 			; copy that to the stack.
.3c6d	b4 99		ldy $99,x			ldy 	esInt0+1,x 					; get initial position of char to copy
.3c6f					_SSBCopyLoop:
.3c6f	a5 2d		lda $2d				lda 	temp1+1 					; done them all
.3c71	f0 0e		beq $3c81			beq 	_SSBExit
.3c73	c6 2d		dec $2d				dec 	temp1+1
.3c75	b1 2a		lda ($2a),y			lda 	(temp0),y 					; get and write character
.3c77	20 c1 3b	jsr $3bc1			jsr 	WriteSoftString
.3c7a	c8		iny				iny
.3c7b	4c 6f 3c	jmp $3c6f			jmp 	_SSBCopyLoop
.3c7e					_SSBReturnNull:
.3c7e	20 85 3c	jsr $3c85			jsr 	ReturnNull
.3c81					_SSBExit:
.3c81	68		pla				pla
.3c82	a8		tay				tay
.3c83	68		pla				pla
.3c84	60		rts				rts
.3c85					ReturnNull:
.3c85	a9 00		lda #$00			lda 	#0 							; clear null string
.3c87	8d ce 0a	sta $0ace			sta 	NullString
.3c8a	a9 ce		lda #$ce			lda 	#NullString & $FF 			; set a pointer to it
.3c8c	95 98		sta $98,x			sta 	esInt0,x
.3c8e	a9 0a		lda #$0a			lda 	#NullString >> 8
.3c90	95 a0		sta $a0,x			sta 	esInt1,x
.3c92	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/functions/write.asm

.0d03					srcStrLen:
>0d03							.fill 	1
.3c93					StringWrite:
.3c93	aa		tax				tax
.3c94	48		pha				pha
.3c95	98		tya				tya
.3c96	48		pha				pha
.3c97	20 be 3c	jsr $3cbe			jsr 	CheckOverwriteCurrent
.3c9a	b0 0d		bcs $3ca9			bcs		_SWCopyCurrent
.3c9c	20 fc 3c	jsr $3cfc			jsr 	RequiresConcretion
.3c9f	90 0e		bcc $3caf			bcc 	_SWWriteReference
.3ca1	20 5f 3d	jsr $3d5f			jsr 	CheckSpecialConcretion
.3ca4	b0 09		bcs $3caf			bcs 	_SWWriteReference
.3ca6	20 10 3d	jsr $3d10			jsr 	AllocateHardMemory
.3ca9					_SWCopyCurrent:
.3ca9	20 43 3d	jsr $3d43			jsr 	CopyStringToHardMemory
.3cac	4c ba 3c	jmp $3cba			jmp 	_SWExit
.3caf					_SWWriteReference
.3caf	a0 00		ldy #$00			ldy 	#0
.3cb1	a5 2a		lda $2a				lda 	temp0
.3cb3	91 2c		sta ($2c),y			sta 	(temp1),y
.3cb5	c8		iny				iny
.3cb6	a5 2b		lda $2b				lda 	temp0+1
.3cb8	91 2c		sta ($2c),y			sta 	(temp1),y
.3cba					_SWExit:
.3cba	68		pla				pla
.3cbb	a8		tay				tay
.3cbc	68		pla				pla
.3cbd	60		rts				rts
.3cbe					CheckOverwriteCurrent:
.3cbe	a0 00		ldy #$00			ldy 	#0 						; get address of string being written to temp0
.3cc0	b5 a1		lda $a1,x			lda 	esInt1+1,x
.3cc2	85 2b		sta $2b				sta 	temp0+1
.3cc4	b5 99		lda $99,x			lda 	esInt0+1,x
.3cc6	85 2a		sta $2a				sta 	temp0
.3cc8	b1 2a		lda ($2a),y			lda 	(temp0),y 				; get length of string being copied and save it.
.3cca	8d 03 0d	sta $0d03			sta 	srcStrLen
.3ccd	b5 98		lda $98,x			lda 	esInt0,x 				; copy where the final address it being written to temp1.
.3ccf	85 2c		sta $2c				sta 	temp1 					; e.g. if it is ax$ then temp1 will point to the ax$
.3cd1	b5 a0		lda $a0,x			lda 	esInt1,x 				; data record + 5
.3cd3	85 2d		sta $2d				sta 	temp1+1
.3cd5	a0 01		ldy #$01			ldy 	#1 						; get the MSB of the address of string currently stored there.
.3cd7	b1 2c		lda ($2c),y			lda 	(temp1),y
.3cd9	c5 34		cmp $34				cmp 	highMemory+1 			; if < high memory then it cannot be something stored
.3cdb	90 1b		bcc $3cf8			bcc 	_COCFail 				; in hard memory.
.3cdd	a0 00		ldy #$00			ldy 	#0 						; copy target address - 1 into temp2
.3cdf	b1 2c		lda ($2c),y			lda 	(temp1),y 				; when allocating hard memory, the overall size is
.3ce1	e9 01		sbc #$01			sbc 	#1 						; in the previous byte.
.3ce3	85 2e		sta $2e				sta 	temp2
.3ce5	c8		iny				iny
.3ce6	b1 2c		lda ($2c),y			lda 	(temp1),y
.3ce8	e9 00		sbc #$00			sbc 	#0
.3cea	85 2f		sta $2f				sta 	temp2+1
.3cec	a0 00		ldy #$00			ldy 	#0 						; how large is this physical chunk.
.3cee	b1 2e		lda ($2e),y			lda 	(temp2),y
.3cf0	38		sec				sec  							; maximum character capacity.
.3cf1	e9 02		sbc #$02			sbc 	#2
.3cf3	cd 03 0d	cmp $0d03			cmp 	srcStrLen 				; if >= the required length
.3cf6	b0 02		bcs $3cfa			bcs 	_COCCanReuse
.3cf8					_COCFail:
.3cf8	18		clc				clc
.3cf9	60		rts				rts
.3cfa					_COCCanReuse:
.3cfa	38		sec				sec
.3cfb	60		rts				rts
.3cfc					RequiresConcretion:
.3cfc	a5 2b		lda $2b				lda 	temp0+1 				; get MSB of address of string to be written
.3cfe	c5 34		cmp $34				cmp 	highMemory+1 			; if >= high memory it is concreted
.3d00	b0 0a		bcs $3d0c			bcs 	_RCSucceed 				; so it needs concreting again - duplication.
.3d02	a5 3a		lda $3a				lda 	softMemAlloc+1 			; have we allocated any soft memory yet ?
.3d04	f0 08		beq $3d0e			beq 	_RCFail 				; if not, this cannot be soft memory.
.3d06	a5 2b		lda $2b				lda 	temp0+1 				; get MSB of address of string to be written
.3d08	c5 3a		cmp $3a				cmp 	softMemAlloc+1 			; if >= soft mem alloc it is either soft
.3d0a	90 02		bcc $3d0e			bcc 	_RCFail 				; so concreting
.3d0c					_RCSucceed:
.3d0c	38		sec				sec
.3d0d	60		rts				rts
.3d0e					_RCFail:
.3d0e	18		clc				clc
.3d0f	60		rts				rts
.3d10					AllocateHardMemory:
.3d10	98		tya				tya
.3d11	48		pha				pha
.3d12	ad 03 0d	lda $0d03			lda 	srcStrLen 				; characters in string
.3d15	69 0a		adc #$0a			adc 	#1+1+8 					; one for hard memory size, one for string size, extra for expansion
.3d17	b0 04		bcs $3d1d			bcs 	_AHMSetMax 				; max out that amount.
.3d19	c9 fe		cmp #$fe			cmp 	#MaxStringSize+2
.3d1b	90 02		bcc $3d1f			bcc 	_AHMIsOkay
.3d1d					_AHMSetMax:
.3d1d	a9 fe		lda #$fe			lda 	#MaxStringSize+2
.3d1f					_AHMIsOkay:
.3d1f	48		pha				pha	 							; save size to be allocated
.3d20	49 ff		eor #$ff			eor 	#$FF 					; complement and add to high Memory
.3d22	38		sec				sec  							; and copy result to TOS as target address.
.3d23	65 33		adc $33				adc 	highMemory
.3d25	85 33		sta $33				sta 	highMemory
.3d27	a5 34		lda $34				lda 	highMemory+1
.3d29	69 ff		adc #$ff			adc 	#$FF
.3d2b	85 34		sta $34				sta 	highMemory+1
.3d2d	a0 00		ldy #$00			ldy 	#0 						; Y = 0
.3d2f	68		pla				pla 							; get the total size of the storage block
.3d30	91 33		sta ($33),y			sta 	(highMemory),y 			; and set it
.3d32	18		clc				clc
.3d33	a5 33		lda $33				lda		highMemory 				; point the target address to the byte after this.
.3d35	69 01		adc #$01			adc 	#1
.3d37	91 2c		sta ($2c),y			sta 	(temp1),y
.3d39	a5 34		lda $34				lda 	highMemory+1
.3d3b	69 00		adc #$00			adc 	#0
.3d3d	c8		iny				iny
.3d3e	91 2c		sta ($2c),y			sta 	(temp1),y
.3d40	68		pla				pla
.3d41	a8		tay				tay
.3d42	60		rts				rts
.3d43					CopyStringToHardMemory:
.3d43	98		tya				tya
.3d44	48		pha				pha
.3d45	a0 00		ldy #$00			ldy 	#0 						; copy target address to temp2
.3d47	b1 2c		lda ($2c),y			lda 	(temp1),y
.3d49	85 2e		sta $2e				sta 	temp2
.3d4b	c8		iny				iny
.3d4c	b1 2c		lda ($2c),y			lda 	(temp1),y
.3d4e	85 2f		sta $2f				sta 	temp2+1
.3d50	ac 03 0d	ldy $0d03			ldy 	srcStrLen 				; copy this + 1 characters, (length too) hence $FF compare
.3d53					_CSTHMLoop:
.3d53	b1 2a		lda ($2a),y			lda 	(temp0),y
.3d55	91 2e		sta ($2e),y			sta 	(temp2),y
.3d57	88		dey				dey
.3d58	c0 ff		cpy #$ff			cpy 	#$FF 					; this does the +1
.3d5a	d0 f7		bne $3d53			bne 	_CSTHMLoop
.3d5c	68		pla				pla
.3d5d	a8		tay				tay
.3d5e	60		rts				rts
.3d5f					CheckSpecialConcretion:
.3d5f	ad 03 0d	lda $0d03			lda 	srcStrLen 				; check string is null e.g. length = 0
.3d62	f0 02		beq $3d66			beq 	_CSCNullString
.3d64	18		clc				clc
.3d65	60		rts				rts
.3d66					_CSCNullString:
.3d66	a9 00		lda #$00			lda 	#0 						; by always returning this address we don't waste
.3d68	8d ce 0a	sta $0ace			sta 	NullString		 		; storage on null strings.
.3d6b	a9 ce		lda #$ce			lda 	#(NullString) & $FF
.3d6d	85 2a		sta $2a				sta 	temp0
.3d6f	a9 0a		lda #$0a			lda 	#(NullString) >> 8
.3d71	85 2b		sta $2b				sta 	1+(temp0)
.3d73	38		sec				sec
.3d74	60		rts				rts

;******  Return to file: string/string.asm

.3d75					stringHandler:
.3d75	7c 78 3d	jmp ($3d78,x)			jmp 	(stringVectors,x)
.3d78					stringVectors:
>3d78	8a 3d					.word _DummyControlHandler ; index 0
>3d7a	d8 3a					.word StringChrs           ; index 2
>3d7c	d4 3b					.word StrClone             ; index 4
>3d7e	4c 3b					.word StringConcat         ; index 6
>3d80	e7 3a					.word StringNull           ; index 8
>3d82	03 3b					.word STRCompare           ; index 10
>3d84	fa 3b					.word CaseString           ; index 12
>3d86	3f 3c					.word StringSubstring      ; index 14
>3d88	93 3c					.word StringWrite          ; index 16
.3d8a					_DummyControlHandler:
.3d8a	60		rts			rts

;******  Return to file: basic.asm

.3d8b					section_end_string:
.3d8b					section_start_tokeniser:

;******  Processing file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/detokenise/detokenise.asm

.0d04					deTokeniseVector:
>0d04							.fill 	2
.0d06					lastCharacterClass:
>0d06							.fill 	1
.0d07					indent:
>0d07							.fill 	1
.3d8b					ListLine:
.3d8b	48		pha				pha								; enter here to list to console. sets the output vector
.3d8c	a9 c3		lda #$c3			lda 	#(deTokenPrint) & $FF
.3d8e	8d 04 0d	sta $0d04			sta 	deTokeniseVector
.3d91	a9 3e		lda #$3e			lda 	#(deTokenPrint) >> 8
.3d93	8d 05 0d	sta $0d05			sta 	1+(deTokeniseVector)
.3d96	68		pla				pla
.3d97					Detokenise:
.3d97	18		clc				clc 							; space required for line number.
.3d98	69 06		adc #$06			adc 	#6
.3d9a	8d 07 0d	sta $0d07			sta 	indent
.3d9d	a9 ff		lda #$ff			lda 	#$FF 					; last thing printed is a dummy value.
.3d9f	8d 06 0d	sta $0d06			sta 	lastCharacterClass
.3da2	a2 02		ldx #$02			ldx 	#2
.3da4	a9 00		lda #$00			lda 	#0 						; clear upper two bytes
.3da6	95 a8		sta $a8,x			sta 	esInt2,x
.3da8	95 b0		sta $b0,x			sta 	esInt3,x
.3daa	a0 01		ldy #$01			ldy 	#1 						; copy line number to stack,2 (as using stack 0,1 for list range)
.3dac	b1 28		lda ($28),y			lda 	(codePtr),y
.3dae	95 98		sta $98,x			sta 	esInt0,x
.3db0	c8		iny				iny
.3db1	b1 28		lda ($28),y			lda 	(codePtr),y
.3db3	95 a0		sta $a0,x			sta 	esInt1,x
.3db5	a9 84		lda #$84			lda 	#LTYLineNumber
.3db7	20 9e 3e	jsr $3e9e			jsr 	ListOutputCharacter
.3dba	a9 0a		lda #$0a			lda 	#10 					; base 10
.3dbc	20 62 3e	jsr $3e62			jsr 	DTPrintInteger 			; print as integer.
.3dbf	a0 00		ldy #$00			ldy 	#0 						; get length
.3dc1	b1 2a		lda ($2a),y			lda 	(temp0),y 				; into X
.3dc3	aa		tax				tax
.3dc4					_DTPadOut:
.3dc4	a9 20		lda #$20			lda 	#" " 					; pad out to indent.
.3dc6	20 9e 3e	jsr $3e9e			jsr 	ListOutputCharacter
.3dc9	e8		inx				inx
.3dca	ec 07 0d	cpx $0d07			cpx 	indent
.3dcd	d0 f5		bne $3dc4			bne 	_DTPadOut
.3dcf	a0 03		ldy #$03			ldy 	#3 						; start position.
.3dd1					_DTListLoop:
.3dd1	b1 28		lda ($28),y			lda 	(codePtr),y
.3dd3	c9 85		cmp #$85			cmp 	#TOK_STR 				; Inline string.
.3dd5	f0 5e		beq $3e35			beq 	_DTIsString
.3dd7	c9 84		cmp #$84			cmp 	#TOK_FPC 				; Floating point
.3dd9	f0 56		beq $3e31			beq 	_DTIsFloat
.3ddb	c9 c5		cmp #$c5			cmp 	#TKW_AMP 				; & hex marker
.3ddd	f0 16		beq $3df5			beq 	_DTHexConstant
.3ddf	c9 80		cmp #$80			cmp 	#TOK_EOL 				; End of Line
.3de1	d0 06		bne $3de9			bne 	_DTNotEnd
.3de3	a9 ff		lda #$ff			lda 	#255 					; print CR
.3de5	20 9e 3e	jsr $3e9e			jsr 	ListOutputCharacter
.3de8	60		rts				rts
.3de9					_DTNotEnd:
.3de9	c9 00		cmp #$00			cmp 	#0
.3deb	30 38		bmi $3e25			bmi 	_DTIsToken
.3ded	c9 40		cmp #$40			cmp 	#$40
.3def	90 3a		bcc $3e2b			bcc 	_DTIsIdentifier
.3df1	a9 0a		lda #$0a			lda 	#10 					; this is the base, unsigned decimal
.3df3	d0 0d		bne $3e02			bne 	_DTConstant
.3df5					_DTHexConstant:
.3df5	a9 26		lda #$26			lda 	#"&"
.3df7	20 9e 3e	jsr $3e9e			jsr 	ListOutputCharacter
.3dfa	c8		iny				iny
.3dfb	a9 01		lda #$01			lda 	#1 						; switch to spaces so &xxxx is treated like a number.
.3dfd	20 df 3e	jsr $3edf			jsr 	DTSwitchMode
.3e00	a9 10		lda #$10			lda 	#16						; print line unsigned hex
.3e02					_DTConstant:
.3e02	48		pha				pha
.3e03	a9 00		lda #$00			lda 	#0 						; now constant, may need spaces
.3e05	20 df 3e	jsr $3edf			jsr 	DTSwitchMode
.3e08	a9 86		lda #$86			lda 	#LTYConstant
.3e0a	20 9e 3e	jsr $3e9e			jsr 	ListOutputCharacter
.3e0d	a2 02		ldx #$02			ldx 	#2 						; get its value
.3e0f	8a		txa				txa
.3e10	a2 10		ldx #$10		ldx	#16
.3e12	20 b8 3a	jsr $3ab8		jsr	mainHandler
.3e15	aa		tax				tax
.3e16	68		pla				pla 							; get base back
.3e17	85 32		sta $32				sta 	tempShort
.3e19	98		tya				tya
.3e1a	48		pha				pha
.3e1b	a5 32		lda $32				lda 	tempShort 				; print in base A stck level X
.3e1d	20 62 3e	jsr $3e62			jsr 	DTPrintInteger
.3e20	68		pla				pla
.3e21	a8		tay				tay
.3e22	4c d1 3d	jmp $3dd1			jmp 	_DTListLoop
.3e25					_DTIsToken:
.3e25	20 38 3f	jsr $3f38			jsr 	DTDecodeToken
.3e28	4c d1 3d	jmp $3dd1			jmp 	_DTListLoop
.3e2b					_DTIsIdentifier:
.3e2b	20 f1 3e	jsr $3ef1			jsr 	DTIdentifier
.3e2e	4c d1 3d	jmp $3dd1			jmp 	_DTListLoop
.3e31					_DTIsFloat:
>3e31	db						.byte 	$DB
.3e32	4c 31 3e	jmp $3e31			jmp 	_DTIsFloat
.3e35					_DTIsString:
.3e35	a9 01		lda #$01			lda 	#1 							; now punctuation, may need spaces
.3e37	20 df 3e	jsr $3edf			jsr 	DTSwitchMode
.3e3a	a9 81		lda #$81			lda 	#LTYString
.3e3c	20 9e 3e	jsr $3e9e			jsr 	ListOutputCharacter
.3e3f	a9 22		lda #$22			lda 	#'"'						; open quote
.3e41	20 9e 3e	jsr $3e9e			jsr 	ListOutputCharacter
.3e44	a2 02		ldx #$02			ldx 	#2 							; evaluate string to TOS2.
.3e46	8a		txa				txa
.3e47	a2 10		ldx #$10		ldx	#16
.3e49	20 b8 3a	jsr $3ab8		jsr	mainHandler
.3e4c	aa		tax				tax
.3e4d	b5 98		lda $98,x			lda 	esInt0,x 					; copy string address to temp0
.3e4f	85 2a		sta $2a				sta 	temp0
.3e51	b5 a0		lda $a0,x			lda 	esInt1,x
.3e53	85 2b		sta $2b				sta 	temp0+1
.3e55	a9 00		lda #$00			lda 	#0 							; don't capitalise.
.3e57	20 74 3e	jsr $3e74			jsr 	DTPrintLengthPrefix
.3e5a	a9 22		lda #$22			lda 	#'"'
.3e5c	20 9e 3e	jsr $3e9e			jsr 	ListOutputCharacter
.3e5f	4c d1 3d	jmp $3dd1			jmp 	_DTListLoop

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/detokenise/dtprint.asm

.0d08					tPrintCount:
>0d08							.fill 	1
.3e62					DTPrintInteger:
.3e62	48		pha				pha									; save base
.3e63	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.3e65	85 2a		sta $2a				sta 	temp0
.3e67	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.3e69	85 2b		sta $2b				sta 	1+(temp0)
.3e6b	68		pla				pla
.3e6c	a8		tay				tay
.3e6d	8a		txa				txa
.3e6e	a2 12		ldx #$12		ldx	#18
.3e70	20 b8 3a	jsr $3ab8		jsr	mainHandler
.3e73	aa		tax				tax 								; then drop through here.
.3e74					DTPrintLengthPrefix:
.3e74	aa		tax				tax 								; A = 0 = don't case convert.
.3e75	98		tya				tya
.3e76	48		pha				pha
.3e77	a0 00		ldy #$00			ldy 	#0 							; get string length = chars to print.
.3e79	b1 2a		lda ($2a),y			lda 	(temp0),y
.3e7b	8d 08 0d	sta $0d08			sta 	tPrintCount
.3e7e	f0 1b		beq $3e9b			beq 	_DTPLPExit 					; empty string
.3e80					_DTPLPLoop:
.3e80	c8		iny				iny 								; get next.
.3e81	b1 2a		lda ($2a),y			lda 	(temp0),y
.3e83	29 7f		and #$7f			and 	#$7F
.3e85	e0 00		cpx #$00			cpx 	#0 							; skip if not case converting
.3e87	f0 0a		beq $3e93			beq 	_DTPLPNoCase
.3e89	c9 41		cmp #$41			cmp 	#"A" 						; if converting UC -> LC
.3e8b	90 06		bcc $3e93			bcc 	_DTPLPNoCase
.3e8d	c9 5b		cmp #$5b			cmp 	#"Z"+1
.3e8f	b0 02		bcs $3e93			bcs 	_DTPLPNoCase
.3e91	49 20		eor #$20			eor 	#"A"^"a"
.3e93					_DTPLPNoCase
.3e93	20 9e 3e	jsr $3e9e			jsr 	ListOutputCharacter 		; call handler
.3e96	ce 08 0d	dec $0d08			dec 	tPrintCount 				; do all the characters
.3e99	d0 e5		bne $3e80			bne 	_DTPLPLoop
.3e9b					_DTPLPExit:
.3e9b	68		pla				pla
.3e9c	a8		tay				tay
.3e9d	60		rts				rts
.3e9e					ListOutputCharacter:
.3e9e	85 32		sta $32				sta 	tempShort
.3ea0	48		pha				pha
.3ea1	8a		txa				txa
.3ea2	48		pha				pha
.3ea3	98		tya				tya
.3ea4	48		pha				pha
.3ea5	a5 32		lda $32				lda 	tempShort 					; convert ASCII 6 bit (0-31) to 7 bit.
.3ea7	c9 20		cmp #$20			cmp 	#32
.3ea9	b0 0c		bcs $3eb7			bcs		_LOCHiBit
.3eab	09 40		ora #$40			ora 	#64 						; conversion
.3ead	c9 40		cmp #$40			cmp 	#64							; make l/c
.3eaf	f0 06		beq $3eb7			beq 	_LOCHiBit
.3eb1	c9 5b		cmp #$5b			cmp 	#65+26
.3eb3	b0 02		bcs $3eb7			bcs 	_LOCHiBit
.3eb5	69 20		adc #$20			adc 	#32
.3eb7					_LOCHiBit:
.3eb7	20 c0 3e	jsr $3ec0			jsr 	_LOCCallVector				; call o/p handler routine
.3eba	68		pla				pla
.3ebb	a8		tay				tay
.3ebc	68		pla				pla
.3ebd	aa		tax				tax
.3ebe	68		pla				pla
.3ebf					_LOCExit:
.3ebf	60		rts				rts
.3ec0					_LOCCallVector:
.3ec0	6c 04 0d	jmp ($0d04)			jmp 	(deTokeniseVector)
.3ec3					deTokenPrint:
.3ec3	c9 00		cmp #$00			cmp 	#0 							; if bit 7 sets ink colour
.3ec5	30 06		bmi $3ecd			bmi 	_dtpInk
.3ec7	a2 16		ldx #$16		ldx	#22
.3ec9	20 f6 14	jsr $14f6		jsr	deviceHandler
.3ecc	60		rts				rts
.3ecd	c9 ff		cmp #$ff	_dtpInk:cmp 	#255 						; e.g. herhe, get ink and set it
.3ecf	f0 08		beq $3ed9			beq 	_dtpCR						; except $FF => CRLF
.3ed1	29 07		and #$07			and 	#7
.3ed3	a2 08		ldx #$08		ldx	#8
.3ed5	20 f6 14	jsr $14f6		jsr	deviceHandler
.3ed8	60		rts				rts
.3ed9					_dtpCR:
.3ed9	a2 06		ldx #$06		ldx	#6
.3edb	20 f6 14	jsr $14f6		jsr	deviceHandler
.3ede	60		rts				rts
.3edf					DTSwitchMode:
.3edf	cd 06 0d	cmp $0d06			cmp 	LastCharacterClass 			; if changed, update character class
.3ee2	f0 04		beq $3ee8			beq 	_DTSMNoChange
.3ee4	8d 06 0d	sta $0d06			sta 	LastCharacterClass
.3ee7					_DTSMExit:
.3ee7	60		rts				rts
.3ee8					_DTSMNoChange:
.3ee8	c9 01		cmp #$01			cmp 	#1 							; if didn't change to punctuation, two identifiers so we
.3eea	f0 fb		beq $3ee7			beq 	_DTSMExit 					; need a space.
.3eec	a9 20		lda #$20			lda 	#" "
.3eee	4c 9e 3e	jmp $3e9e			jmp 	ListOutputCharacter

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/detokenise/identifier.asm

.3ef1					DTIdentifier:
.3ef1	a9 00		lda #$00			lda 	#0 							; now text, may need spaces
.3ef3	20 df 3e	jsr $3edf			jsr 	DTSwitchMode
.3ef6	a9 87		lda #$87			lda 	#LTYIdentifier
.3ef8	20 9e 3e	jsr $3e9e			jsr 	ListOutputCharacter
.3efb					_DTILoop:
.3efb	b1 28		lda ($28),y			lda 	(codePtr),y 				; output main bit of identifier.
.3efd	c9 2d		cmp #$2d			cmp 	#"-"						; make - back to _
.3eff	d0 02		bne $3f03			bne 	_DTINotUS
.3f01	a9 5f		lda #$5f			lda 	#"_"
.3f03					_DTINotUS:
.3f03	20 9e 3e	jsr $3e9e			jsr 	ListOutputCharacter
.3f06	c8		iny				iny
.3f07	b1 28		lda ($28),y			lda 	(codePtr),y 				; until end identifier marker.
.3f09	c9 3a		cmp #$3a			cmp 	#$3A
.3f0b	90 ee		bcc $3efb			bcc 	_DTILoop
.3f0d	c8		iny				iny
.3f0e	c9 3a		cmp #$3a			cmp 	#$3A 						; is it integer non array
.3f10	f0 25		beq $3f37			beq 	_DTIExit 					; no postfix.
.3f12	48		pha				pha
.3f13	a9 01		lda #$01			lda  	#1 							; it ends in punctuation
.3f15	8d 06 0d	sta $0d06			sta 	LastCharacterClass
.3f18	a9 82		lda #$82			lda 	#LTYPunctuation
.3f1a	20 9e 3e	jsr $3e9e			jsr 	ListOutputCharacter
.3f1d	68		pla				pla
.3f1e	c9 3b		cmp #$3b			cmp 	#$3B
.3f20	f0 10		beq $3f32			beq 	_DTIArray
.3f22	4a		lsr a				lsr 	a 							; array flag in C
.3f23	08		php				php
.3f24	49 1e		eor #$1e			eor 	#$3C/2 						; check if $
.3f26	f0 02		beq $3f2a			beq 	_DTIDollar
.3f28	a9 07		lda #$07			lda 	#"$"^"#" 					; this if #, 0 if $
.3f2a					_DTIDollar:
.3f2a	49 24		eor #$24			eor 	#"$"
.3f2c	20 9e 3e	jsr $3e9e			jsr 	ListOutputCharacter
.3f2f	28		plp				plp
.3f30	90 05		bcc $3f37			bcc 	_DTIExit
.3f32					_DTIArray:
.3f32	a9 28		lda #$28			lda 	#"("
.3f34	20 9e 3e	jsr $3e9e			jsr 	ListOutputCharacter
.3f37					_DTIExit:
.3f37	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/detokenise/token.asm

.3f38					DTDecodeToken:
.3f38	a2 00		ldx #$00			ldx 	#0 							; table number to use
.3f3a	b1 28		lda ($28),y			lda 	(codePtr),y
.3f3c	c9 84		cmp #$84			cmp 	#$84
.3f3e	b0 05		bcs $3f45			bcs 	_DTNotShift
.3f40	29 03		and #$03			and 	#3 							; get the shift 1..3
.3f42	0a		asl a				asl 	a 							; put 2 x in X
.3f43	aa		tax				tax
.3f44	c8		iny				iny
.3f45					_DTNotShift:
.3f45	bd 47 42	lda $4247,x			lda 	TokenTableAddress,x 		; get the token table to use to decode it.
.3f48	85 2a		sta $2a				sta 	temp0 						; point into temp0
.3f4a	bd 48 42	lda $4248,x			lda 	TokenTableAddress+1,x
.3f4d	85 2b		sta $2b				sta 	temp0+1
.3f4f	b1 28		lda ($28),y			lda 	(codePtr),y 				; get the token value.
.3f51	c8		iny				iny 								; consume it.
.3f52	aa		tax				tax
.3f53	98		tya				tya
.3f54	48		pha				pha
.3f55					_DTFindText:
.3f55	e0 86		cpx #$86			cpx 	#$86 						; finished ?
.3f57	f0 11		beq $3f6a			beq 	_DTFoundText
.3f59	ca		dex				dex
.3f5a	a0 00		ldy #$00			ldy 	#0 							; add length+1 to temp0
.3f5c	38		sec				sec
.3f5d	b1 2a		lda ($2a),y			lda 	(temp0),y
.3f5f	65 2a		adc $2a				adc 	temp0
.3f61	85 2a		sta $2a				sta 	temp0
.3f63	90 f0		bcc $3f55			bcc 	_DTFindText
.3f65	e6 2b		inc $2b				inc 	temp0+1
.3f67	4c 55 3f	jmp $3f55			jmp 	_DTFindText
.3f6a					_DTFoundText:
.3f6a	a0 01		ldy #$01			ldy 	#1 							; get first character
.3f6c	b1 2a		lda ($2a),y			lda 	(temp0),y
.3f6e	29 7f		and #$7f			and 	#$7F 						; will have bit 7 set.
.3f70	c9 41		cmp #$41			cmp 	#"A" 						; check for punctuation.
.3f72	90 11		bcc $3f85			bcc 	_DTIsPunctuation
.3f74	c9 5b		cmp #$5b			cmp 	#"Z"+1
.3f76	b0 0d		bcs $3f85			bcs 	_DTIsPunctuation
.3f78	a9 00		lda #$00			lda 	#0 							; now text, may need spaces
.3f7a	20 df 3e	jsr $3edf			jsr 	DTSwitchMode
.3f7d	a9 83		lda #$83			lda 	#LTYKeyword
.3f7f	20 9e 3e	jsr $3e9e			jsr 	ListOutputCharacter
.3f82	4c 8f 3f	jmp $3f8f			jmp 	_DTPrint
.3f85					_DTIsPunctuation:
.3f85	a9 01		lda #$01			lda 	#1 							; now punctuation, may need spaces
.3f87	20 df 3e	jsr $3edf			jsr 	DTSwitchMode
.3f8a	a9 82		lda #$82			lda 	#LTYPunctuation
.3f8c	20 9e 3e	jsr $3e9e			jsr 	ListOutputCharacter
.3f8f					_DTPrint:
.3f8f	a9 01		lda #$01			lda 	#1 							; fix case.
.3f91	20 74 3e	jsr $3e74			jsr 	DTPrintLengthPrefix 		; print it out.
.3f94	a0 00		ldy #$00			ldy 	#0
.3f96	b1 2a		lda ($2a),y			lda 	(temp0),y
.3f98	a8		tay				tay
.3f99	b1 2a		lda ($2a),y			lda 	(temp0),y
.3f9b	29 7f		and #$7f			and 	#$7F 						; will have bit 7 set.
.3f9d	c9 41		cmp #$41			cmp 	#"A" 						; check for punctuation.
.3f9f	90 04		bcc $3fa5			bcc 	_DTIsNowPunctuation
.3fa1	c9 5b		cmp #$5b			cmp 	#"Z"+1
.3fa3	90 05		bcc $3faa			bcc 	_DTPExit
.3fa5					_DTIsNowPunctuation:
.3fa5	a9 01		lda #$01			lda 	#1
.3fa7	8d 06 0d	sta $0d06			sta		LastCharacterClass
.3faa					_DTPExit:
.3faa	68		pla				pla
.3fab	a8		tay				tay
.3fac	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/search.asm

.0d09					currentSet:
>0d09							.fill 	1
.3fad					TokenSearch:
.3fad	8a		txa				txa
.3fae	48		pha				pha
.3faf	98		tya				tya
.3fb0	48		pha				pha
.3fb1	a9 00		lda #$00			lda 	#0
.3fb3	8d 09 0d	sta $0d09			sta 	currentSet
.3fb6					_TSLoop:
.3fb6	ad 09 0d	lda $0d09			lda 	currentSet 					; 2 x currentset in X
.3fb9	0a		asl a				asl 	a
.3fba	aa		tax				tax
.3fbb	bd 47 42	lda $4247,x			lda 	TokenTableAddress,x 		; set temp0 to the table address
.3fbe	85 2a		sta $2a				sta 	temp0
.3fc0	bd 48 42	lda $4248,x			lda 	TokenTableAddress+1,x
.3fc3	85 2b		sta $2b				sta 	temp0+1
.3fc5	20 ec 3f	jsr $3fec			jsr 	TokenSearchOne 				; search one table
.3fc8	b0 0d		bcs $3fd7			bcs 	_TSFound 					; found a token.
.3fca	ee 09 0d	inc $0d09			inc 	currentSet 					; next set
.3fcd	ad 09 0d	lda $0d09			lda 	currentSet
.3fd0	c9 04		cmp #$04			cmp 	#4
.3fd2	d0 e2		bne $3fb6			bne 	_TSLoop 					; back if not done all four.
.3fd4	18		clc				clc 								; clear carry and exit
.3fd5	90 10		bcc $3fe7			bcc 	_TSExit
.3fd7					_TSFound:
.3fd7	48		pha				pha 								; save token
.3fd8	ad 09 0d	lda $0d09			lda 	currentSet					; if set zero no shift
.3fdb	f0 05		beq $3fe2			beq 	_TSNoShift
.3fdd	09 80		ora #$80			ora 	#$80 						; Write as $81-$83
.3fdf	20 9d 40	jsr $409d			jsr 	TokenWrite
.3fe2					_TSNoShift:
.3fe2	68		pla				pla 								; get token back
.3fe3	20 9d 40	jsr $409d			jsr 	TokenWrite 					; write it
.3fe6	38		sec				sec 								; carry set indicating success
.3fe7					_TSExit:
.3fe7	68		pla				pla
.3fe8	a8		tay				tay
.3fe9	68		pla				pla
.3fea	aa		tax				tax
.3feb	60		rts				rts
.3fec					TokenSearchOne:
.3fec	a2 86		ldx #$86			ldx 	#$86 						; current token being tested.
.3fee					_TSOLoop:
.3fee	a0 00		ldy #$00			ldy 	#0
.3ff0	b1 2a		lda ($2a),y			lda 	(temp0),y 					; get length of token
.3ff2	f0 26		beq $401a			beq 	_TSOFail 					; if zero, end of table
.3ff4	cd cf 0a	cmp $0acf			cmp 	convertBuffer 				; length is the same, compare the text matches.
.3ff7	f0 11		beq $400a			beq 	_TSOCheckText
.3ff9					_TSONext:
.3ff9	e8		inx				inx 								; bump token
.3ffa	a0 00		ldy #$00			ldy 	#0							; get length
.3ffc	b1 2a		lda ($2a),y			lda 	(temp0),y
.3ffe	38		sec				sec
.3fff	65 2a		adc $2a				adc 	temp0 						; add to temp0 + 1
.4001	85 2a		sta $2a				sta 	temp0
.4003	90 e9		bcc $3fee			bcc 	_TSOLoop
.4005	e6 2b		inc $2b				inc 	temp0+1
.4007	4c ee 3f	jmp $3fee			jmp 	_TSOLoop
.400a					_TSOCheckText:
.400a	a8		tay				tay 								; compare length downto 1.
.400b					_TSOCheckLoop:
.400b	b1 2a		lda ($2a),y			lda 	(temp0),y 					; use EOR to compare
.400d	59 cf 0a	eor $0acf,y			eor 	convertBuffer,y
.4010	29 7f		and #$7f			and 	#$7F 						; ignore bit 7
.4012	d0 e5		bne $3ff9			bne 	_TSONext 					; different goto next.
.4014	88		dey				dey 								; do all
.4015	d0 f4		bne $400b			bne 	_TSOCheckLoop
.4017	8a		txa				txa 								; return token in A and carry set
.4018	38		sec				sec
.4019	60		rts				rts
.401a					_TSOFail:
.401a	18		clc				clc
.401b	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/test.asm

.401c					TokTest:
.401c	a2 ff		ldx #$ff				ldx 	#$FF
.401e	9a		txs					txs
.401f	a9 3c		lda #$3c			lda 	#(TokenText1) & $FF
.4021	85 28		sta $28				sta 	codePtr
.4023	a9 40		lda #$40			lda 	#(TokenText1) >> 8
.4025	85 29		sta $29				sta 	1+(codePtr)
.4027	20 3c 40	jsr $403c				jsr 	Tokenise
.402a	a2 00		ldx #$00	TokStop:	ldx 	#0 					; compare vs precalculated result
.402c	bd 3c 40	lda $403c,x	_TokCheck:	lda 	TokenBytes1,x
.402f	dd 0d 0d	cmp $0d0d,x				cmp 	tokenBuffer,x
.4032	d0 fe		bne $4032	_TokFail:	bne 	_TokFail	 		; error.
.4034	e8		inx					inx
.4035	c9 80		cmp #$80				cmp 	#$80
.4037	d0 f3		bne $402c				bne 	_TokCheck
.4039	4c ff ff	jmp $ffff				jmp 	$FFFF 				; successfully tokenised then quit.

;******  Processing file: tokeniser/tokenise/../../generated/toktest.inc

.403c					TokenText1:
.403c					TokenBytes1:

;******  Return to file: tokeniser/tokenise/test.asm


;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokenise.asm

.0d0a					tokenHeader:
>0d0a							.fill 	3
.0d0d					tokenBuffer:
>0d0d							.fill 	256
.0e0d					tokenBufferIndex:
>0e0d							.fill 	1
.403c					Tokenise:
.403c	20 b6 40	jsr $40b6			jsr 	TokeniseMakeASCIIZ 			; convert to ASCIIZ string.
.403f					TokeniseASCIIZ:
.403f	20 c7 40	jsr $40c7			jsr 	TokeniseFixCase 			; remove controls and lower case outside quotes.
.4042	a9 00		lda #$00			lda 	#0 							; reset the token buffer index
.4044	8d 0d 0e	sta $0e0d			sta 	tokenBufferIndex
.4047	a8		tay				tay 								; start pointer
.4048	a9 80		lda #$80			lda 	#$80 						; empty token buffer ($80 ends it)
.404a	8d 0d 0d	sta $0d0d			sta 	tokenBuffer
.404d					_TokLoop:
.404d	b1 28		lda ($28),y			lda 	(codePtr),y 				; get next character
.404f	f0 46		beq $4097			beq 	_TokExit 					; if zero, then exit.
.4051	c8		iny				iny 								; skip over spaces.
.4052	c9 20		cmp #$20			cmp 	#" "
.4054	f0 f7		beq $404d			beq 	_TokLoop
.4056	88		dey				dey 								; point back to character.
.4057	c9 26		cmp #$26			cmp 	#"&"						; Hexadecimal constant.
.4059	f0 18		beq $4073			beq 	_TokHexConst
.405b	c9 22		cmp #$22			cmp 	#'"'						; Quoted String
.405d	f0 23		beq $4082			beq 	_TokQString
.405f	c9 5b		cmp #$5b			cmp 	#"Z"+1 						; > 'Z' is punctuation
.4061	b0 26		bcs $4089			bcs 	_TokPunctuation
.4063	c9 41		cmp #$41			cmp 	#"A" 						; A..Z identifier
.4065	b0 29		bcs $4090			bcs 	_TokIdentifier
.4067	c9 3a		cmp #$3a			cmp 	#"9"+1
.4069	b0 1e		bcs $4089			bcs 	_TokPunctuation 			; between 9 and A exclusive, punctuation
.406b	c9 30		cmp #$30			cmp 	#"0"
.406d	90 1a		bcc $4089			bcc 	_TokPunctuation 			; < 0, punctuation.
.406f	a9 0a		lda #$0a			lda 	#10  						; 0..9 constant in base 10.
.4071	d0 08		bne $407b			bne 	_TokConst
.4073					_TokHexConst:
.4073	c8		iny				iny									; consume token.
.4074	a9 c5		lda #$c5			lda 	#TKW_AMP 					; Write ampersand token out
.4076	20 9d 40	jsr $409d			jsr 	TokenWrite
.4079	a9 10		lda #$10			lda 	#16
.407b					_TokConst:
.407b	20 85 41	jsr $4185			jsr 	TokeniseInteger
.407e	b0 cd		bcs $404d			bcs 	_TokLoop
.4080	90 18		bcc $409a			bcc 	_TokFail
.4082					_TokQString:
.4082	20 1b 42	jsr $421b			jsr 	TokeniseString
.4085	b0 c6		bcs $404d			bcs 	_TokLoop
.4087	90 11		bcc $409a			bcc 	_TokFail
.4089					_TokPunctuation:
.4089	20 fa 41	jsr $41fa			jsr 	TokenisePunctuation
.408c	b0 bf		bcs $404d			bcs 	_TokLoop
.408e	90 0a		bcc $409a			bcc 	_TokFail
.4090					_TokIdentifier:
.4090	20 f6 40	jsr $40f6			jsr 	TokeniseIdentifier
.4093	b0 b8		bcs $404d			bcs 	_TokLoop
.4095	90 03		bcc $409a			bcc 	_TokFail
.4097					_TokExit:
.4097	a9 01		lda #$01			lda 	#1
.4099	60		rts				rts
.409a					_TokFail:
.409a	a9 00		lda #$00			lda 	#0
.409c	60		rts				rts
.409d					TokenWrite:
.409d	85 32		sta $32				sta 	tempShort 					; save XA
.409f	48		pha				pha
.40a0	8a		txa				txa
.40a1	48		pha				pha
.40a2	a5 32		lda $32				lda 	tempShort
.40a4	ae 0d 0e	ldx $0e0d			ldx 	tokenBufferIndex 			; geet index
.40a7	9d 0d 0d	sta $0d0d,x			sta 	tokenBuffer,x 				; write byte to buffer
.40aa	a9 80		lda #$80			lda 	#TOK_EOL 					; pre-emptively write EOL marker after
.40ac	9d 0e 0d	sta $0d0e,x			sta 	tokenBuffer+1,x
.40af	ee 0d 0e	inc $0e0d			inc 	tokenBufferIndex 			; bump index
.40b2	68		pla				pla
.40b3	aa		tax				tax
.40b4	68		pla				pla
.40b5	60		rts				rts
.40b6					TokeniseMakeASCIIZ:
.40b6	a0 00		ldy #$00			ldy 	#0							; get length of string.
.40b8	b1 28		lda ($28),y			lda 	(codePtr),y
.40ba	a8		tay				tay
.40bb	c8		iny				iny 								; +1, the NULL goes here.
.40bc	a9 00		lda #$00			lda 	#0
.40be	91 28		sta ($28),y			sta 	(codePtr),y 				; write the trailing NULL.
.40c0	e6 28		inc $28				inc 	codePtr 					; bump the pointer.
.40c2	d0 02		bne $40c6			bne 	_TMKAExit
.40c4	e6 29		inc $29				inc 	codePtr+1
.40c6					_TMKAExit:
.40c6	60		rts				rts
.40c7					TokeniseFixCase:
.40c7	a0 00		ldy #$00			ldy 	#0 							; position in buffer.
.40c9	a2 01		ldx #$01			ldx 	#1 							; bit 0 of this is 'in quotes'
.40cb					_TFCFlipQ:
.40cb	8a		txa				txa
.40cc	49 01		eor #$01			eor 	#1
.40ce	aa		tax				tax
.40cf					_TFCLoop:
.40cf	b1 28		lda ($28),y			lda 	(codePtr),y 				; get character
.40d1	f0 22		beq $40f5			beq 	_TFCExit 					; if zero exit.
.40d3	c9 20		cmp #$20			cmp 	#32 						; if control
.40d5	90 1a		bcc $40f1			bcc 	_TFCControl
.40d7	c8		iny				iny 								; preconsume
.40d8	c9 22		cmp #$22			cmp 	#'"'
.40da	f0 ef		beq $40cb			beq 	_TFCFlipQ
.40dc	c9 61		cmp #$61			cmp 	#"a"						; check if L/C
.40de	90 ef		bcc $40cf			bcc 	_TFCLoop
.40e0	c9 7b		cmp #$7b			cmp 	#"z"+1
.40e2	b0 eb		bcs $40cf			bcs 	_TFCLoop
.40e4	e0 00		cpx #$00			cpx 	#0 							; in quotes, if so, leave alone.
.40e6	d0 e7		bne $40cf			bne 	_TFCLoop
.40e8	88		dey				dey
.40e9	49 20		eor #$20			eor 	#"A"^"a"					; make U/C
.40eb					_TFCWrite:
.40eb	91 28		sta ($28),y			sta 	(codePtr),y
.40ed	c8		iny				iny
.40ee	4c cf 40	jmp $40cf			jmp 	_TFCLoop
.40f1					_TFCControl:
.40f1	a9 20		lda #$20			lda 	#" "
.40f3	d0 f6		bne $40eb			bne 	_TFCWrite
.40f5					_TFCExit:
.40f5	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokident.asm

.40f6					TokeniseIdentifier:
.40f6	a2 00		ldx #$00			ldx 	#0
.40f8					_TICopyID:
.40f8	b1 28		lda ($28),y			lda 	(codePtr),y					; get characters
.40fa	c9 5f		cmp #$5f			cmp 	#"_" 						; underscore converted to minus internally.
.40fc	f0 16		beq $4114			beq 	_TICopyUnderscore
.40fe	c9 2e		cmp #$2e			cmp 	#"."
.4100	f0 14		beq $4116			beq 	_TICopyIn
.4102	c9 30		cmp #$30			cmp 	#"0"
.4104	90 1b		bcc $4121			bcc 	_TIEndCopy
.4106	c9 3a		cmp #$3a			cmp 	#"9"+1
.4108	90 0c		bcc $4116			bcc 	_TICopyIn
.410a	c9 41		cmp #$41			cmp 	#"A"
.410c	90 13		bcc $4121			bcc 	_TIEndCopy
.410e	c9 5b		cmp #$5b			cmp 	#"Z"+1
.4110	b0 0f		bcs $4121			bcs		_TIEndCopy
.4112	90 02		bcc $4116			bcc 	_TICopyIn
.4114					_TICopyUnderScore:
.4114	a9 2d		lda #$2d			lda 	#"-"						; _ is mapped to -
.4116					_TICopyIn:
.4116	e8		inx				inx 								; write into buffer in 7 bit ASCII form
.4117	9d cf 0a	sta $0acf,x			sta 	convertBuffer,x
.411a	8e cf 0a	stx $0acf			stx 	convertBuffer
.411d	c8		iny				iny 								; next character
.411e	4c f8 40	jmp $40f8			jmp 	_TICopyID 					; loop round
.4121					_TIEndCopy:
.4121	a9 24		lda #$24			lda 	#"$"
.4123	20 78 41	jsr $4178			jsr 	TIDCheckCopy
.4126	a9 23		lda #$23			lda 	#"#"
.4128	20 78 41	jsr $4178			jsr 	TIDCheckCopy
.412b	a9 28		lda #$28			lda 	#"("
.412d	20 78 41	jsr $4178			jsr 	TIDCheckCopy
.4130	20 ad 3f	jsr $3fad			jsr 	TokenSearch 				; is it a token
.4133	b0 41		bcs $4176			bcs 	_TIExit 					; if so, then exit.
.4135	98		tya				tya
.4136	48		pha				pha
.4137	a0 3a		ldy #$3a			ldy 	#$3A 						; default type.
.4139	ae cf 0a	ldx $0acf			ldx 	convertBuffer 				; is last character (
.413c	bd cf 0a	lda $0acf,x			lda 	convertBuffer,x
.413f	c9 28		cmp #$28			cmp 	#"("
.4141	d0 02		bne $4145			bne 	_TINotArray
.4143	ca		dex				dex 								; yes, remove it and convert to array.
.4144	c8		iny				iny
.4145					_TINotArray:
.4145	bd cf 0a	lda $0acf,x			lda 	convertBuffer,x 			; check for $
.4148	c9 24		cmp #$24			cmp 	#"$"
.414a	d0 03		bne $414f			bne 	_TINotString
.414c	ca		dex				dex
.414d	c8		iny				iny
.414e	c8		iny				iny
.414f					_TINotString:
.414f	bd cf 0a	lda $0acf,x			lda 	convertBuffer,x 			; check for #
.4152	c9 23		cmp #$23			cmp 	#"#"
.4154	d0 05		bne $415b			bne 	_TINotFloat
.4156	ca		dex				dex
.4157	c8		iny				iny
.4158	c8		iny				iny
.4159	c8		iny				iny
.415a	c8		iny				iny
.415b					_TINotFloat:
.415b	e8		inx				inx 								; write end marker for identifier.
.415c	98		tya				tya
.415d	9d cf 0a	sta $0acf,x			sta 	convertBuffer,x
.4160	8e cf 0a	stx $0acf			stx 	convertBuffer 				; update length.
.4163	a2 01		ldx #$01			ldx 	#1
.4165					_TIOutput:
.4165	bd cf 0a	lda $0acf,x			lda 	convertBuffer,x
.4168	29 3f		and #$3f			and 	#$3F
.416a	48		pha				pha
.416b	20 9d 40	jsr $409d			jsr 	TokenWrite
.416e	e8		inx				inx
.416f	68		pla				pla
.4170	c9 3a		cmp #$3a			cmp 	#$3A
.4172	90 f1		bcc $4165			bcc 	_TIOutput
.4174	68		pla				pla
.4175	a8		tay				tay
.4176					_TIExit:
.4176	38		sec				sec 								; this can't fail.
.4177	60		rts				rts
.4178					TIDCheckCopy:
.4178	d1 28		cmp ($28),y			cmp 	(codePtr),y
.417a	d0 08		bne $4184			bne 	_TIDCCExit
.417c	e8		inx				inx
.417d	9d cf 0a	sta $0acf,x			sta 	convertBuffer,x
.4180	8e cf 0a	stx $0acf			stx 	convertBuffer
.4183	c8		iny				iny
.4184					_TIDCCExit:
.4184	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokinteger.asm

.4185					TokeniseInteger:
.4185	85 2c		sta $2c				sta 	temp1 						; save base
.4187	a2 00		ldx #$00			ldx 	#0							; count of chars so far
.4189	8e cf 0a	stx $0acf			stx 	convertBuffer
.418c					_TIGetChars:
.418c	b1 28		lda ($28),y			lda 	(codePtr),y 				; check character is numeric
.418e	c9 30		cmp #$30			cmp 	#"0"
.4190	90 1f		bcc $41b1			bcc 	_TIEndGet
.4192	c9 3a		cmp #$3a			cmp 	#"9"+1
.4194	90 10		bcc $41a6			bcc 	_TIHaveChar
.4196	a5 2c		lda $2c				lda 	temp1 						; fail if not hex mode
.4198	c9 0a		cmp #$0a			cmp 	#10
.419a	f0 15		beq $41b1			beq 	_TIEndGet
.419c	b1 28		lda ($28),y			lda 	(codePtr),y 				; check legitimate hex.
.419e	c9 41		cmp #$41			cmp 	#"A"
.41a0	90 0f		bcc $41b1			bcc 	_TIEndGet
.41a2	c9 5b		cmp #$5b			cmp 	#"Z"+1
.41a4	b0 0b		bcs $41b1			bcs 	_TIEndGet
.41a6					_TIHaveChar:
.41a6	e8		inx				inx 								; write into buffer.
.41a7	8e cf 0a	stx $0acf			stx 	convertBuffer
.41aa	9d cf 0a	sta $0acf,x			sta 	convertBuffer,x
.41ad	c8		iny				iny 								; next char
.41ae	4c 8c 41	jmp $418c			jmp 	_TIGetChars
.41b1					_TIEndGet:
.41b1	e0 00		cpx #$00			cpx 	#0 							; no char acquired.
.41b3	f0 1c		beq $41d1			beq 	_TIFail
.41b5	98		tya				tya
.41b6	48		pha				pha
.41b7	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.41b9	85 2a		sta $2a				sta 	temp0
.41bb	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.41bd	85 2b		sta $2b				sta 	1+(temp0)
.41bf	a9 00		lda #$00			lda 	#0 							; stack level 0
.41c1	a4 2c		ldy $2c				ldy 	temp1 						; base Y
.41c3	a2 1a		ldx #$1a		ldx	#26
.41c5	20 b8 3a	jsr $3ab8		jsr	mainHandler
.41c8	68		pla				pla
.41c9	a8		tay				tay
.41ca	90 05		bcc $41d1			bcc 	_TIFail 					; didn't convert.
.41cc	20 d3 41	jsr $41d3			jsr 	TIRecursiveOut 				; recursive output ?
.41cf	38		sec				sec
.41d0	60		rts				rts
.41d1					_TIFail:
.41d1	18		clc				clc
.41d2	60		rts				rts
.41d3					TIRecursiveOut:
.41d3	a5 98		lda $98				lda 	esInt0 						; get value to output after possible recursion
.41d5	29 3f		and #$3f			and 	#$3F
.41d7	09 40		ora #$40			ora 	#$40
.41d9	48		pha				pha
.41da	a5 98		lda $98				lda 	esInt0 						; are we recursing ?
.41dc	29 c0		and #$c0			and 	#$C0
.41de	05 a0		ora $a0				ora 	esInt1
.41e0	05 a8		ora $a8				ora 	esInt2
.41e2	05 b0		ora $b0				ora 	esInt3
.41e4	f0 10		beq $41f6			beq 	_TIRONoRecursion
.41e6	a2 06		ldx #$06			ldx 	#6 							; shift right x 6
.41e8					_TIROShift:
.41e8	46 b0		lsr $b0				lsr 	esInt3
.41ea	66 a8		ror $a8				ror 	esInt2
.41ec	66 a0		ror $a0				ror 	esInt1
.41ee	66 98		ror $98				ror 	esInt0
.41f0	ca		dex				dex
.41f1	d0 f5		bne $41e8			bne 	_TIROShift
.41f3	20 d3 41	jsr $41d3			jsr 	TIRecursiveOut 				; call recursively
.41f6					_TIRONoRecursion:
.41f6	68		pla				pla 								; pull the old bit.
.41f7	4c 9d 40	jmp $409d			jmp 	TokenWrite

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokpunct.asm

.41fa					TokenisePunctuation:
.41fa	b1 28		lda ($28),y			lda	 	(codePtr),y 				; copy next 2 chars into convertBuffer
.41fc	8d d0 0a	sta $0ad0			sta 	convertBuffer+1
.41ff	c8		iny				iny
.4200	b1 28		lda ($28),y			lda 	(codePtr),y
.4202	8d d1 0a	sta $0ad1			sta 	convertBuffer+2
.4205	c8		iny				iny 								; Y is +2
.4206	a9 02		lda #$02			lda 	#2 							; 2 character string.
.4208	8d cf 0a	sta $0acf			sta 	convertBuffer
.420b	20 ad 3f	jsr $3fad			jsr 	TokenSearch 				; search for that token.
.420e	b0 0a		bcs $421a			bcs 	_TIFound
.4210	ce cf 0a	dec $0acf			dec 	convertBuffer 				; make it a 1 character string
.4213	88		dey				dey 								; Y is now +1
.4214	20 ad 3f	jsr $3fad			jsr 	TokenSearch 				; search for that token.
.4217	b0 01		bcs $421a			bcs 	_TIFound
.4219	88		dey				dey 								; Y is now +0, carry clear indicating failure.
.421a					_TIFound:
.421a	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokstring.asm

.421b					TokeniseString:
.421b	c8		iny				iny 								; skip opening quote
.421c	a2 ff		ldx #$ff			ldx 	#255 						; count length of string.
.421e	84 2a		sty $2a				sty 	temp0 						; save start.
.4220					_TSGetLength:
.4220	b1 28		lda ($28),y			lda 	(codePtr),y 				; get next
.4222	f0 21		beq $4245			beq 	_TSFail						; end of line, fail
.4224	c8		iny				iny
.4225	e8		inx				inx
.4226	c9 22		cmp #$22			cmp 	#'"' 						; until end quote found.
.4228	d0 f6		bne $4220			bne 	_TSGetLength
.422a	a9 85		lda #$85			lda 	#TOK_STR 					; write string token out
.422c	20 9d 40	jsr $409d			jsr 	TokenWrite
.422f	8a		txa				txa 								; output length
.4230	20 9d 40	jsr $409d			jsr 	TokenWrite
.4233	a4 2a		ldy $2a				ldy 	temp0 						; get original position
.4235	e0 00		cpx #$00			cpx 	#0 							; check ended
.4237	f0 09		beq $4242			beq 	_TSExit
.4239					_TSOutput:
.4239	b1 28		lda ($28),y			lda 	(codePtr),y					; output character
.423b	20 9d 40	jsr $409d			jsr 	TokenWrite
.423e	c8		iny				iny
.423f	ca		dex				dex
.4240	d0 f7		bne $4239			bne 	_TSOutput
.4242					_TSExit:
.4242	c8		iny				iny 								; skip ending quote
.4243	38		sec				sec 								; return CS.
.4244	60		rts				rts
.4245					_TSFail:
.4245	18		clc				clc
.4246	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokentext.asm

.4247					TokenTableAddress:
>4247	4f 42						.word 	Group0Text
>4249	1d 44						.word 	Group1Text
>424b	6a 45						.word 	Group2Text
>424d	aa 45						.word 	Group3Text

;******  Processing file: tokeniser/../generated/tokentext0.inc

.424f					Group0Text:
>424f	03 41 4e c4				.byte $03,$41,$4e,$c4                  ; $86 and
>4253	02 4f d2				.byte $02,$4f,$d2                      ; $87 or
>4256	03 58 4f d2				.byte $03,$58,$4f,$d2                  ; $88 xor
>425a	02 3e bd				.byte $02,$3e,$bd                      ; $89 >=
>425d	02 3c bd				.byte $02,$3c,$bd                      ; $8a <=
>4260	01 be					.byte $01,$be                          ; $8b >
>4262	01 bc					.byte $01,$bc                          ; $8c <
>4264	01 bd					.byte $01,$bd                          ; $8d =
>4266	02 3c be				.byte $02,$3c,$be                      ; $8e <>
>4269	01 ab					.byte $01,$ab                          ; $8f +
>426b	01 ad					.byte $01,$ad                          ; $90 -
>426d	02 3e be				.byte $02,$3e,$be                      ; $91 >>
>4270	02 3c bc				.byte $02,$3c,$bc                      ; $92 <<
>4273	01 aa					.byte $01,$aa                          ; $93 *
>4275	01 af					.byte $01,$af                          ; $94 /
>4277	03 4d 4f c4				.byte $03,$4d,$4f,$c4                  ; $95 mod
>427b	01 de					.byte $01,$de                          ; $96 ^
>427d	01 a1					.byte $01,$a1                          ; $97 !
>427f	01 bf					.byte $01,$bf                          ; $98 ?
>4281	06 52 45 50 45 41 d4			.byte $06,$52,$45,$50,$45,$41,$d4      ; $99 repeat
>4288	05 57 48 49 4c c5			.byte $05,$57,$48,$49,$4c,$c5          ; $9a while
>428e	03 46 4f d2				.byte $03,$46,$4f,$d2                  ; $9b for
>4292	02 49 c6				.byte $02,$49,$c6                      ; $9c if
>4295	07 44 45 46 50 52 4f c3			.byte $07,$44,$45,$46,$50,$52,$4f,$c3  ; $9d defproc
>429d	05 55 4e 54 49 cc			.byte $05,$55,$4e,$54,$49,$cc          ; $9e until
>42a3	04 57 45 4e c4				.byte $04,$57,$45,$4e,$c4              ; $9f wend
>42a8	04 4e 45 58 d4				.byte $04,$4e,$45,$58,$d4              ; $a0 next
>42ad	04 54 48 45 ce				.byte $04,$54,$48,$45,$ce              ; $a1 then
>42b2	05 45 4e 44 49 c6			.byte $05,$45,$4e,$44,$49,$c6          ; $a2 endif
>42b8	07 45 4e 44 50 52 4f c3			.byte $07,$45,$4e,$44,$50,$52,$4f,$c3  ; $a3 endproc
>42c0	01 a8					.byte $01,$a8                          ; $a4 (
>42c2	04 4c 45 4e a8				.byte $04,$4c,$45,$4e,$a8              ; $a5 len(
>42c7	04 53 47 4e a8				.byte $04,$53,$47,$4e,$a8              ; $a6 sgn(
>42cc	04 41 42 53 a8				.byte $04,$41,$42,$53,$a8              ; $a7 abs(
>42d1	07 52 41 4e 44 4f 4d a8			.byte $07,$52,$41,$4e,$44,$4f,$4d,$a8  ; $a8 random(
>42d9	04 50 41 47 c5				.byte $04,$50,$41,$47,$c5              ; $a9 page
>42de	04 54 52 55 c5				.byte $04,$54,$52,$55,$c5              ; $aa true
>42e3	05 46 41 4c 53 c5			.byte $05,$46,$41,$4c,$53,$c5          ; $ab false
>42e9	04 4d 49 4e a8				.byte $04,$4d,$49,$4e,$a8              ; $ac min(
>42ee	04 4d 41 58 a8				.byte $04,$4d,$41,$58,$a8              ; $ad max(
>42f3	04 53 59 53 a8				.byte $04,$53,$59,$53,$a8              ; $ae sys(
>42f8	06 54 49 4d 45 52 a8			.byte $06,$54,$49,$4d,$45,$52,$a8      ; $af timer(
>42ff	06 45 56 45 4e 54 a8			.byte $06,$45,$56,$45,$4e,$54,$a8      ; $b0 event(
>4306	04 47 45 54 a8				.byte $04,$47,$45,$54,$a8              ; $b1 get(
>430b	06 49 4e 4b 45 59 a8			.byte $06,$49,$4e,$4b,$45,$59,$a8      ; $b2 inkey(
>4312	06 41 4c 4c 4f 43 a8			.byte $06,$41,$4c,$4c,$4f,$43,$a8      ; $b3 alloc(
>4319	05 43 48 52 24 a8			.byte $05,$43,$48,$52,$24,$a8          ; $b4 chr$(
>431f	06 4c 45 46 54 24 a8			.byte $06,$4c,$45,$46,$54,$24,$a8      ; $b5 left$(
>4326	05 4d 49 44 24 a8			.byte $05,$4d,$49,$44,$24,$a8          ; $b6 mid$(
>432c	07 52 49 47 48 54 24 a8			.byte $07,$52,$49,$47,$48,$54,$24,$a8  ; $b7 right$(
>4334	05 53 54 52 24 a8			.byte $05,$53,$54,$52,$24,$a8          ; $b8 str$(
>433a	04 56 41 4c a8				.byte $04,$56,$41,$4c,$a8              ; $b9 val(
>433f	05 50 45 45 4b a8			.byte $05,$50,$45,$45,$4b,$a8          ; $ba peek(
>4345	05 44 45 45 4b a8			.byte $05,$44,$45,$45,$4b,$a8          ; $bb deek(
>434b	05 4c 45 45 4b a8			.byte $05,$4c,$45,$45,$4b,$a8          ; $bc leek(
>4351	04 41 53 43 a8				.byte $04,$41,$53,$43,$a8              ; $bd asc(
>4356	04 49 4e 54 a8				.byte $04,$49,$4e,$54,$a8              ; $be int(
>435b	06 46 4c 4f 41 54 a8			.byte $06,$46,$4c,$4f,$41,$54,$a8      ; $bf float(
>4362	06 49 53 56 41 4c a8			.byte $06,$49,$53,$56,$41,$4c,$a8      ; $c0 isval(
>4369	07 55 50 50 45 52 24 a8			.byte $07,$55,$50,$50,$45,$52,$24,$a8  ; $c1 upper$(
>4371	07 4c 4f 57 45 52 24 a8			.byte $07,$4c,$4f,$57,$45,$52,$24,$a8  ; $c2 lower$(
>4379	01 c0					.byte $01,$c0                          ; $c3 @
>437b	01 fe					.byte $01,$fe                          ; $c4 ~
>437d	01 a6					.byte $01,$a6                          ; $c5 &
>437f	05 47 45 54 24 a8			.byte $05,$47,$45,$54,$24,$a8          ; $c6 get$(
>4385	07 49 4e 4b 45 59 24 a8			.byte $07,$49,$4e,$4b,$45,$59,$24,$a8  ; $c7 inkey$(
>438d	03 4d 45 cd				.byte $03,$4d,$45,$cd                  ; $c8 mem
>4391	01 a9					.byte $01,$a9                          ; $c9 )
>4393	01 ba					.byte $01,$ba                          ; $ca :
>4395	01 ac					.byte $01,$ac                          ; $cb ,
>4397	01 bb					.byte $01,$bb                          ; $cc ;
>4399	01 a7					.byte $01,$a7                          ; $cd '
>439b	02 54 cf				.byte $02,$54,$cf                      ; $ce to
>439e	04 53 54 45 d0				.byte $04,$53,$54,$45,$d0              ; $cf step
>43a3	04 50 52 4f c3				.byte $04,$50,$52,$4f,$c3              ; $d0 proc
>43a8	05 4c 4f 43 41 cc			.byte $05,$4c,$4f,$43,$41,$cc          ; $d1 local
>43ae	03 44 49 cd				.byte $03,$44,$49,$cd                  ; $d2 dim
>43b2	03 52 45 cd				.byte $03,$52,$45,$cd                  ; $d3 rem
>43b6	03 4c 45 d4				.byte $03,$4c,$45,$d4                  ; $d4 let
>43ba	05 49 4e 50 55 d4			.byte $05,$49,$4e,$50,$55,$d4          ; $d5 input
>43c0	04 45 4c 53 c5				.byte $04,$45,$4c,$53,$c5              ; $d6 else
>43c5	03 56 44 d5				.byte $03,$56,$44,$d5                  ; $d7 vdu
>43c9	05 50 52 49 4e d4			.byte $05,$50,$52,$49,$4e,$d4          ; $d8 print
>43cf	04 44 41 54 c1				.byte $04,$44,$41,$54,$c1              ; $d9 data
>43d4	05 49 4d 41 47 c5			.byte $05,$49,$4d,$41,$47,$c5          ; $da image
>43da	02 41 d4				.byte $02,$41,$d4                      ; $db at
>43dd	04 46 4c 49 d0				.byte $04,$46,$4c,$49,$d0              ; $dc flip
>43e2	06 41 53 53 45 52 d4			.byte $06,$41,$53,$53,$45,$52,$d4      ; $dd assert
>43e9	04 50 4f 4b c5				.byte $04,$50,$4f,$4b,$c5              ; $de poke
>43ee	04 44 4f 4b c5				.byte $04,$44,$4f,$4b,$c5              ; $df doke
>43f3	04 4c 4f 4b c5				.byte $04,$4c,$4f,$4b,$c5              ; $e0 loke
>43f8	03 49 4e cb				.byte $03,$49,$4e,$cb                  ; $e1 ink
>43fc	05 50 41 50 45 d2			.byte $05,$50,$41,$50,$45,$d2          ; $e2 paper
>4402	03 43 4c d3				.byte $03,$43,$4c,$d3                  ; $e3 cls
>4406	06 4c 4f 43 41 54 c5			.byte $06,$4c,$4f,$43,$41,$54,$c5      ; $e4 locate
>440d	01 ae					.byte $01,$ae                          ; $e5 .
>440f	04 46 52 4f cd				.byte $04,$46,$52,$4f,$cd              ; $e6 from
>4414	01 a3					.byte $01,$a3                          ; $e7 #
>4416	05 43 4c 45 41 d2			.byte $05,$43,$4c,$45,$41,$d2          ; $e8 clear
>441c	00					.byte $00

;******  Return to file: tokeniser/tokentext.asm


;******  Processing file: tokeniser/../generated/tokentext1.inc

.441d					Group1Text:
>441d	04 4c 4f 41 c4				.byte $04,$4c,$4f,$41,$c4              ; $86 load
>4422	04 53 41 56 c5				.byte $04,$53,$41,$56,$c5              ; $87 save
>4427	04 4c 49 53 d4				.byte $04,$4c,$49,$53,$d4              ; $88 list
>442c	03 4e 45 d7				.byte $03,$4e,$45,$d7                  ; $89 new
>4430	05 42 52 45 41 cb			.byte $05,$42,$52,$45,$41,$cb          ; $8a break
>4436	03 52 55 ce				.byte $03,$52,$55,$ce                  ; $8b run
>443a	04 52 45 41 c4				.byte $04,$52,$45,$41,$c4              ; $8c read
>443f	07 52 45 53 54 4f 52 c5			.byte $07,$52,$45,$53,$54,$4f,$52,$c5  ; $8d restore
>4447	03 45 4e c4				.byte $03,$45,$4e,$c4                  ; $8e end
>444b	04 53 54 4f d0				.byte $04,$53,$54,$4f,$d0              ; $8f stop
>4450	04 58 45 4d d5				.byte $04,$58,$45,$4d,$d5              ; $90 xemu
>4455	04 47 4f 54 cf				.byte $04,$47,$4f,$54,$cf              ; $91 goto
>445a	05 47 4f 53 55 c2			.byte $05,$47,$4f,$53,$55,$c2          ; $92 gosub
>4460	06 52 45 54 55 52 ce			.byte $06,$52,$45,$54,$55,$52,$ce      ; $93 return
>4467	03 4f 52 c1				.byte $03,$4f,$52,$c1                  ; $94 ora
>446b	05 28 41 4e 44 a9			.byte $05,$28,$41,$4e,$44,$a9          ; $95 (and)
>4471	03 45 4f d2				.byte $03,$45,$4f,$d2                  ; $96 eor
>4475	03 41 44 c3				.byte $03,$41,$44,$c3                  ; $97 adc
>4479	03 53 54 c1				.byte $03,$53,$54,$c1                  ; $98 sta
>447d	03 4c 44 c1				.byte $03,$4c,$44,$c1                  ; $99 lda
>4481	03 43 4d d0				.byte $03,$43,$4d,$d0                  ; $9a cmp
>4485	03 53 42 c3				.byte $03,$53,$42,$c3                  ; $9b sbc
>4489	03 41 53 cc				.byte $03,$41,$53,$cc                  ; $9c asl
>448d	03 52 4f cc				.byte $03,$52,$4f,$cc                  ; $9d rol
>4491	03 4c 53 d2				.byte $03,$4c,$53,$d2                  ; $9e lsr
>4495	03 52 4f d2				.byte $03,$52,$4f,$d2                  ; $9f ror
>4499	03 53 54 d8				.byte $03,$53,$54,$d8                  ; $a0 stx
>449d	03 4c 44 d8				.byte $03,$4c,$44,$d8                  ; $a1 ldx
>44a1	03 44 45 c3				.byte $03,$44,$45,$c3                  ; $a2 dec
>44a5	03 49 4e c3				.byte $03,$49,$4e,$c3                  ; $a3 inc
>44a9	03 53 54 da				.byte $03,$53,$54,$da                  ; $a4 stz
>44ad	03 42 49 d4				.byte $03,$42,$49,$d4                  ; $a5 bit
>44b1	03 53 54 d9				.byte $03,$53,$54,$d9                  ; $a6 sty
>44b5	03 4c 44 d9				.byte $03,$4c,$44,$d9                  ; $a7 ldy
>44b9	03 43 50 d9				.byte $03,$43,$50,$d9                  ; $a8 cpy
>44bd	03 43 50 d8				.byte $03,$43,$50,$d8                  ; $a9 cpx
>44c1	03 54 53 c2				.byte $03,$54,$53,$c2                  ; $aa tsb
>44c5	03 54 52 c2				.byte $03,$54,$52,$c2                  ; $ab trb
>44c9	03 4a 53 d2				.byte $03,$4a,$53,$d2                  ; $ac jsr
>44cd	03 4a 4d d0				.byte $03,$4a,$4d,$d0                  ; $ad jmp
>44d1	03 42 50 cc				.byte $03,$42,$50,$cc                  ; $ae bpl
>44d5	03 42 4d c9				.byte $03,$42,$4d,$c9                  ; $af bmi
>44d9	03 42 56 c3				.byte $03,$42,$56,$c3                  ; $b0 bvc
>44dd	03 42 56 d3				.byte $03,$42,$56,$d3                  ; $b1 bvs
>44e1	03 42 43 c3				.byte $03,$42,$43,$c3                  ; $b2 bcc
>44e5	03 42 43 d3				.byte $03,$42,$43,$d3                  ; $b3 bcs
>44e9	03 42 4e c5				.byte $03,$42,$4e,$c5                  ; $b4 bne
>44ed	03 42 45 d1				.byte $03,$42,$45,$d1                  ; $b5 beq
>44f1	03 42 52 c1				.byte $03,$42,$52,$c1                  ; $b6 bra
>44f5	03 42 52 cb				.byte $03,$42,$52,$cb                  ; $b7 brk
>44f9	03 50 48 d0				.byte $03,$50,$48,$d0                  ; $b8 php
>44fd	03 43 4c c3				.byte $03,$43,$4c,$c3                  ; $b9 clc
>4501	03 50 4c d0				.byte $03,$50,$4c,$d0                  ; $ba plp
>4505	03 53 45 c3				.byte $03,$53,$45,$c3                  ; $bb sec
>4509	03 52 54 c9				.byte $03,$52,$54,$c9                  ; $bc rti
>450d	03 50 48 c1				.byte $03,$50,$48,$c1                  ; $bd pha
>4511	03 43 4c c9				.byte $03,$43,$4c,$c9                  ; $be cli
>4515	03 50 48 d9				.byte $03,$50,$48,$d9                  ; $bf phy
>4519	03 52 54 d3				.byte $03,$52,$54,$d3                  ; $c0 rts
>451d	03 50 4c c1				.byte $03,$50,$4c,$c1                  ; $c1 pla
>4521	03 53 45 c9				.byte $03,$53,$45,$c9                  ; $c2 sei
>4525	03 50 4c d9				.byte $03,$50,$4c,$d9                  ; $c3 ply
>4529	03 44 45 d9				.byte $03,$44,$45,$d9                  ; $c4 dey
>452d	03 54 58 c1				.byte $03,$54,$58,$c1                  ; $c5 txa
>4531	03 54 59 c1				.byte $03,$54,$59,$c1                  ; $c6 tya
>4535	03 54 58 d3				.byte $03,$54,$58,$d3                  ; $c7 txs
>4539	03 54 41 d9				.byte $03,$54,$41,$d9                  ; $c8 tay
>453d	03 54 41 d8				.byte $03,$54,$41,$d8                  ; $c9 tax
>4541	03 43 4c d6				.byte $03,$43,$4c,$d6                  ; $ca clv
>4545	03 54 53 d8				.byte $03,$54,$53,$d8                  ; $cb tsx
>4549	03 49 4e d9				.byte $03,$49,$4e,$d9                  ; $cc iny
>454d	03 44 45 d8				.byte $03,$44,$45,$d8                  ; $cd dex
>4551	03 43 4c c4				.byte $03,$43,$4c,$c4                  ; $ce cld
>4555	03 50 48 d8				.byte $03,$50,$48,$d8                  ; $cf phx
>4559	03 49 4e d8				.byte $03,$49,$4e,$d8                  ; $d0 inx
>455d	03 4e 4f d0				.byte $03,$4e,$4f,$d0                  ; $d1 nop
>4561	03 53 45 c4				.byte $03,$53,$45,$c4                  ; $d2 sed
>4565	03 50 4c d8				.byte $03,$50,$4c,$d8                  ; $d3 plx
>4569	00					.byte $00

;******  Return to file: tokeniser/tokentext.asm


;******  Processing file: tokeniser/../generated/tokentext2.inc

.456a					Group2Text:
>456a	05 56 50 4f 4b c5			.byte $05,$56,$50,$4f,$4b,$c5          ; $86 vpoke
>4570	05 56 44 4f 4b c5			.byte $05,$56,$44,$4f,$4b,$c5          ; $87 vdoke
>4576	05 56 4c 4f 41 c4			.byte $05,$56,$4c,$4f,$41,$c4          ; $88 vload
>457c	04 4d 4f 44 c5				.byte $04,$4d,$4f,$44,$c5              ; $89 mode
>4581	07 50 41 4c 45 54 54 c5			.byte $07,$50,$41,$4c,$45,$54,$54,$c5  ; $8a palette
>4589	06 53 50 52 49 54 c5			.byte $06,$53,$50,$52,$49,$54,$c5      ; $8b sprite
>4590	03 43 4c c7				.byte $03,$43,$4c,$c7                  ; $8c clg
>4594	04 52 45 43 d4				.byte $04,$52,$45,$43,$d4              ; $8d rect
>4599	05 46 52 41 4d c5			.byte $05,$46,$52,$41,$4d,$c5          ; $8e frame
>459f	04 44 52 41 d7				.byte $04,$44,$52,$41,$d7              ; $8f draw
>45a4	04 54 45 58 d4				.byte $04,$54,$45,$58,$d4              ; $90 text
>45a9	00					.byte $00

;******  Return to file: tokeniser/tokentext.asm


;******  Processing file: tokeniser/../generated/tokentext3.inc

.45aa					Group3Text:
>45aa	06 56 50 45 45 4b a8			.byte $06,$56,$50,$45,$45,$4b,$a8      ; $86 vpeek(
>45b1	06 56 44 45 45 4b a8			.byte $06,$56,$44,$45,$45,$4b,$a8      ; $87 vdeek(
>45b8	09 53 50 52 49 54 45 2e			.byte $09,$53,$50,$52,$49,$54,$45,$2e,$58,$a8 ; $88 sprite.x(
>45c0	58 a8
>45c2	09 53 50 52 49 54 45 2e			.byte $09,$53,$50,$52,$49,$54,$45,$2e,$59,$a8 ; $89 sprite.y(
>45ca	59 a8
>45cc	04 48 49 54 a8				.byte $04,$48,$49,$54,$a8              ; $8a hit(
>45d1	06 4a 4f 59 2e 58 a8			.byte $06,$4a,$4f,$59,$2e,$58,$a8      ; $8b joy.x(
>45d8	06 4a 4f 59 2e 59 a8			.byte $06,$4a,$4f,$59,$2e,$59,$a8      ; $8c joy.y(
>45df	06 4a 4f 59 2e 42 a8			.byte $06,$4a,$4f,$59,$2e,$42,$a8      ; $8d joy.b(
>45e6	06 43 4c 4f 43 4b a8			.byte $06,$43,$4c,$4f,$43,$4b,$a8      ; $8e clock(
>45ed	00					.byte $00

;******  Return to file: tokeniser/tokentext.asm


;******  Return to file: tokeniser/tokeniser.asm

.45ee					tokeniserHandler:
.45ee	7c f1 45	jmp ($45f1,x)			jmp 	(tokeniserVectors,x)
.45f1					tokeniserVectors:
>45f1	fd 45					.word _DummyControlHandler ; index 0
>45f3	97 3d					.word Detokenise           ; index 2
>45f5	8b 3d					.word ListLine             ; index 4
>45f7	1c 40					.word TokTest              ; index 6
>45f9	3c 40					.word Tokenise             ; index 8
>45fb	3f 40					.word TokeniseASCIIZ       ; index 10
.45fd					_DummyControlHandler:
.45fd	60		rts			rts

;******  Return to file: basic.asm

.45fe					section_end_tokeniser:
.45fe					section_start_variable:

;******  Processing file: variable/variable.asm


;******  Processing file: variable/array/access.asm

.45fe					AccessArray:
.45fe	8a		txa				txa
.45ff	48		pha				pha
.4600	e8		inx				inx
.4601	20 ca 46	jsr $46ca			jsr 	GetArrayDimensions 			; get the array dimensions one up from here.
.4604	68		pla				pla
.4605	aa		tax				tax
.4606	b5 98		lda $98,x			lda 	esInt0,x 					; restore address to follow in temp0.
.4608	85 2a		sta $2a				sta 	temp0
.460a	b5 a0		lda $a0,x			lda 	esInt1,x
.460c	85 2b		sta $2b				sta 	temp0+1
.460e	8a		txa				txa
.460f	48		pha				pha
.4610	98		tya				tya
.4611	48		pha				pha
.4612					_AAFollow:
.4612	a0 00		ldy #$00			ldy 	#0
.4614	b1 2a		lda ($2a),y			lda 	(temp0),y
.4616	48		pha				pha
.4617	c8		iny				iny
.4618	b1 2a		lda ($2a),y			lda 	(temp0),y
.461a	85 2b		sta $2b				sta 	temp0+1
.461c	68		pla				pla
.461d	85 2a		sta $2a				sta 	temp0
.461f	e8		inx				inx 								; advance to next stack slot.
.4620	a0 00		ldy #$00			ldy 	#0
.4622	b1 2a		lda ($2a),y			lda 	(temp0),y 					; compare max index vs required index
.4624	d5 98		cmp $98,x			cmp 	esInt0,x
.4626	c8		iny				iny
.4627	b1 2a		lda ($2a),y			lda 	(temp0),y 					; drop bit 7 of the size, indicates follow.
.4629	85 2c		sta $2c				sta 	temp1 						; save the size in temp1 for later use.
.462b	29 7f		and #$7f			and 	#$7F
.462d	f5 a0		sbc $a0,x			sbc 	esInt1,x
.462f	90 50		bcc $4681			bcc 	_AABadIndex 				; failed on index if max index < required.
.4631	18		clc				clc
.4632	a5 2a		lda $2a				lda 	temp0
.4634	69 02		adc #$02			adc 	#2
.4636	85 2a		sta $2a				sta 	temp0
.4638	90 02		bcc $463c			bcc 	_AANoCarry
.463a	e6 2b		inc $2b				inc 	temp0+1
.463c					_AANoCarry:
.463c	b5 98		lda $98,x			lda 	esInt0,x
.463e	85 2e		sta $2e				sta 	temp2
.4640	b5 a0		lda $a0,x			lda 	esInt1,x
.4642	85 2f		sta $2f				sta 	temp2+1
.4644	ac 10 0e	ldy $0e10			ldy 	varType
.4647	b9 24 47	lda $4724,y			lda 	CAActualSize-$3A,y
.464a	b4 91		ldy $91,x			ldy 	esType+1,x 					; is it top level
.464c	30 02		bmi $4650			bmi 	_AANotPointer
.464e	a9 02		lda #$02			lda 	#2 							; array of pointers is 2.
.4650					_AANotPointer:
.4650	20 ce 47	jsr $47ce			jsr 	MultiplyTemp2ByA 			; multiply the index by the data size, in temp2.
.4653	18		clc				clc
.4654	a5 2a		lda $2a				lda 	temp0
.4656	65 2e		adc $2e				adc 	temp2
.4658	85 2a		sta $2a				sta 	temp0
.465a	a5 2b		lda $2b				lda 	temp0+1
.465c	65 2f		adc $2f				adc 	temp2+1
.465e	85 2b		sta $2b				sta 	temp0+1
.4660	b5 91		lda $91,x			lda 	esType+1,x
.4662	30 07		bmi $466b			bmi 	_AAUsedAllIndices
.4664	a5 2c		lda $2c				lda 	temp1 						; check if this is a pointer array e.g. there are subarrays
.4666	10 14		bpl $467c			bpl 	_AABadDepth 				; no, too many indexes.
.4668	4c 12 46	jmp $4612			jmp 	_AAFollow 					; otherwise follow them.
.466b					_AAUsedAllIndices:
.466b	a5 2c		lda $2c				lda 	temp1 						; get original high length byte.
.466d	30 0d		bmi $467c			bmi 	_AABadDepth 				; if -ve then this is an array of pointers.
.466f	68		pla				pla
.4670	a8		tay				tay
.4671	68		pla				pla
.4672	aa		tax				tax
.4673	a5 2a		lda $2a				lda 	temp0 						; copy address of array element to stack,x
.4675	95 98		sta $98,x			sta 	esInt0,x
.4677	a5 2b		lda $2b				lda 	temp0+1
.4679	95 a0		sta $a0,x			sta 	esInt1,x
.467b	60		rts				rts
.467c					_AABadDepth:
.467c	a2 1c		ldx #$1c			ldx 	#ErrorID_ArrayDepth
.467e	20 18 15	jsr $1518		jsr	errorHandler
.4681					_AABadIndex:
.4681	a2 1b		ldx #$1b			ldx 	#ErrorID_ArrayIndex
.4683	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: variable/variable.asm


;******  Processing file: variable/array/create.asm

.0e0e					elementSize:
>0e0e							.fill	 1
.4686					CreateArray:
.4686	20 5d 48	jsr $485d			jsr 	AccessSetup 				; set up the basic stuff.
.4689	ad 10 0e	lda $0e10			lda 	varType 					; is the variable type an array
.468c	4a		lsr a				lsr 	a
.468d	90 36		bcc $46c5			bcc 	CANotArray 					; no, cause an error.
.468f	20 66 49	jsr $4966			jsr 	FindVariable 				; does the variable exist already
.4692	b0 2c		bcs $46c0			bcs 	CAFound 					; cannot redefine it.
.4694	20 9a 48	jsr $489a			jsr 	CreateVariable 				; create the variable entry.
.4697	a5 2a		lda $2a				lda 	temp0 						; push address of new variable entry on the stack
.4699	48		pha				pha
.469a	a5 2b		lda $2b				lda 	temp0+1
.469c	48		pha				pha
.469d	a2 00		ldx #$00			ldx 	#0
.469f	20 ca 46	jsr $46ca			jsr 	GetArrayDimensions 			; get the array dimensions
.46a2	a2 00		ldx #$00			ldx 	#0 							; create at level $00
.46a4	20 fa 46	jsr $46fa			jsr 	CreateArrayLevel 			; level to YA
.46a7	aa		tax				tax 								; level now in YX
.46a8	68		pla				pla 								; get address back to temp0 to write.
.46a9	85 2b		sta $2b				sta 	temp0+1
.46ab	68		pla				pla
.46ac	85 2a		sta $2a				sta 	temp0
.46ae	98		tya				tya 								; write YX there.
.46af	a0 06		ldy #$06			ldy 	#6
.46b1	91 2a		sta ($2a),y			sta 	(temp0),y
.46b3	88		dey				dey
.46b4	8a		txa				txa
.46b5	91 2a		sta ($2a),y			sta 	(temp0),y
.46b7	ac 11 0e	ldy $0e11			ldy 	varEnd 						; restore Y and exit.
.46ba	60		rts				rts
.46bb					CASize:
.46bb	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.46bd	20 18 15	jsr $1518		jsr	errorHandler
.46c0					CAFound:
.46c0	a2 19		ldx #$19			ldx 	#ErrorID_DupArray
.46c2	20 18 15	jsr $1518		jsr	errorHandler
.46c5					CANotArray:
.46c5	a2 1a		ldx #$1a			ldx 	#ErrorID_NotArray
.46c7	20 18 15	jsr $1518		jsr	errorHandler
.46ca					GetArrayDimensions:
.46ca	ad 10 0e	lda $0e10			lda 	varType 					; push variable type on the stack.
.46cd	48		pha				pha
.46ce	ac 11 0e	ldy $0e11			ldy 	varEnd
.46d1					_CAGetDimensions:
.46d1	8a		txa				txa 								; get the next level
.46d2	a2 0a		ldx #$0a		ldx	#10
.46d4	20 b8 3a	jsr $3ab8		jsr	mainHandler
.46d7	aa		tax				tax
.46d8	b5 a0		lda $a0,x			lda 	esInt1,x 					; index must be < 8192
.46da	29 e0		and #$e0			and 	#$E0
.46dc	15 a8		ora $a8,x			ora 	esInt2,x
.46de	15 b0		ora $b0,x			ora 	esInt3,x
.46e0	d0 d9		bne $46bb			bne 	CASize
.46e2	e8		inx				inx 								; next level.
.46e3	b1 28		lda ($28),y			lda 	(codePtr),y 				; get/consume following character
.46e5	c8		iny				iny
.46e6	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; loop back if more dimensions
.46e8	f0 e7		beq $46d1			beq 	_CAGetDimensions
.46ea	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN 				; right bracket ?
.46ec	d0 cd		bne $46bb			bne 	CASize
.46ee	a9 ff		lda #$ff			lda 	#$FF 						; set the type past the end to $FF so we know how many
.46f0	95 90		sta $90,x			sta 	esType,x 					; dimensions there are.
.46f2	68		pla				pla 								; restore the variable type ($3A-$3F)
.46f3	8d 10 0e	sta $0e10			sta 	varType
.46f6	8c 11 0e	sty $0e11			sty 	varEnd 						; save exit Y value, after dimensions
.46f9	60		rts				rts
.46fa					CreateArrayLevel:
.46fa	ac 10 0e	ldy $0e10			ldy 	varType
.46fd	b9 24 47	lda $4724,y			lda 	CAActualSize-$3A,y
.4700	8d 0e 0e	sta $0e0e			sta 	elementSize 				; get element size this level.
.4703	b4 91		ldy $91,x			ldy 	esType+1,x 					; is it top level
.4705	30 05		bmi $470c			bmi 	_CANotPointer
.4707	a9 02		lda #$02			lda 	#2 							; array of pointers is 2.
.4709	8d 0e 0e	sta $0e0e			sta 	elementSize
.470c					_CANotPointer:
.470c	a5 35		lda $35				lda 	lowMemory 					; start creating at temp0, saving start on stack.
.470e	85 2a		sta $2a				sta 	temp0
.4710	48		pha				pha
.4711	a5 36		lda $36				lda 	lowMemory+1
.4713	85 2b		sta $2b				sta 	temp0+1
.4715	48		pha				pha
.4716	20 97 47	jsr $4797			jsr 	AllocateArraySpace 			; allocate space for all array stuff at this level.
.4719	a0 00		ldy #$00			ldy 	#0
.471b	b5 98		lda $98,x			lda 	esInt0,x
.471d	91 2a		sta ($2a),y			sta 	(temp0),y
.471f	c8		iny				iny
.4720	b5 a0		lda $a0,x			lda 	esInt1,x
.4722	91 2a		sta ($2a),y			sta 	(temp0),y
.4724	b5 91		lda $91,x			lda 	esType+1,x 					; do we have another level ?
.4726	30 06		bmi $472e			bmi 	_CALNotLast
.4728	b1 2a		lda ($2a),y			lda 	(temp0),y 					; set bit 7, indicates an array of pointers to other levels.
.472a	09 80		ora #$80			ora 	#$80
.472c	91 2a		sta ($2a),y			sta 	(temp0),y
.472e					_CALNotLast:
.472e	a9 02		lda #$02			lda 	#2
.4730	20 54 47	jsr $4754			jsr 	_CALAddTemp0
.4733	b5 98		lda $98,x			lda 	esInt0,x 					; copy stack:01 to stack:23 so we can use it to
.4735	95 a8		sta $a8,x			sta 	esInt2,x 					; count.
.4737	b5 a0		lda $a0,x			lda 	esInt1,x
.4739	95 b0		sta $b0,x			sta 	esInt3,x
.473b					_CALClear:
.473b	20 64 47	jsr $4764			jsr 	EraseOneElement
.473e	ad 0e 0e	lda $0e0e			lda 	elementSize 				; move to next element
.4741	20 54 47	jsr $4754			jsr 	_CALAddTemp0
.4744	b5 a8		lda $a8,x			lda 	esInt2,x 					; decrement counter
.4746	d0 02		bne $474a			bne 	_CALNoBorrow
.4748	d6 b0		dec $b0,x			dec 	esInt3,x
.474a					_CALNoBorrow:
.474a	d6 a8		dec $a8,x			dec 	esInt2,x
.474c	b5 b0		lda $b0,x			lda 	esInt3,x 					; loop back if >= 0 - we need +1 because indices
.474e	10 eb		bpl $473b			bpl 	_CALClear 					; start at 0 e.g. x(10) is actually 11 array entries.
.4750	68		pla				pla 								; restore the start of this into YA.
.4751	a8		tay				tay
.4752	68		pla				pla
.4753	60		rts				rts
.4754					_CALAddTemp0:
.4754	18		clc				clc
.4755	65 2a		adc $2a				adc 	temp0
.4757	85 2a		sta $2a				sta 	temp0
.4759	90 02		bcc $475d			bcc 	_CALANoCarry
.475b	e6 2b		inc $2b				inc 	temp0+1
.475d					_CALANoCarry:
.475d	60		rts				rts
.475e					CAActualSize:
>475e	04 04						.byte 	VarISize,VarISize
>4760	02 02						.byte 	VarSSize,VarSSize
>4762	06 06						.byte 	VarFSize,VarFSize
.4764					EraseOneElement:
.4764	b5 91		lda $91,x			lda 	esType+1,x 					; is this a list of sub arrays
.4766	10 09		bpl $4771			bpl 	_EOESubArray
.4768	a0 00		ldy #$00			ldy 	#0 							; write the empty variable value out.
.476a	ad 10 0e	lda $0e10			lda 	varType
.476d	20 04 49	jsr $4904			jsr 	ZeroTemp0Y
.4770	60		rts				rts
.4771					_EOESubArray:
.4771	a5 2a		lda $2a				lda 	temp0 						; save temp0, these are effectively locals.
.4773	48		pha				pha
.4774	a5 2b		lda $2b				lda 	temp0+1
.4776	48		pha				pha
.4777	ad 0e 0e	lda $0e0e			lda 	elementSize 				; save element size
.477a	48		pha				pha
.477b	e8		inx				inx 								; create at next level
.477c	20 fa 46	jsr $46fa			jsr 	CreateArrayLevel
.477f	ca		dex				dex
.4780	85 32		sta $32				sta 	tempShort 					; save A
.4782	68		pla				pla  								; restore element size.
.4783	8d 0e 0e	sta $0e0e			sta 	elementSize
.4786	68		pla				pla 								; restore temp0, which is where this new array level goes.
.4787	85 2b		sta $2b				sta 	temp0+1
.4789	68		pla				pla
.478a	85 2a		sta $2a				sta 	temp0
.478c	98		tya				tya 								; store Y/A there
.478d	a0 01		ldy #$01			ldy 	#1
.478f	91 2a		sta ($2a),y			sta 	(temp0),y
.4791	a5 32		lda $32				lda 	tempShort
.4793	88		dey				dey
.4794	91 2a		sta ($2a),y			sta 	(temp0),y
.4796	60		rts				rts
.4797					AllocateArraySpace:
.4797	18		clc				clc 								; element count + 1 => temp2.
.4798	b5 98		lda $98,x			lda 	esInt0,x
.479a	69 01		adc #$01			adc 	#1
.479c	85 2e		sta $2e				sta 	temp2
.479e	b5 a0		lda $a0,x			lda 	esInt1,x
.47a0	69 00		adc #$00			adc 	#0
.47a2	85 2f		sta $2f				sta 	temp2+1
.47a4	ad 0e 0e	lda $0e0e			lda 	elementSize 				; bytes per element
.47a7	20 ce 47	jsr $47ce			jsr 	MultiplyTemp2ByA 			; temp2 = (count + 1) x bytes per element.
.47aa	18		clc				clc 								; add 2 for 'max element' byte.
.47ab	a5 2e		lda $2e				lda 	temp2
.47ad	69 02		adc #$02			adc 	#2
.47af	85 2e		sta $2e				sta 	temp2
.47b1	90 02		bcc $47b5			bcc 	_AASNoCarry
.47b3	e6 2f		inc $2f				inc 	temp2+1
.47b5					_AASNoCarry:
.47b5	18		clc				clc 								; add to low memory, allocating space.
.47b6	a5 35		lda $35				lda 	lowMemory
.47b8	65 2e		adc $2e				adc 	temp2
.47ba	85 35		sta $35				sta 	lowMemory
.47bc	a5 36		lda $36				lda 	lowMemory+1
.47be	65 2f		adc $2f				adc 	temp2+1
.47c0	85 36		sta $36				sta 	lowMemory+1
.47c2	b0 05		bcs $47c9			bcs 	_AASFail 					; out of memory as adding causes wrapround
.47c4	c5 34		cmp $34				cmp 	highMemory+1 				; >= high memory pointer.
.47c6	b0 01		bcs $47c9			bcs 	_AASFail
.47c8	60		rts				rts
.47c9					_AASFail:
.47c9	a2 22		ldx #$22			ldx 	#ErrorID_Memory
.47cb	20 18 15	jsr $1518		jsr	errorHandler
.47ce					MultiplyTemp2ByA:
.47ce	48		pha				pha
.47cf	a5 2e		lda $2e				lda 	temp2 						; copy temp2 to temp3.
.47d1	85 30		sta $30				sta 	temp3
.47d3	a5 2f		lda $2f				lda 	temp2+1
.47d5	85 31		sta $31				sta 	temp3+1
.47d7	68		pla				pla
.47d8	06 2e		asl $2e				asl 	temp2 						; double it.
.47da	26 2f		rol $2f				rol 	temp2+1
.47dc	c9 02		cmp #$02			cmp 	#2 							; if x 2 then exit.
.47de	f0 15		beq $47f5			beq 	_MTBAExit
.47e0	c9 06		cmp #$06			cmp 	#6 							; if x 6 then add temp3 to temp2
.47e2	d0 0d		bne $47f1			bne 	_MTBANotFloat
.47e4	18		clc				clc 								; so this will make it x 3
.47e5	a5 2e		lda $2e				lda 	temp2
.47e7	65 30		adc $30				adc 	temp3
.47e9	85 2e		sta $2e				sta 	temp2
.47eb	a5 2f		lda $2f				lda 	temp2+1
.47ed	65 31		adc $31				adc 	temp3+1
.47ef	85 2f		sta $2f				sta 	temp2+1
.47f1					_MTBANotFloat:
.47f1	06 2e		asl $2e				asl 	temp2 						; double it.
.47f3	26 2f		rol $2f				rol 	temp2+1
.47f5					_MTBAExit:
.47f5	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/variable/access.asm

.0e0f					varHash:
>0e0f							.fill	1
.0e10					varType:
>0e10							.fill 	1
.0e11					varEnd:
>0e11							.fill 	1
.003b					hashList:
>003b							.fill 	2
.47f6					AccessVariable:
.47f6	aa		tax				tax 								; stack in X
.47f7	c8		iny				iny									; look at second character
.47f8	b1 28		lda ($28),y			lda 	(codePtr),y
.47fa	88		dey				dey
.47fb	c9 3a		cmp #$3a			cmp 	#TYPE_INT 					; is it the integer marker ($3A)
.47fd	d0 15		bne $4814			bne 	_AVLong 					; no, always use the hash tables.
.47ff	b1 28		lda ($28),y			lda 	(codePtr),y 				; this is the 6 bit ASCII of A-Z 1-26
.4801	38		sec				sec 	 							; make it 0-25
.4802	e9 01		sbc #$01			sbc 	#1
.4804	0a		asl a				asl 	a 							; x 4 as 4 bytes / variable.
.4805	0a		asl a				asl 	a
.4806	95 98		sta $98,x			sta 	esInt0,x
.4808	a9 0a		lda #$0a			lda 	#SingleLetterVar >> 8 		; make it an address
.480a	95 a0		sta $a0,x			sta 	esInt1,x
.480c	a9 80		lda #$80			lda 	#$80 						; type is an integer reference.
.480e	95 90		sta $90,x			sta 	esType,x
.4810	c8		iny				iny 								; skip over the variable reference in the code.
.4811	c8		iny				iny  								; (1 letter, 1 type)
.4812	8a		txa				txa 								; stack in A to return.
.4813	60		rts				rts
.4814					_AVLong:
.4814	8a		txa				txa
.4815	48		pha				pha
.4816	20 5d 48	jsr $485d			jsr 	AccessSetup 				; set up the basic information we need for later
.4819	20 66 49	jsr $4966			jsr 	FindVariable 				; does the variable exist already ?
.481c	b0 0e		bcs $482c			bcs 	_AVFound 					; yes, then its found
.481e	ad 10 0e	lda $0e10			lda 	varType 					; otherwise, is the variable type an array
.4821	4a		lsr a				lsr 	a
.4822	90 05		bcc $4829			bcc 	_AVCanCreate 				; if not, we can autocreate
.4824	a2 15		ldx #$15			ldx 	#ErrorID_noauto
.4826	20 18 15	jsr $1518		jsr	errorHandler
.4829					_AVCanCreate:
.4829	20 9a 48	jsr $489a			jsr 	CreateVariable 				; variable does not exist, create it.
.482c					_AVFound:
.482c	68		pla				pla
.482d	aa		tax				tax
.482e	18		clc				clc 								; copy temp0 (variable record address)
.482f	a5 2a		lda $2a				lda 	temp0 						; +5 (to point to the data)
.4831	69 05		adc #$05			adc 	#5 							; (first 5 bytes are link, name, hash)
.4833	95 98		sta $98,x			sta 	esInt0,x
.4835	a5 2b		lda $2b				lda 	temp0+1
.4837	69 00		adc #$00			adc 	#0
.4839	95 a0		sta $a0,x			sta 	esInt1,x
.483b	a9 00		lda #$00			lda 	#0
.483d	95 a8		sta $a8,x			sta 	esInt2,x
.483f	95 b0		sta $b0,x			sta 	esInt3,x
.4841	ac 10 0e	ldy $0e10			ldy 	varType 					; get the type ID from the type.
.4844	b9 1d 48	lda $481d,y			lda 	_AVTypeTable-$3A,y 			; e.g. a reference to int/float/string.
.4847	95 90		sta $90,x			sta 	esType,x
.4849	ac 11 0e	ldy $0e11			ldy 	varEnd 						; restore Y
.484c	ad 10 0e	lda $0e10			lda 	VarType 					; get variable type, put LSB into C
.484f	4a		lsr a				lsr 	a
.4850	90 03		bcc $4855			bcc 	_AVNotArray 				; if carry set,it is an array variable.
.4852	20 fe 45	jsr $45fe			jsr 	AccessArray 				; array lookup. if LSB was set.
.4855					_AVNotArray:
.4855	8a		txa				txa 								; return stack in A and return
.4856	60		rts				rts
.4857					_AVTypeTable:
>4857	80 80						.byte 	$80,$80						; integer
>4859	c0 c0						.byte 	$C0,$C0 					; string
>485b	81 81						.byte 	$81,$81 					; float
.485d					AccessSetup:
.485d	a9 00		lda #$00			lda 	#0 							; zero the hash byte.
.485f	8d 0f 0e	sta $0e0f			sta 	varHash
.4862	98		tya				tya
.4863	48		pha				pha
.4864	b1 28		lda ($28),y	_ASLoop:lda 	(codePtr),y					; get next identifier character
.4866	c9 3a		cmp #$3a			cmp 	#$3A 						; is it 3A-3F which end all identifiers ?
.4868	b0 0b		bcs $4875			bcs 	_ASComplete
.486a	18		clc				clc 								; add to the hash. Might improve this.
.486b	6d 0f 0e	adc $0e0f			adc 	varHash
.486e	8d 0f 0e	sta $0e0f			sta 	varHash
.4871	c8		iny				iny 								; next character
.4872	4c 64 48	jmp $4864			jmp 	_ASLoop
.4875					_ASComplete:
.4875	8d 10 0e	sta $0e10			sta 	varType 					; save variable type byte
.4878	c8		iny				iny
.4879	8c 11 0e	sty $0e11			sty 	varEnd 						; save the ending position.
.487c	38		sec				sec 								; convert type byte from $3A-$3F to 0..5
.487d	e9 3a		sbc #$3a			sbc 	#$3A
.487f	0a		asl a				asl 	a 							; multiply by hashTableSize (8 in this case)
.4880	0a		asl a				asl 	a
.4881	0a		asl a				asl 	a
.4882	0a		asl a				asl 	a 							; 2 bytes/word
.4883	85 2a		sta $2a				sta 	temp0 						; this is the offset to the start of the table.
.4885	ad 0f 0e	lda $0e0f			lda 	varHash 					; get hash
.4888	29 07		and #$07			and 	#(hashTableSize-1)			; force into range (for 8,0..7)
.488a	0a		asl a				asl  	a 							; x 2 (for word) and clear carry
.488b	65 2a		adc $2a				adc 	temp0 						; now offset from the start of the hash table.
.488d	69 68		adc #$68			adc 	#hashTables & $FF 			; add to hash table base address
.488f	85 3b		sta $3b				sta 	hashList 					; making hashLists point to the head of the link list.
.4891	a9 0a		lda #$0a			lda 	#hashTables >> 8
.4893	69 00		adc #$00			adc 	#0
.4895	85 3c		sta $3c				sta 	hashList+1
.4897	68		pla				pla
.4898	a8		tay				tay
.4899	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/variable/create.asm

.489a					CreateVariable:
.489a	98		tya				tya 								; push Y on the stack twice.
.489b	48		pha				pha									; position in code of the new variable.
.489c	48		pha				pha
.489d	ae 10 0e	ldx $0e10			ldx 	varType 					; get var type 0-5 from the var type
.48a0	bd c4 48	lda $48c4,x			lda		_CVSize-$3A,x 				; the bytes required for this new variable.
.48a3	48		pha				pha 								; save length
.48a4	a5 35		lda $35				lda 	lowMemory 					; set low Memory ptr to temp0
.48a6	85 2a		sta $2a				sta 	temp0 						; (address of the new variable)
.48a8	a5 36		lda $36				lda 	lowMemory+1
.48aa	85 2b		sta $2b				sta 	temp0+1
.48ac	68		pla				pla 								; get length
.48ad	18		clc				clc 								; add to low memory.
.48ae	65 35		adc $35				adc 	lowMemory
.48b0	85 35		sta $35				sta 	lowMemory
.48b2	90 08		bcc $48bc			bcc 	_CVNoCarry
.48b4	e6 36		inc $36				inc 	lowMemory+1
.48b6	a5 36		lda $36				lda 	lowMemory+1 				; check out of memory.
.48b8	c5 34		cmp $34				cmp 	highMemory+1
.48ba	b0 3d		bcs $48f9			bcs 	_CVMemory
.48bc					_CVNoCarry:
.48bc	ad 0f 0e	lda $0e0f			lda 	varHash 					; store hash at offset 4.
.48bf	a0 04		ldy #$04			ldy 	#4
.48c1	91 2a		sta ($2a),y			sta 	(temp0),y
.48c3	68		pla				pla 								; offset, work out where the variable name is.
.48c4	18		clc				clc
.48c5	65 28		adc $28				adc 	codePtr
.48c7	a0 02		ldy #$02			ldy 	#2 							; copy that into slots 2 + 3.
.48c9	91 2a		sta ($2a),y			sta 	(temp0),y
.48cb	a5 29		lda $29				lda 	codePtr+1
.48cd	69 00		adc #$00			adc 	#0
.48cf	c8		iny				iny
.48d0	91 2a		sta ($2a),y			sta 	(temp0),y
.48d2	cd c9 0a	cmp $0ac9			cmp 	basePage+1 					; compare against the program base.
.48d5	b0 03		bcs $48da			bcs 	_CVNotImmediate
.48d7	20 3c 49	jsr $493c			jsr 	CloneVariableName 			; we need to clone the variable name (immediate mode)
.48da					_CVNotImmediate:
.48da	a0 00		ldy #$00			ldy 	#0 							; copy current hash pointer in link
.48dc	b1 3b		lda ($3b),y			lda 	(hashList),y 				; so we're inserting it in the front of a linked list
.48de	91 2a		sta ($2a),y			sta 	(temp0),y
.48e0	c8		iny				iny
.48e1	b1 3b		lda ($3b),y			lda 	(hashList),y
.48e3	91 2a		sta ($2a),y			sta 	(temp0),y
.48e5	a5 2b		lda $2b				lda 	temp0+1 					; set new link
.48e7	91 3b		sta ($3b),y			sta 	(hashList),y
.48e9	88		dey				dey
.48ea	a5 2a		lda $2a				lda 	temp0
.48ec	91 3b		sta ($3b),y			sta 	(hashList),y
.48ee	ad 10 0e	lda $0e10			lda 	varType 					; type in A
.48f1	a0 05		ldy #$05			ldy 	#5 							; offset in Y
.48f3	20 04 49	jsr $4904			jsr 	ZeroTemp0Y 					; zero (temp0),y with whatever type.
.48f6	68		pla				pla
.48f7	a8		tay				tay
.48f8	60		rts				rts
.48f9					_CVMemory:
.48f9	a2 22		ldx #$22			ldx 	#ErrorID_Memory
.48fb	20 18 15	jsr $1518		jsr	errorHandler
>48fe	09 07				_CVSize:.byte 	VarHSize+VarISize,VarHSize+VarASize 					; <storage for integer>
>4900	07 07						.byte 	VarHSize+VarSSize,VarHSize+VarASize 					; <storage for string>
>4902	0b 07						.byte 	VarHSize+VarFSize,VarHSize+VarASize 					; <storage for float>
.4904					ZeroTemp0Y:
.4904	4a		lsr a				lsr 	a 							; bit 0 in carry
.4905	0a		asl a				asl 	a
.4906	b0 19		bcs $4921			bcs 	_ZTExit 					; we don't initialise arrays.
.4908	c9 3c		cmp #$3c			cmp 	#$3C 						; check string
.490a	f0 16		beq $4922			beq 	_ZTWriteNullString 			; write "" string
.490c	c9 3e		cmp #$3e			cmp 	#$3E 						; check float
.490e	f0 22		beq $4932			beq 	_ZTWriteFloat
.4910	98		tya				tya
.4911	48		pha				pha
.4912	a9 00		lda #$00			lda 	#0
.4914	91 2a		sta ($2a),y			sta 	(temp0),y
.4916	c8		iny				iny
.4917	91 2a		sta ($2a),y			sta 	(temp0),y
.4919	c8		iny				iny
.491a	91 2a		sta ($2a),y			sta 	(temp0),y
.491c	c8		iny				iny
.491d	91 2a		sta ($2a),y			sta 	(temp0),y
.491f	68		pla				pla
.4920	a8		tay				tay
.4921					_ZTExit:
.4921	60		rts				rts
.4922					_ZTWriteNullString:
.4922	a9 00		lda #$00			lda 	#0 							; put a reference to null string as the default value.
.4924	8d ce 0a	sta $0ace			sta 	NullString
.4927	a9 ce		lda #$ce			lda 	#NullString & $FF
.4929	91 2a		sta ($2a),y			sta 	(temp0),y
.492b	a9 0a		lda #$0a			lda 	#NullString >> 8
.492d	c8		iny				iny
.492e	91 2a		sta ($2a),y			sta 	(temp0),y
.4930	88		dey				dey
.4931	60		rts				rts
.4932					_ZTWriteFloat:
.4932	8a		txa				txa
.4933	48		pha				pha
.4934	a2 20		ldx #$20		ldx	#32
.4936	20 30 22	jsr $2230		jsr	floatingpointHandler
.4939	68		pla				pla
.493a	aa		tax				tax
.493b	60		rts				rts
.493c					CloneVariableName:
.493c	a0 02		ldy #$02			ldy 	#2 							; copy vname address to temp2
.493e	b1 2a		lda ($2a),y			lda 	(temp0),y
.4940	85 2e		sta $2e				sta 	temp2
.4942	c8		iny				iny
.4943	b1 2a		lda ($2a),y			lda 	(temp0),y
.4945	85 2f		sta $2f				sta 	temp2+1
.4947	a5 36		lda $36				lda 	lowMemory+1 				; copy lowMemory address to (temp0),2/3
.4949	91 2a		sta ($2a),y			sta 	(temp0),y
.494b	88		dey				dey
.494c	a5 35		lda $35				lda 	lowMemory
.494e	91 2a		sta ($2a),y			sta 	(temp0),y
.4950	a0 00		ldy #$00			ldy 	#0 							; copy data from (temp2) to (lowMemory)
.4952					_CVNCopy:
.4952	b1 2e		lda ($2e),y			lda		(temp2),y
.4954	91 35		sta ($35),y			sta 	(lowMemory),y
.4956	c8		iny				iny
.4957	c9 3a		cmp #$3a			cmp 	#$3A 						; until the whole name has been copied.
.4959	90 f7		bcc $4952			bcc 	_CVNCopy
.495b	98		tya				tya 								; add Y to low memory
.495c	18		clc				clc
.495d	65 35		adc $35				adc 	lowMemory
.495f	85 35		sta $35				sta 	lowMemory
.4961	90 02		bcc $4965			bcc 	_CVNNoCarry
.4963	e6 36		inc $36				inc 	lowMemory+1
.4965					_CVNNoCarry:
.4965	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/variable/find.asm

.4966					FindVariable:
.4966	98		tya				tya
.4967	48		pha				pha
.4968	98		tya				tya 								; point temp2 to the actual name
.4969	18		clc				clc 								; in memory of the variable being created
.496a	65 28		adc $28				adc 	codePtr
.496c	85 2e		sta $2e				sta 	temp2
.496e	a5 29		lda $29				lda 	codePtr+1
.4970	69 00		adc #$00			adc 	#0
.4972	85 2f		sta $2f				sta 	temp2+1
.4974	a0 00		ldy #$00			ldy 	#0
.4976	a5 3b		lda $3b				lda 	hashList 					; copy hashlist to temp0
.4978	85 2a		sta $2a				sta 	temp0
.497a	a5 3c		lda $3c				lda 	hashList+1
.497c	85 2b		sta $2b				sta 	temp0+1
.497e	a0 01		ldy #$01	_FVNext:ldy 	#1 							; get MSB
.4980	b1 2a		lda ($2a),y			lda 	(temp0),y
.4982	f0 2c		beq $49b0			beq 	_FVFail
.4984	aa		tax				tax
.4985	88		dey				dey		 							; get LSB
.4986	b1 2a		lda ($2a),y			lda 	(temp0),y
.4988	85 2a		sta $2a				sta 	temp0 						; update pointer.
.498a	86 2b		stx $2b				stx 	temp0+1
.498c	a0 04		ldy #$04			ldy 	#4 							; check hashes match
.498e	b1 2a		lda ($2a),y			lda 	(temp0),y
.4990	cd 0f 0e	cmp $0e0f			cmp 	varHash
.4993	d0 e9		bne $497e			bne 	_FVNext 					; if not, no point in checking the name.
.4995	88		dey				dey 								; copy name pointer (+2,+3) to temp1.
.4996	b1 2a		lda ($2a),y			lda 	(temp0),y
.4998	85 2d		sta $2d				sta 	temp1+1
.499a	88		dey				dey
.499b	b1 2a		lda ($2a),y			lda 	(temp0),y
.499d	85 2c		sta $2c				sta 	temp1
.499f	a0 00		ldy #$00			ldy 	#0
.49a1					_FVCheck:
.49a1	b1 2c		lda ($2c),y			lda 	(temp1),y 					; compare names
.49a3	d1 2e		cmp ($2e),y			cmp 	(temp2),y
.49a5	d0 d7		bne $497e			bne 	_FVNext		 				; fail if different.
.49a7	c8		iny				iny
.49a8	c9 3a		cmp #$3a			cmp 	#$3A 						; until reached the end marker.
.49aa	90 f5		bcc $49a1			bcc 	_FVCheck
.49ac	68		pla				pla
.49ad	a8		tay				tay
.49ae	38		sec				sec
.49af	60		rts				rts
.49b0					_FVFail:
.49b0	68		pla				pla
.49b1	a8		tay				tay
.49b2	18		clc				clc
.49b3	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/variable/reset.asm

.49b4					HashTableReset:
.49b4	a2 60		ldx #$60			ldx 	#6*2*hashTableSize			; 6 types, 2 bytes per table entry.
.49b6	a9 00		lda #$00			lda 	#0
.49b8					_HTRClear:
.49b8	9d 67 0a	sta $0a67,x			sta 	hashTables-1,x
.49bb	ca		dex				dex
.49bc	d0 fa		bne $49b8			bne 	_HTRClear
.49be	60		rts				rts

;******  Return to file: variable/variable.asm

.49bf					variableHandler:
.49bf	7c c2 49	jmp ($49c2,x)			jmp 	(variableVectors,x)
.49c2					variableVectors:
>49c2	ca 49					.word _DummyControlHandler ; index 0
>49c4	f6 47					.word AccessVariable       ; index 2
>49c6	86 46					.word CreateArray          ; index 4
>49c8	b4 49					.word HashTableReset       ; index 6
.49ca					_DummyControlHandler:
.49ca	60		rts			rts

;******  Return to file: basic.asm

.49cb					section_end_variable:
.49cb					section_start_footer:

;******  Processing file: footer/footer.asm


;******  Processing file: footer/99end.asm

.003d					endZeroPage:
.0e12					endStorage:
>49cb							.align 	256
.4a00					programMemory:
>49ff	ff						.byte 	$FF

;******  Return to file: footer/footer.asm


;******  Return to file: basic.asm

.4a00					section_end_footer:

;******  End of listing
