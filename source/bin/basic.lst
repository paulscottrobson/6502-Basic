
; 64tass Turbo Assembler Macro V1.55.2200 listing file
; 64tass -Walias -Wmacro-prefix -Wall -q -c -L ../source/bin/basic.lst -l ../source/bin/basic.lbl -Wall -o ../source/bin/stub.prg basic.asm
; Tue Apr  6 17:03:37 2021

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: basic.asm

=0					cputype = 0
=1					autorun=1
=0					coldstartnew=0
=$1000					CodeStart = $1000
=$800					MemoryStorage = $800
=$9f00					EndOfMemory = $9F00
=$28					ZeroPageStorage = $28
=$90					StackAddress = $90
=8					StackSize = 8
=2					retStackSizePages = 2

;******  Processing file: header/01common.inc


;******  Processing file: header/../generated/installed.inc

=1					installed_header = 1
=1					installed_main = 1
=1					installed_variable = 1
=1					installed_assembler = 1
=1					installed_error = 1
=1					installed_extension = 1
=1					installed_string = 1
=1					installed_device = 1
=0					installed_floatingpoint = 0
=1					installed_interaction = 1
=1					installed_tokeniser = 1
=1					installed_footer = 1

;******  Return to file: header/01common.inc

=8					hashTableSize = 8			; if this changes, the calculation is AccessSetup has to match it.
="G"					markerGOSUB = 'G'
="R"					markerREPEAT = 'R'
="F"					markerFOR = 'F'
="W"					markerWHILE = 'W'
="P"					markerPROC = 'P'
="$"					markerSTRING = '$'
="#"					markerFLOAT = '#'
="%"					markerINT = '%'
=5					VarHSize = 5 								; header (2 link, 2 name, 1 hash)
=2					VarASize = 2 								; array [address of first level]
=4					VarISize = 4 								; integer (32 bit)
=6					VarFSize = 6 								; float (4 mantissa, 1 exponent 1 sign/zero)
=2					VarSSize = 2 								; address (2 bytes)

;******  Return to file: basic.asm


;******  Processing file: header/02macros.inc


;******  Return to file: basic.asm


;******  Processing file: header/03data.inc

>0028					codePtr:.fill 	2							; (codePtr),y points to code.
>002a					temp0: 	.fill 	2							; working variables.
>002c					temp1: 	.fill 	2
>002e					temp2: 	.fill 	2
>0030					temp3: 	.fill 	2
.0032					tempshort:
>0032							.fill 	1
.0033					highMemory:
>0033							.fill 	2
.0035					lowMemory:
>0035							.fill 	2
>0800							.align	256
.0800					returnStack:
>0800							.fill 	retStackSizePages * 256
=512					retStackSize = retStackSizePages * 256
.0a00					SingleLetterVar:
>0a00					 		.fill 	26*4
.0a68					currentStorage:
>0090					esType:	.fill 	StackSize  					; type byte (see above)
>0098					esInt0:	.fill 	StackSize 					; integer or mantissa
>00a0					esInt1:	.fill 	StackSize
>00a8					esInt2:	.fill 	StackSize
>00b0					esInt3:	.fill 	StackSize
>00b8					esExp:	.fill 	StackSize 					; exponent ($80 = 0)
>00c0					esZSign:.fill 	StackSize 					; for floating point - sign (bit 7) isZero (bit 6)
.00c8					endOfStack:
=$98					esMant0 = esInt0 							; synonyms.
=$a0					esMant1 = esInt1
=$a8					esMant2 = esInt2
=$b0					esMant3 = esInt3
.0a68					hashTables:
>0a68							.fill 	6*2*hashTableSize
.0ac8					basePage:
>0ac8							.fill 	2
.0aca					endProgram:
>0aca							.fill 	2
.0acc					endMemory:
>0acc							.fill 	2
.0ace					NullString:
>0ace							.fill 	1							; don't waste memory concreting null strings.
.0acf					convertBuffer:
>0acf							.fill 	35
.0af2					jumpVector:
>0af2							.fill 	2

;******  Processing file: header/../generated/tokenconst.inc

=$80					TOK_EOL=$80
=$81					TOK_SHIFT1=$81
=$82					TOK_SHIFT2=$82
=$83					TOK_SHIFT3=$83
=$84					TOK_FPC=$84
=$85					TOK_STR=$85
=$86					TOK_BINARYST=$86
=$99					TOK_STRUCTST=$99
=$a4					TOK_UNARYST=$a4
=$c9					TOK_TOKENS=$c9
=$86					TKW_AND                      = $86 ; and
=$87					TKW_OR                       = $87 ; or
=$88					TKW_XOR                      = $88 ; xor
=$89					TKW_GREATEREQUAL             = $89 ; >=
=$8a					TKW_LESSEQUAL                = $8a ; <=
=$8b					TKW_GREATER                  = $8b ; >
=$8c					TKW_LESS                     = $8c ; <
=$8d					TKW_EQUAL                    = $8d ; =
=$8e					TKW_LESSGREATER              = $8e ; <>
=$8f					TKW_PLUS                     = $8f ; +
=$90					TKW_MINUS                    = $90 ; -
=$91					TKW_GREATERGREATER           = $91 ; >>
=$92					TKW_LESSLESS                 = $92 ; <<
=$93					TKW_STAR                     = $93 ; *
=$94					TKW_SLASH                    = $94 ; /
=$95					TKW_MOD                      = $95 ; mod
=$96					TKW_HAT                      = $96 ; ^
=$97					TKW_PLING                    = $97 ; !
=$98					TKW_QMARK                    = $98 ; ?
=$99					TKW_REPEAT                   = $99 ; repeat
=$9a					TKW_WHILE                    = $9a ; while
=$9b					TKW_FOR                      = $9b ; for
=$9c					TKW_IF                       = $9c ; if
=$9d					TKW_DEFPROC                  = $9d ; defproc
=$9e					TKW_UNTIL                    = $9e ; until
=$9f					TKW_WEND                     = $9f ; wend
=$a0					TKW_NEXT                     = $a0 ; next
=$a1					TKW_THEN                     = $a1 ; then
=$a2					TKW_ENDIF                    = $a2 ; endif
=$a3					TKW_ENDPROC                  = $a3 ; endproc
=$a4					TKW_LPAREN                   = $a4 ; (
=$a5					TKW_LENLPAREN                = $a5 ; len(
=$a6					TKW_SGNLPAREN                = $a6 ; sgn(
=$a7					TKW_ABSLPAREN                = $a7 ; abs(
=$a8					TKW_RANDOMLPAREN             = $a8 ; random(
=$a9					TKW_PAGE                     = $a9 ; page
=$aa					TKW_TRUE                     = $aa ; true
=$ab					TKW_FALSE                    = $ab ; false
=$ac					TKW_MINLPAREN                = $ac ; min(
=$ad					TKW_MAXLPAREN                = $ad ; max(
=$ae					TKW_SYSLPAREN                = $ae ; sys(
=$af					TKW_TIMERLPAREN              = $af ; timer(
=$b0					TKW_EVENTLPAREN              = $b0 ; event(
=$b1					TKW_GETLPAREN                = $b1 ; get(
=$b2					TKW_INKEYLPAREN              = $b2 ; inkey(
=$b3					TKW_ALLOCLPAREN              = $b3 ; alloc(
=$b4					TKW_CHRDOLLARLPAREN          = $b4 ; chr$(
=$b5					TKW_LEFTDOLLARLPAREN         = $b5 ; left$(
=$b6					TKW_MIDDOLLARLPAREN          = $b6 ; mid$(
=$b7					TKW_RIGHTDOLLARLPAREN        = $b7 ; right$(
=$b8					TKW_STRDOLLARLPAREN          = $b8 ; str$(
=$b9					TKW_VALLPAREN                = $b9 ; val(
=$ba					TKW_PEEKLPAREN               = $ba ; peek(
=$bb					TKW_DEEKLPAREN               = $bb ; deek(
=$bc					TKW_LEEKLPAREN               = $bc ; leek(
=$bd					TKW_ASCLPAREN                = $bd ; asc(
=$be					TKW_INTLPAREN                = $be ; int(
=$bf					TKW_FLOATLPAREN              = $bf ; float(
=$c0					TKW_ISVALLPAREN              = $c0 ; isval(
=$c1					TKW_UPPERDOLLARLPAREN        = $c1 ; upper$(
=$c2					TKW_LOWERDOLLARLPAREN        = $c2 ; lower$(
=$c3					TKW_ATC                      = $c3 ; @
=$c4					TKW_WAVY                     = $c4 ; ~
=$c5					TKW_AMP                      = $c5 ; &
=$c6					TKW_GETDOLLARLPAREN          = $c6 ; get$(
=$c7					TKW_INKEYDOLLARLPAREN        = $c7 ; inkey$(
=$c8					TKW_MEM                      = $c8 ; mem
=$c9					TKW_RPAREN                   = $c9 ; )
=$ca					TKW_COLON                    = $ca ; :
=$cb					TKW_COMMA                    = $cb ; ,
=$cc					TKW_SEMICOLON                = $cc ; ;
=$cd					TKW_QUOTE                    = $cd ; '
=$ce					TKW_TO                       = $ce ; to
=$cf					TKW_STEP                     = $cf ; step
=$d0					TKW_PROC                     = $d0 ; proc
=$d1					TKW_LOCAL                    = $d1 ; local
=$d2					TKW_DIM                      = $d2 ; dim
=$d3					TKW_REM                      = $d3 ; rem
=$d4					TKW_LET                      = $d4 ; let
=$d5					TKW_INPUT                    = $d5 ; input
=$d6					TKW_ELSE                     = $d6 ; else
=$d7					TKW_VDU                      = $d7 ; vdu
=$d8					TKW_PRINT                    = $d8 ; print
=$d9					TKW_DATA                     = $d9 ; data
=$da					TKW_IMAGE                    = $da ; image
=$db					TKW_AT                       = $db ; at
=$dc					TKW_FLIP                     = $dc ; flip
=$dd					TKW_ASSERT                   = $dd ; assert
=$de					TKW_POKE                     = $de ; poke
=$df					TKW_DOKE                     = $df ; doke
=$e0					TKW_LOKE                     = $e0 ; loke
=$e1					TKW_INK                      = $e1 ; ink
=$e2					TKW_PAPER                    = $e2 ; paper
=$e3					TKW_CLS                      = $e3 ; cls
=$e4					TKW_LOCATE                   = $e4 ; locate
=$e5					TKW_PERIOD                   = $e5 ; .
=$e6					TKW_FROM                     = $e6 ; from
=$e7					TKW_HASH                     = $e7 ; #
=$e8					TKW_CLEAR                    = $e8 ; clear
=$e9					TKW_TEXT                     = $e9 ; text
=$86					TKW_LOAD                     = $86 ; load
=$87					TKW_SAVE                     = $87 ; save
=$88					TKW_LIST                     = $88 ; list
=$89					TKW_NEW                      = $89 ; new
=$8a					TKW_BREAK                    = $8a ; break
=$8b					TKW_RUN                      = $8b ; run
=$8c					TKW_READ                     = $8c ; read
=$8d					TKW_RESTORE                  = $8d ; restore
=$8e					TKW_END                      = $8e ; end
=$8f					TKW_STOP                     = $8f ; stop
=$90					TKW_XEMU                     = $90 ; xemu
=$91					TKW_GOTO                     = $91 ; goto
=$92					TKW_GOSUB                    = $92 ; gosub
=$93					TKW_RETURN                   = $93 ; return
=$94					TKW_ORA                      = $94 ; ora
=$95					TKW_LPARENANDRPAREN          = $95 ; (and)
=$96					TKW_EOR                      = $96 ; eor
=$97					TKW_ADC                      = $97 ; adc
=$98					TKW_STA                      = $98 ; sta
=$99					TKW_LDA                      = $99 ; lda
=$9a					TKW_CMP                      = $9a ; cmp
=$9b					TKW_SBC                      = $9b ; sbc
=$9c					TKW_ASL                      = $9c ; asl
=$9d					TKW_ROL                      = $9d ; rol
=$9e					TKW_LSR                      = $9e ; lsr
=$9f					TKW_ROR                      = $9f ; ror
=$a0					TKW_STX                      = $a0 ; stx
=$a1					TKW_LDX                      = $a1 ; ldx
=$a2					TKW_DEC                      = $a2 ; dec
=$a3					TKW_INC                      = $a3 ; inc
=$a4					TKW_STZ                      = $a4 ; stz
=$a5					TKW_BIT                      = $a5 ; bit
=$a6					TKW_STY                      = $a6 ; sty
=$a7					TKW_LDY                      = $a7 ; ldy
=$a8					TKW_CPY                      = $a8 ; cpy
=$a9					TKW_CPX                      = $a9 ; cpx
=$aa					TKW_TSB                      = $aa ; tsb
=$ab					TKW_TRB                      = $ab ; trb
=$ac					TKW_JSR                      = $ac ; jsr
=$ad					TKW_JMP                      = $ad ; jmp
=$ae					TKW_BPL                      = $ae ; bpl
=$af					TKW_BMI                      = $af ; bmi
=$b0					TKW_BVC                      = $b0 ; bvc
=$b1					TKW_BVS                      = $b1 ; bvs
=$b2					TKW_BCC                      = $b2 ; bcc
=$b3					TKW_BCS                      = $b3 ; bcs
=$b4					TKW_BNE                      = $b4 ; bne
=$b5					TKW_BEQ                      = $b5 ; beq
=$b6					TKW_BRA                      = $b6 ; bra
=$b7					TKW_BRK                      = $b7 ; brk
=$b8					TKW_PHP                      = $b8 ; php
=$b9					TKW_CLC                      = $b9 ; clc
=$ba					TKW_PLP                      = $ba ; plp
=$bb					TKW_SEC                      = $bb ; sec
=$bc					TKW_RTI                      = $bc ; rti
=$bd					TKW_PHA                      = $bd ; pha
=$be					TKW_CLI                      = $be ; cli
=$bf					TKW_PHY                      = $bf ; phy
=$c0					TKW_RTS                      = $c0 ; rts
=$c1					TKW_PLA                      = $c1 ; pla
=$c2					TKW_SEI                      = $c2 ; sei
=$c3					TKW_PLY                      = $c3 ; ply
=$c4					TKW_DEY                      = $c4 ; dey
=$c5					TKW_TXA                      = $c5 ; txa
=$c6					TKW_TYA                      = $c6 ; tya
=$c7					TKW_TXS                      = $c7 ; txs
=$c8					TKW_TAY                      = $c8 ; tay
=$c9					TKW_TAX                      = $c9 ; tax
=$ca					TKW_CLV                      = $ca ; clv
=$cb					TKW_TSX                      = $cb ; tsx
=$cc					TKW_INY                      = $cc ; iny
=$cd					TKW_DEX                      = $cd ; dex
=$ce					TKW_CLD                      = $ce ; cld
=$cf					TKW_PHX                      = $cf ; phx
=$d0					TKW_INX                      = $d0 ; inx
=$d1					TKW_NOP                      = $d1 ; nop
=$d2					TKW_SED                      = $d2 ; sed
=$d3					TKW_PLX                      = $d3 ; plx
=$86					TKW_VPOKE                    = $86 ; vpoke
=$87					TKW_VDOKE                    = $87 ; vdoke
=$88					TKW_VLOAD                    = $88 ; vload
=$89					TKW_MODE                     = $89 ; mode
=$8a					TKW_PALETTE                  = $8a ; palette
=$8b					TKW_SPRITE                   = $8b ; sprite
=$8c					TKW_CLG                      = $8c ; clg
=$8d					TKW_RECT                     = $8d ; rect
=$8e					TKW_FRAME                    = $8e ; frame
=$8f					TKW_DRAW                     = $8f ; draw
=$90					TKW_PLOT                     = $90 ; plot
=$91					TKW_LINE                     = $91 ; line
=$92					TKW_PAINT                    = $92 ; paint
=$93					TKW_SOUND                    = $93 ; sound
=$94					TKW_VOLUME                   = $94 ; volume
=$86					TKW_VPEEKLPAREN              = $86 ; vpeek(
=$87					TKW_VDEEKLPAREN              = $87 ; vdeek(
=$88					TKW_SPRITEPERIODXLPAREN      = $88 ; sprite.x(
=$89					TKW_SPRITEPERIODYLPAREN      = $89 ; sprite.y(
=$8a					TKW_HITLPAREN                = $8a ; hit(
=$8b					TKW_JOYPERIODXLPAREN         = $8b ; joy.x(
=$8c					TKW_JOYPERIODYLPAREN         = $8c ; joy.y(
=$8d					TKW_JOYPERIODBLPAREN         = $8d ; joy.b(
=$8e					TKW_CLOCKLPAREN              = $8e ; clock(

;******  Return to file: header/03data.inc

=$3a					TYPE_INT =		($3A) 						; type bytes that end identifier.
=$3b					TYPE_INTARRAY =	($3B)
=$3c					TYPE_STR =		($3C)
=$3d					TYPE_STRARRAY =	($3D)
=$3e					TYPE_FLOAT =	($3E)
=$3f					TYPE_FLOATARRAY=($3F)

;******  Processing file: header/../generated/asmconst.inc

=$94					TKA_GROUP1 = $94
=$9c					TKA_GROUP2 = $9c
=$ae					TKA_GROUP3 = $ae
=$b7					TKA_GROUP4 = $b7
=$d4					TKA_END4 = $d4

;******  Return to file: header/03data.inc


;******  Return to file: basic.asm


;******  Processing file: header/header.inc


;******  Return to file: basic.asm


;******  Processing file: assembler/asmconst.inc

=0					AMD_IMM		= 0					; Immediate mode.
=1					AMD_ZERO 	= 1					; Zero Page
=2					AMD_ACCIMP	= 2					; Accumulator/Implied
=3					AMD_ABS 	= 3					; Absolute
=4					AMD_ZEROINDY= 4					; Zero Indirect,Y
=5					AMD_ZEROX 	= 5					; Zero Page,X
=6					AMD_ABSY 	= 6					; Absolute,Y
=7					AMD_ABSX 	= 7					; Absolute,X
=8					AMD_ZEROIND = 8					; Zero Indirect
=9					AMD_ZEROY 	= 9					; Zero Page,Y
=10					AMD_ABSIND 	= 10				; Absolute Indirect
=11					AMD_ABSINDX	= 11				; Absolute Indirect Indexed
=12					AMD_REL		= 12				; Relative
=13					AMD_ZEROINDX= 13 				; Zero Indirect,X

;******  Return to file: basic.asm


;******  Processing file: assembler/assembler.inc


;******  Return to file: basic.asm


;******  Processing file: device/device.inc


;******  Return to file: basic.asm


;******  Processing file: error/error.inc


;******  Return to file: basic.asm


;******  Processing file: error/errorhandler.inc


;******  Processing file: error/../generated/errorid.inc

=1					ErrorID_Missing = 1 ; Feature not Present
=2					ErrorID_Syntax = 2 ; Syntax Error
=3					ErrorID_NoModule = 3 ; Module disabled
=4					ErrorID_Assert = 4 ; Assertion failed
=5					ErrorID_DivZero = 5 ; Divide By Zero
=6					ErrorID_Stop = 6 ; Stop
=7					ErrorID_BadType = 7 ; Type Mismatch
=8					ErrorID_BadValue = 8 ; Illegal Value
=9					ErrorID_MissingRP = 9 ; Missing right bracket
=10					ErrorID_MissingComma = 10 ; Missing comma
=11					ErrorID_NoReference = 11 ; Missing reference
=12					ErrorID_LineNumber = 12 ; Line Number not found
=13					ErrorID_StrLen = 13 ; String too long
=14					ErrorID_ReturnErr = 14 ; RETURN without GOSUB
=15					ErrorID_UntilErr = 15 ; UNTIL without REPEAT
=16					ErrorID_NextErr = 16 ; NEXT without FOR
=17					ErrorID_WendErr = 17 ; WEND without WHILE
=18					ErrorID_endprocErr = 18 ; ENDPROC without PROC
=19					ErrorID_BadIndex = 19 ; Bad NEXT index
=20					ErrorID_Struct = 20 ; Structures nested wrong
=21					ErrorID_NoAuto = 21 ; Cannot create variable
=22					ErrorID_RetStack = 22 ; Return stack out of space
=23					ErrorID_NoProc = 23 ; Unknown Procedure
=24					ErrorID_Params = 24 ; Parameters do not match
=25					ErrorID_DupArray = 25 ; Array already defined
=26					ErrorID_NotArray = 26 ; DIM requires array
=27					ErrorID_ArrayIndex = 27 ; Bad array index
=28					ErrorID_ArrayDepth = 28 ; Wrong number of array indices
=29					ErrorID_DataError = 29 ; Out of data
=30					ErrorID_Tokenise = 30 ; Cannot tokenise line
=31					ErrorID_Save = 31 ; Save failed
=32					ErrorID_Load = 32 ; Load failed
=33					ErrorID_Break = 33 ; Break
=34					ErrorID_Memory = 34 ; Out of memory
=35					ErrorID_NumStack = 35 ; Expression too complex
=36					ErrorID_Assembler = 36 ; Bad Operand/Mode
=37					ErrorID_Branch = 37 ; Branch out of range
=38					ErrorID_Label = 38 ; Label changed value
=39					ErrorID_NoSprite = 39 ; No Sprite Selected
=40					ErrorID_Hardware = 40 ; Hardware

;******  Return to file: error/errorhandler.inc


;******  Return to file: basic.asm


;******  Processing file: extension/extension.inc


;******  Return to file: basic.asm


;******  Processing file: extension/option_x16/x16const.inc

=64					X16MaxImages = 64 							; max # of sprite images.

;******  Return to file: basic.asm


;******  Processing file: floatingpoint/float.inc

=5					FloatEmbeddedSize = 5

;******  Return to file: basic.asm


;******  Processing file: floatingpoint/floatingpoint.inc


;******  Return to file: basic.asm


;******  Processing file: interaction/interaction.inc


;******  Return to file: basic.asm


;******  Processing file: main/main.inc


;******  Return to file: basic.asm


;******  Processing file: string/functions/memory.inc

=252					MaxStringSize = 252

;******  Return to file: basic.asm


;******  Processing file: string/string.inc


;******  Return to file: basic.asm


;******  Processing file: tokeniser/detokenise/colouring.inc

=$84					LTYLineNumber = $84
=$82					LTYPunctuation = $82
=$87					LTYIdentifier = $87
=$86					LTYConstant = $86
=$83					LTYKeyword = $83
=$81					LTYString = $81

;******  Return to file: basic.asm


;******  Processing file: tokeniser/tokeniser.inc


;******  Return to file: basic.asm


;******  Processing file: variable/variable.inc


;******  Return to file: basic.asm


;******  Processing file: footer/footer.inc


;******  Return to file: basic.asm

.1000					section_start_header:

;******  Processing file: header/header.asm


;******  Processing file: header/00start.asm

.1000					Start:
.1000	4c 0a 10	jmp $100a			jmp 	GoColdStart 				; +0 	boot BASIC
.1003	4c 58 10	jmp $1058			jmp 	GoTokTest					; +3 	run tokeniser test code.
>1006	a6 46						.word 	TokenTableAddress
.1008							else
>1008	00 00						.word 	0
.100a					GoColdStart:
.100a	a9 00		lda #$00			lda 	#(programMemory) & $FF
.100c	8d c8 0a	sta $0ac8			sta 	basePage
.100f	a9 4f		lda #$4f			lda 	#(programMemory) >> 8
.1011	8d c9 0a	sta $0ac9			sta 	1+(basePage)
.1014	a9 00		lda #$00			lda 	#(endOfMemory) & $FF
.1016	8d cc 0a	sta $0acc			sta 	endMemory
.1019	a9 9f		lda #$9f			lda 	#(endOfMemory) >> 8
.101b	8d cd 0a	sta $0acd			sta 	1+(endMemory)
.101e	20 26 10	jsr $1026			jsr 	InitialiseAll 				; initialise everything.
.1021	a2 02		ldx #$02		ldx	#2
.1023	20 31 28	jsr $2831		jsr	interactionHandler

;******  Processing file: header/../generated/initialiseall.asm

.1026					InitialiseAll:
.1026	a9 00		lda #$00		lda #0
.1028	a2 00		ldx #$00		ldx	#0
.102a	20 b4 13	jsr $13b4		jsr	assemblerHandler
.102d	a9 00		lda #$00		lda #0
.102f	a2 00		ldx #$00		ldx	#0
.1031	20 06 15	jsr $1506		jsr	deviceHandler
.1034	a9 00		lda #$00		lda #0
.1036	a2 00		ldx #$00		ldx	#0
.1038	20 31 28	jsr $2831		jsr	interactionHandler
.103b	a9 00		lda #$00		lda #0
.103d	a2 00		ldx #$00		ldx	#0
.103f	20 fb 3e	jsr $3efb		jsr	mainHandler
.1042	a9 00		lda #$00		lda #0
.1044	a2 00		ldx #$00		ldx	#0
.1046	20 c6 41	jsr $41c6		jsr	stringHandler
.1049	a9 00		lda #$00		lda #0
.104b	a2 00		ldx #$00		ldx	#0
.104d	20 6a 4a	jsr $4a6a		jsr	tokeniserHandler
.1050	a9 00		lda #$00		lda #0
.1052	a2 00		ldx #$00		ldx	#0
.1054	20 49 4e	jsr $4e49		jsr	variableHandler
.1057	60		rts			rts

;******  Return to file: header/00start.asm

.1058					GoTokTest:
.1058	a2 06		ldx #$06		ldx	#6
.105a	20 6a 4a	jsr $4a6a		jsr	tokeniserHandler

;******  Return to file: header/header.asm


;******  Return to file: basic.asm

.105d					section_end_header:
.105d					section_start_assembler:

;******  Processing file: assembler/assembler.asm


;******  Processing file: assembler/asmoperand.asm

.105d					AsmGetOperand:
.105d	a2 00		ldx #$00			ldx 	#0 							; clear the operand.
.105f	8a		txa				txa
.1060	95 98		sta $98,x			sta 	esInt0,x
.1062	95 a0		sta $a0,x			sta 	esInt1,x
.1064	95 a8		sta $a8,x			sta 	esInt2,x
.1066	95 b0		sta $b0,x			sta 	esInt3,x
.1068	b1 28		lda ($28),y			lda 	(codePtr),y 				; first into X
.106a	aa		tax				tax
.106b	a9 02		lda #$02			lda 	#AMD_ACCIMP
.106d	e0 80		cpx #$80			cpx 	#TOK_EOL 					; if end of line or colon, return implied mode.
.106f	f0 41		beq $10b2			beq 	_AGOExit
.1071	e0 ca		cpx #$ca			cpx 	#TKW_COLON
.1073	f0 3d		beq $10b2			beq 	_AGOExit
.1075	c8		iny				iny 								; consume the token
.1076	a9 00		lda #$00			lda 	#AMD_IMM
.1078	e0 e7		cpx #$e7			cpx 	#TKW_HASH 					; if a hash present, then immediate mode.
.107a	f0 2d		beq $10a9			beq		_AGOEvalExit 				; with an operand.
.107c	e0 a4		cpx #$a4			cpx 	#TKW_LPAREN 				; left bracket ?
.107e	f0 40		beq $10c0			beq 	_AGOIndirect
.1080	e0 01		cpx #$01			cpx 	#$01 						; is it "A" e.g. the variable A.
.1082	d0 0b		bne $108f			bne 	_AGOZeroPage1 				; if not it is zero zero,x zero,y, unpick 1 iny
.1084	b1 28		lda ($28),y			lda 	(codePtr),y 				; get the second character & consume it
.1086	c8		iny				iny
.1087	aa		tax				tax
.1088	a9 02		lda #$02			lda 	#AMD_ACCIMP 				; and return Acc/Implied if it is just A
.108a	e0 3a		cpx #$3a			cpx 	#$3A
.108c	f0 24		beq $10b2			beq 	_AGOExit
.108e	88		dey				dey 								; unpick 2 iny
.108f					_AGOZeroPage1:
.108f	88		dey				dey
.1090	a9 00		lda #$00			lda 	#0 							; get the address into esInt0/1
.1092	a2 0a		ldx #$0a		ldx	#10
.1094	20 fb 3e	jsr $3efb		jsr	mainHandler
.1097	20 ef 10	jsr $10ef			jsr 	AsmGetIndexing
.109a	a9 01		lda #$01			lda 	#AMD_ZERO
.109c	90 14		bcc $10b2			bcc 	_AGOExit
.109e	a9 05		lda #$05			lda 	#AMD_ZEROX
.10a0	e0 00		cpx #$00			cpx 	#0
.10a2	f0 0e		beq $10b2			beq 	_AGOExit
.10a4	a9 09		lda #$09			lda 	#AMD_ZEROY
.10a6	4c b2 10	jmp $10b2			jmp 	_AGOExit
.10a9					_AGOEvalExit:
.10a9	48		pha				pha
.10aa	a9 00		lda #$00			lda 	#0 							; evaluate operand in root.
.10ac	a2 0a		ldx #$0a		ldx	#10
.10ae	20 fb 3e	jsr $3efb		jsr	mainHandler
.10b1	68		pla				pla
.10b2					_AGOExit:
.10b2	48		pha				pha 								; save the mode
.10b3	a5 a8		lda $a8				lda 	esInt2 						; check the operand is zero.
.10b5	05 b0		ora $b0				ora 	esInt3
.10b7	d0 02		bne $10bb			bne 	_AGOValue
.10b9	68		pla				pla
.10ba	60		rts				rts
.10bb					_AGOValue:
.10bb	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.10bd	20 36 15	jsr $1536		jsr	errorHandler
.10c0					_AGOIndirect:
.10c0	a9 00		lda #$00			lda 	#0 							; evaluate operand in root.
.10c2	a2 0a		ldx #$0a		ldx	#10
.10c4	20 fb 3e	jsr $3efb		jsr	mainHandler
.10c7	b1 28		lda ($28),y			lda 	(codePtr),y 				; does ) follow ? if so might be ) or ),Y
.10c9	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.10cb	f0 11		beq $10de			beq 	_AGOIndIndY
.10cd	20 ef 10	jsr $10ef			jsr 	ASMGetIndexing 				; must be ,X)
.10d0	90 39		bcc $110b			bcc 	AGISyntax
.10d2	e0 00		cpx #$00			cpx 	#0
.10d4	d0 35		bne $110b			bne 	AGISyntax
.10d6	a2 04		ldx #$04		ldx	#4
.10d8	20 fb 3e	jsr $3efb		jsr	mainHandler
.10db	a9 0d		lda #$0d			lda 	#AMD_ZEROINDX
.10dd	60		rts				rts
.10de					_AGOIndIndY:
.10de	c8		iny				iny
.10df	20 ef 10	jsr $10ef			jsr 	ASMGetIndexing 				; get indexing if any
.10e2	a9 08		lda #$08			lda 	#AMD_ZEROIND
.10e4	90 cc		bcc $10b2			bcc 	_AGOExit 					; none then exit
.10e6	e0 00		cpx #$00			cpx 	#0 							; must be ,Y
.10e8	f0 21		beq $110b			beq 	AGISyntax
.10ea	a9 04		lda #$04			lda 	#AMD_ZEROINDY
.10ec	4c b2 10	jmp $10b2			jmp 	_AGOExit
.10ef					AsmGetIndexing:
.10ef	b1 28		lda ($28),y			lda 	(codePtr),y 				; check for comma
.10f1	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.10f3	18		clc				clc
.10f4	d0 14		bne $110a			bne 	_AGIExit 					; no comma, return with CC
.10f6	c8		iny				iny 								; get what SHOULD be X or Y
.10f7	b1 28		lda ($28),y			lda 	(codePtr),y  				; read it
.10f9	38		sec				sec 								; subtract 6 bit ASCII of X
.10fa	e9 18		sbc #$18			sbc 	#"X" & $3F
.10fc	c9 02		cmp #$02			cmp 	#2 							; if unsigned >= 2 then error
.10fe	b0 0b		bcs $110b			bcs 	AGISyntax
.1100	aa		tax				tax 								; put in index
.1101	c8		iny				iny 								; get what follows that, should be the $3A marker
.1102	b1 28		lda ($28),y			lda 	(codePtr),y
.1104	c8		iny				iny
.1105	c9 3a		cmp #$3a			cmp 	#$3A
.1107	d0 02		bne $110b			bne 	AGISyntax
.1109	38		sec				sec 								; return CS and index mode in X
.110a					_AGIExit:
.110a	60		rts				rts
.110b					AGISyntax:
.110b	a2 02		ldx #$02			ldx 	#ErrorID_syntax
.110d	20 36 15	jsr $1536		jsr	errorHandler

;******  Return to file: assembler/assembler.asm


;******  Processing file: assembler/asmwrite.asm

.0af4					finalOpcode:
>0af4							.fill 	1
.1110					AsmWriteInstruction:
.1110	8d f4 0a	sta $0af4			sta 	finalOpcode					; save opcode.
.1113	98		tya				tya
.1114	48		pha				pha
.1115	ad 38 0a	lda $0a38			lda 	SingleLetterVar+("O"-"A")*4	; check O
.1118	29 02		and #$02			and 	#2
.111a	f0 2d		beq $1149			beq 	_ASMWNoEcho 				; if zero then don't echo.
.111c	ad 3d 0a	lda $0a3d			lda 	SingleLetterVar+("P"-"A")*4+1 ; write address in P
.111f	20 84 11	jsr $1184			jsr 	AWIWriteHex
.1122	ad 3c 0a	lda $0a3c			lda 	SingleLetterVar+("P"-"A")*4
.1125	20 84 11	jsr $1184			jsr 	AWIWriteHex
.1128	ad f4 0a	lda $0af4			lda 	finalOpcode 				; write opcode
.112b	20 7d 11	jsr $117d			jsr 	AWIWriteHexSpace
.112e	e0 00		cpx #$00			cpx 	#0
.1130	f0 0e		beq $1140			beq 	_ASMWEchoExit
.1132	a5 98		lda $98				lda 	esInt0
.1134	20 7d 11	jsr $117d			jsr 	AWIWriteHexSpace
.1137	e0 01		cpx #$01			cpx 	#1
.1139	f0 05		beq $1140			beq 	_ASMWEchoExit
.113b	a5 a0		lda $a0				lda 	esInt1
.113d	20 7d 11	jsr $117d			jsr 	AWIWriteHexSpace
.1140					_ASMWEchoExit:
.1140	8a		txa				txa
.1141	48		pha				pha
.1142	a2 06		ldx #$06		ldx	#6
.1144	20 06 15	jsr $1506		jsr	deviceHandler
.1147	68		pla				pla
.1148	aa		tax				tax
.1149					_ASMWNoEcho:
.1149	ad f4 0a	lda $0af4			lda 	finalOpcode
.114c	20 64 11	jsr $1164			jsr 	AsmWriteByte
.114f	e0 00		cpx #$00			cpx 	#0
.1151	f0 0e		beq $1161			beq 	_ASMWExit
.1153	a5 98		lda $98				lda 	esInt0
.1155	20 64 11	jsr $1164			jsr 	AsmWriteByte
.1158	e0 01		cpx #$01			cpx 	#1
.115a	f0 05		beq $1161			beq 	_ASMWExit
.115c	a5 a0		lda $a0				lda 	esInt1
.115e	20 64 11	jsr $1164			jsr 	AsmWriteByte
.1161					_ASMWExit:
.1161	68		pla				pla
.1162	a8		tay				tay
.1163	60		rts				rts
.1164					AsmWriteByte:
.1164	a0 00		ldy #$00			ldy 	#0
.1166	48		pha				pha
.1167	ad 3c 0a	lda $0a3c			lda 	SingleLetterVar+("P"-"A")*4 ; copy address to temp0
.116a	85 2a		sta $2a				sta 	temp0
.116c	ad 3d 0a	lda $0a3d			lda 	SingleLetterVar+("P"-"A")*4+1
.116f	85 2b		sta $2b				sta 	temp0+1
.1171	68		pla				pla 								; write out the byte.
.1172	91 2a		sta ($2a),y			sta 	(temp0),y
.1174	ee 3c 0a	inc $0a3c			inc 	SingleLetterVar+("P"-"A")*4	; increment P
.1177	d0 03		bne $117c			bne 	_AWBNoCarry
.1179	ee 3d 0a	inc $0a3d			inc 	SingleLetterVar+("P"-"A")*4+1
.117c					_AWBNoCarry:
.117c	60		rts				rts
.117d					AWIWriteHexSpace:
.117d	48		pha				pha
.117e	a9 20		lda #$20			lda 	#" "
.1180	20 97 11	jsr $1197			jsr 	AWIPrintChar
.1183	68		pla				pla
.1184					AWIWriteHex:
.1184	48		pha				pha
.1185	4a		lsr a				lsr 	a
.1186	4a		lsr a				lsr 	a
.1187	4a		lsr a				lsr 	a
.1188	4a		lsr a				lsr 	a
.1189	20 8d 11	jsr $118d			jsr 	AWIPrintNibble
.118c	68		pla				pla
.118d					AWIPrintNibble:
.118d	29 0f		and #$0f			and 	#15
.118f	c9 0a		cmp #$0a			cmp 	#10
.1191	90 02		bcc $1195			bcc 	_AWIPNDigit
.1193	69 06		adc #$06			adc 	#6
.1195					_AWIPNDigit:
.1195	69 30		adc #$30			adc 	#48
.1197					AWIPrintChar:
.1197	85 32		sta $32				sta 	tempShort
.1199	8a		txa				txa
.119a	48		pha				pha
.119b	a5 32		lda $32				lda 	tempShort
.119d	a2 16		ldx #$16		ldx	#22
.119f	20 06 15	jsr $1506		jsr	deviceHandler
.11a2	68		pla				pla
.11a3	aa		tax				tax
.11a4	60		rts				rts

;******  Return to file: assembler/assembler.asm


;******  Processing file: assembler/assemblecmd.asm

.0af5					asmToken:
>0af5							.fill 	1
.0af6					asmMode:
>0af6							.fill 	1 							; esInt0/1
.0af7					asmBaseOpcode:
>0af7							.fill 	1
.11a5					AssembleOneInstruction:
.11a5	8d f5 0a	sta $0af5			sta 	asmToken 					; save the token
.11a8	aa		tax				tax
.11a9	bd 72 11	lda $1172,x			lda 	OpcodeTable-TKA_GROUP1,x 	; get the base opcode.
.11ac	8d f7 0a	sta $0af7			sta 	asmBaseOpcode
.11af	20 5d 10	jsr $105d			jsr 	AsmGetOperand 				; identify the address mode and operand where applicable.
.11b2	8d f6 0a	sta $0af6			sta 	asmMode
.11b5	a5 a0		lda $a0				lda 	esInt1 						; check if this is a three byte operand.
.11b7	d0 05		bne $11be			bne 	_AOIThreeBytes 				; if so, we have to use three byte
.11b9	20 d4 11	jsr $11d4			jsr 	AssembleAttempt 			; try to assemble token/mode/operand (2 bytes)
.11bc	b0 10		bcs $11ce			bcs 	_AOISuccess 				; worked ok.
.11be					_AOIThreeBytes:
.11be	ae f6 0a	ldx $0af6			ldx 	asmMode 					; convert mode to 3 byte version, where possible.
.11c1	bd f8 11	lda $11f8,x			lda 	AbsoluteVersionTable,x
.11c4	30 09		bmi $11cf			bmi 	_AOIError					; not possible, no equivalent.
.11c6	8d f6 0a	sta $0af6			sta 	asmMode
.11c9	20 d4 11	jsr $11d4			jsr 	AssembleAttempt 			; try to assemble token/mode/operand (3 bytes)
.11cc	90 01		bcc $11cf			bcc 	_AOIError 					; didn't work.
.11ce					_AOISuccess:
.11ce	60		rts				rts
.11cf					_AOIError:
.11cf	a2 24		ldx #$24			ldx 	#ErrorID_Assembler
.11d1	20 36 15	jsr $1536		jsr	errorHandler
.11d4					AssembleAttempt:
.11d4	20 dd 11	jsr $11dd			jsr 	_AADispatch 				; go to the code which dispatches to the appropriate
.11d7	b0 03		bcs $11dc			bcs 	_AAExit 					; exit if carry set, e.g. was successful
.11d9	20 87 13	jsr $1387			jsr 	AssembleSpecialCase
.11dc					_AAExit:
.11dc	60		rts				rts
.11dd					_AADispatch:
.11dd	ad f5 0a	lda $0af5			lda 	asmToken
.11e0	c9 b7		cmp #$b7			cmp 	#TKA_GROUP4
.11e2	b0 11		bcs $11f5			bcs 	_AAGroup4
.11e4	c9 ae		cmp #$ae			cmp 	#TKA_GROUP3
.11e6	b0 0a		bcs $11f2			bcs 	_AAGroup3
.11e8	c9 9c		cmp #$9c			cmp 	#TKA_GROUP2
.11ea	b0 03		bcs $11ef			bcs 	_AAGroup2
.11ec	4c cd 12	jmp $12cd			jmp 	AssembleGroup1
.11ef					_AAGroup2:
.11ef	4c 28 13	jmp $1328			jmp 	AssembleGroup2
.11f2					_AAGroup3:
.11f2	4c 49 13	jmp $1349			jmp 	AssembleGroup3
.11f5					_AAGroup4:
.11f5	4c 7d 13	jmp $137d			jmp 	AssembleGroup4
.11f8					AbsoluteVersionTable:
>11f8	ff						.byte	$FF 			; fail AMD_IMM
>11f9	03						.byte	AMD_ABS 		; absolute AMD_ZERO
>11fa	ff						.byte	$FF 			; fail AMD_ACCIMP
>11fb	ff						.byte	$FF 			; fail AMD_ABS
>11fc	ff						.byte 	$FF 			; fail AMD_ZEROINDY
>11fd	07						.byte	AMD_ABSX 		; absolute AMD_ZEROX
>11fe	ff						.byte	$FF 			; fail AMD_ABSY
>11ff	ff						.byte	$FF 			; fail AMD_ABSX
>1200	0a						.byte	AMD_ABSIND 		; absolute AMD_ZEROIND
>1201	06						.byte	AMD_ABSY 		; absolute AMD_ZEROY
>1202	ff						.byte	$FF 			; fail AMD_ABSIND
>1203	ff						.byte	$FF 			; fail AMD_ABSINDX
>1204	ff						.byte	$FF 			; fail AMD_REL
>1205	0b						.byte 	AMD_ABSINDX 	; absolute AMD_ZEROINDX

;******  Processing file: assembler/../generated/asmtables.inc

.1206					OpcodeTable:
>1206	01					.byte	$01			; $94 ora
>1207	21					.byte	$21			; $95 (and)
>1208	41					.byte	$41			; $96 eor
>1209	61					.byte	$61			; $97 adc
>120a	81					.byte	$81			; $98 sta
>120b	a1					.byte	$a1			; $99 lda
>120c	c1					.byte	$c1			; $9a cmp
>120d	e1					.byte	$e1			; $9b sbc
>120e	02					.byte	$02			; $9c asl
>120f	22					.byte	$22			; $9d rol
>1210	42					.byte	$42			; $9e lsr
>1211	62					.byte	$62			; $9f ror
>1212	82					.byte	$82			; $a0 stx
>1213	a2					.byte	$a2			; $a1 ldx
>1214	c2					.byte	$c2			; $a2 dec
>1215	e2					.byte	$e2			; $a3 inc
>1216	60					.byte	$60			; $a4 stz
>1217	20					.byte	$20			; $a5 bit
>1218	80					.byte	$80			; $a6 sty
>1219	a0					.byte	$a0			; $a7 ldy
>121a	c0					.byte	$c0			; $a8 cpy
>121b	e0					.byte	$e0			; $a9 cpx
>121c	00					.byte	$00			; $aa tsb
>121d	10					.byte	$10			; $ab trb
>121e	14					.byte	$14			; $ac jsr
>121f	40					.byte	$40			; $ad jmp
>1220	10					.byte	$10			; $ae bpl
>1221	30					.byte	$30			; $af bmi
>1222	50					.byte	$50			; $b0 bvc
>1223	70					.byte	$70			; $b1 bvs
>1224	90					.byte	$90			; $b2 bcc
>1225	b0					.byte	$b0			; $b3 bcs
>1226	d0					.byte	$d0			; $b4 bne
>1227	f0					.byte	$f0			; $b5 beq
>1228	80					.byte	$80			; $b6 bra
>1229	00					.byte	$00			; $b7 brk
>122a	08					.byte	$08			; $b8 php
>122b	18					.byte	$18			; $b9 clc
>122c	28					.byte	$28			; $ba plp
>122d	38					.byte	$38			; $bb sec
>122e	40					.byte	$40			; $bc rti
>122f	48					.byte	$48			; $bd pha
>1230	58					.byte	$58			; $be cli
>1231	5a					.byte	$5a			; $bf phy
>1232	60					.byte	$60			; $c0 rts
>1233	68					.byte	$68			; $c1 pla
>1234	78					.byte	$78			; $c2 sei
>1235	7a					.byte	$7a			; $c3 ply
>1236	88					.byte	$88			; $c4 dey
>1237	8a					.byte	$8a			; $c5 txa
>1238	98					.byte	$98			; $c6 tya
>1239	9a					.byte	$9a			; $c7 txs
>123a	a8					.byte	$a8			; $c8 tay
>123b	aa					.byte	$aa			; $c9 tax
>123c	b8					.byte	$b8			; $ca clv
>123d	ba					.byte	$ba			; $cb tsx
>123e	c8					.byte	$c8			; $cc iny
>123f	ca					.byte	$ca			; $cd dex
>1240	d8					.byte	$d8			; $ce cld
>1241	da					.byte	$da			; $cf phx
>1242	e8					.byte	$e8			; $d0 inx
>1243	ea					.byte	$ea			; $d1 nop
>1244	f8					.byte	$f8			; $d2 sed
>1245	fa					.byte	$fa			; $d3 plx
.1246					Group2OpcodeAvailability:
>1246	ae					.byte	$ae			; $9c asl $02
>1247	ae					.byte	$ae			; $9d rol $22
>1248	ae					.byte	$ae			; $9e lsr $42
>1249	ae					.byte	$ae			; $9f ror $62
>124a	0a					.byte	$0a			; $a0 stx $82
>124b	0b					.byte	$0b			; $a1 ldx $a2
>124c	aa					.byte	$aa			; $a2 dec $c2
>124d	aa					.byte	$aa			; $a3 inc $e2
>124e	22					.byte	$22			; $a4 stz $60
>124f	aa					.byte	$aa			; $a5 bit $20
>1250	2a					.byte	$2a			; $a6 sty $80
>1251	ab					.byte	$ab			; $a7 ldy $a0
>1252	2b					.byte	$2b			; $a8 cpy $c0
>1253	0b					.byte	$0b			; $a9 cpx $e0
>1254	0a					.byte	$0a			; $aa tsb $00
>1255	0a					.byte	$0a			; $ab trb $10
>1256	08					.byte	$08			; $ac jsr $14
>1257	08					.byte	$08			; $ad jmp $40
.1258					AssemblerSpecialCases:
>1258	ad 0a 6c				.byte	$ad,10,$6c		; jmp (abs)
>125b	ad 0b 7c				.byte	$ad,11,$7c		; jmp (abs,x)
>125e	a1 06 be				.byte	$a1,6,$be		; ldx abs,y
>1261	a1 09 b6				.byte	$a1,9,$b6		; ldx zp,y
>1264	a0 09 96				.byte	$a0,9,$96		; stx zp,y
>1267	a3 02 1a				.byte	$a3,2,$1a		; inc acc
>126a	a2 02 3a				.byte	$a2,2,$3a		; dec acc
>126d	a5 00 89				.byte	$a5,0,$89		; bit #
>1270	a4 03 9c				.byte	$a4,3,$9c		; stz abs
>1273	a4 07 9e				.byte	$a4,7,$9e		; stz abs,x
>1276	00					.byte	0

;******  Return to file: assembler/assemblecmd.asm


;******  Return to file: assembler/assembler.asm


;******  Processing file: assembler/assemblelabel.asm

.1277					AssembleLabel:
.1277	b1 28		lda ($28),y			lda 	(codePtr),y 				; check it's followed by a variable name.
.1279	c9 3a		cmp #$3a			cmp 	#$3A
.127b	b0 4b		bcs $12c8			bcs 	_ALSyntax
.127d	a9 00		lda #$00			lda 	#0							; get a variable name on to stack:0
.127f	a2 02		ldx #$02		ldx	#2
.1281	20 49 4e	jsr $4e49		jsr	variableHandler
.1284	a5 90		lda $90				lda 	esType 						; check integer reference
.1286	c9 80		cmp #$80			cmp 	#$80
.1288	d0 3e		bne $12c8			bne 	_ALSyntax
.128a	a5 98		lda $98				lda 	esInt0 						; copy that reference address to temp0
.128c	85 2a		sta $2a				sta 	temp0
.128e	a5 a0		lda $a0				lda 	esInt1
.1290	85 2b		sta $2b				sta 	temp0+1
.1292	98		tya				tya
.1293	48		pha				pha
.1294	ad 38 0a	lda $0a38			lda 	SingleLetterVar+("O"-"A")*4	; are we in Pass 2
.1297	4a		lsr a				lsr 	a
.1298	90 11		bcc $12ab			bcc 	_ALWrite
.129a	a0 00		ldy #$00			ldy 	#0
.129c	ad 3c 0a	lda $0a3c			lda 	SingleLetterVar+("P"-"A")*4 ; compare the value in P to the variable
.129f	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.12a1	d0 20		bne $12c3			bne 	_ALChanged
.12a3	c8		iny				iny
.12a4	ad 3d 0a	lda $0a3d			lda 	SingleLetterVar+("P"-"A")*4+1
.12a7	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.12a9	d0 18		bne $12c3			bne 	_ALChanged
.12ab					_ALWrite:
.12ab	a0 00		ldy #$00			ldy 	#0
.12ad	ad 3c 0a	lda $0a3c			lda 	SingleLetterVar+("P"-"A")*4 ; copy the value in P into the variable
.12b0	91 2a		sta ($2a),y			sta 	(temp0),y
.12b2	ad 3d 0a	lda $0a3d			lda 	SingleLetterVar+("P"-"A")*4+1
.12b5	c8		iny				iny
.12b6	91 2a		sta ($2a),y			sta 	(temp0),y
.12b8	a9 00		lda #$00			lda 	#0
.12ba	c8		iny				iny
.12bb	91 2a		sta ($2a),y			sta 	(temp0),y
.12bd	c8		iny				iny
.12be	91 2a		sta ($2a),y			sta 	(temp0),y
.12c0	68		pla				pla
.12c1	a8		tay				tay
.12c2	60		rts				rts
.12c3					_ALChanged:
.12c3	a2 26		ldx #$26			ldx 	#ErrorID_Label
.12c5	20 36 15	jsr $1536		jsr	errorHandler
.12c8					_ALSyntax:
.12c8	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.12ca	20 36 15	jsr $1536		jsr	errorHandler

;******  Return to file: assembler/assembler.asm


;******  Processing file: assembler/subgroup.asm

.12cd					AssembleGroup1:
.12cd	ad f5 0a	lda $0af5			lda 	asmToken 					; firstly, we throw out STA immediate
.12d0	c9 98		cmp #$98			cmp 	#TKW_STA
.12d2	d0 07		bne $12db			bne 	_AG1NotStoreImm
.12d4	ad f6 0a	lda $0af6			lda 	asmMode
.12d7	c9 00		cmp #$00			cmp 	#AMD_IMM
.12d9	f0 2c		beq $1307			beq 	AG1ModeError
.12db					_AG1NotStoreImm:
.12db	ae f6 0a	ldx $0af6			ldx 	asmMode						; get mode into X.
.12de	bd 0c 13	lda $130c,x			lda		AMDOperandSize,X 			; get the size of the operand and push on stack
.12e1	48		pha				pha
.12e2	f0 23		beq $1307			beq 	AG1ModeError 				; if the size is zero, the mode must be Accumulator
.12e4	e0 00		cpx #$00			cpx 	#0 							; if the mode is zero, e.g. immediate
.12e6	d0 02		bne $12ea			bne 	_AG1NotImmediate
.12e8	a2 02		ldx #$02			ldx 	#2 							; then we use offset 2 here. This is how the 6502
.12ea					_AG1NotImmediate:
.12ea	e0 0d		cpx #$0d			cpx 	#AMD_ZEROINDX 				; (zero,x) uses slot 0.
.12ec	d0 02		bne $12f0			bne 	_AG1NotZX
.12ee	a2 00		ldx #$00			ldx 	#0
.12f0					_AG1NotZX:
.12f0	68		pla				pla 								; restore length
.12f1	e0 09		cpx #$09			cpx 	#9 							; anything > 8 fails.
.12f3	b0 10		bcs $1305			bcs 	AG1Fail
.12f5					AG1ReturnValue:
.12f5	85 32		sta $32				sta 	tempShort 					; save size of operand
.12f7	18		clc				clc
.12f8	bd 1a 13	lda $131a,x			lda 	AMDOffsetFromBase,X 		; get the offset for the address mode.
.12fb	6d f7 0a	adc $0af7			adc 	asmBaseOpcode 				; add the base opcode.
.12fe	a6 32		ldx $32				ldx 	tempShort 					; length in X
.1300	20 10 11	jsr $1110			jsr 	AsmWriteInstruction 		; output instruction.
.1303	38		sec				sec
.1304	60		rts				rts
.1305					AG1Fail:
.1305	18		clc				clc
.1306	60		rts				rts
.1307					AG1ModeError:
.1307	a2 24		ldx #$24			ldx 	#ErrorID_Assembler
.1309	20 36 15	jsr $1536		jsr	errorHandler
.130c					AMDOperandSize:
>130c	01 01 00 02					.byte 	1,1,0,2
>1310	01 01 02 02					.byte 	1,1,2,2
>1314	01 01 02 02					.byte 	1,1,2,2
>1318	01 01						.byte 	1,1
.131a					AMDOffsetFromBase:
>131a	00 04 08 0c					.byte 	0,4,8,12
>131e	10 14 18 1c					.byte	16,20,24,28
>1322	11 00 00 00					.byte 	17,0,0,0
>1326	00 00						.byte 	0,0
.1328					AssembleGroup2:
.1328	ad f6 0a	lda $0af6			lda 	asmMode 					; get the mode; if >= 8 cannot be a legit group 2
.132b	c9 08		cmp #$08			cmp 	#8
.132d	b0 18		bcs $1347			bcs 	_AG2Fail
.132f	85 2a		sta $2a				sta 	temp0 						; save in temp9
.1331	ae f5 0a	ldx $0af5			ldx 	asmToken					; get token in X, then get the availability flags for it
.1334	bd aa 11	lda $11aa,x			lda 	Group2OpcodeAvailability-TKA_GROUP2,x
.1337					_AG2Shift:
.1337	4a		lsr a				lsr 	a
.1338	c6 2a		dec $2a				dec 	temp0
.133a	10 fb		bpl $1337			bpl 	_AG2Shift
.133c	90 09		bcc $1347			bcc 	_AG2Fail 					; cannot do that instruction w/that opcode.
.133e	ae f6 0a	ldx $0af6			ldx  	asmMode 					; mode in X
.1341	bd 0c 13	lda $130c,x			lda		AMDOperandSize,X 			; get the size of the operand in A
.1344	4c f5 12	jmp $12f5			jmp 	AG1ReturnValue 				; and use that with Group 1's exit code
.1347					_AG2Fail:
.1347	18		clc				clc
.1348	60		rts				rts
.1349					AssembleGroup3:
.1349	ad 38 0a	lda $0a38			lda 	SingleLetterVar+("O"-"A")*4	; check bit 0 (pass) of O
.134c	4a		lsr a				lsr 	a
.134d	a9 00		lda #$00			lda 	#0 							; if clear, e.g. pass 1, use default zero.
.134f	90 21		bcc $1372			bcc 	_AG3Default
.1351	38		sec				sec	 								; calculate branch offset
.1352	a5 98		lda $98				lda		esInt0
.1354	ed 3c 0a	sbc $0a3c			sbc 	SingleLetterVar+("P"-"A")*4
.1357	aa		tax				tax
.1358	a5 a0		lda $a0				lda		esInt1
.135a	ed 3d 0a	sbc $0a3d			sbc 	SingleLetterVar+("P"-"A")*4+1
.135d	85 a0		sta $a0				sta 	esInt1
.135f	8a		txa				txa 								; add 126, now 128 too many.
.1360	18		clc				clc 								; we can use this to check the range
.1361	69 7e		adc #$7e			adc 	#126
.1363	85 98		sta $98				sta 	esInt0
.1365	90 02		bcc $1369			bcc 	_AG3NoCarry
.1367	e6 a0		inc $a0				inc 	esInt1
.1369					_AG3NoCarry:
.1369	a5 a0		lda $a0				lda 	esInt1 						; check in range.
.136b	d0 0b		bne $1378			bne 	_AG3Range
.136d	a5 98		lda $98				lda 	esInt0 						; fix up branch distance
.136f	38		sec				sec
.1370	e9 80		sbc #$80			sbc 	#128
.1372					_AG3Default:
.1372	85 98		sta $98				sta 	esInt0
.1374					_AG3ExitOk:
.1374	a2 01		ldx #$01			ldx 	#1 							; one opcode, use AG4 Code
.1376	d0 07		bne $137f			bne 	AG4Write
.1378					_AG3Range:
.1378	a2 25		ldx #$25			ldx 	#ErrorID_Branch
.137a	20 36 15	jsr $1536		jsr	errorHandler
.137d					AssembleGroup4:
.137d	a2 00		ldx #$00			ldx 	#0 							; no parameters in the opcode.
.137f					AG4Write:
.137f	ad f7 0a	lda $0af7			lda 	asmBaseOpcode				; the opcode is the opcode base.
.1382	20 10 11	jsr $1110			jsr 	AsmWriteInstruction 		; output instruction.
.1385	38		sec				sec
.1386	60		rts				rts
.1387					AssembleSpecialCase:
.1387	a2 00		ldx #$00			ldx 	#0
.1389					_ASCScan:
.1389	bd 58 12	lda $1258,x			lda 	AssemblerSpecialCases,x 	; scan token and mode for match
.138c	cd f5 0a	cmp $0af5			cmp 	asmToken
.138f	d0 08		bne $1399			bne 	_ASCNext
.1391	bd 59 12	lda $1259,x			lda 	AssemblerSpecialCases+1,x
.1394	cd f6 0a	cmp $0af6			cmp 	asmMode
.1397	f0 0a		beq $13a3			beq 	_ASCFound
.1399					_ASCNext:
.1399	e8		inx				inx									; next entry
.139a	e8		inx				inx
.139b	e8		inx				inx
.139c	bd 58 12	lda $1258,x			lda 	AssemblerSpecialCases,x 	; until table ends
.139f	d0 e8		bne $1389			bne 	_ASCScan
.13a1	18		clc				clc
.13a2	60		rts				rts
.13a3					_ASCFound:
.13a3	bd 5a 12	lda $125a,x			lda 	AssemblerSpecialCases+2,x 	; get the new opcode.
.13a6	48		pha				pha
.13a7	ae f6 0a	ldx $0af6			ldx  	asmMode 					; mode in X
.13aa	bd 0c 13	lda $130c,x			lda		AMDOperandSize,X 			; get the size of the operand in X
.13ad	aa		tax				tax
.13ae	68		pla				pla 								; opcode back
.13af	20 10 11	jsr $1110			jsr 	AsmWriteInstruction 		; output instruction.
.13b2	38		sec				sec
.13b3	60		rts				rts

;******  Return to file: assembler/assembler.asm

.13b4					assemblerHandler:
.13b4	48		pha				pha
.13b5	bd c5 13	lda $13c5,x			lda 	assemblerVectors,x
.13b8	8d f2 0a	sta $0af2			sta 	jumpVector
.13bb	bd c6 13	lda $13c6,x			lda 	1+(assemblerVectors),x
.13be	8d f3 0a	sta $0af3			sta 	jumpVector+1
.13c1	68		pla				pla
.13c2	6c f2 0a	jmp ($0af2)			jmp 	(jumpVector)
.13c5					assemblerVectors:
>13c5	cb 13					.word _DummyControlHandler ; index 0
>13c7	a5 11					.word AssembleOneInstruction ; index 2
>13c9	77 12					.word AssembleLabel        ; index 4
.13cb					_DummyControlHandler:
.13cb	60		rts			rts

;******  Return to file: basic.asm

.13cc					section_end_assembler:
.13cc					section_start_device:

;******  Processing file: device/device.asm


;******  Processing file: device/option_x16/x16break.asm

.13cc					X16Break:
.13cc	20 e1 ff	jsr $ffe1			jsr 	$FFE1
.13cf	f0 01		beq $13d2			beq 	_IsBreak
.13d1	60		rts				rts
.13d2					_IsBreak:
.13d2	a2 21		ldx #$21			ldx 	#ErrorID_Break
.13d4	20 36 15	jsr $1536		jsr	errorHandler

;******  Return to file: device/device.asm


;******  Processing file: device/option_x16/x16file.asm

.13d7					ExternSave:
.13d7	98		tya				tya
.13d8	48		pha				pha
.13d9	20 27 14	jsr $1427			jsr 	ExternGetLength 			; get length of file into A name YX
.13dc	20 bd ff	jsr $ffbd			jsr 	$FFBD 						; set name
.13df	a9 01		lda #$01			lda 	#1
.13e1	a2 08		ldx #$08			ldx 	#8	 						; device #8
.13e3	a0 00		ldy #$00			ldy 	#0
.13e5	20 ba ff	jsr $ffba			jsr 	$FFBA 						; set LFS
.13e8	a5 99		lda $99				lda 	esInt0+1 					; copy start of save address to temp0
.13ea	85 2a		sta $2a				sta 	temp0
.13ec	a5 a1		lda $a1				lda 	esInt1+1
.13ee	85 2b		sta $2b				sta 	temp0+1
.13f0	a6 9a		ldx $9a				ldx 	esInt0+2 					; end address
.13f2	a4 a2		ldy $a2				ldy 	esInt1+2
.13f4	a9 2a		lda #$2a			lda 	#temp0 						; ref to start address
.13f6	20 d8 ff	jsr $ffd8			jsr 	$FFD8 						; save
.13f9	b0 03		bcs $13fe			bcs 	_ESSave
.13fb	68		pla				pla
.13fc	a8		tay				tay
.13fd	60		rts				rts
.13fe					_ESSave:
.13fe	a2 1f		ldx #$1f			ldx 	#ErrorID_Save
.1400	20 36 15	jsr $1536		jsr	errorHandler
.1403					ExternLoad:
.1403	98		tya				tya
.1404	48		pha				pha
.1405	20 27 14	jsr $1427			jsr 	ExternGetLength 			; get length of file into A name YX
.1408	20 bd ff	jsr $ffbd			jsr 	$FFBD 						; set name
.140b	a9 01		lda #$01			lda 	#1
.140d	a2 08		ldx #$08			ldx 	#8	 						; device #8
.140f	a0 00		ldy #$00			ldy 	#0
.1411	20 ba ff	jsr $ffba			jsr 	$FFBA 						; set LFS
.1414	a6 99		ldx $99				ldx 	esInt0+1 					; load address
.1416	a4 a1		ldy $a1				ldy 	esInt1+1
.1418	a9 00		lda #$00			lda 	#0 							; load command
.141a	20 d5 ff	jsr $ffd5			jsr 	$FFD5
.141d	b0 03		bcs $1422			bcs 	_ESLoad
.141f	68		pla				pla
.1420	a8		tay				tay
.1421	60		rts				rts
.1422					_ESLoad:
.1422	a2 20		ldx #$20			ldx 	#ErrorID_Load
.1424	20 36 15	jsr $1536		jsr	errorHandler
.1427					ExternGetLength:
.1427	a5 98		lda $98				lda 	esInt0 						; length into A.
.1429	85 2a		sta $2a				sta 	temp0
.142b	a5 a0		lda $a0				lda 	esInt1
.142d	85 2b		sta $2b				sta 	temp0+1
.142f	a0 00		ldy #$00			ldy 	#0
.1431	b1 2a		lda ($2a),y			lda 	(temp0),y
.1433	a6 98		ldx $98				ldx 	esInt0 						; name string address into YX
.1435	a4 a0		ldy $a0				ldy 	esInt1
.1437	e8		inx				inx 								; advance over the length byte.
.1438	d0 01		bne $143b			bne 	_ESNoCarry
.143a	c8		iny				iny
.143b					_ESNoCarry:
.143b	60		rts				rts

;******  Return to file: device/device.asm


;******  Processing file: device/option_x16/x16io.asm

=240					MaxLineInputSize = 240
.0af8					bufferCount:
>0af8							.fill 	0
.0af8					bufferStorage:
>0af8							.fill 	MaxLineInputSize
.143c					IOControlHandler:
.143c	c9 00		cmp #$00			cmp 	#0
.143e	d0 12		bne $1452			bne		_CHExit
.1440	a9 0f		lda #$0f			lda 	#15 						; switch to upper/lower case mode
.1442	20 6b 14	jsr $146b			jsr 	IOPrintChar
.1445	a9 02		lda #$02			lda 	#2 							; green on black and clear screen
.1447	20 99 14	jsr $1499			jsr 	IOInk
.144a	a9 00		lda #$00			lda 	#0
.144c	20 ad 14	jsr $14ad			jsr 	IOPaper
.144f	20 53 14	jsr $1453			jsr 	IOClearScreen
.1452					_CHExit:
.1452	60		rts				rts
.1453					IOClearScreen:
.1453	48		pha				pha
.1454	a9 93		lda #$93			lda	 	#147 						; char code $93 clears screen
.1456	20 6b 14	jsr $146b			jsr 	IOPrintChar
.1459	68		pla				pla
.145a	60		rts				rts
.145b					IONewLine:
.145b	48		pha				pha
.145c	a9 0d		lda #$0d			lda 	#13
.145e	20 6b 14	jsr $146b			jsr 	IOPrintChar
.1461	68		pla				pla
.1462	60		rts				rts
.1463					IOTab:
.1463	48		pha				pha
.1464	a9 20		lda #$20			lda 	#32
.1466	20 6b 14	jsr $146b			jsr 	IOPrintChar
.1469	68		pla				pla
.146a	60		rts				rts
.146b					IOPrintAscii:
.146b					IOPrintChar:
.146b	aa		tax				tax 								; save in X so we can save Y
.146c	98		tya				tya
.146d	48		pha				pha
.146e	8a		txa				txa
.146f	c9 08		cmp #$08			cmp 	#8 							; make BS (8) onto CHR$(14) which is the
.1471	d0 02		bne $1475			bne 	_IOPCNotBS 					; Commodore/X16 backspace code.
.1473	a9 14		lda #$14			lda 	#$14
.1475					_IOPCNotBS:
.1475	20 d2 ff	jsr $ffd2			jsr 	$FFD2 						; CBM OS Call.
.1478	68		pla				pla
.1479	a8		tay				tay
.147a	60		rts				rts
.147b					IOInkey:
.147b	98		tya				tya
.147c	48		pha				pha
.147d	20 e4 ff	jsr $ffe4			jsr 	$FFE4
.1480	85 32		sta $32				sta 	tempShort
.1482	68		pla				pla
.1483	a8		tay				tay
.1484	a5 32		lda $32				lda 	tempShort					; no key pressed.
.1486	f0 10		beq $1498			beq 	_IOIExit
.1488	c9 0d		cmp #$0d			cmp 	#13 						; allow CR (13)
.148a	f0 0c		beq $1498			beq 	_IOIExit
.148c	c9 14		cmp #$14			cmp 	#$14 						; backspace code ($14) returns 8.
.148e	f0 06		beq $1496			beq 	_IOIBackspace
.1490	c9 20		cmp #$20			cmp 	#32 						; no other control allowed.
.1492	90 e7		bcc $147b			bcc 	IOInkey
.1494	b0 02		bcs $1498			bcs 	_IOIExit
.1496					_IOIBackspace:
.1496	a9 08		lda #$08			lda 	#8 							; return chr(8)
.1498					_IOIExit:
.1498	60		rts				rts
.1499					IOInk:
.1499	48		pha				pha
.149a	29 07		and #$07			and 	#7 							; 8 primaries
.149c	aa		tax				tax
.149d	bd a5 14	lda $14a5,x			lda 	_IOColourTable,x 			; look up CBM code and print it.
.14a0	20 6b 14	jsr $146b			jsr 	IOPrintChar
.14a3	68		pla				pla
.14a4	60		rts				rts
.14a5					_IOColourTable:
>14a5	90						.byte 	$90 					; 0 Black
>14a6	96						.byte 	$96 					; 1 Red
>14a7	1e						.byte 	$1E 					; 2 Green
>14a8	9e						.byte 	$9E 					; 3 Yellow
>14a9	9a						.byte 	$9A 					; 4 Blue
>14aa	9c						.byte 	$9C 					; 5 Magenta
>14ab	9f						.byte 	$9F 					; 6 Cyan
>14ac	05						.byte 	$05 					; 7 White
.14ad					IOPaper:
.14ad	48		pha				pha
.14ae	48		pha				pha
.14af	a9 01		lda #$01			lda 	#1 						; 1 swaps fgr/bgr, so we swap them, set fgr
.14b1	20 6b 14	jsr $146b			jsr 	IOPrintChar 			; and then swap them again.
.14b4	68		pla				pla
.14b5	20 99 14	jsr $1499			jsr 	IOInk
.14b8	a9 01		lda #$01			lda 	#1
.14ba	20 6b 14	jsr $146b			jsr 	IOPrintChar
.14bd	68		pla				pla
.14be	60		rts				rts
.14bf					IOLocate:
.14bf	48		pha				pha
.14c0	a9 13		lda #$13			lda 	#$13 					; home cursor code
.14c2	20 6b 14	jsr $146b			jsr 	IOPrintChar
.14c5	a9 11		lda #$11			lda 	#$11 	 				; print Y x $11 (down)
.14c7	20 ce 14	jsr $14ce			jsr 	_IOLoc2
.14ca	68		pla				pla
.14cb	a8		tay				tay
.14cc	a9 1d		lda #$1d			lda 	#$1D 					; print Y x $1D (right)
.14ce					_IOLoc2:
.14ce	c0 00		cpy #$00			cpy 	#0
.14d0	f0 06		beq $14d8			beq 	_IOLocExit
.14d2	20 6b 14	jsr $146b			jsr 	IOPrintChar
.14d5	88		dey				dey
.14d6	d0 f6		bne $14ce			bne 	_IOLoc2
.14d8					_IOLocExit:
.14d8	60		rts				rts
.14d9					IOInput:
.14d9	a9 00		lda #$00			lda 	#0
.14db	8d f8 0a	sta $0af8			sta 	bufferCount
.14de					_IOILoop:
.14de	20 cf ff	jsr $ffcf			jsr 	$FFCF
.14e1	c9 0d		cmp #$0d			cmp 	#13
.14e3	f0 10		beq $14f5			beq 	_IOIExit
.14e5	ae f8 0a	ldx $0af8			ldx 	bufferCount
.14e8	e0 f0		cpx #$f0			cpx 	#MaxLineInputSize
.14ea	f0 f2		beq $14de			beq 	_IOILoop
.14ec	ee f8 0a	inc $0af8			inc 	bufferCount
.14ef	9d f9 0a	sta $0af9,x			sta 	bufferStorage+1,x
.14f2	4c de 14	jmp $14de			jmp 	_IOILoop
.14f5					_IOIExit:
.14f5	a9 f8		lda #$f8			lda 	#(bufferCount) & $FF
.14f7	85 2a		sta $2a				sta 	temp0
.14f9	a9 0a		lda #$0a			lda 	#(bufferCount) >> 8
.14fb	85 2b		sta $2b				sta 	1+(temp0)
.14fd	60		rts				rts

;******  Return to file: device/device.asm


;******  Processing file: device/option_x16/x16timer.asm

.14fe					IOReadTimer:
.14fe	20 de ff	jsr $ffde			jsr 	$FFDE 						; reads timer into YXA so we want only YA
.1501	48		pha				pha
.1502	8a		txa				txa
.1503	a8		tay				tay
.1504	68		pla				pla
.1505	60		rts				rts

;******  Return to file: device/device.asm

.1506					deviceHandler:
.1506	48		pha				pha
.1507	bd 17 15	lda $1517,x			lda 	deviceVectors,x
.150a	8d f2 0a	sta $0af2			sta 	jumpVector
.150d	bd 18 15	lda $1518,x			lda 	1+(deviceVectors),x
.1510	8d f3 0a	sta $0af3			sta 	jumpVector+1
.1513	68		pla				pla
.1514	6c f2 0a	jmp ($0af2)			jmp 	(jumpVector)
.1517					deviceVectors:
>1517	3c 14					.word IOControlHandler     ; index 0
>1519	cc 13					.word X16Break             ; index 2
>151b	53 14					.word IOClearScreen        ; index 4
>151d	5b 14					.word IONewLine            ; index 6
>151f	99 14					.word IOInk                ; index 8
>1521	7b 14					.word IOInkey              ; index 10
>1523	d9 14					.word IOInput              ; index 12
>1525	03 14					.word ExternLoad           ; index 14
>1527	bf 14					.word IOLocate             ; index 16
>1529	ad 14					.word IOPaper              ; index 18
>152b	6b 14					.word IOPrintChar          ; index 20
>152d	6b 14					.word IOPrintAscii         ; index 22
>152f	d7 13					.word ExternSave           ; index 24
>1531	63 14					.word IOTab                ; index 26
>1533	fe 14					.word IOReadTimer          ; index 28
.1535					_DummyControlHandler:
.1535	60		rts			rts

;******  Return to file: basic.asm

.1536					section_end_device:
.1536					section_start_error:

;******  Processing file: error/error.asm


;******  Processing file: error/errorhandler.asm

.1536					ErrorHandler:
.1536	8a		txa				txa
.1537	48		pha				pha
.1538	a9 01		lda #$01			lda 	#1 							; red
.153a	a2 08		ldx #$08		ldx	#8
.153c	20 06 15	jsr $1506		jsr	deviceHandler
.153f	68		pla				pla
.1540	aa		tax				tax
.1541	a9 ac		lda #$ac			lda 	#(ErrorTextList) & $FF
.1543	85 2a		sta $2a				sta 	temp0
.1545	a9 15		lda #$15			lda 	#(ErrorTextList) >> 8
.1547	85 2b		sta $2b				sta 	1+(temp0)
.1549	ca		dex		_EHFind:dex									; errors start at 1
.154a	f0 10		beq $155c			beq 	_EHFound
.154c	a0 00		ldy #$00			ldy 	#0 							; goto next text message, add length + 1 to the pointer.
.154e	38		sec				sec
.154f	a5 2a		lda $2a				lda 	temp0
.1551	71 2a		adc ($2a),y			adc 	(temp0),y
.1553	85 2a		sta $2a				sta 	temp0
.1555	90 f2		bcc $1549			bcc 	_EHFind
.1557	e6 2b		inc $2b				inc 	temp0+1
.1559	4c 49 15	jmp $1549			jmp 	_EHFind
.155c					_EHFound:
.155c	20 70 18	jsr $1870			jsr 	EHPrintAscii 				; print the string "temp0" now points to.
.155f	a0 00		ldy #$00			ldy 	#0 							; in a line, e.g. the offset to next is non zero.
.1561	b1 28		lda ($28),y			lda 	(codePtr),y
.1563	f0 39		beq $159e			beq 	_EHNoLine
.1565	a5 29		lda $29				lda 	codePtr+1 					; code running from the command line.
.1567	cd c9 0a	cmp $0ac9			cmp 	basePage+1
.156a	90 32		bcc $159e			bcc 	_EHNoLine
.156c	a9 a8		lda #$a8			lda 	#(EHAtMsg) & $FF
.156e	85 2a		sta $2a				sta 	temp0
.1570	a9 15		lda #$15			lda 	#(EHAtMsg) >> 8
.1572	85 2b		sta $2b				sta 	1+(temp0)
.1574	20 70 18	jsr $1870			jsr 	EHPrintAscii
.1577	a0 01		ldy #$01			ldy 	#1 							; set up line number in TOS
.1579	a2 00		ldx #$00			ldx 	#0
.157b	b1 28		lda ($28),y			lda 	(codePtr),y
.157d	95 98		sta $98,x			sta 	esInt0,x
.157f	c8		iny				iny
.1580	b1 28		lda ($28),y			lda 	(codePtr),y
.1582	95 a0		sta $a0,x			sta 	esInt1,x
.1584	a9 00		lda #$00			lda 	#0
.1586	95 a8		sta $a8,x			sta 	esInt2,x
.1588	95 b0		sta $b0,x			sta 	esInt3,x
.158a	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.158c	85 2a		sta $2a				sta 	temp0
.158e	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.1590	85 2b		sta $2b				sta 	1+(temp0)
.1592	a0 0a		ldy #$0a			ldy 	#10 						; in base 10.
.1594	a9 00		lda #$00			lda 	#0							; stack position zero.
.1596	a2 12		ldx #$12		ldx	#18
.1598	20 fb 3e	jsr $3efb		jsr	mainHandler
.159b	20 70 18	jsr $1870			jsr 	EHPrintAscii
.159e					_EHNoLine:
.159e	a2 06		ldx #$06		ldx	#6
.15a0	20 06 15	jsr $1506		jsr	deviceHandler
.15a3	a2 04		ldx #$04		ldx	#4
.15a5	20 31 28	jsr $2831		jsr	interactionHandler
.15a8					EHAtMsg:
>15a8	03 20 40 20					.text 	3," @ "

;******  Processing file: error/../generated/errortext.inc

.15ac					ErrorTextList:
>15ac	13 46 65 61 74 75 72 65			.text 19,"Feature not Present"
>15b4	20 6e 6f 74 20 50 72 65 73 65 6e 74
>15c0	0c 53 79 6e 74 61 78 20			.text 12,"Syntax Error"
>15c8	45 72 72 6f 72
>15cd	0f 4d 6f 64 75 6c 65 20			.text 15,"Module disabled"
>15d5	64 69 73 61 62 6c 65 64
>15dd	10 41 73 73 65 72 74 69			.text 16,"Assertion failed"
>15e5	6f 6e 20 66 61 69 6c 65 64
>15ee	0e 44 69 76 69 64 65 20			.text 14,"Divide By Zero"
>15f6	42 79 20 5a 65 72 6f
>15fd	04 53 74 6f 70				.text 4,"Stop"
>1602	0d 54 79 70 65 20 4d 69			.text 13,"Type Mismatch"
>160a	73 6d 61 74 63 68
>1610	0d 49 6c 6c 65 67 61 6c			.text 13,"Illegal Value"
>1618	20 56 61 6c 75 65
>161e	15 4d 69 73 73 69 6e 67			.text 21,"Missing right bracket"
>1626	20 72 69 67 68 74 20 62 72 61 63 6b 65 74
>1634	0d 4d 69 73 73 69 6e 67			.text 13,"Missing comma"
>163c	20 63 6f 6d 6d 61
>1642	11 4d 69 73 73 69 6e 67			.text 17,"Missing reference"
>164a	20 72 65 66 65 72 65 6e 63 65
>1654	15 4c 69 6e 65 20 4e 75			.text 21,"Line Number not found"
>165c	6d 62 65 72 20 6e 6f 74 20 66 6f 75 6e 64
>166a	0f 53 74 72 69 6e 67 20			.text 15,"String too long"
>1672	74 6f 6f 20 6c 6f 6e 67
>167a	14 52 45 54 55 52 4e 20			.text 20,"RETURN without GOSUB"
>1682	77 69 74 68 6f 75 74 20 47 4f 53 55 42
>168f	14 55 4e 54 49 4c 20 77			.text 20,"UNTIL without REPEAT"
>1697	69 74 68 6f 75 74 20 52 45 50 45 41 54
>16a4	10 4e 45 58 54 20 77 69			.text 16,"NEXT without FOR"
>16ac	74 68 6f 75 74 20 46 4f 52
>16b5	12 57 45 4e 44 20 77 69			.text 18,"WEND without WHILE"
>16bd	74 68 6f 75 74 20 57 48 49 4c 45
>16c8	14 45 4e 44 50 52 4f 43			.text 20,"ENDPROC without PROC"
>16d0	20 77 69 74 68 6f 75 74 20 50 52 4f 43
>16dd	0e 42 61 64 20 4e 45 58			.text 14,"Bad NEXT index"
>16e5	54 20 69 6e 64 65 78
>16ec	17 53 74 72 75 63 74 75			.text 23,"Structures nested wrong"
>16f4	72 65 73 20 6e 65 73 74 65 64 20 77 72 6f 6e 67
>1704	16 43 61 6e 6e 6f 74 20			.text 22,"Cannot create variable"
>170c	63 72 65 61 74 65 20 76 61 72 69 61 62 6c 65
>171b	19 52 65 74 75 72 6e 20			.text 25,"Return stack out of space"
>1723	73 74 61 63 6b 20 6f 75 74 20 6f 66 20 73 70 61
>1733	63 65
>1735	11 55 6e 6b 6e 6f 77 6e			.text 17,"Unknown Procedure"
>173d	20 50 72 6f 63 65 64 75 72 65
>1747	17 50 61 72 61 6d 65 74			.text 23,"Parameters do not match"
>174f	65 72 73 20 64 6f 20 6e 6f 74 20 6d 61 74 63 68
>175f	15 41 72 72 61 79 20 61			.text 21,"Array already defined"
>1767	6c 72 65 61 64 79 20 64 65 66 69 6e 65 64
>1775	12 44 49 4d 20 72 65 71			.text 18,"DIM requires array"
>177d	75 69 72 65 73 20 61 72 72 61 79
>1788	0f 42 61 64 20 61 72 72			.text 15,"Bad array index"
>1790	61 79 20 69 6e 64 65 78
>1798	1d 57 72 6f 6e 67 20 6e			.text 29,"Wrong number of array indices"
>17a0	75 6d 62 65 72 20 6f 66 20 61 72 72 61 79 20 69
>17b0	6e 64 69 63 65 73
>17b6	0b 4f 75 74 20 6f 66 20			.text 11,"Out of data"
>17be	64 61 74 61
>17c2	14 43 61 6e 6e 6f 74 20			.text 20,"Cannot tokenise line"
>17ca	74 6f 6b 65 6e 69 73 65 20 6c 69 6e 65
>17d7	0b 53 61 76 65 20 66 61			.text 11,"Save failed"
>17df	69 6c 65 64
>17e3	0b 4c 6f 61 64 20 66 61			.text 11,"Load failed"
>17eb	69 6c 65 64
>17ef	05 42 72 65 61 6b			.text 5,"Break"
>17f5	0d 4f 75 74 20 6f 66 20			.text 13,"Out of memory"
>17fd	6d 65 6d 6f 72 79
>1803	16 45 78 70 72 65 73 73			.text 22,"Expression too complex"
>180b	69 6f 6e 20 74 6f 6f 20 63 6f 6d 70 6c 65 78
>181a	10 42 61 64 20 4f 70 65			.text 16,"Bad Operand/Mode"
>1822	72 61 6e 64 2f 4d 6f 64 65
>182b	13 42 72 61 6e 63 68 20			.text 19,"Branch out of range"
>1833	6f 75 74 20 6f 66 20 72 61 6e 67 65
>183f	13 4c 61 62 65 6c 20 63			.text 19,"Label changed value"
>1847	68 61 6e 67 65 64 20 76 61 6c 75 65
>1853	12 4e 6f 20 53 70 72 69			.text 18,"No Sprite Selected"
>185b	74 65 20 53 65 6c 65 63 74 65 64
>1866	08 48 61 72 64 77 61 72			.text 8,"Hardware"
>186e	65
>186f	00					.byte 0

;******  Return to file: error/errorhandler.asm

.1870					EHPrintAscii:
.1870	a0 00		ldy #$00			ldy 	#0
.1872	b1 2a		lda ($2a),y			lda 	(temp0),y
.1874	aa		tax				tax
.1875	f0 0f		beq $1886			beq 	_EHPExit
.1877					_EHPLoop:
.1877	c8		iny				iny
.1878	8a		txa				txa
.1879	48		pha				pha
.187a	b1 2a		lda ($2a),y			lda 	(temp0),y
.187c	a2 16		ldx #$16		ldx	#22
.187e	20 06 15	jsr $1506		jsr	deviceHandler
.1881	68		pla				pla
.1882	aa		tax				tax
.1883	ca		dex				dex
.1884	d0 f1		bne $1877			bne 	_EHPLoop
.1886					_EHPExit:
.1886	60		rts				rts

;******  Return to file: error/error.asm


;******  Return to file: basic.asm

.1887					section_end_error:
.1887					section_start_extension:

;******  Processing file: extension/extension.asm


;******  Processing file: extension/extensionhandler.asm

.1887					ExtensionHandler:
.1887	c9 fe		cmp #$fe			cmp 	#$FE 						; check for force mode 0
.1889	f0 32		beq $18bd			beq 	_ExtensionForce
.188b	c9 ff		cmp #$ff			cmp 	#$FF						; A = $FF command, otherwise unary function stack level.
.188d	d0 16		bne $18a5			bne 	_ExtensionUnary 			; is passed in A.
.188f	b1 28		lda ($28),y			lda 	(codePtr),y 				; so this is a command, using Group 2.
.1891	c8		iny				iny
.1892	0a		asl a				asl 	a
.1893	aa		tax				tax
.1894	48		pha				pha
.1895	bd b4 18	lda $18b4,x			lda 	Group2Vectors-12,x
.1898	8d f2 0a	sta $0af2			sta 	jumpVector
.189b	bd b5 18	lda $18b5,x			lda 	1+(Group2Vectors-12),x
.189e	8d f3 0a	sta $0af3			sta 	jumpVector+1
.18a1	68		pla				pla
.18a2	6c f2 0a	jmp ($0af2)			jmp 	(jumpVector)
.18a5					_ExtensionUnary:
.18a5	48		pha				pha 								; save stack pos in A
.18a6	b1 28		lda ($28),y			lda 	(codePtr),y 				; get shifted token, double into X
.18a8	c8		iny				iny
.18a9	0a		asl a				asl 	a
.18aa	aa		tax				tax
.18ab	68		pla				pla 								; restore stack pos and call group3 command.
.18ac	48		pha				pha
.18ad	bd d2 18	lda $18d2,x			lda 	Group3Vectors-12,x
.18b0	8d f2 0a	sta $0af2			sta 	jumpVector
.18b3	bd d3 18	lda $18d3,x			lda 	1+(Group3Vectors-12),x
.18b6	8d f3 0a	sta $0af3			sta 	jumpVector+1
.18b9	68		pla				pla
.18ba	6c f2 0a	jmp ($0af2)			jmp 	(jumpVector)
.18bd					_ExtensionForce:
.18bd	4c 02 23	jmp $2302			jmp 	ForceMode0

;******  Processing file: extension/../generated/tokenvectors2.inc

.18c0					Group2Vectors:
>18c0	de 24					.word	Command_VPoke            ; $86 vpoke
>18c2	e1 24					.word	Command_VDoke            ; $87 vdoke
>18c4	b6 24					.word	Command_VLoad            ; $88 vload
>18c6	14 23					.word	CommandMode              ; $89 mode
>18c8	d4 23					.word	CommandPalette           ; $8a palette
>18ca	3b 20					.word	CommandSprite            ; $8b sprite
>18cc	2a 1e					.word	CommandClg               ; $8c clg
>18ce	1e 1b					.word	Command_Rect             ; $8d rect
>18d0	26 1b					.word	Command_Frame            ; $8e frame
>18d2	0b 24					.word	Command_Draw             ; $8f draw
>18d4	0b 1b					.word	Command_Plot             ; $90 plot
>18d6	e5 19					.word	Command_Line             ; $91 line
>18d8	86 21					.word	Command_Paint            ; $92 paint
>18da	83 32					.word	Unimplemented            ; $93 sound
>18dc	83 32					.word	Unimplemented            ; $94 volume

;******  Return to file: extension/extensionhandler.asm


;******  Processing file: extension/../generated/tokenvectors3.inc

.18de					Group3Vectors:
>18de	2a 25					.word	Command_VPeek            ; $86 vpeek(
>18e0	2d 25					.word	Command_VDeek            ; $87 vdeek(
>18e2	d2 22					.word	Sprite_GetX              ; $88 sprite.x(
>18e4	d5 22					.word	Sprite_GetY              ; $89 sprite.y(
>18e6	7e 1f					.word	FunctionCollide          ; $8a hit(
>18e8	cf 1e					.word	Unary_JoyX               ; $8b joy.x(
>18ea	d2 1e					.word	Unary_JoyY               ; $8c joy.y(
>18ec	0d 1f					.word	Unary_JButton            ; $8d joy.b(
>18ee	a2 1e					.word	Unary_Clock              ; $8e clock(

;******  Return to file: extension/extensionhandler.asm

.18f0					XEvaluateInteger:
.18f0	8a		txa				txa
.18f1	a2 0a		ldx #$0a		ldx	#10
.18f3	20 fb 3e	jsr $3efb		jsr	mainHandler
.18f6	aa		tax				tax
.18f7	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/graphics/general.asm

.0be8					gStartStorage:
.0be8					gCurrentXPos:
>0be8							.fill 	2 							; copying the coordinate here, and into x2, and the old
.0bea					gCurrentYPos:
>0bea							.fill 	2
.0bec					gX1:
>0bec							.fill 	2		 					; most recently used. x2,y2 are the most recently used.
.0bee					gY1:
>0bee							.fill 	2
.0bf0					gX2:
>0bf0							.fill 	2
.0bf2					gY2:
>0bf2							.fill 	2
.0bf4					gError:
>0bf4							.fill 	2
.0bf6					g2Error:
>0bf6							.fill 	2
.0bf8					gdx:
>0bf8							.fill 	2
.0bfa					gdy:
>0bfa							.fill 	2
.0bfc					gWordHandler:
>0bfc							.fill 	2
.0bfe					gModifiers:
.0bfe					gdInk:
>0bfe							.fill 	1
.0bff					gdPaper:
>0bff							.fill 	1
.0c00					gdSize:
>0c00							.fill 	1
.0c01					gdImage:
>0c01							.fill 	1
.0c02					gdFlip:
>0c02							.fill 	1
.0c03					gEndStorage:
.0c03					gdXLimit:
>0c03							.fill 	2
.0c05					gdYLimit:
>0c05							.fill 	2
.0c07					gdText:
>0c07							.fill 	2
.18f8					GResetStorage:
.18f8	8a		txa				txa
.18f9	48		pha				pha
.18fa	a2 1a		ldx #$1a			ldx 	#gEndStorage-gStartStorage-1 ; fill all storage for gfx with 0
.18fc	a9 00		lda #$00			lda 	#0
.18fe					_GRSLoop:
.18fe	9d e8 0b	sta $0be8,x			sta 	gStartStorage,x
.1901	ca		dex				dex
.1902	10 fa		bpl $18fe			bpl 	_GRSLoop
.1904	a9 01		lda #$01			lda 	#1
.1906	8d fe 0b	sta $0bfe			sta 	gdInk
.1909	8d 00 0c	sta $0c00			sta 	gdSize
.190c	68		pla				pla
.190d	aa		tax				tax
.190e	60		rts				rts
.190f					GHandler:
.190f	8e fd 0b	stx $0bfd			stx 	gWordHandler+1 				; save code that draws the actual line or whatever.
.1912	8d fc 0b	sta $0bfc			sta 	gWordHandler
.1915	a9 00		lda #$00			lda 	#0							; default no text.
.1917	8d 08 0c	sta $0c08			sta 	gdText+1
.191a	88		dey				dey 								; predecrement
.191b					_GHLoopNext:
.191b	c8		iny				iny									; advance one character
.191c					_GHLoop:
.191c	b1 28		lda ($28),y			lda 	(codePtr),y 				; look at character.
.191e	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; , go to next
.1920	f0 f9		beq $191b			beq 	_GHLoopNext
.1922	c9 80		cmp #$80			cmp 	#TOK_EOL 					; end of line or : , exit
.1924	f0 50		beq $1976			beq 	_GHExit
.1926	c9 ca		cmp #$ca			cmp 	#TKW_COLON
.1928	f0 4c		beq $1976			beq 	_GHExit
.192a	c9 db		cmp #$db			cmp 	#TKW_AT 					; have we found AT or TO
.192c	f0 37		beq $1965			beq 	_GHCallHandler 				; update post & call the handler
.192e	c9 ce		cmp #$ce			cmp 	#TKW_TO
.1930	f0 33		beq $1965			beq 	_GHCallHandler
.1932	c9 e6		cmp #$e6			cmp 	#TKW_FROM
.1934	f0 14		beq $194a			beq 	_GHCPairSkip
.1936	c9 e9		cmp #$e9			cmp 	#TKW_TEXT
.1938	f0 3d		beq $1977			beq 	_GHText
.193a	a2 00		ldx #$00			ldx 	#0 							; now see if it matches a token modifier (INK,PAPER etc.)
.193c					_GHCheckTokens:
.193c	b1 28		lda ($28),y			lda 	(codePtr),y
.193e	dd 8c 19	cmp $198c,x			cmp 	_GHTokenTable,x
.1941	f0 0e		beq $1951			beq 	_GHFoundToken
.1943	e8		inx				inx
.1944	bd 8c 19	lda $198c,x			lda 	_GHTokenTable,x
.1947	d0 f3		bne $193c			bne 	_GHCheckTokens
.1949	88		dey				dey
.194a					_GHCPairSkip:
.194a	c8		iny				iny
.194b					_GHCPair:
.194b	20 92 19	jsr $1992			jsr 	GHMakeCurrent 				; should be a coordinate pair then.
.194e	4c 1c 19	jmp $191c			jmp 	_GHLoop
.1951					_GHFoundToken:
.1951	c8		iny				iny 								; skip token (INK/PAPER etc.)
.1952	8a		txa				txa
.1953	48		pha				pha
.1954	a9 00		lda #$00			lda 	#0 							; evaluate byte
.1956	a2 0c		ldx #$0c		ldx	#12
.1958	20 fb 3e	jsr $3efb		jsr	mainHandler
.195b	68		pla				pla
.195c	aa		tax				tax
.195d	a5 98		lda $98				lda 	esInt0 						; get evaluated value
.195f	9d fe 0b	sta $0bfe,x			sta 	gModifiers,x 				; update the modifiers
.1962	4c 1c 19	jmp $191c			jmp 	_GHLoop 					; and loop back
.1965					_GHCallHandler:
.1965	c8		iny				iny 								; consume AT or TO.
.1966	20 92 19	jsr $1992			jsr 	GHMakeCurrent 				; update the coordinates.
.1969	98		tya				tya
.196a	48		pha				pha
.196b	20 73 19	jsr $1973			jsr 	_GHCallHandlerCode 			; call the handler code
.196e	68		pla				pla
.196f	a8		tay				tay
.1970	4c 1c 19	jmp $191c			jmp 	_GHLoop 					; and loop round.
.1973					_GHCallHandlerCode:
.1973	6c fc 0b	jmp ($0bfc)			jmp 	(gWordHandler)
.1976					_GHExit:
.1976	60		rts				rts
.1977					_GHText:
.1977	c8		iny				iny 								; skip token
.1978	a9 00		lda #$00			lda 	#0 							; get string.
.197a	a2 0e		ldx #$0e		ldx	#14
.197c	20 fb 3e	jsr $3efb		jsr	mainHandler
.197f	a5 98		lda $98				lda 	esInt0 						; copy address of string.
.1981	8d 07 0c	sta $0c07			sta 	gdText
.1984	a5 a0		lda $a0				lda 	esInt1
.1986	8d 08 0c	sta $0c08			sta 	gdText+1
.1989	4c 1c 19	jmp $191c			jmp 	_GHLoop
.198c					_GHTokenTable:
>198c	e1 e2 d2 da dc					.byte 	TKW_INK,TKW_PAPER,TKW_DIM,TKW_IMAGE,TKW_FLIP
>1991	00						.byte 	0
.1992					GHMakeCurrent:
.1992	8a		txa				txa
.1993	48		pha				pha
.1994	a2 00		ldx #$00			ldx 	#0 							; do for 0 offset (X)
.1996	20 a6 19	jsr $19a6			jsr 	_GHMCDoIt
.1999	a2 02		ldx #$02		ldx	#2
.199b	20 fb 3e	jsr $3efb		jsr	mainHandler
.199e	a2 02		ldx #$02			ldx 	#2 							; do for 2 offset (Y)
.19a0	20 a6 19	jsr $19a6			jsr 	_GHMCDoIt
.19a3	68		pla				pla
.19a4	aa		tax				tax
.19a5	60		rts				rts
.19a6					_GHMCDoIt:
.19a6	bd e8 0b	lda $0be8,x			lda 	gCurrentXPos,x 				; copy the current position to X,Y
.19a9	9d ec 0b	sta $0bec,x			sta 	gX1,x
.19ac	bd e9 0b	lda $0be9,x			lda 	gCurrentXPos+1,x
.19af	9d ed 0b	sta $0bed,x			sta 	gX1+1,x
.19b2	8a		txa				txa
.19b3	48		pha				pha
.19b4	a9 00		lda #$00			lda 	#0 							; evaluate the parameter, now in esInt0,esInt1
.19b6	a2 0a		ldx #$0a		ldx	#10
.19b8	20 fb 3e	jsr $3efb		jsr	mainHandler
.19bb	68		pla				pla
.19bc	aa		tax				tax
.19bd	a5 98		lda $98				lda 	esInt0 						; check coordinate range
.19bf	dd 03 0c	cmp $0c03,x			cmp 	gdXLimit,x
.19c2	a5 a0		lda $a0				lda 	esInt1
.19c4	fd 04 0c	sbc $0c04,x			sbc 	gdXLimit+1,x
.19c7	b0 17		bcs $19e0			bcs 	_GMHCRange
.19c9	a5 a8		lda $a8				lda 	esInt2
.19cb	05 b0		ora $b0				ora 	esInt3
.19cd	d0 11		bne $19e0			bne 	_GMHCRange
.19cf	a5 98		lda $98				lda 	esInt0 						; copy into current and X2,Y2
.19d1	9d e8 0b	sta $0be8,x			sta 	gCurrentXPos,x
.19d4	9d f0 0b	sta $0bf0,x			sta 	gX2,x
.19d7	a5 a0		lda $a0				lda 	esInt1
.19d9	9d e9 0b	sta $0be9,x			sta 	gCurrentXPos+1,x
.19dc	9d f1 0b	sta $0bf1,x			sta 	gX2+1,x
.19df	60		rts				rts
.19e0					_GMHCRange:
.19e0	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.19e2	20 36 15	jsr $1536		jsr	errorHandler

;******  Return to file: extension/extension.asm


;******  Processing file: extension/graphics/line.asm

.0c09					gdySign:
>0c09							.fill 	1
.19e5					Command_Line:
.19e5	a9 ed		lda #$ed			lda 	#LineHandler & $FF
.19e7	a2 19		ldx #$19			ldx 	#LineHandler >> 8
.19e9	20 0f 19	jsr $190f			jsr 	GHandler
.19ec	60		rts				rts
.19ed					LineHandler:
.19ed	a2 00		ldx #$00			ldx 	#gX1-gX1 					; check if horizontal, vertical line
.19ef	a0 04		ldy #$04			ldy 	#gX2-gX1
.19f1	20 d5 1c	jsr $1cd5			jsr 	CompareCoordsEq
.19f4	f0 09		beq $19ff			beq 	_LHRectCode
.19f6	a2 02		ldx #$02			ldx 	#gY1-gX1
.19f8	a0 06		ldy #$06			ldy 	#gY2-gX1
.19fa	20 d5 1c	jsr $1cd5			jsr 	CompareCoordsEq
.19fd	d0 03		bne $1a02			bne 	_LHLineDrawer
.19ff					_LHRectCode:
.19ff	4c 32 1b	jmp $1b32			jmp 	RectHandler
.1a02					_LHLineDrawer:
.1a02	a2 00		ldx #$00			ldx 	#gX1-gX1 					; check if X1 < X2 e.g. it is sloped to the right.
.1a04	a0 04		ldy #$04			ldy 	#gX2-gX1
.1a06	20 c0 1c	jsr $1cc0			jsr 	CompareCoords
.1a09	90 0a		bcc $1a15			bcc 	_LHNoSwap
.1a0b	20 08 1d	jsr $1d08			jsr 	GSwapCoords					; if so swap coords so X2 > X1, may be going up or down.
.1a0e	a2 02		ldx #$02			ldx 	#gY1-gX1
.1a10	a0 06		ldy #$06			ldy 	#gY2-gX1
.1a12	20 08 1d	jsr $1d08			jsr 	GSwapCoords
.1a15					_LHNoSwap:
.1a15	20 3e 1a	jsr $1a3e			jsr 	BresenhamInitialise 		; initialise Bresenham constants
.1a18	a0 00		ldy #$00			ldy 	#gX1-gX1
.1a1a	20 aa 1c	jsr $1caa			jsr 	SetupXY 					; set up X1,Y1 to draw.
.1a1d	b0 15		bcs $1a34			bcs 	_LHExit 					; line off screen.
.1a1f					_LHDrawLoop:
.1a1f	a2 00		ldx #$00			ldx 	#gX1-gX1 					; check if X1=X2 and Y1 = Y2
.1a21	a0 04		ldy #$04			ldy 	#gX2-gX1
.1a23	20 d5 1c	jsr $1cd5			jsr 	CompareCoordsEq
.1a26	d0 0d		bne $1a35			bne 	_LHNextPixel
.1a28	a2 06		ldx #$06			ldx 	#gY2-gX1
.1a2a	a0 06		ldy #$06			ldy 	#gY2-gX1
.1a2c	20 d5 1c	jsr $1cd5			jsr 	CompareCoordsEq
.1a2f	d0 04		bne $1a35			bne 	_LHNextPixel
.1a31	20 c4 1d	jsr $1dc4			jsr 	gdPlotInk 					; plot the last pixel.
.1a34					_LHExit:
.1a34	60		rts				rts
.1a35					_LHNextPixel:
.1a35	20 c4 1d	jsr $1dc4			jsr 	gdPlotInk 					; plot the pixel.
.1a38	20 92 1a	jsr $1a92			jsr 	BresenhamIteration 			; do one bresenham iteration calculation
.1a3b	4c 1f 1a	jmp $1a1f			jmp  	_LHDrawLoop 				; and loop back if okay
.1a3e					BresenhamInitialise:
.1a3e	38		sec				sec
.1a3f	ad f0 0b	lda $0bf0			lda 	gX2
.1a42	ed ec 0b	sbc $0bec			sbc 	gX1
.1a45	8d f8 0b	sta $0bf8			sta 	gdX
.1a48	ad f1 0b	lda $0bf1			lda 	gX2+1
.1a4b	ed ed 0b	sbc $0bed			sbc 	gX1+1
.1a4e	8d f9 0b	sta $0bf9			sta 	gdX+1
.1a51	38		sec				sec
.1a52	ad ee 0b	lda $0bee			lda 	gY1
.1a55	ed f2 0b	sbc $0bf2			sbc 	gY2
.1a58	8d fa 0b	sta $0bfa			sta 	gdy
.1a5b	ad ef 0b	lda $0bef			lda 	gY1+1
.1a5e	ed f3 0b	sbc $0bf3			sbc 	gY2+1
.1a61	8d fb 0b	sta $0bfb			sta 	gdy+1
.1a64	ad fb 0b	lda $0bfb			lda 	gdy+1 						; save sign of dy
.1a67	8d 09 0c	sta $0c09			sta 	gdysign
.1a6a	30 12		bmi $1a7e			bmi 	_BINormal
.1a6c	38		sec				sec
.1a6d	a9 00		lda #$00			lda 	#0
.1a6f	ed fa 0b	sbc $0bfa			sbc 	gdy
.1a72	8d fa 0b	sta $0bfa			sta 	gdy
.1a75	a9 00		lda #$00			lda 	#0
.1a77	ed fb 0b	sbc $0bfb			sbc 	gdy+1
.1a7a	8d fb 0b	sta $0bfb			sta 	gdy+1
.1a7d	60		rts				rts
.1a7e					_BINormal:
.1a7e	18		clc				clc
.1a7f	ad f8 0b	lda $0bf8			lda 	gdx
.1a82	6d fa 0b	adc $0bfa			adc 	gdy
.1a85	8d f4 0b	sta $0bf4			sta 	gError
.1a88	ad f9 0b	lda $0bf9			lda 	gdx+1
.1a8b	6d fb 0b	adc $0bfb			adc 	gdy+1
.1a8e	8d f5 0b	sta $0bf5			sta 	gError+1
.1a91	60		rts				rts
.1a92					BresenhamIteration:
.1a92	ad f4 0b	lda $0bf4			lda 	gError
.1a95	0a		asl a				asl 	a
.1a96	8d f6 0b	sta $0bf6			sta 	g2Error
.1a99	ad f5 0b	lda $0bf5			lda 	gError+1
.1a9c	2a		rol a				rol 	a
.1a9d	8d f7 0b	sta $0bf7			sta 	g2Error+1
.1aa0	a2 0a		ldx #$0a			ldx 	#g2Error-gX1
.1aa2	a0 0e		ldy #$0e			ldy 	#gdy-gX1
.1aa4	20 cd 1c	jsr $1ccd			jsr 	CompareCoordsSigned
.1aa7	30 03		bmi $1aac			bmi 	_BINoE2DY
.1aa9	20 b9 1a	jsr $1ab9			jsr 	BresenhamE2GEDY
.1aac					_BINoE2DY:
.1aac	a2 0c		ldx #$0c			ldx 	#gdx-gX1
.1aae	a0 0a		ldy #$0a			ldy 	#g2Error-gX1
.1ab0	20 cd 1c	jsr $1ccd			jsr 	CompareCoordsSigned
.1ab3	30 03		bmi $1ab8			bmi 	_BINoDXE2
.1ab5	20 d8 1a	jsr $1ad8			jsr 	BresenhamDXGEE2
.1ab8					_BINoDXE2:
.1ab8	60		rts				rts
.1ab9					BresenhamE2GEDY:
.1ab9	18		clc				clc
.1aba	ad f4 0b	lda $0bf4			lda 	gError
.1abd	6d fa 0b	adc $0bfa			adc 	gdy
.1ac0	8d f4 0b	sta $0bf4			sta 	gError
.1ac3	ad f5 0b	lda $0bf5			lda 	gError+1
.1ac6	6d fb 0b	adc $0bfb			adc 	gdy+1
.1ac9	8d f5 0b	sta $0bf5			sta 	gError+1
.1acc	ee ec 0b	inc $0bec			inc 	gX1
.1acf	d0 03		bne $1ad4			bne 	_BE2Skip
.1ad1	ee ed 0b	inc $0bed			inc 	gX1+1
.1ad4					_BE2Skip:
.1ad4	20 25 1d	jsr $1d25			jsr 	gdMvRight
.1ad7	60		rts				rts
.1ad8					BresenhamDXGEE2:
.1ad8	18		clc				clc
.1ad9	ad f4 0b	lda $0bf4			lda 	gError
.1adc	6d f8 0b	adc $0bf8			adc 	gdx
.1adf	8d f4 0b	sta $0bf4			sta 	gError
.1ae2	ad f5 0b	lda $0bf5			lda 	gError+1
.1ae5	6d f9 0b	adc $0bf9			adc 	gdx+1
.1ae8	8d f5 0b	sta $0bf5			sta 	gError+1
.1aeb	ad 09 0c	lda $0c09			lda 	gdySign
.1aee	10 0c		bpl $1afc			bpl 	_BEDXInvertY
.1af0	ee ee 0b	inc $0bee			inc 	gY1
.1af3	d0 03		bne $1af8			bne 	_BEDXSkip
.1af5	ee ef 0b	inc $0bef			inc 	gY1+1
.1af8					_BEDXSkip:
.1af8	20 60 1d	jsr $1d60			jsr 	gdMvDown
.1afb	60		rts				rts
.1afc					_BEDXInvertY:
.1afc	ad ee 0b	lda $0bee			lda 	gY1
.1aff	d0 03		bne $1b04			bne 	_BEDXSkip2
.1b01	ce ef 0b	dec $0bef			dec 	gY1+1
.1b04					_BEDXSkip2:
.1b04	ce ee 0b	dec $0bee			dec 	gY1
.1b07	20 3b 1d	jsr $1d3b			jsr 	gdMvUp
.1b0a	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/graphics/plot.asm

.1b0b					Command_Plot:
.1b0b	a9 13		lda #$13			lda 	#PlotHandler & $FF
.1b0d	a2 1b		ldx #$1b			ldx 	#PlotHandler >> 8
.1b0f	20 0f 19	jsr $190f			jsr 	GHandler
.1b12	60		rts				rts
.1b13					PlotHandler:
.1b13	a0 04		ldy #$04			ldy 	#gX2-gX1
.1b15	20 aa 1c	jsr $1caa			jsr 	SetupXY 					; set up X1,Y1 to draw.
.1b18	b0 03		bcs $1b1d			bcs 	_PHExit 					; off screen, return with CS.
.1b1a	20 c4 1d	jsr $1dc4			jsr 	gdPlotInk 					; pixel in Ink.
.1b1d	60		rts		_PHExit:rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/graphics/rectframe.asm

.0c0a					frameFlag:
>0c0a							.fill 	1
.1b1e					Command_Rect:
.1b1e	a9 32		lda #$32			lda 	#RectHandler & $FF
.1b20	a2 1b		ldx #$1b			ldx 	#RectHandler >> 8
.1b22	20 0f 19	jsr $190f			jsr 	GHandler
.1b25	60		rts				rts
.1b26					Command_Frame:
.1b26	a9 2e		lda #$2e			lda 	#FrameHandler & $FF
.1b28	a2 1b		ldx #$1b			ldx 	#FrameHandler >> 8
.1b2a	20 0f 19	jsr $190f			jsr 	GHandler
.1b2d	60		rts				rts
.1b2e					FrameHandler:
.1b2e	a9 01		lda #$01			lda 	#1
.1b30	d0 02		bne $1b34			bne 	RectHandler+2
.1b32					RectHandler:
.1b32	a9 00		lda #$00			lda 	#0
.1b34	8d 0a 0c	sta $0c0a			sta 	frameFlag
.1b37	20 e4 1c	jsr $1ce4			jsr 	BoxSort 					; sort so topleft/bottom right
.1b3a	20 63 1b	jsr $1b63			jsr 	DrawBoxPart 				; solid first line
.1b3d					_FHLoop:
.1b3d	a2 02		ldx #$02			ldx 	#gY1-gX1 					; check Y1 = Y2
.1b3f	a0 06		ldy #$06			ldy 	#gY2-gX1
.1b41	20 c0 1c	jsr $1cc0			jsr 	CompareCoords
.1b44	b0 19		bcs $1b5f			bcs 	_FHLastLine 				; Y1 >= Y2 then end.
.1b46	ad 0a 0c	lda $0c0a			lda 	frameFlag 					; identify solid or frame ?
.1b49	f0 06		beq $1b51			beq 	_FHIsSolidRect
.1b4b	20 7c 1b	jsr $1b7c			jsr 	DrawBoxEnds
.1b4e	4c 54 1b	jmp $1b54			jmp 	_FHNext
.1b51					_FHIsSolidRect:
.1b51	20 63 1b	jsr $1b63			jsr 	DrawBoxPart
.1b54					_FHNext:
.1b54	ee ee 0b	inc $0bee			inc 	gY1 						; bump Y1 and loop back.
.1b57	d0 e4		bne $1b3d			bne 	_FHLoop
.1b59	ee ef 0b	inc $0bef			inc 	gY1+1
.1b5c	4c 3d 1b	jmp $1b3d			jmp 	_FHLoop
.1b5f					_FHLastLine:
.1b5f	20 63 1b	jsr $1b63			jsr 	DrawBoxPart 				; solid last line whatever
.1b62					_FHExit:
.1b62	60		rts				rts
.1b63					DrawBoxPart:
.1b63	a0 00		ldy #$00			ldy 	#gX1-gX1
.1b65	20 aa 1c	jsr $1caa			jsr 	SetupXY 					; set up X1,Y1 to draw.
.1b68	38		sec				sec 								; calculate line length => temp0
.1b69	ad f0 0b	lda $0bf0			lda 	gX2
.1b6c	ed ec 0b	sbc $0bec			sbc 	gX1
.1b6f	48		pha				pha
.1b70	ad f1 0b	lda $0bf1			lda 	gX2+1
.1b73	ed ed 0b	sbc $0bed			sbc 	gx1+1
.1b76	aa		tax				tax
.1b77	68		pla				pla 								; line length in XA.
.1b78	20 94 1b	jsr $1b94			jsr 	DrawHorizontalLine
.1b7b	60		rts				rts
.1b7c					DrawBoxEnds:
.1b7c	a0 00		ldy #$00			ldy 	#gX1-gX1
.1b7e	20 aa 1c	jsr $1caa			jsr 	SetupXY 					; set up X1,Y1 to draw.
.1b81	20 c4 1d	jsr $1dc4			jsr 	gdPlotInk 					; LH end.
.1b84	ad f0 0b	lda $0bf0			lda 	gX2 						; set position to X2,Y1
.1b87	ae f1 0b	ldx $0bf1			ldx 	gX2+1
.1b8a	20 79 1e	jsr $1e79			jsr 	gdSetX
.1b8d	20 82 1d	jsr $1d82			jsr		gdSetDrawPosition 			; update position.
.1b90	20 c4 1d	jsr $1dc4			jsr 	gdPlotInk 					; RH end.
.1b93	60		rts				rts
.1b94					DrawHorizontalLine:
.1b94	86 32		stx $32				stx 	tempShort
.1b96	aa		tax				tax
.1b97	a4 32		ldy $32				ldy 	tempShort
.1b99	ad fe 0b	lda $0bfe			lda 	gdInk
.1b9c	4c 87 1e	jmp $1e87			jmp 	gdOptHorizontalWriter

;******  Return to file: extension/extension.asm


;******  Processing file: extension/graphics/renderer.asm

.0c0b					RenderFunction:
>0c0b							.fill 	2
.0c0d					RenderWidth:
>0c0d							.fill 	1
.0c0e					RenderHeight:
>0c0e							.fill 	1
.0c0f					RenderType:
>0c0f							.fill 	1
.0c10					RenderCache:
>0c10							.fill 	64
.1b9f					ImageRenderer:
.1b9f	8e 0c 0c	stx $0c0c			stx 	RenderFunction+1
.1ba2	8d 0b 0c	sta $0c0b			sta 	RenderFunction
.1ba5	a0 ff		ldy #$ff			ldy 	#255 						; get information.
.1ba7	20 92 1c	jsr $1c92			jsr 	CallRenderFunction
.1baa	8d 0f 0c	sta $0c0f			sta 	RenderType 					; and save it.
.1bad	8e 0d 0c	stx $0c0d			stx 	RenderWidth
.1bb0	8c 0e 0c	sty $0c0e			sty 	RenderHeight
.1bb3	8a		txa				txa 								; check X coordinate
.1bb4	a2 00		ldx #$00			ldx 	#0 							; offset to check position/limit.
.1bb6	20 59 1c	jsr $1c59			jsr 	RenderCheckRange
.1bb9	ad 0e 0c	lda $0c0e			lda 	RenderHeight 				; check Y coordinate
.1bbc	a2 02		ldx #$02			ldx 	#2
.1bbe	20 59 1c	jsr $1c59			jsr 	RenderCheckRange
.1bc1	a0 00		ldy #$00			ldy 	#0 							; Y is the current line #
.1bc3					_IRLoop1:
.1bc3	98		tya				tya
.1bc4	48		pha				pha
.1bc5	20 35 1c	jsr $1c35			jsr 	RenderFlipXY 				; flip X/Y for the correct vertical row.
.1bc8	20 92 1c	jsr $1c92			jsr 	CallRenderFunction 			; fill the rendering cache.
.1bcb	68		pla				pla
.1bcc	a8		tay				tay
.1bcd	ae 00 0c	ldx $0c00			ldx 	gdSize 						; number of times to do the row.
.1bd0					_IRLoop2:
.1bd0	20 dd 1b	jsr $1bdd			jsr 	RenderDrawRow 				; draw one row.
.1bd3	ca		dex				dex 								; scale # times.
.1bd4	d0 fa		bne $1bd0			bne 	_IRLoop2
.1bd6	c8		iny				iny 								; next vertical row
.1bd7	cc 0e 0c	cpy $0c0e			cpy 	RenderHeight 				; done the lot ?
.1bda	d0 e7		bne $1bc3			bne 	_IRLoop1
.1bdc	60		rts				rts
.1bdd					RenderDrawRow:
.1bdd	8a		txa				txa
.1bde	48		pha				pha
.1bdf	98		tya				tya
.1be0	48		pha				pha
.1be1	a0 04		ldy #$04			ldy 	#gX2-gX1 					; set the position at (x,y)
.1be3	20 aa 1c	jsr $1caa			jsr 	SetupXY
.1be6	68		pla				pla
.1be7	a8		tay				tay
.1be8	a2 00		ldx #$00			ldx 	#0 							; X is the current pixel.
.1bea					_RDRLoop1:
.1bea	20 fe 1b	jsr $1bfe			jsr 	RenderDrawPixelSet 			; draw a block of pixels of the correct size.
.1bed	e8		inx				inx
.1bee	ec 0d 0c	cpx $0c0d			cpx 	RenderWidth 				; until done the whole lot.
.1bf1	d0 f7		bne $1bea			bne 	_RDRLoop1
.1bf3	ee f2 0b	inc $0bf2			inc 	gY2 						; next line down
.1bf6	d0 03		bne $1bfb			bne 	_RDRNoCarry
.1bf8	ee f3 0b	inc $0bf3			inc 	gY2+1
.1bfb					_RDRNoCarry:
.1bfb	68		pla				pla
.1bfc	aa		tax				tax
.1bfd	60		rts				rts
.1bfe					RenderDrawPixelSet:
.1bfe	8a		txa				txa
.1bff	48		pha				pha
.1c00	98		tya				tya
.1c01	48		pha				pha
.1c02	20 35 1c	jsr $1c35			jsr 	RenderFlipXY 				; flip positions as required.
.1c05	20 1f 1c	jsr $1c1f			jsr 	RenderGetInk				; get colour to draw with.
.1c08	ae 00 0c	ldx $0c00			ldx 	gdSize 						; X counts the size.
.1c0b					_RDPSLoop:
.1c0b	c9 00		cmp #$00			cmp 	#0							; don't draw if $00
.1c0d	f0 03		beq $1c12			beq 	_RDPSNoDraw
.1c0f	20 c7 1d	jsr $1dc7			jsr 	gdPlotA 					; draw A otherwise
.1c12					_RDPSNoDraw:
.1c12	48		pha				pha 								; move right
.1c13	20 25 1d	jsr $1d25			jsr 	gdMvRight
.1c16	68		pla				pla
.1c17	ca		dex				dex
.1c18	d0 f1		bne $1c0b			bne 	_RDPSLoop 					; do it size times.
.1c1a	68		pla				pla
.1c1b	a8		tay				tay
.1c1c	68		pla				pla
.1c1d	aa		tax				tax
.1c1e	60		rts				rts
.1c1f					RenderGetInk:
.1c1f	ad 0f 0c	lda $0c0f			lda 	RenderType 					; type, if 0 it's a bitmap
.1c22	f0 04		beq $1c28			beq 	_RGIBitmap
.1c24	bd 10 0c	lda $0c10,x			lda 	RenderCache,x 				; read from the cache.
.1c27	60		rts				rts
.1c28					_RGIBitmap:
.1c28	bd 10 0c	lda $0c10,x			lda 	RenderCache,x 				; read from the cache.
.1c2b	f0 04		beq $1c31			beq 	_RGIBPaper 					; return ink if #0, paper if =0
.1c2d	ad fe 0b	lda $0bfe			lda 	gdInk
.1c30	60		rts				rts
.1c31					_RGIBPaper:
.1c31	ad ff 0b	lda $0bff			lda 	gdPaper
.1c34	60		rts				rts
.1c35					RenderFlipXY:
.1c35	ad 02 0c	lda $0c02			lda 	gdFlip 						; check any flip at all
.1c38	29 03		and #$03			and 	#3
.1c3a	f0 1c		beq $1c58			beq 	_RFExit
.1c3c	4a		lsr a				lsr 	a 							; bit 0 in carry flag
.1c3d	90 09		bcc $1c48			bcc 	_RFNoHFlip
.1c3f	ad 0d 0c	lda $0c0d			lda 	RenderWidth 				; X Flip
.1c42	86 32		stx $32				stx 	tempShort
.1c44	18		clc				clc
.1c45	e5 32		sbc $32				sbc 	tempShort
.1c47	aa		tax				tax
.1c48					_RFNoHFlip:
.1c48	ad 02 0c	lda $0c02			lda 	gdFlip
.1c4b	29 02		and #$02			and 	#2 							; bit 1 check
.1c4d	f0 09		beq $1c58			beq 	_RFExit
.1c4f	ad 0e 0c	lda $0c0e			lda 	RenderHeight 				; Y Flip
.1c52	84 32		sty $32				sty 	tempShort
.1c54	18		clc				clc
.1c55	e5 32		sbc $32				sbc 	tempShort
.1c57	a8		tay				tay
.1c58					_RFExit:
.1c58	60		rts				rts
.1c59					RenderCheckRange:
.1c59	85 2b		sta $2b				sta 	temp0+1 					; save multiplier => temp0+1
.1c5b	ac 00 0c	ldy $0c00			ldy 	gdSize 						; multiplicand (size) => temp0, must be non zero
.1c5e	84 2a		sty $2a				sty 	temp0
.1c60	f0 2b		beq $1c8d			beq 	_RCRValue
.1c62	a9 00		lda #$00			lda 	#0 							; total
.1c64					_RCRMultiply:
.1c64	46 2a		lsr $2a				lsr 	temp0 						; shift LSB size into carry
.1c66	90 05		bcc $1c6d			bcc 	_RCRNoAdd 					; not adding this time.
.1c68	18		clc				clc
.1c69	65 2b		adc $2b				adc 	temp0+1 					; add the size.
.1c6b	b0 20		bcs $1c8d			bcs 	_RCRValue 					; overflow
.1c6d					_RCRNoAdd:
.1c6d	06 2b		asl $2b				asl 	temp0+1 					; double multiplier
.1c6f	a4 2a		ldy $2a				ldy 	temp0 						; until adder is zero
.1c71	d0 f1		bne $1c64			bne 	_RCRMultiply
.1c73	18		clc				clc 								; add to x2 or y2, store in temp0
.1c74	7d f0 0b	adc $0bf0,x			adc 	gX2,x 						; this is the Right/Bottom coordinate of the image
.1c77	85 2a		sta $2a				sta 	temp0
.1c79	bd f1 0b	lda $0bf1,x			lda 	gX2+1,x
.1c7c	69 00		adc #$00			adc 	#0
.1c7e	85 2b		sta $2b				sta 	temp0+1
.1c80	a5 2a		lda $2a				lda 	temp0 						; check right vs edge of screen.
.1c82	dd 03 0c	cmp $0c03,x			cmp 	gdXLimit,x
.1c85	a5 2b		lda $2b				lda 	temp0+1
.1c87	fd 04 0c	sbc $0c04,x			sbc 	gdXLimit+1,x
.1c8a	b0 01		bcs $1c8d			bcs 	_RCRValue 					; does not fit, so don't draw.
.1c8c	60		rts				rts
.1c8d					_RCRValue:
.1c8d	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.1c8f	20 36 15	jsr $1536		jsr	errorHandler
.1c92					CallRenderFunction:
.1c92	6c 0b 0c	jmp ($0c0b)			jmp 	(RenderFunction)
.1c95					TestImageAccess:
.1c95	c0 ff		cpy #$ff			cpy 	#255 						; get information
.1c97	f0 0a		beq $1ca3			beq 	_TIAGetInfo
.1c99	a0 3f		ldy #$3f			ldy 	#63
.1c9b					_TIACreate:
.1c9b	98		tya				tya
.1c9c	99 10 0c	sta $0c10,y			sta 	RenderCache,y
.1c9f	88		dey				dey
.1ca0	10 f9		bpl $1c9b			bpl 	_TIACreate
.1ca2	60		rts				rts
.1ca3					_TIAGetInfo:
.1ca3	a9 01		lda #$01			lda 	#1 							; image (1) bitmap (0)
.1ca5	a2 20		ldx #$20			ldx 	#32 						; pixel width
.1ca7	a0 20		ldy #$20			ldy 	#32							; pixel height
.1ca9	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/graphics/utils.asm

.1caa					SetupXY:
.1caa	b9 ec 0b	lda $0bec,y			lda 	gX1,y
.1cad	be ed 0b	ldx $0bed,y			ldx 	gX1+1,y
.1cb0	20 79 1e	jsr $1e79			jsr 	gdSetX
.1cb3	b9 ee 0b	lda $0bee,y			lda 	gY1,y
.1cb6	be ef 0b	ldx $0bef,y			ldx 	gY1+1,y
.1cb9	20 80 1e	jsr $1e80			jsr 	gdSetY
.1cbc	20 82 1d	jsr $1d82			jsr 	gdSetDrawPosition
.1cbf	60		rts				rts
.1cc0					CompareCoords:
.1cc0	bd ec 0b	lda $0bec,x			lda 	gX1,x
.1cc3	d9 ec 0b	cmp $0bec,y			cmp 	gX1,y
.1cc6	bd ed 0b	lda $0bed,x			lda 	gX1+1,x
.1cc9	f9 ed 0b	sbc $0bed,y			sbc 	gX1+1,y
.1ccc	60		rts				rts
.1ccd					CompareCoordsSigned:
.1ccd	20 c0 1c	jsr $1cc0			jsr 	CompareCoords
.1cd0	50 02		bvc $1cd4			bvc 	_CCSExit
.1cd2	49 80		eor #$80			eor 	#$80
.1cd4					_CCSExit:
.1cd4	60		rts				rts
.1cd5					CompareCoordsEq:
.1cd5	bd ec 0b	lda $0bec,x			lda 	gX1,x
.1cd8	d9 ec 0b	cmp $0bec,y			cmp 	gX1,y
.1cdb	d0 06		bne $1ce3			bne 	_CCEExit
.1cdd	bd ed 0b	lda $0bed,x			lda 	gX1+1,x
.1ce0	d9 ed 0b	cmp $0bed,y			cmp 	gX1+1,y
.1ce3					_CCEExit:
.1ce3	60		rts				rts
.1ce4					BoxSort:
.1ce4	a2 00		ldx #$00			ldx 	#gx1-gx1
.1ce6	a0 04		ldy #$04			ldy 	#gx2-gx1
.1ce8	20 f9 1c	jsr $1cf9			jsr 	GCompareCoords
.1ceb	20 06 1d	jsr $1d06			jsr 	GSortMinMaxCoords
.1cee	a2 02		ldx #$02			ldx 	#gy1-gx1
.1cf0	a0 06		ldy #$06			ldy 	#gy2-gx1
.1cf2	20 f9 1c	jsr $1cf9			jsr 	GCompareCoords
.1cf5	20 06 1d	jsr $1d06			jsr 	GSortMinMaxCoords
.1cf8	60		rts				rts
.1cf9					GCompareCoords:
.1cf9	bd ec 0b	lda $0bec,x			lda 	gx1,x
.1cfc	d9 ec 0b	cmp $0bec,y			cmp 	gx1,y
.1cff	bd ed 0b	lda $0bed,x			lda 	gx1+1,x
.1d02	f9 ed 0b	sbc $0bed,y			sbc 	gx1+1,y
.1d05	60		rts				rts
.1d06					GSortMinMaxCoords:
.1d06	90 1c		bcc $1d24			bcc 	GSMMCExit
.1d08					GSwapCoords:
.1d08	bd ec 0b	lda $0bec,x			lda 	gx1,x
.1d0b	48		pha				pha
.1d0c	b9 ec 0b	lda $0bec,y			lda 	gx1,y
.1d0f	9d ec 0b	sta $0bec,x			sta 	gx1,x
.1d12	68		pla				pla
.1d13	99 ec 0b	sta $0bec,y			sta 	gx1,y
.1d16	bd ed 0b	lda $0bed,x			lda 	gx1+1,x
.1d19	48		pha				pha
.1d1a	b9 ed 0b	lda $0bed,y			lda 	gx1+1,y
.1d1d	9d ed 0b	sta $0bed,x			sta 	gx1+1,x
.1d20	68		pla				pla
.1d21	99 ed 0b	sta $0bed,y			sta 	gx1+1,y
.1d24					GSMMCExit:
.1d24	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/driver/coords.asm

.1d25					gdMvRight:
.1d25	ee 20 9f	inc $9f20			inc 	$9F20 						; bump $9F20
.1d28	d0 08		bne $1d32			bne 	_gdMR0
.1d2a	ee 21 9f	inc $9f21			inc 	$9F21
.1d2d	d0 03		bne $1d32			bne 	_gdMR0
.1d2f	ee 22 9f	inc $9f22			inc 	$9F22
.1d32					_gdMR0:
.1d32	ee 54 0c	inc $0c54			inc 	gdXPos
.1d35	d0 03		bne $1d3a			bne 	_gdMR1
.1d37	ee 55 0c	inc $0c55			inc 	gdXPos+1
.1d3a					_gdMR1:
.1d3a	60		rts				rts
.1d3b					gdMvUp:
.1d3b	ad 56 0c	lda $0c56			lda 	gdYPos 						; decrement Y Pos
.1d3e	d0 03		bne $1d43			bne 	_gdMU1
.1d40	ce 57 0c	dec $0c57			dec 	gdYPos+1
.1d43	ce 56 0c	dec $0c56	_gdMU1:	dec 	gdYPos
.1d46	38		sec				sec 								; adjust position by -320
.1d47	ad 20 9f	lda $9f20			lda 	$9F20
.1d4a	e9 40		sbc #$40			sbc 	#64
.1d4c	8d 20 9f	sta $9f20			sta 	$9F20
.1d4f	ad 21 9f	lda $9f21			lda 	$9F21
.1d52	e9 01		sbc #$01			sbc 	#1
.1d54	8d 21 9f	sta $9f21			sta 	$9F21
.1d57	ad 22 9f	lda $9f22			lda 	$9F22
.1d5a	e9 00		sbc #$00			sbc 	#0
.1d5c	8d 22 9f	sta $9f22			sta 	$9F22
.1d5f	60		rts				rts
.1d60					gdMvDown:
.1d60	ee 56 0c	inc $0c56			inc 	gdYPos 						; decrement Y Pos
.1d63	d0 03		bne $1d68			bne 	_gdMU1
.1d65	ee 57 0c	inc $0c57			inc 	gdYPos+1
.1d68					_gdMU1:
.1d68	18		clc				clc 								; adjust position by -320
.1d69	ad 20 9f	lda $9f20			lda 	$9F20
.1d6c	69 40		adc #$40			adc 	#64
.1d6e	8d 20 9f	sta $9f20			sta 	$9F20
.1d71	ad 21 9f	lda $9f21			lda 	$9F21
.1d74	69 01		adc #$01			adc 	#1
.1d76	8d 21 9f	sta $9f21			sta 	$9F21
.1d79	ad 22 9f	lda $9f22			lda 	$9F22
.1d7c	69 00		adc #$00			adc 	#0
.1d7e	8d 22 9f	sta $9f22			sta 	$9F22
.1d81	60		rts				rts
.1d82					gdSetDrawPosition:
.1d82	a9 00		lda #$00			lda 	#0 							; temp0 is LSB of result start as 256 x Y
.1d84	85 2a		sta $2a				sta 	temp0
.1d86	ad 56 0c	lda $0c56			lda 	gdYPos
.1d89	85 2b		sta $2b				sta 	temp0+1
.1d8b	46 2b		lsr $2b				lsr 	temp0+1 					; / 4 so temp0 is YC x 64
.1d8d	66 2a		ror $2a				ror 	temp0
.1d8f	46 2b		lsr $2b				lsr 	temp0+1
.1d91	66 2a		ror $2a				ror 	temp0
.1d93	ad 56 0c	lda $0c56			lda 	gdYPos 						; add 256 x Y => 320 * Y < 64k
.1d96	18		clc				clc
.1d97	65 2b		adc $2b				adc 	temp0+1
.1d99	85 2b		sta $2b				sta 	temp0+1 					; temp0 = 320 x Y now add X => pixeloffset
.1d9b	18		clc				clc
.1d9c	a5 2a		lda $2a				lda 	temp0
.1d9e	6d 54 0c	adc $0c54			adc 	gdXPos
.1da1	85 2a		sta $2a				sta 	temp0
.1da3	a5 2b		lda $2b				lda 	temp0+1
.1da5	6d 55 0c	adc $0c55			adc 	gdXPos+1
.1da8	85 2b		sta $2b				sta 	temp0+1
.1daa	18		clc				clc
.1dab	ad 51 0c	lda $0c51			lda 	gdBitmapAddress
.1dae	65 2a		adc $2a				adc 	temp0
.1db0	8d 20 9f	sta $9f20			sta 	$9F20
.1db3	ad 52 0c	lda $0c52			lda 	gdBitmapAddress+1
.1db6	65 2b		adc $2b				adc 	temp0+1
.1db8	8d 21 9f	sta $9f21			sta 	$9F21
.1dbb	ad 53 0c	lda $0c53			lda 	gdBitmapAddress+2
.1dbe	69 00		adc #$00			adc 	#0
.1dc0	8d 22 9f	sta $9f22			sta 	$9F22
.1dc3	60		rts				rts
.1dc4					gdPlotInk:
.1dc4	ad fe 0b	lda $0bfe			lda 	gdInk
.1dc7					gdPlotA:
.1dc7	8d 23 9f	sta $9f23			sta 	$9F23
.1dca	60		rts				rts
.1dcb					gdPlotPaper:
.1dcb	ad ff 0b	lda $0bff			lda 	gdPaper
.1dce	c9 ff		cmp #$ff			cmp 	#$FF
.1dd0	f0 03		beq $1dd5			beq 	_gdPPSkip
.1dd2	8d 23 9f	sta $9f23			sta 	$9F23
.1dd5					_gdPPSkip:
.1dd5	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/driver/driver.asm

.0c50					gdEnabled:
>0c50							.fill 	1
.0c51					gdBitmapAddress:
>0c51							.fill 	3
.0c54					gdXPos:
>0c54							.fill 	2
.0c56					gdYPos:
>0c56							.fill 	2
.1dd6					gdModeChanged:
.1dd6	8a		txa				txa
.1dd7	48		pha				pha
.1dd8	98		tya				tya
.1dd9	48		pha				pha
.1dda	a9 00		lda #$00			lda 	#0 							; zero the enabled flag.
.1ddc	8d 50 0c	sta $0c50			sta 	gdEnabled
.1ddf	ad 2a 9f	lda $9f2a			lda 	$9F2A 						; requires $40 for H/V Scale
.1de2	c9 40		cmp #$40			cmp 	#$40
.1de4	d0 1f		bne $1e05			bne 	_gdExit
.1de6	ad 2b 9f	lda $9f2b			lda 	$9F2B
.1de9	c9 40		cmp #$40			cmp 	#$40
.1deb	d0 18		bne $1e05			bne 	_gdExit
.1ded	ad 29 9f	lda $9f29			lda 	$9F29 						; read DC_Video, see which layers are enabled.
.1df0	0a		asl a				asl 	a 							;
.1df1	0a		asl a				asl 	a 							; bit 7 now set if layer 1 enabled.
.1df2	10 09		bpl $1dfd			bpl 	_gdNotLayer1
.1df4	48		pha				pha 								; save A
.1df5	a2 07		ldx #$07			ldx 	#7 							; check offset 7 (e.g. start at $9F34)
.1df7	20 0d 1e	jsr $1e0d			jsr 	gdCheckBitmap 				; go see if this is a bitmap
.1dfa	68		pla				pla 								; restore A
.1dfb	b0 08		bcs $1e05			bcs 	_gdExit 					; if successful then exit
.1dfd					_gdNotLayer1:
.1dfd	0a		asl a				asl 	a 							; bit 7 now set if layer 0 enabled.
.1dfe	10 05		bpl $1e05			bpl 	_gdExit 					; if not enabled, exit
.1e00	a2 00		ldx #$00			ldx 	#0 							; check offset 0 (e.g. start at $9F2D)
.1e02	20 0d 1e	jsr $1e0d			jsr 	gdCheckBitmap 				; go see if this is a bitmap
.1e05					_gdExit:
.1e05	20 41 1e	jsr $1e41			jsr 	gdClearGraphics 			; clear graphics display.
.1e08	68		pla				pla
.1e09	a8		tay				tay
.1e0a	68		pla				pla
.1e0b	aa		tax				tax
.1e0c	60		rts				rts
.1e0d					gdCheckBitmap:
.1e0d	bd 2d 9f	lda $9f2d,x			lda 	$9F2D,x 					; look at bitmap bit.
.1e10	c9 07		cmp #$07			cmp 	#7 							; must be zero map size, bitmap and 8bpp
.1e12	d0 14		bne $1e28			bne 	_gdCBFail
.1e14	ee 50 0c	inc $0c50			inc 	gdEnabled 					; set the enabled flag to non zero.
.1e17	bd 2f 9f	lda $9f2f,x			lda 	$9F2F,x 					; this is the bitmap address / 2
.1e1a	0a		asl a				asl 	a
.1e1b	8d 52 0c	sta $0c52			sta 	gdBitmapAddress+1
.1e1e	69 00		adc #$00			adc 	#$00 						; set to no move, updated manually.
.1e20	8d 53 0c	sta $0c53			sta 	gdBitmapAddress+2
.1e23	a9 00		lda #$00			lda 	#$00
.1e25	8d 51 0c	sta $0c51			sta 	gdBitmapAddress 			; this is a 17 bit address.
.1e28					_gdCBFail:
.1e28	18		clc				clc
.1e29	60		rts				rts
.1e2a					CommandClg:
.1e2a	b1 28		lda ($28),y			lda 	(codePtr),y
.1e2c	c9 e2		cmp #$e2			cmp 	#TKW_PAPER
.1e2e	d0 0d		bne $1e3d			bne 	_CCLClear
.1e30	c8		iny				iny
.1e31	a9 00		lda #$00			lda 	#0
.1e33	a2 0c		ldx #$0c		ldx	#12
.1e35	20 fb 3e	jsr $3efb		jsr	mainHandler
.1e38	a5 98		lda $98				lda 	esInt0
.1e3a	8d ff 0b	sta $0bff			sta 	gdPaper
.1e3d					_CCLClear:
.1e3d	20 41 1e	jsr $1e41			jsr 	gdClearGraphics
.1e40	60		rts				rts
.1e41					gdClearGraphics:
.1e41	8a		txa				txa
.1e42	48		pha				pha
.1e43	98		tya				tya
.1e44	48		pha				pha
.1e45	ad 50 0c	lda $0c50			lda 	gdEnabled 					; screen enabled
.1e48	f0 2a		beq $1e74			beq 	_gdCGExit
.1e4a	a9 40		lda #$40			lda 	#(320) & $FF
.1e4c	8d 03 0c	sta $0c03			sta 	gdXLimit
.1e4f	a9 01		lda #$01			lda 	#(320) >> 8
.1e51	8d 04 0c	sta $0c04			sta 	1+(gdXLimit)
.1e54	a9 c8		lda #$c8			lda 	#(200) & $FF
.1e56	8d 05 0c	sta $0c05			sta 	gdYLimit
.1e59	a9 00		lda #$00			lda 	#(200) >> 8
.1e5b	8d 06 0c	sta $0c06			sta 	1+(gdYLimit)
.1e5e	a9 00		lda #$00			lda 	#0 							; home cursor
.1e60	aa		tax				tax
.1e61	20 79 1e	jsr $1e79			jsr 	gdSetX
.1e64	20 80 1e	jsr $1e80			jsr 	gdSetY
.1e67	20 82 1d	jsr $1d82			jsr 	gdSetDrawPosition 			; set the draw position.
.1e6a	a0 fa		ldy #$fa			ldy 	#$FA						; 320 x 200 pixels = $FA00
.1e6c	a2 00		ldx #$00			ldx 	#0
.1e6e	ad ff 0b	lda $0bff			lda 	gdPaper
.1e71	20 87 1e	jsr $1e87			jsr 	gdOptHorizontalWriter
.1e74					_gdCGExit:
.1e74	68		pla				pla
.1e75	a8		tay				tay
.1e76	68		pla				pla
.1e77	aa		tax				tax
.1e78	60		rts				rts
.1e79					gdSetX:
.1e79	8d 54 0c	sta $0c54			sta 	gdXPos
.1e7c	8e 55 0c	stx $0c55			stx 	gdXPos+1
.1e7f	60		rts				rts
.1e80					gdSetY:
.1e80	8d 56 0c	sta $0c56			sta 	gdYPos
.1e83	8e 57 0c	stx $0c57			stx 	gdYPos+1
.1e86	60		rts				rts
.1e87					gdOptHorizontalWriter:
.1e87	48		pha				pha
.1e88	ad 22 9f	lda $9f22			lda 	$9F22 						; make it autoincrement.
.1e8b	09 10		ora #$10			ora 	#$10
.1e8d	8d 22 9f	sta $9f22			sta 	$9F22
.1e90	68		pla				pla
.1e91					_gdOLoop:
.1e91	8d 23 9f	sta $9f23			sta 	$9F23
.1e94	e0 00		cpx #$00			cpx 	#0
.1e96	d0 05		bne $1e9d			bne 	_gdNoBorrow
.1e98	c0 00		cpy #$00			cpy 	#0
.1e9a	f0 05		beq $1ea1			beq 	_gdExit
.1e9c	88		dey				dey
.1e9d					_gdNoBorrow:
.1e9d	ca		dex				dex
.1e9e	4c 91 1e	jmp $1e91			jmp 	_gdOLoop
.1ea1					_gdExit:
.1ea1	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/miscellany/clock.asm

.1ea2					Unary_Clock:
.1ea2	a2 0c		ldx #$0c		ldx	#12
.1ea4	20 fb 3e	jsr $3efb		jsr	mainHandler
.1ea7	48		pha				pha 								; save stack pos
.1ea8	a2 04		ldx #$04		ldx	#4
.1eaa	20 fb 3e	jsr $3efb		jsr	mainHandler
.1ead	98		tya				tya
.1eae	48		pha				pha
.1eaf	20 50 ff	jsr $ff50			jsr 	$FF50
.1eb2	68		pla				pla
.1eb3	a8		tay				tay
.1eb4	68		pla				pla 								; restore, repush, put into X to read offset
.1eb5	48		pha				pha
.1eb6	aa		tax				tax
.1eb7	b5 98		lda $98,x			lda 	esInt0,x 					; must be 0-5
.1eb9	c9 06		cmp #$06			cmp 	#6
.1ebb	b0 0d		bcs $1eca			bcs 	_UCValue
.1ebd	aa		tax				tax 								; index in X and read RTC.
.1ebe	b5 02		lda $02,x			lda 	2,x
.1ec0	85 32		sta $32				sta 	tempshort
.1ec2	68		pla				pla 								; restore number stack index.
.1ec3	aa		tax				tax
.1ec4	a5 32		lda $32				lda 	tempShort
.1ec6	95 98		sta $98,x			sta 	esInt0,x 					; rest are set up.
.1ec8	8a		txa				txa
.1ec9	60		rts				rts
.1eca					_UCValue:
.1eca	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.1ecc	20 36 15	jsr $1536		jsr	errorHandler

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/miscellany/joystick.asm

.1ecf					Unary_JoyX:
.1ecf	38		sec				sec
.1ed0	b0 01		bcs $1ed3			bcs 	JoystickRead
.1ed2					Unary_JoyY:
.1ed2	18		clc				clc
.1ed3					JoystickRead:
.1ed3	48		pha				pha 								; save stack position
.1ed4	08		php				php 								; save test flag.
.1ed5	a2 04		ldx #$04		ldx	#4
.1ed7	20 fb 3e	jsr $3efb		jsr	mainHandler
.1eda	20 34 1f	jsr $1f34			jsr 	ReadJoystick 				; read it.
.1edd	28		plp				plp
.1ede	b0 02		bcs $1ee2			bcs 	_JRNoShift 					; if Y, shift right twice so accessing Y buttons
.1ee0	4a		lsr a				lsr 	a
.1ee1	4a		lsr a				lsr 	a
.1ee2					_JRNoShift:
.1ee2	29 03		and #$03			and 	#3 							; isolate the test bits.
.1ee4	f0 0d		beq $1ef3			beq 	JoyReturnA 					; if nothing pressed, return A.
.1ee6	c9 03		cmp #$03			cmp 	#3
.1ee8	f0 07		beq $1ef1			beq 	JoyReturnFalse 				; could be both on a keyboard.
.1eea	4a		lsr a				lsr 	a 							; bit 0 set, its +1
.1eeb	b0 16		bcs $1f03			bcs 	JoyReturn1
.1eed					JoyReturnTrue:
.1eed	a9 ff		lda #$ff			lda 	#$FF
.1eef	d0 02		bne $1ef3			bne 	JoyReturnA
.1ef1					JoyReturnFalse:
.1ef1	a9 00		lda #$00			lda 	#0
.1ef3					JoyReturnA:
.1ef3	85 32		sta $32				sta 	tempShort 					; return A
.1ef5	68		pla				pla
.1ef6	aa		tax				tax
.1ef7	a5 32		lda $32				lda 	tempShort
.1ef9	95 98		sta $98,x			sta 	esInt0,x
.1efb					JoyReturn13:
.1efb	95 a0		sta $a0,x			sta 	esInt1,x
.1efd	95 a8		sta $a8,x			sta 	esInt2,x
.1eff	95 b0		sta $b0,x			sta 	esInt3,x
.1f01	8a		txa				txa 								; return NSP in A
.1f02	60		rts				rts
.1f03					JoyReturn1:
.1f03	68		pla				pla
.1f04	aa		tax				tax
.1f05	a9 01		lda #$01			lda 	#1
.1f07	95 98		sta $98,x			sta 	esInt0,x
.1f09	a9 00		lda #$00			lda 	#0
.1f0b	f0 ee		beq $1efb			beq 	JoyReturn13
.1f0d					Unary_JButton:
.1f0d	48		pha				pha 								; save X on stack, put in X
.1f0e	a2 0c		ldx #$0c		ldx	#12
.1f10	20 fb 3e	jsr $3efb		jsr	mainHandler
.1f13	aa		tax				tax 								; get value to check, push on stack.
.1f14	b5 98		lda $98,x			lda 	esInt0,x
.1f16	c9 04		cmp #$04			cmp 	#4 							; check button 0-3
.1f18	b0 15		bcs $1f2f			bcs 	_UJBadValue
.1f1a	69 05		adc #$05			adc 	#5 							; four more shifts to get the bit into carry.
.1f1c	48		pha				pha 								; save that shift count on the stack.
.1f1d	a2 04		ldx #$04		ldx	#4
.1f1f	20 fb 3e	jsr $3efb		jsr	mainHandler
.1f22	68		pla				pla
.1f23	aa		tax				tax
.1f24	20 34 1f	jsr $1f34			jsr 	ReadJoystick 				; joystick read
.1f27					_UJShift:
.1f27	4a		lsr a				lsr 	a
.1f28	ca		dex				dex
.1f29	d0 fc		bne $1f27			bne 	_UJShift
.1f2b	b0 c0		bcs $1eed			bcs 	JoyReturnTrue
.1f2d	90 c2		bcc $1ef1			bcc 	JoyReturnFalse
.1f2f					_UJBadValue:
.1f2f	a2 28		ldx #$28			ldx 	#ErrorID_Hardware
.1f31	20 36 15	jsr $1536		jsr	errorHandler
.1f34					ReadJoystick:
.1f34	8a		txa				txa
.1f35	48		pha				pha
.1f36	98		tya				tya
.1f37	48		pha				pha
.1f38	a9 00		lda #$00			lda 	#0
.1f3a	20 56 ff	jsr $ff56			jsr 	$FF56
.1f3d	c0 00		cpy #$00			cpy 	#0
.1f3f	d0 11		bne $1f52			bne 	_RJError
.1f41	c9 00		cmp #$00			cmp 	#0 							; bug, returns $00 initially
.1f43	d0 02		bne $1f47			bne 	_RJNoBug
.1f45	a9 ff		lda #$ff			lda 	#$FF
.1f47					_RJNoBug:
.1f47	85 32		sta $32				sta 	tempShort
.1f49	68		pla				pla
.1f4a	a8		tay				tay
.1f4b	68		pla				pla
.1f4c	aa		tax				tax
.1f4d	a5 32		lda $32				lda 	tempShort
.1f4f	49 ff		eor #$ff			eor 	#$FF 						; active 1 bit.
.1f51	60		rts				rts
.1f52					_RJError:
.1f52	a2 28		ldx #$28			ldx 	#ErrorID_Hardware
.1f54	20 36 15	jsr $1536		jsr	errorHandler

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/sound/sound.asm

=16					Channels = 16 								; # of sound channels.
.0c58					LiveChannels:
>0c58							.fill 	1
.0c59					ChannelTime:
>0c59							.fill 	Channels 					; # of ticks until channels goes silent if non-zero
.1f57					SoundReset:
.1f57	a9 00		lda #$00			lda 	#0							; no channels playing
.1f59	8d 58 0c	sta $0c58			sta 	LiveChannels
.1f5c	a2 0f		ldx #$0f			ldx 	#Channels-1
.1f5e					_SCClear:
.1f5e	9d 59 0c	sta $0c59,x			sta 	ChannelTime,x
.1f61	ca		dex				dex
.1f62	10 fa		bpl $1f5e			bpl 	_SCClear
.1f64	a9 c0		lda #$c0			lda 	#$C0 						; point VRAM data pointer to $1F9C0 increment
.1f66	8d 20 9f	sta $9f20			sta 	$9F20
.1f69	a9 f9		lda #$f9			lda 	#$F9
.1f6b	8d 21 9f	sta $9f21			sta 	$9F21
.1f6e	a9 11		lda #$11			lda 	#$11
.1f70	8d 22 9f	sta $9f22			sta 	$9F22
.1f73					_SCClear2:
.1f73	a9 00		lda #$00			lda 	#0
.1f75	8d 23 9f	sta $9f23			sta 	$9F23
.1f78	ad 22 9f	lda $9f22			lda 	$9F22
.1f7b	d0 f6		bne $1f73			bne 	_SCClear2
.1f7d	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/sprites/collide.asm

.0c69					hitSprite1:
>0c69							.fill 	1 							; this won't work ... if you nest HIT() which
.0c6a					hitSprite2:
>0c6a							.fill 	1
.0c6b					hitRange:
>0c6b							.fill 	1
.1f7e					FunctionCollide:
.1f7e	48		pha				pha 								; save and put index into X
.1f7f	aa		tax				tax
.1f80	a9 00		lda #$00			lda 	#0 							; set hit range to default.
.1f82	8d 6b 0c	sta $0c6b			sta 	hitRange
.1f85	20 2a 20	jsr $202a			jsr 	_FCGetSpriteID
.1f88	8d 69 0c	sta $0c69			sta 	hitSprite1
.1f8b	8a		txa				txa
.1f8c	48		pha				pha
.1f8d	a2 02		ldx #$02		ldx	#2
.1f8f	20 fb 3e	jsr $3efb		jsr	mainHandler
.1f92	68		pla				pla
.1f93	aa		tax				tax
.1f94	20 2a 20	jsr $202a			jsr 	_FCGetSpriteID
.1f97	8d 6a 0c	sta $0c6a			sta 	hitSprite2
.1f9a	b1 28		lda ($28),y			lda 	(codePtr),y 				; is there a third parameter
.1f9c	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.1f9e	f0 13		beq $1fb3			beq 	_FCParam2
.1fa0	8a		txa				txa
.1fa1	48		pha				pha
.1fa2	a2 02		ldx #$02		ldx	#2
.1fa4	20 fb 3e	jsr $3efb		jsr	mainHandler
.1fa7	68		pla				pla
.1fa8	a2 0c		ldx #$0c		ldx	#12
.1faa	20 fb 3e	jsr $3efb		jsr	mainHandler
.1fad	aa		tax				tax
.1fae	b5 98		lda $98,x			lda 	esInt0,x
.1fb0	8d 6b 0c	sta $0c6b			sta 	hitRange
.1fb3					_FCParam2:
.1fb3	a2 04		ldx #$04		ldx	#4
.1fb5	20 fb 3e	jsr $3efb		jsr	mainHandler
.1fb8	68		pla				pla 								; set X to point to the stack again.
.1fb9	48		pha				pha
.1fba	aa		tax				tax
.1fbb	98		tya				tya
.1fbc	48		pha				pha
.1fbd	18		clc				clc 								; do it with the horizontal values.
.1fbe	20 e0 1f	jsr $1fe0			jsr 	_FCCheck
.1fc1	90 0a		bcc $1fcd			bcc 	_FCFail
.1fc3	38		sec				sec 								; do it with the vertical values.
.1fc4	20 e0 1f	jsr $1fe0			jsr 	_FCCheck
.1fc7	90 04		bcc $1fcd			bcc 	_FCFail
.1fc9	a9 ff		lda #$ff			lda 	#255 						; pass, return -1
.1fcb	d0 02		bne $1fcf			bne 	_FCReturnA
.1fcd					_FCFail:
.1fcd	a9 00		lda #$00			lda 	#0 							; return 0, it didn't work.
.1fcf					_FCReturnA:
.1fcf	85 32		sta $32				sta 	tempShort 					; put result in tempShort
.1fd1	68		pla				pla
.1fd2	a8		tay				tay
.1fd3	68		pla				pla 								; restore stack, return result and exit.
.1fd4	aa		tax				tax
.1fd5	a5 32		lda $32				lda 	tempShort
.1fd7	95 98		sta $98,x			sta 	esInt0,x
.1fd9	95 a0		sta $a0,x			sta 	esInt1,x
.1fdb	95 a8		sta $a8,x			sta 	esInt2,x
.1fdd	95 b0		sta $b0,x			sta 	esInt3,x
.1fdf	60		rts				rts
.1fe0					_FCCheck:
.1fe0	08		php				php 								; save the H/V flag twice
.1fe1	08		php				php
.1fe2	ad 69 0c	lda $0c69			lda 	hitSprite1 					; select sprite 1 and read its location
.1fe5	20 68 21	jsr $2168			jsr 	SelectSpriteA 				; into X
.1fe8	28		plp				plp
.1fe9	20 8e 22	jsr $228e			jsr 	SpriteReadCoordinate
.1fec	ad 6a 0c	lda $0c6a			lda 	hitSprite2					; now repeat for sprite 2 and location X+1
.1fef	20 68 21	jsr $2168			jsr 	SelectSpriteA
.1ff2	e8		inx				inx
.1ff3	28		plp				plp
.1ff4	20 8e 22	jsr $228e			jsr 	SpriteReadCoordinate
.1ff7	ca		dex				dex
.1ff8	38		sec				sec 								; calculate |s1.c-s2.c| put in temp0
.1ff9	b5 98		lda $98,x			lda 	esInt0,x
.1ffb	f5 99		sbc $99,x			sbc 	esInt0+1,x
.1ffd	85 2a		sta $2a				sta 	temp0
.1fff	b5 a0		lda $a0,x			lda 	esInt1,x
.2001	f5 a1		sbc $a1,x			sbc 	esInt1+1,x
.2003	85 2b		sta $2b				sta 	temp0+1
.2005	10 0d		bpl $2014			bpl 	_FCCIsPositive
.2007	38		sec				sec 								; if -ve calculate |difference|
.2008	a9 00		lda #$00			lda 	#0
.200a	e5 2a		sbc $2a				sbc 	temp0
.200c	85 2a		sta $2a				sta 	temp0
.200e	a9 00		lda #$00			lda 	#0
.2010	e5 2b		sbc $2b				sbc 	temp0+1
.2012	85 2b		sta $2b				sta 	temp0+1
.2014					_FCCIsPositive:
.2014	a5 2b		lda $2b				lda 	temp0+1 					; if range >= 256 then definitely fail.
.2016	d0 10		bne $2028			bne 	_FCCFail
.2018	18		clc				clc 								; work out required min distance which is
.2019	b5 b0		lda $b0,x			lda 	esInt3,x 					; the sum of the half width/heights
.201b	75 b1		adc $b1,x			adc 	esInt3+1,x
.201d	ac 6b 0c	ldy $0c6b			ldy 	hitRange 					; get the hit range
.2020	f0 01		beq $2023			beq 	_FCCNoSetRange 				; override if non zero.
.2022	98		tya				tya
.2023					_FCCNoSetRange:
.2023	c5 2a		cmp $2a				cmp 	temp0 						; result is range > distance
.2025	f0 01		beq $2028			beq 	_FCCFail
.2027	60		rts				rts
.2028					_FCCFail:
.2028	18		clc				clc
.2029	60		rts				rts
.202a					_FCGetSpriteID:
.202a	8a		txa				txa
.202b	a2 0c		ldx #$0c		ldx	#12
.202d	20 fb 3e	jsr $3efb		jsr	mainHandler
.2030	aa		tax				tax
.2031	b5 98		lda $98,x			lda 	esInt0,x
.2033	30 01		bmi $2036			bmi 	_FCGSValue
.2035	60		rts				rts
.2036					_FCGSValue:
.2036	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.2038	20 36 15	jsr $1536		jsr	errorHandler

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/sprites/sprite.asm

.0c6c					currSprite:
>0c6c							.fill 	2
.203b					CommandSprite:
.203b	20 3d 21	jsr $213d			jsr 	CSCheckOnOff 				; look for TRUE/FALSE
.203e	d0 0d		bne $204d			bne 	_CSCheckClear
.2040	ad 29 9f	lda $9f29			lda 	$9F29 						; sprite enable is bit 6.
.2043	29 bf		and #$bf			and 	#$BF 						; clear it whatever
.2045	90 02		bcc $2049			bcc 	_CSNotOn 					; if CS turn on, so set it
.2047	09 40		ora #$40			ora 	#$40
.2049					_CSNotOn:
.2049	8d 29 9f	sta $9f29			sta 	$9F29 						; write it back in new state and exit
.204c	60		rts				rts
.204d					_CSCheckClear:
.204d	a9 00		lda #$00			lda 	#0 							; no sprite currently selected.
.204f	8d 6d 0c	sta $0c6d			sta 	currSprite+1
.2052	b1 28		lda ($28),y			lda 	(codePtr),y 				; check for CLEAR
.2054	c9 e8		cmp #$e8			cmp 	#TKW_CLEAR
.2056	d0 05		bne $205d			bne 	_CSCommandLoop 				; not CLEAR, go to main loop
.2058	20 4e 21	jsr $214e			jsr 	CSClearSprites 				; clear all the sprites
.205b	c8		iny				iny 								; consume CLEAR token and exit.
.205c	60		rts				rts
.205d					_CSCommandLoop:
.205d	20 3d 21	jsr $213d			jsr 	CSCheckOnOff 				; check sprite on/off
.2060	f0 2c		beq $208e			beq 	_CSSetVisibility
.2062	b1 28		lda ($28),y			lda 	(codePtr),y 				; get and consume character
.2064	c9 80		cmp #$80			cmp 	#TOK_EOL					; EOL exit.
.2066	f0 25		beq $208d			beq 	_CSExit
.2068	c8		iny				iny									; consume it
.2069	c9 ca		cmp #$ca			cmp 	#TKW_COLON 					; colon exit
.206b	f0 20		beq $208d			beq 	_CSExit
.206d	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; semantic comma
.206f	f0 ec		beq $205d			beq 	_CSCommandLoop
.2071	c9 da		cmp #$da			cmp		#TKW_IMAGE 					; image ?
.2073	f0 69		beq $20de			beq 	_CSSetImage
.2075	c9 dc		cmp #$dc			cmp 	#TKW_FLIP 					; flip ?
.2077	f0 2b		beq $20a4			beq 	_CSSetFlip
.2079	c9 ce		cmp #$ce			cmp 	#TKW_TO 					; to ?
.207b	f0 46		beq $20c3			beq 	_CSSetPos
.207d	88		dey				dey 								; unpick DEY
.207e	a9 00		lda #$00			lda 	#0 							; sprite # now at level 0
.2080	a2 0c		ldx #$0c		ldx	#12
.2082	20 fb 3e	jsr $3efb		jsr	mainHandler
.2085	a5 98		lda $98				lda 	esInt0
.2087	20 68 21	jsr $2168			jsr 	SelectSpriteA
.208a	4c 5d 20	jmp $205d			jmp 	_CSCommandLoop
.208d					_CSExit:
.208d	60		rts				rts
.208e					_CSSetVisibility:
.208e	08		php				php 								; save carry
.208f	a9 06		lda #$06			lda 	#6 							; set pos to offset 6.
.2091	20 24 21	jsr $2124			jsr 	SpriteSetTarget
.2094	ad 23 9f	lda $9f23			lda 	$9F23 						; read it.
.2097	29 f3		and #$f3			and 	#$F3 						; clear depth bits, disabling it.
.2099	28		plp				plp
.209a	90 02		bcc $209e			bcc 	_CSSetOff 					; check if carry was set
.209c	09 0c		ora #$0c			ora 	#$0C 						; otherwise set depth bits to 11, on top.
.209e					_CSSetOff:
.209e	8d 23 9f	sta $9f23			sta 	$9F23 						; update and loop back
.20a1	4c 5d 20	jmp $205d			jmp 	_CSCommandLoop
.20a4					_CSSetFlip:
.20a4	a9 00		lda #$00			lda 	#0 							; image # now at level 0
.20a6	a2 0c		ldx #$0c		ldx	#12
.20a8	20 fb 3e	jsr $3efb		jsr	mainHandler
.20ab	a9 06		lda #$06			lda 	#6 							; set sprite position to +6
.20ad	20 24 21	jsr $2124			jsr 	SpriteSetTarget
.20b0	a5 98		lda $98				lda 	esInt0 						; flip value & 3 => temp0
.20b2	29 03		and #$03			and 	#3
.20b4	85 2a		sta $2a				sta 	temp0
.20b6	ad 23 9f	lda $9f23			lda 	$9F23 						; update the flip.
.20b9	29 fc		and #$fc			and 	#$FC
.20bb	05 2a		ora $2a				ora 	temp0
.20bd	8d 23 9f	sta $9f23			sta 	$9F23
.20c0	4c 5d 20	jmp $205d			jmp 	_CSCommandLoop
.20c3					_CSSetPos:
.20c3	a9 00		lda #$00			lda 	#0 							; X now at level 0
.20c5	a2 0a		ldx #$0a		ldx	#10
.20c7	20 fb 3e	jsr $3efb		jsr	mainHandler
.20ca	a2 02		ldx #$02		ldx	#2
.20cc	20 fb 3e	jsr $3efb		jsr	mainHandler
.20cf	a9 01		lda #$01			lda 	#1 							; Y now at level 1
.20d1	a2 0a		ldx #$0a		ldx	#10
.20d3	20 fb 3e	jsr $3efb		jsr	mainHandler
.20d6	a2 00		ldx #$00			ldx 	#0 							; coords at 0,1
.20d8	20 4a 22	jsr $224a			jsr 	SpriteMove 					; move it.
.20db	4c 5d 20	jmp $205d			jmp 	_CSCommandLoop
.20de					_CSSetImage:
.20de	a9 00		lda #$00			lda 	#0 							; image # now at level 0
.20e0	a2 0c		ldx #$0c		ldx	#12
.20e2	20 fb 3e	jsr $3efb		jsr	mainHandler
.20e5	a9 00		lda #$00			lda 	#0 							; set sprite position to +0
.20e7	20 24 21	jsr $2124			jsr 	SpriteSetTarget
.20ea	a6 98		ldx $98				ldx 	esInt0 						; get image # into X
.20ec	bd b4 0c	lda $0cb4,x			lda 	imageAddr32Low,x 			; copy low address in.
.20ef	8d 23 9f	sta $9f23			sta 	$9F23
.20f2	ee 20 9f	inc $9f20			inc 	$9F20 						; bump to offset 1.
.20f5	bd 74 0c	lda $0c74,x			lda 	imageInfo,x 				; get 4/8 bit flag from info.
.20f8	29 10		and #$10			and 	#$10
.20fa	0a		asl a				asl 	a
.20fb	0a		asl a				asl		a
.20fc	0a		asl a				asl 	a 							; put into bit 7
.20fd	1d f4 0c	ora $0cf4,x			ora 	imageAddr32High,x 			; or high address with it.
.2100	8d 23 9f	sta $9f23			sta 	$9F23 						; write the high byte.
.2103	a9 06		lda #$06			lda 	#6
.2105	20 24 21	jsr $2124			jsr 	SpriteSetTarget 			; set sprite on.
.2108	ad 23 9f	lda $9f23			lda 	$9F23
.210b	09 0c		ora #$0c			ora 	#$0C
.210d	8d 23 9f	sta $9f23			sta 	$9F23
.2110	ee 20 9f	inc $9f20			inc 	$9F20 						; point to byte 7 : height/width/palette offset
.2113	bd 74 0c	lda $0c74,x			lda 	imageInfo,x 				; get image info
.2116	0a		asl a				asl 	a 							; shift bits 0-3 to 4-7
.2117	0a		asl a				asl 	a
.2118	0a		asl a				asl 	a
.2119	0a		asl a				asl 	a
.211a	b0 02		bcs $211e			bcs		_CSNoOffset 				; if bit 4 was set don't set the offset.
.211c	09 0f		ora #$0f			ora 	#$0F 						; set palette offset and write back
.211e					_CSNoOffset:
.211e	8d 23 9f	sta $9f23			sta 	$9F23
.2121	4c 5d 20	jmp $205d			jmp 	_CSCommandLoop
.2124					SpriteSetTarget:
.2124	0d 6c 0c	ora $0c6c			ora 	currSprite
.2127	8d 20 9f	sta $9f20			sta 	$9F20
.212a	ad 6d 0c	lda $0c6d			lda 	currSprite+1
.212d	f0 09		beq $2138			beq 	_SSTNoSet
.212f	8d 21 9f	sta $9f21			sta 	$9F21
.2132	a9 01		lda #$01			lda 	#$01
.2134	8d 22 9f	sta $9f22			sta 	$9F22
.2137	60		rts				rts
.2138					_SSTNoSet:
.2138	a2 27		ldx #$27			ldx 	#ErrorID_NoSprite
.213a	20 36 15	jsr $1536		jsr	errorHandler
.213d					CSCheckOnOff:
.213d	b1 28		lda ($28),y			lda 	(codePtr),y 				; get and consume it.
.213f	c8		iny				iny
.2140	c9 ab		cmp #$ab			cmp 	#TKW_FALSE					; return CC/EQ if FALSE
.2142	18		clc				clc
.2143	f0 08		beq $214d			beq 	_CSCOExit
.2145	c9 aa		cmp #$aa			cmp 	#TKW_TRUE 					; return CS/EQ if TRUE
.2147	38		sec				sec 								; return NE if neither.
.2148	f0 03		beq $214d			beq 	_CSCOExit
.214a	88		dey				dey 								; undo consume
.214b	c9 aa		cmp #$aa			cmp 	#TKW_TRUE 					; and set NE again, DEY will change it.
.214d					_CSCOExit:
.214d	60		rts				rts
.214e					CSClearSprites:
.214e	a9 11		lda #$11			lda 	#$11 						; set address to 1FC00 with single bump
.2150	8d 22 9f	sta $9f22			sta 	$9F22
.2153	a9 fc		lda #$fc			lda 	#$FC
.2155	8d 21 9f	sta $9f21			sta 	$9F21
.2158	a9 00		lda #$00			lda 	#0
.215a	8d 20 9f	sta $9f20			sta 	$9F20
.215d					_CSClear:
.215d	a9 00		lda #$00			lda 	#0 							; set everything to $00
.215f	8d 23 9f	sta $9f23			sta 	$9F23
.2162	ad 21 9f	lda $9f21			lda 	$9F21
.2165	d0 f6		bne $215d			bne 	_CSClear
.2167	60		rts				rts
.2168					SelectSpriteA:
.2168	85 2a		sta $2a				sta 	temp0
.216a	a9 00		lda #$00			lda 	#0
.216c	06 2a		asl $2a				asl		temp0 						; multiply A:temp0 by 8
.216e	b0 11		bcs $2181			bcs 	_CSBadValue 				; sprites only 0-127
.2170	06 2a		asl $2a				asl 	temp0
.2172	2a		rol a				rol 	a
.2173	06 2a		asl $2a				asl 	temp0
.2175	2a		rol a				rol 	a
.2176	09 fc		ora #$fc			ora 	#$FC 						; MSB of address (barring $01 upper third byte)
.2178	8d 6d 0c	sta $0c6d			sta 	currSprite+1
.217b	a5 2a		lda $2a				lda 	temp0 						; LSB of address
.217d	8d 6c 0c	sta $0c6c			sta 	currSprite+0
.2180	60		rts				rts
.2181					_CSBadValue
.2181	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.2183	20 36 15	jsr $1536		jsr	errorHandler

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/sprites/spritedraw.asm

.0c6e					srenderWidth:
>0c6e							.fill 	1
.2186					Command_Paint:
.2186	a9 8e		lda #$8e			lda 	#ImageHandler & $FF
.2188	a2 21		ldx #$21			ldx 	#ImageHandler >> 8
.218a	20 0f 19	jsr $190f			jsr 	GHandler
.218d	60		rts				rts
.218e					ImageHandler:
.218e	a9 95		lda #$95			lda 	#SpriteImageAccess & $FF
.2190	a2 21		ldx #$21			ldx 	#SpriteImageAccess >> 8
.2192	4c 9f 1b	jmp $1b9f			jmp 	ImageRenderer
.2195					SpriteImageAccess:
.2195	c0 ff		cpy #$ff			cpy 	#255
.2197	d0 22		bne $21bb			bne 	_SIAGetPixel
.2199	ae 01 0c	ldx $0c01			ldx 	gdImage 					; get the image #
.219c	bd 74 0c	lda $0c74,x			lda 	imageInfo,x 				; get the image information.
.219f	48		pha				pha
.21a0	29 03		and #$03			and 	#3 							; LSB x 2 width
.21a2	aa		tax				tax
.21a3	bd b7 21	lda $21b7,x			lda 	_SIASizeTable,x
.21a6	8d 6e 0c	sta $0c6e			sta 	sRenderWidth 				; save rendering width.
.21a9	aa		tax				tax
.21aa	68		pla				pla 								; get back next 2 bits are height
.21ab	4a		lsr a				lsr 	a
.21ac	4a		lsr a				lsr 	a
.21ad	29 03		and #$03			and 	#3
.21af	a8		tay				tay
.21b0	b9 b7 21	lda $21b7,y			lda 	_SIASizeTable,y
.21b3	a8		tay				tay
.21b4	a9 01		lda #$01			lda 	#1 							; image is type 1, e.g. colour.
.21b6	60		rts				rts
.21b7					_SIASizeTable:
>21b7	08 10 20 40					.byte 	8,16,32,64 					; size of sprites from 2 bits,
.21bb					_SIAGetPixel:
.21bb	84 2a		sty $2a				sty 	temp0 						; this is the Y size 8,16,32,64 => temp0
.21bd	a9 00		lda #$00			lda 	#0
.21bf	85 2b		sta $2b				sta 	temp0+1
.21c1	ac 01 0c	ldy $0c01			ldy 	gdImage 					; get image info into A
.21c4	b9 74 0c	lda $0c74,y			lda 	imageInfo,y
.21c7	48		pha				pha
.21c8	29 10		and #$10			and 	#$10 						; save the 4 bit flag part in temp1
.21ca	85 2c		sta $2c				sta 	temp1
.21cc	68		pla				pla 								; get width of sprite as 00-11 (8-64)
.21cd	29 03		and #$03			and 	#3 							; we shift left +3 e.g. 2^(A+3)
.21cf	18		clc				clc
.21d0	69 03		adc #$03			adc 	#3
.21d2	a8		tay				tay
.21d3					_SIAMultiply:
.21d3	06 2a		asl $2a				asl 	temp0
.21d5	26 2b		rol $2b				rol 	temp0+1
.21d7	88		dey				dey
.21d8	d0 f9		bne $21d3			bne 	_SIAMultiply
.21da	a5 2c		lda $2c				lda 	temp1 						; if the mode bit is 0 then halve this value
.21dc	d0 04		bne $21e2			bne 	_SIANoHalf 					; because we pack 2 pixels in every byte.
.21de	46 2b		lsr $2b				lsr 	temp0+1
.21e0	66 2a		ror $2a				ror 	temp0
.21e2					_SIANoHalf:
.21e2	ae 01 0c	ldx $0c01			ldx 	gdImage 					; copy the image address / 32 into temp2/temp3
.21e5	bd b4 0c	lda $0cb4,x			lda 	imageAddr32Low,x
.21e8	85 2e		sta $2e				sta 	temp2
.21ea	bd f4 0c	lda $0cf4,x			lda 	imageAddr32High,x
.21ed	85 2f		sta $2f				sta 	temp2+1
.21ef	a9 00		lda #$00			lda 	#0
.21f1	85 30		sta $30				sta 	temp3
.21f3	a2 05		ldx #$05			ldx 	#5 							; multiply by 32 e.g. 2^5
.21f5					_SIMult32:
.21f5	06 2e		asl $2e				asl 	temp2
.21f7	26 2f		rol $2f				rol 	temp2+1
.21f9	26 30		rol $30				rol 	temp3
.21fb	ca		dex				dex
.21fc	d0 f7		bne $21f5			bne 	_SIMult32
.21fe	ee 25 9f	inc $9f25			inc 	$9F25 						; select alternate data port
.2201	18		clc				clc
.2202	a5 2a		lda $2a				lda 	temp0 						; add offset to sprite address x 32 and write to address
.2204	65 2e		adc $2e				adc 	temp2
.2206	8d 20 9f	sta $9f20			sta 	$9F20
.2209	a5 2b		lda $2b				lda 	temp0+1
.220b	65 2f		adc $2f				adc 	temp2+1
.220d	8d 21 9f	sta $9f21			sta 	$9F21
.2210	a9 10		lda #$10			lda 	#$10
.2212	65 30		adc $30				adc 	temp3
.2214	8d 22 9f	sta $9f22			sta 	$9F22
.2217	a2 00		ldx #$00			ldx 	#0 							; index into Render Cache.
.2219					_SIFillCacheLoop:
.2219	a5 2c		lda $2c				lda 	temp1 						; is it 8 bit ? if so, then exit
.221b	d0 12		bne $222f			bne 	_SI8Bit
.221d	ad 24 9f	lda $9f24			lda 	$9F24 						; get data
.2220	48		pha				pha 								; save it
.2221	4a		lsr a				lsr 	a 							; MSB first
.2222	4a		lsr a				lsr 	a
.2223	4a		lsr a				lsr 	a
.2224	4a		lsr a				lsr 	a
.2225	20 3f 22	jsr $223f			jsr 	_SIWrite4Bit
.2228	68		pla				pla
.2229	20 3f 22	jsr $223f			jsr 	_SIWrite4Bit
.222c	4c 36 22	jmp $2236			jmp 	_SIAdvance
.222f					_SI8Bit:
.222f	ad 24 9f	lda $9f24			lda 	$9F24 						; copy data into render cache
.2232	9d 10 0c	sta $0c10,x			sta 	RenderCache,x
.2235	e8		inx				inx
.2236					_SIAdvance:
.2236	ec 6e 0c	cpx $0c6e			cpx 	sRenderWidth 				; filled the cache to required width ?
.2239	d0 de		bne $2219			bne 	_SIFillCacheLoop
.223b	ce 25 9f	dec $9f25			dec 	$9F25 						; select original data port.
.223e	60		rts				rts
.223f					_SIWrite4Bit:
.223f	29 0f		and #$0f			and 	#15 						; if 0 (e.g. would paint 240, return 0 transparent)
.2241	f0 02		beq $2245			beq 	_SIW4Skip
.2243	09 f0		ora #$f0			ora 	#$F0
.2245					_SIW4Skip:
.2245	9d 10 0c	sta $0c10,x			sta 	RenderCache,x
.2248	e8		inx				inx
.2249	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/sprites/spritemove.asm

.224a					SpriteMove:
.224a	98		tya				tya
.224b	48		pha				pha
.224c	a9 07		lda #$07			lda 	#7 									; point to height/width byte and read it.
.224e	20 24 21	jsr $2124			jsr 	SpriteSetTarget
.2251	ad 23 9f	lda $9f23			lda 	$9F23
.2254	4a		lsr a				lsr 	a 									; A now contains bits 0-1 (width) 2-3 (height)
.2255	4a		lsr a				lsr 	a
.2256	4a		lsr a				lsr 	a
.2257	4a		lsr a				lsr 	a
.2258	85 2a		sta $2a				sta 	temp0 								; save these bits so we can work out the centre.
.225a	a9 02		lda #$02			lda 	#2 									; point to X position.Low
.225c	20 24 21	jsr $2124			jsr 	SpriteSetTarget
.225f	20 6e 22	jsr $226e			jsr 	SMWritePosition 					; write X position out.
.2262	46 2a		lsr $2a				lsr 	temp0 								; shift height bits into 0,1
.2264	46 2a		lsr $2a				lsr 	temp0
.2266	e8		inx				inx 										; get the y position
.2267	20 6e 22	jsr $226e			jsr 	SMWritePosition 					; and write that out.
.226a	ca		dex				dex 										; fix X and quit.
.226b	68		pla				pla
.226c	a8		tay				tay
.226d	60		rts				rts
.226e					SMWritePosition:
.226e	a5 2a		lda $2a				lda 	temp0 								; get dim size
.2270	29 03		and #$03			and 	#3 									; in range into Y
.2272	a8		tay				tay
.2273	38		sec				sec
.2274	b5 98		lda $98,x			lda 	esInt0,x
.2276	f9 8a 22	sbc $228a,y			sbc 	SMHalfSize,y
.2279	8d 23 9f	sta $9f23			sta 	$9F23
.227c	ee 20 9f	inc $9f20			inc 	$9F20
.227f	b5 a0		lda $a0,x			lda 	esInt1,x
.2281	e9 00		sbc #$00			sbc 	#0
.2283	8d 23 9f	sta $9f23			sta 	$9F23
.2286	ee 20 9f	inc $9f20			inc 	$9F20
.2289	60		rts				rts
.228a					SMHalfSize:
>228a	04 08 10 20					.byte 	4,8,16,32 							; half size each dimension.
.228e					SpriteReadCoordinate:
.228e	98		tya				tya
.228f	48		pha				pha
.2290	08		php				php 										; save CTR on stack
.2291	a9 07		lda #$07			lda 	#7 									; point to height/width byte and read it.
.2293	20 24 21	jsr $2124			jsr 	SpriteSetTarget
.2296	ad 23 9f	lda $9f23			lda 	$9F23
.2299	4a		lsr a				lsr 	a 									; A now contains bits 0-1 (width) 2-3 (height)
.229a	4a		lsr a				lsr 	a
.229b	4a		lsr a				lsr 	a
.229c	4a		lsr a				lsr 	a
.229d	28		plp				plp 										; restore CTS
.229e	08		php				php
.229f	90 02		bcc $22a3			bcc 	_SPRCNotY1 							; if it is Y, e.g. CS, shift twice more.
.22a1	4a		lsr a				lsr 	a
.22a2	4a		lsr a				lsr 	a
.22a3					_SPRCNotY1:
.22a3	29 03		and #$03			and 	#3 									; point into half width/height
.22a5	a8		tay				tay
.22a6	b9 8a 22	lda $228a,y			lda 	SMHalfSize,y 						; get half size -> esInt3,x
.22a9	95 b0		sta $b0,x			sta 	esInt3,x
.22ab	28		plp				plp 										; CS Y CC X
.22ac	a9 00		lda #$00			lda 	#0 									; A = 0 X A = 2 Y
.22ae	2a		rol a				rol 	a
.22af	2a		rol a				rol 	a
.22b0	69 02		adc #$02			adc 	#2 									; A = 2 X A = 4 Y
.22b2	20 24 21	jsr $2124			jsr 	SpriteSetTarget 					; set data pointer offset by that
.22b5	18		clc				clc 										; read and unfix centre.
.22b6	ad 23 9f	lda $9f23			lda 	$9F23
.22b9	75 b0		adc $b0,x			adc 	esInt3,x
.22bb	95 98		sta $98,x			sta 	esInt0,x
.22bd	ee 20 9f	inc $9f20			inc 	$9F20 								; do MSB
.22c0	ad 23 9f	lda $9f23			lda 	$9F23
.22c3	69 00		adc #$00			adc 	#0
.22c5	29 0f		and #$0f			and 	#$0F 								; sign extend on bit 11.
.22c7	c9 08		cmp #$08			cmp		#$08
.22c9	90 02		bcc $22cd			bcc 	_SPRCNoSX
.22cb	09 f0		ora #$f0			ora 	#$F0
.22cd					_SPRCNoSX:
.22cd	95 a0		sta $a0,x			sta 	esInt1,x
.22cf	68		pla				pla
.22d0	a8		tay				tay
.22d1	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/sprites/spriteutils.asm

.22d2					Sprite_GetX:
.22d2	18		clc				clc
.22d3	90 01		bcc $22d6			bcc 	SpriteGetCode
.22d5					Sprite_GetY:
.22d5	38		sec				sec
.22d6					SpriteGetCode:
.22d6	08		php				php 								; CLC : X SEC: Y, save on stack.
.22d7	48		pha				pha 								; save stack position
.22d8	20 f4 22	jsr $22f4			jsr 	GetSpriteNumber 			; get # of sprite.
.22db	a2 04		ldx #$04		ldx	#4
.22dd	20 fb 3e	jsr $3efb		jsr	mainHandler
.22e0	68		pla				pla
.22e1	aa		tax				tax
.22e2	28		plp				plp 								; which one ?
.22e3	20 8e 22	jsr $228e			jsr 	SpriteReadCoordinate 		; read appropriate coordinate into esInt0,x
.22e6	b5 a0		lda $a0,x			lda 	esInt1,x 					; get sign bit, sign extend 16->32 bits
.22e8	29 80		and #$80			and 	#$80
.22ea	f0 02		beq $22ee			beq 	_SGXYPos
.22ec	a9 ff		lda #$ff			lda 	#$FF
.22ee					_SGXYPos:
.22ee	95 a8		sta $a8,x			sta 	esInt2,x
.22f0	95 b0		sta $b0,x			sta 	esInt3,x
.22f2	8a		txa				txa 								; return NSP in A
.22f3	60		rts				rts
.22f4					GetSpriteNumber:
.22f4	48		pha				pha
.22f5	a2 0c		ldx #$0c		ldx	#12
.22f7	20 fb 3e	jsr $3efb		jsr	mainHandler
.22fa	68		pla				pla
.22fb	aa		tax				tax
.22fc	b5 98		lda $98,x			lda 	esInt0,x
.22fe	20 68 21	jsr $2168			jsr 	SelectSpriteA
.2301	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/video/mode.asm

.0c6f					currentMode:
>0c6f							.fill 	4
.2302					ForceMode0:
.2302	a2 00		ldx #$00			ldx 	#0
.2304	86 98		stx $98				stx 	esInt0 						; in case we do it.
.2306					_FMCheck:
.2306	bd 9c 23	lda $239c,x			lda 	CMModeList,x 				; do we need to switch ?
.2309	dd 6f 0c	cmp $0c6f,x			cmp 	currentMode,x
.230c	d0 13		bne $2321			bne 	CMSetMode 					; different so switch.
.230e	e8		inx				inx
.230f	e0 04		cpx #$04			cpx 	#4
.2311	d0 f3		bne $2306			bne 	_FMCheck
.2313	60		rts				rts
.2314					CommandMode:
.2314	a9 00		lda #$00			lda 	#0
.2316	a2 0a		ldx #$0a		ldx	#10
.2318	20 fb 3e	jsr $3efb		jsr	mainHandler
.231b	a5 b0		lda $b0				lda 	esInt3
.231d	29 70		and #$70			and 	#$70
.231f	d0 06		bne $2327			bne 	CMNoExpand
.2321					CMSetMode:
.2321	20 7b 23	jsr $237b			jsr 	CMExpandMode
.2324	4c 3b 23	jmp $233b			jmp 	CMUpdateMode
.2327					CMNoExpand:
.2327	a5 98		lda $98				lda 	esInt0
.2329	8d 6f 0c	sta $0c6f			sta 	currentMode
.232c	a5 a0		lda $a0				lda 	esInt1
.232e	8d 70 0c	sta $0c70			sta 	currentMode+1
.2331	a5 a8		lda $a8				lda 	esInt2
.2333	8d 71 0c	sta $0c71			sta 	currentMode+2
.2336	a5 b0		lda $b0				lda 	esInt3
.2338	8d 72 0c	sta $0c72			sta 	currentMode+3
.233b					CMUpdateMode:
.233b	a2 11		ldx #$11			ldx 	#$11
.233d					_CMClear:
.233d	a9 00		lda #$00			lda 	#0
.233f	9d 29 9f	sta $9f29,x			sta 	$9F29,X
.2342	ca		dex				dex
.2343	10 f8		bpl $233d			bpl 	_CMClear
.2345	ad 72 0c	lda $0c72			lda 	currentMode+3 				; get current mode
.2348	48		pha				pha 								; stack twice.
.2349	48		pha				pha
.234a	29 70		and #$70			and 	#$70 						; isolates bits 6,5,4 (sprites,L1 enable,L0 enable)
.234c	09 01		ora #$01			ora 	#$01 						; turn the output on.
.234e	8d 29 9f	sta $9f29			sta 	$9F29 						; write to DC_VIDEO
.2351	68		pla				pla 								; get back
.2352	20 ac 23	jsr $23ac			jsr 	CMToScale 					; convert lower 2 bits to a scale.
.2355	8d 2a 9f	sta $9f2a			sta 	$9F2A 						; write to H-Scale
.2358	68		pla				pla 								; get back, convert bits 2,3 to a scale.
.2359	4a		lsr a				lsr 	a
.235a	4a		lsr a				lsr 	a
.235b	20 ac 23	jsr $23ac			jsr 	CMToScale 					; convert lower 2 bits to a scale.
.235e	8d 2b 9f	sta $9f2b			sta 	$9F2B
.2361	a2 00		ldx #$00			ldx 	#0 							; this is offset from $9F2D to do L0
.2363	ad 6f 0c	lda $0c6f			lda 	currentMode					; get L0 config byte
.2366	20 b7 23	jsr $23b7			jsr 	CMDecodeLayer 				; and decode layer 0
.2369	a2 07		ldx #$07			ldx 	#7 							; when we do layer 1, offset by 7 hence starts at $9F34
.236b	ad 70 0c	lda $0c70			lda 	currentMode+1
.236e	20 b7 23	jsr $23b7			jsr 	CMDecodeLayer
.2371	20 d6 1d	jsr $1dd6			jsr 	gdModeChanged 				; check the bitmap status.
.2374	20 f8 18	jsr $18f8			jsr 	GResetStorage 				; reset the graphics drawing storage.
.2377	20 57 1f	jsr $1f57			jsr 	SoundReset 					; Reset the sound channels.
.237a	60		rts				rts
.237b					CMExpandMode:
.237b	a5 98		lda $98				lda 	esInt0 						; get mode number
.237d	c9 04		cmp #$04			cmp 	#(CMEndModeList-CMModeList) >> 2
.237f	b0 16		bcs $2397			bcs 	_CMModeError
.2381	0a		asl a				asl 	a 							; x 4 into X
.2382	0a		asl a				asl 	a
.2383	aa		tax				tax
.2384	98		tya				tya
.2385	48		pha				pha
.2386	a0 00		ldy #$00			ldy 	#0
.2388					_CMEMCopy:
.2388	bd 9c 23	lda $239c,x			lda 	CMModeList,x
.238b	99 6f 0c	sta $0c6f,y			sta 	currentMode,y
.238e	e8		inx				inx
.238f	c8		iny				iny
.2390	c0 04		cpy #$04			cpy 	#4
.2392	d0 f4		bne $2388			bne 	_CMEMCopy
.2394	68		pla				pla
.2395	a8		tay				tay
.2396	60		rts				rts
.2397					_CMModeError:
.2397	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.2399	20 36 15	jsr $1536		jsr	errorHandler
.239c					CMModeList:
>239c	00 60 00 20					.dword	$20006000 					; Mode 0 which is the standard 80x60 mode, no sprites
>23a0	00 60 00 25					.dword 	$25006000					; Mode 1 (40x30)
>23a4	00 60 00 2a					.dword 	$2A006000 					; Mode 2 (20x15)
>23a8	07 60 00 15					.dword 	$15006007 					; Mode 3 (320x200 256 colour bitmap)
.23ac					CMEndModeList:
.23ac					CMToScale:
.23ac	29 03		and #$03			and 	#3 							; lower 2 bits only
.23ae	aa		tax				tax 								; put in X for counting
.23af	a9 00		lda #$00			lda 	#0 							; zero result
.23b1	38		sec				sec 								; first time rotate CS in
.23b2					_CMTSLoop:
.23b2	6a		ror a				ror 	a
.23b3	ca		dex				dex
.23b4	10 fc		bpl $23b2			bpl 	_CMTSLoop
.23b6	60		rts				rts
.23b7					CMDecodeLayer:
.23b7	48		pha				pha 								; save it.
.23b8	29 f7		and #$f7			and 	#$F7 						; all the bits except T256C which you can't set using this
.23ba	9d 2d 9f	sta $9f2d,x			sta 	$9F2D,X
.23bd	68		pla				pla 								; get it back
.23be	29 08		and #$08			and 	#$08 						; the missing bit sets the tile size.
.23c0	f0 02		beq $23c4			beq 	_CMDLNotSet
.23c2	a9 03		lda #$03			lda 	#$03 						; which sets both lower bits, they're square.
.23c4					_CMDLNotSet:
.23c4	e0 00		cpx #$00			cpx 	#0
.23c6	f0 06		beq $23ce			beq 	_CMDLayer0 					; layer 1 has standard defaults for tile table, e.g. $7C
.23c8	09 7c		ora #$7c			ora 	#$7C 						; so set those bits and write it out.
.23ca	9d 2f 9f	sta $9f2f,x			sta 	$9F2F,X
.23cd	60		rts				rts
.23ce					_CMDLayer0:
.23ce	09 80		ora #$80			ora 	#$80 						; tile base is $80
.23d0	9d 2f 9f	sta $9f2f,x			sta 	$9F2F,X
.23d3	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/video/palette.asm

.23d4					CommandPalette:
.23d4	a9 00		lda #$00			lda 	#0
.23d6	a2 0c		ldx #$0c		ldx	#12
.23d8	20 fb 3e	jsr $3efb		jsr	mainHandler
.23db	a2 02		ldx #$02		ldx	#2
.23dd	20 fb 3e	jsr $3efb		jsr	mainHandler
.23e0	a9 01		lda #$01			lda 	#1
.23e2	a2 08		ldx #$08		ldx	#8
.23e4	20 fb 3e	jsr $3efb		jsr	mainHandler
.23e7	a5 98		lda $98				lda 	esInt0 					; get palette #
.23e9	20 f9 23	jsr $23f9			jsr 	PointToPaletteA			; point to palette register
.23ec	a5 99		lda $99				lda 	esInt0+1
.23ee	8d 23 9f	sta $9f23			sta 	$9F23
.23f1	a5 a1		lda $a1				lda 	esInt1+1
.23f3	29 0f		and #$0f			and 	#$0F
.23f5	8d 23 9f	sta $9f23			sta 	$9F23
.23f8	60		rts				rts
.23f9					PointToPaletteA:
.23f9	0a		asl a				asl 	a 							; x 2 -> LSB
.23fa	8d 20 9f	sta $9f20			sta 	$9F20
.23fd	a9 00		lda #$00			lda 	#0 							; carry into A
.23ff	2a		rol a				rol 	a
.2400	09 fa		ora #$fa			ora 	#$FA 						; make correct address
.2402	8d 21 9f	sta $9f21			sta 	$9F21
.2405	a9 11		lda #$11			lda 	#$11 						; $01 and single step => $9F22
.2407	8d 22 9f	sta $9f22			sta 	$9F22
.240a	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/video/textdraw.asm

=$f800					DefaultFont = $F800
.240b					Command_Draw:
.240b	a9 13		lda #$13			lda 	#TextHandler & $FF
.240d	a2 24		ldx #$24			ldx 	#TextHandler >> 8
.240f	20 0f 19	jsr $190f			jsr 	GHandler
.2412	60		rts				rts
.2413					TextHandler:
.2413	ad 08 0c	lda $0c08			lda 	gdText+1 					; do we have a string
.2416	d0 1c		bne $2434			bne 	_THHasString
.2418					_THCallRenderer:
.2418	8a		txa				txa
.2419	48		pha				pha
.241a	ad f2 0b	lda $0bf2			lda 	gy2
.241d	48		pha				pha
.241e	ad f3 0b	lda $0bf3			lda 	gy2+1
.2421	48		pha				pha
.2422	a9 68		lda #$68			lda 	#BitmapTextAccess & $FF 	; render current image (gdImage)
.2424	a2 24		ldx #$24			ldx 	#BitmapTextAccess >> 8
.2426	20 9f 1b	jsr $1b9f			jsr 	ImageRenderer
.2429	68		pla				pla 								; restore y position and x register
.242a	8d f3 0b	sta $0bf3			sta 	gy2+1
.242d	68		pla				pla
.242e	8d f2 0b	sta $0bf2			sta 	gy2
.2431	68		pla				pla
.2432	aa		tax				tax
.2433	60		rts				rts
.2434					_THHasString:
.2434	a2 00		ldx #$00			ldx 	#0 							; position in string
.2436					_THStringLoop:
.2436	ad 07 0c	lda $0c07			lda 	gdText 						; text => temp0
.2439	85 2a		sta $2a				sta 	temp0
.243b	ad 08 0c	lda $0c08			lda 	gdText+1
.243e	85 2b		sta $2b				sta 	temp0+1
.2440	8a		txa				txa 								; length = string length.
.2441	a0 00		ldy #$00			ldy 	#0
.2443	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.2445	f0 20		beq $2467			beq 	_THExit 					; if so exit.
.2447	e8		inx				inx 								; next character, put in Y
.2448	8a		txa				txa
.2449	a8		tay				tay
.244a	b1 2a		lda ($2a),y			lda 	(temp0),y 					; char to print, override image
.244c	8d 01 0c	sta $0c01			sta 	gdImage
.244f	20 18 24	jsr $2418			jsr 	_THCallRenderer 			; render the text
.2452	ad 00 0c	lda $0c00			lda 	gdSize	 					; get size, need to x by 8 as 8x8 font.
.2455	0a		asl a				asl		a
.2456	0a		asl a				asl 	a
.2457	0a		asl a				asl 	a
.2458	18		clc				clc
.2459	6d f0 0b	adc $0bf0			adc 	gX2 						; add to horizontal position
.245c	8d f0 0b	sta $0bf0			sta 	gx2
.245f	90 d5		bcc $2436			bcc 	_THStringLoop
.2461	ee f1 0b	inc $0bf1			inc 	gx2+1
.2464	4c 36 24	jmp $2436			jmp 	_THStringLoop 				; do the whole lot.
.2467					_THExit:
.2467	60		rts				rts
.2468					BitmapTextAccess:
.2468	c0 ff		cpy #$ff			cpy 	#$FF 						; get information
.246a	d0 07		bne $2473			bne 	_BTABitmap
.246c	a9 00		lda #$00			lda 	#0 							; bitmap 8x8
.246e	a2 08		ldx #$08			ldx 	#8
.2470	a0 08		ldy #$08			ldy 	#8
.2472	60		rts				rts
.2473					_BTABitmap:
.2473	ad 01 0c	lda $0c01			lda 	gdImage 					; Image => temp0:A
.2476	20 7a 24	jsr $247a			jsr 	DrawCharacterA
.2479	60		rts				rts
.247a					DrawCharacterA:
.247a	85 2a		sta $2a				sta 	temp0
.247c	a9 00		lda #$00			lda 	#0
.247e	06 2a		asl $2a				asl 	temp0	 					; x temp0:A x 8
.2480	2a		rol a				rol 	a
.2481	06 2a		asl $2a				asl 	temp0
.2483	2a		rol a				rol 	a
.2484	06 2a		asl $2a				asl 	temp0
.2486	2a		rol a				rol 	a
.2487	09 f8		ora #$f8			ora 	#DefaultFont >> 8 			; A now points into font table.
.2489	ee 25 9f	inc $9f25			inc 	$9F25 						; alternate port set.
.248c	8d 21 9f	sta $9f21			sta 	$9F21 						; set up address
.248f	a9 10		lda #$10			lda 	#$10
.2491	8d 22 9f	sta $9f22			sta 	$9F22
.2494	84 32		sty $32				sty 	tempShort
.2496	a5 2a		lda $2a				lda 	temp0 						; or Y (vertical line) into temp0
.2498	05 32		ora $32				ora 	tempShort
.249a	8d 20 9f	sta $9f20			sta 	$9F20 						; address set up.
.249d	ad 24 9f	lda $9f24			lda 	$9F24 						; get bitmap
.24a0	ce 25 9f	dec $9f25			dec 	$9F25 						; original port set back
.24a3	a2 07		ldx #$07			ldx 	#7 							; index into rendercache
.24a5	85 2a		sta $2a				sta 	temp0 						; bitmap in temp 0
.24a7					_BTADoCache:
.24a7	a9 00		lda #$00			lda 	#0
.24a9	46 2a		lsr $2a				lsr 	temp0
.24ab	90 02		bcc $24af			bcc 	_BTANotSet
.24ad	a9 ff		lda #$ff			lda 	#255
.24af					_BTANotSet:
.24af	9d 10 0c	sta $0c10,x			sta 	renderCache,x
.24b2	ca		dex				dex
.24b3	10 f2		bpl $24a7			bpl 	_BTADoCache
.24b5	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/video/vload.asm

.24b6					Command_VLoad:
.24b6	a9 00		lda #$00			lda 	#0 								; string which is the file name
.24b8	a2 0e		ldx #$0e		ldx	#14
.24ba	20 fb 3e	jsr $3efb		jsr	mainHandler
.24bd	a2 01		ldx #$01			ldx 	#1 								; load address at +1.
.24bf	a5 35		lda $35				lda 	lowMemory 						; load it into lowMemory (for now ?)
.24c1	95 98		sta $98,x			sta 	esInt0,x
.24c3	a5 36		lda $36				lda 	lowMemory+1
.24c5	95 a0		sta $a0,x			sta 	esInt1,x
.24c7	a9 00		lda #$00			lda 	#0
.24c9	95 a8		sta $a8,x			sta 	esInt2,x
.24cb	95 b0		sta $b0,x			sta 	esInt3,x
.24cd	a2 0e		ldx #$0e		ldx	#14
.24cf	20 06 15	jsr $1506		jsr	deviceHandler
.24d2	a5 99		lda $99				lda 	esInt0+1 						; (temp0) is where we are decoding from.
.24d4	85 2a		sta $2a				sta 	temp0
.24d6	a5 a1		lda $a1				lda 	esInt1+1
.24d8	85 2b		sta $2b				sta 	temp0+1
.24da	20 56 25	jsr $2556			jsr 	LoadVRAMFile 					; load the VRAM file in.
.24dd	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/video/vpeekpoke.asm

.24de					Command_VPoke:
.24de	38		sec				sec 						; one byte , CS
.24df	b0 01		bcs $24e2			bcs 	CmdVideoWrite
.24e1					Command_VDoke:
.24e1	18		clc				clc 						; two bytes, CC
.24e2					CmdVideoWrite:
.24e2	08		php				php 						; save one or two btes
.24e3	a9 00		lda #$00			lda 	#0  				; get address and value into levels 0,1
.24e5	a2 0a		ldx #$0a		ldx	#10
.24e7	20 fb 3e	jsr $3efb		jsr	mainHandler
.24ea	a2 02		ldx #$02		ldx	#2
.24ec	20 fb 3e	jsr $3efb		jsr	mainHandler
.24ef	a9 01		lda #$01			lda 	#1
.24f1	a2 0a		ldx #$0a		ldx	#10
.24f3	20 fb 3e	jsr $3efb		jsr	mainHandler
.24f6	a2 00		ldx #$00			ldx 	#0
.24f8	20 09 25	jsr $2509			jsr 	SetUpTOSVRamAddress ; copy target address to VRAM address registers
.24fb	a5 99		lda $99				lda 	esInt0+1 			; get MSB of write value
.24fd	8d 23 9f	sta $9f23			sta 	$9F23
.2500	28		plp				plp 						; if it was Poke then exit
.2501	b0 05		bcs $2508			bcs 	_CVWExit
.2503	a5 a1		lda $a1				lda 	esInt1+1 			; doke, write the MSB.
.2505	8d 23 9f	sta $9f23			sta 	$9F23
.2508					_CVWExit:
.2508	60		rts				rts
.2509					SetUpTOSVRamAddress:
.2509	b5 a8		lda $a8,x			lda 	esInt2,x 			; check range of address, data to $FFFF
.250b	29 fe		and #$fe			and 	#$FE
.250d	15 b0		ora $b0,x			ora 	esInt3,x
.250f	d0 14		bne $2525			bne 	CVWValue
.2511	b5 98		lda $98,x			lda 	esInt0,x			; set address up
.2513	8d 20 9f	sta $9f20			sta 	$9F20
.2516	b5 a0		lda $a0,x			lda 	esInt1,x
.2518	8d 21 9f	sta $9f21			sta	 	$9F21
.251b	b5 a8		lda $a8,x			lda 	esInt2,x
.251d	29 01		and #$01			and 	#1
.251f	09 10		ora #$10			ora 	#$10 				; step 1.
.2521	8d 22 9f	sta $9f22			sta 	$9F22
.2524	60		rts				rts
.2525					CVWValue:
.2525	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.2527	20 36 15	jsr $1536		jsr	errorHandler
.252a					Command_VPeek:
.252a	38		sec				sec 						; one byte , CS
.252b	b0 01		bcs $252e			bcs 	CmdVideoRead
.252d					Command_VDeek:
.252d	18		clc				clc 						; two bytes, CC
.252e					CmdVideoRead:
.252e	08		php				php 						; save action on stack.
.252f	48		pha				pha 						; save stack position
.2530	a2 0a		ldx #$0a		ldx	#10
.2532	20 fb 3e	jsr $3efb		jsr	mainHandler
.2535	a2 04		ldx #$04		ldx	#4
.2537	20 fb 3e	jsr $3efb		jsr	mainHandler
.253a	68		pla				pla
.253b	aa		tax				tax
.253c	20 09 25	jsr $2509			jsr 	SetUpTOSVRamAddress	; set up VRAM address.
.253f	a9 00		lda #$00			lda 	#0 					; zero upper 3 bytes
.2541	95 a0		sta $a0,x			sta 	esInt1,x
.2543	95 a8		sta $a8,x			sta 	esInt2,x
.2545	95 b0		sta $b0,x			sta 	esInt3,x
.2547	ad 23 9f	lda $9f23			lda 	$9F23				; copy 1st byte
.254a	95 98		sta $98,x			sta 	esInt0,x
.254c	28		plp				plp 						; check if DOKE (carry was clear)
.254d	b0 05		bcs $2554			bcs 	_CVRExit
.254f	ad 23 9f	lda $9f23			lda 	$9F23 				; copy 2nd byte
.2552	95 a0		sta $a0,x			sta 	esInt1,x
.2554					_CVRExit:
.2554	8a		txa				txa 						; return X position.
.2555	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/video/vramprocess.asm

.0c73					compressMode:
>0c73							.fill 	1
.0c74					imageInfo:
>0c74							.fill 	X16MaxImages
.0cb4					imageAddr32Low:
>0cb4							.fill  	X16MaxImages
.0cf4					imageAddr32High:
>0cf4							.fill  	X16MaxImages
.2556					LoadVRAMFile:
.2556	8a		txa				txa
.2557	48		pha				pha
.2558	98		tya				tya
.2559	48		pha				pha
.255a					_LVRLoop:
.255a	20 36 26	jsr $2636			jsr 	LVFGet 						; get the next (never access direct)
.255d	c9 80		cmp #$80			cmp 	#$80 						; exit ?
.255f	f0 42		beq $25a3			beq 	_LVRExit
.2561	b0 5c		bcs $25bf			bcs 	_LVRLoad 					; load data in ?
.2563	c9 08		cmp #$08			cmp 	#$08 						; is it set address ?
.2565	90 11		bcc $2578			bcc 	_LVRSetAddress
.2567	c9 0f		cmp #$0f			cmp 	#$0F 						; is it define palette
.2569	f0 3d		beq $25a8			beq 	_LVRSetPalette
.256b	c9 10		cmp #$10			cmp 	#$10 						; is it set compression type ?
.256d	90 2d		bcc $259c			bcc 	_LVRSetCompress
.256f	c9 64		cmp #$64			cmp 	#$64 						; is it set sprite type.
.2571	90 60		bcc $25d3			bcc 	_LVRSetSprite
.2573	a2 01		ldx #$01			ldx 	#ErrorID_missing
.2575	20 36 15	jsr $1536		jsr	errorHandler
.2578					_LVRSetAddress:
.2578	85 2d		sta $2d				sta 	temp1+1 					; 24 bit in temp1+1/temp1/A
.257a	20 36 26	jsr $2636			jsr 	LVFGet
.257d	85 2c		sta $2c				sta 	temp1
.257f	a9 00		lda #$00			lda 	#0
.2581	46 2d		lsr $2d				lsr 	temp1+1 					; / 2 twice.
.2583	66 2c		ror $2c				ror 	temp1
.2585	6a		ror a				ror		a
.2586	46 2d		lsr $2d				lsr 	temp1+1
.2588	66 2c		ror $2c				ror 	temp1
.258a	6a		ror a				ror		a
.258b	8d 20 9f	sta $9f20			sta 	$9F20 						; set write address with +1 increment
.258e	a5 2c		lda $2c				lda 	temp1
.2590	8d 21 9f	sta $9f21			sta 	$9F21
.2593	a5 2d		lda $2d				lda 	temp1+1
.2595	09 10		ora #$10			ora 	#$10
.2597	8d 22 9f	sta $9f22			sta 	$9F22
.259a	d0 be		bne $255a			bne 	_LVRLoop
.259c					_LVRSetCompress:
.259c	29 07		and #$07			and 	#7
.259e	8d 73 0c	sta $0c73			sta 	compressMode
.25a1	10 b7		bpl $255a			bpl 	_LVRLoop
.25a3					_LVRExit:
.25a3	68		pla				pla
.25a4	a8		tay				tay
.25a5	68		pla				pla
.25a6	aa		tax				tax
.25a7	60		rts				rts
.25a8					_LVRSetPalette:
.25a8	20 36 26	jsr $2636			jsr 	LVFGet 						; get palette id.
.25ab	20 f9 23	jsr $23f9			jsr 	PointToPaletteA 			; in palette.asm
.25ae	20 36 26	jsr $2636			jsr 	LVFGet 						; copy 12 bit palette data in.
.25b1	8d 23 9f	sta $9f23			sta 	$9F23
.25b4	20 36 26	jsr $2636			jsr 	LVFGet
.25b7	29 0f		and #$0f			and 	#$0F
.25b9	8d 23 9f	sta $9f23			sta 	$9F23
.25bc	4c 5a 25	jmp $255a			jmp 	_LVRLoop
.25bf					_LVRLoad:
.25bf	ae 73 0c	ldx $0c73			ldx 	compressMode
.25c2	d0 55		bne $2619			bne 	_LVRNotMode0
.25c4	29 7f		and #$7f			and 	#$7F 						; count in X (is > 0)
.25c6					_LVRLCopyX:
.25c6	aa		tax				tax
.25c7					_LVRLCopy:
.25c7	20 36 26	jsr $2636			jsr 	LVFGet 						; write to data.
.25ca	8d 23 9f	sta $9f23			sta 	$9F23
.25cd	ca		dex				dex
.25ce	d0 f7		bne $25c7			bne 	_LVRLCopy
.25d0	4c 5a 25	jmp $255a			jmp 	_LVRLoop
.25d3					_LVRSetSprite:
.25d3	48		pha				pha 								; save on stack
.25d4	20 36 26	jsr $2636			jsr 	LVFGet 						; get the sprite number into X
.25d7	aa		tax				tax
.25d8	c9 40		cmp #$40			cmp 	#X16MaxImages				; too high ?
.25da	b0 38		bcs $2614			bcs 	_LVRSSValue
.25dc	68		pla				pla 								; restore the data held in the first byte
.25dd	9d 74 0c	sta $0c74,x			sta 	imageInfo,x 				; and write into the sprite image table.
.25e0					_LVRAlignVRAM:
.25e0	ad 20 9f	lda $9f20			lda 	$9F20 						; check VRAM on 32 byte boundary
.25e3	29 1f		and #$1f			and 	#$1F
.25e5	f0 07		beq $25ee			beq 	_LVRAligned
.25e7	a9 00		lda #$00			lda 	#$00
.25e9	8d 23 9f	sta $9f23			sta 	$9F23
.25ec	f0 f2		beq $25e0			beq 	_LVRAlignVRAM
.25ee					_LVRAligned:
.25ee	ad 22 9f	lda $9f22			lda 	$9F22 						; put address/32 in sprite image table
.25f1	4a		lsr a				lsr 	a 	 						; first halve into temp1
.25f2	ad 21 9f	lda $9f21			lda 	$9F21
.25f5	6a		ror a				ror 	a
.25f6	85 2d		sta $2d				sta 	temp1+1
.25f8	ad 20 9f	lda $9f20			lda 	$9F20
.25fb	6a		ror a				ror 	a
.25fc	85 2c		sta $2c				sta 	temp1
.25fe	a0 04		ldy #$04			ldy 	#4 							; divide it by 16 in temp1
.2600					_LVRShift:
.2600	46 2d		lsr $2d				lsr 	temp1+1
.2602	66 2c		ror $2c				ror 	temp1
.2604	88		dey				dey
.2605	d0 f9		bne $2600			bne 	_LVRShift
.2607	a5 2d		lda $2d				lda 	temp1+1 					; copy result.
.2609	9d f4 0c	sta $0cf4,x			sta 	imageAddr32High,x
.260c	a5 2c		lda $2c				lda 	temp1
.260e	9d b4 0c	sta $0cb4,x			sta 	imageAddr32Low,x
.2611	4c 5a 25	jmp $255a			jmp 	_LVRLoop
.2614					_LVRSSValue:
.2614	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.2616	20 36 15	jsr $1536		jsr	errorHandler
.2619					_LVRNotMode0:
.2619	e0 01		cpx #$01			cpx 	#1
.261b	d0 15		bne $2632			bne 	_LVRNotMode1
.261d	29 7f		and #$7f			and 	#$7F 						; drop bit 7
.261f	c9 40		cmp #$40			cmp 	#$40
.2621	90 a3		bcc $25c6			bcc 	_LVRLCopyX 					; 00-3F use mode 0's copying code.
.2623					_LVRRLEGroup:
.2623	29 3f		and #$3f			and 	#$3F
.2625	aa		tax				tax
.2626	20 36 26	jsr $2636			jsr 	LVFGet
.2629					_LVRLEGroupLoop:
.2629	8d 23 9f	sta $9f23			sta 	$9F23
.262c	ca		dex				dex
.262d	d0 fa		bne $2629			bne 	_LVRLEGroupLoop
.262f	4c 5a 25	jmp $255a			jmp 	_LVRLoop
.2632					_LVRNotMode1:
>2632	db						.byte 	$DB
.2633	4c 32 26	jmp $2632			jmp 	_LVRNotMode1
.2636	84 32		sty $32		LVFGet:	sty 	tempShort
.2638	a0 00		ldy #$00			ldy 	#0
.263a	b1 2a		lda ($2a),y			lda 	(temp0),y
.263c	a4 32		ldy $32				ldy	 	tempShort
.263e	e6 2a		inc $2a				inc 	temp0
.2640	d0 02		bne $2644			bne 	_LVFGExit
.2642	e6 2b		inc $2b				inc 	temp0+1
.2644					_LVFGExit:
.2644	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Return to file: basic.asm

.2645					section_end_extension:
.2645					section_start_floatingpoint:

;******  Processing file: floatingpoint/floatingpoint.asm

.2645					floatingpointHandler:
.2645	a2 03		ldx #$03			ldx 	#ErrorID_NoModule
.2647	20 36 15	jsr $1536		jsr	errorHandler

;******  Return to file: basic.asm

.264a					section_end_floatingpoint:
.264a					section_start_interaction:

;******  Processing file: interaction/interaction.asm


;******  Processing file: interaction/cold.asm

.264a					ColdStartEntry:
.264a	a2 ff		ldx #$ff			ldx 	#$FF
.264c	9a		txs				txs
.264d	20 d6 26	jsr $26d6			jsr 	ForceStandardMode
.2650	a2 04		ldx #$04		ldx	#4
.2652	20 06 15	jsr $1506		jsr	deviceHandler
.2655	a0 ff		ldy #$ff			ldy 	#255
.2657					_CSBanner:
.2657	c8		iny				iny
.2658	b9 7e 26	lda $267e,y			lda 	Intro,y
.265b	f0 14		beq $2671			beq 	_CSStart
.265d	c9 08		cmp #$08			cmp 	#8
.265f	90 08		bcc $2669			bcc 	_CSInk
.2661	a2 16		ldx #$16		ldx	#22
.2663	20 06 15	jsr $1506		jsr	deviceHandler
.2666	4c 57 26	jmp $2657			jmp 	_CSBanner
.2669					_CSInk:
.2669	a2 08		ldx #$08		ldx	#8
.266b	20 06 15	jsr $1506		jsr	deviceHandler
.266e	4c 57 26	jmp $2657			jmp 	_CSBanner
.2671					_CSStart:
.2671	a2 16		ldx #$16		ldx	#22
.2673	20 fb 3e	jsr $3efb		jsr	mainHandler
.2676	a2 06		ldx #$06		ldx	#6
.2678	20 fb 3e	jsr $3efb		jsr	mainHandler
.267b	4c 96 27	jmp $2796			jmp 	WarmStartEntry
>267e	06 2a 2a 2a 20 36 35 30		Intro:	.text 	6,"*** 6502 Extended BASIC ***",13,13
>2686	32 20 45 78 74 65 6e 64 65 64 20 42 41 53 49 43
>2696	20 2a 2a 2a 0d 0d
>269c	03 57 72 69 74 74 65 6e				.text 	3,"Written by Paul Robson 2021",13,13
>26a4	20 62 79 20 50 61 75 6c 20 52 6f 62 73 6f 6e 20
>26b4	32 30 32 31 0d 0d
>26ba	02 42 61 73 69 63 20				.text 	2,"Basic "
>26c1	30 2e 32 31					.text "0.21"
>26c5	20 28						.text 	" ("
>26c7	30 35 2d 41 70 72 2d 32				.text "05-Apr-2021"
>26cf	30 32 31
>26d2	29 0d 0d 00					.text 	")",13,13,0
.26d6					ForceStandardMode:
.26d6	a9 fe		lda #$fe			lda 	#$FE
.26d8	20 87 18	jsr $1887		jsr	extensionHandler
.26db	60		rts				rts

;******  Return to file: interaction/interaction.asm


;******  Processing file: interaction/delete.asm

.26dc					DeleteLine:
.26dc	ad c8 0a	lda $0ac8			lda 	basePage 					; copy program base to temp0
.26df	85 2a		sta $2a				sta 	temp0
.26e1	ad c9 0a	lda $0ac9			lda 	basePage+1
.26e4	85 2b		sta $2b				sta 	temp0+1
.26e6	a0 01		ldy #$01	_DLLoop:ldy 	#1 							; see if found line ?
.26e8	a5 98		lda $98				lda 	esInt0 						; e.g. the linenumbers match
.26ea	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.26ec	d0 07		bne $26f5			bne 	_DLNext
.26ee	c8		iny				iny
.26ef	a5 a0		lda $a0				lda 	esInt1
.26f1	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.26f3	f0 06		beq $26fb			beq 	_DLFound
.26f5	20 19 27	jsr $2719	_DLNext:jsr 	IAdvanceTemp0 				; shift temp0 forward, return Z flag set if end.
.26f8	d0 ec		bne $26e6			bne 	_DLLoop
.26fa	60		rts				rts
.26fb					_DLFound:
.26fb	a0 00		ldy #$00			ldy 	#0 							; this is the line to cut, so this offset is the bytes to remove
.26fd	b1 2a		lda ($2a),y			lda 	(temp0),y
.26ff	a8		tay				tay 								; so we copy from (temp0),y
.2700	a2 00		ldx #$00			ldx 	#0  						; to (temp0,x)
.2702					_DLCopyDown:
.2702	b1 2a		lda ($2a),y			lda 	(temp0),y 					; copy one byte.
.2704	81 2a		sta ($2a,x)			sta 	(temp0,x)
.2706	e6 2a		inc $2a				inc 	temp0 						; advance pointer
.2708	d0 02		bne $270c			bne 	_DLNoCarry
.270a	e6 2b		inc $2b				inc 	temp0+1
.270c					_DLNoCarry:
.270c	a5 2a		lda $2a				lda 	temp0 						; until hit low memory
.270e	c5 35		cmp $35				cmp 	lowMemory 					; which is comfortably after End Program.
.2710	d0 f0		bne $2702			bne 	_DLCopyDown
.2712	a5 2b		lda $2b				lda 	temp0+1
.2714	c5 36		cmp $36				cmp 	lowMemory+1
.2716	d0 ea		bne $2702			bne 	_DLCopyDown
.2718	60		rts				rts
.2719					IAdvanceTemp0:
.2719	84 32		sty $32				sty 	tempShort
.271b	18		clc				clc
.271c	a0 00		ldy #$00			ldy 	#0 							; get offset
.271e	b1 2a		lda ($2a),y			lda 	(temp0),y 					; add to temp0
.2720	65 2a		adc $2a				adc 	temp0
.2722	85 2a		sta $2a				sta 	temp0
.2724	90 02		bcc $2728			bcc 	_IATNoCarry
.2726	e6 2b		inc $2b				inc 	temp0+1
.2728					_IATNoCarry:
.2728	b1 2a		lda ($2a),y			lda 	(temp0),y
.272a	a4 32		ldy $32				ldy 	tempShort
.272c	c9 00		cmp #$00			cmp		#0 							; Z set if program end.
.272e	60		rts				rts

;******  Return to file: interaction/interaction.asm


;******  Processing file: interaction/insert.asm

.272f					InsertLine:
.272f	ad c8 0a	lda $0ac8			lda 	basePage 					; copy program base to temp0
.2732	85 2a		sta $2a				sta 	temp0
.2734	ad c9 0a	lda $0ac9			lda 	basePage+1
.2737	85 2b		sta $2b				sta 	temp0+1
.2739					_ILLoop:
.2739	a0 01		ldy #$01			ldy 	#1
.273b	b1 2a		lda ($2a),y			lda 	(temp0),y
.273d	c5 98		cmp $98				cmp 	esInt0
.273f	c8		iny				iny
.2740	b1 2a		lda ($2a),y			lda 	(temp0),y
.2742	e5 a0		sbc $a0				sbc 	esInt1
.2744	b0 05		bcs $274b			bcs 	_ILFound 					; we know it cannot be equal, it would have been deleted
.2746	20 19 27	jsr $2719			jsr 	IAdvanceTemp0 				; shift temp0 forward, return Z flag set if end.
.2749	d0 ee		bne $2739			bne 	_ILLoop
.274b					_ILFound:
.274b	a5 35		lda $35				lda 	lowMemory 					; shift lowMemory up to make space for it.
.274d	85 2c		sta $2c				sta 	temp1             			; this pointer goes backwards
.274f	a5 36		lda $36				lda 	lowMemory+1
.2751	85 2d		sta $2d				sta 	temp1+1
.2753	ad 71 0e	lda $0e71			lda 	tokenBufferIndex 			; space to make in Y, 0 in X.
.2756	18		clc				clc 								; add 3 for the line number and offset.
.2757	69 03		adc #$03			adc 	#3 							; tokenbuffer already has $80
.2759	a8		tay				tay
.275a	a2 00		ldx #$00			ldx 	#0
.275c	a1 2c		lda ($2c,x)	_ILMove:lda 	(temp1,x)					; shift up
.275e	91 2c		sta ($2c),y			sta 	(temp1),y
.2760	a5 2c		lda $2c				lda 	temp1 						; check reached the insert point ?
.2762	c5 2a		cmp $2a				cmp 	temp0
.2764	d0 06		bne $276c			bne 	_ILMNext
.2766	a5 2d		lda $2d				lda 	temp1+1
.2768	c5 2b		cmp $2b				cmp 	temp0+1
.276a	f0 0b		beq $2777			beq 	_ILMCopy
.276c					_ILMNext:
.276c	a5 2c		lda $2c				lda 	temp1
.276e	d0 02		bne $2772			bne 	_ILNoBorrow
.2770	c6 2d		dec $2d				dec 	temp1+1
.2772					_ILNoBorrow:
.2772	c6 2c		dec $2c				dec 	temp1
.2774	4c 5c 27	jmp $275c			jmp 	_ILMove 					; and go round again
.2777					_ILMCopy:
.2777	98		tya				tya 								; Y is the offset of the new line.
.2778	81 2a		sta ($2a,x)			sta 	(temp0,x)					; X = 0 still.
.277a	a0 01		ldy #$01			ldy 	#1 							; copy in line number.
.277c	a5 98		lda $98				lda 	esInt0
.277e	91 2a		sta ($2a),y			sta 	(temp0),y
.2780	c8		iny				iny
.2781	a5 a0		lda $a0				lda 	esInt1
.2783	91 2a		sta ($2a),y			sta 	(temp0),y
.2785	a0 00		ldy #$00			ldy 	#0 							; copy the body in
.2787					_ILMCopy2:
.2787	b1 28		lda ($28),y			lda 	(codePtr),y
.2789	c8		iny				iny
.278a	c8		iny				iny
.278b	c8		iny				iny
.278c	91 2a		sta ($2a),y			sta 	(temp0),y
.278e	88		dey				dey
.278f	88		dey				dey
.2790	cc 71 0e	cpy $0e71			cpy 	tokenBufferIndex
.2793	d0 f2		bne $2787			bne 	_ILMCopy2
.2795	60		rts				rts

;******  Return to file: interaction/interaction.asm


;******  Processing file: interaction/warm.asm

.2796					WarmStartEntry:
.2796	a2 ff		ldx #$ff			ldx 	#$FF
.2798	9a		txs				txs
.2799	20 d6 26	jsr $26d6			jsr 	ForceStandardMode
.279c	a9 02		lda #$02			lda 	#2							; green text.
.279e	a2 08		ldx #$08		ldx	#8
.27a0	20 06 15	jsr $1506		jsr	deviceHandler
.27a3	a2 0c		ldx #$0c		ldx	#12
.27a5	20 06 15	jsr $1506		jsr	deviceHandler
.27a8	a5 2a		lda $2a				lda 	temp0	 					; copy temp0 to codePtr
.27aa	85 28		sta $28				sta 	codePtr
.27ac	a5 2b		lda $2b				lda 	temp0+1
.27ae	85 29		sta $29				sta 	codePtr+1
.27b0	a2 06		ldx #$06		ldx	#6
.27b2	20 06 15	jsr $1506		jsr	deviceHandler
.27b5	a2 08		ldx #$08		ldx	#8
.27b7	20 6a 4a	jsr $4a6a		jsr	tokeniserHandler
.27ba	c9 00		cmp #$00			cmp 	#0
.27bc	f0 25		beq $27e3			beq 	WSEError 					; failed (tokenise can fail if it doesn't know a character e.g. |)
.27be	a9 6e		lda #$6e			lda 	#(tokenHeader) & $FF
.27c0	85 28		sta $28				sta 	codePtr
.27c2	a9 0d		lda #$0d			lda 	#(tokenHeader) >> 8
.27c4	85 29		sta $29				sta 	1+(codePtr)
.27c6	ad 71 0d	lda $0d71			lda 	tokenBuffer 				; is it a blank line, go get another line.
.27c9	c9 80		cmp #$80			cmp 	#$80
.27cb	f0 c9		beq $2796			beq 	WarmStartEntry
.27cd	29 c0		and #$c0			and 	#$C0						; does it start with a number
.27cf	c9 40		cmp #$40			cmp 	#$40 						; e.g. is it 01xx xxxx
.27d1	f0 15		beq $27e8			beq 	HasLineNumber
.27d3	a9 00		lda #$00			lda 	#0 							; zero the token header, so it will look like a
.27d5	8d 6e 0d	sta $0d6e			sta 	tokenHeader 				; fake program line.
.27d8	8d 6f 0d	sta $0d6f			sta 	tokenHeader+1
.27db	8d 70 0d	sta $0d70			sta 	tokenHeader+2
.27de	a2 18		ldx #$18		ldx	#24
.27e0	20 fb 3e	jsr $3efb		jsr	mainHandler
.27e3					WSEError:
.27e3	a2 1e		ldx #$1e			ldx 	#ErrorID_Tokenise
.27e5	20 36 15	jsr $1536		jsr	errorHandler
.27e8					HasLineNumber:
.27e8	a0 03		ldy #$03			ldy 	#3 							; get line number
.27ea	a9 00		lda #$00			lda 	#0
.27ec	a2 0a		ldx #$0a		ldx	#10
.27ee	20 fb 3e	jsr $3efb		jsr	mainHandler
.27f1	a5 a8		lda $a8				lda 	esInt2		 				; check in range (only 2 bytes)
.27f3	05 b0		ora $b0				ora 	esInt3
.27f5	d0 ec		bne $27e3			bne 	WSEError
.27f7	98		tya				tya 								; make codePtr point to code after the line number.
.27f8	18		clc				clc 								; by skipping over the tokenised number.
.27f9	65 28		adc $28				adc 	codePtr
.27fb	85 28		sta $28				sta 	codePtr
.27fd	90 02		bcc $2801			bcc		_HLNNoCarry
.27ff	e6 29		inc $29				inc 	codePtr+1
.2801					_HLNNoCarry:
.2801	98		tya				tya 								; subtract that offset from the code buffer index
.2802	38		sec				sec
.2803	49 ff		eor #$ff			eor 	#$FF
.2805	6d 71 0e	adc $0e71			adc 	tokenBufferIndex
.2808	18		clc				clc 								; add space allowing for header & $80 trailer
.2809	69 04		adc #$04			adc 	#4
.280b	8d 71 0e	sta $0e71			sta 	tokenBufferIndex 			; this is the number of bytes occupied.
.280e	20 dc 26	jsr $26dc			jsr 	DeleteLine 					; always delete the line, it's deleted and reinserted.
.2811					_HLNNoDelete:
.2811	ad 71 0e	lda $0e71			lda 	tokenBufferIndex 			; if line was empty, then don't insert
.2814	c9 01		cmp #$01			cmp 	#1 							; (the one character is the EOL marker)
.2816	f0 0c		beq $2824			beq 	_HLMEditDone
.2818	a5 36		lda $36				lda 	lowMemory+1 				; is there space, if we allow a little bit of
.281a	18		clc				clc 								; workspace (1k)
.281b	69 04		adc #$04			adc 	#4 							; e.g. 4 x 256
.281d	c5 34		cmp $34				cmp 	highMemory+1
.281f	b0 0b		bcs $282c			bcs 	_HLMMemory 					; nope, won't allowit.
.2821	20 2f 27	jsr $272f			jsr 	InsertLine 					; insert the line in
.2824					_HLMEditDone:
.2824	a2 06		ldx #$06		ldx	#6
.2826	20 fb 3e	jsr $3efb		jsr	mainHandler
.2829	4c 96 27	jmp $2796			jmp 	WarmStartEntry
.282c					_HLMMemory:
.282c	a2 22		ldx #$22			ldx 	#ErrorID_Memory
.282e	20 36 15	jsr $1536		jsr	errorHandler

;******  Return to file: interaction/interaction.asm

.2831					interactionHandler:
.2831	48		pha				pha
.2832	bd 42 28	lda $2842,x			lda 	interactionVectors,x
.2835	8d f2 0a	sta $0af2			sta 	jumpVector
.2838	bd 43 28	lda $2843,x			lda 	1+(interactionVectors),x
.283b	8d f3 0a	sta $0af3			sta 	jumpVector+1
.283e	68		pla				pla
.283f	6c f2 0a	jmp ($0af2)			jmp 	(jumpVector)
.2842					interactionVectors:
>2842	48 28					.word _DummyControlHandler ; index 0
>2844	4a 26					.word ColdStartEntry       ; index 2
>2846	96 27					.word WarmStartEntry       ; index 4
.2848					_DummyControlHandler:
.2848	60		rts			rts

;******  Return to file: basic.asm

.2849					section_end_interaction:
.2849					section_start_main:

;******  Processing file: main/main.asm


;******  Processing file: main/commands/compat/readdata.asm

.0d34					dataPtr:
>0d34							.fill 	2
.0d36					dataIndex:
>0d36							.fill 	1
.2849					CommandRead:
.2849	a2 00		ldx #$00			ldx 	#0 							; get a reference to a variable in stack:0
.284b	20 ae 37	jsr $37ae			jsr 	EvaluateReference
.284e	20 8f 28	jsr $288f			jsr 	SwapDPCP 					; use the data pointer.
.2851	b1 28		lda ($28),y			lda 	(codePtr),y 				; see where it is.
.2853	c8		iny				iny
.2854	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; if it is on a comma, it is in data.
.2856	f0 07		beq $285f			beq 	_CRInData
.2858	88		dey				dey
.2859	a9 d9		lda #$d9			lda 	#TKW_DATA 					; scan forward to a DATA statement.
.285b	aa		tax				tax
.285c	20 90 2f	jsr $2f90			jsr 	ScanForward
.285f					_CRInData:
.285f	a2 01		ldx #$01			ldx 	#1 							; evaluate a value at Stack,1
.2861	20 56 37	jsr $3756			jsr 	Evaluate
.2864	ca		dex				dex 								; and write the value.
.2865	20 e3 2a	jsr $2ae3			jsr 	WriteValue
.2868	20 8f 28	jsr $288f			jsr 	SwapDPCP 					; get the code pointer back.
.286b	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows ?
.286d	c8		iny				iny
.286e	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; if comma, another variable
.2870	f0 d7		beq $2849			beq 	CommandRead
.2872	88		dey				dey
.2873	60		rts				rts
.2874					CommandData:
.2874	a9 80		lda #$80			lda 	#TOK_EOL 					; go forward to end of line or colon.
.2876	a2 ca		ldx #$ca			ldx 	#TKW_COLON
.2878	20 90 2f	jsr $2f90			jsr 	ScanForward
.287b	88		dey				dey 								; ending on EOL is a scan issue, as it increments
.287c	60		rts				rts
.287d					CommandRestore:
.287d	ad c8 0a	lda $0ac8			lda 	basePage
.2880	8d 34 0d	sta $0d34			sta 	dataPtr
.2883	ad c9 0a	lda $0ac9			lda 	basePage+1
.2886	8d 35 0d	sta $0d35			sta 	dataPtr+1
.2889	a9 03		lda #$03			lda 	#3
.288b	8d 36 0d	sta $0d36			sta 	dataIndex
.288e	60		rts				rts
.288f					SwapDPCP:
.288f	8a		txa				txa
.2890	48		pha				pha
.2891	98		tya				tya 								; swap Y, DataIndex
.2892	ac 36 0d	ldy $0d36			ldy 	DataIndex
.2895	8d 36 0d	sta $0d36			sta 	DataIndex
.2898	a5 28		lda $28				lda 	codePtr 					; swap code/dataptr low
.289a	ae 34 0d	ldx $0d34			ldx 	dataptr
.289d	8d 34 0d	sta $0d34			sta 	dataPtr
.28a0	86 28		stx $28				stx 	codePtr
.28a2	a5 29		lda $29				lda 	codePtr+1 					; swap code/dataptr high.
.28a4	ae 35 0d	ldx $0d35			ldx 	dataptr+1
.28a7	8d 35 0d	sta $0d35			sta 	dataPtr+1
.28aa	86 29		stx $29				stx 	codePtr+1
.28ac	68		pla				pla
.28ad	aa		tax				tax
.28ae	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/compat/transfer.asm

.28af					CommandGOSUB:
.28af	20 73 37	jsr $3773			jsr 	EvaluateRootInteger			; get GOSUB line on stack top.
.28b2	a2 04		ldx #$04			ldx 	#4 							; allocate 4 bytes on stack for GOSUB
.28b4	a9 47		lda #$47			lda 	#markerGOSUB  				; <marker> <return addr/offset>
.28b6	20 a8 3e	jsr $3ea8			jsr 	RSClaim
.28b9	a9 01		lda #$01			lda 	#1 							; save position at offset 1.
.28bb	20 d4 3e	jsr $3ed4			jsr 	RSSavePosition
.28be	a2 00		ldx #$00			ldx 	#0 							; point back at GOSUB line
.28c0	f0 1b		beq $28dd			beq 	GotoTOS 					; and do a GOTO there.
.28c2					CommandRETURN:
.28c2	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.28c4	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.28c6	c9 47		cmp #$47			cmp 	#markerGOSUB 						; does it match
.28c8	f0 05		beq $28cf			beq 	_isok
.28ca	a2 0e		ldx #$0e			ldx 	#ErrorID_returnErr
.28cc	20 36 15	jsr $1536		jsr	errorHandler
.28cf					_isok:
.28cf	a9 01		lda #$01			lda 	#1
.28d1	20 e7 3e	jsr $3ee7			jsr 	RSLoadPosition 				; reload the position from offset 1.
.28d4	a9 04		lda #$04			lda 	#4 							; throw 4 bytes from stack.
.28d6	20 ca 3e	jsr $3eca			jsr 	RSFree
.28d9	60		rts				rts
.28da					CommandGOTO:
.28da	20 73 37	jsr $3773			jsr 	EvaluateRootInteger 		; get GOTO line on stack top.
.28dd					GotoTOS:
.28dd	20 97 32	jsr $3297			jsr 	ResetCodeAddress 			; simple search.
.28e0					_GotoSearch:
.28e0	a0 00		ldy #$00			ldy 	#0 							; get offset
.28e2	b1 28		lda ($28),y			lda 	(codePtr),y
.28e4	f0 21		beq $2907			beq 	_GotoError 					; not found.
.28e6	c8		iny				iny									; check LSB match
.28e7	b1 28		lda ($28),y			lda 	(codePtr),y
.28e9	d5 98		cmp $98,x			cmp 	esInt0,x
.28eb	d0 07		bne $28f4			bne 	_GotoNext
.28ed	c8		iny				iny
.28ee	b1 28		lda ($28),y			lda 	(codePtr),y
.28f0	d5 a0		cmp $a0,x			cmp 	esInt1,x
.28f2	f0 10		beq $2904			beq 	_GotoFound
.28f4					_GotoNext:
.28f4	a0 00		ldy #$00			ldy 	#0 							; go next line
.28f6	b1 28		lda ($28),y			lda 	(codePtr),y
.28f8	18		clc				clc
.28f9	65 28		adc $28				adc 	codePtr
.28fb	85 28		sta $28				sta 	codePtr
.28fd	90 e1		bcc $28e0			bcc 	_GotoSearch
.28ff	e6 29		inc $29				inc 	codePtr+1
.2901	4c e0 28	jmp $28e0			jmp 	_GotoSearch
.2904					_GotoFound:
.2904	a0 03		ldy #$03			ldy 	#3 							; continue from that line
.2906	60		rts				rts
.2907					_GotoError:
.2907	a2 0c		ldx #$0c			ldx 	#ErrorID_LineNumber
.2909	20 36 15	jsr $1536		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/commands/io/input.asm

=32					MaxInputSize = 32
.0d37					InputBuffer:
>0d37							.fill 	MaxInputSize+1
.290c					Command_Input:
.290c	b1 28		lda ($28),y			lda 	(codePtr),y 			; see what's next.
.290e	c8		iny				iny
.290f	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 				; ignore commas.
.2911	f0 f9		beq $290c			beq 	Command_Input
.2913	88		dey				dey 							; undo consume
.2914	c9 ca		cmp #$ca			cmp 	#TKW_COLON
.2916	f0 54		beq $296c			beq 	_CIExit 				; : or EOL, exit
.2918	c9 80		cmp #$80			cmp 	#TOK_EOL
.291a	f0 50		beq $296c			beq 	_CIExit
.291c	c9 40		cmp #$40			cmp 	#$40 					; variable ?
.291e	90 12		bcc $2932			bcc 	_CIVariable
.2920	c9 85		cmp #$85			cmp 	#TOK_STR 				; if not quoted string syntax error.
.2922	d0 43		bne $2967			bne 	_CISyntax
.2924	a2 00		ldx #$00			ldx 	#0
.2926	20 6a 37	jsr $376a			jsr 	EvaluateString 			; evaluate and print string
.2929	20 45 2b	jsr $2b45			jsr 	TOSToTemp0
.292c	20 3b 2a	jsr $2a3b			jsr 	PrintString
.292f	4c 0c 29	jmp $290c			jmp 	Command_Input
.2932					_CIVariable:
.2932	a2 00		ldx #$00			ldx 	#0 						; evaluate a reference.
.2934	20 ae 37	jsr $37ae			jsr 	EvaluateReference  		; this is where its going
.2937					_CIRetry:
.2937	a9 3f		lda #$3f			lda 	#"?"					; print prompt
.2939	a2 14		ldx #$14		ldx	#20
.293b	20 06 15	jsr $1506		jsr	deviceHandler
.293e	98		tya				tya
.293f	48		pha				pha
.2940	20 80 29	jsr $2980			jsr 	InputString 			; input a string (manually)
.2943	a2 01		ldx #$01			ldx 	#1
.2945	20 6d 29	jsr $296d			jsr 	BufferToStackX 			; make stack,x ref input string.
.2948	a5 90		lda $90				lda 	esType 					; if target type numeric
.294a	29 40		and #$40			and 	#$40 					; then convert to number
.294c	d0 11		bne $295f			bne 	_CIWrite
.294e	a2 01		ldx #$01			ldx 	#1
.2950	20 45 2b	jsr $2b45			jsr 	TOSToTemp0 				; string address in temp0, goes here.
.2953	a9 0a		lda #$0a			lda 	#10
.2955	20 7b 3c	jsr $3c7b			jsr 	MInt32FromString 		; convert it back from a string.
.2958	68		pla				pla
.2959	a8		tay				tay
.295a	b0 03		bcs $295f			bcs 	_CIWrite 				; successfully converted.
.295c	18		clc				clc 							; default fail FP conversion
.295d	90 d8		bcc $2937			bcc		_CIRetry				; failed, try again.
.295f					_CIWrite:
.295f	a2 00		ldx #$00			ldx 	#0
.2961	20 e3 2a	jsr $2ae3			jsr 	WriteValue
.2964	4c 0c 29	jmp $290c			jmp 	Command_Input
.2967					_CISyntax:
.2967	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.2969	20 36 15	jsr $1536		jsr	errorHandler
.296c					_CIExit:
.296c	60		rts				rts
.296d					BufferToStackX:
.296d	a9 37		lda #$37			lda 	#InputBuffer & $FF
.296f	95 98		sta $98,x			sta 	esInt0,x
.2971	a9 0d		lda #$0d			lda 	#InputBuffer >> 8
.2973	95 a0		sta $a0,x			sta 	esInt1,x
.2975	a9 00		lda #$00			lda 	#0
.2977	95 a8		sta $a8,x			sta 	esInt2,x
.2979	95 b0		sta $b0,x			sta 	esInt3,x
.297b	a9 40		lda #$40			lda 	#$40
.297d	95 90		sta $90,x			sta 	esType,x
.297f	60		rts				rts
.2980					InputString:
.2980	a9 00		lda #$00			lda 	#0
.2982	8d 37 0d	sta $0d37			sta 	InputBuffer
.2985					_InputLoop:
.2985	a2 02		ldx #$02		ldx	#2
.2987	20 06 15	jsr $1506		jsr	deviceHandler
.298a	a2 0a		ldx #$0a		ldx	#10
.298c	20 06 15	jsr $1506		jsr	deviceHandler
.298f	c9 00		cmp #$00			cmp 	#0
.2991	f0 f2		beq $2985			beq 	_InputLoop
.2993	c9 08		cmp #$08			cmp 	#8
.2995	f0 19		beq $29b0			beq 	_InputBackspace
.2997	c9 0d		cmp #$0d			cmp 	#13
.2999	f0 21		beq $29bc			beq 	_InputExit
.299b	ae 37 0d	ldx $0d37			ldx 	InputBuffer
.299e	e0 20		cpx #$20			cpx 	#MaxInputSize 			; too many characters
.29a0	f0 e3		beq $2985			beq 	_InputLoop
.29a2	9d 38 0d	sta $0d38,x			sta 	InputBuffer+1,x 		; write char
.29a5	ee 37 0d	inc $0d37			inc 	InputBuffer 			; advance count.
.29a8					_InputPrintLoop:
.29a8	a2 14		ldx #$14		ldx	#20
.29aa	20 06 15	jsr $1506		jsr	deviceHandler
.29ad	4c 85 29	jmp $2985			jmp	 	_InputLoop
.29b0					_InputBackspace:
.29b0	ad 37 0d	lda $0d37			lda 	InputBuffer 			; at start
.29b3	f0 d0		beq $2985			beq 	_InputLoop
.29b5	ce 37 0d	dec $0d37			dec 	InputBuffer
.29b8	a9 08		lda #$08			lda 	#8
.29ba	d0 ec		bne $29a8			bne 	_InputPrintLoop
.29bc					_InputExit:
.29bc	a2 06		ldx #$06		ldx	#6
.29be	20 06 15	jsr $1506		jsr	deviceHandler
.29c1	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/io/print.asm

.0d58					lastPrintToken:
>0d58							.fill 	1
.29c2					Command_Print:
.29c2	a9 00		lda #$00			lda 	#0 							; clear LPT to a non token
.29c4	8d 58 0d	sta $0d58			sta 	lastPrintToken
.29c7	88		dey				dey
.29c8					_PrintLoopSkip:
.29c8	c8		iny				iny
.29c9					_PrintLoop:
.29c9	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows
.29cb	c9 80		cmp #$80			cmp 	#TOK_EOL  					; done if end of line or colon
.29cd	f0 5b		beq $2a2a			beq 	_PrintExit
.29cf	c9 ca		cmp #$ca			cmp 	#TKW_COLON
.29d1	f0 57		beq $2a2a			beq 	_PrintExit
.29d3	8d 58 0d	sta $0d58			sta 	lastPrintToken 				; update Last print token, so we check ; and ,
.29d6	c9 cc		cmp #$cc			cmp 	#TKW_SEMICOLON 				; ignore semicolon
.29d8	f0 ee		beq $29c8			beq 	_PrintLoopSkip
.29da	c9 cd		cmp #$cd			cmp 	#TKW_QUOTE 					; ' is new line
.29dc	f0 3c		beq $2a1a			beq	 	_PrintNewLine
.29de	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; , is print tab
.29e0	f0 40		beq $2a22			beq 	_PrintTab
.29e2	20 54 37	jsr $3754			jsr 	EvaluateRoot 				; evaluate something at the root
.29e5	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.29e7	85 2a		sta $2a				sta 	temp0
.29e9	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.29eb	85 2b		sta $2b				sta 	1+(temp0)
.29ed	a5 90		lda $90				lda 	esType 						; get type
.29ef	f0 15		beq $2a06			beq		_PrintInteger
.29f1	4a		lsr a				lsr 	a 							; check for floating point
.29f2	b0 08		bcs $29fc			bcs 	_PrintFloat
.29f4					_PrintString:
.29f4	a2 00		ldx #$00			ldx 	#0 							; bottom string to temp0
.29f6	20 45 2b	jsr $2b45			jsr 	TOSToTemp0
.29f9	4c 14 2a	jmp $2a14			jmp 	_PrintTemp0 				; print no leading space.
.29fc					_PrintFloat:
.29fc	a9 00		lda #$00			lda 	#0 							; stack level.
.29fe	a2 16		ldx #$16		ldx	#22
.2a00	20 45 26	jsr $2645		jsr	floatingpointHandler
.2a03	4c 0d 2a	jmp $2a0d			jmp 	_PrintSpaceTemp0
.2a06					_PrintInteger:
.2a06	a9 8a		lda #$8a			lda 	#10+$80 					; base 10 signed
.2a08	a2 00		ldx #$00			ldx 	#0 							; bottom stack element
.2a0a	20 63 3d	jsr $3d63			jsr 	MInt32ToString				; convert to text
.2a0d					_PrintSpaceTemp0:
.2a0d	a9 20		lda #$20			lda 	#32
.2a0f	a2 14		ldx #$14		ldx	#20
.2a11	20 06 15	jsr $1506		jsr	deviceHandler
.2a14					_PrintTemp0:
.2a14	20 3b 2a	jsr $2a3b			jsr 	PrintString
.2a17	4c c9 29	jmp $29c9			jmp 	_PrintLoop
.2a1a					_PrintNewLine:
.2a1a	a2 06		ldx #$06		ldx	#6
.2a1c	20 06 15	jsr $1506		jsr	deviceHandler
.2a1f	4c c8 29	jmp $29c8			jmp 	_PrintLoopSkip
.2a22					_PrintTab:
.2a22	a2 1a		ldx #$1a		ldx	#26
.2a24	20 06 15	jsr $1506		jsr	deviceHandler
.2a27	4c c8 29	jmp $29c8			jmp 	_PrintLoopSkip
.2a2a					_PrintExit:
.2a2a	ad 58 0d	lda $0d58			lda		lastPrintToken 				; check last token
.2a2d	c9 cc		cmp #$cc			cmp 	#TKW_SEMICOLON 				; if , or ; do not print NL
.2a2f	f0 09		beq $2a3a			beq 	_PrintExit2
.2a31	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.2a33	f0 05		beq $2a3a			beq 	_PrintExit2
.2a35	a2 06		ldx #$06		ldx	#6
.2a37	20 06 15	jsr $1506		jsr	deviceHandler
.2a3a					_PrintExit2:
.2a3a	60		rts				rts
.2a3b					PrintString:
.2a3b	8a		txa				txa
.2a3c	48		pha				pha
.2a3d	98		tya				tya
.2a3e	48		pha				pha
.2a3f	a0 00		ldy #$00			ldy 	#0							; get length
.2a41	b1 2a		lda ($2a),y			lda 	(temp0),y
.2a43	aa		tax				tax 								; into X
.2a44	e0 00		cpx #$00	_PSLoop:cpx 	#0 							; finished ?
.2a46	f0 10		beq $2a58			beq 	_PSExit
.2a48	ca		dex				dex
.2a49	8a		txa				txa
.2a4a	48		pha				pha
.2a4b	c8		iny				iny
.2a4c	b1 2a		lda ($2a),y			lda 	(temp0),y
.2a4e	a2 14		ldx #$14		ldx	#20
.2a50	20 06 15	jsr $1506		jsr	deviceHandler
.2a53	68		pla				pla
.2a54	aa		tax				tax
.2a55	4c 44 2a	jmp $2a44			jmp 	_PSLoop
.2a58					_PSExit:
.2a58	68		pla				pla
.2a59	a8		tay				tay
.2a5a	68		pla				pla
.2a5b	aa		tax				tax
.2a5c	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/io/text.asm

.2a5d					Command_CLS:
.2a5d	a2 04		ldx #$04		ldx	#4
.2a5f	20 06 15	jsr $1506		jsr	deviceHandler
.2a62	60		rts				rts
.2a63					Command_Ink:
.2a63	a2 00		ldx #$00			ldx 	#0
.2a65	20 7d 37	jsr $377d			jsr 	EvaluateSmallInteger
.2a68	a2 08		ldx #$08		ldx	#8
.2a6a	20 06 15	jsr $1506		jsr	deviceHandler
.2a6d	60		rts				rts
.2a6e					Command_Paper:
.2a6e	a2 00		ldx #$00			ldx 	#0
.2a70	20 7d 37	jsr $377d			jsr 	EvaluateSmallInteger
.2a73	a2 12		ldx #$12		ldx	#18
.2a75	20 06 15	jsr $1506		jsr	deviceHandler
.2a78	60		rts				rts
.2a79					Command_Locate:
.2a79	a2 00		ldx #$00			ldx 	#0
.2a7b	20 7d 37	jsr $377d			jsr 	EvaluateSmallInteger
.2a7e	20 8d 3e	jsr $3e8d			jsr 	CheckComma
.2a81	e8		inx				inx
.2a82	20 7d 37	jsr $377d			jsr 	EvaluateSmallInteger
.2a85	98		tya				tya
.2a86	48		pha				pha
.2a87	a4 99		ldy $99				ldy 	esInt0+1
.2a89	a5 98		lda $98				lda 	esInt0
.2a8b	a2 10		ldx #$10		ldx	#16
.2a8d	20 06 15	jsr $1506		jsr	deviceHandler
.2a90	68		pla				pla
.2a91	a8		tay				tay
.2a92	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/io/vdu.asm

.2a93					Command_VDU:
.2a93	20 73 37	jsr $3773			jsr 	EvaluateRootInteger 			; get integer at root.
.2a96	a5 98		lda $98				lda 	esInt0
.2a98	a2 14		ldx #$14		ldx	#20
.2a9a	20 06 15	jsr $1506		jsr	deviceHandler
.2a9d					_CVNext:
.2a9d	b1 28		lda ($28),y			lda 	(codePtr),y 					; what follows ?
.2a9f	c8		iny				iny
.2aa0	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 						; comma, do again
.2aa2	f0 ef		beq $2a93			beq 	Command_VDU
.2aa4	c9 cc		cmp #$cc			cmp 	#TKW_SEMICOLON 					; semicolon, print MSB
.2aa6	d0 0a		bne $2ab2			bne 	_CVExit
.2aa8	a5 a0		lda $a0				lda 	esInt1
.2aaa	a2 14		ldx #$14		ldx	#20
.2aac	20 06 15	jsr $1506		jsr	deviceHandler
.2aaf	4c 9d 2a	jmp $2a9d			jmp 	_CVNext
.2ab2	88		dey		_CVExit:dey
.2ab3	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/link.asm


;******  Return to file: main/main.asm


;******  Processing file: main/commands/misc/assert.asm

.2ab4					Command_Assert:
.2ab4	20 73 37	jsr $3773			jsr 	EvaluateRootInteger 		; what is being asserted.
.2ab7	20 34 3e	jsr $3e34			jsr 	MInt32Zero 					; is it true ?
.2aba	f0 01		beq $2abd			beq 	_CAError
.2abc	60		rts				rts
.2abd					_CAError:
.2abd	a2 04		ldx #$04			ldx 	#ErrorID_Assert
.2abf	20 36 15	jsr $1536		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/commands/misc/dim.asm

.2ac2					Command_Dim:
.2ac2	a2 04		ldx #$04		ldx	#4
.2ac4	20 49 4e	jsr $4e49		jsr	variableHandler
.2ac7	b1 28		lda ($28),y			lda 	(codePtr),y 				; see what follows.
.2ac9	c8		iny				iny
.2aca	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; comma follows, go back and do next
.2acc	f0 f4		beq $2ac2			beq 	Command_Dim
.2ace	88		dey				dey 								; unpick get
.2acf	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/misc/let.asm

.2ad0					CommandLet:
.2ad0	a2 00		ldx #$00			ldx 	#0  						; get address to write.
.2ad2	20 ae 37	jsr $37ae			jsr 	EvaluateReference
.2ad5	a9 8d		lda #$8d			lda 	#TKW_EQUAL 					; check for equals
.2ad7	20 75 3e	jsr $3e75			jsr 	CheckToken
.2ada	e8		inx				inx 								; do RHS
.2adb	20 56 37	jsr $3756			jsr 	Evaluate 					; evaluate and dereference
.2ade	ca		dex				dex
.2adf	20 e3 2a	jsr $2ae3			jsr 	WriteValue 					; write it out
.2ae2	60		rts				rts
.2ae3					WriteValue:
.2ae3	98		tya				tya
.2ae4	48		pha				pha
.2ae5	20 45 2b	jsr $2b45			jsr 	TOSToTemp0 					; set temp0 to point to target address.
.2ae8	b5 90		lda $90,x			lda 	esType,x 					; check the string flags match
.2aea	55 91		eor $91,x			eor 	esType+1,x 					; one string, one number causes an error.
.2aec	29 40		and #$40			and 	#$40
.2aee	d0 50		bne $2b40			bne		_WVType
.2af0	a0 01		ldy #$01			ldy 	#1 							; for string, copy 0 and 1.
.2af2	b5 90		lda $90,x			lda 	esType,x 					; check for string assignment
.2af4	29 40		and #$40			and 	#$40
.2af6	d0 1f		bne $2b17			bne 	_WVCopyString
.2af8	b5 90		lda $90,x			lda 	esType,x 					; check both are integer.
.2afa	15 91		ora $91,x			ora 	esType+1,x
.2afc	4a		lsr a				lsr 	a
.2afd	90 22		bcc $2b21			bcc 	_WVCopyData4 				; copy 4 data bytes.
.2aff	b5 90		lda $90,x			lda 	esType,x
.2b01	4a		lsr a				lsr 	a
.2b02	90 3c		bcc $2b40			bcc 	_WVType
.2b04	e8		inx				inx 								; force the value being written to be a float.
.2b05	20 b8 33	jsr $33b8			jsr 	BPMakeFloat
.2b08	ca		dex				dex
.2b09	20 45 2b	jsr $2b45			jsr 	TOSToTemp0 					; set Temp0 to write address
.2b0c	e8		inx				inx
.2b0d	8a		txa				txa
.2b0e	a2 22		ldx #$22		ldx	#34
.2b10	20 45 26	jsr $2645		jsr	floatingpointHandler
.2b13	aa		tax				tax
.2b14	4c 3d 2b	jmp $2b3d			jmp 	_WVCopyExit
.2b17					_WVCopyString:
.2b17	8a		txa				txa
.2b18	a2 10		ldx #$10		ldx	#16
.2b1a	20 c6 41	jsr $41c6		jsr	stringHandler
.2b1d	aa		tax				tax
.2b1e	4c 3d 2b	jmp $2b3d			jmp 	_WVCopyExit
.2b21					_WVCopyData4:
.2b21	b5 90		lda $90,x			lda 	esType,x 					; is the int ref a byte ref ?
.2b23	29 20		and #$20			and 	#$20 						; (e.g. is bit 5 set)
.2b25	d0 10		bne $2b37			bne 	_WVCopyData1
.2b27	a0 03		ldy #$03			ldy 	#3
.2b29	b5 b1		lda $b1,x			lda 	esInt3+1,x
.2b2b	91 2a		sta ($2a),y			sta 	(temp0),y
.2b2d	88		dey				dey
.2b2e	b5 a9		lda $a9,x			lda 	esInt2+1,x
.2b30	91 2a		sta ($2a),y			sta 	(temp0),y
.2b32	88		dey				dey
.2b33	b5 a1		lda $a1,x			lda 	esInt1+1,x
.2b35	91 2a		sta ($2a),y			sta 	(temp0),y
.2b37					_WVCopyData1:
.2b37	a0 00		ldy #$00			ldy 	#0
.2b39	b5 99		lda $99,x			lda 	esInt0+1,x
.2b3b	91 2a		sta ($2a),y			sta 	(temp0),y
.2b3d					_WVCopyExit:
.2b3d	68		pla				pla
.2b3e	a8		tay				tay
.2b3f	60		rts				rts
.2b40					_WVType:
.2b40	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.2b42	20 36 15	jsr $1536		jsr	errorHandler
.2b45					TOSToTemp0:
.2b45	b5 98		lda $98,x			lda 	esInt0,x
.2b47	85 2a		sta $2a				sta 	temp0
.2b49	b5 a0		lda $a0,x			lda 	esInt1,x
.2b4b	85 2b		sta $2b				sta 	temp0+1
.2b4d	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/misc/poke.asm

.2b4e					Command_Poke:
.2b4e	a9 01		lda #$01			lda 	#1
.2b50	d0 06		bne $2b58			bne 	PokeGeneral
.2b52					Command_Doke:
.2b52	a9 02		lda #$02			lda 	#2
.2b54	d0 02		bne $2b58			bne 	PokeGeneral
.2b56					Command_Loke:
.2b56	a9 03		lda #$03			lda 	#3
.2b58					PokeGeneral:
.2b58	48		pha				pha 								; save id (PDL = 123)
.2b59	20 73 37	jsr $3773			jsr 	EvaluateRootInteger 		; target address
.2b5c	20 8d 3e	jsr $3e8d			jsr	 	CheckComma
.2b5f	e8		inx				inx
.2b60	20 75 37	jsr $3775			jsr 	EvaluateInteger 			; what value to POKE ?
.2b63	ca		dex				dex
.2b64	20 45 2b	jsr $2b45			jsr 	TOSToTemp0 					; temp0 points to the target address
.2b67	84 32		sty $32				sty 	tempShort 					; save Y
.2b69	68		pla				pla 								; get copy type (1-3) and dispatch
.2b6a	aa		tax				tax
.2b6b	ca		dex				dex
.2b6c	f0 14		beq $2b82			beq 	_Poke1
.2b6e	ca		dex				dex
.2b6f	f0 0b		beq $2b7c			beq 	_Poke2
.2b71	a0 03		ldy #$03			ldy 	#3							; put 4 bytes
.2b73	a5 b1		lda $b1				lda 	esInt3+1
.2b75	91 2a		sta ($2a),y			sta 	(temp0),y
.2b77	88		dey				dey
.2b78	a5 a9		lda $a9				lda 	esInt2+1
.2b7a	91 2a		sta ($2a),y			sta 	(temp0),y
.2b7c					_Poke2:
.2b7c	a0 01		ldy #$01			ldy 	#1
.2b7e	a5 a1		lda $a1				lda 	esInt1+1
.2b80	91 2a		sta ($2a),y			sta 	(temp0),y
.2b82					_Poke1:
.2b82	a0 00		ldy #$00			ldy 	#0
.2b84	a5 99		lda $99				lda 	esInt0+1
.2b86	91 2a		sta ($2a),y			sta 	(temp0),y
.2b88	a4 32		ldy $32				ldy 	tempShort 					; restore Y and exit
.2b8a	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/misc/rem.asm

.2b8b					Command_Rem:
.2b8b					Command_Rem2:
.2b8b	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows
.2b8d	c9 85		cmp #$85			cmp 	#TOK_STR 					; if it is a string then skip it.
.2b8f	d0 06		bne $2b97			bne 	_CRNotString
.2b91	c8		iny				iny
.2b92	98		tya				tya
.2b93	38		sec				sec
.2b94	71 28		adc ($28),y			adc 	(codePtr),y 				; get string size, add to Y, +1 for the length
.2b96	a8		tay				tay
.2b97					_CRNotString:
.2b97	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/misc/stopend.asm

.2b98					CommandStop:
.2b98	a2 06		ldx #$06			ldx 	#ErrorID_Stop
.2b9a	20 36 15	jsr $1536		jsr	errorHandler
.2b9d					CommandEnd:
.2b9d	4c f6 3e	jmp $3ef6			jmp 	WarmStart
.2ba0					CommandXemu:
.2ba0	4c ff ff	jmp $ffff			jmp 	$FFFF 						; fudge to crash out of emulator
.2ba3					AdvanceNextLine:
.2ba3	a0 00		ldy #$00			ldy 	#0 							; get offset
.2ba5	b1 28		lda ($28),y			lda 	(codePtr),y
.2ba7	18		clc				clc 								; add to codePtr
.2ba8	65 28		adc $28				adc 	codePtr
.2baa	85 28		sta $28				sta 	codePtr
.2bac	90 02		bcc $2bb0			bcc 	_ANLNoCarry
.2bae	e6 29		inc $29				inc 	codePtr+1
.2bb0					_ANLNoCarry:
.2bb0	b1 28		lda ($28),y			lda 	(codePtr),y 				; if end of program (or was just stand alone.
.2bb2	f0 e9		beq $2b9d			beq 	CommandEnd 					; execute END
.2bb4	a0 03		ldy #$03			ldy 	#3 							; start of tokens on line.
.2bb6	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/for.asm

.2bb7					Command_FOR:
.2bb7	a9 46		lda #$46			lda 	#markerFOR 					; allocate the space and set the marker
.2bb9	a2 0b		ldx #$0b			ldx 	#11
.2bbb	20 a8 3e	jsr $3ea8			jsr 	RSClaim
.2bbe	20 d0 2a	jsr $2ad0			jsr 	CommandLET 					; do the same as LET FOR [a = 4]
.2bc1	a5 90		lda $90				lda 	esType 						; check type should be integer reference.
.2bc3	c9 80		cmp #$80			cmp 	#$80 						; we do not do FOR floats.
.2bc5	d0 4c		bne $2c13			bne 	_CFType
.2bc7	a9 ce		lda #$ce			lda 	#TKW_TO 					; check TO present.
.2bc9	20 75 3e	jsr $3e75			jsr 	CheckToken
.2bcc	a2 01		ldx #$01			ldx 	#1 							; keep the variable address in stack 0
.2bce	20 75 37	jsr $3775			jsr 	EvaluateInteger				; get terminal value in stack 1
.2bd1	98		tya				tya
.2bd2	48		pha				pha
.2bd3	a0 04		ldy #$04			ldy 	#4
.2bd5	a5 98		lda $98				lda		esInt0 						; copy the address of the index variable into 4 and 5
.2bd7	91 37		sta ($37),y			sta 	(rsPointer),y
.2bd9	c8		iny				iny
.2bda	a5 a0		lda $a0				lda		esInt1
.2bdc	91 37		sta ($37),y			sta 	(rsPointer),y
.2bde	c8		iny				iny
.2bdf	a9 01		lda #$01			lda 	#1  						; the default step in 6, (-128 .. 127 only)
.2be1	91 37		sta ($37),y			sta 	(rsPointer),y
.2be3	c8		iny				iny
.2be4	a5 99		lda $99				lda		esInt0+1 					; terminal value in 7 to 11.
.2be6	91 37		sta ($37),y			sta 	(rsPointer),y
.2be8	c8		iny				iny
.2be9	a5 a1		lda $a1				lda		esInt1+1
.2beb	91 37		sta ($37),y			sta 	(rsPointer),y
.2bed	c8		iny				iny
.2bee	a5 a9		lda $a9				lda		esInt2+1
.2bf0	91 37		sta ($37),y			sta 	(rsPointer),y
.2bf2	c8		iny				iny
.2bf3	a5 b1		lda $b1				lda		esInt3+1
.2bf5	91 37		sta ($37),y			sta 	(rsPointer),y
.2bf7	68		pla				pla
.2bf8	a8		tay				tay
.2bf9	b1 28		lda ($28),y			lda 	(codePtr),y 				; followed by STEP.
.2bfb	c9 cf		cmp #$cf			cmp 	#TKW_STEP
.2bfd	d0 0e		bne $2c0d			bne 	_CFDone
.2bff	c8		iny				iny									; skip over step.
.2c00	20 75 37	jsr $3775			jsr 	EvaluateInteger 			; get step
.2c03	98		tya				tya
.2c04	48		pha				pha
.2c05	b5 98		lda $98,x			lda 	esInt0,x 					; copy it into step (bit lazy here)
.2c07	a0 06		ldy #$06			ldy 	#6
.2c09	91 37		sta ($37),y			sta 	(rsPointer),y
.2c0b	68		pla				pla
.2c0c	a8		tay				tay
.2c0d					_CFDone:
.2c0d	a9 01		lda #$01			lda 	#1
.2c0f	20 d4 3e	jsr $3ed4			jsr 	RSSavePosition 				; save position.
.2c12	60		rts				rts
.2c13					_CFType:
.2c13	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.2c15	20 36 15	jsr $1536		jsr	errorHandler
.2c18					Command_NEXT:
.2c18	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.2c1a	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.2c1c	c9 46		cmp #$46			cmp 	#markerFOR 						; does it match
.2c1e	f0 05		beq $2c25			beq 	_isok
.2c20	a2 10		ldx #$10			ldx 	#ErrorID_nextErr
.2c22	20 36 15	jsr $1536		jsr	errorHandler
.2c25					_isok:
.2c25	b1 28		lda ($28),y			lda 	(codePtr),y 				; is it NEXT <index>
.2c27	c9 40		cmp #$40			cmp 	#$40 						; e.g. a variable follows 00-3F
.2c29	b0 18		bcs $2c43			bcs 	_CNNoIndex
.2c2b	a2 00		ldx #$00			ldx 	#0 							; start on stack
.2c2d	20 ae 37	jsr $37ae			jsr 	EvaluateReference 			; this is the variable/parameter to localise.
.2c30	98		tya				tya
.2c31	48		pha				pha
.2c32	a0 04		ldy #$04			ldy 	#4 							; check same variable as that stored at +4,+5
.2c34	b1 37		lda ($37),y			lda 	(rsPointer),y
.2c36	d5 98		cmp $98,x			cmp 	esInt0,x
.2c38	d0 76		bne $2cb0			bne 	_CNBadIndex
.2c3a	c8		iny				iny
.2c3b	b1 37		lda ($37),y			lda 	(rsPointer),y
.2c3d	d5 a0		cmp $a0,x			cmp 	esInt1,x
.2c3f	d0 6f		bne $2cb0			bne 	_CNBadIndex
.2c41	68		pla				pla
.2c42	a8		tay				tay
.2c43					_CNNoIndex:
.2c43	98		tya				tya
.2c44	48		pha				pha
.2c45	a0 04		ldy #$04			ldy 	#4 							; make temp0 point to the index
.2c47	b1 37		lda ($37),y			lda 	(rsPointer),y
.2c49	85 2a		sta $2a				sta 	temp0
.2c4b	c8		iny				iny
.2c4c	b1 37		lda ($37),y			lda 	(rsPointer),y
.2c4e	85 2b		sta $2b				sta 	temp0+1
.2c50	c8		iny				iny
.2c51	a2 00		ldx #$00			ldx 	#0 							; X is the sign extend part of the step.
.2c53	b1 37		lda ($37),y			lda 	(rsPointer),y 				; get the step.
.2c55	85 2f		sta $2f				sta 	temp2+1 					; save for later.
.2c57	10 01		bpl $2c5a			bpl 	_CNSignX
.2c59	ca		dex				dex  								; X = $FF
.2c5a					_CNSignX:
.2c5a	18		clc				clc 								; add to the LSB
.2c5b	a0 00		ldy #$00			ldy 	#0
.2c5d	71 2a		adc ($2a),y			adc 	(temp0),y
.2c5f	91 2a		sta ($2a),y			sta 	(temp0),y
.2c61					_CNPropogate:
.2c61	c8		iny				iny  								; add the sign extended in X to the rest.
.2c62	8a		txa				txa
.2c63	71 2a		adc ($2a),y			adc 	(temp0),y
.2c65	91 2a		sta ($2a),y			sta 	(temp0),y
.2c67	c8		iny				iny
.2c68	8a		txa				txa
.2c69	71 2a		adc ($2a),y			adc 	(temp0),y
.2c6b	91 2a		sta ($2a),y			sta 	(temp0),y
.2c6d	c8		iny				iny
.2c6e	8a		txa				txa
.2c6f	71 2a		adc ($2a),y			adc 	(temp0),y
.2c71	91 2a		sta ($2a),y			sta 	(temp0),y
.2c73	18		clc				clc 								; point temp1 to the terminal value stored in the stack.
.2c74	a5 37		lda $37				lda 	rsPointer
.2c76	69 07		adc #$07			adc 	#7
.2c78	85 2c		sta $2c				sta 	temp1
.2c7a	a9 00		lda #$00			lda 	#0
.2c7c	85 2e		sta $2e				sta 	temp2 						; clear temp2, which is the OR of all the subtractions.
.2c7e	a8		tay				tay 								; and clear the Y register again.
.2c7f	65 38		adc $38				adc 	rsPointer+1
.2c81	85 2d		sta $2d				sta 	temp1+1
.2c83	38		sec				sec 								; calculate current - limit oring interim values.
.2c84	20 bc 2c	jsr $2cbc			jsr 	_CNCompare 					; each of these does a byte.
.2c87	20 bc 2c	jsr $2cbc			jsr 	_CNCompare 					; we calculate the OR of all these subtractions.
.2c8a	20 bc 2c	jsr $2cbc			jsr 	_CNCompare 					; and the carry of the subtraction.
.2c8d	20 bc 2c	jsr $2cbc			jsr 	_CNCompare
.2c90	50 02		bvc $2c94			bvc 	_CNNoOverflow 				; converts to a signed comparison on the sign bit.
.2c92	49 80		eor #$80			eor 	#$80
.2c94					_CNNoOverflow:
.2c94	a4 2f		ldy $2f				ldy 	temp2+1						; get step back
.2c96	30 1d		bmi $2cb5			bmi 	_CNCheckDownto
.2c98	c9 00		cmp #$00			cmp 	#0
.2c9a	30 0c		bmi $2ca8			bmi 	_CNLoopRound 				; loop round if < =
.2c9c	a5 2e		lda $2e				lda 	temp2
.2c9e	f0 08		beq $2ca8			beq 	_CNLoopRound
.2ca0					_CNLoopExit:
.2ca0	68		pla				pla
.2ca1	a8		tay				tay
.2ca2	a9 0b		lda #$0b			lda 	#11
.2ca4	20 ca 3e	jsr $3eca			jsr 	RSFree
.2ca7	60		rts				rts
.2ca8					_CNLoopRound:
.2ca8	68		pla				pla
.2ca9	a8		tay				tay
.2caa	a9 01		lda #$01			lda 	#1
.2cac	20 e7 3e	jsr $3ee7			jsr 	RSLoadPosition				; go back to the loop top
.2caf	60		rts				rts
.2cb0					_CNBadIndex:
.2cb0	a2 13		ldx #$13			ldx 	#ErrorID_BadIndex
.2cb2	20 36 15	jsr $1536		jsr	errorHandler
.2cb5					_CNCheckDownto:
.2cb5	c9 00		cmp #$00			cmp 	#0
.2cb7	10 ef		bpl $2ca8			bpl 	_CNLoopRound
.2cb9	4c a0 2c	jmp $2ca0			jmp 	_CNLoopExit
.2cbc					_CNCompare:
.2cbc	b1 2a		lda ($2a),y			lda 	(temp0),y 					; do the subtraction - compare don't care about answer
.2cbe	f1 2c		sbc ($2c),y			sbc 	(temp1),y
.2cc0	05 2e		ora $2e				ora 	temp2 						; Or into temp2 (does not affect carry)
.2cc2	85 2e		sta $2e				sta 	temp2
.2cc4	c8		iny				iny
.2cc5	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/if.asm

.2cc6					CommandIf:
.2cc6	20 73 37	jsr $3773			jsr 	EvaluateRootInteger 		; get what's being tested.
.2cc9	b1 28		lda ($28),y			lda 	(codePtr),y 				; check for IF .. THEN or IF .. GOTO which are single lines.
.2ccb	c9 91		cmp #$91			cmp 	#TKW_GOTO
.2ccd	f0 04		beq $2cd3			beq 	_IfSimple
.2ccf	c9 a1		cmp #$a1			cmp 	#TKW_THEN
.2cd1	d0 1b		bne $2cee			bne 	_IfComplex
.2cd3					_IfSimple:
.2cd3	20 34 3e	jsr $3e34			jsr 	MInt32Zero					; check if TOS zero
.2cd6	f0 10		beq $2ce8			beq 	_IfEOL 						; go to next line.
.2cd8	b1 28		lda ($28),y			lda 	(codePtr),y 				; get and skip token.
.2cda	c8		iny				iny
.2cdb	c9 91		cmp #$91			cmp 	#TKW_GOTO 					; was it if GOTO ?
.2cdd	f0 0c		beq $2ceb			beq 	_IfGoto 					; do the Goto code
.2cdf	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows the THEN ?
.2ce1	29 c0		and #$c0			and 	#$C0 						; check $40-$7F
.2ce3	c9 40		cmp #$40			cmp 	#$40 						; e.g. number IF x = 0 THEN 170
.2ce5	f0 04		beq $2ceb			beq 	_IfGoto
.2ce7	60		rts				rts 								; else continue on this line.
.2ce8					_IfEOL:
.2ce8	4c a3 2b	jmp $2ba3			jmp 	AdvanceNextLine 			; go to next line
.2ceb					_IfGoto:
.2ceb	4c da 28	jmp $28da			jmp 	CommandGoto
.2cee					_IfComplex:
.2cee	20 34 3e	jsr $3e34			jsr 	MInt32Zero 					; is it true ?
.2cf1	f0 01		beq $2cf4			beq 	_IFSkip 					; if non-zero then skip to ELSE/ENDIF
.2cf3	60		rts				rts 								; else continue.
.2cf4					_IFSkip:
.2cf4	a9 d6		lda #$d6			lda	 	#TKW_ELSE 					; test failed, go to ELSE or ENDIF whichever comes first.
.2cf6	a2 a2		ldx #$a2			ldx 	#TKW_ENDIF
.2cf8	4c 90 2f	jmp $2f90			jmp		ScanForward
.2cfb					Command_ELSE:
.2cfb	a2 a2		ldx #$a2			ldx 	#TKW_ENDIF
.2cfd	8a		txa				txa
.2cfe	4c 90 2f	jmp $2f90			jmp		ScanForward
.2d01					Command_ENDIF:
.2d01	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/local.asm

.0d59					storeSize:
>0d59							.fill 	1
.2d02					CommandLocal:
.2d02	a2 00		ldx #$00			ldx 	#0
.2d04	20 20 2d	jsr $2d20			jsr 	LocaliseVariable 			; localise one.
.2d07					_CLCheckNext:
.2d07	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows ?
.2d09	c8		iny				iny
.2d0a	c9 8d		cmp #$8d			cmp 	#TKW_EQUAL 					; something local "x = 2" ?
.2d0c	f0 06		beq $2d14			beq 	_CLAssignment
.2d0e	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; comma try again.
.2d10	f0 f0		beq $2d02			beq 	CommandLocal
.2d12	88		dey				dey
.2d13	60		rts				rts
.2d14					_CLAssignment:
.2d14	a2 01		ldx #$01			ldx 	#1
.2d16	20 56 37	jsr $3756			jsr 	Evaluate 					; evaluate RHS
.2d19	ca		dex				dex
.2d1a	20 e3 2a	jsr $2ae3			jsr 	WriteValue
.2d1d	4c 07 2d	jmp $2d07			jmp 	_CLCheckNext
.2d20					LocaliseVariable:
.2d20	b1 28		lda ($28),y			lda 	(codePtr),y 				; check it's a variable.
.2d22	c9 40		cmp #$40			cmp 	#$40
.2d24	b0 67		bcs $2d8d			bcs 	_LVSyntax
.2d26	8a		txa				txa 								; get the address of that variable.
.2d27	a2 02		ldx #$02		ldx	#2
.2d29	20 49 4e	jsr $4e49		jsr	variableHandler
.2d2c	aa		tax				tax
.2d2d	8a		txa				txa
.2d2e	48		pha				pha
.2d2f	98		tya				tya
.2d30	48		pha				pha
.2d31	20 45 2b	jsr $2b45			jsr 	TOSToTemp0 					; the address of the variable is now in temp0.
.2d34	b5 90		lda $90,x			lda 	esType,x 					; get the type
.2d36	0a		asl a				asl 	a
.2d37	10 16		bpl $2d4f			bpl 	_LVPushNumber
.2d39	a0 00		ldy #$00			ldy 	#0 							; put address of data in temp1
.2d3b	b1 2a		lda ($2a),y			lda 	(temp0),y
.2d3d	c8		iny				iny
.2d3e	85 2c		sta $2c				sta 	temp1
.2d40	b1 2a		lda ($2a),y			lda 	(temp0),y
.2d42	85 2d		sta $2d				sta 	temp1+1
.2d44	a0 00		ldy #$00			ldy 	#0 	 						; get length
.2d46	b1 2c		lda ($2c),y			lda 	(temp1),y
.2d48	aa		tax				tax 								; into X
.2d49	e8		inx				inx 								; +1 for length.
.2d4a	a9 24		lda #$24			lda 	#markerString
.2d4c	4c 64 2d	jmp $2d64			jmp 	_LVWriteFrame
.2d4f					_LVPushNumber:
.2d4f	a5 2a		lda $2a				lda 	temp0 						; storage address and data source are the same
.2d51	85 2c		sta $2c				sta 	temp1
.2d53	a5 2b		lda $2b				lda 	temp0+1
.2d55	85 2d		sta $2d				sta 	temp1+1
.2d57	b5 90		lda $90,x			lda 	esType,x 					; put float flag into carry.
.2d59	4a		lsr a				lsr 	a
.2d5a	a9 25		lda #$25			lda 	#markerInt 					; get marker and size.
.2d5c	a2 04		ldx #$04			ldx 	#VarISize
.2d5e	90 04		bcc $2d64			bcc 	_LVIsInteger
.2d60	a9 23		lda #$23			lda 	#markerFloat
.2d62	a2 06		ldx #$06			ldx 	#VarFSize
.2d64					_LVIsInteger:
.2d64					_LVWriteFrame:
.2d64	8e 59 0d	stx $0d59			stx 	storeSize 					; number of bytes to copy from (temp0)
.2d67	e8		inx				inx 								; allocate 3 bytes, 2 for the address, 1 for the marker.
.2d68	e8		inx				inx
.2d69	e8		inx				inx
.2d6a	20 a8 3e	jsr $3ea8			jsr 	RSClaim 					; create the stack frame.
.2d6d	a5 2a		lda $2a				lda 	temp0 						; copy the target address to slots 1 & 2
.2d6f	a0 01		ldy #$01			ldy 	#1
.2d71	91 37		sta ($37),y			sta 	(rsPointer),y
.2d73	c8		iny				iny
.2d74	a5 2b		lda $2b				lda 	temp0+1
.2d76	91 37		sta ($37),y			sta 	(rsPointer),y
.2d78	a0 00		ldy #$00			ldy 	#0
.2d7a					_LVCopyData:
.2d7a	b1 2c		lda ($2c),y			lda 	(temp1),y 					; get data from source, temp1
.2d7c	c8		iny				iny 								; write allowing for the header bit.
.2d7d	c8		iny				iny
.2d7e	c8		iny				iny
.2d7f	91 37		sta ($37),y			sta 	(rsPointer),y
.2d81	88		dey				dey
.2d82	88		dey				dey
.2d83	ce 59 0d	dec $0d59			dec 	storeSize 					; do it storesize times
.2d86	d0 f2		bne $2d7a			bne 	_LVCopyData
.2d88	68		pla				pla
.2d89	a8		tay				tay
.2d8a	68		pla				pla
.2d8b	aa		tax				tax
.2d8c	60		rts				rts
.2d8d					_LVSyntax:
.2d8d	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.2d8f	20 36 15	jsr $1536		jsr	errorHandler
.2d92					RestoreLocals:
.2d92	a2 00		ldx #$00			ldx 	#0
.2d94	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.2d96	c9 40		cmp #$40			cmp	 	#64
.2d98	90 01		bcc $2d9b			bcc 	_RLocal
.2d9a	60		rts				rts
.2d9b					_RLocal:
.2d9b	8a		txa				txa
.2d9c	48		pha				pha
.2d9d	98		tya				tya
.2d9e	48		pha				pha
.2d9f	a0 01		ldy #$01			ldy 	#1 							; copy target address to temp0
.2da1	b1 37		lda ($37),y			lda 	(rsPointer),y
.2da3	85 2a		sta $2a				sta 	temp0
.2da5	c8		iny				iny
.2da6	b1 37		lda ($37),y			lda 	(rsPointer),y
.2da8	85 2b		sta $2b				sta 	temp0+1
.2daa	a0 00		ldy #$00			ldy 	#0 							; get type back.
.2dac	b1 37		lda ($37),y			lda 	(rsPointer),y
.2dae	c9 24		cmp #$24			cmp 	#markerString 				; string is ... different :)
.2db0	f0 28		beq $2dda			beq 	_RString
.2db2	a2 04		ldx #$04			ldx		#VARISize 					; size integer
.2db4	c9 25		cmp #$25			cmp 	#markerInt
.2db6	f0 02		beq $2dba			beq 	_RIsInteger
.2db8	a2 06		ldx #$06			ldx 	#VARFSize 					; size float
.2dba					_RIsInteger:
.2dba	8a		txa				txa
.2dbb	48		pha				pha
.2dbc	a0 03		ldy #$03			ldy 	#3							; start size to copy back from pointer.
.2dbe					_RCopyBack:
.2dbe	b1 37		lda ($37),y			lda 	(rsPointer),y
.2dc0	88		dey				dey
.2dc1	88		dey				dey
.2dc2	88		dey				dey
.2dc3	91 2a		sta ($2a),y			sta 	(temp0),y
.2dc5	c8		iny				iny
.2dc6	c8		iny				iny
.2dc7	c8		iny				iny
.2dc8	c8		iny				iny
.2dc9	ca		dex				dex
.2dca	d0 f2		bne $2dbe			bne 	_RCopyBack
.2dcc	68		pla				pla 								; get size add 3
.2dcd	18		clc				clc
.2dce	69 03		adc #$03			adc 	#3 							; (2 for address one for marker)
.2dd0					_RRestoreAAndLoop:
.2dd0	20 ca 3e	jsr $3eca			jsr 	RSFree
.2dd3	68		pla				pla
.2dd4	a8		tay				tay
.2dd5	68		pla				pla
.2dd6	aa		tax				tax
.2dd7	4c 92 2d	jmp $2d92			jmp 	RestoreLocals 				; go see if there are any more locals.
.2dda					_RString:
.2dda	a2 00		ldx #$00			ldx 	#0
.2ddc	a0 01		ldy #$01			ldy 	#1 							; set up for a string write.
.2dde	b1 37		lda ($37),y			lda 	(rsPointer),y
.2de0	95 98		sta $98,x			sta 	esInt0,x
.2de2	c8		iny				iny
.2de3	b1 37		lda ($37),y			lda 	(rsPointer),y
.2de5	95 a0		sta $a0,x			sta 	esInt1,x
.2de7	18		clc				clc
.2de8	a5 37		lda $37				lda 	rsPointer
.2dea	69 03		adc #$03			adc 	#3
.2dec	95 99		sta $99,x			sta 	esInt0+1,x
.2dee	a5 38		lda $38				lda 	rsPointer+1
.2df0	69 00		adc #$00			adc 	#0
.2df2	95 a1		sta $a1,x			sta 	esInt1+1,x
.2df4	8a		txa				txa
.2df5	a2 10		ldx #$10		ldx	#16
.2df7	20 c6 41	jsr $41c6		jsr	stringHandler
.2dfa	a0 03		ldy #$03			ldy 	#3 							; get string length
.2dfc	b1 37		lda ($37),y			lda 	(rsPointer),y
.2dfe	18		clc				clc
.2dff	69 04		adc #$04			adc 	#4 							; add 4 (pointer, marker, length) to restore.
.2e01	4c d0 2d	jmp $2dd0			jmp 	_RRestoreAAndLoop

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/proc.asm

.0d5a					paramCount:
>0d5a							.fill 	1
.2e04					CallProc:
.2e04	20 8c 2e	jsr $2e8c			jsr 	FindProcedure 				; find procedure, put in temp0. A contains name length.
.2e07	48		pha				pha 								; save length on stack
.2e08	85 32		sta $32				sta 	tempShort 					; save length in tempShort
.2e0a	a5 2b		lda $2b				lda 	temp0+1 					; save procedure target on stack.
.2e0c	48		pha				pha
.2e0d	a5 2a		lda $2a				lda 	temp0
.2e0f	48		pha				pha
.2e10	98		tya				tya 								; calculate Y + length
.2e11	18		clc				clc
.2e12	65 32		adc $32				adc 	tempShort
.2e14	a8		tay				tay
.2e15	a2 00		ldx #$00			ldx 	#0 							; where the first parameter goes - 1
.2e17					_CallProcEvalParams:
.2e17	e8		inx				inx
.2e18	b1 28		lda ($28),y			lda 	(codePtr),y 				; do we have ) , e.g. the end of the parameters ?
.2e1a	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.2e1c	f0 0b		beq $2e29			beq 	_CPDoneParams
.2e1e	20 56 37	jsr $3756			jsr 	Evaluate 					; evaluate a parameter
.2e21	b1 28		lda ($28),y			lda 	(codePtr),Y 				; get what's next, preconsume
.2e23	c8		iny				iny
.2e24	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; if comma, go get another parameter
.2e26	f0 ef		beq $2e17			beq 	_CallProcEvalParams
.2e28	88		dey				dey 								; undo consumption.
.2e29					_CPDoneParams:
.2e29	20 80 3e	jsr $3e80			jsr 	CheckRightParen 			; check closing parenthesis.
.2e2c	8e 5a 0d	stx $0d5a			stx 	paramCount 					; store parameter count+1
.2e2f	a2 04		ldx #$04			ldx 	#4							; make space on stack
.2e31	a9 50		lda #$50			lda 	#markerPROC
.2e33	20 a8 3e	jsr $3ea8			jsr 	RSClaim
.2e36	a9 01		lda #$01			lda 	#1 							; store return address.
.2e38	20 d4 3e	jsr $3ed4			jsr 	RSSavePosition
.2e3b	68		pla				pla 								; get the new code Ptr
.2e3c	85 28		sta $28				sta 	codePtr
.2e3e	68		pla				pla
.2e3f	85 29		sta $29				sta 	codePtr+1
.2e41	68		pla				pla 								; length of name + 4 is the param start.
.2e42	18		clc				clc
.2e43	69 04		adc #$04			adc 	#4
.2e45	a8		tay				tay
.2e46	a2 ff		ldx #$ff			ldx 	#$FF
.2e48					_CPLoadParameters:
.2e48	e8		inx				inx 								; point to where the address should be loaded.
.2e49	ec 5a 0d	cpx $0d5a			cpx 	paramCount 					; too many parameters in definition ?
.2e4c	f0 1e		beq $2e6c			beq 	_CPParamError
.2e4e	b1 28		lda ($28),y			lda 	(codePtr),y					; what follows
.2e50	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN 				; is it the right bracket
.2e52	f0 0e		beq $2e62			beq 	_CPParamComplete 			; done all the parameters, perhaps.
.2e54	20 20 2d	jsr $2d20			jsr 	LocaliseVariable 			; make following variable local, ref in tos,x
.2e57	20 e3 2a	jsr $2ae3			jsr 	WriteValue 					; copy the evaluated parameter into there.
.2e5a	b1 28		lda ($28),y			lda 	(codePtr),y 				; followed by a comma ?
.2e5c	c8		iny				iny
.2e5d	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.2e5f	f0 e7		beq $2e48			beq 	_CPLoadParameters
.2e61	88		dey				dey 								; no, unconsume and check for )
.2e62					_CPParamComplete:
.2e62	20 80 3e	jsr $3e80			jsr 	CheckRightParen 			; check )
.2e65	e8		inx				inx 								; check right number of parameters have been consumed
.2e66	ec 5a 0d	cpx $0d5a			cpx 	paramCount
.2e69	d0 01		bne $2e6c			bne 	_CPParamError
.2e6b	60		rts				rts
.2e6c					_CPParamError:
.2e6c	a2 18		ldx #$18			ldx 	#ErrorID_Params
.2e6e	20 36 15	jsr $1536		jsr	errorHandler
.2e71					ReturnProc:
.2e71	20 92 2d	jsr $2d92			jsr 	RestoreLocals 				; get the locals back.
.2e74	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.2e76	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.2e78	c9 50		cmp #$50			cmp 	#markerPROC 						; does it match
.2e7a	f0 05		beq $2e81			beq 	_isok
.2e7c	a2 12		ldx #$12			ldx 	#ErrorID_endProcErr
.2e7e	20 36 15	jsr $1536		jsr	errorHandler
.2e81					_isok:
.2e81	a9 01		lda #$01			lda 	#1
.2e83	20 e7 3e	jsr $3ee7			jsr 	RSLoadPosition 				; reload the position from offset 1.
.2e86	a9 04		lda #$04			lda 	#4 							; throw 4 bytes from stack.
.2e88	20 ca 3e	jsr $3eca			jsr 	RSFree
.2e8b	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/proctable.asm

.0d5b					procList:
>0d5b							.fill 	2		 					; terminated by name high being zero.
.0d5d					yInLine:
>0d5d							.fill 	1
.2e8c					FindProcedure:
.2e8c	8c 5d 0d	sty $0d5d			sty 	yInLine 					; save current position.
.2e8f	20 4a 2f	jsr $2f4a			jsr 	CalculateProcedureHash		; calculate the hash of the procedure.
.2e92	85 2c		sta $2c				sta 	temp1
.2e94	ad 5b 0d	lda $0d5b			lda		procList 					; put procList address in temp2
.2e97	85 2e		sta $2e				sta 	temp2
.2e99	ad 5c 0d	lda $0d5c			lda 	procList+1
.2e9c	85 2f		sta $2f				sta 	temp2+1
.2e9e	a0 00		ldy #$00			ldy 	#0 							; position in this table.
.2ea0					_FPLoop:
.2ea0	b1 2e		lda ($2e),y			lda 	(temp2),y
.2ea2	f0 4f		beq $2ef3			beq 	_FPError 					; if so, we don't know this procedure.
.2ea4	85 2b		sta $2b				sta 	temp0+1 					; copy MSB/LSB to temp0 as we go.
.2ea6	c8		iny				iny
.2ea7	b1 2e		lda ($2e),y			lda 	(temp2),y
.2ea9	85 2a		sta $2a				sta 	temp0
.2eab	c8		iny				iny
.2eac	b1 2e		lda ($2e),y			lda 	(temp2),y					; check the procedure hash.
.2eae	c5 2c		cmp $2c				cmp 	temp1
.2eb0	d0 2b		bne $2edd			bne 	_FPNext 					; hash is different, go to next.
.2eb2	38		sec				sec
.2eb3	ad 5d 0d	lda $0d5d			lda 	yInLine 					; position in line must be at least 4
.2eb6	e9 04		sbc #$04			sbc 	#4
.2eb8	18		clc				clc
.2eb9	65 28		adc $28				adc 	codePtr
.2ebb	85 30		sta $30				sta 	temp3
.2ebd	a5 29		lda $29				lda 	codePtr+1
.2ebf	69 00		adc #$00			adc 	#0
.2ec1	85 31		sta $31				sta 	temp3+1
.2ec3	98		tya				tya
.2ec4	48		pha				pha
.2ec5	a0 04		ldy #$04			ldy 	#4
.2ec7					_FPCName:
.2ec7	b1 30		lda ($30),y			lda 	(temp3),y 					; check the same
.2ec9	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.2ecb	d0 0e		bne $2edb			bne 	_FPpulYNext 				; if different go to next one.
.2ecd	c8		iny				iny
.2ece	c9 3a		cmp #$3a			cmp 	#$3A
.2ed0	90 f5		bcc $2ec7			bcc 	_FPCName 					; compare the whole lot....
.2ed2	68		pla				pla 								; throw away the saved Y
.2ed3	98		tya				tya 								; length of name is Y-4
.2ed4	38		sec				sec
.2ed5	e9 04		sbc #$04			sbc 	#4
.2ed7	ac 5d 0d	ldy $0d5d			ldy 	yInLine  					; get the original Y back
.2eda	60		rts				rts
.2edb					_FPpulYNext:
.2edb	68		pla				pla
.2edc	a8		tay				tay
.2edd					_FPNext:
.2edd	c8		iny				iny 								; next procedure record.
.2ede	10 c0		bpl $2ea0			bpl 	_FPLoop 					; if done 128 already ... e.g. Y -ve
.2ee0	98		tya				tya 								; subtract 128 from Y
.2ee1	38		sec				sec
.2ee2	e9 80		sbc #$80			sbc 	#128
.2ee4	a8		tay				tay
.2ee5	18		clc				clc 								; add 128 to temp2, so we can have more than
.2ee6	a5 2e		lda $2e				lda 	temp2 						; 255/3 = 85 procedures
.2ee8	69 80		adc #$80			adc 	#128
.2eea	85 2e		sta $2e				sta 	temp2
.2eec	90 b2		bcc $2ea0			bcc 	_FPLoop
.2eee	e6 2f		inc $2f				inc 	temp2+1
.2ef0	4c a0 2e	jmp $2ea0			jmp 	_FPLoop
.2ef3					_FPError:
.2ef3	a2 17		ldx #$17			ldx 	#ErrorID_NoProc
.2ef5	20 36 15	jsr $1536		jsr	errorHandler
.2ef8					ScanProc:
.2ef8	98		tya				tya
.2ef9	48		pha				pha
.2efa	a5 35		lda $35				lda 	lowMemory 					; copy the start of the procList, at low memory
.2efc	8d 5b 0d	sta $0d5b			sta 	procList
.2eff	a5 36		lda $36				lda 	lowMemory+1
.2f01	8d 5c 0d	sta $0d5c			sta 	procList+1
.2f04	20 97 32	jsr $3297			jsr 	ResetCodeAddress 			; back to the start.
.2f07					_ScanLoop:
.2f07	a0 00		ldy #$00			ldy 	#0 							; check reached program end
.2f09	b1 28		lda ($28),y			lda 	(codePtr),y
.2f0b	f0 2a		beq $2f37			beq 	_ScanExit
.2f0d	a0 03		ldy #$03			ldy 	#3							; get first token
.2f0f	b1 28		lda ($28),y			lda 	(codePtr),y
.2f11	c9 9d		cmp #$9d			cmp 	#TKW_DEFPROC				; skip to next if not DEFPROC
.2f13	d0 12		bne $2f27			bne 	_ScanNext
.2f15	a5 29		lda $29				lda 	codePtr+1 					; write high and low address of this line.
.2f17	20 3f 2f	jsr $2f3f			jsr 	_ScanWrite
.2f1a	a5 28		lda $28				lda 	codePtr
.2f1c	20 3f 2f	jsr $2f3f			jsr 	_ScanWrite
.2f1f	a0 04		ldy #$04			ldy 	#4 							; start of name part
.2f21	20 4a 2f	jsr $2f4a			jsr 	CalculateProcedureHash 		; calculate procedure hash
.2f24	20 3f 2f	jsr $2f3f			jsr 	_ScanWrite					; and write that
.2f27					_ScanNext:
.2f27	18		clc				clc
.2f28	a0 00		ldy #$00			ldy 	#0
.2f2a	b1 28		lda ($28),y			lda 	(codePtr),y
.2f2c	65 28		adc $28				adc 	codePtr
.2f2e	85 28		sta $28				sta 	codePtr
.2f30	90 d5		bcc $2f07			bcc 	_ScanLoop
.2f32	e6 29		inc $29				inc 	codePtr+1
.2f34	4c 07 2f	jmp $2f07			jmp 	_ScanLoop
.2f37					_ScanExit:
.2f37	a9 00		lda #$00			lda 	#0 							; write ending zero.
.2f39	20 3f 2f	jsr $2f3f			jsr 	_ScanWrite
.2f3c	68		pla				pla
.2f3d	a8		tay				tay
.2f3e	60		rts				rts
.2f3f					_ScanWrite:
.2f3f	a0 00		ldy #$00			ldy 	#0
.2f41	91 35		sta ($35),y			sta 	(lowMemory),y
.2f43	e6 35		inc $35				inc 	lowMemory
.2f45	d0 02		bne $2f49			bne 	_SWNoCarry
.2f47	e6 36		inc $36				inc 	lowMemory+1
.2f49					_SWNoCarry:
.2f49	60		rts				rts
.2f4a					CalculateProcedureHash:
.2f4a	a9 00		lda #$00			lda 	#0 							; clear hash.
.2f4c	85 2a		sta $2a				sta 	temp0
.2f4e					_CPHLoop:
.2f4e	18		clc				clc 								; add character and rotate and add carry back in
.2f4f	b1 28		lda ($28),y			lda 	(codePtr),y
.2f51	65 2a		adc $2a				adc 	temp0
.2f53	6a		ror a				ror 	a
.2f54	69 0d		adc #$0d			adc 	#13 						; primes usually good for this sort of thing.
.2f56	85 2a		sta $2a				sta 	temp0 						; (down with this sort of thing)
.2f58	b1 28		lda ($28),y			lda 	(codePtr),y
.2f5a	c8		iny				iny 								; advance incase we go round again.
.2f5b	c9 3a		cmp #$3a			cmp 	#$3A
.2f5d	90 ef		bcc $2f4e			bcc 	_CPHLoop
.2f5f	a5 2a		lda $2a				lda 	temp0
.2f61	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/repeat.asm

.2f62					Command_Repeat:
.2f62	a2 04		ldx #$04			ldx 	#4 							; allocate 4 bytes on stack for REPEAT
.2f64	a9 52		lda #$52			lda 	#markerREPEAT 				; repeat marker allocate 4 bytes
.2f66	20 a8 3e	jsr $3ea8			jsr 	RSClaim
.2f69	a9 01		lda #$01			lda 	#1 							; save position at offset 1.
.2f6b	20 d4 3e	jsr $3ed4			jsr 	RSSavePosition
.2f6e	60		rts				rts
.2f6f					Command_Until:
.2f6f	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.2f71	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.2f73	c9 52		cmp #$52			cmp 	#markerREPEAT 						; does it match
.2f75	f0 05		beq $2f7c			beq 	_isok
.2f77	a2 0f		ldx #$0f			ldx 	#ErrorID_untilErr
.2f79	20 36 15	jsr $1536		jsr	errorHandler
.2f7c					_isok:
.2f7c	20 73 37	jsr $3773			jsr 	EvaluateRootInteger 		; at the bottom.
.2f7f	20 34 3e	jsr $3e34			jsr 	MInt32Zero					; check if TOS zero
.2f82	d0 06		bne $2f8a			bne 	_CUExit
.2f84	a9 01		lda #$01			lda 	#1
.2f86	20 e7 3e	jsr $3ee7			jsr 	RSLoadPosition 				; reload the position from offset 1.
.2f89	60		rts				rts
.2f8a					_CUExit:
.2f8a	a9 04		lda #$04			lda 	#4 							; throw 4 bytes from stack.
.2f8c	20 ca 3e	jsr $3eca			jsr 	RSFree
.2f8f	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/scanner.asm

.2f90					ScanForward:
.2f90	85 2c		sta $2c				sta 	temp1 						; save tokens to search in temp1/temp1+1
.2f92	86 2d		stx $2d				stx 	temp1+1
.2f94	a9 00		lda #$00			lda 	#0 							; temp2 counts structure levels.
.2f96	85 2e		sta $2e				sta 	temp2
.2f98	b1 28		lda ($28),y	_SFLoop:lda 	(codePtr),y 				; look at the next token.
.2f9a	c8		iny				iny
.2f9b	a6 2e		ldx $2e				ldx 	temp2 						; check structure levels are zero.
.2f9d	d0 08		bne $2fa7			bne 	_SFNoCheck 					; if so, check token against entered values.
.2f9f	c5 2c		cmp $2c				cmp 	temp1 						; if either matches, we've reached the token
.2fa1	f0 24		beq $2fc7			beq 	_SFExit 					; at the same strcture depth.
.2fa3	c5 2d		cmp $2d				cmp 	temp1+1
.2fa5	f0 20		beq $2fc7			beq 	_SFExit
.2fa7					_SFNoCheck:
.2fa7	c9 80		cmp #$80			cmp 	#$80 						; if it is 00-7F (variable/number) just skip it.
.2fa9	90 ed		bcc $2f98			bcc 	_SFLoop
.2fab	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; $80-$85 is various specials.
.2fad	90 19		bcc $2fc8			bcc 	_SFSpecials
.2faf	c9 99		cmp #$99			cmp 	#TOK_STRUCTST 				; if < structure start then continue
.2fb1	90 e5		bcc $2f98			bcc 	_SFLoop
.2fb3	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST 				; if >= unary start (after structure) then continue.
.2fb5	b0 e1		bcs $2f98			bcs 	_SFLoop
.2fb7	aa		tax				tax  								; token in X, and look up the adjuster.
.2fb8	bd 91 36	lda $3691,x			lda 	ELBinaryOperatorInfo-TOK_BINARYST,x
.2fbb	38		sec				sec 								; convert to an offset ($FF,$01)
.2fbc	e9 81		sbc #$81			sbc 	#$81
.2fbe	18		clc				clc 								; add to depth
.2fbf	65 2e		adc $2e				adc 	temp2
.2fc1	85 2e		sta $2e				sta 	temp2
.2fc3	10 d3		bpl $2f98			bpl 	_SFLoop 					; +ve okay to continue
.2fc5	30 07		bmi $2fce			bmi 	SFError 					; if gone -ve then we have a nesting error
.2fc7	60		rts		_SFExit:rts
.2fc8					_SFSpecials:
.2fc8	20 d3 2f	jsr $2fd3			jsr 	ScannerSkipSpecial
.2fcb	4c 98 2f	jmp $2f98			jmp 	_SFLoop
.2fce					SFError:
.2fce	a2 14		ldx #$14			ldx 	#ErrorID_Struct
.2fd0	20 36 15	jsr $1536		jsr	errorHandler
.2fd3					ScannerSkipSpecial:
.2fd3	c9 80		cmp #$80			cmp 	#TOK_EOL 					; $80, advance to next line.
.2fd5	f0 10		beq $2fe7			beq 	_SFNextLine
.2fd7	c9 84		cmp #$84			cmp 	#TOK_FPC					; $84, skip embedded float
.2fd9	f0 2b		beq $3006			beq 	_SFFloatSkip
.2fdb	c9 85		cmp #$85			cmp 	#TOK_STR 					; $85, skip string
.2fdd	f0 02		beq $2fe1			beq 	_SFSkipString
.2fdf	c8		iny				iny									; $81,$82,$83 shift, so just advance over the shifted
.2fe0	60		rts				rts 								; token.
.2fe1					_SFSkipString:
.2fe1	98		tya				tya
.2fe2	38		sec				sec
.2fe3	71 28		adc ($28),y			adc 	(codePtr),y
.2fe5	a8		tay				tay
.2fe6	60		rts				rts
.2fe7					_SFNextLine:
.2fe7	a0 00		ldy #$00			ldy 	#0 							; get offset
.2fe9	b1 28		lda ($28),y			lda 	(codePtr),y
.2feb	18		clc				clc 								; add to code pointer.
.2fec	65 28		adc $28				adc 	codePtr
.2fee	85 28		sta $28				sta 	codePtr
.2ff0	90 02		bcc $2ff4			bcc		_SFNLNoCarry
.2ff2	e6 29		inc $29				inc 	codePtr+1
.2ff4					_SFNLNoCarry:
.2ff4	b1 28		lda ($28),y			lda 	(codePtr),y 				; reached the end of the program.
.2ff6	d0 0b		bne $3003			bne		_SFXNL 						; no go round again
.2ff8	a5 2c		lda $2c				lda 	temp1
.2ffa	c9 d9		cmp #$d9			cmp 	#TKW_DATA 					; if searching for Data different error.
.2ffc	d0 d0		bne $2fce			bne 	SFError 					; read uses this to search for data statements
.2ffe	a2 1d		ldx #$1d			ldx 	#ErrorID_DataError
.3000	20 36 15	jsr $1536		jsr	errorHandler
.3003	a0 03		ldy #$03	_SFXNL:	ldy 	#3
.3005	60		rts				rts
.3006					_SFFloatSkip:
.3006	98		tya				tya 								; skip over an embedded float.
.3007	18		clc				clc
.3008	69 05		adc #$05			adc 	#FloatEmbeddedSize
.300a	a8		tay				tay
.300b	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/while.asm

.300c					Command_While:
.300c	a9 57		lda #$57			lda 	#markerWhile 				; gosub marker allocate 4 bytes.
.300e	a2 04		ldx #$04			ldx 	#4
.3010	20 a8 3e	jsr $3ea8			jsr 	RSClaim 					; create on stack.
.3013	88		dey				dey
.3014	a9 01		lda #$01			lda 	#1
.3016	20 d4 3e	jsr $3ed4			jsr 	RSSavePosition 				; save position before the WHILE keyword.
.3019	c8		iny				iny
.301a	20 73 37	jsr $3773			jsr 	EvaluateRootInteger			; get the conditional
.301d	20 34 3e	jsr $3e34			jsr 	MInt32Zero 	 				; if zero, skip forward to the fail code.
.3020	f0 01		beq $3023			beq 	_CWFail
.3022	60		rts				rts
.3023					_CWFail:
.3023	a9 04		lda #$04			lda 	#4
.3025	20 ca 3e	jsr $3eca			jsr 	RSFree 						; close the just opened position.
.3028	a9 9f		lda #$9f			lda 	#TKW_WEND 					; scan forward past WEND.
.302a	aa		tax				tax
.302b	20 90 2f	jsr $2f90			jsr 	ScanForward
.302e	60		rts				rts
.302f					Command_Wend:
.302f	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.3031	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.3033	c9 57		cmp #$57			cmp 	#markerWHILE 						; does it match
.3035	f0 05		beq $303c			beq 	_isok
.3037	a2 11		ldx #$11			ldx 	#ErrorID_wendErr
.3039	20 36 15	jsr $1536		jsr	errorHandler
.303c					_isok:
.303c	a9 01		lda #$01			lda 	#1
.303e	20 e7 3e	jsr $3ee7			jsr 	RSLoadPosition				; go back until true
.3041	a9 04		lda #$04			lda 	#4
.3043	20 ca 3e	jsr $3eca			jsr 	RSFree 						; close the loop
.3046	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/system/clear.asm

.3047					CommandClear:
.3047					XCommandClear:
.3047	98		tya				tya
.3048	48		pha				pha
.3049	ad cc 0a	lda $0acc			lda 	endMemory					; set high memory = end of memory
.304c	85 33		sta $33				sta 	highMemory
.304e	ad cd 0a	lda $0acd			lda 	endMemory+1
.3051	85 34		sta $34				sta 	highMemory+1
.3053	ad c8 0a	lda $0ac8			lda 	basePage 					; work out where the program ends.
.3056	85 2a		sta $2a				sta 	temp0
.3058	ad c9 0a	lda $0ac9			lda 	basePage+1
.305b	85 2b		sta $2b				sta 	temp0+1
.305d					_CCFindEnd:
.305d	a0 00		ldy #$00			ldy 	#0
.305f	b1 2a		lda ($2a),y			lda 	(temp0),y
.3061	f0 0c		beq $306f			beq 	_CCFoundEnd 				; offset zero is end.
.3063	18		clc				clc
.3064	65 2a		adc $2a				adc 	temp0 						; move to next line
.3066	85 2a		sta $2a				sta 	temp0
.3068	90 f3		bcc $305d			bcc 	_CCFindEnd
.306a	e6 2b		inc $2b				inc 	temp0+1
.306c	4c 5d 30	jmp $305d			jmp 	_CCFindEnd
.306f					_CCFoundEnd:
.306f	a5 2a		lda $2a				lda 	temp0 						; put temp0 in lowMemory
.3071	85 35		sta $35				sta 	lowMemory
.3073	a5 2b		lda $2b				lda 	temp0+1
.3075	85 36		sta $36				sta 	lowMemory+1
.3077	18		clc				clc 								; put temp0+1 in endProgram
.3078	a5 2a		lda $2a				lda 	temp0
.307a	69 01		adc #$01			adc 	#1
.307c	8d ca 0a	sta $0aca			sta 	endProgram
.307f	a5 2b		lda $2b				lda 	temp0+1
.3081	69 00		adc #$00			adc 	#0
.3083	8d cb 0a	sta $0acb			sta 	endProgram+1
.3086	18		clc				clc 								; put a bit of space in.
.3087	a5 35		lda $35				lda 	lowMemory
.3089	69 04		adc #$04			adc 	#4
.308b	85 35		sta $35				sta 	lowMemory
.308d	90 02		bcc $3091			bcc 	_CCNoCarry
.308f	e6 36		inc $36				inc 	lowMemory+1
.3091					_CCNoCarry:
.3091	20 9a 3e	jsr $3e9a			jsr 	RSReset 					; reset the return stack.
.3094	a2 06		ldx #$06		ldx	#6
.3096	20 49 4e	jsr $4e49		jsr	variableHandler
.3099	20 f8 2e	jsr $2ef8			jsr 	ScanProc 					; scan for procedures
.309c	20 7d 28	jsr $287d			jsr 	CommandRestore 				; do a restore
.309f	68		pla				pla
.30a0	a8		tay				tay
.30a1	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/system/list.asm

.0d5e					structIndent:
>0d5e							.fill 	1
.30a2					CommandList:
.30a2	a2 00		ldx #$00			ldx		#0 							; set start/end lines in stack 0/1 to 0 and $FFFF
.30a4	8e 5e 0d	stx $0d5e			stx 	structIndent
.30a7	20 0d 3e	jsr $3e0d			jsr 	MInt32False
.30aa	e8		inx				inx
.30ab	20 09 3e	jsr $3e09			jsr 	MInt32True
.30ae	b1 28		lda ($28),y			lda 	(codePtr),y 				; look at first token
.30b0	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; list ,xxxx
.30b2	f0 15		beq $30c9			beq 	_CLEndLine
.30b4	c9 00		cmp #$00			cmp 	#0 							; list ... on its own.
.30b6	30 1b		bmi $30d3			bmi 	_CLDoListing 				; do the whole lot.
.30b8	a2 00		ldx #$00			ldx 	#0 							; get start line at stack:0
.30ba	20 75 37	jsr $3775			jsr 	EvaluateInteger
.30bd	b1 28		lda ($28),y			lda 	(codePtr),y 				; , follows ?
.30bf	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.30c1	f0 06		beq $30c9			beq 	_CLEndLine
.30c3	20 4b 3d	jsr $3d4b			jsr 	MInt32CopyUp 				; copy first to second if just a line number on its
.30c6	4c d3 30	jmp $30d3			jmp 	_CLDoListing 				; own e.g. list 1100
.30c9					_CLEndLine:
.30c9	c8		iny				iny 								; skip comma
.30ca	b1 28		lda ($28),y			lda 	(codePtr),y  				; no number follows, then its list 1000,
.30cc	30 05		bmi $30d3			bmi 	_CLDoListing
.30ce	a2 01		ldx #$01			ldx 	#1 							; get the last line to list
.30d0	20 75 37	jsr $3775			jsr 	EvaluateInteger				; get end
.30d3					_CLDoListing:
.30d3	20 97 32	jsr $3297			jsr 	ResetCodeAddress 			; back to the start.
.30d6					_CLCheckLoop:
.30d6	a2 02		ldx #$02		ldx	#2
.30d8	20 06 15	jsr $1506		jsr	deviceHandler
.30db	a0 00		ldy #$00			ldy 	#0							; check end.
.30dd	b1 28		lda ($28),y			lda 	(codePtr),y
.30df	f0 41		beq $3122			beq 	_CLEnd
.30e1	a2 00		ldx #$00			ldx 	#0 							; compare vs lower.
.30e3	20 25 31	jsr $3125			jsr 	CLCompareLineTOS
.30e6	c9 ff		cmp #$ff			cmp 	#255 						; if < skip
.30e8	f0 28		beq $3112			beq 	_CLNext
.30ea	e8		inx				inx
.30eb	20 25 31	jsr $3125			jsr 	CLCompareLineTOS 			; compare vs higher
.30ee	c9 01		cmp #$01			cmp 	#1
.30f0	f0 20		beq $3112			beq 	_CLNext
.30f2	a9 80		lda #$80			lda 	#$80 						; undo any down indents this line.
.30f4	20 47 31	jsr $3147			jsr 	CLStructureCheck
.30f7	ad 5e 0d	lda $0d5e			lda 	structIndent 				; indent level.
.30fa	10 02		bpl $30fe			bpl 	_CLPositive
.30fc	a9 00		lda #$00			lda 	#0
.30fe					_CLPositive:
.30fe	a2 04		ldx #$04		ldx	#4
.3100	20 6a 4a	jsr $4a6a		jsr	tokeniserHandler
.3103	a9 82		lda #$82			lda 	#$82 						; up indents from this point on.
.3105	20 47 31	jsr $3147			jsr 	CLStructureCheck
.3108	ad 5e 0d	lda $0d5e			lda 	structIndent
.310b	10 05		bpl $3112			bpl 	_CLNext
.310d	a9 00		lda #$00			lda 	#0
.310f	8d 5e 0d	sta $0d5e			sta 	structIndent
.3112					_CLNext:
.3112	a0 00		ldy #$00			ldy 	#0 							; go to next line.
.3114	b1 28		lda ($28),y			lda 	(codePtr),y
.3116	18		clc				clc
.3117	65 28		adc $28				adc 	codePtr
.3119	85 28		sta $28				sta 	codePtr
.311b	90 b9		bcc $30d6			bcc 	_CLCheckLoop
.311d	e6 29		inc $29				inc 	codePtr+1
.311f	4c d6 30	jmp $30d6			jmp 	_CLCheckLoop
.3122					_CLEnd:
.3122	4c f6 3e	jmp $3ef6			jmp 	WarmStart 					; warm start after list.
.3125					CLCompareLineTOS:
.3125	a0 01		ldy #$01			ldy 	#1
.3127	b1 28		lda ($28),y			lda 	(codePtr),y
.3129	55 98		eor $98,x			eor 	esInt0,x
.312b	85 2a		sta $2a				sta 	temp0
.312d	c8		iny				iny
.312e	b1 28		lda ($28),y			lda 	(codePtr),y
.3130	55 a0		eor $a0,x			eor 	esInt1,x
.3132	05 2a		ora $2a				ora 	temp0
.3134	f0 10		beq $3146			beq 	_CLCLTExit
.3136	88		dey				dey
.3137	b1 28		lda ($28),y			lda 	(codePtr),y
.3139	d5 98		cmp $98,x			cmp 	esInt0,x
.313b	c8		iny				iny
.313c	b1 28		lda ($28),y			lda 	(codePtr),y
.313e	f5 a0		sbc $a0,x			sbc 	esInt1,x
.3140	a9 ff		lda #$ff			lda 	#255
.3142	90 02		bcc $3146			bcc 	_CLCLTExit
.3144	a9 01		lda #$01			lda 	#1
.3146					_CLCLTExit:
.3146	60		rts				rts
.3147					CLStructureCheck:
.3147	85 2a		sta $2a				sta 	temp0
.3149	a0 03		ldy #$03			ldy 	#3
.314b					_CLSCLoop:
.314b	b1 28		lda ($28),y			lda 	(codePtr),y 				; get and consume token.
.314d	c8		iny				iny
.314e	c9 80		cmp #$80			cmp 	#$80
.3150	90 f9		bcc $314b			bcc 	_CLSCLoop 					; $00-$7F just step over.
.3152	f0 28		beq $317c			beq		_CLSCExit					; EOL return
.3154	c9 86		cmp #$86			cmp 	#$86 						; special handler
.3156	90 1e		bcc $3176			bcc 	_CLSCSpecial
.3158	c9 99		cmp #$99			cmp 	#TOK_STRUCTST 				; check if structure changer.
.315a	90 ef		bcc $314b			bcc 	_CLSCLoop
.315c	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST
.315e	b0 eb		bcs $314b			bcs 	_CLSCLoop
.3160	aa		tax				tax 								; get adjustment
.3161	bd 91 36	lda $3691,x			lda 	ELBinaryOperatorInfo-TOK_BINARYST,x
.3164	c5 2a		cmp $2a				cmp 	temp0	 					; if what we're searching for
.3166	d0 e3		bne $314b			bne 	_CLSCLoop
.3168	38		sec				sec
.3169	e9 81		sbc #$81			sbc 	#$81 						; convert to offset
.316b	0a		asl a				asl 	a 							; double indent step
.316c	18		clc				clc
.316d	6d 5e 0d	adc $0d5e			adc 	structIndent 				; add to structure indent
.3170	8d 5e 0d	sta $0d5e			sta 	structIndent
.3173	4c 4b 31	jmp $314b			jmp 	_CLSCLoop
.3176					_CLSCSpecial:
.3176	20 d3 2f	jsr $2fd3			jsr 	ScannerSkipSpecial
.3179	4c 4b 31	jmp $314b			jmp 	_CLSCLoop
.317c					_CLSCExit:
.317c	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/system/loadsave.asm

.317d					CommandLoad:
.317d	20 a5 31	jsr $31a5			jsr 	CLSParameters 					; get parameters for load.
.3180	08		php				php
.3181	a2 0e		ldx #$0e		ldx	#14
.3183	20 06 15	jsr $1506		jsr	deviceHandler
.3186	28		plp				plp
.3187	b0 08		bcs $3191			bcs 	_CLExit 						; if CC then load a program, so warm start.
.3189	20 47 30	jsr $3047			jsr 	CommandClear
.318c	a2 04		ldx #$04		ldx	#4
.318e	20 31 28	jsr $2831		jsr	interactionHandler
.3191					_CLExit
.3191	60		rts				rts
.3192					CommandSave:
.3192	20 a5 31	jsr $31a5			jsr 	CLSParameters					; get parameters for save
.3195	90 08		bcc $319f			bcc 	_CSNoOverrideAddress
.3197	20 8d 3e	jsr $3e8d			jsr 	CheckComma 						; should be a comma.
.319a	a2 02		ldx #$02			ldx 	#2
.319c	20 75 37	jsr $3775			jsr 	EvaluateInteger 				; get save end address.
.319f					_CSNoOverrideAddress:
.319f	a2 18		ldx #$18		ldx	#24
.31a1	20 06 15	jsr $1506		jsr	deviceHandler
.31a4	60		rts				rts
.31a5					CLSParameters:
.31a5	a2 00		ldx #$00			ldx 	#0 								; string at +0
.31a7	20 6a 37	jsr $376a			jsr 	EvaluateString
.31aa	e8		inx				inx 									; erase out +1 (start) +2 (end, for save)
.31ab	20 0d 3e	jsr $3e0d			jsr 	MInt32False
.31ae	e8		inx				inx
.31af	20 0d 3e	jsr $3e0d			jsr 	MInt32False
.31b2	ad c8 0a	lda $0ac8			lda 	basePage 						; default start address.
.31b5	85 99		sta $99				sta 	esInt0+1
.31b7	ad c9 0a	lda $0ac9			lda 	basePage+1
.31ba	85 a1		sta $a1				sta 	esInt1+1
.31bc	ad ca 0a	lda $0aca			lda 	endProgram 						; default end address
.31bf	85 9a		sta $9a				sta 	esInt0+2
.31c1	ad cb 0a	lda $0acb			lda 	endProgram+1
.31c4	85 a2		sta $a2				sta 	esInt1+2
.31c6	b1 28		lda ($28),y			lda 	(codePtr),y 					; , following
.31c8	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.31ca	d0 08		bne $31d4			bne 	_CLSDefault
.31cc	c8		iny				iny 									; skip comma
.31cd	a2 01		ldx #$01			ldx 	#1 								; get numeric value.
.31cf	20 75 37	jsr $3775			jsr 	EvaluateInteger 				; the load or start save address
.31d2	38		sec				sec 									; return CS indicating override
.31d3	60		rts				rts
.31d4					_CLSDefault:
.31d4	18		clc				clc
.31d5	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/system/new.asm

.31d6					Command_New:
.31d6					Command_XNew:
.31d6	20 97 32	jsr $3297			jsr 	ResetCodeAddress 			; point to first line
.31d9	a0 00		ldy #$00			ldy 	#0 							; and zap it.
.31db	98		tya				tya
.31dc	91 28		sta ($28),y			sta 	(codePtr),y
.31de	20 47 30	jsr $3047			jsr 	CommandClear 				; clear everything down.
.31e1	4c 9d 2b	jmp $2b9d			jmp 	CommandEND 					; do END code, as there's nothing to run.

;******  Return to file: main/main.asm


;******  Processing file: main/commands/system/run.asm

.0d5f					breakCounter:
>0d5f								.fill 	1
.0d60					breakIncrement:
>0d60								.fill 	1
.31e4					Command_Run:
.31e4					XCommand_Run:
.31e4	a2 ff		ldx #$ff			ldx 	#$FF 						; reset the stack.
.31e6	9a		txs				txs
.31e7	20 91 32	jsr $3291			jsr 	BreakOn 					; turn break on
.31ea	20 47 30	jsr $3047			jsr 	CommandClear 				; clear everything.
.31ed	20 97 32	jsr $3297			jsr 	ResetCodeAddress 			; back to the start.
.31f0					Command_RunFrom:
.31f0	a0 03		ldy #$03			ldy 	#3 							; over offset/line #
.31f2					CRNextInstruction:
.31f2	a9 00		lda #$00			lda 	#0
.31f4	85 3a		sta $3a				sta 	softMemAlloc+1
.31f6	ad 5f 0d	lda $0d5f			lda 	breakCounter 				; check for break.
.31f9	6d 60 0d	adc $0d60			adc 	breakIncrement
.31fc	8d 5f 0d	sta $0d5f			sta 	breakCounter
.31ff	90 05		bcc $3206			bcc 	_CRNoChecks
.3201	a2 02		ldx #$02		ldx	#2
.3203	20 06 15	jsr $1506		jsr	deviceHandler
.3206					_CRNoChecks
.3206	b1 28		lda ($28),y			lda 	(codePtr),y 				; get next token.
.3208	10 2a		bpl $3234			bpl 	_CRNotToken
.320a	c9 c9		cmp #$c9			cmp 	#TOK_TOKENS 				; if in the tokens then do that token.
.320c	b0 0c		bcs $321a			bcs 	_CRExecute
.320e	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST 				; unary is ignored.
.3210	b0 71		bcs $3283			bcs 	Unimplemented
.3212	c9 99		cmp #$99			cmp 	#TOK_STRUCTST 				; execute structures.
.3214	b0 04		bcs $321a			bcs 	_CRExecute
.3216	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; if one of the system tokens $80-$85 do that
.3218	b0 24		bcs $323e			bcs 	_CRCheckIndirect 			; if in that unused range check for ! or ? or AND
.321a					_CRExecute:
.321a	c8		iny				iny 								; consume it.
.321b	0a		asl a				asl 	a 							; double it, losing most significant bit.
.321c	aa		tax				tax
.321d	20 23 32	jsr $3223			jsr 	_CRRunRoutine 				; we want to do jsr (group0vectors,x)
.3220	4c f2 31	jmp $31f2			jmp 	CRNextInstruction
.3223					_CRRunRoutine:
.3223	48		pha				pha
.3224	bd a9 32	lda $32a9,x			lda 	Group0Vectors,x
.3227	8d f2 0a	sta $0af2			sta 	jumpVector
.322a	bd aa 32	lda $32aa,x			lda 	1+(Group0Vectors),x
.322d	8d f3 0a	sta $0af3			sta 	jumpVector+1
.3230	68		pla				pla
.3231	6c f2 0a	jmp ($0af2)			jmp 	(jumpVector)
.3234					_CRNotToken:
.3234	c9 40		cmp #$40			cmp 	#$40 						; if 0-3F then it is a letter
.3236	b0 4b		bcs $3283			bcs 	Unimplemented
.3238					_CRDefaultLet:
.3238	20 d0 2a	jsr $2ad0			jsr 	CommandLet 					; do the default, LET
.323b	4c f2 31	jmp $31f2			jmp 	CRNextInstruction
.323e					_CRCheckIndirect:
.323e	c9 86		cmp #$86			cmp 	#TKW_AND 					; AND (assembler)
.3240	f0 0a		beq $324c			beq 	_CRAndCommand
.3242	c9 97		cmp #$97			cmp 	#TKW_PLING 					; !<term> =
.3244	f0 f2		beq $3238			beq 	_CRDefaultLet
.3246	c9 98		cmp #$98			cmp 	#TKW_QMARK 					; ?<term> =
.3248	f0 ee		beq $3238			beq 	_CRDefaultLet
.324a	d0 37		bne $3283			bne 	Unimplemented
.324c					_CRAndCommand:
.324c	c8		iny				iny 								; skip over the AND token
.324d	a9 95		lda #$95			lda 	#TKW_LPARENANDRPAREN 		; replace it with the pseudo-and
.324f	20 77 32	jsr $3277			jsr 	CommandAssembler 			; do the assembler command
.3252	4c f2 31	jmp $31f2			jmp 	CRNextInstruction 			; and loop round.
.3255					CommandShift1:
.3255	b1 28		lda ($28),y			lda 	(codePtr),y 				; get shifted value
.3257	10 2a		bpl $3283			bpl 	Unimplemented 				; we have an error as this should not happen.
.3259	c8		iny				iny 								; advance over it.
.325a	c9 94		cmp #$94			cmp 	#TKA_GROUP1 				; is it an assembler constant ?
.325c	b0 19		bcs $3277			bcs 	CommandAssembler
.325e	0a		asl a				asl 	a 							; double into X
.325f	aa		tax				tax
.3260	48		pha				pha
.3261	bd 71 33	lda $3371,x			lda 	Group1Vectors-12,x
.3264	8d f2 0a	sta $0af2			sta 	jumpVector
.3267	bd 72 33	lda $3372,x			lda 	1+(Group1Vectors-12),x
.326a	8d f3 0a	sta $0af3			sta 	jumpVector+1
.326d	68		pla				pla
.326e	6c f2 0a	jmp ($0af2)			jmp 	(jumpVector)
.3271					CommandShift2:
.3271	a9 ff		lda #$ff			lda 	#$FF 						; $FF means command not unary function.
.3273	20 87 18	jsr $1887		jsr	extensionHandler
.3276	60		rts				rts
.3277					CommandAssembler:
.3277	a2 02		ldx #$02		ldx	#2
.3279	20 b4 13	jsr $13b4		jsr	assemblerHandler
.327c	60		rts				rts
.327d					CommandAssemblerLabel:
.327d	a2 04		ldx #$04		ldx	#4
.327f	20 b4 13	jsr $13b4		jsr	assemblerHandler
.3282	60		rts				rts
.3283					Unimplemented:
.3283	a2 01		ldx #$01			ldx 	#ErrorID_Missing
.3285	20 36 15	jsr $1536		jsr	errorHandler
.3288					CommandColon:
.3288	60		rts				rts
.3289					CommandBreak:
.3289	20 73 37	jsr $3773			jsr 	EvaluateRootInteger
.328c	20 34 3e	jsr $3e34			jsr 	MInt32Zero
.328f	f0 02		beq $3293			beq 	BreakOff
.3291					BreakOn:
.3291	a2 08		ldx #$08			ldx 	#8
.3293					BreakOff:
.3293	8e 60 0d	stx $0d60			stx 	breakIncrement
.3296	60		rts				rts
.3297					ResetCodeAddress:
.3297	ad c8 0a	lda $0ac8			lda 	basePage 					; copy basePage to code Pointer
.329a	85 28		sta $28				sta 	codePtr
.329c	ad c9 0a	lda $0ac9			lda 	basePage+1
.329f	85 29		sta $29				sta 	codePtr+1
.32a1	a0 03		ldy #$03			ldy 	#3 							; offset after offset link and line#
.32a3	60		rts				rts
.32a4					TKErr01:
.32a4					TKErr02:
.32a4					TKErr03:
.32a4					TKErr04:
.32a4					TKErr05:
.32a4					TKErr06:
.32a4					TKErr07:
.32a4					TKErr08:
.32a4					TKErr09:
.32a4					TKErr10:
.32a4					TKErr11:
.32a4					TKErr12:
.32a4					TKErr13:
.32a4					TKErr14:
.32a4					TKErr15:
.32a4					TKErr16:
.32a4	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.32a6	20 36 15	jsr $1536		jsr	errorHandler

;******  Processing file: main/commands/system/../../../generated/tokenvectors0.inc

.32a9					Group0Vectors:
>32a9	a3 2b					.word	AdvanceNextLine          ; $80 [[eol]]
>32ab	55 32					.word	CommandShift1            ; $81 [[sh1]]
>32ad	71 32					.word	CommandShift2            ; $82 [[sh2]]
>32af	a4 32					.word	TKErr09                  ; $83 [[sh3]]
>32b1	a4 32					.word	TKErr10                  ; $84 [[fpc]]
>32b3	a4 32					.word	TKErr08                  ; $85 [[str]]
>32b5	5a 34					.word	AndHandler               ; $86 and
>32b7	47 34					.word	OrHandler                ; $87 or
>32b9	34 34					.word	XorHandler               ; $88 xor
>32bb	7c 35					.word	CompareGreaterEq         ; $89 >=
>32bd	86 35					.word	CompareLessEq            ; $8a <=
>32bf	68 35					.word	CompareGreater           ; $8b >
>32c1	5e 35					.word	CompareLess              ; $8c <
>32c3	54 35					.word	CompareEquals            ; $8d =
>32c5	72 35					.word	CompareNotEquals         ; $8e <>
>32c7	c5 33					.word	AddHandler               ; $8f +
>32c9	e8 33					.word	SubHandler               ; $90 -
>32cb	80 34					.word	ShrHandler               ; $91 >>
>32cd	6d 34					.word	ShlHandler               ; $92 <<
>32cf	fb 33					.word	MulHandler               ; $93 *
>32d1	0e 34					.word	DivHandler               ; $94 /
>32d3	21 34					.word	ModHandler               ; $95 mod
>32d5	b9 34					.word	PowerHandler             ; $96 ^
>32d7	93 34					.word	WordRefHandler           ; $97 !
>32d9	a6 34					.word	ByteRefHandler           ; $98 ?
>32db	62 2f					.word	Command_Repeat           ; $99 repeat
>32dd	0c 30					.word	Command_While            ; $9a while
>32df	b7 2b					.word	Command_FOR              ; $9b for
>32e1	c6 2c					.word	CommandIf                ; $9c if
>32e3	a4 32					.word	TKErr04                  ; $9d defproc
>32e5	6f 2f					.word	Command_Until            ; $9e until
>32e7	2f 30					.word	Command_Wend             ; $9f wend
>32e9	18 2c					.word	Command_NEXT             ; $a0 next
>32eb	a4 32					.word	TKErr06                  ; $a1 then
>32ed	01 2d					.word	Command_ENDIF            ; $a2 endif
>32ef	71 2e					.word	ReturnProc               ; $a3 endproc
>32f1	e0 36					.word	UnaryParenthesis         ; $a4 (
>32f3	c2 38					.word	UnaryLen                 ; $a5 len(
>32f5	06 39					.word	UnarySgn                 ; $a6 sgn(
>32f7	ef 38					.word	UnaryAbs                 ; $a7 abs(
>32f9	5f 39					.word	Unary_Random             ; $a8 random(
>32fb	a9 39					.word	Unary_Page               ; $a9 page
>32fd	09 3e					.word	MInt32True               ; $aa true
>32ff	0d 3e					.word	MInt32False              ; $ab false
>3301	74 39					.word	Unary_Min                ; $ac min(
>3303	78 39					.word	Unary_Max                ; $ad max(
>3305	81 3a					.word	UnarySys                 ; $ae sys(
>3307	2a 3a					.word	UnaryTimer               ; $af timer(
>3309	3f 38					.word	EventFunction            ; $b0 event(
>330b	53 3a					.word	UnaryGet                 ; $b1 get(
>330d	43 3a					.word	UnaryInkey               ; $b2 inkey(
>330f	fa 39					.word	UnaryAlloc               ; $b3 alloc(
>3311	ba 3a					.word	ExecChr                  ; $b4 chr$(
>3313	ea 3a					.word	ExecLeft                 ; $b5 left$(
>3315	07 3b					.word	ExecMid                  ; $b6 mid$(
>3317	2f 3b					.word	ExecRight                ; $b7 right$(
>3319	c1 37					.word	Event_Str                ; $b8 str$(
>331b	f0 37					.word	UnaryVal                 ; $b9 val(
>331d	1d 39					.word	UnaryPeek                ; $ba peek(
>331f	23 39					.word	UnaryDeek                ; $bb deek(
>3321	29 39					.word	UnaryLeek                ; $bc leek(
>3323	e0 38					.word	UnaryAsc                 ; $bd asc(
>3325	d4 39					.word	UnaryIntToFloat          ; $be int(
>3327	e7 39					.word	UnaryFloatToInt          ; $bf float(
>3329	f3 37					.word	UnaryIsVal               ; $c0 isval(
>332b	d1 3a					.word	ExecUpper                ; $c1 upper$(
>332d	ce 3a					.word	ExecLower                ; $c2 lower$(
>332f	b7 39					.word	UnaryReference           ; $c3 @
>3331	cd 39					.word	UnaryComplement          ; $c4 ~
>3333	ca 39					.word	UnaryHexMarker           ; $c5 &
>3335	6c 3a					.word	UnaryGetString           ; $c6 get$(
>3337	72 3a					.word	UnaryInkeyString         ; $c7 inkey$(
>3339	a9 3a					.word	UnaryMem                 ; $c8 mem
>333b	a4 32					.word	TKErr01                  ; $c9 )
>333d	88 32					.word	CommandColon             ; $ca :
>333f	a4 32					.word	TKErr02                  ; $cb ,
>3341	a4 32					.word	TKErr03                  ; $cc ;
>3343	8b 2b					.word	Command_Rem2             ; $cd '
>3345	a4 32					.word	TKErr07                  ; $ce to
>3347	a4 32					.word	TKErr05                  ; $cf step
>3349	04 2e					.word	CallProc                 ; $d0 proc
>334b	02 2d					.word	CommandLocal             ; $d1 local
>334d	c2 2a					.word	Command_Dim              ; $d2 dim
>334f	8b 2b					.word	Command_Rem              ; $d3 rem
>3351	d0 2a					.word	CommandLet               ; $d4 let
>3353	0c 29					.word	Command_Input            ; $d5 input
>3355	fb 2c					.word	Command_ELSE             ; $d6 else
>3357	93 2a					.word	Command_VDU              ; $d7 vdu
>3359	c2 29					.word	Command_Print            ; $d8 print
>335b	74 28					.word	CommandData              ; $d9 data
>335d	a4 32					.word	TKErr13                  ; $da image
>335f	a4 32					.word	TKErr12                  ; $db at
>3361	a4 32					.word	TKErr14                  ; $dc flip
>3363	b4 2a					.word	Command_Assert           ; $dd assert
>3365	4e 2b					.word	Command_Poke             ; $de poke
>3367	52 2b					.word	Command_Doke             ; $df doke
>3369	56 2b					.word	Command_Loke             ; $e0 loke
>336b	63 2a					.word	Command_Ink              ; $e1 ink
>336d	6e 2a					.word	Command_Paper            ; $e2 paper
>336f	5d 2a					.word	Command_CLS              ; $e3 cls
>3371	79 2a					.word	Command_Locate           ; $e4 locate
>3373	7d 32					.word	CommandAssemblerLabel    ; $e5 .
>3375	a4 32					.word	TKErr15                  ; $e6 from
>3377	a4 32					.word	TKErr11                  ; $e7 #
>3379	47 30					.word	CommandClear             ; $e8 clear
>337b	a4 32					.word	TKErr16                  ; $e9 text

;******  Return to file: main/commands/system/run.asm


;******  Processing file: main/commands/system/../../../generated/tokenvectors1.inc

.337d					Group1Vectors:
>337d	7d 31					.word	CommandLoad              ; $86 load
>337f	92 31					.word	CommandSave              ; $87 save
>3381	a2 30					.word	CommandList              ; $88 list
>3383	d6 31					.word	Command_New              ; $89 new
>3385	89 32					.word	CommandBreak             ; $8a break
>3387	e4 31					.word	Command_Run              ; $8b run
>3389	49 28					.word	CommandRead              ; $8c read
>338b	7d 28					.word	CommandRestore           ; $8d restore
>338d	9d 2b					.word	CommandEnd               ; $8e end
>338f	98 2b					.word	CommandStop              ; $8f stop
>3391	a0 2b					.word	CommandXemu              ; $90 xemu
>3393	da 28					.word	CommandGOTO              ; $91 goto
>3395	af 28					.word	CommandGOSUB             ; $92 gosub
>3397	c2 28					.word	CommandRETURN            ; $93 return

;******  Return to file: main/commands/system/run.asm


;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/binary/binary.asm

.3399					BinaryProcess:
.3399	b5 90		lda $90,x			lda 	esType,x 					; or type bytes together and check bit 6.
.339b	15 91		ora $91,x			ora 	esType+1,x 					; (the float bit)
.339d	0a		asl a				asl 	a
.339e	30 0e		bmi $33ae			bmi 	_BPStringType 				; if bit 6 is set, then string type, error
.33a0	18		clc				clc 								; return CC for integer
.33a1	29 02		and #$02			and 	#$02 						; $02 because of ASL A. check original bit 1.
.33a3	f0 08		beq $33ad			beq 	_BPExit 					; if both integer then return with CC.
.33a5	20 b3 33	jsr $33b3			jsr 	BPMakeBothFloat 			; make both float
.33a8	a9 01		lda #$01			lda 	#$01 						; set result type to float
.33aa	95 90		sta $90,x			sta 	esType,x
.33ac	38		sec				sec 								; and return with carry set.
.33ad					_BPExit:
.33ad	60		rts				rts
.33ae					_BPStringType:
.33ae	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.33b0	20 36 15	jsr $1536		jsr	errorHandler
.33b3					BPMakeBothFloat:
.33b3	e8		inx				inx
.33b4	20 b8 33	jsr $33b8			jsr 	BPMakeFloat 				; one is a float, so we do both as floats.
.33b7	ca		dex				dex
.33b8					BPMakeFloat:
.33b8	b5 90		lda $90,x			lda 	esType,x 					; get type bit which is in bit 0
.33ba	4a		lsr a				lsr 	a
.33bb	b0 07		bcs $33c4			bcs 	_BPIsFloat 					; already a float if set.
.33bd	8a		txa				txa
.33be	a2 1c		ldx #$1c		ldx	#28
.33c0	20 45 26	jsr $2645		jsr	floatingpointHandler
.33c3	aa		tax				tax
.33c4					_BPIsFloat:
.33c4	60		rts				rts
.33c5					AddHandler:
.33c5	20 96 35	jsr $3596			jsr 	DereferenceTwo 				; dereference top two on stack.
.33c8	b5 90		lda $90,x			lda 	esType,x 					; check two strings.
.33ca	35 91		and $91,x			and 	esType+1,x
.33cc	29 40		and #$40			and 	#$40 						; if both have bit 6 set ... we have two strings
.33ce	d0 10		bne $33e0			bne 	_AHStringConcat				; concatenate strings.
.33d0	20 99 33	jsr $3399			jsr 	BinaryProcess 				; check to see if either is float
.33d3	b0 03		bcs $33d8			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.33d5	4c f1 3c	jmp $3cf1			jmp 	MInt32Add 							; else do it as integer.
.33d8					_IsFPOperation:
.33d8	8a		txa				txa 								; call the relevant fp routine
.33d9	a2 04		ldx #$04		ldx	#4
.33db	20 45 26	jsr $2645		jsr	floatingpointHandler
.33de	aa		tax				tax
.33df	60		rts				rts
.33e0					_AHStringConcat:
.33e0	8a		txa				txa 								; handled by the string module.
.33e1	a2 06		ldx #$06		ldx	#6
.33e3	20 c6 41	jsr $41c6		jsr	stringHandler
.33e6	aa		tax				tax
.33e7	60		rts				rts
.33e8					SubHandler:
.33e8	20 96 35	jsr $3596			jsr 	DereferenceTwo
.33eb	20 99 33	jsr $3399			jsr 	BinaryProcess 				; check to see if either is float
.33ee	b0 03		bcs $33f3			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.33f0	4c 0b 3d	jmp $3d0b			jmp 	MInt32Sub 							; else do it as integer.
.33f3					_IsFPOperation:
.33f3	8a		txa				txa 								; call the relevant fp routine
.33f4	a2 12		ldx #$12		ldx	#18
.33f6	20 45 26	jsr $2645		jsr	floatingpointHandler
.33f9	aa		tax				tax
.33fa	60		rts				rts
.33fb					MulHandler:
.33fb	20 96 35	jsr $3596			jsr 	DereferenceTwo
.33fe	20 99 33	jsr $3399			jsr 	BinaryProcess 				; check to see if either is float
.3401	b0 03		bcs $3406			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.3403	4c 25 3d	jmp $3d25			jmp 	MInt32Multiply 							; else do it as integer.
.3406					_IsFPOperation:
.3406	8a		txa				txa 								; call the relevant fp routine
.3407	a2 0c		ldx #$0c		ldx	#12
.3409	20 45 26	jsr $2645		jsr	floatingpointHandler
.340c	aa		tax				tax
.340d	60		rts				rts
.340e					DivHandler:
.340e	20 96 35	jsr $3596			jsr 	DereferenceTwo
.3411	20 99 33	jsr $3399			jsr 	BinaryProcess 				; check to see if either is float
.3414	b0 03		bcs $3419			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.3416	4c e2 3b	jmp $3be2			jmp 	MInt32SDivide 							; else do it as integer.
.3419					_IsFPOperation:
.3419	8a		txa				txa 								; call the relevant fp routine
.341a	a2 08		ldx #$08		ldx	#8
.341c	20 45 26	jsr $2645		jsr	floatingpointHandler
.341f	aa		tax				tax
.3420	60		rts				rts
.3421					ModHandler:
.3421	20 96 35	jsr $3596			jsr 	DereferenceTwo
.3424	20 99 33	jsr $3399			jsr 	BinaryProcess 				; check to see if either is float
.3427	b0 03		bcs $342c			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.3429	4c 60 3c	jmp $3c60			jmp 	MInt32Modulus 							; else do it as integer.
.342c					_IsFPOperation:
.342c	8a		txa				txa 								; call the relevant fp routine
.342d	a2 0a		ldx #$0a		ldx	#10
.342f	20 45 26	jsr $2645		jsr	floatingpointHandler
.3432	aa		tax				tax
.3433	60		rts				rts
.3434					XorHandler:
.3434	20 96 35	jsr $3596			jsr 	DereferenceTwo
.3437	20 99 33	jsr $3399			jsr 	BinaryProcess 				; check to see if either is float
.343a	b0 03		bcs $343f			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.343c	4c 94 3b	jmp $3b94			jmp 	MInt32Xor 							; else do it as integer.
.343f					_IsFPOperation:
.343f	8a		txa				txa 								; call the relevant fp routine
.3440	a2 0a		ldx #$0a		ldx	#10
.3442	20 45 26	jsr $2645		jsr	floatingpointHandler
.3445	aa		tax				tax
.3446	60		rts				rts
.3447					OrHandler:
.3447	20 96 35	jsr $3596			jsr 	DereferenceTwo
.344a	20 99 33	jsr $3399			jsr 	BinaryProcess 				; check to see if either is float
.344d	b0 03		bcs $3452			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.344f	4c 7b 3b	jmp $3b7b			jmp 	MInt32Or 							; else do it as integer.
.3452					_IsFPOperation:
.3452	8a		txa				txa 								; call the relevant fp routine
.3453	a2 0a		ldx #$0a		ldx	#10
.3455	20 45 26	jsr $2645		jsr	floatingpointHandler
.3458	aa		tax				tax
.3459	60		rts				rts
.345a					AndHandler:
.345a	20 96 35	jsr $3596			jsr 	DereferenceTwo
.345d	20 99 33	jsr $3399			jsr 	BinaryProcess 				; check to see if either is float
.3460	b0 03		bcs $3465			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.3462	4c 62 3b	jmp $3b62			jmp 	MInt32And 							; else do it as integer.
.3465					_IsFPOperation:
.3465	8a		txa				txa 								; call the relevant fp routine
.3466	a2 0a		ldx #$0a		ldx	#10
.3468	20 45 26	jsr $2645		jsr	floatingpointHandler
.346b	aa		tax				tax
.346c	60		rts				rts
.346d					ShlHandler:
.346d	20 96 35	jsr $3596			jsr 	DereferenceTwo
.3470	20 99 33	jsr $3399			jsr 	BinaryProcess 				; check to see if either is float
.3473	b0 03		bcs $3478			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.3475	4c ee 34	jmp $34ee			jmp 	Mint32ShiftLeftX 							; else do it as integer.
.3478					_IsFPOperation:
.3478	8a		txa				txa 								; call the relevant fp routine
.3479	a2 0a		ldx #$0a		ldx	#10
.347b	20 45 26	jsr $2645		jsr	floatingpointHandler
.347e	aa		tax				tax
.347f	60		rts				rts
.3480					ShrHandler:
.3480	20 96 35	jsr $3596			jsr 	DereferenceTwo
.3483	20 99 33	jsr $3399			jsr 	BinaryProcess 				; check to see if either is float
.3486	b0 03		bcs $348b			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.3488	4c f1 34	jmp $34f1			jmp 	MInt32ShiftRightX 							; else do it as integer.
.348b					_IsFPOperation:
.348b	8a		txa				txa 								; call the relevant fp routine
.348c	a2 0a		ldx #$0a		ldx	#10
.348e	20 45 26	jsr $2645		jsr	floatingpointHandler
.3491	aa		tax				tax
.3492	60		rts				rts
.3493					WordRefHandler:
.3493	20 96 35	jsr $3596			jsr 	DereferenceTwo
.3496	20 99 33	jsr $3399			jsr 	BinaryProcess 				; check to see if either is float
.3499	b0 03		bcs $349e			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.349b	4c e0 34	jmp $34e0			jmp 	MInt32WordIndirect 							; else do it as integer.
.349e					_IsFPOperation:
.349e	8a		txa				txa 								; call the relevant fp routine
.349f	a2 0a		ldx #$0a		ldx	#10
.34a1	20 45 26	jsr $2645		jsr	floatingpointHandler
.34a4	aa		tax				tax
.34a5	60		rts				rts
.34a6					ByteRefHandler:
.34a6	20 96 35	jsr $3596			jsr 	DereferenceTwo
.34a9	20 99 33	jsr $3399			jsr 	BinaryProcess 				; check to see if either is float
.34ac	b0 03		bcs $34b1			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.34ae	4c e4 34	jmp $34e4			jmp 	MInt32ByteIndirect 							; else do it as integer.
.34b1					_IsFPOperation:
.34b1	8a		txa				txa 								; call the relevant fp routine
.34b2	a2 0a		ldx #$0a		ldx	#10
.34b4	20 45 26	jsr $2645		jsr	floatingpointHandler
.34b7	aa		tax				tax
.34b8	60		rts				rts
.34b9					PowerHandler:
.34b9	20 96 35	jsr $3596			jsr 	DereferenceTwo
.34bc	20 99 33	jsr $3399			jsr 	BinaryProcess 				; check to see if either is float
.34bf	b0 03		bcs $34c4			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.34c1	4c cc 34	jmp $34cc			jmp 	PowerInteger 							; else do it as integer.
.34c4					_IsFPOperation:
.34c4	8a		txa				txa 								; call the relevant fp routine
.34c5	a2 18		ldx #$18		ldx	#24
.34c7	20 45 26	jsr $2645		jsr	floatingpointHandler
.34ca	aa		tax				tax
.34cb	60		rts				rts
.34cc					PowerInteger:
.34cc	20 b3 33	jsr $33b3			jsr 	BPMakeBothFloat				; make them float.
.34cf	8a		txa				txa
.34d0	a2 18		ldx #$18		ldx	#24
.34d2	20 45 26	jsr $2645		jsr	floatingpointHandler
.34d5	a2 14		ldx #$14		ldx	#20
.34d7	20 45 26	jsr $2645		jsr	floatingpointHandler
.34da	aa		tax				tax
.34db	a9 00		lda #$00			lda 	#0 							; make type integer
.34dd	95 90		sta $90,x			sta 	esType,x
.34df	60		rts				rts
.34e0					Mint32WordIndirect:
.34e0	a9 80		lda #$80	 		lda 	#$80 				 		; word reference type (bit 7 set)
.34e2	d0 02		bne $34e6			bne 	Min32Indirect
.34e4					Mint32ByteIndirect:
.34e4	a9 a0		lda #$a0			lda 	#$A0 						; byte reference type (bit 7, bit 5 set)
.34e6					Min32Indirect:
.34e6	48		pha				pha 								; save the indirection
.34e7	20 f1 3c	jsr $3cf1			jsr 	MInt32Add 					; add a!b a?b
.34ea	68		pla				pla 								; and set the type to reference.
.34eb	95 90		sta $90,x			sta 	esType,x 	 				; so a!b => a+b and it's a reference....
.34ed	60		rts				rts
.34ee					Mint32ShiftLeftX:
.34ee	18		clc				clc 								; CC shift left
.34ef	90 01		bcc $34f2			bcc 	Mint32Shift
.34f1					Mint32ShiftRightX:
.34f1	38		sec				sec 								; CS shift right
.34f2					Mint32Shift:
.34f2	08		php				php 								; save carry flag on stack.
.34f3	b5 a1		lda $a1,x			lda 	esInt1+1,x 					; if shift >= 32 then it is zero.
.34f5	15 a9		ora $a9,x			ora 	esInt2+1,x
.34f7	15 b1		ora $b1,x			ora 	esInt3+1,x
.34f9	d0 1e		bne $3519			bne 	_MShiftZero
.34fb	b5 99		lda $99,x			lda 	esInt0+1,x
.34fd	c9 20		cmp #$20			cmp 	#32
.34ff	b0 18		bcs $3519			bcs 	_MShiftZero
.3501					_MShiftLoop:
.3501	b5 99		lda $99,x			lda 	esInt0+1,x 					; check count is zero
.3503	f0 12		beq $3517			beq 	_MShiftExit
.3505	d6 99		dec $99,x			dec 	esInt0+1,x
.3507	28		plp				plp 								; restore and save carry
.3508	08		php				php
.3509	90 06		bcc $3511			bcc 	_MShiftLeft 				; and shift left/right accordingly.
.350b	20 2b 3e	jsr $3e2b			jsr 	Mint32ShiftRight
.350e	4c 01 35	jmp $3501			jmp 	_MShiftLoop
.3511					_MShiftLeft:
.3511	20 22 3e	jsr $3e22			jsr 	Mint32ShiftLeft
.3514	4c 01 35	jmp $3501			jmp 	_MShiftLoop
.3517					_MShiftExit:
.3517	28		plp				plp	 								; throw saved carry and exit
.3518	60		rts				rts
.3519					_MShiftZero:
.3519	4c 0d 3e	jmp $3e0d			jmp 	MInt32False 				; return 0 as shifted >= 32 times.

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/binary/compare.asm

.351c					PerformComparison:
.351c	20 96 35	jsr $3596			jsr 	DereferenceTwo 				; make both values.
.351f	b5 90		lda $90,x			lda 	esType,x 					; check for two strings.
.3521	35 91		and $91,x			and 	esType+1,x
.3523	0a		asl a				asl 	a 							; bit 7 set if both bit 6s were set.
.3524	30 1d		bmi $3543			bmi 	_PCIsString
.3526	b5 90		lda $90,x			lda 	esType,x 					; check either is floating point.
.3528	15 91		ora $91,x			ora 	esType+1,x
.352a	0a		asl a				asl 	a 							; shift bit 6 (string) to bit 7, mixed types
.352b	30 22		bmi $354f			bmi 	_PCError
.352d	29 02		and #$02			and 	#$02 						; because of ASL, check type in bit 0
.352f	f0 0f		beq $3540			beq 	_PCIsInteger 				; if not two integers, e.g. 1 of the bits is set
.3531	20 b3 33	jsr $33b3			jsr 	BPMakeBothFloat 			; make both float
.3534	8a		txa				txa
.3535	a2 06		ldx #$06		ldx	#6
.3537	20 45 26	jsr $2645		jsr	floatingpointHandler
.353a	86 32		stx $32				stx 	tempShort 					; save result
.353c	aa		tax				tax
.353d	a5 32		lda $32				lda 	tempShort
.353f	60		rts				rts
.3540					_PCIsInteger:
.3540	4c ad 3b	jmp $3bad			jmp 	MInt32Compare
.3543					_PCIsString:
.3543	8a		txa				txa 								; A has SP
.3544	a2 0a		ldx #$0a		ldx	#10
.3546	20 c6 41	jsr $41c6		jsr	stringHandler
.3549	86 32		stx $32				stx 	tempShort 					; save result
.354b	aa		tax				tax 								; put SP back in X and get result.
.354c	a5 32		lda $32				lda 	tempShort
.354e	60		rts				rts
.354f					_PCError:
.354f	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.3551	20 36 15	jsr $1536		jsr	errorHandler
.3554					CompareEquals:
.3554	20 1c 35	jsr $351c			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.3557	c9 00		cmp #$00			cmp 	#$00 						; and we do something if it is = or <> a value.
.3559	f0 35		beq $3590			beq  	CompareTrue
.355b	4c 93 35	jmp $3593			jmp 	CompareFalse
.355e					CompareLess:
.355e	20 1c 35	jsr $351c			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.3561	c9 ff		cmp #$ff			cmp 	#$FF 						; and we do something if it is = or <> a value.
.3563	f0 2b		beq $3590			beq  	CompareTrue
.3565	4c 93 35	jmp $3593			jmp 	CompareFalse
.3568					CompareGreater:
.3568	20 1c 35	jsr $351c			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.356b	c9 01		cmp #$01			cmp 	#$01 						; and we do something if it is = or <> a value.
.356d	f0 21		beq $3590			beq  	CompareTrue
.356f	4c 93 35	jmp $3593			jmp 	CompareFalse
.3572					CompareNotEquals:
.3572	20 1c 35	jsr $351c			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.3575	c9 00		cmp #$00			cmp 	#$00 						; and we do something if it is = or <> a value.
.3577	d0 17		bne $3590			bne  	CompareTrue
.3579	4c 93 35	jmp $3593			jmp 	CompareFalse
.357c					CompareGreaterEq:
.357c	20 1c 35	jsr $351c			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.357f	c9 ff		cmp #$ff			cmp 	#$FF 						; and we do something if it is = or <> a value.
.3581	d0 0d		bne $3590			bne  	CompareTrue
.3583	4c 93 35	jmp $3593			jmp 	CompareFalse
.3586					CompareLessEq:
.3586	20 1c 35	jsr $351c			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.3589	c9 01		cmp #$01			cmp 	#$01 						; and we do something if it is = or <> a value.
.358b	d0 03		bne $3590			bne  	CompareTrue
.358d	4c 93 35	jmp $3593			jmp 	CompareFalse
.3590					CompareTrue:
.3590	4c 09 3e	jmp $3e09			jmp 	MInt32True
.3593					CompareFalse:
.3593	4c 0d 3e	jmp $3e0d			jmp 	MInt32False

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/dereference.asm

.3596					DereferenceTwo:
.3596	e8		inx				inx
.3597	20 9b 35	jsr $359b			jsr 	DereferenceOne
.359a	ca		dex				dex
.359b					DereferenceOne:
.359b	b5 90		lda $90,x			lda 	esType,x
.359d	10 3d		bpl $35dc			bpl 	_DRNotReference 			; is it a reference ? if not, we don't need to do anything
.359f	4a		lsr a				lsr 	a 							; do float dereference if bit 0 set.
.35a0	b0 3b		bcs $35dd			bcs 	_DRFloatDeReference
.35a2	98		tya				tya
.35a3	48		pha				pha
.35a4	b5 98		lda $98,x			lda 	esInt0,x 					; copy address to temp0
.35a6	85 2a		sta $2a				sta 	temp0
.35a8	b5 a0		lda $a0,x			lda 	esInt1,x
.35aa	85 2b		sta $2b				sta 	temp0+1
.35ac	a9 00		lda #$00			lda 	#0 							; clear esInt1..3
.35ae	95 a0		sta $a0,x			sta 	esInt1,x
.35b0	95 a8		sta $a8,x			sta 	esInt2,x
.35b2	95 b0		sta $b0,x			sta 	esInt3,x
.35b4	b5 90		lda $90,x			lda 	esType,x 					; get the type byte.
.35b6	29 60		and #$60			and 	#$60 						; get string flag ($40) and byte flag ($20)
.35b8	0a		asl a				asl 	a 							; now string ($80) byte ($40)
.35b9	30 0d		bmi $35c8			bmi 	_DeRefString 				; string, 2 bytes only
.35bb	d0 11		bne $35ce			bne 	_DeRefByte 					; byte 1 byte only
.35bd					_DeRefLong:
.35bd	a0 03		ldy #$03			ldy 	#3
.35bf	b1 2a		lda ($2a),y			lda 	(temp0),y
.35c1	95 b0		sta $b0,x			sta 	esInt3,x
.35c3	88		dey				dey
.35c4	b1 2a		lda ($2a),y			lda 	(temp0),y
.35c6	95 a8		sta $a8,x			sta 	esInt2,x
.35c8					_DeRefString:
.35c8	a0 01		ldy #$01			ldy 	#1
.35ca	b1 2a		lda ($2a),y			lda 	(temp0),y
.35cc	95 a0		sta $a0,x			sta 	esInt1,x
.35ce					_DeRefByte:
.35ce	a0 00		ldy #$00			ldy 	#0
.35d0	b1 2a		lda ($2a),y			lda 	(temp0),y
.35d2	95 98		sta $98,x			sta 	esInt0,x
.35d4	b5 90		lda $90,x			lda 	esType,x 					; clear byte and deref bits.
.35d6	29 40		and #$40			and 	#$40
.35d8	95 90		sta $90,x			sta 	esType,x
.35da	68		pla				pla
.35db	a8		tay				tay
.35dc					_DRNotReference
.35dc	60		rts				rts
.35dd					_DRFloatDereference:
.35dd	20 45 2b	jsr $2b45			jsr 	TOSToTemp0 					; address to deref in temp0
.35e0	8a		txa				txa
.35e1	a2 1e		ldx #$1e		ldx	#30
.35e3	20 45 26	jsr $2645		jsr	floatingpointHandler
.35e6	aa		tax				tax
.35e7	a9 01		lda #$01			lda 	#$01 						; type to FP (float)
.35e9	95 90		sta $90,x			sta 	esType,x
.35eb	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/evaluate.asm

.35ec					EvaluateLevel:
.35ec	e0 08		cpx #$08			cpx 	#StackSize 					; check stack overflow
.35ee	b0 1e		bcs $360e			bcs 	_ELStack
.35f0	48		pha				pha 								; save precedence level.
.35f1	a9 00		lda #$00			lda 	#0 							; zero the current stack level.
.35f3	95 98		sta $98,x			sta 	esInt0,x
.35f5	95 a0		sta $a0,x			sta 	esInt1,x
.35f7	95 a8		sta $a8,x			sta 	esInt2,x
.35f9	95 b0		sta $b0,x			sta 	esInt3,x
.35fb	95 90		sta $90,x			sta 	esType,x 					; zero the type (integer value)
.35fd	b1 28		lda ($28),y			lda 	(codePtr),y	 				; look at first token/character
.35ff	30 26		bmi $3627			bmi 	_ELIsToken 					; if -ve could be string, float, or unary function.
.3601	0a		asl a				asl 	a 							; if 00-3F then will now be PL and it's a variable.
.3602	30 0f		bmi $3613			bmi 	_ELIsConstant 				; 40-7F will be -ve and that's an integer constant.
.3604	8a		txa				txa 								; stack level in X
.3605	a2 02		ldx #$02		ldx	#2
.3607	20 49 4e	jsr $4e49		jsr	variableHandler
.360a	aa		tax				tax
.360b	4c 50 36	jmp $3650			jmp		_ELHasTerm
.360e					_ELStack:
.360e	a2 23		ldx #$23			ldx 	#ErrorID_NumStack
.3610	20 36 15	jsr $1536		jsr	errorHandler
.3613					_ELIsConstant:
.3613	4a		lsr a				lsr 	a 							; get the value back
.3614	29 3f		and #$3f			and 	#$3F 						; force into range 0-63
.3616	95 98		sta $98,x			sta 	esInt0,x 					; and put in LSB.
.3618					_ELCheckNext:
.3618	c8		iny				iny 								; look at next
.3619	b1 28		lda ($28),y			lda 	(codePtr),y
.361b	49 40		eor #$40			eor 	#$40 						; shift around so 40-7F => 00-3F
.361d	c9 40		cmp #$40			cmp 	#$40 						; out of range ?
.361f	b0 2f		bcs $3650			bcs 	_ELHasTerm 					; done getting the constant.
.3621	20 e9 36	jsr $36e9			jsr 	ELShiftByteIn 				; shift byte into position.
.3624	4c 18 36	jmp $3618			jmp 	_ELCheckNext
.3627					_ELIsToken:
.3627	c9 85		cmp #$85			cmp 	#TOK_STR 					; handle strings.
.3629	f0 0f		beq $363a			beq 	_ELIsString
.362b	c9 84		cmp #$84			cmp 	#TOK_FPC 					; if no, then check unary.
.362d	d0 5f		bne $368e			bne 	_ELCheckUnary
.362f	8a		txa				txa 								; put X into A
.3630	c8		iny				iny 								; skip over the float marker
.3631	a2 1a		ldx #$1a		ldx	#26
.3633	20 45 26	jsr $2645		jsr	floatingpointHandler
.3636	aa		tax				tax 								; restore X
.3637	4c 50 36	jmp $3650			jmp 	_ELHasTerm
.363a					_ELIsString:
.363a	98		tya				tya 								; address of string is codePtr+y+1
.363b	38		sec				sec
.363c	65 28		adc $28				adc 	codePtr
.363e	95 98		sta $98,x			sta 	esInt0,x
.3640	a5 29		lda $29				lda 	codePtr+1
.3642	69 00		adc #$00			adc 	#0
.3644	95 a0		sta $a0,x			sta 	esInt1,x
.3646	a9 40		lda #$40			lda 	#$40 						; set type to string value
.3648	95 90		sta $90,x			sta 	esType,x
.364a	c8		iny				iny 								; skip over string.
.364b	98		tya				tya
.364c	38		sec				sec									; +1 for the length itself.
.364d	71 28		adc ($28),y			adc 	(codePtr),y
.364f	a8		tay				tay 								; and fall through to term loop code.
.3650					_ELHasTerm:
.3650	b1 28		lda ($28),y			lda 	(codePtr),y
.3652	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; check in the correct range for binary tokens.
.3654	90 04		bcc $365a			bcc 	_ELPopExit
.3656	c9 99		cmp #$99			cmp 	#TOK_STRUCTST
.3658	90 02		bcc $365c			bcc 	_ELHasBinaryTerm
.365a					_ELPopExit:
.365a	68		pla				pla
.365b					_ELExit:
.365b	60		rts				rts
.365c					_ELHasBinaryTerm:
.365c	84 32		sty $32				sty 	tempShort 					; save position
.365e	a8		tay				tay 								; use token as an index and get the precedence.
.365f	b9 91 36	lda $3691,y			lda 	ELBinaryOperatorInfo-TOK_BINARYST,y
.3662	a4 32		ldy $32				ldy 	tempShort 					; restore Y
.3664	85 32		sta $32				sta 	tempShort 					; save precedence in memory.
.3666	68		pla				pla 								; restore current level.
.3667	c5 32		cmp $32				cmp 	tempShort 					; if current >= operator then exit
.3669	b0 f0		bcs $365b			bcs 	_ELExit
.366b	48		pha				pha 								; save current level back on the stack.
.366c	b1 28		lda ($28),y			lda 	(codePtr),y 				; save the binary operator on the stack and skip it.
.366e	48		pha				pha
.366f	c8		iny				iny
.3670	e8		inx				inx 								; calculate the RHS at the operator precedence.
.3671	a5 32		lda $32				lda 	tempShort
.3673	20 ec 35	jsr $35ec			jsr 	EvaluateLevel
.3676	ca		dex				dex
.3677	68		pla				pla 								; get the operator back out.
.3678					_ELExecuteA:
.3678	86 32		stx $32				stx 	tempShort 					; upload the vectors. Would be nice to use jmp (aaaa,x)
.367a	0a		asl a				asl 	a 							; but not practical. May use push/rts later.
.367b	aa		tax				tax
.367c	bd a9 32	lda $32a9,x			lda 	Group0Vectors,x
.367f	85 2a		sta $2a				sta 	temp0
.3681	bd aa 32	lda $32aa,x			lda 	Group0Vectors+1,x
.3684	85 2b		sta $2b				sta 	temp0+1
.3686	a6 32		ldx $32				ldx 	tempShort
.3688	20 d5 36	jsr $36d5			jsr 	_ELCallTemp0
.368b	4c 50 36	jmp $3650			jmp 	_ELHasTerm 					; and loop back round.
.368e					_ELCheckUnary:
.368e	c8		iny				iny 								; skip over token.
.368f	c9 90		cmp #$90			cmp 	#TKW_MINUS 					; is it - term
.3691	f0 19		beq $36ac			beq 	_ELMinus
.3693	c9 97		cmp #$97			cmp 	#TKW_PLING 					; is it ! or ? term
.3695	f0 2c		beq $36c3			beq 	_ELIndirect
.3697	c9 98		cmp #$98			cmp 	#TKW_QMARK
.3699	f0 28		beq $36c3			beq 	_ELIndirect
.369b	c9 83		cmp #$83			cmp 	#TOK_SHIFT3 				; is it the unary extension.
.369d	f0 39		beq $36d8			beq 	_ELExtension
.369f	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST 				; must be TOK_UNARYST ... TOK_TOKENS
.36a1	90 04		bcc $36a7			bcc 	_ELUSyntax
.36a3	c9 c9		cmp #$c9			cmp 	#TOK_TOKENS
.36a5	90 d1		bcc $3678			bcc 	_ELExecuteA 				; if so do that token.
.36a7					_ELUSyntax:
.36a7	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.36a9	20 36 15	jsr $1536		jsr	errorHandler
.36ac					_ELMinus:
.36ac	20 3e 37	jsr $373e			jsr 	EvaluateNumericTerm 		; get a number to negate.
.36af	b5 90		lda $90,x			lda 	esType,x 					; is it integer
.36b1	f0 0a		beq $36bd			beq 	_ELMinusInteger
.36b3	8a		txa				txa
.36b4	a2 0e		ldx #$0e		ldx	#14
.36b6	20 45 26	jsr $2645		jsr	floatingpointHandler
.36b9	aa		tax				tax
.36ba	4c 50 36	jmp $3650			jmp 	_ELHasTerm
.36bd					_ELMinusInteger:
.36bd	20 c7 3d	jsr $3dc7			jsr 	MInt32Negate 				; do int negate
.36c0	4c 50 36	jmp $3650			jmp 	_ELHasTerm
.36c3					_ELIndirect:
.36c3	48		pha				pha 								; save what we want (TKW_QMARK TWK_PLING)
.36c4	20 47 37	jsr $3747			jsr 	EvaluateIntegerTerm 		; integer address
.36c7	68		pla				pla
.36c8	49 97		eor #$97			eor 	#TKW_PLING 					; now $00 if !
.36ca	f0 02		beq $36ce			beq 	_ELHaveModifier
.36cc	a9 20		lda #$20			lda 	#$20 						; now $00 if !, $20 if ?
.36ce					_ELHaveModifier:
.36ce	09 80		ora #$80			ora 	#$80						; make it the appropriate reference.
.36d0	95 90		sta $90,x			sta 	esType,x 					; $80 for ! $A0 for ?
.36d2	4c 50 36	jmp $3650			jmp 	_ELHasTerm
.36d5					_ELCallTemp0:
.36d5	6c 2a 00	jmp ($002a)			jmp 	(temp0)
.36d8					_ELExtension:
.36d8	8a		txa				txa 								; stack pos in A
.36d9	20 87 18	jsr $1887		jsr	extensionHandler
.36dc	aa		tax				tax 								; restore stack
.36dd	4c 50 36	jmp $3650			jmp 	_ELHasTerm
.36e0					UnaryParenthesis:
.36e0	a9 00		lda #$00			lda 	#0 							; ( is a unary function ....
.36e2	20 ec 35	jsr $35ec			jsr 	EvaluateLevel
.36e5	20 80 3e	jsr $3e80			jsr 	CheckRightParen 			; check for )
.36e8	60		rts				rts
.36e9					ELShiftByteIn:
.36e9	48		pha				pha 								; save bits to shift in.
.36ea	b5 b0		lda $b0,x			lda 	esInt3,x 					; save top most byte
.36ec	48		pha				pha
.36ed	b5 a8		lda $a8,x			lda 	esInt2,x 					; shift everything left 8 bits
.36ef	95 b0		sta $b0,x			sta 	esInt3,x
.36f1	b5 a0		lda $a0,x			lda 	esInt1,x
.36f3	95 a8		sta $a8,x			sta 	esInt2,x
.36f5	b5 98		lda $98,x			lda 	esInt0,x
.36f7	95 a0		sta $a0,x			sta 	esInt1,x
.36f9	a9 00		lda #$00			lda 	#0
.36fb	95 98		sta $98,x			sta 	esInt0,x
.36fd	68		pla				pla 								; now A:TOS is a 5 byte register, shift right twice.
.36fe	29 03		and #$03			and 	#3 							; only want lower 2 bits
.3700	09 04		ora #$04			ora 	#4  						; set bit 2 - when 1 we are done
.3702					_ELShiftLoop:
.3702	4a		lsr a				lsr 	a
.3703	76 b0		ror $b0,x			ror 	esInt3,x
.3705	76 a8		ror $a8,x			ror 	esInt2,x
.3707	76 a0		ror $a0,x			ror 	esInt1,x
.3709	76 98		ror $98,x			ror 	esInt0,x
.370b	c9 01		cmp #$01			cmp 	#1
.370d	d0 f3		bne $3702			bne 	_ELShiftLoop
.370f	68		pla				pla 								; get original 6 bit value and OR in.
.3710	29 3f		and #$3f			and 	#$3F
.3712	15 98		ora $98,x			ora 	esInt0,x
.3714	95 98		sta $98,x			sta 	esInt0,x
.3716	60		rts				rts
.3717					ELBinaryOperatorInfo:

;******  Processing file: main/evaluate/../../generated/binarystructinfo.inc

>3717	01					.byte	$01			; $86 and
>3718	01					.byte	$01			; $87 or
>3719	01					.byte	$01			; $88 xor
>371a	02					.byte	$02			; $89 >=
>371b	02					.byte	$02			; $8a <=
>371c	02					.byte	$02			; $8b >
>371d	02					.byte	$02			; $8c <
>371e	02					.byte	$02			; $8d =
>371f	02					.byte	$02			; $8e <>
>3720	03					.byte	$03			; $8f +
>3721	03					.byte	$03			; $90 -
>3722	04					.byte	$04			; $91 >>
>3723	04					.byte	$04			; $92 <<
>3724	04					.byte	$04			; $93 *
>3725	04					.byte	$04			; $94 /
>3726	04					.byte	$04			; $95 mod
>3727	05					.byte	$05			; $96 ^
>3728	06					.byte	$06			; $97 !
>3729	06					.byte	$06			; $98 ?
>372a	82					.byte	$82			; $99 repeat
>372b	82					.byte	$82			; $9a while
>372c	82					.byte	$82			; $9b for
>372d	82					.byte	$82			; $9c if
>372e	82					.byte	$82			; $9d defproc
>372f	80					.byte	$80			; $9e until
>3730	80					.byte	$80			; $9f wend
>3731	80					.byte	$80			; $a0 next
>3732	80					.byte	$80			; $a1 then
>3733	80					.byte	$80			; $a2 endif
>3734	80					.byte	$80			; $a3 endproc

;******  Return to file: main/evaluate/evaluate.asm


;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/support.asm

.3735					EvaluateTerm:
.3735	a9 0f		lda #$0f			lda 	#15 						; no binary operator has this high a precedence.
.3737	20 ec 35	jsr $35ec			jsr 	EvaluateLevel
.373a	20 9b 35	jsr $359b			jsr 	DereferenceOne
.373d	60		rts				rts
.373e					EvaluateNumericTerm:
.373e	20 35 37	jsr $3735			jsr 	EvaluateTerm
.3741	b5 90		lda $90,x			lda 	esType,x
.3743	0a		asl a				asl 	a 							; see if it's a string.
.3744	30 09		bmi $374f			bmi 	ENTType
.3746	60		rts				rts
.3747					EvaluateIntegerTerm:
.3747	20 35 37	jsr $3735			jsr 	EvaluateTerm
.374a	b5 90		lda $90,x			lda 	esType,x
.374c	d0 01		bne $374f			bne 	ENTType
.374e	60		rts				rts
.374f					ENTType:
.374f	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.3751	20 36 15	jsr $1536		jsr	errorHandler
.3754					EvaluateRoot:
.3754	a2 00		ldx #$00			ldx 	#0
.3756					Evaluate:
.3756	a9 00		lda #$00			lda 	#0
.3758	20 ec 35	jsr $35ec			jsr 	EvaluateLevel
.375b	20 9b 35	jsr $359b			jsr 	DereferenceOne
.375e	60		rts				rts
.375f					EvaluateNumeric:
.375f	20 56 37	jsr $3756			jsr 	Evaluate
.3762	b5 90		lda $90,x			lda 	esType,x
.3764	0a		asl a				asl 	a 							; see if it's a string.
.3765	30 e8		bmi $374f			bmi 	ENTType
.3767	4a		lsr a				lsr 	a 							; shift float flag into carry.
.3768	4a		lsr a				lsr 	a
.3769	60		rts				rts
.376a					EvaluateString:
.376a	20 56 37	jsr $3756			jsr 	Evaluate
.376d	b5 90		lda $90,x			lda 	esType,x
.376f	0a		asl a				asl 	a 							; see if it's a string.
.3770	10 dd		bpl $374f			bpl 	ENTType
.3772	60		rts				rts
.3773					EvaluateRootInteger:
.3773	a2 00		ldx #$00			ldx 	#0
.3775					EvaluateInteger:
.3775	20 56 37	jsr $3756			jsr 	Evaluate
.3778	b5 90		lda $90,x			lda 	esType,x
.377a	d0 d3		bne $374f			bne 	ENTType
.377c	60		rts				rts
.377d					EvaluateSmallInteger:
.377d	20 75 37	jsr $3775			jsr 	EvaluateInteger
.3780	b5 a0		lda $a0,x			lda 	esInt1,x
.3782	15 a8		ora $a8,x			ora 	esInt2,x
.3784	15 b0		ora $b0,x			ora 	esInt3,x
.3786	d0 03		bne $378b			bne 	_ESIValue
.3788	b5 98		lda $98,x			lda 	esInt0,x
.378a	60		rts				rts
.378b					_ESIValue:
.378b	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.378d	20 36 15	jsr $1536		jsr	errorHandler
.3790					LinkEvaluate:
.3790	aa		tax				tax
.3791	20 56 37	jsr $3756			jsr 	Evaluate
.3794	8a		txa				txa
.3795	60		rts				rts
.3796					LinkEvaluateTerm:
.3796	aa		tax				tax
.3797	20 35 37	jsr $3735			jsr 	EvaluateTerm
.379a	8a		txa				txa
.379b	60		rts				rts
.379c					LinkEvaluateInteger:
.379c	aa		tax				tax
.379d	20 75 37	jsr $3775			jsr 	EvaluateInteger
.37a0	8a		txa				txa
.37a1	60		rts				rts
.37a2					LinkEvaluateString:
.37a2	aa		tax				tax
.37a3	20 6a 37	jsr $376a			jsr 	EvaluateString
.37a6	8a		txa				txa
.37a7	60		rts				rts
.37a8					LinkEvaluateSmallInt:
.37a8	aa		tax				tax
.37a9	20 7d 37	jsr $377d			jsr 	EvaluateSmallInteger
.37ac	8a		txa				txa
.37ad	60		rts				rts
.37ae					EvaluateReference:
.37ae	ad 28 37	lda $3728			lda 	ELBinaryOperatorInfo+TKW_PLING-TOK_BINARYST
.37b1	38		sec				sec 								; sub 1 to allow a!x b?x to work.
.37b2	e9 01		sbc #$01			sbc 	#1
.37b4	20 ec 35	jsr $35ec			jsr 	EvaluateLevel
.37b7	b5 90		lda $90,x			lda 	esType,x
.37b9	10 01		bpl $37bc			bpl 	_ERFail
.37bb	60		rts				rts
.37bc					_ERFail:
.37bc	a2 0b		ldx #$0b			ldx 	#ErrorID_NoReference
.37be	20 36 15	jsr $1536		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary/convert.asm

.37c1					Event_Str:
.37c1	20 5f 37	jsr $375f			jsr 	EvaluateNumeric 			; get a number.
.37c4	b5 90		lda $90,x			lda 	esType,x 					; is it floating point
.37c6	d0 13		bne $37db			bne 	_ESFloat
.37c8	20 1e 38	jsr $381e			jsr 	ConvertGetBase 				; get base, or default.
.37cb	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.37cd	85 2a		sta $2a				sta 	temp0
.37cf	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.37d1	85 2b		sta $2b				sta 	1+(temp0)
.37d3	b5 99		lda $99,x			lda 	esInt0+1,x 					; get the base
.37d5	20 63 3d	jsr $3d63			jsr 	MInt32ToString 				; convert to string.
.37d8	4c e8 37	jmp $37e8			jmp 	_ESCloneExit 				; clone and exit.
.37db					_ESFloat:
.37db	20 80 3e	jsr $3e80			jsr 	CheckRightParen 			; check closing )
.37de	20 45 2b	jsr $2b45			jsr 	TOSToTemp0 					; string address in temp0, goes here.
.37e1	8a		txa				txa
.37e2	a2 16		ldx #$16		ldx	#22
.37e4	20 45 26	jsr $2645		jsr	floatingpointHandler
.37e7	aa		tax				tax
.37e8					_ESCloneExit:
.37e8	8a		txa				txa
.37e9	a2 04		ldx #$04		ldx	#4
.37eb	20 c6 41	jsr $41c6		jsr	stringHandler
.37ee	aa		tax				tax
.37ef	60		rts				rts
.37f0					UnaryVal:
.37f0	38		sec				sec 								; Carry set to return value
.37f1	b0 01		bcs $37f4			bcs 	ValueMain
.37f3					UnaryIsVal:
.37f3	18		clc				clc									; Carry clear to return legitimacy
.37f4					ValueMain:
.37f4	08		php				php 								; save results (CS is value, CC is validation)
.37f5	20 6a 37	jsr $376a			jsr 	EvaluateString
.37f8	20 1e 38	jsr $381e			jsr 	ConvertGetBase 				; get base, if any.
.37fb	98		tya				tya
.37fc	48		pha				pha
.37fd	20 45 2b	jsr $2b45			jsr 	TOSToTemp0 					; string address in temp0, goes here.
.3800	b5 99		lda $99,x			lda 	esInt0+1,x 					; get the base
.3802	29 7f		and #$7f			and 	#$7F 						; ignore the sign bit.
.3804	20 7b 3c	jsr $3c7b			jsr 	MInt32FromString 			; convert it back from a string.
.3807	b0 0c		bcs $3815			bcs 	_VMSuccess 					; successfully converted.
.3809	b5 99		lda $99,x			lda 	esInt0+1,x 					; is base the default
.380b	c9 8a		cmp #$8a			cmp 	#$80+10 					; if no, then it is integer only.
.380d	f0 00		beq $380f			beq 	_VMFailed 	 				; so we failed.
.380f					_VMFailed:
.380f	68		pla				pla
.3810	a8		tay				tay
.3811	28		plp				plp
.3812	4c 0d 3e	jmp $3e0d			jmp 	MInt32False 				; return 0 whatever.
.3815					_VMSuccess:
.3815	68		pla				pla
.3816	a8		tay				tay
.3817	28		plp				plp 								; if CS the it was val() so we want the value.
.3818	b0 03		bcs $381d			bcs 	_VMExit
.381a	4c 09 3e	jmp $3e09			jmp 	MInt32True 					; otherwise return true as successful.
.381d					_VMExit:
.381d	60		rts				rts
.381e					ConvertGetBase:
.381e	a9 8a		lda #$8a			lda 	#10+$80 					; default base 10 signed.
.3820	95 99		sta $99,x			sta 	esInt0+1,x
.3822	b1 28		lda ($28),y			lda 	(codePtr),y 				; check for ,base)
.3824	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.3826	d0 0e		bne $3836			bne 	_CGBDone 					; not found, should be )
.3828	e8		inx				inx 								; next level
.3829	c8		iny				iny 								; skip comma.
.382a	20 7d 37	jsr $377d			jsr 	EvaluateSmallInteger		; evaluate the base.
.382d	ca		dex				dex
.382e	c9 02		cmp #$02			cmp 	#2 							; base range is 2..16
.3830	90 08		bcc $383a			bcc 	_CGBValue 					; (it should work as high as 37)
.3832	c9 11		cmp #$11			cmp 	#17
.3834	b0 04		bcs $383a			bcs 	_CGBValue
.3836					_CGBDone:
.3836	20 80 3e	jsr $3e80			jsr 	CheckRightParen
.3839	60		rts				rts
.383a					_CGBValue:
.383a	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.383c	20 36 15	jsr $1536		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary/event.asm

.383f					EventFunction:
.383f	20 ae 37	jsr $37ae			jsr 	EvaluateReference			; get the variable reference that tracks the event
.3842	b5 90		lda $90,x			lda 	esType,x
.3844	c9 80		cmp #$80			cmp 	#$80 						; must be integer reference
.3846	d0 5b		bne $38a3			bne 	_EFType
.3848	20 8d 3e	jsr $3e8d			jsr 	CheckComma
.384b	e8		inx				inx
.384c	20 75 37	jsr $3775			jsr 	EvaluateInteger		 		; get the elapsed time between firing.
.384f	20 80 3e	jsr $3e80			jsr 	CheckRightParen 			; finish off with the right bracket
.3852	ca		dex				dex
.3853	b5 a0		lda $a0,x			lda 	esInt1,x 					; check max of 32767, we use 16 bit for timers and
.3855	29 80		and #$80			and 	#$80 						; it doesn't work > 32767
.3857	15 a8		ora $a8,x			ora 	esInt2,x
.3859	15 b0		ora $b0,x			ora 	esInt3,x
.385b	d0 41		bne $389e			bne 	_EFValue
.385d	98		tya				tya
.385e	48		pha				pha
.385f	8a		txa				txa
.3860	48		pha				pha
.3861	a2 1c		ldx #$1c		ldx	#28
.3863	20 06 15	jsr $1506		jsr	deviceHandler
.3866	84 2d		sty $2d				sty 	temp1+1
.3868	85 2c		sta $2c				sta 	temp1
.386a	68		pla				pla
.386b	aa		tax				tax
.386c	20 45 2b	jsr $2b45			jsr 	TOSToTemp0 					; set temp0 to the address of the event variable
.386f	a0 03		ldy #$03			ldy 	#3							; if -ve
.3871	b1 2a		lda ($2a),y			lda 	(temp0),y
.3873	30 23		bmi $3898			bmi 	_EFFail 	 				; straight out with fail, means "on pause".
.3875	a0 00		ldy #$00			ldy 	#0 							; is the fire time zero ?
.3877	b1 2a		lda ($2a),y			lda 	(temp0),y
.3879	c8		iny				iny
.387a	11 2a		ora ($2a),y			ora 	(temp0),y
.387c	f0 17		beq $3895			beq 	_EFInitialise 				; if so, initialise the value but return false.
.387e	a0 00		ldy #$00			ldy 	#0 							; calculate trigger - timer
.3880	38		sec				sec
.3881	b1 2a		lda ($2a),y			lda 	(temp0),y
.3883	e5 2c		sbc $2c				sbc 	temp1
.3885	c8		iny				iny
.3886	b1 2a		lda ($2a),y			lda 	(temp0),y
.3888	e5 2d		sbc $2d				sbc 	temp1+1
.388a	10 0c		bpl $3898			bpl 	_EFFail 					; if trigger >= timer then return False
.388c	20 a8 38	jsr $38a8			jsr 	SetEventTimer 				; reset the timer for next time.
.388f	20 09 3e	jsr $3e09			jsr	 	MInt32True 					; and treutn true as fired.
.3892	68		pla				pla
.3893	a8		tay				tay
.3894	60		rts				rts
.3895					_EFInitialise:
.3895	20 a8 38	jsr $38a8			jsr		SetEventTimer 				; set trigger time to time + elapsed
.3898					_EFFail:
.3898	68		pla				pla
.3899	a8		tay				tay
.389a	20 0d 3e	jsr $3e0d			jsr 	MInt32False
.389d	60		rts				rts
.389e					_EFValue:
.389e	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.38a0	20 36 15	jsr $1536		jsr	errorHandler
.38a3					_EFType:
.38a3	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.38a5	20 36 15	jsr $1536		jsr	errorHandler
.38a8					SetEventTimer:
.38a8	a0 00		ldy #$00			ldy 	#0
.38aa	18		clc				clc
.38ab	a5 2c		lda $2c				lda 	temp1
.38ad	75 99		adc $99,x			adc 	esInt0+1,x
.38af	91 2a		sta ($2a),y			sta		(temp0),y
.38b1	c8		iny				iny
.38b2	a5 2d		lda $2d				lda 	temp1+1
.38b4	75 a1		adc $a1,x			adc 	esInt1+1,x
.38b6	91 2a		sta ($2a),y			sta		(temp0),y
.38b8	88		dey				dey
.38b9	11 2a		ora ($2a),y			ora 	(temp0),y 					; if the result is non zero, exit
.38bb	d0 04		bne $38c1			bne 	_SETExit 					; zero means initialise.....
.38bd	a9 01		lda #$01			lda 	#1 							; timer zero won't work, so make it 1, which is
.38bf	91 2a		sta ($2a),y			sta 	(temp0),y 					; near enough.
.38c1					_SETExit:
.38c1	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary/unary.asm

.38c2					UnaryLen:
.38c2	20 d0 38	jsr $38d0			jsr 	ULStart
.38c5					ULFinish:
.38c5	b1 2a		lda ($2a),y			lda 	(temp0),y 					; get length prefix
.38c7	a4 32		ldy $32				ldy 	tempShort 					; get Y back
.38c9	20 1c 3e	jsr $3e1c			jsr 	MInt32Set8Bit 				; write it out.
.38cc	20 80 3e	jsr $3e80			jsr 	CheckRightParen
.38cf	60		rts				rts
.38d0	20 6a 37	jsr $376a	ULStart:jsr 	EvaluateString
.38d3	b5 98		lda $98,x			lda 	esInt0,x 					; copy address of string to temp0
.38d5	85 2a		sta $2a				sta 	temp0
.38d7	b5 a0		lda $a0,x			lda 	esInt1,x
.38d9	85 2b		sta $2b				sta 	temp0+1
.38db	84 32		sty $32				sty 	tempShort 					; get length
.38dd	a0 00		ldy #$00			ldy 	#0
.38df	60		rts				rts
.38e0					UnaryAsc:
.38e0	20 d0 38	jsr $38d0			jsr 	ULStart 					; same as LEN() get string, save Y, point to length.
.38e3	b1 2a		lda ($2a),y			lda 	(temp0),y 					; read length
.38e5	c8		iny				iny 		 						; point to first character, we can do LEN code after that
.38e6	c9 00		cmp #$00			cmp 	#0
.38e8	d0 db		bne $38c5			bne 	ULFinish 					; if length = 0 then error : asc("") -> error.
.38ea	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.38ec	20 36 15	jsr $1536		jsr	errorHandler
.38ef					UnaryAbs:
.38ef	20 5f 37	jsr $375f			jsr 	EvaluateNumeric 			; some numeric value
.38f2	b0 07		bcs $38fb			bcs 	_UAFloat 					; CS then float, so use that function
.38f4	20 c2 3d	jsr $3dc2			jsr 	MInt32Absolute 				; int version
.38f7	20 80 3e	jsr $3e80			jsr 	CheckRightParen
.38fa	60		rts				rts
.38fb					_UAFloat:
.38fb	8a		txa				txa 								; float version
.38fc	a2 02		ldx #$02		ldx	#2
.38fe	20 45 26	jsr $2645		jsr	floatingpointHandler
.3901	aa		tax				tax
.3902	20 80 3e	jsr $3e80			jsr 	CheckRightParen
.3905	60		rts				rts
.3906					UnarySgn:
.3906	20 5f 37	jsr $375f			jsr 	EvaluateNumeric 			; same as above but sign of value
.3909	b0 07		bcs $3912			bcs 	_USFloat
.390b	20 fa 3d	jsr $3dfa			jsr 	MInt32Sign
.390e	20 80 3e	jsr $3e80			jsr 	CheckRightParen
.3911	60		rts				rts
.3912					_USFloat:
.3912	8a		txa				txa
.3913	a2 10		ldx #$10		ldx	#16
.3915	20 45 26	jsr $2645		jsr	floatingpointHandler
.3918	aa		tax				tax
.3919	20 80 3e	jsr $3e80			jsr 	CheckRightParen
.391c	60		rts				rts
.391d					UnaryPeek:
.391d	20 49 39	jsr $3949			jsr 	PDLCode 					; each has common setup code put reads 1,2 or 4 bytes
.3920	4c 3d 39	jmp $393d			jmp 	PDLByte0
.3923					UnaryDeek:
.3923	20 49 39	jsr $3949			jsr 	PDLCode
.3926	4c 37 39	jmp $3937			jmp 	PDLByte1
.3929					UnaryLeek:
.3929	20 49 39	jsr $3949			jsr 	PDLCode
.392c	a0 03		ldy #$03			ldy 	#3							; read 3-2
.392e	b1 2a		lda ($2a),y			lda 	(temp0),y
.3930	95 b0		sta $b0,x			sta 	esInt3,x
.3932	88		dey				dey
.3933	b1 2a		lda ($2a),y			lda 	(temp0),y
.3935	95 a8		sta $a8,x			sta 	esInt2,x
.3937					PDLByte1:
.3937	a0 01		ldy #$01			ldy 	#1
.3939	b1 2a		lda ($2a),y			lda 	(temp0),y
.393b	95 a0		sta $a0,x			sta 	esInt1,x
.393d					PDLByte0:
.393d	a0 00		ldy #$00			ldy 	#0
.393f	b1 2a		lda ($2a),y			lda 	(temp0),y
.3941	95 98		sta $98,x			sta 	esInt0,x
.3943	a4 32		ldy $32				ldy 	tempShort 					; restore Y
.3945	20 80 3e	jsr $3e80			jsr 	CheckRightParen 			; check right and return
.3948	60		rts				rts
.3949					PDLCode:
.3949	20 75 37	jsr $3775			jsr 	EvaluateInteger 			; some address
.394c	b5 98		lda $98,x			lda 	esInt0,x 					; copy address of string to temp0
.394e	85 2a		sta $2a				sta 	temp0
.3950	b5 a0		lda $a0,x			lda 	esInt1,x
.3952	85 2b		sta $2b				sta 	temp0+1
.3954	a9 00		lda #$00			lda 	#0 							; zero upper 3 bytes of result, type okay.
.3956	95 a0		sta $a0,x			sta 	esInt1,x 					; PEEK needs upper 3 cleared
.3958	95 a8		sta $a8,x			sta 	esInt2,x
.395a	95 b0		sta $b0,x			sta 	esInt3,x
.395c	84 32		sty $32				sty 	tempShort 					; save Y
.395e	60		rts				rts
.395f					Unary_Random:
.395f	20 3d 3e	jsr $3e3d			jsr 	MInt32Random 				; generate random number.
.3962	b1 28		lda ($28),y			lda 	(codePtr),y 				; check followed by )
.3964	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.3966	f0 08		beq $3970			beq 	_URExit
.3968	e8		inx				inx 								; load range 0..r-1 into +1
.3969	20 75 37	jsr $3775			jsr 	EvaluateInteger
.396c	ca		dex				dex
.396d	20 60 3c	jsr $3c60			jsr 	MInt32Modulus 				; calculate random % modulus
.3970					_URExit:
.3970	20 80 3e	jsr $3e80			jsr 	CheckRightParen 			; check right and return
.3973	60		rts				rts
.3974					Unary_Min:
.3974	a9 01		lda #$01			lda 	#1 							; c1 cmp c2 needs to be > e.g. c1 > c2
.3976	d0 02		bne $397a			bne 	UnaryMBody
.3978					Unary_Max:
.3978	a9 ff		lda #$ff			lda 	#$FF 						; c1 cmp c2 needs to be < e.g. c1 < c2
.397a					UnaryMBody:
.397a	48		pha				pha 								; save comparator on stack, shows min or max
.397b	20 56 37	jsr $3756			jsr 	Evaluate 					; get the first thing to check
.397e					_UnaryMLoop:
.397e	b1 28		lda ($28),y			lda 	(codePtr),y 				; found ), indicates end.
.3980	c8		iny				iny
.3981	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.3983	f0 09		beq $398e			beq 	_UnaryMExit
.3985	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; found , indicates more.
.3987	f0 07		beq $3990			beq 	_UnaryMCompare
.3989	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.398b	20 36 15	jsr $1536		jsr	errorHandler
.398e					_UnaryMExit:
.398e	68		pla				pla 								; done so throw comparator and return.
.398f	60		rts				rts
.3990					_UnaryMCompare:
.3990	e8		inx				inx 								; get the 2nd thing to evaluate
.3991	20 56 37	jsr $3756			jsr 	Evaluate
.3994	ca		dex				dex
.3995	20 1c 35	jsr $351c			jsr 	PerformComparison 			; this is part of evaluate/compare.asm
.3998	85 32		sta $32				sta 	tempShort 					; save result
.399a	68		pla				pla 								; get what we need
.399b	48		pha				pha
.399c	c5 32		cmp $32				cmp 	tempShort 					; did we get it
.399e	d0 de		bne $397e			bne 	_UnaryMLoop 				; no, try another value.
.39a0	20 0d 3e	jsr $3e0d			jsr 	MInt32False 				; promote 2nd to 1st.
.39a3	20 f1 3c	jsr $3cf1			jsr 	MInt32Add
.39a6	4c 7e 39	jmp $397e			jmp 	_UnaryMLoop
.39a9					Unary_Page:
.39a9	20 0d 3e	jsr $3e0d			jsr 	MInt32False 				; zero
.39ac	ad c8 0a	lda $0ac8			lda 	basePage 					; copy base page address in.
.39af	95 98		sta $98,x			sta 	esInt0,x
.39b1	ad c9 0a	lda $0ac9			lda 	basePage+1
.39b4	95 a0		sta $a0,x			sta 	esInt1,x
.39b6	60		rts				rts
.39b7					UnaryReference:
.39b7	a9 0f		lda #$0f			lda 	#15
.39b9	20 ec 35	jsr $35ec			jsr 	EvaluateLevel 				; evaluate term and don't deference.
.39bc	b5 90		lda $90,x			lda 	esType,x 					; check it's a reference.
.39be	10 05		bpl $39c5			bpl 	UType
.39c0	a9 00		lda #$00			lda 	#0 							; make it an integer
.39c2	95 90		sta $90,x			sta 	esType,x
.39c4	60		rts				rts
.39c5					UType:
.39c5	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.39c7	20 36 15	jsr $1536		jsr	errorHandler
.39ca					UnaryHexMarker:
.39ca	4c 47 37	jmp $3747			jmp 	EvaluateIntegerTerm
.39cd					UnaryComplement:
.39cd	20 47 37	jsr $3747			jsr 	EvaluateIntegerTerm
.39d0	20 e1 3d	jsr $3de1			jsr 	MInt32Not
.39d3	60		rts				rts
.39d4					UnaryIntToFloat:
.39d4	20 5f 37	jsr $375f			jsr 	EvaluateNumeric				; some number
.39d7	b5 90		lda $90,x			lda 	esType,x 					; if float already, exit
.39d9	d0 0b		bne $39e6			bne 	_UIFExit
.39db	8a		txa				txa 								; convert and set type
.39dc	a2 1c		ldx #$1c		ldx	#28
.39de	20 45 26	jsr $2645		jsr	floatingpointHandler
.39e1	aa		tax				tax
.39e2	a9 01		lda #$01			lda 	#1
.39e4	95 90		sta $90,x			sta 	esType,x
.39e6					_UIFExit:
.39e6	60		rts				rts
.39e7					UnaryFloatToInt:
.39e7	20 5f 37	jsr $375f			jsr 	EvaluateNumeric 			; the number
.39ea	b5 90		lda $90,x			lda 	esType,x 					; if int already exit
.39ec	f0 0b		beq $39f9			beq 	_UFIExit
.39ee	8a		txa				txa 								; convert to int
.39ef	a2 14		ldx #$14		ldx	#20
.39f1	20 45 26	jsr $2645		jsr	floatingpointHandler
.39f4	aa		tax				tax
.39f5	a9 00		lda #$00			lda 	#0 							; set type
.39f7	95 90		sta $90,x			sta 	esType,x
.39f9					_UFIExit:
.39f9	60		rts				rts
.39fa					UnaryAlloc:
.39fa	e8		inx				inx 								; evaluate memory required
.39fb	20 75 37	jsr $3775			jsr 	EvaluateInteger
.39fe	20 80 3e	jsr $3e80			jsr 	CheckRightParen
.3a01	ca		dex				dex
.3a02	b5 a9		lda $a9,x			lda 	esInt2+1,x 					; check at least in 64k range.
.3a04	15 b1		ora $b1,x			ora 	esInt3+1,x
.3a06	d0 1d		bne $3a25			bne 	_UABadValue
.3a08	20 0d 3e	jsr $3e0d			jsr 	MInt32False					; zero return.
.3a0b	a5 36		lda $36				lda 	lowMemory+1 				; copy low memory in
.3a0d	95 a0		sta $a0,x			sta 	esInt1,x
.3a0f	a5 35		lda $35				lda 	lowMemory
.3a11	95 98		sta $98,x			sta 	esInt0,x
.3a13	18		clc				clc 								; add alloc required.
.3a14	75 99		adc $99,x			adc 	esInt0+1,x
.3a16	85 35		sta $35				sta 	lowMemory
.3a18	a5 36		lda $36				lda 	lowMemory+1
.3a1a	75 a1		adc $a1,x			adc 	esInt1+1,x
.3a1c	85 36		sta $36				sta 	lowMemory+1
.3a1e	b0 05		bcs $3a25			bcs		_UABadValue 				; overflow definitely bad.
.3a20	c5 34		cmp $34				cmp 	highMemory+1
.3a22	b0 01		bcs $3a25			bcs 	_UABadValue 				; out of memory bad.
.3a24	60		rts				rts
.3a25					_UABadValue:
.3a25	a2 22		ldx #$22			ldx 	#ErrorID_Memory
.3a27	20 36 15	jsr $1536		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary/unary2.asm

.3a2a					UnaryTimer:
.3a2a	20 80 3e	jsr $3e80			jsr 	CheckRightParen 			; no parameters
.3a2d	98		tya				tya
.3a2e	48		pha				pha
.3a2f	20 34 3e	jsr $3e34			jsr 	MInt32Zero 					; zero result
.3a32	86 2a		stx $2a				stx 	temp0 						; returning in YA so can't use .pshx
.3a34	a2 1c		ldx #$1c		ldx	#28
.3a36	20 06 15	jsr $1506		jsr	deviceHandler
.3a39	a6 2a		ldx $2a				ldx 	temp0						; restore X and update 16 bit result
.3a3b	95 98		sta $98,x			sta 	esInt0,x
.3a3d	98		tya				tya
.3a3e	95 a0		sta $a0,x			sta 	esInt1,x
.3a40	68		pla				pla
.3a41	a8		tay				tay
.3a42	60		rts				rts
.3a43					UnaryInkey:
.3a43	20 80 3e	jsr $3e80			jsr 	CheckRightParen
.3a46	86 2a		stx $2a				stx 	temp0
.3a48	a2 0a		ldx #$0a		ldx	#10
.3a4a	20 06 15	jsr $1506		jsr	deviceHandler
.3a4d	a6 2a		ldx $2a				ldx 	temp0
.3a4f	20 1c 3e	jsr $3e1c			jsr 	MInt32Set8Bit
.3a52	60		rts				rts
.3a53					UnaryGet:
.3a53	20 80 3e	jsr $3e80			jsr 	CheckRightParen
.3a56	86 2a		stx $2a				stx 	temp0
.3a58					_UGLoop:
.3a58	a2 02		ldx #$02		ldx	#2
.3a5a	20 06 15	jsr $1506		jsr	deviceHandler
.3a5d	a2 0a		ldx #$0a		ldx	#10
.3a5f	20 06 15	jsr $1506		jsr	deviceHandler
.3a62	c9 00		cmp #$00			cmp 	#0
.3a64	f0 f2		beq $3a58			beq 	_UGLoop
.3a66	a6 2a		ldx $2a				ldx 	temp0
.3a68	20 1c 3e	jsr $3e1c			jsr 	MInt32Set8Bit
.3a6b	60		rts				rts
.3a6c					UnaryGetString:
.3a6c	20 53 3a	jsr $3a53			jsr 	UnaryGet
.3a6f					UGSDoChr:
.3a6f	4c c0 3a	jmp $3ac0			jmp 	ChrCode
.3a72					UnaryInkeyString:
.3a72	20 43 3a	jsr $3a43			jsr 	UnaryInkey
.3a75	b5 98		lda $98,x			lda 	esInt0,x
.3a77	d0 f6		bne $3a6f			bne 	UGSDoChr
.3a79	8a		txa				txa
.3a7a	a2 08		ldx #$08		ldx	#8
.3a7c	20 c6 41	jsr $41c6		jsr	stringHandler
.3a7f	aa		tax				tax
.3a80	60		rts				rts
.3a81					UnarySys:
.3a81	20 75 37	jsr $3775			jsr 	EvaluateInteger 				; get the address
.3a84	20 80 3e	jsr $3e80			jsr 	CheckRightParen
.3a87	20 45 2b	jsr $2b45			jsr 	TOSToTemp0 						; copy call address to temp0
.3a8a	8a		txa				txa
.3a8b	48		pha				pha
.3a8c	98		tya				tya
.3a8d	48		pha				pha
.3a8e	ad 00 0a	lda $0a00			lda 	("A"-"A")*4+SingleLetterVar 	; load AXY
.3a91	ae 5c 0a	ldx $0a5c			ldx 	("X"-"A")*4+SingleLetterVar
.3a94	ac 60 0a	ldy $0a60			ldy 	("Y"-"A")*4+SingleLetterVar
.3a97	20 a6 3a	jsr $3aa6			jsr 	_CallTemp0
.3a9a	85 32		sta $32				sta 	tempShort 						; restore YX
.3a9c	68		pla				pla
.3a9d	a8		tay				tay
.3a9e	68		pla				pla
.3a9f	aa		tax				tax
.3aa0	a5 32		lda $32				lda 	tempShort
.3aa2	20 1c 3e	jsr $3e1c			jsr 	MInt32Set8Bit 					; return result.
.3aa5	60		rts				rts
.3aa6					_CallTemp0:
.3aa6	6c 2a 00	jmp ($002a)			jmp 	(temp0)
.3aa9					UnaryMem:
.3aa9	20 0d 3e	jsr $3e0d			jsr 	MInt32False 					; set to false (e.g. 0)
.3aac	38		sec				sec
.3aad	a5 33		lda $33				lda 	highMemory 						; calculate value
.3aaf	e5 35		sbc $35				sbc 	lowMemory
.3ab1	95 98		sta $98,x			sta 	esInt0,x
.3ab3	a5 34		lda $34				lda 	highMemory+1
.3ab5	e5 36		sbc $36				sbc 	lowMemory+1
.3ab7	95 a0		sta $a0,x			sta 	esInt1,x
.3ab9	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary/unarystr.asm

.3aba					ExecChr:
.3aba	20 7d 37	jsr $377d			jsr 	EvaluateSmallInteger		; character number 0-255
.3abd	20 80 3e	jsr $3e80			jsr 	CheckRightParen				; right bracket
.3ac0					ChrCode:
.3ac0	98		tya				tya
.3ac1	48		pha				pha
.3ac2	8a		txa				txa 								; A = stack
.3ac3	b4 98		ldy $98,x			ldy 	esInt0,x					; Y = character
.3ac5	a2 02		ldx #$02		ldx	#2
.3ac7	20 c6 41	jsr $41c6		jsr	stringHandler
.3aca	aa		tax				tax 								; X = stack
.3acb	68		pla				pla
.3acc	a8		tay				tay
.3acd	60		rts				rts
.3ace					ExecLower:
.3ace	38		sec				sec 								; set carry is lower
.3acf	b0 01		bcs $3ad2			bcs 	ExecUpperLower
.3ad1					ExecUpper:
.3ad1	18		clc				clc 								; clear carry is upper
.3ad2					ExecUpperLower:
.3ad2	08		php				php 								; save carry
.3ad3	20 6a 37	jsr $376a			jsr 	EvaluateString 				; string to stack,X
.3ad6	20 80 3e	jsr $3e80			jsr 	CheckRightParen 			; check closing right bracket.
.3ad9	28		plp				plp 								; restore carry, save Y
.3ada	98		tya				tya
.3adb	48		pha				pha
.3adc	a9 00		lda #$00			lda 	#0 							; A zero if upper, 1 if lower.
.3ade	2a		rol a				rol 	a
.3adf	a8		tay				tay 								; now in Y
.3ae0	8a		txa				txa 								; do the substring and exit.
.3ae1	a2 0c		ldx #$0c		ldx	#12
.3ae3	20 c6 41	jsr $41c6		jsr	stringHandler
.3ae6	aa		tax				tax
.3ae7	68		pla				pla
.3ae8	a8		tay				tay
.3ae9	60		rts				rts
.3aea					ExecLeft:
.3aea	20 6a 37	jsr $376a			jsr 	EvaluateString 				; string to stack,X
.3aed	20 8d 3e	jsr $3e8d			jsr 	CheckComma
.3af0	e8		inx				inx
.3af1	a9 01		lda #$01			lda 	#1 							; 1 for 2nd parameter.
.3af3	20 1c 3e	jsr $3e1c			jsr 	MInt32Set8Bit
.3af6	e8		inx				inx
.3af7	20 7d 37	jsr $377d			jsr 	EvaluateSmallInteger 		; smallint 3rd parameter
.3afa					ExecSubstring:
.3afa	ca		dex				dex 								; fix up X
.3afb	ca		dex				dex
.3afc	20 80 3e	jsr $3e80			jsr 	CheckRightParen 			; check closing right bracket.
.3aff	8a		txa				txa 								; do the substring and exit.
.3b00	a2 0e		ldx #$0e		ldx	#14
.3b02	20 c6 41	jsr $41c6		jsr	stringHandler
.3b05	aa		tax				tax
.3b06	60		rts				rts
.3b07					ExecMid:
.3b07	20 6a 37	jsr $376a			jsr 	EvaluateString 				; string to stack,X
.3b0a	20 8d 3e	jsr $3e8d			jsr 	CheckComma
.3b0d	e8		inx				inx
.3b0e	20 7d 37	jsr $377d			jsr 	EvaluateSmallInteger 		; smallint 2nd parameter
.3b11	c9 00		cmp #$00			cmp 	#0
.3b13	f0 15		beq $3b2a			beq 	_EMValue
.3b15	e8		inx				inx
.3b16	a9 ff		lda #$ff			lda 	#255 						; 255 default for 3nd parameter - this is optional.
.3b18	20 1c 3e	jsr $3e1c			jsr 	MInt32Set8Bit
.3b1b	b1 28		lda ($28),y			lda 	(codePtr),y 				; is there a ) next
.3b1d	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN 				; if so, just MID$(a$,2)
.3b1f	f0 d9		beq $3afa			beq 	ExecSubString
.3b21	20 8d 3e	jsr $3e8d			jsr 	CheckComma
.3b24	20 7d 37	jsr $377d			jsr 	EvaluateSmallInteger 		; smallint 2nd parameter
.3b27	4c fa 3a	jmp $3afa			jmp 	ExecSubString
.3b2a					_EMValue:
.3b2a	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.3b2c	20 36 15	jsr $1536		jsr	errorHandler
.3b2f					ExecRight:
.3b2f	20 6a 37	jsr $376a			jsr 	EvaluateString 				; string to stack,X
.3b32	20 8d 3e	jsr $3e8d			jsr 	CheckComma
.3b35	e8		inx				inx
.3b36	20 7d 37	jsr $377d			jsr 	EvaluateSmallInteger 		; smallint 2nd parameter.
.3b39	ca		dex				dex
.3b3a	98		tya				tya
.3b3b	48		pha				pha
.3b3c	b5 98		lda $98,x			lda 	esInt0,x 					; copy address of string to temp0
.3b3e	85 2a		sta $2a				sta 	temp0
.3b40	b5 a0		lda $a0,x			lda 	esInt1,x
.3b42	85 2b		sta $2b				sta 	temp0+1
.3b44	a0 00		ldy #$00			ldy 	#0 							; point to length
.3b46	b1 2a		lda ($2a),y			lda 	(temp0),y 					; get the length.
.3b48	18		clc				clc 								; add 1.
.3b49	69 01		adc #$01			adc 	#1
.3b4b	38		sec				sec
.3b4c	f5 99		sbc $99,x			sbc 	esInt0+1,x  				; subtract right count.
.3b4e	f0 02		beq $3b52			beq		_ERMake1 					; if zero, make it 1.
.3b50	b0 02		bcs $3b54			bcs		_EROkay
.3b52					_ERMake1:
.3b52	a9 01		lda #$01			lda 	#1 							; start position.
.3b54					_EROkay:
.3b54	e8		inx				inx 								; set start pos.
.3b55	95 98		sta $98,x			sta 	esInt0,x
.3b57	e8		inx				inx
.3b58	a9 ff		lda #$ff			lda 	#255 						; 255 default for 3nd parameter.
.3b5a	20 1c 3e	jsr $3e1c			jsr 	MInt32Set8Bit
.3b5d	68		pla				pla
.3b5e	a8		tay				tay
.3b5f	4c fa 3a	jmp $3afa			jmp 	ExecSubString 				; do the substring code.

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32binary.asm

.3b62					MInt32And:
.3b62	b5 98		lda $98,x			lda 	esInt0,x
.3b64	35 99		and $99,x			and 	esInt0+1,x
.3b66	95 98		sta $98,x			sta 	esInt0,x
.3b68	b5 a0		lda $a0,x			lda 	esInt1,x
.3b6a	35 a1		and $a1,x			and 	esInt1+1,x
.3b6c	95 a0		sta $a0,x			sta 	esInt1,x
.3b6e	b5 a8		lda $a8,x			lda 	esInt2,x
.3b70	35 a9		and $a9,x			and 	esInt2+1,x
.3b72	95 a8		sta $a8,x			sta 	esInt2,x
.3b74	b5 b0		lda $b0,x			lda 	esInt3,x
.3b76	35 b1		and $b1,x			and 	esInt3+1,x
.3b78	95 b0		sta $b0,x			sta 	esInt3,x
.3b7a	60		rts				rts
.3b7b					MInt32Or:
.3b7b	b5 98		lda $98,x			lda 	esInt0,x
.3b7d	15 99		ora $99,x			ora 	esInt0+1,x
.3b7f	95 98		sta $98,x			sta 	esInt0,x
.3b81	b5 a0		lda $a0,x			lda 	esInt1,x
.3b83	15 a1		ora $a1,x			ora 	esInt1+1,x
.3b85	95 a0		sta $a0,x			sta 	esInt1,x
.3b87	b5 a8		lda $a8,x			lda 	esInt2,x
.3b89	15 a9		ora $a9,x			ora 	esInt2+1,x
.3b8b	95 a8		sta $a8,x			sta 	esInt2,x
.3b8d	b5 b0		lda $b0,x			lda 	esInt3,x
.3b8f	15 b1		ora $b1,x			ora 	esInt3+1,x
.3b91	95 b0		sta $b0,x			sta 	esInt3,x
.3b93	60		rts				rts
.3b94					MInt32Xor:
.3b94	b5 98		lda $98,x			lda 	esInt0,x
.3b96	55 99		eor $99,x			eor 	esInt0+1,x
.3b98	95 98		sta $98,x			sta 	esInt0,x
.3b9a	b5 a0		lda $a0,x			lda 	esInt1,x
.3b9c	55 a1		eor $a1,x			eor 	esInt1+1,x
.3b9e	95 a0		sta $a0,x			sta 	esInt1,x
.3ba0	b5 a8		lda $a8,x			lda 	esInt2,x
.3ba2	55 a9		eor $a9,x			eor 	esInt2+1,x
.3ba4	95 a8		sta $a8,x			sta 	esInt2,x
.3ba6	b5 b0		lda $b0,x			lda 	esInt3,x
.3ba8	55 b1		eor $b1,x			eor 	esInt3+1,x
.3baa	95 b0		sta $b0,x			sta 	esInt3,x
.3bac	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32compare.asm

.3bad					MInt32Compare:
.3bad	b5 98		lda $98,x			lda 	esInt0,x 					; equality check first.
.3baf	d5 99		cmp $99,x			cmp 	esInt0+1,x
.3bb1	d0 13		bne $3bc6			bne 	MInt32Compare2
.3bb3	b5 a0		lda $a0,x			lda 	esInt1,x
.3bb5	d5 a1		cmp $a1,x			cmp 	esInt1+1,x
.3bb7	d0 0d		bne $3bc6			bne 	MInt32Compare2
.3bb9	b5 a8		lda $a8,x			lda 	esInt2,x
.3bbb	d5 a9		cmp $a9,x			cmp 	esInt2+1,x
.3bbd	d0 07		bne $3bc6			bne 	MInt32Compare2
.3bbf	b5 b0		lda $b0,x			lda 	esInt3,x
.3bc1	55 b1		eor $b1,x			eor 	esInt3+1,x 					; EOR will return 0 if the same.
.3bc3	d0 01		bne $3bc6			bne 	MInt32Compare2
.3bc5	60		rts				rts
.3bc6					MInt32Compare2:
.3bc6	b5 98		lda $98,x			lda		esInt0,x 					; unsigned 32 bit comparison.
.3bc8	d5 99		cmp $99,x			cmp 	esInt0+1,x
.3bca	b5 a0		lda $a0,x			lda		esInt1,x
.3bcc	f5 a1		sbc $a1,x			sbc 	esInt1+1,x
.3bce	b5 a8		lda $a8,x			lda		esInt2,x
.3bd0	f5 a9		sbc $a9,x			sbc 	esInt2+1,x
.3bd2	b5 b0		lda $b0,x			lda		esInt3,x
.3bd4	f5 b1		sbc $b1,x			sbc 	esInt3+1,x
.3bd6	50 02		bvc $3bda			bvc 	_I32LNoOverflow 			; make it signed 32 bit comparison
.3bd8	49 80		eor #$80			eor 	#$80
.3bda					_I32LNoOverflow
.3bda	30 03		bmi $3bdf			bmi 	MInt32CLess					; if -ve then return $FF
.3bdc	a9 01		lda #$01			lda 	#$01						; else return $01
.3bde	60		rts				rts
.3bdf					MInt32CLess:
.3bdf	a9 ff		lda #$ff			lda 	#$FF
.3be1	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32divide.asm

.3be2					MInt32SDivide:
.3be2	98		tya				tya  								; save Y, which is the count of negations
.3be3	48		pha				pha
.3be4	a0 00		ldy #$00			ldy 	#0 							; zero count
.3be6	20 fe 3b	jsr $3bfe			jsr 	_MInt32SRemSign 			; unsign TOS
.3be9	e8		inx				inx 								; unsign TOS+1
.3bea	20 fe 3b	jsr $3bfe			jsr 	_MInt32SRemSign
.3bed	ca		dex				dex
.3bee	98		tya				tya 								; save sign count on stack
.3bef	48		pha				pha
.3bf0	20 07 3c	jsr $3c07			jsr 	MInt32UDivide 				; unsigned division
.3bf3	68		pla				pla 								; get sign count back
.3bf4	29 01		and #$01			and 	#1 							; if it is odd, then negate result
.3bf6	f0 03		beq $3bfb			beq 	_I32SNoNeg
.3bf8	20 c7 3d	jsr $3dc7			jsr 	MInt32Negate
.3bfb					_I32SNoNeg:
.3bfb	68		pla				pla 								; restoe Y and exit
.3bfc	a8		tay				tay
.3bfd	60		rts				rts
.3bfe					_MInt32SRemSign:
.3bfe	b5 b0		lda $b0,x			lda 	esInt3,x 					; is it -ve
.3c00	10 04		bpl $3c06			bpl 	_MInt32SRSExit
.3c02	c8		iny				iny 								; increment the sign count
.3c03	20 c7 3d	jsr $3dc7			jsr 	MInt32Negate 				; negate the value.
.3c06					_MInt32SRSExit:
.3c06	60		rts				rts
.3c07					MInt32UDivide:
.3c07	b5 99		lda $99,x			lda 	esInt0+1,x 					; check for division by zero
.3c09	15 a1		ora $a1,x			ora 	esInt1+1,x
.3c0b	15 a2		ora $a2,x			ora 	esInt1+2,x
.3c0d	15 a3		ora $a3,x			ora 	esInt1+3,x
.3c0f	f0 4a		beq $3c5b			beq 	_MInt32DZero
.3c11	e8		inx				inx 								; clear A
.3c12	e8		inx				inx
.3c13	20 0d 3e	jsr $3e0d			jsr 	MInt32False
.3c16	ca		dex				dex
.3c17	ca		dex				dex
.3c18	98		tya				tya 								; save Y on the stack
.3c19	48		pha				pha
.3c1a	a0 20		ldy #$20			ldy 	#32 						; number of division passes
.3c1c					_MInt32UDLoop:
.3c1c	16 98		asl $98,x			asl 	esInt0,x					; shift QA left. First Q
.3c1e	36 a0		rol $a0,x			rol 	esInt1,x
.3c20	36 a8		rol $a8,x			rol 	esInt2,x
.3c22	36 b0		rol $b0,x			rol 	esInt3,x
.3c24	36 9a		rol $9a,x			rol 	esInt0+2,x 					; then A.
.3c26	36 a2		rol $a2,x			rol 	esInt1+2,x
.3c28	36 aa		rol $aa,x			rol 	esInt2+2,x
.3c2a	36 b2		rol $b2,x			rol 	esInt3+2,x
.3c2c	38		sec				sec 								; calculate A-M saving result on the stack
.3c2d	b5 9a		lda $9a,x			lda 	esInt0+2,x
.3c2f	f5 99		sbc $99,x			sbc 	esInt0+1,x
.3c31	48		pha				pha
.3c32	b5 a2		lda $a2,x			lda 	esInt1+2,x
.3c34	f5 a1		sbc $a1,x			sbc 	esInt1+1,x
.3c36	48		pha				pha
.3c37	b5 aa		lda $aa,x			lda 	esInt2+2,x
.3c39	f5 a9		sbc $a9,x			sbc 	esInt2+1,x
.3c3b	48		pha				pha
.3c3c	b5 b2		lda $b2,x			lda 	esInt3+2,x
.3c3e	f5 b1		sbc $b1,x			sbc 	esInt3+1,x
.3c40	90 10		bcc $3c52			bcc		_MInt32NoSubtract 			; if A < M (e.g. carry clear) then reject this.
.3c42	95 b2		sta $b2,x			sta 	esInt3+2,x 					; write result back to A
.3c44	68		pla				pla
.3c45	95 aa		sta $aa,x			sta 	esInt2+2,x
.3c47	68		pla				pla
.3c48	95 a2		sta $a2,x			sta 	esInt1+2,x
.3c4a	68		pla				pla
.3c4b	95 9a		sta $9a,x			sta 	esInt0+2,x
.3c4d	f6 98		inc $98,x			inc 	esInt0,x 					; sets bit 0 of Q - it was shifted left previously.
.3c4f	4c 55 3c	jmp $3c55			jmp 	_MInt32Next 					; do the next iteration
.3c52					_MInt32NoSubtract:
.3c52	68		pla				pla
.3c53	68		pla				pla
.3c54	68		pla				pla
.3c55					_MInt32Next:
.3c55	88		dey				dey 								; do this 32 times.
.3c56	d0 c4		bne $3c1c			bne 	_MInt32UDLoop
.3c58	68		pla				pla 								; restore Y and exit
.3c59	a8		tay				tay
.3c5a	60		rts				rts
.3c5b					_MInt32DZero:
.3c5b	a2 05		ldx #$05			ldx 	#ErrorID_DivZero
.3c5d	20 36 15	jsr $1536		jsr	errorHandler
.3c60					MInt32Modulus:
.3c60	20 07 3c	jsr $3c07			jsr 	MInt32UDivide 				; do the division.
.3c63	b5 b2		lda $b2,x			lda 	esInt3+2,x 					; copy 2nd on stack (the remainder) to the top.
.3c65	95 b0		sta $b0,x			sta 	esInt3,x
.3c67	b5 aa		lda $aa,x			lda 	esInt2+2,x
.3c69	95 a8		sta $a8,x			sta 	esInt2,x
.3c6b	b5 a2		lda $a2,x			lda 	esInt1+2,x
.3c6d	95 a0		sta $a0,x			sta 	esInt1,x
.3c6f	b5 9a		lda $9a,x			lda 	esInt0+2,x
.3c71	95 98		sta $98,x			sta 	esInt0,x
.3c73	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32fromstr.asm

.0d61					fs32Length:
>0d61							.fill 	1
.3c74					LinkInt32FromString:
.3c74	aa		tax				tax
.3c75	98		tya				tya
.3c76	20 7b 3c	jsr $3c7b			jsr 	MInt32FromString
.3c79	8a		txa				txa
.3c7a	60		rts				rts
.3c7b					MInt32FromString:
.3c7b	85 32		sta $32				sta 	tempShort 					; save base
.3c7d	98		tya				tya
.3c7e	48		pha				pha
.3c7f	a0 00		ldy #$00			ldy 	#0 							; get length of string to convert
.3c81	b1 2a		lda ($2a),y			lda 	(temp0),y
.3c83	8d 61 0d	sta $0d61			sta 	fs32Length
.3c86	f0 65		beq $3ced			beq 	_I32FSFail2					; fail if length zero.
.3c88	a0 01		ldy #$01			ldy 	#1 							; set index into string being read
.3c8a	b1 2a		lda ($2a),y			lda 	(temp0),y 					; look at first character
.3c8c	c9 2d		cmp #$2d			cmp 	#"-"						; is it a - character
.3c8e	d0 09		bne $3c99			bne 	_I32FSNotNegative
.3c90	ad 61 0d	lda $0d61			lda 	fs32Length 					; get length back.
.3c93	c9 01		cmp #$01			cmp 	#1 							; if 1 it is just a - on its own so fail.
.3c95	f0 56		beq $3ced			beq 	_I32FSFail2
.3c97	a0 02		ldy #$02			ldy 	#2 							; first digit of the number.
.3c99					_I32FSNotNegative:
.3c99	a5 32		lda $32				lda 	tempShort 					; get the base back.
.3c9b	c0 02		cpy #$02			cpy 	#2 							; if we read a -ve (e.g. Y == 2)
.3c9d	d0 02		bne $3ca1			bne 	_I32FSNN2
.3c9f	09 80		ora #$80			ora 	#$80						; set bit 7, this indicates a negated result.
.3ca1					_I32FSNN2:
.3ca1	48		pha				pha 								; save base + final sign on stack.
.3ca2	20 0d 3e	jsr $3e0d			jsr 	MInt32False 				; zero the return value.
.3ca5					_I32FSMainLoop:
.3ca5	68		pla				pla 								; get the base back into tempShort
.3ca6	48		pha				pha
.3ca7	29 7f		and #$7f			and 	#$7F
.3ca9	85 32		sta $32				sta 	tempShort
.3cab	b1 2a		lda ($2a),y			lda 	(temp0),y 					; look at next character.
.3cad	c9 61		cmp #$61			cmp 	#"a" 						; fix up case.
.3caf	90 02		bcc $3cb3			bcc 	_I32FSNotLC
.3cb1	e9 20		sbc #$20			sbc 	#32
.3cb3					_I32FSNotLC:
.3cb3	38		sec				sec 								; subtract 48 (ASCII "0") - ASCII to Hex conversion
.3cb4	e9 30		sbc #$30			sbc 	#"0"
.3cb6	90 34		bcc $3cec			bcc 	_I32FSFail 					; nothing more to do.
.3cb8	c9 0a		cmp #$0a			cmp 	#9+1 						; if it is 0-9 validate vs base.
.3cba	90 06		bcc $3cc2			bcc 	_I32FSValidate
.3cbc	c9 11		cmp #$11			cmp 	#17 						; is it between 58 and 64 ? if so bad.
.3cbe	90 2c		bcc $3cec			bcc 	_I32FSFail
.3cc0	e9 07		sbc #$07			sbc 	#7 							; adjust into range so now character is 0->nnn
.3cc2					_I32FSValidate:
.3cc2	c5 32		cmp $32				cmp 	tempShort 					; compare against the base.
.3cc4	b0 26		bcs $3cec			bcs 	_I32FSFail 					; sorry, too large for this base, so fail.
.3cc6	48		pha				pha 								; save the new digit value.
.3cc7	e8		inx				inx 								; put base into next slot up on stack
.3cc8	a5 32		lda $32				lda 	tempShort
.3cca	20 1c 3e	jsr $3e1c			jsr 	MInt32Set8Bit
.3ccd	ca		dex				dex
.3cce	20 25 3d	jsr $3d25			jsr 	MInt32Multiply 				; multiply current by the base
.3cd1	e8		inx				inx
.3cd2	68		pla				pla  								; put additive into next slot
.3cd3	20 1c 3e	jsr $3e1c			jsr 	MInt32Set8Bit
.3cd6	ca		dex				dex
.3cd7	20 f1 3c	jsr $3cf1			jsr 	MInt32Add 					; and add it
.3cda	c8		iny				iny 								; bump the character pointer
.3cdb	cc 61 0d	cpy $0d61			cpy 	fs32Length 					; until > length.
.3cde	f0 c5		beq $3ca5			beq 	_I32FSMainLoop
.3ce0	90 c3		bcc $3ca5			bcc 	_I32FSMainLoop
.3ce2					_I32FSDone:
.3ce2	68		pla				pla 								; get base/final sign back
.3ce3	10 03		bpl $3ce8			bpl 	_I32FSNN3
.3ce5	20 c7 3d	jsr $3dc7			jsr 	MInt32Negate 				; negate the result.
.3ce8					_I32FSNN3:
.3ce8	68		pla				pla
.3ce9	a8		tay				tay
.3cea	38		sec				sec
.3ceb	60		rts				rts
.3cec					_I32FSFail:
.3cec	68		pla				pla
.3ced					_I32FSFail2:
.3ced	68		pla				pla
.3cee	a8		tay				tay
.3cef	18		clc				clc
.3cf0	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32math.asm

.3cf1					MInt32Add:
.3cf1	18		clc				clc
.3cf2	b5 98		lda $98,x			lda 	esInt0,x
.3cf4	75 99		adc $99,x			adc 	esInt0+1,x
.3cf6	95 98		sta $98,x			sta 	esInt0,x
.3cf8	b5 a0		lda $a0,x			lda 	esInt1,x
.3cfa	75 a1		adc $a1,x			adc 	esInt1+1,x
.3cfc	95 a0		sta $a0,x			sta 	esInt1,x
.3cfe	b5 a8		lda $a8,x			lda 	esInt2,x
.3d00	75 a9		adc $a9,x			adc 	esInt2+1,x
.3d02	95 a8		sta $a8,x			sta 	esInt2,x
.3d04	b5 b0		lda $b0,x			lda 	esInt3,x
.3d06	75 b1		adc $b1,x			adc 	esInt3+1,x
.3d08	95 b0		sta $b0,x			sta 	esInt3,x
.3d0a	60		rts				rts
.3d0b					MInt32Sub:
.3d0b	38		sec				sec
.3d0c	b5 98		lda $98,x			lda 	esInt0,x
.3d0e	f5 99		sbc $99,x			sbc 	esInt0+1,x
.3d10	95 98		sta $98,x			sta 	esInt0,x
.3d12	b5 a0		lda $a0,x			lda 	esInt1,x
.3d14	f5 a1		sbc $a1,x			sbc 	esInt1+1,x
.3d16	95 a0		sta $a0,x			sta 	esInt1,x
.3d18	b5 a8		lda $a8,x			lda 	esInt2,x
.3d1a	f5 a9		sbc $a9,x			sbc 	esInt2+1,x
.3d1c	95 a8		sta $a8,x			sta 	esInt2,x
.3d1e	b5 b0		lda $b0,x			lda 	esInt3,x
.3d20	f5 b1		sbc $b1,x			sbc 	esInt3+1,x
.3d22	95 b0		sta $b0,x			sta 	esInt3,x
.3d24	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32multiply.asm

.3d25					MInt32Multiply:
.3d25	e8		inx				inx 								; copy 2nd -> 3rd
.3d26	20 4b 3d	jsr $3d4b			jsr 	MInt32CopyUp
.3d29	ca		dex				dex
.3d2a	20 4b 3d	jsr $3d4b			jsr 	MInt32CopyUp 				; copy 1st -> 2nd
.3d2d	20 0d 3e	jsr $3e0d			jsr 	MInt32False 				; zero 1st.
.3d30					_I32Loop:
.3d30	b5 9a		lda $9a,x			lda 	esInt0+2,x 					; get low bit of 3rd
.3d32	29 01		and #$01			and 	#1
.3d34	f0 03		beq $3d39			beq 	_I32NoAdd 					; if set
.3d36	20 f1 3c	jsr $3cf1			jsr 	MInt32Add 					; add 2nd to 1st.
.3d39					_I32NoAdd:
.3d39	e8		inx				inx 								; shift 2nd left
.3d3a	20 22 3e	jsr $3e22			jsr 	MInt32ShiftLeft
.3d3d	e8		inx				inx  								; shift 3rd right
.3d3e	20 2b 3e	jsr $3e2b			jsr 	MInt32ShiftRight
.3d41	20 34 3e	jsr $3e34			jsr 	MInt32Zero 					; check if zero.
.3d44	08		php				php 								; save status bits
.3d45	ca		dex				dex 	 							; point back to 1st
.3d46	ca		dex				dex
.3d47	28		plp				plp 								; get status bits
.3d48	d0 e6		bne $3d30			bne 	_I32Loop 					; if non-zero keep going.
.3d4a	60		rts				rts
.3d4b					MInt32CopyUp:
.3d4b	b5 98		lda $98,x			lda 	esInt0,x
.3d4d	95 99		sta $99,x			sta 	esInt0+1,x
.3d4f	b5 a0		lda $a0,x			lda 	esInt1,x
.3d51	95 a1		sta $a1,x			sta 	esInt1+1,x
.3d53	b5 a8		lda $a8,x			lda 	esInt2,x
.3d55	95 a9		sta $a9,x			sta 	esInt2+1,x
.3d57	b5 b0		lda $b0,x			lda 	esInt3,x
.3d59	95 b1		sta $b1,x			sta 	esInt3+1,x
.3d5b	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32tostr.asm

>0d62					MCharCount:	.fill 	1						; count of converted characters
.3d5c					MLInt32ToString:
.3d5c	aa		tax				tax									; module passes stack in A, base in Y
.3d5d	98		tya				tya
.3d5e	20 63 3d	jsr $3d63			jsr 	MInt32ToString
.3d61	8a		txa				txa
.3d62	60		rts				rts
.3d63					MInt32ToString:
.3d63	48		pha				pha 								; save base
.3d64	85 32		sta $32				sta 	tempShort 					; save target base.
.3d66	a9 00		lda #$00			lda 	#0
.3d68	8d 62 0d	sta $0d62			sta 	MCharCount 					; clear character count to 0
.3d6b	98		tya				tya
.3d6c	48		pha				pha
.3d6d	a5 32		lda $32				lda 	tempShort 					; check if we are signed conversion
.3d6f	10 10		bpl $3d81			bpl 	_I32TSUnsigned
.3d71	48		pha				pha 								; save base on stack.
.3d72	b5 b0		lda $b0,x			lda 	esInt3,x 					; is it actually negative
.3d74	10 08		bpl $3d7e			bpl 	_I32TSNoFlip
.3d76	a9 2d		lda #$2d			lda 	#"-" 						; write a '-' prefix out.
.3d78	20 b4 3d	jsr $3db4			jsr 	MI32WriteCharacter
.3d7b	20 c7 3d	jsr $3dc7			jsr 	MInt32Negate 				; negate the value, so now it's positive.
.3d7e					_I32TSNoFlip:
.3d7e	68		pla				pla 								; get the base back
.3d7f	29 7f		and #$7f			and 	#$7F 						; clear the sign flag so it's just a base now.
.3d81					_I32TSUnsigned:
.3d81	20 8f 3d	jsr $3d8f			jsr 	MI32DivideWrite 			; recursive code to output string.
.3d84	a0 00		ldy #$00			ldy 	#0 							; write charcount to first character.
.3d86	ad 62 0d	lda $0d62			lda 	MCharCount
.3d89	91 2a		sta ($2a),y			sta 	(temp0),y
.3d8b	68		pla				pla
.3d8c	a8		tay				tay
.3d8d	68		pla				pla
.3d8e	60		rts				rts
.3d8f					MI32DivideWrite:
.3d8f	48		pha				pha 								; save the divisor/base
.3d90	e8		inx				inx 								; write in the dividing position.
.3d91	20 1c 3e	jsr $3e1c			jsr 	MInt32Set8Bit
.3d94	ca		dex				dex
.3d95	20 07 3c	jsr $3c07			jsr 	MInt32UDivide 				; divide number by base.
.3d98	68		pla				pla 								; get the base into Y
.3d99	a8		tay				tay
.3d9a	b5 9a		lda $9a,x			lda 	esInt0+2,x 					; get the remainder and push on the stack.
.3d9c	48		pha				pha
.3d9d	20 34 3e	jsr $3e34			jsr 	MInt32Zero 					; is the result zero ?
.3da0	f0 04		beq $3da6			beq 	_I32NoRecurse 				; if so, don't recurse.
.3da2	98		tya				tya 								; put base into A
.3da3	20 8f 3d	jsr $3d8f			jsr 	MI32DivideWrite 				; and jsr the dividor recursively.
.3da6					_I32NoRecurse:
.3da6	68		pla				pla 								; get the remainder back
.3da7	c9 0a		cmp #$0a			cmp 	#10  						; handle hexadecimals, now converting to ASCII
.3da9	90 02		bcc $3dad			bcc 	_I32NotHex
.3dab	69 06		adc #$06			adc 	#7-1
.3dad					_I32NotHex:
.3dad	18		clc				clc 								; make it ASCII
.3dae	69 30		adc #$30			adc 	#48
.3db0	20 b4 3d	jsr $3db4			jsr 	MI32WriteCharacter 			; write the character out
.3db3	60		rts				rts 								; and exit.
.3db4					MI32WriteCharacter:
.3db4	ee 62 0d	inc $0d62			inc 	MCharCount 					; bump count (space for leading count)
.3db7	ac 62 0d	ldy $0d62			ldy 	MCharCount 					; get position
.3dba	91 2a		sta ($2a),y			sta 	(temp0),y 					; write out with trailing 0
.3dbc	c8		iny				iny
.3dbd	a9 00		lda #$00			lda 	#0
.3dbf	91 2a		sta ($2a),y			sta 	(temp0),y
.3dc1	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32unary.asm

>0d63					MSeed32:	.fill 	4							; random number seed.
.3dc2					MInt32Absolute:
.3dc2	b5 b0		lda $b0,x			lda 	esInt3,x 					; use negate code if -ve.
.3dc4	30 01		bmi $3dc7			bmi 	MInt32Negate
.3dc6	60		rts				rts
.3dc7					MInt32Negate:
.3dc7	38		sec				sec 								; subtract from zero.
.3dc8	a9 00		lda #$00			lda 	#0
.3dca	f5 98		sbc $98,x			sbc 	esInt0,x
.3dcc	95 98		sta $98,x			sta 	esInt0,x
.3dce	a9 00		lda #$00			lda 	#0
.3dd0	f5 a0		sbc $a0,x			sbc 	esInt1,x
.3dd2	95 a0		sta $a0,x			sta 	esInt1,x
.3dd4	a9 00		lda #$00			lda 	#0
.3dd6	f5 a8		sbc $a8,x			sbc 	esInt2,x
.3dd8	95 a8		sta $a8,x			sta 	esInt2,x
.3dda	a9 00		lda #$00			lda 	#0
.3ddc	f5 b0		sbc $b0,x			sbc 	esInt3,x
.3dde	95 b0		sta $b0,x			sta 	esInt3,x
.3de0	60		rts				rts
.3de1					MInt32Not:
.3de1	b5 98		lda $98,x			lda 	esInt0,x 					; one's complement all four.
.3de3	49 ff		eor #$ff			eor 	#$FF
.3de5	95 98		sta $98,x			sta 	esInt0,x
.3de7	b5 a0		lda $a0,x			lda 	esInt1,x
.3de9	49 ff		eor #$ff			eor 	#$FF
.3deb	95 a0		sta $a0,x			sta 	esInt1,x
.3ded	b5 a8		lda $a8,x			lda 	esInt2,x
.3def	49 ff		eor #$ff			eor 	#$FF
.3df1	95 a8		sta $a8,x			sta 	esInt2,x
.3df3	b5 b0		lda $b0,x			lda 	esInt3,x
.3df5	49 ff		eor #$ff			eor 	#$FF
.3df7	95 b0		sta $b0,x			sta 	esInt3,x
.3df9	60		rts				rts
.3dfa					MInt32Sign:
.3dfa	b5 b0		lda $b0,x			lda 	esInt3,x					; look at MSB
.3dfc	30 0b		bmi $3e09			bmi 	MInt32True 					; if set return -1 (true)
.3dfe	20 34 3e	jsr $3e34			jsr 	MInt32Zero 					; is it zero ?
.3e01	f0 0a		beq $3e0d			beq 	MInt32False 				; if zero return 0 (false)
.3e03	20 0d 3e	jsr $3e0d			jsr 	MInt32False 				; > 0 return 1, by setting it to zero
.3e06	f6 98		inc $98,x			inc 	esInt0,x  					; and bumping the LSB.
.3e08	60		rts				rts
.3e09					MInt32True:
.3e09	a9 ff		lda #$ff			lda 	#$FF 						; set to $FFFFFFFF
.3e0b	d0 02		bne $3e0f			bne 	MInt32WriteAll
.3e0d					MInt32False:
.3e0d	a9 00		lda #$00			lda 	#0
.3e0f					MInt32WriteAll:
.3e0f	95 98		sta $98,x			sta 	esInt0,x
.3e11					MInt32Write123:
.3e11	95 a0		sta $a0,x			sta 	esInt1,x
.3e13	95 a8		sta $a8,x			sta 	esInt2,x
.3e15	95 b0		sta $b0,x			sta 	esInt3,x
.3e17	a9 00		lda #$00			lda 	#$00						; and make it an integer
.3e19	95 90		sta $90,x			sta 	esType,x
.3e1b	60		rts				rts
.3e1c					MInt32Set8Bit:
.3e1c	95 98		sta $98,x			sta 	esInt0,x 					; coopt above function to write
.3e1e	a9 00		lda #$00			lda 	#0 							; a value 0-255
.3e20	f0 ef		beq $3e11			beq		MInt32Write123
.3e22					MInt32ShiftLeft:
.3e22	16 98		asl $98,x			asl 	esInt0,x
.3e24	36 a0		rol $a0,x			rol	 	esInt1,x
.3e26	36 a8		rol $a8,x			rol	 	esInt2,x
.3e28	36 b0		rol $b0,x			rol	 	esInt3,x
.3e2a	60		rts				rts
.3e2b					MInt32ShiftRight:
.3e2b	56 b0		lsr $b0,x			lsr 	esInt3,x
.3e2d	76 a8		ror $a8,x			ror 	esInt2,x
.3e2f	76 a0		ror $a0,x			ror 	esInt1,x
.3e31	76 98		ror $98,x			ror 	esInt0,x
.3e33	60		rts				rts
.3e34					MInt32Zero:
.3e34	b5 98		lda $98,x			lda 	esInt0,x
.3e36	15 a0		ora $a0,x			ora 	esInt1,x
.3e38	15 a8		ora $a8,x			ora 	esInt2,x
.3e3a	15 b0		ora $b0,x			ora 	esInt3,x
.3e3c	60		rts				rts
.3e3d					MInt32Random:
.3e3d	98		tya				tya
.3e3e	48		pha				pha
.3e3f	a0 07		ldy #$07			ldy 	#7 							; do it 7 times
.3e41	ad 63 0d	lda $0d63			lda 	MSeed32+0 					; check the seed isn't zero
.3e44	d0 03		bne $3e49			bne 	_Random1
.3e46	a8		tay				tay 								; if so do it 256 times
.3e47	a9 aa		lda #$aa			lda		#$AA 						; and use this to seed the seed....
.3e49					_Random1:
.3e49	0a		asl a				asl 	a
.3e4a	2e 64 0d	rol $0d64			rol 	MSeed32+1
.3e4d	2e 65 0d	rol $0d65			rol 	MSeed32+2
.3e50	2e 66 0d	rol $0d66			rol 	MSeed32+3
.3e53	90 02		bcc $3e57			bcc 	_Random2
.3e55	49 c5		eor #$c5			eor 	#$C5
.3e57					_Random2:
.3e57	88		dey				dey
.3e58	d0 ef		bne $3e49			bne 	_Random1
.3e5a	8d 63 0d	sta $0d63			sta 	MSeed32+0 					; copy the seed in.
.3e5d	95 98		sta $98,x			sta 	esInt0,x
.3e5f	ad 64 0d	lda $0d64			lda 	MSeed32+1
.3e62	95 a0		sta $a0,x			sta 	esInt1,x
.3e64	ad 65 0d	lda $0d65			lda 	MSeed32+2
.3e67	95 a8		sta $a8,x			sta 	esInt2,x
.3e69	ad 66 0d	lda $0d66			lda 	MSeed32+3
.3e6c	95 b0		sta $b0,x			sta 	esInt3,x
.3e6e	68		pla				pla
.3e6f	a8		tay				tay
.3e70	a9 00		lda #$00			lda 	#0
.3e72	95 90		sta $90,x			sta 	esType,x
.3e74	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/utility/check.asm

.3e75					CheckToken:
.3e75	d1 28		cmp ($28),y			cmp 	(codePtr),y
.3e77	d0 02		bne $3e7b			bne 	_CTError
.3e79	c8		iny				iny
.3e7a	60		rts				rts
.3e7b					_CTError:
.3e7b	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.3e7d	20 36 15	jsr $1536		jsr	errorHandler
.3e80					CheckRightParen:
.3e80	b1 28		lda ($28),y			lda 	(codePtr),y
.3e82	c8		iny				iny
.3e83	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.3e85	d0 01		bne $3e88			bne 	_CRPError
.3e87	60		rts				rts
.3e88					_CRPError:
.3e88	a2 09		ldx #$09			ldx 	#ErrorID_MissingRP
.3e8a	20 36 15	jsr $1536		jsr	errorHandler
.3e8d					CheckComma:
.3e8d	b1 28		lda ($28),y			lda 	(codePtr),y
.3e8f	c8		iny				iny
.3e90	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.3e92	d0 01		bne $3e95			bne 	_CCError
.3e94	60		rts				rts
.3e95					_CCError:
.3e95	a2 0a		ldx #$0a			ldx 	#ErrorID_MissingComma
.3e97	20 36 15	jsr $1536		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/utility/stack.asm

.0037					rsPointer:
>0037							.fill 	2							; to TOS, which is the current top-token.
.3e9a					RSReset:
.3e9a	a9 ff		lda #$ff			lda 	#(returnStack+retStackSize-1) & $FF
.3e9c	85 37		sta $37				sta 	rsPointer
.3e9e	a9 09		lda #$09			lda 	#(returnStack+retStackSize-1) >> 8
.3ea0	85 38		sta $38				sta 	1+(rsPointer)
.3ea2	a9 ff		lda #$ff			lda 	#$FF 						; put a duff marker on TOS, so nothing will pop
.3ea4	8d ff 09	sta $09ff			sta 	returnStack+retStackSize-1
.3ea7	60		rts				rts
.3ea8					RSClaim:
.3ea8	84 32		sty $32				sty 	tempShort 					; preserve Y
.3eaa	48		pha				pha 								; save marker on stack.
.3eab	8a		txa				txa 								; get bytes required.
.3eac	38		sec				sec
.3ead	49 ff		eor #$ff			eor 	#$FF 						; add to rsPointer using 2's complement.
.3eaf	65 37		adc $37				adc 	rsPointer
.3eb1	85 37		sta $37				sta 	rsPointer
.3eb3	a5 38		lda $38				lda 	rsPointer+1
.3eb5	69 ff		adc #$ff			adc 	#$FF
.3eb7	85 38		sta $38				sta 	rsPointer+1
.3eb9	c9 08		cmp #$08			cmp 	#returnStack>>8 			; overflow. underflow actually :)
.3ebb	90 08		bcc $3ec5			bcc 	_RSCOverflow
.3ebd	68		pla				pla 								; get marker back
.3ebe	a0 00		ldy #$00			ldy 	#0 							; write marker out.
.3ec0	91 37		sta ($37),y			sta 	(rsPointer),y
.3ec2	a4 32		ldy $32				ldy 	tempShort 					; restore Y and exit
.3ec4	60		rts				rts
.3ec5					_RSCOverflow:
.3ec5	a2 16		ldx #$16			ldx 	#ErrorID_RetStack
.3ec7	20 36 15	jsr $1536		jsr	errorHandler
.3eca					RSFree:
.3eca	18		clc				clc
.3ecb	65 37		adc $37				adc 	rsPointer
.3ecd	85 37		sta $37				sta 	rsPointer
.3ecf	90 02		bcc $3ed3			bcc 	_RSFExit
.3ed1	e6 38		inc $38				inc 	rsPointer+1
.3ed3					_RSFExit:
.3ed3	60		rts				rts
.3ed4					RSSavePosition:
.3ed4	84 32		sty $32				sty 	tempShort 					; save Y position
.3ed6	a8		tay				tay 								; this is where we write it.
.3ed7	a5 28		lda $28				lda 	codePtr 					; write codePointer out
.3ed9	91 37		sta ($37),y			sta 	(rsPointer),y
.3edb	c8		iny				iny
.3edc	a5 29		lda $29				lda 	codePtr+1
.3ede	91 37		sta ($37),y			sta 	(rsPointer),y
.3ee0	c8		iny				iny
.3ee1	a5 32		lda $32				lda 	tempShort 					; write the Y position out.
.3ee3	91 37		sta ($37),y			sta 	(rsPointer),y
.3ee5	a8		tay				tay 								; fix Y back again to original value
.3ee6	60		rts				rts
.3ee7					RSLoadPosition:
.3ee7	a8		tay				tay
.3ee8	b1 37		lda ($37),y			lda 	(rsPointer),y 				; read codePointer back
.3eea	85 28		sta $28				sta 	codePtr
.3eec	c8		iny				iny
.3eed	b1 37		lda ($37),y			lda 	(rsPointer),y
.3eef	85 29		sta $29				sta 	codePtr+1
.3ef1	c8		iny				iny
.3ef2	b1 37		lda ($37),y			lda 	(rsPointer),y 				; and the offset
.3ef4	a8		tay				tay 								; to Y
.3ef5	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/utility/warmstart.asm

.3ef6					WarmStart:
.3ef6	a2 04		ldx #$04		ldx	#4
.3ef8	20 31 28	jsr $2831		jsr	interactionHandler

;******  Return to file: main/main.asm

.3efb					mainHandler:
.3efb	48		pha				pha
.3efc	bd 0c 3f	lda $3f0c,x			lda 	mainVectors,x
.3eff	8d f2 0a	sta $0af2			sta 	jumpVector
.3f02	bd 0d 3f	lda $3f0d,x			lda 	1+(mainVectors),x
.3f05	8d f3 0a	sta $0af3			sta 	jumpVector+1
.3f08	68		pla				pla
.3f09	6c f2 0a	jmp ($0af2)			jmp 	(jumpVector)
.3f0c					mainVectors:
>3f0c	28 3f					.word _DummyControlHandler ; index 0
>3f0e	8d 3e					.word CheckComma           ; index 2
>3f10	80 3e					.word CheckRightParen      ; index 4
>3f12	47 30					.word XCommandClear        ; index 6
>3f14	90 37					.word LinkEvaluate         ; index 8
>3f16	9c 37					.word LinkEvaluateInteger  ; index 10
>3f18	a8 37					.word LinkEvaluateSmallInt ; index 12
>3f1a	a2 37					.word LinkEvaluateString   ; index 14
>3f1c	96 37					.word LinkEvaluateTerm     ; index 16
>3f1e	5c 3d					.word MLInt32ToString      ; index 18
>3f20	d6 31					.word Command_XNew         ; index 20
>3f22	e4 31					.word XCommand_Run         ; index 22
>3f24	f0 31					.word Command_RunFrom      ; index 24
>3f26	74 3c					.word LinkInt32FromString  ; index 26
.3f28					_DummyControlHandler:
.3f28	60		rts			rts

;******  Return to file: basic.asm

.3f29					section_end_main:
.3f29					section_start_string:

;******  Processing file: string/string.asm


;******  Processing file: string/functions/chr.asm

.3f29					StringChrs:
.3f29	aa		tax				tax 								; set up stack
.3f2a	a9 02		lda #$02			lda 	#2
.3f2c	20 ec 3f	jsr $3fec			jsr 	AllocateSoftString
.3f2f	98		tya				tya
.3f30	20 12 40	jsr $4012			jsr 	WriteSoftString
.3f33					StringUpdate:
.3f33	20 41 3f	jsr $3f41			jsr 	ReturnSoftString
.3f36	8a		txa				txa
.3f37	60		rts				rts
.3f38					StringNull:
.3f38	aa		tax				tax
.3f39	a9 01		lda #$01			lda 	#1
.3f3b	20 ec 3f	jsr $3fec			jsr 	AllocateSoftString
.3f3e	4c 33 3f	jmp $3f33			jmp 	StringUpdate
.3f41					ReturnSoftString:
.3f41	a5 39		lda $39				lda 	softMemAlloc 				; copy address
.3f43	95 98		sta $98,x			sta 	esInt0,x
.3f45	a5 3a		lda $3a				lda 	softMemAlloc+1
.3f47	95 a0		sta $a0,x			sta 	esInt1,x
.3f49	a9 00		lda #$00			lda 	#0 							; zero upper bytes
.3f4b	95 a8		sta $a8,x			sta 	esInt2,x
.3f4d	95 b0		sta $b0,x			sta 	esInt3,x
.3f4f	a9 40		lda #$40			lda 	#$40 						; type string.
.3f51	95 90		sta $90,x			sta 	esType,x
.3f53	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/functions/compare.asm

.3f54					STRCompare:
.3f54	48		pha				pha 								; save A
.3f55	aa		tax				tax 								; put stack pos in X
.3f56	98		tya				tya
.3f57	48		pha				pha
.3f58	20 8c 3f	jsr $3f8c			jsr 	CopyStringPair 				; copy strings to temp0,temp1
.3f5b	a0 00		ldy #$00			ldy 	#0 							; get the smaller of the two string sizes.
.3f5d	b1 2a		lda ($2a),y			lda 	(temp0),y
.3f5f	d1 2c		cmp ($2c),y			cmp 	(temp1),y
.3f61	90 02		bcc $3f65			bcc 	_SCNotSmaller
.3f63	b1 2c		lda ($2c),y			lda 	(temp1),y
.3f65					_SCNotSmaller:
.3f65	aa		tax				tax 								; put that in X. We compare this many chars first.
.3f66					_SCCompareLoop:
.3f66	e0 00		cpx #$00			cpx 	#0 							; if compared all the smaller, then it is the shorter
.3f68	f0 0c		beq $3f76			beq 	_SCSameToEndShortest 		; one that is the smallest if they are different lengths.
.3f6a	ca		dex				dex 								; decrement chars to compare.
.3f6b	c8		iny				iny 								; move to next character
.3f6c	38		sec				sec 								; calculate s1[y]-s2[y]
.3f6d	b1 2a		lda ($2a),y			lda 	(temp0),y
.3f6f	f1 2c		sbc ($2c),y			sbc 	(temp1),y
.3f71	d0 0a		bne $3f7d			bne 	_SCReturnResult 			; if different return sign of A
.3f73	4c 66 3f	jmp $3f66			jmp 	_SCCompareLoop
.3f76					_SCSameToEndShortest
.3f76	a0 00		ldy #$00			ldy 	#0 							; compare len(s1) - len(s2)
.3f78	38		sec				sec
.3f79	b1 2a		lda ($2a),y			lda 	(temp0),y
.3f7b	f1 2c		sbc ($2c),y			sbc 	(temp1),y
.3f7d					_SCReturnResult:
.3f7d	08		php				php 								; set return to zero preserving PSW.
.3f7e	a2 00		ldx #$00			ldx 	#0
.3f80	28		plp				plp
.3f81	f0 05		beq $3f88			beq 	_SCExit 					; two values equal, then exit
.3f83	ca		dex				dex 								; X = $FF
.3f84	90 02		bcc $3f88			bcc 	_SCExit 					; if 1st < 2nd then -1
.3f86	a2 01		ldx #$01			ldx 	#1 							; X = $01 if greater
.3f88					_SCExit:
.3f88	68		pla				pla
.3f89	a8		tay				tay
.3f8a	68		pla				pla
.3f8b	60		rts				rts
.3f8c					CopyStringPair:
.3f8c	b5 99		lda $99,x			lda 	esInt0+1,x
.3f8e	85 2c		sta $2c				sta 	temp1
.3f90	b5 a1		lda $a1,x			lda 	esInt1+1,x
.3f92	85 2d		sta $2d				sta 	temp1+1
.3f94					CopyStringTop:
.3f94	b5 98		lda $98,x			lda 	esInt0,x
.3f96	85 2a		sta $2a				sta 	temp0
.3f98	b5 a0		lda $a0,x			lda 	esInt1,x
.3f9a	85 2b		sta $2b				sta 	temp0+1
.3f9c	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/functions/concat.asm

.3f9d					StringConcat:
.3f9d	aa		tax				tax									; stack pos in X
.3f9e	98		tya				tya
.3f9f	48		pha				pha
.3fa0	20 8c 3f	jsr $3f8c			jsr 	CopyStringPair 				; temp0 and temp1 point to strings to concat.
.3fa3	38		sec				sec 								; calculate alloc strings. lengths added + 1 for size.
.3fa4	a0 00		ldy #$00			ldy 	#0
.3fa6	b1 2a		lda ($2a),y			lda 	(temp0),y
.3fa8	71 2c		adc ($2c),y			adc 	(temp1),y
.3faa	b0 1c		bcs $3fc8			bcs 	_SCError 					; just too many characters here.
.3fac	c9 fc		cmp #$fc			cmp 	#MaxStringSize
.3fae	b0 18		bcs $3fc8			bcs 	_SCError
.3fb0	20 ec 3f	jsr $3fec			jsr 	AllocateSoftString 			; allocate soft string memory, set pointer.
.3fb3	20 e3 3f	jsr $3fe3			jsr 	CopySoftToStack 			; copy that to the stack.
.3fb6	20 cd 3f	jsr $3fcd			jsr 	SCCopyTemp0 				; copy temp0
.3fb9	a5 2c		lda $2c				lda 	temp1 						; copy temp1 to temp0
.3fbb	85 2a		sta $2a				sta 	temp0
.3fbd	a5 2d		lda $2d				lda 	temp1+1
.3fbf	85 2b		sta $2b				sta 	temp0+1
.3fc1	20 cd 3f	jsr $3fcd			jsr 	SCCopyTemp0 				; copy temp0 e.g. what was temp1.
.3fc4	68		pla				pla
.3fc5	a8		tay				tay
.3fc6	8a		txa				txa 								; and A
.3fc7	60		rts				rts
.3fc8					_SCError:
.3fc8	a2 0d		ldx #$0d			ldx 	#ErrorID_StrLen
.3fca	20 36 15	jsr $1536		jsr	errorHandler
.3fcd					SCCopyTemp0:
.3fcd	a0 00		ldy #$00			ldy 	#0 							; put count in temp2
.3fcf	b1 2a		lda ($2a),y			lda 	(temp0),y
.3fd1	85 2e		sta $2e				sta 	temp2
.3fd3					_SCCopyLoop:
.3fd3	a5 2e		lda $2e				lda 	temp2 						; done the lot
.3fd5	f0 0b		beq $3fe2			beq 	_SCCopyExit
.3fd7	c6 2e		dec $2e				dec 	temp2
.3fd9	c8		iny				iny 								; get next char
.3fda	b1 2a		lda ($2a),y			lda 	(temp0),y
.3fdc	20 12 40	jsr $4012			jsr 	WriteSoftString 			; write to soft string.
.3fdf	4c d3 3f	jmp $3fd3			jmp 	_SCCopyLoop
.3fe2					_SCCopyExit:
.3fe2	60		rts				rts
.3fe3					CopySoftToStack:
.3fe3	a5 39		lda $39				lda 	SoftMemAlloc 				; copy the memory allocation pointer to the stack.
.3fe5	95 98		sta $98,x			sta 	esInt0,x 					; type is already string.
.3fe7	a5 3a		lda $3a				lda 	SoftMemAlloc+1
.3fe9	95 a0		sta $a0,x			sta 	esInt1,x
.3feb	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/functions/memory.asm

.0039					softMemAlloc:
>0039							.fill 	2  							; if MSB is zero needs resetting on allocation.
.3fec					AllocateSoftString:
.3fec	85 32		sta $32				sta 	tempShort 					; save count
.3fee	98		tya				tya
.3fef	48		pha				pha
.3ff0	a5 3a		lda $3a				lda 	softMemAlloc+1 				; if the high byte is zero, it needs allocating.
.3ff2	d0 09		bne $3ffd			bne 	_ASSDone
.3ff4	a5 33		lda $33				lda 	highMemory 					; reset the soft memory alloc pointer.
.3ff6	85 39		sta $39				sta 	softMemAlloc 				; to speed up slightly, we only reset this when we first need it
.3ff8	a4 34		ldy $34				ldy 	highMemory+1 				; but it needs to be reset before each command.
.3ffa	88		dey				dey 								; it is set to 1/4k below high memory, allowing space
.3ffb	84 3a		sty $3a				sty 	softMemAlloc+1 				; for a concreted string.
.3ffd					_ASSDone:
.3ffd	38		sec				sec 								; allocate downwards enough memory
.3ffe	a5 39		lda $39				lda 	softMemAlloc 				; subtract the memory requirements in A from
.4000	e5 32		sbc $32				sbc 	tempShort 					; the soft memory pointer
.4002	85 39		sta $39				sta 	softMemAlloc
.4004	a5 3a		lda $3a				lda 	softMemAlloc+1
.4006	e9 00		sbc #$00			sbc 	#0
.4008	85 3a		sta $3a				sta 	softMemAlloc+1
.400a	a9 00		lda #$00			lda 	#0 							; empty that string, set the length = 0.
.400c	a8		tay				tay
.400d	91 39		sta ($39),y			sta 	(softMemAlloc),y
.400f	68		pla				pla
.4010	a8		tay				tay
.4011	60		rts				rts
.4012					WriteSoftString:
.4012	84 32		sty $32				sty 	tempShort 					; save Y
.4014	48		pha				pha 								; save character on stack
.4015	a0 00		ldy #$00			ldy 	#0 							; get and bump length
.4017	b1 39		lda ($39),y			lda 	(softMemAlloc),y
.4019	18		clc				clc
.401a	69 01		adc #$01			adc 	#1
.401c	91 39		sta ($39),y			sta 	(softMemAlloc),y
.401e	a8		tay				tay 								; offset in Y
.401f	68		pla				pla 								; get char and write.
.4020	91 39		sta ($39),y			sta 	(softMemAlloc),y
.4022	a4 32		ldy $32				ldy 	tempShort 					; restore Y and exit.
.4024	60		rts				rts
.4025					StrClone:
.4025	aa		tax				tax 								; set up stack.
.4026	98		tya				tya
.4027	48		pha				pha
.4028	a0 00		ldy #$00			ldy 	#0 							; get length, add 1 for length
.402a	b1 2a		lda ($2a),y			lda 	(temp0),y 					; this is the bytes required.
.402c	18		clc				clc
.402d	69 01		adc #$01			adc 	#1
.402f	20 ec 3f	jsr $3fec			jsr 	AllocateSoftString 			; allocate soft memory
.4032	a5 39		lda $39				lda 	softMemAlloc 				; copy that address to TOS
.4034	95 98		sta $98,x			sta 	esInt0,x
.4036	a5 3a		lda $3a				lda 	softMemAlloc+1
.4038	95 a0		sta $a0,x			sta 	esInt1,x
.403a	a9 00		lda #$00			lda 	#0 							; zero upper 2 bytes
.403c	95 a8		sta $a8,x			sta 	esInt2,x
.403e	95 b0		sta $b0,x			sta 	esInt3,x
.4040	a9 40		lda #$40			lda 	#$40 						; set type to string.
.4042	95 90		sta $90,x			sta 	esType,x
.4044	20 cd 3f	jsr $3fcd			jsr 	SCCopyTemp0 				; copy temp0 string to soft memory copy (concat.asm)
.4047	68		pla				pla
.4048	a8		tay				tay
.4049	8a		txa				txa
.404a	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/functions/setcase.asm

.404b					CaseString:
.404b	48		pha				pha 								; save A and copy to X
.404c	aa		tax				tax
.404d	98		tya				tya
.404e	48		pha				pha
.404f	20 94 3f	jsr $3f94			jsr 	CopyStringTop 				; target string -> temp0
.4052	a0 00		ldy #$00			ldy 	#0
.4054	b1 2a		lda ($2a),y			lda 	(temp0),y  					; get length,
.4056	18		clc				clc
.4057	69 01		adc #$01			adc 	#1 							; one more for length byte
.4059	20 ec 3f	jsr $3fec			jsr 	AllocateSoftString 			; allocate soft string memory, set pointer.
.405c	20 e3 3f	jsr $3fe3			jsr 	CopySoftToStack 			; copy that to the stack.
.405f	a0 00		ldy #$00			ldy 	#0
.4061	b1 2a		lda ($2a),y			lda 	(temp0),y 					; count to copy in X
.4063	aa		tax				tax
.4064					_CSCopy:
.4064	e0 00		cpx #$00			cpx 	#0 							; finished if 0.
.4066	f0 24		beq $408c			beq 	_CSExit
.4068	ca		dex				dex
.4069	c8		iny				iny
.406a	68		pla				pla 								; check direction
.406b	48		pha				pha
.406c	f0 0c		beq $407a			beq 	_CSUpper
.406e	b1 2a		lda ($2a),y			lda 	(temp0),y 					; lower$() code
.4070	c9 41		cmp #$41			cmp 	#"A"
.4072	90 12		bcc $4086			bcc 	_CSWrite
.4074	c9 5b		cmp #$5b			cmp 	#"Z"+1
.4076	b0 0e		bcs $4086			bcs 	_CSWrite
.4078	90 0a		bcc $4084			bcc 	_CSFlipWrite
.407a					_CSUpper:
.407a	b1 2a		lda ($2a),y			lda 	(temp0),y 					; upper$() code
.407c	c9 61		cmp #$61			cmp 	#"a"
.407e	90 06		bcc $4086			bcc 	_CSWrite
.4080	c9 7b		cmp #$7b			cmp 	#"z"+1
.4082	b0 02		bcs $4086			bcs 	_CSWrite
.4084					_CSFlipWrite:
.4084	49 20		eor #$20			eor 	#"A"^"a" 					; switch case.
.4086					_CSWrite:
.4086	20 12 40	jsr $4012			jsr 	WriteSoftString 			; add to soft string.
.4089	4c 64 40	jmp $4064			jmp 	_CSCopy
.408c					_CSExit:
.408c	68		pla				pla
.408d	a8		tay				tay
.408e	68		pla				pla
.408f	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/functions/substring.asm

.4090					StringSubstring:
.4090	48		pha				pha
.4091	aa		tax				tax 								; access stack.
.4092	98		tya				tya
.4093	48		pha				pha
.4094	20 94 3f	jsr $3f94			jsr 	CopyStringTop 				; point temp0 to the string.
.4097	a0 00		ldy #$00			ldy 	#0 							; get length.
.4099	b1 2a		lda ($2a),y			lda 	(temp0),Y
.409b	85 2c		sta $2c				sta 	temp1
.409d	b5 99		lda $99,x			lda 	esInt0+1,x 					; get the initial offset
.409f	c5 2c		cmp $2c				cmp 	temp1 						; return "" if > length.
.40a1	f0 02		beq $40a5			beq 	_SSBOkay
.40a3	b0 2a		bcs $40cf			bcs 	_SSBReturnNull
.40a5					_SSBOkay:
.40a5	a5 2c		lda $2c				lda 	temp1 						; get the total length +1
.40a7	18		clc				clc
.40a8	69 01		adc #$01			adc 	#1
.40aa	38		sec				sec
.40ab	f5 99		sbc $99,x			sbc 	esInt0+1,x 					; the anything >= this is bad - max size
.40ad	d5 9a		cmp $9a,x			cmp 	esInt0+2,x  				; check bad >= required
.40af	90 02		bcc $40b3			bcc		_SSBTrunc
.40b1	b5 9a		lda $9a,x			lda 	esInt0+2,x
.40b3					_SSBTrunc:
.40b3	85 2d		sta $2d				sta 	temp1+1 					; characters to copy.
.40b5	18		clc				clc
.40b6	69 01		adc #$01			adc 	#1 							; add 1
.40b8	20 ec 3f	jsr $3fec			jsr 	AllocateSoftString 			; allocate soft string memory, set pointer.
.40bb	20 e3 3f	jsr $3fe3			jsr 	CopySoftToStack 			; copy that to the stack.
.40be	b4 99		ldy $99,x			ldy 	esInt0+1,x 					; get initial position of char to copy
.40c0					_SSBCopyLoop:
.40c0	a5 2d		lda $2d				lda 	temp1+1 					; done them all
.40c2	f0 0e		beq $40d2			beq 	_SSBExit
.40c4	c6 2d		dec $2d				dec 	temp1+1
.40c6	b1 2a		lda ($2a),y			lda 	(temp0),y 					; get and write character
.40c8	20 12 40	jsr $4012			jsr 	WriteSoftString
.40cb	c8		iny				iny
.40cc	4c c0 40	jmp $40c0			jmp 	_SSBCopyLoop
.40cf					_SSBReturnNull:
.40cf	20 d6 40	jsr $40d6			jsr 	ReturnNull
.40d2					_SSBExit:
.40d2	68		pla				pla
.40d3	a8		tay				tay
.40d4	68		pla				pla
.40d5	60		rts				rts
.40d6					ReturnNull:
.40d6	a9 00		lda #$00			lda 	#0 							; clear null string
.40d8	8d ce 0a	sta $0ace			sta 	NullString
.40db	a9 ce		lda #$ce			lda 	#NullString & $FF 			; set a pointer to it
.40dd	95 98		sta $98,x			sta 	esInt0,x
.40df	a9 0a		lda #$0a			lda 	#NullString >> 8
.40e1	95 a0		sta $a0,x			sta 	esInt1,x
.40e3	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/functions/write.asm

.0d67					srcStrLen:
>0d67							.fill 	1
.40e4					StringWrite:
.40e4	aa		tax				tax
.40e5	48		pha				pha
.40e6	98		tya				tya
.40e7	48		pha				pha
.40e8	20 0f 41	jsr $410f			jsr 	CheckOverwriteCurrent
.40eb	b0 0d		bcs $40fa			bcs		_SWCopyCurrent
.40ed	20 4d 41	jsr $414d			jsr 	RequiresConcretion
.40f0	90 0e		bcc $4100			bcc 	_SWWriteReference
.40f2	20 b0 41	jsr $41b0			jsr 	CheckSpecialConcretion
.40f5	b0 09		bcs $4100			bcs 	_SWWriteReference
.40f7	20 61 41	jsr $4161			jsr 	AllocateHardMemory
.40fa					_SWCopyCurrent:
.40fa	20 94 41	jsr $4194			jsr 	CopyStringToHardMemory
.40fd	4c 0b 41	jmp $410b			jmp 	_SWExit
.4100					_SWWriteReference
.4100	a0 00		ldy #$00			ldy 	#0
.4102	a5 2a		lda $2a				lda 	temp0
.4104	91 2c		sta ($2c),y			sta 	(temp1),y
.4106	c8		iny				iny
.4107	a5 2b		lda $2b				lda 	temp0+1
.4109	91 2c		sta ($2c),y			sta 	(temp1),y
.410b					_SWExit:
.410b	68		pla				pla
.410c	a8		tay				tay
.410d	68		pla				pla
.410e	60		rts				rts
.410f					CheckOverwriteCurrent:
.410f	a0 00		ldy #$00			ldy 	#0 						; get address of string being written to temp0
.4111	b5 a1		lda $a1,x			lda 	esInt1+1,x
.4113	85 2b		sta $2b				sta 	temp0+1
.4115	b5 99		lda $99,x			lda 	esInt0+1,x
.4117	85 2a		sta $2a				sta 	temp0
.4119	b1 2a		lda ($2a),y			lda 	(temp0),y 				; get length of string being copied and save it.
.411b	8d 67 0d	sta $0d67			sta 	srcStrLen
.411e	b5 98		lda $98,x			lda 	esInt0,x 				; copy where the final address it being written to temp1.
.4120	85 2c		sta $2c				sta 	temp1 					; e.g. if it is ax$ then temp1 will point to the ax$
.4122	b5 a0		lda $a0,x			lda 	esInt1,x 				; data record + 5
.4124	85 2d		sta $2d				sta 	temp1+1
.4126	a0 01		ldy #$01			ldy 	#1 						; get the MSB of the address of string currently stored there.
.4128	b1 2c		lda ($2c),y			lda 	(temp1),y
.412a	c5 34		cmp $34				cmp 	highMemory+1 			; if < high memory then it cannot be something stored
.412c	90 1b		bcc $4149			bcc 	_COCFail 				; in hard memory.
.412e	a0 00		ldy #$00			ldy 	#0 						; copy target address - 1 into temp2
.4130	b1 2c		lda ($2c),y			lda 	(temp1),y 				; when allocating hard memory, the overall size is
.4132	e9 01		sbc #$01			sbc 	#1 						; in the previous byte.
.4134	85 2e		sta $2e				sta 	temp2
.4136	c8		iny				iny
.4137	b1 2c		lda ($2c),y			lda 	(temp1),y
.4139	e9 00		sbc #$00			sbc 	#0
.413b	85 2f		sta $2f				sta 	temp2+1
.413d	a0 00		ldy #$00			ldy 	#0 						; how large is this physical chunk.
.413f	b1 2e		lda ($2e),y			lda 	(temp2),y
.4141	38		sec				sec  							; maximum character capacity.
.4142	e9 02		sbc #$02			sbc 	#2
.4144	cd 67 0d	cmp $0d67			cmp 	srcStrLen 				; if >= the required length
.4147	b0 02		bcs $414b			bcs 	_COCCanReuse
.4149					_COCFail:
.4149	18		clc				clc
.414a	60		rts				rts
.414b					_COCCanReuse:
.414b	38		sec				sec
.414c	60		rts				rts
.414d					RequiresConcretion:
.414d	a5 2b		lda $2b				lda 	temp0+1 				; get MSB of address of string to be written
.414f	c5 34		cmp $34				cmp 	highMemory+1 			; if >= high memory it is concreted
.4151	b0 0a		bcs $415d			bcs 	_RCSucceed 				; so it needs concreting again - duplication.
.4153	a5 3a		lda $3a				lda 	softMemAlloc+1 			; have we allocated any soft memory yet ?
.4155	f0 08		beq $415f			beq 	_RCFail 				; if not, this cannot be soft memory.
.4157	a5 2b		lda $2b				lda 	temp0+1 				; get MSB of address of string to be written
.4159	c5 3a		cmp $3a				cmp 	softMemAlloc+1 			; if >= soft mem alloc it is either soft
.415b	90 02		bcc $415f			bcc 	_RCFail 				; so concreting
.415d					_RCSucceed:
.415d	38		sec				sec
.415e	60		rts				rts
.415f					_RCFail:
.415f	18		clc				clc
.4160	60		rts				rts
.4161					AllocateHardMemory:
.4161	98		tya				tya
.4162	48		pha				pha
.4163	ad 67 0d	lda $0d67			lda 	srcStrLen 				; characters in string
.4166	69 0a		adc #$0a			adc 	#1+1+8 					; one for hard memory size, one for string size, extra for expansion
.4168	b0 04		bcs $416e			bcs 	_AHMSetMax 				; max out that amount.
.416a	c9 fe		cmp #$fe			cmp 	#MaxStringSize+2
.416c	90 02		bcc $4170			bcc 	_AHMIsOkay
.416e					_AHMSetMax:
.416e	a9 fe		lda #$fe			lda 	#MaxStringSize+2
.4170					_AHMIsOkay:
.4170	48		pha				pha	 							; save size to be allocated
.4171	49 ff		eor #$ff			eor 	#$FF 					; complement and add to high Memory
.4173	38		sec				sec  							; and copy result to TOS as target address.
.4174	65 33		adc $33				adc 	highMemory
.4176	85 33		sta $33				sta 	highMemory
.4178	a5 34		lda $34				lda 	highMemory+1
.417a	69 ff		adc #$ff			adc 	#$FF
.417c	85 34		sta $34				sta 	highMemory+1
.417e	a0 00		ldy #$00			ldy 	#0 						; Y = 0
.4180	68		pla				pla 							; get the total size of the storage block
.4181	91 33		sta ($33),y			sta 	(highMemory),y 			; and set it
.4183	18		clc				clc
.4184	a5 33		lda $33				lda		highMemory 				; point the target address to the byte after this.
.4186	69 01		adc #$01			adc 	#1
.4188	91 2c		sta ($2c),y			sta 	(temp1),y
.418a	a5 34		lda $34				lda 	highMemory+1
.418c	69 00		adc #$00			adc 	#0
.418e	c8		iny				iny
.418f	91 2c		sta ($2c),y			sta 	(temp1),y
.4191	68		pla				pla
.4192	a8		tay				tay
.4193	60		rts				rts
.4194					CopyStringToHardMemory:
.4194	98		tya				tya
.4195	48		pha				pha
.4196	a0 00		ldy #$00			ldy 	#0 						; copy target address to temp2
.4198	b1 2c		lda ($2c),y			lda 	(temp1),y
.419a	85 2e		sta $2e				sta 	temp2
.419c	c8		iny				iny
.419d	b1 2c		lda ($2c),y			lda 	(temp1),y
.419f	85 2f		sta $2f				sta 	temp2+1
.41a1	ac 67 0d	ldy $0d67			ldy 	srcStrLen 				; copy this + 1 characters, (length too) hence $FF compare
.41a4					_CSTHMLoop:
.41a4	b1 2a		lda ($2a),y			lda 	(temp0),y
.41a6	91 2e		sta ($2e),y			sta 	(temp2),y
.41a8	88		dey				dey
.41a9	c0 ff		cpy #$ff			cpy 	#$FF 					; this does the +1
.41ab	d0 f7		bne $41a4			bne 	_CSTHMLoop
.41ad	68		pla				pla
.41ae	a8		tay				tay
.41af	60		rts				rts
.41b0					CheckSpecialConcretion:
.41b0	ad 67 0d	lda $0d67			lda 	srcStrLen 				; check string is null e.g. length = 0
.41b3	f0 02		beq $41b7			beq 	_CSCNullString
.41b5	18		clc				clc
.41b6	60		rts				rts
.41b7					_CSCNullString:
.41b7	a9 00		lda #$00			lda 	#0 						; by always returning this address we don't waste
.41b9	8d ce 0a	sta $0ace			sta 	NullString		 		; storage on null strings.
.41bc	a9 ce		lda #$ce			lda 	#(NullString) & $FF
.41be	85 2a		sta $2a				sta 	temp0
.41c0	a9 0a		lda #$0a			lda 	#(NullString) >> 8
.41c2	85 2b		sta $2b				sta 	1+(temp0)
.41c4	38		sec				sec
.41c5	60		rts				rts

;******  Return to file: string/string.asm

.41c6					stringHandler:
.41c6	48		pha				pha
.41c7	bd d7 41	lda $41d7,x			lda 	stringVectors,x
.41ca	8d f2 0a	sta $0af2			sta 	jumpVector
.41cd	bd d8 41	lda $41d8,x			lda 	1+(stringVectors),x
.41d0	8d f3 0a	sta $0af3			sta 	jumpVector+1
.41d3	68		pla				pla
.41d4	6c f2 0a	jmp ($0af2)			jmp 	(jumpVector)
.41d7					stringVectors:
>41d7	e9 41					.word _DummyControlHandler ; index 0
>41d9	29 3f					.word StringChrs           ; index 2
>41db	25 40					.word StrClone             ; index 4
>41dd	9d 3f					.word StringConcat         ; index 6
>41df	38 3f					.word StringNull           ; index 8
>41e1	54 3f					.word STRCompare           ; index 10
>41e3	4b 40					.word CaseString           ; index 12
>41e5	90 40					.word StringSubstring      ; index 14
>41e7	e4 40					.word StringWrite          ; index 16
.41e9					_DummyControlHandler:
.41e9	60		rts			rts

;******  Return to file: basic.asm

.41ea					section_end_string:
.41ea					section_start_tokeniser:

;******  Processing file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/detokenise/detokenise.asm

.0d68					deTokeniseVector:
>0d68							.fill 	2
.0d6a					lastCharacterClass:
>0d6a							.fill 	1
.0d6b					indent:
>0d6b							.fill 	1
.41ea					ListLine:
.41ea	48		pha				pha								; enter here to list to console. sets the output vector
.41eb	a9 22		lda #$22			lda 	#(deTokenPrint) & $FF
.41ed	8d 68 0d	sta $0d68			sta 	deTokeniseVector
.41f0	a9 43		lda #$43			lda 	#(deTokenPrint) >> 8
.41f2	8d 69 0d	sta $0d69			sta 	1+(deTokeniseVector)
.41f5	68		pla				pla
.41f6					Detokenise:
.41f6	18		clc				clc 							; space required for line number.
.41f7	69 06		adc #$06			adc 	#6
.41f9	8d 6b 0d	sta $0d6b			sta 	indent
.41fc	a9 ff		lda #$ff			lda 	#$FF 					; last thing printed is a dummy value.
.41fe	8d 6a 0d	sta $0d6a			sta 	lastCharacterClass
.4201	a2 02		ldx #$02			ldx 	#2
.4203	a9 00		lda #$00			lda 	#0 						; clear upper two bytes
.4205	95 a8		sta $a8,x			sta 	esInt2,x
.4207	95 b0		sta $b0,x			sta 	esInt3,x
.4209	a0 01		ldy #$01			ldy 	#1 						; copy line number to stack,2 (as using stack 0,1 for list range)
.420b	b1 28		lda ($28),y			lda 	(codePtr),y
.420d	95 98		sta $98,x			sta 	esInt0,x
.420f	c8		iny				iny
.4210	b1 28		lda ($28),y			lda 	(codePtr),y
.4212	95 a0		sta $a0,x			sta 	esInt1,x
.4214	a9 84		lda #$84			lda 	#LTYLineNumber
.4216	20 fd 42	jsr $42fd			jsr 	ListOutputCharacter
.4219	a9 0a		lda #$0a			lda 	#10 					; base 10
.421b	20 c1 42	jsr $42c1			jsr 	DTPrintInteger 			; print as integer.
.421e	a0 00		ldy #$00			ldy 	#0 						; get length
.4220	b1 2a		lda ($2a),y			lda 	(temp0),y 				; into X
.4222	aa		tax				tax
.4223					_DTPadOut:
.4223	a9 20		lda #$20			lda 	#" " 					; pad out to indent.
.4225	20 fd 42	jsr $42fd			jsr 	ListOutputCharacter
.4228	e8		inx				inx
.4229	ec 6b 0d	cpx $0d6b			cpx 	indent
.422c	d0 f5		bne $4223			bne 	_DTPadOut
.422e	a0 03		ldy #$03			ldy 	#3 						; start position.
.4230					_DTListLoop:
.4230	b1 28		lda ($28),y			lda 	(codePtr),y
.4232	c9 85		cmp #$85			cmp 	#TOK_STR 				; Inline string.
.4234	f0 5e		beq $4294			beq 	_DTIsString
.4236	c9 84		cmp #$84			cmp 	#TOK_FPC 				; Floating point
.4238	f0 56		beq $4290			beq 	_DTIsFloat
.423a	c9 c5		cmp #$c5			cmp 	#TKW_AMP 				; & hex marker
.423c	f0 16		beq $4254			beq 	_DTHexConstant
.423e	c9 80		cmp #$80			cmp 	#TOK_EOL 				; End of Line
.4240	d0 06		bne $4248			bne 	_DTNotEnd
.4242	a9 ff		lda #$ff			lda 	#255 					; print CR
.4244	20 fd 42	jsr $42fd			jsr 	ListOutputCharacter
.4247	60		rts				rts
.4248					_DTNotEnd:
.4248	c9 00		cmp #$00			cmp 	#0
.424a	30 38		bmi $4284			bmi 	_DTIsToken
.424c	c9 40		cmp #$40			cmp 	#$40
.424e	90 3a		bcc $428a			bcc 	_DTIsIdentifier
.4250	a9 0a		lda #$0a			lda 	#10 					; this is the base, unsigned decimal
.4252	d0 0d		bne $4261			bne 	_DTConstant
.4254					_DTHexConstant:
.4254	a9 26		lda #$26			lda 	#"&"
.4256	20 fd 42	jsr $42fd			jsr 	ListOutputCharacter
.4259	c8		iny				iny
.425a	a9 01		lda #$01			lda 	#1 						; switch to spaces so &xxxx is treated like a number.
.425c	20 3e 43	jsr $433e			jsr 	DTSwitchMode
.425f	a9 10		lda #$10			lda 	#16						; print line unsigned hex
.4261					_DTConstant:
.4261	48		pha				pha
.4262	a9 00		lda #$00			lda 	#0 						; now constant, may need spaces
.4264	20 3e 43	jsr $433e			jsr 	DTSwitchMode
.4267	a9 86		lda #$86			lda 	#LTYConstant
.4269	20 fd 42	jsr $42fd			jsr 	ListOutputCharacter
.426c	a2 02		ldx #$02			ldx 	#2 						; get its value
.426e	8a		txa				txa
.426f	a2 10		ldx #$10		ldx	#16
.4271	20 fb 3e	jsr $3efb		jsr	mainHandler
.4274	aa		tax				tax
.4275	68		pla				pla 							; get base back
.4276	85 32		sta $32				sta 	tempShort
.4278	98		tya				tya
.4279	48		pha				pha
.427a	a5 32		lda $32				lda 	tempShort 				; print in base A stck level X
.427c	20 c1 42	jsr $42c1			jsr 	DTPrintInteger
.427f	68		pla				pla
.4280	a8		tay				tay
.4281	4c 30 42	jmp $4230			jmp 	_DTListLoop
.4284					_DTIsToken:
.4284	20 97 43	jsr $4397			jsr 	DTDecodeToken
.4287	4c 30 42	jmp $4230			jmp 	_DTListLoop
.428a					_DTIsIdentifier:
.428a	20 50 43	jsr $4350			jsr 	DTIdentifier
.428d	4c 30 42	jmp $4230			jmp 	_DTListLoop
.4290					_DTIsFloat:
>4290	db						.byte 	$DB
.4291	4c 90 42	jmp $4290			jmp 	_DTIsFloat
.4294					_DTIsString:
.4294	a9 01		lda #$01			lda 	#1 							; now punctuation, may need spaces
.4296	20 3e 43	jsr $433e			jsr 	DTSwitchMode
.4299	a9 81		lda #$81			lda 	#LTYString
.429b	20 fd 42	jsr $42fd			jsr 	ListOutputCharacter
.429e	a9 22		lda #$22			lda 	#'"'						; open quote
.42a0	20 fd 42	jsr $42fd			jsr 	ListOutputCharacter
.42a3	a2 02		ldx #$02			ldx 	#2 							; evaluate string to TOS2.
.42a5	8a		txa				txa
.42a6	a2 10		ldx #$10		ldx	#16
.42a8	20 fb 3e	jsr $3efb		jsr	mainHandler
.42ab	aa		tax				tax
.42ac	b5 98		lda $98,x			lda 	esInt0,x 					; copy string address to temp0
.42ae	85 2a		sta $2a				sta 	temp0
.42b0	b5 a0		lda $a0,x			lda 	esInt1,x
.42b2	85 2b		sta $2b				sta 	temp0+1
.42b4	a9 00		lda #$00			lda 	#0 							; don't capitalise.
.42b6	20 d3 42	jsr $42d3			jsr 	DTPrintLengthPrefix
.42b9	a9 22		lda #$22			lda 	#'"'
.42bb	20 fd 42	jsr $42fd			jsr 	ListOutputCharacter
.42be	4c 30 42	jmp $4230			jmp 	_DTListLoop

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/detokenise/dtprint.asm

.0d6c					tPrintCount:
>0d6c							.fill 	1
.42c1					DTPrintInteger:
.42c1	48		pha				pha									; save base
.42c2	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.42c4	85 2a		sta $2a				sta 	temp0
.42c6	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.42c8	85 2b		sta $2b				sta 	1+(temp0)
.42ca	68		pla				pla
.42cb	a8		tay				tay
.42cc	8a		txa				txa
.42cd	a2 12		ldx #$12		ldx	#18
.42cf	20 fb 3e	jsr $3efb		jsr	mainHandler
.42d2	aa		tax				tax 								; then drop through here.
.42d3					DTPrintLengthPrefix:
.42d3	aa		tax				tax 								; A = 0 = don't case convert.
.42d4	98		tya				tya
.42d5	48		pha				pha
.42d6	a0 00		ldy #$00			ldy 	#0 							; get string length = chars to print.
.42d8	b1 2a		lda ($2a),y			lda 	(temp0),y
.42da	8d 6c 0d	sta $0d6c			sta 	tPrintCount
.42dd	f0 1b		beq $42fa			beq 	_DTPLPExit 					; empty string
.42df					_DTPLPLoop:
.42df	c8		iny				iny 								; get next.
.42e0	b1 2a		lda ($2a),y			lda 	(temp0),y
.42e2	29 7f		and #$7f			and 	#$7F
.42e4	e0 00		cpx #$00			cpx 	#0 							; skip if not case converting
.42e6	f0 0a		beq $42f2			beq 	_DTPLPNoCase
.42e8	c9 41		cmp #$41			cmp 	#"A" 						; if converting UC -> LC
.42ea	90 06		bcc $42f2			bcc 	_DTPLPNoCase
.42ec	c9 5b		cmp #$5b			cmp 	#"Z"+1
.42ee	b0 02		bcs $42f2			bcs 	_DTPLPNoCase
.42f0	49 20		eor #$20			eor 	#"A"^"a"
.42f2					_DTPLPNoCase
.42f2	20 fd 42	jsr $42fd			jsr 	ListOutputCharacter 		; call handler
.42f5	ce 6c 0d	dec $0d6c			dec 	tPrintCount 				; do all the characters
.42f8	d0 e5		bne $42df			bne 	_DTPLPLoop
.42fa					_DTPLPExit:
.42fa	68		pla				pla
.42fb	a8		tay				tay
.42fc	60		rts				rts
.42fd					ListOutputCharacter:
.42fd	85 32		sta $32				sta 	tempShort
.42ff	48		pha				pha
.4300	8a		txa				txa
.4301	48		pha				pha
.4302	98		tya				tya
.4303	48		pha				pha
.4304	a5 32		lda $32				lda 	tempShort 					; convert ASCII 6 bit (0-31) to 7 bit.
.4306	c9 20		cmp #$20			cmp 	#32
.4308	b0 0c		bcs $4316			bcs		_LOCHiBit
.430a	09 40		ora #$40			ora 	#64 						; conversion
.430c	c9 40		cmp #$40			cmp 	#64							; make l/c
.430e	f0 06		beq $4316			beq 	_LOCHiBit
.4310	c9 5b		cmp #$5b			cmp 	#65+26
.4312	b0 02		bcs $4316			bcs 	_LOCHiBit
.4314	69 20		adc #$20			adc 	#32
.4316					_LOCHiBit:
.4316	20 1f 43	jsr $431f			jsr 	_LOCCallVector				; call o/p handler routine
.4319	68		pla				pla
.431a	a8		tay				tay
.431b	68		pla				pla
.431c	aa		tax				tax
.431d	68		pla				pla
.431e					_LOCExit:
.431e	60		rts				rts
.431f					_LOCCallVector:
.431f	6c 68 0d	jmp ($0d68)			jmp 	(deTokeniseVector)
.4322					deTokenPrint:
.4322	c9 00		cmp #$00			cmp 	#0 							; if bit 7 sets ink colour
.4324	30 06		bmi $432c			bmi 	_dtpInk
.4326	a2 16		ldx #$16		ldx	#22
.4328	20 06 15	jsr $1506		jsr	deviceHandler
.432b	60		rts				rts
.432c	c9 ff		cmp #$ff	_dtpInk:cmp 	#255 						; e.g. herhe, get ink and set it
.432e	f0 08		beq $4338			beq 	_dtpCR						; except $FF => CRLF
.4330	29 07		and #$07			and 	#7
.4332	a2 08		ldx #$08		ldx	#8
.4334	20 06 15	jsr $1506		jsr	deviceHandler
.4337	60		rts				rts
.4338					_dtpCR:
.4338	a2 06		ldx #$06		ldx	#6
.433a	20 06 15	jsr $1506		jsr	deviceHandler
.433d	60		rts				rts
.433e					DTSwitchMode:
.433e	cd 6a 0d	cmp $0d6a			cmp 	LastCharacterClass 			; if changed, update character class
.4341	f0 04		beq $4347			beq 	_DTSMNoChange
.4343	8d 6a 0d	sta $0d6a			sta 	LastCharacterClass
.4346					_DTSMExit:
.4346	60		rts				rts
.4347					_DTSMNoChange:
.4347	c9 01		cmp #$01			cmp 	#1 							; if didn't change to punctuation, two identifiers so we
.4349	f0 fb		beq $4346			beq 	_DTSMExit 					; need a space.
.434b	a9 20		lda #$20			lda 	#" "
.434d	4c fd 42	jmp $42fd			jmp 	ListOutputCharacter

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/detokenise/identifier.asm

.4350					DTIdentifier:
.4350	a9 00		lda #$00			lda 	#0 							; now text, may need spaces
.4352	20 3e 43	jsr $433e			jsr 	DTSwitchMode
.4355	a9 87		lda #$87			lda 	#LTYIdentifier
.4357	20 fd 42	jsr $42fd			jsr 	ListOutputCharacter
.435a					_DTILoop:
.435a	b1 28		lda ($28),y			lda 	(codePtr),y 				; output main bit of identifier.
.435c	c9 2d		cmp #$2d			cmp 	#"-"						; make - back to _
.435e	d0 02		bne $4362			bne 	_DTINotUS
.4360	a9 5f		lda #$5f			lda 	#"_"
.4362					_DTINotUS:
.4362	20 fd 42	jsr $42fd			jsr 	ListOutputCharacter
.4365	c8		iny				iny
.4366	b1 28		lda ($28),y			lda 	(codePtr),y 				; until end identifier marker.
.4368	c9 3a		cmp #$3a			cmp 	#$3A
.436a	90 ee		bcc $435a			bcc 	_DTILoop
.436c	c8		iny				iny
.436d	c9 3a		cmp #$3a			cmp 	#$3A 						; is it integer non array
.436f	f0 25		beq $4396			beq 	_DTIExit 					; no postfix.
.4371	48		pha				pha
.4372	a9 01		lda #$01			lda  	#1 							; it ends in punctuation
.4374	8d 6a 0d	sta $0d6a			sta 	LastCharacterClass
.4377	a9 82		lda #$82			lda 	#LTYPunctuation
.4379	20 fd 42	jsr $42fd			jsr 	ListOutputCharacter
.437c	68		pla				pla
.437d	c9 3b		cmp #$3b			cmp 	#$3B
.437f	f0 10		beq $4391			beq 	_DTIArray
.4381	4a		lsr a				lsr 	a 							; array flag in C
.4382	08		php				php
.4383	49 1e		eor #$1e			eor 	#$3C/2 						; check if $
.4385	f0 02		beq $4389			beq 	_DTIDollar
.4387	a9 07		lda #$07			lda 	#"$"^"#" 					; this if #, 0 if $
.4389					_DTIDollar:
.4389	49 24		eor #$24			eor 	#"$"
.438b	20 fd 42	jsr $42fd			jsr 	ListOutputCharacter
.438e	28		plp				plp
.438f	90 05		bcc $4396			bcc 	_DTIExit
.4391					_DTIArray:
.4391	a9 28		lda #$28			lda 	#"("
.4393	20 fd 42	jsr $42fd			jsr 	ListOutputCharacter
.4396					_DTIExit:
.4396	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/detokenise/token.asm

.4397					DTDecodeToken:
.4397	a2 00		ldx #$00			ldx 	#0 							; table number to use
.4399	b1 28		lda ($28),y			lda 	(codePtr),y
.439b	c9 84		cmp #$84			cmp 	#$84
.439d	b0 05		bcs $43a4			bcs 	_DTNotShift
.439f	29 03		and #$03			and 	#3 							; get the shift 1..3
.43a1	0a		asl a				asl 	a 							; put 2 x in X
.43a2	aa		tax				tax
.43a3	c8		iny				iny
.43a4					_DTNotShift:
.43a4	bd a6 46	lda $46a6,x			lda 	TokenTableAddress,x 		; get the token table to use to decode it.
.43a7	85 2a		sta $2a				sta 	temp0 						; point into temp0
.43a9	bd a7 46	lda $46a7,x			lda 	TokenTableAddress+1,x
.43ac	85 2b		sta $2b				sta 	temp0+1
.43ae	b1 28		lda ($28),y			lda 	(codePtr),y 				; get the token value.
.43b0	c8		iny				iny 								; consume it.
.43b1	aa		tax				tax
.43b2	98		tya				tya
.43b3	48		pha				pha
.43b4					_DTFindText:
.43b4	e0 86		cpx #$86			cpx 	#$86 						; finished ?
.43b6	f0 11		beq $43c9			beq 	_DTFoundText
.43b8	ca		dex				dex
.43b9	a0 00		ldy #$00			ldy 	#0 							; add length+1 to temp0
.43bb	38		sec				sec
.43bc	b1 2a		lda ($2a),y			lda 	(temp0),y
.43be	65 2a		adc $2a				adc 	temp0
.43c0	85 2a		sta $2a				sta 	temp0
.43c2	90 f0		bcc $43b4			bcc 	_DTFindText
.43c4	e6 2b		inc $2b				inc 	temp0+1
.43c6	4c b4 43	jmp $43b4			jmp 	_DTFindText
.43c9					_DTFoundText:
.43c9	a0 01		ldy #$01			ldy 	#1 							; get first character
.43cb	b1 2a		lda ($2a),y			lda 	(temp0),y
.43cd	29 7f		and #$7f			and 	#$7F 						; will have bit 7 set.
.43cf	c9 41		cmp #$41			cmp 	#"A" 						; check for punctuation.
.43d1	90 11		bcc $43e4			bcc 	_DTIsPunctuation
.43d3	c9 5b		cmp #$5b			cmp 	#"Z"+1
.43d5	b0 0d		bcs $43e4			bcs 	_DTIsPunctuation
.43d7	a9 00		lda #$00			lda 	#0 							; now text, may need spaces
.43d9	20 3e 43	jsr $433e			jsr 	DTSwitchMode
.43dc	a9 83		lda #$83			lda 	#LTYKeyword
.43de	20 fd 42	jsr $42fd			jsr 	ListOutputCharacter
.43e1	4c ee 43	jmp $43ee			jmp 	_DTPrint
.43e4					_DTIsPunctuation:
.43e4	a9 01		lda #$01			lda 	#1 							; now punctuation, may need spaces
.43e6	20 3e 43	jsr $433e			jsr 	DTSwitchMode
.43e9	a9 82		lda #$82			lda 	#LTYPunctuation
.43eb	20 fd 42	jsr $42fd			jsr 	ListOutputCharacter
.43ee					_DTPrint:
.43ee	a9 01		lda #$01			lda 	#1 							; fix case.
.43f0	20 d3 42	jsr $42d3			jsr 	DTPrintLengthPrefix 		; print it out.
.43f3	a0 00		ldy #$00			ldy 	#0
.43f5	b1 2a		lda ($2a),y			lda 	(temp0),y
.43f7	a8		tay				tay
.43f8	b1 2a		lda ($2a),y			lda 	(temp0),y
.43fa	29 7f		and #$7f			and 	#$7F 						; will have bit 7 set.
.43fc	c9 41		cmp #$41			cmp 	#"A" 						; check for punctuation.
.43fe	90 04		bcc $4404			bcc 	_DTIsNowPunctuation
.4400	c9 5b		cmp #$5b			cmp 	#"Z"+1
.4402	90 05		bcc $4409			bcc 	_DTPExit
.4404					_DTIsNowPunctuation:
.4404	a9 01		lda #$01			lda 	#1
.4406	8d 6a 0d	sta $0d6a			sta		LastCharacterClass
.4409					_DTPExit:
.4409	68		pla				pla
.440a	a8		tay				tay
.440b	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/search.asm

.0d6d					currentSet:
>0d6d							.fill 	1
.440c					TokenSearch:
.440c	8a		txa				txa
.440d	48		pha				pha
.440e	98		tya				tya
.440f	48		pha				pha
.4410	a9 00		lda #$00			lda 	#0
.4412	8d 6d 0d	sta $0d6d			sta 	currentSet
.4415					_TSLoop:
.4415	ad 6d 0d	lda $0d6d			lda 	currentSet 					; 2 x currentset in X
.4418	0a		asl a				asl 	a
.4419	aa		tax				tax
.441a	bd a6 46	lda $46a6,x			lda 	TokenTableAddress,x 		; set temp0 to the table address
.441d	85 2a		sta $2a				sta 	temp0
.441f	bd a7 46	lda $46a7,x			lda 	TokenTableAddress+1,x
.4422	85 2b		sta $2b				sta 	temp0+1
.4424	20 4b 44	jsr $444b			jsr 	TokenSearchOne 				; search one table
.4427	b0 0d		bcs $4436			bcs 	_TSFound 					; found a token.
.4429	ee 6d 0d	inc $0d6d			inc 	currentSet 					; next set
.442c	ad 6d 0d	lda $0d6d			lda 	currentSet
.442f	c9 04		cmp #$04			cmp 	#4
.4431	d0 e2		bne $4415			bne 	_TSLoop 					; back if not done all four.
.4433	18		clc				clc 								; clear carry and exit
.4434	90 10		bcc $4446			bcc 	_TSExit
.4436					_TSFound:
.4436	48		pha				pha 								; save token
.4437	ad 6d 0d	lda $0d6d			lda 	currentSet					; if set zero no shift
.443a	f0 05		beq $4441			beq 	_TSNoShift
.443c	09 80		ora #$80			ora 	#$80 						; Write as $81-$83
.443e	20 fc 44	jsr $44fc			jsr 	TokenWrite
.4441					_TSNoShift:
.4441	68		pla				pla 								; get token back
.4442	20 fc 44	jsr $44fc			jsr 	TokenWrite 					; write it
.4445	38		sec				sec 								; carry set indicating success
.4446					_TSExit:
.4446	68		pla				pla
.4447	a8		tay				tay
.4448	68		pla				pla
.4449	aa		tax				tax
.444a	60		rts				rts
.444b					TokenSearchOne:
.444b	a2 86		ldx #$86			ldx 	#$86 						; current token being tested.
.444d					_TSOLoop:
.444d	a0 00		ldy #$00			ldy 	#0
.444f	b1 2a		lda ($2a),y			lda 	(temp0),y 					; get length of token
.4451	f0 26		beq $4479			beq 	_TSOFail 					; if zero, end of table
.4453	cd cf 0a	cmp $0acf			cmp 	convertBuffer 				; length is the same, compare the text matches.
.4456	f0 11		beq $4469			beq 	_TSOCheckText
.4458					_TSONext:
.4458	e8		inx				inx 								; bump token
.4459	a0 00		ldy #$00			ldy 	#0							; get length
.445b	b1 2a		lda ($2a),y			lda 	(temp0),y
.445d	38		sec				sec
.445e	65 2a		adc $2a				adc 	temp0 						; add to temp0 + 1
.4460	85 2a		sta $2a				sta 	temp0
.4462	90 e9		bcc $444d			bcc 	_TSOLoop
.4464	e6 2b		inc $2b				inc 	temp0+1
.4466	4c 4d 44	jmp $444d			jmp 	_TSOLoop
.4469					_TSOCheckText:
.4469	a8		tay				tay 								; compare length downto 1.
.446a					_TSOCheckLoop:
.446a	b1 2a		lda ($2a),y			lda 	(temp0),y 					; use EOR to compare
.446c	59 cf 0a	eor $0acf,y			eor 	convertBuffer,y
.446f	29 7f		and #$7f			and 	#$7F 						; ignore bit 7
.4471	d0 e5		bne $4458			bne 	_TSONext 					; different goto next.
.4473	88		dey				dey 								; do all
.4474	d0 f4		bne $446a			bne 	_TSOCheckLoop
.4476	8a		txa				txa 								; return token in A and carry set
.4477	38		sec				sec
.4478	60		rts				rts
.4479					_TSOFail:
.4479	18		clc				clc
.447a	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/test.asm

.447b					TokTest:
.447b	a2 ff		ldx #$ff				ldx 	#$FF
.447d	9a		txs					txs
.447e	a9 9b		lda #$9b			lda 	#(TokenText1) & $FF
.4480	85 28		sta $28				sta 	codePtr
.4482	a9 44		lda #$44			lda 	#(TokenText1) >> 8
.4484	85 29		sta $29				sta 	1+(codePtr)
.4486	20 9b 44	jsr $449b				jsr 	Tokenise
.4489	a2 00		ldx #$00	TokStop:	ldx 	#0 					; compare vs precalculated result
.448b	bd 9b 44	lda $449b,x	_TokCheck:	lda 	TokenBytes1,x
.448e	dd 71 0d	cmp $0d71,x				cmp 	tokenBuffer,x
.4491	d0 fe		bne $4491	_TokFail:	bne 	_TokFail	 		; error.
.4493	e8		inx					inx
.4494	c9 80		cmp #$80				cmp 	#$80
.4496	d0 f3		bne $448b				bne 	_TokCheck
.4498	4c ff ff	jmp $ffff				jmp 	$FFFF 				; successfully tokenised then quit.

;******  Processing file: tokeniser/tokenise/../../generated/toktest.inc

.449b					TokenText1:
.449b					TokenBytes1:

;******  Return to file: tokeniser/tokenise/test.asm


;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokenise.asm

.0d6e					tokenHeader:
>0d6e							.fill 	3
.0d71					tokenBuffer:
>0d71							.fill 	256
.0e71					tokenBufferIndex:
>0e71							.fill 	1
.449b					Tokenise:
.449b	20 15 45	jsr $4515			jsr 	TokeniseMakeASCIIZ 			; convert to ASCIIZ string.
.449e					TokeniseASCIIZ:
.449e	20 26 45	jsr $4526			jsr 	TokeniseFixCase 			; remove controls and lower case outside quotes.
.44a1	a9 00		lda #$00			lda 	#0 							; reset the token buffer index
.44a3	8d 71 0e	sta $0e71			sta 	tokenBufferIndex
.44a6	a8		tay				tay 								; start pointer
.44a7	a9 80		lda #$80			lda 	#$80 						; empty token buffer ($80 ends it)
.44a9	8d 71 0d	sta $0d71			sta 	tokenBuffer
.44ac					_TokLoop:
.44ac	b1 28		lda ($28),y			lda 	(codePtr),y 				; get next character
.44ae	f0 46		beq $44f6			beq 	_TokExit 					; if zero, then exit.
.44b0	c8		iny				iny 								; skip over spaces.
.44b1	c9 20		cmp #$20			cmp 	#" "
.44b3	f0 f7		beq $44ac			beq 	_TokLoop
.44b5	88		dey				dey 								; point back to character.
.44b6	c9 26		cmp #$26			cmp 	#"&"						; Hexadecimal constant.
.44b8	f0 18		beq $44d2			beq 	_TokHexConst
.44ba	c9 22		cmp #$22			cmp 	#'"'						; Quoted String
.44bc	f0 23		beq $44e1			beq 	_TokQString
.44be	c9 5b		cmp #$5b			cmp 	#"Z"+1 						; > 'Z' is punctuation
.44c0	b0 26		bcs $44e8			bcs 	_TokPunctuation
.44c2	c9 41		cmp #$41			cmp 	#"A" 						; A..Z identifier
.44c4	b0 29		bcs $44ef			bcs 	_TokIdentifier
.44c6	c9 3a		cmp #$3a			cmp 	#"9"+1
.44c8	b0 1e		bcs $44e8			bcs 	_TokPunctuation 			; between 9 and A exclusive, punctuation
.44ca	c9 30		cmp #$30			cmp 	#"0"
.44cc	90 1a		bcc $44e8			bcc 	_TokPunctuation 			; < 0, punctuation.
.44ce	a9 0a		lda #$0a			lda 	#10  						; 0..9 constant in base 10.
.44d0	d0 08		bne $44da			bne 	_TokConst
.44d2					_TokHexConst:
.44d2	c8		iny				iny									; consume token.
.44d3	a9 c5		lda #$c5			lda 	#TKW_AMP 					; Write ampersand token out
.44d5	20 fc 44	jsr $44fc			jsr 	TokenWrite
.44d8	a9 10		lda #$10			lda 	#16
.44da					_TokConst:
.44da	20 e4 45	jsr $45e4			jsr 	TokeniseInteger
.44dd	b0 cd		bcs $44ac			bcs 	_TokLoop
.44df	90 18		bcc $44f9			bcc 	_TokFail
.44e1					_TokQString:
.44e1	20 7a 46	jsr $467a			jsr 	TokeniseString
.44e4	b0 c6		bcs $44ac			bcs 	_TokLoop
.44e6	90 11		bcc $44f9			bcc 	_TokFail
.44e8					_TokPunctuation:
.44e8	20 59 46	jsr $4659			jsr 	TokenisePunctuation
.44eb	b0 bf		bcs $44ac			bcs 	_TokLoop
.44ed	90 0a		bcc $44f9			bcc 	_TokFail
.44ef					_TokIdentifier:
.44ef	20 55 45	jsr $4555			jsr 	TokeniseIdentifier
.44f2	b0 b8		bcs $44ac			bcs 	_TokLoop
.44f4	90 03		bcc $44f9			bcc 	_TokFail
.44f6					_TokExit:
.44f6	a9 01		lda #$01			lda 	#1
.44f8	60		rts				rts
.44f9					_TokFail:
.44f9	a9 00		lda #$00			lda 	#0
.44fb	60		rts				rts
.44fc					TokenWrite:
.44fc	85 32		sta $32				sta 	tempShort 					; save XA
.44fe	48		pha				pha
.44ff	8a		txa				txa
.4500	48		pha				pha
.4501	a5 32		lda $32				lda 	tempShort
.4503	ae 71 0e	ldx $0e71			ldx 	tokenBufferIndex 			; geet index
.4506	9d 71 0d	sta $0d71,x			sta 	tokenBuffer,x 				; write byte to buffer
.4509	a9 80		lda #$80			lda 	#TOK_EOL 					; pre-emptively write EOL marker after
.450b	9d 72 0d	sta $0d72,x			sta 	tokenBuffer+1,x
.450e	ee 71 0e	inc $0e71			inc 	tokenBufferIndex 			; bump index
.4511	68		pla				pla
.4512	aa		tax				tax
.4513	68		pla				pla
.4514	60		rts				rts
.4515					TokeniseMakeASCIIZ:
.4515	a0 00		ldy #$00			ldy 	#0							; get length of string.
.4517	b1 28		lda ($28),y			lda 	(codePtr),y
.4519	a8		tay				tay
.451a	c8		iny				iny 								; +1, the NULL goes here.
.451b	a9 00		lda #$00			lda 	#0
.451d	91 28		sta ($28),y			sta 	(codePtr),y 				; write the trailing NULL.
.451f	e6 28		inc $28				inc 	codePtr 					; bump the pointer.
.4521	d0 02		bne $4525			bne 	_TMKAExit
.4523	e6 29		inc $29				inc 	codePtr+1
.4525					_TMKAExit:
.4525	60		rts				rts
.4526					TokeniseFixCase:
.4526	a0 00		ldy #$00			ldy 	#0 							; position in buffer.
.4528	a2 01		ldx #$01			ldx 	#1 							; bit 0 of this is 'in quotes'
.452a					_TFCFlipQ:
.452a	8a		txa				txa
.452b	49 01		eor #$01			eor 	#1
.452d	aa		tax				tax
.452e					_TFCLoop:
.452e	b1 28		lda ($28),y			lda 	(codePtr),y 				; get character
.4530	f0 22		beq $4554			beq 	_TFCExit 					; if zero exit.
.4532	c9 20		cmp #$20			cmp 	#32 						; if control
.4534	90 1a		bcc $4550			bcc 	_TFCControl
.4536	c8		iny				iny 								; preconsume
.4537	c9 22		cmp #$22			cmp 	#'"'
.4539	f0 ef		beq $452a			beq 	_TFCFlipQ
.453b	c9 61		cmp #$61			cmp 	#"a"						; check if L/C
.453d	90 ef		bcc $452e			bcc 	_TFCLoop
.453f	c9 7b		cmp #$7b			cmp 	#"z"+1
.4541	b0 eb		bcs $452e			bcs 	_TFCLoop
.4543	e0 00		cpx #$00			cpx 	#0 							; in quotes, if so, leave alone.
.4545	d0 e7		bne $452e			bne 	_TFCLoop
.4547	88		dey				dey
.4548	49 20		eor #$20			eor 	#"A"^"a"					; make U/C
.454a					_TFCWrite:
.454a	91 28		sta ($28),y			sta 	(codePtr),y
.454c	c8		iny				iny
.454d	4c 2e 45	jmp $452e			jmp 	_TFCLoop
.4550					_TFCControl:
.4550	a9 20		lda #$20			lda 	#" "
.4552	d0 f6		bne $454a			bne 	_TFCWrite
.4554					_TFCExit:
.4554	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokident.asm

.4555					TokeniseIdentifier:
.4555	a2 00		ldx #$00			ldx 	#0
.4557					_TICopyID:
.4557	b1 28		lda ($28),y			lda 	(codePtr),y					; get characters
.4559	c9 5f		cmp #$5f			cmp 	#"_" 						; underscore converted to minus internally.
.455b	f0 16		beq $4573			beq 	_TICopyUnderscore
.455d	c9 2e		cmp #$2e			cmp 	#"."
.455f	f0 14		beq $4575			beq 	_TICopyIn
.4561	c9 30		cmp #$30			cmp 	#"0"
.4563	90 1b		bcc $4580			bcc 	_TIEndCopy
.4565	c9 3a		cmp #$3a			cmp 	#"9"+1
.4567	90 0c		bcc $4575			bcc 	_TICopyIn
.4569	c9 41		cmp #$41			cmp 	#"A"
.456b	90 13		bcc $4580			bcc 	_TIEndCopy
.456d	c9 5b		cmp #$5b			cmp 	#"Z"+1
.456f	b0 0f		bcs $4580			bcs		_TIEndCopy
.4571	90 02		bcc $4575			bcc 	_TICopyIn
.4573					_TICopyUnderScore:
.4573	a9 2d		lda #$2d			lda 	#"-"						; _ is mapped to -
.4575					_TICopyIn:
.4575	e8		inx				inx 								; write into buffer in 7 bit ASCII form
.4576	9d cf 0a	sta $0acf,x			sta 	convertBuffer,x
.4579	8e cf 0a	stx $0acf			stx 	convertBuffer
.457c	c8		iny				iny 								; next character
.457d	4c 57 45	jmp $4557			jmp 	_TICopyID 					; loop round
.4580					_TIEndCopy:
.4580	a9 24		lda #$24			lda 	#"$"
.4582	20 d7 45	jsr $45d7			jsr 	TIDCheckCopy
.4585	a9 23		lda #$23			lda 	#"#"
.4587	20 d7 45	jsr $45d7			jsr 	TIDCheckCopy
.458a	a9 28		lda #$28			lda 	#"("
.458c	20 d7 45	jsr $45d7			jsr 	TIDCheckCopy
.458f	20 0c 44	jsr $440c			jsr 	TokenSearch 				; is it a token
.4592	b0 41		bcs $45d5			bcs 	_TIExit 					; if so, then exit.
.4594	98		tya				tya
.4595	48		pha				pha
.4596	a0 3a		ldy #$3a			ldy 	#$3A 						; default type.
.4598	ae cf 0a	ldx $0acf			ldx 	convertBuffer 				; is last character (
.459b	bd cf 0a	lda $0acf,x			lda 	convertBuffer,x
.459e	c9 28		cmp #$28			cmp 	#"("
.45a0	d0 02		bne $45a4			bne 	_TINotArray
.45a2	ca		dex				dex 								; yes, remove it and convert to array.
.45a3	c8		iny				iny
.45a4					_TINotArray:
.45a4	bd cf 0a	lda $0acf,x			lda 	convertBuffer,x 			; check for $
.45a7	c9 24		cmp #$24			cmp 	#"$"
.45a9	d0 03		bne $45ae			bne 	_TINotString
.45ab	ca		dex				dex
.45ac	c8		iny				iny
.45ad	c8		iny				iny
.45ae					_TINotString:
.45ae	bd cf 0a	lda $0acf,x			lda 	convertBuffer,x 			; check for #
.45b1	c9 23		cmp #$23			cmp 	#"#"
.45b3	d0 05		bne $45ba			bne 	_TINotFloat
.45b5	ca		dex				dex
.45b6	c8		iny				iny
.45b7	c8		iny				iny
.45b8	c8		iny				iny
.45b9	c8		iny				iny
.45ba					_TINotFloat:
.45ba	e8		inx				inx 								; write end marker for identifier.
.45bb	98		tya				tya
.45bc	9d cf 0a	sta $0acf,x			sta 	convertBuffer,x
.45bf	8e cf 0a	stx $0acf			stx 	convertBuffer 				; update length.
.45c2	a2 01		ldx #$01			ldx 	#1
.45c4					_TIOutput:
.45c4	bd cf 0a	lda $0acf,x			lda 	convertBuffer,x
.45c7	29 3f		and #$3f			and 	#$3F
.45c9	48		pha				pha
.45ca	20 fc 44	jsr $44fc			jsr 	TokenWrite
.45cd	e8		inx				inx
.45ce	68		pla				pla
.45cf	c9 3a		cmp #$3a			cmp 	#$3A
.45d1	90 f1		bcc $45c4			bcc 	_TIOutput
.45d3	68		pla				pla
.45d4	a8		tay				tay
.45d5					_TIExit:
.45d5	38		sec				sec 								; this can't fail.
.45d6	60		rts				rts
.45d7					TIDCheckCopy:
.45d7	d1 28		cmp ($28),y			cmp 	(codePtr),y
.45d9	d0 08		bne $45e3			bne 	_TIDCCExit
.45db	e8		inx				inx
.45dc	9d cf 0a	sta $0acf,x			sta 	convertBuffer,x
.45df	8e cf 0a	stx $0acf			stx 	convertBuffer
.45e2	c8		iny				iny
.45e3					_TIDCCExit:
.45e3	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokinteger.asm

.45e4					TokeniseInteger:
.45e4	85 2c		sta $2c				sta 	temp1 						; save base
.45e6	a2 00		ldx #$00			ldx 	#0							; count of chars so far
.45e8	8e cf 0a	stx $0acf			stx 	convertBuffer
.45eb					_TIGetChars:
.45eb	b1 28		lda ($28),y			lda 	(codePtr),y 				; check character is numeric
.45ed	c9 30		cmp #$30			cmp 	#"0"
.45ef	90 1f		bcc $4610			bcc 	_TIEndGet
.45f1	c9 3a		cmp #$3a			cmp 	#"9"+1
.45f3	90 10		bcc $4605			bcc 	_TIHaveChar
.45f5	a5 2c		lda $2c				lda 	temp1 						; fail if not hex mode
.45f7	c9 0a		cmp #$0a			cmp 	#10
.45f9	f0 15		beq $4610			beq 	_TIEndGet
.45fb	b1 28		lda ($28),y			lda 	(codePtr),y 				; check legitimate hex.
.45fd	c9 41		cmp #$41			cmp 	#"A"
.45ff	90 0f		bcc $4610			bcc 	_TIEndGet
.4601	c9 5b		cmp #$5b			cmp 	#"Z"+1
.4603	b0 0b		bcs $4610			bcs 	_TIEndGet
.4605					_TIHaveChar:
.4605	e8		inx				inx 								; write into buffer.
.4606	8e cf 0a	stx $0acf			stx 	convertBuffer
.4609	9d cf 0a	sta $0acf,x			sta 	convertBuffer,x
.460c	c8		iny				iny 								; next char
.460d	4c eb 45	jmp $45eb			jmp 	_TIGetChars
.4610					_TIEndGet:
.4610	e0 00		cpx #$00			cpx 	#0 							; no char acquired.
.4612	f0 1c		beq $4630			beq 	_TIFail
.4614	98		tya				tya
.4615	48		pha				pha
.4616	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.4618	85 2a		sta $2a				sta 	temp0
.461a	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.461c	85 2b		sta $2b				sta 	1+(temp0)
.461e	a9 00		lda #$00			lda 	#0 							; stack level 0
.4620	a4 2c		ldy $2c				ldy 	temp1 						; base Y
.4622	a2 1a		ldx #$1a		ldx	#26
.4624	20 fb 3e	jsr $3efb		jsr	mainHandler
.4627	68		pla				pla
.4628	a8		tay				tay
.4629	90 05		bcc $4630			bcc 	_TIFail 					; didn't convert.
.462b	20 32 46	jsr $4632			jsr 	TIRecursiveOut 				; recursive output ?
.462e	38		sec				sec
.462f	60		rts				rts
.4630					_TIFail:
.4630	18		clc				clc
.4631	60		rts				rts
.4632					TIRecursiveOut:
.4632	a5 98		lda $98				lda 	esInt0 						; get value to output after possible recursion
.4634	29 3f		and #$3f			and 	#$3F
.4636	09 40		ora #$40			ora 	#$40
.4638	48		pha				pha
.4639	a5 98		lda $98				lda 	esInt0 						; are we recursing ?
.463b	29 c0		and #$c0			and 	#$C0
.463d	05 a0		ora $a0				ora 	esInt1
.463f	05 a8		ora $a8				ora 	esInt2
.4641	05 b0		ora $b0				ora 	esInt3
.4643	f0 10		beq $4655			beq 	_TIRONoRecursion
.4645	a2 06		ldx #$06			ldx 	#6 							; shift right x 6
.4647					_TIROShift:
.4647	46 b0		lsr $b0				lsr 	esInt3
.4649	66 a8		ror $a8				ror 	esInt2
.464b	66 a0		ror $a0				ror 	esInt1
.464d	66 98		ror $98				ror 	esInt0
.464f	ca		dex				dex
.4650	d0 f5		bne $4647			bne 	_TIROShift
.4652	20 32 46	jsr $4632			jsr 	TIRecursiveOut 				; call recursively
.4655					_TIRONoRecursion:
.4655	68		pla				pla 								; pull the old bit.
.4656	4c fc 44	jmp $44fc			jmp 	TokenWrite

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokpunct.asm

.4659					TokenisePunctuation:
.4659	b1 28		lda ($28),y			lda	 	(codePtr),y 				; copy next 2 chars into convertBuffer
.465b	8d d0 0a	sta $0ad0			sta 	convertBuffer+1
.465e	c8		iny				iny
.465f	b1 28		lda ($28),y			lda 	(codePtr),y
.4661	8d d1 0a	sta $0ad1			sta 	convertBuffer+2
.4664	c8		iny				iny 								; Y is +2
.4665	a9 02		lda #$02			lda 	#2 							; 2 character string.
.4667	8d cf 0a	sta $0acf			sta 	convertBuffer
.466a	20 0c 44	jsr $440c			jsr 	TokenSearch 				; search for that token.
.466d	b0 0a		bcs $4679			bcs 	_TIFound
.466f	ce cf 0a	dec $0acf			dec 	convertBuffer 				; make it a 1 character string
.4672	88		dey				dey 								; Y is now +1
.4673	20 0c 44	jsr $440c			jsr 	TokenSearch 				; search for that token.
.4676	b0 01		bcs $4679			bcs 	_TIFound
.4678	88		dey				dey 								; Y is now +0, carry clear indicating failure.
.4679					_TIFound:
.4679	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokstring.asm

.467a					TokeniseString:
.467a	c8		iny				iny 								; skip opening quote
.467b	a2 ff		ldx #$ff			ldx 	#255 						; count length of string.
.467d	84 2a		sty $2a				sty 	temp0 						; save start.
.467f					_TSGetLength:
.467f	b1 28		lda ($28),y			lda 	(codePtr),y 				; get next
.4681	f0 21		beq $46a4			beq 	_TSFail						; end of line, fail
.4683	c8		iny				iny
.4684	e8		inx				inx
.4685	c9 22		cmp #$22			cmp 	#'"' 						; until end quote found.
.4687	d0 f6		bne $467f			bne 	_TSGetLength
.4689	a9 85		lda #$85			lda 	#TOK_STR 					; write string token out
.468b	20 fc 44	jsr $44fc			jsr 	TokenWrite
.468e	8a		txa				txa 								; output length
.468f	20 fc 44	jsr $44fc			jsr 	TokenWrite
.4692	a4 2a		ldy $2a				ldy 	temp0 						; get original position
.4694	e0 00		cpx #$00			cpx 	#0 							; check ended
.4696	f0 09		beq $46a1			beq 	_TSExit
.4698					_TSOutput:
.4698	b1 28		lda ($28),y			lda 	(codePtr),y					; output character
.469a	20 fc 44	jsr $44fc			jsr 	TokenWrite
.469d	c8		iny				iny
.469e	ca		dex				dex
.469f	d0 f7		bne $4698			bne 	_TSOutput
.46a1					_TSExit:
.46a1	c8		iny				iny 								; skip ending quote
.46a2	38		sec				sec 								; return CS.
.46a3	60		rts				rts
.46a4					_TSFail:
.46a4	18		clc				clc
.46a5	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokentext.asm

.46a6					TokenTableAddress:
>46a6	ae 46						.word 	Group0Text
>46a8	81 48						.word 	Group1Text
>46aa	ce 49						.word 	Group2Text
>46ac	26 4a						.word 	Group3Text

;******  Processing file: tokeniser/../generated/tokentext0.inc

.46ae					Group0Text:
>46ae	03 41 4e c4				.byte $03,$41,$4e,$c4                  ; $86 and
>46b2	02 4f d2				.byte $02,$4f,$d2                      ; $87 or
>46b5	03 58 4f d2				.byte $03,$58,$4f,$d2                  ; $88 xor
>46b9	02 3e bd				.byte $02,$3e,$bd                      ; $89 >=
>46bc	02 3c bd				.byte $02,$3c,$bd                      ; $8a <=
>46bf	01 be					.byte $01,$be                          ; $8b >
>46c1	01 bc					.byte $01,$bc                          ; $8c <
>46c3	01 bd					.byte $01,$bd                          ; $8d =
>46c5	02 3c be				.byte $02,$3c,$be                      ; $8e <>
>46c8	01 ab					.byte $01,$ab                          ; $8f +
>46ca	01 ad					.byte $01,$ad                          ; $90 -
>46cc	02 3e be				.byte $02,$3e,$be                      ; $91 >>
>46cf	02 3c bc				.byte $02,$3c,$bc                      ; $92 <<
>46d2	01 aa					.byte $01,$aa                          ; $93 *
>46d4	01 af					.byte $01,$af                          ; $94 /
>46d6	03 4d 4f c4				.byte $03,$4d,$4f,$c4                  ; $95 mod
>46da	01 de					.byte $01,$de                          ; $96 ^
>46dc	01 a1					.byte $01,$a1                          ; $97 !
>46de	01 bf					.byte $01,$bf                          ; $98 ?
>46e0	06 52 45 50 45 41 d4			.byte $06,$52,$45,$50,$45,$41,$d4      ; $99 repeat
>46e7	05 57 48 49 4c c5			.byte $05,$57,$48,$49,$4c,$c5          ; $9a while
>46ed	03 46 4f d2				.byte $03,$46,$4f,$d2                  ; $9b for
>46f1	02 49 c6				.byte $02,$49,$c6                      ; $9c if
>46f4	07 44 45 46 50 52 4f c3			.byte $07,$44,$45,$46,$50,$52,$4f,$c3  ; $9d defproc
>46fc	05 55 4e 54 49 cc			.byte $05,$55,$4e,$54,$49,$cc          ; $9e until
>4702	04 57 45 4e c4				.byte $04,$57,$45,$4e,$c4              ; $9f wend
>4707	04 4e 45 58 d4				.byte $04,$4e,$45,$58,$d4              ; $a0 next
>470c	04 54 48 45 ce				.byte $04,$54,$48,$45,$ce              ; $a1 then
>4711	05 45 4e 44 49 c6			.byte $05,$45,$4e,$44,$49,$c6          ; $a2 endif
>4717	07 45 4e 44 50 52 4f c3			.byte $07,$45,$4e,$44,$50,$52,$4f,$c3  ; $a3 endproc
>471f	01 a8					.byte $01,$a8                          ; $a4 (
>4721	04 4c 45 4e a8				.byte $04,$4c,$45,$4e,$a8              ; $a5 len(
>4726	04 53 47 4e a8				.byte $04,$53,$47,$4e,$a8              ; $a6 sgn(
>472b	04 41 42 53 a8				.byte $04,$41,$42,$53,$a8              ; $a7 abs(
>4730	07 52 41 4e 44 4f 4d a8			.byte $07,$52,$41,$4e,$44,$4f,$4d,$a8  ; $a8 random(
>4738	04 50 41 47 c5				.byte $04,$50,$41,$47,$c5              ; $a9 page
>473d	04 54 52 55 c5				.byte $04,$54,$52,$55,$c5              ; $aa true
>4742	05 46 41 4c 53 c5			.byte $05,$46,$41,$4c,$53,$c5          ; $ab false
>4748	04 4d 49 4e a8				.byte $04,$4d,$49,$4e,$a8              ; $ac min(
>474d	04 4d 41 58 a8				.byte $04,$4d,$41,$58,$a8              ; $ad max(
>4752	04 53 59 53 a8				.byte $04,$53,$59,$53,$a8              ; $ae sys(
>4757	06 54 49 4d 45 52 a8			.byte $06,$54,$49,$4d,$45,$52,$a8      ; $af timer(
>475e	06 45 56 45 4e 54 a8			.byte $06,$45,$56,$45,$4e,$54,$a8      ; $b0 event(
>4765	04 47 45 54 a8				.byte $04,$47,$45,$54,$a8              ; $b1 get(
>476a	06 49 4e 4b 45 59 a8			.byte $06,$49,$4e,$4b,$45,$59,$a8      ; $b2 inkey(
>4771	06 41 4c 4c 4f 43 a8			.byte $06,$41,$4c,$4c,$4f,$43,$a8      ; $b3 alloc(
>4778	05 43 48 52 24 a8			.byte $05,$43,$48,$52,$24,$a8          ; $b4 chr$(
>477e	06 4c 45 46 54 24 a8			.byte $06,$4c,$45,$46,$54,$24,$a8      ; $b5 left$(
>4785	05 4d 49 44 24 a8			.byte $05,$4d,$49,$44,$24,$a8          ; $b6 mid$(
>478b	07 52 49 47 48 54 24 a8			.byte $07,$52,$49,$47,$48,$54,$24,$a8  ; $b7 right$(
>4793	05 53 54 52 24 a8			.byte $05,$53,$54,$52,$24,$a8          ; $b8 str$(
>4799	04 56 41 4c a8				.byte $04,$56,$41,$4c,$a8              ; $b9 val(
>479e	05 50 45 45 4b a8			.byte $05,$50,$45,$45,$4b,$a8          ; $ba peek(
>47a4	05 44 45 45 4b a8			.byte $05,$44,$45,$45,$4b,$a8          ; $bb deek(
>47aa	05 4c 45 45 4b a8			.byte $05,$4c,$45,$45,$4b,$a8          ; $bc leek(
>47b0	04 41 53 43 a8				.byte $04,$41,$53,$43,$a8              ; $bd asc(
>47b5	04 49 4e 54 a8				.byte $04,$49,$4e,$54,$a8              ; $be int(
>47ba	06 46 4c 4f 41 54 a8			.byte $06,$46,$4c,$4f,$41,$54,$a8      ; $bf float(
>47c1	06 49 53 56 41 4c a8			.byte $06,$49,$53,$56,$41,$4c,$a8      ; $c0 isval(
>47c8	07 55 50 50 45 52 24 a8			.byte $07,$55,$50,$50,$45,$52,$24,$a8  ; $c1 upper$(
>47d0	07 4c 4f 57 45 52 24 a8			.byte $07,$4c,$4f,$57,$45,$52,$24,$a8  ; $c2 lower$(
>47d8	01 c0					.byte $01,$c0                          ; $c3 @
>47da	01 fe					.byte $01,$fe                          ; $c4 ~
>47dc	01 a6					.byte $01,$a6                          ; $c5 &
>47de	05 47 45 54 24 a8			.byte $05,$47,$45,$54,$24,$a8          ; $c6 get$(
>47e4	07 49 4e 4b 45 59 24 a8			.byte $07,$49,$4e,$4b,$45,$59,$24,$a8  ; $c7 inkey$(
>47ec	03 4d 45 cd				.byte $03,$4d,$45,$cd                  ; $c8 mem
>47f0	01 a9					.byte $01,$a9                          ; $c9 )
>47f2	01 ba					.byte $01,$ba                          ; $ca :
>47f4	01 ac					.byte $01,$ac                          ; $cb ,
>47f6	01 bb					.byte $01,$bb                          ; $cc ;
>47f8	01 a7					.byte $01,$a7                          ; $cd '
>47fa	02 54 cf				.byte $02,$54,$cf                      ; $ce to
>47fd	04 53 54 45 d0				.byte $04,$53,$54,$45,$d0              ; $cf step
>4802	04 50 52 4f c3				.byte $04,$50,$52,$4f,$c3              ; $d0 proc
>4807	05 4c 4f 43 41 cc			.byte $05,$4c,$4f,$43,$41,$cc          ; $d1 local
>480d	03 44 49 cd				.byte $03,$44,$49,$cd                  ; $d2 dim
>4811	03 52 45 cd				.byte $03,$52,$45,$cd                  ; $d3 rem
>4815	03 4c 45 d4				.byte $03,$4c,$45,$d4                  ; $d4 let
>4819	05 49 4e 50 55 d4			.byte $05,$49,$4e,$50,$55,$d4          ; $d5 input
>481f	04 45 4c 53 c5				.byte $04,$45,$4c,$53,$c5              ; $d6 else
>4824	03 56 44 d5				.byte $03,$56,$44,$d5                  ; $d7 vdu
>4828	05 50 52 49 4e d4			.byte $05,$50,$52,$49,$4e,$d4          ; $d8 print
>482e	04 44 41 54 c1				.byte $04,$44,$41,$54,$c1              ; $d9 data
>4833	05 49 4d 41 47 c5			.byte $05,$49,$4d,$41,$47,$c5          ; $da image
>4839	02 41 d4				.byte $02,$41,$d4                      ; $db at
>483c	04 46 4c 49 d0				.byte $04,$46,$4c,$49,$d0              ; $dc flip
>4841	06 41 53 53 45 52 d4			.byte $06,$41,$53,$53,$45,$52,$d4      ; $dd assert
>4848	04 50 4f 4b c5				.byte $04,$50,$4f,$4b,$c5              ; $de poke
>484d	04 44 4f 4b c5				.byte $04,$44,$4f,$4b,$c5              ; $df doke
>4852	04 4c 4f 4b c5				.byte $04,$4c,$4f,$4b,$c5              ; $e0 loke
>4857	03 49 4e cb				.byte $03,$49,$4e,$cb                  ; $e1 ink
>485b	05 50 41 50 45 d2			.byte $05,$50,$41,$50,$45,$d2          ; $e2 paper
>4861	03 43 4c d3				.byte $03,$43,$4c,$d3                  ; $e3 cls
>4865	06 4c 4f 43 41 54 c5			.byte $06,$4c,$4f,$43,$41,$54,$c5      ; $e4 locate
>486c	01 ae					.byte $01,$ae                          ; $e5 .
>486e	04 46 52 4f cd				.byte $04,$46,$52,$4f,$cd              ; $e6 from
>4873	01 a3					.byte $01,$a3                          ; $e7 #
>4875	05 43 4c 45 41 d2			.byte $05,$43,$4c,$45,$41,$d2          ; $e8 clear
>487b	04 54 45 58 d4				.byte $04,$54,$45,$58,$d4              ; $e9 text
>4880	00					.byte $00

;******  Return to file: tokeniser/tokentext.asm


;******  Processing file: tokeniser/../generated/tokentext1.inc

.4881					Group1Text:
>4881	04 4c 4f 41 c4				.byte $04,$4c,$4f,$41,$c4              ; $86 load
>4886	04 53 41 56 c5				.byte $04,$53,$41,$56,$c5              ; $87 save
>488b	04 4c 49 53 d4				.byte $04,$4c,$49,$53,$d4              ; $88 list
>4890	03 4e 45 d7				.byte $03,$4e,$45,$d7                  ; $89 new
>4894	05 42 52 45 41 cb			.byte $05,$42,$52,$45,$41,$cb          ; $8a break
>489a	03 52 55 ce				.byte $03,$52,$55,$ce                  ; $8b run
>489e	04 52 45 41 c4				.byte $04,$52,$45,$41,$c4              ; $8c read
>48a3	07 52 45 53 54 4f 52 c5			.byte $07,$52,$45,$53,$54,$4f,$52,$c5  ; $8d restore
>48ab	03 45 4e c4				.byte $03,$45,$4e,$c4                  ; $8e end
>48af	04 53 54 4f d0				.byte $04,$53,$54,$4f,$d0              ; $8f stop
>48b4	04 58 45 4d d5				.byte $04,$58,$45,$4d,$d5              ; $90 xemu
>48b9	04 47 4f 54 cf				.byte $04,$47,$4f,$54,$cf              ; $91 goto
>48be	05 47 4f 53 55 c2			.byte $05,$47,$4f,$53,$55,$c2          ; $92 gosub
>48c4	06 52 45 54 55 52 ce			.byte $06,$52,$45,$54,$55,$52,$ce      ; $93 return
>48cb	03 4f 52 c1				.byte $03,$4f,$52,$c1                  ; $94 ora
>48cf	05 28 41 4e 44 a9			.byte $05,$28,$41,$4e,$44,$a9          ; $95 (and)
>48d5	03 45 4f d2				.byte $03,$45,$4f,$d2                  ; $96 eor
>48d9	03 41 44 c3				.byte $03,$41,$44,$c3                  ; $97 adc
>48dd	03 53 54 c1				.byte $03,$53,$54,$c1                  ; $98 sta
>48e1	03 4c 44 c1				.byte $03,$4c,$44,$c1                  ; $99 lda
>48e5	03 43 4d d0				.byte $03,$43,$4d,$d0                  ; $9a cmp
>48e9	03 53 42 c3				.byte $03,$53,$42,$c3                  ; $9b sbc
>48ed	03 41 53 cc				.byte $03,$41,$53,$cc                  ; $9c asl
>48f1	03 52 4f cc				.byte $03,$52,$4f,$cc                  ; $9d rol
>48f5	03 4c 53 d2				.byte $03,$4c,$53,$d2                  ; $9e lsr
>48f9	03 52 4f d2				.byte $03,$52,$4f,$d2                  ; $9f ror
>48fd	03 53 54 d8				.byte $03,$53,$54,$d8                  ; $a0 stx
>4901	03 4c 44 d8				.byte $03,$4c,$44,$d8                  ; $a1 ldx
>4905	03 44 45 c3				.byte $03,$44,$45,$c3                  ; $a2 dec
>4909	03 49 4e c3				.byte $03,$49,$4e,$c3                  ; $a3 inc
>490d	03 53 54 da				.byte $03,$53,$54,$da                  ; $a4 stz
>4911	03 42 49 d4				.byte $03,$42,$49,$d4                  ; $a5 bit
>4915	03 53 54 d9				.byte $03,$53,$54,$d9                  ; $a6 sty
>4919	03 4c 44 d9				.byte $03,$4c,$44,$d9                  ; $a7 ldy
>491d	03 43 50 d9				.byte $03,$43,$50,$d9                  ; $a8 cpy
>4921	03 43 50 d8				.byte $03,$43,$50,$d8                  ; $a9 cpx
>4925	03 54 53 c2				.byte $03,$54,$53,$c2                  ; $aa tsb
>4929	03 54 52 c2				.byte $03,$54,$52,$c2                  ; $ab trb
>492d	03 4a 53 d2				.byte $03,$4a,$53,$d2                  ; $ac jsr
>4931	03 4a 4d d0				.byte $03,$4a,$4d,$d0                  ; $ad jmp
>4935	03 42 50 cc				.byte $03,$42,$50,$cc                  ; $ae bpl
>4939	03 42 4d c9				.byte $03,$42,$4d,$c9                  ; $af bmi
>493d	03 42 56 c3				.byte $03,$42,$56,$c3                  ; $b0 bvc
>4941	03 42 56 d3				.byte $03,$42,$56,$d3                  ; $b1 bvs
>4945	03 42 43 c3				.byte $03,$42,$43,$c3                  ; $b2 bcc
>4949	03 42 43 d3				.byte $03,$42,$43,$d3                  ; $b3 bcs
>494d	03 42 4e c5				.byte $03,$42,$4e,$c5                  ; $b4 bne
>4951	03 42 45 d1				.byte $03,$42,$45,$d1                  ; $b5 beq
>4955	03 42 52 c1				.byte $03,$42,$52,$c1                  ; $b6 bra
>4959	03 42 52 cb				.byte $03,$42,$52,$cb                  ; $b7 brk
>495d	03 50 48 d0				.byte $03,$50,$48,$d0                  ; $b8 php
>4961	03 43 4c c3				.byte $03,$43,$4c,$c3                  ; $b9 clc
>4965	03 50 4c d0				.byte $03,$50,$4c,$d0                  ; $ba plp
>4969	03 53 45 c3				.byte $03,$53,$45,$c3                  ; $bb sec
>496d	03 52 54 c9				.byte $03,$52,$54,$c9                  ; $bc rti
>4971	03 50 48 c1				.byte $03,$50,$48,$c1                  ; $bd pha
>4975	03 43 4c c9				.byte $03,$43,$4c,$c9                  ; $be cli
>4979	03 50 48 d9				.byte $03,$50,$48,$d9                  ; $bf phy
>497d	03 52 54 d3				.byte $03,$52,$54,$d3                  ; $c0 rts
>4981	03 50 4c c1				.byte $03,$50,$4c,$c1                  ; $c1 pla
>4985	03 53 45 c9				.byte $03,$53,$45,$c9                  ; $c2 sei
>4989	03 50 4c d9				.byte $03,$50,$4c,$d9                  ; $c3 ply
>498d	03 44 45 d9				.byte $03,$44,$45,$d9                  ; $c4 dey
>4991	03 54 58 c1				.byte $03,$54,$58,$c1                  ; $c5 txa
>4995	03 54 59 c1				.byte $03,$54,$59,$c1                  ; $c6 tya
>4999	03 54 58 d3				.byte $03,$54,$58,$d3                  ; $c7 txs
>499d	03 54 41 d9				.byte $03,$54,$41,$d9                  ; $c8 tay
>49a1	03 54 41 d8				.byte $03,$54,$41,$d8                  ; $c9 tax
>49a5	03 43 4c d6				.byte $03,$43,$4c,$d6                  ; $ca clv
>49a9	03 54 53 d8				.byte $03,$54,$53,$d8                  ; $cb tsx
>49ad	03 49 4e d9				.byte $03,$49,$4e,$d9                  ; $cc iny
>49b1	03 44 45 d8				.byte $03,$44,$45,$d8                  ; $cd dex
>49b5	03 43 4c c4				.byte $03,$43,$4c,$c4                  ; $ce cld
>49b9	03 50 48 d8				.byte $03,$50,$48,$d8                  ; $cf phx
>49bd	03 49 4e d8				.byte $03,$49,$4e,$d8                  ; $d0 inx
>49c1	03 4e 4f d0				.byte $03,$4e,$4f,$d0                  ; $d1 nop
>49c5	03 53 45 c4				.byte $03,$53,$45,$c4                  ; $d2 sed
>49c9	03 50 4c d8				.byte $03,$50,$4c,$d8                  ; $d3 plx
>49cd	00					.byte $00

;******  Return to file: tokeniser/tokentext.asm


;******  Processing file: tokeniser/../generated/tokentext2.inc

.49ce					Group2Text:
>49ce	05 56 50 4f 4b c5			.byte $05,$56,$50,$4f,$4b,$c5          ; $86 vpoke
>49d4	05 56 44 4f 4b c5			.byte $05,$56,$44,$4f,$4b,$c5          ; $87 vdoke
>49da	05 56 4c 4f 41 c4			.byte $05,$56,$4c,$4f,$41,$c4          ; $88 vload
>49e0	04 4d 4f 44 c5				.byte $04,$4d,$4f,$44,$c5              ; $89 mode
>49e5	07 50 41 4c 45 54 54 c5			.byte $07,$50,$41,$4c,$45,$54,$54,$c5  ; $8a palette
>49ed	06 53 50 52 49 54 c5			.byte $06,$53,$50,$52,$49,$54,$c5      ; $8b sprite
>49f4	03 43 4c c7				.byte $03,$43,$4c,$c7                  ; $8c clg
>49f8	04 52 45 43 d4				.byte $04,$52,$45,$43,$d4              ; $8d rect
>49fd	05 46 52 41 4d c5			.byte $05,$46,$52,$41,$4d,$c5          ; $8e frame
>4a03	04 44 52 41 d7				.byte $04,$44,$52,$41,$d7              ; $8f draw
>4a08	04 50 4c 4f d4				.byte $04,$50,$4c,$4f,$d4              ; $90 plot
>4a0d	04 4c 49 4e c5				.byte $04,$4c,$49,$4e,$c5              ; $91 line
>4a12	05 50 41 49 4e d4			.byte $05,$50,$41,$49,$4e,$d4          ; $92 paint
>4a18	05 53 4f 55 4e c4			.byte $05,$53,$4f,$55,$4e,$c4          ; $93 sound
>4a1e	06 56 4f 4c 55 4d c5			.byte $06,$56,$4f,$4c,$55,$4d,$c5      ; $94 volume
>4a25	00					.byte $00

;******  Return to file: tokeniser/tokentext.asm


;******  Processing file: tokeniser/../generated/tokentext3.inc

.4a26					Group3Text:
>4a26	06 56 50 45 45 4b a8			.byte $06,$56,$50,$45,$45,$4b,$a8      ; $86 vpeek(
>4a2d	06 56 44 45 45 4b a8			.byte $06,$56,$44,$45,$45,$4b,$a8      ; $87 vdeek(
>4a34	09 53 50 52 49 54 45 2e			.byte $09,$53,$50,$52,$49,$54,$45,$2e,$58,$a8 ; $88 sprite.x(
>4a3c	58 a8
>4a3e	09 53 50 52 49 54 45 2e			.byte $09,$53,$50,$52,$49,$54,$45,$2e,$59,$a8 ; $89 sprite.y(
>4a46	59 a8
>4a48	04 48 49 54 a8				.byte $04,$48,$49,$54,$a8              ; $8a hit(
>4a4d	06 4a 4f 59 2e 58 a8			.byte $06,$4a,$4f,$59,$2e,$58,$a8      ; $8b joy.x(
>4a54	06 4a 4f 59 2e 59 a8			.byte $06,$4a,$4f,$59,$2e,$59,$a8      ; $8c joy.y(
>4a5b	06 4a 4f 59 2e 42 a8			.byte $06,$4a,$4f,$59,$2e,$42,$a8      ; $8d joy.b(
>4a62	06 43 4c 4f 43 4b a8			.byte $06,$43,$4c,$4f,$43,$4b,$a8      ; $8e clock(
>4a69	00					.byte $00

;******  Return to file: tokeniser/tokentext.asm


;******  Return to file: tokeniser/tokeniser.asm

.4a6a					tokeniserHandler:
.4a6a	48		pha				pha
.4a6b	bd 7b 4a	lda $4a7b,x			lda 	tokeniserVectors,x
.4a6e	8d f2 0a	sta $0af2			sta 	jumpVector
.4a71	bd 7c 4a	lda $4a7c,x			lda 	1+(tokeniserVectors),x
.4a74	8d f3 0a	sta $0af3			sta 	jumpVector+1
.4a77	68		pla				pla
.4a78	6c f2 0a	jmp ($0af2)			jmp 	(jumpVector)
.4a7b					tokeniserVectors:
>4a7b	87 4a					.word _DummyControlHandler ; index 0
>4a7d	f6 41					.word Detokenise           ; index 2
>4a7f	ea 41					.word ListLine             ; index 4
>4a81	7b 44					.word TokTest              ; index 6
>4a83	9b 44					.word Tokenise             ; index 8
>4a85	9e 44					.word TokeniseASCIIZ       ; index 10
.4a87					_DummyControlHandler:
.4a87	60		rts			rts

;******  Return to file: basic.asm

.4a88					section_end_tokeniser:
.4a88					section_start_variable:

;******  Processing file: variable/variable.asm


;******  Processing file: variable/array/access.asm

.4a88					AccessArray:
.4a88	8a		txa				txa
.4a89	48		pha				pha
.4a8a	e8		inx				inx
.4a8b	20 54 4b	jsr $4b54			jsr 	GetArrayDimensions 			; get the array dimensions one up from here.
.4a8e	68		pla				pla
.4a8f	aa		tax				tax
.4a90	b5 98		lda $98,x			lda 	esInt0,x 					; restore address to follow in temp0.
.4a92	85 2a		sta $2a				sta 	temp0
.4a94	b5 a0		lda $a0,x			lda 	esInt1,x
.4a96	85 2b		sta $2b				sta 	temp0+1
.4a98	8a		txa				txa
.4a99	48		pha				pha
.4a9a	98		tya				tya
.4a9b	48		pha				pha
.4a9c					_AAFollow:
.4a9c	a0 00		ldy #$00			ldy 	#0
.4a9e	b1 2a		lda ($2a),y			lda 	(temp0),y
.4aa0	48		pha				pha
.4aa1	c8		iny				iny
.4aa2	b1 2a		lda ($2a),y			lda 	(temp0),y
.4aa4	85 2b		sta $2b				sta 	temp0+1
.4aa6	68		pla				pla
.4aa7	85 2a		sta $2a				sta 	temp0
.4aa9	e8		inx				inx 								; advance to next stack slot.
.4aaa	a0 00		ldy #$00			ldy 	#0
.4aac	b1 2a		lda ($2a),y			lda 	(temp0),y 					; compare max index vs required index
.4aae	d5 98		cmp $98,x			cmp 	esInt0,x
.4ab0	c8		iny				iny
.4ab1	b1 2a		lda ($2a),y			lda 	(temp0),y 					; drop bit 7 of the size, indicates follow.
.4ab3	85 2c		sta $2c				sta 	temp1 						; save the size in temp1 for later use.
.4ab5	29 7f		and #$7f			and 	#$7F
.4ab7	f5 a0		sbc $a0,x			sbc 	esInt1,x
.4ab9	90 50		bcc $4b0b			bcc 	_AABadIndex 				; failed on index if max index < required.
.4abb	18		clc				clc
.4abc	a5 2a		lda $2a				lda 	temp0
.4abe	69 02		adc #$02			adc 	#2
.4ac0	85 2a		sta $2a				sta 	temp0
.4ac2	90 02		bcc $4ac6			bcc 	_AANoCarry
.4ac4	e6 2b		inc $2b				inc 	temp0+1
.4ac6					_AANoCarry:
.4ac6	b5 98		lda $98,x			lda 	esInt0,x
.4ac8	85 2e		sta $2e				sta 	temp2
.4aca	b5 a0		lda $a0,x			lda 	esInt1,x
.4acc	85 2f		sta $2f				sta 	temp2+1
.4ace	ac 74 0e	ldy $0e74			ldy 	varType
.4ad1	b9 ae 4b	lda $4bae,y			lda 	CAActualSize-$3A,y
.4ad4	b4 91		ldy $91,x			ldy 	esType+1,x 					; is it top level
.4ad6	30 02		bmi $4ada			bmi 	_AANotPointer
.4ad8	a9 02		lda #$02			lda 	#2 							; array of pointers is 2.
.4ada					_AANotPointer:
.4ada	20 58 4c	jsr $4c58			jsr 	MultiplyTemp2ByA 			; multiply the index by the data size, in temp2.
.4add	18		clc				clc
.4ade	a5 2a		lda $2a				lda 	temp0
.4ae0	65 2e		adc $2e				adc 	temp2
.4ae2	85 2a		sta $2a				sta 	temp0
.4ae4	a5 2b		lda $2b				lda 	temp0+1
.4ae6	65 2f		adc $2f				adc 	temp2+1
.4ae8	85 2b		sta $2b				sta 	temp0+1
.4aea	b5 91		lda $91,x			lda 	esType+1,x
.4aec	30 07		bmi $4af5			bmi 	_AAUsedAllIndices
.4aee	a5 2c		lda $2c				lda 	temp1 						; check if this is a pointer array e.g. there are subarrays
.4af0	10 14		bpl $4b06			bpl 	_AABadDepth 				; no, too many indexes.
.4af2	4c 9c 4a	jmp $4a9c			jmp 	_AAFollow 					; otherwise follow them.
.4af5					_AAUsedAllIndices:
.4af5	a5 2c		lda $2c				lda 	temp1 						; get original high length byte.
.4af7	30 0d		bmi $4b06			bmi 	_AABadDepth 				; if -ve then this is an array of pointers.
.4af9	68		pla				pla
.4afa	a8		tay				tay
.4afb	68		pla				pla
.4afc	aa		tax				tax
.4afd	a5 2a		lda $2a				lda 	temp0 						; copy address of array element to stack,x
.4aff	95 98		sta $98,x			sta 	esInt0,x
.4b01	a5 2b		lda $2b				lda 	temp0+1
.4b03	95 a0		sta $a0,x			sta 	esInt1,x
.4b05	60		rts				rts
.4b06					_AABadDepth:
.4b06	a2 1c		ldx #$1c			ldx 	#ErrorID_ArrayDepth
.4b08	20 36 15	jsr $1536		jsr	errorHandler
.4b0b					_AABadIndex:
.4b0b	a2 1b		ldx #$1b			ldx 	#ErrorID_ArrayIndex
.4b0d	20 36 15	jsr $1536		jsr	errorHandler

;******  Return to file: variable/variable.asm


;******  Processing file: variable/array/create.asm

.0e72					elementSize:
>0e72							.fill	 1
.4b10					CreateArray:
.4b10	20 e7 4c	jsr $4ce7			jsr 	AccessSetup 				; set up the basic stuff, hashtables and so on.
.4b13	ad 74 0e	lda $0e74			lda 	varType 					; is the variable type an array
.4b16	4a		lsr a				lsr 	a
.4b17	90 36		bcc $4b4f			bcc 	CANotArray 					; no, cause an error.
.4b19	20 f0 4d	jsr $4df0			jsr 	FindVariable 				; does the variable exist already
.4b1c	b0 2c		bcs $4b4a			bcs 	CAFound 					; if so, error cannot redefine it.
.4b1e	20 24 4d	jsr $4d24			jsr 	CreateVariable 				; create the variable entry.
.4b21	a5 2a		lda $2a				lda 	temp0 						; push address of new variable entry on the stack
.4b23	48		pha				pha
.4b24	a5 2b		lda $2b				lda 	temp0+1
.4b26	48		pha				pha
.4b27	a2 00		ldx #$00			ldx 	#0
.4b29	20 54 4b	jsr $4b54			jsr 	GetArrayDimensions 			; get the array dimensions
.4b2c	a2 00		ldx #$00			ldx 	#0 							; create at level $00
.4b2e	20 84 4b	jsr $4b84			jsr 	CreateArrayLevel 			; level to YA
.4b31	aa		tax				tax 								; level now in YX
.4b32	68		pla				pla 								; get address back to temp0 to write.
.4b33	85 2b		sta $2b				sta 	temp0+1
.4b35	68		pla				pla
.4b36	85 2a		sta $2a				sta 	temp0
.4b38	98		tya				tya 								; write YX there (address in original record)
.4b39	a0 06		ldy #$06			ldy 	#6
.4b3b	91 2a		sta ($2a),y			sta 	(temp0),y
.4b3d	88		dey				dey
.4b3e	8a		txa				txa
.4b3f	91 2a		sta ($2a),y			sta 	(temp0),y
.4b41	ac 75 0e	ldy $0e75			ldy 	varEnd 						; restore Y and exit.
.4b44	60		rts				rts
.4b45					CASize:
.4b45	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.4b47	20 36 15	jsr $1536		jsr	errorHandler
.4b4a					CAFound:
.4b4a	a2 19		ldx #$19			ldx 	#ErrorID_DupArray
.4b4c	20 36 15	jsr $1536		jsr	errorHandler
.4b4f					CANotArray:
.4b4f	a2 1a		ldx #$1a			ldx 	#ErrorID_NotArray
.4b51	20 36 15	jsr $1536		jsr	errorHandler
.4b54					GetArrayDimensions:
.4b54	ad 74 0e	lda $0e74			lda 	varType 					; push variable type on the stack.
.4b57	48		pha				pha
.4b58	ac 75 0e	ldy $0e75			ldy 	varEnd
.4b5b					_CAGetDimensions:
.4b5b	8a		txa				txa 								; get the next level
.4b5c	a2 0a		ldx #$0a		ldx	#10
.4b5e	20 fb 3e	jsr $3efb		jsr	mainHandler
.4b61	aa		tax				tax
.4b62	b5 a0		lda $a0,x			lda 	esInt1,x 					; index must be < 8192
.4b64	29 e0		and #$e0			and 	#$E0
.4b66	15 a8		ora $a8,x			ora 	esInt2,x
.4b68	15 b0		ora $b0,x			ora 	esInt3,x
.4b6a	d0 d9		bne $4b45			bne 	CASize
.4b6c	e8		inx				inx 								; next level.
.4b6d	b1 28		lda ($28),y			lda 	(codePtr),y 				; get/consume following character
.4b6f	c8		iny				iny
.4b70	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; loop back if more dimensions
.4b72	f0 e7		beq $4b5b			beq 	_CAGetDimensions
.4b74	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN 				; right bracket ?
.4b76	d0 cd		bne $4b45			bne 	CASize
.4b78	a9 ff		lda #$ff			lda 	#$FF 						; set the type past the end to $FF so we know how many
.4b7a	95 90		sta $90,x			sta 	esType,x 					; dimensions there are, it marks the end.
.4b7c	68		pla				pla 								; restore the variable type ($3A-$3F)
.4b7d	8d 74 0e	sta $0e74			sta 	varType
.4b80	8c 75 0e	sty $0e75			sty 	varEnd 						; save exit Y value, after dimensions
.4b83	60		rts				rts
.4b84					CreateArrayLevel:
.4b84	ac 74 0e	ldy $0e74			ldy 	varType
.4b87	b9 ae 4b	lda $4bae,y			lda 	CAActualSize-$3A,y 			; $3A is the first type marker.
.4b8a	8d 72 0e	sta $0e72			sta 	elementSize 				; get element size this level.
.4b8d	b4 91		ldy $91,x			ldy 	esType+1,x 					; is it top level
.4b8f	30 05		bmi $4b96			bmi 	_CANotPointer 				; then its values, keep elementsize
.4b91	a9 02		lda #$02			lda 	#2 							; use array of pointers, each element is 2.
.4b93	8d 72 0e	sta $0e72			sta 	elementSize
.4b96					_CANotPointer:
.4b96	a5 35		lda $35				lda 	lowMemory 					; start creating at temp0, saving start on stack.
.4b98	85 2a		sta $2a				sta 	temp0
.4b9a	48		pha				pha
.4b9b	a5 36		lda $36				lda 	lowMemory+1
.4b9d	85 2b		sta $2b				sta 	temp0+1
.4b9f	48		pha				pha
.4ba0	20 21 4c	jsr $4c21			jsr 	AllocateArraySpace 			; allocate space for all array stuff at this level.
.4ba3	a0 00		ldy #$00			ldy 	#0
.4ba5	b5 98		lda $98,x			lda 	esInt0,x
.4ba7	91 2a		sta ($2a),y			sta 	(temp0),y
.4ba9	c8		iny				iny
.4baa	b5 a0		lda $a0,x			lda 	esInt1,x
.4bac	91 2a		sta ($2a),y			sta 	(temp0),y
.4bae	b5 91		lda $91,x			lda 	esType+1,x 					; do we have another level ?
.4bb0	30 06		bmi $4bb8			bmi 	_CALNotLast
.4bb2	b1 2a		lda ($2a),y			lda 	(temp0),y 					; set bit 7, indicates an array of pointers to other levels.
.4bb4	09 80		ora #$80			ora 	#$80
.4bb6	91 2a		sta ($2a),y			sta 	(temp0),y
.4bb8					_CALNotLast:
.4bb8	a9 02		lda #$02			lda 	#2
.4bba	20 de 4b	jsr $4bde			jsr 	_CALAddTemp0
.4bbd	b5 98		lda $98,x			lda 	esInt0,x 					; copy stack:01 to stack:23 so we can use it to
.4bbf	95 a8		sta $a8,x			sta 	esInt2,x 					; count.
.4bc1	b5 a0		lda $a0,x			lda 	esInt1,x
.4bc3	95 b0		sta $b0,x			sta 	esInt3,x
.4bc5					_CALClear:
.4bc5	20 ee 4b	jsr $4bee			jsr 	EraseOneElement
.4bc8	ad 72 0e	lda $0e72			lda 	elementSize 				; move to next element
.4bcb	20 de 4b	jsr $4bde			jsr 	_CALAddTemp0
.4bce	b5 a8		lda $a8,x			lda 	esInt2,x 					; decrement counter
.4bd0	d0 02		bne $4bd4			bne 	_CALNoBorrow
.4bd2	d6 b0		dec $b0,x			dec 	esInt3,x
.4bd4					_CALNoBorrow:
.4bd4	d6 a8		dec $a8,x			dec 	esInt2,x
.4bd6	b5 b0		lda $b0,x			lda 	esInt3,x 					; loop back if >= 0 - we need +1 because indices
.4bd8	10 eb		bpl $4bc5			bpl 	_CALClear 					; start at 0 e.g. x(10) is actually 11 array entries.
.4bda	68		pla				pla 								; restore the start of this into YA.
.4bdb	a8		tay				tay
.4bdc	68		pla				pla
.4bdd	60		rts				rts
.4bde					_CALAddTemp0:
.4bde	18		clc				clc
.4bdf	65 2a		adc $2a				adc 	temp0
.4be1	85 2a		sta $2a				sta 	temp0
.4be3	90 02		bcc $4be7			bcc 	_CALANoCarry
.4be5	e6 2b		inc $2b				inc 	temp0+1
.4be7					_CALANoCarry:
.4be7	60		rts				rts
.4be8					CAActualSize:
>4be8	04 04						.byte 	VarISize,VarISize
>4bea	02 02						.byte 	VarSSize,VarSSize
>4bec	06 06						.byte 	VarFSize,VarFSize
.4bee					EraseOneElement:
.4bee	b5 91		lda $91,x			lda 	esType+1,x 					; is this a list of sub arrays
.4bf0	10 09		bpl $4bfb			bpl 	_EOESubArray
.4bf2	a0 00		ldy #$00			ldy 	#0 							; write the empty variable value out.
.4bf4	ad 74 0e	lda $0e74			lda 	varType
.4bf7	20 8e 4d	jsr $4d8e			jsr 	ZeroTemp0Y
.4bfa	60		rts				rts
.4bfb					_EOESubArray:
.4bfb	a5 2a		lda $2a				lda 	temp0 						; save temp0, these are effectively locals.
.4bfd	48		pha				pha
.4bfe	a5 2b		lda $2b				lda 	temp0+1
.4c00	48		pha				pha
.4c01	ad 72 0e	lda $0e72			lda 	elementSize 				; save element size
.4c04	48		pha				pha
.4c05	e8		inx				inx 								; create at next level
.4c06	20 84 4b	jsr $4b84			jsr 	CreateArrayLevel
.4c09	ca		dex				dex
.4c0a	85 32		sta $32				sta 	tempShort 					; save A
.4c0c	68		pla				pla  								; restore element size.
.4c0d	8d 72 0e	sta $0e72			sta 	elementSize
.4c10	68		pla				pla 								; restore temp0, which is where this new array level goes.
.4c11	85 2b		sta $2b				sta 	temp0+1
.4c13	68		pla				pla
.4c14	85 2a		sta $2a				sta 	temp0
.4c16	98		tya				tya 								; store Y/A there
.4c17	a0 01		ldy #$01			ldy 	#1
.4c19	91 2a		sta ($2a),y			sta 	(temp0),y
.4c1b	a5 32		lda $32				lda 	tempShort
.4c1d	88		dey				dey
.4c1e	91 2a		sta ($2a),y			sta 	(temp0),y
.4c20	60		rts				rts
.4c21					AllocateArraySpace:
.4c21	18		clc				clc 								; element count + 1 => temp2.
.4c22	b5 98		lda $98,x			lda 	esInt0,x
.4c24	69 01		adc #$01			adc 	#1
.4c26	85 2e		sta $2e				sta 	temp2
.4c28	b5 a0		lda $a0,x			lda 	esInt1,x
.4c2a	69 00		adc #$00			adc 	#0
.4c2c	85 2f		sta $2f				sta 	temp2+1
.4c2e	ad 72 0e	lda $0e72			lda 	elementSize 				; bytes per element
.4c31	20 58 4c	jsr $4c58			jsr 	MultiplyTemp2ByA 			; temp2 = (count + 1) x bytes per element.
.4c34	18		clc				clc 								; add 2 for 'max element' byte.
.4c35	a5 2e		lda $2e				lda 	temp2
.4c37	69 02		adc #$02			adc 	#2
.4c39	85 2e		sta $2e				sta 	temp2
.4c3b	90 02		bcc $4c3f			bcc 	_AASNoCarry
.4c3d	e6 2f		inc $2f				inc 	temp2+1
.4c3f					_AASNoCarry:
.4c3f	18		clc				clc 								; add to low memory, allocating space.
.4c40	a5 35		lda $35				lda 	lowMemory
.4c42	65 2e		adc $2e				adc 	temp2
.4c44	85 35		sta $35				sta 	lowMemory
.4c46	a5 36		lda $36				lda 	lowMemory+1
.4c48	65 2f		adc $2f				adc 	temp2+1
.4c4a	85 36		sta $36				sta 	lowMemory+1
.4c4c	b0 05		bcs $4c53			bcs 	_AASFail 					; out of memory as adding causes wrapround
.4c4e	c5 34		cmp $34				cmp 	highMemory+1 				; >= high memory pointer.
.4c50	b0 01		bcs $4c53			bcs 	_AASFail
.4c52	60		rts				rts
.4c53					_AASFail:
.4c53	a2 22		ldx #$22			ldx 	#ErrorID_Memory
.4c55	20 36 15	jsr $1536		jsr	errorHandler
.4c58					MultiplyTemp2ByA:
.4c58	48		pha				pha
.4c59	a5 2e		lda $2e				lda 	temp2 						; copy temp2 to temp3.
.4c5b	85 30		sta $30				sta 	temp3
.4c5d	a5 2f		lda $2f				lda 	temp2+1
.4c5f	85 31		sta $31				sta 	temp3+1
.4c61	68		pla				pla
.4c62	06 2e		asl $2e				asl 	temp2 						; double it.
.4c64	26 2f		rol $2f				rol 	temp2+1
.4c66	c9 02		cmp #$02			cmp 	#2 							; if x 2 then exit.
.4c68	f0 15		beq $4c7f			beq 	_MTBAExit
.4c6a	c9 06		cmp #$06			cmp 	#6 							; if x 6 then add temp3 to temp2
.4c6c	d0 0d		bne $4c7b			bne 	_MTBANotFloat
.4c6e	18		clc				clc 								; so this will make it x 3
.4c6f	a5 2e		lda $2e				lda 	temp2
.4c71	65 30		adc $30				adc 	temp3
.4c73	85 2e		sta $2e				sta 	temp2
.4c75	a5 2f		lda $2f				lda 	temp2+1
.4c77	65 31		adc $31				adc 	temp3+1
.4c79	85 2f		sta $2f				sta 	temp2+1
.4c7b					_MTBANotFloat:
.4c7b	06 2e		asl $2e				asl 	temp2 						; double it.
.4c7d	26 2f		rol $2f				rol 	temp2+1
.4c7f					_MTBAExit:
.4c7f	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/variable/access.asm

.0e73					varHash:
>0e73							.fill	1
.0e74					varType:
>0e74							.fill 	1
.0e75					varEnd:
>0e75							.fill 	1
.003b					hashList:
>003b							.fill 	2
.4c80					AccessVariable:
.4c80	aa		tax				tax 								; stack in X
.4c81	c8		iny				iny									; look at second character
.4c82	b1 28		lda ($28),y			lda 	(codePtr),y
.4c84	88		dey				dey
.4c85	c9 3a		cmp #$3a			cmp 	#TYPE_INT 					; is it the integer marker ($3A)
.4c87	d0 15		bne $4c9e			bne 	_AVLong 					; no, always use the hash tables.
.4c89	b1 28		lda ($28),y			lda 	(codePtr),y 				; this is the 6 bit ASCII of A-Z 1-26
.4c8b	38		sec				sec 	 							; make it 0-25
.4c8c	e9 01		sbc #$01			sbc 	#1
.4c8e	0a		asl a				asl 	a 							; x 4 as 4 bytes / variable.
.4c8f	0a		asl a				asl 	a
.4c90	95 98		sta $98,x			sta 	esInt0,x
.4c92	a9 0a		lda #$0a			lda 	#SingleLetterVar >> 8 		; make it an address
.4c94	95 a0		sta $a0,x			sta 	esInt1,x
.4c96	a9 80		lda #$80			lda 	#$80 						; type is an integer reference.
.4c98	95 90		sta $90,x			sta 	esType,x
.4c9a	c8		iny				iny 								; skip over the variable reference in the code.
.4c9b	c8		iny				iny  								; (1 letter, 1 type)
.4c9c	8a		txa				txa 								; stack in A to return.
.4c9d	60		rts				rts
.4c9e					_AVLong:
.4c9e	8a		txa				txa
.4c9f	48		pha				pha
.4ca0	20 e7 4c	jsr $4ce7			jsr 	AccessSetup 				; set up the basic information we need for later
.4ca3	20 f0 4d	jsr $4df0			jsr 	FindVariable 				; does the variable exist already ?
.4ca6	b0 0e		bcs $4cb6			bcs 	_AVFound 					; yes, then its found
.4ca8	ad 74 0e	lda $0e74			lda 	varType 					; otherwise, is the variable type an array
.4cab	4a		lsr a				lsr 	a
.4cac	90 05		bcc $4cb3			bcc 	_AVCanCreate 				; if not, we can autocreate
.4cae	a2 15		ldx #$15			ldx 	#ErrorID_noauto
.4cb0	20 36 15	jsr $1536		jsr	errorHandler
.4cb3					_AVCanCreate:
.4cb3	20 24 4d	jsr $4d24			jsr 	CreateVariable 				; variable does not exist, create it.
.4cb6					_AVFound:
.4cb6	68		pla				pla
.4cb7	aa		tax				tax
.4cb8	18		clc				clc 								; copy temp0 (variable record address)
.4cb9	a5 2a		lda $2a				lda 	temp0 						; +5 (to point to the data)
.4cbb	69 05		adc #$05			adc 	#5 							; (first 5 bytes are link, name, hash)
.4cbd	95 98		sta $98,x			sta 	esInt0,x
.4cbf	a5 2b		lda $2b				lda 	temp0+1
.4cc1	69 00		adc #$00			adc 	#0
.4cc3	95 a0		sta $a0,x			sta 	esInt1,x
.4cc5	a9 00		lda #$00			lda 	#0
.4cc7	95 a8		sta $a8,x			sta 	esInt2,x
.4cc9	95 b0		sta $b0,x			sta 	esInt3,x
.4ccb	ac 74 0e	ldy $0e74			ldy 	varType 					; get the type ID from the type.
.4cce	b9 a7 4c	lda $4ca7,y			lda 	_AVTypeTable-$3A,y 			; e.g. a reference to int/float/string.
.4cd1	95 90		sta $90,x			sta 	esType,x
.4cd3	ac 75 0e	ldy $0e75			ldy 	varEnd 						; restore Y
.4cd6	ad 74 0e	lda $0e74			lda 	VarType 					; get variable type, put LSB into C
.4cd9	4a		lsr a				lsr 	a
.4cda	90 03		bcc $4cdf			bcc 	_AVNotArray 				; if carry set,it is an array variable.
.4cdc	20 88 4a	jsr $4a88			jsr 	AccessArray 				; array lookup. if LSB was set.
.4cdf					_AVNotArray:
.4cdf	8a		txa				txa 								; return stack in A and return
.4ce0	60		rts				rts
.4ce1					_AVTypeTable:
>4ce1	80 80						.byte 	$80,$80						; integer
>4ce3	c0 c0						.byte 	$C0,$C0 					; string
>4ce5	81 81						.byte 	$81,$81 					; float
.4ce7					AccessSetup:
.4ce7	a9 00		lda #$00			lda 	#0 							; zero the hash byte.
.4ce9	8d 73 0e	sta $0e73			sta 	varHash
.4cec	98		tya				tya
.4ced	48		pha				pha
.4cee	b1 28		lda ($28),y	_ASLoop:lda 	(codePtr),y					; get next identifier character
.4cf0	c9 3a		cmp #$3a			cmp 	#$3A 						; is it 3A-3F which end all identifiers ?
.4cf2	b0 0b		bcs $4cff			bcs 	_ASComplete
.4cf4	18		clc				clc 								; add to the hash. Might improve this.
.4cf5	6d 73 0e	adc $0e73			adc 	varHash
.4cf8	8d 73 0e	sta $0e73			sta 	varHash
.4cfb	c8		iny				iny 								; next character
.4cfc	4c ee 4c	jmp $4cee			jmp 	_ASLoop
.4cff					_ASComplete:
.4cff	8d 74 0e	sta $0e74			sta 	varType 					; save variable type byte
.4d02	c8		iny				iny
.4d03	8c 75 0e	sty $0e75			sty 	varEnd 						; save the ending position.
.4d06	38		sec				sec 								; convert type byte from $3A-$3F to 0..5
.4d07	e9 3a		sbc #$3a			sbc 	#$3A
.4d09	0a		asl a				asl 	a 							; multiply by hashTableSize (8 in this case)
.4d0a	0a		asl a				asl 	a
.4d0b	0a		asl a				asl 	a
.4d0c	0a		asl a				asl 	a 							; 2 bytes/word
.4d0d	85 2a		sta $2a				sta 	temp0 						; this is the offset to the start of the table.
.4d0f	ad 73 0e	lda $0e73			lda 	varHash 					; get hash
.4d12	29 07		and #$07			and 	#(hashTableSize-1)			; force into range (for 8,0..7)
.4d14	0a		asl a				asl  	a 							; x 2 (for word) and clear carry
.4d15	65 2a		adc $2a				adc 	temp0 						; now offset from the start of the hash table.
.4d17	69 68		adc #$68			adc 	#hashTables & $FF 			; add to hash table base address
.4d19	85 3b		sta $3b				sta 	hashList 					; making hashLists point to the head of the link list.
.4d1b	a9 0a		lda #$0a			lda 	#hashTables >> 8
.4d1d	69 00		adc #$00			adc 	#0
.4d1f	85 3c		sta $3c				sta 	hashList+1
.4d21	68		pla				pla
.4d22	a8		tay				tay
.4d23	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/variable/create.asm

.4d24					CreateVariable:
.4d24	98		tya				tya 								; push Y on the stack twice.
.4d25	48		pha				pha									; position in code of the new variable.
.4d26	48		pha				pha
.4d27	ae 74 0e	ldx $0e74			ldx 	varType 					; get var type 0-5 from the var type
.4d2a	bd 4e 4d	lda $4d4e,x			lda		_CVSize-$3A,x 				; the bytes required for this new variable.
.4d2d	48		pha				pha 								; save length
.4d2e	a5 35		lda $35				lda 	lowMemory 					; set low Memory ptr to temp0
.4d30	85 2a		sta $2a				sta 	temp0 						; (address of the new variable)
.4d32	a5 36		lda $36				lda 	lowMemory+1
.4d34	85 2b		sta $2b				sta 	temp0+1
.4d36	68		pla				pla 								; get length
.4d37	18		clc				clc 								; add to low memory.
.4d38	65 35		adc $35				adc 	lowMemory
.4d3a	85 35		sta $35				sta 	lowMemory
.4d3c	90 08		bcc $4d46			bcc 	_CVNoCarry
.4d3e	e6 36		inc $36				inc 	lowMemory+1
.4d40	a5 36		lda $36				lda 	lowMemory+1 				; check out of memory.
.4d42	c5 34		cmp $34				cmp 	highMemory+1
.4d44	b0 3d		bcs $4d83			bcs 	_CVMemory
.4d46					_CVNoCarry:
.4d46	ad 73 0e	lda $0e73			lda 	varHash 					; store hash at offset 4.
.4d49	a0 04		ldy #$04			ldy 	#4
.4d4b	91 2a		sta ($2a),y			sta 	(temp0),y
.4d4d	68		pla				pla 								; offset, work out where the variable name is.
.4d4e	18		clc				clc
.4d4f	65 28		adc $28				adc 	codePtr
.4d51	a0 02		ldy #$02			ldy 	#2 							; copy that into slots 2 + 3.
.4d53	91 2a		sta ($2a),y			sta 	(temp0),y
.4d55	a5 29		lda $29				lda 	codePtr+1
.4d57	69 00		adc #$00			adc 	#0
.4d59	c8		iny				iny
.4d5a	91 2a		sta ($2a),y			sta 	(temp0),y
.4d5c	cd c9 0a	cmp $0ac9			cmp 	basePage+1 					; compare against the program base.
.4d5f	b0 03		bcs $4d64			bcs 	_CVNotImmediate
.4d61	20 c6 4d	jsr $4dc6			jsr 	CloneVariableName 			; we need to clone the variable name (immediate mode)
.4d64					_CVNotImmediate:
.4d64	a0 00		ldy #$00			ldy 	#0 							; copy current hash pointer in link
.4d66	b1 3b		lda ($3b),y			lda 	(hashList),y 				; so we're inserting it in the front of a linked list
.4d68	91 2a		sta ($2a),y			sta 	(temp0),y
.4d6a	c8		iny				iny
.4d6b	b1 3b		lda ($3b),y			lda 	(hashList),y
.4d6d	91 2a		sta ($2a),y			sta 	(temp0),y
.4d6f	a5 2b		lda $2b				lda 	temp0+1 					; set new link
.4d71	91 3b		sta ($3b),y			sta 	(hashList),y
.4d73	88		dey				dey
.4d74	a5 2a		lda $2a				lda 	temp0
.4d76	91 3b		sta ($3b),y			sta 	(hashList),y
.4d78	ad 74 0e	lda $0e74			lda 	varType 					; type in A
.4d7b	a0 05		ldy #$05			ldy 	#5 							; offset in Y
.4d7d	20 8e 4d	jsr $4d8e			jsr 	ZeroTemp0Y 					; zero (temp0),y with whatever type.
.4d80	68		pla				pla
.4d81	a8		tay				tay
.4d82	60		rts				rts
.4d83					_CVMemory:
.4d83	a2 22		ldx #$22			ldx 	#ErrorID_Memory
.4d85	20 36 15	jsr $1536		jsr	errorHandler
>4d88	09 07				_CVSize:.byte 	VarHSize+VarISize,VarHSize+VarASize 					; <storage for integer>
>4d8a	07 07						.byte 	VarHSize+VarSSize,VarHSize+VarASize 					; <storage for string>
>4d8c	0b 07						.byte 	VarHSize+VarFSize,VarHSize+VarASize 					; <storage for float>
.4d8e					ZeroTemp0Y:
.4d8e	4a		lsr a				lsr 	a 							; bit 0 in carry
.4d8f	0a		asl a				asl 	a
.4d90	b0 19		bcs $4dab			bcs 	_ZTExit 					; we don't initialise arrays.
.4d92	c9 3c		cmp #$3c			cmp 	#$3C 						; check string
.4d94	f0 16		beq $4dac			beq 	_ZTWriteNullString 			; write "" string
.4d96	c9 3e		cmp #$3e			cmp 	#$3E 						; check float
.4d98	f0 22		beq $4dbc			beq 	_ZTWriteFloat
.4d9a	98		tya				tya
.4d9b	48		pha				pha
.4d9c	a9 00		lda #$00			lda 	#0
.4d9e	91 2a		sta ($2a),y			sta 	(temp0),y
.4da0	c8		iny				iny
.4da1	91 2a		sta ($2a),y			sta 	(temp0),y
.4da3	c8		iny				iny
.4da4	91 2a		sta ($2a),y			sta 	(temp0),y
.4da6	c8		iny				iny
.4da7	91 2a		sta ($2a),y			sta 	(temp0),y
.4da9	68		pla				pla
.4daa	a8		tay				tay
.4dab					_ZTExit:
.4dab	60		rts				rts
.4dac					_ZTWriteNullString:
.4dac	a9 00		lda #$00			lda 	#0 							; put a reference to null string as the default value.
.4dae	8d ce 0a	sta $0ace			sta 	NullString
.4db1	a9 ce		lda #$ce			lda 	#NullString & $FF
.4db3	91 2a		sta ($2a),y			sta 	(temp0),y
.4db5	a9 0a		lda #$0a			lda 	#NullString >> 8
.4db7	c8		iny				iny
.4db8	91 2a		sta ($2a),y			sta 	(temp0),y
.4dba	88		dey				dey
.4dbb	60		rts				rts
.4dbc					_ZTWriteFloat:
.4dbc	8a		txa				txa
.4dbd	48		pha				pha
.4dbe	a2 20		ldx #$20		ldx	#32
.4dc0	20 45 26	jsr $2645		jsr	floatingpointHandler
.4dc3	68		pla				pla
.4dc4	aa		tax				tax
.4dc5	60		rts				rts
.4dc6					CloneVariableName:
.4dc6	a0 02		ldy #$02			ldy 	#2 							; copy vname address to temp2
.4dc8	b1 2a		lda ($2a),y			lda 	(temp0),y
.4dca	85 2e		sta $2e				sta 	temp2
.4dcc	c8		iny				iny
.4dcd	b1 2a		lda ($2a),y			lda 	(temp0),y
.4dcf	85 2f		sta $2f				sta 	temp2+1
.4dd1	a5 36		lda $36				lda 	lowMemory+1 				; copy lowMemory address to (temp0),2/3
.4dd3	91 2a		sta ($2a),y			sta 	(temp0),y
.4dd5	88		dey				dey
.4dd6	a5 35		lda $35				lda 	lowMemory
.4dd8	91 2a		sta ($2a),y			sta 	(temp0),y
.4dda	a0 00		ldy #$00			ldy 	#0 							; copy data from (temp2) to (lowMemory)
.4ddc					_CVNCopy:
.4ddc	b1 2e		lda ($2e),y			lda		(temp2),y
.4dde	91 35		sta ($35),y			sta 	(lowMemory),y
.4de0	c8		iny				iny
.4de1	c9 3a		cmp #$3a			cmp 	#$3A 						; until the whole name has been copied.
.4de3	90 f7		bcc $4ddc			bcc 	_CVNCopy
.4de5	98		tya				tya 								; add Y to low memory
.4de6	18		clc				clc
.4de7	65 35		adc $35				adc 	lowMemory
.4de9	85 35		sta $35				sta 	lowMemory
.4deb	90 02		bcc $4def			bcc 	_CVNNoCarry
.4ded	e6 36		inc $36				inc 	lowMemory+1
.4def					_CVNNoCarry:
.4def	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/variable/find.asm

.4df0					FindVariable:
.4df0	98		tya				tya
.4df1	48		pha				pha
.4df2	98		tya				tya 								; point temp2 to the actual name
.4df3	18		clc				clc 								; in memory of the variable being created
.4df4	65 28		adc $28				adc 	codePtr
.4df6	85 2e		sta $2e				sta 	temp2
.4df8	a5 29		lda $29				lda 	codePtr+1
.4dfa	69 00		adc #$00			adc 	#0
.4dfc	85 2f		sta $2f				sta 	temp2+1
.4dfe	a0 00		ldy #$00			ldy 	#0
.4e00	a5 3b		lda $3b				lda 	hashList 					; copy hashlist to temp0
.4e02	85 2a		sta $2a				sta 	temp0
.4e04	a5 3c		lda $3c				lda 	hashList+1
.4e06	85 2b		sta $2b				sta 	temp0+1
.4e08	a0 01		ldy #$01	_FVNext:ldy 	#1 							; get MSB
.4e0a	b1 2a		lda ($2a),y			lda 	(temp0),y
.4e0c	f0 2c		beq $4e3a			beq 	_FVFail
.4e0e	aa		tax				tax
.4e0f	88		dey				dey		 							; get LSB
.4e10	b1 2a		lda ($2a),y			lda 	(temp0),y
.4e12	85 2a		sta $2a				sta 	temp0 						; update pointer.
.4e14	86 2b		stx $2b				stx 	temp0+1
.4e16	a0 04		ldy #$04			ldy 	#4 							; check hashes match
.4e18	b1 2a		lda ($2a),y			lda 	(temp0),y
.4e1a	cd 73 0e	cmp $0e73			cmp 	varHash
.4e1d	d0 e9		bne $4e08			bne 	_FVNext 					; if not, no point in checking the name.
.4e1f	88		dey				dey 								; copy name pointer (+2,+3) to temp1.
.4e20	b1 2a		lda ($2a),y			lda 	(temp0),y
.4e22	85 2d		sta $2d				sta 	temp1+1
.4e24	88		dey				dey
.4e25	b1 2a		lda ($2a),y			lda 	(temp0),y
.4e27	85 2c		sta $2c				sta 	temp1
.4e29	a0 00		ldy #$00			ldy 	#0
.4e2b					_FVCheck:
.4e2b	b1 2c		lda ($2c),y			lda 	(temp1),y 					; compare names
.4e2d	d1 2e		cmp ($2e),y			cmp 	(temp2),y
.4e2f	d0 d7		bne $4e08			bne 	_FVNext		 				; fail if different.
.4e31	c8		iny				iny
.4e32	c9 3a		cmp #$3a			cmp 	#$3A 						; until reached the end marker.
.4e34	90 f5		bcc $4e2b			bcc 	_FVCheck
.4e36	68		pla				pla
.4e37	a8		tay				tay
.4e38	38		sec				sec
.4e39	60		rts				rts
.4e3a					_FVFail:
.4e3a	68		pla				pla
.4e3b	a8		tay				tay
.4e3c	18		clc				clc
.4e3d	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/variable/reset.asm

.4e3e					HashTableReset:
.4e3e	a2 60		ldx #$60			ldx 	#6*2*hashTableSize			; 6 types, 2 bytes per table entry.
.4e40	a9 00		lda #$00			lda 	#0
.4e42					_HTRClear:
.4e42	9d 67 0a	sta $0a67,x			sta 	hashTables-1,x
.4e45	ca		dex				dex
.4e46	d0 fa		bne $4e42			bne 	_HTRClear
.4e48	60		rts				rts

;******  Return to file: variable/variable.asm

.4e49					variableHandler:
.4e49	48		pha				pha
.4e4a	bd 5a 4e	lda $4e5a,x			lda 	variableVectors,x
.4e4d	8d f2 0a	sta $0af2			sta 	jumpVector
.4e50	bd 5b 4e	lda $4e5b,x			lda 	1+(variableVectors),x
.4e53	8d f3 0a	sta $0af3			sta 	jumpVector+1
.4e56	68		pla				pla
.4e57	6c f2 0a	jmp ($0af2)			jmp 	(jumpVector)
.4e5a					variableVectors:
>4e5a	62 4e					.word _DummyControlHandler ; index 0
>4e5c	80 4c					.word AccessVariable       ; index 2
>4e5e	10 4b					.word CreateArray          ; index 4
>4e60	3e 4e					.word HashTableReset       ; index 6
.4e62					_DummyControlHandler:
.4e62	60		rts			rts

;******  Return to file: basic.asm

.4e63					section_end_variable:
.4e63					section_start_footer:

;******  Processing file: footer/footer.asm


;******  Processing file: footer/99end.asm

.003d					endZeroPage:
.0e76					endStorage:
>4e63							.align 	256
.4f00					programMemory:
>4eff	ff						.byte 	$FF

;******  Return to file: footer/footer.asm


;******  Return to file: basic.asm

.4f00					section_end_footer:

;******  End of listing
