
; 64tass Turbo Assembler Macro V1.55.2200 listing file
; 64tass -Walias -Wmacro-prefix -Wall -q -c -L ..\source\bin\basic.lst -l ..\source\bin\basic.lbl -Wall -o ..\source\bin\stub.prg basic.asm
; Sat Apr 03 13:07:48 2021

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: basic.asm

=0					cputype = 0
=1					autorun=1
=0					coldstartnew=0
=$1000					CodeStart = $1000
=$800					MemoryStorage = $800
=$9f00					EndOfMemory = $9F00
=$28					ZeroPageStorage = $28
=$90					StackAddress = $90
=8					StackSize = 8
=2					retStackSizePages = 2

;******  Processing file: header/01common.inc


;******  Processing file: header/../generated/installed.inc

=1					installed_header = 1
=1					installed_main = 1
=1					installed_variable = 1
=1					installed_assembler = 1
=1					installed_error = 1
=1					installed_extension = 1
=1					installed_string = 1
=1					installed_device = 1
=0					installed_floatingpoint = 0
=1					installed_interaction = 1
=1					installed_tokeniser = 1
=1					installed_footer = 1

;******  Return to file: header/01common.inc

=8					hashTableSize = 8			; if this changes, the calculation is AccessSetup has to match it.
="G"					markerGOSUB = 'G'
="R"					markerREPEAT = 'R'
="F"					markerFOR = 'F'
="W"					markerWHILE = 'W'
="P"					markerPROC = 'P'
="$"					markerSTRING = '$'
="#"					markerFLOAT = '#'
="%"					markerINT = '%'
=5					VarHSize = 5 								; header (2 link, 2 name, 1 hash)
=2					VarASize = 2 								; array [address of first level]
=4					VarISize = 4 								; integer (32 bit)
=6					VarFSize = 6 								; float (4 mantissa, 1 exponent 1 sign/zero)
=2					VarSSize = 2 								; address (2 bytes)

;******  Return to file: basic.asm


;******  Processing file: header/02macros.inc


;******  Return to file: basic.asm


;******  Processing file: header/03data.inc

>0028					codePtr:.fill 	2							; (codePtr),y points to code.
>002a					temp0: 	.fill 	2							; working variables.
>002c					temp1: 	.fill 	2
>002e					temp2: 	.fill 	2
>0030					temp3: 	.fill 	2
.0032					tempshort:
>0032							.fill 	1
.0033					highMemory:
>0033							.fill 	2
.0035					lowMemory:
>0035							.fill 	2
>0800							.align	256
.0800					returnStack:
>0800							.fill 	retStackSizePages * 256
=512					retStackSize = retStackSizePages * 256
.0a00					SingleLetterVar:
>0a00					 		.fill 	26*4
.0a68					currentStorage:
>0090					esType:	.fill 	StackSize  					; type byte (see above)
>0098					esInt0:	.fill 	StackSize 					; integer or mantissa
>00a0					esInt1:	.fill 	StackSize
>00a8					esInt2:	.fill 	StackSize
>00b0					esInt3:	.fill 	StackSize
>00b8					esExp:	.fill 	StackSize 					; exponent ($80 = 0)
>00c0					esZSign:.fill 	StackSize 					; for floating point - sign (bit 7) isZero (bit 6)
.00c8					endOfStack:
=$98					esMant0 = esInt0 							; synonyms.
=$a0					esMant1 = esInt1
=$a8					esMant2 = esInt2
=$b0					esMant3 = esInt3
.0a68					hashTables:
>0a68							.fill 	6*2*hashTableSize
.0ac8					basePage:
>0ac8							.fill 	2
.0aca					endProgram:
>0aca							.fill 	2
.0acc					endMemory:
>0acc							.fill 	2
.0ace					NullString:
>0ace							.fill 	1							; don't waste memory concreting null strings.
.0acf					convertBuffer:
>0acf							.fill 	35

;******  Processing file: header/../generated/tokenconst.inc

=$80					TOK_EOL=$80
=$81					TOK_SHIFT1=$81
=$82					TOK_SHIFT2=$82
=$83					TOK_SHIFT3=$83
=$84					TOK_FPC=$84
=$85					TOK_STR=$85
=$86					TOK_BINARYST=$86
=$99					TOK_STRUCTST=$99
=$a4					TOK_UNARYST=$a4
=$c9					TOK_TOKENS=$c9
=$86					TKW_AND                      = $86 ; and
=$87					TKW_OR                       = $87 ; or
=$88					TKW_XOR                      = $88 ; xor
=$89					TKW_GREATEREQUAL             = $89 ; >=
=$8a					TKW_LESSEQUAL                = $8a ; <=
=$8b					TKW_GREATER                  = $8b ; >
=$8c					TKW_LESS                     = $8c ; <
=$8d					TKW_EQUAL                    = $8d ; =
=$8e					TKW_LESSGREATER              = $8e ; <>
=$8f					TKW_PLUS                     = $8f ; +
=$90					TKW_MINUS                    = $90 ; -
=$91					TKW_GREATERGREATER           = $91 ; >>
=$92					TKW_LESSLESS                 = $92 ; <<
=$93					TKW_STAR                     = $93 ; *
=$94					TKW_SLASH                    = $94 ; /
=$95					TKW_MOD                      = $95 ; mod
=$96					TKW_HAT                      = $96 ; ^
=$97					TKW_PLING                    = $97 ; !
=$98					TKW_QMARK                    = $98 ; ?
=$99					TKW_REPEAT                   = $99 ; repeat
=$9a					TKW_WHILE                    = $9a ; while
=$9b					TKW_FOR                      = $9b ; for
=$9c					TKW_IF                       = $9c ; if
=$9d					TKW_DEFPROC                  = $9d ; defproc
=$9e					TKW_UNTIL                    = $9e ; until
=$9f					TKW_WEND                     = $9f ; wend
=$a0					TKW_NEXT                     = $a0 ; next
=$a1					TKW_THEN                     = $a1 ; then
=$a2					TKW_ENDIF                    = $a2 ; endif
=$a3					TKW_ENDPROC                  = $a3 ; endproc
=$a4					TKW_LPAREN                   = $a4 ; (
=$a5					TKW_LENLPAREN                = $a5 ; len(
=$a6					TKW_SGNLPAREN                = $a6 ; sgn(
=$a7					TKW_ABSLPAREN                = $a7 ; abs(
=$a8					TKW_RANDOMLPAREN             = $a8 ; random(
=$a9					TKW_PAGE                     = $a9 ; page
=$aa					TKW_TRUE                     = $aa ; true
=$ab					TKW_FALSE                    = $ab ; false
=$ac					TKW_MINLPAREN                = $ac ; min(
=$ad					TKW_MAXLPAREN                = $ad ; max(
=$ae					TKW_SYSLPAREN                = $ae ; sys(
=$af					TKW_TIMERLPAREN              = $af ; timer(
=$b0					TKW_EVENTLPAREN              = $b0 ; event(
=$b1					TKW_GETLPAREN                = $b1 ; get(
=$b2					TKW_INKEYLPAREN              = $b2 ; inkey(
=$b3					TKW_ALLOCLPAREN              = $b3 ; alloc(
=$b4					TKW_CHRDOLLARLPAREN          = $b4 ; chr$(
=$b5					TKW_LEFTDOLLARLPAREN         = $b5 ; left$(
=$b6					TKW_MIDDOLLARLPAREN          = $b6 ; mid$(
=$b7					TKW_RIGHTDOLLARLPAREN        = $b7 ; right$(
=$b8					TKW_STRDOLLARLPAREN          = $b8 ; str$(
=$b9					TKW_VALLPAREN                = $b9 ; val(
=$ba					TKW_PEEKLPAREN               = $ba ; peek(
=$bb					TKW_DEEKLPAREN               = $bb ; deek(
=$bc					TKW_LEEKLPAREN               = $bc ; leek(
=$bd					TKW_ASCLPAREN                = $bd ; asc(
=$be					TKW_INTLPAREN                = $be ; int(
=$bf					TKW_FLOATLPAREN              = $bf ; float(
=$c0					TKW_ISVALLPAREN              = $c0 ; isval(
=$c1					TKW_UPPERDOLLARLPAREN        = $c1 ; upper$(
=$c2					TKW_LOWERDOLLARLPAREN        = $c2 ; lower$(
=$c3					TKW_ATC                      = $c3 ; @
=$c4					TKW_WAVY                     = $c4 ; ~
=$c5					TKW_AMP                      = $c5 ; &
=$c6					TKW_GETDOLLARLPAREN          = $c6 ; get$(
=$c7					TKW_INKEYDOLLARLPAREN        = $c7 ; inkey$(
=$c8					TKW_MEM                      = $c8 ; mem
=$c9					TKW_RPAREN                   = $c9 ; )
=$ca					TKW_COLON                    = $ca ; :
=$cb					TKW_COMMA                    = $cb ; ,
=$cc					TKW_SEMICOLON                = $cc ; ;
=$cd					TKW_QUOTE                    = $cd ; '
=$ce					TKW_TO                       = $ce ; to
=$cf					TKW_STEP                     = $cf ; step
=$d0					TKW_PROC                     = $d0 ; proc
=$d1					TKW_LOCAL                    = $d1 ; local
=$d2					TKW_DIM                      = $d2 ; dim
=$d3					TKW_REM                      = $d3 ; rem
=$d4					TKW_LET                      = $d4 ; let
=$d5					TKW_INPUT                    = $d5 ; input
=$d6					TKW_ELSE                     = $d6 ; else
=$d7					TKW_VDU                      = $d7 ; vdu
=$d8					TKW_PRINT                    = $d8 ; print
=$d9					TKW_DATA                     = $d9 ; data
=$da					TKW_IMAGE                    = $da ; image
=$db					TKW_AT                       = $db ; at
=$dc					TKW_FLIP                     = $dc ; flip
=$dd					TKW_ASSERT                   = $dd ; assert
=$de					TKW_POKE                     = $de ; poke
=$df					TKW_DOKE                     = $df ; doke
=$e0					TKW_LOKE                     = $e0 ; loke
=$e1					TKW_INK                      = $e1 ; ink
=$e2					TKW_PAPER                    = $e2 ; paper
=$e3					TKW_CLS                      = $e3 ; cls
=$e4					TKW_LOCATE                   = $e4 ; locate
=$e5					TKW_PERIOD                   = $e5 ; .
=$e6					TKW_FROM                     = $e6 ; from
=$e7					TKW_HASH                     = $e7 ; #
=$e8					TKW_CLEAR                    = $e8 ; clear
=$86					TKW_LOAD                     = $86 ; load
=$87					TKW_SAVE                     = $87 ; save
=$88					TKW_LIST                     = $88 ; list
=$89					TKW_NEW                      = $89 ; new
=$8a					TKW_BREAK                    = $8a ; break
=$8b					TKW_RUN                      = $8b ; run
=$8c					TKW_READ                     = $8c ; read
=$8d					TKW_RESTORE                  = $8d ; restore
=$8e					TKW_END                      = $8e ; end
=$8f					TKW_STOP                     = $8f ; stop
=$90					TKW_XEMU                     = $90 ; xemu
=$91					TKW_GOTO                     = $91 ; goto
=$92					TKW_GOSUB                    = $92 ; gosub
=$93					TKW_RETURN                   = $93 ; return
=$94					TKW_ORA                      = $94 ; ora
=$95					TKW_LPARENANDRPAREN          = $95 ; (and)
=$96					TKW_EOR                      = $96 ; eor
=$97					TKW_ADC                      = $97 ; adc
=$98					TKW_STA                      = $98 ; sta
=$99					TKW_LDA                      = $99 ; lda
=$9a					TKW_CMP                      = $9a ; cmp
=$9b					TKW_SBC                      = $9b ; sbc
=$9c					TKW_ASL                      = $9c ; asl
=$9d					TKW_ROL                      = $9d ; rol
=$9e					TKW_LSR                      = $9e ; lsr
=$9f					TKW_ROR                      = $9f ; ror
=$a0					TKW_STX                      = $a0 ; stx
=$a1					TKW_LDX                      = $a1 ; ldx
=$a2					TKW_DEC                      = $a2 ; dec
=$a3					TKW_INC                      = $a3 ; inc
=$a4					TKW_STZ                      = $a4 ; stz
=$a5					TKW_BIT                      = $a5 ; bit
=$a6					TKW_STY                      = $a6 ; sty
=$a7					TKW_LDY                      = $a7 ; ldy
=$a8					TKW_CPY                      = $a8 ; cpy
=$a9					TKW_CPX                      = $a9 ; cpx
=$aa					TKW_TSB                      = $aa ; tsb
=$ab					TKW_TRB                      = $ab ; trb
=$ac					TKW_JSR                      = $ac ; jsr
=$ad					TKW_JMP                      = $ad ; jmp
=$ae					TKW_BPL                      = $ae ; bpl
=$af					TKW_BMI                      = $af ; bmi
=$b0					TKW_BVC                      = $b0 ; bvc
=$b1					TKW_BVS                      = $b1 ; bvs
=$b2					TKW_BCC                      = $b2 ; bcc
=$b3					TKW_BCS                      = $b3 ; bcs
=$b4					TKW_BNE                      = $b4 ; bne
=$b5					TKW_BEQ                      = $b5 ; beq
=$b6					TKW_BRA                      = $b6 ; bra
=$b7					TKW_BRK                      = $b7 ; brk
=$b8					TKW_PHP                      = $b8 ; php
=$b9					TKW_CLC                      = $b9 ; clc
=$ba					TKW_PLP                      = $ba ; plp
=$bb					TKW_SEC                      = $bb ; sec
=$bc					TKW_RTI                      = $bc ; rti
=$bd					TKW_PHA                      = $bd ; pha
=$be					TKW_CLI                      = $be ; cli
=$bf					TKW_PHY                      = $bf ; phy
=$c0					TKW_RTS                      = $c0 ; rts
=$c1					TKW_PLA                      = $c1 ; pla
=$c2					TKW_SEI                      = $c2 ; sei
=$c3					TKW_PLY                      = $c3 ; ply
=$c4					TKW_DEY                      = $c4 ; dey
=$c5					TKW_TXA                      = $c5 ; txa
=$c6					TKW_TYA                      = $c6 ; tya
=$c7					TKW_TXS                      = $c7 ; txs
=$c8					TKW_TAY                      = $c8 ; tay
=$c9					TKW_TAX                      = $c9 ; tax
=$ca					TKW_CLV                      = $ca ; clv
=$cb					TKW_TSX                      = $cb ; tsx
=$cc					TKW_INY                      = $cc ; iny
=$cd					TKW_DEX                      = $cd ; dex
=$ce					TKW_CLD                      = $ce ; cld
=$cf					TKW_PHX                      = $cf ; phx
=$d0					TKW_INX                      = $d0 ; inx
=$d1					TKW_NOP                      = $d1 ; nop
=$d2					TKW_SED                      = $d2 ; sed
=$d3					TKW_PLX                      = $d3 ; plx
=$86					TKW_VPOKE                    = $86 ; vpoke
=$87					TKW_VDOKE                    = $87 ; vdoke
=$88					TKW_VLOAD                    = $88 ; vload
=$89					TKW_MODE                     = $89 ; mode
=$8a					TKW_PALETTE                  = $8a ; palette
=$8b					TKW_SPRITE                   = $8b ; sprite
=$8c					TKW_CLG                      = $8c ; clg
=$8d					TKW_RECT                     = $8d ; rect
=$8e					TKW_FRAME                    = $8e ; frame
=$8f					TKW_DRAW                     = $8f ; draw
=$90					TKW_TEXT                     = $90 ; text
=$91					TKW_PLOT                     = $91 ; plot
=$92					TKW_LINE                     = $92 ; line
=$93					TKW_PAINT                    = $93 ; paint
=$86					TKW_VPEEKLPAREN              = $86 ; vpeek(
=$87					TKW_VDEEKLPAREN              = $87 ; vdeek(
=$88					TKW_SPRITEPERIODXLPAREN      = $88 ; sprite.x(
=$89					TKW_SPRITEPERIODYLPAREN      = $89 ; sprite.y(
=$8a					TKW_HITLPAREN                = $8a ; hit(
=$8b					TKW_JOYPERIODXLPAREN         = $8b ; joy.x(
=$8c					TKW_JOYPERIODYLPAREN         = $8c ; joy.y(
=$8d					TKW_JOYPERIODBLPAREN         = $8d ; joy.b(
=$8e					TKW_CLOCKLPAREN              = $8e ; clock(

;******  Return to file: header/03data.inc

=$3a					TYPE_INT =		($3A) 						; type bytes that end identifier.
=$3b					TYPE_INTARRAY =	($3B)
=$3c					TYPE_STR =		($3C)
=$3d					TYPE_STRARRAY =	($3D)
=$3e					TYPE_FLOAT =	($3E)
=$3f					TYPE_FLOATARRAY=($3F)

;******  Processing file: header/../generated/asmconst.inc

=$94					TKA_GROUP1 = $94
=$9c					TKA_GROUP2 = $9c
=$ae					TKA_GROUP3 = $ae
=$b7					TKA_GROUP4 = $b7
=$d4					TKA_END4 = $d4

;******  Return to file: header/03data.inc


;******  Return to file: basic.asm


;******  Processing file: header/header.inc


;******  Return to file: basic.asm


;******  Processing file: assembler/asmconst.inc

=0					AMD_IMM		= 0					; Immediate mode.
=1					AMD_ZERO 	= 1					; Zero Page
=2					AMD_ACCIMP	= 2					; Accumulator/Implied
=3					AMD_ABS 	= 3					; Absolute
=4					AMD_ZEROINDY= 4					; Zero Indirect,Y
=5					AMD_ZEROX 	= 5					; Zero Page,X
=6					AMD_ABSY 	= 6					; Absolute,Y
=7					AMD_ABSX 	= 7					; Absolute,X
=8					AMD_ZEROIND = 8					; Zero Indirect
=9					AMD_ZEROY 	= 9					; Zero Page,Y
=10					AMD_ABSIND 	= 10				; Absolute Indirect
=11					AMD_ABSINDX	= 11				; Absolute Indirect Indexed
=12					AMD_REL		= 12				; Relative
=13					AMD_ZEROINDX= 13 				; Zero Indirect,X

;******  Return to file: basic.asm


;******  Processing file: assembler/assembler.inc


;******  Return to file: basic.asm


;******  Processing file: device/device.inc


;******  Return to file: basic.asm


;******  Processing file: error/error.inc


;******  Return to file: basic.asm


;******  Processing file: error/errorhandler.inc


;******  Processing file: error/../generated/errorid.inc

=1					ErrorID_Missing = 1 ; Feature not Present
=2					ErrorID_Syntax = 2 ; Syntax Error
=3					ErrorID_NoModule = 3 ; Module disabled
=4					ErrorID_Assert = 4 ; Assertion failed
=5					ErrorID_DivZero = 5 ; Divide By Zero
=6					ErrorID_Stop = 6 ; Stop
=7					ErrorID_BadType = 7 ; Type Mismatch
=8					ErrorID_BadValue = 8 ; Illegal Value
=9					ErrorID_MissingRP = 9 ; Missing right bracket
=10					ErrorID_MissingComma = 10 ; Missing comma
=11					ErrorID_NoReference = 11 ; Missing reference
=12					ErrorID_LineNumber = 12 ; Line Number not found
=13					ErrorID_StrLen = 13 ; String too long
=14					ErrorID_ReturnErr = 14 ; RETURN without GOSUB
=15					ErrorID_UntilErr = 15 ; UNTIL without REPEAT
=16					ErrorID_NextErr = 16 ; NEXT without FOR
=17					ErrorID_WendErr = 17 ; WEND without WHILE
=18					ErrorID_endprocErr = 18 ; ENDPROC without PROC
=19					ErrorID_BadIndex = 19 ; Bad NEXT index
=20					ErrorID_Struct = 20 ; Structures nested wrong
=21					ErrorID_NoAuto = 21 ; Cannot create variable
=22					ErrorID_RetStack = 22 ; Return stack out of space
=23					ErrorID_NoProc = 23 ; Unknown Procedure
=24					ErrorID_Params = 24 ; Parameters do not match
=25					ErrorID_DupArray = 25 ; Array already defined
=26					ErrorID_NotArray = 26 ; DIM requires array
=27					ErrorID_ArrayIndex = 27 ; Bad array index
=28					ErrorID_ArrayDepth = 28 ; Wrong number of array indices
=29					ErrorID_DataError = 29 ; Out of data
=30					ErrorID_Tokenise = 30 ; Cannot tokenise line
=31					ErrorID_Save = 31 ; Save failed
=32					ErrorID_Load = 32 ; Load failed
=33					ErrorID_Break = 33 ; Break
=34					ErrorID_Memory = 34 ; Out of memory
=35					ErrorID_NumStack = 35 ; Expression too complex
=36					ErrorID_Assembler = 36 ; Bad Operand/Mode
=37					ErrorID_Branch = 37 ; Branch out of range
=38					ErrorID_Label = 38 ; Label changed value
=39					ErrorID_NoSprite = 39 ; No Sprite Selected
=40					ErrorID_Hardware = 40 ; Hardware

;******  Return to file: error/errorhandler.inc


;******  Return to file: basic.asm


;******  Processing file: extension/extension.inc


;******  Return to file: basic.asm


;******  Processing file: extension/option_x16/x16const.inc

=64					X16MaxImages = 64 							; max # of sprite images.

;******  Return to file: basic.asm


;******  Processing file: floatingpoint/float.inc

=5					FloatEmbeddedSize = 5

;******  Return to file: basic.asm


;******  Processing file: floatingpoint/floatingpoint.inc


;******  Return to file: basic.asm


;******  Processing file: interaction/interaction.inc


;******  Return to file: basic.asm


;******  Processing file: main/main.inc


;******  Return to file: basic.asm


;******  Processing file: string/functions/memory.inc

=252					MaxStringSize = 252

;******  Return to file: basic.asm


;******  Processing file: string/string.inc


;******  Return to file: basic.asm


;******  Processing file: tokeniser/detokenise/colouring.inc

=$84					LTYLineNumber = $84
=$82					LTYPunctuation = $82
=$87					LTYIdentifier = $87
=$86					LTYConstant = $86
=$83					LTYKeyword = $83
=$81					LTYString = $81

;******  Return to file: basic.asm


;******  Processing file: tokeniser/tokeniser.inc


;******  Return to file: basic.asm


;******  Processing file: variable/variable.inc


;******  Return to file: basic.asm


;******  Processing file: footer/footer.inc


;******  Return to file: basic.asm

.1000					section_start_header:

;******  Processing file: header/header.asm


;******  Processing file: header/00start.asm

.1000					Start:
.1000	4c 0a 10	jmp $100a			jmp 	GoColdStart 				; +0 	boot BASIC
.1003	4c 58 10	jmp $1058			jmp 	GoTokTest					; +3 	run tokeniser test code.
>1006	75 44						.word 	TokenTableAddress
.1008							else
>1008	00 00						.word 	0
.100a					GoColdStart:
.100a	a9 00		lda #$00			lda 	#(programMemory) & $FF
.100c	8d c8 0a	sta $0ac8			sta 	basePage
.100f	a9 4d		lda #$4d			lda 	#(programMemory) >> 8
.1011	8d c9 0a	sta $0ac9			sta 	1+(basePage)
.1014	a9 00		lda #$00			lda 	#(endOfMemory) & $FF
.1016	8d cc 0a	sta $0acc			sta 	endMemory
.1019	a9 9f		lda #$9f			lda 	#(endOfMemory) >> 8
.101b	8d cd 0a	sta $0acd			sta 	1+(endMemory)
.101e	20 26 10	jsr $1026			jsr 	InitialiseAll 				; initialise everything.
.1021	a2 02		ldx #$02		ldx	#2
.1023	20 48 26	jsr $2648		jsr	interactionHandler

;******  Processing file: header/../generated/initialiseall.asm

.1026					InitialiseAll:
.1026	a9 00		lda #$00		lda #0
.1028	a2 00		ldx #$00		ldx	#0
.102a	20 b4 13	jsr $13b4		jsr	assemblerHandler
.102d	a9 00		lda #$00		lda #0
.102f	a2 00		ldx #$00		ldx	#0
.1031	20 f6 14	jsr $14f6		jsr	deviceHandler
.1034	a9 00		lda #$00		lda #0
.1036	a2 00		ldx #$00		ldx	#0
.1038	20 48 26	jsr $2648		jsr	interactionHandler
.103b	a9 00		lda #$00		lda #0
.103d	a2 00		ldx #$00		ldx	#0
.103f	20 e6 3c	jsr $3ce6		jsr	mainHandler
.1042	a9 00		lda #$00		lda #0
.1044	a2 00		ldx #$00		ldx	#0
.1046	20 a3 3f	jsr $3fa3		jsr	stringHandler
.1049	a9 00		lda #$00		lda #0
.104b	a2 00		ldx #$00		ldx	#0
.104d	20 2c 48	jsr $482c		jsr	tokeniserHandler
.1050	a9 00		lda #$00		lda #0
.1052	a2 00		ldx #$00		ldx	#0
.1054	20 fd 4b	jsr $4bfd		jsr	variableHandler
.1057	60		rts			rts

;******  Return to file: header/00start.asm

.1058					GoTokTest:
.1058	a2 06		ldx #$06		ldx	#6
.105a	20 2c 48	jsr $482c		jsr	tokeniserHandler

;******  Return to file: header/header.asm


;******  Return to file: basic.asm

.105d					section_end_header:
.105d					section_start_assembler:

;******  Processing file: assembler/assembler.asm


;******  Processing file: assembler/asmoperand.asm

.105d					AsmGetOperand:
.105d	a2 00		ldx #$00			ldx 	#0 							; clear the operand.
.105f	8a		txa				txa
.1060	95 98		sta $98,x			sta 	esInt0,x
.1062	95 a0		sta $a0,x			sta 	esInt1,x
.1064	95 a8		sta $a8,x			sta 	esInt2,x
.1066	95 b0		sta $b0,x			sta 	esInt3,x
.1068	b1 28		lda ($28),y			lda 	(codePtr),y 				; first into X
.106a	aa		tax				tax
.106b	a9 02		lda #$02			lda 	#AMD_ACCIMP
.106d	e0 80		cpx #$80			cpx 	#TOK_EOL 					; if end of line or colon, return implied mode.
.106f	f0 41		beq $10b2			beq 	_AGOExit
.1071	e0 ca		cpx #$ca			cpx 	#TKW_COLON
.1073	f0 3d		beq $10b2			beq 	_AGOExit
.1075	c8		iny				iny 								; consume the token
.1076	a9 00		lda #$00			lda 	#AMD_IMM
.1078	e0 e7		cpx #$e7			cpx 	#TKW_HASH 					; if a hash present, then immediate mode.
.107a	f0 2d		beq $10a9			beq		_AGOEvalExit 				; with an operand.
.107c	e0 a4		cpx #$a4			cpx 	#TKW_LPAREN 				; left bracket ?
.107e	f0 40		beq $10c0			beq 	_AGOIndirect
.1080	e0 01		cpx #$01			cpx 	#$01 						; is it "A" e.g. the variable A.
.1082	d0 0b		bne $108f			bne 	_AGOZeroPage1 				; if not it is zero zero,x zero,y, unpick 1 iny
.1084	b1 28		lda ($28),y			lda 	(codePtr),y 				; get the second character & consume it
.1086	c8		iny				iny
.1087	aa		tax				tax
.1088	a9 02		lda #$02			lda 	#AMD_ACCIMP 				; and return Acc/Implied if it is just A
.108a	e0 3a		cpx #$3a			cpx 	#$3A
.108c	f0 24		beq $10b2			beq 	_AGOExit
.108e	88		dey				dey 								; unpick 2 iny
.108f					_AGOZeroPage1:
.108f	88		dey				dey
.1090	a9 00		lda #$00			lda 	#0 							; get the address into esInt0/1
.1092	a2 0a		ldx #$0a		ldx	#10
.1094	20 e6 3c	jsr $3ce6		jsr	mainHandler
.1097	20 ef 10	jsr $10ef			jsr 	AsmGetIndexing
.109a	a9 01		lda #$01			lda 	#AMD_ZERO
.109c	90 14		bcc $10b2			bcc 	_AGOExit
.109e	a9 05		lda #$05			lda 	#AMD_ZEROX
.10a0	e0 00		cpx #$00			cpx 	#0
.10a2	f0 0e		beq $10b2			beq 	_AGOExit
.10a4	a9 09		lda #$09			lda 	#AMD_ZEROY
.10a6	4c b2 10	jmp $10b2			jmp 	_AGOExit
.10a9					_AGOEvalExit:
.10a9	48		pha				pha
.10aa	a9 00		lda #$00			lda 	#0 							; evaluate operand in root.
.10ac	a2 0a		ldx #$0a		ldx	#10
.10ae	20 e6 3c	jsr $3ce6		jsr	mainHandler
.10b1	68		pla				pla
.10b2					_AGOExit:
.10b2	48		pha				pha 								; save the mode
.10b3	a5 a8		lda $a8				lda 	esInt2 						; check the operand is zero.
.10b5	05 b0		ora $b0				ora 	esInt3
.10b7	d0 02		bne $10bb			bne 	_AGOValue
.10b9	68		pla				pla
.10ba	60		rts				rts
.10bb					_AGOValue:
.10bb	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.10bd	20 18 15	jsr $1518		jsr	errorHandler
.10c0					_AGOIndirect:
.10c0	a9 00		lda #$00			lda 	#0 							; evaluate operand in root.
.10c2	a2 0a		ldx #$0a		ldx	#10
.10c4	20 e6 3c	jsr $3ce6		jsr	mainHandler
.10c7	b1 28		lda ($28),y			lda 	(codePtr),y 				; does ) follow ? if so might be ) or ),Y
.10c9	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.10cb	f0 11		beq $10de			beq 	_AGOIndIndY
.10cd	20 ef 10	jsr $10ef			jsr 	ASMGetIndexing 				; must be ,X)
.10d0	90 39		bcc $110b			bcc 	AGISyntax
.10d2	e0 00		cpx #$00			cpx 	#0
.10d4	d0 35		bne $110b			bne 	AGISyntax
.10d6	a2 04		ldx #$04		ldx	#4
.10d8	20 e6 3c	jsr $3ce6		jsr	mainHandler
.10db	a9 0d		lda #$0d			lda 	#AMD_ZEROINDX
.10dd	60		rts				rts
.10de					_AGOIndIndY:
.10de	c8		iny				iny
.10df	20 ef 10	jsr $10ef			jsr 	ASMGetIndexing 				; get indexing if any
.10e2	a9 08		lda #$08			lda 	#AMD_ZEROIND
.10e4	90 cc		bcc $10b2			bcc 	_AGOExit 					; none then exit
.10e6	e0 00		cpx #$00			cpx 	#0 							; must be ,Y
.10e8	f0 21		beq $110b			beq 	AGISyntax
.10ea	a9 04		lda #$04			lda 	#AMD_ZEROINDY
.10ec	4c b2 10	jmp $10b2			jmp 	_AGOExit
.10ef					AsmGetIndexing:
.10ef	b1 28		lda ($28),y			lda 	(codePtr),y 				; check for comma
.10f1	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.10f3	18		clc				clc
.10f4	d0 14		bne $110a			bne 	_AGIExit 					; no comma, return with CC
.10f6	c8		iny				iny 								; get what SHOULD be X or Y
.10f7	b1 28		lda ($28),y			lda 	(codePtr),y  				; read it
.10f9	38		sec				sec 								; subtract 6 bit ASCII of X
.10fa	e9 18		sbc #$18			sbc 	#"X" & $3F
.10fc	c9 02		cmp #$02			cmp 	#2 							; if unsigned >= 2 then error
.10fe	b0 0b		bcs $110b			bcs 	AGISyntax
.1100	aa		tax				tax 								; put in index
.1101	c8		iny				iny 								; get what follows that, should be the $3A marker
.1102	b1 28		lda ($28),y			lda 	(codePtr),y
.1104	c8		iny				iny
.1105	c9 3a		cmp #$3a			cmp 	#$3A
.1107	d0 02		bne $110b			bne 	AGISyntax
.1109	38		sec				sec 								; return CS and index mode in X
.110a					_AGIExit:
.110a	60		rts				rts
.110b					AGISyntax:
.110b	a2 02		ldx #$02			ldx 	#ErrorID_syntax
.110d	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: assembler/assembler.asm


;******  Processing file: assembler/asmwrite.asm

.0af2					finalOpcode:
>0af2							.fill 	1
.1110					AsmWriteInstruction:
.1110	8d f2 0a	sta $0af2			sta 	finalOpcode					; save opcode.
.1113	98		tya				tya
.1114	48		pha				pha
.1115	ad 38 0a	lda $0a38			lda 	SingleLetterVar+("O"-"A")*4	; check O
.1118	29 02		and #$02			and 	#2
.111a	f0 2d		beq $1149			beq 	_ASMWNoEcho 				; if zero then don't echo.
.111c	ad 3d 0a	lda $0a3d			lda 	SingleLetterVar+("P"-"A")*4+1 ; write address in P
.111f	20 84 11	jsr $1184			jsr 	AWIWriteHex
.1122	ad 3c 0a	lda $0a3c			lda 	SingleLetterVar+("P"-"A")*4
.1125	20 84 11	jsr $1184			jsr 	AWIWriteHex
.1128	ad f2 0a	lda $0af2			lda 	finalOpcode 				; write opcode
.112b	20 7d 11	jsr $117d			jsr 	AWIWriteHexSpace
.112e	e0 00		cpx #$00			cpx 	#0
.1130	f0 0e		beq $1140			beq 	_ASMWEchoExit
.1132	a5 98		lda $98				lda 	esInt0
.1134	20 7d 11	jsr $117d			jsr 	AWIWriteHexSpace
.1137	e0 01		cpx #$01			cpx 	#1
.1139	f0 05		beq $1140			beq 	_ASMWEchoExit
.113b	a5 a0		lda $a0				lda 	esInt1
.113d	20 7d 11	jsr $117d			jsr 	AWIWriteHexSpace
.1140					_ASMWEchoExit:
.1140	8a		txa				txa
.1141	48		pha				pha
.1142	a2 06		ldx #$06		ldx	#6
.1144	20 f6 14	jsr $14f6		jsr	deviceHandler
.1147	68		pla				pla
.1148	aa		tax				tax
.1149					_ASMWNoEcho:
.1149	ad f2 0a	lda $0af2			lda 	finalOpcode
.114c	20 64 11	jsr $1164			jsr 	AsmWriteByte
.114f	e0 00		cpx #$00			cpx 	#0
.1151	f0 0e		beq $1161			beq 	_ASMWExit
.1153	a5 98		lda $98				lda 	esInt0
.1155	20 64 11	jsr $1164			jsr 	AsmWriteByte
.1158	e0 01		cpx #$01			cpx 	#1
.115a	f0 05		beq $1161			beq 	_ASMWExit
.115c	a5 a0		lda $a0				lda 	esInt1
.115e	20 64 11	jsr $1164			jsr 	AsmWriteByte
.1161					_ASMWExit:
.1161	68		pla				pla
.1162	a8		tay				tay
.1163	60		rts				rts
.1164					AsmWriteByte:
.1164	a0 00		ldy #$00			ldy 	#0
.1166	48		pha				pha
.1167	ad 3c 0a	lda $0a3c			lda 	SingleLetterVar+("P"-"A")*4 ; copy address to temp0
.116a	85 2a		sta $2a				sta 	temp0
.116c	ad 3d 0a	lda $0a3d			lda 	SingleLetterVar+("P"-"A")*4+1
.116f	85 2b		sta $2b				sta 	temp0+1
.1171	68		pla				pla 								; write out the byte.
.1172	91 2a		sta ($2a),y			sta 	(temp0),y
.1174	ee 3c 0a	inc $0a3c			inc 	SingleLetterVar+("P"-"A")*4	; increment P
.1177	d0 03		bne $117c			bne 	_AWBNoCarry
.1179	ee 3d 0a	inc $0a3d			inc 	SingleLetterVar+("P"-"A")*4+1
.117c					_AWBNoCarry:
.117c	60		rts				rts
.117d					AWIWriteHexSpace:
.117d	48		pha				pha
.117e	a9 20		lda #$20			lda 	#" "
.1180	20 97 11	jsr $1197			jsr 	AWIPrintChar
.1183	68		pla				pla
.1184					AWIWriteHex:
.1184	48		pha				pha
.1185	4a		lsr a				lsr 	a
.1186	4a		lsr a				lsr 	a
.1187	4a		lsr a				lsr 	a
.1188	4a		lsr a				lsr 	a
.1189	20 8d 11	jsr $118d			jsr 	AWIPrintNibble
.118c	68		pla				pla
.118d					AWIPrintNibble:
.118d	29 0f		and #$0f			and 	#15
.118f	c9 0a		cmp #$0a			cmp 	#10
.1191	90 02		bcc $1195			bcc 	_AWIPNDigit
.1193	69 06		adc #$06			adc 	#6
.1195					_AWIPNDigit:
.1195	69 30		adc #$30			adc 	#48
.1197					AWIPrintChar:
.1197	85 32		sta $32				sta 	tempShort
.1199	8a		txa				txa
.119a	48		pha				pha
.119b	a5 32		lda $32				lda 	tempShort
.119d	a2 16		ldx #$16		ldx	#22
.119f	20 f6 14	jsr $14f6		jsr	deviceHandler
.11a2	68		pla				pla
.11a3	aa		tax				tax
.11a4	60		rts				rts

;******  Return to file: assembler/assembler.asm


;******  Processing file: assembler/assemblecmd.asm

.0af3					asmToken:
>0af3							.fill 	1
.0af4					asmMode:
>0af4							.fill 	1 							; esInt0/1
.0af5					asmBaseOpcode:
>0af5							.fill 	1
.11a5					AssembleOneInstruction:
.11a5	8d f3 0a	sta $0af3			sta 	asmToken 					; save the token
.11a8	aa		tax				tax
.11a9	bd 72 11	lda $1172,x			lda 	OpcodeTable-TKA_GROUP1,x 	; get the base opcode.
.11ac	8d f5 0a	sta $0af5			sta 	asmBaseOpcode
.11af	20 5d 10	jsr $105d			jsr 	AsmGetOperand 				; identify the address mode and operand where applicable.
.11b2	8d f4 0a	sta $0af4			sta 	asmMode
.11b5	a5 a0		lda $a0				lda 	esInt1 						; check if this is a three byte operand.
.11b7	d0 05		bne $11be			bne 	_AOIThreeBytes 				; if so, we have to use three byte
.11b9	20 d4 11	jsr $11d4			jsr 	AssembleAttempt 			; try to assemble token/mode/operand (2 bytes)
.11bc	b0 10		bcs $11ce			bcs 	_AOISuccess 				; worked ok.
.11be					_AOIThreeBytes:
.11be	ae f4 0a	ldx $0af4			ldx 	asmMode 					; convert mode to 3 byte version, where possible.
.11c1	bd f8 11	lda $11f8,x			lda 	AbsoluteVersionTable,x
.11c4	30 09		bmi $11cf			bmi 	_AOIError					; not possible, no equivalent.
.11c6	8d f4 0a	sta $0af4			sta 	asmMode
.11c9	20 d4 11	jsr $11d4			jsr 	AssembleAttempt 			; try to assemble token/mode/operand (3 bytes)
.11cc	90 01		bcc $11cf			bcc 	_AOIError 					; didn't work.
.11ce					_AOISuccess:
.11ce	60		rts				rts
.11cf					_AOIError:
.11cf	a2 24		ldx #$24			ldx 	#ErrorID_Assembler
.11d1	20 18 15	jsr $1518		jsr	errorHandler
.11d4					AssembleAttempt:
.11d4	20 dd 11	jsr $11dd			jsr 	_AADispatch 				; go to the code which dispatches to the appropriate
.11d7	b0 03		bcs $11dc			bcs 	_AAExit 					; exit if carry set, e.g. was successful
.11d9	20 87 13	jsr $1387			jsr 	AssembleSpecialCase
.11dc					_AAExit:
.11dc	60		rts				rts
.11dd					_AADispatch:
.11dd	ad f3 0a	lda $0af3			lda 	asmToken
.11e0	c9 b7		cmp #$b7			cmp 	#TKA_GROUP4
.11e2	b0 11		bcs $11f5			bcs 	_AAGroup4
.11e4	c9 ae		cmp #$ae			cmp 	#TKA_GROUP3
.11e6	b0 0a		bcs $11f2			bcs 	_AAGroup3
.11e8	c9 9c		cmp #$9c			cmp 	#TKA_GROUP2
.11ea	b0 03		bcs $11ef			bcs 	_AAGroup2
.11ec	4c cd 12	jmp $12cd			jmp 	AssembleGroup1
.11ef					_AAGroup2:
.11ef	4c 28 13	jmp $1328			jmp 	AssembleGroup2
.11f2					_AAGroup3:
.11f2	4c 49 13	jmp $1349			jmp 	AssembleGroup3
.11f5					_AAGroup4:
.11f5	4c 7d 13	jmp $137d			jmp 	AssembleGroup4
.11f8					AbsoluteVersionTable:
>11f8	ff						.byte	$FF 			; fail AMD_IMM
>11f9	03						.byte	AMD_ABS 		; absolute AMD_ZERO
>11fa	ff						.byte	$FF 			; fail AMD_ACCIMP
>11fb	ff						.byte	$FF 			; fail AMD_ABS
>11fc	ff						.byte 	$FF 			; fail AMD_ZEROINDY
>11fd	07						.byte	AMD_ABSX 		; absolute AMD_ZEROX
>11fe	ff						.byte	$FF 			; fail AMD_ABSY
>11ff	ff						.byte	$FF 			; fail AMD_ABSX
>1200	0a						.byte	AMD_ABSIND 		; absolute AMD_ZEROIND
>1201	06						.byte	AMD_ABSY 		; absolute AMD_ZEROY
>1202	ff						.byte	$FF 			; fail AMD_ABSIND
>1203	ff						.byte	$FF 			; fail AMD_ABSINDX
>1204	ff						.byte	$FF 			; fail AMD_REL
>1205	0b						.byte 	AMD_ABSINDX 	; absolute AMD_ZEROINDX

;******  Processing file: assembler/../generated/asmtables.inc

.1206					OpcodeTable:
>1206	01					.byte	$01			; $94 ora
>1207	21					.byte	$21			; $95 (and)
>1208	41					.byte	$41			; $96 eor
>1209	61					.byte	$61			; $97 adc
>120a	81					.byte	$81			; $98 sta
>120b	a1					.byte	$a1			; $99 lda
>120c	c1					.byte	$c1			; $9a cmp
>120d	e1					.byte	$e1			; $9b sbc
>120e	02					.byte	$02			; $9c asl
>120f	22					.byte	$22			; $9d rol
>1210	42					.byte	$42			; $9e lsr
>1211	62					.byte	$62			; $9f ror
>1212	82					.byte	$82			; $a0 stx
>1213	a2					.byte	$a2			; $a1 ldx
>1214	c2					.byte	$c2			; $a2 dec
>1215	e2					.byte	$e2			; $a3 inc
>1216	60					.byte	$60			; $a4 stz
>1217	20					.byte	$20			; $a5 bit
>1218	80					.byte	$80			; $a6 sty
>1219	a0					.byte	$a0			; $a7 ldy
>121a	c0					.byte	$c0			; $a8 cpy
>121b	e0					.byte	$e0			; $a9 cpx
>121c	00					.byte	$00			; $aa tsb
>121d	10					.byte	$10			; $ab trb
>121e	14					.byte	$14			; $ac jsr
>121f	40					.byte	$40			; $ad jmp
>1220	10					.byte	$10			; $ae bpl
>1221	30					.byte	$30			; $af bmi
>1222	50					.byte	$50			; $b0 bvc
>1223	70					.byte	$70			; $b1 bvs
>1224	90					.byte	$90			; $b2 bcc
>1225	b0					.byte	$b0			; $b3 bcs
>1226	d0					.byte	$d0			; $b4 bne
>1227	f0					.byte	$f0			; $b5 beq
>1228	80					.byte	$80			; $b6 bra
>1229	00					.byte	$00			; $b7 brk
>122a	08					.byte	$08			; $b8 php
>122b	18					.byte	$18			; $b9 clc
>122c	28					.byte	$28			; $ba plp
>122d	38					.byte	$38			; $bb sec
>122e	40					.byte	$40			; $bc rti
>122f	48					.byte	$48			; $bd pha
>1230	58					.byte	$58			; $be cli
>1231	5a					.byte	$5a			; $bf phy
>1232	60					.byte	$60			; $c0 rts
>1233	68					.byte	$68			; $c1 pla
>1234	78					.byte	$78			; $c2 sei
>1235	7a					.byte	$7a			; $c3 ply
>1236	88					.byte	$88			; $c4 dey
>1237	8a					.byte	$8a			; $c5 txa
>1238	98					.byte	$98			; $c6 tya
>1239	9a					.byte	$9a			; $c7 txs
>123a	a8					.byte	$a8			; $c8 tay
>123b	aa					.byte	$aa			; $c9 tax
>123c	b8					.byte	$b8			; $ca clv
>123d	ba					.byte	$ba			; $cb tsx
>123e	c8					.byte	$c8			; $cc iny
>123f	ca					.byte	$ca			; $cd dex
>1240	d8					.byte	$d8			; $ce cld
>1241	da					.byte	$da			; $cf phx
>1242	e8					.byte	$e8			; $d0 inx
>1243	ea					.byte	$ea			; $d1 nop
>1244	f8					.byte	$f8			; $d2 sed
>1245	fa					.byte	$fa			; $d3 plx
.1246					Group2OpcodeAvailability:
>1246	ae					.byte	$ae			; $9c asl $02
>1247	ae					.byte	$ae			; $9d rol $22
>1248	ae					.byte	$ae			; $9e lsr $42
>1249	ae					.byte	$ae			; $9f ror $62
>124a	0a					.byte	$0a			; $a0 stx $82
>124b	0b					.byte	$0b			; $a1 ldx $a2
>124c	aa					.byte	$aa			; $a2 dec $c2
>124d	aa					.byte	$aa			; $a3 inc $e2
>124e	22					.byte	$22			; $a4 stz $60
>124f	aa					.byte	$aa			; $a5 bit $20
>1250	2a					.byte	$2a			; $a6 sty $80
>1251	ab					.byte	$ab			; $a7 ldy $a0
>1252	2b					.byte	$2b			; $a8 cpy $c0
>1253	0b					.byte	$0b			; $a9 cpx $e0
>1254	0a					.byte	$0a			; $aa tsb $00
>1255	0a					.byte	$0a			; $ab trb $10
>1256	08					.byte	$08			; $ac jsr $14
>1257	08					.byte	$08			; $ad jmp $40
.1258					AssemblerSpecialCases:
>1258	ad 0a 6c				.byte	$ad,10,$6c		; jmp (abs)
>125b	ad 0b 7c				.byte	$ad,11,$7c		; jmp (abs,x)
>125e	a1 06 be				.byte	$a1,6,$be		; ldx abs,y
>1261	a1 09 b6				.byte	$a1,9,$b6		; ldx zp,y
>1264	a0 09 96				.byte	$a0,9,$96		; stx zp,y
>1267	a3 02 1a				.byte	$a3,2,$1a		; inc acc
>126a	a2 02 3a				.byte	$a2,2,$3a		; dec acc
>126d	a5 00 89				.byte	$a5,0,$89		; bit #
>1270	a4 03 9c				.byte	$a4,3,$9c		; stz abs
>1273	a4 07 9e				.byte	$a4,7,$9e		; stz abs,x
>1276	00					.byte	0

;******  Return to file: assembler/assemblecmd.asm


;******  Return to file: assembler/assembler.asm


;******  Processing file: assembler/assemblelabel.asm

.1277					AssembleLabel:
.1277	b1 28		lda ($28),y			lda 	(codePtr),y 				; check it's followed by a variable name.
.1279	c9 3a		cmp #$3a			cmp 	#$3A
.127b	b0 4b		bcs $12c8			bcs 	_ALSyntax
.127d	a9 00		lda #$00			lda 	#0							; get a variable name on to stack:0
.127f	a2 02		ldx #$02		ldx	#2
.1281	20 fd 4b	jsr $4bfd		jsr	variableHandler
.1284	a5 90		lda $90				lda 	esType 						; check integer reference
.1286	c9 80		cmp #$80			cmp 	#$80
.1288	d0 3e		bne $12c8			bne 	_ALSyntax
.128a	a5 98		lda $98				lda 	esInt0 						; copy that reference address to temp0
.128c	85 2a		sta $2a				sta 	temp0
.128e	a5 a0		lda $a0				lda 	esInt1
.1290	85 2b		sta $2b				sta 	temp0+1
.1292	98		tya				tya
.1293	48		pha				pha
.1294	ad 38 0a	lda $0a38			lda 	SingleLetterVar+("O"-"A")*4	; are we in Pass 2
.1297	4a		lsr a				lsr 	a
.1298	90 11		bcc $12ab			bcc 	_ALWrite
.129a	a0 00		ldy #$00			ldy 	#0
.129c	ad 3c 0a	lda $0a3c			lda 	SingleLetterVar+("P"-"A")*4 ; compare the value in P to the variable
.129f	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.12a1	d0 20		bne $12c3			bne 	_ALChanged
.12a3	c8		iny				iny
.12a4	ad 3d 0a	lda $0a3d			lda 	SingleLetterVar+("P"-"A")*4+1
.12a7	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.12a9	d0 18		bne $12c3			bne 	_ALChanged
.12ab					_ALWrite:
.12ab	a0 00		ldy #$00			ldy 	#0
.12ad	ad 3c 0a	lda $0a3c			lda 	SingleLetterVar+("P"-"A")*4 ; copy the value in P into the variable
.12b0	91 2a		sta ($2a),y			sta 	(temp0),y
.12b2	ad 3d 0a	lda $0a3d			lda 	SingleLetterVar+("P"-"A")*4+1
.12b5	c8		iny				iny
.12b6	91 2a		sta ($2a),y			sta 	(temp0),y
.12b8	a9 00		lda #$00			lda 	#0
.12ba	c8		iny				iny
.12bb	91 2a		sta ($2a),y			sta 	(temp0),y
.12bd	c8		iny				iny
.12be	91 2a		sta ($2a),y			sta 	(temp0),y
.12c0	68		pla				pla
.12c1	a8		tay				tay
.12c2	60		rts				rts
.12c3					_ALChanged:
.12c3	a2 26		ldx #$26			ldx 	#ErrorID_Label
.12c5	20 18 15	jsr $1518		jsr	errorHandler
.12c8					_ALSyntax:
.12c8	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.12ca	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: assembler/assembler.asm


;******  Processing file: assembler/subgroup.asm

.12cd					AssembleGroup1:
.12cd	ad f3 0a	lda $0af3			lda 	asmToken 					; firstly, we throw out STA immediate
.12d0	c9 98		cmp #$98			cmp 	#TKW_STA
.12d2	d0 07		bne $12db			bne 	_AG1NotStoreImm
.12d4	ad f4 0a	lda $0af4			lda 	asmMode
.12d7	c9 00		cmp #$00			cmp 	#AMD_IMM
.12d9	f0 2c		beq $1307			beq 	AG1ModeError
.12db					_AG1NotStoreImm:
.12db	ae f4 0a	ldx $0af4			ldx 	asmMode						; get mode into X.
.12de	bd 0c 13	lda $130c,x			lda		AMDOperandSize,X 			; get the size of the operand and push on stack
.12e1	48		pha				pha
.12e2	f0 23		beq $1307			beq 	AG1ModeError 				; if the size is zero, the mode must be Accumulator
.12e4	e0 00		cpx #$00			cpx 	#0 							; if the mode is zero, e.g. immediate
.12e6	d0 02		bne $12ea			bne 	_AG1NotImmediate
.12e8	a2 02		ldx #$02			ldx 	#2 							; then we use offset 2 here. This is how the 6502
.12ea					_AG1NotImmediate:
.12ea	e0 0d		cpx #$0d			cpx 	#AMD_ZEROINDX 				; (zero,x) uses slot 0.
.12ec	d0 02		bne $12f0			bne 	_AG1NotZX
.12ee	a2 00		ldx #$00			ldx 	#0
.12f0					_AG1NotZX:
.12f0	68		pla				pla 								; restore length
.12f1	e0 09		cpx #$09			cpx 	#9 							; anything > 8 fails.
.12f3	b0 10		bcs $1305			bcs 	AG1Fail
.12f5					AG1ReturnValue:
.12f5	85 32		sta $32				sta 	tempShort 					; save size of operand
.12f7	18		clc				clc
.12f8	bd 1a 13	lda $131a,x			lda 	AMDOffsetFromBase,X 		; get the offset for the address mode.
.12fb	6d f5 0a	adc $0af5			adc 	asmBaseOpcode 				; add the base opcode.
.12fe	a6 32		ldx $32				ldx 	tempShort 					; length in X
.1300	20 10 11	jsr $1110			jsr 	AsmWriteInstruction 		; output instruction.
.1303	38		sec				sec
.1304	60		rts				rts
.1305					AG1Fail:
.1305	18		clc				clc
.1306	60		rts				rts
.1307					AG1ModeError:
.1307	a2 24		ldx #$24			ldx 	#ErrorID_Assembler
.1309	20 18 15	jsr $1518		jsr	errorHandler
.130c					AMDOperandSize:
>130c	01 01 00 02					.byte 	1,1,0,2
>1310	01 01 02 02					.byte 	1,1,2,2
>1314	01 01 02 02					.byte 	1,1,2,2
>1318	01 01						.byte 	1,1
.131a					AMDOffsetFromBase:
>131a	00 04 08 0c					.byte 	0,4,8,12
>131e	10 14 18 1c					.byte	16,20,24,28
>1322	11 00 00 00					.byte 	17,0,0,0
>1326	00 00						.byte 	0,0
.1328					AssembleGroup2:
.1328	ad f4 0a	lda $0af4			lda 	asmMode 					; get the mode; if >= 8 cannot be a legit group 2
.132b	c9 08		cmp #$08			cmp 	#8
.132d	b0 18		bcs $1347			bcs 	_AG2Fail
.132f	85 2a		sta $2a				sta 	temp0 						; save in temp9
.1331	ae f3 0a	ldx $0af3			ldx 	asmToken					; get token in X, then get the availability flags for it
.1334	bd aa 11	lda $11aa,x			lda 	Group2OpcodeAvailability-TKA_GROUP2,x
.1337					_AG2Shift:
.1337	4a		lsr a				lsr 	a
.1338	c6 2a		dec $2a				dec 	temp0
.133a	10 fb		bpl $1337			bpl 	_AG2Shift
.133c	90 09		bcc $1347			bcc 	_AG2Fail 					; cannot do that instruction w/that opcode.
.133e	ae f4 0a	ldx $0af4			ldx  	asmMode 					; mode in X
.1341	bd 0c 13	lda $130c,x			lda		AMDOperandSize,X 			; get the size of the operand in A
.1344	4c f5 12	jmp $12f5			jmp 	AG1ReturnValue 				; and use that with Group 1's exit code
.1347					_AG2Fail:
.1347	18		clc				clc
.1348	60		rts				rts
.1349					AssembleGroup3:
.1349	ad 38 0a	lda $0a38			lda 	SingleLetterVar+("O"-"A")*4	; check bit 0 (pass) of O
.134c	4a		lsr a				lsr 	a
.134d	a9 00		lda #$00			lda 	#0 							; if clear, e.g. pass 1, use default zero.
.134f	90 21		bcc $1372			bcc 	_AG3Default
.1351	38		sec				sec	 								; calculate branch offset
.1352	a5 98		lda $98				lda		esInt0
.1354	ed 3c 0a	sbc $0a3c			sbc 	SingleLetterVar+("P"-"A")*4
.1357	aa		tax				tax
.1358	a5 a0		lda $a0				lda		esInt1
.135a	ed 3d 0a	sbc $0a3d			sbc 	SingleLetterVar+("P"-"A")*4+1
.135d	85 a0		sta $a0				sta 	esInt1
.135f	8a		txa				txa 								; add 126, now 128 too many.
.1360	18		clc				clc 								; we can use this to check the range
.1361	69 7e		adc #$7e			adc 	#126
.1363	85 98		sta $98				sta 	esInt0
.1365	90 02		bcc $1369			bcc 	_AG3NoCarry
.1367	e6 a0		inc $a0				inc 	esInt1
.1369					_AG3NoCarry:
.1369	a5 a0		lda $a0				lda 	esInt1 						; check in range.
.136b	d0 0b		bne $1378			bne 	_AG3Range
.136d	a5 98		lda $98				lda 	esInt0 						; fix up branch distance
.136f	38		sec				sec
.1370	e9 80		sbc #$80			sbc 	#128
.1372					_AG3Default:
.1372	85 98		sta $98				sta 	esInt0
.1374					_AG3ExitOk:
.1374	a2 01		ldx #$01			ldx 	#1 							; one opcode, use AG4 Code
.1376	d0 07		bne $137f			bne 	AG4Write
.1378					_AG3Range:
.1378	a2 25		ldx #$25			ldx 	#ErrorID_Branch
.137a	20 18 15	jsr $1518		jsr	errorHandler
.137d					AssembleGroup4:
.137d	a2 00		ldx #$00			ldx 	#0 							; no parameters in the opcode.
.137f					AG4Write:
.137f	ad f5 0a	lda $0af5			lda 	asmBaseOpcode				; the opcode is the opcode base.
.1382	20 10 11	jsr $1110			jsr 	AsmWriteInstruction 		; output instruction.
.1385	38		sec				sec
.1386	60		rts				rts
.1387					AssembleSpecialCase:
.1387	a2 00		ldx #$00			ldx 	#0
.1389					_ASCScan:
.1389	bd 58 12	lda $1258,x			lda 	AssemblerSpecialCases,x 	; scan token and mode for match
.138c	cd f3 0a	cmp $0af3			cmp 	asmToken
.138f	d0 08		bne $1399			bne 	_ASCNext
.1391	bd 59 12	lda $1259,x			lda 	AssemblerSpecialCases+1,x
.1394	cd f4 0a	cmp $0af4			cmp 	asmMode
.1397	f0 0a		beq $13a3			beq 	_ASCFound
.1399					_ASCNext:
.1399	e8		inx				inx									; next entry
.139a	e8		inx				inx
.139b	e8		inx				inx
.139c	bd 58 12	lda $1258,x			lda 	AssemblerSpecialCases,x 	; until table ends
.139f	d0 e8		bne $1389			bne 	_ASCScan
.13a1	18		clc				clc
.13a2	60		rts				rts
.13a3					_ASCFound:
.13a3	bd 5a 12	lda $125a,x			lda 	AssemblerSpecialCases+2,x 	; get the new opcode.
.13a6	48		pha				pha
.13a7	ae f4 0a	ldx $0af4			ldx  	asmMode 					; mode in X
.13aa	bd 0c 13	lda $130c,x			lda		AMDOperandSize,X 			; get the size of the operand in X
.13ad	aa		tax				tax
.13ae	68		pla				pla 								; opcode back
.13af	20 10 11	jsr $1110			jsr 	AsmWriteInstruction 		; output instruction.
.13b2	38		sec				sec
.13b3	60		rts				rts

;******  Return to file: assembler/assembler.asm

.13b4					assemblerHandler:
.13b4	7c b7 13	jmp ($13b7,x)			jmp 	(assemblerVectors,x)
.13b7					assemblerVectors:
>13b7	bd 13					.word _DummyControlHandler ; index 0
>13b9	a5 11					.word AssembleOneInstruction ; index 2
>13bb	77 12					.word AssembleLabel        ; index 4
.13bd					_DummyControlHandler:
.13bd	60		rts			rts

;******  Return to file: basic.asm

.13be					section_end_assembler:
.13be					section_start_device:

;******  Processing file: device/device.asm


;******  Processing file: device/option_x16/x16break.asm

.13be					X16Break:
.13be	20 e1 ff	jsr $ffe1			jsr 	$FFE1
.13c1	f0 01		beq $13c4			beq 	_IsBreak
.13c3	60		rts				rts
.13c4					_IsBreak:
.13c4	a2 21		ldx #$21			ldx 	#ErrorID_Break
.13c6	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: device/device.asm


;******  Processing file: device/option_x16/x16file.asm

.13c9					ExternSave:
.13c9	98		tya				tya
.13ca	48		pha				pha
.13cb	20 19 14	jsr $1419			jsr 	ExternGetLength 			; get length of file into A name YX
.13ce	20 bd ff	jsr $ffbd			jsr 	$FFBD 						; set name
.13d1	a9 01		lda #$01			lda 	#1
.13d3	a2 08		ldx #$08			ldx 	#8	 						; device #8
.13d5	a0 00		ldy #$00			ldy 	#0
.13d7	20 ba ff	jsr $ffba			jsr 	$FFBA 						; set LFS
.13da	a5 99		lda $99				lda 	esInt0+1 					; copy start of save address to temp0
.13dc	85 2a		sta $2a				sta 	temp0
.13de	a5 a1		lda $a1				lda 	esInt1+1
.13e0	85 2b		sta $2b				sta 	temp0+1
.13e2	a6 9a		ldx $9a				ldx 	esInt0+2 					; end address
.13e4	a4 a2		ldy $a2				ldy 	esInt1+2
.13e6	a9 2a		lda #$2a			lda 	#temp0 						; ref to start address
.13e8	20 d8 ff	jsr $ffd8			jsr 	$FFD8 						; save
.13eb	b0 03		bcs $13f0			bcs 	_ESSave
.13ed	68		pla				pla
.13ee	a8		tay				tay
.13ef	60		rts				rts
.13f0					_ESSave:
.13f0	a2 1f		ldx #$1f			ldx 	#ErrorID_Save
.13f2	20 18 15	jsr $1518		jsr	errorHandler
.13f5					ExternLoad:
.13f5	98		tya				tya
.13f6	48		pha				pha
.13f7	20 19 14	jsr $1419			jsr 	ExternGetLength 			; get length of file into A name YX
.13fa	20 bd ff	jsr $ffbd			jsr 	$FFBD 						; set name
.13fd	a9 01		lda #$01			lda 	#1
.13ff	a2 08		ldx #$08			ldx 	#8	 						; device #8
.1401	a0 00		ldy #$00			ldy 	#0
.1403	20 ba ff	jsr $ffba			jsr 	$FFBA 						; set LFS
.1406	a6 99		ldx $99				ldx 	esInt0+1 					; load address
.1408	a4 a1		ldy $a1				ldy 	esInt1+1
.140a	a9 00		lda #$00			lda 	#0 							; load command
.140c	20 d5 ff	jsr $ffd5			jsr 	$FFD5
.140f	b0 03		bcs $1414			bcs 	_ESLoad
.1411	68		pla				pla
.1412	a8		tay				tay
.1413	60		rts				rts
.1414					_ESLoad:
.1414	a2 20		ldx #$20			ldx 	#ErrorID_Load
.1416	20 18 15	jsr $1518		jsr	errorHandler
.1419					ExternGetLength:
.1419	a5 98		lda $98				lda 	esInt0 						; length into A.
.141b	85 2a		sta $2a				sta 	temp0
.141d	a5 a0		lda $a0				lda 	esInt1
.141f	85 2b		sta $2b				sta 	temp0+1
.1421	a0 00		ldy #$00			ldy 	#0
.1423	b1 2a		lda ($2a),y			lda 	(temp0),y
.1425	a6 98		ldx $98				ldx 	esInt0 						; name into YX
.1427	a4 a0		ldy $a0				ldy 	esInt1
.1429	e8		inx				inx 								; advance over the length pointer.
.142a	d0 01		bne $142d			bne 	_ESNoCarry
.142c	c8		iny				iny
.142d					_ESNoCarry:
.142d	60		rts				rts

;******  Return to file: device/device.asm


;******  Processing file: device/option_x16/x16io.asm

=240					MaxLineInputSize = 240
.0af6					bufferCount:
>0af6							.fill 	0
.0af6					bufferStorage:
>0af6							.fill 	MaxLineInputSize
.142e					IOControlHandler:
.142e	c9 00		cmp #$00			cmp 	#0
.1430	d0 12		bne $1444			bne		_CHExit
.1432	a9 0f		lda #$0f			lda 	#15 						; switch to upper/lower case mode
.1434	20 5d 14	jsr $145d			jsr 	IOPrintChar
.1437	a9 02		lda #$02			lda 	#2 							; green on black and clear screen
.1439	20 89 14	jsr $1489			jsr 	IOInk
.143c	a9 00		lda #$00			lda 	#0
.143e	20 9d 14	jsr $149d			jsr 	IOPaper
.1441	20 45 14	jsr $1445			jsr 	IOClearScreen
.1444					_CHExit:
.1444	60		rts				rts
.1445					IOClearScreen:
.1445	48		pha				pha
.1446	a9 93		lda #$93			lda	 	#147 						; char code $93 clears screen
.1448	20 5d 14	jsr $145d			jsr 	IOPrintChar
.144b	68		pla				pla
.144c	60		rts				rts
.144d					IONewLine:
.144d	48		pha				pha
.144e	a9 0d		lda #$0d			lda 	#13
.1450	20 5d 14	jsr $145d			jsr 	IOPrintChar
.1453	68		pla				pla
.1454	60		rts				rts
.1455					IOTab:
.1455	48		pha				pha
.1456	a9 20		lda #$20			lda 	#32
.1458	20 5d 14	jsr $145d			jsr 	IOPrintChar
.145b	68		pla				pla
.145c	60		rts				rts
.145d					IOPrintAscii:
.145d					IOPrintChar:
.145d	aa		tax				tax 								; save in X so we can save Y
.145e	5a		phy				phy
.145f	8a		txa				txa
.1460	c9 08		cmp #$08			cmp 	#8 							; make BS (8) onto CHR$(14) which is the
.1462	d0 02		bne $1466			bne 	_IOPCNotBS 					; Commodore/X16 backspace code.
.1464	a9 14		lda #$14			lda 	#$14
.1466					_IOPCNotBS:
.1466	20 d2 ff	jsr $ffd2			jsr 	$FFD2 						; CBM OS Call.
.1469	7a		ply				ply
.146a	60		rts				rts
.146b					IOInkey:
.146b	98		tya				tya
.146c	48		pha				pha
.146d	20 e4 ff	jsr $ffe4			jsr 	$FFE4
.1470	85 32		sta $32				sta 	tempShort
.1472	68		pla				pla
.1473	a8		tay				tay
.1474	a5 32		lda $32				lda 	tempShort					; no key pressed.
.1476	f0 10		beq $1488			beq 	_IOIExit
.1478	c9 0d		cmp #$0d			cmp 	#13 						; allow CR (13)
.147a	f0 0c		beq $1488			beq 	_IOIExit
.147c	c9 14		cmp #$14			cmp 	#$14 						; backspace code ($14) returns 8.
.147e	f0 06		beq $1486			beq 	_IOIBackspace
.1480	c9 20		cmp #$20			cmp 	#32 						; no other control allowed.
.1482	90 e7		bcc $146b			bcc 	IOInkey
.1484	b0 02		bcs $1488			bcs 	_IOIExit
.1486					_IOIBackspace:
.1486	a9 08		lda #$08			lda 	#8 							; return chr(8)
.1488					_IOIExit:
.1488	60		rts				rts
.1489					IOInk:
.1489	48		pha				pha
.148a	29 07		and #$07			and 	#7 							; 8 primaries
.148c	aa		tax				tax
.148d	bd 95 14	lda $1495,x			lda 	_IOColourTable,x 			; look up CBM code and print it.
.1490	20 5d 14	jsr $145d			jsr 	IOPrintChar
.1493	68		pla				pla
.1494	60		rts				rts
.1495					_IOColourTable:
>1495	90						.byte 	$90 					; 0 Black
>1496	96						.byte 	$96 					; 1 Red
>1497	1e						.byte 	$1E 					; 2 Green
>1498	9e						.byte 	$9E 					; 3 Yellow
>1499	9a						.byte 	$9A 					; 4 Blue
>149a	9c						.byte 	$9C 					; 5 Magenta
>149b	9f						.byte 	$9F 					; 6 Cyan
>149c	05						.byte 	$05 					; 7 White
.149d					IOPaper:
.149d	48		pha				pha
.149e	48		pha				pha
.149f	a9 01		lda #$01			lda 	#1 						; 1 swaps fgr/bgr, so we swap them, set fgr
.14a1	20 5d 14	jsr $145d			jsr 	IOPrintChar 			; and then swap them again.
.14a4	68		pla				pla
.14a5	20 89 14	jsr $1489			jsr 	IOInk
.14a8	a9 01		lda #$01			lda 	#1
.14aa	20 5d 14	jsr $145d			jsr 	IOPrintChar
.14ad	68		pla				pla
.14ae	60		rts				rts
.14af					IOLocate:
.14af	48		pha				pha
.14b0	a9 13		lda #$13			lda 	#$13 					; home cursor code
.14b2	20 5d 14	jsr $145d			jsr 	IOPrintChar
.14b5	a9 11		lda #$11			lda 	#$11 	 				; print Y x $11 (down)
.14b7	20 be 14	jsr $14be			jsr 	_IOLoc2
.14ba	68		pla				pla
.14bb	a8		tay				tay
.14bc	a9 1d		lda #$1d			lda 	#$1D 					; print Y x $1D (right)
.14be					_IOLoc2:
.14be	c0 00		cpy #$00			cpy 	#0
.14c0	f0 06		beq $14c8			beq 	_IOLocExit
.14c2	20 5d 14	jsr $145d			jsr 	IOPrintChar
.14c5	88		dey				dey
.14c6	d0 f6		bne $14be			bne 	_IOLoc2
.14c8					_IOLocExit:
.14c8	60		rts				rts
.14c9					IOInput:
.14c9	a9 00		lda #$00			lda 	#0
.14cb	8d f6 0a	sta $0af6			sta 	bufferCount
.14ce					_IOILoop:
.14ce	20 cf ff	jsr $ffcf			jsr 	$FFCF
.14d1	c9 0d		cmp #$0d			cmp 	#13
.14d3	f0 10		beq $14e5			beq 	_IOIExit
.14d5	ae f6 0a	ldx $0af6			ldx 	bufferCount
.14d8	e0 f0		cpx #$f0			cpx 	#MaxLineInputSize
.14da	f0 f2		beq $14ce			beq 	_IOILoop
.14dc	ee f6 0a	inc $0af6			inc 	bufferCount
.14df	9d f7 0a	sta $0af7,x			sta 	bufferStorage+1,x
.14e2	4c ce 14	jmp $14ce			jmp 	_IOILoop
.14e5					_IOIExit:
.14e5	a9 f6		lda #$f6			lda 	#(bufferCount) & $FF
.14e7	85 2a		sta $2a				sta 	temp0
.14e9	a9 0a		lda #$0a			lda 	#(bufferCount) >> 8
.14eb	85 2b		sta $2b				sta 	1+(temp0)
.14ed	60		rts				rts

;******  Return to file: device/device.asm


;******  Processing file: device/option_x16/x16timer.asm

.14ee					IOReadTimer:
.14ee	20 de ff	jsr $ffde			jsr 	$FFDE 						; reads timer into YXA so we want only YA
.14f1	48		pha				pha
.14f2	8a		txa				txa
.14f3	a8		tay				tay
.14f4	68		pla				pla
.14f5	60		rts				rts

;******  Return to file: device/device.asm

.14f6					deviceHandler:
.14f6	7c f9 14	jmp ($14f9,x)			jmp 	(deviceVectors,x)
.14f9					deviceVectors:
>14f9	2e 14					.word IOControlHandler     ; index 0
>14fb	be 13					.word X16Break             ; index 2
>14fd	45 14					.word IOClearScreen        ; index 4
>14ff	4d 14					.word IONewLine            ; index 6
>1501	89 14					.word IOInk                ; index 8
>1503	6b 14					.word IOInkey              ; index 10
>1505	c9 14					.word IOInput              ; index 12
>1507	f5 13					.word ExternLoad           ; index 14
>1509	af 14					.word IOLocate             ; index 16
>150b	9d 14					.word IOPaper              ; index 18
>150d	5d 14					.word IOPrintChar          ; index 20
>150f	5d 14					.word IOPrintAscii         ; index 22
>1511	c9 13					.word ExternSave           ; index 24
>1513	55 14					.word IOTab                ; index 26
>1515	ee 14					.word IOReadTimer          ; index 28
.1517					_DummyControlHandler:
.1517	60		rts			rts

;******  Return to file: basic.asm

.1518					section_end_device:
.1518					section_start_error:

;******  Processing file: error/error.asm


;******  Processing file: error/errorhandler.asm

.1518					ErrorHandler:
.1518	8a		txa				txa
.1519	48		pha				pha
.151a	a9 01		lda #$01			lda 	#1 							; red
.151c	a2 08		ldx #$08		ldx	#8
.151e	20 f6 14	jsr $14f6		jsr	deviceHandler
.1521	68		pla				pla
.1522	aa		tax				tax
.1523	a9 8e		lda #$8e			lda 	#(ErrorTextList) & $FF
.1525	85 2a		sta $2a				sta 	temp0
.1527	a9 15		lda #$15			lda 	#(ErrorTextList) >> 8
.1529	85 2b		sta $2b				sta 	1+(temp0)
.152b	ca		dex		_EHFind:dex									; errors start at 1
.152c	f0 10		beq $153e			beq 	_EHFound
.152e	a0 00		ldy #$00			ldy 	#0 							; goto next text message, add length + 1 to the pointer.
.1530	38		sec				sec
.1531	a5 2a		lda $2a				lda 	temp0
.1533	71 2a		adc ($2a),y			adc 	(temp0),y
.1535	85 2a		sta $2a				sta 	temp0
.1537	90 f2		bcc $152b			bcc 	_EHFind
.1539	e6 2b		inc $2b				inc 	temp0+1
.153b	4c 2b 15	jmp $152b			jmp 	_EHFind
.153e					_EHFound:
.153e	20 52 18	jsr $1852			jsr 	EHPrintAscii 				; print the string "temp0" now points to.
.1541	a0 00		ldy #$00			ldy 	#0 							; in a line, e.g. the offset to next is non zero.
.1543	b1 28		lda ($28),y			lda 	(codePtr),y
.1545	f0 39		beq $1580			beq 	_EHNoLine
.1547	a5 29		lda $29				lda 	codePtr+1 					; code running from the command line.
.1549	cd c9 0a	cmp $0ac9			cmp 	basePage+1
.154c	90 32		bcc $1580			bcc 	_EHNoLine
.154e	a9 8a		lda #$8a			lda 	#(EHAtMsg) & $FF
.1550	85 2a		sta $2a				sta 	temp0
.1552	a9 15		lda #$15			lda 	#(EHAtMsg) >> 8
.1554	85 2b		sta $2b				sta 	1+(temp0)
.1556	20 52 18	jsr $1852			jsr 	EHPrintAscii
.1559	a0 01		ldy #$01			ldy 	#1 							; set up line number in TOS
.155b	a2 00		ldx #$00			ldx 	#0
.155d	b1 28		lda ($28),y			lda 	(codePtr),y
.155f	95 98		sta $98,x			sta 	esInt0,x
.1561	c8		iny				iny
.1562	b1 28		lda ($28),y			lda 	(codePtr),y
.1564	95 a0		sta $a0,x			sta 	esInt1,x
.1566	a9 00		lda #$00			lda 	#0
.1568	95 a8		sta $a8,x			sta 	esInt2,x
.156a	95 b0		sta $b0,x			sta 	esInt3,x
.156c	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.156e	85 2a		sta $2a				sta 	temp0
.1570	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.1572	85 2b		sta $2b				sta 	1+(temp0)
.1574	a0 0a		ldy #$0a			ldy 	#10 						; in base 10.
.1576	a9 00		lda #$00			lda 	#0							; stack position zero.
.1578	a2 12		ldx #$12		ldx	#18
.157a	20 e6 3c	jsr $3ce6		jsr	mainHandler
.157d	20 52 18	jsr $1852			jsr 	EHPrintAscii
.1580					_EHNoLine:
.1580	a2 06		ldx #$06		ldx	#6
.1582	20 f6 14	jsr $14f6		jsr	deviceHandler
.1585	a2 04		ldx #$04		ldx	#4
.1587	20 48 26	jsr $2648		jsr	interactionHandler
.158a					EHAtMsg:
>158a	03 20 40 20					.text 	3," @ "

;******  Processing file: error/../generated/errortext.inc

.158e					ErrorTextList:
>158e	13 46 65 61 74 75 72 65			.text 19,"Feature not Present"
>1596	20 6e 6f 74 20 50 72 65 73 65 6e 74
>15a2	0c 53 79 6e 74 61 78 20			.text 12,"Syntax Error"
>15aa	45 72 72 6f 72
>15af	0f 4d 6f 64 75 6c 65 20			.text 15,"Module disabled"
>15b7	64 69 73 61 62 6c 65 64
>15bf	10 41 73 73 65 72 74 69			.text 16,"Assertion failed"
>15c7	6f 6e 20 66 61 69 6c 65 64
>15d0	0e 44 69 76 69 64 65 20			.text 14,"Divide By Zero"
>15d8	42 79 20 5a 65 72 6f
>15df	04 53 74 6f 70				.text 4,"Stop"
>15e4	0d 54 79 70 65 20 4d 69			.text 13,"Type Mismatch"
>15ec	73 6d 61 74 63 68
>15f2	0d 49 6c 6c 65 67 61 6c			.text 13,"Illegal Value"
>15fa	20 56 61 6c 75 65
>1600	15 4d 69 73 73 69 6e 67			.text 21,"Missing right bracket"
>1608	20 72 69 67 68 74 20 62 72 61 63 6b 65 74
>1616	0d 4d 69 73 73 69 6e 67			.text 13,"Missing comma"
>161e	20 63 6f 6d 6d 61
>1624	11 4d 69 73 73 69 6e 67			.text 17,"Missing reference"
>162c	20 72 65 66 65 72 65 6e 63 65
>1636	15 4c 69 6e 65 20 4e 75			.text 21,"Line Number not found"
>163e	6d 62 65 72 20 6e 6f 74 20 66 6f 75 6e 64
>164c	0f 53 74 72 69 6e 67 20			.text 15,"String too long"
>1654	74 6f 6f 20 6c 6f 6e 67
>165c	14 52 45 54 55 52 4e 20			.text 20,"RETURN without GOSUB"
>1664	77 69 74 68 6f 75 74 20 47 4f 53 55 42
>1671	14 55 4e 54 49 4c 20 77			.text 20,"UNTIL without REPEAT"
>1679	69 74 68 6f 75 74 20 52 45 50 45 41 54
>1686	10 4e 45 58 54 20 77 69			.text 16,"NEXT without FOR"
>168e	74 68 6f 75 74 20 46 4f 52
>1697	12 57 45 4e 44 20 77 69			.text 18,"WEND without WHILE"
>169f	74 68 6f 75 74 20 57 48 49 4c 45
>16aa	14 45 4e 44 50 52 4f 43			.text 20,"ENDPROC without PROC"
>16b2	20 77 69 74 68 6f 75 74 20 50 52 4f 43
>16bf	0e 42 61 64 20 4e 45 58			.text 14,"Bad NEXT index"
>16c7	54 20 69 6e 64 65 78
>16ce	17 53 74 72 75 63 74 75			.text 23,"Structures nested wrong"
>16d6	72 65 73 20 6e 65 73 74 65 64 20 77 72 6f 6e 67
>16e6	16 43 61 6e 6e 6f 74 20			.text 22,"Cannot create variable"
>16ee	63 72 65 61 74 65 20 76 61 72 69 61 62 6c 65
>16fd	19 52 65 74 75 72 6e 20			.text 25,"Return stack out of space"
>1705	73 74 61 63 6b 20 6f 75 74 20 6f 66 20 73 70 61
>1715	63 65
>1717	11 55 6e 6b 6e 6f 77 6e			.text 17,"Unknown Procedure"
>171f	20 50 72 6f 63 65 64 75 72 65
>1729	17 50 61 72 61 6d 65 74			.text 23,"Parameters do not match"
>1731	65 72 73 20 64 6f 20 6e 6f 74 20 6d 61 74 63 68
>1741	15 41 72 72 61 79 20 61			.text 21,"Array already defined"
>1749	6c 72 65 61 64 79 20 64 65 66 69 6e 65 64
>1757	12 44 49 4d 20 72 65 71			.text 18,"DIM requires array"
>175f	75 69 72 65 73 20 61 72 72 61 79
>176a	0f 42 61 64 20 61 72 72			.text 15,"Bad array index"
>1772	61 79 20 69 6e 64 65 78
>177a	1d 57 72 6f 6e 67 20 6e			.text 29,"Wrong number of array indices"
>1782	75 6d 62 65 72 20 6f 66 20 61 72 72 61 79 20 69
>1792	6e 64 69 63 65 73
>1798	0b 4f 75 74 20 6f 66 20			.text 11,"Out of data"
>17a0	64 61 74 61
>17a4	14 43 61 6e 6e 6f 74 20			.text 20,"Cannot tokenise line"
>17ac	74 6f 6b 65 6e 69 73 65 20 6c 69 6e 65
>17b9	0b 53 61 76 65 20 66 61			.text 11,"Save failed"
>17c1	69 6c 65 64
>17c5	0b 4c 6f 61 64 20 66 61			.text 11,"Load failed"
>17cd	69 6c 65 64
>17d1	05 42 72 65 61 6b			.text 5,"Break"
>17d7	0d 4f 75 74 20 6f 66 20			.text 13,"Out of memory"
>17df	6d 65 6d 6f 72 79
>17e5	16 45 78 70 72 65 73 73			.text 22,"Expression too complex"
>17ed	69 6f 6e 20 74 6f 6f 20 63 6f 6d 70 6c 65 78
>17fc	10 42 61 64 20 4f 70 65			.text 16,"Bad Operand/Mode"
>1804	72 61 6e 64 2f 4d 6f 64 65
>180d	13 42 72 61 6e 63 68 20			.text 19,"Branch out of range"
>1815	6f 75 74 20 6f 66 20 72 61 6e 67 65
>1821	13 4c 61 62 65 6c 20 63			.text 19,"Label changed value"
>1829	68 61 6e 67 65 64 20 76 61 6c 75 65
>1835	12 4e 6f 20 53 70 72 69			.text 18,"No Sprite Selected"
>183d	74 65 20 53 65 6c 65 63 74 65 64
>1848	08 48 61 72 64 77 61 72			.text 8,"Hardware"
>1850	65
>1851	00					.byte 0

;******  Return to file: error/errorhandler.asm

.1852					EHPrintAscii:
.1852	a0 00		ldy #$00			ldy 	#0
.1854	b1 2a		lda ($2a),y			lda 	(temp0),y
.1856	aa		tax				tax
.1857	f0 0f		beq $1868			beq 	_EHPExit
.1859					_EHPLoop:
.1859	c8		iny				iny
.185a	8a		txa				txa
.185b	48		pha				pha
.185c	b1 2a		lda ($2a),y			lda 	(temp0),y
.185e	a2 16		ldx #$16		ldx	#22
.1860	20 f6 14	jsr $14f6		jsr	deviceHandler
.1863	68		pla				pla
.1864	aa		tax				tax
.1865	ca		dex				dex
.1866	d0 f1		bne $1859			bne 	_EHPLoop
.1868					_EHPExit:
.1868	60		rts				rts

;******  Return to file: error/error.asm


;******  Return to file: basic.asm

.1869					section_end_error:
.1869					section_start_extension:

;******  Processing file: extension/extension.asm


;******  Processing file: extension/extensionhandler.asm

.1869					ExtensionHandler:
.1869	c9 fe		cmp #$fe			cmp 	#$FE 						; check for force mode 0
.186b	f0 16		beq $1883			beq 	_ExtensionForce
.186d	c9 ff		cmp #$ff			cmp 	#$FF						; A = $FF command, otherwise unary function stack level.
.186f	d0 08		bne $1879			bne 	_ExtensionUnary 			; is passed in A.
.1871	b1 28		lda ($28),y			lda 	(codePtr),y 				; so this is a command, using Group 2.
.1873	c8		iny				iny
.1874	0a		asl a				asl 	a
.1875	aa		tax				tax
.1876	7c 7a 18	jmp ($187a,x)			jmp 	(Group2Vectors-12,x)
.1879					_ExtensionUnary:
.1879	48		pha				pha 								; save stack pos in A
.187a	b1 28		lda ($28),y			lda 	(codePtr),y 				; get shifted token, double into X
.187c	c8		iny				iny
.187d	0a		asl a				asl 	a
.187e	aa		tax				tax
.187f	68		pla				pla 								; restore stack pos and call group3 command.
.1880	7c 96 18	jmp ($1896,x)			jmp 	(Group3Vectors-12,X)
.1883					_ExtensionForce:
.1883	4c c7 21	jmp $21c7			jmp 	ForceMode0

;******  Processing file: extension/../generated/tokenvectors2.inc

.1886					Group2Vectors:
>1886	f5 22					.word	Command_VPoke            ; $86 vpoke
>1888	f8 22					.word	Command_VDoke            ; $87 vdoke
>188a	cd 22					.word	Command_VLoad            ; $88 vload
>188c	d9 21					.word	CommandMode              ; $89 mode
>188e	96 22					.word	CommandPalette           ; $8a palette
>1890	b5 1f					.word	CommandSprite            ; $8b sprite
>1892	cb 1d					.word	CommandClg               ; $8c clg
>1894	c4 1a					.word	Command_Rect             ; $8d rect
>1896	cc 1a					.word	Command_Frame            ; $8e frame
>1898	8c 30					.word	Unimplemented            ; $8f draw
>189a	8c 30					.word	Unimplemented            ; $90 text
>189c	b1 1a					.word	Command_Plot             ; $91 plot
>189e	8b 19					.word	Command_Line             ; $92 line
>18a0	00 21					.word	Command_Paint            ; $93 paint

;******  Return to file: extension/extensionhandler.asm


;******  Processing file: extension/../generated/tokenvectors3.inc

.18a2					Group3Vectors:
>18a2	41 23					.word	Command_VPeek            ; $86 vpeek(
>18a4	44 23					.word	Command_VDeek            ; $87 vdeek(
>18a6	97 21					.word	Sprite_GetX              ; $88 sprite.x(
>18a8	9a 21					.word	Sprite_GetY              ; $89 sprite.y(
>18aa	f8 1e					.word	FunctionCollide          ; $8a hit(
>18ac	70 1e					.word	Unary_JoyX               ; $8b joy.x(
>18ae	73 1e					.word	Unary_JoyY               ; $8c joy.y(
>18b0	ae 1e					.word	Unary_JButton            ; $8d joy.b(
>18b2	43 1e					.word	Unary_Clock              ; $8e clock(

;******  Return to file: extension/extensionhandler.asm

.18b4					XEvaluateInteger:
.18b4	8a		txa				txa
.18b5	a2 0a		ldx #$0a		ldx	#10
.18b7	20 e6 3c	jsr $3ce6		jsr	mainHandler
.18ba	aa		tax				tax
.18bb	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/graphics/general.asm

.0be6					gStartStorage:
.0be6					gCurrentXPos:
>0be6							.fill 	2 							; copying the coordinate here, and into x2, and the old
.0be8					gCurrentYPos:
>0be8							.fill 	2
.0bea					gX1:
>0bea							.fill 	2		 					; most recently used. x2,y2 are the most recently used.
.0bec					gY1:
>0bec							.fill 	2
.0bee					gX2:
>0bee							.fill 	2
.0bf0					gY2:
>0bf0							.fill 	2
.0bf2					gError:
>0bf2							.fill 	2
.0bf4					g2Error:
>0bf4							.fill 	2
.0bf6					gdx:
>0bf6							.fill 	2
.0bf8					gdy:
>0bf8							.fill 	2
.0bfa					gWordHandler:
>0bfa							.fill 	2
.0bfc					gModifiers:
.0bfc					gdInk:
>0bfc							.fill 	1
.0bfd					gdPaper:
>0bfd							.fill 	1
.0bfe					gdSize:
>0bfe							.fill 	1
.0bff					gdImage:
>0bff							.fill 	1
.0c00					gdFlip:
>0c00							.fill 	1
.0c01					gdXLimit:
>0c01							.fill 	2
.0c03					gdYLimit:
>0c03							.fill 	2
.0c05					gEndStorage:
.18bc					GResetStorage:
.18bc	8a		txa				txa
.18bd	48		pha				pha
.18be	a2 1e		ldx #$1e			ldx 	#gEndStorage-gStartStorage-1 ; fill all storage for gfx with 0
.18c0	a9 00		lda #$00			lda 	#0
.18c2					_GRSLoop:
.18c2	9d e6 0b	sta $0be6,x			sta 	gStartStorage,x
.18c5	ca		dex				dex
.18c6	10 fa		bpl $18c2			bpl 	_GRSLoop
.18c8	a9 01		lda #$01			lda 	#1
.18ca	8d fc 0b	sta $0bfc			sta 	gdInk
.18cd	8d fe 0b	sta $0bfe			sta 	gdSize
.18d0	68		pla				pla
.18d1	aa		tax				tax
.18d2	60		rts				rts
.18d3					GHandler:
.18d3	8e fb 0b	stx $0bfb			stx 	gWordHandler+1 				; save code that draws the actual line or whatever.
.18d6	8d fa 0b	sta $0bfa			sta 	gWordHandler
.18d9	88		dey				dey 								; predecrement
.18da					_GHLoopNext:
.18da	c8		iny				iny									; advance one character
.18db					_GHLoop:
.18db	b1 28		lda ($28),y			lda 	(codePtr),y 				; look at character.
.18dd	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; , go to next
.18df	f0 f9		beq $18da			beq 	_GHLoopNext
.18e1	c9 80		cmp #$80			cmp 	#TOK_EOL 					; end of line or : , exit
.18e3	f0 4c		beq $1931			beq 	_GHExit
.18e5	c9 ca		cmp #$ca			cmp 	#TKW_COLON
.18e7	f0 48		beq $1931			beq 	_GHExit
.18e9	c9 db		cmp #$db			cmp 	#TKW_AT 					; have we found AT or TO
.18eb	f0 33		beq $1920			beq 	_GHCallHandler 				; update post & call the handler
.18ed	c9 ce		cmp #$ce			cmp 	#TKW_TO
.18ef	f0 2f		beq $1920			beq 	_GHCallHandler
.18f1	c9 e6		cmp #$e6			cmp 	#TKW_FROM
.18f3	f0 10		beq $1905			beq 	_GHCPairSkip
.18f5	a2 00		ldx #$00			ldx 	#0 							; now see if it matches a token modifier (INK,PAPER etc.)
.18f7					_GHCheckTokens:
.18f7	b1 28		lda ($28),y			lda 	(codePtr),y
.18f9	dd 32 19	cmp $1932,x			cmp 	_GHTokenTable,x
.18fc	f0 0e		beq $190c			beq 	_GHFoundToken
.18fe	e8		inx				inx
.18ff	bd 32 19	lda $1932,x			lda 	_GHTokenTable,x
.1902	d0 f3		bne $18f7			bne 	_GHCheckTokens
.1904	88		dey				dey
.1905					_GHCPairSkip:
.1905	c8		iny				iny
.1906					_GHCPair:
.1906	20 38 19	jsr $1938			jsr 	GHMakeCurrent 				; should be a coordinate pair then.
.1909	4c db 18	jmp $18db			jmp 	_GHLoop
.190c					_GHFoundToken:
.190c	c8		iny				iny 								; skip token (INK/PAPER etc.)
.190d	8a		txa				txa
.190e	48		pha				pha
.190f	a9 00		lda #$00			lda 	#0 							; evaluate byte
.1911	a2 0c		ldx #$0c		ldx	#12
.1913	20 e6 3c	jsr $3ce6		jsr	mainHandler
.1916	68		pla				pla
.1917	aa		tax				tax
.1918	a5 98		lda $98				lda 	esInt0 						; get evaluated value
.191a	9d fc 0b	sta $0bfc,x			sta 	gModifiers,x 				; update the modifiers
.191d	4c db 18	jmp $18db			jmp 	_GHLoop 					; and loop back
.1920					_GHCallHandler:
.1920	c8		iny				iny 								; consume AT or TO.
.1921	20 38 19	jsr $1938			jsr 	GHMakeCurrent 				; update the coordinates.
.1924	98		tya				tya
.1925	48		pha				pha
.1926	20 2e 19	jsr $192e			jsr 	_GHCallHandlerCode 			; call the handler code
.1929	68		pla				pla
.192a	a8		tay				tay
.192b	4c db 18	jmp $18db			jmp 	_GHLoop 					; and loop round.
.192e					_GHCallHandlerCode:
.192e	6c fa 0b	jmp ($0bfa)			jmp 	(gWordHandler)
.1931					_GHExit:
.1931	60		rts				rts
.1932					_GHTokenTable:
>1932	e1 e2 d2 da dc					.byte 	TKW_INK,TKW_PAPER,TKW_DIM,TKW_IMAGE,TKW_FLIP
>1937	00						.byte 	0
.1938					GHMakeCurrent:
.1938	8a		txa				txa
.1939	48		pha				pha
.193a	a2 00		ldx #$00			ldx 	#0 							; do for 0 offset (X)
.193c	20 4c 19	jsr $194c			jsr 	_GHMCDoIt
.193f	a2 02		ldx #$02		ldx	#2
.1941	20 e6 3c	jsr $3ce6		jsr	mainHandler
.1944	a2 02		ldx #$02			ldx 	#2 							; do for 2 offset (Y)
.1946	20 4c 19	jsr $194c			jsr 	_GHMCDoIt
.1949	68		pla				pla
.194a	aa		tax				tax
.194b	60		rts				rts
.194c					_GHMCDoIt:
.194c	bd e6 0b	lda $0be6,x			lda 	gCurrentXPos,x 				; copy the current position to X,Y
.194f	9d ea 0b	sta $0bea,x			sta 	gX1,x
.1952	bd e7 0b	lda $0be7,x			lda 	gCurrentXPos+1,x
.1955	9d eb 0b	sta $0beb,x			sta 	gX1+1,x
.1958	8a		txa				txa
.1959	48		pha				pha
.195a	a9 00		lda #$00			lda 	#0 							; evaluate the parameter, now in esInt0,esInt1
.195c	a2 0a		ldx #$0a		ldx	#10
.195e	20 e6 3c	jsr $3ce6		jsr	mainHandler
.1961	68		pla				pla
.1962	aa		tax				tax
.1963	a5 98		lda $98				lda 	esInt0 						; check coordinate range
.1965	dd 01 0c	cmp $0c01,x			cmp 	gdXLimit,x
.1968	a5 a0		lda $a0				lda 	esInt1
.196a	fd 02 0c	sbc $0c02,x			sbc 	gdXLimit+1,x
.196d	b0 17		bcs $1986			bcs 	_GMHCRange
.196f	a5 a8		lda $a8				lda 	esInt2
.1971	05 b0		ora $b0				ora 	esInt3
.1973	d0 11		bne $1986			bne 	_GMHCRange
.1975	a5 98		lda $98				lda 	esInt0 						; copy into current and X2,Y2
.1977	9d e6 0b	sta $0be6,x			sta 	gCurrentXPos,x
.197a	9d ee 0b	sta $0bee,x			sta 	gX2,x
.197d	a5 a0		lda $a0				lda 	esInt1
.197f	9d e7 0b	sta $0be7,x			sta 	gCurrentXPos+1,x
.1982	9d ef 0b	sta $0bef,x			sta 	gX2+1,x
.1985	60		rts				rts
.1986					_GMHCRange:
.1986	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.1988	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: extension/extension.asm


;******  Processing file: extension/graphics/line.asm

.0c05					gdySign:
>0c05							.fill 	1
.198b					Command_Line:
.198b	a9 93		lda #$93			lda 	#LineHandler & $FF
.198d	a2 19		ldx #$19			ldx 	#LineHandler >> 8
.198f	20 d3 18	jsr $18d3			jsr 	GHandler
.1992	60		rts				rts
.1993					LineHandler:
.1993	a2 00		ldx #$00			ldx 	#gX1-gX1 					; check if horizontal, vertical line
.1995	a0 04		ldy #$04			ldy 	#gX2-gX1
.1997	20 76 1c	jsr $1c76			jsr 	CompareCoordsEq
.199a	f0 09		beq $19a5			beq 	_LHRectCode
.199c	a2 02		ldx #$02			ldx 	#gY1-gX1
.199e	a0 06		ldy #$06			ldy 	#gY2-gX1
.19a0	20 76 1c	jsr $1c76			jsr 	CompareCoordsEq
.19a3	d0 03		bne $19a8			bne 	_LHLineDrawer
.19a5					_LHRectCode:
.19a5	4c d8 1a	jmp $1ad8			jmp 	RectHandler
.19a8					_LHLineDrawer:
.19a8	a2 00		ldx #$00			ldx 	#gX1-gX1 					; check if X1 < X2 e.g. it is sloped to the right.
.19aa	a0 04		ldy #$04			ldy 	#gX2-gX1
.19ac	20 61 1c	jsr $1c61			jsr 	CompareCoords
.19af	90 0a		bcc $19bb			bcc 	_LHNoSwap
.19b1	20 a9 1c	jsr $1ca9			jsr 	GSwapCoords					; if so swap coords so X2 > X1, may be going up or down.
.19b4	a2 02		ldx #$02			ldx 	#gY1-gX1
.19b6	a0 06		ldy #$06			ldy 	#gY2-gX1
.19b8	20 a9 1c	jsr $1ca9			jsr 	GSwapCoords
.19bb					_LHNoSwap:
.19bb	20 e4 19	jsr $19e4			jsr 	BresenhamInitialise 		; initialise Bresenham constants
.19be	a0 00		ldy #$00			ldy 	#gX1-gX1
.19c0	20 4b 1c	jsr $1c4b			jsr 	SetupXY 					; set up X1,Y1 to draw.
.19c3	b0 15		bcs $19da			bcs 	_LHExit 					; line off screen.
.19c5					_LHDrawLoop:
.19c5	a2 00		ldx #$00			ldx 	#gX1-gX1 					; check if X1=X2 and Y1 = Y2
.19c7	a0 04		ldy #$04			ldy 	#gX2-gX1
.19c9	20 76 1c	jsr $1c76			jsr 	CompareCoordsEq
.19cc	d0 0d		bne $19db			bne 	_LHNextPixel
.19ce	a2 06		ldx #$06			ldx 	#gY2-gX1
.19d0	a0 06		ldy #$06			ldy 	#gY2-gX1
.19d2	20 76 1c	jsr $1c76			jsr 	CompareCoordsEq
.19d5	d0 04		bne $19db			bne 	_LHNextPixel
.19d7	20 65 1d	jsr $1d65			jsr 	gdPlotInk 					; plot the last pixel.
.19da					_LHExit:
.19da	60		rts				rts
.19db					_LHNextPixel:
.19db	20 65 1d	jsr $1d65			jsr 	gdPlotInk 					; plot the pixel.
.19de	20 38 1a	jsr $1a38			jsr 	BresenhamIteration 			; do one bresenham iteration calculation
.19e1	4c c5 19	jmp $19c5			jmp  	_LHDrawLoop 				; and loop back if okay
.19e4					BresenhamInitialise:
.19e4	38		sec				sec
.19e5	ad ee 0b	lda $0bee			lda 	gX2
.19e8	ed ea 0b	sbc $0bea			sbc 	gX1
.19eb	8d f6 0b	sta $0bf6			sta 	gdX
.19ee	ad ef 0b	lda $0bef			lda 	gX2+1
.19f1	ed eb 0b	sbc $0beb			sbc 	gX1+1
.19f4	8d f7 0b	sta $0bf7			sta 	gdX+1
.19f7	38		sec				sec
.19f8	ad ec 0b	lda $0bec			lda 	gY1
.19fb	ed f0 0b	sbc $0bf0			sbc 	gY2
.19fe	8d f8 0b	sta $0bf8			sta 	gdy
.1a01	ad ed 0b	lda $0bed			lda 	gY1+1
.1a04	ed f1 0b	sbc $0bf1			sbc 	gY2+1
.1a07	8d f9 0b	sta $0bf9			sta 	gdy+1
.1a0a	ad f9 0b	lda $0bf9			lda 	gdy+1 						; save sign of dy
.1a0d	8d 05 0c	sta $0c05			sta 	gdysign
.1a10	30 12		bmi $1a24			bmi 	_BINormal
.1a12	38		sec				sec
.1a13	a9 00		lda #$00			lda 	#0
.1a15	ed f8 0b	sbc $0bf8			sbc 	gdy
.1a18	8d f8 0b	sta $0bf8			sta 	gdy
.1a1b	a9 00		lda #$00			lda 	#0
.1a1d	ed f9 0b	sbc $0bf9			sbc 	gdy+1
.1a20	8d f9 0b	sta $0bf9			sta 	gdy+1
.1a23	60		rts				rts
.1a24					_BINormal:
.1a24	18		clc				clc
.1a25	ad f6 0b	lda $0bf6			lda 	gdx
.1a28	6d f8 0b	adc $0bf8			adc 	gdy
.1a2b	8d f2 0b	sta $0bf2			sta 	gError
.1a2e	ad f7 0b	lda $0bf7			lda 	gdx+1
.1a31	6d f9 0b	adc $0bf9			adc 	gdy+1
.1a34	8d f3 0b	sta $0bf3			sta 	gError+1
.1a37	60		rts				rts
.1a38					BresenhamIteration:
.1a38	ad f2 0b	lda $0bf2			lda 	gError
.1a3b	0a		asl a				asl 	a
.1a3c	8d f4 0b	sta $0bf4			sta 	g2Error
.1a3f	ad f3 0b	lda $0bf3			lda 	gError+1
.1a42	2a		rol a				rol 	a
.1a43	8d f5 0b	sta $0bf5			sta 	g2Error+1
.1a46	a2 0a		ldx #$0a			ldx 	#g2Error-gX1
.1a48	a0 0e		ldy #$0e			ldy 	#gdy-gX1
.1a4a	20 6e 1c	jsr $1c6e			jsr 	CompareCoordsSigned
.1a4d	30 03		bmi $1a52			bmi 	_BINoE2DY
.1a4f	20 5f 1a	jsr $1a5f			jsr 	BresenhamE2GEDY
.1a52					_BINoE2DY:
.1a52	a2 0c		ldx #$0c			ldx 	#gdx-gX1
.1a54	a0 0a		ldy #$0a			ldy 	#g2Error-gX1
.1a56	20 6e 1c	jsr $1c6e			jsr 	CompareCoordsSigned
.1a59	30 03		bmi $1a5e			bmi 	_BINoDXE2
.1a5b	20 7e 1a	jsr $1a7e			jsr 	BresenhamDXGEE2
.1a5e					_BINoDXE2:
.1a5e	60		rts				rts
.1a5f					BresenhamE2GEDY:
.1a5f	18		clc				clc
.1a60	ad f2 0b	lda $0bf2			lda 	gError
.1a63	6d f8 0b	adc $0bf8			adc 	gdy
.1a66	8d f2 0b	sta $0bf2			sta 	gError
.1a69	ad f3 0b	lda $0bf3			lda 	gError+1
.1a6c	6d f9 0b	adc $0bf9			adc 	gdy+1
.1a6f	8d f3 0b	sta $0bf3			sta 	gError+1
.1a72	ee ea 0b	inc $0bea			inc 	gX1
.1a75	d0 03		bne $1a7a			bne 	_BE2Skip
.1a77	ee eb 0b	inc $0beb			inc 	gX1+1
.1a7a					_BE2Skip:
.1a7a	20 c6 1c	jsr $1cc6			jsr 	gdMvRight
.1a7d	60		rts				rts
.1a7e					BresenhamDXGEE2:
.1a7e	18		clc				clc
.1a7f	ad f2 0b	lda $0bf2			lda 	gError
.1a82	6d f6 0b	adc $0bf6			adc 	gdx
.1a85	8d f2 0b	sta $0bf2			sta 	gError
.1a88	ad f3 0b	lda $0bf3			lda 	gError+1
.1a8b	6d f7 0b	adc $0bf7			adc 	gdx+1
.1a8e	8d f3 0b	sta $0bf3			sta 	gError+1
.1a91	ad 05 0c	lda $0c05			lda 	gdySign
.1a94	10 0c		bpl $1aa2			bpl 	_BEDXInvertY
.1a96	ee ec 0b	inc $0bec			inc 	gY1
.1a99	d0 03		bne $1a9e			bne 	_BEDXSkip
.1a9b	ee ed 0b	inc $0bed			inc 	gY1+1
.1a9e					_BEDXSkip:
.1a9e	20 01 1d	jsr $1d01			jsr 	gdMvDown
.1aa1	60		rts				rts
.1aa2					_BEDXInvertY:
.1aa2	ad ec 0b	lda $0bec			lda 	gY1
.1aa5	d0 03		bne $1aaa			bne 	_BEDXSkip2
.1aa7	ce ed 0b	dec $0bed			dec 	gY1+1
.1aaa					_BEDXSkip2:
.1aaa	ce ec 0b	dec $0bec			dec 	gY1
.1aad	20 dc 1c	jsr $1cdc			jsr 	gdMvUp
.1ab0	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/graphics/plot.asm

.1ab1					Command_Plot:
.1ab1	a9 b9		lda #$b9			lda 	#PlotHandler & $FF
.1ab3	a2 1a		ldx #$1a			ldx 	#PlotHandler >> 8
.1ab5	20 d3 18	jsr $18d3			jsr 	GHandler
.1ab8	60		rts				rts
.1ab9					PlotHandler:
.1ab9	a0 04		ldy #$04			ldy 	#gX2-gX1
.1abb	20 4b 1c	jsr $1c4b			jsr 	SetupXY 					; set up X1,Y1 to draw.
.1abe	b0 03		bcs $1ac3			bcs 	_PHExit 					; off screen, return with CS.
.1ac0	20 65 1d	jsr $1d65			jsr 	gdPlotInk 					; pixel in Ink.
.1ac3	60		rts		_PHExit:rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/graphics/rectframe.asm

.0c06					frameFlag:
>0c06							.fill 	1
.1ac4					Command_Rect:
.1ac4	a9 d8		lda #$d8			lda 	#RectHandler & $FF
.1ac6	a2 1a		ldx #$1a			ldx 	#RectHandler >> 8
.1ac8	20 d3 18	jsr $18d3			jsr 	GHandler
.1acb	60		rts				rts
.1acc					Command_Frame:
.1acc	a9 d4		lda #$d4			lda 	#FrameHandler & $FF
.1ace	a2 1a		ldx #$1a			ldx 	#FrameHandler >> 8
.1ad0	20 d3 18	jsr $18d3			jsr 	GHandler
.1ad3	60		rts				rts
.1ad4					FrameHandler:
.1ad4	a9 01		lda #$01			lda 	#1
.1ad6	d0 02		bne $1ada			bne 	RectHandler+2
.1ad8					RectHandler:
.1ad8	a9 00		lda #$00			lda 	#0
.1ada	8d 06 0c	sta $0c06			sta 	frameFlag
.1add	20 85 1c	jsr $1c85			jsr 	BoxSort 					; sort so topleft/bottom right
.1ae0	20 09 1b	jsr $1b09			jsr 	DrawBoxPart 				; solid first line
.1ae3					_FHLoop:
.1ae3	a2 02		ldx #$02			ldx 	#gY1-gX1 					; check Y1 = Y2
.1ae5	a0 06		ldy #$06			ldy 	#gY2-gX1
.1ae7	20 61 1c	jsr $1c61			jsr 	CompareCoords
.1aea	b0 19		bcs $1b05			bcs 	_FHLastLine 				; Y1 >= Y2 then end.
.1aec	ad 06 0c	lda $0c06			lda 	frameFlag 					; identify solid or frame ?
.1aef	f0 06		beq $1af7			beq 	_FHIsSolidRect
.1af1	20 22 1b	jsr $1b22			jsr 	DrawBoxEnds
.1af4	4c fa 1a	jmp $1afa			jmp 	_FHNext
.1af7					_FHIsSolidRect:
.1af7	20 09 1b	jsr $1b09			jsr 	DrawBoxPart
.1afa					_FHNext:
.1afa	ee ec 0b	inc $0bec			inc 	gY1 						; bump Y1 and loop back.
.1afd	d0 e4		bne $1ae3			bne 	_FHLoop
.1aff	ee ed 0b	inc $0bed			inc 	gY1+1
.1b02	4c e3 1a	jmp $1ae3			jmp 	_FHLoop
.1b05					_FHLastLine:
.1b05	20 09 1b	jsr $1b09			jsr 	DrawBoxPart 				; solid last line whatever
.1b08					_FHExit:
.1b08	60		rts				rts
.1b09					DrawBoxPart:
.1b09	a0 00		ldy #$00			ldy 	#gX1-gX1
.1b0b	20 4b 1c	jsr $1c4b			jsr 	SetupXY 					; set up X1,Y1 to draw.
.1b0e	38		sec				sec 								; calculate line length => temp0
.1b0f	ad ee 0b	lda $0bee			lda 	gX2
.1b12	ed ea 0b	sbc $0bea			sbc 	gX1
.1b15	48		pha				pha
.1b16	ad ef 0b	lda $0bef			lda 	gX2+1
.1b19	ed eb 0b	sbc $0beb			sbc 	gx1+1
.1b1c	aa		tax				tax
.1b1d	68		pla				pla 								; line length in XA.
.1b1e	20 3a 1b	jsr $1b3a			jsr 	DrawHorizontalLine
.1b21	60		rts				rts
.1b22					DrawBoxEnds:
.1b22	a0 00		ldy #$00			ldy 	#gX1-gX1
.1b24	20 4b 1c	jsr $1c4b			jsr 	SetupXY 					; set up X1,Y1 to draw.
.1b27	20 65 1d	jsr $1d65			jsr 	gdPlotInk 					; LH end.
.1b2a	ad ee 0b	lda $0bee			lda 	gX2 						; set position to X2,Y1
.1b2d	ae ef 0b	ldx $0bef			ldx 	gX2+1
.1b30	20 1a 1e	jsr $1e1a			jsr 	gdSetX
.1b33	20 23 1d	jsr $1d23			jsr		gdSetDrawPosition 			; update position.
.1b36	20 65 1d	jsr $1d65			jsr 	gdPlotInk 					; RH end.
.1b39	60		rts				rts
.1b3a					DrawHorizontalLine:
.1b3a	86 32		stx $32				stx 	tempShort
.1b3c	aa		tax				tax
.1b3d	a4 32		ldy $32				ldy 	tempShort
.1b3f	ad fc 0b	lda $0bfc			lda 	gdInk
.1b42	4c 28 1e	jmp $1e28			jmp 	gdOptHorizontalWriter

;******  Return to file: extension/extension.asm


;******  Processing file: extension/graphics/renderer.asm

.0c07					RenderFunction:
>0c07							.fill 	2
.0c09					RenderWidth:
>0c09							.fill 	1
.0c0a					RenderHeight:
>0c0a							.fill 	1
.0c0b					RenderType:
>0c0b							.fill 	1
.1b45					ImageRenderer:
.1b45	8e 08 0c	stx $0c08			stx 	RenderFunction+1
.1b48	8d 07 0c	sta $0c07			sta 	RenderFunction
.1b4b	a2 ff		ldx #$ff			ldx 	#255 						; get information.
.1b4d	20 31 1c	jsr $1c31			jsr 	CallRenderFunction
.1b50	8d 0b 0c	sta $0c0b			sta 	RenderType 					; and save it.
.1b53	8e 09 0c	stx $0c09			stx 	RenderWidth
.1b56	8c 0a 0c	sty $0c0a			sty 	RenderHeight
.1b59	8a		txa				txa 								; check X coordinate
.1b5a	a2 00		ldx #$00			ldx 	#0 							; offset to check position/limit.
.1b5c	20 f8 1b	jsr $1bf8			jsr 	RenderCheckRange
.1b5f	ad 0a 0c	lda $0c0a			lda 	RenderHeight 				; check Y coordinate
.1b62	a2 02		ldx #$02			ldx 	#2
.1b64	20 f8 1b	jsr $1bf8			jsr 	RenderCheckRange
.1b67	a0 00		ldy #$00			ldy 	#0 							; Y is the current line #
.1b69					_IRLoop1:
.1b69	ae fe 0b	ldx $0bfe			ldx 	gdSize 						; number of times to do the row.
.1b6c					_IRLoop2:
.1b6c	20 79 1b	jsr $1b79			jsr 	RenderDrawRow 				; draw one row.
.1b6f	ca		dex				dex 								; scale # times.
.1b70	d0 fa		bne $1b6c			bne 	_IRLoop2
.1b72	c8		iny				iny 								; next vertical row
.1b73	cc 0a 0c	cpy $0c0a			cpy 	RenderHeight 				; done the lot ?
.1b76	d0 f1		bne $1b69			bne 	_IRLoop1
.1b78	60		rts				rts
.1b79					RenderDrawRow:
.1b79	8a		txa				txa
.1b7a	48		pha				pha
.1b7b	98		tya				tya
.1b7c	48		pha				pha
.1b7d	a0 04		ldy #$04			ldy 	#gX2-gX1 					; set the position at (x,y)
.1b7f	20 4b 1c	jsr $1c4b			jsr 	SetupXY
.1b82	68		pla				pla
.1b83	a8		tay				tay
.1b84	a2 00		ldx #$00			ldx 	#0 							; X is the current pixel.
.1b86					_RDRLoop1:
.1b86	20 9a 1b	jsr $1b9a			jsr 	RenderDrawPixelSet 			; draw a block of pixels of the correct size.
.1b89	e8		inx				inx
.1b8a	ec 09 0c	cpx $0c09			cpx 	RenderWidth 				; until done the whole lot.
.1b8d	d0 f7		bne $1b86			bne 	_RDRLoop1
.1b8f	ee f0 0b	inc $0bf0			inc 	gY2 						; next line down
.1b92	d0 03		bne $1b97			bne 	_RDRNoCarry
.1b94	ee f1 0b	inc $0bf1			inc 	gY2+1
.1b97					_RDRNoCarry:
.1b97	68		pla				pla
.1b98	aa		tax				tax
.1b99	60		rts				rts
.1b9a					RenderDrawPixelSet:
.1b9a	8a		txa				txa
.1b9b	48		pha				pha
.1b9c	98		tya				tya
.1b9d	48		pha				pha
.1b9e	20 d4 1b	jsr $1bd4			jsr 	RenderFlipXY 				; flip positions as required.
.1ba1	20 bb 1b	jsr $1bbb			jsr 	RenderGetInk				; get colour to draw with.
.1ba4	ae fe 0b	ldx $0bfe			ldx 	gdSize 						; X counts the size.
.1ba7					_RDPSLoop:
.1ba7	c9 ff		cmp #$ff			cmp 	#255 						; don't draw if $FF
.1ba9	f0 03		beq $1bae			beq 	_RDPSNoDraw
.1bab	20 68 1d	jsr $1d68			jsr 	gdPlotA 					; draw A otherwise
.1bae					_RDPSNoDraw:
.1bae	48		pha				pha 								; move right
.1baf	20 c6 1c	jsr $1cc6			jsr 	gdMvRight
.1bb2	68		pla				pla
.1bb3	ca		dex				dex
.1bb4	d0 f1		bne $1ba7			bne 	_RDPSLoop 					; do it size times.
.1bb6	68		pla				pla
.1bb7	a8		tay				tay
.1bb8	68		pla				pla
.1bb9	aa		tax				tax
.1bba	60		rts				rts
.1bbb					RenderGetInk:
.1bbb	ad 0b 0c	lda $0c0b			lda 	RenderType 					; type, if 0 it's a bitmap
.1bbe	f0 04		beq $1bc4			beq 	_RGIBitmap
.1bc0	20 31 1c	jsr $1c31			jsr 	CallRenderFunction 			; ask the rendering function.
.1bc3	60		rts				rts
.1bc4					_RGIBitmap:
.1bc4	20 31 1c	jsr $1c31			jsr 	CallRenderFunction 			; ask the rendering function.
.1bc7	c9 00		cmp #$00			cmp 	#0
.1bc9	f0 04		beq $1bcf			beq 	_RGIUsePaper
.1bcb	ad fc 0b	lda $0bfc			lda 	gdInk
.1bce	60		rts				rts
.1bcf					_RGIUsePaper:
.1bcf	ad fd 0b	lda $0bfd			lda 	gdPaper
.1bd2	60		rts				rts
>1bd3	db						.byte 	$DB
.1bd4					RenderFlipXY:
.1bd4	ad 00 0c	lda $0c00			lda 	gdFlip 						; check any flip at all
.1bd7	29 03		and #$03			and 	#3
.1bd9	f0 1c		beq $1bf7			beq 	_RFExit
.1bdb	4a		lsr a				lsr 	a 							; bit 0 in carry flag
.1bdc	90 09		bcc $1be7			bcc 	_RFNoHFlip
.1bde	ad 09 0c	lda $0c09			lda 	RenderWidth 				; X Flip
.1be1	86 32		stx $32				stx 	tempShort
.1be3	18		clc				clc
.1be4	e5 32		sbc $32				sbc 	tempShort
.1be6	aa		tax				tax
.1be7					_RFNoHFlip:
.1be7	ad 00 0c	lda $0c00			lda 	gdFlip
.1bea	29 02		and #$02			and 	#2 							; bit 1 check
.1bec	f0 09		beq $1bf7			beq 	_RFExit
.1bee	ad 0a 0c	lda $0c0a			lda 	RenderHeight 				; Y Flip
.1bf1	84 32		sty $32				sty 	tempShort
.1bf3	18		clc				clc
.1bf4	e5 32		sbc $32				sbc 	tempShort
.1bf6	a8		tay				tay
.1bf7					_RFExit:
.1bf7	60		rts				rts
.1bf8					RenderCheckRange:
.1bf8	85 2b		sta $2b				sta 	temp0+1 					; save multiplier => temp0+1
.1bfa	ac fe 0b	ldy $0bfe			ldy 	gdSize 						; multiplicand (size) => temp0, must be non zero
.1bfd	84 2a		sty $2a				sty 	temp0
.1bff	f0 2b		beq $1c2c			beq 	_RCRValue
.1c01	a9 00		lda #$00			lda 	#0 							; total
.1c03					_RCRMultiply:
.1c03	46 2a		lsr $2a				lsr 	temp0 						; shift LSB size into carry
.1c05	90 05		bcc $1c0c			bcc 	_RCRNoAdd 					; not adding this time.
.1c07	18		clc				clc
.1c08	65 2b		adc $2b				adc 	temp0+1 					; add the size.
.1c0a	b0 20		bcs $1c2c			bcs 	_RCRValue 					; overflow
.1c0c					_RCRNoAdd:
.1c0c	06 2b		asl $2b				asl 	temp0+1 					; double multiplier
.1c0e	a4 2a		ldy $2a				ldy 	temp0 						; until adder is zero
.1c10	d0 f1		bne $1c03			bne 	_RCRMultiply
.1c12	18		clc				clc 								; add to x2 or y2, store in temp0
.1c13	7d ee 0b	adc $0bee,x			adc 	gX2,x 						; this is the Right/Bottom coordinate of the image
.1c16	85 2a		sta $2a				sta 	temp0
.1c18	bd ef 0b	lda $0bef,x			lda 	gX2+1,x
.1c1b	69 00		adc #$00			adc 	#0
.1c1d	85 2b		sta $2b				sta 	temp0+1
.1c1f	a5 2a		lda $2a				lda 	temp0 						; check right vs edge of screen.
.1c21	dd 01 0c	cmp $0c01,x			cmp 	gdXLimit,x
.1c24	a5 2b		lda $2b				lda 	temp0+1
.1c26	fd 02 0c	sbc $0c02,x			sbc 	gdXLimit+1,x
.1c29	b0 01		bcs $1c2c			bcs 	_RCRValue 					; does not fit, so don't draw.
.1c2b	60		rts				rts
.1c2c					_RCRValue:
.1c2c	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.1c2e	20 18 15	jsr $1518		jsr	errorHandler
.1c31					CallRenderFunction:
.1c31	6c 07 0c	jmp ($0c07)			jmp 	(RenderFunction)
.1c34					TestImageAccess:
.1c34	e0 ff		cpx #$ff			cpx 	#255 						; get information
.1c36	f0 0c		beq $1c44			beq 	_TIAGetInfo
.1c38	8a		txa				txa 								; fake up a pattern using the X/Y coordinates.
.1c39	4a		lsr a				lsr 	a
.1c3a	4a		lsr a				lsr 	a
.1c3b	85 32		sta $32				sta 	tempShort
.1c3d	98		tya				tya
.1c3e	4a		lsr a				lsr 	a
.1c3f	4a		lsr a				lsr 	a
.1c40	18		clc				clc
.1c41	65 32		adc $32				adc 	tempShort
.1c43	60		rts				rts
.1c44					_TIAGetInfo:
.1c44	a9 01		lda #$01			lda 	#1 							; image (1) bitmap (0)
.1c46	a2 10		ldx #$10			ldx 	#16 						; pixel width
.1c48	a0 20		ldy #$20			ldy 	#32							; pixel height
.1c4a	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/graphics/utils.asm

.1c4b					SetupXY:
.1c4b	b9 ea 0b	lda $0bea,y			lda 	gX1,y
.1c4e	be eb 0b	ldx $0beb,y			ldx 	gX1+1,y
.1c51	20 1a 1e	jsr $1e1a			jsr 	gdSetX
.1c54	b9 ec 0b	lda $0bec,y			lda 	gY1,y
.1c57	be ed 0b	ldx $0bed,y			ldx 	gY1+1,y
.1c5a	20 21 1e	jsr $1e21			jsr 	gdSetY
.1c5d	20 23 1d	jsr $1d23			jsr 	gdSetDrawPosition
.1c60	60		rts				rts
.1c61					CompareCoords:
.1c61	bd ea 0b	lda $0bea,x			lda 	gX1,x
.1c64	d9 ea 0b	cmp $0bea,y			cmp 	gX1,y
.1c67	bd eb 0b	lda $0beb,x			lda 	gX1+1,x
.1c6a	f9 eb 0b	sbc $0beb,y			sbc 	gX1+1,y
.1c6d	60		rts				rts
.1c6e					CompareCoordsSigned:
.1c6e	20 61 1c	jsr $1c61			jsr 	CompareCoords
.1c71	50 02		bvc $1c75			bvc 	_CCSExit
.1c73	49 80		eor #$80			eor 	#$80
.1c75					_CCSExit:
.1c75	60		rts				rts
.1c76					CompareCoordsEq:
.1c76	bd ea 0b	lda $0bea,x			lda 	gX1,x
.1c79	d9 ea 0b	cmp $0bea,y			cmp 	gX1,y
.1c7c	d0 06		bne $1c84			bne 	_CCEExit
.1c7e	bd eb 0b	lda $0beb,x			lda 	gX1+1,x
.1c81	d9 eb 0b	cmp $0beb,y			cmp 	gX1+1,y
.1c84					_CCEExit:
.1c84	60		rts				rts
.1c85					BoxSort:
.1c85	a2 00		ldx #$00			ldx 	#gx1-gx1
.1c87	a0 04		ldy #$04			ldy 	#gx2-gx1
.1c89	20 9a 1c	jsr $1c9a			jsr 	GCompareCoords
.1c8c	20 a7 1c	jsr $1ca7			jsr 	GSortMinMaxCoords
.1c8f	a2 02		ldx #$02			ldx 	#gy1-gx1
.1c91	a0 06		ldy #$06			ldy 	#gy2-gx1
.1c93	20 9a 1c	jsr $1c9a			jsr 	GCompareCoords
.1c96	20 a7 1c	jsr $1ca7			jsr 	GSortMinMaxCoords
.1c99	60		rts				rts
.1c9a					GCompareCoords:
.1c9a	bd ea 0b	lda $0bea,x			lda 	gx1,x
.1c9d	d9 ea 0b	cmp $0bea,y			cmp 	gx1,y
.1ca0	bd eb 0b	lda $0beb,x			lda 	gx1+1,x
.1ca3	f9 eb 0b	sbc $0beb,y			sbc 	gx1+1,y
.1ca6	60		rts				rts
.1ca7					GSortMinMaxCoords:
.1ca7	90 1c		bcc $1cc5			bcc 	GSMMCExit
.1ca9					GSwapCoords:
.1ca9	bd ea 0b	lda $0bea,x			lda 	gx1,x
.1cac	48		pha				pha
.1cad	b9 ea 0b	lda $0bea,y			lda 	gx1,y
.1cb0	9d ea 0b	sta $0bea,x			sta 	gx1,x
.1cb3	68		pla				pla
.1cb4	99 ea 0b	sta $0bea,y			sta 	gx1,y
.1cb7	bd eb 0b	lda $0beb,x			lda 	gx1+1,x
.1cba	48		pha				pha
.1cbb	b9 eb 0b	lda $0beb,y			lda 	gx1+1,y
.1cbe	9d eb 0b	sta $0beb,x			sta 	gx1+1,x
.1cc1	68		pla				pla
.1cc2	99 eb 0b	sta $0beb,y			sta 	gx1+1,y
.1cc5					GSMMCExit:
.1cc5	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/driver/coords.asm

.1cc6					gdMvRight:
.1cc6	ee 20 9f	inc $9f20			inc 	$9F20 						; bump $9F20
.1cc9	d0 08		bne $1cd3			bne 	_gdMR0
.1ccb	ee 21 9f	inc $9f21			inc 	$9F21
.1cce	d0 03		bne $1cd3			bne 	_gdMR0
.1cd0	ee 22 9f	inc $9f22			inc 	$9F22
.1cd3					_gdMR0:
.1cd3	ee 10 0c	inc $0c10			inc 	gdXPos
.1cd6	d0 03		bne $1cdb			bne 	_gdMR1
.1cd8	ee 11 0c	inc $0c11			inc 	gdXPos+1
.1cdb					_gdMR1:
.1cdb	60		rts				rts
.1cdc					gdMvUp:
.1cdc	ad 12 0c	lda $0c12			lda 	gdYPos 						; decrement Y Pos
.1cdf	d0 03		bne $1ce4			bne 	_gdMU1
.1ce1	ce 13 0c	dec $0c13			dec 	gdYPos+1
.1ce4	ce 12 0c	dec $0c12	_gdMU1:	dec 	gdYPos
.1ce7	38		sec				sec 								; adjust position by -320
.1ce8	ad 20 9f	lda $9f20			lda 	$9F20
.1ceb	e9 40		sbc #$40			sbc 	#64
.1ced	8d 20 9f	sta $9f20			sta 	$9F20
.1cf0	ad 21 9f	lda $9f21			lda 	$9F21
.1cf3	e9 01		sbc #$01			sbc 	#1
.1cf5	8d 21 9f	sta $9f21			sta 	$9F21
.1cf8	ad 22 9f	lda $9f22			lda 	$9F22
.1cfb	e9 00		sbc #$00			sbc 	#0
.1cfd	8d 22 9f	sta $9f22			sta 	$9F22
.1d00	60		rts				rts
.1d01					gdMvDown:
.1d01	ee 12 0c	inc $0c12			inc 	gdYPos 						; decrement Y Pos
.1d04	d0 03		bne $1d09			bne 	_gdMU1
.1d06	ee 13 0c	inc $0c13			inc 	gdYPos+1
.1d09					_gdMU1:
.1d09	18		clc				clc 								; adjust position by -320
.1d0a	ad 20 9f	lda $9f20			lda 	$9F20
.1d0d	69 40		adc #$40			adc 	#64
.1d0f	8d 20 9f	sta $9f20			sta 	$9F20
.1d12	ad 21 9f	lda $9f21			lda 	$9F21
.1d15	69 01		adc #$01			adc 	#1
.1d17	8d 21 9f	sta $9f21			sta 	$9F21
.1d1a	ad 22 9f	lda $9f22			lda 	$9F22
.1d1d	69 00		adc #$00			adc 	#0
.1d1f	8d 22 9f	sta $9f22			sta 	$9F22
.1d22	60		rts				rts
.1d23					gdSetDrawPosition:
.1d23	a9 00		lda #$00			lda 	#0 							; temp0 is LSB of result start as 256 x Y
.1d25	85 2a		sta $2a				sta 	temp0
.1d27	ad 12 0c	lda $0c12			lda 	gdYPos
.1d2a	85 2b		sta $2b				sta 	temp0+1
.1d2c	46 2b		lsr $2b				lsr 	temp0+1 					; / 4 so temp0 is YC x 64
.1d2e	66 2a		ror $2a				ror 	temp0
.1d30	46 2b		lsr $2b				lsr 	temp0+1
.1d32	66 2a		ror $2a				ror 	temp0
.1d34	ad 12 0c	lda $0c12			lda 	gdYPos 						; add 256 x Y => 320 * Y < 64k
.1d37	18		clc				clc
.1d38	65 2b		adc $2b				adc 	temp0+1
.1d3a	85 2b		sta $2b				sta 	temp0+1 					; temp0 = 320 x Y now add X => pixeloffset
.1d3c	18		clc				clc
.1d3d	a5 2a		lda $2a				lda 	temp0
.1d3f	6d 10 0c	adc $0c10			adc 	gdXPos
.1d42	85 2a		sta $2a				sta 	temp0
.1d44	a5 2b		lda $2b				lda 	temp0+1
.1d46	6d 11 0c	adc $0c11			adc 	gdXPos+1
.1d49	85 2b		sta $2b				sta 	temp0+1
.1d4b	18		clc				clc
.1d4c	ad 0d 0c	lda $0c0d			lda 	gdBitmapAddress
.1d4f	65 2a		adc $2a				adc 	temp0
.1d51	8d 20 9f	sta $9f20			sta 	$9F20
.1d54	ad 0e 0c	lda $0c0e			lda 	gdBitmapAddress+1
.1d57	65 2b		adc $2b				adc 	temp0+1
.1d59	8d 21 9f	sta $9f21			sta 	$9F21
.1d5c	ad 0f 0c	lda $0c0f			lda 	gdBitmapAddress+2
.1d5f	69 00		adc #$00			adc 	#0
.1d61	8d 22 9f	sta $9f22			sta 	$9F22
.1d64	60		rts				rts
.1d65					gdPlotInk:
.1d65	ad fc 0b	lda $0bfc			lda 	gdInk
.1d68					gdPlotA:
.1d68	8d 23 9f	sta $9f23			sta 	$9F23
.1d6b	60		rts				rts
.1d6c					gdPlotPaper:
.1d6c	ad fd 0b	lda $0bfd			lda 	gdPaper
.1d6f	c9 ff		cmp #$ff			cmp 	#$FF
.1d71	f0 03		beq $1d76			beq 	_gdPPSkip
.1d73	8d 23 9f	sta $9f23			sta 	$9F23
.1d76					_gdPPSkip:
.1d76	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/driver/driver.asm

.0c0c					gdEnabled:
>0c0c							.fill 	1
.0c0d					gdBitmapAddress:
>0c0d							.fill 	3
.0c10					gdXPos:
>0c10							.fill 	2
.0c12					gdYPos:
>0c12							.fill 	2
.1d77					gdModeChanged:
.1d77	8a		txa				txa
.1d78	48		pha				pha
.1d79	98		tya				tya
.1d7a	48		pha				pha
.1d7b	a9 00		lda #$00			lda 	#0 							; zero the enabled flag.
.1d7d	8d 0c 0c	sta $0c0c			sta 	gdEnabled
.1d80	ad 2a 9f	lda $9f2a			lda 	$9F2A 						; requires $40 for H/V Scale
.1d83	c9 40		cmp #$40			cmp 	#$40
.1d85	d0 1f		bne $1da6			bne 	_gdExit
.1d87	ad 2b 9f	lda $9f2b			lda 	$9F2B
.1d8a	c9 40		cmp #$40			cmp 	#$40
.1d8c	d0 18		bne $1da6			bne 	_gdExit
.1d8e	ad 29 9f	lda $9f29			lda 	$9F29 						; read DC_Video, see which layers are enabled.
.1d91	0a		asl a				asl 	a 							;
.1d92	0a		asl a				asl 	a 							; bit 7 now set if layer 1 enabled.
.1d93	10 09		bpl $1d9e			bpl 	_gdNotLayer1
.1d95	48		pha				pha 								; save A
.1d96	a2 07		ldx #$07			ldx 	#7 							; check offset 7 (e.g. start at $9F34)
.1d98	20 ae 1d	jsr $1dae			jsr 	gdCheckBitmap 				; go see if this is a bitmap
.1d9b	68		pla				pla 								; restore A
.1d9c	b0 08		bcs $1da6			bcs 	_gdExit 					; if successful then exit
.1d9e					_gdNotLayer1:
.1d9e	0a		asl a				asl 	a 							; bit 7 now set if layer 0 enabled.
.1d9f	10 05		bpl $1da6			bpl 	_gdExit 					; if not enabled, exit
.1da1	a2 00		ldx #$00			ldx 	#0 							; check offset 0 (e.g. start at $9F2D)
.1da3	20 ae 1d	jsr $1dae			jsr 	gdCheckBitmap 				; go see if this is a bitmap
.1da6					_gdExit:
.1da6	20 e2 1d	jsr $1de2			jsr 	gdClearGraphics 			; clear graphics display.
.1da9	68		pla				pla
.1daa	a8		tay				tay
.1dab	68		pla				pla
.1dac	aa		tax				tax
.1dad	60		rts				rts
.1dae					gdCheckBitmap:
.1dae	bd 2d 9f	lda $9f2d,x			lda 	$9F2D,x 					; look at bitmap bit.
.1db1	c9 07		cmp #$07			cmp 	#7 							; must be zero map size, bitmap and 8bpp
.1db3	d0 14		bne $1dc9			bne 	_gdCBFail
.1db5	ee 0c 0c	inc $0c0c			inc 	gdEnabled 					; set the enabled flag to non zero.
.1db8	bd 2f 9f	lda $9f2f,x			lda 	$9F2F,x 					; this is the bitmap address / 2
.1dbb	0a		asl a				asl 	a
.1dbc	8d 0e 0c	sta $0c0e			sta 	gdBitmapAddress+1
.1dbf	69 00		adc #$00			adc 	#$00 						; set to no move, updated manually.
.1dc1	8d 0f 0c	sta $0c0f			sta 	gdBitmapAddress+2
.1dc4	a9 00		lda #$00			lda 	#$00
.1dc6	8d 0d 0c	sta $0c0d			sta 	gdBitmapAddress 			; this is a 17 bit address.
.1dc9					_gdCBFail:
.1dc9	18		clc				clc
.1dca	60		rts				rts
.1dcb					CommandClg:
.1dcb	b1 28		lda ($28),y			lda 	(codePtr),y
.1dcd	c9 e2		cmp #$e2			cmp 	#TKW_PAPER
.1dcf	d0 0d		bne $1dde			bne 	_CCLClear
.1dd1	c8		iny				iny
.1dd2	a9 00		lda #$00			lda 	#0
.1dd4	a2 0c		ldx #$0c		ldx	#12
.1dd6	20 e6 3c	jsr $3ce6		jsr	mainHandler
.1dd9	a5 98		lda $98				lda 	esInt0
.1ddb	8d fd 0b	sta $0bfd			sta 	gdPaper
.1dde					_CCLClear:
.1dde	20 e2 1d	jsr $1de2			jsr 	gdClearGraphics
.1de1	60		rts				rts
.1de2					gdClearGraphics:
.1de2	8a		txa				txa
.1de3	48		pha				pha
.1de4	98		tya				tya
.1de5	48		pha				pha
.1de6	ad 0c 0c	lda $0c0c			lda 	gdEnabled 					; screen enabled
.1de9	f0 2a		beq $1e15			beq 	_gdCGExit
.1deb	a9 00		lda #$00			lda 	#0 							; home cursor
.1ded	aa		tax				tax
.1dee	20 1a 1e	jsr $1e1a			jsr 	gdSetX
.1df1	20 21 1e	jsr $1e21			jsr 	gdSetY
.1df4	20 23 1d	jsr $1d23			jsr 	gdSetDrawPosition 			; set the draw position.
.1df7	a9 40		lda #$40			lda 	#(320) & $FF
.1df9	8d 01 0c	sta $0c01			sta 	gdXLimit
.1dfc	a9 01		lda #$01			lda 	#(320) >> 8
.1dfe	8d 02 0c	sta $0c02			sta 	1+(gdXLimit)
.1e01	a9 c8		lda #$c8			lda 	#(200) & $FF
.1e03	8d 03 0c	sta $0c03			sta 	gdYLimit
.1e06	a9 00		lda #$00			lda 	#(200) >> 8
.1e08	8d 04 0c	sta $0c04			sta 	1+(gdYLimit)
.1e0b	a0 fa		ldy #$fa			ldy 	#$FA						; 320 x 200 pixels = $FA00
.1e0d	a2 00		ldx #$00			ldx 	#0
.1e0f	ad fd 0b	lda $0bfd			lda 	gdPaper
.1e12	20 28 1e	jsr $1e28			jsr 	gdOptHorizontalWriter
.1e15					_gdCGExit:
.1e15	68		pla				pla
.1e16	a8		tay				tay
.1e17	68		pla				pla
.1e18	aa		tax				tax
.1e19	60		rts				rts
.1e1a					gdSetX:
.1e1a	8d 10 0c	sta $0c10			sta 	gdXPos
.1e1d	8e 11 0c	stx $0c11			stx 	gdXPos+1
.1e20	60		rts				rts
.1e21					gdSetY:
.1e21	8d 12 0c	sta $0c12			sta 	gdYPos
.1e24	8e 13 0c	stx $0c13			stx 	gdYPos+1
.1e27	60		rts				rts
.1e28					gdOptHorizontalWriter:
.1e28	48		pha				pha
.1e29	ad 22 9f	lda $9f22			lda 	$9F22 						; make it autoincrement.
.1e2c	09 10		ora #$10			ora 	#$10
.1e2e	8d 22 9f	sta $9f22			sta 	$9F22
.1e31	68		pla				pla
.1e32					_gdOLoop:
.1e32	8d 23 9f	sta $9f23			sta 	$9F23
.1e35	e0 00		cpx #$00			cpx 	#0
.1e37	d0 05		bne $1e3e			bne 	_gdNoBorrow
.1e39	c0 00		cpy #$00			cpy 	#0
.1e3b	f0 05		beq $1e42			beq 	_gdExit
.1e3d	88		dey				dey
.1e3e					_gdNoBorrow:
.1e3e	ca		dex				dex
.1e3f	4c 32 1e	jmp $1e32			jmp 	_gdOLoop
.1e42					_gdExit:
.1e42	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/miscellany/clock.asm

.1e43					Unary_Clock:
.1e43	a2 0c		ldx #$0c		ldx	#12
.1e45	20 e6 3c	jsr $3ce6		jsr	mainHandler
.1e48	48		pha				pha 								; save stack pos
.1e49	a2 04		ldx #$04		ldx	#4
.1e4b	20 e6 3c	jsr $3ce6		jsr	mainHandler
.1e4e	98		tya				tya
.1e4f	48		pha				pha
.1e50	20 50 ff	jsr $ff50			jsr 	$FF50
.1e53	68		pla				pla
.1e54	a8		tay				tay
.1e55	68		pla				pla 								; restore, repush, put into X to read offset
.1e56	48		pha				pha
.1e57	aa		tax				tax
.1e58	b5 98		lda $98,x			lda 	esInt0,x 					; must be 0-5
.1e5a	c9 06		cmp #$06			cmp 	#6
.1e5c	b0 0d		bcs $1e6b			bcs 	_UCValue
.1e5e	aa		tax				tax 								; index in X and read RTC.
.1e5f	b5 02		lda $02,x			lda 	2,x
.1e61	85 32		sta $32				sta 	tempshort
.1e63	68		pla				pla 								; restore number stack index.
.1e64	aa		tax				tax
.1e65	a5 32		lda $32				lda 	tempShort
.1e67	95 98		sta $98,x			sta 	esInt0,x 					; rest are set up.
.1e69	8a		txa				txa
.1e6a	60		rts				rts
.1e6b					_UCValue:
.1e6b	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.1e6d	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/miscellany/joystick.asm

.1e70					Unary_JoyX:
.1e70	38		sec				sec
.1e71	b0 01		bcs $1e74			bcs 	JoystickRead
.1e73					Unary_JoyY:
.1e73	18		clc				clc
.1e74					JoystickRead:
.1e74	48		pha				pha 								; save stack position
.1e75	08		php				php 								; save test flag.
.1e76	a2 04		ldx #$04		ldx	#4
.1e78	20 e6 3c	jsr $3ce6		jsr	mainHandler
.1e7b	20 d5 1e	jsr $1ed5			jsr 	ReadJoystick 				; read it.
.1e7e	28		plp				plp
.1e7f	b0 02		bcs $1e83			bcs 	_JRNoShift 					; if Y, shift right twice so accessing Y buttons
.1e81	4a		lsr a				lsr 	a
.1e82	4a		lsr a				lsr 	a
.1e83					_JRNoShift:
.1e83	29 03		and #$03			and 	#3 							; isolate the test bits.
.1e85	f0 0d		beq $1e94			beq 	JoyReturnA 					; if nothing pressed, return A.
.1e87	c9 03		cmp #$03			cmp 	#3
.1e89	f0 07		beq $1e92			beq 	JoyReturnFalse 				; could be both on a keyboard.
.1e8b	4a		lsr a				lsr 	a 							; bit 0 set, its +1
.1e8c	b0 16		bcs $1ea4			bcs 	JoyReturn1
.1e8e					JoyReturnTrue:
.1e8e	a9 ff		lda #$ff			lda 	#$FF
.1e90	d0 02		bne $1e94			bne 	JoyReturnA
.1e92					JoyReturnFalse:
.1e92	a9 00		lda #$00			lda 	#0
.1e94					JoyReturnA:
.1e94	85 32		sta $32				sta 	tempShort 					; return A
.1e96	68		pla				pla
.1e97	aa		tax				tax
.1e98	a5 32		lda $32				lda 	tempShort
.1e9a	95 98		sta $98,x			sta 	esInt0,x
.1e9c					JoyReturn13:
.1e9c	95 a0		sta $a0,x			sta 	esInt1,x
.1e9e	95 a8		sta $a8,x			sta 	esInt2,x
.1ea0	95 b0		sta $b0,x			sta 	esInt3,x
.1ea2	8a		txa				txa 								; return NSP in A
.1ea3	60		rts				rts
.1ea4					JoyReturn1:
.1ea4	68		pla				pla
.1ea5	aa		tax				tax
.1ea6	a9 01		lda #$01			lda 	#1
.1ea8	95 98		sta $98,x			sta 	esInt0,x
.1eaa	a9 00		lda #$00			lda 	#0
.1eac	f0 ee		beq $1e9c			beq 	JoyReturn13
.1eae					Unary_JButton:
.1eae	48		pha				pha 								; save X on stack, put in X
.1eaf	a2 0c		ldx #$0c		ldx	#12
.1eb1	20 e6 3c	jsr $3ce6		jsr	mainHandler
.1eb4	aa		tax				tax 								; get value to check, push on stack.
.1eb5	b5 98		lda $98,x			lda 	esInt0,x
.1eb7	c9 04		cmp #$04			cmp 	#4 							; check button 0-3
.1eb9	b0 15		bcs $1ed0			bcs 	_UJBadValue
.1ebb	69 05		adc #$05			adc 	#5 							; four more shifts to get the bit into carry.
.1ebd	48		pha				pha 								; save that shift count on the stack.
.1ebe	a2 04		ldx #$04		ldx	#4
.1ec0	20 e6 3c	jsr $3ce6		jsr	mainHandler
.1ec3	68		pla				pla
.1ec4	aa		tax				tax
.1ec5	20 d5 1e	jsr $1ed5			jsr 	ReadJoystick 				; joystick read
.1ec8					_UJShift:
.1ec8	4a		lsr a				lsr 	a
.1ec9	ca		dex				dex
.1eca	d0 fc		bne $1ec8			bne 	_UJShift
.1ecc	b0 c0		bcs $1e8e			bcs 	JoyReturnTrue
.1ece	90 c2		bcc $1e92			bcc 	JoyReturnFalse
.1ed0					_UJBadValue:
.1ed0	a2 28		ldx #$28			ldx 	#ErrorID_Hardware
.1ed2	20 18 15	jsr $1518		jsr	errorHandler
.1ed5					ReadJoystick:
.1ed5	8a		txa				txa
.1ed6	48		pha				pha
.1ed7	98		tya				tya
.1ed8	48		pha				pha
.1ed9	a9 00		lda #$00			lda 	#0
.1edb	20 56 ff	jsr $ff56			jsr 	$FF56
.1ede	c0 00		cpy #$00			cpy 	#0
.1ee0	d0 11		bne $1ef3			bne 	_RJError
.1ee2	c9 00		cmp #$00			cmp 	#0 							; bug, returns $00 initially
.1ee4	d0 02		bne $1ee8			bne 	_RJNoBug
.1ee6	a9 ff		lda #$ff			lda 	#$FF
.1ee8					_RJNoBug:
.1ee8	85 32		sta $32				sta 	tempShort
.1eea	68		pla				pla
.1eeb	a8		tay				tay
.1eec	68		pla				pla
.1eed	aa		tax				tax
.1eee	a5 32		lda $32				lda 	tempShort
.1ef0	49 ff		eor #$ff			eor 	#$FF 						; active 1 bit.
.1ef2	60		rts				rts
.1ef3					_RJError:
.1ef3	a2 28		ldx #$28			ldx 	#ErrorID_Hardware
.1ef5	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/sprites/collide.asm

.0c14					hitSprite1:
>0c14							.fill 	1 							; this won't work ... if you nest HIT() which
.0c15					hitSprite2:
>0c15							.fill 	1
.0c16					hitRange:
>0c16							.fill 	1
.1ef8					FunctionCollide:
.1ef8	48		pha				pha 								; save and put index into X
.1ef9	aa		tax				tax
.1efa	a9 00		lda #$00			lda 	#0 							; set hit range to default.
.1efc	8d 16 0c	sta $0c16			sta 	hitRange
.1eff	20 a4 1f	jsr $1fa4			jsr 	_FCGetSpriteID
.1f02	8d 14 0c	sta $0c14			sta 	hitSprite1
.1f05	8a		txa				txa
.1f06	48		pha				pha
.1f07	a2 02		ldx #$02		ldx	#2
.1f09	20 e6 3c	jsr $3ce6		jsr	mainHandler
.1f0c	68		pla				pla
.1f0d	aa		tax				tax
.1f0e	20 a4 1f	jsr $1fa4			jsr 	_FCGetSpriteID
.1f11	8d 15 0c	sta $0c15			sta 	hitSprite2
.1f14	b1 28		lda ($28),y			lda 	(codePtr),y 				; is there a third parameter
.1f16	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.1f18	f0 13		beq $1f2d			beq 	_FCParam2
.1f1a	8a		txa				txa
.1f1b	48		pha				pha
.1f1c	a2 02		ldx #$02		ldx	#2
.1f1e	20 e6 3c	jsr $3ce6		jsr	mainHandler
.1f21	68		pla				pla
.1f22	a2 0c		ldx #$0c		ldx	#12
.1f24	20 e6 3c	jsr $3ce6		jsr	mainHandler
.1f27	aa		tax				tax
.1f28	b5 98		lda $98,x			lda 	esInt0,x
.1f2a	8d 16 0c	sta $0c16			sta 	hitRange
.1f2d					_FCParam2:
.1f2d	a2 04		ldx #$04		ldx	#4
.1f2f	20 e6 3c	jsr $3ce6		jsr	mainHandler
.1f32	68		pla				pla 								; set X to point to the stack again.
.1f33	48		pha				pha
.1f34	aa		tax				tax
.1f35	98		tya				tya
.1f36	48		pha				pha
.1f37	18		clc				clc 								; do it with the horizontal values.
.1f38	20 5a 1f	jsr $1f5a			jsr 	_FCCheck
.1f3b	90 0a		bcc $1f47			bcc 	_FCFail
.1f3d	38		sec				sec 								; do it with the vertical values.
.1f3e	20 5a 1f	jsr $1f5a			jsr 	_FCCheck
.1f41	90 04		bcc $1f47			bcc 	_FCFail
.1f43	a9 ff		lda #$ff			lda 	#255 						; pass, return -1
.1f45	d0 02		bne $1f49			bne 	_FCReturnA
.1f47					_FCFail:
.1f47	a9 00		lda #$00			lda 	#0 							; return 0, it didn't work.
.1f49					_FCReturnA:
.1f49	85 32		sta $32				sta 	tempShort 					; put result in tempShort
.1f4b	68		pla				pla
.1f4c	a8		tay				tay
.1f4d	68		pla				pla 								; restore stack, return result and exit.
.1f4e	aa		tax				tax
.1f4f	a5 32		lda $32				lda 	tempShort
.1f51	95 98		sta $98,x			sta 	esInt0,x
.1f53	95 a0		sta $a0,x			sta 	esInt1,x
.1f55	95 a8		sta $a8,x			sta 	esInt2,x
.1f57	95 b0		sta $b0,x			sta 	esInt3,x
.1f59	60		rts				rts
.1f5a					_FCCheck:
.1f5a	08		php				php 								; save the H/V flag twice
.1f5b	08		php				php
.1f5c	ad 14 0c	lda $0c14			lda 	hitSprite1 					; select sprite 1 and read its location
.1f5f	20 e2 20	jsr $20e2			jsr 	SelectSpriteA 				; into X
.1f62	28		plp				plp
.1f63	20 53 21	jsr $2153			jsr 	SpriteReadCoordinate
.1f66	ad 15 0c	lda $0c15			lda 	hitSprite2					; now repeat for sprite 2 and location X+1
.1f69	20 e2 20	jsr $20e2			jsr 	SelectSpriteA
.1f6c	e8		inx				inx
.1f6d	28		plp				plp
.1f6e	20 53 21	jsr $2153			jsr 	SpriteReadCoordinate
.1f71	ca		dex				dex
.1f72	38		sec				sec 								; calculate |s1.c-s2.c| put in temp0
.1f73	b5 98		lda $98,x			lda 	esInt0,x
.1f75	f5 99		sbc $99,x			sbc 	esInt0+1,x
.1f77	85 2a		sta $2a				sta 	temp0
.1f79	b5 a0		lda $a0,x			lda 	esInt1,x
.1f7b	f5 a1		sbc $a1,x			sbc 	esInt1+1,x
.1f7d	85 2b		sta $2b				sta 	temp0+1
.1f7f	10 0d		bpl $1f8e			bpl 	_FCCIsPositive
.1f81	38		sec				sec 								; if -ve calculate |difference|
.1f82	a9 00		lda #$00			lda 	#0
.1f84	e5 2a		sbc $2a				sbc 	temp0
.1f86	85 2a		sta $2a				sta 	temp0
.1f88	a9 00		lda #$00			lda 	#0
.1f8a	e5 2b		sbc $2b				sbc 	temp0+1
.1f8c	85 2b		sta $2b				sta 	temp0+1
.1f8e					_FCCIsPositive:
.1f8e	a5 2b		lda $2b				lda 	temp0+1 					; if range >= 256 then definitely fail.
.1f90	d0 10		bne $1fa2			bne 	_FCCFail
.1f92	18		clc				clc 								; work out required min distance which is
.1f93	b5 b0		lda $b0,x			lda 	esInt3,x 					; the sum of the half width/heights
.1f95	75 b1		adc $b1,x			adc 	esInt3+1,x
.1f97	ac 16 0c	ldy $0c16			ldy 	hitRange 					; get the hit range
.1f9a	f0 01		beq $1f9d			beq 	_FCCNoSetRange 				; override if non zero.
.1f9c	98		tya				tya
.1f9d					_FCCNoSetRange:
.1f9d	c5 2a		cmp $2a				cmp 	temp0 						; result is range > distance
.1f9f	f0 01		beq $1fa2			beq 	_FCCFail
.1fa1	60		rts				rts
.1fa2					_FCCFail:
.1fa2	18		clc				clc
.1fa3	60		rts				rts
.1fa4					_FCGetSpriteID:
.1fa4	8a		txa				txa
.1fa5	a2 0c		ldx #$0c		ldx	#12
.1fa7	20 e6 3c	jsr $3ce6		jsr	mainHandler
.1faa	aa		tax				tax
.1fab	b5 98		lda $98,x			lda 	esInt0,x
.1fad	30 01		bmi $1fb0			bmi 	_FCGSValue
.1faf	60		rts				rts
.1fb0					_FCGSValue:
.1fb0	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.1fb2	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/sprites/sprite.asm

.0c17					currSprite:
>0c17							.fill 	2
.1fb5					CommandSprite:
.1fb5	20 b7 20	jsr $20b7			jsr 	CSCheckOnOff 				; look for TRUE/FALSE
.1fb8	d0 0d		bne $1fc7			bne 	_CSCheckClear
.1fba	ad 29 9f	lda $9f29			lda 	$9F29 						; sprite enable is bit 6.
.1fbd	29 bf		and #$bf			and 	#$BF 						; clear it whatever
.1fbf	90 02		bcc $1fc3			bcc 	_CSNotOn 					; if CS turn on, so set it
.1fc1	09 40		ora #$40			ora 	#$40
.1fc3					_CSNotOn:
.1fc3	8d 29 9f	sta $9f29			sta 	$9F29 						; write it back in new state and exit
.1fc6	60		rts				rts
.1fc7					_CSCheckClear:
.1fc7	a9 00		lda #$00			lda 	#0 							; no sprite currently selected.
.1fc9	8d 18 0c	sta $0c18			sta 	currSprite+1
.1fcc	b1 28		lda ($28),y			lda 	(codePtr),y 				; check for CLEAR
.1fce	c9 e8		cmp #$e8			cmp 	#TKW_CLEAR
.1fd0	d0 05		bne $1fd7			bne 	_CSCommandLoop 				; not CLEAR, go to main loop
.1fd2	20 c8 20	jsr $20c8			jsr 	CSClearSprites 				; clear all the sprites
.1fd5	c8		iny				iny 								; consume CLEAR token and exit.
.1fd6	60		rts				rts
.1fd7					_CSCommandLoop:
.1fd7	20 b7 20	jsr $20b7			jsr 	CSCheckOnOff 				; check sprite on/off
.1fda	f0 2c		beq $2008			beq 	_CSSetVisibility
.1fdc	b1 28		lda ($28),y			lda 	(codePtr),y 				; get and consume character
.1fde	c9 80		cmp #$80			cmp 	#TOK_EOL					; EOL exit.
.1fe0	f0 25		beq $2007			beq 	_CSExit
.1fe2	c8		iny				iny									; consume it
.1fe3	c9 ca		cmp #$ca			cmp 	#TKW_COLON 					; colon exit
.1fe5	f0 20		beq $2007			beq 	_CSExit
.1fe7	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; semantic comma
.1fe9	f0 ec		beq $1fd7			beq 	_CSCommandLoop
.1feb	c9 da		cmp #$da			cmp		#TKW_IMAGE 					; image ?
.1fed	f0 69		beq $2058			beq 	_CSSetImage
.1fef	c9 dc		cmp #$dc			cmp 	#TKW_FLIP 					; flip ?
.1ff1	f0 2b		beq $201e			beq 	_CSSetFlip
.1ff3	c9 ce		cmp #$ce			cmp 	#TKW_TO 					; to ?
.1ff5	f0 46		beq $203d			beq 	_CSSetPos
.1ff7	88		dey				dey 								; unpick DEY
.1ff8	a9 00		lda #$00			lda 	#0 							; sprite # now at level 0
.1ffa	a2 0c		ldx #$0c		ldx	#12
.1ffc	20 e6 3c	jsr $3ce6		jsr	mainHandler
.1fff	a5 98		lda $98				lda 	esInt0
.2001	20 e2 20	jsr $20e2			jsr 	SelectSpriteA
.2004	4c d7 1f	jmp $1fd7			jmp 	_CSCommandLoop
.2007					_CSExit:
.2007	60		rts				rts
.2008					_CSSetVisibility:
.2008	08		php				php 								; save carry
.2009	a9 06		lda #$06			lda 	#6 							; set pos to offset 6.
.200b	20 9e 20	jsr $209e			jsr 	SpriteSetTarget
.200e	ad 23 9f	lda $9f23			lda 	$9F23 						; read it.
.2011	29 f3		and #$f3			and 	#$F3 						; clear depth bits, disabling it.
.2013	28		plp				plp
.2014	90 02		bcc $2018			bcc 	_CSSetOff 					; check if carry was set
.2016	09 0c		ora #$0c			ora 	#$0C 						; otherwise set depth bits to 11, on top.
.2018					_CSSetOff:
.2018	8d 23 9f	sta $9f23			sta 	$9F23 						; update and loop back
.201b	4c d7 1f	jmp $1fd7			jmp 	_CSCommandLoop
.201e					_CSSetFlip:
.201e	a9 00		lda #$00			lda 	#0 							; image # now at level 0
.2020	a2 0c		ldx #$0c		ldx	#12
.2022	20 e6 3c	jsr $3ce6		jsr	mainHandler
.2025	a9 06		lda #$06			lda 	#6 							; set sprite position to +6
.2027	20 9e 20	jsr $209e			jsr 	SpriteSetTarget
.202a	a5 98		lda $98				lda 	esInt0 						; flip value & 3 => temp0
.202c	29 03		and #$03			and 	#3
.202e	85 2a		sta $2a				sta 	temp0
.2030	ad 23 9f	lda $9f23			lda 	$9F23 						; update the flip.
.2033	29 fc		and #$fc			and 	#$FC
.2035	05 2a		ora $2a				ora 	temp0
.2037	8d 23 9f	sta $9f23			sta 	$9F23
.203a	4c d7 1f	jmp $1fd7			jmp 	_CSCommandLoop
.203d					_CSSetPos:
.203d	a9 00		lda #$00			lda 	#0 							; X now at level 0
.203f	a2 0a		ldx #$0a		ldx	#10
.2041	20 e6 3c	jsr $3ce6		jsr	mainHandler
.2044	a2 02		ldx #$02		ldx	#2
.2046	20 e6 3c	jsr $3ce6		jsr	mainHandler
.2049	a9 01		lda #$01			lda 	#1 							; Y now at level 1
.204b	a2 0a		ldx #$0a		ldx	#10
.204d	20 e6 3c	jsr $3ce6		jsr	mainHandler
.2050	a2 00		ldx #$00			ldx 	#0 							; coords at 0,1
.2052	20 0f 21	jsr $210f			jsr 	SpriteMove 					; move it.
.2055	4c d7 1f	jmp $1fd7			jmp 	_CSCommandLoop
.2058					_CSSetImage:
.2058	a9 00		lda #$00			lda 	#0 							; image # now at level 0
.205a	a2 0c		ldx #$0c		ldx	#12
.205c	20 e6 3c	jsr $3ce6		jsr	mainHandler
.205f	a9 00		lda #$00			lda 	#0 							; set sprite position to +0
.2061	20 9e 20	jsr $209e			jsr 	SpriteSetTarget
.2064	a6 98		ldx $98				ldx 	esInt0 						; get image # into X
.2066	bd 5e 0c	lda $0c5e,x			lda 	imageAddr2Low,x 			; copy low address in.
.2069	8d 23 9f	sta $9f23			sta 	$9F23
.206c	ee 20 9f	inc $9f20			inc 	$9F20 						; bump to offset 1.
.206f	bd 1e 0c	lda $0c1e,x			lda 	imageInfo,x 				; get 4/8 bit flag from info.
.2072	29 10		and #$10			and 	#$10
.2074	0a		asl a				asl 	a
.2075	0a		asl a				asl		a
.2076	0a		asl a				asl 	a 							; put into bit 7
.2077	1d 9e 0c	ora $0c9e,x			ora 	imageAddr2High,x 			; or high address with it.
.207a	8d 23 9f	sta $9f23			sta 	$9F23 						; write the high byte.
.207d	a9 06		lda #$06			lda 	#6
.207f	20 9e 20	jsr $209e			jsr 	SpriteSetTarget 			; set sprite on.
.2082	ad 23 9f	lda $9f23			lda 	$9F23
.2085	09 0c		ora #$0c			ora 	#$0C
.2087	8d 23 9f	sta $9f23			sta 	$9F23
.208a	ee 20 9f	inc $9f20			inc 	$9F20 						; point to byte 7 : height/width/palette offset
.208d	bd 1e 0c	lda $0c1e,x			lda 	imageInfo,x 				; get image info
.2090	0a		asl a				asl 	a 							; shift bits 0-3 to 4-7
.2091	0a		asl a				asl 	a
.2092	0a		asl a				asl 	a
.2093	0a		asl a				asl 	a
.2094	b0 02		bcs $2098			bcs		_CSNoOffset 				; if bit 4 was set don't set the offset.
.2096	09 0f		ora #$0f			ora 	#$0F 						; set palette offset and write back
.2098					_CSNoOffset:
.2098	8d 23 9f	sta $9f23			sta 	$9F23
.209b	4c d7 1f	jmp $1fd7			jmp 	_CSCommandLoop
.209e					SpriteSetTarget:
.209e	0d 17 0c	ora $0c17			ora 	currSprite
.20a1	8d 20 9f	sta $9f20			sta 	$9F20
.20a4	ad 18 0c	lda $0c18			lda 	currSprite+1
.20a7	f0 09		beq $20b2			beq 	_SSTNoSet
.20a9	8d 21 9f	sta $9f21			sta 	$9F21
.20ac	a9 01		lda #$01			lda 	#$01
.20ae	8d 22 9f	sta $9f22			sta 	$9F22
.20b1	60		rts				rts
.20b2					_SSTNoSet:
.20b2	a2 27		ldx #$27			ldx 	#ErrorID_NoSprite
.20b4	20 18 15	jsr $1518		jsr	errorHandler
.20b7					CSCheckOnOff:
.20b7	b1 28		lda ($28),y			lda 	(codePtr),y 				; get and consume it.
.20b9	c8		iny				iny
.20ba	c9 ab		cmp #$ab			cmp 	#TKW_FALSE					; return CC/EQ if FALSE
.20bc	18		clc				clc
.20bd	f0 08		beq $20c7			beq 	_CSCOExit
.20bf	c9 aa		cmp #$aa			cmp 	#TKW_TRUE 					; return CS/EQ if TRUE
.20c1	38		sec				sec 								; return NE if neither.
.20c2	f0 03		beq $20c7			beq 	_CSCOExit
.20c4	88		dey				dey 								; undo consume
.20c5	c9 aa		cmp #$aa			cmp 	#TKW_TRUE 					; and set NE again, DEY will change it.
.20c7					_CSCOExit:
.20c7	60		rts				rts
.20c8					CSClearSprites:
.20c8	a9 11		lda #$11			lda 	#$11 						; set address to 1FC00 with single bump
.20ca	8d 22 9f	sta $9f22			sta 	$9F22
.20cd	a9 fc		lda #$fc			lda 	#$FC
.20cf	8d 21 9f	sta $9f21			sta 	$9F21
.20d2	a9 00		lda #$00			lda 	#0
.20d4	8d 20 9f	sta $9f20			sta 	$9F20
.20d7					_CSClear:
.20d7	a9 00		lda #$00			lda 	#0 							; set everything to $00
.20d9	8d 23 9f	sta $9f23			sta 	$9F23
.20dc	ad 21 9f	lda $9f21			lda 	$9F21
.20df	d0 f6		bne $20d7			bne 	_CSClear
.20e1	60		rts				rts
.20e2					SelectSpriteA:
.20e2	85 2a		sta $2a				sta 	temp0
.20e4	a9 00		lda #$00			lda 	#0
.20e6	06 2a		asl $2a				asl		temp0 						; multiply A:esInt0 by 8
.20e8	b0 11		bcs $20fb			bcs 	_CSBadValue 				; sprites only 0-127
.20ea	06 2a		asl $2a				asl 	temp0
.20ec	2a		rol a				rol 	a
.20ed	06 2a		asl $2a				asl 	temp0
.20ef	2a		rol a				rol 	a
.20f0	09 fc		ora #$fc			ora 	#$FC 						; MSB of address (barring $01 upper third byte)
.20f2	8d 18 0c	sta $0c18			sta 	currSprite+1
.20f5	a5 2a		lda $2a				lda 	temp0 						; LSB of address
.20f7	8d 17 0c	sta $0c17			sta 	currSprite+0
.20fa	60		rts				rts
.20fb					_CSBadValue
.20fb	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.20fd	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/sprites/spritedraw.asm

.2100					Command_Paint:
.2100	a9 08		lda #$08			lda 	#ImageHandler & $FF
.2102	a2 21		ldx #$21			ldx 	#ImageHandler >> 8
.2104	20 d3 18	jsr $18d3			jsr 	GHandler
.2107	60		rts				rts
.2108					ImageHandler:
.2108	a9 34		lda #$34			lda 	#TestImageAccess & $FF
.210a	a2 1c		ldx #$1c			ldx 	#TestImageAccess >> 8
.210c	4c 45 1b	jmp $1b45			jmp 	ImageRenderer

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/sprites/spritemove.asm

.210f					SpriteMove:
.210f	98		tya				tya
.2110	48		pha				pha
.2111	a9 07		lda #$07			lda 	#7 									; point to height/width byte and read it.
.2113	20 9e 20	jsr $209e			jsr 	SpriteSetTarget
.2116	ad 23 9f	lda $9f23			lda 	$9F23
.2119	4a		lsr a				lsr 	a 									; A now contains bits 0-1 (width) 2-3 (height)
.211a	4a		lsr a				lsr 	a
.211b	4a		lsr a				lsr 	a
.211c	4a		lsr a				lsr 	a
.211d	85 2a		sta $2a				sta 	temp0 								; save these bits so we can work out the centre.
.211f	a9 02		lda #$02			lda 	#2 									; point to X position.Low
.2121	20 9e 20	jsr $209e			jsr 	SpriteSetTarget
.2124	20 33 21	jsr $2133			jsr 	SMWritePosition 					; write X position out.
.2127	46 2a		lsr $2a				lsr 	temp0 								; shift height bits into 0,1
.2129	46 2a		lsr $2a				lsr 	temp0
.212b	e8		inx				inx 										; get the y position
.212c	20 33 21	jsr $2133			jsr 	SMWritePosition 					; and write that out.
.212f	ca		dex				dex 										; fix X and quit.
.2130	68		pla				pla
.2131	a8		tay				tay
.2132	60		rts				rts
.2133					SMWritePosition:
.2133	a5 2a		lda $2a				lda 	temp0 								; get dim size
.2135	29 03		and #$03			and 	#3 									; in range into Y
.2137	a8		tay				tay
.2138	38		sec				sec
.2139	b5 98		lda $98,x			lda 	esInt0,x
.213b	f9 4f 21	sbc $214f,y			sbc 	SMHalfSize,y
.213e	8d 23 9f	sta $9f23			sta 	$9F23
.2141	ee 20 9f	inc $9f20			inc 	$9F20
.2144	b5 a0		lda $a0,x			lda 	esInt1,x
.2146	e9 00		sbc #$00			sbc 	#0
.2148	8d 23 9f	sta $9f23			sta 	$9F23
.214b	ee 20 9f	inc $9f20			inc 	$9F20
.214e	60		rts				rts
.214f					SMHalfSize:
>214f	04 08 10 20					.byte 	4,8,16,32 							; half size each dimension.
.2153					SpriteReadCoordinate:
.2153	98		tya				tya
.2154	48		pha				pha
.2155	08		php				php 										; save CTR on stack
.2156	a9 07		lda #$07			lda 	#7 									; point to height/width byte and read it.
.2158	20 9e 20	jsr $209e			jsr 	SpriteSetTarget
.215b	ad 23 9f	lda $9f23			lda 	$9F23
.215e	4a		lsr a				lsr 	a 									; A now contains bits 0-1 (width) 2-3 (height)
.215f	4a		lsr a				lsr 	a
.2160	4a		lsr a				lsr 	a
.2161	4a		lsr a				lsr 	a
.2162	28		plp				plp 										; restore CTS
.2163	08		php				php
.2164	90 02		bcc $2168			bcc 	_SPRCNotY1 							; if it is Y, e.g. CS, shift twice more.
.2166	4a		lsr a				lsr 	a
.2167	4a		lsr a				lsr 	a
.2168					_SPRCNotY1:
.2168	29 03		and #$03			and 	#3 									; point into half width/height
.216a	a8		tay				tay
.216b	b9 4f 21	lda $214f,y			lda 	SMHalfSize,y 						; get half size -> esInt3,x
.216e	95 b0		sta $b0,x			sta 	esInt3,x
.2170	28		plp				plp 										; CS Y CC X
.2171	a9 00		lda #$00			lda 	#0 									; A = 0 X A = 2 Y
.2173	2a		rol a				rol 	a
.2174	2a		rol a				rol 	a
.2175	69 02		adc #$02			adc 	#2 									; A = 2 X A = 4 Y
.2177	20 9e 20	jsr $209e			jsr 	SpriteSetTarget 					; set data pointer offset by that
.217a	18		clc				clc 										; read and unfix centre.
.217b	ad 23 9f	lda $9f23			lda 	$9F23
.217e	75 b0		adc $b0,x			adc 	esInt3,x
.2180	95 98		sta $98,x			sta 	esInt0,x
.2182	ee 20 9f	inc $9f20			inc 	$9F20 								; do MSB
.2185	ad 23 9f	lda $9f23			lda 	$9F23
.2188	69 00		adc #$00			adc 	#0
.218a	29 0f		and #$0f			and 	#$0F 								; sign extend on bit 11.
.218c	c9 08		cmp #$08			cmp		#$08
.218e	90 02		bcc $2192			bcc 	_SPRCNoSX
.2190	09 f0		ora #$f0			ora 	#$F0
.2192					_SPRCNoSX:
.2192	95 a0		sta $a0,x			sta 	esInt1,x
.2194	68		pla				pla
.2195	a8		tay				tay
.2196	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/sprites/spriteutils.asm

.2197					Sprite_GetX:
.2197	18		clc				clc
.2198	90 01		bcc $219b			bcc 	SpriteGetCode
.219a					Sprite_GetY:
.219a	38		sec				sec
.219b					SpriteGetCode:
.219b	08		php				php 								; CLC : X SEC: Y, save on stack.
.219c	48		pha				pha 								; save stack position
.219d	20 b9 21	jsr $21b9			jsr 	GetSpriteNumber 			; get # of sprite.
.21a0	a2 04		ldx #$04		ldx	#4
.21a2	20 e6 3c	jsr $3ce6		jsr	mainHandler
.21a5	68		pla				pla
.21a6	aa		tax				tax
.21a7	28		plp				plp 								; which one ?
.21a8	20 53 21	jsr $2153			jsr 	SpriteReadCoordinate 		; read appropriate coordinate into esInt0,x
.21ab	b5 a0		lda $a0,x			lda 	esInt1,x 					; get sign bit, sign extend 16->32 bits
.21ad	29 80		and #$80			and 	#$80
.21af	f0 02		beq $21b3			beq 	_SGXYPos
.21b1	a9 ff		lda #$ff			lda 	#$FF
.21b3					_SGXYPos:
.21b3	95 a8		sta $a8,x			sta 	esInt2,x
.21b5	95 b0		sta $b0,x			sta 	esInt3,x
.21b7	8a		txa				txa 								; return NSP in A
.21b8	60		rts				rts
.21b9					GetSpriteNumber:
.21b9	48		pha				pha
.21ba	a2 0c		ldx #$0c		ldx	#12
.21bc	20 e6 3c	jsr $3ce6		jsr	mainHandler
.21bf	68		pla				pla
.21c0	aa		tax				tax
.21c1	b5 98		lda $98,x			lda 	esInt0,x
.21c3	20 e2 20	jsr $20e2			jsr 	SelectSpriteA
.21c6	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/video/mode.asm

.0c19					currentMode:
>0c19							.fill 	4
.21c7					ForceMode0:
.21c7	a2 00		ldx #$00			ldx 	#0
.21c9	86 98		stx $98				stx 	esInt0 						; in case we do it.
.21cb					_FMCheck:
.21cb	bd 5e 22	lda $225e,x			lda 	CMModeList,x 				; do we need to switch ?
.21ce	dd 19 0c	cmp $0c19,x			cmp 	currentMode,x
.21d1	d0 13		bne $21e6			bne 	CMSetMode 					; different so switch.
.21d3	e8		inx				inx
.21d4	e0 04		cpx #$04			cpx 	#4
.21d6	d0 f3		bne $21cb			bne 	_FMCheck
.21d8	60		rts				rts
.21d9					CommandMode:
.21d9	a9 00		lda #$00			lda 	#0
.21db	a2 0a		ldx #$0a		ldx	#10
.21dd	20 e6 3c	jsr $3ce6		jsr	mainHandler
.21e0	a5 b0		lda $b0				lda 	esInt3
.21e2	29 70		and #$70			and 	#$70
.21e4	d0 06		bne $21ec			bne 	CMNoExpand
.21e6					CMSetMode:
.21e6	20 3d 22	jsr $223d			jsr 	CMExpandMode
.21e9	4c 00 22	jmp $2200			jmp 	CMUpdateMode
.21ec					CMNoExpand:
.21ec	a5 98		lda $98				lda 	esInt0
.21ee	8d 19 0c	sta $0c19			sta 	currentMode
.21f1	a5 a0		lda $a0				lda 	esInt1
.21f3	8d 1a 0c	sta $0c1a			sta 	currentMode+1
.21f6	a5 a8		lda $a8				lda 	esInt2
.21f8	8d 1b 0c	sta $0c1b			sta 	currentMode+2
.21fb	a5 b0		lda $b0				lda 	esInt3
.21fd	8d 1c 0c	sta $0c1c			sta 	currentMode+3
.2200					CMUpdateMode:
.2200	a2 11		ldx #$11			ldx 	#$11
.2202					_CMClear:
.2202	a9 00		lda #$00			lda 	#0
.2204	9d 29 9f	sta $9f29,x			sta 	$9F29,X
.2207	ca		dex				dex
.2208	10 f8		bpl $2202			bpl 	_CMClear
.220a	ad 1c 0c	lda $0c1c			lda 	currentMode+3 				; get current mode
.220d	48		pha				pha 								; stack twice.
.220e	48		pha				pha
.220f	29 70		and #$70			and 	#$70 						; isolates bits 6,5,4 (sprites,L1 enable,L0 enable)
.2211	09 01		ora #$01			ora 	#$01 						; turn the output on.
.2213	8d 29 9f	sta $9f29			sta 	$9F29 						; write to DC_VIDEO
.2216	68		pla				pla 								; get back
.2217	20 6e 22	jsr $226e			jsr 	CMToScale 					; convert lower 2 bits to a scale.
.221a	8d 2a 9f	sta $9f2a			sta 	$9F2A 						; write to H-Scale
.221d	68		pla				pla 								; get back, convert bits 2,3 to a scale.
.221e	4a		lsr a				lsr 	a
.221f	4a		lsr a				lsr 	a
.2220	20 6e 22	jsr $226e			jsr 	CMToScale 					; convert lower 2 bits to a scale.
.2223	8d 2b 9f	sta $9f2b			sta 	$9F2B
.2226	a2 00		ldx #$00			ldx 	#0 							; this is offset from $9F2D to do L0
.2228	ad 19 0c	lda $0c19			lda 	currentMode					; get L0 config byte
.222b	20 79 22	jsr $2279			jsr 	CMDecodeLayer 				; and decode layer 0
.222e	a2 07		ldx #$07			ldx 	#7 							; when we do layer 1, offset by 7 hence starts at $9F34
.2230	ad 1a 0c	lda $0c1a			lda 	currentMode+1
.2233	20 79 22	jsr $2279			jsr 	CMDecodeLayer
.2236	20 77 1d	jsr $1d77			jsr 	gdModeChanged 				; check the bitmap status.
.2239	20 bc 18	jsr $18bc			jsr 	GResetStorage 				; reset the graphics drawing storage.
.223c	60		rts				rts
.223d					CMExpandMode:
.223d	a5 98		lda $98				lda 	esInt0 						; get mode number
.223f	c9 04		cmp #$04			cmp 	#(CMEndModeList-CMModeList) >> 2
.2241	b0 16		bcs $2259			bcs 	_CMModeError
.2243	0a		asl a				asl 	a 							; x 4 into X
.2244	0a		asl a				asl 	a
.2245	aa		tax				tax
.2246	98		tya				tya
.2247	48		pha				pha
.2248	a0 00		ldy #$00			ldy 	#0
.224a					_CMEMCopy:
.224a	bd 5e 22	lda $225e,x			lda 	CMModeList,x
.224d	99 19 0c	sta $0c19,y			sta 	currentMode,y
.2250	e8		inx				inx
.2251	c8		iny				iny
.2252	c0 04		cpy #$04			cpy 	#4
.2254	d0 f4		bne $224a			bne 	_CMEMCopy
.2256	68		pla				pla
.2257	a8		tay				tay
.2258	60		rts				rts
.2259					_CMModeError:
.2259	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.225b	20 18 15	jsr $1518		jsr	errorHandler
.225e					CMModeList:
>225e	00 60 00 20					.dword	$20006000 					; Mode 0 which is the standard 80x60 mode, no sprites
>2262	00 60 00 25					.dword 	$25006000					; Mode 1 (40x30)
>2266	00 60 00 2a					.dword 	$2A006000 					; Mode 2 (20x15)
>226a	07 60 00 15					.dword 	$15006007 					; Mode 3 (320x200 256 colour bitmap)
.226e					CMEndModeList:
.226e					CMToScale:
.226e	29 03		and #$03			and 	#3 							; lower 2 bits only
.2270	aa		tax				tax 								; put in X for counting
.2271	a9 00		lda #$00			lda 	#0 							; zero result
.2273	38		sec				sec 								; first time rotate CS in
.2274					_CMTSLoop:
.2274	6a		ror a				ror 	a
.2275	ca		dex				dex
.2276	10 fc		bpl $2274			bpl 	_CMTSLoop
.2278	60		rts				rts
.2279					CMDecodeLayer:
.2279	48		pha				pha 								; save it.
.227a	29 f7		and #$f7			and 	#$F7 						; all the bits except T256C which you can't set using this
.227c	9d 2d 9f	sta $9f2d,x			sta 	$9F2D,X
.227f	68		pla				pla 								; get it back
.2280	29 08		and #$08			and 	#$08 						; the missing bit sets the tile size.
.2282	f0 02		beq $2286			beq 	_CMDLNotSet
.2284	a9 03		lda #$03			lda 	#$03 						; which sets both lower bits, they're square.
.2286					_CMDLNotSet:
.2286	e0 00		cpx #$00			cpx 	#0
.2288	f0 06		beq $2290			beq 	_CMDLayer0 					; layer 1 has standard defaults for tile table, e.g. $7C
.228a	09 7c		ora #$7c			ora 	#$7C 						; so set those bits and write it out.
.228c	9d 2f 9f	sta $9f2f,x			sta 	$9F2F,X
.228f	60		rts				rts
.2290					_CMDLayer0:
.2290	09 80		ora #$80			ora 	#$80 						; tile base is $80
.2292	9d 2f 9f	sta $9f2f,x			sta 	$9F2F,X
.2295	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/video/palette.asm

.2296					CommandPalette:
.2296	a9 00		lda #$00			lda 	#0
.2298	a2 0c		ldx #$0c		ldx	#12
.229a	20 e6 3c	jsr $3ce6		jsr	mainHandler
.229d	a2 02		ldx #$02		ldx	#2
.229f	20 e6 3c	jsr $3ce6		jsr	mainHandler
.22a2	a9 01		lda #$01			lda 	#1
.22a4	a2 08		ldx #$08		ldx	#8
.22a6	20 e6 3c	jsr $3ce6		jsr	mainHandler
.22a9	a5 98		lda $98				lda 	esInt0 					; get palette #
.22ab	20 bb 22	jsr $22bb			jsr 	PointToPaletteA			; point to palette register
.22ae	a5 99		lda $99				lda 	esInt0+1
.22b0	8d 23 9f	sta $9f23			sta 	$9F23
.22b3	a5 a1		lda $a1				lda 	esInt1+1
.22b5	29 0f		and #$0f			and 	#$0F
.22b7	8d 23 9f	sta $9f23			sta 	$9F23
.22ba	60		rts				rts
.22bb					PointToPaletteA:
.22bb	0a		asl a				asl 	a 							; x 2 -> LSB
.22bc	8d 20 9f	sta $9f20			sta 	$9F20
.22bf	a9 00		lda #$00			lda 	#0 							; carry into A
.22c1	2a		rol a				rol 	a
.22c2	09 fa		ora #$fa			ora 	#$FA 						; make correct address
.22c4	8d 21 9f	sta $9f21			sta 	$9F21
.22c7	a9 11		lda #$11			lda 	#$11 						; $01 and single step => $9F22
.22c9	8d 22 9f	sta $9f22			sta 	$9F22
.22cc	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/video/vload.asm

.22cd					Command_VLoad:
.22cd	a9 00		lda #$00			lda 	#0 								; string which is the file name
.22cf	a2 0e		ldx #$0e		ldx	#14
.22d1	20 e6 3c	jsr $3ce6		jsr	mainHandler
.22d4	a2 01		ldx #$01			ldx 	#1 								; load address at +1.
.22d6	a5 35		lda $35				lda 	lowMemory 						; load it into lowMemory (for now ?)
.22d8	95 98		sta $98,x			sta 	esInt0,x
.22da	a5 36		lda $36				lda 	lowMemory+1
.22dc	95 a0		sta $a0,x			sta 	esInt1,x
.22de	a9 00		lda #$00			lda 	#0
.22e0	95 a8		sta $a8,x			sta 	esInt2,x
.22e2	95 b0		sta $b0,x			sta 	esInt3,x
.22e4	a2 0e		ldx #$0e		ldx	#14
.22e6	20 f6 14	jsr $14f6		jsr	deviceHandler
.22e9	a5 99		lda $99				lda 	esInt0+1 						; (temp0) is where we are decoding from.
.22eb	85 2a		sta $2a				sta 	temp0
.22ed	a5 a1		lda $a1				lda 	esInt1+1
.22ef	85 2b		sta $2b				sta 	temp0+1
.22f1	20 6d 23	jsr $236d			jsr 	LoadVRAMFile 					; load the VRAM file in.
.22f4	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/video/vpeekpoke.asm

.22f5					Command_VPoke:
.22f5	38		sec				sec 						; one byte , CS
.22f6	b0 01		bcs $22f9			bcs 	CmdVideoWrite
.22f8					Command_VDoke:
.22f8	18		clc				clc 						; two bytes, CC
.22f9					CmdVideoWrite:
.22f9	08		php				php 						; save one or two btes
.22fa	a9 00		lda #$00			lda 	#0  				; get address and value into levels 0,1
.22fc	a2 0a		ldx #$0a		ldx	#10
.22fe	20 e6 3c	jsr $3ce6		jsr	mainHandler
.2301	a2 02		ldx #$02		ldx	#2
.2303	20 e6 3c	jsr $3ce6		jsr	mainHandler
.2306	a9 01		lda #$01			lda 	#1
.2308	a2 0a		ldx #$0a		ldx	#10
.230a	20 e6 3c	jsr $3ce6		jsr	mainHandler
.230d	a2 00		ldx #$00			ldx 	#0
.230f	20 20 23	jsr $2320			jsr 	SetUpTOSVRamAddress ; copy target address to VRAM address registers
.2312	a5 99		lda $99				lda 	esInt0+1 			; get MSB of write value
.2314	8d 23 9f	sta $9f23			sta 	$9F23
.2317	28		plp				plp 						; if it was Poke then exit
.2318	b0 05		bcs $231f			bcs 	_CVWExit
.231a	a5 a1		lda $a1				lda 	esInt1+1 			; doke, write the MSB.
.231c	8d 23 9f	sta $9f23			sta 	$9F23
.231f					_CVWExit:
.231f	60		rts				rts
.2320					SetUpTOSVRamAddress:
.2320	b5 a8		lda $a8,x			lda 	esInt2,x 			; check range of address, data to $FFFF
.2322	29 fe		and #$fe			and 	#$FE
.2324	15 b0		ora $b0,x			ora 	esInt3,x
.2326	d0 14		bne $233c			bne 	CVWValue
.2328	b5 98		lda $98,x			lda 	esInt0,x			; set address up
.232a	8d 20 9f	sta $9f20			sta 	$9F20
.232d	b5 a0		lda $a0,x			lda 	esInt1,x
.232f	8d 21 9f	sta $9f21			sta	 	$9F21
.2332	b5 a8		lda $a8,x			lda 	esInt2,x
.2334	29 01		and #$01			and 	#1
.2336	09 10		ora #$10			ora 	#$10 				; step 1.
.2338	8d 22 9f	sta $9f22			sta 	$9F22
.233b	60		rts				rts
.233c					CVWValue:
.233c	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.233e	20 18 15	jsr $1518		jsr	errorHandler
.2341					Command_VPeek:
.2341	38		sec				sec 						; one byte , CS
.2342	b0 01		bcs $2345			bcs 	CmdVideoRead
.2344					Command_VDeek:
.2344	18		clc				clc 						; two bytes, CC
.2345					CmdVideoRead:
.2345	08		php				php 						; save action on stack.
.2346	48		pha				pha 						; save stack position
.2347	a2 0a		ldx #$0a		ldx	#10
.2349	20 e6 3c	jsr $3ce6		jsr	mainHandler
.234c	a2 04		ldx #$04		ldx	#4
.234e	20 e6 3c	jsr $3ce6		jsr	mainHandler
.2351	68		pla				pla
.2352	aa		tax				tax
.2353	20 20 23	jsr $2320			jsr 	SetUpTOSVRamAddress	; set up VRAM address.
.2356	a9 00		lda #$00			lda 	#0 					; zero upper 3 bytes
.2358	95 a0		sta $a0,x			sta 	esInt1,x
.235a	95 a8		sta $a8,x			sta 	esInt2,x
.235c	95 b0		sta $b0,x			sta 	esInt3,x
.235e	ad 23 9f	lda $9f23			lda 	$9F23				; copy 1st byte
.2361	95 98		sta $98,x			sta 	esInt0,x
.2363	28		plp				plp 						; check if DOKE (carry was clear)
.2364	b0 05		bcs $236b			bcs 	_CVRExit
.2366	ad 23 9f	lda $9f23			lda 	$9F23 				; copy 2nd byte
.2369	95 a0		sta $a0,x			sta 	esInt1,x
.236b					_CVRExit:
.236b	8a		txa				txa 						; return X position.
.236c	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/video/vramprocess.asm

.0c1d					compressMode:
>0c1d							.fill 	1
.0c1e					imageInfo:
>0c1e							.fill 	X16MaxImages
.0c5e					imageAddr2Low:
>0c5e							.fill  	X16MaxImages
.0c9e					imageAddr2High:
>0c9e							.fill  	X16MaxImages
.236d					LoadVRAMFile:
.236d	8a		txa				txa
.236e	48		pha				pha
.236f	98		tya				tya
.2370	48		pha				pha
.2371					_LVRLoop:
.2371	20 4d 24	jsr $244d			jsr 	LVFGet 						; get the next (never access direct)
.2374	c9 80		cmp #$80			cmp 	#$80 						; exit ?
.2376	f0 42		beq $23ba			beq 	_LVRExit
.2378	b0 5c		bcs $23d6			bcs 	_LVRLoad 					; load data in ?
.237a	c9 08		cmp #$08			cmp 	#$08 						; is it set address ?
.237c	90 11		bcc $238f			bcc 	_LVRSetAddress
.237e	c9 0f		cmp #$0f			cmp 	#$0F 						; is it define palette
.2380	f0 3d		beq $23bf			beq 	_LVRSetPalette
.2382	c9 10		cmp #$10			cmp 	#$10 						; is it set compression type ?
.2384	90 2d		bcc $23b3			bcc 	_LVRSetCompress
.2386	c9 64		cmp #$64			cmp 	#$64 						; is it set sprite type.
.2388	90 60		bcc $23ea			bcc 	_LVRSetSprite
.238a	a2 01		ldx #$01			ldx 	#ErrorID_missing
.238c	20 18 15	jsr $1518		jsr	errorHandler
.238f					_LVRSetAddress:
.238f	85 2d		sta $2d				sta 	temp1+1 					; 24 bit in temp1+1/temp1/A
.2391	20 4d 24	jsr $244d			jsr 	LVFGet
.2394	85 2c		sta $2c				sta 	temp1
.2396	a9 00		lda #$00			lda 	#0
.2398	46 2d		lsr $2d				lsr 	temp1+1 					; / 2 twice.
.239a	66 2c		ror $2c				ror 	temp1
.239c	6a		ror a				ror		a
.239d	46 2d		lsr $2d				lsr 	temp1+1
.239f	66 2c		ror $2c				ror 	temp1
.23a1	6a		ror a				ror		a
.23a2	8d 20 9f	sta $9f20			sta 	$9F20 						; set write address with +1 increment
.23a5	a5 2c		lda $2c				lda 	temp1
.23a7	8d 21 9f	sta $9f21			sta 	$9F21
.23aa	a5 2d		lda $2d				lda 	temp1+1
.23ac	09 10		ora #$10			ora 	#$10
.23ae	8d 22 9f	sta $9f22			sta 	$9F22
.23b1	d0 be		bne $2371			bne 	_LVRLoop
.23b3					_LVRSetCompress:
.23b3	29 07		and #$07			and 	#7
.23b5	8d 1d 0c	sta $0c1d			sta 	compressMode
.23b8	10 b7		bpl $2371			bpl 	_LVRLoop
.23ba					_LVRExit:
.23ba	68		pla				pla
.23bb	a8		tay				tay
.23bc	68		pla				pla
.23bd	aa		tax				tax
.23be	60		rts				rts
.23bf					_LVRSetPalette:
.23bf	20 4d 24	jsr $244d			jsr 	LVFGet 						; get palette id.
.23c2	20 bb 22	jsr $22bb			jsr 	PointToPaletteA 			; in palette.asm
.23c5	20 4d 24	jsr $244d			jsr 	LVFGet 						; copy 12 bit palette data in.
.23c8	8d 23 9f	sta $9f23			sta 	$9F23
.23cb	20 4d 24	jsr $244d			jsr 	LVFGet
.23ce	29 0f		and #$0f			and 	#$0F
.23d0	8d 23 9f	sta $9f23			sta 	$9F23
.23d3	4c 71 23	jmp $2371			jmp 	_LVRLoop
.23d6					_LVRLoad:
.23d6	ae 1d 0c	ldx $0c1d			ldx 	compressMode
.23d9	d0 55		bne $2430			bne 	_LVRNotMode0
.23db	29 7f		and #$7f			and 	#$7F 						; count in X (is > 0)
.23dd					_LVRLCopyX:
.23dd	aa		tax				tax
.23de					_LVRLCopy:
.23de	20 4d 24	jsr $244d			jsr 	LVFGet 						; write to data.
.23e1	8d 23 9f	sta $9f23			sta 	$9F23
.23e4	ca		dex				dex
.23e5	d0 f7		bne $23de			bne 	_LVRLCopy
.23e7	4c 71 23	jmp $2371			jmp 	_LVRLoop
.23ea					_LVRSetSprite:
.23ea	48		pha				pha 								; save on stack
.23eb	20 4d 24	jsr $244d			jsr 	LVFGet 						; get the sprite number into X
.23ee	aa		tax				tax
.23ef	c9 40		cmp #$40			cmp 	#X16MaxImages				; too high ?
.23f1	b0 38		bcs $242b			bcs 	_LVRSSValue
.23f3	68		pla				pla 								; restore the data held in the first byte
.23f4	9d 1e 0c	sta $0c1e,x			sta 	imageInfo,x 				; and write into the sprite image table.
.23f7					_LVRAlignVRAM:
.23f7	ad 20 9f	lda $9f20			lda 	$9F20 						; check VRAM on 32 byte boundary
.23fa	29 1f		and #$1f			and 	#$1F
.23fc	f0 07		beq $2405			beq 	_LVRAligned
.23fe	a9 00		lda #$00			lda 	#$00
.2400	8d 23 9f	sta $9f23			sta 	$9F23
.2403	f0 f2		beq $23f7			beq 	_LVRAlignVRAM
.2405					_LVRAligned:
.2405	ad 22 9f	lda $9f22			lda 	$9F22 						; put address/32 in sprite image table
.2408	4a		lsr a				lsr 	a 	 						; first halve into temp1
.2409	ad 21 9f	lda $9f21			lda 	$9F21
.240c	6a		ror a				ror 	a
.240d	85 2d		sta $2d				sta 	temp1+1
.240f	ad 20 9f	lda $9f20			lda 	$9F20
.2412	6a		ror a				ror 	a
.2413	85 2c		sta $2c				sta 	temp1
.2415	a0 04		ldy #$04			ldy 	#4 							; divide it by 16 in temp1
.2417					_LVRShift:
.2417	46 2d		lsr $2d				lsr 	temp1+1
.2419	66 2c		ror $2c				ror 	temp1
.241b	88		dey				dey
.241c	d0 f9		bne $2417			bne 	_LVRShift
.241e	a5 2d		lda $2d				lda 	temp1+1 					; copy result.
.2420	9d 9e 0c	sta $0c9e,x			sta 	imageAddr2High,x
.2423	a5 2c		lda $2c				lda 	temp1
.2425	9d 5e 0c	sta $0c5e,x			sta 	imageAddr2Low,x
.2428	4c 71 23	jmp $2371			jmp 	_LVRLoop
.242b					_LVRSSValue:
.242b	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.242d	20 18 15	jsr $1518		jsr	errorHandler
.2430					_LVRNotMode0:
.2430	e0 01		cpx #$01			cpx 	#1
.2432	d0 15		bne $2449			bne 	_LVRNotMode1
.2434	29 7f		and #$7f			and 	#$7F 						; drop bit 7
.2436	c9 40		cmp #$40			cmp 	#$40
.2438	90 a3		bcc $23dd			bcc 	_LVRLCopyX 					; 00-3F use mode 0's copying code.
.243a					_LVRRLEGroup:
.243a	29 3f		and #$3f			and 	#$3F
.243c	aa		tax				tax
.243d	20 4d 24	jsr $244d			jsr 	LVFGet
.2440					_LVRLEGroupLoop:
.2440	8d 23 9f	sta $9f23			sta 	$9F23
.2443	ca		dex				dex
.2444	d0 fa		bne $2440			bne 	_LVRLEGroupLoop
.2446	4c 71 23	jmp $2371			jmp 	_LVRLoop
.2449					_LVRNotMode1:
>2449	db						.byte 	$DB
.244a	4c 49 24	jmp $2449			jmp 	_LVRNotMode1
.244d	84 32		sty $32		LVFGet:	sty 	tempShort
.244f	a0 00		ldy #$00			ldy 	#0
.2451	b1 2a		lda ($2a),y			lda 	(temp0),y
.2453	a4 32		ldy $32				ldy	 	tempShort
.2455	e6 2a		inc $2a				inc 	temp0
.2457	d0 02		bne $245b			bne 	_LVFGExit
.2459	e6 2b		inc $2b				inc 	temp0+1
.245b					_LVFGExit:
.245b	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Return to file: basic.asm

.245c					section_end_extension:
.245c					section_start_floatingpoint:

;******  Processing file: floatingpoint/floatingpoint.asm

.245c					floatingpointHandler:
.245c	a2 03		ldx #$03			ldx 	#ErrorID_NoModule
.245e	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: basic.asm

.2461					section_end_floatingpoint:
.2461					section_start_interaction:

;******  Processing file: interaction/interaction.asm


;******  Processing file: interaction/cold.asm

.2461					ColdStartEntry:
.2461	a2 ff		ldx #$ff			ldx 	#$FF
.2463	9a		txs				txs
.2464	20 ed 24	jsr $24ed			jsr 	ForceStandardMode
.2467	a2 04		ldx #$04		ldx	#4
.2469	20 f6 14	jsr $14f6		jsr	deviceHandler
.246c	a0 ff		ldy #$ff			ldy 	#255
.246e					_CSBanner:
.246e	c8		iny				iny
.246f	b9 95 24	lda $2495,y			lda 	Intro,y
.2472	f0 14		beq $2488			beq 	_CSStart
.2474	c9 08		cmp #$08			cmp 	#8
.2476	90 08		bcc $2480			bcc 	_CSInk
.2478	a2 16		ldx #$16		ldx	#22
.247a	20 f6 14	jsr $14f6		jsr	deviceHandler
.247d	4c 6e 24	jmp $246e			jmp 	_CSBanner
.2480					_CSInk:
.2480	a2 08		ldx #$08		ldx	#8
.2482	20 f6 14	jsr $14f6		jsr	deviceHandler
.2485	4c 6e 24	jmp $246e			jmp 	_CSBanner
.2488					_CSStart:
.2488	a2 16		ldx #$16		ldx	#22
.248a	20 e6 3c	jsr $3ce6		jsr	mainHandler
.248d	a2 06		ldx #$06		ldx	#6
.248f	20 e6 3c	jsr $3ce6		jsr	mainHandler
.2492	4c ad 25	jmp $25ad			jmp 	WarmStartEntry
>2495	06 2a 2a 2a 20 36 35 30		Intro:	.text 	6,"*** 6502 Extended BASIC ***",13,13
>249d	32 20 45 78 74 65 6e 64 65 64 20 42 41 53 49 43
>24ad	20 2a 2a 2a 0d 0d
>24b3	03 57 72 69 74 74 65 6e				.text 	3,"Written by Paul Robson 2021",13,13
>24bb	20 62 79 20 50 61 75 6c 20 52 6f 62 73 6f 6e 20
>24cb	32 30 32 31 0d 0d
>24d1	02 42 61 73 69 63 20				.text 	2,"Basic "
>24d8	30 2e 32 30					.text "0.20"
>24dc	20 28						.text 	" ("
>24de	30 33 2d 41 70 72 2d 32				.text "03-Apr-2021"
>24e6	30 32 31
>24e9	29 0d 0d 00					.text 	")",13,13,0
.24ed					ForceStandardMode:
.24ed	a9 fe		lda #$fe			lda 	#$FE
.24ef	20 69 18	jsr $1869		jsr	extensionHandler
.24f2	60		rts				rts

;******  Return to file: interaction/interaction.asm


;******  Processing file: interaction/delete.asm

.24f3					DeleteLine:
.24f3	ad c8 0a	lda $0ac8			lda 	basePage 					; copy program base to temp0
.24f6	85 2a		sta $2a				sta 	temp0
.24f8	ad c9 0a	lda $0ac9			lda 	basePage+1
.24fb	85 2b		sta $2b				sta 	temp0+1
.24fd	a0 01		ldy #$01	_DLLoop:ldy 	#1 							; see if found line ?
.24ff	a5 98		lda $98				lda 	esInt0 						; e.g. the linenumbers match
.2501	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.2503	d0 07		bne $250c			bne 	_DLNext
.2505	c8		iny				iny
.2506	a5 a0		lda $a0				lda 	esInt1
.2508	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.250a	f0 06		beq $2512			beq 	_DLFound
.250c	20 30 25	jsr $2530	_DLNext:jsr 	IAdvanceTemp0 				; shift temp0 forward, return Z flag set if end.
.250f	d0 ec		bne $24fd			bne 	_DLLoop
.2511	60		rts				rts
.2512					_DLFound:
.2512	a0 00		ldy #$00			ldy 	#0 							; this is the line to cut, so this offset is the bytes to remove
.2514	b1 2a		lda ($2a),y			lda 	(temp0),y
.2516	a8		tay				tay 								; so we copy from (temp0),y
.2517	a2 00		ldx #$00			ldx 	#0  						; to (temp0,x)
.2519					_DLCopyDown:
.2519	b1 2a		lda ($2a),y			lda 	(temp0),y 					; copy one byte.
.251b	81 2a		sta ($2a,x)			sta 	(temp0,x)
.251d	e6 2a		inc $2a				inc 	temp0 						; advance pointer
.251f	d0 02		bne $2523			bne 	_DLNoCarry
.2521	e6 2b		inc $2b				inc 	temp0+1
.2523					_DLNoCarry:
.2523	a5 2a		lda $2a				lda 	temp0 						; until hit low memory
.2525	c5 35		cmp $35				cmp 	lowMemory 					; which is comfortably after End Program.
.2527	d0 f0		bne $2519			bne 	_DLCopyDown
.2529	a5 2b		lda $2b				lda 	temp0+1
.252b	c5 36		cmp $36				cmp 	lowMemory+1
.252d	d0 ea		bne $2519			bne 	_DLCopyDown
.252f	60		rts				rts
.2530					IAdvanceTemp0:
.2530	84 32		sty $32				sty 	tempShort
.2532	18		clc				clc
.2533	a0 00		ldy #$00			ldy 	#0 							; get offset
.2535	b1 2a		lda ($2a),y			lda 	(temp0),y 					; add to temp0
.2537	65 2a		adc $2a				adc 	temp0
.2539	85 2a		sta $2a				sta 	temp0
.253b	90 02		bcc $253f			bcc 	_IATNoCarry
.253d	e6 2b		inc $2b				inc 	temp0+1
.253f					_IATNoCarry:
.253f	b1 2a		lda ($2a),y			lda 	(temp0),y
.2541	a4 32		ldy $32				ldy 	tempShort
.2543	c9 00		cmp #$00			cmp		#0 							; Z set if program end.
.2545	60		rts				rts

;******  Return to file: interaction/interaction.asm


;******  Processing file: interaction/insert.asm

.2546					InsertLine:
.2546	ad c8 0a	lda $0ac8			lda 	basePage 					; copy program base to temp0
.2549	85 2a		sta $2a				sta 	temp0
.254b	ad c9 0a	lda $0ac9			lda 	basePage+1
.254e	85 2b		sta $2b				sta 	temp0+1
.2550					_ILLoop:
.2550	a0 01		ldy #$01			ldy 	#1
.2552	b1 2a		lda ($2a),y			lda 	(temp0),y
.2554	c5 98		cmp $98				cmp 	esInt0
.2556	c8		iny				iny
.2557	b1 2a		lda ($2a),y			lda 	(temp0),y
.2559	e5 a0		sbc $a0				sbc 	esInt1
.255b	b0 05		bcs $2562			bcs 	_ILFound 					; we know it cannot be equal, it would have been deleted
.255d	20 30 25	jsr $2530			jsr 	IAdvanceTemp0 				; shift temp0 forward, return Z flag set if end.
.2560	d0 ee		bne $2550			bne 	_ILLoop
.2562					_ILFound:
.2562	a5 35		lda $35				lda 	lowMemory 					; shift lowMemory up to make space for it.
.2564	85 2c		sta $2c				sta 	temp1             			; this pointer goes backwards
.2566	a5 36		lda $36				lda 	lowMemory+1
.2568	85 2d		sta $2d				sta 	temp1+1
.256a	ad 1b 0e	lda $0e1b			lda 	tokenBufferIndex 			; space to make in Y, 0 in X.
.256d	18		clc				clc 								; add 3 for the line number and offset.
.256e	69 03		adc #$03			adc 	#3 							; tokenbuffer already has $80
.2570	a8		tay				tay
.2571	a2 00		ldx #$00			ldx 	#0
.2573	a1 2c		lda ($2c,x)	_ILMove:lda 	(temp1,x)					; shift up
.2575	91 2c		sta ($2c),y			sta 	(temp1),y
.2577	a5 2c		lda $2c				lda 	temp1 						; check reached the insert point ?
.2579	c5 2a		cmp $2a				cmp 	temp0
.257b	d0 06		bne $2583			bne 	_ILMNext
.257d	a5 2d		lda $2d				lda 	temp1+1
.257f	c5 2b		cmp $2b				cmp 	temp0+1
.2581	f0 0b		beq $258e			beq 	_ILMCopy
.2583					_ILMNext:
.2583	a5 2c		lda $2c				lda 	temp1
.2585	d0 02		bne $2589			bne 	_ILNoBorrow
.2587	c6 2d		dec $2d				dec 	temp1+1
.2589					_ILNoBorrow:
.2589	c6 2c		dec $2c				dec 	temp1
.258b	4c 73 25	jmp $2573			jmp 	_ILMove 					; and go round again
.258e					_ILMCopy:
.258e	98		tya				tya 								; Y is the offset of the new line.
.258f	81 2a		sta ($2a,x)			sta 	(temp0,x)					; X = 0 still.
.2591	a0 01		ldy #$01			ldy 	#1 							; copy in line number.
.2593	a5 98		lda $98				lda 	esInt0
.2595	91 2a		sta ($2a),y			sta 	(temp0),y
.2597	c8		iny				iny
.2598	a5 a0		lda $a0				lda 	esInt1
.259a	91 2a		sta ($2a),y			sta 	(temp0),y
.259c	a0 00		ldy #$00			ldy 	#0 							; copy the body in
.259e					_ILMCopy2:
.259e	b1 28		lda ($28),y			lda 	(codePtr),y
.25a0	c8		iny				iny
.25a1	c8		iny				iny
.25a2	c8		iny				iny
.25a3	91 2a		sta ($2a),y			sta 	(temp0),y
.25a5	88		dey				dey
.25a6	88		dey				dey
.25a7	cc 1b 0e	cpy $0e1b			cpy 	tokenBufferIndex
.25aa	d0 f2		bne $259e			bne 	_ILMCopy2
.25ac	60		rts				rts

;******  Return to file: interaction/interaction.asm


;******  Processing file: interaction/warm.asm

.25ad					WarmStartEntry:
.25ad	a2 ff		ldx #$ff			ldx 	#$FF
.25af	9a		txs				txs
.25b0	20 ed 24	jsr $24ed			jsr 	ForceStandardMode
.25b3	a9 02		lda #$02			lda 	#2							; green text.
.25b5	a2 08		ldx #$08		ldx	#8
.25b7	20 f6 14	jsr $14f6		jsr	deviceHandler
.25ba	a2 0c		ldx #$0c		ldx	#12
.25bc	20 f6 14	jsr $14f6		jsr	deviceHandler
.25bf	a5 2a		lda $2a				lda 	temp0	 					; copy temp0 to codePtr
.25c1	85 28		sta $28				sta 	codePtr
.25c3	a5 2b		lda $2b				lda 	temp0+1
.25c5	85 29		sta $29				sta 	codePtr+1
.25c7	a2 06		ldx #$06		ldx	#6
.25c9	20 f6 14	jsr $14f6		jsr	deviceHandler
.25cc	a2 08		ldx #$08		ldx	#8
.25ce	20 2c 48	jsr $482c		jsr	tokeniserHandler
.25d1	c9 00		cmp #$00			cmp 	#0
.25d3	f0 25		beq $25fa			beq 	WSEError 					; failed (tokenise can fail if it doesn't know a character e.g. |)
.25d5	a9 18		lda #$18			lda 	#(tokenHeader) & $FF
.25d7	85 28		sta $28				sta 	codePtr
.25d9	a9 0d		lda #$0d			lda 	#(tokenHeader) >> 8
.25db	85 29		sta $29				sta 	1+(codePtr)
.25dd	ad 1b 0d	lda $0d1b			lda 	tokenBuffer 				; is it a blank line, go get another line.
.25e0	c9 80		cmp #$80			cmp 	#$80
.25e2	f0 c9		beq $25ad			beq 	WarmStartEntry
.25e4	29 c0		and #$c0			and 	#$C0						; does it start with a number
.25e6	c9 40		cmp #$40			cmp 	#$40 						; e.g. is it 01xx xxxx
.25e8	f0 15		beq $25ff			beq 	HasLineNumber
.25ea	a9 00		lda #$00			lda 	#0 							; zero the token header, so it will look like a
.25ec	8d 18 0d	sta $0d18			sta 	tokenHeader 				; fake program line.
.25ef	8d 19 0d	sta $0d19			sta 	tokenHeader+1
.25f2	8d 1a 0d	sta $0d1a			sta 	tokenHeader+2
.25f5	a2 18		ldx #$18		ldx	#24
.25f7	20 e6 3c	jsr $3ce6		jsr	mainHandler
.25fa					WSEError:
.25fa	a2 1e		ldx #$1e			ldx 	#ErrorID_Tokenise
.25fc	20 18 15	jsr $1518		jsr	errorHandler
.25ff					HasLineNumber:
.25ff	a0 03		ldy #$03			ldy 	#3 							; get line number
.2601	a9 00		lda #$00			lda 	#0
.2603	a2 0a		ldx #$0a		ldx	#10
.2605	20 e6 3c	jsr $3ce6		jsr	mainHandler
.2608	a5 a8		lda $a8				lda 	esInt2		 				; check in range (only 2 bytes)
.260a	05 b0		ora $b0				ora 	esInt3
.260c	d0 ec		bne $25fa			bne 	WSEError
.260e	98		tya				tya 								; make codePtr point to code after the line number.
.260f	18		clc				clc 								; by skipping over the tokenised number.
.2610	65 28		adc $28				adc 	codePtr
.2612	85 28		sta $28				sta 	codePtr
.2614	90 02		bcc $2618			bcc		_HLNNoCarry
.2616	e6 29		inc $29				inc 	codePtr+1
.2618					_HLNNoCarry:
.2618	98		tya				tya 								; subtract that offset from the code buffer index
.2619	38		sec				sec
.261a	49 ff		eor #$ff			eor 	#$FF
.261c	6d 1b 0e	adc $0e1b			adc 	tokenBufferIndex
.261f	18		clc				clc 								; add space allowing for header & $80 trailer
.2620	69 04		adc #$04			adc 	#4
.2622	8d 1b 0e	sta $0e1b			sta 	tokenBufferIndex 			; this is the number of bytes occupied.
.2625	20 f3 24	jsr $24f3			jsr 	DeleteLine 					; always delete the line, it's deleted and reinserted.
.2628					_HLNNoDelete:
.2628	ad 1b 0e	lda $0e1b			lda 	tokenBufferIndex 			; if line was empty, then don't insert
.262b	c9 01		cmp #$01			cmp 	#1 							; (the one character is the EOL marker)
.262d	f0 0c		beq $263b			beq 	_HLMEditDone
.262f	a5 36		lda $36				lda 	lowMemory+1 				; is there space, if we allow a little bit of
.2631	18		clc				clc 								; workspace (1k)
.2632	69 04		adc #$04			adc 	#4 							; e.g. 4 x 256
.2634	c5 34		cmp $34				cmp 	highMemory+1
.2636	b0 0b		bcs $2643			bcs 	_HLMMemory 					; nope, won't allowit.
.2638	20 46 25	jsr $2546			jsr 	InsertLine 					; insert the line in
.263b					_HLMEditDone:
.263b	a2 06		ldx #$06		ldx	#6
.263d	20 e6 3c	jsr $3ce6		jsr	mainHandler
.2640	4c ad 25	jmp $25ad			jmp 	WarmStartEntry
.2643					_HLMMemory:
.2643	a2 22		ldx #$22			ldx 	#ErrorID_Memory
.2645	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: interaction/interaction.asm

.2648					interactionHandler:
.2648	7c 4b 26	jmp ($264b,x)			jmp 	(interactionVectors,x)
.264b					interactionVectors:
>264b	51 26					.word _DummyControlHandler ; index 0
>264d	61 24					.word ColdStartEntry       ; index 2
>264f	ad 25					.word WarmStartEntry       ; index 4
.2651					_DummyControlHandler:
.2651	60		rts			rts

;******  Return to file: basic.asm

.2652					section_end_interaction:
.2652					section_start_main:

;******  Processing file: main/main.asm


;******  Processing file: main/commands/compat/readdata.asm

.0cde					dataPtr:
>0cde							.fill 	2
.0ce0					dataIndex:
>0ce0							.fill 	1
.2652					CommandRead:
.2652	a2 00		ldx #$00			ldx 	#0 							; get a reference to a variable in stack:0
.2654	20 99 35	jsr $3599			jsr 	EvaluateReference
.2657	20 98 26	jsr $2698			jsr 	SwapDPCP 					; use the data pointer.
.265a	b1 28		lda ($28),y			lda 	(codePtr),y 				; see where it is.
.265c	c8		iny				iny
.265d	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; if it is on a comma, it is in data.
.265f	f0 07		beq $2668			beq 	_CRInData
.2661	88		dey				dey
.2662	a9 d9		lda #$d9			lda 	#TKW_DATA 					; scan forward to a DATA statement.
.2664	aa		tax				tax
.2665	20 99 2d	jsr $2d99			jsr 	ScanForward
.2668					_CRInData:
.2668	a2 01		ldx #$01			ldx 	#1 							; evaluate a value at Stack,1
.266a	20 41 35	jsr $3541			jsr 	Evaluate
.266d	ca		dex				dex 								; and write the value.
.266e	20 ec 28	jsr $28ec			jsr 	WriteValue
.2671	20 98 26	jsr $2698			jsr 	SwapDPCP 					; get the code pointer back.
.2674	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows ?
.2676	c8		iny				iny
.2677	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; if comma, another variable
.2679	f0 d7		beq $2652			beq 	CommandRead
.267b	88		dey				dey
.267c	60		rts				rts
.267d					CommandData:
.267d	a9 80		lda #$80			lda 	#TOK_EOL 					; go forward to end of line or colon.
.267f	a2 ca		ldx #$ca			ldx 	#TKW_COLON
.2681	20 99 2d	jsr $2d99			jsr 	ScanForward
.2684	88		dey				dey 								; ending on EOL is a scan issue, as it increments
.2685	60		rts				rts
.2686					CommandRestore:
.2686	ad c8 0a	lda $0ac8			lda 	basePage
.2689	8d de 0c	sta $0cde			sta 	dataPtr
.268c	ad c9 0a	lda $0ac9			lda 	basePage+1
.268f	8d df 0c	sta $0cdf			sta 	dataPtr+1
.2692	a9 03		lda #$03			lda 	#3
.2694	8d e0 0c	sta $0ce0			sta 	dataIndex
.2697	60		rts				rts
.2698					SwapDPCP:
.2698	8a		txa				txa
.2699	48		pha				pha
.269a	98		tya				tya 								; swap Y, DataIndex
.269b	ac e0 0c	ldy $0ce0			ldy 	DataIndex
.269e	8d e0 0c	sta $0ce0			sta 	DataIndex
.26a1	a5 28		lda $28				lda 	codePtr 					; swap code/dataptr low
.26a3	ae de 0c	ldx $0cde			ldx 	dataptr
.26a6	8d de 0c	sta $0cde			sta 	dataPtr
.26a9	86 28		stx $28				stx 	codePtr
.26ab	a5 29		lda $29				lda 	codePtr+1 					; swap code/dataptr high.
.26ad	ae df 0c	ldx $0cdf			ldx 	dataptr+1
.26b0	8d df 0c	sta $0cdf			sta 	dataPtr+1
.26b3	86 29		stx $29				stx 	codePtr+1
.26b5	68		pla				pla
.26b6	aa		tax				tax
.26b7	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/compat/transfer.asm

.26b8					CommandGOSUB:
.26b8	20 5e 35	jsr $355e			jsr 	EvaluateRootInteger			; get GOSUB line on stack top.
.26bb	a2 04		ldx #$04			ldx 	#4 							; allocate 4 bytes on stack for GOSUB
.26bd	a9 47		lda #$47			lda 	#markerGOSUB  				; <marker> <return addr/offset>
.26bf	20 93 3c	jsr $3c93			jsr 	RSClaim
.26c2	a9 01		lda #$01			lda 	#1 							; save position at offset 1.
.26c4	20 bf 3c	jsr $3cbf			jsr 	RSSavePosition
.26c7	a2 00		ldx #$00			ldx 	#0 							; point back at GOSUB line
.26c9	f0 1b		beq $26e6			beq 	GotoTOS 					; and do a GOTO there.
.26cb					CommandRETURN:
.26cb	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.26cd	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.26cf	c9 47		cmp #$47			cmp 	#markerGOSUB 						; does it match
.26d1	f0 05		beq $26d8			beq 	_isok
.26d3	a2 0e		ldx #$0e			ldx 	#ErrorID_returnErr
.26d5	20 18 15	jsr $1518		jsr	errorHandler
.26d8					_isok:
.26d8	a9 01		lda #$01			lda 	#1
.26da	20 d2 3c	jsr $3cd2			jsr 	RSLoadPosition 				; reload the position from offset 1.
.26dd	a9 04		lda #$04			lda 	#4 							; throw 4 bytes from stack.
.26df	20 b5 3c	jsr $3cb5			jsr 	RSFree
.26e2	60		rts				rts
.26e3					CommandGOTO:
.26e3	20 5e 35	jsr $355e			jsr 	EvaluateRootInteger 		; get GOTO line on stack top.
.26e6					GotoTOS:
.26e6	20 7f 30	jsr $307f			jsr 	ResetCodeAddress 			; simple search.
.26e9					_GotoSearch:
.26e9	a0 00		ldy #$00			ldy 	#0 							; get offset
.26eb	b1 28		lda ($28),y			lda 	(codePtr),y
.26ed	f0 21		beq $2710			beq 	_GotoError 					; not found.
.26ef	c8		iny				iny									; check LSB match
.26f0	b1 28		lda ($28),y			lda 	(codePtr),y
.26f2	d5 98		cmp $98,x			cmp 	esInt0,x
.26f4	d0 07		bne $26fd			bne 	_GotoNext
.26f6	c8		iny				iny
.26f7	b1 28		lda ($28),y			lda 	(codePtr),y
.26f9	d5 a0		cmp $a0,x			cmp 	esInt1,x
.26fb	f0 10		beq $270d			beq 	_GotoFound
.26fd					_GotoNext:
.26fd	a0 00		ldy #$00			ldy 	#0 							; go next line
.26ff	b1 28		lda ($28),y			lda 	(codePtr),y
.2701	18		clc				clc
.2702	65 28		adc $28				adc 	codePtr
.2704	85 28		sta $28				sta 	codePtr
.2706	90 e1		bcc $26e9			bcc 	_GotoSearch
.2708	e6 29		inc $29				inc 	codePtr+1
.270a	4c e9 26	jmp $26e9			jmp 	_GotoSearch
.270d					_GotoFound:
.270d	a0 03		ldy #$03			ldy 	#3 							; continue from that line
.270f	60		rts				rts
.2710					_GotoError:
.2710	a2 0c		ldx #$0c			ldx 	#ErrorID_LineNumber
.2712	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/commands/io/input.asm

=32					MaxInputSize = 32
.0ce1					InputBuffer:
>0ce1							.fill 	MaxInputSize+1
.2715					Command_Input:
.2715	b1 28		lda ($28),y			lda 	(codePtr),y 			; see what's next.
.2717	c8		iny				iny
.2718	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 				; ignore commas.
.271a	f0 f9		beq $2715			beq 	Command_Input
.271c	88		dey				dey 							; undo consume
.271d	c9 ca		cmp #$ca			cmp 	#TKW_COLON
.271f	f0 54		beq $2775			beq 	_CIExit 				; : or EOL, exit
.2721	c9 80		cmp #$80			cmp 	#TOK_EOL
.2723	f0 50		beq $2775			beq 	_CIExit
.2725	c9 40		cmp #$40			cmp 	#$40 					; variable ?
.2727	90 12		bcc $273b			bcc 	_CIVariable
.2729	c9 85		cmp #$85			cmp 	#TOK_STR 				; if not quoted string syntax error.
.272b	d0 43		bne $2770			bne 	_CISyntax
.272d	a2 00		ldx #$00			ldx 	#0
.272f	20 55 35	jsr $3555			jsr 	EvaluateString 			; evaluate and print string
.2732	20 4e 29	jsr $294e			jsr 	TOSToTemp0
.2735	20 44 28	jsr $2844			jsr 	PrintString
.2738	4c 15 27	jmp $2715			jmp 	Command_Input
.273b					_CIVariable:
.273b	a2 00		ldx #$00			ldx 	#0 						; evaluate a reference.
.273d	20 99 35	jsr $3599			jsr 	EvaluateReference  		; this is where its going
.2740					_CIRetry:
.2740	a9 3f		lda #$3f			lda 	#"?"					; print prompt
.2742	a2 14		ldx #$14		ldx	#20
.2744	20 f6 14	jsr $14f6		jsr	deviceHandler
.2747	98		tya				tya
.2748	48		pha				pha
.2749	20 89 27	jsr $2789			jsr 	InputString 			; input a string (manually)
.274c	a2 01		ldx #$01			ldx 	#1
.274e	20 76 27	jsr $2776			jsr 	BufferToStackX 			; make stack,x ref input string.
.2751	a5 90		lda $90				lda 	esType 					; if target type numeric
.2753	29 40		and #$40			and 	#$40 					; then convert to number
.2755	d0 11		bne $2768			bne 	_CIWrite
.2757	a2 01		ldx #$01			ldx 	#1
.2759	20 4e 29	jsr $294e			jsr 	TOSToTemp0 				; string address in temp0, goes here.
.275c	a9 0a		lda #$0a			lda 	#10
.275e	20 66 3a	jsr $3a66			jsr 	MInt32FromString 		; convert it back from a string.
.2761	68		pla				pla
.2762	a8		tay				tay
.2763	b0 03		bcs $2768			bcs 	_CIWrite 				; successfully converted.
.2765	18		clc				clc 							; default fail FP conversion
.2766	90 d8		bcc $2740			bcc		_CIRetry				; failed, try again.
.2768					_CIWrite:
.2768	a2 00		ldx #$00			ldx 	#0
.276a	20 ec 28	jsr $28ec			jsr 	WriteValue
.276d	4c 15 27	jmp $2715			jmp 	Command_Input
.2770					_CISyntax:
.2770	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.2772	20 18 15	jsr $1518		jsr	errorHandler
.2775					_CIExit:
.2775	60		rts				rts
.2776					BufferToStackX:
.2776	a9 e1		lda #$e1			lda 	#InputBuffer & $FF
.2778	95 98		sta $98,x			sta 	esInt0,x
.277a	a9 0c		lda #$0c			lda 	#InputBuffer >> 8
.277c	95 a0		sta $a0,x			sta 	esInt1,x
.277e	a9 00		lda #$00			lda 	#0
.2780	95 a8		sta $a8,x			sta 	esInt2,x
.2782	95 b0		sta $b0,x			sta 	esInt3,x
.2784	a9 40		lda #$40			lda 	#$40
.2786	95 90		sta $90,x			sta 	esType,x
.2788	60		rts				rts
.2789					InputString:
.2789	a9 00		lda #$00			lda 	#0
.278b	8d e1 0c	sta $0ce1			sta 	InputBuffer
.278e					_InputLoop:
.278e	a2 02		ldx #$02		ldx	#2
.2790	20 f6 14	jsr $14f6		jsr	deviceHandler
.2793	a2 0a		ldx #$0a		ldx	#10
.2795	20 f6 14	jsr $14f6		jsr	deviceHandler
.2798	c9 00		cmp #$00			cmp 	#0
.279a	f0 f2		beq $278e			beq 	_InputLoop
.279c	c9 08		cmp #$08			cmp 	#8
.279e	f0 19		beq $27b9			beq 	_InputBackspace
.27a0	c9 0d		cmp #$0d			cmp 	#13
.27a2	f0 21		beq $27c5			beq 	_InputExit
.27a4	ae e1 0c	ldx $0ce1			ldx 	InputBuffer
.27a7	e0 20		cpx #$20			cpx 	#MaxInputSize 			; too many characters
.27a9	f0 e3		beq $278e			beq 	_InputLoop
.27ab	9d e2 0c	sta $0ce2,x			sta 	InputBuffer+1,x 		; write char
.27ae	ee e1 0c	inc $0ce1			inc 	InputBuffer 			; advance count.
.27b1					_InputPrintLoop:
.27b1	a2 14		ldx #$14		ldx	#20
.27b3	20 f6 14	jsr $14f6		jsr	deviceHandler
.27b6	4c 8e 27	jmp $278e			jmp	 	_InputLoop
.27b9					_InputBackspace:
.27b9	ad e1 0c	lda $0ce1			lda 	InputBuffer 			; at start
.27bc	f0 d0		beq $278e			beq 	_InputLoop
.27be	ce e1 0c	dec $0ce1			dec 	InputBuffer
.27c1	a9 08		lda #$08			lda 	#8
.27c3	d0 ec		bne $27b1			bne 	_InputPrintLoop
.27c5					_InputExit:
.27c5	a2 06		ldx #$06		ldx	#6
.27c7	20 f6 14	jsr $14f6		jsr	deviceHandler
.27ca	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/io/print.asm

.0d02					lastPrintToken:
>0d02							.fill 	1
.27cb					Command_Print:
.27cb	a9 00		lda #$00			lda 	#0 							; clear LPT to a non token
.27cd	8d 02 0d	sta $0d02			sta 	lastPrintToken
.27d0	88		dey				dey
.27d1					_PrintLoopSkip:
.27d1	c8		iny				iny
.27d2					_PrintLoop:
.27d2	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows
.27d4	c9 80		cmp #$80			cmp 	#TOK_EOL  					; done if end of line or colon
.27d6	f0 5b		beq $2833			beq 	_PrintExit
.27d8	c9 ca		cmp #$ca			cmp 	#TKW_COLON
.27da	f0 57		beq $2833			beq 	_PrintExit
.27dc	8d 02 0d	sta $0d02			sta 	lastPrintToken 				; update Last print token, so we check ; and ,
.27df	c9 cc		cmp #$cc			cmp 	#TKW_SEMICOLON 				; ignore semicolon
.27e1	f0 ee		beq $27d1			beq 	_PrintLoopSkip
.27e3	c9 cd		cmp #$cd			cmp 	#TKW_QUOTE 					; ' is new line
.27e5	f0 3c		beq $2823			beq	 	_PrintNewLine
.27e7	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; , is print tab
.27e9	f0 40		beq $282b			beq 	_PrintTab
.27eb	20 3f 35	jsr $353f			jsr 	EvaluateRoot 				; evaluate something at the root
.27ee	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.27f0	85 2a		sta $2a				sta 	temp0
.27f2	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.27f4	85 2b		sta $2b				sta 	1+(temp0)
.27f6	a5 90		lda $90				lda 	esType 						; get type
.27f8	f0 15		beq $280f			beq		_PrintInteger
.27fa	4a		lsr a				lsr 	a 							; check for floating point
.27fb	b0 08		bcs $2805			bcs 	_PrintFloat
.27fd					_PrintString:
.27fd	a2 00		ldx #$00			ldx 	#0 							; bottom string to temp0
.27ff	20 4e 29	jsr $294e			jsr 	TOSToTemp0
.2802	4c 1d 28	jmp $281d			jmp 	_PrintTemp0 				; print no leading space.
.2805					_PrintFloat:
.2805	a9 00		lda #$00			lda 	#0 							; stack level.
.2807	a2 16		ldx #$16		ldx	#22
.2809	20 5c 24	jsr $245c		jsr	floatingpointHandler
.280c	4c 16 28	jmp $2816			jmp 	_PrintSpaceTemp0
.280f					_PrintInteger:
.280f	a9 8a		lda #$8a			lda 	#10+$80 					; base 10 signed
.2811	a2 00		ldx #$00			ldx 	#0 							; bottom stack element
.2813	20 4e 3b	jsr $3b4e			jsr 	MInt32ToString				; convert to text
.2816					_PrintSpaceTemp0:
.2816	a9 20		lda #$20			lda 	#32
.2818	a2 14		ldx #$14		ldx	#20
.281a	20 f6 14	jsr $14f6		jsr	deviceHandler
.281d					_PrintTemp0:
.281d	20 44 28	jsr $2844			jsr 	PrintString
.2820	4c d2 27	jmp $27d2			jmp 	_PrintLoop
.2823					_PrintNewLine:
.2823	a2 06		ldx #$06		ldx	#6
.2825	20 f6 14	jsr $14f6		jsr	deviceHandler
.2828	4c d1 27	jmp $27d1			jmp 	_PrintLoopSkip
.282b					_PrintTab:
.282b	a2 1a		ldx #$1a		ldx	#26
.282d	20 f6 14	jsr $14f6		jsr	deviceHandler
.2830	4c d1 27	jmp $27d1			jmp 	_PrintLoopSkip
.2833					_PrintExit:
.2833	ad 02 0d	lda $0d02			lda		lastPrintToken 				; check last token
.2836	c9 cc		cmp #$cc			cmp 	#TKW_SEMICOLON 				; if , or ; do not print NL
.2838	f0 09		beq $2843			beq 	_PrintExit2
.283a	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.283c	f0 05		beq $2843			beq 	_PrintExit2
.283e	a2 06		ldx #$06		ldx	#6
.2840	20 f6 14	jsr $14f6		jsr	deviceHandler
.2843					_PrintExit2:
.2843	60		rts				rts
.2844					PrintString:
.2844	8a		txa				txa
.2845	48		pha				pha
.2846	98		tya				tya
.2847	48		pha				pha
.2848	a0 00		ldy #$00			ldy 	#0							; get length
.284a	b1 2a		lda ($2a),y			lda 	(temp0),y
.284c	aa		tax				tax 								; into X
.284d	e0 00		cpx #$00	_PSLoop:cpx 	#0 							; finished ?
.284f	f0 10		beq $2861			beq 	_PSExit
.2851	ca		dex				dex
.2852	8a		txa				txa
.2853	48		pha				pha
.2854	c8		iny				iny
.2855	b1 2a		lda ($2a),y			lda 	(temp0),y
.2857	a2 14		ldx #$14		ldx	#20
.2859	20 f6 14	jsr $14f6		jsr	deviceHandler
.285c	68		pla				pla
.285d	aa		tax				tax
.285e	4c 4d 28	jmp $284d			jmp 	_PSLoop
.2861					_PSExit:
.2861	68		pla				pla
.2862	a8		tay				tay
.2863	68		pla				pla
.2864	aa		tax				tax
.2865	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/io/text.asm

.2866					Command_CLS:
.2866	a2 04		ldx #$04		ldx	#4
.2868	20 f6 14	jsr $14f6		jsr	deviceHandler
.286b	60		rts				rts
.286c					Command_Ink:
.286c	a2 00		ldx #$00			ldx 	#0
.286e	20 68 35	jsr $3568			jsr 	EvaluateSmallInteger
.2871	a2 08		ldx #$08		ldx	#8
.2873	20 f6 14	jsr $14f6		jsr	deviceHandler
.2876	60		rts				rts
.2877					Command_Paper:
.2877	a2 00		ldx #$00			ldx 	#0
.2879	20 68 35	jsr $3568			jsr 	EvaluateSmallInteger
.287c	a2 12		ldx #$12		ldx	#18
.287e	20 f6 14	jsr $14f6		jsr	deviceHandler
.2881	60		rts				rts
.2882					Command_Locate:
.2882	a2 00		ldx #$00			ldx 	#0
.2884	20 68 35	jsr $3568			jsr 	EvaluateSmallInteger
.2887	20 78 3c	jsr $3c78			jsr 	CheckComma
.288a	e8		inx				inx
.288b	20 68 35	jsr $3568			jsr 	EvaluateSmallInteger
.288e	98		tya				tya
.288f	48		pha				pha
.2890	a4 99		ldy $99				ldy 	esInt0+1
.2892	a5 98		lda $98				lda 	esInt0
.2894	a2 10		ldx #$10		ldx	#16
.2896	20 f6 14	jsr $14f6		jsr	deviceHandler
.2899	68		pla				pla
.289a	a8		tay				tay
.289b	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/io/vdu.asm

.289c					Command_VDU:
.289c	20 5e 35	jsr $355e			jsr 	EvaluateRootInteger 			; get integer at root.
.289f	a5 98		lda $98				lda 	esInt0
.28a1	a2 14		ldx #$14		ldx	#20
.28a3	20 f6 14	jsr $14f6		jsr	deviceHandler
.28a6					_CVNext:
.28a6	b1 28		lda ($28),y			lda 	(codePtr),y 					; what follows ?
.28a8	c8		iny				iny
.28a9	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 						; comma, do again
.28ab	f0 ef		beq $289c			beq 	Command_VDU
.28ad	c9 cc		cmp #$cc			cmp 	#TKW_SEMICOLON 					; semicolon, print MSB
.28af	d0 0a		bne $28bb			bne 	_CVExit
.28b1	a5 a0		lda $a0				lda 	esInt1
.28b3	a2 14		ldx #$14		ldx	#20
.28b5	20 f6 14	jsr $14f6		jsr	deviceHandler
.28b8	4c a6 28	jmp $28a6			jmp 	_CVNext
.28bb	88		dey		_CVExit:dey
.28bc	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/link.asm


;******  Return to file: main/main.asm


;******  Processing file: main/commands/misc/assert.asm

.28bd					Command_Assert:
.28bd	20 5e 35	jsr $355e			jsr 	EvaluateRootInteger 		; what is being asserted.
.28c0	20 1f 3c	jsr $3c1f			jsr 	MInt32Zero 					; is it true ?
.28c3	f0 01		beq $28c6			beq 	_CAError
.28c5	60		rts				rts
.28c6					_CAError:
.28c6	a2 04		ldx #$04			ldx 	#ErrorID_Assert
.28c8	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/commands/misc/dim.asm

.28cb					Command_Dim:
.28cb	a2 04		ldx #$04		ldx	#4
.28cd	20 fd 4b	jsr $4bfd		jsr	variableHandler
.28d0	b1 28		lda ($28),y			lda 	(codePtr),y 				; see what follows.
.28d2	c8		iny				iny
.28d3	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; comma follows, go back and do next
.28d5	f0 f4		beq $28cb			beq 	Command_Dim
.28d7	88		dey				dey 								; unpick get
.28d8	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/misc/let.asm

.28d9					CommandLet:
.28d9	a2 00		ldx #$00			ldx 	#0  						; get address to write.
.28db	20 99 35	jsr $3599			jsr 	EvaluateReference
.28de	a9 8d		lda #$8d			lda 	#TKW_EQUAL 					; check for equals
.28e0	20 60 3c	jsr $3c60			jsr 	CheckToken
.28e3	e8		inx				inx 								; do RHS
.28e4	20 41 35	jsr $3541			jsr 	Evaluate 					; evaluate and dereference
.28e7	ca		dex				dex
.28e8	20 ec 28	jsr $28ec			jsr 	WriteValue 					; write it out
.28eb	60		rts				rts
.28ec					WriteValue:
.28ec	98		tya				tya
.28ed	48		pha				pha
.28ee	20 4e 29	jsr $294e			jsr 	TOSToTemp0 					; set temp0 to point to target address.
.28f1	b5 90		lda $90,x			lda 	esType,x 					; check the string flags match
.28f3	55 91		eor $91,x			eor 	esType+1,x 					; one string, one number causes an error.
.28f5	29 40		and #$40			and 	#$40
.28f7	d0 50		bne $2949			bne		_WVType
.28f9	a0 01		ldy #$01			ldy 	#1 							; for string, copy 0 and 1.
.28fb	b5 90		lda $90,x			lda 	esType,x 					; check for string assignment
.28fd	29 40		and #$40			and 	#$40
.28ff	d0 1f		bne $2920			bne 	_WVCopyString
.2901	b5 90		lda $90,x			lda 	esType,x 					; check both are integer.
.2903	15 91		ora $91,x			ora 	esType+1,x
.2905	4a		lsr a				lsr 	a
.2906	90 22		bcc $292a			bcc 	_WVCopyData4 				; copy 4 data bytes.
.2908	b5 90		lda $90,x			lda 	esType,x
.290a	4a		lsr a				lsr 	a
.290b	90 3c		bcc $2949			bcc 	_WVType
.290d	e8		inx				inx 								; force the value being written to be a float.
.290e	20 a3 31	jsr $31a3			jsr 	BPMakeFloat
.2911	ca		dex				dex
.2912	20 4e 29	jsr $294e			jsr 	TOSToTemp0 					; set Temp0 to write address
.2915	e8		inx				inx
.2916	8a		txa				txa
.2917	a2 22		ldx #$22		ldx	#34
.2919	20 5c 24	jsr $245c		jsr	floatingpointHandler
.291c	aa		tax				tax
.291d	4c 46 29	jmp $2946			jmp 	_WVCopyExit
.2920					_WVCopyString:
.2920	8a		txa				txa
.2921	a2 10		ldx #$10		ldx	#16
.2923	20 a3 3f	jsr $3fa3		jsr	stringHandler
.2926	aa		tax				tax
.2927	4c 46 29	jmp $2946			jmp 	_WVCopyExit
.292a					_WVCopyData4:
.292a	b5 90		lda $90,x			lda 	esType,x 					; is the int ref a byte ref ?
.292c	29 20		and #$20			and 	#$20 						; (e.g. is bit 5 set)
.292e	d0 10		bne $2940			bne 	_WVCopyData1
.2930	a0 03		ldy #$03			ldy 	#3
.2932	b5 b1		lda $b1,x			lda 	esInt3+1,x
.2934	91 2a		sta ($2a),y			sta 	(temp0),y
.2936	88		dey				dey
.2937	b5 a9		lda $a9,x			lda 	esInt2+1,x
.2939	91 2a		sta ($2a),y			sta 	(temp0),y
.293b	88		dey				dey
.293c	b5 a1		lda $a1,x			lda 	esInt1+1,x
.293e	91 2a		sta ($2a),y			sta 	(temp0),y
.2940					_WVCopyData1:
.2940	a0 00		ldy #$00			ldy 	#0
.2942	b5 99		lda $99,x			lda 	esInt0+1,x
.2944	91 2a		sta ($2a),y			sta 	(temp0),y
.2946					_WVCopyExit:
.2946	68		pla				pla
.2947	a8		tay				tay
.2948	60		rts				rts
.2949					_WVType:
.2949	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.294b	20 18 15	jsr $1518		jsr	errorHandler
.294e					TOSToTemp0:
.294e	b5 98		lda $98,x			lda 	esInt0,x
.2950	85 2a		sta $2a				sta 	temp0
.2952	b5 a0		lda $a0,x			lda 	esInt1,x
.2954	85 2b		sta $2b				sta 	temp0+1
.2956	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/misc/poke.asm

.2957					Command_Poke:
.2957	a9 01		lda #$01			lda 	#1
.2959	d0 06		bne $2961			bne 	PokeGeneral
.295b					Command_Doke:
.295b	a9 02		lda #$02			lda 	#2
.295d	d0 02		bne $2961			bne 	PokeGeneral
.295f					Command_Loke:
.295f	a9 03		lda #$03			lda 	#3
.2961					PokeGeneral:
.2961	48		pha				pha 								; save id (PDL = 123)
.2962	20 5e 35	jsr $355e			jsr 	EvaluateRootInteger 		; target address
.2965	20 78 3c	jsr $3c78			jsr	 	CheckComma
.2968	e8		inx				inx
.2969	20 60 35	jsr $3560			jsr 	EvaluateInteger 			; what value to POKE ?
.296c	ca		dex				dex
.296d	20 4e 29	jsr $294e			jsr 	TOSToTemp0 					; temp0 points to the target address
.2970	84 32		sty $32				sty 	tempShort 					; save Y
.2972	68		pla				pla 								; get copy type (1-3) and dispatch
.2973	aa		tax				tax
.2974	ca		dex				dex
.2975	f0 14		beq $298b			beq 	_Poke1
.2977	ca		dex				dex
.2978	f0 0b		beq $2985			beq 	_Poke2
.297a	a0 03		ldy #$03			ldy 	#3							; put 4 bytes
.297c	a5 b1		lda $b1				lda 	esInt3+1
.297e	91 2a		sta ($2a),y			sta 	(temp0),y
.2980	88		dey				dey
.2981	a5 a9		lda $a9				lda 	esInt2+1
.2983	91 2a		sta ($2a),y			sta 	(temp0),y
.2985					_Poke2:
.2985	a0 01		ldy #$01			ldy 	#1
.2987	a5 a1		lda $a1				lda 	esInt1+1
.2989	91 2a		sta ($2a),y			sta 	(temp0),y
.298b					_Poke1:
.298b	a0 00		ldy #$00			ldy 	#0
.298d	a5 99		lda $99				lda 	esInt0+1
.298f	91 2a		sta ($2a),y			sta 	(temp0),y
.2991	a4 32		ldy $32				ldy 	tempShort 					; restore Y and exit
.2993	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/misc/rem.asm

.2994					Command_Rem:
.2994					Command_Rem2:
.2994	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows
.2996	c9 85		cmp #$85			cmp 	#TOK_STR 					; if it is a string then skip it.
.2998	d0 06		bne $29a0			bne 	_CRNotString
.299a	c8		iny				iny
.299b	98		tya				tya
.299c	38		sec				sec
.299d	71 28		adc ($28),y			adc 	(codePtr),y 				; get string size, add to Y, +1 for the length
.299f	a8		tay				tay
.29a0					_CRNotString:
.29a0	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/misc/stopend.asm

.29a1					CommandStop:
.29a1	a2 06		ldx #$06			ldx 	#ErrorID_Stop
.29a3	20 18 15	jsr $1518		jsr	errorHandler
.29a6					CommandEnd:
.29a6	4c e1 3c	jmp $3ce1			jmp 	WarmStart
.29a9					CommandXemu:
.29a9	4c ff ff	jmp $ffff			jmp 	$FFFF 						; fudge to crash out of emulator
.29ac					AdvanceNextLine:
.29ac	a0 00		ldy #$00			ldy 	#0 							; get offset
.29ae	b1 28		lda ($28),y			lda 	(codePtr),y
.29b0	18		clc				clc 								; add to codePtr
.29b1	65 28		adc $28				adc 	codePtr
.29b3	85 28		sta $28				sta 	codePtr
.29b5	90 02		bcc $29b9			bcc 	_ANLNoCarry
.29b7	e6 29		inc $29				inc 	codePtr+1
.29b9					_ANLNoCarry:
.29b9	b1 28		lda ($28),y			lda 	(codePtr),y 				; if end of program (or was just stand alone.
.29bb	f0 e9		beq $29a6			beq 	CommandEnd 					; execute END
.29bd	a0 03		ldy #$03			ldy 	#3 							; start of tokens on line.
.29bf	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/for.asm

.29c0					Command_FOR:
.29c0	a9 46		lda #$46			lda 	#markerFOR 					; allocate the space and set the marker
.29c2	a2 0b		ldx #$0b			ldx 	#11
.29c4	20 93 3c	jsr $3c93			jsr 	RSClaim
.29c7	20 d9 28	jsr $28d9			jsr 	CommandLET 					; do the same as LET FOR [a = 4]
.29ca	a5 90		lda $90				lda 	esType 						; check type should be integer reference.
.29cc	c9 80		cmp #$80			cmp 	#$80 						; we do not do FOR floats.
.29ce	d0 4c		bne $2a1c			bne 	_CFType
.29d0	a9 ce		lda #$ce			lda 	#TKW_TO 					; check TO present.
.29d2	20 60 3c	jsr $3c60			jsr 	CheckToken
.29d5	a2 01		ldx #$01			ldx 	#1 							; keep the variable address in stack 0
.29d7	20 60 35	jsr $3560			jsr 	EvaluateInteger				; get terminal value in stack 1
.29da	98		tya				tya
.29db	48		pha				pha
.29dc	a0 04		ldy #$04			ldy 	#4
.29de	a5 98		lda $98				lda		esInt0 						; copy the address of the index variable into 4 and 5
.29e0	91 37		sta ($37),y			sta 	(rsPointer),y
.29e2	c8		iny				iny
.29e3	a5 a0		lda $a0				lda		esInt1
.29e5	91 37		sta ($37),y			sta 	(rsPointer),y
.29e7	c8		iny				iny
.29e8	a9 01		lda #$01			lda 	#1  						; the default step in 6, (-128 .. 127 only)
.29ea	91 37		sta ($37),y			sta 	(rsPointer),y
.29ec	c8		iny				iny
.29ed	a5 99		lda $99				lda		esInt0+1 					; terminal value in 7 to 11.
.29ef	91 37		sta ($37),y			sta 	(rsPointer),y
.29f1	c8		iny				iny
.29f2	a5 a1		lda $a1				lda		esInt1+1
.29f4	91 37		sta ($37),y			sta 	(rsPointer),y
.29f6	c8		iny				iny
.29f7	a5 a9		lda $a9				lda		esInt2+1
.29f9	91 37		sta ($37),y			sta 	(rsPointer),y
.29fb	c8		iny				iny
.29fc	a5 b1		lda $b1				lda		esInt3+1
.29fe	91 37		sta ($37),y			sta 	(rsPointer),y
.2a00	68		pla				pla
.2a01	a8		tay				tay
.2a02	b1 28		lda ($28),y			lda 	(codePtr),y 				; followed by STEP.
.2a04	c9 cf		cmp #$cf			cmp 	#TKW_STEP
.2a06	d0 0e		bne $2a16			bne 	_CFDone
.2a08	c8		iny				iny									; skip over step.
.2a09	20 60 35	jsr $3560			jsr 	EvaluateInteger 			; get step
.2a0c	98		tya				tya
.2a0d	48		pha				pha
.2a0e	b5 98		lda $98,x			lda 	esInt0,x 					; copy it into step (bit lazy here)
.2a10	a0 06		ldy #$06			ldy 	#6
.2a12	91 37		sta ($37),y			sta 	(rsPointer),y
.2a14	68		pla				pla
.2a15	a8		tay				tay
.2a16					_CFDone:
.2a16	a9 01		lda #$01			lda 	#1
.2a18	20 bf 3c	jsr $3cbf			jsr 	RSSavePosition 				; save position.
.2a1b	60		rts				rts
.2a1c					_CFType:
.2a1c	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.2a1e	20 18 15	jsr $1518		jsr	errorHandler
.2a21					Command_NEXT:
.2a21	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.2a23	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.2a25	c9 46		cmp #$46			cmp 	#markerFOR 						; does it match
.2a27	f0 05		beq $2a2e			beq 	_isok
.2a29	a2 10		ldx #$10			ldx 	#ErrorID_nextErr
.2a2b	20 18 15	jsr $1518		jsr	errorHandler
.2a2e					_isok:
.2a2e	b1 28		lda ($28),y			lda 	(codePtr),y 				; is it NEXT <index>
.2a30	c9 40		cmp #$40			cmp 	#$40 						; e.g. a variable follows 00-3F
.2a32	b0 18		bcs $2a4c			bcs 	_CNNoIndex
.2a34	a2 00		ldx #$00			ldx 	#0 							; start on stack
.2a36	20 99 35	jsr $3599			jsr 	EvaluateReference 			; this is the variable/parameter to localise.
.2a39	98		tya				tya
.2a3a	48		pha				pha
.2a3b	a0 04		ldy #$04			ldy 	#4 							; check same variable as that stored at +4,+5
.2a3d	b1 37		lda ($37),y			lda 	(rsPointer),y
.2a3f	d5 98		cmp $98,x			cmp 	esInt0,x
.2a41	d0 76		bne $2ab9			bne 	_CNBadIndex
.2a43	c8		iny				iny
.2a44	b1 37		lda ($37),y			lda 	(rsPointer),y
.2a46	d5 a0		cmp $a0,x			cmp 	esInt1,x
.2a48	d0 6f		bne $2ab9			bne 	_CNBadIndex
.2a4a	68		pla				pla
.2a4b	a8		tay				tay
.2a4c					_CNNoIndex:
.2a4c	98		tya				tya
.2a4d	48		pha				pha
.2a4e	a0 04		ldy #$04			ldy 	#4 							; make temp0 point to the index
.2a50	b1 37		lda ($37),y			lda 	(rsPointer),y
.2a52	85 2a		sta $2a				sta 	temp0
.2a54	c8		iny				iny
.2a55	b1 37		lda ($37),y			lda 	(rsPointer),y
.2a57	85 2b		sta $2b				sta 	temp0+1
.2a59	c8		iny				iny
.2a5a	a2 00		ldx #$00			ldx 	#0 							; X is the sign extend part of the step.
.2a5c	b1 37		lda ($37),y			lda 	(rsPointer),y 				; get the step.
.2a5e	85 2f		sta $2f				sta 	temp2+1 					; save for later.
.2a60	10 01		bpl $2a63			bpl 	_CNSignX
.2a62	ca		dex				dex  								; X = $FF
.2a63					_CNSignX:
.2a63	18		clc				clc 								; add to the LSB
.2a64	a0 00		ldy #$00			ldy 	#0
.2a66	71 2a		adc ($2a),y			adc 	(temp0),y
.2a68	91 2a		sta ($2a),y			sta 	(temp0),y
.2a6a					_CNPropogate:
.2a6a	c8		iny				iny  								; add the sign extended in X to the rest.
.2a6b	8a		txa				txa
.2a6c	71 2a		adc ($2a),y			adc 	(temp0),y
.2a6e	91 2a		sta ($2a),y			sta 	(temp0),y
.2a70	c8		iny				iny
.2a71	8a		txa				txa
.2a72	71 2a		adc ($2a),y			adc 	(temp0),y
.2a74	91 2a		sta ($2a),y			sta 	(temp0),y
.2a76	c8		iny				iny
.2a77	8a		txa				txa
.2a78	71 2a		adc ($2a),y			adc 	(temp0),y
.2a7a	91 2a		sta ($2a),y			sta 	(temp0),y
.2a7c	18		clc				clc 								; point temp1 to the terminal value stored in the stack.
.2a7d	a5 37		lda $37				lda 	rsPointer
.2a7f	69 07		adc #$07			adc 	#7
.2a81	85 2c		sta $2c				sta 	temp1
.2a83	a9 00		lda #$00			lda 	#0
.2a85	85 2e		sta $2e				sta 	temp2 						; clear temp2, which is the OR of all the subtractions.
.2a87	a8		tay				tay 								; and clear the Y register again.
.2a88	65 38		adc $38				adc 	rsPointer+1
.2a8a	85 2d		sta $2d				sta 	temp1+1
.2a8c	38		sec				sec 								; calculate current - limit oring interim values.
.2a8d	20 c5 2a	jsr $2ac5			jsr 	_CNCompare 					; each of these does a byte.
.2a90	20 c5 2a	jsr $2ac5			jsr 	_CNCompare 					; we calculate the OR of all these subtractions.
.2a93	20 c5 2a	jsr $2ac5			jsr 	_CNCompare 					; and the carry of the subtraction.
.2a96	20 c5 2a	jsr $2ac5			jsr 	_CNCompare
.2a99	50 02		bvc $2a9d			bvc 	_CNNoOverflow 				; converts to a signed comparison on the sign bit.
.2a9b	49 80		eor #$80			eor 	#$80
.2a9d					_CNNoOverflow:
.2a9d	a4 2f		ldy $2f				ldy 	temp2+1						; get step back
.2a9f	30 1d		bmi $2abe			bmi 	_CNCheckDownto
.2aa1	c9 00		cmp #$00			cmp 	#0
.2aa3	30 0c		bmi $2ab1			bmi 	_CNLoopRound 				; loop round if < =
.2aa5	a5 2e		lda $2e				lda 	temp2
.2aa7	f0 08		beq $2ab1			beq 	_CNLoopRound
.2aa9					_CNLoopExit:
.2aa9	68		pla				pla
.2aaa	a8		tay				tay
.2aab	a9 0b		lda #$0b			lda 	#11
.2aad	20 b5 3c	jsr $3cb5			jsr 	RSFree
.2ab0	60		rts				rts
.2ab1					_CNLoopRound:
.2ab1	68		pla				pla
.2ab2	a8		tay				tay
.2ab3	a9 01		lda #$01			lda 	#1
.2ab5	20 d2 3c	jsr $3cd2			jsr 	RSLoadPosition				; go back to the loop top
.2ab8	60		rts				rts
.2ab9					_CNBadIndex:
.2ab9	a2 13		ldx #$13			ldx 	#ErrorID_BadIndex
.2abb	20 18 15	jsr $1518		jsr	errorHandler
.2abe					_CNCheckDownto:
.2abe	c9 00		cmp #$00			cmp 	#0
.2ac0	10 ef		bpl $2ab1			bpl 	_CNLoopRound
.2ac2	4c a9 2a	jmp $2aa9			jmp 	_CNLoopExit
.2ac5					_CNCompare:
.2ac5	b1 2a		lda ($2a),y			lda 	(temp0),y 					; do the subtraction - compare don't care about answer
.2ac7	f1 2c		sbc ($2c),y			sbc 	(temp1),y
.2ac9	05 2e		ora $2e				ora 	temp2 						; Or into temp2 (does not affect carry)
.2acb	85 2e		sta $2e				sta 	temp2
.2acd	c8		iny				iny
.2ace	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/if.asm

.2acf					CommandIf:
.2acf	20 5e 35	jsr $355e			jsr 	EvaluateRootInteger 		; get what's being tested.
.2ad2	b1 28		lda ($28),y			lda 	(codePtr),y 				; check for IF .. THEN or IF .. GOTO which are single lines.
.2ad4	c9 91		cmp #$91			cmp 	#TKW_GOTO
.2ad6	f0 04		beq $2adc			beq 	_IfSimple
.2ad8	c9 a1		cmp #$a1			cmp 	#TKW_THEN
.2ada	d0 1b		bne $2af7			bne 	_IfComplex
.2adc					_IfSimple:
.2adc	20 1f 3c	jsr $3c1f			jsr 	MInt32Zero					; check if TOS zero
.2adf	f0 10		beq $2af1			beq 	_IfEOL 						; go to next line.
.2ae1	b1 28		lda ($28),y			lda 	(codePtr),y 				; get and skip token.
.2ae3	c8		iny				iny
.2ae4	c9 91		cmp #$91			cmp 	#TKW_GOTO 					; was it if GOTO ?
.2ae6	f0 0c		beq $2af4			beq 	_IfGoto 					; do the Goto code
.2ae8	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows the THEN ?
.2aea	29 c0		and #$c0			and 	#$C0 						; check $40-$7F
.2aec	c9 40		cmp #$40			cmp 	#$40 						; e.g. number IF x = 0 THEN 170
.2aee	f0 04		beq $2af4			beq 	_IfGoto
.2af0	60		rts				rts 								; else continue on this line.
.2af1					_IfEOL:
.2af1	4c ac 29	jmp $29ac			jmp 	AdvanceNextLine 			; go to next line
.2af4					_IfGoto:
.2af4	4c e3 26	jmp $26e3			jmp 	CommandGoto
.2af7					_IfComplex:
.2af7	20 1f 3c	jsr $3c1f			jsr 	MInt32Zero 					; is it true ?
.2afa	f0 01		beq $2afd			beq 	_IFSkip 					; if non-zero then skip to ELSE/ENDIF
.2afc	60		rts				rts 								; else continue.
.2afd					_IFSkip:
.2afd	a9 d6		lda #$d6			lda	 	#TKW_ELSE 					; test failed, go to ELSE or ENDIF whichever comes first.
.2aff	a2 a2		ldx #$a2			ldx 	#TKW_ENDIF
.2b01	4c 99 2d	jmp $2d99			jmp		ScanForward
.2b04					Command_ELSE:
.2b04	a2 a2		ldx #$a2			ldx 	#TKW_ENDIF
.2b06	8a		txa				txa
.2b07	4c 99 2d	jmp $2d99			jmp		ScanForward
.2b0a					Command_ENDIF:
.2b0a	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/local.asm

.0d03					storeSize:
>0d03							.fill 	1
.2b0b					CommandLocal:
.2b0b	a2 00		ldx #$00			ldx 	#0
.2b0d	20 29 2b	jsr $2b29			jsr 	LocaliseVariable 			; localise one.
.2b10					_CLCheckNext:
.2b10	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows ?
.2b12	c8		iny				iny
.2b13	c9 8d		cmp #$8d			cmp 	#TKW_EQUAL 					; something local "x = 2" ?
.2b15	f0 06		beq $2b1d			beq 	_CLAssignment
.2b17	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; comma try again.
.2b19	f0 f0		beq $2b0b			beq 	CommandLocal
.2b1b	88		dey				dey
.2b1c	60		rts				rts
.2b1d					_CLAssignment:
.2b1d	a2 01		ldx #$01			ldx 	#1
.2b1f	20 41 35	jsr $3541			jsr 	Evaluate 					; evaluate RHS
.2b22	ca		dex				dex
.2b23	20 ec 28	jsr $28ec			jsr 	WriteValue
.2b26	4c 10 2b	jmp $2b10			jmp 	_CLCheckNext
.2b29					LocaliseVariable:
.2b29	b1 28		lda ($28),y			lda 	(codePtr),y 				; check it's a variable.
.2b2b	c9 40		cmp #$40			cmp 	#$40
.2b2d	b0 67		bcs $2b96			bcs 	_LVSyntax
.2b2f	8a		txa				txa 								; get the address of that variable.
.2b30	a2 02		ldx #$02		ldx	#2
.2b32	20 fd 4b	jsr $4bfd		jsr	variableHandler
.2b35	aa		tax				tax
.2b36	8a		txa				txa
.2b37	48		pha				pha
.2b38	98		tya				tya
.2b39	48		pha				pha
.2b3a	20 4e 29	jsr $294e			jsr 	TOSToTemp0 					; the address of the variable is now in temp0.
.2b3d	b5 90		lda $90,x			lda 	esType,x 					; get the type
.2b3f	0a		asl a				asl 	a
.2b40	10 16		bpl $2b58			bpl 	_LVPushNumber
.2b42	a0 00		ldy #$00			ldy 	#0 							; put address of data in temp1
.2b44	b1 2a		lda ($2a),y			lda 	(temp0),y
.2b46	c8		iny				iny
.2b47	85 2c		sta $2c				sta 	temp1
.2b49	b1 2a		lda ($2a),y			lda 	(temp0),y
.2b4b	85 2d		sta $2d				sta 	temp1+1
.2b4d	a0 00		ldy #$00			ldy 	#0 	 						; get length
.2b4f	b1 2c		lda ($2c),y			lda 	(temp1),y
.2b51	aa		tax				tax 								; into X
.2b52	e8		inx				inx 								; +1 for length.
.2b53	a9 24		lda #$24			lda 	#markerString
.2b55	4c 6d 2b	jmp $2b6d			jmp 	_LVWriteFrame
.2b58					_LVPushNumber:
.2b58	a5 2a		lda $2a				lda 	temp0 						; storage address and data source are the same
.2b5a	85 2c		sta $2c				sta 	temp1
.2b5c	a5 2b		lda $2b				lda 	temp0+1
.2b5e	85 2d		sta $2d				sta 	temp1+1
.2b60	b5 90		lda $90,x			lda 	esType,x 					; put float flag into carry.
.2b62	4a		lsr a				lsr 	a
.2b63	a9 25		lda #$25			lda 	#markerInt 					; get marker and size.
.2b65	a2 04		ldx #$04			ldx 	#VarISize
.2b67	90 04		bcc $2b6d			bcc 	_LVIsInteger
.2b69	a9 23		lda #$23			lda 	#markerFloat
.2b6b	a2 06		ldx #$06			ldx 	#VarFSize
.2b6d					_LVIsInteger:
.2b6d					_LVWriteFrame:
.2b6d	8e 03 0d	stx $0d03			stx 	storeSize 					; number of bytes to copy from (temp0)
.2b70	e8		inx				inx 								; allocate 3 bytes, 2 for the address, 1 for the marker.
.2b71	e8		inx				inx
.2b72	e8		inx				inx
.2b73	20 93 3c	jsr $3c93			jsr 	RSClaim 					; create the stack frame.
.2b76	a5 2a		lda $2a				lda 	temp0 						; copy the target address to slots 1 & 2
.2b78	a0 01		ldy #$01			ldy 	#1
.2b7a	91 37		sta ($37),y			sta 	(rsPointer),y
.2b7c	c8		iny				iny
.2b7d	a5 2b		lda $2b				lda 	temp0+1
.2b7f	91 37		sta ($37),y			sta 	(rsPointer),y
.2b81	a0 00		ldy #$00			ldy 	#0
.2b83					_LVCopyData:
.2b83	b1 2c		lda ($2c),y			lda 	(temp1),y 					; get data from source, temp1
.2b85	c8		iny				iny 								; write allowing for the header bit.
.2b86	c8		iny				iny
.2b87	c8		iny				iny
.2b88	91 37		sta ($37),y			sta 	(rsPointer),y
.2b8a	88		dey				dey
.2b8b	88		dey				dey
.2b8c	ce 03 0d	dec $0d03			dec 	storeSize 					; do it storesize times
.2b8f	d0 f2		bne $2b83			bne 	_LVCopyData
.2b91	68		pla				pla
.2b92	a8		tay				tay
.2b93	68		pla				pla
.2b94	aa		tax				tax
.2b95	60		rts				rts
.2b96					_LVSyntax:
.2b96	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.2b98	20 18 15	jsr $1518		jsr	errorHandler
.2b9b					RestoreLocals:
.2b9b	a2 00		ldx #$00			ldx 	#0
.2b9d	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.2b9f	c9 40		cmp #$40			cmp	 	#64
.2ba1	90 01		bcc $2ba4			bcc 	_RLocal
.2ba3	60		rts				rts
.2ba4					_RLocal:
.2ba4	8a		txa				txa
.2ba5	48		pha				pha
.2ba6	98		tya				tya
.2ba7	48		pha				pha
.2ba8	a0 01		ldy #$01			ldy 	#1 							; copy target address to temp0
.2baa	b1 37		lda ($37),y			lda 	(rsPointer),y
.2bac	85 2a		sta $2a				sta 	temp0
.2bae	c8		iny				iny
.2baf	b1 37		lda ($37),y			lda 	(rsPointer),y
.2bb1	85 2b		sta $2b				sta 	temp0+1
.2bb3	a0 00		ldy #$00			ldy 	#0 							; get type back.
.2bb5	b1 37		lda ($37),y			lda 	(rsPointer),y
.2bb7	c9 24		cmp #$24			cmp 	#markerString 				; string is ... different :)
.2bb9	f0 28		beq $2be3			beq 	_RString
.2bbb	a2 04		ldx #$04			ldx		#VARISize 					; size integer
.2bbd	c9 25		cmp #$25			cmp 	#markerInt
.2bbf	f0 02		beq $2bc3			beq 	_RIsInteger
.2bc1	a2 06		ldx #$06			ldx 	#VARFSize 					; size float
.2bc3					_RIsInteger:
.2bc3	8a		txa				txa
.2bc4	48		pha				pha
.2bc5	a0 03		ldy #$03			ldy 	#3							; start size to copy back from pointer.
.2bc7					_RCopyBack:
.2bc7	b1 37		lda ($37),y			lda 	(rsPointer),y
.2bc9	88		dey				dey
.2bca	88		dey				dey
.2bcb	88		dey				dey
.2bcc	91 2a		sta ($2a),y			sta 	(temp0),y
.2bce	c8		iny				iny
.2bcf	c8		iny				iny
.2bd0	c8		iny				iny
.2bd1	c8		iny				iny
.2bd2	ca		dex				dex
.2bd3	d0 f2		bne $2bc7			bne 	_RCopyBack
.2bd5	68		pla				pla 								; get size add 3
.2bd6	18		clc				clc
.2bd7	69 03		adc #$03			adc 	#3 							; (2 for address one for marker)
.2bd9					_RRestoreAAndLoop:
.2bd9	20 b5 3c	jsr $3cb5			jsr 	RSFree
.2bdc	68		pla				pla
.2bdd	a8		tay				tay
.2bde	68		pla				pla
.2bdf	aa		tax				tax
.2be0	4c 9b 2b	jmp $2b9b			jmp 	RestoreLocals 				; go see if there are any more locals.
.2be3					_RString:
.2be3	a2 00		ldx #$00			ldx 	#0
.2be5	a0 01		ldy #$01			ldy 	#1 							; set up for a string write.
.2be7	b1 37		lda ($37),y			lda 	(rsPointer),y
.2be9	95 98		sta $98,x			sta 	esInt0,x
.2beb	c8		iny				iny
.2bec	b1 37		lda ($37),y			lda 	(rsPointer),y
.2bee	95 a0		sta $a0,x			sta 	esInt1,x
.2bf0	18		clc				clc
.2bf1	a5 37		lda $37				lda 	rsPointer
.2bf3	69 03		adc #$03			adc 	#3
.2bf5	95 99		sta $99,x			sta 	esInt0+1,x
.2bf7	a5 38		lda $38				lda 	rsPointer+1
.2bf9	69 00		adc #$00			adc 	#0
.2bfb	95 a1		sta $a1,x			sta 	esInt1+1,x
.2bfd	8a		txa				txa
.2bfe	a2 10		ldx #$10		ldx	#16
.2c00	20 a3 3f	jsr $3fa3		jsr	stringHandler
.2c03	a0 03		ldy #$03			ldy 	#3 							; get string length
.2c05	b1 37		lda ($37),y			lda 	(rsPointer),y
.2c07	18		clc				clc
.2c08	69 04		adc #$04			adc 	#4 							; add 4 (pointer, marker, length) to restore.
.2c0a	4c d9 2b	jmp $2bd9			jmp 	_RRestoreAAndLoop

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/proc.asm

.0d04					paramCount:
>0d04							.fill 	1
.2c0d					CallProc:
.2c0d	20 95 2c	jsr $2c95			jsr 	FindProcedure 				; find procedure, put in temp0. A contains name length.
.2c10	48		pha				pha 								; save length on stack
.2c11	85 32		sta $32				sta 	tempShort 					; save length in tempShort
.2c13	a5 2b		lda $2b				lda 	temp0+1 					; save procedure target on stack.
.2c15	48		pha				pha
.2c16	a5 2a		lda $2a				lda 	temp0
.2c18	48		pha				pha
.2c19	98		tya				tya 								; calculate Y + length
.2c1a	18		clc				clc
.2c1b	65 32		adc $32				adc 	tempShort
.2c1d	a8		tay				tay
.2c1e	a2 00		ldx #$00			ldx 	#0 							; where the first parameter goes - 1
.2c20					_CallProcEvalParams:
.2c20	e8		inx				inx
.2c21	b1 28		lda ($28),y			lda 	(codePtr),y 				; do we have ) , e.g. the end of the parameters ?
.2c23	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.2c25	f0 0b		beq $2c32			beq 	_CPDoneParams
.2c27	20 41 35	jsr $3541			jsr 	Evaluate 					; evaluate a parameter
.2c2a	b1 28		lda ($28),y			lda 	(codePtr),Y 				; get what's next, preconsume
.2c2c	c8		iny				iny
.2c2d	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; if comma, go get another parameter
.2c2f	f0 ef		beq $2c20			beq 	_CallProcEvalParams
.2c31	88		dey				dey 								; undo consumption.
.2c32					_CPDoneParams:
.2c32	20 6b 3c	jsr $3c6b			jsr 	CheckRightParen 			; check closing parenthesis.
.2c35	8e 04 0d	stx $0d04			stx 	paramCount 					; store parameter count+1
.2c38	a2 04		ldx #$04			ldx 	#4							; make space on stack
.2c3a	a9 50		lda #$50			lda 	#markerPROC
.2c3c	20 93 3c	jsr $3c93			jsr 	RSClaim
.2c3f	a9 01		lda #$01			lda 	#1 							; store return address.
.2c41	20 bf 3c	jsr $3cbf			jsr 	RSSavePosition
.2c44	68		pla				pla 								; get the new code Ptr
.2c45	85 28		sta $28				sta 	codePtr
.2c47	68		pla				pla
.2c48	85 29		sta $29				sta 	codePtr+1
.2c4a	68		pla				pla 								; length of name + 4 is the param start.
.2c4b	18		clc				clc
.2c4c	69 04		adc #$04			adc 	#4
.2c4e	a8		tay				tay
.2c4f	a2 ff		ldx #$ff			ldx 	#$FF
.2c51					_CPLoadParameters:
.2c51	e8		inx				inx 								; point to where the address should be loaded.
.2c52	ec 04 0d	cpx $0d04			cpx 	paramCount 					; too many parameters in definition ?
.2c55	f0 1e		beq $2c75			beq 	_CPParamError
.2c57	b1 28		lda ($28),y			lda 	(codePtr),y					; what follows
.2c59	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN 				; is it the right bracket
.2c5b	f0 0e		beq $2c6b			beq 	_CPParamComplete 			; done all the parameters, perhaps.
.2c5d	20 29 2b	jsr $2b29			jsr 	LocaliseVariable 			; make following variable local, ref in tos,x
.2c60	20 ec 28	jsr $28ec			jsr 	WriteValue 					; copy the evaluated parameter into there.
.2c63	b1 28		lda ($28),y			lda 	(codePtr),y 				; followed by a comma ?
.2c65	c8		iny				iny
.2c66	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.2c68	f0 e7		beq $2c51			beq 	_CPLoadParameters
.2c6a	88		dey				dey 								; no, unconsume and check for )
.2c6b					_CPParamComplete:
.2c6b	20 6b 3c	jsr $3c6b			jsr 	CheckRightParen 			; check )
.2c6e	e8		inx				inx 								; check right number of parameters have been consumed
.2c6f	ec 04 0d	cpx $0d04			cpx 	paramCount
.2c72	d0 01		bne $2c75			bne 	_CPParamError
.2c74	60		rts				rts
.2c75					_CPParamError:
.2c75	a2 18		ldx #$18			ldx 	#ErrorID_Params
.2c77	20 18 15	jsr $1518		jsr	errorHandler
.2c7a					ReturnProc:
.2c7a	20 9b 2b	jsr $2b9b			jsr 	RestoreLocals 				; get the locals back.
.2c7d	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.2c7f	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.2c81	c9 50		cmp #$50			cmp 	#markerPROC 						; does it match
.2c83	f0 05		beq $2c8a			beq 	_isok
.2c85	a2 12		ldx #$12			ldx 	#ErrorID_endProcErr
.2c87	20 18 15	jsr $1518		jsr	errorHandler
.2c8a					_isok:
.2c8a	a9 01		lda #$01			lda 	#1
.2c8c	20 d2 3c	jsr $3cd2			jsr 	RSLoadPosition 				; reload the position from offset 1.
.2c8f	a9 04		lda #$04			lda 	#4 							; throw 4 bytes from stack.
.2c91	20 b5 3c	jsr $3cb5			jsr 	RSFree
.2c94	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/proctable.asm

.0d05					procList:
>0d05							.fill 	2		 					; terminated by name high being zero.
.0d07					yInLine:
>0d07							.fill 	1
.2c95					FindProcedure:
.2c95	8c 07 0d	sty $0d07			sty 	yInLine 					; save current position.
.2c98	20 53 2d	jsr $2d53			jsr 	CalculateProcedureHash		; calculate the hash of the procedure.
.2c9b	85 2c		sta $2c				sta 	temp1
.2c9d	ad 05 0d	lda $0d05			lda		procList 					; put procList address in temp2
.2ca0	85 2e		sta $2e				sta 	temp2
.2ca2	ad 06 0d	lda $0d06			lda 	procList+1
.2ca5	85 2f		sta $2f				sta 	temp2+1
.2ca7	a0 00		ldy #$00			ldy 	#0 							; position in this table.
.2ca9					_FPLoop:
.2ca9	b1 2e		lda ($2e),y			lda 	(temp2),y
.2cab	f0 4f		beq $2cfc			beq 	_FPError 					; if so, we don't know this procedure.
.2cad	85 2b		sta $2b				sta 	temp0+1 					; copy MSB/LSB to temp0 as we go.
.2caf	c8		iny				iny
.2cb0	b1 2e		lda ($2e),y			lda 	(temp2),y
.2cb2	85 2a		sta $2a				sta 	temp0
.2cb4	c8		iny				iny
.2cb5	b1 2e		lda ($2e),y			lda 	(temp2),y					; check the procedure hash.
.2cb7	c5 2c		cmp $2c				cmp 	temp1
.2cb9	d0 2b		bne $2ce6			bne 	_FPNext 					; hash is different, go to next.
.2cbb	38		sec				sec
.2cbc	ad 07 0d	lda $0d07			lda 	yInLine 					; position in line must be at least 4
.2cbf	e9 04		sbc #$04			sbc 	#4
.2cc1	18		clc				clc
.2cc2	65 28		adc $28				adc 	codePtr
.2cc4	85 30		sta $30				sta 	temp3
.2cc6	a5 29		lda $29				lda 	codePtr+1
.2cc8	69 00		adc #$00			adc 	#0
.2cca	85 31		sta $31				sta 	temp3+1
.2ccc	98		tya				tya
.2ccd	48		pha				pha
.2cce	a0 04		ldy #$04			ldy 	#4
.2cd0					_FPCName:
.2cd0	b1 30		lda ($30),y			lda 	(temp3),y 					; check the same
.2cd2	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.2cd4	d0 0e		bne $2ce4			bne 	_FPpulYNext 				; if different go to next one.
.2cd6	c8		iny				iny
.2cd7	c9 3a		cmp #$3a			cmp 	#$3A
.2cd9	90 f5		bcc $2cd0			bcc 	_FPCName 					; compare the whole lot....
.2cdb	68		pla				pla 								; throw away the saved Y
.2cdc	98		tya				tya 								; length of name is Y-4
.2cdd	38		sec				sec
.2cde	e9 04		sbc #$04			sbc 	#4
.2ce0	ac 07 0d	ldy $0d07			ldy 	yInLine  					; get the original Y back
.2ce3	60		rts				rts
.2ce4					_FPpulYNext:
.2ce4	68		pla				pla
.2ce5	a8		tay				tay
.2ce6					_FPNext:
.2ce6	c8		iny				iny 								; next procedure record.
.2ce7	10 c0		bpl $2ca9			bpl 	_FPLoop 					; if done 128 already ... e.g. Y -ve
.2ce9	98		tya				tya 								; subtract 128 from Y
.2cea	38		sec				sec
.2ceb	e9 80		sbc #$80			sbc 	#128
.2ced	a8		tay				tay
.2cee	18		clc				clc 								; add 128 to temp2, so we can have more than
.2cef	a5 2e		lda $2e				lda 	temp2 						; 255/3 = 85 procedures
.2cf1	69 80		adc #$80			adc 	#128
.2cf3	85 2e		sta $2e				sta 	temp2
.2cf5	90 b2		bcc $2ca9			bcc 	_FPLoop
.2cf7	e6 2f		inc $2f				inc 	temp2+1
.2cf9	4c a9 2c	jmp $2ca9			jmp 	_FPLoop
.2cfc					_FPError:
.2cfc	a2 17		ldx #$17			ldx 	#ErrorID_NoProc
.2cfe	20 18 15	jsr $1518		jsr	errorHandler
.2d01					ScanProc:
.2d01	98		tya				tya
.2d02	48		pha				pha
.2d03	a5 35		lda $35				lda 	lowMemory 					; copy the start of the procList, at low memory
.2d05	8d 05 0d	sta $0d05			sta 	procList
.2d08	a5 36		lda $36				lda 	lowMemory+1
.2d0a	8d 06 0d	sta $0d06			sta 	procList+1
.2d0d	20 7f 30	jsr $307f			jsr 	ResetCodeAddress 			; back to the start.
.2d10					_ScanLoop:
.2d10	a0 00		ldy #$00			ldy 	#0 							; check reached program end
.2d12	b1 28		lda ($28),y			lda 	(codePtr),y
.2d14	f0 2a		beq $2d40			beq 	_ScanExit
.2d16	a0 03		ldy #$03			ldy 	#3							; get first token
.2d18	b1 28		lda ($28),y			lda 	(codePtr),y
.2d1a	c9 9d		cmp #$9d			cmp 	#TKW_DEFPROC				; skip to next if not DEFPROC
.2d1c	d0 12		bne $2d30			bne 	_ScanNext
.2d1e	a5 29		lda $29				lda 	codePtr+1 					; write high and low address of this line.
.2d20	20 48 2d	jsr $2d48			jsr 	_ScanWrite
.2d23	a5 28		lda $28				lda 	codePtr
.2d25	20 48 2d	jsr $2d48			jsr 	_ScanWrite
.2d28	a0 04		ldy #$04			ldy 	#4 							; start of name part
.2d2a	20 53 2d	jsr $2d53			jsr 	CalculateProcedureHash 		; calculate procedure hash
.2d2d	20 48 2d	jsr $2d48			jsr 	_ScanWrite					; and write that
.2d30					_ScanNext:
.2d30	18		clc				clc
.2d31	a0 00		ldy #$00			ldy 	#0
.2d33	b1 28		lda ($28),y			lda 	(codePtr),y
.2d35	65 28		adc $28				adc 	codePtr
.2d37	85 28		sta $28				sta 	codePtr
.2d39	90 d5		bcc $2d10			bcc 	_ScanLoop
.2d3b	e6 29		inc $29				inc 	codePtr+1
.2d3d	4c 10 2d	jmp $2d10			jmp 	_ScanLoop
.2d40					_ScanExit:
.2d40	a9 00		lda #$00			lda 	#0 							; write ending zero.
.2d42	20 48 2d	jsr $2d48			jsr 	_ScanWrite
.2d45	68		pla				pla
.2d46	a8		tay				tay
.2d47	60		rts				rts
.2d48					_ScanWrite:
.2d48	a0 00		ldy #$00			ldy 	#0
.2d4a	91 35		sta ($35),y			sta 	(lowMemory),y
.2d4c	e6 35		inc $35				inc 	lowMemory
.2d4e	d0 02		bne $2d52			bne 	_SWNoCarry
.2d50	e6 36		inc $36				inc 	lowMemory+1
.2d52					_SWNoCarry:
.2d52	60		rts				rts
.2d53					CalculateProcedureHash:
.2d53	a9 00		lda #$00			lda 	#0 							; clear hash.
.2d55	85 2a		sta $2a				sta 	temp0
.2d57					_CPHLoop:
.2d57	18		clc				clc 								; add character and rotate and add carry back in
.2d58	b1 28		lda ($28),y			lda 	(codePtr),y
.2d5a	65 2a		adc $2a				adc 	temp0
.2d5c	6a		ror a				ror 	a
.2d5d	69 0d		adc #$0d			adc 	#13 						; primes usually good for this sort of thing.
.2d5f	85 2a		sta $2a				sta 	temp0 						; (down with this sort of thing)
.2d61	b1 28		lda ($28),y			lda 	(codePtr),y
.2d63	c8		iny				iny 								; advance incase we go round again.
.2d64	c9 3a		cmp #$3a			cmp 	#$3A
.2d66	90 ef		bcc $2d57			bcc 	_CPHLoop
.2d68	a5 2a		lda $2a				lda 	temp0
.2d6a	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/repeat.asm

.2d6b					Command_Repeat:
.2d6b	a2 04		ldx #$04			ldx 	#4 							; allocate 4 bytes on stack for REPEAT
.2d6d	a9 52		lda #$52			lda 	#markerREPEAT 				; repeat marker allocate 4 bytes
.2d6f	20 93 3c	jsr $3c93			jsr 	RSClaim
.2d72	a9 01		lda #$01			lda 	#1 							; save position at offset 1.
.2d74	20 bf 3c	jsr $3cbf			jsr 	RSSavePosition
.2d77	60		rts				rts
.2d78					Command_Until:
.2d78	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.2d7a	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.2d7c	c9 52		cmp #$52			cmp 	#markerREPEAT 						; does it match
.2d7e	f0 05		beq $2d85			beq 	_isok
.2d80	a2 0f		ldx #$0f			ldx 	#ErrorID_untilErr
.2d82	20 18 15	jsr $1518		jsr	errorHandler
.2d85					_isok:
.2d85	20 5e 35	jsr $355e			jsr 	EvaluateRootInteger 		; at the bottom.
.2d88	20 1f 3c	jsr $3c1f			jsr 	MInt32Zero					; check if TOS zero
.2d8b	d0 06		bne $2d93			bne 	_CUExit
.2d8d	a9 01		lda #$01			lda 	#1
.2d8f	20 d2 3c	jsr $3cd2			jsr 	RSLoadPosition 				; reload the position from offset 1.
.2d92	60		rts				rts
.2d93					_CUExit:
.2d93	a9 04		lda #$04			lda 	#4 							; throw 4 bytes from stack.
.2d95	20 b5 3c	jsr $3cb5			jsr 	RSFree
.2d98	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/scanner.asm

.2d99					ScanForward:
.2d99	85 2c		sta $2c				sta 	temp1 						; save tokens to search in temp1/temp1+1
.2d9b	86 2d		stx $2d				stx 	temp1+1
.2d9d	a9 00		lda #$00			lda 	#0 							; temp2 counts structure levels.
.2d9f	85 2e		sta $2e				sta 	temp2
.2da1	b1 28		lda ($28),y	_SFLoop:lda 	(codePtr),y 				; look at the next token.
.2da3	c8		iny				iny
.2da4	a6 2e		ldx $2e				ldx 	temp2 						; check structure levels are zero.
.2da6	d0 08		bne $2db0			bne 	_SFNoCheck 					; if so, check token against entered values.
.2da8	c5 2c		cmp $2c				cmp 	temp1 						; if either matches, we've reached the token
.2daa	f0 24		beq $2dd0			beq 	_SFExit 					; at the same strcture depth.
.2dac	c5 2d		cmp $2d				cmp 	temp1+1
.2dae	f0 20		beq $2dd0			beq 	_SFExit
.2db0					_SFNoCheck:
.2db0	c9 80		cmp #$80			cmp 	#$80 						; if it is 00-7F (variable/number) just skip it.
.2db2	90 ed		bcc $2da1			bcc 	_SFLoop
.2db4	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; $80-$85 is various specials.
.2db6	90 19		bcc $2dd1			bcc 	_SFSpecials
.2db8	c9 99		cmp #$99			cmp 	#TOK_STRUCTST 				; if < structure start then continue
.2dba	90 e5		bcc $2da1			bcc 	_SFLoop
.2dbc	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST 				; if >= unary start (after structure) then continue.
.2dbe	b0 e1		bcs $2da1			bcs 	_SFLoop
.2dc0	aa		tax				tax  								; token in X, and look up the adjuster.
.2dc1	bd 7c 34	lda $347c,x			lda 	ELBinaryOperatorInfo-TOK_BINARYST,x
.2dc4	38		sec				sec 								; convert to an offset ($FF,$01)
.2dc5	e9 81		sbc #$81			sbc 	#$81
.2dc7	18		clc				clc 								; add to depth
.2dc8	65 2e		adc $2e				adc 	temp2
.2dca	85 2e		sta $2e				sta 	temp2
.2dcc	10 d3		bpl $2da1			bpl 	_SFLoop 					; +ve okay to continue
.2dce	30 07		bmi $2dd7			bmi 	SFError 					; if gone -ve then we have a nesting error
.2dd0	60		rts		_SFExit:rts
.2dd1					_SFSpecials:
.2dd1	20 dc 2d	jsr $2ddc			jsr 	ScannerSkipSpecial
.2dd4	4c a1 2d	jmp $2da1			jmp 	_SFLoop
.2dd7					SFError:
.2dd7	a2 14		ldx #$14			ldx 	#ErrorID_Struct
.2dd9	20 18 15	jsr $1518		jsr	errorHandler
.2ddc					ScannerSkipSpecial:
.2ddc	c9 80		cmp #$80			cmp 	#TOK_EOL 					; $80, advance to next line.
.2dde	f0 10		beq $2df0			beq 	_SFNextLine
.2de0	c9 84		cmp #$84			cmp 	#TOK_FPC					; $84, skip embedded float
.2de2	f0 2b		beq $2e0f			beq 	_SFFloatSkip
.2de4	c9 85		cmp #$85			cmp 	#TOK_STR 					; $85, skip string
.2de6	f0 02		beq $2dea			beq 	_SFSkipString
.2de8	c8		iny				iny									; $81,$82,$83 shift, so just advance over the shifted
.2de9	60		rts				rts 								; token.
.2dea					_SFSkipString:
.2dea	98		tya				tya
.2deb	38		sec				sec
.2dec	71 28		adc ($28),y			adc 	(codePtr),y
.2dee	a8		tay				tay
.2def	60		rts				rts
.2df0					_SFNextLine:
.2df0	a0 00		ldy #$00			ldy 	#0 							; get offset
.2df2	b1 28		lda ($28),y			lda 	(codePtr),y
.2df4	18		clc				clc 								; add to code pointer.
.2df5	65 28		adc $28				adc 	codePtr
.2df7	85 28		sta $28				sta 	codePtr
.2df9	90 02		bcc $2dfd			bcc		_SFNLNoCarry
.2dfb	e6 29		inc $29				inc 	codePtr+1
.2dfd					_SFNLNoCarry:
.2dfd	b1 28		lda ($28),y			lda 	(codePtr),y 				; reached the end of the program.
.2dff	d0 0b		bne $2e0c			bne		_SFXNL 						; no go round again
.2e01	a5 2c		lda $2c				lda 	temp1
.2e03	c9 d9		cmp #$d9			cmp 	#TKW_DATA 					; if searching for Data different error.
.2e05	d0 d0		bne $2dd7			bne 	SFError 					; read uses this to search for data statements
.2e07	a2 1d		ldx #$1d			ldx 	#ErrorID_DataError
.2e09	20 18 15	jsr $1518		jsr	errorHandler
.2e0c	a0 03		ldy #$03	_SFXNL:	ldy 	#3
.2e0e	60		rts				rts
.2e0f					_SFFloatSkip:
.2e0f	98		tya				tya 								; skip over an embedded float.
.2e10	18		clc				clc
.2e11	69 05		adc #$05			adc 	#FloatEmbeddedSize
.2e13	a8		tay				tay
.2e14	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/while.asm

.2e15					Command_While:
.2e15	a9 57		lda #$57			lda 	#markerWhile 				; gosub marker allocate 4 bytes.
.2e17	a2 04		ldx #$04			ldx 	#4
.2e19	20 93 3c	jsr $3c93			jsr 	RSClaim 					; create on stack.
.2e1c	88		dey				dey
.2e1d	a9 01		lda #$01			lda 	#1
.2e1f	20 bf 3c	jsr $3cbf			jsr 	RSSavePosition 				; save position before the WHILE keyword.
.2e22	c8		iny				iny
.2e23	20 5e 35	jsr $355e			jsr 	EvaluateRootInteger			; get the conditional
.2e26	20 1f 3c	jsr $3c1f			jsr 	MInt32Zero 	 				; if zero, skip forward to the fail code.
.2e29	f0 01		beq $2e2c			beq 	_CWFail
.2e2b	60		rts				rts
.2e2c					_CWFail:
.2e2c	a9 04		lda #$04			lda 	#4
.2e2e	20 b5 3c	jsr $3cb5			jsr 	RSFree 						; close the just opened position.
.2e31	a9 9f		lda #$9f			lda 	#TKW_WEND 					; scan forward past WEND.
.2e33	aa		tax				tax
.2e34	20 99 2d	jsr $2d99			jsr 	ScanForward
.2e37	60		rts				rts
.2e38					Command_Wend:
.2e38	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.2e3a	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.2e3c	c9 57		cmp #$57			cmp 	#markerWHILE 						; does it match
.2e3e	f0 05		beq $2e45			beq 	_isok
.2e40	a2 11		ldx #$11			ldx 	#ErrorID_wendErr
.2e42	20 18 15	jsr $1518		jsr	errorHandler
.2e45					_isok:
.2e45	a9 01		lda #$01			lda 	#1
.2e47	20 d2 3c	jsr $3cd2			jsr 	RSLoadPosition				; go back until true
.2e4a	a9 04		lda #$04			lda 	#4
.2e4c	20 b5 3c	jsr $3cb5			jsr 	RSFree 						; close the loop
.2e4f	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/system/clear.asm

.2e50					CommandClear:
.2e50					XCommandClear:
.2e50	98		tya				tya
.2e51	48		pha				pha
.2e52	ad cc 0a	lda $0acc			lda 	endMemory					; set high memory = end of memory
.2e55	85 33		sta $33				sta 	highMemory
.2e57	ad cd 0a	lda $0acd			lda 	endMemory+1
.2e5a	85 34		sta $34				sta 	highMemory+1
.2e5c	ad c8 0a	lda $0ac8			lda 	basePage 					; work out where the program ends.
.2e5f	85 2a		sta $2a				sta 	temp0
.2e61	ad c9 0a	lda $0ac9			lda 	basePage+1
.2e64	85 2b		sta $2b				sta 	temp0+1
.2e66					_CCFindEnd:
.2e66	a0 00		ldy #$00			ldy 	#0
.2e68	b1 2a		lda ($2a),y			lda 	(temp0),y
.2e6a	f0 0c		beq $2e78			beq 	_CCFoundEnd 				; offset zero is end.
.2e6c	18		clc				clc
.2e6d	65 2a		adc $2a				adc 	temp0 						; move to next line
.2e6f	85 2a		sta $2a				sta 	temp0
.2e71	90 f3		bcc $2e66			bcc 	_CCFindEnd
.2e73	e6 2b		inc $2b				inc 	temp0+1
.2e75	4c 66 2e	jmp $2e66			jmp 	_CCFindEnd
.2e78					_CCFoundEnd:
.2e78	a5 2a		lda $2a				lda 	temp0 						; put temp0 in lowMemory
.2e7a	85 35		sta $35				sta 	lowMemory
.2e7c	a5 2b		lda $2b				lda 	temp0+1
.2e7e	85 36		sta $36				sta 	lowMemory+1
.2e80	18		clc				clc 								; put temp0+1 in endProgram
.2e81	a5 2a		lda $2a				lda 	temp0
.2e83	69 01		adc #$01			adc 	#1
.2e85	8d ca 0a	sta $0aca			sta 	endProgram
.2e88	a5 2b		lda $2b				lda 	temp0+1
.2e8a	69 00		adc #$00			adc 	#0
.2e8c	8d cb 0a	sta $0acb			sta 	endProgram+1
.2e8f	18		clc				clc 								; put a bit of space in.
.2e90	a5 35		lda $35				lda 	lowMemory
.2e92	69 04		adc #$04			adc 	#4
.2e94	85 35		sta $35				sta 	lowMemory
.2e96	90 02		bcc $2e9a			bcc 	_CCNoCarry
.2e98	e6 36		inc $36				inc 	lowMemory+1
.2e9a					_CCNoCarry:
.2e9a	20 85 3c	jsr $3c85			jsr 	RSReset 					; reset the return stack.
.2e9d	a2 06		ldx #$06		ldx	#6
.2e9f	20 fd 4b	jsr $4bfd		jsr	variableHandler
.2ea2	20 01 2d	jsr $2d01			jsr 	ScanProc 					; scan for procedures
.2ea5	20 86 26	jsr $2686			jsr 	CommandRestore 				; do a restore
.2ea8	68		pla				pla
.2ea9	a8		tay				tay
.2eaa	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/system/list.asm

.0d08					structIndent:
>0d08							.fill 	1
.2eab					CommandList:
.2eab	a2 00		ldx #$00			ldx		#0 							; set start/end lines in stack 0/1 to 0 and $FFFF
.2ead	8e 08 0d	stx $0d08			stx 	structIndent
.2eb0	20 f8 3b	jsr $3bf8			jsr 	MInt32False
.2eb3	e8		inx				inx
.2eb4	20 f4 3b	jsr $3bf4			jsr 	MInt32True
.2eb7	b1 28		lda ($28),y			lda 	(codePtr),y 				; look at first token
.2eb9	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; list ,xxxx
.2ebb	f0 15		beq $2ed2			beq 	_CLEndLine
.2ebd	c9 00		cmp #$00			cmp 	#0 							; list ... on its own.
.2ebf	30 1b		bmi $2edc			bmi 	_CLDoListing 				; do the whole lot.
.2ec1	a2 00		ldx #$00			ldx 	#0 							; get start line at stack:0
.2ec3	20 60 35	jsr $3560			jsr 	EvaluateInteger
.2ec6	b1 28		lda ($28),y			lda 	(codePtr),y 				; , follows ?
.2ec8	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.2eca	f0 06		beq $2ed2			beq 	_CLEndLine
.2ecc	20 36 3b	jsr $3b36			jsr 	MInt32CopyUp 				; copy first to second if just a line number on its
.2ecf	4c dc 2e	jmp $2edc			jmp 	_CLDoListing 				; own e.g. list 1100
.2ed2					_CLEndLine:
.2ed2	c8		iny				iny 								; skip comma
.2ed3	b1 28		lda ($28),y			lda 	(codePtr),y  				; no number follows, then its list 1000,
.2ed5	30 05		bmi $2edc			bmi 	_CLDoListing
.2ed7	a2 01		ldx #$01			ldx 	#1 							; get the last line to list
.2ed9	20 60 35	jsr $3560			jsr 	EvaluateInteger				; get end
.2edc					_CLDoListing:
.2edc	20 7f 30	jsr $307f			jsr 	ResetCodeAddress 			; back to the start.
.2edf					_CLCheckLoop:
.2edf	a2 02		ldx #$02		ldx	#2
.2ee1	20 f6 14	jsr $14f6		jsr	deviceHandler
.2ee4	a0 00		ldy #$00			ldy 	#0							; check end.
.2ee6	b1 28		lda ($28),y			lda 	(codePtr),y
.2ee8	f0 41		beq $2f2b			beq 	_CLEnd
.2eea	a2 00		ldx #$00			ldx 	#0 							; compare vs lower.
.2eec	20 2e 2f	jsr $2f2e			jsr 	CLCompareLineTOS
.2eef	c9 ff		cmp #$ff			cmp 	#255 						; if < skip
.2ef1	f0 28		beq $2f1b			beq 	_CLNext
.2ef3	e8		inx				inx
.2ef4	20 2e 2f	jsr $2f2e			jsr 	CLCompareLineTOS 			; compare vs higher
.2ef7	c9 01		cmp #$01			cmp 	#1
.2ef9	f0 20		beq $2f1b			beq 	_CLNext
.2efb	a9 80		lda #$80			lda 	#$80 						; undo any down indents this line.
.2efd	20 50 2f	jsr $2f50			jsr 	CLStructureCheck
.2f00	ad 08 0d	lda $0d08			lda 	structIndent 				; indent level.
.2f03	10 02		bpl $2f07			bpl 	_CLPositive
.2f05	a9 00		lda #$00			lda 	#0
.2f07					_CLPositive:
.2f07	a2 04		ldx #$04		ldx	#4
.2f09	20 2c 48	jsr $482c		jsr	tokeniserHandler
.2f0c	a9 82		lda #$82			lda 	#$82 						; up indents from this point on.
.2f0e	20 50 2f	jsr $2f50			jsr 	CLStructureCheck
.2f11	ad 08 0d	lda $0d08			lda 	structIndent
.2f14	10 05		bpl $2f1b			bpl 	_CLNext
.2f16	a9 00		lda #$00			lda 	#0
.2f18	8d 08 0d	sta $0d08			sta 	structIndent
.2f1b					_CLNext:
.2f1b	a0 00		ldy #$00			ldy 	#0 							; go to next line.
.2f1d	b1 28		lda ($28),y			lda 	(codePtr),y
.2f1f	18		clc				clc
.2f20	65 28		adc $28				adc 	codePtr
.2f22	85 28		sta $28				sta 	codePtr
.2f24	90 b9		bcc $2edf			bcc 	_CLCheckLoop
.2f26	e6 29		inc $29				inc 	codePtr+1
.2f28	4c df 2e	jmp $2edf			jmp 	_CLCheckLoop
.2f2b					_CLEnd:
.2f2b	4c e1 3c	jmp $3ce1			jmp 	WarmStart 					; warm start after list.
.2f2e					CLCompareLineTOS:
.2f2e	a0 01		ldy #$01			ldy 	#1
.2f30	b1 28		lda ($28),y			lda 	(codePtr),y
.2f32	55 98		eor $98,x			eor 	esInt0,x
.2f34	85 2a		sta $2a				sta 	temp0
.2f36	c8		iny				iny
.2f37	b1 28		lda ($28),y			lda 	(codePtr),y
.2f39	55 a0		eor $a0,x			eor 	esInt1,x
.2f3b	05 2a		ora $2a				ora 	temp0
.2f3d	f0 10		beq $2f4f			beq 	_CLCLTExit
.2f3f	88		dey				dey
.2f40	b1 28		lda ($28),y			lda 	(codePtr),y
.2f42	d5 98		cmp $98,x			cmp 	esInt0,x
.2f44	c8		iny				iny
.2f45	b1 28		lda ($28),y			lda 	(codePtr),y
.2f47	f5 a0		sbc $a0,x			sbc 	esInt1,x
.2f49	a9 ff		lda #$ff			lda 	#255
.2f4b	90 02		bcc $2f4f			bcc 	_CLCLTExit
.2f4d	a9 01		lda #$01			lda 	#1
.2f4f					_CLCLTExit:
.2f4f	60		rts				rts
.2f50					CLStructureCheck:
.2f50	85 2a		sta $2a				sta 	temp0
.2f52	a0 03		ldy #$03			ldy 	#3
.2f54					_CLSCLoop:
.2f54	b1 28		lda ($28),y			lda 	(codePtr),y 				; get and consume token.
.2f56	c8		iny				iny
.2f57	c9 80		cmp #$80			cmp 	#$80
.2f59	90 f9		bcc $2f54			bcc 	_CLSCLoop 					; $00-$7F just step over.
.2f5b	f0 28		beq $2f85			beq		_CLSCExit					; EOL return
.2f5d	c9 86		cmp #$86			cmp 	#$86 						; special handler
.2f5f	90 1e		bcc $2f7f			bcc 	_CLSCSpecial
.2f61	c9 99		cmp #$99			cmp 	#TOK_STRUCTST 				; check if structure changer.
.2f63	90 ef		bcc $2f54			bcc 	_CLSCLoop
.2f65	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST
.2f67	b0 eb		bcs $2f54			bcs 	_CLSCLoop
.2f69	aa		tax				tax 								; get adjustment
.2f6a	bd 7c 34	lda $347c,x			lda 	ELBinaryOperatorInfo-TOK_BINARYST,x
.2f6d	c5 2a		cmp $2a				cmp 	temp0	 					; if what we're searching for
.2f6f	d0 e3		bne $2f54			bne 	_CLSCLoop
.2f71	38		sec				sec
.2f72	e9 81		sbc #$81			sbc 	#$81 						; convert to offset
.2f74	0a		asl a				asl 	a 							; double indent step
.2f75	18		clc				clc
.2f76	6d 08 0d	adc $0d08			adc 	structIndent 				; add to structure indent
.2f79	8d 08 0d	sta $0d08			sta 	structIndent
.2f7c	4c 54 2f	jmp $2f54			jmp 	_CLSCLoop
.2f7f					_CLSCSpecial:
.2f7f	20 dc 2d	jsr $2ddc			jsr 	ScannerSkipSpecial
.2f82	4c 54 2f	jmp $2f54			jmp 	_CLSCLoop
.2f85					_CLSCExit:
.2f85	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/system/loadsave.asm

.2f86					CommandLoad:
.2f86	20 ae 2f	jsr $2fae			jsr 	CLSParameters 					; get parameters for load.
.2f89	08		php				php
.2f8a	a2 0e		ldx #$0e		ldx	#14
.2f8c	20 f6 14	jsr $14f6		jsr	deviceHandler
.2f8f	28		plp				plp
.2f90	b0 08		bcs $2f9a			bcs 	_CLExit 						; if CC then load a program, so warm start.
.2f92	20 50 2e	jsr $2e50			jsr 	CommandClear
.2f95	a2 04		ldx #$04		ldx	#4
.2f97	20 48 26	jsr $2648		jsr	interactionHandler
.2f9a					_CLExit
.2f9a	60		rts				rts
.2f9b					CommandSave:
.2f9b	20 ae 2f	jsr $2fae			jsr 	CLSParameters					; get parameters for save
.2f9e	90 08		bcc $2fa8			bcc 	_CSNoOverrideAddress
.2fa0	20 78 3c	jsr $3c78			jsr 	CheckComma 						; should be a comma.
.2fa3	a2 02		ldx #$02			ldx 	#2
.2fa5	20 60 35	jsr $3560			jsr 	EvaluateInteger 				; get save end address.
.2fa8					_CSNoOverrideAddress:
.2fa8	a2 18		ldx #$18		ldx	#24
.2faa	20 f6 14	jsr $14f6		jsr	deviceHandler
.2fad	60		rts				rts
.2fae					CLSParameters:
.2fae	a2 00		ldx #$00			ldx 	#0 								; string
.2fb0	20 55 35	jsr $3555			jsr 	EvaluateString
.2fb3	e8		inx				inx 									; erase out +1 +2
.2fb4	20 f8 3b	jsr $3bf8			jsr 	MInt32False
.2fb7	e8		inx				inx
.2fb8	20 f8 3b	jsr $3bf8			jsr 	MInt32False
.2fbb	ad c8 0a	lda $0ac8			lda 	basePage 						; default start address.
.2fbe	85 99		sta $99				sta 	esInt0+1
.2fc0	ad c9 0a	lda $0ac9			lda 	basePage+1
.2fc3	85 a1		sta $a1				sta 	esInt1+1
.2fc5	ad ca 0a	lda $0aca			lda 	endProgram 						; default end address
.2fc8	85 9a		sta $9a				sta 	esInt0+2
.2fca	ad cb 0a	lda $0acb			lda 	endProgram+1
.2fcd	85 a2		sta $a2				sta 	esInt1+2
.2fcf	b1 28		lda ($28),y			lda 	(codePtr),y 					; , following
.2fd1	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.2fd3	d0 08		bne $2fdd			bne 	_CLSDefault
.2fd5	c8		iny				iny 									; skip comma
.2fd6	a2 01		ldx #$01			ldx 	#1 								; get numeric value.
.2fd8	20 60 35	jsr $3560			jsr 	EvaluateInteger
.2fdb	38		sec				sec
.2fdc	60		rts				rts
.2fdd					_CLSDefault:
.2fdd	18		clc				clc
.2fde	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/system/new.asm

.2fdf					Command_New:
.2fdf					Command_XNew:
.2fdf	20 7f 30	jsr $307f			jsr 	ResetCodeAddress 			; point to first line
.2fe2	a0 00		ldy #$00			ldy 	#0 							; and zap it.
.2fe4	98		tya				tya
.2fe5	91 28		sta ($28),y			sta 	(codePtr),y
.2fe7	20 50 2e	jsr $2e50			jsr 	CommandClear 				; clear everything down.
.2fea	4c a6 29	jmp $29a6			jmp 	CommandEND 					; do END code, as there's nothing to run.

;******  Return to file: main/main.asm


;******  Processing file: main/commands/system/run.asm

.0d09					breakCounter:
>0d09								.fill 	1
.0d0a					breakIncrement:
>0d0a								.fill 	1
.2fed					Command_Run:
.2fed					XCommand_Run:
.2fed	a2 ff		ldx #$ff			ldx 	#$FF 						; reset the stack.
.2fef	9a		txs				txs
.2ff0	20 79 30	jsr $3079			jsr 	BreakOn 					; turn break on
.2ff3	20 50 2e	jsr $2e50			jsr 	CommandClear 				; clear everything.
.2ff6	20 7f 30	jsr $307f			jsr 	ResetCodeAddress 			; back to the start.
.2ff9					Command_RunFrom:
.2ff9	a0 03		ldy #$03			ldy 	#3 							; over offset/line #
.2ffb					CRNextInstruction:
.2ffb	a9 00		lda #$00			lda 	#0
.2ffd	85 3a		sta $3a				sta 	softMemAlloc+1
.2fff	ad 09 0d	lda $0d09			lda 	breakCounter 				; check for break.
.3002	6d 0a 0d	adc $0d0a			adc 	breakIncrement
.3005	8d 09 0d	sta $0d09			sta 	breakCounter
.3008	90 05		bcc $300f			bcc 	_CRNoChecks
.300a	a2 02		ldx #$02		ldx	#2
.300c	20 f6 14	jsr $14f6		jsr	deviceHandler
.300f					_CRNoChecks
.300f	b1 28		lda ($28),y			lda 	(codePtr),y 				; get next token.
.3011	10 1c		bpl $302f			bpl 	_CRNotToken
.3013	c9 c9		cmp #$c9			cmp 	#TOK_TOKENS 				; if in the tokens then do that token.
.3015	b0 0c		bcs $3023			bcs 	_CRExecute
.3017	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST 				; unary is ignored.
.3019	b0 71		bcs $308c			bcs 	Unimplemented
.301b	c9 99		cmp #$99			cmp 	#TOK_STRUCTST 				; execute structures.
.301d	b0 04		bcs $3023			bcs 	_CRExecute
.301f	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; if one of the system tokens $80-$85 do that
.3021	b0 16		bcs $3039			bcs 	_CRCheckIndirect 			; if in that unused range check for ! or ? or AND
.3023					_CRExecute:
.3023	c8		iny				iny 								; consume it.
.3024	0a		asl a				asl 	a 							; double it, losing most significant bit.
.3025	aa		tax				tax
.3026	20 2c 30	jsr $302c			jsr 	_CRRunRoutine 				; we want to do jsr (group0vectors,x)
.3029	4c fb 2f	jmp $2ffb			jmp 	CRNextInstruction
.302c					_CRRunRoutine:
.302c	7c 96 30	jmp ($3096,x)			jmp 	(Group0Vectors,x)
.302f					_CRNotToken:
.302f	c9 40		cmp #$40			cmp 	#$40 						; if 0-3F then it is a letter
.3031	b0 59		bcs $308c			bcs 	Unimplemented
.3033					_CRDefaultLet:
.3033	20 d9 28	jsr $28d9			jsr 	CommandLet 					; do the default, LET
.3036	4c fb 2f	jmp $2ffb			jmp 	CRNextInstruction
.3039					_CRCheckIndirect:
.3039	c9 86		cmp #$86			cmp 	#TKW_AND 					; AND (assembler)
.303b	f0 0a		beq $3047			beq 	_CRAndCommand
.303d	c9 97		cmp #$97			cmp 	#TKW_PLING 					; !<term> =
.303f	f0 f2		beq $3033			beq 	_CRDefaultLet
.3041	c9 98		cmp #$98			cmp 	#TKW_QMARK 					; ?<term> =
.3043	f0 ee		beq $3033			beq 	_CRDefaultLet
.3045	d0 45		bne $308c			bne 	Unimplemented
.3047					_CRAndCommand:
.3047	c8		iny				iny 								; skip over the AND token
.3048	a9 95		lda #$95			lda 	#TKW_LPARENANDRPAREN 		; replace it with the pseudo-and
.304a	20 64 30	jsr $3064			jsr 	CommandAssembler 			; do the assembler command
.304d	4c fb 2f	jmp $2ffb			jmp 	CRNextInstruction 			; and loop round.
.3050					CommandShift1:
.3050	b1 28		lda ($28),y			lda 	(codePtr),y 				; get shifted value
.3052	10 38		bpl $308c			bpl 	Unimplemented 				; we have an error as this should not happen.
.3054	c8		iny				iny 								; advance over it.
.3055	c9 94		cmp #$94			cmp 	#TKA_GROUP1 				; is it an assembler constant ?
.3057	b0 0b		bcs $3064			bcs 	CommandAssembler
.3059	0a		asl a				asl 	a 							; double into X
.305a	aa		tax				tax
.305b	7c 5c 31	jmp ($315c,x)			jmp 	(Group1Vectors-12,x) 		; and do the code.
.305e					CommandShift2:
.305e	a9 ff		lda #$ff			lda 	#$FF 						; $FF means command not unary function.
.3060	20 69 18	jsr $1869		jsr	extensionHandler
.3063	60		rts				rts
.3064					CommandAssembler:
.3064	a2 02		ldx #$02		ldx	#2
.3066	20 b4 13	jsr $13b4		jsr	assemblerHandler
.3069	60		rts				rts
.306a					CommandAssemblerLabel:
.306a	a2 04		ldx #$04		ldx	#4
.306c	20 b4 13	jsr $13b4		jsr	assemblerHandler
.306f	60		rts				rts
.3070					CommandColon:
.3070	60		rts				rts
.3071					CommandBreak:
.3071	20 5e 35	jsr $355e			jsr 	EvaluateRootInteger
.3074	20 1f 3c	jsr $3c1f			jsr 	MInt32Zero
.3077	f0 02		beq $307b			beq 	BreakOff
.3079					BreakOn:
.3079	a2 08		ldx #$08			ldx 	#8
.307b					BreakOff:
.307b	8e 0a 0d	stx $0d0a			stx 	breakIncrement
.307e	60		rts				rts
.307f					ResetCodeAddress:
.307f	ad c8 0a	lda $0ac8			lda 	basePage 					; copy basePage to code Pointer
.3082	85 28		sta $28				sta 	codePtr
.3084	ad c9 0a	lda $0ac9			lda 	basePage+1
.3087	85 29		sta $29				sta 	codePtr+1
.3089	a0 03		ldy #$03			ldy 	#3 							; offset after offset link and line#
.308b	60		rts				rts
.308c					Unimplemented:
.308c	a2 01		ldx #$01			ldx 	#ErrorID_Missing
.308e	20 18 15	jsr $1518		jsr	errorHandler
.3091					TKErr01:
.3091					TKErr02:
.3091					TKErr03:
.3091					TKErr04:
.3091					TKErr05:
.3091					TKErr06:
.3091					TKErr07:
.3091					TKErr08:
.3091					TKErr09:
.3091					TKErr10:
.3091					TKErr11:
.3091					TKErr12:
.3091					TKErr13:
.3091					TKErr14:
.3091					TKErr15:
.3091	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.3093	20 18 15	jsr $1518		jsr	errorHandler

;******  Processing file: main/commands/system/../../../generated/tokenvectors0.inc

.3096					Group0Vectors:
>3096	ac 29					.word	AdvanceNextLine          ; $80 [[eol]]
>3098	50 30					.word	CommandShift1            ; $81 [[sh1]]
>309a	5e 30					.word	CommandShift2            ; $82 [[sh2]]
>309c	91 30					.word	TKErr09                  ; $83 [[sh3]]
>309e	91 30					.word	TKErr10                  ; $84 [[fpc]]
>30a0	91 30					.word	TKErr08                  ; $85 [[str]]
>30a2	45 32					.word	AndHandler               ; $86 and
>30a4	32 32					.word	OrHandler                ; $87 or
>30a6	1f 32					.word	XorHandler               ; $88 xor
>30a8	67 33					.word	CompareGreaterEq         ; $89 >=
>30aa	71 33					.word	CompareLessEq            ; $8a <=
>30ac	53 33					.word	CompareGreater           ; $8b >
>30ae	49 33					.word	CompareLess              ; $8c <
>30b0	3f 33					.word	CompareEquals            ; $8d =
>30b2	5d 33					.word	CompareNotEquals         ; $8e <>
>30b4	b0 31					.word	AddHandler               ; $8f +
>30b6	d3 31					.word	SubHandler               ; $90 -
>30b8	6b 32					.word	ShrHandler               ; $91 >>
>30ba	58 32					.word	ShlHandler               ; $92 <<
>30bc	e6 31					.word	MulHandler               ; $93 *
>30be	f9 31					.word	DivHandler               ; $94 /
>30c0	0c 32					.word	ModHandler               ; $95 mod
>30c2	a4 32					.word	PowerHandler             ; $96 ^
>30c4	7e 32					.word	WordRefHandler           ; $97 !
>30c6	91 32					.word	ByteRefHandler           ; $98 ?
>30c8	6b 2d					.word	Command_Repeat           ; $99 repeat
>30ca	15 2e					.word	Command_While            ; $9a while
>30cc	c0 29					.word	Command_FOR              ; $9b for
>30ce	cf 2a					.word	CommandIf                ; $9c if
>30d0	91 30					.word	TKErr04                  ; $9d defproc
>30d2	78 2d					.word	Command_Until            ; $9e until
>30d4	38 2e					.word	Command_Wend             ; $9f wend
>30d6	21 2a					.word	Command_NEXT             ; $a0 next
>30d8	91 30					.word	TKErr06                  ; $a1 then
>30da	0a 2b					.word	Command_ENDIF            ; $a2 endif
>30dc	7a 2c					.word	ReturnProc               ; $a3 endproc
>30de	cb 34					.word	UnaryParenthesis         ; $a4 (
>30e0	ad 36					.word	UnaryLen                 ; $a5 len(
>30e2	f1 36					.word	UnarySgn                 ; $a6 sgn(
>30e4	da 36					.word	UnaryAbs                 ; $a7 abs(
>30e6	4a 37					.word	Unary_Random             ; $a8 random(
>30e8	94 37					.word	Unary_Page               ; $a9 page
>30ea	f4 3b					.word	MInt32True               ; $aa true
>30ec	f8 3b					.word	MInt32False              ; $ab false
>30ee	5f 37					.word	Unary_Min                ; $ac min(
>30f0	63 37					.word	Unary_Max                ; $ad max(
>30f2	6c 38					.word	UnarySys                 ; $ae sys(
>30f4	15 38					.word	UnaryTimer               ; $af timer(
>30f6	2a 36					.word	EventFunction            ; $b0 event(
>30f8	3e 38					.word	UnaryGet                 ; $b1 get(
>30fa	2e 38					.word	UnaryInkey               ; $b2 inkey(
>30fc	e5 37					.word	UnaryAlloc               ; $b3 alloc(
>30fe	a5 38					.word	ExecChr                  ; $b4 chr$(
>3100	d5 38					.word	ExecLeft                 ; $b5 left$(
>3102	f2 38					.word	ExecMid                  ; $b6 mid$(
>3104	1a 39					.word	ExecRight                ; $b7 right$(
>3106	ac 35					.word	Event_Str                ; $b8 str$(
>3108	db 35					.word	UnaryVal                 ; $b9 val(
>310a	08 37					.word	UnaryPeek                ; $ba peek(
>310c	0e 37					.word	UnaryDeek                ; $bb deek(
>310e	14 37					.word	UnaryLeek                ; $bc leek(
>3110	cb 36					.word	UnaryAsc                 ; $bd asc(
>3112	bf 37					.word	UnaryIntToFloat          ; $be int(
>3114	d2 37					.word	UnaryFloatToInt          ; $bf float(
>3116	de 35					.word	UnaryIsVal               ; $c0 isval(
>3118	bc 38					.word	ExecUpper                ; $c1 upper$(
>311a	b9 38					.word	ExecLower                ; $c2 lower$(
>311c	a2 37					.word	UnaryReference           ; $c3 @
>311e	b8 37					.word	UnaryComplement          ; $c4 ~
>3120	b5 37					.word	UnaryHexMarker           ; $c5 &
>3122	57 38					.word	UnaryGetString           ; $c6 get$(
>3124	5d 38					.word	UnaryInkeyString         ; $c7 inkey$(
>3126	94 38					.word	UnaryMem                 ; $c8 mem
>3128	91 30					.word	TKErr01                  ; $c9 )
>312a	70 30					.word	CommandColon             ; $ca :
>312c	91 30					.word	TKErr02                  ; $cb ,
>312e	91 30					.word	TKErr03                  ; $cc ;
>3130	94 29					.word	Command_Rem2             ; $cd '
>3132	91 30					.word	TKErr07                  ; $ce to
>3134	91 30					.word	TKErr05                  ; $cf step
>3136	0d 2c					.word	CallProc                 ; $d0 proc
>3138	0b 2b					.word	CommandLocal             ; $d1 local
>313a	cb 28					.word	Command_Dim              ; $d2 dim
>313c	94 29					.word	Command_Rem              ; $d3 rem
>313e	d9 28					.word	CommandLet               ; $d4 let
>3140	15 27					.word	Command_Input            ; $d5 input
>3142	04 2b					.word	Command_ELSE             ; $d6 else
>3144	9c 28					.word	Command_VDU              ; $d7 vdu
>3146	cb 27					.word	Command_Print            ; $d8 print
>3148	7d 26					.word	CommandData              ; $d9 data
>314a	91 30					.word	TKErr13                  ; $da image
>314c	91 30					.word	TKErr12                  ; $db at
>314e	91 30					.word	TKErr14                  ; $dc flip
>3150	bd 28					.word	Command_Assert           ; $dd assert
>3152	57 29					.word	Command_Poke             ; $de poke
>3154	5b 29					.word	Command_Doke             ; $df doke
>3156	5f 29					.word	Command_Loke             ; $e0 loke
>3158	6c 28					.word	Command_Ink              ; $e1 ink
>315a	77 28					.word	Command_Paper            ; $e2 paper
>315c	66 28					.word	Command_CLS              ; $e3 cls
>315e	82 28					.word	Command_Locate           ; $e4 locate
>3160	6a 30					.word	CommandAssemblerLabel    ; $e5 .
>3162	91 30					.word	TKErr15                  ; $e6 from
>3164	91 30					.word	TKErr11                  ; $e7 #
>3166	50 2e					.word	CommandClear             ; $e8 clear

;******  Return to file: main/commands/system/run.asm


;******  Processing file: main/commands/system/../../../generated/tokenvectors1.inc

.3168					Group1Vectors:
>3168	86 2f					.word	CommandLoad              ; $86 load
>316a	9b 2f					.word	CommandSave              ; $87 save
>316c	ab 2e					.word	CommandList              ; $88 list
>316e	df 2f					.word	Command_New              ; $89 new
>3170	71 30					.word	CommandBreak             ; $8a break
>3172	ed 2f					.word	Command_Run              ; $8b run
>3174	52 26					.word	CommandRead              ; $8c read
>3176	86 26					.word	CommandRestore           ; $8d restore
>3178	a6 29					.word	CommandEnd               ; $8e end
>317a	a1 29					.word	CommandStop              ; $8f stop
>317c	a9 29					.word	CommandXemu              ; $90 xemu
>317e	e3 26					.word	CommandGOTO              ; $91 goto
>3180	b8 26					.word	CommandGOSUB             ; $92 gosub
>3182	cb 26					.word	CommandRETURN            ; $93 return

;******  Return to file: main/commands/system/run.asm


;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/binary/binary.asm

.3184					BinaryProcess:
.3184	b5 90		lda $90,x			lda 	esType,x 					; or type bytes together and check bit 6.
.3186	15 91		ora $91,x			ora 	esType+1,x 					; (the float bit)
.3188	0a		asl a				asl 	a
.3189	30 0e		bmi $3199			bmi 	_BPStringType 				; if bit 6 is set, then string type, error
.318b	18		clc				clc 								; return CC for integer
.318c	29 02		and #$02			and 	#$02 						; $02 because of ASL A. check original bit 1.
.318e	f0 08		beq $3198			beq 	_BPExit 					; if both integer then return with CC.
.3190	20 9e 31	jsr $319e			jsr 	BPMakeBothFloat 			; make both float
.3193	a9 01		lda #$01			lda 	#$01 						; set result type to float
.3195	95 90		sta $90,x			sta 	esType,x
.3197	38		sec				sec 								; and return with carry set.
.3198					_BPExit:
.3198	60		rts				rts
.3199					_BPStringType:
.3199	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.319b	20 18 15	jsr $1518		jsr	errorHandler
.319e					BPMakeBothFloat:
.319e	e8		inx				inx
.319f	20 a3 31	jsr $31a3			jsr 	BPMakeFloat 				; one is a float, so we do both as floats.
.31a2	ca		dex				dex
.31a3					BPMakeFloat:
.31a3	b5 90		lda $90,x			lda 	esType,x 					; get type bit which is in bit 0
.31a5	4a		lsr a				lsr 	a
.31a6	b0 07		bcs $31af			bcs 	_BPIsFloat 					; already a float if set.
.31a8	8a		txa				txa
.31a9	a2 1c		ldx #$1c		ldx	#28
.31ab	20 5c 24	jsr $245c		jsr	floatingpointHandler
.31ae	aa		tax				tax
.31af					_BPIsFloat:
.31af	60		rts				rts
.31b0					AddHandler:
.31b0	20 81 33	jsr $3381			jsr 	DereferenceTwo 				; dereference top two on stack.
.31b3	b5 90		lda $90,x			lda 	esType,x 					; check two strings.
.31b5	35 91		and $91,x			and 	esType+1,x
.31b7	29 40		and #$40			and 	#$40 						; if both have bit 6 set ... we have two strings
.31b9	d0 10		bne $31cb			bne 	_AHStringConcat				; concatenate strings.
.31bb	20 84 31	jsr $3184			jsr 	BinaryProcess 				; check to see if either is float
.31be	b0 03		bcs $31c3			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.31c0	4c dc 3a	jmp $3adc			jmp 	MInt32Add 							; else do it as integer.
.31c3					_IsFPOperation:
.31c3	8a		txa				txa 								; call the relevant fp routine
.31c4	a2 04		ldx #$04		ldx	#4
.31c6	20 5c 24	jsr $245c		jsr	floatingpointHandler
.31c9	aa		tax				tax
.31ca	60		rts				rts
.31cb					_AHStringConcat:
.31cb	8a		txa				txa 								; handled by the string module.
.31cc	a2 06		ldx #$06		ldx	#6
.31ce	20 a3 3f	jsr $3fa3		jsr	stringHandler
.31d1	aa		tax				tax
.31d2	60		rts				rts
.31d3					SubHandler:
.31d3	20 81 33	jsr $3381			jsr 	DereferenceTwo
.31d6	20 84 31	jsr $3184			jsr 	BinaryProcess 				; check to see if either is float
.31d9	b0 03		bcs $31de			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.31db	4c f6 3a	jmp $3af6			jmp 	MInt32Sub 							; else do it as integer.
.31de					_IsFPOperation:
.31de	8a		txa				txa 								; call the relevant fp routine
.31df	a2 12		ldx #$12		ldx	#18
.31e1	20 5c 24	jsr $245c		jsr	floatingpointHandler
.31e4	aa		tax				tax
.31e5	60		rts				rts
.31e6					MulHandler:
.31e6	20 81 33	jsr $3381			jsr 	DereferenceTwo
.31e9	20 84 31	jsr $3184			jsr 	BinaryProcess 				; check to see if either is float
.31ec	b0 03		bcs $31f1			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.31ee	4c 10 3b	jmp $3b10			jmp 	MInt32Multiply 							; else do it as integer.
.31f1					_IsFPOperation:
.31f1	8a		txa				txa 								; call the relevant fp routine
.31f2	a2 0c		ldx #$0c		ldx	#12
.31f4	20 5c 24	jsr $245c		jsr	floatingpointHandler
.31f7	aa		tax				tax
.31f8	60		rts				rts
.31f9					DivHandler:
.31f9	20 81 33	jsr $3381			jsr 	DereferenceTwo
.31fc	20 84 31	jsr $3184			jsr 	BinaryProcess 				; check to see if either is float
.31ff	b0 03		bcs $3204			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.3201	4c cd 39	jmp $39cd			jmp 	MInt32SDivide 							; else do it as integer.
.3204					_IsFPOperation:
.3204	8a		txa				txa 								; call the relevant fp routine
.3205	a2 08		ldx #$08		ldx	#8
.3207	20 5c 24	jsr $245c		jsr	floatingpointHandler
.320a	aa		tax				tax
.320b	60		rts				rts
.320c					ModHandler:
.320c	20 81 33	jsr $3381			jsr 	DereferenceTwo
.320f	20 84 31	jsr $3184			jsr 	BinaryProcess 				; check to see if either is float
.3212	b0 03		bcs $3217			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.3214	4c 4b 3a	jmp $3a4b			jmp 	MInt32Modulus 							; else do it as integer.
.3217					_IsFPOperation:
.3217	8a		txa				txa 								; call the relevant fp routine
.3218	a2 0a		ldx #$0a		ldx	#10
.321a	20 5c 24	jsr $245c		jsr	floatingpointHandler
.321d	aa		tax				tax
.321e	60		rts				rts
.321f					XorHandler:
.321f	20 81 33	jsr $3381			jsr 	DereferenceTwo
.3222	20 84 31	jsr $3184			jsr 	BinaryProcess 				; check to see if either is float
.3225	b0 03		bcs $322a			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.3227	4c 7f 39	jmp $397f			jmp 	MInt32Xor 							; else do it as integer.
.322a					_IsFPOperation:
.322a	8a		txa				txa 								; call the relevant fp routine
.322b	a2 0a		ldx #$0a		ldx	#10
.322d	20 5c 24	jsr $245c		jsr	floatingpointHandler
.3230	aa		tax				tax
.3231	60		rts				rts
.3232					OrHandler:
.3232	20 81 33	jsr $3381			jsr 	DereferenceTwo
.3235	20 84 31	jsr $3184			jsr 	BinaryProcess 				; check to see if either is float
.3238	b0 03		bcs $323d			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.323a	4c 66 39	jmp $3966			jmp 	MInt32Or 							; else do it as integer.
.323d					_IsFPOperation:
.323d	8a		txa				txa 								; call the relevant fp routine
.323e	a2 0a		ldx #$0a		ldx	#10
.3240	20 5c 24	jsr $245c		jsr	floatingpointHandler
.3243	aa		tax				tax
.3244	60		rts				rts
.3245					AndHandler:
.3245	20 81 33	jsr $3381			jsr 	DereferenceTwo
.3248	20 84 31	jsr $3184			jsr 	BinaryProcess 				; check to see if either is float
.324b	b0 03		bcs $3250			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.324d	4c 4d 39	jmp $394d			jmp 	MInt32And 							; else do it as integer.
.3250					_IsFPOperation:
.3250	8a		txa				txa 								; call the relevant fp routine
.3251	a2 0a		ldx #$0a		ldx	#10
.3253	20 5c 24	jsr $245c		jsr	floatingpointHandler
.3256	aa		tax				tax
.3257	60		rts				rts
.3258					ShlHandler:
.3258	20 81 33	jsr $3381			jsr 	DereferenceTwo
.325b	20 84 31	jsr $3184			jsr 	BinaryProcess 				; check to see if either is float
.325e	b0 03		bcs $3263			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.3260	4c d9 32	jmp $32d9			jmp 	Mint32ShiftLeftX 							; else do it as integer.
.3263					_IsFPOperation:
.3263	8a		txa				txa 								; call the relevant fp routine
.3264	a2 0a		ldx #$0a		ldx	#10
.3266	20 5c 24	jsr $245c		jsr	floatingpointHandler
.3269	aa		tax				tax
.326a	60		rts				rts
.326b					ShrHandler:
.326b	20 81 33	jsr $3381			jsr 	DereferenceTwo
.326e	20 84 31	jsr $3184			jsr 	BinaryProcess 				; check to see if either is float
.3271	b0 03		bcs $3276			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.3273	4c dc 32	jmp $32dc			jmp 	MInt32ShiftRightX 							; else do it as integer.
.3276					_IsFPOperation:
.3276	8a		txa				txa 								; call the relevant fp routine
.3277	a2 0a		ldx #$0a		ldx	#10
.3279	20 5c 24	jsr $245c		jsr	floatingpointHandler
.327c	aa		tax				tax
.327d	60		rts				rts
.327e					WordRefHandler:
.327e	20 81 33	jsr $3381			jsr 	DereferenceTwo
.3281	20 84 31	jsr $3184			jsr 	BinaryProcess 				; check to see if either is float
.3284	b0 03		bcs $3289			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.3286	4c cb 32	jmp $32cb			jmp 	MInt32WordIndirect 							; else do it as integer.
.3289					_IsFPOperation:
.3289	8a		txa				txa 								; call the relevant fp routine
.328a	a2 0a		ldx #$0a		ldx	#10
.328c	20 5c 24	jsr $245c		jsr	floatingpointHandler
.328f	aa		tax				tax
.3290	60		rts				rts
.3291					ByteRefHandler:
.3291	20 81 33	jsr $3381			jsr 	DereferenceTwo
.3294	20 84 31	jsr $3184			jsr 	BinaryProcess 				; check to see if either is float
.3297	b0 03		bcs $329c			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.3299	4c cf 32	jmp $32cf			jmp 	MInt32ByteIndirect 							; else do it as integer.
.329c					_IsFPOperation:
.329c	8a		txa				txa 								; call the relevant fp routine
.329d	a2 0a		ldx #$0a		ldx	#10
.329f	20 5c 24	jsr $245c		jsr	floatingpointHandler
.32a2	aa		tax				tax
.32a3	60		rts				rts
.32a4					PowerHandler:
.32a4	20 81 33	jsr $3381			jsr 	DereferenceTwo
.32a7	20 84 31	jsr $3184			jsr 	BinaryProcess 				; check to see if either is float
.32aa	b0 03		bcs $32af			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.32ac	4c b7 32	jmp $32b7			jmp 	PowerInteger 							; else do it as integer.
.32af					_IsFPOperation:
.32af	8a		txa				txa 								; call the relevant fp routine
.32b0	a2 18		ldx #$18		ldx	#24
.32b2	20 5c 24	jsr $245c		jsr	floatingpointHandler
.32b5	aa		tax				tax
.32b6	60		rts				rts
.32b7					PowerInteger:
.32b7	20 9e 31	jsr $319e			jsr 	BPMakeBothFloat				; make them float.
.32ba	8a		txa				txa
.32bb	a2 18		ldx #$18		ldx	#24
.32bd	20 5c 24	jsr $245c		jsr	floatingpointHandler
.32c0	a2 14		ldx #$14		ldx	#20
.32c2	20 5c 24	jsr $245c		jsr	floatingpointHandler
.32c5	aa		tax				tax
.32c6	a9 00		lda #$00			lda 	#0 							; make type integer
.32c8	95 90		sta $90,x			sta 	esType,x
.32ca	60		rts				rts
.32cb					Mint32WordIndirect:
.32cb	a9 80		lda #$80	 		lda 	#$80 				 		; word reference type (bit 7 set)
.32cd	d0 02		bne $32d1			bne 	Min32Indirect
.32cf					Mint32ByteIndirect:
.32cf	a9 a0		lda #$a0			lda 	#$A0 						; byte reference type (bit 7, bit 5 set)
.32d1					Min32Indirect:
.32d1	48		pha				pha 								; save the indirection
.32d2	20 dc 3a	jsr $3adc			jsr 	MInt32Add 					; add a!b a?b
.32d5	68		pla				pla 								; and set the type to reference.
.32d6	95 90		sta $90,x			sta 	esType,x 	 				; so a!b => a+b and it's a reference....
.32d8	60		rts				rts
.32d9					Mint32ShiftLeftX:
.32d9	18		clc				clc 								; CC shift left
.32da	90 01		bcc $32dd			bcc 	Mint32Shift
.32dc					Mint32ShiftRightX:
.32dc	38		sec				sec 								; CS shift right
.32dd					Mint32Shift:
.32dd	08		php				php 								; save carry flag on stack.
.32de	b5 a1		lda $a1,x			lda 	esInt1+1,x 					; if shift >= 32 then it is zero.
.32e0	15 a9		ora $a9,x			ora 	esInt2+1,x
.32e2	15 b1		ora $b1,x			ora 	esInt3+1,x
.32e4	d0 1e		bne $3304			bne 	_MShiftZero
.32e6	b5 99		lda $99,x			lda 	esInt0+1,x
.32e8	c9 20		cmp #$20			cmp 	#32
.32ea	b0 18		bcs $3304			bcs 	_MShiftZero
.32ec					_MShiftLoop:
.32ec	b5 99		lda $99,x			lda 	esInt0+1,x 					; check count is zero
.32ee	f0 12		beq $3302			beq 	_MShiftExit
.32f0	d6 99		dec $99,x			dec 	esInt0+1,x
.32f2	28		plp				plp 								; restore and save carry
.32f3	08		php				php
.32f4	90 06		bcc $32fc			bcc 	_MShiftLeft 				; and shift left/right accordingly.
.32f6	20 16 3c	jsr $3c16			jsr 	Mint32ShiftRight
.32f9	4c ec 32	jmp $32ec			jmp 	_MShiftLoop
.32fc					_MShiftLeft:
.32fc	20 0d 3c	jsr $3c0d			jsr 	Mint32ShiftLeft
.32ff	4c ec 32	jmp $32ec			jmp 	_MShiftLoop
.3302					_MShiftExit:
.3302	28		plp				plp	 								; throw saved carry and exit
.3303	60		rts				rts
.3304					_MShiftZero:
.3304	4c f8 3b	jmp $3bf8			jmp 	MInt32False 				; return 0 as shifted >= 32 times.

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/binary/compare.asm

.3307					PerformComparison:
.3307	20 81 33	jsr $3381			jsr 	DereferenceTwo 				; make both values.
.330a	b5 90		lda $90,x			lda 	esType,x 					; check for two strings.
.330c	35 91		and $91,x			and 	esType+1,x
.330e	0a		asl a				asl 	a 							; bit 7 set if both bit 6s were set.
.330f	30 1d		bmi $332e			bmi 	_PCIsString
.3311	b5 90		lda $90,x			lda 	esType,x 					; check either is floating point.
.3313	15 91		ora $91,x			ora 	esType+1,x
.3315	0a		asl a				asl 	a 							; shift bit 6 (string) to bit 7, mixed types
.3316	30 22		bmi $333a			bmi 	_PCError
.3318	29 02		and #$02			and 	#$02 						; because of ASL, check type in bit 0
.331a	f0 0f		beq $332b			beq 	_PCIsInteger 				; if not two integers, e.g. 1 of the bits is set
.331c	20 9e 31	jsr $319e			jsr 	BPMakeBothFloat 			; make both float
.331f	8a		txa				txa
.3320	a2 06		ldx #$06		ldx	#6
.3322	20 5c 24	jsr $245c		jsr	floatingpointHandler
.3325	86 32		stx $32				stx 	tempShort 					; save result
.3327	aa		tax				tax
.3328	a5 32		lda $32				lda 	tempShort
.332a	60		rts				rts
.332b					_PCIsInteger:
.332b	4c 98 39	jmp $3998			jmp 	MInt32Compare
.332e					_PCIsString:
.332e	8a		txa				txa 								; A has SP
.332f	a2 0a		ldx #$0a		ldx	#10
.3331	20 a3 3f	jsr $3fa3		jsr	stringHandler
.3334	86 32		stx $32				stx 	tempShort 					; save result
.3336	aa		tax				tax 								; put SP back in X and get result.
.3337	a5 32		lda $32				lda 	tempShort
.3339	60		rts				rts
.333a					_PCError:
.333a	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.333c	20 18 15	jsr $1518		jsr	errorHandler
.333f					CompareEquals:
.333f	20 07 33	jsr $3307			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.3342	c9 00		cmp #$00			cmp 	#$00 						; and we do something if it is = or <> a value.
.3344	f0 35		beq $337b			beq  	CompareTrue
.3346	4c 7e 33	jmp $337e			jmp 	CompareFalse
.3349					CompareLess:
.3349	20 07 33	jsr $3307			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.334c	c9 ff		cmp #$ff			cmp 	#$FF 						; and we do something if it is = or <> a value.
.334e	f0 2b		beq $337b			beq  	CompareTrue
.3350	4c 7e 33	jmp $337e			jmp 	CompareFalse
.3353					CompareGreater:
.3353	20 07 33	jsr $3307			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.3356	c9 01		cmp #$01			cmp 	#$01 						; and we do something if it is = or <> a value.
.3358	f0 21		beq $337b			beq  	CompareTrue
.335a	4c 7e 33	jmp $337e			jmp 	CompareFalse
.335d					CompareNotEquals:
.335d	20 07 33	jsr $3307			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.3360	c9 00		cmp #$00			cmp 	#$00 						; and we do something if it is = or <> a value.
.3362	d0 17		bne $337b			bne  	CompareTrue
.3364	4c 7e 33	jmp $337e			jmp 	CompareFalse
.3367					CompareGreaterEq:
.3367	20 07 33	jsr $3307			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.336a	c9 ff		cmp #$ff			cmp 	#$FF 						; and we do something if it is = or <> a value.
.336c	d0 0d		bne $337b			bne  	CompareTrue
.336e	4c 7e 33	jmp $337e			jmp 	CompareFalse
.3371					CompareLessEq:
.3371	20 07 33	jsr $3307			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.3374	c9 01		cmp #$01			cmp 	#$01 						; and we do something if it is = or <> a value.
.3376	d0 03		bne $337b			bne  	CompareTrue
.3378	4c 7e 33	jmp $337e			jmp 	CompareFalse
.337b					CompareTrue:
.337b	4c f4 3b	jmp $3bf4			jmp 	MInt32True
.337e					CompareFalse:
.337e	4c f8 3b	jmp $3bf8			jmp 	MInt32False

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/dereference.asm

.3381					DereferenceTwo:
.3381	e8		inx				inx
.3382	20 86 33	jsr $3386			jsr 	DereferenceOne
.3385	ca		dex				dex
.3386					DereferenceOne:
.3386	b5 90		lda $90,x			lda 	esType,x
.3388	10 3d		bpl $33c7			bpl 	_DRNotReference 			; is it a reference ? if not, we don't need to do anything
.338a	4a		lsr a				lsr 	a 							; do float dereference if bit 0 set.
.338b	b0 3b		bcs $33c8			bcs 	_DRFloatDeReference
.338d	98		tya				tya
.338e	48		pha				pha
.338f	b5 98		lda $98,x			lda 	esInt0,x 					; copy address to temp0
.3391	85 2a		sta $2a				sta 	temp0
.3393	b5 a0		lda $a0,x			lda 	esInt1,x
.3395	85 2b		sta $2b				sta 	temp0+1
.3397	a9 00		lda #$00			lda 	#0 							; clear esInt1..3
.3399	95 a0		sta $a0,x			sta 	esInt1,x
.339b	95 a8		sta $a8,x			sta 	esInt2,x
.339d	95 b0		sta $b0,x			sta 	esInt3,x
.339f	b5 90		lda $90,x			lda 	esType,x 					; get the type byte.
.33a1	29 60		and #$60			and 	#$60 						; get string flag ($40) and byte flag ($20)
.33a3	0a		asl a				asl 	a 							; now string ($80) byte ($40)
.33a4	30 0d		bmi $33b3			bmi 	_DeRefString 				; string, 2 bytes only
.33a6	d0 11		bne $33b9			bne 	_DeRefByte 					; byte 1 byte only
.33a8					_DeRefLong:
.33a8	a0 03		ldy #$03			ldy 	#3
.33aa	b1 2a		lda ($2a),y			lda 	(temp0),y
.33ac	95 b0		sta $b0,x			sta 	esInt3,x
.33ae	88		dey				dey
.33af	b1 2a		lda ($2a),y			lda 	(temp0),y
.33b1	95 a8		sta $a8,x			sta 	esInt2,x
.33b3					_DeRefString:
.33b3	a0 01		ldy #$01			ldy 	#1
.33b5	b1 2a		lda ($2a),y			lda 	(temp0),y
.33b7	95 a0		sta $a0,x			sta 	esInt1,x
.33b9					_DeRefByte:
.33b9	a0 00		ldy #$00			ldy 	#0
.33bb	b1 2a		lda ($2a),y			lda 	(temp0),y
.33bd	95 98		sta $98,x			sta 	esInt0,x
.33bf	b5 90		lda $90,x			lda 	esType,x 					; clear byte and deref bits.
.33c1	29 40		and #$40			and 	#$40
.33c3	95 90		sta $90,x			sta 	esType,x
.33c5	68		pla				pla
.33c6	a8		tay				tay
.33c7					_DRNotReference
.33c7	60		rts				rts
.33c8					_DRFloatDereference:
.33c8	20 4e 29	jsr $294e			jsr 	TOSToTemp0 					; address to deref in temp0
.33cb	8a		txa				txa
.33cc	a2 1e		ldx #$1e		ldx	#30
.33ce	20 5c 24	jsr $245c		jsr	floatingpointHandler
.33d1	aa		tax				tax
.33d2	a9 01		lda #$01			lda 	#$01 						; type to FP (float)
.33d4	95 90		sta $90,x			sta 	esType,x
.33d6	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/evaluate.asm

.33d7					EvaluateLevel:
.33d7	e0 08		cpx #$08			cpx 	#StackSize 					; check stack overflow
.33d9	b0 1e		bcs $33f9			bcs 	_ELStack
.33db	48		pha				pha 								; save precedence level.
.33dc	a9 00		lda #$00			lda 	#0 							; zero the current stack level.
.33de	95 98		sta $98,x			sta 	esInt0,x
.33e0	95 a0		sta $a0,x			sta 	esInt1,x
.33e2	95 a8		sta $a8,x			sta 	esInt2,x
.33e4	95 b0		sta $b0,x			sta 	esInt3,x
.33e6	95 90		sta $90,x			sta 	esType,x 					; zero the type (integer value)
.33e8	b1 28		lda ($28),y			lda 	(codePtr),y	 				; look at first token/character
.33ea	30 26		bmi $3412			bmi 	_ELIsToken 					; if -ve could be string, float, or unary function.
.33ec	0a		asl a				asl 	a 							; if 00-3F then will now be PL and it's a variable.
.33ed	30 0f		bmi $33fe			bmi 	_ELIsConstant 				; 40-7F will be -ve and that's an integer constant.
.33ef	8a		txa				txa 								; stack level in X
.33f0	a2 02		ldx #$02		ldx	#2
.33f2	20 fd 4b	jsr $4bfd		jsr	variableHandler
.33f5	aa		tax				tax
.33f6	4c 3b 34	jmp $343b			jmp		_ELHasTerm
.33f9					_ELStack:
.33f9	a2 23		ldx #$23			ldx 	#ErrorID_NumStack
.33fb	20 18 15	jsr $1518		jsr	errorHandler
.33fe					_ELIsConstant:
.33fe	4a		lsr a				lsr 	a 							; get the value back
.33ff	29 3f		and #$3f			and 	#$3F 						; force into range 0-63
.3401	95 98		sta $98,x			sta 	esInt0,x 					; and put in LSB.
.3403					_ELCheckNext:
.3403	c8		iny				iny 								; look at next
.3404	b1 28		lda ($28),y			lda 	(codePtr),y
.3406	49 40		eor #$40			eor 	#$40 						; shift around so 40-7F => 00-3F
.3408	c9 40		cmp #$40			cmp 	#$40 						; out of range ?
.340a	b0 2f		bcs $343b			bcs 	_ELHasTerm 					; done getting the constant.
.340c	20 d4 34	jsr $34d4			jsr 	ELShiftByteIn 				; shift byte into position.
.340f	4c 03 34	jmp $3403			jmp 	_ELCheckNext
.3412					_ELIsToken:
.3412	c9 85		cmp #$85			cmp 	#TOK_STR 					; handle strings.
.3414	f0 0f		beq $3425			beq 	_ELIsString
.3416	c9 84		cmp #$84			cmp 	#TOK_FPC 					; if no, then check unary.
.3418	d0 5f		bne $3479			bne 	_ELCheckUnary
.341a	8a		txa				txa 								; put X into A
.341b	c8		iny				iny 								; skip over the float marker
.341c	a2 1a		ldx #$1a		ldx	#26
.341e	20 5c 24	jsr $245c		jsr	floatingpointHandler
.3421	aa		tax				tax 								; restore X
.3422	4c 3b 34	jmp $343b			jmp 	_ELHasTerm
.3425					_ELIsString:
.3425	98		tya				tya 								; address of string is codePtr+y+1
.3426	38		sec				sec
.3427	65 28		adc $28				adc 	codePtr
.3429	95 98		sta $98,x			sta 	esInt0,x
.342b	a5 29		lda $29				lda 	codePtr+1
.342d	69 00		adc #$00			adc 	#0
.342f	95 a0		sta $a0,x			sta 	esInt1,x
.3431	a9 40		lda #$40			lda 	#$40 						; set type to string value
.3433	95 90		sta $90,x			sta 	esType,x
.3435	c8		iny				iny 								; skip over string.
.3436	98		tya				tya
.3437	38		sec				sec									; +1 for the length itself.
.3438	71 28		adc ($28),y			adc 	(codePtr),y
.343a	a8		tay				tay 								; and fall through to term loop code.
.343b					_ELHasTerm:
.343b	b1 28		lda ($28),y			lda 	(codePtr),y
.343d	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; check in the correct range for binary tokens.
.343f	90 04		bcc $3445			bcc 	_ELPopExit
.3441	c9 99		cmp #$99			cmp 	#TOK_STRUCTST
.3443	90 02		bcc $3447			bcc 	_ELHasBinaryTerm
.3445					_ELPopExit:
.3445	68		pla				pla
.3446					_ELExit:
.3446	60		rts				rts
.3447					_ELHasBinaryTerm:
.3447	84 32		sty $32				sty 	tempShort 					; save position
.3449	a8		tay				tay 								; use token as an index and get the precedence.
.344a	b9 7c 34	lda $347c,y			lda 	ELBinaryOperatorInfo-TOK_BINARYST,y
.344d	a4 32		ldy $32				ldy 	tempShort 					; restore Y
.344f	85 32		sta $32				sta 	tempShort 					; save precedence in memory.
.3451	68		pla				pla 								; restore current level.
.3452	c5 32		cmp $32				cmp 	tempShort 					; if current >= operator then exit
.3454	b0 f0		bcs $3446			bcs 	_ELExit
.3456	48		pha				pha 								; save current level back on the stack.
.3457	b1 28		lda ($28),y			lda 	(codePtr),y 				; save the binary operator on the stack and skip it.
.3459	48		pha				pha
.345a	c8		iny				iny
.345b	e8		inx				inx 								; calculate the RHS at the operator precedence.
.345c	a5 32		lda $32				lda 	tempShort
.345e	20 d7 33	jsr $33d7			jsr 	EvaluateLevel
.3461	ca		dex				dex
.3462	68		pla				pla 								; get the operator back out.
.3463					_ELExecuteA:
.3463	86 32		stx $32				stx 	tempShort 					; upload the vectors. Would be nice to use jmp (aaaa,x)
.3465	0a		asl a				asl 	a 							; but not practical. May use push/rts later.
.3466	aa		tax				tax
.3467	bd 96 30	lda $3096,x			lda 	Group0Vectors,x
.346a	85 2a		sta $2a				sta 	temp0
.346c	bd 97 30	lda $3097,x			lda 	Group0Vectors+1,x
.346f	85 2b		sta $2b				sta 	temp0+1
.3471	a6 32		ldx $32				ldx 	tempShort
.3473	20 c0 34	jsr $34c0			jsr 	_ELCallTemp0
.3476	4c 3b 34	jmp $343b			jmp 	_ELHasTerm 					; and loop back round.
.3479					_ELCheckUnary:
.3479	c8		iny				iny 								; skip over token.
.347a	c9 90		cmp #$90			cmp 	#TKW_MINUS 					; is it - term
.347c	f0 19		beq $3497			beq 	_ELMinus
.347e	c9 97		cmp #$97			cmp 	#TKW_PLING 					; is it ! or ? term
.3480	f0 2c		beq $34ae			beq 	_ELIndirect
.3482	c9 98		cmp #$98			cmp 	#TKW_QMARK
.3484	f0 28		beq $34ae			beq 	_ELIndirect
.3486	c9 83		cmp #$83			cmp 	#TOK_SHIFT3 				; is it the unary extension.
.3488	f0 39		beq $34c3			beq 	_ELExtension
.348a	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST 				; must be TOK_UNARYST ... TOK_TOKENS
.348c	90 04		bcc $3492			bcc 	_ELUSyntax
.348e	c9 c9		cmp #$c9			cmp 	#TOK_TOKENS
.3490	90 d1		bcc $3463			bcc 	_ELExecuteA 				; if so do that token.
.3492					_ELUSyntax:
.3492	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.3494	20 18 15	jsr $1518		jsr	errorHandler
.3497					_ELMinus:
.3497	20 29 35	jsr $3529			jsr 	EvaluateNumericTerm 		; get a number to negate.
.349a	b5 90		lda $90,x			lda 	esType,x 					; is it integer
.349c	f0 0a		beq $34a8			beq 	_ELMinusInteger
.349e	8a		txa				txa
.349f	a2 0e		ldx #$0e		ldx	#14
.34a1	20 5c 24	jsr $245c		jsr	floatingpointHandler
.34a4	aa		tax				tax
.34a5	4c 3b 34	jmp $343b			jmp 	_ELHasTerm
.34a8					_ELMinusInteger:
.34a8	20 b2 3b	jsr $3bb2			jsr 	MInt32Negate 				; do int negate
.34ab	4c 3b 34	jmp $343b			jmp 	_ELHasTerm
.34ae					_ELIndirect:
.34ae	48		pha				pha 								; save what we want (TKW_QMARK TWK_PLING)
.34af	20 32 35	jsr $3532			jsr 	EvaluateIntegerTerm 		; integer address
.34b2	68		pla				pla
.34b3	49 97		eor #$97			eor 	#TKW_PLING 					; now $00 if !
.34b5	f0 02		beq $34b9			beq 	_ELHaveModifier
.34b7	a9 20		lda #$20			lda 	#$20 						; now $00 if !, $20 if ?
.34b9					_ELHaveModifier:
.34b9	09 80		ora #$80			ora 	#$80						; make it the appropriate reference.
.34bb	95 90		sta $90,x			sta 	esType,x 					; $80 for ! $A0 for ?
.34bd	4c 3b 34	jmp $343b			jmp 	_ELHasTerm
.34c0					_ELCallTemp0:
.34c0	6c 2a 00	jmp ($002a)			jmp 	(temp0)
.34c3					_ELExtension:
.34c3	8a		txa				txa 								; stack pos in A
.34c4	20 69 18	jsr $1869		jsr	extensionHandler
.34c7	aa		tax				tax 								; restore stack
.34c8	4c 3b 34	jmp $343b			jmp 	_ELHasTerm
.34cb					UnaryParenthesis:
.34cb	a9 00		lda #$00			lda 	#0 							; ( is a unary function ....
.34cd	20 d7 33	jsr $33d7			jsr 	EvaluateLevel
.34d0	20 6b 3c	jsr $3c6b			jsr 	CheckRightParen 			; check for )
.34d3	60		rts				rts
.34d4					ELShiftByteIn:
.34d4	48		pha				pha 								; save bits to shift in.
.34d5	b5 b0		lda $b0,x			lda 	esInt3,x 					; save top most byte
.34d7	48		pha				pha
.34d8	b5 a8		lda $a8,x			lda 	esInt2,x 					; shift everything left 8 bits
.34da	95 b0		sta $b0,x			sta 	esInt3,x
.34dc	b5 a0		lda $a0,x			lda 	esInt1,x
.34de	95 a8		sta $a8,x			sta 	esInt2,x
.34e0	b5 98		lda $98,x			lda 	esInt0,x
.34e2	95 a0		sta $a0,x			sta 	esInt1,x
.34e4	a9 00		lda #$00			lda 	#0
.34e6	95 98		sta $98,x			sta 	esInt0,x
.34e8	68		pla				pla 								; now A:TOS is a 5 byte register, shift right twice.
.34e9	29 03		and #$03			and 	#3 							; only want lower 2 bits
.34eb	09 04		ora #$04			ora 	#4  						; set bit 2 - when 1 we are done
.34ed					_ELShiftLoop:
.34ed	4a		lsr a				lsr 	a
.34ee	76 b0		ror $b0,x			ror 	esInt3,x
.34f0	76 a8		ror $a8,x			ror 	esInt2,x
.34f2	76 a0		ror $a0,x			ror 	esInt1,x
.34f4	76 98		ror $98,x			ror 	esInt0,x
.34f6	c9 01		cmp #$01			cmp 	#1
.34f8	d0 f3		bne $34ed			bne 	_ELShiftLoop
.34fa	68		pla				pla 								; get original 6 bit value and OR in.
.34fb	29 3f		and #$3f			and 	#$3F
.34fd	15 98		ora $98,x			ora 	esInt0,x
.34ff	95 98		sta $98,x			sta 	esInt0,x
.3501	60		rts				rts
.3502					ELBinaryOperatorInfo:

;******  Processing file: main/evaluate/../../generated/binarystructinfo.inc

>3502	01					.byte	$01			; $86 and
>3503	01					.byte	$01			; $87 or
>3504	01					.byte	$01			; $88 xor
>3505	02					.byte	$02			; $89 >=
>3506	02					.byte	$02			; $8a <=
>3507	02					.byte	$02			; $8b >
>3508	02					.byte	$02			; $8c <
>3509	02					.byte	$02			; $8d =
>350a	02					.byte	$02			; $8e <>
>350b	03					.byte	$03			; $8f +
>350c	03					.byte	$03			; $90 -
>350d	04					.byte	$04			; $91 >>
>350e	04					.byte	$04			; $92 <<
>350f	04					.byte	$04			; $93 *
>3510	04					.byte	$04			; $94 /
>3511	04					.byte	$04			; $95 mod
>3512	05					.byte	$05			; $96 ^
>3513	06					.byte	$06			; $97 !
>3514	06					.byte	$06			; $98 ?
>3515	82					.byte	$82			; $99 repeat
>3516	82					.byte	$82			; $9a while
>3517	82					.byte	$82			; $9b for
>3518	82					.byte	$82			; $9c if
>3519	82					.byte	$82			; $9d defproc
>351a	80					.byte	$80			; $9e until
>351b	80					.byte	$80			; $9f wend
>351c	80					.byte	$80			; $a0 next
>351d	80					.byte	$80			; $a1 then
>351e	80					.byte	$80			; $a2 endif
>351f	80					.byte	$80			; $a3 endproc

;******  Return to file: main/evaluate/evaluate.asm


;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/support.asm

.3520					EvaluateTerm:
.3520	a9 0f		lda #$0f			lda 	#15 						; no binary operator has this high a precedence.
.3522	20 d7 33	jsr $33d7			jsr 	EvaluateLevel
.3525	20 86 33	jsr $3386			jsr 	DereferenceOne
.3528	60		rts				rts
.3529					EvaluateNumericTerm:
.3529	20 20 35	jsr $3520			jsr 	EvaluateTerm
.352c	b5 90		lda $90,x			lda 	esType,x
.352e	0a		asl a				asl 	a 							; see if it's a string.
.352f	30 09		bmi $353a			bmi 	ENTType
.3531	60		rts				rts
.3532					EvaluateIntegerTerm:
.3532	20 20 35	jsr $3520			jsr 	EvaluateTerm
.3535	b5 90		lda $90,x			lda 	esType,x
.3537	d0 01		bne $353a			bne 	ENTType
.3539	60		rts				rts
.353a					ENTType:
.353a	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.353c	20 18 15	jsr $1518		jsr	errorHandler
.353f					EvaluateRoot:
.353f	a2 00		ldx #$00			ldx 	#0
.3541					Evaluate:
.3541	a9 00		lda #$00			lda 	#0
.3543	20 d7 33	jsr $33d7			jsr 	EvaluateLevel
.3546	20 86 33	jsr $3386			jsr 	DereferenceOne
.3549	60		rts				rts
.354a					EvaluateNumeric:
.354a	20 41 35	jsr $3541			jsr 	Evaluate
.354d	b5 90		lda $90,x			lda 	esType,x
.354f	0a		asl a				asl 	a 							; see if it's a string.
.3550	30 e8		bmi $353a			bmi 	ENTType
.3552	4a		lsr a				lsr 	a 							; shift float flag into carry.
.3553	4a		lsr a				lsr 	a
.3554	60		rts				rts
.3555					EvaluateString:
.3555	20 41 35	jsr $3541			jsr 	Evaluate
.3558	b5 90		lda $90,x			lda 	esType,x
.355a	0a		asl a				asl 	a 							; see if it's a string.
.355b	10 dd		bpl $353a			bpl 	ENTType
.355d	60		rts				rts
.355e					EvaluateRootInteger:
.355e	a2 00		ldx #$00			ldx 	#0
.3560					EvaluateInteger:
.3560	20 41 35	jsr $3541			jsr 	Evaluate
.3563	b5 90		lda $90,x			lda 	esType,x
.3565	d0 d3		bne $353a			bne 	ENTType
.3567	60		rts				rts
.3568					EvaluateSmallInteger:
.3568	20 60 35	jsr $3560			jsr 	EvaluateInteger
.356b	b5 a0		lda $a0,x			lda 	esInt1,x
.356d	15 a8		ora $a8,x			ora 	esInt2,x
.356f	15 b0		ora $b0,x			ora 	esInt3,x
.3571	d0 03		bne $3576			bne 	_ESIValue
.3573	b5 98		lda $98,x			lda 	esInt0,x
.3575	60		rts				rts
.3576					_ESIValue:
.3576	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.3578	20 18 15	jsr $1518		jsr	errorHandler
.357b					LinkEvaluate:
.357b	aa		tax				tax
.357c	20 41 35	jsr $3541			jsr 	Evaluate
.357f	8a		txa				txa
.3580	60		rts				rts
.3581					LinkEvaluateTerm:
.3581	aa		tax				tax
.3582	20 20 35	jsr $3520			jsr 	EvaluateTerm
.3585	8a		txa				txa
.3586	60		rts				rts
.3587					LinkEvaluateInteger:
.3587	aa		tax				tax
.3588	20 60 35	jsr $3560			jsr 	EvaluateInteger
.358b	8a		txa				txa
.358c	60		rts				rts
.358d					LinkEvaluateString:
.358d	aa		tax				tax
.358e	20 55 35	jsr $3555			jsr 	EvaluateString
.3591	8a		txa				txa
.3592	60		rts				rts
.3593					LinkEvaluateSmallInt:
.3593	aa		tax				tax
.3594	20 68 35	jsr $3568			jsr 	EvaluateSmallInteger
.3597	8a		txa				txa
.3598	60		rts				rts
.3599					EvaluateReference:
.3599	ad 13 35	lda $3513			lda 	ELBinaryOperatorInfo+TKW_PLING-TOK_BINARYST
.359c	38		sec				sec 								; sub 1 to allow a!x b?x to work.
.359d	e9 01		sbc #$01			sbc 	#1
.359f	20 d7 33	jsr $33d7			jsr 	EvaluateLevel
.35a2	b5 90		lda $90,x			lda 	esType,x
.35a4	10 01		bpl $35a7			bpl 	_ERFail
.35a6	60		rts				rts
.35a7					_ERFail:
.35a7	a2 0b		ldx #$0b			ldx 	#ErrorID_NoReference
.35a9	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary/convert.asm

.35ac					Event_Str:
.35ac	20 4a 35	jsr $354a			jsr 	EvaluateNumeric 			; get a number.
.35af	b5 90		lda $90,x			lda 	esType,x 					; is it floating point
.35b1	d0 13		bne $35c6			bne 	_ESFloat
.35b3	20 09 36	jsr $3609			jsr 	ConvertGetBase 				; get base, or default.
.35b6	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.35b8	85 2a		sta $2a				sta 	temp0
.35ba	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.35bc	85 2b		sta $2b				sta 	1+(temp0)
.35be	b5 99		lda $99,x			lda 	esInt0+1,x 					; get the base
.35c0	20 4e 3b	jsr $3b4e			jsr 	MInt32ToString 				; convert to string.
.35c3	4c d3 35	jmp $35d3			jmp 	_ESCloneExit 				; clone and exit.
.35c6					_ESFloat:
.35c6	20 6b 3c	jsr $3c6b			jsr 	CheckRightParen 			; check closing )
.35c9	20 4e 29	jsr $294e			jsr 	TOSToTemp0 					; string address in temp0, goes here.
.35cc	8a		txa				txa
.35cd	a2 16		ldx #$16		ldx	#22
.35cf	20 5c 24	jsr $245c		jsr	floatingpointHandler
.35d2	aa		tax				tax
.35d3					_ESCloneExit:
.35d3	8a		txa				txa
.35d4	a2 04		ldx #$04		ldx	#4
.35d6	20 a3 3f	jsr $3fa3		jsr	stringHandler
.35d9	aa		tax				tax
.35da	60		rts				rts
.35db					UnaryVal:
.35db	38		sec				sec 								; Carry set to return value
.35dc	b0 01		bcs $35df			bcs 	ValueMain
.35de					UnaryIsVal:
.35de	18		clc				clc									; Carry clear to return legitimacy
.35df					ValueMain:
.35df	08		php				php 								; save results (CS is value, CC is validation)
.35e0	20 55 35	jsr $3555			jsr 	EvaluateString
.35e3	20 09 36	jsr $3609			jsr 	ConvertGetBase 				; get base, if any.
.35e6	98		tya				tya
.35e7	48		pha				pha
.35e8	20 4e 29	jsr $294e			jsr 	TOSToTemp0 					; string address in temp0, goes here.
.35eb	b5 99		lda $99,x			lda 	esInt0+1,x 					; get the base
.35ed	29 7f		and #$7f			and 	#$7F 						; ignore the sign bit.
.35ef	20 66 3a	jsr $3a66			jsr 	MInt32FromString 			; convert it back from a string.
.35f2	b0 0c		bcs $3600			bcs 	_VMSuccess 					; successfully converted.
.35f4	b5 99		lda $99,x			lda 	esInt0+1,x 					; is base the default
.35f6	c9 8a		cmp #$8a			cmp 	#$80+10 					; if no, then it is integer only.
.35f8	f0 00		beq $35fa			beq 	_VMFailed 	 				; so we failed.
.35fa					_VMFailed:
.35fa	68		pla				pla
.35fb	a8		tay				tay
.35fc	28		plp				plp
.35fd	4c f8 3b	jmp $3bf8			jmp 	MInt32False 				; return 0 whatever.
.3600					_VMSuccess:
.3600	68		pla				pla
.3601	a8		tay				tay
.3602	28		plp				plp 								; if CS the it was val() so we want the value.
.3603	b0 03		bcs $3608			bcs 	_VMExit
.3605	4c f4 3b	jmp $3bf4			jmp 	MInt32True 					; otherwise return true as successful.
.3608					_VMExit:
.3608	60		rts				rts
.3609					ConvertGetBase:
.3609	a9 8a		lda #$8a			lda 	#10+$80 					; default base 10 signed.
.360b	95 99		sta $99,x			sta 	esInt0+1,x
.360d	b1 28		lda ($28),y			lda 	(codePtr),y 				; check for ,base)
.360f	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.3611	d0 0e		bne $3621			bne 	_CGBDone 					; not found, should be )
.3613	e8		inx				inx 								; next level
.3614	c8		iny				iny 								; skip comma.
.3615	20 68 35	jsr $3568			jsr 	EvaluateSmallInteger		; evaluate the base.
.3618	ca		dex				dex
.3619	c9 02		cmp #$02			cmp 	#2 							; base range is 2..16
.361b	90 08		bcc $3625			bcc 	_CGBValue 					; (it should work as high as 37)
.361d	c9 11		cmp #$11			cmp 	#17
.361f	b0 04		bcs $3625			bcs 	_CGBValue
.3621					_CGBDone:
.3621	20 6b 3c	jsr $3c6b			jsr 	CheckRightParen
.3624	60		rts				rts
.3625					_CGBValue:
.3625	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.3627	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary/event.asm

.362a					EventFunction:
.362a	20 99 35	jsr $3599			jsr 	EvaluateReference			; get the variable reference that tracks the event
.362d	b5 90		lda $90,x			lda 	esType,x
.362f	c9 80		cmp #$80			cmp 	#$80 						; must be integer reference
.3631	d0 5b		bne $368e			bne 	_EFType
.3633	20 78 3c	jsr $3c78			jsr 	CheckComma
.3636	e8		inx				inx
.3637	20 60 35	jsr $3560			jsr 	EvaluateInteger		 		; get the elapsed time between firing.
.363a	20 6b 3c	jsr $3c6b			jsr 	CheckRightParen 			; finish off with the right bracket
.363d	ca		dex				dex
.363e	b5 a0		lda $a0,x			lda 	esInt1,x 					; check max of 32767, we use 16 bit for timers and
.3640	29 80		and #$80			and 	#$80 						; it doesn't work > 32767
.3642	15 a8		ora $a8,x			ora 	esInt2,x
.3644	15 b0		ora $b0,x			ora 	esInt3,x
.3646	d0 41		bne $3689			bne 	_EFValue
.3648	98		tya				tya
.3649	48		pha				pha
.364a	8a		txa				txa
.364b	48		pha				pha
.364c	a2 1c		ldx #$1c		ldx	#28
.364e	20 f6 14	jsr $14f6		jsr	deviceHandler
.3651	84 2d		sty $2d				sty 	temp1+1
.3653	85 2c		sta $2c				sta 	temp1
.3655	68		pla				pla
.3656	aa		tax				tax
.3657	20 4e 29	jsr $294e			jsr 	TOSToTemp0 					; set temp0 to the address of the event variable
.365a	a0 03		ldy #$03			ldy 	#3							; if -ve
.365c	b1 2a		lda ($2a),y			lda 	(temp0),y
.365e	30 23		bmi $3683			bmi 	_EFFail 	 				; straight out with fail, means "on pause".
.3660	a0 00		ldy #$00			ldy 	#0 							; is the fire time zero ?
.3662	b1 2a		lda ($2a),y			lda 	(temp0),y
.3664	c8		iny				iny
.3665	11 2a		ora ($2a),y			ora 	(temp0),y
.3667	f0 17		beq $3680			beq 	_EFInitialise 				; if so, initialise the value but return false.
.3669	a0 00		ldy #$00			ldy 	#0 							; calculate trigger - timer
.366b	38		sec				sec
.366c	b1 2a		lda ($2a),y			lda 	(temp0),y
.366e	e5 2c		sbc $2c				sbc 	temp1
.3670	c8		iny				iny
.3671	b1 2a		lda ($2a),y			lda 	(temp0),y
.3673	e5 2d		sbc $2d				sbc 	temp1+1
.3675	10 0c		bpl $3683			bpl 	_EFFail 					; if trigger >= timer then return False
.3677	20 93 36	jsr $3693			jsr 	SetEventTimer 				; reset the timer for next time.
.367a	20 f4 3b	jsr $3bf4			jsr	 	MInt32True 					; and treutn true as fired.
.367d	68		pla				pla
.367e	a8		tay				tay
.367f	60		rts				rts
.3680					_EFInitialise:
.3680	20 93 36	jsr $3693			jsr		SetEventTimer 				; set trigger time to time + elapsed
.3683					_EFFail:
.3683	68		pla				pla
.3684	a8		tay				tay
.3685	20 f8 3b	jsr $3bf8			jsr 	MInt32False
.3688	60		rts				rts
.3689					_EFValue:
.3689	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.368b	20 18 15	jsr $1518		jsr	errorHandler
.368e					_EFType:
.368e	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.3690	20 18 15	jsr $1518		jsr	errorHandler
.3693					SetEventTimer:
.3693	a0 00		ldy #$00			ldy 	#0
.3695	18		clc				clc
.3696	a5 2c		lda $2c				lda 	temp1
.3698	75 99		adc $99,x			adc 	esInt0+1,x
.369a	91 2a		sta ($2a),y			sta		(temp0),y
.369c	c8		iny				iny
.369d	a5 2d		lda $2d				lda 	temp1+1
.369f	75 a1		adc $a1,x			adc 	esInt1+1,x
.36a1	91 2a		sta ($2a),y			sta		(temp0),y
.36a3	88		dey				dey
.36a4	11 2a		ora ($2a),y			ora 	(temp0),y 					; if the result is non zero, exit
.36a6	d0 04		bne $36ac			bne 	_SETExit 					; zero means initialise.....
.36a8	a9 01		lda #$01			lda 	#1 							; timer zero won't work, so make it 1, which is
.36aa	91 2a		sta ($2a),y			sta 	(temp0),y 					; near enough.
.36ac					_SETExit:
.36ac	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary/unary.asm

.36ad					UnaryLen:
.36ad	20 bb 36	jsr $36bb			jsr 	ULStart
.36b0					ULFinish:
.36b0	b1 2a		lda ($2a),y			lda 	(temp0),y 					; get length prefix
.36b2	a4 32		ldy $32				ldy 	tempShort 					; get Y back
.36b4	20 07 3c	jsr $3c07			jsr 	MInt32Set8Bit 				; write it out.
.36b7	20 6b 3c	jsr $3c6b			jsr 	CheckRightParen
.36ba	60		rts				rts
.36bb	20 55 35	jsr $3555	ULStart:jsr 	EvaluateString
.36be	b5 98		lda $98,x			lda 	esInt0,x 					; copy address of string to temp0
.36c0	85 2a		sta $2a				sta 	temp0
.36c2	b5 a0		lda $a0,x			lda 	esInt1,x
.36c4	85 2b		sta $2b				sta 	temp0+1
.36c6	84 32		sty $32				sty 	tempShort 					; get length
.36c8	a0 00		ldy #$00			ldy 	#0
.36ca	60		rts				rts
.36cb					UnaryAsc:
.36cb	20 bb 36	jsr $36bb			jsr 	ULStart 					; same as LEN() get string, save Y, point to length.
.36ce	b1 2a		lda ($2a),y			lda 	(temp0),y 					; read length
.36d0	c8		iny				iny 		 						; point to first character, we can do LEN code after that
.36d1	c9 00		cmp #$00			cmp 	#0
.36d3	d0 db		bne $36b0			bne 	ULFinish 					; if length = 0 then error : asc("") -> error.
.36d5	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.36d7	20 18 15	jsr $1518		jsr	errorHandler
.36da					UnaryAbs:
.36da	20 4a 35	jsr $354a			jsr 	EvaluateNumeric 			; some numeric value
.36dd	b0 07		bcs $36e6			bcs 	_UAFloat 					; CS then float, so use that function
.36df	20 ad 3b	jsr $3bad			jsr 	MInt32Absolute 				; int version
.36e2	20 6b 3c	jsr $3c6b			jsr 	CheckRightParen
.36e5	60		rts				rts
.36e6					_UAFloat:
.36e6	8a		txa				txa 								; float version
.36e7	a2 02		ldx #$02		ldx	#2
.36e9	20 5c 24	jsr $245c		jsr	floatingpointHandler
.36ec	aa		tax				tax
.36ed	20 6b 3c	jsr $3c6b			jsr 	CheckRightParen
.36f0	60		rts				rts
.36f1					UnarySgn:
.36f1	20 4a 35	jsr $354a			jsr 	EvaluateNumeric 			; same as above but sign of value
.36f4	b0 07		bcs $36fd			bcs 	_USFloat
.36f6	20 e5 3b	jsr $3be5			jsr 	MInt32Sign
.36f9	20 6b 3c	jsr $3c6b			jsr 	CheckRightParen
.36fc	60		rts				rts
.36fd					_USFloat:
.36fd	8a		txa				txa
.36fe	a2 10		ldx #$10		ldx	#16
.3700	20 5c 24	jsr $245c		jsr	floatingpointHandler
.3703	aa		tax				tax
.3704	20 6b 3c	jsr $3c6b			jsr 	CheckRightParen
.3707	60		rts				rts
.3708					UnaryPeek:
.3708	20 34 37	jsr $3734			jsr 	PDLCode 					; each has common setup code put reads 1,2 or 4 bytes
.370b	4c 28 37	jmp $3728			jmp 	PDLByte0
.370e					UnaryDeek:
.370e	20 34 37	jsr $3734			jsr 	PDLCode
.3711	4c 22 37	jmp $3722			jmp 	PDLByte1
.3714					UnaryLeek:
.3714	20 34 37	jsr $3734			jsr 	PDLCode
.3717	a0 03		ldy #$03			ldy 	#3							; read 3-2
.3719	b1 2a		lda ($2a),y			lda 	(temp0),y
.371b	95 b0		sta $b0,x			sta 	esInt3,x
.371d	88		dey				dey
.371e	b1 2a		lda ($2a),y			lda 	(temp0),y
.3720	95 a8		sta $a8,x			sta 	esInt2,x
.3722					PDLByte1:
.3722	a0 01		ldy #$01			ldy 	#1
.3724	b1 2a		lda ($2a),y			lda 	(temp0),y
.3726	95 a0		sta $a0,x			sta 	esInt1,x
.3728					PDLByte0:
.3728	a0 00		ldy #$00			ldy 	#0
.372a	b1 2a		lda ($2a),y			lda 	(temp0),y
.372c	95 98		sta $98,x			sta 	esInt0,x
.372e	a4 32		ldy $32				ldy 	tempShort 					; restore Y
.3730	20 6b 3c	jsr $3c6b			jsr 	CheckRightParen 			; check right and return
.3733	60		rts				rts
.3734					PDLCode:
.3734	20 60 35	jsr $3560			jsr 	EvaluateInteger 			; some address
.3737	b5 98		lda $98,x			lda 	esInt0,x 					; copy address of string to temp0
.3739	85 2a		sta $2a				sta 	temp0
.373b	b5 a0		lda $a0,x			lda 	esInt1,x
.373d	85 2b		sta $2b				sta 	temp0+1
.373f	a9 00		lda #$00			lda 	#0 							; zero upper 3 bytes of result, type okay.
.3741	95 a0		sta $a0,x			sta 	esInt1,x 					; PEEK needs upper 3 cleared
.3743	95 a8		sta $a8,x			sta 	esInt2,x
.3745	95 b0		sta $b0,x			sta 	esInt3,x
.3747	84 32		sty $32				sty 	tempShort 					; save Y
.3749	60		rts				rts
.374a					Unary_Random:
.374a	20 28 3c	jsr $3c28			jsr 	MInt32Random 				; generate random number.
.374d	b1 28		lda ($28),y			lda 	(codePtr),y 				; check followed by )
.374f	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.3751	f0 08		beq $375b			beq 	_URExit
.3753	e8		inx				inx 								; load range 0..r-1 into +1
.3754	20 60 35	jsr $3560			jsr 	EvaluateInteger
.3757	ca		dex				dex
.3758	20 4b 3a	jsr $3a4b			jsr 	MInt32Modulus 				; calculate random % modulus
.375b					_URExit:
.375b	20 6b 3c	jsr $3c6b			jsr 	CheckRightParen 			; check right and return
.375e	60		rts				rts
.375f					Unary_Min:
.375f	a9 01		lda #$01			lda 	#1 							; c1 cmp c2 needs to be > e.g. c1 > c2
.3761	d0 02		bne $3765			bne 	UnaryMBody
.3763					Unary_Max:
.3763	a9 ff		lda #$ff			lda 	#$FF 						; c1 cmp c2 needs to be < e.g. c1 < c2
.3765					UnaryMBody:
.3765	48		pha				pha 								; save comparator on stack, shows min or max
.3766	20 41 35	jsr $3541			jsr 	Evaluate 					; get the first thing to check
.3769					_UnaryMLoop:
.3769	b1 28		lda ($28),y			lda 	(codePtr),y 				; found ), indicates end.
.376b	c8		iny				iny
.376c	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.376e	f0 09		beq $3779			beq 	_UnaryMExit
.3770	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; found , indicates more.
.3772	f0 07		beq $377b			beq 	_UnaryMCompare
.3774	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.3776	20 18 15	jsr $1518		jsr	errorHandler
.3779					_UnaryMExit:
.3779	68		pla				pla 								; done so throw comparator and return.
.377a	60		rts				rts
.377b					_UnaryMCompare:
.377b	e8		inx				inx 								; get the 2nd thing to evaluate
.377c	20 41 35	jsr $3541			jsr 	Evaluate
.377f	ca		dex				dex
.3780	20 07 33	jsr $3307			jsr 	PerformComparison 			; this is part of evaluate/compare.asm
.3783	85 32		sta $32				sta 	tempShort 					; save result
.3785	68		pla				pla 								; get what we need
.3786	48		pha				pha
.3787	c5 32		cmp $32				cmp 	tempShort 					; did we get it
.3789	d0 de		bne $3769			bne 	_UnaryMLoop 				; no, try another value.
.378b	20 f8 3b	jsr $3bf8			jsr 	MInt32False 				; promote 2nd to 1st.
.378e	20 dc 3a	jsr $3adc			jsr 	MInt32Add
.3791	4c 69 37	jmp $3769			jmp 	_UnaryMLoop
.3794					Unary_Page:
.3794	20 f8 3b	jsr $3bf8			jsr 	MInt32False 				; zero
.3797	ad c8 0a	lda $0ac8			lda 	basePage 					; copy base page address in.
.379a	95 98		sta $98,x			sta 	esInt0,x
.379c	ad c9 0a	lda $0ac9			lda 	basePage+1
.379f	95 a0		sta $a0,x			sta 	esInt1,x
.37a1	60		rts				rts
.37a2					UnaryReference:
.37a2	a9 0f		lda #$0f			lda 	#15
.37a4	20 d7 33	jsr $33d7			jsr 	EvaluateLevel 				; evaluate term and don't deference.
.37a7	b5 90		lda $90,x			lda 	esType,x 					; check it's a reference.
.37a9	10 05		bpl $37b0			bpl 	UType
.37ab	a9 00		lda #$00			lda 	#0 							; make it an integer
.37ad	95 90		sta $90,x			sta 	esType,x
.37af	60		rts				rts
.37b0					UType:
.37b0	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.37b2	20 18 15	jsr $1518		jsr	errorHandler
.37b5					UnaryHexMarker:
.37b5	4c 32 35	jmp $3532			jmp 	EvaluateIntegerTerm
.37b8					UnaryComplement:
.37b8	20 32 35	jsr $3532			jsr 	EvaluateIntegerTerm
.37bb	20 cc 3b	jsr $3bcc			jsr 	MInt32Not
.37be	60		rts				rts
.37bf					UnaryIntToFloat:
.37bf	20 4a 35	jsr $354a			jsr 	EvaluateNumeric				; some number
.37c2	b5 90		lda $90,x			lda 	esType,x 					; if float already, exit
.37c4	d0 0b		bne $37d1			bne 	_UIFExit
.37c6	8a		txa				txa 								; convert and set type
.37c7	a2 1c		ldx #$1c		ldx	#28
.37c9	20 5c 24	jsr $245c		jsr	floatingpointHandler
.37cc	aa		tax				tax
.37cd	a9 01		lda #$01			lda 	#1
.37cf	95 90		sta $90,x			sta 	esType,x
.37d1					_UIFExit:
.37d1	60		rts				rts
.37d2					UnaryFloatToInt:
.37d2	20 4a 35	jsr $354a			jsr 	EvaluateNumeric 			; the number
.37d5	b5 90		lda $90,x			lda 	esType,x 					; if int already exit
.37d7	f0 0b		beq $37e4			beq 	_UFIExit
.37d9	8a		txa				txa 								; convert to int
.37da	a2 14		ldx #$14		ldx	#20
.37dc	20 5c 24	jsr $245c		jsr	floatingpointHandler
.37df	aa		tax				tax
.37e0	a9 00		lda #$00			lda 	#0 							; set type
.37e2	95 90		sta $90,x			sta 	esType,x
.37e4					_UFIExit:
.37e4	60		rts				rts
.37e5					UnaryAlloc:
.37e5	e8		inx				inx 								; evaluate memory required
.37e6	20 60 35	jsr $3560			jsr 	EvaluateInteger
.37e9	20 6b 3c	jsr $3c6b			jsr 	CheckRightParen
.37ec	ca		dex				dex
.37ed	b5 a9		lda $a9,x			lda 	esInt2+1,x 					; check at least in 64k range.
.37ef	15 b1		ora $b1,x			ora 	esInt3+1,x
.37f1	d0 1d		bne $3810			bne 	_UABadValue
.37f3	20 f8 3b	jsr $3bf8			jsr 	MInt32False					; zero return.
.37f6	a5 36		lda $36				lda 	lowMemory+1 				; copy low memory in
.37f8	95 a0		sta $a0,x			sta 	esInt1,x
.37fa	a5 35		lda $35				lda 	lowMemory
.37fc	95 98		sta $98,x			sta 	esInt0,x
.37fe	18		clc				clc 								; add alloc required.
.37ff	75 99		adc $99,x			adc 	esInt0+1,x
.3801	85 35		sta $35				sta 	lowMemory
.3803	a5 36		lda $36				lda 	lowMemory+1
.3805	75 a1		adc $a1,x			adc 	esInt1+1,x
.3807	85 36		sta $36				sta 	lowMemory+1
.3809	b0 05		bcs $3810			bcs		_UABadValue 				; overflow definitely bad.
.380b	c5 34		cmp $34				cmp 	highMemory+1
.380d	b0 01		bcs $3810			bcs 	_UABadValue 				; out of memory bad.
.380f	60		rts				rts
.3810					_UABadValue:
.3810	a2 22		ldx #$22			ldx 	#ErrorID_Memory
.3812	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary/unary2.asm

.3815					UnaryTimer:
.3815	20 6b 3c	jsr $3c6b			jsr 	CheckRightParen 			; no parameters
.3818	98		tya				tya
.3819	48		pha				pha
.381a	20 1f 3c	jsr $3c1f			jsr 	MInt32Zero 					; zero result
.381d	86 2a		stx $2a				stx 	temp0 						; returning in YA so can't use .pshx
.381f	a2 1c		ldx #$1c		ldx	#28
.3821	20 f6 14	jsr $14f6		jsr	deviceHandler
.3824	a6 2a		ldx $2a				ldx 	temp0						; restore X and update 16 bit result
.3826	95 98		sta $98,x			sta 	esInt0,x
.3828	98		tya				tya
.3829	95 a0		sta $a0,x			sta 	esInt1,x
.382b	68		pla				pla
.382c	a8		tay				tay
.382d	60		rts				rts
.382e					UnaryInkey:
.382e	20 6b 3c	jsr $3c6b			jsr 	CheckRightParen
.3831	86 2a		stx $2a				stx 	temp0
.3833	a2 0a		ldx #$0a		ldx	#10
.3835	20 f6 14	jsr $14f6		jsr	deviceHandler
.3838	a6 2a		ldx $2a				ldx 	temp0
.383a	20 07 3c	jsr $3c07			jsr 	MInt32Set8Bit
.383d	60		rts				rts
.383e					UnaryGet:
.383e	20 6b 3c	jsr $3c6b			jsr 	CheckRightParen
.3841	86 2a		stx $2a				stx 	temp0
.3843					_UGLoop:
.3843	a2 02		ldx #$02		ldx	#2
.3845	20 f6 14	jsr $14f6		jsr	deviceHandler
.3848	a2 0a		ldx #$0a		ldx	#10
.384a	20 f6 14	jsr $14f6		jsr	deviceHandler
.384d	c9 00		cmp #$00			cmp 	#0
.384f	f0 f2		beq $3843			beq 	_UGLoop
.3851	a6 2a		ldx $2a				ldx 	temp0
.3853	20 07 3c	jsr $3c07			jsr 	MInt32Set8Bit
.3856	60		rts				rts
.3857					UnaryGetString:
.3857	20 3e 38	jsr $383e			jsr 	UnaryGet
.385a					UGSDoChr:
.385a	4c ab 38	jmp $38ab			jmp 	ChrCode
.385d					UnaryInkeyString:
.385d	20 2e 38	jsr $382e			jsr 	UnaryInkey
.3860	b5 98		lda $98,x			lda 	esInt0,x
.3862	d0 f6		bne $385a			bne 	UGSDoChr
.3864	8a		txa				txa
.3865	a2 08		ldx #$08		ldx	#8
.3867	20 a3 3f	jsr $3fa3		jsr	stringHandler
.386a	aa		tax				tax
.386b	60		rts				rts
.386c					UnarySys:
.386c	20 60 35	jsr $3560			jsr 	EvaluateInteger 				; get the address
.386f	20 6b 3c	jsr $3c6b			jsr 	CheckRightParen
.3872	20 4e 29	jsr $294e			jsr 	TOSToTemp0 						; copy call address to temp0
.3875	8a		txa				txa
.3876	48		pha				pha
.3877	98		tya				tya
.3878	48		pha				pha
.3879	ad 00 0a	lda $0a00			lda 	("A"-"A")*4+SingleLetterVar 	; load AXY
.387c	ae 5c 0a	ldx $0a5c			ldx 	("X"-"A")*4+SingleLetterVar
.387f	ac 60 0a	ldy $0a60			ldy 	("Y"-"A")*4+SingleLetterVar
.3882	20 91 38	jsr $3891			jsr 	_CallTemp0
.3885	85 32		sta $32				sta 	tempShort 						; restore YX
.3887	68		pla				pla
.3888	a8		tay				tay
.3889	68		pla				pla
.388a	aa		tax				tax
.388b	a5 32		lda $32				lda 	tempShort
.388d	20 07 3c	jsr $3c07			jsr 	MInt32Set8Bit 					; return result.
.3890	60		rts				rts
.3891					_CallTemp0:
.3891	6c 2a 00	jmp ($002a)			jmp 	(temp0)
.3894					UnaryMem:
.3894	20 f8 3b	jsr $3bf8			jsr 	MInt32False 					; set to false (e.g. 0)
.3897	38		sec				sec
.3898	a5 33		lda $33				lda 	highMemory 						; calculate value
.389a	e5 35		sbc $35				sbc 	lowMemory
.389c	95 98		sta $98,x			sta 	esInt0,x
.389e	a5 34		lda $34				lda 	highMemory+1
.38a0	e5 36		sbc $36				sbc 	lowMemory+1
.38a2	95 a0		sta $a0,x			sta 	esInt1,x
.38a4	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary/unarystr.asm

.38a5					ExecChr:
.38a5	20 68 35	jsr $3568			jsr 	EvaluateSmallInteger		; character number 0-255
.38a8	20 6b 3c	jsr $3c6b			jsr 	CheckRightParen				; right bracket
.38ab					ChrCode:
.38ab	98		tya				tya
.38ac	48		pha				pha
.38ad	8a		txa				txa 								; A = stack
.38ae	b4 98		ldy $98,x			ldy 	esInt0,x					; Y = character
.38b0	a2 02		ldx #$02		ldx	#2
.38b2	20 a3 3f	jsr $3fa3		jsr	stringHandler
.38b5	aa		tax				tax 								; X = stack
.38b6	68		pla				pla
.38b7	a8		tay				tay
.38b8	60		rts				rts
.38b9					ExecLower:
.38b9	38		sec				sec 								; set carry is lower
.38ba	b0 01		bcs $38bd			bcs 	ExecUpperLower
.38bc					ExecUpper:
.38bc	18		clc				clc 								; clear carry is upper
.38bd					ExecUpperLower:
.38bd	08		php				php 								; save carry
.38be	20 55 35	jsr $3555			jsr 	EvaluateString 				; string to stack,X
.38c1	20 6b 3c	jsr $3c6b			jsr 	CheckRightParen 			; check closing right bracket.
.38c4	28		plp				plp 								; restore carry, save Y
.38c5	98		tya				tya
.38c6	48		pha				pha
.38c7	a9 00		lda #$00			lda 	#0 							; A zero if upper, 1 if lower.
.38c9	2a		rol a				rol 	a
.38ca	a8		tay				tay 								; now in Y
.38cb	8a		txa				txa 								; do the substring and exit.
.38cc	a2 0c		ldx #$0c		ldx	#12
.38ce	20 a3 3f	jsr $3fa3		jsr	stringHandler
.38d1	aa		tax				tax
.38d2	68		pla				pla
.38d3	a8		tay				tay
.38d4	60		rts				rts
.38d5					ExecLeft:
.38d5	20 55 35	jsr $3555			jsr 	EvaluateString 				; string to stack,X
.38d8	20 78 3c	jsr $3c78			jsr 	CheckComma
.38db	e8		inx				inx
.38dc	a9 01		lda #$01			lda 	#1 							; 1 for 2nd parameter.
.38de	20 07 3c	jsr $3c07			jsr 	MInt32Set8Bit
.38e1	e8		inx				inx
.38e2	20 68 35	jsr $3568			jsr 	EvaluateSmallInteger 		; smallint 3rd parameter
.38e5					ExecSubstring:
.38e5	ca		dex				dex 								; fix up X
.38e6	ca		dex				dex
.38e7	20 6b 3c	jsr $3c6b			jsr 	CheckRightParen 			; check closing right bracket.
.38ea	8a		txa				txa 								; do the substring and exit.
.38eb	a2 0e		ldx #$0e		ldx	#14
.38ed	20 a3 3f	jsr $3fa3		jsr	stringHandler
.38f0	aa		tax				tax
.38f1	60		rts				rts
.38f2					ExecMid:
.38f2	20 55 35	jsr $3555			jsr 	EvaluateString 				; string to stack,X
.38f5	20 78 3c	jsr $3c78			jsr 	CheckComma
.38f8	e8		inx				inx
.38f9	20 68 35	jsr $3568			jsr 	EvaluateSmallInteger 		; smallint 2nd parameter
.38fc	c9 00		cmp #$00			cmp 	#0
.38fe	f0 15		beq $3915			beq 	_EMValue
.3900	e8		inx				inx
.3901	a9 ff		lda #$ff			lda 	#255 						; 255 default for 3nd parameter - this is optional.
.3903	20 07 3c	jsr $3c07			jsr 	MInt32Set8Bit
.3906	b1 28		lda ($28),y			lda 	(codePtr),y 				; is there a ) next
.3908	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN 				; if so, just MID$(a$,2)
.390a	f0 d9		beq $38e5			beq 	ExecSubString
.390c	20 78 3c	jsr $3c78			jsr 	CheckComma
.390f	20 68 35	jsr $3568			jsr 	EvaluateSmallInteger 		; smallint 2nd parameter
.3912	4c e5 38	jmp $38e5			jmp 	ExecSubString
.3915					_EMValue:
.3915	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.3917	20 18 15	jsr $1518		jsr	errorHandler
.391a					ExecRight:
.391a	20 55 35	jsr $3555			jsr 	EvaluateString 				; string to stack,X
.391d	20 78 3c	jsr $3c78			jsr 	CheckComma
.3920	e8		inx				inx
.3921	20 68 35	jsr $3568			jsr 	EvaluateSmallInteger 		; smallint 2nd parameter.
.3924	ca		dex				dex
.3925	98		tya				tya
.3926	48		pha				pha
.3927	b5 98		lda $98,x			lda 	esInt0,x 					; copy address of string to temp0
.3929	85 2a		sta $2a				sta 	temp0
.392b	b5 a0		lda $a0,x			lda 	esInt1,x
.392d	85 2b		sta $2b				sta 	temp0+1
.392f	a0 00		ldy #$00			ldy 	#0 							; point to length
.3931	b1 2a		lda ($2a),y			lda 	(temp0),y 					; get the length.
.3933	18		clc				clc 								; add 1.
.3934	69 01		adc #$01			adc 	#1
.3936	38		sec				sec
.3937	f5 99		sbc $99,x			sbc 	esInt0+1,x  				; subtract right count.
.3939	f0 02		beq $393d			beq		_ERMake1 					; if zero, make it 1.
.393b	b0 02		bcs $393f			bcs		_EROkay
.393d					_ERMake1:
.393d	a9 01		lda #$01			lda 	#1 							; start position.
.393f					_EROkay:
.393f	e8		inx				inx 								; set start pos.
.3940	95 98		sta $98,x			sta 	esInt0,x
.3942	e8		inx				inx
.3943	a9 ff		lda #$ff			lda 	#255 						; 255 default for 3nd parameter.
.3945	20 07 3c	jsr $3c07			jsr 	MInt32Set8Bit
.3948	68		pla				pla
.3949	a8		tay				tay
.394a	4c e5 38	jmp $38e5			jmp 	ExecSubString 				; do the substring code.

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32binary.asm

.394d					MInt32And:
.394d	b5 98		lda $98,x			lda 	esInt0,x
.394f	35 99		and $99,x			and 	esInt0+1,x
.3951	95 98		sta $98,x			sta 	esInt0,x
.3953	b5 a0		lda $a0,x			lda 	esInt1,x
.3955	35 a1		and $a1,x			and 	esInt1+1,x
.3957	95 a0		sta $a0,x			sta 	esInt1,x
.3959	b5 a8		lda $a8,x			lda 	esInt2,x
.395b	35 a9		and $a9,x			and 	esInt2+1,x
.395d	95 a8		sta $a8,x			sta 	esInt2,x
.395f	b5 b0		lda $b0,x			lda 	esInt3,x
.3961	35 b1		and $b1,x			and 	esInt3+1,x
.3963	95 b0		sta $b0,x			sta 	esInt3,x
.3965	60		rts				rts
.3966					MInt32Or:
.3966	b5 98		lda $98,x			lda 	esInt0,x
.3968	15 99		ora $99,x			ora 	esInt0+1,x
.396a	95 98		sta $98,x			sta 	esInt0,x
.396c	b5 a0		lda $a0,x			lda 	esInt1,x
.396e	15 a1		ora $a1,x			ora 	esInt1+1,x
.3970	95 a0		sta $a0,x			sta 	esInt1,x
.3972	b5 a8		lda $a8,x			lda 	esInt2,x
.3974	15 a9		ora $a9,x			ora 	esInt2+1,x
.3976	95 a8		sta $a8,x			sta 	esInt2,x
.3978	b5 b0		lda $b0,x			lda 	esInt3,x
.397a	15 b1		ora $b1,x			ora 	esInt3+1,x
.397c	95 b0		sta $b0,x			sta 	esInt3,x
.397e	60		rts				rts
.397f					MInt32Xor:
.397f	b5 98		lda $98,x			lda 	esInt0,x
.3981	55 99		eor $99,x			eor 	esInt0+1,x
.3983	95 98		sta $98,x			sta 	esInt0,x
.3985	b5 a0		lda $a0,x			lda 	esInt1,x
.3987	55 a1		eor $a1,x			eor 	esInt1+1,x
.3989	95 a0		sta $a0,x			sta 	esInt1,x
.398b	b5 a8		lda $a8,x			lda 	esInt2,x
.398d	55 a9		eor $a9,x			eor 	esInt2+1,x
.398f	95 a8		sta $a8,x			sta 	esInt2,x
.3991	b5 b0		lda $b0,x			lda 	esInt3,x
.3993	55 b1		eor $b1,x			eor 	esInt3+1,x
.3995	95 b0		sta $b0,x			sta 	esInt3,x
.3997	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32compare.asm

.3998					MInt32Compare:
.3998	b5 98		lda $98,x			lda 	esInt0,x 					; equality check first.
.399a	d5 99		cmp $99,x			cmp 	esInt0+1,x
.399c	d0 13		bne $39b1			bne 	MInt32Compare2
.399e	b5 a0		lda $a0,x			lda 	esInt1,x
.39a0	d5 a1		cmp $a1,x			cmp 	esInt1+1,x
.39a2	d0 0d		bne $39b1			bne 	MInt32Compare2
.39a4	b5 a8		lda $a8,x			lda 	esInt2,x
.39a6	d5 a9		cmp $a9,x			cmp 	esInt2+1,x
.39a8	d0 07		bne $39b1			bne 	MInt32Compare2
.39aa	b5 b0		lda $b0,x			lda 	esInt3,x
.39ac	55 b1		eor $b1,x			eor 	esInt3+1,x 					; EOR will return 0 if the same.
.39ae	d0 01		bne $39b1			bne 	MInt32Compare2
.39b0	60		rts				rts
.39b1					MInt32Compare2:
.39b1	b5 98		lda $98,x			lda		esInt0,x 					; unsigned 32 bit comparison.
.39b3	d5 99		cmp $99,x			cmp 	esInt0+1,x
.39b5	b5 a0		lda $a0,x			lda		esInt1,x
.39b7	f5 a1		sbc $a1,x			sbc 	esInt1+1,x
.39b9	b5 a8		lda $a8,x			lda		esInt2,x
.39bb	f5 a9		sbc $a9,x			sbc 	esInt2+1,x
.39bd	b5 b0		lda $b0,x			lda		esInt3,x
.39bf	f5 b1		sbc $b1,x			sbc 	esInt3+1,x
.39c1	50 02		bvc $39c5			bvc 	_I32LNoOverflow 			; make it signed 32 bit comparison
.39c3	49 80		eor #$80			eor 	#$80
.39c5					_I32LNoOverflow
.39c5	30 03		bmi $39ca			bmi 	MInt32CLess					; if -ve then return $FF
.39c7	a9 01		lda #$01			lda 	#$01						; else return $01
.39c9	60		rts				rts
.39ca					MInt32CLess:
.39ca	a9 ff		lda #$ff			lda 	#$FF
.39cc	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32divide.asm

.39cd					MInt32SDivide:
.39cd	98		tya				tya  								; save Y, which is the count of negations
.39ce	48		pha				pha
.39cf	a0 00		ldy #$00			ldy 	#0 							; zero count
.39d1	20 e9 39	jsr $39e9			jsr 	_MInt32SRemSign 			; unsign TOS
.39d4	e8		inx				inx 								; unsign TOS+1
.39d5	20 e9 39	jsr $39e9			jsr 	_MInt32SRemSign
.39d8	ca		dex				dex
.39d9	98		tya				tya 								; save sign count on stack
.39da	48		pha				pha
.39db	20 f2 39	jsr $39f2			jsr 	MInt32UDivide 				; unsigned division
.39de	68		pla				pla 								; get sign count back
.39df	29 01		and #$01			and 	#1 							; if it is odd, then negate result
.39e1	f0 03		beq $39e6			beq 	_I32SNoNeg
.39e3	20 b2 3b	jsr $3bb2			jsr 	MInt32Negate
.39e6					_I32SNoNeg:
.39e6	68		pla				pla 								; restoe Y and exit
.39e7	a8		tay				tay
.39e8	60		rts				rts
.39e9					_MInt32SRemSign:
.39e9	b5 b0		lda $b0,x			lda 	esInt3,x 					; is it -ve
.39eb	10 04		bpl $39f1			bpl 	_MInt32SRSExit
.39ed	c8		iny				iny 								; increment the sign count
.39ee	20 b2 3b	jsr $3bb2			jsr 	MInt32Negate 				; negate the value.
.39f1					_MInt32SRSExit:
.39f1	60		rts				rts
.39f2					MInt32UDivide:
.39f2	b5 99		lda $99,x			lda 	esInt0+1,x 					; check for division by zero
.39f4	15 a1		ora $a1,x			ora 	esInt1+1,x
.39f6	15 a2		ora $a2,x			ora 	esInt1+2,x
.39f8	15 a3		ora $a3,x			ora 	esInt1+3,x
.39fa	f0 4a		beq $3a46			beq 	_MInt32DZero
.39fc	e8		inx				inx 								; clear A
.39fd	e8		inx				inx
.39fe	20 f8 3b	jsr $3bf8			jsr 	MInt32False
.3a01	ca		dex				dex
.3a02	ca		dex				dex
.3a03	98		tya				tya 								; save Y on the stack
.3a04	48		pha				pha
.3a05	a0 20		ldy #$20			ldy 	#32 						; number of division passes
.3a07					_MInt32UDLoop:
.3a07	16 98		asl $98,x			asl 	esInt0,x					; shift QA left. First Q
.3a09	36 a0		rol $a0,x			rol 	esInt1,x
.3a0b	36 a8		rol $a8,x			rol 	esInt2,x
.3a0d	36 b0		rol $b0,x			rol 	esInt3,x
.3a0f	36 9a		rol $9a,x			rol 	esInt0+2,x 					; then A.
.3a11	36 a2		rol $a2,x			rol 	esInt1+2,x
.3a13	36 aa		rol $aa,x			rol 	esInt2+2,x
.3a15	36 b2		rol $b2,x			rol 	esInt3+2,x
.3a17	38		sec				sec 								; calculate A-M saving result on the stack
.3a18	b5 9a		lda $9a,x			lda 	esInt0+2,x
.3a1a	f5 99		sbc $99,x			sbc 	esInt0+1,x
.3a1c	48		pha				pha
.3a1d	b5 a2		lda $a2,x			lda 	esInt1+2,x
.3a1f	f5 a1		sbc $a1,x			sbc 	esInt1+1,x
.3a21	48		pha				pha
.3a22	b5 aa		lda $aa,x			lda 	esInt2+2,x
.3a24	f5 a9		sbc $a9,x			sbc 	esInt2+1,x
.3a26	48		pha				pha
.3a27	b5 b2		lda $b2,x			lda 	esInt3+2,x
.3a29	f5 b1		sbc $b1,x			sbc 	esInt3+1,x
.3a2b	90 10		bcc $3a3d			bcc		_MInt32NoSubtract 			; if A < M (e.g. carry clear) then reject this.
.3a2d	95 b2		sta $b2,x			sta 	esInt3+2,x 					; write result back to A
.3a2f	68		pla				pla
.3a30	95 aa		sta $aa,x			sta 	esInt2+2,x
.3a32	68		pla				pla
.3a33	95 a2		sta $a2,x			sta 	esInt1+2,x
.3a35	68		pla				pla
.3a36	95 9a		sta $9a,x			sta 	esInt0+2,x
.3a38	f6 98		inc $98,x			inc 	esInt0,x 					; sets bit 0 of Q - it was shifted left previously.
.3a3a	4c 40 3a	jmp $3a40			jmp 	_MInt32Next 					; do the next iteration
.3a3d					_MInt32NoSubtract:
.3a3d	68		pla				pla
.3a3e	68		pla				pla
.3a3f	68		pla				pla
.3a40					_MInt32Next:
.3a40	88		dey				dey 								; do this 32 times.
.3a41	d0 c4		bne $3a07			bne 	_MInt32UDLoop
.3a43	68		pla				pla 								; restore Y and exit
.3a44	a8		tay				tay
.3a45	60		rts				rts
.3a46					_MInt32DZero:
.3a46	a2 05		ldx #$05			ldx 	#ErrorID_DivZero
.3a48	20 18 15	jsr $1518		jsr	errorHandler
.3a4b					MInt32Modulus:
.3a4b	20 f2 39	jsr $39f2			jsr 	MInt32UDivide 				; do the division.
.3a4e	b5 b2		lda $b2,x			lda 	esInt3+2,x 					; copy 2nd on stack (the remainder) to the top.
.3a50	95 b0		sta $b0,x			sta 	esInt3,x
.3a52	b5 aa		lda $aa,x			lda 	esInt2+2,x
.3a54	95 a8		sta $a8,x			sta 	esInt2,x
.3a56	b5 a2		lda $a2,x			lda 	esInt1+2,x
.3a58	95 a0		sta $a0,x			sta 	esInt1,x
.3a5a	b5 9a		lda $9a,x			lda 	esInt0+2,x
.3a5c	95 98		sta $98,x			sta 	esInt0,x
.3a5e	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32fromstr.asm

.0d0b					fs32Length:
>0d0b							.fill 	1
.3a5f					LinkInt32FromString:
.3a5f	aa		tax				tax
.3a60	98		tya				tya
.3a61	20 66 3a	jsr $3a66			jsr 	MInt32FromString
.3a64	8a		txa				txa
.3a65	60		rts				rts
.3a66					MInt32FromString:
.3a66	85 32		sta $32				sta 	tempShort 					; save base
.3a68	98		tya				tya
.3a69	48		pha				pha
.3a6a	a0 00		ldy #$00			ldy 	#0 							; get length of string to convert
.3a6c	b1 2a		lda ($2a),y			lda 	(temp0),y
.3a6e	8d 0b 0d	sta $0d0b			sta 	fs32Length
.3a71	f0 65		beq $3ad8			beq 	_I32FSFail2					; fail if length zero.
.3a73	a0 01		ldy #$01			ldy 	#1 							; set index into string being read
.3a75	b1 2a		lda ($2a),y			lda 	(temp0),y 					; look at first character
.3a77	c9 2d		cmp #$2d			cmp 	#"-"						; is it a - character
.3a79	d0 09		bne $3a84			bne 	_I32FSNotNegative
.3a7b	ad 0b 0d	lda $0d0b			lda 	fs32Length 					; get length back.
.3a7e	c9 01		cmp #$01			cmp 	#1 							; if 1 it is just a - on its own so fail.
.3a80	f0 56		beq $3ad8			beq 	_I32FSFail2
.3a82	a0 02		ldy #$02			ldy 	#2 							; first digit of the number.
.3a84					_I32FSNotNegative:
.3a84	a5 32		lda $32				lda 	tempShort 					; get the base back.
.3a86	c0 02		cpy #$02			cpy 	#2 							; if we read a -ve (e.g. Y == 2)
.3a88	d0 02		bne $3a8c			bne 	_I32FSNN2
.3a8a	09 80		ora #$80			ora 	#$80						; set bit 7, this indicates a negated result.
.3a8c					_I32FSNN2:
.3a8c	48		pha				pha 								; save base + final sign on stack.
.3a8d	20 f8 3b	jsr $3bf8			jsr 	MInt32False 				; zero the return value.
.3a90					_I32FSMainLoop:
.3a90	68		pla				pla 								; get the base back into tempShort
.3a91	48		pha				pha
.3a92	29 7f		and #$7f			and 	#$7F
.3a94	85 32		sta $32				sta 	tempShort
.3a96	b1 2a		lda ($2a),y			lda 	(temp0),y 					; look at next character.
.3a98	c9 61		cmp #$61			cmp 	#"a" 						; fix up case.
.3a9a	90 02		bcc $3a9e			bcc 	_I32FSNotLC
.3a9c	e9 20		sbc #$20			sbc 	#32
.3a9e					_I32FSNotLC:
.3a9e	38		sec				sec 								; subtract 48 (ASCII "0") - ASCII to Hex conversion
.3a9f	e9 30		sbc #$30			sbc 	#"0"
.3aa1	90 34		bcc $3ad7			bcc 	_I32FSFail 					; nothing more to do.
.3aa3	c9 0a		cmp #$0a			cmp 	#9+1 						; if it is 0-9 validate vs base.
.3aa5	90 06		bcc $3aad			bcc 	_I32FSValidate
.3aa7	c9 11		cmp #$11			cmp 	#17 						; is it between 58 and 64 ? if so bad.
.3aa9	90 2c		bcc $3ad7			bcc 	_I32FSFail
.3aab	e9 07		sbc #$07			sbc 	#7 							; adjust into range so now character is 0->nnn
.3aad					_I32FSValidate:
.3aad	c5 32		cmp $32				cmp 	tempShort 					; compare against the base.
.3aaf	b0 26		bcs $3ad7			bcs 	_I32FSFail 					; sorry, too large for this base, so fail.
.3ab1	48		pha				pha 								; save the new digit value.
.3ab2	e8		inx				inx 								; put base into next slot up on stack
.3ab3	a5 32		lda $32				lda 	tempShort
.3ab5	20 07 3c	jsr $3c07			jsr 	MInt32Set8Bit
.3ab8	ca		dex				dex
.3ab9	20 10 3b	jsr $3b10			jsr 	MInt32Multiply 				; multiply current by the base
.3abc	e8		inx				inx
.3abd	68		pla				pla  								; put additive into next slot
.3abe	20 07 3c	jsr $3c07			jsr 	MInt32Set8Bit
.3ac1	ca		dex				dex
.3ac2	20 dc 3a	jsr $3adc			jsr 	MInt32Add 					; and add it
.3ac5	c8		iny				iny 								; bump the character pointer
.3ac6	cc 0b 0d	cpy $0d0b			cpy 	fs32Length 					; until > length.
.3ac9	f0 c5		beq $3a90			beq 	_I32FSMainLoop
.3acb	90 c3		bcc $3a90			bcc 	_I32FSMainLoop
.3acd					_I32FSDone:
.3acd	68		pla				pla 								; get base/final sign back
.3ace	10 03		bpl $3ad3			bpl 	_I32FSNN3
.3ad0	20 b2 3b	jsr $3bb2			jsr 	MInt32Negate 				; negate the result.
.3ad3					_I32FSNN3:
.3ad3	68		pla				pla
.3ad4	a8		tay				tay
.3ad5	38		sec				sec
.3ad6	60		rts				rts
.3ad7					_I32FSFail:
.3ad7	68		pla				pla
.3ad8					_I32FSFail2:
.3ad8	68		pla				pla
.3ad9	a8		tay				tay
.3ada	18		clc				clc
.3adb	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32math.asm

.3adc					MInt32Add:
.3adc	18		clc				clc
.3add	b5 98		lda $98,x			lda 	esInt0,x
.3adf	75 99		adc $99,x			adc 	esInt0+1,x
.3ae1	95 98		sta $98,x			sta 	esInt0,x
.3ae3	b5 a0		lda $a0,x			lda 	esInt1,x
.3ae5	75 a1		adc $a1,x			adc 	esInt1+1,x
.3ae7	95 a0		sta $a0,x			sta 	esInt1,x
.3ae9	b5 a8		lda $a8,x			lda 	esInt2,x
.3aeb	75 a9		adc $a9,x			adc 	esInt2+1,x
.3aed	95 a8		sta $a8,x			sta 	esInt2,x
.3aef	b5 b0		lda $b0,x			lda 	esInt3,x
.3af1	75 b1		adc $b1,x			adc 	esInt3+1,x
.3af3	95 b0		sta $b0,x			sta 	esInt3,x
.3af5	60		rts				rts
.3af6					MInt32Sub:
.3af6	38		sec				sec
.3af7	b5 98		lda $98,x			lda 	esInt0,x
.3af9	f5 99		sbc $99,x			sbc 	esInt0+1,x
.3afb	95 98		sta $98,x			sta 	esInt0,x
.3afd	b5 a0		lda $a0,x			lda 	esInt1,x
.3aff	f5 a1		sbc $a1,x			sbc 	esInt1+1,x
.3b01	95 a0		sta $a0,x			sta 	esInt1,x
.3b03	b5 a8		lda $a8,x			lda 	esInt2,x
.3b05	f5 a9		sbc $a9,x			sbc 	esInt2+1,x
.3b07	95 a8		sta $a8,x			sta 	esInt2,x
.3b09	b5 b0		lda $b0,x			lda 	esInt3,x
.3b0b	f5 b1		sbc $b1,x			sbc 	esInt3+1,x
.3b0d	95 b0		sta $b0,x			sta 	esInt3,x
.3b0f	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32multiply.asm

.3b10					MInt32Multiply:
.3b10	e8		inx				inx 								; copy 2nd -> 3rd
.3b11	20 36 3b	jsr $3b36			jsr 	MInt32CopyUp
.3b14	ca		dex				dex
.3b15	20 36 3b	jsr $3b36			jsr 	MInt32CopyUp 				; copy 1st -> 2nd
.3b18	20 f8 3b	jsr $3bf8			jsr 	MInt32False 				; zero 1st.
.3b1b					_I32Loop:
.3b1b	b5 9a		lda $9a,x			lda 	esInt0+2,x 					; get low bit of 3rd
.3b1d	29 01		and #$01			and 	#1
.3b1f	f0 03		beq $3b24			beq 	_I32NoAdd 					; if set
.3b21	20 dc 3a	jsr $3adc			jsr 	MInt32Add 					; add 2nd to 1st.
.3b24					_I32NoAdd:
.3b24	e8		inx				inx 								; shift 2nd left
.3b25	20 0d 3c	jsr $3c0d			jsr 	MInt32ShiftLeft
.3b28	e8		inx				inx  								; shift 3rd right
.3b29	20 16 3c	jsr $3c16			jsr 	MInt32ShiftRight
.3b2c	20 1f 3c	jsr $3c1f			jsr 	MInt32Zero 					; check if zero.
.3b2f	08		php				php 								; save status bits
.3b30	ca		dex				dex 	 							; point back to 1st
.3b31	ca		dex				dex
.3b32	28		plp				plp 								; get status bits
.3b33	d0 e6		bne $3b1b			bne 	_I32Loop 					; if non-zero keep going.
.3b35	60		rts				rts
.3b36					MInt32CopyUp:
.3b36	b5 98		lda $98,x			lda 	esInt0,x
.3b38	95 99		sta $99,x			sta 	esInt0+1,x
.3b3a	b5 a0		lda $a0,x			lda 	esInt1,x
.3b3c	95 a1		sta $a1,x			sta 	esInt1+1,x
.3b3e	b5 a8		lda $a8,x			lda 	esInt2,x
.3b40	95 a9		sta $a9,x			sta 	esInt2+1,x
.3b42	b5 b0		lda $b0,x			lda 	esInt3,x
.3b44	95 b1		sta $b1,x			sta 	esInt3+1,x
.3b46	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32tostr.asm

>0d0c					MCharCount:	.fill 	1						; count of converted characters
.3b47					MLInt32ToString:
.3b47	aa		tax				tax									; module passes stack in A, base in Y
.3b48	98		tya				tya
.3b49	20 4e 3b	jsr $3b4e			jsr 	MInt32ToString
.3b4c	8a		txa				txa
.3b4d	60		rts				rts
.3b4e					MInt32ToString:
.3b4e	48		pha				pha 								; save base
.3b4f	85 32		sta $32				sta 	tempShort 					; save target base.
.3b51	a9 00		lda #$00			lda 	#0
.3b53	8d 0c 0d	sta $0d0c			sta 	MCharCount 					; clear character count to 0
.3b56	98		tya				tya
.3b57	48		pha				pha
.3b58	a5 32		lda $32				lda 	tempShort 					; check if we are signed conversion
.3b5a	10 10		bpl $3b6c			bpl 	_I32TSUnsigned
.3b5c	48		pha				pha 								; save base on stack.
.3b5d	b5 b0		lda $b0,x			lda 	esInt3,x 					; is it actually negative
.3b5f	10 08		bpl $3b69			bpl 	_I32TSNoFlip
.3b61	a9 2d		lda #$2d			lda 	#"-" 						; write a '-' prefix out.
.3b63	20 9f 3b	jsr $3b9f			jsr 	MI32WriteCharacter
.3b66	20 b2 3b	jsr $3bb2			jsr 	MInt32Negate 				; negate the value, so now it's positive.
.3b69					_I32TSNoFlip:
.3b69	68		pla				pla 								; get the base back
.3b6a	29 7f		and #$7f			and 	#$7F 						; clear the sign flag so it's just a base now.
.3b6c					_I32TSUnsigned:
.3b6c	20 7a 3b	jsr $3b7a			jsr 	MI32DivideWrite 			; recursive code to output string.
.3b6f	a0 00		ldy #$00			ldy 	#0 							; write charcount to first character.
.3b71	ad 0c 0d	lda $0d0c			lda 	MCharCount
.3b74	91 2a		sta ($2a),y			sta 	(temp0),y
.3b76	68		pla				pla
.3b77	a8		tay				tay
.3b78	68		pla				pla
.3b79	60		rts				rts
.3b7a					MI32DivideWrite:
.3b7a	48		pha				pha 								; save the divisor/base
.3b7b	e8		inx				inx 								; write in the dividing position.
.3b7c	20 07 3c	jsr $3c07			jsr 	MInt32Set8Bit
.3b7f	ca		dex				dex
.3b80	20 f2 39	jsr $39f2			jsr 	MInt32UDivide 				; divide number by base.
.3b83	68		pla				pla 								; get the base into Y
.3b84	a8		tay				tay
.3b85	b5 9a		lda $9a,x			lda 	esInt0+2,x 					; get the remainder and push on the stack.
.3b87	48		pha				pha
.3b88	20 1f 3c	jsr $3c1f			jsr 	MInt32Zero 					; is the result zero ?
.3b8b	f0 04		beq $3b91			beq 	_I32NoRecurse 				; if so, don't recurse.
.3b8d	98		tya				tya 								; put base into A
.3b8e	20 7a 3b	jsr $3b7a			jsr 	MI32DivideWrite 				; and jsr the dividor recursively.
.3b91					_I32NoRecurse:
.3b91	68		pla				pla 								; get the remainder back
.3b92	c9 0a		cmp #$0a			cmp 	#10  						; handle hexadecimals, now converting to ASCII
.3b94	90 02		bcc $3b98			bcc 	_I32NotHex
.3b96	69 06		adc #$06			adc 	#7-1
.3b98					_I32NotHex:
.3b98	18		clc				clc 								; make it ASCII
.3b99	69 30		adc #$30			adc 	#48
.3b9b	20 9f 3b	jsr $3b9f			jsr 	MI32WriteCharacter 			; write the character out
.3b9e	60		rts				rts 								; and exit.
.3b9f					MI32WriteCharacter:
.3b9f	ee 0c 0d	inc $0d0c			inc 	MCharCount 					; bump count (space for leading count)
.3ba2	ac 0c 0d	ldy $0d0c			ldy 	MCharCount 					; get position
.3ba5	91 2a		sta ($2a),y			sta 	(temp0),y 					; write out with trailing 0
.3ba7	c8		iny				iny
.3ba8	a9 00		lda #$00			lda 	#0
.3baa	91 2a		sta ($2a),y			sta 	(temp0),y
.3bac	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32unary.asm

>0d0d					MSeed32:	.fill 	4							; random number seed.
.3bad					MInt32Absolute:
.3bad	b5 b0		lda $b0,x			lda 	esInt3,x 					; use negate code if -ve.
.3baf	30 01		bmi $3bb2			bmi 	MInt32Negate
.3bb1	60		rts				rts
.3bb2					MInt32Negate:
.3bb2	38		sec				sec 								; subtract from zero.
.3bb3	a9 00		lda #$00			lda 	#0
.3bb5	f5 98		sbc $98,x			sbc 	esInt0,x
.3bb7	95 98		sta $98,x			sta 	esInt0,x
.3bb9	a9 00		lda #$00			lda 	#0
.3bbb	f5 a0		sbc $a0,x			sbc 	esInt1,x
.3bbd	95 a0		sta $a0,x			sta 	esInt1,x
.3bbf	a9 00		lda #$00			lda 	#0
.3bc1	f5 a8		sbc $a8,x			sbc 	esInt2,x
.3bc3	95 a8		sta $a8,x			sta 	esInt2,x
.3bc5	a9 00		lda #$00			lda 	#0
.3bc7	f5 b0		sbc $b0,x			sbc 	esInt3,x
.3bc9	95 b0		sta $b0,x			sta 	esInt3,x
.3bcb	60		rts				rts
.3bcc					MInt32Not:
.3bcc	b5 98		lda $98,x			lda 	esInt0,x 					; one's complement all four.
.3bce	49 ff		eor #$ff			eor 	#$FF
.3bd0	95 98		sta $98,x			sta 	esInt0,x
.3bd2	b5 a0		lda $a0,x			lda 	esInt1,x
.3bd4	49 ff		eor #$ff			eor 	#$FF
.3bd6	95 a0		sta $a0,x			sta 	esInt1,x
.3bd8	b5 a8		lda $a8,x			lda 	esInt2,x
.3bda	49 ff		eor #$ff			eor 	#$FF
.3bdc	95 a8		sta $a8,x			sta 	esInt2,x
.3bde	b5 b0		lda $b0,x			lda 	esInt3,x
.3be0	49 ff		eor #$ff			eor 	#$FF
.3be2	95 b0		sta $b0,x			sta 	esInt3,x
.3be4	60		rts				rts
.3be5					MInt32Sign:
.3be5	b5 b0		lda $b0,x			lda 	esInt3,x					; look at MSB
.3be7	30 0b		bmi $3bf4			bmi 	MInt32True 					; if set return -1 (true)
.3be9	20 1f 3c	jsr $3c1f			jsr 	MInt32Zero 					; is it zero ?
.3bec	f0 0a		beq $3bf8			beq 	MInt32False 				; if zero return 0 (false)
.3bee	20 f8 3b	jsr $3bf8			jsr 	MInt32False 				; > 0 return 1, by setting it to zero
.3bf1	f6 98		inc $98,x			inc 	esInt0,x  					; and bumping the LSB.
.3bf3	60		rts				rts
.3bf4					MInt32True:
.3bf4	a9 ff		lda #$ff			lda 	#$FF 						; set to $FFFFFFFF
.3bf6	d0 02		bne $3bfa			bne 	MInt32WriteAll
.3bf8					MInt32False:
.3bf8	a9 00		lda #$00			lda 	#0
.3bfa					MInt32WriteAll:
.3bfa	95 98		sta $98,x			sta 	esInt0,x
.3bfc					MInt32Write123:
.3bfc	95 a0		sta $a0,x			sta 	esInt1,x
.3bfe	95 a8		sta $a8,x			sta 	esInt2,x
.3c00	95 b0		sta $b0,x			sta 	esInt3,x
.3c02	a9 00		lda #$00			lda 	#$00						; and make it an integer
.3c04	95 90		sta $90,x			sta 	esType,x
.3c06	60		rts				rts
.3c07					MInt32Set8Bit:
.3c07	95 98		sta $98,x			sta 	esInt0,x 					; coopt above function to write
.3c09	a9 00		lda #$00			lda 	#0 							; a value 0-255
.3c0b	f0 ef		beq $3bfc			beq		MInt32Write123
.3c0d					MInt32ShiftLeft:
.3c0d	16 98		asl $98,x			asl 	esInt0,x
.3c0f	36 a0		rol $a0,x			rol	 	esInt1,x
.3c11	36 a8		rol $a8,x			rol	 	esInt2,x
.3c13	36 b0		rol $b0,x			rol	 	esInt3,x
.3c15	60		rts				rts
.3c16					MInt32ShiftRight:
.3c16	56 b0		lsr $b0,x			lsr 	esInt3,x
.3c18	76 a8		ror $a8,x			ror 	esInt2,x
.3c1a	76 a0		ror $a0,x			ror 	esInt1,x
.3c1c	76 98		ror $98,x			ror 	esInt0,x
.3c1e	60		rts				rts
.3c1f					MInt32Zero:
.3c1f	b5 98		lda $98,x			lda 	esInt0,x
.3c21	15 a0		ora $a0,x			ora 	esInt1,x
.3c23	15 a8		ora $a8,x			ora 	esInt2,x
.3c25	15 b0		ora $b0,x			ora 	esInt3,x
.3c27	60		rts				rts
.3c28					MInt32Random:
.3c28	98		tya				tya
.3c29	48		pha				pha
.3c2a	a0 07		ldy #$07			ldy 	#7 							; do it 7 times
.3c2c	ad 0d 0d	lda $0d0d			lda 	MSeed32+0 					; check the seed isn't zero
.3c2f	d0 03		bne $3c34			bne 	_Random1
.3c31	a8		tay				tay 								; if so do it 256 times
.3c32	a9 aa		lda #$aa			lda		#$AA 						; and use this to seed the seed....
.3c34					_Random1:
.3c34	0a		asl a				asl 	a
.3c35	2e 0e 0d	rol $0d0e			rol 	MSeed32+1
.3c38	2e 0f 0d	rol $0d0f			rol 	MSeed32+2
.3c3b	2e 10 0d	rol $0d10			rol 	MSeed32+3
.3c3e	90 02		bcc $3c42			bcc 	_Random2
.3c40	49 c5		eor #$c5			eor 	#$C5
.3c42					_Random2:
.3c42	88		dey				dey
.3c43	d0 ef		bne $3c34			bne 	_Random1
.3c45	8d 0d 0d	sta $0d0d			sta 	MSeed32+0 					; copy the seed in.
.3c48	95 98		sta $98,x			sta 	esInt0,x
.3c4a	ad 0e 0d	lda $0d0e			lda 	MSeed32+1
.3c4d	95 a0		sta $a0,x			sta 	esInt1,x
.3c4f	ad 0f 0d	lda $0d0f			lda 	MSeed32+2
.3c52	95 a8		sta $a8,x			sta 	esInt2,x
.3c54	ad 10 0d	lda $0d10			lda 	MSeed32+3
.3c57	95 b0		sta $b0,x			sta 	esInt3,x
.3c59	68		pla				pla
.3c5a	a8		tay				tay
.3c5b	a9 00		lda #$00			lda 	#0
.3c5d	95 90		sta $90,x			sta 	esType,x
.3c5f	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/utility/check.asm

.3c60					CheckToken:
.3c60	d1 28		cmp ($28),y			cmp 	(codePtr),y
.3c62	d0 02		bne $3c66			bne 	_CTError
.3c64	c8		iny				iny
.3c65	60		rts				rts
.3c66					_CTError:
.3c66	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.3c68	20 18 15	jsr $1518		jsr	errorHandler
.3c6b					CheckRightParen:
.3c6b	b1 28		lda ($28),y			lda 	(codePtr),y
.3c6d	c8		iny				iny
.3c6e	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.3c70	d0 01		bne $3c73			bne 	_CRPError
.3c72	60		rts				rts
.3c73					_CRPError:
.3c73	a2 09		ldx #$09			ldx 	#ErrorID_MissingRP
.3c75	20 18 15	jsr $1518		jsr	errorHandler
.3c78					CheckComma:
.3c78	b1 28		lda ($28),y			lda 	(codePtr),y
.3c7a	c8		iny				iny
.3c7b	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.3c7d	d0 01		bne $3c80			bne 	_CCError
.3c7f	60		rts				rts
.3c80					_CCError:
.3c80	a2 0a		ldx #$0a			ldx 	#ErrorID_MissingComma
.3c82	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/utility/stack.asm

.0037					rsPointer:
>0037							.fill 	2							; to TOS, which is the current top-token.
.3c85					RSReset:
.3c85	a9 ff		lda #$ff			lda 	#(returnStack+retStackSize-1) & $FF
.3c87	85 37		sta $37				sta 	rsPointer
.3c89	a9 09		lda #$09			lda 	#(returnStack+retStackSize-1) >> 8
.3c8b	85 38		sta $38				sta 	1+(rsPointer)
.3c8d	a9 ff		lda #$ff			lda 	#$FF 						; put a duff marker on TOS, so nothing will pop
.3c8f	8d ff 09	sta $09ff			sta 	returnStack+retStackSize-1
.3c92	60		rts				rts
.3c93					RSClaim:
.3c93	84 32		sty $32				sty 	tempShort 					; preserve Y
.3c95	48		pha				pha 								; save marker on stack.
.3c96	8a		txa				txa 								; get bytes required.
.3c97	38		sec				sec
.3c98	49 ff		eor #$ff			eor 	#$FF 						; add to rsPointer using 2's complement.
.3c9a	65 37		adc $37				adc 	rsPointer
.3c9c	85 37		sta $37				sta 	rsPointer
.3c9e	a5 38		lda $38				lda 	rsPointer+1
.3ca0	69 ff		adc #$ff			adc 	#$FF
.3ca2	85 38		sta $38				sta 	rsPointer+1
.3ca4	c9 08		cmp #$08			cmp 	#returnStack>>8 			; overflow. underflow actually :)
.3ca6	90 08		bcc $3cb0			bcc 	_RSCOverflow
.3ca8	68		pla				pla 								; get marker back
.3ca9	a0 00		ldy #$00			ldy 	#0 							; write marker out.
.3cab	91 37		sta ($37),y			sta 	(rsPointer),y
.3cad	a4 32		ldy $32				ldy 	tempShort 					; restore Y and exit
.3caf	60		rts				rts
.3cb0					_RSCOverflow:
.3cb0	a2 16		ldx #$16			ldx 	#ErrorID_RetStack
.3cb2	20 18 15	jsr $1518		jsr	errorHandler
.3cb5					RSFree:
.3cb5	18		clc				clc
.3cb6	65 37		adc $37				adc 	rsPointer
.3cb8	85 37		sta $37				sta 	rsPointer
.3cba	90 02		bcc $3cbe			bcc 	_RSFExit
.3cbc	e6 38		inc $38				inc 	rsPointer+1
.3cbe					_RSFExit:
.3cbe	60		rts				rts
.3cbf					RSSavePosition:
.3cbf	84 32		sty $32				sty 	tempShort 					; save Y position
.3cc1	a8		tay				tay 								; this is where we write it.
.3cc2	a5 28		lda $28				lda 	codePtr 					; write codePointer out
.3cc4	91 37		sta ($37),y			sta 	(rsPointer),y
.3cc6	c8		iny				iny
.3cc7	a5 29		lda $29				lda 	codePtr+1
.3cc9	91 37		sta ($37),y			sta 	(rsPointer),y
.3ccb	c8		iny				iny
.3ccc	a5 32		lda $32				lda 	tempShort 					; write the Y position out.
.3cce	91 37		sta ($37),y			sta 	(rsPointer),y
.3cd0	a8		tay				tay 								; fix Y back again to original value
.3cd1	60		rts				rts
.3cd2					RSLoadPosition:
.3cd2	a8		tay				tay
.3cd3	b1 37		lda ($37),y			lda 	(rsPointer),y 				; read codePointer back
.3cd5	85 28		sta $28				sta 	codePtr
.3cd7	c8		iny				iny
.3cd8	b1 37		lda ($37),y			lda 	(rsPointer),y
.3cda	85 29		sta $29				sta 	codePtr+1
.3cdc	c8		iny				iny
.3cdd	b1 37		lda ($37),y			lda 	(rsPointer),y 				; and the offset
.3cdf	a8		tay				tay 								; to Y
.3ce0	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/utility/warmstart.asm

.3ce1					WarmStart:
.3ce1	a2 04		ldx #$04		ldx	#4
.3ce3	20 48 26	jsr $2648		jsr	interactionHandler

;******  Return to file: main/main.asm

.3ce6					mainHandler:
.3ce6	7c e9 3c	jmp ($3ce9,x)			jmp 	(mainVectors,x)
.3ce9					mainVectors:
>3ce9	05 3d					.word _DummyControlHandler ; index 0
>3ceb	78 3c					.word CheckComma           ; index 2
>3ced	6b 3c					.word CheckRightParen      ; index 4
>3cef	50 2e					.word XCommandClear        ; index 6
>3cf1	7b 35					.word LinkEvaluate         ; index 8
>3cf3	87 35					.word LinkEvaluateInteger  ; index 10
>3cf5	93 35					.word LinkEvaluateSmallInt ; index 12
>3cf7	8d 35					.word LinkEvaluateString   ; index 14
>3cf9	81 35					.word LinkEvaluateTerm     ; index 16
>3cfb	47 3b					.word MLInt32ToString      ; index 18
>3cfd	df 2f					.word Command_XNew         ; index 20
>3cff	ed 2f					.word XCommand_Run         ; index 22
>3d01	f9 2f					.word Command_RunFrom      ; index 24
>3d03	5f 3a					.word LinkInt32FromString  ; index 26
.3d05					_DummyControlHandler:
.3d05	60		rts			rts

;******  Return to file: basic.asm

.3d06					section_end_main:
.3d06					section_start_string:

;******  Processing file: string/string.asm


;******  Processing file: string/functions/chr.asm

.3d06					StringChrs:
.3d06	aa		tax				tax 								; set up stack
.3d07	a9 02		lda #$02			lda 	#2
.3d09	20 c9 3d	jsr $3dc9			jsr 	AllocateSoftString
.3d0c	98		tya				tya
.3d0d	20 ef 3d	jsr $3def			jsr 	WriteSoftString
.3d10					StringUpdate:
.3d10	20 1e 3d	jsr $3d1e			jsr 	ReturnSoftString
.3d13	8a		txa				txa
.3d14	60		rts				rts
.3d15					StringNull:
.3d15	aa		tax				tax
.3d16	a9 01		lda #$01			lda 	#1
.3d18	20 c9 3d	jsr $3dc9			jsr 	AllocateSoftString
.3d1b	4c 10 3d	jmp $3d10			jmp 	StringUpdate
.3d1e					ReturnSoftString:
.3d1e	a5 39		lda $39				lda 	softMemAlloc 				; copy address
.3d20	95 98		sta $98,x			sta 	esInt0,x
.3d22	a5 3a		lda $3a				lda 	softMemAlloc+1
.3d24	95 a0		sta $a0,x			sta 	esInt1,x
.3d26	a9 00		lda #$00			lda 	#0 							; zero upper bytes
.3d28	95 a8		sta $a8,x			sta 	esInt2,x
.3d2a	95 b0		sta $b0,x			sta 	esInt3,x
.3d2c	a9 40		lda #$40			lda 	#$40 						; type string.
.3d2e	95 90		sta $90,x			sta 	esType,x
.3d30	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/functions/compare.asm

.3d31					STRCompare:
.3d31	48		pha				pha 								; save A
.3d32	aa		tax				tax 								; put stack pos in X
.3d33	98		tya				tya
.3d34	48		pha				pha
.3d35	20 69 3d	jsr $3d69			jsr 	CopyStringPair 				; copy strings to temp0,temp1
.3d38	a0 00		ldy #$00			ldy 	#0 							; get the smaller of the two string sizes.
.3d3a	b1 2a		lda ($2a),y			lda 	(temp0),y
.3d3c	d1 2c		cmp ($2c),y			cmp 	(temp1),y
.3d3e	90 02		bcc $3d42			bcc 	_SCNotSmaller
.3d40	b1 2c		lda ($2c),y			lda 	(temp1),y
.3d42					_SCNotSmaller:
.3d42	aa		tax				tax 								; put that in X. We compare this many chars first.
.3d43					_SCCompareLoop:
.3d43	e0 00		cpx #$00			cpx 	#0 							; if compared all the smaller, then it is the shorter
.3d45	f0 0c		beq $3d53			beq 	_SCSameToEndShortest 		; one that is the smallest if they are different lengths.
.3d47	ca		dex				dex 								; decrement chars to compare.
.3d48	c8		iny				iny 								; move to next character
.3d49	38		sec				sec 								; calculate s1[y]-s2[y]
.3d4a	b1 2a		lda ($2a),y			lda 	(temp0),y
.3d4c	f1 2c		sbc ($2c),y			sbc 	(temp1),y
.3d4e	d0 0a		bne $3d5a			bne 	_SCReturnResult 			; if different return sign of A
.3d50	4c 43 3d	jmp $3d43			jmp 	_SCCompareLoop
.3d53					_SCSameToEndShortest
.3d53	a0 00		ldy #$00			ldy 	#0 							; compare len(s1) - len(s2)
.3d55	38		sec				sec
.3d56	b1 2a		lda ($2a),y			lda 	(temp0),y
.3d58	f1 2c		sbc ($2c),y			sbc 	(temp1),y
.3d5a					_SCReturnResult:
.3d5a	08		php				php 								; set return to zero preserving PSW.
.3d5b	a2 00		ldx #$00			ldx 	#0
.3d5d	28		plp				plp
.3d5e	f0 05		beq $3d65			beq 	_SCExit 					; two values equal, then exit
.3d60	ca		dex				dex 								; X = $FF
.3d61	90 02		bcc $3d65			bcc 	_SCExit 					; if 1st < 2nd then -1
.3d63	a2 01		ldx #$01			ldx 	#1 							; X = $01 if greater
.3d65					_SCExit:
.3d65	68		pla				pla
.3d66	a8		tay				tay
.3d67	68		pla				pla
.3d68	60		rts				rts
.3d69					CopyStringPair:
.3d69	b5 99		lda $99,x			lda 	esInt0+1,x
.3d6b	85 2c		sta $2c				sta 	temp1
.3d6d	b5 a1		lda $a1,x			lda 	esInt1+1,x
.3d6f	85 2d		sta $2d				sta 	temp1+1
.3d71					CopyStringTop:
.3d71	b5 98		lda $98,x			lda 	esInt0,x
.3d73	85 2a		sta $2a				sta 	temp0
.3d75	b5 a0		lda $a0,x			lda 	esInt1,x
.3d77	85 2b		sta $2b				sta 	temp0+1
.3d79	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/functions/concat.asm

.3d7a					StringConcat:
.3d7a	aa		tax				tax									; stack pos in X
.3d7b	98		tya				tya
.3d7c	48		pha				pha
.3d7d	20 69 3d	jsr $3d69			jsr 	CopyStringPair 				; temp0 and temp1 point to strings to concat.
.3d80	38		sec				sec 								; calculate alloc strings. lengths added + 1 for size.
.3d81	a0 00		ldy #$00			ldy 	#0
.3d83	b1 2a		lda ($2a),y			lda 	(temp0),y
.3d85	71 2c		adc ($2c),y			adc 	(temp1),y
.3d87	b0 1c		bcs $3da5			bcs 	_SCError 					; just too many characters here.
.3d89	c9 fc		cmp #$fc			cmp 	#MaxStringSize
.3d8b	b0 18		bcs $3da5			bcs 	_SCError
.3d8d	20 c9 3d	jsr $3dc9			jsr 	AllocateSoftString 			; allocate soft string memory, set pointer.
.3d90	20 c0 3d	jsr $3dc0			jsr 	CopySoftToStack 			; copy that to the stack.
.3d93	20 aa 3d	jsr $3daa			jsr 	SCCopyTemp0 				; copy temp0
.3d96	a5 2c		lda $2c				lda 	temp1 						; copy temp1 to temp0
.3d98	85 2a		sta $2a				sta 	temp0
.3d9a	a5 2d		lda $2d				lda 	temp1+1
.3d9c	85 2b		sta $2b				sta 	temp0+1
.3d9e	20 aa 3d	jsr $3daa			jsr 	SCCopyTemp0 				; copy temp0 e.g. what was temp1.
.3da1	68		pla				pla
.3da2	a8		tay				tay
.3da3	8a		txa				txa 								; and A
.3da4	60		rts				rts
.3da5					_SCError:
.3da5	a2 0d		ldx #$0d			ldx 	#ErrorID_StrLen
.3da7	20 18 15	jsr $1518		jsr	errorHandler
.3daa					SCCopyTemp0:
.3daa	a0 00		ldy #$00			ldy 	#0 							; put count in temp2
.3dac	b1 2a		lda ($2a),y			lda 	(temp0),y
.3dae	85 2e		sta $2e				sta 	temp2
.3db0					_SCCopyLoop:
.3db0	a5 2e		lda $2e				lda 	temp2 						; done the lot
.3db2	f0 0b		beq $3dbf			beq 	_SCCopyExit
.3db4	c6 2e		dec $2e				dec 	temp2
.3db6	c8		iny				iny 								; get next char
.3db7	b1 2a		lda ($2a),y			lda 	(temp0),y
.3db9	20 ef 3d	jsr $3def			jsr 	WriteSoftString 			; write to soft string.
.3dbc	4c b0 3d	jmp $3db0			jmp 	_SCCopyLoop
.3dbf					_SCCopyExit:
.3dbf	60		rts				rts
.3dc0					CopySoftToStack:
.3dc0	a5 39		lda $39				lda 	SoftMemAlloc 				; copy the memory allocation pointer to the stack.
.3dc2	95 98		sta $98,x			sta 	esInt0,x 					; type is already string.
.3dc4	a5 3a		lda $3a				lda 	SoftMemAlloc+1
.3dc6	95 a0		sta $a0,x			sta 	esInt1,x
.3dc8	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/functions/memory.asm

.0039					softMemAlloc:
>0039							.fill 	2  							; if MSB is zero needs resetting on allocation.
.3dc9					AllocateSoftString:
.3dc9	85 32		sta $32				sta 	tempShort 					; save count
.3dcb	98		tya				tya
.3dcc	48		pha				pha
.3dcd	a5 3a		lda $3a				lda 	softMemAlloc+1 				; if the high byte is zero, it needs allocating.
.3dcf	d0 09		bne $3dda			bne 	_ASSDone
.3dd1	a5 33		lda $33				lda 	highMemory 					; reset the soft memory alloc pointer.
.3dd3	85 39		sta $39				sta 	softMemAlloc 				; to speed up slightly, we only reset this when we first need it
.3dd5	a4 34		ldy $34				ldy 	highMemory+1 				; but it needs to be reset before each command.
.3dd7	88		dey				dey 								; it is set to 1/4k below high memory, allowing space
.3dd8	84 3a		sty $3a				sty 	softMemAlloc+1 				; for a concreted string.
.3dda					_ASSDone:
.3dda	38		sec				sec 								; allocate downwards enough memory
.3ddb	a5 39		lda $39				lda 	softMemAlloc 				; subtract the memory requirements in A from
.3ddd	e5 32		sbc $32				sbc 	tempShort 					; the soft memory pointer
.3ddf	85 39		sta $39				sta 	softMemAlloc
.3de1	a5 3a		lda $3a				lda 	softMemAlloc+1
.3de3	e9 00		sbc #$00			sbc 	#0
.3de5	85 3a		sta $3a				sta 	softMemAlloc+1
.3de7	a9 00		lda #$00			lda 	#0 							; empty that string, set the length = 0.
.3de9	a8		tay				tay
.3dea	91 39		sta ($39),y			sta 	(softMemAlloc),y
.3dec	68		pla				pla
.3ded	a8		tay				tay
.3dee	60		rts				rts
.3def					WriteSoftString:
.3def	84 32		sty $32				sty 	tempShort 					; save Y
.3df1	48		pha				pha 								; save character on stack
.3df2	a0 00		ldy #$00			ldy 	#0 							; get and bump length
.3df4	b1 39		lda ($39),y			lda 	(softMemAlloc),y
.3df6	18		clc				clc
.3df7	69 01		adc #$01			adc 	#1
.3df9	91 39		sta ($39),y			sta 	(softMemAlloc),y
.3dfb	a8		tay				tay 								; offset in Y
.3dfc	68		pla				pla 								; get char and write.
.3dfd	91 39		sta ($39),y			sta 	(softMemAlloc),y
.3dff	a4 32		ldy $32				ldy 	tempShort 					; restore Y and exit.
.3e01	60		rts				rts
.3e02					StrClone:
.3e02	aa		tax				tax 								; set up stack.
.3e03	98		tya				tya
.3e04	48		pha				pha
.3e05	a0 00		ldy #$00			ldy 	#0 							; get length, add 1 for length
.3e07	b1 2a		lda ($2a),y			lda 	(temp0),y 					; this is the bytes required.
.3e09	18		clc				clc
.3e0a	69 01		adc #$01			adc 	#1
.3e0c	20 c9 3d	jsr $3dc9			jsr 	AllocateSoftString 			; allocate soft memory
.3e0f	a5 39		lda $39				lda 	softMemAlloc 				; copy that address to TOS
.3e11	95 98		sta $98,x			sta 	esInt0,x
.3e13	a5 3a		lda $3a				lda 	softMemAlloc+1
.3e15	95 a0		sta $a0,x			sta 	esInt1,x
.3e17	a9 00		lda #$00			lda 	#0 							; zero upper 2 bytes
.3e19	95 a8		sta $a8,x			sta 	esInt2,x
.3e1b	95 b0		sta $b0,x			sta 	esInt3,x
.3e1d	a9 40		lda #$40			lda 	#$40 						; set type to string.
.3e1f	95 90		sta $90,x			sta 	esType,x
.3e21	20 aa 3d	jsr $3daa			jsr 	SCCopyTemp0 				; copy temp0 string to soft memory copy (concat.asm)
.3e24	68		pla				pla
.3e25	a8		tay				tay
.3e26	8a		txa				txa
.3e27	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/functions/setcase.asm

.3e28					CaseString:
.3e28	48		pha				pha 								; save A and copy to X
.3e29	aa		tax				tax
.3e2a	98		tya				tya
.3e2b	48		pha				pha
.3e2c	20 71 3d	jsr $3d71			jsr 	CopyStringTop 				; target string -> temp0
.3e2f	a0 00		ldy #$00			ldy 	#0
.3e31	b1 2a		lda ($2a),y			lda 	(temp0),y  					; get length,
.3e33	18		clc				clc
.3e34	69 01		adc #$01			adc 	#1 							; one more for length byte
.3e36	20 c9 3d	jsr $3dc9			jsr 	AllocateSoftString 			; allocate soft string memory, set pointer.
.3e39	20 c0 3d	jsr $3dc0			jsr 	CopySoftToStack 			; copy that to the stack.
.3e3c	a0 00		ldy #$00			ldy 	#0
.3e3e	b1 2a		lda ($2a),y			lda 	(temp0),y 					; count to copy in X
.3e40	aa		tax				tax
.3e41					_CSCopy:
.3e41	e0 00		cpx #$00			cpx 	#0 							; finished if 0.
.3e43	f0 24		beq $3e69			beq 	_CSExit
.3e45	ca		dex				dex
.3e46	c8		iny				iny
.3e47	68		pla				pla 								; check direction
.3e48	48		pha				pha
.3e49	f0 0c		beq $3e57			beq 	_CSUpper
.3e4b	b1 2a		lda ($2a),y			lda 	(temp0),y 					; lower$() code
.3e4d	c9 41		cmp #$41			cmp 	#"A"
.3e4f	90 12		bcc $3e63			bcc 	_CSWrite
.3e51	c9 5b		cmp #$5b			cmp 	#"Z"+1
.3e53	b0 0e		bcs $3e63			bcs 	_CSWrite
.3e55	90 0a		bcc $3e61			bcc 	_CSFlipWrite
.3e57					_CSUpper:
.3e57	b1 2a		lda ($2a),y			lda 	(temp0),y 					; upper$() code
.3e59	c9 61		cmp #$61			cmp 	#"a"
.3e5b	90 06		bcc $3e63			bcc 	_CSWrite
.3e5d	c9 7b		cmp #$7b			cmp 	#"z"+1
.3e5f	b0 02		bcs $3e63			bcs 	_CSWrite
.3e61					_CSFlipWrite:
.3e61	49 20		eor #$20			eor 	#"A"^"a" 					; switch case.
.3e63					_CSWrite:
.3e63	20 ef 3d	jsr $3def			jsr 	WriteSoftString 			; add to soft string.
.3e66	4c 41 3e	jmp $3e41			jmp 	_CSCopy
.3e69					_CSExit:
.3e69	68		pla				pla
.3e6a	a8		tay				tay
.3e6b	68		pla				pla
.3e6c	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/functions/substring.asm

.3e6d					StringSubstring:
.3e6d	48		pha				pha
.3e6e	aa		tax				tax 								; access stack.
.3e6f	98		tya				tya
.3e70	48		pha				pha
.3e71	20 71 3d	jsr $3d71			jsr 	CopyStringTop 				; point temp0 to the string.
.3e74	a0 00		ldy #$00			ldy 	#0 							; get length.
.3e76	b1 2a		lda ($2a),y			lda 	(temp0),Y
.3e78	85 2c		sta $2c				sta 	temp1
.3e7a	b5 99		lda $99,x			lda 	esInt0+1,x 					; get the initial offset
.3e7c	c5 2c		cmp $2c				cmp 	temp1 						; return "" if > length.
.3e7e	f0 02		beq $3e82			beq 	_SSBOkay
.3e80	b0 2a		bcs $3eac			bcs 	_SSBReturnNull
.3e82					_SSBOkay:
.3e82	a5 2c		lda $2c				lda 	temp1 						; get the total length +1
.3e84	18		clc				clc
.3e85	69 01		adc #$01			adc 	#1
.3e87	38		sec				sec
.3e88	f5 99		sbc $99,x			sbc 	esInt0+1,x 					; the anything >= this is bad - max size
.3e8a	d5 9a		cmp $9a,x			cmp 	esInt0+2,x  				; check bad >= required
.3e8c	90 02		bcc $3e90			bcc		_SSBTrunc
.3e8e	b5 9a		lda $9a,x			lda 	esInt0+2,x
.3e90					_SSBTrunc:
.3e90	85 2d		sta $2d				sta 	temp1+1 					; characters to copy.
.3e92	18		clc				clc
.3e93	69 01		adc #$01			adc 	#1 							; add 1
.3e95	20 c9 3d	jsr $3dc9			jsr 	AllocateSoftString 			; allocate soft string memory, set pointer.
.3e98	20 c0 3d	jsr $3dc0			jsr 	CopySoftToStack 			; copy that to the stack.
.3e9b	b4 99		ldy $99,x			ldy 	esInt0+1,x 					; get initial position of char to copy
.3e9d					_SSBCopyLoop:
.3e9d	a5 2d		lda $2d				lda 	temp1+1 					; done them all
.3e9f	f0 0e		beq $3eaf			beq 	_SSBExit
.3ea1	c6 2d		dec $2d				dec 	temp1+1
.3ea3	b1 2a		lda ($2a),y			lda 	(temp0),y 					; get and write character
.3ea5	20 ef 3d	jsr $3def			jsr 	WriteSoftString
.3ea8	c8		iny				iny
.3ea9	4c 9d 3e	jmp $3e9d			jmp 	_SSBCopyLoop
.3eac					_SSBReturnNull:
.3eac	20 b3 3e	jsr $3eb3			jsr 	ReturnNull
.3eaf					_SSBExit:
.3eaf	68		pla				pla
.3eb0	a8		tay				tay
.3eb1	68		pla				pla
.3eb2	60		rts				rts
.3eb3					ReturnNull:
.3eb3	a9 00		lda #$00			lda 	#0 							; clear null string
.3eb5	8d ce 0a	sta $0ace			sta 	NullString
.3eb8	a9 ce		lda #$ce			lda 	#NullString & $FF 			; set a pointer to it
.3eba	95 98		sta $98,x			sta 	esInt0,x
.3ebc	a9 0a		lda #$0a			lda 	#NullString >> 8
.3ebe	95 a0		sta $a0,x			sta 	esInt1,x
.3ec0	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/functions/write.asm

.0d11					srcStrLen:
>0d11							.fill 	1
.3ec1					StringWrite:
.3ec1	aa		tax				tax
.3ec2	48		pha				pha
.3ec3	98		tya				tya
.3ec4	48		pha				pha
.3ec5	20 ec 3e	jsr $3eec			jsr 	CheckOverwriteCurrent
.3ec8	b0 0d		bcs $3ed7			bcs		_SWCopyCurrent
.3eca	20 2a 3f	jsr $3f2a			jsr 	RequiresConcretion
.3ecd	90 0e		bcc $3edd			bcc 	_SWWriteReference
.3ecf	20 8d 3f	jsr $3f8d			jsr 	CheckSpecialConcretion
.3ed2	b0 09		bcs $3edd			bcs 	_SWWriteReference
.3ed4	20 3e 3f	jsr $3f3e			jsr 	AllocateHardMemory
.3ed7					_SWCopyCurrent:
.3ed7	20 71 3f	jsr $3f71			jsr 	CopyStringToHardMemory
.3eda	4c e8 3e	jmp $3ee8			jmp 	_SWExit
.3edd					_SWWriteReference
.3edd	a0 00		ldy #$00			ldy 	#0
.3edf	a5 2a		lda $2a				lda 	temp0
.3ee1	91 2c		sta ($2c),y			sta 	(temp1),y
.3ee3	c8		iny				iny
.3ee4	a5 2b		lda $2b				lda 	temp0+1
.3ee6	91 2c		sta ($2c),y			sta 	(temp1),y
.3ee8					_SWExit:
.3ee8	68		pla				pla
.3ee9	a8		tay				tay
.3eea	68		pla				pla
.3eeb	60		rts				rts
.3eec					CheckOverwriteCurrent:
.3eec	a0 00		ldy #$00			ldy 	#0 						; get address of string being written to temp0
.3eee	b5 a1		lda $a1,x			lda 	esInt1+1,x
.3ef0	85 2b		sta $2b				sta 	temp0+1
.3ef2	b5 99		lda $99,x			lda 	esInt0+1,x
.3ef4	85 2a		sta $2a				sta 	temp0
.3ef6	b1 2a		lda ($2a),y			lda 	(temp0),y 				; get length of string being copied and save it.
.3ef8	8d 11 0d	sta $0d11			sta 	srcStrLen
.3efb	b5 98		lda $98,x			lda 	esInt0,x 				; copy where the final address it being written to temp1.
.3efd	85 2c		sta $2c				sta 	temp1 					; e.g. if it is ax$ then temp1 will point to the ax$
.3eff	b5 a0		lda $a0,x			lda 	esInt1,x 				; data record + 5
.3f01	85 2d		sta $2d				sta 	temp1+1
.3f03	a0 01		ldy #$01			ldy 	#1 						; get the MSB of the address of string currently stored there.
.3f05	b1 2c		lda ($2c),y			lda 	(temp1),y
.3f07	c5 34		cmp $34				cmp 	highMemory+1 			; if < high memory then it cannot be something stored
.3f09	90 1b		bcc $3f26			bcc 	_COCFail 				; in hard memory.
.3f0b	a0 00		ldy #$00			ldy 	#0 						; copy target address - 1 into temp2
.3f0d	b1 2c		lda ($2c),y			lda 	(temp1),y 				; when allocating hard memory, the overall size is
.3f0f	e9 01		sbc #$01			sbc 	#1 						; in the previous byte.
.3f11	85 2e		sta $2e				sta 	temp2
.3f13	c8		iny				iny
.3f14	b1 2c		lda ($2c),y			lda 	(temp1),y
.3f16	e9 00		sbc #$00			sbc 	#0
.3f18	85 2f		sta $2f				sta 	temp2+1
.3f1a	a0 00		ldy #$00			ldy 	#0 						; how large is this physical chunk.
.3f1c	b1 2e		lda ($2e),y			lda 	(temp2),y
.3f1e	38		sec				sec  							; maximum character capacity.
.3f1f	e9 02		sbc #$02			sbc 	#2
.3f21	cd 11 0d	cmp $0d11			cmp 	srcStrLen 				; if >= the required length
.3f24	b0 02		bcs $3f28			bcs 	_COCCanReuse
.3f26					_COCFail:
.3f26	18		clc				clc
.3f27	60		rts				rts
.3f28					_COCCanReuse:
.3f28	38		sec				sec
.3f29	60		rts				rts
.3f2a					RequiresConcretion:
.3f2a	a5 2b		lda $2b				lda 	temp0+1 				; get MSB of address of string to be written
.3f2c	c5 34		cmp $34				cmp 	highMemory+1 			; if >= high memory it is concreted
.3f2e	b0 0a		bcs $3f3a			bcs 	_RCSucceed 				; so it needs concreting again - duplication.
.3f30	a5 3a		lda $3a				lda 	softMemAlloc+1 			; have we allocated any soft memory yet ?
.3f32	f0 08		beq $3f3c			beq 	_RCFail 				; if not, this cannot be soft memory.
.3f34	a5 2b		lda $2b				lda 	temp0+1 				; get MSB of address of string to be written
.3f36	c5 3a		cmp $3a				cmp 	softMemAlloc+1 			; if >= soft mem alloc it is either soft
.3f38	90 02		bcc $3f3c			bcc 	_RCFail 				; so concreting
.3f3a					_RCSucceed:
.3f3a	38		sec				sec
.3f3b	60		rts				rts
.3f3c					_RCFail:
.3f3c	18		clc				clc
.3f3d	60		rts				rts
.3f3e					AllocateHardMemory:
.3f3e	98		tya				tya
.3f3f	48		pha				pha
.3f40	ad 11 0d	lda $0d11			lda 	srcStrLen 				; characters in string
.3f43	69 0a		adc #$0a			adc 	#1+1+8 					; one for hard memory size, one for string size, extra for expansion
.3f45	b0 04		bcs $3f4b			bcs 	_AHMSetMax 				; max out that amount.
.3f47	c9 fe		cmp #$fe			cmp 	#MaxStringSize+2
.3f49	90 02		bcc $3f4d			bcc 	_AHMIsOkay
.3f4b					_AHMSetMax:
.3f4b	a9 fe		lda #$fe			lda 	#MaxStringSize+2
.3f4d					_AHMIsOkay:
.3f4d	48		pha				pha	 							; save size to be allocated
.3f4e	49 ff		eor #$ff			eor 	#$FF 					; complement and add to high Memory
.3f50	38		sec				sec  							; and copy result to TOS as target address.
.3f51	65 33		adc $33				adc 	highMemory
.3f53	85 33		sta $33				sta 	highMemory
.3f55	a5 34		lda $34				lda 	highMemory+1
.3f57	69 ff		adc #$ff			adc 	#$FF
.3f59	85 34		sta $34				sta 	highMemory+1
.3f5b	a0 00		ldy #$00			ldy 	#0 						; Y = 0
.3f5d	68		pla				pla 							; get the total size of the storage block
.3f5e	91 33		sta ($33),y			sta 	(highMemory),y 			; and set it
.3f60	18		clc				clc
.3f61	a5 33		lda $33				lda		highMemory 				; point the target address to the byte after this.
.3f63	69 01		adc #$01			adc 	#1
.3f65	91 2c		sta ($2c),y			sta 	(temp1),y
.3f67	a5 34		lda $34				lda 	highMemory+1
.3f69	69 00		adc #$00			adc 	#0
.3f6b	c8		iny				iny
.3f6c	91 2c		sta ($2c),y			sta 	(temp1),y
.3f6e	68		pla				pla
.3f6f	a8		tay				tay
.3f70	60		rts				rts
.3f71					CopyStringToHardMemory:
.3f71	98		tya				tya
.3f72	48		pha				pha
.3f73	a0 00		ldy #$00			ldy 	#0 						; copy target address to temp2
.3f75	b1 2c		lda ($2c),y			lda 	(temp1),y
.3f77	85 2e		sta $2e				sta 	temp2
.3f79	c8		iny				iny
.3f7a	b1 2c		lda ($2c),y			lda 	(temp1),y
.3f7c	85 2f		sta $2f				sta 	temp2+1
.3f7e	ac 11 0d	ldy $0d11			ldy 	srcStrLen 				; copy this + 1 characters, (length too) hence $FF compare
.3f81					_CSTHMLoop:
.3f81	b1 2a		lda ($2a),y			lda 	(temp0),y
.3f83	91 2e		sta ($2e),y			sta 	(temp2),y
.3f85	88		dey				dey
.3f86	c0 ff		cpy #$ff			cpy 	#$FF 					; this does the +1
.3f88	d0 f7		bne $3f81			bne 	_CSTHMLoop
.3f8a	68		pla				pla
.3f8b	a8		tay				tay
.3f8c	60		rts				rts
.3f8d					CheckSpecialConcretion:
.3f8d	ad 11 0d	lda $0d11			lda 	srcStrLen 				; check string is null e.g. length = 0
.3f90	f0 02		beq $3f94			beq 	_CSCNullString
.3f92	18		clc				clc
.3f93	60		rts				rts
.3f94					_CSCNullString:
.3f94	a9 00		lda #$00			lda 	#0 						; by always returning this address we don't waste
.3f96	8d ce 0a	sta $0ace			sta 	NullString		 		; storage on null strings.
.3f99	a9 ce		lda #$ce			lda 	#(NullString) & $FF
.3f9b	85 2a		sta $2a				sta 	temp0
.3f9d	a9 0a		lda #$0a			lda 	#(NullString) >> 8
.3f9f	85 2b		sta $2b				sta 	1+(temp0)
.3fa1	38		sec				sec
.3fa2	60		rts				rts

;******  Return to file: string/string.asm

.3fa3					stringHandler:
.3fa3	7c a6 3f	jmp ($3fa6,x)			jmp 	(stringVectors,x)
.3fa6					stringVectors:
>3fa6	b8 3f					.word _DummyControlHandler ; index 0
>3fa8	06 3d					.word StringChrs           ; index 2
>3faa	02 3e					.word StrClone             ; index 4
>3fac	7a 3d					.word StringConcat         ; index 6
>3fae	15 3d					.word StringNull           ; index 8
>3fb0	31 3d					.word STRCompare           ; index 10
>3fb2	28 3e					.word CaseString           ; index 12
>3fb4	6d 3e					.word StringSubstring      ; index 14
>3fb6	c1 3e					.word StringWrite          ; index 16
.3fb8					_DummyControlHandler:
.3fb8	60		rts			rts

;******  Return to file: basic.asm

.3fb9					section_end_string:
.3fb9					section_start_tokeniser:

;******  Processing file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/detokenise/detokenise.asm

.0d12					deTokeniseVector:
>0d12							.fill 	2
.0d14					lastCharacterClass:
>0d14							.fill 	1
.0d15					indent:
>0d15							.fill 	1
.3fb9					ListLine:
.3fb9	48		pha				pha								; enter here to list to console. sets the output vector
.3fba	a9 f1		lda #$f1			lda 	#(deTokenPrint) & $FF
.3fbc	8d 12 0d	sta $0d12			sta 	deTokeniseVector
.3fbf	a9 40		lda #$40			lda 	#(deTokenPrint) >> 8
.3fc1	8d 13 0d	sta $0d13			sta 	1+(deTokeniseVector)
.3fc4	68		pla				pla
.3fc5					Detokenise:
.3fc5	18		clc				clc 							; space required for line number.
.3fc6	69 06		adc #$06			adc 	#6
.3fc8	8d 15 0d	sta $0d15			sta 	indent
.3fcb	a9 ff		lda #$ff			lda 	#$FF 					; last thing printed is a dummy value.
.3fcd	8d 14 0d	sta $0d14			sta 	lastCharacterClass
.3fd0	a2 02		ldx #$02			ldx 	#2
.3fd2	a9 00		lda #$00			lda 	#0 						; clear upper two bytes
.3fd4	95 a8		sta $a8,x			sta 	esInt2,x
.3fd6	95 b0		sta $b0,x			sta 	esInt3,x
.3fd8	a0 01		ldy #$01			ldy 	#1 						; copy line number to stack,2 (as using stack 0,1 for list range)
.3fda	b1 28		lda ($28),y			lda 	(codePtr),y
.3fdc	95 98		sta $98,x			sta 	esInt0,x
.3fde	c8		iny				iny
.3fdf	b1 28		lda ($28),y			lda 	(codePtr),y
.3fe1	95 a0		sta $a0,x			sta 	esInt1,x
.3fe3	a9 84		lda #$84			lda 	#LTYLineNumber
.3fe5	20 cc 40	jsr $40cc			jsr 	ListOutputCharacter
.3fe8	a9 0a		lda #$0a			lda 	#10 					; base 10
.3fea	20 90 40	jsr $4090			jsr 	DTPrintInteger 			; print as integer.
.3fed	a0 00		ldy #$00			ldy 	#0 						; get length
.3fef	b1 2a		lda ($2a),y			lda 	(temp0),y 				; into X
.3ff1	aa		tax				tax
.3ff2					_DTPadOut:
.3ff2	a9 20		lda #$20			lda 	#" " 					; pad out to indent.
.3ff4	20 cc 40	jsr $40cc			jsr 	ListOutputCharacter
.3ff7	e8		inx				inx
.3ff8	ec 15 0d	cpx $0d15			cpx 	indent
.3ffb	d0 f5		bne $3ff2			bne 	_DTPadOut
.3ffd	a0 03		ldy #$03			ldy 	#3 						; start position.
.3fff					_DTListLoop:
.3fff	b1 28		lda ($28),y			lda 	(codePtr),y
.4001	c9 85		cmp #$85			cmp 	#TOK_STR 				; Inline string.
.4003	f0 5e		beq $4063			beq 	_DTIsString
.4005	c9 84		cmp #$84			cmp 	#TOK_FPC 				; Floating point
.4007	f0 56		beq $405f			beq 	_DTIsFloat
.4009	c9 c5		cmp #$c5			cmp 	#TKW_AMP 				; & hex marker
.400b	f0 16		beq $4023			beq 	_DTHexConstant
.400d	c9 80		cmp #$80			cmp 	#TOK_EOL 				; End of Line
.400f	d0 06		bne $4017			bne 	_DTNotEnd
.4011	a9 ff		lda #$ff			lda 	#255 					; print CR
.4013	20 cc 40	jsr $40cc			jsr 	ListOutputCharacter
.4016	60		rts				rts
.4017					_DTNotEnd:
.4017	c9 00		cmp #$00			cmp 	#0
.4019	30 38		bmi $4053			bmi 	_DTIsToken
.401b	c9 40		cmp #$40			cmp 	#$40
.401d	90 3a		bcc $4059			bcc 	_DTIsIdentifier
.401f	a9 0a		lda #$0a			lda 	#10 					; this is the base, unsigned decimal
.4021	d0 0d		bne $4030			bne 	_DTConstant
.4023					_DTHexConstant:
.4023	a9 26		lda #$26			lda 	#"&"
.4025	20 cc 40	jsr $40cc			jsr 	ListOutputCharacter
.4028	c8		iny				iny
.4029	a9 01		lda #$01			lda 	#1 						; switch to spaces so &xxxx is treated like a number.
.402b	20 0d 41	jsr $410d			jsr 	DTSwitchMode
.402e	a9 10		lda #$10			lda 	#16						; print line unsigned hex
.4030					_DTConstant:
.4030	48		pha				pha
.4031	a9 00		lda #$00			lda 	#0 						; now constant, may need spaces
.4033	20 0d 41	jsr $410d			jsr 	DTSwitchMode
.4036	a9 86		lda #$86			lda 	#LTYConstant
.4038	20 cc 40	jsr $40cc			jsr 	ListOutputCharacter
.403b	a2 02		ldx #$02			ldx 	#2 						; get its value
.403d	8a		txa				txa
.403e	a2 10		ldx #$10		ldx	#16
.4040	20 e6 3c	jsr $3ce6		jsr	mainHandler
.4043	aa		tax				tax
.4044	68		pla				pla 							; get base back
.4045	85 32		sta $32				sta 	tempShort
.4047	98		tya				tya
.4048	48		pha				pha
.4049	a5 32		lda $32				lda 	tempShort 				; print in base A stck level X
.404b	20 90 40	jsr $4090			jsr 	DTPrintInteger
.404e	68		pla				pla
.404f	a8		tay				tay
.4050	4c ff 3f	jmp $3fff			jmp 	_DTListLoop
.4053					_DTIsToken:
.4053	20 66 41	jsr $4166			jsr 	DTDecodeToken
.4056	4c ff 3f	jmp $3fff			jmp 	_DTListLoop
.4059					_DTIsIdentifier:
.4059	20 1f 41	jsr $411f			jsr 	DTIdentifier
.405c	4c ff 3f	jmp $3fff			jmp 	_DTListLoop
.405f					_DTIsFloat:
>405f	db						.byte 	$DB
.4060	4c 5f 40	jmp $405f			jmp 	_DTIsFloat
.4063					_DTIsString:
.4063	a9 01		lda #$01			lda 	#1 							; now punctuation, may need spaces
.4065	20 0d 41	jsr $410d			jsr 	DTSwitchMode
.4068	a9 81		lda #$81			lda 	#LTYString
.406a	20 cc 40	jsr $40cc			jsr 	ListOutputCharacter
.406d	a9 22		lda #$22			lda 	#'"'						; open quote
.406f	20 cc 40	jsr $40cc			jsr 	ListOutputCharacter
.4072	a2 02		ldx #$02			ldx 	#2 							; evaluate string to TOS2.
.4074	8a		txa				txa
.4075	a2 10		ldx #$10		ldx	#16
.4077	20 e6 3c	jsr $3ce6		jsr	mainHandler
.407a	aa		tax				tax
.407b	b5 98		lda $98,x			lda 	esInt0,x 					; copy string address to temp0
.407d	85 2a		sta $2a				sta 	temp0
.407f	b5 a0		lda $a0,x			lda 	esInt1,x
.4081	85 2b		sta $2b				sta 	temp0+1
.4083	a9 00		lda #$00			lda 	#0 							; don't capitalise.
.4085	20 a2 40	jsr $40a2			jsr 	DTPrintLengthPrefix
.4088	a9 22		lda #$22			lda 	#'"'
.408a	20 cc 40	jsr $40cc			jsr 	ListOutputCharacter
.408d	4c ff 3f	jmp $3fff			jmp 	_DTListLoop

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/detokenise/dtprint.asm

.0d16					tPrintCount:
>0d16							.fill 	1
.4090					DTPrintInteger:
.4090	48		pha				pha									; save base
.4091	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.4093	85 2a		sta $2a				sta 	temp0
.4095	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.4097	85 2b		sta $2b				sta 	1+(temp0)
.4099	68		pla				pla
.409a	a8		tay				tay
.409b	8a		txa				txa
.409c	a2 12		ldx #$12		ldx	#18
.409e	20 e6 3c	jsr $3ce6		jsr	mainHandler
.40a1	aa		tax				tax 								; then drop through here.
.40a2					DTPrintLengthPrefix:
.40a2	aa		tax				tax 								; A = 0 = don't case convert.
.40a3	98		tya				tya
.40a4	48		pha				pha
.40a5	a0 00		ldy #$00			ldy 	#0 							; get string length = chars to print.
.40a7	b1 2a		lda ($2a),y			lda 	(temp0),y
.40a9	8d 16 0d	sta $0d16			sta 	tPrintCount
.40ac	f0 1b		beq $40c9			beq 	_DTPLPExit 					; empty string
.40ae					_DTPLPLoop:
.40ae	c8		iny				iny 								; get next.
.40af	b1 2a		lda ($2a),y			lda 	(temp0),y
.40b1	29 7f		and #$7f			and 	#$7F
.40b3	e0 00		cpx #$00			cpx 	#0 							; skip if not case converting
.40b5	f0 0a		beq $40c1			beq 	_DTPLPNoCase
.40b7	c9 41		cmp #$41			cmp 	#"A" 						; if converting UC -> LC
.40b9	90 06		bcc $40c1			bcc 	_DTPLPNoCase
.40bb	c9 5b		cmp #$5b			cmp 	#"Z"+1
.40bd	b0 02		bcs $40c1			bcs 	_DTPLPNoCase
.40bf	49 20		eor #$20			eor 	#"A"^"a"
.40c1					_DTPLPNoCase
.40c1	20 cc 40	jsr $40cc			jsr 	ListOutputCharacter 		; call handler
.40c4	ce 16 0d	dec $0d16			dec 	tPrintCount 				; do all the characters
.40c7	d0 e5		bne $40ae			bne 	_DTPLPLoop
.40c9					_DTPLPExit:
.40c9	68		pla				pla
.40ca	a8		tay				tay
.40cb	60		rts				rts
.40cc					ListOutputCharacter:
.40cc	85 32		sta $32				sta 	tempShort
.40ce	48		pha				pha
.40cf	8a		txa				txa
.40d0	48		pha				pha
.40d1	98		tya				tya
.40d2	48		pha				pha
.40d3	a5 32		lda $32				lda 	tempShort 					; convert ASCII 6 bit (0-31) to 7 bit.
.40d5	c9 20		cmp #$20			cmp 	#32
.40d7	b0 0c		bcs $40e5			bcs		_LOCHiBit
.40d9	09 40		ora #$40			ora 	#64 						; conversion
.40db	c9 40		cmp #$40			cmp 	#64							; make l/c
.40dd	f0 06		beq $40e5			beq 	_LOCHiBit
.40df	c9 5b		cmp #$5b			cmp 	#65+26
.40e1	b0 02		bcs $40e5			bcs 	_LOCHiBit
.40e3	69 20		adc #$20			adc 	#32
.40e5					_LOCHiBit:
.40e5	20 ee 40	jsr $40ee			jsr 	_LOCCallVector				; call o/p handler routine
.40e8	68		pla				pla
.40e9	a8		tay				tay
.40ea	68		pla				pla
.40eb	aa		tax				tax
.40ec	68		pla				pla
.40ed					_LOCExit:
.40ed	60		rts				rts
.40ee					_LOCCallVector:
.40ee	6c 12 0d	jmp ($0d12)			jmp 	(deTokeniseVector)
.40f1					deTokenPrint:
.40f1	c9 00		cmp #$00			cmp 	#0 							; if bit 7 sets ink colour
.40f3	30 06		bmi $40fb			bmi 	_dtpInk
.40f5	a2 16		ldx #$16		ldx	#22
.40f7	20 f6 14	jsr $14f6		jsr	deviceHandler
.40fa	60		rts				rts
.40fb	c9 ff		cmp #$ff	_dtpInk:cmp 	#255 						; e.g. herhe, get ink and set it
.40fd	f0 08		beq $4107			beq 	_dtpCR						; except $FF => CRLF
.40ff	29 07		and #$07			and 	#7
.4101	a2 08		ldx #$08		ldx	#8
.4103	20 f6 14	jsr $14f6		jsr	deviceHandler
.4106	60		rts				rts
.4107					_dtpCR:
.4107	a2 06		ldx #$06		ldx	#6
.4109	20 f6 14	jsr $14f6		jsr	deviceHandler
.410c	60		rts				rts
.410d					DTSwitchMode:
.410d	cd 14 0d	cmp $0d14			cmp 	LastCharacterClass 			; if changed, update character class
.4110	f0 04		beq $4116			beq 	_DTSMNoChange
.4112	8d 14 0d	sta $0d14			sta 	LastCharacterClass
.4115					_DTSMExit:
.4115	60		rts				rts
.4116					_DTSMNoChange:
.4116	c9 01		cmp #$01			cmp 	#1 							; if didn't change to punctuation, two identifiers so we
.4118	f0 fb		beq $4115			beq 	_DTSMExit 					; need a space.
.411a	a9 20		lda #$20			lda 	#" "
.411c	4c cc 40	jmp $40cc			jmp 	ListOutputCharacter

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/detokenise/identifier.asm

.411f					DTIdentifier:
.411f	a9 00		lda #$00			lda 	#0 							; now text, may need spaces
.4121	20 0d 41	jsr $410d			jsr 	DTSwitchMode
.4124	a9 87		lda #$87			lda 	#LTYIdentifier
.4126	20 cc 40	jsr $40cc			jsr 	ListOutputCharacter
.4129					_DTILoop:
.4129	b1 28		lda ($28),y			lda 	(codePtr),y 				; output main bit of identifier.
.412b	c9 2d		cmp #$2d			cmp 	#"-"						; make - back to _
.412d	d0 02		bne $4131			bne 	_DTINotUS
.412f	a9 5f		lda #$5f			lda 	#"_"
.4131					_DTINotUS:
.4131	20 cc 40	jsr $40cc			jsr 	ListOutputCharacter
.4134	c8		iny				iny
.4135	b1 28		lda ($28),y			lda 	(codePtr),y 				; until end identifier marker.
.4137	c9 3a		cmp #$3a			cmp 	#$3A
.4139	90 ee		bcc $4129			bcc 	_DTILoop
.413b	c8		iny				iny
.413c	c9 3a		cmp #$3a			cmp 	#$3A 						; is it integer non array
.413e	f0 25		beq $4165			beq 	_DTIExit 					; no postfix.
.4140	48		pha				pha
.4141	a9 01		lda #$01			lda  	#1 							; it ends in punctuation
.4143	8d 14 0d	sta $0d14			sta 	LastCharacterClass
.4146	a9 82		lda #$82			lda 	#LTYPunctuation
.4148	20 cc 40	jsr $40cc			jsr 	ListOutputCharacter
.414b	68		pla				pla
.414c	c9 3b		cmp #$3b			cmp 	#$3B
.414e	f0 10		beq $4160			beq 	_DTIArray
.4150	4a		lsr a				lsr 	a 							; array flag in C
.4151	08		php				php
.4152	49 1e		eor #$1e			eor 	#$3C/2 						; check if $
.4154	f0 02		beq $4158			beq 	_DTIDollar
.4156	a9 07		lda #$07			lda 	#"$"^"#" 					; this if #, 0 if $
.4158					_DTIDollar:
.4158	49 24		eor #$24			eor 	#"$"
.415a	20 cc 40	jsr $40cc			jsr 	ListOutputCharacter
.415d	28		plp				plp
.415e	90 05		bcc $4165			bcc 	_DTIExit
.4160					_DTIArray:
.4160	a9 28		lda #$28			lda 	#"("
.4162	20 cc 40	jsr $40cc			jsr 	ListOutputCharacter
.4165					_DTIExit:
.4165	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/detokenise/token.asm

.4166					DTDecodeToken:
.4166	a2 00		ldx #$00			ldx 	#0 							; table number to use
.4168	b1 28		lda ($28),y			lda 	(codePtr),y
.416a	c9 84		cmp #$84			cmp 	#$84
.416c	b0 05		bcs $4173			bcs 	_DTNotShift
.416e	29 03		and #$03			and 	#3 							; get the shift 1..3
.4170	0a		asl a				asl 	a 							; put 2 x in X
.4171	aa		tax				tax
.4172	c8		iny				iny
.4173					_DTNotShift:
.4173	bd 75 44	lda $4475,x			lda 	TokenTableAddress,x 		; get the token table to use to decode it.
.4176	85 2a		sta $2a				sta 	temp0 						; point into temp0
.4178	bd 76 44	lda $4476,x			lda 	TokenTableAddress+1,x
.417b	85 2b		sta $2b				sta 	temp0+1
.417d	b1 28		lda ($28),y			lda 	(codePtr),y 				; get the token value.
.417f	c8		iny				iny 								; consume it.
.4180	aa		tax				tax
.4181	98		tya				tya
.4182	48		pha				pha
.4183					_DTFindText:
.4183	e0 86		cpx #$86			cpx 	#$86 						; finished ?
.4185	f0 11		beq $4198			beq 	_DTFoundText
.4187	ca		dex				dex
.4188	a0 00		ldy #$00			ldy 	#0 							; add length+1 to temp0
.418a	38		sec				sec
.418b	b1 2a		lda ($2a),y			lda 	(temp0),y
.418d	65 2a		adc $2a				adc 	temp0
.418f	85 2a		sta $2a				sta 	temp0
.4191	90 f0		bcc $4183			bcc 	_DTFindText
.4193	e6 2b		inc $2b				inc 	temp0+1
.4195	4c 83 41	jmp $4183			jmp 	_DTFindText
.4198					_DTFoundText:
.4198	a0 01		ldy #$01			ldy 	#1 							; get first character
.419a	b1 2a		lda ($2a),y			lda 	(temp0),y
.419c	29 7f		and #$7f			and 	#$7F 						; will have bit 7 set.
.419e	c9 41		cmp #$41			cmp 	#"A" 						; check for punctuation.
.41a0	90 11		bcc $41b3			bcc 	_DTIsPunctuation
.41a2	c9 5b		cmp #$5b			cmp 	#"Z"+1
.41a4	b0 0d		bcs $41b3			bcs 	_DTIsPunctuation
.41a6	a9 00		lda #$00			lda 	#0 							; now text, may need spaces
.41a8	20 0d 41	jsr $410d			jsr 	DTSwitchMode
.41ab	a9 83		lda #$83			lda 	#LTYKeyword
.41ad	20 cc 40	jsr $40cc			jsr 	ListOutputCharacter
.41b0	4c bd 41	jmp $41bd			jmp 	_DTPrint
.41b3					_DTIsPunctuation:
.41b3	a9 01		lda #$01			lda 	#1 							; now punctuation, may need spaces
.41b5	20 0d 41	jsr $410d			jsr 	DTSwitchMode
.41b8	a9 82		lda #$82			lda 	#LTYPunctuation
.41ba	20 cc 40	jsr $40cc			jsr 	ListOutputCharacter
.41bd					_DTPrint:
.41bd	a9 01		lda #$01			lda 	#1 							; fix case.
.41bf	20 a2 40	jsr $40a2			jsr 	DTPrintLengthPrefix 		; print it out.
.41c2	a0 00		ldy #$00			ldy 	#0
.41c4	b1 2a		lda ($2a),y			lda 	(temp0),y
.41c6	a8		tay				tay
.41c7	b1 2a		lda ($2a),y			lda 	(temp0),y
.41c9	29 7f		and #$7f			and 	#$7F 						; will have bit 7 set.
.41cb	c9 41		cmp #$41			cmp 	#"A" 						; check for punctuation.
.41cd	90 04		bcc $41d3			bcc 	_DTIsNowPunctuation
.41cf	c9 5b		cmp #$5b			cmp 	#"Z"+1
.41d1	90 05		bcc $41d8			bcc 	_DTPExit
.41d3					_DTIsNowPunctuation:
.41d3	a9 01		lda #$01			lda 	#1
.41d5	8d 14 0d	sta $0d14			sta		LastCharacterClass
.41d8					_DTPExit:
.41d8	68		pla				pla
.41d9	a8		tay				tay
.41da	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/search.asm

.0d17					currentSet:
>0d17							.fill 	1
.41db					TokenSearch:
.41db	8a		txa				txa
.41dc	48		pha				pha
.41dd	98		tya				tya
.41de	48		pha				pha
.41df	a9 00		lda #$00			lda 	#0
.41e1	8d 17 0d	sta $0d17			sta 	currentSet
.41e4					_TSLoop:
.41e4	ad 17 0d	lda $0d17			lda 	currentSet 					; 2 x currentset in X
.41e7	0a		asl a				asl 	a
.41e8	aa		tax				tax
.41e9	bd 75 44	lda $4475,x			lda 	TokenTableAddress,x 		; set temp0 to the table address
.41ec	85 2a		sta $2a				sta 	temp0
.41ee	bd 76 44	lda $4476,x			lda 	TokenTableAddress+1,x
.41f1	85 2b		sta $2b				sta 	temp0+1
.41f3	20 1a 42	jsr $421a			jsr 	TokenSearchOne 				; search one table
.41f6	b0 0d		bcs $4205			bcs 	_TSFound 					; found a token.
.41f8	ee 17 0d	inc $0d17			inc 	currentSet 					; next set
.41fb	ad 17 0d	lda $0d17			lda 	currentSet
.41fe	c9 04		cmp #$04			cmp 	#4
.4200	d0 e2		bne $41e4			bne 	_TSLoop 					; back if not done all four.
.4202	18		clc				clc 								; clear carry and exit
.4203	90 10		bcc $4215			bcc 	_TSExit
.4205					_TSFound:
.4205	48		pha				pha 								; save token
.4206	ad 17 0d	lda $0d17			lda 	currentSet					; if set zero no shift
.4209	f0 05		beq $4210			beq 	_TSNoShift
.420b	09 80		ora #$80			ora 	#$80 						; Write as $81-$83
.420d	20 cb 42	jsr $42cb			jsr 	TokenWrite
.4210					_TSNoShift:
.4210	68		pla				pla 								; get token back
.4211	20 cb 42	jsr $42cb			jsr 	TokenWrite 					; write it
.4214	38		sec				sec 								; carry set indicating success
.4215					_TSExit:
.4215	68		pla				pla
.4216	a8		tay				tay
.4217	68		pla				pla
.4218	aa		tax				tax
.4219	60		rts				rts
.421a					TokenSearchOne:
.421a	a2 86		ldx #$86			ldx 	#$86 						; current token being tested.
.421c					_TSOLoop:
.421c	a0 00		ldy #$00			ldy 	#0
.421e	b1 2a		lda ($2a),y			lda 	(temp0),y 					; get length of token
.4220	f0 26		beq $4248			beq 	_TSOFail 					; if zero, end of table
.4222	cd cf 0a	cmp $0acf			cmp 	convertBuffer 				; length is the same, compare the text matches.
.4225	f0 11		beq $4238			beq 	_TSOCheckText
.4227					_TSONext:
.4227	e8		inx				inx 								; bump token
.4228	a0 00		ldy #$00			ldy 	#0							; get length
.422a	b1 2a		lda ($2a),y			lda 	(temp0),y
.422c	38		sec				sec
.422d	65 2a		adc $2a				adc 	temp0 						; add to temp0 + 1
.422f	85 2a		sta $2a				sta 	temp0
.4231	90 e9		bcc $421c			bcc 	_TSOLoop
.4233	e6 2b		inc $2b				inc 	temp0+1
.4235	4c 1c 42	jmp $421c			jmp 	_TSOLoop
.4238					_TSOCheckText:
.4238	a8		tay				tay 								; compare length downto 1.
.4239					_TSOCheckLoop:
.4239	b1 2a		lda ($2a),y			lda 	(temp0),y 					; use EOR to compare
.423b	59 cf 0a	eor $0acf,y			eor 	convertBuffer,y
.423e	29 7f		and #$7f			and 	#$7F 						; ignore bit 7
.4240	d0 e5		bne $4227			bne 	_TSONext 					; different goto next.
.4242	88		dey				dey 								; do all
.4243	d0 f4		bne $4239			bne 	_TSOCheckLoop
.4245	8a		txa				txa 								; return token in A and carry set
.4246	38		sec				sec
.4247	60		rts				rts
.4248					_TSOFail:
.4248	18		clc				clc
.4249	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/test.asm

.424a					TokTest:
.424a	a2 ff		ldx #$ff				ldx 	#$FF
.424c	9a		txs					txs
.424d	a9 6a		lda #$6a			lda 	#(TokenText1) & $FF
.424f	85 28		sta $28				sta 	codePtr
.4251	a9 42		lda #$42			lda 	#(TokenText1) >> 8
.4253	85 29		sta $29				sta 	1+(codePtr)
.4255	20 6a 42	jsr $426a				jsr 	Tokenise
.4258	a2 00		ldx #$00	TokStop:	ldx 	#0 					; compare vs precalculated result
.425a	bd 6a 42	lda $426a,x	_TokCheck:	lda 	TokenBytes1,x
.425d	dd 1b 0d	cmp $0d1b,x				cmp 	tokenBuffer,x
.4260	d0 fe		bne $4260	_TokFail:	bne 	_TokFail	 		; error.
.4262	e8		inx					inx
.4263	c9 80		cmp #$80				cmp 	#$80
.4265	d0 f3		bne $425a				bne 	_TokCheck
.4267	4c ff ff	jmp $ffff				jmp 	$FFFF 				; successfully tokenised then quit.

;******  Processing file: tokeniser/tokenise/../../generated/toktest.inc

.426a					TokenText1:
.426a					TokenBytes1:

;******  Return to file: tokeniser/tokenise/test.asm


;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokenise.asm

.0d18					tokenHeader:
>0d18							.fill 	3
.0d1b					tokenBuffer:
>0d1b							.fill 	256
.0e1b					tokenBufferIndex:
>0e1b							.fill 	1
.426a					Tokenise:
.426a	20 e4 42	jsr $42e4			jsr 	TokeniseMakeASCIIZ 			; convert to ASCIIZ string.
.426d					TokeniseASCIIZ:
.426d	20 f5 42	jsr $42f5			jsr 	TokeniseFixCase 			; remove controls and lower case outside quotes.
.4270	a9 00		lda #$00			lda 	#0 							; reset the token buffer index
.4272	8d 1b 0e	sta $0e1b			sta 	tokenBufferIndex
.4275	a8		tay				tay 								; start pointer
.4276	a9 80		lda #$80			lda 	#$80 						; empty token buffer ($80 ends it)
.4278	8d 1b 0d	sta $0d1b			sta 	tokenBuffer
.427b					_TokLoop:
.427b	b1 28		lda ($28),y			lda 	(codePtr),y 				; get next character
.427d	f0 46		beq $42c5			beq 	_TokExit 					; if zero, then exit.
.427f	c8		iny				iny 								; skip over spaces.
.4280	c9 20		cmp #$20			cmp 	#" "
.4282	f0 f7		beq $427b			beq 	_TokLoop
.4284	88		dey				dey 								; point back to character.
.4285	c9 26		cmp #$26			cmp 	#"&"						; Hexadecimal constant.
.4287	f0 18		beq $42a1			beq 	_TokHexConst
.4289	c9 22		cmp #$22			cmp 	#'"'						; Quoted String
.428b	f0 23		beq $42b0			beq 	_TokQString
.428d	c9 5b		cmp #$5b			cmp 	#"Z"+1 						; > 'Z' is punctuation
.428f	b0 26		bcs $42b7			bcs 	_TokPunctuation
.4291	c9 41		cmp #$41			cmp 	#"A" 						; A..Z identifier
.4293	b0 29		bcs $42be			bcs 	_TokIdentifier
.4295	c9 3a		cmp #$3a			cmp 	#"9"+1
.4297	b0 1e		bcs $42b7			bcs 	_TokPunctuation 			; between 9 and A exclusive, punctuation
.4299	c9 30		cmp #$30			cmp 	#"0"
.429b	90 1a		bcc $42b7			bcc 	_TokPunctuation 			; < 0, punctuation.
.429d	a9 0a		lda #$0a			lda 	#10  						; 0..9 constant in base 10.
.429f	d0 08		bne $42a9			bne 	_TokConst
.42a1					_TokHexConst:
.42a1	c8		iny				iny									; consume token.
.42a2	a9 c5		lda #$c5			lda 	#TKW_AMP 					; Write ampersand token out
.42a4	20 cb 42	jsr $42cb			jsr 	TokenWrite
.42a7	a9 10		lda #$10			lda 	#16
.42a9					_TokConst:
.42a9	20 b3 43	jsr $43b3			jsr 	TokeniseInteger
.42ac	b0 cd		bcs $427b			bcs 	_TokLoop
.42ae	90 18		bcc $42c8			bcc 	_TokFail
.42b0					_TokQString:
.42b0	20 49 44	jsr $4449			jsr 	TokeniseString
.42b3	b0 c6		bcs $427b			bcs 	_TokLoop
.42b5	90 11		bcc $42c8			bcc 	_TokFail
.42b7					_TokPunctuation:
.42b7	20 28 44	jsr $4428			jsr 	TokenisePunctuation
.42ba	b0 bf		bcs $427b			bcs 	_TokLoop
.42bc	90 0a		bcc $42c8			bcc 	_TokFail
.42be					_TokIdentifier:
.42be	20 24 43	jsr $4324			jsr 	TokeniseIdentifier
.42c1	b0 b8		bcs $427b			bcs 	_TokLoop
.42c3	90 03		bcc $42c8			bcc 	_TokFail
.42c5					_TokExit:
.42c5	a9 01		lda #$01			lda 	#1
.42c7	60		rts				rts
.42c8					_TokFail:
.42c8	a9 00		lda #$00			lda 	#0
.42ca	60		rts				rts
.42cb					TokenWrite:
.42cb	85 32		sta $32				sta 	tempShort 					; save XA
.42cd	48		pha				pha
.42ce	8a		txa				txa
.42cf	48		pha				pha
.42d0	a5 32		lda $32				lda 	tempShort
.42d2	ae 1b 0e	ldx $0e1b			ldx 	tokenBufferIndex 			; geet index
.42d5	9d 1b 0d	sta $0d1b,x			sta 	tokenBuffer,x 				; write byte to buffer
.42d8	a9 80		lda #$80			lda 	#TOK_EOL 					; pre-emptively write EOL marker after
.42da	9d 1c 0d	sta $0d1c,x			sta 	tokenBuffer+1,x
.42dd	ee 1b 0e	inc $0e1b			inc 	tokenBufferIndex 			; bump index
.42e0	68		pla				pla
.42e1	aa		tax				tax
.42e2	68		pla				pla
.42e3	60		rts				rts
.42e4					TokeniseMakeASCIIZ:
.42e4	a0 00		ldy #$00			ldy 	#0							; get length of string.
.42e6	b1 28		lda ($28),y			lda 	(codePtr),y
.42e8	a8		tay				tay
.42e9	c8		iny				iny 								; +1, the NULL goes here.
.42ea	a9 00		lda #$00			lda 	#0
.42ec	91 28		sta ($28),y			sta 	(codePtr),y 				; write the trailing NULL.
.42ee	e6 28		inc $28				inc 	codePtr 					; bump the pointer.
.42f0	d0 02		bne $42f4			bne 	_TMKAExit
.42f2	e6 29		inc $29				inc 	codePtr+1
.42f4					_TMKAExit:
.42f4	60		rts				rts
.42f5					TokeniseFixCase:
.42f5	a0 00		ldy #$00			ldy 	#0 							; position in buffer.
.42f7	a2 01		ldx #$01			ldx 	#1 							; bit 0 of this is 'in quotes'
.42f9					_TFCFlipQ:
.42f9	8a		txa				txa
.42fa	49 01		eor #$01			eor 	#1
.42fc	aa		tax				tax
.42fd					_TFCLoop:
.42fd	b1 28		lda ($28),y			lda 	(codePtr),y 				; get character
.42ff	f0 22		beq $4323			beq 	_TFCExit 					; if zero exit.
.4301	c9 20		cmp #$20			cmp 	#32 						; if control
.4303	90 1a		bcc $431f			bcc 	_TFCControl
.4305	c8		iny				iny 								; preconsume
.4306	c9 22		cmp #$22			cmp 	#'"'
.4308	f0 ef		beq $42f9			beq 	_TFCFlipQ
.430a	c9 61		cmp #$61			cmp 	#"a"						; check if L/C
.430c	90 ef		bcc $42fd			bcc 	_TFCLoop
.430e	c9 7b		cmp #$7b			cmp 	#"z"+1
.4310	b0 eb		bcs $42fd			bcs 	_TFCLoop
.4312	e0 00		cpx #$00			cpx 	#0 							; in quotes, if so, leave alone.
.4314	d0 e7		bne $42fd			bne 	_TFCLoop
.4316	88		dey				dey
.4317	49 20		eor #$20			eor 	#"A"^"a"					; make U/C
.4319					_TFCWrite:
.4319	91 28		sta ($28),y			sta 	(codePtr),y
.431b	c8		iny				iny
.431c	4c fd 42	jmp $42fd			jmp 	_TFCLoop
.431f					_TFCControl:
.431f	a9 20		lda #$20			lda 	#" "
.4321	d0 f6		bne $4319			bne 	_TFCWrite
.4323					_TFCExit:
.4323	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokident.asm

.4324					TokeniseIdentifier:
.4324	a2 00		ldx #$00			ldx 	#0
.4326					_TICopyID:
.4326	b1 28		lda ($28),y			lda 	(codePtr),y					; get characters
.4328	c9 5f		cmp #$5f			cmp 	#"_" 						; underscore converted to minus internally.
.432a	f0 16		beq $4342			beq 	_TICopyUnderscore
.432c	c9 2e		cmp #$2e			cmp 	#"."
.432e	f0 14		beq $4344			beq 	_TICopyIn
.4330	c9 30		cmp #$30			cmp 	#"0"
.4332	90 1b		bcc $434f			bcc 	_TIEndCopy
.4334	c9 3a		cmp #$3a			cmp 	#"9"+1
.4336	90 0c		bcc $4344			bcc 	_TICopyIn
.4338	c9 41		cmp #$41			cmp 	#"A"
.433a	90 13		bcc $434f			bcc 	_TIEndCopy
.433c	c9 5b		cmp #$5b			cmp 	#"Z"+1
.433e	b0 0f		bcs $434f			bcs		_TIEndCopy
.4340	90 02		bcc $4344			bcc 	_TICopyIn
.4342					_TICopyUnderScore:
.4342	a9 2d		lda #$2d			lda 	#"-"						; _ is mapped to -
.4344					_TICopyIn:
.4344	e8		inx				inx 								; write into buffer in 7 bit ASCII form
.4345	9d cf 0a	sta $0acf,x			sta 	convertBuffer,x
.4348	8e cf 0a	stx $0acf			stx 	convertBuffer
.434b	c8		iny				iny 								; next character
.434c	4c 26 43	jmp $4326			jmp 	_TICopyID 					; loop round
.434f					_TIEndCopy:
.434f	a9 24		lda #$24			lda 	#"$"
.4351	20 a6 43	jsr $43a6			jsr 	TIDCheckCopy
.4354	a9 23		lda #$23			lda 	#"#"
.4356	20 a6 43	jsr $43a6			jsr 	TIDCheckCopy
.4359	a9 28		lda #$28			lda 	#"("
.435b	20 a6 43	jsr $43a6			jsr 	TIDCheckCopy
.435e	20 db 41	jsr $41db			jsr 	TokenSearch 				; is it a token
.4361	b0 41		bcs $43a4			bcs 	_TIExit 					; if so, then exit.
.4363	98		tya				tya
.4364	48		pha				pha
.4365	a0 3a		ldy #$3a			ldy 	#$3A 						; default type.
.4367	ae cf 0a	ldx $0acf			ldx 	convertBuffer 				; is last character (
.436a	bd cf 0a	lda $0acf,x			lda 	convertBuffer,x
.436d	c9 28		cmp #$28			cmp 	#"("
.436f	d0 02		bne $4373			bne 	_TINotArray
.4371	ca		dex				dex 								; yes, remove it and convert to array.
.4372	c8		iny				iny
.4373					_TINotArray:
.4373	bd cf 0a	lda $0acf,x			lda 	convertBuffer,x 			; check for $
.4376	c9 24		cmp #$24			cmp 	#"$"
.4378	d0 03		bne $437d			bne 	_TINotString
.437a	ca		dex				dex
.437b	c8		iny				iny
.437c	c8		iny				iny
.437d					_TINotString:
.437d	bd cf 0a	lda $0acf,x			lda 	convertBuffer,x 			; check for #
.4380	c9 23		cmp #$23			cmp 	#"#"
.4382	d0 05		bne $4389			bne 	_TINotFloat
.4384	ca		dex				dex
.4385	c8		iny				iny
.4386	c8		iny				iny
.4387	c8		iny				iny
.4388	c8		iny				iny
.4389					_TINotFloat:
.4389	e8		inx				inx 								; write end marker for identifier.
.438a	98		tya				tya
.438b	9d cf 0a	sta $0acf,x			sta 	convertBuffer,x
.438e	8e cf 0a	stx $0acf			stx 	convertBuffer 				; update length.
.4391	a2 01		ldx #$01			ldx 	#1
.4393					_TIOutput:
.4393	bd cf 0a	lda $0acf,x			lda 	convertBuffer,x
.4396	29 3f		and #$3f			and 	#$3F
.4398	48		pha				pha
.4399	20 cb 42	jsr $42cb			jsr 	TokenWrite
.439c	e8		inx				inx
.439d	68		pla				pla
.439e	c9 3a		cmp #$3a			cmp 	#$3A
.43a0	90 f1		bcc $4393			bcc 	_TIOutput
.43a2	68		pla				pla
.43a3	a8		tay				tay
.43a4					_TIExit:
.43a4	38		sec				sec 								; this can't fail.
.43a5	60		rts				rts
.43a6					TIDCheckCopy:
.43a6	d1 28		cmp ($28),y			cmp 	(codePtr),y
.43a8	d0 08		bne $43b2			bne 	_TIDCCExit
.43aa	e8		inx				inx
.43ab	9d cf 0a	sta $0acf,x			sta 	convertBuffer,x
.43ae	8e cf 0a	stx $0acf			stx 	convertBuffer
.43b1	c8		iny				iny
.43b2					_TIDCCExit:
.43b2	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokinteger.asm

.43b3					TokeniseInteger:
.43b3	85 2c		sta $2c				sta 	temp1 						; save base
.43b5	a2 00		ldx #$00			ldx 	#0							; count of chars so far
.43b7	8e cf 0a	stx $0acf			stx 	convertBuffer
.43ba					_TIGetChars:
.43ba	b1 28		lda ($28),y			lda 	(codePtr),y 				; check character is numeric
.43bc	c9 30		cmp #$30			cmp 	#"0"
.43be	90 1f		bcc $43df			bcc 	_TIEndGet
.43c0	c9 3a		cmp #$3a			cmp 	#"9"+1
.43c2	90 10		bcc $43d4			bcc 	_TIHaveChar
.43c4	a5 2c		lda $2c				lda 	temp1 						; fail if not hex mode
.43c6	c9 0a		cmp #$0a			cmp 	#10
.43c8	f0 15		beq $43df			beq 	_TIEndGet
.43ca	b1 28		lda ($28),y			lda 	(codePtr),y 				; check legitimate hex.
.43cc	c9 41		cmp #$41			cmp 	#"A"
.43ce	90 0f		bcc $43df			bcc 	_TIEndGet
.43d0	c9 5b		cmp #$5b			cmp 	#"Z"+1
.43d2	b0 0b		bcs $43df			bcs 	_TIEndGet
.43d4					_TIHaveChar:
.43d4	e8		inx				inx 								; write into buffer.
.43d5	8e cf 0a	stx $0acf			stx 	convertBuffer
.43d8	9d cf 0a	sta $0acf,x			sta 	convertBuffer,x
.43db	c8		iny				iny 								; next char
.43dc	4c ba 43	jmp $43ba			jmp 	_TIGetChars
.43df					_TIEndGet:
.43df	e0 00		cpx #$00			cpx 	#0 							; no char acquired.
.43e1	f0 1c		beq $43ff			beq 	_TIFail
.43e3	98		tya				tya
.43e4	48		pha				pha
.43e5	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.43e7	85 2a		sta $2a				sta 	temp0
.43e9	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.43eb	85 2b		sta $2b				sta 	1+(temp0)
.43ed	a9 00		lda #$00			lda 	#0 							; stack level 0
.43ef	a4 2c		ldy $2c				ldy 	temp1 						; base Y
.43f1	a2 1a		ldx #$1a		ldx	#26
.43f3	20 e6 3c	jsr $3ce6		jsr	mainHandler
.43f6	68		pla				pla
.43f7	a8		tay				tay
.43f8	90 05		bcc $43ff			bcc 	_TIFail 					; didn't convert.
.43fa	20 01 44	jsr $4401			jsr 	TIRecursiveOut 				; recursive output ?
.43fd	38		sec				sec
.43fe	60		rts				rts
.43ff					_TIFail:
.43ff	18		clc				clc
.4400	60		rts				rts
.4401					TIRecursiveOut:
.4401	a5 98		lda $98				lda 	esInt0 						; get value to output after possible recursion
.4403	29 3f		and #$3f			and 	#$3F
.4405	09 40		ora #$40			ora 	#$40
.4407	48		pha				pha
.4408	a5 98		lda $98				lda 	esInt0 						; are we recursing ?
.440a	29 c0		and #$c0			and 	#$C0
.440c	05 a0		ora $a0				ora 	esInt1
.440e	05 a8		ora $a8				ora 	esInt2
.4410	05 b0		ora $b0				ora 	esInt3
.4412	f0 10		beq $4424			beq 	_TIRONoRecursion
.4414	a2 06		ldx #$06			ldx 	#6 							; shift right x 6
.4416					_TIROShift:
.4416	46 b0		lsr $b0				lsr 	esInt3
.4418	66 a8		ror $a8				ror 	esInt2
.441a	66 a0		ror $a0				ror 	esInt1
.441c	66 98		ror $98				ror 	esInt0
.441e	ca		dex				dex
.441f	d0 f5		bne $4416			bne 	_TIROShift
.4421	20 01 44	jsr $4401			jsr 	TIRecursiveOut 				; call recursively
.4424					_TIRONoRecursion:
.4424	68		pla				pla 								; pull the old bit.
.4425	4c cb 42	jmp $42cb			jmp 	TokenWrite

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokpunct.asm

.4428					TokenisePunctuation:
.4428	b1 28		lda ($28),y			lda	 	(codePtr),y 				; copy next 2 chars into convertBuffer
.442a	8d d0 0a	sta $0ad0			sta 	convertBuffer+1
.442d	c8		iny				iny
.442e	b1 28		lda ($28),y			lda 	(codePtr),y
.4430	8d d1 0a	sta $0ad1			sta 	convertBuffer+2
.4433	c8		iny				iny 								; Y is +2
.4434	a9 02		lda #$02			lda 	#2 							; 2 character string.
.4436	8d cf 0a	sta $0acf			sta 	convertBuffer
.4439	20 db 41	jsr $41db			jsr 	TokenSearch 				; search for that token.
.443c	b0 0a		bcs $4448			bcs 	_TIFound
.443e	ce cf 0a	dec $0acf			dec 	convertBuffer 				; make it a 1 character string
.4441	88		dey				dey 								; Y is now +1
.4442	20 db 41	jsr $41db			jsr 	TokenSearch 				; search for that token.
.4445	b0 01		bcs $4448			bcs 	_TIFound
.4447	88		dey				dey 								; Y is now +0, carry clear indicating failure.
.4448					_TIFound:
.4448	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokstring.asm

.4449					TokeniseString:
.4449	c8		iny				iny 								; skip opening quote
.444a	a2 ff		ldx #$ff			ldx 	#255 						; count length of string.
.444c	84 2a		sty $2a				sty 	temp0 						; save start.
.444e					_TSGetLength:
.444e	b1 28		lda ($28),y			lda 	(codePtr),y 				; get next
.4450	f0 21		beq $4473			beq 	_TSFail						; end of line, fail
.4452	c8		iny				iny
.4453	e8		inx				inx
.4454	c9 22		cmp #$22			cmp 	#'"' 						; until end quote found.
.4456	d0 f6		bne $444e			bne 	_TSGetLength
.4458	a9 85		lda #$85			lda 	#TOK_STR 					; write string token out
.445a	20 cb 42	jsr $42cb			jsr 	TokenWrite
.445d	8a		txa				txa 								; output length
.445e	20 cb 42	jsr $42cb			jsr 	TokenWrite
.4461	a4 2a		ldy $2a				ldy 	temp0 						; get original position
.4463	e0 00		cpx #$00			cpx 	#0 							; check ended
.4465	f0 09		beq $4470			beq 	_TSExit
.4467					_TSOutput:
.4467	b1 28		lda ($28),y			lda 	(codePtr),y					; output character
.4469	20 cb 42	jsr $42cb			jsr 	TokenWrite
.446c	c8		iny				iny
.446d	ca		dex				dex
.446e	d0 f7		bne $4467			bne 	_TSOutput
.4470					_TSExit:
.4470	c8		iny				iny 								; skip ending quote
.4471	38		sec				sec 								; return CS.
.4472	60		rts				rts
.4473					_TSFail:
.4473	18		clc				clc
.4474	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokentext.asm

.4475					TokenTableAddress:
>4475	7d 44						.word 	Group0Text
>4477	4b 46						.word 	Group1Text
>4479	98 47						.word 	Group2Text
>447b	e8 47						.word 	Group3Text

;******  Processing file: tokeniser/../generated/tokentext0.inc

.447d					Group0Text:
>447d	03 41 4e c4				.byte $03,$41,$4e,$c4                  ; $86 and
>4481	02 4f d2				.byte $02,$4f,$d2                      ; $87 or
>4484	03 58 4f d2				.byte $03,$58,$4f,$d2                  ; $88 xor
>4488	02 3e bd				.byte $02,$3e,$bd                      ; $89 >=
>448b	02 3c bd				.byte $02,$3c,$bd                      ; $8a <=
>448e	01 be					.byte $01,$be                          ; $8b >
>4490	01 bc					.byte $01,$bc                          ; $8c <
>4492	01 bd					.byte $01,$bd                          ; $8d =
>4494	02 3c be				.byte $02,$3c,$be                      ; $8e <>
>4497	01 ab					.byte $01,$ab                          ; $8f +
>4499	01 ad					.byte $01,$ad                          ; $90 -
>449b	02 3e be				.byte $02,$3e,$be                      ; $91 >>
>449e	02 3c bc				.byte $02,$3c,$bc                      ; $92 <<
>44a1	01 aa					.byte $01,$aa                          ; $93 *
>44a3	01 af					.byte $01,$af                          ; $94 /
>44a5	03 4d 4f c4				.byte $03,$4d,$4f,$c4                  ; $95 mod
>44a9	01 de					.byte $01,$de                          ; $96 ^
>44ab	01 a1					.byte $01,$a1                          ; $97 !
>44ad	01 bf					.byte $01,$bf                          ; $98 ?
>44af	06 52 45 50 45 41 d4			.byte $06,$52,$45,$50,$45,$41,$d4      ; $99 repeat
>44b6	05 57 48 49 4c c5			.byte $05,$57,$48,$49,$4c,$c5          ; $9a while
>44bc	03 46 4f d2				.byte $03,$46,$4f,$d2                  ; $9b for
>44c0	02 49 c6				.byte $02,$49,$c6                      ; $9c if
>44c3	07 44 45 46 50 52 4f c3			.byte $07,$44,$45,$46,$50,$52,$4f,$c3  ; $9d defproc
>44cb	05 55 4e 54 49 cc			.byte $05,$55,$4e,$54,$49,$cc          ; $9e until
>44d1	04 57 45 4e c4				.byte $04,$57,$45,$4e,$c4              ; $9f wend
>44d6	04 4e 45 58 d4				.byte $04,$4e,$45,$58,$d4              ; $a0 next
>44db	04 54 48 45 ce				.byte $04,$54,$48,$45,$ce              ; $a1 then
>44e0	05 45 4e 44 49 c6			.byte $05,$45,$4e,$44,$49,$c6          ; $a2 endif
>44e6	07 45 4e 44 50 52 4f c3			.byte $07,$45,$4e,$44,$50,$52,$4f,$c3  ; $a3 endproc
>44ee	01 a8					.byte $01,$a8                          ; $a4 (
>44f0	04 4c 45 4e a8				.byte $04,$4c,$45,$4e,$a8              ; $a5 len(
>44f5	04 53 47 4e a8				.byte $04,$53,$47,$4e,$a8              ; $a6 sgn(
>44fa	04 41 42 53 a8				.byte $04,$41,$42,$53,$a8              ; $a7 abs(
>44ff	07 52 41 4e 44 4f 4d a8			.byte $07,$52,$41,$4e,$44,$4f,$4d,$a8  ; $a8 random(
>4507	04 50 41 47 c5				.byte $04,$50,$41,$47,$c5              ; $a9 page
>450c	04 54 52 55 c5				.byte $04,$54,$52,$55,$c5              ; $aa true
>4511	05 46 41 4c 53 c5			.byte $05,$46,$41,$4c,$53,$c5          ; $ab false
>4517	04 4d 49 4e a8				.byte $04,$4d,$49,$4e,$a8              ; $ac min(
>451c	04 4d 41 58 a8				.byte $04,$4d,$41,$58,$a8              ; $ad max(
>4521	04 53 59 53 a8				.byte $04,$53,$59,$53,$a8              ; $ae sys(
>4526	06 54 49 4d 45 52 a8			.byte $06,$54,$49,$4d,$45,$52,$a8      ; $af timer(
>452d	06 45 56 45 4e 54 a8			.byte $06,$45,$56,$45,$4e,$54,$a8      ; $b0 event(
>4534	04 47 45 54 a8				.byte $04,$47,$45,$54,$a8              ; $b1 get(
>4539	06 49 4e 4b 45 59 a8			.byte $06,$49,$4e,$4b,$45,$59,$a8      ; $b2 inkey(
>4540	06 41 4c 4c 4f 43 a8			.byte $06,$41,$4c,$4c,$4f,$43,$a8      ; $b3 alloc(
>4547	05 43 48 52 24 a8			.byte $05,$43,$48,$52,$24,$a8          ; $b4 chr$(
>454d	06 4c 45 46 54 24 a8			.byte $06,$4c,$45,$46,$54,$24,$a8      ; $b5 left$(
>4554	05 4d 49 44 24 a8			.byte $05,$4d,$49,$44,$24,$a8          ; $b6 mid$(
>455a	07 52 49 47 48 54 24 a8			.byte $07,$52,$49,$47,$48,$54,$24,$a8  ; $b7 right$(
>4562	05 53 54 52 24 a8			.byte $05,$53,$54,$52,$24,$a8          ; $b8 str$(
>4568	04 56 41 4c a8				.byte $04,$56,$41,$4c,$a8              ; $b9 val(
>456d	05 50 45 45 4b a8			.byte $05,$50,$45,$45,$4b,$a8          ; $ba peek(
>4573	05 44 45 45 4b a8			.byte $05,$44,$45,$45,$4b,$a8          ; $bb deek(
>4579	05 4c 45 45 4b a8			.byte $05,$4c,$45,$45,$4b,$a8          ; $bc leek(
>457f	04 41 53 43 a8				.byte $04,$41,$53,$43,$a8              ; $bd asc(
>4584	04 49 4e 54 a8				.byte $04,$49,$4e,$54,$a8              ; $be int(
>4589	06 46 4c 4f 41 54 a8			.byte $06,$46,$4c,$4f,$41,$54,$a8      ; $bf float(
>4590	06 49 53 56 41 4c a8			.byte $06,$49,$53,$56,$41,$4c,$a8      ; $c0 isval(
>4597	07 55 50 50 45 52 24 a8			.byte $07,$55,$50,$50,$45,$52,$24,$a8  ; $c1 upper$(
>459f	07 4c 4f 57 45 52 24 a8			.byte $07,$4c,$4f,$57,$45,$52,$24,$a8  ; $c2 lower$(
>45a7	01 c0					.byte $01,$c0                          ; $c3 @
>45a9	01 fe					.byte $01,$fe                          ; $c4 ~
>45ab	01 a6					.byte $01,$a6                          ; $c5 &
>45ad	05 47 45 54 24 a8			.byte $05,$47,$45,$54,$24,$a8          ; $c6 get$(
>45b3	07 49 4e 4b 45 59 24 a8			.byte $07,$49,$4e,$4b,$45,$59,$24,$a8  ; $c7 inkey$(
>45bb	03 4d 45 cd				.byte $03,$4d,$45,$cd                  ; $c8 mem
>45bf	01 a9					.byte $01,$a9                          ; $c9 )
>45c1	01 ba					.byte $01,$ba                          ; $ca :
>45c3	01 ac					.byte $01,$ac                          ; $cb ,
>45c5	01 bb					.byte $01,$bb                          ; $cc ;
>45c7	01 a7					.byte $01,$a7                          ; $cd '
>45c9	02 54 cf				.byte $02,$54,$cf                      ; $ce to
>45cc	04 53 54 45 d0				.byte $04,$53,$54,$45,$d0              ; $cf step
>45d1	04 50 52 4f c3				.byte $04,$50,$52,$4f,$c3              ; $d0 proc
>45d6	05 4c 4f 43 41 cc			.byte $05,$4c,$4f,$43,$41,$cc          ; $d1 local
>45dc	03 44 49 cd				.byte $03,$44,$49,$cd                  ; $d2 dim
>45e0	03 52 45 cd				.byte $03,$52,$45,$cd                  ; $d3 rem
>45e4	03 4c 45 d4				.byte $03,$4c,$45,$d4                  ; $d4 let
>45e8	05 49 4e 50 55 d4			.byte $05,$49,$4e,$50,$55,$d4          ; $d5 input
>45ee	04 45 4c 53 c5				.byte $04,$45,$4c,$53,$c5              ; $d6 else
>45f3	03 56 44 d5				.byte $03,$56,$44,$d5                  ; $d7 vdu
>45f7	05 50 52 49 4e d4			.byte $05,$50,$52,$49,$4e,$d4          ; $d8 print
>45fd	04 44 41 54 c1				.byte $04,$44,$41,$54,$c1              ; $d9 data
>4602	05 49 4d 41 47 c5			.byte $05,$49,$4d,$41,$47,$c5          ; $da image
>4608	02 41 d4				.byte $02,$41,$d4                      ; $db at
>460b	04 46 4c 49 d0				.byte $04,$46,$4c,$49,$d0              ; $dc flip
>4610	06 41 53 53 45 52 d4			.byte $06,$41,$53,$53,$45,$52,$d4      ; $dd assert
>4617	04 50 4f 4b c5				.byte $04,$50,$4f,$4b,$c5              ; $de poke
>461c	04 44 4f 4b c5				.byte $04,$44,$4f,$4b,$c5              ; $df doke
>4621	04 4c 4f 4b c5				.byte $04,$4c,$4f,$4b,$c5              ; $e0 loke
>4626	03 49 4e cb				.byte $03,$49,$4e,$cb                  ; $e1 ink
>462a	05 50 41 50 45 d2			.byte $05,$50,$41,$50,$45,$d2          ; $e2 paper
>4630	03 43 4c d3				.byte $03,$43,$4c,$d3                  ; $e3 cls
>4634	06 4c 4f 43 41 54 c5			.byte $06,$4c,$4f,$43,$41,$54,$c5      ; $e4 locate
>463b	01 ae					.byte $01,$ae                          ; $e5 .
>463d	04 46 52 4f cd				.byte $04,$46,$52,$4f,$cd              ; $e6 from
>4642	01 a3					.byte $01,$a3                          ; $e7 #
>4644	05 43 4c 45 41 d2			.byte $05,$43,$4c,$45,$41,$d2          ; $e8 clear
>464a	00					.byte $00

;******  Return to file: tokeniser/tokentext.asm


;******  Processing file: tokeniser/../generated/tokentext1.inc

.464b					Group1Text:
>464b	04 4c 4f 41 c4				.byte $04,$4c,$4f,$41,$c4              ; $86 load
>4650	04 53 41 56 c5				.byte $04,$53,$41,$56,$c5              ; $87 save
>4655	04 4c 49 53 d4				.byte $04,$4c,$49,$53,$d4              ; $88 list
>465a	03 4e 45 d7				.byte $03,$4e,$45,$d7                  ; $89 new
>465e	05 42 52 45 41 cb			.byte $05,$42,$52,$45,$41,$cb          ; $8a break
>4664	03 52 55 ce				.byte $03,$52,$55,$ce                  ; $8b run
>4668	04 52 45 41 c4				.byte $04,$52,$45,$41,$c4              ; $8c read
>466d	07 52 45 53 54 4f 52 c5			.byte $07,$52,$45,$53,$54,$4f,$52,$c5  ; $8d restore
>4675	03 45 4e c4				.byte $03,$45,$4e,$c4                  ; $8e end
>4679	04 53 54 4f d0				.byte $04,$53,$54,$4f,$d0              ; $8f stop
>467e	04 58 45 4d d5				.byte $04,$58,$45,$4d,$d5              ; $90 xemu
>4683	04 47 4f 54 cf				.byte $04,$47,$4f,$54,$cf              ; $91 goto
>4688	05 47 4f 53 55 c2			.byte $05,$47,$4f,$53,$55,$c2          ; $92 gosub
>468e	06 52 45 54 55 52 ce			.byte $06,$52,$45,$54,$55,$52,$ce      ; $93 return
>4695	03 4f 52 c1				.byte $03,$4f,$52,$c1                  ; $94 ora
>4699	05 28 41 4e 44 a9			.byte $05,$28,$41,$4e,$44,$a9          ; $95 (and)
>469f	03 45 4f d2				.byte $03,$45,$4f,$d2                  ; $96 eor
>46a3	03 41 44 c3				.byte $03,$41,$44,$c3                  ; $97 adc
>46a7	03 53 54 c1				.byte $03,$53,$54,$c1                  ; $98 sta
>46ab	03 4c 44 c1				.byte $03,$4c,$44,$c1                  ; $99 lda
>46af	03 43 4d d0				.byte $03,$43,$4d,$d0                  ; $9a cmp
>46b3	03 53 42 c3				.byte $03,$53,$42,$c3                  ; $9b sbc
>46b7	03 41 53 cc				.byte $03,$41,$53,$cc                  ; $9c asl
>46bb	03 52 4f cc				.byte $03,$52,$4f,$cc                  ; $9d rol
>46bf	03 4c 53 d2				.byte $03,$4c,$53,$d2                  ; $9e lsr
>46c3	03 52 4f d2				.byte $03,$52,$4f,$d2                  ; $9f ror
>46c7	03 53 54 d8				.byte $03,$53,$54,$d8                  ; $a0 stx
>46cb	03 4c 44 d8				.byte $03,$4c,$44,$d8                  ; $a1 ldx
>46cf	03 44 45 c3				.byte $03,$44,$45,$c3                  ; $a2 dec
>46d3	03 49 4e c3				.byte $03,$49,$4e,$c3                  ; $a3 inc
>46d7	03 53 54 da				.byte $03,$53,$54,$da                  ; $a4 stz
>46db	03 42 49 d4				.byte $03,$42,$49,$d4                  ; $a5 bit
>46df	03 53 54 d9				.byte $03,$53,$54,$d9                  ; $a6 sty
>46e3	03 4c 44 d9				.byte $03,$4c,$44,$d9                  ; $a7 ldy
>46e7	03 43 50 d9				.byte $03,$43,$50,$d9                  ; $a8 cpy
>46eb	03 43 50 d8				.byte $03,$43,$50,$d8                  ; $a9 cpx
>46ef	03 54 53 c2				.byte $03,$54,$53,$c2                  ; $aa tsb
>46f3	03 54 52 c2				.byte $03,$54,$52,$c2                  ; $ab trb
>46f7	03 4a 53 d2				.byte $03,$4a,$53,$d2                  ; $ac jsr
>46fb	03 4a 4d d0				.byte $03,$4a,$4d,$d0                  ; $ad jmp
>46ff	03 42 50 cc				.byte $03,$42,$50,$cc                  ; $ae bpl
>4703	03 42 4d c9				.byte $03,$42,$4d,$c9                  ; $af bmi
>4707	03 42 56 c3				.byte $03,$42,$56,$c3                  ; $b0 bvc
>470b	03 42 56 d3				.byte $03,$42,$56,$d3                  ; $b1 bvs
>470f	03 42 43 c3				.byte $03,$42,$43,$c3                  ; $b2 bcc
>4713	03 42 43 d3				.byte $03,$42,$43,$d3                  ; $b3 bcs
>4717	03 42 4e c5				.byte $03,$42,$4e,$c5                  ; $b4 bne
>471b	03 42 45 d1				.byte $03,$42,$45,$d1                  ; $b5 beq
>471f	03 42 52 c1				.byte $03,$42,$52,$c1                  ; $b6 bra
>4723	03 42 52 cb				.byte $03,$42,$52,$cb                  ; $b7 brk
>4727	03 50 48 d0				.byte $03,$50,$48,$d0                  ; $b8 php
>472b	03 43 4c c3				.byte $03,$43,$4c,$c3                  ; $b9 clc
>472f	03 50 4c d0				.byte $03,$50,$4c,$d0                  ; $ba plp
>4733	03 53 45 c3				.byte $03,$53,$45,$c3                  ; $bb sec
>4737	03 52 54 c9				.byte $03,$52,$54,$c9                  ; $bc rti
>473b	03 50 48 c1				.byte $03,$50,$48,$c1                  ; $bd pha
>473f	03 43 4c c9				.byte $03,$43,$4c,$c9                  ; $be cli
>4743	03 50 48 d9				.byte $03,$50,$48,$d9                  ; $bf phy
>4747	03 52 54 d3				.byte $03,$52,$54,$d3                  ; $c0 rts
>474b	03 50 4c c1				.byte $03,$50,$4c,$c1                  ; $c1 pla
>474f	03 53 45 c9				.byte $03,$53,$45,$c9                  ; $c2 sei
>4753	03 50 4c d9				.byte $03,$50,$4c,$d9                  ; $c3 ply
>4757	03 44 45 d9				.byte $03,$44,$45,$d9                  ; $c4 dey
>475b	03 54 58 c1				.byte $03,$54,$58,$c1                  ; $c5 txa
>475f	03 54 59 c1				.byte $03,$54,$59,$c1                  ; $c6 tya
>4763	03 54 58 d3				.byte $03,$54,$58,$d3                  ; $c7 txs
>4767	03 54 41 d9				.byte $03,$54,$41,$d9                  ; $c8 tay
>476b	03 54 41 d8				.byte $03,$54,$41,$d8                  ; $c9 tax
>476f	03 43 4c d6				.byte $03,$43,$4c,$d6                  ; $ca clv
>4773	03 54 53 d8				.byte $03,$54,$53,$d8                  ; $cb tsx
>4777	03 49 4e d9				.byte $03,$49,$4e,$d9                  ; $cc iny
>477b	03 44 45 d8				.byte $03,$44,$45,$d8                  ; $cd dex
>477f	03 43 4c c4				.byte $03,$43,$4c,$c4                  ; $ce cld
>4783	03 50 48 d8				.byte $03,$50,$48,$d8                  ; $cf phx
>4787	03 49 4e d8				.byte $03,$49,$4e,$d8                  ; $d0 inx
>478b	03 4e 4f d0				.byte $03,$4e,$4f,$d0                  ; $d1 nop
>478f	03 53 45 c4				.byte $03,$53,$45,$c4                  ; $d2 sed
>4793	03 50 4c d8				.byte $03,$50,$4c,$d8                  ; $d3 plx
>4797	00					.byte $00

;******  Return to file: tokeniser/tokentext.asm


;******  Processing file: tokeniser/../generated/tokentext2.inc

.4798					Group2Text:
>4798	05 56 50 4f 4b c5			.byte $05,$56,$50,$4f,$4b,$c5          ; $86 vpoke
>479e	05 56 44 4f 4b c5			.byte $05,$56,$44,$4f,$4b,$c5          ; $87 vdoke
>47a4	05 56 4c 4f 41 c4			.byte $05,$56,$4c,$4f,$41,$c4          ; $88 vload
>47aa	04 4d 4f 44 c5				.byte $04,$4d,$4f,$44,$c5              ; $89 mode
>47af	07 50 41 4c 45 54 54 c5			.byte $07,$50,$41,$4c,$45,$54,$54,$c5  ; $8a palette
>47b7	06 53 50 52 49 54 c5			.byte $06,$53,$50,$52,$49,$54,$c5      ; $8b sprite
>47be	03 43 4c c7				.byte $03,$43,$4c,$c7                  ; $8c clg
>47c2	04 52 45 43 d4				.byte $04,$52,$45,$43,$d4              ; $8d rect
>47c7	05 46 52 41 4d c5			.byte $05,$46,$52,$41,$4d,$c5          ; $8e frame
>47cd	04 44 52 41 d7				.byte $04,$44,$52,$41,$d7              ; $8f draw
>47d2	04 54 45 58 d4				.byte $04,$54,$45,$58,$d4              ; $90 text
>47d7	04 50 4c 4f d4				.byte $04,$50,$4c,$4f,$d4              ; $91 plot
>47dc	04 4c 49 4e c5				.byte $04,$4c,$49,$4e,$c5              ; $92 line
>47e1	05 50 41 49 4e d4			.byte $05,$50,$41,$49,$4e,$d4          ; $93 paint
>47e7	00					.byte $00

;******  Return to file: tokeniser/tokentext.asm


;******  Processing file: tokeniser/../generated/tokentext3.inc

.47e8					Group3Text:
>47e8	06 56 50 45 45 4b a8			.byte $06,$56,$50,$45,$45,$4b,$a8      ; $86 vpeek(
>47ef	06 56 44 45 45 4b a8			.byte $06,$56,$44,$45,$45,$4b,$a8      ; $87 vdeek(
>47f6	09 53 50 52 49 54 45 2e			.byte $09,$53,$50,$52,$49,$54,$45,$2e,$58,$a8 ; $88 sprite.x(
>47fe	58 a8
>4800	09 53 50 52 49 54 45 2e			.byte $09,$53,$50,$52,$49,$54,$45,$2e,$59,$a8 ; $89 sprite.y(
>4808	59 a8
>480a	04 48 49 54 a8				.byte $04,$48,$49,$54,$a8              ; $8a hit(
>480f	06 4a 4f 59 2e 58 a8			.byte $06,$4a,$4f,$59,$2e,$58,$a8      ; $8b joy.x(
>4816	06 4a 4f 59 2e 59 a8			.byte $06,$4a,$4f,$59,$2e,$59,$a8      ; $8c joy.y(
>481d	06 4a 4f 59 2e 42 a8			.byte $06,$4a,$4f,$59,$2e,$42,$a8      ; $8d joy.b(
>4824	06 43 4c 4f 43 4b a8			.byte $06,$43,$4c,$4f,$43,$4b,$a8      ; $8e clock(
>482b	00					.byte $00

;******  Return to file: tokeniser/tokentext.asm


;******  Return to file: tokeniser/tokeniser.asm

.482c					tokeniserHandler:
.482c	7c 2f 48	jmp ($482f,x)			jmp 	(tokeniserVectors,x)
.482f					tokeniserVectors:
>482f	3b 48					.word _DummyControlHandler ; index 0
>4831	c5 3f					.word Detokenise           ; index 2
>4833	b9 3f					.word ListLine             ; index 4
>4835	4a 42					.word TokTest              ; index 6
>4837	6a 42					.word Tokenise             ; index 8
>4839	6d 42					.word TokeniseASCIIZ       ; index 10
.483b					_DummyControlHandler:
.483b	60		rts			rts

;******  Return to file: basic.asm

.483c					section_end_tokeniser:
.483c					section_start_variable:

;******  Processing file: variable/variable.asm


;******  Processing file: variable/array/access.asm

.483c					AccessArray:
.483c	8a		txa				txa
.483d	48		pha				pha
.483e	e8		inx				inx
.483f	20 08 49	jsr $4908			jsr 	GetArrayDimensions 			; get the array dimensions one up from here.
.4842	68		pla				pla
.4843	aa		tax				tax
.4844	b5 98		lda $98,x			lda 	esInt0,x 					; restore address to follow in temp0.
.4846	85 2a		sta $2a				sta 	temp0
.4848	b5 a0		lda $a0,x			lda 	esInt1,x
.484a	85 2b		sta $2b				sta 	temp0+1
.484c	8a		txa				txa
.484d	48		pha				pha
.484e	98		tya				tya
.484f	48		pha				pha
.4850					_AAFollow:
.4850	a0 00		ldy #$00			ldy 	#0
.4852	b1 2a		lda ($2a),y			lda 	(temp0),y
.4854	48		pha				pha
.4855	c8		iny				iny
.4856	b1 2a		lda ($2a),y			lda 	(temp0),y
.4858	85 2b		sta $2b				sta 	temp0+1
.485a	68		pla				pla
.485b	85 2a		sta $2a				sta 	temp0
.485d	e8		inx				inx 								; advance to next stack slot.
.485e	a0 00		ldy #$00			ldy 	#0
.4860	b1 2a		lda ($2a),y			lda 	(temp0),y 					; compare max index vs required index
.4862	d5 98		cmp $98,x			cmp 	esInt0,x
.4864	c8		iny				iny
.4865	b1 2a		lda ($2a),y			lda 	(temp0),y 					; drop bit 7 of the size, indicates follow.
.4867	85 2c		sta $2c				sta 	temp1 						; save the size in temp1 for later use.
.4869	29 7f		and #$7f			and 	#$7F
.486b	f5 a0		sbc $a0,x			sbc 	esInt1,x
.486d	90 50		bcc $48bf			bcc 	_AABadIndex 				; failed on index if max index < required.
.486f	18		clc				clc
.4870	a5 2a		lda $2a				lda 	temp0
.4872	69 02		adc #$02			adc 	#2
.4874	85 2a		sta $2a				sta 	temp0
.4876	90 02		bcc $487a			bcc 	_AANoCarry
.4878	e6 2b		inc $2b				inc 	temp0+1
.487a					_AANoCarry:
.487a	b5 98		lda $98,x			lda 	esInt0,x
.487c	85 2e		sta $2e				sta 	temp2
.487e	b5 a0		lda $a0,x			lda 	esInt1,x
.4880	85 2f		sta $2f				sta 	temp2+1
.4882	ac 1e 0e	ldy $0e1e			ldy 	varType
.4885	b9 62 49	lda $4962,y			lda 	CAActualSize-$3A,y
.4888	b4 91		ldy $91,x			ldy 	esType+1,x 					; is it top level
.488a	30 02		bmi $488e			bmi 	_AANotPointer
.488c	a9 02		lda #$02			lda 	#2 							; array of pointers is 2.
.488e					_AANotPointer:
.488e	20 0c 4a	jsr $4a0c			jsr 	MultiplyTemp2ByA 			; multiply the index by the data size, in temp2.
.4891	18		clc				clc
.4892	a5 2a		lda $2a				lda 	temp0
.4894	65 2e		adc $2e				adc 	temp2
.4896	85 2a		sta $2a				sta 	temp0
.4898	a5 2b		lda $2b				lda 	temp0+1
.489a	65 2f		adc $2f				adc 	temp2+1
.489c	85 2b		sta $2b				sta 	temp0+1
.489e	b5 91		lda $91,x			lda 	esType+1,x
.48a0	30 07		bmi $48a9			bmi 	_AAUsedAllIndices
.48a2	a5 2c		lda $2c				lda 	temp1 						; check if this is a pointer array e.g. there are subarrays
.48a4	10 14		bpl $48ba			bpl 	_AABadDepth 				; no, too many indexes.
.48a6	4c 50 48	jmp $4850			jmp 	_AAFollow 					; otherwise follow them.
.48a9					_AAUsedAllIndices:
.48a9	a5 2c		lda $2c				lda 	temp1 						; get original high length byte.
.48ab	30 0d		bmi $48ba			bmi 	_AABadDepth 				; if -ve then this is an array of pointers.
.48ad	68		pla				pla
.48ae	a8		tay				tay
.48af	68		pla				pla
.48b0	aa		tax				tax
.48b1	a5 2a		lda $2a				lda 	temp0 						; copy address of array element to stack,x
.48b3	95 98		sta $98,x			sta 	esInt0,x
.48b5	a5 2b		lda $2b				lda 	temp0+1
.48b7	95 a0		sta $a0,x			sta 	esInt1,x
.48b9	60		rts				rts
.48ba					_AABadDepth:
.48ba	a2 1c		ldx #$1c			ldx 	#ErrorID_ArrayDepth
.48bc	20 18 15	jsr $1518		jsr	errorHandler
.48bf					_AABadIndex:
.48bf	a2 1b		ldx #$1b			ldx 	#ErrorID_ArrayIndex
.48c1	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: variable/variable.asm


;******  Processing file: variable/array/create.asm

.0e1c					elementSize:
>0e1c							.fill	 1
.48c4					CreateArray:
.48c4	20 9b 4a	jsr $4a9b			jsr 	AccessSetup 				; set up the basic stuff.
.48c7	ad 1e 0e	lda $0e1e			lda 	varType 					; is the variable type an array
.48ca	4a		lsr a				lsr 	a
.48cb	90 36		bcc $4903			bcc 	CANotArray 					; no, cause an error.
.48cd	20 a4 4b	jsr $4ba4			jsr 	FindVariable 				; does the variable exist already
.48d0	b0 2c		bcs $48fe			bcs 	CAFound 					; cannot redefine it.
.48d2	20 d8 4a	jsr $4ad8			jsr 	CreateVariable 				; create the variable entry.
.48d5	a5 2a		lda $2a				lda 	temp0 						; push address of new variable entry on the stack
.48d7	48		pha				pha
.48d8	a5 2b		lda $2b				lda 	temp0+1
.48da	48		pha				pha
.48db	a2 00		ldx #$00			ldx 	#0
.48dd	20 08 49	jsr $4908			jsr 	GetArrayDimensions 			; get the array dimensions
.48e0	a2 00		ldx #$00			ldx 	#0 							; create at level $00
.48e2	20 38 49	jsr $4938			jsr 	CreateArrayLevel 			; level to YA
.48e5	aa		tax				tax 								; level now in YX
.48e6	68		pla				pla 								; get address back to temp0 to write.
.48e7	85 2b		sta $2b				sta 	temp0+1
.48e9	68		pla				pla
.48ea	85 2a		sta $2a				sta 	temp0
.48ec	98		tya				tya 								; write YX there.
.48ed	a0 06		ldy #$06			ldy 	#6
.48ef	91 2a		sta ($2a),y			sta 	(temp0),y
.48f1	88		dey				dey
.48f2	8a		txa				txa
.48f3	91 2a		sta ($2a),y			sta 	(temp0),y
.48f5	ac 1f 0e	ldy $0e1f			ldy 	varEnd 						; restore Y and exit.
.48f8	60		rts				rts
.48f9					CASize:
.48f9	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.48fb	20 18 15	jsr $1518		jsr	errorHandler
.48fe					CAFound:
.48fe	a2 19		ldx #$19			ldx 	#ErrorID_DupArray
.4900	20 18 15	jsr $1518		jsr	errorHandler
.4903					CANotArray:
.4903	a2 1a		ldx #$1a			ldx 	#ErrorID_NotArray
.4905	20 18 15	jsr $1518		jsr	errorHandler
.4908					GetArrayDimensions:
.4908	ad 1e 0e	lda $0e1e			lda 	varType 					; push variable type on the stack.
.490b	48		pha				pha
.490c	ac 1f 0e	ldy $0e1f			ldy 	varEnd
.490f					_CAGetDimensions:
.490f	8a		txa				txa 								; get the next level
.4910	a2 0a		ldx #$0a		ldx	#10
.4912	20 e6 3c	jsr $3ce6		jsr	mainHandler
.4915	aa		tax				tax
.4916	b5 a0		lda $a0,x			lda 	esInt1,x 					; index must be < 8192
.4918	29 e0		and #$e0			and 	#$E0
.491a	15 a8		ora $a8,x			ora 	esInt2,x
.491c	15 b0		ora $b0,x			ora 	esInt3,x
.491e	d0 d9		bne $48f9			bne 	CASize
.4920	e8		inx				inx 								; next level.
.4921	b1 28		lda ($28),y			lda 	(codePtr),y 				; get/consume following character
.4923	c8		iny				iny
.4924	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; loop back if more dimensions
.4926	f0 e7		beq $490f			beq 	_CAGetDimensions
.4928	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN 				; right bracket ?
.492a	d0 cd		bne $48f9			bne 	CASize
.492c	a9 ff		lda #$ff			lda 	#$FF 						; set the type past the end to $FF so we know how many
.492e	95 90		sta $90,x			sta 	esType,x 					; dimensions there are.
.4930	68		pla				pla 								; restore the variable type ($3A-$3F)
.4931	8d 1e 0e	sta $0e1e			sta 	varType
.4934	8c 1f 0e	sty $0e1f			sty 	varEnd 						; save exit Y value, after dimensions
.4937	60		rts				rts
.4938					CreateArrayLevel:
.4938	ac 1e 0e	ldy $0e1e			ldy 	varType
.493b	b9 62 49	lda $4962,y			lda 	CAActualSize-$3A,y
.493e	8d 1c 0e	sta $0e1c			sta 	elementSize 				; get element size this level.
.4941	b4 91		ldy $91,x			ldy 	esType+1,x 					; is it top level
.4943	30 05		bmi $494a			bmi 	_CANotPointer
.4945	a9 02		lda #$02			lda 	#2 							; array of pointers is 2.
.4947	8d 1c 0e	sta $0e1c			sta 	elementSize
.494a					_CANotPointer:
.494a	a5 35		lda $35				lda 	lowMemory 					; start creating at temp0, saving start on stack.
.494c	85 2a		sta $2a				sta 	temp0
.494e	48		pha				pha
.494f	a5 36		lda $36				lda 	lowMemory+1
.4951	85 2b		sta $2b				sta 	temp0+1
.4953	48		pha				pha
.4954	20 d5 49	jsr $49d5			jsr 	AllocateArraySpace 			; allocate space for all array stuff at this level.
.4957	a0 00		ldy #$00			ldy 	#0
.4959	b5 98		lda $98,x			lda 	esInt0,x
.495b	91 2a		sta ($2a),y			sta 	(temp0),y
.495d	c8		iny				iny
.495e	b5 a0		lda $a0,x			lda 	esInt1,x
.4960	91 2a		sta ($2a),y			sta 	(temp0),y
.4962	b5 91		lda $91,x			lda 	esType+1,x 					; do we have another level ?
.4964	30 06		bmi $496c			bmi 	_CALNotLast
.4966	b1 2a		lda ($2a),y			lda 	(temp0),y 					; set bit 7, indicates an array of pointers to other levels.
.4968	09 80		ora #$80			ora 	#$80
.496a	91 2a		sta ($2a),y			sta 	(temp0),y
.496c					_CALNotLast:
.496c	a9 02		lda #$02			lda 	#2
.496e	20 92 49	jsr $4992			jsr 	_CALAddTemp0
.4971	b5 98		lda $98,x			lda 	esInt0,x 					; copy stack:01 to stack:23 so we can use it to
.4973	95 a8		sta $a8,x			sta 	esInt2,x 					; count.
.4975	b5 a0		lda $a0,x			lda 	esInt1,x
.4977	95 b0		sta $b0,x			sta 	esInt3,x
.4979					_CALClear:
.4979	20 a2 49	jsr $49a2			jsr 	EraseOneElement
.497c	ad 1c 0e	lda $0e1c			lda 	elementSize 				; move to next element
.497f	20 92 49	jsr $4992			jsr 	_CALAddTemp0
.4982	b5 a8		lda $a8,x			lda 	esInt2,x 					; decrement counter
.4984	d0 02		bne $4988			bne 	_CALNoBorrow
.4986	d6 b0		dec $b0,x			dec 	esInt3,x
.4988					_CALNoBorrow:
.4988	d6 a8		dec $a8,x			dec 	esInt2,x
.498a	b5 b0		lda $b0,x			lda 	esInt3,x 					; loop back if >= 0 - we need +1 because indices
.498c	10 eb		bpl $4979			bpl 	_CALClear 					; start at 0 e.g. x(10) is actually 11 array entries.
.498e	68		pla				pla 								; restore the start of this into YA.
.498f	a8		tay				tay
.4990	68		pla				pla
.4991	60		rts				rts
.4992					_CALAddTemp0:
.4992	18		clc				clc
.4993	65 2a		adc $2a				adc 	temp0
.4995	85 2a		sta $2a				sta 	temp0
.4997	90 02		bcc $499b			bcc 	_CALANoCarry
.4999	e6 2b		inc $2b				inc 	temp0+1
.499b					_CALANoCarry:
.499b	60		rts				rts
.499c					CAActualSize:
>499c	04 04						.byte 	VarISize,VarISize
>499e	02 02						.byte 	VarSSize,VarSSize
>49a0	06 06						.byte 	VarFSize,VarFSize
.49a2					EraseOneElement:
.49a2	b5 91		lda $91,x			lda 	esType+1,x 					; is this a list of sub arrays
.49a4	10 09		bpl $49af			bpl 	_EOESubArray
.49a6	a0 00		ldy #$00			ldy 	#0 							; write the empty variable value out.
.49a8	ad 1e 0e	lda $0e1e			lda 	varType
.49ab	20 42 4b	jsr $4b42			jsr 	ZeroTemp0Y
.49ae	60		rts				rts
.49af					_EOESubArray:
.49af	a5 2a		lda $2a				lda 	temp0 						; save temp0, these are effectively locals.
.49b1	48		pha				pha
.49b2	a5 2b		lda $2b				lda 	temp0+1
.49b4	48		pha				pha
.49b5	ad 1c 0e	lda $0e1c			lda 	elementSize 				; save element size
.49b8	48		pha				pha
.49b9	e8		inx				inx 								; create at next level
.49ba	20 38 49	jsr $4938			jsr 	CreateArrayLevel
.49bd	ca		dex				dex
.49be	85 32		sta $32				sta 	tempShort 					; save A
.49c0	68		pla				pla  								; restore element size.
.49c1	8d 1c 0e	sta $0e1c			sta 	elementSize
.49c4	68		pla				pla 								; restore temp0, which is where this new array level goes.
.49c5	85 2b		sta $2b				sta 	temp0+1
.49c7	68		pla				pla
.49c8	85 2a		sta $2a				sta 	temp0
.49ca	98		tya				tya 								; store Y/A there
.49cb	a0 01		ldy #$01			ldy 	#1
.49cd	91 2a		sta ($2a),y			sta 	(temp0),y
.49cf	a5 32		lda $32				lda 	tempShort
.49d1	88		dey				dey
.49d2	91 2a		sta ($2a),y			sta 	(temp0),y
.49d4	60		rts				rts
.49d5					AllocateArraySpace:
.49d5	18		clc				clc 								; element count + 1 => temp2.
.49d6	b5 98		lda $98,x			lda 	esInt0,x
.49d8	69 01		adc #$01			adc 	#1
.49da	85 2e		sta $2e				sta 	temp2
.49dc	b5 a0		lda $a0,x			lda 	esInt1,x
.49de	69 00		adc #$00			adc 	#0
.49e0	85 2f		sta $2f				sta 	temp2+1
.49e2	ad 1c 0e	lda $0e1c			lda 	elementSize 				; bytes per element
.49e5	20 0c 4a	jsr $4a0c			jsr 	MultiplyTemp2ByA 			; temp2 = (count + 1) x bytes per element.
.49e8	18		clc				clc 								; add 2 for 'max element' byte.
.49e9	a5 2e		lda $2e				lda 	temp2
.49eb	69 02		adc #$02			adc 	#2
.49ed	85 2e		sta $2e				sta 	temp2
.49ef	90 02		bcc $49f3			bcc 	_AASNoCarry
.49f1	e6 2f		inc $2f				inc 	temp2+1
.49f3					_AASNoCarry:
.49f3	18		clc				clc 								; add to low memory, allocating space.
.49f4	a5 35		lda $35				lda 	lowMemory
.49f6	65 2e		adc $2e				adc 	temp2
.49f8	85 35		sta $35				sta 	lowMemory
.49fa	a5 36		lda $36				lda 	lowMemory+1
.49fc	65 2f		adc $2f				adc 	temp2+1
.49fe	85 36		sta $36				sta 	lowMemory+1
.4a00	b0 05		bcs $4a07			bcs 	_AASFail 					; out of memory as adding causes wrapround
.4a02	c5 34		cmp $34				cmp 	highMemory+1 				; >= high memory pointer.
.4a04	b0 01		bcs $4a07			bcs 	_AASFail
.4a06	60		rts				rts
.4a07					_AASFail:
.4a07	a2 22		ldx #$22			ldx 	#ErrorID_Memory
.4a09	20 18 15	jsr $1518		jsr	errorHandler
.4a0c					MultiplyTemp2ByA:
.4a0c	48		pha				pha
.4a0d	a5 2e		lda $2e				lda 	temp2 						; copy temp2 to temp3.
.4a0f	85 30		sta $30				sta 	temp3
.4a11	a5 2f		lda $2f				lda 	temp2+1
.4a13	85 31		sta $31				sta 	temp3+1
.4a15	68		pla				pla
.4a16	06 2e		asl $2e				asl 	temp2 						; double it.
.4a18	26 2f		rol $2f				rol 	temp2+1
.4a1a	c9 02		cmp #$02			cmp 	#2 							; if x 2 then exit.
.4a1c	f0 15		beq $4a33			beq 	_MTBAExit
.4a1e	c9 06		cmp #$06			cmp 	#6 							; if x 6 then add temp3 to temp2
.4a20	d0 0d		bne $4a2f			bne 	_MTBANotFloat
.4a22	18		clc				clc 								; so this will make it x 3
.4a23	a5 2e		lda $2e				lda 	temp2
.4a25	65 30		adc $30				adc 	temp3
.4a27	85 2e		sta $2e				sta 	temp2
.4a29	a5 2f		lda $2f				lda 	temp2+1
.4a2b	65 31		adc $31				adc 	temp3+1
.4a2d	85 2f		sta $2f				sta 	temp2+1
.4a2f					_MTBANotFloat:
.4a2f	06 2e		asl $2e				asl 	temp2 						; double it.
.4a31	26 2f		rol $2f				rol 	temp2+1
.4a33					_MTBAExit:
.4a33	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/variable/access.asm

.0e1d					varHash:
>0e1d							.fill	1
.0e1e					varType:
>0e1e							.fill 	1
.0e1f					varEnd:
>0e1f							.fill 	1
.003b					hashList:
>003b							.fill 	2
.4a34					AccessVariable:
.4a34	aa		tax				tax 								; stack in X
.4a35	c8		iny				iny									; look at second character
.4a36	b1 28		lda ($28),y			lda 	(codePtr),y
.4a38	88		dey				dey
.4a39	c9 3a		cmp #$3a			cmp 	#TYPE_INT 					; is it the integer marker ($3A)
.4a3b	d0 15		bne $4a52			bne 	_AVLong 					; no, always use the hash tables.
.4a3d	b1 28		lda ($28),y			lda 	(codePtr),y 				; this is the 6 bit ASCII of A-Z 1-26
.4a3f	38		sec				sec 	 							; make it 0-25
.4a40	e9 01		sbc #$01			sbc 	#1
.4a42	0a		asl a				asl 	a 							; x 4 as 4 bytes / variable.
.4a43	0a		asl a				asl 	a
.4a44	95 98		sta $98,x			sta 	esInt0,x
.4a46	a9 0a		lda #$0a			lda 	#SingleLetterVar >> 8 		; make it an address
.4a48	95 a0		sta $a0,x			sta 	esInt1,x
.4a4a	a9 80		lda #$80			lda 	#$80 						; type is an integer reference.
.4a4c	95 90		sta $90,x			sta 	esType,x
.4a4e	c8		iny				iny 								; skip over the variable reference in the code.
.4a4f	c8		iny				iny  								; (1 letter, 1 type)
.4a50	8a		txa				txa 								; stack in A to return.
.4a51	60		rts				rts
.4a52					_AVLong:
.4a52	8a		txa				txa
.4a53	48		pha				pha
.4a54	20 9b 4a	jsr $4a9b			jsr 	AccessSetup 				; set up the basic information we need for later
.4a57	20 a4 4b	jsr $4ba4			jsr 	FindVariable 				; does the variable exist already ?
.4a5a	b0 0e		bcs $4a6a			bcs 	_AVFound 					; yes, then its found
.4a5c	ad 1e 0e	lda $0e1e			lda 	varType 					; otherwise, is the variable type an array
.4a5f	4a		lsr a				lsr 	a
.4a60	90 05		bcc $4a67			bcc 	_AVCanCreate 				; if not, we can autocreate
.4a62	a2 15		ldx #$15			ldx 	#ErrorID_noauto
.4a64	20 18 15	jsr $1518		jsr	errorHandler
.4a67					_AVCanCreate:
.4a67	20 d8 4a	jsr $4ad8			jsr 	CreateVariable 				; variable does not exist, create it.
.4a6a					_AVFound:
.4a6a	68		pla				pla
.4a6b	aa		tax				tax
.4a6c	18		clc				clc 								; copy temp0 (variable record address)
.4a6d	a5 2a		lda $2a				lda 	temp0 						; +5 (to point to the data)
.4a6f	69 05		adc #$05			adc 	#5 							; (first 5 bytes are link, name, hash)
.4a71	95 98		sta $98,x			sta 	esInt0,x
.4a73	a5 2b		lda $2b				lda 	temp0+1
.4a75	69 00		adc #$00			adc 	#0
.4a77	95 a0		sta $a0,x			sta 	esInt1,x
.4a79	a9 00		lda #$00			lda 	#0
.4a7b	95 a8		sta $a8,x			sta 	esInt2,x
.4a7d	95 b0		sta $b0,x			sta 	esInt3,x
.4a7f	ac 1e 0e	ldy $0e1e			ldy 	varType 					; get the type ID from the type.
.4a82	b9 5b 4a	lda $4a5b,y			lda 	_AVTypeTable-$3A,y 			; e.g. a reference to int/float/string.
.4a85	95 90		sta $90,x			sta 	esType,x
.4a87	ac 1f 0e	ldy $0e1f			ldy 	varEnd 						; restore Y
.4a8a	ad 1e 0e	lda $0e1e			lda 	VarType 					; get variable type, put LSB into C
.4a8d	4a		lsr a				lsr 	a
.4a8e	90 03		bcc $4a93			bcc 	_AVNotArray 				; if carry set,it is an array variable.
.4a90	20 3c 48	jsr $483c			jsr 	AccessArray 				; array lookup. if LSB was set.
.4a93					_AVNotArray:
.4a93	8a		txa				txa 								; return stack in A and return
.4a94	60		rts				rts
.4a95					_AVTypeTable:
>4a95	80 80						.byte 	$80,$80						; integer
>4a97	c0 c0						.byte 	$C0,$C0 					; string
>4a99	81 81						.byte 	$81,$81 					; float
.4a9b					AccessSetup:
.4a9b	a9 00		lda #$00			lda 	#0 							; zero the hash byte.
.4a9d	8d 1d 0e	sta $0e1d			sta 	varHash
.4aa0	98		tya				tya
.4aa1	48		pha				pha
.4aa2	b1 28		lda ($28),y	_ASLoop:lda 	(codePtr),y					; get next identifier character
.4aa4	c9 3a		cmp #$3a			cmp 	#$3A 						; is it 3A-3F which end all identifiers ?
.4aa6	b0 0b		bcs $4ab3			bcs 	_ASComplete
.4aa8	18		clc				clc 								; add to the hash. Might improve this.
.4aa9	6d 1d 0e	adc $0e1d			adc 	varHash
.4aac	8d 1d 0e	sta $0e1d			sta 	varHash
.4aaf	c8		iny				iny 								; next character
.4ab0	4c a2 4a	jmp $4aa2			jmp 	_ASLoop
.4ab3					_ASComplete:
.4ab3	8d 1e 0e	sta $0e1e			sta 	varType 					; save variable type byte
.4ab6	c8		iny				iny
.4ab7	8c 1f 0e	sty $0e1f			sty 	varEnd 						; save the ending position.
.4aba	38		sec				sec 								; convert type byte from $3A-$3F to 0..5
.4abb	e9 3a		sbc #$3a			sbc 	#$3A
.4abd	0a		asl a				asl 	a 							; multiply by hashTableSize (8 in this case)
.4abe	0a		asl a				asl 	a
.4abf	0a		asl a				asl 	a
.4ac0	0a		asl a				asl 	a 							; 2 bytes/word
.4ac1	85 2a		sta $2a				sta 	temp0 						; this is the offset to the start of the table.
.4ac3	ad 1d 0e	lda $0e1d			lda 	varHash 					; get hash
.4ac6	29 07		and #$07			and 	#(hashTableSize-1)			; force into range (for 8,0..7)
.4ac8	0a		asl a				asl  	a 							; x 2 (for word) and clear carry
.4ac9	65 2a		adc $2a				adc 	temp0 						; now offset from the start of the hash table.
.4acb	69 68		adc #$68			adc 	#hashTables & $FF 			; add to hash table base address
.4acd	85 3b		sta $3b				sta 	hashList 					; making hashLists point to the head of the link list.
.4acf	a9 0a		lda #$0a			lda 	#hashTables >> 8
.4ad1	69 00		adc #$00			adc 	#0
.4ad3	85 3c		sta $3c				sta 	hashList+1
.4ad5	68		pla				pla
.4ad6	a8		tay				tay
.4ad7	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/variable/create.asm

.4ad8					CreateVariable:
.4ad8	98		tya				tya 								; push Y on the stack twice.
.4ad9	48		pha				pha									; position in code of the new variable.
.4ada	48		pha				pha
.4adb	ae 1e 0e	ldx $0e1e			ldx 	varType 					; get var type 0-5 from the var type
.4ade	bd 02 4b	lda $4b02,x			lda		_CVSize-$3A,x 				; the bytes required for this new variable.
.4ae1	48		pha				pha 								; save length
.4ae2	a5 35		lda $35				lda 	lowMemory 					; set low Memory ptr to temp0
.4ae4	85 2a		sta $2a				sta 	temp0 						; (address of the new variable)
.4ae6	a5 36		lda $36				lda 	lowMemory+1
.4ae8	85 2b		sta $2b				sta 	temp0+1
.4aea	68		pla				pla 								; get length
.4aeb	18		clc				clc 								; add to low memory.
.4aec	65 35		adc $35				adc 	lowMemory
.4aee	85 35		sta $35				sta 	lowMemory
.4af0	90 08		bcc $4afa			bcc 	_CVNoCarry
.4af2	e6 36		inc $36				inc 	lowMemory+1
.4af4	a5 36		lda $36				lda 	lowMemory+1 				; check out of memory.
.4af6	c5 34		cmp $34				cmp 	highMemory+1
.4af8	b0 3d		bcs $4b37			bcs 	_CVMemory
.4afa					_CVNoCarry:
.4afa	ad 1d 0e	lda $0e1d			lda 	varHash 					; store hash at offset 4.
.4afd	a0 04		ldy #$04			ldy 	#4
.4aff	91 2a		sta ($2a),y			sta 	(temp0),y
.4b01	68		pla				pla 								; offset, work out where the variable name is.
.4b02	18		clc				clc
.4b03	65 28		adc $28				adc 	codePtr
.4b05	a0 02		ldy #$02			ldy 	#2 							; copy that into slots 2 + 3.
.4b07	91 2a		sta ($2a),y			sta 	(temp0),y
.4b09	a5 29		lda $29				lda 	codePtr+1
.4b0b	69 00		adc #$00			adc 	#0
.4b0d	c8		iny				iny
.4b0e	91 2a		sta ($2a),y			sta 	(temp0),y
.4b10	cd c9 0a	cmp $0ac9			cmp 	basePage+1 					; compare against the program base.
.4b13	b0 03		bcs $4b18			bcs 	_CVNotImmediate
.4b15	20 7a 4b	jsr $4b7a			jsr 	CloneVariableName 			; we need to clone the variable name (immediate mode)
.4b18					_CVNotImmediate:
.4b18	a0 00		ldy #$00			ldy 	#0 							; copy current hash pointer in link
.4b1a	b1 3b		lda ($3b),y			lda 	(hashList),y 				; so we're inserting it in the front of a linked list
.4b1c	91 2a		sta ($2a),y			sta 	(temp0),y
.4b1e	c8		iny				iny
.4b1f	b1 3b		lda ($3b),y			lda 	(hashList),y
.4b21	91 2a		sta ($2a),y			sta 	(temp0),y
.4b23	a5 2b		lda $2b				lda 	temp0+1 					; set new link
.4b25	91 3b		sta ($3b),y			sta 	(hashList),y
.4b27	88		dey				dey
.4b28	a5 2a		lda $2a				lda 	temp0
.4b2a	91 3b		sta ($3b),y			sta 	(hashList),y
.4b2c	ad 1e 0e	lda $0e1e			lda 	varType 					; type in A
.4b2f	a0 05		ldy #$05			ldy 	#5 							; offset in Y
.4b31	20 42 4b	jsr $4b42			jsr 	ZeroTemp0Y 					; zero (temp0),y with whatever type.
.4b34	68		pla				pla
.4b35	a8		tay				tay
.4b36	60		rts				rts
.4b37					_CVMemory:
.4b37	a2 22		ldx #$22			ldx 	#ErrorID_Memory
.4b39	20 18 15	jsr $1518		jsr	errorHandler
>4b3c	09 07				_CVSize:.byte 	VarHSize+VarISize,VarHSize+VarASize 					; <storage for integer>
>4b3e	07 07						.byte 	VarHSize+VarSSize,VarHSize+VarASize 					; <storage for string>
>4b40	0b 07						.byte 	VarHSize+VarFSize,VarHSize+VarASize 					; <storage for float>
.4b42					ZeroTemp0Y:
.4b42	4a		lsr a				lsr 	a 							; bit 0 in carry
.4b43	0a		asl a				asl 	a
.4b44	b0 19		bcs $4b5f			bcs 	_ZTExit 					; we don't initialise arrays.
.4b46	c9 3c		cmp #$3c			cmp 	#$3C 						; check string
.4b48	f0 16		beq $4b60			beq 	_ZTWriteNullString 			; write "" string
.4b4a	c9 3e		cmp #$3e			cmp 	#$3E 						; check float
.4b4c	f0 22		beq $4b70			beq 	_ZTWriteFloat
.4b4e	98		tya				tya
.4b4f	48		pha				pha
.4b50	a9 00		lda #$00			lda 	#0
.4b52	91 2a		sta ($2a),y			sta 	(temp0),y
.4b54	c8		iny				iny
.4b55	91 2a		sta ($2a),y			sta 	(temp0),y
.4b57	c8		iny				iny
.4b58	91 2a		sta ($2a),y			sta 	(temp0),y
.4b5a	c8		iny				iny
.4b5b	91 2a		sta ($2a),y			sta 	(temp0),y
.4b5d	68		pla				pla
.4b5e	a8		tay				tay
.4b5f					_ZTExit:
.4b5f	60		rts				rts
.4b60					_ZTWriteNullString:
.4b60	a9 00		lda #$00			lda 	#0 							; put a reference to null string as the default value.
.4b62	8d ce 0a	sta $0ace			sta 	NullString
.4b65	a9 ce		lda #$ce			lda 	#NullString & $FF
.4b67	91 2a		sta ($2a),y			sta 	(temp0),y
.4b69	a9 0a		lda #$0a			lda 	#NullString >> 8
.4b6b	c8		iny				iny
.4b6c	91 2a		sta ($2a),y			sta 	(temp0),y
.4b6e	88		dey				dey
.4b6f	60		rts				rts
.4b70					_ZTWriteFloat:
.4b70	8a		txa				txa
.4b71	48		pha				pha
.4b72	a2 20		ldx #$20		ldx	#32
.4b74	20 5c 24	jsr $245c		jsr	floatingpointHandler
.4b77	68		pla				pla
.4b78	aa		tax				tax
.4b79	60		rts				rts
.4b7a					CloneVariableName:
.4b7a	a0 02		ldy #$02			ldy 	#2 							; copy vname address to temp2
.4b7c	b1 2a		lda ($2a),y			lda 	(temp0),y
.4b7e	85 2e		sta $2e				sta 	temp2
.4b80	c8		iny				iny
.4b81	b1 2a		lda ($2a),y			lda 	(temp0),y
.4b83	85 2f		sta $2f				sta 	temp2+1
.4b85	a5 36		lda $36				lda 	lowMemory+1 				; copy lowMemory address to (temp0),2/3
.4b87	91 2a		sta ($2a),y			sta 	(temp0),y
.4b89	88		dey				dey
.4b8a	a5 35		lda $35				lda 	lowMemory
.4b8c	91 2a		sta ($2a),y			sta 	(temp0),y
.4b8e	a0 00		ldy #$00			ldy 	#0 							; copy data from (temp2) to (lowMemory)
.4b90					_CVNCopy:
.4b90	b1 2e		lda ($2e),y			lda		(temp2),y
.4b92	91 35		sta ($35),y			sta 	(lowMemory),y
.4b94	c8		iny				iny
.4b95	c9 3a		cmp #$3a			cmp 	#$3A 						; until the whole name has been copied.
.4b97	90 f7		bcc $4b90			bcc 	_CVNCopy
.4b99	98		tya				tya 								; add Y to low memory
.4b9a	18		clc				clc
.4b9b	65 35		adc $35				adc 	lowMemory
.4b9d	85 35		sta $35				sta 	lowMemory
.4b9f	90 02		bcc $4ba3			bcc 	_CVNNoCarry
.4ba1	e6 36		inc $36				inc 	lowMemory+1
.4ba3					_CVNNoCarry:
.4ba3	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/variable/find.asm

.4ba4					FindVariable:
.4ba4	98		tya				tya
.4ba5	48		pha				pha
.4ba6	98		tya				tya 								; point temp2 to the actual name
.4ba7	18		clc				clc 								; in memory of the variable being created
.4ba8	65 28		adc $28				adc 	codePtr
.4baa	85 2e		sta $2e				sta 	temp2
.4bac	a5 29		lda $29				lda 	codePtr+1
.4bae	69 00		adc #$00			adc 	#0
.4bb0	85 2f		sta $2f				sta 	temp2+1
.4bb2	a0 00		ldy #$00			ldy 	#0
.4bb4	a5 3b		lda $3b				lda 	hashList 					; copy hashlist to temp0
.4bb6	85 2a		sta $2a				sta 	temp0
.4bb8	a5 3c		lda $3c				lda 	hashList+1
.4bba	85 2b		sta $2b				sta 	temp0+1
.4bbc	a0 01		ldy #$01	_FVNext:ldy 	#1 							; get MSB
.4bbe	b1 2a		lda ($2a),y			lda 	(temp0),y
.4bc0	f0 2c		beq $4bee			beq 	_FVFail
.4bc2	aa		tax				tax
.4bc3	88		dey				dey		 							; get LSB
.4bc4	b1 2a		lda ($2a),y			lda 	(temp0),y
.4bc6	85 2a		sta $2a				sta 	temp0 						; update pointer.
.4bc8	86 2b		stx $2b				stx 	temp0+1
.4bca	a0 04		ldy #$04			ldy 	#4 							; check hashes match
.4bcc	b1 2a		lda ($2a),y			lda 	(temp0),y
.4bce	cd 1d 0e	cmp $0e1d			cmp 	varHash
.4bd1	d0 e9		bne $4bbc			bne 	_FVNext 					; if not, no point in checking the name.
.4bd3	88		dey				dey 								; copy name pointer (+2,+3) to temp1.
.4bd4	b1 2a		lda ($2a),y			lda 	(temp0),y
.4bd6	85 2d		sta $2d				sta 	temp1+1
.4bd8	88		dey				dey
.4bd9	b1 2a		lda ($2a),y			lda 	(temp0),y
.4bdb	85 2c		sta $2c				sta 	temp1
.4bdd	a0 00		ldy #$00			ldy 	#0
.4bdf					_FVCheck:
.4bdf	b1 2c		lda ($2c),y			lda 	(temp1),y 					; compare names
.4be1	d1 2e		cmp ($2e),y			cmp 	(temp2),y
.4be3	d0 d7		bne $4bbc			bne 	_FVNext		 				; fail if different.
.4be5	c8		iny				iny
.4be6	c9 3a		cmp #$3a			cmp 	#$3A 						; until reached the end marker.
.4be8	90 f5		bcc $4bdf			bcc 	_FVCheck
.4bea	68		pla				pla
.4beb	a8		tay				tay
.4bec	38		sec				sec
.4bed	60		rts				rts
.4bee					_FVFail:
.4bee	68		pla				pla
.4bef	a8		tay				tay
.4bf0	18		clc				clc
.4bf1	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/variable/reset.asm

.4bf2					HashTableReset:
.4bf2	a2 60		ldx #$60			ldx 	#6*2*hashTableSize			; 6 types, 2 bytes per table entry.
.4bf4	a9 00		lda #$00			lda 	#0
.4bf6					_HTRClear:
.4bf6	9d 67 0a	sta $0a67,x			sta 	hashTables-1,x
.4bf9	ca		dex				dex
.4bfa	d0 fa		bne $4bf6			bne 	_HTRClear
.4bfc	60		rts				rts

;******  Return to file: variable/variable.asm

.4bfd					variableHandler:
.4bfd	7c 00 4c	jmp ($4c00,x)			jmp 	(variableVectors,x)
.4c00					variableVectors:
>4c00	08 4c					.word _DummyControlHandler ; index 0
>4c02	34 4a					.word AccessVariable       ; index 2
>4c04	c4 48					.word CreateArray          ; index 4
>4c06	f2 4b					.word HashTableReset       ; index 6
.4c08					_DummyControlHandler:
.4c08	60		rts			rts

;******  Return to file: basic.asm

.4c09					section_end_variable:
.4c09					section_start_footer:

;******  Processing file: footer/footer.asm


;******  Processing file: footer/99end.asm

.003d					endZeroPage:
.0e20					endStorage:
>4c09							.align 	256
.4d00					programMemory:
>4cff	ff						.byte 	$FF

;******  Return to file: footer/footer.asm


;******  Return to file: basic.asm

.4d00					section_end_footer:

;******  End of listing
