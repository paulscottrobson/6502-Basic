
; 64tass Turbo Assembler Macro V1.55.2200 listing file
; 64tass -Walias -Wmacro-prefix -Wall -q -c -L ..\source\bin\basic.lst -l ..\source\bin\basic.lbl -Wall -o ..\source\bin\stub.prg basic.asm
; Fri Apr 09 06:25:56 2021

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: basic.asm

=1					cputype = 1
=1					autorun = 1
=0					coldstartnew = 0
=$1000					CodeStart = $1000
=$800					MemoryStorage = $800
=$9f00					EndOfMemory = $9F00
=$28					ZeroPageStorage = $28
=$90					StackAddress = $90
=8					StackSize = 8
=2					retStackSizePages = 2

;******  Processing file: header/01common.inc


;******  Processing file: header/../generated/installed.inc

=1					installed_header = 1
=1					installed_main = 1
=1					installed_variable = 1
=1					installed_assembler = 1
=1					installed_error = 1
=1					installed_extension = 1
=1					installed_string = 1
=1					installed_device = 1
=0					installed_floatingpoint = 0
=1					installed_interaction = 1
=1					installed_tokeniser = 1
=1					installed_footer = 1

;******  Return to file: header/01common.inc

=8					hashTableSize = 8			; if this changes, the calculation is AccessSetup has to match it.
="G"					markerGOSUB = 'G'
="R"					markerREPEAT = 'R'
="F"					markerFOR = 'F'
="W"					markerWHILE = 'W'
="P"					markerPROC = 'P'
="$"					markerSTRING = '$'
="#"					markerFLOAT = '#'
="%"					markerINT = '%'
=5					VarHSize = 5 								; header (2 link, 2 name, 1 hash)
=2					VarASize = 2 								; array [address of first level]
=4					VarISize = 4 								; integer (32 bit)
=6					VarFSize = 6 								; float (4 mantissa, 1 exponent 1 sign/zero)
=2					VarSSize = 2 								; address (2 bytes)

;******  Return to file: basic.asm


;******  Processing file: header/02macros.inc


;******  Return to file: basic.asm


;******  Processing file: header/03data.inc

>0028					codePtr:.fill 	2							; (codePtr),y points to code.
>002a					temp0: 	.fill 	2							; working variables.
>002c					temp1: 	.fill 	2
>002e					temp2: 	.fill 	2
>0030					temp3: 	.fill 	2
.0032					tempshort:
>0032							.fill 	1
.0033					highMemory:
>0033							.fill 	2
.0035					lowMemory:
>0035							.fill 	2
>0800							.align	256
.0800					returnStack:
>0800							.fill 	retStackSizePages * 256
=512					retStackSize = retStackSizePages * 256
.0a00					SingleLetterVar:
>0a00					 		.fill 	26*4
.0a68					currentStorage:
>0090					esType:	.fill 	StackSize  					; type byte (see above)
>0098					esInt0:	.fill 	StackSize 					; integer or mantissa
>00a0					esInt1:	.fill 	StackSize
>00a8					esInt2:	.fill 	StackSize
>00b0					esInt3:	.fill 	StackSize
>00b8					esExp:	.fill 	StackSize 					; exponent ($80 = 0)
>00c0					esZSign:.fill 	StackSize 					; for floating point - sign (bit 7) isZero (bit 6)
.00c8					endOfStack:
=$98					esMant0 = esInt0 							; synonyms.
=$a0					esMant1 = esInt1
=$a8					esMant2 = esInt2
=$b0					esMant3 = esInt3
.0a68					hashTables:
>0a68							.fill 	6*2*hashTableSize
.0ac8					basePage:
>0ac8							.fill 	2
.0aca					endProgram:
>0aca							.fill 	2
.0acc					endMemory:
>0acc							.fill 	2
.0ace					NullString:
>0ace							.fill 	1							; don't waste memory concreting null strings.
.0acf					convertBuffer:
>0acf							.fill 	35
.0af2					jumpVector:
>0af2							.fill 	2

;******  Processing file: header/../generated/tokenconst.inc

=$80					TOK_EOL=$80
=$81					TOK_SHIFT1=$81
=$82					TOK_SHIFT2=$82
=$83					TOK_SHIFT3=$83
=$84					TOK_FPC=$84
=$85					TOK_STR=$85
=$86					TOK_BINARYST=$86
=$99					TOK_STRUCTST=$99
=$a4					TOK_UNARYST=$a4
=$c9					TOK_TOKENS=$c9
=$86					TKW_AND                      = $86 ; and
=$87					TKW_OR                       = $87 ; or
=$88					TKW_XOR                      = $88 ; xor
=$89					TKW_GREATEREQUAL             = $89 ; >=
=$8a					TKW_LESSEQUAL                = $8a ; <=
=$8b					TKW_GREATER                  = $8b ; >
=$8c					TKW_LESS                     = $8c ; <
=$8d					TKW_EQUAL                    = $8d ; =
=$8e					TKW_LESSGREATER              = $8e ; <>
=$8f					TKW_PLUS                     = $8f ; +
=$90					TKW_MINUS                    = $90 ; -
=$91					TKW_GREATERGREATER           = $91 ; >>
=$92					TKW_LESSLESS                 = $92 ; <<
=$93					TKW_STAR                     = $93 ; *
=$94					TKW_SLASH                    = $94 ; /
=$95					TKW_MOD                      = $95 ; mod
=$96					TKW_HAT                      = $96 ; ^
=$97					TKW_PLING                    = $97 ; !
=$98					TKW_QMARK                    = $98 ; ?
=$99					TKW_REPEAT                   = $99 ; repeat
=$9a					TKW_WHILE                    = $9a ; while
=$9b					TKW_FOR                      = $9b ; for
=$9c					TKW_IF                       = $9c ; if
=$9d					TKW_DEFPROC                  = $9d ; defproc
=$9e					TKW_UNTIL                    = $9e ; until
=$9f					TKW_WEND                     = $9f ; wend
=$a0					TKW_NEXT                     = $a0 ; next
=$a1					TKW_THEN                     = $a1 ; then
=$a2					TKW_ENDIF                    = $a2 ; endif
=$a3					TKW_ENDPROC                  = $a3 ; endproc
=$a4					TKW_LPAREN                   = $a4 ; (
=$a5					TKW_LENLPAREN                = $a5 ; len(
=$a6					TKW_SGNLPAREN                = $a6 ; sgn(
=$a7					TKW_ABSLPAREN                = $a7 ; abs(
=$a8					TKW_RANDOMLPAREN             = $a8 ; random(
=$a9					TKW_PAGE                     = $a9 ; page
=$aa					TKW_TRUE                     = $aa ; true
=$ab					TKW_FALSE                    = $ab ; false
=$ac					TKW_MINLPAREN                = $ac ; min(
=$ad					TKW_MAXLPAREN                = $ad ; max(
=$ae					TKW_SYSLPAREN                = $ae ; sys(
=$af					TKW_TIMERLPAREN              = $af ; timer(
=$b0					TKW_EVENTLPAREN              = $b0 ; event(
=$b1					TKW_GETLPAREN                = $b1 ; get(
=$b2					TKW_INKEYLPAREN              = $b2 ; inkey(
=$b3					TKW_ALLOCLPAREN              = $b3 ; alloc(
=$b4					TKW_CHRDOLLARLPAREN          = $b4 ; chr$(
=$b5					TKW_LEFTDOLLARLPAREN         = $b5 ; left$(
=$b6					TKW_MIDDOLLARLPAREN          = $b6 ; mid$(
=$b7					TKW_RIGHTDOLLARLPAREN        = $b7 ; right$(
=$b8					TKW_STRDOLLARLPAREN          = $b8 ; str$(
=$b9					TKW_VALLPAREN                = $b9 ; val(
=$ba					TKW_PEEKLPAREN               = $ba ; peek(
=$bb					TKW_DEEKLPAREN               = $bb ; deek(
=$bc					TKW_LEEKLPAREN               = $bc ; leek(
=$bd					TKW_ASCLPAREN                = $bd ; asc(
=$be					TKW_INTLPAREN                = $be ; int(
=$bf					TKW_FLOATLPAREN              = $bf ; float(
=$c0					TKW_ISVALLPAREN              = $c0 ; isval(
=$c1					TKW_UPPERDOLLARLPAREN        = $c1 ; upper$(
=$c2					TKW_LOWERDOLLARLPAREN        = $c2 ; lower$(
=$c3					TKW_ATC                      = $c3 ; @
=$c4					TKW_WAVY                     = $c4 ; ~
=$c5					TKW_AMP                      = $c5 ; &
=$c6					TKW_GETDOLLARLPAREN          = $c6 ; get$(
=$c7					TKW_INKEYDOLLARLPAREN        = $c7 ; inkey$(
=$c8					TKW_MEM                      = $c8 ; mem
=$c9					TKW_RPAREN                   = $c9 ; )
=$ca					TKW_COLON                    = $ca ; :
=$cb					TKW_COMMA                    = $cb ; ,
=$cc					TKW_SEMICOLON                = $cc ; ;
=$cd					TKW_QUOTE                    = $cd ; '
=$ce					TKW_TO                       = $ce ; to
=$cf					TKW_STEP                     = $cf ; step
=$d0					TKW_PROC                     = $d0 ; proc
=$d1					TKW_LOCAL                    = $d1 ; local
=$d2					TKW_DIM                      = $d2 ; dim
=$d3					TKW_REM                      = $d3 ; rem
=$d4					TKW_LET                      = $d4 ; let
=$d5					TKW_INPUT                    = $d5 ; input
=$d6					TKW_ELSE                     = $d6 ; else
=$d7					TKW_VDU                      = $d7 ; vdu
=$d8					TKW_PRINT                    = $d8 ; print
=$d9					TKW_DATA                     = $d9 ; data
=$da					TKW_IMAGE                    = $da ; image
=$db					TKW_AT                       = $db ; at
=$dc					TKW_FLIP                     = $dc ; flip
=$dd					TKW_ASSERT                   = $dd ; assert
=$de					TKW_POKE                     = $de ; poke
=$df					TKW_DOKE                     = $df ; doke
=$e0					TKW_LOKE                     = $e0 ; loke
=$e1					TKW_INK                      = $e1 ; ink
=$e2					TKW_PAPER                    = $e2 ; paper
=$e3					TKW_CLS                      = $e3 ; cls
=$e4					TKW_LOCATE                   = $e4 ; locate
=$e5					TKW_PERIOD                   = $e5 ; .
=$e6					TKW_FROM                     = $e6 ; from
=$e7					TKW_HASH                     = $e7 ; #
=$e8					TKW_CLEAR                    = $e8 ; clear
=$e9					TKW_TEXT                     = $e9 ; text
=$ea					TKW_TYPE                     = $ea ; type
=$86					TKW_LOAD                     = $86 ; load
=$87					TKW_SAVE                     = $87 ; save
=$88					TKW_LIST                     = $88 ; list
=$89					TKW_NEW                      = $89 ; new
=$8a					TKW_BREAK                    = $8a ; break
=$8b					TKW_RUN                      = $8b ; run
=$8c					TKW_READ                     = $8c ; read
=$8d					TKW_RESTORE                  = $8d ; restore
=$8e					TKW_END                      = $8e ; end
=$8f					TKW_STOP                     = $8f ; stop
=$90					TKW_XEMU                     = $90 ; xemu
=$91					TKW_GOTO                     = $91 ; goto
=$92					TKW_GOSUB                    = $92 ; gosub
=$93					TKW_RETURN                   = $93 ; return
=$94					TKW_ORA                      = $94 ; ora
=$95					TKW_LPARENANDRPAREN          = $95 ; (and)
=$96					TKW_EOR                      = $96 ; eor
=$97					TKW_ADC                      = $97 ; adc
=$98					TKW_STA                      = $98 ; sta
=$99					TKW_LDA                      = $99 ; lda
=$9a					TKW_CMP                      = $9a ; cmp
=$9b					TKW_SBC                      = $9b ; sbc
=$9c					TKW_ASL                      = $9c ; asl
=$9d					TKW_ROL                      = $9d ; rol
=$9e					TKW_LSR                      = $9e ; lsr
=$9f					TKW_ROR                      = $9f ; ror
=$a0					TKW_STX                      = $a0 ; stx
=$a1					TKW_LDX                      = $a1 ; ldx
=$a2					TKW_DEC                      = $a2 ; dec
=$a3					TKW_INC                      = $a3 ; inc
=$a4					TKW_STZ                      = $a4 ; stz
=$a5					TKW_BIT                      = $a5 ; bit
=$a6					TKW_STY                      = $a6 ; sty
=$a7					TKW_LDY                      = $a7 ; ldy
=$a8					TKW_CPY                      = $a8 ; cpy
=$a9					TKW_CPX                      = $a9 ; cpx
=$aa					TKW_TSB                      = $aa ; tsb
=$ab					TKW_TRB                      = $ab ; trb
=$ac					TKW_JSR                      = $ac ; jsr
=$ad					TKW_JMP                      = $ad ; jmp
=$ae					TKW_BPL                      = $ae ; bpl
=$af					TKW_BMI                      = $af ; bmi
=$b0					TKW_BVC                      = $b0 ; bvc
=$b1					TKW_BVS                      = $b1 ; bvs
=$b2					TKW_BCC                      = $b2 ; bcc
=$b3					TKW_BCS                      = $b3 ; bcs
=$b4					TKW_BNE                      = $b4 ; bne
=$b5					TKW_BEQ                      = $b5 ; beq
=$b6					TKW_BRA                      = $b6 ; bra
=$b7					TKW_BRK                      = $b7 ; brk
=$b8					TKW_PHP                      = $b8 ; php
=$b9					TKW_CLC                      = $b9 ; clc
=$ba					TKW_PLP                      = $ba ; plp
=$bb					TKW_SEC                      = $bb ; sec
=$bc					TKW_RTI                      = $bc ; rti
=$bd					TKW_PHA                      = $bd ; pha
=$be					TKW_CLI                      = $be ; cli
=$bf					TKW_PHY                      = $bf ; phy
=$c0					TKW_RTS                      = $c0 ; rts
=$c1					TKW_PLA                      = $c1 ; pla
=$c2					TKW_SEI                      = $c2 ; sei
=$c3					TKW_PLY                      = $c3 ; ply
=$c4					TKW_DEY                      = $c4 ; dey
=$c5					TKW_TXA                      = $c5 ; txa
=$c6					TKW_TYA                      = $c6 ; tya
=$c7					TKW_TXS                      = $c7 ; txs
=$c8					TKW_TAY                      = $c8 ; tay
=$c9					TKW_TAX                      = $c9 ; tax
=$ca					TKW_CLV                      = $ca ; clv
=$cb					TKW_TSX                      = $cb ; tsx
=$cc					TKW_INY                      = $cc ; iny
=$cd					TKW_DEX                      = $cd ; dex
=$ce					TKW_CLD                      = $ce ; cld
=$cf					TKW_PHX                      = $cf ; phx
=$d0					TKW_INX                      = $d0 ; inx
=$d1					TKW_NOP                      = $d1 ; nop
=$d2					TKW_SED                      = $d2 ; sed
=$d3					TKW_PLX                      = $d3 ; plx
=$86					TKW_VPOKE                    = $86 ; vpoke
=$87					TKW_VDOKE                    = $87 ; vdoke
=$88					TKW_VLOAD                    = $88 ; vload
=$89					TKW_MODE                     = $89 ; mode
=$8a					TKW_PALETTE                  = $8a ; palette
=$8b					TKW_SPRITE                   = $8b ; sprite
=$8c					TKW_CLG                      = $8c ; clg
=$8d					TKW_RECT                     = $8d ; rect
=$8e					TKW_FRAME                    = $8e ; frame
=$8f					TKW_DRAW                     = $8f ; draw
=$90					TKW_PLOT                     = $90 ; plot
=$91					TKW_LINE                     = $91 ; line
=$92					TKW_PAINT                    = $92 ; paint
=$93					TKW_SOUND                    = $93 ; sound
=$86					TKW_VPEEKLPAREN              = $86 ; vpeek(
=$87					TKW_VDEEKLPAREN              = $87 ; vdeek(
=$88					TKW_SPRITEPERIODXLPAREN      = $88 ; sprite.x(
=$89					TKW_SPRITEPERIODYLPAREN      = $89 ; sprite.y(
=$8a					TKW_HITLPAREN                = $8a ; hit(
=$8b					TKW_JOYPERIODXLPAREN         = $8b ; joy.x(
=$8c					TKW_JOYPERIODYLPAREN         = $8c ; joy.y(
=$8d					TKW_JOYPERIODBLPAREN         = $8d ; joy.b(
=$8e					TKW_CLOCKLPAREN              = $8e ; clock(
=$8f					TKW_PLAYINGLPAREN            = $8f ; playing(

;******  Return to file: header/03data.inc

=$3a					TYPE_INT =		($3A) 						; type bytes that end identifier.
=$3b					TYPE_INTARRAY =	($3B)
=$3c					TYPE_STR =		($3C)
=$3d					TYPE_STRARRAY =	($3D)
=$3e					TYPE_FLOAT =	($3E)
=$3f					TYPE_FLOATARRAY=($3F)

;******  Processing file: header/../generated/asmconst.inc

=$94					TKA_GROUP1 = $94
=$9c					TKA_GROUP2 = $9c
=$ae					TKA_GROUP3 = $ae
=$b7					TKA_GROUP4 = $b7
=$d4					TKA_END4 = $d4

;******  Return to file: header/03data.inc


;******  Return to file: basic.asm


;******  Processing file: header/header.inc


;******  Return to file: basic.asm


;******  Processing file: assembler/asmconst.inc

=0					AMD_IMM		= 0					; Immediate mode.
=1					AMD_ZERO 	= 1					; Zero Page
=2					AMD_ACCIMP	= 2					; Accumulator/Implied
=3					AMD_ABS 	= 3					; Absolute
=4					AMD_ZEROINDY= 4					; Zero Indirect,Y
=5					AMD_ZEROX 	= 5					; Zero Page,X
=6					AMD_ABSY 	= 6					; Absolute,Y
=7					AMD_ABSX 	= 7					; Absolute,X
=8					AMD_ZEROIND = 8					; Zero Indirect
=9					AMD_ZEROY 	= 9					; Zero Page,Y
=10					AMD_ABSIND 	= 10				; Absolute Indirect
=11					AMD_ABSINDX	= 11				; Absolute Indirect Indexed
=12					AMD_REL		= 12				; Relative
=13					AMD_ZEROINDX= 13 				; Zero Indirect,X

;******  Return to file: basic.asm


;******  Processing file: assembler/assembler.inc


;******  Return to file: basic.asm


;******  Processing file: device/device.inc


;******  Return to file: basic.asm


;******  Processing file: error/error.inc


;******  Return to file: basic.asm


;******  Processing file: error/errorhandler.inc


;******  Processing file: error/../generated/errorid.inc

=1					ErrorID_Missing = 1 ; Feature not Present
=2					ErrorID_Syntax = 2 ; Syntax Error
=3					ErrorID_NoModule = 3 ; Module disabled
=4					ErrorID_Assert = 4 ; Assertion failed
=5					ErrorID_DivZero = 5 ; Divide By Zero
=6					ErrorID_Stop = 6 ; Stop
=7					ErrorID_BadType = 7 ; Type Mismatch
=8					ErrorID_BadValue = 8 ; Illegal Value
=9					ErrorID_MissingRP = 9 ; Missing right bracket
=10					ErrorID_MissingComma = 10 ; Missing comma
=11					ErrorID_NoReference = 11 ; Missing reference
=12					ErrorID_LineNumber = 12 ; Line Number not found
=13					ErrorID_StrLen = 13 ; String too long
=14					ErrorID_ReturnErr = 14 ; RETURN without GOSUB
=15					ErrorID_UntilErr = 15 ; UNTIL without REPEAT
=16					ErrorID_NextErr = 16 ; NEXT without FOR
=17					ErrorID_WendErr = 17 ; WEND without WHILE
=18					ErrorID_endprocErr = 18 ; ENDPROC without PROC
=19					ErrorID_BadIndex = 19 ; Bad NEXT index
=20					ErrorID_Struct = 20 ; Structures nested wrong
=21					ErrorID_NoAuto = 21 ; Cannot create variable
=22					ErrorID_RetStack = 22 ; Return stack out of space
=23					ErrorID_NoProc = 23 ; Unknown Procedure
=24					ErrorID_Params = 24 ; Parameters do not match
=25					ErrorID_DupArray = 25 ; Array already defined
=26					ErrorID_NotArray = 26 ; DIM requires array
=27					ErrorID_ArrayIndex = 27 ; Bad array index
=28					ErrorID_ArrayDepth = 28 ; Wrong number of array indices
=29					ErrorID_DataError = 29 ; Out of data
=30					ErrorID_Tokenise = 30 ; Cannot tokenise line
=31					ErrorID_Save = 31 ; Save failed
=32					ErrorID_Load = 32 ; Load failed
=33					ErrorID_Break = 33 ; Break
=34					ErrorID_Memory = 34 ; Out of memory
=35					ErrorID_NumStack = 35 ; Expression too complex
=36					ErrorID_Assembler = 36 ; Bad Operand/Mode
=37					ErrorID_Branch = 37 ; Branch out of range
=38					ErrorID_Label = 38 ; Label changed value
=39					ErrorID_NoSprite = 39 ; No Sprite Selected
=40					ErrorID_Hardware = 40 ; Hardware

;******  Return to file: error/errorhandler.inc


;******  Return to file: basic.asm


;******  Processing file: extension/extension.inc


;******  Return to file: basic.asm


;******  Processing file: extension/option_x16/x16const.inc

=64					X16MaxImages = 64 							; max # of sprite images.

;******  Return to file: basic.asm


;******  Processing file: floatingpoint/float.inc

=5					FloatEmbeddedSize = 5

;******  Return to file: basic.asm


;******  Processing file: floatingpoint/floatingpoint.inc


;******  Return to file: basic.asm


;******  Processing file: interaction/interaction.inc


;******  Return to file: basic.asm


;******  Processing file: main/main.inc


;******  Return to file: basic.asm


;******  Processing file: string/functions/memory.inc

=252					MaxStringSize = 252

;******  Return to file: basic.asm


;******  Processing file: string/string.inc


;******  Return to file: basic.asm


;******  Processing file: tokeniser/detokenise/colouring.inc

=$84					LTYLineNumber = $84
=$82					LTYPunctuation = $82
=$87					LTYIdentifier = $87
=$86					LTYConstant = $86
=$83					LTYKeyword = $83
=$81					LTYString = $81

;******  Return to file: basic.asm


;******  Processing file: tokeniser/tokeniser.inc


;******  Return to file: basic.asm


;******  Processing file: variable/variable.inc


;******  Return to file: basic.asm


;******  Processing file: footer/footer.inc


;******  Return to file: basic.asm

.1000					section_start_header:

;******  Processing file: header/header.asm


;******  Processing file: header/00start.asm

.1000					Start:
.1000	4c 0a 10	jmp $100a			jmp 	GoColdStart 				; +0 	boot BASIC
.1003	4c 58 10	jmp $1058			jmp 	GoTokTest					; +3 	run tokeniser test code.
>1006	5d 47						.word 	TokenTableAddress
.1008							else
>1008	00 00						.word 	0
.100a					GoColdStart:
.100a	a9 00		lda #$00			lda 	#(programMemory) & $FF
.100c	8d c8 0a	sta $0ac8			sta 	basePage
.100f	a9 4f		lda #$4f			lda 	#(programMemory) >> 8
.1011	8d c9 0a	sta $0ac9			sta 	1+(basePage)
.1014	a9 00		lda #$00			lda 	#(endOfMemory) & $FF
.1016	8d cc 0a	sta $0acc			sta 	endMemory
.1019	a9 9f		lda #$9f			lda 	#(endOfMemory) >> 8
.101b	8d cd 0a	sta $0acd			sta 	1+(endMemory)
.101e	20 26 10	jsr $1026			jsr 	InitialiseAll 				; initialise everything.
.1021	a2 02		ldx #$02		ldx	#2
.1023	20 96 29	jsr $2996		jsr	interactionHandler

;******  Processing file: header/../generated/initialiseall.asm

.1026					InitialiseAll:
.1026	a9 00		lda #$00		lda #0
.1028	a2 00		ldx #$00		ldx	#0
.102a	20 ac 13	jsr $13ac		jsr	assemblerHandler
.102d	a9 00		lda #$00		lda #0
.102f	a2 00		ldx #$00		ldx	#0
.1031	20 05 15	jsr $1505		jsr	deviceHandler
.1034	a9 00		lda #$00		lda #0
.1036	a2 00		ldx #$00		ldx	#0
.1038	20 96 29	jsr $2996		jsr	interactionHandler
.103b	a9 00		lda #$00		lda #0
.103d	a2 00		ldx #$00		ldx	#0
.103f	20 f5 3f	jsr $3ff5		jsr	mainHandler
.1042	a9 00		lda #$00		lda #0
.1044	a2 00		ldx #$00		ldx	#0
.1046	20 a0 42	jsr $42a0		jsr	stringHandler
.1049	a9 00		lda #$00		lda #0
.104b	a2 00		ldx #$00		ldx	#0
.104d	20 28 4b	jsr $4b28		jsr	tokeniserHandler
.1050	a9 00		lda #$00		lda #0
.1052	a2 00		ldx #$00		ldx	#0
.1054	20 e7 4e	jsr $4ee7		jsr	variableHandler
.1057	60		rts			rts

;******  Return to file: header/00start.asm

.1058					GoTokTest:
.1058	a2 06		ldx #$06		ldx	#6
.105a	20 28 4b	jsr $4b28		jsr	tokeniserHandler

;******  Return to file: header/header.asm


;******  Return to file: basic.asm

.105d					section_end_header:
.105d					section_start_assembler:

;******  Processing file: assembler/assembler.asm


;******  Processing file: assembler/asmoperand.asm

.105d					AsmGetOperand:
.105d	a2 00		ldx #$00			ldx 	#0 							; clear the operand.
.105f	8a		txa				txa
.1060	95 98		sta $98,x			sta 	esInt0,x
.1062	95 a0		sta $a0,x			sta 	esInt1,x
.1064	95 a8		sta $a8,x			sta 	esInt2,x
.1066	95 b0		sta $b0,x			sta 	esInt3,x
.1068	b1 28		lda ($28),y			lda 	(codePtr),y 				; first character into X
.106a	aa		tax				tax
.106b	a9 02		lda #$02			lda 	#AMD_ACCIMP
.106d	e0 80		cpx #$80			cpx 	#TOK_EOL 					; if end of line or colon, return implied mode.
.106f	f0 41		beq $10b2			beq 	_AGOExit 					; e.g. "INX"
.1071	e0 ca		cpx #$ca			cpx 	#TKW_COLON
.1073	f0 3d		beq $10b2			beq 	_AGOExit
.1075	c8		iny				iny 								; consume the token
.1076	a9 00		lda #$00			lda 	#AMD_IMM
.1078	e0 e7		cpx #$e7			cpx 	#TKW_HASH 					; if a hash present, then immediate mode.
.107a	f0 2d		beq $10a9			beq		_AGOEvalExit 				; with an operand.
.107c	e0 a4		cpx #$a4			cpx 	#TKW_LPAREN 				; left bracket ? so it is lda (something
.107e	f0 40		beq $10c0			beq 	_AGOIndirect
.1080	e0 01		cpx #$01			cpx 	#$01 						; is it "A" e.g. the variable A on its own. This is for ASL A
.1082	d0 0b		bne $108f			bne 	_AGOZeroPage1 				; if not it is zero zero,x zero,y, unpick 1 iny
.1084	b1 28		lda ($28),y			lda 	(codePtr),y 				; get the second character & consume it - this should be $3A
.1086	c8		iny				iny
.1087	aa		tax				tax
.1088	a9 02		lda #$02			lda 	#AMD_ACCIMP 				; and return Acc/Implied if it is just A
.108a	e0 3a		cpx #$3a			cpx 	#$3A
.108c	f0 24		beq $10b2			beq 	_AGOExit
.108e	88		dey				dey 								; unpick 2 iny
.108f					_AGOZeroPage1:
.108f	88		dey				dey
.1090	a9 00		lda #$00			lda 	#0 							; get the address into esInt0/1 (it may of course be absolute)
.1092	a2 0a		ldx #$0a		ldx	#10
.1094	20 f5 3f	jsr $3ff5		jsr	mainHandler
.1097	20 ef 10	jsr $10ef			jsr 	AsmGetIndexing 				; get ,X or ,Y if present
.109a	a9 01		lda #$01			lda 	#AMD_ZERO
.109c	90 14		bcc $10b2			bcc 	_AGOExit 					; neither present
.109e	a9 05		lda #$05			lda 	#AMD_ZEROX 					; decide if ,X or ,Y
.10a0	e0 00		cpx #$00			cpx 	#0
.10a2	f0 0e		beq $10b2			beq 	_AGOExit
.10a4	a9 09		lda #$09			lda 	#AMD_ZEROY
.10a6	4c b2 10	jmp $10b2			jmp 	_AGOExit
.10a9					_AGOEvalExit:
.10a9	48		pha				pha
.10aa	a9 00		lda #$00			lda 	#0 							; evaluate operand in root.
.10ac	a2 0a		ldx #$0a		ldx	#10
.10ae	20 f5 3f	jsr $3ff5		jsr	mainHandler
.10b1	68		pla				pla
.10b2					_AGOExit:
.10b2	48		pha				pha 								; save the mode
.10b3	a5 a8		lda $a8				lda 	esInt2 						; check the operand is zero.
.10b5	05 b0		ora $b0				ora 	esInt3
.10b7	d0 02		bne $10bb			bne 	_AGOValue
.10b9	68		pla				pla
.10ba	60		rts				rts
.10bb					_AGOValue:
.10bb	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.10bd	20 27 15	jsr $1527		jsr	errorHandler
.10c0					_AGOIndirect:
.10c0	a9 00		lda #$00			lda 	#0 							; evaluate operand in root.
.10c2	a2 0a		ldx #$0a		ldx	#10
.10c4	20 f5 3f	jsr $3ff5		jsr	mainHandler
.10c7	b1 28		lda ($28),y			lda 	(codePtr),y 				; does ) follow ? if so might be ) or ),Y
.10c9	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.10cb	f0 11		beq $10de			beq 	_AGOIndIndY
.10cd	20 ef 10	jsr $10ef			jsr 	ASMGetIndexing 				; must be ,X) so get the ending and error on anything else.
.10d0	90 39		bcc $110b			bcc 	AGISyntax
.10d2	e0 00		cpx #$00			cpx 	#0
.10d4	d0 35		bne $110b			bne 	AGISyntax
.10d6	a2 04		ldx #$04		ldx	#4
.10d8	20 f5 3f	jsr $3ff5		jsr	mainHandler
.10db	a9 0d		lda #$0d			lda 	#AMD_ZEROINDX
.10dd	60		rts				rts
.10de					_AGOIndIndY:
.10de	c8		iny				iny
.10df	20 ef 10	jsr $10ef			jsr 	ASMGetIndexing 				; get indexing if any
.10e2	a9 08		lda #$08			lda 	#AMD_ZEROIND
.10e4	90 cc		bcc $10b2			bcc 	_AGOExit 					; none then exit
.10e6	e0 00		cpx #$00			cpx 	#0 							; must be ,Y
.10e8	f0 21		beq $110b			beq 	AGISyntax
.10ea	a9 04		lda #$04			lda 	#AMD_ZEROINDY
.10ec	4c b2 10	jmp $10b2			jmp 	_AGOExit
.10ef					AsmGetIndexing:
.10ef	b1 28		lda ($28),y			lda 	(codePtr),y 				; check for comma (e.g. ,X ,Y)
.10f1	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.10f3	18		clc				clc
.10f4	d0 14		bne $110a			bne 	_AGIExit 					; no comma, return with CC
.10f6	c8		iny				iny 								; get what SHOULD be X or Y
.10f7	b1 28		lda ($28),y			lda 	(codePtr),y  				; read it
.10f9	38		sec				sec 								; subtract 6 bit ASCII of X
.10fa	e9 18		sbc #$18			sbc 	#"X" & $3F
.10fc	c9 02		cmp #$02			cmp 	#2 							; if unsigned >= 2 then error
.10fe	b0 0b		bcs $110b			bcs 	AGISyntax
.1100	aa		tax				tax 								; put in index
.1101	c8		iny				iny 								; get what follows that, should be the $3A marker
.1102	b1 28		lda ($28),y			lda 	(codePtr),y
.1104	c8		iny				iny
.1105	c9 3a		cmp #$3a			cmp 	#$3A
.1107	d0 02		bne $110b			bne 	AGISyntax
.1109	38		sec				sec 								; return CS and index mode in X
.110a					_AGIExit:
.110a	60		rts				rts
.110b					AGISyntax:
.110b	a2 02		ldx #$02			ldx 	#ErrorID_syntax
.110d	20 27 15	jsr $1527		jsr	errorHandler

;******  Return to file: assembler/assembler.asm


;******  Processing file: assembler/asmwrite.asm

.0af4					finalOpcode:
>0af4							.fill 	1
.1110					AsmWriteInstruction:
.1110	8d f4 0a	sta $0af4			sta 	finalOpcode					; save opcode.
.1113	5a		phy				phy
.1114	ad 38 0a	lda $0a38			lda 	SingleLetterVar+("O"-"A")*4	; check O (e.g. what do we display/check.)
.1117	29 02		and #$02			and 	#2
.1119	f0 2b		beq $1146			beq 	_ASMWNoEcho 				; if bit 2 zero then don't echo.
.111b	ad 3d 0a	lda $0a3d			lda 	SingleLetterVar+("P"-"A")*4+1 ; write address in P
.111e	20 80 11	jsr $1180			jsr 	AWIWriteHex
.1121	ad 3c 0a	lda $0a3c			lda 	SingleLetterVar+("P"-"A")*4
.1124	20 80 11	jsr $1180			jsr 	AWIWriteHex
.1127	ad f4 0a	lda $0af4			lda 	finalOpcode 				; write opcode
.112a	20 79 11	jsr $1179			jsr 	AWIWriteHexSpace
.112d	e0 00		cpx #$00			cpx 	#0
.112f	f0 0e		beq $113f			beq 	_ASMWEchoExit
.1131	a5 98		lda $98				lda 	esInt0
.1133	20 79 11	jsr $1179			jsr 	AWIWriteHexSpace
.1136	e0 01		cpx #$01			cpx 	#1
.1138	f0 05		beq $113f			beq 	_ASMWEchoExit
.113a	a5 a0		lda $a0				lda 	esInt1
.113c	20 79 11	jsr $1179			jsr 	AWIWriteHexSpace
.113f					_ASMWEchoExit:
.113f	da		phx				phx
.1140	a2 04		ldx #$04		ldx	#4
.1142	20 05 15	jsr $1505		jsr	deviceHandler
.1145	fa		plx				plx
.1146					_ASMWNoEcho:
.1146	ad f4 0a	lda $0af4			lda 	finalOpcode 				; opcode
.1149	20 60 11	jsr $1160			jsr 	AsmWriteByte
.114c	e0 00		cpx #$00			cpx 	#0	 						; exit if no operands
.114e	f0 0e		beq $115e			beq 	_ASMWExit
.1150	a5 98		lda $98				lda 	esInt0	 					; low byte
.1152	20 60 11	jsr $1160			jsr 	AsmWriteByte
.1155	e0 01		cpx #$01			cpx 	#1
.1157	f0 05		beq $115e			beq 	_ASMWExit
.1159	a5 a0		lda $a0				lda 	esInt1 						; high byte
.115b	20 60 11	jsr $1160			jsr 	AsmWriteByte
.115e					_ASMWExit:
.115e	7a		ply				ply
.115f	60		rts				rts
.1160					AsmWriteByte:
.1160	a0 00		ldy #$00			ldy 	#0
.1162	48		pha				pha
.1163	ad 3c 0a	lda $0a3c			lda 	SingleLetterVar+("P"-"A")*4 ; copy address to temp0
.1166	85 2a		sta $2a				sta 	temp0
.1168	ad 3d 0a	lda $0a3d			lda 	SingleLetterVar+("P"-"A")*4+1
.116b	85 2b		sta $2b				sta 	temp0+1
.116d	68		pla				pla 								; write out the byte.
.116e	91 2a		sta ($2a),y			sta 	(temp0),y
.1170	ee 3c 0a	inc $0a3c			inc 	SingleLetterVar+("P"-"A")*4	; increment P
.1173	d0 03		bne $1178			bne 	_AWBNoCarry
.1175	ee 3d 0a	inc $0a3d			inc 	SingleLetterVar+("P"-"A")*4+1
.1178					_AWBNoCarry:
.1178	60		rts				rts
.1179					AWIWriteHexSpace:
.1179	48		pha				pha
.117a	a9 20		lda #$20			lda 	#" "
.117c	20 93 11	jsr $1193			jsr 	AWIPrintChar
.117f	68		pla				pla
.1180					AWIWriteHex:
.1180	48		pha				pha
.1181	4a		lsr a				lsr 	a
.1182	4a		lsr a				lsr 	a
.1183	4a		lsr a				lsr 	a
.1184	4a		lsr a				lsr 	a
.1185	20 89 11	jsr $1189			jsr 	AWIPrintNibble
.1188	68		pla				pla
.1189					AWIPrintNibble:
.1189	29 0f		and #$0f			and 	#15
.118b	c9 0a		cmp #$0a			cmp 	#10
.118d	90 02		bcc $1191			bcc 	_AWIPNDigit
.118f	69 06		adc #$06			adc 	#6
.1191					_AWIPNDigit:
.1191	69 30		adc #$30			adc 	#48
.1193					AWIPrintChar:
.1193	85 32		sta $32				sta 	tempShort
.1195	da		phx				phx
.1196	a5 32		lda $32				lda 	tempShort
.1198	a2 14		ldx #$14		ldx	#20
.119a	20 05 15	jsr $1505		jsr	deviceHandler
.119d	fa		plx				plx
.119e	60		rts				rts

;******  Return to file: assembler/assembler.asm


;******  Processing file: assembler/assemblecmd.asm

.0af5					asmToken:
>0af5							.fill 	1
.0af6					asmMode:
>0af6							.fill 	1 							; esInt0/1
.0af7					asmBaseOpcode:
>0af7							.fill 	1
.119f					AssembleOneInstruction:
.119f	8d f5 0a	sta $0af5			sta 	asmToken 					; save the token
.11a2	aa		tax				tax
.11a3	bd 6c 11	lda $116c,x			lda 	OpcodeTable-TKA_GROUP1,x 	; get the base opcode.
.11a6	8d f7 0a	sta $0af7			sta 	asmBaseOpcode
.11a9	20 5d 10	jsr $105d			jsr 	AsmGetOperand 				; identify the address mode and operand where applicable.
.11ac	8d f6 0a	sta $0af6			sta 	asmMode
.11af	a5 a0		lda $a0				lda 	esInt1 						; check if this is a three byte operand.
.11b1	d0 05		bne $11b8			bne 	_AOIThreeBytes 				; if so, we have to use three byte, can't try zp before abs
.11b3	20 ce 11	jsr $11ce			jsr 	AssembleAttempt 			; try to assemble token/mode/operand (2 bytes)
.11b6	b0 10		bcs $11c8			bcs 	_AOISuccess 				; worked ok.
.11b8					_AOIThreeBytes:
.11b8	ae f6 0a	ldx $0af6			ldx 	asmMode 					; convert mode to 3 byte version, where possible.
.11bb	bd f2 11	lda $11f2,x			lda 	AbsoluteVersionTable,x
.11be	30 09		bmi $11c9			bmi 	_AOIError					; not possible, no equivalent.
.11c0	8d f6 0a	sta $0af6			sta 	asmMode
.11c3	20 ce 11	jsr $11ce			jsr 	AssembleAttempt 			; try to assemble token/mode/operand (3 bytes)
.11c6	90 01		bcc $11c9			bcc 	_AOIError 					; didn't work.
.11c8					_AOISuccess:
.11c8	60		rts				rts
.11c9					_AOIError:
.11c9	a2 24		ldx #$24			ldx 	#ErrorID_Assembler
.11cb	20 27 15	jsr $1527		jsr	errorHandler
.11ce					AssembleAttempt:
.11ce	20 d7 11	jsr $11d7			jsr 	_AADispatch 				; go to the code which dispatches to the appropriate
.11d1	b0 03		bcs $11d6			bcs 	_AAExit 					; exit if carry set, e.g. was successful
.11d3	20 7f 13	jsr $137f			jsr 	AssembleSpecialCase
.11d6					_AAExit:
.11d6	60		rts				rts
.11d7					_AADispatch:
.11d7	ad f5 0a	lda $0af5			lda 	asmToken
.11da	c9 b7		cmp #$b7			cmp 	#TKA_GROUP4
.11dc	b0 11		bcs $11ef			bcs 	_AAGroup4
.11de	c9 ae		cmp #$ae			cmp 	#TKA_GROUP3
.11e0	b0 0a		bcs $11ec			bcs 	_AAGroup3
.11e2	c9 9c		cmp #$9c			cmp 	#TKA_GROUP2
.11e4	b0 03		bcs $11e9			bcs 	_AAGroup2
.11e6	4c c5 12	jmp $12c5			jmp 	AssembleGroup1
.11e9					_AAGroup2:
.11e9	4c 20 13	jmp $1320			jmp 	AssembleGroup2
.11ec					_AAGroup3:
.11ec	4c 41 13	jmp $1341			jmp 	AssembleGroup3
.11ef					_AAGroup4:
.11ef	4c 75 13	jmp $1375			jmp 	AssembleGroup4
.11f2					AbsoluteVersionTable:
>11f2	ff						.byte	$FF 			; fail AMD_IMM
>11f3	03						.byte	AMD_ABS 		; absolute AMD_ZERO
>11f4	ff						.byte	$FF 			; fail AMD_ACCIMP
>11f5	ff						.byte	$FF 			; fail AMD_ABS
>11f6	ff						.byte 	$FF 			; fail AMD_ZEROINDY
>11f7	07						.byte	AMD_ABSX 		; absolute AMD_ZEROX
>11f8	ff						.byte	$FF 			; fail AMD_ABSY
>11f9	ff						.byte	$FF 			; fail AMD_ABSX
>11fa	0a						.byte	AMD_ABSIND 		; absolute AMD_ZEROIND
>11fb	06						.byte	AMD_ABSY 		; absolute AMD_ZEROY
>11fc	ff						.byte	$FF 			; fail AMD_ABSIND
>11fd	ff						.byte	$FF 			; fail AMD_ABSINDX
>11fe	ff						.byte	$FF 			; fail AMD_REL
>11ff	0b						.byte 	AMD_ABSINDX 	; absolute AMD_ZEROINDX

;******  Processing file: assembler/../generated/asmtables.inc

.1200					OpcodeTable:
>1200	01					.byte	$01			; $94 ora
>1201	21					.byte	$21			; $95 (and)
>1202	41					.byte	$41			; $96 eor
>1203	61					.byte	$61			; $97 adc
>1204	81					.byte	$81			; $98 sta
>1205	a1					.byte	$a1			; $99 lda
>1206	c1					.byte	$c1			; $9a cmp
>1207	e1					.byte	$e1			; $9b sbc
>1208	02					.byte	$02			; $9c asl
>1209	22					.byte	$22			; $9d rol
>120a	42					.byte	$42			; $9e lsr
>120b	62					.byte	$62			; $9f ror
>120c	82					.byte	$82			; $a0 stx
>120d	a2					.byte	$a2			; $a1 ldx
>120e	c2					.byte	$c2			; $a2 dec
>120f	e2					.byte	$e2			; $a3 inc
>1210	60					.byte	$60			; $a4 stz
>1211	20					.byte	$20			; $a5 bit
>1212	80					.byte	$80			; $a6 sty
>1213	a0					.byte	$a0			; $a7 ldy
>1214	c0					.byte	$c0			; $a8 cpy
>1215	e0					.byte	$e0			; $a9 cpx
>1216	00					.byte	$00			; $aa tsb
>1217	10					.byte	$10			; $ab trb
>1218	14					.byte	$14			; $ac jsr
>1219	40					.byte	$40			; $ad jmp
>121a	10					.byte	$10			; $ae bpl
>121b	30					.byte	$30			; $af bmi
>121c	50					.byte	$50			; $b0 bvc
>121d	70					.byte	$70			; $b1 bvs
>121e	90					.byte	$90			; $b2 bcc
>121f	b0					.byte	$b0			; $b3 bcs
>1220	d0					.byte	$d0			; $b4 bne
>1221	f0					.byte	$f0			; $b5 beq
>1222	80					.byte	$80			; $b6 bra
>1223	00					.byte	$00			; $b7 brk
>1224	08					.byte	$08			; $b8 php
>1225	18					.byte	$18			; $b9 clc
>1226	28					.byte	$28			; $ba plp
>1227	38					.byte	$38			; $bb sec
>1228	40					.byte	$40			; $bc rti
>1229	48					.byte	$48			; $bd pha
>122a	58					.byte	$58			; $be cli
>122b	5a					.byte	$5a			; $bf phy
>122c	60					.byte	$60			; $c0 rts
>122d	68					.byte	$68			; $c1 pla
>122e	78					.byte	$78			; $c2 sei
>122f	7a					.byte	$7a			; $c3 ply
>1230	88					.byte	$88			; $c4 dey
>1231	8a					.byte	$8a			; $c5 txa
>1232	98					.byte	$98			; $c6 tya
>1233	9a					.byte	$9a			; $c7 txs
>1234	a8					.byte	$a8			; $c8 tay
>1235	aa					.byte	$aa			; $c9 tax
>1236	b8					.byte	$b8			; $ca clv
>1237	ba					.byte	$ba			; $cb tsx
>1238	c8					.byte	$c8			; $cc iny
>1239	ca					.byte	$ca			; $cd dex
>123a	d8					.byte	$d8			; $ce cld
>123b	da					.byte	$da			; $cf phx
>123c	e8					.byte	$e8			; $d0 inx
>123d	ea					.byte	$ea			; $d1 nop
>123e	f8					.byte	$f8			; $d2 sed
>123f	fa					.byte	$fa			; $d3 plx
.1240					Group2OpcodeAvailability:
>1240	ae					.byte	$ae			; $9c asl $02
>1241	ae					.byte	$ae			; $9d rol $22
>1242	ae					.byte	$ae			; $9e lsr $42
>1243	ae					.byte	$ae			; $9f ror $62
>1244	0a					.byte	$0a			; $a0 stx $82
>1245	0b					.byte	$0b			; $a1 ldx $a2
>1246	aa					.byte	$aa			; $a2 dec $c2
>1247	aa					.byte	$aa			; $a3 inc $e2
>1248	22					.byte	$22			; $a4 stz $60
>1249	aa					.byte	$aa			; $a5 bit $20
>124a	2a					.byte	$2a			; $a6 sty $80
>124b	ab					.byte	$ab			; $a7 ldy $a0
>124c	2b					.byte	$2b			; $a8 cpy $c0
>124d	0b					.byte	$0b			; $a9 cpx $e0
>124e	0a					.byte	$0a			; $aa tsb $00
>124f	0a					.byte	$0a			; $ab trb $10
>1250	08					.byte	$08			; $ac jsr $14
>1251	08					.byte	$08			; $ad jmp $40
.1252					AssemblerSpecialCases:
>1252	ad 0a 6c				.byte	$ad,10,$6c		; jmp (abs)
>1255	ad 0b 7c				.byte	$ad,11,$7c		; jmp (abs,x)
>1258	a1 06 be				.byte	$a1,6,$be		; ldx abs,y
>125b	a1 09 b6				.byte	$a1,9,$b6		; ldx zp,y
>125e	a0 09 96				.byte	$a0,9,$96		; stx zp,y
>1261	a3 02 1a				.byte	$a3,2,$1a		; inc acc
>1264	a2 02 3a				.byte	$a2,2,$3a		; dec acc
>1267	a5 00 89				.byte	$a5,0,$89		; bit #
>126a	a4 03 9c				.byte	$a4,3,$9c		; stz abs
>126d	a4 07 9e				.byte	$a4,7,$9e		; stz abs,x
>1270	00					.byte	0

;******  Return to file: assembler/assemblecmd.asm


;******  Return to file: assembler/assembler.asm


;******  Processing file: assembler/assemblelabel.asm

.1271					AssembleLabel:
.1271	b1 28		lda ($28),y			lda 	(codePtr),y 				; check it's followed by a variable name.
.1273	c9 3a		cmp #$3a			cmp 	#$3A 						; e.g. it isn't just '.'
.1275	b0 49		bcs $12c0			bcs 	_ALSyntax
.1277	a9 00		lda #$00			lda 	#0							; get a variable name on to stack:0
.1279	a2 02		ldx #$02		ldx	#2
.127b	20 e7 4e	jsr $4ee7		jsr	variableHandler
.127e	a5 90		lda $90				lda 	esType 						; check integer reference
.1280	c9 80		cmp #$80			cmp 	#$80
.1282	d0 3c		bne $12c0			bne 	_ALSyntax
.1284	a5 98		lda $98				lda 	esInt0 						; copy that reference address to temp0
.1286	85 2a		sta $2a				sta 	temp0
.1288	a5 a0		lda $a0				lda 	esInt1
.128a	85 2b		sta $2b				sta 	temp0+1
.128c	5a		phy				phy
.128d	ad 38 0a	lda $0a38			lda 	SingleLetterVar+("O"-"A")*4	; are we in Pass 2 ?
.1290	4a		lsr a				lsr 	a
.1291	90 11		bcc $12a4			bcc 	_ALWrite
.1293	a0 00		ldy #$00			ldy 	#0
.1295	ad 3c 0a	lda $0a3c			lda 	SingleLetterVar+("P"-"A")*4 ; compare the value in P to the variable
.1298	d1 2a		cmp ($2a),y			cmp 	(temp0),y 					; labels cannot change value, usually means address mode has changed.
.129a	d0 1f		bne $12bb			bne 	_ALChanged
.129c	c8		iny				iny
.129d	ad 3d 0a	lda $0a3d			lda 	SingleLetterVar+("P"-"A")*4+1
.12a0	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.12a2	d0 17		bne $12bb			bne 	_ALChanged
.12a4					_ALWrite:
.12a4	a0 00		ldy #$00			ldy 	#0
.12a6	ad 3c 0a	lda $0a3c			lda 	SingleLetterVar+("P"-"A")*4 ; copy the value in P into the variable
.12a9	91 2a		sta ($2a),y			sta 	(temp0),y
.12ab	ad 3d 0a	lda $0a3d			lda 	SingleLetterVar+("P"-"A")*4+1
.12ae	c8		iny				iny
.12af	91 2a		sta ($2a),y			sta 	(temp0),y
.12b1	a9 00		lda #$00			lda 	#0
.12b3	c8		iny				iny
.12b4	91 2a		sta ($2a),y			sta 	(temp0),y
.12b6	c8		iny				iny
.12b7	91 2a		sta ($2a),y			sta 	(temp0),y
.12b9	7a		ply				ply
.12ba	60		rts				rts
.12bb					_ALChanged:
.12bb	a2 26		ldx #$26			ldx 	#ErrorID_Label
.12bd	20 27 15	jsr $1527		jsr	errorHandler
.12c0					_ALSyntax:
.12c0	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.12c2	20 27 15	jsr $1527		jsr	errorHandler

;******  Return to file: assembler/assembler.asm


;******  Processing file: assembler/subgroup.asm

.12c5					AssembleGroup1:
.12c5	ad f5 0a	lda $0af5			lda 	asmToken 					; firstly, we throw out STA immediate
.12c8	c9 98		cmp #$98			cmp 	#TKW_STA
.12ca	d0 07		bne $12d3			bne 	_AG1NotStoreImm
.12cc	ad f6 0a	lda $0af6			lda 	asmMode
.12cf	c9 00		cmp #$00			cmp 	#AMD_IMM
.12d1	f0 2c		beq $12ff			beq 	AG1ModeError
.12d3					_AG1NotStoreImm:
.12d3	ae f6 0a	ldx $0af6			ldx 	asmMode						; get mode into X.
.12d6	bd 04 13	lda $1304,x			lda		AMDOperandSize,X 			; get the size of the operand and push on stack
.12d9	48		pha				pha
.12da	f0 23		beq $12ff			beq 	AG1ModeError 				; if the size is zero, the mode must be Accumulator
.12dc	e0 00		cpx #$00			cpx 	#0 							; if the mode is zero, e.g. immediate
.12de	d0 02		bne $12e2			bne 	_AG1NotImmediate
.12e0	a2 02		ldx #$02			ldx 	#2 							; then we use offset 2 here. This is how the 6502
.12e2					_AG1NotImmediate:
.12e2	e0 0d		cpx #$0d			cpx 	#AMD_ZEROINDX 				; (zero,x) uses slot 0.
.12e4	d0 02		bne $12e8			bne 	_AG1NotZX
.12e6	a2 00		ldx #$00			ldx 	#0
.12e8					_AG1NotZX:
.12e8	68		pla				pla 								; restore length
.12e9	e0 09		cpx #$09			cpx 	#9 							; anything > 8 fails.
.12eb	b0 10		bcs $12fd			bcs 	AG1Fail
.12ed					AG1ReturnValue:
.12ed	85 32		sta $32				sta 	tempShort 					; save size of operand
.12ef	18		clc				clc
.12f0	bd 12 13	lda $1312,x			lda 	AMDOffsetFromBase,X 		; get the offset for the address mode.
.12f3	6d f7 0a	adc $0af7			adc 	asmBaseOpcode 				; add the base opcode.
.12f6	a6 32		ldx $32				ldx 	tempShort 					; length in X
.12f8	20 10 11	jsr $1110			jsr 	AsmWriteInstruction 		; output instruction.
.12fb	38		sec				sec
.12fc	60		rts				rts
.12fd					AG1Fail:
.12fd	18		clc				clc
.12fe	60		rts				rts
.12ff					AG1ModeError:
.12ff	a2 24		ldx #$24			ldx 	#ErrorID_Assembler
.1301	20 27 15	jsr $1527		jsr	errorHandler
.1304					AMDOperandSize:
>1304	01 01 00 02					.byte 	1,1,0,2
>1308	01 01 02 02					.byte 	1,1,2,2
>130c	01 01 02 02					.byte 	1,1,2,2
>1310	01 01						.byte 	1,1
.1312					AMDOffsetFromBase:
>1312	00 04 08 0c					.byte 	0,4,8,12
>1316	10 14 18 1c					.byte	16,20,24,28
>131a	11 00 00 00					.byte 	17,0,0,0
>131e	00 00						.byte 	0,0
.1320					AssembleGroup2:
.1320	ad f6 0a	lda $0af6			lda 	asmMode 					; get the mode; if >= 8 cannot be a legit group 2
.1323	c9 08		cmp #$08			cmp 	#8
.1325	b0 18		bcs $133f			bcs 	_AG2Fail
.1327	85 2a		sta $2a				sta 	temp0 						; save in temp9
.1329	ae f5 0a	ldx $0af5			ldx 	asmToken					; get token in X, then get the availability flags for it
.132c	bd a4 11	lda $11a4,x			lda 	Group2OpcodeAvailability-TKA_GROUP2,x
.132f					_AG2Shift:
.132f	4a		lsr a				lsr 	a
.1330	c6 2a		dec $2a				dec 	temp0
.1332	10 fb		bpl $132f			bpl 	_AG2Shift
.1334	90 09		bcc $133f			bcc 	_AG2Fail 					; cannot do that instruction w/that opcode.
.1336	ae f6 0a	ldx $0af6			ldx  	asmMode 					; mode in X
.1339	bd 04 13	lda $1304,x			lda		AMDOperandSize,X 			; get the size of the operand in A
.133c	4c ed 12	jmp $12ed			jmp 	AG1ReturnValue 				; and use that with Group 1's exit code
.133f					_AG2Fail:
.133f	18		clc				clc
.1340	60		rts				rts
.1341					AssembleGroup3:
.1341	ad 38 0a	lda $0a38			lda 	SingleLetterVar+("O"-"A")*4	; check bit 0 (pass) of O
.1344	4a		lsr a				lsr 	a
.1345	a9 00		lda #$00			lda 	#0 							; if clear, e.g. pass 1, use default zero.
.1347	90 21		bcc $136a			bcc 	_AG3Default
.1349	38		sec				sec	 								; calculate branch offset
.134a	a5 98		lda $98				lda		esInt0
.134c	ed 3c 0a	sbc $0a3c			sbc 	SingleLetterVar+("P"-"A")*4
.134f	aa		tax				tax
.1350	a5 a0		lda $a0				lda		esInt1
.1352	ed 3d 0a	sbc $0a3d			sbc 	SingleLetterVar+("P"-"A")*4+1
.1355	85 a0		sta $a0				sta 	esInt1
.1357	8a		txa				txa 								; add 126, now 128 too many.
.1358	18		clc				clc 								; we can use this to check the range
.1359	69 7e		adc #$7e			adc 	#126
.135b	85 98		sta $98				sta 	esInt0
.135d	90 02		bcc $1361			bcc 	_AG3NoCarry
.135f	e6 a0		inc $a0				inc 	esInt1
.1361					_AG3NoCarry:
.1361	a5 a0		lda $a0				lda 	esInt1 						; check in range.
.1363	d0 0b		bne $1370			bne 	_AG3Range
.1365	a5 98		lda $98				lda 	esInt0 						; fix up branch distance
.1367	38		sec				sec
.1368	e9 80		sbc #$80			sbc 	#128
.136a					_AG3Default:
.136a	85 98		sta $98				sta 	esInt0
.136c					_AG3ExitOk:
.136c	a2 01		ldx #$01			ldx 	#1 							; one opcode, use AG4 Code
.136e	d0 07		bne $1377			bne 	AG4Write
.1370					_AG3Range:
.1370	a2 25		ldx #$25			ldx 	#ErrorID_Branch
.1372	20 27 15	jsr $1527		jsr	errorHandler
.1375					AssembleGroup4:
.1375	a2 00		ldx #$00			ldx 	#0 							; no parameters in the opcode.
.1377					AG4Write:
.1377	ad f7 0a	lda $0af7			lda 	asmBaseOpcode				; the opcode is the opcode base.
.137a	20 10 11	jsr $1110			jsr 	AsmWriteInstruction 		; output instruction.
.137d	38		sec				sec
.137e	60		rts				rts
.137f					AssembleSpecialCase:
.137f	a2 00		ldx #$00			ldx 	#0
.1381					_ASCScan:
.1381	bd 52 12	lda $1252,x			lda 	AssemblerSpecialCases,x 	; scan token and mode for match
.1384	cd f5 0a	cmp $0af5			cmp 	asmToken
.1387	d0 08		bne $1391			bne 	_ASCNext
.1389	bd 53 12	lda $1253,x			lda 	AssemblerSpecialCases+1,x
.138c	cd f6 0a	cmp $0af6			cmp 	asmMode
.138f	f0 0a		beq $139b			beq 	_ASCFound
.1391					_ASCNext:
.1391	e8		inx				inx									; next entry
.1392	e8		inx				inx
.1393	e8		inx				inx
.1394	bd 52 12	lda $1252,x			lda 	AssemblerSpecialCases,x 	; until table ends
.1397	d0 e8		bne $1381			bne 	_ASCScan
.1399	18		clc				clc
.139a	60		rts				rts
.139b					_ASCFound:
.139b	bd 54 12	lda $1254,x			lda 	AssemblerSpecialCases+2,x 	; get the new opcode.
.139e	48		pha				pha
.139f	ae f6 0a	ldx $0af6			ldx  	asmMode 					; mode in X
.13a2	bd 04 13	lda $1304,x			lda		AMDOperandSize,X 			; get the size of the operand in X
.13a5	aa		tax				tax
.13a6	68		pla				pla 								; opcode back
.13a7	20 10 11	jsr $1110			jsr 	AsmWriteInstruction 		; output instruction.
.13aa	38		sec				sec
.13ab	60		rts				rts

;******  Return to file: assembler/assembler.asm

.13ac					assemblerHandler:
.13ac	7c af 13	jmp ($13af,x)			jmp 	(assemblerVectors,x)
.13af					assemblerVectors:
>13af	b5 13					.word _DummyControlHandler ; index 0
>13b1	9f 11					.word AssembleOneInstruction ; index 2
>13b3	71 12					.word AssembleLabel        ; index 4
.13b5					_DummyControlHandler:
.13b5	60		rts			rts

;******  Return to file: basic.asm

.13b6					section_end_assembler:
.13b6					section_start_device:

;******  Processing file: device/device.asm


;******  Processing file: device/option_x16/x16break.asm

.13b6					X16SyncBreak:
.13b6	5a		phy				phy
.13b7	20 de ff	jsr $ffde			jsr 	$FFDE
.13ba	ac e8 0b	ldy $0be8			ldy 	nextSyncTick 				; if NST = 0 then always sync
.13bd	a8		tay				tay 								; save tick in Y
.13be	38		sec				sec
.13bf	ed e8 0b	sbc $0be8			sbc 	nextSyncTick 				; calculate timer - next tick
.13c2	30 0c		bmi $13d0			bmi 	_X16NoSync 					; if -ve then no sync.
.13c4					_X16Sync:
.13c4	98		tya				tya 								; get current time back
.13c5	18		clc				clc 								; work out time of next tick.
.13c6	69 06		adc #$06			adc 	#6 							; at 60Hz that is six ticks.
.13c8	8d e8 0b	sta $0be8			sta 	nextSyncTick
.13cb	a9 fd		lda #$fd			lda 	#$FD 						; call the extension update code.
.13cd	20 74 18	jsr $1874		jsr	extensionHandler
.13d0					_X16NoSync:
.13d0	7a		ply				ply
.13d1	20 e1 ff	jsr $ffe1			jsr 	$FFE1
.13d4	f0 01		beq $13d7			beq 	_IsBreak
.13d6	60		rts				rts
.13d7					_IsBreak:
.13d7	a2 21		ldx #$21			ldx 	#ErrorID_Break
.13d9	20 27 15	jsr $1527		jsr	errorHandler

;******  Return to file: device/device.asm


;******  Processing file: device/option_x16/x16file.asm

.13dc					ExternSave:
.13dc	5a		phy				phy
.13dd	20 28 14	jsr $1428			jsr 	ExternGetLength 			; get length of file into A name YX
.13e0	20 bd ff	jsr $ffbd			jsr 	$FFBD 						; set name
.13e3	a9 01		lda #$01			lda 	#1
.13e5	a2 08		ldx #$08			ldx 	#8	 						; device #8
.13e7	a0 00		ldy #$00			ldy 	#0
.13e9	20 ba ff	jsr $ffba			jsr 	$FFBA 						; set LFS
.13ec	a5 99		lda $99				lda 	esInt0+1 					; copy start of save address to temp0
.13ee	85 2a		sta $2a				sta 	temp0
.13f0	a5 a1		lda $a1				lda 	esInt1+1
.13f2	85 2b		sta $2b				sta 	temp0+1
.13f4	a6 9a		ldx $9a				ldx 	esInt0+2 					; end address
.13f6	a4 a2		ldy $a2				ldy 	esInt1+2
.13f8	a9 2a		lda #$2a			lda 	#temp0 						; ref to start address
.13fa	20 d8 ff	jsr $ffd8			jsr 	$FFD8 						; save
.13fd	b0 02		bcs $1401			bcs 	_ESSave
.13ff	7a		ply				ply
.1400	60		rts				rts
.1401					_ESSave:
.1401	a2 1f		ldx #$1f			ldx 	#ErrorID_Save
.1403	20 27 15	jsr $1527		jsr	errorHandler
.1406					ExternLoad:
.1406	5a		phy				phy
.1407	20 28 14	jsr $1428			jsr 	ExternGetLength 			; get length of file into A name YX
.140a	20 bd ff	jsr $ffbd			jsr 	$FFBD 						; set name
.140d	a9 01		lda #$01			lda 	#1
.140f	a2 08		ldx #$08			ldx 	#8	 						; device #8
.1411	a0 00		ldy #$00			ldy 	#0
.1413	20 ba ff	jsr $ffba			jsr 	$FFBA 						; set LFS
.1416	a6 99		ldx $99				ldx 	esInt0+1 					; load address
.1418	a4 a1		ldy $a1				ldy 	esInt1+1
.141a	a9 00		lda #$00			lda 	#0 							; load command
.141c	20 d5 ff	jsr $ffd5			jsr 	$FFD5
.141f	b0 02		bcs $1423			bcs 	_ESLoad
.1421	7a		ply				ply
.1422	60		rts				rts
.1423					_ESLoad:
.1423	a2 20		ldx #$20			ldx 	#ErrorID_Load
.1425	20 27 15	jsr $1527		jsr	errorHandler
.1428					ExternGetLength:
.1428	a5 98		lda $98				lda 	esInt0 						; length into A.
.142a	85 2a		sta $2a				sta 	temp0
.142c	a5 a0		lda $a0				lda 	esInt1
.142e	85 2b		sta $2b				sta 	temp0+1
.1430	a0 00		ldy #$00			ldy 	#0
.1432	b1 2a		lda ($2a),y			lda 	(temp0),y
.1434	a6 98		ldx $98				ldx 	esInt0 						; name string address into YX
.1436	a4 a0		ldy $a0				ldy 	esInt1
.1438	e8		inx				inx 								; advance over the length byte.
.1439	d0 01		bne $143c			bne 	_ESNoCarry
.143b	c8		iny				iny
.143c					_ESNoCarry:
.143c	60		rts				rts

;******  Return to file: device/device.asm


;******  Processing file: device/option_x16/x16io.asm

=240					MaxLineInputSize = 240
.0af8					bufferCount:
>0af8							.fill 	0
.0af8					bufferStorage:
>0af8							.fill 	MaxLineInputSize
.0be8					nextSyncTick:
>0be8							.fill 	0
.143d					IOControlHandler:
.143d	c9 00		cmp #$00			cmp 	#0
.143f	d0 15		bne $1456			bne		_CHExit
.1441	a9 0f		lda #$0f			lda 	#15 						; switch to upper/lower case mode
.1443	20 6f 14	jsr $146f			jsr 	IOPrintChar
.1446	a9 02		lda #$02			lda 	#2 							; green on black and clear screen
.1448	20 99 14	jsr $1499			jsr 	IOInk
.144b	a9 00		lda #$00			lda 	#0
.144d	8d e8 0b	sta $0be8			sta 	nextSyncTick
.1450	20 ad 14	jsr $14ad			jsr 	IOPaper
.1453	20 57 14	jsr $1457			jsr 	IOClearScreen
.1456					_CHExit:
.1456	60		rts				rts
.1457					IOClearScreen:
.1457	48		pha				pha
.1458	a9 93		lda #$93			lda	 	#147 						; char code $93 clears screen
.145a	20 6f 14	jsr $146f			jsr 	IOPrintChar
.145d	68		pla				pla
.145e	60		rts				rts
.145f					IONewLine:
.145f	48		pha				pha
.1460	a9 0d		lda #$0d			lda 	#13
.1462	20 6f 14	jsr $146f			jsr 	IOPrintChar
.1465	68		pla				pla
.1466	60		rts				rts
.1467					IOTab:
.1467	48		pha				pha
.1468	a9 20		lda #$20			lda 	#32
.146a	20 6f 14	jsr $146f			jsr 	IOPrintChar
.146d	68		pla				pla
.146e	60		rts				rts
.146f					IOPrintAscii:
.146f					IOPrintChar:
.146f	aa		tax				tax 								; save in X so we can save Y
.1470	5a		phy				phy
.1471	8a		txa				txa
.1472	c9 08		cmp #$08			cmp 	#8 							; make BS (8) onto CHR$(14) which is the
.1474	d0 02		bne $1478			bne 	_IOPCNotBS 					; Commodore/X16 backspace code.
.1476	a9 14		lda #$14			lda 	#$14
.1478					_IOPCNotBS:
.1478	20 d2 ff	jsr $ffd2			jsr 	$FFD2 						; CBM OS Call.
.147b	7a		ply				ply
.147c	60		rts				rts
.147d					IOInkey:
.147d	5a		phy				phy
.147e	20 e4 ff	jsr $ffe4			jsr 	$FFE4
.1481	85 32		sta $32				sta 	tempShort
.1483	7a		ply				ply
.1484	a5 32		lda $32				lda 	tempShort					; no key pressed.
.1486	f0 10		beq $1498			beq 	_IOIExit
.1488	c9 0d		cmp #$0d			cmp 	#13 						; allow CR (13)
.148a	f0 0c		beq $1498			beq 	_IOIExit
.148c	c9 14		cmp #$14			cmp 	#$14 						; backspace code ($14) returns 8.
.148e	f0 06		beq $1496			beq 	_IOIBackspace
.1490	c9 20		cmp #$20			cmp 	#32 						; no other control allowed.
.1492	90 e9		bcc $147d			bcc 	IOInkey
.1494	b0 02		bcs $1498			bcs 	_IOIExit
.1496					_IOIBackspace:
.1496	a9 08		lda #$08			lda 	#8 							; return chr(8)
.1498					_IOIExit:
.1498	60		rts				rts
.1499					IOInk:
.1499	48		pha				pha
.149a	29 07		and #$07			and 	#7 							; 8 primaries
.149c	aa		tax				tax
.149d	bd a5 14	lda $14a5,x			lda 	_IOColourTable,x 			; look up CBM code and print it.
.14a0	20 6f 14	jsr $146f			jsr 	IOPrintChar
.14a3	68		pla				pla
.14a4	60		rts				rts
.14a5					_IOColourTable:
>14a5	90						.byte 	$90 					; 0 Black
>14a6	96						.byte 	$96 					; 1 Red
>14a7	1e						.byte 	$1E 					; 2 Green
>14a8	9e						.byte 	$9E 					; 3 Yellow
>14a9	9a						.byte 	$9A 					; 4 Blue
>14aa	9c						.byte 	$9C 					; 5 Magenta
>14ab	9f						.byte 	$9F 					; 6 Cyan
>14ac	05						.byte 	$05 					; 7 White
.14ad					IOPaper:
.14ad	48		pha				pha
.14ae	48		pha				pha
.14af	a9 01		lda #$01			lda 	#1 						; 1 swaps fgr/bgr, so we swap them, set fgr
.14b1	20 6f 14	jsr $146f			jsr 	IOPrintChar 			; and then swap them again.
.14b4	68		pla				pla
.14b5	20 99 14	jsr $1499			jsr 	IOInk
.14b8	a9 01		lda #$01			lda 	#1
.14ba	20 6f 14	jsr $146f			jsr 	IOPrintChar
.14bd	68		pla				pla
.14be	60		rts				rts
.14bf					IOLocate:
.14bf	48		pha				pha
.14c0	a9 13		lda #$13			lda 	#$13 					; home cursor code
.14c2	20 6f 14	jsr $146f			jsr 	IOPrintChar
.14c5	a9 11		lda #$11			lda 	#$11 	 				; print Y x $11 (down)
.14c7	20 cd 14	jsr $14cd			jsr 	_IOLoc2
.14ca	7a		ply				ply
.14cb	a9 1d		lda #$1d			lda 	#$1D 					; print Y x $1D (right)
.14cd					_IOLoc2:
.14cd	c0 00		cpy #$00			cpy 	#0
.14cf	f0 06		beq $14d7			beq 	_IOLocExit
.14d1	20 6f 14	jsr $146f			jsr 	IOPrintChar
.14d4	88		dey				dey
.14d5	d0 f6		bne $14cd			bne 	_IOLoc2
.14d7					_IOLocExit:
.14d7	60		rts				rts
.14d8					IOInput:
.14d8	a9 00		lda #$00			lda 	#0
.14da	8d f8 0a	sta $0af8			sta 	bufferCount
.14dd					_IOILoop:
.14dd	20 cf ff	jsr $ffcf			jsr 	$FFCF
.14e0	c9 0d		cmp #$0d			cmp 	#13
.14e2	f0 10		beq $14f4			beq 	_IOIExit
.14e4	ae f8 0a	ldx $0af8			ldx 	bufferCount
.14e7	e0 f0		cpx #$f0			cpx 	#MaxLineInputSize
.14e9	f0 f2		beq $14dd			beq 	_IOILoop
.14eb	ee f8 0a	inc $0af8			inc 	bufferCount
.14ee	9d f9 0a	sta $0af9,x			sta 	bufferStorage+1,x
.14f1	4c dd 14	jmp $14dd			jmp 	_IOILoop
.14f4					_IOIExit:
.14f4	a9 f8		lda #$f8			lda 	#(bufferCount) & $FF
.14f6	85 2a		sta $2a				sta 	temp0
.14f8	a9 0a		lda #$0a			lda 	#(bufferCount) >> 8
.14fa	85 2b		sta $2b				sta 	1+(temp0)
.14fc	60		rts				rts

;******  Return to file: device/device.asm


;******  Processing file: device/option_x16/x16timer.asm

.14fd					IOReadTimer:
.14fd	20 de ff	jsr $ffde			jsr 	$FFDE 						; reads timer into YXA so we want only YA
.1500	48		pha				pha
.1501	8a		txa				txa
.1502	a8		tay				tay
.1503	68		pla				pla
.1504	60		rts				rts

;******  Return to file: device/device.asm

.1505					deviceHandler:
.1505	7c 08 15	jmp ($1508,x)			jmp 	(deviceVectors,x)
.1508					deviceVectors:
>1508	3d 14					.word IOControlHandler     ; index 0
>150a	57 14					.word IOClearScreen        ; index 2
>150c	5f 14					.word IONewLine            ; index 4
>150e	99 14					.word IOInk                ; index 6
>1510	7d 14					.word IOInkey              ; index 8
>1512	d8 14					.word IOInput              ; index 10
>1514	06 14					.word ExternLoad           ; index 12
>1516	bf 14					.word IOLocate             ; index 14
>1518	ad 14					.word IOPaper              ; index 16
>151a	6f 14					.word IOPrintChar          ; index 18
>151c	6f 14					.word IOPrintAscii         ; index 20
>151e	dc 13					.word ExternSave           ; index 22
>1520	b6 13					.word X16SyncBreak         ; index 24
>1522	67 14					.word IOTab                ; index 26
>1524	fd 14					.word IOReadTimer          ; index 28
.1526					_DummyControlHandler:
.1526	60		rts			rts

;******  Return to file: basic.asm

.1527					section_end_device:
.1527					section_start_error:

;******  Processing file: error/error.asm


;******  Processing file: error/errorhandler.asm

.1527					ErrorHandler:
.1527	da		phx				phx
.1528	a9 01		lda #$01			lda 	#1 							; red
.152a	a2 06		ldx #$06		ldx	#6
.152c	20 05 15	jsr $1505		jsr	deviceHandler
.152f	fa		plx				plx
.1530	a9 9b		lda #$9b			lda 	#(ErrorTextList) & $FF
.1532	85 2a		sta $2a				sta 	temp0
.1534	a9 15		lda #$15			lda 	#(ErrorTextList) >> 8
.1536	85 2b		sta $2b				sta 	1+(temp0)
.1538	ca		dex		_EHFind:dex									; errors start at 1
.1539	f0 10		beq $154b			beq 	_EHFound
.153b	a0 00		ldy #$00			ldy 	#0 							; goto next text message, add length + 1 to the pointer.
.153d	38		sec				sec
.153e	a5 2a		lda $2a				lda 	temp0
.1540	71 2a		adc ($2a),y			adc 	(temp0),y
.1542	85 2a		sta $2a				sta 	temp0
.1544	90 f2		bcc $1538			bcc 	_EHFind
.1546	e6 2b		inc $2b				inc 	temp0+1
.1548	4c 38 15	jmp $1538			jmp 	_EHFind
.154b					_EHFound:
.154b	20 5f 18	jsr $185f			jsr 	EHPrintAscii 				; print the string "temp0" now points to.
.154e	a0 00		ldy #$00			ldy 	#0 							; in a line, e.g. the offset to next is non zero.
.1550	b1 28		lda ($28),y			lda 	(codePtr),y
.1552	f0 39		beq $158d			beq 	_EHNoLine
.1554	a5 29		lda $29				lda 	codePtr+1 					; code running from the command line.
.1556	cd c9 0a	cmp $0ac9			cmp 	basePage+1
.1559	90 32		bcc $158d			bcc 	_EHNoLine
.155b	a9 97		lda #$97			lda 	#(EHAtMsg) & $FF
.155d	85 2a		sta $2a				sta 	temp0
.155f	a9 15		lda #$15			lda 	#(EHAtMsg) >> 8
.1561	85 2b		sta $2b				sta 	1+(temp0)
.1563	20 5f 18	jsr $185f			jsr 	EHPrintAscii
.1566	a0 01		ldy #$01			ldy 	#1 							; set up line number in TOS
.1568	a2 00		ldx #$00			ldx 	#0
.156a	b1 28		lda ($28),y			lda 	(codePtr),y
.156c	95 98		sta $98,x			sta 	esInt0,x
.156e	c8		iny				iny
.156f	b1 28		lda ($28),y			lda 	(codePtr),y
.1571	95 a0		sta $a0,x			sta 	esInt1,x
.1573	a9 00		lda #$00			lda 	#0
.1575	95 a8		sta $a8,x			sta 	esInt2,x
.1577	95 b0		sta $b0,x			sta 	esInt3,x
.1579	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.157b	85 2a		sta $2a				sta 	temp0
.157d	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.157f	85 2b		sta $2b				sta 	1+(temp0)
.1581	a0 0a		ldy #$0a			ldy 	#10 						; in base 10.
.1583	a9 00		lda #$00			lda 	#0							; stack position zero.
.1585	a2 12		ldx #$12		ldx	#18
.1587	20 f5 3f	jsr $3ff5		jsr	mainHandler
.158a	20 5f 18	jsr $185f			jsr 	EHPrintAscii
.158d					_EHNoLine:
.158d	a2 04		ldx #$04		ldx	#4
.158f	20 05 15	jsr $1505		jsr	deviceHandler
.1592	a2 04		ldx #$04		ldx	#4
.1594	20 96 29	jsr $2996		jsr	interactionHandler
.1597					EHAtMsg:
>1597	03 20 40 20					.text 	3," @ "

;******  Processing file: error/../generated/errortext.inc

.159b					ErrorTextList:
>159b	13 46 65 61 74 75 72 65			.text 19,"Feature not Present"
>15a3	20 6e 6f 74 20 50 72 65 73 65 6e 74
>15af	0c 53 79 6e 74 61 78 20			.text 12,"Syntax Error"
>15b7	45 72 72 6f 72
>15bc	0f 4d 6f 64 75 6c 65 20			.text 15,"Module disabled"
>15c4	64 69 73 61 62 6c 65 64
>15cc	10 41 73 73 65 72 74 69			.text 16,"Assertion failed"
>15d4	6f 6e 20 66 61 69 6c 65 64
>15dd	0e 44 69 76 69 64 65 20			.text 14,"Divide By Zero"
>15e5	42 79 20 5a 65 72 6f
>15ec	04 53 74 6f 70				.text 4,"Stop"
>15f1	0d 54 79 70 65 20 4d 69			.text 13,"Type Mismatch"
>15f9	73 6d 61 74 63 68
>15ff	0d 49 6c 6c 65 67 61 6c			.text 13,"Illegal Value"
>1607	20 56 61 6c 75 65
>160d	15 4d 69 73 73 69 6e 67			.text 21,"Missing right bracket"
>1615	20 72 69 67 68 74 20 62 72 61 63 6b 65 74
>1623	0d 4d 69 73 73 69 6e 67			.text 13,"Missing comma"
>162b	20 63 6f 6d 6d 61
>1631	11 4d 69 73 73 69 6e 67			.text 17,"Missing reference"
>1639	20 72 65 66 65 72 65 6e 63 65
>1643	15 4c 69 6e 65 20 4e 75			.text 21,"Line Number not found"
>164b	6d 62 65 72 20 6e 6f 74 20 66 6f 75 6e 64
>1659	0f 53 74 72 69 6e 67 20			.text 15,"String too long"
>1661	74 6f 6f 20 6c 6f 6e 67
>1669	14 52 45 54 55 52 4e 20			.text 20,"RETURN without GOSUB"
>1671	77 69 74 68 6f 75 74 20 47 4f 53 55 42
>167e	14 55 4e 54 49 4c 20 77			.text 20,"UNTIL without REPEAT"
>1686	69 74 68 6f 75 74 20 52 45 50 45 41 54
>1693	10 4e 45 58 54 20 77 69			.text 16,"NEXT without FOR"
>169b	74 68 6f 75 74 20 46 4f 52
>16a4	12 57 45 4e 44 20 77 69			.text 18,"WEND without WHILE"
>16ac	74 68 6f 75 74 20 57 48 49 4c 45
>16b7	14 45 4e 44 50 52 4f 43			.text 20,"ENDPROC without PROC"
>16bf	20 77 69 74 68 6f 75 74 20 50 52 4f 43
>16cc	0e 42 61 64 20 4e 45 58			.text 14,"Bad NEXT index"
>16d4	54 20 69 6e 64 65 78
>16db	17 53 74 72 75 63 74 75			.text 23,"Structures nested wrong"
>16e3	72 65 73 20 6e 65 73 74 65 64 20 77 72 6f 6e 67
>16f3	16 43 61 6e 6e 6f 74 20			.text 22,"Cannot create variable"
>16fb	63 72 65 61 74 65 20 76 61 72 69 61 62 6c 65
>170a	19 52 65 74 75 72 6e 20			.text 25,"Return stack out of space"
>1712	73 74 61 63 6b 20 6f 75 74 20 6f 66 20 73 70 61
>1722	63 65
>1724	11 55 6e 6b 6e 6f 77 6e			.text 17,"Unknown Procedure"
>172c	20 50 72 6f 63 65 64 75 72 65
>1736	17 50 61 72 61 6d 65 74			.text 23,"Parameters do not match"
>173e	65 72 73 20 64 6f 20 6e 6f 74 20 6d 61 74 63 68
>174e	15 41 72 72 61 79 20 61			.text 21,"Array already defined"
>1756	6c 72 65 61 64 79 20 64 65 66 69 6e 65 64
>1764	12 44 49 4d 20 72 65 71			.text 18,"DIM requires array"
>176c	75 69 72 65 73 20 61 72 72 61 79
>1777	0f 42 61 64 20 61 72 72			.text 15,"Bad array index"
>177f	61 79 20 69 6e 64 65 78
>1787	1d 57 72 6f 6e 67 20 6e			.text 29,"Wrong number of array indices"
>178f	75 6d 62 65 72 20 6f 66 20 61 72 72 61 79 20 69
>179f	6e 64 69 63 65 73
>17a5	0b 4f 75 74 20 6f 66 20			.text 11,"Out of data"
>17ad	64 61 74 61
>17b1	14 43 61 6e 6e 6f 74 20			.text 20,"Cannot tokenise line"
>17b9	74 6f 6b 65 6e 69 73 65 20 6c 69 6e 65
>17c6	0b 53 61 76 65 20 66 61			.text 11,"Save failed"
>17ce	69 6c 65 64
>17d2	0b 4c 6f 61 64 20 66 61			.text 11,"Load failed"
>17da	69 6c 65 64
>17de	05 42 72 65 61 6b			.text 5,"Break"
>17e4	0d 4f 75 74 20 6f 66 20			.text 13,"Out of memory"
>17ec	6d 65 6d 6f 72 79
>17f2	16 45 78 70 72 65 73 73			.text 22,"Expression too complex"
>17fa	69 6f 6e 20 74 6f 6f 20 63 6f 6d 70 6c 65 78
>1809	10 42 61 64 20 4f 70 65			.text 16,"Bad Operand/Mode"
>1811	72 61 6e 64 2f 4d 6f 64 65
>181a	13 42 72 61 6e 63 68 20			.text 19,"Branch out of range"
>1822	6f 75 74 20 6f 66 20 72 61 6e 67 65
>182e	13 4c 61 62 65 6c 20 63			.text 19,"Label changed value"
>1836	68 61 6e 67 65 64 20 76 61 6c 75 65
>1842	12 4e 6f 20 53 70 72 69			.text 18,"No Sprite Selected"
>184a	74 65 20 53 65 6c 65 63 74 65 64
>1855	08 48 61 72 64 77 61 72			.text 8,"Hardware"
>185d	65
>185e	00					.byte 0

;******  Return to file: error/errorhandler.asm

.185f					EHPrintAscii:
.185f	a0 00		ldy #$00			ldy 	#0
.1861	b1 2a		lda ($2a),y			lda 	(temp0),y
.1863	aa		tax				tax
.1864	f0 0d		beq $1873			beq 	_EHPExit
.1866					_EHPLoop:
.1866	c8		iny				iny
.1867	da		phx				phx
.1868	b1 2a		lda ($2a),y			lda 	(temp0),y
.186a	a2 14		ldx #$14		ldx	#20
.186c	20 05 15	jsr $1505		jsr	deviceHandler
.186f	fa		plx				plx
.1870	ca		dex				dex
.1871	d0 f3		bne $1866			bne 	_EHPLoop
.1873					_EHPExit:
.1873	60		rts				rts

;******  Return to file: error/error.asm


;******  Return to file: basic.asm

.1874					section_end_error:
.1874					section_start_extension:

;******  Processing file: extension/extension.asm


;******  Processing file: extension/extensionhandler.asm

.1874					ExtensionHandler:
.1874	c9 fd		cmp #$fd			cmp 	#$FD 						; check for sync
.1876	f0 1d		beq $1895			beq 	_ExtensionSync
.1878	c9 fe		cmp #$fe			cmp 	#$FE 						; check for force mode 0
.187a	f0 16		beq $1892			beq 	_ExtensionForce
.187c	c9 ff		cmp #$ff			cmp 	#$FF						; A = $FF command, otherwise unary function stack level.
.187e	d0 08		bne $1888			bne 	_ExtensionUnary 			; is passed in A.
.1880	b1 28		lda ($28),y			lda 	(codePtr),y 				; so this is a command, using Group 2.
.1882	c8		iny				iny
.1883	0a		asl a				asl 	a
.1884	aa		tax				tax
.1885	7c 8c 18	jmp ($188c,x)			jmp 	(Group2Vectors-12,x)
.1888					_ExtensionUnary:
.1888	48		pha				pha 								; save stack pos in A
.1889	b1 28		lda ($28),y			lda 	(codePtr),y 				; get shifted token, double into X
.188b	c8		iny				iny
.188c	0a		asl a				asl 	a
.188d	aa		tax				tax
.188e	68		pla				pla 								; restore stack pos and call group3 command.
.188f	7c a8 18	jmp ($18a8,x)			jmp 	(Group3Vectors-12,x)
.1892					_ExtensionForce:
.1892	4c 70 24	jmp $2470			jmp 	ForceMode0
.1895					_ExtensionSync:
.1895	4c c6 20	jmp $20c6			jmp 	SoundInterrupt

;******  Processing file: extension/../generated/tokenvectors2.inc

.1898					Group2Vectors:
>1898	48 26					.word	Command_VPoke            ; $86 vpoke
>189a	4b 26					.word	Command_VDoke            ; $87 vdoke
>189c	20 26					.word	Command_VLoad            ; $88 vload
>189e	82 24					.word	CommandMode              ; $89 mode
>18a0	40 25					.word	CommandPalette           ; $8a palette
>18a2	af 21					.word	CommandSprite            ; $8b sprite
>18a4	ea 1d					.word	CommandClg               ; $8c clg
>18a6	ec 1a					.word	Command_Rect             ; $8d rect
>18a8	f4 1a					.word	Command_Frame            ; $8e frame
>18aa	77 25					.word	Command_Draw             ; $8f draw
>18ac	d9 1a					.word	Command_Plot             ; $90 plot
>18ae	b3 19					.word	Command_Line             ; $91 line
>18b0	fa 22					.word	Command_Paint            ; $92 paint
>18b2	0b 20					.word	CommandSound             ; $93 sound

;******  Return to file: extension/extensionhandler.asm


;******  Processing file: extension/../generated/tokenvectors3.inc

.18b4					Group3Vectors:
>18b4	94 26					.word	Command_VPeek            ; $86 vpeek(
>18b6	97 26					.word	Command_VDeek            ; $87 vdeek(
>18b8	42 24					.word	Sprite_GetX              ; $88 sprite.x(
>18ba	45 24					.word	Sprite_GetY              ; $89 sprite.y(
>18bc	f7 20					.word	FunctionCollide          ; $8a hit(
>18be	89 1e					.word	Unary_JoyX               ; $8b joy.x(
>18c0	8c 1e					.word	Unary_JoyY               ; $8c joy.y(
>18c2	c5 1e					.word	Unary_JButton            ; $8d joy.b(
>18c4	5e 1e					.word	Unary_Clock              ; $8e clock(
>18c6	8b 1f					.word	Unary_Playing            ; $8f playing(

;******  Return to file: extension/extensionhandler.asm

.18c8					XEvaluateInteger:
.18c8	8a		txa				txa
.18c9	a2 0a		ldx #$0a		ldx	#10
.18cb	20 f5 3f	jsr $3ff5		jsr	mainHandler
.18ce	aa		tax				tax
.18cf	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/graphics/general.asm

.0be8					gStartStorage:
.0be8					gCurrentXPos:
>0be8							.fill 	2 							; copying the coordinate here, and into x2, and the old
.0bea					gCurrentYPos:
>0bea							.fill 	2
.0bec					gX1:
>0bec							.fill 	2		 					; most recently used. x2,y2 are the most recently used.
.0bee					gY1:
>0bee							.fill 	2
.0bf0					gX2:
>0bf0							.fill 	2
.0bf2					gY2:
>0bf2							.fill 	2
.0bf4					gError:
>0bf4							.fill 	2
.0bf6					g2Error:
>0bf6							.fill 	2
.0bf8					gdx:
>0bf8							.fill 	2
.0bfa					gdy:
>0bfa							.fill 	2
.0bfc					gWordHandler:
>0bfc							.fill 	2
.0bfe					gModifiers:
.0bfe					gdInk:
>0bfe							.fill 	1
.0bff					gdPaper:
>0bff							.fill 	1
.0c00					gdSize:
>0c00							.fill 	1
.0c01					gdImage:
>0c01							.fill 	1
.0c02					gdFlip:
>0c02							.fill 	1
.0c03					gEndStorage:
.0c03					gdXLimit:
>0c03							.fill 	2
.0c05					gdYLimit:
>0c05							.fill 	2
.0c07					gdText:
>0c07							.fill 	2
.18d0					GResetStorage:
.18d0	da		phx				phx
.18d1	a2 1a		ldx #$1a			ldx 	#gEndStorage-gStartStorage-1 ; fill all storage for gfx with 0
.18d3	a9 00		lda #$00			lda 	#0
.18d5					_GRSLoop:
.18d5	9d e8 0b	sta $0be8,x			sta 	gStartStorage,x
.18d8	ca		dex				dex
.18d9	10 fa		bpl $18d5			bpl 	_GRSLoop
.18db	a9 01		lda #$01			lda 	#1
.18dd	8d fe 0b	sta $0bfe			sta 	gdInk
.18e0	8d 00 0c	sta $0c00			sta 	gdSize
.18e3	fa		plx				plx
.18e4	60		rts				rts
.18e5					GHandler:
.18e5	8e fd 0b	stx $0bfd			stx 	gWordHandler+1 				; save code that draws the actual line or whatever.
.18e8	8d fc 0b	sta $0bfc			sta 	gWordHandler
.18eb	a9 00		lda #$00			lda 	#0							; default no text.
.18ed	8d 08 0c	sta $0c08			sta 	gdText+1
.18f0	88		dey				dey 								; predecrement
.18f1					_GHLoopNext:
.18f1	c8		iny				iny									; advance one character
.18f2					_GHLoop:
.18f2	b1 28		lda ($28),y			lda 	(codePtr),y 				; look at character.
.18f4	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; , go to next
.18f6	f0 f9		beq $18f1			beq 	_GHLoopNext
.18f8	c9 80		cmp #$80			cmp 	#TOK_EOL 					; end of line or : , exit
.18fa	f0 4c		beq $1948			beq 	_GHExit
.18fc	c9 ca		cmp #$ca			cmp 	#TKW_COLON
.18fe	f0 48		beq $1948			beq 	_GHExit
.1900	c9 db		cmp #$db			cmp 	#TKW_AT 					; have we found AT or TO
.1902	f0 35		beq $1939			beq 	_GHCallHandler 				; update post & call the handler
.1904	c9 ce		cmp #$ce			cmp 	#TKW_TO
.1906	f0 31		beq $1939			beq 	_GHCallHandler
.1908	c9 e6		cmp #$e6			cmp 	#TKW_FROM
.190a	f0 14		beq $1920			beq 	_GHCPairSkip
.190c	c9 e9		cmp #$e9			cmp 	#TKW_TEXT
.190e	f0 39		beq $1949			beq 	_GHText
.1910	a2 00		ldx #$00			ldx 	#0 							; now see if it matches a token modifier (INK,PAPER etc.)
.1912					_GHCheckTokens:
.1912	b1 28		lda ($28),y			lda 	(codePtr),y
.1914	dd 5e 19	cmp $195e,x			cmp 	_GHTokenTable,x
.1917	f0 0e		beq $1927			beq 	_GHFoundToken
.1919	e8		inx				inx
.191a	bd 5e 19	lda $195e,x			lda 	_GHTokenTable,x
.191d	d0 f3		bne $1912			bne 	_GHCheckTokens
.191f	88		dey				dey
.1920					_GHCPairSkip:
.1920	c8		iny				iny
.1921					_GHCPair:
.1921	20 64 19	jsr $1964			jsr 	GHMakeCurrent 				; should be a coordinate pair then.
.1924	4c f2 18	jmp $18f2			jmp 	_GHLoop
.1927					_GHFoundToken:
.1927	c8		iny				iny 								; skip token (INK/PAPER etc.)
.1928	da		phx				phx
.1929	a9 00		lda #$00			lda 	#0 							; evaluate byte
.192b	a2 0c		ldx #$0c		ldx	#12
.192d	20 f5 3f	jsr $3ff5		jsr	mainHandler
.1930	fa		plx				plx
.1931	a5 98		lda $98				lda 	esInt0 						; get evaluated value
.1933	9d fe 0b	sta $0bfe,x			sta 	gModifiers,x 				; update the modifiers
.1936	4c f2 18	jmp $18f2			jmp 	_GHLoop 					; and loop back
.1939					_GHCallHandler:
.1939	c8		iny				iny 								; consume AT or TO.
.193a	20 64 19	jsr $1964			jsr 	GHMakeCurrent 				; update the coordinates.
.193d	5a		phy				phy
.193e	20 45 19	jsr $1945			jsr 	_GHCallHandlerCode 			; call the handler code
.1941	7a		ply				ply
.1942	4c f2 18	jmp $18f2			jmp 	_GHLoop 					; and loop round.
.1945					_GHCallHandlerCode:
.1945	6c fc 0b	jmp ($0bfc)			jmp 	(gWordHandler)
.1948					_GHExit:
.1948	60		rts				rts
.1949					_GHText:
.1949	c8		iny				iny 								; skip token
.194a	a9 00		lda #$00			lda 	#0 							; get string.
.194c	a2 0e		ldx #$0e		ldx	#14
.194e	20 f5 3f	jsr $3ff5		jsr	mainHandler
.1951	a5 98		lda $98				lda 	esInt0 						; copy address of string.
.1953	8d 07 0c	sta $0c07			sta 	gdText
.1956	a5 a0		lda $a0				lda 	esInt1
.1958	8d 08 0c	sta $0c08			sta 	gdText+1
.195b	4c f2 18	jmp $18f2			jmp 	_GHLoop
.195e					_GHTokenTable:
>195e	e1 e2 d2 da dc					.byte 	TKW_INK,TKW_PAPER,TKW_DIM,TKW_IMAGE,TKW_FLIP
>1963	00						.byte 	0
.1964					GHMakeCurrent:
.1964	da		phx				phx
.1965	a2 00		ldx #$00			ldx 	#0 							; do for 0 offset (X)
.1967	20 76 19	jsr $1976			jsr 	_GHMCDoIt
.196a	a2 02		ldx #$02		ldx	#2
.196c	20 f5 3f	jsr $3ff5		jsr	mainHandler
.196f	a2 02		ldx #$02			ldx 	#2 							; do for 2 offset (Y)
.1971	20 76 19	jsr $1976			jsr 	_GHMCDoIt
.1974	fa		plx				plx
.1975	60		rts				rts
.1976					_GHMCDoIt:
.1976	bd e8 0b	lda $0be8,x			lda 	gCurrentXPos,x 				; copy the current position to X,Y
.1979	9d ec 0b	sta $0bec,x			sta 	gX1,x
.197c	bd e9 0b	lda $0be9,x			lda 	gCurrentXPos+1,x
.197f	9d ed 0b	sta $0bed,x			sta 	gX1+1,x
.1982	da		phx				phx
.1983	a9 00		lda #$00			lda 	#0 							; evaluate the parameter, now in esInt0,esInt1
.1985	a2 0a		ldx #$0a		ldx	#10
.1987	20 f5 3f	jsr $3ff5		jsr	mainHandler
.198a	fa		plx				plx
.198b	a5 98		lda $98				lda 	esInt0 						; check coordinate range
.198d	dd 03 0c	cmp $0c03,x			cmp 	gdXLimit,x
.1990	a5 a0		lda $a0				lda 	esInt1
.1992	fd 04 0c	sbc $0c04,x			sbc 	gdXLimit+1,x
.1995	b0 17		bcs $19ae			bcs 	_GMHCRange
.1997	a5 a8		lda $a8				lda 	esInt2
.1999	05 b0		ora $b0				ora 	esInt3
.199b	d0 11		bne $19ae			bne 	_GMHCRange
.199d	a5 98		lda $98				lda 	esInt0 						; copy into current and X2,Y2
.199f	9d e8 0b	sta $0be8,x			sta 	gCurrentXPos,x
.19a2	9d f0 0b	sta $0bf0,x			sta 	gX2,x
.19a5	a5 a0		lda $a0				lda 	esInt1
.19a7	9d e9 0b	sta $0be9,x			sta 	gCurrentXPos+1,x
.19aa	9d f1 0b	sta $0bf1,x			sta 	gX2+1,x
.19ad	60		rts				rts
.19ae					_GMHCRange:
.19ae	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.19b0	20 27 15	jsr $1527		jsr	errorHandler

;******  Return to file: extension/extension.asm


;******  Processing file: extension/graphics/line.asm

.0c09					gdySign:
>0c09							.fill 	1
.19b3					Command_Line:
.19b3	a9 bb		lda #$bb			lda 	#LineHandler & $FF
.19b5	a2 19		ldx #$19			ldx 	#LineHandler >> 8
.19b7	20 e5 18	jsr $18e5			jsr 	GHandler
.19ba	60		rts				rts
.19bb					LineHandler:
.19bb	a2 00		ldx #$00			ldx 	#gX1-gX1 					; check if horizontal, vertical line
.19bd	a0 04		ldy #$04			ldy 	#gX2-gX1
.19bf	20 99 1c	jsr $1c99			jsr 	CompareCoordsEq
.19c2	f0 09		beq $19cd			beq 	_LHRectCode
.19c4	a2 02		ldx #$02			ldx 	#gY1-gX1
.19c6	a0 06		ldy #$06			ldy 	#gY2-gX1
.19c8	20 99 1c	jsr $1c99			jsr 	CompareCoordsEq
.19cb	d0 03		bne $19d0			bne 	_LHLineDrawer
.19cd					_LHRectCode:
.19cd	4c 00 1b	jmp $1b00			jmp 	RectHandler
.19d0					_LHLineDrawer:
.19d0	a2 00		ldx #$00			ldx 	#gX1-gX1 					; check if X1 < X2 e.g. it is sloped to the right.
.19d2	a0 04		ldy #$04			ldy 	#gX2-gX1
.19d4	20 84 1c	jsr $1c84			jsr 	CompareCoords
.19d7	90 0a		bcc $19e3			bcc 	_LHNoSwap
.19d9	20 cc 1c	jsr $1ccc			jsr 	GSwapCoords					; if so swap coords so X2 > X1, may be going up or down.
.19dc	a2 02		ldx #$02			ldx 	#gY1-gX1
.19de	a0 06		ldy #$06			ldy 	#gY2-gX1
.19e0	20 cc 1c	jsr $1ccc			jsr 	GSwapCoords
.19e3					_LHNoSwap:
.19e3	20 0c 1a	jsr $1a0c			jsr 	BresenhamInitialise 		; initialise Bresenham constants
.19e6	a0 00		ldy #$00			ldy 	#gX1-gX1
.19e8	20 6e 1c	jsr $1c6e			jsr 	SetupXY 					; set up X1,Y1 to draw.
.19eb	b0 15		bcs $1a02			bcs 	_LHExit 					; line off screen.
.19ed					_LHDrawLoop:
.19ed	a2 00		ldx #$00			ldx 	#gX1-gX1 					; check if X1=X2 and Y1 = Y2
.19ef	a0 04		ldy #$04			ldy 	#gX2-gX1
.19f1	20 99 1c	jsr $1c99			jsr 	CompareCoordsEq
.19f4	d0 0d		bne $1a03			bne 	_LHNextPixel
.19f6	a2 06		ldx #$06			ldx 	#gY2-gX1
.19f8	a0 06		ldy #$06			ldy 	#gY2-gX1
.19fa	20 99 1c	jsr $1c99			jsr 	CompareCoordsEq
.19fd	d0 04		bne $1a03			bne 	_LHNextPixel
.19ff	20 88 1d	jsr $1d88			jsr 	gdPlotInk 					; plot the last pixel.
.1a02					_LHExit:
.1a02	60		rts				rts
.1a03					_LHNextPixel:
.1a03	20 88 1d	jsr $1d88			jsr 	gdPlotInk 					; plot the pixel.
.1a06	20 60 1a	jsr $1a60			jsr 	BresenhamIteration 			; do one bresenham iteration calculation
.1a09	4c ed 19	jmp $19ed			jmp  	_LHDrawLoop 				; and loop back if okay
.1a0c					BresenhamInitialise:
.1a0c	38		sec				sec
.1a0d	ad f0 0b	lda $0bf0			lda 	gX2
.1a10	ed ec 0b	sbc $0bec			sbc 	gX1
.1a13	8d f8 0b	sta $0bf8			sta 	gdX
.1a16	ad f1 0b	lda $0bf1			lda 	gX2+1
.1a19	ed ed 0b	sbc $0bed			sbc 	gX1+1
.1a1c	8d f9 0b	sta $0bf9			sta 	gdX+1
.1a1f	38		sec				sec
.1a20	ad ee 0b	lda $0bee			lda 	gY1
.1a23	ed f2 0b	sbc $0bf2			sbc 	gY2
.1a26	8d fa 0b	sta $0bfa			sta 	gdy
.1a29	ad ef 0b	lda $0bef			lda 	gY1+1
.1a2c	ed f3 0b	sbc $0bf3			sbc 	gY2+1
.1a2f	8d fb 0b	sta $0bfb			sta 	gdy+1
.1a32	ad fb 0b	lda $0bfb			lda 	gdy+1 						; save sign of dy
.1a35	8d 09 0c	sta $0c09			sta 	gdysign
.1a38	30 12		bmi $1a4c			bmi 	_BINormal
.1a3a	38		sec				sec
.1a3b	a9 00		lda #$00			lda 	#0
.1a3d	ed fa 0b	sbc $0bfa			sbc 	gdy
.1a40	8d fa 0b	sta $0bfa			sta 	gdy
.1a43	a9 00		lda #$00			lda 	#0
.1a45	ed fb 0b	sbc $0bfb			sbc 	gdy+1
.1a48	8d fb 0b	sta $0bfb			sta 	gdy+1
.1a4b	60		rts				rts
.1a4c					_BINormal:
.1a4c	18		clc				clc
.1a4d	ad f8 0b	lda $0bf8			lda 	gdx
.1a50	6d fa 0b	adc $0bfa			adc 	gdy
.1a53	8d f4 0b	sta $0bf4			sta 	gError
.1a56	ad f9 0b	lda $0bf9			lda 	gdx+1
.1a59	6d fb 0b	adc $0bfb			adc 	gdy+1
.1a5c	8d f5 0b	sta $0bf5			sta 	gError+1
.1a5f	60		rts				rts
.1a60					BresenhamIteration:
.1a60	ad f4 0b	lda $0bf4			lda 	gError
.1a63	0a		asl a				asl 	a
.1a64	8d f6 0b	sta $0bf6			sta 	g2Error
.1a67	ad f5 0b	lda $0bf5			lda 	gError+1
.1a6a	2a		rol a				rol 	a
.1a6b	8d f7 0b	sta $0bf7			sta 	g2Error+1
.1a6e	a2 0a		ldx #$0a			ldx 	#g2Error-gX1
.1a70	a0 0e		ldy #$0e			ldy 	#gdy-gX1
.1a72	20 91 1c	jsr $1c91			jsr 	CompareCoordsSigned
.1a75	30 03		bmi $1a7a			bmi 	_BINoE2DY
.1a77	20 87 1a	jsr $1a87			jsr 	BresenhamE2GEDY
.1a7a					_BINoE2DY:
.1a7a	a2 0c		ldx #$0c			ldx 	#gdx-gX1
.1a7c	a0 0a		ldy #$0a			ldy 	#g2Error-gX1
.1a7e	20 91 1c	jsr $1c91			jsr 	CompareCoordsSigned
.1a81	30 03		bmi $1a86			bmi 	_BINoDXE2
.1a83	20 a6 1a	jsr $1aa6			jsr 	BresenhamDXGEE2
.1a86					_BINoDXE2:
.1a86	60		rts				rts
.1a87					BresenhamE2GEDY:
.1a87	18		clc				clc
.1a88	ad f4 0b	lda $0bf4			lda 	gError
.1a8b	6d fa 0b	adc $0bfa			adc 	gdy
.1a8e	8d f4 0b	sta $0bf4			sta 	gError
.1a91	ad f5 0b	lda $0bf5			lda 	gError+1
.1a94	6d fb 0b	adc $0bfb			adc 	gdy+1
.1a97	8d f5 0b	sta $0bf5			sta 	gError+1
.1a9a	ee ec 0b	inc $0bec			inc 	gX1
.1a9d	d0 03		bne $1aa2			bne 	_BE2Skip
.1a9f	ee ed 0b	inc $0bed			inc 	gX1+1
.1aa2					_BE2Skip:
.1aa2	20 e9 1c	jsr $1ce9			jsr 	gdMvRight
.1aa5	60		rts				rts
.1aa6					BresenhamDXGEE2:
.1aa6	18		clc				clc
.1aa7	ad f4 0b	lda $0bf4			lda 	gError
.1aaa	6d f8 0b	adc $0bf8			adc 	gdx
.1aad	8d f4 0b	sta $0bf4			sta 	gError
.1ab0	ad f5 0b	lda $0bf5			lda 	gError+1
.1ab3	6d f9 0b	adc $0bf9			adc 	gdx+1
.1ab6	8d f5 0b	sta $0bf5			sta 	gError+1
.1ab9	ad 09 0c	lda $0c09			lda 	gdySign
.1abc	10 0c		bpl $1aca			bpl 	_BEDXInvertY
.1abe	ee ee 0b	inc $0bee			inc 	gY1
.1ac1	d0 03		bne $1ac6			bne 	_BEDXSkip
.1ac3	ee ef 0b	inc $0bef			inc 	gY1+1
.1ac6					_BEDXSkip:
.1ac6	20 24 1d	jsr $1d24			jsr 	gdMvDown
.1ac9	60		rts				rts
.1aca					_BEDXInvertY:
.1aca	ad ee 0b	lda $0bee			lda 	gY1
.1acd	d0 03		bne $1ad2			bne 	_BEDXSkip2
.1acf	ce ef 0b	dec $0bef			dec 	gY1+1
.1ad2					_BEDXSkip2:
.1ad2	ce ee 0b	dec $0bee			dec 	gY1
.1ad5	20 ff 1c	jsr $1cff			jsr 	gdMvUp
.1ad8	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/graphics/plot.asm

.1ad9					Command_Plot:
.1ad9	a9 e1		lda #$e1			lda 	#PlotHandler & $FF
.1adb	a2 1a		ldx #$1a			ldx 	#PlotHandler >> 8
.1add	20 e5 18	jsr $18e5			jsr 	GHandler
.1ae0	60		rts				rts
.1ae1					PlotHandler:
.1ae1	a0 04		ldy #$04			ldy 	#gX2-gX1
.1ae3	20 6e 1c	jsr $1c6e			jsr 	SetupXY 					; set up X1,Y1 to draw.
.1ae6	b0 03		bcs $1aeb			bcs 	_PHExit 					; off screen, return with CS.
.1ae8	20 88 1d	jsr $1d88			jsr 	gdPlotInk 					; pixel in Ink.
.1aeb	60		rts		_PHExit:rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/graphics/rectframe.asm

.0c0a					frameFlag:
>0c0a							.fill 	1
.1aec					Command_Rect:
.1aec	a9 00		lda #$00			lda 	#RectHandler & $FF
.1aee	a2 1b		ldx #$1b			ldx 	#RectHandler >> 8
.1af0	20 e5 18	jsr $18e5			jsr 	GHandler
.1af3	60		rts				rts
.1af4					Command_Frame:
.1af4	a9 fc		lda #$fc			lda 	#FrameHandler & $FF
.1af6	a2 1a		ldx #$1a			ldx 	#FrameHandler >> 8
.1af8	20 e5 18	jsr $18e5			jsr 	GHandler
.1afb	60		rts				rts
.1afc					FrameHandler:
.1afc	a9 01		lda #$01			lda 	#1
.1afe	d0 02		bne $1b02			bne 	RectHandler+2
.1b00					RectHandler:
.1b00	a9 00		lda #$00			lda 	#0
.1b02	8d 0a 0c	sta $0c0a			sta 	frameFlag
.1b05	20 a8 1c	jsr $1ca8			jsr 	BoxSort 					; sort so topleft/bottom right
.1b08	20 31 1b	jsr $1b31			jsr 	DrawBoxPart 				; solid first line
.1b0b					_FHLoop:
.1b0b	a2 02		ldx #$02			ldx 	#gY1-gX1 					; check Y1 = Y2
.1b0d	a0 06		ldy #$06			ldy 	#gY2-gX1
.1b0f	20 84 1c	jsr $1c84			jsr 	CompareCoords
.1b12	b0 19		bcs $1b2d			bcs 	_FHLastLine 				; Y1 >= Y2 then end.
.1b14	ad 0a 0c	lda $0c0a			lda 	frameFlag 					; identify solid or frame ?
.1b17	f0 06		beq $1b1f			beq 	_FHIsSolidRect
.1b19	20 4a 1b	jsr $1b4a			jsr 	DrawBoxEnds
.1b1c	4c 22 1b	jmp $1b22			jmp 	_FHNext
.1b1f					_FHIsSolidRect:
.1b1f	20 31 1b	jsr $1b31			jsr 	DrawBoxPart
.1b22					_FHNext:
.1b22	ee ee 0b	inc $0bee			inc 	gY1 						; bump Y1 and loop back.
.1b25	d0 e4		bne $1b0b			bne 	_FHLoop
.1b27	ee ef 0b	inc $0bef			inc 	gY1+1
.1b2a	4c 0b 1b	jmp $1b0b			jmp 	_FHLoop
.1b2d					_FHLastLine:
.1b2d	20 31 1b	jsr $1b31			jsr 	DrawBoxPart 				; solid last line whatever
.1b30					_FHExit:
.1b30	60		rts				rts
.1b31					DrawBoxPart:
.1b31	a0 00		ldy #$00			ldy 	#gX1-gX1
.1b33	20 6e 1c	jsr $1c6e			jsr 	SetupXY 					; set up X1,Y1 to draw.
.1b36	38		sec				sec 								; calculate line length => temp0
.1b37	ad f0 0b	lda $0bf0			lda 	gX2
.1b3a	ed ec 0b	sbc $0bec			sbc 	gX1
.1b3d	48		pha				pha
.1b3e	ad f1 0b	lda $0bf1			lda 	gX2+1
.1b41	ed ed 0b	sbc $0bed			sbc 	gx1+1
.1b44	aa		tax				tax
.1b45	68		pla				pla 								; line length in XA.
.1b46	20 62 1b	jsr $1b62			jsr 	DrawHorizontalLine
.1b49	60		rts				rts
.1b4a					DrawBoxEnds:
.1b4a	a0 00		ldy #$00			ldy 	#gX1-gX1
.1b4c	20 6e 1c	jsr $1c6e			jsr 	SetupXY 					; set up X1,Y1 to draw.
.1b4f	20 88 1d	jsr $1d88			jsr 	gdPlotInk 					; LH end.
.1b52	ad f0 0b	lda $0bf0			lda 	gX2 						; set position to X2,Y1
.1b55	ae f1 0b	ldx $0bf1			ldx 	gX2+1
.1b58	20 35 1e	jsr $1e35			jsr 	gdSetX
.1b5b	20 46 1d	jsr $1d46			jsr		gdSetDrawPosition 			; update position.
.1b5e	20 88 1d	jsr $1d88			jsr 	gdPlotInk 					; RH end.
.1b61	60		rts				rts
.1b62					DrawHorizontalLine:
.1b62	86 32		stx $32				stx 	tempShort
.1b64	aa		tax				tax
.1b65	a4 32		ldy $32				ldy 	tempShort
.1b67	ad fe 0b	lda $0bfe			lda 	gdInk
.1b6a	4c 43 1e	jmp $1e43			jmp 	gdOptHorizontalWriter

;******  Return to file: extension/extension.asm


;******  Processing file: extension/graphics/renderer.asm

.0c0b					RenderFunction:
>0c0b							.fill 	2
.0c0d					RenderWidth:
>0c0d							.fill 	1
.0c0e					RenderHeight:
>0c0e							.fill 	1
.0c0f					RenderType:
>0c0f							.fill 	1
.0c10					RenderCache:
>0c10							.fill 	64
.1b6d					ImageRenderer:
.1b6d	8e 0c 0c	stx $0c0c			stx 	RenderFunction+1
.1b70	8d 0b 0c	sta $0c0b			sta 	RenderFunction
.1b73	a0 ff		ldy #$ff			ldy 	#255 						; get information.
.1b75	20 56 1c	jsr $1c56			jsr 	CallRenderFunction
.1b78	8d 0f 0c	sta $0c0f			sta 	RenderType 					; and save it.
.1b7b	8e 0d 0c	stx $0c0d			stx 	RenderWidth
.1b7e	8c 0e 0c	sty $0c0e			sty 	RenderHeight
.1b81	8a		txa				txa 								; check X coordinate
.1b82	a2 00		ldx #$00			ldx 	#0 							; offset to check position/limit.
.1b84	20 1d 1c	jsr $1c1d			jsr 	RenderCheckRange
.1b87	ad 0e 0c	lda $0c0e			lda 	RenderHeight 				; check Y coordinate
.1b8a	a2 02		ldx #$02			ldx 	#2
.1b8c	20 1d 1c	jsr $1c1d			jsr 	RenderCheckRange
.1b8f	a0 00		ldy #$00			ldy 	#0 							; Y is the current line #
.1b91					_IRLoop1:
.1b91	5a		phy				phy
.1b92	20 f9 1b	jsr $1bf9			jsr 	RenderFlipXY 				; flip X/Y for the correct vertical row.
.1b95	20 56 1c	jsr $1c56			jsr 	CallRenderFunction 			; fill the rendering cache.
.1b98	7a		ply				ply
.1b99	ae 00 0c	ldx $0c00			ldx 	gdSize 						; number of times to do the row.
.1b9c					_IRLoop2:
.1b9c	20 a9 1b	jsr $1ba9			jsr 	RenderDrawRow 				; draw one row.
.1b9f	ca		dex				dex 								; scale # times.
.1ba0	d0 fa		bne $1b9c			bne 	_IRLoop2
.1ba2	c8		iny				iny 								; next vertical row
.1ba3	cc 0e 0c	cpy $0c0e			cpy 	RenderHeight 				; done the lot ?
.1ba6	d0 e9		bne $1b91			bne 	_IRLoop1
.1ba8	60		rts				rts
.1ba9					RenderDrawRow:
.1ba9	da		phx				phx
.1baa	5a		phy				phy
.1bab	a0 04		ldy #$04			ldy 	#gX2-gX1 					; set the position at (x,y)
.1bad	20 6e 1c	jsr $1c6e			jsr 	SetupXY
.1bb0	7a		ply				ply
.1bb1	a2 00		ldx #$00			ldx 	#0 							; X is the current pixel.
.1bb3					_RDRLoop1:
.1bb3	20 c6 1b	jsr $1bc6			jsr 	RenderDrawPixelSet 			; draw a block of pixels of the correct size.
.1bb6	e8		inx				inx
.1bb7	ec 0d 0c	cpx $0c0d			cpx 	RenderWidth 				; until done the whole lot.
.1bba	d0 f7		bne $1bb3			bne 	_RDRLoop1
.1bbc	ee f2 0b	inc $0bf2			inc 	gY2 						; next line down
.1bbf	d0 03		bne $1bc4			bne 	_RDRNoCarry
.1bc1	ee f3 0b	inc $0bf3			inc 	gY2+1
.1bc4					_RDRNoCarry:
.1bc4	fa		plx				plx
.1bc5	60		rts				rts
.1bc6					RenderDrawPixelSet:
.1bc6	da		phx				phx
.1bc7	5a		phy				phy
.1bc8	20 f9 1b	jsr $1bf9			jsr 	RenderFlipXY 				; flip positions as required.
.1bcb	20 e3 1b	jsr $1be3			jsr 	RenderGetInk				; get colour to draw with.
.1bce	ae 00 0c	ldx $0c00			ldx 	gdSize 						; X counts the size.
.1bd1					_RDPSLoop:
.1bd1	c9 00		cmp #$00			cmp 	#0							; don't draw if $00
.1bd3	f0 03		beq $1bd8			beq 	_RDPSNoDraw
.1bd5	20 8b 1d	jsr $1d8b			jsr 	gdPlotA 					; draw A otherwise
.1bd8					_RDPSNoDraw:
.1bd8	48		pha				pha 								; move right
.1bd9	20 e9 1c	jsr $1ce9			jsr 	gdMvRight
.1bdc	68		pla				pla
.1bdd	ca		dex				dex
.1bde	d0 f1		bne $1bd1			bne 	_RDPSLoop 					; do it size times.
.1be0	7a		ply				ply
.1be1	fa		plx				plx
.1be2	60		rts				rts
.1be3					RenderGetInk:
.1be3	ad 0f 0c	lda $0c0f			lda 	RenderType 					; type, if 0 it's a bitmap
.1be6	f0 04		beq $1bec			beq 	_RGIBitmap
.1be8	bd 10 0c	lda $0c10,x			lda 	RenderCache,x 				; read from the cache.
.1beb	60		rts				rts
.1bec					_RGIBitmap:
.1bec	bd 10 0c	lda $0c10,x			lda 	RenderCache,x 				; read from the cache.
.1bef	f0 04		beq $1bf5			beq 	_RGIBPaper 					; return ink if #0, paper if =0
.1bf1	ad fe 0b	lda $0bfe			lda 	gdInk
.1bf4	60		rts				rts
.1bf5					_RGIBPaper:
.1bf5	ad ff 0b	lda $0bff			lda 	gdPaper
.1bf8	60		rts				rts
.1bf9					RenderFlipXY:
.1bf9	ad 02 0c	lda $0c02			lda 	gdFlip 						; check any flip at all
.1bfc	29 03		and #$03			and 	#3
.1bfe	f0 1c		beq $1c1c			beq 	_RFExit
.1c00	4a		lsr a				lsr 	a 							; bit 0 in carry flag
.1c01	90 09		bcc $1c0c			bcc 	_RFNoHFlip
.1c03	ad 0d 0c	lda $0c0d			lda 	RenderWidth 				; X Flip
.1c06	86 32		stx $32				stx 	tempShort
.1c08	18		clc				clc
.1c09	e5 32		sbc $32				sbc 	tempShort
.1c0b	aa		tax				tax
.1c0c					_RFNoHFlip:
.1c0c	ad 02 0c	lda $0c02			lda 	gdFlip
.1c0f	29 02		and #$02			and 	#2 							; bit 1 check
.1c11	f0 09		beq $1c1c			beq 	_RFExit
.1c13	ad 0e 0c	lda $0c0e			lda 	RenderHeight 				; Y Flip
.1c16	84 32		sty $32				sty 	tempShort
.1c18	18		clc				clc
.1c19	e5 32		sbc $32				sbc 	tempShort
.1c1b	a8		tay				tay
.1c1c					_RFExit:
.1c1c	60		rts				rts
.1c1d					RenderCheckRange:
.1c1d	85 2b		sta $2b				sta 	temp0+1 					; save multiplier => temp0+1
.1c1f	ac 00 0c	ldy $0c00			ldy 	gdSize 						; multiplicand (size) => temp0, must be non zero
.1c22	84 2a		sty $2a				sty 	temp0
.1c24	f0 2b		beq $1c51			beq 	_RCRValue
.1c26	a9 00		lda #$00			lda 	#0 							; total
.1c28					_RCRMultiply:
.1c28	46 2a		lsr $2a				lsr 	temp0 						; shift LSB size into carry
.1c2a	90 05		bcc $1c31			bcc 	_RCRNoAdd 					; not adding this time.
.1c2c	18		clc				clc
.1c2d	65 2b		adc $2b				adc 	temp0+1 					; add the size.
.1c2f	b0 20		bcs $1c51			bcs 	_RCRValue 					; overflow
.1c31					_RCRNoAdd:
.1c31	06 2b		asl $2b				asl 	temp0+1 					; double multiplier
.1c33	a4 2a		ldy $2a				ldy 	temp0 						; until adder is zero
.1c35	d0 f1		bne $1c28			bne 	_RCRMultiply
.1c37	18		clc				clc 								; add to x2 or y2, store in temp0
.1c38	7d f0 0b	adc $0bf0,x			adc 	gX2,x 						; this is the Right/Bottom coordinate of the image
.1c3b	85 2a		sta $2a				sta 	temp0
.1c3d	bd f1 0b	lda $0bf1,x			lda 	gX2+1,x
.1c40	69 00		adc #$00			adc 	#0
.1c42	85 2b		sta $2b				sta 	temp0+1
.1c44	a5 2a		lda $2a				lda 	temp0 						; check right vs edge of screen.
.1c46	dd 03 0c	cmp $0c03,x			cmp 	gdXLimit,x
.1c49	a5 2b		lda $2b				lda 	temp0+1
.1c4b	fd 04 0c	sbc $0c04,x			sbc 	gdXLimit+1,x
.1c4e	b0 01		bcs $1c51			bcs 	_RCRValue 					; does not fit, so don't draw.
.1c50	60		rts				rts
.1c51					_RCRValue:
.1c51	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.1c53	20 27 15	jsr $1527		jsr	errorHandler
.1c56					CallRenderFunction:
.1c56	6c 0b 0c	jmp ($0c0b)			jmp 	(RenderFunction)
.1c59					TestImageAccess:
.1c59	c0 ff		cpy #$ff			cpy 	#255 						; get information
.1c5b	f0 0a		beq $1c67			beq 	_TIAGetInfo
.1c5d	a0 3f		ldy #$3f			ldy 	#63
.1c5f					_TIACreate:
.1c5f	98		tya				tya
.1c60	99 10 0c	sta $0c10,y			sta 	RenderCache,y
.1c63	88		dey				dey
.1c64	10 f9		bpl $1c5f			bpl 	_TIACreate
.1c66	60		rts				rts
.1c67					_TIAGetInfo:
.1c67	a9 01		lda #$01			lda 	#1 							; image (1) bitmap (0)
.1c69	a2 20		ldx #$20			ldx 	#32 						; pixel width
.1c6b	a0 20		ldy #$20			ldy 	#32							; pixel height
.1c6d	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/graphics/utils.asm

.1c6e					SetupXY:
.1c6e	b9 ec 0b	lda $0bec,y			lda 	gX1,y
.1c71	be ed 0b	ldx $0bed,y			ldx 	gX1+1,y
.1c74	20 35 1e	jsr $1e35			jsr 	gdSetX
.1c77	b9 ee 0b	lda $0bee,y			lda 	gY1,y
.1c7a	be ef 0b	ldx $0bef,y			ldx 	gY1+1,y
.1c7d	20 3c 1e	jsr $1e3c			jsr 	gdSetY
.1c80	20 46 1d	jsr $1d46			jsr 	gdSetDrawPosition
.1c83	60		rts				rts
.1c84					CompareCoords:
.1c84	bd ec 0b	lda $0bec,x			lda 	gX1,x
.1c87	d9 ec 0b	cmp $0bec,y			cmp 	gX1,y
.1c8a	bd ed 0b	lda $0bed,x			lda 	gX1+1,x
.1c8d	f9 ed 0b	sbc $0bed,y			sbc 	gX1+1,y
.1c90	60		rts				rts
.1c91					CompareCoordsSigned:
.1c91	20 84 1c	jsr $1c84			jsr 	CompareCoords
.1c94	50 02		bvc $1c98			bvc 	_CCSExit
.1c96	49 80		eor #$80			eor 	#$80
.1c98					_CCSExit:
.1c98	60		rts				rts
.1c99					CompareCoordsEq:
.1c99	bd ec 0b	lda $0bec,x			lda 	gX1,x
.1c9c	d9 ec 0b	cmp $0bec,y			cmp 	gX1,y
.1c9f	d0 06		bne $1ca7			bne 	_CCEExit
.1ca1	bd ed 0b	lda $0bed,x			lda 	gX1+1,x
.1ca4	d9 ed 0b	cmp $0bed,y			cmp 	gX1+1,y
.1ca7					_CCEExit:
.1ca7	60		rts				rts
.1ca8					BoxSort:
.1ca8	a2 00		ldx #$00			ldx 	#gx1-gx1
.1caa	a0 04		ldy #$04			ldy 	#gx2-gx1
.1cac	20 bd 1c	jsr $1cbd			jsr 	GCompareCoords
.1caf	20 ca 1c	jsr $1cca			jsr 	GSortMinMaxCoords
.1cb2	a2 02		ldx #$02			ldx 	#gy1-gx1
.1cb4	a0 06		ldy #$06			ldy 	#gy2-gx1
.1cb6	20 bd 1c	jsr $1cbd			jsr 	GCompareCoords
.1cb9	20 ca 1c	jsr $1cca			jsr 	GSortMinMaxCoords
.1cbc	60		rts				rts
.1cbd					GCompareCoords:
.1cbd	bd ec 0b	lda $0bec,x			lda 	gx1,x
.1cc0	d9 ec 0b	cmp $0bec,y			cmp 	gx1,y
.1cc3	bd ed 0b	lda $0bed,x			lda 	gx1+1,x
.1cc6	f9 ed 0b	sbc $0bed,y			sbc 	gx1+1,y
.1cc9	60		rts				rts
.1cca					GSortMinMaxCoords:
.1cca	90 1c		bcc $1ce8			bcc 	GSMMCExit
.1ccc					GSwapCoords:
.1ccc	bd ec 0b	lda $0bec,x			lda 	gx1,x
.1ccf	48		pha				pha
.1cd0	b9 ec 0b	lda $0bec,y			lda 	gx1,y
.1cd3	9d ec 0b	sta $0bec,x			sta 	gx1,x
.1cd6	68		pla				pla
.1cd7	99 ec 0b	sta $0bec,y			sta 	gx1,y
.1cda	bd ed 0b	lda $0bed,x			lda 	gx1+1,x
.1cdd	48		pha				pha
.1cde	b9 ed 0b	lda $0bed,y			lda 	gx1+1,y
.1ce1	9d ed 0b	sta $0bed,x			sta 	gx1+1,x
.1ce4	68		pla				pla
.1ce5	99 ed 0b	sta $0bed,y			sta 	gx1+1,y
.1ce8					GSMMCExit:
.1ce8	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/driver/coords.asm

.1ce9					gdMvRight:
.1ce9	ee 20 9f	inc $9f20			inc 	$9F20 						; bump $9F20
.1cec	d0 08		bne $1cf6			bne 	_gdMR0
.1cee	ee 21 9f	inc $9f21			inc 	$9F21
.1cf1	d0 03		bne $1cf6			bne 	_gdMR0
.1cf3	ee 22 9f	inc $9f22			inc 	$9F22
.1cf6					_gdMR0:
.1cf6	ee 54 0c	inc $0c54			inc 	gdXPos
.1cf9	d0 03		bne $1cfe			bne 	_gdMR1
.1cfb	ee 55 0c	inc $0c55			inc 	gdXPos+1
.1cfe					_gdMR1:
.1cfe	60		rts				rts
.1cff					gdMvUp:
.1cff	ad 56 0c	lda $0c56			lda 	gdYPos 						; decrement Y Pos
.1d02	d0 03		bne $1d07			bne 	_gdMU1
.1d04	ce 57 0c	dec $0c57			dec 	gdYPos+1
.1d07	ce 56 0c	dec $0c56	_gdMU1:	dec 	gdYPos
.1d0a	38		sec				sec 								; adjust position by -320
.1d0b	ad 20 9f	lda $9f20			lda 	$9F20
.1d0e	e9 40		sbc #$40			sbc 	#64
.1d10	8d 20 9f	sta $9f20			sta 	$9F20
.1d13	ad 21 9f	lda $9f21			lda 	$9F21
.1d16	e9 01		sbc #$01			sbc 	#1
.1d18	8d 21 9f	sta $9f21			sta 	$9F21
.1d1b	ad 22 9f	lda $9f22			lda 	$9F22
.1d1e	e9 00		sbc #$00			sbc 	#0
.1d20	8d 22 9f	sta $9f22			sta 	$9F22
.1d23	60		rts				rts
.1d24					gdMvDown:
.1d24	ee 56 0c	inc $0c56			inc 	gdYPos 						; decrement Y Pos
.1d27	d0 03		bne $1d2c			bne 	_gdMU1
.1d29	ee 57 0c	inc $0c57			inc 	gdYPos+1
.1d2c					_gdMU1:
.1d2c	18		clc				clc 								; adjust position by -320
.1d2d	ad 20 9f	lda $9f20			lda 	$9F20
.1d30	69 40		adc #$40			adc 	#64
.1d32	8d 20 9f	sta $9f20			sta 	$9F20
.1d35	ad 21 9f	lda $9f21			lda 	$9F21
.1d38	69 01		adc #$01			adc 	#1
.1d3a	8d 21 9f	sta $9f21			sta 	$9F21
.1d3d	ad 22 9f	lda $9f22			lda 	$9F22
.1d40	69 00		adc #$00			adc 	#0
.1d42	8d 22 9f	sta $9f22			sta 	$9F22
.1d45	60		rts				rts
.1d46					gdSetDrawPosition:
.1d46	a9 00		lda #$00			lda 	#0 							; temp0 is LSB of result start as 256 x Y
.1d48	85 2a		sta $2a				sta 	temp0
.1d4a	ad 56 0c	lda $0c56			lda 	gdYPos
.1d4d	85 2b		sta $2b				sta 	temp0+1
.1d4f	46 2b		lsr $2b				lsr 	temp0+1 					; / 4 so temp0 is YC x 64
.1d51	66 2a		ror $2a				ror 	temp0
.1d53	46 2b		lsr $2b				lsr 	temp0+1
.1d55	66 2a		ror $2a				ror 	temp0
.1d57	ad 56 0c	lda $0c56			lda 	gdYPos 						; add 256 x Y => 320 * Y < 64k
.1d5a	18		clc				clc
.1d5b	65 2b		adc $2b				adc 	temp0+1
.1d5d	85 2b		sta $2b				sta 	temp0+1 					; temp0 = 320 x Y now add X => pixeloffset
.1d5f	18		clc				clc
.1d60	a5 2a		lda $2a				lda 	temp0
.1d62	6d 54 0c	adc $0c54			adc 	gdXPos
.1d65	85 2a		sta $2a				sta 	temp0
.1d67	a5 2b		lda $2b				lda 	temp0+1
.1d69	6d 55 0c	adc $0c55			adc 	gdXPos+1
.1d6c	85 2b		sta $2b				sta 	temp0+1
.1d6e	18		clc				clc
.1d6f	ad 51 0c	lda $0c51			lda 	gdBitmapAddress
.1d72	65 2a		adc $2a				adc 	temp0
.1d74	8d 20 9f	sta $9f20			sta 	$9F20
.1d77	ad 52 0c	lda $0c52			lda 	gdBitmapAddress+1
.1d7a	65 2b		adc $2b				adc 	temp0+1
.1d7c	8d 21 9f	sta $9f21			sta 	$9F21
.1d7f	ad 53 0c	lda $0c53			lda 	gdBitmapAddress+2
.1d82	69 00		adc #$00			adc 	#0
.1d84	8d 22 9f	sta $9f22			sta 	$9F22
.1d87	60		rts				rts
.1d88					gdPlotInk:
.1d88	ad fe 0b	lda $0bfe			lda 	gdInk
.1d8b					gdPlotA:
.1d8b	8d 23 9f	sta $9f23			sta 	$9F23
.1d8e	60		rts				rts
.1d8f					gdPlotPaper:
.1d8f	ad ff 0b	lda $0bff			lda 	gdPaper
.1d92	c9 ff		cmp #$ff			cmp 	#$FF
.1d94	f0 03		beq $1d99			beq 	_gdPPSkip
.1d96	8d 23 9f	sta $9f23			sta 	$9F23
.1d99					_gdPPSkip:
.1d99	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/driver/driver.asm

.0c50					gdEnabled:
>0c50							.fill 	1
.0c51					gdBitmapAddress:
>0c51							.fill 	3
.0c54					gdXPos:
>0c54							.fill 	2
.0c56					gdYPos:
>0c56							.fill 	2
.1d9a					gdModeChanged:
.1d9a	da		phx				phx
.1d9b	5a		phy				phy
.1d9c	a9 00		lda #$00			lda 	#0 							; zero the enabled flag.
.1d9e	8d 50 0c	sta $0c50			sta 	gdEnabled
.1da1	ad 2a 9f	lda $9f2a			lda 	$9F2A 						; requires $40 for H/V Scale
.1da4	c9 40		cmp #$40			cmp 	#$40
.1da6	d0 1f		bne $1dc7			bne 	_gdExit
.1da8	ad 2b 9f	lda $9f2b			lda 	$9F2B
.1dab	c9 40		cmp #$40			cmp 	#$40
.1dad	d0 18		bne $1dc7			bne 	_gdExit
.1daf	ad 29 9f	lda $9f29			lda 	$9F29 						; read DC_Video, see which layers are enabled.
.1db2	0a		asl a				asl 	a 							;
.1db3	0a		asl a				asl 	a 							; bit 7 now set if layer 1 enabled.
.1db4	10 09		bpl $1dbf			bpl 	_gdNotLayer1
.1db6	48		pha				pha 								; save A
.1db7	a2 07		ldx #$07			ldx 	#7 							; check offset 7 (e.g. start at $9F34)
.1db9	20 cd 1d	jsr $1dcd			jsr 	gdCheckBitmap 				; go see if this is a bitmap
.1dbc	68		pla				pla 								; restore A
.1dbd	b0 08		bcs $1dc7			bcs 	_gdExit 					; if successful then exit
.1dbf					_gdNotLayer1:
.1dbf	0a		asl a				asl 	a 							; bit 7 now set if layer 0 enabled.
.1dc0	10 05		bpl $1dc7			bpl 	_gdExit 					; if not enabled, exit
.1dc2	a2 00		ldx #$00			ldx 	#0 							; check offset 0 (e.g. start at $9F2D)
.1dc4	20 cd 1d	jsr $1dcd			jsr 	gdCheckBitmap 				; go see if this is a bitmap
.1dc7					_gdExit:
.1dc7	20 01 1e	jsr $1e01			jsr 	gdClearGraphics 			; clear graphics display.
.1dca	7a		ply				ply
.1dcb	fa		plx				plx
.1dcc	60		rts				rts
.1dcd					gdCheckBitmap:
.1dcd	bd 2d 9f	lda $9f2d,x			lda 	$9F2D,x 					; look at bitmap bit.
.1dd0	c9 07		cmp #$07			cmp 	#7 							; must be zero map size, bitmap and 8bpp
.1dd2	d0 14		bne $1de8			bne 	_gdCBFail
.1dd4	ee 50 0c	inc $0c50			inc 	gdEnabled 					; set the enabled flag to non zero.
.1dd7	bd 2f 9f	lda $9f2f,x			lda 	$9F2F,x 					; this is the bitmap address / 2
.1dda	0a		asl a				asl 	a
.1ddb	8d 52 0c	sta $0c52			sta 	gdBitmapAddress+1
.1dde	69 00		adc #$00			adc 	#$00 						; set to no move, updated manually.
.1de0	8d 53 0c	sta $0c53			sta 	gdBitmapAddress+2
.1de3	a9 00		lda #$00			lda 	#$00
.1de5	8d 51 0c	sta $0c51			sta 	gdBitmapAddress 			; this is a 17 bit address.
.1de8					_gdCBFail:
.1de8	18		clc				clc
.1de9	60		rts				rts
.1dea					CommandClg:
.1dea	b1 28		lda ($28),y			lda 	(codePtr),y
.1dec	c9 e2		cmp #$e2			cmp 	#TKW_PAPER
.1dee	d0 0d		bne $1dfd			bne 	_CCLClear
.1df0	c8		iny				iny
.1df1	a9 00		lda #$00			lda 	#0
.1df3	a2 0c		ldx #$0c		ldx	#12
.1df5	20 f5 3f	jsr $3ff5		jsr	mainHandler
.1df8	a5 98		lda $98				lda 	esInt0
.1dfa	8d ff 0b	sta $0bff			sta 	gdPaper
.1dfd					_CCLClear:
.1dfd	20 01 1e	jsr $1e01			jsr 	gdClearGraphics
.1e00	60		rts				rts
.1e01					gdClearGraphics:
.1e01	da		phx				phx
.1e02	5a		phy				phy
.1e03	ad 50 0c	lda $0c50			lda 	gdEnabled 					; screen enabled
.1e06	f0 2a		beq $1e32			beq 	_gdCGExit
.1e08	a9 40		lda #$40			lda 	#(320) & $FF
.1e0a	8d 03 0c	sta $0c03			sta 	gdXLimit
.1e0d	a9 01		lda #$01			lda 	#(320) >> 8
.1e0f	8d 04 0c	sta $0c04			sta 	1+(gdXLimit)
.1e12	a9 c8		lda #$c8			lda 	#(200) & $FF
.1e14	8d 05 0c	sta $0c05			sta 	gdYLimit
.1e17	a9 00		lda #$00			lda 	#(200) >> 8
.1e19	8d 06 0c	sta $0c06			sta 	1+(gdYLimit)
.1e1c	a9 00		lda #$00			lda 	#0 							; home cursor
.1e1e	aa		tax				tax
.1e1f	20 35 1e	jsr $1e35			jsr 	gdSetX
.1e22	20 3c 1e	jsr $1e3c			jsr 	gdSetY
.1e25	20 46 1d	jsr $1d46			jsr 	gdSetDrawPosition 			; set the draw position.
.1e28	a0 fa		ldy #$fa			ldy 	#$FA						; 320 x 200 pixels = $FA00
.1e2a	a2 00		ldx #$00			ldx 	#0
.1e2c	ad ff 0b	lda $0bff			lda 	gdPaper
.1e2f	20 43 1e	jsr $1e43			jsr 	gdOptHorizontalWriter
.1e32					_gdCGExit:
.1e32	7a		ply				ply
.1e33	fa		plx				plx
.1e34	60		rts				rts
.1e35					gdSetX:
.1e35	8d 54 0c	sta $0c54			sta 	gdXPos
.1e38	8e 55 0c	stx $0c55			stx 	gdXPos+1
.1e3b	60		rts				rts
.1e3c					gdSetY:
.1e3c	8d 56 0c	sta $0c56			sta 	gdYPos
.1e3f	8e 57 0c	stx $0c57			stx 	gdYPos+1
.1e42	60		rts				rts
.1e43					gdOptHorizontalWriter:
.1e43	48		pha				pha
.1e44	ad 22 9f	lda $9f22			lda 	$9F22 						; make it autoincrement.
.1e47	09 10		ora #$10			ora 	#$10
.1e49	8d 22 9f	sta $9f22			sta 	$9F22
.1e4c	68		pla				pla
.1e4d					_gdOLoop:
.1e4d	8d 23 9f	sta $9f23			sta 	$9F23
.1e50	e0 00		cpx #$00			cpx 	#0
.1e52	d0 05		bne $1e59			bne 	_gdNoBorrow
.1e54	c0 00		cpy #$00			cpy 	#0
.1e56	f0 05		beq $1e5d			beq 	_gdExit
.1e58	88		dey				dey
.1e59					_gdNoBorrow:
.1e59	ca		dex				dex
.1e5a	4c 4d 1e	jmp $1e4d			jmp 	_gdOLoop
.1e5d					_gdExit:
.1e5d	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/miscellany/clock.asm

.1e5e					Unary_Clock:
.1e5e	a2 0c		ldx #$0c		ldx	#12
.1e60	20 f5 3f	jsr $3ff5		jsr	mainHandler
.1e63	48		pha				pha 								; save stack pos
.1e64	a2 04		ldx #$04		ldx	#4
.1e66	20 f5 3f	jsr $3ff5		jsr	mainHandler
.1e69	5a		phy				phy
.1e6a	20 50 ff	jsr $ff50			jsr 	$FF50
.1e6d	7a		ply				ply
.1e6e	68		pla				pla 								; restore, repush, put into X to read offset
.1e6f	48		pha				pha
.1e70	aa		tax				tax
.1e71	b5 98		lda $98,x			lda 	esInt0,x 					; must be 0-5
.1e73	c9 06		cmp #$06			cmp 	#6
.1e75	b0 0d		bcs $1e84			bcs 	_UCValue
.1e77	aa		tax				tax 								; index in X and read RTC.
.1e78	b5 02		lda $02,x			lda 	2,x
.1e7a	85 32		sta $32				sta 	tempshort
.1e7c	68		pla				pla 								; restore number stack index.
.1e7d	aa		tax				tax
.1e7e	a5 32		lda $32				lda 	tempShort
.1e80	95 98		sta $98,x			sta 	esInt0,x 					; rest are set up.
.1e82	8a		txa				txa
.1e83	60		rts				rts
.1e84					_UCValue:
.1e84	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.1e86	20 27 15	jsr $1527		jsr	errorHandler

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/miscellany/joystick.asm

.1e89					Unary_JoyX:
.1e89	38		sec				sec
.1e8a	b0 01		bcs $1e8d			bcs 	JoystickRead
.1e8c					Unary_JoyY:
.1e8c	18		clc				clc
.1e8d					JoystickRead:
.1e8d	48		pha				pha 								; save stack position
.1e8e	08		php				php 								; save test flag.
.1e8f	a2 04		ldx #$04		ldx	#4
.1e91	20 f5 3f	jsr $3ff5		jsr	mainHandler
.1e94	20 eb 1e	jsr $1eeb			jsr 	ReadJoystick 				; read it.
.1e97	28		plp				plp
.1e98	b0 02		bcs $1e9c			bcs 	_JRNoShift 					; if Y, shift right twice so accessing Y buttons
.1e9a	4a		lsr a				lsr 	a
.1e9b	4a		lsr a				lsr 	a
.1e9c					_JRNoShift:
.1e9c	29 03		and #$03			and 	#3 							; isolate the test bits.
.1e9e	f0 0d		beq $1ead			beq 	JoyReturnA 					; if nothing pressed, return A.
.1ea0	c9 03		cmp #$03			cmp 	#3
.1ea2	f0 07		beq $1eab			beq 	JoyReturnFalse 				; could be both on a keyboard.
.1ea4	4a		lsr a				lsr 	a 							; bit 0 set, its +1
.1ea5	b0 15		bcs $1ebc			bcs 	JoyReturn1
.1ea7					JoyReturnTrue:
.1ea7	a9 ff		lda #$ff			lda 	#$FF
.1ea9	d0 02		bne $1ead			bne 	JoyReturnA
.1eab					JoyReturnFalse:
.1eab	a9 00		lda #$00			lda 	#0
.1ead					JoyReturnA:
.1ead	85 32		sta $32				sta 	tempShort 					; return A
.1eaf	fa		plx				plx
.1eb0	a5 32		lda $32				lda 	tempShort
.1eb2	95 98		sta $98,x			sta 	esInt0,x
.1eb4					JoyReturn13:
.1eb4	95 a0		sta $a0,x			sta 	esInt1,x
.1eb6	95 a8		sta $a8,x			sta 	esInt2,x
.1eb8	95 b0		sta $b0,x			sta 	esInt3,x
.1eba	8a		txa				txa 								; return NSP in A
.1ebb	60		rts				rts
.1ebc					JoyReturn1:
.1ebc	fa		plx				plx
.1ebd	a9 01		lda #$01			lda 	#1
.1ebf	95 98		sta $98,x			sta 	esInt0,x
.1ec1	a9 00		lda #$00			lda 	#0
.1ec3	f0 ef		beq $1eb4			beq 	JoyReturn13
.1ec5					Unary_JButton:
.1ec5	48		pha				pha 								; save X on stack, put in X
.1ec6	a2 0c		ldx #$0c		ldx	#12
.1ec8	20 f5 3f	jsr $3ff5		jsr	mainHandler
.1ecb	aa		tax				tax 								; get value to check, push on stack.
.1ecc	b5 98		lda $98,x			lda 	esInt0,x
.1ece	c9 04		cmp #$04			cmp 	#4 							; check button 0-3
.1ed0	b0 14		bcs $1ee6			bcs 	_UJBadValue
.1ed2	69 05		adc #$05			adc 	#5 							; four more shifts to get the bit into carry.
.1ed4	48		pha				pha 								; save that shift count on the stack.
.1ed5	a2 04		ldx #$04		ldx	#4
.1ed7	20 f5 3f	jsr $3ff5		jsr	mainHandler
.1eda	fa		plx				plx
.1edb	20 eb 1e	jsr $1eeb			jsr 	ReadJoystick 				; joystick read
.1ede					_UJShift:
.1ede	4a		lsr a				lsr 	a
.1edf	ca		dex				dex
.1ee0	d0 fc		bne $1ede			bne 	_UJShift
.1ee2	b0 c3		bcs $1ea7			bcs 	JoyReturnTrue
.1ee4	90 c5		bcc $1eab			bcc 	JoyReturnFalse
.1ee6					_UJBadValue:
.1ee6	a2 28		ldx #$28			ldx 	#ErrorID_Hardware
.1ee8	20 27 15	jsr $1527		jsr	errorHandler
.1eeb					ReadJoystick:
.1eeb	da		phx				phx
.1eec	5a		phy				phy
.1eed	a9 00		lda #$00			lda 	#0
.1eef	20 56 ff	jsr $ff56			jsr 	$FF56
.1ef2	c0 00		cpy #$00			cpy 	#0
.1ef4	d0 0f		bne $1f05			bne 	_RJError
.1ef6	c9 00		cmp #$00			cmp 	#0 							; bug, returns $00 initially
.1ef8	d0 02		bne $1efc			bne 	_RJNoBug
.1efa	a9 ff		lda #$ff			lda 	#$FF
.1efc					_RJNoBug:
.1efc	85 32		sta $32				sta 	tempShort
.1efe	7a		ply				ply
.1eff	fa		plx				plx
.1f00	a5 32		lda $32				lda 	tempShort
.1f02	49 ff		eor #$ff			eor 	#$FF 						; active 1 bit.
.1f04	60		rts				rts
.1f05					_RJError:
.1f05	a2 28		ldx #$28			ldx 	#ErrorID_Hardware
.1f07	20 27 15	jsr $1527		jsr	errorHandler

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/sound/sndqueue.asm

.1f0a					SoundAddQueue:
.1f0a	86 2a		stx $2a				stx 	temp0 						; save XY in temp0
.1f0c	84 2b		sty $2b				sty 	temp0+1
.1f0e	a2 00		ldx #$00			ldx 	#0 							; look for empty spot.
.1f10					_SAQFind:
.1f10	bd 71 0c	lda $0c71,x			lda 	sndQueue,x 					; check if first byte (time) zero means clear.
.1f13	f0 0e		beq $1f23			beq 	_SAQFound
.1f15	8a		txa				txa 								; forward 6
.1f16	18		clc				clc
.1f17	69 06		adc #$06			adc 	#6
.1f19	aa		tax				tax
.1f1a	e0 60		cpx #$60			cpx 	#sndQueueSize*6 			; queue is full ?
.1f1c	90 f2		bcc $1f10			bcc 	_SAQFind
.1f1e	a2 28		ldx #$28			ldx 	#ErrorID_Hardware
.1f20	20 27 15	jsr $1527		jsr	errorHandler
.1f23					_SAQFound:
.1f23	a0 05		ldy #$05			ldy 	#5 							; get and save time
.1f25	b1 2a		lda ($2a),y			lda 	(temp0),y
.1f27	9d 71 0c	sta $0c71,x			sta 	sndQueue+0,x
.1f2a	88		dey				dey 								; get and save the channel.
.1f2b	b1 2a		lda ($2a),y			lda 	(temp0),y
.1f2d	9d 72 0c	sta $0c72,x			sta 	sndQueue+1,x
.1f30	a0 00		ldy #$00			ldy 	#0
.1f32					_SAQCopy1:
.1f32	b1 2a		lda ($2a),y			lda 	(temp0),y 					; copy 4 bytes of PSG data in.
.1f34	9d 73 0c	sta $0c73,x			sta 	sndQueue+2,x
.1f37	c8		iny				iny
.1f38	e8		inx				inx
.1f39	c0 04		cpy #$04			cpy 	#4
.1f3b	d0 f5		bne $1f32			bne		 _SAQCopy1
.1f3d	60		rts				rts
.1f3e					SoundCheckQueue:
.1f3e	85 2a		sta $2a				sta 	temp0 						; save channel #
.1f40	da		phx				phx
.1f41	5a		phy				phy
.1f42	a6 2a		ldx $2a				ldx 	temp0 						; is the channel in use, if so we cannot play.
.1f44	bd 59 0c	lda $0c59,x			lda 	channelTime,x
.1f47	d0 3f		bne $1f88			bne 	_SCQExit
.1f49	a2 00		ldx #$00			ldx 	#0 							; work through queue.
.1f4b					_SCQSearch:
.1f4b	bd 71 0c	lda $0c71,x			lda 	sndQueue,x 					; reached the end, e.g. time = 0
.1f4e	f0 38		beq $1f88			beq 	_SCQExit
.1f50	bd 72 0c	lda $0c72,x			lda 	sndQueue+1,x 				; compare channel #
.1f53	c5 2a		cmp $2a				cmp 	temp0
.1f55	f0 08		beq $1f5f			beq 	_SCQFound
.1f57	8a		txa				txa
.1f58	18		clc				clc
.1f59	69 06		adc #$06			adc 	#6
.1f5b	8a		txa				txa
.1f5c	4c 4b 1f	jmp $1f4b			jmp 	_SCQSearch
.1f5f					_SCQFound:
.1f5f	a4 2a		ldy $2a				ldy 	temp0 						; Y = channel #
.1f61	bd 71 0c	lda $0c71,x			lda 	sndQueue,x 					; get time
.1f64	99 59 0c	sta $0c59,y			sta 	channelTime,y 				; write that in the time channel slot
.1f67	ee 58 0c	inc $0c58			inc 	LiveChannels 				; one more playing.
.1f6a	da		phx				phx
.1f6b	a5 2a		lda $2a				lda 	temp0 						; get channel #
.1f6d	20 ca 1f	jsr $1fca			jsr 	CSPointChannel  			; point VRAM pointer to it.
.1f70	a0 04		ldy #$04			ldy 	#4 							; counter
.1f72					_SCQCopy:
.1f72	bd 73 0c	lda $0c73,x			lda 	sndQueue+2,x 				; copy the sound production data to the PSG
.1f75	8d 23 9f	sta $9f23			sta 	$9F23
.1f78	e8		inx				inx
.1f79	88		dey				dey
.1f7a	d0 f6		bne $1f72			bne 	_SCQCopy
.1f7c	fa		plx				plx
.1f7d					_SCQDelete:
.1f7d	bd 77 0c	lda $0c77,x			lda 	sndQueue+6,x 				; delete the queue entry
.1f80	9d 71 0c	sta $0c71,x			sta 	sndQueue,x
.1f83	e8		inx				inx
.1f84	e0 61		cpx #$61			cpx 	#sndQueueSize*6+1
.1f86	d0 f5		bne $1f7d			bne 	_SCQDelete
.1f88					_SCQExit:
.1f88	7a		ply				ply
.1f89	fa		plx				plx
.1f8a	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/sound/sndunary.asm

.1f8b					Unary_Playing:
.1f8b	48		pha				pha 						; save stack position
.1f8c	b1 28		lda ($28),y			lda 	(codePtr),y 		; check for playing()
.1f8e	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.1f90	f0 2d		beq $1fbf			beq 	_UPCount
.1f92	68		pla				pla 						; get SP back.
.1f93	48		pha				pha
.1f94	a2 0c		ldx #$0c		ldx	#12
.1f96	20 f5 3f	jsr $3ff5		jsr	mainHandler
.1f99	a2 04		ldx #$04		ldx	#4
.1f9b	20 f5 3f	jsr $3ff5		jsr	mainHandler
.1f9e	fa		plx				plx
.1f9f	86 32		stx $32				stx 	tempShort 			; save X
.1fa1	b5 98		lda $98,x			lda 	esInt0,x 			; check level, must be < 16
.1fa3	c9 10		cmp #$10			cmp 	#16
.1fa5	b0 13		bcs $1fba			bcs 	_UPValue
.1fa7	aa		tax				tax 						; get the time
.1fa8	bd 59 0c	lda $0c59,x			lda 	ChannelTime,x 		; 0 if zero, 255 if non-zero.
.1fab	f0 02		beq $1faf			beq 	_UPZero
.1fad	a9 ff		lda #$ff			lda 	#255
.1faf					_UPZero:
.1faf	a6 32		ldx $32				ldx 	tempShort 			; stack pointer back
.1fb1	95 98		sta $98,x			sta 	esInt0,x 			; return value
.1fb3					_UPSet13:
.1fb3	95 a0		sta $a0,x			sta 	esInt1,x
.1fb5	95 a8		sta $a8,x			sta 	esInt2,x
.1fb7	95 b0		sta $b0,x			sta 	esInt3,x
.1fb9	60		rts				rts
.1fba					_UPValue:
.1fba	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.1fbc	20 27 15	jsr $1527		jsr	errorHandler
.1fbf					_UPCount:
.1fbf	c8		iny				iny 						; skip )
.1fc0	fa		plx				plx
.1fc1	ad 58 0c	lda $0c58			lda 	LiveChannels
.1fc4	95 98		sta $98,x			sta 	esInt0,x
.1fc6	a9 00		lda #$00			lda 	#0
.1fc8	f0 e9		beq $1fb3			beq 	_UPSet13

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/sound/sndutils.asm

.1fca					CSPointChannel:
.1fca	0a		asl a				asl 	a 							; 4 bytes / channel
.1fcb	0a		asl a				asl 	a
.1fcc	09 c0		ora #$c0			ora 	#$C0 						; at $1F9C0
.1fce	8d 20 9f	sta $9f20			sta 	$9F20
.1fd1	a9 f9		lda #$f9			lda 	#$F9
.1fd3	8d 21 9f	sta $9f21			sta 	$9F21
.1fd6	a9 11		lda #$11			lda 	#$11
.1fd8	8d 22 9f	sta $9f22			sta 	$9F22
.1fdb	60		rts				rts
.1fdc					SoundReset:
.1fdc	a9 00		lda #$00			lda 	#0							; no channels playing
.1fde	8d 58 0c	sta $0c58			sta 	LiveChannels
.1fe1	a2 0f		ldx #$0f			ldx 	#Channels-1
.1fe3					_SCClear:
.1fe3	9d 59 0c	sta $0c59,x			sta 	ChannelTime,x
.1fe6	ca		dex				dex
.1fe7	10 fa		bpl $1fe3			bpl 	_SCClear
.1fe9	a2 61		ldx #$61			ldx 	#sndQueueSize*6+1 			; zero the sound queue.
.1feb					_SCClear2:
.1feb	9d 70 0c	sta $0c70,x			sta 	sndQueue-1,x
.1fee	ca		dex				dex
.1fef	d0 fa		bne $1feb			bne 	_SCClear2
.1ff1	a9 c0		lda #$c0			lda 	#$C0 						; point VRAM data pointer to $1F9C0 increment
.1ff3	8d 20 9f	sta $9f20			sta 	$9F20
.1ff6	a9 f9		lda #$f9			lda 	#$F9
.1ff8	8d 21 9f	sta $9f21			sta 	$9F21
.1ffb	a9 11		lda #$11			lda 	#$11
.1ffd	8d 22 9f	sta $9f22			sta 	$9F22
.2000					_SCClear3:
.2000	a9 00		lda #$00			lda 	#0
.2002	8d 23 9f	sta $9f23			sta 	$9F23
.2005	ad 20 9f	lda $9f20			lda 	$9F20
.2008	d0 f6		bne $2000			bne 	_SCClear3
.200a	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/sound/sound.asm

=16					Channels = 16 								; # of sound channels.
.0c58					LiveChannels:
>0c58							.fill 	1
.0c59					ChannelTime:
>0c59							.fill 	Channels 					; # of ticks until channels goes silent if non-zero
.0c69					sndPitch:
>0c69							.fill 	2
.0c6b					sndExtra:
>0c6b							.fill 	2
.0c6d					sndChannel:
>0c6d							.fill 	1
.0c6e					sndTime:
>0c6e							.fill 	1
.0c6f					sndType:
>0c6f							.fill 	1
.0c70					sndVolume:
>0c70							.fill 	1
=16					sndQueueSize = 16
.0c71					sndQueue:
>0c71							.fill	6*sndQueueSize+1 			; extra byte is so copy zero when deleting last element.
.200b					CommandSound:
.200b	a9 00		lda #$00			lda 	#0 							; clear the default sound options
.200d	8d 69 0c	sta $0c69			sta 	sndPitch
.2010	8d 6a 0c	sta $0c6a			sta 	sndPitch+1
.2013	8d 6f 0c	sta $0c6f			sta 	sndType
.2016	a9 ff		lda #$ff			lda 	#$FF 						; values are 255,63 are masked.
.2018	8d 6d 0c	sta $0c6d			sta 	sndChannel
.201b	8d 70 0c	sta $0c70			sta 	sndVolume
.201e	a9 05		lda #$05			lda 	#5 							; default time is 0.5s
.2020	8d 6e 0c	sta $0c6e			sta 	sndTime
.2023					_ComSoundLoop:
.2023	b1 28		lda ($28),y			lda 	(codePtr),y 				; next token
.2025	c9 80		cmp #$80			cmp 	#TOK_EOL 					; end of line/colon do the sound
.2027	f0 55		beq $207e			beq 	_CSDoSound
.2029	c9 ca		cmp #$ca			cmp 	#TKW_COLON
.202b	f0 51		beq $207e			beq 	_CSDoSound
.202d	c9 db		cmp #$db			cmp 	#TKW_AT 					; is it AT pitch ?
.202f	f0 29		beq $205a			beq 	_CSSetPitch
.2031	a2 03		ldx #$03			ldx 	#3 							; look up in the tokens table
.2033					_CSCheck:
.2033	dd 7a 20	cmp $207a,x			cmp 	_ComSoundTokens,x 			; if found token update value.
.2036	f0 10		beq $2048			beq 	_CSFoundToken
.2038	ca		dex				dex
.2039	10 f8		bpl $2033			bpl 	_CSCheck
.203b	c8		iny				iny
.203c	c9 e8		cmp #$e8			cmp 	#TKW_CLEAR 					; was it sound CLEAR
.203e	d0 03		bne $2043			bne 	_CSSyntax
.2040	4c dc 1f	jmp $1fdc			jmp 	SoundReset
.2043					_CSSyntax:
.2043	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.2045	20 27 15	jsr $1527		jsr	errorHandler
.2048					_CSFoundToken:
.2048	da		phx				phx
.2049	c8		iny				iny 								; skip it
.204a	a9 00		lda #$00			lda 	#0 							; get a small int
.204c	a2 0c		ldx #$0c		ldx	#12
.204e	20 f5 3f	jsr $3ff5		jsr	mainHandler
.2051	fa		plx				plx
.2052	a5 98		lda $98				lda 	esInt0 						; copy value to setup memory
.2054	9d 6d 0c	sta $0c6d,x			sta 	sndChannel,x
.2057	4c 23 20	jmp $2023			jmp 	_ComSoundLoop
.205a					_CSSetPitch:
.205a	c8		iny				iny 								; skip AT
.205b	a9 00		lda #$00			lda 	#0 							; get an integer.
.205d	a2 0a		ldx #$0a		ldx	#10
.205f	20 f5 3f	jsr $3ff5		jsr	mainHandler
.2062	a5 a8		lda $a8				lda 	esInt2 						; check range
.2064	05 b0		ora $b0				ora 	esInt3
.2066	d0 0d		bne $2075			bne 	_CSBadValue
.2068	a5 98		lda $98				lda 	esInt0	 					; copy into pitch and loop back
.206a	8d 69 0c	sta $0c69			sta 	sndPitch
.206d	a5 a0		lda $a0				lda 	esInt1
.206f	8d 6a 0c	sta $0c6a			sta 	sndPitch+1
.2072	4c 23 20	jmp $2023			jmp 	_ComSoundLoop
.2075					_CSBadValue:
.2075	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.2077	20 27 15	jsr $1527		jsr	errorHandler
.207a					_ComSoundTokens:
>207a	ce 9b ea cf					.byte 	TKW_TO,TKW_FOR,TKW_TYPE,TKW_STEP
.207e					_CSDoSound:
.207e	ae 6d 0c	ldx $0c6d			ldx 	sndChannel 					; if channel >= 16 look for channel unused.
.2081	e0 10		cpx #$10			cpx 	#16
.2083	90 0f		bcc $2094			bcc 	_CSHaveChannel
.2085	a2 0f		ldx #$0f			ldx 	#15
.2087					_CSFindChannel:
.2087	bd 59 0c	lda $0c59,x			lda 	channelTime,x 				; time is zero e.g. sound off.
.208a	f0 08		beq $2094			beq 	_CSHaveChannel
.208c	ca		dex				dex
.208d	10 f8		bpl $2087			bpl 	_CSFindChannel 				; try all of them
.208f	a2 28		ldx #$28			ldx 	#ErrorID_Hardware
.2091	20 27 15	jsr $1527		jsr	errorHandler
.2094					_CSHaveChannel:
.2094	8e 6d 0c	stx $0c6d			stx 	sndChannel 					; update channel.
.2097	ad 6e 0c	lda $0c6e			lda 	sndTime 					; get how long
.209a	f0 29		beq $20c5			beq 	_CSExit 					; if zero then exit
.209c	ad 70 0c	lda $0c70			lda 	sndVolume 					; get volume, max out at 63.
.209f	c9 40		cmp #$40			cmp 	#64
.20a1	90 02		bcc $20a5			bcc 	_CSHaveVolume
.20a3	a9 3f		lda #$3f			lda 	#63
.20a5					_CSHaveVolume:
.20a5	09 c0		ora #$c0			ora 	#$C0 						; both channels
.20a7	8d 6b 0c	sta $0c6b			sta 	sndExtra 					; write out.
.20aa	ad 6f 0c	lda $0c6f			lda 	sndType 					; get waveform (bits 0-1 Pulse, Sawtooth, Triangle Noise)
.20ad	6a		ror a				ror 	a 							; rotate into position 7,6
.20ae	6a		ror a				ror 	a
.20af	6a		ror a				ror 	a
.20b0	29 c0		and #$c0			and 	#$C0 						; mask other bits
.20b2	09 3f		ora #$3f			ora 	#63 						; 50% duty cycle.
.20b4	8d 6c 0c	sta $0c6c			sta 	sndExtra+1
.20b7	5a		phy				phy
.20b8	da		phx				phx
.20b9	a2 69		ldx #$69			ldx 	#sndPitch & 255 			; XY = sound data
.20bb	a0 0c		ldy #$0c			ldy 	#sndPitch >> 8
.20bd	20 0a 1f	jsr $1f0a			jsr 	SoundAddQueue 				; add it to the queue.
.20c0	68		pla				pla 								; get channel #
.20c1	20 3e 1f	jsr $1f3e			jsr 	SoundCheckQueue 			; check if we can play this one now, e.g. the queue was empty.
.20c4	7a		ply				ply
.20c5					_CSExit:
.20c5	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/sound/soundsync.asm

.20c6					SoundInterrupt:
.20c6	ad 58 0c	lda $0c58			lda 	LiveChannels 		; anything playing ?
.20c9	f0 2b		beq $20f6			beq 	_SIExit
.20cb	a2 0f		ldx #$0f			ldx 	#15 				; check each channel ?
.20cd	bd 59 0c	lda $0c59,x	_SILoop:lda 	channelTime,x 		; time left ?
.20d0	f0 21		beq $20f3			beq 	_SINext 	 		; if zero not playing
.20d2	38		sec				sec 						; subtract one from time
.20d3	e9 01		sbc #$01			sbc 	#1
.20d5	9d 59 0c	sta $0c59,x			sta 	channelTime,x
.20d8	d0 19		bne $20f3			bne 	_SINext 			; if non zero, time for sound off.
.20da	ce 58 0c	dec $0c58			dec 	LiveChannels 		; one fewer channels.
.20dd	8a		txa				txa 						; point to sound PSG
.20de	20 ca 1f	jsr $1fca			jsr 	CSPointChannel
.20e1	a9 00		lda #$00			lda 	#0 					; zero it all out
.20e3	8d 23 9f	sta $9f23			sta 	$9F23
.20e6	8d 23 9f	sta $9f23			sta 	$9F23
.20e9	8d 23 9f	sta $9f23			sta 	$9F23
.20ec	8d 23 9f	sta $9f23			sta 	$9F23
.20ef	8a		txa				txa 						; check the queue for this for more notes.
.20f0	20 3e 1f	jsr $1f3e			jsr 	SoundCheckQueue
.20f3	ca		dex		_SINext:dex
.20f4	10 d7		bpl $20cd			bpl 	_SILoop
.20f6					_SIExit:
.20f6	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/sprites/collide.asm

.0cd2					hitSprite1:
>0cd2							.fill 	1 							; this won't work ... if you nest HIT() which
.0cd3					hitSprite2:
>0cd3							.fill 	1
.0cd4					hitRange:
>0cd4							.fill 	1
.20f7					FunctionCollide:
.20f7	48		pha				pha 								; save and put index into X
.20f8	aa		tax				tax
.20f9	a9 00		lda #$00			lda 	#0 							; set hit range to default.
.20fb	8d d4 0c	sta $0cd4			sta 	hitRange
.20fe	20 9e 21	jsr $219e			jsr 	_FCGetSpriteID
.2101	8d d2 0c	sta $0cd2			sta 	hitSprite1
.2104	da		phx				phx
.2105	a2 02		ldx #$02		ldx	#2
.2107	20 f5 3f	jsr $3ff5		jsr	mainHandler
.210a	fa		plx				plx
.210b	20 9e 21	jsr $219e			jsr 	_FCGetSpriteID
.210e	8d d3 0c	sta $0cd3			sta 	hitSprite2
.2111	b1 28		lda ($28),y			lda 	(codePtr),y 				; is there a third parameter
.2113	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.2115	f0 12		beq $2129			beq 	_FCParam2
.2117	da		phx				phx
.2118	a2 02		ldx #$02		ldx	#2
.211a	20 f5 3f	jsr $3ff5		jsr	mainHandler
.211d	68		pla				pla
.211e	a2 0c		ldx #$0c		ldx	#12
.2120	20 f5 3f	jsr $3ff5		jsr	mainHandler
.2123	aa		tax				tax
.2124	b5 98		lda $98,x			lda 	esInt0,x
.2126	8d d4 0c	sta $0cd4			sta 	hitRange
.2129					_FCParam2:
.2129	a2 04		ldx #$04		ldx	#4
.212b	20 f5 3f	jsr $3ff5		jsr	mainHandler
.212e	68		pla				pla 								; set X to point to the stack again.
.212f	48		pha				pha
.2130	aa		tax				tax
.2131	5a		phy				phy
.2132	18		clc				clc 								; do it with the horizontal values.
.2133	20 54 21	jsr $2154			jsr 	_FCCheck
.2136	90 0a		bcc $2142			bcc 	_FCFail
.2138	38		sec				sec 								; do it with the vertical values.
.2139	20 54 21	jsr $2154			jsr 	_FCCheck
.213c	90 04		bcc $2142			bcc 	_FCFail
.213e	a9 ff		lda #$ff			lda 	#255 						; pass, return -1
.2140	d0 02		bne $2144			bne 	_FCReturnA
.2142					_FCFail:
.2142	a9 00		lda #$00			lda 	#0 							; return 0, it didn't work.
.2144					_FCReturnA:
.2144	85 32		sta $32				sta 	tempShort 					; put result in tempShort
.2146	7a		ply				ply
.2147	68		pla				pla 								; restore stack, return result and exit.
.2148	aa		tax				tax
.2149	a5 32		lda $32				lda 	tempShort
.214b	95 98		sta $98,x			sta 	esInt0,x
.214d	95 a0		sta $a0,x			sta 	esInt1,x
.214f	95 a8		sta $a8,x			sta 	esInt2,x
.2151	95 b0		sta $b0,x			sta 	esInt3,x
.2153	60		rts				rts
.2154					_FCCheck:
.2154	08		php				php 								; save the H/V flag twice
.2155	08		php				php
.2156	ad d2 0c	lda $0cd2			lda 	hitSprite1 					; select sprite 1 and read its location
.2159	20 dc 22	jsr $22dc			jsr 	SelectSpriteA 				; into X
.215c	28		plp				plp
.215d	20 00 24	jsr $2400			jsr 	SpriteReadCoordinate
.2160	ad d3 0c	lda $0cd3			lda 	hitSprite2					; now repeat for sprite 2 and location X+1
.2163	20 dc 22	jsr $22dc			jsr 	SelectSpriteA
.2166	e8		inx				inx
.2167	28		plp				plp
.2168	20 00 24	jsr $2400			jsr 	SpriteReadCoordinate
.216b	ca		dex				dex
.216c	38		sec				sec 								; calculate |s1.c-s2.c| put in temp0
.216d	b5 98		lda $98,x			lda 	esInt0,x
.216f	f5 99		sbc $99,x			sbc 	esInt0+1,x
.2171	85 2a		sta $2a				sta 	temp0
.2173	b5 a0		lda $a0,x			lda 	esInt1,x
.2175	f5 a1		sbc $a1,x			sbc 	esInt1+1,x
.2177	85 2b		sta $2b				sta 	temp0+1
.2179	10 0d		bpl $2188			bpl 	_FCCIsPositive
.217b	38		sec				sec 								; if -ve calculate |difference|
.217c	a9 00		lda #$00			lda 	#0
.217e	e5 2a		sbc $2a				sbc 	temp0
.2180	85 2a		sta $2a				sta 	temp0
.2182	a9 00		lda #$00			lda 	#0
.2184	e5 2b		sbc $2b				sbc 	temp0+1
.2186	85 2b		sta $2b				sta 	temp0+1
.2188					_FCCIsPositive:
.2188	a5 2b		lda $2b				lda 	temp0+1 					; if range >= 256 then definitely fail.
.218a	d0 10		bne $219c			bne 	_FCCFail
.218c	18		clc				clc 								; work out required min distance which is
.218d	b5 b0		lda $b0,x			lda 	esInt3,x 					; the sum of the half width/heights
.218f	75 b1		adc $b1,x			adc 	esInt3+1,x
.2191	ac d4 0c	ldy $0cd4			ldy 	hitRange 					; get the hit range
.2194	f0 01		beq $2197			beq 	_FCCNoSetRange 				; override if non zero.
.2196	98		tya				tya
.2197					_FCCNoSetRange:
.2197	c5 2a		cmp $2a				cmp 	temp0 						; result is range > distance
.2199	f0 01		beq $219c			beq 	_FCCFail
.219b	60		rts				rts
.219c					_FCCFail:
.219c	18		clc				clc
.219d	60		rts				rts
.219e					_FCGetSpriteID:
.219e	8a		txa				txa
.219f	a2 0c		ldx #$0c		ldx	#12
.21a1	20 f5 3f	jsr $3ff5		jsr	mainHandler
.21a4	aa		tax				tax
.21a5	b5 98		lda $98,x			lda 	esInt0,x
.21a7	30 01		bmi $21aa			bmi 	_FCGSValue
.21a9	60		rts				rts
.21aa					_FCGSValue:
.21aa	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.21ac	20 27 15	jsr $1527		jsr	errorHandler

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/sprites/sprite.asm

.0cd5					currSprite:
>0cd5							.fill 	2
.21af					CommandSprite:
.21af	20 b1 22	jsr $22b1			jsr 	CSCheckOnOff 				; look for TRUE/FALSE
.21b2	d0 0d		bne $21c1			bne 	_CSCheckClear
.21b4	ad 29 9f	lda $9f29			lda 	$9F29 						; sprite enable is bit 6.
.21b7	29 bf		and #$bf			and 	#$BF 						; clear it whatever
.21b9	90 02		bcc $21bd			bcc 	_CSNotOn 					; if CS turn on, so set it
.21bb	09 40		ora #$40			ora 	#$40
.21bd					_CSNotOn:
.21bd	8d 29 9f	sta $9f29			sta 	$9F29 						; write it back in new state and exit
.21c0	60		rts				rts
.21c1					_CSCheckClear:
.21c1	a9 00		lda #$00			lda 	#0 							; no sprite currently selected.
.21c3	8d d6 0c	sta $0cd6			sta 	currSprite+1
.21c6	b1 28		lda ($28),y			lda 	(codePtr),y 				; check for CLEAR
.21c8	c9 e8		cmp #$e8			cmp 	#TKW_CLEAR
.21ca	d0 05		bne $21d1			bne 	_CSCommandLoop 				; not CLEAR, go to main loop
.21cc	20 c2 22	jsr $22c2			jsr 	CSClearSprites 				; clear all the sprites
.21cf	c8		iny				iny 								; consume CLEAR token and exit.
.21d0	60		rts				rts
.21d1					_CSCommandLoop:
.21d1	20 b1 22	jsr $22b1			jsr 	CSCheckOnOff 				; check sprite on/off
.21d4	f0 2c		beq $2202			beq 	_CSSetVisibility
.21d6	b1 28		lda ($28),y			lda 	(codePtr),y 				; get and consume character
.21d8	c9 80		cmp #$80			cmp 	#TOK_EOL					; EOL exit.
.21da	f0 25		beq $2201			beq 	_CSExit
.21dc	c8		iny				iny									; consume it
.21dd	c9 ca		cmp #$ca			cmp 	#TKW_COLON 					; colon exit
.21df	f0 20		beq $2201			beq 	_CSExit
.21e1	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; semantic comma
.21e3	f0 ec		beq $21d1			beq 	_CSCommandLoop
.21e5	c9 da		cmp #$da			cmp		#TKW_IMAGE 					; image ?
.21e7	f0 69		beq $2252			beq 	_CSSetImage
.21e9	c9 dc		cmp #$dc			cmp 	#TKW_FLIP 					; flip ?
.21eb	f0 2b		beq $2218			beq 	_CSSetFlip
.21ed	c9 ce		cmp #$ce			cmp 	#TKW_TO 					; to ?
.21ef	f0 46		beq $2237			beq 	_CSSetPos
.21f1	88		dey				dey 								; unpick DEY
.21f2	a9 00		lda #$00			lda 	#0 							; sprite # now at level 0
.21f4	a2 0c		ldx #$0c		ldx	#12
.21f6	20 f5 3f	jsr $3ff5		jsr	mainHandler
.21f9	a5 98		lda $98				lda 	esInt0
.21fb	20 dc 22	jsr $22dc			jsr 	SelectSpriteA
.21fe	4c d1 21	jmp $21d1			jmp 	_CSCommandLoop
.2201					_CSExit:
.2201	60		rts				rts
.2202					_CSSetVisibility:
.2202	08		php				php 								; save carry
.2203	a9 06		lda #$06			lda 	#6 							; set pos to offset 6.
.2205	20 98 22	jsr $2298			jsr 	SpriteSetTarget
.2208	ad 23 9f	lda $9f23			lda 	$9F23 						; read it.
.220b	29 f3		and #$f3			and 	#$F3 						; clear depth bits, disabling it.
.220d	28		plp				plp
.220e	90 02		bcc $2212			bcc 	_CSSetOff 					; check if carry was set
.2210	09 0c		ora #$0c			ora 	#$0C 						; otherwise set depth bits to 11, on top.
.2212					_CSSetOff:
.2212	8d 23 9f	sta $9f23			sta 	$9F23 						; update and loop back
.2215	4c d1 21	jmp $21d1			jmp 	_CSCommandLoop
.2218					_CSSetFlip:
.2218	a9 00		lda #$00			lda 	#0 							; image # now at level 0
.221a	a2 0c		ldx #$0c		ldx	#12
.221c	20 f5 3f	jsr $3ff5		jsr	mainHandler
.221f	a9 06		lda #$06			lda 	#6 							; set sprite position to +6
.2221	20 98 22	jsr $2298			jsr 	SpriteSetTarget
.2224	a5 98		lda $98				lda 	esInt0 						; flip value & 3 => temp0
.2226	29 03		and #$03			and 	#3
.2228	85 2a		sta $2a				sta 	temp0
.222a	ad 23 9f	lda $9f23			lda 	$9F23 						; update the flip.
.222d	29 fc		and #$fc			and 	#$FC
.222f	05 2a		ora $2a				ora 	temp0
.2231	8d 23 9f	sta $9f23			sta 	$9F23
.2234	4c d1 21	jmp $21d1			jmp 	_CSCommandLoop
.2237					_CSSetPos:
.2237	a9 00		lda #$00			lda 	#0 							; X now at level 0
.2239	a2 0a		ldx #$0a		ldx	#10
.223b	20 f5 3f	jsr $3ff5		jsr	mainHandler
.223e	a2 02		ldx #$02		ldx	#2
.2240	20 f5 3f	jsr $3ff5		jsr	mainHandler
.2243	a9 01		lda #$01			lda 	#1 							; Y now at level 1
.2245	a2 0a		ldx #$0a		ldx	#10
.2247	20 f5 3f	jsr $3ff5		jsr	mainHandler
.224a	a2 00		ldx #$00			ldx 	#0 							; coords at 0,1
.224c	20 be 23	jsr $23be			jsr 	SpriteMove 					; move it.
.224f	4c d1 21	jmp $21d1			jmp 	_CSCommandLoop
.2252					_CSSetImage:
.2252	a9 00		lda #$00			lda 	#0 							; image # now at level 0
.2254	a2 0c		ldx #$0c		ldx	#12
.2256	20 f5 3f	jsr $3ff5		jsr	mainHandler
.2259	a9 00		lda #$00			lda 	#0 							; set sprite position to +0
.225b	20 98 22	jsr $2298			jsr 	SpriteSetTarget
.225e	a6 98		ldx $98				ldx 	esInt0 						; get image # into X
.2260	bd 1d 0d	lda $0d1d,x			lda 	imageAddr32Low,x 			; copy low address in.
.2263	8d 23 9f	sta $9f23			sta 	$9F23
.2266	ee 20 9f	inc $9f20			inc 	$9F20 						; bump to offset 1.
.2269	bd dd 0c	lda $0cdd,x			lda 	imageInfo,x 				; get 4/8 bit flag from info.
.226c	29 10		and #$10			and 	#$10
.226e	0a		asl a				asl 	a
.226f	0a		asl a				asl		a
.2270	0a		asl a				asl 	a 							; put into bit 7
.2271	1d 5d 0d	ora $0d5d,x			ora 	imageAddr32High,x 			; or high address with it.
.2274	8d 23 9f	sta $9f23			sta 	$9F23 						; write the high byte.
.2277	a9 06		lda #$06			lda 	#6
.2279	20 98 22	jsr $2298			jsr 	SpriteSetTarget 			; set sprite on.
.227c	ad 23 9f	lda $9f23			lda 	$9F23
.227f	09 0c		ora #$0c			ora 	#$0C
.2281	8d 23 9f	sta $9f23			sta 	$9F23
.2284	ee 20 9f	inc $9f20			inc 	$9F20 						; point to byte 7 : height/width/palette offset
.2287	bd dd 0c	lda $0cdd,x			lda 	imageInfo,x 				; get image info
.228a	0a		asl a				asl 	a 							; shift bits 0-3 to 4-7
.228b	0a		asl a				asl 	a
.228c	0a		asl a				asl 	a
.228d	0a		asl a				asl 	a
.228e	b0 02		bcs $2292			bcs		_CSNoOffset 				; if bit 4 was set don't set the offset.
.2290	09 0f		ora #$0f			ora 	#$0F 						; set palette offset and write back
.2292					_CSNoOffset:
.2292	8d 23 9f	sta $9f23			sta 	$9F23
.2295	4c d1 21	jmp $21d1			jmp 	_CSCommandLoop
.2298					SpriteSetTarget:
.2298	0d d5 0c	ora $0cd5			ora 	currSprite
.229b	8d 20 9f	sta $9f20			sta 	$9F20
.229e	ad d6 0c	lda $0cd6			lda 	currSprite+1
.22a1	f0 09		beq $22ac			beq 	_SSTNoSet
.22a3	8d 21 9f	sta $9f21			sta 	$9F21
.22a6	a9 01		lda #$01			lda 	#$01
.22a8	8d 22 9f	sta $9f22			sta 	$9F22
.22ab	60		rts				rts
.22ac					_SSTNoSet:
.22ac	a2 27		ldx #$27			ldx 	#ErrorID_NoSprite
.22ae	20 27 15	jsr $1527		jsr	errorHandler
.22b1					CSCheckOnOff:
.22b1	b1 28		lda ($28),y			lda 	(codePtr),y 				; get and consume it.
.22b3	c8		iny				iny
.22b4	c9 ab		cmp #$ab			cmp 	#TKW_FALSE					; return CC/EQ if FALSE
.22b6	18		clc				clc
.22b7	f0 08		beq $22c1			beq 	_CSCOExit
.22b9	c9 aa		cmp #$aa			cmp 	#TKW_TRUE 					; return CS/EQ if TRUE
.22bb	38		sec				sec 								; return NE if neither.
.22bc	f0 03		beq $22c1			beq 	_CSCOExit
.22be	88		dey				dey 								; undo consume
.22bf	c9 aa		cmp #$aa			cmp 	#TKW_TRUE 					; and set NE again, DEY will change it.
.22c1					_CSCOExit:
.22c1	60		rts				rts
.22c2					CSClearSprites:
.22c2	a9 11		lda #$11			lda 	#$11 						; set address to 1FC00 with single bump
.22c4	8d 22 9f	sta $9f22			sta 	$9F22
.22c7	a9 fc		lda #$fc			lda 	#$FC
.22c9	8d 21 9f	sta $9f21			sta 	$9F21
.22cc	a9 00		lda #$00			lda 	#0
.22ce	8d 20 9f	sta $9f20			sta 	$9F20
.22d1					_CSClear:
.22d1	a9 00		lda #$00			lda 	#0 							; set everything to $00
.22d3	8d 23 9f	sta $9f23			sta 	$9F23
.22d6	ad 21 9f	lda $9f21			lda 	$9F21
.22d9	d0 f6		bne $22d1			bne 	_CSClear
.22db	60		rts				rts
.22dc					SelectSpriteA:
.22dc	85 2a		sta $2a				sta 	temp0
.22de	a9 00		lda #$00			lda 	#0
.22e0	06 2a		asl $2a				asl		temp0 						; multiply A:temp0 by 8
.22e2	b0 11		bcs $22f5			bcs 	_CSBadValue 				; sprites only 0-127
.22e4	06 2a		asl $2a				asl 	temp0
.22e6	2a		rol a				rol 	a
.22e7	06 2a		asl $2a				asl 	temp0
.22e9	2a		rol a				rol 	a
.22ea	09 fc		ora #$fc			ora 	#$FC 						; MSB of address (barring $01 upper third byte)
.22ec	8d d6 0c	sta $0cd6			sta 	currSprite+1
.22ef	a5 2a		lda $2a				lda 	temp0 						; LSB of address
.22f1	8d d5 0c	sta $0cd5			sta 	currSprite+0
.22f4	60		rts				rts
.22f5					_CSBadValue
.22f5	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.22f7	20 27 15	jsr $1527		jsr	errorHandler

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/sprites/spritedraw.asm

.0cd7					srenderWidth:
>0cd7							.fill 	1
.22fa					Command_Paint:
.22fa	a9 02		lda #$02			lda 	#ImageHandler & $FF
.22fc	a2 23		ldx #$23			ldx 	#ImageHandler >> 8
.22fe	20 e5 18	jsr $18e5			jsr 	GHandler
.2301	60		rts				rts
.2302					ImageHandler:
.2302	a9 09		lda #$09			lda 	#SpriteImageAccess & $FF
.2304	a2 23		ldx #$23			ldx 	#SpriteImageAccess >> 8
.2306	4c 6d 1b	jmp $1b6d			jmp 	ImageRenderer
.2309					SpriteImageAccess:
.2309	c0 ff		cpy #$ff			cpy 	#255
.230b	d0 22		bne $232f			bne 	_SIAGetPixel
.230d	ae 01 0c	ldx $0c01			ldx 	gdImage 					; get the image #
.2310	bd dd 0c	lda $0cdd,x			lda 	imageInfo,x 				; get the image information.
.2313	48		pha				pha
.2314	29 03		and #$03			and 	#3 							; LSB x 2 width
.2316	aa		tax				tax
.2317	bd 2b 23	lda $232b,x			lda 	_SIASizeTable,x
.231a	8d d7 0c	sta $0cd7			sta 	sRenderWidth 				; save rendering width.
.231d	aa		tax				tax
.231e	68		pla				pla 								; get back next 2 bits are height
.231f	4a		lsr a				lsr 	a
.2320	4a		lsr a				lsr 	a
.2321	29 03		and #$03			and 	#3
.2323	a8		tay				tay
.2324	b9 2b 23	lda $232b,y			lda 	_SIASizeTable,y
.2327	a8		tay				tay
.2328	a9 01		lda #$01			lda 	#1 							; image is type 1, e.g. colour.
.232a	60		rts				rts
.232b					_SIASizeTable:
>232b	08 10 20 40					.byte 	8,16,32,64 					; size of sprites from 2 bits,
.232f					_SIAGetPixel:
.232f	84 2a		sty $2a				sty 	temp0 						; this is the Y size 8,16,32,64 => temp0
.2331	a9 00		lda #$00			lda 	#0
.2333	85 2b		sta $2b				sta 	temp0+1
.2335	ac 01 0c	ldy $0c01			ldy 	gdImage 					; get image info into A
.2338	b9 dd 0c	lda $0cdd,y			lda 	imageInfo,y
.233b	48		pha				pha
.233c	29 10		and #$10			and 	#$10 						; save the 4 bit flag part in temp1
.233e	85 2c		sta $2c				sta 	temp1
.2340	68		pla				pla 								; get width of sprite as 00-11 (8-64)
.2341	29 03		and #$03			and 	#3 							; we shift left +3 e.g. 2^(A+3)
.2343	18		clc				clc
.2344	69 03		adc #$03			adc 	#3
.2346	a8		tay				tay
.2347					_SIAMultiply:
.2347	06 2a		asl $2a				asl 	temp0
.2349	26 2b		rol $2b				rol 	temp0+1
.234b	88		dey				dey
.234c	d0 f9		bne $2347			bne 	_SIAMultiply
.234e	a5 2c		lda $2c				lda 	temp1 						; if the mode bit is 0 then halve this value
.2350	d0 04		bne $2356			bne 	_SIANoHalf 					; because we pack 2 pixels in every byte.
.2352	46 2b		lsr $2b				lsr 	temp0+1
.2354	66 2a		ror $2a				ror 	temp0
.2356					_SIANoHalf:
.2356	ae 01 0c	ldx $0c01			ldx 	gdImage 					; copy the image address / 32 into temp2/temp3
.2359	bd 1d 0d	lda $0d1d,x			lda 	imageAddr32Low,x
.235c	85 2e		sta $2e				sta 	temp2
.235e	bd 5d 0d	lda $0d5d,x			lda 	imageAddr32High,x
.2361	85 2f		sta $2f				sta 	temp2+1
.2363	a9 00		lda #$00			lda 	#0
.2365	85 30		sta $30				sta 	temp3
.2367	a2 05		ldx #$05			ldx 	#5 							; multiply by 32 e.g. 2^5
.2369					_SIMult32:
.2369	06 2e		asl $2e				asl 	temp2
.236b	26 2f		rol $2f				rol 	temp2+1
.236d	26 30		rol $30				rol 	temp3
.236f	ca		dex				dex
.2370	d0 f7		bne $2369			bne 	_SIMult32
.2372	ee 25 9f	inc $9f25			inc 	$9F25 						; select alternate data port
.2375	18		clc				clc
.2376	a5 2a		lda $2a				lda 	temp0 						; add offset to sprite address x 32 and write to address
.2378	65 2e		adc $2e				adc 	temp2
.237a	8d 20 9f	sta $9f20			sta 	$9F20
.237d	a5 2b		lda $2b				lda 	temp0+1
.237f	65 2f		adc $2f				adc 	temp2+1
.2381	8d 21 9f	sta $9f21			sta 	$9F21
.2384	a9 10		lda #$10			lda 	#$10
.2386	65 30		adc $30				adc 	temp3
.2388	8d 22 9f	sta $9f22			sta 	$9F22
.238b	a2 00		ldx #$00			ldx 	#0 							; index into Render Cache.
.238d					_SIFillCacheLoop:
.238d	a5 2c		lda $2c				lda 	temp1 						; is it 8 bit ? if so, then exit
.238f	d0 12		bne $23a3			bne 	_SI8Bit
.2391	ad 24 9f	lda $9f24			lda 	$9F24 						; get data
.2394	48		pha				pha 								; save it
.2395	4a		lsr a				lsr 	a 							; MSB first
.2396	4a		lsr a				lsr 	a
.2397	4a		lsr a				lsr 	a
.2398	4a		lsr a				lsr 	a
.2399	20 b3 23	jsr $23b3			jsr 	_SIWrite4Bit
.239c	68		pla				pla
.239d	20 b3 23	jsr $23b3			jsr 	_SIWrite4Bit
.23a0	4c aa 23	jmp $23aa			jmp 	_SIAdvance
.23a3					_SI8Bit:
.23a3	ad 24 9f	lda $9f24			lda 	$9F24 						; copy data into render cache
.23a6	9d 10 0c	sta $0c10,x			sta 	RenderCache,x
.23a9	e8		inx				inx
.23aa					_SIAdvance:
.23aa	ec d7 0c	cpx $0cd7			cpx 	sRenderWidth 				; filled the cache to required width ?
.23ad	d0 de		bne $238d			bne 	_SIFillCacheLoop
.23af	ce 25 9f	dec $9f25			dec 	$9F25 						; select original data port.
.23b2	60		rts				rts
.23b3					_SIWrite4Bit:
.23b3	29 0f		and #$0f			and 	#15 						; if 0 (e.g. would paint 240, return 0 transparent)
.23b5	f0 02		beq $23b9			beq 	_SIW4Skip
.23b7	09 f0		ora #$f0			ora 	#$F0
.23b9					_SIW4Skip:
.23b9	9d 10 0c	sta $0c10,x			sta 	RenderCache,x
.23bc	e8		inx				inx
.23bd	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/sprites/spritemove.asm

.23be					SpriteMove:
.23be	5a		phy				phy
.23bf	a9 07		lda #$07			lda 	#7 									; point to height/width byte and read it.
.23c1	20 98 22	jsr $2298			jsr 	SpriteSetTarget
.23c4	ad 23 9f	lda $9f23			lda 	$9F23
.23c7	4a		lsr a				lsr 	a 									; A now contains bits 0-1 (width) 2-3 (height)
.23c8	4a		lsr a				lsr 	a
.23c9	4a		lsr a				lsr 	a
.23ca	4a		lsr a				lsr 	a
.23cb	85 2a		sta $2a				sta 	temp0 								; save these bits so we can work out the centre.
.23cd	a9 02		lda #$02			lda 	#2 									; point to X position.Low
.23cf	20 98 22	jsr $2298			jsr 	SpriteSetTarget
.23d2	20 e0 23	jsr $23e0			jsr 	SMWritePosition 					; write X position out.
.23d5	46 2a		lsr $2a				lsr 	temp0 								; shift height bits into 0,1
.23d7	46 2a		lsr $2a				lsr 	temp0
.23d9	e8		inx				inx 										; get the y position
.23da	20 e0 23	jsr $23e0			jsr 	SMWritePosition 					; and write that out.
.23dd	ca		dex				dex 										; fix X and quit.
.23de	7a		ply				ply
.23df	60		rts				rts
.23e0					SMWritePosition:
.23e0	a5 2a		lda $2a				lda 	temp0 								; get dim size
.23e2	29 03		and #$03			and 	#3 									; in range into Y
.23e4	a8		tay				tay
.23e5	38		sec				sec
.23e6	b5 98		lda $98,x			lda 	esInt0,x
.23e8	f9 fc 23	sbc $23fc,y			sbc 	SMHalfSize,y
.23eb	8d 23 9f	sta $9f23			sta 	$9F23
.23ee	ee 20 9f	inc $9f20			inc 	$9F20
.23f1	b5 a0		lda $a0,x			lda 	esInt1,x
.23f3	e9 00		sbc #$00			sbc 	#0
.23f5	8d 23 9f	sta $9f23			sta 	$9F23
.23f8	ee 20 9f	inc $9f20			inc 	$9F20
.23fb	60		rts				rts
.23fc					SMHalfSize:
>23fc	04 08 10 20					.byte 	4,8,16,32 							; half size each dimension.
.2400					SpriteReadCoordinate:
.2400	5a		phy				phy
.2401	08		php				php 										; save CTR on stack
.2402	a9 07		lda #$07			lda 	#7 									; point to height/width byte and read it.
.2404	20 98 22	jsr $2298			jsr 	SpriteSetTarget
.2407	ad 23 9f	lda $9f23			lda 	$9F23
.240a	4a		lsr a				lsr 	a 									; A now contains bits 0-1 (width) 2-3 (height)
.240b	4a		lsr a				lsr 	a
.240c	4a		lsr a				lsr 	a
.240d	4a		lsr a				lsr 	a
.240e	28		plp				plp 										; restore CTS
.240f	08		php				php
.2410	90 02		bcc $2414			bcc 	_SPRCNotY1 							; if it is Y, e.g. CS, shift twice more.
.2412	4a		lsr a				lsr 	a
.2413	4a		lsr a				lsr 	a
.2414					_SPRCNotY1:
.2414	29 03		and #$03			and 	#3 									; point into half width/height
.2416	a8		tay				tay
.2417	b9 fc 23	lda $23fc,y			lda 	SMHalfSize,y 						; get half size -> esInt3,x
.241a	95 b0		sta $b0,x			sta 	esInt3,x
.241c	28		plp				plp 										; CS Y CC X
.241d	a9 00		lda #$00			lda 	#0 									; A = 0 X A = 2 Y
.241f	2a		rol a				rol 	a
.2420	2a		rol a				rol 	a
.2421	69 02		adc #$02			adc 	#2 									; A = 2 X A = 4 Y
.2423	20 98 22	jsr $2298			jsr 	SpriteSetTarget 					; set data pointer offset by that
.2426	18		clc				clc 										; read and unfix centre.
.2427	ad 23 9f	lda $9f23			lda 	$9F23
.242a	75 b0		adc $b0,x			adc 	esInt3,x
.242c	95 98		sta $98,x			sta 	esInt0,x
.242e	ee 20 9f	inc $9f20			inc 	$9F20 								; do MSB
.2431	ad 23 9f	lda $9f23			lda 	$9F23
.2434	69 00		adc #$00			adc 	#0
.2436	29 0f		and #$0f			and 	#$0F 								; sign extend on bit 11.
.2438	c9 08		cmp #$08			cmp		#$08
.243a	90 02		bcc $243e			bcc 	_SPRCNoSX
.243c	09 f0		ora #$f0			ora 	#$F0
.243e					_SPRCNoSX:
.243e	95 a0		sta $a0,x			sta 	esInt1,x
.2440	7a		ply				ply
.2441	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/sprites/spriteutils.asm

.2442					Sprite_GetX:
.2442	18		clc				clc
.2443	90 01		bcc $2446			bcc 	SpriteGetCode
.2445					Sprite_GetY:
.2445	38		sec				sec
.2446					SpriteGetCode:
.2446	08		php				php 								; CLC : X SEC: Y, save on stack.
.2447	48		pha				pha 								; save stack position
.2448	20 63 24	jsr $2463			jsr 	GetSpriteNumber 			; get # of sprite.
.244b	a2 04		ldx #$04		ldx	#4
.244d	20 f5 3f	jsr $3ff5		jsr	mainHandler
.2450	fa		plx				plx
.2451	28		plp				plp 								; which one ?
.2452	20 00 24	jsr $2400			jsr 	SpriteReadCoordinate 		; read appropriate coordinate into esInt0,x
.2455	b5 a0		lda $a0,x			lda 	esInt1,x 					; get sign bit, sign extend 16->32 bits
.2457	29 80		and #$80			and 	#$80
.2459	f0 02		beq $245d			beq 	_SGXYPos
.245b	a9 ff		lda #$ff			lda 	#$FF
.245d					_SGXYPos:
.245d	95 a8		sta $a8,x			sta 	esInt2,x
.245f	95 b0		sta $b0,x			sta 	esInt3,x
.2461	8a		txa				txa 								; return NSP in A
.2462	60		rts				rts
.2463					GetSpriteNumber:
.2463	48		pha				pha
.2464	a2 0c		ldx #$0c		ldx	#12
.2466	20 f5 3f	jsr $3ff5		jsr	mainHandler
.2469	fa		plx				plx
.246a	b5 98		lda $98,x			lda 	esInt0,x
.246c	20 dc 22	jsr $22dc			jsr 	SelectSpriteA
.246f	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/video/mode.asm

.0cd8					currentMode:
>0cd8							.fill 	4
.2470					ForceMode0:
.2470	a2 00		ldx #$00			ldx 	#0
.2472	86 98		stx $98				stx 	esInt0 						; in case we do it.
.2474					_FMCheck:
.2474	bd 08 25	lda $2508,x			lda 	CMModeList,x 				; do we need to switch ?
.2477	dd d8 0c	cmp $0cd8,x			cmp 	currentMode,x
.247a	d0 13		bne $248f			bne 	CMSetMode 					; different so switch.
.247c	e8		inx				inx
.247d	e0 04		cpx #$04			cpx 	#4
.247f	d0 f3		bne $2474			bne 	_FMCheck
.2481	60		rts				rts
.2482					CommandMode:
.2482	a9 00		lda #$00			lda 	#0
.2484	a2 0a		ldx #$0a		ldx	#10
.2486	20 f5 3f	jsr $3ff5		jsr	mainHandler
.2489	a5 b0		lda $b0				lda 	esInt3
.248b	29 70		and #$70			and 	#$70
.248d	d0 06		bne $2495			bne 	CMNoExpand
.248f					CMSetMode:
.248f	20 e9 24	jsr $24e9			jsr 	CMExpandMode
.2492	4c a9 24	jmp $24a9			jmp 	CMUpdateMode
.2495					CMNoExpand:
.2495	a5 98		lda $98				lda 	esInt0
.2497	8d d8 0c	sta $0cd8			sta 	currentMode
.249a	a5 a0		lda $a0				lda 	esInt1
.249c	8d d9 0c	sta $0cd9			sta 	currentMode+1
.249f	a5 a8		lda $a8				lda 	esInt2
.24a1	8d da 0c	sta $0cda			sta 	currentMode+2
.24a4	a5 b0		lda $b0				lda 	esInt3
.24a6	8d db 0c	sta $0cdb			sta 	currentMode+3
.24a9					CMUpdateMode:
.24a9	a2 11		ldx #$11			ldx 	#$11
.24ab					_CMClear:
.24ab	a9 00		lda #$00			lda 	#0
.24ad	9d 29 9f	sta $9f29,x			sta 	$9F29,X
.24b0	ca		dex				dex
.24b1	10 f8		bpl $24ab			bpl 	_CMClear
.24b3	ad db 0c	lda $0cdb			lda 	currentMode+3 				; get current mode
.24b6	48		pha				pha 								; stack twice.
.24b7	48		pha				pha
.24b8	29 70		and #$70			and 	#$70 						; isolates bits 6,5,4 (sprites,L1 enable,L0 enable)
.24ba	09 01		ora #$01			ora 	#$01 						; turn the output on.
.24bc	8d 29 9f	sta $9f29			sta 	$9F29 						; write to DC_VIDEO
.24bf	68		pla				pla 								; get back
.24c0	20 18 25	jsr $2518			jsr 	CMToScale 					; convert lower 2 bits to a scale.
.24c3	8d 2a 9f	sta $9f2a			sta 	$9F2A 						; write to H-Scale
.24c6	68		pla				pla 								; get back, convert bits 2,3 to a scale.
.24c7	4a		lsr a				lsr 	a
.24c8	4a		lsr a				lsr 	a
.24c9	20 18 25	jsr $2518			jsr 	CMToScale 					; convert lower 2 bits to a scale.
.24cc	8d 2b 9f	sta $9f2b			sta 	$9F2B
.24cf	a2 00		ldx #$00			ldx 	#0 							; this is offset from $9F2D to do L0
.24d1	ad d8 0c	lda $0cd8			lda 	currentMode					; get L0 config byte
.24d4	20 23 25	jsr $2523			jsr 	CMDecodeLayer 				; and decode layer 0
.24d7	a2 07		ldx #$07			ldx 	#7 							; when we do layer 1, offset by 7 hence starts at $9F34
.24d9	ad d9 0c	lda $0cd9			lda 	currentMode+1
.24dc	20 23 25	jsr $2523			jsr 	CMDecodeLayer
.24df	20 9a 1d	jsr $1d9a			jsr 	gdModeChanged 				; check the bitmap status.
.24e2	20 d0 18	jsr $18d0			jsr 	GResetStorage 				; reset the graphics drawing storage.
.24e5	20 dc 1f	jsr $1fdc			jsr 	SoundReset 					; Reset the sound channels.
.24e8	60		rts				rts
.24e9					CMExpandMode:
.24e9	a5 98		lda $98				lda 	esInt0 						; get mode number
.24eb	c9 04		cmp #$04			cmp 	#(CMEndModeList-CMModeList) >> 2
.24ed	b0 14		bcs $2503			bcs 	_CMModeError
.24ef	0a		asl a				asl 	a 							; x 4 into X
.24f0	0a		asl a				asl 	a
.24f1	aa		tax				tax
.24f2	5a		phy				phy
.24f3	a0 00		ldy #$00			ldy 	#0
.24f5					_CMEMCopy:
.24f5	bd 08 25	lda $2508,x			lda 	CMModeList,x
.24f8	99 d8 0c	sta $0cd8,y			sta 	currentMode,y
.24fb	e8		inx				inx
.24fc	c8		iny				iny
.24fd	c0 04		cpy #$04			cpy 	#4
.24ff	d0 f4		bne $24f5			bne 	_CMEMCopy
.2501	7a		ply				ply
.2502	60		rts				rts
.2503					_CMModeError:
.2503	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.2505	20 27 15	jsr $1527		jsr	errorHandler
.2508					CMModeList:
>2508	00 60 00 20					.dword	$20006000 					; Mode 0 which is the standard 80x60 mode, no sprites
>250c	00 60 00 25					.dword 	$25006000					; Mode 1 (40x30)
>2510	00 60 00 2a					.dword 	$2A006000 					; Mode 2 (20x15)
>2514	07 60 00 15					.dword 	$15006007 					; Mode 3 (320x200 256 colour bitmap)
.2518					CMEndModeList:
.2518					CMToScale:
.2518	29 03		and #$03			and 	#3 							; lower 2 bits only
.251a	aa		tax				tax 								; put in X for counting
.251b	a9 00		lda #$00			lda 	#0 							; zero result
.251d	38		sec				sec 								; first time rotate CS in
.251e					_CMTSLoop:
.251e	6a		ror a				ror 	a
.251f	ca		dex				dex
.2520	10 fc		bpl $251e			bpl 	_CMTSLoop
.2522	60		rts				rts
.2523					CMDecodeLayer:
.2523	48		pha				pha 								; save it.
.2524	29 f7		and #$f7			and 	#$F7 						; all the bits except T256C which you can't set using this
.2526	9d 2d 9f	sta $9f2d,x			sta 	$9F2D,X
.2529	68		pla				pla 								; get it back
.252a	29 08		and #$08			and 	#$08 						; the missing bit sets the tile size.
.252c	f0 02		beq $2530			beq 	_CMDLNotSet
.252e	a9 03		lda #$03			lda 	#$03 						; which sets both lower bits, they're square.
.2530					_CMDLNotSet:
.2530	e0 00		cpx #$00			cpx 	#0
.2532	f0 06		beq $253a			beq 	_CMDLayer0 					; layer 1 has standard defaults for tile table, e.g. $7C
.2534	09 7c		ora #$7c			ora 	#$7C 						; so set those bits and write it out.
.2536	9d 2f 9f	sta $9f2f,x			sta 	$9F2F,X
.2539	60		rts				rts
.253a					_CMDLayer0:
.253a	09 80		ora #$80			ora 	#$80 						; tile base is $80
.253c	9d 2f 9f	sta $9f2f,x			sta 	$9F2F,X
.253f	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/video/palette.asm

.2540					CommandPalette:
.2540	a9 00		lda #$00			lda 	#0
.2542	a2 0c		ldx #$0c		ldx	#12
.2544	20 f5 3f	jsr $3ff5		jsr	mainHandler
.2547	a2 02		ldx #$02		ldx	#2
.2549	20 f5 3f	jsr $3ff5		jsr	mainHandler
.254c	a9 01		lda #$01			lda 	#1
.254e	a2 08		ldx #$08		ldx	#8
.2550	20 f5 3f	jsr $3ff5		jsr	mainHandler
.2553	a5 98		lda $98				lda 	esInt0 					; get palette #
.2555	20 65 25	jsr $2565			jsr 	PointToPaletteA			; point to palette register
.2558	a5 99		lda $99				lda 	esInt0+1
.255a	8d 23 9f	sta $9f23			sta 	$9F23
.255d	a5 a1		lda $a1				lda 	esInt1+1
.255f	29 0f		and #$0f			and 	#$0F
.2561	8d 23 9f	sta $9f23			sta 	$9F23
.2564	60		rts				rts
.2565					PointToPaletteA:
.2565	0a		asl a				asl 	a 							; x 2 -> LSB
.2566	8d 20 9f	sta $9f20			sta 	$9F20
.2569	a9 00		lda #$00			lda 	#0 							; carry into A
.256b	2a		rol a				rol 	a
.256c	09 fa		ora #$fa			ora 	#$FA 						; make correct address
.256e	8d 21 9f	sta $9f21			sta 	$9F21
.2571	a9 11		lda #$11			lda 	#$11 						; $01 and single step => $9F22
.2573	8d 22 9f	sta $9f22			sta 	$9F22
.2576	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/video/textdraw.asm

=$f800					DefaultFont = $F800
.2577					Command_Draw:
.2577	a9 7f		lda #$7f			lda 	#TextHandler & $FF
.2579	a2 25		ldx #$25			ldx 	#TextHandler >> 8
.257b	20 e5 18	jsr $18e5			jsr 	GHandler
.257e	60		rts				rts
.257f					TextHandler:
.257f	ad 08 0c	lda $0c08			lda 	gdText+1 					; do we have a string
.2582	d0 1a		bne $259e			bne 	_THHasString
.2584					_THCallRenderer:
.2584	da		phx				phx
.2585	ad f2 0b	lda $0bf2			lda 	gy2
.2588	48		pha				pha
.2589	ad f3 0b	lda $0bf3			lda 	gy2+1
.258c	48		pha				pha
.258d	a9 d2		lda #$d2			lda 	#BitmapTextAccess & $FF 	; render current image (gdImage)
.258f	a2 25		ldx #$25			ldx 	#BitmapTextAccess >> 8
.2591	20 6d 1b	jsr $1b6d			jsr 	ImageRenderer
.2594	68		pla				pla 								; restore y position and x register
.2595	8d f3 0b	sta $0bf3			sta 	gy2+1
.2598	68		pla				pla
.2599	8d f2 0b	sta $0bf2			sta 	gy2
.259c	fa		plx				plx
.259d	60		rts				rts
.259e					_THHasString:
.259e	a2 00		ldx #$00			ldx 	#0 							; position in string
.25a0					_THStringLoop:
.25a0	ad 07 0c	lda $0c07			lda 	gdText 						; text => temp0
.25a3	85 2a		sta $2a				sta 	temp0
.25a5	ad 08 0c	lda $0c08			lda 	gdText+1
.25a8	85 2b		sta $2b				sta 	temp0+1
.25aa	8a		txa				txa 								; length = string length.
.25ab	a0 00		ldy #$00			ldy 	#0
.25ad	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.25af	f0 20		beq $25d1			beq 	_THExit 					; if so exit.
.25b1	e8		inx				inx 								; next character, put in Y
.25b2	8a		txa				txa
.25b3	a8		tay				tay
.25b4	b1 2a		lda ($2a),y			lda 	(temp0),y 					; char to print, override image
.25b6	8d 01 0c	sta $0c01			sta 	gdImage
.25b9	20 84 25	jsr $2584			jsr 	_THCallRenderer 			; render the text
.25bc	ad 00 0c	lda $0c00			lda 	gdSize	 					; get size, need to x by 8 as 8x8 font.
.25bf	0a		asl a				asl		a
.25c0	0a		asl a				asl 	a
.25c1	0a		asl a				asl 	a
.25c2	18		clc				clc
.25c3	6d f0 0b	adc $0bf0			adc 	gX2 						; add to horizontal position
.25c6	8d f0 0b	sta $0bf0			sta 	gx2
.25c9	90 d5		bcc $25a0			bcc 	_THStringLoop
.25cb	ee f1 0b	inc $0bf1			inc 	gx2+1
.25ce	4c a0 25	jmp $25a0			jmp 	_THStringLoop 				; do the whole lot.
.25d1					_THExit:
.25d1	60		rts				rts
.25d2					BitmapTextAccess:
.25d2	c0 ff		cpy #$ff			cpy 	#$FF 						; get information
.25d4	d0 07		bne $25dd			bne 	_BTABitmap
.25d6	a9 00		lda #$00			lda 	#0 							; bitmap 8x8
.25d8	a2 08		ldx #$08			ldx 	#8
.25da	a0 08		ldy #$08			ldy 	#8
.25dc	60		rts				rts
.25dd					_BTABitmap:
.25dd	ad 01 0c	lda $0c01			lda 	gdImage 					; Image => temp0:A
.25e0	20 e4 25	jsr $25e4			jsr 	DrawCharacterA
.25e3	60		rts				rts
.25e4					DrawCharacterA:
.25e4	85 2a		sta $2a				sta 	temp0
.25e6	a9 00		lda #$00			lda 	#0
.25e8	06 2a		asl $2a				asl 	temp0	 					; x temp0:A x 8
.25ea	2a		rol a				rol 	a
.25eb	06 2a		asl $2a				asl 	temp0
.25ed	2a		rol a				rol 	a
.25ee	06 2a		asl $2a				asl 	temp0
.25f0	2a		rol a				rol 	a
.25f1	09 f8		ora #$f8			ora 	#DefaultFont >> 8 			; A now points into font table.
.25f3	ee 25 9f	inc $9f25			inc 	$9F25 						; alternate port set.
.25f6	8d 21 9f	sta $9f21			sta 	$9F21 						; set up address
.25f9	a9 10		lda #$10			lda 	#$10
.25fb	8d 22 9f	sta $9f22			sta 	$9F22
.25fe	84 32		sty $32				sty 	tempShort
.2600	a5 2a		lda $2a				lda 	temp0 						; or Y (vertical line) into temp0
.2602	05 32		ora $32				ora 	tempShort
.2604	8d 20 9f	sta $9f20			sta 	$9F20 						; address set up.
.2607	ad 24 9f	lda $9f24			lda 	$9F24 						; get bitmap
.260a	ce 25 9f	dec $9f25			dec 	$9F25 						; original port set back
.260d	a2 07		ldx #$07			ldx 	#7 							; index into rendercache
.260f	85 2a		sta $2a				sta 	temp0 						; bitmap in temp 0
.2611					_BTADoCache:
.2611	a9 00		lda #$00			lda 	#0
.2613	46 2a		lsr $2a				lsr 	temp0
.2615	90 02		bcc $2619			bcc 	_BTANotSet
.2617	a9 ff		lda #$ff			lda 	#255
.2619					_BTANotSet:
.2619	9d 10 0c	sta $0c10,x			sta 	renderCache,x
.261c	ca		dex				dex
.261d	10 f2		bpl $2611			bpl 	_BTADoCache
.261f	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/video/vload.asm

.2620					Command_VLoad:
.2620	a9 00		lda #$00			lda 	#0 								; string which is the file name
.2622	a2 0e		ldx #$0e		ldx	#14
.2624	20 f5 3f	jsr $3ff5		jsr	mainHandler
.2627	a2 01		ldx #$01			ldx 	#1 								; load address at +1.
.2629	a5 35		lda $35				lda 	lowMemory 						; load it into lowMemory (for now ?)
.262b	95 98		sta $98,x			sta 	esInt0,x
.262d	a5 36		lda $36				lda 	lowMemory+1
.262f	95 a0		sta $a0,x			sta 	esInt1,x
.2631	a9 00		lda #$00			lda 	#0
.2633	95 a8		sta $a8,x			sta 	esInt2,x
.2635	95 b0		sta $b0,x			sta 	esInt3,x
.2637	a2 0c		ldx #$0c		ldx	#12
.2639	20 05 15	jsr $1505		jsr	deviceHandler
.263c	a5 99		lda $99				lda 	esInt0+1 						; (temp0) is where we are decoding from.
.263e	85 2a		sta $2a				sta 	temp0
.2640	a5 a1		lda $a1				lda 	esInt1+1
.2642	85 2b		sta $2b				sta 	temp0+1
.2644	20 bf 26	jsr $26bf			jsr 	LoadVRAMFile 					; load the VRAM file in.
.2647	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/video/vpeekpoke.asm

.2648					Command_VPoke:
.2648	38		sec				sec 						; one byte , CS
.2649	b0 01		bcs $264c			bcs 	CmdVideoWrite
.264b					Command_VDoke:
.264b	18		clc				clc 						; two bytes, CC
.264c					CmdVideoWrite:
.264c	08		php				php 						; save one or two btes
.264d	a9 00		lda #$00			lda 	#0  				; get address and value into levels 0,1
.264f	a2 0a		ldx #$0a		ldx	#10
.2651	20 f5 3f	jsr $3ff5		jsr	mainHandler
.2654	a2 02		ldx #$02		ldx	#2
.2656	20 f5 3f	jsr $3ff5		jsr	mainHandler
.2659	a9 01		lda #$01			lda 	#1
.265b	a2 0a		ldx #$0a		ldx	#10
.265d	20 f5 3f	jsr $3ff5		jsr	mainHandler
.2660	a2 00		ldx #$00			ldx 	#0
.2662	20 73 26	jsr $2673			jsr 	SetUpTOSVRamAddress ; copy target address to VRAM address registers
.2665	a5 99		lda $99				lda 	esInt0+1 			; get MSB of write value
.2667	8d 23 9f	sta $9f23			sta 	$9F23
.266a	28		plp				plp 						; if it was Poke then exit
.266b	b0 05		bcs $2672			bcs 	_CVWExit
.266d	a5 a1		lda $a1				lda 	esInt1+1 			; doke, write the MSB.
.266f	8d 23 9f	sta $9f23			sta 	$9F23
.2672					_CVWExit:
.2672	60		rts				rts
.2673					SetUpTOSVRamAddress:
.2673	b5 a8		lda $a8,x			lda 	esInt2,x 			; check range of address, data to $FFFF
.2675	29 fe		and #$fe			and 	#$FE
.2677	15 b0		ora $b0,x			ora 	esInt3,x
.2679	d0 14		bne $268f			bne 	CVWValue
.267b	b5 98		lda $98,x			lda 	esInt0,x			; set address up
.267d	8d 20 9f	sta $9f20			sta 	$9F20
.2680	b5 a0		lda $a0,x			lda 	esInt1,x
.2682	8d 21 9f	sta $9f21			sta	 	$9F21
.2685	b5 a8		lda $a8,x			lda 	esInt2,x
.2687	29 01		and #$01			and 	#1
.2689	09 10		ora #$10			ora 	#$10 				; step 1.
.268b	8d 22 9f	sta $9f22			sta 	$9F22
.268e	60		rts				rts
.268f					CVWValue:
.268f	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.2691	20 27 15	jsr $1527		jsr	errorHandler
.2694					Command_VPeek:
.2694	38		sec				sec 						; one byte , CS
.2695	b0 01		bcs $2698			bcs 	CmdVideoRead
.2697					Command_VDeek:
.2697	18		clc				clc 						; two bytes, CC
.2698					CmdVideoRead:
.2698	08		php				php 						; save action on stack.
.2699	48		pha				pha 						; save stack position
.269a	a2 0a		ldx #$0a		ldx	#10
.269c	20 f5 3f	jsr $3ff5		jsr	mainHandler
.269f	a2 04		ldx #$04		ldx	#4
.26a1	20 f5 3f	jsr $3ff5		jsr	mainHandler
.26a4	fa		plx				plx
.26a5	20 73 26	jsr $2673			jsr 	SetUpTOSVRamAddress	; set up VRAM address.
.26a8	a9 00		lda #$00			lda 	#0 					; zero upper 3 bytes
.26aa	95 a0		sta $a0,x			sta 	esInt1,x
.26ac	95 a8		sta $a8,x			sta 	esInt2,x
.26ae	95 b0		sta $b0,x			sta 	esInt3,x
.26b0	ad 23 9f	lda $9f23			lda 	$9F23				; copy 1st byte
.26b3	95 98		sta $98,x			sta 	esInt0,x
.26b5	28		plp				plp 						; check if DOKE (carry was clear)
.26b6	b0 05		bcs $26bd			bcs 	_CVRExit
.26b8	ad 23 9f	lda $9f23			lda 	$9F23 				; copy 2nd byte
.26bb	95 a0		sta $a0,x			sta 	esInt1,x
.26bd					_CVRExit:
.26bd	8a		txa				txa 						; return X position.
.26be	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/video/vramprocess.asm

.0cdc					compressMode:
>0cdc							.fill 	1
.0cdd					imageInfo:
>0cdd							.fill 	X16MaxImages
.0d1d					imageAddr32Low:
>0d1d							.fill  	X16MaxImages
.0d5d					imageAddr32High:
>0d5d							.fill  	X16MaxImages
.26bf					LoadVRAMFile:
.26bf	da		phx				phx
.26c0	5a		phy				phy
.26c1					_LVRLoop:
.26c1	20 9b 27	jsr $279b			jsr 	LVFGet 						; get the next (never access direct)
.26c4	c9 80		cmp #$80			cmp 	#$80 						; exit ?
.26c6	f0 42		beq $270a			beq 	_LVRExit
.26c8	b0 5a		bcs $2724			bcs 	_LVRLoad 					; load data in ?
.26ca	c9 08		cmp #$08			cmp 	#$08 						; is it set address ?
.26cc	90 11		bcc $26df			bcc 	_LVRSetAddress
.26ce	c9 0f		cmp #$0f			cmp 	#$0F 						; is it define palette
.26d0	f0 3b		beq $270d			beq 	_LVRSetPalette
.26d2	c9 10		cmp #$10			cmp 	#$10 						; is it set compression type ?
.26d4	90 2d		bcc $2703			bcc 	_LVRSetCompress
.26d6	c9 64		cmp #$64			cmp 	#$64 						; is it set sprite type.
.26d8	90 5e		bcc $2738			bcc 	_LVRSetSprite
.26da	a2 01		ldx #$01			ldx 	#ErrorID_missing
.26dc	20 27 15	jsr $1527		jsr	errorHandler
.26df					_LVRSetAddress:
.26df	85 2d		sta $2d				sta 	temp1+1 					; 24 bit in temp1+1/temp1/A
.26e1	20 9b 27	jsr $279b			jsr 	LVFGet
.26e4	85 2c		sta $2c				sta 	temp1
.26e6	a9 00		lda #$00			lda 	#0
.26e8	46 2d		lsr $2d				lsr 	temp1+1 					; / 2 twice.
.26ea	66 2c		ror $2c				ror 	temp1
.26ec	6a		ror a				ror		a
.26ed	46 2d		lsr $2d				lsr 	temp1+1
.26ef	66 2c		ror $2c				ror 	temp1
.26f1	6a		ror a				ror		a
.26f2	8d 20 9f	sta $9f20			sta 	$9F20 						; set write address with +1 increment
.26f5	a5 2c		lda $2c				lda 	temp1
.26f7	8d 21 9f	sta $9f21			sta 	$9F21
.26fa	a5 2d		lda $2d				lda 	temp1+1
.26fc	09 10		ora #$10			ora 	#$10
.26fe	8d 22 9f	sta $9f22			sta 	$9F22
.2701	d0 be		bne $26c1			bne 	_LVRLoop
.2703					_LVRSetCompress:
.2703	29 07		and #$07			and 	#7
.2705	8d dc 0c	sta $0cdc			sta 	compressMode
.2708	10 b7		bpl $26c1			bpl 	_LVRLoop
.270a					_LVRExit:
.270a	7a		ply				ply
.270b	fa		plx				plx
.270c	60		rts				rts
.270d					_LVRSetPalette:
.270d	20 9b 27	jsr $279b			jsr 	LVFGet 						; get palette id.
.2710	20 65 25	jsr $2565			jsr 	PointToPaletteA 			; in palette.asm
.2713	20 9b 27	jsr $279b			jsr 	LVFGet 						; copy 12 bit palette data in.
.2716	8d 23 9f	sta $9f23			sta 	$9F23
.2719	20 9b 27	jsr $279b			jsr 	LVFGet
.271c	29 0f		and #$0f			and 	#$0F
.271e	8d 23 9f	sta $9f23			sta 	$9F23
.2721	4c c1 26	jmp $26c1			jmp 	_LVRLoop
.2724					_LVRLoad:
.2724	ae dc 0c	ldx $0cdc			ldx 	compressMode
.2727	d0 55		bne $277e			bne 	_LVRNotMode0
.2729	29 7f		and #$7f			and 	#$7F 						; count in X (is > 0)
.272b					_LVRLCopyX:
.272b	aa		tax				tax
.272c					_LVRLCopy:
.272c	20 9b 27	jsr $279b			jsr 	LVFGet 						; write to data.
.272f	8d 23 9f	sta $9f23			sta 	$9F23
.2732	ca		dex				dex
.2733	d0 f7		bne $272c			bne 	_LVRLCopy
.2735	4c c1 26	jmp $26c1			jmp 	_LVRLoop
.2738					_LVRSetSprite:
.2738	48		pha				pha 								; save on stack
.2739	20 9b 27	jsr $279b			jsr 	LVFGet 						; get the sprite number into X
.273c	aa		tax				tax
.273d	c9 40		cmp #$40			cmp 	#X16MaxImages				; too high ?
.273f	b0 38		bcs $2779			bcs 	_LVRSSValue
.2741	68		pla				pla 								; restore the data held in the first byte
.2742	9d dd 0c	sta $0cdd,x			sta 	imageInfo,x 				; and write into the sprite image table.
.2745					_LVRAlignVRAM:
.2745	ad 20 9f	lda $9f20			lda 	$9F20 						; check VRAM on 32 byte boundary
.2748	29 1f		and #$1f			and 	#$1F
.274a	f0 07		beq $2753			beq 	_LVRAligned
.274c	a9 00		lda #$00			lda 	#$00
.274e	8d 23 9f	sta $9f23			sta 	$9F23
.2751	f0 f2		beq $2745			beq 	_LVRAlignVRAM
.2753					_LVRAligned:
.2753	ad 22 9f	lda $9f22			lda 	$9F22 						; put address/32 in sprite image table
.2756	4a		lsr a				lsr 	a 	 						; first halve into temp1
.2757	ad 21 9f	lda $9f21			lda 	$9F21
.275a	6a		ror a				ror 	a
.275b	85 2d		sta $2d				sta 	temp1+1
.275d	ad 20 9f	lda $9f20			lda 	$9F20
.2760	6a		ror a				ror 	a
.2761	85 2c		sta $2c				sta 	temp1
.2763	a0 04		ldy #$04			ldy 	#4 							; divide it by 16 in temp1
.2765					_LVRShift:
.2765	46 2d		lsr $2d				lsr 	temp1+1
.2767	66 2c		ror $2c				ror 	temp1
.2769	88		dey				dey
.276a	d0 f9		bne $2765			bne 	_LVRShift
.276c	a5 2d		lda $2d				lda 	temp1+1 					; copy result.
.276e	9d 5d 0d	sta $0d5d,x			sta 	imageAddr32High,x
.2771	a5 2c		lda $2c				lda 	temp1
.2773	9d 1d 0d	sta $0d1d,x			sta 	imageAddr32Low,x
.2776	4c c1 26	jmp $26c1			jmp 	_LVRLoop
.2779					_LVRSSValue:
.2779	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.277b	20 27 15	jsr $1527		jsr	errorHandler
.277e					_LVRNotMode0:
.277e	e0 01		cpx #$01			cpx 	#1
.2780	d0 15		bne $2797			bne 	_LVRNotMode1
.2782	29 7f		and #$7f			and 	#$7F 						; drop bit 7
.2784	c9 40		cmp #$40			cmp 	#$40
.2786	90 a3		bcc $272b			bcc 	_LVRLCopyX 					; 00-3F use mode 0's copying code.
.2788					_LVRRLEGroup:
.2788	29 3f		and #$3f			and 	#$3F
.278a	aa		tax				tax
.278b	20 9b 27	jsr $279b			jsr 	LVFGet
.278e					_LVRLEGroupLoop:
.278e	8d 23 9f	sta $9f23			sta 	$9F23
.2791	ca		dex				dex
.2792	d0 fa		bne $278e			bne 	_LVRLEGroupLoop
.2794	4c c1 26	jmp $26c1			jmp 	_LVRLoop
.2797					_LVRNotMode1:
>2797	db						.byte 	$DB
.2798	4c 97 27	jmp $2797			jmp 	_LVRNotMode1
.279b	84 32		sty $32		LVFGet:	sty 	tempShort
.279d	a0 00		ldy #$00			ldy 	#0
.279f	b1 2a		lda ($2a),y			lda 	(temp0),y
.27a1	a4 32		ldy $32				ldy	 	tempShort
.27a3	e6 2a		inc $2a				inc 	temp0
.27a5	d0 02		bne $27a9			bne 	_LVFGExit
.27a7	e6 2b		inc $2b				inc 	temp0+1
.27a9					_LVFGExit:
.27a9	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Return to file: basic.asm

.27aa					section_end_extension:
.27aa					section_start_floatingpoint:

;******  Processing file: floatingpoint/floatingpoint.asm

.27aa					floatingpointHandler:
.27aa	a2 03		ldx #$03			ldx 	#ErrorID_NoModule
.27ac	20 27 15	jsr $1527		jsr	errorHandler

;******  Return to file: basic.asm

.27af					section_end_floatingpoint:
.27af					section_start_interaction:

;******  Processing file: interaction/interaction.asm


;******  Processing file: interaction/cold.asm

.27af					ColdStartEntry:
.27af	a2 ff		ldx #$ff			ldx 	#$FF
.27b1	9a		txs				txs
.27b2	20 3b 28	jsr $283b			jsr 	ForceStandardMode
.27b5	a2 02		ldx #$02		ldx	#2
.27b7	20 05 15	jsr $1505		jsr	deviceHandler
.27ba	a0 ff		ldy #$ff			ldy 	#255
.27bc					_CSBanner:
.27bc	c8		iny				iny
.27bd	b9 e3 27	lda $27e3,y			lda 	Intro,y
.27c0	f0 14		beq $27d6			beq 	_CSStart
.27c2	c9 08		cmp #$08			cmp 	#8
.27c4	90 08		bcc $27ce			bcc 	_CSInk
.27c6	a2 14		ldx #$14		ldx	#20
.27c8	20 05 15	jsr $1505		jsr	deviceHandler
.27cb	4c bc 27	jmp $27bc			jmp 	_CSBanner
.27ce					_CSInk:
.27ce	a2 06		ldx #$06		ldx	#6
.27d0	20 05 15	jsr $1505		jsr	deviceHandler
.27d3	4c bc 27	jmp $27bc			jmp 	_CSBanner
.27d6					_CSStart:
.27d6	a2 16		ldx #$16		ldx	#22
.27d8	20 f5 3f	jsr $3ff5		jsr	mainHandler
.27db	a2 06		ldx #$06		ldx	#6
.27dd	20 f5 3f	jsr $3ff5		jsr	mainHandler
.27e0	4c fb 28	jmp $28fb			jmp 	WarmStartEntry
>27e3	06 2a 2a 2a 20 36 35 30		Intro:	.text 	6,"*** 6502 Extended BASIC ***",13,13
>27eb	32 20 45 78 74 65 6e 64 65 64 20 42 41 53 49 43
>27fb	20 2a 2a 2a 0d 0d
>2801	03 57 72 69 74 74 65 6e				.text 	3,"Written by Paul Robson 2021",13,13
>2809	20 62 79 20 50 61 75 6c 20 52 6f 62 73 6f 6e 20
>2819	32 30 32 31 0d 0d
>281f	02 42 61 73 69 63 20				.text 	2,"Basic "
>2826	30 2e 33 31					.text "0.31"
>282a	20 28						.text 	" ("
>282c	30 39 2d 41 70 72 2d 32				.text "09-Apr-2021"
>2834	30 32 31
>2837	29 0d 0d 00					.text 	")",13,13,0
.283b					ForceStandardMode:
.283b	a9 fe		lda #$fe			lda 	#$FE
.283d	20 74 18	jsr $1874		jsr	extensionHandler
.2840	60		rts				rts

;******  Return to file: interaction/interaction.asm


;******  Processing file: interaction/delete.asm

.2841					DeleteLine:
.2841	ad c8 0a	lda $0ac8			lda 	basePage 					; copy program base to temp0
.2844	85 2a		sta $2a				sta 	temp0
.2846	ad c9 0a	lda $0ac9			lda 	basePage+1
.2849	85 2b		sta $2b				sta 	temp0+1
.284b	a0 01		ldy #$01	_DLLoop:ldy 	#1 							; see if found line ?
.284d	a5 98		lda $98				lda 	esInt0 						; e.g. the linenumbers match
.284f	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.2851	d0 07		bne $285a			bne 	_DLNext
.2853	c8		iny				iny
.2854	a5 a0		lda $a0				lda 	esInt1
.2856	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.2858	f0 06		beq $2860			beq 	_DLFound
.285a	20 7e 28	jsr $287e	_DLNext:jsr 	IAdvanceTemp0 				; shift temp0 forward, return Z flag set if end.
.285d	d0 ec		bne $284b			bne 	_DLLoop
.285f	60		rts				rts
.2860					_DLFound:
.2860	a0 00		ldy #$00			ldy 	#0 							; this is the line to cut, so this offset is the bytes to remove
.2862	b1 2a		lda ($2a),y			lda 	(temp0),y
.2864	a8		tay				tay 								; so we copy from (temp0),y
.2865	a2 00		ldx #$00			ldx 	#0  						; to (temp0,x)
.2867					_DLCopyDown:
.2867	b1 2a		lda ($2a),y			lda 	(temp0),y 					; copy one byte.
.2869	81 2a		sta ($2a,x)			sta 	(temp0,x)
.286b	e6 2a		inc $2a				inc 	temp0 						; advance pointer
.286d	d0 02		bne $2871			bne 	_DLNoCarry
.286f	e6 2b		inc $2b				inc 	temp0+1
.2871					_DLNoCarry:
.2871	a5 2a		lda $2a				lda 	temp0 						; until hit low memory
.2873	c5 35		cmp $35				cmp 	lowMemory 					; which is comfortably after End Program.
.2875	d0 f0		bne $2867			bne 	_DLCopyDown
.2877	a5 2b		lda $2b				lda 	temp0+1
.2879	c5 36		cmp $36				cmp 	lowMemory+1
.287b	d0 ea		bne $2867			bne 	_DLCopyDown
.287d	60		rts				rts
.287e					IAdvanceTemp0:
.287e	84 32		sty $32				sty 	tempShort
.2880	18		clc				clc
.2881	a0 00		ldy #$00			ldy 	#0 							; get offset
.2883	b1 2a		lda ($2a),y			lda 	(temp0),y 					; add to temp0
.2885	65 2a		adc $2a				adc 	temp0
.2887	85 2a		sta $2a				sta 	temp0
.2889	90 02		bcc $288d			bcc 	_IATNoCarry
.288b	e6 2b		inc $2b				inc 	temp0+1
.288d					_IATNoCarry:
.288d	b1 2a		lda ($2a),y			lda 	(temp0),y
.288f	a4 32		ldy $32				ldy 	tempShort
.2891	c9 00		cmp #$00			cmp		#0 							; Z set if program end.
.2893	60		rts				rts

;******  Return to file: interaction/interaction.asm


;******  Processing file: interaction/insert.asm

.2894					InsertLine:
.2894	ad c8 0a	lda $0ac8			lda 	basePage 					; copy program base to temp0
.2897	85 2a		sta $2a				sta 	temp0
.2899	ad c9 0a	lda $0ac9			lda 	basePage+1
.289c	85 2b		sta $2b				sta 	temp0+1
.289e					_ILLoop:
.289e	a0 01		ldy #$01			ldy 	#1
.28a0	b1 2a		lda ($2a),y			lda 	(temp0),y
.28a2	c5 98		cmp $98				cmp 	esInt0
.28a4	c8		iny				iny
.28a5	b1 2a		lda ($2a),y			lda 	(temp0),y
.28a7	e5 a0		sbc $a0				sbc 	esInt1
.28a9	b0 05		bcs $28b0			bcs 	_ILFound 					; we know it cannot be equal, it would have been deleted
.28ab	20 7e 28	jsr $287e			jsr 	IAdvanceTemp0 				; shift temp0 forward, return Z flag set if end.
.28ae	d0 ee		bne $289e			bne 	_ILLoop
.28b0					_ILFound:
.28b0	a5 35		lda $35				lda 	lowMemory 					; shift lowMemory up to make space for it.
.28b2	85 2c		sta $2c				sta 	temp1             			; this pointer goes backwards
.28b4	a5 36		lda $36				lda 	lowMemory+1
.28b6	85 2d		sta $2d				sta 	temp1+1
.28b8	ad da 0e	lda $0eda			lda 	tokenBufferIndex 			; space to make in Y, 0 in X.
.28bb	18		clc				clc 								; add 3 for the line number and offset.
.28bc	69 03		adc #$03			adc 	#3 							; tokenbuffer already has $80
.28be	a8		tay				tay
.28bf	a2 00		ldx #$00			ldx 	#0
.28c1	a1 2c		lda ($2c,x)	_ILMove:lda 	(temp1,x)					; shift up
.28c3	91 2c		sta ($2c),y			sta 	(temp1),y
.28c5	a5 2c		lda $2c				lda 	temp1 						; check reached the insert point ?
.28c7	c5 2a		cmp $2a				cmp 	temp0
.28c9	d0 06		bne $28d1			bne 	_ILMNext
.28cb	a5 2d		lda $2d				lda 	temp1+1
.28cd	c5 2b		cmp $2b				cmp 	temp0+1
.28cf	f0 0b		beq $28dc			beq 	_ILMCopy
.28d1					_ILMNext:
.28d1	a5 2c		lda $2c				lda 	temp1
.28d3	d0 02		bne $28d7			bne 	_ILNoBorrow
.28d5	c6 2d		dec $2d				dec 	temp1+1
.28d7					_ILNoBorrow:
.28d7	c6 2c		dec $2c				dec 	temp1
.28d9	4c c1 28	jmp $28c1			jmp 	_ILMove 					; and go round again
.28dc					_ILMCopy:
.28dc	98		tya				tya 								; Y is the offset of the new line.
.28dd	81 2a		sta ($2a,x)			sta 	(temp0,x)					; X = 0 still.
.28df	a0 01		ldy #$01			ldy 	#1 							; copy in line number.
.28e1	a5 98		lda $98				lda 	esInt0
.28e3	91 2a		sta ($2a),y			sta 	(temp0),y
.28e5	c8		iny				iny
.28e6	a5 a0		lda $a0				lda 	esInt1
.28e8	91 2a		sta ($2a),y			sta 	(temp0),y
.28ea	a0 00		ldy #$00			ldy 	#0 							; copy the body in
.28ec					_ILMCopy2:
.28ec	b1 28		lda ($28),y			lda 	(codePtr),y
.28ee	c8		iny				iny
.28ef	c8		iny				iny
.28f0	c8		iny				iny
.28f1	91 2a		sta ($2a),y			sta 	(temp0),y
.28f3	88		dey				dey
.28f4	88		dey				dey
.28f5	cc da 0e	cpy $0eda			cpy 	tokenBufferIndex
.28f8	d0 f2		bne $28ec			bne 	_ILMCopy2
.28fa	60		rts				rts

;******  Return to file: interaction/interaction.asm


;******  Processing file: interaction/warm.asm

.28fb					WarmStartEntry:
.28fb	a2 ff		ldx #$ff			ldx 	#$FF
.28fd	9a		txs				txs
.28fe	20 3b 28	jsr $283b			jsr 	ForceStandardMode
.2901	a9 02		lda #$02			lda 	#2							; green text.
.2903	a2 06		ldx #$06		ldx	#6
.2905	20 05 15	jsr $1505		jsr	deviceHandler
.2908	a2 0a		ldx #$0a		ldx	#10
.290a	20 05 15	jsr $1505		jsr	deviceHandler
.290d	a5 2a		lda $2a				lda 	temp0	 					; copy temp0 to codePtr
.290f	85 28		sta $28				sta 	codePtr
.2911	a5 2b		lda $2b				lda 	temp0+1
.2913	85 29		sta $29				sta 	codePtr+1
.2915	a2 04		ldx #$04		ldx	#4
.2917	20 05 15	jsr $1505		jsr	deviceHandler
.291a	a2 08		ldx #$08		ldx	#8
.291c	20 28 4b	jsr $4b28		jsr	tokeniserHandler
.291f	c9 00		cmp #$00			cmp 	#0
.2921	f0 25		beq $2948			beq 	WSEError 					; failed (tokenise can fail if it doesn't know a character e.g. |)
.2923	a9 d7		lda #$d7			lda 	#(tokenHeader) & $FF
.2925	85 28		sta $28				sta 	codePtr
.2927	a9 0d		lda #$0d			lda 	#(tokenHeader) >> 8
.2929	85 29		sta $29				sta 	1+(codePtr)
.292b	ad da 0d	lda $0dda			lda 	tokenBuffer 				; is it a blank line, go get another line.
.292e	c9 80		cmp #$80			cmp 	#$80
.2930	f0 c9		beq $28fb			beq 	WarmStartEntry
.2932	29 c0		and #$c0			and 	#$C0						; does it start with a number
.2934	c9 40		cmp #$40			cmp 	#$40 						; e.g. is it 01xx xxxx
.2936	f0 15		beq $294d			beq 	HasLineNumber
.2938	a9 00		lda #$00			lda 	#0 							; zero the token header, so it will look like a
.293a	8d d7 0d	sta $0dd7			sta 	tokenHeader 				; fake program line.
.293d	8d d8 0d	sta $0dd8			sta 	tokenHeader+1
.2940	8d d9 0d	sta $0dd9			sta 	tokenHeader+2
.2943	a2 18		ldx #$18		ldx	#24
.2945	20 f5 3f	jsr $3ff5		jsr	mainHandler
.2948					WSEError:
.2948	a2 1e		ldx #$1e			ldx 	#ErrorID_Tokenise
.294a	20 27 15	jsr $1527		jsr	errorHandler
.294d					HasLineNumber:
.294d	a0 03		ldy #$03			ldy 	#3 							; get line number
.294f	a9 00		lda #$00			lda 	#0
.2951	a2 0a		ldx #$0a		ldx	#10
.2953	20 f5 3f	jsr $3ff5		jsr	mainHandler
.2956	a5 a8		lda $a8				lda 	esInt2		 				; check in range (only 2 bytes)
.2958	05 b0		ora $b0				ora 	esInt3
.295a	d0 ec		bne $2948			bne 	WSEError
.295c	98		tya				tya 								; make codePtr point to code after the line number.
.295d	18		clc				clc 								; by skipping over the tokenised number.
.295e	65 28		adc $28				adc 	codePtr
.2960	85 28		sta $28				sta 	codePtr
.2962	90 02		bcc $2966			bcc		_HLNNoCarry
.2964	e6 29		inc $29				inc 	codePtr+1
.2966					_HLNNoCarry:
.2966	98		tya				tya 								; subtract that offset from the code buffer index
.2967	38		sec				sec
.2968	49 ff		eor #$ff			eor 	#$FF
.296a	6d da 0e	adc $0eda			adc 	tokenBufferIndex
.296d	18		clc				clc 								; add space allowing for header & $80 trailer
.296e	69 04		adc #$04			adc 	#4
.2970	8d da 0e	sta $0eda			sta 	tokenBufferIndex 			; this is the number of bytes occupied.
.2973	20 41 28	jsr $2841			jsr 	DeleteLine 					; always delete the line, it's deleted and reinserted.
.2976					_HLNNoDelete:
.2976	ad da 0e	lda $0eda			lda 	tokenBufferIndex 			; if line was empty, then don't insert
.2979	c9 01		cmp #$01			cmp 	#1 							; (the one character is the EOL marker)
.297b	f0 0c		beq $2989			beq 	_HLMEditDone
.297d	a5 36		lda $36				lda 	lowMemory+1 				; is there space, if we allow a little bit of
.297f	18		clc				clc 								; workspace (1k)
.2980	69 04		adc #$04			adc 	#4 							; e.g. 4 x 256
.2982	c5 34		cmp $34				cmp 	highMemory+1
.2984	b0 0b		bcs $2991			bcs 	_HLMMemory 					; nope, won't allowit.
.2986	20 94 28	jsr $2894			jsr 	InsertLine 					; insert the line in
.2989					_HLMEditDone:
.2989	a2 06		ldx #$06		ldx	#6
.298b	20 f5 3f	jsr $3ff5		jsr	mainHandler
.298e	4c fb 28	jmp $28fb			jmp 	WarmStartEntry
.2991					_HLMMemory:
.2991	a2 22		ldx #$22			ldx 	#ErrorID_Memory
.2993	20 27 15	jsr $1527		jsr	errorHandler

;******  Return to file: interaction/interaction.asm

.2996					interactionHandler:
.2996	7c 99 29	jmp ($2999,x)			jmp 	(interactionVectors,x)
.2999					interactionVectors:
>2999	9f 29					.word _DummyControlHandler ; index 0
>299b	af 27					.word ColdStartEntry       ; index 2
>299d	fb 28					.word WarmStartEntry       ; index 4
.299f					_DummyControlHandler:
.299f	60		rts			rts

;******  Return to file: basic.asm

.29a0					section_end_interaction:
.29a0					section_start_main:

;******  Processing file: main/main.asm


;******  Processing file: main/commands/compat/readdata.asm

.0d9d					dataPtr:
>0d9d							.fill 	2
.0d9f					dataIndex:
>0d9f							.fill 	1
.29a0					CommandRead:
.29a0	a2 00		ldx #$00			ldx 	#0 							; get a reference to a variable in stack:0
.29a2	20 c3 38	jsr $38c3			jsr 	EvaluateReference
.29a5	20 e6 29	jsr $29e6			jsr 	SwapDPCP 					; use the data pointer.
.29a8	b1 28		lda ($28),y			lda 	(codePtr),y 				; see where it is.
.29aa	c8		iny				iny
.29ab	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; if it is on a comma, it is in data.
.29ad	f0 07		beq $29b6			beq 	_CRInData
.29af	88		dey				dey
.29b0	a9 d9		lda #$d9			lda 	#TKW_DATA 					; scan forward to a DATA statement.
.29b2	aa		tax				tax
.29b3	20 c3 30	jsr $30c3			jsr 	ScanForward
.29b6					_CRInData:
.29b6	a2 01		ldx #$01			ldx 	#1 							; evaluate a value at Stack,1
.29b8	20 6b 38	jsr $386b			jsr 	Evaluate
.29bb	ca		dex				dex 								; and write the value.
.29bc	20 2e 2c	jsr $2c2e			jsr 	WriteValue
.29bf	20 e6 29	jsr $29e6			jsr 	SwapDPCP 					; get the code pointer back.
.29c2	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows ?
.29c4	c8		iny				iny
.29c5	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; if comma, another variable
.29c7	f0 d7		beq $29a0			beq 	CommandRead
.29c9	88		dey				dey
.29ca	60		rts				rts
.29cb					CommandData:
.29cb	a9 80		lda #$80			lda 	#TOK_EOL 					; go forward to end of line or colon.
.29cd	a2 ca		ldx #$ca			ldx 	#TKW_COLON
.29cf	20 c3 30	jsr $30c3			jsr 	ScanForward
.29d2	88		dey				dey 								; ending on EOL is a scan issue, as it increments
.29d3	60		rts				rts
.29d4					CommandRestore:
.29d4	ad c8 0a	lda $0ac8			lda 	basePage
.29d7	8d 9d 0d	sta $0d9d			sta 	dataPtr
.29da	ad c9 0a	lda $0ac9			lda 	basePage+1
.29dd	8d 9e 0d	sta $0d9e			sta 	dataPtr+1
.29e0	a9 03		lda #$03			lda 	#3
.29e2	8d 9f 0d	sta $0d9f			sta 	dataIndex
.29e5	60		rts				rts
.29e6					SwapDPCP:
.29e6	da		phx				phx
.29e7	98		tya				tya 								; swap Y, DataIndex
.29e8	ac 9f 0d	ldy $0d9f			ldy 	DataIndex
.29eb	8d 9f 0d	sta $0d9f			sta 	DataIndex
.29ee	a5 28		lda $28				lda 	codePtr 					; swap code/dataptr low
.29f0	ae 9d 0d	ldx $0d9d			ldx 	dataptr
.29f3	8d 9d 0d	sta $0d9d			sta 	dataPtr
.29f6	86 28		stx $28				stx 	codePtr
.29f8	a5 29		lda $29				lda 	codePtr+1 					; swap code/dataptr high.
.29fa	ae 9e 0d	ldx $0d9e			ldx 	dataptr+1
.29fd	8d 9e 0d	sta $0d9e			sta 	dataPtr+1
.2a00	86 29		stx $29				stx 	codePtr+1
.2a02	fa		plx				plx
.2a03	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/compat/transfer.asm

.2a04					CommandGOSUB:
.2a04	20 88 38	jsr $3888			jsr 	EvaluateRootInteger			; get GOSUB line on stack top.
.2a07	a2 04		ldx #$04			ldx 	#4 							; allocate 4 bytes on stack for GOSUB
.2a09	a9 47		lda #$47			lda 	#markerGOSUB  				; <marker> <return addr/offset>
.2a0b	20 a2 3f	jsr $3fa2			jsr 	RSClaim
.2a0e	a9 01		lda #$01			lda 	#1 							; save position at offset 1.
.2a10	20 ce 3f	jsr $3fce			jsr 	RSSavePosition
.2a13	a2 00		ldx #$00			ldx 	#0 							; point back at GOSUB line
.2a15	f0 1b		beq $2a32			beq 	GotoTOS 					; and do a GOTO there.
.2a17					CommandRETURN:
.2a17	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.2a19	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.2a1b	c9 47		cmp #$47			cmp 	#markerGOSUB 						; does it match
.2a1d	f0 05		beq $2a24			beq 	_isok
.2a1f	a2 0e		ldx #$0e			ldx 	#ErrorID_returnErr
.2a21	20 27 15	jsr $1527		jsr	errorHandler
.2a24					_isok:
.2a24	a9 01		lda #$01			lda 	#1
.2a26	20 e1 3f	jsr $3fe1			jsr 	RSLoadPosition 				; reload the position from offset 1.
.2a29	a9 04		lda #$04			lda 	#4 							; throw 4 bytes from stack.
.2a2b	20 c4 3f	jsr $3fc4			jsr 	RSFree
.2a2e	60		rts				rts
.2a2f					CommandGOTO:
.2a2f	20 88 38	jsr $3888			jsr 	EvaluateRootInteger 		; get GOTO line on stack top.
.2a32					GotoTOS:
.2a32	20 ac 33	jsr $33ac			jsr 	ResetCodeAddress 			; simple search.
.2a35					_GotoSearch:
.2a35	a0 00		ldy #$00			ldy 	#0 							; get offset
.2a37	b1 28		lda ($28),y			lda 	(codePtr),y
.2a39	f0 21		beq $2a5c			beq 	_GotoError 					; not found.
.2a3b	c8		iny				iny									; check LSB match
.2a3c	b1 28		lda ($28),y			lda 	(codePtr),y
.2a3e	d5 98		cmp $98,x			cmp 	esInt0,x
.2a40	d0 07		bne $2a49			bne 	_GotoNext
.2a42	c8		iny				iny
.2a43	b1 28		lda ($28),y			lda 	(codePtr),y
.2a45	d5 a0		cmp $a0,x			cmp 	esInt1,x
.2a47	f0 10		beq $2a59			beq 	_GotoFound
.2a49					_GotoNext:
.2a49	a0 00		ldy #$00			ldy 	#0 							; go next line
.2a4b	b1 28		lda ($28),y			lda 	(codePtr),y
.2a4d	18		clc				clc
.2a4e	65 28		adc $28				adc 	codePtr
.2a50	85 28		sta $28				sta 	codePtr
.2a52	90 e1		bcc $2a35			bcc 	_GotoSearch
.2a54	e6 29		inc $29				inc 	codePtr+1
.2a56	4c 35 2a	jmp $2a35			jmp 	_GotoSearch
.2a59					_GotoFound:
.2a59	a0 03		ldy #$03			ldy 	#3 							; continue from that line
.2a5b	60		rts				rts
.2a5c					_GotoError:
.2a5c	a2 0c		ldx #$0c			ldx 	#ErrorID_LineNumber
.2a5e	20 27 15	jsr $1527		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/commands/io/input.asm

=32					MaxInputSize = 32
.0da0					InputBuffer:
>0da0							.fill 	MaxInputSize+1
.2a61					Command_Input:
.2a61	b1 28		lda ($28),y			lda 	(codePtr),y 			; see what's next.
.2a63	c8		iny				iny
.2a64	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 				; ignore commas.
.2a66	f0 f9		beq $2a61			beq 	Command_Input
.2a68	88		dey				dey 							; undo consume
.2a69	c9 ca		cmp #$ca			cmp 	#TKW_COLON
.2a6b	f0 52		beq $2abf			beq 	_CIExit 				; : or EOL, exit
.2a6d	c9 80		cmp #$80			cmp 	#TOK_EOL
.2a6f	f0 4e		beq $2abf			beq 	_CIExit
.2a71	c9 40		cmp #$40			cmp 	#$40 					; variable ?
.2a73	90 12		bcc $2a87			bcc 	_CIVariable
.2a75	c9 85		cmp #$85			cmp 	#TOK_STR 				; if not quoted string syntax error.
.2a77	d0 41		bne $2aba			bne 	_CISyntax
.2a79	a2 00		ldx #$00			ldx 	#0
.2a7b	20 7f 38	jsr $387f			jsr 	EvaluateString 			; evaluate and print string
.2a7e	20 8e 2c	jsr $2c8e			jsr 	TOSToTemp0
.2a81	20 8e 2b	jsr $2b8e			jsr 	PrintString
.2a84	4c 61 2a	jmp $2a61			jmp 	Command_Input
.2a87					_CIVariable:
.2a87	a2 00		ldx #$00			ldx 	#0 						; evaluate a reference.
.2a89	20 c3 38	jsr $38c3			jsr 	EvaluateReference  		; this is where its going
.2a8c					_CIRetry:
.2a8c	a9 3f		lda #$3f			lda 	#"?"					; print prompt
.2a8e	a2 12		ldx #$12		ldx	#18
.2a90	20 05 15	jsr $1505		jsr	deviceHandler
.2a93	5a		phy				phy
.2a94	20 d3 2a	jsr $2ad3			jsr 	InputString 			; input a string (manually)
.2a97	a2 01		ldx #$01			ldx 	#1
.2a99	20 c0 2a	jsr $2ac0			jsr 	BufferToStackX 			; make stack,x ref input string.
.2a9c	a5 90		lda $90				lda 	esType 					; if target type numeric
.2a9e	29 40		and #$40			and 	#$40 					; then convert to number
.2aa0	d0 10		bne $2ab2			bne 	_CIWrite
.2aa2	a2 01		ldx #$01			ldx 	#1
.2aa4	20 8e 2c	jsr $2c8e			jsr 	TOSToTemp0 				; string address in temp0, goes here.
.2aa7	a9 0a		lda #$0a			lda 	#10
.2aa9	20 7c 3d	jsr $3d7c			jsr 	MInt32FromString 		; convert it back from a string.
.2aac	7a		ply				ply
.2aad	b0 03		bcs $2ab2			bcs 	_CIWrite 				; successfully converted.
.2aaf	18		clc				clc 							; default fail FP conversion
.2ab0	90 da		bcc $2a8c			bcc		_CIRetry				; failed, try again.
.2ab2					_CIWrite:
.2ab2	a2 00		ldx #$00			ldx 	#0
.2ab4	20 2e 2c	jsr $2c2e			jsr 	WriteValue
.2ab7	4c 61 2a	jmp $2a61			jmp 	Command_Input
.2aba					_CISyntax:
.2aba	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.2abc	20 27 15	jsr $1527		jsr	errorHandler
.2abf					_CIExit:
.2abf	60		rts				rts
.2ac0					BufferToStackX:
.2ac0	a9 a0		lda #$a0			lda 	#InputBuffer & $FF
.2ac2	95 98		sta $98,x			sta 	esInt0,x
.2ac4	a9 0d		lda #$0d			lda 	#InputBuffer >> 8
.2ac6	95 a0		sta $a0,x			sta 	esInt1,x
.2ac8	a9 00		lda #$00			lda 	#0
.2aca	95 a8		sta $a8,x			sta 	esInt2,x
.2acc	95 b0		sta $b0,x			sta 	esInt3,x
.2ace	a9 40		lda #$40			lda 	#$40
.2ad0	95 90		sta $90,x			sta 	esType,x
.2ad2	60		rts				rts
.2ad3					InputString:
.2ad3	a9 00		lda #$00			lda 	#0
.2ad5	8d a0 0d	sta $0da0			sta 	InputBuffer
.2ad8					_InputLoop:
.2ad8	a2 18		ldx #$18		ldx	#24
.2ada	20 05 15	jsr $1505		jsr	deviceHandler
.2add	a2 08		ldx #$08		ldx	#8
.2adf	20 05 15	jsr $1505		jsr	deviceHandler
.2ae2	c9 00		cmp #$00			cmp 	#0
.2ae4	f0 f2		beq $2ad8			beq 	_InputLoop
.2ae6	c9 08		cmp #$08			cmp 	#8
.2ae8	f0 19		beq $2b03			beq 	_InputBackspace
.2aea	c9 0d		cmp #$0d			cmp 	#13
.2aec	f0 21		beq $2b0f			beq 	_InputExit
.2aee	ae a0 0d	ldx $0da0			ldx 	InputBuffer
.2af1	e0 20		cpx #$20			cpx 	#MaxInputSize 			; too many characters
.2af3	f0 e3		beq $2ad8			beq 	_InputLoop
.2af5	9d a1 0d	sta $0da1,x			sta 	InputBuffer+1,x 		; write char
.2af8	ee a0 0d	inc $0da0			inc 	InputBuffer 			; advance count.
.2afb					_InputPrintLoop:
.2afb	a2 12		ldx #$12		ldx	#18
.2afd	20 05 15	jsr $1505		jsr	deviceHandler
.2b00	4c d8 2a	jmp $2ad8			jmp	 	_InputLoop
.2b03					_InputBackspace:
.2b03	ad a0 0d	lda $0da0			lda 	InputBuffer 			; at start
.2b06	f0 d0		beq $2ad8			beq 	_InputLoop
.2b08	ce a0 0d	dec $0da0			dec 	InputBuffer
.2b0b	a9 08		lda #$08			lda 	#8
.2b0d	d0 ec		bne $2afb			bne 	_InputPrintLoop
.2b0f					_InputExit:
.2b0f	a2 04		ldx #$04		ldx	#4
.2b11	20 05 15	jsr $1505		jsr	deviceHandler
.2b14	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/io/print.asm

.0dc1					lastPrintToken:
>0dc1							.fill 	1
.2b15					Command_Print:
.2b15	a9 00		lda #$00			lda 	#0 							; clear LPT to a non token
.2b17	8d c1 0d	sta $0dc1			sta 	lastPrintToken
.2b1a	88		dey				dey
.2b1b					_PrintLoopSkip:
.2b1b	c8		iny				iny
.2b1c					_PrintLoop:
.2b1c	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows
.2b1e	c9 80		cmp #$80			cmp 	#TOK_EOL  					; done if end of line or colon
.2b20	f0 5b		beq $2b7d			beq 	_PrintExit
.2b22	c9 ca		cmp #$ca			cmp 	#TKW_COLON
.2b24	f0 57		beq $2b7d			beq 	_PrintExit
.2b26	8d c1 0d	sta $0dc1			sta 	lastPrintToken 				; update Last print token, so we check ; and ,
.2b29	c9 cc		cmp #$cc			cmp 	#TKW_SEMICOLON 				; ignore semicolon
.2b2b	f0 ee		beq $2b1b			beq 	_PrintLoopSkip
.2b2d	c9 cd		cmp #$cd			cmp 	#TKW_QUOTE 					; ' is new line
.2b2f	f0 3c		beq $2b6d			beq	 	_PrintNewLine
.2b31	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; , is print tab
.2b33	f0 40		beq $2b75			beq 	_PrintTab
.2b35	20 69 38	jsr $3869			jsr 	EvaluateRoot 				; evaluate something at the root
.2b38	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.2b3a	85 2a		sta $2a				sta 	temp0
.2b3c	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.2b3e	85 2b		sta $2b				sta 	1+(temp0)
.2b40	a5 90		lda $90				lda 	esType 						; get type
.2b42	f0 15		beq $2b59			beq		_PrintInteger
.2b44	4a		lsr a				lsr 	a 							; check for floating point
.2b45	b0 08		bcs $2b4f			bcs 	_PrintFloat
.2b47					_PrintString:
.2b47	a2 00		ldx #$00			ldx 	#0 							; bottom string to temp0
.2b49	20 8e 2c	jsr $2c8e			jsr 	TOSToTemp0
.2b4c	4c 67 2b	jmp $2b67			jmp 	_PrintTemp0 				; print no leading space.
.2b4f					_PrintFloat:
.2b4f	a9 00		lda #$00			lda 	#0 							; stack level.
.2b51	a2 16		ldx #$16		ldx	#22
.2b53	20 aa 27	jsr $27aa		jsr	floatingpointHandler
.2b56	4c 60 2b	jmp $2b60			jmp 	_PrintSpaceTemp0
.2b59					_PrintInteger:
.2b59	a9 8a		lda #$8a			lda 	#10+$80 					; base 10 signed
.2b5b	a2 00		ldx #$00			ldx 	#0 							; bottom stack element
.2b5d	20 61 3e	jsr $3e61			jsr 	MInt32ToString				; convert to text
.2b60					_PrintSpaceTemp0:
.2b60	a9 20		lda #$20			lda 	#32
.2b62	a2 12		ldx #$12		ldx	#18
.2b64	20 05 15	jsr $1505		jsr	deviceHandler
.2b67					_PrintTemp0:
.2b67	20 8e 2b	jsr $2b8e			jsr 	PrintString
.2b6a	4c 1c 2b	jmp $2b1c			jmp 	_PrintLoop
.2b6d					_PrintNewLine:
.2b6d	a2 04		ldx #$04		ldx	#4
.2b6f	20 05 15	jsr $1505		jsr	deviceHandler
.2b72	4c 1b 2b	jmp $2b1b			jmp 	_PrintLoopSkip
.2b75					_PrintTab:
.2b75	a2 1a		ldx #$1a		ldx	#26
.2b77	20 05 15	jsr $1505		jsr	deviceHandler
.2b7a	4c 1b 2b	jmp $2b1b			jmp 	_PrintLoopSkip
.2b7d					_PrintExit:
.2b7d	ad c1 0d	lda $0dc1			lda		lastPrintToken 				; check last token
.2b80	c9 cc		cmp #$cc			cmp 	#TKW_SEMICOLON 				; if , or ; do not print NL
.2b82	f0 09		beq $2b8d			beq 	_PrintExit2
.2b84	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.2b86	f0 05		beq $2b8d			beq 	_PrintExit2
.2b88	a2 04		ldx #$04		ldx	#4
.2b8a	20 05 15	jsr $1505		jsr	deviceHandler
.2b8d					_PrintExit2:
.2b8d	60		rts				rts
.2b8e					PrintString:
.2b8e	da		phx				phx
.2b8f	5a		phy				phy
.2b90	a0 00		ldy #$00			ldy 	#0							; get length
.2b92	b1 2a		lda ($2a),y			lda 	(temp0),y
.2b94	aa		tax				tax 								; into X
.2b95	e0 00		cpx #$00	_PSLoop:cpx 	#0 							; finished ?
.2b97	f0 0e		beq $2ba7			beq 	_PSExit
.2b99	ca		dex				dex
.2b9a	da		phx				phx
.2b9b	c8		iny				iny
.2b9c	b1 2a		lda ($2a),y			lda 	(temp0),y
.2b9e	a2 12		ldx #$12		ldx	#18
.2ba0	20 05 15	jsr $1505		jsr	deviceHandler
.2ba3	fa		plx				plx
.2ba4	4c 95 2b	jmp $2b95			jmp 	_PSLoop
.2ba7					_PSExit:
.2ba7	7a		ply				ply
.2ba8	fa		plx				plx
.2ba9	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/io/text.asm

.2baa					Command_CLS:
.2baa	a2 02		ldx #$02		ldx	#2
.2bac	20 05 15	jsr $1505		jsr	deviceHandler
.2baf	60		rts				rts
.2bb0					Command_Ink:
.2bb0	a2 00		ldx #$00			ldx 	#0
.2bb2	20 92 38	jsr $3892			jsr 	EvaluateSmallInteger
.2bb5	a2 06		ldx #$06		ldx	#6
.2bb7	20 05 15	jsr $1505		jsr	deviceHandler
.2bba	60		rts				rts
.2bbb					Command_Paper:
.2bbb	a2 00		ldx #$00			ldx 	#0
.2bbd	20 92 38	jsr $3892			jsr 	EvaluateSmallInteger
.2bc0	a2 10		ldx #$10		ldx	#16
.2bc2	20 05 15	jsr $1505		jsr	deviceHandler
.2bc5	60		rts				rts
.2bc6					Command_Locate:
.2bc6	a2 00		ldx #$00			ldx 	#0
.2bc8	20 92 38	jsr $3892			jsr 	EvaluateSmallInteger
.2bcb	20 87 3f	jsr $3f87			jsr 	CheckComma
.2bce	e8		inx				inx
.2bcf	20 92 38	jsr $3892			jsr 	EvaluateSmallInteger
.2bd2	5a		phy				phy
.2bd3	a4 99		ldy $99				ldy 	esInt0+1
.2bd5	a5 98		lda $98				lda 	esInt0
.2bd7	a2 0e		ldx #$0e		ldx	#14
.2bd9	20 05 15	jsr $1505		jsr	deviceHandler
.2bdc	7a		ply				ply
.2bdd	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/io/vdu.asm

.2bde					Command_VDU:
.2bde	20 88 38	jsr $3888			jsr 	EvaluateRootInteger 			; get integer at root.
.2be1	a5 98		lda $98				lda 	esInt0
.2be3	a2 12		ldx #$12		ldx	#18
.2be5	20 05 15	jsr $1505		jsr	deviceHandler
.2be8					_CVNext:
.2be8	b1 28		lda ($28),y			lda 	(codePtr),y 					; what follows ?
.2bea	c8		iny				iny
.2beb	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 						; comma, do again
.2bed	f0 ef		beq $2bde			beq 	Command_VDU
.2bef	c9 cc		cmp #$cc			cmp 	#TKW_SEMICOLON 					; semicolon, print MSB
.2bf1	d0 0a		bne $2bfd			bne 	_CVExit
.2bf3	a5 a0		lda $a0				lda 	esInt1
.2bf5	a2 12		ldx #$12		ldx	#18
.2bf7	20 05 15	jsr $1505		jsr	deviceHandler
.2bfa	4c e8 2b	jmp $2be8			jmp 	_CVNext
.2bfd	88		dey		_CVExit:dey
.2bfe	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/link.asm


;******  Return to file: main/main.asm


;******  Processing file: main/commands/misc/assert.asm

.2bff					Command_Assert:
.2bff	20 88 38	jsr $3888			jsr 	EvaluateRootInteger 		; what is being asserted.
.2c02	20 30 3f	jsr $3f30			jsr 	MInt32Zero 					; is it true ?
.2c05	f0 01		beq $2c08			beq 	_CAError
.2c07	60		rts				rts
.2c08					_CAError:
.2c08	a2 04		ldx #$04			ldx 	#ErrorID_Assert
.2c0a	20 27 15	jsr $1527		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/commands/misc/dim.asm

.2c0d					Command_Dim:
.2c0d	a2 04		ldx #$04		ldx	#4
.2c0f	20 e7 4e	jsr $4ee7		jsr	variableHandler
.2c12	b1 28		lda ($28),y			lda 	(codePtr),y 				; see what follows.
.2c14	c8		iny				iny
.2c15	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; comma follows, go back and do next
.2c17	f0 f4		beq $2c0d			beq 	Command_Dim
.2c19	88		dey				dey 								; unpick get
.2c1a	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/misc/let.asm

.2c1b					CommandLet:
.2c1b	a2 00		ldx #$00			ldx 	#0  						; get address to write.
.2c1d	20 c3 38	jsr $38c3			jsr 	EvaluateReference
.2c20	a9 8d		lda #$8d			lda 	#TKW_EQUAL 					; check for equals
.2c22	20 6f 3f	jsr $3f6f			jsr 	CheckToken
.2c25	e8		inx				inx 								; do RHS
.2c26	20 6b 38	jsr $386b			jsr 	Evaluate 					; evaluate and dereference
.2c29	ca		dex				dex
.2c2a	20 2e 2c	jsr $2c2e			jsr 	WriteValue 					; write it out
.2c2d	60		rts				rts
.2c2e					WriteValue:
.2c2e	5a		phy				phy
.2c2f	20 8e 2c	jsr $2c8e			jsr 	TOSToTemp0 					; set temp0 to point to target address.
.2c32	b5 90		lda $90,x			lda 	esType,x 					; check the string flags match
.2c34	55 91		eor $91,x			eor 	esType+1,x 					; one string, one number causes an error.
.2c36	29 40		and #$40			and 	#$40
.2c38	d0 4f		bne $2c89			bne		_WVType
.2c3a	a0 01		ldy #$01			ldy 	#1 							; for string, copy 0 and 1.
.2c3c	b5 90		lda $90,x			lda 	esType,x 					; check for string assignment
.2c3e	29 40		and #$40			and 	#$40
.2c40	d0 1f		bne $2c61			bne 	_WVCopyString
.2c42	b5 90		lda $90,x			lda 	esType,x 					; check both are integer.
.2c44	15 91		ora $91,x			ora 	esType+1,x
.2c46	4a		lsr a				lsr 	a
.2c47	90 22		bcc $2c6b			bcc 	_WVCopyData4 				; copy 4 data bytes.
.2c49	b5 90		lda $90,x			lda 	esType,x
.2c4b	4a		lsr a				lsr 	a
.2c4c	90 3b		bcc $2c89			bcc 	_WVType
.2c4e	e8		inx				inx 								; force the value being written to be a float.
.2c4f	20 cf 34	jsr $34cf			jsr 	BPMakeFloat
.2c52	ca		dex				dex
.2c53	20 8e 2c	jsr $2c8e			jsr 	TOSToTemp0 					; set Temp0 to write address
.2c56	e8		inx				inx
.2c57	8a		txa				txa
.2c58	a2 22		ldx #$22		ldx	#34
.2c5a	20 aa 27	jsr $27aa		jsr	floatingpointHandler
.2c5d	aa		tax				tax
.2c5e	4c 87 2c	jmp $2c87			jmp 	_WVCopyExit
.2c61					_WVCopyString:
.2c61	8a		txa				txa
.2c62	a2 10		ldx #$10		ldx	#16
.2c64	20 a0 42	jsr $42a0		jsr	stringHandler
.2c67	aa		tax				tax
.2c68	4c 87 2c	jmp $2c87			jmp 	_WVCopyExit
.2c6b					_WVCopyData4:
.2c6b	b5 90		lda $90,x			lda 	esType,x 					; is the int ref a byte ref ?
.2c6d	29 20		and #$20			and 	#$20 						; (e.g. is bit 5 set)
.2c6f	d0 10		bne $2c81			bne 	_WVCopyData1
.2c71	a0 03		ldy #$03			ldy 	#3
.2c73	b5 b1		lda $b1,x			lda 	esInt3+1,x
.2c75	91 2a		sta ($2a),y			sta 	(temp0),y
.2c77	88		dey				dey
.2c78	b5 a9		lda $a9,x			lda 	esInt2+1,x
.2c7a	91 2a		sta ($2a),y			sta 	(temp0),y
.2c7c	88		dey				dey
.2c7d	b5 a1		lda $a1,x			lda 	esInt1+1,x
.2c7f	91 2a		sta ($2a),y			sta 	(temp0),y
.2c81					_WVCopyData1:
.2c81	a0 00		ldy #$00			ldy 	#0
.2c83	b5 99		lda $99,x			lda 	esInt0+1,x
.2c85	91 2a		sta ($2a),y			sta 	(temp0),y
.2c87					_WVCopyExit:
.2c87	7a		ply				ply
.2c88	60		rts				rts
.2c89					_WVType:
.2c89	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.2c8b	20 27 15	jsr $1527		jsr	errorHandler
.2c8e					TOSToTemp0:
.2c8e	b5 98		lda $98,x			lda 	esInt0,x
.2c90	85 2a		sta $2a				sta 	temp0
.2c92	b5 a0		lda $a0,x			lda 	esInt1,x
.2c94	85 2b		sta $2b				sta 	temp0+1
.2c96	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/misc/poke.asm

.2c97					Command_Poke:
.2c97	a9 01		lda #$01			lda 	#1
.2c99	d0 06		bne $2ca1			bne 	PokeGeneral
.2c9b					Command_Doke:
.2c9b	a9 02		lda #$02			lda 	#2
.2c9d	d0 02		bne $2ca1			bne 	PokeGeneral
.2c9f					Command_Loke:
.2c9f	a9 03		lda #$03			lda 	#3
.2ca1					PokeGeneral:
.2ca1	48		pha				pha 								; save id (PDL = 123)
.2ca2	20 88 38	jsr $3888			jsr 	EvaluateRootInteger 		; target address
.2ca5	20 87 3f	jsr $3f87			jsr	 	CheckComma
.2ca8	e8		inx				inx
.2ca9	20 8a 38	jsr $388a			jsr 	EvaluateInteger 			; what value to POKE ?
.2cac	ca		dex				dex
.2cad	20 8e 2c	jsr $2c8e			jsr 	TOSToTemp0 					; temp0 points to the target address
.2cb0	84 32		sty $32				sty 	tempShort 					; save Y
.2cb2	68		pla				pla 								; get copy type (1-3) and dispatch
.2cb3	aa		tax				tax
.2cb4	ca		dex				dex
.2cb5	f0 14		beq $2ccb			beq 	_Poke1
.2cb7	ca		dex				dex
.2cb8	f0 0b		beq $2cc5			beq 	_Poke2
.2cba	a0 03		ldy #$03			ldy 	#3							; put 4 bytes
.2cbc	a5 b1		lda $b1				lda 	esInt3+1
.2cbe	91 2a		sta ($2a),y			sta 	(temp0),y
.2cc0	88		dey				dey
.2cc1	a5 a9		lda $a9				lda 	esInt2+1
.2cc3	91 2a		sta ($2a),y			sta 	(temp0),y
.2cc5					_Poke2:
.2cc5	a0 01		ldy #$01			ldy 	#1
.2cc7	a5 a1		lda $a1				lda 	esInt1+1
.2cc9	91 2a		sta ($2a),y			sta 	(temp0),y
.2ccb					_Poke1:
.2ccb	a0 00		ldy #$00			ldy 	#0
.2ccd	a5 99		lda $99				lda 	esInt0+1
.2ccf	91 2a		sta ($2a),y			sta 	(temp0),y
.2cd1	a4 32		ldy $32				ldy 	tempShort 					; restore Y and exit
.2cd3	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/misc/rem.asm

.2cd4					Command_Rem:
.2cd4					Command_Rem2:
.2cd4	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows
.2cd6	c9 85		cmp #$85			cmp 	#TOK_STR 					; if it is a string then skip it.
.2cd8	d0 06		bne $2ce0			bne 	_CRNotString
.2cda	c8		iny				iny
.2cdb	98		tya				tya
.2cdc	38		sec				sec
.2cdd	71 28		adc ($28),y			adc 	(codePtr),y 				; get string size, add to Y, +1 for the length
.2cdf	a8		tay				tay
.2ce0					_CRNotString:
.2ce0	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/misc/stopend.asm

.2ce1					CommandStop:
.2ce1	a2 06		ldx #$06			ldx 	#ErrorID_Stop
.2ce3	20 27 15	jsr $1527		jsr	errorHandler
.2ce6					CommandEnd:
.2ce6	4c f0 3f	jmp $3ff0			jmp 	WarmStart
.2ce9					CommandXemu:
.2ce9	4c ff ff	jmp $ffff			jmp 	$FFFF 						; fudge to crash out of emulator
.2cec					AdvanceNextLine:
.2cec	a0 00		ldy #$00			ldy 	#0 							; get offset
.2cee	b1 28		lda ($28),y			lda 	(codePtr),y
.2cf0	18		clc				clc 								; add to codePtr
.2cf1	65 28		adc $28				adc 	codePtr
.2cf3	85 28		sta $28				sta 	codePtr
.2cf5	90 02		bcc $2cf9			bcc 	_ANLNoCarry
.2cf7	e6 29		inc $29				inc 	codePtr+1
.2cf9					_ANLNoCarry:
.2cf9	b1 28		lda ($28),y			lda 	(codePtr),y 				; if end of program (or was just stand alone.
.2cfb	f0 e9		beq $2ce6			beq 	CommandEnd 					; execute END
.2cfd	a0 03		ldy #$03			ldy 	#3 							; start of tokens on line.
.2cff	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/for.asm

.2d00					Command_FOR:
.2d00	a9 46		lda #$46			lda 	#markerFOR 					; allocate the space and set the marker
.2d02	a2 0b		ldx #$0b			ldx 	#11
.2d04	20 a2 3f	jsr $3fa2			jsr 	RSClaim
.2d07	20 1b 2c	jsr $2c1b			jsr 	CommandLET 					; do the same as LET FOR [a = 4]
.2d0a	a5 90		lda $90				lda 	esType 						; check type should be integer reference.
.2d0c	c9 80		cmp #$80			cmp 	#$80 						; we do not do FOR floats.
.2d0e	d0 48		bne $2d58			bne 	_CFType
.2d10	a9 ce		lda #$ce			lda 	#TKW_TO 					; check TO present.
.2d12	20 6f 3f	jsr $3f6f			jsr 	CheckToken
.2d15	a2 01		ldx #$01			ldx 	#1 							; keep the variable address in stack 0
.2d17	20 8a 38	jsr $388a			jsr 	EvaluateInteger				; get terminal value in stack 1
.2d1a	5a		phy				phy
.2d1b	a0 04		ldy #$04			ldy 	#4
.2d1d	a5 98		lda $98				lda		esInt0 						; copy the address of the index variable into 4 and 5
.2d1f	91 37		sta ($37),y			sta 	(rsPointer),y
.2d21	c8		iny				iny
.2d22	a5 a0		lda $a0				lda		esInt1
.2d24	91 37		sta ($37),y			sta 	(rsPointer),y
.2d26	c8		iny				iny
.2d27	a9 01		lda #$01			lda 	#1  						; the default step in 6, (-128 .. 127 only)
.2d29	91 37		sta ($37),y			sta 	(rsPointer),y
.2d2b	c8		iny				iny
.2d2c	a5 99		lda $99				lda		esInt0+1 					; terminal value in 7 to 11.
.2d2e	91 37		sta ($37),y			sta 	(rsPointer),y
.2d30	c8		iny				iny
.2d31	a5 a1		lda $a1				lda		esInt1+1
.2d33	91 37		sta ($37),y			sta 	(rsPointer),y
.2d35	c8		iny				iny
.2d36	a5 a9		lda $a9				lda		esInt2+1
.2d38	91 37		sta ($37),y			sta 	(rsPointer),y
.2d3a	c8		iny				iny
.2d3b	a5 b1		lda $b1				lda		esInt3+1
.2d3d	91 37		sta ($37),y			sta 	(rsPointer),y
.2d3f	7a		ply				ply
.2d40	b1 28		lda ($28),y			lda 	(codePtr),y 				; followed by STEP.
.2d42	c9 cf		cmp #$cf			cmp 	#TKW_STEP
.2d44	d0 0c		bne $2d52			bne 	_CFDone
.2d46	c8		iny				iny									; skip over step.
.2d47	20 8a 38	jsr $388a			jsr 	EvaluateInteger 			; get step
.2d4a	5a		phy				phy
.2d4b	b5 98		lda $98,x			lda 	esInt0,x 					; copy it into step (bit lazy here)
.2d4d	a0 06		ldy #$06			ldy 	#6
.2d4f	91 37		sta ($37),y			sta 	(rsPointer),y
.2d51	7a		ply				ply
.2d52					_CFDone:
.2d52	a9 01		lda #$01			lda 	#1
.2d54	20 ce 3f	jsr $3fce			jsr 	RSSavePosition 				; save position.
.2d57	60		rts				rts
.2d58					_CFType:
.2d58	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.2d5a	20 27 15	jsr $1527		jsr	errorHandler
.2d5d					Command_NEXT:
.2d5d	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.2d5f	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.2d61	c9 46		cmp #$46			cmp 	#markerFOR 						; does it match
.2d63	f0 05		beq $2d6a			beq 	_isok
.2d65	a2 10		ldx #$10			ldx 	#ErrorID_nextErr
.2d67	20 27 15	jsr $1527		jsr	errorHandler
.2d6a					_isok:
.2d6a	b1 28		lda ($28),y			lda 	(codePtr),y 				; is it NEXT <index>
.2d6c	c9 40		cmp #$40			cmp 	#$40 						; e.g. a variable follows 00-3F
.2d6e	b0 16		bcs $2d86			bcs 	_CNNoIndex
.2d70	a2 00		ldx #$00			ldx 	#0 							; start on stack
.2d72	20 c3 38	jsr $38c3			jsr 	EvaluateReference 			; this is the variable/parameter to localise.
.2d75	5a		phy				phy
.2d76	a0 04		ldy #$04			ldy 	#4 							; check same variable as that stored at +4,+5
.2d78	b1 37		lda ($37),y			lda 	(rsPointer),y
.2d7a	d5 98		cmp $98,x			cmp 	esInt0,x
.2d7c	d0 72		bne $2df0			bne 	_CNBadIndex
.2d7e	c8		iny				iny
.2d7f	b1 37		lda ($37),y			lda 	(rsPointer),y
.2d81	d5 a0		cmp $a0,x			cmp 	esInt1,x
.2d83	d0 6b		bne $2df0			bne 	_CNBadIndex
.2d85	7a		ply				ply
.2d86					_CNNoIndex:
.2d86	5a		phy				phy
.2d87	a0 04		ldy #$04			ldy 	#4 							; make temp0 point to the index
.2d89	b1 37		lda ($37),y			lda 	(rsPointer),y
.2d8b	85 2a		sta $2a				sta 	temp0
.2d8d	c8		iny				iny
.2d8e	b1 37		lda ($37),y			lda 	(rsPointer),y
.2d90	85 2b		sta $2b				sta 	temp0+1
.2d92	c8		iny				iny
.2d93	a2 00		ldx #$00			ldx 	#0 							; X is the sign extend part of the step.
.2d95	b1 37		lda ($37),y			lda 	(rsPointer),y 				; get the step.
.2d97	85 2f		sta $2f				sta 	temp2+1 					; save for later.
.2d99	10 01		bpl $2d9c			bpl 	_CNSignX
.2d9b	ca		dex				dex  								; X = $FF
.2d9c					_CNSignX:
.2d9c	18		clc				clc 								; add to the LSB
.2d9d	a0 00		ldy #$00			ldy 	#0
.2d9f	71 2a		adc ($2a),y			adc 	(temp0),y
.2da1	91 2a		sta ($2a),y			sta 	(temp0),y
.2da3					_CNPropogate:
.2da3	c8		iny				iny  								; add the sign extended in X to the rest.
.2da4	8a		txa				txa
.2da5	71 2a		adc ($2a),y			adc 	(temp0),y
.2da7	91 2a		sta ($2a),y			sta 	(temp0),y
.2da9	c8		iny				iny
.2daa	8a		txa				txa
.2dab	71 2a		adc ($2a),y			adc 	(temp0),y
.2dad	91 2a		sta ($2a),y			sta 	(temp0),y
.2daf	c8		iny				iny
.2db0	8a		txa				txa
.2db1	71 2a		adc ($2a),y			adc 	(temp0),y
.2db3	91 2a		sta ($2a),y			sta 	(temp0),y
.2db5	18		clc				clc 								; point temp1 to the terminal value stored in the stack.
.2db6	a5 37		lda $37				lda 	rsPointer
.2db8	69 07		adc #$07			adc 	#7
.2dba	85 2c		sta $2c				sta 	temp1
.2dbc	a9 00		lda #$00			lda 	#0
.2dbe	85 2e		sta $2e				sta 	temp2 						; clear temp2, which is the OR of all the subtractions.
.2dc0	a8		tay				tay 								; and clear the Y register again.
.2dc1	65 38		adc $38				adc 	rsPointer+1
.2dc3	85 2d		sta $2d				sta 	temp1+1
.2dc5	38		sec				sec 								; calculate current - limit oring interim values.
.2dc6	20 fc 2d	jsr $2dfc			jsr 	_CNCompare 					; each of these does a byte.
.2dc9	20 fc 2d	jsr $2dfc			jsr 	_CNCompare 					; we calculate the OR of all these subtractions.
.2dcc	20 fc 2d	jsr $2dfc			jsr 	_CNCompare 					; and the carry of the subtraction.
.2dcf	20 fc 2d	jsr $2dfc			jsr 	_CNCompare
.2dd2	50 02		bvc $2dd6			bvc 	_CNNoOverflow 				; converts to a signed comparison on the sign bit.
.2dd4	49 80		eor #$80			eor 	#$80
.2dd6					_CNNoOverflow:
.2dd6	a4 2f		ldy $2f				ldy 	temp2+1						; get step back
.2dd8	30 1b		bmi $2df5			bmi 	_CNCheckDownto
.2dda	c9 00		cmp #$00			cmp 	#0
.2ddc	30 0b		bmi $2de9			bmi 	_CNLoopRound 				; loop round if < =
.2dde	a5 2e		lda $2e				lda 	temp2
.2de0	f0 07		beq $2de9			beq 	_CNLoopRound
.2de2					_CNLoopExit:
.2de2	7a		ply				ply
.2de3	a9 0b		lda #$0b			lda 	#11
.2de5	20 c4 3f	jsr $3fc4			jsr 	RSFree
.2de8	60		rts				rts
.2de9					_CNLoopRound:
.2de9	7a		ply				ply
.2dea	a9 01		lda #$01			lda 	#1
.2dec	20 e1 3f	jsr $3fe1			jsr 	RSLoadPosition				; go back to the loop top
.2def	60		rts				rts
.2df0					_CNBadIndex:
.2df0	a2 13		ldx #$13			ldx 	#ErrorID_BadIndex
.2df2	20 27 15	jsr $1527		jsr	errorHandler
.2df5					_CNCheckDownto:
.2df5	c9 00		cmp #$00			cmp 	#0
.2df7	10 f0		bpl $2de9			bpl 	_CNLoopRound
.2df9	4c e2 2d	jmp $2de2			jmp 	_CNLoopExit
.2dfc					_CNCompare:
.2dfc	b1 2a		lda ($2a),y			lda 	(temp0),y 					; do the subtraction - compare don't care about answer
.2dfe	f1 2c		sbc ($2c),y			sbc 	(temp1),y
.2e00	05 2e		ora $2e				ora 	temp2 						; Or into temp2 (does not affect carry)
.2e02	85 2e		sta $2e				sta 	temp2
.2e04	c8		iny				iny
.2e05	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/if.asm

.2e06					CommandIf:
.2e06	20 88 38	jsr $3888			jsr 	EvaluateRootInteger 		; get what's being tested.
.2e09	b1 28		lda ($28),y			lda 	(codePtr),y 				; check for IF .. THEN or IF .. GOTO which are single lines.
.2e0b	c9 91		cmp #$91			cmp 	#TKW_GOTO
.2e0d	f0 04		beq $2e13			beq 	_IfSimple
.2e0f	c9 a1		cmp #$a1			cmp 	#TKW_THEN
.2e11	d0 1b		bne $2e2e			bne 	_IfComplex
.2e13					_IfSimple:
.2e13	20 30 3f	jsr $3f30			jsr 	MInt32Zero					; check if TOS zero
.2e16	f0 10		beq $2e28			beq 	_IfEOL 						; go to next line.
.2e18	b1 28		lda ($28),y			lda 	(codePtr),y 				; get and skip token.
.2e1a	c8		iny				iny
.2e1b	c9 91		cmp #$91			cmp 	#TKW_GOTO 					; was it if GOTO ?
.2e1d	f0 0c		beq $2e2b			beq 	_IfGoto 					; do the Goto code
.2e1f	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows the THEN ?
.2e21	29 c0		and #$c0			and 	#$C0 						; check $40-$7F
.2e23	c9 40		cmp #$40			cmp 	#$40 						; e.g. number IF x = 0 THEN 170
.2e25	f0 04		beq $2e2b			beq 	_IfGoto
.2e27	60		rts				rts 								; else continue on this line.
.2e28					_IfEOL:
.2e28	4c ec 2c	jmp $2cec			jmp 	AdvanceNextLine 			; go to next line
.2e2b					_IfGoto:
.2e2b	4c 2f 2a	jmp $2a2f			jmp 	CommandGoto
.2e2e					_IfComplex:
.2e2e	20 30 3f	jsr $3f30			jsr 	MInt32Zero 					; is it true ?
.2e31	f0 01		beq $2e34			beq 	_IFSkip 					; if non-zero then skip to ELSE/ENDIF
.2e33	60		rts				rts 								; else continue.
.2e34					_IFSkip:
.2e34	a9 d6		lda #$d6			lda	 	#TKW_ELSE 					; test failed, go to ELSE or ENDIF whichever comes first.
.2e36	a2 a2		ldx #$a2			ldx 	#TKW_ENDIF
.2e38	4c c3 30	jmp $30c3			jmp		ScanForward
.2e3b					Command_ELSE:
.2e3b	a2 a2		ldx #$a2			ldx 	#TKW_ENDIF
.2e3d	8a		txa				txa
.2e3e	4c c3 30	jmp $30c3			jmp		ScanForward
.2e41					Command_ENDIF:
.2e41	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/local.asm

.0dc2					storeSize:
>0dc2							.fill 	1
.2e42					CommandLocal:
.2e42	a2 00		ldx #$00			ldx 	#0
.2e44	20 60 2e	jsr $2e60			jsr 	LocaliseVariable 			; localise one.
.2e47					_CLCheckNext:
.2e47	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows ?
.2e49	c8		iny				iny
.2e4a	c9 8d		cmp #$8d			cmp 	#TKW_EQUAL 					; something local "x = 2" ?
.2e4c	f0 06		beq $2e54			beq 	_CLAssignment
.2e4e	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; comma try again.
.2e50	f0 f0		beq $2e42			beq 	CommandLocal
.2e52	88		dey				dey
.2e53	60		rts				rts
.2e54					_CLAssignment:
.2e54	a2 01		ldx #$01			ldx 	#1
.2e56	20 6b 38	jsr $386b			jsr 	Evaluate 					; evaluate RHS
.2e59	ca		dex				dex
.2e5a	20 2e 2c	jsr $2c2e			jsr 	WriteValue
.2e5d	4c 47 2e	jmp $2e47			jmp 	_CLCheckNext
.2e60					LocaliseVariable:
.2e60	b1 28		lda ($28),y			lda 	(codePtr),y 				; check it's a variable.
.2e62	c9 40		cmp #$40			cmp 	#$40
.2e64	b0 63		bcs $2ec9			bcs 	_LVSyntax
.2e66	8a		txa				txa 								; get the address of that variable.
.2e67	a2 02		ldx #$02		ldx	#2
.2e69	20 e7 4e	jsr $4ee7		jsr	variableHandler
.2e6c	aa		tax				tax
.2e6d	da		phx				phx
.2e6e	5a		phy				phy
.2e6f	20 8e 2c	jsr $2c8e			jsr 	TOSToTemp0 					; the address of the variable is now in temp0.
.2e72	b5 90		lda $90,x			lda 	esType,x 					; get the type
.2e74	0a		asl a				asl 	a
.2e75	10 16		bpl $2e8d			bpl 	_LVPushNumber
.2e77	a0 00		ldy #$00			ldy 	#0 							; put address of data in temp1
.2e79	b1 2a		lda ($2a),y			lda 	(temp0),y
.2e7b	c8		iny				iny
.2e7c	85 2c		sta $2c				sta 	temp1
.2e7e	b1 2a		lda ($2a),y			lda 	(temp0),y
.2e80	85 2d		sta $2d				sta 	temp1+1
.2e82	a0 00		ldy #$00			ldy 	#0 	 						; get length
.2e84	b1 2c		lda ($2c),y			lda 	(temp1),y
.2e86	aa		tax				tax 								; into X
.2e87	e8		inx				inx 								; +1 for length.
.2e88	a9 24		lda #$24			lda 	#markerString
.2e8a	4c a2 2e	jmp $2ea2			jmp 	_LVWriteFrame
.2e8d					_LVPushNumber:
.2e8d	a5 2a		lda $2a				lda 	temp0 						; storage address and data source are the same
.2e8f	85 2c		sta $2c				sta 	temp1
.2e91	a5 2b		lda $2b				lda 	temp0+1
.2e93	85 2d		sta $2d				sta 	temp1+1
.2e95	b5 90		lda $90,x			lda 	esType,x 					; put float flag into carry.
.2e97	4a		lsr a				lsr 	a
.2e98	a9 25		lda #$25			lda 	#markerInt 					; get marker and size.
.2e9a	a2 04		ldx #$04			ldx 	#VarISize
.2e9c	90 04		bcc $2ea2			bcc 	_LVIsInteger
.2e9e	a9 23		lda #$23			lda 	#markerFloat
.2ea0	a2 06		ldx #$06			ldx 	#VarFSize
.2ea2					_LVIsInteger:
.2ea2					_LVWriteFrame:
.2ea2	8e c2 0d	stx $0dc2			stx 	storeSize 					; number of bytes to copy from (temp0)
.2ea5	e8		inx				inx 								; allocate 3 bytes, 2 for the address, 1 for the marker.
.2ea6	e8		inx				inx
.2ea7	e8		inx				inx
.2ea8	20 a2 3f	jsr $3fa2			jsr 	RSClaim 					; create the stack frame.
.2eab	a5 2a		lda $2a				lda 	temp0 						; copy the target address to slots 1 & 2
.2ead	a0 01		ldy #$01			ldy 	#1
.2eaf	91 37		sta ($37),y			sta 	(rsPointer),y
.2eb1	c8		iny				iny
.2eb2	a5 2b		lda $2b				lda 	temp0+1
.2eb4	91 37		sta ($37),y			sta 	(rsPointer),y
.2eb6	a0 00		ldy #$00			ldy 	#0
.2eb8					_LVCopyData:
.2eb8	b1 2c		lda ($2c),y			lda 	(temp1),y 					; get data from source, temp1
.2eba	c8		iny				iny 								; write allowing for the header bit.
.2ebb	c8		iny				iny
.2ebc	c8		iny				iny
.2ebd	91 37		sta ($37),y			sta 	(rsPointer),y
.2ebf	88		dey				dey
.2ec0	88		dey				dey
.2ec1	ce c2 0d	dec $0dc2			dec 	storeSize 					; do it storesize times
.2ec4	d0 f2		bne $2eb8			bne 	_LVCopyData
.2ec6	7a		ply				ply
.2ec7	fa		plx				plx
.2ec8	60		rts				rts
.2ec9					_LVSyntax:
.2ec9	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.2ecb	20 27 15	jsr $1527		jsr	errorHandler
.2ece					RestoreLocals:
.2ece	a2 00		ldx #$00			ldx 	#0
.2ed0	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.2ed2	c9 40		cmp #$40			cmp	 	#64
.2ed4	90 01		bcc $2ed7			bcc 	_RLocal
.2ed6	60		rts				rts
.2ed7					_RLocal:
.2ed7	da		phx				phx
.2ed8	5a		phy				phy
.2ed9	a0 01		ldy #$01			ldy 	#1 							; copy target address to temp0
.2edb	b1 37		lda ($37),y			lda 	(rsPointer),y
.2edd	85 2a		sta $2a				sta 	temp0
.2edf	c8		iny				iny
.2ee0	b1 37		lda ($37),y			lda 	(rsPointer),y
.2ee2	85 2b		sta $2b				sta 	temp0+1
.2ee4	a0 00		ldy #$00			ldy 	#0 							; get type back.
.2ee6	b1 37		lda ($37),y			lda 	(rsPointer),y
.2ee8	c9 24		cmp #$24			cmp 	#markerString 				; string is ... different :)
.2eea	f0 25		beq $2f11			beq 	_RString
.2eec	a2 04		ldx #$04			ldx		#VARISize 					; size integer
.2eee	c9 25		cmp #$25			cmp 	#markerInt
.2ef0	f0 02		beq $2ef4			beq 	_RIsInteger
.2ef2	a2 06		ldx #$06			ldx 	#VARFSize 					; size float
.2ef4					_RIsInteger:
.2ef4	da		phx				phx
.2ef5	a0 03		ldy #$03			ldy 	#3							; start size to copy back from pointer.
.2ef7					_RCopyBack:
.2ef7	b1 37		lda ($37),y			lda 	(rsPointer),y
.2ef9	88		dey				dey
.2efa	88		dey				dey
.2efb	88		dey				dey
.2efc	91 2a		sta ($2a),y			sta 	(temp0),y
.2efe	c8		iny				iny
.2eff	c8		iny				iny
.2f00	c8		iny				iny
.2f01	c8		iny				iny
.2f02	ca		dex				dex
.2f03	d0 f2		bne $2ef7			bne 	_RCopyBack
.2f05	68		pla				pla 								; get size add 3
.2f06	18		clc				clc
.2f07	69 03		adc #$03			adc 	#3 							; (2 for address one for marker)
.2f09					_RRestoreAAndLoop:
.2f09	20 c4 3f	jsr $3fc4			jsr 	RSFree
.2f0c	7a		ply				ply
.2f0d	fa		plx				plx
.2f0e	4c ce 2e	jmp $2ece			jmp 	RestoreLocals 				; go see if there are any more locals.
.2f11					_RString:
.2f11	a2 00		ldx #$00			ldx 	#0
.2f13	a0 01		ldy #$01			ldy 	#1 							; set up for a string write.
.2f15	b1 37		lda ($37),y			lda 	(rsPointer),y
.2f17	95 98		sta $98,x			sta 	esInt0,x
.2f19	c8		iny				iny
.2f1a	b1 37		lda ($37),y			lda 	(rsPointer),y
.2f1c	95 a0		sta $a0,x			sta 	esInt1,x
.2f1e	18		clc				clc
.2f1f	a5 37		lda $37				lda 	rsPointer
.2f21	69 03		adc #$03			adc 	#3
.2f23	95 99		sta $99,x			sta 	esInt0+1,x
.2f25	a5 38		lda $38				lda 	rsPointer+1
.2f27	69 00		adc #$00			adc 	#0
.2f29	95 a1		sta $a1,x			sta 	esInt1+1,x
.2f2b	8a		txa				txa
.2f2c	a2 10		ldx #$10		ldx	#16
.2f2e	20 a0 42	jsr $42a0		jsr	stringHandler
.2f31	a0 03		ldy #$03			ldy 	#3 							; get string length
.2f33	b1 37		lda ($37),y			lda 	(rsPointer),y
.2f35	18		clc				clc
.2f36	69 04		adc #$04			adc 	#4 							; add 4 (pointer, marker, length) to restore.
.2f38	4c 09 2f	jmp $2f09			jmp 	_RRestoreAAndLoop

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/proc.asm

.0dc3					paramCount:
>0dc3							.fill 	1
.2f3b					CallProc:
.2f3b	20 c3 2f	jsr $2fc3			jsr 	FindProcedure 				; find procedure, put in temp0. A contains name length.
.2f3e	48		pha				pha 								; save length on stack
.2f3f	85 32		sta $32				sta 	tempShort 					; save length in tempShort
.2f41	a5 2b		lda $2b				lda 	temp0+1 					; save procedure target on stack.
.2f43	48		pha				pha
.2f44	a5 2a		lda $2a				lda 	temp0
.2f46	48		pha				pha
.2f47	98		tya				tya 								; calculate Y + length
.2f48	18		clc				clc
.2f49	65 32		adc $32				adc 	tempShort
.2f4b	a8		tay				tay
.2f4c	a2 00		ldx #$00			ldx 	#0 							; where the first parameter goes - 1
.2f4e					_CallProcEvalParams:
.2f4e	e8		inx				inx
.2f4f	b1 28		lda ($28),y			lda 	(codePtr),y 				; do we have ) , e.g. the end of the parameters ?
.2f51	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.2f53	f0 0b		beq $2f60			beq 	_CPDoneParams
.2f55	20 6b 38	jsr $386b			jsr 	Evaluate 					; evaluate a parameter
.2f58	b1 28		lda ($28),y			lda 	(codePtr),Y 				; get what's next, preconsume
.2f5a	c8		iny				iny
.2f5b	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; if comma, go get another parameter
.2f5d	f0 ef		beq $2f4e			beq 	_CallProcEvalParams
.2f5f	88		dey				dey 								; undo consumption.
.2f60					_CPDoneParams:
.2f60	20 7a 3f	jsr $3f7a			jsr 	CheckRightParen 			; check closing parenthesis.
.2f63	8e c3 0d	stx $0dc3			stx 	paramCount 					; store parameter count+1
.2f66	a2 04		ldx #$04			ldx 	#4							; make space on stack
.2f68	a9 50		lda #$50			lda 	#markerPROC
.2f6a	20 a2 3f	jsr $3fa2			jsr 	RSClaim
.2f6d	a9 01		lda #$01			lda 	#1 							; store return address.
.2f6f	20 ce 3f	jsr $3fce			jsr 	RSSavePosition
.2f72	68		pla				pla 								; get the new code Ptr
.2f73	85 28		sta $28				sta 	codePtr
.2f75	68		pla				pla
.2f76	85 29		sta $29				sta 	codePtr+1
.2f78	68		pla				pla 								; length of name + 4 is the param start.
.2f79	18		clc				clc
.2f7a	69 04		adc #$04			adc 	#4
.2f7c	a8		tay				tay
.2f7d	a2 ff		ldx #$ff			ldx 	#$FF
.2f7f					_CPLoadParameters:
.2f7f	e8		inx				inx 								; point to where the address should be loaded.
.2f80	ec c3 0d	cpx $0dc3			cpx 	paramCount 					; too many parameters in definition ?
.2f83	f0 1e		beq $2fa3			beq 	_CPParamError
.2f85	b1 28		lda ($28),y			lda 	(codePtr),y					; what follows
.2f87	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN 				; is it the right bracket
.2f89	f0 0e		beq $2f99			beq 	_CPParamComplete 			; done all the parameters, perhaps.
.2f8b	20 60 2e	jsr $2e60			jsr 	LocaliseVariable 			; make following variable local, ref in tos,x
.2f8e	20 2e 2c	jsr $2c2e			jsr 	WriteValue 					; copy the evaluated parameter into there.
.2f91	b1 28		lda ($28),y			lda 	(codePtr),y 				; followed by a comma ?
.2f93	c8		iny				iny
.2f94	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.2f96	f0 e7		beq $2f7f			beq 	_CPLoadParameters
.2f98	88		dey				dey 								; no, unconsume and check for )
.2f99					_CPParamComplete:
.2f99	20 7a 3f	jsr $3f7a			jsr 	CheckRightParen 			; check )
.2f9c	e8		inx				inx 								; check right number of parameters have been consumed
.2f9d	ec c3 0d	cpx $0dc3			cpx 	paramCount
.2fa0	d0 01		bne $2fa3			bne 	_CPParamError
.2fa2	60		rts				rts
.2fa3					_CPParamError:
.2fa3	a2 18		ldx #$18			ldx 	#ErrorID_Params
.2fa5	20 27 15	jsr $1527		jsr	errorHandler
.2fa8					ReturnProc:
.2fa8	20 ce 2e	jsr $2ece			jsr 	RestoreLocals 				; get the locals back.
.2fab	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.2fad	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.2faf	c9 50		cmp #$50			cmp 	#markerPROC 						; does it match
.2fb1	f0 05		beq $2fb8			beq 	_isok
.2fb3	a2 12		ldx #$12			ldx 	#ErrorID_endProcErr
.2fb5	20 27 15	jsr $1527		jsr	errorHandler
.2fb8					_isok:
.2fb8	a9 01		lda #$01			lda 	#1
.2fba	20 e1 3f	jsr $3fe1			jsr 	RSLoadPosition 				; reload the position from offset 1.
.2fbd	a9 04		lda #$04			lda 	#4 							; throw 4 bytes from stack.
.2fbf	20 c4 3f	jsr $3fc4			jsr 	RSFree
.2fc2	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/proctable.asm

.0dc4					procList:
>0dc4							.fill 	2		 					; terminated by name high being zero.
.0dc6					yInLine:
>0dc6							.fill 	1
.2fc3					FindProcedure:
.2fc3	8c c6 0d	sty $0dc6			sty 	yInLine 					; save current position.
.2fc6	20 7d 30	jsr $307d			jsr 	CalculateProcedureHash		; calculate the hash of the procedure.
.2fc9	85 2c		sta $2c				sta 	temp1
.2fcb	ad c4 0d	lda $0dc4			lda		procList 					; put procList address in temp2
.2fce	85 2e		sta $2e				sta 	temp2
.2fd0	ad c5 0d	lda $0dc5			lda 	procList+1
.2fd3	85 2f		sta $2f				sta 	temp2+1
.2fd5	a0 00		ldy #$00			ldy 	#0 							; position in this table.
.2fd7					_FPLoop:
.2fd7	b1 2e		lda ($2e),y			lda 	(temp2),y
.2fd9	f0 4d		beq $3028			beq 	_FPError 					; if so, we don't know this procedure.
.2fdb	85 2b		sta $2b				sta 	temp0+1 					; copy MSB/LSB to temp0 as we go.
.2fdd	c8		iny				iny
.2fde	b1 2e		lda ($2e),y			lda 	(temp2),y
.2fe0	85 2a		sta $2a				sta 	temp0
.2fe2	c8		iny				iny
.2fe3	b1 2e		lda ($2e),y			lda 	(temp2),y					; check the procedure hash.
.2fe5	c5 2c		cmp $2c				cmp 	temp1
.2fe7	d0 29		bne $3012			bne 	_FPNext 					; hash is different, go to next.
.2fe9	38		sec				sec
.2fea	ad c6 0d	lda $0dc6			lda 	yInLine 					; position in line must be at least 4
.2fed	e9 04		sbc #$04			sbc 	#4
.2fef	18		clc				clc
.2ff0	65 28		adc $28				adc 	codePtr
.2ff2	85 30		sta $30				sta 	temp3
.2ff4	a5 29		lda $29				lda 	codePtr+1
.2ff6	69 00		adc #$00			adc 	#0
.2ff8	85 31		sta $31				sta 	temp3+1
.2ffa	5a		phy				phy
.2ffb	a0 04		ldy #$04			ldy 	#4
.2ffd					_FPCName:
.2ffd	b1 30		lda ($30),y			lda 	(temp3),y 					; check the same
.2fff	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.3001	d0 0e		bne $3011			bne 	_FPpulYNext 				; if different go to next one.
.3003	c8		iny				iny
.3004	c9 3a		cmp #$3a			cmp 	#$3A
.3006	90 f5		bcc $2ffd			bcc 	_FPCName 					; compare the whole lot....
.3008	68		pla				pla 								; throw away the saved Y
.3009	98		tya				tya 								; length of name is Y-4
.300a	38		sec				sec
.300b	e9 04		sbc #$04			sbc 	#4
.300d	ac c6 0d	ldy $0dc6			ldy 	yInLine  					; get the original Y back
.3010	60		rts				rts
.3011					_FPpulYNext:
.3011	7a		ply				ply
.3012					_FPNext:
.3012	c8		iny				iny 								; next procedure record.
.3013	10 c2		bpl $2fd7			bpl 	_FPLoop 					; if done 128 already ... e.g. Y -ve
.3015	98		tya				tya 								; subtract 128 from Y
.3016	38		sec				sec
.3017	e9 80		sbc #$80			sbc 	#128
.3019	a8		tay				tay
.301a	18		clc				clc 								; add 128 to temp2, so we can have more than
.301b	a5 2e		lda $2e				lda 	temp2 						; 255/3 = 85 procedures
.301d	69 80		adc #$80			adc 	#128
.301f	85 2e		sta $2e				sta 	temp2
.3021	90 b4		bcc $2fd7			bcc 	_FPLoop
.3023	e6 2f		inc $2f				inc 	temp2+1
.3025	4c d7 2f	jmp $2fd7			jmp 	_FPLoop
.3028					_FPError:
.3028	a2 17		ldx #$17			ldx 	#ErrorID_NoProc
.302a	20 27 15	jsr $1527		jsr	errorHandler
.302d					ScanProc:
.302d	5a		phy				phy
.302e	a5 35		lda $35				lda 	lowMemory 					; copy the start of the procList, at low memory
.3030	8d c4 0d	sta $0dc4			sta 	procList
.3033	a5 36		lda $36				lda 	lowMemory+1
.3035	8d c5 0d	sta $0dc5			sta 	procList+1
.3038	20 ac 33	jsr $33ac			jsr 	ResetCodeAddress 			; back to the start.
.303b					_ScanLoop:
.303b	a0 00		ldy #$00			ldy 	#0 							; check reached program end
.303d	b1 28		lda ($28),y			lda 	(codePtr),y
.303f	f0 2a		beq $306b			beq 	_ScanExit
.3041	a0 03		ldy #$03			ldy 	#3							; get first token
.3043	b1 28		lda ($28),y			lda 	(codePtr),y
.3045	c9 9d		cmp #$9d			cmp 	#TKW_DEFPROC				; skip to next if not DEFPROC
.3047	d0 12		bne $305b			bne 	_ScanNext
.3049	a5 29		lda $29				lda 	codePtr+1 					; write high and low address of this line.
.304b	20 72 30	jsr $3072			jsr 	_ScanWrite
.304e	a5 28		lda $28				lda 	codePtr
.3050	20 72 30	jsr $3072			jsr 	_ScanWrite
.3053	a0 04		ldy #$04			ldy 	#4 							; start of name part
.3055	20 7d 30	jsr $307d			jsr 	CalculateProcedureHash 		; calculate procedure hash
.3058	20 72 30	jsr $3072			jsr 	_ScanWrite					; and write that
.305b					_ScanNext:
.305b	18		clc				clc
.305c	a0 00		ldy #$00			ldy 	#0
.305e	b1 28		lda ($28),y			lda 	(codePtr),y
.3060	65 28		adc $28				adc 	codePtr
.3062	85 28		sta $28				sta 	codePtr
.3064	90 d5		bcc $303b			bcc 	_ScanLoop
.3066	e6 29		inc $29				inc 	codePtr+1
.3068	4c 3b 30	jmp $303b			jmp 	_ScanLoop
.306b					_ScanExit:
.306b	a9 00		lda #$00			lda 	#0 							; write ending zero.
.306d	20 72 30	jsr $3072			jsr 	_ScanWrite
.3070	7a		ply				ply
.3071	60		rts				rts
.3072					_ScanWrite:
.3072	a0 00		ldy #$00			ldy 	#0
.3074	91 35		sta ($35),y			sta 	(lowMemory),y
.3076	e6 35		inc $35				inc 	lowMemory
.3078	d0 02		bne $307c			bne 	_SWNoCarry
.307a	e6 36		inc $36				inc 	lowMemory+1
.307c					_SWNoCarry:
.307c	60		rts				rts
.307d					CalculateProcedureHash:
.307d	a9 00		lda #$00			lda 	#0 							; clear hash.
.307f	85 2a		sta $2a				sta 	temp0
.3081					_CPHLoop:
.3081	18		clc				clc 								; add character and rotate and add carry back in
.3082	b1 28		lda ($28),y			lda 	(codePtr),y
.3084	65 2a		adc $2a				adc 	temp0
.3086	6a		ror a				ror 	a
.3087	69 0d		adc #$0d			adc 	#13 						; primes usually good for this sort of thing.
.3089	85 2a		sta $2a				sta 	temp0 						; (down with this sort of thing)
.308b	b1 28		lda ($28),y			lda 	(codePtr),y
.308d	c8		iny				iny 								; advance incase we go round again.
.308e	c9 3a		cmp #$3a			cmp 	#$3A
.3090	90 ef		bcc $3081			bcc 	_CPHLoop
.3092	a5 2a		lda $2a				lda 	temp0
.3094	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/repeat.asm

.3095					Command_Repeat:
.3095	a2 04		ldx #$04			ldx 	#4 							; allocate 4 bytes on stack for REPEAT
.3097	a9 52		lda #$52			lda 	#markerREPEAT 				; repeat marker allocate 4 bytes
.3099	20 a2 3f	jsr $3fa2			jsr 	RSClaim
.309c	a9 01		lda #$01			lda 	#1 							; save position at offset 1.
.309e	20 ce 3f	jsr $3fce			jsr 	RSSavePosition
.30a1	60		rts				rts
.30a2					Command_Until:
.30a2	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.30a4	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.30a6	c9 52		cmp #$52			cmp 	#markerREPEAT 						; does it match
.30a8	f0 05		beq $30af			beq 	_isok
.30aa	a2 0f		ldx #$0f			ldx 	#ErrorID_untilErr
.30ac	20 27 15	jsr $1527		jsr	errorHandler
.30af					_isok:
.30af	20 88 38	jsr $3888			jsr 	EvaluateRootInteger 		; at the bottom.
.30b2	20 30 3f	jsr $3f30			jsr 	MInt32Zero					; check if TOS zero
.30b5	d0 06		bne $30bd			bne 	_CUExit
.30b7	a9 01		lda #$01			lda 	#1
.30b9	20 e1 3f	jsr $3fe1			jsr 	RSLoadPosition 				; reload the position from offset 1.
.30bc	60		rts				rts
.30bd					_CUExit:
.30bd	a9 04		lda #$04			lda 	#4 							; throw 4 bytes from stack.
.30bf	20 c4 3f	jsr $3fc4			jsr 	RSFree
.30c2	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/scanner.asm

.30c3					ScanForward:
.30c3	85 2c		sta $2c				sta 	temp1 						; save tokens to search in temp1/temp1+1
.30c5	86 2d		stx $2d				stx 	temp1+1
.30c7	a9 00		lda #$00			lda 	#0 							; temp2 counts structure levels.
.30c9	85 2e		sta $2e				sta 	temp2
.30cb	b1 28		lda ($28),y	_SFLoop:lda 	(codePtr),y 				; look at the next token.
.30cd	c8		iny				iny
.30ce	a6 2e		ldx $2e				ldx 	temp2 						; check structure levels are zero.
.30d0	d0 08		bne $30da			bne 	_SFNoCheck 					; if so, check token against entered values.
.30d2	c5 2c		cmp $2c				cmp 	temp1 						; if either matches, we've reached the token
.30d4	f0 24		beq $30fa			beq 	_SFExit 					; at the same strcture depth.
.30d6	c5 2d		cmp $2d				cmp 	temp1+1
.30d8	f0 20		beq $30fa			beq 	_SFExit
.30da					_SFNoCheck:
.30da	c9 80		cmp #$80			cmp 	#$80 						; if it is 00-7F (variable/number) just skip it.
.30dc	90 ed		bcc $30cb			bcc 	_SFLoop
.30de	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; $80-$85 is various specials.
.30e0	90 19		bcc $30fb			bcc 	_SFSpecials
.30e2	c9 99		cmp #$99			cmp 	#TOK_STRUCTST 				; if < structure start then continue
.30e4	90 e5		bcc $30cb			bcc 	_SFLoop
.30e6	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST 				; if >= unary start (after structure) then continue.
.30e8	b0 e1		bcs $30cb			bcs 	_SFLoop
.30ea	aa		tax				tax  								; token in X, and look up the adjuster.
.30eb	bd a6 37	lda $37a6,x			lda 	ELBinaryOperatorInfo-TOK_BINARYST,x
.30ee	38		sec				sec 								; convert to an offset ($FF,$01)
.30ef	e9 81		sbc #$81			sbc 	#$81
.30f1	18		clc				clc 								; add to depth
.30f2	65 2e		adc $2e				adc 	temp2
.30f4	85 2e		sta $2e				sta 	temp2
.30f6	10 d3		bpl $30cb			bpl 	_SFLoop 					; +ve okay to continue
.30f8	30 07		bmi $3101			bmi 	SFError 					; if gone -ve then we have a nesting error
.30fa	60		rts		_SFExit:rts
.30fb					_SFSpecials:
.30fb	20 06 31	jsr $3106			jsr 	ScannerSkipSpecial
.30fe	4c cb 30	jmp $30cb			jmp 	_SFLoop
.3101					SFError:
.3101	a2 14		ldx #$14			ldx 	#ErrorID_Struct
.3103	20 27 15	jsr $1527		jsr	errorHandler
.3106					ScannerSkipSpecial:
.3106	c9 80		cmp #$80			cmp 	#TOK_EOL 					; $80, advance to next line.
.3108	f0 10		beq $311a			beq 	_SFNextLine
.310a	c9 84		cmp #$84			cmp 	#TOK_FPC					; $84, skip embedded float
.310c	f0 2b		beq $3139			beq 	_SFFloatSkip
.310e	c9 85		cmp #$85			cmp 	#TOK_STR 					; $85, skip string
.3110	f0 02		beq $3114			beq 	_SFSkipString
.3112	c8		iny				iny									; $81,$82,$83 shift, so just advance over the shifted
.3113	60		rts				rts 								; token.
.3114					_SFSkipString:
.3114	98		tya				tya
.3115	38		sec				sec
.3116	71 28		adc ($28),y			adc 	(codePtr),y
.3118	a8		tay				tay
.3119	60		rts				rts
.311a					_SFNextLine:
.311a	a0 00		ldy #$00			ldy 	#0 							; get offset
.311c	b1 28		lda ($28),y			lda 	(codePtr),y
.311e	18		clc				clc 								; add to code pointer.
.311f	65 28		adc $28				adc 	codePtr
.3121	85 28		sta $28				sta 	codePtr
.3123	90 02		bcc $3127			bcc		_SFNLNoCarry
.3125	e6 29		inc $29				inc 	codePtr+1
.3127					_SFNLNoCarry:
.3127	b1 28		lda ($28),y			lda 	(codePtr),y 				; reached the end of the program.
.3129	d0 0b		bne $3136			bne		_SFXNL 						; no go round again
.312b	a5 2c		lda $2c				lda 	temp1
.312d	c9 d9		cmp #$d9			cmp 	#TKW_DATA 					; if searching for Data different error.
.312f	d0 d0		bne $3101			bne 	SFError 					; read uses this to search for data statements
.3131	a2 1d		ldx #$1d			ldx 	#ErrorID_DataError
.3133	20 27 15	jsr $1527		jsr	errorHandler
.3136	a0 03		ldy #$03	_SFXNL:	ldy 	#3
.3138	60		rts				rts
.3139					_SFFloatSkip:
.3139	98		tya				tya 								; skip over an embedded float.
.313a	18		clc				clc
.313b	69 05		adc #$05			adc 	#FloatEmbeddedSize
.313d	a8		tay				tay
.313e	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/while.asm

.313f					Command_While:
.313f	a9 57		lda #$57			lda 	#markerWhile 				; gosub marker allocate 4 bytes.
.3141	a2 04		ldx #$04			ldx 	#4
.3143	20 a2 3f	jsr $3fa2			jsr 	RSClaim 					; create on stack.
.3146	88		dey				dey
.3147	a9 01		lda #$01			lda 	#1
.3149	20 ce 3f	jsr $3fce			jsr 	RSSavePosition 				; save position before the WHILE keyword.
.314c	c8		iny				iny
.314d	20 88 38	jsr $3888			jsr 	EvaluateRootInteger			; get the conditional
.3150	20 30 3f	jsr $3f30			jsr 	MInt32Zero 	 				; if zero, skip forward to the fail code.
.3153	f0 01		beq $3156			beq 	_CWFail
.3155	60		rts				rts
.3156					_CWFail:
.3156	a9 04		lda #$04			lda 	#4
.3158	20 c4 3f	jsr $3fc4			jsr 	RSFree 						; close the just opened position.
.315b	a9 9f		lda #$9f			lda 	#TKW_WEND 					; scan forward past WEND.
.315d	aa		tax				tax
.315e	20 c3 30	jsr $30c3			jsr 	ScanForward
.3161	60		rts				rts
.3162					Command_Wend:
.3162	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.3164	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.3166	c9 57		cmp #$57			cmp 	#markerWHILE 						; does it match
.3168	f0 05		beq $316f			beq 	_isok
.316a	a2 11		ldx #$11			ldx 	#ErrorID_wendErr
.316c	20 27 15	jsr $1527		jsr	errorHandler
.316f					_isok:
.316f	a9 01		lda #$01			lda 	#1
.3171	20 e1 3f	jsr $3fe1			jsr 	RSLoadPosition				; go back until true
.3174	a9 04		lda #$04			lda 	#4
.3176	20 c4 3f	jsr $3fc4			jsr 	RSFree 						; close the loop
.3179	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/system/clear.asm

.317a					CommandClear:
.317a					XCommandClear:
.317a	5a		phy				phy
.317b	ad cc 0a	lda $0acc			lda 	endMemory					; set high memory = end of memory
.317e	85 33		sta $33				sta 	highMemory
.3180	ad cd 0a	lda $0acd			lda 	endMemory+1
.3183	85 34		sta $34				sta 	highMemory+1
.3185	ad c8 0a	lda $0ac8			lda 	basePage 					; work out where the program ends.
.3188	85 2a		sta $2a				sta 	temp0
.318a	ad c9 0a	lda $0ac9			lda 	basePage+1
.318d	85 2b		sta $2b				sta 	temp0+1
.318f					_CCFindEnd:
.318f	a0 00		ldy #$00			ldy 	#0
.3191	b1 2a		lda ($2a),y			lda 	(temp0),y
.3193	f0 0c		beq $31a1			beq 	_CCFoundEnd 				; offset zero is end.
.3195	18		clc				clc
.3196	65 2a		adc $2a				adc 	temp0 						; move to next line
.3198	85 2a		sta $2a				sta 	temp0
.319a	90 f3		bcc $318f			bcc 	_CCFindEnd
.319c	e6 2b		inc $2b				inc 	temp0+1
.319e	4c 8f 31	jmp $318f			jmp 	_CCFindEnd
.31a1					_CCFoundEnd:
.31a1	a5 2a		lda $2a				lda 	temp0 						; put temp0 in lowMemory
.31a3	85 35		sta $35				sta 	lowMemory
.31a5	a5 2b		lda $2b				lda 	temp0+1
.31a7	85 36		sta $36				sta 	lowMemory+1
.31a9	18		clc				clc 								; put temp0+1 in endProgram
.31aa	a5 2a		lda $2a				lda 	temp0
.31ac	69 01		adc #$01			adc 	#1
.31ae	8d ca 0a	sta $0aca			sta 	endProgram
.31b1	a5 2b		lda $2b				lda 	temp0+1
.31b3	69 00		adc #$00			adc 	#0
.31b5	8d cb 0a	sta $0acb			sta 	endProgram+1
.31b8	18		clc				clc 								; put a bit of space in.
.31b9	a5 35		lda $35				lda 	lowMemory
.31bb	69 04		adc #$04			adc 	#4
.31bd	85 35		sta $35				sta 	lowMemory
.31bf	90 02		bcc $31c3			bcc 	_CCNoCarry
.31c1	e6 36		inc $36				inc 	lowMemory+1
.31c3					_CCNoCarry:
.31c3	20 94 3f	jsr $3f94			jsr 	RSReset 					; reset the return stack.
.31c6	a2 06		ldx #$06		ldx	#6
.31c8	20 e7 4e	jsr $4ee7		jsr	variableHandler
.31cb	20 2d 30	jsr $302d			jsr 	ScanProc 					; scan for procedures
.31ce	20 d4 29	jsr $29d4			jsr 	CommandRestore 				; do a restore
.31d1	7a		ply				ply
.31d2	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/system/list.asm

.0dc7					structIndent:
>0dc7							.fill 	1
.31d3					CommandList:
.31d3	a2 00		ldx #$00			ldx		#0 							; set start/end lines in stack 0/1 to 0 and $FFFF
.31d5	8e c7 0d	stx $0dc7			stx 	structIndent
.31d8	20 09 3f	jsr $3f09			jsr 	MInt32False
.31db	e8		inx				inx
.31dc	20 05 3f	jsr $3f05			jsr 	MInt32True
.31df	b1 28		lda ($28),y			lda 	(codePtr),y 				; look at first token
.31e1	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; list ,xxxx
.31e3	f0 15		beq $31fa			beq 	_CLEndLine
.31e5	c9 00		cmp #$00			cmp 	#0 							; list ... on its own.
.31e7	30 1b		bmi $3204			bmi 	_CLDoListing 				; do the whole lot.
.31e9	a2 00		ldx #$00			ldx 	#0 							; get start line at stack:0
.31eb	20 8a 38	jsr $388a			jsr 	EvaluateInteger
.31ee	b1 28		lda ($28),y			lda 	(codePtr),y 				; , follows ?
.31f0	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.31f2	f0 06		beq $31fa			beq 	_CLEndLine
.31f4	20 49 3e	jsr $3e49			jsr 	MInt32CopyUp 				; copy first to second if just a line number on its
.31f7	4c 04 32	jmp $3204			jmp 	_CLDoListing 				; own e.g. list 1100
.31fa					_CLEndLine:
.31fa	c8		iny				iny 								; skip comma
.31fb	b1 28		lda ($28),y			lda 	(codePtr),y  				; no number follows, then its list 1000,
.31fd	30 05		bmi $3204			bmi 	_CLDoListing
.31ff	a2 01		ldx #$01			ldx 	#1 							; get the last line to list
.3201	20 8a 38	jsr $388a			jsr 	EvaluateInteger				; get end
.3204					_CLDoListing:
.3204	20 ac 33	jsr $33ac			jsr 	ResetCodeAddress 			; back to the start.
.3207					_CLCheckLoop:
.3207	a2 18		ldx #$18		ldx	#24
.3209	20 05 15	jsr $1505		jsr	deviceHandler
.320c	a0 00		ldy #$00			ldy 	#0							; check end.
.320e	b1 28		lda ($28),y			lda 	(codePtr),y
.3210	f0 41		beq $3253			beq 	_CLEnd
.3212	a2 00		ldx #$00			ldx 	#0 							; compare vs lower.
.3214	20 56 32	jsr $3256			jsr 	CLCompareLineTOS
.3217	c9 ff		cmp #$ff			cmp 	#255 						; if < skip
.3219	f0 28		beq $3243			beq 	_CLNext
.321b	e8		inx				inx
.321c	20 56 32	jsr $3256			jsr 	CLCompareLineTOS 			; compare vs higher
.321f	c9 01		cmp #$01			cmp 	#1
.3221	f0 20		beq $3243			beq 	_CLNext
.3223	a9 80		lda #$80			lda 	#$80 						; undo any down indents this line.
.3225	20 78 32	jsr $3278			jsr 	CLStructureCheck
.3228	ad c7 0d	lda $0dc7			lda 	structIndent 				; indent level.
.322b	10 02		bpl $322f			bpl 	_CLPositive
.322d	a9 00		lda #$00			lda 	#0
.322f					_CLPositive:
.322f	a2 04		ldx #$04		ldx	#4
.3231	20 28 4b	jsr $4b28		jsr	tokeniserHandler
.3234	a9 82		lda #$82			lda 	#$82 						; up indents from this point on.
.3236	20 78 32	jsr $3278			jsr 	CLStructureCheck
.3239	ad c7 0d	lda $0dc7			lda 	structIndent
.323c	10 05		bpl $3243			bpl 	_CLNext
.323e	a9 00		lda #$00			lda 	#0
.3240	8d c7 0d	sta $0dc7			sta 	structIndent
.3243					_CLNext:
.3243	a0 00		ldy #$00			ldy 	#0 							; go to next line.
.3245	b1 28		lda ($28),y			lda 	(codePtr),y
.3247	18		clc				clc
.3248	65 28		adc $28				adc 	codePtr
.324a	85 28		sta $28				sta 	codePtr
.324c	90 b9		bcc $3207			bcc 	_CLCheckLoop
.324e	e6 29		inc $29				inc 	codePtr+1
.3250	4c 07 32	jmp $3207			jmp 	_CLCheckLoop
.3253					_CLEnd:
.3253	4c f0 3f	jmp $3ff0			jmp 	WarmStart 					; warm start after list.
.3256					CLCompareLineTOS:
.3256	a0 01		ldy #$01			ldy 	#1
.3258	b1 28		lda ($28),y			lda 	(codePtr),y
.325a	55 98		eor $98,x			eor 	esInt0,x
.325c	85 2a		sta $2a				sta 	temp0
.325e	c8		iny				iny
.325f	b1 28		lda ($28),y			lda 	(codePtr),y
.3261	55 a0		eor $a0,x			eor 	esInt1,x
.3263	05 2a		ora $2a				ora 	temp0
.3265	f0 10		beq $3277			beq 	_CLCLTExit
.3267	88		dey				dey
.3268	b1 28		lda ($28),y			lda 	(codePtr),y
.326a	d5 98		cmp $98,x			cmp 	esInt0,x
.326c	c8		iny				iny
.326d	b1 28		lda ($28),y			lda 	(codePtr),y
.326f	f5 a0		sbc $a0,x			sbc 	esInt1,x
.3271	a9 ff		lda #$ff			lda 	#255
.3273	90 02		bcc $3277			bcc 	_CLCLTExit
.3275	a9 01		lda #$01			lda 	#1
.3277					_CLCLTExit:
.3277	60		rts				rts
.3278					CLStructureCheck:
.3278	85 2a		sta $2a				sta 	temp0
.327a	a0 03		ldy #$03			ldy 	#3
.327c					_CLSCLoop:
.327c	b1 28		lda ($28),y			lda 	(codePtr),y 				; get and consume token.
.327e	c8		iny				iny
.327f	c9 80		cmp #$80			cmp 	#$80
.3281	90 f9		bcc $327c			bcc 	_CLSCLoop 					; $00-$7F just step over.
.3283	f0 28		beq $32ad			beq		_CLSCExit					; EOL return
.3285	c9 86		cmp #$86			cmp 	#$86 						; special handler
.3287	90 1e		bcc $32a7			bcc 	_CLSCSpecial
.3289	c9 99		cmp #$99			cmp 	#TOK_STRUCTST 				; check if structure changer.
.328b	90 ef		bcc $327c			bcc 	_CLSCLoop
.328d	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST
.328f	b0 eb		bcs $327c			bcs 	_CLSCLoop
.3291	aa		tax				tax 								; get adjustment
.3292	bd a6 37	lda $37a6,x			lda 	ELBinaryOperatorInfo-TOK_BINARYST,x
.3295	c5 2a		cmp $2a				cmp 	temp0	 					; if what we're searching for
.3297	d0 e3		bne $327c			bne 	_CLSCLoop
.3299	38		sec				sec
.329a	e9 81		sbc #$81			sbc 	#$81 						; convert to offset
.329c	0a		asl a				asl 	a 							; double indent step
.329d	18		clc				clc
.329e	6d c7 0d	adc $0dc7			adc 	structIndent 				; add to structure indent
.32a1	8d c7 0d	sta $0dc7			sta 	structIndent
.32a4	4c 7c 32	jmp $327c			jmp 	_CLSCLoop
.32a7					_CLSCSpecial:
.32a7	20 06 31	jsr $3106			jsr 	ScannerSkipSpecial
.32aa	4c 7c 32	jmp $327c			jmp 	_CLSCLoop
.32ad					_CLSCExit:
.32ad	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/system/loadsave.asm

.32ae					CommandLoad:
.32ae	20 d6 32	jsr $32d6			jsr 	CLSParameters 					; get parameters for load.
.32b1	08		php				php
.32b2	a2 0c		ldx #$0c		ldx	#12
.32b4	20 05 15	jsr $1505		jsr	deviceHandler
.32b7	28		plp				plp
.32b8	b0 08		bcs $32c2			bcs 	_CLExit 						; if CC then load a program, so warm start.
.32ba	20 7a 31	jsr $317a			jsr 	CommandClear
.32bd	a2 04		ldx #$04		ldx	#4
.32bf	20 96 29	jsr $2996		jsr	interactionHandler
.32c2					_CLExit
.32c2	60		rts				rts
.32c3					CommandSave:
.32c3	20 d6 32	jsr $32d6			jsr 	CLSParameters					; get parameters for save
.32c6	90 08		bcc $32d0			bcc 	_CSNoOverrideAddress
.32c8	20 87 3f	jsr $3f87			jsr 	CheckComma 						; should be a comma.
.32cb	a2 02		ldx #$02			ldx 	#2
.32cd	20 8a 38	jsr $388a			jsr 	EvaluateInteger 				; get save end address.
.32d0					_CSNoOverrideAddress:
.32d0	a2 16		ldx #$16		ldx	#22
.32d2	20 05 15	jsr $1505		jsr	deviceHandler
.32d5	60		rts				rts
.32d6					CLSParameters:
.32d6	a2 00		ldx #$00			ldx 	#0 								; string at +0
.32d8	20 7f 38	jsr $387f			jsr 	EvaluateString
.32db	e8		inx				inx 									; erase out +1 (start) +2 (end, for save)
.32dc	20 09 3f	jsr $3f09			jsr 	MInt32False
.32df	e8		inx				inx
.32e0	20 09 3f	jsr $3f09			jsr 	MInt32False
.32e3	ad c8 0a	lda $0ac8			lda 	basePage 						; default start address.
.32e6	85 99		sta $99				sta 	esInt0+1
.32e8	ad c9 0a	lda $0ac9			lda 	basePage+1
.32eb	85 a1		sta $a1				sta 	esInt1+1
.32ed	ad ca 0a	lda $0aca			lda 	endProgram 						; default end address
.32f0	85 9a		sta $9a				sta 	esInt0+2
.32f2	ad cb 0a	lda $0acb			lda 	endProgram+1
.32f5	85 a2		sta $a2				sta 	esInt1+2
.32f7	b1 28		lda ($28),y			lda 	(codePtr),y 					; , following
.32f9	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.32fb	d0 08		bne $3305			bne 	_CLSDefault
.32fd	c8		iny				iny 									; skip comma
.32fe	a2 01		ldx #$01			ldx 	#1 								; get numeric value.
.3300	20 8a 38	jsr $388a			jsr 	EvaluateInteger 				; the load or start save address
.3303	38		sec				sec 									; return CS indicating override
.3304	60		rts				rts
.3305					_CLSDefault:
.3305	18		clc				clc
.3306	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/system/new.asm

.3307					Command_New:
.3307					Command_XNew:
.3307	20 ac 33	jsr $33ac			jsr 	ResetCodeAddress 			; point to first line
.330a	a0 00		ldy #$00			ldy 	#0 							; and zap it.
.330c	98		tya				tya
.330d	91 28		sta ($28),y			sta 	(codePtr),y
.330f	20 7a 31	jsr $317a			jsr 	CommandClear 				; clear everything down.
.3312	4c e6 2c	jmp $2ce6			jmp 	CommandEND 					; do END code, as there's nothing to run.

;******  Return to file: main/main.asm


;******  Processing file: main/commands/system/run.asm

.0dc8					breakCounter:
>0dc8								.fill 	1
.0dc9					breakIncrement:
>0dc9								.fill 	1
.3315					Command_Run:
.3315					XCommand_Run:
.3315	a2 ff		ldx #$ff			ldx 	#$FF 						; reset the stack.
.3317	9a		txs				txs
.3318	20 a6 33	jsr $33a6			jsr 	BreakOn 					; turn break on
.331b	20 7a 31	jsr $317a			jsr 	CommandClear 				; clear everything.
.331e	20 ac 33	jsr $33ac			jsr 	ResetCodeAddress 			; back to the start.
.3321					Command_RunFrom:
.3321	a0 03		ldy #$03			ldy 	#3 							; over offset/line #
.3323					CRNextInstruction:
.3323	a9 00		lda #$00			lda 	#0
.3325	85 3a		sta $3a				sta 	softMemAlloc+1
.3327	ad c8 0d	lda $0dc8			lda 	breakCounter 				; check for break.
.332a	6d c9 0d	adc $0dc9			adc 	breakIncrement
.332d	8d c8 0d	sta $0dc8			sta 	breakCounter
.3330	90 05		bcc $3337			bcc 	_CRNoChecks
.3332	a2 18		ldx #$18		ldx	#24
.3334	20 05 15	jsr $1505		jsr	deviceHandler
.3337					_CRNoChecks
.3337	b1 28		lda ($28),y			lda 	(codePtr),y 				; get next token.
.3339	10 1c		bpl $3357			bpl 	_CRNotToken
.333b	c9 c9		cmp #$c9			cmp 	#TOK_TOKENS 				; if in the tokens then do that token.
.333d	b0 0c		bcs $334b			bcs 	_CRExecute
.333f	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST 				; unary is ignored.
.3341	b0 55		bcs $3398			bcs 	Unimplemented
.3343	c9 99		cmp #$99			cmp 	#TOK_STRUCTST 				; execute structures.
.3345	b0 04		bcs $334b			bcs 	_CRExecute
.3347	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; if one of the system tokens $80-$85 do that
.3349	b0 16		bcs $3361			bcs 	_CRCheckIndirect 			; if in that unused range check for ! or ? or AND
.334b					_CRExecute:
.334b	c8		iny				iny 								; consume it.
.334c	0a		asl a				asl 	a 							; double it, losing most significant bit.
.334d	aa		tax				tax
.334e	20 54 33	jsr $3354			jsr 	_CRRunRoutine 				; we want to do jsr (group0vectors,x)
.3351	4c 23 33	jmp $3323			jmp 	CRNextInstruction
.3354					_CRRunRoutine:
.3354	7c be 33	jmp ($33be,x)			jmp 	(Group0Vectors,x)
.3357					_CRNotToken:
.3357	c9 40		cmp #$40			cmp 	#$40 						; if 0-3F then it is a letter
.3359	b0 3d		bcs $3398			bcs 	Unimplemented
.335b					_CRDefaultLet:
.335b	20 1b 2c	jsr $2c1b			jsr 	CommandLet 					; do the default, LET
.335e	4c 23 33	jmp $3323			jmp 	CRNextInstruction
.3361					_CRCheckIndirect:
.3361	c9 86		cmp #$86			cmp 	#TKW_AND 					; AND (assembler)
.3363	f0 0a		beq $336f			beq 	_CRAndCommand
.3365	c9 97		cmp #$97			cmp 	#TKW_PLING 					; !<term> =
.3367	f0 f2		beq $335b			beq 	_CRDefaultLet
.3369	c9 98		cmp #$98			cmp 	#TKW_QMARK 					; ?<term> =
.336b	f0 ee		beq $335b			beq 	_CRDefaultLet
.336d	d0 29		bne $3398			bne 	Unimplemented
.336f					_CRAndCommand:
.336f	c8		iny				iny 								; skip over the AND token
.3370	a9 95		lda #$95			lda 	#TKW_LPARENANDRPAREN 		; replace it with the pseudo-and
.3372	20 8c 33	jsr $338c			jsr 	CommandAssembler 			; do the assembler command
.3375	4c 23 33	jmp $3323			jmp 	CRNextInstruction 			; and loop round.
.3378					CommandShift1:
.3378	b1 28		lda ($28),y			lda 	(codePtr),y 				; get shifted value
.337a	10 1c		bpl $3398			bpl 	Unimplemented 				; we have an error as this should not happen.
.337c	c8		iny				iny 								; advance over it.
.337d	c9 94		cmp #$94			cmp 	#TKA_GROUP1 				; is it an assembler constant ?
.337f	b0 0b		bcs $338c			bcs 	CommandAssembler
.3381	0a		asl a				asl 	a 							; double into X
.3382	aa		tax				tax
.3383	7c 88 34	jmp ($3488,x)			jmp 	(Group1Vectors-12,x)
.3386					CommandShift2:
.3386	a9 ff		lda #$ff			lda 	#$FF 						; $FF means command not unary function.
.3388	20 74 18	jsr $1874		jsr	extensionHandler
.338b	60		rts				rts
.338c					CommandAssembler:
.338c	a2 02		ldx #$02		ldx	#2
.338e	20 ac 13	jsr $13ac		jsr	assemblerHandler
.3391	60		rts				rts
.3392					CommandAssemblerLabel:
.3392	a2 04		ldx #$04		ldx	#4
.3394	20 ac 13	jsr $13ac		jsr	assemblerHandler
.3397	60		rts				rts
.3398					Unimplemented:
.3398	a2 01		ldx #$01			ldx 	#ErrorID_Missing
.339a	20 27 15	jsr $1527		jsr	errorHandler
.339d					CommandColon:
.339d	60		rts				rts
.339e					CommandBreak:
.339e	20 88 38	jsr $3888			jsr 	EvaluateRootInteger
.33a1	20 30 3f	jsr $3f30			jsr 	MInt32Zero
.33a4	f0 02		beq $33a8			beq 	BreakOff
.33a6					BreakOn:
.33a6	a2 04		ldx #$04			ldx 	#4 							; checks 1 in 256/X instructions.
.33a8					BreakOff:
.33a8	8e c9 0d	stx $0dc9			stx 	breakIncrement
.33ab	60		rts				rts
.33ac					ResetCodeAddress:
.33ac	ad c8 0a	lda $0ac8			lda 	basePage 					; copy basePage to code Pointer
.33af	85 28		sta $28				sta 	codePtr
.33b1	ad c9 0a	lda $0ac9			lda 	basePage+1
.33b4	85 29		sta $29				sta 	codePtr+1
.33b6	a0 03		ldy #$03			ldy 	#3 							; offset after offset link and line#
.33b8	60		rts				rts
.33b9					TKErr01:
.33b9					TKErr02:
.33b9					TKErr03:
.33b9					TKErr04:
.33b9					TKErr05:
.33b9					TKErr06:
.33b9					TKErr07:
.33b9					TKErr08:
.33b9					TKErr09:
.33b9					TKErr10:
.33b9					TKErr11:
.33b9					TKErr12:
.33b9					TKErr13:
.33b9					TKErr14:
.33b9					TKErr15:
.33b9					TKErr16:
.33b9	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.33bb	20 27 15	jsr $1527		jsr	errorHandler

;******  Processing file: main/commands/system/../../../generated/tokenvectors0.inc

.33be					Group0Vectors:
>33be	ec 2c					.word	AdvanceNextLine          ; $80 [[eol]]
>33c0	78 33					.word	CommandShift1            ; $81 [[sh1]]
>33c2	86 33					.word	CommandShift2            ; $82 [[sh2]]
>33c4	b9 33					.word	TKErr09                  ; $83 [[sh3]]
>33c6	b9 33					.word	TKErr10                  ; $84 [[fpc]]
>33c8	b9 33					.word	TKErr08                  ; $85 [[str]]
>33ca	71 35					.word	AndHandler               ; $86 and
>33cc	5e 35					.word	OrHandler                ; $87 or
>33ce	4b 35					.word	XorHandler               ; $88 xor
>33d0	93 36					.word	CompareGreaterEq         ; $89 >=
>33d2	9d 36					.word	CompareLessEq            ; $8a <=
>33d4	7f 36					.word	CompareGreater           ; $8b >
>33d6	75 36					.word	CompareLess              ; $8c <
>33d8	6b 36					.word	CompareEquals            ; $8d =
>33da	89 36					.word	CompareNotEquals         ; $8e <>
>33dc	dc 34					.word	AddHandler               ; $8f +
>33de	ff 34					.word	SubHandler               ; $90 -
>33e0	97 35					.word	ShrHandler               ; $91 >>
>33e2	84 35					.word	ShlHandler               ; $92 <<
>33e4	12 35					.word	MulHandler               ; $93 *
>33e6	25 35					.word	DivHandler               ; $94 /
>33e8	38 35					.word	ModHandler               ; $95 mod
>33ea	d0 35					.word	PowerHandler             ; $96 ^
>33ec	aa 35					.word	WordRefHandler           ; $97 !
>33ee	bd 35					.word	ByteRefHandler           ; $98 ?
>33f0	95 30					.word	Command_Repeat           ; $99 repeat
>33f2	3f 31					.word	Command_While            ; $9a while
>33f4	00 2d					.word	Command_FOR              ; $9b for
>33f6	06 2e					.word	CommandIf                ; $9c if
>33f8	b9 33					.word	TKErr04                  ; $9d defproc
>33fa	a2 30					.word	Command_Until            ; $9e until
>33fc	62 31					.word	Command_Wend             ; $9f wend
>33fe	5d 2d					.word	Command_NEXT             ; $a0 next
>3400	b9 33					.word	TKErr06                  ; $a1 then
>3402	41 2e					.word	Command_ENDIF            ; $a2 endif
>3404	a8 2f					.word	ReturnProc               ; $a3 endproc
>3406	f5 37					.word	UnaryParenthesis         ; $a4 (
>3408	cf 39					.word	UnaryLen                 ; $a5 len(
>340a	13 3a					.word	UnarySgn                 ; $a6 sgn(
>340c	fc 39					.word	UnaryAbs                 ; $a7 abs(
>340e	6c 3a					.word	Unary_Random             ; $a8 random(
>3410	b6 3a					.word	Unary_Page               ; $a9 page
>3412	05 3f					.word	MInt32True               ; $aa true
>3414	09 3f					.word	MInt32False              ; $ab false
>3416	81 3a					.word	Unary_Min                ; $ac min(
>3418	85 3a					.word	Unary_Max                ; $ad max(
>341a	8c 3b					.word	UnarySys                 ; $ae sys(
>341c	37 3b					.word	UnaryTimer               ; $af timer(
>341e	51 39					.word	EventFunction            ; $b0 event(
>3420	5e 3b					.word	UnaryGet                 ; $b1 get(
>3422	4e 3b					.word	UnaryInkey               ; $b2 inkey(
>3424	07 3b					.word	UnaryAlloc               ; $b3 alloc(
>3426	c1 3b					.word	ExecChr                  ; $b4 chr$(
>3428	ed 3b					.word	ExecLeft                 ; $b5 left$(
>342a	0a 3c					.word	ExecMid                  ; $b6 mid$(
>342c	32 3c					.word	ExecRight                ; $b7 right$(
>342e	d6 38					.word	Event_Str                ; $b8 str$(
>3430	05 39					.word	UnaryVal                 ; $b9 val(
>3432	2a 3a					.word	UnaryPeek                ; $ba peek(
>3434	30 3a					.word	UnaryDeek                ; $bb deek(
>3436	36 3a					.word	UnaryLeek                ; $bc leek(
>3438	ed 39					.word	UnaryAsc                 ; $bd asc(
>343a	e1 3a					.word	UnaryIntToFloat          ; $be int(
>343c	f4 3a					.word	UnaryFloatToInt          ; $bf float(
>343e	08 39					.word	UnaryIsVal               ; $c0 isval(
>3440	d6 3b					.word	ExecUpper                ; $c1 upper$(
>3442	d3 3b					.word	ExecLower                ; $c2 lower$(
>3444	c4 3a					.word	UnaryReference           ; $c3 @
>3446	da 3a					.word	UnaryComplement          ; $c4 ~
>3448	d7 3a					.word	UnaryHexMarker           ; $c5 &
>344a	77 3b					.word	UnaryGetString           ; $c6 get$(
>344c	7d 3b					.word	UnaryInkeyString         ; $c7 inkey$(
>344e	b0 3b					.word	UnaryMem                 ; $c8 mem
>3450	b9 33					.word	TKErr01                  ; $c9 )
>3452	9d 33					.word	CommandColon             ; $ca :
>3454	b9 33					.word	TKErr02                  ; $cb ,
>3456	b9 33					.word	TKErr03                  ; $cc ;
>3458	d4 2c					.word	Command_Rem2             ; $cd '
>345a	b9 33					.word	TKErr07                  ; $ce to
>345c	b9 33					.word	TKErr05                  ; $cf step
>345e	3b 2f					.word	CallProc                 ; $d0 proc
>3460	42 2e					.word	CommandLocal             ; $d1 local
>3462	0d 2c					.word	Command_Dim              ; $d2 dim
>3464	d4 2c					.word	Command_Rem              ; $d3 rem
>3466	1b 2c					.word	CommandLet               ; $d4 let
>3468	61 2a					.word	Command_Input            ; $d5 input
>346a	3b 2e					.word	Command_ELSE             ; $d6 else
>346c	de 2b					.word	Command_VDU              ; $d7 vdu
>346e	15 2b					.word	Command_Print            ; $d8 print
>3470	cb 29					.word	CommandData              ; $d9 data
>3472	b9 33					.word	TKErr13                  ; $da image
>3474	b9 33					.word	TKErr12                  ; $db at
>3476	b9 33					.word	TKErr14                  ; $dc flip
>3478	ff 2b					.word	Command_Assert           ; $dd assert
>347a	97 2c					.word	Command_Poke             ; $de poke
>347c	9b 2c					.word	Command_Doke             ; $df doke
>347e	9f 2c					.word	Command_Loke             ; $e0 loke
>3480	b0 2b					.word	Command_Ink              ; $e1 ink
>3482	bb 2b					.word	Command_Paper            ; $e2 paper
>3484	aa 2b					.word	Command_CLS              ; $e3 cls
>3486	c6 2b					.word	Command_Locate           ; $e4 locate
>3488	92 33					.word	CommandAssemblerLabel    ; $e5 .
>348a	b9 33					.word	TKErr15                  ; $e6 from
>348c	b9 33					.word	TKErr11                  ; $e7 #
>348e	7a 31					.word	CommandClear             ; $e8 clear
>3490	b9 33					.word	TKErr16                  ; $e9 text
>3492	98 33					.word	Unimplemented            ; $ea type

;******  Return to file: main/commands/system/run.asm


;******  Processing file: main/commands/system/../../../generated/tokenvectors1.inc

.3494					Group1Vectors:
>3494	ae 32					.word	CommandLoad              ; $86 load
>3496	c3 32					.word	CommandSave              ; $87 save
>3498	d3 31					.word	CommandList              ; $88 list
>349a	07 33					.word	Command_New              ; $89 new
>349c	9e 33					.word	CommandBreak             ; $8a break
>349e	15 33					.word	Command_Run              ; $8b run
>34a0	a0 29					.word	CommandRead              ; $8c read
>34a2	d4 29					.word	CommandRestore           ; $8d restore
>34a4	e6 2c					.word	CommandEnd               ; $8e end
>34a6	e1 2c					.word	CommandStop              ; $8f stop
>34a8	e9 2c					.word	CommandXemu              ; $90 xemu
>34aa	2f 2a					.word	CommandGOTO              ; $91 goto
>34ac	04 2a					.word	CommandGOSUB             ; $92 gosub
>34ae	17 2a					.word	CommandRETURN            ; $93 return

;******  Return to file: main/commands/system/run.asm


;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/binary/binary.asm

.34b0					BinaryProcess:
.34b0	b5 90		lda $90,x			lda 	esType,x 					; or type bytes together and check bit 6.
.34b2	15 91		ora $91,x			ora 	esType+1,x 					; (the float bit)
.34b4	0a		asl a				asl 	a
.34b5	30 0e		bmi $34c5			bmi 	_BPStringType 				; if bit 6 is set, then string type, error
.34b7	18		clc				clc 								; return CC for integer
.34b8	29 02		and #$02			and 	#$02 						; $02 because of ASL A. check original bit 1.
.34ba	f0 08		beq $34c4			beq 	_BPExit 					; if both integer then return with CC.
.34bc	20 ca 34	jsr $34ca			jsr 	BPMakeBothFloat 			; make both float
.34bf	a9 01		lda #$01			lda 	#$01 						; set result type to float
.34c1	95 90		sta $90,x			sta 	esType,x
.34c3	38		sec				sec 								; and return with carry set.
.34c4					_BPExit:
.34c4	60		rts				rts
.34c5					_BPStringType:
.34c5	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.34c7	20 27 15	jsr $1527		jsr	errorHandler
.34ca					BPMakeBothFloat:
.34ca	e8		inx				inx
.34cb	20 cf 34	jsr $34cf			jsr 	BPMakeFloat 				; one is a float, so we do both as floats.
.34ce	ca		dex				dex
.34cf					BPMakeFloat:
.34cf	b5 90		lda $90,x			lda 	esType,x 					; get type bit which is in bit 0
.34d1	4a		lsr a				lsr 	a
.34d2	b0 07		bcs $34db			bcs 	_BPIsFloat 					; already a float if set.
.34d4	8a		txa				txa
.34d5	a2 1c		ldx #$1c		ldx	#28
.34d7	20 aa 27	jsr $27aa		jsr	floatingpointHandler
.34da	aa		tax				tax
.34db					_BPIsFloat:
.34db	60		rts				rts
.34dc					AddHandler:
.34dc	20 ad 36	jsr $36ad			jsr 	DereferenceTwo 				; dereference top two on stack.
.34df	b5 90		lda $90,x			lda 	esType,x 					; check two strings.
.34e1	35 91		and $91,x			and 	esType+1,x
.34e3	29 40		and #$40			and 	#$40 						; if both have bit 6 set ... we have two strings
.34e5	d0 10		bne $34f7			bne 	_AHStringConcat				; concatenate strings.
.34e7	20 b0 34	jsr $34b0			jsr 	BinaryProcess 				; check to see if either is float
.34ea	b0 03		bcs $34ef			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.34ec	4c ef 3d	jmp $3def			jmp 	MInt32Add 							; else do it as integer.
.34ef					_IsFPOperation:
.34ef	8a		txa				txa 								; call the relevant fp routine
.34f0	a2 04		ldx #$04		ldx	#4
.34f2	20 aa 27	jsr $27aa		jsr	floatingpointHandler
.34f5	aa		tax				tax
.34f6	60		rts				rts
.34f7					_AHStringConcat:
.34f7	8a		txa				txa 								; handled by the string module.
.34f8	a2 06		ldx #$06		ldx	#6
.34fa	20 a0 42	jsr $42a0		jsr	stringHandler
.34fd	aa		tax				tax
.34fe	60		rts				rts
.34ff					SubHandler:
.34ff	20 ad 36	jsr $36ad			jsr 	DereferenceTwo
.3502	20 b0 34	jsr $34b0			jsr 	BinaryProcess 				; check to see if either is float
.3505	b0 03		bcs $350a			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.3507	4c 09 3e	jmp $3e09			jmp 	MInt32Sub 							; else do it as integer.
.350a					_IsFPOperation:
.350a	8a		txa				txa 								; call the relevant fp routine
.350b	a2 12		ldx #$12		ldx	#18
.350d	20 aa 27	jsr $27aa		jsr	floatingpointHandler
.3510	aa		tax				tax
.3511	60		rts				rts
.3512					MulHandler:
.3512	20 ad 36	jsr $36ad			jsr 	DereferenceTwo
.3515	20 b0 34	jsr $34b0			jsr 	BinaryProcess 				; check to see if either is float
.3518	b0 03		bcs $351d			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.351a	4c 23 3e	jmp $3e23			jmp 	MInt32Multiply 							; else do it as integer.
.351d					_IsFPOperation:
.351d	8a		txa				txa 								; call the relevant fp routine
.351e	a2 0c		ldx #$0c		ldx	#12
.3520	20 aa 27	jsr $27aa		jsr	floatingpointHandler
.3523	aa		tax				tax
.3524	60		rts				rts
.3525					DivHandler:
.3525	20 ad 36	jsr $36ad			jsr 	DereferenceTwo
.3528	20 b0 34	jsr $34b0			jsr 	BinaryProcess 				; check to see if either is float
.352b	b0 03		bcs $3530			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.352d	4c e3 3c	jmp $3ce3			jmp 	MInt32SDivide 							; else do it as integer.
.3530					_IsFPOperation:
.3530	8a		txa				txa 								; call the relevant fp routine
.3531	a2 08		ldx #$08		ldx	#8
.3533	20 aa 27	jsr $27aa		jsr	floatingpointHandler
.3536	aa		tax				tax
.3537	60		rts				rts
.3538					ModHandler:
.3538	20 ad 36	jsr $36ad			jsr 	DereferenceTwo
.353b	20 b0 34	jsr $34b0			jsr 	BinaryProcess 				; check to see if either is float
.353e	b0 03		bcs $3543			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.3540	4c 61 3d	jmp $3d61			jmp 	MInt32Modulus 							; else do it as integer.
.3543					_IsFPOperation:
.3543	8a		txa				txa 								; call the relevant fp routine
.3544	a2 0a		ldx #$0a		ldx	#10
.3546	20 aa 27	jsr $27aa		jsr	floatingpointHandler
.3549	aa		tax				tax
.354a	60		rts				rts
.354b					XorHandler:
.354b	20 ad 36	jsr $36ad			jsr 	DereferenceTwo
.354e	20 b0 34	jsr $34b0			jsr 	BinaryProcess 				; check to see if either is float
.3551	b0 03		bcs $3556			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.3553	4c 95 3c	jmp $3c95			jmp 	MInt32Xor 							; else do it as integer.
.3556					_IsFPOperation:
.3556	8a		txa				txa 								; call the relevant fp routine
.3557	a2 0a		ldx #$0a		ldx	#10
.3559	20 aa 27	jsr $27aa		jsr	floatingpointHandler
.355c	aa		tax				tax
.355d	60		rts				rts
.355e					OrHandler:
.355e	20 ad 36	jsr $36ad			jsr 	DereferenceTwo
.3561	20 b0 34	jsr $34b0			jsr 	BinaryProcess 				; check to see if either is float
.3564	b0 03		bcs $3569			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.3566	4c 7c 3c	jmp $3c7c			jmp 	MInt32Or 							; else do it as integer.
.3569					_IsFPOperation:
.3569	8a		txa				txa 								; call the relevant fp routine
.356a	a2 0a		ldx #$0a		ldx	#10
.356c	20 aa 27	jsr $27aa		jsr	floatingpointHandler
.356f	aa		tax				tax
.3570	60		rts				rts
.3571					AndHandler:
.3571	20 ad 36	jsr $36ad			jsr 	DereferenceTwo
.3574	20 b0 34	jsr $34b0			jsr 	BinaryProcess 				; check to see if either is float
.3577	b0 03		bcs $357c			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.3579	4c 63 3c	jmp $3c63			jmp 	MInt32And 							; else do it as integer.
.357c					_IsFPOperation:
.357c	8a		txa				txa 								; call the relevant fp routine
.357d	a2 0a		ldx #$0a		ldx	#10
.357f	20 aa 27	jsr $27aa		jsr	floatingpointHandler
.3582	aa		tax				tax
.3583	60		rts				rts
.3584					ShlHandler:
.3584	20 ad 36	jsr $36ad			jsr 	DereferenceTwo
.3587	20 b0 34	jsr $34b0			jsr 	BinaryProcess 				; check to see if either is float
.358a	b0 03		bcs $358f			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.358c	4c 05 36	jmp $3605			jmp 	Mint32ShiftLeftX 							; else do it as integer.
.358f					_IsFPOperation:
.358f	8a		txa				txa 								; call the relevant fp routine
.3590	a2 0a		ldx #$0a		ldx	#10
.3592	20 aa 27	jsr $27aa		jsr	floatingpointHandler
.3595	aa		tax				tax
.3596	60		rts				rts
.3597					ShrHandler:
.3597	20 ad 36	jsr $36ad			jsr 	DereferenceTwo
.359a	20 b0 34	jsr $34b0			jsr 	BinaryProcess 				; check to see if either is float
.359d	b0 03		bcs $35a2			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.359f	4c 08 36	jmp $3608			jmp 	MInt32ShiftRightX 							; else do it as integer.
.35a2					_IsFPOperation:
.35a2	8a		txa				txa 								; call the relevant fp routine
.35a3	a2 0a		ldx #$0a		ldx	#10
.35a5	20 aa 27	jsr $27aa		jsr	floatingpointHandler
.35a8	aa		tax				tax
.35a9	60		rts				rts
.35aa					WordRefHandler:
.35aa	20 ad 36	jsr $36ad			jsr 	DereferenceTwo
.35ad	20 b0 34	jsr $34b0			jsr 	BinaryProcess 				; check to see if either is float
.35b0	b0 03		bcs $35b5			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.35b2	4c f7 35	jmp $35f7			jmp 	MInt32WordIndirect 							; else do it as integer.
.35b5					_IsFPOperation:
.35b5	8a		txa				txa 								; call the relevant fp routine
.35b6	a2 0a		ldx #$0a		ldx	#10
.35b8	20 aa 27	jsr $27aa		jsr	floatingpointHandler
.35bb	aa		tax				tax
.35bc	60		rts				rts
.35bd					ByteRefHandler:
.35bd	20 ad 36	jsr $36ad			jsr 	DereferenceTwo
.35c0	20 b0 34	jsr $34b0			jsr 	BinaryProcess 				; check to see if either is float
.35c3	b0 03		bcs $35c8			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.35c5	4c fb 35	jmp $35fb			jmp 	MInt32ByteIndirect 							; else do it as integer.
.35c8					_IsFPOperation:
.35c8	8a		txa				txa 								; call the relevant fp routine
.35c9	a2 0a		ldx #$0a		ldx	#10
.35cb	20 aa 27	jsr $27aa		jsr	floatingpointHandler
.35ce	aa		tax				tax
.35cf	60		rts				rts
.35d0					PowerHandler:
.35d0	20 ad 36	jsr $36ad			jsr 	DereferenceTwo
.35d3	20 b0 34	jsr $34b0			jsr 	BinaryProcess 				; check to see if either is float
.35d6	b0 03		bcs $35db			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.35d8	4c e3 35	jmp $35e3			jmp 	PowerInteger 							; else do it as integer.
.35db					_IsFPOperation:
.35db	8a		txa				txa 								; call the relevant fp routine
.35dc	a2 18		ldx #$18		ldx	#24
.35de	20 aa 27	jsr $27aa		jsr	floatingpointHandler
.35e1	aa		tax				tax
.35e2	60		rts				rts
.35e3					PowerInteger:
.35e3	20 ca 34	jsr $34ca			jsr 	BPMakeBothFloat				; make them float.
.35e6	8a		txa				txa
.35e7	a2 18		ldx #$18		ldx	#24
.35e9	20 aa 27	jsr $27aa		jsr	floatingpointHandler
.35ec	a2 14		ldx #$14		ldx	#20
.35ee	20 aa 27	jsr $27aa		jsr	floatingpointHandler
.35f1	aa		tax				tax
.35f2	a9 00		lda #$00			lda 	#0 							; make type integer
.35f4	95 90		sta $90,x			sta 	esType,x
.35f6	60		rts				rts
.35f7					Mint32WordIndirect:
.35f7	a9 80		lda #$80	 		lda 	#$80 				 		; word reference type (bit 7 set)
.35f9	d0 02		bne $35fd			bne 	Min32Indirect
.35fb					Mint32ByteIndirect:
.35fb	a9 a0		lda #$a0			lda 	#$A0 						; byte reference type (bit 7, bit 5 set)
.35fd					Min32Indirect:
.35fd	48		pha				pha 								; save the indirection
.35fe	20 ef 3d	jsr $3def			jsr 	MInt32Add 					; add a!b a?b
.3601	68		pla				pla 								; and set the type to reference.
.3602	95 90		sta $90,x			sta 	esType,x 	 				; so a!b => a+b and it's a reference....
.3604	60		rts				rts
.3605					Mint32ShiftLeftX:
.3605	18		clc				clc 								; CC shift left
.3606	90 01		bcc $3609			bcc 	Mint32Shift
.3608					Mint32ShiftRightX:
.3608	38		sec				sec 								; CS shift right
.3609					Mint32Shift:
.3609	08		php				php 								; save carry flag on stack.
.360a	b5 a1		lda $a1,x			lda 	esInt1+1,x 					; if shift >= 32 then it is zero.
.360c	15 a9		ora $a9,x			ora 	esInt2+1,x
.360e	15 b1		ora $b1,x			ora 	esInt3+1,x
.3610	d0 1e		bne $3630			bne 	_MShiftZero
.3612	b5 99		lda $99,x			lda 	esInt0+1,x
.3614	c9 20		cmp #$20			cmp 	#32
.3616	b0 18		bcs $3630			bcs 	_MShiftZero
.3618					_MShiftLoop:
.3618	b5 99		lda $99,x			lda 	esInt0+1,x 					; check count is zero
.361a	f0 12		beq $362e			beq 	_MShiftExit
.361c	d6 99		dec $99,x			dec 	esInt0+1,x
.361e	28		plp				plp 								; restore and save carry
.361f	08		php				php
.3620	90 06		bcc $3628			bcc 	_MShiftLeft 				; and shift left/right accordingly.
.3622	20 27 3f	jsr $3f27			jsr 	Mint32ShiftRight
.3625	4c 18 36	jmp $3618			jmp 	_MShiftLoop
.3628					_MShiftLeft:
.3628	20 1e 3f	jsr $3f1e			jsr 	Mint32ShiftLeft
.362b	4c 18 36	jmp $3618			jmp 	_MShiftLoop
.362e					_MShiftExit:
.362e	28		plp				plp	 								; throw saved carry and exit
.362f	60		rts				rts
.3630					_MShiftZero:
.3630	4c 09 3f	jmp $3f09			jmp 	MInt32False 				; return 0 as shifted >= 32 times.

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/binary/compare.asm

.3633					PerformComparison:
.3633	20 ad 36	jsr $36ad			jsr 	DereferenceTwo 				; make both values.
.3636	b5 90		lda $90,x			lda 	esType,x 					; check for two strings.
.3638	35 91		and $91,x			and 	esType+1,x
.363a	0a		asl a				asl 	a 							; bit 7 set if both bit 6s were set.
.363b	30 1d		bmi $365a			bmi 	_PCIsString
.363d	b5 90		lda $90,x			lda 	esType,x 					; check either is floating point.
.363f	15 91		ora $91,x			ora 	esType+1,x
.3641	0a		asl a				asl 	a 							; shift bit 6 (string) to bit 7, mixed types
.3642	30 22		bmi $3666			bmi 	_PCError
.3644	29 02		and #$02			and 	#$02 						; because of ASL, check type in bit 0
.3646	f0 0f		beq $3657			beq 	_PCIsInteger 				; if not two integers, e.g. 1 of the bits is set
.3648	20 ca 34	jsr $34ca			jsr 	BPMakeBothFloat 			; make both float
.364b	8a		txa				txa
.364c	a2 06		ldx #$06		ldx	#6
.364e	20 aa 27	jsr $27aa		jsr	floatingpointHandler
.3651	86 32		stx $32				stx 	tempShort 					; save result
.3653	aa		tax				tax
.3654	a5 32		lda $32				lda 	tempShort
.3656	60		rts				rts
.3657					_PCIsInteger:
.3657	4c ae 3c	jmp $3cae			jmp 	MInt32Compare
.365a					_PCIsString:
.365a	8a		txa				txa 								; A has SP
.365b	a2 0a		ldx #$0a		ldx	#10
.365d	20 a0 42	jsr $42a0		jsr	stringHandler
.3660	86 32		stx $32				stx 	tempShort 					; save result
.3662	aa		tax				tax 								; put SP back in X and get result.
.3663	a5 32		lda $32				lda 	tempShort
.3665	60		rts				rts
.3666					_PCError:
.3666	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.3668	20 27 15	jsr $1527		jsr	errorHandler
.366b					CompareEquals:
.366b	20 33 36	jsr $3633			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.366e	c9 00		cmp #$00			cmp 	#$00 						; and we do something if it is = or <> a value.
.3670	f0 35		beq $36a7			beq  	CompareTrue
.3672	4c aa 36	jmp $36aa			jmp 	CompareFalse
.3675					CompareLess:
.3675	20 33 36	jsr $3633			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.3678	c9 ff		cmp #$ff			cmp 	#$FF 						; and we do something if it is = or <> a value.
.367a	f0 2b		beq $36a7			beq  	CompareTrue
.367c	4c aa 36	jmp $36aa			jmp 	CompareFalse
.367f					CompareGreater:
.367f	20 33 36	jsr $3633			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.3682	c9 01		cmp #$01			cmp 	#$01 						; and we do something if it is = or <> a value.
.3684	f0 21		beq $36a7			beq  	CompareTrue
.3686	4c aa 36	jmp $36aa			jmp 	CompareFalse
.3689					CompareNotEquals:
.3689	20 33 36	jsr $3633			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.368c	c9 00		cmp #$00			cmp 	#$00 						; and we do something if it is = or <> a value.
.368e	d0 17		bne $36a7			bne  	CompareTrue
.3690	4c aa 36	jmp $36aa			jmp 	CompareFalse
.3693					CompareGreaterEq:
.3693	20 33 36	jsr $3633			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.3696	c9 ff		cmp #$ff			cmp 	#$FF 						; and we do something if it is = or <> a value.
.3698	d0 0d		bne $36a7			bne  	CompareTrue
.369a	4c aa 36	jmp $36aa			jmp 	CompareFalse
.369d					CompareLessEq:
.369d	20 33 36	jsr $3633			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.36a0	c9 01		cmp #$01			cmp 	#$01 						; and we do something if it is = or <> a value.
.36a2	d0 03		bne $36a7			bne  	CompareTrue
.36a4	4c aa 36	jmp $36aa			jmp 	CompareFalse
.36a7					CompareTrue:
.36a7	4c 05 3f	jmp $3f05			jmp 	MInt32True
.36aa					CompareFalse:
.36aa	4c 09 3f	jmp $3f09			jmp 	MInt32False

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/dereference.asm

.36ad					DereferenceTwo:
.36ad	e8		inx				inx
.36ae	20 b2 36	jsr $36b2			jsr 	DereferenceOne
.36b1	ca		dex				dex
.36b2					DereferenceOne:
.36b2	b5 90		lda $90,x			lda 	esType,x
.36b4	10 3b		bpl $36f1			bpl 	_DRNotReference 			; is it a reference ? if not, we don't need to do anything
.36b6	4a		lsr a				lsr 	a 							; do float dereference if bit 0 set.
.36b7	b0 39		bcs $36f2			bcs 	_DRFloatDeReference
.36b9	5a		phy				phy
.36ba	b5 98		lda $98,x			lda 	esInt0,x 					; copy address to temp0
.36bc	85 2a		sta $2a				sta 	temp0
.36be	b5 a0		lda $a0,x			lda 	esInt1,x
.36c0	85 2b		sta $2b				sta 	temp0+1
.36c2	a9 00		lda #$00			lda 	#0 							; clear esInt1..3
.36c4	95 a0		sta $a0,x			sta 	esInt1,x
.36c6	95 a8		sta $a8,x			sta 	esInt2,x
.36c8	95 b0		sta $b0,x			sta 	esInt3,x
.36ca	b5 90		lda $90,x			lda 	esType,x 					; get the type byte.
.36cc	29 60		and #$60			and 	#$60 						; get string flag ($40) and byte flag ($20)
.36ce	0a		asl a				asl 	a 							; now string ($80) byte ($40)
.36cf	30 0d		bmi $36de			bmi 	_DeRefString 				; string, 2 bytes only
.36d1	d0 11		bne $36e4			bne 	_DeRefByte 					; byte 1 byte only
.36d3					_DeRefLong:
.36d3	a0 03		ldy #$03			ldy 	#3
.36d5	b1 2a		lda ($2a),y			lda 	(temp0),y
.36d7	95 b0		sta $b0,x			sta 	esInt3,x
.36d9	88		dey				dey
.36da	b1 2a		lda ($2a),y			lda 	(temp0),y
.36dc	95 a8		sta $a8,x			sta 	esInt2,x
.36de					_DeRefString:
.36de	a0 01		ldy #$01			ldy 	#1
.36e0	b1 2a		lda ($2a),y			lda 	(temp0),y
.36e2	95 a0		sta $a0,x			sta 	esInt1,x
.36e4					_DeRefByte:
.36e4	a0 00		ldy #$00			ldy 	#0
.36e6	b1 2a		lda ($2a),y			lda 	(temp0),y
.36e8	95 98		sta $98,x			sta 	esInt0,x
.36ea	b5 90		lda $90,x			lda 	esType,x 					; clear byte and deref bits.
.36ec	29 40		and #$40			and 	#$40
.36ee	95 90		sta $90,x			sta 	esType,x
.36f0	7a		ply				ply
.36f1					_DRNotReference
.36f1	60		rts				rts
.36f2					_DRFloatDereference:
.36f2	20 8e 2c	jsr $2c8e			jsr 	TOSToTemp0 					; address to deref in temp0
.36f5	8a		txa				txa
.36f6	a2 1e		ldx #$1e		ldx	#30
.36f8	20 aa 27	jsr $27aa		jsr	floatingpointHandler
.36fb	aa		tax				tax
.36fc	a9 01		lda #$01			lda 	#$01 						; type to FP (float)
.36fe	95 90		sta $90,x			sta 	esType,x
.3700	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/evaluate.asm

.3701					EvaluateLevel:
.3701	e0 08		cpx #$08			cpx 	#StackSize 					; check stack overflow
.3703	b0 1e		bcs $3723			bcs 	_ELStack
.3705	48		pha				pha 								; save precedence level.
.3706	a9 00		lda #$00			lda 	#0 							; zero the current stack level.
.3708	95 98		sta $98,x			sta 	esInt0,x
.370a	95 a0		sta $a0,x			sta 	esInt1,x
.370c	95 a8		sta $a8,x			sta 	esInt2,x
.370e	95 b0		sta $b0,x			sta 	esInt3,x
.3710	95 90		sta $90,x			sta 	esType,x 					; zero the type (integer value)
.3712	b1 28		lda ($28),y			lda 	(codePtr),y	 				; look at first token/character
.3714	30 26		bmi $373c			bmi 	_ELIsToken 					; if -ve could be string, float, or unary function.
.3716	0a		asl a				asl 	a 							; if 00-3F then will now be PL and it's a variable.
.3717	30 0f		bmi $3728			bmi 	_ELIsConstant 				; 40-7F will be -ve and that's an integer constant.
.3719	8a		txa				txa 								; stack level in X
.371a	a2 02		ldx #$02		ldx	#2
.371c	20 e7 4e	jsr $4ee7		jsr	variableHandler
.371f	aa		tax				tax
.3720	4c 65 37	jmp $3765			jmp		_ELHasTerm
.3723					_ELStack:
.3723	a2 23		ldx #$23			ldx 	#ErrorID_NumStack
.3725	20 27 15	jsr $1527		jsr	errorHandler
.3728					_ELIsConstant:
.3728	4a		lsr a				lsr 	a 							; get the value back
.3729	29 3f		and #$3f			and 	#$3F 						; force into range 0-63
.372b	95 98		sta $98,x			sta 	esInt0,x 					; and put in LSB.
.372d					_ELCheckNext:
.372d	c8		iny				iny 								; look at next
.372e	b1 28		lda ($28),y			lda 	(codePtr),y
.3730	49 40		eor #$40			eor 	#$40 						; shift around so 40-7F => 00-3F
.3732	c9 40		cmp #$40			cmp 	#$40 						; out of range ?
.3734	b0 2f		bcs $3765			bcs 	_ELHasTerm 					; done getting the constant.
.3736	20 fe 37	jsr $37fe			jsr 	ELShiftByteIn 				; shift byte into position.
.3739	4c 2d 37	jmp $372d			jmp 	_ELCheckNext
.373c					_ELIsToken:
.373c	c9 85		cmp #$85			cmp 	#TOK_STR 					; handle strings.
.373e	f0 0f		beq $374f			beq 	_ELIsString
.3740	c9 84		cmp #$84			cmp 	#TOK_FPC 					; if no, then check unary.
.3742	d0 5f		bne $37a3			bne 	_ELCheckUnary
.3744	8a		txa				txa 								; put X into A
.3745	c8		iny				iny 								; skip over the float marker
.3746	a2 1a		ldx #$1a		ldx	#26
.3748	20 aa 27	jsr $27aa		jsr	floatingpointHandler
.374b	aa		tax				tax 								; restore X
.374c	4c 65 37	jmp $3765			jmp 	_ELHasTerm
.374f					_ELIsString:
.374f	98		tya				tya 								; address of string is codePtr+y+1
.3750	38		sec				sec
.3751	65 28		adc $28				adc 	codePtr
.3753	95 98		sta $98,x			sta 	esInt0,x
.3755	a5 29		lda $29				lda 	codePtr+1
.3757	69 00		adc #$00			adc 	#0
.3759	95 a0		sta $a0,x			sta 	esInt1,x
.375b	a9 40		lda #$40			lda 	#$40 						; set type to string value
.375d	95 90		sta $90,x			sta 	esType,x
.375f	c8		iny				iny 								; skip over string.
.3760	98		tya				tya
.3761	38		sec				sec									; +1 for the length itself.
.3762	71 28		adc ($28),y			adc 	(codePtr),y
.3764	a8		tay				tay 								; and fall through to term loop code.
.3765					_ELHasTerm:
.3765	b1 28		lda ($28),y			lda 	(codePtr),y
.3767	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; check in the correct range for binary tokens.
.3769	90 04		bcc $376f			bcc 	_ELPopExit
.376b	c9 99		cmp #$99			cmp 	#TOK_STRUCTST
.376d	90 02		bcc $3771			bcc 	_ELHasBinaryTerm
.376f					_ELPopExit:
.376f	68		pla				pla
.3770					_ELExit:
.3770	60		rts				rts
.3771					_ELHasBinaryTerm:
.3771	84 32		sty $32				sty 	tempShort 					; save position
.3773	a8		tay				tay 								; use token as an index and get the precedence.
.3774	b9 a6 37	lda $37a6,y			lda 	ELBinaryOperatorInfo-TOK_BINARYST,y
.3777	a4 32		ldy $32				ldy 	tempShort 					; restore Y
.3779	85 32		sta $32				sta 	tempShort 					; save precedence in memory.
.377b	68		pla				pla 								; restore current level.
.377c	c5 32		cmp $32				cmp 	tempShort 					; if current >= operator then exit
.377e	b0 f0		bcs $3770			bcs 	_ELExit
.3780	48		pha				pha 								; save current level back on the stack.
.3781	b1 28		lda ($28),y			lda 	(codePtr),y 				; save the binary operator on the stack and skip it.
.3783	48		pha				pha
.3784	c8		iny				iny
.3785	e8		inx				inx 								; calculate the RHS at the operator precedence.
.3786	a5 32		lda $32				lda 	tempShort
.3788	20 01 37	jsr $3701			jsr 	EvaluateLevel
.378b	ca		dex				dex
.378c	68		pla				pla 								; get the operator back out.
.378d					_ELExecuteA:
.378d	86 32		stx $32				stx 	tempShort 					; upload the vectors. Would be nice to use jmp (aaaa,x)
.378f	0a		asl a				asl 	a 							; but not practical. May use push/rts later.
.3790	aa		tax				tax
.3791	bd be 33	lda $33be,x			lda 	Group0Vectors,x
.3794	85 2a		sta $2a				sta 	temp0
.3796	bd bf 33	lda $33bf,x			lda 	Group0Vectors+1,x
.3799	85 2b		sta $2b				sta 	temp0+1
.379b	a6 32		ldx $32				ldx 	tempShort
.379d	20 ea 37	jsr $37ea			jsr 	_ELCallTemp0
.37a0	4c 65 37	jmp $3765			jmp 	_ELHasTerm 					; and loop back round.
.37a3					_ELCheckUnary:
.37a3	c8		iny				iny 								; skip over token.
.37a4	c9 90		cmp #$90			cmp 	#TKW_MINUS 					; is it - term
.37a6	f0 19		beq $37c1			beq 	_ELMinus
.37a8	c9 97		cmp #$97			cmp 	#TKW_PLING 					; is it ! or ? term
.37aa	f0 2c		beq $37d8			beq 	_ELIndirect
.37ac	c9 98		cmp #$98			cmp 	#TKW_QMARK
.37ae	f0 28		beq $37d8			beq 	_ELIndirect
.37b0	c9 83		cmp #$83			cmp 	#TOK_SHIFT3 				; is it the unary extension.
.37b2	f0 39		beq $37ed			beq 	_ELExtension
.37b4	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST 				; must be TOK_UNARYST ... TOK_TOKENS
.37b6	90 04		bcc $37bc			bcc 	_ELUSyntax
.37b8	c9 c9		cmp #$c9			cmp 	#TOK_TOKENS
.37ba	90 d1		bcc $378d			bcc 	_ELExecuteA 				; if so do that token.
.37bc					_ELUSyntax:
.37bc	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.37be	20 27 15	jsr $1527		jsr	errorHandler
.37c1					_ELMinus:
.37c1	20 53 38	jsr $3853			jsr 	EvaluateNumericTerm 		; get a number to negate.
.37c4	b5 90		lda $90,x			lda 	esType,x 					; is it integer
.37c6	f0 0a		beq $37d2			beq 	_ELMinusInteger
.37c8	8a		txa				txa
.37c9	a2 0e		ldx #$0e		ldx	#14
.37cb	20 aa 27	jsr $27aa		jsr	floatingpointHandler
.37ce	aa		tax				tax
.37cf	4c 65 37	jmp $3765			jmp 	_ELHasTerm
.37d2					_ELMinusInteger:
.37d2	20 c3 3e	jsr $3ec3			jsr 	MInt32Negate 				; do int negate
.37d5	4c 65 37	jmp $3765			jmp 	_ELHasTerm
.37d8					_ELIndirect:
.37d8	48		pha				pha 								; save what we want (TKW_QMARK TWK_PLING)
.37d9	20 5c 38	jsr $385c			jsr 	EvaluateIntegerTerm 		; integer address
.37dc	68		pla				pla
.37dd	49 97		eor #$97			eor 	#TKW_PLING 					; now $00 if !
.37df	f0 02		beq $37e3			beq 	_ELHaveModifier
.37e1	a9 20		lda #$20			lda 	#$20 						; now $00 if !, $20 if ?
.37e3					_ELHaveModifier:
.37e3	09 80		ora #$80			ora 	#$80						; make it the appropriate reference.
.37e5	95 90		sta $90,x			sta 	esType,x 					; $80 for ! $A0 for ?
.37e7	4c 65 37	jmp $3765			jmp 	_ELHasTerm
.37ea					_ELCallTemp0:
.37ea	6c 2a 00	jmp ($002a)			jmp 	(temp0)
.37ed					_ELExtension:
.37ed	8a		txa				txa 								; stack pos in A
.37ee	20 74 18	jsr $1874		jsr	extensionHandler
.37f1	aa		tax				tax 								; restore stack
.37f2	4c 65 37	jmp $3765			jmp 	_ELHasTerm
.37f5					UnaryParenthesis:
.37f5	a9 00		lda #$00			lda 	#0 							; ( is a unary function ....
.37f7	20 01 37	jsr $3701			jsr 	EvaluateLevel
.37fa	20 7a 3f	jsr $3f7a			jsr 	CheckRightParen 			; check for )
.37fd	60		rts				rts
.37fe					ELShiftByteIn:
.37fe	48		pha				pha 								; save bits to shift in.
.37ff	b5 b0		lda $b0,x			lda 	esInt3,x 					; save top most byte
.3801	48		pha				pha
.3802	b5 a8		lda $a8,x			lda 	esInt2,x 					; shift everything left 8 bits
.3804	95 b0		sta $b0,x			sta 	esInt3,x
.3806	b5 a0		lda $a0,x			lda 	esInt1,x
.3808	95 a8		sta $a8,x			sta 	esInt2,x
.380a	b5 98		lda $98,x			lda 	esInt0,x
.380c	95 a0		sta $a0,x			sta 	esInt1,x
.380e	a9 00		lda #$00			lda 	#0
.3810	95 98		sta $98,x			sta 	esInt0,x
.3812	68		pla				pla 								; now A:TOS is a 5 byte register, shift right twice.
.3813	29 03		and #$03			and 	#3 							; only want lower 2 bits
.3815	09 04		ora #$04			ora 	#4  						; set bit 2 - when 1 we are done
.3817					_ELShiftLoop:
.3817	4a		lsr a				lsr 	a
.3818	76 b0		ror $b0,x			ror 	esInt3,x
.381a	76 a8		ror $a8,x			ror 	esInt2,x
.381c	76 a0		ror $a0,x			ror 	esInt1,x
.381e	76 98		ror $98,x			ror 	esInt0,x
.3820	c9 01		cmp #$01			cmp 	#1
.3822	d0 f3		bne $3817			bne 	_ELShiftLoop
.3824	68		pla				pla 								; get original 6 bit value and OR in.
.3825	29 3f		and #$3f			and 	#$3F
.3827	15 98		ora $98,x			ora 	esInt0,x
.3829	95 98		sta $98,x			sta 	esInt0,x
.382b	60		rts				rts
.382c					ELBinaryOperatorInfo:

;******  Processing file: main/evaluate/../../generated/binarystructinfo.inc

>382c	01					.byte	$01			; $86 and
>382d	01					.byte	$01			; $87 or
>382e	01					.byte	$01			; $88 xor
>382f	02					.byte	$02			; $89 >=
>3830	02					.byte	$02			; $8a <=
>3831	02					.byte	$02			; $8b >
>3832	02					.byte	$02			; $8c <
>3833	02					.byte	$02			; $8d =
>3834	02					.byte	$02			; $8e <>
>3835	03					.byte	$03			; $8f +
>3836	03					.byte	$03			; $90 -
>3837	04					.byte	$04			; $91 >>
>3838	04					.byte	$04			; $92 <<
>3839	04					.byte	$04			; $93 *
>383a	04					.byte	$04			; $94 /
>383b	04					.byte	$04			; $95 mod
>383c	05					.byte	$05			; $96 ^
>383d	06					.byte	$06			; $97 !
>383e	06					.byte	$06			; $98 ?
>383f	82					.byte	$82			; $99 repeat
>3840	82					.byte	$82			; $9a while
>3841	82					.byte	$82			; $9b for
>3842	82					.byte	$82			; $9c if
>3843	82					.byte	$82			; $9d defproc
>3844	80					.byte	$80			; $9e until
>3845	80					.byte	$80			; $9f wend
>3846	80					.byte	$80			; $a0 next
>3847	80					.byte	$80			; $a1 then
>3848	80					.byte	$80			; $a2 endif
>3849	80					.byte	$80			; $a3 endproc

;******  Return to file: main/evaluate/evaluate.asm


;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/support.asm

.384a					EvaluateTerm:
.384a	a9 0f		lda #$0f			lda 	#15 						; no binary operator has this high a precedence.
.384c	20 01 37	jsr $3701			jsr 	EvaluateLevel
.384f	20 b2 36	jsr $36b2			jsr 	DereferenceOne
.3852	60		rts				rts
.3853					EvaluateNumericTerm:
.3853	20 4a 38	jsr $384a			jsr 	EvaluateTerm
.3856	b5 90		lda $90,x			lda 	esType,x
.3858	0a		asl a				asl 	a 							; see if it's a string.
.3859	30 09		bmi $3864			bmi 	ENTType
.385b	60		rts				rts
.385c					EvaluateIntegerTerm:
.385c	20 4a 38	jsr $384a			jsr 	EvaluateTerm
.385f	b5 90		lda $90,x			lda 	esType,x
.3861	d0 01		bne $3864			bne 	ENTType
.3863	60		rts				rts
.3864					ENTType:
.3864	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.3866	20 27 15	jsr $1527		jsr	errorHandler
.3869					EvaluateRoot:
.3869	a2 00		ldx #$00			ldx 	#0
.386b					Evaluate:
.386b	a9 00		lda #$00			lda 	#0
.386d	20 01 37	jsr $3701			jsr 	EvaluateLevel
.3870	20 b2 36	jsr $36b2			jsr 	DereferenceOne
.3873	60		rts				rts
.3874					EvaluateNumeric:
.3874	20 6b 38	jsr $386b			jsr 	Evaluate
.3877	b5 90		lda $90,x			lda 	esType,x
.3879	0a		asl a				asl 	a 							; see if it's a string.
.387a	30 e8		bmi $3864			bmi 	ENTType
.387c	4a		lsr a				lsr 	a 							; shift float flag into carry.
.387d	4a		lsr a				lsr 	a
.387e	60		rts				rts
.387f					EvaluateString:
.387f	20 6b 38	jsr $386b			jsr 	Evaluate
.3882	b5 90		lda $90,x			lda 	esType,x
.3884	0a		asl a				asl 	a 							; see if it's a string.
.3885	10 dd		bpl $3864			bpl 	ENTType
.3887	60		rts				rts
.3888					EvaluateRootInteger:
.3888	a2 00		ldx #$00			ldx 	#0
.388a					EvaluateInteger:
.388a	20 6b 38	jsr $386b			jsr 	Evaluate
.388d	b5 90		lda $90,x			lda 	esType,x
.388f	d0 d3		bne $3864			bne 	ENTType
.3891	60		rts				rts
.3892					EvaluateSmallInteger:
.3892	20 8a 38	jsr $388a			jsr 	EvaluateInteger
.3895	b5 a0		lda $a0,x			lda 	esInt1,x
.3897	15 a8		ora $a8,x			ora 	esInt2,x
.3899	15 b0		ora $b0,x			ora 	esInt3,x
.389b	d0 03		bne $38a0			bne 	_ESIValue
.389d	b5 98		lda $98,x			lda 	esInt0,x
.389f	60		rts				rts
.38a0					_ESIValue:
.38a0	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.38a2	20 27 15	jsr $1527		jsr	errorHandler
.38a5					LinkEvaluate:
.38a5	aa		tax				tax
.38a6	20 6b 38	jsr $386b			jsr 	Evaluate
.38a9	8a		txa				txa
.38aa	60		rts				rts
.38ab					LinkEvaluateTerm:
.38ab	aa		tax				tax
.38ac	20 4a 38	jsr $384a			jsr 	EvaluateTerm
.38af	8a		txa				txa
.38b0	60		rts				rts
.38b1					LinkEvaluateInteger:
.38b1	aa		tax				tax
.38b2	20 8a 38	jsr $388a			jsr 	EvaluateInteger
.38b5	8a		txa				txa
.38b6	60		rts				rts
.38b7					LinkEvaluateString:
.38b7	aa		tax				tax
.38b8	20 7f 38	jsr $387f			jsr 	EvaluateString
.38bb	8a		txa				txa
.38bc	60		rts				rts
.38bd					LinkEvaluateSmallInt:
.38bd	aa		tax				tax
.38be	20 92 38	jsr $3892			jsr 	EvaluateSmallInteger
.38c1	8a		txa				txa
.38c2	60		rts				rts
.38c3					EvaluateReference:
.38c3	ad 3d 38	lda $383d			lda 	ELBinaryOperatorInfo+TKW_PLING-TOK_BINARYST
.38c6	38		sec				sec 								; sub 1 to allow a!x b?x to work.
.38c7	e9 01		sbc #$01			sbc 	#1
.38c9	20 01 37	jsr $3701			jsr 	EvaluateLevel
.38cc	b5 90		lda $90,x			lda 	esType,x
.38ce	10 01		bpl $38d1			bpl 	_ERFail
.38d0	60		rts				rts
.38d1					_ERFail:
.38d1	a2 0b		ldx #$0b			ldx 	#ErrorID_NoReference
.38d3	20 27 15	jsr $1527		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary/convert.asm

.38d6					Event_Str:
.38d6	20 74 38	jsr $3874			jsr 	EvaluateNumeric 			; get a number.
.38d9	b5 90		lda $90,x			lda 	esType,x 					; is it floating point
.38db	d0 13		bne $38f0			bne 	_ESFloat
.38dd	20 30 39	jsr $3930			jsr 	ConvertGetBase 				; get base, or default.
.38e0	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.38e2	85 2a		sta $2a				sta 	temp0
.38e4	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.38e6	85 2b		sta $2b				sta 	1+(temp0)
.38e8	b5 99		lda $99,x			lda 	esInt0+1,x 					; get the base
.38ea	20 61 3e	jsr $3e61			jsr 	MInt32ToString 				; convert to string.
.38ed	4c fd 38	jmp $38fd			jmp 	_ESCloneExit 				; clone and exit.
.38f0					_ESFloat:
.38f0	20 7a 3f	jsr $3f7a			jsr 	CheckRightParen 			; check closing )
.38f3	20 8e 2c	jsr $2c8e			jsr 	TOSToTemp0 					; string address in temp0, goes here.
.38f6	8a		txa				txa
.38f7	a2 16		ldx #$16		ldx	#22
.38f9	20 aa 27	jsr $27aa		jsr	floatingpointHandler
.38fc	aa		tax				tax
.38fd					_ESCloneExit:
.38fd	8a		txa				txa
.38fe	a2 04		ldx #$04		ldx	#4
.3900	20 a0 42	jsr $42a0		jsr	stringHandler
.3903	aa		tax				tax
.3904	60		rts				rts
.3905					UnaryVal:
.3905	38		sec				sec 								; Carry set to return value
.3906	b0 01		bcs $3909			bcs 	ValueMain
.3908					UnaryIsVal:
.3908	18		clc				clc									; Carry clear to return legitimacy
.3909					ValueMain:
.3909	08		php				php 								; save results (CS is value, CC is validation)
.390a	20 7f 38	jsr $387f			jsr 	EvaluateString
.390d	20 30 39	jsr $3930			jsr 	ConvertGetBase 				; get base, if any.
.3910	5a		phy				phy
.3911	20 8e 2c	jsr $2c8e			jsr 	TOSToTemp0 					; string address in temp0, goes here.
.3914	b5 99		lda $99,x			lda 	esInt0+1,x 					; get the base
.3916	29 7f		and #$7f			and 	#$7F 						; ignore the sign bit.
.3918	20 7c 3d	jsr $3d7c			jsr 	MInt32FromString 			; convert it back from a string.
.391b	b0 0b		bcs $3928			bcs 	_VMSuccess 					; successfully converted.
.391d	b5 99		lda $99,x			lda 	esInt0+1,x 					; is base the default
.391f	c9 8a		cmp #$8a			cmp 	#$80+10 					; if no, then it is integer only.
.3921	f0 00		beq $3923			beq 	_VMFailed 	 				; so we failed.
.3923					_VMFailed:
.3923	7a		ply				ply
.3924	28		plp				plp
.3925	4c 09 3f	jmp $3f09			jmp 	MInt32False 				; return 0 whatever.
.3928					_VMSuccess:
.3928	7a		ply				ply
.3929	28		plp				plp 								; if CS the it was val() so we want the value.
.392a	b0 03		bcs $392f			bcs 	_VMExit
.392c	4c 05 3f	jmp $3f05			jmp 	MInt32True 					; otherwise return true as successful.
.392f					_VMExit:
.392f	60		rts				rts
.3930					ConvertGetBase:
.3930	a9 8a		lda #$8a			lda 	#10+$80 					; default base 10 signed.
.3932	95 99		sta $99,x			sta 	esInt0+1,x
.3934	b1 28		lda ($28),y			lda 	(codePtr),y 				; check for ,base)
.3936	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.3938	d0 0e		bne $3948			bne 	_CGBDone 					; not found, should be )
.393a	e8		inx				inx 								; next level
.393b	c8		iny				iny 								; skip comma.
.393c	20 92 38	jsr $3892			jsr 	EvaluateSmallInteger		; evaluate the base.
.393f	ca		dex				dex
.3940	c9 02		cmp #$02			cmp 	#2 							; base range is 2..16
.3942	90 08		bcc $394c			bcc 	_CGBValue 					; (it should work as high as 37)
.3944	c9 11		cmp #$11			cmp 	#17
.3946	b0 04		bcs $394c			bcs 	_CGBValue
.3948					_CGBDone:
.3948	20 7a 3f	jsr $3f7a			jsr 	CheckRightParen
.394b	60		rts				rts
.394c					_CGBValue:
.394c	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.394e	20 27 15	jsr $1527		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary/event.asm

.3951					EventFunction:
.3951	20 c3 38	jsr $38c3			jsr 	EvaluateReference			; get the variable reference that tracks the event
.3954	b5 90		lda $90,x			lda 	esType,x
.3956	c9 80		cmp #$80			cmp 	#$80 						; must be integer reference
.3958	d0 56		bne $39b0			bne 	_EFType
.395a	20 87 3f	jsr $3f87			jsr 	CheckComma
.395d	e8		inx				inx
.395e	20 8a 38	jsr $388a			jsr 	EvaluateInteger		 		; get the elapsed time between firing.
.3961	20 7a 3f	jsr $3f7a			jsr 	CheckRightParen 			; finish off with the right bracket
.3964	ca		dex				dex
.3965	b5 a0		lda $a0,x			lda 	esInt1,x 					; check max of 32767, we use 16 bit for timers and
.3967	29 80		and #$80			and 	#$80 						; it doesn't work > 32767
.3969	15 a8		ora $a8,x			ora 	esInt2,x
.396b	15 b0		ora $b0,x			ora 	esInt3,x
.396d	d0 3c		bne $39ab			bne 	_EFValue
.396f	5a		phy				phy
.3970	da		phx				phx
.3971	a2 1c		ldx #$1c		ldx	#28
.3973	20 05 15	jsr $1505		jsr	deviceHandler
.3976	84 2d		sty $2d				sty 	temp1+1
.3978	85 2c		sta $2c				sta 	temp1
.397a	fa		plx				plx
.397b	20 8e 2c	jsr $2c8e			jsr 	TOSToTemp0 					; set temp0 to the address of the event variable
.397e	a0 03		ldy #$03			ldy 	#3							; if -ve
.3980	b1 2a		lda ($2a),y			lda 	(temp0),y
.3982	30 22		bmi $39a6			bmi 	_EFFail 	 				; straight out with fail, means "on pause".
.3984	a0 00		ldy #$00			ldy 	#0 							; is the fire time zero ?
.3986	b1 2a		lda ($2a),y			lda 	(temp0),y
.3988	c8		iny				iny
.3989	11 2a		ora ($2a),y			ora 	(temp0),y
.398b	f0 16		beq $39a3			beq 	_EFInitialise 				; if so, initialise the value but return false.
.398d	a0 00		ldy #$00			ldy 	#0 							; calculate trigger - timer
.398f	38		sec				sec
.3990	b1 2a		lda ($2a),y			lda 	(temp0),y
.3992	e5 2c		sbc $2c				sbc 	temp1
.3994	c8		iny				iny
.3995	b1 2a		lda ($2a),y			lda 	(temp0),y
.3997	e5 2d		sbc $2d				sbc 	temp1+1
.3999	10 0b		bpl $39a6			bpl 	_EFFail 					; if trigger >= timer then return False
.399b	20 b5 39	jsr $39b5			jsr 	SetEventTimer 				; reset the timer for next time.
.399e	20 05 3f	jsr $3f05			jsr	 	MInt32True 					; and treutn true as fired.
.39a1	7a		ply				ply
.39a2	60		rts				rts
.39a3					_EFInitialise:
.39a3	20 b5 39	jsr $39b5			jsr		SetEventTimer 				; set trigger time to time + elapsed
.39a6					_EFFail:
.39a6	7a		ply				ply
.39a7	20 09 3f	jsr $3f09			jsr 	MInt32False
.39aa	60		rts				rts
.39ab					_EFValue:
.39ab	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.39ad	20 27 15	jsr $1527		jsr	errorHandler
.39b0					_EFType:
.39b0	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.39b2	20 27 15	jsr $1527		jsr	errorHandler
.39b5					SetEventTimer:
.39b5	a0 00		ldy #$00			ldy 	#0
.39b7	18		clc				clc
.39b8	a5 2c		lda $2c				lda 	temp1
.39ba	75 99		adc $99,x			adc 	esInt0+1,x
.39bc	91 2a		sta ($2a),y			sta		(temp0),y
.39be	c8		iny				iny
.39bf	a5 2d		lda $2d				lda 	temp1+1
.39c1	75 a1		adc $a1,x			adc 	esInt1+1,x
.39c3	91 2a		sta ($2a),y			sta		(temp0),y
.39c5	88		dey				dey
.39c6	11 2a		ora ($2a),y			ora 	(temp0),y 					; if the result is non zero, exit
.39c8	d0 04		bne $39ce			bne 	_SETExit 					; zero means initialise.....
.39ca	a9 01		lda #$01			lda 	#1 							; timer zero won't work, so make it 1, which is
.39cc	91 2a		sta ($2a),y			sta 	(temp0),y 					; near enough.
.39ce					_SETExit:
.39ce	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary/unary.asm

.39cf					UnaryLen:
.39cf	20 dd 39	jsr $39dd			jsr 	ULStart
.39d2					ULFinish:
.39d2	b1 2a		lda ($2a),y			lda 	(temp0),y 					; get length prefix
.39d4	a4 32		ldy $32				ldy 	tempShort 					; get Y back
.39d6	20 18 3f	jsr $3f18			jsr 	MInt32Set8Bit 				; write it out.
.39d9	20 7a 3f	jsr $3f7a			jsr 	CheckRightParen
.39dc	60		rts				rts
.39dd	20 7f 38	jsr $387f	ULStart:jsr 	EvaluateString
.39e0	b5 98		lda $98,x			lda 	esInt0,x 					; copy address of string to temp0
.39e2	85 2a		sta $2a				sta 	temp0
.39e4	b5 a0		lda $a0,x			lda 	esInt1,x
.39e6	85 2b		sta $2b				sta 	temp0+1
.39e8	84 32		sty $32				sty 	tempShort 					; get length
.39ea	a0 00		ldy #$00			ldy 	#0
.39ec	60		rts				rts
.39ed					UnaryAsc:
.39ed	20 dd 39	jsr $39dd			jsr 	ULStart 					; same as LEN() get string, save Y, point to length.
.39f0	b1 2a		lda ($2a),y			lda 	(temp0),y 					; read length
.39f2	c8		iny				iny 		 						; point to first character, we can do LEN code after that
.39f3	c9 00		cmp #$00			cmp 	#0
.39f5	d0 db		bne $39d2			bne 	ULFinish 					; if length = 0 then error : asc("") -> error.
.39f7	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.39f9	20 27 15	jsr $1527		jsr	errorHandler
.39fc					UnaryAbs:
.39fc	20 74 38	jsr $3874			jsr 	EvaluateNumeric 			; some numeric value
.39ff	b0 07		bcs $3a08			bcs 	_UAFloat 					; CS then float, so use that function
.3a01	20 be 3e	jsr $3ebe			jsr 	MInt32Absolute 				; int version
.3a04	20 7a 3f	jsr $3f7a			jsr 	CheckRightParen
.3a07	60		rts				rts
.3a08					_UAFloat:
.3a08	8a		txa				txa 								; float version
.3a09	a2 02		ldx #$02		ldx	#2
.3a0b	20 aa 27	jsr $27aa		jsr	floatingpointHandler
.3a0e	aa		tax				tax
.3a0f	20 7a 3f	jsr $3f7a			jsr 	CheckRightParen
.3a12	60		rts				rts
.3a13					UnarySgn:
.3a13	20 74 38	jsr $3874			jsr 	EvaluateNumeric 			; same as above but sign of value
.3a16	b0 07		bcs $3a1f			bcs 	_USFloat
.3a18	20 f6 3e	jsr $3ef6			jsr 	MInt32Sign
.3a1b	20 7a 3f	jsr $3f7a			jsr 	CheckRightParen
.3a1e	60		rts				rts
.3a1f					_USFloat:
.3a1f	8a		txa				txa
.3a20	a2 10		ldx #$10		ldx	#16
.3a22	20 aa 27	jsr $27aa		jsr	floatingpointHandler
.3a25	aa		tax				tax
.3a26	20 7a 3f	jsr $3f7a			jsr 	CheckRightParen
.3a29	60		rts				rts
.3a2a					UnaryPeek:
.3a2a	20 56 3a	jsr $3a56			jsr 	PDLCode 					; each has common setup code put reads 1,2 or 4 bytes
.3a2d	4c 4a 3a	jmp $3a4a			jmp 	PDLByte0
.3a30					UnaryDeek:
.3a30	20 56 3a	jsr $3a56			jsr 	PDLCode
.3a33	4c 44 3a	jmp $3a44			jmp 	PDLByte1
.3a36					UnaryLeek:
.3a36	20 56 3a	jsr $3a56			jsr 	PDLCode
.3a39	a0 03		ldy #$03			ldy 	#3							; read 3-2
.3a3b	b1 2a		lda ($2a),y			lda 	(temp0),y
.3a3d	95 b0		sta $b0,x			sta 	esInt3,x
.3a3f	88		dey				dey
.3a40	b1 2a		lda ($2a),y			lda 	(temp0),y
.3a42	95 a8		sta $a8,x			sta 	esInt2,x
.3a44					PDLByte1:
.3a44	a0 01		ldy #$01			ldy 	#1
.3a46	b1 2a		lda ($2a),y			lda 	(temp0),y
.3a48	95 a0		sta $a0,x			sta 	esInt1,x
.3a4a					PDLByte0:
.3a4a	a0 00		ldy #$00			ldy 	#0
.3a4c	b1 2a		lda ($2a),y			lda 	(temp0),y
.3a4e	95 98		sta $98,x			sta 	esInt0,x
.3a50	a4 32		ldy $32				ldy 	tempShort 					; restore Y
.3a52	20 7a 3f	jsr $3f7a			jsr 	CheckRightParen 			; check right and return
.3a55	60		rts				rts
.3a56					PDLCode:
.3a56	20 8a 38	jsr $388a			jsr 	EvaluateInteger 			; some address
.3a59	b5 98		lda $98,x			lda 	esInt0,x 					; copy address of string to temp0
.3a5b	85 2a		sta $2a				sta 	temp0
.3a5d	b5 a0		lda $a0,x			lda 	esInt1,x
.3a5f	85 2b		sta $2b				sta 	temp0+1
.3a61	a9 00		lda #$00			lda 	#0 							; zero upper 3 bytes of result, type okay.
.3a63	95 a0		sta $a0,x			sta 	esInt1,x 					; PEEK needs upper 3 cleared
.3a65	95 a8		sta $a8,x			sta 	esInt2,x
.3a67	95 b0		sta $b0,x			sta 	esInt3,x
.3a69	84 32		sty $32				sty 	tempShort 					; save Y
.3a6b	60		rts				rts
.3a6c					Unary_Random:
.3a6c	20 39 3f	jsr $3f39			jsr 	MInt32Random 				; generate random number.
.3a6f	b1 28		lda ($28),y			lda 	(codePtr),y 				; check followed by )
.3a71	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.3a73	f0 08		beq $3a7d			beq 	_URExit
.3a75	e8		inx				inx 								; load range 0..r-1 into +1
.3a76	20 8a 38	jsr $388a			jsr 	EvaluateInteger
.3a79	ca		dex				dex
.3a7a	20 61 3d	jsr $3d61			jsr 	MInt32Modulus 				; calculate random % modulus
.3a7d					_URExit:
.3a7d	20 7a 3f	jsr $3f7a			jsr 	CheckRightParen 			; check right and return
.3a80	60		rts				rts
.3a81					Unary_Min:
.3a81	a9 01		lda #$01			lda 	#1 							; c1 cmp c2 needs to be > e.g. c1 > c2
.3a83	d0 02		bne $3a87			bne 	UnaryMBody
.3a85					Unary_Max:
.3a85	a9 ff		lda #$ff			lda 	#$FF 						; c1 cmp c2 needs to be < e.g. c1 < c2
.3a87					UnaryMBody:
.3a87	48		pha				pha 								; save comparator on stack, shows min or max
.3a88	20 6b 38	jsr $386b			jsr 	Evaluate 					; get the first thing to check
.3a8b					_UnaryMLoop:
.3a8b	b1 28		lda ($28),y			lda 	(codePtr),y 				; found ), indicates end.
.3a8d	c8		iny				iny
.3a8e	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.3a90	f0 09		beq $3a9b			beq 	_UnaryMExit
.3a92	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; found , indicates more.
.3a94	f0 07		beq $3a9d			beq 	_UnaryMCompare
.3a96	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.3a98	20 27 15	jsr $1527		jsr	errorHandler
.3a9b					_UnaryMExit:
.3a9b	68		pla				pla 								; done so throw comparator and return.
.3a9c	60		rts				rts
.3a9d					_UnaryMCompare:
.3a9d	e8		inx				inx 								; get the 2nd thing to evaluate
.3a9e	20 6b 38	jsr $386b			jsr 	Evaluate
.3aa1	ca		dex				dex
.3aa2	20 33 36	jsr $3633			jsr 	PerformComparison 			; this is part of evaluate/compare.asm
.3aa5	85 32		sta $32				sta 	tempShort 					; save result
.3aa7	68		pla				pla 								; get what we need
.3aa8	48		pha				pha
.3aa9	c5 32		cmp $32				cmp 	tempShort 					; did we get it
.3aab	d0 de		bne $3a8b			bne 	_UnaryMLoop 				; no, try another value.
.3aad	20 09 3f	jsr $3f09			jsr 	MInt32False 				; promote 2nd to 1st.
.3ab0	20 ef 3d	jsr $3def			jsr 	MInt32Add
.3ab3	4c 8b 3a	jmp $3a8b			jmp 	_UnaryMLoop
.3ab6					Unary_Page:
.3ab6	20 09 3f	jsr $3f09			jsr 	MInt32False 				; zero
.3ab9	ad c8 0a	lda $0ac8			lda 	basePage 					; copy base page address in.
.3abc	95 98		sta $98,x			sta 	esInt0,x
.3abe	ad c9 0a	lda $0ac9			lda 	basePage+1
.3ac1	95 a0		sta $a0,x			sta 	esInt1,x
.3ac3	60		rts				rts
.3ac4					UnaryReference:
.3ac4	a9 0f		lda #$0f			lda 	#15
.3ac6	20 01 37	jsr $3701			jsr 	EvaluateLevel 				; evaluate term and don't deference.
.3ac9	b5 90		lda $90,x			lda 	esType,x 					; check it's a reference.
.3acb	10 05		bpl $3ad2			bpl 	UType
.3acd	a9 00		lda #$00			lda 	#0 							; make it an integer
.3acf	95 90		sta $90,x			sta 	esType,x
.3ad1	60		rts				rts
.3ad2					UType:
.3ad2	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.3ad4	20 27 15	jsr $1527		jsr	errorHandler
.3ad7					UnaryHexMarker:
.3ad7	4c 5c 38	jmp $385c			jmp 	EvaluateIntegerTerm
.3ada					UnaryComplement:
.3ada	20 5c 38	jsr $385c			jsr 	EvaluateIntegerTerm
.3add	20 dd 3e	jsr $3edd			jsr 	MInt32Not
.3ae0	60		rts				rts
.3ae1					UnaryIntToFloat:
.3ae1	20 74 38	jsr $3874			jsr 	EvaluateNumeric				; some number
.3ae4	b5 90		lda $90,x			lda 	esType,x 					; if float already, exit
.3ae6	d0 0b		bne $3af3			bne 	_UIFExit
.3ae8	8a		txa				txa 								; convert and set type
.3ae9	a2 1c		ldx #$1c		ldx	#28
.3aeb	20 aa 27	jsr $27aa		jsr	floatingpointHandler
.3aee	aa		tax				tax
.3aef	a9 01		lda #$01			lda 	#1
.3af1	95 90		sta $90,x			sta 	esType,x
.3af3					_UIFExit:
.3af3	60		rts				rts
.3af4					UnaryFloatToInt:
.3af4	20 74 38	jsr $3874			jsr 	EvaluateNumeric 			; the number
.3af7	b5 90		lda $90,x			lda 	esType,x 					; if int already exit
.3af9	f0 0b		beq $3b06			beq 	_UFIExit
.3afb	8a		txa				txa 								; convert to int
.3afc	a2 14		ldx #$14		ldx	#20
.3afe	20 aa 27	jsr $27aa		jsr	floatingpointHandler
.3b01	aa		tax				tax
.3b02	a9 00		lda #$00			lda 	#0 							; set type
.3b04	95 90		sta $90,x			sta 	esType,x
.3b06					_UFIExit:
.3b06	60		rts				rts
.3b07					UnaryAlloc:
.3b07	e8		inx				inx 								; evaluate memory required
.3b08	20 8a 38	jsr $388a			jsr 	EvaluateInteger
.3b0b	20 7a 3f	jsr $3f7a			jsr 	CheckRightParen
.3b0e	ca		dex				dex
.3b0f	b5 a9		lda $a9,x			lda 	esInt2+1,x 					; check at least in 64k range.
.3b11	15 b1		ora $b1,x			ora 	esInt3+1,x
.3b13	d0 1d		bne $3b32			bne 	_UABadValue
.3b15	20 09 3f	jsr $3f09			jsr 	MInt32False					; zero return.
.3b18	a5 36		lda $36				lda 	lowMemory+1 				; copy low memory in
.3b1a	95 a0		sta $a0,x			sta 	esInt1,x
.3b1c	a5 35		lda $35				lda 	lowMemory
.3b1e	95 98		sta $98,x			sta 	esInt0,x
.3b20	18		clc				clc 								; add alloc required.
.3b21	75 99		adc $99,x			adc 	esInt0+1,x
.3b23	85 35		sta $35				sta 	lowMemory
.3b25	a5 36		lda $36				lda 	lowMemory+1
.3b27	75 a1		adc $a1,x			adc 	esInt1+1,x
.3b29	85 36		sta $36				sta 	lowMemory+1
.3b2b	b0 05		bcs $3b32			bcs		_UABadValue 				; overflow definitely bad.
.3b2d	c5 34		cmp $34				cmp 	highMemory+1
.3b2f	b0 01		bcs $3b32			bcs 	_UABadValue 				; out of memory bad.
.3b31	60		rts				rts
.3b32					_UABadValue:
.3b32	a2 22		ldx #$22			ldx 	#ErrorID_Memory
.3b34	20 27 15	jsr $1527		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary/unary2.asm

.3b37					UnaryTimer:
.3b37	20 7a 3f	jsr $3f7a			jsr 	CheckRightParen 			; no parameters
.3b3a	5a		phy				phy
.3b3b	20 30 3f	jsr $3f30			jsr 	MInt32Zero 					; zero result
.3b3e	86 2a		stx $2a				stx 	temp0 						; returning in YA so can't use .pshx
.3b40	a2 1c		ldx #$1c		ldx	#28
.3b42	20 05 15	jsr $1505		jsr	deviceHandler
.3b45	a6 2a		ldx $2a				ldx 	temp0						; restore X and update 16 bit result
.3b47	95 98		sta $98,x			sta 	esInt0,x
.3b49	98		tya				tya
.3b4a	95 a0		sta $a0,x			sta 	esInt1,x
.3b4c	7a		ply				ply
.3b4d	60		rts				rts
.3b4e					UnaryInkey:
.3b4e	20 7a 3f	jsr $3f7a			jsr 	CheckRightParen
.3b51	86 2a		stx $2a				stx 	temp0
.3b53	a2 08		ldx #$08		ldx	#8
.3b55	20 05 15	jsr $1505		jsr	deviceHandler
.3b58	a6 2a		ldx $2a				ldx 	temp0
.3b5a	20 18 3f	jsr $3f18			jsr 	MInt32Set8Bit
.3b5d	60		rts				rts
.3b5e					UnaryGet:
.3b5e	20 7a 3f	jsr $3f7a			jsr 	CheckRightParen
.3b61	86 2a		stx $2a				stx 	temp0
.3b63					_UGLoop:
.3b63	a2 18		ldx #$18		ldx	#24
.3b65	20 05 15	jsr $1505		jsr	deviceHandler
.3b68	a2 08		ldx #$08		ldx	#8
.3b6a	20 05 15	jsr $1505		jsr	deviceHandler
.3b6d	c9 00		cmp #$00			cmp 	#0
.3b6f	f0 f2		beq $3b63			beq 	_UGLoop
.3b71	a6 2a		ldx $2a				ldx 	temp0
.3b73	20 18 3f	jsr $3f18			jsr 	MInt32Set8Bit
.3b76	60		rts				rts
.3b77					UnaryGetString:
.3b77	20 5e 3b	jsr $3b5e			jsr 	UnaryGet
.3b7a					UGSDoChr:
.3b7a	4c c7 3b	jmp $3bc7			jmp 	ChrCode
.3b7d					UnaryInkeyString:
.3b7d	20 4e 3b	jsr $3b4e			jsr 	UnaryInkey
.3b80	b5 98		lda $98,x			lda 	esInt0,x
.3b82	d0 f6		bne $3b7a			bne 	UGSDoChr
.3b84	8a		txa				txa
.3b85	a2 08		ldx #$08		ldx	#8
.3b87	20 a0 42	jsr $42a0		jsr	stringHandler
.3b8a	aa		tax				tax
.3b8b	60		rts				rts
.3b8c					UnarySys:
.3b8c	20 8a 38	jsr $388a			jsr 	EvaluateInteger 				; get the address
.3b8f	20 7a 3f	jsr $3f7a			jsr 	CheckRightParen
.3b92	20 8e 2c	jsr $2c8e			jsr 	TOSToTemp0 						; copy call address to temp0
.3b95	da		phx				phx
.3b96	5a		phy				phy
.3b97	ad 00 0a	lda $0a00			lda 	("A"-"A")*4+SingleLetterVar 	; load AXY
.3b9a	ae 5c 0a	ldx $0a5c			ldx 	("X"-"A")*4+SingleLetterVar
.3b9d	ac 60 0a	ldy $0a60			ldy 	("Y"-"A")*4+SingleLetterVar
.3ba0	20 ad 3b	jsr $3bad			jsr 	_CallTemp0
.3ba3	85 32		sta $32				sta 	tempShort 						; restore YX
.3ba5	7a		ply				ply
.3ba6	fa		plx				plx
.3ba7	a5 32		lda $32				lda 	tempShort
.3ba9	20 18 3f	jsr $3f18			jsr 	MInt32Set8Bit 					; return result.
.3bac	60		rts				rts
.3bad					_CallTemp0:
.3bad	6c 2a 00	jmp ($002a)			jmp 	(temp0)
.3bb0					UnaryMem:
.3bb0	20 09 3f	jsr $3f09			jsr 	MInt32False 					; set to false (e.g. 0)
.3bb3	38		sec				sec
.3bb4	a5 33		lda $33				lda 	highMemory 						; calculate value
.3bb6	e5 35		sbc $35				sbc 	lowMemory
.3bb8	95 98		sta $98,x			sta 	esInt0,x
.3bba	a5 34		lda $34				lda 	highMemory+1
.3bbc	e5 36		sbc $36				sbc 	lowMemory+1
.3bbe	95 a0		sta $a0,x			sta 	esInt1,x
.3bc0	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary/unarystr.asm

.3bc1					ExecChr:
.3bc1	20 92 38	jsr $3892			jsr 	EvaluateSmallInteger		; character number 0-255
.3bc4	20 7a 3f	jsr $3f7a			jsr 	CheckRightParen				; right bracket
.3bc7					ChrCode:
.3bc7	5a		phy				phy
.3bc8	8a		txa				txa 								; A = stack
.3bc9	b4 98		ldy $98,x			ldy 	esInt0,x					; Y = character
.3bcb	a2 02		ldx #$02		ldx	#2
.3bcd	20 a0 42	jsr $42a0		jsr	stringHandler
.3bd0	aa		tax				tax 								; X = stack
.3bd1	7a		ply				ply
.3bd2	60		rts				rts
.3bd3					ExecLower:
.3bd3	38		sec				sec 								; set carry is lower
.3bd4	b0 01		bcs $3bd7			bcs 	ExecUpperLower
.3bd6					ExecUpper:
.3bd6	18		clc				clc 								; clear carry is upper
.3bd7					ExecUpperLower:
.3bd7	08		php				php 								; save carry
.3bd8	20 7f 38	jsr $387f			jsr 	EvaluateString 				; string to stack,X
.3bdb	20 7a 3f	jsr $3f7a			jsr 	CheckRightParen 			; check closing right bracket.
.3bde	28		plp				plp 								; restore carry, save Y
.3bdf	5a		phy				phy
.3be0	a9 00		lda #$00			lda 	#0 							; A zero if upper, 1 if lower.
.3be2	2a		rol a				rol 	a
.3be3	a8		tay				tay 								; now in Y
.3be4	8a		txa				txa 								; do the substring and exit.
.3be5	a2 0c		ldx #$0c		ldx	#12
.3be7	20 a0 42	jsr $42a0		jsr	stringHandler
.3bea	aa		tax				tax
.3beb	7a		ply				ply
.3bec	60		rts				rts
.3bed					ExecLeft:
.3bed	20 7f 38	jsr $387f			jsr 	EvaluateString 				; string to stack,X
.3bf0	20 87 3f	jsr $3f87			jsr 	CheckComma
.3bf3	e8		inx				inx
.3bf4	a9 01		lda #$01			lda 	#1 							; 1 for 2nd parameter.
.3bf6	20 18 3f	jsr $3f18			jsr 	MInt32Set8Bit
.3bf9	e8		inx				inx
.3bfa	20 92 38	jsr $3892			jsr 	EvaluateSmallInteger 		; smallint 3rd parameter
.3bfd					ExecSubstring:
.3bfd	ca		dex				dex 								; fix up X
.3bfe	ca		dex				dex
.3bff	20 7a 3f	jsr $3f7a			jsr 	CheckRightParen 			; check closing right bracket.
.3c02	8a		txa				txa 								; do the substring and exit.
.3c03	a2 0e		ldx #$0e		ldx	#14
.3c05	20 a0 42	jsr $42a0		jsr	stringHandler
.3c08	aa		tax				tax
.3c09	60		rts				rts
.3c0a					ExecMid:
.3c0a	20 7f 38	jsr $387f			jsr 	EvaluateString 				; string to stack,X
.3c0d	20 87 3f	jsr $3f87			jsr 	CheckComma
.3c10	e8		inx				inx
.3c11	20 92 38	jsr $3892			jsr 	EvaluateSmallInteger 		; smallint 2nd parameter
.3c14	c9 00		cmp #$00			cmp 	#0
.3c16	f0 15		beq $3c2d			beq 	_EMValue
.3c18	e8		inx				inx
.3c19	a9 ff		lda #$ff			lda 	#255 						; 255 default for 3nd parameter - this is optional.
.3c1b	20 18 3f	jsr $3f18			jsr 	MInt32Set8Bit
.3c1e	b1 28		lda ($28),y			lda 	(codePtr),y 				; is there a ) next
.3c20	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN 				; if so, just MID$(a$,2)
.3c22	f0 d9		beq $3bfd			beq 	ExecSubString
.3c24	20 87 3f	jsr $3f87			jsr 	CheckComma
.3c27	20 92 38	jsr $3892			jsr 	EvaluateSmallInteger 		; smallint 2nd parameter
.3c2a	4c fd 3b	jmp $3bfd			jmp 	ExecSubString
.3c2d					_EMValue:
.3c2d	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.3c2f	20 27 15	jsr $1527		jsr	errorHandler
.3c32					ExecRight:
.3c32	20 7f 38	jsr $387f			jsr 	EvaluateString 				; string to stack,X
.3c35	20 87 3f	jsr $3f87			jsr 	CheckComma
.3c38	e8		inx				inx
.3c39	20 92 38	jsr $3892			jsr 	EvaluateSmallInteger 		; smallint 2nd parameter.
.3c3c	ca		dex				dex
.3c3d	5a		phy				phy
.3c3e	b5 98		lda $98,x			lda 	esInt0,x 					; copy address of string to temp0
.3c40	85 2a		sta $2a				sta 	temp0
.3c42	b5 a0		lda $a0,x			lda 	esInt1,x
.3c44	85 2b		sta $2b				sta 	temp0+1
.3c46	a0 00		ldy #$00			ldy 	#0 							; point to length
.3c48	b1 2a		lda ($2a),y			lda 	(temp0),y 					; get the length.
.3c4a	18		clc				clc 								; add 1.
.3c4b	69 01		adc #$01			adc 	#1
.3c4d	38		sec				sec
.3c4e	f5 99		sbc $99,x			sbc 	esInt0+1,x  				; subtract right count.
.3c50	f0 02		beq $3c54			beq		_ERMake1 					; if zero, make it 1.
.3c52	b0 02		bcs $3c56			bcs		_EROkay
.3c54					_ERMake1:
.3c54	a9 01		lda #$01			lda 	#1 							; start position.
.3c56					_EROkay:
.3c56	e8		inx				inx 								; set start pos.
.3c57	95 98		sta $98,x			sta 	esInt0,x
.3c59	e8		inx				inx
.3c5a	a9 ff		lda #$ff			lda 	#255 						; 255 default for 3nd parameter.
.3c5c	20 18 3f	jsr $3f18			jsr 	MInt32Set8Bit
.3c5f	7a		ply				ply
.3c60	4c fd 3b	jmp $3bfd			jmp 	ExecSubString 				; do the substring code.

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32binary.asm

.3c63					MInt32And:
.3c63	b5 98		lda $98,x			lda 	esInt0,x
.3c65	35 99		and $99,x			and 	esInt0+1,x
.3c67	95 98		sta $98,x			sta 	esInt0,x
.3c69	b5 a0		lda $a0,x			lda 	esInt1,x
.3c6b	35 a1		and $a1,x			and 	esInt1+1,x
.3c6d	95 a0		sta $a0,x			sta 	esInt1,x
.3c6f	b5 a8		lda $a8,x			lda 	esInt2,x
.3c71	35 a9		and $a9,x			and 	esInt2+1,x
.3c73	95 a8		sta $a8,x			sta 	esInt2,x
.3c75	b5 b0		lda $b0,x			lda 	esInt3,x
.3c77	35 b1		and $b1,x			and 	esInt3+1,x
.3c79	95 b0		sta $b0,x			sta 	esInt3,x
.3c7b	60		rts				rts
.3c7c					MInt32Or:
.3c7c	b5 98		lda $98,x			lda 	esInt0,x
.3c7e	15 99		ora $99,x			ora 	esInt0+1,x
.3c80	95 98		sta $98,x			sta 	esInt0,x
.3c82	b5 a0		lda $a0,x			lda 	esInt1,x
.3c84	15 a1		ora $a1,x			ora 	esInt1+1,x
.3c86	95 a0		sta $a0,x			sta 	esInt1,x
.3c88	b5 a8		lda $a8,x			lda 	esInt2,x
.3c8a	15 a9		ora $a9,x			ora 	esInt2+1,x
.3c8c	95 a8		sta $a8,x			sta 	esInt2,x
.3c8e	b5 b0		lda $b0,x			lda 	esInt3,x
.3c90	15 b1		ora $b1,x			ora 	esInt3+1,x
.3c92	95 b0		sta $b0,x			sta 	esInt3,x
.3c94	60		rts				rts
.3c95					MInt32Xor:
.3c95	b5 98		lda $98,x			lda 	esInt0,x
.3c97	55 99		eor $99,x			eor 	esInt0+1,x
.3c99	95 98		sta $98,x			sta 	esInt0,x
.3c9b	b5 a0		lda $a0,x			lda 	esInt1,x
.3c9d	55 a1		eor $a1,x			eor 	esInt1+1,x
.3c9f	95 a0		sta $a0,x			sta 	esInt1,x
.3ca1	b5 a8		lda $a8,x			lda 	esInt2,x
.3ca3	55 a9		eor $a9,x			eor 	esInt2+1,x
.3ca5	95 a8		sta $a8,x			sta 	esInt2,x
.3ca7	b5 b0		lda $b0,x			lda 	esInt3,x
.3ca9	55 b1		eor $b1,x			eor 	esInt3+1,x
.3cab	95 b0		sta $b0,x			sta 	esInt3,x
.3cad	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32compare.asm

.3cae					MInt32Compare:
.3cae	b5 98		lda $98,x			lda 	esInt0,x 					; equality check first.
.3cb0	d5 99		cmp $99,x			cmp 	esInt0+1,x
.3cb2	d0 13		bne $3cc7			bne 	MInt32Compare2
.3cb4	b5 a0		lda $a0,x			lda 	esInt1,x
.3cb6	d5 a1		cmp $a1,x			cmp 	esInt1+1,x
.3cb8	d0 0d		bne $3cc7			bne 	MInt32Compare2
.3cba	b5 a8		lda $a8,x			lda 	esInt2,x
.3cbc	d5 a9		cmp $a9,x			cmp 	esInt2+1,x
.3cbe	d0 07		bne $3cc7			bne 	MInt32Compare2
.3cc0	b5 b0		lda $b0,x			lda 	esInt3,x
.3cc2	55 b1		eor $b1,x			eor 	esInt3+1,x 					; EOR will return 0 if the same.
.3cc4	d0 01		bne $3cc7			bne 	MInt32Compare2
.3cc6	60		rts				rts
.3cc7					MInt32Compare2:
.3cc7	b5 98		lda $98,x			lda		esInt0,x 					; unsigned 32 bit comparison.
.3cc9	d5 99		cmp $99,x			cmp 	esInt0+1,x
.3ccb	b5 a0		lda $a0,x			lda		esInt1,x
.3ccd	f5 a1		sbc $a1,x			sbc 	esInt1+1,x
.3ccf	b5 a8		lda $a8,x			lda		esInt2,x
.3cd1	f5 a9		sbc $a9,x			sbc 	esInt2+1,x
.3cd3	b5 b0		lda $b0,x			lda		esInt3,x
.3cd5	f5 b1		sbc $b1,x			sbc 	esInt3+1,x
.3cd7	50 02		bvc $3cdb			bvc 	_I32LNoOverflow 			; make it signed 32 bit comparison
.3cd9	49 80		eor #$80			eor 	#$80
.3cdb					_I32LNoOverflow
.3cdb	30 03		bmi $3ce0			bmi 	MInt32CLess					; if -ve then return $FF
.3cdd	a9 01		lda #$01			lda 	#$01						; else return $01
.3cdf	60		rts				rts
.3ce0					MInt32CLess:
.3ce0	a9 ff		lda #$ff			lda 	#$FF
.3ce2	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32divide.asm

.3ce3					MInt32SDivide:
.3ce3	98		tya				tya  								; save Y, which is the count of negations
.3ce4	48		pha				pha
.3ce5	a0 00		ldy #$00			ldy 	#0 							; zero count
.3ce7	20 ff 3c	jsr $3cff			jsr 	_MInt32SRemSign 			; unsign TOS
.3cea	e8		inx				inx 								; unsign TOS+1
.3ceb	20 ff 3c	jsr $3cff			jsr 	_MInt32SRemSign
.3cee	ca		dex				dex
.3cef	98		tya				tya 								; save sign count on stack
.3cf0	48		pha				pha
.3cf1	20 08 3d	jsr $3d08			jsr 	MInt32UDivide 				; unsigned division
.3cf4	68		pla				pla 								; get sign count back
.3cf5	29 01		and #$01			and 	#1 							; if it is odd, then negate result
.3cf7	f0 03		beq $3cfc			beq 	_I32SNoNeg
.3cf9	20 c3 3e	jsr $3ec3			jsr 	MInt32Negate
.3cfc					_I32SNoNeg:
.3cfc	68		pla				pla 								; restoe Y and exit
.3cfd	a8		tay				tay
.3cfe	60		rts				rts
.3cff					_MInt32SRemSign:
.3cff	b5 b0		lda $b0,x			lda 	esInt3,x 					; is it -ve
.3d01	10 04		bpl $3d07			bpl 	_MInt32SRSExit
.3d03	c8		iny				iny 								; increment the sign count
.3d04	20 c3 3e	jsr $3ec3			jsr 	MInt32Negate 				; negate the value.
.3d07					_MInt32SRSExit:
.3d07	60		rts				rts
.3d08					MInt32UDivide:
.3d08	b5 99		lda $99,x			lda 	esInt0+1,x 					; check for division by zero
.3d0a	15 a1		ora $a1,x			ora 	esInt1+1,x
.3d0c	15 a2		ora $a2,x			ora 	esInt1+2,x
.3d0e	15 a3		ora $a3,x			ora 	esInt1+3,x
.3d10	f0 4a		beq $3d5c			beq 	_MInt32DZero
.3d12	e8		inx				inx 								; clear A
.3d13	e8		inx				inx
.3d14	20 09 3f	jsr $3f09			jsr 	MInt32False
.3d17	ca		dex				dex
.3d18	ca		dex				dex
.3d19	98		tya				tya 								; save Y on the stack
.3d1a	48		pha				pha
.3d1b	a0 20		ldy #$20			ldy 	#32 						; number of division passes
.3d1d					_MInt32UDLoop:
.3d1d	16 98		asl $98,x			asl 	esInt0,x					; shift QA left. First Q
.3d1f	36 a0		rol $a0,x			rol 	esInt1,x
.3d21	36 a8		rol $a8,x			rol 	esInt2,x
.3d23	36 b0		rol $b0,x			rol 	esInt3,x
.3d25	36 9a		rol $9a,x			rol 	esInt0+2,x 					; then A.
.3d27	36 a2		rol $a2,x			rol 	esInt1+2,x
.3d29	36 aa		rol $aa,x			rol 	esInt2+2,x
.3d2b	36 b2		rol $b2,x			rol 	esInt3+2,x
.3d2d	38		sec				sec 								; calculate A-M saving result on the stack
.3d2e	b5 9a		lda $9a,x			lda 	esInt0+2,x
.3d30	f5 99		sbc $99,x			sbc 	esInt0+1,x
.3d32	48		pha				pha
.3d33	b5 a2		lda $a2,x			lda 	esInt1+2,x
.3d35	f5 a1		sbc $a1,x			sbc 	esInt1+1,x
.3d37	48		pha				pha
.3d38	b5 aa		lda $aa,x			lda 	esInt2+2,x
.3d3a	f5 a9		sbc $a9,x			sbc 	esInt2+1,x
.3d3c	48		pha				pha
.3d3d	b5 b2		lda $b2,x			lda 	esInt3+2,x
.3d3f	f5 b1		sbc $b1,x			sbc 	esInt3+1,x
.3d41	90 10		bcc $3d53			bcc		_MInt32NoSubtract 			; if A < M (e.g. carry clear) then reject this.
.3d43	95 b2		sta $b2,x			sta 	esInt3+2,x 					; write result back to A
.3d45	68		pla				pla
.3d46	95 aa		sta $aa,x			sta 	esInt2+2,x
.3d48	68		pla				pla
.3d49	95 a2		sta $a2,x			sta 	esInt1+2,x
.3d4b	68		pla				pla
.3d4c	95 9a		sta $9a,x			sta 	esInt0+2,x
.3d4e	f6 98		inc $98,x			inc 	esInt0,x 					; sets bit 0 of Q - it was shifted left previously.
.3d50	4c 56 3d	jmp $3d56			jmp 	_MInt32Next 					; do the next iteration
.3d53					_MInt32NoSubtract:
.3d53	68		pla				pla
.3d54	68		pla				pla
.3d55	68		pla				pla
.3d56					_MInt32Next:
.3d56	88		dey				dey 								; do this 32 times.
.3d57	d0 c4		bne $3d1d			bne 	_MInt32UDLoop
.3d59	68		pla				pla 								; restore Y and exit
.3d5a	a8		tay				tay
.3d5b	60		rts				rts
.3d5c					_MInt32DZero:
.3d5c	a2 05		ldx #$05			ldx 	#ErrorID_DivZero
.3d5e	20 27 15	jsr $1527		jsr	errorHandler
.3d61					MInt32Modulus:
.3d61	20 08 3d	jsr $3d08			jsr 	MInt32UDivide 				; do the division.
.3d64	b5 b2		lda $b2,x			lda 	esInt3+2,x 					; copy 2nd on stack (the remainder) to the top.
.3d66	95 b0		sta $b0,x			sta 	esInt3,x
.3d68	b5 aa		lda $aa,x			lda 	esInt2+2,x
.3d6a	95 a8		sta $a8,x			sta 	esInt2,x
.3d6c	b5 a2		lda $a2,x			lda 	esInt1+2,x
.3d6e	95 a0		sta $a0,x			sta 	esInt1,x
.3d70	b5 9a		lda $9a,x			lda 	esInt0+2,x
.3d72	95 98		sta $98,x			sta 	esInt0,x
.3d74	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32fromstr.asm

.0dca					fs32Length:
>0dca							.fill 	1
.3d75					LinkInt32FromString:
.3d75	aa		tax				tax
.3d76	98		tya				tya
.3d77	20 7c 3d	jsr $3d7c			jsr 	MInt32FromString
.3d7a	8a		txa				txa
.3d7b	60		rts				rts
.3d7c					MInt32FromString:
.3d7c	85 32		sta $32				sta 	tempShort 					; save base
.3d7e	5a		phy				phy
.3d7f	a0 00		ldy #$00			ldy 	#0 							; get length of string to convert
.3d81	b1 2a		lda ($2a),y			lda 	(temp0),y
.3d83	8d ca 0d	sta $0dca			sta 	fs32Length
.3d86	f0 64		beq $3dec			beq 	_I32FSFail2					; fail if length zero.
.3d88	a0 01		ldy #$01			ldy 	#1 							; set index into string being read
.3d8a	b1 2a		lda ($2a),y			lda 	(temp0),y 					; look at first character
.3d8c	c9 2d		cmp #$2d			cmp 	#"-"						; is it a - character
.3d8e	d0 09		bne $3d99			bne 	_I32FSNotNegative
.3d90	ad ca 0d	lda $0dca			lda 	fs32Length 					; get length back.
.3d93	c9 01		cmp #$01			cmp 	#1 							; if 1 it is just a - on its own so fail.
.3d95	f0 55		beq $3dec			beq 	_I32FSFail2
.3d97	a0 02		ldy #$02			ldy 	#2 							; first digit of the number.
.3d99					_I32FSNotNegative:
.3d99	a5 32		lda $32				lda 	tempShort 					; get the base back.
.3d9b	c0 02		cpy #$02			cpy 	#2 							; if we read a -ve (e.g. Y == 2)
.3d9d	d0 02		bne $3da1			bne 	_I32FSNN2
.3d9f	09 80		ora #$80			ora 	#$80						; set bit 7, this indicates a negated result.
.3da1					_I32FSNN2:
.3da1	48		pha				pha 								; save base + final sign on stack.
.3da2	20 09 3f	jsr $3f09			jsr 	MInt32False 				; zero the return value.
.3da5					_I32FSMainLoop:
.3da5	68		pla				pla 								; get the base back into tempShort
.3da6	48		pha				pha
.3da7	29 7f		and #$7f			and 	#$7F
.3da9	85 32		sta $32				sta 	tempShort
.3dab	b1 2a		lda ($2a),y			lda 	(temp0),y 					; look at next character.
.3dad	c9 61		cmp #$61			cmp 	#"a" 						; fix up case.
.3daf	90 02		bcc $3db3			bcc 	_I32FSNotLC
.3db1	e9 20		sbc #$20			sbc 	#32
.3db3					_I32FSNotLC:
.3db3	38		sec				sec 								; subtract 48 (ASCII "0") - ASCII to Hex conversion
.3db4	e9 30		sbc #$30			sbc 	#"0"
.3db6	90 33		bcc $3deb			bcc 	_I32FSFail 					; nothing more to do.
.3db8	c9 0a		cmp #$0a			cmp 	#9+1 						; if it is 0-9 validate vs base.
.3dba	90 06		bcc $3dc2			bcc 	_I32FSValidate
.3dbc	c9 11		cmp #$11			cmp 	#17 						; is it between 58 and 64 ? if so bad.
.3dbe	90 2b		bcc $3deb			bcc 	_I32FSFail
.3dc0	e9 07		sbc #$07			sbc 	#7 							; adjust into range so now character is 0->nnn
.3dc2					_I32FSValidate:
.3dc2	c5 32		cmp $32				cmp 	tempShort 					; compare against the base.
.3dc4	b0 25		bcs $3deb			bcs 	_I32FSFail 					; sorry, too large for this base, so fail.
.3dc6	48		pha				pha 								; save the new digit value.
.3dc7	e8		inx				inx 								; put base into next slot up on stack
.3dc8	a5 32		lda $32				lda 	tempShort
.3dca	20 18 3f	jsr $3f18			jsr 	MInt32Set8Bit
.3dcd	ca		dex				dex
.3dce	20 23 3e	jsr $3e23			jsr 	MInt32Multiply 				; multiply current by the base
.3dd1	e8		inx				inx
.3dd2	68		pla				pla  								; put additive into next slot
.3dd3	20 18 3f	jsr $3f18			jsr 	MInt32Set8Bit
.3dd6	ca		dex				dex
.3dd7	20 ef 3d	jsr $3def			jsr 	MInt32Add 					; and add it
.3dda	c8		iny				iny 								; bump the character pointer
.3ddb	cc ca 0d	cpy $0dca			cpy 	fs32Length 					; until > length.
.3dde	f0 c5		beq $3da5			beq 	_I32FSMainLoop
.3de0	90 c3		bcc $3da5			bcc 	_I32FSMainLoop
.3de2					_I32FSDone:
.3de2	68		pla				pla 								; get base/final sign back
.3de3	10 03		bpl $3de8			bpl 	_I32FSNN3
.3de5	20 c3 3e	jsr $3ec3			jsr 	MInt32Negate 				; negate the result.
.3de8					_I32FSNN3:
.3de8	7a		ply				ply
.3de9	38		sec				sec
.3dea	60		rts				rts
.3deb					_I32FSFail:
.3deb	68		pla				pla
.3dec					_I32FSFail2:
.3dec	7a		ply				ply
.3ded	18		clc				clc
.3dee	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32math.asm

.3def					MInt32Add:
.3def	18		clc				clc
.3df0	b5 98		lda $98,x			lda 	esInt0,x
.3df2	75 99		adc $99,x			adc 	esInt0+1,x
.3df4	95 98		sta $98,x			sta 	esInt0,x
.3df6	b5 a0		lda $a0,x			lda 	esInt1,x
.3df8	75 a1		adc $a1,x			adc 	esInt1+1,x
.3dfa	95 a0		sta $a0,x			sta 	esInt1,x
.3dfc	b5 a8		lda $a8,x			lda 	esInt2,x
.3dfe	75 a9		adc $a9,x			adc 	esInt2+1,x
.3e00	95 a8		sta $a8,x			sta 	esInt2,x
.3e02	b5 b0		lda $b0,x			lda 	esInt3,x
.3e04	75 b1		adc $b1,x			adc 	esInt3+1,x
.3e06	95 b0		sta $b0,x			sta 	esInt3,x
.3e08	60		rts				rts
.3e09					MInt32Sub:
.3e09	38		sec				sec
.3e0a	b5 98		lda $98,x			lda 	esInt0,x
.3e0c	f5 99		sbc $99,x			sbc 	esInt0+1,x
.3e0e	95 98		sta $98,x			sta 	esInt0,x
.3e10	b5 a0		lda $a0,x			lda 	esInt1,x
.3e12	f5 a1		sbc $a1,x			sbc 	esInt1+1,x
.3e14	95 a0		sta $a0,x			sta 	esInt1,x
.3e16	b5 a8		lda $a8,x			lda 	esInt2,x
.3e18	f5 a9		sbc $a9,x			sbc 	esInt2+1,x
.3e1a	95 a8		sta $a8,x			sta 	esInt2,x
.3e1c	b5 b0		lda $b0,x			lda 	esInt3,x
.3e1e	f5 b1		sbc $b1,x			sbc 	esInt3+1,x
.3e20	95 b0		sta $b0,x			sta 	esInt3,x
.3e22	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32multiply.asm

.3e23					MInt32Multiply:
.3e23	e8		inx				inx 								; copy 2nd -> 3rd
.3e24	20 49 3e	jsr $3e49			jsr 	MInt32CopyUp
.3e27	ca		dex				dex
.3e28	20 49 3e	jsr $3e49			jsr 	MInt32CopyUp 				; copy 1st -> 2nd
.3e2b	20 09 3f	jsr $3f09			jsr 	MInt32False 				; zero 1st.
.3e2e					_I32Loop:
.3e2e	b5 9a		lda $9a,x			lda 	esInt0+2,x 					; get low bit of 3rd
.3e30	29 01		and #$01			and 	#1
.3e32	f0 03		beq $3e37			beq 	_I32NoAdd 					; if set
.3e34	20 ef 3d	jsr $3def			jsr 	MInt32Add 					; add 2nd to 1st.
.3e37					_I32NoAdd:
.3e37	e8		inx				inx 								; shift 2nd left
.3e38	20 1e 3f	jsr $3f1e			jsr 	MInt32ShiftLeft
.3e3b	e8		inx				inx  								; shift 3rd right
.3e3c	20 27 3f	jsr $3f27			jsr 	MInt32ShiftRight
.3e3f	20 30 3f	jsr $3f30			jsr 	MInt32Zero 					; check if zero.
.3e42	08		php				php 								; save status bits
.3e43	ca		dex				dex 	 							; point back to 1st
.3e44	ca		dex				dex
.3e45	28		plp				plp 								; get status bits
.3e46	d0 e6		bne $3e2e			bne 	_I32Loop 					; if non-zero keep going.
.3e48	60		rts				rts
.3e49					MInt32CopyUp:
.3e49	b5 98		lda $98,x			lda 	esInt0,x
.3e4b	95 99		sta $99,x			sta 	esInt0+1,x
.3e4d	b5 a0		lda $a0,x			lda 	esInt1,x
.3e4f	95 a1		sta $a1,x			sta 	esInt1+1,x
.3e51	b5 a8		lda $a8,x			lda 	esInt2,x
.3e53	95 a9		sta $a9,x			sta 	esInt2+1,x
.3e55	b5 b0		lda $b0,x			lda 	esInt3,x
.3e57	95 b1		sta $b1,x			sta 	esInt3+1,x
.3e59	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32tostr.asm

>0dcb					MCharCount:	.fill 	1						; count of converted characters
.3e5a					MLInt32ToString:
.3e5a	aa		tax				tax									; module passes stack in A, base in Y
.3e5b	98		tya				tya
.3e5c	20 61 3e	jsr $3e61			jsr 	MInt32ToString
.3e5f	8a		txa				txa
.3e60	60		rts				rts
.3e61					MInt32ToString:
.3e61	48		pha				pha 								; save base
.3e62	85 32		sta $32				sta 	tempShort 					; save target base.
.3e64	a9 00		lda #$00			lda 	#0
.3e66	8d cb 0d	sta $0dcb			sta 	MCharCount 					; clear character count to 0
.3e69	5a		phy				phy
.3e6a	a5 32		lda $32				lda 	tempShort 					; check if we are signed conversion
.3e6c	10 10		bpl $3e7e			bpl 	_I32TSUnsigned
.3e6e	48		pha				pha 								; save base on stack.
.3e6f	b5 b0		lda $b0,x			lda 	esInt3,x 					; is it actually negative
.3e71	10 08		bpl $3e7b			bpl 	_I32TSNoFlip
.3e73	a9 2d		lda #$2d			lda 	#"-" 						; write a '-' prefix out.
.3e75	20 b0 3e	jsr $3eb0			jsr 	MI32WriteCharacter
.3e78	20 c3 3e	jsr $3ec3			jsr 	MInt32Negate 				; negate the value, so now it's positive.
.3e7b					_I32TSNoFlip:
.3e7b	68		pla				pla 								; get the base back
.3e7c	29 7f		and #$7f			and 	#$7F 						; clear the sign flag so it's just a base now.
.3e7e					_I32TSUnsigned:
.3e7e	20 8b 3e	jsr $3e8b			jsr 	MI32DivideWrite 			; recursive code to output string.
.3e81	a0 00		ldy #$00			ldy 	#0 							; write charcount to first character.
.3e83	ad cb 0d	lda $0dcb			lda 	MCharCount
.3e86	91 2a		sta ($2a),y			sta 	(temp0),y
.3e88	7a		ply				ply
.3e89	68		pla				pla
.3e8a	60		rts				rts
.3e8b					MI32DivideWrite:
.3e8b	48		pha				pha 								; save the divisor/base
.3e8c	e8		inx				inx 								; write in the dividing position.
.3e8d	20 18 3f	jsr $3f18			jsr 	MInt32Set8Bit
.3e90	ca		dex				dex
.3e91	20 08 3d	jsr $3d08			jsr 	MInt32UDivide 				; divide number by base.
.3e94	68		pla				pla 								; get the base into Y
.3e95	a8		tay				tay
.3e96	b5 9a		lda $9a,x			lda 	esInt0+2,x 					; get the remainder and push on the stack.
.3e98	48		pha				pha
.3e99	20 30 3f	jsr $3f30			jsr 	MInt32Zero 					; is the result zero ?
.3e9c	f0 04		beq $3ea2			beq 	_I32NoRecurse 				; if so, don't recurse.
.3e9e	98		tya				tya 								; put base into A
.3e9f	20 8b 3e	jsr $3e8b			jsr 	MI32DivideWrite 				; and jsr the dividor recursively.
.3ea2					_I32NoRecurse:
.3ea2	68		pla				pla 								; get the remainder back
.3ea3	c9 0a		cmp #$0a			cmp 	#10  						; handle hexadecimals, now converting to ASCII
.3ea5	90 02		bcc $3ea9			bcc 	_I32NotHex
.3ea7	69 06		adc #$06			adc 	#7-1
.3ea9					_I32NotHex:
.3ea9	18		clc				clc 								; make it ASCII
.3eaa	69 30		adc #$30			adc 	#48
.3eac	20 b0 3e	jsr $3eb0			jsr 	MI32WriteCharacter 			; write the character out
.3eaf	60		rts				rts 								; and exit.
.3eb0					MI32WriteCharacter:
.3eb0	ee cb 0d	inc $0dcb			inc 	MCharCount 					; bump count (space for leading count)
.3eb3	ac cb 0d	ldy $0dcb			ldy 	MCharCount 					; get position
.3eb6	91 2a		sta ($2a),y			sta 	(temp0),y 					; write out with trailing 0
.3eb8	c8		iny				iny
.3eb9	a9 00		lda #$00			lda 	#0
.3ebb	91 2a		sta ($2a),y			sta 	(temp0),y
.3ebd	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32unary.asm

>0dcc					MSeed32:	.fill 	4							; random number seed.
.3ebe					MInt32Absolute:
.3ebe	b5 b0		lda $b0,x			lda 	esInt3,x 					; use negate code if -ve.
.3ec0	30 01		bmi $3ec3			bmi 	MInt32Negate
.3ec2	60		rts				rts
.3ec3					MInt32Negate:
.3ec3	38		sec				sec 								; subtract from zero.
.3ec4	a9 00		lda #$00			lda 	#0
.3ec6	f5 98		sbc $98,x			sbc 	esInt0,x
.3ec8	95 98		sta $98,x			sta 	esInt0,x
.3eca	a9 00		lda #$00			lda 	#0
.3ecc	f5 a0		sbc $a0,x			sbc 	esInt1,x
.3ece	95 a0		sta $a0,x			sta 	esInt1,x
.3ed0	a9 00		lda #$00			lda 	#0
.3ed2	f5 a8		sbc $a8,x			sbc 	esInt2,x
.3ed4	95 a8		sta $a8,x			sta 	esInt2,x
.3ed6	a9 00		lda #$00			lda 	#0
.3ed8	f5 b0		sbc $b0,x			sbc 	esInt3,x
.3eda	95 b0		sta $b0,x			sta 	esInt3,x
.3edc	60		rts				rts
.3edd					MInt32Not:
.3edd	b5 98		lda $98,x			lda 	esInt0,x 					; one's complement all four.
.3edf	49 ff		eor #$ff			eor 	#$FF
.3ee1	95 98		sta $98,x			sta 	esInt0,x
.3ee3	b5 a0		lda $a0,x			lda 	esInt1,x
.3ee5	49 ff		eor #$ff			eor 	#$FF
.3ee7	95 a0		sta $a0,x			sta 	esInt1,x
.3ee9	b5 a8		lda $a8,x			lda 	esInt2,x
.3eeb	49 ff		eor #$ff			eor 	#$FF
.3eed	95 a8		sta $a8,x			sta 	esInt2,x
.3eef	b5 b0		lda $b0,x			lda 	esInt3,x
.3ef1	49 ff		eor #$ff			eor 	#$FF
.3ef3	95 b0		sta $b0,x			sta 	esInt3,x
.3ef5	60		rts				rts
.3ef6					MInt32Sign:
.3ef6	b5 b0		lda $b0,x			lda 	esInt3,x					; look at MSB
.3ef8	30 0b		bmi $3f05			bmi 	MInt32True 					; if set return -1 (true)
.3efa	20 30 3f	jsr $3f30			jsr 	MInt32Zero 					; is it zero ?
.3efd	f0 0a		beq $3f09			beq 	MInt32False 				; if zero return 0 (false)
.3eff	20 09 3f	jsr $3f09			jsr 	MInt32False 				; > 0 return 1, by setting it to zero
.3f02	f6 98		inc $98,x			inc 	esInt0,x  					; and bumping the LSB.
.3f04	60		rts				rts
.3f05					MInt32True:
.3f05	a9 ff		lda #$ff			lda 	#$FF 						; set to $FFFFFFFF
.3f07	d0 02		bne $3f0b			bne 	MInt32WriteAll
.3f09					MInt32False:
.3f09	a9 00		lda #$00			lda 	#0
.3f0b					MInt32WriteAll:
.3f0b	95 98		sta $98,x			sta 	esInt0,x
.3f0d					MInt32Write123:
.3f0d	95 a0		sta $a0,x			sta 	esInt1,x
.3f0f	95 a8		sta $a8,x			sta 	esInt2,x
.3f11	95 b0		sta $b0,x			sta 	esInt3,x
.3f13	a9 00		lda #$00			lda 	#$00						; and make it an integer
.3f15	95 90		sta $90,x			sta 	esType,x
.3f17	60		rts				rts
.3f18					MInt32Set8Bit:
.3f18	95 98		sta $98,x			sta 	esInt0,x 					; coopt above function to write
.3f1a	a9 00		lda #$00			lda 	#0 							; a value 0-255
.3f1c	f0 ef		beq $3f0d			beq		MInt32Write123
.3f1e					MInt32ShiftLeft:
.3f1e	16 98		asl $98,x			asl 	esInt0,x
.3f20	36 a0		rol $a0,x			rol	 	esInt1,x
.3f22	36 a8		rol $a8,x			rol	 	esInt2,x
.3f24	36 b0		rol $b0,x			rol	 	esInt3,x
.3f26	60		rts				rts
.3f27					MInt32ShiftRight:
.3f27	56 b0		lsr $b0,x			lsr 	esInt3,x
.3f29	76 a8		ror $a8,x			ror 	esInt2,x
.3f2b	76 a0		ror $a0,x			ror 	esInt1,x
.3f2d	76 98		ror $98,x			ror 	esInt0,x
.3f2f	60		rts				rts
.3f30					MInt32Zero:
.3f30	b5 98		lda $98,x			lda 	esInt0,x
.3f32	15 a0		ora $a0,x			ora 	esInt1,x
.3f34	15 a8		ora $a8,x			ora 	esInt2,x
.3f36	15 b0		ora $b0,x			ora 	esInt3,x
.3f38	60		rts				rts
.3f39					MInt32Random:
.3f39	5a		phy				phy
.3f3a	a0 07		ldy #$07			ldy 	#7 							; do it 7 times
.3f3c	ad cc 0d	lda $0dcc			lda 	MSeed32+0 					; check the seed isn't zero
.3f3f	d0 03		bne $3f44			bne 	_Random1
.3f41	a8		tay				tay 								; if so do it 256 times
.3f42	a9 aa		lda #$aa			lda		#$AA 						; and use this to seed the seed....
.3f44					_Random1:
.3f44	0a		asl a				asl 	a
.3f45	2e cd 0d	rol $0dcd			rol 	MSeed32+1
.3f48	2e ce 0d	rol $0dce			rol 	MSeed32+2
.3f4b	2e cf 0d	rol $0dcf			rol 	MSeed32+3
.3f4e	90 02		bcc $3f52			bcc 	_Random2
.3f50	49 c5		eor #$c5			eor 	#$C5
.3f52					_Random2:
.3f52	88		dey				dey
.3f53	d0 ef		bne $3f44			bne 	_Random1
.3f55	8d cc 0d	sta $0dcc			sta 	MSeed32+0 					; copy the seed in.
.3f58	95 98		sta $98,x			sta 	esInt0,x
.3f5a	ad cd 0d	lda $0dcd			lda 	MSeed32+1
.3f5d	95 a0		sta $a0,x			sta 	esInt1,x
.3f5f	ad ce 0d	lda $0dce			lda 	MSeed32+2
.3f62	95 a8		sta $a8,x			sta 	esInt2,x
.3f64	ad cf 0d	lda $0dcf			lda 	MSeed32+3
.3f67	95 b0		sta $b0,x			sta 	esInt3,x
.3f69	7a		ply				ply
.3f6a	a9 00		lda #$00			lda 	#0
.3f6c	95 90		sta $90,x			sta 	esType,x
.3f6e	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/utility/check.asm

.3f6f					CheckToken:
.3f6f	d1 28		cmp ($28),y			cmp 	(codePtr),y
.3f71	d0 02		bne $3f75			bne 	_CTError
.3f73	c8		iny				iny
.3f74	60		rts				rts
.3f75					_CTError:
.3f75	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.3f77	20 27 15	jsr $1527		jsr	errorHandler
.3f7a					CheckRightParen:
.3f7a	b1 28		lda ($28),y			lda 	(codePtr),y
.3f7c	c8		iny				iny
.3f7d	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.3f7f	d0 01		bne $3f82			bne 	_CRPError
.3f81	60		rts				rts
.3f82					_CRPError:
.3f82	a2 09		ldx #$09			ldx 	#ErrorID_MissingRP
.3f84	20 27 15	jsr $1527		jsr	errorHandler
.3f87					CheckComma:
.3f87	b1 28		lda ($28),y			lda 	(codePtr),y
.3f89	c8		iny				iny
.3f8a	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.3f8c	d0 01		bne $3f8f			bne 	_CCError
.3f8e	60		rts				rts
.3f8f					_CCError:
.3f8f	a2 0a		ldx #$0a			ldx 	#ErrorID_MissingComma
.3f91	20 27 15	jsr $1527		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/utility/stack.asm

.0037					rsPointer:
>0037							.fill 	2							; to TOS, which is the current top-token.
.3f94					RSReset:
.3f94	a9 ff		lda #$ff			lda 	#(returnStack+retStackSize-1) & $FF
.3f96	85 37		sta $37				sta 	rsPointer
.3f98	a9 09		lda #$09			lda 	#(returnStack+retStackSize-1) >> 8
.3f9a	85 38		sta $38				sta 	1+(rsPointer)
.3f9c	a9 ff		lda #$ff			lda 	#$FF 						; put a duff marker on TOS, so nothing will pop
.3f9e	8d ff 09	sta $09ff			sta 	returnStack+retStackSize-1
.3fa1	60		rts				rts
.3fa2					RSClaim:
.3fa2	84 32		sty $32				sty 	tempShort 					; preserve Y
.3fa4	48		pha				pha 								; save marker on stack.
.3fa5	8a		txa				txa 								; get bytes required.
.3fa6	38		sec				sec
.3fa7	49 ff		eor #$ff			eor 	#$FF 						; add to rsPointer using 2's complement.
.3fa9	65 37		adc $37				adc 	rsPointer
.3fab	85 37		sta $37				sta 	rsPointer
.3fad	a5 38		lda $38				lda 	rsPointer+1
.3faf	69 ff		adc #$ff			adc 	#$FF
.3fb1	85 38		sta $38				sta 	rsPointer+1
.3fb3	c9 08		cmp #$08			cmp 	#returnStack>>8 			; overflow. underflow actually :)
.3fb5	90 08		bcc $3fbf			bcc 	_RSCOverflow
.3fb7	68		pla				pla 								; get marker back
.3fb8	a0 00		ldy #$00			ldy 	#0 							; write marker out.
.3fba	91 37		sta ($37),y			sta 	(rsPointer),y
.3fbc	a4 32		ldy $32				ldy 	tempShort 					; restore Y and exit
.3fbe	60		rts				rts
.3fbf					_RSCOverflow:
.3fbf	a2 16		ldx #$16			ldx 	#ErrorID_RetStack
.3fc1	20 27 15	jsr $1527		jsr	errorHandler
.3fc4					RSFree:
.3fc4	18		clc				clc
.3fc5	65 37		adc $37				adc 	rsPointer
.3fc7	85 37		sta $37				sta 	rsPointer
.3fc9	90 02		bcc $3fcd			bcc 	_RSFExit
.3fcb	e6 38		inc $38				inc 	rsPointer+1
.3fcd					_RSFExit:
.3fcd	60		rts				rts
.3fce					RSSavePosition:
.3fce	84 32		sty $32				sty 	tempShort 					; save Y position
.3fd0	a8		tay				tay 								; this is where we write it.
.3fd1	a5 28		lda $28				lda 	codePtr 					; write codePointer out
.3fd3	91 37		sta ($37),y			sta 	(rsPointer),y
.3fd5	c8		iny				iny
.3fd6	a5 29		lda $29				lda 	codePtr+1
.3fd8	91 37		sta ($37),y			sta 	(rsPointer),y
.3fda	c8		iny				iny
.3fdb	a5 32		lda $32				lda 	tempShort 					; write the Y position out.
.3fdd	91 37		sta ($37),y			sta 	(rsPointer),y
.3fdf	a8		tay				tay 								; fix Y back again to original value
.3fe0	60		rts				rts
.3fe1					RSLoadPosition:
.3fe1	a8		tay				tay
.3fe2	b1 37		lda ($37),y			lda 	(rsPointer),y 				; read codePointer back
.3fe4	85 28		sta $28				sta 	codePtr
.3fe6	c8		iny				iny
.3fe7	b1 37		lda ($37),y			lda 	(rsPointer),y
.3fe9	85 29		sta $29				sta 	codePtr+1
.3feb	c8		iny				iny
.3fec	b1 37		lda ($37),y			lda 	(rsPointer),y 				; and the offset
.3fee	a8		tay				tay 								; to Y
.3fef	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/utility/warmstart.asm

.3ff0					WarmStart:
.3ff0	a2 04		ldx #$04		ldx	#4
.3ff2	20 96 29	jsr $2996		jsr	interactionHandler

;******  Return to file: main/main.asm

.3ff5					mainHandler:
.3ff5	7c f8 3f	jmp ($3ff8,x)			jmp 	(mainVectors,x)
.3ff8					mainVectors:
>3ff8	14 40					.word _DummyControlHandler ; index 0
>3ffa	87 3f					.word CheckComma           ; index 2
>3ffc	7a 3f					.word CheckRightParen      ; index 4
>3ffe	7a 31					.word XCommandClear        ; index 6
>4000	a5 38					.word LinkEvaluate         ; index 8
>4002	b1 38					.word LinkEvaluateInteger  ; index 10
>4004	bd 38					.word LinkEvaluateSmallInt ; index 12
>4006	b7 38					.word LinkEvaluateString   ; index 14
>4008	ab 38					.word LinkEvaluateTerm     ; index 16
>400a	5a 3e					.word MLInt32ToString      ; index 18
>400c	07 33					.word Command_XNew         ; index 20
>400e	15 33					.word XCommand_Run         ; index 22
>4010	21 33					.word Command_RunFrom      ; index 24
>4012	75 3d					.word LinkInt32FromString  ; index 26
.4014					_DummyControlHandler:
.4014	60		rts			rts

;******  Return to file: basic.asm

.4015					section_end_main:
.4015					section_start_string:

;******  Processing file: string/string.asm


;******  Processing file: string/functions/chr.asm

.4015					StringChrs:
.4015	aa		tax				tax 								; set up stack
.4016	a9 02		lda #$02			lda 	#2
.4018	20 d4 40	jsr $40d4			jsr 	AllocateSoftString
.401b	98		tya				tya
.401c	20 f8 40	jsr $40f8			jsr 	WriteSoftString
.401f					StringUpdate:
.401f	20 2d 40	jsr $402d			jsr 	ReturnSoftString
.4022	8a		txa				txa
.4023	60		rts				rts
.4024					StringNull:
.4024	aa		tax				tax
.4025	a9 01		lda #$01			lda 	#1
.4027	20 d4 40	jsr $40d4			jsr 	AllocateSoftString
.402a	4c 1f 40	jmp $401f			jmp 	StringUpdate
.402d					ReturnSoftString:
.402d	a5 39		lda $39				lda 	softMemAlloc 				; copy address
.402f	95 98		sta $98,x			sta 	esInt0,x
.4031	a5 3a		lda $3a				lda 	softMemAlloc+1
.4033	95 a0		sta $a0,x			sta 	esInt1,x
.4035	a9 00		lda #$00			lda 	#0 							; zero upper bytes
.4037	95 a8		sta $a8,x			sta 	esInt2,x
.4039	95 b0		sta $b0,x			sta 	esInt3,x
.403b	a9 40		lda #$40			lda 	#$40 						; type string.
.403d	95 90		sta $90,x			sta 	esType,x
.403f	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/functions/compare.asm

.4040					STRCompare:
.4040	48		pha				pha 								; save A
.4041	aa		tax				tax 								; put stack pos in X
.4042	5a		phy				phy
.4043	20 76 40	jsr $4076			jsr 	CopyStringPair 				; copy strings to temp0,temp1
.4046	a0 00		ldy #$00			ldy 	#0 							; get the smaller of the two string sizes.
.4048	b1 2a		lda ($2a),y			lda 	(temp0),y
.404a	d1 2c		cmp ($2c),y			cmp 	(temp1),y
.404c	90 02		bcc $4050			bcc 	_SCNotSmaller
.404e	b1 2c		lda ($2c),y			lda 	(temp1),y
.4050					_SCNotSmaller:
.4050	aa		tax				tax 								; put that in X. We compare this many chars first.
.4051					_SCCompareLoop:
.4051	e0 00		cpx #$00			cpx 	#0 							; if compared all the smaller, then it is the shorter
.4053	f0 0c		beq $4061			beq 	_SCSameToEndShortest 		; one that is the smallest if they are different lengths.
.4055	ca		dex				dex 								; decrement chars to compare.
.4056	c8		iny				iny 								; move to next character
.4057	38		sec				sec 								; calculate s1[y]-s2[y]
.4058	b1 2a		lda ($2a),y			lda 	(temp0),y
.405a	f1 2c		sbc ($2c),y			sbc 	(temp1),y
.405c	d0 0a		bne $4068			bne 	_SCReturnResult 			; if different return sign of A
.405e	4c 51 40	jmp $4051			jmp 	_SCCompareLoop
.4061					_SCSameToEndShortest
.4061	a0 00		ldy #$00			ldy 	#0 							; compare len(s1) - len(s2)
.4063	38		sec				sec
.4064	b1 2a		lda ($2a),y			lda 	(temp0),y
.4066	f1 2c		sbc ($2c),y			sbc 	(temp1),y
.4068					_SCReturnResult:
.4068	08		php				php 								; set return to zero preserving PSW.
.4069	a2 00		ldx #$00			ldx 	#0
.406b	28		plp				plp
.406c	f0 05		beq $4073			beq 	_SCExit 					; two values equal, then exit
.406e	ca		dex				dex 								; X = $FF
.406f	90 02		bcc $4073			bcc 	_SCExit 					; if 1st < 2nd then -1
.4071	a2 01		ldx #$01			ldx 	#1 							; X = $01 if greater
.4073					_SCExit:
.4073	7a		ply				ply
.4074	68		pla				pla
.4075	60		rts				rts
.4076					CopyStringPair:
.4076	b5 99		lda $99,x			lda 	esInt0+1,x
.4078	85 2c		sta $2c				sta 	temp1
.407a	b5 a1		lda $a1,x			lda 	esInt1+1,x
.407c	85 2d		sta $2d				sta 	temp1+1
.407e					CopyStringTop:
.407e	b5 98		lda $98,x			lda 	esInt0,x
.4080	85 2a		sta $2a				sta 	temp0
.4082	b5 a0		lda $a0,x			lda 	esInt1,x
.4084	85 2b		sta $2b				sta 	temp0+1
.4086	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/functions/concat.asm

.4087					StringConcat:
.4087	aa		tax				tax									; stack pos in X
.4088	5a		phy				phy
.4089	20 76 40	jsr $4076			jsr 	CopyStringPair 				; temp0 and temp1 point to strings to concat.
.408c	38		sec				sec 								; calculate alloc strings. lengths added + 1 for size.
.408d	a0 00		ldy #$00			ldy 	#0
.408f	b1 2a		lda ($2a),y			lda 	(temp0),y
.4091	71 2c		adc ($2c),y			adc 	(temp1),y
.4093	b0 1b		bcs $40b0			bcs 	_SCError 					; just too many characters here.
.4095	c9 fc		cmp #$fc			cmp 	#MaxStringSize
.4097	b0 17		bcs $40b0			bcs 	_SCError
.4099	20 d4 40	jsr $40d4			jsr 	AllocateSoftString 			; allocate soft string memory, set pointer.
.409c	20 cb 40	jsr $40cb			jsr 	CopySoftToStack 			; copy that to the stack.
.409f	20 b5 40	jsr $40b5			jsr 	SCCopyTemp0 				; copy temp0
.40a2	a5 2c		lda $2c				lda 	temp1 						; copy temp1 to temp0
.40a4	85 2a		sta $2a				sta 	temp0
.40a6	a5 2d		lda $2d				lda 	temp1+1
.40a8	85 2b		sta $2b				sta 	temp0+1
.40aa	20 b5 40	jsr $40b5			jsr 	SCCopyTemp0 				; copy temp0 e.g. what was temp1.
.40ad	7a		ply				ply
.40ae	8a		txa				txa 								; and A
.40af	60		rts				rts
.40b0					_SCError:
.40b0	a2 0d		ldx #$0d			ldx 	#ErrorID_StrLen
.40b2	20 27 15	jsr $1527		jsr	errorHandler
.40b5					SCCopyTemp0:
.40b5	a0 00		ldy #$00			ldy 	#0 							; put count in temp2
.40b7	b1 2a		lda ($2a),y			lda 	(temp0),y
.40b9	85 2e		sta $2e				sta 	temp2
.40bb					_SCCopyLoop:
.40bb	a5 2e		lda $2e				lda 	temp2 						; done the lot
.40bd	f0 0b		beq $40ca			beq 	_SCCopyExit
.40bf	c6 2e		dec $2e				dec 	temp2
.40c1	c8		iny				iny 								; get next char
.40c2	b1 2a		lda ($2a),y			lda 	(temp0),y
.40c4	20 f8 40	jsr $40f8			jsr 	WriteSoftString 			; write to soft string.
.40c7	4c bb 40	jmp $40bb			jmp 	_SCCopyLoop
.40ca					_SCCopyExit:
.40ca	60		rts				rts
.40cb					CopySoftToStack:
.40cb	a5 39		lda $39				lda 	SoftMemAlloc 				; copy the memory allocation pointer to the stack.
.40cd	95 98		sta $98,x			sta 	esInt0,x 					; type is already string.
.40cf	a5 3a		lda $3a				lda 	SoftMemAlloc+1
.40d1	95 a0		sta $a0,x			sta 	esInt1,x
.40d3	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/functions/memory.asm

.0039					softMemAlloc:
>0039							.fill 	2  							; if MSB is zero needs resetting on allocation.
.40d4					AllocateSoftString:
.40d4	85 32		sta $32				sta 	tempShort 					; save count
.40d6	5a		phy				phy
.40d7	a5 3a		lda $3a				lda 	softMemAlloc+1 				; if the high byte is zero, it needs allocating.
.40d9	d0 09		bne $40e4			bne 	_ASSDone
.40db	a5 33		lda $33				lda 	highMemory 					; reset the soft memory alloc pointer.
.40dd	85 39		sta $39				sta 	softMemAlloc 				; to speed up slightly, we only reset this when we first need it
.40df	a4 34		ldy $34				ldy 	highMemory+1 				; but it needs to be reset before each command.
.40e1	88		dey				dey 								; it is set to 1/4k below high memory, allowing space
.40e2	84 3a		sty $3a				sty 	softMemAlloc+1 				; for a concreted string.
.40e4					_ASSDone:
.40e4	38		sec				sec 								; allocate downwards enough memory
.40e5	a5 39		lda $39				lda 	softMemAlloc 				; subtract the memory requirements in A from
.40e7	e5 32		sbc $32				sbc 	tempShort 					; the soft memory pointer
.40e9	85 39		sta $39				sta 	softMemAlloc
.40eb	a5 3a		lda $3a				lda 	softMemAlloc+1
.40ed	e9 00		sbc #$00			sbc 	#0
.40ef	85 3a		sta $3a				sta 	softMemAlloc+1
.40f1	a9 00		lda #$00			lda 	#0 							; empty that string, set the length = 0.
.40f3	a8		tay				tay
.40f4	91 39		sta ($39),y			sta 	(softMemAlloc),y
.40f6	7a		ply				ply
.40f7	60		rts				rts
.40f8					WriteSoftString:
.40f8	84 32		sty $32				sty 	tempShort 					; save Y
.40fa	48		pha				pha 								; save character on stack
.40fb	a0 00		ldy #$00			ldy 	#0 							; get and bump length
.40fd	b1 39		lda ($39),y			lda 	(softMemAlloc),y
.40ff	18		clc				clc
.4100	69 01		adc #$01			adc 	#1
.4102	91 39		sta ($39),y			sta 	(softMemAlloc),y
.4104	a8		tay				tay 								; offset in Y
.4105	68		pla				pla 								; get char and write.
.4106	91 39		sta ($39),y			sta 	(softMemAlloc),y
.4108	a4 32		ldy $32				ldy 	tempShort 					; restore Y and exit.
.410a	60		rts				rts
.410b					StrClone:
.410b	aa		tax				tax 								; set up stack.
.410c	5a		phy				phy
.410d	a0 00		ldy #$00			ldy 	#0 							; get length, add 1 for length
.410f	b1 2a		lda ($2a),y			lda 	(temp0),y 					; this is the bytes required.
.4111	18		clc				clc
.4112	69 01		adc #$01			adc 	#1
.4114	20 d4 40	jsr $40d4			jsr 	AllocateSoftString 			; allocate soft memory
.4117	a5 39		lda $39				lda 	softMemAlloc 				; copy that address to TOS
.4119	95 98		sta $98,x			sta 	esInt0,x
.411b	a5 3a		lda $3a				lda 	softMemAlloc+1
.411d	95 a0		sta $a0,x			sta 	esInt1,x
.411f	a9 00		lda #$00			lda 	#0 							; zero upper 2 bytes
.4121	95 a8		sta $a8,x			sta 	esInt2,x
.4123	95 b0		sta $b0,x			sta 	esInt3,x
.4125	a9 40		lda #$40			lda 	#$40 						; set type to string.
.4127	95 90		sta $90,x			sta 	esType,x
.4129	20 b5 40	jsr $40b5			jsr 	SCCopyTemp0 				; copy temp0 string to soft memory copy (concat.asm)
.412c	7a		ply				ply
.412d	8a		txa				txa
.412e	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/functions/setcase.asm

.412f					CaseString:
.412f	48		pha				pha 								; save A and copy to X
.4130	aa		tax				tax
.4131	5a		phy				phy
.4132	20 7e 40	jsr $407e			jsr 	CopyStringTop 				; target string -> temp0
.4135	a0 00		ldy #$00			ldy 	#0
.4137	b1 2a		lda ($2a),y			lda 	(temp0),y  					; get length,
.4139	18		clc				clc
.413a	69 01		adc #$01			adc 	#1 							; one more for length byte
.413c	20 d4 40	jsr $40d4			jsr 	AllocateSoftString 			; allocate soft string memory, set pointer.
.413f	20 cb 40	jsr $40cb			jsr 	CopySoftToStack 			; copy that to the stack.
.4142	a0 00		ldy #$00			ldy 	#0
.4144	b1 2a		lda ($2a),y			lda 	(temp0),y 					; count to copy in X
.4146	aa		tax				tax
.4147					_CSCopy:
.4147	e0 00		cpx #$00			cpx 	#0 							; finished if 0.
.4149	f0 24		beq $416f			beq 	_CSExit
.414b	ca		dex				dex
.414c	c8		iny				iny
.414d	68		pla				pla 								; check direction
.414e	48		pha				pha
.414f	f0 0c		beq $415d			beq 	_CSUpper
.4151	b1 2a		lda ($2a),y			lda 	(temp0),y 					; lower$() code
.4153	c9 41		cmp #$41			cmp 	#"A"
.4155	90 12		bcc $4169			bcc 	_CSWrite
.4157	c9 5b		cmp #$5b			cmp 	#"Z"+1
.4159	b0 0e		bcs $4169			bcs 	_CSWrite
.415b	90 0a		bcc $4167			bcc 	_CSFlipWrite
.415d					_CSUpper:
.415d	b1 2a		lda ($2a),y			lda 	(temp0),y 					; upper$() code
.415f	c9 61		cmp #$61			cmp 	#"a"
.4161	90 06		bcc $4169			bcc 	_CSWrite
.4163	c9 7b		cmp #$7b			cmp 	#"z"+1
.4165	b0 02		bcs $4169			bcs 	_CSWrite
.4167					_CSFlipWrite:
.4167	49 20		eor #$20			eor 	#"A"^"a" 					; switch case.
.4169					_CSWrite:
.4169	20 f8 40	jsr $40f8			jsr 	WriteSoftString 			; add to soft string.
.416c	4c 47 41	jmp $4147			jmp 	_CSCopy
.416f					_CSExit:
.416f	7a		ply				ply
.4170	68		pla				pla
.4171	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/functions/substring.asm

.4172					StringSubstring:
.4172	48		pha				pha
.4173	aa		tax				tax 								; access stack.
.4174	5a		phy				phy
.4175	20 7e 40	jsr $407e			jsr 	CopyStringTop 				; point temp0 to the string.
.4178	a0 00		ldy #$00			ldy 	#0 							; get length.
.417a	b1 2a		lda ($2a),y			lda 	(temp0),Y
.417c	85 2c		sta $2c				sta 	temp1
.417e	b5 99		lda $99,x			lda 	esInt0+1,x 					; get the initial offset
.4180	c5 2c		cmp $2c				cmp 	temp1 						; return "" if > length.
.4182	f0 02		beq $4186			beq 	_SSBOkay
.4184	b0 2a		bcs $41b0			bcs 	_SSBReturnNull
.4186					_SSBOkay:
.4186	a5 2c		lda $2c				lda 	temp1 						; get the total length +1
.4188	18		clc				clc
.4189	69 01		adc #$01			adc 	#1
.418b	38		sec				sec
.418c	f5 99		sbc $99,x			sbc 	esInt0+1,x 					; the anything >= this is bad - max size
.418e	d5 9a		cmp $9a,x			cmp 	esInt0+2,x  				; check bad >= required
.4190	90 02		bcc $4194			bcc		_SSBTrunc
.4192	b5 9a		lda $9a,x			lda 	esInt0+2,x
.4194					_SSBTrunc:
.4194	85 2d		sta $2d				sta 	temp1+1 					; characters to copy.
.4196	18		clc				clc
.4197	69 01		adc #$01			adc 	#1 							; add 1
.4199	20 d4 40	jsr $40d4			jsr 	AllocateSoftString 			; allocate soft string memory, set pointer.
.419c	20 cb 40	jsr $40cb			jsr 	CopySoftToStack 			; copy that to the stack.
.419f	b4 99		ldy $99,x			ldy 	esInt0+1,x 					; get initial position of char to copy
.41a1					_SSBCopyLoop:
.41a1	a5 2d		lda $2d				lda 	temp1+1 					; done them all
.41a3	f0 0e		beq $41b3			beq 	_SSBExit
.41a5	c6 2d		dec $2d				dec 	temp1+1
.41a7	b1 2a		lda ($2a),y			lda 	(temp0),y 					; get and write character
.41a9	20 f8 40	jsr $40f8			jsr 	WriteSoftString
.41ac	c8		iny				iny
.41ad	4c a1 41	jmp $41a1			jmp 	_SSBCopyLoop
.41b0					_SSBReturnNull:
.41b0	20 b6 41	jsr $41b6			jsr 	ReturnNull
.41b3					_SSBExit:
.41b3	7a		ply				ply
.41b4	68		pla				pla
.41b5	60		rts				rts
.41b6					ReturnNull:
.41b6	a9 00		lda #$00			lda 	#0 							; clear null string
.41b8	8d ce 0a	sta $0ace			sta 	NullString
.41bb	a9 ce		lda #$ce			lda 	#NullString & $FF 			; set a pointer to it
.41bd	95 98		sta $98,x			sta 	esInt0,x
.41bf	a9 0a		lda #$0a			lda 	#NullString >> 8
.41c1	95 a0		sta $a0,x			sta 	esInt1,x
.41c3	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/functions/write.asm

.0dd0					srcStrLen:
>0dd0							.fill 	1
.41c4					StringWrite:
.41c4	aa		tax				tax
.41c5	48		pha				pha
.41c6	5a		phy				phy
.41c7	20 ed 41	jsr $41ed			jsr 	CheckOverwriteCurrent
.41ca	b0 0d		bcs $41d9			bcs		_SWCopyCurrent
.41cc	20 2b 42	jsr $422b			jsr 	RequiresConcretion
.41cf	90 0e		bcc $41df			bcc 	_SWWriteReference
.41d1	20 8a 42	jsr $428a			jsr 	CheckSpecialConcretion
.41d4	b0 09		bcs $41df			bcs 	_SWWriteReference
.41d6	20 3f 42	jsr $423f			jsr 	AllocateHardMemory
.41d9					_SWCopyCurrent:
.41d9	20 70 42	jsr $4270			jsr 	CopyStringToHardMemory
.41dc	4c ea 41	jmp $41ea			jmp 	_SWExit
.41df					_SWWriteReference
.41df	a0 00		ldy #$00			ldy 	#0
.41e1	a5 2a		lda $2a				lda 	temp0
.41e3	91 2c		sta ($2c),y			sta 	(temp1),y
.41e5	c8		iny				iny
.41e6	a5 2b		lda $2b				lda 	temp0+1
.41e8	91 2c		sta ($2c),y			sta 	(temp1),y
.41ea					_SWExit:
.41ea	7a		ply				ply
.41eb	68		pla				pla
.41ec	60		rts				rts
.41ed					CheckOverwriteCurrent:
.41ed	a0 00		ldy #$00			ldy 	#0 						; get address of string being written to temp0
.41ef	b5 a1		lda $a1,x			lda 	esInt1+1,x
.41f1	85 2b		sta $2b				sta 	temp0+1
.41f3	b5 99		lda $99,x			lda 	esInt0+1,x
.41f5	85 2a		sta $2a				sta 	temp0
.41f7	b1 2a		lda ($2a),y			lda 	(temp0),y 				; get length of string being copied and save it.
.41f9	8d d0 0d	sta $0dd0			sta 	srcStrLen
.41fc	b5 98		lda $98,x			lda 	esInt0,x 				; copy where the final address it being written to temp1.
.41fe	85 2c		sta $2c				sta 	temp1 					; e.g. if it is ax$ then temp1 will point to the ax$
.4200	b5 a0		lda $a0,x			lda 	esInt1,x 				; data record + 5
.4202	85 2d		sta $2d				sta 	temp1+1
.4204	a0 01		ldy #$01			ldy 	#1 						; get the MSB of the address of string currently stored there.
.4206	b1 2c		lda ($2c),y			lda 	(temp1),y
.4208	c5 34		cmp $34				cmp 	highMemory+1 			; if < high memory then it cannot be something stored
.420a	90 1b		bcc $4227			bcc 	_COCFail 				; in hard memory.
.420c	a0 00		ldy #$00			ldy 	#0 						; copy target address - 1 into temp2
.420e	b1 2c		lda ($2c),y			lda 	(temp1),y 				; when allocating hard memory, the overall size is
.4210	e9 01		sbc #$01			sbc 	#1 						; in the previous byte.
.4212	85 2e		sta $2e				sta 	temp2
.4214	c8		iny				iny
.4215	b1 2c		lda ($2c),y			lda 	(temp1),y
.4217	e9 00		sbc #$00			sbc 	#0
.4219	85 2f		sta $2f				sta 	temp2+1
.421b	a0 00		ldy #$00			ldy 	#0 						; how large is this physical chunk.
.421d	b1 2e		lda ($2e),y			lda 	(temp2),y
.421f	38		sec				sec  							; maximum character capacity.
.4220	e9 02		sbc #$02			sbc 	#2
.4222	cd d0 0d	cmp $0dd0			cmp 	srcStrLen 				; if >= the required length
.4225	b0 02		bcs $4229			bcs 	_COCCanReuse
.4227					_COCFail:
.4227	18		clc				clc
.4228	60		rts				rts
.4229					_COCCanReuse:
.4229	38		sec				sec
.422a	60		rts				rts
.422b					RequiresConcretion:
.422b	a5 2b		lda $2b				lda 	temp0+1 				; get MSB of address of string to be written
.422d	c5 34		cmp $34				cmp 	highMemory+1 			; if >= high memory it is concreted
.422f	b0 0a		bcs $423b			bcs 	_RCSucceed 				; so it needs concreting again - duplication.
.4231	a5 3a		lda $3a				lda 	softMemAlloc+1 			; have we allocated any soft memory yet ?
.4233	f0 08		beq $423d			beq 	_RCFail 				; if not, this cannot be soft memory.
.4235	a5 2b		lda $2b				lda 	temp0+1 				; get MSB of address of string to be written
.4237	c5 3a		cmp $3a				cmp 	softMemAlloc+1 			; if >= soft mem alloc it is either soft
.4239	90 02		bcc $423d			bcc 	_RCFail 				; so concreting
.423b					_RCSucceed:
.423b	38		sec				sec
.423c	60		rts				rts
.423d					_RCFail:
.423d	18		clc				clc
.423e	60		rts				rts
.423f					AllocateHardMemory:
.423f	5a		phy				phy
.4240	ad d0 0d	lda $0dd0			lda 	srcStrLen 				; characters in string
.4243	69 0a		adc #$0a			adc 	#1+1+8 					; one for hard memory size, one for string size, extra for expansion
.4245	b0 04		bcs $424b			bcs 	_AHMSetMax 				; max out that amount.
.4247	c9 fe		cmp #$fe			cmp 	#MaxStringSize+2
.4249	90 02		bcc $424d			bcc 	_AHMIsOkay
.424b					_AHMSetMax:
.424b	a9 fe		lda #$fe			lda 	#MaxStringSize+2
.424d					_AHMIsOkay:
.424d	48		pha				pha	 							; save size to be allocated
.424e	49 ff		eor #$ff			eor 	#$FF 					; complement and add to high Memory
.4250	38		sec				sec  							; and copy result to TOS as target address.
.4251	65 33		adc $33				adc 	highMemory
.4253	85 33		sta $33				sta 	highMemory
.4255	a5 34		lda $34				lda 	highMemory+1
.4257	69 ff		adc #$ff			adc 	#$FF
.4259	85 34		sta $34				sta 	highMemory+1
.425b	a0 00		ldy #$00			ldy 	#0 						; Y = 0
.425d	68		pla				pla 							; get the total size of the storage block
.425e	91 33		sta ($33),y			sta 	(highMemory),y 			; and set it
.4260	18		clc				clc
.4261	a5 33		lda $33				lda		highMemory 				; point the target address to the byte after this.
.4263	69 01		adc #$01			adc 	#1
.4265	91 2c		sta ($2c),y			sta 	(temp1),y
.4267	a5 34		lda $34				lda 	highMemory+1
.4269	69 00		adc #$00			adc 	#0
.426b	c8		iny				iny
.426c	91 2c		sta ($2c),y			sta 	(temp1),y
.426e	7a		ply				ply
.426f	60		rts				rts
.4270					CopyStringToHardMemory:
.4270	5a		phy				phy
.4271	a0 00		ldy #$00			ldy 	#0 						; copy target address to temp2
.4273	b1 2c		lda ($2c),y			lda 	(temp1),y
.4275	85 2e		sta $2e				sta 	temp2
.4277	c8		iny				iny
.4278	b1 2c		lda ($2c),y			lda 	(temp1),y
.427a	85 2f		sta $2f				sta 	temp2+1
.427c	ac d0 0d	ldy $0dd0			ldy 	srcStrLen 				; copy this + 1 characters, (length too) hence $FF compare
.427f					_CSTHMLoop:
.427f	b1 2a		lda ($2a),y			lda 	(temp0),y
.4281	91 2e		sta ($2e),y			sta 	(temp2),y
.4283	88		dey				dey
.4284	c0 ff		cpy #$ff			cpy 	#$FF 					; this does the +1
.4286	d0 f7		bne $427f			bne 	_CSTHMLoop
.4288	7a		ply				ply
.4289	60		rts				rts
.428a					CheckSpecialConcretion:
.428a	ad d0 0d	lda $0dd0			lda 	srcStrLen 				; check string is null e.g. length = 0
.428d	f0 02		beq $4291			beq 	_CSCNullString
.428f	18		clc				clc
.4290	60		rts				rts
.4291					_CSCNullString:
.4291	a9 00		lda #$00			lda 	#0 						; by always returning this address we don't waste
.4293	8d ce 0a	sta $0ace			sta 	NullString		 		; storage on null strings.
.4296	a9 ce		lda #$ce			lda 	#(NullString) & $FF
.4298	85 2a		sta $2a				sta 	temp0
.429a	a9 0a		lda #$0a			lda 	#(NullString) >> 8
.429c	85 2b		sta $2b				sta 	1+(temp0)
.429e	38		sec				sec
.429f	60		rts				rts

;******  Return to file: string/string.asm

.42a0					stringHandler:
.42a0	7c a3 42	jmp ($42a3,x)			jmp 	(stringVectors,x)
.42a3					stringVectors:
>42a3	b5 42					.word _DummyControlHandler ; index 0
>42a5	15 40					.word StringChrs           ; index 2
>42a7	0b 41					.word StrClone             ; index 4
>42a9	87 40					.word StringConcat         ; index 6
>42ab	24 40					.word StringNull           ; index 8
>42ad	40 40					.word STRCompare           ; index 10
>42af	2f 41					.word CaseString           ; index 12
>42b1	72 41					.word StringSubstring      ; index 14
>42b3	c4 41					.word StringWrite          ; index 16
.42b5					_DummyControlHandler:
.42b5	60		rts			rts

;******  Return to file: basic.asm

.42b6					section_end_string:
.42b6					section_start_tokeniser:

;******  Processing file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/detokenise/detokenise.asm

.0dd1					deTokeniseVector:
>0dd1							.fill 	2
.0dd3					lastCharacterClass:
>0dd3							.fill 	1
.0dd4					indent:
>0dd4							.fill 	1
.42b6					ListLine:
.42b6	48		pha				pha								; enter here to list to console. sets the output vector
.42b7	a9 e5		lda #$e5			lda 	#(deTokenPrint) & $FF
.42b9	8d d1 0d	sta $0dd1			sta 	deTokeniseVector
.42bc	a9 43		lda #$43			lda 	#(deTokenPrint) >> 8
.42be	8d d2 0d	sta $0dd2			sta 	1+(deTokeniseVector)
.42c1	68		pla				pla
.42c2					Detokenise:
.42c2	18		clc				clc 							; space required for line number.
.42c3	69 06		adc #$06			adc 	#6
.42c5	8d d4 0d	sta $0dd4			sta 	indent
.42c8	a9 ff		lda #$ff			lda 	#$FF 					; last thing printed is a dummy value.
.42ca	8d d3 0d	sta $0dd3			sta 	lastCharacterClass
.42cd	a2 02		ldx #$02			ldx 	#2
.42cf	a9 00		lda #$00			lda 	#0 						; clear upper two bytes
.42d1	95 a8		sta $a8,x			sta 	esInt2,x
.42d3	95 b0		sta $b0,x			sta 	esInt3,x
.42d5	a0 01		ldy #$01			ldy 	#1 						; copy line number to stack,2 (as using stack 0,1 for list range)
.42d7	b1 28		lda ($28),y			lda 	(codePtr),y
.42d9	95 98		sta $98,x			sta 	esInt0,x
.42db	c8		iny				iny
.42dc	b1 28		lda ($28),y			lda 	(codePtr),y
.42de	95 a0		sta $a0,x			sta 	esInt1,x
.42e0	a9 84		lda #$84			lda 	#LTYLineNumber
.42e2	20 c4 43	jsr $43c4			jsr 	ListOutputCharacter
.42e5	a9 0a		lda #$0a			lda 	#10 					; base 10
.42e7	20 8b 43	jsr $438b			jsr 	DTPrintInteger 			; print as integer.
.42ea	a0 00		ldy #$00			ldy 	#0 						; get length
.42ec	b1 2a		lda ($2a),y			lda 	(temp0),y 				; into X
.42ee	aa		tax				tax
.42ef					_DTPadOut:
.42ef	a9 20		lda #$20			lda 	#" " 					; pad out to indent.
.42f1	20 c4 43	jsr $43c4			jsr 	ListOutputCharacter
.42f4	e8		inx				inx
.42f5	ec d4 0d	cpx $0dd4			cpx 	indent
.42f8	d0 f5		bne $42ef			bne 	_DTPadOut
.42fa	a0 03		ldy #$03			ldy 	#3 						; start position.
.42fc					_DTListLoop:
.42fc	b1 28		lda ($28),y			lda 	(codePtr),y
.42fe	c9 85		cmp #$85			cmp 	#TOK_STR 				; Inline string.
.4300	f0 5c		beq $435e			beq 	_DTIsString
.4302	c9 84		cmp #$84			cmp 	#TOK_FPC 				; Floating point
.4304	f0 54		beq $435a			beq 	_DTIsFloat
.4306	c9 c5		cmp #$c5			cmp 	#TKW_AMP 				; & hex marker
.4308	f0 16		beq $4320			beq 	_DTHexConstant
.430a	c9 80		cmp #$80			cmp 	#TOK_EOL 				; End of Line
.430c	d0 06		bne $4314			bne 	_DTNotEnd
.430e	a9 ff		lda #$ff			lda 	#255 					; print CR
.4310	20 c4 43	jsr $43c4			jsr 	ListOutputCharacter
.4313	60		rts				rts
.4314					_DTNotEnd:
.4314	c9 00		cmp #$00			cmp 	#0
.4316	30 36		bmi $434e			bmi 	_DTIsToken
.4318	c9 40		cmp #$40			cmp 	#$40
.431a	90 38		bcc $4354			bcc 	_DTIsIdentifier
.431c	a9 0a		lda #$0a			lda 	#10 					; this is the base, unsigned decimal
.431e	d0 0d		bne $432d			bne 	_DTConstant
.4320					_DTHexConstant:
.4320	a9 26		lda #$26			lda 	#"&"
.4322	20 c4 43	jsr $43c4			jsr 	ListOutputCharacter
.4325	c8		iny				iny
.4326	a9 01		lda #$01			lda 	#1 						; switch to spaces so &xxxx is treated like a number.
.4328	20 01 44	jsr $4401			jsr 	DTSwitchMode
.432b	a9 10		lda #$10			lda 	#16						; print line unsigned hex
.432d					_DTConstant:
.432d	48		pha				pha
.432e	a9 00		lda #$00			lda 	#0 						; now constant, may need spaces
.4330	20 01 44	jsr $4401			jsr 	DTSwitchMode
.4333	a9 86		lda #$86			lda 	#LTYConstant
.4335	20 c4 43	jsr $43c4			jsr 	ListOutputCharacter
.4338	a2 02		ldx #$02			ldx 	#2 						; get its value
.433a	8a		txa				txa
.433b	a2 10		ldx #$10		ldx	#16
.433d	20 f5 3f	jsr $3ff5		jsr	mainHandler
.4340	aa		tax				tax
.4341	68		pla				pla 							; get base back
.4342	85 32		sta $32				sta 	tempShort
.4344	5a		phy				phy
.4345	a5 32		lda $32				lda 	tempShort 				; print in base A stck level X
.4347	20 8b 43	jsr $438b			jsr 	DTPrintInteger
.434a	7a		ply				ply
.434b	4c fc 42	jmp $42fc			jmp 	_DTListLoop
.434e					_DTIsToken:
.434e	20 5a 44	jsr $445a			jsr 	DTDecodeToken
.4351	4c fc 42	jmp $42fc			jmp 	_DTListLoop
.4354					_DTIsIdentifier:
.4354	20 13 44	jsr $4413			jsr 	DTIdentifier
.4357	4c fc 42	jmp $42fc			jmp 	_DTListLoop
.435a					_DTIsFloat:
>435a	db						.byte 	$DB
.435b	4c 5a 43	jmp $435a			jmp 	_DTIsFloat
.435e					_DTIsString:
.435e	a9 01		lda #$01			lda 	#1 							; now punctuation, may need spaces
.4360	20 01 44	jsr $4401			jsr 	DTSwitchMode
.4363	a9 81		lda #$81			lda 	#LTYString
.4365	20 c4 43	jsr $43c4			jsr 	ListOutputCharacter
.4368	a9 22		lda #$22			lda 	#'"'						; open quote
.436a	20 c4 43	jsr $43c4			jsr 	ListOutputCharacter
.436d	a2 02		ldx #$02			ldx 	#2 							; evaluate string to TOS2.
.436f	8a		txa				txa
.4370	a2 10		ldx #$10		ldx	#16
.4372	20 f5 3f	jsr $3ff5		jsr	mainHandler
.4375	aa		tax				tax
.4376	b5 98		lda $98,x			lda 	esInt0,x 					; copy string address to temp0
.4378	85 2a		sta $2a				sta 	temp0
.437a	b5 a0		lda $a0,x			lda 	esInt1,x
.437c	85 2b		sta $2b				sta 	temp0+1
.437e	a9 00		lda #$00			lda 	#0 							; don't capitalise.
.4380	20 9c 43	jsr $439c			jsr 	DTPrintLengthPrefix
.4383	a9 22		lda #$22			lda 	#'"'
.4385	20 c4 43	jsr $43c4			jsr 	ListOutputCharacter
.4388	4c fc 42	jmp $42fc			jmp 	_DTListLoop

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/detokenise/dtprint.asm

.0dd5					tPrintCount:
>0dd5							.fill 	1
.438b					DTPrintInteger:
.438b	48		pha				pha									; save base
.438c	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.438e	85 2a		sta $2a				sta 	temp0
.4390	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.4392	85 2b		sta $2b				sta 	1+(temp0)
.4394	7a		ply				ply
.4395	8a		txa				txa
.4396	a2 12		ldx #$12		ldx	#18
.4398	20 f5 3f	jsr $3ff5		jsr	mainHandler
.439b	aa		tax				tax 								; then drop through here.
.439c					DTPrintLengthPrefix:
.439c	aa		tax				tax 								; A = 0 = don't case convert.
.439d	5a		phy				phy
.439e	a0 00		ldy #$00			ldy 	#0 							; get string length = chars to print.
.43a0	b1 2a		lda ($2a),y			lda 	(temp0),y
.43a2	8d d5 0d	sta $0dd5			sta 	tPrintCount
.43a5	f0 1b		beq $43c2			beq 	_DTPLPExit 					; empty string
.43a7					_DTPLPLoop:
.43a7	c8		iny				iny 								; get next.
.43a8	b1 2a		lda ($2a),y			lda 	(temp0),y
.43aa	29 7f		and #$7f			and 	#$7F
.43ac	e0 00		cpx #$00			cpx 	#0 							; skip if not case converting
.43ae	f0 0a		beq $43ba			beq 	_DTPLPNoCase
.43b0	c9 41		cmp #$41			cmp 	#"A" 						; if converting UC -> LC
.43b2	90 06		bcc $43ba			bcc 	_DTPLPNoCase
.43b4	c9 5b		cmp #$5b			cmp 	#"Z"+1
.43b6	b0 02		bcs $43ba			bcs 	_DTPLPNoCase
.43b8	49 20		eor #$20			eor 	#"A"^"a"
.43ba					_DTPLPNoCase
.43ba	20 c4 43	jsr $43c4			jsr 	ListOutputCharacter 		; call handler
.43bd	ce d5 0d	dec $0dd5			dec 	tPrintCount 				; do all the characters
.43c0	d0 e5		bne $43a7			bne 	_DTPLPLoop
.43c2					_DTPLPExit:
.43c2	7a		ply				ply
.43c3	60		rts				rts
.43c4					ListOutputCharacter:
.43c4	85 32		sta $32				sta 	tempShort
.43c6	48		pha				pha
.43c7	da		phx				phx
.43c8	5a		phy				phy
.43c9	a5 32		lda $32				lda 	tempShort 					; convert ASCII 6 bit (0-31) to 7 bit.
.43cb	c9 20		cmp #$20			cmp 	#32
.43cd	b0 0c		bcs $43db			bcs		_LOCHiBit
.43cf	09 40		ora #$40			ora 	#64 						; conversion
.43d1	c9 40		cmp #$40			cmp 	#64							; make l/c
.43d3	f0 06		beq $43db			beq 	_LOCHiBit
.43d5	c9 5b		cmp #$5b			cmp 	#65+26
.43d7	b0 02		bcs $43db			bcs 	_LOCHiBit
.43d9	69 20		adc #$20			adc 	#32
.43db					_LOCHiBit:
.43db	20 e2 43	jsr $43e2			jsr 	_LOCCallVector				; call o/p handler routine
.43de	7a		ply				ply
.43df	fa		plx				plx
.43e0	68		pla				pla
.43e1					_LOCExit:
.43e1	60		rts				rts
.43e2					_LOCCallVector:
.43e2	6c d1 0d	jmp ($0dd1)			jmp 	(deTokeniseVector)
.43e5					deTokenPrint:
.43e5	c9 00		cmp #$00			cmp 	#0 							; if bit 7 sets ink colour
.43e7	30 06		bmi $43ef			bmi 	_dtpInk
.43e9	a2 14		ldx #$14		ldx	#20
.43eb	20 05 15	jsr $1505		jsr	deviceHandler
.43ee	60		rts				rts
.43ef	c9 ff		cmp #$ff	_dtpInk:cmp 	#255 						; e.g. herhe, get ink and set it
.43f1	f0 08		beq $43fb			beq 	_dtpCR						; except $FF => CRLF
.43f3	29 07		and #$07			and 	#7
.43f5	a2 06		ldx #$06		ldx	#6
.43f7	20 05 15	jsr $1505		jsr	deviceHandler
.43fa	60		rts				rts
.43fb					_dtpCR:
.43fb	a2 04		ldx #$04		ldx	#4
.43fd	20 05 15	jsr $1505		jsr	deviceHandler
.4400	60		rts				rts
.4401					DTSwitchMode:
.4401	cd d3 0d	cmp $0dd3			cmp 	LastCharacterClass 			; if changed, update character class
.4404	f0 04		beq $440a			beq 	_DTSMNoChange
.4406	8d d3 0d	sta $0dd3			sta 	LastCharacterClass
.4409					_DTSMExit:
.4409	60		rts				rts
.440a					_DTSMNoChange:
.440a	c9 01		cmp #$01			cmp 	#1 							; if didn't change to punctuation, two identifiers so we
.440c	f0 fb		beq $4409			beq 	_DTSMExit 					; need a space.
.440e	a9 20		lda #$20			lda 	#" "
.4410	4c c4 43	jmp $43c4			jmp 	ListOutputCharacter

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/detokenise/identifier.asm

.4413					DTIdentifier:
.4413	a9 00		lda #$00			lda 	#0 							; now text, may need spaces
.4415	20 01 44	jsr $4401			jsr 	DTSwitchMode
.4418	a9 87		lda #$87			lda 	#LTYIdentifier
.441a	20 c4 43	jsr $43c4			jsr 	ListOutputCharacter
.441d					_DTILoop:
.441d	b1 28		lda ($28),y			lda 	(codePtr),y 				; output main bit of identifier.
.441f	c9 2d		cmp #$2d			cmp 	#"-"						; make - back to _
.4421	d0 02		bne $4425			bne 	_DTINotUS
.4423	a9 5f		lda #$5f			lda 	#"_"
.4425					_DTINotUS:
.4425	20 c4 43	jsr $43c4			jsr 	ListOutputCharacter
.4428	c8		iny				iny
.4429	b1 28		lda ($28),y			lda 	(codePtr),y 				; until end identifier marker.
.442b	c9 3a		cmp #$3a			cmp 	#$3A
.442d	90 ee		bcc $441d			bcc 	_DTILoop
.442f	c8		iny				iny
.4430	c9 3a		cmp #$3a			cmp 	#$3A 						; is it integer non array
.4432	f0 25		beq $4459			beq 	_DTIExit 					; no postfix.
.4434	48		pha				pha
.4435	a9 01		lda #$01			lda  	#1 							; it ends in punctuation
.4437	8d d3 0d	sta $0dd3			sta 	LastCharacterClass
.443a	a9 82		lda #$82			lda 	#LTYPunctuation
.443c	20 c4 43	jsr $43c4			jsr 	ListOutputCharacter
.443f	68		pla				pla
.4440	c9 3b		cmp #$3b			cmp 	#$3B
.4442	f0 10		beq $4454			beq 	_DTIArray
.4444	4a		lsr a				lsr 	a 							; array flag in C
.4445	08		php				php
.4446	49 1e		eor #$1e			eor 	#$3C/2 						; check if $
.4448	f0 02		beq $444c			beq 	_DTIDollar
.444a	a9 07		lda #$07			lda 	#"$"^"#" 					; this if #, 0 if $
.444c					_DTIDollar:
.444c	49 24		eor #$24			eor 	#"$"
.444e	20 c4 43	jsr $43c4			jsr 	ListOutputCharacter
.4451	28		plp				plp
.4452	90 05		bcc $4459			bcc 	_DTIExit
.4454					_DTIArray:
.4454	a9 28		lda #$28			lda 	#"("
.4456	20 c4 43	jsr $43c4			jsr 	ListOutputCharacter
.4459					_DTIExit:
.4459	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/detokenise/token.asm

.445a					DTDecodeToken:
.445a	a2 00		ldx #$00			ldx 	#0 							; table number to use
.445c	b1 28		lda ($28),y			lda 	(codePtr),y
.445e	c9 84		cmp #$84			cmp 	#$84
.4460	b0 05		bcs $4467			bcs 	_DTNotShift
.4462	29 03		and #$03			and 	#3 							; get the shift 1..3
.4464	0a		asl a				asl 	a 							; put 2 x in X
.4465	aa		tax				tax
.4466	c8		iny				iny
.4467					_DTNotShift:
.4467	bd 5d 47	lda $475d,x			lda 	TokenTableAddress,x 		; get the token table to use to decode it.
.446a	85 2a		sta $2a				sta 	temp0 						; point into temp0
.446c	bd 5e 47	lda $475e,x			lda 	TokenTableAddress+1,x
.446f	85 2b		sta $2b				sta 	temp0+1
.4471	b1 28		lda ($28),y			lda 	(codePtr),y 				; get the token value.
.4473	c8		iny				iny 								; consume it.
.4474	aa		tax				tax
.4475	5a		phy				phy
.4476					_DTFindText:
.4476	e0 86		cpx #$86			cpx 	#$86 						; finished ?
.4478	f0 11		beq $448b			beq 	_DTFoundText
.447a	ca		dex				dex
.447b	a0 00		ldy #$00			ldy 	#0 							; add length+1 to temp0
.447d	38		sec				sec
.447e	b1 2a		lda ($2a),y			lda 	(temp0),y
.4480	65 2a		adc $2a				adc 	temp0
.4482	85 2a		sta $2a				sta 	temp0
.4484	90 f0		bcc $4476			bcc 	_DTFindText
.4486	e6 2b		inc $2b				inc 	temp0+1
.4488	4c 76 44	jmp $4476			jmp 	_DTFindText
.448b					_DTFoundText:
.448b	a0 01		ldy #$01			ldy 	#1 							; get first character
.448d	b1 2a		lda ($2a),y			lda 	(temp0),y
.448f	29 7f		and #$7f			and 	#$7F 						; will have bit 7 set.
.4491	c9 41		cmp #$41			cmp 	#"A" 						; check for punctuation.
.4493	90 11		bcc $44a6			bcc 	_DTIsPunctuation
.4495	c9 5b		cmp #$5b			cmp 	#"Z"+1
.4497	b0 0d		bcs $44a6			bcs 	_DTIsPunctuation
.4499	a9 00		lda #$00			lda 	#0 							; now text, may need spaces
.449b	20 01 44	jsr $4401			jsr 	DTSwitchMode
.449e	a9 83		lda #$83			lda 	#LTYKeyword
.44a0	20 c4 43	jsr $43c4			jsr 	ListOutputCharacter
.44a3	4c b0 44	jmp $44b0			jmp 	_DTPrint
.44a6					_DTIsPunctuation:
.44a6	a9 01		lda #$01			lda 	#1 							; now punctuation, may need spaces
.44a8	20 01 44	jsr $4401			jsr 	DTSwitchMode
.44ab	a9 82		lda #$82			lda 	#LTYPunctuation
.44ad	20 c4 43	jsr $43c4			jsr 	ListOutputCharacter
.44b0					_DTPrint:
.44b0	a9 01		lda #$01			lda 	#1 							; fix case.
.44b2	20 9c 43	jsr $439c			jsr 	DTPrintLengthPrefix 		; print it out.
.44b5	a0 00		ldy #$00			ldy 	#0
.44b7	b1 2a		lda ($2a),y			lda 	(temp0),y
.44b9	a8		tay				tay
.44ba	b1 2a		lda ($2a),y			lda 	(temp0),y
.44bc	29 7f		and #$7f			and 	#$7F 						; will have bit 7 set.
.44be	c9 41		cmp #$41			cmp 	#"A" 						; check for punctuation.
.44c0	90 04		bcc $44c6			bcc 	_DTIsNowPunctuation
.44c2	c9 5b		cmp #$5b			cmp 	#"Z"+1
.44c4	90 05		bcc $44cb			bcc 	_DTPExit
.44c6					_DTIsNowPunctuation:
.44c6	a9 01		lda #$01			lda 	#1
.44c8	8d d3 0d	sta $0dd3			sta		LastCharacterClass
.44cb					_DTPExit:
.44cb	7a		ply				ply
.44cc	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/search.asm

.0dd6					currentSet:
>0dd6							.fill 	1
.44cd					TokenSearch:
.44cd	da		phx				phx
.44ce	5a		phy				phy
.44cf	a9 00		lda #$00			lda 	#0
.44d1	8d d6 0d	sta $0dd6			sta 	currentSet
.44d4					_TSLoop:
.44d4	ad d6 0d	lda $0dd6			lda 	currentSet 					; 2 x currentset in X
.44d7	0a		asl a				asl 	a
.44d8	aa		tax				tax
.44d9	bd 5d 47	lda $475d,x			lda 	TokenTableAddress,x 		; set temp0 to the table address
.44dc	85 2a		sta $2a				sta 	temp0
.44de	bd 5e 47	lda $475e,x			lda 	TokenTableAddress+1,x
.44e1	85 2b		sta $2b				sta 	temp0+1
.44e3	20 08 45	jsr $4508			jsr 	TokenSearchOne 				; search one table
.44e6	b0 0d		bcs $44f5			bcs 	_TSFound 					; found a token.
.44e8	ee d6 0d	inc $0dd6			inc 	currentSet 					; next set
.44eb	ad d6 0d	lda $0dd6			lda 	currentSet
.44ee	c9 04		cmp #$04			cmp 	#4
.44f0	d0 e2		bne $44d4			bne 	_TSLoop 					; back if not done all four.
.44f2	18		clc				clc 								; clear carry and exit
.44f3	90 10		bcc $4505			bcc 	_TSExit
.44f5					_TSFound:
.44f5	48		pha				pha 								; save token
.44f6	ad d6 0d	lda $0dd6			lda 	currentSet					; if set zero no shift
.44f9	f0 05		beq $4500			beq 	_TSNoShift
.44fb	09 80		ora #$80			ora 	#$80 						; Write as $81-$83
.44fd	20 b9 45	jsr $45b9			jsr 	TokenWrite
.4500					_TSNoShift:
.4500	68		pla				pla 								; get token back
.4501	20 b9 45	jsr $45b9			jsr 	TokenWrite 					; write it
.4504	38		sec				sec 								; carry set indicating success
.4505					_TSExit:
.4505	7a		ply				ply
.4506	fa		plx				plx
.4507	60		rts				rts
.4508					TokenSearchOne:
.4508	a2 86		ldx #$86			ldx 	#$86 						; current token being tested.
.450a					_TSOLoop:
.450a	a0 00		ldy #$00			ldy 	#0
.450c	b1 2a		lda ($2a),y			lda 	(temp0),y 					; get length of token
.450e	f0 26		beq $4536			beq 	_TSOFail 					; if zero, end of table
.4510	cd cf 0a	cmp $0acf			cmp 	convertBuffer 				; length is the same, compare the text matches.
.4513	f0 11		beq $4526			beq 	_TSOCheckText
.4515					_TSONext:
.4515	e8		inx				inx 								; bump token
.4516	a0 00		ldy #$00			ldy 	#0							; get length
.4518	b1 2a		lda ($2a),y			lda 	(temp0),y
.451a	38		sec				sec
.451b	65 2a		adc $2a				adc 	temp0 						; add to temp0 + 1
.451d	85 2a		sta $2a				sta 	temp0
.451f	90 e9		bcc $450a			bcc 	_TSOLoop
.4521	e6 2b		inc $2b				inc 	temp0+1
.4523	4c 0a 45	jmp $450a			jmp 	_TSOLoop
.4526					_TSOCheckText:
.4526	a8		tay				tay 								; compare length downto 1.
.4527					_TSOCheckLoop:
.4527	b1 2a		lda ($2a),y			lda 	(temp0),y 					; use EOR to compare
.4529	59 cf 0a	eor $0acf,y			eor 	convertBuffer,y
.452c	29 7f		and #$7f			and 	#$7F 						; ignore bit 7
.452e	d0 e5		bne $4515			bne 	_TSONext 					; different goto next.
.4530	88		dey				dey 								; do all
.4531	d0 f4		bne $4527			bne 	_TSOCheckLoop
.4533	8a		txa				txa 								; return token in A and carry set
.4534	38		sec				sec
.4535	60		rts				rts
.4536					_TSOFail:
.4536	18		clc				clc
.4537	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/test.asm

.4538					TokTest:
.4538	a2 ff		ldx #$ff				ldx 	#$FF
.453a	9a		txs					txs
.453b	a9 58		lda #$58			lda 	#(TokenText1) & $FF
.453d	85 28		sta $28				sta 	codePtr
.453f	a9 45		lda #$45			lda 	#(TokenText1) >> 8
.4541	85 29		sta $29				sta 	1+(codePtr)
.4543	20 58 45	jsr $4558				jsr 	Tokenise
.4546	a2 00		ldx #$00	TokStop:	ldx 	#0 					; compare vs precalculated result
.4548	bd 58 45	lda $4558,x	_TokCheck:	lda 	TokenBytes1,x
.454b	dd da 0d	cmp $0dda,x				cmp 	tokenBuffer,x
.454e	d0 fe		bne $454e	_TokFail:	bne 	_TokFail	 		; error.
.4550	e8		inx					inx
.4551	c9 80		cmp #$80				cmp 	#$80
.4553	d0 f3		bne $4548				bne 	_TokCheck
.4555	4c ff ff	jmp $ffff				jmp 	$FFFF 				; successfully tokenised then quit.

;******  Processing file: tokeniser/tokenise/../../generated/toktest.inc

.4558					TokenText1:
.4558					TokenBytes1:

;******  Return to file: tokeniser/tokenise/test.asm


;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokenise.asm

.0dd7					tokenHeader:
>0dd7							.fill 	3
.0dda					tokenBuffer:
>0dda							.fill 	256
.0eda					tokenBufferIndex:
>0eda							.fill 	1
.4558					Tokenise:
.4558	20 d0 45	jsr $45d0			jsr 	TokeniseMakeASCIIZ 			; convert to ASCIIZ string.
.455b					TokeniseASCIIZ:
.455b	20 e1 45	jsr $45e1			jsr 	TokeniseFixCase 			; remove controls and lower case outside quotes.
.455e	a9 00		lda #$00			lda 	#0 							; reset the token buffer index
.4560	8d da 0e	sta $0eda			sta 	tokenBufferIndex
.4563	a8		tay				tay 								; start pointer
.4564	a9 80		lda #$80			lda 	#$80 						; empty token buffer ($80 ends it)
.4566	8d da 0d	sta $0dda			sta 	tokenBuffer
.4569					_TokLoop:
.4569	b1 28		lda ($28),y			lda 	(codePtr),y 				; get next character
.456b	f0 46		beq $45b3			beq 	_TokExit 					; if zero, then exit.
.456d	c8		iny				iny 								; skip over spaces.
.456e	c9 20		cmp #$20			cmp 	#" "
.4570	f0 f7		beq $4569			beq 	_TokLoop
.4572	88		dey				dey 								; point back to character.
.4573	c9 26		cmp #$26			cmp 	#"&"						; Hexadecimal constant.
.4575	f0 18		beq $458f			beq 	_TokHexConst
.4577	c9 22		cmp #$22			cmp 	#'"'						; Quoted String
.4579	f0 23		beq $459e			beq 	_TokQString
.457b	c9 5b		cmp #$5b			cmp 	#"Z"+1 						; > 'Z' is punctuation
.457d	b0 26		bcs $45a5			bcs 	_TokPunctuation
.457f	c9 41		cmp #$41			cmp 	#"A" 						; A..Z identifier
.4581	b0 29		bcs $45ac			bcs 	_TokIdentifier
.4583	c9 3a		cmp #$3a			cmp 	#"9"+1
.4585	b0 1e		bcs $45a5			bcs 	_TokPunctuation 			; between 9 and A exclusive, punctuation
.4587	c9 30		cmp #$30			cmp 	#"0"
.4589	90 1a		bcc $45a5			bcc 	_TokPunctuation 			; < 0, punctuation.
.458b	a9 0a		lda #$0a			lda 	#10  						; 0..9 constant in base 10.
.458d	d0 08		bne $4597			bne 	_TokConst
.458f					_TokHexConst:
.458f	c8		iny				iny									; consume token.
.4590	a9 c5		lda #$c5			lda 	#TKW_AMP 					; Write ampersand token out
.4592	20 b9 45	jsr $45b9			jsr 	TokenWrite
.4595	a9 10		lda #$10			lda 	#16
.4597					_TokConst:
.4597	20 9d 46	jsr $469d			jsr 	TokeniseInteger
.459a	b0 cd		bcs $4569			bcs 	_TokLoop
.459c	90 18		bcc $45b6			bcc 	_TokFail
.459e					_TokQString:
.459e	20 31 47	jsr $4731			jsr 	TokeniseString
.45a1	b0 c6		bcs $4569			bcs 	_TokLoop
.45a3	90 11		bcc $45b6			bcc 	_TokFail
.45a5					_TokPunctuation:
.45a5	20 10 47	jsr $4710			jsr 	TokenisePunctuation
.45a8	b0 bf		bcs $4569			bcs 	_TokLoop
.45aa	90 0a		bcc $45b6			bcc 	_TokFail
.45ac					_TokIdentifier:
.45ac	20 10 46	jsr $4610			jsr 	TokeniseIdentifier
.45af	b0 b8		bcs $4569			bcs 	_TokLoop
.45b1	90 03		bcc $45b6			bcc 	_TokFail
.45b3					_TokExit:
.45b3	a9 01		lda #$01			lda 	#1
.45b5	60		rts				rts
.45b6					_TokFail:
.45b6	a9 00		lda #$00			lda 	#0
.45b8	60		rts				rts
.45b9					TokenWrite:
.45b9	85 32		sta $32				sta 	tempShort 					; save XA
.45bb	48		pha				pha
.45bc	da		phx				phx
.45bd	a5 32		lda $32				lda 	tempShort
.45bf	ae da 0e	ldx $0eda			ldx 	tokenBufferIndex 			; geet index
.45c2	9d da 0d	sta $0dda,x			sta 	tokenBuffer,x 				; write byte to buffer
.45c5	a9 80		lda #$80			lda 	#TOK_EOL 					; pre-emptively write EOL marker after
.45c7	9d db 0d	sta $0ddb,x			sta 	tokenBuffer+1,x
.45ca	ee da 0e	inc $0eda			inc 	tokenBufferIndex 			; bump index
.45cd	fa		plx				plx
.45ce	68		pla				pla
.45cf	60		rts				rts
.45d0					TokeniseMakeASCIIZ:
.45d0	a0 00		ldy #$00			ldy 	#0							; get length of string.
.45d2	b1 28		lda ($28),y			lda 	(codePtr),y
.45d4	a8		tay				tay
.45d5	c8		iny				iny 								; +1, the NULL goes here.
.45d6	a9 00		lda #$00			lda 	#0
.45d8	91 28		sta ($28),y			sta 	(codePtr),y 				; write the trailing NULL.
.45da	e6 28		inc $28				inc 	codePtr 					; bump the pointer.
.45dc	d0 02		bne $45e0			bne 	_TMKAExit
.45de	e6 29		inc $29				inc 	codePtr+1
.45e0					_TMKAExit:
.45e0	60		rts				rts
.45e1					TokeniseFixCase:
.45e1	a0 00		ldy #$00			ldy 	#0 							; position in buffer.
.45e3	a2 01		ldx #$01			ldx 	#1 							; bit 0 of this is 'in quotes'
.45e5					_TFCFlipQ:
.45e5	8a		txa				txa
.45e6	49 01		eor #$01			eor 	#1
.45e8	aa		tax				tax
.45e9					_TFCLoop:
.45e9	b1 28		lda ($28),y			lda 	(codePtr),y 				; get character
.45eb	f0 22		beq $460f			beq 	_TFCExit 					; if zero exit.
.45ed	c9 20		cmp #$20			cmp 	#32 						; if control
.45ef	90 1a		bcc $460b			bcc 	_TFCControl
.45f1	c8		iny				iny 								; preconsume
.45f2	c9 22		cmp #$22			cmp 	#'"'
.45f4	f0 ef		beq $45e5			beq 	_TFCFlipQ
.45f6	c9 61		cmp #$61			cmp 	#"a"						; check if L/C
.45f8	90 ef		bcc $45e9			bcc 	_TFCLoop
.45fa	c9 7b		cmp #$7b			cmp 	#"z"+1
.45fc	b0 eb		bcs $45e9			bcs 	_TFCLoop
.45fe	e0 00		cpx #$00			cpx 	#0 							; in quotes, if so, leave alone.
.4600	d0 e7		bne $45e9			bne 	_TFCLoop
.4602	88		dey				dey
.4603	49 20		eor #$20			eor 	#"A"^"a"					; make U/C
.4605					_TFCWrite:
.4605	91 28		sta ($28),y			sta 	(codePtr),y
.4607	c8		iny				iny
.4608	4c e9 45	jmp $45e9			jmp 	_TFCLoop
.460b					_TFCControl:
.460b	a9 20		lda #$20			lda 	#" "
.460d	d0 f6		bne $4605			bne 	_TFCWrite
.460f					_TFCExit:
.460f	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokident.asm

.4610					TokeniseIdentifier:
.4610	a2 00		ldx #$00			ldx 	#0
.4612					_TICopyID:
.4612	b1 28		lda ($28),y			lda 	(codePtr),y					; get characters
.4614	c9 5f		cmp #$5f			cmp 	#"_" 						; underscore converted to minus internally.
.4616	f0 16		beq $462e			beq 	_TICopyUnderscore
.4618	c9 2e		cmp #$2e			cmp 	#"."
.461a	f0 14		beq $4630			beq 	_TICopyIn
.461c	c9 30		cmp #$30			cmp 	#"0"
.461e	90 1b		bcc $463b			bcc 	_TIEndCopy
.4620	c9 3a		cmp #$3a			cmp 	#"9"+1
.4622	90 0c		bcc $4630			bcc 	_TICopyIn
.4624	c9 41		cmp #$41			cmp 	#"A"
.4626	90 13		bcc $463b			bcc 	_TIEndCopy
.4628	c9 5b		cmp #$5b			cmp 	#"Z"+1
.462a	b0 0f		bcs $463b			bcs		_TIEndCopy
.462c	90 02		bcc $4630			bcc 	_TICopyIn
.462e					_TICopyUnderScore:
.462e	a9 2d		lda #$2d			lda 	#"-"						; _ is mapped to -
.4630					_TICopyIn:
.4630	e8		inx				inx 								; write into buffer in 7 bit ASCII form
.4631	9d cf 0a	sta $0acf,x			sta 	convertBuffer,x
.4634	8e cf 0a	stx $0acf			stx 	convertBuffer
.4637	c8		iny				iny 								; next character
.4638	4c 12 46	jmp $4612			jmp 	_TICopyID 					; loop round
.463b					_TIEndCopy:
.463b	a9 24		lda #$24			lda 	#"$"
.463d	20 90 46	jsr $4690			jsr 	TIDCheckCopy
.4640	a9 23		lda #$23			lda 	#"#"
.4642	20 90 46	jsr $4690			jsr 	TIDCheckCopy
.4645	a9 28		lda #$28			lda 	#"("
.4647	20 90 46	jsr $4690			jsr 	TIDCheckCopy
.464a	20 cd 44	jsr $44cd			jsr 	TokenSearch 				; is it a token
.464d	b0 3f		bcs $468e			bcs 	_TIExit 					; if so, then exit.
.464f	5a		phy				phy
.4650	a0 3a		ldy #$3a			ldy 	#$3A 						; default type.
.4652	ae cf 0a	ldx $0acf			ldx 	convertBuffer 				; is last character (
.4655	bd cf 0a	lda $0acf,x			lda 	convertBuffer,x
.4658	c9 28		cmp #$28			cmp 	#"("
.465a	d0 02		bne $465e			bne 	_TINotArray
.465c	ca		dex				dex 								; yes, remove it and convert to array.
.465d	c8		iny				iny
.465e					_TINotArray:
.465e	bd cf 0a	lda $0acf,x			lda 	convertBuffer,x 			; check for $
.4661	c9 24		cmp #$24			cmp 	#"$"
.4663	d0 03		bne $4668			bne 	_TINotString
.4665	ca		dex				dex
.4666	c8		iny				iny
.4667	c8		iny				iny
.4668					_TINotString:
.4668	bd cf 0a	lda $0acf,x			lda 	convertBuffer,x 			; check for #
.466b	c9 23		cmp #$23			cmp 	#"#"
.466d	d0 05		bne $4674			bne 	_TINotFloat
.466f	ca		dex				dex
.4670	c8		iny				iny
.4671	c8		iny				iny
.4672	c8		iny				iny
.4673	c8		iny				iny
.4674					_TINotFloat:
.4674	e8		inx				inx 								; write end marker for identifier.
.4675	98		tya				tya
.4676	9d cf 0a	sta $0acf,x			sta 	convertBuffer,x
.4679	8e cf 0a	stx $0acf			stx 	convertBuffer 				; update length.
.467c	a2 01		ldx #$01			ldx 	#1
.467e					_TIOutput:
.467e	bd cf 0a	lda $0acf,x			lda 	convertBuffer,x
.4681	29 3f		and #$3f			and 	#$3F
.4683	48		pha				pha
.4684	20 b9 45	jsr $45b9			jsr 	TokenWrite
.4687	e8		inx				inx
.4688	68		pla				pla
.4689	c9 3a		cmp #$3a			cmp 	#$3A
.468b	90 f1		bcc $467e			bcc 	_TIOutput
.468d	7a		ply				ply
.468e					_TIExit:
.468e	38		sec				sec 								; this can't fail.
.468f	60		rts				rts
.4690					TIDCheckCopy:
.4690	d1 28		cmp ($28),y			cmp 	(codePtr),y
.4692	d0 08		bne $469c			bne 	_TIDCCExit
.4694	e8		inx				inx
.4695	9d cf 0a	sta $0acf,x			sta 	convertBuffer,x
.4698	8e cf 0a	stx $0acf			stx 	convertBuffer
.469b	c8		iny				iny
.469c					_TIDCCExit:
.469c	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokinteger.asm

.469d					TokeniseInteger:
.469d	85 2c		sta $2c				sta 	temp1 						; save base
.469f	a2 00		ldx #$00			ldx 	#0							; count of chars so far
.46a1	8e cf 0a	stx $0acf			stx 	convertBuffer
.46a4					_TIGetChars:
.46a4	b1 28		lda ($28),y			lda 	(codePtr),y 				; check character is numeric
.46a6	c9 30		cmp #$30			cmp 	#"0"
.46a8	90 1f		bcc $46c9			bcc 	_TIEndGet
.46aa	c9 3a		cmp #$3a			cmp 	#"9"+1
.46ac	90 10		bcc $46be			bcc 	_TIHaveChar
.46ae	a5 2c		lda $2c				lda 	temp1 						; fail if not hex mode
.46b0	c9 0a		cmp #$0a			cmp 	#10
.46b2	f0 15		beq $46c9			beq 	_TIEndGet
.46b4	b1 28		lda ($28),y			lda 	(codePtr),y 				; check legitimate hex.
.46b6	c9 41		cmp #$41			cmp 	#"A"
.46b8	90 0f		bcc $46c9			bcc 	_TIEndGet
.46ba	c9 5b		cmp #$5b			cmp 	#"Z"+1
.46bc	b0 0b		bcs $46c9			bcs 	_TIEndGet
.46be					_TIHaveChar:
.46be	e8		inx				inx 								; write into buffer.
.46bf	8e cf 0a	stx $0acf			stx 	convertBuffer
.46c2	9d cf 0a	sta $0acf,x			sta 	convertBuffer,x
.46c5	c8		iny				iny 								; next char
.46c6	4c a4 46	jmp $46a4			jmp 	_TIGetChars
.46c9					_TIEndGet:
.46c9	e0 00		cpx #$00			cpx 	#0 							; no char acquired.
.46cb	f0 1a		beq $46e7			beq 	_TIFail
.46cd	5a		phy				phy
.46ce	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.46d0	85 2a		sta $2a				sta 	temp0
.46d2	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.46d4	85 2b		sta $2b				sta 	1+(temp0)
.46d6	a9 00		lda #$00			lda 	#0 							; stack level 0
.46d8	a4 2c		ldy $2c				ldy 	temp1 						; base Y
.46da	a2 1a		ldx #$1a		ldx	#26
.46dc	20 f5 3f	jsr $3ff5		jsr	mainHandler
.46df	7a		ply				ply
.46e0	90 05		bcc $46e7			bcc 	_TIFail 					; didn't convert.
.46e2	20 e9 46	jsr $46e9			jsr 	TIRecursiveOut 				; recursive output ?
.46e5	38		sec				sec
.46e6	60		rts				rts
.46e7					_TIFail:
.46e7	18		clc				clc
.46e8	60		rts				rts
.46e9					TIRecursiveOut:
.46e9	a5 98		lda $98				lda 	esInt0 						; get value to output after possible recursion
.46eb	29 3f		and #$3f			and 	#$3F
.46ed	09 40		ora #$40			ora 	#$40
.46ef	48		pha				pha
.46f0	a5 98		lda $98				lda 	esInt0 						; are we recursing ?
.46f2	29 c0		and #$c0			and 	#$C0
.46f4	05 a0		ora $a0				ora 	esInt1
.46f6	05 a8		ora $a8				ora 	esInt2
.46f8	05 b0		ora $b0				ora 	esInt3
.46fa	f0 10		beq $470c			beq 	_TIRONoRecursion
.46fc	a2 06		ldx #$06			ldx 	#6 							; shift right x 6
.46fe					_TIROShift:
.46fe	46 b0		lsr $b0				lsr 	esInt3
.4700	66 a8		ror $a8				ror 	esInt2
.4702	66 a0		ror $a0				ror 	esInt1
.4704	66 98		ror $98				ror 	esInt0
.4706	ca		dex				dex
.4707	d0 f5		bne $46fe			bne 	_TIROShift
.4709	20 e9 46	jsr $46e9			jsr 	TIRecursiveOut 				; call recursively
.470c					_TIRONoRecursion:
.470c	68		pla				pla 								; pull the old bit.
.470d	4c b9 45	jmp $45b9			jmp 	TokenWrite

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokpunct.asm

.4710					TokenisePunctuation:
.4710	b1 28		lda ($28),y			lda	 	(codePtr),y 				; copy next 2 chars into convertBuffer
.4712	8d d0 0a	sta $0ad0			sta 	convertBuffer+1
.4715	c8		iny				iny
.4716	b1 28		lda ($28),y			lda 	(codePtr),y
.4718	8d d1 0a	sta $0ad1			sta 	convertBuffer+2
.471b	c8		iny				iny 								; Y is +2
.471c	a9 02		lda #$02			lda 	#2 							; 2 character string.
.471e	8d cf 0a	sta $0acf			sta 	convertBuffer
.4721	20 cd 44	jsr $44cd			jsr 	TokenSearch 				; search for that token.
.4724	b0 0a		bcs $4730			bcs 	_TIFound
.4726	ce cf 0a	dec $0acf			dec 	convertBuffer 				; make it a 1 character string
.4729	88		dey				dey 								; Y is now +1
.472a	20 cd 44	jsr $44cd			jsr 	TokenSearch 				; search for that token.
.472d	b0 01		bcs $4730			bcs 	_TIFound
.472f	88		dey				dey 								; Y is now +0, carry clear indicating failure.
.4730					_TIFound:
.4730	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokstring.asm

.4731					TokeniseString:
.4731	c8		iny				iny 								; skip opening quote
.4732	a2 ff		ldx #$ff			ldx 	#255 						; count length of string.
.4734	84 2a		sty $2a				sty 	temp0 						; save start.
.4736					_TSGetLength:
.4736	b1 28		lda ($28),y			lda 	(codePtr),y 				; get next
.4738	f0 21		beq $475b			beq 	_TSFail						; end of line, fail
.473a	c8		iny				iny
.473b	e8		inx				inx
.473c	c9 22		cmp #$22			cmp 	#'"' 						; until end quote found.
.473e	d0 f6		bne $4736			bne 	_TSGetLength
.4740	a9 85		lda #$85			lda 	#TOK_STR 					; write string token out
.4742	20 b9 45	jsr $45b9			jsr 	TokenWrite
.4745	8a		txa				txa 								; output length
.4746	20 b9 45	jsr $45b9			jsr 	TokenWrite
.4749	a4 2a		ldy $2a				ldy 	temp0 						; get original position
.474b	e0 00		cpx #$00			cpx 	#0 							; check ended
.474d	f0 09		beq $4758			beq 	_TSExit
.474f					_TSOutput:
.474f	b1 28		lda ($28),y			lda 	(codePtr),y					; output character
.4751	20 b9 45	jsr $45b9			jsr 	TokenWrite
.4754	c8		iny				iny
.4755	ca		dex				dex
.4756	d0 f7		bne $474f			bne 	_TSOutput
.4758					_TSExit:
.4758	c8		iny				iny 								; skip ending quote
.4759	38		sec				sec 								; return CS.
.475a	60		rts				rts
.475b					_TSFail:
.475b	18		clc				clc
.475c	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokentext.asm

.475d					TokenTableAddress:
>475d	65 47						.word 	Group0Text
>475f	3d 49						.word 	Group1Text
>4761	8a 4a						.word 	Group2Text
>4763	db 4a						.word 	Group3Text

;******  Processing file: tokeniser/../generated/tokentext0.inc

.4765					Group0Text:
>4765	03 41 4e c4				.byte $03,$41,$4e,$c4                  ; $86 and
>4769	02 4f d2				.byte $02,$4f,$d2                      ; $87 or
>476c	03 58 4f d2				.byte $03,$58,$4f,$d2                  ; $88 xor
>4770	02 3e bd				.byte $02,$3e,$bd                      ; $89 >=
>4773	02 3c bd				.byte $02,$3c,$bd                      ; $8a <=
>4776	01 be					.byte $01,$be                          ; $8b >
>4778	01 bc					.byte $01,$bc                          ; $8c <
>477a	01 bd					.byte $01,$bd                          ; $8d =
>477c	02 3c be				.byte $02,$3c,$be                      ; $8e <>
>477f	01 ab					.byte $01,$ab                          ; $8f +
>4781	01 ad					.byte $01,$ad                          ; $90 -
>4783	02 3e be				.byte $02,$3e,$be                      ; $91 >>
>4786	02 3c bc				.byte $02,$3c,$bc                      ; $92 <<
>4789	01 aa					.byte $01,$aa                          ; $93 *
>478b	01 af					.byte $01,$af                          ; $94 /
>478d	03 4d 4f c4				.byte $03,$4d,$4f,$c4                  ; $95 mod
>4791	01 de					.byte $01,$de                          ; $96 ^
>4793	01 a1					.byte $01,$a1                          ; $97 !
>4795	01 bf					.byte $01,$bf                          ; $98 ?
>4797	06 52 45 50 45 41 d4			.byte $06,$52,$45,$50,$45,$41,$d4      ; $99 repeat
>479e	05 57 48 49 4c c5			.byte $05,$57,$48,$49,$4c,$c5          ; $9a while
>47a4	03 46 4f d2				.byte $03,$46,$4f,$d2                  ; $9b for
>47a8	02 49 c6				.byte $02,$49,$c6                      ; $9c if
>47ab	07 44 45 46 50 52 4f c3			.byte $07,$44,$45,$46,$50,$52,$4f,$c3  ; $9d defproc
>47b3	05 55 4e 54 49 cc			.byte $05,$55,$4e,$54,$49,$cc          ; $9e until
>47b9	04 57 45 4e c4				.byte $04,$57,$45,$4e,$c4              ; $9f wend
>47be	04 4e 45 58 d4				.byte $04,$4e,$45,$58,$d4              ; $a0 next
>47c3	04 54 48 45 ce				.byte $04,$54,$48,$45,$ce              ; $a1 then
>47c8	05 45 4e 44 49 c6			.byte $05,$45,$4e,$44,$49,$c6          ; $a2 endif
>47ce	07 45 4e 44 50 52 4f c3			.byte $07,$45,$4e,$44,$50,$52,$4f,$c3  ; $a3 endproc
>47d6	01 a8					.byte $01,$a8                          ; $a4 (
>47d8	04 4c 45 4e a8				.byte $04,$4c,$45,$4e,$a8              ; $a5 len(
>47dd	04 53 47 4e a8				.byte $04,$53,$47,$4e,$a8              ; $a6 sgn(
>47e2	04 41 42 53 a8				.byte $04,$41,$42,$53,$a8              ; $a7 abs(
>47e7	07 52 41 4e 44 4f 4d a8			.byte $07,$52,$41,$4e,$44,$4f,$4d,$a8  ; $a8 random(
>47ef	04 50 41 47 c5				.byte $04,$50,$41,$47,$c5              ; $a9 page
>47f4	04 54 52 55 c5				.byte $04,$54,$52,$55,$c5              ; $aa true
>47f9	05 46 41 4c 53 c5			.byte $05,$46,$41,$4c,$53,$c5          ; $ab false
>47ff	04 4d 49 4e a8				.byte $04,$4d,$49,$4e,$a8              ; $ac min(
>4804	04 4d 41 58 a8				.byte $04,$4d,$41,$58,$a8              ; $ad max(
>4809	04 53 59 53 a8				.byte $04,$53,$59,$53,$a8              ; $ae sys(
>480e	06 54 49 4d 45 52 a8			.byte $06,$54,$49,$4d,$45,$52,$a8      ; $af timer(
>4815	06 45 56 45 4e 54 a8			.byte $06,$45,$56,$45,$4e,$54,$a8      ; $b0 event(
>481c	04 47 45 54 a8				.byte $04,$47,$45,$54,$a8              ; $b1 get(
>4821	06 49 4e 4b 45 59 a8			.byte $06,$49,$4e,$4b,$45,$59,$a8      ; $b2 inkey(
>4828	06 41 4c 4c 4f 43 a8			.byte $06,$41,$4c,$4c,$4f,$43,$a8      ; $b3 alloc(
>482f	05 43 48 52 24 a8			.byte $05,$43,$48,$52,$24,$a8          ; $b4 chr$(
>4835	06 4c 45 46 54 24 a8			.byte $06,$4c,$45,$46,$54,$24,$a8      ; $b5 left$(
>483c	05 4d 49 44 24 a8			.byte $05,$4d,$49,$44,$24,$a8          ; $b6 mid$(
>4842	07 52 49 47 48 54 24 a8			.byte $07,$52,$49,$47,$48,$54,$24,$a8  ; $b7 right$(
>484a	05 53 54 52 24 a8			.byte $05,$53,$54,$52,$24,$a8          ; $b8 str$(
>4850	04 56 41 4c a8				.byte $04,$56,$41,$4c,$a8              ; $b9 val(
>4855	05 50 45 45 4b a8			.byte $05,$50,$45,$45,$4b,$a8          ; $ba peek(
>485b	05 44 45 45 4b a8			.byte $05,$44,$45,$45,$4b,$a8          ; $bb deek(
>4861	05 4c 45 45 4b a8			.byte $05,$4c,$45,$45,$4b,$a8          ; $bc leek(
>4867	04 41 53 43 a8				.byte $04,$41,$53,$43,$a8              ; $bd asc(
>486c	04 49 4e 54 a8				.byte $04,$49,$4e,$54,$a8              ; $be int(
>4871	06 46 4c 4f 41 54 a8			.byte $06,$46,$4c,$4f,$41,$54,$a8      ; $bf float(
>4878	06 49 53 56 41 4c a8			.byte $06,$49,$53,$56,$41,$4c,$a8      ; $c0 isval(
>487f	07 55 50 50 45 52 24 a8			.byte $07,$55,$50,$50,$45,$52,$24,$a8  ; $c1 upper$(
>4887	07 4c 4f 57 45 52 24 a8			.byte $07,$4c,$4f,$57,$45,$52,$24,$a8  ; $c2 lower$(
>488f	01 c0					.byte $01,$c0                          ; $c3 @
>4891	01 fe					.byte $01,$fe                          ; $c4 ~
>4893	01 a6					.byte $01,$a6                          ; $c5 &
>4895	05 47 45 54 24 a8			.byte $05,$47,$45,$54,$24,$a8          ; $c6 get$(
>489b	07 49 4e 4b 45 59 24 a8			.byte $07,$49,$4e,$4b,$45,$59,$24,$a8  ; $c7 inkey$(
>48a3	03 4d 45 cd				.byte $03,$4d,$45,$cd                  ; $c8 mem
>48a7	01 a9					.byte $01,$a9                          ; $c9 )
>48a9	01 ba					.byte $01,$ba                          ; $ca :
>48ab	01 ac					.byte $01,$ac                          ; $cb ,
>48ad	01 bb					.byte $01,$bb                          ; $cc ;
>48af	01 a7					.byte $01,$a7                          ; $cd '
>48b1	02 54 cf				.byte $02,$54,$cf                      ; $ce to
>48b4	04 53 54 45 d0				.byte $04,$53,$54,$45,$d0              ; $cf step
>48b9	04 50 52 4f c3				.byte $04,$50,$52,$4f,$c3              ; $d0 proc
>48be	05 4c 4f 43 41 cc			.byte $05,$4c,$4f,$43,$41,$cc          ; $d1 local
>48c4	03 44 49 cd				.byte $03,$44,$49,$cd                  ; $d2 dim
>48c8	03 52 45 cd				.byte $03,$52,$45,$cd                  ; $d3 rem
>48cc	03 4c 45 d4				.byte $03,$4c,$45,$d4                  ; $d4 let
>48d0	05 49 4e 50 55 d4			.byte $05,$49,$4e,$50,$55,$d4          ; $d5 input
>48d6	04 45 4c 53 c5				.byte $04,$45,$4c,$53,$c5              ; $d6 else
>48db	03 56 44 d5				.byte $03,$56,$44,$d5                  ; $d7 vdu
>48df	05 50 52 49 4e d4			.byte $05,$50,$52,$49,$4e,$d4          ; $d8 print
>48e5	04 44 41 54 c1				.byte $04,$44,$41,$54,$c1              ; $d9 data
>48ea	05 49 4d 41 47 c5			.byte $05,$49,$4d,$41,$47,$c5          ; $da image
>48f0	02 41 d4				.byte $02,$41,$d4                      ; $db at
>48f3	04 46 4c 49 d0				.byte $04,$46,$4c,$49,$d0              ; $dc flip
>48f8	06 41 53 53 45 52 d4			.byte $06,$41,$53,$53,$45,$52,$d4      ; $dd assert
>48ff	04 50 4f 4b c5				.byte $04,$50,$4f,$4b,$c5              ; $de poke
>4904	04 44 4f 4b c5				.byte $04,$44,$4f,$4b,$c5              ; $df doke
>4909	04 4c 4f 4b c5				.byte $04,$4c,$4f,$4b,$c5              ; $e0 loke
>490e	03 49 4e cb				.byte $03,$49,$4e,$cb                  ; $e1 ink
>4912	05 50 41 50 45 d2			.byte $05,$50,$41,$50,$45,$d2          ; $e2 paper
>4918	03 43 4c d3				.byte $03,$43,$4c,$d3                  ; $e3 cls
>491c	06 4c 4f 43 41 54 c5			.byte $06,$4c,$4f,$43,$41,$54,$c5      ; $e4 locate
>4923	01 ae					.byte $01,$ae                          ; $e5 .
>4925	04 46 52 4f cd				.byte $04,$46,$52,$4f,$cd              ; $e6 from
>492a	01 a3					.byte $01,$a3                          ; $e7 #
>492c	05 43 4c 45 41 d2			.byte $05,$43,$4c,$45,$41,$d2          ; $e8 clear
>4932	04 54 45 58 d4				.byte $04,$54,$45,$58,$d4              ; $e9 text
>4937	04 54 59 50 c5				.byte $04,$54,$59,$50,$c5              ; $ea type
>493c	00					.byte $00

;******  Return to file: tokeniser/tokentext.asm


;******  Processing file: tokeniser/../generated/tokentext1.inc

.493d					Group1Text:
>493d	04 4c 4f 41 c4				.byte $04,$4c,$4f,$41,$c4              ; $86 load
>4942	04 53 41 56 c5				.byte $04,$53,$41,$56,$c5              ; $87 save
>4947	04 4c 49 53 d4				.byte $04,$4c,$49,$53,$d4              ; $88 list
>494c	03 4e 45 d7				.byte $03,$4e,$45,$d7                  ; $89 new
>4950	05 42 52 45 41 cb			.byte $05,$42,$52,$45,$41,$cb          ; $8a break
>4956	03 52 55 ce				.byte $03,$52,$55,$ce                  ; $8b run
>495a	04 52 45 41 c4				.byte $04,$52,$45,$41,$c4              ; $8c read
>495f	07 52 45 53 54 4f 52 c5			.byte $07,$52,$45,$53,$54,$4f,$52,$c5  ; $8d restore
>4967	03 45 4e c4				.byte $03,$45,$4e,$c4                  ; $8e end
>496b	04 53 54 4f d0				.byte $04,$53,$54,$4f,$d0              ; $8f stop
>4970	04 58 45 4d d5				.byte $04,$58,$45,$4d,$d5              ; $90 xemu
>4975	04 47 4f 54 cf				.byte $04,$47,$4f,$54,$cf              ; $91 goto
>497a	05 47 4f 53 55 c2			.byte $05,$47,$4f,$53,$55,$c2          ; $92 gosub
>4980	06 52 45 54 55 52 ce			.byte $06,$52,$45,$54,$55,$52,$ce      ; $93 return
>4987	03 4f 52 c1				.byte $03,$4f,$52,$c1                  ; $94 ora
>498b	05 28 41 4e 44 a9			.byte $05,$28,$41,$4e,$44,$a9          ; $95 (and)
>4991	03 45 4f d2				.byte $03,$45,$4f,$d2                  ; $96 eor
>4995	03 41 44 c3				.byte $03,$41,$44,$c3                  ; $97 adc
>4999	03 53 54 c1				.byte $03,$53,$54,$c1                  ; $98 sta
>499d	03 4c 44 c1				.byte $03,$4c,$44,$c1                  ; $99 lda
>49a1	03 43 4d d0				.byte $03,$43,$4d,$d0                  ; $9a cmp
>49a5	03 53 42 c3				.byte $03,$53,$42,$c3                  ; $9b sbc
>49a9	03 41 53 cc				.byte $03,$41,$53,$cc                  ; $9c asl
>49ad	03 52 4f cc				.byte $03,$52,$4f,$cc                  ; $9d rol
>49b1	03 4c 53 d2				.byte $03,$4c,$53,$d2                  ; $9e lsr
>49b5	03 52 4f d2				.byte $03,$52,$4f,$d2                  ; $9f ror
>49b9	03 53 54 d8				.byte $03,$53,$54,$d8                  ; $a0 stx
>49bd	03 4c 44 d8				.byte $03,$4c,$44,$d8                  ; $a1 ldx
>49c1	03 44 45 c3				.byte $03,$44,$45,$c3                  ; $a2 dec
>49c5	03 49 4e c3				.byte $03,$49,$4e,$c3                  ; $a3 inc
>49c9	03 53 54 da				.byte $03,$53,$54,$da                  ; $a4 stz
>49cd	03 42 49 d4				.byte $03,$42,$49,$d4                  ; $a5 bit
>49d1	03 53 54 d9				.byte $03,$53,$54,$d9                  ; $a6 sty
>49d5	03 4c 44 d9				.byte $03,$4c,$44,$d9                  ; $a7 ldy
>49d9	03 43 50 d9				.byte $03,$43,$50,$d9                  ; $a8 cpy
>49dd	03 43 50 d8				.byte $03,$43,$50,$d8                  ; $a9 cpx
>49e1	03 54 53 c2				.byte $03,$54,$53,$c2                  ; $aa tsb
>49e5	03 54 52 c2				.byte $03,$54,$52,$c2                  ; $ab trb
>49e9	03 4a 53 d2				.byte $03,$4a,$53,$d2                  ; $ac jsr
>49ed	03 4a 4d d0				.byte $03,$4a,$4d,$d0                  ; $ad jmp
>49f1	03 42 50 cc				.byte $03,$42,$50,$cc                  ; $ae bpl
>49f5	03 42 4d c9				.byte $03,$42,$4d,$c9                  ; $af bmi
>49f9	03 42 56 c3				.byte $03,$42,$56,$c3                  ; $b0 bvc
>49fd	03 42 56 d3				.byte $03,$42,$56,$d3                  ; $b1 bvs
>4a01	03 42 43 c3				.byte $03,$42,$43,$c3                  ; $b2 bcc
>4a05	03 42 43 d3				.byte $03,$42,$43,$d3                  ; $b3 bcs
>4a09	03 42 4e c5				.byte $03,$42,$4e,$c5                  ; $b4 bne
>4a0d	03 42 45 d1				.byte $03,$42,$45,$d1                  ; $b5 beq
>4a11	03 42 52 c1				.byte $03,$42,$52,$c1                  ; $b6 bra
>4a15	03 42 52 cb				.byte $03,$42,$52,$cb                  ; $b7 brk
>4a19	03 50 48 d0				.byte $03,$50,$48,$d0                  ; $b8 php
>4a1d	03 43 4c c3				.byte $03,$43,$4c,$c3                  ; $b9 clc
>4a21	03 50 4c d0				.byte $03,$50,$4c,$d0                  ; $ba plp
>4a25	03 53 45 c3				.byte $03,$53,$45,$c3                  ; $bb sec
>4a29	03 52 54 c9				.byte $03,$52,$54,$c9                  ; $bc rti
>4a2d	03 50 48 c1				.byte $03,$50,$48,$c1                  ; $bd pha
>4a31	03 43 4c c9				.byte $03,$43,$4c,$c9                  ; $be cli
>4a35	03 50 48 d9				.byte $03,$50,$48,$d9                  ; $bf phy
>4a39	03 52 54 d3				.byte $03,$52,$54,$d3                  ; $c0 rts
>4a3d	03 50 4c c1				.byte $03,$50,$4c,$c1                  ; $c1 pla
>4a41	03 53 45 c9				.byte $03,$53,$45,$c9                  ; $c2 sei
>4a45	03 50 4c d9				.byte $03,$50,$4c,$d9                  ; $c3 ply
>4a49	03 44 45 d9				.byte $03,$44,$45,$d9                  ; $c4 dey
>4a4d	03 54 58 c1				.byte $03,$54,$58,$c1                  ; $c5 txa
>4a51	03 54 59 c1				.byte $03,$54,$59,$c1                  ; $c6 tya
>4a55	03 54 58 d3				.byte $03,$54,$58,$d3                  ; $c7 txs
>4a59	03 54 41 d9				.byte $03,$54,$41,$d9                  ; $c8 tay
>4a5d	03 54 41 d8				.byte $03,$54,$41,$d8                  ; $c9 tax
>4a61	03 43 4c d6				.byte $03,$43,$4c,$d6                  ; $ca clv
>4a65	03 54 53 d8				.byte $03,$54,$53,$d8                  ; $cb tsx
>4a69	03 49 4e d9				.byte $03,$49,$4e,$d9                  ; $cc iny
>4a6d	03 44 45 d8				.byte $03,$44,$45,$d8                  ; $cd dex
>4a71	03 43 4c c4				.byte $03,$43,$4c,$c4                  ; $ce cld
>4a75	03 50 48 d8				.byte $03,$50,$48,$d8                  ; $cf phx
>4a79	03 49 4e d8				.byte $03,$49,$4e,$d8                  ; $d0 inx
>4a7d	03 4e 4f d0				.byte $03,$4e,$4f,$d0                  ; $d1 nop
>4a81	03 53 45 c4				.byte $03,$53,$45,$c4                  ; $d2 sed
>4a85	03 50 4c d8				.byte $03,$50,$4c,$d8                  ; $d3 plx
>4a89	00					.byte $00

;******  Return to file: tokeniser/tokentext.asm


;******  Processing file: tokeniser/../generated/tokentext2.inc

.4a8a					Group2Text:
>4a8a	05 56 50 4f 4b c5			.byte $05,$56,$50,$4f,$4b,$c5          ; $86 vpoke
>4a90	05 56 44 4f 4b c5			.byte $05,$56,$44,$4f,$4b,$c5          ; $87 vdoke
>4a96	05 56 4c 4f 41 c4			.byte $05,$56,$4c,$4f,$41,$c4          ; $88 vload
>4a9c	04 4d 4f 44 c5				.byte $04,$4d,$4f,$44,$c5              ; $89 mode
>4aa1	07 50 41 4c 45 54 54 c5			.byte $07,$50,$41,$4c,$45,$54,$54,$c5  ; $8a palette
>4aa9	06 53 50 52 49 54 c5			.byte $06,$53,$50,$52,$49,$54,$c5      ; $8b sprite
>4ab0	03 43 4c c7				.byte $03,$43,$4c,$c7                  ; $8c clg
>4ab4	04 52 45 43 d4				.byte $04,$52,$45,$43,$d4              ; $8d rect
>4ab9	05 46 52 41 4d c5			.byte $05,$46,$52,$41,$4d,$c5          ; $8e frame
>4abf	04 44 52 41 d7				.byte $04,$44,$52,$41,$d7              ; $8f draw
>4ac4	04 50 4c 4f d4				.byte $04,$50,$4c,$4f,$d4              ; $90 plot
>4ac9	04 4c 49 4e c5				.byte $04,$4c,$49,$4e,$c5              ; $91 line
>4ace	05 50 41 49 4e d4			.byte $05,$50,$41,$49,$4e,$d4          ; $92 paint
>4ad4	05 53 4f 55 4e c4			.byte $05,$53,$4f,$55,$4e,$c4          ; $93 sound
>4ada	00					.byte $00

;******  Return to file: tokeniser/tokentext.asm


;******  Processing file: tokeniser/../generated/tokentext3.inc

.4adb					Group3Text:
>4adb	06 56 50 45 45 4b a8			.byte $06,$56,$50,$45,$45,$4b,$a8      ; $86 vpeek(
>4ae2	06 56 44 45 45 4b a8			.byte $06,$56,$44,$45,$45,$4b,$a8      ; $87 vdeek(
>4ae9	09 53 50 52 49 54 45 2e			.byte $09,$53,$50,$52,$49,$54,$45,$2e,$58,$a8 ; $88 sprite.x(
>4af1	58 a8
>4af3	09 53 50 52 49 54 45 2e			.byte $09,$53,$50,$52,$49,$54,$45,$2e,$59,$a8 ; $89 sprite.y(
>4afb	59 a8
>4afd	04 48 49 54 a8				.byte $04,$48,$49,$54,$a8              ; $8a hit(
>4b02	06 4a 4f 59 2e 58 a8			.byte $06,$4a,$4f,$59,$2e,$58,$a8      ; $8b joy.x(
>4b09	06 4a 4f 59 2e 59 a8			.byte $06,$4a,$4f,$59,$2e,$59,$a8      ; $8c joy.y(
>4b10	06 4a 4f 59 2e 42 a8			.byte $06,$4a,$4f,$59,$2e,$42,$a8      ; $8d joy.b(
>4b17	06 43 4c 4f 43 4b a8			.byte $06,$43,$4c,$4f,$43,$4b,$a8      ; $8e clock(
>4b1e	08 50 4c 41 59 49 4e 47			.byte $08,$50,$4c,$41,$59,$49,$4e,$47,$a8 ; $8f playing(
>4b26	a8
>4b27	00					.byte $00

;******  Return to file: tokeniser/tokentext.asm


;******  Return to file: tokeniser/tokeniser.asm

.4b28					tokeniserHandler:
.4b28	7c 2b 4b	jmp ($4b2b,x)			jmp 	(tokeniserVectors,x)
.4b2b					tokeniserVectors:
>4b2b	37 4b					.word _DummyControlHandler ; index 0
>4b2d	c2 42					.word Detokenise           ; index 2
>4b2f	b6 42					.word ListLine             ; index 4
>4b31	38 45					.word TokTest              ; index 6
>4b33	58 45					.word Tokenise             ; index 8
>4b35	5b 45					.word TokeniseASCIIZ       ; index 10
.4b37					_DummyControlHandler:
.4b37	60		rts			rts

;******  Return to file: basic.asm

.4b38					section_end_tokeniser:
.4b38					section_start_variable:

;******  Processing file: variable/variable.asm


;******  Processing file: variable/array/access.asm

.4b38					AccessArray:
.4b38	da		phx				phx
.4b39	e8		inx				inx
.4b3a	20 fe 4b	jsr $4bfe			jsr 	GetArrayDimensions 			; get the array dimensions one up from here.
.4b3d	fa		plx				plx
.4b3e	b5 98		lda $98,x			lda 	esInt0,x 					; restore address to follow in temp0.
.4b40	85 2a		sta $2a				sta 	temp0
.4b42	b5 a0		lda $a0,x			lda 	esInt1,x
.4b44	85 2b		sta $2b				sta 	temp0+1
.4b46	da		phx				phx
.4b47	5a		phy				phy
.4b48					_AAFollow:
.4b48	a0 00		ldy #$00			ldy 	#0
.4b4a	b1 2a		lda ($2a),y			lda 	(temp0),y
.4b4c	48		pha				pha
.4b4d	c8		iny				iny
.4b4e	b1 2a		lda ($2a),y			lda 	(temp0),y
.4b50	85 2b		sta $2b				sta 	temp0+1
.4b52	68		pla				pla
.4b53	85 2a		sta $2a				sta 	temp0
.4b55	e8		inx				inx 								; advance to next stack slot.
.4b56	a0 00		ldy #$00			ldy 	#0
.4b58	b1 2a		lda ($2a),y			lda 	(temp0),y 					; compare max index vs required index
.4b5a	d5 98		cmp $98,x			cmp 	esInt0,x
.4b5c	c8		iny				iny
.4b5d	b1 2a		lda ($2a),y			lda 	(temp0),y 					; drop bit 7 of the size, indicates follow.
.4b5f	85 2c		sta $2c				sta 	temp1 						; save the size in temp1 for later use.
.4b61	29 7f		and #$7f			and 	#$7F
.4b63	f5 a0		sbc $a0,x			sbc 	esInt1,x
.4b65	90 4e		bcc $4bb5			bcc 	_AABadIndex 				; failed on index if max index < required.
.4b67	18		clc				clc
.4b68	a5 2a		lda $2a				lda 	temp0
.4b6a	69 02		adc #$02			adc 	#2
.4b6c	85 2a		sta $2a				sta 	temp0
.4b6e	90 02		bcc $4b72			bcc 	_AANoCarry
.4b70	e6 2b		inc $2b				inc 	temp0+1
.4b72					_AANoCarry:
.4b72	b5 98		lda $98,x			lda 	esInt0,x
.4b74	85 2e		sta $2e				sta 	temp2
.4b76	b5 a0		lda $a0,x			lda 	esInt1,x
.4b78	85 2f		sta $2f				sta 	temp2+1
.4b7a	ac dd 0e	ldy $0edd			ldy 	varType
.4b7d	b9 58 4c	lda $4c58,y			lda 	CAActualSize-$3A,y
.4b80	b4 91		ldy $91,x			ldy 	esType+1,x 					; is it top level
.4b82	30 02		bmi $4b86			bmi 	_AANotPointer
.4b84	a9 02		lda #$02			lda 	#2 							; array of pointers is 2.
.4b86					_AANotPointer:
.4b86	20 02 4d	jsr $4d02			jsr 	MultiplyTemp2ByA 			; multiply the index by the data size, in temp2.
.4b89	18		clc				clc
.4b8a	a5 2a		lda $2a				lda 	temp0
.4b8c	65 2e		adc $2e				adc 	temp2
.4b8e	85 2a		sta $2a				sta 	temp0
.4b90	a5 2b		lda $2b				lda 	temp0+1
.4b92	65 2f		adc $2f				adc 	temp2+1
.4b94	85 2b		sta $2b				sta 	temp0+1
.4b96	b5 91		lda $91,x			lda 	esType+1,x
.4b98	30 07		bmi $4ba1			bmi 	_AAUsedAllIndices
.4b9a	a5 2c		lda $2c				lda 	temp1 						; check if this is a pointer array e.g. there are subarrays
.4b9c	10 12		bpl $4bb0			bpl 	_AABadDepth 				; no, too many indexes.
.4b9e	4c 48 4b	jmp $4b48			jmp 	_AAFollow 					; otherwise follow them.
.4ba1					_AAUsedAllIndices:
.4ba1	a5 2c		lda $2c				lda 	temp1 						; get original high length byte.
.4ba3	30 0b		bmi $4bb0			bmi 	_AABadDepth 				; if -ve then this is an array of pointers.
.4ba5	7a		ply				ply
.4ba6	fa		plx				plx
.4ba7	a5 2a		lda $2a				lda 	temp0 						; copy address of array element to stack,x
.4ba9	95 98		sta $98,x			sta 	esInt0,x
.4bab	a5 2b		lda $2b				lda 	temp0+1
.4bad	95 a0		sta $a0,x			sta 	esInt1,x
.4baf	60		rts				rts
.4bb0					_AABadDepth:
.4bb0	a2 1c		ldx #$1c			ldx 	#ErrorID_ArrayDepth
.4bb2	20 27 15	jsr $1527		jsr	errorHandler
.4bb5					_AABadIndex:
.4bb5	a2 1b		ldx #$1b			ldx 	#ErrorID_ArrayIndex
.4bb7	20 27 15	jsr $1527		jsr	errorHandler

;******  Return to file: variable/variable.asm


;******  Processing file: variable/array/create.asm

.0edb					elementSize:
>0edb							.fill	 1
.4bba					CreateArray:
.4bba	20 8f 4d	jsr $4d8f			jsr 	AccessSetup 				; set up the basic stuff, hashtables and so on.
.4bbd	ad dd 0e	lda $0edd			lda 	varType 					; is the variable type an array
.4bc0	4a		lsr a				lsr 	a
.4bc1	90 36		bcc $4bf9			bcc 	CANotArray 					; no, cause an error.
.4bc3	20 91 4e	jsr $4e91			jsr 	FindVariable 				; does the variable exist already
.4bc6	b0 2c		bcs $4bf4			bcs 	CAFound 					; if so, error cannot redefine it.
.4bc8	20 ca 4d	jsr $4dca			jsr 	CreateVariable 				; create the variable entry.
.4bcb	a5 2a		lda $2a				lda 	temp0 						; push address of new variable entry on the stack
.4bcd	48		pha				pha
.4bce	a5 2b		lda $2b				lda 	temp0+1
.4bd0	48		pha				pha
.4bd1	a2 00		ldx #$00			ldx 	#0
.4bd3	20 fe 4b	jsr $4bfe			jsr 	GetArrayDimensions 			; get the array dimensions
.4bd6	a2 00		ldx #$00			ldx 	#0 							; create at level $00
.4bd8	20 2e 4c	jsr $4c2e			jsr 	CreateArrayLevel 			; level to YA
.4bdb	aa		tax				tax 								; level now in YX
.4bdc	68		pla				pla 								; get address back to temp0 to write.
.4bdd	85 2b		sta $2b				sta 	temp0+1
.4bdf	68		pla				pla
.4be0	85 2a		sta $2a				sta 	temp0
.4be2	98		tya				tya 								; write YX there (address in original record)
.4be3	a0 06		ldy #$06			ldy 	#6
.4be5	91 2a		sta ($2a),y			sta 	(temp0),y
.4be7	88		dey				dey
.4be8	8a		txa				txa
.4be9	91 2a		sta ($2a),y			sta 	(temp0),y
.4beb	ac de 0e	ldy $0ede			ldy 	varEnd 						; restore Y and exit.
.4bee	60		rts				rts
.4bef					CASize:
.4bef	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.4bf1	20 27 15	jsr $1527		jsr	errorHandler
.4bf4					CAFound:
.4bf4	a2 19		ldx #$19			ldx 	#ErrorID_DupArray
.4bf6	20 27 15	jsr $1527		jsr	errorHandler
.4bf9					CANotArray:
.4bf9	a2 1a		ldx #$1a			ldx 	#ErrorID_NotArray
.4bfb	20 27 15	jsr $1527		jsr	errorHandler
.4bfe					GetArrayDimensions:
.4bfe	ad dd 0e	lda $0edd			lda 	varType 					; push variable type on the stack.
.4c01	48		pha				pha
.4c02	ac de 0e	ldy $0ede			ldy 	varEnd
.4c05					_CAGetDimensions:
.4c05	8a		txa				txa 								; get the next level
.4c06	a2 0a		ldx #$0a		ldx	#10
.4c08	20 f5 3f	jsr $3ff5		jsr	mainHandler
.4c0b	aa		tax				tax
.4c0c	b5 a0		lda $a0,x			lda 	esInt1,x 					; index must be < 8192
.4c0e	29 e0		and #$e0			and 	#$E0
.4c10	15 a8		ora $a8,x			ora 	esInt2,x
.4c12	15 b0		ora $b0,x			ora 	esInt3,x
.4c14	d0 d9		bne $4bef			bne 	CASize
.4c16	e8		inx				inx 								; next level.
.4c17	b1 28		lda ($28),y			lda 	(codePtr),y 				; get/consume following character
.4c19	c8		iny				iny
.4c1a	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; loop back if more dimensions
.4c1c	f0 e7		beq $4c05			beq 	_CAGetDimensions
.4c1e	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN 				; right bracket ?
.4c20	d0 cd		bne $4bef			bne 	CASize
.4c22	a9 ff		lda #$ff			lda 	#$FF 						; set the type past the end to $FF so we know how many
.4c24	95 90		sta $90,x			sta 	esType,x 					; dimensions there are, it marks the end.
.4c26	68		pla				pla 								; restore the variable type ($3A-$3F)
.4c27	8d dd 0e	sta $0edd			sta 	varType
.4c2a	8c de 0e	sty $0ede			sty 	varEnd 						; save exit Y value, after dimensions
.4c2d	60		rts				rts
.4c2e					CreateArrayLevel:
.4c2e	ac dd 0e	ldy $0edd			ldy 	varType
.4c31	b9 58 4c	lda $4c58,y			lda 	CAActualSize-$3A,y 			; $3A is the first type marker.
.4c34	8d db 0e	sta $0edb			sta 	elementSize 				; get element size this level.
.4c37	b4 91		ldy $91,x			ldy 	esType+1,x 					; is it top level
.4c39	30 05		bmi $4c40			bmi 	_CANotPointer 				; then its values, keep elementsize
.4c3b	a9 02		lda #$02			lda 	#2 							; use array of pointers, each element is 2.
.4c3d	8d db 0e	sta $0edb			sta 	elementSize
.4c40					_CANotPointer:
.4c40	a5 35		lda $35				lda 	lowMemory 					; start creating at temp0, saving start on stack.
.4c42	85 2a		sta $2a				sta 	temp0
.4c44	48		pha				pha
.4c45	a5 36		lda $36				lda 	lowMemory+1
.4c47	85 2b		sta $2b				sta 	temp0+1
.4c49	48		pha				pha
.4c4a	20 cb 4c	jsr $4ccb			jsr 	AllocateArraySpace 			; allocate space for all array stuff at this level.
.4c4d	a0 00		ldy #$00			ldy 	#0
.4c4f	b5 98		lda $98,x			lda 	esInt0,x
.4c51	91 2a		sta ($2a),y			sta 	(temp0),y
.4c53	c8		iny				iny
.4c54	b5 a0		lda $a0,x			lda 	esInt1,x
.4c56	91 2a		sta ($2a),y			sta 	(temp0),y
.4c58	b5 91		lda $91,x			lda 	esType+1,x 					; do we have another level ?
.4c5a	30 06		bmi $4c62			bmi 	_CALNotLast
.4c5c	b1 2a		lda ($2a),y			lda 	(temp0),y 					; set bit 7, indicates an array of pointers to other levels.
.4c5e	09 80		ora #$80			ora 	#$80
.4c60	91 2a		sta ($2a),y			sta 	(temp0),y
.4c62					_CALNotLast:
.4c62	a9 02		lda #$02			lda 	#2
.4c64	20 88 4c	jsr $4c88			jsr 	_CALAddTemp0
.4c67	b5 98		lda $98,x			lda 	esInt0,x 					; copy stack:01 to stack:23 so we can use it to
.4c69	95 a8		sta $a8,x			sta 	esInt2,x 					; count.
.4c6b	b5 a0		lda $a0,x			lda 	esInt1,x
.4c6d	95 b0		sta $b0,x			sta 	esInt3,x
.4c6f					_CALClear:
.4c6f	20 98 4c	jsr $4c98			jsr 	EraseOneElement
.4c72	ad db 0e	lda $0edb			lda 	elementSize 				; move to next element
.4c75	20 88 4c	jsr $4c88			jsr 	_CALAddTemp0
.4c78	b5 a8		lda $a8,x			lda 	esInt2,x 					; decrement counter
.4c7a	d0 02		bne $4c7e			bne 	_CALNoBorrow
.4c7c	d6 b0		dec $b0,x			dec 	esInt3,x
.4c7e					_CALNoBorrow:
.4c7e	d6 a8		dec $a8,x			dec 	esInt2,x
.4c80	b5 b0		lda $b0,x			lda 	esInt3,x 					; loop back if >= 0 - we need +1 because indices
.4c82	10 eb		bpl $4c6f			bpl 	_CALClear 					; start at 0 e.g. x(10) is actually 11 array entries.
.4c84	68		pla				pla 								; restore the start of this into YA.
.4c85	a8		tay				tay
.4c86	68		pla				pla
.4c87	60		rts				rts
.4c88					_CALAddTemp0:
.4c88	18		clc				clc
.4c89	65 2a		adc $2a				adc 	temp0
.4c8b	85 2a		sta $2a				sta 	temp0
.4c8d	90 02		bcc $4c91			bcc 	_CALANoCarry
.4c8f	e6 2b		inc $2b				inc 	temp0+1
.4c91					_CALANoCarry:
.4c91	60		rts				rts
.4c92					CAActualSize:
>4c92	04 04						.byte 	VarISize,VarISize
>4c94	02 02						.byte 	VarSSize,VarSSize
>4c96	06 06						.byte 	VarFSize,VarFSize
.4c98					EraseOneElement:
.4c98	b5 91		lda $91,x			lda 	esType+1,x 					; is this a list of sub arrays
.4c9a	10 09		bpl $4ca5			bpl 	_EOESubArray
.4c9c	a0 00		ldy #$00			ldy 	#0 							; write the empty variable value out.
.4c9e	ad dd 0e	lda $0edd			lda 	varType
.4ca1	20 33 4e	jsr $4e33			jsr 	ZeroTemp0Y
.4ca4	60		rts				rts
.4ca5					_EOESubArray:
.4ca5	a5 2a		lda $2a				lda 	temp0 						; save temp0, these are effectively locals.
.4ca7	48		pha				pha
.4ca8	a5 2b		lda $2b				lda 	temp0+1
.4caa	48		pha				pha
.4cab	ad db 0e	lda $0edb			lda 	elementSize 				; save element size
.4cae	48		pha				pha
.4caf	e8		inx				inx 								; create at next level
.4cb0	20 2e 4c	jsr $4c2e			jsr 	CreateArrayLevel
.4cb3	ca		dex				dex
.4cb4	85 32		sta $32				sta 	tempShort 					; save A
.4cb6	68		pla				pla  								; restore element size.
.4cb7	8d db 0e	sta $0edb			sta 	elementSize
.4cba	68		pla				pla 								; restore temp0, which is where this new array level goes.
.4cbb	85 2b		sta $2b				sta 	temp0+1
.4cbd	68		pla				pla
.4cbe	85 2a		sta $2a				sta 	temp0
.4cc0	98		tya				tya 								; store Y/A there
.4cc1	a0 01		ldy #$01			ldy 	#1
.4cc3	91 2a		sta ($2a),y			sta 	(temp0),y
.4cc5	a5 32		lda $32				lda 	tempShort
.4cc7	88		dey				dey
.4cc8	91 2a		sta ($2a),y			sta 	(temp0),y
.4cca	60		rts				rts
.4ccb					AllocateArraySpace:
.4ccb	18		clc				clc 								; element count + 1 => temp2.
.4ccc	b5 98		lda $98,x			lda 	esInt0,x
.4cce	69 01		adc #$01			adc 	#1
.4cd0	85 2e		sta $2e				sta 	temp2
.4cd2	b5 a0		lda $a0,x			lda 	esInt1,x
.4cd4	69 00		adc #$00			adc 	#0
.4cd6	85 2f		sta $2f				sta 	temp2+1
.4cd8	ad db 0e	lda $0edb			lda 	elementSize 				; bytes per element
.4cdb	20 02 4d	jsr $4d02			jsr 	MultiplyTemp2ByA 			; temp2 = (count + 1) x bytes per element.
.4cde	18		clc				clc 								; add 2 for 'max element' byte.
.4cdf	a5 2e		lda $2e				lda 	temp2
.4ce1	69 02		adc #$02			adc 	#2
.4ce3	85 2e		sta $2e				sta 	temp2
.4ce5	90 02		bcc $4ce9			bcc 	_AASNoCarry
.4ce7	e6 2f		inc $2f				inc 	temp2+1
.4ce9					_AASNoCarry:
.4ce9	18		clc				clc 								; add to low memory, allocating space.
.4cea	a5 35		lda $35				lda 	lowMemory
.4cec	65 2e		adc $2e				adc 	temp2
.4cee	85 35		sta $35				sta 	lowMemory
.4cf0	a5 36		lda $36				lda 	lowMemory+1
.4cf2	65 2f		adc $2f				adc 	temp2+1
.4cf4	85 36		sta $36				sta 	lowMemory+1
.4cf6	b0 05		bcs $4cfd			bcs 	_AASFail 					; out of memory as adding causes wrapround
.4cf8	c5 34		cmp $34				cmp 	highMemory+1 				; >= high memory pointer.
.4cfa	b0 01		bcs $4cfd			bcs 	_AASFail
.4cfc	60		rts				rts
.4cfd					_AASFail:
.4cfd	a2 22		ldx #$22			ldx 	#ErrorID_Memory
.4cff	20 27 15	jsr $1527		jsr	errorHandler
.4d02					MultiplyTemp2ByA:
.4d02	48		pha				pha
.4d03	a5 2e		lda $2e				lda 	temp2 						; copy temp2 to temp3.
.4d05	85 30		sta $30				sta 	temp3
.4d07	a5 2f		lda $2f				lda 	temp2+1
.4d09	85 31		sta $31				sta 	temp3+1
.4d0b	68		pla				pla
.4d0c	06 2e		asl $2e				asl 	temp2 						; double it.
.4d0e	26 2f		rol $2f				rol 	temp2+1
.4d10	c9 02		cmp #$02			cmp 	#2 							; if x 2 then exit.
.4d12	f0 15		beq $4d29			beq 	_MTBAExit
.4d14	c9 06		cmp #$06			cmp 	#6 							; if x 6 then add temp3 to temp2
.4d16	d0 0d		bne $4d25			bne 	_MTBANotFloat
.4d18	18		clc				clc 								; so this will make it x 3
.4d19	a5 2e		lda $2e				lda 	temp2
.4d1b	65 30		adc $30				adc 	temp3
.4d1d	85 2e		sta $2e				sta 	temp2
.4d1f	a5 2f		lda $2f				lda 	temp2+1
.4d21	65 31		adc $31				adc 	temp3+1
.4d23	85 2f		sta $2f				sta 	temp2+1
.4d25					_MTBANotFloat:
.4d25	06 2e		asl $2e				asl 	temp2 						; double it.
.4d27	26 2f		rol $2f				rol 	temp2+1
.4d29					_MTBAExit:
.4d29	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/variable/access.asm

.0edc					varHash:
>0edc							.fill	1
.0edd					varType:
>0edd							.fill 	1
.0ede					varEnd:
>0ede							.fill 	1
.003b					hashList:
>003b							.fill 	2
.4d2a					AccessVariable:
.4d2a	aa		tax				tax 								; stack in X
.4d2b	c8		iny				iny									; look at second character
.4d2c	b1 28		lda ($28),y			lda 	(codePtr),y
.4d2e	88		dey				dey
.4d2f	c9 3a		cmp #$3a			cmp 	#TYPE_INT 					; is it the integer marker ($3A)
.4d31	d0 15		bne $4d48			bne 	_AVLong 					; no, always use the hash tables.
.4d33	b1 28		lda ($28),y			lda 	(codePtr),y 				; this is the 6 bit ASCII of A-Z 1-26
.4d35	38		sec				sec 	 							; make it 0-25
.4d36	e9 01		sbc #$01			sbc 	#1
.4d38	0a		asl a				asl 	a 							; x 4 as 4 bytes / variable.
.4d39	0a		asl a				asl 	a
.4d3a	95 98		sta $98,x			sta 	esInt0,x
.4d3c	a9 0a		lda #$0a			lda 	#SingleLetterVar >> 8 		; make it an address
.4d3e	95 a0		sta $a0,x			sta 	esInt1,x
.4d40	a9 80		lda #$80			lda 	#$80 						; type is an integer reference.
.4d42	95 90		sta $90,x			sta 	esType,x
.4d44	c8		iny				iny 								; skip over the variable reference in the code.
.4d45	c8		iny				iny  								; (1 letter, 1 type)
.4d46	8a		txa				txa 								; stack in A to return.
.4d47	60		rts				rts
.4d48					_AVLong:
.4d48	da		phx				phx
.4d49	20 8f 4d	jsr $4d8f			jsr 	AccessSetup 				; set up the basic information we need for later
.4d4c	20 91 4e	jsr $4e91			jsr 	FindVariable 				; does the variable exist already ?
.4d4f	b0 0e		bcs $4d5f			bcs 	_AVFound 					; yes, then its found
.4d51	ad dd 0e	lda $0edd			lda 	varType 					; otherwise, is the variable type an array
.4d54	4a		lsr a				lsr 	a
.4d55	90 05		bcc $4d5c			bcc 	_AVCanCreate 				; if not, we can autocreate
.4d57	a2 15		ldx #$15			ldx 	#ErrorID_noauto
.4d59	20 27 15	jsr $1527		jsr	errorHandler
.4d5c					_AVCanCreate:
.4d5c	20 ca 4d	jsr $4dca			jsr 	CreateVariable 				; variable does not exist, create it.
.4d5f					_AVFound:
.4d5f	fa		plx				plx
.4d60	18		clc				clc 								; copy temp0 (variable record address)
.4d61	a5 2a		lda $2a				lda 	temp0 						; +5 (to point to the data)
.4d63	69 05		adc #$05			adc 	#5 							; (first 5 bytes are link, name, hash)
.4d65	95 98		sta $98,x			sta 	esInt0,x
.4d67	a5 2b		lda $2b				lda 	temp0+1
.4d69	69 00		adc #$00			adc 	#0
.4d6b	95 a0		sta $a0,x			sta 	esInt1,x
.4d6d	a9 00		lda #$00			lda 	#0
.4d6f	95 a8		sta $a8,x			sta 	esInt2,x
.4d71	95 b0		sta $b0,x			sta 	esInt3,x
.4d73	ac dd 0e	ldy $0edd			ldy 	varType 					; get the type ID from the type.
.4d76	b9 4f 4d	lda $4d4f,y			lda 	_AVTypeTable-$3A,y 			; e.g. a reference to int/float/string.
.4d79	95 90		sta $90,x			sta 	esType,x
.4d7b	ac de 0e	ldy $0ede			ldy 	varEnd 						; restore Y
.4d7e	ad dd 0e	lda $0edd			lda 	VarType 					; get variable type, put LSB into C
.4d81	4a		lsr a				lsr 	a
.4d82	90 03		bcc $4d87			bcc 	_AVNotArray 				; if carry set,it is an array variable.
.4d84	20 38 4b	jsr $4b38			jsr 	AccessArray 				; array lookup. if LSB was set.
.4d87					_AVNotArray:
.4d87	8a		txa				txa 								; return stack in A and return
.4d88	60		rts				rts
.4d89					_AVTypeTable:
>4d89	80 80						.byte 	$80,$80						; integer
>4d8b	c0 c0						.byte 	$C0,$C0 					; string
>4d8d	81 81						.byte 	$81,$81 					; float
.4d8f					AccessSetup:
.4d8f	a9 00		lda #$00			lda 	#0 							; zero the hash byte.
.4d91	8d dc 0e	sta $0edc			sta 	varHash
.4d94	5a		phy				phy
.4d95	b1 28		lda ($28),y	_ASLoop:lda 	(codePtr),y					; get next identifier character
.4d97	c9 3a		cmp #$3a			cmp 	#$3A 						; is it 3A-3F which end all identifiers ?
.4d99	b0 0b		bcs $4da6			bcs 	_ASComplete
.4d9b	18		clc				clc 								; add to the hash. Might improve this.
.4d9c	6d dc 0e	adc $0edc			adc 	varHash
.4d9f	8d dc 0e	sta $0edc			sta 	varHash
.4da2	c8		iny				iny 								; next character
.4da3	4c 95 4d	jmp $4d95			jmp 	_ASLoop
.4da6					_ASComplete:
.4da6	8d dd 0e	sta $0edd			sta 	varType 					; save variable type byte
.4da9	c8		iny				iny
.4daa	8c de 0e	sty $0ede			sty 	varEnd 						; save the ending position.
.4dad	38		sec				sec 								; convert type byte from $3A-$3F to 0..5
.4dae	e9 3a		sbc #$3a			sbc 	#$3A
.4db0	0a		asl a				asl 	a 							; multiply by hashTableSize (8 in this case)
.4db1	0a		asl a				asl 	a
.4db2	0a		asl a				asl 	a
.4db3	0a		asl a				asl 	a 							; 2 bytes/word
.4db4	85 2a		sta $2a				sta 	temp0 						; this is the offset to the start of the table.
.4db6	ad dc 0e	lda $0edc			lda 	varHash 					; get hash
.4db9	29 07		and #$07			and 	#(hashTableSize-1)			; force into range (for 8,0..7)
.4dbb	0a		asl a				asl  	a 							; x 2 (for word) and clear carry
.4dbc	65 2a		adc $2a				adc 	temp0 						; now offset from the start of the hash table.
.4dbe	69 68		adc #$68			adc 	#hashTables & $FF 			; add to hash table base address
.4dc0	85 3b		sta $3b				sta 	hashList 					; making hashLists point to the head of the link list.
.4dc2	a9 0a		lda #$0a			lda 	#hashTables >> 8
.4dc4	69 00		adc #$00			adc 	#0
.4dc6	85 3c		sta $3c				sta 	hashList+1
.4dc8	7a		ply				ply
.4dc9	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/variable/create.asm

.4dca					CreateVariable:
.4dca	98		tya				tya 								; push Y on the stack twice.
.4dcb	48		pha				pha									; position in code of the new variable.
.4dcc	48		pha				pha
.4dcd	ae dd 0e	ldx $0edd			ldx 	varType 					; get var type 0-5 from the var type
.4dd0	bd f3 4d	lda $4df3,x			lda		_CVSize-$3A,x 				; the bytes required for this new variable.
.4dd3	48		pha				pha 								; save length
.4dd4	a5 35		lda $35				lda 	lowMemory 					; set low Memory ptr to temp0
.4dd6	85 2a		sta $2a				sta 	temp0 						; (address of the new variable)
.4dd8	a5 36		lda $36				lda 	lowMemory+1
.4dda	85 2b		sta $2b				sta 	temp0+1
.4ddc	68		pla				pla 								; get length
.4ddd	18		clc				clc 								; add to low memory.
.4dde	65 35		adc $35				adc 	lowMemory
.4de0	85 35		sta $35				sta 	lowMemory
.4de2	90 08		bcc $4dec			bcc 	_CVNoCarry
.4de4	e6 36		inc $36				inc 	lowMemory+1
.4de6	a5 36		lda $36				lda 	lowMemory+1 				; check out of memory.
.4de8	c5 34		cmp $34				cmp 	highMemory+1
.4dea	b0 3c		bcs $4e28			bcs 	_CVMemory
.4dec					_CVNoCarry:
.4dec	ad dc 0e	lda $0edc			lda 	varHash 					; store hash at offset 4.
.4def	a0 04		ldy #$04			ldy 	#4
.4df1	91 2a		sta ($2a),y			sta 	(temp0),y
.4df3	68		pla				pla 								; offset, work out where the variable name is.
.4df4	18		clc				clc
.4df5	65 28		adc $28				adc 	codePtr
.4df7	a0 02		ldy #$02			ldy 	#2 							; copy that into slots 2 + 3.
.4df9	91 2a		sta ($2a),y			sta 	(temp0),y
.4dfb	a5 29		lda $29				lda 	codePtr+1
.4dfd	69 00		adc #$00			adc 	#0
.4dff	c8		iny				iny
.4e00	91 2a		sta ($2a),y			sta 	(temp0),y
.4e02	cd c9 0a	cmp $0ac9			cmp 	basePage+1 					; compare against the program base.
.4e05	b0 03		bcs $4e0a			bcs 	_CVNotImmediate
.4e07	20 67 4e	jsr $4e67			jsr 	CloneVariableName 			; we need to clone the variable name (immediate mode)
.4e0a					_CVNotImmediate:
.4e0a	a0 00		ldy #$00			ldy 	#0 							; copy current hash pointer in link
.4e0c	b1 3b		lda ($3b),y			lda 	(hashList),y 				; so we're inserting it in the front of a linked list
.4e0e	91 2a		sta ($2a),y			sta 	(temp0),y
.4e10	c8		iny				iny
.4e11	b1 3b		lda ($3b),y			lda 	(hashList),y
.4e13	91 2a		sta ($2a),y			sta 	(temp0),y
.4e15	a5 2b		lda $2b				lda 	temp0+1 					; set new link
.4e17	91 3b		sta ($3b),y			sta 	(hashList),y
.4e19	88		dey				dey
.4e1a	a5 2a		lda $2a				lda 	temp0
.4e1c	91 3b		sta ($3b),y			sta 	(hashList),y
.4e1e	ad dd 0e	lda $0edd			lda 	varType 					; type in A
.4e21	a0 05		ldy #$05			ldy 	#5 							; offset in Y
.4e23	20 33 4e	jsr $4e33			jsr 	ZeroTemp0Y 					; zero (temp0),y with whatever type.
.4e26	7a		ply				ply
.4e27	60		rts				rts
.4e28					_CVMemory:
.4e28	a2 22		ldx #$22			ldx 	#ErrorID_Memory
.4e2a	20 27 15	jsr $1527		jsr	errorHandler
>4e2d	09 07				_CVSize:.byte 	VarHSize+VarISize,VarHSize+VarASize 					; <storage for integer>
>4e2f	07 07						.byte 	VarHSize+VarSSize,VarHSize+VarASize 					; <storage for string>
>4e31	0b 07						.byte 	VarHSize+VarFSize,VarHSize+VarASize 					; <storage for float>
.4e33					ZeroTemp0Y:
.4e33	4a		lsr a				lsr 	a 							; bit 0 in carry
.4e34	0a		asl a				asl 	a
.4e35	b0 17		bcs $4e4e			bcs 	_ZTExit 					; we don't initialise arrays.
.4e37	c9 3c		cmp #$3c			cmp 	#$3C 						; check string
.4e39	f0 14		beq $4e4f			beq 	_ZTWriteNullString 			; write "" string
.4e3b	c9 3e		cmp #$3e			cmp 	#$3E 						; check float
.4e3d	f0 20		beq $4e5f			beq 	_ZTWriteFloat
.4e3f	5a		phy				phy
.4e40	a9 00		lda #$00			lda 	#0
.4e42	91 2a		sta ($2a),y			sta 	(temp0),y
.4e44	c8		iny				iny
.4e45	91 2a		sta ($2a),y			sta 	(temp0),y
.4e47	c8		iny				iny
.4e48	91 2a		sta ($2a),y			sta 	(temp0),y
.4e4a	c8		iny				iny
.4e4b	91 2a		sta ($2a),y			sta 	(temp0),y
.4e4d	7a		ply				ply
.4e4e					_ZTExit:
.4e4e	60		rts				rts
.4e4f					_ZTWriteNullString:
.4e4f	a9 00		lda #$00			lda 	#0 							; put a reference to null string as the default value.
.4e51	8d ce 0a	sta $0ace			sta 	NullString
.4e54	a9 ce		lda #$ce			lda 	#NullString & $FF
.4e56	91 2a		sta ($2a),y			sta 	(temp0),y
.4e58	a9 0a		lda #$0a			lda 	#NullString >> 8
.4e5a	c8		iny				iny
.4e5b	91 2a		sta ($2a),y			sta 	(temp0),y
.4e5d	88		dey				dey
.4e5e	60		rts				rts
.4e5f					_ZTWriteFloat:
.4e5f	da		phx				phx
.4e60	a2 20		ldx #$20		ldx	#32
.4e62	20 aa 27	jsr $27aa		jsr	floatingpointHandler
.4e65	fa		plx				plx
.4e66	60		rts				rts
.4e67					CloneVariableName:
.4e67	a0 02		ldy #$02			ldy 	#2 							; copy vname address to temp2
.4e69	b1 2a		lda ($2a),y			lda 	(temp0),y
.4e6b	85 2e		sta $2e				sta 	temp2
.4e6d	c8		iny				iny
.4e6e	b1 2a		lda ($2a),y			lda 	(temp0),y
.4e70	85 2f		sta $2f				sta 	temp2+1
.4e72	a5 36		lda $36				lda 	lowMemory+1 				; copy lowMemory address to (temp0),2/3
.4e74	91 2a		sta ($2a),y			sta 	(temp0),y
.4e76	88		dey				dey
.4e77	a5 35		lda $35				lda 	lowMemory
.4e79	91 2a		sta ($2a),y			sta 	(temp0),y
.4e7b	a0 00		ldy #$00			ldy 	#0 							; copy data from (temp2) to (lowMemory)
.4e7d					_CVNCopy:
.4e7d	b1 2e		lda ($2e),y			lda		(temp2),y
.4e7f	91 35		sta ($35),y			sta 	(lowMemory),y
.4e81	c8		iny				iny
.4e82	c9 3a		cmp #$3a			cmp 	#$3A 						; until the whole name has been copied.
.4e84	90 f7		bcc $4e7d			bcc 	_CVNCopy
.4e86	98		tya				tya 								; add Y to low memory
.4e87	18		clc				clc
.4e88	65 35		adc $35				adc 	lowMemory
.4e8a	85 35		sta $35				sta 	lowMemory
.4e8c	90 02		bcc $4e90			bcc 	_CVNNoCarry
.4e8e	e6 36		inc $36				inc 	lowMemory+1
.4e90					_CVNNoCarry:
.4e90	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/variable/find.asm

.4e91					FindVariable:
.4e91	5a		phy				phy
.4e92	98		tya				tya 								; point temp2 to the actual name
.4e93	18		clc				clc 								; in memory of the variable being created
.4e94	65 28		adc $28				adc 	codePtr
.4e96	85 2e		sta $2e				sta 	temp2
.4e98	a5 29		lda $29				lda 	codePtr+1
.4e9a	69 00		adc #$00			adc 	#0
.4e9c	85 2f		sta $2f				sta 	temp2+1
.4e9e	a0 00		ldy #$00			ldy 	#0
.4ea0	a5 3b		lda $3b				lda 	hashList 					; copy hashlist to temp0
.4ea2	85 2a		sta $2a				sta 	temp0
.4ea4	a5 3c		lda $3c				lda 	hashList+1
.4ea6	85 2b		sta $2b				sta 	temp0+1
.4ea8	a0 01		ldy #$01	_FVNext:ldy 	#1 							; get MSB
.4eaa	b1 2a		lda ($2a),y			lda 	(temp0),y
.4eac	f0 2b		beq $4ed9			beq 	_FVFail
.4eae	aa		tax				tax
.4eaf	88		dey				dey		 							; get LSB
.4eb0	b1 2a		lda ($2a),y			lda 	(temp0),y
.4eb2	85 2a		sta $2a				sta 	temp0 						; update pointer.
.4eb4	86 2b		stx $2b				stx 	temp0+1
.4eb6	a0 04		ldy #$04			ldy 	#4 							; check hashes match
.4eb8	b1 2a		lda ($2a),y			lda 	(temp0),y
.4eba	cd dc 0e	cmp $0edc			cmp 	varHash
.4ebd	d0 e9		bne $4ea8			bne 	_FVNext 					; if not, no point in checking the name.
.4ebf	88		dey				dey 								; copy name pointer (+2,+3) to temp1.
.4ec0	b1 2a		lda ($2a),y			lda 	(temp0),y
.4ec2	85 2d		sta $2d				sta 	temp1+1
.4ec4	88		dey				dey
.4ec5	b1 2a		lda ($2a),y			lda 	(temp0),y
.4ec7	85 2c		sta $2c				sta 	temp1
.4ec9	a0 00		ldy #$00			ldy 	#0
.4ecb					_FVCheck:
.4ecb	b1 2c		lda ($2c),y			lda 	(temp1),y 					; compare names
.4ecd	d1 2e		cmp ($2e),y			cmp 	(temp2),y
.4ecf	d0 d7		bne $4ea8			bne 	_FVNext		 				; fail if different.
.4ed1	c8		iny				iny
.4ed2	c9 3a		cmp #$3a			cmp 	#$3A 						; until reached the end marker.
.4ed4	90 f5		bcc $4ecb			bcc 	_FVCheck
.4ed6	7a		ply				ply
.4ed7	38		sec				sec
.4ed8	60		rts				rts
.4ed9					_FVFail:
.4ed9	7a		ply				ply
.4eda	18		clc				clc
.4edb	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/variable/reset.asm

.4edc					HashTableReset:
.4edc	a2 60		ldx #$60			ldx 	#6*2*hashTableSize			; 6 types, 2 bytes per table entry.
.4ede	a9 00		lda #$00			lda 	#0
.4ee0					_HTRClear:
.4ee0	9d 67 0a	sta $0a67,x			sta 	hashTables-1,x
.4ee3	ca		dex				dex
.4ee4	d0 fa		bne $4ee0			bne 	_HTRClear
.4ee6	60		rts				rts

;******  Return to file: variable/variable.asm

.4ee7					variableHandler:
.4ee7	7c ea 4e	jmp ($4eea,x)			jmp 	(variableVectors,x)
.4eea					variableVectors:
>4eea	f2 4e					.word _DummyControlHandler ; index 0
>4eec	2a 4d					.word AccessVariable       ; index 2
>4eee	ba 4b					.word CreateArray          ; index 4
>4ef0	dc 4e					.word HashTableReset       ; index 6
.4ef2					_DummyControlHandler:
.4ef2	60		rts			rts

;******  Return to file: basic.asm

.4ef3					section_end_variable:
.4ef3					section_start_footer:

;******  Processing file: footer/footer.asm


;******  Processing file: footer/99end.asm

.003d					endZeroPage:
.0edf					endStorage:
>4ef3							.align 	256
.4f00					programMemory:
>4eff	ff						.byte 	$FF

;******  Return to file: footer/footer.asm


;******  Return to file: basic.asm

.4f00					section_end_footer:

;******  End of listing
