
; 64tass Turbo Assembler Macro V1.55.2200 listing file
; 64tass -D autorun=1 -D coldstartnew=0 -Walias -Wmacro-prefix -Wall -q -c -L ../source/bin/basic.lst -l ../source/bin/basic.lbl -Wall -o ../source/bin/stub.prg basic.asm
; Wed Mar 31 17:26:20 2021

;Offset	;Hex		;Monitor	;Source

;******  Command line definitions

=1					autorun=1
=0					coldstartnew=0

;******  Processing input file: basic.asm


;******  Processing file: header/01common.inc


;******  Processing file: header/../generated/installed.inc

=1					installed_header = 1
=1					installed_main = 1
=1					installed_variable = 1
=1					installed_assembler = 1
=1					installed_error = 1
=1					installed_extension = 1
=1					installed_string = 1
=1					installed_device = 1
=0					installed_floatingpoint = 0
=1					installed_interaction = 1
=1					installed_tokeniser = 1
=1					installed_footer = 1

;******  Return to file: header/01common.inc

=$1000					CodeStart = $1000
=$800					MemoryStorage = $800
=$9f00					EndOfMemory = $9F00
=$28					ZeroPageStorage = $28
=$90					StackAddress = $90
=8					StackSize = 8
=2					retStackSizePages = 2
=8					hashTableSize = 8			; if this changes, the calculation is AccessSetup has to match it.
="G"					markerGOSUB = 'G'
="R"					markerREPEAT = 'R'
="F"					markerFOR = 'F'
="W"					markerWHILE = 'W'
="P"					markerPROC = 'P'
="$"					markerSTRING = '$'
="#"					markerFLOAT = '#'
="%"					markerINT = '%'
=5					VarHSize = 5 								; header (2 link, 2 name, 1 hash)
=2					VarASize = 2 								; array [address of first level]
=4					VarISize = 4 								; integer (32 bit)
=6					VarFSize = 6 								; float (4 mantissa, 1 exponent 1 sign/zero)
=2					VarSSize = 2 								; address (2 bytes)

;******  Return to file: basic.asm


;******  Processing file: header/02macros.inc


;******  Return to file: basic.asm


;******  Processing file: header/03data.inc

>0028					codePtr:.fill 	2							; (codePtr),y points to code.
>002a					temp0: 	.fill 	2							; working variables.
>002c					temp1: 	.fill 	2
>002e					temp2: 	.fill 	2
>0030					temp3: 	.fill 	2
.0032					tempshort:
>0032							.fill 	1
.0033					highMemory:
>0033							.fill 	2
.0035					lowMemory:
>0035							.fill 	2
>0800							.align	256
.0800					returnStack:
>0800							.fill 	retStackSizePages * 256
=512					retStackSize = retStackSizePages * 256
.0a00					SingleLetterVar:
>0a00					 		.fill 	26*4
.0a68					currentStorage:
>0090					esType:	.fill 	StackSize  					; type byte (see above)
>0098					esInt0:	.fill 	StackSize 					; integer or mantissa
>00a0					esInt1:	.fill 	StackSize
>00a8					esInt2:	.fill 	StackSize
>00b0					esInt3:	.fill 	StackSize
>00b8					esExp:	.fill 	StackSize 					; exponent ($80 = 0)
>00c0					esZSign:.fill 	StackSize 					; for floating point - sign (bit 7) isZero (bit 6)
.00c8					endOfStack:
=$98					esMant0 = esInt0 							; synonyms.
=$a0					esMant1 = esInt1
=$a8					esMant2 = esInt2
=$b0					esMant3 = esInt3
.0a68					hashTables:
>0a68							.fill 	6*2*hashTableSize
.0ac8					basePage:
>0ac8							.fill 	2
.0aca					endProgram:
>0aca							.fill 	2
.0acc					endMemory:
>0acc							.fill 	2
.0ace					NullString:
>0ace							.fill 	1							; don't waste memory concreting null strings.
.0acf					convertBuffer:
>0acf							.fill 	35

;******  Processing file: header/../generated/tokenconst.inc

=$80					TOK_EOL=$80
=$81					TOK_SHIFT1=$81
=$82					TOK_SHIFT2=$82
=$83					TOK_SHIFT3=$83
=$84					TOK_FPC=$84
=$85					TOK_STR=$85
=$86					TOK_BINARYST=$86
=$99					TOK_STRUCTST=$99
=$a4					TOK_UNARYST=$a4
=$c9					TOK_TOKENS=$c9
=$86					TKW_AND                      = $86 ; and
=$87					TKW_OR                       = $87 ; or
=$88					TKW_XOR                      = $88 ; xor
=$89					TKW_GREATEREQUAL             = $89 ; >=
=$8a					TKW_LESSEQUAL                = $8a ; <=
=$8b					TKW_GREATER                  = $8b ; >
=$8c					TKW_LESS                     = $8c ; <
=$8d					TKW_EQUAL                    = $8d ; =
=$8e					TKW_LESSGREATER              = $8e ; <>
=$8f					TKW_PLUS                     = $8f ; +
=$90					TKW_MINUS                    = $90 ; -
=$91					TKW_GREATERGREATER           = $91 ; >>
=$92					TKW_LESSLESS                 = $92 ; <<
=$93					TKW_STAR                     = $93 ; *
=$94					TKW_SLASH                    = $94 ; /
=$95					TKW_MOD                      = $95 ; mod
=$96					TKW_HAT                      = $96 ; ^
=$97					TKW_PLING                    = $97 ; !
=$98					TKW_QMARK                    = $98 ; ?
=$99					TKW_REPEAT                   = $99 ; repeat
=$9a					TKW_WHILE                    = $9a ; while
=$9b					TKW_FOR                      = $9b ; for
=$9c					TKW_IF                       = $9c ; if
=$9d					TKW_DEFPROC                  = $9d ; defproc
=$9e					TKW_UNTIL                    = $9e ; until
=$9f					TKW_WEND                     = $9f ; wend
=$a0					TKW_NEXT                     = $a0 ; next
=$a1					TKW_THEN                     = $a1 ; then
=$a2					TKW_ENDIF                    = $a2 ; endif
=$a3					TKW_ENDPROC                  = $a3 ; endproc
=$a4					TKW_LPAREN                   = $a4 ; (
=$a5					TKW_LENLPAREN                = $a5 ; len(
=$a6					TKW_SGNLPAREN                = $a6 ; sgn(
=$a7					TKW_ABSLPAREN                = $a7 ; abs(
=$a8					TKW_RANDOMLPAREN             = $a8 ; random(
=$a9					TKW_PAGE                     = $a9 ; page
=$aa					TKW_TRUE                     = $aa ; true
=$ab					TKW_FALSE                    = $ab ; false
=$ac					TKW_MINLPAREN                = $ac ; min(
=$ad					TKW_MAXLPAREN                = $ad ; max(
=$ae					TKW_SYSLPAREN                = $ae ; sys(
=$af					TKW_TIMERLPAREN              = $af ; timer(
=$b0					TKW_EVENTLPAREN              = $b0 ; event(
=$b1					TKW_GETLPAREN                = $b1 ; get(
=$b2					TKW_INKEYLPAREN              = $b2 ; inkey(
=$b3					TKW_ALLOCLPAREN              = $b3 ; alloc(
=$b4					TKW_CHRDOLLARLPAREN          = $b4 ; chr$(
=$b5					TKW_LEFTDOLLARLPAREN         = $b5 ; left$(
=$b6					TKW_MIDDOLLARLPAREN          = $b6 ; mid$(
=$b7					TKW_RIGHTDOLLARLPAREN        = $b7 ; right$(
=$b8					TKW_STRDOLLARLPAREN          = $b8 ; str$(
=$b9					TKW_VALLPAREN                = $b9 ; val(
=$ba					TKW_PEEKLPAREN               = $ba ; peek(
=$bb					TKW_DEEKLPAREN               = $bb ; deek(
=$bc					TKW_LEEKLPAREN               = $bc ; leek(
=$bd					TKW_ASCLPAREN                = $bd ; asc(
=$be					TKW_INTLPAREN                = $be ; int(
=$bf					TKW_FLOATLPAREN              = $bf ; float(
=$c0					TKW_ISVALLPAREN              = $c0 ; isval(
=$c1					TKW_UPPERDOLLARLPAREN        = $c1 ; upper$(
=$c2					TKW_LOWERDOLLARLPAREN        = $c2 ; lower$(
=$c3					TKW_ATC                      = $c3 ; @
=$c4					TKW_WAVY                     = $c4 ; ~
=$c5					TKW_AMP                      = $c5 ; &
=$c6					TKW_GETDOLLARLPAREN          = $c6 ; get$(
=$c7					TKW_INKEYDOLLARLPAREN        = $c7 ; inkey$(
=$c8					TKW_MEM                      = $c8 ; mem
=$c9					TKW_RPAREN                   = $c9 ; )
=$ca					TKW_COLON                    = $ca ; :
=$cb					TKW_COMMA                    = $cb ; ,
=$cc					TKW_SEMICOLON                = $cc ; ;
=$cd					TKW_QUOTE                    = $cd ; '
=$ce					TKW_TO                       = $ce ; to
=$cf					TKW_STEP                     = $cf ; step
=$d0					TKW_PROC                     = $d0 ; proc
=$d1					TKW_LOCAL                    = $d1 ; local
=$d2					TKW_DIM                      = $d2 ; dim
=$d3					TKW_REM                      = $d3 ; rem
=$d4					TKW_LET                      = $d4 ; let
=$d5					TKW_INPUT                    = $d5 ; input
=$d6					TKW_ELSE                     = $d6 ; else
=$d7					TKW_VDU                      = $d7 ; vdu
=$d8					TKW_PRINT                    = $d8 ; print
=$d9					TKW_DATA                     = $d9 ; data
=$da					TKW_IMAGE                    = $da ; image
=$db					TKW_AT                       = $db ; at
=$dc					TKW_FLIP                     = $dc ; flip
=$dd					TKW_ASSERT                   = $dd ; assert
=$de					TKW_POKE                     = $de ; poke
=$df					TKW_DOKE                     = $df ; doke
=$e0					TKW_LOKE                     = $e0 ; loke
=$e1					TKW_INK                      = $e1 ; ink
=$e2					TKW_PAPER                    = $e2 ; paper
=$e3					TKW_CLS                      = $e3 ; cls
=$e4					TKW_LOCATE                   = $e4 ; locate
=$e5					TKW_PERIOD                   = $e5 ; .
=$e6					TKW_HASH                     = $e6 ; #
=$e7					TKW_CLEAR                    = $e7 ; clear
=$86					TKW_LOAD                     = $86 ; load
=$87					TKW_SAVE                     = $87 ; save
=$88					TKW_LIST                     = $88 ; list
=$89					TKW_NEW                      = $89 ; new
=$8a					TKW_BREAK                    = $8a ; break
=$8b					TKW_RUN                      = $8b ; run
=$8c					TKW_READ                     = $8c ; read
=$8d					TKW_RESTORE                  = $8d ; restore
=$8e					TKW_END                      = $8e ; end
=$8f					TKW_STOP                     = $8f ; stop
=$90					TKW_XEMU                     = $90 ; xemu
=$91					TKW_GOTO                     = $91 ; goto
=$92					TKW_GOSUB                    = $92 ; gosub
=$93					TKW_RETURN                   = $93 ; return
=$94					TKW_ORA                      = $94 ; ora
=$95					TKW_LPARENANDRPAREN          = $95 ; (and)
=$96					TKW_EOR                      = $96 ; eor
=$97					TKW_ADC                      = $97 ; adc
=$98					TKW_STA                      = $98 ; sta
=$99					TKW_LDA                      = $99 ; lda
=$9a					TKW_CMP                      = $9a ; cmp
=$9b					TKW_SBC                      = $9b ; sbc
=$9c					TKW_ASL                      = $9c ; asl
=$9d					TKW_ROL                      = $9d ; rol
=$9e					TKW_LSR                      = $9e ; lsr
=$9f					TKW_ROR                      = $9f ; ror
=$a0					TKW_STX                      = $a0 ; stx
=$a1					TKW_LDX                      = $a1 ; ldx
=$a2					TKW_DEC                      = $a2 ; dec
=$a3					TKW_INC                      = $a3 ; inc
=$a4					TKW_STZ                      = $a4 ; stz
=$a5					TKW_BIT                      = $a5 ; bit
=$a6					TKW_STY                      = $a6 ; sty
=$a7					TKW_LDY                      = $a7 ; ldy
=$a8					TKW_CPY                      = $a8 ; cpy
=$a9					TKW_CPX                      = $a9 ; cpx
=$aa					TKW_TSB                      = $aa ; tsb
=$ab					TKW_TRB                      = $ab ; trb
=$ac					TKW_JSR                      = $ac ; jsr
=$ad					TKW_JMP                      = $ad ; jmp
=$ae					TKW_BPL                      = $ae ; bpl
=$af					TKW_BMI                      = $af ; bmi
=$b0					TKW_BVC                      = $b0 ; bvc
=$b1					TKW_BVS                      = $b1 ; bvs
=$b2					TKW_BCC                      = $b2 ; bcc
=$b3					TKW_BCS                      = $b3 ; bcs
=$b4					TKW_BNE                      = $b4 ; bne
=$b5					TKW_BEQ                      = $b5 ; beq
=$b6					TKW_BRA                      = $b6 ; bra
=$b7					TKW_BRK                      = $b7 ; brk
=$b8					TKW_PHP                      = $b8 ; php
=$b9					TKW_CLC                      = $b9 ; clc
=$ba					TKW_PLP                      = $ba ; plp
=$bb					TKW_SEC                      = $bb ; sec
=$bc					TKW_RTI                      = $bc ; rti
=$bd					TKW_PHA                      = $bd ; pha
=$be					TKW_CLI                      = $be ; cli
=$bf					TKW_PHY                      = $bf ; phy
=$c0					TKW_RTS                      = $c0 ; rts
=$c1					TKW_PLA                      = $c1 ; pla
=$c2					TKW_SEI                      = $c2 ; sei
=$c3					TKW_PLY                      = $c3 ; ply
=$c4					TKW_DEY                      = $c4 ; dey
=$c5					TKW_TXA                      = $c5 ; txa
=$c6					TKW_TYA                      = $c6 ; tya
=$c7					TKW_TXS                      = $c7 ; txs
=$c8					TKW_TAY                      = $c8 ; tay
=$c9					TKW_TAX                      = $c9 ; tax
=$ca					TKW_CLV                      = $ca ; clv
=$cb					TKW_TSX                      = $cb ; tsx
=$cc					TKW_INY                      = $cc ; iny
=$cd					TKW_DEX                      = $cd ; dex
=$ce					TKW_CLD                      = $ce ; cld
=$cf					TKW_PHX                      = $cf ; phx
=$d0					TKW_INX                      = $d0 ; inx
=$d1					TKW_NOP                      = $d1 ; nop
=$d2					TKW_SED                      = $d2 ; sed
=$d3					TKW_PLX                      = $d3 ; plx
=$86					TKW_VPOKE                    = $86 ; vpoke
=$87					TKW_VDOKE                    = $87 ; vdoke
=$88					TKW_VLOAD                    = $88 ; vload
=$89					TKW_MODE                     = $89 ; mode
=$8a					TKW_PALETTE                  = $8a ; palette
=$8b					TKW_SPRITE                   = $8b ; sprite
=$8c					TKW_CLG                      = $8c ; clg
=$86					TKW_VPEEKLPAREN              = $86 ; vpeek(
=$87					TKW_VDEEKLPAREN              = $87 ; vdeek(
=$88					TKW_SPRITEPERIODXLPAREN      = $88 ; sprite.x(
=$89					TKW_SPRITEPERIODYLPAREN      = $89 ; sprite.y(
=$8a					TKW_HITLPAREN                = $8a ; hit(
=$8b					TKW_JOYPERIODXLPAREN         = $8b ; joy.x(
=$8c					TKW_JOYPERIODYLPAREN         = $8c ; joy.y(
=$8d					TKW_JOYPERIODBLPAREN         = $8d ; joy.b(
=$8e					TKW_CLOCKLPAREN              = $8e ; clock(

;******  Return to file: header/03data.inc

=$3a					TYPE_INT =		($3A) 						; type bytes that end identifier.
=$3b					TYPE_INTARRAY =	($3B)
=$3c					TYPE_STR =		($3C)
=$3d					TYPE_STRARRAY =	($3D)
=$3e					TYPE_FLOAT =	($3E)
=$3f					TYPE_FLOATARRAY=($3F)

;******  Processing file: header/../generated/asmconst.inc

=$94					TKA_GROUP1 = $94
=$9c					TKA_GROUP2 = $9c
=$ae					TKA_GROUP3 = $ae
=$b7					TKA_GROUP4 = $b7
=$d4					TKA_END4 = $d4

;******  Return to file: header/03data.inc


;******  Return to file: basic.asm


;******  Processing file: header/header.inc


;******  Return to file: basic.asm


;******  Processing file: assembler/asmconst.inc

=0					AMD_IMM		= 0					; Immediate mode.
=1					AMD_ZERO 	= 1					; Zero Page
=2					AMD_ACCIMP	= 2					; Accumulator/Implied
=3					AMD_ABS 	= 3					; Absolute
=4					AMD_ZEROINDY= 4					; Zero Indirect,Y
=5					AMD_ZEROX 	= 5					; Zero Page,X
=6					AMD_ABSY 	= 6					; Absolute,Y
=7					AMD_ABSX 	= 7					; Absolute,X
=8					AMD_ZEROIND = 8					; Zero Indirect
=9					AMD_ZEROY 	= 9					; Zero Page,Y
=10					AMD_ABSIND 	= 10				; Absolute Indirect
=11					AMD_ABSINDX	= 11				; Absolute Indirect Indexed
=12					AMD_REL		= 12				; Relative
=13					AMD_ZEROINDX= 13 				; Zero Indirect,X

;******  Return to file: basic.asm


;******  Processing file: assembler/assembler.inc


;******  Return to file: basic.asm


;******  Processing file: device/device.inc


;******  Return to file: basic.asm


;******  Processing file: error/error.inc


;******  Return to file: basic.asm


;******  Processing file: error/errorhandler.inc


;******  Processing file: error/../generated/errorid.inc

=1					ErrorID_Missing = 1 ; Feature not Present
=2					ErrorID_Syntax = 2 ; Syntax Error
=3					ErrorID_NoModule = 3 ; Module disabled
=4					ErrorID_Assert = 4 ; Assertion failed
=5					ErrorID_DivZero = 5 ; Divide By Zero
=6					ErrorID_Stop = 6 ; Stop
=7					ErrorID_BadType = 7 ; Type Mismatch
=8					ErrorID_BadValue = 8 ; Illegal Value
=9					ErrorID_MissingRP = 9 ; Missing right bracket
=10					ErrorID_MissingComma = 10 ; Missing comma
=11					ErrorID_NoReference = 11 ; Missing reference
=12					ErrorID_LineNumber = 12 ; Line Number not found
=13					ErrorID_StrLen = 13 ; String too long
=14					ErrorID_ReturnErr = 14 ; RETURN without GOSUB
=15					ErrorID_UntilErr = 15 ; UNTIL without REPEAT
=16					ErrorID_NextErr = 16 ; NEXT without FOR
=17					ErrorID_WendErr = 17 ; WEND without WHILE
=18					ErrorID_endprocErr = 18 ; ENDPROC without PROC
=19					ErrorID_BadIndex = 19 ; Bad NEXT index
=20					ErrorID_Struct = 20 ; Structures nested wrong
=21					ErrorID_NoAuto = 21 ; Cannot create variable
=22					ErrorID_RetStack = 22 ; Return stack out of space
=23					ErrorID_NoProc = 23 ; Unknown Procedure
=24					ErrorID_Params = 24 ; Parameters do not match
=25					ErrorID_DupArray = 25 ; Array already defined
=26					ErrorID_NotArray = 26 ; DIM requires array
=27					ErrorID_ArrayIndex = 27 ; Bad array index
=28					ErrorID_ArrayDepth = 28 ; Wrong number of array indices
=29					ErrorID_DataError = 29 ; Out of data
=30					ErrorID_Tokenise = 30 ; Cannot tokenise line
=31					ErrorID_Save = 31 ; Save failed
=32					ErrorID_Load = 32 ; Load failed
=33					ErrorID_Break = 33 ; Break
=34					ErrorID_Memory = 34 ; Out of memory
=35					ErrorID_NumStack = 35 ; Expression too complex
=36					ErrorID_Assembler = 36 ; Bad Operand/Mode
=37					ErrorID_Branch = 37 ; Branch out of range
=38					ErrorID_Label = 38 ; Label changed value
=39					ErrorID_NoSprite = 39 ; No Sprite Selected
=40					ErrorID_Hardware = 40 ; Hardware

;******  Return to file: error/errorhandler.inc


;******  Return to file: basic.asm


;******  Processing file: extension/extension.inc


;******  Return to file: basic.asm


;******  Processing file: extension/option_x16/x16const.inc

=64					X16MaxImages = 64 							; max # of sprite images.

;******  Return to file: basic.asm


;******  Processing file: floatingpoint/float.inc

=5					FloatEmbeddedSize = 5

;******  Return to file: basic.asm


;******  Processing file: floatingpoint/floatingpoint.inc


;******  Return to file: basic.asm


;******  Processing file: interaction/interaction.inc


;******  Return to file: basic.asm


;******  Processing file: main/main.inc


;******  Return to file: basic.asm


;******  Processing file: string/functions/memory.inc

=252					MaxStringSize = 252

;******  Return to file: basic.asm


;******  Processing file: string/string.inc


;******  Return to file: basic.asm


;******  Processing file: tokeniser/detokenise/colouring.inc

=$84					LTYLineNumber = $84
=$82					LTYPunctuation = $82
=$87					LTYIdentifier = $87
=$86					LTYConstant = $86
=$83					LTYKeyword = $83
=$81					LTYString = $81

;******  Return to file: basic.asm


;******  Processing file: tokeniser/tokeniser.inc


;******  Return to file: basic.asm


;******  Processing file: variable/variable.inc


;******  Return to file: basic.asm


;******  Processing file: footer/footer.inc


;******  Return to file: basic.asm

.1000					section_start_header:

;******  Processing file: header/header.asm


;******  Processing file: header/00start.asm

.1000					Start:
.1000	4c 0a 10	jmp $100a			jmp 	GoColdStart 				; +0 	boot BASIC
.1003	4c 58 10	jmp $1058			jmp 	GoTokTest					; +3 	run tokeniser test code.
>1006	7a 40						.word 	TokenTableAddress
.1008							else
>1008	00 00						.word 	0
.100a					GoColdStart:
.100a	a9 00		lda #$00			lda 	#(programMemory) & $FF
.100c	8d c8 0a	sta $0ac8			sta 	basePage
.100f	a9 48		lda #$48			lda 	#(programMemory) >> 8
.1011	8d c9 0a	sta $0ac9			sta 	1+(basePage)
.1014	a9 00		lda #$00			lda 	#(endOfMemory) & $FF
.1016	8d cc 0a	sta $0acc			sta 	endMemory
.1019	a9 9f		lda #$9f			lda 	#(endOfMemory) >> 8
.101b	8d cd 0a	sta $0acd			sta 	1+(endMemory)
.101e	20 26 10	jsr $1026			jsr 	InitialiseAll 				; initialise everything.
.1021	a2 02		ldx #$02		ldx	#2
.1023	20 51 22	jsr $2251		jsr	interactionHandler

;******  Processing file: header/../generated/initialiseall.asm

.1026					InitialiseAll:
.1026	a9 00		lda #$00		lda #0
.1028	a2 00		ldx #$00		ldx	#0
.102a	20 b4 13	jsr $13b4		jsr	assemblerHandler
.102d	a9 00		lda #$00		lda #0
.102f	a2 00		ldx #$00		ldx	#0
.1031	20 f6 14	jsr $14f6		jsr	deviceHandler
.1034	a9 00		lda #$00		lda #0
.1036	a2 00		ldx #$00		ldx	#0
.1038	20 51 22	jsr $2251		jsr	interactionHandler
.103b	a9 00		lda #$00		lda #0
.103d	a2 00		ldx #$00		ldx	#0
.103f	20 eb 38	jsr $38eb		jsr	mainHandler
.1042	a9 00		lda #$00		lda #0
.1044	a2 00		ldx #$00		ldx	#0
.1046	20 a8 3b	jsr $3ba8		jsr	stringHandler
.1049	a9 00		lda #$00		lda #0
.104b	a2 00		ldx #$00		ldx	#0
.104d	20 07 44	jsr $4407		jsr	tokeniserHandler
.1050	a9 00		lda #$00		lda #0
.1052	a2 00		ldx #$00		ldx	#0
.1054	20 d8 47	jsr $47d8		jsr	variableHandler
.1057	60		rts			rts

;******  Return to file: header/00start.asm

.1058					GoTokTest:
.1058	a2 06		ldx #$06		ldx	#6
.105a	20 07 44	jsr $4407		jsr	tokeniserHandler

;******  Return to file: header/header.asm


;******  Return to file: basic.asm

.105d					section_end_header:
.105d					section_start_assembler:

;******  Processing file: assembler/assembler.asm


;******  Processing file: assembler/asmoperand.asm

.105d					AsmGetOperand:
.105d	a2 00		ldx #$00			ldx 	#0 							; clear the operand.
.105f	8a		txa				txa
.1060	95 98		sta $98,x			sta 	esInt0,x
.1062	95 a0		sta $a0,x			sta 	esInt1,x
.1064	95 a8		sta $a8,x			sta 	esInt2,x
.1066	95 b0		sta $b0,x			sta 	esInt3,x
.1068	b1 28		lda ($28),y			lda 	(codePtr),y 				; first into X
.106a	aa		tax				tax
.106b	a9 02		lda #$02			lda 	#AMD_ACCIMP
.106d	e0 80		cpx #$80			cpx 	#TOK_EOL 					; if end of line or colon, return implied mode.
.106f	f0 41		beq $10b2			beq 	_AGOExit
.1071	e0 ca		cpx #$ca			cpx 	#TKW_COLON
.1073	f0 3d		beq $10b2			beq 	_AGOExit
.1075	c8		iny				iny 								; consume the token
.1076	a9 00		lda #$00			lda 	#AMD_IMM
.1078	e0 e6		cpx #$e6			cpx 	#TKW_HASH 					; if a hash present, then immediate mode.
.107a	f0 2d		beq $10a9			beq		_AGOEvalExit 				; with an operand.
.107c	e0 a4		cpx #$a4			cpx 	#TKW_LPAREN 				; left bracket ?
.107e	f0 40		beq $10c0			beq 	_AGOIndirect
.1080	e0 01		cpx #$01			cpx 	#$01 						; is it "A" e.g. the variable A.
.1082	d0 0b		bne $108f			bne 	_AGOZeroPage1 				; if not it is zero zero,x zero,y, unpick 1 iny
.1084	b1 28		lda ($28),y			lda 	(codePtr),y 				; get the second character & consume it
.1086	c8		iny				iny
.1087	aa		tax				tax
.1088	a9 02		lda #$02			lda 	#AMD_ACCIMP 				; and return Acc/Implied if it is just A
.108a	e0 3a		cpx #$3a			cpx 	#$3A
.108c	f0 24		beq $10b2			beq 	_AGOExit
.108e	88		dey				dey 								; unpick 2 iny
.108f					_AGOZeroPage1:
.108f	88		dey				dey
.1090	a9 00		lda #$00			lda 	#0 							; get the address into esInt0/1
.1092	a2 0a		ldx #$0a		ldx	#10
.1094	20 eb 38	jsr $38eb		jsr	mainHandler
.1097	20 ef 10	jsr $10ef			jsr 	AsmGetIndexing
.109a	a9 01		lda #$01			lda 	#AMD_ZERO
.109c	90 14		bcc $10b2			bcc 	_AGOExit
.109e	a9 05		lda #$05			lda 	#AMD_ZEROX
.10a0	e0 00		cpx #$00			cpx 	#0
.10a2	f0 0e		beq $10b2			beq 	_AGOExit
.10a4	a9 09		lda #$09			lda 	#AMD_ZEROY
.10a6	4c b2 10	jmp $10b2			jmp 	_AGOExit
.10a9					_AGOEvalExit:
.10a9	48		pha				pha
.10aa	a9 00		lda #$00			lda 	#0 							; evaluate operand in root.
.10ac	a2 0a		ldx #$0a		ldx	#10
.10ae	20 eb 38	jsr $38eb		jsr	mainHandler
.10b1	68		pla				pla
.10b2					_AGOExit:
.10b2	48		pha				pha 								; save the mode
.10b3	a5 a8		lda $a8				lda 	esInt2 						; check the operand is zero.
.10b5	05 b0		ora $b0				ora 	esInt3
.10b7	d0 02		bne $10bb			bne 	_AGOValue
.10b9	68		pla				pla
.10ba	60		rts				rts
.10bb					_AGOValue:
.10bb	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.10bd	20 18 15	jsr $1518		jsr	errorHandler
.10c0					_AGOIndirect:
.10c0	a9 00		lda #$00			lda 	#0 							; evaluate operand in root.
.10c2	a2 0a		ldx #$0a		ldx	#10
.10c4	20 eb 38	jsr $38eb		jsr	mainHandler
.10c7	b1 28		lda ($28),y			lda 	(codePtr),y 				; does ) follow ? if so might be ) or ),Y
.10c9	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.10cb	f0 11		beq $10de			beq 	_AGOIndIndY
.10cd	20 ef 10	jsr $10ef			jsr 	ASMGetIndexing 				; must be ,X)
.10d0	90 39		bcc $110b			bcc 	AGISyntax
.10d2	e0 00		cpx #$00			cpx 	#0
.10d4	d0 35		bne $110b			bne 	AGISyntax
.10d6	a2 04		ldx #$04		ldx	#4
.10d8	20 eb 38	jsr $38eb		jsr	mainHandler
.10db	a9 0d		lda #$0d			lda 	#AMD_ZEROINDX
.10dd	60		rts				rts
.10de					_AGOIndIndY:
.10de	c8		iny				iny
.10df	20 ef 10	jsr $10ef			jsr 	ASMGetIndexing 				; get indexing if any
.10e2	a9 08		lda #$08			lda 	#AMD_ZEROIND
.10e4	90 cc		bcc $10b2			bcc 	_AGOExit 					; none then exit
.10e6	e0 00		cpx #$00			cpx 	#0 							; must be ,Y
.10e8	f0 21		beq $110b			beq 	AGISyntax
.10ea	a9 04		lda #$04			lda 	#AMD_ZEROINDY
.10ec	4c b2 10	jmp $10b2			jmp 	_AGOExit
.10ef					AsmGetIndexing:
.10ef	b1 28		lda ($28),y			lda 	(codePtr),y 				; check for comma
.10f1	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.10f3	18		clc				clc
.10f4	d0 14		bne $110a			bne 	_AGIExit 					; no comma, return with CC
.10f6	c8		iny				iny 								; get what SHOULD be X or Y
.10f7	b1 28		lda ($28),y			lda 	(codePtr),y  				; read it
.10f9	38		sec				sec 								; subtract 6 bit ASCII of X
.10fa	e9 18		sbc #$18			sbc 	#"X" & $3F
.10fc	c9 02		cmp #$02			cmp 	#2 							; if unsigned >= 2 then error
.10fe	b0 0b		bcs $110b			bcs 	AGISyntax
.1100	aa		tax				tax 								; put in index
.1101	c8		iny				iny 								; get what follows that, should be the $3A marker
.1102	b1 28		lda ($28),y			lda 	(codePtr),y
.1104	c8		iny				iny
.1105	c9 3a		cmp #$3a			cmp 	#$3A
.1107	d0 02		bne $110b			bne 	AGISyntax
.1109	38		sec				sec 								; return CS and index mode in X
.110a					_AGIExit:
.110a	60		rts				rts
.110b					AGISyntax:
.110b	a2 02		ldx #$02			ldx 	#ErrorID_syntax
.110d	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: assembler/assembler.asm


;******  Processing file: assembler/asmwrite.asm

.0af2					finalOpcode:
>0af2							.fill 	1
.1110					AsmWriteInstruction:
.1110	8d f2 0a	sta $0af2			sta 	finalOpcode					; save opcode.
.1113	98		tya				tya
.1114	48		pha				pha
.1115	ad 38 0a	lda $0a38			lda 	SingleLetterVar+("O"-"A")*4	; check O
.1118	29 02		and #$02			and 	#2
.111a	f0 2d		beq $1149			beq 	_ASMWNoEcho 				; if zero then don't echo.
.111c	ad 3d 0a	lda $0a3d			lda 	SingleLetterVar+("P"-"A")*4+1 ; write address in P
.111f	20 84 11	jsr $1184			jsr 	AWIWriteHex
.1122	ad 3c 0a	lda $0a3c			lda 	SingleLetterVar+("P"-"A")*4
.1125	20 84 11	jsr $1184			jsr 	AWIWriteHex
.1128	ad f2 0a	lda $0af2			lda 	finalOpcode 				; write opcode
.112b	20 7d 11	jsr $117d			jsr 	AWIWriteHexSpace
.112e	e0 00		cpx #$00			cpx 	#0
.1130	f0 0e		beq $1140			beq 	_ASMWEchoExit
.1132	a5 98		lda $98				lda 	esInt0
.1134	20 7d 11	jsr $117d			jsr 	AWIWriteHexSpace
.1137	e0 01		cpx #$01			cpx 	#1
.1139	f0 05		beq $1140			beq 	_ASMWEchoExit
.113b	a5 a0		lda $a0				lda 	esInt1
.113d	20 7d 11	jsr $117d			jsr 	AWIWriteHexSpace
.1140					_ASMWEchoExit:
.1140	8a		txa				txa
.1141	48		pha				pha
.1142	a2 06		ldx #$06		ldx	#6
.1144	20 f6 14	jsr $14f6		jsr	deviceHandler
.1147	68		pla				pla
.1148	aa		tax				tax
.1149					_ASMWNoEcho:
.1149	ad f2 0a	lda $0af2			lda 	finalOpcode
.114c	20 64 11	jsr $1164			jsr 	AsmWriteByte
.114f	e0 00		cpx #$00			cpx 	#0
.1151	f0 0e		beq $1161			beq 	_ASMWExit
.1153	a5 98		lda $98				lda 	esInt0
.1155	20 64 11	jsr $1164			jsr 	AsmWriteByte
.1158	e0 01		cpx #$01			cpx 	#1
.115a	f0 05		beq $1161			beq 	_ASMWExit
.115c	a5 a0		lda $a0				lda 	esInt1
.115e	20 64 11	jsr $1164			jsr 	AsmWriteByte
.1161					_ASMWExit:
.1161	68		pla				pla
.1162	a8		tay				tay
.1163	60		rts				rts
.1164					AsmWriteByte:
.1164	a0 00		ldy #$00			ldy 	#0
.1166	48		pha				pha
.1167	ad 3c 0a	lda $0a3c			lda 	SingleLetterVar+("P"-"A")*4 ; copy address to temp0
.116a	85 2a		sta $2a				sta 	temp0
.116c	ad 3d 0a	lda $0a3d			lda 	SingleLetterVar+("P"-"A")*4+1
.116f	85 2b		sta $2b				sta 	temp0+1
.1171	68		pla				pla 								; write out the byte.
.1172	91 2a		sta ($2a),y			sta 	(temp0),y
.1174	ee 3c 0a	inc $0a3c			inc 	SingleLetterVar+("P"-"A")*4	; increment P
.1177	d0 03		bne $117c			bne 	_AWBNoCarry
.1179	ee 3d 0a	inc $0a3d			inc 	SingleLetterVar+("P"-"A")*4+1
.117c					_AWBNoCarry:
.117c	60		rts				rts
.117d					AWIWriteHexSpace:
.117d	48		pha				pha
.117e	a9 20		lda #$20			lda 	#" "
.1180	20 97 11	jsr $1197			jsr 	AWIPrintChar
.1183	68		pla				pla
.1184					AWIWriteHex:
.1184	48		pha				pha
.1185	4a		lsr a				lsr 	a
.1186	4a		lsr a				lsr 	a
.1187	4a		lsr a				lsr 	a
.1188	4a		lsr a				lsr 	a
.1189	20 8d 11	jsr $118d			jsr 	AWIPrintNibble
.118c	68		pla				pla
.118d					AWIPrintNibble:
.118d	29 0f		and #$0f			and 	#15
.118f	c9 0a		cmp #$0a			cmp 	#10
.1191	90 02		bcc $1195			bcc 	_AWIPNDigit
.1193	69 06		adc #$06			adc 	#6
.1195					_AWIPNDigit:
.1195	69 30		adc #$30			adc 	#48
.1197					AWIPrintChar:
.1197	85 32		sta $32				sta 	tempShort
.1199	8a		txa				txa
.119a	48		pha				pha
.119b	a5 32		lda $32				lda 	tempShort
.119d	a2 16		ldx #$16		ldx	#22
.119f	20 f6 14	jsr $14f6		jsr	deviceHandler
.11a2	68		pla				pla
.11a3	aa		tax				tax
.11a4	60		rts				rts

;******  Return to file: assembler/assembler.asm


;******  Processing file: assembler/assemblecmd.asm

.0af3					asmToken:
>0af3							.fill 	1
.0af4					asmMode:
>0af4							.fill 	1 							; esInt0/1
.0af5					asmBaseOpcode:
>0af5							.fill 	1
.11a5					AssembleOneInstruction:
.11a5	8d f3 0a	sta $0af3			sta 	asmToken 					; save the token
.11a8	aa		tax				tax
.11a9	bd 72 11	lda $1172,x			lda 	OpcodeTable-TKA_GROUP1,x 	; get the base opcode.
.11ac	8d f5 0a	sta $0af5			sta 	asmBaseOpcode
.11af	20 5d 10	jsr $105d			jsr 	AsmGetOperand 				; identify the address mode and operand where applicable.
.11b2	8d f4 0a	sta $0af4			sta 	asmMode
.11b5	a5 a0		lda $a0				lda 	esInt1 						; check if this is a three byte operand.
.11b7	d0 05		bne $11be			bne 	_AOIThreeBytes 				; if so, we have to use three byte
.11b9	20 d4 11	jsr $11d4			jsr 	AssembleAttempt 			; try to assemble token/mode/operand (2 bytes)
.11bc	b0 10		bcs $11ce			bcs 	_AOISuccess 				; worked ok.
.11be					_AOIThreeBytes:
.11be	ae f4 0a	ldx $0af4			ldx 	asmMode 					; convert mode to 3 byte version, where possible.
.11c1	bd f8 11	lda $11f8,x			lda 	AbsoluteVersionTable,x
.11c4	30 09		bmi $11cf			bmi 	_AOIError					; not possible, no equivalent.
.11c6	8d f4 0a	sta $0af4			sta 	asmMode
.11c9	20 d4 11	jsr $11d4			jsr 	AssembleAttempt 			; try to assemble token/mode/operand (3 bytes)
.11cc	90 01		bcc $11cf			bcc 	_AOIError 					; didn't work.
.11ce					_AOISuccess:
.11ce	60		rts				rts
.11cf					_AOIError:
.11cf	a2 24		ldx #$24			ldx 	#ErrorID_Assembler
.11d1	20 18 15	jsr $1518		jsr	errorHandler
.11d4					AssembleAttempt:
.11d4	20 dd 11	jsr $11dd			jsr 	_AADispatch 				; go to the code which dispatches to the appropriate
.11d7	b0 03		bcs $11dc			bcs 	_AAExit 					; exit if carry set, e.g. was successful
.11d9	20 87 13	jsr $1387			jsr 	AssembleSpecialCase
.11dc					_AAExit:
.11dc	60		rts				rts
.11dd					_AADispatch:
.11dd	ad f3 0a	lda $0af3			lda 	asmToken
.11e0	c9 b7		cmp #$b7			cmp 	#TKA_GROUP4
.11e2	b0 11		bcs $11f5			bcs 	_AAGroup4
.11e4	c9 ae		cmp #$ae			cmp 	#TKA_GROUP3
.11e6	b0 0a		bcs $11f2			bcs 	_AAGroup3
.11e8	c9 9c		cmp #$9c			cmp 	#TKA_GROUP2
.11ea	b0 03		bcs $11ef			bcs 	_AAGroup2
.11ec	4c cd 12	jmp $12cd			jmp 	AssembleGroup1
.11ef					_AAGroup2:
.11ef	4c 28 13	jmp $1328			jmp 	AssembleGroup2
.11f2					_AAGroup3:
.11f2	4c 49 13	jmp $1349			jmp 	AssembleGroup3
.11f5					_AAGroup4:
.11f5	4c 7d 13	jmp $137d			jmp 	AssembleGroup4
.11f8					AbsoluteVersionTable:
>11f8	ff						.byte	$FF 			; fail AMD_IMM
>11f9	03						.byte	AMD_ABS 		; absolute AMD_ZERO
>11fa	ff						.byte	$FF 			; fail AMD_ACCIMP
>11fb	ff						.byte	$FF 			; fail AMD_ABS
>11fc	ff						.byte 	$FF 			; fail AMD_ZEROINDY
>11fd	07						.byte	AMD_ABSX 		; absolute AMD_ZEROX
>11fe	ff						.byte	$FF 			; fail AMD_ABSY
>11ff	ff						.byte	$FF 			; fail AMD_ABSX
>1200	0a						.byte	AMD_ABSIND 		; absolute AMD_ZEROIND
>1201	06						.byte	AMD_ABSY 		; absolute AMD_ZEROY
>1202	ff						.byte	$FF 			; fail AMD_ABSIND
>1203	ff						.byte	$FF 			; fail AMD_ABSINDX
>1204	ff						.byte	$FF 			; fail AMD_REL
>1205	0b						.byte 	AMD_ABSINDX 	; absolute AMD_ZEROINDX

;******  Processing file: assembler/../generated/asmtables.inc

.1206					OpcodeTable:
>1206	01					.byte	$01			; $94 ora
>1207	21					.byte	$21			; $95 (and)
>1208	41					.byte	$41			; $96 eor
>1209	61					.byte	$61			; $97 adc
>120a	81					.byte	$81			; $98 sta
>120b	a1					.byte	$a1			; $99 lda
>120c	c1					.byte	$c1			; $9a cmp
>120d	e1					.byte	$e1			; $9b sbc
>120e	02					.byte	$02			; $9c asl
>120f	22					.byte	$22			; $9d rol
>1210	42					.byte	$42			; $9e lsr
>1211	62					.byte	$62			; $9f ror
>1212	82					.byte	$82			; $a0 stx
>1213	a2					.byte	$a2			; $a1 ldx
>1214	c2					.byte	$c2			; $a2 dec
>1215	e2					.byte	$e2			; $a3 inc
>1216	60					.byte	$60			; $a4 stz
>1217	20					.byte	$20			; $a5 bit
>1218	80					.byte	$80			; $a6 sty
>1219	a0					.byte	$a0			; $a7 ldy
>121a	c0					.byte	$c0			; $a8 cpy
>121b	e0					.byte	$e0			; $a9 cpx
>121c	00					.byte	$00			; $aa tsb
>121d	10					.byte	$10			; $ab trb
>121e	14					.byte	$14			; $ac jsr
>121f	40					.byte	$40			; $ad jmp
>1220	10					.byte	$10			; $ae bpl
>1221	30					.byte	$30			; $af bmi
>1222	50					.byte	$50			; $b0 bvc
>1223	70					.byte	$70			; $b1 bvs
>1224	90					.byte	$90			; $b2 bcc
>1225	b0					.byte	$b0			; $b3 bcs
>1226	d0					.byte	$d0			; $b4 bne
>1227	f0					.byte	$f0			; $b5 beq
>1228	80					.byte	$80			; $b6 bra
>1229	00					.byte	$00			; $b7 brk
>122a	08					.byte	$08			; $b8 php
>122b	18					.byte	$18			; $b9 clc
>122c	28					.byte	$28			; $ba plp
>122d	38					.byte	$38			; $bb sec
>122e	40					.byte	$40			; $bc rti
>122f	48					.byte	$48			; $bd pha
>1230	58					.byte	$58			; $be cli
>1231	5a					.byte	$5a			; $bf phy
>1232	60					.byte	$60			; $c0 rts
>1233	68					.byte	$68			; $c1 pla
>1234	78					.byte	$78			; $c2 sei
>1235	7a					.byte	$7a			; $c3 ply
>1236	88					.byte	$88			; $c4 dey
>1237	8a					.byte	$8a			; $c5 txa
>1238	98					.byte	$98			; $c6 tya
>1239	9a					.byte	$9a			; $c7 txs
>123a	a8					.byte	$a8			; $c8 tay
>123b	aa					.byte	$aa			; $c9 tax
>123c	b8					.byte	$b8			; $ca clv
>123d	ba					.byte	$ba			; $cb tsx
>123e	c8					.byte	$c8			; $cc iny
>123f	ca					.byte	$ca			; $cd dex
>1240	d8					.byte	$d8			; $ce cld
>1241	da					.byte	$da			; $cf phx
>1242	e8					.byte	$e8			; $d0 inx
>1243	ea					.byte	$ea			; $d1 nop
>1244	f8					.byte	$f8			; $d2 sed
>1245	fa					.byte	$fa			; $d3 plx
.1246					Group2OpcodeAvailability:
>1246	ae					.byte	$ae			; $9c asl $02
>1247	ae					.byte	$ae			; $9d rol $22
>1248	ae					.byte	$ae			; $9e lsr $42
>1249	ae					.byte	$ae			; $9f ror $62
>124a	0a					.byte	$0a			; $a0 stx $82
>124b	0b					.byte	$0b			; $a1 ldx $a2
>124c	aa					.byte	$aa			; $a2 dec $c2
>124d	aa					.byte	$aa			; $a3 inc $e2
>124e	22					.byte	$22			; $a4 stz $60
>124f	aa					.byte	$aa			; $a5 bit $20
>1250	2a					.byte	$2a			; $a6 sty $80
>1251	ab					.byte	$ab			; $a7 ldy $a0
>1252	2b					.byte	$2b			; $a8 cpy $c0
>1253	0b					.byte	$0b			; $a9 cpx $e0
>1254	0a					.byte	$0a			; $aa tsb $00
>1255	0a					.byte	$0a			; $ab trb $10
>1256	08					.byte	$08			; $ac jsr $14
>1257	08					.byte	$08			; $ad jmp $40
.1258					AssemblerSpecialCases:
>1258	ad 0a 6c				.byte	$ad,10,$6c		; jmp (abs)
>125b	ad 0b 7c				.byte	$ad,11,$7c		; jmp (abs,x)
>125e	a1 06 be				.byte	$a1,6,$be		; ldx abs,y
>1261	a1 09 b6				.byte	$a1,9,$b6		; ldx zp,y
>1264	a0 09 96				.byte	$a0,9,$96		; stx zp,y
>1267	a3 02 1a				.byte	$a3,2,$1a		; inc acc
>126a	a2 02 3a				.byte	$a2,2,$3a		; dec acc
>126d	a5 00 89				.byte	$a5,0,$89		; bit #
>1270	a4 03 9c				.byte	$a4,3,$9c		; stz abs
>1273	a4 07 9e				.byte	$a4,7,$9e		; stz abs,x
>1276	00					.byte	0

;******  Return to file: assembler/assemblecmd.asm


;******  Return to file: assembler/assembler.asm


;******  Processing file: assembler/assemblelabel.asm

.1277					AssembleLabel:
.1277	b1 28		lda ($28),y			lda 	(codePtr),y 				; check it's followed by a variable name.
.1279	c9 3a		cmp #$3a			cmp 	#$3A
.127b	b0 4b		bcs $12c8			bcs 	_ALSyntax
.127d	a9 00		lda #$00			lda 	#0							; get a variable name on to stack:0
.127f	a2 02		ldx #$02		ldx	#2
.1281	20 d8 47	jsr $47d8		jsr	variableHandler
.1284	a5 90		lda $90				lda 	esType 						; check integer reference
.1286	c9 80		cmp #$80			cmp 	#$80
.1288	d0 3e		bne $12c8			bne 	_ALSyntax
.128a	a5 98		lda $98				lda 	esInt0 						; copy that reference address to temp0
.128c	85 2a		sta $2a				sta 	temp0
.128e	a5 a0		lda $a0				lda 	esInt1
.1290	85 2b		sta $2b				sta 	temp0+1
.1292	98		tya				tya
.1293	48		pha				pha
.1294	ad 38 0a	lda $0a38			lda 	SingleLetterVar+("O"-"A")*4	; are we in Pass 2
.1297	4a		lsr a				lsr 	a
.1298	90 11		bcc $12ab			bcc 	_ALWrite
.129a	a0 00		ldy #$00			ldy 	#0
.129c	ad 3c 0a	lda $0a3c			lda 	SingleLetterVar+("P"-"A")*4 ; compare the value in P to the variable
.129f	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.12a1	d0 20		bne $12c3			bne 	_ALChanged
.12a3	c8		iny				iny
.12a4	ad 3d 0a	lda $0a3d			lda 	SingleLetterVar+("P"-"A")*4+1
.12a7	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.12a9	d0 18		bne $12c3			bne 	_ALChanged
.12ab					_ALWrite:
.12ab	a0 00		ldy #$00			ldy 	#0
.12ad	ad 3c 0a	lda $0a3c			lda 	SingleLetterVar+("P"-"A")*4 ; copy the value in P into the variable
.12b0	91 2a		sta ($2a),y			sta 	(temp0),y
.12b2	ad 3d 0a	lda $0a3d			lda 	SingleLetterVar+("P"-"A")*4+1
.12b5	c8		iny				iny
.12b6	91 2a		sta ($2a),y			sta 	(temp0),y
.12b8	a9 00		lda #$00			lda 	#0
.12ba	c8		iny				iny
.12bb	91 2a		sta ($2a),y			sta 	(temp0),y
.12bd	c8		iny				iny
.12be	91 2a		sta ($2a),y			sta 	(temp0),y
.12c0	68		pla				pla
.12c1	a8		tay				tay
.12c2	60		rts				rts
.12c3					_ALChanged:
.12c3	a2 26		ldx #$26			ldx 	#ErrorID_Label
.12c5	20 18 15	jsr $1518		jsr	errorHandler
.12c8					_ALSyntax:
.12c8	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.12ca	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: assembler/assembler.asm


;******  Processing file: assembler/subgroup.asm

.12cd					AssembleGroup1:
.12cd	ad f3 0a	lda $0af3			lda 	asmToken 					; firstly, we throw out STA immediate
.12d0	c9 98		cmp #$98			cmp 	#TKW_STA
.12d2	d0 07		bne $12db			bne 	_AG1NotStoreImm
.12d4	ad f4 0a	lda $0af4			lda 	asmMode
.12d7	c9 00		cmp #$00			cmp 	#AMD_IMM
.12d9	f0 2c		beq $1307			beq 	AG1ModeError
.12db					_AG1NotStoreImm:
.12db	ae f4 0a	ldx $0af4			ldx 	asmMode						; get mode into X.
.12de	bd 0c 13	lda $130c,x			lda		AMDOperandSize,X 			; get the size of the operand and push on stack
.12e1	48		pha				pha
.12e2	f0 23		beq $1307			beq 	AG1ModeError 				; if the size is zero, the mode must be Accumulator
.12e4	e0 00		cpx #$00			cpx 	#0 							; if the mode is zero, e.g. immediate
.12e6	d0 02		bne $12ea			bne 	_AG1NotImmediate
.12e8	a2 02		ldx #$02			ldx 	#2 							; then we use offset 2 here. This is how the 6502
.12ea					_AG1NotImmediate:
.12ea	e0 0d		cpx #$0d			cpx 	#AMD_ZEROINDX 				; (zero,x) uses slot 0.
.12ec	d0 02		bne $12f0			bne 	_AG1NotZX
.12ee	a2 00		ldx #$00			ldx 	#0
.12f0					_AG1NotZX:
.12f0	68		pla				pla 								; restore length
.12f1	e0 09		cpx #$09			cpx 	#9 							; anything > 8 fails.
.12f3	b0 10		bcs $1305			bcs 	AG1Fail
.12f5					AG1ReturnValue:
.12f5	85 32		sta $32				sta 	tempShort 					; save size of operand
.12f7	18		clc				clc
.12f8	bd 1a 13	lda $131a,x			lda 	AMDOffsetFromBase,X 		; get the offset for the address mode.
.12fb	6d f5 0a	adc $0af5			adc 	asmBaseOpcode 				; add the base opcode.
.12fe	a6 32		ldx $32				ldx 	tempShort 					; length in X
.1300	20 10 11	jsr $1110			jsr 	AsmWriteInstruction 		; output instruction.
.1303	38		sec				sec
.1304	60		rts				rts
.1305					AG1Fail:
.1305	18		clc				clc
.1306	60		rts				rts
.1307					AG1ModeError:
.1307	a2 24		ldx #$24			ldx 	#ErrorID_Assembler
.1309	20 18 15	jsr $1518		jsr	errorHandler
.130c					AMDOperandSize:
>130c	01 01 00 02					.byte 	1,1,0,2
>1310	01 01 02 02					.byte 	1,1,2,2
>1314	01 01 02 02					.byte 	1,1,2,2
>1318	01 01						.byte 	1,1
.131a					AMDOffsetFromBase:
>131a	00 04 08 0c					.byte 	0,4,8,12
>131e	10 14 18 1c					.byte	16,20,24,28
>1322	11 00 00 00					.byte 	17,0,0,0
>1326	00 00						.byte 	0,0
.1328					AssembleGroup2:
.1328	ad f4 0a	lda $0af4			lda 	asmMode 					; get the mode; if >= 8 cannot be a legit group 2
.132b	c9 08		cmp #$08			cmp 	#8
.132d	b0 18		bcs $1347			bcs 	_AG2Fail
.132f	85 2a		sta $2a				sta 	temp0 						; save in temp9
.1331	ae f3 0a	ldx $0af3			ldx 	asmToken					; get token in X, then get the availability flags for it
.1334	bd aa 11	lda $11aa,x			lda 	Group2OpcodeAvailability-TKA_GROUP2,x
.1337					_AG2Shift:
.1337	4a		lsr a				lsr 	a
.1338	c6 2a		dec $2a				dec 	temp0
.133a	10 fb		bpl $1337			bpl 	_AG2Shift
.133c	90 09		bcc $1347			bcc 	_AG2Fail 					; cannot do that instruction w/that opcode.
.133e	ae f4 0a	ldx $0af4			ldx  	asmMode 					; mode in X
.1341	bd 0c 13	lda $130c,x			lda		AMDOperandSize,X 			; get the size of the operand in A
.1344	4c f5 12	jmp $12f5			jmp 	AG1ReturnValue 				; and use that with Group 1's exit code
.1347					_AG2Fail:
.1347	18		clc				clc
.1348	60		rts				rts
.1349					AssembleGroup3:
.1349	ad 38 0a	lda $0a38			lda 	SingleLetterVar+("O"-"A")*4	; check bit 0 (pass) of O
.134c	4a		lsr a				lsr 	a
.134d	a9 00		lda #$00			lda 	#0 							; if clear, e.g. pass 1, use default zero.
.134f	90 21		bcc $1372			bcc 	_AG3Default
.1351	38		sec				sec	 								; calculate branch offset
.1352	a5 98		lda $98				lda		esInt0
.1354	ed 3c 0a	sbc $0a3c			sbc 	SingleLetterVar+("P"-"A")*4
.1357	aa		tax				tax
.1358	a5 a0		lda $a0				lda		esInt1
.135a	ed 3d 0a	sbc $0a3d			sbc 	SingleLetterVar+("P"-"A")*4+1
.135d	85 a0		sta $a0				sta 	esInt1
.135f	8a		txa				txa 								; add 126, now 128 too many.
.1360	18		clc				clc 								; we can use this to check the range
.1361	69 7e		adc #$7e			adc 	#126
.1363	85 98		sta $98				sta 	esInt0
.1365	90 02		bcc $1369			bcc 	_AG3NoCarry
.1367	e6 a0		inc $a0				inc 	esInt1
.1369					_AG3NoCarry:
.1369	a5 a0		lda $a0				lda 	esInt1 						; check in range.
.136b	d0 0b		bne $1378			bne 	_AG3Range
.136d	a5 98		lda $98				lda 	esInt0 						; fix up branch distance
.136f	38		sec				sec
.1370	e9 80		sbc #$80			sbc 	#128
.1372					_AG3Default:
.1372	85 98		sta $98				sta 	esInt0
.1374					_AG3ExitOk:
.1374	a2 01		ldx #$01			ldx 	#1 							; one opcode, use AG4 Code
.1376	d0 07		bne $137f			bne 	AG4Write
.1378					_AG3Range:
.1378	a2 25		ldx #$25			ldx 	#ErrorID_Branch
.137a	20 18 15	jsr $1518		jsr	errorHandler
.137d					AssembleGroup4:
.137d	a2 00		ldx #$00			ldx 	#0 							; no parameters in the opcode.
.137f					AG4Write:
.137f	ad f5 0a	lda $0af5			lda 	asmBaseOpcode				; the opcode is the opcode base.
.1382	20 10 11	jsr $1110			jsr 	AsmWriteInstruction 		; output instruction.
.1385	38		sec				sec
.1386	60		rts				rts
.1387					AssembleSpecialCase:
.1387	a2 00		ldx #$00			ldx 	#0
.1389					_ASCScan:
.1389	bd 58 12	lda $1258,x			lda 	AssemblerSpecialCases,x 	; scan token and mode for match
.138c	cd f3 0a	cmp $0af3			cmp 	asmToken
.138f	d0 08		bne $1399			bne 	_ASCNext
.1391	bd 59 12	lda $1259,x			lda 	AssemblerSpecialCases+1,x
.1394	cd f4 0a	cmp $0af4			cmp 	asmMode
.1397	f0 0a		beq $13a3			beq 	_ASCFound
.1399					_ASCNext:
.1399	e8		inx				inx									; next entry
.139a	e8		inx				inx
.139b	e8		inx				inx
.139c	bd 58 12	lda $1258,x			lda 	AssemblerSpecialCases,x 	; until table ends
.139f	d0 e8		bne $1389			bne 	_ASCScan
.13a1	18		clc				clc
.13a2	60		rts				rts
.13a3					_ASCFound:
.13a3	bd 5a 12	lda $125a,x			lda 	AssemblerSpecialCases+2,x 	; get the new opcode.
.13a6	48		pha				pha
.13a7	ae f4 0a	ldx $0af4			ldx  	asmMode 					; mode in X
.13aa	bd 0c 13	lda $130c,x			lda		AMDOperandSize,X 			; get the size of the operand in X
.13ad	aa		tax				tax
.13ae	68		pla				pla 								; opcode back
.13af	20 10 11	jsr $1110			jsr 	AsmWriteInstruction 		; output instruction.
.13b2	38		sec				sec
.13b3	60		rts				rts

;******  Return to file: assembler/assembler.asm

.13b4					assemblerHandler:
.13b4	7c b7 13	jmp ($13b7,x)			jmp 	(assemblerVectors,x)
.13b7					assemblerVectors:
>13b7	bd 13					.word _DummyControlHandler ; index 0
>13b9	a5 11					.word AssembleOneInstruction ; index 2
>13bb	77 12					.word AssembleLabel        ; index 4
.13bd					_DummyControlHandler:
.13bd	60		rts			rts

;******  Return to file: basic.asm

.13be					section_end_assembler:
.13be					section_start_device:

;******  Processing file: device/device.asm


;******  Processing file: device/option_x16/x16break.asm

.13be					X16Break:
.13be	20 e1 ff	jsr $ffe1			jsr 	$FFE1
.13c1	f0 01		beq $13c4			beq 	_IsBreak
.13c3	60		rts				rts
.13c4					_IsBreak:
.13c4	a2 21		ldx #$21			ldx 	#ErrorID_Break
.13c6	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: device/device.asm


;******  Processing file: device/option_x16/x16file.asm

.13c9					ExternSave:
.13c9	98		tya				tya
.13ca	48		pha				pha
.13cb	20 19 14	jsr $1419			jsr 	ExternGetLength 			; get length of file into A name YX
.13ce	20 bd ff	jsr $ffbd			jsr 	$FFBD 						; set name
.13d1	a9 01		lda #$01			lda 	#1
.13d3	a2 08		ldx #$08			ldx 	#8	 						; device #8
.13d5	a0 00		ldy #$00			ldy 	#0
.13d7	20 ba ff	jsr $ffba			jsr 	$FFBA 						; set LFS
.13da	a5 99		lda $99				lda 	esInt0+1 					; copy start of save address to temp0
.13dc	85 2a		sta $2a				sta 	temp0
.13de	a5 a1		lda $a1				lda 	esInt1+1
.13e0	85 2b		sta $2b				sta 	temp0+1
.13e2	a6 9a		ldx $9a				ldx 	esInt0+2 					; end address
.13e4	a4 a2		ldy $a2				ldy 	esInt1+2
.13e6	a9 2a		lda #$2a			lda 	#temp0 						; ref to start address
.13e8	20 d8 ff	jsr $ffd8			jsr 	$FFD8 						; save
.13eb	b0 03		bcs $13f0			bcs 	_ESSave
.13ed	68		pla				pla
.13ee	a8		tay				tay
.13ef	60		rts				rts
.13f0					_ESSave:
.13f0	a2 1f		ldx #$1f			ldx 	#ErrorID_Save
.13f2	20 18 15	jsr $1518		jsr	errorHandler
.13f5					ExternLoad:
.13f5	98		tya				tya
.13f6	48		pha				pha
.13f7	20 19 14	jsr $1419			jsr 	ExternGetLength 			; get length of file into A name YX
.13fa	20 bd ff	jsr $ffbd			jsr 	$FFBD 						; set name
.13fd	a9 01		lda #$01			lda 	#1
.13ff	a2 08		ldx #$08			ldx 	#8	 						; device #8
.1401	a0 00		ldy #$00			ldy 	#0
.1403	20 ba ff	jsr $ffba			jsr 	$FFBA 						; set LFS
.1406	a6 99		ldx $99				ldx 	esInt0+1 					; load address
.1408	a4 a1		ldy $a1				ldy 	esInt1+1
.140a	a9 00		lda #$00			lda 	#0 							; load command
.140c	20 d5 ff	jsr $ffd5			jsr 	$FFD5
.140f	b0 03		bcs $1414			bcs 	_ESLoad
.1411	68		pla				pla
.1412	a8		tay				tay
.1413	60		rts				rts
.1414					_ESLoad:
.1414	a2 20		ldx #$20			ldx 	#ErrorID_Load
.1416	20 18 15	jsr $1518		jsr	errorHandler
.1419					ExternGetLength:
.1419	a5 98		lda $98				lda 	esInt0 						; length into A.
.141b	85 2a		sta $2a				sta 	temp0
.141d	a5 a0		lda $a0				lda 	esInt1
.141f	85 2b		sta $2b				sta 	temp0+1
.1421	a0 00		ldy #$00			ldy 	#0
.1423	b1 2a		lda ($2a),y			lda 	(temp0),y
.1425	a6 98		ldx $98				ldx 	esInt0 						; name into YX
.1427	a4 a0		ldy $a0				ldy 	esInt1
.1429	e8		inx				inx 								; advance over the length pointer.
.142a	d0 01		bne $142d			bne 	_ESNoCarry
.142c	c8		iny				iny
.142d					_ESNoCarry:
.142d	60		rts				rts

;******  Return to file: device/device.asm


;******  Processing file: device/option_x16/x16io.asm

=240					MaxLineInputSize = 240
.0af6					bufferCount:
>0af6							.fill 	0
.0af6					bufferStorage:
>0af6							.fill 	MaxLineInputSize
.142e					IOControlHandler:
.142e	c9 00		cmp #$00			cmp 	#0
.1430	d0 12		bne $1444			bne		_CHExit
.1432	a9 0f		lda #$0f			lda 	#15 						; switch to upper/lower case mode
.1434	20 5d 14	jsr $145d			jsr 	IOPrintChar
.1437	a9 02		lda #$02			lda 	#2 							; green on black and clear screen
.1439	20 89 14	jsr $1489			jsr 	IOInk
.143c	a9 00		lda #$00			lda 	#0
.143e	20 9d 14	jsr $149d			jsr 	IOPaper
.1441	20 45 14	jsr $1445			jsr 	IOClearScreen
.1444					_CHExit:
.1444	60		rts				rts
.1445					IOClearScreen:
.1445	48		pha				pha
.1446	a9 93		lda #$93			lda	 	#147 						; char code $93 clears screen
.1448	20 5d 14	jsr $145d			jsr 	IOPrintChar
.144b	68		pla				pla
.144c	60		rts				rts
.144d					IONewLine:
.144d	48		pha				pha
.144e	a9 0d		lda #$0d			lda 	#13
.1450	20 5d 14	jsr $145d			jsr 	IOPrintChar
.1453	68		pla				pla
.1454	60		rts				rts
.1455					IOTab:
.1455	48		pha				pha
.1456	a9 20		lda #$20			lda 	#32
.1458	20 5d 14	jsr $145d			jsr 	IOPrintChar
.145b	68		pla				pla
.145c	60		rts				rts
.145d					IOPrintAscii:
.145d					IOPrintChar:
.145d	aa		tax				tax 								; save in X so we can save Y
.145e	5a		phy				phy
.145f	8a		txa				txa
.1460	c9 08		cmp #$08			cmp 	#8 							; make BS (8) onto CHR$(14) which is the
.1462	d0 02		bne $1466			bne 	_IOPCNotBS 					; Commodore/X16 backspace code.
.1464	a9 14		lda #$14			lda 	#$14
.1466					_IOPCNotBS:
.1466	20 d2 ff	jsr $ffd2			jsr 	$FFD2 						; CBM OS Call.
.1469	7a		ply				ply
.146a	60		rts				rts
.146b					IOInkey:
.146b	98		tya				tya
.146c	48		pha				pha
.146d	20 e4 ff	jsr $ffe4			jsr 	$FFE4
.1470	85 32		sta $32				sta 	tempShort
.1472	68		pla				pla
.1473	a8		tay				tay
.1474	a5 32		lda $32				lda 	tempShort					; no key pressed.
.1476	f0 10		beq $1488			beq 	_IOIExit
.1478	c9 0d		cmp #$0d			cmp 	#13 						; allow CR (13)
.147a	f0 0c		beq $1488			beq 	_IOIExit
.147c	c9 14		cmp #$14			cmp 	#$14 						; backspace code ($14) returns 8.
.147e	f0 06		beq $1486			beq 	_IOIBackspace
.1480	c9 20		cmp #$20			cmp 	#32 						; no other control allowed.
.1482	90 e7		bcc $146b			bcc 	IOInkey
.1484	b0 02		bcs $1488			bcs 	_IOIExit
.1486					_IOIBackspace:
.1486	a9 08		lda #$08			lda 	#8 							; return chr(8)
.1488					_IOIExit:
.1488	60		rts				rts
.1489					IOInk:
.1489	48		pha				pha
.148a	29 07		and #$07			and 	#7 							; 8 primaries
.148c	aa		tax				tax
.148d	bd 95 14	lda $1495,x			lda 	_IOColourTable,x 			; look up CBM code and print it.
.1490	20 5d 14	jsr $145d			jsr 	IOPrintChar
.1493	68		pla				pla
.1494	60		rts				rts
.1495					_IOColourTable:
>1495	90						.byte 	$90 					; 0 Black
>1496	96						.byte 	$96 					; 1 Red
>1497	1e						.byte 	$1E 					; 2 Green
>1498	9e						.byte 	$9E 					; 3 Yellow
>1499	9a						.byte 	$9A 					; 4 Blue
>149a	9c						.byte 	$9C 					; 5 Magenta
>149b	9f						.byte 	$9F 					; 6 Cyan
>149c	05						.byte 	$05 					; 7 White
.149d					IOPaper:
.149d	48		pha				pha
.149e	48		pha				pha
.149f	a9 01		lda #$01			lda 	#1 						; 1 swaps fgr/bgr, so we swap them, set fgr
.14a1	20 5d 14	jsr $145d			jsr 	IOPrintChar 			; and then swap them again.
.14a4	68		pla				pla
.14a5	20 89 14	jsr $1489			jsr 	IOInk
.14a8	a9 01		lda #$01			lda 	#1
.14aa	20 5d 14	jsr $145d			jsr 	IOPrintChar
.14ad	68		pla				pla
.14ae	60		rts				rts
.14af					IOLocate:
.14af	48		pha				pha
.14b0	a9 13		lda #$13			lda 	#$13 					; home cursor code
.14b2	20 5d 14	jsr $145d			jsr 	IOPrintChar
.14b5	a9 11		lda #$11			lda 	#$11 	 				; print Y x $11 (down)
.14b7	20 be 14	jsr $14be			jsr 	_IOLoc2
.14ba	68		pla				pla
.14bb	a8		tay				tay
.14bc	a9 1d		lda #$1d			lda 	#$1D 					; print Y x $1D (right)
.14be					_IOLoc2:
.14be	c0 00		cpy #$00			cpy 	#0
.14c0	f0 06		beq $14c8			beq 	_IOLocExit
.14c2	20 5d 14	jsr $145d			jsr 	IOPrintChar
.14c5	88		dey				dey
.14c6	d0 f6		bne $14be			bne 	_IOLoc2
.14c8					_IOLocExit:
.14c8	60		rts				rts
.14c9					IOInput:
.14c9	a9 00		lda #$00			lda 	#0
.14cb	8d f6 0a	sta $0af6			sta 	bufferCount
.14ce					_IOILoop:
.14ce	20 cf ff	jsr $ffcf			jsr 	$FFCF
.14d1	c9 0d		cmp #$0d			cmp 	#13
.14d3	f0 10		beq $14e5			beq 	_IOIExit
.14d5	ae f6 0a	ldx $0af6			ldx 	bufferCount
.14d8	e0 f0		cpx #$f0			cpx 	#MaxLineInputSize
.14da	f0 f2		beq $14ce			beq 	_IOILoop
.14dc	ee f6 0a	inc $0af6			inc 	bufferCount
.14df	9d f7 0a	sta $0af7,x			sta 	bufferStorage+1,x
.14e2	4c ce 14	jmp $14ce			jmp 	_IOILoop
.14e5					_IOIExit:
.14e5	a9 f6		lda #$f6			lda 	#(bufferCount) & $FF
.14e7	85 2a		sta $2a				sta 	temp0
.14e9	a9 0a		lda #$0a			lda 	#(bufferCount) >> 8
.14eb	85 2b		sta $2b				sta 	1+(temp0)
.14ed	60		rts				rts

;******  Return to file: device/device.asm


;******  Processing file: device/option_x16/x16timer.asm

.14ee					IOReadTimer:
.14ee	20 de ff	jsr $ffde			jsr 	$FFDE 						; reads timer into YXA so we want only YA
.14f1	48		pha				pha
.14f2	8a		txa				txa
.14f3	a8		tay				tay
.14f4	68		pla				pla
.14f5	60		rts				rts

;******  Return to file: device/device.asm

.14f6					deviceHandler:
.14f6	7c f9 14	jmp ($14f9,x)			jmp 	(deviceVectors,x)
.14f9					deviceVectors:
>14f9	2e 14					.word IOControlHandler     ; index 0
>14fb	be 13					.word X16Break             ; index 2
>14fd	45 14					.word IOClearScreen        ; index 4
>14ff	4d 14					.word IONewLine            ; index 6
>1501	89 14					.word IOInk                ; index 8
>1503	6b 14					.word IOInkey              ; index 10
>1505	c9 14					.word IOInput              ; index 12
>1507	f5 13					.word ExternLoad           ; index 14
>1509	af 14					.word IOLocate             ; index 16
>150b	9d 14					.word IOPaper              ; index 18
>150d	5d 14					.word IOPrintChar          ; index 20
>150f	5d 14					.word IOPrintAscii         ; index 22
>1511	c9 13					.word ExternSave           ; index 24
>1513	55 14					.word IOTab                ; index 26
>1515	ee 14					.word IOReadTimer          ; index 28
.1517					_DummyControlHandler:
.1517	60		rts			rts

;******  Return to file: basic.asm

.1518					section_end_device:
.1518					section_start_error:

;******  Processing file: error/error.asm


;******  Processing file: error/errorhandler.asm

.1518					ErrorHandler:
.1518	8a		txa				txa
.1519	48		pha				pha
.151a	a9 01		lda #$01			lda 	#1 							; red
.151c	a2 08		ldx #$08		ldx	#8
.151e	20 f6 14	jsr $14f6		jsr	deviceHandler
.1521	68		pla				pla
.1522	aa		tax				tax
.1523	a9 8e		lda #$8e			lda 	#(ErrorTextList) & $FF
.1525	85 2a		sta $2a				sta 	temp0
.1527	a9 15		lda #$15			lda 	#(ErrorTextList) >> 8
.1529	85 2b		sta $2b				sta 	1+(temp0)
.152b	ca		dex		_EHFind:dex									; errors start at 1
.152c	f0 10		beq $153e			beq 	_EHFound
.152e	a0 00		ldy #$00			ldy 	#0 							; goto next text message, add length + 1 to the pointer.
.1530	38		sec				sec
.1531	a5 2a		lda $2a				lda 	temp0
.1533	71 2a		adc ($2a),y			adc 	(temp0),y
.1535	85 2a		sta $2a				sta 	temp0
.1537	90 f2		bcc $152b			bcc 	_EHFind
.1539	e6 2b		inc $2b				inc 	temp0+1
.153b	4c 2b 15	jmp $152b			jmp 	_EHFind
.153e					_EHFound:
.153e	20 52 18	jsr $1852			jsr 	EHPrintAscii 				; print the string "temp0" now points to.
.1541	a0 00		ldy #$00			ldy 	#0 							; in a line, e.g. the offset to next is non zero.
.1543	b1 28		lda ($28),y			lda 	(codePtr),y
.1545	f0 39		beq $1580			beq 	_EHNoLine
.1547	a5 29		lda $29				lda 	codePtr+1 					; code running from the command line.
.1549	cd c9 0a	cmp $0ac9			cmp 	basePage+1
.154c	90 32		bcc $1580			bcc 	_EHNoLine
.154e	a9 8a		lda #$8a			lda 	#(EHAtMsg) & $FF
.1550	85 2a		sta $2a				sta 	temp0
.1552	a9 15		lda #$15			lda 	#(EHAtMsg) >> 8
.1554	85 2b		sta $2b				sta 	1+(temp0)
.1556	20 52 18	jsr $1852			jsr 	EHPrintAscii
.1559	a0 01		ldy #$01			ldy 	#1 							; set up line number in TOS
.155b	a2 00		ldx #$00			ldx 	#0
.155d	b1 28		lda ($28),y			lda 	(codePtr),y
.155f	95 98		sta $98,x			sta 	esInt0,x
.1561	c8		iny				iny
.1562	b1 28		lda ($28),y			lda 	(codePtr),y
.1564	95 a0		sta $a0,x			sta 	esInt1,x
.1566	a9 00		lda #$00			lda 	#0
.1568	95 a8		sta $a8,x			sta 	esInt2,x
.156a	95 b0		sta $b0,x			sta 	esInt3,x
.156c	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.156e	85 2a		sta $2a				sta 	temp0
.1570	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.1572	85 2b		sta $2b				sta 	1+(temp0)
.1574	a0 0a		ldy #$0a			ldy 	#10 						; in base 10.
.1576	a9 00		lda #$00			lda 	#0							; stack position zero.
.1578	a2 12		ldx #$12		ldx	#18
.157a	20 eb 38	jsr $38eb		jsr	mainHandler
.157d	20 52 18	jsr $1852			jsr 	EHPrintAscii
.1580					_EHNoLine:
.1580	a2 06		ldx #$06		ldx	#6
.1582	20 f6 14	jsr $14f6		jsr	deviceHandler
.1585	a2 04		ldx #$04		ldx	#4
.1587	20 51 22	jsr $2251		jsr	interactionHandler
.158a					EHAtMsg:
>158a	03 20 40 20					.text 	3," @ "

;******  Processing file: error/../generated/errortext.inc

.158e					ErrorTextList:
>158e	13 46 65 61 74 75 72 65			.text 19,"Feature not Present"
>1596	20 6e 6f 74 20 50 72 65 73 65 6e 74
>15a2	0c 53 79 6e 74 61 78 20			.text 12,"Syntax Error"
>15aa	45 72 72 6f 72
>15af	0f 4d 6f 64 75 6c 65 20			.text 15,"Module disabled"
>15b7	64 69 73 61 62 6c 65 64
>15bf	10 41 73 73 65 72 74 69			.text 16,"Assertion failed"
>15c7	6f 6e 20 66 61 69 6c 65 64
>15d0	0e 44 69 76 69 64 65 20			.text 14,"Divide By Zero"
>15d8	42 79 20 5a 65 72 6f
>15df	04 53 74 6f 70				.text 4,"Stop"
>15e4	0d 54 79 70 65 20 4d 69			.text 13,"Type Mismatch"
>15ec	73 6d 61 74 63 68
>15f2	0d 49 6c 6c 65 67 61 6c			.text 13,"Illegal Value"
>15fa	20 56 61 6c 75 65
>1600	15 4d 69 73 73 69 6e 67			.text 21,"Missing right bracket"
>1608	20 72 69 67 68 74 20 62 72 61 63 6b 65 74
>1616	0d 4d 69 73 73 69 6e 67			.text 13,"Missing comma"
>161e	20 63 6f 6d 6d 61
>1624	11 4d 69 73 73 69 6e 67			.text 17,"Missing reference"
>162c	20 72 65 66 65 72 65 6e 63 65
>1636	15 4c 69 6e 65 20 4e 75			.text 21,"Line Number not found"
>163e	6d 62 65 72 20 6e 6f 74 20 66 6f 75 6e 64
>164c	0f 53 74 72 69 6e 67 20			.text 15,"String too long"
>1654	74 6f 6f 20 6c 6f 6e 67
>165c	14 52 45 54 55 52 4e 20			.text 20,"RETURN without GOSUB"
>1664	77 69 74 68 6f 75 74 20 47 4f 53 55 42
>1671	14 55 4e 54 49 4c 20 77			.text 20,"UNTIL without REPEAT"
>1679	69 74 68 6f 75 74 20 52 45 50 45 41 54
>1686	10 4e 45 58 54 20 77 69			.text 16,"NEXT without FOR"
>168e	74 68 6f 75 74 20 46 4f 52
>1697	12 57 45 4e 44 20 77 69			.text 18,"WEND without WHILE"
>169f	74 68 6f 75 74 20 57 48 49 4c 45
>16aa	14 45 4e 44 50 52 4f 43			.text 20,"ENDPROC without PROC"
>16b2	20 77 69 74 68 6f 75 74 20 50 52 4f 43
>16bf	0e 42 61 64 20 4e 45 58			.text 14,"Bad NEXT index"
>16c7	54 20 69 6e 64 65 78
>16ce	17 53 74 72 75 63 74 75			.text 23,"Structures nested wrong"
>16d6	72 65 73 20 6e 65 73 74 65 64 20 77 72 6f 6e 67
>16e6	16 43 61 6e 6e 6f 74 20			.text 22,"Cannot create variable"
>16ee	63 72 65 61 74 65 20 76 61 72 69 61 62 6c 65
>16fd	19 52 65 74 75 72 6e 20			.text 25,"Return stack out of space"
>1705	73 74 61 63 6b 20 6f 75 74 20 6f 66 20 73 70 61
>1715	63 65
>1717	11 55 6e 6b 6e 6f 77 6e			.text 17,"Unknown Procedure"
>171f	20 50 72 6f 63 65 64 75 72 65
>1729	17 50 61 72 61 6d 65 74			.text 23,"Parameters do not match"
>1731	65 72 73 20 64 6f 20 6e 6f 74 20 6d 61 74 63 68
>1741	15 41 72 72 61 79 20 61			.text 21,"Array already defined"
>1749	6c 72 65 61 64 79 20 64 65 66 69 6e 65 64
>1757	12 44 49 4d 20 72 65 71			.text 18,"DIM requires array"
>175f	75 69 72 65 73 20 61 72 72 61 79
>176a	0f 42 61 64 20 61 72 72			.text 15,"Bad array index"
>1772	61 79 20 69 6e 64 65 78
>177a	1d 57 72 6f 6e 67 20 6e			.text 29,"Wrong number of array indices"
>1782	75 6d 62 65 72 20 6f 66 20 61 72 72 61 79 20 69
>1792	6e 64 69 63 65 73
>1798	0b 4f 75 74 20 6f 66 20			.text 11,"Out of data"
>17a0	64 61 74 61
>17a4	14 43 61 6e 6e 6f 74 20			.text 20,"Cannot tokenise line"
>17ac	74 6f 6b 65 6e 69 73 65 20 6c 69 6e 65
>17b9	0b 53 61 76 65 20 66 61			.text 11,"Save failed"
>17c1	69 6c 65 64
>17c5	0b 4c 6f 61 64 20 66 61			.text 11,"Load failed"
>17cd	69 6c 65 64
>17d1	05 42 72 65 61 6b			.text 5,"Break"
>17d7	0d 4f 75 74 20 6f 66 20			.text 13,"Out of memory"
>17df	6d 65 6d 6f 72 79
>17e5	16 45 78 70 72 65 73 73			.text 22,"Expression too complex"
>17ed	69 6f 6e 20 74 6f 6f 20 63 6f 6d 70 6c 65 78
>17fc	10 42 61 64 20 4f 70 65			.text 16,"Bad Operand/Mode"
>1804	72 61 6e 64 2f 4d 6f 64 65
>180d	13 42 72 61 6e 63 68 20			.text 19,"Branch out of range"
>1815	6f 75 74 20 6f 66 20 72 61 6e 67 65
>1821	13 4c 61 62 65 6c 20 63			.text 19,"Label changed value"
>1829	68 61 6e 67 65 64 20 76 61 6c 75 65
>1835	12 4e 6f 20 53 70 72 69			.text 18,"No Sprite Selected"
>183d	74 65 20 53 65 6c 65 63 74 65 64
>1848	08 48 61 72 64 77 61 72			.text 8,"Hardware"
>1850	65
>1851	00					.byte 0

;******  Return to file: error/errorhandler.asm

.1852					EHPrintAscii:
.1852	a0 00		ldy #$00			ldy 	#0
.1854	b1 2a		lda ($2a),y			lda 	(temp0),y
.1856	aa		tax				tax
.1857	f0 0f		beq $1868			beq 	_EHPExit
.1859					_EHPLoop:
.1859	c8		iny				iny
.185a	8a		txa				txa
.185b	48		pha				pha
.185c	b1 2a		lda ($2a),y			lda 	(temp0),y
.185e	a2 16		ldx #$16		ldx	#22
.1860	20 f6 14	jsr $14f6		jsr	deviceHandler
.1863	68		pla				pla
.1864	aa		tax				tax
.1865	ca		dex				dex
.1866	d0 f1		bne $1859			bne 	_EHPLoop
.1868					_EHPExit:
.1868	60		rts				rts

;******  Return to file: error/error.asm


;******  Return to file: basic.asm

.1869					section_end_error:
.1869					section_start_extension:

;******  Processing file: extension/extension.asm


;******  Processing file: extension/extensionhandler.asm

.1869					ExtensionHandler:
.1869	c9 fe		cmp #$fe			cmp 	#$FE 						; check for force mode 0
.186b	f0 16		beq $1883			beq 	_ExtensionForce
.186d	c9 ff		cmp #$ff			cmp 	#$FF						; A = $FF command, otherwise unary function stack level.
.186f	d0 08		bne $1879			bne 	_ExtensionUnary 			; is passed in A.
.1871	b1 28		lda ($28),y			lda 	(codePtr),y 				; so this is a command, using Group 2.
.1873	c8		iny				iny
.1874	0a		asl a				asl 	a
.1875	aa		tax				tax
.1876	7c 7a 18	jmp ($187a,x)			jmp 	(Group2Vectors-12,x)
.1879					_ExtensionUnary:
.1879	48		pha				pha 								; save stack pos in A
.187a	b1 28		lda ($28),y			lda 	(codePtr),y 				; get shifted token, double into X
.187c	c8		iny				iny
.187d	0a		asl a				asl 	a
.187e	aa		tax				tax
.187f	68		pla				pla 								; restore stack pos and call group3 command.
.1880	7c 88 18	jmp ($1888,x)			jmp 	(Group3Vectors-12,X)
.1883					_ExtensionForce:
.1883	4c cf 1d	jmp $1dcf			jmp 	ForceMode0

;******  Processing file: extension/../generated/tokenvectors2.inc

.1886					Group2Vectors:
>1886	fe 1e					.word	Command_VPoke            ; $86 vpoke
>1888	01 1f					.word	Command_VDoke            ; $87 vdoke
>188a	d6 1e					.word	Command_VLoad            ; $88 vload
>188c	e1 1d					.word	CommandMode              ; $89 mode
>188e	9f 1e					.word	CommandPalette           ; $8a palette
>1890	cc 1b					.word	CommandSprite            ; $8b sprite
>1892	9b 1e					.word	CommandClg               ; $8c clg

;******  Return to file: extension/extensionhandler.asm


;******  Processing file: extension/../generated/tokenvectors3.inc

.1894					Group3Vectors:
>1894	4a 1f					.word	Command_VPeek            ; $86 vpeek(
>1896	4d 1f					.word	Command_VDeek            ; $87 vdeek(
>1898	9f 1d					.word	Sprite_GetX              ; $88 sprite.x(
>189a	a2 1d					.word	Sprite_GetY              ; $89 sprite.y(
>189c	0f 1b					.word	FunctionCollide          ; $8a hit(
>189e	87 1a					.word	Unary_JoyX               ; $8b joy.x(
>18a0	8a 1a					.word	Unary_JoyY               ; $8c joy.y(
>18a2	c5 1a					.word	Unary_JButton            ; $8d joy.b(
>18a4	5a 1a					.word	Unary_Clock              ; $8e clock(

;******  Return to file: extension/extensionhandler.asm

.18a6					XEvaluateInteger:
.18a6	8a		txa				txa
.18a7	a2 0a		ldx #$0a		ldx	#10
.18a9	20 eb 38	jsr $38eb		jsr	mainHandler
.18ac	aa		tax				tax
.18ad	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/driver/coords.asm

.18ae					gdMvRight:
.18ae	ee 20 9f	inc $9f20			inc 	$9F20 						; bump $9F20
.18b1	d0 08		bne $18bb			bne 	_gdMR0
.18b3	ee 21 9f	inc $9f21			inc 	$9F21
.18b6	d0 03		bne $18bb			bne 	_gdMR0
.18b8	ee 22 9f	inc $9f22			inc 	$9F22
.18bb					_gdMR0:
.18bb	ee ec 0b	inc $0bec			inc 	gdXPos
.18be	d0 03		bne $18c3			bne 	_gdMR1
.18c0	ee ed 0b	inc $0bed			inc 	gdXPos+1
.18c3					_gdMR1:
.18c3	ad ed 0b	lda $0bed			lda 	gdXPos+1		 			; check MSB
.18c6	f0 0d		beq $18d5			beq 	gdMOffScreen
.18c8	c9 02		cmp #$02			cmp 	#2
.18ca	b0 07		bcs $18d3			bcs 	gdmOnScreen
.18cc	ad ec 0b	lda $0bec			lda 	gdXPos 						; $01xx check < $140
.18cf	c9 40		cmp #$40			cmp 	#$40
.18d1	b0 02		bcs $18d5			bcs 	gdmOffScreen
.18d3					gdmOnScreen:
.18d3	18		clc				clc
.18d4	60		rts				rts
.18d5					gdmOffScreen:
.18d5	38		sec				sec
.18d6	60		rts				rts
.18d7					gdMvUp:
.18d7	ad ee 0b	lda $0bee			lda 	gdYPos 						; decrement Y Pos
.18da	d0 03		bne $18df			bne 	_gdMU1
.18dc	ce ef 0b	dec $0bef			dec 	gdYPos+1
.18df	ce ee 0b	dec $0bee	_gdMU1:	dec 	gdYPos
.18e2	38		sec				sec 								; adjust position by -320
.18e3	ad 20 9f	lda $9f20			lda 	$9F20
.18e6	e9 40		sbc #$40			sbc 	#64
.18e8	8d 20 9f	sta $9f20			sta 	$9F20
.18eb	ad 21 9f	lda $9f21			lda 	$9F21
.18ee	e9 01		sbc #$01			sbc 	#1
.18f0	8d 21 9f	sta $9f21			sta 	$9F21
.18f3	ad 22 9f	lda $9f22			lda 	$9F22
.18f6	e9 00		sbc #$00			sbc 	#0
.18f8	8d 22 9f	sta $9f22			sta 	$9F22
.18fb	4c 1f 19	jmp $191f			jmp 	gdCheckYRange
.18fe					gdMvDown:
.18fe	ee ee 0b	inc $0bee			inc 	gdYPos 						; decrement Y Pos
.1901	d0 03		bne $1906			bne 	_gdMU1
.1903	ee ef 0b	inc $0bef			inc 	gdYPos+1
.1906					_gdMU1:
.1906	18		clc				clc 								; adjust position by -320
.1907	ad 20 9f	lda $9f20			lda 	$9F20
.190a	69 40		adc #$40			adc 	#64
.190c	8d 20 9f	sta $9f20			sta 	$9F20
.190f	ad 21 9f	lda $9f21			lda 	$9F21
.1912	69 01		adc #$01			adc 	#1
.1914	8d 21 9f	sta $9f21			sta 	$9F21
.1917	ad 22 9f	lda $9f22			lda 	$9F22
.191a	69 00		adc #$00			adc 	#0
.191c	8d 22 9f	sta $9f22			sta 	$9F22
.191f					gdCheckYRange:
.191f	ad ef 0b	lda $0bef			lda 	gdYPos+1
.1922	d0 b1		bne $18d5			bne 	gdmOffScreen
.1924	ad ee 0b	lda $0bee			lda 	gdYPos
.1927	c9 c8		cmp #$c8			cmp 	#200
.1929	b0 aa		bcs $18d5			bcs 	gdmOffScreen
.192b	90 a6		bcc $18d3			bcc 	gdmOnScreen
.192d					gdUpdatePixelOffset:
.192d	ad ed 0b	lda $0bed			lda 	gdXPos+1 					; check X < 320 ($140)
.1930	f0 0b		beq $193d			beq 	_gdUPOCheckY
.1932	c9 02		cmp #$02			cmp 	#2
.1934	b0 13		bcs $1949			bcs 	_gdUPOBad
.1936	ad ec 0b	lda $0bec			lda 	gdXPos
.1939	c9 40		cmp #$40			cmp 	#$40
.193b	b0 0c		bcs $1949			bcs 	_gdUPOBad
.193d					_gdUPOCheckY:
.193d	ad ef 0b	lda $0bef			lda 	gdYPos+1 					; check Y < 200
.1940	d0 0e		bne $1950			bne 	_gdUPOCalculate
.1942	ad ee 0b	lda $0bee			lda 	gdYPos
.1945	c9 c8		cmp #$c8			cmp 	#200
.1947	90 07		bcc $1950			bcc 	_gdUPOCalculate
.1949					_gdUPOBad:
.1949	a9 00		lda #$00			lda 	#0
.194b	8d f0 0b	sta $0bf0			sta 	gdIsPosOkay
.194e	38		sec				sec
.194f	60		rts				rts
.1950					_gdUPOCalculate:
.1950	a9 00		lda #$00			lda 	#0 							; temp0 is LSB of result start as 256 x Y
.1952	85 2a		sta $2a				sta 	temp0
.1954	ad ee 0b	lda $0bee			lda 	gdYPos
.1957	85 2b		sta $2b				sta 	temp0+1
.1959	46 2b		lsr $2b				lsr 	temp0+1 					; / 4 so temp0 is YC x 64
.195b	66 2a		ror $2a				ror 	temp0
.195d	46 2b		lsr $2b				lsr 	temp0+1
.195f	66 2a		ror $2a				ror 	temp0
.1961	ad ee 0b	lda $0bee			lda 	gdYPos 						; add 256 x Y => 320 * Y < 64k
.1964	18		clc				clc
.1965	65 2b		adc $2b				adc 	temp0+1
.1967	85 2b		sta $2b				sta 	temp0+1 					; temp0 = 320 x Y now add X => pixeloffset
.1969	18		clc				clc
.196a	a5 2a		lda $2a				lda 	temp0
.196c	6d ec 0b	adc $0bec			adc 	gdXPos
.196f	8d ea 0b	sta $0bea			sta 	gdPixelOffset
.1972	a5 2b		lda $2b				lda 	temp0+1
.1974	6d ed 0b	adc $0bed			adc 	gdXPos+1
.1977	8d eb 0b	sta $0beb			sta 	gdPixelOffset+1
.197a	a9 01		lda #$01			lda 	#1 							; it's legitimate.
.197c	8d f0 0b	sta $0bf0			sta 	gdIsPosOkay
.197f	20 84 19	jsr $1984			jsr 	gdCopyPosition 				; copy position over
.1982	18		clc				clc
.1983	60		rts				rts
.1984					gdCopyPosition:
.1984	48		pha				pha
.1985	18		clc				clc
.1986	ad e7 0b	lda $0be7			lda 	gdBitmapAddress
.1989	6d ea 0b	adc $0bea			adc 	gdPixelOffset
.198c	8d 20 9f	sta $9f20			sta 	$9F20
.198f	ad e8 0b	lda $0be8			lda 	gdBitmapAddress+1
.1992	6d eb 0b	adc $0beb			adc 	gdPixelOffset+1
.1995	8d 21 9f	sta $9f21			sta 	$9F21
.1998	ad e9 0b	lda $0be9			lda 	gdBitmapAddress+2
.199b	69 00		adc #$00			adc 	#0
.199d	8d 22 9f	sta $9f22			sta 	$9F22
.19a0	68		pla				pla
.19a1	60		rts				rts
.19a2					gdPlotInk:
.19a2	ad f1 0b	lda $0bf1			lda 	gdInk
.19a5	8d 23 9f	sta $9f23			sta 	$9F23
.19a8	60		rts				rts
.19a9					gdPlotPaper:
.19a9	ad f2 0b	lda $0bf2			lda 	gdPaper
.19ac	c9 ff		cmp #$ff			cmp 	#$FF
.19ae	f0 03		beq $19b3			beq 	_gdPPSkip
.19b0	8d 23 9f	sta $9f23			sta 	$9F23
.19b3					_gdPPSkip:
.19b3	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/driver/driver.asm

.0be6					gdEnabled:
>0be6							.fill 	1
.0be7					gdBitmapAddress:
>0be7							.fill 	3
.0bea					gdPixelOffset:
>0bea							.fill 	2
.0bec					gdXPos:
>0bec							.fill 	2
.0bee					gdYPos:
>0bee							.fill 	2
.0bf0					gdIsPosOkay:
>0bf0							.fill 	1
.0bf1					gdInk:
>0bf1							.fill 	1
.0bf2					gdPaper:
>0bf2							.fill 	1
.19b4					gdModeChanged:
.19b4	8a		txa				txa
.19b5	48		pha				pha
.19b6	98		tya				tya
.19b7	48		pha				pha
.19b8	a9 00		lda #$00			lda 	#0 							; zero the enabled flag.
.19ba	8d e6 0b	sta $0be6			sta 	gdEnabled
.19bd	ad 2a 9f	lda $9f2a			lda 	$9F2A 						; requires $40 for H/V Scale
.19c0	c9 40		cmp #$40			cmp 	#$40
.19c2	d0 1f		bne $19e3			bne 	_gdExit
.19c4	ad 2b 9f	lda $9f2b			lda 	$9F2B
.19c7	c9 40		cmp #$40			cmp 	#$40
.19c9	d0 18		bne $19e3			bne 	_gdExit
.19cb	ad 29 9f	lda $9f29			lda 	$9F29 						; read DC_Video, see which layers are enabled.
.19ce	0a		asl a				asl 	a 							;
.19cf	0a		asl a				asl 	a 							; bit 7 now set if layer 1 enabled.
.19d0	10 09		bpl $19db			bpl 	_gdNotLayer1
.19d2	48		pha				pha 								; save A
.19d3	a2 07		ldx #$07			ldx 	#7 							; check offset 7 (e.g. start at $9F34)
.19d5	20 eb 19	jsr $19eb			jsr 	gdCheckBitmap 				; go see if this is a bitmap
.19d8	68		pla				pla 								; restore A
.19d9	b0 08		bcs $19e3			bcs 	_gdExit 					; if successful then exit
.19db					_gdNotLayer1:
.19db	0a		asl a				asl 	a 							; bit 7 now set if layer 0 enabled.
.19dc	10 05		bpl $19e3			bpl 	_gdExit 					; if not enabled, exit
.19de	a2 00		ldx #$00			ldx 	#0 							; check offset 0 (e.g. start at $9F2D)
.19e0	20 eb 19	jsr $19eb			jsr 	gdCheckBitmap 				; go see if this is a bitmap
.19e3					_gdExit:
.19e3	20 08 1a	jsr $1a08			jsr 	gdClearGraphics 			; clear graphics display.
.19e6	68		pla				pla
.19e7	a8		tay				tay
.19e8	68		pla				pla
.19e9	aa		tax				tax
.19ea	60		rts				rts
.19eb					gdCheckBitmap:
.19eb	bd 2d 9f	lda $9f2d,x			lda 	$9F2D,x 					; look at bitmap bit.
.19ee	c9 07		cmp #$07			cmp 	#7 							; must be zero map size, bitmap and 8bpp
.19f0	d0 14		bne $1a06			bne 	_gdCBFail
.19f2	ee e6 0b	inc $0be6			inc 	gdEnabled 					; set the enabled flag to non zero.
.19f5	bd 2f 9f	lda $9f2f,x			lda 	$9F2F,x 					; this is the bitmap address / 2
.19f8	0a		asl a				asl 	a
.19f9	8d e8 0b	sta $0be8			sta 	gdBitmapAddress+1
.19fc	69 00		adc #$00			adc 	#$00 						; set to no move, updated manually.
.19fe	8d e9 0b	sta $0be9			sta 	gdBitmapAddress+2
.1a01	a9 00		lda #$00			lda 	#$00
.1a03	8d e7 0b	sta $0be7			sta 	gdBitmapAddress 			; this is a 17 bit address.
.1a06					_gdCBFail:
.1a06	18		clc				clc
.1a07	60		rts				rts
.1a08					gdClearGraphics:
.1a08	8a		txa				txa
.1a09	48		pha				pha
.1a0a	98		tya				tya
.1a0b	48		pha				pha
.1a0c	ad e6 0b	lda $0be6			lda 	gdEnabled 					; screen enabled
.1a0f	f0 2e		beq $1a3f			beq 	_gdCGExit
.1a11	a9 00		lda #$00			lda 	#0 							; reset position
.1a13	8d f0 0b	sta $0bf0			sta 	gdIsPosOkay 				; not legal position
.1a16	8d ea 0b	sta $0bea			sta 	gdPixelOffset 				; zero pixel offset.
.1a19	8d eb 0b	sta $0beb			sta 	gdPixelOffset+1
.1a1c	8d f2 0b	sta $0bf2			sta 	gdPaper 					; paper black
.1a1f	20 84 19	jsr $1984			jsr 	gdCopyPosition
.1a22	ad 22 9f	lda $9f22			lda 	$9F22 						; make it autoincrement.
.1a25	09 10		ora #$10			ora 	#$10
.1a27	8d 22 9f	sta $9f22			sta 	$9F22
.1a2a	a9 01		lda #$01			lda 	#1 							; ink white
.1a2c	8d f1 0b	sta $0bf1			sta 	gdInk
.1a2f	a0 fa		ldy #$fa			ldy 	#$FA						; 320 x 200 pixels = $FA00
.1a31	a2 00		ldx #$00			ldx 	#0
.1a33	ad f2 0b	lda $0bf2			lda 	gdPaper
.1a36					_gdCGLoop1:
.1a36	8d 23 9f	sta $9f23			sta 	$9F23
.1a39	ca		dex				dex
.1a3a	d0 fa		bne $1a36			bne 	_gdCGLoop1
.1a3c	88		dey				dey
.1a3d	d0 f7		bne $1a36			bne 	_gdCGLoop1
.1a3f					_gdCGExit:
.1a3f	68		pla				pla
.1a40	a8		tay				tay
.1a41	68		pla				pla
.1a42	aa		tax				tax
.1a43	60		rts				rts
.1a44					gdSetInk:
.1a44	8d f1 0b	sta $0bf1			sta 	gdInk
.1a47	60		rts				rts
.1a48					gdSetPaper:
.1a48	8d f2 0b	sta $0bf2			sta 	gdPaper
.1a4b	60		rts				rts
.1a4c					gdSetX:
.1a4c	8d ec 0b	sta $0bec			sta 	gdXPos
.1a4f	8e ed 0b	stx $0bed			stx 	gdXPos+1
.1a52	60		rts				rts
.1a53					gdSetY:
.1a53	8d ee 0b	sta $0bee			sta 	gdYPos
.1a56	8e ef 0b	stx $0bef			stx 	gdYPos+1
.1a59	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/miscellany/clock.asm

.1a5a					Unary_Clock:
.1a5a	a2 0c		ldx #$0c		ldx	#12
.1a5c	20 eb 38	jsr $38eb		jsr	mainHandler
.1a5f	48		pha				pha 								; save stack pos
.1a60	a2 04		ldx #$04		ldx	#4
.1a62	20 eb 38	jsr $38eb		jsr	mainHandler
.1a65	98		tya				tya
.1a66	48		pha				pha
.1a67	20 50 ff	jsr $ff50			jsr 	$FF50
.1a6a	68		pla				pla
.1a6b	a8		tay				tay
.1a6c	68		pla				pla 								; restore, repush, put into X to read offset
.1a6d	48		pha				pha
.1a6e	aa		tax				tax
.1a6f	b5 98		lda $98,x			lda 	esInt0,x 					; must be 0-5
.1a71	c9 06		cmp #$06			cmp 	#6
.1a73	b0 0d		bcs $1a82			bcs 	_UCValue
.1a75	aa		tax				tax 								; index in X and read RTC.
.1a76	b5 02		lda $02,x			lda 	2,x
.1a78	85 32		sta $32				sta 	tempshort
.1a7a	68		pla				pla 								; restore number stack index.
.1a7b	aa		tax				tax
.1a7c	a5 32		lda $32				lda 	tempShort
.1a7e	95 98		sta $98,x			sta 	esInt0,x 					; rest are set up.
.1a80	8a		txa				txa
.1a81	60		rts				rts
.1a82					_UCValue:
.1a82	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.1a84	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/miscellany/joystick.asm

.1a87					Unary_JoyX:
.1a87	38		sec				sec
.1a88	b0 01		bcs $1a8b			bcs 	JoystickRead
.1a8a					Unary_JoyY:
.1a8a	18		clc				clc
.1a8b					JoystickRead:
.1a8b	48		pha				pha 								; save stack position
.1a8c	08		php				php 								; save test flag.
.1a8d	a2 04		ldx #$04		ldx	#4
.1a8f	20 eb 38	jsr $38eb		jsr	mainHandler
.1a92	20 ec 1a	jsr $1aec			jsr 	ReadJoystick 				; read it.
.1a95	28		plp				plp
.1a96	b0 02		bcs $1a9a			bcs 	_JRNoShift 					; if Y, shift right twice so accessing Y buttons
.1a98	4a		lsr a				lsr 	a
.1a99	4a		lsr a				lsr 	a
.1a9a					_JRNoShift:
.1a9a	29 03		and #$03			and 	#3 							; isolate the test bits.
.1a9c	f0 0d		beq $1aab			beq 	JoyReturnA 					; if nothing pressed, return A.
.1a9e	c9 03		cmp #$03			cmp 	#3
.1aa0	f0 07		beq $1aa9			beq 	JoyReturnFalse 				; could be both on a keyboard.
.1aa2	4a		lsr a				lsr 	a 							; bit 0 set, its +1
.1aa3	b0 16		bcs $1abb			bcs 	JoyReturn1
.1aa5					JoyReturnTrue:
.1aa5	a9 ff		lda #$ff			lda 	#$FF
.1aa7	d0 02		bne $1aab			bne 	JoyReturnA
.1aa9					JoyReturnFalse:
.1aa9	a9 00		lda #$00			lda 	#0
.1aab					JoyReturnA:
.1aab	85 32		sta $32				sta 	tempShort 					; return A
.1aad	68		pla				pla
.1aae	aa		tax				tax
.1aaf	a5 32		lda $32				lda 	tempShort
.1ab1	95 98		sta $98,x			sta 	esInt0,x
.1ab3					JoyReturn13:
.1ab3	95 a0		sta $a0,x			sta 	esInt1,x
.1ab5	95 a8		sta $a8,x			sta 	esInt2,x
.1ab7	95 b0		sta $b0,x			sta 	esInt3,x
.1ab9	8a		txa				txa 								; return NSP in A
.1aba	60		rts				rts
.1abb					JoyReturn1:
.1abb	68		pla				pla
.1abc	aa		tax				tax
.1abd	a9 01		lda #$01			lda 	#1
.1abf	95 98		sta $98,x			sta 	esInt0,x
.1ac1	a9 00		lda #$00			lda 	#0
.1ac3	f0 ee		beq $1ab3			beq 	JoyReturn13
.1ac5					Unary_JButton:
.1ac5	48		pha				pha 								; save X on stack, put in X
.1ac6	a2 0c		ldx #$0c		ldx	#12
.1ac8	20 eb 38	jsr $38eb		jsr	mainHandler
.1acb	aa		tax				tax 								; get value to check, push on stack.
.1acc	b5 98		lda $98,x			lda 	esInt0,x
.1ace	c9 04		cmp #$04			cmp 	#4 							; check button 0-3
.1ad0	b0 15		bcs $1ae7			bcs 	_UJBadValue
.1ad2	69 05		adc #$05			adc 	#5 							; four more shifts to get the bit into carry.
.1ad4	48		pha				pha 								; save that shift count on the stack.
.1ad5	a2 04		ldx #$04		ldx	#4
.1ad7	20 eb 38	jsr $38eb		jsr	mainHandler
.1ada	68		pla				pla
.1adb	aa		tax				tax
.1adc	20 ec 1a	jsr $1aec			jsr 	ReadJoystick 				; joystick read
.1adf					_UJShift:
.1adf	4a		lsr a				lsr 	a
.1ae0	ca		dex				dex
.1ae1	d0 fc		bne $1adf			bne 	_UJShift
.1ae3	b0 c0		bcs $1aa5			bcs 	JoyReturnTrue
.1ae5	90 c2		bcc $1aa9			bcc 	JoyReturnFalse
.1ae7					_UJBadValue:
.1ae7	a2 28		ldx #$28			ldx 	#ErrorID_Hardware
.1ae9	20 18 15	jsr $1518		jsr	errorHandler
.1aec					ReadJoystick:
.1aec	8a		txa				txa
.1aed	48		pha				pha
.1aee	98		tya				tya
.1aef	48		pha				pha
.1af0	a9 00		lda #$00			lda 	#0
.1af2	20 56 ff	jsr $ff56			jsr 	$FF56
.1af5	c0 00		cpy #$00			cpy 	#0
.1af7	d0 11		bne $1b0a			bne 	_RJError
.1af9	c9 00		cmp #$00			cmp 	#0 							; bug, returns $00 initially
.1afb	d0 02		bne $1aff			bne 	_RJNoBug
.1afd	a9 ff		lda #$ff			lda 	#$FF
.1aff					_RJNoBug:
.1aff	85 32		sta $32				sta 	tempShort
.1b01	68		pla				pla
.1b02	a8		tay				tay
.1b03	68		pla				pla
.1b04	aa		tax				tax
.1b05	a5 32		lda $32				lda 	tempShort
.1b07	49 ff		eor #$ff			eor 	#$FF 						; active 1 bit.
.1b09	60		rts				rts
.1b0a					_RJError:
.1b0a	a2 28		ldx #$28			ldx 	#ErrorID_Hardware
.1b0c	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/sprites/collide.asm

.0bf3					hitSprite1:
>0bf3							.fill 	1 							; this won't work ... if you nest HIT() which
.0bf4					hitSprite2:
>0bf4							.fill 	1
.0bf5					hitRange:
>0bf5							.fill 	1
.1b0f					FunctionCollide:
.1b0f	48		pha				pha 								; save and put index into X
.1b10	aa		tax				tax
.1b11	a9 00		lda #$00			lda 	#0 							; set hit range to default.
.1b13	8d f5 0b	sta $0bf5			sta 	hitRange
.1b16	20 bb 1b	jsr $1bbb			jsr 	_FCGetSpriteID
.1b19	8d f3 0b	sta $0bf3			sta 	hitSprite1
.1b1c	8a		txa				txa
.1b1d	48		pha				pha
.1b1e	a2 02		ldx #$02		ldx	#2
.1b20	20 eb 38	jsr $38eb		jsr	mainHandler
.1b23	68		pla				pla
.1b24	aa		tax				tax
.1b25	20 bb 1b	jsr $1bbb			jsr 	_FCGetSpriteID
.1b28	8d f4 0b	sta $0bf4			sta 	hitSprite2
.1b2b	b1 28		lda ($28),y			lda 	(codePtr),y 				; is there a third parameter
.1b2d	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.1b2f	f0 13		beq $1b44			beq 	_FCParam2
.1b31	8a		txa				txa
.1b32	48		pha				pha
.1b33	a2 02		ldx #$02		ldx	#2
.1b35	20 eb 38	jsr $38eb		jsr	mainHandler
.1b38	68		pla				pla
.1b39	a2 0c		ldx #$0c		ldx	#12
.1b3b	20 eb 38	jsr $38eb		jsr	mainHandler
.1b3e	aa		tax				tax
.1b3f	b5 98		lda $98,x			lda 	esInt0,x
.1b41	8d f5 0b	sta $0bf5			sta 	hitRange
.1b44					_FCParam2:
.1b44	a2 04		ldx #$04		ldx	#4
.1b46	20 eb 38	jsr $38eb		jsr	mainHandler
.1b49	68		pla				pla 								; set X to point to the stack again.
.1b4a	48		pha				pha
.1b4b	aa		tax				tax
.1b4c	98		tya				tya
.1b4d	48		pha				pha
.1b4e	18		clc				clc 								; do it with the horizontal values.
.1b4f	20 71 1b	jsr $1b71			jsr 	_FCCheck
.1b52	90 0a		bcc $1b5e			bcc 	_FCFail
.1b54	38		sec				sec 								; do it with the vertical values.
.1b55	20 71 1b	jsr $1b71			jsr 	_FCCheck
.1b58	90 04		bcc $1b5e			bcc 	_FCFail
.1b5a	a9 ff		lda #$ff			lda 	#255 						; pass, return -1
.1b5c	d0 02		bne $1b60			bne 	_FCReturnA
.1b5e					_FCFail:
.1b5e	a9 00		lda #$00			lda 	#0 							; return 0, it didn't work.
.1b60					_FCReturnA:
.1b60	85 32		sta $32				sta 	tempShort 					; put result in tempShort
.1b62	68		pla				pla
.1b63	a8		tay				tay
.1b64	68		pla				pla 								; restore stack, return result and exit.
.1b65	aa		tax				tax
.1b66	a5 32		lda $32				lda 	tempShort
.1b68	95 98		sta $98,x			sta 	esInt0,x
.1b6a	95 a0		sta $a0,x			sta 	esInt1,x
.1b6c	95 a8		sta $a8,x			sta 	esInt2,x
.1b6e	95 b0		sta $b0,x			sta 	esInt3,x
.1b70	60		rts				rts
.1b71					_FCCheck:
.1b71	08		php				php 								; save the H/V flag twice
.1b72	08		php				php
.1b73	ad f3 0b	lda $0bf3			lda 	hitSprite1 					; select sprite 1 and read its location
.1b76	20 f9 1c	jsr $1cf9			jsr 	SelectSpriteA 				; into X
.1b79	28		plp				plp
.1b7a	20 5b 1d	jsr $1d5b			jsr 	SpriteReadCoordinate
.1b7d	ad f4 0b	lda $0bf4			lda 	hitSprite2					; now repeat for sprite 2 and location X+1
.1b80	20 f9 1c	jsr $1cf9			jsr 	SelectSpriteA
.1b83	e8		inx				inx
.1b84	28		plp				plp
.1b85	20 5b 1d	jsr $1d5b			jsr 	SpriteReadCoordinate
.1b88	ca		dex				dex
.1b89	38		sec				sec 								; calculate |s1.c-s2.c| put in temp0
.1b8a	b5 98		lda $98,x			lda 	esInt0,x
.1b8c	f5 99		sbc $99,x			sbc 	esInt0+1,x
.1b8e	85 2a		sta $2a				sta 	temp0
.1b90	b5 a0		lda $a0,x			lda 	esInt1,x
.1b92	f5 a1		sbc $a1,x			sbc 	esInt1+1,x
.1b94	85 2b		sta $2b				sta 	temp0+1
.1b96	10 0d		bpl $1ba5			bpl 	_FCCIsPositive
.1b98	38		sec				sec 								; if -ve calculate |difference|
.1b99	a9 00		lda #$00			lda 	#0
.1b9b	e5 2a		sbc $2a				sbc 	temp0
.1b9d	85 2a		sta $2a				sta 	temp0
.1b9f	a9 00		lda #$00			lda 	#0
.1ba1	e5 2b		sbc $2b				sbc 	temp0+1
.1ba3	85 2b		sta $2b				sta 	temp0+1
.1ba5					_FCCIsPositive:
.1ba5	a5 2b		lda $2b				lda 	temp0+1 					; if range >= 256 then definitely fail.
.1ba7	d0 10		bne $1bb9			bne 	_FCCFail
.1ba9	18		clc				clc 								; work out required min distance which is
.1baa	b5 b0		lda $b0,x			lda 	esInt3,x 					; the sum of the half width/heights
.1bac	75 b1		adc $b1,x			adc 	esInt3+1,x
.1bae	ac f5 0b	ldy $0bf5			ldy 	hitRange 					; get the hit range
.1bb1	f0 01		beq $1bb4			beq 	_FCCNoSetRange 				; override if non zero.
.1bb3	98		tya				tya
.1bb4					_FCCNoSetRange:
.1bb4	c5 2a		cmp $2a				cmp 	temp0 						; result is range > distance
.1bb6	f0 01		beq $1bb9			beq 	_FCCFail
.1bb8	60		rts				rts
.1bb9					_FCCFail:
.1bb9	18		clc				clc
.1bba	60		rts				rts
.1bbb					_FCGetSpriteID:
.1bbb	8a		txa				txa
.1bbc	a2 0c		ldx #$0c		ldx	#12
.1bbe	20 eb 38	jsr $38eb		jsr	mainHandler
.1bc1	aa		tax				tax
.1bc2	b5 98		lda $98,x			lda 	esInt0,x
.1bc4	30 01		bmi $1bc7			bmi 	_FCGSValue
.1bc6	60		rts				rts
.1bc7					_FCGSValue:
.1bc7	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.1bc9	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/sprites/sprite.asm

.0bf6					currSprite:
>0bf6							.fill 	2
.1bcc					CommandSprite:
.1bcc	20 ce 1c	jsr $1cce			jsr 	CSCheckOnOff 				; look for TRUE/FALSE
.1bcf	d0 0d		bne $1bde			bne 	_CSCheckClear
.1bd1	ad 29 9f	lda $9f29			lda 	$9F29 						; sprite enable is bit 6.
.1bd4	29 bf		and #$bf			and 	#$BF 						; clear it whatever
.1bd6	90 02		bcc $1bda			bcc 	_CSNotOn 					; if CS turn on, so set it
.1bd8	09 40		ora #$40			ora 	#$40
.1bda					_CSNotOn:
.1bda	8d 29 9f	sta $9f29			sta 	$9F29 						; write it back in new state and exit
.1bdd	60		rts				rts
.1bde					_CSCheckClear:
.1bde	a9 00		lda #$00			lda 	#0 							; no sprite currently selected.
.1be0	8d f7 0b	sta $0bf7			sta 	currSprite+1
.1be3	b1 28		lda ($28),y			lda 	(codePtr),y 				; check for CLEAR
.1be5	c9 e7		cmp #$e7			cmp 	#TKW_CLEAR
.1be7	d0 05		bne $1bee			bne 	_CSCommandLoop 				; not CLEAR, go to main loop
.1be9	20 df 1c	jsr $1cdf			jsr 	CSClearSprites 				; clear all the sprites
.1bec	c8		iny				iny 								; consume CLEAR token and exit.
.1bed	60		rts				rts
.1bee					_CSCommandLoop:
.1bee	20 ce 1c	jsr $1cce			jsr 	CSCheckOnOff 				; check sprite on/off
.1bf1	f0 2c		beq $1c1f			beq 	_CSSetVisibility
.1bf3	b1 28		lda ($28),y			lda 	(codePtr),y 				; get and consume character
.1bf5	c9 80		cmp #$80			cmp 	#TOK_EOL					; EOL exit.
.1bf7	f0 25		beq $1c1e			beq 	_CSExit
.1bf9	c8		iny				iny									; consume it
.1bfa	c9 ca		cmp #$ca			cmp 	#TKW_COLON 					; colon exit
.1bfc	f0 20		beq $1c1e			beq 	_CSExit
.1bfe	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; semantic comma
.1c00	f0 ec		beq $1bee			beq 	_CSCommandLoop
.1c02	c9 da		cmp #$da			cmp		#TKW_IMAGE 					; image ?
.1c04	f0 69		beq $1c6f			beq 	_CSSetImage
.1c06	c9 dc		cmp #$dc			cmp 	#TKW_FLIP 					; flip ?
.1c08	f0 2b		beq $1c35			beq 	_CSSetFlip
.1c0a	c9 ce		cmp #$ce			cmp 	#TKW_TO 					; to ?
.1c0c	f0 46		beq $1c54			beq 	_CSSetPos
.1c0e	88		dey				dey 								; unpick DEY
.1c0f	a9 00		lda #$00			lda 	#0 							; sprite # now at level 0
.1c11	a2 0c		ldx #$0c		ldx	#12
.1c13	20 eb 38	jsr $38eb		jsr	mainHandler
.1c16	a5 98		lda $98				lda 	esInt0
.1c18	20 f9 1c	jsr $1cf9			jsr 	SelectSpriteA
.1c1b	4c ee 1b	jmp $1bee			jmp 	_CSCommandLoop
.1c1e					_CSExit:
.1c1e	60		rts				rts
.1c1f					_CSSetVisibility:
.1c1f	08		php				php 								; save carry
.1c20	a9 06		lda #$06			lda 	#6 							; set pos to offset 6.
.1c22	20 b5 1c	jsr $1cb5			jsr 	SpriteSetTarget
.1c25	ad 23 9f	lda $9f23			lda 	$9F23 						; read it.
.1c28	29 f3		and #$f3			and 	#$F3 						; clear depth bits, disabling it.
.1c2a	28		plp				plp
.1c2b	90 02		bcc $1c2f			bcc 	_CSSetOff 					; check if carry was set
.1c2d	09 0c		ora #$0c			ora 	#$0C 						; otherwise set depth bits to 11, on top.
.1c2f					_CSSetOff:
.1c2f	8d 23 9f	sta $9f23			sta 	$9F23 						; update and loop back
.1c32	4c ee 1b	jmp $1bee			jmp 	_CSCommandLoop
.1c35					_CSSetFlip:
.1c35	a9 00		lda #$00			lda 	#0 							; image # now at level 0
.1c37	a2 0c		ldx #$0c		ldx	#12
.1c39	20 eb 38	jsr $38eb		jsr	mainHandler
.1c3c	a9 06		lda #$06			lda 	#6 							; set sprite position to +6
.1c3e	20 b5 1c	jsr $1cb5			jsr 	SpriteSetTarget
.1c41	a5 98		lda $98				lda 	esInt0 						; flip value & 3 => temp0
.1c43	29 03		and #$03			and 	#3
.1c45	85 2a		sta $2a				sta 	temp0
.1c47	ad 23 9f	lda $9f23			lda 	$9F23 						; update the flip.
.1c4a	29 fc		and #$fc			and 	#$FC
.1c4c	05 2a		ora $2a				ora 	temp0
.1c4e	8d 23 9f	sta $9f23			sta 	$9F23
.1c51	4c ee 1b	jmp $1bee			jmp 	_CSCommandLoop
.1c54					_CSSetPos:
.1c54	a9 00		lda #$00			lda 	#0 							; X now at level 0
.1c56	a2 0a		ldx #$0a		ldx	#10
.1c58	20 eb 38	jsr $38eb		jsr	mainHandler
.1c5b	a2 02		ldx #$02		ldx	#2
.1c5d	20 eb 38	jsr $38eb		jsr	mainHandler
.1c60	a9 01		lda #$01			lda 	#1 							; Y now at level 1
.1c62	a2 0a		ldx #$0a		ldx	#10
.1c64	20 eb 38	jsr $38eb		jsr	mainHandler
.1c67	a2 00		ldx #$00			ldx 	#0 							; coords at 0,1
.1c69	20 17 1d	jsr $1d17			jsr 	SpriteMove 					; move it.
.1c6c	4c ee 1b	jmp $1bee			jmp 	_CSCommandLoop
.1c6f					_CSSetImage:
.1c6f	a9 00		lda #$00			lda 	#0 							; image # now at level 0
.1c71	a2 0c		ldx #$0c		ldx	#12
.1c73	20 eb 38	jsr $38eb		jsr	mainHandler
.1c76	a9 00		lda #$00			lda 	#0 							; set sprite position to +0
.1c78	20 b5 1c	jsr $1cb5			jsr 	SpriteSetTarget
.1c7b	a6 98		ldx $98				ldx 	esInt0 						; get image # into X
.1c7d	bd 3d 0c	lda $0c3d,x			lda 	imageAddr2Low,x 			; copy low address in.
.1c80	8d 23 9f	sta $9f23			sta 	$9F23
.1c83	ee 20 9f	inc $9f20			inc 	$9F20 						; bump to offset 1.
.1c86	bd fd 0b	lda $0bfd,x			lda 	imageInfo,x 				; get 4/8 bit flag from info.
.1c89	29 10		and #$10			and 	#$10
.1c8b	0a		asl a				asl 	a
.1c8c	0a		asl a				asl		a
.1c8d	0a		asl a				asl 	a 							; put into bit 7
.1c8e	1d 7d 0c	ora $0c7d,x			ora 	imageAddr2High,x 			; or high address with it.
.1c91	8d 23 9f	sta $9f23			sta 	$9F23 						; write the high byte.
.1c94	a9 06		lda #$06			lda 	#6
.1c96	20 b5 1c	jsr $1cb5			jsr 	SpriteSetTarget 			; set sprite on.
.1c99	ad 23 9f	lda $9f23			lda 	$9F23
.1c9c	09 0c		ora #$0c			ora 	#$0C
.1c9e	8d 23 9f	sta $9f23			sta 	$9F23
.1ca1	ee 20 9f	inc $9f20			inc 	$9F20 						; point to byte 7 : height/width/palette offset
.1ca4	bd fd 0b	lda $0bfd,x			lda 	imageInfo,x 				; get image info
.1ca7	0a		asl a				asl 	a 							; shift bits 0-3 to 4-7
.1ca8	0a		asl a				asl 	a
.1ca9	0a		asl a				asl 	a
.1caa	0a		asl a				asl 	a
.1cab	b0 02		bcs $1caf			bcs		_CSNoOffset 				; if bit 4 was set don't set the offset.
.1cad	09 0f		ora #$0f			ora 	#$0F 						; set palette offset and write back
.1caf					_CSNoOffset:
.1caf	8d 23 9f	sta $9f23			sta 	$9F23
.1cb2	4c ee 1b	jmp $1bee			jmp 	_CSCommandLoop
.1cb5					SpriteSetTarget:
.1cb5	0d f6 0b	ora $0bf6			ora 	currSprite
.1cb8	8d 20 9f	sta $9f20			sta 	$9F20
.1cbb	ad f7 0b	lda $0bf7			lda 	currSprite+1
.1cbe	f0 09		beq $1cc9			beq 	_SSTNoSet
.1cc0	8d 21 9f	sta $9f21			sta 	$9F21
.1cc3	a9 01		lda #$01			lda 	#$01
.1cc5	8d 22 9f	sta $9f22			sta 	$9F22
.1cc8	60		rts				rts
.1cc9					_SSTNoSet:
.1cc9	a2 27		ldx #$27			ldx 	#ErrorID_NoSprite
.1ccb	20 18 15	jsr $1518		jsr	errorHandler
.1cce					CSCheckOnOff:
.1cce	b1 28		lda ($28),y			lda 	(codePtr),y 				; get and consume it.
.1cd0	c8		iny				iny
.1cd1	c9 ab		cmp #$ab			cmp 	#TKW_FALSE					; return CC/EQ if FALSE
.1cd3	18		clc				clc
.1cd4	f0 08		beq $1cde			beq 	_CSCOExit
.1cd6	c9 aa		cmp #$aa			cmp 	#TKW_TRUE 					; return CS/EQ if TRUE
.1cd8	38		sec				sec 								; return NE if neither.
.1cd9	f0 03		beq $1cde			beq 	_CSCOExit
.1cdb	88		dey				dey 								; undo consume
.1cdc	c9 aa		cmp #$aa			cmp 	#TKW_TRUE 					; and set NE again, DEY will change it.
.1cde					_CSCOExit:
.1cde	60		rts				rts
.1cdf					CSClearSprites:
.1cdf	a9 11		lda #$11			lda 	#$11 						; set address to 1FC00 with single bump
.1ce1	8d 22 9f	sta $9f22			sta 	$9F22
.1ce4	a9 fc		lda #$fc			lda 	#$FC
.1ce6	8d 21 9f	sta $9f21			sta 	$9F21
.1ce9	a9 00		lda #$00			lda 	#0
.1ceb	8d 20 9f	sta $9f20			sta 	$9F20
.1cee					_CSClear:
.1cee	a9 00		lda #$00			lda 	#0 							; set everything to $00
.1cf0	8d 23 9f	sta $9f23			sta 	$9F23
.1cf3	ad 21 9f	lda $9f21			lda 	$9F21
.1cf6	d0 f6		bne $1cee			bne 	_CSClear
.1cf8	60		rts				rts
.1cf9					SelectSpriteA:
.1cf9	85 2a		sta $2a				sta 	temp0
.1cfb	a9 00		lda #$00			lda 	#0
.1cfd	06 2a		asl $2a				asl		temp0 						; multiply A:esInt0 by 8
.1cff	b0 11		bcs $1d12			bcs 	_CSBadValue 				; sprites only 0-127
.1d01	06 2a		asl $2a				asl 	temp0
.1d03	2a		rol a				rol 	a
.1d04	06 2a		asl $2a				asl 	temp0
.1d06	2a		rol a				rol 	a
.1d07	09 fc		ora #$fc			ora 	#$FC 						; MSB of address (barring $01 upper third byte)
.1d09	8d f7 0b	sta $0bf7			sta 	currSprite+1
.1d0c	a5 2a		lda $2a				lda 	temp0 						; LSB of address
.1d0e	8d f6 0b	sta $0bf6			sta 	currSprite+0
.1d11	60		rts				rts
.1d12					_CSBadValue
.1d12	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.1d14	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/sprites/spritemove.asm

.1d17					SpriteMove:
.1d17	98		tya				tya
.1d18	48		pha				pha
.1d19	a9 07		lda #$07			lda 	#7 									; point to height/width byte and read it.
.1d1b	20 b5 1c	jsr $1cb5			jsr 	SpriteSetTarget
.1d1e	ad 23 9f	lda $9f23			lda 	$9F23
.1d21	4a		lsr a				lsr 	a 									; A now contains bits 0-1 (width) 2-3 (height)
.1d22	4a		lsr a				lsr 	a
.1d23	4a		lsr a				lsr 	a
.1d24	4a		lsr a				lsr 	a
.1d25	85 2a		sta $2a				sta 	temp0 								; save these bits so we can work out the centre.
.1d27	a9 02		lda #$02			lda 	#2 									; point to X position.Low
.1d29	20 b5 1c	jsr $1cb5			jsr 	SpriteSetTarget
.1d2c	20 3b 1d	jsr $1d3b			jsr 	SMWritePosition 					; write X position out.
.1d2f	46 2a		lsr $2a				lsr 	temp0 								; shift height bits into 0,1
.1d31	46 2a		lsr $2a				lsr 	temp0
.1d33	e8		inx				inx 										; get the y position
.1d34	20 3b 1d	jsr $1d3b			jsr 	SMWritePosition 					; and write that out.
.1d37	ca		dex				dex 										; fix X and quit.
.1d38	68		pla				pla
.1d39	a8		tay				tay
.1d3a	60		rts				rts
.1d3b					SMWritePosition:
.1d3b	a5 2a		lda $2a				lda 	temp0 								; get dim size
.1d3d	29 03		and #$03			and 	#3 									; in range into Y
.1d3f	a8		tay				tay
.1d40	38		sec				sec
.1d41	b5 98		lda $98,x			lda 	esInt0,x
.1d43	f9 57 1d	sbc $1d57,y			sbc 	SMHalfSize,y
.1d46	8d 23 9f	sta $9f23			sta 	$9F23
.1d49	ee 20 9f	inc $9f20			inc 	$9F20
.1d4c	b5 a0		lda $a0,x			lda 	esInt1,x
.1d4e	e9 00		sbc #$00			sbc 	#0
.1d50	8d 23 9f	sta $9f23			sta 	$9F23
.1d53	ee 20 9f	inc $9f20			inc 	$9F20
.1d56	60		rts				rts
.1d57					SMHalfSize:
>1d57	04 08 10 20					.byte 	4,8,16,32 							; half size each dimension.
.1d5b					SpriteReadCoordinate:
.1d5b	98		tya				tya
.1d5c	48		pha				pha
.1d5d	08		php				php 										; save CTR on stack
.1d5e	a9 07		lda #$07			lda 	#7 									; point to height/width byte and read it.
.1d60	20 b5 1c	jsr $1cb5			jsr 	SpriteSetTarget
.1d63	ad 23 9f	lda $9f23			lda 	$9F23
.1d66	4a		lsr a				lsr 	a 									; A now contains bits 0-1 (width) 2-3 (height)
.1d67	4a		lsr a				lsr 	a
.1d68	4a		lsr a				lsr 	a
.1d69	4a		lsr a				lsr 	a
.1d6a	28		plp				plp 										; restore CTS
.1d6b	08		php				php
.1d6c	90 02		bcc $1d70			bcc 	_SPRCNotY1 							; if it is Y, e.g. CS, shift twice more.
.1d6e	4a		lsr a				lsr 	a
.1d6f	4a		lsr a				lsr 	a
.1d70					_SPRCNotY1:
.1d70	29 03		and #$03			and 	#3 									; point into half width/height
.1d72	a8		tay				tay
.1d73	b9 57 1d	lda $1d57,y			lda 	SMHalfSize,y 						; get half size -> esInt3,x
.1d76	95 b0		sta $b0,x			sta 	esInt3,x
.1d78	28		plp				plp 										; CS Y CC X
.1d79	a9 00		lda #$00			lda 	#0 									; A = 0 X A = 2 Y
.1d7b	2a		rol a				rol 	a
.1d7c	2a		rol a				rol 	a
.1d7d	69 02		adc #$02			adc 	#2 									; A = 2 X A = 4 Y
.1d7f	20 b5 1c	jsr $1cb5			jsr 	SpriteSetTarget 					; set data pointer offset by that
.1d82	18		clc				clc 										; read and unfix centre.
.1d83	ad 23 9f	lda $9f23			lda 	$9F23
.1d86	75 b0		adc $b0,x			adc 	esInt3,x
.1d88	95 98		sta $98,x			sta 	esInt0,x
.1d8a	ee 20 9f	inc $9f20			inc 	$9F20 								; do MSB
.1d8d	ad 23 9f	lda $9f23			lda 	$9F23
.1d90	69 00		adc #$00			adc 	#0
.1d92	29 0f		and #$0f			and 	#$0F 								; sign extend on bit 11.
.1d94	c9 08		cmp #$08			cmp		#$08
.1d96	90 02		bcc $1d9a			bcc 	_SPRCNoSX
.1d98	09 f0		ora #$f0			ora 	#$F0
.1d9a					_SPRCNoSX:
.1d9a	95 a0		sta $a0,x			sta 	esInt1,x
.1d9c	68		pla				pla
.1d9d	a8		tay				tay
.1d9e	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/sprites/spriteutils.asm

.1d9f					Sprite_GetX:
.1d9f	18		clc				clc
.1da0	90 01		bcc $1da3			bcc 	SpriteGetCode
.1da2					Sprite_GetY:
.1da2	38		sec				sec
.1da3					SpriteGetCode:
.1da3	08		php				php 								; CLC : X SEC: Y, save on stack.
.1da4	48		pha				pha 								; save stack position
.1da5	20 c1 1d	jsr $1dc1			jsr 	GetSpriteNumber 			; get # of sprite.
.1da8	a2 04		ldx #$04		ldx	#4
.1daa	20 eb 38	jsr $38eb		jsr	mainHandler
.1dad	68		pla				pla
.1dae	aa		tax				tax
.1daf	28		plp				plp 								; which one ?
.1db0	20 5b 1d	jsr $1d5b			jsr 	SpriteReadCoordinate 		; read appropriate coordinate into esInt0,x
.1db3	b5 a0		lda $a0,x			lda 	esInt1,x 					; get sign bit, sign extend 16->32 bits
.1db5	29 80		and #$80			and 	#$80
.1db7	f0 02		beq $1dbb			beq 	_SGXYPos
.1db9	a9 ff		lda #$ff			lda 	#$FF
.1dbb					_SGXYPos:
.1dbb	95 a8		sta $a8,x			sta 	esInt2,x
.1dbd	95 b0		sta $b0,x			sta 	esInt3,x
.1dbf	8a		txa				txa 								; return NSP in A
.1dc0	60		rts				rts
.1dc1					GetSpriteNumber:
.1dc1	48		pha				pha
.1dc2	a2 0c		ldx #$0c		ldx	#12
.1dc4	20 eb 38	jsr $38eb		jsr	mainHandler
.1dc7	68		pla				pla
.1dc8	aa		tax				tax
.1dc9	b5 98		lda $98,x			lda 	esInt0,x
.1dcb	20 f9 1c	jsr $1cf9			jsr 	SelectSpriteA
.1dce	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/video/mode.asm

.0bf8					currentMode:
>0bf8							.fill 	4
.1dcf					ForceMode0:
.1dcf	a2 00		ldx #$00			ldx 	#0
.1dd1	86 98		stx $98				stx 	esInt0 						; in case we do it.
.1dd3					_FMCheck:
.1dd3	bd 63 1e	lda $1e63,x			lda 	CMModeList,x 				; do we need to switch ?
.1dd6	dd f8 0b	cmp $0bf8,x			cmp 	currentMode,x
.1dd9	d0 13		bne $1dee			bne 	CMSetMode 					; different so switch.
.1ddb	e8		inx				inx
.1ddc	e0 04		cpx #$04			cpx 	#4
.1dde	d0 f3		bne $1dd3			bne 	_FMCheck
.1de0	60		rts				rts
.1de1					CommandMode:
.1de1	a9 00		lda #$00			lda 	#0
.1de3	a2 0a		ldx #$0a		ldx	#10
.1de5	20 eb 38	jsr $38eb		jsr	mainHandler
.1de8	a5 b0		lda $b0				lda 	esInt3
.1dea	29 70		and #$70			and 	#$70
.1dec	d0 06		bne $1df4			bne 	CMNoExpand
.1dee					CMSetMode:
.1dee	20 42 1e	jsr $1e42			jsr 	CMExpandMode
.1df1	4c 08 1e	jmp $1e08			jmp 	CMUpdateMode
.1df4					CMNoExpand:
.1df4	a5 98		lda $98				lda 	esInt0
.1df6	8d f8 0b	sta $0bf8			sta 	currentMode
.1df9	a5 a0		lda $a0				lda 	esInt1
.1dfb	8d f9 0b	sta $0bf9			sta 	currentMode+1
.1dfe	a5 a8		lda $a8				lda 	esInt2
.1e00	8d fa 0b	sta $0bfa			sta 	currentMode+2
.1e03	a5 b0		lda $b0				lda 	esInt3
.1e05	8d fb 0b	sta $0bfb			sta 	currentMode+3
.1e08					CMUpdateMode:
.1e08	a2 11		ldx #$11			ldx 	#$11
.1e0a					_CMClear:
.1e0a	a9 00		lda #$00			lda 	#0
.1e0c	9d 29 9f	sta $9f29,x			sta 	$9F29,X
.1e0f	ca		dex				dex
.1e10	10 f8		bpl $1e0a			bpl 	_CMClear
.1e12	ad fb 0b	lda $0bfb			lda 	currentMode+3 				; get current mode
.1e15	48		pha				pha 								; stack twice.
.1e16	48		pha				pha
.1e17	29 70		and #$70			and 	#$70 						; isolates bits 6,5,4 (sprites,L1 enable,L0 enable)
.1e19	09 01		ora #$01			ora 	#$01 						; turn the output on.
.1e1b	8d 29 9f	sta $9f29			sta 	$9F29 						; write to DC_VIDEO
.1e1e	68		pla				pla 								; get back
.1e1f	20 73 1e	jsr $1e73			jsr 	CMToScale 					; convert lower 2 bits to a scale.
.1e22	8d 2a 9f	sta $9f2a			sta 	$9F2A 						; write to H-Scale
.1e25	68		pla				pla 								; get back, convert bits 2,3 to a scale.
.1e26	4a		lsr a				lsr 	a
.1e27	4a		lsr a				lsr 	a
.1e28	20 73 1e	jsr $1e73			jsr 	CMToScale 					; convert lower 2 bits to a scale.
.1e2b	8d 2b 9f	sta $9f2b			sta 	$9F2B
.1e2e	a2 00		ldx #$00			ldx 	#0 							; this is offset from $9F2D to do L0
.1e30	ad f8 0b	lda $0bf8			lda 	currentMode					; get L0 config byte
.1e33	20 7e 1e	jsr $1e7e			jsr 	CMDecodeLayer 				; and decode layer 0
.1e36	a2 07		ldx #$07			ldx 	#7 							; when we do layer 1, offset by 7 hence starts at $9F34
.1e38	ad f9 0b	lda $0bf9			lda 	currentMode+1
.1e3b	20 7e 1e	jsr $1e7e			jsr 	CMDecodeLayer
.1e3e	20 b4 19	jsr $19b4			jsr 	gdModeChanged 				; check the bitmap status.
.1e41	60		rts				rts
.1e42					CMExpandMode:
.1e42	a5 98		lda $98				lda 	esInt0 						; get mode number
.1e44	c9 04		cmp #$04			cmp 	#(CMEndModeList-CMModeList) >> 2
.1e46	b0 16		bcs $1e5e			bcs 	_CMModeError
.1e48	0a		asl a				asl 	a 							; x 4 into X
.1e49	0a		asl a				asl 	a
.1e4a	aa		tax				tax
.1e4b	98		tya				tya
.1e4c	48		pha				pha
.1e4d	a0 00		ldy #$00			ldy 	#0
.1e4f					_CMEMCopy:
.1e4f	bd 63 1e	lda $1e63,x			lda 	CMModeList,x
.1e52	99 f8 0b	sta $0bf8,y			sta 	currentMode,y
.1e55	e8		inx				inx
.1e56	c8		iny				iny
.1e57	c0 04		cpy #$04			cpy 	#4
.1e59	d0 f4		bne $1e4f			bne 	_CMEMCopy
.1e5b	68		pla				pla
.1e5c	a8		tay				tay
.1e5d	60		rts				rts
.1e5e					_CMModeError:
.1e5e	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.1e60	20 18 15	jsr $1518		jsr	errorHandler
.1e63					CMModeList:
>1e63	00 60 00 20					.dword	$20006000 					; Mode 0 which is the standard 80x60 mode, no sprites
>1e67	00 60 00 25					.dword 	$25006000					; Mode 1 (40x30)
>1e6b	00 60 00 2a					.dword 	$2A006000 					; Mode 2 (20x15)
>1e6f	07 60 00 15					.dword 	$15006007 					; Mode 3 (320x200 256 colour bitmap)
.1e73					CMEndModeList:
.1e73					CMToScale:
.1e73	29 03		and #$03			and 	#3 							; lower 2 bits only
.1e75	aa		tax				tax 								; put in X for counting
.1e76	a9 00		lda #$00			lda 	#0 							; zero result
.1e78	38		sec				sec 								; first time rotate CS in
.1e79					_CMTSLoop:
.1e79	6a		ror a				ror 	a
.1e7a	ca		dex				dex
.1e7b	10 fc		bpl $1e79			bpl 	_CMTSLoop
.1e7d	60		rts				rts
.1e7e					CMDecodeLayer:
.1e7e	48		pha				pha 								; save it.
.1e7f	29 f7		and #$f7			and 	#$F7 						; all the bits except T256C which you can't set using this
.1e81	9d 2d 9f	sta $9f2d,x			sta 	$9F2D,X
.1e84	68		pla				pla 								; get it back
.1e85	29 08		and #$08			and 	#$08 						; the missing bit sets the tile size.
.1e87	f0 02		beq $1e8b			beq 	_CMDLNotSet
.1e89	a9 03		lda #$03			lda 	#$03 						; which sets both lower bits, they're square.
.1e8b					_CMDLNotSet:
.1e8b	e0 00		cpx #$00			cpx 	#0
.1e8d	f0 06		beq $1e95			beq 	_CMDLayer0 					; layer 1 has standard defaults for tile table, e.g. $7C
.1e8f	09 7c		ora #$7c			ora 	#$7C 						; so set those bits and write it out.
.1e91	9d 2f 9f	sta $9f2f,x			sta 	$9F2F,X
.1e94	60		rts				rts
.1e95					_CMDLayer0:
.1e95	09 80		ora #$80			ora 	#$80 						; tile base is $80
.1e97	9d 2f 9f	sta $9f2f,x			sta 	$9F2F,X
.1e9a	60		rts				rts
.1e9b					CommandClg:
.1e9b	20 08 1a	jsr $1a08			jsr 	gdClearGraphics
.1e9e	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/video/palette.asm

.1e9f					CommandPalette:
.1e9f	a9 00		lda #$00			lda 	#0
.1ea1	a2 0c		ldx #$0c		ldx	#12
.1ea3	20 eb 38	jsr $38eb		jsr	mainHandler
.1ea6	a2 02		ldx #$02		ldx	#2
.1ea8	20 eb 38	jsr $38eb		jsr	mainHandler
.1eab	a9 01		lda #$01			lda 	#1
.1ead	a2 08		ldx #$08		ldx	#8
.1eaf	20 eb 38	jsr $38eb		jsr	mainHandler
.1eb2	a5 98		lda $98				lda 	esInt0 					; get palette #
.1eb4	20 c4 1e	jsr $1ec4			jsr 	PointToPaletteA			; point to palette register
.1eb7	a5 99		lda $99				lda 	esInt0+1
.1eb9	8d 23 9f	sta $9f23			sta 	$9F23
.1ebc	a5 a1		lda $a1				lda 	esInt1+1
.1ebe	29 0f		and #$0f			and 	#$0F
.1ec0	8d 23 9f	sta $9f23			sta 	$9F23
.1ec3	60		rts				rts
.1ec4					PointToPaletteA:
.1ec4	0a		asl a				asl 	a 							; x 2 -> LSB
.1ec5	8d 20 9f	sta $9f20			sta 	$9F20
.1ec8	a9 00		lda #$00			lda 	#0 							; carry into A
.1eca	2a		rol a				rol 	a
.1ecb	09 fa		ora #$fa			ora 	#$FA 						; make correct address
.1ecd	8d 21 9f	sta $9f21			sta 	$9F21
.1ed0	a9 11		lda #$11			lda 	#$11 						; $01 and single step => $9F22
.1ed2	8d 22 9f	sta $9f22			sta 	$9F22
.1ed5	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/video/vload.asm

.1ed6					Command_VLoad:
.1ed6	a9 00		lda #$00			lda 	#0 								; string which is the file name
.1ed8	a2 0e		ldx #$0e		ldx	#14
.1eda	20 eb 38	jsr $38eb		jsr	mainHandler
.1edd	a2 01		ldx #$01			ldx 	#1 								; load address at +1.
.1edf	a5 35		lda $35				lda 	lowMemory 						; load it into lowMemory (for now ?)
.1ee1	95 98		sta $98,x			sta 	esInt0,x
.1ee3	a5 36		lda $36				lda 	lowMemory+1
.1ee5	95 a0		sta $a0,x			sta 	esInt1,x
.1ee7	a9 00		lda #$00			lda 	#0
.1ee9	95 a8		sta $a8,x			sta 	esInt2,x
.1eeb	95 b0		sta $b0,x			sta 	esInt3,x
.1eed	a2 0e		ldx #$0e		ldx	#14
.1eef	20 f6 14	jsr $14f6		jsr	deviceHandler
.1ef2	a5 99		lda $99				lda 	esInt0+1 						; (temp0) is where we are decoding from.
.1ef4	85 2a		sta $2a				sta 	temp0
.1ef6	a5 a1		lda $a1				lda 	esInt1+1
.1ef8	85 2b		sta $2b				sta 	temp0+1
.1efa	20 76 1f	jsr $1f76			jsr 	LoadVRAMFile 					; load the VRAM file in.
.1efd	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/video/vpeekpoke.asm

.1efe					Command_VPoke:
.1efe	38		sec				sec 						; one byte , CS
.1eff	b0 01		bcs $1f02			bcs 	CmdVideoWrite
.1f01					Command_VDoke:
.1f01	18		clc				clc 						; two bytes, CC
.1f02					CmdVideoWrite:
.1f02	08		php				php 						; save one or two btes
.1f03	a9 00		lda #$00			lda 	#0  				; get address and value into levels 0,1
.1f05	a2 0a		ldx #$0a		ldx	#10
.1f07	20 eb 38	jsr $38eb		jsr	mainHandler
.1f0a	a2 02		ldx #$02		ldx	#2
.1f0c	20 eb 38	jsr $38eb		jsr	mainHandler
.1f0f	a9 01		lda #$01			lda 	#1
.1f11	a2 0a		ldx #$0a		ldx	#10
.1f13	20 eb 38	jsr $38eb		jsr	mainHandler
.1f16	a2 00		ldx #$00			ldx 	#0
.1f18	20 29 1f	jsr $1f29			jsr 	SetUpTOSVRamAddress ; copy target address to VRAM address registers
.1f1b	a5 99		lda $99				lda 	esInt0+1 			; get MSB of write value
.1f1d	8d 23 9f	sta $9f23			sta 	$9F23
.1f20	28		plp				plp 						; if it was Poke then exit
.1f21	b0 05		bcs $1f28			bcs 	_CVWExit
.1f23	a5 a1		lda $a1				lda 	esInt1+1 			; doke, write the MSB.
.1f25	8d 23 9f	sta $9f23			sta 	$9F23
.1f28					_CVWExit:
.1f28	60		rts				rts
.1f29					SetUpTOSVRamAddress:
.1f29	b5 a8		lda $a8,x			lda 	esInt2,x 			; check range of address, data to $FFFF
.1f2b	29 fe		and #$fe			and 	#$FE
.1f2d	15 b0		ora $b0,x			ora 	esInt3,x
.1f2f	d0 14		bne $1f45			bne 	CVWValue
.1f31	b5 98		lda $98,x			lda 	esInt0,x			; set address up
.1f33	8d 20 9f	sta $9f20			sta 	$9F20
.1f36	b5 a0		lda $a0,x			lda 	esInt1,x
.1f38	8d 21 9f	sta $9f21			sta	 	$9F21
.1f3b	b5 a8		lda $a8,x			lda 	esInt2,x
.1f3d	29 01		and #$01			and 	#1
.1f3f	09 10		ora #$10			ora 	#$10 				; step 1.
.1f41	8d 22 9f	sta $9f22			sta 	$9F22
.1f44	60		rts				rts
.1f45					CVWValue:
.1f45	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.1f47	20 18 15	jsr $1518		jsr	errorHandler
.1f4a					Command_VPeek:
.1f4a	38		sec				sec 						; one byte , CS
.1f4b	b0 01		bcs $1f4e			bcs 	CmdVideoRead
.1f4d					Command_VDeek:
.1f4d	18		clc				clc 						; two bytes, CC
.1f4e					CmdVideoRead:
.1f4e	08		php				php 						; save action on stack.
.1f4f	48		pha				pha 						; save stack position
.1f50	a2 0a		ldx #$0a		ldx	#10
.1f52	20 eb 38	jsr $38eb		jsr	mainHandler
.1f55	a2 04		ldx #$04		ldx	#4
.1f57	20 eb 38	jsr $38eb		jsr	mainHandler
.1f5a	68		pla				pla
.1f5b	aa		tax				tax
.1f5c	20 29 1f	jsr $1f29			jsr 	SetUpTOSVRamAddress	; set up VRAM address.
.1f5f	a9 00		lda #$00			lda 	#0 					; zero upper 3 bytes
.1f61	95 a0		sta $a0,x			sta 	esInt1,x
.1f63	95 a8		sta $a8,x			sta 	esInt2,x
.1f65	95 b0		sta $b0,x			sta 	esInt3,x
.1f67	ad 23 9f	lda $9f23			lda 	$9F23				; copy 1st byte
.1f6a	95 98		sta $98,x			sta 	esInt0,x
.1f6c	28		plp				plp 						; check if DOKE (carry was clear)
.1f6d	b0 05		bcs $1f74			bcs 	_CVRExit
.1f6f	ad 23 9f	lda $9f23			lda 	$9F23 				; copy 2nd byte
.1f72	95 a0		sta $a0,x			sta 	esInt1,x
.1f74					_CVRExit:
.1f74	8a		txa				txa 						; return X position.
.1f75	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/video/vramprocess.asm

.0bfc					compressMode:
>0bfc							.fill 	1
.0bfd					imageInfo:
>0bfd							.fill 	X16MaxImages
.0c3d					imageAddr2Low:
>0c3d							.fill  	X16MaxImages
.0c7d					imageAddr2High:
>0c7d							.fill  	X16MaxImages
.1f76					LoadVRAMFile:
.1f76	8a		txa				txa
.1f77	48		pha				pha
.1f78	98		tya				tya
.1f79	48		pha				pha
.1f7a					_LVRLoop:
.1f7a	20 56 20	jsr $2056			jsr 	LVFGet 						; get the next (never access direct)
.1f7d	c9 80		cmp #$80			cmp 	#$80 						; exit ?
.1f7f	f0 42		beq $1fc3			beq 	_LVRExit
.1f81	b0 5c		bcs $1fdf			bcs 	_LVRLoad 					; load data in ?
.1f83	c9 08		cmp #$08			cmp 	#$08 						; is it set address ?
.1f85	90 11		bcc $1f98			bcc 	_LVRSetAddress
.1f87	c9 0f		cmp #$0f			cmp 	#$0F 						; is it define palette
.1f89	f0 3d		beq $1fc8			beq 	_LVRSetPalette
.1f8b	c9 10		cmp #$10			cmp 	#$10 						; is it set compression type ?
.1f8d	90 2d		bcc $1fbc			bcc 	_LVRSetCompress
.1f8f	c9 64		cmp #$64			cmp 	#$64 						; is it set sprite type.
.1f91	90 60		bcc $1ff3			bcc 	_LVRSetSprite
.1f93	a2 01		ldx #$01			ldx 	#ErrorID_missing
.1f95	20 18 15	jsr $1518		jsr	errorHandler
.1f98					_LVRSetAddress:
.1f98	85 2d		sta $2d				sta 	temp1+1 					; 24 bit in temp1+1/temp1/A
.1f9a	20 56 20	jsr $2056			jsr 	LVFGet
.1f9d	85 2c		sta $2c				sta 	temp1
.1f9f	a9 00		lda #$00			lda 	#0
.1fa1	46 2d		lsr $2d				lsr 	temp1+1 					; / 2 twice.
.1fa3	66 2c		ror $2c				ror 	temp1
.1fa5	6a		ror a				ror		a
.1fa6	46 2d		lsr $2d				lsr 	temp1+1
.1fa8	66 2c		ror $2c				ror 	temp1
.1faa	6a		ror a				ror		a
.1fab	8d 20 9f	sta $9f20			sta 	$9F20 						; set write address with +1 increment
.1fae	a5 2c		lda $2c				lda 	temp1
.1fb0	8d 21 9f	sta $9f21			sta 	$9F21
.1fb3	a5 2d		lda $2d				lda 	temp1+1
.1fb5	09 10		ora #$10			ora 	#$10
.1fb7	8d 22 9f	sta $9f22			sta 	$9F22
.1fba	d0 be		bne $1f7a			bne 	_LVRLoop
.1fbc					_LVRSetCompress:
.1fbc	29 07		and #$07			and 	#7
.1fbe	8d fc 0b	sta $0bfc			sta 	compressMode
.1fc1	10 b7		bpl $1f7a			bpl 	_LVRLoop
.1fc3					_LVRExit:
.1fc3	68		pla				pla
.1fc4	a8		tay				tay
.1fc5	68		pla				pla
.1fc6	aa		tax				tax
.1fc7	60		rts				rts
.1fc8					_LVRSetPalette:
.1fc8	20 56 20	jsr $2056			jsr 	LVFGet 						; get palette id.
.1fcb	20 c4 1e	jsr $1ec4			jsr 	PointToPaletteA 			; in palette.asm
.1fce	20 56 20	jsr $2056			jsr 	LVFGet 						; copy 12 bit palette data in.
.1fd1	8d 23 9f	sta $9f23			sta 	$9F23
.1fd4	20 56 20	jsr $2056			jsr 	LVFGet
.1fd7	29 0f		and #$0f			and 	#$0F
.1fd9	8d 23 9f	sta $9f23			sta 	$9F23
.1fdc	4c 7a 1f	jmp $1f7a			jmp 	_LVRLoop
.1fdf					_LVRLoad:
.1fdf	ae fc 0b	ldx $0bfc			ldx 	compressMode
.1fe2	d0 55		bne $2039			bne 	_LVRNotMode0
.1fe4	29 7f		and #$7f			and 	#$7F 						; count in X (is > 0)
.1fe6					_LVRLCopyX:
.1fe6	aa		tax				tax
.1fe7					_LVRLCopy:
.1fe7	20 56 20	jsr $2056			jsr 	LVFGet 						; write to data.
.1fea	8d 23 9f	sta $9f23			sta 	$9F23
.1fed	ca		dex				dex
.1fee	d0 f7		bne $1fe7			bne 	_LVRLCopy
.1ff0	4c 7a 1f	jmp $1f7a			jmp 	_LVRLoop
.1ff3					_LVRSetSprite:
.1ff3	48		pha				pha 								; save on stack
.1ff4	20 56 20	jsr $2056			jsr 	LVFGet 						; get the sprite number into X
.1ff7	aa		tax				tax
.1ff8	c9 40		cmp #$40			cmp 	#X16MaxImages				; too high ?
.1ffa	b0 38		bcs $2034			bcs 	_LVRSSValue
.1ffc	68		pla				pla 								; restore the data held in the first byte
.1ffd	9d fd 0b	sta $0bfd,x			sta 	imageInfo,x 				; and write into the sprite image table.
.2000					_LVRAlignVRAM:
.2000	ad 20 9f	lda $9f20			lda 	$9F20 						; check VRAM on 32 byte boundary
.2003	29 1f		and #$1f			and 	#$1F
.2005	f0 07		beq $200e			beq 	_LVRAligned
.2007	a9 00		lda #$00			lda 	#$00
.2009	8d 23 9f	sta $9f23			sta 	$9F23
.200c	f0 f2		beq $2000			beq 	_LVRAlignVRAM
.200e					_LVRAligned:
.200e	ad 22 9f	lda $9f22			lda 	$9F22 						; put address/32 in sprite image table
.2011	4a		lsr a				lsr 	a 	 						; first halve into temp1
.2012	ad 21 9f	lda $9f21			lda 	$9F21
.2015	6a		ror a				ror 	a
.2016	85 2d		sta $2d				sta 	temp1+1
.2018	ad 20 9f	lda $9f20			lda 	$9F20
.201b	6a		ror a				ror 	a
.201c	85 2c		sta $2c				sta 	temp1
.201e	a0 04		ldy #$04			ldy 	#4 							; divide it by 16 in temp1
.2020					_LVRShift:
.2020	46 2d		lsr $2d				lsr 	temp1+1
.2022	66 2c		ror $2c				ror 	temp1
.2024	88		dey				dey
.2025	d0 f9		bne $2020			bne 	_LVRShift
.2027	a5 2d		lda $2d				lda 	temp1+1 					; copy result.
.2029	9d 7d 0c	sta $0c7d,x			sta 	imageAddr2High,x
.202c	a5 2c		lda $2c				lda 	temp1
.202e	9d 3d 0c	sta $0c3d,x			sta 	imageAddr2Low,x
.2031	4c 7a 1f	jmp $1f7a			jmp 	_LVRLoop
.2034					_LVRSSValue:
.2034	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.2036	20 18 15	jsr $1518		jsr	errorHandler
.2039					_LVRNotMode0:
.2039	e0 01		cpx #$01			cpx 	#1
.203b	d0 15		bne $2052			bne 	_LVRNotMode1
.203d	29 7f		and #$7f			and 	#$7F 						; drop bit 7
.203f	c9 40		cmp #$40			cmp 	#$40
.2041	90 a3		bcc $1fe6			bcc 	_LVRLCopyX 					; 00-3F use mode 0's copying code.
.2043					_LVRRLEGroup:
.2043	29 3f		and #$3f			and 	#$3F
.2045	aa		tax				tax
.2046	20 56 20	jsr $2056			jsr 	LVFGet
.2049					_LVRLEGroupLoop:
.2049	8d 23 9f	sta $9f23			sta 	$9F23
.204c	ca		dex				dex
.204d	d0 fa		bne $2049			bne 	_LVRLEGroupLoop
.204f	4c 7a 1f	jmp $1f7a			jmp 	_LVRLoop
.2052					_LVRNotMode1:
>2052	db						.byte 	$DB
.2053	4c 52 20	jmp $2052			jmp 	_LVRNotMode1
.2056	84 32		sty $32		LVFGet:	sty 	tempShort
.2058	a0 00		ldy #$00			ldy 	#0
.205a	b1 2a		lda ($2a),y			lda 	(temp0),y
.205c	a4 32		ldy $32				ldy	 	tempShort
.205e	e6 2a		inc $2a				inc 	temp0
.2060	d0 02		bne $2064			bne 	_LVFGExit
.2062	e6 2b		inc $2b				inc 	temp0+1
.2064					_LVFGExit:
.2064	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Return to file: basic.asm

.2065					section_end_extension:
.2065					section_start_floatingpoint:

;******  Processing file: floatingpoint/floatingpoint.asm

.2065					floatingpointHandler:
.2065	a2 03		ldx #$03			ldx 	#ErrorID_NoModule
.2067	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: basic.asm

.206a					section_end_floatingpoint:
.206a					section_start_interaction:

;******  Processing file: interaction/interaction.asm


;******  Processing file: interaction/cold.asm

.206a					ColdStartEntry:
.206a	a2 ff		ldx #$ff			ldx 	#$FF
.206c	9a		txs				txs
.206d	20 f6 20	jsr $20f6			jsr 	ForceStandardMode
.2070	a2 04		ldx #$04		ldx	#4
.2072	20 f6 14	jsr $14f6		jsr	deviceHandler
.2075	a0 ff		ldy #$ff			ldy 	#255
.2077					_CSBanner:
.2077	c8		iny				iny
.2078	b9 9e 20	lda $209e,y			lda 	Intro,y
.207b	f0 14		beq $2091			beq 	_CSStart
.207d	c9 08		cmp #$08			cmp 	#8
.207f	90 08		bcc $2089			bcc 	_CSInk
.2081	a2 16		ldx #$16		ldx	#22
.2083	20 f6 14	jsr $14f6		jsr	deviceHandler
.2086	4c 77 20	jmp $2077			jmp 	_CSBanner
.2089					_CSInk:
.2089	a2 08		ldx #$08		ldx	#8
.208b	20 f6 14	jsr $14f6		jsr	deviceHandler
.208e	4c 77 20	jmp $2077			jmp 	_CSBanner
.2091					_CSStart:
.2091	a2 16		ldx #$16		ldx	#22
.2093	20 eb 38	jsr $38eb		jsr	mainHandler
.2096	a2 06		ldx #$06		ldx	#6
.2098	20 eb 38	jsr $38eb		jsr	mainHandler
.209b	4c b6 21	jmp $21b6			jmp 	WarmStartEntry
>209e	06 2a 2a 2a 20 36 35 30		Intro:	.text 	6,"*** 6502 Extended BASIC ***",13,13
>20a6	32 20 45 78 74 65 6e 64 65 64 20 42 41 53 49 43
>20b6	20 2a 2a 2a 0d 0d
>20bc	03 57 72 69 74 74 65 6e				.text 	3,"Written by Paul Robson 2021",13,13
>20c4	20 62 79 20 50 61 75 6c 20 52 6f 62 73 6f 6e 20
>20d4	32 30 32 31 0d 0d
>20da	02 42 61 73 69 63 20				.text 	2,"Basic "
>20e1	30 2e 32 30					.text "0.20"
>20e5	20 28						.text 	" ("
>20e7	33 30 2d 4d 61 72 2d 32				.text "30-Mar-2021"
>20ef	30 32 31
>20f2	29 0d 0d 00					.text 	")",13,13,0
.20f6					ForceStandardMode:
.20f6	a9 fe		lda #$fe			lda 	#$FE
.20f8	20 69 18	jsr $1869		jsr	extensionHandler
.20fb	60		rts				rts

;******  Return to file: interaction/interaction.asm


;******  Processing file: interaction/delete.asm

.20fc					DeleteLine:
.20fc	ad c8 0a	lda $0ac8			lda 	basePage 					; copy program base to temp0
.20ff	85 2a		sta $2a				sta 	temp0
.2101	ad c9 0a	lda $0ac9			lda 	basePage+1
.2104	85 2b		sta $2b				sta 	temp0+1
.2106	a0 01		ldy #$01	_DLLoop:ldy 	#1 							; see if found line ?
.2108	a5 98		lda $98				lda 	esInt0 						; e.g. the linenumbers match
.210a	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.210c	d0 07		bne $2115			bne 	_DLNext
.210e	c8		iny				iny
.210f	a5 a0		lda $a0				lda 	esInt1
.2111	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.2113	f0 06		beq $211b			beq 	_DLFound
.2115	20 39 21	jsr $2139	_DLNext:jsr 	IAdvanceTemp0 				; shift temp0 forward, return Z flag set if end.
.2118	d0 ec		bne $2106			bne 	_DLLoop
.211a	60		rts				rts
.211b					_DLFound:
.211b	a0 00		ldy #$00			ldy 	#0 							; this is the line to cut, so this offset is the bytes to remove
.211d	b1 2a		lda ($2a),y			lda 	(temp0),y
.211f	a8		tay				tay 								; so we copy from (temp0),y
.2120	a2 00		ldx #$00			ldx 	#0  						; to (temp0,x)
.2122					_DLCopyDown:
.2122	b1 2a		lda ($2a),y			lda 	(temp0),y 					; copy one byte.
.2124	81 2a		sta ($2a,x)			sta 	(temp0,x)
.2126	e6 2a		inc $2a				inc 	temp0 						; advance pointer
.2128	d0 02		bne $212c			bne 	_DLNoCarry
.212a	e6 2b		inc $2b				inc 	temp0+1
.212c					_DLNoCarry:
.212c	a5 2a		lda $2a				lda 	temp0 						; until hit low memory
.212e	c5 35		cmp $35				cmp 	lowMemory 					; which is comfortably after End Program.
.2130	d0 f0		bne $2122			bne 	_DLCopyDown
.2132	a5 2b		lda $2b				lda 	temp0+1
.2134	c5 36		cmp $36				cmp 	lowMemory+1
.2136	d0 ea		bne $2122			bne 	_DLCopyDown
.2138	60		rts				rts
.2139					IAdvanceTemp0:
.2139	84 32		sty $32				sty 	tempShort
.213b	18		clc				clc
.213c	a0 00		ldy #$00			ldy 	#0 							; get offset
.213e	b1 2a		lda ($2a),y			lda 	(temp0),y 					; add to temp0
.2140	65 2a		adc $2a				adc 	temp0
.2142	85 2a		sta $2a				sta 	temp0
.2144	90 02		bcc $2148			bcc 	_IATNoCarry
.2146	e6 2b		inc $2b				inc 	temp0+1
.2148					_IATNoCarry:
.2148	b1 2a		lda ($2a),y			lda 	(temp0),y
.214a	a4 32		ldy $32				ldy 	tempShort
.214c	c9 00		cmp #$00			cmp		#0 							; Z set if program end.
.214e	60		rts				rts

;******  Return to file: interaction/interaction.asm


;******  Processing file: interaction/insert.asm

.214f					InsertLine:
.214f	ad c8 0a	lda $0ac8			lda 	basePage 					; copy program base to temp0
.2152	85 2a		sta $2a				sta 	temp0
.2154	ad c9 0a	lda $0ac9			lda 	basePage+1
.2157	85 2b		sta $2b				sta 	temp0+1
.2159					_ILLoop:
.2159	a0 01		ldy #$01			ldy 	#1
.215b	b1 2a		lda ($2a),y			lda 	(temp0),y
.215d	c5 98		cmp $98				cmp 	esInt0
.215f	c8		iny				iny
.2160	b1 2a		lda ($2a),y			lda 	(temp0),y
.2162	e5 a0		sbc $a0				sbc 	esInt1
.2164	b0 05		bcs $216b			bcs 	_ILFound 					; we know it cannot be equal, it would have been deleted
.2166	20 39 21	jsr $2139			jsr 	IAdvanceTemp0 				; shift temp0 forward, return Z flag set if end.
.2169	d0 ee		bne $2159			bne 	_ILLoop
.216b					_ILFound:
.216b	a5 35		lda $35				lda 	lowMemory 					; shift lowMemory up to make space for it.
.216d	85 2c		sta $2c				sta 	temp1             			; this pointer goes backwards
.216f	a5 36		lda $36				lda 	lowMemory+1
.2171	85 2d		sta $2d				sta 	temp1+1
.2173	ad fa 0d	lda $0dfa			lda 	tokenBufferIndex 			; space to make in Y, 0 in X.
.2176	18		clc				clc 								; add 3 for the line number and offset.
.2177	69 03		adc #$03			adc 	#3 							; tokenbuffer already has $80
.2179	a8		tay				tay
.217a	a2 00		ldx #$00			ldx 	#0
.217c	a1 2c		lda ($2c,x)	_ILMove:lda 	(temp1,x)					; shift up
.217e	91 2c		sta ($2c),y			sta 	(temp1),y
.2180	a5 2c		lda $2c				lda 	temp1 						; check reached the insert point ?
.2182	c5 2a		cmp $2a				cmp 	temp0
.2184	d0 06		bne $218c			bne 	_ILMNext
.2186	a5 2d		lda $2d				lda 	temp1+1
.2188	c5 2b		cmp $2b				cmp 	temp0+1
.218a	f0 0b		beq $2197			beq 	_ILMCopy
.218c					_ILMNext:
.218c	a5 2c		lda $2c				lda 	temp1
.218e	d0 02		bne $2192			bne 	_ILNoBorrow
.2190	c6 2d		dec $2d				dec 	temp1+1
.2192					_ILNoBorrow:
.2192	c6 2c		dec $2c				dec 	temp1
.2194	4c 7c 21	jmp $217c			jmp 	_ILMove 					; and go round again
.2197					_ILMCopy:
.2197	98		tya				tya 								; Y is the offset of the new line.
.2198	81 2a		sta ($2a,x)			sta 	(temp0,x)					; X = 0 still.
.219a	a0 01		ldy #$01			ldy 	#1 							; copy in line number.
.219c	a5 98		lda $98				lda 	esInt0
.219e	91 2a		sta ($2a),y			sta 	(temp0),y
.21a0	c8		iny				iny
.21a1	a5 a0		lda $a0				lda 	esInt1
.21a3	91 2a		sta ($2a),y			sta 	(temp0),y
.21a5	a0 00		ldy #$00			ldy 	#0 							; copy the body in
.21a7					_ILMCopy2:
.21a7	b1 28		lda ($28),y			lda 	(codePtr),y
.21a9	c8		iny				iny
.21aa	c8		iny				iny
.21ab	c8		iny				iny
.21ac	91 2a		sta ($2a),y			sta 	(temp0),y
.21ae	88		dey				dey
.21af	88		dey				dey
.21b0	cc fa 0d	cpy $0dfa			cpy 	tokenBufferIndex
.21b3	d0 f2		bne $21a7			bne 	_ILMCopy2
.21b5	60		rts				rts

;******  Return to file: interaction/interaction.asm


;******  Processing file: interaction/warm.asm

.21b6					WarmStartEntry:
.21b6	a2 ff		ldx #$ff			ldx 	#$FF
.21b8	9a		txs				txs
.21b9	20 f6 20	jsr $20f6			jsr 	ForceStandardMode
.21bc	a9 02		lda #$02			lda 	#2							; green text.
.21be	a2 08		ldx #$08		ldx	#8
.21c0	20 f6 14	jsr $14f6		jsr	deviceHandler
.21c3	a2 0c		ldx #$0c		ldx	#12
.21c5	20 f6 14	jsr $14f6		jsr	deviceHandler
.21c8	a5 2a		lda $2a				lda 	temp0	 					; copy temp0 to codePtr
.21ca	85 28		sta $28				sta 	codePtr
.21cc	a5 2b		lda $2b				lda 	temp0+1
.21ce	85 29		sta $29				sta 	codePtr+1
.21d0	a2 06		ldx #$06		ldx	#6
.21d2	20 f6 14	jsr $14f6		jsr	deviceHandler
.21d5	a2 08		ldx #$08		ldx	#8
.21d7	20 07 44	jsr $4407		jsr	tokeniserHandler
.21da	c9 00		cmp #$00			cmp 	#0
.21dc	f0 25		beq $2203			beq 	WSEError 					; failed (tokenise can fail if it doesn't know a character e.g. |)
.21de	a9 f7		lda #$f7			lda 	#(tokenHeader) & $FF
.21e0	85 28		sta $28				sta 	codePtr
.21e2	a9 0c		lda #$0c			lda 	#(tokenHeader) >> 8
.21e4	85 29		sta $29				sta 	1+(codePtr)
.21e6	ad fa 0c	lda $0cfa			lda 	tokenBuffer 				; is it a blank line, go get another line.
.21e9	c9 80		cmp #$80			cmp 	#$80
.21eb	f0 c9		beq $21b6			beq 	WarmStartEntry
.21ed	29 c0		and #$c0			and 	#$C0						; does it start with a number
.21ef	c9 40		cmp #$40			cmp 	#$40 						; e.g. is it 01xx xxxx
.21f1	f0 15		beq $2208			beq 	HasLineNumber
.21f3	a9 00		lda #$00			lda 	#0 							; zero the token header, so it will look like a
.21f5	8d f7 0c	sta $0cf7			sta 	tokenHeader 				; fake program line.
.21f8	8d f8 0c	sta $0cf8			sta 	tokenHeader+1
.21fb	8d f9 0c	sta $0cf9			sta 	tokenHeader+2
.21fe	a2 18		ldx #$18		ldx	#24
.2200	20 eb 38	jsr $38eb		jsr	mainHandler
.2203					WSEError:
.2203	a2 1e		ldx #$1e			ldx 	#ErrorID_Tokenise
.2205	20 18 15	jsr $1518		jsr	errorHandler
.2208					HasLineNumber:
.2208	a0 03		ldy #$03			ldy 	#3 							; get line number
.220a	a9 00		lda #$00			lda 	#0
.220c	a2 0a		ldx #$0a		ldx	#10
.220e	20 eb 38	jsr $38eb		jsr	mainHandler
.2211	a5 a8		lda $a8				lda 	esInt2		 				; check in range (only 2 bytes)
.2213	05 b0		ora $b0				ora 	esInt3
.2215	d0 ec		bne $2203			bne 	WSEError
.2217	98		tya				tya 								; make codePtr point to code after the line number.
.2218	18		clc				clc 								; by skipping over the tokenised number.
.2219	65 28		adc $28				adc 	codePtr
.221b	85 28		sta $28				sta 	codePtr
.221d	90 02		bcc $2221			bcc		_HLNNoCarry
.221f	e6 29		inc $29				inc 	codePtr+1
.2221					_HLNNoCarry:
.2221	98		tya				tya 								; subtract that offset from the code buffer index
.2222	38		sec				sec
.2223	49 ff		eor #$ff			eor 	#$FF
.2225	6d fa 0d	adc $0dfa			adc 	tokenBufferIndex
.2228	18		clc				clc 								; add space allowing for header & $80 trailer
.2229	69 04		adc #$04			adc 	#4
.222b	8d fa 0d	sta $0dfa			sta 	tokenBufferIndex 			; this is the number of bytes occupied.
.222e	20 fc 20	jsr $20fc			jsr 	DeleteLine 					; always delete the line, it's deleted and reinserted.
.2231					_HLNNoDelete:
.2231	ad fa 0d	lda $0dfa			lda 	tokenBufferIndex 			; if line was empty, then don't insert
.2234	c9 01		cmp #$01			cmp 	#1 							; (the one character is the EOL marker)
.2236	f0 0c		beq $2244			beq 	_HLMEditDone
.2238	a5 36		lda $36				lda 	lowMemory+1 				; is there space, if we allow a little bit of
.223a	18		clc				clc 								; workspace (1k)
.223b	69 04		adc #$04			adc 	#4 							; e.g. 4 x 256
.223d	c5 34		cmp $34				cmp 	highMemory+1
.223f	b0 0b		bcs $224c			bcs 	_HLMMemory 					; nope, won't allowit.
.2241	20 4f 21	jsr $214f			jsr 	InsertLine 					; insert the line in
.2244					_HLMEditDone:
.2244	a2 06		ldx #$06		ldx	#6
.2246	20 eb 38	jsr $38eb		jsr	mainHandler
.2249	4c b6 21	jmp $21b6			jmp 	WarmStartEntry
.224c					_HLMMemory:
.224c	a2 22		ldx #$22			ldx 	#ErrorID_Memory
.224e	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: interaction/interaction.asm

.2251					interactionHandler:
.2251	7c 54 22	jmp ($2254,x)			jmp 	(interactionVectors,x)
.2254					interactionVectors:
>2254	5a 22					.word _DummyControlHandler ; index 0
>2256	6a 20					.word ColdStartEntry       ; index 2
>2258	b6 21					.word WarmStartEntry       ; index 4
.225a					_DummyControlHandler:
.225a	60		rts			rts

;******  Return to file: basic.asm

.225b					section_end_interaction:
.225b					section_start_main:

;******  Processing file: main/main.asm


;******  Processing file: main/commands/compat/readdata.asm

.0cbd					dataPtr:
>0cbd							.fill 	2
.0cbf					dataIndex:
>0cbf							.fill 	1
.225b					CommandRead:
.225b	a2 00		ldx #$00			ldx 	#0 							; get a reference to a variable in stack:0
.225d	20 9e 31	jsr $319e			jsr 	EvaluateReference
.2260	20 a1 22	jsr $22a1			jsr 	SwapDPCP 					; use the data pointer.
.2263	b1 28		lda ($28),y			lda 	(codePtr),y 				; see where it is.
.2265	c8		iny				iny
.2266	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; if it is on a comma, it is in data.
.2268	f0 07		beq $2271			beq 	_CRInData
.226a	88		dey				dey
.226b	a9 d9		lda #$d9			lda 	#TKW_DATA 					; scan forward to a DATA statement.
.226d	aa		tax				tax
.226e	20 a2 29	jsr $29a2			jsr 	ScanForward
.2271					_CRInData:
.2271	a2 01		ldx #$01			ldx 	#1 							; evaluate a value at Stack,1
.2273	20 46 31	jsr $3146			jsr 	Evaluate
.2276	ca		dex				dex 								; and write the value.
.2277	20 f5 24	jsr $24f5			jsr 	WriteValue
.227a	20 a1 22	jsr $22a1			jsr 	SwapDPCP 					; get the code pointer back.
.227d	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows ?
.227f	c8		iny				iny
.2280	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; if comma, another variable
.2282	f0 d7		beq $225b			beq 	CommandRead
.2284	88		dey				dey
.2285	60		rts				rts
.2286					CommandData:
.2286	a9 80		lda #$80			lda 	#TOK_EOL 					; go forward to end of line or colon.
.2288	a2 ca		ldx #$ca			ldx 	#TKW_COLON
.228a	20 a2 29	jsr $29a2			jsr 	ScanForward
.228d	88		dey				dey 								; ending on EOL is a scan issue, as it increments
.228e	60		rts				rts
.228f					CommandRestore:
.228f	ad c8 0a	lda $0ac8			lda 	basePage
.2292	8d bd 0c	sta $0cbd			sta 	dataPtr
.2295	ad c9 0a	lda $0ac9			lda 	basePage+1
.2298	8d be 0c	sta $0cbe			sta 	dataPtr+1
.229b	a9 03		lda #$03			lda 	#3
.229d	8d bf 0c	sta $0cbf			sta 	dataIndex
.22a0	60		rts				rts
.22a1					SwapDPCP:
.22a1	8a		txa				txa
.22a2	48		pha				pha
.22a3	98		tya				tya 								; swap Y, DataIndex
.22a4	ac bf 0c	ldy $0cbf			ldy 	DataIndex
.22a7	8d bf 0c	sta $0cbf			sta 	DataIndex
.22aa	a5 28		lda $28				lda 	codePtr 					; swap code/dataptr low
.22ac	ae bd 0c	ldx $0cbd			ldx 	dataptr
.22af	8d bd 0c	sta $0cbd			sta 	dataPtr
.22b2	86 28		stx $28				stx 	codePtr
.22b4	a5 29		lda $29				lda 	codePtr+1 					; swap code/dataptr high.
.22b6	ae be 0c	ldx $0cbe			ldx 	dataptr+1
.22b9	8d be 0c	sta $0cbe			sta 	dataPtr+1
.22bc	86 29		stx $29				stx 	codePtr+1
.22be	68		pla				pla
.22bf	aa		tax				tax
.22c0	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/compat/transfer.asm

.22c1					CommandGOSUB:
.22c1	20 63 31	jsr $3163			jsr 	EvaluateRootInteger			; get GOSUB line on stack top.
.22c4	a2 04		ldx #$04			ldx 	#4 							; allocate 4 bytes on stack for GOSUB
.22c6	a9 47		lda #$47			lda 	#markerGOSUB  				; <marker> <return addr/offset>
.22c8	20 98 38	jsr $3898			jsr 	RSClaim
.22cb	a9 01		lda #$01			lda 	#1 							; save position at offset 1.
.22cd	20 c4 38	jsr $38c4			jsr 	RSSavePosition
.22d0	a2 00		ldx #$00			ldx 	#0 							; point back at GOSUB line
.22d2	f0 1b		beq $22ef			beq 	GotoTOS 					; and do a GOTO there.
.22d4					CommandRETURN:
.22d4	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.22d6	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.22d8	c9 47		cmp #$47			cmp 	#markerGOSUB 						; does it match
.22da	f0 05		beq $22e1			beq 	_isok
.22dc	a2 0e		ldx #$0e			ldx 	#ErrorID_returnErr
.22de	20 18 15	jsr $1518		jsr	errorHandler
.22e1					_isok:
.22e1	a9 01		lda #$01			lda 	#1
.22e3	20 d7 38	jsr $38d7			jsr 	RSLoadPosition 				; reload the position from offset 1.
.22e6	a9 04		lda #$04			lda 	#4 							; throw 4 bytes from stack.
.22e8	20 ba 38	jsr $38ba			jsr 	RSFree
.22eb	60		rts				rts
.22ec					CommandGOTO:
.22ec	20 63 31	jsr $3163			jsr 	EvaluateRootInteger 		; get GOTO line on stack top.
.22ef					GotoTOS:
.22ef	20 86 2c	jsr $2c86			jsr 	ResetCodeAddress 			; simple search.
.22f2					_GotoSearch:
.22f2	a0 00		ldy #$00			ldy 	#0 							; get offset
.22f4	b1 28		lda ($28),y			lda 	(codePtr),y
.22f6	f0 21		beq $2319			beq 	_GotoError 					; not found.
.22f8	c8		iny				iny									; check LSB match
.22f9	b1 28		lda ($28),y			lda 	(codePtr),y
.22fb	d5 98		cmp $98,x			cmp 	esInt0,x
.22fd	d0 07		bne $2306			bne 	_GotoNext
.22ff	c8		iny				iny
.2300	b1 28		lda ($28),y			lda 	(codePtr),y
.2302	d5 a0		cmp $a0,x			cmp 	esInt1,x
.2304	f0 10		beq $2316			beq 	_GotoFound
.2306					_GotoNext:
.2306	a0 00		ldy #$00			ldy 	#0 							; go next line
.2308	b1 28		lda ($28),y			lda 	(codePtr),y
.230a	18		clc				clc
.230b	65 28		adc $28				adc 	codePtr
.230d	85 28		sta $28				sta 	codePtr
.230f	90 e1		bcc $22f2			bcc 	_GotoSearch
.2311	e6 29		inc $29				inc 	codePtr+1
.2313	4c f2 22	jmp $22f2			jmp 	_GotoSearch
.2316					_GotoFound:
.2316	a0 03		ldy #$03			ldy 	#3 							; continue from that line
.2318	60		rts				rts
.2319					_GotoError:
.2319	a2 0c		ldx #$0c			ldx 	#ErrorID_LineNumber
.231b	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/commands/io/input.asm

=32					MaxInputSize = 32
.0cc0					InputBuffer:
>0cc0							.fill 	MaxInputSize+1
.231e					Command_Input:
.231e	b1 28		lda ($28),y			lda 	(codePtr),y 			; see what's next.
.2320	c8		iny				iny
.2321	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 				; ignore commas.
.2323	f0 f9		beq $231e			beq 	Command_Input
.2325	88		dey				dey 							; undo consume
.2326	c9 ca		cmp #$ca			cmp 	#TKW_COLON
.2328	f0 54		beq $237e			beq 	_CIExit 				; : or EOL, exit
.232a	c9 80		cmp #$80			cmp 	#TOK_EOL
.232c	f0 50		beq $237e			beq 	_CIExit
.232e	c9 40		cmp #$40			cmp 	#$40 					; variable ?
.2330	90 12		bcc $2344			bcc 	_CIVariable
.2332	c9 85		cmp #$85			cmp 	#TOK_STR 				; if not quoted string syntax error.
.2334	d0 43		bne $2379			bne 	_CISyntax
.2336	a2 00		ldx #$00			ldx 	#0
.2338	20 5a 31	jsr $315a			jsr 	EvaluateString 			; evaluate and print string
.233b	20 57 25	jsr $2557			jsr 	TOSToTemp0
.233e	20 4d 24	jsr $244d			jsr 	PrintString
.2341	4c 1e 23	jmp $231e			jmp 	Command_Input
.2344					_CIVariable:
.2344	a2 00		ldx #$00			ldx 	#0 						; evaluate a reference.
.2346	20 9e 31	jsr $319e			jsr 	EvaluateReference  		; this is where its going
.2349					_CIRetry:
.2349	a9 3f		lda #$3f			lda 	#"?"					; print prompt
.234b	a2 14		ldx #$14		ldx	#20
.234d	20 f6 14	jsr $14f6		jsr	deviceHandler
.2350	98		tya				tya
.2351	48		pha				pha
.2352	20 92 23	jsr $2392			jsr 	InputString 			; input a string (manually)
.2355	a2 01		ldx #$01			ldx 	#1
.2357	20 7f 23	jsr $237f			jsr 	BufferToStackX 			; make stack,x ref input string.
.235a	a5 90		lda $90				lda 	esType 					; if target type numeric
.235c	29 40		and #$40			and 	#$40 					; then convert to number
.235e	d0 11		bne $2371			bne 	_CIWrite
.2360	a2 01		ldx #$01			ldx 	#1
.2362	20 57 25	jsr $2557			jsr 	TOSToTemp0 				; string address in temp0, goes here.
.2365	a9 0a		lda #$0a			lda 	#10
.2367	20 6b 36	jsr $366b			jsr 	MInt32FromString 		; convert it back from a string.
.236a	68		pla				pla
.236b	a8		tay				tay
.236c	b0 03		bcs $2371			bcs 	_CIWrite 				; successfully converted.
.236e	18		clc				clc 							; default fail FP conversion
.236f	90 d8		bcc $2349			bcc		_CIRetry				; failed, try again.
.2371					_CIWrite:
.2371	a2 00		ldx #$00			ldx 	#0
.2373	20 f5 24	jsr $24f5			jsr 	WriteValue
.2376	4c 1e 23	jmp $231e			jmp 	Command_Input
.2379					_CISyntax:
.2379	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.237b	20 18 15	jsr $1518		jsr	errorHandler
.237e					_CIExit:
.237e	60		rts				rts
.237f					BufferToStackX:
.237f	a9 c0		lda #$c0			lda 	#InputBuffer & $FF
.2381	95 98		sta $98,x			sta 	esInt0,x
.2383	a9 0c		lda #$0c			lda 	#InputBuffer >> 8
.2385	95 a0		sta $a0,x			sta 	esInt1,x
.2387	a9 00		lda #$00			lda 	#0
.2389	95 a8		sta $a8,x			sta 	esInt2,x
.238b	95 b0		sta $b0,x			sta 	esInt3,x
.238d	a9 40		lda #$40			lda 	#$40
.238f	95 90		sta $90,x			sta 	esType,x
.2391	60		rts				rts
.2392					InputString:
.2392	a9 00		lda #$00			lda 	#0
.2394	8d c0 0c	sta $0cc0			sta 	InputBuffer
.2397					_InputLoop:
.2397	a2 02		ldx #$02		ldx	#2
.2399	20 f6 14	jsr $14f6		jsr	deviceHandler
.239c	a2 0a		ldx #$0a		ldx	#10
.239e	20 f6 14	jsr $14f6		jsr	deviceHandler
.23a1	c9 00		cmp #$00			cmp 	#0
.23a3	f0 f2		beq $2397			beq 	_InputLoop
.23a5	c9 08		cmp #$08			cmp 	#8
.23a7	f0 19		beq $23c2			beq 	_InputBackspace
.23a9	c9 0d		cmp #$0d			cmp 	#13
.23ab	f0 21		beq $23ce			beq 	_InputExit
.23ad	ae c0 0c	ldx $0cc0			ldx 	InputBuffer
.23b0	e0 20		cpx #$20			cpx 	#MaxInputSize 			; too many characters
.23b2	f0 e3		beq $2397			beq 	_InputLoop
.23b4	9d c1 0c	sta $0cc1,x			sta 	InputBuffer+1,x 		; write char
.23b7	ee c0 0c	inc $0cc0			inc 	InputBuffer 			; advance count.
.23ba					_InputPrintLoop:
.23ba	a2 14		ldx #$14		ldx	#20
.23bc	20 f6 14	jsr $14f6		jsr	deviceHandler
.23bf	4c 97 23	jmp $2397			jmp	 	_InputLoop
.23c2					_InputBackspace:
.23c2	ad c0 0c	lda $0cc0			lda 	InputBuffer 			; at start
.23c5	f0 d0		beq $2397			beq 	_InputLoop
.23c7	ce c0 0c	dec $0cc0			dec 	InputBuffer
.23ca	a9 08		lda #$08			lda 	#8
.23cc	d0 ec		bne $23ba			bne 	_InputPrintLoop
.23ce					_InputExit:
.23ce	a2 06		ldx #$06		ldx	#6
.23d0	20 f6 14	jsr $14f6		jsr	deviceHandler
.23d3	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/io/print.asm

.0ce1					lastPrintToken:
>0ce1							.fill 	1
.23d4					Command_Print:
.23d4	a9 00		lda #$00			lda 	#0 							; clear LPT to a non token
.23d6	8d e1 0c	sta $0ce1			sta 	lastPrintToken
.23d9	88		dey				dey
.23da					_PrintLoopSkip:
.23da	c8		iny				iny
.23db					_PrintLoop:
.23db	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows
.23dd	c9 80		cmp #$80			cmp 	#TOK_EOL  					; done if end of line or colon
.23df	f0 5b		beq $243c			beq 	_PrintExit
.23e1	c9 ca		cmp #$ca			cmp 	#TKW_COLON
.23e3	f0 57		beq $243c			beq 	_PrintExit
.23e5	8d e1 0c	sta $0ce1			sta 	lastPrintToken 				; update Last print token, so we check ; and ,
.23e8	c9 cc		cmp #$cc			cmp 	#TKW_SEMICOLON 				; ignore semicolon
.23ea	f0 ee		beq $23da			beq 	_PrintLoopSkip
.23ec	c9 cd		cmp #$cd			cmp 	#TKW_QUOTE 					; ' is new line
.23ee	f0 3c		beq $242c			beq	 	_PrintNewLine
.23f0	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; , is print tab
.23f2	f0 40		beq $2434			beq 	_PrintTab
.23f4	20 44 31	jsr $3144			jsr 	EvaluateRoot 				; evaluate something at the root
.23f7	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.23f9	85 2a		sta $2a				sta 	temp0
.23fb	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.23fd	85 2b		sta $2b				sta 	1+(temp0)
.23ff	a5 90		lda $90				lda 	esType 						; get type
.2401	f0 15		beq $2418			beq		_PrintInteger
.2403	4a		lsr a				lsr 	a 							; check for floating point
.2404	b0 08		bcs $240e			bcs 	_PrintFloat
.2406					_PrintString:
.2406	a2 00		ldx #$00			ldx 	#0 							; bottom string to temp0
.2408	20 57 25	jsr $2557			jsr 	TOSToTemp0
.240b	4c 26 24	jmp $2426			jmp 	_PrintTemp0 				; print no leading space.
.240e					_PrintFloat:
.240e	a9 00		lda #$00			lda 	#0 							; stack level.
.2410	a2 16		ldx #$16		ldx	#22
.2412	20 65 20	jsr $2065		jsr	floatingpointHandler
.2415	4c 1f 24	jmp $241f			jmp 	_PrintSpaceTemp0
.2418					_PrintInteger:
.2418	a9 8a		lda #$8a			lda 	#10+$80 					; base 10 signed
.241a	a2 00		ldx #$00			ldx 	#0 							; bottom stack element
.241c	20 53 37	jsr $3753			jsr 	MInt32ToString				; convert to text
.241f					_PrintSpaceTemp0:
.241f	a9 20		lda #$20			lda 	#32
.2421	a2 14		ldx #$14		ldx	#20
.2423	20 f6 14	jsr $14f6		jsr	deviceHandler
.2426					_PrintTemp0:
.2426	20 4d 24	jsr $244d			jsr 	PrintString
.2429	4c db 23	jmp $23db			jmp 	_PrintLoop
.242c					_PrintNewLine:
.242c	a2 06		ldx #$06		ldx	#6
.242e	20 f6 14	jsr $14f6		jsr	deviceHandler
.2431	4c da 23	jmp $23da			jmp 	_PrintLoopSkip
.2434					_PrintTab:
.2434	a2 1a		ldx #$1a		ldx	#26
.2436	20 f6 14	jsr $14f6		jsr	deviceHandler
.2439	4c da 23	jmp $23da			jmp 	_PrintLoopSkip
.243c					_PrintExit:
.243c	ad e1 0c	lda $0ce1			lda		lastPrintToken 				; check last token
.243f	c9 cc		cmp #$cc			cmp 	#TKW_SEMICOLON 				; if , or ; do not print NL
.2441	f0 09		beq $244c			beq 	_PrintExit2
.2443	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.2445	f0 05		beq $244c			beq 	_PrintExit2
.2447	a2 06		ldx #$06		ldx	#6
.2449	20 f6 14	jsr $14f6		jsr	deviceHandler
.244c					_PrintExit2:
.244c	60		rts				rts
.244d					PrintString:
.244d	8a		txa				txa
.244e	48		pha				pha
.244f	98		tya				tya
.2450	48		pha				pha
.2451	a0 00		ldy #$00			ldy 	#0							; get length
.2453	b1 2a		lda ($2a),y			lda 	(temp0),y
.2455	aa		tax				tax 								; into X
.2456	e0 00		cpx #$00	_PSLoop:cpx 	#0 							; finished ?
.2458	f0 10		beq $246a			beq 	_PSExit
.245a	ca		dex				dex
.245b	8a		txa				txa
.245c	48		pha				pha
.245d	c8		iny				iny
.245e	b1 2a		lda ($2a),y			lda 	(temp0),y
.2460	a2 14		ldx #$14		ldx	#20
.2462	20 f6 14	jsr $14f6		jsr	deviceHandler
.2465	68		pla				pla
.2466	aa		tax				tax
.2467	4c 56 24	jmp $2456			jmp 	_PSLoop
.246a					_PSExit:
.246a	68		pla				pla
.246b	a8		tay				tay
.246c	68		pla				pla
.246d	aa		tax				tax
.246e	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/io/text.asm

.246f					Command_CLS:
.246f	a2 04		ldx #$04		ldx	#4
.2471	20 f6 14	jsr $14f6		jsr	deviceHandler
.2474	60		rts				rts
.2475					Command_Ink:
.2475	a2 00		ldx #$00			ldx 	#0
.2477	20 6d 31	jsr $316d			jsr 	EvaluateSmallInteger
.247a	a2 08		ldx #$08		ldx	#8
.247c	20 f6 14	jsr $14f6		jsr	deviceHandler
.247f	60		rts				rts
.2480					Command_Paper:
.2480	a2 00		ldx #$00			ldx 	#0
.2482	20 6d 31	jsr $316d			jsr 	EvaluateSmallInteger
.2485	a2 12		ldx #$12		ldx	#18
.2487	20 f6 14	jsr $14f6		jsr	deviceHandler
.248a	60		rts				rts
.248b					Command_Locate:
.248b	a2 00		ldx #$00			ldx 	#0
.248d	20 6d 31	jsr $316d			jsr 	EvaluateSmallInteger
.2490	20 7d 38	jsr $387d			jsr 	CheckComma
.2493	e8		inx				inx
.2494	20 6d 31	jsr $316d			jsr 	EvaluateSmallInteger
.2497	98		tya				tya
.2498	48		pha				pha
.2499	a4 99		ldy $99				ldy 	esInt0+1
.249b	a5 98		lda $98				lda 	esInt0
.249d	a2 10		ldx #$10		ldx	#16
.249f	20 f6 14	jsr $14f6		jsr	deviceHandler
.24a2	68		pla				pla
.24a3	a8		tay				tay
.24a4	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/io/vdu.asm

.24a5					Command_VDU:
.24a5	20 63 31	jsr $3163			jsr 	EvaluateRootInteger 			; get integer at root.
.24a8	a5 98		lda $98				lda 	esInt0
.24aa	a2 14		ldx #$14		ldx	#20
.24ac	20 f6 14	jsr $14f6		jsr	deviceHandler
.24af					_CVNext:
.24af	b1 28		lda ($28),y			lda 	(codePtr),y 					; what follows ?
.24b1	c8		iny				iny
.24b2	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 						; comma, do again
.24b4	f0 ef		beq $24a5			beq 	Command_VDU
.24b6	c9 cc		cmp #$cc			cmp 	#TKW_SEMICOLON 					; semicolon, print MSB
.24b8	d0 0a		bne $24c4			bne 	_CVExit
.24ba	a5 a0		lda $a0				lda 	esInt1
.24bc	a2 14		ldx #$14		ldx	#20
.24be	20 f6 14	jsr $14f6		jsr	deviceHandler
.24c1	4c af 24	jmp $24af			jmp 	_CVNext
.24c4	88		dey		_CVExit:dey
.24c5	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/link.asm


;******  Return to file: main/main.asm


;******  Processing file: main/commands/misc/assert.asm

.24c6					Command_Assert:
.24c6	20 63 31	jsr $3163			jsr 	EvaluateRootInteger 		; what is being asserted.
.24c9	20 24 38	jsr $3824			jsr 	MInt32Zero 					; is it true ?
.24cc	f0 01		beq $24cf			beq 	_CAError
.24ce	60		rts				rts
.24cf					_CAError:
.24cf	a2 04		ldx #$04			ldx 	#ErrorID_Assert
.24d1	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/commands/misc/dim.asm

.24d4					Command_Dim:
.24d4	a2 04		ldx #$04		ldx	#4
.24d6	20 d8 47	jsr $47d8		jsr	variableHandler
.24d9	b1 28		lda ($28),y			lda 	(codePtr),y 				; see what follows.
.24db	c8		iny				iny
.24dc	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; comma follows, go back and do next
.24de	f0 f4		beq $24d4			beq 	Command_Dim
.24e0	88		dey				dey 								; unpick get
.24e1	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/misc/let.asm

.24e2					CommandLet:
.24e2	a2 00		ldx #$00			ldx 	#0  						; get address to write.
.24e4	20 9e 31	jsr $319e			jsr 	EvaluateReference
.24e7	a9 8d		lda #$8d			lda 	#TKW_EQUAL 					; check for equals
.24e9	20 65 38	jsr $3865			jsr 	CheckToken
.24ec	e8		inx				inx 								; do RHS
.24ed	20 46 31	jsr $3146			jsr 	Evaluate 					; evaluate and dereference
.24f0	ca		dex				dex
.24f1	20 f5 24	jsr $24f5			jsr 	WriteValue 					; write it out
.24f4	60		rts				rts
.24f5					WriteValue:
.24f5	98		tya				tya
.24f6	48		pha				pha
.24f7	20 57 25	jsr $2557			jsr 	TOSToTemp0 					; set temp0 to point to target address.
.24fa	b5 90		lda $90,x			lda 	esType,x 					; check the string flags match
.24fc	55 91		eor $91,x			eor 	esType+1,x 					; one string, one number causes an error.
.24fe	29 40		and #$40			and 	#$40
.2500	d0 50		bne $2552			bne		_WVType
.2502	a0 01		ldy #$01			ldy 	#1 							; for string, copy 0 and 1.
.2504	b5 90		lda $90,x			lda 	esType,x 					; check for string assignment
.2506	29 40		and #$40			and 	#$40
.2508	d0 1f		bne $2529			bne 	_WVCopyString
.250a	b5 90		lda $90,x			lda 	esType,x 					; check both are integer.
.250c	15 91		ora $91,x			ora 	esType+1,x
.250e	4a		lsr a				lsr 	a
.250f	90 22		bcc $2533			bcc 	_WVCopyData4 				; copy 4 data bytes.
.2511	b5 90		lda $90,x			lda 	esType,x
.2513	4a		lsr a				lsr 	a
.2514	90 3c		bcc $2552			bcc 	_WVType
.2516	e8		inx				inx 								; force the value being written to be a float.
.2517	20 a8 2d	jsr $2da8			jsr 	BPMakeFloat
.251a	ca		dex				dex
.251b	20 57 25	jsr $2557			jsr 	TOSToTemp0 					; set Temp0 to write address
.251e	e8		inx				inx
.251f	8a		txa				txa
.2520	a2 22		ldx #$22		ldx	#34
.2522	20 65 20	jsr $2065		jsr	floatingpointHandler
.2525	aa		tax				tax
.2526	4c 4f 25	jmp $254f			jmp 	_WVCopyExit
.2529					_WVCopyString:
.2529	8a		txa				txa
.252a	a2 10		ldx #$10		ldx	#16
.252c	20 a8 3b	jsr $3ba8		jsr	stringHandler
.252f	aa		tax				tax
.2530	4c 4f 25	jmp $254f			jmp 	_WVCopyExit
.2533					_WVCopyData4:
.2533	b5 90		lda $90,x			lda 	esType,x 					; is the int ref a byte ref ?
.2535	29 20		and #$20			and 	#$20 						; (e.g. is bit 5 set)
.2537	d0 10		bne $2549			bne 	_WVCopyData1
.2539	a0 03		ldy #$03			ldy 	#3
.253b	b5 b1		lda $b1,x			lda 	esInt3+1,x
.253d	91 2a		sta ($2a),y			sta 	(temp0),y
.253f	88		dey				dey
.2540	b5 a9		lda $a9,x			lda 	esInt2+1,x
.2542	91 2a		sta ($2a),y			sta 	(temp0),y
.2544	88		dey				dey
.2545	b5 a1		lda $a1,x			lda 	esInt1+1,x
.2547	91 2a		sta ($2a),y			sta 	(temp0),y
.2549					_WVCopyData1:
.2549	a0 00		ldy #$00			ldy 	#0
.254b	b5 99		lda $99,x			lda 	esInt0+1,x
.254d	91 2a		sta ($2a),y			sta 	(temp0),y
.254f					_WVCopyExit:
.254f	68		pla				pla
.2550	a8		tay				tay
.2551	60		rts				rts
.2552					_WVType:
.2552	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.2554	20 18 15	jsr $1518		jsr	errorHandler
.2557					TOSToTemp0:
.2557	b5 98		lda $98,x			lda 	esInt0,x
.2559	85 2a		sta $2a				sta 	temp0
.255b	b5 a0		lda $a0,x			lda 	esInt1,x
.255d	85 2b		sta $2b				sta 	temp0+1
.255f	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/misc/poke.asm

.2560					Command_Poke:
.2560	a9 01		lda #$01			lda 	#1
.2562	d0 06		bne $256a			bne 	PokeGeneral
.2564					Command_Doke:
.2564	a9 02		lda #$02			lda 	#2
.2566	d0 02		bne $256a			bne 	PokeGeneral
.2568					Command_Loke:
.2568	a9 03		lda #$03			lda 	#3
.256a					PokeGeneral:
.256a	48		pha				pha 								; save id (PDL = 123)
.256b	20 63 31	jsr $3163			jsr 	EvaluateRootInteger 		; target address
.256e	20 7d 38	jsr $387d			jsr	 	CheckComma
.2571	e8		inx				inx
.2572	20 65 31	jsr $3165			jsr 	EvaluateInteger 			; what value to POKE ?
.2575	ca		dex				dex
.2576	20 57 25	jsr $2557			jsr 	TOSToTemp0 					; temp0 points to the target address
.2579	84 32		sty $32				sty 	tempShort 					; save Y
.257b	68		pla				pla 								; get copy type (1-3) and dispatch
.257c	aa		tax				tax
.257d	ca		dex				dex
.257e	f0 14		beq $2594			beq 	_Poke1
.2580	ca		dex				dex
.2581	f0 0b		beq $258e			beq 	_Poke2
.2583	a0 03		ldy #$03			ldy 	#3							; put 4 bytes
.2585	a5 b1		lda $b1				lda 	esInt3+1
.2587	91 2a		sta ($2a),y			sta 	(temp0),y
.2589	88		dey				dey
.258a	a5 a9		lda $a9				lda 	esInt2+1
.258c	91 2a		sta ($2a),y			sta 	(temp0),y
.258e					_Poke2:
.258e	a0 01		ldy #$01			ldy 	#1
.2590	a5 a1		lda $a1				lda 	esInt1+1
.2592	91 2a		sta ($2a),y			sta 	(temp0),y
.2594					_Poke1:
.2594	a0 00		ldy #$00			ldy 	#0
.2596	a5 99		lda $99				lda 	esInt0+1
.2598	91 2a		sta ($2a),y			sta 	(temp0),y
.259a	a4 32		ldy $32				ldy 	tempShort 					; restore Y and exit
.259c	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/misc/rem.asm

.259d					Command_Rem:
.259d					Command_Rem2:
.259d	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows
.259f	c9 85		cmp #$85			cmp 	#TOK_STR 					; if it is a string then skip it.
.25a1	d0 06		bne $25a9			bne 	_CRNotString
.25a3	c8		iny				iny
.25a4	98		tya				tya
.25a5	38		sec				sec
.25a6	71 28		adc ($28),y			adc 	(codePtr),y 				; get string size, add to Y, +1 for the length
.25a8	a8		tay				tay
.25a9					_CRNotString:
.25a9	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/misc/stopend.asm

.25aa					CommandStop:
.25aa	a2 06		ldx #$06			ldx 	#ErrorID_Stop
.25ac	20 18 15	jsr $1518		jsr	errorHandler
.25af					CommandEnd:
.25af	4c e6 38	jmp $38e6			jmp 	WarmStart
.25b2					CommandXemu:
.25b2	4c ff ff	jmp $ffff			jmp 	$FFFF 						; fudge to crash out of emulator
.25b5					AdvanceNextLine:
.25b5	a0 00		ldy #$00			ldy 	#0 							; get offset
.25b7	b1 28		lda ($28),y			lda 	(codePtr),y
.25b9	18		clc				clc 								; add to codePtr
.25ba	65 28		adc $28				adc 	codePtr
.25bc	85 28		sta $28				sta 	codePtr
.25be	90 02		bcc $25c2			bcc 	_ANLNoCarry
.25c0	e6 29		inc $29				inc 	codePtr+1
.25c2					_ANLNoCarry:
.25c2	b1 28		lda ($28),y			lda 	(codePtr),y 				; if end of program (or was just stand alone.
.25c4	f0 e9		beq $25af			beq 	CommandEnd 					; execute END
.25c6	a0 03		ldy #$03			ldy 	#3 							; start of tokens on line.
.25c8	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/for.asm

.25c9					Command_FOR:
.25c9	a9 46		lda #$46			lda 	#markerFOR 					; allocate the space and set the marker
.25cb	a2 0b		ldx #$0b			ldx 	#11
.25cd	20 98 38	jsr $3898			jsr 	RSClaim
.25d0	20 e2 24	jsr $24e2			jsr 	CommandLET 					; do the same as LET FOR [a = 4]
.25d3	a5 90		lda $90				lda 	esType 						; check type should be integer reference.
.25d5	c9 80		cmp #$80			cmp 	#$80 						; we do not do FOR floats.
.25d7	d0 4c		bne $2625			bne 	_CFType
.25d9	a9 ce		lda #$ce			lda 	#TKW_TO 					; check TO present.
.25db	20 65 38	jsr $3865			jsr 	CheckToken
.25de	a2 01		ldx #$01			ldx 	#1 							; keep the variable address in stack 0
.25e0	20 65 31	jsr $3165			jsr 	EvaluateInteger				; get terminal value in stack 1
.25e3	98		tya				tya
.25e4	48		pha				pha
.25e5	a0 04		ldy #$04			ldy 	#4
.25e7	a5 98		lda $98				lda		esInt0 						; copy the address of the index variable into 4 and 5
.25e9	91 37		sta ($37),y			sta 	(rsPointer),y
.25eb	c8		iny				iny
.25ec	a5 a0		lda $a0				lda		esInt1
.25ee	91 37		sta ($37),y			sta 	(rsPointer),y
.25f0	c8		iny				iny
.25f1	a9 01		lda #$01			lda 	#1  						; the default step in 6, (-128 .. 127 only)
.25f3	91 37		sta ($37),y			sta 	(rsPointer),y
.25f5	c8		iny				iny
.25f6	a5 99		lda $99				lda		esInt0+1 					; terminal value in 7 to 11.
.25f8	91 37		sta ($37),y			sta 	(rsPointer),y
.25fa	c8		iny				iny
.25fb	a5 a1		lda $a1				lda		esInt1+1
.25fd	91 37		sta ($37),y			sta 	(rsPointer),y
.25ff	c8		iny				iny
.2600	a5 a9		lda $a9				lda		esInt2+1
.2602	91 37		sta ($37),y			sta 	(rsPointer),y
.2604	c8		iny				iny
.2605	a5 b1		lda $b1				lda		esInt3+1
.2607	91 37		sta ($37),y			sta 	(rsPointer),y
.2609	68		pla				pla
.260a	a8		tay				tay
.260b	b1 28		lda ($28),y			lda 	(codePtr),y 				; followed by STEP.
.260d	c9 cf		cmp #$cf			cmp 	#TKW_STEP
.260f	d0 0e		bne $261f			bne 	_CFDone
.2611	c8		iny				iny									; skip over step.
.2612	20 65 31	jsr $3165			jsr 	EvaluateInteger 			; get step
.2615	98		tya				tya
.2616	48		pha				pha
.2617	b5 98		lda $98,x			lda 	esInt0,x 					; copy it into step (bit lazy here)
.2619	a0 06		ldy #$06			ldy 	#6
.261b	91 37		sta ($37),y			sta 	(rsPointer),y
.261d	68		pla				pla
.261e	a8		tay				tay
.261f					_CFDone:
.261f	a9 01		lda #$01			lda 	#1
.2621	20 c4 38	jsr $38c4			jsr 	RSSavePosition 				; save position.
.2624	60		rts				rts
.2625					_CFType:
.2625	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.2627	20 18 15	jsr $1518		jsr	errorHandler
.262a					Command_NEXT:
.262a	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.262c	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.262e	c9 46		cmp #$46			cmp 	#markerFOR 						; does it match
.2630	f0 05		beq $2637			beq 	_isok
.2632	a2 10		ldx #$10			ldx 	#ErrorID_nextErr
.2634	20 18 15	jsr $1518		jsr	errorHandler
.2637					_isok:
.2637	b1 28		lda ($28),y			lda 	(codePtr),y 				; is it NEXT <index>
.2639	c9 40		cmp #$40			cmp 	#$40 						; e.g. a variable follows 00-3F
.263b	b0 18		bcs $2655			bcs 	_CNNoIndex
.263d	a2 00		ldx #$00			ldx 	#0 							; start on stack
.263f	20 9e 31	jsr $319e			jsr 	EvaluateReference 			; this is the variable/parameter to localise.
.2642	98		tya				tya
.2643	48		pha				pha
.2644	a0 04		ldy #$04			ldy 	#4 							; check same variable as that stored at +4,+5
.2646	b1 37		lda ($37),y			lda 	(rsPointer),y
.2648	d5 98		cmp $98,x			cmp 	esInt0,x
.264a	d0 76		bne $26c2			bne 	_CNBadIndex
.264c	c8		iny				iny
.264d	b1 37		lda ($37),y			lda 	(rsPointer),y
.264f	d5 a0		cmp $a0,x			cmp 	esInt1,x
.2651	d0 6f		bne $26c2			bne 	_CNBadIndex
.2653	68		pla				pla
.2654	a8		tay				tay
.2655					_CNNoIndex:
.2655	98		tya				tya
.2656	48		pha				pha
.2657	a0 04		ldy #$04			ldy 	#4 							; make temp0 point to the index
.2659	b1 37		lda ($37),y			lda 	(rsPointer),y
.265b	85 2a		sta $2a				sta 	temp0
.265d	c8		iny				iny
.265e	b1 37		lda ($37),y			lda 	(rsPointer),y
.2660	85 2b		sta $2b				sta 	temp0+1
.2662	c8		iny				iny
.2663	a2 00		ldx #$00			ldx 	#0 							; X is the sign extend part of the step.
.2665	b1 37		lda ($37),y			lda 	(rsPointer),y 				; get the step.
.2667	85 2f		sta $2f				sta 	temp2+1 					; save for later.
.2669	10 01		bpl $266c			bpl 	_CNSignX
.266b	ca		dex				dex  								; X = $FF
.266c					_CNSignX:
.266c	18		clc				clc 								; add to the LSB
.266d	a0 00		ldy #$00			ldy 	#0
.266f	71 2a		adc ($2a),y			adc 	(temp0),y
.2671	91 2a		sta ($2a),y			sta 	(temp0),y
.2673					_CNPropogate:
.2673	c8		iny				iny  								; add the sign extended in X to the rest.
.2674	8a		txa				txa
.2675	71 2a		adc ($2a),y			adc 	(temp0),y
.2677	91 2a		sta ($2a),y			sta 	(temp0),y
.2679	c8		iny				iny
.267a	8a		txa				txa
.267b	71 2a		adc ($2a),y			adc 	(temp0),y
.267d	91 2a		sta ($2a),y			sta 	(temp0),y
.267f	c8		iny				iny
.2680	8a		txa				txa
.2681	71 2a		adc ($2a),y			adc 	(temp0),y
.2683	91 2a		sta ($2a),y			sta 	(temp0),y
.2685	18		clc				clc 								; point temp1 to the terminal value stored in the stack.
.2686	a5 37		lda $37				lda 	rsPointer
.2688	69 07		adc #$07			adc 	#7
.268a	85 2c		sta $2c				sta 	temp1
.268c	a9 00		lda #$00			lda 	#0
.268e	85 2e		sta $2e				sta 	temp2 						; clear temp2, which is the OR of all the subtractions.
.2690	a8		tay				tay 								; and clear the Y register again.
.2691	65 38		adc $38				adc 	rsPointer+1
.2693	85 2d		sta $2d				sta 	temp1+1
.2695	38		sec				sec 								; calculate current - limit oring interim values.
.2696	20 ce 26	jsr $26ce			jsr 	_CNCompare 					; each of these does a byte.
.2699	20 ce 26	jsr $26ce			jsr 	_CNCompare 					; we calculate the OR of all these subtractions.
.269c	20 ce 26	jsr $26ce			jsr 	_CNCompare 					; and the carry of the subtraction.
.269f	20 ce 26	jsr $26ce			jsr 	_CNCompare
.26a2	50 02		bvc $26a6			bvc 	_CNNoOverflow 				; converts to a signed comparison on the sign bit.
.26a4	49 80		eor #$80			eor 	#$80
.26a6					_CNNoOverflow:
.26a6	a4 2f		ldy $2f				ldy 	temp2+1						; get step back
.26a8	30 1d		bmi $26c7			bmi 	_CNCheckDownto
.26aa	c9 00		cmp #$00			cmp 	#0
.26ac	30 0c		bmi $26ba			bmi 	_CNLoopRound 				; loop round if < =
.26ae	a5 2e		lda $2e				lda 	temp2
.26b0	f0 08		beq $26ba			beq 	_CNLoopRound
.26b2					_CNLoopExit:
.26b2	68		pla				pla
.26b3	a8		tay				tay
.26b4	a9 0b		lda #$0b			lda 	#11
.26b6	20 ba 38	jsr $38ba			jsr 	RSFree
.26b9	60		rts				rts
.26ba					_CNLoopRound:
.26ba	68		pla				pla
.26bb	a8		tay				tay
.26bc	a9 01		lda #$01			lda 	#1
.26be	20 d7 38	jsr $38d7			jsr 	RSLoadPosition				; go back to the loop top
.26c1	60		rts				rts
.26c2					_CNBadIndex:
.26c2	a2 13		ldx #$13			ldx 	#ErrorID_BadIndex
.26c4	20 18 15	jsr $1518		jsr	errorHandler
.26c7					_CNCheckDownto:
.26c7	c9 00		cmp #$00			cmp 	#0
.26c9	10 ef		bpl $26ba			bpl 	_CNLoopRound
.26cb	4c b2 26	jmp $26b2			jmp 	_CNLoopExit
.26ce					_CNCompare:
.26ce	b1 2a		lda ($2a),y			lda 	(temp0),y 					; do the subtraction - compare don't care about answer
.26d0	f1 2c		sbc ($2c),y			sbc 	(temp1),y
.26d2	05 2e		ora $2e				ora 	temp2 						; Or into temp2 (does not affect carry)
.26d4	85 2e		sta $2e				sta 	temp2
.26d6	c8		iny				iny
.26d7	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/if.asm

.26d8					CommandIf:
.26d8	20 63 31	jsr $3163			jsr 	EvaluateRootInteger 		; get what's being tested.
.26db	b1 28		lda ($28),y			lda 	(codePtr),y 				; check for IF .. THEN or IF .. GOTO which are single lines.
.26dd	c9 91		cmp #$91			cmp 	#TKW_GOTO
.26df	f0 04		beq $26e5			beq 	_IfSimple
.26e1	c9 a1		cmp #$a1			cmp 	#TKW_THEN
.26e3	d0 1b		bne $2700			bne 	_IfComplex
.26e5					_IfSimple:
.26e5	20 24 38	jsr $3824			jsr 	MInt32Zero					; check if TOS zero
.26e8	f0 10		beq $26fa			beq 	_IfEOL 						; go to next line.
.26ea	b1 28		lda ($28),y			lda 	(codePtr),y 				; get and skip token.
.26ec	c8		iny				iny
.26ed	c9 91		cmp #$91			cmp 	#TKW_GOTO 					; was it if GOTO ?
.26ef	f0 0c		beq $26fd			beq 	_IfGoto 					; do the Goto code
.26f1	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows the THEN ?
.26f3	29 c0		and #$c0			and 	#$C0 						; check $40-$7F
.26f5	c9 40		cmp #$40			cmp 	#$40 						; e.g. number IF x = 0 THEN 170
.26f7	f0 04		beq $26fd			beq 	_IfGoto
.26f9	60		rts				rts 								; else continue on this line.
.26fa					_IfEOL:
.26fa	4c b5 25	jmp $25b5			jmp 	AdvanceNextLine 			; go to next line
.26fd					_IfGoto:
.26fd	4c ec 22	jmp $22ec			jmp 	CommandGoto
.2700					_IfComplex:
.2700	20 24 38	jsr $3824			jsr 	MInt32Zero 					; is it true ?
.2703	f0 01		beq $2706			beq 	_IFSkip 					; if non-zero then skip to ELSE/ENDIF
.2705	60		rts				rts 								; else continue.
.2706					_IFSkip:
.2706	a9 d6		lda #$d6			lda	 	#TKW_ELSE 					; test failed, go to ELSE or ENDIF whichever comes first.
.2708	a2 a2		ldx #$a2			ldx 	#TKW_ENDIF
.270a	4c a2 29	jmp $29a2			jmp		ScanForward
.270d					Command_ELSE:
.270d	a2 a2		ldx #$a2			ldx 	#TKW_ENDIF
.270f	8a		txa				txa
.2710	4c a2 29	jmp $29a2			jmp		ScanForward
.2713					Command_ENDIF:
.2713	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/local.asm

.0ce2					storeSize:
>0ce2							.fill 	1
.2714					CommandLocal:
.2714	a2 00		ldx #$00			ldx 	#0
.2716	20 32 27	jsr $2732			jsr 	LocaliseVariable 			; localise one.
.2719					_CLCheckNext:
.2719	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows ?
.271b	c8		iny				iny
.271c	c9 8d		cmp #$8d			cmp 	#TKW_EQUAL 					; something local "x = 2" ?
.271e	f0 06		beq $2726			beq 	_CLAssignment
.2720	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; comma try again.
.2722	f0 f0		beq $2714			beq 	CommandLocal
.2724	88		dey				dey
.2725	60		rts				rts
.2726					_CLAssignment:
.2726	a2 01		ldx #$01			ldx 	#1
.2728	20 46 31	jsr $3146			jsr 	Evaluate 					; evaluate RHS
.272b	ca		dex				dex
.272c	20 f5 24	jsr $24f5			jsr 	WriteValue
.272f	4c 19 27	jmp $2719			jmp 	_CLCheckNext
.2732					LocaliseVariable:
.2732	b1 28		lda ($28),y			lda 	(codePtr),y 				; check it's a variable.
.2734	c9 40		cmp #$40			cmp 	#$40
.2736	b0 67		bcs $279f			bcs 	_LVSyntax
.2738	8a		txa				txa 								; get the address of that variable.
.2739	a2 02		ldx #$02		ldx	#2
.273b	20 d8 47	jsr $47d8		jsr	variableHandler
.273e	aa		tax				tax
.273f	8a		txa				txa
.2740	48		pha				pha
.2741	98		tya				tya
.2742	48		pha				pha
.2743	20 57 25	jsr $2557			jsr 	TOSToTemp0 					; the address of the variable is now in temp0.
.2746	b5 90		lda $90,x			lda 	esType,x 					; get the type
.2748	0a		asl a				asl 	a
.2749	10 16		bpl $2761			bpl 	_LVPushNumber
.274b	a0 00		ldy #$00			ldy 	#0 							; put address of data in temp1
.274d	b1 2a		lda ($2a),y			lda 	(temp0),y
.274f	c8		iny				iny
.2750	85 2c		sta $2c				sta 	temp1
.2752	b1 2a		lda ($2a),y			lda 	(temp0),y
.2754	85 2d		sta $2d				sta 	temp1+1
.2756	a0 00		ldy #$00			ldy 	#0 	 						; get length
.2758	b1 2c		lda ($2c),y			lda 	(temp1),y
.275a	aa		tax				tax 								; into X
.275b	e8		inx				inx 								; +1 for length.
.275c	a9 24		lda #$24			lda 	#markerString
.275e	4c 76 27	jmp $2776			jmp 	_LVWriteFrame
.2761					_LVPushNumber:
.2761	a5 2a		lda $2a				lda 	temp0 						; storage address and data source are the same
.2763	85 2c		sta $2c				sta 	temp1
.2765	a5 2b		lda $2b				lda 	temp0+1
.2767	85 2d		sta $2d				sta 	temp1+1
.2769	b5 90		lda $90,x			lda 	esType,x 					; put float flag into carry.
.276b	4a		lsr a				lsr 	a
.276c	a9 25		lda #$25			lda 	#markerInt 					; get marker and size.
.276e	a2 04		ldx #$04			ldx 	#VarISize
.2770	90 04		bcc $2776			bcc 	_LVIsInteger
.2772	a9 23		lda #$23			lda 	#markerFloat
.2774	a2 06		ldx #$06			ldx 	#VarFSize
.2776					_LVIsInteger:
.2776					_LVWriteFrame:
.2776	8e e2 0c	stx $0ce2			stx 	storeSize 					; number of bytes to copy from (temp0)
.2779	e8		inx				inx 								; allocate 3 bytes, 2 for the address, 1 for the marker.
.277a	e8		inx				inx
.277b	e8		inx				inx
.277c	20 98 38	jsr $3898			jsr 	RSClaim 					; create the stack frame.
.277f	a5 2a		lda $2a				lda 	temp0 						; copy the target address to slots 1 & 2
.2781	a0 01		ldy #$01			ldy 	#1
.2783	91 37		sta ($37),y			sta 	(rsPointer),y
.2785	c8		iny				iny
.2786	a5 2b		lda $2b				lda 	temp0+1
.2788	91 37		sta ($37),y			sta 	(rsPointer),y
.278a	a0 00		ldy #$00			ldy 	#0
.278c					_LVCopyData:
.278c	b1 2c		lda ($2c),y			lda 	(temp1),y 					; get data from source, temp1
.278e	c8		iny				iny 								; write allowing for the header bit.
.278f	c8		iny				iny
.2790	c8		iny				iny
.2791	91 37		sta ($37),y			sta 	(rsPointer),y
.2793	88		dey				dey
.2794	88		dey				dey
.2795	ce e2 0c	dec $0ce2			dec 	storeSize 					; do it storesize times
.2798	d0 f2		bne $278c			bne 	_LVCopyData
.279a	68		pla				pla
.279b	a8		tay				tay
.279c	68		pla				pla
.279d	aa		tax				tax
.279e	60		rts				rts
.279f					_LVSyntax:
.279f	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.27a1	20 18 15	jsr $1518		jsr	errorHandler
.27a4					RestoreLocals:
.27a4	a2 00		ldx #$00			ldx 	#0
.27a6	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.27a8	c9 40		cmp #$40			cmp	 	#64
.27aa	90 01		bcc $27ad			bcc 	_RLocal
.27ac	60		rts				rts
.27ad					_RLocal:
.27ad	8a		txa				txa
.27ae	48		pha				pha
.27af	98		tya				tya
.27b0	48		pha				pha
.27b1	a0 01		ldy #$01			ldy 	#1 							; copy target address to temp0
.27b3	b1 37		lda ($37),y			lda 	(rsPointer),y
.27b5	85 2a		sta $2a				sta 	temp0
.27b7	c8		iny				iny
.27b8	b1 37		lda ($37),y			lda 	(rsPointer),y
.27ba	85 2b		sta $2b				sta 	temp0+1
.27bc	a0 00		ldy #$00			ldy 	#0 							; get type back.
.27be	b1 37		lda ($37),y			lda 	(rsPointer),y
.27c0	c9 24		cmp #$24			cmp 	#markerString 				; string is ... different :)
.27c2	f0 28		beq $27ec			beq 	_RString
.27c4	a2 04		ldx #$04			ldx		#VARISize 					; size integer
.27c6	c9 25		cmp #$25			cmp 	#markerInt
.27c8	f0 02		beq $27cc			beq 	_RIsInteger
.27ca	a2 06		ldx #$06			ldx 	#VARFSize 					; size float
.27cc					_RIsInteger:
.27cc	8a		txa				txa
.27cd	48		pha				pha
.27ce	a0 03		ldy #$03			ldy 	#3							; start size to copy back from pointer.
.27d0					_RCopyBack:
.27d0	b1 37		lda ($37),y			lda 	(rsPointer),y
.27d2	88		dey				dey
.27d3	88		dey				dey
.27d4	88		dey				dey
.27d5	91 2a		sta ($2a),y			sta 	(temp0),y
.27d7	c8		iny				iny
.27d8	c8		iny				iny
.27d9	c8		iny				iny
.27da	c8		iny				iny
.27db	ca		dex				dex
.27dc	d0 f2		bne $27d0			bne 	_RCopyBack
.27de	68		pla				pla 								; get size add 3
.27df	18		clc				clc
.27e0	69 03		adc #$03			adc 	#3 							; (2 for address one for marker)
.27e2					_RRestoreAAndLoop:
.27e2	20 ba 38	jsr $38ba			jsr 	RSFree
.27e5	68		pla				pla
.27e6	a8		tay				tay
.27e7	68		pla				pla
.27e8	aa		tax				tax
.27e9	4c a4 27	jmp $27a4			jmp 	RestoreLocals 				; go see if there are any more locals.
.27ec					_RString:
.27ec	a2 00		ldx #$00			ldx 	#0
.27ee	a0 01		ldy #$01			ldy 	#1 							; set up for a string write.
.27f0	b1 37		lda ($37),y			lda 	(rsPointer),y
.27f2	95 98		sta $98,x			sta 	esInt0,x
.27f4	c8		iny				iny
.27f5	b1 37		lda ($37),y			lda 	(rsPointer),y
.27f7	95 a0		sta $a0,x			sta 	esInt1,x
.27f9	18		clc				clc
.27fa	a5 37		lda $37				lda 	rsPointer
.27fc	69 03		adc #$03			adc 	#3
.27fe	95 99		sta $99,x			sta 	esInt0+1,x
.2800	a5 38		lda $38				lda 	rsPointer+1
.2802	69 00		adc #$00			adc 	#0
.2804	95 a1		sta $a1,x			sta 	esInt1+1,x
.2806	8a		txa				txa
.2807	a2 10		ldx #$10		ldx	#16
.2809	20 a8 3b	jsr $3ba8		jsr	stringHandler
.280c	a0 03		ldy #$03			ldy 	#3 							; get string length
.280e	b1 37		lda ($37),y			lda 	(rsPointer),y
.2810	18		clc				clc
.2811	69 04		adc #$04			adc 	#4 							; add 4 (pointer, marker, length) to restore.
.2813	4c e2 27	jmp $27e2			jmp 	_RRestoreAAndLoop

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/proc.asm

.0ce3					paramCount:
>0ce3							.fill 	1
.2816					CallProc:
.2816	20 9e 28	jsr $289e			jsr 	FindProcedure 				; find procedure, put in temp0. A contains name length.
.2819	48		pha				pha 								; save length on stack
.281a	85 32		sta $32				sta 	tempShort 					; save length in tempShort
.281c	a5 2b		lda $2b				lda 	temp0+1 					; save procedure target on stack.
.281e	48		pha				pha
.281f	a5 2a		lda $2a				lda 	temp0
.2821	48		pha				pha
.2822	98		tya				tya 								; calculate Y + length
.2823	18		clc				clc
.2824	65 32		adc $32				adc 	tempShort
.2826	a8		tay				tay
.2827	a2 00		ldx #$00			ldx 	#0 							; where the first parameter goes - 1
.2829					_CallProcEvalParams:
.2829	e8		inx				inx
.282a	b1 28		lda ($28),y			lda 	(codePtr),y 				; do we have ) , e.g. the end of the parameters ?
.282c	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.282e	f0 0b		beq $283b			beq 	_CPDoneParams
.2830	20 46 31	jsr $3146			jsr 	Evaluate 					; evaluate a parameter
.2833	b1 28		lda ($28),y			lda 	(codePtr),Y 				; get what's next, preconsume
.2835	c8		iny				iny
.2836	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; if comma, go get another parameter
.2838	f0 ef		beq $2829			beq 	_CallProcEvalParams
.283a	88		dey				dey 								; undo consumption.
.283b					_CPDoneParams:
.283b	20 70 38	jsr $3870			jsr 	CheckRightParen 			; check closing parenthesis.
.283e	8e e3 0c	stx $0ce3			stx 	paramCount 					; store parameter count+1
.2841	a2 04		ldx #$04			ldx 	#4							; make space on stack
.2843	a9 50		lda #$50			lda 	#markerPROC
.2845	20 98 38	jsr $3898			jsr 	RSClaim
.2848	a9 01		lda #$01			lda 	#1 							; store return address.
.284a	20 c4 38	jsr $38c4			jsr 	RSSavePosition
.284d	68		pla				pla 								; get the new code Ptr
.284e	85 28		sta $28				sta 	codePtr
.2850	68		pla				pla
.2851	85 29		sta $29				sta 	codePtr+1
.2853	68		pla				pla 								; length of name + 4 is the param start.
.2854	18		clc				clc
.2855	69 04		adc #$04			adc 	#4
.2857	a8		tay				tay
.2858	a2 ff		ldx #$ff			ldx 	#$FF
.285a					_CPLoadParameters:
.285a	e8		inx				inx 								; point to where the address should be loaded.
.285b	ec e3 0c	cpx $0ce3			cpx 	paramCount 					; too many parameters in definition ?
.285e	f0 1e		beq $287e			beq 	_CPParamError
.2860	b1 28		lda ($28),y			lda 	(codePtr),y					; what follows
.2862	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN 				; is it the right bracket
.2864	f0 0e		beq $2874			beq 	_CPParamComplete 			; done all the parameters, perhaps.
.2866	20 32 27	jsr $2732			jsr 	LocaliseVariable 			; make following variable local, ref in tos,x
.2869	20 f5 24	jsr $24f5			jsr 	WriteValue 					; copy the evaluated parameter into there.
.286c	b1 28		lda ($28),y			lda 	(codePtr),y 				; followed by a comma ?
.286e	c8		iny				iny
.286f	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.2871	f0 e7		beq $285a			beq 	_CPLoadParameters
.2873	88		dey				dey 								; no, unconsume and check for )
.2874					_CPParamComplete:
.2874	20 70 38	jsr $3870			jsr 	CheckRightParen 			; check )
.2877	e8		inx				inx 								; check right number of parameters have been consumed
.2878	ec e3 0c	cpx $0ce3			cpx 	paramCount
.287b	d0 01		bne $287e			bne 	_CPParamError
.287d	60		rts				rts
.287e					_CPParamError:
.287e	a2 18		ldx #$18			ldx 	#ErrorID_Params
.2880	20 18 15	jsr $1518		jsr	errorHandler
.2883					ReturnProc:
.2883	20 a4 27	jsr $27a4			jsr 	RestoreLocals 				; get the locals back.
.2886	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.2888	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.288a	c9 50		cmp #$50			cmp 	#markerPROC 						; does it match
.288c	f0 05		beq $2893			beq 	_isok
.288e	a2 12		ldx #$12			ldx 	#ErrorID_endProcErr
.2890	20 18 15	jsr $1518		jsr	errorHandler
.2893					_isok:
.2893	a9 01		lda #$01			lda 	#1
.2895	20 d7 38	jsr $38d7			jsr 	RSLoadPosition 				; reload the position from offset 1.
.2898	a9 04		lda #$04			lda 	#4 							; throw 4 bytes from stack.
.289a	20 ba 38	jsr $38ba			jsr 	RSFree
.289d	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/proctable.asm

.0ce4					procList:
>0ce4							.fill 	2		 					; terminated by name high being zero.
.0ce6					yInLine:
>0ce6							.fill 	1
.289e					FindProcedure:
.289e	8c e6 0c	sty $0ce6			sty 	yInLine 					; save current position.
.28a1	20 5c 29	jsr $295c			jsr 	CalculateProcedureHash		; calculate the hash of the procedure.
.28a4	85 2c		sta $2c				sta 	temp1
.28a6	ad e4 0c	lda $0ce4			lda		procList 					; put procList address in temp2
.28a9	85 2e		sta $2e				sta 	temp2
.28ab	ad e5 0c	lda $0ce5			lda 	procList+1
.28ae	85 2f		sta $2f				sta 	temp2+1
.28b0	a0 00		ldy #$00			ldy 	#0 							; position in this table.
.28b2					_FPLoop:
.28b2	b1 2e		lda ($2e),y			lda 	(temp2),y
.28b4	f0 4f		beq $2905			beq 	_FPError 					; if so, we don't know this procedure.
.28b6	85 2b		sta $2b				sta 	temp0+1 					; copy MSB/LSB to temp0 as we go.
.28b8	c8		iny				iny
.28b9	b1 2e		lda ($2e),y			lda 	(temp2),y
.28bb	85 2a		sta $2a				sta 	temp0
.28bd	c8		iny				iny
.28be	b1 2e		lda ($2e),y			lda 	(temp2),y					; check the procedure hash.
.28c0	c5 2c		cmp $2c				cmp 	temp1
.28c2	d0 2b		bne $28ef			bne 	_FPNext 					; hash is different, go to next.
.28c4	38		sec				sec
.28c5	ad e6 0c	lda $0ce6			lda 	yInLine 					; position in line must be at least 4
.28c8	e9 04		sbc #$04			sbc 	#4
.28ca	18		clc				clc
.28cb	65 28		adc $28				adc 	codePtr
.28cd	85 30		sta $30				sta 	temp3
.28cf	a5 29		lda $29				lda 	codePtr+1
.28d1	69 00		adc #$00			adc 	#0
.28d3	85 31		sta $31				sta 	temp3+1
.28d5	98		tya				tya
.28d6	48		pha				pha
.28d7	a0 04		ldy #$04			ldy 	#4
.28d9					_FPCName:
.28d9	b1 30		lda ($30),y			lda 	(temp3),y 					; check the same
.28db	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.28dd	d0 0e		bne $28ed			bne 	_FPpulYNext 				; if different go to next one.
.28df	c8		iny				iny
.28e0	c9 3a		cmp #$3a			cmp 	#$3A
.28e2	90 f5		bcc $28d9			bcc 	_FPCName 					; compare the whole lot....
.28e4	68		pla				pla 								; throw away the saved Y
.28e5	98		tya				tya 								; length of name is Y-4
.28e6	38		sec				sec
.28e7	e9 04		sbc #$04			sbc 	#4
.28e9	ac e6 0c	ldy $0ce6			ldy 	yInLine  					; get the original Y back
.28ec	60		rts				rts
.28ed					_FPpulYNext:
.28ed	68		pla				pla
.28ee	a8		tay				tay
.28ef					_FPNext:
.28ef	c8		iny				iny 								; next procedure record.
.28f0	10 c0		bpl $28b2			bpl 	_FPLoop 					; if done 128 already ... e.g. Y -ve
.28f2	98		tya				tya 								; subtract 128 from Y
.28f3	38		sec				sec
.28f4	e9 80		sbc #$80			sbc 	#128
.28f6	a8		tay				tay
.28f7	18		clc				clc 								; add 128 to temp2, so we can have more than
.28f8	a5 2e		lda $2e				lda 	temp2 						; 255/3 = 85 procedures
.28fa	69 80		adc #$80			adc 	#128
.28fc	85 2e		sta $2e				sta 	temp2
.28fe	90 b2		bcc $28b2			bcc 	_FPLoop
.2900	e6 2f		inc $2f				inc 	temp2+1
.2902	4c b2 28	jmp $28b2			jmp 	_FPLoop
.2905					_FPError:
.2905	a2 17		ldx #$17			ldx 	#ErrorID_NoProc
.2907	20 18 15	jsr $1518		jsr	errorHandler
.290a					ScanProc:
.290a	98		tya				tya
.290b	48		pha				pha
.290c	a5 35		lda $35				lda 	lowMemory 					; copy the start of the procList, at low memory
.290e	8d e4 0c	sta $0ce4			sta 	procList
.2911	a5 36		lda $36				lda 	lowMemory+1
.2913	8d e5 0c	sta $0ce5			sta 	procList+1
.2916	20 86 2c	jsr $2c86			jsr 	ResetCodeAddress 			; back to the start.
.2919					_ScanLoop:
.2919	a0 00		ldy #$00			ldy 	#0 							; check reached program end
.291b	b1 28		lda ($28),y			lda 	(codePtr),y
.291d	f0 2a		beq $2949			beq 	_ScanExit
.291f	a0 03		ldy #$03			ldy 	#3							; get first token
.2921	b1 28		lda ($28),y			lda 	(codePtr),y
.2923	c9 9d		cmp #$9d			cmp 	#TKW_DEFPROC				; skip to next if not DEFPROC
.2925	d0 12		bne $2939			bne 	_ScanNext
.2927	a5 29		lda $29				lda 	codePtr+1 					; write high and low address of this line.
.2929	20 51 29	jsr $2951			jsr 	_ScanWrite
.292c	a5 28		lda $28				lda 	codePtr
.292e	20 51 29	jsr $2951			jsr 	_ScanWrite
.2931	a0 04		ldy #$04			ldy 	#4 							; start of name part
.2933	20 5c 29	jsr $295c			jsr 	CalculateProcedureHash 		; calculate procedure hash
.2936	20 51 29	jsr $2951			jsr 	_ScanWrite					; and write that
.2939					_ScanNext:
.2939	18		clc				clc
.293a	a0 00		ldy #$00			ldy 	#0
.293c	b1 28		lda ($28),y			lda 	(codePtr),y
.293e	65 28		adc $28				adc 	codePtr
.2940	85 28		sta $28				sta 	codePtr
.2942	90 d5		bcc $2919			bcc 	_ScanLoop
.2944	e6 29		inc $29				inc 	codePtr+1
.2946	4c 19 29	jmp $2919			jmp 	_ScanLoop
.2949					_ScanExit:
.2949	a9 00		lda #$00			lda 	#0 							; write ending zero.
.294b	20 51 29	jsr $2951			jsr 	_ScanWrite
.294e	68		pla				pla
.294f	a8		tay				tay
.2950	60		rts				rts
.2951					_ScanWrite:
.2951	a0 00		ldy #$00			ldy 	#0
.2953	91 35		sta ($35),y			sta 	(lowMemory),y
.2955	e6 35		inc $35				inc 	lowMemory
.2957	d0 02		bne $295b			bne 	_SWNoCarry
.2959	e6 36		inc $36				inc 	lowMemory+1
.295b					_SWNoCarry:
.295b	60		rts				rts
.295c					CalculateProcedureHash:
.295c	a9 00		lda #$00			lda 	#0 							; clear hash.
.295e	85 2a		sta $2a				sta 	temp0
.2960					_CPHLoop:
.2960	18		clc				clc 								; add character and rotate and add carry back in
.2961	b1 28		lda ($28),y			lda 	(codePtr),y
.2963	65 2a		adc $2a				adc 	temp0
.2965	6a		ror a				ror 	a
.2966	69 0d		adc #$0d			adc 	#13 						; primes usually good for this sort of thing.
.2968	85 2a		sta $2a				sta 	temp0 						; (down with this sort of thing)
.296a	b1 28		lda ($28),y			lda 	(codePtr),y
.296c	c8		iny				iny 								; advance incase we go round again.
.296d	c9 3a		cmp #$3a			cmp 	#$3A
.296f	90 ef		bcc $2960			bcc 	_CPHLoop
.2971	a5 2a		lda $2a				lda 	temp0
.2973	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/repeat.asm

.2974					Command_Repeat:
.2974	a2 04		ldx #$04			ldx 	#4 							; allocate 4 bytes on stack for REPEAT
.2976	a9 52		lda #$52			lda 	#markerREPEAT 				; repeat marker allocate 4 bytes
.2978	20 98 38	jsr $3898			jsr 	RSClaim
.297b	a9 01		lda #$01			lda 	#1 							; save position at offset 1.
.297d	20 c4 38	jsr $38c4			jsr 	RSSavePosition
.2980	60		rts				rts
.2981					Command_Until:
.2981	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.2983	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.2985	c9 52		cmp #$52			cmp 	#markerREPEAT 						; does it match
.2987	f0 05		beq $298e			beq 	_isok
.2989	a2 0f		ldx #$0f			ldx 	#ErrorID_untilErr
.298b	20 18 15	jsr $1518		jsr	errorHandler
.298e					_isok:
.298e	20 63 31	jsr $3163			jsr 	EvaluateRootInteger 		; at the bottom.
.2991	20 24 38	jsr $3824			jsr 	MInt32Zero					; check if TOS zero
.2994	d0 06		bne $299c			bne 	_CUExit
.2996	a9 01		lda #$01			lda 	#1
.2998	20 d7 38	jsr $38d7			jsr 	RSLoadPosition 				; reload the position from offset 1.
.299b	60		rts				rts
.299c					_CUExit:
.299c	a9 04		lda #$04			lda 	#4 							; throw 4 bytes from stack.
.299e	20 ba 38	jsr $38ba			jsr 	RSFree
.29a1	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/scanner.asm

.29a2					ScanForward:
.29a2	85 2c		sta $2c				sta 	temp1 						; save tokens to search in temp1/temp1+1
.29a4	86 2d		stx $2d				stx 	temp1+1
.29a6	a9 00		lda #$00			lda 	#0 							; temp2 counts structure levels.
.29a8	85 2e		sta $2e				sta 	temp2
.29aa	b1 28		lda ($28),y	_SFLoop:lda 	(codePtr),y 				; look at the next token.
.29ac	c8		iny				iny
.29ad	a6 2e		ldx $2e				ldx 	temp2 						; check structure levels are zero.
.29af	d0 08		bne $29b9			bne 	_SFNoCheck 					; if so, check token against entered values.
.29b1	c5 2c		cmp $2c				cmp 	temp1 						; if either matches, we've reached the token
.29b3	f0 24		beq $29d9			beq 	_SFExit 					; at the same strcture depth.
.29b5	c5 2d		cmp $2d				cmp 	temp1+1
.29b7	f0 20		beq $29d9			beq 	_SFExit
.29b9					_SFNoCheck:
.29b9	c9 80		cmp #$80			cmp 	#$80 						; if it is 00-7F (variable/number) just skip it.
.29bb	90 ed		bcc $29aa			bcc 	_SFLoop
.29bd	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; $80-$85 is various specials.
.29bf	90 19		bcc $29da			bcc 	_SFSpecials
.29c1	c9 99		cmp #$99			cmp 	#TOK_STRUCTST 				; if < structure start then continue
.29c3	90 e5		bcc $29aa			bcc 	_SFLoop
.29c5	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST 				; if >= unary start (after structure) then continue.
.29c7	b0 e1		bcs $29aa			bcs 	_SFLoop
.29c9	aa		tax				tax  								; token in X, and look up the adjuster.
.29ca	bd 81 30	lda $3081,x			lda 	ELBinaryOperatorInfo-TOK_BINARYST,x
.29cd	38		sec				sec 								; convert to an offset ($FF,$01)
.29ce	e9 81		sbc #$81			sbc 	#$81
.29d0	18		clc				clc 								; add to depth
.29d1	65 2e		adc $2e				adc 	temp2
.29d3	85 2e		sta $2e				sta 	temp2
.29d5	10 d3		bpl $29aa			bpl 	_SFLoop 					; +ve okay to continue
.29d7	30 07		bmi $29e0			bmi 	SFError 					; if gone -ve then we have a nesting error
.29d9	60		rts		_SFExit:rts
.29da					_SFSpecials:
.29da	20 e5 29	jsr $29e5			jsr 	ScannerSkipSpecial
.29dd	4c aa 29	jmp $29aa			jmp 	_SFLoop
.29e0					SFError:
.29e0	a2 14		ldx #$14			ldx 	#ErrorID_Struct
.29e2	20 18 15	jsr $1518		jsr	errorHandler
.29e5					ScannerSkipSpecial:
.29e5	c9 80		cmp #$80			cmp 	#TOK_EOL 					; $80, advance to next line.
.29e7	f0 10		beq $29f9			beq 	_SFNextLine
.29e9	c9 84		cmp #$84			cmp 	#TOK_FPC					; $84, skip embedded float
.29eb	f0 2b		beq $2a18			beq 	_SFFloatSkip
.29ed	c9 85		cmp #$85			cmp 	#TOK_STR 					; $85, skip string
.29ef	f0 02		beq $29f3			beq 	_SFSkipString
.29f1	c8		iny				iny									; $81,$82,$83 shift, so just advance over the shifted
.29f2	60		rts				rts 								; token.
.29f3					_SFSkipString:
.29f3	98		tya				tya
.29f4	38		sec				sec
.29f5	71 28		adc ($28),y			adc 	(codePtr),y
.29f7	a8		tay				tay
.29f8	60		rts				rts
.29f9					_SFNextLine:
.29f9	a0 00		ldy #$00			ldy 	#0 							; get offset
.29fb	b1 28		lda ($28),y			lda 	(codePtr),y
.29fd	18		clc				clc 								; add to code pointer.
.29fe	65 28		adc $28				adc 	codePtr
.2a00	85 28		sta $28				sta 	codePtr
.2a02	90 02		bcc $2a06			bcc		_SFNLNoCarry
.2a04	e6 29		inc $29				inc 	codePtr+1
.2a06					_SFNLNoCarry:
.2a06	b1 28		lda ($28),y			lda 	(codePtr),y 				; reached the end of the program.
.2a08	d0 0b		bne $2a15			bne		_SFXNL 						; no go round again
.2a0a	a5 2c		lda $2c				lda 	temp1
.2a0c	c9 d9		cmp #$d9			cmp 	#TKW_DATA 					; if searching for Data different error.
.2a0e	d0 d0		bne $29e0			bne 	SFError 					; read uses this to search for data statements
.2a10	a2 1d		ldx #$1d			ldx 	#ErrorID_DataError
.2a12	20 18 15	jsr $1518		jsr	errorHandler
.2a15	a0 03		ldy #$03	_SFXNL:	ldy 	#3
.2a17	60		rts				rts
.2a18					_SFFloatSkip:
.2a18	98		tya				tya 								; skip over an embedded float.
.2a19	18		clc				clc
.2a1a	69 05		adc #$05			adc 	#FloatEmbeddedSize
.2a1c	a8		tay				tay
.2a1d	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/while.asm

.2a1e					Command_While:
.2a1e	a9 57		lda #$57			lda 	#markerWhile 				; gosub marker allocate 4 bytes.
.2a20	a2 04		ldx #$04			ldx 	#4
.2a22	20 98 38	jsr $3898			jsr 	RSClaim 					; create on stack.
.2a25	88		dey				dey
.2a26	a9 01		lda #$01			lda 	#1
.2a28	20 c4 38	jsr $38c4			jsr 	RSSavePosition 				; save position before the WHILE keyword.
.2a2b	c8		iny				iny
.2a2c	20 63 31	jsr $3163			jsr 	EvaluateRootInteger			; get the conditional
.2a2f	20 24 38	jsr $3824			jsr 	MInt32Zero 	 				; if zero, skip forward to the fail code.
.2a32	f0 01		beq $2a35			beq 	_CWFail
.2a34	60		rts				rts
.2a35					_CWFail:
.2a35	a9 04		lda #$04			lda 	#4
.2a37	20 ba 38	jsr $38ba			jsr 	RSFree 						; close the just opened position.
.2a3a	a9 9f		lda #$9f			lda 	#TKW_WEND 					; scan forward past WEND.
.2a3c	aa		tax				tax
.2a3d	20 a2 29	jsr $29a2			jsr 	ScanForward
.2a40	60		rts				rts
.2a41					Command_Wend:
.2a41	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.2a43	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.2a45	c9 57		cmp #$57			cmp 	#markerWHILE 						; does it match
.2a47	f0 05		beq $2a4e			beq 	_isok
.2a49	a2 11		ldx #$11			ldx 	#ErrorID_wendErr
.2a4b	20 18 15	jsr $1518		jsr	errorHandler
.2a4e					_isok:
.2a4e	a9 01		lda #$01			lda 	#1
.2a50	20 d7 38	jsr $38d7			jsr 	RSLoadPosition				; go back until true
.2a53	a9 04		lda #$04			lda 	#4
.2a55	20 ba 38	jsr $38ba			jsr 	RSFree 						; close the loop
.2a58	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/system/clear.asm

.2a59					CommandClear:
.2a59					XCommandClear:
.2a59	98		tya				tya
.2a5a	48		pha				pha
.2a5b	ad cc 0a	lda $0acc			lda 	endMemory					; set high memory = end of memory
.2a5e	85 33		sta $33				sta 	highMemory
.2a60	ad cd 0a	lda $0acd			lda 	endMemory+1
.2a63	85 34		sta $34				sta 	highMemory+1
.2a65	ad c8 0a	lda $0ac8			lda 	basePage 					; work out where the program ends.
.2a68	85 2a		sta $2a				sta 	temp0
.2a6a	ad c9 0a	lda $0ac9			lda 	basePage+1
.2a6d	85 2b		sta $2b				sta 	temp0+1
.2a6f					_CCFindEnd:
.2a6f	a0 00		ldy #$00			ldy 	#0
.2a71	b1 2a		lda ($2a),y			lda 	(temp0),y
.2a73	f0 0c		beq $2a81			beq 	_CCFoundEnd 				; offset zero is end.
.2a75	18		clc				clc
.2a76	65 2a		adc $2a				adc 	temp0 						; move to next line
.2a78	85 2a		sta $2a				sta 	temp0
.2a7a	90 f3		bcc $2a6f			bcc 	_CCFindEnd
.2a7c	e6 2b		inc $2b				inc 	temp0+1
.2a7e	4c 6f 2a	jmp $2a6f			jmp 	_CCFindEnd
.2a81					_CCFoundEnd:
.2a81	a5 2a		lda $2a				lda 	temp0 						; put temp0 in lowMemory
.2a83	85 35		sta $35				sta 	lowMemory
.2a85	a5 2b		lda $2b				lda 	temp0+1
.2a87	85 36		sta $36				sta 	lowMemory+1
.2a89	18		clc				clc 								; put temp0+1 in endProgram
.2a8a	a5 2a		lda $2a				lda 	temp0
.2a8c	69 01		adc #$01			adc 	#1
.2a8e	8d ca 0a	sta $0aca			sta 	endProgram
.2a91	a5 2b		lda $2b				lda 	temp0+1
.2a93	69 00		adc #$00			adc 	#0
.2a95	8d cb 0a	sta $0acb			sta 	endProgram+1
.2a98	18		clc				clc 								; put a bit of space in.
.2a99	a5 35		lda $35				lda 	lowMemory
.2a9b	69 04		adc #$04			adc 	#4
.2a9d	85 35		sta $35				sta 	lowMemory
.2a9f	90 02		bcc $2aa3			bcc 	_CCNoCarry
.2aa1	e6 36		inc $36				inc 	lowMemory+1
.2aa3					_CCNoCarry:
.2aa3	20 8a 38	jsr $388a			jsr 	RSReset 					; reset the return stack.
.2aa6	a2 06		ldx #$06		ldx	#6
.2aa8	20 d8 47	jsr $47d8		jsr	variableHandler
.2aab	20 0a 29	jsr $290a			jsr 	ScanProc 					; scan for procedures
.2aae	20 8f 22	jsr $228f			jsr 	CommandRestore 				; do a restore
.2ab1	68		pla				pla
.2ab2	a8		tay				tay
.2ab3	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/system/list.asm

.0ce7					structIndent:
>0ce7							.fill 	1
.2ab4					CommandList:
.2ab4	a2 00		ldx #$00			ldx		#0 							; set start/end lines in stack 0/1 to 0 and $FFFF
.2ab6	8e e7 0c	stx $0ce7			stx 	structIndent
.2ab9	20 fd 37	jsr $37fd			jsr 	MInt32False
.2abc	e8		inx				inx
.2abd	20 f9 37	jsr $37f9			jsr 	MInt32True
.2ac0	b1 28		lda ($28),y			lda 	(codePtr),y 				; look at first token
.2ac2	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; list ,xxxx
.2ac4	f0 15		beq $2adb			beq 	_CLEndLine
.2ac6	c9 00		cmp #$00			cmp 	#0 							; list ... on its own.
.2ac8	30 1b		bmi $2ae5			bmi 	_CLDoListing 				; do the whole lot.
.2aca	a2 00		ldx #$00			ldx 	#0 							; get start line at stack:0
.2acc	20 65 31	jsr $3165			jsr 	EvaluateInteger
.2acf	b1 28		lda ($28),y			lda 	(codePtr),y 				; , follows ?
.2ad1	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.2ad3	f0 06		beq $2adb			beq 	_CLEndLine
.2ad5	20 3b 37	jsr $373b			jsr 	MInt32CopyUp 				; copy first to second if just a line number on its
.2ad8	4c e5 2a	jmp $2ae5			jmp 	_CLDoListing 				; own e.g. list 1100
.2adb					_CLEndLine:
.2adb	c8		iny				iny 								; skip comma
.2adc	b1 28		lda ($28),y			lda 	(codePtr),y  				; no number follows, then its list 1000,
.2ade	30 05		bmi $2ae5			bmi 	_CLDoListing
.2ae0	a2 01		ldx #$01			ldx 	#1 							; get the last line to list
.2ae2	20 65 31	jsr $3165			jsr 	EvaluateInteger				; get end
.2ae5					_CLDoListing:
.2ae5	20 86 2c	jsr $2c86			jsr 	ResetCodeAddress 			; back to the start.
.2ae8					_CLCheckLoop:
.2ae8	a2 02		ldx #$02		ldx	#2
.2aea	20 f6 14	jsr $14f6		jsr	deviceHandler
.2aed	a0 00		ldy #$00			ldy 	#0							; check end.
.2aef	b1 28		lda ($28),y			lda 	(codePtr),y
.2af1	f0 41		beq $2b34			beq 	_CLEnd
.2af3	a2 00		ldx #$00			ldx 	#0 							; compare vs lower.
.2af5	20 37 2b	jsr $2b37			jsr 	CLCompareLineTOS
.2af8	c9 ff		cmp #$ff			cmp 	#255 						; if < skip
.2afa	f0 28		beq $2b24			beq 	_CLNext
.2afc	e8		inx				inx
.2afd	20 37 2b	jsr $2b37			jsr 	CLCompareLineTOS 			; compare vs higher
.2b00	c9 01		cmp #$01			cmp 	#1
.2b02	f0 20		beq $2b24			beq 	_CLNext
.2b04	a9 80		lda #$80			lda 	#$80 						; undo any down indents this line.
.2b06	20 59 2b	jsr $2b59			jsr 	CLStructureCheck
.2b09	ad e7 0c	lda $0ce7			lda 	structIndent 				; indent level.
.2b0c	10 02		bpl $2b10			bpl 	_CLPositive
.2b0e	a9 00		lda #$00			lda 	#0
.2b10					_CLPositive:
.2b10	a2 04		ldx #$04		ldx	#4
.2b12	20 07 44	jsr $4407		jsr	tokeniserHandler
.2b15	a9 82		lda #$82			lda 	#$82 						; up indents from this point on.
.2b17	20 59 2b	jsr $2b59			jsr 	CLStructureCheck
.2b1a	ad e7 0c	lda $0ce7			lda 	structIndent
.2b1d	10 05		bpl $2b24			bpl 	_CLNext
.2b1f	a9 00		lda #$00			lda 	#0
.2b21	8d e7 0c	sta $0ce7			sta 	structIndent
.2b24					_CLNext:
.2b24	a0 00		ldy #$00			ldy 	#0 							; go to next line.
.2b26	b1 28		lda ($28),y			lda 	(codePtr),y
.2b28	18		clc				clc
.2b29	65 28		adc $28				adc 	codePtr
.2b2b	85 28		sta $28				sta 	codePtr
.2b2d	90 b9		bcc $2ae8			bcc 	_CLCheckLoop
.2b2f	e6 29		inc $29				inc 	codePtr+1
.2b31	4c e8 2a	jmp $2ae8			jmp 	_CLCheckLoop
.2b34					_CLEnd:
.2b34	4c e6 38	jmp $38e6			jmp 	WarmStart 					; warm start after list.
.2b37					CLCompareLineTOS:
.2b37	a0 01		ldy #$01			ldy 	#1
.2b39	b1 28		lda ($28),y			lda 	(codePtr),y
.2b3b	55 98		eor $98,x			eor 	esInt0,x
.2b3d	85 2a		sta $2a				sta 	temp0
.2b3f	c8		iny				iny
.2b40	b1 28		lda ($28),y			lda 	(codePtr),y
.2b42	55 a0		eor $a0,x			eor 	esInt1,x
.2b44	05 2a		ora $2a				ora 	temp0
.2b46	f0 10		beq $2b58			beq 	_CLCLTExit
.2b48	88		dey				dey
.2b49	b1 28		lda ($28),y			lda 	(codePtr),y
.2b4b	d5 98		cmp $98,x			cmp 	esInt0,x
.2b4d	c8		iny				iny
.2b4e	b1 28		lda ($28),y			lda 	(codePtr),y
.2b50	f5 a0		sbc $a0,x			sbc 	esInt1,x
.2b52	a9 ff		lda #$ff			lda 	#255
.2b54	90 02		bcc $2b58			bcc 	_CLCLTExit
.2b56	a9 01		lda #$01			lda 	#1
.2b58					_CLCLTExit:
.2b58	60		rts				rts
.2b59					CLStructureCheck:
.2b59	85 2a		sta $2a				sta 	temp0
.2b5b	a0 03		ldy #$03			ldy 	#3
.2b5d					_CLSCLoop:
.2b5d	b1 28		lda ($28),y			lda 	(codePtr),y 				; get and consume token.
.2b5f	c8		iny				iny
.2b60	c9 80		cmp #$80			cmp 	#$80
.2b62	90 f9		bcc $2b5d			bcc 	_CLSCLoop 					; $00-$7F just step over.
.2b64	f0 28		beq $2b8e			beq		_CLSCExit					; EOL return
.2b66	c9 86		cmp #$86			cmp 	#$86 						; special handler
.2b68	90 1e		bcc $2b88			bcc 	_CLSCSpecial
.2b6a	c9 99		cmp #$99			cmp 	#TOK_STRUCTST 				; check if structure changer.
.2b6c	90 ef		bcc $2b5d			bcc 	_CLSCLoop
.2b6e	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST
.2b70	b0 eb		bcs $2b5d			bcs 	_CLSCLoop
.2b72	aa		tax				tax 								; get adjustment
.2b73	bd 81 30	lda $3081,x			lda 	ELBinaryOperatorInfo-TOK_BINARYST,x
.2b76	c5 2a		cmp $2a				cmp 	temp0	 					; if what we're searching for
.2b78	d0 e3		bne $2b5d			bne 	_CLSCLoop
.2b7a	38		sec				sec
.2b7b	e9 81		sbc #$81			sbc 	#$81 						; convert to offset
.2b7d	0a		asl a				asl 	a 							; double indent step
.2b7e	18		clc				clc
.2b7f	6d e7 0c	adc $0ce7			adc 	structIndent 				; add to structure indent
.2b82	8d e7 0c	sta $0ce7			sta 	structIndent
.2b85	4c 5d 2b	jmp $2b5d			jmp 	_CLSCLoop
.2b88					_CLSCSpecial:
.2b88	20 e5 29	jsr $29e5			jsr 	ScannerSkipSpecial
.2b8b	4c 5d 2b	jmp $2b5d			jmp 	_CLSCLoop
.2b8e					_CLSCExit:
.2b8e	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/system/loadsave.asm

.2b8f					CommandLoad:
.2b8f	20 b7 2b	jsr $2bb7			jsr 	CLSParameters 					; get parameters for load.
.2b92	08		php				php
.2b93	a2 0e		ldx #$0e		ldx	#14
.2b95	20 f6 14	jsr $14f6		jsr	deviceHandler
.2b98	28		plp				plp
.2b99	b0 08		bcs $2ba3			bcs 	_CLExit 						; if CC then load a program, so warm start.
.2b9b	20 59 2a	jsr $2a59			jsr 	CommandClear
.2b9e	a2 04		ldx #$04		ldx	#4
.2ba0	20 51 22	jsr $2251		jsr	interactionHandler
.2ba3					_CLExit
.2ba3	60		rts				rts
.2ba4					CommandSave:
.2ba4	20 b7 2b	jsr $2bb7			jsr 	CLSParameters					; get parameters for save
.2ba7	90 08		bcc $2bb1			bcc 	_CSNoOverrideAddress
.2ba9	20 7d 38	jsr $387d			jsr 	CheckComma 						; should be a comma.
.2bac	a2 02		ldx #$02			ldx 	#2
.2bae	20 65 31	jsr $3165			jsr 	EvaluateInteger 				; get save end address.
.2bb1					_CSNoOverrideAddress:
.2bb1	a2 18		ldx #$18		ldx	#24
.2bb3	20 f6 14	jsr $14f6		jsr	deviceHandler
.2bb6	60		rts				rts
.2bb7					CLSParameters:
.2bb7	a2 00		ldx #$00			ldx 	#0 								; string
.2bb9	20 5a 31	jsr $315a			jsr 	EvaluateString
.2bbc	e8		inx				inx 									; erase out +1 +2
.2bbd	20 fd 37	jsr $37fd			jsr 	MInt32False
.2bc0	e8		inx				inx
.2bc1	20 fd 37	jsr $37fd			jsr 	MInt32False
.2bc4	ad c8 0a	lda $0ac8			lda 	basePage 						; default start address.
.2bc7	85 99		sta $99				sta 	esInt0+1
.2bc9	ad c9 0a	lda $0ac9			lda 	basePage+1
.2bcc	85 a1		sta $a1				sta 	esInt1+1
.2bce	ad ca 0a	lda $0aca			lda 	endProgram 						; default end address
.2bd1	85 9a		sta $9a				sta 	esInt0+2
.2bd3	ad cb 0a	lda $0acb			lda 	endProgram+1
.2bd6	85 a2		sta $a2				sta 	esInt1+2
.2bd8	b1 28		lda ($28),y			lda 	(codePtr),y 					; , following
.2bda	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.2bdc	d0 08		bne $2be6			bne 	_CLSDefault
.2bde	c8		iny				iny 									; skip comma
.2bdf	a2 01		ldx #$01			ldx 	#1 								; get numeric value.
.2be1	20 65 31	jsr $3165			jsr 	EvaluateInteger
.2be4	38		sec				sec
.2be5	60		rts				rts
.2be6					_CLSDefault:
.2be6	18		clc				clc
.2be7	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/system/new.asm

.2be8					Command_New:
.2be8					Command_XNew:
.2be8	20 86 2c	jsr $2c86			jsr 	ResetCodeAddress 			; point to first line
.2beb	a0 00		ldy #$00			ldy 	#0 							; and zap it.
.2bed	98		tya				tya
.2bee	91 28		sta ($28),y			sta 	(codePtr),y
.2bf0	20 59 2a	jsr $2a59			jsr 	CommandClear 				; clear everything down.
.2bf3	4c af 25	jmp $25af			jmp 	CommandEND 					; do END code, as there's nothing to run.

;******  Return to file: main/main.asm


;******  Processing file: main/commands/system/run.asm

.0ce8					breakCounter:
>0ce8								.fill 	1
.0ce9					breakIncrement:
>0ce9								.fill 	1
.2bf6					Command_Run:
.2bf6					XCommand_Run:
.2bf6	a2 ff		ldx #$ff			ldx 	#$FF 						; reset the stack.
.2bf8	9a		txs				txs
.2bf9	20 80 2c	jsr $2c80			jsr 	BreakOn 					; turn break on
.2bfc	20 59 2a	jsr $2a59			jsr 	CommandClear 				; clear everything.
.2bff	20 86 2c	jsr $2c86			jsr 	ResetCodeAddress 			; back to the start.
.2c02					Command_RunFrom:
.2c02	a0 03		ldy #$03			ldy 	#3 							; over offset/line #
.2c04					CRNextInstruction:
.2c04	64 3a		stz $3a				stz 	softMemAlloc+1
.2c06	ad e8 0c	lda $0ce8			lda 	breakCounter 				; check for break.
.2c09	6d e9 0c	adc $0ce9			adc 	breakIncrement
.2c0c	8d e8 0c	sta $0ce8			sta 	breakCounter
.2c0f	90 05		bcc $2c16			bcc 	_CRNoChecks
.2c11	a2 02		ldx #$02		ldx	#2
.2c13	20 f6 14	jsr $14f6		jsr	deviceHandler
.2c16					_CRNoChecks
.2c16	b1 28		lda ($28),y			lda 	(codePtr),y 				; get next token.
.2c18	10 1c		bpl $2c36			bpl 	_CRNotToken
.2c1a	c9 c9		cmp #$c9			cmp 	#TOK_TOKENS 				; if in the tokens then do that token.
.2c1c	b0 0c		bcs $2c2a			bcs 	_CRExecute
.2c1e	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST 				; unary is ignored.
.2c20	b0 71		bcs $2c93			bcs 	Unimplemented
.2c22	c9 99		cmp #$99			cmp 	#TOK_STRUCTST 				; execute structures.
.2c24	b0 04		bcs $2c2a			bcs 	_CRExecute
.2c26	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; if one of the system tokens $80-$85 do that
.2c28	b0 16		bcs $2c40			bcs 	_CRCheckIndirect 			; if in that unused range check for ! or ? or AND
.2c2a					_CRExecute:
.2c2a	c8		iny				iny 								; consume it.
.2c2b	0a		asl a				asl 	a 							; double it, losing most significant bit.
.2c2c	aa		tax				tax
.2c2d	20 33 2c	jsr $2c33			jsr 	_CRRunRoutine 				; we want to do jsr (group0vectors,x)
.2c30	4c 04 2c	jmp $2c04			jmp 	CRNextInstruction
.2c33					_CRRunRoutine:
.2c33	7c 9d 2c	jmp ($2c9d,x)			jmp 	(Group0Vectors,x)
.2c36					_CRNotToken:
.2c36	c9 40		cmp #$40			cmp 	#$40 						; if 0-3F then it is a letter
.2c38	b0 59		bcs $2c93			bcs 	Unimplemented
.2c3a					_CRDefaultLet:
.2c3a	20 e2 24	jsr $24e2			jsr 	CommandLet 					; do the default, LET
.2c3d	4c 04 2c	jmp $2c04			jmp 	CRNextInstruction
.2c40					_CRCheckIndirect:
.2c40	c9 86		cmp #$86			cmp 	#TKW_AND 					; AND (assembler)
.2c42	f0 0a		beq $2c4e			beq 	_CRAndCommand
.2c44	c9 97		cmp #$97			cmp 	#TKW_PLING 					; !<term> =
.2c46	f0 f2		beq $2c3a			beq 	_CRDefaultLet
.2c48	c9 98		cmp #$98			cmp 	#TKW_QMARK 					; ?<term> =
.2c4a	f0 ee		beq $2c3a			beq 	_CRDefaultLet
.2c4c	d0 45		bne $2c93			bne 	Unimplemented
.2c4e					_CRAndCommand:
.2c4e	c8		iny				iny 								; skip over the AND token
.2c4f	a9 95		lda #$95			lda 	#TKW_LPARENANDRPAREN 		; replace it with the pseudo-and
.2c51	20 6b 2c	jsr $2c6b			jsr 	CommandAssembler 			; do the assembler command
.2c54	4c 04 2c	jmp $2c04			jmp 	CRNextInstruction 			; and loop round.
.2c57					CommandShift1:
.2c57	b1 28		lda ($28),y			lda 	(codePtr),y 				; get shifted value
.2c59	10 38		bpl $2c93			bpl 	Unimplemented 				; we have an error as this should not happen.
.2c5b	c8		iny				iny 								; advance over it.
.2c5c	c9 94		cmp #$94			cmp 	#TKA_GROUP1 				; is it an assembler constant ?
.2c5e	b0 0b		bcs $2c6b			bcs 	CommandAssembler
.2c60	0a		asl a				asl 	a 							; double into X
.2c61	aa		tax				tax
.2c62	7c 61 2d	jmp ($2d61,x)			jmp 	(Group1Vectors-12,x) 		; and do the code.
.2c65					CommandShift2:
.2c65	a9 ff		lda #$ff			lda 	#$FF 						; $FF means command not unary function.
.2c67	20 69 18	jsr $1869		jsr	extensionHandler
.2c6a	60		rts				rts
.2c6b					CommandAssembler:
.2c6b	a2 02		ldx #$02		ldx	#2
.2c6d	20 b4 13	jsr $13b4		jsr	assemblerHandler
.2c70	60		rts				rts
.2c71					CommandAssemblerLabel:
.2c71	a2 04		ldx #$04		ldx	#4
.2c73	20 b4 13	jsr $13b4		jsr	assemblerHandler
.2c76	60		rts				rts
.2c77					CommandColon:
.2c77	60		rts				rts
.2c78					CommandBreak:
.2c78	20 63 31	jsr $3163			jsr 	EvaluateRootInteger
.2c7b	20 24 38	jsr $3824			jsr 	MInt32Zero
.2c7e	f0 02		beq $2c82			beq 	BreakOff
.2c80					BreakOn:
.2c80	a2 08		ldx #$08			ldx 	#8
.2c82					BreakOff:
.2c82	8e e9 0c	stx $0ce9			stx 	breakIncrement
.2c85	60		rts				rts
.2c86					ResetCodeAddress:
.2c86	ad c8 0a	lda $0ac8			lda 	basePage 					; copy basePage to code Pointer
.2c89	85 28		sta $28				sta 	codePtr
.2c8b	ad c9 0a	lda $0ac9			lda 	basePage+1
.2c8e	85 29		sta $29				sta 	codePtr+1
.2c90	a0 03		ldy #$03			ldy 	#3 							; offset after offset link and line#
.2c92	60		rts				rts
.2c93					Unimplemented:
.2c93	a2 01		ldx #$01			ldx 	#ErrorID_Missing
.2c95	20 18 15	jsr $1518		jsr	errorHandler
.2c98					TKErr01:
.2c98					TKErr02:
.2c98					TKErr03:
.2c98					TKErr04:
.2c98					TKErr05:
.2c98					TKErr06:
.2c98					TKErr07:
.2c98					TKErr08:
.2c98					TKErr09:
.2c98					TKErr10:
.2c98					TKErr11:
.2c98					TKErr12:
.2c98					TKErr13:
.2c98					TKErr14:
.2c98	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.2c9a	20 18 15	jsr $1518		jsr	errorHandler

;******  Processing file: main/commands/system/../../../generated/tokenvectors0.inc

.2c9d					Group0Vectors:
>2c9d	b5 25					.word	AdvanceNextLine          ; $80 [[eol]]
>2c9f	57 2c					.word	CommandShift1            ; $81 [[sh1]]
>2ca1	65 2c					.word	CommandShift2            ; $82 [[sh2]]
>2ca3	98 2c					.word	TKErr09                  ; $83 [[sh3]]
>2ca5	98 2c					.word	TKErr10                  ; $84 [[fpc]]
>2ca7	98 2c					.word	TKErr08                  ; $85 [[str]]
>2ca9	4a 2e					.word	AndHandler               ; $86 and
>2cab	37 2e					.word	OrHandler                ; $87 or
>2cad	24 2e					.word	XorHandler               ; $88 xor
>2caf	6c 2f					.word	CompareGreaterEq         ; $89 >=
>2cb1	76 2f					.word	CompareLessEq            ; $8a <=
>2cb3	58 2f					.word	CompareGreater           ; $8b >
>2cb5	4e 2f					.word	CompareLess              ; $8c <
>2cb7	44 2f					.word	CompareEquals            ; $8d =
>2cb9	62 2f					.word	CompareNotEquals         ; $8e <>
>2cbb	b5 2d					.word	AddHandler               ; $8f +
>2cbd	d8 2d					.word	SubHandler               ; $90 -
>2cbf	70 2e					.word	ShrHandler               ; $91 >>
>2cc1	5d 2e					.word	ShlHandler               ; $92 <<
>2cc3	eb 2d					.word	MulHandler               ; $93 *
>2cc5	fe 2d					.word	DivHandler               ; $94 /
>2cc7	11 2e					.word	ModHandler               ; $95 mod
>2cc9	a9 2e					.word	PowerHandler             ; $96 ^
>2ccb	83 2e					.word	WordRefHandler           ; $97 !
>2ccd	96 2e					.word	ByteRefHandler           ; $98 ?
>2ccf	74 29					.word	Command_Repeat           ; $99 repeat
>2cd1	1e 2a					.word	Command_While            ; $9a while
>2cd3	c9 25					.word	Command_FOR              ; $9b for
>2cd5	d8 26					.word	CommandIf                ; $9c if
>2cd7	98 2c					.word	TKErr04                  ; $9d defproc
>2cd9	81 29					.word	Command_Until            ; $9e until
>2cdb	41 2a					.word	Command_Wend             ; $9f wend
>2cdd	2a 26					.word	Command_NEXT             ; $a0 next
>2cdf	98 2c					.word	TKErr06                  ; $a1 then
>2ce1	13 27					.word	Command_ENDIF            ; $a2 endif
>2ce3	83 28					.word	ReturnProc               ; $a3 endproc
>2ce5	d0 30					.word	UnaryParenthesis         ; $a4 (
>2ce7	b2 32					.word	UnaryLen                 ; $a5 len(
>2ce9	f6 32					.word	UnarySgn                 ; $a6 sgn(
>2ceb	df 32					.word	UnaryAbs                 ; $a7 abs(
>2ced	4f 33					.word	Unary_Random             ; $a8 random(
>2cef	99 33					.word	Unary_Page               ; $a9 page
>2cf1	f9 37					.word	MInt32True               ; $aa true
>2cf3	fd 37					.word	MInt32False              ; $ab false
>2cf5	64 33					.word	Unary_Min                ; $ac min(
>2cf7	68 33					.word	Unary_Max                ; $ad max(
>2cf9	71 34					.word	UnarySys                 ; $ae sys(
>2cfb	1a 34					.word	UnaryTimer               ; $af timer(
>2cfd	2f 32					.word	EventFunction            ; $b0 event(
>2cff	43 34					.word	UnaryGet                 ; $b1 get(
>2d01	33 34					.word	UnaryInkey               ; $b2 inkey(
>2d03	ea 33					.word	UnaryAlloc               ; $b3 alloc(
>2d05	aa 34					.word	ExecChr                  ; $b4 chr$(
>2d07	da 34					.word	ExecLeft                 ; $b5 left$(
>2d09	f7 34					.word	ExecMid                  ; $b6 mid$(
>2d0b	1f 35					.word	ExecRight                ; $b7 right$(
>2d0d	b1 31					.word	Event_Str                ; $b8 str$(
>2d0f	e0 31					.word	UnaryVal                 ; $b9 val(
>2d11	0d 33					.word	UnaryPeek                ; $ba peek(
>2d13	13 33					.word	UnaryDeek                ; $bb deek(
>2d15	19 33					.word	UnaryLeek                ; $bc leek(
>2d17	d0 32					.word	UnaryAsc                 ; $bd asc(
>2d19	c4 33					.word	UnaryIntToFloat          ; $be int(
>2d1b	d7 33					.word	UnaryFloatToInt          ; $bf float(
>2d1d	e3 31					.word	UnaryIsVal               ; $c0 isval(
>2d1f	c1 34					.word	ExecUpper                ; $c1 upper$(
>2d21	be 34					.word	ExecLower                ; $c2 lower$(
>2d23	a7 33					.word	UnaryReference           ; $c3 @
>2d25	bd 33					.word	UnaryComplement          ; $c4 ~
>2d27	ba 33					.word	UnaryHexMarker           ; $c5 &
>2d29	5c 34					.word	UnaryGetString           ; $c6 get$(
>2d2b	62 34					.word	UnaryInkeyString         ; $c7 inkey$(
>2d2d	99 34					.word	UnaryMem                 ; $c8 mem
>2d2f	98 2c					.word	TKErr01                  ; $c9 )
>2d31	77 2c					.word	CommandColon             ; $ca :
>2d33	98 2c					.word	TKErr02                  ; $cb ,
>2d35	98 2c					.word	TKErr03                  ; $cc ;
>2d37	9d 25					.word	Command_Rem2             ; $cd '
>2d39	98 2c					.word	TKErr07                  ; $ce to
>2d3b	98 2c					.word	TKErr05                  ; $cf step
>2d3d	16 28					.word	CallProc                 ; $d0 proc
>2d3f	14 27					.word	CommandLocal             ; $d1 local
>2d41	d4 24					.word	Command_Dim              ; $d2 dim
>2d43	9d 25					.word	Command_Rem              ; $d3 rem
>2d45	e2 24					.word	CommandLet               ; $d4 let
>2d47	1e 23					.word	Command_Input            ; $d5 input
>2d49	0d 27					.word	Command_ELSE             ; $d6 else
>2d4b	a5 24					.word	Command_VDU              ; $d7 vdu
>2d4d	d4 23					.word	Command_Print            ; $d8 print
>2d4f	86 22					.word	CommandData              ; $d9 data
>2d51	98 2c					.word	TKErr13                  ; $da image
>2d53	98 2c					.word	TKErr12                  ; $db at
>2d55	98 2c					.word	TKErr14                  ; $dc flip
>2d57	c6 24					.word	Command_Assert           ; $dd assert
>2d59	60 25					.word	Command_Poke             ; $de poke
>2d5b	64 25					.word	Command_Doke             ; $df doke
>2d5d	68 25					.word	Command_Loke             ; $e0 loke
>2d5f	75 24					.word	Command_Ink              ; $e1 ink
>2d61	80 24					.word	Command_Paper            ; $e2 paper
>2d63	6f 24					.word	Command_CLS              ; $e3 cls
>2d65	8b 24					.word	Command_Locate           ; $e4 locate
>2d67	71 2c					.word	CommandAssemblerLabel    ; $e5 .
>2d69	98 2c					.word	TKErr11                  ; $e6 #
>2d6b	59 2a					.word	CommandClear             ; $e7 clear

;******  Return to file: main/commands/system/run.asm


;******  Processing file: main/commands/system/../../../generated/tokenvectors1.inc

.2d6d					Group1Vectors:
>2d6d	8f 2b					.word	CommandLoad              ; $86 load
>2d6f	a4 2b					.word	CommandSave              ; $87 save
>2d71	b4 2a					.word	CommandList              ; $88 list
>2d73	e8 2b					.word	Command_New              ; $89 new
>2d75	78 2c					.word	CommandBreak             ; $8a break
>2d77	f6 2b					.word	Command_Run              ; $8b run
>2d79	5b 22					.word	CommandRead              ; $8c read
>2d7b	8f 22					.word	CommandRestore           ; $8d restore
>2d7d	af 25					.word	CommandEnd               ; $8e end
>2d7f	aa 25					.word	CommandStop              ; $8f stop
>2d81	b2 25					.word	CommandXemu              ; $90 xemu
>2d83	ec 22					.word	CommandGOTO              ; $91 goto
>2d85	c1 22					.word	CommandGOSUB             ; $92 gosub
>2d87	d4 22					.word	CommandRETURN            ; $93 return

;******  Return to file: main/commands/system/run.asm


;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/binary/binary.asm

.2d89					BinaryProcess:
.2d89	b5 90		lda $90,x			lda 	esType,x 					; or type bytes together and check bit 6.
.2d8b	15 91		ora $91,x			ora 	esType+1,x 					; (the float bit)
.2d8d	0a		asl a				asl 	a
.2d8e	30 0e		bmi $2d9e			bmi 	_BPStringType 				; if bit 6 is set, then string type, error
.2d90	18		clc				clc 								; return CC for integer
.2d91	29 02		and #$02			and 	#$02 						; $02 because of ASL A. check original bit 1.
.2d93	f0 08		beq $2d9d			beq 	_BPExit 					; if both integer then return with CC.
.2d95	20 a3 2d	jsr $2da3			jsr 	BPMakeBothFloat 			; make both float
.2d98	a9 01		lda #$01			lda 	#$01 						; set result type to float
.2d9a	95 90		sta $90,x			sta 	esType,x
.2d9c	38		sec				sec 								; and return with carry set.
.2d9d					_BPExit:
.2d9d	60		rts				rts
.2d9e					_BPStringType:
.2d9e	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.2da0	20 18 15	jsr $1518		jsr	errorHandler
.2da3					BPMakeBothFloat:
.2da3	e8		inx				inx
.2da4	20 a8 2d	jsr $2da8			jsr 	BPMakeFloat 				; one is a float, so we do both as floats.
.2da7	ca		dex				dex
.2da8					BPMakeFloat:
.2da8	b5 90		lda $90,x			lda 	esType,x 					; get type bit which is in bit 0
.2daa	4a		lsr a				lsr 	a
.2dab	b0 07		bcs $2db4			bcs 	_BPIsFloat 					; already a float if set.
.2dad	8a		txa				txa
.2dae	a2 1c		ldx #$1c		ldx	#28
.2db0	20 65 20	jsr $2065		jsr	floatingpointHandler
.2db3	aa		tax				tax
.2db4					_BPIsFloat:
.2db4	60		rts				rts
.2db5					AddHandler:
.2db5	20 86 2f	jsr $2f86			jsr 	DereferenceTwo 				; dereference top two on stack.
.2db8	b5 90		lda $90,x			lda 	esType,x 					; check two strings.
.2dba	35 91		and $91,x			and 	esType+1,x
.2dbc	29 40		and #$40			and 	#$40 						; if both have bit 6 set ... we have two strings
.2dbe	d0 10		bne $2dd0			bne 	_AHStringConcat				; concatenate strings.
.2dc0	20 89 2d	jsr $2d89			jsr 	BinaryProcess 				; check to see if either is float
.2dc3	b0 03		bcs $2dc8			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.2dc5	4c e1 36	jmp $36e1			jmp 	MInt32Add 							; else do it as integer.
.2dc8					_IsFPOperation:
.2dc8	8a		txa				txa 								; call the relevant fp routine
.2dc9	a2 04		ldx #$04		ldx	#4
.2dcb	20 65 20	jsr $2065		jsr	floatingpointHandler
.2dce	aa		tax				tax
.2dcf	60		rts				rts
.2dd0					_AHStringConcat:
.2dd0	8a		txa				txa 								; handled by the string module.
.2dd1	a2 06		ldx #$06		ldx	#6
.2dd3	20 a8 3b	jsr $3ba8		jsr	stringHandler
.2dd6	aa		tax				tax
.2dd7	60		rts				rts
.2dd8					SubHandler:
.2dd8	20 86 2f	jsr $2f86			jsr 	DereferenceTwo
.2ddb	20 89 2d	jsr $2d89			jsr 	BinaryProcess 				; check to see if either is float
.2dde	b0 03		bcs $2de3			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.2de0	4c fb 36	jmp $36fb			jmp 	MInt32Sub 							; else do it as integer.
.2de3					_IsFPOperation:
.2de3	8a		txa				txa 								; call the relevant fp routine
.2de4	a2 12		ldx #$12		ldx	#18
.2de6	20 65 20	jsr $2065		jsr	floatingpointHandler
.2de9	aa		tax				tax
.2dea	60		rts				rts
.2deb					MulHandler:
.2deb	20 86 2f	jsr $2f86			jsr 	DereferenceTwo
.2dee	20 89 2d	jsr $2d89			jsr 	BinaryProcess 				; check to see if either is float
.2df1	b0 03		bcs $2df6			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.2df3	4c 15 37	jmp $3715			jmp 	MInt32Multiply 							; else do it as integer.
.2df6					_IsFPOperation:
.2df6	8a		txa				txa 								; call the relevant fp routine
.2df7	a2 0c		ldx #$0c		ldx	#12
.2df9	20 65 20	jsr $2065		jsr	floatingpointHandler
.2dfc	aa		tax				tax
.2dfd	60		rts				rts
.2dfe					DivHandler:
.2dfe	20 86 2f	jsr $2f86			jsr 	DereferenceTwo
.2e01	20 89 2d	jsr $2d89			jsr 	BinaryProcess 				; check to see if either is float
.2e04	b0 03		bcs $2e09			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.2e06	4c d2 35	jmp $35d2			jmp 	MInt32SDivide 							; else do it as integer.
.2e09					_IsFPOperation:
.2e09	8a		txa				txa 								; call the relevant fp routine
.2e0a	a2 08		ldx #$08		ldx	#8
.2e0c	20 65 20	jsr $2065		jsr	floatingpointHandler
.2e0f	aa		tax				tax
.2e10	60		rts				rts
.2e11					ModHandler:
.2e11	20 86 2f	jsr $2f86			jsr 	DereferenceTwo
.2e14	20 89 2d	jsr $2d89			jsr 	BinaryProcess 				; check to see if either is float
.2e17	b0 03		bcs $2e1c			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.2e19	4c 50 36	jmp $3650			jmp 	MInt32Modulus 							; else do it as integer.
.2e1c					_IsFPOperation:
.2e1c	8a		txa				txa 								; call the relevant fp routine
.2e1d	a2 0a		ldx #$0a		ldx	#10
.2e1f	20 65 20	jsr $2065		jsr	floatingpointHandler
.2e22	aa		tax				tax
.2e23	60		rts				rts
.2e24					XorHandler:
.2e24	20 86 2f	jsr $2f86			jsr 	DereferenceTwo
.2e27	20 89 2d	jsr $2d89			jsr 	BinaryProcess 				; check to see if either is float
.2e2a	b0 03		bcs $2e2f			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.2e2c	4c 84 35	jmp $3584			jmp 	MInt32Xor 							; else do it as integer.
.2e2f					_IsFPOperation:
.2e2f	8a		txa				txa 								; call the relevant fp routine
.2e30	a2 0a		ldx #$0a		ldx	#10
.2e32	20 65 20	jsr $2065		jsr	floatingpointHandler
.2e35	aa		tax				tax
.2e36	60		rts				rts
.2e37					OrHandler:
.2e37	20 86 2f	jsr $2f86			jsr 	DereferenceTwo
.2e3a	20 89 2d	jsr $2d89			jsr 	BinaryProcess 				; check to see if either is float
.2e3d	b0 03		bcs $2e42			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.2e3f	4c 6b 35	jmp $356b			jmp 	MInt32Or 							; else do it as integer.
.2e42					_IsFPOperation:
.2e42	8a		txa				txa 								; call the relevant fp routine
.2e43	a2 0a		ldx #$0a		ldx	#10
.2e45	20 65 20	jsr $2065		jsr	floatingpointHandler
.2e48	aa		tax				tax
.2e49	60		rts				rts
.2e4a					AndHandler:
.2e4a	20 86 2f	jsr $2f86			jsr 	DereferenceTwo
.2e4d	20 89 2d	jsr $2d89			jsr 	BinaryProcess 				; check to see if either is float
.2e50	b0 03		bcs $2e55			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.2e52	4c 52 35	jmp $3552			jmp 	MInt32And 							; else do it as integer.
.2e55					_IsFPOperation:
.2e55	8a		txa				txa 								; call the relevant fp routine
.2e56	a2 0a		ldx #$0a		ldx	#10
.2e58	20 65 20	jsr $2065		jsr	floatingpointHandler
.2e5b	aa		tax				tax
.2e5c	60		rts				rts
.2e5d					ShlHandler:
.2e5d	20 86 2f	jsr $2f86			jsr 	DereferenceTwo
.2e60	20 89 2d	jsr $2d89			jsr 	BinaryProcess 				; check to see if either is float
.2e63	b0 03		bcs $2e68			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.2e65	4c de 2e	jmp $2ede			jmp 	Mint32ShiftLeftX 							; else do it as integer.
.2e68					_IsFPOperation:
.2e68	8a		txa				txa 								; call the relevant fp routine
.2e69	a2 0a		ldx #$0a		ldx	#10
.2e6b	20 65 20	jsr $2065		jsr	floatingpointHandler
.2e6e	aa		tax				tax
.2e6f	60		rts				rts
.2e70					ShrHandler:
.2e70	20 86 2f	jsr $2f86			jsr 	DereferenceTwo
.2e73	20 89 2d	jsr $2d89			jsr 	BinaryProcess 				; check to see if either is float
.2e76	b0 03		bcs $2e7b			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.2e78	4c e1 2e	jmp $2ee1			jmp 	MInt32ShiftRightX 							; else do it as integer.
.2e7b					_IsFPOperation:
.2e7b	8a		txa				txa 								; call the relevant fp routine
.2e7c	a2 0a		ldx #$0a		ldx	#10
.2e7e	20 65 20	jsr $2065		jsr	floatingpointHandler
.2e81	aa		tax				tax
.2e82	60		rts				rts
.2e83					WordRefHandler:
.2e83	20 86 2f	jsr $2f86			jsr 	DereferenceTwo
.2e86	20 89 2d	jsr $2d89			jsr 	BinaryProcess 				; check to see if either is float
.2e89	b0 03		bcs $2e8e			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.2e8b	4c d0 2e	jmp $2ed0			jmp 	MInt32WordIndirect 							; else do it as integer.
.2e8e					_IsFPOperation:
.2e8e	8a		txa				txa 								; call the relevant fp routine
.2e8f	a2 0a		ldx #$0a		ldx	#10
.2e91	20 65 20	jsr $2065		jsr	floatingpointHandler
.2e94	aa		tax				tax
.2e95	60		rts				rts
.2e96					ByteRefHandler:
.2e96	20 86 2f	jsr $2f86			jsr 	DereferenceTwo
.2e99	20 89 2d	jsr $2d89			jsr 	BinaryProcess 				; check to see if either is float
.2e9c	b0 03		bcs $2ea1			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.2e9e	4c d4 2e	jmp $2ed4			jmp 	MInt32ByteIndirect 							; else do it as integer.
.2ea1					_IsFPOperation:
.2ea1	8a		txa				txa 								; call the relevant fp routine
.2ea2	a2 0a		ldx #$0a		ldx	#10
.2ea4	20 65 20	jsr $2065		jsr	floatingpointHandler
.2ea7	aa		tax				tax
.2ea8	60		rts				rts
.2ea9					PowerHandler:
.2ea9	20 86 2f	jsr $2f86			jsr 	DereferenceTwo
.2eac	20 89 2d	jsr $2d89			jsr 	BinaryProcess 				; check to see if either is float
.2eaf	b0 03		bcs $2eb4			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.2eb1	4c bc 2e	jmp $2ebc			jmp 	PowerInteger 							; else do it as integer.
.2eb4					_IsFPOperation:
.2eb4	8a		txa				txa 								; call the relevant fp routine
.2eb5	a2 18		ldx #$18		ldx	#24
.2eb7	20 65 20	jsr $2065		jsr	floatingpointHandler
.2eba	aa		tax				tax
.2ebb	60		rts				rts
.2ebc					PowerInteger:
.2ebc	20 a3 2d	jsr $2da3			jsr 	BPMakeBothFloat				; make them float.
.2ebf	8a		txa				txa
.2ec0	a2 18		ldx #$18		ldx	#24
.2ec2	20 65 20	jsr $2065		jsr	floatingpointHandler
.2ec5	a2 14		ldx #$14		ldx	#20
.2ec7	20 65 20	jsr $2065		jsr	floatingpointHandler
.2eca	aa		tax				tax
.2ecb	a9 00		lda #$00			lda 	#0 							; make type integer
.2ecd	95 90		sta $90,x			sta 	esType,x
.2ecf	60		rts				rts
.2ed0					Mint32WordIndirect:
.2ed0	a9 80		lda #$80	 		lda 	#$80 				 		; word reference type (bit 7 set)
.2ed2	d0 02		bne $2ed6			bne 	Min32Indirect
.2ed4					Mint32ByteIndirect:
.2ed4	a9 a0		lda #$a0			lda 	#$A0 						; byte reference type (bit 7, bit 5 set)
.2ed6					Min32Indirect:
.2ed6	48		pha				pha 								; save the indirection
.2ed7	20 e1 36	jsr $36e1			jsr 	MInt32Add 					; add a!b a?b
.2eda	68		pla				pla 								; and set the type to reference.
.2edb	95 90		sta $90,x			sta 	esType,x 	 				; so a!b => a+b and it's a reference....
.2edd	60		rts				rts
.2ede					Mint32ShiftLeftX:
.2ede	18		clc				clc 								; CC shift left
.2edf	90 01		bcc $2ee2			bcc 	Mint32Shift
.2ee1					Mint32ShiftRightX:
.2ee1	38		sec				sec 								; CS shift right
.2ee2					Mint32Shift:
.2ee2	08		php				php 								; save carry flag on stack.
.2ee3	b5 a1		lda $a1,x			lda 	esInt1+1,x 					; if shift >= 32 then it is zero.
.2ee5	15 a9		ora $a9,x			ora 	esInt2+1,x
.2ee7	15 b1		ora $b1,x			ora 	esInt3+1,x
.2ee9	d0 1e		bne $2f09			bne 	_MShiftZero
.2eeb	b5 99		lda $99,x			lda 	esInt0+1,x
.2eed	c9 20		cmp #$20			cmp 	#32
.2eef	b0 18		bcs $2f09			bcs 	_MShiftZero
.2ef1					_MShiftLoop:
.2ef1	b5 99		lda $99,x			lda 	esInt0+1,x 					; check count is zero
.2ef3	f0 12		beq $2f07			beq 	_MShiftExit
.2ef5	d6 99		dec $99,x			dec 	esInt0+1,x
.2ef7	28		plp				plp 								; restore and save carry
.2ef8	08		php				php
.2ef9	90 06		bcc $2f01			bcc 	_MShiftLeft 				; and shift left/right accordingly.
.2efb	20 1b 38	jsr $381b			jsr 	Mint32ShiftRight
.2efe	4c f1 2e	jmp $2ef1			jmp 	_MShiftLoop
.2f01					_MShiftLeft:
.2f01	20 12 38	jsr $3812			jsr 	Mint32ShiftLeft
.2f04	4c f1 2e	jmp $2ef1			jmp 	_MShiftLoop
.2f07					_MShiftExit:
.2f07	28		plp				plp	 								; throw saved carry and exit
.2f08	60		rts				rts
.2f09					_MShiftZero:
.2f09	4c fd 37	jmp $37fd			jmp 	MInt32False 				; return 0 as shifted >= 32 times.

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/binary/compare.asm

.2f0c					PerformComparison:
.2f0c	20 86 2f	jsr $2f86			jsr 	DereferenceTwo 				; make both values.
.2f0f	b5 90		lda $90,x			lda 	esType,x 					; check for two strings.
.2f11	35 91		and $91,x			and 	esType+1,x
.2f13	0a		asl a				asl 	a 							; bit 7 set if both bit 6s were set.
.2f14	30 1d		bmi $2f33			bmi 	_PCIsString
.2f16	b5 90		lda $90,x			lda 	esType,x 					; check either is floating point.
.2f18	15 91		ora $91,x			ora 	esType+1,x
.2f1a	0a		asl a				asl 	a 							; shift bit 6 (string) to bit 7, mixed types
.2f1b	30 22		bmi $2f3f			bmi 	_PCError
.2f1d	29 02		and #$02			and 	#$02 						; because of ASL, check type in bit 0
.2f1f	f0 0f		beq $2f30			beq 	_PCIsInteger 				; if not two integers, e.g. 1 of the bits is set
.2f21	20 a3 2d	jsr $2da3			jsr 	BPMakeBothFloat 			; make both float
.2f24	8a		txa				txa
.2f25	a2 06		ldx #$06		ldx	#6
.2f27	20 65 20	jsr $2065		jsr	floatingpointHandler
.2f2a	86 32		stx $32				stx 	tempShort 					; save result
.2f2c	aa		tax				tax
.2f2d	a5 32		lda $32				lda 	tempShort
.2f2f	60		rts				rts
.2f30					_PCIsInteger:
.2f30	4c 9d 35	jmp $359d			jmp 	MInt32Compare
.2f33					_PCIsString:
.2f33	8a		txa				txa 								; A has SP
.2f34	a2 0a		ldx #$0a		ldx	#10
.2f36	20 a8 3b	jsr $3ba8		jsr	stringHandler
.2f39	86 32		stx $32				stx 	tempShort 					; save result
.2f3b	aa		tax				tax 								; put SP back in X and get result.
.2f3c	a5 32		lda $32				lda 	tempShort
.2f3e	60		rts				rts
.2f3f					_PCError:
.2f3f	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.2f41	20 18 15	jsr $1518		jsr	errorHandler
.2f44					CompareEquals:
.2f44	20 0c 2f	jsr $2f0c			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.2f47	c9 00		cmp #$00			cmp 	#$00 						; and we do something if it is = or <> a value.
.2f49	f0 35		beq $2f80			beq  	CompareTrue
.2f4b	4c 83 2f	jmp $2f83			jmp 	CompareFalse
.2f4e					CompareLess:
.2f4e	20 0c 2f	jsr $2f0c			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.2f51	c9 ff		cmp #$ff			cmp 	#$FF 						; and we do something if it is = or <> a value.
.2f53	f0 2b		beq $2f80			beq  	CompareTrue
.2f55	4c 83 2f	jmp $2f83			jmp 	CompareFalse
.2f58					CompareGreater:
.2f58	20 0c 2f	jsr $2f0c			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.2f5b	c9 01		cmp #$01			cmp 	#$01 						; and we do something if it is = or <> a value.
.2f5d	f0 21		beq $2f80			beq  	CompareTrue
.2f5f	4c 83 2f	jmp $2f83			jmp 	CompareFalse
.2f62					CompareNotEquals:
.2f62	20 0c 2f	jsr $2f0c			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.2f65	c9 00		cmp #$00			cmp 	#$00 						; and we do something if it is = or <> a value.
.2f67	d0 17		bne $2f80			bne  	CompareTrue
.2f69	4c 83 2f	jmp $2f83			jmp 	CompareFalse
.2f6c					CompareGreaterEq:
.2f6c	20 0c 2f	jsr $2f0c			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.2f6f	c9 ff		cmp #$ff			cmp 	#$FF 						; and we do something if it is = or <> a value.
.2f71	d0 0d		bne $2f80			bne  	CompareTrue
.2f73	4c 83 2f	jmp $2f83			jmp 	CompareFalse
.2f76					CompareLessEq:
.2f76	20 0c 2f	jsr $2f0c			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.2f79	c9 01		cmp #$01			cmp 	#$01 						; and we do something if it is = or <> a value.
.2f7b	d0 03		bne $2f80			bne  	CompareTrue
.2f7d	4c 83 2f	jmp $2f83			jmp 	CompareFalse
.2f80					CompareTrue:
.2f80	4c f9 37	jmp $37f9			jmp 	MInt32True
.2f83					CompareFalse:
.2f83	4c fd 37	jmp $37fd			jmp 	MInt32False

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/dereference.asm

.2f86					DereferenceTwo:
.2f86	e8		inx				inx
.2f87	20 8b 2f	jsr $2f8b			jsr 	DereferenceOne
.2f8a	ca		dex				dex
.2f8b					DereferenceOne:
.2f8b	b5 90		lda $90,x			lda 	esType,x
.2f8d	10 3d		bpl $2fcc			bpl 	_DRNotReference 			; is it a reference ? if not, we don't need to do anything
.2f8f	4a		lsr a				lsr 	a 							; do float dereference if bit 0 set.
.2f90	b0 3b		bcs $2fcd			bcs 	_DRFloatDeReference
.2f92	98		tya				tya
.2f93	48		pha				pha
.2f94	b5 98		lda $98,x			lda 	esInt0,x 					; copy address to temp0
.2f96	85 2a		sta $2a				sta 	temp0
.2f98	b5 a0		lda $a0,x			lda 	esInt1,x
.2f9a	85 2b		sta $2b				sta 	temp0+1
.2f9c	a9 00		lda #$00			lda 	#0 							; clear esInt1..3
.2f9e	95 a0		sta $a0,x			sta 	esInt1,x
.2fa0	95 a8		sta $a8,x			sta 	esInt2,x
.2fa2	95 b0		sta $b0,x			sta 	esInt3,x
.2fa4	b5 90		lda $90,x			lda 	esType,x 					; get the type byte.
.2fa6	29 60		and #$60			and 	#$60 						; get string flag ($40) and byte flag ($20)
.2fa8	0a		asl a				asl 	a 							; now string ($80) byte ($40)
.2fa9	30 0d		bmi $2fb8			bmi 	_DeRefString 				; string, 2 bytes only
.2fab	d0 11		bne $2fbe			bne 	_DeRefByte 					; byte 1 byte only
.2fad					_DeRefLong:
.2fad	a0 03		ldy #$03			ldy 	#3
.2faf	b1 2a		lda ($2a),y			lda 	(temp0),y
.2fb1	95 b0		sta $b0,x			sta 	esInt3,x
.2fb3	88		dey				dey
.2fb4	b1 2a		lda ($2a),y			lda 	(temp0),y
.2fb6	95 a8		sta $a8,x			sta 	esInt2,x
.2fb8					_DeRefString:
.2fb8	a0 01		ldy #$01			ldy 	#1
.2fba	b1 2a		lda ($2a),y			lda 	(temp0),y
.2fbc	95 a0		sta $a0,x			sta 	esInt1,x
.2fbe					_DeRefByte:
.2fbe	a0 00		ldy #$00			ldy 	#0
.2fc0	b1 2a		lda ($2a),y			lda 	(temp0),y
.2fc2	95 98		sta $98,x			sta 	esInt0,x
.2fc4	b5 90		lda $90,x			lda 	esType,x 					; clear byte and deref bits.
.2fc6	29 40		and #$40			and 	#$40
.2fc8	95 90		sta $90,x			sta 	esType,x
.2fca	68		pla				pla
.2fcb	a8		tay				tay
.2fcc					_DRNotReference
.2fcc	60		rts				rts
.2fcd					_DRFloatDereference:
.2fcd	20 57 25	jsr $2557			jsr 	TOSToTemp0 					; address to deref in temp0
.2fd0	8a		txa				txa
.2fd1	a2 1e		ldx #$1e		ldx	#30
.2fd3	20 65 20	jsr $2065		jsr	floatingpointHandler
.2fd6	aa		tax				tax
.2fd7	a9 01		lda #$01			lda 	#$01 						; type to FP (float)
.2fd9	95 90		sta $90,x			sta 	esType,x
.2fdb	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/evaluate.asm

.2fdc					EvaluateLevel:
.2fdc	e0 08		cpx #$08			cpx 	#StackSize 					; check stack overflow
.2fde	b0 1e		bcs $2ffe			bcs 	_ELStack
.2fe0	48		pha				pha 								; save precedence level.
.2fe1	a9 00		lda #$00			lda 	#0 							; zero the current stack level.
.2fe3	95 98		sta $98,x			sta 	esInt0,x
.2fe5	95 a0		sta $a0,x			sta 	esInt1,x
.2fe7	95 a8		sta $a8,x			sta 	esInt2,x
.2fe9	95 b0		sta $b0,x			sta 	esInt3,x
.2feb	95 90		sta $90,x			sta 	esType,x 					; zero the type (integer value)
.2fed	b1 28		lda ($28),y			lda 	(codePtr),y	 				; look at first token/character
.2fef	30 26		bmi $3017			bmi 	_ELIsToken 					; if -ve could be string, float, or unary function.
.2ff1	0a		asl a				asl 	a 							; if 00-3F then will now be PL and it's a variable.
.2ff2	30 0f		bmi $3003			bmi 	_ELIsConstant 				; 40-7F will be -ve and that's an integer constant.
.2ff4	8a		txa				txa 								; stack level in X
.2ff5	a2 02		ldx #$02		ldx	#2
.2ff7	20 d8 47	jsr $47d8		jsr	variableHandler
.2ffa	aa		tax				tax
.2ffb	4c 40 30	jmp $3040			jmp		_ELHasTerm
.2ffe					_ELStack:
.2ffe	a2 23		ldx #$23			ldx 	#ErrorID_NumStack
.3000	20 18 15	jsr $1518		jsr	errorHandler
.3003					_ELIsConstant:
.3003	4a		lsr a				lsr 	a 							; get the value back
.3004	29 3f		and #$3f			and 	#$3F 						; force into range 0-63
.3006	95 98		sta $98,x			sta 	esInt0,x 					; and put in LSB.
.3008					_ELCheckNext:
.3008	c8		iny				iny 								; look at next
.3009	b1 28		lda ($28),y			lda 	(codePtr),y
.300b	49 40		eor #$40			eor 	#$40 						; shift around so 40-7F => 00-3F
.300d	c9 40		cmp #$40			cmp 	#$40 						; out of range ?
.300f	b0 2f		bcs $3040			bcs 	_ELHasTerm 					; done getting the constant.
.3011	20 d9 30	jsr $30d9			jsr 	ELShiftByteIn 				; shift byte into position.
.3014	4c 08 30	jmp $3008			jmp 	_ELCheckNext
.3017					_ELIsToken:
.3017	c9 85		cmp #$85			cmp 	#TOK_STR 					; handle strings.
.3019	f0 0f		beq $302a			beq 	_ELIsString
.301b	c9 84		cmp #$84			cmp 	#TOK_FPC 					; if no, then check unary.
.301d	d0 5f		bne $307e			bne 	_ELCheckUnary
.301f	8a		txa				txa 								; put X into A
.3020	c8		iny				iny 								; skip over the float marker
.3021	a2 1a		ldx #$1a		ldx	#26
.3023	20 65 20	jsr $2065		jsr	floatingpointHandler
.3026	aa		tax				tax 								; restore X
.3027	4c 40 30	jmp $3040			jmp 	_ELHasTerm
.302a					_ELIsString:
.302a	98		tya				tya 								; address of string is codePtr+y+1
.302b	38		sec				sec
.302c	65 28		adc $28				adc 	codePtr
.302e	95 98		sta $98,x			sta 	esInt0,x
.3030	a5 29		lda $29				lda 	codePtr+1
.3032	69 00		adc #$00			adc 	#0
.3034	95 a0		sta $a0,x			sta 	esInt1,x
.3036	a9 40		lda #$40			lda 	#$40 						; set type to string value
.3038	95 90		sta $90,x			sta 	esType,x
.303a	c8		iny				iny 								; skip over string.
.303b	98		tya				tya
.303c	38		sec				sec									; +1 for the length itself.
.303d	71 28		adc ($28),y			adc 	(codePtr),y
.303f	a8		tay				tay 								; and fall through to term loop code.
.3040					_ELHasTerm:
.3040	b1 28		lda ($28),y			lda 	(codePtr),y
.3042	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; check in the correct range for binary tokens.
.3044	90 04		bcc $304a			bcc 	_ELPopExit
.3046	c9 99		cmp #$99			cmp 	#TOK_STRUCTST
.3048	90 02		bcc $304c			bcc 	_ELHasBinaryTerm
.304a					_ELPopExit:
.304a	68		pla				pla
.304b					_ELExit:
.304b	60		rts				rts
.304c					_ELHasBinaryTerm:
.304c	84 32		sty $32				sty 	tempShort 					; save position
.304e	a8		tay				tay 								; use token as an index and get the precedence.
.304f	b9 81 30	lda $3081,y			lda 	ELBinaryOperatorInfo-TOK_BINARYST,y
.3052	a4 32		ldy $32				ldy 	tempShort 					; restore Y
.3054	85 32		sta $32				sta 	tempShort 					; save precedence in memory.
.3056	68		pla				pla 								; restore current level.
.3057	c5 32		cmp $32				cmp 	tempShort 					; if current >= operator then exit
.3059	b0 f0		bcs $304b			bcs 	_ELExit
.305b	48		pha				pha 								; save current level back on the stack.
.305c	b1 28		lda ($28),y			lda 	(codePtr),y 				; save the binary operator on the stack and skip it.
.305e	48		pha				pha
.305f	c8		iny				iny
.3060	e8		inx				inx 								; calculate the RHS at the operator precedence.
.3061	a5 32		lda $32				lda 	tempShort
.3063	20 dc 2f	jsr $2fdc			jsr 	EvaluateLevel
.3066	ca		dex				dex
.3067	68		pla				pla 								; get the operator back out.
.3068					_ELExecuteA:
.3068	86 32		stx $32				stx 	tempShort 					; upload the vectors. Would be nice to use jmp (aaaa,x)
.306a	0a		asl a				asl 	a 							; but not practical. May use push/rts later.
.306b	aa		tax				tax
.306c	bd 9d 2c	lda $2c9d,x			lda 	Group0Vectors,x
.306f	85 2a		sta $2a				sta 	temp0
.3071	bd 9e 2c	lda $2c9e,x			lda 	Group0Vectors+1,x
.3074	85 2b		sta $2b				sta 	temp0+1
.3076	a6 32		ldx $32				ldx 	tempShort
.3078	20 c5 30	jsr $30c5			jsr 	_ELCallTemp0
.307b	4c 40 30	jmp $3040			jmp 	_ELHasTerm 					; and loop back round.
.307e					_ELCheckUnary:
.307e	c8		iny				iny 								; skip over token.
.307f	c9 90		cmp #$90			cmp 	#TKW_MINUS 					; is it - term
.3081	f0 19		beq $309c			beq 	_ELMinus
.3083	c9 97		cmp #$97			cmp 	#TKW_PLING 					; is it ! or ? term
.3085	f0 2c		beq $30b3			beq 	_ELIndirect
.3087	c9 98		cmp #$98			cmp 	#TKW_QMARK
.3089	f0 28		beq $30b3			beq 	_ELIndirect
.308b	c9 83		cmp #$83			cmp 	#TOK_SHIFT3 				; is it the unary extension.
.308d	f0 39		beq $30c8			beq 	_ELExtension
.308f	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST 				; must be TOK_UNARYST ... TOK_TOKENS
.3091	90 04		bcc $3097			bcc 	_ELUSyntax
.3093	c9 c9		cmp #$c9			cmp 	#TOK_TOKENS
.3095	90 d1		bcc $3068			bcc 	_ELExecuteA 				; if so do that token.
.3097					_ELUSyntax:
.3097	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.3099	20 18 15	jsr $1518		jsr	errorHandler
.309c					_ELMinus:
.309c	20 2e 31	jsr $312e			jsr 	EvaluateNumericTerm 		; get a number to negate.
.309f	b5 90		lda $90,x			lda 	esType,x 					; is it integer
.30a1	f0 0a		beq $30ad			beq 	_ELMinusInteger
.30a3	8a		txa				txa
.30a4	a2 0e		ldx #$0e		ldx	#14
.30a6	20 65 20	jsr $2065		jsr	floatingpointHandler
.30a9	aa		tax				tax
.30aa	4c 40 30	jmp $3040			jmp 	_ELHasTerm
.30ad					_ELMinusInteger:
.30ad	20 b7 37	jsr $37b7			jsr 	MInt32Negate 				; do int negate
.30b0	4c 40 30	jmp $3040			jmp 	_ELHasTerm
.30b3					_ELIndirect:
.30b3	48		pha				pha 								; save what we want (TKW_QMARK TWK_PLING)
.30b4	20 37 31	jsr $3137			jsr 	EvaluateIntegerTerm 		; integer address
.30b7	68		pla				pla
.30b8	49 97		eor #$97			eor 	#TKW_PLING 					; now $00 if !
.30ba	f0 02		beq $30be			beq 	_ELHaveModifier
.30bc	a9 20		lda #$20			lda 	#$20 						; now $00 if !, $20 if ?
.30be					_ELHaveModifier:
.30be	09 80		ora #$80			ora 	#$80						; make it the appropriate reference.
.30c0	95 90		sta $90,x			sta 	esType,x 					; $80 for ! $A0 for ?
.30c2	4c 40 30	jmp $3040			jmp 	_ELHasTerm
.30c5					_ELCallTemp0:
.30c5	6c 2a 00	jmp ($002a)			jmp 	(temp0)
.30c8					_ELExtension:
.30c8	8a		txa				txa 								; stack pos in A
.30c9	20 69 18	jsr $1869		jsr	extensionHandler
.30cc	aa		tax				tax 								; restore stack
.30cd	4c 40 30	jmp $3040			jmp 	_ELHasTerm
.30d0					UnaryParenthesis:
.30d0	a9 00		lda #$00			lda 	#0 							; ( is a unary function ....
.30d2	20 dc 2f	jsr $2fdc			jsr 	EvaluateLevel
.30d5	20 70 38	jsr $3870			jsr 	CheckRightParen 			; check for )
.30d8	60		rts				rts
.30d9					ELShiftByteIn:
.30d9	48		pha				pha 								; save bits to shift in.
.30da	b5 b0		lda $b0,x			lda 	esInt3,x 					; save top most byte
.30dc	48		pha				pha
.30dd	b5 a8		lda $a8,x			lda 	esInt2,x 					; shift everything left 8 bits
.30df	95 b0		sta $b0,x			sta 	esInt3,x
.30e1	b5 a0		lda $a0,x			lda 	esInt1,x
.30e3	95 a8		sta $a8,x			sta 	esInt2,x
.30e5	b5 98		lda $98,x			lda 	esInt0,x
.30e7	95 a0		sta $a0,x			sta 	esInt1,x
.30e9	a9 00		lda #$00			lda 	#0
.30eb	95 98		sta $98,x			sta 	esInt0,x
.30ed	68		pla				pla 								; now A:TOS is a 5 byte register, shift right twice.
.30ee	29 03		and #$03			and 	#3 							; only want lower 2 bits
.30f0	09 04		ora #$04			ora 	#4  						; set bit 2 - when 1 we are done
.30f2					_ELShiftLoop:
.30f2	4a		lsr a				lsr 	a
.30f3	76 b0		ror $b0,x			ror 	esInt3,x
.30f5	76 a8		ror $a8,x			ror 	esInt2,x
.30f7	76 a0		ror $a0,x			ror 	esInt1,x
.30f9	76 98		ror $98,x			ror 	esInt0,x
.30fb	c9 01		cmp #$01			cmp 	#1
.30fd	d0 f3		bne $30f2			bne 	_ELShiftLoop
.30ff	68		pla				pla 								; get original 6 bit value and OR in.
.3100	29 3f		and #$3f			and 	#$3F
.3102	15 98		ora $98,x			ora 	esInt0,x
.3104	95 98		sta $98,x			sta 	esInt0,x
.3106	60		rts				rts
.3107					ELBinaryOperatorInfo:

;******  Processing file: main/evaluate/../../generated/binarystructinfo.inc

>3107	01					.byte	$01			; $86 and
>3108	01					.byte	$01			; $87 or
>3109	01					.byte	$01			; $88 xor
>310a	02					.byte	$02			; $89 >=
>310b	02					.byte	$02			; $8a <=
>310c	02					.byte	$02			; $8b >
>310d	02					.byte	$02			; $8c <
>310e	02					.byte	$02			; $8d =
>310f	02					.byte	$02			; $8e <>
>3110	03					.byte	$03			; $8f +
>3111	03					.byte	$03			; $90 -
>3112	04					.byte	$04			; $91 >>
>3113	04					.byte	$04			; $92 <<
>3114	04					.byte	$04			; $93 *
>3115	04					.byte	$04			; $94 /
>3116	04					.byte	$04			; $95 mod
>3117	05					.byte	$05			; $96 ^
>3118	06					.byte	$06			; $97 !
>3119	06					.byte	$06			; $98 ?
>311a	82					.byte	$82			; $99 repeat
>311b	82					.byte	$82			; $9a while
>311c	82					.byte	$82			; $9b for
>311d	82					.byte	$82			; $9c if
>311e	82					.byte	$82			; $9d defproc
>311f	80					.byte	$80			; $9e until
>3120	80					.byte	$80			; $9f wend
>3121	80					.byte	$80			; $a0 next
>3122	80					.byte	$80			; $a1 then
>3123	80					.byte	$80			; $a2 endif
>3124	80					.byte	$80			; $a3 endproc

;******  Return to file: main/evaluate/evaluate.asm


;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/support.asm

.3125					EvaluateTerm:
.3125	a9 0f		lda #$0f			lda 	#15 						; no binary operator has this high a precedence.
.3127	20 dc 2f	jsr $2fdc			jsr 	EvaluateLevel
.312a	20 8b 2f	jsr $2f8b			jsr 	DereferenceOne
.312d	60		rts				rts
.312e					EvaluateNumericTerm:
.312e	20 25 31	jsr $3125			jsr 	EvaluateTerm
.3131	b5 90		lda $90,x			lda 	esType,x
.3133	0a		asl a				asl 	a 							; see if it's a string.
.3134	30 09		bmi $313f			bmi 	ENTType
.3136	60		rts				rts
.3137					EvaluateIntegerTerm:
.3137	20 25 31	jsr $3125			jsr 	EvaluateTerm
.313a	b5 90		lda $90,x			lda 	esType,x
.313c	d0 01		bne $313f			bne 	ENTType
.313e	60		rts				rts
.313f					ENTType:
.313f	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.3141	20 18 15	jsr $1518		jsr	errorHandler
.3144					EvaluateRoot:
.3144	a2 00		ldx #$00			ldx 	#0
.3146					Evaluate:
.3146	a9 00		lda #$00			lda 	#0
.3148	20 dc 2f	jsr $2fdc			jsr 	EvaluateLevel
.314b	20 8b 2f	jsr $2f8b			jsr 	DereferenceOne
.314e	60		rts				rts
.314f					EvaluateNumeric:
.314f	20 46 31	jsr $3146			jsr 	Evaluate
.3152	b5 90		lda $90,x			lda 	esType,x
.3154	0a		asl a				asl 	a 							; see if it's a string.
.3155	30 e8		bmi $313f			bmi 	ENTType
.3157	4a		lsr a				lsr 	a 							; shift float flag into carry.
.3158	4a		lsr a				lsr 	a
.3159	60		rts				rts
.315a					EvaluateString:
.315a	20 46 31	jsr $3146			jsr 	Evaluate
.315d	b5 90		lda $90,x			lda 	esType,x
.315f	0a		asl a				asl 	a 							; see if it's a string.
.3160	10 dd		bpl $313f			bpl 	ENTType
.3162	60		rts				rts
.3163					EvaluateRootInteger:
.3163	a2 00		ldx #$00			ldx 	#0
.3165					EvaluateInteger:
.3165	20 46 31	jsr $3146			jsr 	Evaluate
.3168	b5 90		lda $90,x			lda 	esType,x
.316a	d0 d3		bne $313f			bne 	ENTType
.316c	60		rts				rts
.316d					EvaluateSmallInteger:
.316d	20 65 31	jsr $3165			jsr 	EvaluateInteger
.3170	b5 a0		lda $a0,x			lda 	esInt1,x
.3172	15 a8		ora $a8,x			ora 	esInt2,x
.3174	15 b0		ora $b0,x			ora 	esInt3,x
.3176	d0 03		bne $317b			bne 	_ESIValue
.3178	b5 98		lda $98,x			lda 	esInt0,x
.317a	60		rts				rts
.317b					_ESIValue:
.317b	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.317d	20 18 15	jsr $1518		jsr	errorHandler
.3180					LinkEvaluate:
.3180	aa		tax				tax
.3181	20 46 31	jsr $3146			jsr 	Evaluate
.3184	8a		txa				txa
.3185	60		rts				rts
.3186					LinkEvaluateTerm:
.3186	aa		tax				tax
.3187	20 25 31	jsr $3125			jsr 	EvaluateTerm
.318a	8a		txa				txa
.318b	60		rts				rts
.318c					LinkEvaluateInteger:
.318c	aa		tax				tax
.318d	20 65 31	jsr $3165			jsr 	EvaluateInteger
.3190	8a		txa				txa
.3191	60		rts				rts
.3192					LinkEvaluateString:
.3192	aa		tax				tax
.3193	20 5a 31	jsr $315a			jsr 	EvaluateString
.3196	8a		txa				txa
.3197	60		rts				rts
.3198					LinkEvaluateSmallInt:
.3198	aa		tax				tax
.3199	20 6d 31	jsr $316d			jsr 	EvaluateSmallInteger
.319c	8a		txa				txa
.319d	60		rts				rts
.319e					EvaluateReference:
.319e	ad 18 31	lda $3118			lda 	ELBinaryOperatorInfo+TKW_PLING-TOK_BINARYST
.31a1	38		sec				sec 								; sub 1 to allow a!x b?x to work.
.31a2	e9 01		sbc #$01			sbc 	#1
.31a4	20 dc 2f	jsr $2fdc			jsr 	EvaluateLevel
.31a7	b5 90		lda $90,x			lda 	esType,x
.31a9	10 01		bpl $31ac			bpl 	_ERFail
.31ab	60		rts				rts
.31ac					_ERFail:
.31ac	a2 0b		ldx #$0b			ldx 	#ErrorID_NoReference
.31ae	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary/convert.asm

.31b1					Event_Str:
.31b1	20 4f 31	jsr $314f			jsr 	EvaluateNumeric 			; get a number.
.31b4	b5 90		lda $90,x			lda 	esType,x 					; is it floating point
.31b6	d0 13		bne $31cb			bne 	_ESFloat
.31b8	20 0e 32	jsr $320e			jsr 	ConvertGetBase 				; get base, or default.
.31bb	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.31bd	85 2a		sta $2a				sta 	temp0
.31bf	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.31c1	85 2b		sta $2b				sta 	1+(temp0)
.31c3	b5 99		lda $99,x			lda 	esInt0+1,x 					; get the base
.31c5	20 53 37	jsr $3753			jsr 	MInt32ToString 				; convert to string.
.31c8	4c d8 31	jmp $31d8			jmp 	_ESCloneExit 				; clone and exit.
.31cb					_ESFloat:
.31cb	20 70 38	jsr $3870			jsr 	CheckRightParen 			; check closing )
.31ce	20 57 25	jsr $2557			jsr 	TOSToTemp0 					; string address in temp0, goes here.
.31d1	8a		txa				txa
.31d2	a2 16		ldx #$16		ldx	#22
.31d4	20 65 20	jsr $2065		jsr	floatingpointHandler
.31d7	aa		tax				tax
.31d8					_ESCloneExit:
.31d8	8a		txa				txa
.31d9	a2 04		ldx #$04		ldx	#4
.31db	20 a8 3b	jsr $3ba8		jsr	stringHandler
.31de	aa		tax				tax
.31df	60		rts				rts
.31e0					UnaryVal:
.31e0	38		sec				sec 								; Carry set to return value
.31e1	b0 01		bcs $31e4			bcs 	ValueMain
.31e3					UnaryIsVal:
.31e3	18		clc				clc									; Carry clear to return legitimacy
.31e4					ValueMain:
.31e4	08		php				php 								; save results (CS is value, CC is validation)
.31e5	20 5a 31	jsr $315a			jsr 	EvaluateString
.31e8	20 0e 32	jsr $320e			jsr 	ConvertGetBase 				; get base, if any.
.31eb	98		tya				tya
.31ec	48		pha				pha
.31ed	20 57 25	jsr $2557			jsr 	TOSToTemp0 					; string address in temp0, goes here.
.31f0	b5 99		lda $99,x			lda 	esInt0+1,x 					; get the base
.31f2	29 7f		and #$7f			and 	#$7F 						; ignore the sign bit.
.31f4	20 6b 36	jsr $366b			jsr 	MInt32FromString 			; convert it back from a string.
.31f7	b0 0c		bcs $3205			bcs 	_VMSuccess 					; successfully converted.
.31f9	b5 99		lda $99,x			lda 	esInt0+1,x 					; is base the default
.31fb	c9 8a		cmp #$8a			cmp 	#$80+10 					; if no, then it is integer only.
.31fd	f0 00		beq $31ff			beq 	_VMFailed 	 				; so we failed.
.31ff					_VMFailed:
.31ff	68		pla				pla
.3200	a8		tay				tay
.3201	28		plp				plp
.3202	4c fd 37	jmp $37fd			jmp 	MInt32False 				; return 0 whatever.
.3205					_VMSuccess:
.3205	68		pla				pla
.3206	a8		tay				tay
.3207	28		plp				plp 								; if CS the it was val() so we want the value.
.3208	b0 03		bcs $320d			bcs 	_VMExit
.320a	4c f9 37	jmp $37f9			jmp 	MInt32True 					; otherwise return true as successful.
.320d					_VMExit:
.320d	60		rts				rts
.320e					ConvertGetBase:
.320e	a9 8a		lda #$8a			lda 	#10+$80 					; default base 10 signed.
.3210	95 99		sta $99,x			sta 	esInt0+1,x
.3212	b1 28		lda ($28),y			lda 	(codePtr),y 				; check for ,base)
.3214	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.3216	d0 0e		bne $3226			bne 	_CGBDone 					; not found, should be )
.3218	e8		inx				inx 								; next level
.3219	c8		iny				iny 								; skip comma.
.321a	20 6d 31	jsr $316d			jsr 	EvaluateSmallInteger		; evaluate the base.
.321d	ca		dex				dex
.321e	c9 02		cmp #$02			cmp 	#2 							; base range is 2..16
.3220	90 08		bcc $322a			bcc 	_CGBValue 					; (it should work as high as 37)
.3222	c9 11		cmp #$11			cmp 	#17
.3224	b0 04		bcs $322a			bcs 	_CGBValue
.3226					_CGBDone:
.3226	20 70 38	jsr $3870			jsr 	CheckRightParen
.3229	60		rts				rts
.322a					_CGBValue:
.322a	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.322c	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary/event.asm

.322f					EventFunction:
.322f	20 9e 31	jsr $319e			jsr 	EvaluateReference			; get the variable reference that tracks the event
.3232	b5 90		lda $90,x			lda 	esType,x
.3234	c9 80		cmp #$80			cmp 	#$80 						; must be integer reference
.3236	d0 5b		bne $3293			bne 	_EFType
.3238	20 7d 38	jsr $387d			jsr 	CheckComma
.323b	e8		inx				inx
.323c	20 65 31	jsr $3165			jsr 	EvaluateInteger		 		; get the elapsed time between firing.
.323f	20 70 38	jsr $3870			jsr 	CheckRightParen 			; finish off with the right bracket
.3242	ca		dex				dex
.3243	b5 a0		lda $a0,x			lda 	esInt1,x 					; check max of 32767, we use 16 bit for timers and
.3245	29 80		and #$80			and 	#$80 						; it doesn't work > 32767
.3247	15 a8		ora $a8,x			ora 	esInt2,x
.3249	15 b0		ora $b0,x			ora 	esInt3,x
.324b	d0 41		bne $328e			bne 	_EFValue
.324d	98		tya				tya
.324e	48		pha				pha
.324f	8a		txa				txa
.3250	48		pha				pha
.3251	a2 1c		ldx #$1c		ldx	#28
.3253	20 f6 14	jsr $14f6		jsr	deviceHandler
.3256	84 2d		sty $2d				sty 	temp1+1
.3258	85 2c		sta $2c				sta 	temp1
.325a	68		pla				pla
.325b	aa		tax				tax
.325c	20 57 25	jsr $2557			jsr 	TOSToTemp0 					; set temp0 to the address of the event variable
.325f	a0 03		ldy #$03			ldy 	#3							; if -ve
.3261	b1 2a		lda ($2a),y			lda 	(temp0),y
.3263	30 23		bmi $3288			bmi 	_EFFail 	 				; straight out with fail, means "on pause".
.3265	a0 00		ldy #$00			ldy 	#0 							; is the fire time zero ?
.3267	b1 2a		lda ($2a),y			lda 	(temp0),y
.3269	c8		iny				iny
.326a	11 2a		ora ($2a),y			ora 	(temp0),y
.326c	f0 17		beq $3285			beq 	_EFInitialise 				; if so, initialise the value but return false.
.326e	a0 00		ldy #$00			ldy 	#0 							; calculate trigger - timer
.3270	38		sec				sec
.3271	b1 2a		lda ($2a),y			lda 	(temp0),y
.3273	e5 2c		sbc $2c				sbc 	temp1
.3275	c8		iny				iny
.3276	b1 2a		lda ($2a),y			lda 	(temp0),y
.3278	e5 2d		sbc $2d				sbc 	temp1+1
.327a	10 0c		bpl $3288			bpl 	_EFFail 					; if trigger >= timer then return False
.327c	20 98 32	jsr $3298			jsr 	SetEventTimer 				; reset the timer for next time.
.327f	20 f9 37	jsr $37f9			jsr	 	MInt32True 					; and treutn true as fired.
.3282	68		pla				pla
.3283	a8		tay				tay
.3284	60		rts				rts
.3285					_EFInitialise:
.3285	20 98 32	jsr $3298			jsr		SetEventTimer 				; set trigger time to time + elapsed
.3288					_EFFail:
.3288	68		pla				pla
.3289	a8		tay				tay
.328a	20 fd 37	jsr $37fd			jsr 	MInt32False
.328d	60		rts				rts
.328e					_EFValue:
.328e	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.3290	20 18 15	jsr $1518		jsr	errorHandler
.3293					_EFType:
.3293	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.3295	20 18 15	jsr $1518		jsr	errorHandler
.3298					SetEventTimer:
.3298	a0 00		ldy #$00			ldy 	#0
.329a	18		clc				clc
.329b	a5 2c		lda $2c				lda 	temp1
.329d	75 99		adc $99,x			adc 	esInt0+1,x
.329f	91 2a		sta ($2a),y			sta		(temp0),y
.32a1	c8		iny				iny
.32a2	a5 2d		lda $2d				lda 	temp1+1
.32a4	75 a1		adc $a1,x			adc 	esInt1+1,x
.32a6	91 2a		sta ($2a),y			sta		(temp0),y
.32a8	88		dey				dey
.32a9	11 2a		ora ($2a),y			ora 	(temp0),y 					; if the result is non zero, exit
.32ab	d0 04		bne $32b1			bne 	_SETExit 					; zero means initialise.....
.32ad	a9 01		lda #$01			lda 	#1 							; timer zero won't work, so make it 1, which is
.32af	91 2a		sta ($2a),y			sta 	(temp0),y 					; near enough.
.32b1					_SETExit:
.32b1	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary/unary.asm

.32b2					UnaryLen:
.32b2	20 c0 32	jsr $32c0			jsr 	ULStart
.32b5					ULFinish:
.32b5	b1 2a		lda ($2a),y			lda 	(temp0),y 					; get length prefix
.32b7	a4 32		ldy $32				ldy 	tempShort 					; get Y back
.32b9	20 0c 38	jsr $380c			jsr 	MInt32Set8Bit 				; write it out.
.32bc	20 70 38	jsr $3870			jsr 	CheckRightParen
.32bf	60		rts				rts
.32c0	20 5a 31	jsr $315a	ULStart:jsr 	EvaluateString
.32c3	b5 98		lda $98,x			lda 	esInt0,x 					; copy address of string to temp0
.32c5	85 2a		sta $2a				sta 	temp0
.32c7	b5 a0		lda $a0,x			lda 	esInt1,x
.32c9	85 2b		sta $2b				sta 	temp0+1
.32cb	84 32		sty $32				sty 	tempShort 					; get length
.32cd	a0 00		ldy #$00			ldy 	#0
.32cf	60		rts				rts
.32d0					UnaryAsc:
.32d0	20 c0 32	jsr $32c0			jsr 	ULStart 					; same as LEN() get string, save Y, point to length.
.32d3	b1 2a		lda ($2a),y			lda 	(temp0),y 					; read length
.32d5	c8		iny				iny 		 						; point to first character, we can do LEN code after that
.32d6	c9 00		cmp #$00			cmp 	#0
.32d8	d0 db		bne $32b5			bne 	ULFinish 					; if length = 0 then error : asc("") -> error.
.32da	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.32dc	20 18 15	jsr $1518		jsr	errorHandler
.32df					UnaryAbs:
.32df	20 4f 31	jsr $314f			jsr 	EvaluateNumeric 			; some numeric value
.32e2	b0 07		bcs $32eb			bcs 	_UAFloat 					; CS then float, so use that function
.32e4	20 b2 37	jsr $37b2			jsr 	MInt32Absolute 				; int version
.32e7	20 70 38	jsr $3870			jsr 	CheckRightParen
.32ea	60		rts				rts
.32eb					_UAFloat:
.32eb	8a		txa				txa 								; float version
.32ec	a2 02		ldx #$02		ldx	#2
.32ee	20 65 20	jsr $2065		jsr	floatingpointHandler
.32f1	aa		tax				tax
.32f2	20 70 38	jsr $3870			jsr 	CheckRightParen
.32f5	60		rts				rts
.32f6					UnarySgn:
.32f6	20 4f 31	jsr $314f			jsr 	EvaluateNumeric 			; same as above but sign of value
.32f9	b0 07		bcs $3302			bcs 	_USFloat
.32fb	20 ea 37	jsr $37ea			jsr 	MInt32Sign
.32fe	20 70 38	jsr $3870			jsr 	CheckRightParen
.3301	60		rts				rts
.3302					_USFloat:
.3302	8a		txa				txa
.3303	a2 10		ldx #$10		ldx	#16
.3305	20 65 20	jsr $2065		jsr	floatingpointHandler
.3308	aa		tax				tax
.3309	20 70 38	jsr $3870			jsr 	CheckRightParen
.330c	60		rts				rts
.330d					UnaryPeek:
.330d	20 39 33	jsr $3339			jsr 	PDLCode 					; each has common setup code put reads 1,2 or 4 bytes
.3310	4c 2d 33	jmp $332d			jmp 	PDLByte0
.3313					UnaryDeek:
.3313	20 39 33	jsr $3339			jsr 	PDLCode
.3316	4c 27 33	jmp $3327			jmp 	PDLByte1
.3319					UnaryLeek:
.3319	20 39 33	jsr $3339			jsr 	PDLCode
.331c	a0 03		ldy #$03			ldy 	#3							; read 3-2
.331e	b1 2a		lda ($2a),y			lda 	(temp0),y
.3320	95 b0		sta $b0,x			sta 	esInt3,x
.3322	88		dey				dey
.3323	b1 2a		lda ($2a),y			lda 	(temp0),y
.3325	95 a8		sta $a8,x			sta 	esInt2,x
.3327					PDLByte1:
.3327	a0 01		ldy #$01			ldy 	#1
.3329	b1 2a		lda ($2a),y			lda 	(temp0),y
.332b	95 a0		sta $a0,x			sta 	esInt1,x
.332d					PDLByte0:
.332d	a0 00		ldy #$00			ldy 	#0
.332f	b1 2a		lda ($2a),y			lda 	(temp0),y
.3331	95 98		sta $98,x			sta 	esInt0,x
.3333	a4 32		ldy $32				ldy 	tempShort 					; restore Y
.3335	20 70 38	jsr $3870			jsr 	CheckRightParen 			; check right and return
.3338	60		rts				rts
.3339					PDLCode:
.3339	20 65 31	jsr $3165			jsr 	EvaluateInteger 			; some address
.333c	b5 98		lda $98,x			lda 	esInt0,x 					; copy address of string to temp0
.333e	85 2a		sta $2a				sta 	temp0
.3340	b5 a0		lda $a0,x			lda 	esInt1,x
.3342	85 2b		sta $2b				sta 	temp0+1
.3344	a9 00		lda #$00			lda 	#0 							; zero upper 3 bytes of result, type okay.
.3346	95 a0		sta $a0,x			sta 	esInt1,x 					; PEEK needs upper 3 cleared
.3348	95 a8		sta $a8,x			sta 	esInt2,x
.334a	95 b0		sta $b0,x			sta 	esInt3,x
.334c	84 32		sty $32				sty 	tempShort 					; save Y
.334e	60		rts				rts
.334f					Unary_Random:
.334f	20 2d 38	jsr $382d			jsr 	MInt32Random 				; generate random number.
.3352	b1 28		lda ($28),y			lda 	(codePtr),y 				; check followed by )
.3354	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.3356	f0 08		beq $3360			beq 	_URExit
.3358	e8		inx				inx 								; load range 0..r-1 into +1
.3359	20 65 31	jsr $3165			jsr 	EvaluateInteger
.335c	ca		dex				dex
.335d	20 50 36	jsr $3650			jsr 	MInt32Modulus 				; calculate random % modulus
.3360					_URExit:
.3360	20 70 38	jsr $3870			jsr 	CheckRightParen 			; check right and return
.3363	60		rts				rts
.3364					Unary_Min:
.3364	a9 01		lda #$01			lda 	#1 							; c1 cmp c2 needs to be > e.g. c1 > c2
.3366	d0 02		bne $336a			bne 	UnaryMBody
.3368					Unary_Max:
.3368	a9 ff		lda #$ff			lda 	#$FF 						; c1 cmp c2 needs to be < e.g. c1 < c2
.336a					UnaryMBody:
.336a	48		pha				pha 								; save comparator on stack, shows min or max
.336b	20 46 31	jsr $3146			jsr 	Evaluate 					; get the first thing to check
.336e					_UnaryMLoop:
.336e	b1 28		lda ($28),y			lda 	(codePtr),y 				; found ), indicates end.
.3370	c8		iny				iny
.3371	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.3373	f0 09		beq $337e			beq 	_UnaryMExit
.3375	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; found , indicates more.
.3377	f0 07		beq $3380			beq 	_UnaryMCompare
.3379	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.337b	20 18 15	jsr $1518		jsr	errorHandler
.337e					_UnaryMExit:
.337e	68		pla				pla 								; done so throw comparator and return.
.337f	60		rts				rts
.3380					_UnaryMCompare:
.3380	e8		inx				inx 								; get the 2nd thing to evaluate
.3381	20 46 31	jsr $3146			jsr 	Evaluate
.3384	ca		dex				dex
.3385	20 0c 2f	jsr $2f0c			jsr 	PerformComparison 			; this is part of evaluate/compare.asm
.3388	85 32		sta $32				sta 	tempShort 					; save result
.338a	68		pla				pla 								; get what we need
.338b	48		pha				pha
.338c	c5 32		cmp $32				cmp 	tempShort 					; did we get it
.338e	d0 de		bne $336e			bne 	_UnaryMLoop 				; no, try another value.
.3390	20 fd 37	jsr $37fd			jsr 	MInt32False 				; promote 2nd to 1st.
.3393	20 e1 36	jsr $36e1			jsr 	MInt32Add
.3396	4c 6e 33	jmp $336e			jmp 	_UnaryMLoop
.3399					Unary_Page:
.3399	20 fd 37	jsr $37fd			jsr 	MInt32False 				; zero
.339c	ad c8 0a	lda $0ac8			lda 	basePage 					; copy base page address in.
.339f	95 98		sta $98,x			sta 	esInt0,x
.33a1	ad c9 0a	lda $0ac9			lda 	basePage+1
.33a4	95 a0		sta $a0,x			sta 	esInt1,x
.33a6	60		rts				rts
.33a7					UnaryReference:
.33a7	a9 0f		lda #$0f			lda 	#15
.33a9	20 dc 2f	jsr $2fdc			jsr 	EvaluateLevel 				; evaluate term and don't deference.
.33ac	b5 90		lda $90,x			lda 	esType,x 					; check it's a reference.
.33ae	10 05		bpl $33b5			bpl 	UType
.33b0	a9 00		lda #$00			lda 	#0 							; make it an integer
.33b2	95 90		sta $90,x			sta 	esType,x
.33b4	60		rts				rts
.33b5					UType:
.33b5	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.33b7	20 18 15	jsr $1518		jsr	errorHandler
.33ba					UnaryHexMarker:
.33ba	4c 37 31	jmp $3137			jmp 	EvaluateIntegerTerm
.33bd					UnaryComplement:
.33bd	20 37 31	jsr $3137			jsr 	EvaluateIntegerTerm
.33c0	20 d1 37	jsr $37d1			jsr 	MInt32Not
.33c3	60		rts				rts
.33c4					UnaryIntToFloat:
.33c4	20 4f 31	jsr $314f			jsr 	EvaluateNumeric				; some number
.33c7	b5 90		lda $90,x			lda 	esType,x 					; if float already, exit
.33c9	d0 0b		bne $33d6			bne 	_UIFExit
.33cb	8a		txa				txa 								; convert and set type
.33cc	a2 1c		ldx #$1c		ldx	#28
.33ce	20 65 20	jsr $2065		jsr	floatingpointHandler
.33d1	aa		tax				tax
.33d2	a9 01		lda #$01			lda 	#1
.33d4	95 90		sta $90,x			sta 	esType,x
.33d6					_UIFExit:
.33d6	60		rts				rts
.33d7					UnaryFloatToInt:
.33d7	20 4f 31	jsr $314f			jsr 	EvaluateNumeric 			; the number
.33da	b5 90		lda $90,x			lda 	esType,x 					; if int already exit
.33dc	f0 0b		beq $33e9			beq 	_UFIExit
.33de	8a		txa				txa 								; convert to int
.33df	a2 14		ldx #$14		ldx	#20
.33e1	20 65 20	jsr $2065		jsr	floatingpointHandler
.33e4	aa		tax				tax
.33e5	a9 00		lda #$00			lda 	#0 							; set type
.33e7	95 90		sta $90,x			sta 	esType,x
.33e9					_UFIExit:
.33e9	60		rts				rts
.33ea					UnaryAlloc:
.33ea	e8		inx				inx 								; evaluate memory required
.33eb	20 65 31	jsr $3165			jsr 	EvaluateInteger
.33ee	20 70 38	jsr $3870			jsr 	CheckRightParen
.33f1	ca		dex				dex
.33f2	b5 a9		lda $a9,x			lda 	esInt2+1,x 					; check at least in 64k range.
.33f4	15 b1		ora $b1,x			ora 	esInt3+1,x
.33f6	d0 1d		bne $3415			bne 	_UABadValue
.33f8	20 fd 37	jsr $37fd			jsr 	MInt32False					; zero return.
.33fb	a5 36		lda $36				lda 	lowMemory+1 				; copy low memory in
.33fd	95 a0		sta $a0,x			sta 	esInt1,x
.33ff	a5 35		lda $35				lda 	lowMemory
.3401	95 98		sta $98,x			sta 	esInt0,x
.3403	18		clc				clc 								; add alloc required.
.3404	75 99		adc $99,x			adc 	esInt0+1,x
.3406	85 35		sta $35				sta 	lowMemory
.3408	a5 36		lda $36				lda 	lowMemory+1
.340a	75 a1		adc $a1,x			adc 	esInt1+1,x
.340c	85 36		sta $36				sta 	lowMemory+1
.340e	b0 05		bcs $3415			bcs		_UABadValue 				; overflow definitely bad.
.3410	c5 34		cmp $34				cmp 	highMemory+1
.3412	b0 01		bcs $3415			bcs 	_UABadValue 				; out of memory bad.
.3414	60		rts				rts
.3415					_UABadValue:
.3415	a2 22		ldx #$22			ldx 	#ErrorID_Memory
.3417	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary/unary2.asm

.341a					UnaryTimer:
.341a	20 70 38	jsr $3870			jsr 	CheckRightParen 			; no parameters
.341d	98		tya				tya
.341e	48		pha				pha
.341f	20 24 38	jsr $3824			jsr 	MInt32Zero 					; zero result
.3422	86 2a		stx $2a				stx 	temp0 						; returning in YA so can't use .pshx
.3424	a2 1c		ldx #$1c		ldx	#28
.3426	20 f6 14	jsr $14f6		jsr	deviceHandler
.3429	a6 2a		ldx $2a				ldx 	temp0						; restore X and update 16 bit result
.342b	95 98		sta $98,x			sta 	esInt0,x
.342d	98		tya				tya
.342e	95 a0		sta $a0,x			sta 	esInt1,x
.3430	68		pla				pla
.3431	a8		tay				tay
.3432	60		rts				rts
.3433					UnaryInkey:
.3433	20 70 38	jsr $3870			jsr 	CheckRightParen
.3436	86 2a		stx $2a				stx 	temp0
.3438	a2 0a		ldx #$0a		ldx	#10
.343a	20 f6 14	jsr $14f6		jsr	deviceHandler
.343d	a6 2a		ldx $2a				ldx 	temp0
.343f	20 0c 38	jsr $380c			jsr 	MInt32Set8Bit
.3442	60		rts				rts
.3443					UnaryGet:
.3443	20 70 38	jsr $3870			jsr 	CheckRightParen
.3446	86 2a		stx $2a				stx 	temp0
.3448					_UGLoop:
.3448	a2 02		ldx #$02		ldx	#2
.344a	20 f6 14	jsr $14f6		jsr	deviceHandler
.344d	a2 0a		ldx #$0a		ldx	#10
.344f	20 f6 14	jsr $14f6		jsr	deviceHandler
.3452	c9 00		cmp #$00			cmp 	#0
.3454	f0 f2		beq $3448			beq 	_UGLoop
.3456	a6 2a		ldx $2a				ldx 	temp0
.3458	20 0c 38	jsr $380c			jsr 	MInt32Set8Bit
.345b	60		rts				rts
.345c					UnaryGetString:
.345c	20 43 34	jsr $3443			jsr 	UnaryGet
.345f					UGSDoChr:
.345f	4c b0 34	jmp $34b0			jmp 	ChrCode
.3462					UnaryInkeyString:
.3462	20 33 34	jsr $3433			jsr 	UnaryInkey
.3465	b5 98		lda $98,x			lda 	esInt0,x
.3467	d0 f6		bne $345f			bne 	UGSDoChr
.3469	8a		txa				txa
.346a	a2 08		ldx #$08		ldx	#8
.346c	20 a8 3b	jsr $3ba8		jsr	stringHandler
.346f	aa		tax				tax
.3470	60		rts				rts
.3471					UnarySys:
.3471	20 65 31	jsr $3165			jsr 	EvaluateInteger 				; get the address
.3474	20 70 38	jsr $3870			jsr 	CheckRightParen
.3477	20 57 25	jsr $2557			jsr 	TOSToTemp0 						; copy call address to temp0
.347a	8a		txa				txa
.347b	48		pha				pha
.347c	98		tya				tya
.347d	48		pha				pha
.347e	ad 00 0a	lda $0a00			lda 	("A"-"A")*4+SingleLetterVar 	; load AXY
.3481	ae 5c 0a	ldx $0a5c			ldx 	("X"-"A")*4+SingleLetterVar
.3484	ac 60 0a	ldy $0a60			ldy 	("Y"-"A")*4+SingleLetterVar
.3487	20 96 34	jsr $3496			jsr 	_CallTemp0
.348a	85 32		sta $32				sta 	tempShort 						; restore YX
.348c	68		pla				pla
.348d	a8		tay				tay
.348e	68		pla				pla
.348f	aa		tax				tax
.3490	a5 32		lda $32				lda 	tempShort
.3492	20 0c 38	jsr $380c			jsr 	MInt32Set8Bit 					; return result.
.3495	60		rts				rts
.3496					_CallTemp0:
.3496	6c 2a 00	jmp ($002a)			jmp 	(temp0)
.3499					UnaryMem:
.3499	20 fd 37	jsr $37fd			jsr 	MInt32False 					; set to false (e.g. 0)
.349c	38		sec				sec
.349d	a5 33		lda $33				lda 	highMemory 						; calculate value
.349f	e5 35		sbc $35				sbc 	lowMemory
.34a1	95 98		sta $98,x			sta 	esInt0,x
.34a3	a5 34		lda $34				lda 	highMemory+1
.34a5	e5 36		sbc $36				sbc 	lowMemory+1
.34a7	95 a0		sta $a0,x			sta 	esInt1,x
.34a9	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary/unarystr.asm

.34aa					ExecChr:
.34aa	20 6d 31	jsr $316d			jsr 	EvaluateSmallInteger		; character number 0-255
.34ad	20 70 38	jsr $3870			jsr 	CheckRightParen				; right bracket
.34b0					ChrCode:
.34b0	98		tya				tya
.34b1	48		pha				pha
.34b2	8a		txa				txa 								; A = stack
.34b3	b4 98		ldy $98,x			ldy 	esInt0,x					; Y = character
.34b5	a2 02		ldx #$02		ldx	#2
.34b7	20 a8 3b	jsr $3ba8		jsr	stringHandler
.34ba	aa		tax				tax 								; X = stack
.34bb	68		pla				pla
.34bc	a8		tay				tay
.34bd	60		rts				rts
.34be					ExecLower:
.34be	38		sec				sec 								; set carry is lower
.34bf	b0 01		bcs $34c2			bcs 	ExecUpperLower
.34c1					ExecUpper:
.34c1	18		clc				clc 								; clear carry is upper
.34c2					ExecUpperLower:
.34c2	08		php				php 								; save carry
.34c3	20 5a 31	jsr $315a			jsr 	EvaluateString 				; string to stack,X
.34c6	20 70 38	jsr $3870			jsr 	CheckRightParen 			; check closing right bracket.
.34c9	28		plp				plp 								; restore carry, save Y
.34ca	98		tya				tya
.34cb	48		pha				pha
.34cc	a9 00		lda #$00			lda 	#0 							; A zero if upper, 1 if lower.
.34ce	2a		rol a				rol 	a
.34cf	a8		tay				tay 								; now in Y
.34d0	8a		txa				txa 								; do the substring and exit.
.34d1	a2 0c		ldx #$0c		ldx	#12
.34d3	20 a8 3b	jsr $3ba8		jsr	stringHandler
.34d6	aa		tax				tax
.34d7	68		pla				pla
.34d8	a8		tay				tay
.34d9	60		rts				rts
.34da					ExecLeft:
.34da	20 5a 31	jsr $315a			jsr 	EvaluateString 				; string to stack,X
.34dd	20 7d 38	jsr $387d			jsr 	CheckComma
.34e0	e8		inx				inx
.34e1	a9 01		lda #$01			lda 	#1 							; 1 for 2nd parameter.
.34e3	20 0c 38	jsr $380c			jsr 	MInt32Set8Bit
.34e6	e8		inx				inx
.34e7	20 6d 31	jsr $316d			jsr 	EvaluateSmallInteger 		; smallint 3rd parameter
.34ea					ExecSubstring:
.34ea	ca		dex				dex 								; fix up X
.34eb	ca		dex				dex
.34ec	20 70 38	jsr $3870			jsr 	CheckRightParen 			; check closing right bracket.
.34ef	8a		txa				txa 								; do the substring and exit.
.34f0	a2 0e		ldx #$0e		ldx	#14
.34f2	20 a8 3b	jsr $3ba8		jsr	stringHandler
.34f5	aa		tax				tax
.34f6	60		rts				rts
.34f7					ExecMid:
.34f7	20 5a 31	jsr $315a			jsr 	EvaluateString 				; string to stack,X
.34fa	20 7d 38	jsr $387d			jsr 	CheckComma
.34fd	e8		inx				inx
.34fe	20 6d 31	jsr $316d			jsr 	EvaluateSmallInteger 		; smallint 2nd parameter
.3501	c9 00		cmp #$00			cmp 	#0
.3503	f0 15		beq $351a			beq 	_EMValue
.3505	e8		inx				inx
.3506	a9 ff		lda #$ff			lda 	#255 						; 255 default for 3nd parameter - this is optional.
.3508	20 0c 38	jsr $380c			jsr 	MInt32Set8Bit
.350b	b1 28		lda ($28),y			lda 	(codePtr),y 				; is there a ) next
.350d	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN 				; if so, just MID$(a$,2)
.350f	f0 d9		beq $34ea			beq 	ExecSubString
.3511	20 7d 38	jsr $387d			jsr 	CheckComma
.3514	20 6d 31	jsr $316d			jsr 	EvaluateSmallInteger 		; smallint 2nd parameter
.3517	4c ea 34	jmp $34ea			jmp 	ExecSubString
.351a					_EMValue:
.351a	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.351c	20 18 15	jsr $1518		jsr	errorHandler
.351f					ExecRight:
.351f	20 5a 31	jsr $315a			jsr 	EvaluateString 				; string to stack,X
.3522	20 7d 38	jsr $387d			jsr 	CheckComma
.3525	e8		inx				inx
.3526	20 6d 31	jsr $316d			jsr 	EvaluateSmallInteger 		; smallint 2nd parameter.
.3529	ca		dex				dex
.352a	98		tya				tya
.352b	48		pha				pha
.352c	b5 98		lda $98,x			lda 	esInt0,x 					; copy address of string to temp0
.352e	85 2a		sta $2a				sta 	temp0
.3530	b5 a0		lda $a0,x			lda 	esInt1,x
.3532	85 2b		sta $2b				sta 	temp0+1
.3534	a0 00		ldy #$00			ldy 	#0 							; point to length
.3536	b1 2a		lda ($2a),y			lda 	(temp0),y 					; get the length.
.3538	18		clc				clc 								; add 1.
.3539	69 01		adc #$01			adc 	#1
.353b	38		sec				sec
.353c	f5 99		sbc $99,x			sbc 	esInt0+1,x  				; subtract right count.
.353e	f0 02		beq $3542			beq		_ERMake1 					; if zero, make it 1.
.3540	b0 02		bcs $3544			bcs		_EROkay
.3542					_ERMake1:
.3542	a9 01		lda #$01			lda 	#1 							; start position.
.3544					_EROkay:
.3544	e8		inx				inx 								; set start pos.
.3545	95 98		sta $98,x			sta 	esInt0,x
.3547	e8		inx				inx
.3548	a9 ff		lda #$ff			lda 	#255 						; 255 default for 3nd parameter.
.354a	20 0c 38	jsr $380c			jsr 	MInt32Set8Bit
.354d	68		pla				pla
.354e	a8		tay				tay
.354f	4c ea 34	jmp $34ea			jmp 	ExecSubString 				; do the substring code.

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32binary.asm

.3552					MInt32And:
.3552	b5 98		lda $98,x			lda 	esInt0,x
.3554	35 99		and $99,x			and 	esInt0+1,x
.3556	95 98		sta $98,x			sta 	esInt0,x
.3558	b5 a0		lda $a0,x			lda 	esInt1,x
.355a	35 a1		and $a1,x			and 	esInt1+1,x
.355c	95 a0		sta $a0,x			sta 	esInt1,x
.355e	b5 a8		lda $a8,x			lda 	esInt2,x
.3560	35 a9		and $a9,x			and 	esInt2+1,x
.3562	95 a8		sta $a8,x			sta 	esInt2,x
.3564	b5 b0		lda $b0,x			lda 	esInt3,x
.3566	35 b1		and $b1,x			and 	esInt3+1,x
.3568	95 b0		sta $b0,x			sta 	esInt3,x
.356a	60		rts				rts
.356b					MInt32Or:
.356b	b5 98		lda $98,x			lda 	esInt0,x
.356d	15 99		ora $99,x			ora 	esInt0+1,x
.356f	95 98		sta $98,x			sta 	esInt0,x
.3571	b5 a0		lda $a0,x			lda 	esInt1,x
.3573	15 a1		ora $a1,x			ora 	esInt1+1,x
.3575	95 a0		sta $a0,x			sta 	esInt1,x
.3577	b5 a8		lda $a8,x			lda 	esInt2,x
.3579	15 a9		ora $a9,x			ora 	esInt2+1,x
.357b	95 a8		sta $a8,x			sta 	esInt2,x
.357d	b5 b0		lda $b0,x			lda 	esInt3,x
.357f	15 b1		ora $b1,x			ora 	esInt3+1,x
.3581	95 b0		sta $b0,x			sta 	esInt3,x
.3583	60		rts				rts
.3584					MInt32Xor:
.3584	b5 98		lda $98,x			lda 	esInt0,x
.3586	55 99		eor $99,x			eor 	esInt0+1,x
.3588	95 98		sta $98,x			sta 	esInt0,x
.358a	b5 a0		lda $a0,x			lda 	esInt1,x
.358c	55 a1		eor $a1,x			eor 	esInt1+1,x
.358e	95 a0		sta $a0,x			sta 	esInt1,x
.3590	b5 a8		lda $a8,x			lda 	esInt2,x
.3592	55 a9		eor $a9,x			eor 	esInt2+1,x
.3594	95 a8		sta $a8,x			sta 	esInt2,x
.3596	b5 b0		lda $b0,x			lda 	esInt3,x
.3598	55 b1		eor $b1,x			eor 	esInt3+1,x
.359a	95 b0		sta $b0,x			sta 	esInt3,x
.359c	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32compare.asm

.359d					MInt32Compare:
.359d	b5 98		lda $98,x			lda 	esInt0,x 					; equality check first.
.359f	d5 99		cmp $99,x			cmp 	esInt0+1,x
.35a1	d0 13		bne $35b6			bne 	MInt32Compare2
.35a3	b5 a0		lda $a0,x			lda 	esInt1,x
.35a5	d5 a1		cmp $a1,x			cmp 	esInt1+1,x
.35a7	d0 0d		bne $35b6			bne 	MInt32Compare2
.35a9	b5 a8		lda $a8,x			lda 	esInt2,x
.35ab	d5 a9		cmp $a9,x			cmp 	esInt2+1,x
.35ad	d0 07		bne $35b6			bne 	MInt32Compare2
.35af	b5 b0		lda $b0,x			lda 	esInt3,x
.35b1	55 b1		eor $b1,x			eor 	esInt3+1,x 					; EOR will return 0 if the same.
.35b3	d0 01		bne $35b6			bne 	MInt32Compare2
.35b5	60		rts				rts
.35b6					MInt32Compare2:
.35b6	b5 98		lda $98,x			lda		esInt0,x 					; unsigned 32 bit comparison.
.35b8	d5 99		cmp $99,x			cmp 	esInt0+1,x
.35ba	b5 a0		lda $a0,x			lda		esInt1,x
.35bc	f5 a1		sbc $a1,x			sbc 	esInt1+1,x
.35be	b5 a8		lda $a8,x			lda		esInt2,x
.35c0	f5 a9		sbc $a9,x			sbc 	esInt2+1,x
.35c2	b5 b0		lda $b0,x			lda		esInt3,x
.35c4	f5 b1		sbc $b1,x			sbc 	esInt3+1,x
.35c6	50 02		bvc $35ca			bvc 	_I32LNoOverflow 			; make it signed 32 bit comparison
.35c8	49 80		eor #$80			eor 	#$80
.35ca					_I32LNoOverflow
.35ca	30 03		bmi $35cf			bmi 	MInt32CLess					; if -ve then return $FF
.35cc	a9 01		lda #$01			lda 	#$01						; else return $01
.35ce	60		rts				rts
.35cf					MInt32CLess:
.35cf	a9 ff		lda #$ff			lda 	#$FF
.35d1	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32divide.asm

.35d2					MInt32SDivide:
.35d2	98		tya				tya  								; save Y, which is the count of negations
.35d3	48		pha				pha
.35d4	a0 00		ldy #$00			ldy 	#0 							; zero count
.35d6	20 ee 35	jsr $35ee			jsr 	_MInt32SRemSign 			; unsign TOS
.35d9	e8		inx				inx 								; unsign TOS+1
.35da	20 ee 35	jsr $35ee			jsr 	_MInt32SRemSign
.35dd	ca		dex				dex
.35de	98		tya				tya 								; save sign count on stack
.35df	48		pha				pha
.35e0	20 f7 35	jsr $35f7			jsr 	MInt32UDivide 				; unsigned division
.35e3	68		pla				pla 								; get sign count back
.35e4	29 01		and #$01			and 	#1 							; if it is odd, then negate result
.35e6	f0 03		beq $35eb			beq 	_I32SNoNeg
.35e8	20 b7 37	jsr $37b7			jsr 	MInt32Negate
.35eb					_I32SNoNeg:
.35eb	68		pla				pla 								; restoe Y and exit
.35ec	a8		tay				tay
.35ed	60		rts				rts
.35ee					_MInt32SRemSign:
.35ee	b5 b0		lda $b0,x			lda 	esInt3,x 					; is it -ve
.35f0	10 04		bpl $35f6			bpl 	_MInt32SRSExit
.35f2	c8		iny				iny 								; increment the sign count
.35f3	20 b7 37	jsr $37b7			jsr 	MInt32Negate 				; negate the value.
.35f6					_MInt32SRSExit:
.35f6	60		rts				rts
.35f7					MInt32UDivide:
.35f7	b5 99		lda $99,x			lda 	esInt0+1,x 					; check for division by zero
.35f9	15 a1		ora $a1,x			ora 	esInt1+1,x
.35fb	15 a2		ora $a2,x			ora 	esInt1+2,x
.35fd	15 a3		ora $a3,x			ora 	esInt1+3,x
.35ff	f0 4a		beq $364b			beq 	_MInt32DZero
.3601	e8		inx				inx 								; clear A
.3602	e8		inx				inx
.3603	20 fd 37	jsr $37fd			jsr 	MInt32False
.3606	ca		dex				dex
.3607	ca		dex				dex
.3608	98		tya				tya 								; save Y on the stack
.3609	48		pha				pha
.360a	a0 20		ldy #$20			ldy 	#32 						; number of division passes
.360c					_MInt32UDLoop:
.360c	16 98		asl $98,x			asl 	esInt0,x					; shift QA left. First Q
.360e	36 a0		rol $a0,x			rol 	esInt1,x
.3610	36 a8		rol $a8,x			rol 	esInt2,x
.3612	36 b0		rol $b0,x			rol 	esInt3,x
.3614	36 9a		rol $9a,x			rol 	esInt0+2,x 					; then A.
.3616	36 a2		rol $a2,x			rol 	esInt1+2,x
.3618	36 aa		rol $aa,x			rol 	esInt2+2,x
.361a	36 b2		rol $b2,x			rol 	esInt3+2,x
.361c	38		sec				sec 								; calculate A-M saving result on the stack
.361d	b5 9a		lda $9a,x			lda 	esInt0+2,x
.361f	f5 99		sbc $99,x			sbc 	esInt0+1,x
.3621	48		pha				pha
.3622	b5 a2		lda $a2,x			lda 	esInt1+2,x
.3624	f5 a1		sbc $a1,x			sbc 	esInt1+1,x
.3626	48		pha				pha
.3627	b5 aa		lda $aa,x			lda 	esInt2+2,x
.3629	f5 a9		sbc $a9,x			sbc 	esInt2+1,x
.362b	48		pha				pha
.362c	b5 b2		lda $b2,x			lda 	esInt3+2,x
.362e	f5 b1		sbc $b1,x			sbc 	esInt3+1,x
.3630	90 10		bcc $3642			bcc		_MInt32NoSubtract 			; if A < M (e.g. carry clear) then reject this.
.3632	95 b2		sta $b2,x			sta 	esInt3+2,x 					; write result back to A
.3634	68		pla				pla
.3635	95 aa		sta $aa,x			sta 	esInt2+2,x
.3637	68		pla				pla
.3638	95 a2		sta $a2,x			sta 	esInt1+2,x
.363a	68		pla				pla
.363b	95 9a		sta $9a,x			sta 	esInt0+2,x
.363d	f6 98		inc $98,x			inc 	esInt0,x 					; sets bit 0 of Q - it was shifted left previously.
.363f	4c 45 36	jmp $3645			jmp 	_MInt32Next 					; do the next iteration
.3642					_MInt32NoSubtract:
.3642	68		pla				pla
.3643	68		pla				pla
.3644	68		pla				pla
.3645					_MInt32Next:
.3645	88		dey				dey 								; do this 32 times.
.3646	d0 c4		bne $360c			bne 	_MInt32UDLoop
.3648	68		pla				pla 								; restore Y and exit
.3649	a8		tay				tay
.364a	60		rts				rts
.364b					_MInt32DZero:
.364b	a2 05		ldx #$05			ldx 	#ErrorID_DivZero
.364d	20 18 15	jsr $1518		jsr	errorHandler
.3650					MInt32Modulus:
.3650	20 f7 35	jsr $35f7			jsr 	MInt32UDivide 				; do the division.
.3653	b5 b2		lda $b2,x			lda 	esInt3+2,x 					; copy 2nd on stack (the remainder) to the top.
.3655	95 b0		sta $b0,x			sta 	esInt3,x
.3657	b5 aa		lda $aa,x			lda 	esInt2+2,x
.3659	95 a8		sta $a8,x			sta 	esInt2,x
.365b	b5 a2		lda $a2,x			lda 	esInt1+2,x
.365d	95 a0		sta $a0,x			sta 	esInt1,x
.365f	b5 9a		lda $9a,x			lda 	esInt0+2,x
.3661	95 98		sta $98,x			sta 	esInt0,x
.3663	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32fromstr.asm

.0cea					fs32Length:
>0cea							.fill 	1
.3664					LinkInt32FromString:
.3664	aa		tax				tax
.3665	98		tya				tya
.3666	20 6b 36	jsr $366b			jsr 	MInt32FromString
.3669	8a		txa				txa
.366a	60		rts				rts
.366b					MInt32FromString:
.366b	85 32		sta $32				sta 	tempShort 					; save base
.366d	98		tya				tya
.366e	48		pha				pha
.366f	a0 00		ldy #$00			ldy 	#0 							; get length of string to convert
.3671	b1 2a		lda ($2a),y			lda 	(temp0),y
.3673	8d ea 0c	sta $0cea			sta 	fs32Length
.3676	f0 65		beq $36dd			beq 	_I32FSFail2					; fail if length zero.
.3678	a0 01		ldy #$01			ldy 	#1 							; set index into string being read
.367a	b1 2a		lda ($2a),y			lda 	(temp0),y 					; look at first character
.367c	c9 2d		cmp #$2d			cmp 	#"-"						; is it a - character
.367e	d0 09		bne $3689			bne 	_I32FSNotNegative
.3680	ad ea 0c	lda $0cea			lda 	fs32Length 					; get length back.
.3683	c9 01		cmp #$01			cmp 	#1 							; if 1 it is just a - on its own so fail.
.3685	f0 56		beq $36dd			beq 	_I32FSFail2
.3687	a0 02		ldy #$02			ldy 	#2 							; first digit of the number.
.3689					_I32FSNotNegative:
.3689	a5 32		lda $32				lda 	tempShort 					; get the base back.
.368b	c0 02		cpy #$02			cpy 	#2 							; if we read a -ve (e.g. Y == 2)
.368d	d0 02		bne $3691			bne 	_I32FSNN2
.368f	09 80		ora #$80			ora 	#$80						; set bit 7, this indicates a negated result.
.3691					_I32FSNN2:
.3691	48		pha				pha 								; save base + final sign on stack.
.3692	20 fd 37	jsr $37fd			jsr 	MInt32False 				; zero the return value.
.3695					_I32FSMainLoop:
.3695	68		pla				pla 								; get the base back into tempShort
.3696	48		pha				pha
.3697	29 7f		and #$7f			and 	#$7F
.3699	85 32		sta $32				sta 	tempShort
.369b	b1 2a		lda ($2a),y			lda 	(temp0),y 					; look at next character.
.369d	c9 61		cmp #$61			cmp 	#"a" 						; fix up case.
.369f	90 02		bcc $36a3			bcc 	_I32FSNotLC
.36a1	e9 20		sbc #$20			sbc 	#32
.36a3					_I32FSNotLC:
.36a3	38		sec				sec 								; subtract 48 (ASCII "0") - ASCII to Hex conversion
.36a4	e9 30		sbc #$30			sbc 	#"0"
.36a6	90 34		bcc $36dc			bcc 	_I32FSFail 					; nothing more to do.
.36a8	c9 0a		cmp #$0a			cmp 	#9+1 						; if it is 0-9 validate vs base.
.36aa	90 06		bcc $36b2			bcc 	_I32FSValidate
.36ac	c9 11		cmp #$11			cmp 	#17 						; is it between 58 and 64 ? if so bad.
.36ae	90 2c		bcc $36dc			bcc 	_I32FSFail
.36b0	e9 07		sbc #$07			sbc 	#7 							; adjust into range so now character is 0->nnn
.36b2					_I32FSValidate:
.36b2	c5 32		cmp $32				cmp 	tempShort 					; compare against the base.
.36b4	b0 26		bcs $36dc			bcs 	_I32FSFail 					; sorry, too large for this base, so fail.
.36b6	48		pha				pha 								; save the new digit value.
.36b7	e8		inx				inx 								; put base into next slot up on stack
.36b8	a5 32		lda $32				lda 	tempShort
.36ba	20 0c 38	jsr $380c			jsr 	MInt32Set8Bit
.36bd	ca		dex				dex
.36be	20 15 37	jsr $3715			jsr 	MInt32Multiply 				; multiply current by the base
.36c1	e8		inx				inx
.36c2	68		pla				pla  								; put additive into next slot
.36c3	20 0c 38	jsr $380c			jsr 	MInt32Set8Bit
.36c6	ca		dex				dex
.36c7	20 e1 36	jsr $36e1			jsr 	MInt32Add 					; and add it
.36ca	c8		iny				iny 								; bump the character pointer
.36cb	cc ea 0c	cpy $0cea			cpy 	fs32Length 					; until > length.
.36ce	f0 c5		beq $3695			beq 	_I32FSMainLoop
.36d0	90 c3		bcc $3695			bcc 	_I32FSMainLoop
.36d2					_I32FSDone:
.36d2	68		pla				pla 								; get base/final sign back
.36d3	10 03		bpl $36d8			bpl 	_I32FSNN3
.36d5	20 b7 37	jsr $37b7			jsr 	MInt32Negate 				; negate the result.
.36d8					_I32FSNN3:
.36d8	68		pla				pla
.36d9	a8		tay				tay
.36da	38		sec				sec
.36db	60		rts				rts
.36dc					_I32FSFail:
.36dc	68		pla				pla
.36dd					_I32FSFail2:
.36dd	68		pla				pla
.36de	a8		tay				tay
.36df	18		clc				clc
.36e0	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32math.asm

.36e1					MInt32Add:
.36e1	18		clc				clc
.36e2	b5 98		lda $98,x			lda 	esInt0,x
.36e4	75 99		adc $99,x			adc 	esInt0+1,x
.36e6	95 98		sta $98,x			sta 	esInt0,x
.36e8	b5 a0		lda $a0,x			lda 	esInt1,x
.36ea	75 a1		adc $a1,x			adc 	esInt1+1,x
.36ec	95 a0		sta $a0,x			sta 	esInt1,x
.36ee	b5 a8		lda $a8,x			lda 	esInt2,x
.36f0	75 a9		adc $a9,x			adc 	esInt2+1,x
.36f2	95 a8		sta $a8,x			sta 	esInt2,x
.36f4	b5 b0		lda $b0,x			lda 	esInt3,x
.36f6	75 b1		adc $b1,x			adc 	esInt3+1,x
.36f8	95 b0		sta $b0,x			sta 	esInt3,x
.36fa	60		rts				rts
.36fb					MInt32Sub:
.36fb	38		sec				sec
.36fc	b5 98		lda $98,x			lda 	esInt0,x
.36fe	f5 99		sbc $99,x			sbc 	esInt0+1,x
.3700	95 98		sta $98,x			sta 	esInt0,x
.3702	b5 a0		lda $a0,x			lda 	esInt1,x
.3704	f5 a1		sbc $a1,x			sbc 	esInt1+1,x
.3706	95 a0		sta $a0,x			sta 	esInt1,x
.3708	b5 a8		lda $a8,x			lda 	esInt2,x
.370a	f5 a9		sbc $a9,x			sbc 	esInt2+1,x
.370c	95 a8		sta $a8,x			sta 	esInt2,x
.370e	b5 b0		lda $b0,x			lda 	esInt3,x
.3710	f5 b1		sbc $b1,x			sbc 	esInt3+1,x
.3712	95 b0		sta $b0,x			sta 	esInt3,x
.3714	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32multiply.asm

.3715					MInt32Multiply:
.3715	e8		inx				inx 								; copy 2nd -> 3rd
.3716	20 3b 37	jsr $373b			jsr 	MInt32CopyUp
.3719	ca		dex				dex
.371a	20 3b 37	jsr $373b			jsr 	MInt32CopyUp 				; copy 1st -> 2nd
.371d	20 fd 37	jsr $37fd			jsr 	MInt32False 				; zero 1st.
.3720					_I32Loop:
.3720	b5 9a		lda $9a,x			lda 	esInt0+2,x 					; get low bit of 3rd
.3722	29 01		and #$01			and 	#1
.3724	f0 03		beq $3729			beq 	_I32NoAdd 					; if set
.3726	20 e1 36	jsr $36e1			jsr 	MInt32Add 					; add 2nd to 1st.
.3729					_I32NoAdd:
.3729	e8		inx				inx 								; shift 2nd left
.372a	20 12 38	jsr $3812			jsr 	MInt32ShiftLeft
.372d	e8		inx				inx  								; shift 3rd right
.372e	20 1b 38	jsr $381b			jsr 	MInt32ShiftRight
.3731	20 24 38	jsr $3824			jsr 	MInt32Zero 					; check if zero.
.3734	08		php				php 								; save status bits
.3735	ca		dex				dex 	 							; point back to 1st
.3736	ca		dex				dex
.3737	28		plp				plp 								; get status bits
.3738	d0 e6		bne $3720			bne 	_I32Loop 					; if non-zero keep going.
.373a	60		rts				rts
.373b					MInt32CopyUp:
.373b	b5 98		lda $98,x			lda 	esInt0,x
.373d	95 99		sta $99,x			sta 	esInt0+1,x
.373f	b5 a0		lda $a0,x			lda 	esInt1,x
.3741	95 a1		sta $a1,x			sta 	esInt1+1,x
.3743	b5 a8		lda $a8,x			lda 	esInt2,x
.3745	95 a9		sta $a9,x			sta 	esInt2+1,x
.3747	b5 b0		lda $b0,x			lda 	esInt3,x
.3749	95 b1		sta $b1,x			sta 	esInt3+1,x
.374b	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32tostr.asm

>0ceb					MCharCount:	.fill 	1						; count of converted characters
.374c					MLInt32ToString:
.374c	aa		tax				tax									; module passes stack in A, base in Y
.374d	98		tya				tya
.374e	20 53 37	jsr $3753			jsr 	MInt32ToString
.3751	8a		txa				txa
.3752	60		rts				rts
.3753					MInt32ToString:
.3753	48		pha				pha 								; save base
.3754	85 32		sta $32				sta 	tempShort 					; save target base.
.3756	a9 00		lda #$00			lda 	#0
.3758	8d eb 0c	sta $0ceb			sta 	MCharCount 					; clear character count to 0
.375b	98		tya				tya
.375c	48		pha				pha
.375d	a5 32		lda $32				lda 	tempShort 					; check if we are signed conversion
.375f	10 10		bpl $3771			bpl 	_I32TSUnsigned
.3761	48		pha				pha 								; save base on stack.
.3762	b5 b0		lda $b0,x			lda 	esInt3,x 					; is it actually negative
.3764	10 08		bpl $376e			bpl 	_I32TSNoFlip
.3766	a9 2d		lda #$2d			lda 	#"-" 						; write a '-' prefix out.
.3768	20 a4 37	jsr $37a4			jsr 	MI32WriteCharacter
.376b	20 b7 37	jsr $37b7			jsr 	MInt32Negate 				; negate the value, so now it's positive.
.376e					_I32TSNoFlip:
.376e	68		pla				pla 								; get the base back
.376f	29 7f		and #$7f			and 	#$7F 						; clear the sign flag so it's just a base now.
.3771					_I32TSUnsigned:
.3771	20 7f 37	jsr $377f			jsr 	MI32DivideWrite 			; recursive code to output string.
.3774	a0 00		ldy #$00			ldy 	#0 							; write charcount to first character.
.3776	ad eb 0c	lda $0ceb			lda 	MCharCount
.3779	91 2a		sta ($2a),y			sta 	(temp0),y
.377b	68		pla				pla
.377c	a8		tay				tay
.377d	68		pla				pla
.377e	60		rts				rts
.377f					MI32DivideWrite:
.377f	48		pha				pha 								; save the divisor/base
.3780	e8		inx				inx 								; write in the dividing position.
.3781	20 0c 38	jsr $380c			jsr 	MInt32Set8Bit
.3784	ca		dex				dex
.3785	20 f7 35	jsr $35f7			jsr 	MInt32UDivide 				; divide number by base.
.3788	68		pla				pla 								; get the base into Y
.3789	a8		tay				tay
.378a	b5 9a		lda $9a,x			lda 	esInt0+2,x 					; get the remainder and push on the stack.
.378c	48		pha				pha
.378d	20 24 38	jsr $3824			jsr 	MInt32Zero 					; is the result zero ?
.3790	f0 04		beq $3796			beq 	_I32NoRecurse 				; if so, don't recurse.
.3792	98		tya				tya 								; put base into A
.3793	20 7f 37	jsr $377f			jsr 	MI32DivideWrite 				; and jsr the dividor recursively.
.3796					_I32NoRecurse:
.3796	68		pla				pla 								; get the remainder back
.3797	c9 0a		cmp #$0a			cmp 	#10  						; handle hexadecimals, now converting to ASCII
.3799	90 02		bcc $379d			bcc 	_I32NotHex
.379b	69 06		adc #$06			adc 	#7-1
.379d					_I32NotHex:
.379d	18		clc				clc 								; make it ASCII
.379e	69 30		adc #$30			adc 	#48
.37a0	20 a4 37	jsr $37a4			jsr 	MI32WriteCharacter 			; write the character out
.37a3	60		rts				rts 								; and exit.
.37a4					MI32WriteCharacter:
.37a4	ee eb 0c	inc $0ceb			inc 	MCharCount 					; bump count (space for leading count)
.37a7	ac eb 0c	ldy $0ceb			ldy 	MCharCount 					; get position
.37aa	91 2a		sta ($2a),y			sta 	(temp0),y 					; write out with trailing 0
.37ac	c8		iny				iny
.37ad	a9 00		lda #$00			lda 	#0
.37af	91 2a		sta ($2a),y			sta 	(temp0),y
.37b1	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32unary.asm

>0cec					MSeed32:	.fill 	4							; random number seed.
.37b2					MInt32Absolute:
.37b2	b5 b0		lda $b0,x			lda 	esInt3,x 					; use negate code if -ve.
.37b4	30 01		bmi $37b7			bmi 	MInt32Negate
.37b6	60		rts				rts
.37b7					MInt32Negate:
.37b7	38		sec				sec 								; subtract from zero.
.37b8	a9 00		lda #$00			lda 	#0
.37ba	f5 98		sbc $98,x			sbc 	esInt0,x
.37bc	95 98		sta $98,x			sta 	esInt0,x
.37be	a9 00		lda #$00			lda 	#0
.37c0	f5 a0		sbc $a0,x			sbc 	esInt1,x
.37c2	95 a0		sta $a0,x			sta 	esInt1,x
.37c4	a9 00		lda #$00			lda 	#0
.37c6	f5 a8		sbc $a8,x			sbc 	esInt2,x
.37c8	95 a8		sta $a8,x			sta 	esInt2,x
.37ca	a9 00		lda #$00			lda 	#0
.37cc	f5 b0		sbc $b0,x			sbc 	esInt3,x
.37ce	95 b0		sta $b0,x			sta 	esInt3,x
.37d0	60		rts				rts
.37d1					MInt32Not:
.37d1	b5 98		lda $98,x			lda 	esInt0,x 					; one's complement all four.
.37d3	49 ff		eor #$ff			eor 	#$FF
.37d5	95 98		sta $98,x			sta 	esInt0,x
.37d7	b5 a0		lda $a0,x			lda 	esInt1,x
.37d9	49 ff		eor #$ff			eor 	#$FF
.37db	95 a0		sta $a0,x			sta 	esInt1,x
.37dd	b5 a8		lda $a8,x			lda 	esInt2,x
.37df	49 ff		eor #$ff			eor 	#$FF
.37e1	95 a8		sta $a8,x			sta 	esInt2,x
.37e3	b5 b0		lda $b0,x			lda 	esInt3,x
.37e5	49 ff		eor #$ff			eor 	#$FF
.37e7	95 b0		sta $b0,x			sta 	esInt3,x
.37e9	60		rts				rts
.37ea					MInt32Sign:
.37ea	b5 b0		lda $b0,x			lda 	esInt3,x					; look at MSB
.37ec	30 0b		bmi $37f9			bmi 	MInt32True 					; if set return -1 (true)
.37ee	20 24 38	jsr $3824			jsr 	MInt32Zero 					; is it zero ?
.37f1	f0 0a		beq $37fd			beq 	MInt32False 				; if zero return 0 (false)
.37f3	20 fd 37	jsr $37fd			jsr 	MInt32False 				; > 0 return 1, by setting it to zero
.37f6	f6 98		inc $98,x			inc 	esInt0,x  					; and bumping the LSB.
.37f8	60		rts				rts
.37f9					MInt32True:
.37f9	a9 ff		lda #$ff			lda 	#$FF 						; set to $FFFFFFFF
.37fb	d0 02		bne $37ff			bne 	MInt32WriteAll
.37fd					MInt32False:
.37fd	a9 00		lda #$00			lda 	#0
.37ff					MInt32WriteAll:
.37ff	95 98		sta $98,x			sta 	esInt0,x
.3801					MInt32Write123:
.3801	95 a0		sta $a0,x			sta 	esInt1,x
.3803	95 a8		sta $a8,x			sta 	esInt2,x
.3805	95 b0		sta $b0,x			sta 	esInt3,x
.3807	a9 00		lda #$00			lda 	#$00						; and make it an integer
.3809	95 90		sta $90,x			sta 	esType,x
.380b	60		rts				rts
.380c					MInt32Set8Bit:
.380c	95 98		sta $98,x			sta 	esInt0,x 					; coopt above function to write
.380e	a9 00		lda #$00			lda 	#0 							; a value 0-255
.3810	f0 ef		beq $3801			beq		MInt32Write123
.3812					MInt32ShiftLeft:
.3812	16 98		asl $98,x			asl 	esInt0,x
.3814	36 a0		rol $a0,x			rol	 	esInt1,x
.3816	36 a8		rol $a8,x			rol	 	esInt2,x
.3818	36 b0		rol $b0,x			rol	 	esInt3,x
.381a	60		rts				rts
.381b					MInt32ShiftRight:
.381b	56 b0		lsr $b0,x			lsr 	esInt3,x
.381d	76 a8		ror $a8,x			ror 	esInt2,x
.381f	76 a0		ror $a0,x			ror 	esInt1,x
.3821	76 98		ror $98,x			ror 	esInt0,x
.3823	60		rts				rts
.3824					MInt32Zero:
.3824	b5 98		lda $98,x			lda 	esInt0,x
.3826	15 a0		ora $a0,x			ora 	esInt1,x
.3828	15 a8		ora $a8,x			ora 	esInt2,x
.382a	15 b0		ora $b0,x			ora 	esInt3,x
.382c	60		rts				rts
.382d					MInt32Random:
.382d	98		tya				tya
.382e	48		pha				pha
.382f	a0 07		ldy #$07			ldy 	#7 							; do it 7 times
.3831	ad ec 0c	lda $0cec			lda 	MSeed32+0 					; check the seed isn't zero
.3834	d0 03		bne $3839			bne 	_Random1
.3836	a8		tay				tay 								; if so do it 256 times
.3837	a9 aa		lda #$aa			lda		#$AA 						; and use this to seed the seed....
.3839					_Random1:
.3839	0a		asl a				asl 	a
.383a	2e ed 0c	rol $0ced			rol 	MSeed32+1
.383d	2e ee 0c	rol $0cee			rol 	MSeed32+2
.3840	2e ef 0c	rol $0cef			rol 	MSeed32+3
.3843	90 02		bcc $3847			bcc 	_Random2
.3845	49 c5		eor #$c5			eor 	#$C5
.3847					_Random2:
.3847	88		dey				dey
.3848	d0 ef		bne $3839			bne 	_Random1
.384a	8d ec 0c	sta $0cec			sta 	MSeed32+0 					; copy the seed in.
.384d	95 98		sta $98,x			sta 	esInt0,x
.384f	ad ed 0c	lda $0ced			lda 	MSeed32+1
.3852	95 a0		sta $a0,x			sta 	esInt1,x
.3854	ad ee 0c	lda $0cee			lda 	MSeed32+2
.3857	95 a8		sta $a8,x			sta 	esInt2,x
.3859	ad ef 0c	lda $0cef			lda 	MSeed32+3
.385c	95 b0		sta $b0,x			sta 	esInt3,x
.385e	68		pla				pla
.385f	a8		tay				tay
.3860	a9 00		lda #$00			lda 	#0
.3862	95 90		sta $90,x			sta 	esType,x
.3864	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/utility/check.asm

.3865					CheckToken:
.3865	d1 28		cmp ($28),y			cmp 	(codePtr),y
.3867	d0 02		bne $386b			bne 	_CTError
.3869	c8		iny				iny
.386a	60		rts				rts
.386b					_CTError:
.386b	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.386d	20 18 15	jsr $1518		jsr	errorHandler
.3870					CheckRightParen:
.3870	b1 28		lda ($28),y			lda 	(codePtr),y
.3872	c8		iny				iny
.3873	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.3875	d0 01		bne $3878			bne 	_CRPError
.3877	60		rts				rts
.3878					_CRPError:
.3878	a2 09		ldx #$09			ldx 	#ErrorID_MissingRP
.387a	20 18 15	jsr $1518		jsr	errorHandler
.387d					CheckComma:
.387d	b1 28		lda ($28),y			lda 	(codePtr),y
.387f	c8		iny				iny
.3880	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.3882	d0 01		bne $3885			bne 	_CCError
.3884	60		rts				rts
.3885					_CCError:
.3885	a2 0a		ldx #$0a			ldx 	#ErrorID_MissingComma
.3887	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/utility/stack.asm

.0037					rsPointer:
>0037							.fill 	2							; to TOS, which is the current top-token.
.388a					RSReset:
.388a	a9 ff		lda #$ff			lda 	#(returnStack+retStackSize-1) & $FF
.388c	85 37		sta $37				sta 	rsPointer
.388e	a9 09		lda #$09			lda 	#(returnStack+retStackSize-1) >> 8
.3890	85 38		sta $38				sta 	1+(rsPointer)
.3892	a9 ff		lda #$ff			lda 	#$FF 						; put a duff marker on TOS, so nothing will pop
.3894	8d ff 09	sta $09ff			sta 	returnStack+retStackSize-1
.3897	60		rts				rts
.3898					RSClaim:
.3898	84 32		sty $32				sty 	tempShort 					; preserve Y
.389a	48		pha				pha 								; save marker on stack.
.389b	8a		txa				txa 								; get bytes required.
.389c	38		sec				sec
.389d	49 ff		eor #$ff			eor 	#$FF 						; add to rsPointer using 2's complement.
.389f	65 37		adc $37				adc 	rsPointer
.38a1	85 37		sta $37				sta 	rsPointer
.38a3	a5 38		lda $38				lda 	rsPointer+1
.38a5	69 ff		adc #$ff			adc 	#$FF
.38a7	85 38		sta $38				sta 	rsPointer+1
.38a9	c9 08		cmp #$08			cmp 	#returnStack>>8 			; overflow. underflow actually :)
.38ab	90 08		bcc $38b5			bcc 	_RSCOverflow
.38ad	68		pla				pla 								; get marker back
.38ae	a0 00		ldy #$00			ldy 	#0 							; write marker out.
.38b0	91 37		sta ($37),y			sta 	(rsPointer),y
.38b2	a4 32		ldy $32				ldy 	tempShort 					; restore Y and exit
.38b4	60		rts				rts
.38b5					_RSCOverflow:
.38b5	a2 16		ldx #$16			ldx 	#ErrorID_RetStack
.38b7	20 18 15	jsr $1518		jsr	errorHandler
.38ba					RSFree:
.38ba	18		clc				clc
.38bb	65 37		adc $37				adc 	rsPointer
.38bd	85 37		sta $37				sta 	rsPointer
.38bf	90 02		bcc $38c3			bcc 	_RSFExit
.38c1	e6 38		inc $38				inc 	rsPointer+1
.38c3					_RSFExit:
.38c3	60		rts				rts
.38c4					RSSavePosition:
.38c4	84 32		sty $32				sty 	tempShort 					; save Y position
.38c6	a8		tay				tay 								; this is where we write it.
.38c7	a5 28		lda $28				lda 	codePtr 					; write codePointer out
.38c9	91 37		sta ($37),y			sta 	(rsPointer),y
.38cb	c8		iny				iny
.38cc	a5 29		lda $29				lda 	codePtr+1
.38ce	91 37		sta ($37),y			sta 	(rsPointer),y
.38d0	c8		iny				iny
.38d1	a5 32		lda $32				lda 	tempShort 					; write the Y position out.
.38d3	91 37		sta ($37),y			sta 	(rsPointer),y
.38d5	a8		tay				tay 								; fix Y back again to original value
.38d6	60		rts				rts
.38d7					RSLoadPosition:
.38d7	a8		tay				tay
.38d8	b1 37		lda ($37),y			lda 	(rsPointer),y 				; read codePointer back
.38da	85 28		sta $28				sta 	codePtr
.38dc	c8		iny				iny
.38dd	b1 37		lda ($37),y			lda 	(rsPointer),y
.38df	85 29		sta $29				sta 	codePtr+1
.38e1	c8		iny				iny
.38e2	b1 37		lda ($37),y			lda 	(rsPointer),y 				; and the offset
.38e4	a8		tay				tay 								; to Y
.38e5	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/utility/warmstart.asm

.38e6					WarmStart:
.38e6	a2 04		ldx #$04		ldx	#4
.38e8	20 51 22	jsr $2251		jsr	interactionHandler

;******  Return to file: main/main.asm

.38eb					mainHandler:
.38eb	7c ee 38	jmp ($38ee,x)			jmp 	(mainVectors,x)
.38ee					mainVectors:
>38ee	0a 39					.word _DummyControlHandler ; index 0
>38f0	7d 38					.word CheckComma           ; index 2
>38f2	70 38					.word CheckRightParen      ; index 4
>38f4	59 2a					.word XCommandClear        ; index 6
>38f6	80 31					.word LinkEvaluate         ; index 8
>38f8	8c 31					.word LinkEvaluateInteger  ; index 10
>38fa	98 31					.word LinkEvaluateSmallInt ; index 12
>38fc	92 31					.word LinkEvaluateString   ; index 14
>38fe	86 31					.word LinkEvaluateTerm     ; index 16
>3900	4c 37					.word MLInt32ToString      ; index 18
>3902	e8 2b					.word Command_XNew         ; index 20
>3904	f6 2b					.word XCommand_Run         ; index 22
>3906	02 2c					.word Command_RunFrom      ; index 24
>3908	64 36					.word LinkInt32FromString  ; index 26
.390a					_DummyControlHandler:
.390a	60		rts			rts

;******  Return to file: basic.asm

.390b					section_end_main:
.390b					section_start_string:

;******  Processing file: string/string.asm


;******  Processing file: string/functions/chr.asm

.390b					StringChrs:
.390b	aa		tax				tax 								; set up stack
.390c	a9 02		lda #$02			lda 	#2
.390e	20 ce 39	jsr $39ce			jsr 	AllocateSoftString
.3911	98		tya				tya
.3912	20 f4 39	jsr $39f4			jsr 	WriteSoftString
.3915					StringUpdate:
.3915	20 23 39	jsr $3923			jsr 	ReturnSoftString
.3918	8a		txa				txa
.3919	60		rts				rts
.391a					StringNull:
.391a	aa		tax				tax
.391b	a9 01		lda #$01			lda 	#1
.391d	20 ce 39	jsr $39ce			jsr 	AllocateSoftString
.3920	4c 15 39	jmp $3915			jmp 	StringUpdate
.3923					ReturnSoftString:
.3923	a5 39		lda $39				lda 	softMemAlloc 				; copy address
.3925	95 98		sta $98,x			sta 	esInt0,x
.3927	a5 3a		lda $3a				lda 	softMemAlloc+1
.3929	95 a0		sta $a0,x			sta 	esInt1,x
.392b	a9 00		lda #$00			lda 	#0 							; zero upper bytes
.392d	95 a8		sta $a8,x			sta 	esInt2,x
.392f	95 b0		sta $b0,x			sta 	esInt3,x
.3931	a9 40		lda #$40			lda 	#$40 						; type string.
.3933	95 90		sta $90,x			sta 	esType,x
.3935	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/functions/compare.asm

.3936					STRCompare:
.3936	48		pha				pha 								; save A
.3937	aa		tax				tax 								; put stack pos in X
.3938	98		tya				tya
.3939	48		pha				pha
.393a	20 6e 39	jsr $396e			jsr 	CopyStringPair 				; copy strings to temp0,temp1
.393d	a0 00		ldy #$00			ldy 	#0 							; get the smaller of the two string sizes.
.393f	b1 2a		lda ($2a),y			lda 	(temp0),y
.3941	d1 2c		cmp ($2c),y			cmp 	(temp1),y
.3943	90 02		bcc $3947			bcc 	_SCNotSmaller
.3945	b1 2c		lda ($2c),y			lda 	(temp1),y
.3947					_SCNotSmaller:
.3947	aa		tax				tax 								; put that in X. We compare this many chars first.
.3948					_SCCompareLoop:
.3948	e0 00		cpx #$00			cpx 	#0 							; if compared all the smaller, then it is the shorter
.394a	f0 0c		beq $3958			beq 	_SCSameToEndShortest 		; one that is the smallest if they are different lengths.
.394c	ca		dex				dex 								; decrement chars to compare.
.394d	c8		iny				iny 								; move to next character
.394e	38		sec				sec 								; calculate s1[y]-s2[y]
.394f	b1 2a		lda ($2a),y			lda 	(temp0),y
.3951	f1 2c		sbc ($2c),y			sbc 	(temp1),y
.3953	d0 0a		bne $395f			bne 	_SCReturnResult 			; if different return sign of A
.3955	4c 48 39	jmp $3948			jmp 	_SCCompareLoop
.3958					_SCSameToEndShortest
.3958	a0 00		ldy #$00			ldy 	#0 							; compare len(s1) - len(s2)
.395a	38		sec				sec
.395b	b1 2a		lda ($2a),y			lda 	(temp0),y
.395d	f1 2c		sbc ($2c),y			sbc 	(temp1),y
.395f					_SCReturnResult:
.395f	08		php				php 								; set return to zero preserving PSW.
.3960	a2 00		ldx #$00			ldx 	#0
.3962	28		plp				plp
.3963	f0 05		beq $396a			beq 	_SCExit 					; two values equal, then exit
.3965	ca		dex				dex 								; X = $FF
.3966	90 02		bcc $396a			bcc 	_SCExit 					; if 1st < 2nd then -1
.3968	a2 01		ldx #$01			ldx 	#1 							; X = $01 if greater
.396a					_SCExit:
.396a	68		pla				pla
.396b	a8		tay				tay
.396c	68		pla				pla
.396d	60		rts				rts
.396e					CopyStringPair:
.396e	b5 99		lda $99,x			lda 	esInt0+1,x
.3970	85 2c		sta $2c				sta 	temp1
.3972	b5 a1		lda $a1,x			lda 	esInt1+1,x
.3974	85 2d		sta $2d				sta 	temp1+1
.3976					CopyStringTop:
.3976	b5 98		lda $98,x			lda 	esInt0,x
.3978	85 2a		sta $2a				sta 	temp0
.397a	b5 a0		lda $a0,x			lda 	esInt1,x
.397c	85 2b		sta $2b				sta 	temp0+1
.397e	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/functions/concat.asm

.397f					StringConcat:
.397f	aa		tax				tax									; stack pos in X
.3980	98		tya				tya
.3981	48		pha				pha
.3982	20 6e 39	jsr $396e			jsr 	CopyStringPair 				; temp0 and temp1 point to strings to concat.
.3985	38		sec				sec 								; calculate alloc strings. lengths added + 1 for size.
.3986	a0 00		ldy #$00			ldy 	#0
.3988	b1 2a		lda ($2a),y			lda 	(temp0),y
.398a	71 2c		adc ($2c),y			adc 	(temp1),y
.398c	b0 1c		bcs $39aa			bcs 	_SCError 					; just too many characters here.
.398e	c9 fc		cmp #$fc			cmp 	#MaxStringSize
.3990	b0 18		bcs $39aa			bcs 	_SCError
.3992	20 ce 39	jsr $39ce			jsr 	AllocateSoftString 			; allocate soft string memory, set pointer.
.3995	20 c5 39	jsr $39c5			jsr 	CopySoftToStack 			; copy that to the stack.
.3998	20 af 39	jsr $39af			jsr 	SCCopyTemp0 				; copy temp0
.399b	a5 2c		lda $2c				lda 	temp1 						; copy temp1 to temp0
.399d	85 2a		sta $2a				sta 	temp0
.399f	a5 2d		lda $2d				lda 	temp1+1
.39a1	85 2b		sta $2b				sta 	temp0+1
.39a3	20 af 39	jsr $39af			jsr 	SCCopyTemp0 				; copy temp0 e.g. what was temp1.
.39a6	68		pla				pla
.39a7	a8		tay				tay
.39a8	8a		txa				txa 								; and A
.39a9	60		rts				rts
.39aa					_SCError:
.39aa	a2 0d		ldx #$0d			ldx 	#ErrorID_StrLen
.39ac	20 18 15	jsr $1518		jsr	errorHandler
.39af					SCCopyTemp0:
.39af	a0 00		ldy #$00			ldy 	#0 							; put count in temp2
.39b1	b1 2a		lda ($2a),y			lda 	(temp0),y
.39b3	85 2e		sta $2e				sta 	temp2
.39b5					_SCCopyLoop:
.39b5	a5 2e		lda $2e				lda 	temp2 						; done the lot
.39b7	f0 0b		beq $39c4			beq 	_SCCopyExit
.39b9	c6 2e		dec $2e				dec 	temp2
.39bb	c8		iny				iny 								; get next char
.39bc	b1 2a		lda ($2a),y			lda 	(temp0),y
.39be	20 f4 39	jsr $39f4			jsr 	WriteSoftString 			; write to soft string.
.39c1	4c b5 39	jmp $39b5			jmp 	_SCCopyLoop
.39c4					_SCCopyExit:
.39c4	60		rts				rts
.39c5					CopySoftToStack:
.39c5	a5 39		lda $39				lda 	SoftMemAlloc 				; copy the memory allocation pointer to the stack.
.39c7	95 98		sta $98,x			sta 	esInt0,x 					; type is already string.
.39c9	a5 3a		lda $3a				lda 	SoftMemAlloc+1
.39cb	95 a0		sta $a0,x			sta 	esInt1,x
.39cd	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/functions/memory.asm

.0039					softMemAlloc:
>0039							.fill 	2  							; if MSB is zero needs resetting on allocation.
.39ce					AllocateSoftString:
.39ce	85 32		sta $32				sta 	tempShort 					; save count
.39d0	98		tya				tya
.39d1	48		pha				pha
.39d2	a5 3a		lda $3a				lda 	softMemAlloc+1 				; if the high byte is zero, it needs allocating.
.39d4	d0 09		bne $39df			bne 	_ASSDone
.39d6	a5 33		lda $33				lda 	highMemory 					; reset the soft memory alloc pointer.
.39d8	85 39		sta $39				sta 	softMemAlloc 				; to speed up slightly, we only reset this when we first need it
.39da	a4 34		ldy $34				ldy 	highMemory+1 				; but it needs to be reset before each command.
.39dc	88		dey				dey 								; it is set to 1/4k below high memory, allowing space
.39dd	84 3a		sty $3a				sty 	softMemAlloc+1 				; for a concreted string.
.39df					_ASSDone:
.39df	38		sec				sec 								; allocate downwards enough memory
.39e0	a5 39		lda $39				lda 	softMemAlloc 				; subtract the memory requirements in A from
.39e2	e5 32		sbc $32				sbc 	tempShort 					; the soft memory pointer
.39e4	85 39		sta $39				sta 	softMemAlloc
.39e6	a5 3a		lda $3a				lda 	softMemAlloc+1
.39e8	e9 00		sbc #$00			sbc 	#0
.39ea	85 3a		sta $3a				sta 	softMemAlloc+1
.39ec	a9 00		lda #$00			lda 	#0 							; empty that string, set the length = 0.
.39ee	a8		tay				tay
.39ef	91 39		sta ($39),y			sta 	(softMemAlloc),y
.39f1	68		pla				pla
.39f2	a8		tay				tay
.39f3	60		rts				rts
.39f4					WriteSoftString:
.39f4	84 32		sty $32				sty 	tempShort 					; save Y
.39f6	48		pha				pha 								; save character on stack
.39f7	a0 00		ldy #$00			ldy 	#0 							; get and bump length
.39f9	b1 39		lda ($39),y			lda 	(softMemAlloc),y
.39fb	18		clc				clc
.39fc	69 01		adc #$01			adc 	#1
.39fe	91 39		sta ($39),y			sta 	(softMemAlloc),y
.3a00	a8		tay				tay 								; offset in Y
.3a01	68		pla				pla 								; get char and write.
.3a02	91 39		sta ($39),y			sta 	(softMemAlloc),y
.3a04	a4 32		ldy $32				ldy 	tempShort 					; restore Y and exit.
.3a06	60		rts				rts
.3a07					StrClone:
.3a07	aa		tax				tax 								; set up stack.
.3a08	98		tya				tya
.3a09	48		pha				pha
.3a0a	a0 00		ldy #$00			ldy 	#0 							; get length, add 1 for length
.3a0c	b1 2a		lda ($2a),y			lda 	(temp0),y 					; this is the bytes required.
.3a0e	18		clc				clc
.3a0f	69 01		adc #$01			adc 	#1
.3a11	20 ce 39	jsr $39ce			jsr 	AllocateSoftString 			; allocate soft memory
.3a14	a5 39		lda $39				lda 	softMemAlloc 				; copy that address to TOS
.3a16	95 98		sta $98,x			sta 	esInt0,x
.3a18	a5 3a		lda $3a				lda 	softMemAlloc+1
.3a1a	95 a0		sta $a0,x			sta 	esInt1,x
.3a1c	a9 00		lda #$00			lda 	#0 							; zero upper 2 bytes
.3a1e	95 a8		sta $a8,x			sta 	esInt2,x
.3a20	95 b0		sta $b0,x			sta 	esInt3,x
.3a22	a9 40		lda #$40			lda 	#$40 						; set type to string.
.3a24	95 90		sta $90,x			sta 	esType,x
.3a26	20 af 39	jsr $39af			jsr 	SCCopyTemp0 				; copy temp0 string to soft memory copy (concat.asm)
.3a29	68		pla				pla
.3a2a	a8		tay				tay
.3a2b	8a		txa				txa
.3a2c	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/functions/setcase.asm

.3a2d					CaseString:
.3a2d	48		pha				pha 								; save A and copy to X
.3a2e	aa		tax				tax
.3a2f	98		tya				tya
.3a30	48		pha				pha
.3a31	20 76 39	jsr $3976			jsr 	CopyStringTop 				; target string -> temp0
.3a34	a0 00		ldy #$00			ldy 	#0
.3a36	b1 2a		lda ($2a),y			lda 	(temp0),y  					; get length,
.3a38	18		clc				clc
.3a39	69 01		adc #$01			adc 	#1 							; one more for length byte
.3a3b	20 ce 39	jsr $39ce			jsr 	AllocateSoftString 			; allocate soft string memory, set pointer.
.3a3e	20 c5 39	jsr $39c5			jsr 	CopySoftToStack 			; copy that to the stack.
.3a41	a0 00		ldy #$00			ldy 	#0
.3a43	b1 2a		lda ($2a),y			lda 	(temp0),y 					; count to copy in X
.3a45	aa		tax				tax
.3a46					_CSCopy:
.3a46	e0 00		cpx #$00			cpx 	#0 							; finished if 0.
.3a48	f0 24		beq $3a6e			beq 	_CSExit
.3a4a	ca		dex				dex
.3a4b	c8		iny				iny
.3a4c	68		pla				pla 								; check direction
.3a4d	48		pha				pha
.3a4e	f0 0c		beq $3a5c			beq 	_CSUpper
.3a50	b1 2a		lda ($2a),y			lda 	(temp0),y 					; lower$() code
.3a52	c9 41		cmp #$41			cmp 	#"A"
.3a54	90 12		bcc $3a68			bcc 	_CSWrite
.3a56	c9 5b		cmp #$5b			cmp 	#"Z"+1
.3a58	b0 0e		bcs $3a68			bcs 	_CSWrite
.3a5a	90 0a		bcc $3a66			bcc 	_CSFlipWrite
.3a5c					_CSUpper:
.3a5c	b1 2a		lda ($2a),y			lda 	(temp0),y 					; upper$() code
.3a5e	c9 61		cmp #$61			cmp 	#"a"
.3a60	90 06		bcc $3a68			bcc 	_CSWrite
.3a62	c9 7b		cmp #$7b			cmp 	#"z"+1
.3a64	b0 02		bcs $3a68			bcs 	_CSWrite
.3a66					_CSFlipWrite:
.3a66	49 20		eor #$20			eor 	#"A"^"a" 					; switch case.
.3a68					_CSWrite:
.3a68	20 f4 39	jsr $39f4			jsr 	WriteSoftString 			; add to soft string.
.3a6b	4c 46 3a	jmp $3a46			jmp 	_CSCopy
.3a6e					_CSExit:
.3a6e	68		pla				pla
.3a6f	a8		tay				tay
.3a70	68		pla				pla
.3a71	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/functions/substring.asm

.3a72					StringSubstring:
.3a72	48		pha				pha
.3a73	aa		tax				tax 								; access stack.
.3a74	98		tya				tya
.3a75	48		pha				pha
.3a76	20 76 39	jsr $3976			jsr 	CopyStringTop 				; point temp0 to the string.
.3a79	a0 00		ldy #$00			ldy 	#0 							; get length.
.3a7b	b1 2a		lda ($2a),y			lda 	(temp0),Y
.3a7d	85 2c		sta $2c				sta 	temp1
.3a7f	b5 99		lda $99,x			lda 	esInt0+1,x 					; get the initial offset
.3a81	c5 2c		cmp $2c				cmp 	temp1 						; return "" if > length.
.3a83	f0 02		beq $3a87			beq 	_SSBOkay
.3a85	b0 2a		bcs $3ab1			bcs 	_SSBReturnNull
.3a87					_SSBOkay:
.3a87	a5 2c		lda $2c				lda 	temp1 						; get the total length +1
.3a89	18		clc				clc
.3a8a	69 01		adc #$01			adc 	#1
.3a8c	38		sec				sec
.3a8d	f5 99		sbc $99,x			sbc 	esInt0+1,x 					; the anything >= this is bad - max size
.3a8f	d5 9a		cmp $9a,x			cmp 	esInt0+2,x  				; check bad >= required
.3a91	90 02		bcc $3a95			bcc		_SSBTrunc
.3a93	b5 9a		lda $9a,x			lda 	esInt0+2,x
.3a95					_SSBTrunc:
.3a95	85 2d		sta $2d				sta 	temp1+1 					; characters to copy.
.3a97	18		clc				clc
.3a98	69 01		adc #$01			adc 	#1 							; add 1
.3a9a	20 ce 39	jsr $39ce			jsr 	AllocateSoftString 			; allocate soft string memory, set pointer.
.3a9d	20 c5 39	jsr $39c5			jsr 	CopySoftToStack 			; copy that to the stack.
.3aa0	b4 99		ldy $99,x			ldy 	esInt0+1,x 					; get initial position of char to copy
.3aa2					_SSBCopyLoop:
.3aa2	a5 2d		lda $2d				lda 	temp1+1 					; done them all
.3aa4	f0 0e		beq $3ab4			beq 	_SSBExit
.3aa6	c6 2d		dec $2d				dec 	temp1+1
.3aa8	b1 2a		lda ($2a),y			lda 	(temp0),y 					; get and write character
.3aaa	20 f4 39	jsr $39f4			jsr 	WriteSoftString
.3aad	c8		iny				iny
.3aae	4c a2 3a	jmp $3aa2			jmp 	_SSBCopyLoop
.3ab1					_SSBReturnNull:
.3ab1	20 b8 3a	jsr $3ab8			jsr 	ReturnNull
.3ab4					_SSBExit:
.3ab4	68		pla				pla
.3ab5	a8		tay				tay
.3ab6	68		pla				pla
.3ab7	60		rts				rts
.3ab8					ReturnNull:
.3ab8	a9 00		lda #$00			lda 	#0 							; clear null string
.3aba	8d ce 0a	sta $0ace			sta 	NullString
.3abd	a9 ce		lda #$ce			lda 	#NullString & $FF 			; set a pointer to it
.3abf	95 98		sta $98,x			sta 	esInt0,x
.3ac1	a9 0a		lda #$0a			lda 	#NullString >> 8
.3ac3	95 a0		sta $a0,x			sta 	esInt1,x
.3ac5	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/functions/write.asm

.0cf0					srcStrLen:
>0cf0							.fill 	1
.3ac6					StringWrite:
.3ac6	aa		tax				tax
.3ac7	48		pha				pha
.3ac8	98		tya				tya
.3ac9	48		pha				pha
.3aca	20 f1 3a	jsr $3af1			jsr 	CheckOverwriteCurrent
.3acd	b0 0d		bcs $3adc			bcs		_SWCopyCurrent
.3acf	20 2f 3b	jsr $3b2f			jsr 	RequiresConcretion
.3ad2	90 0e		bcc $3ae2			bcc 	_SWWriteReference
.3ad4	20 92 3b	jsr $3b92			jsr 	CheckSpecialConcretion
.3ad7	b0 09		bcs $3ae2			bcs 	_SWWriteReference
.3ad9	20 43 3b	jsr $3b43			jsr 	AllocateHardMemory
.3adc					_SWCopyCurrent:
.3adc	20 76 3b	jsr $3b76			jsr 	CopyStringToHardMemory
.3adf	4c ed 3a	jmp $3aed			jmp 	_SWExit
.3ae2					_SWWriteReference
.3ae2	a0 00		ldy #$00			ldy 	#0
.3ae4	a5 2a		lda $2a				lda 	temp0
.3ae6	91 2c		sta ($2c),y			sta 	(temp1),y
.3ae8	c8		iny				iny
.3ae9	a5 2b		lda $2b				lda 	temp0+1
.3aeb	91 2c		sta ($2c),y			sta 	(temp1),y
.3aed					_SWExit:
.3aed	68		pla				pla
.3aee	a8		tay				tay
.3aef	68		pla				pla
.3af0	60		rts				rts
.3af1					CheckOverwriteCurrent:
.3af1	a0 00		ldy #$00			ldy 	#0 						; get address of string being written to temp0
.3af3	b5 a1		lda $a1,x			lda 	esInt1+1,x
.3af5	85 2b		sta $2b				sta 	temp0+1
.3af7	b5 99		lda $99,x			lda 	esInt0+1,x
.3af9	85 2a		sta $2a				sta 	temp0
.3afb	b1 2a		lda ($2a),y			lda 	(temp0),y 				; get length of string being copied and save it.
.3afd	8d f0 0c	sta $0cf0			sta 	srcStrLen
.3b00	b5 98		lda $98,x			lda 	esInt0,x 				; copy where the final address it being written to temp1.
.3b02	85 2c		sta $2c				sta 	temp1 					; e.g. if it is ax$ then temp1 will point to the ax$
.3b04	b5 a0		lda $a0,x			lda 	esInt1,x 				; data record + 5
.3b06	85 2d		sta $2d				sta 	temp1+1
.3b08	a0 01		ldy #$01			ldy 	#1 						; get the MSB of the address of string currently stored there.
.3b0a	b1 2c		lda ($2c),y			lda 	(temp1),y
.3b0c	c5 34		cmp $34				cmp 	highMemory+1 			; if < high memory then it cannot be something stored
.3b0e	90 1b		bcc $3b2b			bcc 	_COCFail 				; in hard memory.
.3b10	a0 00		ldy #$00			ldy 	#0 						; copy target address - 1 into temp2
.3b12	b1 2c		lda ($2c),y			lda 	(temp1),y 				; when allocating hard memory, the overall size is
.3b14	e9 01		sbc #$01			sbc 	#1 						; in the previous byte.
.3b16	85 2e		sta $2e				sta 	temp2
.3b18	c8		iny				iny
.3b19	b1 2c		lda ($2c),y			lda 	(temp1),y
.3b1b	e9 00		sbc #$00			sbc 	#0
.3b1d	85 2f		sta $2f				sta 	temp2+1
.3b1f	a0 00		ldy #$00			ldy 	#0 						; how large is this physical chunk.
.3b21	b1 2e		lda ($2e),y			lda 	(temp2),y
.3b23	38		sec				sec  							; maximum character capacity.
.3b24	e9 02		sbc #$02			sbc 	#2
.3b26	cd f0 0c	cmp $0cf0			cmp 	srcStrLen 				; if >= the required length
.3b29	b0 02		bcs $3b2d			bcs 	_COCCanReuse
.3b2b					_COCFail:
.3b2b	18		clc				clc
.3b2c	60		rts				rts
.3b2d					_COCCanReuse:
.3b2d	38		sec				sec
.3b2e	60		rts				rts
.3b2f					RequiresConcretion:
.3b2f	a5 2b		lda $2b				lda 	temp0+1 				; get MSB of address of string to be written
.3b31	c5 34		cmp $34				cmp 	highMemory+1 			; if >= high memory it is concreted
.3b33	b0 0a		bcs $3b3f			bcs 	_RCSucceed 				; so it needs concreting again - duplication.
.3b35	a5 3a		lda $3a				lda 	softMemAlloc+1 			; have we allocated any soft memory yet ?
.3b37	f0 08		beq $3b41			beq 	_RCFail 				; if not, this cannot be soft memory.
.3b39	a5 2b		lda $2b				lda 	temp0+1 				; get MSB of address of string to be written
.3b3b	c5 3a		cmp $3a				cmp 	softMemAlloc+1 			; if >= soft mem alloc it is either soft
.3b3d	90 02		bcc $3b41			bcc 	_RCFail 				; so concreting
.3b3f					_RCSucceed:
.3b3f	38		sec				sec
.3b40	60		rts				rts
.3b41					_RCFail:
.3b41	18		clc				clc
.3b42	60		rts				rts
.3b43					AllocateHardMemory:
.3b43	98		tya				tya
.3b44	48		pha				pha
.3b45	ad f0 0c	lda $0cf0			lda 	srcStrLen 				; characters in string
.3b48	69 0a		adc #$0a			adc 	#1+1+8 					; one for hard memory size, one for string size, extra for expansion
.3b4a	b0 04		bcs $3b50			bcs 	_AHMSetMax 				; max out that amount.
.3b4c	c9 fe		cmp #$fe			cmp 	#MaxStringSize+2
.3b4e	90 02		bcc $3b52			bcc 	_AHMIsOkay
.3b50					_AHMSetMax:
.3b50	a9 fe		lda #$fe			lda 	#MaxStringSize+2
.3b52					_AHMIsOkay:
.3b52	48		pha				pha	 							; save size to be allocated
.3b53	49 ff		eor #$ff			eor 	#$FF 					; complement and add to high Memory
.3b55	38		sec				sec  							; and copy result to TOS as target address.
.3b56	65 33		adc $33				adc 	highMemory
.3b58	85 33		sta $33				sta 	highMemory
.3b5a	a5 34		lda $34				lda 	highMemory+1
.3b5c	69 ff		adc #$ff			adc 	#$FF
.3b5e	85 34		sta $34				sta 	highMemory+1
.3b60	a0 00		ldy #$00			ldy 	#0 						; Y = 0
.3b62	68		pla				pla 							; get the total size of the storage block
.3b63	91 33		sta ($33),y			sta 	(highMemory),y 			; and set it
.3b65	18		clc				clc
.3b66	a5 33		lda $33				lda		highMemory 				; point the target address to the byte after this.
.3b68	69 01		adc #$01			adc 	#1
.3b6a	91 2c		sta ($2c),y			sta 	(temp1),y
.3b6c	a5 34		lda $34				lda 	highMemory+1
.3b6e	69 00		adc #$00			adc 	#0
.3b70	c8		iny				iny
.3b71	91 2c		sta ($2c),y			sta 	(temp1),y
.3b73	68		pla				pla
.3b74	a8		tay				tay
.3b75	60		rts				rts
.3b76					CopyStringToHardMemory:
.3b76	98		tya				tya
.3b77	48		pha				pha
.3b78	a0 00		ldy #$00			ldy 	#0 						; copy target address to temp2
.3b7a	b1 2c		lda ($2c),y			lda 	(temp1),y
.3b7c	85 2e		sta $2e				sta 	temp2
.3b7e	c8		iny				iny
.3b7f	b1 2c		lda ($2c),y			lda 	(temp1),y
.3b81	85 2f		sta $2f				sta 	temp2+1
.3b83	ac f0 0c	ldy $0cf0			ldy 	srcStrLen 				; copy this + 1 characters, (length too) hence $FF compare
.3b86					_CSTHMLoop:
.3b86	b1 2a		lda ($2a),y			lda 	(temp0),y
.3b88	91 2e		sta ($2e),y			sta 	(temp2),y
.3b8a	88		dey				dey
.3b8b	c0 ff		cpy #$ff			cpy 	#$FF 					; this does the +1
.3b8d	d0 f7		bne $3b86			bne 	_CSTHMLoop
.3b8f	68		pla				pla
.3b90	a8		tay				tay
.3b91	60		rts				rts
.3b92					CheckSpecialConcretion:
.3b92	ad f0 0c	lda $0cf0			lda 	srcStrLen 				; check string is null e.g. length = 0
.3b95	f0 02		beq $3b99			beq 	_CSCNullString
.3b97	18		clc				clc
.3b98	60		rts				rts
.3b99					_CSCNullString:
.3b99	a9 00		lda #$00			lda 	#0 						; by always returning this address we don't waste
.3b9b	8d ce 0a	sta $0ace			sta 	NullString		 		; storage on null strings.
.3b9e	a9 ce		lda #$ce			lda 	#(NullString) & $FF
.3ba0	85 2a		sta $2a				sta 	temp0
.3ba2	a9 0a		lda #$0a			lda 	#(NullString) >> 8
.3ba4	85 2b		sta $2b				sta 	1+(temp0)
.3ba6	38		sec				sec
.3ba7	60		rts				rts

;******  Return to file: string/string.asm

.3ba8					stringHandler:
.3ba8	7c ab 3b	jmp ($3bab,x)			jmp 	(stringVectors,x)
.3bab					stringVectors:
>3bab	bd 3b					.word _DummyControlHandler ; index 0
>3bad	0b 39					.word StringChrs           ; index 2
>3baf	07 3a					.word StrClone             ; index 4
>3bb1	7f 39					.word StringConcat         ; index 6
>3bb3	1a 39					.word StringNull           ; index 8
>3bb5	36 39					.word STRCompare           ; index 10
>3bb7	2d 3a					.word CaseString           ; index 12
>3bb9	72 3a					.word StringSubstring      ; index 14
>3bbb	c6 3a					.word StringWrite          ; index 16
.3bbd					_DummyControlHandler:
.3bbd	60		rts			rts

;******  Return to file: basic.asm

.3bbe					section_end_string:
.3bbe					section_start_tokeniser:

;******  Processing file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/detokenise/detokenise.asm

.0cf1					deTokeniseVector:
>0cf1							.fill 	2
.0cf3					lastCharacterClass:
>0cf3							.fill 	1
.0cf4					indent:
>0cf4							.fill 	1
.3bbe					ListLine:
.3bbe	48		pha				pha								; enter here to list to console. sets the output vector
.3bbf	a9 f6		lda #$f6			lda 	#(deTokenPrint) & $FF
.3bc1	8d f1 0c	sta $0cf1			sta 	deTokeniseVector
.3bc4	a9 3c		lda #$3c			lda 	#(deTokenPrint) >> 8
.3bc6	8d f2 0c	sta $0cf2			sta 	1+(deTokeniseVector)
.3bc9	68		pla				pla
.3bca					Detokenise:
.3bca	18		clc				clc 							; space required for line number.
.3bcb	69 06		adc #$06			adc 	#6
.3bcd	8d f4 0c	sta $0cf4			sta 	indent
.3bd0	a9 ff		lda #$ff			lda 	#$FF 					; last thing printed is a dummy value.
.3bd2	8d f3 0c	sta $0cf3			sta 	lastCharacterClass
.3bd5	a2 02		ldx #$02			ldx 	#2
.3bd7	a9 00		lda #$00			lda 	#0 						; clear upper two bytes
.3bd9	95 a8		sta $a8,x			sta 	esInt2,x
.3bdb	95 b0		sta $b0,x			sta 	esInt3,x
.3bdd	a0 01		ldy #$01			ldy 	#1 						; copy line number to stack,2 (as using stack 0,1 for list range)
.3bdf	b1 28		lda ($28),y			lda 	(codePtr),y
.3be1	95 98		sta $98,x			sta 	esInt0,x
.3be3	c8		iny				iny
.3be4	b1 28		lda ($28),y			lda 	(codePtr),y
.3be6	95 a0		sta $a0,x			sta 	esInt1,x
.3be8	a9 84		lda #$84			lda 	#LTYLineNumber
.3bea	20 d1 3c	jsr $3cd1			jsr 	ListOutputCharacter
.3bed	a9 0a		lda #$0a			lda 	#10 					; base 10
.3bef	20 95 3c	jsr $3c95			jsr 	DTPrintInteger 			; print as integer.
.3bf2	a0 00		ldy #$00			ldy 	#0 						; get length
.3bf4	b1 2a		lda ($2a),y			lda 	(temp0),y 				; into X
.3bf6	aa		tax				tax
.3bf7					_DTPadOut:
.3bf7	a9 20		lda #$20			lda 	#" " 					; pad out to indent.
.3bf9	20 d1 3c	jsr $3cd1			jsr 	ListOutputCharacter
.3bfc	e8		inx				inx
.3bfd	ec f4 0c	cpx $0cf4			cpx 	indent
.3c00	d0 f5		bne $3bf7			bne 	_DTPadOut
.3c02	a0 03		ldy #$03			ldy 	#3 						; start position.
.3c04					_DTListLoop:
.3c04	b1 28		lda ($28),y			lda 	(codePtr),y
.3c06	c9 85		cmp #$85			cmp 	#TOK_STR 				; Inline string.
.3c08	f0 5e		beq $3c68			beq 	_DTIsString
.3c0a	c9 84		cmp #$84			cmp 	#TOK_FPC 				; Floating point
.3c0c	f0 56		beq $3c64			beq 	_DTIsFloat
.3c0e	c9 c5		cmp #$c5			cmp 	#TKW_AMP 				; & hex marker
.3c10	f0 16		beq $3c28			beq 	_DTHexConstant
.3c12	c9 80		cmp #$80			cmp 	#TOK_EOL 				; End of Line
.3c14	d0 06		bne $3c1c			bne 	_DTNotEnd
.3c16	a9 ff		lda #$ff			lda 	#255 					; print CR
.3c18	20 d1 3c	jsr $3cd1			jsr 	ListOutputCharacter
.3c1b	60		rts				rts
.3c1c					_DTNotEnd:
.3c1c	c9 00		cmp #$00			cmp 	#0
.3c1e	30 38		bmi $3c58			bmi 	_DTIsToken
.3c20	c9 40		cmp #$40			cmp 	#$40
.3c22	90 3a		bcc $3c5e			bcc 	_DTIsIdentifier
.3c24	a9 0a		lda #$0a			lda 	#10 					; this is the base, unsigned decimal
.3c26	d0 0d		bne $3c35			bne 	_DTConstant
.3c28					_DTHexConstant:
.3c28	a9 26		lda #$26			lda 	#"&"
.3c2a	20 d1 3c	jsr $3cd1			jsr 	ListOutputCharacter
.3c2d	c8		iny				iny
.3c2e	a9 01		lda #$01			lda 	#1 						; switch to spaces so &xxxx is treated like a number.
.3c30	20 12 3d	jsr $3d12			jsr 	DTSwitchMode
.3c33	a9 10		lda #$10			lda 	#16						; print line unsigned hex
.3c35					_DTConstant:
.3c35	48		pha				pha
.3c36	a9 00		lda #$00			lda 	#0 						; now constant, may need spaces
.3c38	20 12 3d	jsr $3d12			jsr 	DTSwitchMode
.3c3b	a9 86		lda #$86			lda 	#LTYConstant
.3c3d	20 d1 3c	jsr $3cd1			jsr 	ListOutputCharacter
.3c40	a2 02		ldx #$02			ldx 	#2 						; get its value
.3c42	8a		txa				txa
.3c43	a2 10		ldx #$10		ldx	#16
.3c45	20 eb 38	jsr $38eb		jsr	mainHandler
.3c48	aa		tax				tax
.3c49	68		pla				pla 							; get base back
.3c4a	85 32		sta $32				sta 	tempShort
.3c4c	98		tya				tya
.3c4d	48		pha				pha
.3c4e	a5 32		lda $32				lda 	tempShort 				; print in base A stck level X
.3c50	20 95 3c	jsr $3c95			jsr 	DTPrintInteger
.3c53	68		pla				pla
.3c54	a8		tay				tay
.3c55	4c 04 3c	jmp $3c04			jmp 	_DTListLoop
.3c58					_DTIsToken:
.3c58	20 6b 3d	jsr $3d6b			jsr 	DTDecodeToken
.3c5b	4c 04 3c	jmp $3c04			jmp 	_DTListLoop
.3c5e					_DTIsIdentifier:
.3c5e	20 24 3d	jsr $3d24			jsr 	DTIdentifier
.3c61	4c 04 3c	jmp $3c04			jmp 	_DTListLoop
.3c64					_DTIsFloat:
>3c64	db						.byte 	$DB
.3c65	4c 64 3c	jmp $3c64			jmp 	_DTIsFloat
.3c68					_DTIsString:
.3c68	a9 01		lda #$01			lda 	#1 							; now punctuation, may need spaces
.3c6a	20 12 3d	jsr $3d12			jsr 	DTSwitchMode
.3c6d	a9 81		lda #$81			lda 	#LTYString
.3c6f	20 d1 3c	jsr $3cd1			jsr 	ListOutputCharacter
.3c72	a9 22		lda #$22			lda 	#'"'						; open quote
.3c74	20 d1 3c	jsr $3cd1			jsr 	ListOutputCharacter
.3c77	a2 02		ldx #$02			ldx 	#2 							; evaluate string to TOS2.
.3c79	8a		txa				txa
.3c7a	a2 10		ldx #$10		ldx	#16
.3c7c	20 eb 38	jsr $38eb		jsr	mainHandler
.3c7f	aa		tax				tax
.3c80	b5 98		lda $98,x			lda 	esInt0,x 					; copy string address to temp0
.3c82	85 2a		sta $2a				sta 	temp0
.3c84	b5 a0		lda $a0,x			lda 	esInt1,x
.3c86	85 2b		sta $2b				sta 	temp0+1
.3c88	a9 00		lda #$00			lda 	#0 							; don't capitalise.
.3c8a	20 a7 3c	jsr $3ca7			jsr 	DTPrintLengthPrefix
.3c8d	a9 22		lda #$22			lda 	#'"'
.3c8f	20 d1 3c	jsr $3cd1			jsr 	ListOutputCharacter
.3c92	4c 04 3c	jmp $3c04			jmp 	_DTListLoop

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/detokenise/dtprint.asm

.0cf5					tPrintCount:
>0cf5							.fill 	1
.3c95					DTPrintInteger:
.3c95	48		pha				pha									; save base
.3c96	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.3c98	85 2a		sta $2a				sta 	temp0
.3c9a	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.3c9c	85 2b		sta $2b				sta 	1+(temp0)
.3c9e	68		pla				pla
.3c9f	a8		tay				tay
.3ca0	8a		txa				txa
.3ca1	a2 12		ldx #$12		ldx	#18
.3ca3	20 eb 38	jsr $38eb		jsr	mainHandler
.3ca6	aa		tax				tax 								; then drop through here.
.3ca7					DTPrintLengthPrefix:
.3ca7	aa		tax				tax 								; A = 0 = don't case convert.
.3ca8	98		tya				tya
.3ca9	48		pha				pha
.3caa	a0 00		ldy #$00			ldy 	#0 							; get string length = chars to print.
.3cac	b1 2a		lda ($2a),y			lda 	(temp0),y
.3cae	8d f5 0c	sta $0cf5			sta 	tPrintCount
.3cb1	f0 1b		beq $3cce			beq 	_DTPLPExit 					; empty string
.3cb3					_DTPLPLoop:
.3cb3	c8		iny				iny 								; get next.
.3cb4	b1 2a		lda ($2a),y			lda 	(temp0),y
.3cb6	29 7f		and #$7f			and 	#$7F
.3cb8	e0 00		cpx #$00			cpx 	#0 							; skip if not case converting
.3cba	f0 0a		beq $3cc6			beq 	_DTPLPNoCase
.3cbc	c9 41		cmp #$41			cmp 	#"A" 						; if converting UC -> LC
.3cbe	90 06		bcc $3cc6			bcc 	_DTPLPNoCase
.3cc0	c9 5b		cmp #$5b			cmp 	#"Z"+1
.3cc2	b0 02		bcs $3cc6			bcs 	_DTPLPNoCase
.3cc4	49 20		eor #$20			eor 	#"A"^"a"
.3cc6					_DTPLPNoCase
.3cc6	20 d1 3c	jsr $3cd1			jsr 	ListOutputCharacter 		; call handler
.3cc9	ce f5 0c	dec $0cf5			dec 	tPrintCount 				; do all the characters
.3ccc	d0 e5		bne $3cb3			bne 	_DTPLPLoop
.3cce					_DTPLPExit:
.3cce	68		pla				pla
.3ccf	a8		tay				tay
.3cd0	60		rts				rts
.3cd1					ListOutputCharacter:
.3cd1	85 32		sta $32				sta 	tempShort
.3cd3	48		pha				pha
.3cd4	8a		txa				txa
.3cd5	48		pha				pha
.3cd6	98		tya				tya
.3cd7	48		pha				pha
.3cd8	a5 32		lda $32				lda 	tempShort 					; convert ASCII 6 bit (0-31) to 7 bit.
.3cda	c9 20		cmp #$20			cmp 	#32
.3cdc	b0 0c		bcs $3cea			bcs		_LOCHiBit
.3cde	09 40		ora #$40			ora 	#64 						; conversion
.3ce0	c9 40		cmp #$40			cmp 	#64							; make l/c
.3ce2	f0 06		beq $3cea			beq 	_LOCHiBit
.3ce4	c9 5b		cmp #$5b			cmp 	#65+26
.3ce6	b0 02		bcs $3cea			bcs 	_LOCHiBit
.3ce8	69 20		adc #$20			adc 	#32
.3cea					_LOCHiBit:
.3cea	20 f3 3c	jsr $3cf3			jsr 	_LOCCallVector				; call o/p handler routine
.3ced	68		pla				pla
.3cee	a8		tay				tay
.3cef	68		pla				pla
.3cf0	aa		tax				tax
.3cf1	68		pla				pla
.3cf2					_LOCExit:
.3cf2	60		rts				rts
.3cf3					_LOCCallVector:
.3cf3	6c f1 0c	jmp ($0cf1)			jmp 	(deTokeniseVector)
.3cf6					deTokenPrint:
.3cf6	c9 00		cmp #$00			cmp 	#0 							; if bit 7 sets ink colour
.3cf8	30 06		bmi $3d00			bmi 	_dtpInk
.3cfa	a2 16		ldx #$16		ldx	#22
.3cfc	20 f6 14	jsr $14f6		jsr	deviceHandler
.3cff	60		rts				rts
.3d00	c9 ff		cmp #$ff	_dtpInk:cmp 	#255 						; e.g. herhe, get ink and set it
.3d02	f0 08		beq $3d0c			beq 	_dtpCR						; except $FF => CRLF
.3d04	29 07		and #$07			and 	#7
.3d06	a2 08		ldx #$08		ldx	#8
.3d08	20 f6 14	jsr $14f6		jsr	deviceHandler
.3d0b	60		rts				rts
.3d0c					_dtpCR:
.3d0c	a2 06		ldx #$06		ldx	#6
.3d0e	20 f6 14	jsr $14f6		jsr	deviceHandler
.3d11	60		rts				rts
.3d12					DTSwitchMode:
.3d12	cd f3 0c	cmp $0cf3			cmp 	LastCharacterClass 			; if changed, update character class
.3d15	f0 04		beq $3d1b			beq 	_DTSMNoChange
.3d17	8d f3 0c	sta $0cf3			sta 	LastCharacterClass
.3d1a					_DTSMExit:
.3d1a	60		rts				rts
.3d1b					_DTSMNoChange:
.3d1b	c9 01		cmp #$01			cmp 	#1 							; if didn't change to punctuation, two identifiers so we
.3d1d	f0 fb		beq $3d1a			beq 	_DTSMExit 					; need a space.
.3d1f	a9 20		lda #$20			lda 	#" "
.3d21	4c d1 3c	jmp $3cd1			jmp 	ListOutputCharacter

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/detokenise/identifier.asm

.3d24					DTIdentifier:
.3d24	a9 00		lda #$00			lda 	#0 							; now text, may need spaces
.3d26	20 12 3d	jsr $3d12			jsr 	DTSwitchMode
.3d29	a9 87		lda #$87			lda 	#LTYIdentifier
.3d2b	20 d1 3c	jsr $3cd1			jsr 	ListOutputCharacter
.3d2e					_DTILoop:
.3d2e	b1 28		lda ($28),y			lda 	(codePtr),y 				; output main bit of identifier.
.3d30	c9 2d		cmp #$2d			cmp 	#"-"						; make - back to _
.3d32	d0 02		bne $3d36			bne 	_DTINotUS
.3d34	a9 5f		lda #$5f			lda 	#"_"
.3d36					_DTINotUS:
.3d36	20 d1 3c	jsr $3cd1			jsr 	ListOutputCharacter
.3d39	c8		iny				iny
.3d3a	b1 28		lda ($28),y			lda 	(codePtr),y 				; until end identifier marker.
.3d3c	c9 3a		cmp #$3a			cmp 	#$3A
.3d3e	90 ee		bcc $3d2e			bcc 	_DTILoop
.3d40	c8		iny				iny
.3d41	c9 3a		cmp #$3a			cmp 	#$3A 						; is it integer non array
.3d43	f0 25		beq $3d6a			beq 	_DTIExit 					; no postfix.
.3d45	48		pha				pha
.3d46	a9 01		lda #$01			lda  	#1 							; it ends in punctuation
.3d48	8d f3 0c	sta $0cf3			sta 	LastCharacterClass
.3d4b	a9 82		lda #$82			lda 	#LTYPunctuation
.3d4d	20 d1 3c	jsr $3cd1			jsr 	ListOutputCharacter
.3d50	68		pla				pla
.3d51	c9 3b		cmp #$3b			cmp 	#$3B
.3d53	f0 10		beq $3d65			beq 	_DTIArray
.3d55	4a		lsr a				lsr 	a 							; array flag in C
.3d56	08		php				php
.3d57	49 1e		eor #$1e			eor 	#$3C/2 						; check if $
.3d59	f0 02		beq $3d5d			beq 	_DTIDollar
.3d5b	a9 07		lda #$07			lda 	#"$"^"#" 					; this if #, 0 if $
.3d5d					_DTIDollar:
.3d5d	49 24		eor #$24			eor 	#"$"
.3d5f	20 d1 3c	jsr $3cd1			jsr 	ListOutputCharacter
.3d62	28		plp				plp
.3d63	90 05		bcc $3d6a			bcc 	_DTIExit
.3d65					_DTIArray:
.3d65	a9 28		lda #$28			lda 	#"("
.3d67	20 d1 3c	jsr $3cd1			jsr 	ListOutputCharacter
.3d6a					_DTIExit:
.3d6a	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/detokenise/token.asm

.3d6b					DTDecodeToken:
.3d6b	a2 00		ldx #$00			ldx 	#0 							; table number to use
.3d6d	b1 28		lda ($28),y			lda 	(codePtr),y
.3d6f	c9 84		cmp #$84			cmp 	#$84
.3d71	b0 05		bcs $3d78			bcs 	_DTNotShift
.3d73	29 03		and #$03			and 	#3 							; get the shift 1..3
.3d75	0a		asl a				asl 	a 							; put 2 x in X
.3d76	aa		tax				tax
.3d77	c8		iny				iny
.3d78					_DTNotShift:
.3d78	bd 7a 40	lda $407a,x			lda 	TokenTableAddress,x 		; get the token table to use to decode it.
.3d7b	85 2a		sta $2a				sta 	temp0 						; point into temp0
.3d7d	bd 7b 40	lda $407b,x			lda 	TokenTableAddress+1,x
.3d80	85 2b		sta $2b				sta 	temp0+1
.3d82	b1 28		lda ($28),y			lda 	(codePtr),y 				; get the token value.
.3d84	c8		iny				iny 								; consume it.
.3d85	aa		tax				tax
.3d86	98		tya				tya
.3d87	48		pha				pha
.3d88					_DTFindText:
.3d88	e0 86		cpx #$86			cpx 	#$86 						; finished ?
.3d8a	f0 11		beq $3d9d			beq 	_DTFoundText
.3d8c	ca		dex				dex
.3d8d	a0 00		ldy #$00			ldy 	#0 							; add length+1 to temp0
.3d8f	38		sec				sec
.3d90	b1 2a		lda ($2a),y			lda 	(temp0),y
.3d92	65 2a		adc $2a				adc 	temp0
.3d94	85 2a		sta $2a				sta 	temp0
.3d96	90 f0		bcc $3d88			bcc 	_DTFindText
.3d98	e6 2b		inc $2b				inc 	temp0+1
.3d9a	4c 88 3d	jmp $3d88			jmp 	_DTFindText
.3d9d					_DTFoundText:
.3d9d	a0 01		ldy #$01			ldy 	#1 							; get first character
.3d9f	b1 2a		lda ($2a),y			lda 	(temp0),y
.3da1	29 7f		and #$7f			and 	#$7F 						; will have bit 7 set.
.3da3	c9 41		cmp #$41			cmp 	#"A" 						; check for punctuation.
.3da5	90 11		bcc $3db8			bcc 	_DTIsPunctuation
.3da7	c9 5b		cmp #$5b			cmp 	#"Z"+1
.3da9	b0 0d		bcs $3db8			bcs 	_DTIsPunctuation
.3dab	a9 00		lda #$00			lda 	#0 							; now text, may need spaces
.3dad	20 12 3d	jsr $3d12			jsr 	DTSwitchMode
.3db0	a9 83		lda #$83			lda 	#LTYKeyword
.3db2	20 d1 3c	jsr $3cd1			jsr 	ListOutputCharacter
.3db5	4c c2 3d	jmp $3dc2			jmp 	_DTPrint
.3db8					_DTIsPunctuation:
.3db8	a9 01		lda #$01			lda 	#1 							; now punctuation, may need spaces
.3dba	20 12 3d	jsr $3d12			jsr 	DTSwitchMode
.3dbd	a9 82		lda #$82			lda 	#LTYPunctuation
.3dbf	20 d1 3c	jsr $3cd1			jsr 	ListOutputCharacter
.3dc2					_DTPrint:
.3dc2	a9 01		lda #$01			lda 	#1 							; fix case.
.3dc4	20 a7 3c	jsr $3ca7			jsr 	DTPrintLengthPrefix 		; print it out.
.3dc7	a0 00		ldy #$00			ldy 	#0
.3dc9	b1 2a		lda ($2a),y			lda 	(temp0),y
.3dcb	a8		tay				tay
.3dcc	b1 2a		lda ($2a),y			lda 	(temp0),y
.3dce	29 7f		and #$7f			and 	#$7F 						; will have bit 7 set.
.3dd0	c9 41		cmp #$41			cmp 	#"A" 						; check for punctuation.
.3dd2	90 04		bcc $3dd8			bcc 	_DTIsNowPunctuation
.3dd4	c9 5b		cmp #$5b			cmp 	#"Z"+1
.3dd6	90 05		bcc $3ddd			bcc 	_DTPExit
.3dd8					_DTIsNowPunctuation:
.3dd8	a9 01		lda #$01			lda 	#1
.3dda	8d f3 0c	sta $0cf3			sta		LastCharacterClass
.3ddd					_DTPExit:
.3ddd	68		pla				pla
.3dde	a8		tay				tay
.3ddf	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/search.asm

.0cf6					currentSet:
>0cf6							.fill 	1
.3de0					TokenSearch:
.3de0	8a		txa				txa
.3de1	48		pha				pha
.3de2	98		tya				tya
.3de3	48		pha				pha
.3de4	a9 00		lda #$00			lda 	#0
.3de6	8d f6 0c	sta $0cf6			sta 	currentSet
.3de9					_TSLoop:
.3de9	ad f6 0c	lda $0cf6			lda 	currentSet 					; 2 x currentset in X
.3dec	0a		asl a				asl 	a
.3ded	aa		tax				tax
.3dee	bd 7a 40	lda $407a,x			lda 	TokenTableAddress,x 		; set temp0 to the table address
.3df1	85 2a		sta $2a				sta 	temp0
.3df3	bd 7b 40	lda $407b,x			lda 	TokenTableAddress+1,x
.3df6	85 2b		sta $2b				sta 	temp0+1
.3df8	20 1f 3e	jsr $3e1f			jsr 	TokenSearchOne 				; search one table
.3dfb	b0 0d		bcs $3e0a			bcs 	_TSFound 					; found a token.
.3dfd	ee f6 0c	inc $0cf6			inc 	currentSet 					; next set
.3e00	ad f6 0c	lda $0cf6			lda 	currentSet
.3e03	c9 04		cmp #$04			cmp 	#4
.3e05	d0 e2		bne $3de9			bne 	_TSLoop 					; back if not done all four.
.3e07	18		clc				clc 								; clear carry and exit
.3e08	90 10		bcc $3e1a			bcc 	_TSExit
.3e0a					_TSFound:
.3e0a	48		pha				pha 								; save token
.3e0b	ad f6 0c	lda $0cf6			lda 	currentSet					; if set zero no shift
.3e0e	f0 05		beq $3e15			beq 	_TSNoShift
.3e10	09 80		ora #$80			ora 	#$80 						; Write as $81-$83
.3e12	20 d0 3e	jsr $3ed0			jsr 	TokenWrite
.3e15					_TSNoShift:
.3e15	68		pla				pla 								; get token back
.3e16	20 d0 3e	jsr $3ed0			jsr 	TokenWrite 					; write it
.3e19	38		sec				sec 								; carry set indicating success
.3e1a					_TSExit:
.3e1a	68		pla				pla
.3e1b	a8		tay				tay
.3e1c	68		pla				pla
.3e1d	aa		tax				tax
.3e1e	60		rts				rts
.3e1f					TokenSearchOne:
.3e1f	a2 86		ldx #$86			ldx 	#$86 						; current token being tested.
.3e21					_TSOLoop:
.3e21	a0 00		ldy #$00			ldy 	#0
.3e23	b1 2a		lda ($2a),y			lda 	(temp0),y 					; get length of token
.3e25	f0 26		beq $3e4d			beq 	_TSOFail 					; if zero, end of table
.3e27	cd cf 0a	cmp $0acf			cmp 	convertBuffer 				; length is the same, compare the text matches.
.3e2a	f0 11		beq $3e3d			beq 	_TSOCheckText
.3e2c					_TSONext:
.3e2c	e8		inx				inx 								; bump token
.3e2d	a0 00		ldy #$00			ldy 	#0							; get length
.3e2f	b1 2a		lda ($2a),y			lda 	(temp0),y
.3e31	38		sec				sec
.3e32	65 2a		adc $2a				adc 	temp0 						; add to temp0 + 1
.3e34	85 2a		sta $2a				sta 	temp0
.3e36	90 e9		bcc $3e21			bcc 	_TSOLoop
.3e38	e6 2b		inc $2b				inc 	temp0+1
.3e3a	4c 21 3e	jmp $3e21			jmp 	_TSOLoop
.3e3d					_TSOCheckText:
.3e3d	a8		tay				tay 								; compare length downto 1.
.3e3e					_TSOCheckLoop:
.3e3e	b1 2a		lda ($2a),y			lda 	(temp0),y 					; use EOR to compare
.3e40	59 cf 0a	eor $0acf,y			eor 	convertBuffer,y
.3e43	29 7f		and #$7f			and 	#$7F 						; ignore bit 7
.3e45	d0 e5		bne $3e2c			bne 	_TSONext 					; different goto next.
.3e47	88		dey				dey 								; do all
.3e48	d0 f4		bne $3e3e			bne 	_TSOCheckLoop
.3e4a	8a		txa				txa 								; return token in A and carry set
.3e4b	38		sec				sec
.3e4c	60		rts				rts
.3e4d					_TSOFail:
.3e4d	18		clc				clc
.3e4e	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/test.asm

.3e4f					TokTest:
.3e4f	a2 ff		ldx #$ff				ldx 	#$FF
.3e51	9a		txs					txs
.3e52	a9 6f		lda #$6f			lda 	#(TokenText1) & $FF
.3e54	85 28		sta $28				sta 	codePtr
.3e56	a9 3e		lda #$3e			lda 	#(TokenText1) >> 8
.3e58	85 29		sta $29				sta 	1+(codePtr)
.3e5a	20 6f 3e	jsr $3e6f				jsr 	Tokenise
.3e5d	a2 00		ldx #$00	TokStop:	ldx 	#0 					; compare vs precalculated result
.3e5f	bd 6f 3e	lda $3e6f,x	_TokCheck:	lda 	TokenBytes1,x
.3e62	dd fa 0c	cmp $0cfa,x				cmp 	tokenBuffer,x
.3e65	d0 fe		bne $3e65	_TokFail:	bne 	_TokFail	 		; error.
.3e67	e8		inx					inx
.3e68	c9 80		cmp #$80				cmp 	#$80
.3e6a	d0 f3		bne $3e5f				bne 	_TokCheck
.3e6c	4c ff ff	jmp $ffff				jmp 	$FFFF 				; successfully tokenised then quit.

;******  Processing file: tokeniser/tokenise/../../generated/toktest.inc

.3e6f					TokenText1:
.3e6f					TokenBytes1:

;******  Return to file: tokeniser/tokenise/test.asm


;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokenise.asm

.0cf7					tokenHeader:
>0cf7							.fill 	3
.0cfa					tokenBuffer:
>0cfa							.fill 	256
.0dfa					tokenBufferIndex:
>0dfa							.fill 	1
.3e6f					Tokenise:
.3e6f	20 e9 3e	jsr $3ee9			jsr 	TokeniseMakeASCIIZ 			; convert to ASCIIZ string.
.3e72					TokeniseASCIIZ:
.3e72	20 fa 3e	jsr $3efa			jsr 	TokeniseFixCase 			; remove controls and lower case outside quotes.
.3e75	a9 00		lda #$00			lda 	#0 							; reset the token buffer index
.3e77	8d fa 0d	sta $0dfa			sta 	tokenBufferIndex
.3e7a	a8		tay				tay 								; start pointer
.3e7b	a9 80		lda #$80			lda 	#$80 						; empty token buffer ($80 ends it)
.3e7d	8d fa 0c	sta $0cfa			sta 	tokenBuffer
.3e80					_TokLoop:
.3e80	b1 28		lda ($28),y			lda 	(codePtr),y 				; get next character
.3e82	f0 46		beq $3eca			beq 	_TokExit 					; if zero, then exit.
.3e84	c8		iny				iny 								; skip over spaces.
.3e85	c9 20		cmp #$20			cmp 	#" "
.3e87	f0 f7		beq $3e80			beq 	_TokLoop
.3e89	88		dey				dey 								; point back to character.
.3e8a	c9 26		cmp #$26			cmp 	#"&"						; Hexadecimal constant.
.3e8c	f0 18		beq $3ea6			beq 	_TokHexConst
.3e8e	c9 22		cmp #$22			cmp 	#'"'						; Quoted String
.3e90	f0 23		beq $3eb5			beq 	_TokQString
.3e92	c9 5b		cmp #$5b			cmp 	#"Z"+1 						; > 'Z' is punctuation
.3e94	b0 26		bcs $3ebc			bcs 	_TokPunctuation
.3e96	c9 41		cmp #$41			cmp 	#"A" 						; A..Z identifier
.3e98	b0 29		bcs $3ec3			bcs 	_TokIdentifier
.3e9a	c9 3a		cmp #$3a			cmp 	#"9"+1
.3e9c	b0 1e		bcs $3ebc			bcs 	_TokPunctuation 			; between 9 and A exclusive, punctuation
.3e9e	c9 30		cmp #$30			cmp 	#"0"
.3ea0	90 1a		bcc $3ebc			bcc 	_TokPunctuation 			; < 0, punctuation.
.3ea2	a9 0a		lda #$0a			lda 	#10  						; 0..9 constant in base 10.
.3ea4	d0 08		bne $3eae			bne 	_TokConst
.3ea6					_TokHexConst:
.3ea6	c8		iny				iny									; consume token.
.3ea7	a9 c5		lda #$c5			lda 	#TKW_AMP 					; Write ampersand token out
.3ea9	20 d0 3e	jsr $3ed0			jsr 	TokenWrite
.3eac	a9 10		lda #$10			lda 	#16
.3eae					_TokConst:
.3eae	20 b8 3f	jsr $3fb8			jsr 	TokeniseInteger
.3eb1	b0 cd		bcs $3e80			bcs 	_TokLoop
.3eb3	90 18		bcc $3ecd			bcc 	_TokFail
.3eb5					_TokQString:
.3eb5	20 4e 40	jsr $404e			jsr 	TokeniseString
.3eb8	b0 c6		bcs $3e80			bcs 	_TokLoop
.3eba	90 11		bcc $3ecd			bcc 	_TokFail
.3ebc					_TokPunctuation:
.3ebc	20 2d 40	jsr $402d			jsr 	TokenisePunctuation
.3ebf	b0 bf		bcs $3e80			bcs 	_TokLoop
.3ec1	90 0a		bcc $3ecd			bcc 	_TokFail
.3ec3					_TokIdentifier:
.3ec3	20 29 3f	jsr $3f29			jsr 	TokeniseIdentifier
.3ec6	b0 b8		bcs $3e80			bcs 	_TokLoop
.3ec8	90 03		bcc $3ecd			bcc 	_TokFail
.3eca					_TokExit:
.3eca	a9 01		lda #$01			lda 	#1
.3ecc	60		rts				rts
.3ecd					_TokFail:
.3ecd	a9 00		lda #$00			lda 	#0
.3ecf	60		rts				rts
.3ed0					TokenWrite:
.3ed0	85 32		sta $32				sta 	tempShort 					; save XA
.3ed2	48		pha				pha
.3ed3	8a		txa				txa
.3ed4	48		pha				pha
.3ed5	a5 32		lda $32				lda 	tempShort
.3ed7	ae fa 0d	ldx $0dfa			ldx 	tokenBufferIndex 			; geet index
.3eda	9d fa 0c	sta $0cfa,x			sta 	tokenBuffer,x 				; write byte to buffer
.3edd	a9 80		lda #$80			lda 	#TOK_EOL 					; pre-emptively write EOL marker after
.3edf	9d fb 0c	sta $0cfb,x			sta 	tokenBuffer+1,x
.3ee2	ee fa 0d	inc $0dfa			inc 	tokenBufferIndex 			; bump index
.3ee5	68		pla				pla
.3ee6	aa		tax				tax
.3ee7	68		pla				pla
.3ee8	60		rts				rts
.3ee9					TokeniseMakeASCIIZ:
.3ee9	a0 00		ldy #$00			ldy 	#0							; get length of string.
.3eeb	b1 28		lda ($28),y			lda 	(codePtr),y
.3eed	a8		tay				tay
.3eee	c8		iny				iny 								; +1, the NULL goes here.
.3eef	a9 00		lda #$00			lda 	#0
.3ef1	91 28		sta ($28),y			sta 	(codePtr),y 				; write the trailing NULL.
.3ef3	e6 28		inc $28				inc 	codePtr 					; bump the pointer.
.3ef5	d0 02		bne $3ef9			bne 	_TMKAExit
.3ef7	e6 29		inc $29				inc 	codePtr+1
.3ef9					_TMKAExit:
.3ef9	60		rts				rts
.3efa					TokeniseFixCase:
.3efa	a0 00		ldy #$00			ldy 	#0 							; position in buffer.
.3efc	a2 01		ldx #$01			ldx 	#1 							; bit 0 of this is 'in quotes'
.3efe					_TFCFlipQ:
.3efe	8a		txa				txa
.3eff	49 01		eor #$01			eor 	#1
.3f01	aa		tax				tax
.3f02					_TFCLoop:
.3f02	b1 28		lda ($28),y			lda 	(codePtr),y 				; get character
.3f04	f0 22		beq $3f28			beq 	_TFCExit 					; if zero exit.
.3f06	c9 20		cmp #$20			cmp 	#32 						; if control
.3f08	90 1a		bcc $3f24			bcc 	_TFCControl
.3f0a	c8		iny				iny 								; preconsume
.3f0b	c9 22		cmp #$22			cmp 	#'"'
.3f0d	f0 ef		beq $3efe			beq 	_TFCFlipQ
.3f0f	c9 61		cmp #$61			cmp 	#"a"						; check if L/C
.3f11	90 ef		bcc $3f02			bcc 	_TFCLoop
.3f13	c9 7b		cmp #$7b			cmp 	#"z"+1
.3f15	b0 eb		bcs $3f02			bcs 	_TFCLoop
.3f17	e0 00		cpx #$00			cpx 	#0 							; in quotes, if so, leave alone.
.3f19	d0 e7		bne $3f02			bne 	_TFCLoop
.3f1b	88		dey				dey
.3f1c	49 20		eor #$20			eor 	#"A"^"a"					; make U/C
.3f1e					_TFCWrite:
.3f1e	91 28		sta ($28),y			sta 	(codePtr),y
.3f20	c8		iny				iny
.3f21	4c 02 3f	jmp $3f02			jmp 	_TFCLoop
.3f24					_TFCControl:
.3f24	a9 20		lda #$20			lda 	#" "
.3f26	d0 f6		bne $3f1e			bne 	_TFCWrite
.3f28					_TFCExit:
.3f28	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokident.asm

.3f29					TokeniseIdentifier:
.3f29	a2 00		ldx #$00			ldx 	#0
.3f2b					_TICopyID:
.3f2b	b1 28		lda ($28),y			lda 	(codePtr),y					; get characters
.3f2d	c9 5f		cmp #$5f			cmp 	#"_" 						; underscore converted to minus internally.
.3f2f	f0 16		beq $3f47			beq 	_TICopyUnderscore
.3f31	c9 2e		cmp #$2e			cmp 	#"."
.3f33	f0 14		beq $3f49			beq 	_TICopyIn
.3f35	c9 30		cmp #$30			cmp 	#"0"
.3f37	90 1b		bcc $3f54			bcc 	_TIEndCopy
.3f39	c9 3a		cmp #$3a			cmp 	#"9"+1
.3f3b	90 0c		bcc $3f49			bcc 	_TICopyIn
.3f3d	c9 41		cmp #$41			cmp 	#"A"
.3f3f	90 13		bcc $3f54			bcc 	_TIEndCopy
.3f41	c9 5b		cmp #$5b			cmp 	#"Z"+1
.3f43	b0 0f		bcs $3f54			bcs		_TIEndCopy
.3f45	90 02		bcc $3f49			bcc 	_TICopyIn
.3f47					_TICopyUnderScore:
.3f47	a9 2d		lda #$2d			lda 	#"-"						; _ is mapped to -
.3f49					_TICopyIn:
.3f49	e8		inx				inx 								; write into buffer in 7 bit ASCII form
.3f4a	9d cf 0a	sta $0acf,x			sta 	convertBuffer,x
.3f4d	8e cf 0a	stx $0acf			stx 	convertBuffer
.3f50	c8		iny				iny 								; next character
.3f51	4c 2b 3f	jmp $3f2b			jmp 	_TICopyID 					; loop round
.3f54					_TIEndCopy:
.3f54	a9 24		lda #$24			lda 	#"$"
.3f56	20 ab 3f	jsr $3fab			jsr 	TIDCheckCopy
.3f59	a9 23		lda #$23			lda 	#"#"
.3f5b	20 ab 3f	jsr $3fab			jsr 	TIDCheckCopy
.3f5e	a9 28		lda #$28			lda 	#"("
.3f60	20 ab 3f	jsr $3fab			jsr 	TIDCheckCopy
.3f63	20 e0 3d	jsr $3de0			jsr 	TokenSearch 				; is it a token
.3f66	b0 41		bcs $3fa9			bcs 	_TIExit 					; if so, then exit.
.3f68	98		tya				tya
.3f69	48		pha				pha
.3f6a	a0 3a		ldy #$3a			ldy 	#$3A 						; default type.
.3f6c	ae cf 0a	ldx $0acf			ldx 	convertBuffer 				; is last character (
.3f6f	bd cf 0a	lda $0acf,x			lda 	convertBuffer,x
.3f72	c9 28		cmp #$28			cmp 	#"("
.3f74	d0 02		bne $3f78			bne 	_TINotArray
.3f76	ca		dex				dex 								; yes, remove it and convert to array.
.3f77	c8		iny				iny
.3f78					_TINotArray:
.3f78	bd cf 0a	lda $0acf,x			lda 	convertBuffer,x 			; check for $
.3f7b	c9 24		cmp #$24			cmp 	#"$"
.3f7d	d0 03		bne $3f82			bne 	_TINotString
.3f7f	ca		dex				dex
.3f80	c8		iny				iny
.3f81	c8		iny				iny
.3f82					_TINotString:
.3f82	bd cf 0a	lda $0acf,x			lda 	convertBuffer,x 			; check for #
.3f85	c9 23		cmp #$23			cmp 	#"#"
.3f87	d0 05		bne $3f8e			bne 	_TINotFloat
.3f89	ca		dex				dex
.3f8a	c8		iny				iny
.3f8b	c8		iny				iny
.3f8c	c8		iny				iny
.3f8d	c8		iny				iny
.3f8e					_TINotFloat:
.3f8e	e8		inx				inx 								; write end marker for identifier.
.3f8f	98		tya				tya
.3f90	9d cf 0a	sta $0acf,x			sta 	convertBuffer,x
.3f93	8e cf 0a	stx $0acf			stx 	convertBuffer 				; update length.
.3f96	a2 01		ldx #$01			ldx 	#1
.3f98					_TIOutput:
.3f98	bd cf 0a	lda $0acf,x			lda 	convertBuffer,x
.3f9b	29 3f		and #$3f			and 	#$3F
.3f9d	48		pha				pha
.3f9e	20 d0 3e	jsr $3ed0			jsr 	TokenWrite
.3fa1	e8		inx				inx
.3fa2	68		pla				pla
.3fa3	c9 3a		cmp #$3a			cmp 	#$3A
.3fa5	90 f1		bcc $3f98			bcc 	_TIOutput
.3fa7	68		pla				pla
.3fa8	a8		tay				tay
.3fa9					_TIExit:
.3fa9	38		sec				sec 								; this can't fail.
.3faa	60		rts				rts
.3fab					TIDCheckCopy:
.3fab	d1 28		cmp ($28),y			cmp 	(codePtr),y
.3fad	d0 08		bne $3fb7			bne 	_TIDCCExit
.3faf	e8		inx				inx
.3fb0	9d cf 0a	sta $0acf,x			sta 	convertBuffer,x
.3fb3	8e cf 0a	stx $0acf			stx 	convertBuffer
.3fb6	c8		iny				iny
.3fb7					_TIDCCExit:
.3fb7	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokinteger.asm

.3fb8					TokeniseInteger:
.3fb8	85 2c		sta $2c				sta 	temp1 						; save base
.3fba	a2 00		ldx #$00			ldx 	#0							; count of chars so far
.3fbc	8e cf 0a	stx $0acf			stx 	convertBuffer
.3fbf					_TIGetChars:
.3fbf	b1 28		lda ($28),y			lda 	(codePtr),y 				; check character is numeric
.3fc1	c9 30		cmp #$30			cmp 	#"0"
.3fc3	90 1f		bcc $3fe4			bcc 	_TIEndGet
.3fc5	c9 3a		cmp #$3a			cmp 	#"9"+1
.3fc7	90 10		bcc $3fd9			bcc 	_TIHaveChar
.3fc9	a5 2c		lda $2c				lda 	temp1 						; fail if not hex mode
.3fcb	c9 0a		cmp #$0a			cmp 	#10
.3fcd	f0 15		beq $3fe4			beq 	_TIEndGet
.3fcf	b1 28		lda ($28),y			lda 	(codePtr),y 				; check legitimate hex.
.3fd1	c9 41		cmp #$41			cmp 	#"A"
.3fd3	90 0f		bcc $3fe4			bcc 	_TIEndGet
.3fd5	c9 5b		cmp #$5b			cmp 	#"Z"+1
.3fd7	b0 0b		bcs $3fe4			bcs 	_TIEndGet
.3fd9					_TIHaveChar:
.3fd9	e8		inx				inx 								; write into buffer.
.3fda	8e cf 0a	stx $0acf			stx 	convertBuffer
.3fdd	9d cf 0a	sta $0acf,x			sta 	convertBuffer,x
.3fe0	c8		iny				iny 								; next char
.3fe1	4c bf 3f	jmp $3fbf			jmp 	_TIGetChars
.3fe4					_TIEndGet:
.3fe4	e0 00		cpx #$00			cpx 	#0 							; no char acquired.
.3fe6	f0 1c		beq $4004			beq 	_TIFail
.3fe8	98		tya				tya
.3fe9	48		pha				pha
.3fea	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.3fec	85 2a		sta $2a				sta 	temp0
.3fee	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.3ff0	85 2b		sta $2b				sta 	1+(temp0)
.3ff2	a9 00		lda #$00			lda 	#0 							; stack level 0
.3ff4	a4 2c		ldy $2c				ldy 	temp1 						; base Y
.3ff6	a2 1a		ldx #$1a		ldx	#26
.3ff8	20 eb 38	jsr $38eb		jsr	mainHandler
.3ffb	68		pla				pla
.3ffc	a8		tay				tay
.3ffd	90 05		bcc $4004			bcc 	_TIFail 					; didn't convert.
.3fff	20 06 40	jsr $4006			jsr 	TIRecursiveOut 				; recursive output ?
.4002	38		sec				sec
.4003	60		rts				rts
.4004					_TIFail:
.4004	18		clc				clc
.4005	60		rts				rts
.4006					TIRecursiveOut:
.4006	a5 98		lda $98				lda 	esInt0 						; get value to output after possible recursion
.4008	29 3f		and #$3f			and 	#$3F
.400a	09 40		ora #$40			ora 	#$40
.400c	48		pha				pha
.400d	a5 98		lda $98				lda 	esInt0 						; are we recursing ?
.400f	29 c0		and #$c0			and 	#$C0
.4011	05 a0		ora $a0				ora 	esInt1
.4013	05 a8		ora $a8				ora 	esInt2
.4015	05 b0		ora $b0				ora 	esInt3
.4017	f0 10		beq $4029			beq 	_TIRONoRecursion
.4019	a2 06		ldx #$06			ldx 	#6 							; shift right x 6
.401b					_TIROShift:
.401b	46 b0		lsr $b0				lsr 	esInt3
.401d	66 a8		ror $a8				ror 	esInt2
.401f	66 a0		ror $a0				ror 	esInt1
.4021	66 98		ror $98				ror 	esInt0
.4023	ca		dex				dex
.4024	d0 f5		bne $401b			bne 	_TIROShift
.4026	20 06 40	jsr $4006			jsr 	TIRecursiveOut 				; call recursively
.4029					_TIRONoRecursion:
.4029	68		pla				pla 								; pull the old bit.
.402a	4c d0 3e	jmp $3ed0			jmp 	TokenWrite

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokpunct.asm

.402d					TokenisePunctuation:
.402d	b1 28		lda ($28),y			lda	 	(codePtr),y 				; copy next 2 chars into convertBuffer
.402f	8d d0 0a	sta $0ad0			sta 	convertBuffer+1
.4032	c8		iny				iny
.4033	b1 28		lda ($28),y			lda 	(codePtr),y
.4035	8d d1 0a	sta $0ad1			sta 	convertBuffer+2
.4038	c8		iny				iny 								; Y is +2
.4039	a9 02		lda #$02			lda 	#2 							; 2 character string.
.403b	8d cf 0a	sta $0acf			sta 	convertBuffer
.403e	20 e0 3d	jsr $3de0			jsr 	TokenSearch 				; search for that token.
.4041	b0 0a		bcs $404d			bcs 	_TIFound
.4043	ce cf 0a	dec $0acf			dec 	convertBuffer 				; make it a 1 character string
.4046	88		dey				dey 								; Y is now +1
.4047	20 e0 3d	jsr $3de0			jsr 	TokenSearch 				; search for that token.
.404a	b0 01		bcs $404d			bcs 	_TIFound
.404c	88		dey				dey 								; Y is now +0, carry clear indicating failure.
.404d					_TIFound:
.404d	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokstring.asm

.404e					TokeniseString:
.404e	c8		iny				iny 								; skip opening quote
.404f	a2 ff		ldx #$ff			ldx 	#255 						; count length of string.
.4051	84 2a		sty $2a				sty 	temp0 						; save start.
.4053					_TSGetLength:
.4053	b1 28		lda ($28),y			lda 	(codePtr),y 				; get next
.4055	f0 21		beq $4078			beq 	_TSFail						; end of line, fail
.4057	c8		iny				iny
.4058	e8		inx				inx
.4059	c9 22		cmp #$22			cmp 	#'"' 						; until end quote found.
.405b	d0 f6		bne $4053			bne 	_TSGetLength
.405d	a9 85		lda #$85			lda 	#TOK_STR 					; write string token out
.405f	20 d0 3e	jsr $3ed0			jsr 	TokenWrite
.4062	8a		txa				txa 								; output length
.4063	20 d0 3e	jsr $3ed0			jsr 	TokenWrite
.4066	a4 2a		ldy $2a				ldy 	temp0 						; get original position
.4068	e0 00		cpx #$00			cpx 	#0 							; check ended
.406a	f0 09		beq $4075			beq 	_TSExit
.406c					_TSOutput:
.406c	b1 28		lda ($28),y			lda 	(codePtr),y					; output character
.406e	20 d0 3e	jsr $3ed0			jsr 	TokenWrite
.4071	c8		iny				iny
.4072	ca		dex				dex
.4073	d0 f7		bne $406c			bne 	_TSOutput
.4075					_TSExit:
.4075	c8		iny				iny 								; skip ending quote
.4076	38		sec				sec 								; return CS.
.4077	60		rts				rts
.4078					_TSFail:
.4078	18		clc				clc
.4079	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokentext.asm

.407a					TokenTableAddress:
>407a	82 40						.word 	Group0Text
>407c	4b 42						.word 	Group1Text
>407e	98 43						.word 	Group2Text
>4080	c3 43						.word 	Group3Text

;******  Processing file: tokeniser/../generated/tokentext0.inc

.4082					Group0Text:
>4082	03 41 4e c4				.byte $03,$41,$4e,$c4                  ; $86 and
>4086	02 4f d2				.byte $02,$4f,$d2                      ; $87 or
>4089	03 58 4f d2				.byte $03,$58,$4f,$d2                  ; $88 xor
>408d	02 3e bd				.byte $02,$3e,$bd                      ; $89 >=
>4090	02 3c bd				.byte $02,$3c,$bd                      ; $8a <=
>4093	01 be					.byte $01,$be                          ; $8b >
>4095	01 bc					.byte $01,$bc                          ; $8c <
>4097	01 bd					.byte $01,$bd                          ; $8d =
>4099	02 3c be				.byte $02,$3c,$be                      ; $8e <>
>409c	01 ab					.byte $01,$ab                          ; $8f +
>409e	01 ad					.byte $01,$ad                          ; $90 -
>40a0	02 3e be				.byte $02,$3e,$be                      ; $91 >>
>40a3	02 3c bc				.byte $02,$3c,$bc                      ; $92 <<
>40a6	01 aa					.byte $01,$aa                          ; $93 *
>40a8	01 af					.byte $01,$af                          ; $94 /
>40aa	03 4d 4f c4				.byte $03,$4d,$4f,$c4                  ; $95 mod
>40ae	01 de					.byte $01,$de                          ; $96 ^
>40b0	01 a1					.byte $01,$a1                          ; $97 !
>40b2	01 bf					.byte $01,$bf                          ; $98 ?
>40b4	06 52 45 50 45 41 d4			.byte $06,$52,$45,$50,$45,$41,$d4      ; $99 repeat
>40bb	05 57 48 49 4c c5			.byte $05,$57,$48,$49,$4c,$c5          ; $9a while
>40c1	03 46 4f d2				.byte $03,$46,$4f,$d2                  ; $9b for
>40c5	02 49 c6				.byte $02,$49,$c6                      ; $9c if
>40c8	07 44 45 46 50 52 4f c3			.byte $07,$44,$45,$46,$50,$52,$4f,$c3  ; $9d defproc
>40d0	05 55 4e 54 49 cc			.byte $05,$55,$4e,$54,$49,$cc          ; $9e until
>40d6	04 57 45 4e c4				.byte $04,$57,$45,$4e,$c4              ; $9f wend
>40db	04 4e 45 58 d4				.byte $04,$4e,$45,$58,$d4              ; $a0 next
>40e0	04 54 48 45 ce				.byte $04,$54,$48,$45,$ce              ; $a1 then
>40e5	05 45 4e 44 49 c6			.byte $05,$45,$4e,$44,$49,$c6          ; $a2 endif
>40eb	07 45 4e 44 50 52 4f c3			.byte $07,$45,$4e,$44,$50,$52,$4f,$c3  ; $a3 endproc
>40f3	01 a8					.byte $01,$a8                          ; $a4 (
>40f5	04 4c 45 4e a8				.byte $04,$4c,$45,$4e,$a8              ; $a5 len(
>40fa	04 53 47 4e a8				.byte $04,$53,$47,$4e,$a8              ; $a6 sgn(
>40ff	04 41 42 53 a8				.byte $04,$41,$42,$53,$a8              ; $a7 abs(
>4104	07 52 41 4e 44 4f 4d a8			.byte $07,$52,$41,$4e,$44,$4f,$4d,$a8  ; $a8 random(
>410c	04 50 41 47 c5				.byte $04,$50,$41,$47,$c5              ; $a9 page
>4111	04 54 52 55 c5				.byte $04,$54,$52,$55,$c5              ; $aa true
>4116	05 46 41 4c 53 c5			.byte $05,$46,$41,$4c,$53,$c5          ; $ab false
>411c	04 4d 49 4e a8				.byte $04,$4d,$49,$4e,$a8              ; $ac min(
>4121	04 4d 41 58 a8				.byte $04,$4d,$41,$58,$a8              ; $ad max(
>4126	04 53 59 53 a8				.byte $04,$53,$59,$53,$a8              ; $ae sys(
>412b	06 54 49 4d 45 52 a8			.byte $06,$54,$49,$4d,$45,$52,$a8      ; $af timer(
>4132	06 45 56 45 4e 54 a8			.byte $06,$45,$56,$45,$4e,$54,$a8      ; $b0 event(
>4139	04 47 45 54 a8				.byte $04,$47,$45,$54,$a8              ; $b1 get(
>413e	06 49 4e 4b 45 59 a8			.byte $06,$49,$4e,$4b,$45,$59,$a8      ; $b2 inkey(
>4145	06 41 4c 4c 4f 43 a8			.byte $06,$41,$4c,$4c,$4f,$43,$a8      ; $b3 alloc(
>414c	05 43 48 52 24 a8			.byte $05,$43,$48,$52,$24,$a8          ; $b4 chr$(
>4152	06 4c 45 46 54 24 a8			.byte $06,$4c,$45,$46,$54,$24,$a8      ; $b5 left$(
>4159	05 4d 49 44 24 a8			.byte $05,$4d,$49,$44,$24,$a8          ; $b6 mid$(
>415f	07 52 49 47 48 54 24 a8			.byte $07,$52,$49,$47,$48,$54,$24,$a8  ; $b7 right$(
>4167	05 53 54 52 24 a8			.byte $05,$53,$54,$52,$24,$a8          ; $b8 str$(
>416d	04 56 41 4c a8				.byte $04,$56,$41,$4c,$a8              ; $b9 val(
>4172	05 50 45 45 4b a8			.byte $05,$50,$45,$45,$4b,$a8          ; $ba peek(
>4178	05 44 45 45 4b a8			.byte $05,$44,$45,$45,$4b,$a8          ; $bb deek(
>417e	05 4c 45 45 4b a8			.byte $05,$4c,$45,$45,$4b,$a8          ; $bc leek(
>4184	04 41 53 43 a8				.byte $04,$41,$53,$43,$a8              ; $bd asc(
>4189	04 49 4e 54 a8				.byte $04,$49,$4e,$54,$a8              ; $be int(
>418e	06 46 4c 4f 41 54 a8			.byte $06,$46,$4c,$4f,$41,$54,$a8      ; $bf float(
>4195	06 49 53 56 41 4c a8			.byte $06,$49,$53,$56,$41,$4c,$a8      ; $c0 isval(
>419c	07 55 50 50 45 52 24 a8			.byte $07,$55,$50,$50,$45,$52,$24,$a8  ; $c1 upper$(
>41a4	07 4c 4f 57 45 52 24 a8			.byte $07,$4c,$4f,$57,$45,$52,$24,$a8  ; $c2 lower$(
>41ac	01 c0					.byte $01,$c0                          ; $c3 @
>41ae	01 fe					.byte $01,$fe                          ; $c4 ~
>41b0	01 a6					.byte $01,$a6                          ; $c5 &
>41b2	05 47 45 54 24 a8			.byte $05,$47,$45,$54,$24,$a8          ; $c6 get$(
>41b8	07 49 4e 4b 45 59 24 a8			.byte $07,$49,$4e,$4b,$45,$59,$24,$a8  ; $c7 inkey$(
>41c0	03 4d 45 cd				.byte $03,$4d,$45,$cd                  ; $c8 mem
>41c4	01 a9					.byte $01,$a9                          ; $c9 )
>41c6	01 ba					.byte $01,$ba                          ; $ca :
>41c8	01 ac					.byte $01,$ac                          ; $cb ,
>41ca	01 bb					.byte $01,$bb                          ; $cc ;
>41cc	01 a7					.byte $01,$a7                          ; $cd '
>41ce	02 54 cf				.byte $02,$54,$cf                      ; $ce to
>41d1	04 53 54 45 d0				.byte $04,$53,$54,$45,$d0              ; $cf step
>41d6	04 50 52 4f c3				.byte $04,$50,$52,$4f,$c3              ; $d0 proc
>41db	05 4c 4f 43 41 cc			.byte $05,$4c,$4f,$43,$41,$cc          ; $d1 local
>41e1	03 44 49 cd				.byte $03,$44,$49,$cd                  ; $d2 dim
>41e5	03 52 45 cd				.byte $03,$52,$45,$cd                  ; $d3 rem
>41e9	03 4c 45 d4				.byte $03,$4c,$45,$d4                  ; $d4 let
>41ed	05 49 4e 50 55 d4			.byte $05,$49,$4e,$50,$55,$d4          ; $d5 input
>41f3	04 45 4c 53 c5				.byte $04,$45,$4c,$53,$c5              ; $d6 else
>41f8	03 56 44 d5				.byte $03,$56,$44,$d5                  ; $d7 vdu
>41fc	05 50 52 49 4e d4			.byte $05,$50,$52,$49,$4e,$d4          ; $d8 print
>4202	04 44 41 54 c1				.byte $04,$44,$41,$54,$c1              ; $d9 data
>4207	05 49 4d 41 47 c5			.byte $05,$49,$4d,$41,$47,$c5          ; $da image
>420d	02 41 d4				.byte $02,$41,$d4                      ; $db at
>4210	04 46 4c 49 d0				.byte $04,$46,$4c,$49,$d0              ; $dc flip
>4215	06 41 53 53 45 52 d4			.byte $06,$41,$53,$53,$45,$52,$d4      ; $dd assert
>421c	04 50 4f 4b c5				.byte $04,$50,$4f,$4b,$c5              ; $de poke
>4221	04 44 4f 4b c5				.byte $04,$44,$4f,$4b,$c5              ; $df doke
>4226	04 4c 4f 4b c5				.byte $04,$4c,$4f,$4b,$c5              ; $e0 loke
>422b	03 49 4e cb				.byte $03,$49,$4e,$cb                  ; $e1 ink
>422f	05 50 41 50 45 d2			.byte $05,$50,$41,$50,$45,$d2          ; $e2 paper
>4235	03 43 4c d3				.byte $03,$43,$4c,$d3                  ; $e3 cls
>4239	06 4c 4f 43 41 54 c5			.byte $06,$4c,$4f,$43,$41,$54,$c5      ; $e4 locate
>4240	01 ae					.byte $01,$ae                          ; $e5 .
>4242	01 a3					.byte $01,$a3                          ; $e6 #
>4244	05 43 4c 45 41 d2			.byte $05,$43,$4c,$45,$41,$d2          ; $e7 clear
>424a	00					.byte $00

;******  Return to file: tokeniser/tokentext.asm


;******  Processing file: tokeniser/../generated/tokentext1.inc

.424b					Group1Text:
>424b	04 4c 4f 41 c4				.byte $04,$4c,$4f,$41,$c4              ; $86 load
>4250	04 53 41 56 c5				.byte $04,$53,$41,$56,$c5              ; $87 save
>4255	04 4c 49 53 d4				.byte $04,$4c,$49,$53,$d4              ; $88 list
>425a	03 4e 45 d7				.byte $03,$4e,$45,$d7                  ; $89 new
>425e	05 42 52 45 41 cb			.byte $05,$42,$52,$45,$41,$cb          ; $8a break
>4264	03 52 55 ce				.byte $03,$52,$55,$ce                  ; $8b run
>4268	04 52 45 41 c4				.byte $04,$52,$45,$41,$c4              ; $8c read
>426d	07 52 45 53 54 4f 52 c5			.byte $07,$52,$45,$53,$54,$4f,$52,$c5  ; $8d restore
>4275	03 45 4e c4				.byte $03,$45,$4e,$c4                  ; $8e end
>4279	04 53 54 4f d0				.byte $04,$53,$54,$4f,$d0              ; $8f stop
>427e	04 58 45 4d d5				.byte $04,$58,$45,$4d,$d5              ; $90 xemu
>4283	04 47 4f 54 cf				.byte $04,$47,$4f,$54,$cf              ; $91 goto
>4288	05 47 4f 53 55 c2			.byte $05,$47,$4f,$53,$55,$c2          ; $92 gosub
>428e	06 52 45 54 55 52 ce			.byte $06,$52,$45,$54,$55,$52,$ce      ; $93 return
>4295	03 4f 52 c1				.byte $03,$4f,$52,$c1                  ; $94 ora
>4299	05 28 41 4e 44 a9			.byte $05,$28,$41,$4e,$44,$a9          ; $95 (and)
>429f	03 45 4f d2				.byte $03,$45,$4f,$d2                  ; $96 eor
>42a3	03 41 44 c3				.byte $03,$41,$44,$c3                  ; $97 adc
>42a7	03 53 54 c1				.byte $03,$53,$54,$c1                  ; $98 sta
>42ab	03 4c 44 c1				.byte $03,$4c,$44,$c1                  ; $99 lda
>42af	03 43 4d d0				.byte $03,$43,$4d,$d0                  ; $9a cmp
>42b3	03 53 42 c3				.byte $03,$53,$42,$c3                  ; $9b sbc
>42b7	03 41 53 cc				.byte $03,$41,$53,$cc                  ; $9c asl
>42bb	03 52 4f cc				.byte $03,$52,$4f,$cc                  ; $9d rol
>42bf	03 4c 53 d2				.byte $03,$4c,$53,$d2                  ; $9e lsr
>42c3	03 52 4f d2				.byte $03,$52,$4f,$d2                  ; $9f ror
>42c7	03 53 54 d8				.byte $03,$53,$54,$d8                  ; $a0 stx
>42cb	03 4c 44 d8				.byte $03,$4c,$44,$d8                  ; $a1 ldx
>42cf	03 44 45 c3				.byte $03,$44,$45,$c3                  ; $a2 dec
>42d3	03 49 4e c3				.byte $03,$49,$4e,$c3                  ; $a3 inc
>42d7	03 53 54 da				.byte $03,$53,$54,$da                  ; $a4 stz
>42db	03 42 49 d4				.byte $03,$42,$49,$d4                  ; $a5 bit
>42df	03 53 54 d9				.byte $03,$53,$54,$d9                  ; $a6 sty
>42e3	03 4c 44 d9				.byte $03,$4c,$44,$d9                  ; $a7 ldy
>42e7	03 43 50 d9				.byte $03,$43,$50,$d9                  ; $a8 cpy
>42eb	03 43 50 d8				.byte $03,$43,$50,$d8                  ; $a9 cpx
>42ef	03 54 53 c2				.byte $03,$54,$53,$c2                  ; $aa tsb
>42f3	03 54 52 c2				.byte $03,$54,$52,$c2                  ; $ab trb
>42f7	03 4a 53 d2				.byte $03,$4a,$53,$d2                  ; $ac jsr
>42fb	03 4a 4d d0				.byte $03,$4a,$4d,$d0                  ; $ad jmp
>42ff	03 42 50 cc				.byte $03,$42,$50,$cc                  ; $ae bpl
>4303	03 42 4d c9				.byte $03,$42,$4d,$c9                  ; $af bmi
>4307	03 42 56 c3				.byte $03,$42,$56,$c3                  ; $b0 bvc
>430b	03 42 56 d3				.byte $03,$42,$56,$d3                  ; $b1 bvs
>430f	03 42 43 c3				.byte $03,$42,$43,$c3                  ; $b2 bcc
>4313	03 42 43 d3				.byte $03,$42,$43,$d3                  ; $b3 bcs
>4317	03 42 4e c5				.byte $03,$42,$4e,$c5                  ; $b4 bne
>431b	03 42 45 d1				.byte $03,$42,$45,$d1                  ; $b5 beq
>431f	03 42 52 c1				.byte $03,$42,$52,$c1                  ; $b6 bra
>4323	03 42 52 cb				.byte $03,$42,$52,$cb                  ; $b7 brk
>4327	03 50 48 d0				.byte $03,$50,$48,$d0                  ; $b8 php
>432b	03 43 4c c3				.byte $03,$43,$4c,$c3                  ; $b9 clc
>432f	03 50 4c d0				.byte $03,$50,$4c,$d0                  ; $ba plp
>4333	03 53 45 c3				.byte $03,$53,$45,$c3                  ; $bb sec
>4337	03 52 54 c9				.byte $03,$52,$54,$c9                  ; $bc rti
>433b	03 50 48 c1				.byte $03,$50,$48,$c1                  ; $bd pha
>433f	03 43 4c c9				.byte $03,$43,$4c,$c9                  ; $be cli
>4343	03 50 48 d9				.byte $03,$50,$48,$d9                  ; $bf phy
>4347	03 52 54 d3				.byte $03,$52,$54,$d3                  ; $c0 rts
>434b	03 50 4c c1				.byte $03,$50,$4c,$c1                  ; $c1 pla
>434f	03 53 45 c9				.byte $03,$53,$45,$c9                  ; $c2 sei
>4353	03 50 4c d9				.byte $03,$50,$4c,$d9                  ; $c3 ply
>4357	03 44 45 d9				.byte $03,$44,$45,$d9                  ; $c4 dey
>435b	03 54 58 c1				.byte $03,$54,$58,$c1                  ; $c5 txa
>435f	03 54 59 c1				.byte $03,$54,$59,$c1                  ; $c6 tya
>4363	03 54 58 d3				.byte $03,$54,$58,$d3                  ; $c7 txs
>4367	03 54 41 d9				.byte $03,$54,$41,$d9                  ; $c8 tay
>436b	03 54 41 d8				.byte $03,$54,$41,$d8                  ; $c9 tax
>436f	03 43 4c d6				.byte $03,$43,$4c,$d6                  ; $ca clv
>4373	03 54 53 d8				.byte $03,$54,$53,$d8                  ; $cb tsx
>4377	03 49 4e d9				.byte $03,$49,$4e,$d9                  ; $cc iny
>437b	03 44 45 d8				.byte $03,$44,$45,$d8                  ; $cd dex
>437f	03 43 4c c4				.byte $03,$43,$4c,$c4                  ; $ce cld
>4383	03 50 48 d8				.byte $03,$50,$48,$d8                  ; $cf phx
>4387	03 49 4e d8				.byte $03,$49,$4e,$d8                  ; $d0 inx
>438b	03 4e 4f d0				.byte $03,$4e,$4f,$d0                  ; $d1 nop
>438f	03 53 45 c4				.byte $03,$53,$45,$c4                  ; $d2 sed
>4393	03 50 4c d8				.byte $03,$50,$4c,$d8                  ; $d3 plx
>4397	00					.byte $00

;******  Return to file: tokeniser/tokentext.asm


;******  Processing file: tokeniser/../generated/tokentext2.inc

.4398					Group2Text:
>4398	05 56 50 4f 4b c5			.byte $05,$56,$50,$4f,$4b,$c5          ; $86 vpoke
>439e	05 56 44 4f 4b c5			.byte $05,$56,$44,$4f,$4b,$c5          ; $87 vdoke
>43a4	05 56 4c 4f 41 c4			.byte $05,$56,$4c,$4f,$41,$c4          ; $88 vload
>43aa	04 4d 4f 44 c5				.byte $04,$4d,$4f,$44,$c5              ; $89 mode
>43af	07 50 41 4c 45 54 54 c5			.byte $07,$50,$41,$4c,$45,$54,$54,$c5  ; $8a palette
>43b7	06 53 50 52 49 54 c5			.byte $06,$53,$50,$52,$49,$54,$c5      ; $8b sprite
>43be	03 43 4c c7				.byte $03,$43,$4c,$c7                  ; $8c clg
>43c2	00					.byte $00

;******  Return to file: tokeniser/tokentext.asm


;******  Processing file: tokeniser/../generated/tokentext3.inc

.43c3					Group3Text:
>43c3	06 56 50 45 45 4b a8			.byte $06,$56,$50,$45,$45,$4b,$a8      ; $86 vpeek(
>43ca	06 56 44 45 45 4b a8			.byte $06,$56,$44,$45,$45,$4b,$a8      ; $87 vdeek(
>43d1	09 53 50 52 49 54 45 2e			.byte $09,$53,$50,$52,$49,$54,$45,$2e,$58,$a8 ; $88 sprite.x(
>43d9	58 a8
>43db	09 53 50 52 49 54 45 2e			.byte $09,$53,$50,$52,$49,$54,$45,$2e,$59,$a8 ; $89 sprite.y(
>43e3	59 a8
>43e5	04 48 49 54 a8				.byte $04,$48,$49,$54,$a8              ; $8a hit(
>43ea	06 4a 4f 59 2e 58 a8			.byte $06,$4a,$4f,$59,$2e,$58,$a8      ; $8b joy.x(
>43f1	06 4a 4f 59 2e 59 a8			.byte $06,$4a,$4f,$59,$2e,$59,$a8      ; $8c joy.y(
>43f8	06 4a 4f 59 2e 42 a8			.byte $06,$4a,$4f,$59,$2e,$42,$a8      ; $8d joy.b(
>43ff	06 43 4c 4f 43 4b a8			.byte $06,$43,$4c,$4f,$43,$4b,$a8      ; $8e clock(
>4406	00					.byte $00

;******  Return to file: tokeniser/tokentext.asm


;******  Return to file: tokeniser/tokeniser.asm

.4407					tokeniserHandler:
.4407	7c 0a 44	jmp ($440a,x)			jmp 	(tokeniserVectors,x)
.440a					tokeniserVectors:
>440a	16 44					.word _DummyControlHandler ; index 0
>440c	ca 3b					.word Detokenise           ; index 2
>440e	be 3b					.word ListLine             ; index 4
>4410	4f 3e					.word TokTest              ; index 6
>4412	6f 3e					.word Tokenise             ; index 8
>4414	72 3e					.word TokeniseASCIIZ       ; index 10
.4416					_DummyControlHandler:
.4416	60		rts			rts

;******  Return to file: basic.asm

.4417					section_end_tokeniser:
.4417					section_start_variable:

;******  Processing file: variable/variable.asm


;******  Processing file: variable/array/access.asm

.4417					AccessArray:
.4417	8a		txa				txa
.4418	48		pha				pha
.4419	e8		inx				inx
.441a	20 e3 44	jsr $44e3			jsr 	GetArrayDimensions 			; get the array dimensions one up from here.
.441d	68		pla				pla
.441e	aa		tax				tax
.441f	b5 98		lda $98,x			lda 	esInt0,x 					; restore address to follow in temp0.
.4421	85 2a		sta $2a				sta 	temp0
.4423	b5 a0		lda $a0,x			lda 	esInt1,x
.4425	85 2b		sta $2b				sta 	temp0+1
.4427	8a		txa				txa
.4428	48		pha				pha
.4429	98		tya				tya
.442a	48		pha				pha
.442b					_AAFollow:
.442b	a0 00		ldy #$00			ldy 	#0
.442d	b1 2a		lda ($2a),y			lda 	(temp0),y
.442f	48		pha				pha
.4430	c8		iny				iny
.4431	b1 2a		lda ($2a),y			lda 	(temp0),y
.4433	85 2b		sta $2b				sta 	temp0+1
.4435	68		pla				pla
.4436	85 2a		sta $2a				sta 	temp0
.4438	e8		inx				inx 								; advance to next stack slot.
.4439	a0 00		ldy #$00			ldy 	#0
.443b	b1 2a		lda ($2a),y			lda 	(temp0),y 					; compare max index vs required index
.443d	d5 98		cmp $98,x			cmp 	esInt0,x
.443f	c8		iny				iny
.4440	b1 2a		lda ($2a),y			lda 	(temp0),y 					; drop bit 7 of the size, indicates follow.
.4442	85 2c		sta $2c				sta 	temp1 						; save the size in temp1 for later use.
.4444	29 7f		and #$7f			and 	#$7F
.4446	f5 a0		sbc $a0,x			sbc 	esInt1,x
.4448	90 50		bcc $449a			bcc 	_AABadIndex 				; failed on index if max index < required.
.444a	18		clc				clc
.444b	a5 2a		lda $2a				lda 	temp0
.444d	69 02		adc #$02			adc 	#2
.444f	85 2a		sta $2a				sta 	temp0
.4451	90 02		bcc $4455			bcc 	_AANoCarry
.4453	e6 2b		inc $2b				inc 	temp0+1
.4455					_AANoCarry:
.4455	b5 98		lda $98,x			lda 	esInt0,x
.4457	85 2e		sta $2e				sta 	temp2
.4459	b5 a0		lda $a0,x			lda 	esInt1,x
.445b	85 2f		sta $2f				sta 	temp2+1
.445d	ac fd 0d	ldy $0dfd			ldy 	varType
.4460	b9 3d 45	lda $453d,y			lda 	CAActualSize-$3A,y
.4463	b4 91		ldy $91,x			ldy 	esType+1,x 					; is it top level
.4465	30 02		bmi $4469			bmi 	_AANotPointer
.4467	a9 02		lda #$02			lda 	#2 							; array of pointers is 2.
.4469					_AANotPointer:
.4469	20 e7 45	jsr $45e7			jsr 	MultiplyTemp2ByA 			; multiply the index by the data size, in temp2.
.446c	18		clc				clc
.446d	a5 2a		lda $2a				lda 	temp0
.446f	65 2e		adc $2e				adc 	temp2
.4471	85 2a		sta $2a				sta 	temp0
.4473	a5 2b		lda $2b				lda 	temp0+1
.4475	65 2f		adc $2f				adc 	temp2+1
.4477	85 2b		sta $2b				sta 	temp0+1
.4479	b5 91		lda $91,x			lda 	esType+1,x
.447b	30 07		bmi $4484			bmi 	_AAUsedAllIndices
.447d	a5 2c		lda $2c				lda 	temp1 						; check if this is a pointer array e.g. there are subarrays
.447f	10 14		bpl $4495			bpl 	_AABadDepth 				; no, too many indexes.
.4481	4c 2b 44	jmp $442b			jmp 	_AAFollow 					; otherwise follow them.
.4484					_AAUsedAllIndices:
.4484	a5 2c		lda $2c				lda 	temp1 						; get original high length byte.
.4486	30 0d		bmi $4495			bmi 	_AABadDepth 				; if -ve then this is an array of pointers.
.4488	68		pla				pla
.4489	a8		tay				tay
.448a	68		pla				pla
.448b	aa		tax				tax
.448c	a5 2a		lda $2a				lda 	temp0 						; copy address of array element to stack,x
.448e	95 98		sta $98,x			sta 	esInt0,x
.4490	a5 2b		lda $2b				lda 	temp0+1
.4492	95 a0		sta $a0,x			sta 	esInt1,x
.4494	60		rts				rts
.4495					_AABadDepth:
.4495	a2 1c		ldx #$1c			ldx 	#ErrorID_ArrayDepth
.4497	20 18 15	jsr $1518		jsr	errorHandler
.449a					_AABadIndex:
.449a	a2 1b		ldx #$1b			ldx 	#ErrorID_ArrayIndex
.449c	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: variable/variable.asm


;******  Processing file: variable/array/create.asm

.0dfb					elementSize:
>0dfb							.fill	 1
.449f					CreateArray:
.449f	20 76 46	jsr $4676			jsr 	AccessSetup 				; set up the basic stuff.
.44a2	ad fd 0d	lda $0dfd			lda 	varType 					; is the variable type an array
.44a5	4a		lsr a				lsr 	a
.44a6	90 36		bcc $44de			bcc 	CANotArray 					; no, cause an error.
.44a8	20 7f 47	jsr $477f			jsr 	FindVariable 				; does the variable exist already
.44ab	b0 2c		bcs $44d9			bcs 	CAFound 					; cannot redefine it.
.44ad	20 b3 46	jsr $46b3			jsr 	CreateVariable 				; create the variable entry.
.44b0	a5 2a		lda $2a				lda 	temp0 						; push address of new variable entry on the stack
.44b2	48		pha				pha
.44b3	a5 2b		lda $2b				lda 	temp0+1
.44b5	48		pha				pha
.44b6	a2 00		ldx #$00			ldx 	#0
.44b8	20 e3 44	jsr $44e3			jsr 	GetArrayDimensions 			; get the array dimensions
.44bb	a2 00		ldx #$00			ldx 	#0 							; create at level $00
.44bd	20 13 45	jsr $4513			jsr 	CreateArrayLevel 			; level to YA
.44c0	aa		tax				tax 								; level now in YX
.44c1	68		pla				pla 								; get address back to temp0 to write.
.44c2	85 2b		sta $2b				sta 	temp0+1
.44c4	68		pla				pla
.44c5	85 2a		sta $2a				sta 	temp0
.44c7	98		tya				tya 								; write YX there.
.44c8	a0 06		ldy #$06			ldy 	#6
.44ca	91 2a		sta ($2a),y			sta 	(temp0),y
.44cc	88		dey				dey
.44cd	8a		txa				txa
.44ce	91 2a		sta ($2a),y			sta 	(temp0),y
.44d0	ac fe 0d	ldy $0dfe			ldy 	varEnd 						; restore Y and exit.
.44d3	60		rts				rts
.44d4					CASize:
.44d4	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.44d6	20 18 15	jsr $1518		jsr	errorHandler
.44d9					CAFound:
.44d9	a2 19		ldx #$19			ldx 	#ErrorID_DupArray
.44db	20 18 15	jsr $1518		jsr	errorHandler
.44de					CANotArray:
.44de	a2 1a		ldx #$1a			ldx 	#ErrorID_NotArray
.44e0	20 18 15	jsr $1518		jsr	errorHandler
.44e3					GetArrayDimensions:
.44e3	ad fd 0d	lda $0dfd			lda 	varType 					; push variable type on the stack.
.44e6	48		pha				pha
.44e7	ac fe 0d	ldy $0dfe			ldy 	varEnd
.44ea					_CAGetDimensions:
.44ea	8a		txa				txa 								; get the next level
.44eb	a2 0a		ldx #$0a		ldx	#10
.44ed	20 eb 38	jsr $38eb		jsr	mainHandler
.44f0	aa		tax				tax
.44f1	b5 a0		lda $a0,x			lda 	esInt1,x 					; index must be < 8192
.44f3	29 e0		and #$e0			and 	#$E0
.44f5	15 a8		ora $a8,x			ora 	esInt2,x
.44f7	15 b0		ora $b0,x			ora 	esInt3,x
.44f9	d0 d9		bne $44d4			bne 	CASize
.44fb	e8		inx				inx 								; next level.
.44fc	b1 28		lda ($28),y			lda 	(codePtr),y 				; get/consume following character
.44fe	c8		iny				iny
.44ff	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; loop back if more dimensions
.4501	f0 e7		beq $44ea			beq 	_CAGetDimensions
.4503	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN 				; right bracket ?
.4505	d0 cd		bne $44d4			bne 	CASize
.4507	a9 ff		lda #$ff			lda 	#$FF 						; set the type past the end to $FF so we know how many
.4509	95 90		sta $90,x			sta 	esType,x 					; dimensions there are.
.450b	68		pla				pla 								; restore the variable type ($3A-$3F)
.450c	8d fd 0d	sta $0dfd			sta 	varType
.450f	8c fe 0d	sty $0dfe			sty 	varEnd 						; save exit Y value, after dimensions
.4512	60		rts				rts
.4513					CreateArrayLevel:
.4513	ac fd 0d	ldy $0dfd			ldy 	varType
.4516	b9 3d 45	lda $453d,y			lda 	CAActualSize-$3A,y
.4519	8d fb 0d	sta $0dfb			sta 	elementSize 				; get element size this level.
.451c	b4 91		ldy $91,x			ldy 	esType+1,x 					; is it top level
.451e	30 05		bmi $4525			bmi 	_CANotPointer
.4520	a9 02		lda #$02			lda 	#2 							; array of pointers is 2.
.4522	8d fb 0d	sta $0dfb			sta 	elementSize
.4525					_CANotPointer:
.4525	a5 35		lda $35				lda 	lowMemory 					; start creating at temp0, saving start on stack.
.4527	85 2a		sta $2a				sta 	temp0
.4529	48		pha				pha
.452a	a5 36		lda $36				lda 	lowMemory+1
.452c	85 2b		sta $2b				sta 	temp0+1
.452e	48		pha				pha
.452f	20 b0 45	jsr $45b0			jsr 	AllocateArraySpace 			; allocate space for all array stuff at this level.
.4532	a0 00		ldy #$00			ldy 	#0
.4534	b5 98		lda $98,x			lda 	esInt0,x
.4536	91 2a		sta ($2a),y			sta 	(temp0),y
.4538	c8		iny				iny
.4539	b5 a0		lda $a0,x			lda 	esInt1,x
.453b	91 2a		sta ($2a),y			sta 	(temp0),y
.453d	b5 91		lda $91,x			lda 	esType+1,x 					; do we have another level ?
.453f	30 06		bmi $4547			bmi 	_CALNotLast
.4541	b1 2a		lda ($2a),y			lda 	(temp0),y 					; set bit 7, indicates an array of pointers to other levels.
.4543	09 80		ora #$80			ora 	#$80
.4545	91 2a		sta ($2a),y			sta 	(temp0),y
.4547					_CALNotLast:
.4547	a9 02		lda #$02			lda 	#2
.4549	20 6d 45	jsr $456d			jsr 	_CALAddTemp0
.454c	b5 98		lda $98,x			lda 	esInt0,x 					; copy stack:01 to stack:23 so we can use it to
.454e	95 a8		sta $a8,x			sta 	esInt2,x 					; count.
.4550	b5 a0		lda $a0,x			lda 	esInt1,x
.4552	95 b0		sta $b0,x			sta 	esInt3,x
.4554					_CALClear:
.4554	20 7d 45	jsr $457d			jsr 	EraseOneElement
.4557	ad fb 0d	lda $0dfb			lda 	elementSize 				; move to next element
.455a	20 6d 45	jsr $456d			jsr 	_CALAddTemp0
.455d	b5 a8		lda $a8,x			lda 	esInt2,x 					; decrement counter
.455f	d0 02		bne $4563			bne 	_CALNoBorrow
.4561	d6 b0		dec $b0,x			dec 	esInt3,x
.4563					_CALNoBorrow:
.4563	d6 a8		dec $a8,x			dec 	esInt2,x
.4565	b5 b0		lda $b0,x			lda 	esInt3,x 					; loop back if >= 0 - we need +1 because indices
.4567	10 eb		bpl $4554			bpl 	_CALClear 					; start at 0 e.g. x(10) is actually 11 array entries.
.4569	68		pla				pla 								; restore the start of this into YA.
.456a	a8		tay				tay
.456b	68		pla				pla
.456c	60		rts				rts
.456d					_CALAddTemp0:
.456d	18		clc				clc
.456e	65 2a		adc $2a				adc 	temp0
.4570	85 2a		sta $2a				sta 	temp0
.4572	90 02		bcc $4576			bcc 	_CALANoCarry
.4574	e6 2b		inc $2b				inc 	temp0+1
.4576					_CALANoCarry:
.4576	60		rts				rts
.4577					CAActualSize:
>4577	04 04						.byte 	VarISize,VarISize
>4579	02 02						.byte 	VarSSize,VarSSize
>457b	06 06						.byte 	VarFSize,VarFSize
.457d					EraseOneElement:
.457d	b5 91		lda $91,x			lda 	esType+1,x 					; is this a list of sub arrays
.457f	10 09		bpl $458a			bpl 	_EOESubArray
.4581	a0 00		ldy #$00			ldy 	#0 							; write the empty variable value out.
.4583	ad fd 0d	lda $0dfd			lda 	varType
.4586	20 1d 47	jsr $471d			jsr 	ZeroTemp0Y
.4589	60		rts				rts
.458a					_EOESubArray:
.458a	a5 2a		lda $2a				lda 	temp0 						; save temp0, these are effectively locals.
.458c	48		pha				pha
.458d	a5 2b		lda $2b				lda 	temp0+1
.458f	48		pha				pha
.4590	ad fb 0d	lda $0dfb			lda 	elementSize 				; save element size
.4593	48		pha				pha
.4594	e8		inx				inx 								; create at next level
.4595	20 13 45	jsr $4513			jsr 	CreateArrayLevel
.4598	ca		dex				dex
.4599	85 32		sta $32				sta 	tempShort 					; save A
.459b	68		pla				pla  								; restore element size.
.459c	8d fb 0d	sta $0dfb			sta 	elementSize
.459f	68		pla				pla 								; restore temp0, which is where this new array level goes.
.45a0	85 2b		sta $2b				sta 	temp0+1
.45a2	68		pla				pla
.45a3	85 2a		sta $2a				sta 	temp0
.45a5	98		tya				tya 								; store Y/A there
.45a6	a0 01		ldy #$01			ldy 	#1
.45a8	91 2a		sta ($2a),y			sta 	(temp0),y
.45aa	a5 32		lda $32				lda 	tempShort
.45ac	88		dey				dey
.45ad	91 2a		sta ($2a),y			sta 	(temp0),y
.45af	60		rts				rts
.45b0					AllocateArraySpace:
.45b0	18		clc				clc 								; element count + 1 => temp2.
.45b1	b5 98		lda $98,x			lda 	esInt0,x
.45b3	69 01		adc #$01			adc 	#1
.45b5	85 2e		sta $2e				sta 	temp2
.45b7	b5 a0		lda $a0,x			lda 	esInt1,x
.45b9	69 00		adc #$00			adc 	#0
.45bb	85 2f		sta $2f				sta 	temp2+1
.45bd	ad fb 0d	lda $0dfb			lda 	elementSize 				; bytes per element
.45c0	20 e7 45	jsr $45e7			jsr 	MultiplyTemp2ByA 			; temp2 = (count + 1) x bytes per element.
.45c3	18		clc				clc 								; add 2 for 'max element' byte.
.45c4	a5 2e		lda $2e				lda 	temp2
.45c6	69 02		adc #$02			adc 	#2
.45c8	85 2e		sta $2e				sta 	temp2
.45ca	90 02		bcc $45ce			bcc 	_AASNoCarry
.45cc	e6 2f		inc $2f				inc 	temp2+1
.45ce					_AASNoCarry:
.45ce	18		clc				clc 								; add to low memory, allocating space.
.45cf	a5 35		lda $35				lda 	lowMemory
.45d1	65 2e		adc $2e				adc 	temp2
.45d3	85 35		sta $35				sta 	lowMemory
.45d5	a5 36		lda $36				lda 	lowMemory+1
.45d7	65 2f		adc $2f				adc 	temp2+1
.45d9	85 36		sta $36				sta 	lowMemory+1
.45db	b0 05		bcs $45e2			bcs 	_AASFail 					; out of memory as adding causes wrapround
.45dd	c5 34		cmp $34				cmp 	highMemory+1 				; >= high memory pointer.
.45df	b0 01		bcs $45e2			bcs 	_AASFail
.45e1	60		rts				rts
.45e2					_AASFail:
.45e2	a2 22		ldx #$22			ldx 	#ErrorID_Memory
.45e4	20 18 15	jsr $1518		jsr	errorHandler
.45e7					MultiplyTemp2ByA:
.45e7	48		pha				pha
.45e8	a5 2e		lda $2e				lda 	temp2 						; copy temp2 to temp3.
.45ea	85 30		sta $30				sta 	temp3
.45ec	a5 2f		lda $2f				lda 	temp2+1
.45ee	85 31		sta $31				sta 	temp3+1
.45f0	68		pla				pla
.45f1	06 2e		asl $2e				asl 	temp2 						; double it.
.45f3	26 2f		rol $2f				rol 	temp2+1
.45f5	c9 02		cmp #$02			cmp 	#2 							; if x 2 then exit.
.45f7	f0 15		beq $460e			beq 	_MTBAExit
.45f9	c9 06		cmp #$06			cmp 	#6 							; if x 6 then add temp3 to temp2
.45fb	d0 0d		bne $460a			bne 	_MTBANotFloat
.45fd	18		clc				clc 								; so this will make it x 3
.45fe	a5 2e		lda $2e				lda 	temp2
.4600	65 30		adc $30				adc 	temp3
.4602	85 2e		sta $2e				sta 	temp2
.4604	a5 2f		lda $2f				lda 	temp2+1
.4606	65 31		adc $31				adc 	temp3+1
.4608	85 2f		sta $2f				sta 	temp2+1
.460a					_MTBANotFloat:
.460a	06 2e		asl $2e				asl 	temp2 						; double it.
.460c	26 2f		rol $2f				rol 	temp2+1
.460e					_MTBAExit:
.460e	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/variable/access.asm

.0dfc					varHash:
>0dfc							.fill	1
.0dfd					varType:
>0dfd							.fill 	1
.0dfe					varEnd:
>0dfe							.fill 	1
.003b					hashList:
>003b							.fill 	2
.460f					AccessVariable:
.460f	aa		tax				tax 								; stack in X
.4610	c8		iny				iny									; look at second character
.4611	b1 28		lda ($28),y			lda 	(codePtr),y
.4613	88		dey				dey
.4614	c9 3a		cmp #$3a			cmp 	#TYPE_INT 					; is it the integer marker ($3A)
.4616	d0 15		bne $462d			bne 	_AVLong 					; no, always use the hash tables.
.4618	b1 28		lda ($28),y			lda 	(codePtr),y 				; this is the 6 bit ASCII of A-Z 1-26
.461a	38		sec				sec 	 							; make it 0-25
.461b	e9 01		sbc #$01			sbc 	#1
.461d	0a		asl a				asl 	a 							; x 4 as 4 bytes / variable.
.461e	0a		asl a				asl 	a
.461f	95 98		sta $98,x			sta 	esInt0,x
.4621	a9 0a		lda #$0a			lda 	#SingleLetterVar >> 8 		; make it an address
.4623	95 a0		sta $a0,x			sta 	esInt1,x
.4625	a9 80		lda #$80			lda 	#$80 						; type is an integer reference.
.4627	95 90		sta $90,x			sta 	esType,x
.4629	c8		iny				iny 								; skip over the variable reference in the code.
.462a	c8		iny				iny  								; (1 letter, 1 type)
.462b	8a		txa				txa 								; stack in A to return.
.462c	60		rts				rts
.462d					_AVLong:
.462d	8a		txa				txa
.462e	48		pha				pha
.462f	20 76 46	jsr $4676			jsr 	AccessSetup 				; set up the basic information we need for later
.4632	20 7f 47	jsr $477f			jsr 	FindVariable 				; does the variable exist already ?
.4635	b0 0e		bcs $4645			bcs 	_AVFound 					; yes, then its found
.4637	ad fd 0d	lda $0dfd			lda 	varType 					; otherwise, is the variable type an array
.463a	4a		lsr a				lsr 	a
.463b	90 05		bcc $4642			bcc 	_AVCanCreate 				; if not, we can autocreate
.463d	a2 15		ldx #$15			ldx 	#ErrorID_noauto
.463f	20 18 15	jsr $1518		jsr	errorHandler
.4642					_AVCanCreate:
.4642	20 b3 46	jsr $46b3			jsr 	CreateVariable 				; variable does not exist, create it.
.4645					_AVFound:
.4645	68		pla				pla
.4646	aa		tax				tax
.4647	18		clc				clc 								; copy temp0 (variable record address)
.4648	a5 2a		lda $2a				lda 	temp0 						; +5 (to point to the data)
.464a	69 05		adc #$05			adc 	#5 							; (first 5 bytes are link, name, hash)
.464c	95 98		sta $98,x			sta 	esInt0,x
.464e	a5 2b		lda $2b				lda 	temp0+1
.4650	69 00		adc #$00			adc 	#0
.4652	95 a0		sta $a0,x			sta 	esInt1,x
.4654	a9 00		lda #$00			lda 	#0
.4656	95 a8		sta $a8,x			sta 	esInt2,x
.4658	95 b0		sta $b0,x			sta 	esInt3,x
.465a	ac fd 0d	ldy $0dfd			ldy 	varType 					; get the type ID from the type.
.465d	b9 36 46	lda $4636,y			lda 	_AVTypeTable-$3A,y 			; e.g. a reference to int/float/string.
.4660	95 90		sta $90,x			sta 	esType,x
.4662	ac fe 0d	ldy $0dfe			ldy 	varEnd 						; restore Y
.4665	ad fd 0d	lda $0dfd			lda 	VarType 					; get variable type, put LSB into C
.4668	4a		lsr a				lsr 	a
.4669	90 03		bcc $466e			bcc 	_AVNotArray 				; if carry set,it is an array variable.
.466b	20 17 44	jsr $4417			jsr 	AccessArray 				; array lookup. if LSB was set.
.466e					_AVNotArray:
.466e	8a		txa				txa 								; return stack in A and return
.466f	60		rts				rts
.4670					_AVTypeTable:
>4670	80 80						.byte 	$80,$80						; integer
>4672	c0 c0						.byte 	$C0,$C0 					; string
>4674	81 81						.byte 	$81,$81 					; float
.4676					AccessSetup:
.4676	a9 00		lda #$00			lda 	#0 							; zero the hash byte.
.4678	8d fc 0d	sta $0dfc			sta 	varHash
.467b	98		tya				tya
.467c	48		pha				pha
.467d	b1 28		lda ($28),y	_ASLoop:lda 	(codePtr),y					; get next identifier character
.467f	c9 3a		cmp #$3a			cmp 	#$3A 						; is it 3A-3F which end all identifiers ?
.4681	b0 0b		bcs $468e			bcs 	_ASComplete
.4683	18		clc				clc 								; add to the hash. Might improve this.
.4684	6d fc 0d	adc $0dfc			adc 	varHash
.4687	8d fc 0d	sta $0dfc			sta 	varHash
.468a	c8		iny				iny 								; next character
.468b	4c 7d 46	jmp $467d			jmp 	_ASLoop
.468e					_ASComplete:
.468e	8d fd 0d	sta $0dfd			sta 	varType 					; save variable type byte
.4691	c8		iny				iny
.4692	8c fe 0d	sty $0dfe			sty 	varEnd 						; save the ending position.
.4695	38		sec				sec 								; convert type byte from $3A-$3F to 0..5
.4696	e9 3a		sbc #$3a			sbc 	#$3A
.4698	0a		asl a				asl 	a 							; multiply by hashTableSize (8 in this case)
.4699	0a		asl a				asl 	a
.469a	0a		asl a				asl 	a
.469b	0a		asl a				asl 	a 							; 2 bytes/word
.469c	85 2a		sta $2a				sta 	temp0 						; this is the offset to the start of the table.
.469e	ad fc 0d	lda $0dfc			lda 	varHash 					; get hash
.46a1	29 07		and #$07			and 	#(hashTableSize-1)			; force into range (for 8,0..7)
.46a3	0a		asl a				asl  	a 							; x 2 (for word) and clear carry
.46a4	65 2a		adc $2a				adc 	temp0 						; now offset from the start of the hash table.
.46a6	69 68		adc #$68			adc 	#hashTables & $FF 			; add to hash table base address
.46a8	85 3b		sta $3b				sta 	hashList 					; making hashLists point to the head of the link list.
.46aa	a9 0a		lda #$0a			lda 	#hashTables >> 8
.46ac	69 00		adc #$00			adc 	#0
.46ae	85 3c		sta $3c				sta 	hashList+1
.46b0	68		pla				pla
.46b1	a8		tay				tay
.46b2	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/variable/create.asm

.46b3					CreateVariable:
.46b3	98		tya				tya 								; push Y on the stack twice.
.46b4	48		pha				pha									; position in code of the new variable.
.46b5	48		pha				pha
.46b6	ae fd 0d	ldx $0dfd			ldx 	varType 					; get var type 0-5 from the var type
.46b9	bd dd 46	lda $46dd,x			lda		_CVSize-$3A,x 				; the bytes required for this new variable.
.46bc	48		pha				pha 								; save length
.46bd	a5 35		lda $35				lda 	lowMemory 					; set low Memory ptr to temp0
.46bf	85 2a		sta $2a				sta 	temp0 						; (address of the new variable)
.46c1	a5 36		lda $36				lda 	lowMemory+1
.46c3	85 2b		sta $2b				sta 	temp0+1
.46c5	68		pla				pla 								; get length
.46c6	18		clc				clc 								; add to low memory.
.46c7	65 35		adc $35				adc 	lowMemory
.46c9	85 35		sta $35				sta 	lowMemory
.46cb	90 08		bcc $46d5			bcc 	_CVNoCarry
.46cd	e6 36		inc $36				inc 	lowMemory+1
.46cf	a5 36		lda $36				lda 	lowMemory+1 				; check out of memory.
.46d1	c5 34		cmp $34				cmp 	highMemory+1
.46d3	b0 3d		bcs $4712			bcs 	_CVMemory
.46d5					_CVNoCarry:
.46d5	ad fc 0d	lda $0dfc			lda 	varHash 					; store hash at offset 4.
.46d8	a0 04		ldy #$04			ldy 	#4
.46da	91 2a		sta ($2a),y			sta 	(temp0),y
.46dc	68		pla				pla 								; offset, work out where the variable name is.
.46dd	18		clc				clc
.46de	65 28		adc $28				adc 	codePtr
.46e0	a0 02		ldy #$02			ldy 	#2 							; copy that into slots 2 + 3.
.46e2	91 2a		sta ($2a),y			sta 	(temp0),y
.46e4	a5 29		lda $29				lda 	codePtr+1
.46e6	69 00		adc #$00			adc 	#0
.46e8	c8		iny				iny
.46e9	91 2a		sta ($2a),y			sta 	(temp0),y
.46eb	cd c9 0a	cmp $0ac9			cmp 	basePage+1 					; compare against the program base.
.46ee	b0 03		bcs $46f3			bcs 	_CVNotImmediate
.46f0	20 55 47	jsr $4755			jsr 	CloneVariableName 			; we need to clone the variable name (immediate mode)
.46f3					_CVNotImmediate:
.46f3	a0 00		ldy #$00			ldy 	#0 							; copy current hash pointer in link
.46f5	b1 3b		lda ($3b),y			lda 	(hashList),y 				; so we're inserting it in the front of a linked list
.46f7	91 2a		sta ($2a),y			sta 	(temp0),y
.46f9	c8		iny				iny
.46fa	b1 3b		lda ($3b),y			lda 	(hashList),y
.46fc	91 2a		sta ($2a),y			sta 	(temp0),y
.46fe	a5 2b		lda $2b				lda 	temp0+1 					; set new link
.4700	91 3b		sta ($3b),y			sta 	(hashList),y
.4702	88		dey				dey
.4703	a5 2a		lda $2a				lda 	temp0
.4705	91 3b		sta ($3b),y			sta 	(hashList),y
.4707	ad fd 0d	lda $0dfd			lda 	varType 					; type in A
.470a	a0 05		ldy #$05			ldy 	#5 							; offset in Y
.470c	20 1d 47	jsr $471d			jsr 	ZeroTemp0Y 					; zero (temp0),y with whatever type.
.470f	68		pla				pla
.4710	a8		tay				tay
.4711	60		rts				rts
.4712					_CVMemory:
.4712	a2 22		ldx #$22			ldx 	#ErrorID_Memory
.4714	20 18 15	jsr $1518		jsr	errorHandler
>4717	09 07				_CVSize:.byte 	VarHSize+VarISize,VarHSize+VarASize 					; <storage for integer>
>4719	07 07						.byte 	VarHSize+VarSSize,VarHSize+VarASize 					; <storage for string>
>471b	0b 07						.byte 	VarHSize+VarFSize,VarHSize+VarASize 					; <storage for float>
.471d					ZeroTemp0Y:
.471d	4a		lsr a				lsr 	a 							; bit 0 in carry
.471e	0a		asl a				asl 	a
.471f	b0 19		bcs $473a			bcs 	_ZTExit 					; we don't initialise arrays.
.4721	c9 3c		cmp #$3c			cmp 	#$3C 						; check string
.4723	f0 16		beq $473b			beq 	_ZTWriteNullString 			; write "" string
.4725	c9 3e		cmp #$3e			cmp 	#$3E 						; check float
.4727	f0 22		beq $474b			beq 	_ZTWriteFloat
.4729	98		tya				tya
.472a	48		pha				pha
.472b	a9 00		lda #$00			lda 	#0
.472d	91 2a		sta ($2a),y			sta 	(temp0),y
.472f	c8		iny				iny
.4730	91 2a		sta ($2a),y			sta 	(temp0),y
.4732	c8		iny				iny
.4733	91 2a		sta ($2a),y			sta 	(temp0),y
.4735	c8		iny				iny
.4736	91 2a		sta ($2a),y			sta 	(temp0),y
.4738	68		pla				pla
.4739	a8		tay				tay
.473a					_ZTExit:
.473a	60		rts				rts
.473b					_ZTWriteNullString:
.473b	a9 00		lda #$00			lda 	#0 							; put a reference to null string as the default value.
.473d	8d ce 0a	sta $0ace			sta 	NullString
.4740	a9 ce		lda #$ce			lda 	#NullString & $FF
.4742	91 2a		sta ($2a),y			sta 	(temp0),y
.4744	a9 0a		lda #$0a			lda 	#NullString >> 8
.4746	c8		iny				iny
.4747	91 2a		sta ($2a),y			sta 	(temp0),y
.4749	88		dey				dey
.474a	60		rts				rts
.474b					_ZTWriteFloat:
.474b	8a		txa				txa
.474c	48		pha				pha
.474d	a2 20		ldx #$20		ldx	#32
.474f	20 65 20	jsr $2065		jsr	floatingpointHandler
.4752	68		pla				pla
.4753	aa		tax				tax
.4754	60		rts				rts
.4755					CloneVariableName:
.4755	a0 02		ldy #$02			ldy 	#2 							; copy vname address to temp2
.4757	b1 2a		lda ($2a),y			lda 	(temp0),y
.4759	85 2e		sta $2e				sta 	temp2
.475b	c8		iny				iny
.475c	b1 2a		lda ($2a),y			lda 	(temp0),y
.475e	85 2f		sta $2f				sta 	temp2+1
.4760	a5 36		lda $36				lda 	lowMemory+1 				; copy lowMemory address to (temp0),2/3
.4762	91 2a		sta ($2a),y			sta 	(temp0),y
.4764	88		dey				dey
.4765	a5 35		lda $35				lda 	lowMemory
.4767	91 2a		sta ($2a),y			sta 	(temp0),y
.4769	a0 00		ldy #$00			ldy 	#0 							; copy data from (temp2) to (lowMemory)
.476b					_CVNCopy:
.476b	b1 2e		lda ($2e),y			lda		(temp2),y
.476d	91 35		sta ($35),y			sta 	(lowMemory),y
.476f	c8		iny				iny
.4770	c9 3a		cmp #$3a			cmp 	#$3A 						; until the whole name has been copied.
.4772	90 f7		bcc $476b			bcc 	_CVNCopy
.4774	98		tya				tya 								; add Y to low memory
.4775	18		clc				clc
.4776	65 35		adc $35				adc 	lowMemory
.4778	85 35		sta $35				sta 	lowMemory
.477a	90 02		bcc $477e			bcc 	_CVNNoCarry
.477c	e6 36		inc $36				inc 	lowMemory+1
.477e					_CVNNoCarry:
.477e	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/variable/find.asm

.477f					FindVariable:
.477f	98		tya				tya
.4780	48		pha				pha
.4781	98		tya				tya 								; point temp2 to the actual name
.4782	18		clc				clc 								; in memory of the variable being created
.4783	65 28		adc $28				adc 	codePtr
.4785	85 2e		sta $2e				sta 	temp2
.4787	a5 29		lda $29				lda 	codePtr+1
.4789	69 00		adc #$00			adc 	#0
.478b	85 2f		sta $2f				sta 	temp2+1
.478d	a0 00		ldy #$00			ldy 	#0
.478f	a5 3b		lda $3b				lda 	hashList 					; copy hashlist to temp0
.4791	85 2a		sta $2a				sta 	temp0
.4793	a5 3c		lda $3c				lda 	hashList+1
.4795	85 2b		sta $2b				sta 	temp0+1
.4797	a0 01		ldy #$01	_FVNext:ldy 	#1 							; get MSB
.4799	b1 2a		lda ($2a),y			lda 	(temp0),y
.479b	f0 2c		beq $47c9			beq 	_FVFail
.479d	aa		tax				tax
.479e	88		dey				dey		 							; get LSB
.479f	b1 2a		lda ($2a),y			lda 	(temp0),y
.47a1	85 2a		sta $2a				sta 	temp0 						; update pointer.
.47a3	86 2b		stx $2b				stx 	temp0+1
.47a5	a0 04		ldy #$04			ldy 	#4 							; check hashes match
.47a7	b1 2a		lda ($2a),y			lda 	(temp0),y
.47a9	cd fc 0d	cmp $0dfc			cmp 	varHash
.47ac	d0 e9		bne $4797			bne 	_FVNext 					; if not, no point in checking the name.
.47ae	88		dey				dey 								; copy name pointer (+2,+3) to temp1.
.47af	b1 2a		lda ($2a),y			lda 	(temp0),y
.47b1	85 2d		sta $2d				sta 	temp1+1
.47b3	88		dey				dey
.47b4	b1 2a		lda ($2a),y			lda 	(temp0),y
.47b6	85 2c		sta $2c				sta 	temp1
.47b8	a0 00		ldy #$00			ldy 	#0
.47ba					_FVCheck:
.47ba	b1 2c		lda ($2c),y			lda 	(temp1),y 					; compare names
.47bc	d1 2e		cmp ($2e),y			cmp 	(temp2),y
.47be	d0 d7		bne $4797			bne 	_FVNext		 				; fail if different.
.47c0	c8		iny				iny
.47c1	c9 3a		cmp #$3a			cmp 	#$3A 						; until reached the end marker.
.47c3	90 f5		bcc $47ba			bcc 	_FVCheck
.47c5	68		pla				pla
.47c6	a8		tay				tay
.47c7	38		sec				sec
.47c8	60		rts				rts
.47c9					_FVFail:
.47c9	68		pla				pla
.47ca	a8		tay				tay
.47cb	18		clc				clc
.47cc	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/variable/reset.asm

.47cd					HashTableReset:
.47cd	a2 60		ldx #$60			ldx 	#6*2*hashTableSize			; 6 types, 2 bytes per table entry.
.47cf	a9 00		lda #$00			lda 	#0
.47d1					_HTRClear:
.47d1	9d 67 0a	sta $0a67,x			sta 	hashTables-1,x
.47d4	ca		dex				dex
.47d5	d0 fa		bne $47d1			bne 	_HTRClear
.47d7	60		rts				rts

;******  Return to file: variable/variable.asm

.47d8					variableHandler:
.47d8	7c db 47	jmp ($47db,x)			jmp 	(variableVectors,x)
.47db					variableVectors:
>47db	e3 47					.word _DummyControlHandler ; index 0
>47dd	0f 46					.word AccessVariable       ; index 2
>47df	9f 44					.word CreateArray          ; index 4
>47e1	cd 47					.word HashTableReset       ; index 6
.47e3					_DummyControlHandler:
.47e3	60		rts			rts

;******  Return to file: basic.asm

.47e4					section_end_variable:
.47e4					section_start_footer:

;******  Processing file: footer/footer.asm


;******  Processing file: footer/99end.asm

.003d					endZeroPage:
.0dff					endStorage:
>47e4							.align 	256
.4800					programMemory:
>47ff	ff						.byte 	$FF

;******  Return to file: footer/footer.asm


;******  Return to file: basic.asm

.4800					section_end_footer:

;******  End of listing
