
; 64tass Turbo Assembler Macro V1.55.2200 listing file
; 64tass -D autorun=1 -D coldstartnew=0 -Walias -Wmacro-prefix -Wall -q -c -L ../source/bin/basic.lst -l ../source/bin/basic.lbl -Wall -o ../source/bin/stub.prg basic.asm
; Fri Mar 12 07:07:38 2021

;Offset	;Hex		;Monitor	;Source

;******  Command line definitions

=1					autorun=1
=0					coldstartnew=0

;******  Processing input file: basic.asm


;******  Processing file: header/01common.inc


;******  Processing file: header/../generated/installed.inc

=1					installed_header = 1
=1					installed_main = 1
=1					installed_variable = 1
=1					installed_assembler = 1
=1					installed_error = 1
=1					installed_extension = 1
=1					installed_string = 1
=1					installed_device = 1
=0					installed_floatingpoint = 0
=1					installed_interaction = 1
=1					installed_tokeniser = 1
=1					installed_footer = 1

;******  Return to file: header/01common.inc

=$1000					CodeStart = $1000
=$800					MemoryStorage = $800
=$9f00					EndOfMemory = $9F00
=$28					ZeroPageStorage = $28
=8					StackSize = 8
=512					retStackSize = 512
=8					hashTableSize = 8			; if this changes, the calculation is AccessSetup has to match it.
="G"					markerGOSUB = 'G'
="R"					markerREPEAT = 'R'
="F"					markerFOR = 'F'
="W"					markerWHILE = 'W'
="P"					markerPROC = 'P'
="$"					markerSTRING = '$'
="#"					markerFLOAT = '#'
="%"					markerINT = '%'
=5					VarHSize = 5 								; header (2 link, 2 name, 1 hash)
=5					VarASize = 5 								; array [address,size,byteSize]
=4					VarISize = 4 								; integer (32 bit)
=6					VarFSize = 6 								; float (4 mantissa, 1 exponent 1 sign/zero)
=2					VarSSize = 2 								; address (2 bytes)

;******  Return to file: basic.asm


;******  Processing file: header/02macros.inc


;******  Return to file: basic.asm


;******  Processing file: header/03data.inc

>0028					codePtr:.fill 	2							; (codePtr),y points to code.
>002a					temp0: 	.fill 	2							; working variables.
>002c					temp1: 	.fill 	2
>002e					temp2: 	.fill 	2
>0030					temp3: 	.fill 	2
.0032					tempshort:
>0032							.fill 	1
.0033					highMemory:
>0033							.fill 	2
.0035					lowMemory:
>0035							.fill 	2
>0040					esType:	.fill 	StackSize  					; type byte (see above)
>0048					esInt0:	.fill 	StackSize 					; integer or mantissa
>0050					esInt1:	.fill 	StackSize
>0058					esInt2:	.fill 	StackSize
>0060					esInt3:	.fill 	StackSize
>0068					esExp:	.fill 	StackSize 					; exponent ($80 = 0)
>0070					esZSign:.fill 	StackSize 					; for floating point - sign (bit 7) isZero (bit 6)
=$48					esMant0 = esInt0 							; synonyms.
=$50					esMant1 = esInt1
=$58					esMant2 = esInt2
=$60					esMant3 = esInt3
>0800							.align	256
.0800					returnStack:
>0800							.fill 	retStackSize
>0a00							.align	256
.0a00					SingleLetterVar:
>0a00					 		.fill 	26*4
.0a68					hashTables:
>0a68							.fill 	6*2*hashTableSize
.0ac8					basePage:
>0ac8							.fill 	2
.0aca					endProgram:
>0aca							.fill 	2
.0acc					endMemory:
>0acc							.fill 	2
.0ace					NullString:
>0ace							.fill 	1							; don't waste memory concreting null strings.
.0acf					convertBuffer:
>0acf							.fill 	35

;******  Processing file: header/../generated/tokenconst.inc

=$80					TOK_EOL=$80
=$81					TOK_SHIFT1=$81
=$82					TOK_SHIFT2=$82
=$83					TOK_SHIFT3=$83
=$84					TOK_FPC=$84
=$85					TOK_STR=$85
=$86					TOK_BINARYST=$86
=$99					TOK_STRUCTST=$99
=$a4					TOK_UNARYST=$a4
=$c6					TOK_TOKENS=$c6
=$86					TKW_AND                      = $86 ; and
=$87					TKW_OR                       = $87 ; or
=$88					TKW_XOR                      = $88 ; xor
=$89					TKW_GREATEREQUAL             = $89 ; >=
=$8a					TKW_LESSEQUAL                = $8a ; <=
=$8b					TKW_GREATER                  = $8b ; >
=$8c					TKW_LESS                     = $8c ; <
=$8d					TKW_EQUAL                    = $8d ; =
=$8e					TKW_LESSGREATER              = $8e ; <>
=$8f					TKW_PLUS                     = $8f ; +
=$90					TKW_MINUS                    = $90 ; -
=$91					TKW_GREATERGREATER           = $91 ; >>
=$92					TKW_LESSLESS                 = $92 ; <<
=$93					TKW_STAR                     = $93 ; *
=$94					TKW_SLASH                    = $94 ; /
=$95					TKW_MOD                      = $95 ; mod
=$96					TKW_HAT                      = $96 ; ^
=$97					TKW_PLING                    = $97 ; !
=$98					TKW_QMARK                    = $98 ; ?
=$99					TKW_REPEAT                   = $99 ; repeat
=$9a					TKW_WHILE                    = $9a ; while
=$9b					TKW_FOR                      = $9b ; for
=$9c					TKW_IF                       = $9c ; if
=$9d					TKW_DEFPROC                  = $9d ; defproc
=$9e					TKW_UNTIL                    = $9e ; until
=$9f					TKW_WEND                     = $9f ; wend
=$a0					TKW_NEXT                     = $a0 ; next
=$a1					TKW_THEN                     = $a1 ; then
=$a2					TKW_ENDIF                    = $a2 ; endif
=$a3					TKW_ENDPROC                  = $a3 ; endproc
=$a4					TKW_LPAREN                   = $a4 ; (
=$a5					TKW_LENLPAREN                = $a5 ; len(
=$a6					TKW_SGNLPAREN                = $a6 ; sgn(
=$a7					TKW_ABSLPAREN                = $a7 ; abs(
=$a8					TKW_RANDOMLPAREN             = $a8 ; random(
=$a9					TKW_PAGE                     = $a9 ; page
=$aa					TKW_TRUE                     = $aa ; true
=$ab					TKW_FALSE                    = $ab ; false
=$ac					TKW_MINLPAREN                = $ac ; min(
=$ad					TKW_MAXLPAREN                = $ad ; max(
=$ae					TKW_SYSLPAREN                = $ae ; sys(
=$af					TKW_TIMERLPAREN              = $af ; timer(
=$b0					TKW_EVENTLPAREN              = $b0 ; event(
=$b1					TKW_GETLPAREN                = $b1 ; get(
=$b2					TKW_INKEYLPAREN              = $b2 ; inkey(
=$b3					TKW_ALLOCLPAREN              = $b3 ; alloc(
=$b4					TKW_CHRDOLLARLPAREN          = $b4 ; chr$(
=$b5					TKW_LEFTDOLLARLPAREN         = $b5 ; left$(
=$b6					TKW_MIDDOLLARLPAREN          = $b6 ; mid$(
=$b7					TKW_RIGHTDOLLARLPAREN        = $b7 ; right$(
=$b8					TKW_STRDOLLARLPAREN          = $b8 ; str$(
=$b9					TKW_VALLPAREN                = $b9 ; val(
=$ba					TKW_PEEKLPAREN               = $ba ; peek(
=$bb					TKW_DEEKLPAREN               = $bb ; deek(
=$bc					TKW_LEEKLPAREN               = $bc ; leek(
=$bd					TKW_ASCLPAREN                = $bd ; asc(
=$be					TKW_INTLPAREN                = $be ; int(
=$bf					TKW_FLOATLPAREN              = $bf ; float(
=$c0					TKW_ISVALLPAREN              = $c0 ; isval(
=$c1					TKW_UPPERDOLLARLPAREN        = $c1 ; upper$(
=$c2					TKW_LOWERDOLLARLPAREN        = $c2 ; lower$(
=$c3					TKW_AT                       = $c3 ; @
=$c4					TKW_WAVY                     = $c4 ; ~
=$c5					TKW_AMP                      = $c5 ; &
=$c6					TKW_RPAREN                   = $c6 ; )
=$c7					TKW_COLON                    = $c7 ; :
=$c8					TKW_COMMA                    = $c8 ; ,
=$c9					TKW_SEMICOLON                = $c9 ; ;
=$ca					TKW_QUOTE                    = $ca ; '
=$cb					TKW_TO                       = $cb ; to
=$cc					TKW_STEP                     = $cc ; step
=$cd					TKW_PROC                     = $cd ; proc
=$ce					TKW_LOCAL                    = $ce ; local
=$cf					TKW_DIM                      = $cf ; dim
=$d0					TKW_REM                      = $d0 ; rem
=$d1					TKW_LET                      = $d1 ; let
=$d2					TKW_INPUT                    = $d2 ; input
=$d3					TKW_ELSE                     = $d3 ; else
=$d4					TKW_VDU                      = $d4 ; vdu
=$d5					TKW_PRINT                    = $d5 ; print
=$d6					TKW_GOTO                     = $d6 ; goto
=$d7					TKW_GOSUB                    = $d7 ; gosub
=$d8					TKW_RETURN                   = $d8 ; return
=$d9					TKW_DATA                     = $d9 ; data
=$da					TKW_ASSERT                   = $da ; assert
=$db					TKW_POKE                     = $db ; poke
=$dc					TKW_DOKE                     = $dc ; doke
=$dd					TKW_LOKE                     = $dd ; loke
=$de					TKW_INK                      = $de ; ink
=$df					TKW_PAPER                    = $df ; paper
=$e0					TKW_CLS                      = $e0 ; cls
=$e1					TKW_LOCATE                   = $e1 ; locate
=$e2					TKW_BREAK                    = $e2 ; break
=$86					TKW_CLEAR                    = $86 ; clear
=$87					TKW_LOAD                     = $87 ; load
=$88					TKW_SAVE                     = $88 ; save
=$89					TKW_LIST                     = $89 ; list
=$8a					TKW_NEW                      = $8a ; new
=$8b					TKW_RUN                      = $8b ; run
=$8c					TKW_READ                     = $8c ; read
=$8d					TKW_RESTORE                  = $8d ; restore
=$8e					TKW_END                      = $8e ; end
=$8f					TKW_STOP                     = $8f ; stop
=$90					TKW_XEMU                     = $90 ; xemu
=$86					TKW_VPOKE                    = $86 ; vpoke
=$87					TKW_VDOKE                    = $87 ; vdoke
=$86					TKW_VPEEKLPAREN              = $86 ; vpeek(
=$87					TKW_VDEEKLPAREN              = $87 ; vdeek(

;******  Return to file: header/03data.inc

=$3a					TYPE_INT =		($3A) 						; type bytes that end identifier.
=$3b					TYPE_INTARRAY =	($3B)
=$3c					TYPE_STR =		($3C)
=$3d					TYPE_STRARRAY =	($3D)
=$3e					TYPE_FLOAT =	($3E)
=$3f					TYPE_FLOATARRAY=($3F)

;******  Return to file: basic.asm


;******  Processing file: header/header.inc


;******  Return to file: basic.asm


;******  Processing file: assembler/assembler.inc


;******  Return to file: basic.asm


;******  Processing file: device/device.inc


;******  Return to file: basic.asm


;******  Processing file: error/error.inc


;******  Return to file: basic.asm


;******  Processing file: error/errorhandler.inc


;******  Processing file: error/../generated/errorid.inc

=1					ErrorID_Missing = 1 ; Feature not Present
=2					ErrorID_Syntax = 2 ; Syntax Error
=3					ErrorID_NoModule = 3 ; Module disabled
=4					ErrorID_Assert = 4 ; Assertion failed
=5					ErrorID_DivZero = 5 ; Divide By Zero
=6					ErrorID_Stop = 6 ; Stop
=7					ErrorID_BadType = 7 ; Type Mismatch
=8					ErrorID_BadValue = 8 ; Illegal Value
=9					ErrorID_MissingRP = 9 ; Missing right bracket
=10					ErrorID_MissingComma = 10 ; Missing comma
=11					ErrorID_NoReference = 11 ; Missing reference
=12					ErrorID_LineNumber = 12 ; Line Number not found
=13					ErrorID_StrLen = 13 ; String too long.
=14					ErrorID_ReturnErr = 14 ; RETURN without GOSUB
=15					ErrorID_UntilErr = 15 ; UNTIL without REPEAT
=16					ErrorID_NextErr = 16 ; NEXT without FOR
=17					ErrorID_WendErr = 17 ; WEND without WHILE
=18					ErrorID_endprocErr = 18 ; ENDPROC without PROC
=19					ErrorID_BadIndex = 19 ; Bad NEXT index
=20					ErrorID_Struct = 20 ; Structures nested wrong
=21					ErrorID_NoAuto = 21 ; Cannot create variable
=22					ErrorID_RetStack = 22 ; Return stack out of space.
=23					ErrorID_NoProc = 23 ; Unknown Procedure
=24					ErrorID_Params = 24 ; Parameters do not match.
=25					ErrorID_DupArray = 25 ; Array already defined
=26					ErrorID_NotArray = 26 ; DIM requires array
=27					ErrorID_ArrayIndex = 27 ; Bad array index.
=28					ErrorID_DataError = 28 ; Out of data
=29					ErrorID_Tokenise = 29 ; Cannot tokenise line.
=30					ErrorID_Save = 30 ; Save failed
=31					ErrorID_Load = 31 ; Load failed
=32					ErrorID_Break = 32 ; Break

;******  Return to file: error/errorhandler.inc


;******  Return to file: basic.asm


;******  Processing file: extension/extension.inc


;******  Return to file: basic.asm


;******  Processing file: floatingpoint/floatingpoint.inc


;******  Return to file: basic.asm


;******  Processing file: interaction/interaction.inc


;******  Return to file: basic.asm


;******  Processing file: main/main.inc


;******  Return to file: basic.asm


;******  Processing file: string/memory.inc

=252					MaxStringSize = 252

;******  Return to file: basic.asm


;******  Processing file: string/string.inc


;******  Return to file: basic.asm


;******  Processing file: tokeniser/detokenise/colouring.inc

=$84					LTYLineNumber = $84
=$82					LTYPunctuation = $82
=$87					LTYIdentifier = $87
=$86					LTYConstant = $86
=$83					LTYKeyword = $83
=$81					LTYString = $81

;******  Return to file: basic.asm


;******  Processing file: tokeniser/tokeniser.inc


;******  Return to file: basic.asm


;******  Processing file: variable/variable.inc


;******  Return to file: basic.asm


;******  Processing file: footer/footer.inc


;******  Return to file: basic.asm

.1000					section_start_header:

;******  Processing file: header/header.asm


;******  Processing file: header/00start.asm

.1000					Start:
.1000	4c 0a 10	jmp $100a			jmp 	GoColdStart 				; +0 	boot BASIC
.1003	4c 28 10	jmp $1028			jmp 	GoTokTest					; +3 	run tokeniser test code.
>1006	cb 33						.word 	TokenTableAddress
.1008							else
>1008	00 00						.word 	0
.100a					GoColdStart:
.100a	a9 00		lda #$00			lda 	#(programMemory) & $FF
.100c	8d c8 0a	sta $0ac8			sta 	basePage
.100f	a9 39		lda #$39			lda 	#(programMemory) >> 8
.1011	8d c9 0a	sta $0ac9			sta 	1+(basePage)
.1014	a9 00		lda #$00			lda 	#(endOfMemory) & $FF
.1016	8d cc 0a	sta $0acc			sta 	endMemory
.1019	a9 9f		lda #$9f			lda 	#(endOfMemory) >> 8
.101b	8d cd 0a	sta $0acd			sta 	1+(endMemory)
.101e	a2 06		ldx #$06		ldx	#6
.1020	20 64 11	jsr $1164		jsr	deviceHandler
.1023	a2 00		ldx #$00		ldx	#0
.1025	20 8d 16	jsr $168d		jsr	interactionHandler
.1028					GoTokTest:
.1028	a2 04		ldx #$04		ldx	#4
.102a	20 df 35	jsr $35df		jsr	tokeniserHandler

;******  Return to file: header/header.asm


;******  Return to file: basic.asm

.102d					section_end_header:
.102d					section_start_assembler:

;******  Processing file: assembler/assembler.asm

.102d					assemblerHandler:
.102d	7c 30 10	jmp ($1030,x)			jmp 	(assemblerVectors,x)
.1030					assemblerVectors:

;******  Return to file: basic.asm

.1030					section_end_assembler:
.1030					section_start_device:

;******  Processing file: device/device.asm


;******  Processing file: device/option_x16/x16break.asm

.1030					X16Break:
.1030	20 e1 ff	jsr $ffe1			jsr 	$FFE1
.1033	f0 01		beq $1036			beq 	_IsBreak
.1035	60		rts				rts
.1036					_IsBreak:
.1036	a2 20		ldx #$20			ldx 	#ErrorID_Break
.1038	20 83 11	jsr $1183		jsr	errorHandler

;******  Return to file: device/device.asm


;******  Processing file: device/option_x16/x16file.asm

.103b					ExternSave:
.103b	98		tya				tya
.103c	48		pha				pha
.103d	20 8b 10	jsr $108b			jsr 	ExternGetLength 			; get length of file into A name YX
.1040	20 bd ff	jsr $ffbd			jsr 	$FFBD 						; set name
.1043	a9 01		lda #$01			lda 	#1
.1045	a2 08		ldx #$08			ldx 	#8	 						; device #8
.1047	a0 00		ldy #$00			ldy 	#0
.1049	20 ba ff	jsr $ffba			jsr 	$FFBA 						; set LFS
.104c	a5 49		lda $49				lda 	esInt0+1 					; copy start of save address to temp0
.104e	85 2a		sta $2a				sta 	temp0
.1050	a5 51		lda $51				lda 	esInt1+1
.1052	85 2b		sta $2b				sta 	temp0+1
.1054	a6 4a		ldx $4a				ldx 	esInt0+2 					; end address
.1056	a4 52		ldy $52				ldy 	esInt1+2
.1058	a9 2a		lda #$2a			lda 	#temp0 						; ref to start address
.105a	20 d8 ff	jsr $ffd8			jsr 	$FFD8 						; save
.105d	b0 03		bcs $1062			bcs 	_ESSave
.105f	68		pla				pla
.1060	a8		tay				tay
.1061	60		rts				rts
.1062					_ESSave:
.1062	a2 1e		ldx #$1e			ldx 	#ErrorID_Save
.1064	20 83 11	jsr $1183		jsr	errorHandler
.1067					ExternLoad:
.1067	98		tya				tya
.1068	48		pha				pha
.1069	20 8b 10	jsr $108b			jsr 	ExternGetLength 			; get length of file into A name YX
.106c	20 bd ff	jsr $ffbd			jsr 	$FFBD 						; set name
.106f	a9 01		lda #$01			lda 	#1
.1071	a2 08		ldx #$08			ldx 	#8	 						; device #8
.1073	a0 00		ldy #$00			ldy 	#0
.1075	20 ba ff	jsr $ffba			jsr 	$FFBA 						; set LFS
.1078	a6 49		ldx $49				ldx 	esInt0+1 					; load address
.107a	a4 51		ldy $51				ldy 	esInt1+1
.107c	a9 00		lda #$00			lda 	#0 							; load command
.107e	20 d5 ff	jsr $ffd5			jsr 	$FFD5
.1081	b0 03		bcs $1086			bcs 	_ESLoad
.1083	68		pla				pla
.1084	a8		tay				tay
.1085	60		rts				rts
.1086					_ESLoad:
.1086	a2 1f		ldx #$1f			ldx 	#ErrorID_Load
.1088	20 83 11	jsr $1183		jsr	errorHandler
.108b					ExternGetLength:
.108b	a5 48		lda $48				lda 	esInt0 						; length into A.
.108d	85 2a		sta $2a				sta 	temp0
.108f	a5 50		lda $50				lda 	esInt1
.1091	85 2b		sta $2b				sta 	temp0+1
.1093	a0 00		ldy #$00			ldy 	#0
.1095	b1 2a		lda ($2a),y			lda 	(temp0),y
.1097	a6 48		ldx $48				ldx 	esInt0 						; name into YX
.1099	a4 50		ldy $50				ldy 	esInt1
.109b	e8		inx				inx 								; advance over the length pointer.
.109c	d0 01		bne $109f			bne 	_ESNoCarry
.109e	c8		iny				iny
.109f					_ESNoCarry:
.109f	60		rts				rts

;******  Return to file: device/device.asm


;******  Processing file: device/option_x16/x16io.asm

=240					MaxLineInputSize = 240
.0af2					bufferCount:
>0af2							.fill 	0
.0af2					bufferStorage:
>0af2							.fill 	MaxLineInputSize
.10a0					IOInitialise:
.10a0	a9 0f		lda #$0f			lda 	#15 						; switch to upper/lower case mode
.10a2	20 cb 10	jsr $10cb			jsr 	IOPrintChar
.10a5	a9 02		lda #$02			lda 	#2 							; green on black and clear screen
.10a7	20 f7 10	jsr $10f7			jsr 	IOInk
.10aa	a9 00		lda #$00			lda 	#0
.10ac	20 0b 11	jsr $110b			jsr 	IOPaper
.10af	20 b3 10	jsr $10b3			jsr 	IOClearScreen
.10b2	60		rts				rts
.10b3					IOClearScreen:
.10b3	48		pha				pha
.10b4	a9 93		lda #$93			lda	 	#147 						; char code $93 clears screen
.10b6	20 cb 10	jsr $10cb			jsr 	IOPrintChar
.10b9	68		pla				pla
.10ba	60		rts				rts
.10bb					IONewLine:
.10bb	48		pha				pha
.10bc	a9 0d		lda #$0d			lda 	#13
.10be	20 cb 10	jsr $10cb			jsr 	IOPrintChar
.10c1	68		pla				pla
.10c2	60		rts				rts
.10c3					IOTab:
.10c3	48		pha				pha
.10c4	a9 20		lda #$20			lda 	#32
.10c6	20 cb 10	jsr $10cb			jsr 	IOPrintChar
.10c9	68		pla				pla
.10ca	60		rts				rts
.10cb					IOPrintChar:
.10cb	aa		tax				tax 								; save in X so we can save Y
.10cc	5a		phy				phy
.10cd	8a		txa				txa
.10ce	c9 08		cmp #$08			cmp 	#8 							; make BS (8) onto CHR$(14) which is the
.10d0	d0 02		bne $10d4			bne 	_IOPCNotBS 					; Commodore/X16 backspace code.
.10d2	a9 14		lda #$14			lda 	#$14
.10d4					_IOPCNotBS:
.10d4	20 d2 ff	jsr $ffd2			jsr 	$FFD2 						; CBM OS Call.
.10d7	7a		ply				ply
.10d8	60		rts				rts
.10d9					IOInkey:
.10d9	98		tya				tya
.10da	48		pha				pha
.10db	20 e4 ff	jsr $ffe4			jsr 	$FFE4
.10de	85 32		sta $32				sta 	tempShort
.10e0	68		pla				pla
.10e1	a8		tay				tay
.10e2	a5 32		lda $32				lda 	tempShort					; no key pressed.
.10e4	f0 10		beq $10f6			beq 	_IOIExit
.10e6	c9 0d		cmp #$0d			cmp 	#13 						; allow CR (13)
.10e8	f0 0c		beq $10f6			beq 	_IOIExit
.10ea	c9 14		cmp #$14			cmp 	#$14 						; backspace code ($14) returns 8.
.10ec	f0 06		beq $10f4			beq 	_IOIBackspace
.10ee	c9 20		cmp #$20			cmp 	#32 						; no other control allowed.
.10f0	90 e7		bcc $10d9			bcc 	IOInkey
.10f2	b0 02		bcs $10f6			bcs 	_IOIExit
.10f4					_IOIBackspace:
.10f4	a9 08		lda #$08			lda 	#8 							; return chr(8)
.10f6					_IOIExit:
.10f6	60		rts				rts
.10f7					IOInk:
.10f7	48		pha				pha
.10f8	29 07		and #$07			and 	#7 							; 8 primaries
.10fa	aa		tax				tax
.10fb	bd 03 11	lda $1103,x			lda 	_IOColourTable,x 			; look up CBM code and print it.
.10fe	20 cb 10	jsr $10cb			jsr 	IOPrintChar
.1101	68		pla				pla
.1102	60		rts				rts
.1103					_IOColourTable:
>1103	90						.byte 	$90 					; 0 Black
>1104	96						.byte 	$96 					; 1 Red
>1105	1e						.byte 	$1E 					; 2 Green
>1106	9e						.byte 	$9E 					; 3 Yellow
>1107	9a						.byte 	$9A 					; 4 Blue
>1108	9c						.byte 	$9C 					; 5 Magenta
>1109	9f						.byte 	$9F 					; 6 Cyan
>110a	05						.byte 	$05 					; 7 White
.110b					IOPaper:
.110b	48		pha				pha
.110c	48		pha				pha
.110d	a9 01		lda #$01			lda 	#1 						; 1 swaps fgr/bgr, so we swap them, set fgr
.110f	20 cb 10	jsr $10cb			jsr 	IOPrintChar 			; and then swap them again.
.1112	68		pla				pla
.1113	20 f7 10	jsr $10f7			jsr 	IOInk
.1116	a9 01		lda #$01			lda 	#1
.1118	20 cb 10	jsr $10cb			jsr 	IOPrintChar
.111b	68		pla				pla
.111c	60		rts				rts
.111d					IOLocate:
.111d	48		pha				pha
.111e	a9 13		lda #$13			lda 	#$13 					; home cursor code
.1120	20 cb 10	jsr $10cb			jsr 	IOPrintChar
.1123	a9 11		lda #$11			lda 	#$11 	 				; print Y x $11 (down)
.1125	20 2c 11	jsr $112c			jsr 	_IOLoc2
.1128	68		pla				pla
.1129	a8		tay				tay
.112a	a9 1d		lda #$1d			lda 	#$1D 					; print Y x $1D (right)
.112c					_IOLoc2:
.112c	c0 00		cpy #$00			cpy 	#0
.112e	f0 06		beq $1136			beq 	_IOLocExit
.1130	20 cb 10	jsr $10cb			jsr 	IOPrintChar
.1133	88		dey				dey
.1134	d0 f6		bne $112c			bne 	_IOLoc2
.1136					_IOLocExit:
.1136	60		rts				rts
.1137					IOInput:
.1137	a9 00		lda #$00			lda 	#0
.1139	8d f2 0a	sta $0af2			sta 	bufferCount
.113c					_IOILoop:
.113c	20 cf ff	jsr $ffcf			jsr 	$FFCF
.113f	c9 0d		cmp #$0d			cmp 	#13
.1141	f0 10		beq $1153			beq 	_IOIExit
.1143	ae f2 0a	ldx $0af2			ldx 	bufferCount
.1146	e0 f0		cpx #$f0			cpx 	#MaxLineInputSize
.1148	f0 f2		beq $113c			beq 	_IOILoop
.114a	ee f2 0a	inc $0af2			inc 	bufferCount
.114d	9d f3 0a	sta $0af3,x			sta 	bufferStorage+1,x
.1150	4c 3c 11	jmp $113c			jmp 	_IOILoop
.1153					_IOIExit:
.1153	a9 f2		lda #$f2			lda 	#(bufferCount) & $FF
.1155	85 2a		sta $2a				sta 	temp0
.1157	a9 0a		lda #$0a			lda 	#(bufferCount) >> 8
.1159	85 2b		sta $2b				sta 	1+(temp0)
.115b	60		rts				rts

;******  Return to file: device/device.asm


;******  Processing file: device/option_x16/x16timer.asm

.115c					IOReadTimer:
.115c	20 de ff	jsr $ffde			jsr 	$FFDE 						; reads timer into YXA so we want only YA
.115f	48		pha				pha
.1160	8a		txa				txa
.1161	a8		tay				tay
.1162	68		pla				pla
.1163	60		rts				rts

;******  Return to file: device/device.asm

.1164					deviceHandler:
.1164	7c 67 11	jmp ($1167,x)			jmp 	(deviceVectors,x)
.1167					deviceVectors:
>1167	30 10					.word X16Break             ; index 0
>1169	b3 10					.word IOClearScreen        ; index 2
>116b	bb 10					.word IONewLine            ; index 4
>116d	a0 10					.word IOInitialise         ; index 6
>116f	f7 10					.word IOInk                ; index 8
>1171	d9 10					.word IOInkey              ; index 10
>1173	37 11					.word IOInput              ; index 12
>1175	67 10					.word ExternLoad           ; index 14
>1177	1d 11					.word IOLocate             ; index 16
>1179	0b 11					.word IOPaper              ; index 18
>117b	cb 10					.word IOPrintChar          ; index 20
>117d	3b 10					.word ExternSave           ; index 22
>117f	c3 10					.word IOTab                ; index 24
>1181	5c 11					.word IOReadTimer          ; index 26

;******  Return to file: basic.asm

.1183					section_end_device:
.1183					section_start_error:

;******  Processing file: error/error.asm


;******  Processing file: error/errorhandler.asm

.1183					ErrorHandler:
.1183	8a		txa				txa
.1184	48		pha				pha
.1185	a9 01		lda #$01			lda 	#1 							; red
.1187	a2 08		ldx #$08		ldx	#8
.1189	20 64 11	jsr $1164		jsr	deviceHandler
.118c	68		pla				pla
.118d	aa		tax				tax
.118e	a9 ff		lda #$ff			lda 	#(ErrorTextList) & $FF
.1190	85 2a		sta $2a				sta 	temp0
.1192	a9 11		lda #$11			lda 	#(ErrorTextList) >> 8
.1194	85 2b		sta $2b				sta 	1+(temp0)
.1196	ca		dex		_EHFind:dex									; errors start at 1
.1197	f0 10		beq $11a9			beq 	_EHFound
.1199	a0 00		ldy #$00			ldy 	#0 							; goto next text message, add length + 1 to the pointer.
.119b	38		sec				sec
.119c	a5 2a		lda $2a				lda 	temp0
.119e	71 2a		adc ($2a),y			adc 	(temp0),y
.11a0	85 2a		sta $2a				sta 	temp0
.11a2	90 f2		bcc $1196			bcc 	_EHFind
.11a4	e6 2b		inc $2b				inc 	temp0+1
.11a6	4c 96 11	jmp $1196			jmp 	_EHFind
.11a9					_EHFound:
.11a9	a2 10		ldx #$10		ldx	#16
.11ab	20 64 2c	jsr $2c64		jsr	mainHandler
.11ae	a0 00		ldy #$00			ldy 	#0 							; in a line, e.g. the offset to next is non zero.
.11b0	b1 28		lda ($28),y			lda 	(codePtr),y
.11b2	f0 3d		beq $11f1			beq 	_EHNoLine
.11b4	a5 29		lda $29				lda 	codePtr+1 					; code running from the command line.
.11b6	cd c9 0a	cmp $0ac9			cmp 	basePage+1
.11b9	90 36		bcc $11f1			bcc 	_EHNoLine
.11bb	a9 fb		lda #$fb			lda 	#(EHAtMsg) & $FF
.11bd	85 2a		sta $2a				sta 	temp0
.11bf	a9 11		lda #$11			lda 	#(EHAtMsg) >> 8
.11c1	85 2b		sta $2b				sta 	1+(temp0)
.11c3	a2 10		ldx #$10		ldx	#16
.11c5	20 64 2c	jsr $2c64		jsr	mainHandler
.11c8	a0 01		ldy #$01			ldy 	#1 							; set up line number in TOS
.11ca	a2 00		ldx #$00			ldx 	#0
.11cc	b1 28		lda ($28),y			lda 	(codePtr),y
.11ce	95 48		sta $48,x			sta 	esInt0,x
.11d0	c8		iny				iny
.11d1	b1 28		lda ($28),y			lda 	(codePtr),y
.11d3	95 50		sta $50,x			sta 	esInt1,x
.11d5	a9 00		lda #$00			lda 	#0
.11d7	95 58		sta $58,x			sta 	esInt2,x
.11d9	95 60		sta $60,x			sta 	esInt3,x
.11db	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.11dd	85 2a		sta $2a				sta 	temp0
.11df	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.11e1	85 2b		sta $2b				sta 	1+(temp0)
.11e3	a0 0a		ldy #$0a			ldy 	#10 						; in base 10.
.11e5	a9 00		lda #$00			lda 	#0							; stack position zero.
.11e7	a2 0c		ldx #$0c		ldx	#12
.11e9	20 64 2c	jsr $2c64		jsr	mainHandler
.11ec	a2 10		ldx #$10		ldx	#16
.11ee	20 64 2c	jsr $2c64		jsr	mainHandler
.11f1					_EHNoLine:
.11f1	a2 04		ldx #$04		ldx	#4
.11f3	20 64 11	jsr $1164		jsr	deviceHandler
.11f6	a2 02		ldx #$02		ldx	#2
.11f8	20 8d 16	jsr $168d		jsr	interactionHandler
.11fb					EHAtMsg:
>11fb	03 20 40 20					.text 	3," @ "

;******  Processing file: error/../generated/errortext.inc

.11ff					ErrorTextList:
>11ff	13 46 65 61 74 75 72 65			.text 19,"Feature not Present"
>1207	20 6e 6f 74 20 50 72 65 73 65 6e 74
>1213	0c 53 79 6e 74 61 78 20			.text 12,"Syntax Error"
>121b	45 72 72 6f 72
>1220	0f 4d 6f 64 75 6c 65 20			.text 15,"Module disabled"
>1228	64 69 73 61 62 6c 65 64
>1230	10 41 73 73 65 72 74 69			.text 16,"Assertion failed"
>1238	6f 6e 20 66 61 69 6c 65 64
>1241	0e 44 69 76 69 64 65 20			.text 14,"Divide By Zero"
>1249	42 79 20 5a 65 72 6f
>1250	04 53 74 6f 70				.text 4,"Stop"
>1255	0d 54 79 70 65 20 4d 69			.text 13,"Type Mismatch"
>125d	73 6d 61 74 63 68
>1263	0d 49 6c 6c 65 67 61 6c			.text 13,"Illegal Value"
>126b	20 56 61 6c 75 65
>1271	15 4d 69 73 73 69 6e 67			.text 21,"Missing right bracket"
>1279	20 72 69 67 68 74 20 62 72 61 63 6b 65 74
>1287	0d 4d 69 73 73 69 6e 67			.text 13,"Missing comma"
>128f	20 63 6f 6d 6d 61
>1295	11 4d 69 73 73 69 6e 67			.text 17,"Missing reference"
>129d	20 72 65 66 65 72 65 6e 63 65
>12a7	15 4c 69 6e 65 20 4e 75			.text 21,"Line Number not found"
>12af	6d 62 65 72 20 6e 6f 74 20 66 6f 75 6e 64
>12bd	10 53 74 72 69 6e 67 20			.text 16,"String too long."
>12c5	74 6f 6f 20 6c 6f 6e 67 2e
>12ce	14 52 45 54 55 52 4e 20			.text 20,"RETURN without GOSUB"
>12d6	77 69 74 68 6f 75 74 20 47 4f 53 55 42
>12e3	14 55 4e 54 49 4c 20 77			.text 20,"UNTIL without REPEAT"
>12eb	69 74 68 6f 75 74 20 52 45 50 45 41 54
>12f8	10 4e 45 58 54 20 77 69			.text 16,"NEXT without FOR"
>1300	74 68 6f 75 74 20 46 4f 52
>1309	12 57 45 4e 44 20 77 69			.text 18,"WEND without WHILE"
>1311	74 68 6f 75 74 20 57 48 49 4c 45
>131c	14 45 4e 44 50 52 4f 43			.text 20,"ENDPROC without PROC"
>1324	20 77 69 74 68 6f 75 74 20 50 52 4f 43
>1331	0e 42 61 64 20 4e 45 58			.text 14,"Bad NEXT index"
>1339	54 20 69 6e 64 65 78
>1340	17 53 74 72 75 63 74 75			.text 23,"Structures nested wrong"
>1348	72 65 73 20 6e 65 73 74 65 64 20 77 72 6f 6e 67
>1358	16 43 61 6e 6e 6f 74 20			.text 22,"Cannot create variable"
>1360	63 72 65 61 74 65 20 76 61 72 69 61 62 6c 65
>136f	1a 52 65 74 75 72 6e 20			.text 26,"Return stack out of space."
>1377	73 74 61 63 6b 20 6f 75 74 20 6f 66 20 73 70 61
>1387	63 65 2e
>138a	11 55 6e 6b 6e 6f 77 6e			.text 17,"Unknown Procedure"
>1392	20 50 72 6f 63 65 64 75 72 65
>139c	18 50 61 72 61 6d 65 74			.text 24,"Parameters do not match."
>13a4	65 72 73 20 64 6f 20 6e 6f 74 20 6d 61 74 63 68
>13b4	2e
>13b5	15 41 72 72 61 79 20 61			.text 21,"Array already defined"
>13bd	6c 72 65 61 64 79 20 64 65 66 69 6e 65 64
>13cb	12 44 49 4d 20 72 65 71			.text 18,"DIM requires array"
>13d3	75 69 72 65 73 20 61 72 72 61 79
>13de	10 42 61 64 20 61 72 72			.text 16,"Bad array index."
>13e6	61 79 20 69 6e 64 65 78 2e
>13ef	0b 4f 75 74 20 6f 66 20			.text 11,"Out of data"
>13f7	64 61 74 61
>13fb	15 43 61 6e 6e 6f 74 20			.text 21,"Cannot tokenise line."
>1403	74 6f 6b 65 6e 69 73 65 20 6c 69 6e 65 2e
>1411	0b 53 61 76 65 20 66 61			.text 11,"Save failed"
>1419	69 6c 65 64
>141d	0b 4c 6f 61 64 20 66 61			.text 11,"Load failed"
>1425	69 6c 65 64
>1429	05 42 72 65 61 6b			.text 5,"Break"
>142f	00					.byte 0

;******  Return to file: error/errorhandler.asm


;******  Return to file: error/error.asm


;******  Return to file: basic.asm

.1430					section_end_error:
.1430					section_start_extension:

;******  Processing file: extension/extension.asm


;******  Processing file: extension/extensionhandler.asm

.1430					ExtensionHandler:
.1430	c9 ff		cmp #$ff			cmp 	#$FF						; A = $FF command, otherwise unary function stack level.
.1432	d0 08		bne $143c			bne 	_ExtensionUnary 			; is passed in A.
.1434	b1 28		lda ($28),y			lda 	(codePtr),y 				; so this is a command, using Group 2.
.1436	c8		iny				iny
.1437	0a		asl a				asl 	a
.1438	aa		tax				tax
.1439	7c 3a 14	jmp ($143a,x)			jmp 	(Group2Vectors-12,x)
.143c					_ExtensionUnary:
.143c	48		pha				pha 								; save stack pos in A
.143d	b1 28		lda ($28),y			lda 	(codePtr),y 				; get shifted token, double into X
.143f	c8		iny				iny
.1440	0a		asl a				asl 	a
.1441	aa		tax				tax
.1442	68		pla				pla 								; restore stack pos and call group3 command.
.1443	7c 3e 14	jmp ($143e,x)			jmp 	(Group3Vectors-12,X)

;******  Processing file: extension/../generated/tokenvectors2.inc

.1446					Group2Vectors:
>1446	56 14					.word	Command_VPoke            ; $86 vpoke
>1448	59 14					.word	Command_VDoke            ; $87 vdoke

;******  Return to file: extension/extensionhandler.asm


;******  Processing file: extension/../generated/tokenvectors3.inc

.144a					Group3Vectors:
>144a	9a 14					.word	Command_VPeek            ; $86 vpeek(
>144c	9d 14					.word	Command_VDeek            ; $87 vdeek(

;******  Return to file: extension/extensionhandler.asm

.144e					XEvaluateInteger:
.144e	8a		txa				txa
.144f	a2 06		ldx #$06		ldx	#6
.1451	20 64 2c	jsr $2c64		jsr	mainHandler
.1454	aa		tax				tax
.1455	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/vpeekpoke.asm

.1456					Command_VPoke:
.1456	38		sec				sec 						; one byte , CS
.1457	b0 01		bcs $145a			bcs 	CmdVideoWrite
.1459					Command_VDoke:
.1459	18		clc				clc 						; two bytes, CC
.145a					CmdVideoWrite:
.145a	08		php				php 						; save one or two btes
.145b	a2 00		ldx #$00			ldx 	#0  				; get address and value into levels 0,1
.145d	20 4e 14	jsr $144e			jsr 	XEvaluateInteger
.1460	20 82 2b	jsr $2b82			jsr 	CheckComma
.1463	e8		inx				inx
.1464	20 4e 14	jsr $144e			jsr 	XEvaluateInteger
.1467	ca		dex				dex
.1468	20 79 14	jsr $1479			jsr 	SetUpTOSVRamAddress ; copy target address to VRAM address registers
.146b	a5 49		lda $49				lda 	esInt0+1 			; get MSB of write value
.146d	8d 23 9f	sta $9f23			sta 	$9F23
.1470	28		plp				plp 						; if it was Poke then exit
.1471	b0 05		bcs $1478			bcs 	_CVWExit
.1473	a5 51		lda $51				lda 	esInt1+1 			; doke, write the MSB.
.1475	8d 23 9f	sta $9f23			sta 	$9F23
.1478					_CVWExit:
.1478	60		rts				rts
.1479					SetUpTOSVRamAddress:
.1479	b5 58		lda $58,x			lda 	esInt2,x 			; check range of address, data to $FFFF
.147b	29 01		and #$01			and 	#1
.147d	15 60		ora $60,x			ora 	esInt3,x
.147f	d0 14		bne $1495			bne 	CVWValue
.1481	b5 48		lda $48,x			lda 	esInt0,x			; set address up
.1483	8d 20 9f	sta $9f20			sta 	$9F20
.1486	b5 50		lda $50,x			lda 	esInt1,x
.1488	8d 21 9f	sta $9f21			sta	 	$9F21
.148b	b5 58		lda $58,x			lda 	esInt2,x
.148d	29 01		and #$01			and 	#1
.148f	09 10		ora #$10			ora 	#$10 				; step 1.
.1491	8d 22 9f	sta $9f22			sta 	$9F22
.1494	60		rts				rts
.1495					CVWValue:
.1495	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.1497	20 83 11	jsr $1183		jsr	errorHandler
.149a					Command_VPeek:
.149a	38		sec				sec 						; one byte , CS
.149b	b0 01		bcs $149e			bcs 	CmdVideoRead
.149d					Command_VDeek:
.149d	18		clc				clc 						; two bytes, CC
.149e					CmdVideoRead:
.149e	08		php				php 						; save action on stack.
.149f	aa		tax				tax 						; save stack position
.14a0	20 4e 14	jsr $144e			jsr 	XEvaluateInteger 	; address
.14a3	20 75 2b	jsr $2b75			jsr 	CheckRightParen 	; closing right bracket.
.14a6	20 79 14	jsr $1479			jsr 	SetUpTOSVRamAddress	; set up VRAM address.
.14a9	20 02 2b	jsr $2b02			jsr 	MInt32False 		; zero return.
.14ac	ad 23 9f	lda $9f23			lda 	$9F23				; copy 1st byte
.14af	95 48		sta $48,x			sta 	esInt0,x
.14b1	28		plp				plp 						; check if DOKE (carry was clear)
.14b2	b0 05		bcs $14b9			bcs 	_CVRExit
.14b4	ad 23 9f	lda $9f23			lda 	$9F23 				; copy 2nd byte
.14b7	95 50		sta $50,x			sta 	esInt1,x
.14b9					_CVRExit:
.14b9	8a		txa				txa 						; return X position.
.14ba	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Return to file: basic.asm

.14bb					section_end_extension:
.14bb					section_start_floatingpoint:

;******  Processing file: floatingpoint/floatingpoint.asm

.14bb					floatingpointHandler:
.14bb	a2 03		ldx #$03			ldx 	#ErrorID_NoModule
.14bd	20 83 11	jsr $1183		jsr	errorHandler

;******  Return to file: basic.asm

.14c0					section_end_floatingpoint:
.14c0					section_start_interaction:

;******  Processing file: interaction/interaction.asm


;******  Processing file: interaction/cold.asm

.14c0					ColdStartEntry:
.14c0	a2 ff		ldx #$ff			ldx 	#$FF
.14c2	9a		txs				txs
.14c3	a2 02		ldx #$02		ldx	#2
.14c5	20 64 11	jsr $1164		jsr	deviceHandler
.14c8	a0 ff		ldy #$ff			ldy 	#255
.14ca					_CSBanner:
.14ca	c8		iny				iny
.14cb	b9 f1 14	lda $14f1,y			lda 	Intro,y
.14ce	f0 14		beq $14e4			beq 	_CSStart
.14d0	c9 08		cmp #$08			cmp 	#8
.14d2	90 08		bcc $14dc			bcc 	_CSInk
.14d4	a2 14		ldx #$14		ldx	#20
.14d6	20 64 11	jsr $1164		jsr	deviceHandler
.14d9	4c ca 14	jmp $14ca			jmp 	_CSBanner
.14dc					_CSInk:
.14dc	a2 08		ldx #$08		ldx	#8
.14de	20 64 11	jsr $1164		jsr	deviceHandler
.14e1	4c ca 14	jmp $14ca			jmp 	_CSBanner
.14e4					_CSStart:
.14e4	a2 12		ldx #$12		ldx	#18
.14e6	20 64 2c	jsr $2c64		jsr	mainHandler
.14e9	a2 02		ldx #$02		ldx	#2
.14eb	20 64 2c	jsr $2c64		jsr	mainHandler
.14ee	4c 05 16	jmp $1605			jmp 	WarmStartEntry
>14f1	06 2a 2a 2a 20 36 35 30		Intro:	.text 	6,"*** 6502 Extended BASIC ***",13,13
>14f9	32 20 45 78 74 65 6e 64 65 64 20 42 41 53 49 43
>1509	20 2a 2a 2a 0d 0d
>150f	03 57 72 69 74 74 65 6e				.text 	3,"Written by Paul Robson 2021",13,13
>1517	20 62 79 20 50 61 75 6c 20 52 6f 62 73 6f 6e 20
>1527	32 30 32 31 0d 0d
>152d	02 42 61 73 69 63 20				.text 	2,"Basic "
>1534	30 2e 31 34					.text "0.14"
>1538	20 28						.text 	" ("
>153a	31 32 2d 4d 61 72 2d 32				.text "12-Mar-21"
>1542	31
>1543	29 0d 0d 00					.text 	")",13,13,0

;******  Return to file: interaction/interaction.asm


;******  Processing file: interaction/delete.asm

.1547					DeleteLine:
.1547	ad c8 0a	lda $0ac8			lda 	basePage 					; copy program base to temp0
.154a	85 2a		sta $2a				sta 	temp0
.154c	ad c9 0a	lda $0ac9			lda 	basePage+1
.154f	85 2b		sta $2b				sta 	temp0+1
.1551	a0 01		ldy #$01	_DLLoop:ldy 	#1 							; see if found line ?
.1553	a5 48		lda $48				lda 	esInt0
.1555	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.1557	d0 07		bne $1560			bne 	_DLNext
.1559	c8		iny				iny
.155a	a5 50		lda $50				lda 	esInt1
.155c	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.155e	f0 0a		beq $156a			beq 	_DLFound
.1560	20 88 15	jsr $1588	_DLNext:jsr 	IAdvanceTemp0 				; shift temp0 forward, return Z flag set if end.
.1563	d0 ec		bne $1551			bne 	_DLLoop
.1565	a0 00		ldy #$00			ldy 	#0 							; size of chunk to cut out.
.1567	b1 2a		lda ($2a),y			lda 	(temp0),y
.1569	60		rts				rts
.156a					_DLFound:
.156a	a0 00		ldy #$00			ldy 	#0 							; from here (temp0),y
.156c	b1 2a		lda ($2a),y			lda 	(temp0),y
.156e	a8		tay				tay
.156f	a2 00		ldx #$00			ldx 	#0  						; to (temp0,x)
.1571					_DLCopyDown:
.1571	b1 2a		lda ($2a),y			lda 	(temp0),y
.1573	81 2a		sta ($2a,x)			sta 	(temp0,x)
.1575	e6 2a		inc $2a				inc 	temp0 						; advance pointer
.1577	d0 02		bne $157b			bne 	_DLNoCarry
.1579	e6 2b		inc $2b				inc 	temp0+1
.157b					_DLNoCarry:
.157b	a5 2a		lda $2a				lda 	temp0 						; until hit low memory
.157d	c5 35		cmp $35				cmp 	lowMemory
.157f	d0 f0		bne $1571			bne 	_DLCopyDown
.1581	a5 2b		lda $2b				lda 	temp0+1
.1583	c5 36		cmp $36				cmp 	lowMemory+1
.1585	d0 ea		bne $1571			bne 	_DLCopyDown
.1587	60		rts				rts
.1588					IAdvanceTemp0:
.1588	84 32		sty $32				sty 	tempShort
.158a	18		clc				clc
.158b	a0 00		ldy #$00			ldy 	#0
.158d	b1 2a		lda ($2a),y			lda 	(temp0),y
.158f	65 2a		adc $2a				adc 	temp0
.1591	85 2a		sta $2a				sta 	temp0
.1593	90 02		bcc $1597			bcc 	_IATNoCarry
.1595	e6 2b		inc $2b				inc 	temp0+1
.1597					_IATNoCarry:
.1597	b1 2a		lda ($2a),y			lda 	(temp0),y
.1599	a4 32		ldy $32				ldy 	tempShort
.159b	c9 00		cmp #$00			cmp		#0
.159d	60		rts				rts

;******  Return to file: interaction/interaction.asm


;******  Processing file: interaction/insert.asm

.159e					InsertLine:
.159e	ad c8 0a	lda $0ac8			lda 	basePage 					; copy program base to temp0
.15a1	85 2a		sta $2a				sta 	temp0
.15a3	ad c9 0a	lda $0ac9			lda 	basePage+1
.15a6	85 2b		sta $2b				sta 	temp0+1
.15a8					_ILLoop:
.15a8	a0 01		ldy #$01			ldy 	#1
.15aa	b1 2a		lda ($2a),y			lda 	(temp0),y
.15ac	c5 48		cmp $48				cmp 	esInt0
.15ae	c8		iny				iny
.15af	b1 2a		lda ($2a),y			lda 	(temp0),y
.15b1	e5 50		sbc $50				sbc 	esInt1
.15b3	b0 05		bcs $15ba			bcs 	_ILFound 					; we know it cannot be equal, it would have been deleted
.15b5	20 88 15	jsr $1588			jsr 	IAdvanceTemp0 				; shift temp0 forward, return Z flag set if end.
.15b8	d0 ee		bne $15a8			bne 	_ILLoop
.15ba					_ILFound:
.15ba	a5 35		lda $35				lda 	lowMemory 					; shift lowMemory up to make space for it.
.15bc	85 2c		sta $2c				sta 	temp1
.15be	a5 36		lda $36				lda 	lowMemory+1
.15c0	85 2d		sta $2d				sta 	temp1+1
.15c2	ad 1d 0d	lda $0d1d			lda 	tokenBufferIndex 			; space to make in Y, 0 in X.
.15c5	18		clc				clc
.15c6	69 03		adc #$03			adc 	#3
.15c8	a8		tay				tay
.15c9	a2 00		ldx #$00			ldx 	#0
.15cb	a1 2c		lda ($2c,x)	_ILMove:lda 	(temp1,x)
.15cd	91 2c		sta ($2c),y			sta 	(temp1),y
.15cf	a5 2c		lda $2c				lda 	temp1
.15d1	c5 2a		cmp $2a				cmp 	temp0
.15d3	d0 06		bne $15db			bne 	_ILMNext
.15d5	a5 2d		lda $2d				lda 	temp1+1
.15d7	c5 2b		cmp $2b				cmp 	temp0+1
.15d9	f0 0b		beq $15e6			beq 	_ILMCopy
.15db					_ILMNext:
.15db	a5 2c		lda $2c				lda 	temp1
.15dd	d0 02		bne $15e1			bne 	_ILNoBorrow
.15df	c6 2d		dec $2d				dec 	temp1+1
.15e1					_ILNoBorrow:
.15e1	c6 2c		dec $2c				dec 	temp1
.15e3	4c cb 15	jmp $15cb			jmp 	_ILMove
.15e6					_ILMCopy:
.15e6	98		tya				tya 								; Y is the offset of the new line.
.15e7	81 2a		sta ($2a,x)			sta 	(temp0,x)					; X = 0 still.
.15e9	a0 01		ldy #$01			ldy 	#1 							; copy in line number.
.15eb	a5 48		lda $48				lda 	esInt0
.15ed	91 2a		sta ($2a),y			sta 	(temp0),y
.15ef	c8		iny				iny
.15f0	a5 50		lda $50				lda 	esInt1
.15f2	91 2a		sta ($2a),y			sta 	(temp0),y
.15f4	a0 00		ldy #$00			ldy 	#0 							; copy the body in
.15f6					_ILMCopy2:
.15f6	b1 28		lda ($28),y			lda 	(codePtr),y
.15f8	c8		iny				iny
.15f9	c8		iny				iny
.15fa	c8		iny				iny
.15fb	91 2a		sta ($2a),y			sta 	(temp0),y
.15fd	88		dey				dey
.15fe	88		dey				dey
.15ff	cc 1d 0d	cpy $0d1d			cpy 	tokenBufferIndex
.1602	d0 f2		bne $15f6			bne 	_ILMCopy2
.1604	60		rts				rts

;******  Return to file: interaction/interaction.asm


;******  Processing file: interaction/warm.asm

.1605					WarmStartEntry:
.1605	a2 ff		ldx #$ff			ldx 	#$FF
.1607	9a		txs				txs
.1608	a9 02		lda #$02			lda 	#2							; green text.
.160a	a2 08		ldx #$08		ldx	#8
.160c	20 64 11	jsr $1164		jsr	deviceHandler
.160f	a2 0c		ldx #$0c		ldx	#12
.1611	20 64 11	jsr $1164		jsr	deviceHandler
.1614	a5 2a		lda $2a				lda 	temp0	 					; copy temp0 to codePtr
.1616	85 28		sta $28				sta 	codePtr
.1618	a5 2b		lda $2b				lda 	temp0+1
.161a	85 29		sta $29				sta 	codePtr+1
.161c	a2 04		ldx #$04		ldx	#4
.161e	20 64 11	jsr $1164		jsr	deviceHandler
.1621	a2 06		ldx #$06		ldx	#6
.1623	20 df 35	jsr $35df		jsr	tokeniserHandler
.1626	90 25		bcc $164d			bcc 	WSEError 					; failed.
.1628	a9 1a		lda #$1a			lda 	#(tokenHeader) & $FF
.162a	85 28		sta $28				sta 	codePtr
.162c	a9 0c		lda #$0c			lda 	#(tokenHeader) >> 8
.162e	85 29		sta $29				sta 	1+(codePtr)
.1630	ad 1d 0c	lda $0c1d			lda 	tokenBuffer 				; is it a blank line, go get another line.
.1633	c9 80		cmp #$80			cmp 	#$80
.1635	f0 ce		beq $1605			beq 	WarmStartEntry
.1637	29 c0		and #$c0			and 	#$C0						; does it start with a number
.1639	c9 40		cmp #$40			cmp 	#$40
.163b	f0 15		beq $1652			beq 	HasLineNumber
.163d	a9 00		lda #$00			lda 	#0 							; zero the token header, so it will look like a
.163f	8d 1a 0c	sta $0c1a			sta 	tokenHeader 				; fake program line.
.1642	8d 1b 0c	sta $0c1b			sta 	tokenHeader+1
.1645	8d 1c 0c	sta $0c1c			sta 	tokenHeader+2
.1648	a2 14		ldx #$14		ldx	#20
.164a	20 64 2c	jsr $2c64		jsr	mainHandler
.164d					WSEError:
.164d	a2 1d		ldx #$1d			ldx 	#ErrorID_Tokenise
.164f	20 83 11	jsr $1183		jsr	errorHandler
.1652					HasLineNumber:
.1652	a0 03		ldy #$03			ldy 	#3 							; get line number
.1654	a9 00		lda #$00			lda 	#0
.1656	a2 06		ldx #$06		ldx	#6
.1658	20 64 2c	jsr $2c64		jsr	mainHandler
.165b	a5 58		lda $58				lda 	esInt2		 				; check in range.
.165d	05 60		ora $60				ora 	esInt3
.165f	d0 ec		bne $164d			bne 	WSEError
.1661	98		tya				tya 								; make codePtr point to code after the line number.
.1662	18		clc				clc
.1663	65 28		adc $28				adc 	codePtr
.1665	85 28		sta $28				sta 	codePtr
.1667	90 02		bcc $166b			bcc		_HLNNoCarry
.1669	e6 29		inc $29				inc 	codePtr+1
.166b					_HLNNoCarry:
.166b	98		tya				tya 								; subtract that offset from the code buffer index
.166c	38		sec				sec
.166d	49 ff		eor #$ff			eor 	#$FF
.166f	6d 1d 0d	adc $0d1d			adc 	tokenBufferIndex
.1672	18		clc				clc 								; add space allowing for header & $80 trailer
.1673	69 04		adc #$04			adc 	#4
.1675	8d 1d 0d	sta $0d1d			sta 	tokenBufferIndex 			; this is the number of bytes occupied.
.1678	20 47 15	jsr $1547			jsr 	DeleteLine 					; always delete the line, it's deleted and reinserted.
.167b					_HLNNoDelete:
.167b	ad 1d 0d	lda $0d1d			lda 	tokenBufferIndex 			; if line was empty, then don't insert
.167e	c9 01		cmp #$01			cmp 	#1 							; (the one character is the EOL marker)
.1680	f0 03		beq $1685			beq 	_HLMEditDone
.1682	20 9e 15	jsr $159e			jsr 	InsertLine 					; insert the line in
.1685					_HLMEditDone:
.1685	a2 02		ldx #$02		ldx	#2
.1687	20 64 2c	jsr $2c64		jsr	mainHandler
.168a	4c 05 16	jmp $1605			jmp 	WarmStartEntry

;******  Return to file: interaction/interaction.asm

.168d					interactionHandler:
.168d	7c 90 16	jmp ($1690,x)			jmp 	(interactionVectors,x)
.1690					interactionVectors:
>1690	c0 14					.word ColdStartEntry       ; index 0
>1692	05 16					.word WarmStartEntry       ; index 2

;******  Return to file: basic.asm

.1694					section_end_interaction:
.1694					section_start_main:

;******  Processing file: main/main.asm


;******  Processing file: main/commands/assert.asm

.1694					Command_Assert:
.1694	20 9e 25	jsr $259e			jsr 	EvaluateRootInteger 		; what is being asserted.
.1697	20 29 2b	jsr $2b29			jsr 	MInt32Zero 					; is it true ?
.169a	f0 01		beq $169d			beq 	_CAError
.169c	60		rts				rts
.169d					_CAError:
.169d	a2 04		ldx #$04			ldx 	#ErrorID_Assert
.169f	20 83 11	jsr $1183		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/commands/clear.asm

.16a2					CommandClear:
.16a2					XCommandClear:
.16a2	98		tya				tya
.16a3	48		pha				pha
.16a4	ad cc 0a	lda $0acc			lda 	endMemory					; set high memory = end of memory
.16a7	85 33		sta $33				sta 	highMemory
.16a9	ad cd 0a	lda $0acd			lda 	endMemory+1
.16ac	85 34		sta $34				sta 	highMemory+1
.16ae	ad c8 0a	lda $0ac8			lda 	basePage 					; work out where the program ends.
.16b1	85 2a		sta $2a				sta 	temp0
.16b3	ad c9 0a	lda $0ac9			lda 	basePage+1
.16b6	85 2b		sta $2b				sta 	temp0+1
.16b8					_CCFindEnd:
.16b8	a0 00		ldy #$00			ldy 	#0
.16ba	b1 2a		lda ($2a),y			lda 	(temp0),y
.16bc	f0 0c		beq $16ca			beq 	_CCFoundEnd 				; offset zero is end.
.16be	18		clc				clc
.16bf	65 2a		adc $2a				adc 	temp0 						; move to next line
.16c1	85 2a		sta $2a				sta 	temp0
.16c3	90 f3		bcc $16b8			bcc 	_CCFindEnd
.16c5	e6 2b		inc $2b				inc 	temp0+1
.16c7	4c b8 16	jmp $16b8			jmp 	_CCFindEnd
.16ca					_CCFoundEnd:
.16ca	a5 2a		lda $2a				lda 	temp0 						; put temp0 in lowMemory
.16cc	85 35		sta $35				sta 	lowMemory
.16ce	a5 2b		lda $2b				lda 	temp0+1
.16d0	85 36		sta $36				sta 	lowMemory+1
.16d2	18		clc				clc 								; put temp0+1 in endProgram
.16d3	a5 2a		lda $2a				lda 	temp0
.16d5	69 01		adc #$01			adc 	#1
.16d7	8d ca 0a	sta $0aca			sta 	endProgram
.16da	a5 2b		lda $2b				lda 	temp0+1
.16dc	69 00		adc #$00			adc 	#0
.16de	8d cb 0a	sta $0acb			sta 	endProgram+1
.16e1	a9 04		lda #$04			lda 	#4 							; skip low free memory clear, leave a gap.
.16e3	20 f7 16	jsr $16f7			jsr 	AdvanceLowMemoryByte		; need at least one here, to skip the end of program zero offset.
.16e6	20 03 2c	jsr $2c03			jsr 	RSReset 					; reset the return stack.
.16e9	a2 04		ldx #$04		ldx	#4
.16eb	20 da 38	jsr $38da		jsr	variableHandler
.16ee	20 54 1f	jsr $1f54			jsr 	ScanProc 					; scan for procedures
.16f1	20 0d 1d	jsr $1d0d			jsr 	CommandRestore 				; do a restore
.16f4	68		pla				pla
.16f5	a8		tay				tay
.16f6	60		rts				rts
.16f7					AdvanceLowMemoryByte:
.16f7	18		clc				clc
.16f8	65 35		adc $35				adc 	lowMemory
.16fa	85 35		sta $35				sta 	lowMemory
.16fc	90 02		bcc $1700			bcc 	_ALMBExit
.16fe	e6 36		inc $36				inc 	lowMemory+1
.1700					_ALMBExit:
.1700	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/dim.asm

.1701					Command_Dim:
.1701	a2 02		ldx #$02		ldx	#2
.1703	20 da 38	jsr $38da		jsr	variableHandler
.1706	b1 28		lda ($28),y			lda 	(codePtr),y 				; see what follows.
.1708	c8		iny				iny
.1709	c9 c8		cmp #$c8			cmp 	#TKW_COMMA 					; comma follows, go back and do next
.170b	f0 f4		beq $1701			beq 	Command_Dim
.170d	88		dey				dey 								; unpick get
.170e	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/for.asm

.170f					Command_FOR:
.170f	a9 46		lda #$46			lda 	#markerFOR 					; allocate the space and set the marker
.1711	a2 0b		ldx #$0b			ldx 	#11
.1713	20 11 2c	jsr $2c11			jsr 	RSClaim
.1716	20 0b 19	jsr $190b			jsr 	CommandLET 					; do the same as LET FOR [a = 4]
.1719	a5 40		lda $40				lda 	esType 						; check type should be integer reference.
.171b	c9 80		cmp #$80			cmp 	#$80 						; we do not do FOR floats.
.171d	d0 4c		bne $176b			bne 	_CFType
.171f	a9 cb		lda #$cb			lda 	#TKW_TO 					; check TO present.
.1721	20 6a 2b	jsr $2b6a			jsr 	CheckToken
.1724	a2 01		ldx #$01			ldx 	#1 							; keep the variable address in stack 0
.1726	20 a0 25	jsr $25a0			jsr 	EvaluateInteger				; get terminal value in stack 1
.1729	98		tya				tya
.172a	48		pha				pha
.172b	a0 04		ldy #$04			ldy 	#4
.172d	a5 48		lda $48				lda		esInt0 						; copy the address of the index variable into 4 and 5
.172f	91 78		sta ($78),y			sta 	(rsPointer),y
.1731	c8		iny				iny
.1732	a5 50		lda $50				lda		esInt1
.1734	91 78		sta ($78),y			sta 	(rsPointer),y
.1736	c8		iny				iny
.1737	a9 01		lda #$01			lda 	#1  						; the default step in 6, (-128 .. 127 only)
.1739	91 78		sta ($78),y			sta 	(rsPointer),y
.173b	c8		iny				iny
.173c	a5 49		lda $49				lda		esInt0+1 					; terminal value in 7 to 11.
.173e	91 78		sta ($78),y			sta 	(rsPointer),y
.1740	c8		iny				iny
.1741	a5 51		lda $51				lda		esInt1+1
.1743	91 78		sta ($78),y			sta 	(rsPointer),y
.1745	c8		iny				iny
.1746	a5 59		lda $59				lda		esInt2+1
.1748	91 78		sta ($78),y			sta 	(rsPointer),y
.174a	c8		iny				iny
.174b	a5 61		lda $61				lda		esInt3+1
.174d	91 78		sta ($78),y			sta 	(rsPointer),y
.174f	68		pla				pla
.1750	a8		tay				tay
.1751	b1 28		lda ($28),y			lda 	(codePtr),y 				; followed by STEP.
.1753	c9 cc		cmp #$cc			cmp 	#TKW_STEP
.1755	d0 0e		bne $1765			bne 	_CFDone
.1757	c8		iny				iny									; skip over step.
.1758	20 a0 25	jsr $25a0			jsr 	EvaluateInteger 			; get step
.175b	98		tya				tya
.175c	48		pha				pha
.175d	b5 48		lda $48,x			lda 	esInt0,x 					; copy it into step (bit lazy here)
.175f	a0 06		ldy #$06			ldy 	#6
.1761	91 78		sta ($78),y			sta 	(rsPointer),y
.1763	68		pla				pla
.1764	a8		tay				tay
.1765					_CFDone:
.1765	a9 01		lda #$01			lda 	#1
.1767	20 3d 2c	jsr $2c3d			jsr 	RSSavePosition 				; save position.
.176a	60		rts				rts
.176b					_CFType:
.176b	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.176d	20 83 11	jsr $1183		jsr	errorHandler
.1770					Command_NEXT:
.1770	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.1772	a1 78		lda ($78,x)			lda 	(rsPointer,x)
.1774	c9 46		cmp #$46			cmp 	#markerFOR 						; does it match
.1776	f0 05		beq $177d			beq 	_isok
.1778	a2 10		ldx #$10			ldx 	#ErrorID_nextErr
.177a	20 83 11	jsr $1183		jsr	errorHandler
.177d					_isok:
.177d	b1 28		lda ($28),y			lda 	(codePtr),y 				; is it NEXT <index>
.177f	c9 40		cmp #$40			cmp 	#$40 						; e.g. a variable follows 00-3F
.1781	b0 18		bcs $179b			bcs 	_CNNoIndex
.1783	a2 00		ldx #$00			ldx 	#0 							; start on stack
.1785	20 d3 25	jsr $25d3			jsr 	EvaluateReference 			; this is the variable/parameter to localise.
.1788	98		tya				tya
.1789	48		pha				pha
.178a	a0 04		ldy #$04			ldy 	#4 							; check same variable as that stored at +4,+5
.178c	b1 78		lda ($78),y			lda 	(rsPointer),y
.178e	d5 48		cmp $48,x			cmp 	esInt0,x
.1790	d0 76		bne $1808			bne 	_CNBadIndex
.1792	c8		iny				iny
.1793	b1 78		lda ($78),y			lda 	(rsPointer),y
.1795	d5 50		cmp $50,x			cmp 	esInt1,x
.1797	d0 6f		bne $1808			bne 	_CNBadIndex
.1799	68		pla				pla
.179a	a8		tay				tay
.179b					_CNNoIndex:
.179b	98		tya				tya
.179c	48		pha				pha
.179d	a0 04		ldy #$04			ldy 	#4 							; make temp0 point to the index
.179f	b1 78		lda ($78),y			lda 	(rsPointer),y
.17a1	85 2a		sta $2a				sta 	temp0
.17a3	c8		iny				iny
.17a4	b1 78		lda ($78),y			lda 	(rsPointer),y
.17a6	85 2b		sta $2b				sta 	temp0+1
.17a8	c8		iny				iny
.17a9	a2 00		ldx #$00			ldx 	#0 							; X is the sign extend part of the step.
.17ab	b1 78		lda ($78),y			lda 	(rsPointer),y 				; get the step.
.17ad	85 2f		sta $2f				sta 	temp2+1 					; save for later.
.17af	10 01		bpl $17b2			bpl 	_CNSignX
.17b1	ca		dex				dex  								; X = $FF
.17b2					_CNSignX:
.17b2	18		clc				clc 								; add to the LSB
.17b3	a0 00		ldy #$00			ldy 	#0
.17b5	71 2a		adc ($2a),y			adc 	(temp0),y
.17b7	91 2a		sta ($2a),y			sta 	(temp0),y
.17b9					_CNPropogate:
.17b9	c8		iny				iny  								; add the sign extended in X to the rest.
.17ba	8a		txa				txa
.17bb	71 2a		adc ($2a),y			adc 	(temp0),y
.17bd	91 2a		sta ($2a),y			sta 	(temp0),y
.17bf	c8		iny				iny
.17c0	8a		txa				txa
.17c1	71 2a		adc ($2a),y			adc 	(temp0),y
.17c3	91 2a		sta ($2a),y			sta 	(temp0),y
.17c5	c8		iny				iny
.17c6	8a		txa				txa
.17c7	71 2a		adc ($2a),y			adc 	(temp0),y
.17c9	91 2a		sta ($2a),y			sta 	(temp0),y
.17cb	18		clc				clc 								; point temp1 to the terminal value stored in the stack.
.17cc	a5 78		lda $78				lda 	rsPointer
.17ce	69 07		adc #$07			adc 	#7
.17d0	85 2c		sta $2c				sta 	temp1
.17d2	a9 00		lda #$00			lda 	#0
.17d4	85 2e		sta $2e				sta 	temp2 						; clear temp2, which is the OR of all the subtractions.
.17d6	a8		tay				tay 								; and clear the Y register again.
.17d7	65 79		adc $79				adc 	rsPointer+1
.17d9	85 2d		sta $2d				sta 	temp1+1
.17db	38		sec				sec 								; calculate current - limit oring interim values.
.17dc	20 14 18	jsr $1814			jsr 	_CNCompare 					; each of these does a byte.
.17df	20 14 18	jsr $1814			jsr 	_CNCompare 					; we calculate the OR of all these subtractions.
.17e2	20 14 18	jsr $1814			jsr 	_CNCompare 					; and the carry of the subtraction.
.17e5	20 14 18	jsr $1814			jsr 	_CNCompare
.17e8	50 02		bvc $17ec			bvc 	_CNNoOverflow 				; converts to a signed comparison on the sign bit.
.17ea	49 80		eor #$80			eor 	#$80
.17ec					_CNNoOverflow:
.17ec	a4 2f		ldy $2f				ldy 	temp2+1						; get step back
.17ee	30 1d		bmi $180d			bmi 	_CNCheckDownto
.17f0	c9 00		cmp #$00			cmp 	#0
.17f2	30 0c		bmi $1800			bmi 	_CNLoopRound 				; loop round if < =
.17f4	a5 2e		lda $2e				lda 	temp2
.17f6	f0 08		beq $1800			beq 	_CNLoopRound
.17f8					_CNLoopExit:
.17f8	68		pla				pla
.17f9	a8		tay				tay
.17fa	a9 0b		lda #$0b			lda 	#11
.17fc	20 33 2c	jsr $2c33			jsr 	RSFree
.17ff	60		rts				rts
.1800					_CNLoopRound:
.1800	68		pla				pla
.1801	a8		tay				tay
.1802	a9 01		lda #$01			lda 	#1
.1804	20 50 2c	jsr $2c50			jsr 	RSLoadPosition				; go back to the loop top
.1807	60		rts				rts
.1808					_CNBadIndex:
.1808	a2 13		ldx #$13			ldx 	#ErrorID_BadIndex
.180a	20 83 11	jsr $1183		jsr	errorHandler
.180d					_CNCheckDownto:
.180d	c9 00		cmp #$00			cmp 	#0
.180f	10 ef		bpl $1800			bpl 	_CNLoopRound
.1811	4c f8 17	jmp $17f8			jmp 	_CNLoopExit
.1814					_CNCompare:
.1814	b1 2a		lda ($2a),y			lda 	(temp0),y 					; do the subtraction - compare don't care about answer
.1816	f1 2c		sbc ($2c),y			sbc 	(temp1),y
.1818	05 2e		ora $2e				ora 	temp2 						; Or into temp2 (does not affect carry)
.181a	85 2e		sta $2e				sta 	temp2
.181c	c8		iny				iny
.181d	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/if.asm

.181e					CommandIf:
.181e	20 9e 25	jsr $259e			jsr 	EvaluateRootInteger 		; get what's being tested.
.1821	b1 28		lda ($28),y			lda 	(codePtr),y 				; check for IF .. THEN or IF .. GOTO which are single lines.
.1823	c9 d6		cmp #$d6			cmp 	#TKW_GOTO
.1825	f0 04		beq $182b			beq 	_IfSimple
.1827	c9 a1		cmp #$a1			cmp 	#TKW_THEN
.1829	d0 1b		bne $1846			bne 	_IfComplex
.182b					_IfSimple:
.182b	20 29 2b	jsr $2b29			jsr 	MInt32Zero					; check if TOS zero
.182e	f0 10		beq $1840			beq 	_IfEOL 						; go to next line.
.1830	b1 28		lda ($28),y			lda 	(codePtr),y 				; get and skip token.
.1832	c8		iny				iny
.1833	c9 d6		cmp #$d6			cmp 	#TKW_GOTO 					; was it if GOTO ?
.1835	f0 0c		beq $1843			beq 	_IfGoto 					; do the Goto code
.1837	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows the THEN ?
.1839	29 c0		and #$c0			and 	#$C0 						; check $40-$7F
.183b	c9 40		cmp #$40			cmp 	#$40 						; e.g. number IF x = 0 THEN 170
.183d	f0 04		beq $1843			beq 	_IfGoto
.183f	60		rts				rts 								; else continue on this line.
.1840					_IfEOL:
.1840	4c c9 1f	jmp $1fc9			jmp 	AdvanceNextLine 			; go to next line
.1843					_IfGoto:
.1843	4c 3e 20	jmp $203e			jmp 	CommandGoto
.1846					_IfComplex:
.1846	20 29 2b	jsr $2b29			jsr 	MInt32Zero 					; is it true ?
.1849	f0 01		beq $184c			beq 	_IFSkip 					; if non-zero then skip to ELSE/ENDIF
.184b	60		rts				rts 								; else continue.
.184c					_IFSkip:
.184c	a9 d3		lda #$d3			lda	 	#TKW_ELSE 					; test failed, go to ELSE or ENDIF whichever comes first.
.184e	a2 a2		ldx #$a2			ldx 	#TKW_ENDIF
.1850	4c 8f 2b	jmp $2b8f			jmp		ScanForward
.1853					Command_ELSE:
.1853	a2 a2		ldx #$a2			ldx 	#TKW_ENDIF
.1855	8a		txa				txa
.1856	4c 8f 2b	jmp $2b8f			jmp		ScanForward
.1859					Command_ENDIF:
.1859	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/input.asm

=32					MaxInputSize = 32
.0be2					InputBuffer:
>0be2							.fill 	MaxInputSize+1
.185a					Command_Input:
.185a	b1 28		lda ($28),y			lda 	(codePtr),y 			; see what's next.
.185c	c8		iny				iny
.185d	c9 c8		cmp #$c8			cmp 	#TKW_COMMA 				; ignore commas.
.185f	f0 f9		beq $185a			beq 	Command_Input
.1861	88		dey				dey 							; undo consume
.1862	c9 c7		cmp #$c7			cmp 	#TKW_COLON
.1864	f0 54		beq $18ba			beq 	_CIExit 				; : or EOL, exit
.1866	c9 80		cmp #$80			cmp 	#TOK_EOL
.1868	f0 50		beq $18ba			beq 	_CIExit
.186a	c9 40		cmp #$40			cmp 	#$40 					; variable ?
.186c	90 12		bcc $1880			bcc 	_CIVariable
.186e	c9 85		cmp #$85			cmp 	#TOK_STR 				; if not quoted string syntax error.
.1870	d0 43		bne $18b5			bne 	_CISyntax
.1872	a2 00		ldx #$00			ldx 	#0
.1874	20 95 25	jsr $2595			jsr 	EvaluateString 			; evaluate and print string
.1877	20 80 19	jsr $1980			jsr 	TOSToTemp0
.187a	20 2f 1c	jsr $1c2f			jsr 	PrintString
.187d	4c 5a 18	jmp $185a			jmp 	Command_Input
.1880					_CIVariable:
.1880	a2 00		ldx #$00			ldx 	#0 						; evaluate a reference.
.1882	20 d3 25	jsr $25d3			jsr 	EvaluateReference  		; this is where its going
.1885					_CIRetry:
.1885	a9 3f		lda #$3f			lda 	#"?"					; print prompt
.1887	a2 14		ldx #$14		ldx	#20
.1889	20 64 11	jsr $1164		jsr	deviceHandler
.188c	98		tya				tya
.188d	48		pha				pha
.188e	20 ce 18	jsr $18ce			jsr 	InputString 			; input a string (manually)
.1891	a2 01		ldx #$01			ldx 	#1
.1893	20 bb 18	jsr $18bb			jsr 	BufferToStackX 			; make stack,x ref input string.
.1896	a5 40		lda $40				lda 	esType 					; if target type numeric
.1898	29 40		and #$40			and 	#$40 					; then convert to number
.189a	d0 11		bne $18ad			bne 	_CIWrite
.189c	a2 01		ldx #$01			ldx 	#1
.189e	20 80 19	jsr $1980			jsr 	TOSToTemp0 				; string address in temp0, goes here.
.18a1	a9 0a		lda #$0a			lda 	#10
.18a3	20 70 29	jsr $2970			jsr 	MInt32FromString 		; convert it back from a string.
.18a6	68		pla				pla
.18a7	a8		tay				tay
.18a8	b0 03		bcs $18ad			bcs 	_CIWrite 				; successfully converted.
.18aa	18		clc				clc 							; default fail FP conversion
.18ab	90 d8		bcc $1885			bcc		_CIRetry				; failed, try again.
.18ad					_CIWrite:
.18ad	a2 00		ldx #$00			ldx 	#0
.18af	20 1e 19	jsr $191e			jsr 	WriteValue
.18b2	4c 5a 18	jmp $185a			jmp 	Command_Input
.18b5					_CISyntax:
.18b5	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.18b7	20 83 11	jsr $1183		jsr	errorHandler
.18ba					_CIExit:
.18ba	60		rts				rts
.18bb					BufferToStackX:
.18bb	a9 e2		lda #$e2			lda 	#InputBuffer & $FF
.18bd	95 48		sta $48,x			sta 	esInt0,x
.18bf	a9 0b		lda #$0b			lda 	#InputBuffer >> 8
.18c1	95 50		sta $50,x			sta 	esInt1,x
.18c3	a9 00		lda #$00			lda 	#0
.18c5	95 58		sta $58,x			sta 	esInt2,x
.18c7	95 60		sta $60,x			sta 	esInt3,x
.18c9	a9 40		lda #$40			lda 	#$40
.18cb	95 40		sta $40,x			sta 	esType,x
.18cd	60		rts				rts
.18ce					InputString:
.18ce	a9 00		lda #$00			lda 	#0
.18d0	8d e2 0b	sta $0be2			sta 	InputBuffer
.18d3					_InputLoop:
.18d3	a2 0a		ldx #$0a		ldx	#10
.18d5	20 64 11	jsr $1164		jsr	deviceHandler
.18d8	c9 00		cmp #$00			cmp 	#0
.18da	f0 f7		beq $18d3			beq 	_InputLoop
.18dc	c9 08		cmp #$08			cmp 	#8
.18de	f0 19		beq $18f9			beq 	_InputBackspace
.18e0	c9 0d		cmp #$0d			cmp 	#13
.18e2	f0 21		beq $1905			beq 	_InputExit
.18e4	ae e2 0b	ldx $0be2			ldx 	InputBuffer
.18e7	e0 20		cpx #$20			cpx 	#MaxInputSize 			; too many characters
.18e9	f0 e8		beq $18d3			beq 	_InputLoop
.18eb	9d e3 0b	sta $0be3,x			sta 	InputBuffer+1,x 		; write char
.18ee	ee e2 0b	inc $0be2			inc 	InputBuffer 			; advance count.
.18f1					_InputPrintLoop:
.18f1	a2 14		ldx #$14		ldx	#20
.18f3	20 64 11	jsr $1164		jsr	deviceHandler
.18f6	4c d3 18	jmp $18d3			jmp	 	_InputLoop
.18f9					_InputBackspace:
.18f9	ad e2 0b	lda $0be2			lda 	InputBuffer 			; at start
.18fc	f0 d5		beq $18d3			beq 	_InputLoop
.18fe	ce e2 0b	dec $0be2			dec 	InputBuffer
.1901	a9 08		lda #$08			lda 	#8
.1903	d0 ec		bne $18f1			bne 	_InputPrintLoop
.1905					_InputExit:
.1905	a2 04		ldx #$04		ldx	#4
.1907	20 64 11	jsr $1164		jsr	deviceHandler
.190a	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/let.asm

.190b					CommandLet:
.190b	a2 00		ldx #$00			ldx 	#0  						; get address to write.
.190d	20 d3 25	jsr $25d3			jsr 	EvaluateReference
.1910	a9 8d		lda #$8d			lda 	#TKW_EQUAL 					; check for equals
.1912	20 6a 2b	jsr $2b6a			jsr 	CheckToken
.1915	e8		inx				inx 								; do RHS
.1916	20 81 25	jsr $2581			jsr 	Evaluate 					; evaluate and dereference
.1919	ca		dex				dex
.191a	20 1e 19	jsr $191e			jsr 	WriteValue 					; write it out
.191d	60		rts				rts
.191e					WriteValue:
.191e	98		tya				tya
.191f	48		pha				pha
.1920	20 80 19	jsr $1980			jsr 	TOSToTemp0 					; set temp0 to point to target address.
.1923	b5 40		lda $40,x			lda 	esType,x 					; check the string flags match
.1925	55 41		eor $41,x			eor 	esType+1,x 					; one string, one number causes an error.
.1927	29 40		and #$40			and 	#$40
.1929	d0 50		bne $197b			bne		_WVType
.192b	a0 01		ldy #$01			ldy 	#1 							; for string, copy 0 and 1.
.192d	b5 40		lda $40,x			lda 	esType,x 					; check for string assignment
.192f	29 40		and #$40			and 	#$40
.1931	d0 1f		bne $1952			bne 	_WVCopyString
.1933	b5 40		lda $40,x			lda 	esType,x 					; check both are integer.
.1935	15 41		ora $41,x			ora 	esType+1,x
.1937	4a		lsr a				lsr 	a
.1938	90 22		bcc $195c			bcc 	_WVCopyData4 				; copy 4 data bytes.
.193a	b5 40		lda $40,x			lda 	esType,x
.193c	4a		lsr a				lsr 	a
.193d	90 3c		bcc $197b			bcc 	_WVType
.193f	e8		inx				inx 								; force the value being written to be a float.
.1940	20 eb 20	jsr $20eb			jsr 	BPMakeFloat
.1943	ca		dex				dex
.1944	20 80 19	jsr $1980			jsr 	TOSToTemp0 					; set Temp0 to write address
.1947	e8		inx				inx
.1948	8a		txa				txa
.1949	a2 20		ldx #$20		ldx	#32
.194b	20 bb 14	jsr $14bb		jsr	floatingpointHandler
.194e	aa		tax				tax
.194f	4c 78 19	jmp $1978			jmp 	_WVCopyExit
.1952					_WVCopyString:
.1952	8a		txa				txa
.1953	a2 0c		ldx #$0c		ldx	#12
.1955	20 13 2f	jsr $2f13		jsr	stringHandler
.1958	aa		tax				tax
.1959	4c 78 19	jmp $1978			jmp 	_WVCopyExit
.195c					_WVCopyData4:
.195c	b5 40		lda $40,x			lda 	esType,x 					; is the int ref a byte ref ?
.195e	29 20		and #$20			and 	#$20 						; (e.g. is bit 5 set)
.1960	d0 10		bne $1972			bne 	_WVCopyData1
.1962	a0 03		ldy #$03			ldy 	#3
.1964	b5 61		lda $61,x			lda 	esInt3+1,x
.1966	91 2a		sta ($2a),y			sta 	(temp0),y
.1968	88		dey				dey
.1969	b5 59		lda $59,x			lda 	esInt2+1,x
.196b	91 2a		sta ($2a),y			sta 	(temp0),y
.196d	88		dey				dey
.196e	b5 51		lda $51,x			lda 	esInt1+1,x
.1970	91 2a		sta ($2a),y			sta 	(temp0),y
.1972					_WVCopyData1:
.1972	a0 00		ldy #$00			ldy 	#0
.1974	b5 49		lda $49,x			lda 	esInt0+1,x
.1976	91 2a		sta ($2a),y			sta 	(temp0),y
.1978					_WVCopyExit:
.1978	68		pla				pla
.1979	a8		tay				tay
.197a	60		rts				rts
.197b					_WVType:
.197b	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.197d	20 83 11	jsr $1183		jsr	errorHandler
.1980					TOSToTemp0:
.1980	b5 48		lda $48,x			lda 	esInt0,x
.1982	85 2a		sta $2a				sta 	temp0
.1984	b5 50		lda $50,x			lda 	esInt1,x
.1986	85 2b		sta $2b				sta 	temp0+1
.1988	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/list.asm

.1989					CommandList:
.1989	a2 00		ldx #$00			ldx		#0 							; set start/end lines in stack 0/1 to 0 and $FFFF
.198b	20 02 2b	jsr $2b02			jsr 	MInt32False
.198e	e8		inx				inx
.198f	20 fe 2a	jsr $2afe			jsr 	MInt32True
.1992	b1 28		lda ($28),y			lda 	(codePtr),y 				; look at first token
.1994	c9 c8		cmp #$c8			cmp 	#TKW_COMMA 					; list ,xxxx
.1996	f0 15		beq $19ad			beq 	_CLEndLine
.1998	c9 00		cmp #$00			cmp 	#0 							; list ... on its own.
.199a	30 1b		bmi $19b7			bmi 	_CLDoListing 				; do the whole lot.
.199c	a2 00		ldx #$00			ldx 	#0 							; get start line at stack:0
.199e	20 a0 25	jsr $25a0			jsr 	EvaluateInteger
.19a1	b1 28		lda ($28),y			lda 	(codePtr),y 				; , follows ?
.19a3	c9 c8		cmp #$c8			cmp 	#TKW_COMMA
.19a5	f0 06		beq $19ad			beq 	_CLEndLine
.19a7	20 40 2a	jsr $2a40			jsr 	MInt32CopyUp 				; copy first to second if just a line number on its
.19aa	4c b7 19	jmp $19b7			jmp 	_CLDoListing 				; own e.g. list 1100
.19ad					_CLEndLine:
.19ad	c8		iny				iny 								; skip comma
.19ae	b1 28		lda ($28),y			lda 	(codePtr),y  				; no number follows, then its list 1000,
.19b0	30 05		bmi $19b7			bmi 	_CLDoListing
.19b2	a2 01		ldx #$01			ldx 	#1 							; get the last line to list
.19b4	20 a0 25	jsr $25a0			jsr 	EvaluateInteger				; get end
.19b7					_CLDoListing:
.19b7	20 f5 1d	jsr $1df5			jsr 	ResetCodeAddress 			; back to the start.
.19ba					_CLCheckLoop:
.19ba	a2 00		ldx #$00		ldx	#0
.19bc	20 64 11	jsr $1164		jsr	deviceHandler
.19bf	a0 00		ldy #$00			ldy 	#0							; check end.
.19c1	b1 28		lda ($28),y			lda 	(codePtr),y
.19c3	f0 26		beq $19eb			beq 	_CLEnd
.19c5	a2 00		ldx #$00			ldx 	#0 							; compare vs lower.
.19c7	20 ee 19	jsr $19ee			jsr 	CLCompareLineTOS
.19ca	c9 ff		cmp #$ff			cmp 	#255 						; if < skip
.19cc	f0 0d		beq $19db			beq 	_CLNext
.19ce	e8		inx				inx
.19cf	20 ee 19	jsr $19ee			jsr 	CLCompareLineTOS 			; compare vs higher
.19d2	c9 01		cmp #$01			cmp 	#1
.19d4	f0 05		beq $19db			beq 	_CLNext
.19d6	a2 02		ldx #$02		ldx	#2
.19d8	20 df 35	jsr $35df		jsr	tokeniserHandler
.19db					_CLNext:
.19db	a0 00		ldy #$00			ldy 	#0 							; go to next line.
.19dd	b1 28		lda ($28),y			lda 	(codePtr),y
.19df	18		clc				clc
.19e0	65 28		adc $28				adc 	codePtr
.19e2	85 28		sta $28				sta 	codePtr
.19e4	90 d4		bcc $19ba			bcc 	_CLCheckLoop
.19e6	e6 29		inc $29				inc 	codePtr+1
.19e8	4c ba 19	jmp $19ba			jmp 	_CLCheckLoop
.19eb					_CLEnd:
.19eb	4c 5f 2c	jmp $2c5f			jmp 	WarmStart 					; warm start after list.
.19ee					CLCompareLineTOS:
.19ee	a0 01		ldy #$01			ldy 	#1
.19f0	b1 28		lda ($28),y			lda 	(codePtr),y
.19f2	55 48		eor $48,x			eor 	esInt0,x
.19f4	85 2a		sta $2a				sta 	temp0
.19f6	c8		iny				iny
.19f7	b1 28		lda ($28),y			lda 	(codePtr),y
.19f9	55 50		eor $50,x			eor 	esInt1,x
.19fb	05 2a		ora $2a				ora 	temp0
.19fd	f0 10		beq $1a0f			beq 	_CLCLTExit
.19ff	88		dey				dey
.1a00	b1 28		lda ($28),y			lda 	(codePtr),y
.1a02	d5 48		cmp $48,x			cmp 	esInt0,x
.1a04	c8		iny				iny
.1a05	b1 28		lda ($28),y			lda 	(codePtr),y
.1a07	f5 50		sbc $50,x			sbc 	esInt1,x
.1a09	a9 ff		lda #$ff			lda 	#255
.1a0b	90 02		bcc $1a0f			bcc 	_CLCLTExit
.1a0d	a9 01		lda #$01			lda 	#1
.1a0f					_CLCLTExit:
.1a0f	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/loadsave.asm

.1a10					CommandLoad:
.1a10	20 38 1a	jsr $1a38			jsr 	CLSParameters 					; get parameters for load.
.1a13	08		php				php
.1a14	a2 0e		ldx #$0e		ldx	#14
.1a16	20 64 11	jsr $1164		jsr	deviceHandler
.1a19	28		plp				plp
.1a1a	b0 08		bcs $1a24			bcs 	_CLExit 						; if CC then load a program, so warm start.
.1a1c	20 a2 16	jsr $16a2			jsr 	CommandClear
.1a1f	a2 02		ldx #$02		ldx	#2
.1a21	20 8d 16	jsr $168d		jsr	interactionHandler
.1a24					_CLExit
.1a24	60		rts				rts
.1a25					CommandSave:
.1a25	20 38 1a	jsr $1a38			jsr 	CLSParameters					; get parameters for save
.1a28	90 08		bcc $1a32			bcc 	_CSNoOverrideAddress
.1a2a	20 82 2b	jsr $2b82			jsr 	CheckComma 						; should be a comma.
.1a2d	a2 02		ldx #$02			ldx 	#2
.1a2f	20 a0 25	jsr $25a0			jsr 	EvaluateInteger 				; get save end address.
.1a32					_CSNoOverrideAddress:
.1a32	a2 16		ldx #$16		ldx	#22
.1a34	20 64 11	jsr $1164		jsr	deviceHandler
.1a37	60		rts				rts
.1a38					CLSParameters:
.1a38	a2 00		ldx #$00			ldx 	#0 								; string
.1a3a	20 95 25	jsr $2595			jsr 	EvaluateString
.1a3d	e8		inx				inx 									; erase out +1 +2
.1a3e	20 02 2b	jsr $2b02			jsr 	MInt32False
.1a41	e8		inx				inx
.1a42	20 02 2b	jsr $2b02			jsr 	MInt32False
.1a45	ad c8 0a	lda $0ac8			lda 	basePage 						; default start address.
.1a48	85 49		sta $49				sta 	esInt0+1
.1a4a	ad c9 0a	lda $0ac9			lda 	basePage+1
.1a4d	85 51		sta $51				sta 	esInt1+1
.1a4f	ad ca 0a	lda $0aca			lda 	endProgram 						; default end address
.1a52	85 4a		sta $4a				sta 	esInt0+2
.1a54	ad cb 0a	lda $0acb			lda 	endProgram+1
.1a57	85 52		sta $52				sta 	esInt1+2
.1a59	b1 28		lda ($28),y			lda 	(codePtr),y 					; , following
.1a5b	c9 c8		cmp #$c8			cmp 	#TKW_COMMA
.1a5d	d0 08		bne $1a67			bne 	_CLSDefault
.1a5f	c8		iny				iny 									; skip comma
.1a60	a2 01		ldx #$01			ldx 	#1 								; get numeric value.
.1a62	20 a0 25	jsr $25a0			jsr 	EvaluateInteger
.1a65	38		sec				sec
.1a66	60		rts				rts
.1a67					_CLSDefault:
.1a67	18		clc				clc
.1a68	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/local.asm

.0c03					storeSize:
>0c03							.fill 	1
.1a69					CommandLocal:
.1a69	a2 00		ldx #$00			ldx 	#0
.1a6b	20 87 1a	jsr $1a87			jsr 	LocaliseVariable 			; localise one.
.1a6e					_CLCheckNext:
.1a6e	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows ?
.1a70	c8		iny				iny
.1a71	c9 8d		cmp #$8d			cmp 	#TKW_EQUAL 					; something local "x = 2" ?
.1a73	f0 06		beq $1a7b			beq 	_CLAssignment
.1a75	c9 c8		cmp #$c8			cmp 	#TKW_COMMA 					; comma try again.
.1a77	f0 f0		beq $1a69			beq 	CommandLocal
.1a79	88		dey				dey
.1a7a	60		rts				rts
.1a7b					_CLAssignment:
.1a7b	a2 01		ldx #$01			ldx 	#1
.1a7d	20 81 25	jsr $2581			jsr 	Evaluate 					; evaluate RHS
.1a80	ca		dex				dex
.1a81	20 1e 19	jsr $191e			jsr 	WriteValue
.1a84	4c 6e 1a	jmp $1a6e			jmp 	_CLCheckNext
.1a87					LocaliseVariable:
.1a87	b1 28		lda ($28),y			lda 	(codePtr),y 				; check it's a variable.
.1a89	c9 40		cmp #$40			cmp 	#$40
.1a8b	b0 67		bcs $1af4			bcs 	_LVSyntax
.1a8d	8a		txa				txa 								; get the address of that variable.
.1a8e	a2 00		ldx #$00		ldx	#0
.1a90	20 da 38	jsr $38da		jsr	variableHandler
.1a93	aa		tax				tax
.1a94	8a		txa				txa
.1a95	48		pha				pha
.1a96	98		tya				tya
.1a97	48		pha				pha
.1a98	20 80 19	jsr $1980			jsr 	TOSToTemp0 					; the address of the variable is now in temp0.
.1a9b	b5 40		lda $40,x			lda 	esType,x 					; get the type
.1a9d	0a		asl a				asl 	a
.1a9e	10 16		bpl $1ab6			bpl 	_LVPushNumber
.1aa0	a0 00		ldy #$00			ldy 	#0 							; put address of data in temp1
.1aa2	b1 2a		lda ($2a),y			lda 	(temp0),y
.1aa4	c8		iny				iny
.1aa5	85 2c		sta $2c				sta 	temp1
.1aa7	b1 2a		lda ($2a),y			lda 	(temp0),y
.1aa9	85 2d		sta $2d				sta 	temp1+1
.1aab	a0 00		ldy #$00			ldy 	#0 	 						; get length
.1aad	b1 2c		lda ($2c),y			lda 	(temp1),y
.1aaf	aa		tax				tax 								; into X
.1ab0	e8		inx				inx 								; +1 for length.
.1ab1	a9 24		lda #$24			lda 	#markerString
.1ab3	4c cb 1a	jmp $1acb			jmp 	_LVWriteFrame
.1ab6					_LVPushNumber:
.1ab6	a5 2a		lda $2a				lda 	temp0 						; storage address and data source are the same
.1ab8	85 2c		sta $2c				sta 	temp1
.1aba	a5 2b		lda $2b				lda 	temp0+1
.1abc	85 2d		sta $2d				sta 	temp1+1
.1abe	b5 40		lda $40,x			lda 	esType,x 					; put float flag into carry.
.1ac0	4a		lsr a				lsr 	a
.1ac1	a9 25		lda #$25			lda 	#markerInt 					; get marker and size.
.1ac3	a2 04		ldx #$04			ldx 	#VarISize
.1ac5	90 04		bcc $1acb			bcc 	_LVIsInteger
.1ac7	a9 23		lda #$23			lda 	#markerFloat
.1ac9	a2 06		ldx #$06			ldx 	#VarFSize
.1acb					_LVIsInteger:
.1acb					_LVWriteFrame:
.1acb	8e 03 0c	stx $0c03			stx 	storeSize 					; number of bytes to copy from (temp0)
.1ace	e8		inx				inx 								; allocate 3 bytes, 2 for the address, 1 for the marker.
.1acf	e8		inx				inx
.1ad0	e8		inx				inx
.1ad1	20 11 2c	jsr $2c11			jsr 	RSClaim 					; create the stack frame.
.1ad4	a5 2a		lda $2a				lda 	temp0 						; copy the target address to slots 1 & 2
.1ad6	a0 01		ldy #$01			ldy 	#1
.1ad8	91 78		sta ($78),y			sta 	(rsPointer),y
.1ada	c8		iny				iny
.1adb	a5 2b		lda $2b				lda 	temp0+1
.1add	91 78		sta ($78),y			sta 	(rsPointer),y
.1adf	a0 00		ldy #$00			ldy 	#0
.1ae1					_LVCopyData:
.1ae1	b1 2c		lda ($2c),y			lda 	(temp1),y 					; get data from source, temp1
.1ae3	c8		iny				iny 								; write allowing for the header bit.
.1ae4	c8		iny				iny
.1ae5	c8		iny				iny
.1ae6	91 78		sta ($78),y			sta 	(rsPointer),y
.1ae8	88		dey				dey
.1ae9	88		dey				dey
.1aea	ce 03 0c	dec $0c03			dec 	storeSize 					; do it storesize times
.1aed	d0 f2		bne $1ae1			bne 	_LVCopyData
.1aef	68		pla				pla
.1af0	a8		tay				tay
.1af1	68		pla				pla
.1af2	aa		tax				tax
.1af3	60		rts				rts
.1af4					_LVSyntax:
.1af4	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.1af6	20 83 11	jsr $1183		jsr	errorHandler
.1af9					RestoreLocals:
.1af9	a2 00		ldx #$00			ldx 	#0
.1afb	a1 78		lda ($78,x)			lda 	(rsPointer,x)
.1afd	c9 40		cmp #$40			cmp	 	#64
.1aff	90 01		bcc $1b02			bcc 	_RLocal
.1b01	60		rts				rts
.1b02					_RLocal:
.1b02	8a		txa				txa
.1b03	48		pha				pha
.1b04	98		tya				tya
.1b05	48		pha				pha
.1b06	a0 01		ldy #$01			ldy 	#1 							; copy target address to temp0
.1b08	b1 78		lda ($78),y			lda 	(rsPointer),y
.1b0a	85 2a		sta $2a				sta 	temp0
.1b0c	c8		iny				iny
.1b0d	b1 78		lda ($78),y			lda 	(rsPointer),y
.1b0f	85 2b		sta $2b				sta 	temp0+1
.1b11	a0 00		ldy #$00			ldy 	#0 							; get type back.
.1b13	b1 78		lda ($78),y			lda 	(rsPointer),y
.1b15	c9 24		cmp #$24			cmp 	#markerString 				; string is ... different :)
.1b17	f0 28		beq $1b41			beq 	_RString
.1b19	a2 04		ldx #$04			ldx		#VARISize 					; size integer
.1b1b	c9 25		cmp #$25			cmp 	#markerInt
.1b1d	f0 02		beq $1b21			beq 	_RIsInteger
.1b1f	a2 06		ldx #$06			ldx 	#VARFSize 					; size float
.1b21					_RIsInteger:
.1b21	8a		txa				txa
.1b22	48		pha				pha
.1b23	a0 03		ldy #$03			ldy 	#3							; start size to copy back from pointer.
.1b25					_RCopyBack:
.1b25	b1 78		lda ($78),y			lda 	(rsPointer),y
.1b27	88		dey				dey
.1b28	88		dey				dey
.1b29	88		dey				dey
.1b2a	91 2a		sta ($2a),y			sta 	(temp0),y
.1b2c	c8		iny				iny
.1b2d	c8		iny				iny
.1b2e	c8		iny				iny
.1b2f	c8		iny				iny
.1b30	ca		dex				dex
.1b31	d0 f2		bne $1b25			bne 	_RCopyBack
.1b33	68		pla				pla 								; get size add 3
.1b34	18		clc				clc
.1b35	69 03		adc #$03			adc 	#3 							; (2 for address one for marker)
.1b37					_RRestoreAAndLoop:
.1b37	20 33 2c	jsr $2c33			jsr 	RSFree
.1b3a	68		pla				pla
.1b3b	a8		tay				tay
.1b3c	68		pla				pla
.1b3d	aa		tax				tax
.1b3e	4c f9 1a	jmp $1af9			jmp 	RestoreLocals 				; go see if there are any more locals.
.1b41					_RString:
.1b41	a2 00		ldx #$00			ldx 	#0
.1b43	a0 01		ldy #$01			ldy 	#1 							; set up for a string write.
.1b45	b1 78		lda ($78),y			lda 	(rsPointer),y
.1b47	95 48		sta $48,x			sta 	esInt0,x
.1b49	c8		iny				iny
.1b4a	b1 78		lda ($78),y			lda 	(rsPointer),y
.1b4c	95 50		sta $50,x			sta 	esInt1,x
.1b4e	18		clc				clc
.1b4f	a5 78		lda $78				lda 	rsPointer
.1b51	69 03		adc #$03			adc 	#3
.1b53	95 49		sta $49,x			sta 	esInt0+1,x
.1b55	a5 79		lda $79				lda 	rsPointer+1
.1b57	69 00		adc #$00			adc 	#0
.1b59	95 51		sta $51,x			sta 	esInt1+1,x
.1b5b	8a		txa				txa
.1b5c	a2 0c		ldx #$0c		ldx	#12
.1b5e	20 13 2f	jsr $2f13		jsr	stringHandler
.1b61	a0 03		ldy #$03			ldy 	#3 							; get string length
.1b63	b1 78		lda ($78),y			lda 	(rsPointer),y
.1b65	18		clc				clc
.1b66	69 04		adc #$04			adc 	#4 							; add 4 (pointer, marker, length) to restore.
.1b68	4c 37 1b	jmp $1b37			jmp 	_RRestoreAAndLoop

;******  Return to file: main/main.asm


;******  Processing file: main/commands/new.asm

.1b6b					Command_New:
.1b6b					Command_XNew:
.1b6b	20 f5 1d	jsr $1df5			jsr 	ResetCodeAddress 			; point to first line
.1b6e	a0 00		ldy #$00			ldy 	#0 							; and zap it.
.1b70	98		tya				tya
.1b71	91 28		sta ($28),y			sta 	(codePtr),y
.1b73	20 a2 16	jsr $16a2			jsr 	CommandClear 				; clear everything down.
.1b76	4c c3 1f	jmp $1fc3			jmp 	CommandEND 					; do END code, as there's nothing to run.

;******  Return to file: main/main.asm


;******  Processing file: main/commands/poke.asm

.1b79					Command_Poke:
.1b79	a9 01		lda #$01			lda 	#1
.1b7b	d0 06		bne $1b83			bne 	PokeGeneral
.1b7d					Command_Doke:
.1b7d	a9 02		lda #$02			lda 	#2
.1b7f	d0 02		bne $1b83			bne 	PokeGeneral
.1b81					Command_Loke:
.1b81	a9 03		lda #$03			lda 	#3
.1b83					PokeGeneral:
.1b83	48		pha				pha 								; save id (PDL = 123)
.1b84	20 9e 25	jsr $259e			jsr 	EvaluateRootInteger 		; target address
.1b87	20 82 2b	jsr $2b82			jsr	 	CheckComma
.1b8a	e8		inx				inx
.1b8b	20 a0 25	jsr $25a0			jsr 	EvaluateInteger 			; what value to POKE ?
.1b8e	ca		dex				dex
.1b8f	20 80 19	jsr $1980			jsr 	TOSToTemp0 					; temp0 points to the target address
.1b92	84 32		sty $32				sty 	tempShort 					; save Y
.1b94	68		pla				pla 								; get copy type (1-3) and dispatch
.1b95	aa		tax				tax
.1b96	ca		dex				dex
.1b97	f0 14		beq $1bad			beq 	_Poke1
.1b99	ca		dex				dex
.1b9a	f0 0b		beq $1ba7			beq 	_Poke2
.1b9c	a0 03		ldy #$03			ldy 	#3							; put 4 bytes
.1b9e	a5 61		lda $61				lda 	esInt3+1
.1ba0	91 2a		sta ($2a),y			sta 	(temp0),y
.1ba2	88		dey				dey
.1ba3	a5 59		lda $59				lda 	esInt2+1
.1ba5	91 2a		sta ($2a),y			sta 	(temp0),y
.1ba7					_Poke2:
.1ba7	a0 01		ldy #$01			ldy 	#1
.1ba9	a5 51		lda $51				lda 	esInt1+1
.1bab	91 2a		sta ($2a),y			sta 	(temp0),y
.1bad					_Poke1:
.1bad	a0 00		ldy #$00			ldy 	#0
.1baf	a5 49		lda $49				lda 	esInt0+1
.1bb1	91 2a		sta ($2a),y			sta 	(temp0),y
.1bb3	a4 32		ldy $32				ldy 	tempShort 					; restore Y and exit
.1bb5	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/print.asm

.0c04					lastPrintToken:
>0c04							.fill 	1
.1bb6					Command_Print:
.1bb6	a9 00		lda #$00			lda 	#0 							; clear LPT to a non token
.1bb8	8d 04 0c	sta $0c04			sta 	lastPrintToken
.1bbb	88		dey				dey
.1bbc					_PrintLoopSkip:
.1bbc	c8		iny				iny
.1bbd					_PrintLoop:
.1bbd	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows
.1bbf	c9 80		cmp #$80			cmp 	#TOK_EOL  					; done if end of line or colon
.1bc1	f0 5b		beq $1c1e			beq 	_PrintExit
.1bc3	c9 c7		cmp #$c7			cmp 	#TKW_COLON
.1bc5	f0 57		beq $1c1e			beq 	_PrintExit
.1bc7	8d 04 0c	sta $0c04			sta 	lastPrintToken 				; update Last print token, so we check ; and ,
.1bca	c9 c9		cmp #$c9			cmp 	#TKW_SEMICOLON 				; ignore semicolon
.1bcc	f0 ee		beq $1bbc			beq 	_PrintLoopSkip
.1bce	c9 ca		cmp #$ca			cmp 	#TKW_QUOTE 					; ' is new line
.1bd0	f0 3c		beq $1c0e			beq	 	_PrintNewLine
.1bd2	c9 c8		cmp #$c8			cmp 	#TKW_COMMA 					; , is print tab
.1bd4	f0 40		beq $1c16			beq 	_PrintTab
.1bd6	20 7f 25	jsr $257f			jsr 	EvaluateRoot 				; evaluate something at the root
.1bd9	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.1bdb	85 2a		sta $2a				sta 	temp0
.1bdd	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.1bdf	85 2b		sta $2b				sta 	1+(temp0)
.1be1	a5 40		lda $40				lda 	esType 						; get type
.1be3	f0 15		beq $1bfa			beq		_PrintInteger
.1be5	4a		lsr a				lsr 	a 							; check for floating point
.1be6	b0 08		bcs $1bf0			bcs 	_PrintFloat
.1be8					_PrintString:
.1be8	a2 00		ldx #$00			ldx 	#0 							; bottom string to temp0
.1bea	20 80 19	jsr $1980			jsr 	TOSToTemp0
.1bed	4c 08 1c	jmp $1c08			jmp 	_PrintTemp0 				; print no leading space.
.1bf0					_PrintFloat:
.1bf0	a9 00		lda #$00			lda 	#0 							; stack level.
.1bf2	a2 14		ldx #$14		ldx	#20
.1bf4	20 bb 14	jsr $14bb		jsr	floatingpointHandler
.1bf7	4c 01 1c	jmp $1c01			jmp 	_PrintSpaceTemp0
.1bfa					_PrintInteger:
.1bfa	a9 8a		lda #$8a			lda 	#10+$80 					; base 10 signed
.1bfc	a2 00		ldx #$00			ldx 	#0 							; bottom stack element
.1bfe	20 58 2a	jsr $2a58			jsr 	MInt32ToString				; convert to text
.1c01					_PrintSpaceTemp0:
.1c01	a9 20		lda #$20			lda 	#32
.1c03	a2 14		ldx #$14		ldx	#20
.1c05	20 64 11	jsr $1164		jsr	deviceHandler
.1c08					_PrintTemp0:
.1c08	20 2f 1c	jsr $1c2f			jsr 	PrintString
.1c0b	4c bd 1b	jmp $1bbd			jmp 	_PrintLoop
.1c0e					_PrintNewLine:
.1c0e	a2 04		ldx #$04		ldx	#4
.1c10	20 64 11	jsr $1164		jsr	deviceHandler
.1c13	4c bc 1b	jmp $1bbc			jmp 	_PrintLoopSkip
.1c16					_PrintTab:
.1c16	a2 18		ldx #$18		ldx	#24
.1c18	20 64 11	jsr $1164		jsr	deviceHandler
.1c1b	4c bc 1b	jmp $1bbc			jmp 	_PrintLoopSkip
.1c1e					_PrintExit:
.1c1e	ad 04 0c	lda $0c04			lda		lastPrintToken 				; check last token
.1c21	c9 c9		cmp #$c9			cmp 	#TKW_SEMICOLON 				; if , or ; do not print NL
.1c23	f0 09		beq $1c2e			beq 	_PrintExit2
.1c25	c9 c8		cmp #$c8			cmp 	#TKW_COMMA
.1c27	f0 05		beq $1c2e			beq 	_PrintExit2
.1c29	a2 04		ldx #$04		ldx	#4
.1c2b	20 64 11	jsr $1164		jsr	deviceHandler
.1c2e					_PrintExit2:
.1c2e	60		rts				rts
.1c2f					PrintString:
.1c2f	8a		txa				txa
.1c30	48		pha				pha
.1c31	98		tya				tya
.1c32	48		pha				pha
.1c33	a0 00		ldy #$00			ldy 	#0							; get length
.1c35	b1 2a		lda ($2a),y			lda 	(temp0),y
.1c37	aa		tax				tax 								; into X
.1c38	e0 00		cpx #$00	_PSLoop:cpx 	#0 							; finished ?
.1c3a	f0 10		beq $1c4c			beq 	_PSExit
.1c3c	ca		dex				dex
.1c3d	8a		txa				txa
.1c3e	48		pha				pha
.1c3f	c8		iny				iny
.1c40	b1 2a		lda ($2a),y			lda 	(temp0),y
.1c42	a2 14		ldx #$14		ldx	#20
.1c44	20 64 11	jsr $1164		jsr	deviceHandler
.1c47	68		pla				pla
.1c48	aa		tax				tax
.1c49	4c 38 1c	jmp $1c38			jmp 	_PSLoop
.1c4c					_PSExit:
.1c4c	68		pla				pla
.1c4d	a8		tay				tay
.1c4e	68		pla				pla
.1c4f	aa		tax				tax
.1c50	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/proc.asm

.0c05					paramCount:
>0c05							.fill 	1
.1c51					CallProc:
.1c51	20 e8 1e	jsr $1ee8			jsr 	FindProcedure 				; find procedure, put in temp0. A contains name length.
.1c54	48		pha				pha 								; save length on stack
.1c55	85 32		sta $32				sta 	tempShort 					; save length in tempShort
.1c57	a5 2b		lda $2b				lda 	temp0+1 					; save procedure target on stack.
.1c59	48		pha				pha
.1c5a	a5 2a		lda $2a				lda 	temp0
.1c5c	48		pha				pha
.1c5d	98		tya				tya 								; calculate Y + length
.1c5e	18		clc				clc
.1c5f	65 32		adc $32				adc 	tempShort
.1c61	a8		tay				tay
.1c62	a2 00		ldx #$00			ldx 	#0 							; where the first parameter goes - 1
.1c64					_CallProcEvalParams:
.1c64	e8		inx				inx
.1c65	b1 28		lda ($28),y			lda 	(codePtr),y 				; do we have ) , e.g. the end of the parameters ?
.1c67	c9 c6		cmp #$c6			cmp 	#TKW_RPAREN
.1c69	f0 0b		beq $1c76			beq 	_CPDoneParams
.1c6b	20 81 25	jsr $2581			jsr 	Evaluate 					; evaluate a parameter
.1c6e	b1 28		lda ($28),y			lda 	(codePtr),Y 				; get what's next, preconsume
.1c70	c8		iny				iny
.1c71	c9 c8		cmp #$c8			cmp 	#TKW_COMMA 					; if comma, go get another parameter
.1c73	f0 ef		beq $1c64			beq 	_CallProcEvalParams
.1c75	88		dey				dey 								; undo consumption.
.1c76					_CPDoneParams:
.1c76	20 75 2b	jsr $2b75			jsr 	CheckRightParen 			; check closing parenthesis.
.1c79	8e 05 0c	stx $0c05			stx 	paramCount 					; store parameter count+1
.1c7c	a2 04		ldx #$04			ldx 	#4							; make space on stack
.1c7e	a9 50		lda #$50			lda 	#markerPROC
.1c80	20 11 2c	jsr $2c11			jsr 	RSClaim
.1c83	a9 01		lda #$01			lda 	#1 							; store return address.
.1c85	20 3d 2c	jsr $2c3d			jsr 	RSSavePosition
.1c88	68		pla				pla 								; get the new code Ptr
.1c89	85 28		sta $28				sta 	codePtr
.1c8b	68		pla				pla
.1c8c	85 29		sta $29				sta 	codePtr+1
.1c8e	68		pla				pla 								; length of name + 4 is the param start.
.1c8f	18		clc				clc
.1c90	69 04		adc #$04			adc 	#4
.1c92	a8		tay				tay
.1c93	a2 ff		ldx #$ff			ldx 	#$FF
.1c95					_CPLoadParameters:
.1c95	e8		inx				inx 								; point to where the address should be loaded.
.1c96	ec 05 0c	cpx $0c05			cpx 	paramCount 					; too many parameters in definition ?
.1c99	f0 1e		beq $1cb9			beq 	_CPParamError
.1c9b	b1 28		lda ($28),y			lda 	(codePtr),y					; what follows
.1c9d	c9 c6		cmp #$c6			cmp 	#TKW_RPAREN 				; is it the right bracket
.1c9f	f0 0e		beq $1caf			beq 	_CPParamComplete 			; done all the parameters, perhaps.
.1ca1	20 87 1a	jsr $1a87			jsr 	LocaliseVariable 			; make following variable local, ref in tos,x
.1ca4	20 1e 19	jsr $191e			jsr 	WriteValue 					; copy the evaluated parameter into there.
.1ca7	b1 28		lda ($28),y			lda 	(codePtr),y 				; followed by a comma ?
.1ca9	c8		iny				iny
.1caa	c9 c8		cmp #$c8			cmp 	#TKW_COMMA
.1cac	f0 e7		beq $1c95			beq 	_CPLoadParameters
.1cae	88		dey				dey 								; no, unconsume and check for )
.1caf					_CPParamComplete:
.1caf	20 75 2b	jsr $2b75			jsr 	CheckRightParen 			; check )
.1cb2	e8		inx				inx 								; check right number of parameters have been consumed
.1cb3	ec 05 0c	cpx $0c05			cpx 	paramCount
.1cb6	d0 01		bne $1cb9			bne 	_CPParamError
.1cb8	60		rts				rts
.1cb9					_CPParamError:
.1cb9	a2 18		ldx #$18			ldx 	#ErrorID_Params
.1cbb	20 83 11	jsr $1183		jsr	errorHandler
.1cbe					ReturnProc:
.1cbe	20 f9 1a	jsr $1af9			jsr 	RestoreLocals 				; get the locals back.
.1cc1	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.1cc3	a1 78		lda ($78,x)			lda 	(rsPointer,x)
.1cc5	c9 50		cmp #$50			cmp 	#markerPROC 						; does it match
.1cc7	f0 05		beq $1cce			beq 	_isok
.1cc9	a2 12		ldx #$12			ldx 	#ErrorID_endProcErr
.1ccb	20 83 11	jsr $1183		jsr	errorHandler
.1cce					_isok:
.1cce	a9 01		lda #$01			lda 	#1
.1cd0	20 50 2c	jsr $2c50			jsr 	RSLoadPosition 				; reload the position from offset 1.
.1cd3	a9 04		lda #$04			lda 	#4 							; throw 4 bytes from stack.
.1cd5	20 33 2c	jsr $2c33			jsr 	RSFree
.1cd8	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/readdata.asm

.0c06					dataPtr:
>0c06							.fill 	2
.0c08					dataIndex:
>0c08							.fill 	1
.1cd9					CommandRead:
.1cd9	a2 00		ldx #$00			ldx 	#0 							; get a reference to a variable in stack:0
.1cdb	20 d3 25	jsr $25d3			jsr 	EvaluateReference
.1cde	20 1f 1d	jsr $1d1f			jsr 	SwapDPCP 					; use the data pointer.
.1ce1	b1 28		lda ($28),y			lda 	(codePtr),y 				; see where it is.
.1ce3	c8		iny				iny
.1ce4	c9 c8		cmp #$c8			cmp 	#TKW_COMMA 					; if it is on a comma, it is in data.
.1ce6	f0 07		beq $1cef			beq 	_CRInData
.1ce8	88		dey				dey
.1ce9	a9 d9		lda #$d9			lda 	#TKW_DATA 					; scan forward to a DATA statement.
.1ceb	aa		tax				tax
.1cec	20 8f 2b	jsr $2b8f			jsr 	ScanForward
.1cef					_CRInData:
.1cef	a2 01		ldx #$01			ldx 	#1 							; evaluate a value at Stack,1
.1cf1	20 81 25	jsr $2581			jsr 	Evaluate
.1cf4	ca		dex				dex 								; and write the value.
.1cf5	20 1e 19	jsr $191e			jsr 	WriteValue
.1cf8	20 1f 1d	jsr $1d1f			jsr 	SwapDPCP 					; get the code pointer back.
.1cfb	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows ?
.1cfd	c8		iny				iny
.1cfe	c9 c8		cmp #$c8			cmp 	#TKW_COMMA 					; if comma, another variable
.1d00	f0 d7		beq $1cd9			beq 	CommandRead
.1d02	88		dey				dey
.1d03	60		rts				rts
.1d04					CommandData:
.1d04	a9 80		lda #$80			lda 	#TOK_EOL 					; go forward to end of line or colon.
.1d06	a2 c7		ldx #$c7			ldx 	#TKW_COLON
.1d08	20 8f 2b	jsr $2b8f			jsr 	ScanForward
.1d0b	88		dey				dey 								; ending on EOL is a scan issue, as it increments
.1d0c	60		rts				rts
.1d0d					CommandRestore:
.1d0d	ad c8 0a	lda $0ac8			lda 	basePage
.1d10	8d 06 0c	sta $0c06			sta 	dataPtr
.1d13	ad c9 0a	lda $0ac9			lda 	basePage+1
.1d16	8d 07 0c	sta $0c07			sta 	dataPtr+1
.1d19	a9 03		lda #$03			lda 	#3
.1d1b	8d 08 0c	sta $0c08			sta 	dataIndex
.1d1e	60		rts				rts
.1d1f					SwapDPCP:
.1d1f	8a		txa				txa
.1d20	48		pha				pha
.1d21	98		tya				tya 								; swap Y, DataIndex
.1d22	ac 08 0c	ldy $0c08			ldy 	DataIndex
.1d25	8d 08 0c	sta $0c08			sta 	DataIndex
.1d28	a5 28		lda $28				lda 	codePtr 					; swap code/dataptr low
.1d2a	ae 06 0c	ldx $0c06			ldx 	dataptr
.1d2d	8d 06 0c	sta $0c06			sta 	dataPtr
.1d30	86 28		stx $28				stx 	codePtr
.1d32	a5 29		lda $29				lda 	codePtr+1 					; swap code/dataptr high.
.1d34	ae 07 0c	ldx $0c07			ldx 	dataptr+1
.1d37	8d 07 0c	sta $0c07			sta 	dataPtr+1
.1d3a	86 29		stx $29				stx 	codePtr+1
.1d3c	68		pla				pla
.1d3d	aa		tax				tax
.1d3e	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/rem.asm

.1d3f					Command_Rem:
.1d3f					Command_Rem2:
.1d3f	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows
.1d41	c9 85		cmp #$85			cmp 	#TOK_STR 					; if it is a string then skip it.
.1d43	d0 06		bne $1d4b			bne 	_CRNotString
.1d45	c8		iny				iny
.1d46	98		tya				tya
.1d47	38		sec				sec
.1d48	71 28		adc ($28),y			adc 	(codePtr),y 				; get string size, add to Y, +1 for the length
.1d4a	a8		tay				tay
.1d4b					_CRNotString:
.1d4b	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/repeat.asm

.1d4c					Command_Repeat:
.1d4c	a2 04		ldx #$04			ldx 	#4 							; allocate 4 bytes on stack for REPEAT
.1d4e	a9 52		lda #$52			lda 	#markerREPEAT 				; repeat marker allocate 4 bytes
.1d50	20 11 2c	jsr $2c11			jsr 	RSClaim
.1d53	a9 01		lda #$01			lda 	#1 							; save position at offset 1.
.1d55	20 3d 2c	jsr $2c3d			jsr 	RSSavePosition
.1d58	60		rts				rts
.1d59					Command_Until:
.1d59	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.1d5b	a1 78		lda ($78,x)			lda 	(rsPointer,x)
.1d5d	c9 52		cmp #$52			cmp 	#markerREPEAT 						; does it match
.1d5f	f0 05		beq $1d66			beq 	_isok
.1d61	a2 0f		ldx #$0f			ldx 	#ErrorID_untilErr
.1d63	20 83 11	jsr $1183		jsr	errorHandler
.1d66					_isok:
.1d66	20 9e 25	jsr $259e			jsr 	EvaluateRootInteger 		; at the bottom.
.1d69	20 29 2b	jsr $2b29			jsr 	MInt32Zero					; check if TOS zero
.1d6c	d0 06		bne $1d74			bne 	_CUExit
.1d6e	a9 01		lda #$01			lda 	#1
.1d70	20 50 2c	jsr $2c50			jsr 	RSLoadPosition 				; reload the position from offset 1.
.1d73	60		rts				rts
.1d74					_CUExit:
.1d74	a9 04		lda #$04			lda 	#4 							; throw 4 bytes from stack.
.1d76	20 33 2c	jsr $2c33			jsr 	RSFree
.1d79	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/run.asm

.0c09					breakCounter:
>0c09								.fill 	1
.0c0a					breakIncrement:
>0c0a								.fill 	1
.1d7a					Command_Run:
.1d7a					XCommand_Run:
.1d7a	a2 ff		ldx #$ff			ldx 	#$FF 						; reset the stack.
.1d7c	9a		txs				txs
.1d7d	20 ef 1d	jsr $1def			jsr 	BreakOn 					; turn break on
.1d80	20 a2 16	jsr $16a2			jsr 	CommandClear 				; clear everything.
.1d83	20 f5 1d	jsr $1df5			jsr 	ResetCodeAddress 			; back to the start.
.1d86					Command_RunFrom:
.1d86	a0 03		ldy #$03			ldy 	#3 							; over offset/line #
.1d88					CRNextInstruction:
.1d88	64 7b		stz $7b				stz 	softMemAlloc+1
.1d8a	ad 09 0c	lda $0c09			lda 	breakCounter 				; check for break.
.1d8d	6d 0a 0c	adc $0c0a			adc 	breakIncrement
.1d90	8d 09 0c	sta $0c09			sta 	breakCounter
.1d93	90 05		bcc $1d9a			bcc 	_CRNoChecks
.1d95	a2 00		ldx #$00		ldx	#0
.1d97	20 64 11	jsr $1164		jsr	deviceHandler
.1d9a					_CRNoChecks
.1d9a	b1 28		lda ($28),y			lda 	(codePtr),y 				; get next token.
.1d9c	10 1c		bpl $1dba			bpl 	_CRNotToken
.1d9e	c9 c6		cmp #$c6			cmp 	#TOK_TOKENS 				; if in the tokens then do that token.
.1da0	b0 0c		bcs $1dae			bcs 	_CRExecute
.1da2	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST 				; unary is ignored.
.1da4	b0 5c		bcs $1e02			bcs 	Unimplemented
.1da6	c9 99		cmp #$99			cmp 	#TOK_STRUCTST 				; execute structures.
.1da8	b0 04		bcs $1dae			bcs 	_CRExecute
.1daa	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; if one of the system tokens $80-$85 do that
.1dac	b0 16		bcs $1dc4			bcs 	_CRCheckIndirect 			; if in that unused range check for ! or ?
.1dae					_CRExecute:
.1dae	c8		iny				iny 								; consume it.
.1daf	0a		asl a				asl 	a 							; double it, losing most significant bit.
.1db0	aa		tax				tax
.1db1	20 b7 1d	jsr $1db7			jsr 	_CRRunRoutine 				; we want to do jsr (group0vectors,x)
.1db4	4c 88 1d	jmp $1d88			jmp 	CRNextInstruction
.1db7					_CRRunRoutine:
.1db7	7c 0c 1e	jmp ($1e0c,x)			jmp 	(Group0Vectors,x)
.1dba					_CRNotToken:
.1dba	c9 40		cmp #$40			cmp 	#$40 						; if 0-3F then it is a letter
.1dbc	b0 44		bcs $1e02			bcs 	Unimplemented
.1dbe					_CRDefaultLet:
.1dbe	20 0b 19	jsr $190b			jsr 	CommandLet 					; do the default, LET
.1dc1	4c 88 1d	jmp $1d88			jmp 	CRNextInstruction
.1dc4					_CRCheckIndirect:
.1dc4	c9 97		cmp #$97			cmp 	#TKW_PLING 					; !<term> =
.1dc6	f0 f6		beq $1dbe			beq 	_CRDefaultLet
.1dc8	c9 98		cmp #$98			cmp 	#TKW_QMARK 					; ?<term> =
.1dca	f0 f2		beq $1dbe			beq 	_CRDefaultLet
.1dcc	d0 34		bne $1e02			bne 	Unimplemented
.1dce					CommandShift1:
.1dce	b1 28		lda ($28),y			lda 	(codePtr),y 				; get shifted value
.1dd0	10 30		bpl $1e02			bpl 	Unimplemented 				; we have an error as this should not happen.
.1dd2	0a		asl a				asl 	a 							; double into X
.1dd3	aa		tax				tax
.1dd4	c8		iny				iny 								; advance over it.
.1dd5	20 db 1d	jsr $1ddb			jsr 	_RunIt 						; we have no jsr (aaaa,X)
.1dd8	4c 88 1d	jmp $1d88			jmp 	CRNextInstruction
.1ddb					_RunIt:
.1ddb	7c c6 1e	jmp ($1ec6,x)			jmp 	(Group1Vectors-12,x) 		; and do the code.
.1dde					CommandShift2:
.1dde	a9 ff		lda #$ff			lda 	#$FF 						; $FF means command not unary function.
.1de0	20 30 14	jsr $1430		jsr	extensionHandler
.1de3	4c 88 1d	jmp $1d88			jmp 	CRNextInstruction
.1de6					CommandColon:
.1de6	60		rts				rts
.1de7					CommandBreak:
.1de7	20 9e 25	jsr $259e			jsr 	EvaluateRootInteger
.1dea	20 29 2b	jsr $2b29			jsr 	MInt32Zero
.1ded	f0 02		beq $1df1			beq 	BreakOff
.1def					BreakOn:
.1def	a2 08		ldx #$08			ldx 	#8
.1df1					BreakOff:
.1df1	8e 0a 0c	stx $0c0a			stx 	breakIncrement
.1df4	60		rts				rts
.1df5					ResetCodeAddress:
.1df5	ad c8 0a	lda $0ac8			lda 	basePage 					; copy basePage to code Pointer
.1df8	85 28		sta $28				sta 	codePtr
.1dfa	ad c9 0a	lda $0ac9			lda 	basePage+1
.1dfd	85 29		sta $29				sta 	codePtr+1
.1dff	a0 03		ldy #$03			ldy 	#3 							; offset after offset link and line#
.1e01	60		rts				rts
.1e02					Unimplemented:
.1e02	a2 01		ldx #$01			ldx 	#ErrorID_Missing
.1e04	20 83 11	jsr $1183		jsr	errorHandler
.1e07					TKErr01:
.1e07					TKErr02:
.1e07					TKErr03:
.1e07					TKErr04:
.1e07					TKErr05:
.1e07					TKErr06:
.1e07					TKErr07:
.1e07					TKErr08:
.1e07					TKErr09:
.1e07					TKErr10:
.1e07	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.1e09	20 83 11	jsr $1183		jsr	errorHandler

;******  Processing file: main/commands/../../generated/tokenvectors0.inc

.1e0c					Group0Vectors:
>1e0c	c9 1f					.word	AdvanceNextLine          ; $80 [[eol]]
>1e0e	ce 1d					.word	CommandShift1            ; $81 [[sh1]]
>1e10	de 1d					.word	CommandShift2            ; $82 [[sh2]]
>1e12	07 1e					.word	TKErr09                  ; $83 [[sh3]]
>1e14	07 1e					.word	TKErr10                  ; $84 [[fpc]]
>1e16	07 1e					.word	TKErr08                  ; $85 [[str]]
>1e18	8d 21					.word	AndHandler               ; $86 and
>1e1a	7a 21					.word	OrHandler                ; $87 or
>1e1c	67 21					.word	XorHandler               ; $88 xor
>1e1e	af 22					.word	CompareGreaterEq         ; $89 >=
>1e20	b9 22					.word	CompareLessEq            ; $8a <=
>1e22	9b 22					.word	CompareGreater           ; $8b >
>1e24	91 22					.word	CompareLess              ; $8c <
>1e26	87 22					.word	CompareEquals            ; $8d =
>1e28	a5 22					.word	CompareNotEquals         ; $8e <>
>1e2a	f8 20					.word	AddHandler               ; $8f +
>1e2c	1b 21					.word	SubHandler               ; $90 -
>1e2e	b3 21					.word	ShrHandler               ; $91 >>
>1e30	a0 21					.word	ShlHandler               ; $92 <<
>1e32	2e 21					.word	MulHandler               ; $93 *
>1e34	41 21					.word	DivHandler               ; $94 /
>1e36	54 21					.word	ModHandler               ; $95 mod
>1e38	ec 21					.word	PowerHandler             ; $96 ^
>1e3a	c6 21					.word	WordRefHandler           ; $97 !
>1e3c	d9 21					.word	ByteRefHandler           ; $98 ?
>1e3e	4c 1d					.word	Command_Repeat           ; $99 repeat
>1e40	91 20					.word	Command_While            ; $9a while
>1e42	0f 17					.word	Command_FOR              ; $9b for
>1e44	1e 18					.word	CommandIf                ; $9c if
>1e46	07 1e					.word	TKErr04                  ; $9d defproc
>1e48	59 1d					.word	Command_Until            ; $9e until
>1e4a	b4 20					.word	Command_Wend             ; $9f wend
>1e4c	70 17					.word	Command_NEXT             ; $a0 next
>1e4e	07 1e					.word	TKErr06                  ; $a1 then
>1e50	59 18					.word	Command_ENDIF            ; $a2 endif
>1e52	be 1c					.word	ReturnProc               ; $a3 endproc
>1e54	88 24					.word	UnaryParenthesis         ; $a4 (
>1e56	e6 25					.word	UnaryLen                 ; $a5 len(
>1e58	2a 26					.word	UnarySgn                 ; $a6 sgn(
>1e5a	13 26					.word	UnaryAbs                 ; $a7 abs(
>1e5c	83 26					.word	Unary_Random             ; $a8 random(
>1e5e	cd 26					.word	Unary_Page               ; $a9 page
>1e60	fe 2a					.word	MInt32True               ; $aa true
>1e62	02 2b					.word	MInt32False              ; $ab false
>1e64	98 26					.word	Unary_Min                ; $ac min(
>1e66	9c 26					.word	Unary_Max                ; $ad max(
>1e68	87 27					.word	UnarySys                 ; $ae sys(
>1e6a	4a 27					.word	UnaryTimer               ; $af timer(
>1e6c	dd 24					.word	EventFunction            ; $b0 event(
>1e6e	73 27					.word	UnaryGet                 ; $b1 get(
>1e70	63 27					.word	UnaryInkey               ; $b2 inkey(
>1e72	1e 27					.word	UnaryAlloc               ; $b3 alloc(
>1e74	af 27					.word	ExecChr                  ; $b4 chr$(
>1e76	df 27					.word	ExecLeft                 ; $b5 left$(
>1e78	fc 27					.word	ExecMid                  ; $b6 mid$(
>1e7a	24 28					.word	ExecRight                ; $b7 right$(
>1e7c	c9 22					.word	Event_Str                ; $b8 str$(
>1e7e	f8 22					.word	UnaryVal                 ; $b9 val(
>1e80	41 26					.word	UnaryPeek                ; $ba peek(
>1e82	47 26					.word	UnaryDeek                ; $bb deek(
>1e84	4d 26					.word	UnaryLeek                ; $bc leek(
>1e86	04 26					.word	UnaryAsc                 ; $bd asc(
>1e88	f8 26					.word	UnaryIntToFloat          ; $be int(
>1e8a	0b 27					.word	UnaryFloatToInt          ; $bf float(
>1e8c	fb 22					.word	UnaryIsVal               ; $c0 isval(
>1e8e	c6 27					.word	ExecUpper                ; $c1 upper$(
>1e90	c3 27					.word	ExecLower                ; $c2 lower$(
>1e92	db 26					.word	UnaryReference           ; $c3 @
>1e94	f1 26					.word	UnaryComplement          ; $c4 ~
>1e96	ee 26					.word	UnaryHexMarker           ; $c5 &
>1e98	07 1e					.word	TKErr01                  ; $c6 )
>1e9a	e6 1d					.word	CommandColon             ; $c7 :
>1e9c	07 1e					.word	TKErr02                  ; $c8 ,
>1e9e	07 1e					.word	TKErr03                  ; $c9 ;
>1ea0	3f 1d					.word	Command_Rem2             ; $ca '
>1ea2	07 1e					.word	TKErr07                  ; $cb to
>1ea4	07 1e					.word	TKErr05                  ; $cc step
>1ea6	51 1c					.word	CallProc                 ; $cd proc
>1ea8	69 1a					.word	CommandLocal             ; $ce local
>1eaa	01 17					.word	Command_Dim              ; $cf dim
>1eac	3f 1d					.word	Command_Rem              ; $d0 rem
>1eae	0b 19					.word	CommandLet               ; $d1 let
>1eb0	5a 18					.word	Command_Input            ; $d2 input
>1eb2	53 18					.word	Command_ELSE             ; $d3 else
>1eb4	70 20					.word	Command_VDU              ; $d4 vdu
>1eb6	b6 1b					.word	Command_Print            ; $d5 print
>1eb8	3e 20					.word	CommandGOTO              ; $d6 goto
>1eba	13 20					.word	CommandGOSUB             ; $d7 gosub
>1ebc	26 20					.word	CommandRETURN            ; $d8 return
>1ebe	04 1d					.word	CommandData              ; $d9 data
>1ec0	94 16					.word	Command_Assert           ; $da assert
>1ec2	79 1b					.word	Command_Poke             ; $db poke
>1ec4	7d 1b					.word	Command_Doke             ; $dc doke
>1ec6	81 1b					.word	Command_Loke             ; $dd loke
>1ec8	e3 1f					.word	Command_Ink              ; $de ink
>1eca	ee 1f					.word	Command_Paper            ; $df paper
>1ecc	dd 1f					.word	Command_CLS              ; $e0 cls
>1ece	f9 1f					.word	Command_Locate           ; $e1 locate
>1ed0	e7 1d					.word	CommandBreak             ; $e2 break

;******  Return to file: main/commands/run.asm


;******  Processing file: main/commands/../../generated/tokenvectors1.inc

.1ed2					Group1Vectors:
>1ed2	a2 16					.word	CommandClear             ; $86 clear
>1ed4	10 1a					.word	CommandLoad              ; $87 load
>1ed6	25 1a					.word	CommandSave              ; $88 save
>1ed8	89 19					.word	CommandList              ; $89 list
>1eda	6b 1b					.word	Command_New              ; $8a new
>1edc	7a 1d					.word	Command_Run              ; $8b run
>1ede	d9 1c					.word	CommandRead              ; $8c read
>1ee0	0d 1d					.word	CommandRestore           ; $8d restore
>1ee2	c3 1f					.word	CommandEnd               ; $8e end
>1ee4	be 1f					.word	CommandStop              ; $8f stop
>1ee6	c6 1f					.word	CommandXemu              ; $90 xemu

;******  Return to file: main/commands/run.asm


;******  Return to file: main/main.asm


;******  Processing file: main/commands/scanner.asm

.0c0b					procList:
>0c0b							.fill 	2		 					; terminated by name high being zero.
.0c0d					yInLine:
>0c0d							.fill 	1
.1ee8					FindProcedure:
.1ee8	8c 0d 0c	sty $0c0d			sty 	yInLine 					; save current position.
.1eeb	20 a6 1f	jsr $1fa6			jsr 	CalculateProcedureHash		; calculate the hash of the procedure.
.1eee	85 2c		sta $2c				sta 	temp1
.1ef0	ad 0b 0c	lda $0c0b			lda		procList 					; put procList address in temp2
.1ef3	85 2e		sta $2e				sta 	temp2
.1ef5	ad 0c 0c	lda $0c0c			lda 	procList+1
.1ef8	85 2f		sta $2f				sta 	temp2+1
.1efa	a0 00		ldy #$00			ldy 	#0 							; position in this table.
.1efc					_FPLoop:
.1efc	b1 2e		lda ($2e),y			lda 	(temp2),y
.1efe	f0 4f		beq $1f4f			beq 	_FPError 					; if so, we don't know this procedure.
.1f00	85 2b		sta $2b				sta 	temp0+1 					; copy MSB/LSB to temp0 as we go.
.1f02	c8		iny				iny
.1f03	b1 2e		lda ($2e),y			lda 	(temp2),y
.1f05	85 2a		sta $2a				sta 	temp0
.1f07	c8		iny				iny
.1f08	b1 2e		lda ($2e),y			lda 	(temp2),y					; check the procedure hash.
.1f0a	c5 2c		cmp $2c				cmp 	temp1
.1f0c	d0 2b		bne $1f39			bne 	_FPNext 					; hash is different, go to next.
.1f0e	38		sec				sec
.1f0f	ad 0d 0c	lda $0c0d			lda 	yInLine 					; position in line must be at least 4
.1f12	e9 04		sbc #$04			sbc 	#4
.1f14	18		clc				clc
.1f15	65 28		adc $28				adc 	codePtr
.1f17	85 30		sta $30				sta 	temp3
.1f19	a5 29		lda $29				lda 	codePtr+1
.1f1b	69 00		adc #$00			adc 	#0
.1f1d	85 31		sta $31				sta 	temp3+1
.1f1f	98		tya				tya
.1f20	48		pha				pha
.1f21	a0 04		ldy #$04			ldy 	#4
.1f23					_FPCName:
.1f23	b1 30		lda ($30),y			lda 	(temp3),y 					; check the same
.1f25	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.1f27	d0 0e		bne $1f37			bne 	_FPpulYNext 				; if different go to next one.
.1f29	c8		iny				iny
.1f2a	c9 3a		cmp #$3a			cmp 	#$3A
.1f2c	90 f5		bcc $1f23			bcc 	_FPCName 					; compare the whole lot....
.1f2e	68		pla				pla 								; throw away the saved Y
.1f2f	98		tya				tya 								; length of name is Y-4
.1f30	38		sec				sec
.1f31	e9 04		sbc #$04			sbc 	#4
.1f33	ac 0d 0c	ldy $0c0d			ldy 	yInLine  					; get the original Y back
.1f36	60		rts				rts
.1f37					_FPpulYNext:
.1f37	68		pla				pla
.1f38	a8		tay				tay
.1f39					_FPNext:
.1f39	c8		iny				iny 								; next procedure record.
.1f3a	10 c0		bpl $1efc			bpl 	_FPLoop 					; if done 128 already ... e.g. Y -ve
.1f3c	98		tya				tya 								; subtract 128 from Y
.1f3d	38		sec				sec
.1f3e	e9 80		sbc #$80			sbc 	#128
.1f40	a8		tay				tay
.1f41	18		clc				clc 								; add 128 to temp2, so we can have more than
.1f42	a5 2e		lda $2e				lda 	temp2 						; 255/3 = 85 procedures
.1f44	69 80		adc #$80			adc 	#128
.1f46	85 2e		sta $2e				sta 	temp2
.1f48	90 b2		bcc $1efc			bcc 	_FPLoop
.1f4a	e6 2f		inc $2f				inc 	temp2+1
.1f4c	4c fc 1e	jmp $1efc			jmp 	_FPLoop
.1f4f					_FPError:
.1f4f	a2 17		ldx #$17			ldx 	#ErrorID_NoProc
.1f51	20 83 11	jsr $1183		jsr	errorHandler
.1f54					ScanProc:
.1f54	98		tya				tya
.1f55	48		pha				pha
.1f56	a5 35		lda $35				lda 	lowMemory 					; copy the start of the procList, at low memory
.1f58	8d 0b 0c	sta $0c0b			sta 	procList
.1f5b	a5 36		lda $36				lda 	lowMemory+1
.1f5d	8d 0c 0c	sta $0c0c			sta 	procList+1
.1f60	20 f5 1d	jsr $1df5			jsr 	ResetCodeAddress 			; back to the start.
.1f63					_ScanLoop:
.1f63	a0 00		ldy #$00			ldy 	#0 							; check reached program end
.1f65	b1 28		lda ($28),y			lda 	(codePtr),y
.1f67	f0 2a		beq $1f93			beq 	_ScanExit
.1f69	a0 03		ldy #$03			ldy 	#3							; get first token
.1f6b	b1 28		lda ($28),y			lda 	(codePtr),y
.1f6d	c9 9d		cmp #$9d			cmp 	#TKW_DEFPROC				; skip to next if not DEFPROC
.1f6f	d0 12		bne $1f83			bne 	_ScanNext
.1f71	a5 29		lda $29				lda 	codePtr+1 					; write high and low address of this line.
.1f73	20 9b 1f	jsr $1f9b			jsr 	_ScanWrite
.1f76	a5 28		lda $28				lda 	codePtr
.1f78	20 9b 1f	jsr $1f9b			jsr 	_ScanWrite
.1f7b	a0 04		ldy #$04			ldy 	#4 							; start of name part
.1f7d	20 a6 1f	jsr $1fa6			jsr 	CalculateProcedureHash 		; calculate procedure hash
.1f80	20 9b 1f	jsr $1f9b			jsr 	_ScanWrite					; and write that
.1f83					_ScanNext:
.1f83	18		clc				clc
.1f84	a0 00		ldy #$00			ldy 	#0
.1f86	b1 28		lda ($28),y			lda 	(codePtr),y
.1f88	65 28		adc $28				adc 	codePtr
.1f8a	85 28		sta $28				sta 	codePtr
.1f8c	90 d5		bcc $1f63			bcc 	_ScanLoop
.1f8e	e6 29		inc $29				inc 	codePtr+1
.1f90	4c 63 1f	jmp $1f63			jmp 	_ScanLoop
.1f93					_ScanExit:
.1f93	a9 00		lda #$00			lda 	#0 							; write ending zero.
.1f95	20 9b 1f	jsr $1f9b			jsr 	_ScanWrite
.1f98	68		pla				pla
.1f99	a8		tay				tay
.1f9a	60		rts				rts
.1f9b					_ScanWrite:
.1f9b	a0 00		ldy #$00			ldy 	#0
.1f9d	91 35		sta ($35),y			sta 	(lowMemory),y
.1f9f	e6 35		inc $35				inc 	lowMemory
.1fa1	d0 02		bne $1fa5			bne 	_SWNoCarry
.1fa3	e6 36		inc $36				inc 	lowMemory+1
.1fa5					_SWNoCarry:
.1fa5	60		rts				rts
.1fa6					CalculateProcedureHash:
.1fa6	a9 00		lda #$00			lda 	#0 							; clear hash.
.1fa8	85 2a		sta $2a				sta 	temp0
.1faa					_CPHLoop:
.1faa	18		clc				clc 								; add character and rotate and add carry back in
.1fab	b1 28		lda ($28),y			lda 	(codePtr),y
.1fad	65 2a		adc $2a				adc 	temp0
.1faf	6a		ror a				ror 	a
.1fb0	69 0d		adc #$0d			adc 	#13 						; primes usually good for this sort of thing.
.1fb2	85 2a		sta $2a				sta 	temp0 						; (down with this sort of thing)
.1fb4	b1 28		lda ($28),y			lda 	(codePtr),y
.1fb6	c8		iny				iny 								; advance incase we go round again.
.1fb7	c9 3a		cmp #$3a			cmp 	#$3A
.1fb9	90 ef		bcc $1faa			bcc 	_CPHLoop
.1fbb	a5 2a		lda $2a				lda 	temp0
.1fbd	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/stopend.asm

.1fbe					CommandStop:
.1fbe	a2 06		ldx #$06			ldx 	#ErrorID_Stop
.1fc0	20 83 11	jsr $1183		jsr	errorHandler
.1fc3					CommandEnd:
.1fc3	4c 5f 2c	jmp $2c5f			jmp 	WarmStart
.1fc6					CommandXemu:
.1fc6	4c ff ff	jmp $ffff			jmp 	$FFFF 						; fudge to crash out of emulator
.1fc9					AdvanceNextLine:
.1fc9	a0 00		ldy #$00			ldy 	#0 							; get offset
.1fcb	b1 28		lda ($28),y			lda 	(codePtr),y
.1fcd	18		clc				clc 								; add to codePtr
.1fce	65 28		adc $28				adc 	codePtr
.1fd0	85 28		sta $28				sta 	codePtr
.1fd2	90 02		bcc $1fd6			bcc 	_ANLNoCarry
.1fd4	e6 29		inc $29				inc 	codePtr+1
.1fd6					_ANLNoCarry:
.1fd6	b1 28		lda ($28),y			lda 	(codePtr),y 				; if end of program (or was just stand alone.
.1fd8	f0 e9		beq $1fc3			beq 	CommandEnd 					; execute END
.1fda	a0 03		ldy #$03			ldy 	#3 							; start of tokens on line.
.1fdc	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/text.asm

.1fdd					Command_CLS:
.1fdd	a2 02		ldx #$02		ldx	#2
.1fdf	20 64 11	jsr $1164		jsr	deviceHandler
.1fe2	60		rts				rts
.1fe3					Command_Ink:
.1fe3	a2 00		ldx #$00			ldx 	#0
.1fe5	20 a8 25	jsr $25a8			jsr 	EvaluateSmallInteger
.1fe8	a2 08		ldx #$08		ldx	#8
.1fea	20 64 11	jsr $1164		jsr	deviceHandler
.1fed	60		rts				rts
.1fee					Command_Paper:
.1fee	a2 00		ldx #$00			ldx 	#0
.1ff0	20 a8 25	jsr $25a8			jsr 	EvaluateSmallInteger
.1ff3	a2 12		ldx #$12		ldx	#18
.1ff5	20 64 11	jsr $1164		jsr	deviceHandler
.1ff8	60		rts				rts
.1ff9					Command_Locate:
.1ff9	a2 00		ldx #$00			ldx 	#0
.1ffb	20 a8 25	jsr $25a8			jsr 	EvaluateSmallInteger
.1ffe	20 82 2b	jsr $2b82			jsr 	CheckComma
.2001	e8		inx				inx
.2002	20 a8 25	jsr $25a8			jsr 	EvaluateSmallInteger
.2005	98		tya				tya
.2006	48		pha				pha
.2007	a4 49		ldy $49				ldy 	esInt0+1
.2009	a5 48		lda $48				lda 	esInt0
.200b	a2 10		ldx #$10		ldx	#16
.200d	20 64 11	jsr $1164		jsr	deviceHandler
.2010	68		pla				pla
.2011	a8		tay				tay
.2012	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/transfer.asm

.2013					CommandGOSUB:
.2013	20 9e 25	jsr $259e			jsr 	EvaluateRootInteger			; get GOSUB line on stack top.
.2016	a2 04		ldx #$04			ldx 	#4 							; allocate 4 bytes on stack for GOSUB
.2018	a9 47		lda #$47			lda 	#markerGOSUB  				; <marker> <return addr/offset>
.201a	20 11 2c	jsr $2c11			jsr 	RSClaim
.201d	a9 01		lda #$01			lda 	#1 							; save position at offset 1.
.201f	20 3d 2c	jsr $2c3d			jsr 	RSSavePosition
.2022	a2 00		ldx #$00			ldx 	#0 							; point back at GOSUB line
.2024	f0 1b		beq $2041			beq 	GotoTOS 					; and do a GOTO there.
.2026					CommandRETURN:
.2026	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.2028	a1 78		lda ($78,x)			lda 	(rsPointer,x)
.202a	c9 47		cmp #$47			cmp 	#markerGOSUB 						; does it match
.202c	f0 05		beq $2033			beq 	_isok
.202e	a2 0e		ldx #$0e			ldx 	#ErrorID_returnErr
.2030	20 83 11	jsr $1183		jsr	errorHandler
.2033					_isok:
.2033	a9 01		lda #$01			lda 	#1
.2035	20 50 2c	jsr $2c50			jsr 	RSLoadPosition 				; reload the position from offset 1.
.2038	a9 04		lda #$04			lda 	#4 							; throw 4 bytes from stack.
.203a	20 33 2c	jsr $2c33			jsr 	RSFree
.203d	60		rts				rts
.203e					CommandGOTO:
.203e	20 9e 25	jsr $259e			jsr 	EvaluateRootInteger 		; get GOTO line on stack top.
.2041					GotoTOS:
.2041	20 f5 1d	jsr $1df5			jsr 	ResetCodeAddress 			; simple search.
.2044					_GotoSearch:
.2044	a0 00		ldy #$00			ldy 	#0 							; get offset
.2046	b1 28		lda ($28),y			lda 	(codePtr),y
.2048	f0 21		beq $206b			beq 	_GotoError 					; not found.
.204a	c8		iny				iny									; check LSB match
.204b	b1 28		lda ($28),y			lda 	(codePtr),y
.204d	d5 48		cmp $48,x			cmp 	esInt0,x
.204f	d0 07		bne $2058			bne 	_GotoNext
.2051	c8		iny				iny
.2052	b1 28		lda ($28),y			lda 	(codePtr),y
.2054	d5 50		cmp $50,x			cmp 	esInt1,x
.2056	f0 10		beq $2068			beq 	_GotoFound
.2058					_GotoNext:
.2058	a0 00		ldy #$00			ldy 	#0 							; go next line
.205a	b1 28		lda ($28),y			lda 	(codePtr),y
.205c	18		clc				clc
.205d	65 28		adc $28				adc 	codePtr
.205f	85 28		sta $28				sta 	codePtr
.2061	90 e1		bcc $2044			bcc 	_GotoSearch
.2063	e6 29		inc $29				inc 	codePtr+1
.2065	4c 44 20	jmp $2044			jmp 	_GotoSearch
.2068					_GotoFound:
.2068	a0 03		ldy #$03			ldy 	#3 							; continue from that line
.206a	60		rts				rts
.206b					_GotoError:
.206b	a2 0c		ldx #$0c			ldx 	#ErrorID_LineNumber
.206d	20 83 11	jsr $1183		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/commands/vdu.asm

.2070					Command_VDU:
.2070	20 9e 25	jsr $259e			jsr 	EvaluateRootInteger 			; get integer at root.
.2073	a5 48		lda $48				lda 	esInt0
.2075	a2 14		ldx #$14		ldx	#20
.2077	20 64 11	jsr $1164		jsr	deviceHandler
.207a					_CVNext:
.207a	b1 28		lda ($28),y			lda 	(codePtr),y 					; what follows ?
.207c	c8		iny				iny
.207d	c9 c8		cmp #$c8			cmp 	#TKW_COMMA 						; comma, do again
.207f	f0 ef		beq $2070			beq 	Command_VDU
.2081	c9 c9		cmp #$c9			cmp 	#TKW_SEMICOLON 					; semicolon, print MSB
.2083	d0 0a		bne $208f			bne 	_CVExit
.2085	a5 50		lda $50				lda 	esInt1
.2087	a2 14		ldx #$14		ldx	#20
.2089	20 64 11	jsr $1164		jsr	deviceHandler
.208c	4c 7a 20	jmp $207a			jmp 	_CVNext
.208f	88		dey		_CVExit:dey
.2090	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/while.asm

.2091					Command_While:
.2091	a9 57		lda #$57			lda 	#markerWhile 				; gosub marker allocate 4 bytes.
.2093	a2 04		ldx #$04			ldx 	#4
.2095	20 11 2c	jsr $2c11			jsr 	RSClaim 					; create on stack.
.2098	88		dey				dey
.2099	a9 01		lda #$01			lda 	#1
.209b	20 3d 2c	jsr $2c3d			jsr 	RSSavePosition 				; save position before the WHILE keyword.
.209e	c8		iny				iny
.209f	20 a0 25	jsr $25a0			jsr 	EvaluateInteger				; get the conditional
.20a2	20 29 2b	jsr $2b29			jsr 	MInt32Zero 	 				; if zero, skip forward to the fail code.
.20a5	f0 01		beq $20a8			beq 	_CWFail
.20a7	60		rts				rts
.20a8					_CWFail:
.20a8	a9 04		lda #$04			lda 	#4
.20aa	20 33 2c	jsr $2c33			jsr 	RSFree 						; close the just opened position.
.20ad	a9 9f		lda #$9f			lda 	#TKW_WEND 					; scan forward past WEND.
.20af	aa		tax				tax
.20b0	20 8f 2b	jsr $2b8f			jsr 	ScanForward
.20b3	60		rts				rts
.20b4					Command_Wend:
.20b4	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.20b6	a1 78		lda ($78,x)			lda 	(rsPointer,x)
.20b8	c9 57		cmp #$57			cmp 	#markerWHILE 						; does it match
.20ba	f0 05		beq $20c1			beq 	_isok
.20bc	a2 11		ldx #$11			ldx 	#ErrorID_wendErr
.20be	20 83 11	jsr $1183		jsr	errorHandler
.20c1					_isok:
.20c1	a9 01		lda #$01			lda 	#1
.20c3	20 50 2c	jsr $2c50			jsr 	RSLoadPosition				; go back until true
.20c6	a9 04		lda #$04			lda 	#4
.20c8	20 33 2c	jsr $2c33			jsr 	RSFree 						; close the loop
.20cb	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/binary.asm

.20cc					BinaryProcess:
.20cc	b5 40		lda $40,x			lda 	esType,x 					; or type bytes together and check bit 6.
.20ce	15 41		ora $41,x			ora 	esType+1,x 					; (the float bit)
.20d0	0a		asl a				asl 	a
.20d1	30 0e		bmi $20e1			bmi 	_BPStringType 				; if bit 6 is set, then string type, error
.20d3	18		clc				clc 								; return CC for integer
.20d4	29 02		and #$02			and 	#$02 						; $02 because of ASL A. check original bit 1.
.20d6	f0 08		beq $20e0			beq 	_BPExit 					; if both integer then return with CC.
.20d8	20 e6 20	jsr $20e6			jsr 	BPMakeBothFloat 			; make both float
.20db	a9 01		lda #$01			lda 	#$01 						; set result type to float
.20dd	95 40		sta $40,x			sta 	esType,x
.20df	38		sec				sec 								; and return with carry set.
.20e0					_BPExit:
.20e0	60		rts				rts
.20e1					_BPStringType:
.20e1	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.20e3	20 83 11	jsr $1183		jsr	errorHandler
.20e6					BPMakeBothFloat:
.20e6	e8		inx				inx
.20e7	20 eb 20	jsr $20eb			jsr 	BPMakeFloat 				; one is a float, so we do both as floats.
.20ea	ca		dex				dex
.20eb					BPMakeFloat:
.20eb	b5 40		lda $40,x			lda 	esType,x 					; get type bit which is in bit 0
.20ed	4a		lsr a				lsr 	a
.20ee	b0 07		bcs $20f7			bcs 	_BPIsFloat 					; already a float if set.
.20f0	8a		txa				txa
.20f1	a2 1a		ldx #$1a		ldx	#26
.20f3	20 bb 14	jsr $14bb		jsr	floatingpointHandler
.20f6	aa		tax				tax
.20f7					_BPIsFloat:
.20f7	60		rts				rts
.20f8					AddHandler:
.20f8	20 47 23	jsr $2347			jsr 	DereferenceTwo 				; dereference top two on stack.
.20fb	b5 40		lda $40,x			lda 	esType,x 					; check two strings.
.20fd	35 41		and $41,x			and 	esType+1,x
.20ff	29 40		and #$40			and 	#$40 						; if both have bit 6 set ... we have two strings
.2101	d0 10		bne $2113			bne 	_AHStringConcat				; concatenate strings.
.2103	20 cc 20	jsr $20cc			jsr 	BinaryProcess 				; check to see if either is float
.2106	b0 03		bcs $210b			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.2108	4c e6 29	jmp $29e6			jmp 	MInt32Add 							; else do it as integer.
.210b					_IsFPOperation:
.210b	8a		txa				txa 								; call the relevant fp routine
.210c	a2 02		ldx #$02		ldx	#2
.210e	20 bb 14	jsr $14bb		jsr	floatingpointHandler
.2111	aa		tax				tax
.2112	60		rts				rts
.2113					_AHStringConcat:
.2113	8a		txa				txa 								; handled by the string module.
.2114	a2 04		ldx #$04		ldx	#4
.2116	20 13 2f	jsr $2f13		jsr	stringHandler
.2119	aa		tax				tax
.211a	60		rts				rts
.211b					SubHandler:
.211b	20 47 23	jsr $2347			jsr 	DereferenceTwo
.211e	20 cc 20	jsr $20cc			jsr 	BinaryProcess 				; check to see if either is float
.2121	b0 03		bcs $2126			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.2123	4c 00 2a	jmp $2a00			jmp 	MInt32Sub 							; else do it as integer.
.2126					_IsFPOperation:
.2126	8a		txa				txa 								; call the relevant fp routine
.2127	a2 10		ldx #$10		ldx	#16
.2129	20 bb 14	jsr $14bb		jsr	floatingpointHandler
.212c	aa		tax				tax
.212d	60		rts				rts
.212e					MulHandler:
.212e	20 47 23	jsr $2347			jsr 	DereferenceTwo
.2131	20 cc 20	jsr $20cc			jsr 	BinaryProcess 				; check to see if either is float
.2134	b0 03		bcs $2139			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.2136	4c 1a 2a	jmp $2a1a			jmp 	MInt32Multiply 							; else do it as integer.
.2139					_IsFPOperation:
.2139	8a		txa				txa 								; call the relevant fp routine
.213a	a2 0a		ldx #$0a		ldx	#10
.213c	20 bb 14	jsr $14bb		jsr	floatingpointHandler
.213f	aa		tax				tax
.2140	60		rts				rts
.2141					DivHandler:
.2141	20 47 23	jsr $2347			jsr 	DereferenceTwo
.2144	20 cc 20	jsr $20cc			jsr 	BinaryProcess 				; check to see if either is float
.2147	b0 03		bcs $214c			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.2149	4c d7 28	jmp $28d7			jmp 	MInt32SDivide 							; else do it as integer.
.214c					_IsFPOperation:
.214c	8a		txa				txa 								; call the relevant fp routine
.214d	a2 06		ldx #$06		ldx	#6
.214f	20 bb 14	jsr $14bb		jsr	floatingpointHandler
.2152	aa		tax				tax
.2153	60		rts				rts
.2154					ModHandler:
.2154	20 47 23	jsr $2347			jsr 	DereferenceTwo
.2157	20 cc 20	jsr $20cc			jsr 	BinaryProcess 				; check to see if either is float
.215a	b0 03		bcs $215f			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.215c	4c 55 29	jmp $2955			jmp 	MInt32Modulus 							; else do it as integer.
.215f					_IsFPOperation:
.215f	8a		txa				txa 								; call the relevant fp routine
.2160	a2 08		ldx #$08		ldx	#8
.2162	20 bb 14	jsr $14bb		jsr	floatingpointHandler
.2165	aa		tax				tax
.2166	60		rts				rts
.2167					XorHandler:
.2167	20 47 23	jsr $2347			jsr 	DereferenceTwo
.216a	20 cc 20	jsr $20cc			jsr 	BinaryProcess 				; check to see if either is float
.216d	b0 03		bcs $2172			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.216f	4c 89 28	jmp $2889			jmp 	MInt32Xor 							; else do it as integer.
.2172					_IsFPOperation:
.2172	8a		txa				txa 								; call the relevant fp routine
.2173	a2 08		ldx #$08		ldx	#8
.2175	20 bb 14	jsr $14bb		jsr	floatingpointHandler
.2178	aa		tax				tax
.2179	60		rts				rts
.217a					OrHandler:
.217a	20 47 23	jsr $2347			jsr 	DereferenceTwo
.217d	20 cc 20	jsr $20cc			jsr 	BinaryProcess 				; check to see if either is float
.2180	b0 03		bcs $2185			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.2182	4c 70 28	jmp $2870			jmp 	MInt32Or 							; else do it as integer.
.2185					_IsFPOperation:
.2185	8a		txa				txa 								; call the relevant fp routine
.2186	a2 08		ldx #$08		ldx	#8
.2188	20 bb 14	jsr $14bb		jsr	floatingpointHandler
.218b	aa		tax				tax
.218c	60		rts				rts
.218d					AndHandler:
.218d	20 47 23	jsr $2347			jsr 	DereferenceTwo
.2190	20 cc 20	jsr $20cc			jsr 	BinaryProcess 				; check to see if either is float
.2193	b0 03		bcs $2198			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.2195	4c 57 28	jmp $2857			jmp 	MInt32And 							; else do it as integer.
.2198					_IsFPOperation:
.2198	8a		txa				txa 								; call the relevant fp routine
.2199	a2 08		ldx #$08		ldx	#8
.219b	20 bb 14	jsr $14bb		jsr	floatingpointHandler
.219e	aa		tax				tax
.219f	60		rts				rts
.21a0					ShlHandler:
.21a0	20 47 23	jsr $2347			jsr 	DereferenceTwo
.21a3	20 cc 20	jsr $20cc			jsr 	BinaryProcess 				; check to see if either is float
.21a6	b0 03		bcs $21ab			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.21a8	4c 21 22	jmp $2221			jmp 	Mint32ShiftLeftX 							; else do it as integer.
.21ab					_IsFPOperation:
.21ab	8a		txa				txa 								; call the relevant fp routine
.21ac	a2 08		ldx #$08		ldx	#8
.21ae	20 bb 14	jsr $14bb		jsr	floatingpointHandler
.21b1	aa		tax				tax
.21b2	60		rts				rts
.21b3					ShrHandler:
.21b3	20 47 23	jsr $2347			jsr 	DereferenceTwo
.21b6	20 cc 20	jsr $20cc			jsr 	BinaryProcess 				; check to see if either is float
.21b9	b0 03		bcs $21be			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.21bb	4c 24 22	jmp $2224			jmp 	MInt32ShiftRightX 							; else do it as integer.
.21be					_IsFPOperation:
.21be	8a		txa				txa 								; call the relevant fp routine
.21bf	a2 08		ldx #$08		ldx	#8
.21c1	20 bb 14	jsr $14bb		jsr	floatingpointHandler
.21c4	aa		tax				tax
.21c5	60		rts				rts
.21c6					WordRefHandler:
.21c6	20 47 23	jsr $2347			jsr 	DereferenceTwo
.21c9	20 cc 20	jsr $20cc			jsr 	BinaryProcess 				; check to see if either is float
.21cc	b0 03		bcs $21d1			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.21ce	4c 13 22	jmp $2213			jmp 	MInt32WordIndirect 							; else do it as integer.
.21d1					_IsFPOperation:
.21d1	8a		txa				txa 								; call the relevant fp routine
.21d2	a2 08		ldx #$08		ldx	#8
.21d4	20 bb 14	jsr $14bb		jsr	floatingpointHandler
.21d7	aa		tax				tax
.21d8	60		rts				rts
.21d9					ByteRefHandler:
.21d9	20 47 23	jsr $2347			jsr 	DereferenceTwo
.21dc	20 cc 20	jsr $20cc			jsr 	BinaryProcess 				; check to see if either is float
.21df	b0 03		bcs $21e4			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.21e1	4c 17 22	jmp $2217			jmp 	MInt32ByteIndirect 							; else do it as integer.
.21e4					_IsFPOperation:
.21e4	8a		txa				txa 								; call the relevant fp routine
.21e5	a2 08		ldx #$08		ldx	#8
.21e7	20 bb 14	jsr $14bb		jsr	floatingpointHandler
.21ea	aa		tax				tax
.21eb	60		rts				rts
.21ec					PowerHandler:
.21ec	20 47 23	jsr $2347			jsr 	DereferenceTwo
.21ef	20 cc 20	jsr $20cc			jsr 	BinaryProcess 				; check to see if either is float
.21f2	b0 03		bcs $21f7			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.21f4	4c ff 21	jmp $21ff			jmp 	PowerInteger 							; else do it as integer.
.21f7					_IsFPOperation:
.21f7	8a		txa				txa 								; call the relevant fp routine
.21f8	a2 16		ldx #$16		ldx	#22
.21fa	20 bb 14	jsr $14bb		jsr	floatingpointHandler
.21fd	aa		tax				tax
.21fe	60		rts				rts
.21ff					PowerInteger:
.21ff	20 e6 20	jsr $20e6			jsr 	BPMakeBothFloat				; make them float.
.2202	8a		txa				txa
.2203	a2 16		ldx #$16		ldx	#22
.2205	20 bb 14	jsr $14bb		jsr	floatingpointHandler
.2208	a2 12		ldx #$12		ldx	#18
.220a	20 bb 14	jsr $14bb		jsr	floatingpointHandler
.220d	aa		tax				tax
.220e	a9 00		lda #$00			lda 	#0 							; make type integer
.2210	95 40		sta $40,x			sta 	esType,x
.2212	60		rts				rts
.2213					Mint32WordIndirect:
.2213	a9 80		lda #$80	 		lda 	#$80 				 		; word reference type (bit 7 set)
.2215	d0 02		bne $2219			bne 	Min32Indirect
.2217					Mint32ByteIndirect:
.2217	a9 a0		lda #$a0			lda 	#$A0 						; byte reference type (bit 7, bit 5 set)
.2219					Min32Indirect:
.2219	48		pha				pha 								; save the indirection
.221a	20 e6 29	jsr $29e6			jsr 	MInt32Add 					; add a!b a?b
.221d	68		pla				pla 								; and set the type to reference.
.221e	95 40		sta $40,x			sta 	esType,x 	 				; so a!b => a+b and it's a reference....
.2220	60		rts				rts
.2221					Mint32ShiftLeftX:
.2221	18		clc				clc 								; CC shift left
.2222	90 01		bcc $2225			bcc 	Mint32Shift
.2224					Mint32ShiftRightX:
.2224	38		sec				sec 								; CS shift right
.2225					Mint32Shift:
.2225	08		php				php 								; save carry flag on stack.
.2226	b5 51		lda $51,x			lda 	esInt1+1,x 					; if shift >= 32 then it is zero.
.2228	15 59		ora $59,x			ora 	esInt2+1,x
.222a	15 61		ora $61,x			ora 	esInt3+1,x
.222c	d0 1e		bne $224c			bne 	_MShiftZero
.222e	b5 49		lda $49,x			lda 	esInt0+1,x
.2230	c9 20		cmp #$20			cmp 	#32
.2232	b0 18		bcs $224c			bcs 	_MShiftZero
.2234					_MShiftLoop:
.2234	b5 49		lda $49,x			lda 	esInt0+1,x 					; check count is zero
.2236	f0 12		beq $224a			beq 	_MShiftExit
.2238	d6 49		dec $49,x			dec 	esInt0+1,x
.223a	28		plp				plp 								; restore and save carry
.223b	08		php				php
.223c	90 06		bcc $2244			bcc 	_MShiftLeft 				; and shift left/right accordingly.
.223e	20 20 2b	jsr $2b20			jsr 	Mint32ShiftRight
.2241	4c 34 22	jmp $2234			jmp 	_MShiftLoop
.2244					_MShiftLeft:
.2244	20 17 2b	jsr $2b17			jsr 	Mint32ShiftLeft
.2247	4c 34 22	jmp $2234			jmp 	_MShiftLoop
.224a					_MShiftExit:
.224a	28		plp				plp	 								; throw saved carry and exit
.224b	60		rts				rts
.224c					_MShiftZero:
.224c	4c 02 2b	jmp $2b02			jmp 	MInt32False 				; return 0 as shifted >= 32 times.

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/compare.asm

.224f					PerformComparison:
.224f	20 47 23	jsr $2347			jsr 	DereferenceTwo 				; make both values.
.2252	b5 40		lda $40,x			lda 	esType,x 					; check for two strings.
.2254	35 41		and $41,x			and 	esType+1,x
.2256	0a		asl a				asl 	a 							; bit 7 set if both bit 6s were set.
.2257	30 1d		bmi $2276			bmi 	_PCIsString
.2259	b5 40		lda $40,x			lda 	esType,x 					; check either is floating point.
.225b	15 41		ora $41,x			ora 	esType+1,x
.225d	0a		asl a				asl 	a 							; shift bit 6 (string) to bit 7, mixed types
.225e	30 22		bmi $2282			bmi 	_PCError
.2260	29 02		and #$02			and 	#$02 						; because of ASL, check type in bit 0
.2262	f0 0f		beq $2273			beq 	_PCIsInteger 				; if not two integers, e.g. 1 of the bits is set
.2264	20 e6 20	jsr $20e6			jsr 	BPMakeBothFloat 			; make both float
.2267	8a		txa				txa
.2268	a2 04		ldx #$04		ldx	#4
.226a	20 bb 14	jsr $14bb		jsr	floatingpointHandler
.226d	86 32		stx $32				stx 	tempShort 					; save result
.226f	aa		tax				tax
.2270	a5 32		lda $32				lda 	tempShort
.2272	60		rts				rts
.2273					_PCIsInteger:
.2273	4c a2 28	jmp $28a2			jmp 	MInt32Compare
.2276					_PCIsString:
.2276	8a		txa				txa 								; A has SP
.2277	a2 06		ldx #$06		ldx	#6
.2279	20 13 2f	jsr $2f13		jsr	stringHandler
.227c	86 32		stx $32				stx 	tempShort 					; save result
.227e	aa		tax				tax 								; put SP back in X and get result.
.227f	a5 32		lda $32				lda 	tempShort
.2281	60		rts				rts
.2282					_PCError:
.2282	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.2284	20 83 11	jsr $1183		jsr	errorHandler
.2287					CompareEquals:
.2287	20 4f 22	jsr $224f			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.228a	c9 00		cmp #$00			cmp 	#$00 						; and we do something if it is = or <> a value.
.228c	f0 35		beq $22c3			beq  	CompareTrue
.228e	4c c6 22	jmp $22c6			jmp 	CompareFalse
.2291					CompareLess:
.2291	20 4f 22	jsr $224f			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.2294	c9 ff		cmp #$ff			cmp 	#$FF 						; and we do something if it is = or <> a value.
.2296	f0 2b		beq $22c3			beq  	CompareTrue
.2298	4c c6 22	jmp $22c6			jmp 	CompareFalse
.229b					CompareGreater:
.229b	20 4f 22	jsr $224f			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.229e	c9 01		cmp #$01			cmp 	#$01 						; and we do something if it is = or <> a value.
.22a0	f0 21		beq $22c3			beq  	CompareTrue
.22a2	4c c6 22	jmp $22c6			jmp 	CompareFalse
.22a5					CompareNotEquals:
.22a5	20 4f 22	jsr $224f			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.22a8	c9 00		cmp #$00			cmp 	#$00 						; and we do something if it is = or <> a value.
.22aa	d0 17		bne $22c3			bne  	CompareTrue
.22ac	4c c6 22	jmp $22c6			jmp 	CompareFalse
.22af					CompareGreaterEq:
.22af	20 4f 22	jsr $224f			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.22b2	c9 ff		cmp #$ff			cmp 	#$FF 						; and we do something if it is = or <> a value.
.22b4	d0 0d		bne $22c3			bne  	CompareTrue
.22b6	4c c6 22	jmp $22c6			jmp 	CompareFalse
.22b9					CompareLessEq:
.22b9	20 4f 22	jsr $224f			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.22bc	c9 01		cmp #$01			cmp 	#$01 						; and we do something if it is = or <> a value.
.22be	d0 03		bne $22c3			bne  	CompareTrue
.22c0	4c c6 22	jmp $22c6			jmp 	CompareFalse
.22c3					CompareTrue:
.22c3	4c fe 2a	jmp $2afe			jmp 	MInt32True
.22c6					CompareFalse:
.22c6	4c 02 2b	jmp $2b02			jmp 	MInt32False

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/convert.asm

.22c9					Event_Str:
.22c9	20 8a 25	jsr $258a			jsr 	EvaluateNumeric 			; get a number.
.22cc	b5 40		lda $40,x			lda 	esType,x 					; is it floating point
.22ce	d0 13		bne $22e3			bne 	_ESFloat
.22d0	20 26 23	jsr $2326			jsr 	ConvertGetBase 				; get base, or default.
.22d3	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.22d5	85 2a		sta $2a				sta 	temp0
.22d7	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.22d9	85 2b		sta $2b				sta 	1+(temp0)
.22db	b5 49		lda $49,x			lda 	esInt0+1,x 					; get the base
.22dd	20 58 2a	jsr $2a58			jsr 	MInt32ToString 				; convert to string.
.22e0	4c f0 22	jmp $22f0			jmp 	_ESCloneExit 				; clone and exit.
.22e3					_ESFloat:
.22e3	20 75 2b	jsr $2b75			jsr 	CheckRightParen 			; check closing )
.22e6	20 80 19	jsr $1980			jsr 	TOSToTemp0 					; string address in temp0, goes here.
.22e9	8a		txa				txa
.22ea	a2 14		ldx #$14		ldx	#20
.22ec	20 bb 14	jsr $14bb		jsr	floatingpointHandler
.22ef	aa		tax				tax
.22f0					_ESCloneExit:
.22f0	8a		txa				txa
.22f1	a2 02		ldx #$02		ldx	#2
.22f3	20 13 2f	jsr $2f13		jsr	stringHandler
.22f6	aa		tax				tax
.22f7	60		rts				rts
.22f8					UnaryVal:
.22f8	38		sec				sec 								; Carry set to return value
.22f9	b0 01		bcs $22fc			bcs 	ValueMain
.22fb					UnaryIsVal:
.22fb	18		clc				clc									; Carry clear to return legitimacy
.22fc					ValueMain:
.22fc	08		php				php 								; save results (CS is value, CC is validation)
.22fd	20 95 25	jsr $2595			jsr 	EvaluateString
.2300	20 26 23	jsr $2326			jsr 	ConvertGetBase 				; get base, if any.
.2303	98		tya				tya
.2304	48		pha				pha
.2305	20 80 19	jsr $1980			jsr 	TOSToTemp0 					; string address in temp0, goes here.
.2308	b5 49		lda $49,x			lda 	esInt0+1,x 					; get the base
.230a	29 7f		and #$7f			and 	#$7F 						; ignore the sign bit.
.230c	20 70 29	jsr $2970			jsr 	MInt32FromString 			; convert it back from a string.
.230f	b0 0c		bcs $231d			bcs 	_VMSuccess 					; successfully converted.
.2311	b5 49		lda $49,x			lda 	esInt0+1,x 					; is base the default
.2313	c9 8a		cmp #$8a			cmp 	#$80+10 					; if no, then it is integer only.
.2315	f0 00		beq $2317			beq 	_VMFailed 	 				; so we failed.
.2317					_VMFailed:
.2317	68		pla				pla
.2318	a8		tay				tay
.2319	28		plp				plp
.231a	4c 02 2b	jmp $2b02			jmp 	MInt32False 				; return 0 whatever.
.231d					_VMSuccess:
.231d	68		pla				pla
.231e	a8		tay				tay
.231f	28		plp				plp 								; if CS the it was val() so we want the value.
.2320	b0 03		bcs $2325			bcs 	_VMExit
.2322	4c fe 2a	jmp $2afe			jmp 	MInt32True 					; otherwise return true as successful.
.2325					_VMExit:
.2325	60		rts				rts
.2326					ConvertGetBase:
.2326	a9 8a		lda #$8a			lda 	#10+$80 					; default base 10 signed.
.2328	95 49		sta $49,x			sta 	esInt0+1,x
.232a	b1 28		lda ($28),y			lda 	(codePtr),y 				; check for ,base)
.232c	c9 c8		cmp #$c8			cmp 	#TKW_COMMA
.232e	d0 0e		bne $233e			bne 	_CGBDone 					; not found, should be )
.2330	e8		inx				inx 								; next level
.2331	c8		iny				iny 								; skip comma.
.2332	20 a8 25	jsr $25a8			jsr 	EvaluateSmallInteger		; evaluate the base.
.2335	ca		dex				dex
.2336	c9 02		cmp #$02			cmp 	#2 							; base range is 2..16
.2338	90 08		bcc $2342			bcc 	_CGBValue 					; (it should work as high as 37)
.233a	c9 11		cmp #$11			cmp 	#17
.233c	b0 04		bcs $2342			bcs 	_CGBValue
.233e					_CGBDone:
.233e	20 75 2b	jsr $2b75			jsr 	CheckRightParen
.2341	60		rts				rts
.2342					_CGBValue:
.2342	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.2344	20 83 11	jsr $1183		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/dereference.asm

.2347					DereferenceTwo:
.2347	e8		inx				inx
.2348	20 4c 23	jsr $234c			jsr 	DereferenceOne
.234b	ca		dex				dex
.234c					DereferenceOne:
.234c	b5 40		lda $40,x			lda 	esType,x
.234e	10 3d		bpl $238d			bpl 	_DRNotReference 			; is it a reference ? if not, we don't need to do anything
.2350	4a		lsr a				lsr 	a 							; do float dereference if bit 0 set.
.2351	b0 3b		bcs $238e			bcs 	_DRFloatDeReference
.2353	98		tya				tya
.2354	48		pha				pha
.2355	b5 48		lda $48,x			lda 	esInt0,x 					; copy address to temp0
.2357	85 2a		sta $2a				sta 	temp0
.2359	b5 50		lda $50,x			lda 	esInt1,x
.235b	85 2b		sta $2b				sta 	temp0+1
.235d	a9 00		lda #$00			lda 	#0 							; clear esInt1..3
.235f	95 50		sta $50,x			sta 	esInt1,x
.2361	95 58		sta $58,x			sta 	esInt2,x
.2363	95 60		sta $60,x			sta 	esInt3,x
.2365	b5 40		lda $40,x			lda 	esType,x 					; get the type byte.
.2367	29 60		and #$60			and 	#$60 						; get string flag ($40) and byte flag ($20)
.2369	0a		asl a				asl 	a 							; now string ($80) byte ($40)
.236a	30 0d		bmi $2379			bmi 	_DeRefString 				; string, 2 bytes only
.236c	d0 11		bne $237f			bne 	_DeRefByte 					; byte 1 byte only
.236e					_DeRefLong:
.236e	a0 03		ldy #$03			ldy 	#3
.2370	b1 2a		lda ($2a),y			lda 	(temp0),y
.2372	95 60		sta $60,x			sta 	esInt3,x
.2374	88		dey				dey
.2375	b1 2a		lda ($2a),y			lda 	(temp0),y
.2377	95 58		sta $58,x			sta 	esInt2,x
.2379					_DeRefString:
.2379	a0 01		ldy #$01			ldy 	#1
.237b	b1 2a		lda ($2a),y			lda 	(temp0),y
.237d	95 50		sta $50,x			sta 	esInt1,x
.237f					_DeRefByte:
.237f	a0 00		ldy #$00			ldy 	#0
.2381	b1 2a		lda ($2a),y			lda 	(temp0),y
.2383	95 48		sta $48,x			sta 	esInt0,x
.2385	b5 40		lda $40,x			lda 	esType,x 					; clear byte and deref bits.
.2387	29 40		and #$40			and 	#$40
.2389	95 40		sta $40,x			sta 	esType,x
.238b	68		pla				pla
.238c	a8		tay				tay
.238d					_DRNotReference
.238d	60		rts				rts
.238e					_DRFloatDereference:
.238e	20 80 19	jsr $1980			jsr 	TOSToTemp0 					; address to deref in temp0
.2391	8a		txa				txa
.2392	a2 1c		ldx #$1c		ldx	#28
.2394	20 bb 14	jsr $14bb		jsr	floatingpointHandler
.2397	aa		tax				tax
.2398	a9 01		lda #$01			lda 	#$01 						; type to FP (float)
.239a	95 40		sta $40,x			sta 	esType,x
.239c	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/evaluate.asm

.239d					EvaluateLevel:
.239d	48		pha				pha 								; save precedence level.
.239e	a9 00		lda #$00			lda 	#0 							; zero the current stack level.
.23a0	95 48		sta $48,x			sta 	esInt0,x
.23a2	95 50		sta $50,x			sta 	esInt1,x
.23a4	95 58		sta $58,x			sta 	esInt2,x
.23a6	95 60		sta $60,x			sta 	esInt3,x
.23a8	95 40		sta $40,x			sta 	esType,x 					; zero the type (integer value)
.23aa	b1 28		lda ($28),y			lda 	(codePtr),y	 				; look at first token/character
.23ac	30 21		bmi $23cf			bmi 	_ELIsToken 					; if -ve could be string, float, or unary function.
.23ae	0a		asl a				asl 	a 							; if 00-3F then will now be PL and it's a variable.
.23af	30 0a		bmi $23bb			bmi 	_ELIsConstant 				; 40-7F will be -ve and that's an integer constant.
.23b1	8a		txa				txa 								; stack level in X
.23b2	a2 00		ldx #$00		ldx	#0
.23b4	20 da 38	jsr $38da		jsr	variableHandler
.23b7	aa		tax				tax
.23b8	4c f8 23	jmp $23f8			jmp		_ELHasTerm
.23bb					_ELIsConstant:
.23bb	4a		lsr a				lsr 	a 							; get the value back
.23bc	29 3f		and #$3f			and 	#$3F 						; force into range 0-63
.23be	95 48		sta $48,x			sta 	esInt0,x 					; and put in LSB.
.23c0					_ELCheckNext:
.23c0	c8		iny				iny 								; look at next
.23c1	b1 28		lda ($28),y			lda 	(codePtr),y
.23c3	49 40		eor #$40			eor 	#$40 						; shift around so 40-7F => 00-3F
.23c5	c9 40		cmp #$40			cmp 	#$40 						; out of range ?
.23c7	b0 2f		bcs $23f8			bcs 	_ELHasTerm 					; done getting the constant.
.23c9	20 91 24	jsr $2491			jsr 	ELShiftByteIn 				; shift byte into position.
.23cc	4c c0 23	jmp $23c0			jmp 	_ELCheckNext
.23cf					_ELIsToken:
.23cf	c9 85		cmp #$85			cmp 	#TOK_STR 					; handle strings.
.23d1	f0 0f		beq $23e2			beq 	_ELIsString
.23d3	c9 84		cmp #$84			cmp 	#TOK_FPC 					; if no, then check unary.
.23d5	d0 5f		bne $2436			bne 	_ELCheckUnary
.23d7	8a		txa				txa 								; put X into A
.23d8	c8		iny				iny 								; skip over the float marker
.23d9	a2 18		ldx #$18		ldx	#24
.23db	20 bb 14	jsr $14bb		jsr	floatingpointHandler
.23de	aa		tax				tax 								; restore X
.23df	4c f8 23	jmp $23f8			jmp 	_ELHasTerm
.23e2					_ELIsString:
.23e2	98		tya				tya 								; address of string is codePtr+y+1
.23e3	38		sec				sec
.23e4	65 28		adc $28				adc 	codePtr
.23e6	95 48		sta $48,x			sta 	esInt0,x
.23e8	a5 29		lda $29				lda 	codePtr+1
.23ea	69 00		adc #$00			adc 	#0
.23ec	95 50		sta $50,x			sta 	esInt1,x
.23ee	a9 40		lda #$40			lda 	#$40 						; set type to string value
.23f0	95 40		sta $40,x			sta 	esType,x
.23f2	c8		iny				iny 								; skip over string.
.23f3	98		tya				tya
.23f4	38		sec				sec									; +1 for the length itself.
.23f5	71 28		adc ($28),y			adc 	(codePtr),y
.23f7	a8		tay				tay 								; and fall through to term loop code.
.23f8					_ELHasTerm:
.23f8	b1 28		lda ($28),y			lda 	(codePtr),y
.23fa	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; check in the correct range for binary tokens.
.23fc	90 04		bcc $2402			bcc 	_ELPopExit
.23fe	c9 99		cmp #$99			cmp 	#TOK_STRUCTST
.2400	90 02		bcc $2404			bcc 	_ELHasBinaryTerm
.2402					_ELPopExit:
.2402	68		pla				pla
.2403					_ELExit:
.2403	60		rts				rts
.2404					_ELHasBinaryTerm:
.2404	84 32		sty $32				sty 	tempShort 					; save position
.2406	a8		tay				tay 								; use token as an index and get the precedence.
.2407	b9 39 24	lda $2439,y			lda 	ELBinaryOperatorInfo-TOK_BINARYST,y
.240a	a4 32		ldy $32				ldy 	tempShort 					; restore Y
.240c	85 32		sta $32				sta 	tempShort 					; save precedence in memory.
.240e	68		pla				pla 								; restore current level.
.240f	c5 32		cmp $32				cmp 	tempShort 					; if current >= operator then exit
.2411	b0 f0		bcs $2403			bcs 	_ELExit
.2413	48		pha				pha 								; save current level back on the stack.
.2414	b1 28		lda ($28),y			lda 	(codePtr),y 				; save the binary operator on the stack and skip it.
.2416	48		pha				pha
.2417	c8		iny				iny
.2418	e8		inx				inx 								; calculate the RHS at the operator precedence.
.2419	a5 32		lda $32				lda 	tempShort
.241b	20 9d 23	jsr $239d			jsr 	EvaluateLevel
.241e	ca		dex				dex
.241f	68		pla				pla 								; get the operator back out.
.2420					_ELExecuteA:
.2420	86 32		stx $32				stx 	tempShort 					; upload the vectors. Would be nice to use jmp (aaaa,x)
.2422	0a		asl a				asl 	a 							; but not practical. May use push/rts later.
.2423	aa		tax				tax
.2424	bd 0c 1e	lda $1e0c,x			lda 	Group0Vectors,x
.2427	85 2a		sta $2a				sta 	temp0
.2429	bd 0d 1e	lda $1e0d,x			lda 	Group0Vectors+1,x
.242c	85 2b		sta $2b				sta 	temp0+1
.242e	a6 32		ldx $32				ldx 	tempShort
.2430	20 7d 24	jsr $247d			jsr 	_ELCallTemp0
.2433	4c f8 23	jmp $23f8			jmp 	_ELHasTerm 					; and loop back round.
.2436					_ELCheckUnary:
.2436	c8		iny				iny 								; skip over token.
.2437	c9 90		cmp #$90			cmp 	#TKW_MINUS 					; is it - term
.2439	f0 19		beq $2454			beq 	_ELMinus
.243b	c9 97		cmp #$97			cmp 	#TKW_PLING 					; is it ! or ? term
.243d	f0 2c		beq $246b			beq 	_ELIndirect
.243f	c9 98		cmp #$98			cmp 	#TKW_QMARK
.2441	f0 28		beq $246b			beq 	_ELIndirect
.2443	c9 83		cmp #$83			cmp 	#TOK_SHIFT3 				; is it the unary extension.
.2445	f0 39		beq $2480			beq 	_ELExtension
.2447	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST 				; must be TOK_UNARYST ... TOK_TOKENS
.2449	90 04		bcc $244f			bcc 	_ELUSyntax
.244b	c9 c6		cmp #$c6			cmp 	#TOK_TOKENS
.244d	90 d1		bcc $2420			bcc 	_ELExecuteA 				; if so do that token.
.244f					_ELUSyntax:
.244f	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.2451	20 83 11	jsr $1183		jsr	errorHandler
.2454					_ELMinus:
.2454	20 69 25	jsr $2569			jsr 	EvaluateNumericTerm 		; get a number to negate.
.2457	b5 40		lda $40,x			lda 	esType,x 					; is it integer
.2459	f0 0a		beq $2465			beq 	_ELMinusInteger
.245b	8a		txa				txa
.245c	a2 0c		ldx #$0c		ldx	#12
.245e	20 bb 14	jsr $14bb		jsr	floatingpointHandler
.2461	aa		tax				tax
.2462	4c f8 23	jmp $23f8			jmp 	_ELHasTerm
.2465					_ELMinusInteger:
.2465	20 bc 2a	jsr $2abc			jsr 	MInt32Negate 				; do int negate
.2468	4c f8 23	jmp $23f8			jmp 	_ELHasTerm
.246b					_ELIndirect:
.246b	48		pha				pha 								; save what we want (TKW_QMARK TWK_PLING)
.246c	20 72 25	jsr $2572			jsr 	EvaluateIntegerTerm 		; integer address
.246f	68		pla				pla
.2470	49 97		eor #$97			eor 	#TKW_PLING 					; now $00 if !
.2472	f0 02		beq $2476			beq 	_ELHaveModifier
.2474	a9 20		lda #$20			lda 	#$20 						; now $00 if !, $20 if ?
.2476					_ELHaveModifier:
.2476	09 80		ora #$80			ora 	#$80						; make it the appropriate reference.
.2478	95 40		sta $40,x			sta 	esType,x 					; $80 for ! $A0 for ?
.247a	4c f8 23	jmp $23f8			jmp 	_ELHasTerm
.247d					_ELCallTemp0:
.247d	6c 2a 00	jmp ($002a)			jmp 	(temp0)
.2480					_ELExtension:
.2480	8a		txa				txa 								; stack pos in A
.2481	20 30 14	jsr $1430		jsr	extensionHandler
.2484	aa		tax				tax 								; restore stack
.2485	4c f8 23	jmp $23f8			jmp 	_ELHasTerm
.2488					UnaryParenthesis:
.2488	a9 00		lda #$00			lda 	#0 							; ( is a unary function ....
.248a	20 9d 23	jsr $239d			jsr 	EvaluateLevel
.248d	20 75 2b	jsr $2b75			jsr 	CheckRightParen 			; check for )
.2490	60		rts				rts
.2491					ELShiftByteIn:
.2491	48		pha				pha 								; save bits to shift in.
.2492	b5 60		lda $60,x			lda 	esInt3,x 					; save top most byte
.2494	48		pha				pha
.2495	b5 58		lda $58,x			lda 	esInt2,x 					; shift everything left 8 bits
.2497	95 60		sta $60,x			sta 	esInt3,x
.2499	b5 50		lda $50,x			lda 	esInt1,x
.249b	95 58		sta $58,x			sta 	esInt2,x
.249d	b5 48		lda $48,x			lda 	esInt0,x
.249f	95 50		sta $50,x			sta 	esInt1,x
.24a1	a9 00		lda #$00			lda 	#0
.24a3	95 48		sta $48,x			sta 	esInt0,x
.24a5	68		pla				pla 								; now A:TOS is a 5 byte register, shift right twice.
.24a6	29 03		and #$03			and 	#3 							; only want lower 2 bits
.24a8	09 04		ora #$04			ora 	#4  						; set bit 2 - when 1 we are done
.24aa					_ELShiftLoop:
.24aa	4a		lsr a				lsr 	a
.24ab	76 60		ror $60,x			ror 	esInt3,x
.24ad	76 58		ror $58,x			ror 	esInt2,x
.24af	76 50		ror $50,x			ror 	esInt1,x
.24b1	76 48		ror $48,x			ror 	esInt0,x
.24b3	c9 01		cmp #$01			cmp 	#1
.24b5	d0 f3		bne $24aa			bne 	_ELShiftLoop
.24b7	68		pla				pla 								; get original 6 bit value and OR in.
.24b8	29 3f		and #$3f			and 	#$3F
.24ba	15 48		ora $48,x			ora 	esInt0,x
.24bc	95 48		sta $48,x			sta 	esInt0,x
.24be	60		rts				rts
.24bf					ELBinaryOperatorInfo:

;******  Processing file: main/evaluate/../../generated/binarystructinfo.inc

>24bf	01					.byte	$01			; $86 and
>24c0	01					.byte	$01			; $87 or
>24c1	01					.byte	$01			; $88 xor
>24c2	02					.byte	$02			; $89 >=
>24c3	02					.byte	$02			; $8a <=
>24c4	02					.byte	$02			; $8b >
>24c5	02					.byte	$02			; $8c <
>24c6	02					.byte	$02			; $8d =
>24c7	02					.byte	$02			; $8e <>
>24c8	03					.byte	$03			; $8f +
>24c9	03					.byte	$03			; $90 -
>24ca	04					.byte	$04			; $91 >>
>24cb	04					.byte	$04			; $92 <<
>24cc	04					.byte	$04			; $93 *
>24cd	04					.byte	$04			; $94 /
>24ce	04					.byte	$04			; $95 mod
>24cf	05					.byte	$05			; $96 ^
>24d0	06					.byte	$06			; $97 !
>24d1	06					.byte	$06			; $98 ?
>24d2	82					.byte	$82			; $99 repeat
>24d3	82					.byte	$82			; $9a while
>24d4	82					.byte	$82			; $9b for
>24d5	82					.byte	$82			; $9c if
>24d6	82					.byte	$82			; $9d defproc
>24d7	80					.byte	$80			; $9e until
>24d8	80					.byte	$80			; $9f wend
>24d9	80					.byte	$80			; $a0 next
>24da	80					.byte	$80			; $a1 then
>24db	80					.byte	$80			; $a2 endif
>24dc	80					.byte	$80			; $a3 endproc

;******  Return to file: main/evaluate/evaluate.asm


;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/event.asm

.24dd					EventFunction:
.24dd	20 d3 25	jsr $25d3			jsr 	EvaluateReference			; get the variable reference that tracks the event
.24e0	b5 40		lda $40,x			lda 	esType,x
.24e2	c9 80		cmp #$80			cmp 	#$80 						; must be integer reference
.24e4	d0 5b		bne $2541			bne 	_EFType
.24e6	20 82 2b	jsr $2b82			jsr 	CheckComma
.24e9	e8		inx				inx
.24ea	20 a0 25	jsr $25a0			jsr 	EvaluateInteger		 		; get the elapsed time between firing.
.24ed	20 75 2b	jsr $2b75			jsr 	CheckRightParen 			; finish off with the right bracket
.24f0	ca		dex				dex
.24f1	b5 50		lda $50,x			lda 	esInt1,x 					; check max of 32767, we use 16 bit for timers and
.24f3	29 80		and #$80			and 	#$80 						; it doesn't work > 32767
.24f5	15 58		ora $58,x			ora 	esInt2,x
.24f7	15 60		ora $60,x			ora 	esInt3,x
.24f9	d0 41		bne $253c			bne 	_EFValue
.24fb	98		tya				tya
.24fc	48		pha				pha
.24fd	8a		txa				txa
.24fe	48		pha				pha
.24ff	a2 1a		ldx #$1a		ldx	#26
.2501	20 64 11	jsr $1164		jsr	deviceHandler
.2504	84 2d		sty $2d				sty 	temp1+1
.2506	85 2c		sta $2c				sta 	temp1
.2508	68		pla				pla
.2509	aa		tax				tax
.250a	20 80 19	jsr $1980			jsr 	TOSToTemp0 					; set temp0 to the address of the event variable
.250d	a0 03		ldy #$03			ldy 	#3							; if -ve
.250f	b1 2a		lda ($2a),y			lda 	(temp0),y
.2511	30 23		bmi $2536			bmi 	_EFFail 	 				; straight out with fail, means "on pause".
.2513	a0 00		ldy #$00			ldy 	#0 							; is the fire time zero ?
.2515	b1 2a		lda ($2a),y			lda 	(temp0),y
.2517	c8		iny				iny
.2518	11 2a		ora ($2a),y			ora 	(temp0),y
.251a	f0 17		beq $2533			beq 	_EFInitialise 				; if so, initialise the value but return false.
.251c	a0 00		ldy #$00			ldy 	#0 							; calculate trigger - timer
.251e	38		sec				sec
.251f	b1 2a		lda ($2a),y			lda 	(temp0),y
.2521	e5 2c		sbc $2c				sbc 	temp1
.2523	c8		iny				iny
.2524	b1 2a		lda ($2a),y			lda 	(temp0),y
.2526	e5 2d		sbc $2d				sbc 	temp1+1
.2528	10 0c		bpl $2536			bpl 	_EFFail 					; if trigger >= timer then return False
.252a	20 46 25	jsr $2546			jsr 	SetEventTimer 				; reset the timer for next time.
.252d	20 fe 2a	jsr $2afe			jsr	 	MInt32True 					; and treutn true as fired.
.2530	68		pla				pla
.2531	a8		tay				tay
.2532	60		rts				rts
.2533					_EFInitialise:
.2533	20 46 25	jsr $2546			jsr		SetEventTimer 				; set trigger time to time + elapsed
.2536					_EFFail:
.2536	68		pla				pla
.2537	a8		tay				tay
.2538	20 02 2b	jsr $2b02			jsr 	MInt32False
.253b	60		rts				rts
.253c					_EFValue:
.253c	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.253e	20 83 11	jsr $1183		jsr	errorHandler
.2541					_EFType:
.2541	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.2543	20 83 11	jsr $1183		jsr	errorHandler
.2546					SetEventTimer:
.2546	a0 00		ldy #$00			ldy 	#0
.2548	18		clc				clc
.2549	a5 2c		lda $2c				lda 	temp1
.254b	75 49		adc $49,x			adc 	esInt0+1,x
.254d	91 2a		sta ($2a),y			sta		(temp0),y
.254f	c8		iny				iny
.2550	a5 2d		lda $2d				lda 	temp1+1
.2552	75 51		adc $51,x			adc 	esInt1+1,x
.2554	91 2a		sta ($2a),y			sta		(temp0),y
.2556	88		dey				dey
.2557	11 2a		ora ($2a),y			ora 	(temp0),y 					; if the result is non zero, exit
.2559	d0 04		bne $255f			bne 	_SETExit 					; zero means initialise.....
.255b	a9 01		lda #$01			lda 	#1 							; timer zero won't work, so make it 1, which is
.255d	91 2a		sta ($2a),y			sta 	(temp0),y 					; near enough.
.255f					_SETExit:
.255f	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/support.asm

.2560					EvaluateTerm:
.2560	a9 0f		lda #$0f			lda 	#15 						; no binary operator has this high a precedence.
.2562	20 9d 23	jsr $239d			jsr 	EvaluateLevel
.2565	20 4c 23	jsr $234c			jsr 	DereferenceOne
.2568	60		rts				rts
.2569					EvaluateNumericTerm:
.2569	20 60 25	jsr $2560			jsr 	EvaluateTerm
.256c	b5 40		lda $40,x			lda 	esType,x
.256e	0a		asl a				asl 	a 							; see if it's a string.
.256f	30 09		bmi $257a			bmi 	ENTType
.2571	60		rts				rts
.2572					EvaluateIntegerTerm:
.2572	20 60 25	jsr $2560			jsr 	EvaluateTerm
.2575	b5 40		lda $40,x			lda 	esType,x
.2577	d0 01		bne $257a			bne 	ENTType
.2579	60		rts				rts
.257a					ENTType:
.257a	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.257c	20 83 11	jsr $1183		jsr	errorHandler
.257f					EvaluateRoot:
.257f	a2 00		ldx #$00			ldx 	#0
.2581					Evaluate:
.2581	a9 00		lda #$00			lda 	#0
.2583	20 9d 23	jsr $239d			jsr 	EvaluateLevel
.2586	20 4c 23	jsr $234c			jsr 	DereferenceOne
.2589	60		rts				rts
.258a					EvaluateNumeric:
.258a	20 81 25	jsr $2581			jsr 	Evaluate
.258d	b5 40		lda $40,x			lda 	esType,x
.258f	0a		asl a				asl 	a 							; see if it's a string.
.2590	30 e8		bmi $257a			bmi 	ENTType
.2592	4a		lsr a				lsr 	a 							; shift float flag into carry.
.2593	4a		lsr a				lsr 	a
.2594	60		rts				rts
.2595					EvaluateString:
.2595	20 81 25	jsr $2581			jsr 	Evaluate
.2598	b5 40		lda $40,x			lda 	esType,x
.259a	0a		asl a				asl 	a 							; see if it's a string.
.259b	10 dd		bpl $257a			bpl 	ENTType
.259d	60		rts				rts
.259e					EvaluateRootInteger:
.259e	a2 00		ldx #$00			ldx 	#0
.25a0					EvaluateInteger:
.25a0	20 81 25	jsr $2581			jsr 	Evaluate
.25a3	b5 40		lda $40,x			lda 	esType,x
.25a5	d0 d3		bne $257a			bne 	ENTType
.25a7	60		rts				rts
.25a8					EvaluateSmallInteger:
.25a8	20 a0 25	jsr $25a0			jsr 	EvaluateInteger
.25ab	b5 50		lda $50,x			lda 	esInt1,x
.25ad	15 58		ora $58,x			ora 	esInt2,x
.25af	15 60		ora $60,x			ora 	esInt3,x
.25b1	d0 03		bne $25b6			bne 	_ESIValue
.25b3	b5 48		lda $48,x			lda 	esInt0,x
.25b5	60		rts				rts
.25b6					_ESIValue:
.25b6	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.25b8	20 83 11	jsr $1183		jsr	errorHandler
.25bb					LinkEvaluate:
.25bb	aa		tax				tax
.25bc	20 81 25	jsr $2581			jsr 	Evaluate
.25bf	8a		txa				txa
.25c0	60		rts				rts
.25c1					LinkEvaluateTerm:
.25c1	aa		tax				tax
.25c2	20 60 25	jsr $2560			jsr 	EvaluateTerm
.25c5	8a		txa				txa
.25c6	60		rts				rts
.25c7					LinkEvaluateInteger:
.25c7	aa		tax				tax
.25c8	20 a0 25	jsr $25a0			jsr 	EvaluateInteger
.25cb	8a		txa				txa
.25cc	60		rts				rts
.25cd					LinkEvaluateSmallInt:
.25cd	aa		tax				tax
.25ce	20 a8 25	jsr $25a8			jsr 	EvaluateSmallInteger
.25d1	8a		txa				txa
.25d2	60		rts				rts
.25d3					EvaluateReference:
.25d3	ad d0 24	lda $24d0			lda 	ELBinaryOperatorInfo+TKW_PLING-TOK_BINARYST
.25d6	38		sec				sec 								; sub 1 to allow a!x b?x to work.
.25d7	e9 01		sbc #$01			sbc 	#1
.25d9	20 9d 23	jsr $239d			jsr 	EvaluateLevel
.25dc	b5 40		lda $40,x			lda 	esType,x
.25de	10 01		bpl $25e1			bpl 	_ERFail
.25e0	60		rts				rts
.25e1					_ERFail:
.25e1	a2 0b		ldx #$0b			ldx 	#ErrorID_NoReference
.25e3	20 83 11	jsr $1183		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary.asm

.25e6					UnaryLen:
.25e6	20 f4 25	jsr $25f4			jsr 	ULStart
.25e9					ULFinish:
.25e9	b1 2a		lda ($2a),y			lda 	(temp0),y 					; get length prefix
.25eb	a4 32		ldy $32				ldy 	tempShort 					; get Y back
.25ed	20 11 2b	jsr $2b11			jsr 	MInt32Set8Bit 				; write it out.
.25f0	20 75 2b	jsr $2b75			jsr 	CheckRightParen
.25f3	60		rts				rts
.25f4	20 95 25	jsr $2595	ULStart:jsr 	EvaluateString
.25f7	b5 48		lda $48,x			lda 	esInt0,x 					; copy address of string to temp0
.25f9	85 2a		sta $2a				sta 	temp0
.25fb	b5 50		lda $50,x			lda 	esInt1,x
.25fd	85 2b		sta $2b				sta 	temp0+1
.25ff	84 32		sty $32				sty 	tempShort 					; get length
.2601	a0 00		ldy #$00			ldy 	#0
.2603	60		rts				rts
.2604					UnaryAsc:
.2604	20 f4 25	jsr $25f4			jsr 	ULStart 					; same as LEN() get string, save Y, point to length.
.2607	b1 2a		lda ($2a),y			lda 	(temp0),y 					; read length
.2609	c8		iny				iny 		 						; point to first character, we can do LEN code after that
.260a	c9 00		cmp #$00			cmp 	#0
.260c	d0 db		bne $25e9			bne 	ULFinish 					; if length = 0 then error : asc("") -> error.
.260e	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.2610	20 83 11	jsr $1183		jsr	errorHandler
.2613					UnaryAbs:
.2613	20 8a 25	jsr $258a			jsr 	EvaluateNumeric 			; some numeric value
.2616	b0 07		bcs $261f			bcs 	_UAFloat 					; CS then float, so use that function
.2618	20 b7 2a	jsr $2ab7			jsr 	MInt32Absolute 				; int version
.261b	20 75 2b	jsr $2b75			jsr 	CheckRightParen
.261e	60		rts				rts
.261f					_UAFloat:
.261f	8a		txa				txa 								; float version
.2620	a2 00		ldx #$00		ldx	#0
.2622	20 bb 14	jsr $14bb		jsr	floatingpointHandler
.2625	aa		tax				tax
.2626	20 75 2b	jsr $2b75			jsr 	CheckRightParen
.2629	60		rts				rts
.262a					UnarySgn:
.262a	20 8a 25	jsr $258a			jsr 	EvaluateNumeric 			; same as above but sign of value
.262d	b0 07		bcs $2636			bcs 	_USFloat
.262f	20 ef 2a	jsr $2aef			jsr 	MInt32Sign
.2632	20 75 2b	jsr $2b75			jsr 	CheckRightParen
.2635	60		rts				rts
.2636					_USFloat:
.2636	8a		txa				txa
.2637	a2 0e		ldx #$0e		ldx	#14
.2639	20 bb 14	jsr $14bb		jsr	floatingpointHandler
.263c	aa		tax				tax
.263d	20 75 2b	jsr $2b75			jsr 	CheckRightParen
.2640	60		rts				rts
.2641					UnaryPeek:
.2641	20 6d 26	jsr $266d			jsr 	PDLCode 					; each has common setup code put reads 1,2 or 4 bytes
.2644	4c 61 26	jmp $2661			jmp 	PDLByte0
.2647					UnaryDeek:
.2647	20 6d 26	jsr $266d			jsr 	PDLCode
.264a	4c 5b 26	jmp $265b			jmp 	PDLByte1
.264d					UnaryLeek:
.264d	20 6d 26	jsr $266d			jsr 	PDLCode
.2650	a0 03		ldy #$03			ldy 	#3							; read 3-2
.2652	b1 2a		lda ($2a),y			lda 	(temp0),y
.2654	95 60		sta $60,x			sta 	esInt3,x
.2656	88		dey				dey
.2657	b1 2a		lda ($2a),y			lda 	(temp0),y
.2659	95 58		sta $58,x			sta 	esInt2,x
.265b					PDLByte1:
.265b	a0 01		ldy #$01			ldy 	#1
.265d	b1 2a		lda ($2a),y			lda 	(temp0),y
.265f	95 50		sta $50,x			sta 	esInt1,x
.2661					PDLByte0:
.2661	a0 00		ldy #$00			ldy 	#0
.2663	b1 2a		lda ($2a),y			lda 	(temp0),y
.2665	95 48		sta $48,x			sta 	esInt0,x
.2667	a4 32		ldy $32				ldy 	tempShort 					; restore Y
.2669	20 75 2b	jsr $2b75			jsr 	CheckRightParen 			; check right and return
.266c	60		rts				rts
.266d					PDLCode:
.266d	20 a0 25	jsr $25a0			jsr 	EvaluateInteger 			; some address
.2670	b5 48		lda $48,x			lda 	esInt0,x 					; copy address of string to temp0
.2672	85 2a		sta $2a				sta 	temp0
.2674	b5 50		lda $50,x			lda 	esInt1,x
.2676	85 2b		sta $2b				sta 	temp0+1
.2678	a9 00		lda #$00			lda 	#0 							; zero upper 3 bytes of result, type okay.
.267a	95 50		sta $50,x			sta 	esInt1,x 					; PEEK needs upper 3 cleared
.267c	95 58		sta $58,x			sta 	esInt2,x
.267e	95 60		sta $60,x			sta 	esInt3,x
.2680	84 32		sty $32				sty 	tempShort 					; save Y
.2682	60		rts				rts
.2683					Unary_Random:
.2683	20 32 2b	jsr $2b32			jsr 	MInt32Random 				; generate random number.
.2686	b1 28		lda ($28),y			lda 	(codePtr),y 				; check followed by )
.2688	c9 c6		cmp #$c6			cmp 	#TKW_RPAREN
.268a	f0 08		beq $2694			beq 	_URExit
.268c	e8		inx				inx 								; load range 0..r-1 into +1
.268d	20 a0 25	jsr $25a0			jsr 	EvaluateInteger
.2690	ca		dex				dex
.2691	20 55 29	jsr $2955			jsr 	MInt32Modulus 				; calculate random % modulus
.2694					_URExit:
.2694	20 75 2b	jsr $2b75			jsr 	CheckRightParen 			; check right and return
.2697	60		rts				rts
.2698					Unary_Min:
.2698	a9 01		lda #$01			lda 	#1 							; c1 cmp c2 needs to be > e.g. c1 > c2
.269a	d0 02		bne $269e			bne 	UnaryMBody
.269c					Unary_Max:
.269c	a9 ff		lda #$ff			lda 	#$FF 						; c1 cmp c2 needs to be < e.g. c1 < c2
.269e					UnaryMBody:
.269e	48		pha				pha 								; save comparator on stack, shows min or max
.269f	20 81 25	jsr $2581			jsr 	Evaluate 					; get the first thing to check
.26a2					_UnaryMLoop:
.26a2	b1 28		lda ($28),y			lda 	(codePtr),y 				; found ), indicates end.
.26a4	c8		iny				iny
.26a5	c9 c6		cmp #$c6			cmp 	#TKW_RPAREN
.26a7	f0 09		beq $26b2			beq 	_UnaryMExit
.26a9	c9 c8		cmp #$c8			cmp 	#TKW_COMMA 					; found , indicates more.
.26ab	f0 07		beq $26b4			beq 	_UnaryMCompare
.26ad	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.26af	20 83 11	jsr $1183		jsr	errorHandler
.26b2					_UnaryMExit:
.26b2	68		pla				pla 								; done so throw comparator and return.
.26b3	60		rts				rts
.26b4					_UnaryMCompare:
.26b4	e8		inx				inx 								; get the 2nd thing to evaluate
.26b5	20 81 25	jsr $2581			jsr 	Evaluate
.26b8	ca		dex				dex
.26b9	20 4f 22	jsr $224f			jsr 	PerformComparison 			; this is part of evaluate/compare.asm
.26bc	85 32		sta $32				sta 	tempShort 					; save result
.26be	68		pla				pla 								; get what we need
.26bf	48		pha				pha
.26c0	c5 32		cmp $32				cmp 	tempShort 					; did we get it
.26c2	d0 de		bne $26a2			bne 	_UnaryMLoop 				; no, try another value.
.26c4	20 02 2b	jsr $2b02			jsr 	MInt32False 				; promote 2nd to 1st.
.26c7	20 e6 29	jsr $29e6			jsr 	MInt32Add
.26ca	4c a2 26	jmp $26a2			jmp 	_UnaryMLoop
.26cd					Unary_Page:
.26cd	20 02 2b	jsr $2b02			jsr 	MInt32False 				; zero
.26d0	ad c8 0a	lda $0ac8			lda 	basePage 					; copy base page address in.
.26d3	95 48		sta $48,x			sta 	esInt0,x
.26d5	ad c9 0a	lda $0ac9			lda 	basePage+1
.26d8	95 50		sta $50,x			sta 	esInt1,x
.26da	60		rts				rts
.26db					UnaryReference:
.26db	a9 0f		lda #$0f			lda 	#15
.26dd	20 9d 23	jsr $239d			jsr 	EvaluateLevel 				; evaluate term and don't deference.
.26e0	b5 40		lda $40,x			lda 	esType,x 					; check it's a reference.
.26e2	10 05		bpl $26e9			bpl 	UType
.26e4	a9 00		lda #$00			lda 	#0 							; make it an integer
.26e6	95 40		sta $40,x			sta 	esType,x
.26e8	60		rts				rts
.26e9					UType:
.26e9	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.26eb	20 83 11	jsr $1183		jsr	errorHandler
.26ee					UnaryHexMarker:
.26ee	4c 72 25	jmp $2572			jmp 	EvaluateIntegerTerm
.26f1					UnaryComplement:
.26f1	20 72 25	jsr $2572			jsr 	EvaluateIntegerTerm
.26f4	20 d6 2a	jsr $2ad6			jsr 	MInt32Not
.26f7	60		rts				rts
.26f8					UnaryIntToFloat:
.26f8	20 8a 25	jsr $258a			jsr 	EvaluateNumeric				; some number
.26fb	b5 40		lda $40,x			lda 	esType,x 					; if float already, exit
.26fd	d0 0b		bne $270a			bne 	_UIFExit
.26ff	8a		txa				txa 								; convert and set type
.2700	a2 1a		ldx #$1a		ldx	#26
.2702	20 bb 14	jsr $14bb		jsr	floatingpointHandler
.2705	aa		tax				tax
.2706	a9 01		lda #$01			lda 	#1
.2708	95 40		sta $40,x			sta 	esType,x
.270a					_UIFExit:
.270a	60		rts				rts
.270b					UnaryFloatToInt:
.270b	20 8a 25	jsr $258a			jsr 	EvaluateNumeric 			; the number
.270e	b5 40		lda $40,x			lda 	esType,x 					; if int already exit
.2710	f0 0b		beq $271d			beq 	_UFIExit
.2712	8a		txa				txa 								; convert to int
.2713	a2 12		ldx #$12		ldx	#18
.2715	20 bb 14	jsr $14bb		jsr	floatingpointHandler
.2718	aa		tax				tax
.2719	a9 00		lda #$00			lda 	#0 							; set type
.271b	95 40		sta $40,x			sta 	esType,x
.271d					_UFIExit:
.271d	60		rts				rts
.271e					UnaryAlloc:
.271e	e8		inx				inx 								; evaluate memory required
.271f	20 a0 25	jsr $25a0			jsr 	EvaluateInteger
.2722	20 75 2b	jsr $2b75			jsr 	CheckRightParen
.2725	ca		dex				dex
.2726	b5 59		lda $59,x			lda 	esInt2+1,x 					; check at least in 64k range.
.2728	15 61		ora $61,x			ora 	esInt3+1,x
.272a	d0 19		bne $2745			bne 	_UABadValue
.272c	20 02 2b	jsr $2b02			jsr 	MInt32False					; zero return.
.272f	a5 36		lda $36				lda 	lowMemory+1 				; copy low memory in
.2731	95 50		sta $50,x			sta 	esInt1,x
.2733	a5 35		lda $35				lda 	lowMemory
.2735	95 48		sta $48,x			sta 	esInt0,x
.2737	18		clc				clc 								; add alloc required.
.2738	75 49		adc $49,x			adc 	esInt0+1,x
.273a	85 35		sta $35				sta 	lowMemory
.273c	a5 36		lda $36				lda 	lowMemory+1
.273e	75 51		adc $51,x			adc 	esInt1+1,x
.2740	85 36		sta $36				sta 	lowMemory+1
.2742	b0 01		bcs $2745			bcs		_UABadValue 				; overflow definitely bad.
.2744	60		rts				rts
.2745					_UABadValue:
.2745	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.2747	20 83 11	jsr $1183		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary2.asm

.274a					UnaryTimer:
.274a	20 75 2b	jsr $2b75			jsr 	CheckRightParen 			; no parameters
.274d	98		tya				tya
.274e	48		pha				pha
.274f	20 29 2b	jsr $2b29			jsr 	MInt32Zero 					; zero result
.2752	86 2a		stx $2a				stx 	temp0 						; returning in YA so can't use .pshx
.2754	a2 1a		ldx #$1a		ldx	#26
.2756	20 64 11	jsr $1164		jsr	deviceHandler
.2759	a6 2a		ldx $2a				ldx 	temp0						; restore X and update 16 bit result
.275b	95 48		sta $48,x			sta 	esInt0,x
.275d	98		tya				tya
.275e	95 50		sta $50,x			sta 	esInt1,x
.2760	68		pla				pla
.2761	a8		tay				tay
.2762	60		rts				rts
.2763					UnaryInkey:
.2763	20 75 2b	jsr $2b75			jsr 	CheckRightParen
.2766	86 2a		stx $2a				stx 	temp0
.2768	a2 0a		ldx #$0a		ldx	#10
.276a	20 64 11	jsr $1164		jsr	deviceHandler
.276d	a6 2a		ldx $2a				ldx 	temp0
.276f	20 11 2b	jsr $2b11			jsr 	MInt32Set8Bit
.2772	60		rts				rts
.2773					UnaryGet:
.2773	20 75 2b	jsr $2b75			jsr 	CheckRightParen
.2776	86 2a		stx $2a				stx 	temp0
.2778					_UGLoop:
.2778	a2 0a		ldx #$0a		ldx	#10
.277a	20 64 11	jsr $1164		jsr	deviceHandler
.277d	c9 00		cmp #$00			cmp 	#0
.277f	f0 f7		beq $2778			beq 	_UGLoop
.2781	a6 2a		ldx $2a				ldx 	temp0
.2783	20 11 2b	jsr $2b11			jsr 	MInt32Set8Bit
.2786	60		rts				rts
.2787					UnarySys:
.2787	20 a0 25	jsr $25a0			jsr 	EvaluateInteger 				; get the address
.278a	20 75 2b	jsr $2b75			jsr 	CheckRightParen
.278d	20 80 19	jsr $1980			jsr 	TOSToTemp0 						; copy call address to temp0
.2790	8a		txa				txa
.2791	48		pha				pha
.2792	98		tya				tya
.2793	48		pha				pha
.2794	ad 00 0a	lda $0a00			lda 	("A"-"A")*4+SingleLetterVar 	; load AXY
.2797	ae 5c 0a	ldx $0a5c			ldx 	("X"-"A")*4+SingleLetterVar
.279a	ac 60 0a	ldy $0a60			ldy 	("Y"-"A")*4+SingleLetterVar
.279d	20 ac 27	jsr $27ac			jsr 	_CallTemp0
.27a0	85 32		sta $32				sta 	tempShort 						; restore YX
.27a2	68		pla				pla
.27a3	a8		tay				tay
.27a4	68		pla				pla
.27a5	aa		tax				tax
.27a6	a5 32		lda $32				lda 	tempShort
.27a8	20 11 2b	jsr $2b11			jsr 	MInt32Set8Bit 					; return result.
.27ab	60		rts				rts
.27ac					_CallTemp0:
.27ac	6c 2a 00	jmp ($002a)			jmp 	(temp0)

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unarystr.asm

.27af					ExecChr:
.27af	20 a8 25	jsr $25a8			jsr 	EvaluateSmallInteger		; character number 0-255
.27b2	20 75 2b	jsr $2b75			jsr 	CheckRightParen				; right bracket
.27b5	98		tya				tya
.27b6	48		pha				pha
.27b7	8a		txa				txa 								; A = stack
.27b8	b4 48		ldy $48,x			ldy 	esInt0,x					; Y = character
.27ba	a2 00		ldx #$00		ldx	#0
.27bc	20 13 2f	jsr $2f13		jsr	stringHandler
.27bf	aa		tax				tax 								; X = stack
.27c0	68		pla				pla
.27c1	a8		tay				tay
.27c2	60		rts				rts
.27c3					ExecLower:
.27c3	38		sec				sec 								; set carry is lower
.27c4	b0 01		bcs $27c7			bcs 	ExecUpperLower
.27c6					ExecUpper:
.27c6	18		clc				clc 								; clear carry is upper
.27c7					ExecUpperLower:
.27c7	08		php				php 								; save carry
.27c8	20 95 25	jsr $2595			jsr 	EvaluateString 				; string to stack,X
.27cb	20 75 2b	jsr $2b75			jsr 	CheckRightParen 			; check closing right bracket.
.27ce	28		plp				plp 								; restore carry, save Y
.27cf	98		tya				tya
.27d0	48		pha				pha
.27d1	a9 00		lda #$00			lda 	#0 							; A zero if upper, 1 if lower.
.27d3	2a		rol a				rol 	a
.27d4	a8		tay				tay 								; now in Y
.27d5	8a		txa				txa 								; do the substring and exit.
.27d6	a2 08		ldx #$08		ldx	#8
.27d8	20 13 2f	jsr $2f13		jsr	stringHandler
.27db	aa		tax				tax
.27dc	68		pla				pla
.27dd	a8		tay				tay
.27de	60		rts				rts
.27df					ExecLeft:
.27df	20 95 25	jsr $2595			jsr 	EvaluateString 				; string to stack,X
.27e2	20 82 2b	jsr $2b82			jsr 	CheckComma
.27e5	e8		inx				inx
.27e6	a9 01		lda #$01			lda 	#1 							; 1 for 2nd parameter.
.27e8	20 11 2b	jsr $2b11			jsr 	MInt32Set8Bit
.27eb	e8		inx				inx
.27ec	20 a8 25	jsr $25a8			jsr 	EvaluateSmallInteger 		; smallint 3rd parameter
.27ef					ExecSubstring:
.27ef	ca		dex				dex 								; fix up X
.27f0	ca		dex				dex
.27f1	20 75 2b	jsr $2b75			jsr 	CheckRightParen 			; check closing right bracket.
.27f4	8a		txa				txa 								; do the substring and exit.
.27f5	a2 0a		ldx #$0a		ldx	#10
.27f7	20 13 2f	jsr $2f13		jsr	stringHandler
.27fa	aa		tax				tax
.27fb	60		rts				rts
.27fc					ExecMid:
.27fc	20 95 25	jsr $2595			jsr 	EvaluateString 				; string to stack,X
.27ff	20 82 2b	jsr $2b82			jsr 	CheckComma
.2802	e8		inx				inx
.2803	20 a8 25	jsr $25a8			jsr 	EvaluateSmallInteger 		; smallint 2nd parameter
.2806	c9 00		cmp #$00			cmp 	#0
.2808	f0 15		beq $281f			beq 	_EMValue
.280a	e8		inx				inx
.280b	a9 ff		lda #$ff			lda 	#255 						; 255 default for 3nd parameter - this is optional.
.280d	20 11 2b	jsr $2b11			jsr 	MInt32Set8Bit
.2810	b1 28		lda ($28),y			lda 	(codePtr),y 				; is there a ) next
.2812	c9 c6		cmp #$c6			cmp 	#TKW_RPAREN 				; if so, just MID$(a$,2)
.2814	f0 d9		beq $27ef			beq 	ExecSubString
.2816	20 82 2b	jsr $2b82			jsr 	CheckComma
.2819	20 a8 25	jsr $25a8			jsr 	EvaluateSmallInteger 		; smallint 2nd parameter
.281c	4c ef 27	jmp $27ef			jmp 	ExecSubString
.281f					_EMValue:
.281f	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.2821	20 83 11	jsr $1183		jsr	errorHandler
.2824					ExecRight:
.2824	20 95 25	jsr $2595			jsr 	EvaluateString 				; string to stack,X
.2827	20 82 2b	jsr $2b82			jsr 	CheckComma
.282a	e8		inx				inx
.282b	20 a8 25	jsr $25a8			jsr 	EvaluateSmallInteger 		; smallint 2nd parameter.
.282e	ca		dex				dex
.282f	98		tya				tya
.2830	48		pha				pha
.2831	b5 48		lda $48,x			lda 	esInt0,x 					; copy address of string to temp0
.2833	85 2a		sta $2a				sta 	temp0
.2835	b5 50		lda $50,x			lda 	esInt1,x
.2837	85 2b		sta $2b				sta 	temp0+1
.2839	a0 00		ldy #$00			ldy 	#0 							; point to length
.283b	b1 2a		lda ($2a),y			lda 	(temp0),y 					; get the length.
.283d	18		clc				clc 								; add 1.
.283e	69 01		adc #$01			adc 	#1
.2840	38		sec				sec
.2841	f5 49		sbc $49,x			sbc 	esInt0+1,x  				; subtract right count.
.2843	f0 02		beq $2847			beq		_ERMake1 					; if zero, make it 1.
.2845	b0 02		bcs $2849			bcs		_EROkay
.2847					_ERMake1:
.2847	a9 01		lda #$01			lda 	#1 							; start position.
.2849					_EROkay:
.2849	e8		inx				inx 								; set start pos.
.284a	95 48		sta $48,x			sta 	esInt0,x
.284c	e8		inx				inx
.284d	a9 ff		lda #$ff			lda 	#255 						; 255 default for 3nd parameter.
.284f	20 11 2b	jsr $2b11			jsr 	MInt32Set8Bit
.2852	68		pla				pla
.2853	a8		tay				tay
.2854	4c ef 27	jmp $27ef			jmp 	ExecSubString 				; do the substring code.

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32binary.asm

.2857					MInt32And:
.2857	b5 48		lda $48,x			lda 	esInt0,x
.2859	35 49		and $49,x			and 	esInt0+1,x
.285b	95 48		sta $48,x			sta 	esInt0,x
.285d	b5 50		lda $50,x			lda 	esInt1,x
.285f	35 51		and $51,x			and 	esInt1+1,x
.2861	95 50		sta $50,x			sta 	esInt1,x
.2863	b5 58		lda $58,x			lda 	esInt2,x
.2865	35 59		and $59,x			and 	esInt2+1,x
.2867	95 58		sta $58,x			sta 	esInt2,x
.2869	b5 60		lda $60,x			lda 	esInt3,x
.286b	35 61		and $61,x			and 	esInt3+1,x
.286d	95 60		sta $60,x			sta 	esInt3,x
.286f	60		rts				rts
.2870					MInt32Or:
.2870	b5 48		lda $48,x			lda 	esInt0,x
.2872	15 49		ora $49,x			ora 	esInt0+1,x
.2874	95 48		sta $48,x			sta 	esInt0,x
.2876	b5 50		lda $50,x			lda 	esInt1,x
.2878	15 51		ora $51,x			ora 	esInt1+1,x
.287a	95 50		sta $50,x			sta 	esInt1,x
.287c	b5 58		lda $58,x			lda 	esInt2,x
.287e	15 59		ora $59,x			ora 	esInt2+1,x
.2880	95 58		sta $58,x			sta 	esInt2,x
.2882	b5 60		lda $60,x			lda 	esInt3,x
.2884	15 61		ora $61,x			ora 	esInt3+1,x
.2886	95 60		sta $60,x			sta 	esInt3,x
.2888	60		rts				rts
.2889					MInt32Xor:
.2889	b5 48		lda $48,x			lda 	esInt0,x
.288b	55 49		eor $49,x			eor 	esInt0+1,x
.288d	95 48		sta $48,x			sta 	esInt0,x
.288f	b5 50		lda $50,x			lda 	esInt1,x
.2891	55 51		eor $51,x			eor 	esInt1+1,x
.2893	95 50		sta $50,x			sta 	esInt1,x
.2895	b5 58		lda $58,x			lda 	esInt2,x
.2897	55 59		eor $59,x			eor 	esInt2+1,x
.2899	95 58		sta $58,x			sta 	esInt2,x
.289b	b5 60		lda $60,x			lda 	esInt3,x
.289d	55 61		eor $61,x			eor 	esInt3+1,x
.289f	95 60		sta $60,x			sta 	esInt3,x
.28a1	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32compare.asm

.28a2					MInt32Compare:
.28a2	b5 48		lda $48,x			lda 	esInt0,x 					; equality check first.
.28a4	d5 49		cmp $49,x			cmp 	esInt0+1,x
.28a6	d0 13		bne $28bb			bne 	MInt32Compare2
.28a8	b5 50		lda $50,x			lda 	esInt1,x
.28aa	d5 51		cmp $51,x			cmp 	esInt1+1,x
.28ac	d0 0d		bne $28bb			bne 	MInt32Compare2
.28ae	b5 58		lda $58,x			lda 	esInt2,x
.28b0	d5 59		cmp $59,x			cmp 	esInt2+1,x
.28b2	d0 07		bne $28bb			bne 	MInt32Compare2
.28b4	b5 60		lda $60,x			lda 	esInt3,x
.28b6	55 61		eor $61,x			eor 	esInt3+1,x 					; EOR will return 0 if the same.
.28b8	d0 01		bne $28bb			bne 	MInt32Compare2
.28ba	60		rts				rts
.28bb					MInt32Compare2:
.28bb	b5 48		lda $48,x			lda		esInt0,x 					; unsigned 32 bit comparison.
.28bd	d5 49		cmp $49,x			cmp 	esInt0+1,x
.28bf	b5 50		lda $50,x			lda		esInt1,x
.28c1	f5 51		sbc $51,x			sbc 	esInt1+1,x
.28c3	b5 58		lda $58,x			lda		esInt2,x
.28c5	f5 59		sbc $59,x			sbc 	esInt2+1,x
.28c7	b5 60		lda $60,x			lda		esInt3,x
.28c9	f5 61		sbc $61,x			sbc 	esInt3+1,x
.28cb	50 02		bvc $28cf			bvc 	_I32LNoOverflow 			; make it signed 32 bit comparison
.28cd	49 80		eor #$80			eor 	#$80
.28cf					_I32LNoOverflow
.28cf	30 03		bmi $28d4			bmi 	MInt32CLess					; if -ve then return $FF
.28d1	a9 01		lda #$01			lda 	#$01						; else return $01
.28d3	60		rts				rts
.28d4					MInt32CLess:
.28d4	a9 ff		lda #$ff			lda 	#$FF
.28d6	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32divide.asm

.28d7					MInt32SDivide:
.28d7	98		tya				tya  								; save Y, which is the count of negations
.28d8	48		pha				pha
.28d9	a0 00		ldy #$00			ldy 	#0 							; zero count
.28db	20 f3 28	jsr $28f3			jsr 	_MInt32SRemSign 			; unsign TOS
.28de	e8		inx				inx 								; unsign TOS+1
.28df	20 f3 28	jsr $28f3			jsr 	_MInt32SRemSign
.28e2	ca		dex				dex
.28e3	98		tya				tya 								; save sign count on stack
.28e4	48		pha				pha
.28e5	20 fc 28	jsr $28fc			jsr 	MInt32UDivide 				; unsigned division
.28e8	68		pla				pla 								; get sign count back
.28e9	29 01		and #$01			and 	#1 							; if it is odd, then negate result
.28eb	f0 03		beq $28f0			beq 	_I32SNoNeg
.28ed	20 bc 2a	jsr $2abc			jsr 	MInt32Negate
.28f0					_I32SNoNeg:
.28f0	68		pla				pla 								; restoe Y and exit
.28f1	a8		tay				tay
.28f2	60		rts				rts
.28f3					_MInt32SRemSign:
.28f3	b5 60		lda $60,x			lda 	esInt3,x 					; is it -ve
.28f5	10 04		bpl $28fb			bpl 	_MInt32SRSExit
.28f7	c8		iny				iny 								; increment the sign count
.28f8	20 bc 2a	jsr $2abc			jsr 	MInt32Negate 				; negate the value.
.28fb					_MInt32SRSExit:
.28fb	60		rts				rts
.28fc					MInt32UDivide:
.28fc	b5 49		lda $49,x			lda 	esInt0+1,x 					; check for division by zero
.28fe	15 51		ora $51,x			ora 	esInt1+1,x
.2900	15 52		ora $52,x			ora 	esInt1+2,x
.2902	15 53		ora $53,x			ora 	esInt1+3,x
.2904	f0 4a		beq $2950			beq 	_MInt32DZero
.2906	e8		inx				inx 								; clear A
.2907	e8		inx				inx
.2908	20 02 2b	jsr $2b02			jsr 	MInt32False
.290b	ca		dex				dex
.290c	ca		dex				dex
.290d	98		tya				tya 								; save Y on the stack
.290e	48		pha				pha
.290f	a0 20		ldy #$20			ldy 	#32 						; number of division passes
.2911					_MInt32UDLoop:
.2911	16 48		asl $48,x			asl 	esInt0,x					; shift QA left. First Q
.2913	36 50		rol $50,x			rol 	esInt1,x
.2915	36 58		rol $58,x			rol 	esInt2,x
.2917	36 60		rol $60,x			rol 	esInt3,x
.2919	36 4a		rol $4a,x			rol 	esInt0+2,x 					; then A.
.291b	36 52		rol $52,x			rol 	esInt1+2,x
.291d	36 5a		rol $5a,x			rol 	esInt2+2,x
.291f	36 62		rol $62,x			rol 	esInt3+2,x
.2921	38		sec				sec 								; calculate A-M saving result on the stack
.2922	b5 4a		lda $4a,x			lda 	esInt0+2,x
.2924	f5 49		sbc $49,x			sbc 	esInt0+1,x
.2926	48		pha				pha
.2927	b5 52		lda $52,x			lda 	esInt1+2,x
.2929	f5 51		sbc $51,x			sbc 	esInt1+1,x
.292b	48		pha				pha
.292c	b5 5a		lda $5a,x			lda 	esInt2+2,x
.292e	f5 59		sbc $59,x			sbc 	esInt2+1,x
.2930	48		pha				pha
.2931	b5 62		lda $62,x			lda 	esInt3+2,x
.2933	f5 61		sbc $61,x			sbc 	esInt3+1,x
.2935	90 10		bcc $2947			bcc		_MInt32NoSubtract 			; if A < M (e.g. carry clear) then reject this.
.2937	95 62		sta $62,x			sta 	esInt3+2,x 					; write result back to A
.2939	68		pla				pla
.293a	95 5a		sta $5a,x			sta 	esInt2+2,x
.293c	68		pla				pla
.293d	95 52		sta $52,x			sta 	esInt1+2,x
.293f	68		pla				pla
.2940	95 4a		sta $4a,x			sta 	esInt0+2,x
.2942	f6 48		inc $48,x			inc 	esInt0,x 					; sets bit 0 of Q - it was shifted left previously.
.2944	4c 4a 29	jmp $294a			jmp 	_MInt32Next 					; do the next iteration
.2947					_MInt32NoSubtract:
.2947	68		pla				pla
.2948	68		pla				pla
.2949	68		pla				pla
.294a					_MInt32Next:
.294a	88		dey				dey 								; do this 32 times.
.294b	d0 c4		bne $2911			bne 	_MInt32UDLoop
.294d	68		pla				pla 								; restore Y and exit
.294e	a8		tay				tay
.294f	60		rts				rts
.2950					_MInt32DZero:
.2950	a2 05		ldx #$05			ldx 	#ErrorID_DivZero
.2952	20 83 11	jsr $1183		jsr	errorHandler
.2955					MInt32Modulus:
.2955	20 fc 28	jsr $28fc			jsr 	MInt32UDivide 				; do the division.
.2958	b5 62		lda $62,x			lda 	esInt3+2,x 					; copy 2nd on stack (the remainder) to the top.
.295a	95 60		sta $60,x			sta 	esInt3,x
.295c	b5 5a		lda $5a,x			lda 	esInt2+2,x
.295e	95 58		sta $58,x			sta 	esInt2,x
.2960	b5 52		lda $52,x			lda 	esInt1+2,x
.2962	95 50		sta $50,x			sta 	esInt1,x
.2964	b5 4a		lda $4a,x			lda 	esInt0+2,x
.2966	95 48		sta $48,x			sta 	esInt0,x
.2968	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32fromstr.asm

.0c0e					fs32Length:
>0c0e							.fill 	1
.2969					LinkInt32FromString:
.2969	aa		tax				tax
.296a	98		tya				tya
.296b	20 70 29	jsr $2970			jsr 	MInt32FromString
.296e	8a		txa				txa
.296f	60		rts				rts
.2970					MInt32FromString:
.2970	85 32		sta $32				sta 	tempShort 					; save base
.2972	98		tya				tya
.2973	48		pha				pha
.2974	a0 00		ldy #$00			ldy 	#0 							; get length of string to convert
.2976	b1 2a		lda ($2a),y			lda 	(temp0),y
.2978	8d 0e 0c	sta $0c0e			sta 	fs32Length
.297b	f0 65		beq $29e2			beq 	_I32FSFail2					; fail if length zero.
.297d	a0 01		ldy #$01			ldy 	#1 							; set index into string being read
.297f	b1 2a		lda ($2a),y			lda 	(temp0),y 					; look at first character
.2981	c9 2d		cmp #$2d			cmp 	#"-"						; is it a - character
.2983	d0 09		bne $298e			bne 	_I32FSNotNegative
.2985	ad 0e 0c	lda $0c0e			lda 	fs32Length 					; get length back.
.2988	c9 01		cmp #$01			cmp 	#1 							; if 1 it is just a - on its own so fail.
.298a	f0 56		beq $29e2			beq 	_I32FSFail2
.298c	a0 02		ldy #$02			ldy 	#2 							; first digit of the number.
.298e					_I32FSNotNegative:
.298e	a5 32		lda $32				lda 	tempShort 					; get the base back.
.2990	c0 02		cpy #$02			cpy 	#2 							; if we read a -ve (e.g. Y == 2)
.2992	d0 02		bne $2996			bne 	_I32FSNN2
.2994	09 80		ora #$80			ora 	#$80						; set bit 7, this indicates a negated result.
.2996					_I32FSNN2:
.2996	48		pha				pha 								; save base + final sign on stack.
.2997	20 02 2b	jsr $2b02			jsr 	MInt32False 				; zero the return value.
.299a					_I32FSMainLoop:
.299a	68		pla				pla 								; get the base back into tempShort
.299b	48		pha				pha
.299c	29 7f		and #$7f			and 	#$7F
.299e	85 32		sta $32				sta 	tempShort
.29a0	b1 2a		lda ($2a),y			lda 	(temp0),y 					; look at next character.
.29a2	c9 61		cmp #$61			cmp 	#"a" 						; fix up case.
.29a4	90 02		bcc $29a8			bcc 	_I32FSNotLC
.29a6	e9 20		sbc #$20			sbc 	#32
.29a8					_I32FSNotLC:
.29a8	38		sec				sec 								; subtract 48 (ASCII "0") - ASCII to Hex conversion
.29a9	e9 30		sbc #$30			sbc 	#"0"
.29ab	90 34		bcc $29e1			bcc 	_I32FSFail 					; nothing more to do.
.29ad	c9 0a		cmp #$0a			cmp 	#9+1 						; if it is 0-9 validate vs base.
.29af	90 06		bcc $29b7			bcc 	_I32FSValidate
.29b1	c9 11		cmp #$11			cmp 	#17 						; is it between 58 and 64 ? if so bad.
.29b3	90 2c		bcc $29e1			bcc 	_I32FSFail
.29b5	e9 07		sbc #$07			sbc 	#7 							; adjust into range so now character is 0->nnn
.29b7					_I32FSValidate:
.29b7	c5 32		cmp $32				cmp 	tempShort 					; compare against the base.
.29b9	b0 26		bcs $29e1			bcs 	_I32FSFail 					; sorry, too large for this base, so fail.
.29bb	48		pha				pha 								; save the new digit value.
.29bc	e8		inx				inx 								; put base into next slot up on stack
.29bd	a5 32		lda $32				lda 	tempShort
.29bf	20 11 2b	jsr $2b11			jsr 	MInt32Set8Bit
.29c2	ca		dex				dex
.29c3	20 1a 2a	jsr $2a1a			jsr 	MInt32Multiply 				; multiply current by the base
.29c6	e8		inx				inx
.29c7	68		pla				pla  								; put additive into next slot
.29c8	20 11 2b	jsr $2b11			jsr 	MInt32Set8Bit
.29cb	ca		dex				dex
.29cc	20 e6 29	jsr $29e6			jsr 	MInt32Add 					; and add it
.29cf	c8		iny				iny 								; bump the character pointer
.29d0	cc 0e 0c	cpy $0c0e			cpy 	fs32Length 					; until > length.
.29d3	f0 c5		beq $299a			beq 	_I32FSMainLoop
.29d5	90 c3		bcc $299a			bcc 	_I32FSMainLoop
.29d7					_I32FSDone:
.29d7	68		pla				pla 								; get base/final sign back
.29d8	10 03		bpl $29dd			bpl 	_I32FSNN3
.29da	20 bc 2a	jsr $2abc			jsr 	MInt32Negate 				; negate the result.
.29dd					_I32FSNN3:
.29dd	68		pla				pla
.29de	a8		tay				tay
.29df	38		sec				sec
.29e0	60		rts				rts
.29e1					_I32FSFail:
.29e1	68		pla				pla
.29e2					_I32FSFail2:
.29e2	68		pla				pla
.29e3	a8		tay				tay
.29e4	18		clc				clc
.29e5	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32math.asm

.29e6					MInt32Add:
.29e6	18		clc				clc
.29e7	b5 48		lda $48,x			lda 	esInt0,x
.29e9	75 49		adc $49,x			adc 	esInt0+1,x
.29eb	95 48		sta $48,x			sta 	esInt0,x
.29ed	b5 50		lda $50,x			lda 	esInt1,x
.29ef	75 51		adc $51,x			adc 	esInt1+1,x
.29f1	95 50		sta $50,x			sta 	esInt1,x
.29f3	b5 58		lda $58,x			lda 	esInt2,x
.29f5	75 59		adc $59,x			adc 	esInt2+1,x
.29f7	95 58		sta $58,x			sta 	esInt2,x
.29f9	b5 60		lda $60,x			lda 	esInt3,x
.29fb	75 61		adc $61,x			adc 	esInt3+1,x
.29fd	95 60		sta $60,x			sta 	esInt3,x
.29ff	60		rts				rts
.2a00					MInt32Sub:
.2a00	38		sec				sec
.2a01	b5 48		lda $48,x			lda 	esInt0,x
.2a03	f5 49		sbc $49,x			sbc 	esInt0+1,x
.2a05	95 48		sta $48,x			sta 	esInt0,x
.2a07	b5 50		lda $50,x			lda 	esInt1,x
.2a09	f5 51		sbc $51,x			sbc 	esInt1+1,x
.2a0b	95 50		sta $50,x			sta 	esInt1,x
.2a0d	b5 58		lda $58,x			lda 	esInt2,x
.2a0f	f5 59		sbc $59,x			sbc 	esInt2+1,x
.2a11	95 58		sta $58,x			sta 	esInt2,x
.2a13	b5 60		lda $60,x			lda 	esInt3,x
.2a15	f5 61		sbc $61,x			sbc 	esInt3+1,x
.2a17	95 60		sta $60,x			sta 	esInt3,x
.2a19	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32multiply.asm

.2a1a					MInt32Multiply:
.2a1a	e8		inx				inx 								; copy 2nd -> 3rd
.2a1b	20 40 2a	jsr $2a40			jsr 	MInt32CopyUp
.2a1e	ca		dex				dex
.2a1f	20 40 2a	jsr $2a40			jsr 	MInt32CopyUp 				; copy 1st -> 2nd
.2a22	20 02 2b	jsr $2b02			jsr 	MInt32False 				; zero 1st.
.2a25					_I32Loop:
.2a25	b5 4a		lda $4a,x			lda 	esInt0+2,x 					; get low bit of 3rd
.2a27	29 01		and #$01			and 	#1
.2a29	f0 03		beq $2a2e			beq 	_I32NoAdd 					; if set
.2a2b	20 e6 29	jsr $29e6			jsr 	MInt32Add 					; add 2nd to 1st.
.2a2e					_I32NoAdd:
.2a2e	e8		inx				inx 								; shift 2nd left
.2a2f	20 17 2b	jsr $2b17			jsr 	MInt32ShiftLeft
.2a32	e8		inx				inx  								; shift 3rd right
.2a33	20 20 2b	jsr $2b20			jsr 	MInt32ShiftRight
.2a36	20 29 2b	jsr $2b29			jsr 	MInt32Zero 					; check if zero.
.2a39	08		php				php 								; save status bits
.2a3a	ca		dex				dex 	 							; point back to 1st
.2a3b	ca		dex				dex
.2a3c	28		plp				plp 								; get status bits
.2a3d	d0 e6		bne $2a25			bne 	_I32Loop 					; if non-zero keep going.
.2a3f	60		rts				rts
.2a40					MInt32CopyUp:
.2a40	b5 48		lda $48,x			lda 	esInt0,x
.2a42	95 49		sta $49,x			sta 	esInt0+1,x
.2a44	b5 50		lda $50,x			lda 	esInt1,x
.2a46	95 51		sta $51,x			sta 	esInt1+1,x
.2a48	b5 58		lda $58,x			lda 	esInt2,x
.2a4a	95 59		sta $59,x			sta 	esInt2+1,x
.2a4c	b5 60		lda $60,x			lda 	esInt3,x
.2a4e	95 61		sta $61,x			sta 	esInt3+1,x
.2a50	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32tostr.asm

>0c0f					MCharCount:	.fill 	1						; count of converted characters
.2a51					MLInt32ToString:
.2a51	aa		tax				tax									; module passes stack in A, base in Y
.2a52	98		tya				tya
.2a53	20 58 2a	jsr $2a58			jsr 	MInt32ToString
.2a56	8a		txa				txa
.2a57	60		rts				rts
.2a58					MInt32ToString:
.2a58	48		pha				pha 								; save base
.2a59	85 32		sta $32				sta 	tempShort 					; save target base.
.2a5b	a9 00		lda #$00			lda 	#0
.2a5d	8d 0f 0c	sta $0c0f			sta 	MCharCount 					; clear character count to 0
.2a60	98		tya				tya
.2a61	48		pha				pha
.2a62	a5 32		lda $32				lda 	tempShort 					; check if we are signed conversion
.2a64	10 10		bpl $2a76			bpl 	_I32TSUnsigned
.2a66	48		pha				pha 								; save base on stack.
.2a67	b5 60		lda $60,x			lda 	esInt3,x 					; is it actually negative
.2a69	10 08		bpl $2a73			bpl 	_I32TSNoFlip
.2a6b	a9 2d		lda #$2d			lda 	#"-" 						; write a '-' prefix out.
.2a6d	20 a9 2a	jsr $2aa9			jsr 	MI32WriteCharacter
.2a70	20 bc 2a	jsr $2abc			jsr 	MInt32Negate 				; negate the value, so now it's positive.
.2a73					_I32TSNoFlip:
.2a73	68		pla				pla 								; get the base back
.2a74	29 7f		and #$7f			and 	#$7F 						; clear the sign flag so it's just a base now.
.2a76					_I32TSUnsigned:
.2a76	20 84 2a	jsr $2a84			jsr 	MI32DivideWrite 			; recursive code to output string.
.2a79	a0 00		ldy #$00			ldy 	#0 							; write charcount to first character.
.2a7b	ad 0f 0c	lda $0c0f			lda 	MCharCount
.2a7e	91 2a		sta ($2a),y			sta 	(temp0),y
.2a80	68		pla				pla
.2a81	a8		tay				tay
.2a82	68		pla				pla
.2a83	60		rts				rts
.2a84					MI32DivideWrite:
.2a84	48		pha				pha 								; save the divisor/base
.2a85	e8		inx				inx 								; write in the dividing position.
.2a86	20 11 2b	jsr $2b11			jsr 	MInt32Set8Bit
.2a89	ca		dex				dex
.2a8a	20 fc 28	jsr $28fc			jsr 	MInt32UDivide 				; divide number by base.
.2a8d	68		pla				pla 								; get the base into Y
.2a8e	a8		tay				tay
.2a8f	b5 4a		lda $4a,x			lda 	esInt0+2,x 					; get the remainder and push on the stack.
.2a91	48		pha				pha
.2a92	20 29 2b	jsr $2b29			jsr 	MInt32Zero 					; is the result zero ?
.2a95	f0 04		beq $2a9b			beq 	_I32NoRecurse 				; if so, don't recurse.
.2a97	98		tya				tya 								; put base into A
.2a98	20 84 2a	jsr $2a84			jsr 	MI32DivideWrite 				; and jsr the dividor recursively.
.2a9b					_I32NoRecurse:
.2a9b	68		pla				pla 								; get the remainder back
.2a9c	c9 0a		cmp #$0a			cmp 	#10  						; handle hexadecimals, now converting to ASCII
.2a9e	90 02		bcc $2aa2			bcc 	_I32NotHex
.2aa0	69 06		adc #$06			adc 	#7-1
.2aa2					_I32NotHex:
.2aa2	18		clc				clc 								; make it ASCII
.2aa3	69 30		adc #$30			adc 	#48
.2aa5	20 a9 2a	jsr $2aa9			jsr 	MI32WriteCharacter 			; write the character out
.2aa8	60		rts				rts 								; and exit.
.2aa9					MI32WriteCharacter:
.2aa9	ee 0f 0c	inc $0c0f			inc 	MCharCount 					; bump count (space for leading count)
.2aac	ac 0f 0c	ldy $0c0f			ldy 	MCharCount 					; get position
.2aaf	91 2a		sta ($2a),y			sta 	(temp0),y 					; write out with trailing 0
.2ab1	c8		iny				iny
.2ab2	a9 00		lda #$00			lda 	#0
.2ab4	91 2a		sta ($2a),y			sta 	(temp0),y
.2ab6	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32unary.asm

>0c10					MSeed32:	.fill 	4							; random number seed.
.2ab7					MInt32Absolute:
.2ab7	b5 60		lda $60,x			lda 	esInt3,x 					; use negate code if -ve.
.2ab9	30 01		bmi $2abc			bmi 	MInt32Negate
.2abb	60		rts				rts
.2abc					MInt32Negate:
.2abc	38		sec				sec 								; subtract from zero.
.2abd	a9 00		lda #$00			lda 	#0
.2abf	f5 48		sbc $48,x			sbc 	esInt0,x
.2ac1	95 48		sta $48,x			sta 	esInt0,x
.2ac3	a9 00		lda #$00			lda 	#0
.2ac5	f5 50		sbc $50,x			sbc 	esInt1,x
.2ac7	95 50		sta $50,x			sta 	esInt1,x
.2ac9	a9 00		lda #$00			lda 	#0
.2acb	f5 58		sbc $58,x			sbc 	esInt2,x
.2acd	95 58		sta $58,x			sta 	esInt2,x
.2acf	a9 00		lda #$00			lda 	#0
.2ad1	f5 60		sbc $60,x			sbc 	esInt3,x
.2ad3	95 60		sta $60,x			sta 	esInt3,x
.2ad5	60		rts				rts
.2ad6					MInt32Not:
.2ad6	b5 48		lda $48,x			lda 	esInt0,x 					; one's complement all four.
.2ad8	49 ff		eor #$ff			eor 	#$FF
.2ada	95 48		sta $48,x			sta 	esInt0,x
.2adc	b5 50		lda $50,x			lda 	esInt1,x
.2ade	49 ff		eor #$ff			eor 	#$FF
.2ae0	95 50		sta $50,x			sta 	esInt1,x
.2ae2	b5 58		lda $58,x			lda 	esInt2,x
.2ae4	49 ff		eor #$ff			eor 	#$FF
.2ae6	95 58		sta $58,x			sta 	esInt2,x
.2ae8	b5 60		lda $60,x			lda 	esInt3,x
.2aea	49 ff		eor #$ff			eor 	#$FF
.2aec	95 60		sta $60,x			sta 	esInt3,x
.2aee	60		rts				rts
.2aef					MInt32Sign:
.2aef	b5 60		lda $60,x			lda 	esInt3,x					; look at MSB
.2af1	30 0b		bmi $2afe			bmi 	MInt32True 					; if set return -1 (true)
.2af3	20 29 2b	jsr $2b29			jsr 	MInt32Zero 					; is it zero ?
.2af6	f0 0a		beq $2b02			beq 	MInt32False 				; if zero return 0 (false)
.2af8	20 02 2b	jsr $2b02			jsr 	MInt32False 				; > 0 return 1, by setting it to zero
.2afb	f6 48		inc $48,x			inc 	esInt0,x  					; and bumping the LSB.
.2afd	60		rts				rts
.2afe					MInt32True:
.2afe	a9 ff		lda #$ff			lda 	#$FF 						; set to $FFFFFFFF
.2b00	d0 02		bne $2b04			bne 	MInt32WriteAll
.2b02					MInt32False:
.2b02	a9 00		lda #$00			lda 	#0
.2b04					MInt32WriteAll:
.2b04	95 48		sta $48,x			sta 	esInt0,x
.2b06					MInt32Write123:
.2b06	95 50		sta $50,x			sta 	esInt1,x
.2b08	95 58		sta $58,x			sta 	esInt2,x
.2b0a	95 60		sta $60,x			sta 	esInt3,x
.2b0c	a9 00		lda #$00			lda 	#$00						; and make it an integer
.2b0e	95 40		sta $40,x			sta 	esType,x
.2b10	60		rts				rts
.2b11					MInt32Set8Bit:
.2b11	95 48		sta $48,x			sta 	esInt0,x 					; coopt above function to write
.2b13	a9 00		lda #$00			lda 	#0 							; a value 0-255
.2b15	f0 ef		beq $2b06			beq		MInt32Write123
.2b17					MInt32ShiftLeft:
.2b17	16 48		asl $48,x			asl 	esInt0,x
.2b19	36 50		rol $50,x			rol	 	esInt1,x
.2b1b	36 58		rol $58,x			rol	 	esInt2,x
.2b1d	36 60		rol $60,x			rol	 	esInt3,x
.2b1f	60		rts				rts
.2b20					MInt32ShiftRight:
.2b20	56 60		lsr $60,x			lsr 	esInt3,x
.2b22	76 58		ror $58,x			ror 	esInt2,x
.2b24	76 50		ror $50,x			ror 	esInt1,x
.2b26	76 48		ror $48,x			ror 	esInt0,x
.2b28	60		rts				rts
.2b29					MInt32Zero:
.2b29	b5 48		lda $48,x			lda 	esInt0,x
.2b2b	15 50		ora $50,x			ora 	esInt1,x
.2b2d	15 58		ora $58,x			ora 	esInt2,x
.2b2f	15 60		ora $60,x			ora 	esInt3,x
.2b31	60		rts				rts
.2b32					MInt32Random:
.2b32	98		tya				tya
.2b33	48		pha				pha
.2b34	a0 07		ldy #$07			ldy 	#7 							; do it 7 times
.2b36	ad 10 0c	lda $0c10			lda 	MSeed32+0 					; check the seed isn't zero
.2b39	d0 03		bne $2b3e			bne 	_Random1
.2b3b	a8		tay				tay 								; if so do it 256 times
.2b3c	a9 aa		lda #$aa			lda		#$AA 						; and use this to seed the seed....
.2b3e					_Random1:
.2b3e	0a		asl a				asl 	a
.2b3f	2e 11 0c	rol $0c11			rol 	MSeed32+1
.2b42	2e 12 0c	rol $0c12			rol 	MSeed32+2
.2b45	2e 13 0c	rol $0c13			rol 	MSeed32+3
.2b48	90 02		bcc $2b4c			bcc 	_Random2
.2b4a	49 c5		eor #$c5			eor 	#$C5
.2b4c					_Random2:
.2b4c	88		dey				dey
.2b4d	d0 ef		bne $2b3e			bne 	_Random1
.2b4f	8d 10 0c	sta $0c10			sta 	MSeed32+0 					; copy the seed in.
.2b52	95 48		sta $48,x			sta 	esInt0,x
.2b54	ad 11 0c	lda $0c11			lda 	MSeed32+1
.2b57	95 50		sta $50,x			sta 	esInt1,x
.2b59	ad 12 0c	lda $0c12			lda 	MSeed32+2
.2b5c	95 58		sta $58,x			sta 	esInt2,x
.2b5e	ad 13 0c	lda $0c13			lda 	MSeed32+3
.2b61	95 60		sta $60,x			sta 	esInt3,x
.2b63	68		pla				pla
.2b64	a8		tay				tay
.2b65	a9 00		lda #$00			lda 	#0
.2b67	95 40		sta $40,x			sta 	esType,x
.2b69	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/utility/check.asm

.2b6a					CheckToken:
.2b6a	d1 28		cmp ($28),y			cmp 	(codePtr),y
.2b6c	d0 02		bne $2b70			bne 	_CTError
.2b6e	c8		iny				iny
.2b6f	60		rts				rts
.2b70					_CTError:
.2b70	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.2b72	20 83 11	jsr $1183		jsr	errorHandler
.2b75					CheckRightParen:
.2b75	b1 28		lda ($28),y			lda 	(codePtr),y
.2b77	c8		iny				iny
.2b78	c9 c6		cmp #$c6			cmp 	#TKW_RPAREN
.2b7a	d0 01		bne $2b7d			bne 	_CRPError
.2b7c	60		rts				rts
.2b7d					_CRPError:
.2b7d	a2 09		ldx #$09			ldx 	#ErrorID_MissingRP
.2b7f	20 83 11	jsr $1183		jsr	errorHandler
.2b82					CheckComma:
.2b82	b1 28		lda ($28),y			lda 	(codePtr),y
.2b84	c8		iny				iny
.2b85	c9 c8		cmp #$c8			cmp 	#TKW_COMMA
.2b87	d0 01		bne $2b8a			bne 	_CCError
.2b89	60		rts				rts
.2b8a					_CCError:
.2b8a	a2 0a		ldx #$0a			ldx 	#ErrorID_MissingComma
.2b8c	20 83 11	jsr $1183		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/utility/scanner.asm

.2b8f					ScanForward:
.2b8f	85 2c		sta $2c				sta 	temp1 						; save tokens to search in temp1/temp1+1
.2b91	86 2d		stx $2d				stx 	temp1+1
.2b93	a9 00		lda #$00			lda 	#0 							; temp2 counts structure levels.
.2b95	85 2e		sta $2e				sta 	temp2
.2b97	b1 28		lda ($28),y	_SFLoop:lda 	(codePtr),y 				; look at the next token.
.2b99	c8		iny				iny
.2b9a	a6 2e		ldx $2e				ldx 	temp2 						; check structure levels are zero.
.2b9c	d0 08		bne $2ba6			bne 	_SFNoCheck 					; if so, check token against entered values.
.2b9e	c5 2c		cmp $2c				cmp 	temp1 						; if either matches, we've reached the token
.2ba0	f0 24		beq $2bc6			beq 	_SFExit 					; at the same strcture depth.
.2ba2	c5 2d		cmp $2d				cmp 	temp1+1
.2ba4	f0 20		beq $2bc6			beq 	_SFExit
.2ba6					_SFNoCheck:
.2ba6	c9 80		cmp #$80			cmp 	#$80 						; if it is 00-7F (variable/number) just skip it.
.2ba8	90 ed		bcc $2b97			bcc 	_SFLoop
.2baa	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; $80-$85 is various specials.
.2bac	90 19		bcc $2bc7			bcc 	_SFSpecials
.2bae	c9 99		cmp #$99			cmp 	#TOK_STRUCTST 				; if < structure start then continue
.2bb0	90 e5		bcc $2b97			bcc 	_SFLoop
.2bb2	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST 				; if >= unary start (after structure) then continue.
.2bb4	b0 e1		bcs $2b97			bcs 	_SFLoop
.2bb6	aa		tax				tax  								; token in X, and look up the adjuster.
.2bb7	bd 39 24	lda $2439,x			lda 	ELBinaryOperatorInfo-TOK_BINARYST,x
.2bba	38		sec				sec 								; convert to an offset ($FF,$01)
.2bbb	e9 81		sbc #$81			sbc 	#$81
.2bbd	18		clc				clc 								; add to depth
.2bbe	65 2e		adc $2e				adc 	temp2
.2bc0	85 2e		sta $2e				sta 	temp2
.2bc2	10 d3		bpl $2b97			bpl 	_SFLoop 					; +ve okay to continue
.2bc4	30 35		bmi $2bfb			bmi 	_SFError 					; if gone -ve then we have a nesting error
.2bc6	60		rts		_SFExit:rts
.2bc7					_SFSpecials:
.2bc7	c9 80		cmp #$80			cmp 	#TOK_EOL 					; $80, advance to next line.
.2bc9	f0 14		beq $2bdf			beq 	_SFNextLine
.2bcb	c9 84		cmp #$84			cmp 	#TOK_FPC					; $84, skip embedded float
.2bcd	f0 31		beq $2c00			beq 	_SFFloatSkip
.2bcf	c9 85		cmp #$85			cmp 	#TOK_STR 					; $85, skip string
.2bd1	f0 04		beq $2bd7			beq 	_SFSkipString
.2bd3	c8		iny				iny									; $81,$82,$83 shift, so just advance over the shifted
.2bd4	4c 97 2b	jmp $2b97			jmp 	_SFLoop 					; token.
.2bd7					_SFSkipString:
.2bd7	98		tya				tya
.2bd8	38		sec				sec
.2bd9	71 28		adc ($28),y			adc 	(codePtr),y
.2bdb	a8		tay				tay
.2bdc	4c 97 2b	jmp $2b97			jmp 	_SFLoop
.2bdf					_SFNextLine:
.2bdf	a0 00		ldy #$00			ldy 	#0 							; get offset
.2be1	b1 28		lda ($28),y			lda 	(codePtr),y
.2be3	18		clc				clc 								; add to code pointer.
.2be4	65 28		adc $28				adc 	codePtr
.2be6	85 28		sta $28				sta 	codePtr
.2be8	90 02		bcc $2bec			bcc		_SFNLNoCarry
.2bea	e6 29		inc $29				inc 	codePtr+1
.2bec					_SFNLNoCarry:
.2bec	b1 28		lda ($28),y			lda 	(codePtr),y 				; reached the end of the program.
.2bee	d0 a7		bne $2b97			bne		_SFLoop 					; no go round again
.2bf0	a5 2c		lda $2c				lda 	temp1
.2bf2	c9 d9		cmp #$d9			cmp 	#TKW_DATA 					; if searching for Data different error.
.2bf4	d0 05		bne $2bfb			bne 	_SFError 					; read uses this to search for data statements
.2bf6	a2 1c		ldx #$1c			ldx 	#ErrorID_DataError
.2bf8	20 83 11	jsr $1183		jsr	errorHandler
.2bfb					_SFError:
.2bfb	a2 14		ldx #$14			ldx 	#ErrorID_Struct
.2bfd	20 83 11	jsr $1183		jsr	errorHandler
.2c00					_SFFloatSkip:
.2c00	4c 02 1e	jmp $1e02			jmp 	Unimplemented

;******  Return to file: main/main.asm


;******  Processing file: main/utility/stack.asm

.0078					rsPointer:
>0078							.fill 	2							; to TOS, which is the current top-token.
.2c03					RSReset:
.2c03	a9 ff		lda #$ff			lda 	#(returnStack+retStackSize-1) & $FF
.2c05	85 78		sta $78				sta 	rsPointer
.2c07	a9 09		lda #$09			lda 	#(returnStack+retStackSize-1) >> 8
.2c09	85 79		sta $79				sta 	1+(rsPointer)
.2c0b	a9 ff		lda #$ff			lda 	#$FF 						; put a duff marker on TOS, so nothing will pop
.2c0d	8d ff 09	sta $09ff			sta 	returnStack+retStackSize-1
.2c10	60		rts				rts
.2c11					RSClaim:
.2c11	84 32		sty $32				sty 	tempShort 					; preserve Y
.2c13	48		pha				pha 								; save marker on stack.
.2c14	8a		txa				txa 								; get bytes required.
.2c15	38		sec				sec
.2c16	49 ff		eor #$ff			eor 	#$FF 						; add to rsPointer using 2's complement.
.2c18	65 78		adc $78				adc 	rsPointer
.2c1a	85 78		sta $78				sta 	rsPointer
.2c1c	a5 79		lda $79				lda 	rsPointer+1
.2c1e	69 ff		adc #$ff			adc 	#$FF
.2c20	85 79		sta $79				sta 	rsPointer+1
.2c22	c9 08		cmp #$08			cmp 	#returnStack>>8 			; overflow. underflow actually :)
.2c24	90 08		bcc $2c2e			bcc 	_RSCOverflow
.2c26	68		pla				pla 								; get marker back
.2c27	a0 00		ldy #$00			ldy 	#0 							; write marker out.
.2c29	91 78		sta ($78),y			sta 	(rsPointer),y
.2c2b	a4 32		ldy $32				ldy 	tempShort 					; restore Y and exit
.2c2d	60		rts				rts
.2c2e					_RSCOverflow:
.2c2e	a2 16		ldx #$16			ldx 	#ErrorID_RetStack
.2c30	20 83 11	jsr $1183		jsr	errorHandler
.2c33					RSFree:
.2c33	18		clc				clc
.2c34	65 78		adc $78				adc 	rsPointer
.2c36	85 78		sta $78				sta 	rsPointer
.2c38	90 02		bcc $2c3c			bcc 	_RSFExit
.2c3a	e6 79		inc $79				inc 	rsPointer+1
.2c3c					_RSFExit:
.2c3c	60		rts				rts
.2c3d					RSSavePosition:
.2c3d	84 32		sty $32				sty 	tempShort 					; save Y position
.2c3f	a8		tay				tay 								; this is where we write it.
.2c40	a5 28		lda $28				lda 	codePtr 					; write codePointer out
.2c42	91 78		sta ($78),y			sta 	(rsPointer),y
.2c44	c8		iny				iny
.2c45	a5 29		lda $29				lda 	codePtr+1
.2c47	91 78		sta ($78),y			sta 	(rsPointer),y
.2c49	c8		iny				iny
.2c4a	a5 32		lda $32				lda 	tempShort 					; write the Y position out.
.2c4c	91 78		sta ($78),y			sta 	(rsPointer),y
.2c4e	a8		tay				tay 								; fix Y back again to original value
.2c4f	60		rts				rts
.2c50					RSLoadPosition:
.2c50	a8		tay				tay
.2c51	b1 78		lda ($78),y			lda 	(rsPointer),y 				; read codePointer back
.2c53	85 28		sta $28				sta 	codePtr
.2c55	c8		iny				iny
.2c56	b1 78		lda ($78),y			lda 	(rsPointer),y
.2c58	85 29		sta $29				sta 	codePtr+1
.2c5a	c8		iny				iny
.2c5b	b1 78		lda ($78),y			lda 	(rsPointer),y 				; and the offset
.2c5d	a8		tay				tay 								; to Y
.2c5e	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/utility/warmstart.asm

.2c5f					WarmStart:
.2c5f	a2 02		ldx #$02		ldx	#2
.2c61	20 8d 16	jsr $168d		jsr	interactionHandler

;******  Return to file: main/main.asm

.2c64					mainHandler:
.2c64	7c 67 2c	jmp ($2c67,x)			jmp 	(mainVectors,x)
.2c67					mainVectors:
>2c67	75 2b					.word CheckRightParen      ; index 0
>2c69	a2 16					.word XCommandClear        ; index 2
>2c6b	bb 25					.word LinkEvaluate         ; index 4
>2c6d	c7 25					.word LinkEvaluateInteger  ; index 6
>2c6f	cd 25					.word LinkEvaluateSmallInt ; index 8
>2c71	c1 25					.word LinkEvaluateTerm     ; index 10
>2c73	51 2a					.word MLInt32ToString      ; index 12
>2c75	6b 1b					.word Command_XNew         ; index 14
>2c77	2f 1c					.word PrintString          ; index 16
>2c79	7a 1d					.word XCommand_Run         ; index 18
>2c7b	86 1d					.word Command_RunFrom      ; index 20
>2c7d	69 29					.word LinkInt32FromString  ; index 22

;******  Return to file: basic.asm

.2c7f					section_end_main:
.2c7f					section_start_string:

;******  Processing file: string/string.asm


;******  Processing file: string/chr.asm

.2c7f					StringChrs:
.2c7f	aa		tax				tax 								; set up stack
.2c80	a9 02		lda #$02			lda 	#2
.2c82	20 39 2d	jsr $2d39			jsr 	AllocateSoftString
.2c85	98		tya				tya
.2c86	20 5f 2d	jsr $2d5f			jsr 	WriteSoftString
.2c89	20 8e 2c	jsr $2c8e			jsr 	ReturnSoftString
.2c8c	8a		txa				txa
.2c8d	60		rts				rts
.2c8e					ReturnSoftString:
.2c8e	a5 7a		lda $7a				lda 	softMemAlloc 				; copy address
.2c90	95 48		sta $48,x			sta 	esInt0,x
.2c92	a5 7b		lda $7b				lda 	softMemAlloc+1
.2c94	95 50		sta $50,x			sta 	esInt1,x
.2c96	a9 00		lda #$00			lda 	#0 							; zero upper bytes
.2c98	95 58		sta $58,x			sta 	esInt2,x
.2c9a	95 60		sta $60,x			sta 	esInt3,x
.2c9c	a9 40		lda #$40			lda 	#$40 						; type string.
.2c9e	95 40		sta $40,x			sta 	esType,x
.2ca0	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/compare.asm

.2ca1					STRCompare:
.2ca1	48		pha				pha 								; save A
.2ca2	aa		tax				tax 								; put stack pos in X
.2ca3	98		tya				tya
.2ca4	48		pha				pha
.2ca5	20 d9 2c	jsr $2cd9			jsr 	CopyStringPair 				; copy strings to temp0,temp1
.2ca8	a0 00		ldy #$00			ldy 	#0 							; get the smaller of the two string sizes.
.2caa	b1 2a		lda ($2a),y			lda 	(temp0),y
.2cac	d1 2c		cmp ($2c),y			cmp 	(temp1),y
.2cae	90 02		bcc $2cb2			bcc 	_SCNotSmaller
.2cb0	b1 2c		lda ($2c),y			lda 	(temp1),y
.2cb2					_SCNotSmaller:
.2cb2	aa		tax				tax 								; put that in X. We compare this many chars first.
.2cb3					_SCCompareLoop:
.2cb3	e0 00		cpx #$00			cpx 	#0 							; if compared all the smaller, then it is the shorter
.2cb5	f0 0c		beq $2cc3			beq 	_SCSameToEndShortest 		; one that is the smallest if they are different lengths.
.2cb7	ca		dex				dex 								; decrement chars to compare.
.2cb8	c8		iny				iny 								; move to next character
.2cb9	38		sec				sec 								; calculate s1[y]-s2[y]
.2cba	b1 2a		lda ($2a),y			lda 	(temp0),y
.2cbc	f1 2c		sbc ($2c),y			sbc 	(temp1),y
.2cbe	d0 0a		bne $2cca			bne 	_SCReturnResult 			; if different return sign of A
.2cc0	4c b3 2c	jmp $2cb3			jmp 	_SCCompareLoop
.2cc3					_SCSameToEndShortest
.2cc3	a0 00		ldy #$00			ldy 	#0 							; compare len(s1) - len(s2)
.2cc5	38		sec				sec
.2cc6	b1 2a		lda ($2a),y			lda 	(temp0),y
.2cc8	f1 2c		sbc ($2c),y			sbc 	(temp1),y
.2cca					_SCReturnResult:
.2cca	08		php				php 								; set return to zero preserving PSW.
.2ccb	a2 00		ldx #$00			ldx 	#0
.2ccd	28		plp				plp
.2cce	f0 05		beq $2cd5			beq 	_SCExit 					; two values equal, then exit
.2cd0	ca		dex				dex 								; X = $FF
.2cd1	90 02		bcc $2cd5			bcc 	_SCExit 					; if 1st < 2nd then -1
.2cd3	a2 01		ldx #$01			ldx 	#1 							; X = $01 if greater
.2cd5					_SCExit:
.2cd5	68		pla				pla
.2cd6	a8		tay				tay
.2cd7	68		pla				pla
.2cd8	60		rts				rts
.2cd9					CopyStringPair:
.2cd9	b5 49		lda $49,x			lda 	esInt0+1,x
.2cdb	85 2c		sta $2c				sta 	temp1
.2cdd	b5 51		lda $51,x			lda 	esInt1+1,x
.2cdf	85 2d		sta $2d				sta 	temp1+1
.2ce1					CopyStringTop:
.2ce1	b5 48		lda $48,x			lda 	esInt0,x
.2ce3	85 2a		sta $2a				sta 	temp0
.2ce5	b5 50		lda $50,x			lda 	esInt1,x
.2ce7	85 2b		sta $2b				sta 	temp0+1
.2ce9	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/concat.asm

.2cea					StringConcat:
.2cea	aa		tax				tax									; stack pos in X
.2ceb	98		tya				tya
.2cec	48		pha				pha
.2ced	20 d9 2c	jsr $2cd9			jsr 	CopyStringPair 				; temp0 and temp1 point to strings to concat.
.2cf0	38		sec				sec 								; calculate alloc strings. lengths added + 1 for size.
.2cf1	a0 00		ldy #$00			ldy 	#0
.2cf3	b1 2a		lda ($2a),y			lda 	(temp0),y
.2cf5	71 2c		adc ($2c),y			adc 	(temp1),y
.2cf7	b0 1c		bcs $2d15			bcs 	_SCError 					; just too many characters here.
.2cf9	c9 fc		cmp #$fc			cmp 	#MaxStringSize
.2cfb	b0 18		bcs $2d15			bcs 	_SCError
.2cfd	20 39 2d	jsr $2d39			jsr 	AllocateSoftString 			; allocate soft string memory, set pointer.
.2d00	20 30 2d	jsr $2d30			jsr 	CopySoftToStack 			; copy that to the stack.
.2d03	20 1a 2d	jsr $2d1a			jsr 	SCCopyTemp0 				; copy temp0
.2d06	a5 2c		lda $2c				lda 	temp1 						; copy temp1 to temp0
.2d08	85 2a		sta $2a				sta 	temp0
.2d0a	a5 2d		lda $2d				lda 	temp1+1
.2d0c	85 2b		sta $2b				sta 	temp0+1
.2d0e	20 1a 2d	jsr $2d1a			jsr 	SCCopyTemp0 				; copy temp0 e.g. what was temp1.
.2d11	68		pla				pla
.2d12	a8		tay				tay
.2d13	8a		txa				txa 								; and A
.2d14	60		rts				rts
.2d15					_SCError:
.2d15	a2 0d		ldx #$0d			ldx 	#ErrorID_StrLen
.2d17	20 83 11	jsr $1183		jsr	errorHandler
.2d1a					SCCopyTemp0:
.2d1a	a0 00		ldy #$00			ldy 	#0 							; put count in temp2
.2d1c	b1 2a		lda ($2a),y			lda 	(temp0),y
.2d1e	85 2e		sta $2e				sta 	temp2
.2d20					_SCCopyLoop:
.2d20	a5 2e		lda $2e				lda 	temp2 						; done the lot
.2d22	f0 0b		beq $2d2f			beq 	_SCCopyExit
.2d24	c6 2e		dec $2e				dec 	temp2
.2d26	c8		iny				iny 								; get next char
.2d27	b1 2a		lda ($2a),y			lda 	(temp0),y
.2d29	20 5f 2d	jsr $2d5f			jsr 	WriteSoftString 			; write to soft string.
.2d2c	4c 20 2d	jmp $2d20			jmp 	_SCCopyLoop
.2d2f					_SCCopyExit:
.2d2f	60		rts				rts
.2d30					CopySoftToStack:
.2d30	a5 7a		lda $7a				lda 	SoftMemAlloc 				; copy the memory allocation pointer to the stack.
.2d32	95 48		sta $48,x			sta 	esInt0,x 					; type is already string.
.2d34	a5 7b		lda $7b				lda 	SoftMemAlloc+1
.2d36	95 50		sta $50,x			sta 	esInt1,x
.2d38	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/memory.asm

.007a					softMemAlloc:
>007a							.fill 	2  							; if MSB is zero needs resetting on allocation.
.2d39					AllocateSoftString:
.2d39	85 32		sta $32				sta 	tempShort 					; save count
.2d3b	98		tya				tya
.2d3c	48		pha				pha
.2d3d	a5 7b		lda $7b				lda 	softMemAlloc+1 				; if the high byte is zero, it needs allocating.
.2d3f	d0 09		bne $2d4a			bne 	_ASSDone
.2d41	a5 33		lda $33				lda 	highMemory 					; reset the soft memory alloc pointer.
.2d43	85 7a		sta $7a				sta 	softMemAlloc 				; to speed up slightly, we only reset this when we first need it
.2d45	a4 34		ldy $34				ldy 	highMemory+1 				; but it needs to be reset before each command.
.2d47	88		dey				dey 								; it is set to 1/4k below high memory, allowing space
.2d48	84 7b		sty $7b				sty 	softMemAlloc+1 				; for a concreted string.
.2d4a					_ASSDone:
.2d4a	38		sec				sec 								; allocate downwards enough memory
.2d4b	a5 7a		lda $7a				lda 	softMemAlloc 				; subtract the memory requirements in A from
.2d4d	e5 32		sbc $32				sbc 	tempShort 					; the soft memory pointer
.2d4f	85 7a		sta $7a				sta 	softMemAlloc
.2d51	a5 7b		lda $7b				lda 	softMemAlloc+1
.2d53	e9 00		sbc #$00			sbc 	#0
.2d55	85 7b		sta $7b				sta 	softMemAlloc+1
.2d57	a9 00		lda #$00			lda 	#0 							; empty that string, set the length = 0.
.2d59	a8		tay				tay
.2d5a	91 7a		sta ($7a),y			sta 	(softMemAlloc),y
.2d5c	68		pla				pla
.2d5d	a8		tay				tay
.2d5e	60		rts				rts
.2d5f					WriteSoftString:
.2d5f	84 32		sty $32				sty 	tempShort 					; save Y
.2d61	48		pha				pha 								; save character on stack
.2d62	a0 00		ldy #$00			ldy 	#0 							; get and bump length
.2d64	b1 7a		lda ($7a),y			lda 	(softMemAlloc),y
.2d66	18		clc				clc
.2d67	69 01		adc #$01			adc 	#1
.2d69	91 7a		sta ($7a),y			sta 	(softMemAlloc),y
.2d6b	a8		tay				tay 								; offset in Y
.2d6c	68		pla				pla 								; get char and write.
.2d6d	91 7a		sta ($7a),y			sta 	(softMemAlloc),y
.2d6f	a4 32		ldy $32				ldy 	tempShort 					; restore Y and exit.
.2d71	60		rts				rts
.2d72					StrClone:
.2d72	aa		tax				tax 								; set up stack.
.2d73	98		tya				tya
.2d74	48		pha				pha
.2d75	a0 00		ldy #$00			ldy 	#0 							; get length, add 1 for length
.2d77	b1 2a		lda ($2a),y			lda 	(temp0),y 					; this is the bytes required.
.2d79	18		clc				clc
.2d7a	69 01		adc #$01			adc 	#1
.2d7c	20 39 2d	jsr $2d39			jsr 	AllocateSoftString 			; allocate soft memory
.2d7f	a5 7a		lda $7a				lda 	softMemAlloc 				; copy that address to TOS
.2d81	95 48		sta $48,x			sta 	esInt0,x
.2d83	a5 7b		lda $7b				lda 	softMemAlloc+1
.2d85	95 50		sta $50,x			sta 	esInt1,x
.2d87	a9 00		lda #$00			lda 	#0 							; zero upper 2 bytes
.2d89	95 58		sta $58,x			sta 	esInt2,x
.2d8b	95 60		sta $60,x			sta 	esInt3,x
.2d8d	a9 40		lda #$40			lda 	#$40 						; set type to string.
.2d8f	95 40		sta $40,x			sta 	esType,x
.2d91	20 1a 2d	jsr $2d1a			jsr 	SCCopyTemp0 				; copy temp0 string to soft memory copy (concat.asm)
.2d94	68		pla				pla
.2d95	a8		tay				tay
.2d96	8a		txa				txa
.2d97	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/setcase.asm

.2d98					CaseString:
.2d98	48		pha				pha 								; save A and copy to X
.2d99	aa		tax				tax
.2d9a	98		tya				tya
.2d9b	48		pha				pha
.2d9c	20 e1 2c	jsr $2ce1			jsr 	CopyStringTop 				; target string -> temp0
.2d9f	a0 00		ldy #$00			ldy 	#0
.2da1	b1 2a		lda ($2a),y			lda 	(temp0),y  					; get length,
.2da3	18		clc				clc
.2da4	69 01		adc #$01			adc 	#1 							; one more for length byte
.2da6	20 39 2d	jsr $2d39			jsr 	AllocateSoftString 			; allocate soft string memory, set pointer.
.2da9	20 30 2d	jsr $2d30			jsr 	CopySoftToStack 			; copy that to the stack.
.2dac	a0 00		ldy #$00			ldy 	#0
.2dae	b1 2a		lda ($2a),y			lda 	(temp0),y 					; count to copy in X
.2db0	aa		tax				tax
.2db1					_CSCopy:
.2db1	e0 00		cpx #$00			cpx 	#0 							; finished if 0.
.2db3	f0 24		beq $2dd9			beq 	_CSExit
.2db5	ca		dex				dex
.2db6	c8		iny				iny
.2db7	68		pla				pla 								; check direction
.2db8	48		pha				pha
.2db9	f0 0c		beq $2dc7			beq 	_CSUpper
.2dbb	b1 2a		lda ($2a),y			lda 	(temp0),y 					; lower$() code
.2dbd	c9 41		cmp #$41			cmp 	#"A"
.2dbf	90 12		bcc $2dd3			bcc 	_CSWrite
.2dc1	c9 5b		cmp #$5b			cmp 	#"Z"+1
.2dc3	b0 0e		bcs $2dd3			bcs 	_CSWrite
.2dc5	90 0a		bcc $2dd1			bcc 	_CSFlipWrite
.2dc7					_CSUpper:
.2dc7	b1 2a		lda ($2a),y			lda 	(temp0),y 					; upper$() code
.2dc9	c9 61		cmp #$61			cmp 	#"a"
.2dcb	90 06		bcc $2dd3			bcc 	_CSWrite
.2dcd	c9 7b		cmp #$7b			cmp 	#"z"+1
.2dcf	b0 02		bcs $2dd3			bcs 	_CSWrite
.2dd1					_CSFlipWrite:
.2dd1	49 20		eor #$20			eor 	#"A"^"a" 					; switch case.
.2dd3					_CSWrite:
.2dd3	20 5f 2d	jsr $2d5f			jsr 	WriteSoftString 			; add to soft string.
.2dd6	4c b1 2d	jmp $2db1			jmp 	_CSCopy
.2dd9					_CSExit:
.2dd9	68		pla				pla
.2dda	a8		tay				tay
.2ddb	68		pla				pla
.2ddc	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/substring.asm

.2ddd					StringSubstring:
.2ddd	48		pha				pha
.2dde	aa		tax				tax 								; access stack.
.2ddf	98		tya				tya
.2de0	48		pha				pha
.2de1	20 e1 2c	jsr $2ce1			jsr 	CopyStringTop 				; point temp0 to the string.
.2de4	a0 00		ldy #$00			ldy 	#0 							; get length.
.2de6	b1 2a		lda ($2a),y			lda 	(temp0),Y
.2de8	85 2c		sta $2c				sta 	temp1
.2dea	b5 49		lda $49,x			lda 	esInt0+1,x 					; get the initial offset
.2dec	c5 2c		cmp $2c				cmp 	temp1 						; return "" if > length.
.2dee	f0 02		beq $2df2			beq 	_SSBOkay
.2df0	b0 2a		bcs $2e1c			bcs 	_SSBReturnNull
.2df2					_SSBOkay:
.2df2	a5 2c		lda $2c				lda 	temp1 						; get the total length +1
.2df4	18		clc				clc
.2df5	69 01		adc #$01			adc 	#1
.2df7	38		sec				sec
.2df8	f5 49		sbc $49,x			sbc 	esInt0+1,x 					; the anything >= this is bad - max size
.2dfa	d5 4a		cmp $4a,x			cmp 	esInt0+2,x  				; check bad >= required
.2dfc	90 02		bcc $2e00			bcc		_SSBTrunc
.2dfe	b5 4a		lda $4a,x			lda 	esInt0+2,x
.2e00					_SSBTrunc:
.2e00	85 2d		sta $2d				sta 	temp1+1 					; characters to copy.
.2e02	18		clc				clc
.2e03	69 01		adc #$01			adc 	#1 							; add 1
.2e05	20 39 2d	jsr $2d39			jsr 	AllocateSoftString 			; allocate soft string memory, set pointer.
.2e08	20 30 2d	jsr $2d30			jsr 	CopySoftToStack 			; copy that to the stack.
.2e0b	b4 49		ldy $49,x			ldy 	esInt0+1,x 					; get initial position of char to copy
.2e0d					_SSBCopyLoop:
.2e0d	a5 2d		lda $2d				lda 	temp1+1 					; done them all
.2e0f	f0 0e		beq $2e1f			beq 	_SSBExit
.2e11	c6 2d		dec $2d				dec 	temp1+1
.2e13	b1 2a		lda ($2a),y			lda 	(temp0),y 					; get and write character
.2e15	20 5f 2d	jsr $2d5f			jsr 	WriteSoftString
.2e18	c8		iny				iny
.2e19	4c 0d 2e	jmp $2e0d			jmp 	_SSBCopyLoop
.2e1c					_SSBReturnNull:
.2e1c	20 23 2e	jsr $2e23			jsr 	ReturnNull
.2e1f					_SSBExit:
.2e1f	68		pla				pla
.2e20	a8		tay				tay
.2e21	68		pla				pla
.2e22	60		rts				rts
.2e23					ReturnNull:
.2e23	a9 00		lda #$00			lda 	#0 							; clear null string
.2e25	8d ce 0a	sta $0ace			sta 	NullString
.2e28	a9 ce		lda #$ce			lda 	#NullString & $FF 			; set a pointer to it
.2e2a	95 48		sta $48,x			sta 	esInt0,x
.2e2c	a9 0a		lda #$0a			lda 	#NullString >> 8
.2e2e	95 50		sta $50,x			sta 	esInt1,x
.2e30	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/write.asm

.0c14					srcStrLen:
>0c14							.fill 	1
.2e31					StringWrite:
.2e31	aa		tax				tax
.2e32	48		pha				pha
.2e33	98		tya				tya
.2e34	48		pha				pha
.2e35	20 5c 2e	jsr $2e5c			jsr 	CheckOverwriteCurrent
.2e38	b0 0d		bcs $2e47			bcs		_SWCopyCurrent
.2e3a	20 9a 2e	jsr $2e9a			jsr 	RequiresConcretion
.2e3d	90 0e		bcc $2e4d			bcc 	_SWWriteReference
.2e3f	20 fd 2e	jsr $2efd			jsr 	CheckSpecialConcretion
.2e42	b0 09		bcs $2e4d			bcs 	_SWWriteReference
.2e44	20 ae 2e	jsr $2eae			jsr 	AllocateHardMemory
.2e47					_SWCopyCurrent:
.2e47	20 e1 2e	jsr $2ee1			jsr 	CopyStringToHardMemory
.2e4a	4c 58 2e	jmp $2e58			jmp 	_SWExit
.2e4d					_SWWriteReference
.2e4d	a0 00		ldy #$00			ldy 	#0
.2e4f	a5 2a		lda $2a				lda 	temp0
.2e51	91 2c		sta ($2c),y			sta 	(temp1),y
.2e53	c8		iny				iny
.2e54	a5 2b		lda $2b				lda 	temp0+1
.2e56	91 2c		sta ($2c),y			sta 	(temp1),y
.2e58					_SWExit:
.2e58	68		pla				pla
.2e59	a8		tay				tay
.2e5a	68		pla				pla
.2e5b	60		rts				rts
.2e5c					CheckOverwriteCurrent:
.2e5c	a0 00		ldy #$00			ldy 	#0 						; get address of string being written to temp0
.2e5e	b5 51		lda $51,x			lda 	esInt1+1,x
.2e60	85 2b		sta $2b				sta 	temp0+1
.2e62	b5 49		lda $49,x			lda 	esInt0+1,x
.2e64	85 2a		sta $2a				sta 	temp0
.2e66	b1 2a		lda ($2a),y			lda 	(temp0),y 				; get length of string being copied and save it.
.2e68	8d 14 0c	sta $0c14			sta 	srcStrLen
.2e6b	b5 48		lda $48,x			lda 	esInt0,x 				; copy where the final address it being written to temp1.
.2e6d	85 2c		sta $2c				sta 	temp1 					; e.g. if it is ax$ then temp1 will point to the ax$
.2e6f	b5 50		lda $50,x			lda 	esInt1,x 				; data record + 5
.2e71	85 2d		sta $2d				sta 	temp1+1
.2e73	a0 01		ldy #$01			ldy 	#1 						; get the MSB of the address of string currently stored there.
.2e75	b1 2c		lda ($2c),y			lda 	(temp1),y
.2e77	c5 34		cmp $34				cmp 	highMemory+1 			; if < high memory then it cannot be something stored
.2e79	90 1b		bcc $2e96			bcc 	_COCFail 				; in hard memory.
.2e7b	a0 00		ldy #$00			ldy 	#0 						; copy target address - 1 into temp2
.2e7d	b1 2c		lda ($2c),y			lda 	(temp1),y 				; when allocating hard memory, the overall size is
.2e7f	e9 01		sbc #$01			sbc 	#1 						; in the previous byte.
.2e81	85 2e		sta $2e				sta 	temp2
.2e83	c8		iny				iny
.2e84	b1 2c		lda ($2c),y			lda 	(temp1),y
.2e86	e9 00		sbc #$00			sbc 	#0
.2e88	85 2f		sta $2f				sta 	temp2+1
.2e8a	a0 00		ldy #$00			ldy 	#0 						; how large is this physical chunk.
.2e8c	b1 2e		lda ($2e),y			lda 	(temp2),y
.2e8e	38		sec				sec  							; maximum character capacity.
.2e8f	e9 02		sbc #$02			sbc 	#2
.2e91	cd 14 0c	cmp $0c14			cmp 	srcStrLen 				; if >= the required length
.2e94	b0 02		bcs $2e98			bcs 	_COCCanReuse
.2e96					_COCFail:
.2e96	18		clc				clc
.2e97	60		rts				rts
.2e98					_COCCanReuse:
.2e98	38		sec				sec
.2e99	60		rts				rts
.2e9a					RequiresConcretion:
.2e9a	a5 2b		lda $2b				lda 	temp0+1 				; get MSB of address of string to be written
.2e9c	c5 34		cmp $34				cmp 	highMemory+1 			; if >= high memory it is concreted
.2e9e	b0 0a		bcs $2eaa			bcs 	_RCSucceed 				; so it needs concreting again - duplication.
.2ea0	a5 7b		lda $7b				lda 	softMemAlloc+1 			; have we allocated any soft memory yet ?
.2ea2	f0 08		beq $2eac			beq 	_RCFail 				; if not, this cannot be soft memory.
.2ea4	a5 2b		lda $2b				lda 	temp0+1 				; get MSB of address of string to be written
.2ea6	c5 7b		cmp $7b				cmp 	softMemAlloc+1 			; if >= soft mem alloc it is either soft
.2ea8	90 02		bcc $2eac			bcc 	_RCFail 				; so concreting
.2eaa					_RCSucceed:
.2eaa	38		sec				sec
.2eab	60		rts				rts
.2eac					_RCFail:
.2eac	18		clc				clc
.2ead	60		rts				rts
.2eae					AllocateHardMemory:
.2eae	98		tya				tya
.2eaf	48		pha				pha
.2eb0	ad 14 0c	lda $0c14			lda 	srcStrLen 				; characters in string
.2eb3	69 0a		adc #$0a			adc 	#1+1+8 					; one for hard memory size, one for string size, extra for expansion
.2eb5	b0 04		bcs $2ebb			bcs 	_AHMSetMax 				; max out that amount.
.2eb7	c9 fe		cmp #$fe			cmp 	#MaxStringSize+2
.2eb9	90 02		bcc $2ebd			bcc 	_AHMIsOkay
.2ebb					_AHMSetMax:
.2ebb	a9 fe		lda #$fe			lda 	#MaxStringSize+2
.2ebd					_AHMIsOkay:
.2ebd	48		pha				pha	 							; save size to be allocated
.2ebe	49 ff		eor #$ff			eor 	#$FF 					; complement and add to high Memory
.2ec0	38		sec				sec  							; and copy result to TOS as target address.
.2ec1	65 33		adc $33				adc 	highMemory
.2ec3	85 33		sta $33				sta 	highMemory
.2ec5	a5 34		lda $34				lda 	highMemory+1
.2ec7	69 ff		adc #$ff			adc 	#$FF
.2ec9	85 34		sta $34				sta 	highMemory+1
.2ecb	a0 00		ldy #$00			ldy 	#0 						; Y = 0
.2ecd	68		pla				pla 							; get the total size of the storage block
.2ece	91 33		sta ($33),y			sta 	(highMemory),y 			; and set it
.2ed0	18		clc				clc
.2ed1	a5 33		lda $33				lda		highMemory 				; point the target address to the byte after this.
.2ed3	69 01		adc #$01			adc 	#1
.2ed5	91 2c		sta ($2c),y			sta 	(temp1),y
.2ed7	a5 34		lda $34				lda 	highMemory+1
.2ed9	69 00		adc #$00			adc 	#0
.2edb	c8		iny				iny
.2edc	91 2c		sta ($2c),y			sta 	(temp1),y
.2ede	68		pla				pla
.2edf	a8		tay				tay
.2ee0	60		rts				rts
.2ee1					CopyStringToHardMemory:
.2ee1	98		tya				tya
.2ee2	48		pha				pha
.2ee3	a0 00		ldy #$00			ldy 	#0 						; copy target address to temp2
.2ee5	b1 2c		lda ($2c),y			lda 	(temp1),y
.2ee7	85 2e		sta $2e				sta 	temp2
.2ee9	c8		iny				iny
.2eea	b1 2c		lda ($2c),y			lda 	(temp1),y
.2eec	85 2f		sta $2f				sta 	temp2+1
.2eee	ac 14 0c	ldy $0c14			ldy 	srcStrLen 				; copy this + 1 characters, (length too) hence $FF compare
.2ef1					_CSTHMLoop:
.2ef1	b1 2a		lda ($2a),y			lda 	(temp0),y
.2ef3	91 2e		sta ($2e),y			sta 	(temp2),y
.2ef5	88		dey				dey
.2ef6	c0 ff		cpy #$ff			cpy 	#$FF 					; this does the +1
.2ef8	d0 f7		bne $2ef1			bne 	_CSTHMLoop
.2efa	68		pla				pla
.2efb	a8		tay				tay
.2efc	60		rts				rts
.2efd					CheckSpecialConcretion:
.2efd	ad 14 0c	lda $0c14			lda 	srcStrLen 				; check string is null e.g. length = 0
.2f00	f0 02		beq $2f04			beq 	_CSCNullString
.2f02	18		clc				clc
.2f03	60		rts				rts
.2f04					_CSCNullString:
.2f04	a9 00		lda #$00			lda 	#0 						; by always returning this address we don't waste
.2f06	8d ce 0a	sta $0ace			sta 	NullString		 		; storage on null strings.
.2f09	a9 ce		lda #$ce			lda 	#(NullString) & $FF
.2f0b	85 2a		sta $2a				sta 	temp0
.2f0d	a9 0a		lda #$0a			lda 	#(NullString) >> 8
.2f0f	85 2b		sta $2b				sta 	1+(temp0)
.2f11	38		sec				sec
.2f12	60		rts				rts

;******  Return to file: string/string.asm

.2f13					stringHandler:
.2f13	7c 16 2f	jmp ($2f16,x)			jmp 	(stringVectors,x)
.2f16					stringVectors:
>2f16	7f 2c					.word StringChrs           ; index 0
>2f18	72 2d					.word StrClone             ; index 2
>2f1a	ea 2c					.word StringConcat         ; index 4
>2f1c	a1 2c					.word STRCompare           ; index 6
>2f1e	98 2d					.word CaseString           ; index 8
>2f20	dd 2d					.word StringSubstring      ; index 10
>2f22	31 2e					.word StringWrite          ; index 12

;******  Return to file: basic.asm

.2f24					section_end_string:
.2f24					section_start_tokeniser:

;******  Processing file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/detokenise/detokenise.asm

.0c15					deTokeniseVector:
>0c15							.fill 	2
.0c17					lastCharacterClass:
>0c17							.fill 	1
.2f24					ListLine:
.2f24	a9 49		lda #$49			lda 	#(deTokenPrint) & $FF
.2f26	8d 15 0c	sta $0c15			sta 	deTokeniseVector
.2f29	a9 30		lda #$30			lda 	#(deTokenPrint) >> 8
.2f2b	8d 16 0c	sta $0c16			sta 	1+(deTokeniseVector)
.2f2e					Detokenise:
.2f2e	a9 ff		lda #$ff			lda 	#$FF 					; last thing printed is a dummy value.
.2f30	8d 17 0c	sta $0c17			sta 	lastCharacterClass
.2f33	a2 02		ldx #$02			ldx 	#2
.2f35	20 02 2b	jsr $2b02			jsr 	MInt32False
.2f38	a0 01		ldy #$01			ldy 	#1 						; copy line number to stack,2 (as using stack 0,1)
.2f3a	b1 28		lda ($28),y			lda 	(codePtr),y
.2f3c	95 48		sta $48,x			sta 	esInt0,x
.2f3e	c8		iny				iny
.2f3f	b1 28		lda ($28),y			lda 	(codePtr),y
.2f41	95 50		sta $50,x			sta 	esInt1,x
.2f43	a9 84		lda #$84			lda 	#LTYLineNumber
.2f45	20 24 30	jsr $3024			jsr 	ListOutputCharacter
.2f48	a9 0a		lda #$0a			lda 	#10 					; base 10
.2f4a	20 e8 2f	jsr $2fe8			jsr 	DTPrintInteger 			; print as integer.
.2f4d	a0 00		ldy #$00			ldy 	#0 						; get length
.2f4f	b1 2a		lda ($2a),y			lda 	(temp0),y 				; into X
.2f51	aa		tax				tax
.2f52					_DTPadOut:
.2f52	a9 20		lda #$20			lda 	#" "
.2f54	20 24 30	jsr $3024			jsr 	ListOutputCharacter
.2f57	e8		inx				inx
.2f58	e0 06		cpx #$06			cpx 	#6
.2f5a	d0 f6		bne $2f52			bne 	_DTPadOut
.2f5c	a0 03		ldy #$03			ldy 	#3 						; start position.
.2f5e					_DTListLoop
.2f5e	b1 28		lda ($28),y			lda 	(codePtr),y
.2f60	c9 85		cmp #$85			cmp 	#TOK_STR 				; Inline string.
.2f62	f0 58		beq $2fbc			beq 	_DTIsString
.2f64	c9 84		cmp #$84			cmp 	#TOK_FPC 				; Floating point
.2f66	f0 7c		beq $2fe4			beq 	_DTIsFloat
.2f68	c9 c5		cmp #$c5			cmp 	#TKW_AMP 				; & hex marker
.2f6a	f0 16		beq $2f82			beq 	_DTHexConstant
.2f6c	c9 80		cmp #$80			cmp 	#TOK_EOL 				; End of Line
.2f6e	d0 06		bne $2f76			bne 	_DTNotEnd
.2f70	a9 ff		lda #$ff			lda 	#255 					; print CR
.2f72	20 24 30	jsr $3024			jsr 	ListOutputCharacter
.2f75	60		rts				rts
.2f76					_DTNotEnd:
.2f76	c9 00		cmp #$00			cmp 	#0
.2f78	30 36		bmi $2fb0			bmi 	_DTIsToken
.2f7a	c9 40		cmp #$40			cmp 	#$40
.2f7c	90 38		bcc $2fb6			bcc 	_DTIsIdentifier
.2f7e	a9 0a		lda #$0a			lda 	#10 					; this is the base
.2f80	d0 08		bne $2f8a			bne 	_DTConstant
.2f82					_DTHexConstant:
.2f82	a9 26		lda #$26			lda 	#"&"
.2f84	20 24 30	jsr $3024			jsr 	ListOutputCharacter
.2f87	c8		iny				iny
.2f88	a9 10		lda #$10			lda 	#16
.2f8a					_DTConstant:
.2f8a	48		pha				pha
.2f8b	a9 00		lda #$00			lda 	#0 							; now constant, may need spaces
.2f8d	20 65 30	jsr $3065			jsr 	DTSwitchMode
.2f90	a9 86		lda #$86			lda 	#LTYConstant
.2f92	20 24 30	jsr $3024			jsr 	ListOutputCharacter
.2f95	a2 02		ldx #$02			ldx 	#2
.2f97	8a		txa				txa
.2f98	a2 0a		ldx #$0a		ldx	#10
.2f9a	20 64 2c	jsr $2c64		jsr	mainHandler
.2f9d	aa		tax				tax
.2f9e	20 80 19	jsr $1980			jsr 	TOSToTemp0
.2fa1	68		pla				pla
.2fa2	85 32		sta $32				sta 	tempShort
.2fa4	98		tya				tya
.2fa5	48		pha				pha
.2fa6	a5 32		lda $32				lda 	tempShort
.2fa8	20 e8 2f	jsr $2fe8			jsr 	DTPrintInteger
.2fab	68		pla				pla
.2fac	a8		tay				tay
.2fad	4c 5e 2f	jmp $2f5e			jmp 	_DTListLoop
.2fb0					_DTIsToken:
.2fb0	20 be 30	jsr $30be			jsr 	DTDecodeToken
.2fb3	4c 5e 2f	jmp $2f5e			jmp 	_DTListLoop
.2fb6					_DTIsIdentifier:
.2fb6	20 77 30	jsr $3077			jsr 	DTIdentifier
.2fb9	4c 5e 2f	jmp $2f5e			jmp 	_DTListLoop
.2fbc					_DTIsString:
.2fbc	a9 01		lda #$01			lda 	#1 							; now punctuation, may need spaces
.2fbe	20 65 30	jsr $3065			jsr 	DTSwitchMode
.2fc1	a9 81		lda #$81			lda 	#LTYString
.2fc3	20 24 30	jsr $3024			jsr 	ListOutputCharacter
.2fc6	a9 22		lda #$22			lda 	#'"'						; open quote
.2fc8	20 24 30	jsr $3024			jsr 	ListOutputCharacter
.2fcb	a2 02		ldx #$02			ldx 	#2 							; evaluate string to TOS2.
.2fcd	8a		txa				txa
.2fce	a2 0a		ldx #$0a		ldx	#10
.2fd0	20 64 2c	jsr $2c64		jsr	mainHandler
.2fd3	aa		tax				tax
.2fd4	20 80 19	jsr $1980			jsr 	TOSToTemp0
.2fd7	a9 00		lda #$00			lda 	#0 							; don't capitalise.
.2fd9	20 fa 2f	jsr $2ffa			jsr 	DTPrintLengthPrefix
.2fdc	a9 22		lda #$22			lda 	#'"'
.2fde	20 24 30	jsr $3024			jsr 	ListOutputCharacter
.2fe1	4c 5e 2f	jmp $2f5e			jmp 	_DTListLoop
.2fe4					_DTIsFloat:
>2fe4	db						.byte 	$DB
.2fe5	4c e4 2f	jmp $2fe4			jmp 	_DTIsFloat

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/detokenise/dtprint.asm

.0c18					tPrintCount:
>0c18							.fill 	1
.2fe8					DTPrintInteger:
.2fe8	48		pha				pha
.2fe9	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.2feb	85 2a		sta $2a				sta 	temp0
.2fed	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.2fef	85 2b		sta $2b				sta 	1+(temp0)
.2ff1	68		pla				pla
.2ff2	a8		tay				tay
.2ff3	8a		txa				txa
.2ff4	a2 0c		ldx #$0c		ldx	#12
.2ff6	20 64 2c	jsr $2c64		jsr	mainHandler
.2ff9	aa		tax				tax
.2ffa					DTPrintLengthPrefix:
.2ffa	aa		tax				tax
.2ffb	98		tya				tya
.2ffc	48		pha				pha
.2ffd	a0 00		ldy #$00			ldy 	#0
.2fff	b1 2a		lda ($2a),y			lda 	(temp0),y
.3001	8d 18 0c	sta $0c18			sta 	tPrintCount
.3004	f0 1b		beq $3021			beq 	_DTPLPExit
.3006					_DTPLPLoop:
.3006	c8		iny				iny
.3007	b1 2a		lda ($2a),y			lda 	(temp0),y
.3009	29 7f		and #$7f			and 	#$7F
.300b	e0 00		cpx #$00			cpx 	#0
.300d	f0 0a		beq $3019			beq 	_DTPLPNoCase
.300f	c9 41		cmp #$41			cmp 	#"A"
.3011	90 06		bcc $3019			bcc 	_DTPLPNoCase
.3013	c9 5b		cmp #$5b			cmp 	#"Z"+1
.3015	b0 02		bcs $3019			bcs 	_DTPLPNoCase
.3017	49 20		eor #$20			eor 	#"A"^"a"
.3019					_DTPLPNoCase
.3019	20 24 30	jsr $3024			jsr 	ListOutputCharacter
.301c	ce 18 0c	dec $0c18			dec 	tPrintCount
.301f	d0 e5		bne $3006			bne 	_DTPLPLoop
.3021					_DTPLPExit:
.3021	68		pla				pla
.3022	a8		tay				tay
.3023	60		rts				rts
.3024					ListOutputCharacter:
.3024	85 32		sta $32				sta 	tempShort
.3026	48		pha				pha
.3027	8a		txa				txa
.3028	48		pha				pha
.3029	98		tya				tya
.302a	48		pha				pha
.302b	a5 32		lda $32				lda 	tempShort
.302d	c9 20		cmp #$20			cmp 	#32
.302f	b0 0c		bcs $303d			bcs		_LOCHiBit
.3031	09 40		ora #$40			ora 	#64
.3033	c9 40		cmp #$40			cmp 	#64
.3035	f0 06		beq $303d			beq 	_LOCHiBit
.3037	c9 5b		cmp #$5b			cmp 	#65+26
.3039	b0 02		bcs $303d			bcs 	_LOCHiBit
.303b	69 20		adc #$20			adc 	#32
.303d					_LOCHiBit:
.303d	20 46 30	jsr $3046			jsr 	_LOCCallVector
.3040	68		pla				pla
.3041	a8		tay				tay
.3042	68		pla				pla
.3043	aa		tax				tax
.3044	68		pla				pla
.3045					_LOCExit:
.3045	60		rts				rts
.3046					_LOCCallVector:
.3046	6c 15 0c	jmp ($0c15)			jmp 	(deTokeniseVector)
.3049					deTokenPrint:
.3049	c9 00		cmp #$00			cmp 	#0
.304b	30 06		bmi $3053			bmi 	_dtpInk
.304d	a2 14		ldx #$14		ldx	#20
.304f	20 64 11	jsr $1164		jsr	deviceHandler
.3052	60		rts				rts
.3053	c9 ff		cmp #$ff	_dtpInk:cmp 	#255
.3055	f0 08		beq $305f			beq 	_dtpCR
.3057	29 07		and #$07			and 	#7
.3059	a2 08		ldx #$08		ldx	#8
.305b	20 64 11	jsr $1164		jsr	deviceHandler
.305e	60		rts				rts
.305f					_dtpCR:
.305f	a2 04		ldx #$04		ldx	#4
.3061	20 64 11	jsr $1164		jsr	deviceHandler
.3064	60		rts				rts
.3065					DTSwitchMode:
.3065	cd 17 0c	cmp $0c17			cmp 	LastCharacterClass
.3068	f0 04		beq $306e			beq 	_DTSMNoChange
.306a	8d 17 0c	sta $0c17			sta 	LastCharacterClass
.306d					_DTSMExit:
.306d	60		rts				rts
.306e					_DTSMNoChange:
.306e	c9 01		cmp #$01			cmp 	#1
.3070	f0 fb		beq $306d			beq 	_DTSMExit
.3072	a9 20		lda #$20			lda 	#" "
.3074	4c 24 30	jmp $3024			jmp 	ListOutputCharacter

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/detokenise/identifier.asm

.3077					DTIdentifier:
.3077	a9 00		lda #$00			lda 	#0 							; now text, may need spaces
.3079	20 65 30	jsr $3065			jsr 	DTSwitchMode
.307c	a9 87		lda #$87			lda 	#LTYIdentifier
.307e	20 24 30	jsr $3024			jsr 	ListOutputCharacter
.3081					_DTILoop:
.3081	b1 28		lda ($28),y			lda 	(codePtr),y 				; output main bit of identifier.
.3083	c9 2d		cmp #$2d			cmp 	#"-"						; make - back to _
.3085	d0 02		bne $3089			bne 	_DTINotUS
.3087	a9 5f		lda #$5f			lda 	#"_"
.3089					_DTINotUS:
.3089	20 24 30	jsr $3024			jsr 	ListOutputCharacter
.308c	c8		iny				iny
.308d	b1 28		lda ($28),y			lda 	(codePtr),y 				; until end identifier marker.
.308f	c9 3a		cmp #$3a			cmp 	#$3A
.3091	90 ee		bcc $3081			bcc 	_DTILoop
.3093	c8		iny				iny
.3094	c9 3a		cmp #$3a			cmp 	#$3A 						; is it integer non array
.3096	f0 25		beq $30bd			beq 	_DTIExit 					; no postfix.
.3098	48		pha				pha
.3099	a9 01		lda #$01			lda  	#1 							; it ends in punctuation
.309b	8d 17 0c	sta $0c17			sta 	LastCharacterClass
.309e	a9 82		lda #$82			lda 	#LTYPunctuation
.30a0	20 24 30	jsr $3024			jsr 	ListOutputCharacter
.30a3	68		pla				pla
.30a4	c9 3b		cmp #$3b			cmp 	#$3B
.30a6	f0 10		beq $30b8			beq 	_DTIArray
.30a8	4a		lsr a				lsr 	a 							; array flag in C
.30a9	08		php				php
.30aa	49 1e		eor #$1e			eor 	#$3C/2 						; check if $
.30ac	f0 02		beq $30b0			beq 	_DTIDollar
.30ae	a9 07		lda #$07			lda 	#"$"^"#" 					; this if #, 0 if $
.30b0					_DTIDollar:
.30b0	49 24		eor #$24			eor 	#"$"
.30b2	20 24 30	jsr $3024			jsr 	ListOutputCharacter
.30b5	28		plp				plp
.30b6	90 05		bcc $30bd			bcc 	_DTIExit
.30b8					_DTIArray:
.30b8	a9 28		lda #$28			lda 	#"("
.30ba	20 24 30	jsr $3024			jsr 	ListOutputCharacter
.30bd					_DTIExit:
.30bd	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/detokenise/token.asm

.30be					DTDecodeToken:
.30be	a2 00		ldx #$00			ldx 	#0 							; table number to use
.30c0	b1 28		lda ($28),y			lda 	(codePtr),y
.30c2	c9 84		cmp #$84			cmp 	#$84
.30c4	b0 05		bcs $30cb			bcs 	_DTNotShift
.30c6	29 03		and #$03			and 	#3 							; get the shift 1..3
.30c8	0a		asl a				asl 	a 							; put 2 x in X
.30c9	aa		tax				tax
.30ca	c8		iny				iny
.30cb					_DTNotShift:
.30cb	bd cb 33	lda $33cb,x			lda 	TokenTableAddress,x 		; get the token table to use to decode it.
.30ce	85 2a		sta $2a				sta 	temp0 						; point into temp0
.30d0	bd cc 33	lda $33cc,x			lda 	TokenTableAddress+1,x
.30d3	85 2b		sta $2b				sta 	temp0+1
.30d5	b1 28		lda ($28),y			lda 	(codePtr),y 				; get the token value.
.30d7	c8		iny				iny 								; consume it.
.30d8	aa		tax				tax
.30d9	98		tya				tya
.30da	48		pha				pha
.30db					_DTFindText:
.30db	e0 86		cpx #$86			cpx 	#$86 						; finished ?
.30dd	f0 11		beq $30f0			beq 	_DTFoundText
.30df	ca		dex				dex
.30e0	a0 00		ldy #$00			ldy 	#0
.30e2	38		sec				sec
.30e3	b1 2a		lda ($2a),y			lda 	(temp0),y
.30e5	65 2a		adc $2a				adc 	temp0
.30e7	85 2a		sta $2a				sta 	temp0
.30e9	90 f0		bcc $30db			bcc 	_DTFindText
.30eb	e6 2b		inc $2b				inc 	temp0+1
.30ed	4c db 30	jmp $30db			jmp 	_DTFindText
.30f0					_DTFoundText:
.30f0	a0 01		ldy #$01			ldy 	#1 							; get first character
.30f2	b1 2a		lda ($2a),y			lda 	(temp0),y
.30f4	29 7f		and #$7f			and 	#$7F 						; will have bit 7 set.
.30f6	c9 41		cmp #$41			cmp 	#"A" 						; check for punctuation.
.30f8	90 11		bcc $310b			bcc 	_DTIsPunctuation
.30fa	c9 5b		cmp #$5b			cmp 	#"Z"+1
.30fc	b0 0d		bcs $310b			bcs 	_DTIsPunctuation
.30fe	a9 00		lda #$00			lda 	#0 							; now text, may need spaces
.3100	20 65 30	jsr $3065			jsr 	DTSwitchMode
.3103	a9 83		lda #$83			lda 	#LTYKeyword
.3105	20 24 30	jsr $3024			jsr 	ListOutputCharacter
.3108	4c 15 31	jmp $3115			jmp 	_DTPrint
.310b					_DTIsPunctuation:
.310b	a9 01		lda #$01			lda 	#1 							; now punctuation, may need spaces
.310d	20 65 30	jsr $3065			jsr 	DTSwitchMode
.3110	a9 82		lda #$82			lda 	#LTYPunctuation
.3112	20 24 30	jsr $3024			jsr 	ListOutputCharacter
.3115					_DTPrint:
.3115	a9 01		lda #$01			lda 	#1 							; fix case.
.3117	20 fa 2f	jsr $2ffa			jsr 	DTPrintLengthPrefix 		; print it out.
.311a	a0 00		ldy #$00			ldy 	#0
.311c	b1 2a		lda ($2a),y			lda 	(temp0),y
.311e	a8		tay				tay
.311f	b1 2a		lda ($2a),y			lda 	(temp0),y
.3121	29 7f		and #$7f			and 	#$7F 						; will have bit 7 set.
.3123	c9 41		cmp #$41			cmp 	#"A" 						; check for punctuation.
.3125	90 04		bcc $312b			bcc 	_DTIsNowPunctuation
.3127	c9 5b		cmp #$5b			cmp 	#"Z"+1
.3129	90 05		bcc $3130			bcc 	_DTPExit
.312b					_DTIsNowPunctuation:
.312b	a9 01		lda #$01			lda 	#1
.312d	8d 17 0c	sta $0c17			sta		LastCharacterClass
.3130					_DTPExit:
.3130	68		pla				pla
.3131	a8		tay				tay
.3132	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/search.asm

.0c19					currentSet:
>0c19							.fill 	1
.3133					TokenSearch:
.3133	8a		txa				txa
.3134	48		pha				pha
.3135	98		tya				tya
.3136	48		pha				pha
.3137	a9 00		lda #$00			lda 	#0
.3139	8d 19 0c	sta $0c19			sta 	currentSet
.313c					_TSLoop:
.313c	ad 19 0c	lda $0c19			lda 	currentSet 					; 2 x currentset in X
.313f	0a		asl a				asl 	a
.3140	aa		tax				tax
.3141	bd cb 33	lda $33cb,x			lda 	TokenTableAddress,x 		; set temp0 to the table address
.3144	85 2a		sta $2a				sta 	temp0
.3146	bd cc 33	lda $33cc,x			lda 	TokenTableAddress+1,x
.3149	85 2b		sta $2b				sta 	temp0+1
.314b	20 72 31	jsr $3172			jsr 	TokenSearchOne 				; search one table
.314e	b0 0d		bcs $315d			bcs 	_TSFound 					; found a token.
.3150	ee 19 0c	inc $0c19			inc 	currentSet 					; next set
.3153	ad 19 0c	lda $0c19			lda 	currentSet
.3156	c9 04		cmp #$04			cmp 	#4
.3158	d0 e2		bne $313c			bne 	_TSLoop 					; back if not done all four.
.315a	18		clc				clc 								; clear carry and exit
.315b	90 10		bcc $316d			bcc 	_TSExit
.315d					_TSFound:
.315d	48		pha				pha 								; save token
.315e	ad 19 0c	lda $0c19			lda 	currentSet					; if set zero no shift
.3161	f0 05		beq $3168			beq 	_TSNoShift
.3163	09 80		ora #$80			ora 	#$80 						; Write as $81-$83
.3165	20 21 32	jsr $3221			jsr 	TokenWrite
.3168					_TSNoShift:
.3168	68		pla				pla 								; get token back
.3169	20 21 32	jsr $3221			jsr 	TokenWrite 					; write it
.316c	38		sec				sec 								; carry set indicating success
.316d					_TSExit:
.316d	68		pla				pla
.316e	a8		tay				tay
.316f	68		pla				pla
.3170	aa		tax				tax
.3171	60		rts				rts
.3172					TokenSearchOne:
.3172	a2 86		ldx #$86			ldx 	#$86 						; current token being tested.
.3174					_TSOLoop:
.3174	a0 00		ldy #$00			ldy 	#0
.3176	b1 2a		lda ($2a),y			lda 	(temp0),y 					; get length of token
.3178	f0 26		beq $31a0			beq 	_TSOFail 					; if zero, end of table
.317a	cd cf 0a	cmp $0acf			cmp 	convertBuffer 				; length is the same, compare the text matches.
.317d	f0 11		beq $3190			beq 	_TSOCheckText
.317f					_TSONext:
.317f	e8		inx				inx 								; bump token
.3180	a0 00		ldy #$00			ldy 	#0							; get length
.3182	b1 2a		lda ($2a),y			lda 	(temp0),y
.3184	38		sec				sec
.3185	65 2a		adc $2a				adc 	temp0 						; add to temp0 + 1
.3187	85 2a		sta $2a				sta 	temp0
.3189	90 e9		bcc $3174			bcc 	_TSOLoop
.318b	e6 2b		inc $2b				inc 	temp0+1
.318d	4c 74 31	jmp $3174			jmp 	_TSOLoop
.3190					_TSOCheckText:
.3190	a8		tay				tay 								; compare length downto 1.
.3191					_TSOCheckLoop:
.3191	b1 2a		lda ($2a),y			lda 	(temp0),y 					; use EOR to compare
.3193	59 cf 0a	eor $0acf,y			eor 	convertBuffer,y
.3196	29 7f		and #$7f			and 	#$7F 						; ignore bit 7
.3198	d0 e5		bne $317f			bne 	_TSONext 					; different goto next.
.319a	88		dey				dey 								; do all
.319b	d0 f4		bne $3191			bne 	_TSOCheckLoop
.319d	8a		txa				txa 								; return token in A and carry set
.319e	38		sec				sec
.319f	60		rts				rts
.31a0					_TSOFail:
.31a0	18		clc				clc
.31a1	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/test.asm

.31a2					TokTest:
.31a2	a2 ff		ldx #$ff				ldx 	#$FF
.31a4	9a		txs					txs
.31a5	a9 c2		lda #$c2			lda 	#(TokenText1) & $FF
.31a7	85 28		sta $28				sta 	codePtr
.31a9	a9 31		lda #$31			lda 	#(TokenText1) >> 8
.31ab	85 29		sta $29				sta 	1+(codePtr)
.31ad	20 c2 31	jsr $31c2				jsr 	Tokenise
.31b0	a2 00		ldx #$00	TokStop:	ldx 	#0
.31b2	bd c2 31	lda $31c2,x	_TokCheck:	lda 	TokenBytes1,x
.31b5	dd 1d 0c	cmp $0c1d,x				cmp 	tokenBuffer,x
.31b8	d0 fe		bne $31b8	_TokFail:	bne 	_TokFail
.31ba	e8		inx					inx
.31bb	c9 80		cmp #$80				cmp 	#$80
.31bd	d0 f3		bne $31b2				bne 	_TokCheck
.31bf	4c ff ff	jmp $ffff				jmp 	$FFFF

;******  Processing file: tokeniser/tokenise/../../generated/toktest.inc

.31c2					TokenText1:
.31c2					TokenBytes1:

;******  Return to file: tokeniser/tokenise/test.asm


;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokenise.asm

.0c1a					tokenHeader:
>0c1a							.fill 	3
.0c1d					tokenBuffer:
>0c1d							.fill 	256
.0d1d					tokenBufferIndex:
>0d1d							.fill 	1
.31c2					Tokenise:
.31c2	20 3a 32	jsr $323a			jsr 	TokeniseMakeASCIIZ 			; convert to ASCIIZ string.
.31c5					TokeniseASCIIZ:
.31c5	20 4b 32	jsr $324b			jsr 	TokeniseFixCase 			; remove controls and lower case outside quotes.
.31c8	a9 00		lda #$00			lda 	#0 							; reset the token buffer index
.31ca	8d 1d 0d	sta $0d1d			sta 	tokenBufferIndex
.31cd	a8		tay				tay 								; start pointer
.31ce	a9 80		lda #$80			lda 	#$80 						; empty token buffer ($80 ends it)
.31d0	8d 1d 0c	sta $0c1d			sta 	tokenBuffer
.31d3					_TokLoop:
.31d3	b1 28		lda ($28),y			lda 	(codePtr),y 				; get next character
.31d5	f0 46		beq $321d			beq 	_TokExit 					; if zero, then exit.
.31d7	c8		iny				iny 								; skip over spaces.
.31d8	c9 20		cmp #$20			cmp 	#" "
.31da	f0 f7		beq $31d3			beq 	_TokLoop
.31dc	88		dey				dey 								; point back to character.
.31dd	c9 26		cmp #$26			cmp 	#"&"						; Hexadecimal constant.
.31df	f0 18		beq $31f9			beq 	_TokHexConst
.31e1	c9 22		cmp #$22			cmp 	#'"'						; Quoted String
.31e3	f0 23		beq $3208			beq 	_TokQString
.31e5	c9 5b		cmp #$5b			cmp 	#"Z"+1 						; > 'Z' is punctuation
.31e7	b0 26		bcs $320f			bcs 	_TokPunctuation
.31e9	c9 41		cmp #$41			cmp 	#"A" 						; A..Z identifier
.31eb	b0 29		bcs $3216			bcs 	_TokIdentifier
.31ed	c9 3a		cmp #$3a			cmp 	#"9"+1
.31ef	b0 1e		bcs $320f			bcs 	_TokPunctuation 			; between 9 and A exclusive, punctuation
.31f1	c9 30		cmp #$30			cmp 	#"0"
.31f3	90 1a		bcc $320f			bcc 	_TokPunctuation 			; < 0, punctuation.
.31f5	a9 0a		lda #$0a			lda 	#10  						; 0..9 constant in base 10.
.31f7	d0 08		bne $3201			bne 	_TokConst
.31f9					_TokHexConst:
.31f9	c8		iny				iny									; consume token.
.31fa	a9 c5		lda #$c5			lda 	#TKW_AMP 					; Write ampersand token out
.31fc	20 21 32	jsr $3221			jsr 	TokenWrite
.31ff	a9 10		lda #$10			lda 	#16
.3201					_TokConst:
.3201	20 09 33	jsr $3309			jsr 	TokeniseInteger
.3204	b0 cd		bcs $31d3			bcs 	_TokLoop
.3206	90 17		bcc $321f			bcc 	_TokFail
.3208					_TokQString:
.3208	20 9f 33	jsr $339f			jsr 	TokeniseString
.320b	b0 c6		bcs $31d3			bcs 	_TokLoop
.320d	90 10		bcc $321f			bcc 	_TokFail
.320f					_TokPunctuation:
.320f	20 7e 33	jsr $337e			jsr 	TokenisePunctuation
.3212	b0 bf		bcs $31d3			bcs 	_TokLoop
.3214	90 09		bcc $321f			bcc 	_TokFail
.3216					_TokIdentifier:
.3216	20 7a 32	jsr $327a			jsr 	TokeniseIdentifier
.3219	b0 b8		bcs $31d3			bcs 	_TokLoop
.321b	90 02		bcc $321f			bcc 	_TokFail
.321d					_TokExit:
.321d	38		sec				sec
.321e	60		rts				rts
.321f					_TokFail:
.321f	18		clc				clc
.3220	60		rts				rts
.3221					TokenWrite:
.3221	85 32		sta $32				sta 	tempShort 					; save XA
.3223	48		pha				pha
.3224	8a		txa				txa
.3225	48		pha				pha
.3226	a5 32		lda $32				lda 	tempShort
.3228	ae 1d 0d	ldx $0d1d			ldx 	tokenBufferIndex 			; geet index
.322b	9d 1d 0c	sta $0c1d,x			sta 	tokenBuffer,x 				; write byte to buffer
.322e	a9 80		lda #$80			lda 	#TOK_EOL 					; pre-emptively write EOL marker after
.3230	9d 1e 0c	sta $0c1e,x			sta 	tokenBuffer+1,x
.3233	ee 1d 0d	inc $0d1d			inc 	tokenBufferIndex 			; bump index
.3236	68		pla				pla
.3237	aa		tax				tax
.3238	68		pla				pla
.3239	60		rts				rts
.323a					TokeniseMakeASCIIZ:
.323a	a0 00		ldy #$00			ldy 	#0							; get length of string.
.323c	b1 28		lda ($28),y			lda 	(codePtr),y
.323e	a8		tay				tay
.323f	c8		iny				iny 								; +1, the NULL goes here.
.3240	a9 00		lda #$00			lda 	#0
.3242	91 28		sta ($28),y			sta 	(codePtr),y 				; write the trailing NULL.
.3244	e6 28		inc $28				inc 	codePtr 					; bump the pointer.
.3246	d0 02		bne $324a			bne 	_TMKAExit
.3248	e6 29		inc $29				inc 	codePtr+1
.324a					_TMKAExit:
.324a	60		rts				rts
.324b					TokeniseFixCase:
.324b	a0 00		ldy #$00			ldy 	#0 							; position in buffer.
.324d	a2 01		ldx #$01			ldx 	#1 							; bit 0 of this is 'in quotes'
.324f					_TFCFlipQ:
.324f	8a		txa				txa
.3250	49 01		eor #$01			eor 	#1
.3252	aa		tax				tax
.3253					_TFCLoop:
.3253	b1 28		lda ($28),y			lda 	(codePtr),y 				; get character
.3255	f0 22		beq $3279			beq 	_TFCExit 					; if zero exit.
.3257	c9 20		cmp #$20			cmp 	#32 						; if control
.3259	90 1a		bcc $3275			bcc 	_TFCControl
.325b	c8		iny				iny 								; preconsume
.325c	c9 22		cmp #$22			cmp 	#'"'
.325e	f0 ef		beq $324f			beq 	_TFCFlipQ
.3260	c9 61		cmp #$61			cmp 	#"a"						; check if L/C
.3262	90 ef		bcc $3253			bcc 	_TFCLoop
.3264	c9 7b		cmp #$7b			cmp 	#"z"+1
.3266	b0 eb		bcs $3253			bcs 	_TFCLoop
.3268	e0 00		cpx #$00			cpx 	#0 							; in quotes, if so, leave alone.
.326a	d0 e7		bne $3253			bne 	_TFCLoop
.326c	88		dey				dey
.326d	49 20		eor #$20			eor 	#"A"^"a"					; make U/C
.326f					_TFCWrite:
.326f	91 28		sta ($28),y			sta 	(codePtr),y
.3271	c8		iny				iny
.3272	4c 53 32	jmp $3253			jmp 	_TFCLoop
.3275					_TFCControl:
.3275	a9 20		lda #$20			lda 	#" "
.3277	d0 f6		bne $326f			bne 	_TFCWrite
.3279					_TFCExit:
.3279	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokident.asm

.327a					TokeniseIdentifier:
.327a	a2 00		ldx #$00			ldx 	#0
.327c					_TICopyID:
.327c	b1 28		lda ($28),y			lda 	(codePtr),y					; get characters
.327e	c9 5f		cmp #$5f			cmp 	#"_" 						; underscore converted to minus internally.
.3280	f0 16		beq $3298			beq 	_TICopyUnderscore
.3282	c9 2e		cmp #$2e			cmp 	#"."
.3284	f0 14		beq $329a			beq 	_TICopyIn
.3286	c9 30		cmp #$30			cmp 	#"0"
.3288	90 1b		bcc $32a5			bcc 	_TIEndCopy
.328a	c9 3a		cmp #$3a			cmp 	#"9"+1
.328c	90 0c		bcc $329a			bcc 	_TICopyIn
.328e	c9 41		cmp #$41			cmp 	#"A"
.3290	90 13		bcc $32a5			bcc 	_TIEndCopy
.3292	c9 5b		cmp #$5b			cmp 	#"Z"+1
.3294	b0 0f		bcs $32a5			bcs		_TIEndCopy
.3296	90 02		bcc $329a			bcc 	_TICopyIn
.3298					_TICopyUnderScore:
.3298	a9 2d		lda #$2d			lda 	#"-"						; _ is mapped to -
.329a					_TICopyIn:
.329a	e8		inx				inx 								; write into buffer in 7 bit ASCII form
.329b	9d cf 0a	sta $0acf,x			sta 	convertBuffer,x
.329e	8e cf 0a	stx $0acf			stx 	convertBuffer
.32a1	c8		iny				iny 								; next character
.32a2	4c 7c 32	jmp $327c			jmp 	_TICopyID 					; loop round
.32a5					_TIEndCopy:
.32a5	a9 24		lda #$24			lda 	#"$"
.32a7	20 fc 32	jsr $32fc			jsr 	TIDCheckCopy
.32aa	a9 23		lda #$23			lda 	#"#"
.32ac	20 fc 32	jsr $32fc			jsr 	TIDCheckCopy
.32af	a9 28		lda #$28			lda 	#"("
.32b1	20 fc 32	jsr $32fc			jsr 	TIDCheckCopy
.32b4	20 33 31	jsr $3133			jsr 	TokenSearch 				; is it a token
.32b7	b0 41		bcs $32fa			bcs 	_TIExit 					; if so, then exit.
.32b9	98		tya				tya
.32ba	48		pha				pha
.32bb	a0 3a		ldy #$3a			ldy 	#$3A 						; default type.
.32bd	ae cf 0a	ldx $0acf			ldx 	convertBuffer 				; is last character (
.32c0	bd cf 0a	lda $0acf,x			lda 	convertBuffer,x
.32c3	c9 28		cmp #$28			cmp 	#"("
.32c5	d0 02		bne $32c9			bne 	_TINotArray
.32c7	ca		dex				dex 								; yes, remove it and convert to array.
.32c8	c8		iny				iny
.32c9					_TINotArray:
.32c9	bd cf 0a	lda $0acf,x			lda 	convertBuffer,x 			; check for $
.32cc	c9 24		cmp #$24			cmp 	#"$"
.32ce	d0 03		bne $32d3			bne 	_TINotString
.32d0	ca		dex				dex
.32d1	c8		iny				iny
.32d2	c8		iny				iny
.32d3					_TINotString:
.32d3	bd cf 0a	lda $0acf,x			lda 	convertBuffer,x 			; check for #
.32d6	c9 23		cmp #$23			cmp 	#"#"
.32d8	d0 05		bne $32df			bne 	_TINotFloat
.32da	ca		dex				dex
.32db	c8		iny				iny
.32dc	c8		iny				iny
.32dd	c8		iny				iny
.32de	c8		iny				iny
.32df					_TINotFloat:
.32df	e8		inx				inx 								; write end marker for identifier.
.32e0	98		tya				tya
.32e1	9d cf 0a	sta $0acf,x			sta 	convertBuffer,x
.32e4	8e cf 0a	stx $0acf			stx 	convertBuffer 				; update length.
.32e7	a2 01		ldx #$01			ldx 	#1
.32e9					_TIOutput:
.32e9	bd cf 0a	lda $0acf,x			lda 	convertBuffer,x
.32ec	29 3f		and #$3f			and 	#$3F
.32ee	48		pha				pha
.32ef	20 21 32	jsr $3221			jsr 	TokenWrite
.32f2	e8		inx				inx
.32f3	68		pla				pla
.32f4	c9 3a		cmp #$3a			cmp 	#$3A
.32f6	90 f1		bcc $32e9			bcc 	_TIOutput
.32f8	68		pla				pla
.32f9	a8		tay				tay
.32fa					_TIExit:
.32fa	38		sec				sec 								; this can't fail.
.32fb	60		rts				rts
.32fc					TIDCheckCopy:
.32fc	d1 28		cmp ($28),y			cmp 	(codePtr),y
.32fe	d0 08		bne $3308			bne 	_TIDCCExit
.3300	e8		inx				inx
.3301	9d cf 0a	sta $0acf,x			sta 	convertBuffer,x
.3304	8e cf 0a	stx $0acf			stx 	convertBuffer
.3307	c8		iny				iny
.3308					_TIDCCExit:
.3308	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokinteger.asm

.3309					TokeniseInteger:
.3309	85 2c		sta $2c				sta 	temp1 						; save base
.330b	a2 00		ldx #$00			ldx 	#0							; count of chars so far
.330d	8e cf 0a	stx $0acf			stx 	convertBuffer
.3310					_TIGetChars:
.3310	b1 28		lda ($28),y			lda 	(codePtr),y 				; check character is numeric
.3312	c9 30		cmp #$30			cmp 	#"0"
.3314	90 1f		bcc $3335			bcc 	_TIEndGet
.3316	c9 3a		cmp #$3a			cmp 	#"9"+1
.3318	90 10		bcc $332a			bcc 	_TIHaveChar
.331a	a5 2c		lda $2c				lda 	temp1 						; fail if not hex mode
.331c	c9 0a		cmp #$0a			cmp 	#10
.331e	f0 15		beq $3335			beq 	_TIEndGet
.3320	b1 28		lda ($28),y			lda 	(codePtr),y 				; check legitimate hex.
.3322	c9 41		cmp #$41			cmp 	#"A"
.3324	90 0f		bcc $3335			bcc 	_TIEndGet
.3326	c9 5b		cmp #$5b			cmp 	#"Z"+1
.3328	b0 0b		bcs $3335			bcs 	_TIEndGet
.332a					_TIHaveChar:
.332a	e8		inx				inx 								; write into buffer.
.332b	8e cf 0a	stx $0acf			stx 	convertBuffer
.332e	9d cf 0a	sta $0acf,x			sta 	convertBuffer,x
.3331	c8		iny				iny 								; next char
.3332	4c 10 33	jmp $3310			jmp 	_TIGetChars
.3335					_TIEndGet:
.3335	e0 00		cpx #$00			cpx 	#0 							; no char acquired.
.3337	f0 1c		beq $3355			beq 	_TIFail
.3339	98		tya				tya
.333a	48		pha				pha
.333b	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.333d	85 2a		sta $2a				sta 	temp0
.333f	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.3341	85 2b		sta $2b				sta 	1+(temp0)
.3343	a9 00		lda #$00			lda 	#0 							; stack 0
.3345	a4 2c		ldy $2c				ldy 	temp1 						; base Y
.3347	a2 16		ldx #$16		ldx	#22
.3349	20 64 2c	jsr $2c64		jsr	mainHandler
.334c	68		pla				pla
.334d	a8		tay				tay
.334e	90 05		bcc $3355			bcc 	_TIFail 					; didn't convert.
.3350	20 57 33	jsr $3357			jsr 	TIRecursiveOut 				; recursive output ?
.3353	38		sec				sec
.3354	60		rts				rts
.3355					_TIFail:
.3355	18		clc				clc
.3356	60		rts				rts
.3357					TIRecursiveOut:
.3357	a5 48		lda $48				lda 	esInt0 						; get value to output after possible recursion
.3359	29 3f		and #$3f			and 	#$3F
.335b	09 40		ora #$40			ora 	#$40
.335d	48		pha				pha
.335e	a5 48		lda $48				lda 	esInt0 						; are we recursing ?
.3360	29 c0		and #$c0			and 	#$C0
.3362	05 50		ora $50				ora 	esInt1
.3364	05 58		ora $58				ora 	esInt2
.3366	05 60		ora $60				ora 	esInt3
.3368	f0 10		beq $337a			beq 	_TIRONoRecursion
.336a	a2 06		ldx #$06			ldx 	#6 							; shift right x 6
.336c					_TIROShift:
.336c	46 60		lsr $60				lsr 	esInt3
.336e	66 58		ror $58				ror 	esInt2
.3370	66 50		ror $50				ror 	esInt1
.3372	66 48		ror $48				ror 	esInt0
.3374	ca		dex				dex
.3375	d0 f5		bne $336c			bne 	_TIROShift
.3377	20 57 33	jsr $3357			jsr 	TIRecursiveOut 				; call recursively
.337a					_TIRONoRecursion:
.337a	68		pla				pla 								; pull the old bit.
.337b	4c 21 32	jmp $3221			jmp 	TokenWrite

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokpunct.asm

.337e					TokenisePunctuation:
.337e	b1 28		lda ($28),y			lda	 	(codePtr),y 				; copy next 2 chars into convertBuffer
.3380	8d d0 0a	sta $0ad0			sta 	convertBuffer+1
.3383	c8		iny				iny
.3384	b1 28		lda ($28),y			lda 	(codePtr),y
.3386	8d d1 0a	sta $0ad1			sta 	convertBuffer+2
.3389	c8		iny				iny 								; Y is +2
.338a	a9 02		lda #$02			lda 	#2 							; 2 character string.
.338c	8d cf 0a	sta $0acf			sta 	convertBuffer
.338f	20 33 31	jsr $3133			jsr 	TokenSearch 				; search for that token.
.3392	b0 0a		bcs $339e			bcs 	_TIFound
.3394	ce cf 0a	dec $0acf			dec 	convertBuffer 				; make it a 1 character string
.3397	88		dey				dey 								; Y is now +1
.3398	20 33 31	jsr $3133			jsr 	TokenSearch 				; search for that token.
.339b	b0 01		bcs $339e			bcs 	_TIFound
.339d	88		dey				dey 								; Y is now +0, carry clear indicating failure.
.339e					_TIFound:
.339e	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokstring.asm

.339f					TokeniseString:
.339f	c8		iny				iny 								; skip opening quote
.33a0	a2 ff		ldx #$ff			ldx 	#255 						; count length of string.
.33a2	84 2a		sty $2a				sty 	temp0 						; save start.
.33a4					_TSGetLength:
.33a4	b1 28		lda ($28),y			lda 	(codePtr),y 				; get next
.33a6	f0 21		beq $33c9			beq 	_TSFail						; end of line, fail
.33a8	c8		iny				iny
.33a9	e8		inx				inx
.33aa	c9 22		cmp #$22			cmp 	#'"' 						; until end quote found.
.33ac	d0 f6		bne $33a4			bne 	_TSGetLength
.33ae	a9 85		lda #$85			lda 	#TOK_STR 					; write string token out
.33b0	20 21 32	jsr $3221			jsr 	TokenWrite
.33b3	8a		txa				txa 								; output length
.33b4	20 21 32	jsr $3221			jsr 	TokenWrite
.33b7	a4 2a		ldy $2a				ldy 	temp0 						; get original position
.33b9	e0 00		cpx #$00			cpx 	#0 							; check ended
.33bb	f0 09		beq $33c6			beq 	_TSExit
.33bd					_TSOutput:
.33bd	b1 28		lda ($28),y			lda 	(codePtr),y					; output character
.33bf	20 21 32	jsr $3221			jsr 	TokenWrite
.33c2	c8		iny				iny
.33c3	ca		dex				dex
.33c4	d0 f7		bne $33bd			bne 	_TSOutput
.33c6					_TSExit:
.33c6	c8		iny				iny 								; skip ending quote
.33c7	38		sec				sec 								; return CS.
.33c8	60		rts				rts
.33c9					_TSFail:
.33c9	18		clc				clc
.33ca	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokentext.asm

.33cb					TokenTableAddress:
>33cb	d3 33						.word 	Group0Text
>33cd	8a 35						.word 	Group1Text
>33cf	c3 35						.word 	Group2Text
>33d1	d0 35						.word 	Group3Text

;******  Processing file: tokeniser/../generated/tokentext0.inc

.33d3					Group0Text:
>33d3	03 41 4e c4				.byte $03,$41,$4e,$c4                  ; $86 and
>33d7	02 4f d2				.byte $02,$4f,$d2                      ; $87 or
>33da	03 58 4f d2				.byte $03,$58,$4f,$d2                  ; $88 xor
>33de	02 3e bd				.byte $02,$3e,$bd                      ; $89 >=
>33e1	02 3c bd				.byte $02,$3c,$bd                      ; $8a <=
>33e4	01 be					.byte $01,$be                          ; $8b >
>33e6	01 bc					.byte $01,$bc                          ; $8c <
>33e8	01 bd					.byte $01,$bd                          ; $8d =
>33ea	02 3c be				.byte $02,$3c,$be                      ; $8e <>
>33ed	01 ab					.byte $01,$ab                          ; $8f +
>33ef	01 ad					.byte $01,$ad                          ; $90 -
>33f1	02 3e be				.byte $02,$3e,$be                      ; $91 >>
>33f4	02 3c bc				.byte $02,$3c,$bc                      ; $92 <<
>33f7	01 aa					.byte $01,$aa                          ; $93 *
>33f9	01 af					.byte $01,$af                          ; $94 /
>33fb	03 4d 4f c4				.byte $03,$4d,$4f,$c4                  ; $95 mod
>33ff	01 de					.byte $01,$de                          ; $96 ^
>3401	01 a1					.byte $01,$a1                          ; $97 !
>3403	01 bf					.byte $01,$bf                          ; $98 ?
>3405	06 52 45 50 45 41 d4			.byte $06,$52,$45,$50,$45,$41,$d4      ; $99 repeat
>340c	05 57 48 49 4c c5			.byte $05,$57,$48,$49,$4c,$c5          ; $9a while
>3412	03 46 4f d2				.byte $03,$46,$4f,$d2                  ; $9b for
>3416	02 49 c6				.byte $02,$49,$c6                      ; $9c if
>3419	07 44 45 46 50 52 4f c3			.byte $07,$44,$45,$46,$50,$52,$4f,$c3  ; $9d defproc
>3421	05 55 4e 54 49 cc			.byte $05,$55,$4e,$54,$49,$cc          ; $9e until
>3427	04 57 45 4e c4				.byte $04,$57,$45,$4e,$c4              ; $9f wend
>342c	04 4e 45 58 d4				.byte $04,$4e,$45,$58,$d4              ; $a0 next
>3431	04 54 48 45 ce				.byte $04,$54,$48,$45,$ce              ; $a1 then
>3436	05 45 4e 44 49 c6			.byte $05,$45,$4e,$44,$49,$c6          ; $a2 endif
>343c	07 45 4e 44 50 52 4f c3			.byte $07,$45,$4e,$44,$50,$52,$4f,$c3  ; $a3 endproc
>3444	01 a8					.byte $01,$a8                          ; $a4 (
>3446	04 4c 45 4e a8				.byte $04,$4c,$45,$4e,$a8              ; $a5 len(
>344b	04 53 47 4e a8				.byte $04,$53,$47,$4e,$a8              ; $a6 sgn(
>3450	04 41 42 53 a8				.byte $04,$41,$42,$53,$a8              ; $a7 abs(
>3455	07 52 41 4e 44 4f 4d a8			.byte $07,$52,$41,$4e,$44,$4f,$4d,$a8  ; $a8 random(
>345d	04 50 41 47 c5				.byte $04,$50,$41,$47,$c5              ; $a9 page
>3462	04 54 52 55 c5				.byte $04,$54,$52,$55,$c5              ; $aa true
>3467	05 46 41 4c 53 c5			.byte $05,$46,$41,$4c,$53,$c5          ; $ab false
>346d	04 4d 49 4e a8				.byte $04,$4d,$49,$4e,$a8              ; $ac min(
>3472	04 4d 41 58 a8				.byte $04,$4d,$41,$58,$a8              ; $ad max(
>3477	04 53 59 53 a8				.byte $04,$53,$59,$53,$a8              ; $ae sys(
>347c	06 54 49 4d 45 52 a8			.byte $06,$54,$49,$4d,$45,$52,$a8      ; $af timer(
>3483	06 45 56 45 4e 54 a8			.byte $06,$45,$56,$45,$4e,$54,$a8      ; $b0 event(
>348a	04 47 45 54 a8				.byte $04,$47,$45,$54,$a8              ; $b1 get(
>348f	06 49 4e 4b 45 59 a8			.byte $06,$49,$4e,$4b,$45,$59,$a8      ; $b2 inkey(
>3496	06 41 4c 4c 4f 43 a8			.byte $06,$41,$4c,$4c,$4f,$43,$a8      ; $b3 alloc(
>349d	05 43 48 52 24 a8			.byte $05,$43,$48,$52,$24,$a8          ; $b4 chr$(
>34a3	06 4c 45 46 54 24 a8			.byte $06,$4c,$45,$46,$54,$24,$a8      ; $b5 left$(
>34aa	05 4d 49 44 24 a8			.byte $05,$4d,$49,$44,$24,$a8          ; $b6 mid$(
>34b0	07 52 49 47 48 54 24 a8			.byte $07,$52,$49,$47,$48,$54,$24,$a8  ; $b7 right$(
>34b8	05 53 54 52 24 a8			.byte $05,$53,$54,$52,$24,$a8          ; $b8 str$(
>34be	04 56 41 4c a8				.byte $04,$56,$41,$4c,$a8              ; $b9 val(
>34c3	05 50 45 45 4b a8			.byte $05,$50,$45,$45,$4b,$a8          ; $ba peek(
>34c9	05 44 45 45 4b a8			.byte $05,$44,$45,$45,$4b,$a8          ; $bb deek(
>34cf	05 4c 45 45 4b a8			.byte $05,$4c,$45,$45,$4b,$a8          ; $bc leek(
>34d5	04 41 53 43 a8				.byte $04,$41,$53,$43,$a8              ; $bd asc(
>34da	04 49 4e 54 a8				.byte $04,$49,$4e,$54,$a8              ; $be int(
>34df	06 46 4c 4f 41 54 a8			.byte $06,$46,$4c,$4f,$41,$54,$a8      ; $bf float(
>34e6	06 49 53 56 41 4c a8			.byte $06,$49,$53,$56,$41,$4c,$a8      ; $c0 isval(
>34ed	07 55 50 50 45 52 24 a8			.byte $07,$55,$50,$50,$45,$52,$24,$a8  ; $c1 upper$(
>34f5	07 4c 4f 57 45 52 24 a8			.byte $07,$4c,$4f,$57,$45,$52,$24,$a8  ; $c2 lower$(
>34fd	01 c0					.byte $01,$c0                          ; $c3 @
>34ff	01 fe					.byte $01,$fe                          ; $c4 ~
>3501	01 a6					.byte $01,$a6                          ; $c5 &
>3503	01 a9					.byte $01,$a9                          ; $c6 )
>3505	01 ba					.byte $01,$ba                          ; $c7 :
>3507	01 ac					.byte $01,$ac                          ; $c8 ,
>3509	01 bb					.byte $01,$bb                          ; $c9 ;
>350b	01 a7					.byte $01,$a7                          ; $ca '
>350d	02 54 cf				.byte $02,$54,$cf                      ; $cb to
>3510	04 53 54 45 d0				.byte $04,$53,$54,$45,$d0              ; $cc step
>3515	04 50 52 4f c3				.byte $04,$50,$52,$4f,$c3              ; $cd proc
>351a	05 4c 4f 43 41 cc			.byte $05,$4c,$4f,$43,$41,$cc          ; $ce local
>3520	03 44 49 cd				.byte $03,$44,$49,$cd                  ; $cf dim
>3524	03 52 45 cd				.byte $03,$52,$45,$cd                  ; $d0 rem
>3528	03 4c 45 d4				.byte $03,$4c,$45,$d4                  ; $d1 let
>352c	05 49 4e 50 55 d4			.byte $05,$49,$4e,$50,$55,$d4          ; $d2 input
>3532	04 45 4c 53 c5				.byte $04,$45,$4c,$53,$c5              ; $d3 else
>3537	03 56 44 d5				.byte $03,$56,$44,$d5                  ; $d4 vdu
>353b	05 50 52 49 4e d4			.byte $05,$50,$52,$49,$4e,$d4          ; $d5 print
>3541	04 47 4f 54 cf				.byte $04,$47,$4f,$54,$cf              ; $d6 goto
>3546	05 47 4f 53 55 c2			.byte $05,$47,$4f,$53,$55,$c2          ; $d7 gosub
>354c	06 52 45 54 55 52 ce			.byte $06,$52,$45,$54,$55,$52,$ce      ; $d8 return
>3553	04 44 41 54 c1				.byte $04,$44,$41,$54,$c1              ; $d9 data
>3558	06 41 53 53 45 52 d4			.byte $06,$41,$53,$53,$45,$52,$d4      ; $da assert
>355f	04 50 4f 4b c5				.byte $04,$50,$4f,$4b,$c5              ; $db poke
>3564	04 44 4f 4b c5				.byte $04,$44,$4f,$4b,$c5              ; $dc doke
>3569	04 4c 4f 4b c5				.byte $04,$4c,$4f,$4b,$c5              ; $dd loke
>356e	03 49 4e cb				.byte $03,$49,$4e,$cb                  ; $de ink
>3572	05 50 41 50 45 d2			.byte $05,$50,$41,$50,$45,$d2          ; $df paper
>3578	03 43 4c d3				.byte $03,$43,$4c,$d3                  ; $e0 cls
>357c	06 4c 4f 43 41 54 c5			.byte $06,$4c,$4f,$43,$41,$54,$c5      ; $e1 locate
>3583	05 42 52 45 41 cb			.byte $05,$42,$52,$45,$41,$cb          ; $e2 break
>3589	00					.byte $00

;******  Return to file: tokeniser/tokentext.asm


;******  Processing file: tokeniser/../generated/tokentext1.inc

.358a					Group1Text:
>358a	05 43 4c 45 41 d2			.byte $05,$43,$4c,$45,$41,$d2          ; $86 clear
>3590	04 4c 4f 41 c4				.byte $04,$4c,$4f,$41,$c4              ; $87 load
>3595	04 53 41 56 c5				.byte $04,$53,$41,$56,$c5              ; $88 save
>359a	04 4c 49 53 d4				.byte $04,$4c,$49,$53,$d4              ; $89 list
>359f	03 4e 45 d7				.byte $03,$4e,$45,$d7                  ; $8a new
>35a3	03 52 55 ce				.byte $03,$52,$55,$ce                  ; $8b run
>35a7	04 52 45 41 c4				.byte $04,$52,$45,$41,$c4              ; $8c read
>35ac	07 52 45 53 54 4f 52 c5			.byte $07,$52,$45,$53,$54,$4f,$52,$c5  ; $8d restore
>35b4	03 45 4e c4				.byte $03,$45,$4e,$c4                  ; $8e end
>35b8	04 53 54 4f d0				.byte $04,$53,$54,$4f,$d0              ; $8f stop
>35bd	04 58 45 4d d5				.byte $04,$58,$45,$4d,$d5              ; $90 xemu
>35c2	00					.byte $00

;******  Return to file: tokeniser/tokentext.asm


;******  Processing file: tokeniser/../generated/tokentext2.inc

.35c3					Group2Text:
>35c3	05 56 50 4f 4b c5			.byte $05,$56,$50,$4f,$4b,$c5          ; $86 vpoke
>35c9	05 56 44 4f 4b c5			.byte $05,$56,$44,$4f,$4b,$c5          ; $87 vdoke
>35cf	00					.byte $00

;******  Return to file: tokeniser/tokentext.asm


;******  Processing file: tokeniser/../generated/tokentext3.inc

.35d0					Group3Text:
>35d0	06 56 50 45 45 4b a8			.byte $06,$56,$50,$45,$45,$4b,$a8      ; $86 vpeek(
>35d7	06 56 44 45 45 4b a8			.byte $06,$56,$44,$45,$45,$4b,$a8      ; $87 vdeek(
>35de	00					.byte $00

;******  Return to file: tokeniser/tokentext.asm


;******  Return to file: tokeniser/tokeniser.asm

.35df					tokeniserHandler:
.35df	7c e2 35	jmp ($35e2,x)			jmp 	(tokeniserVectors,x)
.35e2					tokeniserVectors:
>35e2	2e 2f					.word Detokenise           ; index 0
>35e4	24 2f					.word ListLine             ; index 2
>35e6	a2 31					.word TokTest              ; index 4
>35e8	c2 31					.word Tokenise             ; index 6
>35ea	c5 31					.word TokeniseASCIIZ       ; index 8

;******  Return to file: basic.asm

.35ec					section_end_tokeniser:
.35ec					section_start_variable:

;******  Processing file: variable/variable.asm


;******  Processing file: variable/access.asm

.0d1e					varHash:
>0d1e							.fill	1
.0d1f					varType:
>0d1f							.fill 	1
.0d20					varEnd:
>0d20							.fill 	1
.007c					hashList:
>007c							.fill 	2
.35ec					AccessVariable:
.35ec	aa		tax				tax 								; stack in X
.35ed	c8		iny				iny									; look at second character
.35ee	b1 28		lda ($28),y			lda 	(codePtr),y
.35f0	88		dey				dey
.35f1	c9 3a		cmp #$3a			cmp 	#TYPE_INT 					; is it the integer marker ($3A)
.35f3	d0 15		bne $360a			bne 	_AVLong 					; no, always use the hash tables.
.35f5	b1 28		lda ($28),y			lda 	(codePtr),y 				; this is the 6 bit ASCII of A-Z 1-26
.35f7	38		sec				sec 	 							; make it 0-25
.35f8	e9 01		sbc #$01			sbc 	#1
.35fa	0a		asl a				asl 	a 							; x 4 as 4 bytes / variable.
.35fb	0a		asl a				asl 	a
.35fc	95 48		sta $48,x			sta 	esInt0,x
.35fe	a9 0a		lda #$0a			lda 	#SingleLetterVar >> 8 		; make it an address
.3600	95 50		sta $50,x			sta 	esInt1,x
.3602	a9 80		lda #$80			lda 	#$80 						; type is an integer reference.
.3604	95 40		sta $40,x			sta 	esType,x
.3606	c8		iny				iny 								; skip over the variable reference in the code.
.3607	c8		iny				iny  								; (1 letter, 1 type)
.3608	8a		txa				txa 								; stack in A to return.
.3609	60		rts				rts
.360a					_AVLong:
.360a	8a		txa				txa
.360b	48		pha				pha
.360c	20 53 36	jsr $3653			jsr 	AccessSetup 				; set up the basic information we need for later
.360f	20 81 38	jsr $3881			jsr 	FindVariable 				; does the variable exist already ?
.3612	b0 0e		bcs $3622			bcs 	_AVFound 					; yes, then its found
.3614	ad 1f 0d	lda $0d1f			lda 	varType 					; otherwise, is the variable type an array
.3617	4a		lsr a				lsr 	a
.3618	90 05		bcc $361f			bcc 	_AVCanCreate 				; if not, we can autocreate
.361a	a2 15		ldx #$15			ldx 	#ErrorID_noauto
.361c	20 83 11	jsr $1183		jsr	errorHandler
.361f					_AVCanCreate:
.361f	20 08 37	jsr $3708			jsr 	CreateVariable 				; variable does not exist, create it.
.3622					_AVFound:
.3622	68		pla				pla
.3623	aa		tax				tax
.3624	18		clc				clc 								; copy temp0 (variable record address)
.3625	a5 2a		lda $2a				lda 	temp0 						; +5 (to point to the data)
.3627	69 05		adc #$05			adc 	#5 							; (first 5 bytes are link, name, hash)
.3629	95 48		sta $48,x			sta 	esInt0,x
.362b	a5 2b		lda $2b				lda 	temp0+1
.362d	69 00		adc #$00			adc 	#0
.362f	95 50		sta $50,x			sta 	esInt1,x
.3631	a9 00		lda #$00			lda 	#0
.3633	95 58		sta $58,x			sta 	esInt2,x
.3635	95 60		sta $60,x			sta 	esInt3,x
.3637	ac 1f 0d	ldy $0d1f			ldy 	varType 					; get the type ID from the type.
.363a	b9 13 36	lda $3613,y			lda 	_AVTypeTable-$3A,y 			; e.g. a reference to int/float/string.
.363d	95 40		sta $40,x			sta 	esType,x
.363f	ac 20 0d	ldy $0d20			ldy 	varEnd 						; restore Y
.3642	ad 1f 0d	lda $0d1f			lda 	VarType 					; get variable type, put LSB into C
.3645	4a		lsr a				lsr 	a
.3646	90 03		bcc $364b			bcc 	_AVNotArray 				; if carry set,it is an array variable.
.3648	20 90 36	jsr $3690			jsr 	AccessArray 				; array lookup. if LSB was set.
.364b					_AVNotArray:
.364b	8a		txa				txa 								; return stack in A and return
.364c	60		rts				rts
.364d					_AVTypeTable:
>364d	80 80						.byte 	$80,$80						; integer
>364f	c0 c0						.byte 	$C0,$C0 					; string
>3651	81 81						.byte 	$81,$81 					; float
.3653					AccessSetup:
.3653	a9 00		lda #$00			lda 	#0 							; zero the hash byte.
.3655	8d 1e 0d	sta $0d1e			sta 	varHash
.3658	98		tya				tya
.3659	48		pha				pha
.365a	b1 28		lda ($28),y	_ASLoop:lda 	(codePtr),y					; get next identifier character
.365c	c9 3a		cmp #$3a			cmp 	#$3A 						; is it 3A-3F which end all identifiers ?
.365e	b0 0b		bcs $366b			bcs 	_ASComplete
.3660	18		clc				clc 								; add to the hash. Might improve this.
.3661	6d 1e 0d	adc $0d1e			adc 	varHash
.3664	8d 1e 0d	sta $0d1e			sta 	varHash
.3667	c8		iny				iny 								; next character
.3668	4c 5a 36	jmp $365a			jmp 	_ASLoop
.366b					_ASComplete:
.366b	8d 1f 0d	sta $0d1f			sta 	varType 					; save variable type byte
.366e	c8		iny				iny
.366f	8c 20 0d	sty $0d20			sty 	varEnd 						; save the ending position.
.3672	38		sec				sec 								; convert type byte from $3A-$3F to 0..5
.3673	e9 3a		sbc #$3a			sbc 	#$3A
.3675	0a		asl a				asl 	a 							; multiply by hashTableSize (8 in this case)
.3676	0a		asl a				asl 	a
.3677	0a		asl a				asl 	a
.3678	0a		asl a				asl 	a 							; 2 bytes/word
.3679	85 2a		sta $2a				sta 	temp0 						; this is the offset to the start of the table.
.367b	ad 1e 0d	lda $0d1e			lda 	varHash 					; get hash
.367e	29 07		and #$07			and 	#(hashTableSize-1)			; force into range (for 8,0..7)
.3680	0a		asl a				asl  	a 							; x 2 (for word) and clear carry
.3681	65 2a		adc $2a				adc 	temp0 						; now offset from the start of the hash table.
.3683	69 68		adc #$68			adc 	#hashTables & $FF 			; add to hash table base address
.3685	85 7c		sta $7c				sta 	hashList 					; making hashLists point to the head of the link list.
.3687	a9 0a		lda #$0a			lda 	#hashTables >> 8
.3689	69 00		adc #$00			adc 	#0
.368b	85 7d		sta $7d				sta 	hashList+1
.368d	68		pla				pla
.368e	a8		tay				tay
.368f	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/accessarray.asm

.3690					AccessArray:
.3690	e8		inx				inx
.3691	8a		txa				txa
.3692	a2 06		ldx #$06		ldx	#6
.3694	20 64 2c	jsr $2c64		jsr	mainHandler
.3697	48		pha				pha
.3698	a2 00		ldx #$00		ldx	#0
.369a	20 64 2c	jsr $2c64		jsr	mainHandler
.369d	68		pla				pla
.369e	aa		tax				tax
.369f	ca		dex				dex
.36a0	b5 61		lda $61,x			lda 	esInt3+1,x 					; check index value at least < 64k
.36a2	15 59		ora $59,x			ora 	esInt2+1,x
.36a4	d0 33		bne $36d9			bne 	_AABadIndex
.36a6	98		tya				tya
.36a7	48		pha				pha
.36a8	b5 48		lda $48,x			lda 	esInt0,x 					; put array info ptr in temp0 - this points to the
.36aa	85 2a		sta $2a				sta 	temp0 						; address (+0) max (+2) and size (+4)
.36ac	b5 50		lda $50,x			lda 	esInt1,x
.36ae	85 2b		sta $2b				sta 	temp0+1
.36b0	a0 02		ldy #$02			ldy 	#2 							; check out of range, compare against max index.
.36b2	b5 49		lda $49,x			lda 	esInt0+1,x
.36b4	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.36b6	c8		iny				iny
.36b7	b5 51		lda $51,x			lda 	esInt1+1,x
.36b9	f1 2a		sbc ($2a),y			sbc 	(temp0),y
.36bb	b0 1c		bcs $36d9			bcs 	_AABadIndex 				; if >= then fail.
.36bd	e8		inx				inx 								; point to index
.36be	a0 04		ldy #$04			ldy 	#4 							; get the size byte.
.36c0	b1 2a		lda ($2a),y			lda 	(temp0),y
.36c2	20 de 36	jsr $36de			jsr 	MultiplyTOSByA 				; specialist multiplier.
.36c5	ca		dex				dex
.36c6	a0 00		ldy #$00			ldy 	#0 							; add this to the array base as the new address
.36c8	18		clc				clc
.36c9	b5 49		lda $49,x			lda 	esInt0+1,x
.36cb	71 2a		adc ($2a),y			adc 	(temp0),y
.36cd	95 48		sta $48,x			sta 	esInt0,x
.36cf	b5 51		lda $51,x			lda 	esInt1+1,x
.36d1	c8		iny				iny
.36d2	71 2a		adc ($2a),y			adc 	(temp0),y
.36d4	95 50		sta $50,x			sta 	esInt1,x
.36d6	68		pla				pla
.36d7	a8		tay				tay
.36d8	60		rts				rts
.36d9					_AABadIndex:
.36d9	a2 1b		ldx #$1b			ldx 	#ErrorID_ArrayIndex
.36db	20 83 11	jsr $1183		jsr	errorHandler
.36de					MultiplyTOSByA:
.36de	48		pha				pha
.36df	b5 48		lda $48,x			lda 	esInt0,x 					; copy index to temp1
.36e1	85 2c		sta $2c				sta 	temp1
.36e3	b5 50		lda $50,x			lda 	esInt1,x
.36e5	85 2d		sta $2d				sta 	temp1+1
.36e7	68		pla				pla
.36e8	16 48		asl $48,x			asl 	esInt0,x 					; double it.
.36ea	36 50		rol $50,x			rol 	esInt1,x
.36ec	c9 02		cmp #$02			cmp 	#2 							; if x 2 then exit.
.36ee	f0 17		beq $3707			beq 	_MTBAExit
.36f0	c9 06		cmp #$06			cmp 	#6 							; if x 6 then add temp1 to index
.36f2	d0 0f		bne $3703			bne 	_MTBANotFloat
.36f4	48		pha				pha
.36f5	18		clc				clc 								; so this will make it x 3
.36f6	b5 48		lda $48,x			lda 	esInt0,x
.36f8	65 2c		adc $2c				adc 	temp1
.36fa	95 48		sta $48,x			sta 	esInt0,x
.36fc	b5 50		lda $50,x			lda 	esInt1,x
.36fe	65 2d		adc $2d				adc 	temp1+1
.3700	95 50		sta $50,x			sta 	esInt1,x
.3702	68		pla				pla
.3703					_MTBANotFloat:
.3703	16 48		asl $48,x			asl 	esInt0,x					; now it is x 4 or x 6
.3705	36 50		rol $50,x			rol 	esInt1,x
.3707					_MTBAExit:
.3707	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/create.asm

.3708					CreateVariable:
.3708	98		tya				tya 								; push Y on the stack twice.
.3709	48		pha				pha									; position in code of the new variable.
.370a	48		pha				pha
.370b	ae 1f 0d	ldx $0d1f			ldx 	varType 					; get var type 0-5 from the var type
.370e	bd 27 37	lda $3727,x			lda		_CVSize-$3A,x 				; the bytes required for this new variable.
.3711	48		pha				pha 								; save length
.3712	a5 35		lda $35				lda 	lowMemory 					; set low Memory ptr to temp0
.3714	85 2a		sta $2a				sta 	temp0 						; (address of the new variable)
.3716	a5 36		lda $36				lda 	lowMemory+1
.3718	85 2b		sta $2b				sta 	temp0+1
.371a	68		pla				pla 								; get length
.371b	18		clc				clc 								; add to low memory.
.371c	65 35		adc $35				adc 	lowMemory
.371e	85 35		sta $35				sta 	lowMemory
.3720	90 02		bcc $3724			bcc 	_CVNoCarry
.3722	e6 36		inc $36				inc 	lowMemory+1
.3724					_CVNoCarry:
.3724	ad 1e 0d	lda $0d1e			lda 	varHash 					; store hash at offset 4.
.3727	a0 04		ldy #$04			ldy 	#4
.3729	91 2a		sta ($2a),y			sta 	(temp0),y
.372b	68		pla				pla 								; offset, work out where the variable name is.
.372c	18		clc				clc
.372d	65 28		adc $28				adc 	codePtr
.372f	a0 02		ldy #$02			ldy 	#2 							; copy that into slots 2 + 3.
.3731	91 2a		sta ($2a),y			sta 	(temp0),y
.3733	a5 29		lda $29				lda 	codePtr+1
.3735	69 00		adc #$00			adc 	#0
.3737	c8		iny				iny
.3738	91 2a		sta ($2a),y			sta 	(temp0),y
.373a	cd c9 0a	cmp $0ac9			cmp 	basePage+1 					; compare against the program base.
.373d	b0 03		bcs $3742			bcs 	_CVNotImmediate
.373f	20 9f 37	jsr $379f			jsr 	CloneVariableName 			; we need to clone the variable name (immediate mode)
.3742					_CVNotImmediate:
.3742	a0 00		ldy #$00			ldy 	#0 							; copy current hash pointer in link
.3744	b1 7c		lda ($7c),y			lda 	(hashList),y 				; so we're inserting it in the front of a linked list
.3746	91 2a		sta ($2a),y			sta 	(temp0),y
.3748	c8		iny				iny
.3749	b1 7c		lda ($7c),y			lda 	(hashList),y
.374b	91 2a		sta ($2a),y			sta 	(temp0),y
.374d	a5 2b		lda $2b				lda 	temp0+1 					; set new link
.374f	91 7c		sta ($7c),y			sta 	(hashList),y
.3751	88		dey				dey
.3752	a5 2a		lda $2a				lda 	temp0
.3754	91 7c		sta ($7c),y			sta 	(hashList),y
.3756	ad 1f 0d	lda $0d1f			lda 	varType 					; type in A
.3759	a0 05		ldy #$05			ldy 	#5 							; offset in Y
.375b	20 67 37	jsr $3767			jsr 	ZeroTemp0Y 					; zero (temp0),y with whatever type.
.375e	68		pla				pla
.375f	a8		tay				tay
.3760	60		rts				rts
>3761	09 0a				_CVSize:.byte 	VarHSize+VarISize,VarHSize+VarASize 					; <storage for integer>
>3763	07 0a						.byte 	VarHSize+VarSSize,VarHSize+VarASize 					; <storage for string>
>3765	0b 0a						.byte 	VarHSize+VarFSize,VarHSize+VarASize 					; <storage for float>
.3767					ZeroTemp0Y:
.3767	4a		lsr a				lsr 	a 							; bit 0 in carry
.3768	0a		asl a				asl 	a
.3769	b0 19		bcs $3784			bcs 	_ZTExit 					; we don't initialise arrays.
.376b	c9 3c		cmp #$3c			cmp 	#$3C 						; check string
.376d	f0 16		beq $3785			beq 	_ZTWriteNullString 			; write "" string
.376f	c9 3e		cmp #$3e			cmp 	#$3E 						; check float
.3771	f0 22		beq $3795			beq 	_ZTWriteFloat
.3773	98		tya				tya
.3774	48		pha				pha
.3775	a9 00		lda #$00			lda 	#0
.3777	91 2a		sta ($2a),y			sta 	(temp0),y
.3779	c8		iny				iny
.377a	91 2a		sta ($2a),y			sta 	(temp0),y
.377c	c8		iny				iny
.377d	91 2a		sta ($2a),y			sta 	(temp0),y
.377f	c8		iny				iny
.3780	91 2a		sta ($2a),y			sta 	(temp0),y
.3782	68		pla				pla
.3783	a8		tay				tay
.3784					_ZTExit:
.3784	60		rts				rts
.3785					_ZTWriteNullString:
.3785	a9 00		lda #$00			lda 	#0 							; put a reference to null string as the default value.
.3787	8d ce 0a	sta $0ace			sta 	NullString
.378a	a9 ce		lda #$ce			lda 	#NullString & $FF
.378c	91 2a		sta ($2a),y			sta 	(temp0),y
.378e	a9 0a		lda #$0a			lda 	#NullString >> 8
.3790	c8		iny				iny
.3791	91 2a		sta ($2a),y			sta 	(temp0),y
.3793	88		dey				dey
.3794	60		rts				rts
.3795					_ZTWriteFloat:
.3795	8a		txa				txa
.3796	48		pha				pha
.3797	a2 1e		ldx #$1e		ldx	#30
.3799	20 bb 14	jsr $14bb		jsr	floatingpointHandler
.379c	68		pla				pla
.379d	aa		tax				tax
.379e	60		rts				rts
.379f					CloneVariableName:
.379f	a0 02		ldy #$02			ldy 	#2 							; copy vname address to temp2
.37a1	b1 2a		lda ($2a),y			lda 	(temp0),y
.37a3	85 2e		sta $2e				sta 	temp2
.37a5	c8		iny				iny
.37a6	b1 2a		lda ($2a),y			lda 	(temp0),y
.37a8	85 2f		sta $2f				sta 	temp2+1
.37aa	a5 36		lda $36				lda 	lowMemory+1 				; copy lowMemory address to (temp0),2/3
.37ac	91 2a		sta ($2a),y			sta 	(temp0),y
.37ae	88		dey				dey
.37af	a5 35		lda $35				lda 	lowMemory
.37b1	91 2a		sta ($2a),y			sta 	(temp0),y
.37b3	a0 00		ldy #$00			ldy 	#0 							; copy data from (temp2) to (lowMemory)
.37b5					_CVNCopy:
.37b5	b1 2e		lda ($2e),y			lda		(temp2),y
.37b7	91 35		sta ($35),y			sta 	(lowMemory),y
.37b9	c8		iny				iny
.37ba	c9 3a		cmp #$3a			cmp 	#$3A 						; until the whole name has been copied.
.37bc	90 f7		bcc $37b5			bcc 	_CVNCopy
.37be	98		tya				tya 								; add Y to low memory
.37bf	18		clc				clc
.37c0	65 35		adc $35				adc 	lowMemory
.37c2	85 35		sta $35				sta 	lowMemory
.37c4	90 02		bcc $37c8			bcc 	_CVNNoCarry
.37c6	e6 36		inc $36				inc 	lowMemory+1
.37c8					_CVNNoCarry:
.37c8	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/createarray.asm

.37c9					CreateArray:
.37c9	20 53 36	jsr $3653			jsr 	AccessSetup 				; set up the basic stuff.
.37cc	ad 1f 0d	lda $0d1f			lda 	varType 					; is the variable type an array
.37cf	4a		lsr a				lsr 	a
.37d0	90 3f		bcc $3811			bcc 	_CANotArray 				; no, cause an error.
.37d2	20 81 38	jsr $3881			jsr 	FindVariable 				; does the variable exist already
.37d5	b0 35		bcs $380c			bcs 	_CAFound 					; cannot redefine it.
.37d7	20 08 37	jsr $3708			jsr 	CreateVariable 				; create the variable entry.
.37da	ac 20 0d	ldy $0d20			ldy 	varEnd 						; point Y to the end of the variable entry.
.37dd	a5 2a		lda $2a				lda 	temp0 						; push address of new variable entry on the stack
.37df	48		pha				pha
.37e0	a5 2b		lda $2b				lda 	temp0+1
.37e2	48		pha				pha
.37e3	ad 1f 0d	lda $0d1f			lda 	varType 					; push variable type on the stack.
.37e6	48		pha				pha
.37e7	a9 00		lda #$00			lda 	#0 							; work out the array dimension on TOS.
.37e9	a2 06		ldx #$06		ldx	#6
.37eb	20 64 2c	jsr $2c64		jsr	mainHandler
.37ee	a2 00		ldx #$00		ldx	#0
.37f0	20 64 2c	jsr $2c64		jsr	mainHandler
.37f3	68		pla				pla 		 						; restore type and position.
.37f4	8d 1f 0d	sta $0d1f			sta 	varType
.37f7	68		pla				pla
.37f8	85 2b		sta $2b				sta 	temp0+1
.37fa	68		pla				pla
.37fb	85 2a		sta $2a				sta 	temp0
.37fd	a5 50		lda $50				lda 	esInt1 						; limit array max to 4096.
.37ff	29 e0		and #$e0			and 	#$E0
.3801	05 58		ora $58				ora 	esInt2
.3803	05 60		ora $60				ora 	esInt3
.3805	f0 0f		beq $3816			beq 	_CASizeOk
.3807					_CASize:
.3807	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.3809	20 83 11	jsr $1183		jsr	errorHandler
.380c					_CAFound:
.380c	a2 19		ldx #$19			ldx 	#ErrorID_DupArray
.380e	20 83 11	jsr $1183		jsr	errorHandler
.3811					_CANotArray:
.3811	a2 1a		ldx #$1a			ldx 	#ErrorID_NotArray
.3813	20 83 11	jsr $1183		jsr	errorHandler
.3816					_CASizeOk:
.3816	e6 48		inc $48				inc 	esInt0 						; bump it by one, as we index from 0
.3818	d0 02		bne $381c			bne 	_CANoCarry 					; e.g. DIM A(10) ... A(0) - A(10)
.381a	e6 49		inc $49				inc 	esInt0+1
.381c					_CANoCarry:
.381c	98		tya				tya
.381d	48		pha				pha
.381e	a0 05		ldy #$05			ldy 	#5
.3820	a5 35		lda $35				lda 	lowMemory 					; copy low memory address in +5,+6
.3822	91 2a		sta ($2a),y			sta 	(temp0),y 					; this is where it will come from
.3824	c8		iny				iny
.3825	a5 36		lda $36				lda 	lowMemory+1
.3827	91 2a		sta ($2a),y			sta 	(temp0),y
.3829	c8		iny				iny
.382a	a5 48		lda $48				lda 	esInt0 						; copy maximum index value to +7,+8
.382c	91 2a		sta ($2a),y			sta 	(temp0),y
.382e	c8		iny				iny
.382f	a5 50		lda $50				lda 	esInt1
.3831	91 2a		sta ($2a),y			sta 	(temp0),y
.3833	c8		iny				iny
.3834	ae 1f 0d	ldx $0d1f			ldx 	varType 					; get the length per element
.3837	bd 3f 38	lda $383f,x			lda 	_CAActualSize-$3A-1,x
.383a	91 2a		sta ($2a),y			sta 	(temp0),y
.383c	aa		tax				tax 								; save size in X
.383d	a5 35		lda $35				lda 	lowMemory 					; set temp0 to low memory.
.383f	85 2a		sta $2a				sta 	temp0
.3841	a5 36		lda $36				lda 	lowMemory+1
.3843	85 2b		sta $2b				sta 	temp0+1
.3845	a9 00		lda #$00			lda 	#0 							; temp1 is the counter.
.3847	85 2c		sta $2c				sta 	temp1
.3849	85 2d		sta $2d				sta 	temp1+1
.384b					_CAInitialiseArray:
.384b	a0 00		ldy #$00			ldy 	#0 							; write a null record at temp0
.384d	ad 1f 0d	lda $0d1f			lda 	varType 					; base type of array in A.
.3850	29 fe		and #$fe			and 	#$FE
.3852	20 67 37	jsr $3767			jsr 	ZeroTemp0Y
.3855	8a		txa				txa 								; add X to temp0, also updating lowMemory
.3856	18		clc				clc
.3857	65 2a		adc $2a				adc 	temp0
.3859	85 2a		sta $2a				sta 	temp0
.385b	85 35		sta $35				sta 	lowMemory
.385d	a5 2b		lda $2b				lda 	temp0+1
.385f	69 00		adc #$00			adc 	#0
.3861	85 2b		sta $2b				sta 	temp0+1
.3863	85 36		sta $36				sta 	lowMemory+1
.3865	e6 2c		inc $2c				inc 	temp1 						; bump the counter.
.3867	d0 02		bne $386b			bne 	_CAIANoCarry
.3869	e6 2d		inc $2d				inc 	temp1+1
.386b					_CAIANoCarry:
.386b	a5 48		lda $48				lda 	esInt0 						; counter reached max index
.386d	c5 2c		cmp $2c				cmp 	temp1
.386f	d0 da		bne $384b			bne 	_CAInitialiseArray
.3871	a5 50		lda $50				lda 	esInt1
.3873	c5 2d		cmp $2d				cmp 	temp1+1
.3875	d0 d4		bne $384b			bne 	_CAInitialiseArray
.3877	68		pla				pla
.3878	a8		tay				tay
.3879	60		rts				rts
.387a					_CAActualSize:
>387a	04 00						.byte 	VarISize,0
>387c	02 00						.byte 	VarSSize,0
>387e	06 00						.byte 	VarFSize,0
>3880	db						.byte 	$DB

;******  Return to file: variable/variable.asm


;******  Processing file: variable/find.asm

.3881					FindVariable:
.3881	98		tya				tya
.3882	48		pha				pha
.3883	98		tya				tya 								; point temp2 to the actual name
.3884	18		clc				clc 								; in memory of the variable being created
.3885	65 28		adc $28				adc 	codePtr
.3887	85 2e		sta $2e				sta 	temp2
.3889	a5 29		lda $29				lda 	codePtr+1
.388b	69 00		adc #$00			adc 	#0
.388d	85 2f		sta $2f				sta 	temp2+1
.388f	a0 00		ldy #$00			ldy 	#0
.3891	a5 7c		lda $7c				lda 	hashList 					; copy hashlist to temp0
.3893	85 2a		sta $2a				sta 	temp0
.3895	a5 7d		lda $7d				lda 	hashList+1
.3897	85 2b		sta $2b				sta 	temp0+1
.3899	a0 01		ldy #$01	_FVNext:ldy 	#1 							; get MSB
.389b	b1 2a		lda ($2a),y			lda 	(temp0),y
.389d	f0 2c		beq $38cb			beq 	_FVFail
.389f	aa		tax				tax
.38a0	88		dey				dey		 							; get LSB
.38a1	b1 2a		lda ($2a),y			lda 	(temp0),y
.38a3	85 2a		sta $2a				sta 	temp0 						; update pointer.
.38a5	86 2b		stx $2b				stx 	temp0+1
.38a7	a0 04		ldy #$04			ldy 	#4 							; check hashes match
.38a9	b1 2a		lda ($2a),y			lda 	(temp0),y
.38ab	cd 1e 0d	cmp $0d1e			cmp 	varHash
.38ae	d0 e9		bne $3899			bne 	_FVNext 					; if not, no point in checking the name.
.38b0	88		dey				dey 								; copy name pointer (+2,+3) to temp1.
.38b1	b1 2a		lda ($2a),y			lda 	(temp0),y
.38b3	85 2d		sta $2d				sta 	temp1+1
.38b5	88		dey				dey
.38b6	b1 2a		lda ($2a),y			lda 	(temp0),y
.38b8	85 2c		sta $2c				sta 	temp1
.38ba	a0 00		ldy #$00			ldy 	#0
.38bc					_FVCheck:
.38bc	b1 2c		lda ($2c),y			lda 	(temp1),y 					; compare names
.38be	d1 2e		cmp ($2e),y			cmp 	(temp2),y
.38c0	d0 d7		bne $3899			bne 	_FVNext		 				; fail if different.
.38c2	c8		iny				iny
.38c3	c9 3a		cmp #$3a			cmp 	#$3A 						; until reached the end marker.
.38c5	90 f5		bcc $38bc			bcc 	_FVCheck
.38c7	68		pla				pla
.38c8	a8		tay				tay
.38c9	38		sec				sec
.38ca	60		rts				rts
.38cb					_FVFail:
.38cb	68		pla				pla
.38cc	a8		tay				tay
.38cd	18		clc				clc
.38ce	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/reset.asm

.38cf					HashTableReset:
.38cf	a2 60		ldx #$60			ldx 	#6*2*hashTableSize			; 6 types, 2 bytes per table entry.
.38d1	a9 00		lda #$00			lda 	#0
.38d3					_HTRClear:
.38d3	9d 67 0a	sta $0a67,x			sta 	hashTables-1,x
.38d6	ca		dex				dex
.38d7	d0 fa		bne $38d3			bne 	_HTRClear
.38d9	60		rts				rts

;******  Return to file: variable/variable.asm

.38da					variableHandler:
.38da	7c dd 38	jmp ($38dd,x)			jmp 	(variableVectors,x)
.38dd					variableVectors:
>38dd	ec 35					.word AccessVariable       ; index 0
>38df	c9 37					.word CreateArray          ; index 2
>38e1	cf 38					.word HashTableReset       ; index 4

;******  Return to file: basic.asm

.38e3					section_end_variable:
.38e3					section_start_footer:

;******  Processing file: footer/footer.asm


;******  Processing file: footer/99end.asm

>38e3							.align 	256
.3900					programMemory:
>38ff	ff						.byte 	$FF

;******  Return to file: footer/footer.asm


;******  Return to file: basic.asm

.3900					section_end_footer:

;******  End of listing
