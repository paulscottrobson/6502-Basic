
; 64tass Turbo Assembler Macro V1.55.2200 listing file
; 64tass -D autorun=1 -D coldstartnew=0 -Walias -Wmacro-prefix -Wall -q -c -L ../source/bin/basic.lst -l ../source/bin/basic.lbl -Wall -o ../source/bin/stub.prg basic.asm
; Fri Mar 26 16:48:33 2021

;Offset	;Hex		;Monitor	;Source

;******  Command line definitions

=1					autorun=1
=0					coldstartnew=0

;******  Processing input file: basic.asm


;******  Processing file: header/01common.inc


;******  Processing file: header/../generated/installed.inc

=1					installed_header = 1
=1					installed_main = 1
=1					installed_variable = 1
=1					installed_assembler = 1
=1					installed_error = 1
=1					installed_extension = 1
=1					installed_string = 1
=1					installed_device = 1
=0					installed_floatingpoint = 0
=1					installed_interaction = 1
=1					installed_tokeniser = 1
=1					installed_footer = 1

;******  Return to file: header/01common.inc

=$1000					CodeStart = $1000
=$800					MemoryStorage = $800
=$9f00					EndOfMemory = $9F00
=$28					ZeroPageStorage = $28
=$48					StackAddress = $48
=8					StackSize = 8
=2					retStackSizePages = 2
=8					hashTableSize = 8			; if this changes, the calculation is AccessSetup has to match it.
="G"					markerGOSUB = 'G'
="R"					markerREPEAT = 'R'
="F"					markerFOR = 'F'
="W"					markerWHILE = 'W'
="P"					markerPROC = 'P'
="$"					markerSTRING = '$'
="#"					markerFLOAT = '#'
="%"					markerINT = '%'
=5					VarHSize = 5 								; header (2 link, 2 name, 1 hash)
=2					VarASize = 2 								; array [address of first level]
=4					VarISize = 4 								; integer (32 bit)
=6					VarFSize = 6 								; float (4 mantissa, 1 exponent 1 sign/zero)
=2					VarSSize = 2 								; address (2 bytes)

;******  Return to file: basic.asm


;******  Processing file: header/02macros.inc


;******  Return to file: basic.asm


;******  Processing file: header/03data.inc

>0028					codePtr:.fill 	2							; (codePtr),y points to code.
>002a					temp0: 	.fill 	2							; working variables.
>002c					temp1: 	.fill 	2
>002e					temp2: 	.fill 	2
>0030					temp3: 	.fill 	2
.0032					tempshort:
>0032							.fill 	1
.0033					highMemory:
>0033							.fill 	2
.0035					lowMemory:
>0035							.fill 	2
>0800							.align	256
.0800					returnStack:
>0800							.fill 	retStackSizePages * 256
=512					retStackSize = retStackSizePages * 256
.0a00					SingleLetterVar:
>0a00					 		.fill 	26*4
.0a68					currentStorage:
>0048					esType:	.fill 	StackSize  					; type byte (see above)
>0050					esInt0:	.fill 	StackSize 					; integer or mantissa
>0058					esInt1:	.fill 	StackSize
>0060					esInt2:	.fill 	StackSize
>0068					esInt3:	.fill 	StackSize
>0070					esExp:	.fill 	StackSize 					; exponent ($80 = 0)
>0078					esZSign:.fill 	StackSize 					; for floating point - sign (bit 7) isZero (bit 6)
.0080					endOfStack:
=$50					esMant0 = esInt0 							; synonyms.
=$58					esMant1 = esInt1
=$60					esMant2 = esInt2
=$68					esMant3 = esInt3
.0a68					hashTables:
>0a68							.fill 	6*2*hashTableSize
.0ac8					basePage:
>0ac8							.fill 	2
.0aca					endProgram:
>0aca							.fill 	2
.0acc					endMemory:
>0acc							.fill 	2
.0ace					NullString:
>0ace							.fill 	1							; don't waste memory concreting null strings.
.0acf					convertBuffer:
>0acf							.fill 	35

;******  Processing file: header/../generated/tokenconst.inc

=$80					TOK_EOL=$80
=$81					TOK_SHIFT1=$81
=$82					TOK_SHIFT2=$82
=$83					TOK_SHIFT3=$83
=$84					TOK_FPC=$84
=$85					TOK_STR=$85
=$86					TOK_BINARYST=$86
=$99					TOK_STRUCTST=$99
=$a4					TOK_UNARYST=$a4
=$c9					TOK_TOKENS=$c9
=$86					TKW_AND                      = $86 ; and
=$87					TKW_OR                       = $87 ; or
=$88					TKW_XOR                      = $88 ; xor
=$89					TKW_GREATEREQUAL             = $89 ; >=
=$8a					TKW_LESSEQUAL                = $8a ; <=
=$8b					TKW_GREATER                  = $8b ; >
=$8c					TKW_LESS                     = $8c ; <
=$8d					TKW_EQUAL                    = $8d ; =
=$8e					TKW_LESSGREATER              = $8e ; <>
=$8f					TKW_PLUS                     = $8f ; +
=$90					TKW_MINUS                    = $90 ; -
=$91					TKW_GREATERGREATER           = $91 ; >>
=$92					TKW_LESSLESS                 = $92 ; <<
=$93					TKW_STAR                     = $93 ; *
=$94					TKW_SLASH                    = $94 ; /
=$95					TKW_MOD                      = $95 ; mod
=$96					TKW_HAT                      = $96 ; ^
=$97					TKW_PLING                    = $97 ; !
=$98					TKW_QMARK                    = $98 ; ?
=$99					TKW_REPEAT                   = $99 ; repeat
=$9a					TKW_WHILE                    = $9a ; while
=$9b					TKW_FOR                      = $9b ; for
=$9c					TKW_IF                       = $9c ; if
=$9d					TKW_DEFPROC                  = $9d ; defproc
=$9e					TKW_UNTIL                    = $9e ; until
=$9f					TKW_WEND                     = $9f ; wend
=$a0					TKW_NEXT                     = $a0 ; next
=$a1					TKW_THEN                     = $a1 ; then
=$a2					TKW_ENDIF                    = $a2 ; endif
=$a3					TKW_ENDPROC                  = $a3 ; endproc
=$a4					TKW_LPAREN                   = $a4 ; (
=$a5					TKW_LENLPAREN                = $a5 ; len(
=$a6					TKW_SGNLPAREN                = $a6 ; sgn(
=$a7					TKW_ABSLPAREN                = $a7 ; abs(
=$a8					TKW_RANDOMLPAREN             = $a8 ; random(
=$a9					TKW_PAGE                     = $a9 ; page
=$aa					TKW_TRUE                     = $aa ; true
=$ab					TKW_FALSE                    = $ab ; false
=$ac					TKW_MINLPAREN                = $ac ; min(
=$ad					TKW_MAXLPAREN                = $ad ; max(
=$ae					TKW_SYSLPAREN                = $ae ; sys(
=$af					TKW_TIMERLPAREN              = $af ; timer(
=$b0					TKW_EVENTLPAREN              = $b0 ; event(
=$b1					TKW_GETLPAREN                = $b1 ; get(
=$b2					TKW_INKEYLPAREN              = $b2 ; inkey(
=$b3					TKW_ALLOCLPAREN              = $b3 ; alloc(
=$b4					TKW_CHRDOLLARLPAREN          = $b4 ; chr$(
=$b5					TKW_LEFTDOLLARLPAREN         = $b5 ; left$(
=$b6					TKW_MIDDOLLARLPAREN          = $b6 ; mid$(
=$b7					TKW_RIGHTDOLLARLPAREN        = $b7 ; right$(
=$b8					TKW_STRDOLLARLPAREN          = $b8 ; str$(
=$b9					TKW_VALLPAREN                = $b9 ; val(
=$ba					TKW_PEEKLPAREN               = $ba ; peek(
=$bb					TKW_DEEKLPAREN               = $bb ; deek(
=$bc					TKW_LEEKLPAREN               = $bc ; leek(
=$bd					TKW_ASCLPAREN                = $bd ; asc(
=$be					TKW_INTLPAREN                = $be ; int(
=$bf					TKW_FLOATLPAREN              = $bf ; float(
=$c0					TKW_ISVALLPAREN              = $c0 ; isval(
=$c1					TKW_UPPERDOLLARLPAREN        = $c1 ; upper$(
=$c2					TKW_LOWERDOLLARLPAREN        = $c2 ; lower$(
=$c3					TKW_ATC                      = $c3 ; @
=$c4					TKW_WAVY                     = $c4 ; ~
=$c5					TKW_AMP                      = $c5 ; &
=$c6					TKW_GETDOLLARLPAREN          = $c6 ; get$(
=$c7					TKW_INKEYDOLLARLPAREN        = $c7 ; inkey$(
=$c8					TKW_MEM                      = $c8 ; mem
=$c9					TKW_RPAREN                   = $c9 ; )
=$ca					TKW_COLON                    = $ca ; :
=$cb					TKW_COMMA                    = $cb ; ,
=$cc					TKW_SEMICOLON                = $cc ; ;
=$cd					TKW_QUOTE                    = $cd ; '
=$ce					TKW_TO                       = $ce ; to
=$cf					TKW_STEP                     = $cf ; step
=$d0					TKW_PROC                     = $d0 ; proc
=$d1					TKW_LOCAL                    = $d1 ; local
=$d2					TKW_DIM                      = $d2 ; dim
=$d3					TKW_REM                      = $d3 ; rem
=$d4					TKW_LET                      = $d4 ; let
=$d5					TKW_INPUT                    = $d5 ; input
=$d6					TKW_ELSE                     = $d6 ; else
=$d7					TKW_VDU                      = $d7 ; vdu
=$d8					TKW_PRINT                    = $d8 ; print
=$d9					TKW_DATA                     = $d9 ; data
=$da					TKW_IMAGE                    = $da ; image
=$db					TKW_AT                       = $db ; at
=$dc					TKW_FLIP                     = $dc ; flip
=$dd					TKW_ASSERT                   = $dd ; assert
=$de					TKW_POKE                     = $de ; poke
=$df					TKW_DOKE                     = $df ; doke
=$e0					TKW_LOKE                     = $e0 ; loke
=$e1					TKW_INK                      = $e1 ; ink
=$e2					TKW_PAPER                    = $e2 ; paper
=$e3					TKW_CLS                      = $e3 ; cls
=$e4					TKW_LOCATE                   = $e4 ; locate
=$e5					TKW_PERIOD                   = $e5 ; .
=$e6					TKW_HASH                     = $e6 ; #
=$e7					TKW_CLEAR                    = $e7 ; clear
=$86					TKW_LOAD                     = $86 ; load
=$87					TKW_SAVE                     = $87 ; save
=$88					TKW_LIST                     = $88 ; list
=$89					TKW_NEW                      = $89 ; new
=$8a					TKW_BREAK                    = $8a ; break
=$8b					TKW_RUN                      = $8b ; run
=$8c					TKW_READ                     = $8c ; read
=$8d					TKW_RESTORE                  = $8d ; restore
=$8e					TKW_END                      = $8e ; end
=$8f					TKW_STOP                     = $8f ; stop
=$90					TKW_XEMU                     = $90 ; xemu
=$91					TKW_GOTO                     = $91 ; goto
=$92					TKW_GOSUB                    = $92 ; gosub
=$93					TKW_RETURN                   = $93 ; return
=$94					TKW_ORA                      = $94 ; ora
=$95					TKW_LPARENANDRPAREN          = $95 ; (and)
=$96					TKW_EOR                      = $96 ; eor
=$97					TKW_ADC                      = $97 ; adc
=$98					TKW_STA                      = $98 ; sta
=$99					TKW_LDA                      = $99 ; lda
=$9a					TKW_CMP                      = $9a ; cmp
=$9b					TKW_SBC                      = $9b ; sbc
=$9c					TKW_ASL                      = $9c ; asl
=$9d					TKW_ROL                      = $9d ; rol
=$9e					TKW_LSR                      = $9e ; lsr
=$9f					TKW_ROR                      = $9f ; ror
=$a0					TKW_STX                      = $a0 ; stx
=$a1					TKW_LDX                      = $a1 ; ldx
=$a2					TKW_DEC                      = $a2 ; dec
=$a3					TKW_INC                      = $a3 ; inc
=$a4					TKW_STZ                      = $a4 ; stz
=$a5					TKW_BIT                      = $a5 ; bit
=$a6					TKW_STY                      = $a6 ; sty
=$a7					TKW_LDY                      = $a7 ; ldy
=$a8					TKW_CPY                      = $a8 ; cpy
=$a9					TKW_CPX                      = $a9 ; cpx
=$aa					TKW_TSB                      = $aa ; tsb
=$ab					TKW_TRB                      = $ab ; trb
=$ac					TKW_JSR                      = $ac ; jsr
=$ad					TKW_JMP                      = $ad ; jmp
=$ae					TKW_BPL                      = $ae ; bpl
=$af					TKW_BMI                      = $af ; bmi
=$b0					TKW_BVC                      = $b0 ; bvc
=$b1					TKW_BVS                      = $b1 ; bvs
=$b2					TKW_BCC                      = $b2 ; bcc
=$b3					TKW_BCS                      = $b3 ; bcs
=$b4					TKW_BNE                      = $b4 ; bne
=$b5					TKW_BEQ                      = $b5 ; beq
=$b6					TKW_BRA                      = $b6 ; bra
=$b7					TKW_BRK                      = $b7 ; brk
=$b8					TKW_PHP                      = $b8 ; php
=$b9					TKW_CLC                      = $b9 ; clc
=$ba					TKW_PLP                      = $ba ; plp
=$bb					TKW_SEC                      = $bb ; sec
=$bc					TKW_RTI                      = $bc ; rti
=$bd					TKW_PHA                      = $bd ; pha
=$be					TKW_CLI                      = $be ; cli
=$bf					TKW_PHY                      = $bf ; phy
=$c0					TKW_RTS                      = $c0 ; rts
=$c1					TKW_PLA                      = $c1 ; pla
=$c2					TKW_SEI                      = $c2 ; sei
=$c3					TKW_PLY                      = $c3 ; ply
=$c4					TKW_DEY                      = $c4 ; dey
=$c5					TKW_TXA                      = $c5 ; txa
=$c6					TKW_TYA                      = $c6 ; tya
=$c7					TKW_TXS                      = $c7 ; txs
=$c8					TKW_TAY                      = $c8 ; tay
=$c9					TKW_TAX                      = $c9 ; tax
=$ca					TKW_CLV                      = $ca ; clv
=$cb					TKW_TSX                      = $cb ; tsx
=$cc					TKW_INY                      = $cc ; iny
=$cd					TKW_DEX                      = $cd ; dex
=$ce					TKW_CLD                      = $ce ; cld
=$cf					TKW_PHX                      = $cf ; phx
=$d0					TKW_INX                      = $d0 ; inx
=$d1					TKW_NOP                      = $d1 ; nop
=$d2					TKW_SED                      = $d2 ; sed
=$d3					TKW_PLX                      = $d3 ; plx
=$86					TKW_VPOKE                    = $86 ; vpoke
=$87					TKW_VDOKE                    = $87 ; vdoke
=$88					TKW_VLOAD                    = $88 ; vload
=$89					TKW_MODE                     = $89 ; mode
=$8a					TKW_PALETTE                  = $8a ; palette
=$8b					TKW_SPRITE                   = $8b ; sprite
=$86					TKW_VPEEKLPAREN              = $86 ; vpeek(
=$87					TKW_VDEEKLPAREN              = $87 ; vdeek(

;******  Return to file: header/03data.inc

=$3a					TYPE_INT =		($3A) 						; type bytes that end identifier.
=$3b					TYPE_INTARRAY =	($3B)
=$3c					TYPE_STR =		($3C)
=$3d					TYPE_STRARRAY =	($3D)
=$3e					TYPE_FLOAT =	($3E)
=$3f					TYPE_FLOATARRAY=($3F)

;******  Processing file: header/../generated/asmconst.inc

=$94					TKA_GROUP1 = $94
=$9c					TKA_GROUP2 = $9c
=$ae					TKA_GROUP3 = $ae
=$b7					TKA_GROUP4 = $b7
=$d4					TKA_END4 = $d4

;******  Return to file: header/03data.inc


;******  Return to file: basic.asm


;******  Processing file: header/header.inc


;******  Return to file: basic.asm


;******  Processing file: assembler/asmconst.inc

=0					AMD_IMM		= 0					; Immediate mode.
=1					AMD_ZERO 	= 1					; Zero Page
=2					AMD_ACCIMP	= 2					; Accumulator/Implied
=3					AMD_ABS 	= 3					; Absolute
=4					AMD_ZEROINDY= 4					; Zero Indirect,Y
=5					AMD_ZEROX 	= 5					; Zero Page,X
=6					AMD_ABSY 	= 6					; Absolute,Y
=7					AMD_ABSX 	= 7					; Absolute,X
=8					AMD_ZEROIND = 8					; Zero Indirect
=9					AMD_ZEROY 	= 9					; Zero Page,Y
=10					AMD_ABSIND 	= 10				; Absolute Indirect
=11					AMD_ABSINDX	= 11				; Absolute Indirect Indexed
=12					AMD_REL		= 12				; Relative
=13					AMD_ZEROINDX= 13 				; Zero Indirect,X

;******  Return to file: basic.asm


;******  Processing file: assembler/assembler.inc


;******  Return to file: basic.asm


;******  Processing file: device/device.inc


;******  Return to file: basic.asm


;******  Processing file: error/error.inc


;******  Return to file: basic.asm


;******  Processing file: error/errorhandler.inc


;******  Processing file: error/../generated/errorid.inc

=1					ErrorID_Missing = 1 ; Feature not Present
=2					ErrorID_Syntax = 2 ; Syntax Error
=3					ErrorID_NoModule = 3 ; Module disabled
=4					ErrorID_Assert = 4 ; Assertion failed
=5					ErrorID_DivZero = 5 ; Divide By Zero
=6					ErrorID_Stop = 6 ; Stop
=7					ErrorID_BadType = 7 ; Type Mismatch
=8					ErrorID_BadValue = 8 ; Illegal Value
=9					ErrorID_MissingRP = 9 ; Missing right bracket
=10					ErrorID_MissingComma = 10 ; Missing comma
=11					ErrorID_NoReference = 11 ; Missing reference
=12					ErrorID_LineNumber = 12 ; Line Number not found
=13					ErrorID_StrLen = 13 ; String too long
=14					ErrorID_ReturnErr = 14 ; RETURN without GOSUB
=15					ErrorID_UntilErr = 15 ; UNTIL without REPEAT
=16					ErrorID_NextErr = 16 ; NEXT without FOR
=17					ErrorID_WendErr = 17 ; WEND without WHILE
=18					ErrorID_endprocErr = 18 ; ENDPROC without PROC
=19					ErrorID_BadIndex = 19 ; Bad NEXT index
=20					ErrorID_Struct = 20 ; Structures nested wrong
=21					ErrorID_NoAuto = 21 ; Cannot create variable
=22					ErrorID_RetStack = 22 ; Return stack out of space
=23					ErrorID_NoProc = 23 ; Unknown Procedure
=24					ErrorID_Params = 24 ; Parameters do not match
=25					ErrorID_DupArray = 25 ; Array already defined
=26					ErrorID_NotArray = 26 ; DIM requires array
=27					ErrorID_ArrayIndex = 27 ; Bad array index
=28					ErrorID_ArrayDepth = 28 ; Wrong number of array indices
=29					ErrorID_DataError = 29 ; Out of data
=30					ErrorID_Tokenise = 30 ; Cannot tokenise line
=31					ErrorID_Save = 31 ; Save failed
=32					ErrorID_Load = 32 ; Load failed
=33					ErrorID_Break = 33 ; Break
=34					ErrorID_Memory = 34 ; Out of memory
=35					ErrorID_NumStack = 35 ; Expression too complex
=36					ErrorID_Assembler = 36 ; Bad Operand/Mode
=37					ErrorID_Branch = 37 ; Branch out of range
=38					ErrorID_Label = 38 ; Label changed value
=39					ErrorID_NoSprite = 39 ; No Sprite Selected

;******  Return to file: error/errorhandler.inc


;******  Return to file: basic.asm


;******  Processing file: extension/extension.inc


;******  Return to file: basic.asm


;******  Processing file: extension/option_x16/x16const.inc

=64					X16MaxImages = 64 							; max # of sprite images.

;******  Return to file: basic.asm


;******  Processing file: floatingpoint/float.inc

=5					FloatEmbeddedSize = 5

;******  Return to file: basic.asm


;******  Processing file: floatingpoint/floatingpoint.inc


;******  Return to file: basic.asm


;******  Processing file: interaction/interaction.inc


;******  Return to file: basic.asm


;******  Processing file: main/main.inc


;******  Return to file: basic.asm


;******  Processing file: string/functions/memory.inc

=252					MaxStringSize = 252

;******  Return to file: basic.asm


;******  Processing file: string/string.inc


;******  Return to file: basic.asm


;******  Processing file: tokeniser/detokenise/colouring.inc

=$84					LTYLineNumber = $84
=$82					LTYPunctuation = $82
=$87					LTYIdentifier = $87
=$86					LTYConstant = $86
=$83					LTYKeyword = $83
=$81					LTYString = $81

;******  Return to file: basic.asm


;******  Processing file: tokeniser/tokeniser.inc


;******  Return to file: basic.asm


;******  Processing file: variable/variable.inc


;******  Return to file: basic.asm


;******  Processing file: footer/footer.inc


;******  Return to file: basic.asm

.1000					section_start_header:

;******  Processing file: header/header.asm


;******  Processing file: header/00start.asm

.1000					Start:
.1000	4c 0a 10	jmp $100a			jmp 	GoColdStart 				; +0 	boot BASIC
.1003	4c 58 10	jmp $1058			jmp 	GoTokTest					; +3 	run tokeniser test code.
>1006	8e 3c						.word 	TokenTableAddress
.1008							else
>1008	00 00						.word 	0
.100a					GoColdStart:
.100a	a9 00		lda #$00			lda 	#(programMemory) & $FF
.100c	8d c8 0a	sta $0ac8			sta 	basePage
.100f	a9 44		lda #$44			lda 	#(programMemory) >> 8
.1011	8d c9 0a	sta $0ac9			sta 	1+(basePage)
.1014	a9 00		lda #$00			lda 	#(endOfMemory) & $FF
.1016	8d cc 0a	sta $0acc			sta 	endMemory
.1019	a9 9f		lda #$9f			lda 	#(endOfMemory) >> 8
.101b	8d cd 0a	sta $0acd			sta 	1+(endMemory)
.101e	20 26 10	jsr $1026			jsr 	InitialiseAll 				; initialise everything.
.1021	a2 02		ldx #$02		ldx	#2
.1023	20 65 1e	jsr $1e65		jsr	interactionHandler

;******  Processing file: header/../generated/initialiseall.asm

.1026					InitialiseAll:
.1026	a9 00		lda #$00		lda #0
.1028	a2 00		ldx #$00		ldx	#0
.102a	20 b4 13	jsr $13b4		jsr	assemblerHandler
.102d	a9 00		lda #$00		lda #0
.102f	a2 00		ldx #$00		ldx	#0
.1031	20 f6 14	jsr $14f6		jsr	deviceHandler
.1034	a9 00		lda #$00		lda #0
.1036	a2 00		ldx #$00		ldx	#0
.1038	20 65 1e	jsr $1e65		jsr	interactionHandler
.103b	a9 00		lda #$00		lda #0
.103d	a2 00		ldx #$00		ldx	#0
.103f	20 ff 34	jsr $34ff		jsr	mainHandler
.1042	a9 00		lda #$00		lda #0
.1044	a2 00		ldx #$00		ldx	#0
.1046	20 bc 37	jsr $37bc		jsr	stringHandler
.1049	a9 00		lda #$00		lda #0
.104b	a2 00		ldx #$00		ldx	#0
.104d	20 e2 3f	jsr $3fe2		jsr	tokeniserHandler
.1050	a9 00		lda #$00		lda #0
.1052	a2 00		ldx #$00		ldx	#0
.1054	20 b3 43	jsr $43b3		jsr	variableHandler
.1057	60		rts			rts

;******  Return to file: header/00start.asm

.1058					GoTokTest:
.1058	a2 06		ldx #$06		ldx	#6
.105a	20 e2 3f	jsr $3fe2		jsr	tokeniserHandler

;******  Return to file: header/header.asm


;******  Return to file: basic.asm

.105d					section_end_header:
.105d					section_start_assembler:

;******  Processing file: assembler/assembler.asm


;******  Processing file: assembler/asmoperand.asm

.105d					AsmGetOperand:
.105d	a2 00		ldx #$00			ldx 	#0 							; clear the operand.
.105f	8a		txa				txa
.1060	95 50		sta $50,x			sta 	esInt0,x
.1062	95 58		sta $58,x			sta 	esInt1,x
.1064	95 60		sta $60,x			sta 	esInt2,x
.1066	95 68		sta $68,x			sta 	esInt3,x
.1068	b1 28		lda ($28),y			lda 	(codePtr),y 				; first into X
.106a	aa		tax				tax
.106b	a9 02		lda #$02			lda 	#AMD_ACCIMP
.106d	e0 80		cpx #$80			cpx 	#TOK_EOL 					; if end of line or colon, return implied mode.
.106f	f0 41		beq $10b2			beq 	_AGOExit
.1071	e0 ca		cpx #$ca			cpx 	#TKW_COLON
.1073	f0 3d		beq $10b2			beq 	_AGOExit
.1075	c8		iny				iny 								; consume the token
.1076	a9 00		lda #$00			lda 	#AMD_IMM
.1078	e0 e6		cpx #$e6			cpx 	#TKW_HASH 					; if a hash present, then immediate mode.
.107a	f0 2d		beq $10a9			beq		_AGOEvalExit 				; with an operand.
.107c	e0 a4		cpx #$a4			cpx 	#TKW_LPAREN 				; left bracket ?
.107e	f0 40		beq $10c0			beq 	_AGOIndirect
.1080	e0 01		cpx #$01			cpx 	#$01 						; is it "A" e.g. the variable A.
.1082	d0 0b		bne $108f			bne 	_AGOZeroPage1 				; if not it is zero zero,x zero,y, unpick 1 iny
.1084	b1 28		lda ($28),y			lda 	(codePtr),y 				; get the second character & consume it
.1086	c8		iny				iny
.1087	aa		tax				tax
.1088	a9 02		lda #$02			lda 	#AMD_ACCIMP 				; and return Acc/Implied if it is just A
.108a	e0 3a		cpx #$3a			cpx 	#$3A
.108c	f0 24		beq $10b2			beq 	_AGOExit
.108e	88		dey				dey 								; unpick 2 iny
.108f					_AGOZeroPage1:
.108f	88		dey				dey
.1090	a9 00		lda #$00			lda 	#0 							; get the address into esInt0/1
.1092	a2 0a		ldx #$0a		ldx	#10
.1094	20 ff 34	jsr $34ff		jsr	mainHandler
.1097	20 ef 10	jsr $10ef			jsr 	AsmGetIndexing
.109a	a9 01		lda #$01			lda 	#AMD_ZERO
.109c	90 14		bcc $10b2			bcc 	_AGOExit
.109e	a9 05		lda #$05			lda 	#AMD_ZEROX
.10a0	e0 00		cpx #$00			cpx 	#0
.10a2	f0 0e		beq $10b2			beq 	_AGOExit
.10a4	a9 09		lda #$09			lda 	#AMD_ZEROY
.10a6	4c b2 10	jmp $10b2			jmp 	_AGOExit
.10a9					_AGOEvalExit:
.10a9	48		pha				pha
.10aa	a9 00		lda #$00			lda 	#0 							; evaluate operand in root.
.10ac	a2 0a		ldx #$0a		ldx	#10
.10ae	20 ff 34	jsr $34ff		jsr	mainHandler
.10b1	68		pla				pla
.10b2					_AGOExit:
.10b2	48		pha				pha 								; save the mode
.10b3	a5 60		lda $60				lda 	esInt2 						; check the operand is zero.
.10b5	05 68		ora $68				ora 	esInt3
.10b7	d0 02		bne $10bb			bne 	_AGOValue
.10b9	68		pla				pla
.10ba	60		rts				rts
.10bb					_AGOValue:
.10bb	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.10bd	20 18 15	jsr $1518		jsr	errorHandler
.10c0					_AGOIndirect:
.10c0	a9 00		lda #$00			lda 	#0 							; evaluate operand in root.
.10c2	a2 0a		ldx #$0a		ldx	#10
.10c4	20 ff 34	jsr $34ff		jsr	mainHandler
.10c7	b1 28		lda ($28),y			lda 	(codePtr),y 				; does ) follow ? if so might be ) or ),Y
.10c9	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.10cb	f0 11		beq $10de			beq 	_AGOIndIndY
.10cd	20 ef 10	jsr $10ef			jsr 	ASMGetIndexing 				; must be ,X)
.10d0	90 39		bcc $110b			bcc 	AGISyntax
.10d2	e0 00		cpx #$00			cpx 	#0
.10d4	d0 35		bne $110b			bne 	AGISyntax
.10d6	a2 04		ldx #$04		ldx	#4
.10d8	20 ff 34	jsr $34ff		jsr	mainHandler
.10db	a9 0d		lda #$0d			lda 	#AMD_ZEROINDX
.10dd	60		rts				rts
.10de					_AGOIndIndY:
.10de	c8		iny				iny
.10df	20 ef 10	jsr $10ef			jsr 	ASMGetIndexing 				; get indexing if any
.10e2	a9 08		lda #$08			lda 	#AMD_ZEROIND
.10e4	90 cc		bcc $10b2			bcc 	_AGOExit 					; none then exit
.10e6	e0 00		cpx #$00			cpx 	#0 							; must be ,Y
.10e8	f0 21		beq $110b			beq 	AGISyntax
.10ea	a9 04		lda #$04			lda 	#AMD_ZEROINDY
.10ec	4c b2 10	jmp $10b2			jmp 	_AGOExit
.10ef					AsmGetIndexing:
.10ef	b1 28		lda ($28),y			lda 	(codePtr),y 				; check for comma
.10f1	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.10f3	18		clc				clc
.10f4	d0 14		bne $110a			bne 	_AGIExit 					; no comma, return with CC
.10f6	c8		iny				iny 								; get what SHOULD be X or Y
.10f7	b1 28		lda ($28),y			lda 	(codePtr),y  				; read it
.10f9	38		sec				sec 								; subtract 6 bit ASCII of X
.10fa	e9 18		sbc #$18			sbc 	#"X" & $3F
.10fc	c9 02		cmp #$02			cmp 	#2 							; if unsigned >= 2 then error
.10fe	b0 0b		bcs $110b			bcs 	AGISyntax
.1100	aa		tax				tax 								; put in index
.1101	c8		iny				iny 								; get what follows that, should be the $3A marker
.1102	b1 28		lda ($28),y			lda 	(codePtr),y
.1104	c8		iny				iny
.1105	c9 3a		cmp #$3a			cmp 	#$3A
.1107	d0 02		bne $110b			bne 	AGISyntax
.1109	38		sec				sec 								; return CS and index mode in X
.110a					_AGIExit:
.110a	60		rts				rts
.110b					AGISyntax:
.110b	a2 02		ldx #$02			ldx 	#ErrorID_syntax
.110d	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: assembler/assembler.asm


;******  Processing file: assembler/asmwrite.asm

.0af2					finalOpcode:
>0af2							.fill 	1
.1110					AsmWriteInstruction:
.1110	8d f2 0a	sta $0af2			sta 	finalOpcode					; save opcode.
.1113	98		tya				tya
.1114	48		pha				pha
.1115	ad 38 0a	lda $0a38			lda 	SingleLetterVar+("O"-"A")*4	; check O
.1118	29 02		and #$02			and 	#2
.111a	f0 2d		beq $1149			beq 	_ASMWNoEcho 				; if zero then don't echo.
.111c	ad 3d 0a	lda $0a3d			lda 	SingleLetterVar+("P"-"A")*4+1 ; write address in P
.111f	20 84 11	jsr $1184			jsr 	AWIWriteHex
.1122	ad 3c 0a	lda $0a3c			lda 	SingleLetterVar+("P"-"A")*4
.1125	20 84 11	jsr $1184			jsr 	AWIWriteHex
.1128	ad f2 0a	lda $0af2			lda 	finalOpcode 				; write opcode
.112b	20 7d 11	jsr $117d			jsr 	AWIWriteHexSpace
.112e	e0 00		cpx #$00			cpx 	#0
.1130	f0 0e		beq $1140			beq 	_ASMWEchoExit
.1132	a5 50		lda $50				lda 	esInt0
.1134	20 7d 11	jsr $117d			jsr 	AWIWriteHexSpace
.1137	e0 01		cpx #$01			cpx 	#1
.1139	f0 05		beq $1140			beq 	_ASMWEchoExit
.113b	a5 58		lda $58				lda 	esInt1
.113d	20 7d 11	jsr $117d			jsr 	AWIWriteHexSpace
.1140					_ASMWEchoExit:
.1140	8a		txa				txa
.1141	48		pha				pha
.1142	a2 06		ldx #$06		ldx	#6
.1144	20 f6 14	jsr $14f6		jsr	deviceHandler
.1147	68		pla				pla
.1148	aa		tax				tax
.1149					_ASMWNoEcho:
.1149	ad f2 0a	lda $0af2			lda 	finalOpcode
.114c	20 64 11	jsr $1164			jsr 	AsmWriteByte
.114f	e0 00		cpx #$00			cpx 	#0
.1151	f0 0e		beq $1161			beq 	_ASMWExit
.1153	a5 50		lda $50				lda 	esInt0
.1155	20 64 11	jsr $1164			jsr 	AsmWriteByte
.1158	e0 01		cpx #$01			cpx 	#1
.115a	f0 05		beq $1161			beq 	_ASMWExit
.115c	a5 58		lda $58				lda 	esInt1
.115e	20 64 11	jsr $1164			jsr 	AsmWriteByte
.1161					_ASMWExit:
.1161	68		pla				pla
.1162	a8		tay				tay
.1163	60		rts				rts
.1164					AsmWriteByte:
.1164	a0 00		ldy #$00			ldy 	#0
.1166	48		pha				pha
.1167	ad 3c 0a	lda $0a3c			lda 	SingleLetterVar+("P"-"A")*4 ; copy address to temp0
.116a	85 2a		sta $2a				sta 	temp0
.116c	ad 3d 0a	lda $0a3d			lda 	SingleLetterVar+("P"-"A")*4+1
.116f	85 2b		sta $2b				sta 	temp0+1
.1171	68		pla				pla 								; write out the byte.
.1172	91 2a		sta ($2a),y			sta 	(temp0),y
.1174	ee 3c 0a	inc $0a3c			inc 	SingleLetterVar+("P"-"A")*4	; increment P
.1177	d0 03		bne $117c			bne 	_AWBNoCarry
.1179	ee 3d 0a	inc $0a3d			inc 	SingleLetterVar+("P"-"A")*4+1
.117c					_AWBNoCarry:
.117c	60		rts				rts
.117d					AWIWriteHexSpace:
.117d	48		pha				pha
.117e	a9 20		lda #$20			lda 	#" "
.1180	20 97 11	jsr $1197			jsr 	AWIPrintChar
.1183	68		pla				pla
.1184					AWIWriteHex:
.1184	48		pha				pha
.1185	4a		lsr a				lsr 	a
.1186	4a		lsr a				lsr 	a
.1187	4a		lsr a				lsr 	a
.1188	4a		lsr a				lsr 	a
.1189	20 8d 11	jsr $118d			jsr 	AWIPrintNibble
.118c	68		pla				pla
.118d					AWIPrintNibble:
.118d	29 0f		and #$0f			and 	#15
.118f	c9 0a		cmp #$0a			cmp 	#10
.1191	90 02		bcc $1195			bcc 	_AWIPNDigit
.1193	69 06		adc #$06			adc 	#6
.1195					_AWIPNDigit:
.1195	69 30		adc #$30			adc 	#48
.1197					AWIPrintChar:
.1197	85 32		sta $32				sta 	tempShort
.1199	8a		txa				txa
.119a	48		pha				pha
.119b	a5 32		lda $32				lda 	tempShort
.119d	a2 16		ldx #$16		ldx	#22
.119f	20 f6 14	jsr $14f6		jsr	deviceHandler
.11a2	68		pla				pla
.11a3	aa		tax				tax
.11a4	60		rts				rts

;******  Return to file: assembler/assembler.asm


;******  Processing file: assembler/assemblecmd.asm

.0af3					asmToken:
>0af3							.fill 	1
.0af4					asmMode:
>0af4							.fill 	1 							; esInt0/1
.0af5					asmBaseOpcode:
>0af5							.fill 	1
.11a5					AssembleOneInstruction:
.11a5	8d f3 0a	sta $0af3			sta 	asmToken 					; save the token
.11a8	aa		tax				tax
.11a9	bd 72 11	lda $1172,x			lda 	OpcodeTable-TKA_GROUP1,x 	; get the base opcode.
.11ac	8d f5 0a	sta $0af5			sta 	asmBaseOpcode
.11af	20 5d 10	jsr $105d			jsr 	AsmGetOperand 				; identify the address mode and operand where applicable.
.11b2	8d f4 0a	sta $0af4			sta 	asmMode
.11b5	a5 58		lda $58				lda 	esInt1 						; check if this is a three byte operand.
.11b7	d0 05		bne $11be			bne 	_AOIThreeBytes 				; if so, we have to use three byte
.11b9	20 d4 11	jsr $11d4			jsr 	AssembleAttempt 			; try to assemble token/mode/operand (2 bytes)
.11bc	b0 10		bcs $11ce			bcs 	_AOISuccess 				; worked ok.
.11be					_AOIThreeBytes:
.11be	ae f4 0a	ldx $0af4			ldx 	asmMode 					; convert mode to 3 byte version, where possible.
.11c1	bd f8 11	lda $11f8,x			lda 	AbsoluteVersionTable,x
.11c4	30 09		bmi $11cf			bmi 	_AOIError					; not possible, no equivalent.
.11c6	8d f4 0a	sta $0af4			sta 	asmMode
.11c9	20 d4 11	jsr $11d4			jsr 	AssembleAttempt 			; try to assemble token/mode/operand (3 bytes)
.11cc	90 01		bcc $11cf			bcc 	_AOIError 					; didn't work.
.11ce					_AOISuccess:
.11ce	60		rts				rts
.11cf					_AOIError:
.11cf	a2 24		ldx #$24			ldx 	#ErrorID_Assembler
.11d1	20 18 15	jsr $1518		jsr	errorHandler
.11d4					AssembleAttempt:
.11d4	20 dd 11	jsr $11dd			jsr 	_AADispatch 				; go to the code which dispatches to the appropriate
.11d7	b0 03		bcs $11dc			bcs 	_AAExit 					; exit if carry set, e.g. was successful
.11d9	20 87 13	jsr $1387			jsr 	AssembleSpecialCase
.11dc					_AAExit:
.11dc	60		rts				rts
.11dd					_AADispatch:
.11dd	ad f3 0a	lda $0af3			lda 	asmToken
.11e0	c9 b7		cmp #$b7			cmp 	#TKA_GROUP4
.11e2	b0 11		bcs $11f5			bcs 	_AAGroup4
.11e4	c9 ae		cmp #$ae			cmp 	#TKA_GROUP3
.11e6	b0 0a		bcs $11f2			bcs 	_AAGroup3
.11e8	c9 9c		cmp #$9c			cmp 	#TKA_GROUP2
.11ea	b0 03		bcs $11ef			bcs 	_AAGroup2
.11ec	4c cd 12	jmp $12cd			jmp 	AssembleGroup1
.11ef					_AAGroup2:
.11ef	4c 28 13	jmp $1328			jmp 	AssembleGroup2
.11f2					_AAGroup3:
.11f2	4c 49 13	jmp $1349			jmp 	AssembleGroup3
.11f5					_AAGroup4:
.11f5	4c 7d 13	jmp $137d			jmp 	AssembleGroup4
.11f8					AbsoluteVersionTable:
>11f8	ff						.byte	$FF 			; fail AMD_IMM
>11f9	03						.byte	AMD_ABS 		; absolute AMD_ZERO
>11fa	ff						.byte	$FF 			; fail AMD_ACCIMP
>11fb	ff						.byte	$FF 			; fail AMD_ABS
>11fc	ff						.byte 	$FF 			; fail AMD_ZEROINDY
>11fd	07						.byte	AMD_ABSX 		; absolute AMD_ZEROX
>11fe	ff						.byte	$FF 			; fail AMD_ABSY
>11ff	ff						.byte	$FF 			; fail AMD_ABSX
>1200	0a						.byte	AMD_ABSIND 		; absolute AMD_ZEROIND
>1201	06						.byte	AMD_ABSY 		; absolute AMD_ZEROY
>1202	ff						.byte	$FF 			; fail AMD_ABSIND
>1203	ff						.byte	$FF 			; fail AMD_ABSINDX
>1204	ff						.byte	$FF 			; fail AMD_REL
>1205	0b						.byte 	AMD_ABSINDX 	; absolute AMD_ZEROINDX

;******  Processing file: assembler/../generated/asmtables.inc

.1206					OpcodeTable:
>1206	01					.byte	$01			; $94 ora
>1207	21					.byte	$21			; $95 (and)
>1208	41					.byte	$41			; $96 eor
>1209	61					.byte	$61			; $97 adc
>120a	81					.byte	$81			; $98 sta
>120b	a1					.byte	$a1			; $99 lda
>120c	c1					.byte	$c1			; $9a cmp
>120d	e1					.byte	$e1			; $9b sbc
>120e	02					.byte	$02			; $9c asl
>120f	22					.byte	$22			; $9d rol
>1210	42					.byte	$42			; $9e lsr
>1211	62					.byte	$62			; $9f ror
>1212	82					.byte	$82			; $a0 stx
>1213	a2					.byte	$a2			; $a1 ldx
>1214	c2					.byte	$c2			; $a2 dec
>1215	e2					.byte	$e2			; $a3 inc
>1216	60					.byte	$60			; $a4 stz
>1217	20					.byte	$20			; $a5 bit
>1218	80					.byte	$80			; $a6 sty
>1219	a0					.byte	$a0			; $a7 ldy
>121a	c0					.byte	$c0			; $a8 cpy
>121b	e0					.byte	$e0			; $a9 cpx
>121c	00					.byte	$00			; $aa tsb
>121d	10					.byte	$10			; $ab trb
>121e	14					.byte	$14			; $ac jsr
>121f	40					.byte	$40			; $ad jmp
>1220	10					.byte	$10			; $ae bpl
>1221	30					.byte	$30			; $af bmi
>1222	50					.byte	$50			; $b0 bvc
>1223	70					.byte	$70			; $b1 bvs
>1224	90					.byte	$90			; $b2 bcc
>1225	b0					.byte	$b0			; $b3 bcs
>1226	d0					.byte	$d0			; $b4 bne
>1227	f0					.byte	$f0			; $b5 beq
>1228	80					.byte	$80			; $b6 bra
>1229	00					.byte	$00			; $b7 brk
>122a	08					.byte	$08			; $b8 php
>122b	18					.byte	$18			; $b9 clc
>122c	28					.byte	$28			; $ba plp
>122d	38					.byte	$38			; $bb sec
>122e	40					.byte	$40			; $bc rti
>122f	48					.byte	$48			; $bd pha
>1230	58					.byte	$58			; $be cli
>1231	5a					.byte	$5a			; $bf phy
>1232	60					.byte	$60			; $c0 rts
>1233	68					.byte	$68			; $c1 pla
>1234	78					.byte	$78			; $c2 sei
>1235	7a					.byte	$7a			; $c3 ply
>1236	88					.byte	$88			; $c4 dey
>1237	8a					.byte	$8a			; $c5 txa
>1238	98					.byte	$98			; $c6 tya
>1239	9a					.byte	$9a			; $c7 txs
>123a	a8					.byte	$a8			; $c8 tay
>123b	aa					.byte	$aa			; $c9 tax
>123c	b8					.byte	$b8			; $ca clv
>123d	ba					.byte	$ba			; $cb tsx
>123e	c8					.byte	$c8			; $cc iny
>123f	ca					.byte	$ca			; $cd dex
>1240	d8					.byte	$d8			; $ce cld
>1241	da					.byte	$da			; $cf phx
>1242	e8					.byte	$e8			; $d0 inx
>1243	ea					.byte	$ea			; $d1 nop
>1244	f8					.byte	$f8			; $d2 sed
>1245	fa					.byte	$fa			; $d3 plx
.1246					Group2OpcodeAvailability:
>1246	ae					.byte	$ae			; $9c asl $02
>1247	ae					.byte	$ae			; $9d rol $22
>1248	ae					.byte	$ae			; $9e lsr $42
>1249	ae					.byte	$ae			; $9f ror $62
>124a	0a					.byte	$0a			; $a0 stx $82
>124b	0b					.byte	$0b			; $a1 ldx $a2
>124c	aa					.byte	$aa			; $a2 dec $c2
>124d	aa					.byte	$aa			; $a3 inc $e2
>124e	22					.byte	$22			; $a4 stz $60
>124f	aa					.byte	$aa			; $a5 bit $20
>1250	2a					.byte	$2a			; $a6 sty $80
>1251	ab					.byte	$ab			; $a7 ldy $a0
>1252	2b					.byte	$2b			; $a8 cpy $c0
>1253	0b					.byte	$0b			; $a9 cpx $e0
>1254	0a					.byte	$0a			; $aa tsb $00
>1255	0a					.byte	$0a			; $ab trb $10
>1256	08					.byte	$08			; $ac jsr $14
>1257	08					.byte	$08			; $ad jmp $40
.1258					AssemblerSpecialCases:
>1258	ad 0a 6c				.byte	$ad,10,$6c		; jmp (abs)
>125b	ad 0b 7c				.byte	$ad,11,$7c		; jmp (abs,x)
>125e	a1 06 be				.byte	$a1,6,$be		; ldx abs,y
>1261	a1 09 b6				.byte	$a1,9,$b6		; ldx zp,y
>1264	a0 09 96				.byte	$a0,9,$96		; stx zp,y
>1267	a3 02 1a				.byte	$a3,2,$1a		; inc acc
>126a	a2 02 3a				.byte	$a2,2,$3a		; dec acc
>126d	a5 00 89				.byte	$a5,0,$89		; bit #
>1270	a4 03 9c				.byte	$a4,3,$9c		; stz abs
>1273	a4 07 9e				.byte	$a4,7,$9e		; stz abs,x
>1276	00					.byte	0

;******  Return to file: assembler/assemblecmd.asm


;******  Return to file: assembler/assembler.asm


;******  Processing file: assembler/assemblelabel.asm

.1277					AssembleLabel:
.1277	b1 28		lda ($28),y			lda 	(codePtr),y 				; check it's followed by a variable name.
.1279	c9 3a		cmp #$3a			cmp 	#$3A
.127b	b0 4b		bcs $12c8			bcs 	_ALSyntax
.127d	a9 00		lda #$00			lda 	#0							; get a variable name on to stack:0
.127f	a2 02		ldx #$02		ldx	#2
.1281	20 b3 43	jsr $43b3		jsr	variableHandler
.1284	a5 48		lda $48				lda 	esType 						; check integer reference
.1286	c9 80		cmp #$80			cmp 	#$80
.1288	d0 3e		bne $12c8			bne 	_ALSyntax
.128a	a5 50		lda $50				lda 	esInt0 						; copy that reference address to temp0
.128c	85 2a		sta $2a				sta 	temp0
.128e	a5 58		lda $58				lda 	esInt1
.1290	85 2b		sta $2b				sta 	temp0+1
.1292	98		tya				tya
.1293	48		pha				pha
.1294	ad 38 0a	lda $0a38			lda 	SingleLetterVar+("O"-"A")*4	; are we in Pass 2
.1297	4a		lsr a				lsr 	a
.1298	90 11		bcc $12ab			bcc 	_ALWrite
.129a	a0 00		ldy #$00			ldy 	#0
.129c	ad 3c 0a	lda $0a3c			lda 	SingleLetterVar+("P"-"A")*4 ; compare the value in P to the variable
.129f	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.12a1	d0 20		bne $12c3			bne 	_ALChanged
.12a3	c8		iny				iny
.12a4	ad 3d 0a	lda $0a3d			lda 	SingleLetterVar+("P"-"A")*4+1
.12a7	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.12a9	d0 18		bne $12c3			bne 	_ALChanged
.12ab					_ALWrite:
.12ab	a0 00		ldy #$00			ldy 	#0
.12ad	ad 3c 0a	lda $0a3c			lda 	SingleLetterVar+("P"-"A")*4 ; copy the value in P into the variable
.12b0	91 2a		sta ($2a),y			sta 	(temp0),y
.12b2	ad 3d 0a	lda $0a3d			lda 	SingleLetterVar+("P"-"A")*4+1
.12b5	c8		iny				iny
.12b6	91 2a		sta ($2a),y			sta 	(temp0),y
.12b8	a9 00		lda #$00			lda 	#0
.12ba	c8		iny				iny
.12bb	91 2a		sta ($2a),y			sta 	(temp0),y
.12bd	c8		iny				iny
.12be	91 2a		sta ($2a),y			sta 	(temp0),y
.12c0	68		pla				pla
.12c1	a8		tay				tay
.12c2	60		rts				rts
.12c3					_ALChanged:
.12c3	a2 26		ldx #$26			ldx 	#ErrorID_Label
.12c5	20 18 15	jsr $1518		jsr	errorHandler
.12c8					_ALSyntax:
.12c8	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.12ca	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: assembler/assembler.asm


;******  Processing file: assembler/subgroup.asm

.12cd					AssembleGroup1:
.12cd	ad f3 0a	lda $0af3			lda 	asmToken 					; firstly, we throw out STA immediate
.12d0	c9 98		cmp #$98			cmp 	#TKW_STA
.12d2	d0 07		bne $12db			bne 	_AG1NotStoreImm
.12d4	ad f4 0a	lda $0af4			lda 	asmMode
.12d7	c9 00		cmp #$00			cmp 	#AMD_IMM
.12d9	f0 2c		beq $1307			beq 	AG1ModeError
.12db					_AG1NotStoreImm:
.12db	ae f4 0a	ldx $0af4			ldx 	asmMode						; get mode into X.
.12de	bd 0c 13	lda $130c,x			lda		AMDOperandSize,X 			; get the size of the operand and push on stack
.12e1	48		pha				pha
.12e2	f0 23		beq $1307			beq 	AG1ModeError 				; if the size is zero, the mode must be Accumulator
.12e4	e0 00		cpx #$00			cpx 	#0 							; if the mode is zero, e.g. immediate
.12e6	d0 02		bne $12ea			bne 	_AG1NotImmediate
.12e8	a2 02		ldx #$02			ldx 	#2 							; then we use offset 2 here. This is how the 6502
.12ea					_AG1NotImmediate:
.12ea	e0 0d		cpx #$0d			cpx 	#AMD_ZEROINDX 				; (zero,x) uses slot 0.
.12ec	d0 02		bne $12f0			bne 	_AG1NotZX
.12ee	a2 00		ldx #$00			ldx 	#0
.12f0					_AG1NotZX:
.12f0	68		pla				pla 								; restore length
.12f1	e0 09		cpx #$09			cpx 	#9 							; anything > 8 fails.
.12f3	b0 10		bcs $1305			bcs 	AG1Fail
.12f5					AG1ReturnValue:
.12f5	85 32		sta $32				sta 	tempShort 					; save size of operand
.12f7	18		clc				clc
.12f8	bd 1a 13	lda $131a,x			lda 	AMDOffsetFromBase,X 		; get the offset for the address mode.
.12fb	6d f5 0a	adc $0af5			adc 	asmBaseOpcode 				; add the base opcode.
.12fe	a6 32		ldx $32				ldx 	tempShort 					; length in X
.1300	20 10 11	jsr $1110			jsr 	AsmWriteInstruction 		; output instruction.
.1303	38		sec				sec
.1304	60		rts				rts
.1305					AG1Fail:
.1305	18		clc				clc
.1306	60		rts				rts
.1307					AG1ModeError:
.1307	a2 24		ldx #$24			ldx 	#ErrorID_Assembler
.1309	20 18 15	jsr $1518		jsr	errorHandler
.130c					AMDOperandSize:
>130c	01 01 00 02					.byte 	1,1,0,2
>1310	01 01 02 02					.byte 	1,1,2,2
>1314	01 01 02 02					.byte 	1,1,2,2
>1318	01 01						.byte 	1,1
.131a					AMDOffsetFromBase:
>131a	00 04 08 0c					.byte 	0,4,8,12
>131e	10 14 18 1c					.byte	16,20,24,28
>1322	11 00 00 00					.byte 	17,0,0,0
>1326	00 00						.byte 	0,0
.1328					AssembleGroup2:
.1328	ad f4 0a	lda $0af4			lda 	asmMode 					; get the mode; if >= 8 cannot be a legit group 2
.132b	c9 08		cmp #$08			cmp 	#8
.132d	b0 18		bcs $1347			bcs 	_AG2Fail
.132f	85 2a		sta $2a				sta 	temp0 						; save in temp9
.1331	ae f3 0a	ldx $0af3			ldx 	asmToken					; get token in X, then get the availability flags for it
.1334	bd aa 11	lda $11aa,x			lda 	Group2OpcodeAvailability-TKA_GROUP2,x
.1337					_AG2Shift:
.1337	4a		lsr a				lsr 	a
.1338	c6 2a		dec $2a				dec 	temp0
.133a	10 fb		bpl $1337			bpl 	_AG2Shift
.133c	90 09		bcc $1347			bcc 	_AG2Fail 					; cannot do that instruction w/that opcode.
.133e	ae f4 0a	ldx $0af4			ldx  	asmMode 					; mode in X
.1341	bd 0c 13	lda $130c,x			lda		AMDOperandSize,X 			; get the size of the operand in A
.1344	4c f5 12	jmp $12f5			jmp 	AG1ReturnValue 				; and use that with Group 1's exit code
.1347					_AG2Fail:
.1347	18		clc				clc
.1348	60		rts				rts
.1349					AssembleGroup3:
.1349	ad 38 0a	lda $0a38			lda 	SingleLetterVar+("O"-"A")*4	; check bit 0 (pass) of O
.134c	4a		lsr a				lsr 	a
.134d	a9 00		lda #$00			lda 	#0 							; if clear, e.g. pass 1, use default zero.
.134f	90 21		bcc $1372			bcc 	_AG3Default
.1351	38		sec				sec	 								; calculate branch offset
.1352	a5 50		lda $50				lda		esInt0
.1354	ed 3c 0a	sbc $0a3c			sbc 	SingleLetterVar+("P"-"A")*4
.1357	aa		tax				tax
.1358	a5 58		lda $58				lda		esInt1
.135a	ed 3d 0a	sbc $0a3d			sbc 	SingleLetterVar+("P"-"A")*4+1
.135d	85 58		sta $58				sta 	esInt1
.135f	8a		txa				txa 								; add 126, now 128 too many.
.1360	18		clc				clc 								; we can use this to check the range
.1361	69 7e		adc #$7e			adc 	#126
.1363	85 50		sta $50				sta 	esInt0
.1365	90 02		bcc $1369			bcc 	_AG3NoCarry
.1367	e6 58		inc $58				inc 	esInt1
.1369					_AG3NoCarry:
.1369	a5 58		lda $58				lda 	esInt1 						; check in range.
.136b	d0 0b		bne $1378			bne 	_AG3Range
.136d	a5 50		lda $50				lda 	esInt0 						; fix up branch distance
.136f	38		sec				sec
.1370	e9 80		sbc #$80			sbc 	#128
.1372					_AG3Default:
.1372	85 50		sta $50				sta 	esInt0
.1374					_AG3ExitOk:
.1374	a2 01		ldx #$01			ldx 	#1 							; one opcode, use AG4 Code
.1376	d0 07		bne $137f			bne 	AG4Write
.1378					_AG3Range:
.1378	a2 25		ldx #$25			ldx 	#ErrorID_Branch
.137a	20 18 15	jsr $1518		jsr	errorHandler
.137d					AssembleGroup4:
.137d	a2 00		ldx #$00			ldx 	#0 							; no parameters in the opcode.
.137f					AG4Write:
.137f	ad f5 0a	lda $0af5			lda 	asmBaseOpcode				; the opcode is the opcode base.
.1382	20 10 11	jsr $1110			jsr 	AsmWriteInstruction 		; output instruction.
.1385	38		sec				sec
.1386	60		rts				rts
.1387					AssembleSpecialCase:
.1387	a2 00		ldx #$00			ldx 	#0
.1389					_ASCScan:
.1389	bd 58 12	lda $1258,x			lda 	AssemblerSpecialCases,x 	; scan token and mode for match
.138c	cd f3 0a	cmp $0af3			cmp 	asmToken
.138f	d0 08		bne $1399			bne 	_ASCNext
.1391	bd 59 12	lda $1259,x			lda 	AssemblerSpecialCases+1,x
.1394	cd f4 0a	cmp $0af4			cmp 	asmMode
.1397	f0 0a		beq $13a3			beq 	_ASCFound
.1399					_ASCNext:
.1399	e8		inx				inx									; next entry
.139a	e8		inx				inx
.139b	e8		inx				inx
.139c	bd 58 12	lda $1258,x			lda 	AssemblerSpecialCases,x 	; until table ends
.139f	d0 e8		bne $1389			bne 	_ASCScan
.13a1	18		clc				clc
.13a2	60		rts				rts
.13a3					_ASCFound:
.13a3	bd 5a 12	lda $125a,x			lda 	AssemblerSpecialCases+2,x 	; get the new opcode.
.13a6	48		pha				pha
.13a7	ae f4 0a	ldx $0af4			ldx  	asmMode 					; mode in X
.13aa	bd 0c 13	lda $130c,x			lda		AMDOperandSize,X 			; get the size of the operand in X
.13ad	aa		tax				tax
.13ae	68		pla				pla 								; opcode back
.13af	20 10 11	jsr $1110			jsr 	AsmWriteInstruction 		; output instruction.
.13b2	38		sec				sec
.13b3	60		rts				rts

;******  Return to file: assembler/assembler.asm

.13b4					assemblerHandler:
.13b4	7c b7 13	jmp ($13b7,x)			jmp 	(assemblerVectors,x)
.13b7					assemblerVectors:
>13b7	bd 13					.word _DummyControlHandler ; index 0
>13b9	a5 11					.word AssembleOneInstruction ; index 2
>13bb	77 12					.word AssembleLabel        ; index 4
.13bd					_DummyControlHandler:
.13bd	60		rts			rts

;******  Return to file: basic.asm

.13be					section_end_assembler:
.13be					section_start_device:

;******  Processing file: device/device.asm


;******  Processing file: device/option_x16/x16break.asm

.13be					X16Break:
.13be	20 e1 ff	jsr $ffe1			jsr 	$FFE1
.13c1	f0 01		beq $13c4			beq 	_IsBreak
.13c3	60		rts				rts
.13c4					_IsBreak:
.13c4	a2 21		ldx #$21			ldx 	#ErrorID_Break
.13c6	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: device/device.asm


;******  Processing file: device/option_x16/x16file.asm

.13c9					ExternSave:
.13c9	98		tya				tya
.13ca	48		pha				pha
.13cb	20 19 14	jsr $1419			jsr 	ExternGetLength 			; get length of file into A name YX
.13ce	20 bd ff	jsr $ffbd			jsr 	$FFBD 						; set name
.13d1	a9 01		lda #$01			lda 	#1
.13d3	a2 08		ldx #$08			ldx 	#8	 						; device #8
.13d5	a0 00		ldy #$00			ldy 	#0
.13d7	20 ba ff	jsr $ffba			jsr 	$FFBA 						; set LFS
.13da	a5 51		lda $51				lda 	esInt0+1 					; copy start of save address to temp0
.13dc	85 2a		sta $2a				sta 	temp0
.13de	a5 59		lda $59				lda 	esInt1+1
.13e0	85 2b		sta $2b				sta 	temp0+1
.13e2	a6 52		ldx $52				ldx 	esInt0+2 					; end address
.13e4	a4 5a		ldy $5a				ldy 	esInt1+2
.13e6	a9 2a		lda #$2a			lda 	#temp0 						; ref to start address
.13e8	20 d8 ff	jsr $ffd8			jsr 	$FFD8 						; save
.13eb	b0 03		bcs $13f0			bcs 	_ESSave
.13ed	68		pla				pla
.13ee	a8		tay				tay
.13ef	60		rts				rts
.13f0					_ESSave:
.13f0	a2 1f		ldx #$1f			ldx 	#ErrorID_Save
.13f2	20 18 15	jsr $1518		jsr	errorHandler
.13f5					ExternLoad:
.13f5	98		tya				tya
.13f6	48		pha				pha
.13f7	20 19 14	jsr $1419			jsr 	ExternGetLength 			; get length of file into A name YX
.13fa	20 bd ff	jsr $ffbd			jsr 	$FFBD 						; set name
.13fd	a9 01		lda #$01			lda 	#1
.13ff	a2 08		ldx #$08			ldx 	#8	 						; device #8
.1401	a0 00		ldy #$00			ldy 	#0
.1403	20 ba ff	jsr $ffba			jsr 	$FFBA 						; set LFS
.1406	a6 51		ldx $51				ldx 	esInt0+1 					; load address
.1408	a4 59		ldy $59				ldy 	esInt1+1
.140a	a9 00		lda #$00			lda 	#0 							; load command
.140c	20 d5 ff	jsr $ffd5			jsr 	$FFD5
.140f	b0 03		bcs $1414			bcs 	_ESLoad
.1411	68		pla				pla
.1412	a8		tay				tay
.1413	60		rts				rts
.1414					_ESLoad:
.1414	a2 20		ldx #$20			ldx 	#ErrorID_Load
.1416	20 18 15	jsr $1518		jsr	errorHandler
.1419					ExternGetLength:
.1419	a5 50		lda $50				lda 	esInt0 						; length into A.
.141b	85 2a		sta $2a				sta 	temp0
.141d	a5 58		lda $58				lda 	esInt1
.141f	85 2b		sta $2b				sta 	temp0+1
.1421	a0 00		ldy #$00			ldy 	#0
.1423	b1 2a		lda ($2a),y			lda 	(temp0),y
.1425	a6 50		ldx $50				ldx 	esInt0 						; name into YX
.1427	a4 58		ldy $58				ldy 	esInt1
.1429	e8		inx				inx 								; advance over the length pointer.
.142a	d0 01		bne $142d			bne 	_ESNoCarry
.142c	c8		iny				iny
.142d					_ESNoCarry:
.142d	60		rts				rts

;******  Return to file: device/device.asm


;******  Processing file: device/option_x16/x16io.asm

=240					MaxLineInputSize = 240
.0af6					bufferCount:
>0af6							.fill 	0
.0af6					bufferStorage:
>0af6							.fill 	MaxLineInputSize
.142e					IOControlHandler:
.142e	c9 00		cmp #$00			cmp 	#0
.1430	d0 12		bne $1444			bne		_CHExit
.1432	a9 0f		lda #$0f			lda 	#15 						; switch to upper/lower case mode
.1434	20 5d 14	jsr $145d			jsr 	IOPrintChar
.1437	a9 02		lda #$02			lda 	#2 							; green on black and clear screen
.1439	20 89 14	jsr $1489			jsr 	IOInk
.143c	a9 00		lda #$00			lda 	#0
.143e	20 9d 14	jsr $149d			jsr 	IOPaper
.1441	20 45 14	jsr $1445			jsr 	IOClearScreen
.1444					_CHExit:
.1444	60		rts				rts
.1445					IOClearScreen:
.1445	48		pha				pha
.1446	a9 93		lda #$93			lda	 	#147 						; char code $93 clears screen
.1448	20 5d 14	jsr $145d			jsr 	IOPrintChar
.144b	68		pla				pla
.144c	60		rts				rts
.144d					IONewLine:
.144d	48		pha				pha
.144e	a9 0d		lda #$0d			lda 	#13
.1450	20 5d 14	jsr $145d			jsr 	IOPrintChar
.1453	68		pla				pla
.1454	60		rts				rts
.1455					IOTab:
.1455	48		pha				pha
.1456	a9 20		lda #$20			lda 	#32
.1458	20 5d 14	jsr $145d			jsr 	IOPrintChar
.145b	68		pla				pla
.145c	60		rts				rts
.145d					IOPrintAscii:
.145d					IOPrintChar:
.145d	aa		tax				tax 								; save in X so we can save Y
.145e	5a		phy				phy
.145f	8a		txa				txa
.1460	c9 08		cmp #$08			cmp 	#8 							; make BS (8) onto CHR$(14) which is the
.1462	d0 02		bne $1466			bne 	_IOPCNotBS 					; Commodore/X16 backspace code.
.1464	a9 14		lda #$14			lda 	#$14
.1466					_IOPCNotBS:
.1466	20 d2 ff	jsr $ffd2			jsr 	$FFD2 						; CBM OS Call.
.1469	7a		ply				ply
.146a	60		rts				rts
.146b					IOInkey:
.146b	98		tya				tya
.146c	48		pha				pha
.146d	20 e4 ff	jsr $ffe4			jsr 	$FFE4
.1470	85 32		sta $32				sta 	tempShort
.1472	68		pla				pla
.1473	a8		tay				tay
.1474	a5 32		lda $32				lda 	tempShort					; no key pressed.
.1476	f0 10		beq $1488			beq 	_IOIExit
.1478	c9 0d		cmp #$0d			cmp 	#13 						; allow CR (13)
.147a	f0 0c		beq $1488			beq 	_IOIExit
.147c	c9 14		cmp #$14			cmp 	#$14 						; backspace code ($14) returns 8.
.147e	f0 06		beq $1486			beq 	_IOIBackspace
.1480	c9 20		cmp #$20			cmp 	#32 						; no other control allowed.
.1482	90 e7		bcc $146b			bcc 	IOInkey
.1484	b0 02		bcs $1488			bcs 	_IOIExit
.1486					_IOIBackspace:
.1486	a9 08		lda #$08			lda 	#8 							; return chr(8)
.1488					_IOIExit:
.1488	60		rts				rts
.1489					IOInk:
.1489	48		pha				pha
.148a	29 07		and #$07			and 	#7 							; 8 primaries
.148c	aa		tax				tax
.148d	bd 95 14	lda $1495,x			lda 	_IOColourTable,x 			; look up CBM code and print it.
.1490	20 5d 14	jsr $145d			jsr 	IOPrintChar
.1493	68		pla				pla
.1494	60		rts				rts
.1495					_IOColourTable:
>1495	90						.byte 	$90 					; 0 Black
>1496	96						.byte 	$96 					; 1 Red
>1497	1e						.byte 	$1E 					; 2 Green
>1498	9e						.byte 	$9E 					; 3 Yellow
>1499	9a						.byte 	$9A 					; 4 Blue
>149a	9c						.byte 	$9C 					; 5 Magenta
>149b	9f						.byte 	$9F 					; 6 Cyan
>149c	05						.byte 	$05 					; 7 White
.149d					IOPaper:
.149d	48		pha				pha
.149e	48		pha				pha
.149f	a9 01		lda #$01			lda 	#1 						; 1 swaps fgr/bgr, so we swap them, set fgr
.14a1	20 5d 14	jsr $145d			jsr 	IOPrintChar 			; and then swap them again.
.14a4	68		pla				pla
.14a5	20 89 14	jsr $1489			jsr 	IOInk
.14a8	a9 01		lda #$01			lda 	#1
.14aa	20 5d 14	jsr $145d			jsr 	IOPrintChar
.14ad	68		pla				pla
.14ae	60		rts				rts
.14af					IOLocate:
.14af	48		pha				pha
.14b0	a9 13		lda #$13			lda 	#$13 					; home cursor code
.14b2	20 5d 14	jsr $145d			jsr 	IOPrintChar
.14b5	a9 11		lda #$11			lda 	#$11 	 				; print Y x $11 (down)
.14b7	20 be 14	jsr $14be			jsr 	_IOLoc2
.14ba	68		pla				pla
.14bb	a8		tay				tay
.14bc	a9 1d		lda #$1d			lda 	#$1D 					; print Y x $1D (right)
.14be					_IOLoc2:
.14be	c0 00		cpy #$00			cpy 	#0
.14c0	f0 06		beq $14c8			beq 	_IOLocExit
.14c2	20 5d 14	jsr $145d			jsr 	IOPrintChar
.14c5	88		dey				dey
.14c6	d0 f6		bne $14be			bne 	_IOLoc2
.14c8					_IOLocExit:
.14c8	60		rts				rts
.14c9					IOInput:
.14c9	a9 00		lda #$00			lda 	#0
.14cb	8d f6 0a	sta $0af6			sta 	bufferCount
.14ce					_IOILoop:
.14ce	20 cf ff	jsr $ffcf			jsr 	$FFCF
.14d1	c9 0d		cmp #$0d			cmp 	#13
.14d3	f0 10		beq $14e5			beq 	_IOIExit
.14d5	ae f6 0a	ldx $0af6			ldx 	bufferCount
.14d8	e0 f0		cpx #$f0			cpx 	#MaxLineInputSize
.14da	f0 f2		beq $14ce			beq 	_IOILoop
.14dc	ee f6 0a	inc $0af6			inc 	bufferCount
.14df	9d f7 0a	sta $0af7,x			sta 	bufferStorage+1,x
.14e2	4c ce 14	jmp $14ce			jmp 	_IOILoop
.14e5					_IOIExit:
.14e5	a9 f6		lda #$f6			lda 	#(bufferCount) & $FF
.14e7	85 2a		sta $2a				sta 	temp0
.14e9	a9 0a		lda #$0a			lda 	#(bufferCount) >> 8
.14eb	85 2b		sta $2b				sta 	1+(temp0)
.14ed	60		rts				rts

;******  Return to file: device/device.asm


;******  Processing file: device/option_x16/x16timer.asm

.14ee					IOReadTimer:
.14ee	20 de ff	jsr $ffde			jsr 	$FFDE 						; reads timer into YXA so we want only YA
.14f1	48		pha				pha
.14f2	8a		txa				txa
.14f3	a8		tay				tay
.14f4	68		pla				pla
.14f5	60		rts				rts

;******  Return to file: device/device.asm

.14f6					deviceHandler:
.14f6	7c f9 14	jmp ($14f9,x)			jmp 	(deviceVectors,x)
.14f9					deviceVectors:
>14f9	2e 14					.word IOControlHandler     ; index 0
>14fb	be 13					.word X16Break             ; index 2
>14fd	45 14					.word IOClearScreen        ; index 4
>14ff	4d 14					.word IONewLine            ; index 6
>1501	89 14					.word IOInk                ; index 8
>1503	6b 14					.word IOInkey              ; index 10
>1505	c9 14					.word IOInput              ; index 12
>1507	f5 13					.word ExternLoad           ; index 14
>1509	af 14					.word IOLocate             ; index 16
>150b	9d 14					.word IOPaper              ; index 18
>150d	5d 14					.word IOPrintChar          ; index 20
>150f	5d 14					.word IOPrintAscii         ; index 22
>1511	c9 13					.word ExternSave           ; index 24
>1513	55 14					.word IOTab                ; index 26
>1515	ee 14					.word IOReadTimer          ; index 28
.1517					_DummyControlHandler:
.1517	60		rts			rts

;******  Return to file: basic.asm

.1518					section_end_device:
.1518					section_start_error:

;******  Processing file: error/error.asm


;******  Processing file: error/errorhandler.asm

.1518					ErrorHandler:
.1518	8a		txa				txa
.1519	48		pha				pha
.151a	a9 01		lda #$01			lda 	#1 							; red
.151c	a2 08		ldx #$08		ldx	#8
.151e	20 f6 14	jsr $14f6		jsr	deviceHandler
.1521	68		pla				pla
.1522	aa		tax				tax
.1523	a9 8e		lda #$8e			lda 	#(ErrorTextList) & $FF
.1525	85 2a		sta $2a				sta 	temp0
.1527	a9 15		lda #$15			lda 	#(ErrorTextList) >> 8
.1529	85 2b		sta $2b				sta 	1+(temp0)
.152b	ca		dex		_EHFind:dex									; errors start at 1
.152c	f0 10		beq $153e			beq 	_EHFound
.152e	a0 00		ldy #$00			ldy 	#0 							; goto next text message, add length + 1 to the pointer.
.1530	38		sec				sec
.1531	a5 2a		lda $2a				lda 	temp0
.1533	71 2a		adc ($2a),y			adc 	(temp0),y
.1535	85 2a		sta $2a				sta 	temp0
.1537	90 f2		bcc $152b			bcc 	_EHFind
.1539	e6 2b		inc $2b				inc 	temp0+1
.153b	4c 2b 15	jmp $152b			jmp 	_EHFind
.153e					_EHFound:
.153e	20 49 18	jsr $1849			jsr 	EHPrintAscii 				; print the string "temp0" now points to.
.1541	a0 00		ldy #$00			ldy 	#0 							; in a line, e.g. the offset to next is non zero.
.1543	b1 28		lda ($28),y			lda 	(codePtr),y
.1545	f0 39		beq $1580			beq 	_EHNoLine
.1547	a5 29		lda $29				lda 	codePtr+1 					; code running from the command line.
.1549	cd c9 0a	cmp $0ac9			cmp 	basePage+1
.154c	90 32		bcc $1580			bcc 	_EHNoLine
.154e	a9 8a		lda #$8a			lda 	#(EHAtMsg) & $FF
.1550	85 2a		sta $2a				sta 	temp0
.1552	a9 15		lda #$15			lda 	#(EHAtMsg) >> 8
.1554	85 2b		sta $2b				sta 	1+(temp0)
.1556	20 49 18	jsr $1849			jsr 	EHPrintAscii
.1559	a0 01		ldy #$01			ldy 	#1 							; set up line number in TOS
.155b	a2 00		ldx #$00			ldx 	#0
.155d	b1 28		lda ($28),y			lda 	(codePtr),y
.155f	95 50		sta $50,x			sta 	esInt0,x
.1561	c8		iny				iny
.1562	b1 28		lda ($28),y			lda 	(codePtr),y
.1564	95 58		sta $58,x			sta 	esInt1,x
.1566	a9 00		lda #$00			lda 	#0
.1568	95 60		sta $60,x			sta 	esInt2,x
.156a	95 68		sta $68,x			sta 	esInt3,x
.156c	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.156e	85 2a		sta $2a				sta 	temp0
.1570	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.1572	85 2b		sta $2b				sta 	1+(temp0)
.1574	a0 0a		ldy #$0a			ldy 	#10 						; in base 10.
.1576	a9 00		lda #$00			lda 	#0							; stack position zero.
.1578	a2 12		ldx #$12		ldx	#18
.157a	20 ff 34	jsr $34ff		jsr	mainHandler
.157d	20 49 18	jsr $1849			jsr 	EHPrintAscii
.1580					_EHNoLine:
.1580	a2 06		ldx #$06		ldx	#6
.1582	20 f6 14	jsr $14f6		jsr	deviceHandler
.1585	a2 04		ldx #$04		ldx	#4
.1587	20 65 1e	jsr $1e65		jsr	interactionHandler
.158a					EHAtMsg:
>158a	03 20 40 20					.text 	3," @ "

;******  Processing file: error/../generated/errortext.inc

.158e					ErrorTextList:
>158e	13 46 65 61 74 75 72 65			.text 19,"Feature not Present"
>1596	20 6e 6f 74 20 50 72 65 73 65 6e 74
>15a2	0c 53 79 6e 74 61 78 20			.text 12,"Syntax Error"
>15aa	45 72 72 6f 72
>15af	0f 4d 6f 64 75 6c 65 20			.text 15,"Module disabled"
>15b7	64 69 73 61 62 6c 65 64
>15bf	10 41 73 73 65 72 74 69			.text 16,"Assertion failed"
>15c7	6f 6e 20 66 61 69 6c 65 64
>15d0	0e 44 69 76 69 64 65 20			.text 14,"Divide By Zero"
>15d8	42 79 20 5a 65 72 6f
>15df	04 53 74 6f 70				.text 4,"Stop"
>15e4	0d 54 79 70 65 20 4d 69			.text 13,"Type Mismatch"
>15ec	73 6d 61 74 63 68
>15f2	0d 49 6c 6c 65 67 61 6c			.text 13,"Illegal Value"
>15fa	20 56 61 6c 75 65
>1600	15 4d 69 73 73 69 6e 67			.text 21,"Missing right bracket"
>1608	20 72 69 67 68 74 20 62 72 61 63 6b 65 74
>1616	0d 4d 69 73 73 69 6e 67			.text 13,"Missing comma"
>161e	20 63 6f 6d 6d 61
>1624	11 4d 69 73 73 69 6e 67			.text 17,"Missing reference"
>162c	20 72 65 66 65 72 65 6e 63 65
>1636	15 4c 69 6e 65 20 4e 75			.text 21,"Line Number not found"
>163e	6d 62 65 72 20 6e 6f 74 20 66 6f 75 6e 64
>164c	0f 53 74 72 69 6e 67 20			.text 15,"String too long"
>1654	74 6f 6f 20 6c 6f 6e 67
>165c	14 52 45 54 55 52 4e 20			.text 20,"RETURN without GOSUB"
>1664	77 69 74 68 6f 75 74 20 47 4f 53 55 42
>1671	14 55 4e 54 49 4c 20 77			.text 20,"UNTIL without REPEAT"
>1679	69 74 68 6f 75 74 20 52 45 50 45 41 54
>1686	10 4e 45 58 54 20 77 69			.text 16,"NEXT without FOR"
>168e	74 68 6f 75 74 20 46 4f 52
>1697	12 57 45 4e 44 20 77 69			.text 18,"WEND without WHILE"
>169f	74 68 6f 75 74 20 57 48 49 4c 45
>16aa	14 45 4e 44 50 52 4f 43			.text 20,"ENDPROC without PROC"
>16b2	20 77 69 74 68 6f 75 74 20 50 52 4f 43
>16bf	0e 42 61 64 20 4e 45 58			.text 14,"Bad NEXT index"
>16c7	54 20 69 6e 64 65 78
>16ce	17 53 74 72 75 63 74 75			.text 23,"Structures nested wrong"
>16d6	72 65 73 20 6e 65 73 74 65 64 20 77 72 6f 6e 67
>16e6	16 43 61 6e 6e 6f 74 20			.text 22,"Cannot create variable"
>16ee	63 72 65 61 74 65 20 76 61 72 69 61 62 6c 65
>16fd	19 52 65 74 75 72 6e 20			.text 25,"Return stack out of space"
>1705	73 74 61 63 6b 20 6f 75 74 20 6f 66 20 73 70 61
>1715	63 65
>1717	11 55 6e 6b 6e 6f 77 6e			.text 17,"Unknown Procedure"
>171f	20 50 72 6f 63 65 64 75 72 65
>1729	17 50 61 72 61 6d 65 74			.text 23,"Parameters do not match"
>1731	65 72 73 20 64 6f 20 6e 6f 74 20 6d 61 74 63 68
>1741	15 41 72 72 61 79 20 61			.text 21,"Array already defined"
>1749	6c 72 65 61 64 79 20 64 65 66 69 6e 65 64
>1757	12 44 49 4d 20 72 65 71			.text 18,"DIM requires array"
>175f	75 69 72 65 73 20 61 72 72 61 79
>176a	0f 42 61 64 20 61 72 72			.text 15,"Bad array index"
>1772	61 79 20 69 6e 64 65 78
>177a	1d 57 72 6f 6e 67 20 6e			.text 29,"Wrong number of array indices"
>1782	75 6d 62 65 72 20 6f 66 20 61 72 72 61 79 20 69
>1792	6e 64 69 63 65 73
>1798	0b 4f 75 74 20 6f 66 20			.text 11,"Out of data"
>17a0	64 61 74 61
>17a4	14 43 61 6e 6e 6f 74 20			.text 20,"Cannot tokenise line"
>17ac	74 6f 6b 65 6e 69 73 65 20 6c 69 6e 65
>17b9	0b 53 61 76 65 20 66 61			.text 11,"Save failed"
>17c1	69 6c 65 64
>17c5	0b 4c 6f 61 64 20 66 61			.text 11,"Load failed"
>17cd	69 6c 65 64
>17d1	05 42 72 65 61 6b			.text 5,"Break"
>17d7	0d 4f 75 74 20 6f 66 20			.text 13,"Out of memory"
>17df	6d 65 6d 6f 72 79
>17e5	16 45 78 70 72 65 73 73			.text 22,"Expression too complex"
>17ed	69 6f 6e 20 74 6f 6f 20 63 6f 6d 70 6c 65 78
>17fc	10 42 61 64 20 4f 70 65			.text 16,"Bad Operand/Mode"
>1804	72 61 6e 64 2f 4d 6f 64 65
>180d	13 42 72 61 6e 63 68 20			.text 19,"Branch out of range"
>1815	6f 75 74 20 6f 66 20 72 61 6e 67 65
>1821	13 4c 61 62 65 6c 20 63			.text 19,"Label changed value"
>1829	68 61 6e 67 65 64 20 76 61 6c 75 65
>1835	12 4e 6f 20 53 70 72 69			.text 18,"No Sprite Selected"
>183d	74 65 20 53 65 6c 65 63 74 65 64
>1848	00					.byte 0

;******  Return to file: error/errorhandler.asm

.1849					EHPrintAscii:
.1849	a0 00		ldy #$00			ldy 	#0
.184b	b1 2a		lda ($2a),y			lda 	(temp0),y
.184d	aa		tax				tax
.184e	f0 0f		beq $185f			beq 	_EHPExit
.1850					_EHPLoop:
.1850	c8		iny				iny
.1851	8a		txa				txa
.1852	48		pha				pha
.1853	b1 2a		lda ($2a),y			lda 	(temp0),y
.1855	a2 16		ldx #$16		ldx	#22
.1857	20 f6 14	jsr $14f6		jsr	deviceHandler
.185a	68		pla				pla
.185b	aa		tax				tax
.185c	ca		dex				dex
.185d	d0 f1		bne $1850			bne 	_EHPLoop
.185f					_EHPExit:
.185f	60		rts				rts

;******  Return to file: error/error.asm


;******  Return to file: basic.asm

.1860					section_end_error:
.1860					section_start_extension:

;******  Processing file: extension/extension.asm


;******  Processing file: extension/extensionhandler.asm

.1860					ExtensionHandler:
.1860	c9 fe		cmp #$fe			cmp 	#$FE 						; check for force mode 0
.1862	f0 16		beq $187a			beq 	_ExtensionForce
.1864	c9 ff		cmp #$ff			cmp 	#$FF						; A = $FF command, otherwise unary function stack level.
.1866	d0 08		bne $1870			bne 	_ExtensionUnary 			; is passed in A.
.1868	b1 28		lda ($28),y			lda 	(codePtr),y 				; so this is a command, using Group 2.
.186a	c8		iny				iny
.186b	0a		asl a				asl 	a
.186c	aa		tax				tax
.186d	7c 71 18	jmp ($1871,x)			jmp 	(Group2Vectors-12,x)
.1870					_ExtensionUnary:
.1870	48		pha				pha 								; save stack pos in A
.1871	b1 28		lda ($28),y			lda 	(codePtr),y 				; get shifted token, double into X
.1873	c8		iny				iny
.1874	0a		asl a				asl 	a
.1875	aa		tax				tax
.1876	68		pla				pla 								; restore stack pos and call group3 command.
.1877	7c 7d 18	jmp ($187d,x)			jmp 	(Group3Vectors-12,X)
.187a					_ExtensionForce:
.187a	4c 95 18	jmp $1895			jmp 	ForceMode0

;******  Processing file: extension/../generated/tokenvectors2.inc

.187d					Group2Vectors:
>187d	34 1b					.word	Command_VPoke            ; $86 vpoke
>187f	37 1b					.word	Command_VDoke            ; $87 vdoke
>1881	0c 1b					.word	Command_VLoad            ; $88 vload
>1883	a7 18					.word	CommandMode              ; $89 mode
>1885	52 19					.word	CommandPalette           ; $8a palette
>1887	89 19					.word	CommandSprite            ; $8b sprite

;******  Return to file: extension/extensionhandler.asm


;******  Processing file: extension/../generated/tokenvectors3.inc

.1889					Group3Vectors:
>1889	80 1b					.word	Command_VPeek            ; $86 vpeek(
>188b	83 1b					.word	Command_VDeek            ; $87 vdeek(

;******  Return to file: extension/extensionhandler.asm

.188d					XEvaluateInteger:
.188d	8a		txa				txa
.188e	a2 0a		ldx #$0a		ldx	#10
.1890	20 ff 34	jsr $34ff		jsr	mainHandler
.1893	aa		tax				tax
.1894	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/mode.asm

.0be6					currentMode:
>0be6							.fill 	4
.1895					ForceMode0:
.1895	a2 00		ldx #$00			ldx 	#0
.1897	86 50		stx $50				stx 	esInt0 						; in case we do it.
.1899					_FMCheck:
.1899	bd 26 19	lda $1926,x			lda 	CMModeList,x 				; do we need to switch ?
.189c	dd e6 0b	cmp $0be6,x			cmp 	currentMode,x
.189f	d0 13		bne $18b4			bne 	CMSetMode 					; different so switch.
.18a1	e8		inx				inx
.18a2	e0 04		cpx #$04			cpx 	#4
.18a4	d0 f3		bne $1899			bne 	_FMCheck
.18a6	60		rts				rts
.18a7					CommandMode:
.18a7	a9 00		lda #$00			lda 	#0
.18a9	a2 0a		ldx #$0a		ldx	#10
.18ab	20 ff 34	jsr $34ff		jsr	mainHandler
.18ae	a5 68		lda $68				lda 	esInt3
.18b0	29 70		and #$70			and 	#$70
.18b2	d0 06		bne $18ba			bne 	CMNoExpand
.18b4					CMSetMode:
.18b4	20 05 19	jsr $1905			jsr 	CMExpandMode
.18b7	4c ce 18	jmp $18ce			jmp 	CMUpdateMode
.18ba					CMNoExpand:
.18ba	a5 50		lda $50				lda 	esInt0
.18bc	8d e6 0b	sta $0be6			sta 	currentMode
.18bf	a5 58		lda $58				lda 	esInt1
.18c1	8d e7 0b	sta $0be7			sta 	currentMode+1
.18c4	a5 60		lda $60				lda 	esInt2
.18c6	8d e8 0b	sta $0be8			sta 	currentMode+2
.18c9	a5 68		lda $68				lda 	esInt3
.18cb	8d e9 0b	sta $0be9			sta 	currentMode+3
.18ce					CMUpdateMode:
.18ce	a2 11		ldx #$11			ldx 	#$11
.18d0					_CMClear:
.18d0	a9 00		lda #$00			lda 	#0
.18d2	9d 29 9f	sta $9f29,x			sta 	$9F29,X
.18d5	ca		dex				dex
.18d6	10 f8		bpl $18d0			bpl 	_CMClear
.18d8	ad e9 0b	lda $0be9			lda 	currentMode+3 				; get current mode
.18db	48		pha				pha 								; stack twice.
.18dc	48		pha				pha
.18dd	29 70		and #$70			and 	#$70 						; isolates bits 6,5,4 (sprites,L1 enable,L0 enable)
.18df	09 01		ora #$01			ora 	#$01 						; turn the output on.
.18e1	8d 29 9f	sta $9f29			sta 	$9F29 						; write to DC_VIDEO
.18e4	68		pla				pla 								; get back
.18e5	20 2a 19	jsr $192a			jsr 	CMToScale 					; convert lower 2 bits to a scale.
.18e8	8d 2a 9f	sta $9f2a			sta 	$9F2A 						; write to H-Scale
.18eb	68		pla				pla 								; get back, convert bits 2,3 to a scale.
.18ec	4a		lsr a				lsr 	a
.18ed	4a		lsr a				lsr 	a
.18ee	20 2a 19	jsr $192a			jsr 	CMToScale 					; convert lower 2 bits to a scale.
.18f1	8d 2b 9f	sta $9f2b			sta 	$9F2B
.18f4	a2 00		ldx #$00			ldx 	#0 							; this is offset from $9F2D to do L0
.18f6	ad e6 0b	lda $0be6			lda 	currentMode					; get L0 config byte
.18f9	20 35 19	jsr $1935			jsr 	CMDecodeLayer 				; and decode layer 0
.18fc	a2 07		ldx #$07			ldx 	#7 							; when we do layer 1, offset by 7 hence starts at $9F34
.18fe	ad e7 0b	lda $0be7			lda 	currentMode+1
.1901	20 35 19	jsr $1935			jsr 	CMDecodeLayer
.1904	60		rts				rts
.1905					CMExpandMode:
.1905	a5 50		lda $50				lda 	esInt0 						; get mode number
.1907	c9 01		cmp #$01			cmp 	#(CMEndModeList-CMModeList) >> 2
.1909	b0 16		bcs $1921			bcs 	_CMModeError
.190b	0a		asl a				asl 	a 							; x 4 into X
.190c	0a		asl a				asl 	a
.190d	aa		tax				tax
.190e	98		tya				tya
.190f	48		pha				pha
.1910	a0 00		ldy #$00			ldy 	#0
.1912					_CMEMCopy:
.1912	bd 26 19	lda $1926,x			lda 	CMModeList,x
.1915	99 e6 0b	sta $0be6,y			sta 	currentMode,y
.1918	e8		inx				inx
.1919	c8		iny				iny
.191a	c0 04		cpy #$04			cpy 	#4
.191c	d0 f4		bne $1912			bne 	_CMEMCopy
.191e	68		pla				pla
.191f	a8		tay				tay
.1920	60		rts				rts
.1921					_CMModeError:
.1921	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.1923	20 18 15	jsr $1518		jsr	errorHandler
.1926					CMModeList:
>1926	00 60 00 20					.dword	$20006000 					; Mode 0 which is the standard 80x60 mode, no sprites
.192a					CMEndModeList:
.192a					CMToScale:
.192a	29 03		and #$03			and 	#3 							; lower 2 bits only
.192c	aa		tax				tax 								; put in X for counting
.192d	a9 00		lda #$00			lda 	#0 							; zero result
.192f	38		sec				sec 								; first time rotate CS in
.1930					_CMTSLoop:
.1930	6a		ror a				ror 	a
.1931	ca		dex				dex
.1932	10 fc		bpl $1930			bpl 	_CMTSLoop
.1934	60		rts				rts
.1935					CMDecodeLayer:
.1935	48		pha				pha 								; save it.
.1936	29 f7		and #$f7			and 	#$F7 						; all the bits except T256C which you can't set using this
.1938	9d 2d 9f	sta $9f2d,x			sta 	$9F2D,X
.193b	68		pla				pla 								; get it back
.193c	29 08		and #$08			and 	#$08 						; the missing bit sets the tile size.
.193e	f0 02		beq $1942			beq 	_CMDLNotSet
.1940	a9 03		lda #$03			lda 	#$03 						; which sets both lower bits, they're square.
.1942					_CMDLNotSet:
.1942	e0 00		cpx #$00			cpx 	#0
.1944	f0 06		beq $194c			beq 	_CMDLayer0 					; layer 1 has standard defaults for tile table, e.g. $7C
.1946	09 7c		ora #$7c			ora 	#$7C 						; so set those bits and write it out.
.1948	9d 2f 9f	sta $9f2f,x			sta 	$9F2F,X
.194b	60		rts				rts
.194c					_CMDLayer0:
.194c	09 80		ora #$80			ora 	#$80 						; tile base is $80
.194e	9d 2f 9f	sta $9f2f,x			sta 	$9F2F,X
.1951	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/palette.asm

.1952					CommandPalette:
.1952	a9 00		lda #$00			lda 	#0
.1954	a2 0c		ldx #$0c		ldx	#12
.1956	20 ff 34	jsr $34ff		jsr	mainHandler
.1959	a2 02		ldx #$02		ldx	#2
.195b	20 ff 34	jsr $34ff		jsr	mainHandler
.195e	a9 01		lda #$01			lda 	#1
.1960	a2 08		ldx #$08		ldx	#8
.1962	20 ff 34	jsr $34ff		jsr	mainHandler
.1965	a5 50		lda $50				lda 	esInt0 					; get palette #
.1967	20 77 19	jsr $1977			jsr 	PointToPaletteA			; point to palette register
.196a	a5 51		lda $51				lda 	esInt0+1
.196c	8d 23 9f	sta $9f23			sta 	$9F23
.196f	a5 59		lda $59				lda 	esInt1+1
.1971	29 0f		and #$0f			and 	#$0F
.1973	8d 23 9f	sta $9f23			sta 	$9F23
.1976	60		rts				rts
.1977					PointToPaletteA:
.1977	0a		asl a				asl 	a 							; x 2 -> LSB
.1978	8d 20 9f	sta $9f20			sta 	$9F20
.197b	a9 00		lda #$00			lda 	#0 							; carry into A
.197d	2a		rol a				rol 	a
.197e	09 fa		ora #$fa			ora 	#$FA 						; make correct address
.1980	8d 21 9f	sta $9f21			sta 	$9F21
.1983	a9 11		lda #$11			lda 	#$11 						; $01 and single step => $9F22
.1985	8d 22 9f	sta $9f22			sta 	$9F22
.1988	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/sprite.asm

.0bea					currSprite:
>0bea							.fill 	2
.1989					CommandSprite:
.1989	20 9d 1a	jsr $1a9d			jsr 	CSCheckOnOff 				; look for TRUE/FALSE
.198c	d0 0d		bne $199b			bne 	_CSCheckClear
.198e	ad 29 9f	lda $9f29			lda 	$9F29 						; sprite enable is bit 6.
.1991	29 bf		and #$bf			and 	#$BF 						; clear it whatever
.1993	90 02		bcc $1997			bcc 	_CSNotOn 					; if CS turn on, so set it
.1995	09 40		ora #$40			ora 	#$40
.1997					_CSNotOn:
.1997	8d 29 9f	sta $9f29			sta 	$9F29 						; write it back in new state and exit
.199a	60		rts				rts
.199b					_CSCheckClear:
.199b	a9 00		lda #$00			lda 	#0 							; no sprite currently selected.
.199d	8d eb 0b	sta $0beb			sta 	currSprite+1
.19a0	b1 28		lda ($28),y			lda 	(codePtr),y 				; check for CLEAR
.19a2	c9 e7		cmp #$e7			cmp 	#TKW_CLEAR
.19a4	d0 05		bne $19ab			bne 	_CSCommandLoop 				; not CLEAR, go to main loop
.19a6	20 ae 1a	jsr $1aae			jsr 	CSClearSprites 				; clear all the sprites
.19a9	c8		iny				iny 								; consume CLEAR token and exit.
.19aa	60		rts				rts
.19ab					_CSCommandLoop:
.19ab	20 9d 1a	jsr $1a9d			jsr 	CSCheckOnOff 				; check sprite on/off
.19ae	f0 40		beq $19f0			beq 	_CSSetVisibility
.19b0	b1 28		lda ($28),y			lda 	(codePtr),y 				; get and consume character
.19b2	c9 80		cmp #$80			cmp 	#TOK_EOL					; EOL exit.
.19b4	f0 39		beq $19ef			beq 	_CSExit
.19b6	c8		iny				iny									; consume it
.19b7	c9 ca		cmp #$ca			cmp 	#TKW_COLON 					; colon exit
.19b9	f0 34		beq $19ef			beq 	_CSExit
.19bb	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; semantic comma
.19bd	f0 ec		beq $19ab			beq 	_CSCommandLoop
.19bf	c9 da		cmp #$da			cmp		#TKW_IMAGE 					; image ?
.19c1	f0 7d		beq $1a40			beq 	_CSSetImage
.19c3	c9 dc		cmp #$dc			cmp 	#TKW_FLIP 					; flip ?
.19c5	f0 3f		beq $1a06			beq 	_CSSetFlip
.19c7	c9 ce		cmp #$ce			cmp 	#TKW_TO 					; to ?
.19c9	f0 5a		beq $1a25			beq 	_CSSetPos
.19cb	88		dey				dey 								; unpick DEY
.19cc	a9 00		lda #$00			lda 	#0 							; sprite # now at level 0
.19ce	a2 0c		ldx #$0c		ldx	#12
.19d0	20 ff 34	jsr $34ff		jsr	mainHandler
.19d3	06 50		asl $50				asl		esInt0 						; multiply A:esInt0 by 8
.19d5	b0 13		bcs $19ea			bcs 	_CSBadValue 				; sprites only 0-127
.19d7	06 50		asl $50				asl 	esInt0
.19d9	2a		rol a				rol 	a
.19da	06 50		asl $50				asl 	esInt0
.19dc	2a		rol a				rol 	a
.19dd	09 fc		ora #$fc			ora 	#$FC 						; MSB of address (barring $01 upper third byte)
.19df	8d eb 0b	sta $0beb			sta 	currSprite+1
.19e2	a5 50		lda $50				lda 	esInt0 						; LSB of address
.19e4	8d ea 0b	sta $0bea			sta 	currSprite+0
.19e7	4c ab 19	jmp $19ab			jmp 	_CSCommandLoop
.19ea					_CSBadValue
.19ea	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.19ec	20 18 15	jsr $1518		jsr	errorHandler
.19ef					_CSExit:
.19ef	60		rts				rts
.19f0					_CSSetVisibility:
.19f0	08		php				php 								; save carry
.19f1	a9 06		lda #$06			lda 	#6 							; set pos to offset 6.
.19f3	20 84 1a	jsr $1a84			jsr 	SpriteSetTarget
.19f6	ad 23 9f	lda $9f23			lda 	$9F23 						; read it.
.19f9	29 f3		and #$f3			and 	#$F3 						; clear depth bits, disabling it.
.19fb	28		plp				plp
.19fc	90 02		bcc $1a00			bcc 	_CSSetOff 					; check if carry was set
.19fe	09 0c		ora #$0c			ora 	#$0C 						; otherwise set depth bits to 11, on top.
.1a00					_CSSetOff:
.1a00	8d 23 9f	sta $9f23			sta 	$9F23 						; update and loop back
.1a03	4c ab 19	jmp $19ab			jmp 	_CSCommandLoop
.1a06					_CSSetFlip:
.1a06	a9 00		lda #$00			lda 	#0 							; image # now at level 0
.1a08	a2 0c		ldx #$0c		ldx	#12
.1a0a	20 ff 34	jsr $34ff		jsr	mainHandler
.1a0d	a9 06		lda #$06			lda 	#6 							; set sprite position to +6
.1a0f	20 84 1a	jsr $1a84			jsr 	SpriteSetTarget
.1a12	a5 50		lda $50				lda 	esInt0 						; flip value & 3 => temp0
.1a14	29 03		and #$03			and 	#3
.1a16	85 2a		sta $2a				sta 	temp0
.1a18	ad 23 9f	lda $9f23			lda 	$9F23 						; update the flip.
.1a1b	29 fc		and #$fc			and 	#$FC
.1a1d	05 2a		ora $2a				ora 	temp0
.1a1f	8d 23 9f	sta $9f23			sta 	$9F23
.1a22	4c ab 19	jmp $19ab			jmp 	_CSCommandLoop
.1a25					_CSSetPos:
.1a25	a9 00		lda #$00			lda 	#0 							; X now at level 0
.1a27	a2 0a		ldx #$0a		ldx	#10
.1a29	20 ff 34	jsr $34ff		jsr	mainHandler
.1a2c	a2 02		ldx #$02		ldx	#2
.1a2e	20 ff 34	jsr $34ff		jsr	mainHandler
.1a31	a9 01		lda #$01			lda 	#1 							; Y now at level 1
.1a33	a2 0a		ldx #$0a		ldx	#10
.1a35	20 ff 34	jsr $34ff		jsr	mainHandler
.1a38	a2 00		ldx #$00			ldx 	#0 							; coords at 0,1
.1a3a	20 c8 1a	jsr $1ac8			jsr 	SpriteMove 					; move it.
.1a3d	4c ab 19	jmp $19ab			jmp 	_CSCommandLoop
.1a40					_CSSetImage:
.1a40	a9 00		lda #$00			lda 	#0 							; image # now at level 0
.1a42	a2 0c		ldx #$0c		ldx	#12
.1a44	20 ff 34	jsr $34ff		jsr	mainHandler
.1a47	a9 00		lda #$00			lda 	#0 							; set sprite position to +0
.1a49	20 84 1a	jsr $1a84			jsr 	SpriteSetTarget
.1a4c	a6 50		ldx $50				ldx 	esInt0 						; get image # into X
.1a4e	bd 2d 0c	lda $0c2d,x			lda 	imageAddr2Low,x 			; copy low address in.
.1a51	8d 23 9f	sta $9f23			sta 	$9F23
.1a54	ee 20 9f	inc $9f20			inc 	$9F20 						; bump to offset 1.
.1a57	bd ed 0b	lda $0bed,x			lda 	imageInfo,x 				; get 4/8 bit flag from info.
.1a5a	29 10		and #$10			and 	#$10
.1a5c	0a		asl a				asl 	a
.1a5d	0a		asl a				asl		a
.1a5e	0a		asl a				asl 	a 							; put into bit 7
.1a5f	1d 6d 0c	ora $0c6d,x			ora 	imageAddr2High,x 			; or high address with it.
.1a62	8d 23 9f	sta $9f23			sta 	$9F23 						; write the high byte.
.1a65	a9 06		lda #$06			lda 	#6
.1a67	20 84 1a	jsr $1a84			jsr 	SpriteSetTarget 			; set sprite on.
.1a6a	ad 23 9f	lda $9f23			lda 	$9F23
.1a6d	09 0c		ora #$0c			ora 	#$0C
.1a6f	8d 23 9f	sta $9f23			sta 	$9F23
.1a72	ee 20 9f	inc $9f20			inc 	$9F20 						; point to byte 7 : height/width/palette offset
.1a75	bd ed 0b	lda $0bed,x			lda 	imageInfo,x 				; get image info
.1a78	0a		asl a				asl 	a 							; shift bits 0-3 to 4-7
.1a79	0a		asl a				asl 	a
.1a7a	0a		asl a				asl 	a
.1a7b	0a		asl a				asl 	a
.1a7c	09 0f		ora #$0f			ora 	#$0F 						; set palette offset and write back
.1a7e	8d 23 9f	sta $9f23			sta 	$9F23
.1a81	4c ab 19	jmp $19ab			jmp 	_CSCommandLoop
.1a84					SpriteSetTarget:
.1a84	0d ea 0b	ora $0bea			ora 	currSprite
.1a87	8d 20 9f	sta $9f20			sta 	$9F20
.1a8a	ad eb 0b	lda $0beb			lda 	currSprite+1
.1a8d	f0 09		beq $1a98			beq 	_SSTNoSet
.1a8f	8d 21 9f	sta $9f21			sta 	$9F21
.1a92	a9 01		lda #$01			lda 	#$01
.1a94	8d 22 9f	sta $9f22			sta 	$9F22
.1a97	60		rts				rts
.1a98					_SSTNoSet:
.1a98	a2 27		ldx #$27			ldx 	#ErrorID_NoSprite
.1a9a	20 18 15	jsr $1518		jsr	errorHandler
.1a9d					CSCheckOnOff:
.1a9d	b1 28		lda ($28),y			lda 	(codePtr),y 				; get and consume it.
.1a9f	c8		iny				iny
.1aa0	c9 ab		cmp #$ab			cmp 	#TKW_FALSE					; return CC/EQ if FALSE
.1aa2	18		clc				clc
.1aa3	f0 08		beq $1aad			beq 	_CSCOExit
.1aa5	c9 aa		cmp #$aa			cmp 	#TKW_TRUE 					; return CS/EQ if TRUE
.1aa7	38		sec				sec 								; return NE if neither.
.1aa8	f0 03		beq $1aad			beq 	_CSCOExit
.1aaa	88		dey				dey 								; undo consume
.1aab	c9 aa		cmp #$aa			cmp 	#TKW_TRUE 					; and set NE again, DEY will change it.
.1aad					_CSCOExit:
.1aad	60		rts				rts
.1aae					CSClearSprites:
.1aae	a9 11		lda #$11			lda 	#$11 						; set address to 1FC00 with single bump
.1ab0	8d 22 9f	sta $9f22			sta 	$9F22
.1ab3	a9 fc		lda #$fc			lda 	#$FC
.1ab5	8d 21 9f	sta $9f21			sta 	$9F21
.1ab8	a9 00		lda #$00			lda 	#0
.1aba	8d 20 9f	sta $9f20			sta 	$9F20
.1abd					_CSClear:
.1abd	a9 00		lda #$00			lda 	#0 							; set everything to $00
.1abf	8d 23 9f	sta $9f23			sta 	$9F23
.1ac2	ad 21 9f	lda $9f21			lda 	$9F21
.1ac5	d0 f6		bne $1abd			bne 	_CSClear
.1ac7	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/spritemove.asm

.1ac8					SpriteMove:
.1ac8	98		tya				tya
.1ac9	48		pha				pha
.1aca	a9 07		lda #$07			lda 	#7 									; point to height/width byte and read it.
.1acc	20 84 1a	jsr $1a84			jsr 	SpriteSetTarget
.1acf	ad 23 9f	lda $9f23			lda 	$9F23
.1ad2	4a		lsr a				lsr 	a 									; A now contains bits 0-1 (width) 2-3 (height)
.1ad3	4a		lsr a				lsr 	a
.1ad4	4a		lsr a				lsr 	a
.1ad5	4a		lsr a				lsr 	a
.1ad6	85 2a		sta $2a				sta 	temp0 								; save these bits so we can work out the centre.
.1ad8	a9 02		lda #$02			lda 	#2 									; point to X position.Low
.1ada	20 84 1a	jsr $1a84			jsr 	SpriteSetTarget
.1add	20 ec 1a	jsr $1aec			jsr 	_SMWritePosition 					; write X position out.
.1ae0	46 2a		lsr $2a				lsr 	temp0 								; shift height bits into 0,1
.1ae2	46 2a		lsr $2a				lsr 	temp0
.1ae4	e8		inx				inx 										; get the y position
.1ae5	20 ec 1a	jsr $1aec			jsr 	_SMWritePosition 					; and write that out.
.1ae8	ca		dex				dex 										; fix X and quit.
.1ae9	68		pla				pla
.1aea	a8		tay				tay
.1aeb	60		rts				rts
.1aec					_SMWritePosition:
.1aec	a5 2a		lda $2a				lda 	temp0 								; get dim size
.1aee	29 03		and #$03			and 	#3 									; in range into Y
.1af0	a8		tay				tay
.1af1	38		sec				sec
.1af2	b5 50		lda $50,x			lda 	esInt0,x
.1af4	f9 08 1b	sbc $1b08,y			sbc 	_SMHalfSize,y
.1af7	8d 23 9f	sta $9f23			sta 	$9F23
.1afa	ee 20 9f	inc $9f20			inc 	$9F20
.1afd	b5 58		lda $58,x			lda 	esInt1,x
.1aff	e9 00		sbc #$00			sbc 	#0
.1b01	8d 23 9f	sta $9f23			sta 	$9F23
.1b04	ee 20 9f	inc $9f20			inc 	$9F20
.1b07	60		rts				rts
.1b08					_SMHalfSize:
>1b08	04 08 10 20					.byte 	4,8,16,32 							; half size each dimension.

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/vload.asm

.1b0c					Command_VLoad:
.1b0c	a9 00		lda #$00			lda 	#0 								; string which is the file name
.1b0e	a2 0e		ldx #$0e		ldx	#14
.1b10	20 ff 34	jsr $34ff		jsr	mainHandler
.1b13	a2 01		ldx #$01			ldx 	#1 								; load address at +1.
.1b15	a5 35		lda $35				lda 	lowMemory 						; load it into lowMemory (for now ?)
.1b17	95 50		sta $50,x			sta 	esInt0,x
.1b19	a5 36		lda $36				lda 	lowMemory+1
.1b1b	95 58		sta $58,x			sta 	esInt1,x
.1b1d	a9 00		lda #$00			lda 	#0
.1b1f	95 60		sta $60,x			sta 	esInt2,x
.1b21	95 68		sta $68,x			sta 	esInt3,x
.1b23	a2 0e		ldx #$0e		ldx	#14
.1b25	20 f6 14	jsr $14f6		jsr	deviceHandler
.1b28	a5 51		lda $51				lda 	esInt0+1 						; (temp0) is where we are decoding from.
.1b2a	85 2a		sta $2a				sta 	temp0
.1b2c	a5 59		lda $59				lda 	esInt1+1
.1b2e	85 2b		sta $2b				sta 	temp0+1
.1b30	20 ac 1b	jsr $1bac			jsr 	LoadVRAMFile 					; load the VRAM file in.
.1b33	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/vpeekpoke.asm

.1b34					Command_VPoke:
.1b34	38		sec				sec 						; one byte , CS
.1b35	b0 01		bcs $1b38			bcs 	CmdVideoWrite
.1b37					Command_VDoke:
.1b37	18		clc				clc 						; two bytes, CC
.1b38					CmdVideoWrite:
.1b38	08		php				php 						; save one or two btes
.1b39	a9 00		lda #$00			lda 	#0  				; get address and value into levels 0,1
.1b3b	a2 0a		ldx #$0a		ldx	#10
.1b3d	20 ff 34	jsr $34ff		jsr	mainHandler
.1b40	a2 02		ldx #$02		ldx	#2
.1b42	20 ff 34	jsr $34ff		jsr	mainHandler
.1b45	a9 01		lda #$01			lda 	#1
.1b47	a2 0a		ldx #$0a		ldx	#10
.1b49	20 ff 34	jsr $34ff		jsr	mainHandler
.1b4c	a2 00		ldx #$00			ldx 	#0
.1b4e	20 5f 1b	jsr $1b5f			jsr 	SetUpTOSVRamAddress ; copy target address to VRAM address registers
.1b51	a5 51		lda $51				lda 	esInt0+1 			; get MSB of write value
.1b53	8d 23 9f	sta $9f23			sta 	$9F23
.1b56	28		plp				plp 						; if it was Poke then exit
.1b57	b0 05		bcs $1b5e			bcs 	_CVWExit
.1b59	a5 59		lda $59				lda 	esInt1+1 			; doke, write the MSB.
.1b5b	8d 23 9f	sta $9f23			sta 	$9F23
.1b5e					_CVWExit:
.1b5e	60		rts				rts
.1b5f					SetUpTOSVRamAddress:
.1b5f	b5 60		lda $60,x			lda 	esInt2,x 			; check range of address, data to $FFFF
.1b61	29 fe		and #$fe			and 	#$FE
.1b63	15 68		ora $68,x			ora 	esInt3,x
.1b65	d0 14		bne $1b7b			bne 	CVWValue
.1b67	b5 50		lda $50,x			lda 	esInt0,x			; set address up
.1b69	8d 20 9f	sta $9f20			sta 	$9F20
.1b6c	b5 58		lda $58,x			lda 	esInt1,x
.1b6e	8d 21 9f	sta $9f21			sta	 	$9F21
.1b71	b5 60		lda $60,x			lda 	esInt2,x
.1b73	29 01		and #$01			and 	#1
.1b75	09 10		ora #$10			ora 	#$10 				; step 1.
.1b77	8d 22 9f	sta $9f22			sta 	$9F22
.1b7a	60		rts				rts
.1b7b					CVWValue:
.1b7b	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.1b7d	20 18 15	jsr $1518		jsr	errorHandler
.1b80					Command_VPeek:
.1b80	38		sec				sec 						; one byte , CS
.1b81	b0 01		bcs $1b84			bcs 	CmdVideoRead
.1b83					Command_VDeek:
.1b83	18		clc				clc 						; two bytes, CC
.1b84					CmdVideoRead:
.1b84	08		php				php 						; save action on stack.
.1b85	48		pha				pha 						; save stack position
.1b86	a2 0a		ldx #$0a		ldx	#10
.1b88	20 ff 34	jsr $34ff		jsr	mainHandler
.1b8b	a2 04		ldx #$04		ldx	#4
.1b8d	20 ff 34	jsr $34ff		jsr	mainHandler
.1b90	68		pla				pla
.1b91	aa		tax				tax
.1b92	20 5f 1b	jsr $1b5f			jsr 	SetUpTOSVRamAddress	; set up VRAM address.
.1b95	a9 00		lda #$00			lda 	#0 					; zero upper 3 bytes
.1b97	95 58		sta $58,x			sta 	esInt1,x
.1b99	95 60		sta $60,x			sta 	esInt2,x
.1b9b	95 68		sta $68,x			sta 	esInt3,x
.1b9d	ad 23 9f	lda $9f23			lda 	$9F23				; copy 1st byte
.1ba0	95 50		sta $50,x			sta 	esInt0,x
.1ba2	28		plp				plp 						; check if DOKE (carry was clear)
.1ba3	b0 05		bcs $1baa			bcs 	_CVRExit
.1ba5	ad 23 9f	lda $9f23			lda 	$9F23 				; copy 2nd byte
.1ba8	95 58		sta $58,x			sta 	esInt1,x
.1baa					_CVRExit:
.1baa	8a		txa				txa 						; return X position.
.1bab	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/vramprocess.asm

.0bec					compressMode:
>0bec							.fill 	1
.0bed					imageInfo:
>0bed							.fill 	X16MaxImages
.0c2d					imageAddr2Low:
>0c2d							.fill  	X16MaxImages
.0c6d					imageAddr2High:
>0c6d							.fill  	X16MaxImages
.1bac					LoadVRAMFile:
.1bac	8a		txa				txa
.1bad	48		pha				pha
.1bae	98		tya				tya
.1baf	48		pha				pha
.1bb0					_LVRLoop:
.1bb0	20 6a 1c	jsr $1c6a			jsr 	LVFGet 						; get the next (never access direct)
.1bb3	c9 80		cmp #$80			cmp 	#$80 						; exit ?
.1bb5	f0 42		beq $1bf9			beq 	_LVRExit
.1bb7	b0 5c		bcs $1c15			bcs 	_LVRLoad 					; load data in ?
.1bb9	c9 08		cmp #$08			cmp 	#$08 						; is it set address ?
.1bbb	90 11		bcc $1bce			bcc 	_LVRSetAddress
.1bbd	c9 0f		cmp #$0f			cmp 	#$0F 						; is it define palette
.1bbf	f0 3d		beq $1bfe			beq 	_LVRSetPalette
.1bc1	c9 10		cmp #$10			cmp 	#$10 						; is it set compression type ?
.1bc3	90 2d		bcc $1bf2			bcc 	_LVRSetCompress
.1bc5	c9 64		cmp #$64			cmp 	#$64 						; is it set sprite type.
.1bc7	90 5b		bcc $1c24			bcc 	_LVRSetSprite
.1bc9	a2 01		ldx #$01			ldx 	#ErrorID_missing
.1bcb	20 18 15	jsr $1518		jsr	errorHandler
.1bce					_LVRSetAddress:
.1bce	85 2d		sta $2d				sta 	temp1+1 					; 24 bit in temp1+1/temp1/A
.1bd0	20 6a 1c	jsr $1c6a			jsr 	LVFGet
.1bd3	85 2c		sta $2c				sta 	temp1
.1bd5	a9 00		lda #$00			lda 	#0
.1bd7	46 2d		lsr $2d				lsr 	temp1+1 					; / 2 twice.
.1bd9	66 2c		ror $2c				ror 	temp1
.1bdb	6a		ror a				ror		a
.1bdc	46 2d		lsr $2d				lsr 	temp1+1
.1bde	66 2c		ror $2c				ror 	temp1
.1be0	6a		ror a				ror		a
.1be1	8d 20 9f	sta $9f20			sta 	$9F20 						; set write address with +1 increment
.1be4	a5 2c		lda $2c				lda 	temp1
.1be6	8d 21 9f	sta $9f21			sta 	$9F21
.1be9	a5 2d		lda $2d				lda 	temp1+1
.1beb	09 10		ora #$10			ora 	#$10
.1bed	8d 22 9f	sta $9f22			sta 	$9F22
.1bf0	d0 be		bne $1bb0			bne 	_LVRLoop
.1bf2					_LVRSetCompress:
.1bf2	29 07		and #$07			and 	#7
.1bf4	8d ec 0b	sta $0bec			sta 	compressMode
.1bf7	10 b7		bpl $1bb0			bpl 	_LVRLoop
.1bf9					_LVRExit:
.1bf9	68		pla				pla
.1bfa	a8		tay				tay
.1bfb	68		pla				pla
.1bfc	aa		tax				tax
.1bfd	60		rts				rts
.1bfe					_LVRSetPalette:
.1bfe	20 6a 1c	jsr $1c6a			jsr 	LVFGet 						; get palette id.
.1c01	20 77 19	jsr $1977			jsr 	PointToPaletteA 			; in palette.asm
.1c04	20 6a 1c	jsr $1c6a			jsr 	LVFGet 						; copy 12 bit palette data in.
.1c07	8d 23 9f	sta $9f23			sta 	$9F23
.1c0a	20 6a 1c	jsr $1c6a			jsr 	LVFGet
.1c0d	29 0f		and #$0f			and 	#$0F
.1c0f	8d 23 9f	sta $9f23			sta 	$9F23
.1c12	4c b0 1b	jmp $1bb0			jmp 	_LVRLoop
.1c15					_LVRLoad:
.1c15	29 7f		and #$7f			and 	#$7F 						; count in X (is > 0)
.1c17	aa		tax				tax
.1c18					_LVRLCopy:
.1c18	20 6a 1c	jsr $1c6a			jsr 	LVFGet 						; write to data.
.1c1b	8d 23 9f	sta $9f23			sta 	$9F23
.1c1e	ca		dex				dex
.1c1f	d0 f7		bne $1c18			bne 	_LVRLCopy
.1c21	4c b0 1b	jmp $1bb0			jmp 	_LVRLoop
.1c24					_LVRSetSprite:
.1c24	48		pha				pha 								; save on stack
.1c25	20 6a 1c	jsr $1c6a			jsr 	LVFGet 						; get the sprite number into X
.1c28	aa		tax				tax
.1c29	c9 40		cmp #$40			cmp 	#X16MaxImages				; too high ?
.1c2b	b0 38		bcs $1c65			bcs 	_LVRSSValue
.1c2d	68		pla				pla 								; restore the data held in the first byte
.1c2e	9d ed 0b	sta $0bed,x			sta 	imageInfo,x 				; and write into the sprite image table.
.1c31					_LVRAlignVRAM:
.1c31	ad 20 9f	lda $9f20			lda 	$9F20 						; check VRAM on 32 byte boundary
.1c34	29 1f		and #$1f			and 	#$1F
.1c36	f0 07		beq $1c3f			beq 	_LVRAligned
.1c38	a9 00		lda #$00			lda 	#$00
.1c3a	8d 23 9f	sta $9f23			sta 	$9F23
.1c3d	f0 f2		beq $1c31			beq 	_LVRAlignVRAM
.1c3f					_LVRAligned:
.1c3f	ad 22 9f	lda $9f22			lda 	$9F22 						; put address/32 in sprite image table
.1c42	4a		lsr a				lsr 	a 	 						; first halve into temp1
.1c43	ad 21 9f	lda $9f21			lda 	$9F21
.1c46	6a		ror a				ror 	a
.1c47	85 2d		sta $2d				sta 	temp1+1
.1c49	ad 20 9f	lda $9f20			lda 	$9F20
.1c4c	6a		ror a				ror 	a
.1c4d	85 2c		sta $2c				sta 	temp1
.1c4f	a0 04		ldy #$04			ldy 	#4 							; divide it by 16 in temp1
.1c51					_LVRShift:
.1c51	46 2d		lsr $2d				lsr 	temp1+1
.1c53	66 2c		ror $2c				ror 	temp1
.1c55	88		dey				dey
.1c56	d0 f9		bne $1c51			bne 	_LVRShift
.1c58	a5 2d		lda $2d				lda 	temp1+1 					; copy result.
.1c5a	9d 6d 0c	sta $0c6d,x			sta 	imageAddr2High,x
.1c5d	a5 2c		lda $2c				lda 	temp1
.1c5f	9d 2d 0c	sta $0c2d,x			sta 	imageAddr2Low,x
.1c62	4c b0 1b	jmp $1bb0			jmp 	_LVRLoop
.1c65					_LVRSSValue:
.1c65	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.1c67	20 18 15	jsr $1518		jsr	errorHandler
.1c6a	84 32		sty $32		LVFGet:	sty 	tempShort
.1c6c	a0 00		ldy #$00			ldy 	#0
.1c6e	b1 2a		lda ($2a),y			lda 	(temp0),y
.1c70	a4 32		ldy $32				ldy	 	tempShort
.1c72	e6 2a		inc $2a				inc 	temp0
.1c74	d0 02		bne $1c78			bne 	_LVFGExit
.1c76	e6 2b		inc $2b				inc 	temp0+1
.1c78					_LVFGExit:
.1c78	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Return to file: basic.asm

.1c79					section_end_extension:
.1c79					section_start_floatingpoint:

;******  Processing file: floatingpoint/floatingpoint.asm

.1c79					floatingpointHandler:
.1c79	a2 03		ldx #$03			ldx 	#ErrorID_NoModule
.1c7b	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: basic.asm

.1c7e					section_end_floatingpoint:
.1c7e					section_start_interaction:

;******  Processing file: interaction/interaction.asm


;******  Processing file: interaction/cold.asm

.1c7e					ColdStartEntry:
.1c7e	a2 ff		ldx #$ff			ldx 	#$FF
.1c80	9a		txs				txs
.1c81	20 0a 1d	jsr $1d0a			jsr 	ForceStandardMode
.1c84	a2 04		ldx #$04		ldx	#4
.1c86	20 f6 14	jsr $14f6		jsr	deviceHandler
.1c89	a0 ff		ldy #$ff			ldy 	#255
.1c8b					_CSBanner:
.1c8b	c8		iny				iny
.1c8c	b9 b2 1c	lda $1cb2,y			lda 	Intro,y
.1c8f	f0 14		beq $1ca5			beq 	_CSStart
.1c91	c9 08		cmp #$08			cmp 	#8
.1c93	90 08		bcc $1c9d			bcc 	_CSInk
.1c95	a2 16		ldx #$16		ldx	#22
.1c97	20 f6 14	jsr $14f6		jsr	deviceHandler
.1c9a	4c 8b 1c	jmp $1c8b			jmp 	_CSBanner
.1c9d					_CSInk:
.1c9d	a2 08		ldx #$08		ldx	#8
.1c9f	20 f6 14	jsr $14f6		jsr	deviceHandler
.1ca2	4c 8b 1c	jmp $1c8b			jmp 	_CSBanner
.1ca5					_CSStart:
.1ca5	a2 16		ldx #$16		ldx	#22
.1ca7	20 ff 34	jsr $34ff		jsr	mainHandler
.1caa	a2 06		ldx #$06		ldx	#6
.1cac	20 ff 34	jsr $34ff		jsr	mainHandler
.1caf	4c ca 1d	jmp $1dca			jmp 	WarmStartEntry
>1cb2	06 2a 2a 2a 20 36 35 30		Intro:	.text 	6,"*** 6502 Extended BASIC ***",13,13
>1cba	32 20 45 78 74 65 6e 64 65 64 20 42 41 53 49 43
>1cca	20 2a 2a 2a 0d 0d
>1cd0	03 57 72 69 74 74 65 6e				.text 	3,"Written by Paul Robson 2021",13,13
>1cd8	20 62 79 20 50 61 75 6c 20 52 6f 62 73 6f 6e 20
>1ce8	32 30 32 31 0d 0d
>1cee	02 42 61 73 69 63 20				.text 	2,"Basic "
>1cf5	30 2e 31 38					.text "0.18"
>1cf9	20 28						.text 	" ("
>1cfb	32 36 2d 4d 61 72 2d 32				.text "26-Mar-2021"
>1d03	30 32 31
>1d06	29 0d 0d 00					.text 	")",13,13,0
.1d0a					ForceStandardMode:
.1d0a	a9 fe		lda #$fe			lda 	#$FE
.1d0c	20 60 18	jsr $1860		jsr	extensionHandler
.1d0f	60		rts				rts

;******  Return to file: interaction/interaction.asm


;******  Processing file: interaction/delete.asm

.1d10					DeleteLine:
.1d10	ad c8 0a	lda $0ac8			lda 	basePage 					; copy program base to temp0
.1d13	85 2a		sta $2a				sta 	temp0
.1d15	ad c9 0a	lda $0ac9			lda 	basePage+1
.1d18	85 2b		sta $2b				sta 	temp0+1
.1d1a	a0 01		ldy #$01	_DLLoop:ldy 	#1 							; see if found line ?
.1d1c	a5 50		lda $50				lda 	esInt0 						; e.g. the linenumbers match
.1d1e	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.1d20	d0 07		bne $1d29			bne 	_DLNext
.1d22	c8		iny				iny
.1d23	a5 58		lda $58				lda 	esInt1
.1d25	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.1d27	f0 06		beq $1d2f			beq 	_DLFound
.1d29	20 4d 1d	jsr $1d4d	_DLNext:jsr 	IAdvanceTemp0 				; shift temp0 forward, return Z flag set if end.
.1d2c	d0 ec		bne $1d1a			bne 	_DLLoop
.1d2e	60		rts				rts
.1d2f					_DLFound:
.1d2f	a0 00		ldy #$00			ldy 	#0 							; this is the line to cut, so this offset is the bytes to remove
.1d31	b1 2a		lda ($2a),y			lda 	(temp0),y
.1d33	a8		tay				tay 								; so we copy from (temp0),y
.1d34	a2 00		ldx #$00			ldx 	#0  						; to (temp0,x)
.1d36					_DLCopyDown:
.1d36	b1 2a		lda ($2a),y			lda 	(temp0),y 					; copy one byte.
.1d38	81 2a		sta ($2a,x)			sta 	(temp0,x)
.1d3a	e6 2a		inc $2a				inc 	temp0 						; advance pointer
.1d3c	d0 02		bne $1d40			bne 	_DLNoCarry
.1d3e	e6 2b		inc $2b				inc 	temp0+1
.1d40					_DLNoCarry:
.1d40	a5 2a		lda $2a				lda 	temp0 						; until hit low memory
.1d42	c5 35		cmp $35				cmp 	lowMemory 					; which is comfortably after End Program.
.1d44	d0 f0		bne $1d36			bne 	_DLCopyDown
.1d46	a5 2b		lda $2b				lda 	temp0+1
.1d48	c5 36		cmp $36				cmp 	lowMemory+1
.1d4a	d0 ea		bne $1d36			bne 	_DLCopyDown
.1d4c	60		rts				rts
.1d4d					IAdvanceTemp0:
.1d4d	84 32		sty $32				sty 	tempShort
.1d4f	18		clc				clc
.1d50	a0 00		ldy #$00			ldy 	#0 							; get offset
.1d52	b1 2a		lda ($2a),y			lda 	(temp0),y 					; add to temp0
.1d54	65 2a		adc $2a				adc 	temp0
.1d56	85 2a		sta $2a				sta 	temp0
.1d58	90 02		bcc $1d5c			bcc 	_IATNoCarry
.1d5a	e6 2b		inc $2b				inc 	temp0+1
.1d5c					_IATNoCarry:
.1d5c	b1 2a		lda ($2a),y			lda 	(temp0),y
.1d5e	a4 32		ldy $32				ldy 	tempShort
.1d60	c9 00		cmp #$00			cmp		#0 							; Z set if program end.
.1d62	60		rts				rts

;******  Return to file: interaction/interaction.asm


;******  Processing file: interaction/insert.asm

.1d63					InsertLine:
.1d63	ad c8 0a	lda $0ac8			lda 	basePage 					; copy program base to temp0
.1d66	85 2a		sta $2a				sta 	temp0
.1d68	ad c9 0a	lda $0ac9			lda 	basePage+1
.1d6b	85 2b		sta $2b				sta 	temp0+1
.1d6d					_ILLoop:
.1d6d	a0 01		ldy #$01			ldy 	#1
.1d6f	b1 2a		lda ($2a),y			lda 	(temp0),y
.1d71	c5 50		cmp $50				cmp 	esInt0
.1d73	c8		iny				iny
.1d74	b1 2a		lda ($2a),y			lda 	(temp0),y
.1d76	e5 58		sbc $58				sbc 	esInt1
.1d78	b0 05		bcs $1d7f			bcs 	_ILFound 					; we know it cannot be equal, it would have been deleted
.1d7a	20 4d 1d	jsr $1d4d			jsr 	IAdvanceTemp0 				; shift temp0 forward, return Z flag set if end.
.1d7d	d0 ee		bne $1d6d			bne 	_ILLoop
.1d7f					_ILFound:
.1d7f	a5 35		lda $35				lda 	lowMemory 					; shift lowMemory up to make space for it.
.1d81	85 2c		sta $2c				sta 	temp1             			; this pointer goes backwards
.1d83	a5 36		lda $36				lda 	lowMemory+1
.1d85	85 2d		sta $2d				sta 	temp1+1
.1d87	ad ea 0d	lda $0dea			lda 	tokenBufferIndex 			; space to make in Y, 0 in X.
.1d8a	18		clc				clc 								; add 3 for the line number and offset.
.1d8b	69 03		adc #$03			adc 	#3 							; tokenbuffer already has $80
.1d8d	a8		tay				tay
.1d8e	a2 00		ldx #$00			ldx 	#0
.1d90	a1 2c		lda ($2c,x)	_ILMove:lda 	(temp1,x)					; shift up
.1d92	91 2c		sta ($2c),y			sta 	(temp1),y
.1d94	a5 2c		lda $2c				lda 	temp1 						; check reached the insert point ?
.1d96	c5 2a		cmp $2a				cmp 	temp0
.1d98	d0 06		bne $1da0			bne 	_ILMNext
.1d9a	a5 2d		lda $2d				lda 	temp1+1
.1d9c	c5 2b		cmp $2b				cmp 	temp0+1
.1d9e	f0 0b		beq $1dab			beq 	_ILMCopy
.1da0					_ILMNext:
.1da0	a5 2c		lda $2c				lda 	temp1
.1da2	d0 02		bne $1da6			bne 	_ILNoBorrow
.1da4	c6 2d		dec $2d				dec 	temp1+1
.1da6					_ILNoBorrow:
.1da6	c6 2c		dec $2c				dec 	temp1
.1da8	4c 90 1d	jmp $1d90			jmp 	_ILMove 					; and go round again
.1dab					_ILMCopy:
.1dab	98		tya				tya 								; Y is the offset of the new line.
.1dac	81 2a		sta ($2a,x)			sta 	(temp0,x)					; X = 0 still.
.1dae	a0 01		ldy #$01			ldy 	#1 							; copy in line number.
.1db0	a5 50		lda $50				lda 	esInt0
.1db2	91 2a		sta ($2a),y			sta 	(temp0),y
.1db4	c8		iny				iny
.1db5	a5 58		lda $58				lda 	esInt1
.1db7	91 2a		sta ($2a),y			sta 	(temp0),y
.1db9	a0 00		ldy #$00			ldy 	#0 							; copy the body in
.1dbb					_ILMCopy2:
.1dbb	b1 28		lda ($28),y			lda 	(codePtr),y
.1dbd	c8		iny				iny
.1dbe	c8		iny				iny
.1dbf	c8		iny				iny
.1dc0	91 2a		sta ($2a),y			sta 	(temp0),y
.1dc2	88		dey				dey
.1dc3	88		dey				dey
.1dc4	cc ea 0d	cpy $0dea			cpy 	tokenBufferIndex
.1dc7	d0 f2		bne $1dbb			bne 	_ILMCopy2
.1dc9	60		rts				rts

;******  Return to file: interaction/interaction.asm


;******  Processing file: interaction/warm.asm

.1dca					WarmStartEntry:
.1dca	a2 ff		ldx #$ff			ldx 	#$FF
.1dcc	9a		txs				txs
.1dcd	20 0a 1d	jsr $1d0a			jsr 	ForceStandardMode
.1dd0	a9 02		lda #$02			lda 	#2							; green text.
.1dd2	a2 08		ldx #$08		ldx	#8
.1dd4	20 f6 14	jsr $14f6		jsr	deviceHandler
.1dd7	a2 0c		ldx #$0c		ldx	#12
.1dd9	20 f6 14	jsr $14f6		jsr	deviceHandler
.1ddc	a5 2a		lda $2a				lda 	temp0	 					; copy temp0 to codePtr
.1dde	85 28		sta $28				sta 	codePtr
.1de0	a5 2b		lda $2b				lda 	temp0+1
.1de2	85 29		sta $29				sta 	codePtr+1
.1de4	a2 06		ldx #$06		ldx	#6
.1de6	20 f6 14	jsr $14f6		jsr	deviceHandler
.1de9	a2 08		ldx #$08		ldx	#8
.1deb	20 e2 3f	jsr $3fe2		jsr	tokeniserHandler
.1dee	c9 00		cmp #$00			cmp 	#0
.1df0	f0 25		beq $1e17			beq 	WSEError 					; failed (tokenise can fail if it doesn't know a character e.g. |)
.1df2	a9 e7		lda #$e7			lda 	#(tokenHeader) & $FF
.1df4	85 28		sta $28				sta 	codePtr
.1df6	a9 0c		lda #$0c			lda 	#(tokenHeader) >> 8
.1df8	85 29		sta $29				sta 	1+(codePtr)
.1dfa	ad ea 0c	lda $0cea			lda 	tokenBuffer 				; is it a blank line, go get another line.
.1dfd	c9 80		cmp #$80			cmp 	#$80
.1dff	f0 c9		beq $1dca			beq 	WarmStartEntry
.1e01	29 c0		and #$c0			and 	#$C0						; does it start with a number
.1e03	c9 40		cmp #$40			cmp 	#$40 						; e.g. is it 01xx xxxx
.1e05	f0 15		beq $1e1c			beq 	HasLineNumber
.1e07	a9 00		lda #$00			lda 	#0 							; zero the token header, so it will look like a
.1e09	8d e7 0c	sta $0ce7			sta 	tokenHeader 				; fake program line.
.1e0c	8d e8 0c	sta $0ce8			sta 	tokenHeader+1
.1e0f	8d e9 0c	sta $0ce9			sta 	tokenHeader+2
.1e12	a2 18		ldx #$18		ldx	#24
.1e14	20 ff 34	jsr $34ff		jsr	mainHandler
.1e17					WSEError:
.1e17	a2 1e		ldx #$1e			ldx 	#ErrorID_Tokenise
.1e19	20 18 15	jsr $1518		jsr	errorHandler
.1e1c					HasLineNumber:
.1e1c	a0 03		ldy #$03			ldy 	#3 							; get line number
.1e1e	a9 00		lda #$00			lda 	#0
.1e20	a2 0a		ldx #$0a		ldx	#10
.1e22	20 ff 34	jsr $34ff		jsr	mainHandler
.1e25	a5 60		lda $60				lda 	esInt2		 				; check in range (only 2 bytes)
.1e27	05 68		ora $68				ora 	esInt3
.1e29	d0 ec		bne $1e17			bne 	WSEError
.1e2b	98		tya				tya 								; make codePtr point to code after the line number.
.1e2c	18		clc				clc 								; by skipping over the tokenised number.
.1e2d	65 28		adc $28				adc 	codePtr
.1e2f	85 28		sta $28				sta 	codePtr
.1e31	90 02		bcc $1e35			bcc		_HLNNoCarry
.1e33	e6 29		inc $29				inc 	codePtr+1
.1e35					_HLNNoCarry:
.1e35	98		tya				tya 								; subtract that offset from the code buffer index
.1e36	38		sec				sec
.1e37	49 ff		eor #$ff			eor 	#$FF
.1e39	6d ea 0d	adc $0dea			adc 	tokenBufferIndex
.1e3c	18		clc				clc 								; add space allowing for header & $80 trailer
.1e3d	69 04		adc #$04			adc 	#4
.1e3f	8d ea 0d	sta $0dea			sta 	tokenBufferIndex 			; this is the number of bytes occupied.
.1e42	20 10 1d	jsr $1d10			jsr 	DeleteLine 					; always delete the line, it's deleted and reinserted.
.1e45					_HLNNoDelete:
.1e45	ad ea 0d	lda $0dea			lda 	tokenBufferIndex 			; if line was empty, then don't insert
.1e48	c9 01		cmp #$01			cmp 	#1 							; (the one character is the EOL marker)
.1e4a	f0 0c		beq $1e58			beq 	_HLMEditDone
.1e4c	a5 36		lda $36				lda 	lowMemory+1 				; is there space, if we allow a little bit of
.1e4e	18		clc				clc 								; workspace (1k)
.1e4f	69 04		adc #$04			adc 	#4 							; e.g. 4 x 256
.1e51	c5 34		cmp $34				cmp 	highMemory+1
.1e53	b0 0b		bcs $1e60			bcs 	_HLMMemory 					; nope, won't allowit.
.1e55	20 63 1d	jsr $1d63			jsr 	InsertLine 					; insert the line in
.1e58					_HLMEditDone:
.1e58	a2 06		ldx #$06		ldx	#6
.1e5a	20 ff 34	jsr $34ff		jsr	mainHandler
.1e5d	4c ca 1d	jmp $1dca			jmp 	WarmStartEntry
.1e60					_HLMMemory:
.1e60	a2 22		ldx #$22			ldx 	#ErrorID_Memory
.1e62	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: interaction/interaction.asm

.1e65					interactionHandler:
.1e65	7c 68 1e	jmp ($1e68,x)			jmp 	(interactionVectors,x)
.1e68					interactionVectors:
>1e68	6e 1e					.word _DummyControlHandler ; index 0
>1e6a	7e 1c					.word ColdStartEntry       ; index 2
>1e6c	ca 1d					.word WarmStartEntry       ; index 4
.1e6e					_DummyControlHandler:
.1e6e	60		rts			rts

;******  Return to file: basic.asm

.1e6f					section_end_interaction:
.1e6f					section_start_main:

;******  Processing file: main/main.asm


;******  Processing file: main/commands/compat/readdata.asm

.0cad					dataPtr:
>0cad							.fill 	2
.0caf					dataIndex:
>0caf							.fill 	1
.1e6f					CommandRead:
.1e6f	a2 00		ldx #$00			ldx 	#0 							; get a reference to a variable in stack:0
.1e71	20 b2 2d	jsr $2db2			jsr 	EvaluateReference
.1e74	20 b5 1e	jsr $1eb5			jsr 	SwapDPCP 					; use the data pointer.
.1e77	b1 28		lda ($28),y			lda 	(codePtr),y 				; see where it is.
.1e79	c8		iny				iny
.1e7a	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; if it is on a comma, it is in data.
.1e7c	f0 07		beq $1e85			beq 	_CRInData
.1e7e	88		dey				dey
.1e7f	a9 d9		lda #$d9			lda 	#TKW_DATA 					; scan forward to a DATA statement.
.1e81	aa		tax				tax
.1e82	20 b6 25	jsr $25b6			jsr 	ScanForward
.1e85					_CRInData:
.1e85	a2 01		ldx #$01			ldx 	#1 							; evaluate a value at Stack,1
.1e87	20 5a 2d	jsr $2d5a			jsr 	Evaluate
.1e8a	ca		dex				dex 								; and write the value.
.1e8b	20 09 21	jsr $2109			jsr 	WriteValue
.1e8e	20 b5 1e	jsr $1eb5			jsr 	SwapDPCP 					; get the code pointer back.
.1e91	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows ?
.1e93	c8		iny				iny
.1e94	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; if comma, another variable
.1e96	f0 d7		beq $1e6f			beq 	CommandRead
.1e98	88		dey				dey
.1e99	60		rts				rts
.1e9a					CommandData:
.1e9a	a9 80		lda #$80			lda 	#TOK_EOL 					; go forward to end of line or colon.
.1e9c	a2 ca		ldx #$ca			ldx 	#TKW_COLON
.1e9e	20 b6 25	jsr $25b6			jsr 	ScanForward
.1ea1	88		dey				dey 								; ending on EOL is a scan issue, as it increments
.1ea2	60		rts				rts
.1ea3					CommandRestore:
.1ea3	ad c8 0a	lda $0ac8			lda 	basePage
.1ea6	8d ad 0c	sta $0cad			sta 	dataPtr
.1ea9	ad c9 0a	lda $0ac9			lda 	basePage+1
.1eac	8d ae 0c	sta $0cae			sta 	dataPtr+1
.1eaf	a9 03		lda #$03			lda 	#3
.1eb1	8d af 0c	sta $0caf			sta 	dataIndex
.1eb4	60		rts				rts
.1eb5					SwapDPCP:
.1eb5	8a		txa				txa
.1eb6	48		pha				pha
.1eb7	98		tya				tya 								; swap Y, DataIndex
.1eb8	ac af 0c	ldy $0caf			ldy 	DataIndex
.1ebb	8d af 0c	sta $0caf			sta 	DataIndex
.1ebe	a5 28		lda $28				lda 	codePtr 					; swap code/dataptr low
.1ec0	ae ad 0c	ldx $0cad			ldx 	dataptr
.1ec3	8d ad 0c	sta $0cad			sta 	dataPtr
.1ec6	86 28		stx $28				stx 	codePtr
.1ec8	a5 29		lda $29				lda 	codePtr+1 					; swap code/dataptr high.
.1eca	ae ae 0c	ldx $0cae			ldx 	dataptr+1
.1ecd	8d ae 0c	sta $0cae			sta 	dataPtr+1
.1ed0	86 29		stx $29				stx 	codePtr+1
.1ed2	68		pla				pla
.1ed3	aa		tax				tax
.1ed4	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/compat/transfer.asm

.1ed5					CommandGOSUB:
.1ed5	20 77 2d	jsr $2d77			jsr 	EvaluateRootInteger			; get GOSUB line on stack top.
.1ed8	a2 04		ldx #$04			ldx 	#4 							; allocate 4 bytes on stack for GOSUB
.1eda	a9 47		lda #$47			lda 	#markerGOSUB  				; <marker> <return addr/offset>
.1edc	20 ac 34	jsr $34ac			jsr 	RSClaim
.1edf	a9 01		lda #$01			lda 	#1 							; save position at offset 1.
.1ee1	20 d8 34	jsr $34d8			jsr 	RSSavePosition
.1ee4	a2 00		ldx #$00			ldx 	#0 							; point back at GOSUB line
.1ee6	f0 1b		beq $1f03			beq 	GotoTOS 					; and do a GOTO there.
.1ee8					CommandRETURN:
.1ee8	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.1eea	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.1eec	c9 47		cmp #$47			cmp 	#markerGOSUB 						; does it match
.1eee	f0 05		beq $1ef5			beq 	_isok
.1ef0	a2 0e		ldx #$0e			ldx 	#ErrorID_returnErr
.1ef2	20 18 15	jsr $1518		jsr	errorHandler
.1ef5					_isok:
.1ef5	a9 01		lda #$01			lda 	#1
.1ef7	20 eb 34	jsr $34eb			jsr 	RSLoadPosition 				; reload the position from offset 1.
.1efa	a9 04		lda #$04			lda 	#4 							; throw 4 bytes from stack.
.1efc	20 ce 34	jsr $34ce			jsr 	RSFree
.1eff	60		rts				rts
.1f00					CommandGOTO:
.1f00	20 77 2d	jsr $2d77			jsr 	EvaluateRootInteger 		; get GOTO line on stack top.
.1f03					GotoTOS:
.1f03	20 9a 28	jsr $289a			jsr 	ResetCodeAddress 			; simple search.
.1f06					_GotoSearch:
.1f06	a0 00		ldy #$00			ldy 	#0 							; get offset
.1f08	b1 28		lda ($28),y			lda 	(codePtr),y
.1f0a	f0 21		beq $1f2d			beq 	_GotoError 					; not found.
.1f0c	c8		iny				iny									; check LSB match
.1f0d	b1 28		lda ($28),y			lda 	(codePtr),y
.1f0f	d5 50		cmp $50,x			cmp 	esInt0,x
.1f11	d0 07		bne $1f1a			bne 	_GotoNext
.1f13	c8		iny				iny
.1f14	b1 28		lda ($28),y			lda 	(codePtr),y
.1f16	d5 58		cmp $58,x			cmp 	esInt1,x
.1f18	f0 10		beq $1f2a			beq 	_GotoFound
.1f1a					_GotoNext:
.1f1a	a0 00		ldy #$00			ldy 	#0 							; go next line
.1f1c	b1 28		lda ($28),y			lda 	(codePtr),y
.1f1e	18		clc				clc
.1f1f	65 28		adc $28				adc 	codePtr
.1f21	85 28		sta $28				sta 	codePtr
.1f23	90 e1		bcc $1f06			bcc 	_GotoSearch
.1f25	e6 29		inc $29				inc 	codePtr+1
.1f27	4c 06 1f	jmp $1f06			jmp 	_GotoSearch
.1f2a					_GotoFound:
.1f2a	a0 03		ldy #$03			ldy 	#3 							; continue from that line
.1f2c	60		rts				rts
.1f2d					_GotoError:
.1f2d	a2 0c		ldx #$0c			ldx 	#ErrorID_LineNumber
.1f2f	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/commands/io/input.asm

=32					MaxInputSize = 32
.0cb0					InputBuffer:
>0cb0							.fill 	MaxInputSize+1
.1f32					Command_Input:
.1f32	b1 28		lda ($28),y			lda 	(codePtr),y 			; see what's next.
.1f34	c8		iny				iny
.1f35	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 				; ignore commas.
.1f37	f0 f9		beq $1f32			beq 	Command_Input
.1f39	88		dey				dey 							; undo consume
.1f3a	c9 ca		cmp #$ca			cmp 	#TKW_COLON
.1f3c	f0 54		beq $1f92			beq 	_CIExit 				; : or EOL, exit
.1f3e	c9 80		cmp #$80			cmp 	#TOK_EOL
.1f40	f0 50		beq $1f92			beq 	_CIExit
.1f42	c9 40		cmp #$40			cmp 	#$40 					; variable ?
.1f44	90 12		bcc $1f58			bcc 	_CIVariable
.1f46	c9 85		cmp #$85			cmp 	#TOK_STR 				; if not quoted string syntax error.
.1f48	d0 43		bne $1f8d			bne 	_CISyntax
.1f4a	a2 00		ldx #$00			ldx 	#0
.1f4c	20 6e 2d	jsr $2d6e			jsr 	EvaluateString 			; evaluate and print string
.1f4f	20 6b 21	jsr $216b			jsr 	TOSToTemp0
.1f52	20 61 20	jsr $2061			jsr 	PrintString
.1f55	4c 32 1f	jmp $1f32			jmp 	Command_Input
.1f58					_CIVariable:
.1f58	a2 00		ldx #$00			ldx 	#0 						; evaluate a reference.
.1f5a	20 b2 2d	jsr $2db2			jsr 	EvaluateReference  		; this is where its going
.1f5d					_CIRetry:
.1f5d	a9 3f		lda #$3f			lda 	#"?"					; print prompt
.1f5f	a2 14		ldx #$14		ldx	#20
.1f61	20 f6 14	jsr $14f6		jsr	deviceHandler
.1f64	98		tya				tya
.1f65	48		pha				pha
.1f66	20 a6 1f	jsr $1fa6			jsr 	InputString 			; input a string (manually)
.1f69	a2 01		ldx #$01			ldx 	#1
.1f6b	20 93 1f	jsr $1f93			jsr 	BufferToStackX 			; make stack,x ref input string.
.1f6e	a5 48		lda $48				lda 	esType 					; if target type numeric
.1f70	29 40		and #$40			and 	#$40 					; then convert to number
.1f72	d0 11		bne $1f85			bne 	_CIWrite
.1f74	a2 01		ldx #$01			ldx 	#1
.1f76	20 6b 21	jsr $216b			jsr 	TOSToTemp0 				; string address in temp0, goes here.
.1f79	a9 0a		lda #$0a			lda 	#10
.1f7b	20 7f 32	jsr $327f			jsr 	MInt32FromString 		; convert it back from a string.
.1f7e	68		pla				pla
.1f7f	a8		tay				tay
.1f80	b0 03		bcs $1f85			bcs 	_CIWrite 				; successfully converted.
.1f82	18		clc				clc 							; default fail FP conversion
.1f83	90 d8		bcc $1f5d			bcc		_CIRetry				; failed, try again.
.1f85					_CIWrite:
.1f85	a2 00		ldx #$00			ldx 	#0
.1f87	20 09 21	jsr $2109			jsr 	WriteValue
.1f8a	4c 32 1f	jmp $1f32			jmp 	Command_Input
.1f8d					_CISyntax:
.1f8d	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.1f8f	20 18 15	jsr $1518		jsr	errorHandler
.1f92					_CIExit:
.1f92	60		rts				rts
.1f93					BufferToStackX:
.1f93	a9 b0		lda #$b0			lda 	#InputBuffer & $FF
.1f95	95 50		sta $50,x			sta 	esInt0,x
.1f97	a9 0c		lda #$0c			lda 	#InputBuffer >> 8
.1f99	95 58		sta $58,x			sta 	esInt1,x
.1f9b	a9 00		lda #$00			lda 	#0
.1f9d	95 60		sta $60,x			sta 	esInt2,x
.1f9f	95 68		sta $68,x			sta 	esInt3,x
.1fa1	a9 40		lda #$40			lda 	#$40
.1fa3	95 48		sta $48,x			sta 	esType,x
.1fa5	60		rts				rts
.1fa6					InputString:
.1fa6	a9 00		lda #$00			lda 	#0
.1fa8	8d b0 0c	sta $0cb0			sta 	InputBuffer
.1fab					_InputLoop:
.1fab	a2 02		ldx #$02		ldx	#2
.1fad	20 f6 14	jsr $14f6		jsr	deviceHandler
.1fb0	a2 0a		ldx #$0a		ldx	#10
.1fb2	20 f6 14	jsr $14f6		jsr	deviceHandler
.1fb5	c9 00		cmp #$00			cmp 	#0
.1fb7	f0 f2		beq $1fab			beq 	_InputLoop
.1fb9	c9 08		cmp #$08			cmp 	#8
.1fbb	f0 19		beq $1fd6			beq 	_InputBackspace
.1fbd	c9 0d		cmp #$0d			cmp 	#13
.1fbf	f0 21		beq $1fe2			beq 	_InputExit
.1fc1	ae b0 0c	ldx $0cb0			ldx 	InputBuffer
.1fc4	e0 20		cpx #$20			cpx 	#MaxInputSize 			; too many characters
.1fc6	f0 e3		beq $1fab			beq 	_InputLoop
.1fc8	9d b1 0c	sta $0cb1,x			sta 	InputBuffer+1,x 		; write char
.1fcb	ee b0 0c	inc $0cb0			inc 	InputBuffer 			; advance count.
.1fce					_InputPrintLoop:
.1fce	a2 14		ldx #$14		ldx	#20
.1fd0	20 f6 14	jsr $14f6		jsr	deviceHandler
.1fd3	4c ab 1f	jmp $1fab			jmp	 	_InputLoop
.1fd6					_InputBackspace:
.1fd6	ad b0 0c	lda $0cb0			lda 	InputBuffer 			; at start
.1fd9	f0 d0		beq $1fab			beq 	_InputLoop
.1fdb	ce b0 0c	dec $0cb0			dec 	InputBuffer
.1fde	a9 08		lda #$08			lda 	#8
.1fe0	d0 ec		bne $1fce			bne 	_InputPrintLoop
.1fe2					_InputExit:
.1fe2	a2 06		ldx #$06		ldx	#6
.1fe4	20 f6 14	jsr $14f6		jsr	deviceHandler
.1fe7	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/io/print.asm

.0cd1					lastPrintToken:
>0cd1							.fill 	1
.1fe8					Command_Print:
.1fe8	a9 00		lda #$00			lda 	#0 							; clear LPT to a non token
.1fea	8d d1 0c	sta $0cd1			sta 	lastPrintToken
.1fed	88		dey				dey
.1fee					_PrintLoopSkip:
.1fee	c8		iny				iny
.1fef					_PrintLoop:
.1fef	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows
.1ff1	c9 80		cmp #$80			cmp 	#TOK_EOL  					; done if end of line or colon
.1ff3	f0 5b		beq $2050			beq 	_PrintExit
.1ff5	c9 ca		cmp #$ca			cmp 	#TKW_COLON
.1ff7	f0 57		beq $2050			beq 	_PrintExit
.1ff9	8d d1 0c	sta $0cd1			sta 	lastPrintToken 				; update Last print token, so we check ; and ,
.1ffc	c9 cc		cmp #$cc			cmp 	#TKW_SEMICOLON 				; ignore semicolon
.1ffe	f0 ee		beq $1fee			beq 	_PrintLoopSkip
.2000	c9 cd		cmp #$cd			cmp 	#TKW_QUOTE 					; ' is new line
.2002	f0 3c		beq $2040			beq	 	_PrintNewLine
.2004	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; , is print tab
.2006	f0 40		beq $2048			beq 	_PrintTab
.2008	20 58 2d	jsr $2d58			jsr 	EvaluateRoot 				; evaluate something at the root
.200b	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.200d	85 2a		sta $2a				sta 	temp0
.200f	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.2011	85 2b		sta $2b				sta 	1+(temp0)
.2013	a5 48		lda $48				lda 	esType 						; get type
.2015	f0 15		beq $202c			beq		_PrintInteger
.2017	4a		lsr a				lsr 	a 							; check for floating point
.2018	b0 08		bcs $2022			bcs 	_PrintFloat
.201a					_PrintString:
.201a	a2 00		ldx #$00			ldx 	#0 							; bottom string to temp0
.201c	20 6b 21	jsr $216b			jsr 	TOSToTemp0
.201f	4c 3a 20	jmp $203a			jmp 	_PrintTemp0 				; print no leading space.
.2022					_PrintFloat:
.2022	a9 00		lda #$00			lda 	#0 							; stack level.
.2024	a2 16		ldx #$16		ldx	#22
.2026	20 79 1c	jsr $1c79		jsr	floatingpointHandler
.2029	4c 33 20	jmp $2033			jmp 	_PrintSpaceTemp0
.202c					_PrintInteger:
.202c	a9 8a		lda #$8a			lda 	#10+$80 					; base 10 signed
.202e	a2 00		ldx #$00			ldx 	#0 							; bottom stack element
.2030	20 67 33	jsr $3367			jsr 	MInt32ToString				; convert to text
.2033					_PrintSpaceTemp0:
.2033	a9 20		lda #$20			lda 	#32
.2035	a2 14		ldx #$14		ldx	#20
.2037	20 f6 14	jsr $14f6		jsr	deviceHandler
.203a					_PrintTemp0:
.203a	20 61 20	jsr $2061			jsr 	PrintString
.203d	4c ef 1f	jmp $1fef			jmp 	_PrintLoop
.2040					_PrintNewLine:
.2040	a2 06		ldx #$06		ldx	#6
.2042	20 f6 14	jsr $14f6		jsr	deviceHandler
.2045	4c ee 1f	jmp $1fee			jmp 	_PrintLoopSkip
.2048					_PrintTab:
.2048	a2 1a		ldx #$1a		ldx	#26
.204a	20 f6 14	jsr $14f6		jsr	deviceHandler
.204d	4c ee 1f	jmp $1fee			jmp 	_PrintLoopSkip
.2050					_PrintExit:
.2050	ad d1 0c	lda $0cd1			lda		lastPrintToken 				; check last token
.2053	c9 cc		cmp #$cc			cmp 	#TKW_SEMICOLON 				; if , or ; do not print NL
.2055	f0 09		beq $2060			beq 	_PrintExit2
.2057	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.2059	f0 05		beq $2060			beq 	_PrintExit2
.205b	a2 06		ldx #$06		ldx	#6
.205d	20 f6 14	jsr $14f6		jsr	deviceHandler
.2060					_PrintExit2:
.2060	60		rts				rts
.2061					PrintString:
.2061	8a		txa				txa
.2062	48		pha				pha
.2063	98		tya				tya
.2064	48		pha				pha
.2065	a0 00		ldy #$00			ldy 	#0							; get length
.2067	b1 2a		lda ($2a),y			lda 	(temp0),y
.2069	aa		tax				tax 								; into X
.206a	e0 00		cpx #$00	_PSLoop:cpx 	#0 							; finished ?
.206c	f0 10		beq $207e			beq 	_PSExit
.206e	ca		dex				dex
.206f	8a		txa				txa
.2070	48		pha				pha
.2071	c8		iny				iny
.2072	b1 2a		lda ($2a),y			lda 	(temp0),y
.2074	a2 14		ldx #$14		ldx	#20
.2076	20 f6 14	jsr $14f6		jsr	deviceHandler
.2079	68		pla				pla
.207a	aa		tax				tax
.207b	4c 6a 20	jmp $206a			jmp 	_PSLoop
.207e					_PSExit:
.207e	68		pla				pla
.207f	a8		tay				tay
.2080	68		pla				pla
.2081	aa		tax				tax
.2082	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/io/text.asm

.2083					Command_CLS:
.2083	a2 04		ldx #$04		ldx	#4
.2085	20 f6 14	jsr $14f6		jsr	deviceHandler
.2088	60		rts				rts
.2089					Command_Ink:
.2089	a2 00		ldx #$00			ldx 	#0
.208b	20 81 2d	jsr $2d81			jsr 	EvaluateSmallInteger
.208e	a2 08		ldx #$08		ldx	#8
.2090	20 f6 14	jsr $14f6		jsr	deviceHandler
.2093	60		rts				rts
.2094					Command_Paper:
.2094	a2 00		ldx #$00			ldx 	#0
.2096	20 81 2d	jsr $2d81			jsr 	EvaluateSmallInteger
.2099	a2 12		ldx #$12		ldx	#18
.209b	20 f6 14	jsr $14f6		jsr	deviceHandler
.209e	60		rts				rts
.209f					Command_Locate:
.209f	a2 00		ldx #$00			ldx 	#0
.20a1	20 81 2d	jsr $2d81			jsr 	EvaluateSmallInteger
.20a4	20 91 34	jsr $3491			jsr 	CheckComma
.20a7	e8		inx				inx
.20a8	20 81 2d	jsr $2d81			jsr 	EvaluateSmallInteger
.20ab	98		tya				tya
.20ac	48		pha				pha
.20ad	a4 51		ldy $51				ldy 	esInt0+1
.20af	a5 50		lda $50				lda 	esInt0
.20b1	a2 10		ldx #$10		ldx	#16
.20b3	20 f6 14	jsr $14f6		jsr	deviceHandler
.20b6	68		pla				pla
.20b7	a8		tay				tay
.20b8	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/io/vdu.asm

.20b9					Command_VDU:
.20b9	20 77 2d	jsr $2d77			jsr 	EvaluateRootInteger 			; get integer at root.
.20bc	a5 50		lda $50				lda 	esInt0
.20be	a2 14		ldx #$14		ldx	#20
.20c0	20 f6 14	jsr $14f6		jsr	deviceHandler
.20c3					_CVNext:
.20c3	b1 28		lda ($28),y			lda 	(codePtr),y 					; what follows ?
.20c5	c8		iny				iny
.20c6	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 						; comma, do again
.20c8	f0 ef		beq $20b9			beq 	Command_VDU
.20ca	c9 cc		cmp #$cc			cmp 	#TKW_SEMICOLON 					; semicolon, print MSB
.20cc	d0 0a		bne $20d8			bne 	_CVExit
.20ce	a5 58		lda $58				lda 	esInt1
.20d0	a2 14		ldx #$14		ldx	#20
.20d2	20 f6 14	jsr $14f6		jsr	deviceHandler
.20d5	4c c3 20	jmp $20c3			jmp 	_CVNext
.20d8	88		dey		_CVExit:dey
.20d9	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/link.asm


;******  Return to file: main/main.asm


;******  Processing file: main/commands/misc/assert.asm

.20da					Command_Assert:
.20da	20 77 2d	jsr $2d77			jsr 	EvaluateRootInteger 		; what is being asserted.
.20dd	20 38 34	jsr $3438			jsr 	MInt32Zero 					; is it true ?
.20e0	f0 01		beq $20e3			beq 	_CAError
.20e2	60		rts				rts
.20e3					_CAError:
.20e3	a2 04		ldx #$04			ldx 	#ErrorID_Assert
.20e5	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/commands/misc/dim.asm

.20e8					Command_Dim:
.20e8	a2 04		ldx #$04		ldx	#4
.20ea	20 b3 43	jsr $43b3		jsr	variableHandler
.20ed	b1 28		lda ($28),y			lda 	(codePtr),y 				; see what follows.
.20ef	c8		iny				iny
.20f0	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; comma follows, go back and do next
.20f2	f0 f4		beq $20e8			beq 	Command_Dim
.20f4	88		dey				dey 								; unpick get
.20f5	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/misc/let.asm

.20f6					CommandLet:
.20f6	a2 00		ldx #$00			ldx 	#0  						; get address to write.
.20f8	20 b2 2d	jsr $2db2			jsr 	EvaluateReference
.20fb	a9 8d		lda #$8d			lda 	#TKW_EQUAL 					; check for equals
.20fd	20 79 34	jsr $3479			jsr 	CheckToken
.2100	e8		inx				inx 								; do RHS
.2101	20 5a 2d	jsr $2d5a			jsr 	Evaluate 					; evaluate and dereference
.2104	ca		dex				dex
.2105	20 09 21	jsr $2109			jsr 	WriteValue 					; write it out
.2108	60		rts				rts
.2109					WriteValue:
.2109	98		tya				tya
.210a	48		pha				pha
.210b	20 6b 21	jsr $216b			jsr 	TOSToTemp0 					; set temp0 to point to target address.
.210e	b5 48		lda $48,x			lda 	esType,x 					; check the string flags match
.2110	55 49		eor $49,x			eor 	esType+1,x 					; one string, one number causes an error.
.2112	29 40		and #$40			and 	#$40
.2114	d0 50		bne $2166			bne		_WVType
.2116	a0 01		ldy #$01			ldy 	#1 							; for string, copy 0 and 1.
.2118	b5 48		lda $48,x			lda 	esType,x 					; check for string assignment
.211a	29 40		and #$40			and 	#$40
.211c	d0 1f		bne $213d			bne 	_WVCopyString
.211e	b5 48		lda $48,x			lda 	esType,x 					; check both are integer.
.2120	15 49		ora $49,x			ora 	esType+1,x
.2122	4a		lsr a				lsr 	a
.2123	90 22		bcc $2147			bcc 	_WVCopyData4 				; copy 4 data bytes.
.2125	b5 48		lda $48,x			lda 	esType,x
.2127	4a		lsr a				lsr 	a
.2128	90 3c		bcc $2166			bcc 	_WVType
.212a	e8		inx				inx 								; force the value being written to be a float.
.212b	20 bc 29	jsr $29bc			jsr 	BPMakeFloat
.212e	ca		dex				dex
.212f	20 6b 21	jsr $216b			jsr 	TOSToTemp0 					; set Temp0 to write address
.2132	e8		inx				inx
.2133	8a		txa				txa
.2134	a2 22		ldx #$22		ldx	#34
.2136	20 79 1c	jsr $1c79		jsr	floatingpointHandler
.2139	aa		tax				tax
.213a	4c 63 21	jmp $2163			jmp 	_WVCopyExit
.213d					_WVCopyString:
.213d	8a		txa				txa
.213e	a2 10		ldx #$10		ldx	#16
.2140	20 bc 37	jsr $37bc		jsr	stringHandler
.2143	aa		tax				tax
.2144	4c 63 21	jmp $2163			jmp 	_WVCopyExit
.2147					_WVCopyData4:
.2147	b5 48		lda $48,x			lda 	esType,x 					; is the int ref a byte ref ?
.2149	29 20		and #$20			and 	#$20 						; (e.g. is bit 5 set)
.214b	d0 10		bne $215d			bne 	_WVCopyData1
.214d	a0 03		ldy #$03			ldy 	#3
.214f	b5 69		lda $69,x			lda 	esInt3+1,x
.2151	91 2a		sta ($2a),y			sta 	(temp0),y
.2153	88		dey				dey
.2154	b5 61		lda $61,x			lda 	esInt2+1,x
.2156	91 2a		sta ($2a),y			sta 	(temp0),y
.2158	88		dey				dey
.2159	b5 59		lda $59,x			lda 	esInt1+1,x
.215b	91 2a		sta ($2a),y			sta 	(temp0),y
.215d					_WVCopyData1:
.215d	a0 00		ldy #$00			ldy 	#0
.215f	b5 51		lda $51,x			lda 	esInt0+1,x
.2161	91 2a		sta ($2a),y			sta 	(temp0),y
.2163					_WVCopyExit:
.2163	68		pla				pla
.2164	a8		tay				tay
.2165	60		rts				rts
.2166					_WVType:
.2166	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.2168	20 18 15	jsr $1518		jsr	errorHandler
.216b					TOSToTemp0:
.216b	b5 50		lda $50,x			lda 	esInt0,x
.216d	85 2a		sta $2a				sta 	temp0
.216f	b5 58		lda $58,x			lda 	esInt1,x
.2171	85 2b		sta $2b				sta 	temp0+1
.2173	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/misc/poke.asm

.2174					Command_Poke:
.2174	a9 01		lda #$01			lda 	#1
.2176	d0 06		bne $217e			bne 	PokeGeneral
.2178					Command_Doke:
.2178	a9 02		lda #$02			lda 	#2
.217a	d0 02		bne $217e			bne 	PokeGeneral
.217c					Command_Loke:
.217c	a9 03		lda #$03			lda 	#3
.217e					PokeGeneral:
.217e	48		pha				pha 								; save id (PDL = 123)
.217f	20 77 2d	jsr $2d77			jsr 	EvaluateRootInteger 		; target address
.2182	20 91 34	jsr $3491			jsr	 	CheckComma
.2185	e8		inx				inx
.2186	20 79 2d	jsr $2d79			jsr 	EvaluateInteger 			; what value to POKE ?
.2189	ca		dex				dex
.218a	20 6b 21	jsr $216b			jsr 	TOSToTemp0 					; temp0 points to the target address
.218d	84 32		sty $32				sty 	tempShort 					; save Y
.218f	68		pla				pla 								; get copy type (1-3) and dispatch
.2190	aa		tax				tax
.2191	ca		dex				dex
.2192	f0 14		beq $21a8			beq 	_Poke1
.2194	ca		dex				dex
.2195	f0 0b		beq $21a2			beq 	_Poke2
.2197	a0 03		ldy #$03			ldy 	#3							; put 4 bytes
.2199	a5 69		lda $69				lda 	esInt3+1
.219b	91 2a		sta ($2a),y			sta 	(temp0),y
.219d	88		dey				dey
.219e	a5 61		lda $61				lda 	esInt2+1
.21a0	91 2a		sta ($2a),y			sta 	(temp0),y
.21a2					_Poke2:
.21a2	a0 01		ldy #$01			ldy 	#1
.21a4	a5 59		lda $59				lda 	esInt1+1
.21a6	91 2a		sta ($2a),y			sta 	(temp0),y
.21a8					_Poke1:
.21a8	a0 00		ldy #$00			ldy 	#0
.21aa	a5 51		lda $51				lda 	esInt0+1
.21ac	91 2a		sta ($2a),y			sta 	(temp0),y
.21ae	a4 32		ldy $32				ldy 	tempShort 					; restore Y and exit
.21b0	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/misc/rem.asm

.21b1					Command_Rem:
.21b1					Command_Rem2:
.21b1	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows
.21b3	c9 85		cmp #$85			cmp 	#TOK_STR 					; if it is a string then skip it.
.21b5	d0 06		bne $21bd			bne 	_CRNotString
.21b7	c8		iny				iny
.21b8	98		tya				tya
.21b9	38		sec				sec
.21ba	71 28		adc ($28),y			adc 	(codePtr),y 				; get string size, add to Y, +1 for the length
.21bc	a8		tay				tay
.21bd					_CRNotString:
.21bd	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/misc/stopend.asm

.21be					CommandStop:
.21be	a2 06		ldx #$06			ldx 	#ErrorID_Stop
.21c0	20 18 15	jsr $1518		jsr	errorHandler
.21c3					CommandEnd:
.21c3	4c fa 34	jmp $34fa			jmp 	WarmStart
.21c6					CommandXemu:
.21c6	4c ff ff	jmp $ffff			jmp 	$FFFF 						; fudge to crash out of emulator
.21c9					AdvanceNextLine:
.21c9	a0 00		ldy #$00			ldy 	#0 							; get offset
.21cb	b1 28		lda ($28),y			lda 	(codePtr),y
.21cd	18		clc				clc 								; add to codePtr
.21ce	65 28		adc $28				adc 	codePtr
.21d0	85 28		sta $28				sta 	codePtr
.21d2	90 02		bcc $21d6			bcc 	_ANLNoCarry
.21d4	e6 29		inc $29				inc 	codePtr+1
.21d6					_ANLNoCarry:
.21d6	b1 28		lda ($28),y			lda 	(codePtr),y 				; if end of program (or was just stand alone.
.21d8	f0 e9		beq $21c3			beq 	CommandEnd 					; execute END
.21da	a0 03		ldy #$03			ldy 	#3 							; start of tokens on line.
.21dc	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/for.asm

.21dd					Command_FOR:
.21dd	a9 46		lda #$46			lda 	#markerFOR 					; allocate the space and set the marker
.21df	a2 0b		ldx #$0b			ldx 	#11
.21e1	20 ac 34	jsr $34ac			jsr 	RSClaim
.21e4	20 f6 20	jsr $20f6			jsr 	CommandLET 					; do the same as LET FOR [a = 4]
.21e7	a5 48		lda $48				lda 	esType 						; check type should be integer reference.
.21e9	c9 80		cmp #$80			cmp 	#$80 						; we do not do FOR floats.
.21eb	d0 4c		bne $2239			bne 	_CFType
.21ed	a9 ce		lda #$ce			lda 	#TKW_TO 					; check TO present.
.21ef	20 79 34	jsr $3479			jsr 	CheckToken
.21f2	a2 01		ldx #$01			ldx 	#1 							; keep the variable address in stack 0
.21f4	20 79 2d	jsr $2d79			jsr 	EvaluateInteger				; get terminal value in stack 1
.21f7	98		tya				tya
.21f8	48		pha				pha
.21f9	a0 04		ldy #$04			ldy 	#4
.21fb	a5 50		lda $50				lda		esInt0 						; copy the address of the index variable into 4 and 5
.21fd	91 37		sta ($37),y			sta 	(rsPointer),y
.21ff	c8		iny				iny
.2200	a5 58		lda $58				lda		esInt1
.2202	91 37		sta ($37),y			sta 	(rsPointer),y
.2204	c8		iny				iny
.2205	a9 01		lda #$01			lda 	#1  						; the default step in 6, (-128 .. 127 only)
.2207	91 37		sta ($37),y			sta 	(rsPointer),y
.2209	c8		iny				iny
.220a	a5 51		lda $51				lda		esInt0+1 					; terminal value in 7 to 11.
.220c	91 37		sta ($37),y			sta 	(rsPointer),y
.220e	c8		iny				iny
.220f	a5 59		lda $59				lda		esInt1+1
.2211	91 37		sta ($37),y			sta 	(rsPointer),y
.2213	c8		iny				iny
.2214	a5 61		lda $61				lda		esInt2+1
.2216	91 37		sta ($37),y			sta 	(rsPointer),y
.2218	c8		iny				iny
.2219	a5 69		lda $69				lda		esInt3+1
.221b	91 37		sta ($37),y			sta 	(rsPointer),y
.221d	68		pla				pla
.221e	a8		tay				tay
.221f	b1 28		lda ($28),y			lda 	(codePtr),y 				; followed by STEP.
.2221	c9 cf		cmp #$cf			cmp 	#TKW_STEP
.2223	d0 0e		bne $2233			bne 	_CFDone
.2225	c8		iny				iny									; skip over step.
.2226	20 79 2d	jsr $2d79			jsr 	EvaluateInteger 			; get step
.2229	98		tya				tya
.222a	48		pha				pha
.222b	b5 50		lda $50,x			lda 	esInt0,x 					; copy it into step (bit lazy here)
.222d	a0 06		ldy #$06			ldy 	#6
.222f	91 37		sta ($37),y			sta 	(rsPointer),y
.2231	68		pla				pla
.2232	a8		tay				tay
.2233					_CFDone:
.2233	a9 01		lda #$01			lda 	#1
.2235	20 d8 34	jsr $34d8			jsr 	RSSavePosition 				; save position.
.2238	60		rts				rts
.2239					_CFType:
.2239	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.223b	20 18 15	jsr $1518		jsr	errorHandler
.223e					Command_NEXT:
.223e	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.2240	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.2242	c9 46		cmp #$46			cmp 	#markerFOR 						; does it match
.2244	f0 05		beq $224b			beq 	_isok
.2246	a2 10		ldx #$10			ldx 	#ErrorID_nextErr
.2248	20 18 15	jsr $1518		jsr	errorHandler
.224b					_isok:
.224b	b1 28		lda ($28),y			lda 	(codePtr),y 				; is it NEXT <index>
.224d	c9 40		cmp #$40			cmp 	#$40 						; e.g. a variable follows 00-3F
.224f	b0 18		bcs $2269			bcs 	_CNNoIndex
.2251	a2 00		ldx #$00			ldx 	#0 							; start on stack
.2253	20 b2 2d	jsr $2db2			jsr 	EvaluateReference 			; this is the variable/parameter to localise.
.2256	98		tya				tya
.2257	48		pha				pha
.2258	a0 04		ldy #$04			ldy 	#4 							; check same variable as that stored at +4,+5
.225a	b1 37		lda ($37),y			lda 	(rsPointer),y
.225c	d5 50		cmp $50,x			cmp 	esInt0,x
.225e	d0 76		bne $22d6			bne 	_CNBadIndex
.2260	c8		iny				iny
.2261	b1 37		lda ($37),y			lda 	(rsPointer),y
.2263	d5 58		cmp $58,x			cmp 	esInt1,x
.2265	d0 6f		bne $22d6			bne 	_CNBadIndex
.2267	68		pla				pla
.2268	a8		tay				tay
.2269					_CNNoIndex:
.2269	98		tya				tya
.226a	48		pha				pha
.226b	a0 04		ldy #$04			ldy 	#4 							; make temp0 point to the index
.226d	b1 37		lda ($37),y			lda 	(rsPointer),y
.226f	85 2a		sta $2a				sta 	temp0
.2271	c8		iny				iny
.2272	b1 37		lda ($37),y			lda 	(rsPointer),y
.2274	85 2b		sta $2b				sta 	temp0+1
.2276	c8		iny				iny
.2277	a2 00		ldx #$00			ldx 	#0 							; X is the sign extend part of the step.
.2279	b1 37		lda ($37),y			lda 	(rsPointer),y 				; get the step.
.227b	85 2f		sta $2f				sta 	temp2+1 					; save for later.
.227d	10 01		bpl $2280			bpl 	_CNSignX
.227f	ca		dex				dex  								; X = $FF
.2280					_CNSignX:
.2280	18		clc				clc 								; add to the LSB
.2281	a0 00		ldy #$00			ldy 	#0
.2283	71 2a		adc ($2a),y			adc 	(temp0),y
.2285	91 2a		sta ($2a),y			sta 	(temp0),y
.2287					_CNPropogate:
.2287	c8		iny				iny  								; add the sign extended in X to the rest.
.2288	8a		txa				txa
.2289	71 2a		adc ($2a),y			adc 	(temp0),y
.228b	91 2a		sta ($2a),y			sta 	(temp0),y
.228d	c8		iny				iny
.228e	8a		txa				txa
.228f	71 2a		adc ($2a),y			adc 	(temp0),y
.2291	91 2a		sta ($2a),y			sta 	(temp0),y
.2293	c8		iny				iny
.2294	8a		txa				txa
.2295	71 2a		adc ($2a),y			adc 	(temp0),y
.2297	91 2a		sta ($2a),y			sta 	(temp0),y
.2299	18		clc				clc 								; point temp1 to the terminal value stored in the stack.
.229a	a5 37		lda $37				lda 	rsPointer
.229c	69 07		adc #$07			adc 	#7
.229e	85 2c		sta $2c				sta 	temp1
.22a0	a9 00		lda #$00			lda 	#0
.22a2	85 2e		sta $2e				sta 	temp2 						; clear temp2, which is the OR of all the subtractions.
.22a4	a8		tay				tay 								; and clear the Y register again.
.22a5	65 38		adc $38				adc 	rsPointer+1
.22a7	85 2d		sta $2d				sta 	temp1+1
.22a9	38		sec				sec 								; calculate current - limit oring interim values.
.22aa	20 e2 22	jsr $22e2			jsr 	_CNCompare 					; each of these does a byte.
.22ad	20 e2 22	jsr $22e2			jsr 	_CNCompare 					; we calculate the OR of all these subtractions.
.22b0	20 e2 22	jsr $22e2			jsr 	_CNCompare 					; and the carry of the subtraction.
.22b3	20 e2 22	jsr $22e2			jsr 	_CNCompare
.22b6	50 02		bvc $22ba			bvc 	_CNNoOverflow 				; converts to a signed comparison on the sign bit.
.22b8	49 80		eor #$80			eor 	#$80
.22ba					_CNNoOverflow:
.22ba	a4 2f		ldy $2f				ldy 	temp2+1						; get step back
.22bc	30 1d		bmi $22db			bmi 	_CNCheckDownto
.22be	c9 00		cmp #$00			cmp 	#0
.22c0	30 0c		bmi $22ce			bmi 	_CNLoopRound 				; loop round if < =
.22c2	a5 2e		lda $2e				lda 	temp2
.22c4	f0 08		beq $22ce			beq 	_CNLoopRound
.22c6					_CNLoopExit:
.22c6	68		pla				pla
.22c7	a8		tay				tay
.22c8	a9 0b		lda #$0b			lda 	#11
.22ca	20 ce 34	jsr $34ce			jsr 	RSFree
.22cd	60		rts				rts
.22ce					_CNLoopRound:
.22ce	68		pla				pla
.22cf	a8		tay				tay
.22d0	a9 01		lda #$01			lda 	#1
.22d2	20 eb 34	jsr $34eb			jsr 	RSLoadPosition				; go back to the loop top
.22d5	60		rts				rts
.22d6					_CNBadIndex:
.22d6	a2 13		ldx #$13			ldx 	#ErrorID_BadIndex
.22d8	20 18 15	jsr $1518		jsr	errorHandler
.22db					_CNCheckDownto:
.22db	c9 00		cmp #$00			cmp 	#0
.22dd	10 ef		bpl $22ce			bpl 	_CNLoopRound
.22df	4c c6 22	jmp $22c6			jmp 	_CNLoopExit
.22e2					_CNCompare:
.22e2	b1 2a		lda ($2a),y			lda 	(temp0),y 					; do the subtraction - compare don't care about answer
.22e4	f1 2c		sbc ($2c),y			sbc 	(temp1),y
.22e6	05 2e		ora $2e				ora 	temp2 						; Or into temp2 (does not affect carry)
.22e8	85 2e		sta $2e				sta 	temp2
.22ea	c8		iny				iny
.22eb	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/if.asm

.22ec					CommandIf:
.22ec	20 77 2d	jsr $2d77			jsr 	EvaluateRootInteger 		; get what's being tested.
.22ef	b1 28		lda ($28),y			lda 	(codePtr),y 				; check for IF .. THEN or IF .. GOTO which are single lines.
.22f1	c9 91		cmp #$91			cmp 	#TKW_GOTO
.22f3	f0 04		beq $22f9			beq 	_IfSimple
.22f5	c9 a1		cmp #$a1			cmp 	#TKW_THEN
.22f7	d0 1b		bne $2314			bne 	_IfComplex
.22f9					_IfSimple:
.22f9	20 38 34	jsr $3438			jsr 	MInt32Zero					; check if TOS zero
.22fc	f0 10		beq $230e			beq 	_IfEOL 						; go to next line.
.22fe	b1 28		lda ($28),y			lda 	(codePtr),y 				; get and skip token.
.2300	c8		iny				iny
.2301	c9 91		cmp #$91			cmp 	#TKW_GOTO 					; was it if GOTO ?
.2303	f0 0c		beq $2311			beq 	_IfGoto 					; do the Goto code
.2305	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows the THEN ?
.2307	29 c0		and #$c0			and 	#$C0 						; check $40-$7F
.2309	c9 40		cmp #$40			cmp 	#$40 						; e.g. number IF x = 0 THEN 170
.230b	f0 04		beq $2311			beq 	_IfGoto
.230d	60		rts				rts 								; else continue on this line.
.230e					_IfEOL:
.230e	4c c9 21	jmp $21c9			jmp 	AdvanceNextLine 			; go to next line
.2311					_IfGoto:
.2311	4c 00 1f	jmp $1f00			jmp 	CommandGoto
.2314					_IfComplex:
.2314	20 38 34	jsr $3438			jsr 	MInt32Zero 					; is it true ?
.2317	f0 01		beq $231a			beq 	_IFSkip 					; if non-zero then skip to ELSE/ENDIF
.2319	60		rts				rts 								; else continue.
.231a					_IFSkip:
.231a	a9 d6		lda #$d6			lda	 	#TKW_ELSE 					; test failed, go to ELSE or ENDIF whichever comes first.
.231c	a2 a2		ldx #$a2			ldx 	#TKW_ENDIF
.231e	4c b6 25	jmp $25b6			jmp		ScanForward
.2321					Command_ELSE:
.2321	a2 a2		ldx #$a2			ldx 	#TKW_ENDIF
.2323	8a		txa				txa
.2324	4c b6 25	jmp $25b6			jmp		ScanForward
.2327					Command_ENDIF:
.2327	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/local.asm

.0cd2					storeSize:
>0cd2							.fill 	1
.2328					CommandLocal:
.2328	a2 00		ldx #$00			ldx 	#0
.232a	20 46 23	jsr $2346			jsr 	LocaliseVariable 			; localise one.
.232d					_CLCheckNext:
.232d	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows ?
.232f	c8		iny				iny
.2330	c9 8d		cmp #$8d			cmp 	#TKW_EQUAL 					; something local "x = 2" ?
.2332	f0 06		beq $233a			beq 	_CLAssignment
.2334	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; comma try again.
.2336	f0 f0		beq $2328			beq 	CommandLocal
.2338	88		dey				dey
.2339	60		rts				rts
.233a					_CLAssignment:
.233a	a2 01		ldx #$01			ldx 	#1
.233c	20 5a 2d	jsr $2d5a			jsr 	Evaluate 					; evaluate RHS
.233f	ca		dex				dex
.2340	20 09 21	jsr $2109			jsr 	WriteValue
.2343	4c 2d 23	jmp $232d			jmp 	_CLCheckNext
.2346					LocaliseVariable:
.2346	b1 28		lda ($28),y			lda 	(codePtr),y 				; check it's a variable.
.2348	c9 40		cmp #$40			cmp 	#$40
.234a	b0 67		bcs $23b3			bcs 	_LVSyntax
.234c	8a		txa				txa 								; get the address of that variable.
.234d	a2 02		ldx #$02		ldx	#2
.234f	20 b3 43	jsr $43b3		jsr	variableHandler
.2352	aa		tax				tax
.2353	8a		txa				txa
.2354	48		pha				pha
.2355	98		tya				tya
.2356	48		pha				pha
.2357	20 6b 21	jsr $216b			jsr 	TOSToTemp0 					; the address of the variable is now in temp0.
.235a	b5 48		lda $48,x			lda 	esType,x 					; get the type
.235c	0a		asl a				asl 	a
.235d	10 16		bpl $2375			bpl 	_LVPushNumber
.235f	a0 00		ldy #$00			ldy 	#0 							; put address of data in temp1
.2361	b1 2a		lda ($2a),y			lda 	(temp0),y
.2363	c8		iny				iny
.2364	85 2c		sta $2c				sta 	temp1
.2366	b1 2a		lda ($2a),y			lda 	(temp0),y
.2368	85 2d		sta $2d				sta 	temp1+1
.236a	a0 00		ldy #$00			ldy 	#0 	 						; get length
.236c	b1 2c		lda ($2c),y			lda 	(temp1),y
.236e	aa		tax				tax 								; into X
.236f	e8		inx				inx 								; +1 for length.
.2370	a9 24		lda #$24			lda 	#markerString
.2372	4c 8a 23	jmp $238a			jmp 	_LVWriteFrame
.2375					_LVPushNumber:
.2375	a5 2a		lda $2a				lda 	temp0 						; storage address and data source are the same
.2377	85 2c		sta $2c				sta 	temp1
.2379	a5 2b		lda $2b				lda 	temp0+1
.237b	85 2d		sta $2d				sta 	temp1+1
.237d	b5 48		lda $48,x			lda 	esType,x 					; put float flag into carry.
.237f	4a		lsr a				lsr 	a
.2380	a9 25		lda #$25			lda 	#markerInt 					; get marker and size.
.2382	a2 04		ldx #$04			ldx 	#VarISize
.2384	90 04		bcc $238a			bcc 	_LVIsInteger
.2386	a9 23		lda #$23			lda 	#markerFloat
.2388	a2 06		ldx #$06			ldx 	#VarFSize
.238a					_LVIsInteger:
.238a					_LVWriteFrame:
.238a	8e d2 0c	stx $0cd2			stx 	storeSize 					; number of bytes to copy from (temp0)
.238d	e8		inx				inx 								; allocate 3 bytes, 2 for the address, 1 for the marker.
.238e	e8		inx				inx
.238f	e8		inx				inx
.2390	20 ac 34	jsr $34ac			jsr 	RSClaim 					; create the stack frame.
.2393	a5 2a		lda $2a				lda 	temp0 						; copy the target address to slots 1 & 2
.2395	a0 01		ldy #$01			ldy 	#1
.2397	91 37		sta ($37),y			sta 	(rsPointer),y
.2399	c8		iny				iny
.239a	a5 2b		lda $2b				lda 	temp0+1
.239c	91 37		sta ($37),y			sta 	(rsPointer),y
.239e	a0 00		ldy #$00			ldy 	#0
.23a0					_LVCopyData:
.23a0	b1 2c		lda ($2c),y			lda 	(temp1),y 					; get data from source, temp1
.23a2	c8		iny				iny 								; write allowing for the header bit.
.23a3	c8		iny				iny
.23a4	c8		iny				iny
.23a5	91 37		sta ($37),y			sta 	(rsPointer),y
.23a7	88		dey				dey
.23a8	88		dey				dey
.23a9	ce d2 0c	dec $0cd2			dec 	storeSize 					; do it storesize times
.23ac	d0 f2		bne $23a0			bne 	_LVCopyData
.23ae	68		pla				pla
.23af	a8		tay				tay
.23b0	68		pla				pla
.23b1	aa		tax				tax
.23b2	60		rts				rts
.23b3					_LVSyntax:
.23b3	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.23b5	20 18 15	jsr $1518		jsr	errorHandler
.23b8					RestoreLocals:
.23b8	a2 00		ldx #$00			ldx 	#0
.23ba	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.23bc	c9 40		cmp #$40			cmp	 	#64
.23be	90 01		bcc $23c1			bcc 	_RLocal
.23c0	60		rts				rts
.23c1					_RLocal:
.23c1	8a		txa				txa
.23c2	48		pha				pha
.23c3	98		tya				tya
.23c4	48		pha				pha
.23c5	a0 01		ldy #$01			ldy 	#1 							; copy target address to temp0
.23c7	b1 37		lda ($37),y			lda 	(rsPointer),y
.23c9	85 2a		sta $2a				sta 	temp0
.23cb	c8		iny				iny
.23cc	b1 37		lda ($37),y			lda 	(rsPointer),y
.23ce	85 2b		sta $2b				sta 	temp0+1
.23d0	a0 00		ldy #$00			ldy 	#0 							; get type back.
.23d2	b1 37		lda ($37),y			lda 	(rsPointer),y
.23d4	c9 24		cmp #$24			cmp 	#markerString 				; string is ... different :)
.23d6	f0 28		beq $2400			beq 	_RString
.23d8	a2 04		ldx #$04			ldx		#VARISize 					; size integer
.23da	c9 25		cmp #$25			cmp 	#markerInt
.23dc	f0 02		beq $23e0			beq 	_RIsInteger
.23de	a2 06		ldx #$06			ldx 	#VARFSize 					; size float
.23e0					_RIsInteger:
.23e0	8a		txa				txa
.23e1	48		pha				pha
.23e2	a0 03		ldy #$03			ldy 	#3							; start size to copy back from pointer.
.23e4					_RCopyBack:
.23e4	b1 37		lda ($37),y			lda 	(rsPointer),y
.23e6	88		dey				dey
.23e7	88		dey				dey
.23e8	88		dey				dey
.23e9	91 2a		sta ($2a),y			sta 	(temp0),y
.23eb	c8		iny				iny
.23ec	c8		iny				iny
.23ed	c8		iny				iny
.23ee	c8		iny				iny
.23ef	ca		dex				dex
.23f0	d0 f2		bne $23e4			bne 	_RCopyBack
.23f2	68		pla				pla 								; get size add 3
.23f3	18		clc				clc
.23f4	69 03		adc #$03			adc 	#3 							; (2 for address one for marker)
.23f6					_RRestoreAAndLoop:
.23f6	20 ce 34	jsr $34ce			jsr 	RSFree
.23f9	68		pla				pla
.23fa	a8		tay				tay
.23fb	68		pla				pla
.23fc	aa		tax				tax
.23fd	4c b8 23	jmp $23b8			jmp 	RestoreLocals 				; go see if there are any more locals.
.2400					_RString:
.2400	a2 00		ldx #$00			ldx 	#0
.2402	a0 01		ldy #$01			ldy 	#1 							; set up for a string write.
.2404	b1 37		lda ($37),y			lda 	(rsPointer),y
.2406	95 50		sta $50,x			sta 	esInt0,x
.2408	c8		iny				iny
.2409	b1 37		lda ($37),y			lda 	(rsPointer),y
.240b	95 58		sta $58,x			sta 	esInt1,x
.240d	18		clc				clc
.240e	a5 37		lda $37				lda 	rsPointer
.2410	69 03		adc #$03			adc 	#3
.2412	95 51		sta $51,x			sta 	esInt0+1,x
.2414	a5 38		lda $38				lda 	rsPointer+1
.2416	69 00		adc #$00			adc 	#0
.2418	95 59		sta $59,x			sta 	esInt1+1,x
.241a	8a		txa				txa
.241b	a2 10		ldx #$10		ldx	#16
.241d	20 bc 37	jsr $37bc		jsr	stringHandler
.2420	a0 03		ldy #$03			ldy 	#3 							; get string length
.2422	b1 37		lda ($37),y			lda 	(rsPointer),y
.2424	18		clc				clc
.2425	69 04		adc #$04			adc 	#4 							; add 4 (pointer, marker, length) to restore.
.2427	4c f6 23	jmp $23f6			jmp 	_RRestoreAAndLoop

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/proc.asm

.0cd3					paramCount:
>0cd3							.fill 	1
.242a					CallProc:
.242a	20 b2 24	jsr $24b2			jsr 	FindProcedure 				; find procedure, put in temp0. A contains name length.
.242d	48		pha				pha 								; save length on stack
.242e	85 32		sta $32				sta 	tempShort 					; save length in tempShort
.2430	a5 2b		lda $2b				lda 	temp0+1 					; save procedure target on stack.
.2432	48		pha				pha
.2433	a5 2a		lda $2a				lda 	temp0
.2435	48		pha				pha
.2436	98		tya				tya 								; calculate Y + length
.2437	18		clc				clc
.2438	65 32		adc $32				adc 	tempShort
.243a	a8		tay				tay
.243b	a2 00		ldx #$00			ldx 	#0 							; where the first parameter goes - 1
.243d					_CallProcEvalParams:
.243d	e8		inx				inx
.243e	b1 28		lda ($28),y			lda 	(codePtr),y 				; do we have ) , e.g. the end of the parameters ?
.2440	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.2442	f0 0b		beq $244f			beq 	_CPDoneParams
.2444	20 5a 2d	jsr $2d5a			jsr 	Evaluate 					; evaluate a parameter
.2447	b1 28		lda ($28),y			lda 	(codePtr),Y 				; get what's next, preconsume
.2449	c8		iny				iny
.244a	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; if comma, go get another parameter
.244c	f0 ef		beq $243d			beq 	_CallProcEvalParams
.244e	88		dey				dey 								; undo consumption.
.244f					_CPDoneParams:
.244f	20 84 34	jsr $3484			jsr 	CheckRightParen 			; check closing parenthesis.
.2452	8e d3 0c	stx $0cd3			stx 	paramCount 					; store parameter count+1
.2455	a2 04		ldx #$04			ldx 	#4							; make space on stack
.2457	a9 50		lda #$50			lda 	#markerPROC
.2459	20 ac 34	jsr $34ac			jsr 	RSClaim
.245c	a9 01		lda #$01			lda 	#1 							; store return address.
.245e	20 d8 34	jsr $34d8			jsr 	RSSavePosition
.2461	68		pla				pla 								; get the new code Ptr
.2462	85 28		sta $28				sta 	codePtr
.2464	68		pla				pla
.2465	85 29		sta $29				sta 	codePtr+1
.2467	68		pla				pla 								; length of name + 4 is the param start.
.2468	18		clc				clc
.2469	69 04		adc #$04			adc 	#4
.246b	a8		tay				tay
.246c	a2 ff		ldx #$ff			ldx 	#$FF
.246e					_CPLoadParameters:
.246e	e8		inx				inx 								; point to where the address should be loaded.
.246f	ec d3 0c	cpx $0cd3			cpx 	paramCount 					; too many parameters in definition ?
.2472	f0 1e		beq $2492			beq 	_CPParamError
.2474	b1 28		lda ($28),y			lda 	(codePtr),y					; what follows
.2476	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN 				; is it the right bracket
.2478	f0 0e		beq $2488			beq 	_CPParamComplete 			; done all the parameters, perhaps.
.247a	20 46 23	jsr $2346			jsr 	LocaliseVariable 			; make following variable local, ref in tos,x
.247d	20 09 21	jsr $2109			jsr 	WriteValue 					; copy the evaluated parameter into there.
.2480	b1 28		lda ($28),y			lda 	(codePtr),y 				; followed by a comma ?
.2482	c8		iny				iny
.2483	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.2485	f0 e7		beq $246e			beq 	_CPLoadParameters
.2487	88		dey				dey 								; no, unconsume and check for )
.2488					_CPParamComplete:
.2488	20 84 34	jsr $3484			jsr 	CheckRightParen 			; check )
.248b	e8		inx				inx 								; check right number of parameters have been consumed
.248c	ec d3 0c	cpx $0cd3			cpx 	paramCount
.248f	d0 01		bne $2492			bne 	_CPParamError
.2491	60		rts				rts
.2492					_CPParamError:
.2492	a2 18		ldx #$18			ldx 	#ErrorID_Params
.2494	20 18 15	jsr $1518		jsr	errorHandler
.2497					ReturnProc:
.2497	20 b8 23	jsr $23b8			jsr 	RestoreLocals 				; get the locals back.
.249a	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.249c	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.249e	c9 50		cmp #$50			cmp 	#markerPROC 						; does it match
.24a0	f0 05		beq $24a7			beq 	_isok
.24a2	a2 12		ldx #$12			ldx 	#ErrorID_endProcErr
.24a4	20 18 15	jsr $1518		jsr	errorHandler
.24a7					_isok:
.24a7	a9 01		lda #$01			lda 	#1
.24a9	20 eb 34	jsr $34eb			jsr 	RSLoadPosition 				; reload the position from offset 1.
.24ac	a9 04		lda #$04			lda 	#4 							; throw 4 bytes from stack.
.24ae	20 ce 34	jsr $34ce			jsr 	RSFree
.24b1	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/proctable.asm

.0cd4					procList:
>0cd4							.fill 	2		 					; terminated by name high being zero.
.0cd6					yInLine:
>0cd6							.fill 	1
.24b2					FindProcedure:
.24b2	8c d6 0c	sty $0cd6			sty 	yInLine 					; save current position.
.24b5	20 70 25	jsr $2570			jsr 	CalculateProcedureHash		; calculate the hash of the procedure.
.24b8	85 2c		sta $2c				sta 	temp1
.24ba	ad d4 0c	lda $0cd4			lda		procList 					; put procList address in temp2
.24bd	85 2e		sta $2e				sta 	temp2
.24bf	ad d5 0c	lda $0cd5			lda 	procList+1
.24c2	85 2f		sta $2f				sta 	temp2+1
.24c4	a0 00		ldy #$00			ldy 	#0 							; position in this table.
.24c6					_FPLoop:
.24c6	b1 2e		lda ($2e),y			lda 	(temp2),y
.24c8	f0 4f		beq $2519			beq 	_FPError 					; if so, we don't know this procedure.
.24ca	85 2b		sta $2b				sta 	temp0+1 					; copy MSB/LSB to temp0 as we go.
.24cc	c8		iny				iny
.24cd	b1 2e		lda ($2e),y			lda 	(temp2),y
.24cf	85 2a		sta $2a				sta 	temp0
.24d1	c8		iny				iny
.24d2	b1 2e		lda ($2e),y			lda 	(temp2),y					; check the procedure hash.
.24d4	c5 2c		cmp $2c				cmp 	temp1
.24d6	d0 2b		bne $2503			bne 	_FPNext 					; hash is different, go to next.
.24d8	38		sec				sec
.24d9	ad d6 0c	lda $0cd6			lda 	yInLine 					; position in line must be at least 4
.24dc	e9 04		sbc #$04			sbc 	#4
.24de	18		clc				clc
.24df	65 28		adc $28				adc 	codePtr
.24e1	85 30		sta $30				sta 	temp3
.24e3	a5 29		lda $29				lda 	codePtr+1
.24e5	69 00		adc #$00			adc 	#0
.24e7	85 31		sta $31				sta 	temp3+1
.24e9	98		tya				tya
.24ea	48		pha				pha
.24eb	a0 04		ldy #$04			ldy 	#4
.24ed					_FPCName:
.24ed	b1 30		lda ($30),y			lda 	(temp3),y 					; check the same
.24ef	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.24f1	d0 0e		bne $2501			bne 	_FPpulYNext 				; if different go to next one.
.24f3	c8		iny				iny
.24f4	c9 3a		cmp #$3a			cmp 	#$3A
.24f6	90 f5		bcc $24ed			bcc 	_FPCName 					; compare the whole lot....
.24f8	68		pla				pla 								; throw away the saved Y
.24f9	98		tya				tya 								; length of name is Y-4
.24fa	38		sec				sec
.24fb	e9 04		sbc #$04			sbc 	#4
.24fd	ac d6 0c	ldy $0cd6			ldy 	yInLine  					; get the original Y back
.2500	60		rts				rts
.2501					_FPpulYNext:
.2501	68		pla				pla
.2502	a8		tay				tay
.2503					_FPNext:
.2503	c8		iny				iny 								; next procedure record.
.2504	10 c0		bpl $24c6			bpl 	_FPLoop 					; if done 128 already ... e.g. Y -ve
.2506	98		tya				tya 								; subtract 128 from Y
.2507	38		sec				sec
.2508	e9 80		sbc #$80			sbc 	#128
.250a	a8		tay				tay
.250b	18		clc				clc 								; add 128 to temp2, so we can have more than
.250c	a5 2e		lda $2e				lda 	temp2 						; 255/3 = 85 procedures
.250e	69 80		adc #$80			adc 	#128
.2510	85 2e		sta $2e				sta 	temp2
.2512	90 b2		bcc $24c6			bcc 	_FPLoop
.2514	e6 2f		inc $2f				inc 	temp2+1
.2516	4c c6 24	jmp $24c6			jmp 	_FPLoop
.2519					_FPError:
.2519	a2 17		ldx #$17			ldx 	#ErrorID_NoProc
.251b	20 18 15	jsr $1518		jsr	errorHandler
.251e					ScanProc:
.251e	98		tya				tya
.251f	48		pha				pha
.2520	a5 35		lda $35				lda 	lowMemory 					; copy the start of the procList, at low memory
.2522	8d d4 0c	sta $0cd4			sta 	procList
.2525	a5 36		lda $36				lda 	lowMemory+1
.2527	8d d5 0c	sta $0cd5			sta 	procList+1
.252a	20 9a 28	jsr $289a			jsr 	ResetCodeAddress 			; back to the start.
.252d					_ScanLoop:
.252d	a0 00		ldy #$00			ldy 	#0 							; check reached program end
.252f	b1 28		lda ($28),y			lda 	(codePtr),y
.2531	f0 2a		beq $255d			beq 	_ScanExit
.2533	a0 03		ldy #$03			ldy 	#3							; get first token
.2535	b1 28		lda ($28),y			lda 	(codePtr),y
.2537	c9 9d		cmp #$9d			cmp 	#TKW_DEFPROC				; skip to next if not DEFPROC
.2539	d0 12		bne $254d			bne 	_ScanNext
.253b	a5 29		lda $29				lda 	codePtr+1 					; write high and low address of this line.
.253d	20 65 25	jsr $2565			jsr 	_ScanWrite
.2540	a5 28		lda $28				lda 	codePtr
.2542	20 65 25	jsr $2565			jsr 	_ScanWrite
.2545	a0 04		ldy #$04			ldy 	#4 							; start of name part
.2547	20 70 25	jsr $2570			jsr 	CalculateProcedureHash 		; calculate procedure hash
.254a	20 65 25	jsr $2565			jsr 	_ScanWrite					; and write that
.254d					_ScanNext:
.254d	18		clc				clc
.254e	a0 00		ldy #$00			ldy 	#0
.2550	b1 28		lda ($28),y			lda 	(codePtr),y
.2552	65 28		adc $28				adc 	codePtr
.2554	85 28		sta $28				sta 	codePtr
.2556	90 d5		bcc $252d			bcc 	_ScanLoop
.2558	e6 29		inc $29				inc 	codePtr+1
.255a	4c 2d 25	jmp $252d			jmp 	_ScanLoop
.255d					_ScanExit:
.255d	a9 00		lda #$00			lda 	#0 							; write ending zero.
.255f	20 65 25	jsr $2565			jsr 	_ScanWrite
.2562	68		pla				pla
.2563	a8		tay				tay
.2564	60		rts				rts
.2565					_ScanWrite:
.2565	a0 00		ldy #$00			ldy 	#0
.2567	91 35		sta ($35),y			sta 	(lowMemory),y
.2569	e6 35		inc $35				inc 	lowMemory
.256b	d0 02		bne $256f			bne 	_SWNoCarry
.256d	e6 36		inc $36				inc 	lowMemory+1
.256f					_SWNoCarry:
.256f	60		rts				rts
.2570					CalculateProcedureHash:
.2570	a9 00		lda #$00			lda 	#0 							; clear hash.
.2572	85 2a		sta $2a				sta 	temp0
.2574					_CPHLoop:
.2574	18		clc				clc 								; add character and rotate and add carry back in
.2575	b1 28		lda ($28),y			lda 	(codePtr),y
.2577	65 2a		adc $2a				adc 	temp0
.2579	6a		ror a				ror 	a
.257a	69 0d		adc #$0d			adc 	#13 						; primes usually good for this sort of thing.
.257c	85 2a		sta $2a				sta 	temp0 						; (down with this sort of thing)
.257e	b1 28		lda ($28),y			lda 	(codePtr),y
.2580	c8		iny				iny 								; advance incase we go round again.
.2581	c9 3a		cmp #$3a			cmp 	#$3A
.2583	90 ef		bcc $2574			bcc 	_CPHLoop
.2585	a5 2a		lda $2a				lda 	temp0
.2587	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/repeat.asm

.2588					Command_Repeat:
.2588	a2 04		ldx #$04			ldx 	#4 							; allocate 4 bytes on stack for REPEAT
.258a	a9 52		lda #$52			lda 	#markerREPEAT 				; repeat marker allocate 4 bytes
.258c	20 ac 34	jsr $34ac			jsr 	RSClaim
.258f	a9 01		lda #$01			lda 	#1 							; save position at offset 1.
.2591	20 d8 34	jsr $34d8			jsr 	RSSavePosition
.2594	60		rts				rts
.2595					Command_Until:
.2595	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.2597	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.2599	c9 52		cmp #$52			cmp 	#markerREPEAT 						; does it match
.259b	f0 05		beq $25a2			beq 	_isok
.259d	a2 0f		ldx #$0f			ldx 	#ErrorID_untilErr
.259f	20 18 15	jsr $1518		jsr	errorHandler
.25a2					_isok:
.25a2	20 77 2d	jsr $2d77			jsr 	EvaluateRootInteger 		; at the bottom.
.25a5	20 38 34	jsr $3438			jsr 	MInt32Zero					; check if TOS zero
.25a8	d0 06		bne $25b0			bne 	_CUExit
.25aa	a9 01		lda #$01			lda 	#1
.25ac	20 eb 34	jsr $34eb			jsr 	RSLoadPosition 				; reload the position from offset 1.
.25af	60		rts				rts
.25b0					_CUExit:
.25b0	a9 04		lda #$04			lda 	#4 							; throw 4 bytes from stack.
.25b2	20 ce 34	jsr $34ce			jsr 	RSFree
.25b5	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/scanner.asm

.25b6					ScanForward:
.25b6	85 2c		sta $2c				sta 	temp1 						; save tokens to search in temp1/temp1+1
.25b8	86 2d		stx $2d				stx 	temp1+1
.25ba	a9 00		lda #$00			lda 	#0 							; temp2 counts structure levels.
.25bc	85 2e		sta $2e				sta 	temp2
.25be	b1 28		lda ($28),y	_SFLoop:lda 	(codePtr),y 				; look at the next token.
.25c0	c8		iny				iny
.25c1	a6 2e		ldx $2e				ldx 	temp2 						; check structure levels are zero.
.25c3	d0 08		bne $25cd			bne 	_SFNoCheck 					; if so, check token against entered values.
.25c5	c5 2c		cmp $2c				cmp 	temp1 						; if either matches, we've reached the token
.25c7	f0 24		beq $25ed			beq 	_SFExit 					; at the same strcture depth.
.25c9	c5 2d		cmp $2d				cmp 	temp1+1
.25cb	f0 20		beq $25ed			beq 	_SFExit
.25cd					_SFNoCheck:
.25cd	c9 80		cmp #$80			cmp 	#$80 						; if it is 00-7F (variable/number) just skip it.
.25cf	90 ed		bcc $25be			bcc 	_SFLoop
.25d1	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; $80-$85 is various specials.
.25d3	90 19		bcc $25ee			bcc 	_SFSpecials
.25d5	c9 99		cmp #$99			cmp 	#TOK_STRUCTST 				; if < structure start then continue
.25d7	90 e5		bcc $25be			bcc 	_SFLoop
.25d9	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST 				; if >= unary start (after structure) then continue.
.25db	b0 e1		bcs $25be			bcs 	_SFLoop
.25dd	aa		tax				tax  								; token in X, and look up the adjuster.
.25de	bd 95 2c	lda $2c95,x			lda 	ELBinaryOperatorInfo-TOK_BINARYST,x
.25e1	38		sec				sec 								; convert to an offset ($FF,$01)
.25e2	e9 81		sbc #$81			sbc 	#$81
.25e4	18		clc				clc 								; add to depth
.25e5	65 2e		adc $2e				adc 	temp2
.25e7	85 2e		sta $2e				sta 	temp2
.25e9	10 d3		bpl $25be			bpl 	_SFLoop 					; +ve okay to continue
.25eb	30 07		bmi $25f4			bmi 	SFError 					; if gone -ve then we have a nesting error
.25ed	60		rts		_SFExit:rts
.25ee					_SFSpecials:
.25ee	20 f9 25	jsr $25f9			jsr 	ScannerSkipSpecial
.25f1	4c be 25	jmp $25be			jmp 	_SFLoop
.25f4					SFError:
.25f4	a2 14		ldx #$14			ldx 	#ErrorID_Struct
.25f6	20 18 15	jsr $1518		jsr	errorHandler
.25f9					ScannerSkipSpecial:
.25f9	c9 80		cmp #$80			cmp 	#TOK_EOL 					; $80, advance to next line.
.25fb	f0 10		beq $260d			beq 	_SFNextLine
.25fd	c9 84		cmp #$84			cmp 	#TOK_FPC					; $84, skip embedded float
.25ff	f0 2b		beq $262c			beq 	_SFFloatSkip
.2601	c9 85		cmp #$85			cmp 	#TOK_STR 					; $85, skip string
.2603	f0 02		beq $2607			beq 	_SFSkipString
.2605	c8		iny				iny									; $81,$82,$83 shift, so just advance over the shifted
.2606	60		rts				rts 								; token.
.2607					_SFSkipString:
.2607	98		tya				tya
.2608	38		sec				sec
.2609	71 28		adc ($28),y			adc 	(codePtr),y
.260b	a8		tay				tay
.260c	60		rts				rts
.260d					_SFNextLine:
.260d	a0 00		ldy #$00			ldy 	#0 							; get offset
.260f	b1 28		lda ($28),y			lda 	(codePtr),y
.2611	18		clc				clc 								; add to code pointer.
.2612	65 28		adc $28				adc 	codePtr
.2614	85 28		sta $28				sta 	codePtr
.2616	90 02		bcc $261a			bcc		_SFNLNoCarry
.2618	e6 29		inc $29				inc 	codePtr+1
.261a					_SFNLNoCarry:
.261a	b1 28		lda ($28),y			lda 	(codePtr),y 				; reached the end of the program.
.261c	d0 0b		bne $2629			bne		_SFXNL 						; no go round again
.261e	a5 2c		lda $2c				lda 	temp1
.2620	c9 d9		cmp #$d9			cmp 	#TKW_DATA 					; if searching for Data different error.
.2622	d0 d0		bne $25f4			bne 	SFError 					; read uses this to search for data statements
.2624	a2 1d		ldx #$1d			ldx 	#ErrorID_DataError
.2626	20 18 15	jsr $1518		jsr	errorHandler
.2629	a0 03		ldy #$03	_SFXNL:	ldy 	#3
.262b	60		rts				rts
.262c					_SFFloatSkip:
.262c	98		tya				tya 								; skip over an embedded float.
.262d	18		clc				clc
.262e	69 05		adc #$05			adc 	#FloatEmbeddedSize
.2630	a8		tay				tay
.2631	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/while.asm

.2632					Command_While:
.2632	a9 57		lda #$57			lda 	#markerWhile 				; gosub marker allocate 4 bytes.
.2634	a2 04		ldx #$04			ldx 	#4
.2636	20 ac 34	jsr $34ac			jsr 	RSClaim 					; create on stack.
.2639	88		dey				dey
.263a	a9 01		lda #$01			lda 	#1
.263c	20 d8 34	jsr $34d8			jsr 	RSSavePosition 				; save position before the WHILE keyword.
.263f	c8		iny				iny
.2640	20 79 2d	jsr $2d79			jsr 	EvaluateInteger				; get the conditional
.2643	20 38 34	jsr $3438			jsr 	MInt32Zero 	 				; if zero, skip forward to the fail code.
.2646	f0 01		beq $2649			beq 	_CWFail
.2648	60		rts				rts
.2649					_CWFail:
.2649	a9 04		lda #$04			lda 	#4
.264b	20 ce 34	jsr $34ce			jsr 	RSFree 						; close the just opened position.
.264e	a9 9f		lda #$9f			lda 	#TKW_WEND 					; scan forward past WEND.
.2650	aa		tax				tax
.2651	20 b6 25	jsr $25b6			jsr 	ScanForward
.2654	60		rts				rts
.2655					Command_Wend:
.2655	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.2657	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.2659	c9 57		cmp #$57			cmp 	#markerWHILE 						; does it match
.265b	f0 05		beq $2662			beq 	_isok
.265d	a2 11		ldx #$11			ldx 	#ErrorID_wendErr
.265f	20 18 15	jsr $1518		jsr	errorHandler
.2662					_isok:
.2662	a9 01		lda #$01			lda 	#1
.2664	20 eb 34	jsr $34eb			jsr 	RSLoadPosition				; go back until true
.2667	a9 04		lda #$04			lda 	#4
.2669	20 ce 34	jsr $34ce			jsr 	RSFree 						; close the loop
.266c	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/system/clear.asm

.266d					CommandClear:
.266d					XCommandClear:
.266d	98		tya				tya
.266e	48		pha				pha
.266f	ad cc 0a	lda $0acc			lda 	endMemory					; set high memory = end of memory
.2672	85 33		sta $33				sta 	highMemory
.2674	ad cd 0a	lda $0acd			lda 	endMemory+1
.2677	85 34		sta $34				sta 	highMemory+1
.2679	ad c8 0a	lda $0ac8			lda 	basePage 					; work out where the program ends.
.267c	85 2a		sta $2a				sta 	temp0
.267e	ad c9 0a	lda $0ac9			lda 	basePage+1
.2681	85 2b		sta $2b				sta 	temp0+1
.2683					_CCFindEnd:
.2683	a0 00		ldy #$00			ldy 	#0
.2685	b1 2a		lda ($2a),y			lda 	(temp0),y
.2687	f0 0c		beq $2695			beq 	_CCFoundEnd 				; offset zero is end.
.2689	18		clc				clc
.268a	65 2a		adc $2a				adc 	temp0 						; move to next line
.268c	85 2a		sta $2a				sta 	temp0
.268e	90 f3		bcc $2683			bcc 	_CCFindEnd
.2690	e6 2b		inc $2b				inc 	temp0+1
.2692	4c 83 26	jmp $2683			jmp 	_CCFindEnd
.2695					_CCFoundEnd:
.2695	a5 2a		lda $2a				lda 	temp0 						; put temp0 in lowMemory
.2697	85 35		sta $35				sta 	lowMemory
.2699	a5 2b		lda $2b				lda 	temp0+1
.269b	85 36		sta $36				sta 	lowMemory+1
.269d	18		clc				clc 								; put temp0+1 in endProgram
.269e	a5 2a		lda $2a				lda 	temp0
.26a0	69 01		adc #$01			adc 	#1
.26a2	8d ca 0a	sta $0aca			sta 	endProgram
.26a5	a5 2b		lda $2b				lda 	temp0+1
.26a7	69 00		adc #$00			adc 	#0
.26a9	8d cb 0a	sta $0acb			sta 	endProgram+1
.26ac	18		clc				clc 								; put a bit of space in.
.26ad	a5 35		lda $35				lda 	lowMemory
.26af	69 04		adc #$04			adc 	#4
.26b1	85 35		sta $35				sta 	lowMemory
.26b3	90 02		bcc $26b7			bcc 	_CCNoCarry
.26b5	e6 36		inc $36				inc 	lowMemory+1
.26b7					_CCNoCarry:
.26b7	20 9e 34	jsr $349e			jsr 	RSReset 					; reset the return stack.
.26ba	a2 06		ldx #$06		ldx	#6
.26bc	20 b3 43	jsr $43b3		jsr	variableHandler
.26bf	20 1e 25	jsr $251e			jsr 	ScanProc 					; scan for procedures
.26c2	20 a3 1e	jsr $1ea3			jsr 	CommandRestore 				; do a restore
.26c5	68		pla				pla
.26c6	a8		tay				tay
.26c7	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/system/list.asm

.0cd7					structIndent:
>0cd7							.fill 	1
.26c8					CommandList:
.26c8	a2 00		ldx #$00			ldx		#0 							; set start/end lines in stack 0/1 to 0 and $FFFF
.26ca	8e d7 0c	stx $0cd7			stx 	structIndent
.26cd	20 11 34	jsr $3411			jsr 	MInt32False
.26d0	e8		inx				inx
.26d1	20 0d 34	jsr $340d			jsr 	MInt32True
.26d4	b1 28		lda ($28),y			lda 	(codePtr),y 				; look at first token
.26d6	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; list ,xxxx
.26d8	f0 15		beq $26ef			beq 	_CLEndLine
.26da	c9 00		cmp #$00			cmp 	#0 							; list ... on its own.
.26dc	30 1b		bmi $26f9			bmi 	_CLDoListing 				; do the whole lot.
.26de	a2 00		ldx #$00			ldx 	#0 							; get start line at stack:0
.26e0	20 79 2d	jsr $2d79			jsr 	EvaluateInteger
.26e3	b1 28		lda ($28),y			lda 	(codePtr),y 				; , follows ?
.26e5	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.26e7	f0 06		beq $26ef			beq 	_CLEndLine
.26e9	20 4f 33	jsr $334f			jsr 	MInt32CopyUp 				; copy first to second if just a line number on its
.26ec	4c f9 26	jmp $26f9			jmp 	_CLDoListing 				; own e.g. list 1100
.26ef					_CLEndLine:
.26ef	c8		iny				iny 								; skip comma
.26f0	b1 28		lda ($28),y			lda 	(codePtr),y  				; no number follows, then its list 1000,
.26f2	30 05		bmi $26f9			bmi 	_CLDoListing
.26f4	a2 01		ldx #$01			ldx 	#1 							; get the last line to list
.26f6	20 79 2d	jsr $2d79			jsr 	EvaluateInteger				; get end
.26f9					_CLDoListing:
.26f9	20 9a 28	jsr $289a			jsr 	ResetCodeAddress 			; back to the start.
.26fc					_CLCheckLoop:
.26fc	a2 02		ldx #$02		ldx	#2
.26fe	20 f6 14	jsr $14f6		jsr	deviceHandler
.2701	a0 00		ldy #$00			ldy 	#0							; check end.
.2703	b1 28		lda ($28),y			lda 	(codePtr),y
.2705	f0 41		beq $2748			beq 	_CLEnd
.2707	a2 00		ldx #$00			ldx 	#0 							; compare vs lower.
.2709	20 4b 27	jsr $274b			jsr 	CLCompareLineTOS
.270c	c9 ff		cmp #$ff			cmp 	#255 						; if < skip
.270e	f0 28		beq $2738			beq 	_CLNext
.2710	e8		inx				inx
.2711	20 4b 27	jsr $274b			jsr 	CLCompareLineTOS 			; compare vs higher
.2714	c9 01		cmp #$01			cmp 	#1
.2716	f0 20		beq $2738			beq 	_CLNext
.2718	a9 80		lda #$80			lda 	#$80 						; undo any down indents this line.
.271a	20 6d 27	jsr $276d			jsr 	CLStructureCheck
.271d	ad d7 0c	lda $0cd7			lda 	structIndent 				; indent level.
.2720	10 02		bpl $2724			bpl 	_CLPositive
.2722	a9 00		lda #$00			lda 	#0
.2724					_CLPositive:
.2724	a2 04		ldx #$04		ldx	#4
.2726	20 e2 3f	jsr $3fe2		jsr	tokeniserHandler
.2729	a9 82		lda #$82			lda 	#$82 						; up indents from this point on.
.272b	20 6d 27	jsr $276d			jsr 	CLStructureCheck
.272e	ad d7 0c	lda $0cd7			lda 	structIndent
.2731	10 05		bpl $2738			bpl 	_CLNext
.2733	a9 00		lda #$00			lda 	#0
.2735	8d d7 0c	sta $0cd7			sta 	structIndent
.2738					_CLNext:
.2738	a0 00		ldy #$00			ldy 	#0 							; go to next line.
.273a	b1 28		lda ($28),y			lda 	(codePtr),y
.273c	18		clc				clc
.273d	65 28		adc $28				adc 	codePtr
.273f	85 28		sta $28				sta 	codePtr
.2741	90 b9		bcc $26fc			bcc 	_CLCheckLoop
.2743	e6 29		inc $29				inc 	codePtr+1
.2745	4c fc 26	jmp $26fc			jmp 	_CLCheckLoop
.2748					_CLEnd:
.2748	4c fa 34	jmp $34fa			jmp 	WarmStart 					; warm start after list.
.274b					CLCompareLineTOS:
.274b	a0 01		ldy #$01			ldy 	#1
.274d	b1 28		lda ($28),y			lda 	(codePtr),y
.274f	55 50		eor $50,x			eor 	esInt0,x
.2751	85 2a		sta $2a				sta 	temp0
.2753	c8		iny				iny
.2754	b1 28		lda ($28),y			lda 	(codePtr),y
.2756	55 58		eor $58,x			eor 	esInt1,x
.2758	05 2a		ora $2a				ora 	temp0
.275a	f0 10		beq $276c			beq 	_CLCLTExit
.275c	88		dey				dey
.275d	b1 28		lda ($28),y			lda 	(codePtr),y
.275f	d5 50		cmp $50,x			cmp 	esInt0,x
.2761	c8		iny				iny
.2762	b1 28		lda ($28),y			lda 	(codePtr),y
.2764	f5 58		sbc $58,x			sbc 	esInt1,x
.2766	a9 ff		lda #$ff			lda 	#255
.2768	90 02		bcc $276c			bcc 	_CLCLTExit
.276a	a9 01		lda #$01			lda 	#1
.276c					_CLCLTExit:
.276c	60		rts				rts
.276d					CLStructureCheck:
.276d	85 2a		sta $2a				sta 	temp0
.276f	a0 03		ldy #$03			ldy 	#3
.2771					_CLSCLoop:
.2771	b1 28		lda ($28),y			lda 	(codePtr),y 				; get and consume token.
.2773	c8		iny				iny
.2774	c9 80		cmp #$80			cmp 	#$80
.2776	90 f9		bcc $2771			bcc 	_CLSCLoop 					; $00-$7F just step over.
.2778	f0 28		beq $27a2			beq		_CLSCExit					; EOL return
.277a	c9 86		cmp #$86			cmp 	#$86 						; special handler
.277c	90 1e		bcc $279c			bcc 	_CLSCSpecial
.277e	c9 99		cmp #$99			cmp 	#TOK_STRUCTST 				; check if structure changer.
.2780	90 ef		bcc $2771			bcc 	_CLSCLoop
.2782	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST
.2784	b0 eb		bcs $2771			bcs 	_CLSCLoop
.2786	aa		tax				tax 								; get adjustment
.2787	bd 95 2c	lda $2c95,x			lda 	ELBinaryOperatorInfo-TOK_BINARYST,x
.278a	c5 2a		cmp $2a				cmp 	temp0	 					; if what we're searching for
.278c	d0 e3		bne $2771			bne 	_CLSCLoop
.278e	38		sec				sec
.278f	e9 81		sbc #$81			sbc 	#$81 						; convert to offset
.2791	0a		asl a				asl 	a 							; double indent step
.2792	18		clc				clc
.2793	6d d7 0c	adc $0cd7			adc 	structIndent 				; add to structure indent
.2796	8d d7 0c	sta $0cd7			sta 	structIndent
.2799	4c 71 27	jmp $2771			jmp 	_CLSCLoop
.279c					_CLSCSpecial:
.279c	20 f9 25	jsr $25f9			jsr 	ScannerSkipSpecial
.279f	4c 71 27	jmp $2771			jmp 	_CLSCLoop
.27a2					_CLSCExit:
.27a2	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/system/loadsave.asm

.27a3					CommandLoad:
.27a3	20 cb 27	jsr $27cb			jsr 	CLSParameters 					; get parameters for load.
.27a6	08		php				php
.27a7	a2 0e		ldx #$0e		ldx	#14
.27a9	20 f6 14	jsr $14f6		jsr	deviceHandler
.27ac	28		plp				plp
.27ad	b0 08		bcs $27b7			bcs 	_CLExit 						; if CC then load a program, so warm start.
.27af	20 6d 26	jsr $266d			jsr 	CommandClear
.27b2	a2 04		ldx #$04		ldx	#4
.27b4	20 65 1e	jsr $1e65		jsr	interactionHandler
.27b7					_CLExit
.27b7	60		rts				rts
.27b8					CommandSave:
.27b8	20 cb 27	jsr $27cb			jsr 	CLSParameters					; get parameters for save
.27bb	90 08		bcc $27c5			bcc 	_CSNoOverrideAddress
.27bd	20 91 34	jsr $3491			jsr 	CheckComma 						; should be a comma.
.27c0	a2 02		ldx #$02			ldx 	#2
.27c2	20 79 2d	jsr $2d79			jsr 	EvaluateInteger 				; get save end address.
.27c5					_CSNoOverrideAddress:
.27c5	a2 18		ldx #$18		ldx	#24
.27c7	20 f6 14	jsr $14f6		jsr	deviceHandler
.27ca	60		rts				rts
.27cb					CLSParameters:
.27cb	a2 00		ldx #$00			ldx 	#0 								; string
.27cd	20 6e 2d	jsr $2d6e			jsr 	EvaluateString
.27d0	e8		inx				inx 									; erase out +1 +2
.27d1	20 11 34	jsr $3411			jsr 	MInt32False
.27d4	e8		inx				inx
.27d5	20 11 34	jsr $3411			jsr 	MInt32False
.27d8	ad c8 0a	lda $0ac8			lda 	basePage 						; default start address.
.27db	85 51		sta $51				sta 	esInt0+1
.27dd	ad c9 0a	lda $0ac9			lda 	basePage+1
.27e0	85 59		sta $59				sta 	esInt1+1
.27e2	ad ca 0a	lda $0aca			lda 	endProgram 						; default end address
.27e5	85 52		sta $52				sta 	esInt0+2
.27e7	ad cb 0a	lda $0acb			lda 	endProgram+1
.27ea	85 5a		sta $5a				sta 	esInt1+2
.27ec	b1 28		lda ($28),y			lda 	(codePtr),y 					; , following
.27ee	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.27f0	d0 08		bne $27fa			bne 	_CLSDefault
.27f2	c8		iny				iny 									; skip comma
.27f3	a2 01		ldx #$01			ldx 	#1 								; get numeric value.
.27f5	20 79 2d	jsr $2d79			jsr 	EvaluateInteger
.27f8	38		sec				sec
.27f9	60		rts				rts
.27fa					_CLSDefault:
.27fa	18		clc				clc
.27fb	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/system/new.asm

.27fc					Command_New:
.27fc					Command_XNew:
.27fc	20 9a 28	jsr $289a			jsr 	ResetCodeAddress 			; point to first line
.27ff	a0 00		ldy #$00			ldy 	#0 							; and zap it.
.2801	98		tya				tya
.2802	91 28		sta ($28),y			sta 	(codePtr),y
.2804	20 6d 26	jsr $266d			jsr 	CommandClear 				; clear everything down.
.2807	4c c3 21	jmp $21c3			jmp 	CommandEND 					; do END code, as there's nothing to run.

;******  Return to file: main/main.asm


;******  Processing file: main/commands/system/run.asm

.0cd8					breakCounter:
>0cd8								.fill 	1
.0cd9					breakIncrement:
>0cd9								.fill 	1
.280a					Command_Run:
.280a					XCommand_Run:
.280a	a2 ff		ldx #$ff			ldx 	#$FF 						; reset the stack.
.280c	9a		txs				txs
.280d	20 94 28	jsr $2894			jsr 	BreakOn 					; turn break on
.2810	20 6d 26	jsr $266d			jsr 	CommandClear 				; clear everything.
.2813	20 9a 28	jsr $289a			jsr 	ResetCodeAddress 			; back to the start.
.2816					Command_RunFrom:
.2816	a0 03		ldy #$03			ldy 	#3 							; over offset/line #
.2818					CRNextInstruction:
.2818	64 3a		stz $3a				stz 	softMemAlloc+1
.281a	ad d8 0c	lda $0cd8			lda 	breakCounter 				; check for break.
.281d	6d d9 0c	adc $0cd9			adc 	breakIncrement
.2820	8d d8 0c	sta $0cd8			sta 	breakCounter
.2823	90 05		bcc $282a			bcc 	_CRNoChecks
.2825	a2 02		ldx #$02		ldx	#2
.2827	20 f6 14	jsr $14f6		jsr	deviceHandler
.282a					_CRNoChecks
.282a	b1 28		lda ($28),y			lda 	(codePtr),y 				; get next token.
.282c	10 1c		bpl $284a			bpl 	_CRNotToken
.282e	c9 c9		cmp #$c9			cmp 	#TOK_TOKENS 				; if in the tokens then do that token.
.2830	b0 0c		bcs $283e			bcs 	_CRExecute
.2832	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST 				; unary is ignored.
.2834	b0 71		bcs $28a7			bcs 	Unimplemented
.2836	c9 99		cmp #$99			cmp 	#TOK_STRUCTST 				; execute structures.
.2838	b0 04		bcs $283e			bcs 	_CRExecute
.283a	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; if one of the system tokens $80-$85 do that
.283c	b0 16		bcs $2854			bcs 	_CRCheckIndirect 			; if in that unused range check for ! or ? or AND
.283e					_CRExecute:
.283e	c8		iny				iny 								; consume it.
.283f	0a		asl a				asl 	a 							; double it, losing most significant bit.
.2840	aa		tax				tax
.2841	20 47 28	jsr $2847			jsr 	_CRRunRoutine 				; we want to do jsr (group0vectors,x)
.2844	4c 18 28	jmp $2818			jmp 	CRNextInstruction
.2847					_CRRunRoutine:
.2847	7c b1 28	jmp ($28b1,x)			jmp 	(Group0Vectors,x)
.284a					_CRNotToken:
.284a	c9 40		cmp #$40			cmp 	#$40 						; if 0-3F then it is a letter
.284c	b0 59		bcs $28a7			bcs 	Unimplemented
.284e					_CRDefaultLet:
.284e	20 f6 20	jsr $20f6			jsr 	CommandLet 					; do the default, LET
.2851	4c 18 28	jmp $2818			jmp 	CRNextInstruction
.2854					_CRCheckIndirect:
.2854	c9 86		cmp #$86			cmp 	#TKW_AND 					; AND (assembler)
.2856	f0 0a		beq $2862			beq 	_CRAndCommand
.2858	c9 97		cmp #$97			cmp 	#TKW_PLING 					; !<term> =
.285a	f0 f2		beq $284e			beq 	_CRDefaultLet
.285c	c9 98		cmp #$98			cmp 	#TKW_QMARK 					; ?<term> =
.285e	f0 ee		beq $284e			beq 	_CRDefaultLet
.2860	d0 45		bne $28a7			bne 	Unimplemented
.2862					_CRAndCommand:
.2862	c8		iny				iny 								; skip over the AND token
.2863	a9 95		lda #$95			lda 	#TKW_LPARENANDRPAREN 		; replace it with the pseudo-and
.2865	20 7f 28	jsr $287f			jsr 	CommandAssembler 			; do the assembler command
.2868	4c 18 28	jmp $2818			jmp 	CRNextInstruction 			; and loop round.
.286b					CommandShift1:
.286b	b1 28		lda ($28),y			lda 	(codePtr),y 				; get shifted value
.286d	10 38		bpl $28a7			bpl 	Unimplemented 				; we have an error as this should not happen.
.286f	c8		iny				iny 								; advance over it.
.2870	c9 94		cmp #$94			cmp 	#TKA_GROUP1 				; is it an assembler constant ?
.2872	b0 0b		bcs $287f			bcs 	CommandAssembler
.2874	0a		asl a				asl 	a 							; double into X
.2875	aa		tax				tax
.2876	7c 75 29	jmp ($2975,x)			jmp 	(Group1Vectors-12,x) 		; and do the code.
.2879					CommandShift2:
.2879	a9 ff		lda #$ff			lda 	#$FF 						; $FF means command not unary function.
.287b	20 60 18	jsr $1860		jsr	extensionHandler
.287e	60		rts				rts
.287f					CommandAssembler:
.287f	a2 02		ldx #$02		ldx	#2
.2881	20 b4 13	jsr $13b4		jsr	assemblerHandler
.2884	60		rts				rts
.2885					CommandAssemblerLabel:
.2885	a2 04		ldx #$04		ldx	#4
.2887	20 b4 13	jsr $13b4		jsr	assemblerHandler
.288a	60		rts				rts
.288b					CommandColon:
.288b	60		rts				rts
.288c					CommandBreak:
.288c	20 77 2d	jsr $2d77			jsr 	EvaluateRootInteger
.288f	20 38 34	jsr $3438			jsr 	MInt32Zero
.2892	f0 02		beq $2896			beq 	BreakOff
.2894					BreakOn:
.2894	a2 08		ldx #$08			ldx 	#8
.2896					BreakOff:
.2896	8e d9 0c	stx $0cd9			stx 	breakIncrement
.2899	60		rts				rts
.289a					ResetCodeAddress:
.289a	ad c8 0a	lda $0ac8			lda 	basePage 					; copy basePage to code Pointer
.289d	85 28		sta $28				sta 	codePtr
.289f	ad c9 0a	lda $0ac9			lda 	basePage+1
.28a2	85 29		sta $29				sta 	codePtr+1
.28a4	a0 03		ldy #$03			ldy 	#3 							; offset after offset link and line#
.28a6	60		rts				rts
.28a7					Unimplemented:
.28a7	a2 01		ldx #$01			ldx 	#ErrorID_Missing
.28a9	20 18 15	jsr $1518		jsr	errorHandler
.28ac					TKErr01:
.28ac					TKErr02:
.28ac					TKErr03:
.28ac					TKErr04:
.28ac					TKErr05:
.28ac					TKErr06:
.28ac					TKErr07:
.28ac					TKErr08:
.28ac					TKErr09:
.28ac					TKErr10:
.28ac					TKErr11:
.28ac					TKErr12:
.28ac					TKErr13:
.28ac					TKErr14:
.28ac	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.28ae	20 18 15	jsr $1518		jsr	errorHandler

;******  Processing file: main/commands/system/../../../generated/tokenvectors0.inc

.28b1					Group0Vectors:
>28b1	c9 21					.word	AdvanceNextLine          ; $80 [[eol]]
>28b3	6b 28					.word	CommandShift1            ; $81 [[sh1]]
>28b5	79 28					.word	CommandShift2            ; $82 [[sh2]]
>28b7	ac 28					.word	TKErr09                  ; $83 [[sh3]]
>28b9	ac 28					.word	TKErr10                  ; $84 [[fpc]]
>28bb	ac 28					.word	TKErr08                  ; $85 [[str]]
>28bd	5e 2a					.word	AndHandler               ; $86 and
>28bf	4b 2a					.word	OrHandler                ; $87 or
>28c1	38 2a					.word	XorHandler               ; $88 xor
>28c3	80 2b					.word	CompareGreaterEq         ; $89 >=
>28c5	8a 2b					.word	CompareLessEq            ; $8a <=
>28c7	6c 2b					.word	CompareGreater           ; $8b >
>28c9	62 2b					.word	CompareLess              ; $8c <
>28cb	58 2b					.word	CompareEquals            ; $8d =
>28cd	76 2b					.word	CompareNotEquals         ; $8e <>
>28cf	c9 29					.word	AddHandler               ; $8f +
>28d1	ec 29					.word	SubHandler               ; $90 -
>28d3	84 2a					.word	ShrHandler               ; $91 >>
>28d5	71 2a					.word	ShlHandler               ; $92 <<
>28d7	ff 29					.word	MulHandler               ; $93 *
>28d9	12 2a					.word	DivHandler               ; $94 /
>28db	25 2a					.word	ModHandler               ; $95 mod
>28dd	bd 2a					.word	PowerHandler             ; $96 ^
>28df	97 2a					.word	WordRefHandler           ; $97 !
>28e1	aa 2a					.word	ByteRefHandler           ; $98 ?
>28e3	88 25					.word	Command_Repeat           ; $99 repeat
>28e5	32 26					.word	Command_While            ; $9a while
>28e7	dd 21					.word	Command_FOR              ; $9b for
>28e9	ec 22					.word	CommandIf                ; $9c if
>28eb	ac 28					.word	TKErr04                  ; $9d defproc
>28ed	95 25					.word	Command_Until            ; $9e until
>28ef	55 26					.word	Command_Wend             ; $9f wend
>28f1	3e 22					.word	Command_NEXT             ; $a0 next
>28f3	ac 28					.word	TKErr06                  ; $a1 then
>28f5	27 23					.word	Command_ENDIF            ; $a2 endif
>28f7	97 24					.word	ReturnProc               ; $a3 endproc
>28f9	e4 2c					.word	UnaryParenthesis         ; $a4 (
>28fb	c6 2e					.word	UnaryLen                 ; $a5 len(
>28fd	0a 2f					.word	UnarySgn                 ; $a6 sgn(
>28ff	f3 2e					.word	UnaryAbs                 ; $a7 abs(
>2901	63 2f					.word	Unary_Random             ; $a8 random(
>2903	ad 2f					.word	Unary_Page               ; $a9 page
>2905	0d 34					.word	MInt32True               ; $aa true
>2907	11 34					.word	MInt32False              ; $ab false
>2909	78 2f					.word	Unary_Min                ; $ac min(
>290b	7c 2f					.word	Unary_Max                ; $ad max(
>290d	85 30					.word	UnarySys                 ; $ae sys(
>290f	2e 30					.word	UnaryTimer               ; $af timer(
>2911	43 2e					.word	EventFunction            ; $b0 event(
>2913	57 30					.word	UnaryGet                 ; $b1 get(
>2915	47 30					.word	UnaryInkey               ; $b2 inkey(
>2917	fe 2f					.word	UnaryAlloc               ; $b3 alloc(
>2919	be 30					.word	ExecChr                  ; $b4 chr$(
>291b	ee 30					.word	ExecLeft                 ; $b5 left$(
>291d	0b 31					.word	ExecMid                  ; $b6 mid$(
>291f	33 31					.word	ExecRight                ; $b7 right$(
>2921	c5 2d					.word	Event_Str                ; $b8 str$(
>2923	f4 2d					.word	UnaryVal                 ; $b9 val(
>2925	21 2f					.word	UnaryPeek                ; $ba peek(
>2927	27 2f					.word	UnaryDeek                ; $bb deek(
>2929	2d 2f					.word	UnaryLeek                ; $bc leek(
>292b	e4 2e					.word	UnaryAsc                 ; $bd asc(
>292d	d8 2f					.word	UnaryIntToFloat          ; $be int(
>292f	eb 2f					.word	UnaryFloatToInt          ; $bf float(
>2931	f7 2d					.word	UnaryIsVal               ; $c0 isval(
>2933	d5 30					.word	ExecUpper                ; $c1 upper$(
>2935	d2 30					.word	ExecLower                ; $c2 lower$(
>2937	bb 2f					.word	UnaryReference           ; $c3 @
>2939	d1 2f					.word	UnaryComplement          ; $c4 ~
>293b	ce 2f					.word	UnaryHexMarker           ; $c5 &
>293d	70 30					.word	UnaryGetString           ; $c6 get$(
>293f	76 30					.word	UnaryInkeyString         ; $c7 inkey$(
>2941	ad 30					.word	UnaryMem                 ; $c8 mem
>2943	ac 28					.word	TKErr01                  ; $c9 )
>2945	8b 28					.word	CommandColon             ; $ca :
>2947	ac 28					.word	TKErr02                  ; $cb ,
>2949	ac 28					.word	TKErr03                  ; $cc ;
>294b	b1 21					.word	Command_Rem2             ; $cd '
>294d	ac 28					.word	TKErr07                  ; $ce to
>294f	ac 28					.word	TKErr05                  ; $cf step
>2951	2a 24					.word	CallProc                 ; $d0 proc
>2953	28 23					.word	CommandLocal             ; $d1 local
>2955	e8 20					.word	Command_Dim              ; $d2 dim
>2957	b1 21					.word	Command_Rem              ; $d3 rem
>2959	f6 20					.word	CommandLet               ; $d4 let
>295b	32 1f					.word	Command_Input            ; $d5 input
>295d	21 23					.word	Command_ELSE             ; $d6 else
>295f	b9 20					.word	Command_VDU              ; $d7 vdu
>2961	e8 1f					.word	Command_Print            ; $d8 print
>2963	9a 1e					.word	CommandData              ; $d9 data
>2965	ac 28					.word	TKErr13                  ; $da image
>2967	ac 28					.word	TKErr12                  ; $db at
>2969	ac 28					.word	TKErr14                  ; $dc flip
>296b	da 20					.word	Command_Assert           ; $dd assert
>296d	74 21					.word	Command_Poke             ; $de poke
>296f	78 21					.word	Command_Doke             ; $df doke
>2971	7c 21					.word	Command_Loke             ; $e0 loke
>2973	89 20					.word	Command_Ink              ; $e1 ink
>2975	94 20					.word	Command_Paper            ; $e2 paper
>2977	83 20					.word	Command_CLS              ; $e3 cls
>2979	9f 20					.word	Command_Locate           ; $e4 locate
>297b	85 28					.word	CommandAssemblerLabel    ; $e5 .
>297d	ac 28					.word	TKErr11                  ; $e6 #
>297f	6d 26					.word	CommandClear             ; $e7 clear

;******  Return to file: main/commands/system/run.asm


;******  Processing file: main/commands/system/../../../generated/tokenvectors1.inc

.2981					Group1Vectors:
>2981	a3 27					.word	CommandLoad              ; $86 load
>2983	b8 27					.word	CommandSave              ; $87 save
>2985	c8 26					.word	CommandList              ; $88 list
>2987	fc 27					.word	Command_New              ; $89 new
>2989	8c 28					.word	CommandBreak             ; $8a break
>298b	0a 28					.word	Command_Run              ; $8b run
>298d	6f 1e					.word	CommandRead              ; $8c read
>298f	a3 1e					.word	CommandRestore           ; $8d restore
>2991	c3 21					.word	CommandEnd               ; $8e end
>2993	be 21					.word	CommandStop              ; $8f stop
>2995	c6 21					.word	CommandXemu              ; $90 xemu
>2997	00 1f					.word	CommandGOTO              ; $91 goto
>2999	d5 1e					.word	CommandGOSUB             ; $92 gosub
>299b	e8 1e					.word	CommandRETURN            ; $93 return

;******  Return to file: main/commands/system/run.asm


;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/binary/binary.asm

.299d					BinaryProcess:
.299d	b5 48		lda $48,x			lda 	esType,x 					; or type bytes together and check bit 6.
.299f	15 49		ora $49,x			ora 	esType+1,x 					; (the float bit)
.29a1	0a		asl a				asl 	a
.29a2	30 0e		bmi $29b2			bmi 	_BPStringType 				; if bit 6 is set, then string type, error
.29a4	18		clc				clc 								; return CC for integer
.29a5	29 02		and #$02			and 	#$02 						; $02 because of ASL A. check original bit 1.
.29a7	f0 08		beq $29b1			beq 	_BPExit 					; if both integer then return with CC.
.29a9	20 b7 29	jsr $29b7			jsr 	BPMakeBothFloat 			; make both float
.29ac	a9 01		lda #$01			lda 	#$01 						; set result type to float
.29ae	95 48		sta $48,x			sta 	esType,x
.29b0	38		sec				sec 								; and return with carry set.
.29b1					_BPExit:
.29b1	60		rts				rts
.29b2					_BPStringType:
.29b2	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.29b4	20 18 15	jsr $1518		jsr	errorHandler
.29b7					BPMakeBothFloat:
.29b7	e8		inx				inx
.29b8	20 bc 29	jsr $29bc			jsr 	BPMakeFloat 				; one is a float, so we do both as floats.
.29bb	ca		dex				dex
.29bc					BPMakeFloat:
.29bc	b5 48		lda $48,x			lda 	esType,x 					; get type bit which is in bit 0
.29be	4a		lsr a				lsr 	a
.29bf	b0 07		bcs $29c8			bcs 	_BPIsFloat 					; already a float if set.
.29c1	8a		txa				txa
.29c2	a2 1c		ldx #$1c		ldx	#28
.29c4	20 79 1c	jsr $1c79		jsr	floatingpointHandler
.29c7	aa		tax				tax
.29c8					_BPIsFloat:
.29c8	60		rts				rts
.29c9					AddHandler:
.29c9	20 9a 2b	jsr $2b9a			jsr 	DereferenceTwo 				; dereference top two on stack.
.29cc	b5 48		lda $48,x			lda 	esType,x 					; check two strings.
.29ce	35 49		and $49,x			and 	esType+1,x
.29d0	29 40		and #$40			and 	#$40 						; if both have bit 6 set ... we have two strings
.29d2	d0 10		bne $29e4			bne 	_AHStringConcat				; concatenate strings.
.29d4	20 9d 29	jsr $299d			jsr 	BinaryProcess 				; check to see if either is float
.29d7	b0 03		bcs $29dc			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.29d9	4c f5 32	jmp $32f5			jmp 	MInt32Add 							; else do it as integer.
.29dc					_IsFPOperation:
.29dc	8a		txa				txa 								; call the relevant fp routine
.29dd	a2 04		ldx #$04		ldx	#4
.29df	20 79 1c	jsr $1c79		jsr	floatingpointHandler
.29e2	aa		tax				tax
.29e3	60		rts				rts
.29e4					_AHStringConcat:
.29e4	8a		txa				txa 								; handled by the string module.
.29e5	a2 06		ldx #$06		ldx	#6
.29e7	20 bc 37	jsr $37bc		jsr	stringHandler
.29ea	aa		tax				tax
.29eb	60		rts				rts
.29ec					SubHandler:
.29ec	20 9a 2b	jsr $2b9a			jsr 	DereferenceTwo
.29ef	20 9d 29	jsr $299d			jsr 	BinaryProcess 				; check to see if either is float
.29f2	b0 03		bcs $29f7			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.29f4	4c 0f 33	jmp $330f			jmp 	MInt32Sub 							; else do it as integer.
.29f7					_IsFPOperation:
.29f7	8a		txa				txa 								; call the relevant fp routine
.29f8	a2 12		ldx #$12		ldx	#18
.29fa	20 79 1c	jsr $1c79		jsr	floatingpointHandler
.29fd	aa		tax				tax
.29fe	60		rts				rts
.29ff					MulHandler:
.29ff	20 9a 2b	jsr $2b9a			jsr 	DereferenceTwo
.2a02	20 9d 29	jsr $299d			jsr 	BinaryProcess 				; check to see if either is float
.2a05	b0 03		bcs $2a0a			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.2a07	4c 29 33	jmp $3329			jmp 	MInt32Multiply 							; else do it as integer.
.2a0a					_IsFPOperation:
.2a0a	8a		txa				txa 								; call the relevant fp routine
.2a0b	a2 0c		ldx #$0c		ldx	#12
.2a0d	20 79 1c	jsr $1c79		jsr	floatingpointHandler
.2a10	aa		tax				tax
.2a11	60		rts				rts
.2a12					DivHandler:
.2a12	20 9a 2b	jsr $2b9a			jsr 	DereferenceTwo
.2a15	20 9d 29	jsr $299d			jsr 	BinaryProcess 				; check to see if either is float
.2a18	b0 03		bcs $2a1d			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.2a1a	4c e6 31	jmp $31e6			jmp 	MInt32SDivide 							; else do it as integer.
.2a1d					_IsFPOperation:
.2a1d	8a		txa				txa 								; call the relevant fp routine
.2a1e	a2 08		ldx #$08		ldx	#8
.2a20	20 79 1c	jsr $1c79		jsr	floatingpointHandler
.2a23	aa		tax				tax
.2a24	60		rts				rts
.2a25					ModHandler:
.2a25	20 9a 2b	jsr $2b9a			jsr 	DereferenceTwo
.2a28	20 9d 29	jsr $299d			jsr 	BinaryProcess 				; check to see if either is float
.2a2b	b0 03		bcs $2a30			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.2a2d	4c 64 32	jmp $3264			jmp 	MInt32Modulus 							; else do it as integer.
.2a30					_IsFPOperation:
.2a30	8a		txa				txa 								; call the relevant fp routine
.2a31	a2 0a		ldx #$0a		ldx	#10
.2a33	20 79 1c	jsr $1c79		jsr	floatingpointHandler
.2a36	aa		tax				tax
.2a37	60		rts				rts
.2a38					XorHandler:
.2a38	20 9a 2b	jsr $2b9a			jsr 	DereferenceTwo
.2a3b	20 9d 29	jsr $299d			jsr 	BinaryProcess 				; check to see if either is float
.2a3e	b0 03		bcs $2a43			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.2a40	4c 98 31	jmp $3198			jmp 	MInt32Xor 							; else do it as integer.
.2a43					_IsFPOperation:
.2a43	8a		txa				txa 								; call the relevant fp routine
.2a44	a2 0a		ldx #$0a		ldx	#10
.2a46	20 79 1c	jsr $1c79		jsr	floatingpointHandler
.2a49	aa		tax				tax
.2a4a	60		rts				rts
.2a4b					OrHandler:
.2a4b	20 9a 2b	jsr $2b9a			jsr 	DereferenceTwo
.2a4e	20 9d 29	jsr $299d			jsr 	BinaryProcess 				; check to see if either is float
.2a51	b0 03		bcs $2a56			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.2a53	4c 7f 31	jmp $317f			jmp 	MInt32Or 							; else do it as integer.
.2a56					_IsFPOperation:
.2a56	8a		txa				txa 								; call the relevant fp routine
.2a57	a2 0a		ldx #$0a		ldx	#10
.2a59	20 79 1c	jsr $1c79		jsr	floatingpointHandler
.2a5c	aa		tax				tax
.2a5d	60		rts				rts
.2a5e					AndHandler:
.2a5e	20 9a 2b	jsr $2b9a			jsr 	DereferenceTwo
.2a61	20 9d 29	jsr $299d			jsr 	BinaryProcess 				; check to see if either is float
.2a64	b0 03		bcs $2a69			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.2a66	4c 66 31	jmp $3166			jmp 	MInt32And 							; else do it as integer.
.2a69					_IsFPOperation:
.2a69	8a		txa				txa 								; call the relevant fp routine
.2a6a	a2 0a		ldx #$0a		ldx	#10
.2a6c	20 79 1c	jsr $1c79		jsr	floatingpointHandler
.2a6f	aa		tax				tax
.2a70	60		rts				rts
.2a71					ShlHandler:
.2a71	20 9a 2b	jsr $2b9a			jsr 	DereferenceTwo
.2a74	20 9d 29	jsr $299d			jsr 	BinaryProcess 				; check to see if either is float
.2a77	b0 03		bcs $2a7c			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.2a79	4c f2 2a	jmp $2af2			jmp 	Mint32ShiftLeftX 							; else do it as integer.
.2a7c					_IsFPOperation:
.2a7c	8a		txa				txa 								; call the relevant fp routine
.2a7d	a2 0a		ldx #$0a		ldx	#10
.2a7f	20 79 1c	jsr $1c79		jsr	floatingpointHandler
.2a82	aa		tax				tax
.2a83	60		rts				rts
.2a84					ShrHandler:
.2a84	20 9a 2b	jsr $2b9a			jsr 	DereferenceTwo
.2a87	20 9d 29	jsr $299d			jsr 	BinaryProcess 				; check to see if either is float
.2a8a	b0 03		bcs $2a8f			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.2a8c	4c f5 2a	jmp $2af5			jmp 	MInt32ShiftRightX 							; else do it as integer.
.2a8f					_IsFPOperation:
.2a8f	8a		txa				txa 								; call the relevant fp routine
.2a90	a2 0a		ldx #$0a		ldx	#10
.2a92	20 79 1c	jsr $1c79		jsr	floatingpointHandler
.2a95	aa		tax				tax
.2a96	60		rts				rts
.2a97					WordRefHandler:
.2a97	20 9a 2b	jsr $2b9a			jsr 	DereferenceTwo
.2a9a	20 9d 29	jsr $299d			jsr 	BinaryProcess 				; check to see if either is float
.2a9d	b0 03		bcs $2aa2			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.2a9f	4c e4 2a	jmp $2ae4			jmp 	MInt32WordIndirect 							; else do it as integer.
.2aa2					_IsFPOperation:
.2aa2	8a		txa				txa 								; call the relevant fp routine
.2aa3	a2 0a		ldx #$0a		ldx	#10
.2aa5	20 79 1c	jsr $1c79		jsr	floatingpointHandler
.2aa8	aa		tax				tax
.2aa9	60		rts				rts
.2aaa					ByteRefHandler:
.2aaa	20 9a 2b	jsr $2b9a			jsr 	DereferenceTwo
.2aad	20 9d 29	jsr $299d			jsr 	BinaryProcess 				; check to see if either is float
.2ab0	b0 03		bcs $2ab5			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.2ab2	4c e8 2a	jmp $2ae8			jmp 	MInt32ByteIndirect 							; else do it as integer.
.2ab5					_IsFPOperation:
.2ab5	8a		txa				txa 								; call the relevant fp routine
.2ab6	a2 0a		ldx #$0a		ldx	#10
.2ab8	20 79 1c	jsr $1c79		jsr	floatingpointHandler
.2abb	aa		tax				tax
.2abc	60		rts				rts
.2abd					PowerHandler:
.2abd	20 9a 2b	jsr $2b9a			jsr 	DereferenceTwo
.2ac0	20 9d 29	jsr $299d			jsr 	BinaryProcess 				; check to see if either is float
.2ac3	b0 03		bcs $2ac8			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.2ac5	4c d0 2a	jmp $2ad0			jmp 	PowerInteger 							; else do it as integer.
.2ac8					_IsFPOperation:
.2ac8	8a		txa				txa 								; call the relevant fp routine
.2ac9	a2 18		ldx #$18		ldx	#24
.2acb	20 79 1c	jsr $1c79		jsr	floatingpointHandler
.2ace	aa		tax				tax
.2acf	60		rts				rts
.2ad0					PowerInteger:
.2ad0	20 b7 29	jsr $29b7			jsr 	BPMakeBothFloat				; make them float.
.2ad3	8a		txa				txa
.2ad4	a2 18		ldx #$18		ldx	#24
.2ad6	20 79 1c	jsr $1c79		jsr	floatingpointHandler
.2ad9	a2 14		ldx #$14		ldx	#20
.2adb	20 79 1c	jsr $1c79		jsr	floatingpointHandler
.2ade	aa		tax				tax
.2adf	a9 00		lda #$00			lda 	#0 							; make type integer
.2ae1	95 48		sta $48,x			sta 	esType,x
.2ae3	60		rts				rts
.2ae4					Mint32WordIndirect:
.2ae4	a9 80		lda #$80	 		lda 	#$80 				 		; word reference type (bit 7 set)
.2ae6	d0 02		bne $2aea			bne 	Min32Indirect
.2ae8					Mint32ByteIndirect:
.2ae8	a9 a0		lda #$a0			lda 	#$A0 						; byte reference type (bit 7, bit 5 set)
.2aea					Min32Indirect:
.2aea	48		pha				pha 								; save the indirection
.2aeb	20 f5 32	jsr $32f5			jsr 	MInt32Add 					; add a!b a?b
.2aee	68		pla				pla 								; and set the type to reference.
.2aef	95 48		sta $48,x			sta 	esType,x 	 				; so a!b => a+b and it's a reference....
.2af1	60		rts				rts
.2af2					Mint32ShiftLeftX:
.2af2	18		clc				clc 								; CC shift left
.2af3	90 01		bcc $2af6			bcc 	Mint32Shift
.2af5					Mint32ShiftRightX:
.2af5	38		sec				sec 								; CS shift right
.2af6					Mint32Shift:
.2af6	08		php				php 								; save carry flag on stack.
.2af7	b5 59		lda $59,x			lda 	esInt1+1,x 					; if shift >= 32 then it is zero.
.2af9	15 61		ora $61,x			ora 	esInt2+1,x
.2afb	15 69		ora $69,x			ora 	esInt3+1,x
.2afd	d0 1e		bne $2b1d			bne 	_MShiftZero
.2aff	b5 51		lda $51,x			lda 	esInt0+1,x
.2b01	c9 20		cmp #$20			cmp 	#32
.2b03	b0 18		bcs $2b1d			bcs 	_MShiftZero
.2b05					_MShiftLoop:
.2b05	b5 51		lda $51,x			lda 	esInt0+1,x 					; check count is zero
.2b07	f0 12		beq $2b1b			beq 	_MShiftExit
.2b09	d6 51		dec $51,x			dec 	esInt0+1,x
.2b0b	28		plp				plp 								; restore and save carry
.2b0c	08		php				php
.2b0d	90 06		bcc $2b15			bcc 	_MShiftLeft 				; and shift left/right accordingly.
.2b0f	20 2f 34	jsr $342f			jsr 	Mint32ShiftRight
.2b12	4c 05 2b	jmp $2b05			jmp 	_MShiftLoop
.2b15					_MShiftLeft:
.2b15	20 26 34	jsr $3426			jsr 	Mint32ShiftLeft
.2b18	4c 05 2b	jmp $2b05			jmp 	_MShiftLoop
.2b1b					_MShiftExit:
.2b1b	28		plp				plp	 								; throw saved carry and exit
.2b1c	60		rts				rts
.2b1d					_MShiftZero:
.2b1d	4c 11 34	jmp $3411			jmp 	MInt32False 				; return 0 as shifted >= 32 times.

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/binary/compare.asm

.2b20					PerformComparison:
.2b20	20 9a 2b	jsr $2b9a			jsr 	DereferenceTwo 				; make both values.
.2b23	b5 48		lda $48,x			lda 	esType,x 					; check for two strings.
.2b25	35 49		and $49,x			and 	esType+1,x
.2b27	0a		asl a				asl 	a 							; bit 7 set if both bit 6s were set.
.2b28	30 1d		bmi $2b47			bmi 	_PCIsString
.2b2a	b5 48		lda $48,x			lda 	esType,x 					; check either is floating point.
.2b2c	15 49		ora $49,x			ora 	esType+1,x
.2b2e	0a		asl a				asl 	a 							; shift bit 6 (string) to bit 7, mixed types
.2b2f	30 22		bmi $2b53			bmi 	_PCError
.2b31	29 02		and #$02			and 	#$02 						; because of ASL, check type in bit 0
.2b33	f0 0f		beq $2b44			beq 	_PCIsInteger 				; if not two integers, e.g. 1 of the bits is set
.2b35	20 b7 29	jsr $29b7			jsr 	BPMakeBothFloat 			; make both float
.2b38	8a		txa				txa
.2b39	a2 06		ldx #$06		ldx	#6
.2b3b	20 79 1c	jsr $1c79		jsr	floatingpointHandler
.2b3e	86 32		stx $32				stx 	tempShort 					; save result
.2b40	aa		tax				tax
.2b41	a5 32		lda $32				lda 	tempShort
.2b43	60		rts				rts
.2b44					_PCIsInteger:
.2b44	4c b1 31	jmp $31b1			jmp 	MInt32Compare
.2b47					_PCIsString:
.2b47	8a		txa				txa 								; A has SP
.2b48	a2 0a		ldx #$0a		ldx	#10
.2b4a	20 bc 37	jsr $37bc		jsr	stringHandler
.2b4d	86 32		stx $32				stx 	tempShort 					; save result
.2b4f	aa		tax				tax 								; put SP back in X and get result.
.2b50	a5 32		lda $32				lda 	tempShort
.2b52	60		rts				rts
.2b53					_PCError:
.2b53	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.2b55	20 18 15	jsr $1518		jsr	errorHandler
.2b58					CompareEquals:
.2b58	20 20 2b	jsr $2b20			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.2b5b	c9 00		cmp #$00			cmp 	#$00 						; and we do something if it is = or <> a value.
.2b5d	f0 35		beq $2b94			beq  	CompareTrue
.2b5f	4c 97 2b	jmp $2b97			jmp 	CompareFalse
.2b62					CompareLess:
.2b62	20 20 2b	jsr $2b20			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.2b65	c9 ff		cmp #$ff			cmp 	#$FF 						; and we do something if it is = or <> a value.
.2b67	f0 2b		beq $2b94			beq  	CompareTrue
.2b69	4c 97 2b	jmp $2b97			jmp 	CompareFalse
.2b6c					CompareGreater:
.2b6c	20 20 2b	jsr $2b20			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.2b6f	c9 01		cmp #$01			cmp 	#$01 						; and we do something if it is = or <> a value.
.2b71	f0 21		beq $2b94			beq  	CompareTrue
.2b73	4c 97 2b	jmp $2b97			jmp 	CompareFalse
.2b76					CompareNotEquals:
.2b76	20 20 2b	jsr $2b20			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.2b79	c9 00		cmp #$00			cmp 	#$00 						; and we do something if it is = or <> a value.
.2b7b	d0 17		bne $2b94			bne  	CompareTrue
.2b7d	4c 97 2b	jmp $2b97			jmp 	CompareFalse
.2b80					CompareGreaterEq:
.2b80	20 20 2b	jsr $2b20			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.2b83	c9 ff		cmp #$ff			cmp 	#$FF 						; and we do something if it is = or <> a value.
.2b85	d0 0d		bne $2b94			bne  	CompareTrue
.2b87	4c 97 2b	jmp $2b97			jmp 	CompareFalse
.2b8a					CompareLessEq:
.2b8a	20 20 2b	jsr $2b20			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.2b8d	c9 01		cmp #$01			cmp 	#$01 						; and we do something if it is = or <> a value.
.2b8f	d0 03		bne $2b94			bne  	CompareTrue
.2b91	4c 97 2b	jmp $2b97			jmp 	CompareFalse
.2b94					CompareTrue:
.2b94	4c 0d 34	jmp $340d			jmp 	MInt32True
.2b97					CompareFalse:
.2b97	4c 11 34	jmp $3411			jmp 	MInt32False

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/dereference.asm

.2b9a					DereferenceTwo:
.2b9a	e8		inx				inx
.2b9b	20 9f 2b	jsr $2b9f			jsr 	DereferenceOne
.2b9e	ca		dex				dex
.2b9f					DereferenceOne:
.2b9f	b5 48		lda $48,x			lda 	esType,x
.2ba1	10 3d		bpl $2be0			bpl 	_DRNotReference 			; is it a reference ? if not, we don't need to do anything
.2ba3	4a		lsr a				lsr 	a 							; do float dereference if bit 0 set.
.2ba4	b0 3b		bcs $2be1			bcs 	_DRFloatDeReference
.2ba6	98		tya				tya
.2ba7	48		pha				pha
.2ba8	b5 50		lda $50,x			lda 	esInt0,x 					; copy address to temp0
.2baa	85 2a		sta $2a				sta 	temp0
.2bac	b5 58		lda $58,x			lda 	esInt1,x
.2bae	85 2b		sta $2b				sta 	temp0+1
.2bb0	a9 00		lda #$00			lda 	#0 							; clear esInt1..3
.2bb2	95 58		sta $58,x			sta 	esInt1,x
.2bb4	95 60		sta $60,x			sta 	esInt2,x
.2bb6	95 68		sta $68,x			sta 	esInt3,x
.2bb8	b5 48		lda $48,x			lda 	esType,x 					; get the type byte.
.2bba	29 60		and #$60			and 	#$60 						; get string flag ($40) and byte flag ($20)
.2bbc	0a		asl a				asl 	a 							; now string ($80) byte ($40)
.2bbd	30 0d		bmi $2bcc			bmi 	_DeRefString 				; string, 2 bytes only
.2bbf	d0 11		bne $2bd2			bne 	_DeRefByte 					; byte 1 byte only
.2bc1					_DeRefLong:
.2bc1	a0 03		ldy #$03			ldy 	#3
.2bc3	b1 2a		lda ($2a),y			lda 	(temp0),y
.2bc5	95 68		sta $68,x			sta 	esInt3,x
.2bc7	88		dey				dey
.2bc8	b1 2a		lda ($2a),y			lda 	(temp0),y
.2bca	95 60		sta $60,x			sta 	esInt2,x
.2bcc					_DeRefString:
.2bcc	a0 01		ldy #$01			ldy 	#1
.2bce	b1 2a		lda ($2a),y			lda 	(temp0),y
.2bd0	95 58		sta $58,x			sta 	esInt1,x
.2bd2					_DeRefByte:
.2bd2	a0 00		ldy #$00			ldy 	#0
.2bd4	b1 2a		lda ($2a),y			lda 	(temp0),y
.2bd6	95 50		sta $50,x			sta 	esInt0,x
.2bd8	b5 48		lda $48,x			lda 	esType,x 					; clear byte and deref bits.
.2bda	29 40		and #$40			and 	#$40
.2bdc	95 48		sta $48,x			sta 	esType,x
.2bde	68		pla				pla
.2bdf	a8		tay				tay
.2be0					_DRNotReference
.2be0	60		rts				rts
.2be1					_DRFloatDereference:
.2be1	20 6b 21	jsr $216b			jsr 	TOSToTemp0 					; address to deref in temp0
.2be4	8a		txa				txa
.2be5	a2 1e		ldx #$1e		ldx	#30
.2be7	20 79 1c	jsr $1c79		jsr	floatingpointHandler
.2bea	aa		tax				tax
.2beb	a9 01		lda #$01			lda 	#$01 						; type to FP (float)
.2bed	95 48		sta $48,x			sta 	esType,x
.2bef	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/evaluate.asm

.2bf0					EvaluateLevel:
.2bf0	e0 08		cpx #$08			cpx 	#StackSize 					; check stack overflow
.2bf2	b0 1e		bcs $2c12			bcs 	_ELStack
.2bf4	48		pha				pha 								; save precedence level.
.2bf5	a9 00		lda #$00			lda 	#0 							; zero the current stack level.
.2bf7	95 50		sta $50,x			sta 	esInt0,x
.2bf9	95 58		sta $58,x			sta 	esInt1,x
.2bfb	95 60		sta $60,x			sta 	esInt2,x
.2bfd	95 68		sta $68,x			sta 	esInt3,x
.2bff	95 48		sta $48,x			sta 	esType,x 					; zero the type (integer value)
.2c01	b1 28		lda ($28),y			lda 	(codePtr),y	 				; look at first token/character
.2c03	30 26		bmi $2c2b			bmi 	_ELIsToken 					; if -ve could be string, float, or unary function.
.2c05	0a		asl a				asl 	a 							; if 00-3F then will now be PL and it's a variable.
.2c06	30 0f		bmi $2c17			bmi 	_ELIsConstant 				; 40-7F will be -ve and that's an integer constant.
.2c08	8a		txa				txa 								; stack level in X
.2c09	a2 02		ldx #$02		ldx	#2
.2c0b	20 b3 43	jsr $43b3		jsr	variableHandler
.2c0e	aa		tax				tax
.2c0f	4c 54 2c	jmp $2c54			jmp		_ELHasTerm
.2c12					_ELStack:
.2c12	a2 23		ldx #$23			ldx 	#ErrorID_NumStack
.2c14	20 18 15	jsr $1518		jsr	errorHandler
.2c17					_ELIsConstant:
.2c17	4a		lsr a				lsr 	a 							; get the value back
.2c18	29 3f		and #$3f			and 	#$3F 						; force into range 0-63
.2c1a	95 50		sta $50,x			sta 	esInt0,x 					; and put in LSB.
.2c1c					_ELCheckNext:
.2c1c	c8		iny				iny 								; look at next
.2c1d	b1 28		lda ($28),y			lda 	(codePtr),y
.2c1f	49 40		eor #$40			eor 	#$40 						; shift around so 40-7F => 00-3F
.2c21	c9 40		cmp #$40			cmp 	#$40 						; out of range ?
.2c23	b0 2f		bcs $2c54			bcs 	_ELHasTerm 					; done getting the constant.
.2c25	20 ed 2c	jsr $2ced			jsr 	ELShiftByteIn 				; shift byte into position.
.2c28	4c 1c 2c	jmp $2c1c			jmp 	_ELCheckNext
.2c2b					_ELIsToken:
.2c2b	c9 85		cmp #$85			cmp 	#TOK_STR 					; handle strings.
.2c2d	f0 0f		beq $2c3e			beq 	_ELIsString
.2c2f	c9 84		cmp #$84			cmp 	#TOK_FPC 					; if no, then check unary.
.2c31	d0 5f		bne $2c92			bne 	_ELCheckUnary
.2c33	8a		txa				txa 								; put X into A
.2c34	c8		iny				iny 								; skip over the float marker
.2c35	a2 1a		ldx #$1a		ldx	#26
.2c37	20 79 1c	jsr $1c79		jsr	floatingpointHandler
.2c3a	aa		tax				tax 								; restore X
.2c3b	4c 54 2c	jmp $2c54			jmp 	_ELHasTerm
.2c3e					_ELIsString:
.2c3e	98		tya				tya 								; address of string is codePtr+y+1
.2c3f	38		sec				sec
.2c40	65 28		adc $28				adc 	codePtr
.2c42	95 50		sta $50,x			sta 	esInt0,x
.2c44	a5 29		lda $29				lda 	codePtr+1
.2c46	69 00		adc #$00			adc 	#0
.2c48	95 58		sta $58,x			sta 	esInt1,x
.2c4a	a9 40		lda #$40			lda 	#$40 						; set type to string value
.2c4c	95 48		sta $48,x			sta 	esType,x
.2c4e	c8		iny				iny 								; skip over string.
.2c4f	98		tya				tya
.2c50	38		sec				sec									; +1 for the length itself.
.2c51	71 28		adc ($28),y			adc 	(codePtr),y
.2c53	a8		tay				tay 								; and fall through to term loop code.
.2c54					_ELHasTerm:
.2c54	b1 28		lda ($28),y			lda 	(codePtr),y
.2c56	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; check in the correct range for binary tokens.
.2c58	90 04		bcc $2c5e			bcc 	_ELPopExit
.2c5a	c9 99		cmp #$99			cmp 	#TOK_STRUCTST
.2c5c	90 02		bcc $2c60			bcc 	_ELHasBinaryTerm
.2c5e					_ELPopExit:
.2c5e	68		pla				pla
.2c5f					_ELExit:
.2c5f	60		rts				rts
.2c60					_ELHasBinaryTerm:
.2c60	84 32		sty $32				sty 	tempShort 					; save position
.2c62	a8		tay				tay 								; use token as an index and get the precedence.
.2c63	b9 95 2c	lda $2c95,y			lda 	ELBinaryOperatorInfo-TOK_BINARYST,y
.2c66	a4 32		ldy $32				ldy 	tempShort 					; restore Y
.2c68	85 32		sta $32				sta 	tempShort 					; save precedence in memory.
.2c6a	68		pla				pla 								; restore current level.
.2c6b	c5 32		cmp $32				cmp 	tempShort 					; if current >= operator then exit
.2c6d	b0 f0		bcs $2c5f			bcs 	_ELExit
.2c6f	48		pha				pha 								; save current level back on the stack.
.2c70	b1 28		lda ($28),y			lda 	(codePtr),y 				; save the binary operator on the stack and skip it.
.2c72	48		pha				pha
.2c73	c8		iny				iny
.2c74	e8		inx				inx 								; calculate the RHS at the operator precedence.
.2c75	a5 32		lda $32				lda 	tempShort
.2c77	20 f0 2b	jsr $2bf0			jsr 	EvaluateLevel
.2c7a	ca		dex				dex
.2c7b	68		pla				pla 								; get the operator back out.
.2c7c					_ELExecuteA:
.2c7c	86 32		stx $32				stx 	tempShort 					; upload the vectors. Would be nice to use jmp (aaaa,x)
.2c7e	0a		asl a				asl 	a 							; but not practical. May use push/rts later.
.2c7f	aa		tax				tax
.2c80	bd b1 28	lda $28b1,x			lda 	Group0Vectors,x
.2c83	85 2a		sta $2a				sta 	temp0
.2c85	bd b2 28	lda $28b2,x			lda 	Group0Vectors+1,x
.2c88	85 2b		sta $2b				sta 	temp0+1
.2c8a	a6 32		ldx $32				ldx 	tempShort
.2c8c	20 d9 2c	jsr $2cd9			jsr 	_ELCallTemp0
.2c8f	4c 54 2c	jmp $2c54			jmp 	_ELHasTerm 					; and loop back round.
.2c92					_ELCheckUnary:
.2c92	c8		iny				iny 								; skip over token.
.2c93	c9 90		cmp #$90			cmp 	#TKW_MINUS 					; is it - term
.2c95	f0 19		beq $2cb0			beq 	_ELMinus
.2c97	c9 97		cmp #$97			cmp 	#TKW_PLING 					; is it ! or ? term
.2c99	f0 2c		beq $2cc7			beq 	_ELIndirect
.2c9b	c9 98		cmp #$98			cmp 	#TKW_QMARK
.2c9d	f0 28		beq $2cc7			beq 	_ELIndirect
.2c9f	c9 83		cmp #$83			cmp 	#TOK_SHIFT3 				; is it the unary extension.
.2ca1	f0 39		beq $2cdc			beq 	_ELExtension
.2ca3	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST 				; must be TOK_UNARYST ... TOK_TOKENS
.2ca5	90 04		bcc $2cab			bcc 	_ELUSyntax
.2ca7	c9 c9		cmp #$c9			cmp 	#TOK_TOKENS
.2ca9	90 d1		bcc $2c7c			bcc 	_ELExecuteA 				; if so do that token.
.2cab					_ELUSyntax:
.2cab	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.2cad	20 18 15	jsr $1518		jsr	errorHandler
.2cb0					_ELMinus:
.2cb0	20 42 2d	jsr $2d42			jsr 	EvaluateNumericTerm 		; get a number to negate.
.2cb3	b5 48		lda $48,x			lda 	esType,x 					; is it integer
.2cb5	f0 0a		beq $2cc1			beq 	_ELMinusInteger
.2cb7	8a		txa				txa
.2cb8	a2 0e		ldx #$0e		ldx	#14
.2cba	20 79 1c	jsr $1c79		jsr	floatingpointHandler
.2cbd	aa		tax				tax
.2cbe	4c 54 2c	jmp $2c54			jmp 	_ELHasTerm
.2cc1					_ELMinusInteger:
.2cc1	20 cb 33	jsr $33cb			jsr 	MInt32Negate 				; do int negate
.2cc4	4c 54 2c	jmp $2c54			jmp 	_ELHasTerm
.2cc7					_ELIndirect:
.2cc7	48		pha				pha 								; save what we want (TKW_QMARK TWK_PLING)
.2cc8	20 4b 2d	jsr $2d4b			jsr 	EvaluateIntegerTerm 		; integer address
.2ccb	68		pla				pla
.2ccc	49 97		eor #$97			eor 	#TKW_PLING 					; now $00 if !
.2cce	f0 02		beq $2cd2			beq 	_ELHaveModifier
.2cd0	a9 20		lda #$20			lda 	#$20 						; now $00 if !, $20 if ?
.2cd2					_ELHaveModifier:
.2cd2	09 80		ora #$80			ora 	#$80						; make it the appropriate reference.
.2cd4	95 48		sta $48,x			sta 	esType,x 					; $80 for ! $A0 for ?
.2cd6	4c 54 2c	jmp $2c54			jmp 	_ELHasTerm
.2cd9					_ELCallTemp0:
.2cd9	6c 2a 00	jmp ($002a)			jmp 	(temp0)
.2cdc					_ELExtension:
.2cdc	8a		txa				txa 								; stack pos in A
.2cdd	20 60 18	jsr $1860		jsr	extensionHandler
.2ce0	aa		tax				tax 								; restore stack
.2ce1	4c 54 2c	jmp $2c54			jmp 	_ELHasTerm
.2ce4					UnaryParenthesis:
.2ce4	a9 00		lda #$00			lda 	#0 							; ( is a unary function ....
.2ce6	20 f0 2b	jsr $2bf0			jsr 	EvaluateLevel
.2ce9	20 84 34	jsr $3484			jsr 	CheckRightParen 			; check for )
.2cec	60		rts				rts
.2ced					ELShiftByteIn:
.2ced	48		pha				pha 								; save bits to shift in.
.2cee	b5 68		lda $68,x			lda 	esInt3,x 					; save top most byte
.2cf0	48		pha				pha
.2cf1	b5 60		lda $60,x			lda 	esInt2,x 					; shift everything left 8 bits
.2cf3	95 68		sta $68,x			sta 	esInt3,x
.2cf5	b5 58		lda $58,x			lda 	esInt1,x
.2cf7	95 60		sta $60,x			sta 	esInt2,x
.2cf9	b5 50		lda $50,x			lda 	esInt0,x
.2cfb	95 58		sta $58,x			sta 	esInt1,x
.2cfd	a9 00		lda #$00			lda 	#0
.2cff	95 50		sta $50,x			sta 	esInt0,x
.2d01	68		pla				pla 								; now A:TOS is a 5 byte register, shift right twice.
.2d02	29 03		and #$03			and 	#3 							; only want lower 2 bits
.2d04	09 04		ora #$04			ora 	#4  						; set bit 2 - when 1 we are done
.2d06					_ELShiftLoop:
.2d06	4a		lsr a				lsr 	a
.2d07	76 68		ror $68,x			ror 	esInt3,x
.2d09	76 60		ror $60,x			ror 	esInt2,x
.2d0b	76 58		ror $58,x			ror 	esInt1,x
.2d0d	76 50		ror $50,x			ror 	esInt0,x
.2d0f	c9 01		cmp #$01			cmp 	#1
.2d11	d0 f3		bne $2d06			bne 	_ELShiftLoop
.2d13	68		pla				pla 								; get original 6 bit value and OR in.
.2d14	29 3f		and #$3f			and 	#$3F
.2d16	15 50		ora $50,x			ora 	esInt0,x
.2d18	95 50		sta $50,x			sta 	esInt0,x
.2d1a	60		rts				rts
.2d1b					ELBinaryOperatorInfo:

;******  Processing file: main/evaluate/../../generated/binarystructinfo.inc

>2d1b	01					.byte	$01			; $86 and
>2d1c	01					.byte	$01			; $87 or
>2d1d	01					.byte	$01			; $88 xor
>2d1e	02					.byte	$02			; $89 >=
>2d1f	02					.byte	$02			; $8a <=
>2d20	02					.byte	$02			; $8b >
>2d21	02					.byte	$02			; $8c <
>2d22	02					.byte	$02			; $8d =
>2d23	02					.byte	$02			; $8e <>
>2d24	03					.byte	$03			; $8f +
>2d25	03					.byte	$03			; $90 -
>2d26	04					.byte	$04			; $91 >>
>2d27	04					.byte	$04			; $92 <<
>2d28	04					.byte	$04			; $93 *
>2d29	04					.byte	$04			; $94 /
>2d2a	04					.byte	$04			; $95 mod
>2d2b	05					.byte	$05			; $96 ^
>2d2c	06					.byte	$06			; $97 !
>2d2d	06					.byte	$06			; $98 ?
>2d2e	82					.byte	$82			; $99 repeat
>2d2f	82					.byte	$82			; $9a while
>2d30	82					.byte	$82			; $9b for
>2d31	82					.byte	$82			; $9c if
>2d32	82					.byte	$82			; $9d defproc
>2d33	80					.byte	$80			; $9e until
>2d34	80					.byte	$80			; $9f wend
>2d35	80					.byte	$80			; $a0 next
>2d36	80					.byte	$80			; $a1 then
>2d37	80					.byte	$80			; $a2 endif
>2d38	80					.byte	$80			; $a3 endproc

;******  Return to file: main/evaluate/evaluate.asm


;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/support.asm

.2d39					EvaluateTerm:
.2d39	a9 0f		lda #$0f			lda 	#15 						; no binary operator has this high a precedence.
.2d3b	20 f0 2b	jsr $2bf0			jsr 	EvaluateLevel
.2d3e	20 9f 2b	jsr $2b9f			jsr 	DereferenceOne
.2d41	60		rts				rts
.2d42					EvaluateNumericTerm:
.2d42	20 39 2d	jsr $2d39			jsr 	EvaluateTerm
.2d45	b5 48		lda $48,x			lda 	esType,x
.2d47	0a		asl a				asl 	a 							; see if it's a string.
.2d48	30 09		bmi $2d53			bmi 	ENTType
.2d4a	60		rts				rts
.2d4b					EvaluateIntegerTerm:
.2d4b	20 39 2d	jsr $2d39			jsr 	EvaluateTerm
.2d4e	b5 48		lda $48,x			lda 	esType,x
.2d50	d0 01		bne $2d53			bne 	ENTType
.2d52	60		rts				rts
.2d53					ENTType:
.2d53	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.2d55	20 18 15	jsr $1518		jsr	errorHandler
.2d58					EvaluateRoot:
.2d58	a2 00		ldx #$00			ldx 	#0
.2d5a					Evaluate:
.2d5a	a9 00		lda #$00			lda 	#0
.2d5c	20 f0 2b	jsr $2bf0			jsr 	EvaluateLevel
.2d5f	20 9f 2b	jsr $2b9f			jsr 	DereferenceOne
.2d62	60		rts				rts
.2d63					EvaluateNumeric:
.2d63	20 5a 2d	jsr $2d5a			jsr 	Evaluate
.2d66	b5 48		lda $48,x			lda 	esType,x
.2d68	0a		asl a				asl 	a 							; see if it's a string.
.2d69	30 e8		bmi $2d53			bmi 	ENTType
.2d6b	4a		lsr a				lsr 	a 							; shift float flag into carry.
.2d6c	4a		lsr a				lsr 	a
.2d6d	60		rts				rts
.2d6e					EvaluateString:
.2d6e	20 5a 2d	jsr $2d5a			jsr 	Evaluate
.2d71	b5 48		lda $48,x			lda 	esType,x
.2d73	0a		asl a				asl 	a 							; see if it's a string.
.2d74	10 dd		bpl $2d53			bpl 	ENTType
.2d76	60		rts				rts
.2d77					EvaluateRootInteger:
.2d77	a2 00		ldx #$00			ldx 	#0
.2d79					EvaluateInteger:
.2d79	20 5a 2d	jsr $2d5a			jsr 	Evaluate
.2d7c	b5 48		lda $48,x			lda 	esType,x
.2d7e	d0 d3		bne $2d53			bne 	ENTType
.2d80	60		rts				rts
.2d81					EvaluateSmallInteger:
.2d81	20 79 2d	jsr $2d79			jsr 	EvaluateInteger
.2d84	b5 58		lda $58,x			lda 	esInt1,x
.2d86	15 60		ora $60,x			ora 	esInt2,x
.2d88	15 68		ora $68,x			ora 	esInt3,x
.2d8a	d0 03		bne $2d8f			bne 	_ESIValue
.2d8c	b5 50		lda $50,x			lda 	esInt0,x
.2d8e	60		rts				rts
.2d8f					_ESIValue:
.2d8f	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.2d91	20 18 15	jsr $1518		jsr	errorHandler
.2d94					LinkEvaluate:
.2d94	aa		tax				tax
.2d95	20 5a 2d	jsr $2d5a			jsr 	Evaluate
.2d98	8a		txa				txa
.2d99	60		rts				rts
.2d9a					LinkEvaluateTerm:
.2d9a	aa		tax				tax
.2d9b	20 39 2d	jsr $2d39			jsr 	EvaluateTerm
.2d9e	8a		txa				txa
.2d9f	60		rts				rts
.2da0					LinkEvaluateInteger:
.2da0	aa		tax				tax
.2da1	20 79 2d	jsr $2d79			jsr 	EvaluateInteger
.2da4	8a		txa				txa
.2da5	60		rts				rts
.2da6					LinkEvaluateString:
.2da6	aa		tax				tax
.2da7	20 6e 2d	jsr $2d6e			jsr 	EvaluateString
.2daa	8a		txa				txa
.2dab	60		rts				rts
.2dac					LinkEvaluateSmallInt:
.2dac	aa		tax				tax
.2dad	20 81 2d	jsr $2d81			jsr 	EvaluateSmallInteger
.2db0	8a		txa				txa
.2db1	60		rts				rts
.2db2					EvaluateReference:
.2db2	ad 2c 2d	lda $2d2c			lda 	ELBinaryOperatorInfo+TKW_PLING-TOK_BINARYST
.2db5	38		sec				sec 								; sub 1 to allow a!x b?x to work.
.2db6	e9 01		sbc #$01			sbc 	#1
.2db8	20 f0 2b	jsr $2bf0			jsr 	EvaluateLevel
.2dbb	b5 48		lda $48,x			lda 	esType,x
.2dbd	10 01		bpl $2dc0			bpl 	_ERFail
.2dbf	60		rts				rts
.2dc0					_ERFail:
.2dc0	a2 0b		ldx #$0b			ldx 	#ErrorID_NoReference
.2dc2	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary/convert.asm

.2dc5					Event_Str:
.2dc5	20 63 2d	jsr $2d63			jsr 	EvaluateNumeric 			; get a number.
.2dc8	b5 48		lda $48,x			lda 	esType,x 					; is it floating point
.2dca	d0 13		bne $2ddf			bne 	_ESFloat
.2dcc	20 22 2e	jsr $2e22			jsr 	ConvertGetBase 				; get base, or default.
.2dcf	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.2dd1	85 2a		sta $2a				sta 	temp0
.2dd3	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.2dd5	85 2b		sta $2b				sta 	1+(temp0)
.2dd7	b5 51		lda $51,x			lda 	esInt0+1,x 					; get the base
.2dd9	20 67 33	jsr $3367			jsr 	MInt32ToString 				; convert to string.
.2ddc	4c ec 2d	jmp $2dec			jmp 	_ESCloneExit 				; clone and exit.
.2ddf					_ESFloat:
.2ddf	20 84 34	jsr $3484			jsr 	CheckRightParen 			; check closing )
.2de2	20 6b 21	jsr $216b			jsr 	TOSToTemp0 					; string address in temp0, goes here.
.2de5	8a		txa				txa
.2de6	a2 16		ldx #$16		ldx	#22
.2de8	20 79 1c	jsr $1c79		jsr	floatingpointHandler
.2deb	aa		tax				tax
.2dec					_ESCloneExit:
.2dec	8a		txa				txa
.2ded	a2 04		ldx #$04		ldx	#4
.2def	20 bc 37	jsr $37bc		jsr	stringHandler
.2df2	aa		tax				tax
.2df3	60		rts				rts
.2df4					UnaryVal:
.2df4	38		sec				sec 								; Carry set to return value
.2df5	b0 01		bcs $2df8			bcs 	ValueMain
.2df7					UnaryIsVal:
.2df7	18		clc				clc									; Carry clear to return legitimacy
.2df8					ValueMain:
.2df8	08		php				php 								; save results (CS is value, CC is validation)
.2df9	20 6e 2d	jsr $2d6e			jsr 	EvaluateString
.2dfc	20 22 2e	jsr $2e22			jsr 	ConvertGetBase 				; get base, if any.
.2dff	98		tya				tya
.2e00	48		pha				pha
.2e01	20 6b 21	jsr $216b			jsr 	TOSToTemp0 					; string address in temp0, goes here.
.2e04	b5 51		lda $51,x			lda 	esInt0+1,x 					; get the base
.2e06	29 7f		and #$7f			and 	#$7F 						; ignore the sign bit.
.2e08	20 7f 32	jsr $327f			jsr 	MInt32FromString 			; convert it back from a string.
.2e0b	b0 0c		bcs $2e19			bcs 	_VMSuccess 					; successfully converted.
.2e0d	b5 51		lda $51,x			lda 	esInt0+1,x 					; is base the default
.2e0f	c9 8a		cmp #$8a			cmp 	#$80+10 					; if no, then it is integer only.
.2e11	f0 00		beq $2e13			beq 	_VMFailed 	 				; so we failed.
.2e13					_VMFailed:
.2e13	68		pla				pla
.2e14	a8		tay				tay
.2e15	28		plp				plp
.2e16	4c 11 34	jmp $3411			jmp 	MInt32False 				; return 0 whatever.
.2e19					_VMSuccess:
.2e19	68		pla				pla
.2e1a	a8		tay				tay
.2e1b	28		plp				plp 								; if CS the it was val() so we want the value.
.2e1c	b0 03		bcs $2e21			bcs 	_VMExit
.2e1e	4c 0d 34	jmp $340d			jmp 	MInt32True 					; otherwise return true as successful.
.2e21					_VMExit:
.2e21	60		rts				rts
.2e22					ConvertGetBase:
.2e22	a9 8a		lda #$8a			lda 	#10+$80 					; default base 10 signed.
.2e24	95 51		sta $51,x			sta 	esInt0+1,x
.2e26	b1 28		lda ($28),y			lda 	(codePtr),y 				; check for ,base)
.2e28	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.2e2a	d0 0e		bne $2e3a			bne 	_CGBDone 					; not found, should be )
.2e2c	e8		inx				inx 								; next level
.2e2d	c8		iny				iny 								; skip comma.
.2e2e	20 81 2d	jsr $2d81			jsr 	EvaluateSmallInteger		; evaluate the base.
.2e31	ca		dex				dex
.2e32	c9 02		cmp #$02			cmp 	#2 							; base range is 2..16
.2e34	90 08		bcc $2e3e			bcc 	_CGBValue 					; (it should work as high as 37)
.2e36	c9 11		cmp #$11			cmp 	#17
.2e38	b0 04		bcs $2e3e			bcs 	_CGBValue
.2e3a					_CGBDone:
.2e3a	20 84 34	jsr $3484			jsr 	CheckRightParen
.2e3d	60		rts				rts
.2e3e					_CGBValue:
.2e3e	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.2e40	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary/event.asm

.2e43					EventFunction:
.2e43	20 b2 2d	jsr $2db2			jsr 	EvaluateReference			; get the variable reference that tracks the event
.2e46	b5 48		lda $48,x			lda 	esType,x
.2e48	c9 80		cmp #$80			cmp 	#$80 						; must be integer reference
.2e4a	d0 5b		bne $2ea7			bne 	_EFType
.2e4c	20 91 34	jsr $3491			jsr 	CheckComma
.2e4f	e8		inx				inx
.2e50	20 79 2d	jsr $2d79			jsr 	EvaluateInteger		 		; get the elapsed time between firing.
.2e53	20 84 34	jsr $3484			jsr 	CheckRightParen 			; finish off with the right bracket
.2e56	ca		dex				dex
.2e57	b5 58		lda $58,x			lda 	esInt1,x 					; check max of 32767, we use 16 bit for timers and
.2e59	29 80		and #$80			and 	#$80 						; it doesn't work > 32767
.2e5b	15 60		ora $60,x			ora 	esInt2,x
.2e5d	15 68		ora $68,x			ora 	esInt3,x
.2e5f	d0 41		bne $2ea2			bne 	_EFValue
.2e61	98		tya				tya
.2e62	48		pha				pha
.2e63	8a		txa				txa
.2e64	48		pha				pha
.2e65	a2 1c		ldx #$1c		ldx	#28
.2e67	20 f6 14	jsr $14f6		jsr	deviceHandler
.2e6a	84 2d		sty $2d				sty 	temp1+1
.2e6c	85 2c		sta $2c				sta 	temp1
.2e6e	68		pla				pla
.2e6f	aa		tax				tax
.2e70	20 6b 21	jsr $216b			jsr 	TOSToTemp0 					; set temp0 to the address of the event variable
.2e73	a0 03		ldy #$03			ldy 	#3							; if -ve
.2e75	b1 2a		lda ($2a),y			lda 	(temp0),y
.2e77	30 23		bmi $2e9c			bmi 	_EFFail 	 				; straight out with fail, means "on pause".
.2e79	a0 00		ldy #$00			ldy 	#0 							; is the fire time zero ?
.2e7b	b1 2a		lda ($2a),y			lda 	(temp0),y
.2e7d	c8		iny				iny
.2e7e	11 2a		ora ($2a),y			ora 	(temp0),y
.2e80	f0 17		beq $2e99			beq 	_EFInitialise 				; if so, initialise the value but return false.
.2e82	a0 00		ldy #$00			ldy 	#0 							; calculate trigger - timer
.2e84	38		sec				sec
.2e85	b1 2a		lda ($2a),y			lda 	(temp0),y
.2e87	e5 2c		sbc $2c				sbc 	temp1
.2e89	c8		iny				iny
.2e8a	b1 2a		lda ($2a),y			lda 	(temp0),y
.2e8c	e5 2d		sbc $2d				sbc 	temp1+1
.2e8e	10 0c		bpl $2e9c			bpl 	_EFFail 					; if trigger >= timer then return False
.2e90	20 ac 2e	jsr $2eac			jsr 	SetEventTimer 				; reset the timer for next time.
.2e93	20 0d 34	jsr $340d			jsr	 	MInt32True 					; and treutn true as fired.
.2e96	68		pla				pla
.2e97	a8		tay				tay
.2e98	60		rts				rts
.2e99					_EFInitialise:
.2e99	20 ac 2e	jsr $2eac			jsr		SetEventTimer 				; set trigger time to time + elapsed
.2e9c					_EFFail:
.2e9c	68		pla				pla
.2e9d	a8		tay				tay
.2e9e	20 11 34	jsr $3411			jsr 	MInt32False
.2ea1	60		rts				rts
.2ea2					_EFValue:
.2ea2	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.2ea4	20 18 15	jsr $1518		jsr	errorHandler
.2ea7					_EFType:
.2ea7	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.2ea9	20 18 15	jsr $1518		jsr	errorHandler
.2eac					SetEventTimer:
.2eac	a0 00		ldy #$00			ldy 	#0
.2eae	18		clc				clc
.2eaf	a5 2c		lda $2c				lda 	temp1
.2eb1	75 51		adc $51,x			adc 	esInt0+1,x
.2eb3	91 2a		sta ($2a),y			sta		(temp0),y
.2eb5	c8		iny				iny
.2eb6	a5 2d		lda $2d				lda 	temp1+1
.2eb8	75 59		adc $59,x			adc 	esInt1+1,x
.2eba	91 2a		sta ($2a),y			sta		(temp0),y
.2ebc	88		dey				dey
.2ebd	11 2a		ora ($2a),y			ora 	(temp0),y 					; if the result is non zero, exit
.2ebf	d0 04		bne $2ec5			bne 	_SETExit 					; zero means initialise.....
.2ec1	a9 01		lda #$01			lda 	#1 							; timer zero won't work, so make it 1, which is
.2ec3	91 2a		sta ($2a),y			sta 	(temp0),y 					; near enough.
.2ec5					_SETExit:
.2ec5	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary/unary.asm

.2ec6					UnaryLen:
.2ec6	20 d4 2e	jsr $2ed4			jsr 	ULStart
.2ec9					ULFinish:
.2ec9	b1 2a		lda ($2a),y			lda 	(temp0),y 					; get length prefix
.2ecb	a4 32		ldy $32				ldy 	tempShort 					; get Y back
.2ecd	20 20 34	jsr $3420			jsr 	MInt32Set8Bit 				; write it out.
.2ed0	20 84 34	jsr $3484			jsr 	CheckRightParen
.2ed3	60		rts				rts
.2ed4	20 6e 2d	jsr $2d6e	ULStart:jsr 	EvaluateString
.2ed7	b5 50		lda $50,x			lda 	esInt0,x 					; copy address of string to temp0
.2ed9	85 2a		sta $2a				sta 	temp0
.2edb	b5 58		lda $58,x			lda 	esInt1,x
.2edd	85 2b		sta $2b				sta 	temp0+1
.2edf	84 32		sty $32				sty 	tempShort 					; get length
.2ee1	a0 00		ldy #$00			ldy 	#0
.2ee3	60		rts				rts
.2ee4					UnaryAsc:
.2ee4	20 d4 2e	jsr $2ed4			jsr 	ULStart 					; same as LEN() get string, save Y, point to length.
.2ee7	b1 2a		lda ($2a),y			lda 	(temp0),y 					; read length
.2ee9	c8		iny				iny 		 						; point to first character, we can do LEN code after that
.2eea	c9 00		cmp #$00			cmp 	#0
.2eec	d0 db		bne $2ec9			bne 	ULFinish 					; if length = 0 then error : asc("") -> error.
.2eee	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.2ef0	20 18 15	jsr $1518		jsr	errorHandler
.2ef3					UnaryAbs:
.2ef3	20 63 2d	jsr $2d63			jsr 	EvaluateNumeric 			; some numeric value
.2ef6	b0 07		bcs $2eff			bcs 	_UAFloat 					; CS then float, so use that function
.2ef8	20 c6 33	jsr $33c6			jsr 	MInt32Absolute 				; int version
.2efb	20 84 34	jsr $3484			jsr 	CheckRightParen
.2efe	60		rts				rts
.2eff					_UAFloat:
.2eff	8a		txa				txa 								; float version
.2f00	a2 02		ldx #$02		ldx	#2
.2f02	20 79 1c	jsr $1c79		jsr	floatingpointHandler
.2f05	aa		tax				tax
.2f06	20 84 34	jsr $3484			jsr 	CheckRightParen
.2f09	60		rts				rts
.2f0a					UnarySgn:
.2f0a	20 63 2d	jsr $2d63			jsr 	EvaluateNumeric 			; same as above but sign of value
.2f0d	b0 07		bcs $2f16			bcs 	_USFloat
.2f0f	20 fe 33	jsr $33fe			jsr 	MInt32Sign
.2f12	20 84 34	jsr $3484			jsr 	CheckRightParen
.2f15	60		rts				rts
.2f16					_USFloat:
.2f16	8a		txa				txa
.2f17	a2 10		ldx #$10		ldx	#16
.2f19	20 79 1c	jsr $1c79		jsr	floatingpointHandler
.2f1c	aa		tax				tax
.2f1d	20 84 34	jsr $3484			jsr 	CheckRightParen
.2f20	60		rts				rts
.2f21					UnaryPeek:
.2f21	20 4d 2f	jsr $2f4d			jsr 	PDLCode 					; each has common setup code put reads 1,2 or 4 bytes
.2f24	4c 41 2f	jmp $2f41			jmp 	PDLByte0
.2f27					UnaryDeek:
.2f27	20 4d 2f	jsr $2f4d			jsr 	PDLCode
.2f2a	4c 3b 2f	jmp $2f3b			jmp 	PDLByte1
.2f2d					UnaryLeek:
.2f2d	20 4d 2f	jsr $2f4d			jsr 	PDLCode
.2f30	a0 03		ldy #$03			ldy 	#3							; read 3-2
.2f32	b1 2a		lda ($2a),y			lda 	(temp0),y
.2f34	95 68		sta $68,x			sta 	esInt3,x
.2f36	88		dey				dey
.2f37	b1 2a		lda ($2a),y			lda 	(temp0),y
.2f39	95 60		sta $60,x			sta 	esInt2,x
.2f3b					PDLByte1:
.2f3b	a0 01		ldy #$01			ldy 	#1
.2f3d	b1 2a		lda ($2a),y			lda 	(temp0),y
.2f3f	95 58		sta $58,x			sta 	esInt1,x
.2f41					PDLByte0:
.2f41	a0 00		ldy #$00			ldy 	#0
.2f43	b1 2a		lda ($2a),y			lda 	(temp0),y
.2f45	95 50		sta $50,x			sta 	esInt0,x
.2f47	a4 32		ldy $32				ldy 	tempShort 					; restore Y
.2f49	20 84 34	jsr $3484			jsr 	CheckRightParen 			; check right and return
.2f4c	60		rts				rts
.2f4d					PDLCode:
.2f4d	20 79 2d	jsr $2d79			jsr 	EvaluateInteger 			; some address
.2f50	b5 50		lda $50,x			lda 	esInt0,x 					; copy address of string to temp0
.2f52	85 2a		sta $2a				sta 	temp0
.2f54	b5 58		lda $58,x			lda 	esInt1,x
.2f56	85 2b		sta $2b				sta 	temp0+1
.2f58	a9 00		lda #$00			lda 	#0 							; zero upper 3 bytes of result, type okay.
.2f5a	95 58		sta $58,x			sta 	esInt1,x 					; PEEK needs upper 3 cleared
.2f5c	95 60		sta $60,x			sta 	esInt2,x
.2f5e	95 68		sta $68,x			sta 	esInt3,x
.2f60	84 32		sty $32				sty 	tempShort 					; save Y
.2f62	60		rts				rts
.2f63					Unary_Random:
.2f63	20 41 34	jsr $3441			jsr 	MInt32Random 				; generate random number.
.2f66	b1 28		lda ($28),y			lda 	(codePtr),y 				; check followed by )
.2f68	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.2f6a	f0 08		beq $2f74			beq 	_URExit
.2f6c	e8		inx				inx 								; load range 0..r-1 into +1
.2f6d	20 79 2d	jsr $2d79			jsr 	EvaluateInteger
.2f70	ca		dex				dex
.2f71	20 64 32	jsr $3264			jsr 	MInt32Modulus 				; calculate random % modulus
.2f74					_URExit:
.2f74	20 84 34	jsr $3484			jsr 	CheckRightParen 			; check right and return
.2f77	60		rts				rts
.2f78					Unary_Min:
.2f78	a9 01		lda #$01			lda 	#1 							; c1 cmp c2 needs to be > e.g. c1 > c2
.2f7a	d0 02		bne $2f7e			bne 	UnaryMBody
.2f7c					Unary_Max:
.2f7c	a9 ff		lda #$ff			lda 	#$FF 						; c1 cmp c2 needs to be < e.g. c1 < c2
.2f7e					UnaryMBody:
.2f7e	48		pha				pha 								; save comparator on stack, shows min or max
.2f7f	20 5a 2d	jsr $2d5a			jsr 	Evaluate 					; get the first thing to check
.2f82					_UnaryMLoop:
.2f82	b1 28		lda ($28),y			lda 	(codePtr),y 				; found ), indicates end.
.2f84	c8		iny				iny
.2f85	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.2f87	f0 09		beq $2f92			beq 	_UnaryMExit
.2f89	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; found , indicates more.
.2f8b	f0 07		beq $2f94			beq 	_UnaryMCompare
.2f8d	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.2f8f	20 18 15	jsr $1518		jsr	errorHandler
.2f92					_UnaryMExit:
.2f92	68		pla				pla 								; done so throw comparator and return.
.2f93	60		rts				rts
.2f94					_UnaryMCompare:
.2f94	e8		inx				inx 								; get the 2nd thing to evaluate
.2f95	20 5a 2d	jsr $2d5a			jsr 	Evaluate
.2f98	ca		dex				dex
.2f99	20 20 2b	jsr $2b20			jsr 	PerformComparison 			; this is part of evaluate/compare.asm
.2f9c	85 32		sta $32				sta 	tempShort 					; save result
.2f9e	68		pla				pla 								; get what we need
.2f9f	48		pha				pha
.2fa0	c5 32		cmp $32				cmp 	tempShort 					; did we get it
.2fa2	d0 de		bne $2f82			bne 	_UnaryMLoop 				; no, try another value.
.2fa4	20 11 34	jsr $3411			jsr 	MInt32False 				; promote 2nd to 1st.
.2fa7	20 f5 32	jsr $32f5			jsr 	MInt32Add
.2faa	4c 82 2f	jmp $2f82			jmp 	_UnaryMLoop
.2fad					Unary_Page:
.2fad	20 11 34	jsr $3411			jsr 	MInt32False 				; zero
.2fb0	ad c8 0a	lda $0ac8			lda 	basePage 					; copy base page address in.
.2fb3	95 50		sta $50,x			sta 	esInt0,x
.2fb5	ad c9 0a	lda $0ac9			lda 	basePage+1
.2fb8	95 58		sta $58,x			sta 	esInt1,x
.2fba	60		rts				rts
.2fbb					UnaryReference:
.2fbb	a9 0f		lda #$0f			lda 	#15
.2fbd	20 f0 2b	jsr $2bf0			jsr 	EvaluateLevel 				; evaluate term and don't deference.
.2fc0	b5 48		lda $48,x			lda 	esType,x 					; check it's a reference.
.2fc2	10 05		bpl $2fc9			bpl 	UType
.2fc4	a9 00		lda #$00			lda 	#0 							; make it an integer
.2fc6	95 48		sta $48,x			sta 	esType,x
.2fc8	60		rts				rts
.2fc9					UType:
.2fc9	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.2fcb	20 18 15	jsr $1518		jsr	errorHandler
.2fce					UnaryHexMarker:
.2fce	4c 4b 2d	jmp $2d4b			jmp 	EvaluateIntegerTerm
.2fd1					UnaryComplement:
.2fd1	20 4b 2d	jsr $2d4b			jsr 	EvaluateIntegerTerm
.2fd4	20 e5 33	jsr $33e5			jsr 	MInt32Not
.2fd7	60		rts				rts
.2fd8					UnaryIntToFloat:
.2fd8	20 63 2d	jsr $2d63			jsr 	EvaluateNumeric				; some number
.2fdb	b5 48		lda $48,x			lda 	esType,x 					; if float already, exit
.2fdd	d0 0b		bne $2fea			bne 	_UIFExit
.2fdf	8a		txa				txa 								; convert and set type
.2fe0	a2 1c		ldx #$1c		ldx	#28
.2fe2	20 79 1c	jsr $1c79		jsr	floatingpointHandler
.2fe5	aa		tax				tax
.2fe6	a9 01		lda #$01			lda 	#1
.2fe8	95 48		sta $48,x			sta 	esType,x
.2fea					_UIFExit:
.2fea	60		rts				rts
.2feb					UnaryFloatToInt:
.2feb	20 63 2d	jsr $2d63			jsr 	EvaluateNumeric 			; the number
.2fee	b5 48		lda $48,x			lda 	esType,x 					; if int already exit
.2ff0	f0 0b		beq $2ffd			beq 	_UFIExit
.2ff2	8a		txa				txa 								; convert to int
.2ff3	a2 14		ldx #$14		ldx	#20
.2ff5	20 79 1c	jsr $1c79		jsr	floatingpointHandler
.2ff8	aa		tax				tax
.2ff9	a9 00		lda #$00			lda 	#0 							; set type
.2ffb	95 48		sta $48,x			sta 	esType,x
.2ffd					_UFIExit:
.2ffd	60		rts				rts
.2ffe					UnaryAlloc:
.2ffe	e8		inx				inx 								; evaluate memory required
.2fff	20 79 2d	jsr $2d79			jsr 	EvaluateInteger
.3002	20 84 34	jsr $3484			jsr 	CheckRightParen
.3005	ca		dex				dex
.3006	b5 61		lda $61,x			lda 	esInt2+1,x 					; check at least in 64k range.
.3008	15 69		ora $69,x			ora 	esInt3+1,x
.300a	d0 1d		bne $3029			bne 	_UABadValue
.300c	20 11 34	jsr $3411			jsr 	MInt32False					; zero return.
.300f	a5 36		lda $36				lda 	lowMemory+1 				; copy low memory in
.3011	95 58		sta $58,x			sta 	esInt1,x
.3013	a5 35		lda $35				lda 	lowMemory
.3015	95 50		sta $50,x			sta 	esInt0,x
.3017	18		clc				clc 								; add alloc required.
.3018	75 51		adc $51,x			adc 	esInt0+1,x
.301a	85 35		sta $35				sta 	lowMemory
.301c	a5 36		lda $36				lda 	lowMemory+1
.301e	75 59		adc $59,x			adc 	esInt1+1,x
.3020	85 36		sta $36				sta 	lowMemory+1
.3022	b0 05		bcs $3029			bcs		_UABadValue 				; overflow definitely bad.
.3024	c5 34		cmp $34				cmp 	highMemory+1
.3026	b0 01		bcs $3029			bcs 	_UABadValue 				; out of memory bad.
.3028	60		rts				rts
.3029					_UABadValue:
.3029	a2 22		ldx #$22			ldx 	#ErrorID_Memory
.302b	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary/unary2.asm

.302e					UnaryTimer:
.302e	20 84 34	jsr $3484			jsr 	CheckRightParen 			; no parameters
.3031	98		tya				tya
.3032	48		pha				pha
.3033	20 38 34	jsr $3438			jsr 	MInt32Zero 					; zero result
.3036	86 2a		stx $2a				stx 	temp0 						; returning in YA so can't use .pshx
.3038	a2 1c		ldx #$1c		ldx	#28
.303a	20 f6 14	jsr $14f6		jsr	deviceHandler
.303d	a6 2a		ldx $2a				ldx 	temp0						; restore X and update 16 bit result
.303f	95 50		sta $50,x			sta 	esInt0,x
.3041	98		tya				tya
.3042	95 58		sta $58,x			sta 	esInt1,x
.3044	68		pla				pla
.3045	a8		tay				tay
.3046	60		rts				rts
.3047					UnaryInkey:
.3047	20 84 34	jsr $3484			jsr 	CheckRightParen
.304a	86 2a		stx $2a				stx 	temp0
.304c	a2 0a		ldx #$0a		ldx	#10
.304e	20 f6 14	jsr $14f6		jsr	deviceHandler
.3051	a6 2a		ldx $2a				ldx 	temp0
.3053	20 20 34	jsr $3420			jsr 	MInt32Set8Bit
.3056	60		rts				rts
.3057					UnaryGet:
.3057	20 84 34	jsr $3484			jsr 	CheckRightParen
.305a	86 2a		stx $2a				stx 	temp0
.305c					_UGLoop:
.305c	a2 02		ldx #$02		ldx	#2
.305e	20 f6 14	jsr $14f6		jsr	deviceHandler
.3061	a2 0a		ldx #$0a		ldx	#10
.3063	20 f6 14	jsr $14f6		jsr	deviceHandler
.3066	c9 00		cmp #$00			cmp 	#0
.3068	f0 f2		beq $305c			beq 	_UGLoop
.306a	a6 2a		ldx $2a				ldx 	temp0
.306c	20 20 34	jsr $3420			jsr 	MInt32Set8Bit
.306f	60		rts				rts
.3070					UnaryGetString:
.3070	20 57 30	jsr $3057			jsr 	UnaryGet
.3073					UGSDoChr:
.3073	4c c4 30	jmp $30c4			jmp 	ChrCode
.3076					UnaryInkeyString:
.3076	20 47 30	jsr $3047			jsr 	UnaryInkey
.3079	b5 50		lda $50,x			lda 	esInt0,x
.307b	d0 f6		bne $3073			bne 	UGSDoChr
.307d	8a		txa				txa
.307e	a2 08		ldx #$08		ldx	#8
.3080	20 bc 37	jsr $37bc		jsr	stringHandler
.3083	aa		tax				tax
.3084	60		rts				rts
.3085					UnarySys:
.3085	20 79 2d	jsr $2d79			jsr 	EvaluateInteger 				; get the address
.3088	20 84 34	jsr $3484			jsr 	CheckRightParen
.308b	20 6b 21	jsr $216b			jsr 	TOSToTemp0 						; copy call address to temp0
.308e	8a		txa				txa
.308f	48		pha				pha
.3090	98		tya				tya
.3091	48		pha				pha
.3092	ad 00 0a	lda $0a00			lda 	("A"-"A")*4+SingleLetterVar 	; load AXY
.3095	ae 5c 0a	ldx $0a5c			ldx 	("X"-"A")*4+SingleLetterVar
.3098	ac 60 0a	ldy $0a60			ldy 	("Y"-"A")*4+SingleLetterVar
.309b	20 aa 30	jsr $30aa			jsr 	_CallTemp0
.309e	85 32		sta $32				sta 	tempShort 						; restore YX
.30a0	68		pla				pla
.30a1	a8		tay				tay
.30a2	68		pla				pla
.30a3	aa		tax				tax
.30a4	a5 32		lda $32				lda 	tempShort
.30a6	20 20 34	jsr $3420			jsr 	MInt32Set8Bit 					; return result.
.30a9	60		rts				rts
.30aa					_CallTemp0:
.30aa	6c 2a 00	jmp ($002a)			jmp 	(temp0)
.30ad					UnaryMem:
.30ad	20 11 34	jsr $3411			jsr 	MInt32False 					; set to false (e.g. 0)
.30b0	38		sec				sec
.30b1	a5 33		lda $33				lda 	highMemory 						; calculate value
.30b3	e5 35		sbc $35				sbc 	lowMemory
.30b5	95 50		sta $50,x			sta 	esInt0,x
.30b7	a5 34		lda $34				lda 	highMemory+1
.30b9	e5 36		sbc $36				sbc 	lowMemory+1
.30bb	95 58		sta $58,x			sta 	esInt1,x
.30bd	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary/unarystr.asm

.30be					ExecChr:
.30be	20 81 2d	jsr $2d81			jsr 	EvaluateSmallInteger		; character number 0-255
.30c1	20 84 34	jsr $3484			jsr 	CheckRightParen				; right bracket
.30c4					ChrCode:
.30c4	98		tya				tya
.30c5	48		pha				pha
.30c6	8a		txa				txa 								; A = stack
.30c7	b4 50		ldy $50,x			ldy 	esInt0,x					; Y = character
.30c9	a2 02		ldx #$02		ldx	#2
.30cb	20 bc 37	jsr $37bc		jsr	stringHandler
.30ce	aa		tax				tax 								; X = stack
.30cf	68		pla				pla
.30d0	a8		tay				tay
.30d1	60		rts				rts
.30d2					ExecLower:
.30d2	38		sec				sec 								; set carry is lower
.30d3	b0 01		bcs $30d6			bcs 	ExecUpperLower
.30d5					ExecUpper:
.30d5	18		clc				clc 								; clear carry is upper
.30d6					ExecUpperLower:
.30d6	08		php				php 								; save carry
.30d7	20 6e 2d	jsr $2d6e			jsr 	EvaluateString 				; string to stack,X
.30da	20 84 34	jsr $3484			jsr 	CheckRightParen 			; check closing right bracket.
.30dd	28		plp				plp 								; restore carry, save Y
.30de	98		tya				tya
.30df	48		pha				pha
.30e0	a9 00		lda #$00			lda 	#0 							; A zero if upper, 1 if lower.
.30e2	2a		rol a				rol 	a
.30e3	a8		tay				tay 								; now in Y
.30e4	8a		txa				txa 								; do the substring and exit.
.30e5	a2 0c		ldx #$0c		ldx	#12
.30e7	20 bc 37	jsr $37bc		jsr	stringHandler
.30ea	aa		tax				tax
.30eb	68		pla				pla
.30ec	a8		tay				tay
.30ed	60		rts				rts
.30ee					ExecLeft:
.30ee	20 6e 2d	jsr $2d6e			jsr 	EvaluateString 				; string to stack,X
.30f1	20 91 34	jsr $3491			jsr 	CheckComma
.30f4	e8		inx				inx
.30f5	a9 01		lda #$01			lda 	#1 							; 1 for 2nd parameter.
.30f7	20 20 34	jsr $3420			jsr 	MInt32Set8Bit
.30fa	e8		inx				inx
.30fb	20 81 2d	jsr $2d81			jsr 	EvaluateSmallInteger 		; smallint 3rd parameter
.30fe					ExecSubstring:
.30fe	ca		dex				dex 								; fix up X
.30ff	ca		dex				dex
.3100	20 84 34	jsr $3484			jsr 	CheckRightParen 			; check closing right bracket.
.3103	8a		txa				txa 								; do the substring and exit.
.3104	a2 0e		ldx #$0e		ldx	#14
.3106	20 bc 37	jsr $37bc		jsr	stringHandler
.3109	aa		tax				tax
.310a	60		rts				rts
.310b					ExecMid:
.310b	20 6e 2d	jsr $2d6e			jsr 	EvaluateString 				; string to stack,X
.310e	20 91 34	jsr $3491			jsr 	CheckComma
.3111	e8		inx				inx
.3112	20 81 2d	jsr $2d81			jsr 	EvaluateSmallInteger 		; smallint 2nd parameter
.3115	c9 00		cmp #$00			cmp 	#0
.3117	f0 15		beq $312e			beq 	_EMValue
.3119	e8		inx				inx
.311a	a9 ff		lda #$ff			lda 	#255 						; 255 default for 3nd parameter - this is optional.
.311c	20 20 34	jsr $3420			jsr 	MInt32Set8Bit
.311f	b1 28		lda ($28),y			lda 	(codePtr),y 				; is there a ) next
.3121	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN 				; if so, just MID$(a$,2)
.3123	f0 d9		beq $30fe			beq 	ExecSubString
.3125	20 91 34	jsr $3491			jsr 	CheckComma
.3128	20 81 2d	jsr $2d81			jsr 	EvaluateSmallInteger 		; smallint 2nd parameter
.312b	4c fe 30	jmp $30fe			jmp 	ExecSubString
.312e					_EMValue:
.312e	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.3130	20 18 15	jsr $1518		jsr	errorHandler
.3133					ExecRight:
.3133	20 6e 2d	jsr $2d6e			jsr 	EvaluateString 				; string to stack,X
.3136	20 91 34	jsr $3491			jsr 	CheckComma
.3139	e8		inx				inx
.313a	20 81 2d	jsr $2d81			jsr 	EvaluateSmallInteger 		; smallint 2nd parameter.
.313d	ca		dex				dex
.313e	98		tya				tya
.313f	48		pha				pha
.3140	b5 50		lda $50,x			lda 	esInt0,x 					; copy address of string to temp0
.3142	85 2a		sta $2a				sta 	temp0
.3144	b5 58		lda $58,x			lda 	esInt1,x
.3146	85 2b		sta $2b				sta 	temp0+1
.3148	a0 00		ldy #$00			ldy 	#0 							; point to length
.314a	b1 2a		lda ($2a),y			lda 	(temp0),y 					; get the length.
.314c	18		clc				clc 								; add 1.
.314d	69 01		adc #$01			adc 	#1
.314f	38		sec				sec
.3150	f5 51		sbc $51,x			sbc 	esInt0+1,x  				; subtract right count.
.3152	f0 02		beq $3156			beq		_ERMake1 					; if zero, make it 1.
.3154	b0 02		bcs $3158			bcs		_EROkay
.3156					_ERMake1:
.3156	a9 01		lda #$01			lda 	#1 							; start position.
.3158					_EROkay:
.3158	e8		inx				inx 								; set start pos.
.3159	95 50		sta $50,x			sta 	esInt0,x
.315b	e8		inx				inx
.315c	a9 ff		lda #$ff			lda 	#255 						; 255 default for 3nd parameter.
.315e	20 20 34	jsr $3420			jsr 	MInt32Set8Bit
.3161	68		pla				pla
.3162	a8		tay				tay
.3163	4c fe 30	jmp $30fe			jmp 	ExecSubString 				; do the substring code.

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32binary.asm

.3166					MInt32And:
.3166	b5 50		lda $50,x			lda 	esInt0,x
.3168	35 51		and $51,x			and 	esInt0+1,x
.316a	95 50		sta $50,x			sta 	esInt0,x
.316c	b5 58		lda $58,x			lda 	esInt1,x
.316e	35 59		and $59,x			and 	esInt1+1,x
.3170	95 58		sta $58,x			sta 	esInt1,x
.3172	b5 60		lda $60,x			lda 	esInt2,x
.3174	35 61		and $61,x			and 	esInt2+1,x
.3176	95 60		sta $60,x			sta 	esInt2,x
.3178	b5 68		lda $68,x			lda 	esInt3,x
.317a	35 69		and $69,x			and 	esInt3+1,x
.317c	95 68		sta $68,x			sta 	esInt3,x
.317e	60		rts				rts
.317f					MInt32Or:
.317f	b5 50		lda $50,x			lda 	esInt0,x
.3181	15 51		ora $51,x			ora 	esInt0+1,x
.3183	95 50		sta $50,x			sta 	esInt0,x
.3185	b5 58		lda $58,x			lda 	esInt1,x
.3187	15 59		ora $59,x			ora 	esInt1+1,x
.3189	95 58		sta $58,x			sta 	esInt1,x
.318b	b5 60		lda $60,x			lda 	esInt2,x
.318d	15 61		ora $61,x			ora 	esInt2+1,x
.318f	95 60		sta $60,x			sta 	esInt2,x
.3191	b5 68		lda $68,x			lda 	esInt3,x
.3193	15 69		ora $69,x			ora 	esInt3+1,x
.3195	95 68		sta $68,x			sta 	esInt3,x
.3197	60		rts				rts
.3198					MInt32Xor:
.3198	b5 50		lda $50,x			lda 	esInt0,x
.319a	55 51		eor $51,x			eor 	esInt0+1,x
.319c	95 50		sta $50,x			sta 	esInt0,x
.319e	b5 58		lda $58,x			lda 	esInt1,x
.31a0	55 59		eor $59,x			eor 	esInt1+1,x
.31a2	95 58		sta $58,x			sta 	esInt1,x
.31a4	b5 60		lda $60,x			lda 	esInt2,x
.31a6	55 61		eor $61,x			eor 	esInt2+1,x
.31a8	95 60		sta $60,x			sta 	esInt2,x
.31aa	b5 68		lda $68,x			lda 	esInt3,x
.31ac	55 69		eor $69,x			eor 	esInt3+1,x
.31ae	95 68		sta $68,x			sta 	esInt3,x
.31b0	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32compare.asm

.31b1					MInt32Compare:
.31b1	b5 50		lda $50,x			lda 	esInt0,x 					; equality check first.
.31b3	d5 51		cmp $51,x			cmp 	esInt0+1,x
.31b5	d0 13		bne $31ca			bne 	MInt32Compare2
.31b7	b5 58		lda $58,x			lda 	esInt1,x
.31b9	d5 59		cmp $59,x			cmp 	esInt1+1,x
.31bb	d0 0d		bne $31ca			bne 	MInt32Compare2
.31bd	b5 60		lda $60,x			lda 	esInt2,x
.31bf	d5 61		cmp $61,x			cmp 	esInt2+1,x
.31c1	d0 07		bne $31ca			bne 	MInt32Compare2
.31c3	b5 68		lda $68,x			lda 	esInt3,x
.31c5	55 69		eor $69,x			eor 	esInt3+1,x 					; EOR will return 0 if the same.
.31c7	d0 01		bne $31ca			bne 	MInt32Compare2
.31c9	60		rts				rts
.31ca					MInt32Compare2:
.31ca	b5 50		lda $50,x			lda		esInt0,x 					; unsigned 32 bit comparison.
.31cc	d5 51		cmp $51,x			cmp 	esInt0+1,x
.31ce	b5 58		lda $58,x			lda		esInt1,x
.31d0	f5 59		sbc $59,x			sbc 	esInt1+1,x
.31d2	b5 60		lda $60,x			lda		esInt2,x
.31d4	f5 61		sbc $61,x			sbc 	esInt2+1,x
.31d6	b5 68		lda $68,x			lda		esInt3,x
.31d8	f5 69		sbc $69,x			sbc 	esInt3+1,x
.31da	50 02		bvc $31de			bvc 	_I32LNoOverflow 			; make it signed 32 bit comparison
.31dc	49 80		eor #$80			eor 	#$80
.31de					_I32LNoOverflow
.31de	30 03		bmi $31e3			bmi 	MInt32CLess					; if -ve then return $FF
.31e0	a9 01		lda #$01			lda 	#$01						; else return $01
.31e2	60		rts				rts
.31e3					MInt32CLess:
.31e3	a9 ff		lda #$ff			lda 	#$FF
.31e5	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32divide.asm

.31e6					MInt32SDivide:
.31e6	98		tya				tya  								; save Y, which is the count of negations
.31e7	48		pha				pha
.31e8	a0 00		ldy #$00			ldy 	#0 							; zero count
.31ea	20 02 32	jsr $3202			jsr 	_MInt32SRemSign 			; unsign TOS
.31ed	e8		inx				inx 								; unsign TOS+1
.31ee	20 02 32	jsr $3202			jsr 	_MInt32SRemSign
.31f1	ca		dex				dex
.31f2	98		tya				tya 								; save sign count on stack
.31f3	48		pha				pha
.31f4	20 0b 32	jsr $320b			jsr 	MInt32UDivide 				; unsigned division
.31f7	68		pla				pla 								; get sign count back
.31f8	29 01		and #$01			and 	#1 							; if it is odd, then negate result
.31fa	f0 03		beq $31ff			beq 	_I32SNoNeg
.31fc	20 cb 33	jsr $33cb			jsr 	MInt32Negate
.31ff					_I32SNoNeg:
.31ff	68		pla				pla 								; restoe Y and exit
.3200	a8		tay				tay
.3201	60		rts				rts
.3202					_MInt32SRemSign:
.3202	b5 68		lda $68,x			lda 	esInt3,x 					; is it -ve
.3204	10 04		bpl $320a			bpl 	_MInt32SRSExit
.3206	c8		iny				iny 								; increment the sign count
.3207	20 cb 33	jsr $33cb			jsr 	MInt32Negate 				; negate the value.
.320a					_MInt32SRSExit:
.320a	60		rts				rts
.320b					MInt32UDivide:
.320b	b5 51		lda $51,x			lda 	esInt0+1,x 					; check for division by zero
.320d	15 59		ora $59,x			ora 	esInt1+1,x
.320f	15 5a		ora $5a,x			ora 	esInt1+2,x
.3211	15 5b		ora $5b,x			ora 	esInt1+3,x
.3213	f0 4a		beq $325f			beq 	_MInt32DZero
.3215	e8		inx				inx 								; clear A
.3216	e8		inx				inx
.3217	20 11 34	jsr $3411			jsr 	MInt32False
.321a	ca		dex				dex
.321b	ca		dex				dex
.321c	98		tya				tya 								; save Y on the stack
.321d	48		pha				pha
.321e	a0 20		ldy #$20			ldy 	#32 						; number of division passes
.3220					_MInt32UDLoop:
.3220	16 50		asl $50,x			asl 	esInt0,x					; shift QA left. First Q
.3222	36 58		rol $58,x			rol 	esInt1,x
.3224	36 60		rol $60,x			rol 	esInt2,x
.3226	36 68		rol $68,x			rol 	esInt3,x
.3228	36 52		rol $52,x			rol 	esInt0+2,x 					; then A.
.322a	36 5a		rol $5a,x			rol 	esInt1+2,x
.322c	36 62		rol $62,x			rol 	esInt2+2,x
.322e	36 6a		rol $6a,x			rol 	esInt3+2,x
.3230	38		sec				sec 								; calculate A-M saving result on the stack
.3231	b5 52		lda $52,x			lda 	esInt0+2,x
.3233	f5 51		sbc $51,x			sbc 	esInt0+1,x
.3235	48		pha				pha
.3236	b5 5a		lda $5a,x			lda 	esInt1+2,x
.3238	f5 59		sbc $59,x			sbc 	esInt1+1,x
.323a	48		pha				pha
.323b	b5 62		lda $62,x			lda 	esInt2+2,x
.323d	f5 61		sbc $61,x			sbc 	esInt2+1,x
.323f	48		pha				pha
.3240	b5 6a		lda $6a,x			lda 	esInt3+2,x
.3242	f5 69		sbc $69,x			sbc 	esInt3+1,x
.3244	90 10		bcc $3256			bcc		_MInt32NoSubtract 			; if A < M (e.g. carry clear) then reject this.
.3246	95 6a		sta $6a,x			sta 	esInt3+2,x 					; write result back to A
.3248	68		pla				pla
.3249	95 62		sta $62,x			sta 	esInt2+2,x
.324b	68		pla				pla
.324c	95 5a		sta $5a,x			sta 	esInt1+2,x
.324e	68		pla				pla
.324f	95 52		sta $52,x			sta 	esInt0+2,x
.3251	f6 50		inc $50,x			inc 	esInt0,x 					; sets bit 0 of Q - it was shifted left previously.
.3253	4c 59 32	jmp $3259			jmp 	_MInt32Next 					; do the next iteration
.3256					_MInt32NoSubtract:
.3256	68		pla				pla
.3257	68		pla				pla
.3258	68		pla				pla
.3259					_MInt32Next:
.3259	88		dey				dey 								; do this 32 times.
.325a	d0 c4		bne $3220			bne 	_MInt32UDLoop
.325c	68		pla				pla 								; restore Y and exit
.325d	a8		tay				tay
.325e	60		rts				rts
.325f					_MInt32DZero:
.325f	a2 05		ldx #$05			ldx 	#ErrorID_DivZero
.3261	20 18 15	jsr $1518		jsr	errorHandler
.3264					MInt32Modulus:
.3264	20 0b 32	jsr $320b			jsr 	MInt32UDivide 				; do the division.
.3267	b5 6a		lda $6a,x			lda 	esInt3+2,x 					; copy 2nd on stack (the remainder) to the top.
.3269	95 68		sta $68,x			sta 	esInt3,x
.326b	b5 62		lda $62,x			lda 	esInt2+2,x
.326d	95 60		sta $60,x			sta 	esInt2,x
.326f	b5 5a		lda $5a,x			lda 	esInt1+2,x
.3271	95 58		sta $58,x			sta 	esInt1,x
.3273	b5 52		lda $52,x			lda 	esInt0+2,x
.3275	95 50		sta $50,x			sta 	esInt0,x
.3277	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32fromstr.asm

.0cda					fs32Length:
>0cda							.fill 	1
.3278					LinkInt32FromString:
.3278	aa		tax				tax
.3279	98		tya				tya
.327a	20 7f 32	jsr $327f			jsr 	MInt32FromString
.327d	8a		txa				txa
.327e	60		rts				rts
.327f					MInt32FromString:
.327f	85 32		sta $32				sta 	tempShort 					; save base
.3281	98		tya				tya
.3282	48		pha				pha
.3283	a0 00		ldy #$00			ldy 	#0 							; get length of string to convert
.3285	b1 2a		lda ($2a),y			lda 	(temp0),y
.3287	8d da 0c	sta $0cda			sta 	fs32Length
.328a	f0 65		beq $32f1			beq 	_I32FSFail2					; fail if length zero.
.328c	a0 01		ldy #$01			ldy 	#1 							; set index into string being read
.328e	b1 2a		lda ($2a),y			lda 	(temp0),y 					; look at first character
.3290	c9 2d		cmp #$2d			cmp 	#"-"						; is it a - character
.3292	d0 09		bne $329d			bne 	_I32FSNotNegative
.3294	ad da 0c	lda $0cda			lda 	fs32Length 					; get length back.
.3297	c9 01		cmp #$01			cmp 	#1 							; if 1 it is just a - on its own so fail.
.3299	f0 56		beq $32f1			beq 	_I32FSFail2
.329b	a0 02		ldy #$02			ldy 	#2 							; first digit of the number.
.329d					_I32FSNotNegative:
.329d	a5 32		lda $32				lda 	tempShort 					; get the base back.
.329f	c0 02		cpy #$02			cpy 	#2 							; if we read a -ve (e.g. Y == 2)
.32a1	d0 02		bne $32a5			bne 	_I32FSNN2
.32a3	09 80		ora #$80			ora 	#$80						; set bit 7, this indicates a negated result.
.32a5					_I32FSNN2:
.32a5	48		pha				pha 								; save base + final sign on stack.
.32a6	20 11 34	jsr $3411			jsr 	MInt32False 				; zero the return value.
.32a9					_I32FSMainLoop:
.32a9	68		pla				pla 								; get the base back into tempShort
.32aa	48		pha				pha
.32ab	29 7f		and #$7f			and 	#$7F
.32ad	85 32		sta $32				sta 	tempShort
.32af	b1 2a		lda ($2a),y			lda 	(temp0),y 					; look at next character.
.32b1	c9 61		cmp #$61			cmp 	#"a" 						; fix up case.
.32b3	90 02		bcc $32b7			bcc 	_I32FSNotLC
.32b5	e9 20		sbc #$20			sbc 	#32
.32b7					_I32FSNotLC:
.32b7	38		sec				sec 								; subtract 48 (ASCII "0") - ASCII to Hex conversion
.32b8	e9 30		sbc #$30			sbc 	#"0"
.32ba	90 34		bcc $32f0			bcc 	_I32FSFail 					; nothing more to do.
.32bc	c9 0a		cmp #$0a			cmp 	#9+1 						; if it is 0-9 validate vs base.
.32be	90 06		bcc $32c6			bcc 	_I32FSValidate
.32c0	c9 11		cmp #$11			cmp 	#17 						; is it between 58 and 64 ? if so bad.
.32c2	90 2c		bcc $32f0			bcc 	_I32FSFail
.32c4	e9 07		sbc #$07			sbc 	#7 							; adjust into range so now character is 0->nnn
.32c6					_I32FSValidate:
.32c6	c5 32		cmp $32				cmp 	tempShort 					; compare against the base.
.32c8	b0 26		bcs $32f0			bcs 	_I32FSFail 					; sorry, too large for this base, so fail.
.32ca	48		pha				pha 								; save the new digit value.
.32cb	e8		inx				inx 								; put base into next slot up on stack
.32cc	a5 32		lda $32				lda 	tempShort
.32ce	20 20 34	jsr $3420			jsr 	MInt32Set8Bit
.32d1	ca		dex				dex
.32d2	20 29 33	jsr $3329			jsr 	MInt32Multiply 				; multiply current by the base
.32d5	e8		inx				inx
.32d6	68		pla				pla  								; put additive into next slot
.32d7	20 20 34	jsr $3420			jsr 	MInt32Set8Bit
.32da	ca		dex				dex
.32db	20 f5 32	jsr $32f5			jsr 	MInt32Add 					; and add it
.32de	c8		iny				iny 								; bump the character pointer
.32df	cc da 0c	cpy $0cda			cpy 	fs32Length 					; until > length.
.32e2	f0 c5		beq $32a9			beq 	_I32FSMainLoop
.32e4	90 c3		bcc $32a9			bcc 	_I32FSMainLoop
.32e6					_I32FSDone:
.32e6	68		pla				pla 								; get base/final sign back
.32e7	10 03		bpl $32ec			bpl 	_I32FSNN3
.32e9	20 cb 33	jsr $33cb			jsr 	MInt32Negate 				; negate the result.
.32ec					_I32FSNN3:
.32ec	68		pla				pla
.32ed	a8		tay				tay
.32ee	38		sec				sec
.32ef	60		rts				rts
.32f0					_I32FSFail:
.32f0	68		pla				pla
.32f1					_I32FSFail2:
.32f1	68		pla				pla
.32f2	a8		tay				tay
.32f3	18		clc				clc
.32f4	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32math.asm

.32f5					MInt32Add:
.32f5	18		clc				clc
.32f6	b5 50		lda $50,x			lda 	esInt0,x
.32f8	75 51		adc $51,x			adc 	esInt0+1,x
.32fa	95 50		sta $50,x			sta 	esInt0,x
.32fc	b5 58		lda $58,x			lda 	esInt1,x
.32fe	75 59		adc $59,x			adc 	esInt1+1,x
.3300	95 58		sta $58,x			sta 	esInt1,x
.3302	b5 60		lda $60,x			lda 	esInt2,x
.3304	75 61		adc $61,x			adc 	esInt2+1,x
.3306	95 60		sta $60,x			sta 	esInt2,x
.3308	b5 68		lda $68,x			lda 	esInt3,x
.330a	75 69		adc $69,x			adc 	esInt3+1,x
.330c	95 68		sta $68,x			sta 	esInt3,x
.330e	60		rts				rts
.330f					MInt32Sub:
.330f	38		sec				sec
.3310	b5 50		lda $50,x			lda 	esInt0,x
.3312	f5 51		sbc $51,x			sbc 	esInt0+1,x
.3314	95 50		sta $50,x			sta 	esInt0,x
.3316	b5 58		lda $58,x			lda 	esInt1,x
.3318	f5 59		sbc $59,x			sbc 	esInt1+1,x
.331a	95 58		sta $58,x			sta 	esInt1,x
.331c	b5 60		lda $60,x			lda 	esInt2,x
.331e	f5 61		sbc $61,x			sbc 	esInt2+1,x
.3320	95 60		sta $60,x			sta 	esInt2,x
.3322	b5 68		lda $68,x			lda 	esInt3,x
.3324	f5 69		sbc $69,x			sbc 	esInt3+1,x
.3326	95 68		sta $68,x			sta 	esInt3,x
.3328	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32multiply.asm

.3329					MInt32Multiply:
.3329	e8		inx				inx 								; copy 2nd -> 3rd
.332a	20 4f 33	jsr $334f			jsr 	MInt32CopyUp
.332d	ca		dex				dex
.332e	20 4f 33	jsr $334f			jsr 	MInt32CopyUp 				; copy 1st -> 2nd
.3331	20 11 34	jsr $3411			jsr 	MInt32False 				; zero 1st.
.3334					_I32Loop:
.3334	b5 52		lda $52,x			lda 	esInt0+2,x 					; get low bit of 3rd
.3336	29 01		and #$01			and 	#1
.3338	f0 03		beq $333d			beq 	_I32NoAdd 					; if set
.333a	20 f5 32	jsr $32f5			jsr 	MInt32Add 					; add 2nd to 1st.
.333d					_I32NoAdd:
.333d	e8		inx				inx 								; shift 2nd left
.333e	20 26 34	jsr $3426			jsr 	MInt32ShiftLeft
.3341	e8		inx				inx  								; shift 3rd right
.3342	20 2f 34	jsr $342f			jsr 	MInt32ShiftRight
.3345	20 38 34	jsr $3438			jsr 	MInt32Zero 					; check if zero.
.3348	08		php				php 								; save status bits
.3349	ca		dex				dex 	 							; point back to 1st
.334a	ca		dex				dex
.334b	28		plp				plp 								; get status bits
.334c	d0 e6		bne $3334			bne 	_I32Loop 					; if non-zero keep going.
.334e	60		rts				rts
.334f					MInt32CopyUp:
.334f	b5 50		lda $50,x			lda 	esInt0,x
.3351	95 51		sta $51,x			sta 	esInt0+1,x
.3353	b5 58		lda $58,x			lda 	esInt1,x
.3355	95 59		sta $59,x			sta 	esInt1+1,x
.3357	b5 60		lda $60,x			lda 	esInt2,x
.3359	95 61		sta $61,x			sta 	esInt2+1,x
.335b	b5 68		lda $68,x			lda 	esInt3,x
.335d	95 69		sta $69,x			sta 	esInt3+1,x
.335f	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32tostr.asm

>0cdb					MCharCount:	.fill 	1						; count of converted characters
.3360					MLInt32ToString:
.3360	aa		tax				tax									; module passes stack in A, base in Y
.3361	98		tya				tya
.3362	20 67 33	jsr $3367			jsr 	MInt32ToString
.3365	8a		txa				txa
.3366	60		rts				rts
.3367					MInt32ToString:
.3367	48		pha				pha 								; save base
.3368	85 32		sta $32				sta 	tempShort 					; save target base.
.336a	a9 00		lda #$00			lda 	#0
.336c	8d db 0c	sta $0cdb			sta 	MCharCount 					; clear character count to 0
.336f	98		tya				tya
.3370	48		pha				pha
.3371	a5 32		lda $32				lda 	tempShort 					; check if we are signed conversion
.3373	10 10		bpl $3385			bpl 	_I32TSUnsigned
.3375	48		pha				pha 								; save base on stack.
.3376	b5 68		lda $68,x			lda 	esInt3,x 					; is it actually negative
.3378	10 08		bpl $3382			bpl 	_I32TSNoFlip
.337a	a9 2d		lda #$2d			lda 	#"-" 						; write a '-' prefix out.
.337c	20 b8 33	jsr $33b8			jsr 	MI32WriteCharacter
.337f	20 cb 33	jsr $33cb			jsr 	MInt32Negate 				; negate the value, so now it's positive.
.3382					_I32TSNoFlip:
.3382	68		pla				pla 								; get the base back
.3383	29 7f		and #$7f			and 	#$7F 						; clear the sign flag so it's just a base now.
.3385					_I32TSUnsigned:
.3385	20 93 33	jsr $3393			jsr 	MI32DivideWrite 			; recursive code to output string.
.3388	a0 00		ldy #$00			ldy 	#0 							; write charcount to first character.
.338a	ad db 0c	lda $0cdb			lda 	MCharCount
.338d	91 2a		sta ($2a),y			sta 	(temp0),y
.338f	68		pla				pla
.3390	a8		tay				tay
.3391	68		pla				pla
.3392	60		rts				rts
.3393					MI32DivideWrite:
.3393	48		pha				pha 								; save the divisor/base
.3394	e8		inx				inx 								; write in the dividing position.
.3395	20 20 34	jsr $3420			jsr 	MInt32Set8Bit
.3398	ca		dex				dex
.3399	20 0b 32	jsr $320b			jsr 	MInt32UDivide 				; divide number by base.
.339c	68		pla				pla 								; get the base into Y
.339d	a8		tay				tay
.339e	b5 52		lda $52,x			lda 	esInt0+2,x 					; get the remainder and push on the stack.
.33a0	48		pha				pha
.33a1	20 38 34	jsr $3438			jsr 	MInt32Zero 					; is the result zero ?
.33a4	f0 04		beq $33aa			beq 	_I32NoRecurse 				; if so, don't recurse.
.33a6	98		tya				tya 								; put base into A
.33a7	20 93 33	jsr $3393			jsr 	MI32DivideWrite 				; and jsr the dividor recursively.
.33aa					_I32NoRecurse:
.33aa	68		pla				pla 								; get the remainder back
.33ab	c9 0a		cmp #$0a			cmp 	#10  						; handle hexadecimals, now converting to ASCII
.33ad	90 02		bcc $33b1			bcc 	_I32NotHex
.33af	69 06		adc #$06			adc 	#7-1
.33b1					_I32NotHex:
.33b1	18		clc				clc 								; make it ASCII
.33b2	69 30		adc #$30			adc 	#48
.33b4	20 b8 33	jsr $33b8			jsr 	MI32WriteCharacter 			; write the character out
.33b7	60		rts				rts 								; and exit.
.33b8					MI32WriteCharacter:
.33b8	ee db 0c	inc $0cdb			inc 	MCharCount 					; bump count (space for leading count)
.33bb	ac db 0c	ldy $0cdb			ldy 	MCharCount 					; get position
.33be	91 2a		sta ($2a),y			sta 	(temp0),y 					; write out with trailing 0
.33c0	c8		iny				iny
.33c1	a9 00		lda #$00			lda 	#0
.33c3	91 2a		sta ($2a),y			sta 	(temp0),y
.33c5	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32unary.asm

>0cdc					MSeed32:	.fill 	4							; random number seed.
.33c6					MInt32Absolute:
.33c6	b5 68		lda $68,x			lda 	esInt3,x 					; use negate code if -ve.
.33c8	30 01		bmi $33cb			bmi 	MInt32Negate
.33ca	60		rts				rts
.33cb					MInt32Negate:
.33cb	38		sec				sec 								; subtract from zero.
.33cc	a9 00		lda #$00			lda 	#0
.33ce	f5 50		sbc $50,x			sbc 	esInt0,x
.33d0	95 50		sta $50,x			sta 	esInt0,x
.33d2	a9 00		lda #$00			lda 	#0
.33d4	f5 58		sbc $58,x			sbc 	esInt1,x
.33d6	95 58		sta $58,x			sta 	esInt1,x
.33d8	a9 00		lda #$00			lda 	#0
.33da	f5 60		sbc $60,x			sbc 	esInt2,x
.33dc	95 60		sta $60,x			sta 	esInt2,x
.33de	a9 00		lda #$00			lda 	#0
.33e0	f5 68		sbc $68,x			sbc 	esInt3,x
.33e2	95 68		sta $68,x			sta 	esInt3,x
.33e4	60		rts				rts
.33e5					MInt32Not:
.33e5	b5 50		lda $50,x			lda 	esInt0,x 					; one's complement all four.
.33e7	49 ff		eor #$ff			eor 	#$FF
.33e9	95 50		sta $50,x			sta 	esInt0,x
.33eb	b5 58		lda $58,x			lda 	esInt1,x
.33ed	49 ff		eor #$ff			eor 	#$FF
.33ef	95 58		sta $58,x			sta 	esInt1,x
.33f1	b5 60		lda $60,x			lda 	esInt2,x
.33f3	49 ff		eor #$ff			eor 	#$FF
.33f5	95 60		sta $60,x			sta 	esInt2,x
.33f7	b5 68		lda $68,x			lda 	esInt3,x
.33f9	49 ff		eor #$ff			eor 	#$FF
.33fb	95 68		sta $68,x			sta 	esInt3,x
.33fd	60		rts				rts
.33fe					MInt32Sign:
.33fe	b5 68		lda $68,x			lda 	esInt3,x					; look at MSB
.3400	30 0b		bmi $340d			bmi 	MInt32True 					; if set return -1 (true)
.3402	20 38 34	jsr $3438			jsr 	MInt32Zero 					; is it zero ?
.3405	f0 0a		beq $3411			beq 	MInt32False 				; if zero return 0 (false)
.3407	20 11 34	jsr $3411			jsr 	MInt32False 				; > 0 return 1, by setting it to zero
.340a	f6 50		inc $50,x			inc 	esInt0,x  					; and bumping the LSB.
.340c	60		rts				rts
.340d					MInt32True:
.340d	a9 ff		lda #$ff			lda 	#$FF 						; set to $FFFFFFFF
.340f	d0 02		bne $3413			bne 	MInt32WriteAll
.3411					MInt32False:
.3411	a9 00		lda #$00			lda 	#0
.3413					MInt32WriteAll:
.3413	95 50		sta $50,x			sta 	esInt0,x
.3415					MInt32Write123:
.3415	95 58		sta $58,x			sta 	esInt1,x
.3417	95 60		sta $60,x			sta 	esInt2,x
.3419	95 68		sta $68,x			sta 	esInt3,x
.341b	a9 00		lda #$00			lda 	#$00						; and make it an integer
.341d	95 48		sta $48,x			sta 	esType,x
.341f	60		rts				rts
.3420					MInt32Set8Bit:
.3420	95 50		sta $50,x			sta 	esInt0,x 					; coopt above function to write
.3422	a9 00		lda #$00			lda 	#0 							; a value 0-255
.3424	f0 ef		beq $3415			beq		MInt32Write123
.3426					MInt32ShiftLeft:
.3426	16 50		asl $50,x			asl 	esInt0,x
.3428	36 58		rol $58,x			rol	 	esInt1,x
.342a	36 60		rol $60,x			rol	 	esInt2,x
.342c	36 68		rol $68,x			rol	 	esInt3,x
.342e	60		rts				rts
.342f					MInt32ShiftRight:
.342f	56 68		lsr $68,x			lsr 	esInt3,x
.3431	76 60		ror $60,x			ror 	esInt2,x
.3433	76 58		ror $58,x			ror 	esInt1,x
.3435	76 50		ror $50,x			ror 	esInt0,x
.3437	60		rts				rts
.3438					MInt32Zero:
.3438	b5 50		lda $50,x			lda 	esInt0,x
.343a	15 58		ora $58,x			ora 	esInt1,x
.343c	15 60		ora $60,x			ora 	esInt2,x
.343e	15 68		ora $68,x			ora 	esInt3,x
.3440	60		rts				rts
.3441					MInt32Random:
.3441	98		tya				tya
.3442	48		pha				pha
.3443	a0 07		ldy #$07			ldy 	#7 							; do it 7 times
.3445	ad dc 0c	lda $0cdc			lda 	MSeed32+0 					; check the seed isn't zero
.3448	d0 03		bne $344d			bne 	_Random1
.344a	a8		tay				tay 								; if so do it 256 times
.344b	a9 aa		lda #$aa			lda		#$AA 						; and use this to seed the seed....
.344d					_Random1:
.344d	0a		asl a				asl 	a
.344e	2e dd 0c	rol $0cdd			rol 	MSeed32+1
.3451	2e de 0c	rol $0cde			rol 	MSeed32+2
.3454	2e df 0c	rol $0cdf			rol 	MSeed32+3
.3457	90 02		bcc $345b			bcc 	_Random2
.3459	49 c5		eor #$c5			eor 	#$C5
.345b					_Random2:
.345b	88		dey				dey
.345c	d0 ef		bne $344d			bne 	_Random1
.345e	8d dc 0c	sta $0cdc			sta 	MSeed32+0 					; copy the seed in.
.3461	95 50		sta $50,x			sta 	esInt0,x
.3463	ad dd 0c	lda $0cdd			lda 	MSeed32+1
.3466	95 58		sta $58,x			sta 	esInt1,x
.3468	ad de 0c	lda $0cde			lda 	MSeed32+2
.346b	95 60		sta $60,x			sta 	esInt2,x
.346d	ad df 0c	lda $0cdf			lda 	MSeed32+3
.3470	95 68		sta $68,x			sta 	esInt3,x
.3472	68		pla				pla
.3473	a8		tay				tay
.3474	a9 00		lda #$00			lda 	#0
.3476	95 48		sta $48,x			sta 	esType,x
.3478	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/utility/check.asm

.3479					CheckToken:
.3479	d1 28		cmp ($28),y			cmp 	(codePtr),y
.347b	d0 02		bne $347f			bne 	_CTError
.347d	c8		iny				iny
.347e	60		rts				rts
.347f					_CTError:
.347f	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.3481	20 18 15	jsr $1518		jsr	errorHandler
.3484					CheckRightParen:
.3484	b1 28		lda ($28),y			lda 	(codePtr),y
.3486	c8		iny				iny
.3487	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.3489	d0 01		bne $348c			bne 	_CRPError
.348b	60		rts				rts
.348c					_CRPError:
.348c	a2 09		ldx #$09			ldx 	#ErrorID_MissingRP
.348e	20 18 15	jsr $1518		jsr	errorHandler
.3491					CheckComma:
.3491	b1 28		lda ($28),y			lda 	(codePtr),y
.3493	c8		iny				iny
.3494	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.3496	d0 01		bne $3499			bne 	_CCError
.3498	60		rts				rts
.3499					_CCError:
.3499	a2 0a		ldx #$0a			ldx 	#ErrorID_MissingComma
.349b	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/utility/stack.asm

.0037					rsPointer:
>0037							.fill 	2							; to TOS, which is the current top-token.
.349e					RSReset:
.349e	a9 ff		lda #$ff			lda 	#(returnStack+retStackSize-1) & $FF
.34a0	85 37		sta $37				sta 	rsPointer
.34a2	a9 09		lda #$09			lda 	#(returnStack+retStackSize-1) >> 8
.34a4	85 38		sta $38				sta 	1+(rsPointer)
.34a6	a9 ff		lda #$ff			lda 	#$FF 						; put a duff marker on TOS, so nothing will pop
.34a8	8d ff 09	sta $09ff			sta 	returnStack+retStackSize-1
.34ab	60		rts				rts
.34ac					RSClaim:
.34ac	84 32		sty $32				sty 	tempShort 					; preserve Y
.34ae	48		pha				pha 								; save marker on stack.
.34af	8a		txa				txa 								; get bytes required.
.34b0	38		sec				sec
.34b1	49 ff		eor #$ff			eor 	#$FF 						; add to rsPointer using 2's complement.
.34b3	65 37		adc $37				adc 	rsPointer
.34b5	85 37		sta $37				sta 	rsPointer
.34b7	a5 38		lda $38				lda 	rsPointer+1
.34b9	69 ff		adc #$ff			adc 	#$FF
.34bb	85 38		sta $38				sta 	rsPointer+1
.34bd	c9 08		cmp #$08			cmp 	#returnStack>>8 			; overflow. underflow actually :)
.34bf	90 08		bcc $34c9			bcc 	_RSCOverflow
.34c1	68		pla				pla 								; get marker back
.34c2	a0 00		ldy #$00			ldy 	#0 							; write marker out.
.34c4	91 37		sta ($37),y			sta 	(rsPointer),y
.34c6	a4 32		ldy $32				ldy 	tempShort 					; restore Y and exit
.34c8	60		rts				rts
.34c9					_RSCOverflow:
.34c9	a2 16		ldx #$16			ldx 	#ErrorID_RetStack
.34cb	20 18 15	jsr $1518		jsr	errorHandler
.34ce					RSFree:
.34ce	18		clc				clc
.34cf	65 37		adc $37				adc 	rsPointer
.34d1	85 37		sta $37				sta 	rsPointer
.34d3	90 02		bcc $34d7			bcc 	_RSFExit
.34d5	e6 38		inc $38				inc 	rsPointer+1
.34d7					_RSFExit:
.34d7	60		rts				rts
.34d8					RSSavePosition:
.34d8	84 32		sty $32				sty 	tempShort 					; save Y position
.34da	a8		tay				tay 								; this is where we write it.
.34db	a5 28		lda $28				lda 	codePtr 					; write codePointer out
.34dd	91 37		sta ($37),y			sta 	(rsPointer),y
.34df	c8		iny				iny
.34e0	a5 29		lda $29				lda 	codePtr+1
.34e2	91 37		sta ($37),y			sta 	(rsPointer),y
.34e4	c8		iny				iny
.34e5	a5 32		lda $32				lda 	tempShort 					; write the Y position out.
.34e7	91 37		sta ($37),y			sta 	(rsPointer),y
.34e9	a8		tay				tay 								; fix Y back again to original value
.34ea	60		rts				rts
.34eb					RSLoadPosition:
.34eb	a8		tay				tay
.34ec	b1 37		lda ($37),y			lda 	(rsPointer),y 				; read codePointer back
.34ee	85 28		sta $28				sta 	codePtr
.34f0	c8		iny				iny
.34f1	b1 37		lda ($37),y			lda 	(rsPointer),y
.34f3	85 29		sta $29				sta 	codePtr+1
.34f5	c8		iny				iny
.34f6	b1 37		lda ($37),y			lda 	(rsPointer),y 				; and the offset
.34f8	a8		tay				tay 								; to Y
.34f9	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/utility/warmstart.asm

.34fa					WarmStart:
.34fa	a2 04		ldx #$04		ldx	#4
.34fc	20 65 1e	jsr $1e65		jsr	interactionHandler

;******  Return to file: main/main.asm

.34ff					mainHandler:
.34ff	7c 02 35	jmp ($3502,x)			jmp 	(mainVectors,x)
.3502					mainVectors:
>3502	1e 35					.word _DummyControlHandler ; index 0
>3504	91 34					.word CheckComma           ; index 2
>3506	84 34					.word CheckRightParen      ; index 4
>3508	6d 26					.word XCommandClear        ; index 6
>350a	94 2d					.word LinkEvaluate         ; index 8
>350c	a0 2d					.word LinkEvaluateInteger  ; index 10
>350e	ac 2d					.word LinkEvaluateSmallInt ; index 12
>3510	a6 2d					.word LinkEvaluateString   ; index 14
>3512	9a 2d					.word LinkEvaluateTerm     ; index 16
>3514	60 33					.word MLInt32ToString      ; index 18
>3516	fc 27					.word Command_XNew         ; index 20
>3518	0a 28					.word XCommand_Run         ; index 22
>351a	16 28					.word Command_RunFrom      ; index 24
>351c	78 32					.word LinkInt32FromString  ; index 26
.351e					_DummyControlHandler:
.351e	60		rts			rts

;******  Return to file: basic.asm

.351f					section_end_main:
.351f					section_start_string:

;******  Processing file: string/string.asm


;******  Processing file: string/functions/chr.asm

.351f					StringChrs:
.351f	aa		tax				tax 								; set up stack
.3520	a9 02		lda #$02			lda 	#2
.3522	20 e2 35	jsr $35e2			jsr 	AllocateSoftString
.3525	98		tya				tya
.3526	20 08 36	jsr $3608			jsr 	WriteSoftString
.3529					StringUpdate:
.3529	20 37 35	jsr $3537			jsr 	ReturnSoftString
.352c	8a		txa				txa
.352d	60		rts				rts
.352e					StringNull:
.352e	aa		tax				tax
.352f	a9 01		lda #$01			lda 	#1
.3531	20 e2 35	jsr $35e2			jsr 	AllocateSoftString
.3534	4c 29 35	jmp $3529			jmp 	StringUpdate
.3537					ReturnSoftString:
.3537	a5 39		lda $39				lda 	softMemAlloc 				; copy address
.3539	95 50		sta $50,x			sta 	esInt0,x
.353b	a5 3a		lda $3a				lda 	softMemAlloc+1
.353d	95 58		sta $58,x			sta 	esInt1,x
.353f	a9 00		lda #$00			lda 	#0 							; zero upper bytes
.3541	95 60		sta $60,x			sta 	esInt2,x
.3543	95 68		sta $68,x			sta 	esInt3,x
.3545	a9 40		lda #$40			lda 	#$40 						; type string.
.3547	95 48		sta $48,x			sta 	esType,x
.3549	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/functions/compare.asm

.354a					STRCompare:
.354a	48		pha				pha 								; save A
.354b	aa		tax				tax 								; put stack pos in X
.354c	98		tya				tya
.354d	48		pha				pha
.354e	20 82 35	jsr $3582			jsr 	CopyStringPair 				; copy strings to temp0,temp1
.3551	a0 00		ldy #$00			ldy 	#0 							; get the smaller of the two string sizes.
.3553	b1 2a		lda ($2a),y			lda 	(temp0),y
.3555	d1 2c		cmp ($2c),y			cmp 	(temp1),y
.3557	90 02		bcc $355b			bcc 	_SCNotSmaller
.3559	b1 2c		lda ($2c),y			lda 	(temp1),y
.355b					_SCNotSmaller:
.355b	aa		tax				tax 								; put that in X. We compare this many chars first.
.355c					_SCCompareLoop:
.355c	e0 00		cpx #$00			cpx 	#0 							; if compared all the smaller, then it is the shorter
.355e	f0 0c		beq $356c			beq 	_SCSameToEndShortest 		; one that is the smallest if they are different lengths.
.3560	ca		dex				dex 								; decrement chars to compare.
.3561	c8		iny				iny 								; move to next character
.3562	38		sec				sec 								; calculate s1[y]-s2[y]
.3563	b1 2a		lda ($2a),y			lda 	(temp0),y
.3565	f1 2c		sbc ($2c),y			sbc 	(temp1),y
.3567	d0 0a		bne $3573			bne 	_SCReturnResult 			; if different return sign of A
.3569	4c 5c 35	jmp $355c			jmp 	_SCCompareLoop
.356c					_SCSameToEndShortest
.356c	a0 00		ldy #$00			ldy 	#0 							; compare len(s1) - len(s2)
.356e	38		sec				sec
.356f	b1 2a		lda ($2a),y			lda 	(temp0),y
.3571	f1 2c		sbc ($2c),y			sbc 	(temp1),y
.3573					_SCReturnResult:
.3573	08		php				php 								; set return to zero preserving PSW.
.3574	a2 00		ldx #$00			ldx 	#0
.3576	28		plp				plp
.3577	f0 05		beq $357e			beq 	_SCExit 					; two values equal, then exit
.3579	ca		dex				dex 								; X = $FF
.357a	90 02		bcc $357e			bcc 	_SCExit 					; if 1st < 2nd then -1
.357c	a2 01		ldx #$01			ldx 	#1 							; X = $01 if greater
.357e					_SCExit:
.357e	68		pla				pla
.357f	a8		tay				tay
.3580	68		pla				pla
.3581	60		rts				rts
.3582					CopyStringPair:
.3582	b5 51		lda $51,x			lda 	esInt0+1,x
.3584	85 2c		sta $2c				sta 	temp1
.3586	b5 59		lda $59,x			lda 	esInt1+1,x
.3588	85 2d		sta $2d				sta 	temp1+1
.358a					CopyStringTop:
.358a	b5 50		lda $50,x			lda 	esInt0,x
.358c	85 2a		sta $2a				sta 	temp0
.358e	b5 58		lda $58,x			lda 	esInt1,x
.3590	85 2b		sta $2b				sta 	temp0+1
.3592	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/functions/concat.asm

.3593					StringConcat:
.3593	aa		tax				tax									; stack pos in X
.3594	98		tya				tya
.3595	48		pha				pha
.3596	20 82 35	jsr $3582			jsr 	CopyStringPair 				; temp0 and temp1 point to strings to concat.
.3599	38		sec				sec 								; calculate alloc strings. lengths added + 1 for size.
.359a	a0 00		ldy #$00			ldy 	#0
.359c	b1 2a		lda ($2a),y			lda 	(temp0),y
.359e	71 2c		adc ($2c),y			adc 	(temp1),y
.35a0	b0 1c		bcs $35be			bcs 	_SCError 					; just too many characters here.
.35a2	c9 fc		cmp #$fc			cmp 	#MaxStringSize
.35a4	b0 18		bcs $35be			bcs 	_SCError
.35a6	20 e2 35	jsr $35e2			jsr 	AllocateSoftString 			; allocate soft string memory, set pointer.
.35a9	20 d9 35	jsr $35d9			jsr 	CopySoftToStack 			; copy that to the stack.
.35ac	20 c3 35	jsr $35c3			jsr 	SCCopyTemp0 				; copy temp0
.35af	a5 2c		lda $2c				lda 	temp1 						; copy temp1 to temp0
.35b1	85 2a		sta $2a				sta 	temp0
.35b3	a5 2d		lda $2d				lda 	temp1+1
.35b5	85 2b		sta $2b				sta 	temp0+1
.35b7	20 c3 35	jsr $35c3			jsr 	SCCopyTemp0 				; copy temp0 e.g. what was temp1.
.35ba	68		pla				pla
.35bb	a8		tay				tay
.35bc	8a		txa				txa 								; and A
.35bd	60		rts				rts
.35be					_SCError:
.35be	a2 0d		ldx #$0d			ldx 	#ErrorID_StrLen
.35c0	20 18 15	jsr $1518		jsr	errorHandler
.35c3					SCCopyTemp0:
.35c3	a0 00		ldy #$00			ldy 	#0 							; put count in temp2
.35c5	b1 2a		lda ($2a),y			lda 	(temp0),y
.35c7	85 2e		sta $2e				sta 	temp2
.35c9					_SCCopyLoop:
.35c9	a5 2e		lda $2e				lda 	temp2 						; done the lot
.35cb	f0 0b		beq $35d8			beq 	_SCCopyExit
.35cd	c6 2e		dec $2e				dec 	temp2
.35cf	c8		iny				iny 								; get next char
.35d0	b1 2a		lda ($2a),y			lda 	(temp0),y
.35d2	20 08 36	jsr $3608			jsr 	WriteSoftString 			; write to soft string.
.35d5	4c c9 35	jmp $35c9			jmp 	_SCCopyLoop
.35d8					_SCCopyExit:
.35d8	60		rts				rts
.35d9					CopySoftToStack:
.35d9	a5 39		lda $39				lda 	SoftMemAlloc 				; copy the memory allocation pointer to the stack.
.35db	95 50		sta $50,x			sta 	esInt0,x 					; type is already string.
.35dd	a5 3a		lda $3a				lda 	SoftMemAlloc+1
.35df	95 58		sta $58,x			sta 	esInt1,x
.35e1	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/functions/memory.asm

.0039					softMemAlloc:
>0039							.fill 	2  							; if MSB is zero needs resetting on allocation.
.35e2					AllocateSoftString:
.35e2	85 32		sta $32				sta 	tempShort 					; save count
.35e4	98		tya				tya
.35e5	48		pha				pha
.35e6	a5 3a		lda $3a				lda 	softMemAlloc+1 				; if the high byte is zero, it needs allocating.
.35e8	d0 09		bne $35f3			bne 	_ASSDone
.35ea	a5 33		lda $33				lda 	highMemory 					; reset the soft memory alloc pointer.
.35ec	85 39		sta $39				sta 	softMemAlloc 				; to speed up slightly, we only reset this when we first need it
.35ee	a4 34		ldy $34				ldy 	highMemory+1 				; but it needs to be reset before each command.
.35f0	88		dey				dey 								; it is set to 1/4k below high memory, allowing space
.35f1	84 3a		sty $3a				sty 	softMemAlloc+1 				; for a concreted string.
.35f3					_ASSDone:
.35f3	38		sec				sec 								; allocate downwards enough memory
.35f4	a5 39		lda $39				lda 	softMemAlloc 				; subtract the memory requirements in A from
.35f6	e5 32		sbc $32				sbc 	tempShort 					; the soft memory pointer
.35f8	85 39		sta $39				sta 	softMemAlloc
.35fa	a5 3a		lda $3a				lda 	softMemAlloc+1
.35fc	e9 00		sbc #$00			sbc 	#0
.35fe	85 3a		sta $3a				sta 	softMemAlloc+1
.3600	a9 00		lda #$00			lda 	#0 							; empty that string, set the length = 0.
.3602	a8		tay				tay
.3603	91 39		sta ($39),y			sta 	(softMemAlloc),y
.3605	68		pla				pla
.3606	a8		tay				tay
.3607	60		rts				rts
.3608					WriteSoftString:
.3608	84 32		sty $32				sty 	tempShort 					; save Y
.360a	48		pha				pha 								; save character on stack
.360b	a0 00		ldy #$00			ldy 	#0 							; get and bump length
.360d	b1 39		lda ($39),y			lda 	(softMemAlloc),y
.360f	18		clc				clc
.3610	69 01		adc #$01			adc 	#1
.3612	91 39		sta ($39),y			sta 	(softMemAlloc),y
.3614	a8		tay				tay 								; offset in Y
.3615	68		pla				pla 								; get char and write.
.3616	91 39		sta ($39),y			sta 	(softMemAlloc),y
.3618	a4 32		ldy $32				ldy 	tempShort 					; restore Y and exit.
.361a	60		rts				rts
.361b					StrClone:
.361b	aa		tax				tax 								; set up stack.
.361c	98		tya				tya
.361d	48		pha				pha
.361e	a0 00		ldy #$00			ldy 	#0 							; get length, add 1 for length
.3620	b1 2a		lda ($2a),y			lda 	(temp0),y 					; this is the bytes required.
.3622	18		clc				clc
.3623	69 01		adc #$01			adc 	#1
.3625	20 e2 35	jsr $35e2			jsr 	AllocateSoftString 			; allocate soft memory
.3628	a5 39		lda $39				lda 	softMemAlloc 				; copy that address to TOS
.362a	95 50		sta $50,x			sta 	esInt0,x
.362c	a5 3a		lda $3a				lda 	softMemAlloc+1
.362e	95 58		sta $58,x			sta 	esInt1,x
.3630	a9 00		lda #$00			lda 	#0 							; zero upper 2 bytes
.3632	95 60		sta $60,x			sta 	esInt2,x
.3634	95 68		sta $68,x			sta 	esInt3,x
.3636	a9 40		lda #$40			lda 	#$40 						; set type to string.
.3638	95 48		sta $48,x			sta 	esType,x
.363a	20 c3 35	jsr $35c3			jsr 	SCCopyTemp0 				; copy temp0 string to soft memory copy (concat.asm)
.363d	68		pla				pla
.363e	a8		tay				tay
.363f	8a		txa				txa
.3640	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/functions/setcase.asm

.3641					CaseString:
.3641	48		pha				pha 								; save A and copy to X
.3642	aa		tax				tax
.3643	98		tya				tya
.3644	48		pha				pha
.3645	20 8a 35	jsr $358a			jsr 	CopyStringTop 				; target string -> temp0
.3648	a0 00		ldy #$00			ldy 	#0
.364a	b1 2a		lda ($2a),y			lda 	(temp0),y  					; get length,
.364c	18		clc				clc
.364d	69 01		adc #$01			adc 	#1 							; one more for length byte
.364f	20 e2 35	jsr $35e2			jsr 	AllocateSoftString 			; allocate soft string memory, set pointer.
.3652	20 d9 35	jsr $35d9			jsr 	CopySoftToStack 			; copy that to the stack.
.3655	a0 00		ldy #$00			ldy 	#0
.3657	b1 2a		lda ($2a),y			lda 	(temp0),y 					; count to copy in X
.3659	aa		tax				tax
.365a					_CSCopy:
.365a	e0 00		cpx #$00			cpx 	#0 							; finished if 0.
.365c	f0 24		beq $3682			beq 	_CSExit
.365e	ca		dex				dex
.365f	c8		iny				iny
.3660	68		pla				pla 								; check direction
.3661	48		pha				pha
.3662	f0 0c		beq $3670			beq 	_CSUpper
.3664	b1 2a		lda ($2a),y			lda 	(temp0),y 					; lower$() code
.3666	c9 41		cmp #$41			cmp 	#"A"
.3668	90 12		bcc $367c			bcc 	_CSWrite
.366a	c9 5b		cmp #$5b			cmp 	#"Z"+1
.366c	b0 0e		bcs $367c			bcs 	_CSWrite
.366e	90 0a		bcc $367a			bcc 	_CSFlipWrite
.3670					_CSUpper:
.3670	b1 2a		lda ($2a),y			lda 	(temp0),y 					; upper$() code
.3672	c9 61		cmp #$61			cmp 	#"a"
.3674	90 06		bcc $367c			bcc 	_CSWrite
.3676	c9 7b		cmp #$7b			cmp 	#"z"+1
.3678	b0 02		bcs $367c			bcs 	_CSWrite
.367a					_CSFlipWrite:
.367a	49 20		eor #$20			eor 	#"A"^"a" 					; switch case.
.367c					_CSWrite:
.367c	20 08 36	jsr $3608			jsr 	WriteSoftString 			; add to soft string.
.367f	4c 5a 36	jmp $365a			jmp 	_CSCopy
.3682					_CSExit:
.3682	68		pla				pla
.3683	a8		tay				tay
.3684	68		pla				pla
.3685	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/functions/substring.asm

.3686					StringSubstring:
.3686	48		pha				pha
.3687	aa		tax				tax 								; access stack.
.3688	98		tya				tya
.3689	48		pha				pha
.368a	20 8a 35	jsr $358a			jsr 	CopyStringTop 				; point temp0 to the string.
.368d	a0 00		ldy #$00			ldy 	#0 							; get length.
.368f	b1 2a		lda ($2a),y			lda 	(temp0),Y
.3691	85 2c		sta $2c				sta 	temp1
.3693	b5 51		lda $51,x			lda 	esInt0+1,x 					; get the initial offset
.3695	c5 2c		cmp $2c				cmp 	temp1 						; return "" if > length.
.3697	f0 02		beq $369b			beq 	_SSBOkay
.3699	b0 2a		bcs $36c5			bcs 	_SSBReturnNull
.369b					_SSBOkay:
.369b	a5 2c		lda $2c				lda 	temp1 						; get the total length +1
.369d	18		clc				clc
.369e	69 01		adc #$01			adc 	#1
.36a0	38		sec				sec
.36a1	f5 51		sbc $51,x			sbc 	esInt0+1,x 					; the anything >= this is bad - max size
.36a3	d5 52		cmp $52,x			cmp 	esInt0+2,x  				; check bad >= required
.36a5	90 02		bcc $36a9			bcc		_SSBTrunc
.36a7	b5 52		lda $52,x			lda 	esInt0+2,x
.36a9					_SSBTrunc:
.36a9	85 2d		sta $2d				sta 	temp1+1 					; characters to copy.
.36ab	18		clc				clc
.36ac	69 01		adc #$01			adc 	#1 							; add 1
.36ae	20 e2 35	jsr $35e2			jsr 	AllocateSoftString 			; allocate soft string memory, set pointer.
.36b1	20 d9 35	jsr $35d9			jsr 	CopySoftToStack 			; copy that to the stack.
.36b4	b4 51		ldy $51,x			ldy 	esInt0+1,x 					; get initial position of char to copy
.36b6					_SSBCopyLoop:
.36b6	a5 2d		lda $2d				lda 	temp1+1 					; done them all
.36b8	f0 0e		beq $36c8			beq 	_SSBExit
.36ba	c6 2d		dec $2d				dec 	temp1+1
.36bc	b1 2a		lda ($2a),y			lda 	(temp0),y 					; get and write character
.36be	20 08 36	jsr $3608			jsr 	WriteSoftString
.36c1	c8		iny				iny
.36c2	4c b6 36	jmp $36b6			jmp 	_SSBCopyLoop
.36c5					_SSBReturnNull:
.36c5	20 cc 36	jsr $36cc			jsr 	ReturnNull
.36c8					_SSBExit:
.36c8	68		pla				pla
.36c9	a8		tay				tay
.36ca	68		pla				pla
.36cb	60		rts				rts
.36cc					ReturnNull:
.36cc	a9 00		lda #$00			lda 	#0 							; clear null string
.36ce	8d ce 0a	sta $0ace			sta 	NullString
.36d1	a9 ce		lda #$ce			lda 	#NullString & $FF 			; set a pointer to it
.36d3	95 50		sta $50,x			sta 	esInt0,x
.36d5	a9 0a		lda #$0a			lda 	#NullString >> 8
.36d7	95 58		sta $58,x			sta 	esInt1,x
.36d9	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/functions/write.asm

.0ce0					srcStrLen:
>0ce0							.fill 	1
.36da					StringWrite:
.36da	aa		tax				tax
.36db	48		pha				pha
.36dc	98		tya				tya
.36dd	48		pha				pha
.36de	20 05 37	jsr $3705			jsr 	CheckOverwriteCurrent
.36e1	b0 0d		bcs $36f0			bcs		_SWCopyCurrent
.36e3	20 43 37	jsr $3743			jsr 	RequiresConcretion
.36e6	90 0e		bcc $36f6			bcc 	_SWWriteReference
.36e8	20 a6 37	jsr $37a6			jsr 	CheckSpecialConcretion
.36eb	b0 09		bcs $36f6			bcs 	_SWWriteReference
.36ed	20 57 37	jsr $3757			jsr 	AllocateHardMemory
.36f0					_SWCopyCurrent:
.36f0	20 8a 37	jsr $378a			jsr 	CopyStringToHardMemory
.36f3	4c 01 37	jmp $3701			jmp 	_SWExit
.36f6					_SWWriteReference
.36f6	a0 00		ldy #$00			ldy 	#0
.36f8	a5 2a		lda $2a				lda 	temp0
.36fa	91 2c		sta ($2c),y			sta 	(temp1),y
.36fc	c8		iny				iny
.36fd	a5 2b		lda $2b				lda 	temp0+1
.36ff	91 2c		sta ($2c),y			sta 	(temp1),y
.3701					_SWExit:
.3701	68		pla				pla
.3702	a8		tay				tay
.3703	68		pla				pla
.3704	60		rts				rts
.3705					CheckOverwriteCurrent:
.3705	a0 00		ldy #$00			ldy 	#0 						; get address of string being written to temp0
.3707	b5 59		lda $59,x			lda 	esInt1+1,x
.3709	85 2b		sta $2b				sta 	temp0+1
.370b	b5 51		lda $51,x			lda 	esInt0+1,x
.370d	85 2a		sta $2a				sta 	temp0
.370f	b1 2a		lda ($2a),y			lda 	(temp0),y 				; get length of string being copied and save it.
.3711	8d e0 0c	sta $0ce0			sta 	srcStrLen
.3714	b5 50		lda $50,x			lda 	esInt0,x 				; copy where the final address it being written to temp1.
.3716	85 2c		sta $2c				sta 	temp1 					; e.g. if it is ax$ then temp1 will point to the ax$
.3718	b5 58		lda $58,x			lda 	esInt1,x 				; data record + 5
.371a	85 2d		sta $2d				sta 	temp1+1
.371c	a0 01		ldy #$01			ldy 	#1 						; get the MSB of the address of string currently stored there.
.371e	b1 2c		lda ($2c),y			lda 	(temp1),y
.3720	c5 34		cmp $34				cmp 	highMemory+1 			; if < high memory then it cannot be something stored
.3722	90 1b		bcc $373f			bcc 	_COCFail 				; in hard memory.
.3724	a0 00		ldy #$00			ldy 	#0 						; copy target address - 1 into temp2
.3726	b1 2c		lda ($2c),y			lda 	(temp1),y 				; when allocating hard memory, the overall size is
.3728	e9 01		sbc #$01			sbc 	#1 						; in the previous byte.
.372a	85 2e		sta $2e				sta 	temp2
.372c	c8		iny				iny
.372d	b1 2c		lda ($2c),y			lda 	(temp1),y
.372f	e9 00		sbc #$00			sbc 	#0
.3731	85 2f		sta $2f				sta 	temp2+1
.3733	a0 00		ldy #$00			ldy 	#0 						; how large is this physical chunk.
.3735	b1 2e		lda ($2e),y			lda 	(temp2),y
.3737	38		sec				sec  							; maximum character capacity.
.3738	e9 02		sbc #$02			sbc 	#2
.373a	cd e0 0c	cmp $0ce0			cmp 	srcStrLen 				; if >= the required length
.373d	b0 02		bcs $3741			bcs 	_COCCanReuse
.373f					_COCFail:
.373f	18		clc				clc
.3740	60		rts				rts
.3741					_COCCanReuse:
.3741	38		sec				sec
.3742	60		rts				rts
.3743					RequiresConcretion:
.3743	a5 2b		lda $2b				lda 	temp0+1 				; get MSB of address of string to be written
.3745	c5 34		cmp $34				cmp 	highMemory+1 			; if >= high memory it is concreted
.3747	b0 0a		bcs $3753			bcs 	_RCSucceed 				; so it needs concreting again - duplication.
.3749	a5 3a		lda $3a				lda 	softMemAlloc+1 			; have we allocated any soft memory yet ?
.374b	f0 08		beq $3755			beq 	_RCFail 				; if not, this cannot be soft memory.
.374d	a5 2b		lda $2b				lda 	temp0+1 				; get MSB of address of string to be written
.374f	c5 3a		cmp $3a				cmp 	softMemAlloc+1 			; if >= soft mem alloc it is either soft
.3751	90 02		bcc $3755			bcc 	_RCFail 				; so concreting
.3753					_RCSucceed:
.3753	38		sec				sec
.3754	60		rts				rts
.3755					_RCFail:
.3755	18		clc				clc
.3756	60		rts				rts
.3757					AllocateHardMemory:
.3757	98		tya				tya
.3758	48		pha				pha
.3759	ad e0 0c	lda $0ce0			lda 	srcStrLen 				; characters in string
.375c	69 0a		adc #$0a			adc 	#1+1+8 					; one for hard memory size, one for string size, extra for expansion
.375e	b0 04		bcs $3764			bcs 	_AHMSetMax 				; max out that amount.
.3760	c9 fe		cmp #$fe			cmp 	#MaxStringSize+2
.3762	90 02		bcc $3766			bcc 	_AHMIsOkay
.3764					_AHMSetMax:
.3764	a9 fe		lda #$fe			lda 	#MaxStringSize+2
.3766					_AHMIsOkay:
.3766	48		pha				pha	 							; save size to be allocated
.3767	49 ff		eor #$ff			eor 	#$FF 					; complement and add to high Memory
.3769	38		sec				sec  							; and copy result to TOS as target address.
.376a	65 33		adc $33				adc 	highMemory
.376c	85 33		sta $33				sta 	highMemory
.376e	a5 34		lda $34				lda 	highMemory+1
.3770	69 ff		adc #$ff			adc 	#$FF
.3772	85 34		sta $34				sta 	highMemory+1
.3774	a0 00		ldy #$00			ldy 	#0 						; Y = 0
.3776	68		pla				pla 							; get the total size of the storage block
.3777	91 33		sta ($33),y			sta 	(highMemory),y 			; and set it
.3779	18		clc				clc
.377a	a5 33		lda $33				lda		highMemory 				; point the target address to the byte after this.
.377c	69 01		adc #$01			adc 	#1
.377e	91 2c		sta ($2c),y			sta 	(temp1),y
.3780	a5 34		lda $34				lda 	highMemory+1
.3782	69 00		adc #$00			adc 	#0
.3784	c8		iny				iny
.3785	91 2c		sta ($2c),y			sta 	(temp1),y
.3787	68		pla				pla
.3788	a8		tay				tay
.3789	60		rts				rts
.378a					CopyStringToHardMemory:
.378a	98		tya				tya
.378b	48		pha				pha
.378c	a0 00		ldy #$00			ldy 	#0 						; copy target address to temp2
.378e	b1 2c		lda ($2c),y			lda 	(temp1),y
.3790	85 2e		sta $2e				sta 	temp2
.3792	c8		iny				iny
.3793	b1 2c		lda ($2c),y			lda 	(temp1),y
.3795	85 2f		sta $2f				sta 	temp2+1
.3797	ac e0 0c	ldy $0ce0			ldy 	srcStrLen 				; copy this + 1 characters, (length too) hence $FF compare
.379a					_CSTHMLoop:
.379a	b1 2a		lda ($2a),y			lda 	(temp0),y
.379c	91 2e		sta ($2e),y			sta 	(temp2),y
.379e	88		dey				dey
.379f	c0 ff		cpy #$ff			cpy 	#$FF 					; this does the +1
.37a1	d0 f7		bne $379a			bne 	_CSTHMLoop
.37a3	68		pla				pla
.37a4	a8		tay				tay
.37a5	60		rts				rts
.37a6					CheckSpecialConcretion:
.37a6	ad e0 0c	lda $0ce0			lda 	srcStrLen 				; check string is null e.g. length = 0
.37a9	f0 02		beq $37ad			beq 	_CSCNullString
.37ab	18		clc				clc
.37ac	60		rts				rts
.37ad					_CSCNullString:
.37ad	a9 00		lda #$00			lda 	#0 						; by always returning this address we don't waste
.37af	8d ce 0a	sta $0ace			sta 	NullString		 		; storage on null strings.
.37b2	a9 ce		lda #$ce			lda 	#(NullString) & $FF
.37b4	85 2a		sta $2a				sta 	temp0
.37b6	a9 0a		lda #$0a			lda 	#(NullString) >> 8
.37b8	85 2b		sta $2b				sta 	1+(temp0)
.37ba	38		sec				sec
.37bb	60		rts				rts

;******  Return to file: string/string.asm

.37bc					stringHandler:
.37bc	7c bf 37	jmp ($37bf,x)			jmp 	(stringVectors,x)
.37bf					stringVectors:
>37bf	d1 37					.word _DummyControlHandler ; index 0
>37c1	1f 35					.word StringChrs           ; index 2
>37c3	1b 36					.word StrClone             ; index 4
>37c5	93 35					.word StringConcat         ; index 6
>37c7	2e 35					.word StringNull           ; index 8
>37c9	4a 35					.word STRCompare           ; index 10
>37cb	41 36					.word CaseString           ; index 12
>37cd	86 36					.word StringSubstring      ; index 14
>37cf	da 36					.word StringWrite          ; index 16
.37d1					_DummyControlHandler:
.37d1	60		rts			rts

;******  Return to file: basic.asm

.37d2					section_end_string:
.37d2					section_start_tokeniser:

;******  Processing file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/detokenise/detokenise.asm

.0ce1					deTokeniseVector:
>0ce1							.fill 	2
.0ce3					lastCharacterClass:
>0ce3							.fill 	1
.0ce4					indent:
>0ce4							.fill 	1
.37d2					ListLine:
.37d2	48		pha				pha								; enter here to list to console. sets the output vector
.37d3	a9 0a		lda #$0a			lda 	#(deTokenPrint) & $FF
.37d5	8d e1 0c	sta $0ce1			sta 	deTokeniseVector
.37d8	a9 39		lda #$39			lda 	#(deTokenPrint) >> 8
.37da	8d e2 0c	sta $0ce2			sta 	1+(deTokeniseVector)
.37dd	68		pla				pla
.37de					Detokenise:
.37de	18		clc				clc 							; space required for line number.
.37df	69 06		adc #$06			adc 	#6
.37e1	8d e4 0c	sta $0ce4			sta 	indent
.37e4	a9 ff		lda #$ff			lda 	#$FF 					; last thing printed is a dummy value.
.37e6	8d e3 0c	sta $0ce3			sta 	lastCharacterClass
.37e9	a2 02		ldx #$02			ldx 	#2
.37eb	a9 00		lda #$00			lda 	#0 						; clear upper two bytes
.37ed	95 60		sta $60,x			sta 	esInt2,x
.37ef	95 68		sta $68,x			sta 	esInt3,x
.37f1	a0 01		ldy #$01			ldy 	#1 						; copy line number to stack,2 (as using stack 0,1 for list range)
.37f3	b1 28		lda ($28),y			lda 	(codePtr),y
.37f5	95 50		sta $50,x			sta 	esInt0,x
.37f7	c8		iny				iny
.37f8	b1 28		lda ($28),y			lda 	(codePtr),y
.37fa	95 58		sta $58,x			sta 	esInt1,x
.37fc	a9 84		lda #$84			lda 	#LTYLineNumber
.37fe	20 e5 38	jsr $38e5			jsr 	ListOutputCharacter
.3801	a9 0a		lda #$0a			lda 	#10 					; base 10
.3803	20 a9 38	jsr $38a9			jsr 	DTPrintInteger 			; print as integer.
.3806	a0 00		ldy #$00			ldy 	#0 						; get length
.3808	b1 2a		lda ($2a),y			lda 	(temp0),y 				; into X
.380a	aa		tax				tax
.380b					_DTPadOut:
.380b	a9 20		lda #$20			lda 	#" " 					; pad out to indent.
.380d	20 e5 38	jsr $38e5			jsr 	ListOutputCharacter
.3810	e8		inx				inx
.3811	ec e4 0c	cpx $0ce4			cpx 	indent
.3814	d0 f5		bne $380b			bne 	_DTPadOut
.3816	a0 03		ldy #$03			ldy 	#3 						; start position.
.3818					_DTListLoop:
.3818	b1 28		lda ($28),y			lda 	(codePtr),y
.381a	c9 85		cmp #$85			cmp 	#TOK_STR 				; Inline string.
.381c	f0 5e		beq $387c			beq 	_DTIsString
.381e	c9 84		cmp #$84			cmp 	#TOK_FPC 				; Floating point
.3820	f0 56		beq $3878			beq 	_DTIsFloat
.3822	c9 c5		cmp #$c5			cmp 	#TKW_AMP 				; & hex marker
.3824	f0 16		beq $383c			beq 	_DTHexConstant
.3826	c9 80		cmp #$80			cmp 	#TOK_EOL 				; End of Line
.3828	d0 06		bne $3830			bne 	_DTNotEnd
.382a	a9 ff		lda #$ff			lda 	#255 					; print CR
.382c	20 e5 38	jsr $38e5			jsr 	ListOutputCharacter
.382f	60		rts				rts
.3830					_DTNotEnd:
.3830	c9 00		cmp #$00			cmp 	#0
.3832	30 38		bmi $386c			bmi 	_DTIsToken
.3834	c9 40		cmp #$40			cmp 	#$40
.3836	90 3a		bcc $3872			bcc 	_DTIsIdentifier
.3838	a9 0a		lda #$0a			lda 	#10 					; this is the base, unsigned decimal
.383a	d0 0d		bne $3849			bne 	_DTConstant
.383c					_DTHexConstant:
.383c	a9 26		lda #$26			lda 	#"&"
.383e	20 e5 38	jsr $38e5			jsr 	ListOutputCharacter
.3841	c8		iny				iny
.3842	a9 01		lda #$01			lda 	#1 						; switch to spaces so &xxxx is treated like a number.
.3844	20 26 39	jsr $3926			jsr 	DTSwitchMode
.3847	a9 10		lda #$10			lda 	#16						; print line unsigned hex
.3849					_DTConstant:
.3849	48		pha				pha
.384a	a9 00		lda #$00			lda 	#0 						; now constant, may need spaces
.384c	20 26 39	jsr $3926			jsr 	DTSwitchMode
.384f	a9 86		lda #$86			lda 	#LTYConstant
.3851	20 e5 38	jsr $38e5			jsr 	ListOutputCharacter
.3854	a2 02		ldx #$02			ldx 	#2 						; get its value
.3856	8a		txa				txa
.3857	a2 10		ldx #$10		ldx	#16
.3859	20 ff 34	jsr $34ff		jsr	mainHandler
.385c	aa		tax				tax
.385d	68		pla				pla 							; get base back
.385e	85 32		sta $32				sta 	tempShort
.3860	98		tya				tya
.3861	48		pha				pha
.3862	a5 32		lda $32				lda 	tempShort 				; print in base A stck level X
.3864	20 a9 38	jsr $38a9			jsr 	DTPrintInteger
.3867	68		pla				pla
.3868	a8		tay				tay
.3869	4c 18 38	jmp $3818			jmp 	_DTListLoop
.386c					_DTIsToken:
.386c	20 7f 39	jsr $397f			jsr 	DTDecodeToken
.386f	4c 18 38	jmp $3818			jmp 	_DTListLoop
.3872					_DTIsIdentifier:
.3872	20 38 39	jsr $3938			jsr 	DTIdentifier
.3875	4c 18 38	jmp $3818			jmp 	_DTListLoop
.3878					_DTIsFloat:
>3878	db						.byte 	$DB
.3879	4c 78 38	jmp $3878			jmp 	_DTIsFloat
.387c					_DTIsString:
.387c	a9 01		lda #$01			lda 	#1 							; now punctuation, may need spaces
.387e	20 26 39	jsr $3926			jsr 	DTSwitchMode
.3881	a9 81		lda #$81			lda 	#LTYString
.3883	20 e5 38	jsr $38e5			jsr 	ListOutputCharacter
.3886	a9 22		lda #$22			lda 	#'"'						; open quote
.3888	20 e5 38	jsr $38e5			jsr 	ListOutputCharacter
.388b	a2 02		ldx #$02			ldx 	#2 							; evaluate string to TOS2.
.388d	8a		txa				txa
.388e	a2 10		ldx #$10		ldx	#16
.3890	20 ff 34	jsr $34ff		jsr	mainHandler
.3893	aa		tax				tax
.3894	b5 50		lda $50,x			lda 	esInt0,x 					; copy string address to temp0
.3896	85 2a		sta $2a				sta 	temp0
.3898	b5 58		lda $58,x			lda 	esInt1,x
.389a	85 2b		sta $2b				sta 	temp0+1
.389c	a9 00		lda #$00			lda 	#0 							; don't capitalise.
.389e	20 bb 38	jsr $38bb			jsr 	DTPrintLengthPrefix
.38a1	a9 22		lda #$22			lda 	#'"'
.38a3	20 e5 38	jsr $38e5			jsr 	ListOutputCharacter
.38a6	4c 18 38	jmp $3818			jmp 	_DTListLoop

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/detokenise/dtprint.asm

.0ce5					tPrintCount:
>0ce5							.fill 	1
.38a9					DTPrintInteger:
.38a9	48		pha				pha									; save base
.38aa	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.38ac	85 2a		sta $2a				sta 	temp0
.38ae	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.38b0	85 2b		sta $2b				sta 	1+(temp0)
.38b2	68		pla				pla
.38b3	a8		tay				tay
.38b4	8a		txa				txa
.38b5	a2 12		ldx #$12		ldx	#18
.38b7	20 ff 34	jsr $34ff		jsr	mainHandler
.38ba	aa		tax				tax 								; then drop through here.
.38bb					DTPrintLengthPrefix:
.38bb	aa		tax				tax 								; A = 0 = don't case convert.
.38bc	98		tya				tya
.38bd	48		pha				pha
.38be	a0 00		ldy #$00			ldy 	#0 							; get string length = chars to print.
.38c0	b1 2a		lda ($2a),y			lda 	(temp0),y
.38c2	8d e5 0c	sta $0ce5			sta 	tPrintCount
.38c5	f0 1b		beq $38e2			beq 	_DTPLPExit 					; empty string
.38c7					_DTPLPLoop:
.38c7	c8		iny				iny 								; get next.
.38c8	b1 2a		lda ($2a),y			lda 	(temp0),y
.38ca	29 7f		and #$7f			and 	#$7F
.38cc	e0 00		cpx #$00			cpx 	#0 							; skip if not case converting
.38ce	f0 0a		beq $38da			beq 	_DTPLPNoCase
.38d0	c9 41		cmp #$41			cmp 	#"A" 						; if converting UC -> LC
.38d2	90 06		bcc $38da			bcc 	_DTPLPNoCase
.38d4	c9 5b		cmp #$5b			cmp 	#"Z"+1
.38d6	b0 02		bcs $38da			bcs 	_DTPLPNoCase
.38d8	49 20		eor #$20			eor 	#"A"^"a"
.38da					_DTPLPNoCase
.38da	20 e5 38	jsr $38e5			jsr 	ListOutputCharacter 		; call handler
.38dd	ce e5 0c	dec $0ce5			dec 	tPrintCount 				; do all the characters
.38e0	d0 e5		bne $38c7			bne 	_DTPLPLoop
.38e2					_DTPLPExit:
.38e2	68		pla				pla
.38e3	a8		tay				tay
.38e4	60		rts				rts
.38e5					ListOutputCharacter:
.38e5	85 32		sta $32				sta 	tempShort
.38e7	48		pha				pha
.38e8	8a		txa				txa
.38e9	48		pha				pha
.38ea	98		tya				tya
.38eb	48		pha				pha
.38ec	a5 32		lda $32				lda 	tempShort 					; convert ASCII 6 bit (0-31) to 7 bit.
.38ee	c9 20		cmp #$20			cmp 	#32
.38f0	b0 0c		bcs $38fe			bcs		_LOCHiBit
.38f2	09 40		ora #$40			ora 	#64 						; conversion
.38f4	c9 40		cmp #$40			cmp 	#64							; make l/c
.38f6	f0 06		beq $38fe			beq 	_LOCHiBit
.38f8	c9 5b		cmp #$5b			cmp 	#65+26
.38fa	b0 02		bcs $38fe			bcs 	_LOCHiBit
.38fc	69 20		adc #$20			adc 	#32
.38fe					_LOCHiBit:
.38fe	20 07 39	jsr $3907			jsr 	_LOCCallVector				; call o/p handler routine
.3901	68		pla				pla
.3902	a8		tay				tay
.3903	68		pla				pla
.3904	aa		tax				tax
.3905	68		pla				pla
.3906					_LOCExit:
.3906	60		rts				rts
.3907					_LOCCallVector:
.3907	6c e1 0c	jmp ($0ce1)			jmp 	(deTokeniseVector)
.390a					deTokenPrint:
.390a	c9 00		cmp #$00			cmp 	#0 							; if bit 7 sets ink colour
.390c	30 06		bmi $3914			bmi 	_dtpInk
.390e	a2 16		ldx #$16		ldx	#22
.3910	20 f6 14	jsr $14f6		jsr	deviceHandler
.3913	60		rts				rts
.3914	c9 ff		cmp #$ff	_dtpInk:cmp 	#255 						; e.g. herhe, get ink and set it
.3916	f0 08		beq $3920			beq 	_dtpCR						; except $FF => CRLF
.3918	29 07		and #$07			and 	#7
.391a	a2 08		ldx #$08		ldx	#8
.391c	20 f6 14	jsr $14f6		jsr	deviceHandler
.391f	60		rts				rts
.3920					_dtpCR:
.3920	a2 06		ldx #$06		ldx	#6
.3922	20 f6 14	jsr $14f6		jsr	deviceHandler
.3925	60		rts				rts
.3926					DTSwitchMode:
.3926	cd e3 0c	cmp $0ce3			cmp 	LastCharacterClass 			; if changed, update character class
.3929	f0 04		beq $392f			beq 	_DTSMNoChange
.392b	8d e3 0c	sta $0ce3			sta 	LastCharacterClass
.392e					_DTSMExit:
.392e	60		rts				rts
.392f					_DTSMNoChange:
.392f	c9 01		cmp #$01			cmp 	#1 							; if didn't change to punctuation, two identifiers so we
.3931	f0 fb		beq $392e			beq 	_DTSMExit 					; need a space.
.3933	a9 20		lda #$20			lda 	#" "
.3935	4c e5 38	jmp $38e5			jmp 	ListOutputCharacter

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/detokenise/identifier.asm

.3938					DTIdentifier:
.3938	a9 00		lda #$00			lda 	#0 							; now text, may need spaces
.393a	20 26 39	jsr $3926			jsr 	DTSwitchMode
.393d	a9 87		lda #$87			lda 	#LTYIdentifier
.393f	20 e5 38	jsr $38e5			jsr 	ListOutputCharacter
.3942					_DTILoop:
.3942	b1 28		lda ($28),y			lda 	(codePtr),y 				; output main bit of identifier.
.3944	c9 2d		cmp #$2d			cmp 	#"-"						; make - back to _
.3946	d0 02		bne $394a			bne 	_DTINotUS
.3948	a9 5f		lda #$5f			lda 	#"_"
.394a					_DTINotUS:
.394a	20 e5 38	jsr $38e5			jsr 	ListOutputCharacter
.394d	c8		iny				iny
.394e	b1 28		lda ($28),y			lda 	(codePtr),y 				; until end identifier marker.
.3950	c9 3a		cmp #$3a			cmp 	#$3A
.3952	90 ee		bcc $3942			bcc 	_DTILoop
.3954	c8		iny				iny
.3955	c9 3a		cmp #$3a			cmp 	#$3A 						; is it integer non array
.3957	f0 25		beq $397e			beq 	_DTIExit 					; no postfix.
.3959	48		pha				pha
.395a	a9 01		lda #$01			lda  	#1 							; it ends in punctuation
.395c	8d e3 0c	sta $0ce3			sta 	LastCharacterClass
.395f	a9 82		lda #$82			lda 	#LTYPunctuation
.3961	20 e5 38	jsr $38e5			jsr 	ListOutputCharacter
.3964	68		pla				pla
.3965	c9 3b		cmp #$3b			cmp 	#$3B
.3967	f0 10		beq $3979			beq 	_DTIArray
.3969	4a		lsr a				lsr 	a 							; array flag in C
.396a	08		php				php
.396b	49 1e		eor #$1e			eor 	#$3C/2 						; check if $
.396d	f0 02		beq $3971			beq 	_DTIDollar
.396f	a9 07		lda #$07			lda 	#"$"^"#" 					; this if #, 0 if $
.3971					_DTIDollar:
.3971	49 24		eor #$24			eor 	#"$"
.3973	20 e5 38	jsr $38e5			jsr 	ListOutputCharacter
.3976	28		plp				plp
.3977	90 05		bcc $397e			bcc 	_DTIExit
.3979					_DTIArray:
.3979	a9 28		lda #$28			lda 	#"("
.397b	20 e5 38	jsr $38e5			jsr 	ListOutputCharacter
.397e					_DTIExit:
.397e	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/detokenise/token.asm

.397f					DTDecodeToken:
.397f	a2 00		ldx #$00			ldx 	#0 							; table number to use
.3981	b1 28		lda ($28),y			lda 	(codePtr),y
.3983	c9 84		cmp #$84			cmp 	#$84
.3985	b0 05		bcs $398c			bcs 	_DTNotShift
.3987	29 03		and #$03			and 	#3 							; get the shift 1..3
.3989	0a		asl a				asl 	a 							; put 2 x in X
.398a	aa		tax				tax
.398b	c8		iny				iny
.398c					_DTNotShift:
.398c	bd 8e 3c	lda $3c8e,x			lda 	TokenTableAddress,x 		; get the token table to use to decode it.
.398f	85 2a		sta $2a				sta 	temp0 						; point into temp0
.3991	bd 8f 3c	lda $3c8f,x			lda 	TokenTableAddress+1,x
.3994	85 2b		sta $2b				sta 	temp0+1
.3996	b1 28		lda ($28),y			lda 	(codePtr),y 				; get the token value.
.3998	c8		iny				iny 								; consume it.
.3999	aa		tax				tax
.399a	98		tya				tya
.399b	48		pha				pha
.399c					_DTFindText:
.399c	e0 86		cpx #$86			cpx 	#$86 						; finished ?
.399e	f0 11		beq $39b1			beq 	_DTFoundText
.39a0	ca		dex				dex
.39a1	a0 00		ldy #$00			ldy 	#0 							; add length+1 to temp0
.39a3	38		sec				sec
.39a4	b1 2a		lda ($2a),y			lda 	(temp0),y
.39a6	65 2a		adc $2a				adc 	temp0
.39a8	85 2a		sta $2a				sta 	temp0
.39aa	90 f0		bcc $399c			bcc 	_DTFindText
.39ac	e6 2b		inc $2b				inc 	temp0+1
.39ae	4c 9c 39	jmp $399c			jmp 	_DTFindText
.39b1					_DTFoundText:
.39b1	a0 01		ldy #$01			ldy 	#1 							; get first character
.39b3	b1 2a		lda ($2a),y			lda 	(temp0),y
.39b5	29 7f		and #$7f			and 	#$7F 						; will have bit 7 set.
.39b7	c9 41		cmp #$41			cmp 	#"A" 						; check for punctuation.
.39b9	90 11		bcc $39cc			bcc 	_DTIsPunctuation
.39bb	c9 5b		cmp #$5b			cmp 	#"Z"+1
.39bd	b0 0d		bcs $39cc			bcs 	_DTIsPunctuation
.39bf	a9 00		lda #$00			lda 	#0 							; now text, may need spaces
.39c1	20 26 39	jsr $3926			jsr 	DTSwitchMode
.39c4	a9 83		lda #$83			lda 	#LTYKeyword
.39c6	20 e5 38	jsr $38e5			jsr 	ListOutputCharacter
.39c9	4c d6 39	jmp $39d6			jmp 	_DTPrint
.39cc					_DTIsPunctuation:
.39cc	a9 01		lda #$01			lda 	#1 							; now punctuation, may need spaces
.39ce	20 26 39	jsr $3926			jsr 	DTSwitchMode
.39d1	a9 82		lda #$82			lda 	#LTYPunctuation
.39d3	20 e5 38	jsr $38e5			jsr 	ListOutputCharacter
.39d6					_DTPrint:
.39d6	a9 01		lda #$01			lda 	#1 							; fix case.
.39d8	20 bb 38	jsr $38bb			jsr 	DTPrintLengthPrefix 		; print it out.
.39db	a0 00		ldy #$00			ldy 	#0
.39dd	b1 2a		lda ($2a),y			lda 	(temp0),y
.39df	a8		tay				tay
.39e0	b1 2a		lda ($2a),y			lda 	(temp0),y
.39e2	29 7f		and #$7f			and 	#$7F 						; will have bit 7 set.
.39e4	c9 41		cmp #$41			cmp 	#"A" 						; check for punctuation.
.39e6	90 04		bcc $39ec			bcc 	_DTIsNowPunctuation
.39e8	c9 5b		cmp #$5b			cmp 	#"Z"+1
.39ea	90 05		bcc $39f1			bcc 	_DTPExit
.39ec					_DTIsNowPunctuation:
.39ec	a9 01		lda #$01			lda 	#1
.39ee	8d e3 0c	sta $0ce3			sta		LastCharacterClass
.39f1					_DTPExit:
.39f1	68		pla				pla
.39f2	a8		tay				tay
.39f3	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/search.asm

.0ce6					currentSet:
>0ce6							.fill 	1
.39f4					TokenSearch:
.39f4	8a		txa				txa
.39f5	48		pha				pha
.39f6	98		tya				tya
.39f7	48		pha				pha
.39f8	a9 00		lda #$00			lda 	#0
.39fa	8d e6 0c	sta $0ce6			sta 	currentSet
.39fd					_TSLoop:
.39fd	ad e6 0c	lda $0ce6			lda 	currentSet 					; 2 x currentset in X
.3a00	0a		asl a				asl 	a
.3a01	aa		tax				tax
.3a02	bd 8e 3c	lda $3c8e,x			lda 	TokenTableAddress,x 		; set temp0 to the table address
.3a05	85 2a		sta $2a				sta 	temp0
.3a07	bd 8f 3c	lda $3c8f,x			lda 	TokenTableAddress+1,x
.3a0a	85 2b		sta $2b				sta 	temp0+1
.3a0c	20 33 3a	jsr $3a33			jsr 	TokenSearchOne 				; search one table
.3a0f	b0 0d		bcs $3a1e			bcs 	_TSFound 					; found a token.
.3a11	ee e6 0c	inc $0ce6			inc 	currentSet 					; next set
.3a14	ad e6 0c	lda $0ce6			lda 	currentSet
.3a17	c9 04		cmp #$04			cmp 	#4
.3a19	d0 e2		bne $39fd			bne 	_TSLoop 					; back if not done all four.
.3a1b	18		clc				clc 								; clear carry and exit
.3a1c	90 10		bcc $3a2e			bcc 	_TSExit
.3a1e					_TSFound:
.3a1e	48		pha				pha 								; save token
.3a1f	ad e6 0c	lda $0ce6			lda 	currentSet					; if set zero no shift
.3a22	f0 05		beq $3a29			beq 	_TSNoShift
.3a24	09 80		ora #$80			ora 	#$80 						; Write as $81-$83
.3a26	20 e4 3a	jsr $3ae4			jsr 	TokenWrite
.3a29					_TSNoShift:
.3a29	68		pla				pla 								; get token back
.3a2a	20 e4 3a	jsr $3ae4			jsr 	TokenWrite 					; write it
.3a2d	38		sec				sec 								; carry set indicating success
.3a2e					_TSExit:
.3a2e	68		pla				pla
.3a2f	a8		tay				tay
.3a30	68		pla				pla
.3a31	aa		tax				tax
.3a32	60		rts				rts
.3a33					TokenSearchOne:
.3a33	a2 86		ldx #$86			ldx 	#$86 						; current token being tested.
.3a35					_TSOLoop:
.3a35	a0 00		ldy #$00			ldy 	#0
.3a37	b1 2a		lda ($2a),y			lda 	(temp0),y 					; get length of token
.3a39	f0 26		beq $3a61			beq 	_TSOFail 					; if zero, end of table
.3a3b	cd cf 0a	cmp $0acf			cmp 	convertBuffer 				; length is the same, compare the text matches.
.3a3e	f0 11		beq $3a51			beq 	_TSOCheckText
.3a40					_TSONext:
.3a40	e8		inx				inx 								; bump token
.3a41	a0 00		ldy #$00			ldy 	#0							; get length
.3a43	b1 2a		lda ($2a),y			lda 	(temp0),y
.3a45	38		sec				sec
.3a46	65 2a		adc $2a				adc 	temp0 						; add to temp0 + 1
.3a48	85 2a		sta $2a				sta 	temp0
.3a4a	90 e9		bcc $3a35			bcc 	_TSOLoop
.3a4c	e6 2b		inc $2b				inc 	temp0+1
.3a4e	4c 35 3a	jmp $3a35			jmp 	_TSOLoop
.3a51					_TSOCheckText:
.3a51	a8		tay				tay 								; compare length downto 1.
.3a52					_TSOCheckLoop:
.3a52	b1 2a		lda ($2a),y			lda 	(temp0),y 					; use EOR to compare
.3a54	59 cf 0a	eor $0acf,y			eor 	convertBuffer,y
.3a57	29 7f		and #$7f			and 	#$7F 						; ignore bit 7
.3a59	d0 e5		bne $3a40			bne 	_TSONext 					; different goto next.
.3a5b	88		dey				dey 								; do all
.3a5c	d0 f4		bne $3a52			bne 	_TSOCheckLoop
.3a5e	8a		txa				txa 								; return token in A and carry set
.3a5f	38		sec				sec
.3a60	60		rts				rts
.3a61					_TSOFail:
.3a61	18		clc				clc
.3a62	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/test.asm

.3a63					TokTest:
.3a63	a2 ff		ldx #$ff				ldx 	#$FF
.3a65	9a		txs					txs
.3a66	a9 83		lda #$83			lda 	#(TokenText1) & $FF
.3a68	85 28		sta $28				sta 	codePtr
.3a6a	a9 3a		lda #$3a			lda 	#(TokenText1) >> 8
.3a6c	85 29		sta $29				sta 	1+(codePtr)
.3a6e	20 83 3a	jsr $3a83				jsr 	Tokenise
.3a71	a2 00		ldx #$00	TokStop:	ldx 	#0 					; compare vs precalculated result
.3a73	bd 83 3a	lda $3a83,x	_TokCheck:	lda 	TokenBytes1,x
.3a76	dd ea 0c	cmp $0cea,x				cmp 	tokenBuffer,x
.3a79	d0 fe		bne $3a79	_TokFail:	bne 	_TokFail	 		; error.
.3a7b	e8		inx					inx
.3a7c	c9 80		cmp #$80				cmp 	#$80
.3a7e	d0 f3		bne $3a73				bne 	_TokCheck
.3a80	4c ff ff	jmp $ffff				jmp 	$FFFF 				; successfully tokenised then quit.

;******  Processing file: tokeniser/tokenise/../../generated/toktest.inc

.3a83					TokenText1:
.3a83					TokenBytes1:

;******  Return to file: tokeniser/tokenise/test.asm


;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokenise.asm

.0ce7					tokenHeader:
>0ce7							.fill 	3
.0cea					tokenBuffer:
>0cea							.fill 	256
.0dea					tokenBufferIndex:
>0dea							.fill 	1
.3a83					Tokenise:
.3a83	20 fd 3a	jsr $3afd			jsr 	TokeniseMakeASCIIZ 			; convert to ASCIIZ string.
.3a86					TokeniseASCIIZ:
.3a86	20 0e 3b	jsr $3b0e			jsr 	TokeniseFixCase 			; remove controls and lower case outside quotes.
.3a89	a9 00		lda #$00			lda 	#0 							; reset the token buffer index
.3a8b	8d ea 0d	sta $0dea			sta 	tokenBufferIndex
.3a8e	a8		tay				tay 								; start pointer
.3a8f	a9 80		lda #$80			lda 	#$80 						; empty token buffer ($80 ends it)
.3a91	8d ea 0c	sta $0cea			sta 	tokenBuffer
.3a94					_TokLoop:
.3a94	b1 28		lda ($28),y			lda 	(codePtr),y 				; get next character
.3a96	f0 46		beq $3ade			beq 	_TokExit 					; if zero, then exit.
.3a98	c8		iny				iny 								; skip over spaces.
.3a99	c9 20		cmp #$20			cmp 	#" "
.3a9b	f0 f7		beq $3a94			beq 	_TokLoop
.3a9d	88		dey				dey 								; point back to character.
.3a9e	c9 26		cmp #$26			cmp 	#"&"						; Hexadecimal constant.
.3aa0	f0 18		beq $3aba			beq 	_TokHexConst
.3aa2	c9 22		cmp #$22			cmp 	#'"'						; Quoted String
.3aa4	f0 23		beq $3ac9			beq 	_TokQString
.3aa6	c9 5b		cmp #$5b			cmp 	#"Z"+1 						; > 'Z' is punctuation
.3aa8	b0 26		bcs $3ad0			bcs 	_TokPunctuation
.3aaa	c9 41		cmp #$41			cmp 	#"A" 						; A..Z identifier
.3aac	b0 29		bcs $3ad7			bcs 	_TokIdentifier
.3aae	c9 3a		cmp #$3a			cmp 	#"9"+1
.3ab0	b0 1e		bcs $3ad0			bcs 	_TokPunctuation 			; between 9 and A exclusive, punctuation
.3ab2	c9 30		cmp #$30			cmp 	#"0"
.3ab4	90 1a		bcc $3ad0			bcc 	_TokPunctuation 			; < 0, punctuation.
.3ab6	a9 0a		lda #$0a			lda 	#10  						; 0..9 constant in base 10.
.3ab8	d0 08		bne $3ac2			bne 	_TokConst
.3aba					_TokHexConst:
.3aba	c8		iny				iny									; consume token.
.3abb	a9 c5		lda #$c5			lda 	#TKW_AMP 					; Write ampersand token out
.3abd	20 e4 3a	jsr $3ae4			jsr 	TokenWrite
.3ac0	a9 10		lda #$10			lda 	#16
.3ac2					_TokConst:
.3ac2	20 cc 3b	jsr $3bcc			jsr 	TokeniseInteger
.3ac5	b0 cd		bcs $3a94			bcs 	_TokLoop
.3ac7	90 18		bcc $3ae1			bcc 	_TokFail
.3ac9					_TokQString:
.3ac9	20 62 3c	jsr $3c62			jsr 	TokeniseString
.3acc	b0 c6		bcs $3a94			bcs 	_TokLoop
.3ace	90 11		bcc $3ae1			bcc 	_TokFail
.3ad0					_TokPunctuation:
.3ad0	20 41 3c	jsr $3c41			jsr 	TokenisePunctuation
.3ad3	b0 bf		bcs $3a94			bcs 	_TokLoop
.3ad5	90 0a		bcc $3ae1			bcc 	_TokFail
.3ad7					_TokIdentifier:
.3ad7	20 3d 3b	jsr $3b3d			jsr 	TokeniseIdentifier
.3ada	b0 b8		bcs $3a94			bcs 	_TokLoop
.3adc	90 03		bcc $3ae1			bcc 	_TokFail
.3ade					_TokExit:
.3ade	a9 01		lda #$01			lda 	#1
.3ae0	60		rts				rts
.3ae1					_TokFail:
.3ae1	a9 00		lda #$00			lda 	#0
.3ae3	60		rts				rts
.3ae4					TokenWrite:
.3ae4	85 32		sta $32				sta 	tempShort 					; save XA
.3ae6	48		pha				pha
.3ae7	8a		txa				txa
.3ae8	48		pha				pha
.3ae9	a5 32		lda $32				lda 	tempShort
.3aeb	ae ea 0d	ldx $0dea			ldx 	tokenBufferIndex 			; geet index
.3aee	9d ea 0c	sta $0cea,x			sta 	tokenBuffer,x 				; write byte to buffer
.3af1	a9 80		lda #$80			lda 	#TOK_EOL 					; pre-emptively write EOL marker after
.3af3	9d eb 0c	sta $0ceb,x			sta 	tokenBuffer+1,x
.3af6	ee ea 0d	inc $0dea			inc 	tokenBufferIndex 			; bump index
.3af9	68		pla				pla
.3afa	aa		tax				tax
.3afb	68		pla				pla
.3afc	60		rts				rts
.3afd					TokeniseMakeASCIIZ:
.3afd	a0 00		ldy #$00			ldy 	#0							; get length of string.
.3aff	b1 28		lda ($28),y			lda 	(codePtr),y
.3b01	a8		tay				tay
.3b02	c8		iny				iny 								; +1, the NULL goes here.
.3b03	a9 00		lda #$00			lda 	#0
.3b05	91 28		sta ($28),y			sta 	(codePtr),y 				; write the trailing NULL.
.3b07	e6 28		inc $28				inc 	codePtr 					; bump the pointer.
.3b09	d0 02		bne $3b0d			bne 	_TMKAExit
.3b0b	e6 29		inc $29				inc 	codePtr+1
.3b0d					_TMKAExit:
.3b0d	60		rts				rts
.3b0e					TokeniseFixCase:
.3b0e	a0 00		ldy #$00			ldy 	#0 							; position in buffer.
.3b10	a2 01		ldx #$01			ldx 	#1 							; bit 0 of this is 'in quotes'
.3b12					_TFCFlipQ:
.3b12	8a		txa				txa
.3b13	49 01		eor #$01			eor 	#1
.3b15	aa		tax				tax
.3b16					_TFCLoop:
.3b16	b1 28		lda ($28),y			lda 	(codePtr),y 				; get character
.3b18	f0 22		beq $3b3c			beq 	_TFCExit 					; if zero exit.
.3b1a	c9 20		cmp #$20			cmp 	#32 						; if control
.3b1c	90 1a		bcc $3b38			bcc 	_TFCControl
.3b1e	c8		iny				iny 								; preconsume
.3b1f	c9 22		cmp #$22			cmp 	#'"'
.3b21	f0 ef		beq $3b12			beq 	_TFCFlipQ
.3b23	c9 61		cmp #$61			cmp 	#"a"						; check if L/C
.3b25	90 ef		bcc $3b16			bcc 	_TFCLoop
.3b27	c9 7b		cmp #$7b			cmp 	#"z"+1
.3b29	b0 eb		bcs $3b16			bcs 	_TFCLoop
.3b2b	e0 00		cpx #$00			cpx 	#0 							; in quotes, if so, leave alone.
.3b2d	d0 e7		bne $3b16			bne 	_TFCLoop
.3b2f	88		dey				dey
.3b30	49 20		eor #$20			eor 	#"A"^"a"					; make U/C
.3b32					_TFCWrite:
.3b32	91 28		sta ($28),y			sta 	(codePtr),y
.3b34	c8		iny				iny
.3b35	4c 16 3b	jmp $3b16			jmp 	_TFCLoop
.3b38					_TFCControl:
.3b38	a9 20		lda #$20			lda 	#" "
.3b3a	d0 f6		bne $3b32			bne 	_TFCWrite
.3b3c					_TFCExit:
.3b3c	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokident.asm

.3b3d					TokeniseIdentifier:
.3b3d	a2 00		ldx #$00			ldx 	#0
.3b3f					_TICopyID:
.3b3f	b1 28		lda ($28),y			lda 	(codePtr),y					; get characters
.3b41	c9 5f		cmp #$5f			cmp 	#"_" 						; underscore converted to minus internally.
.3b43	f0 16		beq $3b5b			beq 	_TICopyUnderscore
.3b45	c9 2e		cmp #$2e			cmp 	#"."
.3b47	f0 14		beq $3b5d			beq 	_TICopyIn
.3b49	c9 30		cmp #$30			cmp 	#"0"
.3b4b	90 1b		bcc $3b68			bcc 	_TIEndCopy
.3b4d	c9 3a		cmp #$3a			cmp 	#"9"+1
.3b4f	90 0c		bcc $3b5d			bcc 	_TICopyIn
.3b51	c9 41		cmp #$41			cmp 	#"A"
.3b53	90 13		bcc $3b68			bcc 	_TIEndCopy
.3b55	c9 5b		cmp #$5b			cmp 	#"Z"+1
.3b57	b0 0f		bcs $3b68			bcs		_TIEndCopy
.3b59	90 02		bcc $3b5d			bcc 	_TICopyIn
.3b5b					_TICopyUnderScore:
.3b5b	a9 2d		lda #$2d			lda 	#"-"						; _ is mapped to -
.3b5d					_TICopyIn:
.3b5d	e8		inx				inx 								; write into buffer in 7 bit ASCII form
.3b5e	9d cf 0a	sta $0acf,x			sta 	convertBuffer,x
.3b61	8e cf 0a	stx $0acf			stx 	convertBuffer
.3b64	c8		iny				iny 								; next character
.3b65	4c 3f 3b	jmp $3b3f			jmp 	_TICopyID 					; loop round
.3b68					_TIEndCopy:
.3b68	a9 24		lda #$24			lda 	#"$"
.3b6a	20 bf 3b	jsr $3bbf			jsr 	TIDCheckCopy
.3b6d	a9 23		lda #$23			lda 	#"#"
.3b6f	20 bf 3b	jsr $3bbf			jsr 	TIDCheckCopy
.3b72	a9 28		lda #$28			lda 	#"("
.3b74	20 bf 3b	jsr $3bbf			jsr 	TIDCheckCopy
.3b77	20 f4 39	jsr $39f4			jsr 	TokenSearch 				; is it a token
.3b7a	b0 41		bcs $3bbd			bcs 	_TIExit 					; if so, then exit.
.3b7c	98		tya				tya
.3b7d	48		pha				pha
.3b7e	a0 3a		ldy #$3a			ldy 	#$3A 						; default type.
.3b80	ae cf 0a	ldx $0acf			ldx 	convertBuffer 				; is last character (
.3b83	bd cf 0a	lda $0acf,x			lda 	convertBuffer,x
.3b86	c9 28		cmp #$28			cmp 	#"("
.3b88	d0 02		bne $3b8c			bne 	_TINotArray
.3b8a	ca		dex				dex 								; yes, remove it and convert to array.
.3b8b	c8		iny				iny
.3b8c					_TINotArray:
.3b8c	bd cf 0a	lda $0acf,x			lda 	convertBuffer,x 			; check for $
.3b8f	c9 24		cmp #$24			cmp 	#"$"
.3b91	d0 03		bne $3b96			bne 	_TINotString
.3b93	ca		dex				dex
.3b94	c8		iny				iny
.3b95	c8		iny				iny
.3b96					_TINotString:
.3b96	bd cf 0a	lda $0acf,x			lda 	convertBuffer,x 			; check for #
.3b99	c9 23		cmp #$23			cmp 	#"#"
.3b9b	d0 05		bne $3ba2			bne 	_TINotFloat
.3b9d	ca		dex				dex
.3b9e	c8		iny				iny
.3b9f	c8		iny				iny
.3ba0	c8		iny				iny
.3ba1	c8		iny				iny
.3ba2					_TINotFloat:
.3ba2	e8		inx				inx 								; write end marker for identifier.
.3ba3	98		tya				tya
.3ba4	9d cf 0a	sta $0acf,x			sta 	convertBuffer,x
.3ba7	8e cf 0a	stx $0acf			stx 	convertBuffer 				; update length.
.3baa	a2 01		ldx #$01			ldx 	#1
.3bac					_TIOutput:
.3bac	bd cf 0a	lda $0acf,x			lda 	convertBuffer,x
.3baf	29 3f		and #$3f			and 	#$3F
.3bb1	48		pha				pha
.3bb2	20 e4 3a	jsr $3ae4			jsr 	TokenWrite
.3bb5	e8		inx				inx
.3bb6	68		pla				pla
.3bb7	c9 3a		cmp #$3a			cmp 	#$3A
.3bb9	90 f1		bcc $3bac			bcc 	_TIOutput
.3bbb	68		pla				pla
.3bbc	a8		tay				tay
.3bbd					_TIExit:
.3bbd	38		sec				sec 								; this can't fail.
.3bbe	60		rts				rts
.3bbf					TIDCheckCopy:
.3bbf	d1 28		cmp ($28),y			cmp 	(codePtr),y
.3bc1	d0 08		bne $3bcb			bne 	_TIDCCExit
.3bc3	e8		inx				inx
.3bc4	9d cf 0a	sta $0acf,x			sta 	convertBuffer,x
.3bc7	8e cf 0a	stx $0acf			stx 	convertBuffer
.3bca	c8		iny				iny
.3bcb					_TIDCCExit:
.3bcb	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokinteger.asm

.3bcc					TokeniseInteger:
.3bcc	85 2c		sta $2c				sta 	temp1 						; save base
.3bce	a2 00		ldx #$00			ldx 	#0							; count of chars so far
.3bd0	8e cf 0a	stx $0acf			stx 	convertBuffer
.3bd3					_TIGetChars:
.3bd3	b1 28		lda ($28),y			lda 	(codePtr),y 				; check character is numeric
.3bd5	c9 30		cmp #$30			cmp 	#"0"
.3bd7	90 1f		bcc $3bf8			bcc 	_TIEndGet
.3bd9	c9 3a		cmp #$3a			cmp 	#"9"+1
.3bdb	90 10		bcc $3bed			bcc 	_TIHaveChar
.3bdd	a5 2c		lda $2c				lda 	temp1 						; fail if not hex mode
.3bdf	c9 0a		cmp #$0a			cmp 	#10
.3be1	f0 15		beq $3bf8			beq 	_TIEndGet
.3be3	b1 28		lda ($28),y			lda 	(codePtr),y 				; check legitimate hex.
.3be5	c9 41		cmp #$41			cmp 	#"A"
.3be7	90 0f		bcc $3bf8			bcc 	_TIEndGet
.3be9	c9 5b		cmp #$5b			cmp 	#"Z"+1
.3beb	b0 0b		bcs $3bf8			bcs 	_TIEndGet
.3bed					_TIHaveChar:
.3bed	e8		inx				inx 								; write into buffer.
.3bee	8e cf 0a	stx $0acf			stx 	convertBuffer
.3bf1	9d cf 0a	sta $0acf,x			sta 	convertBuffer,x
.3bf4	c8		iny				iny 								; next char
.3bf5	4c d3 3b	jmp $3bd3			jmp 	_TIGetChars
.3bf8					_TIEndGet:
.3bf8	e0 00		cpx #$00			cpx 	#0 							; no char acquired.
.3bfa	f0 1c		beq $3c18			beq 	_TIFail
.3bfc	98		tya				tya
.3bfd	48		pha				pha
.3bfe	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.3c00	85 2a		sta $2a				sta 	temp0
.3c02	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.3c04	85 2b		sta $2b				sta 	1+(temp0)
.3c06	a9 00		lda #$00			lda 	#0 							; stack level 0
.3c08	a4 2c		ldy $2c				ldy 	temp1 						; base Y
.3c0a	a2 1a		ldx #$1a		ldx	#26
.3c0c	20 ff 34	jsr $34ff		jsr	mainHandler
.3c0f	68		pla				pla
.3c10	a8		tay				tay
.3c11	90 05		bcc $3c18			bcc 	_TIFail 					; didn't convert.
.3c13	20 1a 3c	jsr $3c1a			jsr 	TIRecursiveOut 				; recursive output ?
.3c16	38		sec				sec
.3c17	60		rts				rts
.3c18					_TIFail:
.3c18	18		clc				clc
.3c19	60		rts				rts
.3c1a					TIRecursiveOut:
.3c1a	a5 50		lda $50				lda 	esInt0 						; get value to output after possible recursion
.3c1c	29 3f		and #$3f			and 	#$3F
.3c1e	09 40		ora #$40			ora 	#$40
.3c20	48		pha				pha
.3c21	a5 50		lda $50				lda 	esInt0 						; are we recursing ?
.3c23	29 c0		and #$c0			and 	#$C0
.3c25	05 58		ora $58				ora 	esInt1
.3c27	05 60		ora $60				ora 	esInt2
.3c29	05 68		ora $68				ora 	esInt3
.3c2b	f0 10		beq $3c3d			beq 	_TIRONoRecursion
.3c2d	a2 06		ldx #$06			ldx 	#6 							; shift right x 6
.3c2f					_TIROShift:
.3c2f	46 68		lsr $68				lsr 	esInt3
.3c31	66 60		ror $60				ror 	esInt2
.3c33	66 58		ror $58				ror 	esInt1
.3c35	66 50		ror $50				ror 	esInt0
.3c37	ca		dex				dex
.3c38	d0 f5		bne $3c2f			bne 	_TIROShift
.3c3a	20 1a 3c	jsr $3c1a			jsr 	TIRecursiveOut 				; call recursively
.3c3d					_TIRONoRecursion:
.3c3d	68		pla				pla 								; pull the old bit.
.3c3e	4c e4 3a	jmp $3ae4			jmp 	TokenWrite

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokpunct.asm

.3c41					TokenisePunctuation:
.3c41	b1 28		lda ($28),y			lda	 	(codePtr),y 				; copy next 2 chars into convertBuffer
.3c43	8d d0 0a	sta $0ad0			sta 	convertBuffer+1
.3c46	c8		iny				iny
.3c47	b1 28		lda ($28),y			lda 	(codePtr),y
.3c49	8d d1 0a	sta $0ad1			sta 	convertBuffer+2
.3c4c	c8		iny				iny 								; Y is +2
.3c4d	a9 02		lda #$02			lda 	#2 							; 2 character string.
.3c4f	8d cf 0a	sta $0acf			sta 	convertBuffer
.3c52	20 f4 39	jsr $39f4			jsr 	TokenSearch 				; search for that token.
.3c55	b0 0a		bcs $3c61			bcs 	_TIFound
.3c57	ce cf 0a	dec $0acf			dec 	convertBuffer 				; make it a 1 character string
.3c5a	88		dey				dey 								; Y is now +1
.3c5b	20 f4 39	jsr $39f4			jsr 	TokenSearch 				; search for that token.
.3c5e	b0 01		bcs $3c61			bcs 	_TIFound
.3c60	88		dey				dey 								; Y is now +0, carry clear indicating failure.
.3c61					_TIFound:
.3c61	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokstring.asm

.3c62					TokeniseString:
.3c62	c8		iny				iny 								; skip opening quote
.3c63	a2 ff		ldx #$ff			ldx 	#255 						; count length of string.
.3c65	84 2a		sty $2a				sty 	temp0 						; save start.
.3c67					_TSGetLength:
.3c67	b1 28		lda ($28),y			lda 	(codePtr),y 				; get next
.3c69	f0 21		beq $3c8c			beq 	_TSFail						; end of line, fail
.3c6b	c8		iny				iny
.3c6c	e8		inx				inx
.3c6d	c9 22		cmp #$22			cmp 	#'"' 						; until end quote found.
.3c6f	d0 f6		bne $3c67			bne 	_TSGetLength
.3c71	a9 85		lda #$85			lda 	#TOK_STR 					; write string token out
.3c73	20 e4 3a	jsr $3ae4			jsr 	TokenWrite
.3c76	8a		txa				txa 								; output length
.3c77	20 e4 3a	jsr $3ae4			jsr 	TokenWrite
.3c7a	a4 2a		ldy $2a				ldy 	temp0 						; get original position
.3c7c	e0 00		cpx #$00			cpx 	#0 							; check ended
.3c7e	f0 09		beq $3c89			beq 	_TSExit
.3c80					_TSOutput:
.3c80	b1 28		lda ($28),y			lda 	(codePtr),y					; output character
.3c82	20 e4 3a	jsr $3ae4			jsr 	TokenWrite
.3c85	c8		iny				iny
.3c86	ca		dex				dex
.3c87	d0 f7		bne $3c80			bne 	_TSOutput
.3c89					_TSExit:
.3c89	c8		iny				iny 								; skip ending quote
.3c8a	38		sec				sec 								; return CS.
.3c8b	60		rts				rts
.3c8c					_TSFail:
.3c8c	18		clc				clc
.3c8d	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokentext.asm

.3c8e					TokenTableAddress:
>3c8e	96 3c						.word 	Group0Text
>3c90	5f 3e						.word 	Group1Text
>3c92	ac 3f						.word 	Group2Text
>3c94	d3 3f						.word 	Group3Text

;******  Processing file: tokeniser/../generated/tokentext0.inc

.3c96					Group0Text:
>3c96	03 41 4e c4				.byte $03,$41,$4e,$c4                  ; $86 and
>3c9a	02 4f d2				.byte $02,$4f,$d2                      ; $87 or
>3c9d	03 58 4f d2				.byte $03,$58,$4f,$d2                  ; $88 xor
>3ca1	02 3e bd				.byte $02,$3e,$bd                      ; $89 >=
>3ca4	02 3c bd				.byte $02,$3c,$bd                      ; $8a <=
>3ca7	01 be					.byte $01,$be                          ; $8b >
>3ca9	01 bc					.byte $01,$bc                          ; $8c <
>3cab	01 bd					.byte $01,$bd                          ; $8d =
>3cad	02 3c be				.byte $02,$3c,$be                      ; $8e <>
>3cb0	01 ab					.byte $01,$ab                          ; $8f +
>3cb2	01 ad					.byte $01,$ad                          ; $90 -
>3cb4	02 3e be				.byte $02,$3e,$be                      ; $91 >>
>3cb7	02 3c bc				.byte $02,$3c,$bc                      ; $92 <<
>3cba	01 aa					.byte $01,$aa                          ; $93 *
>3cbc	01 af					.byte $01,$af                          ; $94 /
>3cbe	03 4d 4f c4				.byte $03,$4d,$4f,$c4                  ; $95 mod
>3cc2	01 de					.byte $01,$de                          ; $96 ^
>3cc4	01 a1					.byte $01,$a1                          ; $97 !
>3cc6	01 bf					.byte $01,$bf                          ; $98 ?
>3cc8	06 52 45 50 45 41 d4			.byte $06,$52,$45,$50,$45,$41,$d4      ; $99 repeat
>3ccf	05 57 48 49 4c c5			.byte $05,$57,$48,$49,$4c,$c5          ; $9a while
>3cd5	03 46 4f d2				.byte $03,$46,$4f,$d2                  ; $9b for
>3cd9	02 49 c6				.byte $02,$49,$c6                      ; $9c if
>3cdc	07 44 45 46 50 52 4f c3			.byte $07,$44,$45,$46,$50,$52,$4f,$c3  ; $9d defproc
>3ce4	05 55 4e 54 49 cc			.byte $05,$55,$4e,$54,$49,$cc          ; $9e until
>3cea	04 57 45 4e c4				.byte $04,$57,$45,$4e,$c4              ; $9f wend
>3cef	04 4e 45 58 d4				.byte $04,$4e,$45,$58,$d4              ; $a0 next
>3cf4	04 54 48 45 ce				.byte $04,$54,$48,$45,$ce              ; $a1 then
>3cf9	05 45 4e 44 49 c6			.byte $05,$45,$4e,$44,$49,$c6          ; $a2 endif
>3cff	07 45 4e 44 50 52 4f c3			.byte $07,$45,$4e,$44,$50,$52,$4f,$c3  ; $a3 endproc
>3d07	01 a8					.byte $01,$a8                          ; $a4 (
>3d09	04 4c 45 4e a8				.byte $04,$4c,$45,$4e,$a8              ; $a5 len(
>3d0e	04 53 47 4e a8				.byte $04,$53,$47,$4e,$a8              ; $a6 sgn(
>3d13	04 41 42 53 a8				.byte $04,$41,$42,$53,$a8              ; $a7 abs(
>3d18	07 52 41 4e 44 4f 4d a8			.byte $07,$52,$41,$4e,$44,$4f,$4d,$a8  ; $a8 random(
>3d20	04 50 41 47 c5				.byte $04,$50,$41,$47,$c5              ; $a9 page
>3d25	04 54 52 55 c5				.byte $04,$54,$52,$55,$c5              ; $aa true
>3d2a	05 46 41 4c 53 c5			.byte $05,$46,$41,$4c,$53,$c5          ; $ab false
>3d30	04 4d 49 4e a8				.byte $04,$4d,$49,$4e,$a8              ; $ac min(
>3d35	04 4d 41 58 a8				.byte $04,$4d,$41,$58,$a8              ; $ad max(
>3d3a	04 53 59 53 a8				.byte $04,$53,$59,$53,$a8              ; $ae sys(
>3d3f	06 54 49 4d 45 52 a8			.byte $06,$54,$49,$4d,$45,$52,$a8      ; $af timer(
>3d46	06 45 56 45 4e 54 a8			.byte $06,$45,$56,$45,$4e,$54,$a8      ; $b0 event(
>3d4d	04 47 45 54 a8				.byte $04,$47,$45,$54,$a8              ; $b1 get(
>3d52	06 49 4e 4b 45 59 a8			.byte $06,$49,$4e,$4b,$45,$59,$a8      ; $b2 inkey(
>3d59	06 41 4c 4c 4f 43 a8			.byte $06,$41,$4c,$4c,$4f,$43,$a8      ; $b3 alloc(
>3d60	05 43 48 52 24 a8			.byte $05,$43,$48,$52,$24,$a8          ; $b4 chr$(
>3d66	06 4c 45 46 54 24 a8			.byte $06,$4c,$45,$46,$54,$24,$a8      ; $b5 left$(
>3d6d	05 4d 49 44 24 a8			.byte $05,$4d,$49,$44,$24,$a8          ; $b6 mid$(
>3d73	07 52 49 47 48 54 24 a8			.byte $07,$52,$49,$47,$48,$54,$24,$a8  ; $b7 right$(
>3d7b	05 53 54 52 24 a8			.byte $05,$53,$54,$52,$24,$a8          ; $b8 str$(
>3d81	04 56 41 4c a8				.byte $04,$56,$41,$4c,$a8              ; $b9 val(
>3d86	05 50 45 45 4b a8			.byte $05,$50,$45,$45,$4b,$a8          ; $ba peek(
>3d8c	05 44 45 45 4b a8			.byte $05,$44,$45,$45,$4b,$a8          ; $bb deek(
>3d92	05 4c 45 45 4b a8			.byte $05,$4c,$45,$45,$4b,$a8          ; $bc leek(
>3d98	04 41 53 43 a8				.byte $04,$41,$53,$43,$a8              ; $bd asc(
>3d9d	04 49 4e 54 a8				.byte $04,$49,$4e,$54,$a8              ; $be int(
>3da2	06 46 4c 4f 41 54 a8			.byte $06,$46,$4c,$4f,$41,$54,$a8      ; $bf float(
>3da9	06 49 53 56 41 4c a8			.byte $06,$49,$53,$56,$41,$4c,$a8      ; $c0 isval(
>3db0	07 55 50 50 45 52 24 a8			.byte $07,$55,$50,$50,$45,$52,$24,$a8  ; $c1 upper$(
>3db8	07 4c 4f 57 45 52 24 a8			.byte $07,$4c,$4f,$57,$45,$52,$24,$a8  ; $c2 lower$(
>3dc0	01 c0					.byte $01,$c0                          ; $c3 @
>3dc2	01 fe					.byte $01,$fe                          ; $c4 ~
>3dc4	01 a6					.byte $01,$a6                          ; $c5 &
>3dc6	05 47 45 54 24 a8			.byte $05,$47,$45,$54,$24,$a8          ; $c6 get$(
>3dcc	07 49 4e 4b 45 59 24 a8			.byte $07,$49,$4e,$4b,$45,$59,$24,$a8  ; $c7 inkey$(
>3dd4	03 4d 45 cd				.byte $03,$4d,$45,$cd                  ; $c8 mem
>3dd8	01 a9					.byte $01,$a9                          ; $c9 )
>3dda	01 ba					.byte $01,$ba                          ; $ca :
>3ddc	01 ac					.byte $01,$ac                          ; $cb ,
>3dde	01 bb					.byte $01,$bb                          ; $cc ;
>3de0	01 a7					.byte $01,$a7                          ; $cd '
>3de2	02 54 cf				.byte $02,$54,$cf                      ; $ce to
>3de5	04 53 54 45 d0				.byte $04,$53,$54,$45,$d0              ; $cf step
>3dea	04 50 52 4f c3				.byte $04,$50,$52,$4f,$c3              ; $d0 proc
>3def	05 4c 4f 43 41 cc			.byte $05,$4c,$4f,$43,$41,$cc          ; $d1 local
>3df5	03 44 49 cd				.byte $03,$44,$49,$cd                  ; $d2 dim
>3df9	03 52 45 cd				.byte $03,$52,$45,$cd                  ; $d3 rem
>3dfd	03 4c 45 d4				.byte $03,$4c,$45,$d4                  ; $d4 let
>3e01	05 49 4e 50 55 d4			.byte $05,$49,$4e,$50,$55,$d4          ; $d5 input
>3e07	04 45 4c 53 c5				.byte $04,$45,$4c,$53,$c5              ; $d6 else
>3e0c	03 56 44 d5				.byte $03,$56,$44,$d5                  ; $d7 vdu
>3e10	05 50 52 49 4e d4			.byte $05,$50,$52,$49,$4e,$d4          ; $d8 print
>3e16	04 44 41 54 c1				.byte $04,$44,$41,$54,$c1              ; $d9 data
>3e1b	05 49 4d 41 47 c5			.byte $05,$49,$4d,$41,$47,$c5          ; $da image
>3e21	02 41 d4				.byte $02,$41,$d4                      ; $db at
>3e24	04 46 4c 49 d0				.byte $04,$46,$4c,$49,$d0              ; $dc flip
>3e29	06 41 53 53 45 52 d4			.byte $06,$41,$53,$53,$45,$52,$d4      ; $dd assert
>3e30	04 50 4f 4b c5				.byte $04,$50,$4f,$4b,$c5              ; $de poke
>3e35	04 44 4f 4b c5				.byte $04,$44,$4f,$4b,$c5              ; $df doke
>3e3a	04 4c 4f 4b c5				.byte $04,$4c,$4f,$4b,$c5              ; $e0 loke
>3e3f	03 49 4e cb				.byte $03,$49,$4e,$cb                  ; $e1 ink
>3e43	05 50 41 50 45 d2			.byte $05,$50,$41,$50,$45,$d2          ; $e2 paper
>3e49	03 43 4c d3				.byte $03,$43,$4c,$d3                  ; $e3 cls
>3e4d	06 4c 4f 43 41 54 c5			.byte $06,$4c,$4f,$43,$41,$54,$c5      ; $e4 locate
>3e54	01 ae					.byte $01,$ae                          ; $e5 .
>3e56	01 a3					.byte $01,$a3                          ; $e6 #
>3e58	05 43 4c 45 41 d2			.byte $05,$43,$4c,$45,$41,$d2          ; $e7 clear
>3e5e	00					.byte $00

;******  Return to file: tokeniser/tokentext.asm


;******  Processing file: tokeniser/../generated/tokentext1.inc

.3e5f					Group1Text:
>3e5f	04 4c 4f 41 c4				.byte $04,$4c,$4f,$41,$c4              ; $86 load
>3e64	04 53 41 56 c5				.byte $04,$53,$41,$56,$c5              ; $87 save
>3e69	04 4c 49 53 d4				.byte $04,$4c,$49,$53,$d4              ; $88 list
>3e6e	03 4e 45 d7				.byte $03,$4e,$45,$d7                  ; $89 new
>3e72	05 42 52 45 41 cb			.byte $05,$42,$52,$45,$41,$cb          ; $8a break
>3e78	03 52 55 ce				.byte $03,$52,$55,$ce                  ; $8b run
>3e7c	04 52 45 41 c4				.byte $04,$52,$45,$41,$c4              ; $8c read
>3e81	07 52 45 53 54 4f 52 c5			.byte $07,$52,$45,$53,$54,$4f,$52,$c5  ; $8d restore
>3e89	03 45 4e c4				.byte $03,$45,$4e,$c4                  ; $8e end
>3e8d	04 53 54 4f d0				.byte $04,$53,$54,$4f,$d0              ; $8f stop
>3e92	04 58 45 4d d5				.byte $04,$58,$45,$4d,$d5              ; $90 xemu
>3e97	04 47 4f 54 cf				.byte $04,$47,$4f,$54,$cf              ; $91 goto
>3e9c	05 47 4f 53 55 c2			.byte $05,$47,$4f,$53,$55,$c2          ; $92 gosub
>3ea2	06 52 45 54 55 52 ce			.byte $06,$52,$45,$54,$55,$52,$ce      ; $93 return
>3ea9	03 4f 52 c1				.byte $03,$4f,$52,$c1                  ; $94 ora
>3ead	05 28 41 4e 44 a9			.byte $05,$28,$41,$4e,$44,$a9          ; $95 (and)
>3eb3	03 45 4f d2				.byte $03,$45,$4f,$d2                  ; $96 eor
>3eb7	03 41 44 c3				.byte $03,$41,$44,$c3                  ; $97 adc
>3ebb	03 53 54 c1				.byte $03,$53,$54,$c1                  ; $98 sta
>3ebf	03 4c 44 c1				.byte $03,$4c,$44,$c1                  ; $99 lda
>3ec3	03 43 4d d0				.byte $03,$43,$4d,$d0                  ; $9a cmp
>3ec7	03 53 42 c3				.byte $03,$53,$42,$c3                  ; $9b sbc
>3ecb	03 41 53 cc				.byte $03,$41,$53,$cc                  ; $9c asl
>3ecf	03 52 4f cc				.byte $03,$52,$4f,$cc                  ; $9d rol
>3ed3	03 4c 53 d2				.byte $03,$4c,$53,$d2                  ; $9e lsr
>3ed7	03 52 4f d2				.byte $03,$52,$4f,$d2                  ; $9f ror
>3edb	03 53 54 d8				.byte $03,$53,$54,$d8                  ; $a0 stx
>3edf	03 4c 44 d8				.byte $03,$4c,$44,$d8                  ; $a1 ldx
>3ee3	03 44 45 c3				.byte $03,$44,$45,$c3                  ; $a2 dec
>3ee7	03 49 4e c3				.byte $03,$49,$4e,$c3                  ; $a3 inc
>3eeb	03 53 54 da				.byte $03,$53,$54,$da                  ; $a4 stz
>3eef	03 42 49 d4				.byte $03,$42,$49,$d4                  ; $a5 bit
>3ef3	03 53 54 d9				.byte $03,$53,$54,$d9                  ; $a6 sty
>3ef7	03 4c 44 d9				.byte $03,$4c,$44,$d9                  ; $a7 ldy
>3efb	03 43 50 d9				.byte $03,$43,$50,$d9                  ; $a8 cpy
>3eff	03 43 50 d8				.byte $03,$43,$50,$d8                  ; $a9 cpx
>3f03	03 54 53 c2				.byte $03,$54,$53,$c2                  ; $aa tsb
>3f07	03 54 52 c2				.byte $03,$54,$52,$c2                  ; $ab trb
>3f0b	03 4a 53 d2				.byte $03,$4a,$53,$d2                  ; $ac jsr
>3f0f	03 4a 4d d0				.byte $03,$4a,$4d,$d0                  ; $ad jmp
>3f13	03 42 50 cc				.byte $03,$42,$50,$cc                  ; $ae bpl
>3f17	03 42 4d c9				.byte $03,$42,$4d,$c9                  ; $af bmi
>3f1b	03 42 56 c3				.byte $03,$42,$56,$c3                  ; $b0 bvc
>3f1f	03 42 56 d3				.byte $03,$42,$56,$d3                  ; $b1 bvs
>3f23	03 42 43 c3				.byte $03,$42,$43,$c3                  ; $b2 bcc
>3f27	03 42 43 d3				.byte $03,$42,$43,$d3                  ; $b3 bcs
>3f2b	03 42 4e c5				.byte $03,$42,$4e,$c5                  ; $b4 bne
>3f2f	03 42 45 d1				.byte $03,$42,$45,$d1                  ; $b5 beq
>3f33	03 42 52 c1				.byte $03,$42,$52,$c1                  ; $b6 bra
>3f37	03 42 52 cb				.byte $03,$42,$52,$cb                  ; $b7 brk
>3f3b	03 50 48 d0				.byte $03,$50,$48,$d0                  ; $b8 php
>3f3f	03 43 4c c3				.byte $03,$43,$4c,$c3                  ; $b9 clc
>3f43	03 50 4c d0				.byte $03,$50,$4c,$d0                  ; $ba plp
>3f47	03 53 45 c3				.byte $03,$53,$45,$c3                  ; $bb sec
>3f4b	03 52 54 c9				.byte $03,$52,$54,$c9                  ; $bc rti
>3f4f	03 50 48 c1				.byte $03,$50,$48,$c1                  ; $bd pha
>3f53	03 43 4c c9				.byte $03,$43,$4c,$c9                  ; $be cli
>3f57	03 50 48 d9				.byte $03,$50,$48,$d9                  ; $bf phy
>3f5b	03 52 54 d3				.byte $03,$52,$54,$d3                  ; $c0 rts
>3f5f	03 50 4c c1				.byte $03,$50,$4c,$c1                  ; $c1 pla
>3f63	03 53 45 c9				.byte $03,$53,$45,$c9                  ; $c2 sei
>3f67	03 50 4c d9				.byte $03,$50,$4c,$d9                  ; $c3 ply
>3f6b	03 44 45 d9				.byte $03,$44,$45,$d9                  ; $c4 dey
>3f6f	03 54 58 c1				.byte $03,$54,$58,$c1                  ; $c5 txa
>3f73	03 54 59 c1				.byte $03,$54,$59,$c1                  ; $c6 tya
>3f77	03 54 58 d3				.byte $03,$54,$58,$d3                  ; $c7 txs
>3f7b	03 54 41 d9				.byte $03,$54,$41,$d9                  ; $c8 tay
>3f7f	03 54 41 d8				.byte $03,$54,$41,$d8                  ; $c9 tax
>3f83	03 43 4c d6				.byte $03,$43,$4c,$d6                  ; $ca clv
>3f87	03 54 53 d8				.byte $03,$54,$53,$d8                  ; $cb tsx
>3f8b	03 49 4e d9				.byte $03,$49,$4e,$d9                  ; $cc iny
>3f8f	03 44 45 d8				.byte $03,$44,$45,$d8                  ; $cd dex
>3f93	03 43 4c c4				.byte $03,$43,$4c,$c4                  ; $ce cld
>3f97	03 50 48 d8				.byte $03,$50,$48,$d8                  ; $cf phx
>3f9b	03 49 4e d8				.byte $03,$49,$4e,$d8                  ; $d0 inx
>3f9f	03 4e 4f d0				.byte $03,$4e,$4f,$d0                  ; $d1 nop
>3fa3	03 53 45 c4				.byte $03,$53,$45,$c4                  ; $d2 sed
>3fa7	03 50 4c d8				.byte $03,$50,$4c,$d8                  ; $d3 plx
>3fab	00					.byte $00

;******  Return to file: tokeniser/tokentext.asm


;******  Processing file: tokeniser/../generated/tokentext2.inc

.3fac					Group2Text:
>3fac	05 56 50 4f 4b c5			.byte $05,$56,$50,$4f,$4b,$c5          ; $86 vpoke
>3fb2	05 56 44 4f 4b c5			.byte $05,$56,$44,$4f,$4b,$c5          ; $87 vdoke
>3fb8	05 56 4c 4f 41 c4			.byte $05,$56,$4c,$4f,$41,$c4          ; $88 vload
>3fbe	04 4d 4f 44 c5				.byte $04,$4d,$4f,$44,$c5              ; $89 mode
>3fc3	07 50 41 4c 45 54 54 c5			.byte $07,$50,$41,$4c,$45,$54,$54,$c5  ; $8a palette
>3fcb	06 53 50 52 49 54 c5			.byte $06,$53,$50,$52,$49,$54,$c5      ; $8b sprite
>3fd2	00					.byte $00

;******  Return to file: tokeniser/tokentext.asm


;******  Processing file: tokeniser/../generated/tokentext3.inc

.3fd3					Group3Text:
>3fd3	06 56 50 45 45 4b a8			.byte $06,$56,$50,$45,$45,$4b,$a8      ; $86 vpeek(
>3fda	06 56 44 45 45 4b a8			.byte $06,$56,$44,$45,$45,$4b,$a8      ; $87 vdeek(
>3fe1	00					.byte $00

;******  Return to file: tokeniser/tokentext.asm


;******  Return to file: tokeniser/tokeniser.asm

.3fe2					tokeniserHandler:
.3fe2	7c e5 3f	jmp ($3fe5,x)			jmp 	(tokeniserVectors,x)
.3fe5					tokeniserVectors:
>3fe5	f1 3f					.word _DummyControlHandler ; index 0
>3fe7	de 37					.word Detokenise           ; index 2
>3fe9	d2 37					.word ListLine             ; index 4
>3feb	63 3a					.word TokTest              ; index 6
>3fed	83 3a					.word Tokenise             ; index 8
>3fef	86 3a					.word TokeniseASCIIZ       ; index 10
.3ff1					_DummyControlHandler:
.3ff1	60		rts			rts

;******  Return to file: basic.asm

.3ff2					section_end_tokeniser:
.3ff2					section_start_variable:

;******  Processing file: variable/variable.asm


;******  Processing file: variable/array/access.asm

.3ff2					AccessArray:
.3ff2	8a		txa				txa
.3ff3	48		pha				pha
.3ff4	e8		inx				inx
.3ff5	20 be 40	jsr $40be			jsr 	GetArrayDimensions 			; get the array dimensions one up from here.
.3ff8	68		pla				pla
.3ff9	aa		tax				tax
.3ffa	b5 50		lda $50,x			lda 	esInt0,x 					; restore address to follow in temp0.
.3ffc	85 2a		sta $2a				sta 	temp0
.3ffe	b5 58		lda $58,x			lda 	esInt1,x
.4000	85 2b		sta $2b				sta 	temp0+1
.4002	8a		txa				txa
.4003	48		pha				pha
.4004	98		tya				tya
.4005	48		pha				pha
.4006					_AAFollow:
.4006	a0 00		ldy #$00			ldy 	#0
.4008	b1 2a		lda ($2a),y			lda 	(temp0),y
.400a	48		pha				pha
.400b	c8		iny				iny
.400c	b1 2a		lda ($2a),y			lda 	(temp0),y
.400e	85 2b		sta $2b				sta 	temp0+1
.4010	68		pla				pla
.4011	85 2a		sta $2a				sta 	temp0
.4013	e8		inx				inx 								; advance to next stack slot.
.4014	a0 00		ldy #$00			ldy 	#0
.4016	b1 2a		lda ($2a),y			lda 	(temp0),y 					; compare max index vs required index
.4018	d5 50		cmp $50,x			cmp 	esInt0,x
.401a	c8		iny				iny
.401b	b1 2a		lda ($2a),y			lda 	(temp0),y 					; drop bit 7 of the size, indicates follow.
.401d	85 2c		sta $2c				sta 	temp1 						; save the size in temp1 for later use.
.401f	29 7f		and #$7f			and 	#$7F
.4021	f5 58		sbc $58,x			sbc 	esInt1,x
.4023	90 50		bcc $4075			bcc 	_AABadIndex 				; failed on index if max index < required.
.4025	18		clc				clc
.4026	a5 2a		lda $2a				lda 	temp0
.4028	69 02		adc #$02			adc 	#2
.402a	85 2a		sta $2a				sta 	temp0
.402c	90 02		bcc $4030			bcc 	_AANoCarry
.402e	e6 2b		inc $2b				inc 	temp0+1
.4030					_AANoCarry:
.4030	b5 50		lda $50,x			lda 	esInt0,x
.4032	85 2e		sta $2e				sta 	temp2
.4034	b5 58		lda $58,x			lda 	esInt1,x
.4036	85 2f		sta $2f				sta 	temp2+1
.4038	ac ed 0d	ldy $0ded			ldy 	varType
.403b	b9 18 41	lda $4118,y			lda 	CAActualSize-$3A,y
.403e	b4 49		ldy $49,x			ldy 	esType+1,x 					; is it top level
.4040	30 02		bmi $4044			bmi 	_AANotPointer
.4042	a9 02		lda #$02			lda 	#2 							; array of pointers is 2.
.4044					_AANotPointer:
.4044	20 c2 41	jsr $41c2			jsr 	MultiplyTemp2ByA 			; multiply the index by the data size, in temp2.
.4047	18		clc				clc
.4048	a5 2a		lda $2a				lda 	temp0
.404a	65 2e		adc $2e				adc 	temp2
.404c	85 2a		sta $2a				sta 	temp0
.404e	a5 2b		lda $2b				lda 	temp0+1
.4050	65 2f		adc $2f				adc 	temp2+1
.4052	85 2b		sta $2b				sta 	temp0+1
.4054	b5 49		lda $49,x			lda 	esType+1,x
.4056	30 07		bmi $405f			bmi 	_AAUsedAllIndices
.4058	a5 2c		lda $2c				lda 	temp1 						; check if this is a pointer array e.g. there are subarrays
.405a	10 14		bpl $4070			bpl 	_AABadDepth 				; no, too many indexes.
.405c	4c 06 40	jmp $4006			jmp 	_AAFollow 					; otherwise follow them.
.405f					_AAUsedAllIndices:
.405f	a5 2c		lda $2c				lda 	temp1 						; get original high length byte.
.4061	30 0d		bmi $4070			bmi 	_AABadDepth 				; if -ve then this is an array of pointers.
.4063	68		pla				pla
.4064	a8		tay				tay
.4065	68		pla				pla
.4066	aa		tax				tax
.4067	a5 2a		lda $2a				lda 	temp0 						; copy address of array element to stack,x
.4069	95 50		sta $50,x			sta 	esInt0,x
.406b	a5 2b		lda $2b				lda 	temp0+1
.406d	95 58		sta $58,x			sta 	esInt1,x
.406f	60		rts				rts
.4070					_AABadDepth:
.4070	a2 1c		ldx #$1c			ldx 	#ErrorID_ArrayDepth
.4072	20 18 15	jsr $1518		jsr	errorHandler
.4075					_AABadIndex:
.4075	a2 1b		ldx #$1b			ldx 	#ErrorID_ArrayIndex
.4077	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: variable/variable.asm


;******  Processing file: variable/array/create.asm

.0deb					elementSize:
>0deb							.fill	 1
.407a					CreateArray:
.407a	20 51 42	jsr $4251			jsr 	AccessSetup 				; set up the basic stuff.
.407d	ad ed 0d	lda $0ded			lda 	varType 					; is the variable type an array
.4080	4a		lsr a				lsr 	a
.4081	90 36		bcc $40b9			bcc 	CANotArray 					; no, cause an error.
.4083	20 5a 43	jsr $435a			jsr 	FindVariable 				; does the variable exist already
.4086	b0 2c		bcs $40b4			bcs 	CAFound 					; cannot redefine it.
.4088	20 8e 42	jsr $428e			jsr 	CreateVariable 				; create the variable entry.
.408b	a5 2a		lda $2a				lda 	temp0 						; push address of new variable entry on the stack
.408d	48		pha				pha
.408e	a5 2b		lda $2b				lda 	temp0+1
.4090	48		pha				pha
.4091	a2 00		ldx #$00			ldx 	#0
.4093	20 be 40	jsr $40be			jsr 	GetArrayDimensions 			; get the array dimensions
.4096	a2 00		ldx #$00			ldx 	#0 							; create at level $00
.4098	20 ee 40	jsr $40ee			jsr 	CreateArrayLevel 			; level to YA
.409b	aa		tax				tax 								; level now in YX
.409c	68		pla				pla 								; get address back to temp0 to write.
.409d	85 2b		sta $2b				sta 	temp0+1
.409f	68		pla				pla
.40a0	85 2a		sta $2a				sta 	temp0
.40a2	98		tya				tya 								; write YX there.
.40a3	a0 06		ldy #$06			ldy 	#6
.40a5	91 2a		sta ($2a),y			sta 	(temp0),y
.40a7	88		dey				dey
.40a8	8a		txa				txa
.40a9	91 2a		sta ($2a),y			sta 	(temp0),y
.40ab	ac ee 0d	ldy $0dee			ldy 	varEnd 						; restore Y and exit.
.40ae	60		rts				rts
.40af					CASize:
.40af	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.40b1	20 18 15	jsr $1518		jsr	errorHandler
.40b4					CAFound:
.40b4	a2 19		ldx #$19			ldx 	#ErrorID_DupArray
.40b6	20 18 15	jsr $1518		jsr	errorHandler
.40b9					CANotArray:
.40b9	a2 1a		ldx #$1a			ldx 	#ErrorID_NotArray
.40bb	20 18 15	jsr $1518		jsr	errorHandler
.40be					GetArrayDimensions:
.40be	ad ed 0d	lda $0ded			lda 	varType 					; push variable type on the stack.
.40c1	48		pha				pha
.40c2	ac ee 0d	ldy $0dee			ldy 	varEnd
.40c5					_CAGetDimensions:
.40c5	8a		txa				txa 								; get the next level
.40c6	a2 0a		ldx #$0a		ldx	#10
.40c8	20 ff 34	jsr $34ff		jsr	mainHandler
.40cb	aa		tax				tax
.40cc	b5 58		lda $58,x			lda 	esInt1,x 					; index must be < 8192
.40ce	29 e0		and #$e0			and 	#$E0
.40d0	15 60		ora $60,x			ora 	esInt2,x
.40d2	15 68		ora $68,x			ora 	esInt3,x
.40d4	d0 d9		bne $40af			bne 	CASize
.40d6	e8		inx				inx 								; next level.
.40d7	b1 28		lda ($28),y			lda 	(codePtr),y 				; get/consume following character
.40d9	c8		iny				iny
.40da	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; loop back if more dimensions
.40dc	f0 e7		beq $40c5			beq 	_CAGetDimensions
.40de	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN 				; right bracket ?
.40e0	d0 cd		bne $40af			bne 	CASize
.40e2	a9 ff		lda #$ff			lda 	#$FF 						; set the type past the end to $FF so we know how many
.40e4	95 48		sta $48,x			sta 	esType,x 					; dimensions there are.
.40e6	68		pla				pla 								; restore the variable type ($3A-$3F)
.40e7	8d ed 0d	sta $0ded			sta 	varType
.40ea	8c ee 0d	sty $0dee			sty 	varEnd 						; save exit Y value, after dimensions
.40ed	60		rts				rts
.40ee					CreateArrayLevel:
.40ee	ac ed 0d	ldy $0ded			ldy 	varType
.40f1	b9 18 41	lda $4118,y			lda 	CAActualSize-$3A,y
.40f4	8d eb 0d	sta $0deb			sta 	elementSize 				; get element size this level.
.40f7	b4 49		ldy $49,x			ldy 	esType+1,x 					; is it top level
.40f9	30 05		bmi $4100			bmi 	_CANotPointer
.40fb	a9 02		lda #$02			lda 	#2 							; array of pointers is 2.
.40fd	8d eb 0d	sta $0deb			sta 	elementSize
.4100					_CANotPointer:
.4100	a5 35		lda $35				lda 	lowMemory 					; start creating at temp0, saving start on stack.
.4102	85 2a		sta $2a				sta 	temp0
.4104	48		pha				pha
.4105	a5 36		lda $36				lda 	lowMemory+1
.4107	85 2b		sta $2b				sta 	temp0+1
.4109	48		pha				pha
.410a	20 8b 41	jsr $418b			jsr 	AllocateArraySpace 			; allocate space for all array stuff at this level.
.410d	a0 00		ldy #$00			ldy 	#0
.410f	b5 50		lda $50,x			lda 	esInt0,x
.4111	91 2a		sta ($2a),y			sta 	(temp0),y
.4113	c8		iny				iny
.4114	b5 58		lda $58,x			lda 	esInt1,x
.4116	91 2a		sta ($2a),y			sta 	(temp0),y
.4118	b5 49		lda $49,x			lda 	esType+1,x 					; do we have another level ?
.411a	30 06		bmi $4122			bmi 	_CALNotLast
.411c	b1 2a		lda ($2a),y			lda 	(temp0),y 					; set bit 7, indicates an array of pointers to other levels.
.411e	09 80		ora #$80			ora 	#$80
.4120	91 2a		sta ($2a),y			sta 	(temp0),y
.4122					_CALNotLast:
.4122	a9 02		lda #$02			lda 	#2
.4124	20 48 41	jsr $4148			jsr 	_CALAddTemp0
.4127	b5 50		lda $50,x			lda 	esInt0,x 					; copy stack:01 to stack:23 so we can use it to
.4129	95 60		sta $60,x			sta 	esInt2,x 					; count.
.412b	b5 58		lda $58,x			lda 	esInt1,x
.412d	95 68		sta $68,x			sta 	esInt3,x
.412f					_CALClear:
.412f	20 58 41	jsr $4158			jsr 	EraseOneElement
.4132	ad eb 0d	lda $0deb			lda 	elementSize 				; move to next element
.4135	20 48 41	jsr $4148			jsr 	_CALAddTemp0
.4138	b5 60		lda $60,x			lda 	esInt2,x 					; decrement counter
.413a	d0 02		bne $413e			bne 	_CALNoBorrow
.413c	d6 68		dec $68,x			dec 	esInt3,x
.413e					_CALNoBorrow:
.413e	d6 60		dec $60,x			dec 	esInt2,x
.4140	b5 68		lda $68,x			lda 	esInt3,x 					; loop back if >= 0 - we need +1 because indices
.4142	10 eb		bpl $412f			bpl 	_CALClear 					; start at 0 e.g. x(10) is actually 11 array entries.
.4144	68		pla				pla 								; restore the start of this into YA.
.4145	a8		tay				tay
.4146	68		pla				pla
.4147	60		rts				rts
.4148					_CALAddTemp0:
.4148	18		clc				clc
.4149	65 2a		adc $2a				adc 	temp0
.414b	85 2a		sta $2a				sta 	temp0
.414d	90 02		bcc $4151			bcc 	_CALANoCarry
.414f	e6 2b		inc $2b				inc 	temp0+1
.4151					_CALANoCarry:
.4151	60		rts				rts
.4152					CAActualSize:
>4152	04 04						.byte 	VarISize,VarISize
>4154	02 02						.byte 	VarSSize,VarSSize
>4156	06 06						.byte 	VarFSize,VarFSize
.4158					EraseOneElement:
.4158	b5 49		lda $49,x			lda 	esType+1,x 					; is this a list of sub arrays
.415a	10 09		bpl $4165			bpl 	_EOESubArray
.415c	a0 00		ldy #$00			ldy 	#0 							; write the empty variable value out.
.415e	ad ed 0d	lda $0ded			lda 	varType
.4161	20 f8 42	jsr $42f8			jsr 	ZeroTemp0Y
.4164	60		rts				rts
.4165					_EOESubArray:
.4165	a5 2a		lda $2a				lda 	temp0 						; save temp0, these are effectively locals.
.4167	48		pha				pha
.4168	a5 2b		lda $2b				lda 	temp0+1
.416a	48		pha				pha
.416b	ad eb 0d	lda $0deb			lda 	elementSize 				; save element size
.416e	48		pha				pha
.416f	e8		inx				inx 								; create at next level
.4170	20 ee 40	jsr $40ee			jsr 	CreateArrayLevel
.4173	ca		dex				dex
.4174	85 32		sta $32				sta 	tempShort 					; save A
.4176	68		pla				pla  								; restore element size.
.4177	8d eb 0d	sta $0deb			sta 	elementSize
.417a	68		pla				pla 								; restore temp0, which is where this new array level goes.
.417b	85 2b		sta $2b				sta 	temp0+1
.417d	68		pla				pla
.417e	85 2a		sta $2a				sta 	temp0
.4180	98		tya				tya 								; store Y/A there
.4181	a0 01		ldy #$01			ldy 	#1
.4183	91 2a		sta ($2a),y			sta 	(temp0),y
.4185	a5 32		lda $32				lda 	tempShort
.4187	88		dey				dey
.4188	91 2a		sta ($2a),y			sta 	(temp0),y
.418a	60		rts				rts
.418b					AllocateArraySpace:
.418b	18		clc				clc 								; element count + 1 => temp2.
.418c	b5 50		lda $50,x			lda 	esInt0,x
.418e	69 01		adc #$01			adc 	#1
.4190	85 2e		sta $2e				sta 	temp2
.4192	b5 58		lda $58,x			lda 	esInt1,x
.4194	69 00		adc #$00			adc 	#0
.4196	85 2f		sta $2f				sta 	temp2+1
.4198	ad eb 0d	lda $0deb			lda 	elementSize 				; bytes per element
.419b	20 c2 41	jsr $41c2			jsr 	MultiplyTemp2ByA 			; temp2 = (count + 1) x bytes per element.
.419e	18		clc				clc 								; add 2 for 'max element' byte.
.419f	a5 2e		lda $2e				lda 	temp2
.41a1	69 02		adc #$02			adc 	#2
.41a3	85 2e		sta $2e				sta 	temp2
.41a5	90 02		bcc $41a9			bcc 	_AASNoCarry
.41a7	e6 2f		inc $2f				inc 	temp2+1
.41a9					_AASNoCarry:
.41a9	18		clc				clc 								; add to low memory, allocating space.
.41aa	a5 35		lda $35				lda 	lowMemory
.41ac	65 2e		adc $2e				adc 	temp2
.41ae	85 35		sta $35				sta 	lowMemory
.41b0	a5 36		lda $36				lda 	lowMemory+1
.41b2	65 2f		adc $2f				adc 	temp2+1
.41b4	85 36		sta $36				sta 	lowMemory+1
.41b6	b0 05		bcs $41bd			bcs 	_AASFail 					; out of memory as adding causes wrapround
.41b8	c5 34		cmp $34				cmp 	highMemory+1 				; >= high memory pointer.
.41ba	b0 01		bcs $41bd			bcs 	_AASFail
.41bc	60		rts				rts
.41bd					_AASFail:
.41bd	a2 22		ldx #$22			ldx 	#ErrorID_Memory
.41bf	20 18 15	jsr $1518		jsr	errorHandler
.41c2					MultiplyTemp2ByA:
.41c2	48		pha				pha
.41c3	a5 2e		lda $2e				lda 	temp2 						; copy temp2 to temp3.
.41c5	85 30		sta $30				sta 	temp3
.41c7	a5 2f		lda $2f				lda 	temp2+1
.41c9	85 31		sta $31				sta 	temp3+1
.41cb	68		pla				pla
.41cc	06 2e		asl $2e				asl 	temp2 						; double it.
.41ce	26 2f		rol $2f				rol 	temp2+1
.41d0	c9 02		cmp #$02			cmp 	#2 							; if x 2 then exit.
.41d2	f0 15		beq $41e9			beq 	_MTBAExit
.41d4	c9 06		cmp #$06			cmp 	#6 							; if x 6 then add temp3 to temp2
.41d6	d0 0d		bne $41e5			bne 	_MTBANotFloat
.41d8	18		clc				clc 								; so this will make it x 3
.41d9	a5 2e		lda $2e				lda 	temp2
.41db	65 30		adc $30				adc 	temp3
.41dd	85 2e		sta $2e				sta 	temp2
.41df	a5 2f		lda $2f				lda 	temp2+1
.41e1	65 31		adc $31				adc 	temp3+1
.41e3	85 2f		sta $2f				sta 	temp2+1
.41e5					_MTBANotFloat:
.41e5	06 2e		asl $2e				asl 	temp2 						; double it.
.41e7	26 2f		rol $2f				rol 	temp2+1
.41e9					_MTBAExit:
.41e9	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/variable/access.asm

.0dec					varHash:
>0dec							.fill	1
.0ded					varType:
>0ded							.fill 	1
.0dee					varEnd:
>0dee							.fill 	1
.003b					hashList:
>003b							.fill 	2
.41ea					AccessVariable:
.41ea	aa		tax				tax 								; stack in X
.41eb	c8		iny				iny									; look at second character
.41ec	b1 28		lda ($28),y			lda 	(codePtr),y
.41ee	88		dey				dey
.41ef	c9 3a		cmp #$3a			cmp 	#TYPE_INT 					; is it the integer marker ($3A)
.41f1	d0 15		bne $4208			bne 	_AVLong 					; no, always use the hash tables.
.41f3	b1 28		lda ($28),y			lda 	(codePtr),y 				; this is the 6 bit ASCII of A-Z 1-26
.41f5	38		sec				sec 	 							; make it 0-25
.41f6	e9 01		sbc #$01			sbc 	#1
.41f8	0a		asl a				asl 	a 							; x 4 as 4 bytes / variable.
.41f9	0a		asl a				asl 	a
.41fa	95 50		sta $50,x			sta 	esInt0,x
.41fc	a9 0a		lda #$0a			lda 	#SingleLetterVar >> 8 		; make it an address
.41fe	95 58		sta $58,x			sta 	esInt1,x
.4200	a9 80		lda #$80			lda 	#$80 						; type is an integer reference.
.4202	95 48		sta $48,x			sta 	esType,x
.4204	c8		iny				iny 								; skip over the variable reference in the code.
.4205	c8		iny				iny  								; (1 letter, 1 type)
.4206	8a		txa				txa 								; stack in A to return.
.4207	60		rts				rts
.4208					_AVLong:
.4208	8a		txa				txa
.4209	48		pha				pha
.420a	20 51 42	jsr $4251			jsr 	AccessSetup 				; set up the basic information we need for later
.420d	20 5a 43	jsr $435a			jsr 	FindVariable 				; does the variable exist already ?
.4210	b0 0e		bcs $4220			bcs 	_AVFound 					; yes, then its found
.4212	ad ed 0d	lda $0ded			lda 	varType 					; otherwise, is the variable type an array
.4215	4a		lsr a				lsr 	a
.4216	90 05		bcc $421d			bcc 	_AVCanCreate 				; if not, we can autocreate
.4218	a2 15		ldx #$15			ldx 	#ErrorID_noauto
.421a	20 18 15	jsr $1518		jsr	errorHandler
.421d					_AVCanCreate:
.421d	20 8e 42	jsr $428e			jsr 	CreateVariable 				; variable does not exist, create it.
.4220					_AVFound:
.4220	68		pla				pla
.4221	aa		tax				tax
.4222	18		clc				clc 								; copy temp0 (variable record address)
.4223	a5 2a		lda $2a				lda 	temp0 						; +5 (to point to the data)
.4225	69 05		adc #$05			adc 	#5 							; (first 5 bytes are link, name, hash)
.4227	95 50		sta $50,x			sta 	esInt0,x
.4229	a5 2b		lda $2b				lda 	temp0+1
.422b	69 00		adc #$00			adc 	#0
.422d	95 58		sta $58,x			sta 	esInt1,x
.422f	a9 00		lda #$00			lda 	#0
.4231	95 60		sta $60,x			sta 	esInt2,x
.4233	95 68		sta $68,x			sta 	esInt3,x
.4235	ac ed 0d	ldy $0ded			ldy 	varType 					; get the type ID from the type.
.4238	b9 11 42	lda $4211,y			lda 	_AVTypeTable-$3A,y 			; e.g. a reference to int/float/string.
.423b	95 48		sta $48,x			sta 	esType,x
.423d	ac ee 0d	ldy $0dee			ldy 	varEnd 						; restore Y
.4240	ad ed 0d	lda $0ded			lda 	VarType 					; get variable type, put LSB into C
.4243	4a		lsr a				lsr 	a
.4244	90 03		bcc $4249			bcc 	_AVNotArray 				; if carry set,it is an array variable.
.4246	20 f2 3f	jsr $3ff2			jsr 	AccessArray 				; array lookup. if LSB was set.
.4249					_AVNotArray:
.4249	8a		txa				txa 								; return stack in A and return
.424a	60		rts				rts
.424b					_AVTypeTable:
>424b	80 80						.byte 	$80,$80						; integer
>424d	c0 c0						.byte 	$C0,$C0 					; string
>424f	81 81						.byte 	$81,$81 					; float
.4251					AccessSetup:
.4251	a9 00		lda #$00			lda 	#0 							; zero the hash byte.
.4253	8d ec 0d	sta $0dec			sta 	varHash
.4256	98		tya				tya
.4257	48		pha				pha
.4258	b1 28		lda ($28),y	_ASLoop:lda 	(codePtr),y					; get next identifier character
.425a	c9 3a		cmp #$3a			cmp 	#$3A 						; is it 3A-3F which end all identifiers ?
.425c	b0 0b		bcs $4269			bcs 	_ASComplete
.425e	18		clc				clc 								; add to the hash. Might improve this.
.425f	6d ec 0d	adc $0dec			adc 	varHash
.4262	8d ec 0d	sta $0dec			sta 	varHash
.4265	c8		iny				iny 								; next character
.4266	4c 58 42	jmp $4258			jmp 	_ASLoop
.4269					_ASComplete:
.4269	8d ed 0d	sta $0ded			sta 	varType 					; save variable type byte
.426c	c8		iny				iny
.426d	8c ee 0d	sty $0dee			sty 	varEnd 						; save the ending position.
.4270	38		sec				sec 								; convert type byte from $3A-$3F to 0..5
.4271	e9 3a		sbc #$3a			sbc 	#$3A
.4273	0a		asl a				asl 	a 							; multiply by hashTableSize (8 in this case)
.4274	0a		asl a				asl 	a
.4275	0a		asl a				asl 	a
.4276	0a		asl a				asl 	a 							; 2 bytes/word
.4277	85 2a		sta $2a				sta 	temp0 						; this is the offset to the start of the table.
.4279	ad ec 0d	lda $0dec			lda 	varHash 					; get hash
.427c	29 07		and #$07			and 	#(hashTableSize-1)			; force into range (for 8,0..7)
.427e	0a		asl a				asl  	a 							; x 2 (for word) and clear carry
.427f	65 2a		adc $2a				adc 	temp0 						; now offset from the start of the hash table.
.4281	69 68		adc #$68			adc 	#hashTables & $FF 			; add to hash table base address
.4283	85 3b		sta $3b				sta 	hashList 					; making hashLists point to the head of the link list.
.4285	a9 0a		lda #$0a			lda 	#hashTables >> 8
.4287	69 00		adc #$00			adc 	#0
.4289	85 3c		sta $3c				sta 	hashList+1
.428b	68		pla				pla
.428c	a8		tay				tay
.428d	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/variable/create.asm

.428e					CreateVariable:
.428e	98		tya				tya 								; push Y on the stack twice.
.428f	48		pha				pha									; position in code of the new variable.
.4290	48		pha				pha
.4291	ae ed 0d	ldx $0ded			ldx 	varType 					; get var type 0-5 from the var type
.4294	bd b8 42	lda $42b8,x			lda		_CVSize-$3A,x 				; the bytes required for this new variable.
.4297	48		pha				pha 								; save length
.4298	a5 35		lda $35				lda 	lowMemory 					; set low Memory ptr to temp0
.429a	85 2a		sta $2a				sta 	temp0 						; (address of the new variable)
.429c	a5 36		lda $36				lda 	lowMemory+1
.429e	85 2b		sta $2b				sta 	temp0+1
.42a0	68		pla				pla 								; get length
.42a1	18		clc				clc 								; add to low memory.
.42a2	65 35		adc $35				adc 	lowMemory
.42a4	85 35		sta $35				sta 	lowMemory
.42a6	90 08		bcc $42b0			bcc 	_CVNoCarry
.42a8	e6 36		inc $36				inc 	lowMemory+1
.42aa	a5 36		lda $36				lda 	lowMemory+1 				; check out of memory.
.42ac	c5 34		cmp $34				cmp 	highMemory+1
.42ae	b0 3d		bcs $42ed			bcs 	_CVMemory
.42b0					_CVNoCarry:
.42b0	ad ec 0d	lda $0dec			lda 	varHash 					; store hash at offset 4.
.42b3	a0 04		ldy #$04			ldy 	#4
.42b5	91 2a		sta ($2a),y			sta 	(temp0),y
.42b7	68		pla				pla 								; offset, work out where the variable name is.
.42b8	18		clc				clc
.42b9	65 28		adc $28				adc 	codePtr
.42bb	a0 02		ldy #$02			ldy 	#2 							; copy that into slots 2 + 3.
.42bd	91 2a		sta ($2a),y			sta 	(temp0),y
.42bf	a5 29		lda $29				lda 	codePtr+1
.42c1	69 00		adc #$00			adc 	#0
.42c3	c8		iny				iny
.42c4	91 2a		sta ($2a),y			sta 	(temp0),y
.42c6	cd c9 0a	cmp $0ac9			cmp 	basePage+1 					; compare against the program base.
.42c9	b0 03		bcs $42ce			bcs 	_CVNotImmediate
.42cb	20 30 43	jsr $4330			jsr 	CloneVariableName 			; we need to clone the variable name (immediate mode)
.42ce					_CVNotImmediate:
.42ce	a0 00		ldy #$00			ldy 	#0 							; copy current hash pointer in link
.42d0	b1 3b		lda ($3b),y			lda 	(hashList),y 				; so we're inserting it in the front of a linked list
.42d2	91 2a		sta ($2a),y			sta 	(temp0),y
.42d4	c8		iny				iny
.42d5	b1 3b		lda ($3b),y			lda 	(hashList),y
.42d7	91 2a		sta ($2a),y			sta 	(temp0),y
.42d9	a5 2b		lda $2b				lda 	temp0+1 					; set new link
.42db	91 3b		sta ($3b),y			sta 	(hashList),y
.42dd	88		dey				dey
.42de	a5 2a		lda $2a				lda 	temp0
.42e0	91 3b		sta ($3b),y			sta 	(hashList),y
.42e2	ad ed 0d	lda $0ded			lda 	varType 					; type in A
.42e5	a0 05		ldy #$05			ldy 	#5 							; offset in Y
.42e7	20 f8 42	jsr $42f8			jsr 	ZeroTemp0Y 					; zero (temp0),y with whatever type.
.42ea	68		pla				pla
.42eb	a8		tay				tay
.42ec	60		rts				rts
.42ed					_CVMemory:
.42ed	a2 22		ldx #$22			ldx 	#ErrorID_Memory
.42ef	20 18 15	jsr $1518		jsr	errorHandler
>42f2	09 07				_CVSize:.byte 	VarHSize+VarISize,VarHSize+VarASize 					; <storage for integer>
>42f4	07 07						.byte 	VarHSize+VarSSize,VarHSize+VarASize 					; <storage for string>
>42f6	0b 07						.byte 	VarHSize+VarFSize,VarHSize+VarASize 					; <storage for float>
.42f8					ZeroTemp0Y:
.42f8	4a		lsr a				lsr 	a 							; bit 0 in carry
.42f9	0a		asl a				asl 	a
.42fa	b0 19		bcs $4315			bcs 	_ZTExit 					; we don't initialise arrays.
.42fc	c9 3c		cmp #$3c			cmp 	#$3C 						; check string
.42fe	f0 16		beq $4316			beq 	_ZTWriteNullString 			; write "" string
.4300	c9 3e		cmp #$3e			cmp 	#$3E 						; check float
.4302	f0 22		beq $4326			beq 	_ZTWriteFloat
.4304	98		tya				tya
.4305	48		pha				pha
.4306	a9 00		lda #$00			lda 	#0
.4308	91 2a		sta ($2a),y			sta 	(temp0),y
.430a	c8		iny				iny
.430b	91 2a		sta ($2a),y			sta 	(temp0),y
.430d	c8		iny				iny
.430e	91 2a		sta ($2a),y			sta 	(temp0),y
.4310	c8		iny				iny
.4311	91 2a		sta ($2a),y			sta 	(temp0),y
.4313	68		pla				pla
.4314	a8		tay				tay
.4315					_ZTExit:
.4315	60		rts				rts
.4316					_ZTWriteNullString:
.4316	a9 00		lda #$00			lda 	#0 							; put a reference to null string as the default value.
.4318	8d ce 0a	sta $0ace			sta 	NullString
.431b	a9 ce		lda #$ce			lda 	#NullString & $FF
.431d	91 2a		sta ($2a),y			sta 	(temp0),y
.431f	a9 0a		lda #$0a			lda 	#NullString >> 8
.4321	c8		iny				iny
.4322	91 2a		sta ($2a),y			sta 	(temp0),y
.4324	88		dey				dey
.4325	60		rts				rts
.4326					_ZTWriteFloat:
.4326	8a		txa				txa
.4327	48		pha				pha
.4328	a2 20		ldx #$20		ldx	#32
.432a	20 79 1c	jsr $1c79		jsr	floatingpointHandler
.432d	68		pla				pla
.432e	aa		tax				tax
.432f	60		rts				rts
.4330					CloneVariableName:
.4330	a0 02		ldy #$02			ldy 	#2 							; copy vname address to temp2
.4332	b1 2a		lda ($2a),y			lda 	(temp0),y
.4334	85 2e		sta $2e				sta 	temp2
.4336	c8		iny				iny
.4337	b1 2a		lda ($2a),y			lda 	(temp0),y
.4339	85 2f		sta $2f				sta 	temp2+1
.433b	a5 36		lda $36				lda 	lowMemory+1 				; copy lowMemory address to (temp0),2/3
.433d	91 2a		sta ($2a),y			sta 	(temp0),y
.433f	88		dey				dey
.4340	a5 35		lda $35				lda 	lowMemory
.4342	91 2a		sta ($2a),y			sta 	(temp0),y
.4344	a0 00		ldy #$00			ldy 	#0 							; copy data from (temp2) to (lowMemory)
.4346					_CVNCopy:
.4346	b1 2e		lda ($2e),y			lda		(temp2),y
.4348	91 35		sta ($35),y			sta 	(lowMemory),y
.434a	c8		iny				iny
.434b	c9 3a		cmp #$3a			cmp 	#$3A 						; until the whole name has been copied.
.434d	90 f7		bcc $4346			bcc 	_CVNCopy
.434f	98		tya				tya 								; add Y to low memory
.4350	18		clc				clc
.4351	65 35		adc $35				adc 	lowMemory
.4353	85 35		sta $35				sta 	lowMemory
.4355	90 02		bcc $4359			bcc 	_CVNNoCarry
.4357	e6 36		inc $36				inc 	lowMemory+1
.4359					_CVNNoCarry:
.4359	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/variable/find.asm

.435a					FindVariable:
.435a	98		tya				tya
.435b	48		pha				pha
.435c	98		tya				tya 								; point temp2 to the actual name
.435d	18		clc				clc 								; in memory of the variable being created
.435e	65 28		adc $28				adc 	codePtr
.4360	85 2e		sta $2e				sta 	temp2
.4362	a5 29		lda $29				lda 	codePtr+1
.4364	69 00		adc #$00			adc 	#0
.4366	85 2f		sta $2f				sta 	temp2+1
.4368	a0 00		ldy #$00			ldy 	#0
.436a	a5 3b		lda $3b				lda 	hashList 					; copy hashlist to temp0
.436c	85 2a		sta $2a				sta 	temp0
.436e	a5 3c		lda $3c				lda 	hashList+1
.4370	85 2b		sta $2b				sta 	temp0+1
.4372	a0 01		ldy #$01	_FVNext:ldy 	#1 							; get MSB
.4374	b1 2a		lda ($2a),y			lda 	(temp0),y
.4376	f0 2c		beq $43a4			beq 	_FVFail
.4378	aa		tax				tax
.4379	88		dey				dey		 							; get LSB
.437a	b1 2a		lda ($2a),y			lda 	(temp0),y
.437c	85 2a		sta $2a				sta 	temp0 						; update pointer.
.437e	86 2b		stx $2b				stx 	temp0+1
.4380	a0 04		ldy #$04			ldy 	#4 							; check hashes match
.4382	b1 2a		lda ($2a),y			lda 	(temp0),y
.4384	cd ec 0d	cmp $0dec			cmp 	varHash
.4387	d0 e9		bne $4372			bne 	_FVNext 					; if not, no point in checking the name.
.4389	88		dey				dey 								; copy name pointer (+2,+3) to temp1.
.438a	b1 2a		lda ($2a),y			lda 	(temp0),y
.438c	85 2d		sta $2d				sta 	temp1+1
.438e	88		dey				dey
.438f	b1 2a		lda ($2a),y			lda 	(temp0),y
.4391	85 2c		sta $2c				sta 	temp1
.4393	a0 00		ldy #$00			ldy 	#0
.4395					_FVCheck:
.4395	b1 2c		lda ($2c),y			lda 	(temp1),y 					; compare names
.4397	d1 2e		cmp ($2e),y			cmp 	(temp2),y
.4399	d0 d7		bne $4372			bne 	_FVNext		 				; fail if different.
.439b	c8		iny				iny
.439c	c9 3a		cmp #$3a			cmp 	#$3A 						; until reached the end marker.
.439e	90 f5		bcc $4395			bcc 	_FVCheck
.43a0	68		pla				pla
.43a1	a8		tay				tay
.43a2	38		sec				sec
.43a3	60		rts				rts
.43a4					_FVFail:
.43a4	68		pla				pla
.43a5	a8		tay				tay
.43a6	18		clc				clc
.43a7	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/variable/reset.asm

.43a8					HashTableReset:
.43a8	a2 60		ldx #$60			ldx 	#6*2*hashTableSize			; 6 types, 2 bytes per table entry.
.43aa	a9 00		lda #$00			lda 	#0
.43ac					_HTRClear:
.43ac	9d 67 0a	sta $0a67,x			sta 	hashTables-1,x
.43af	ca		dex				dex
.43b0	d0 fa		bne $43ac			bne 	_HTRClear
.43b2	60		rts				rts

;******  Return to file: variable/variable.asm

.43b3					variableHandler:
.43b3	7c b6 43	jmp ($43b6,x)			jmp 	(variableVectors,x)
.43b6					variableVectors:
>43b6	be 43					.word _DummyControlHandler ; index 0
>43b8	ea 41					.word AccessVariable       ; index 2
>43ba	7a 40					.word CreateArray          ; index 4
>43bc	a8 43					.word HashTableReset       ; index 6
.43be					_DummyControlHandler:
.43be	60		rts			rts

;******  Return to file: basic.asm

.43bf					section_end_variable:
.43bf					section_start_footer:

;******  Processing file: footer/footer.asm


;******  Processing file: footer/99end.asm

.003d					endZeroPage:
.0def					endStorage:
>43bf							.align 	256
.4400					programMemory:
>43ff	ff						.byte 	$FF

;******  Return to file: footer/footer.asm


;******  Return to file: basic.asm

.4400					section_end_footer:

;******  End of listing
