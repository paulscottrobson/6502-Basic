
; 64tass Turbo Assembler Macro V1.55.2200 listing file
; 64tass -D autorun=1 -D coldstartnew=0 -Walias -Wmacro-prefix -Wall -q -c -L ../source/bin/basic.lst -l ../source/bin/basic.lbl -Wall -o ../source/bin/stub.prg basic.asm
; Sun Mar 14 13:59:33 2021

;Offset	;Hex		;Monitor	;Source

;******  Command line definitions

=1					autorun=1
=0					coldstartnew=0

;******  Processing input file: basic.asm


;******  Processing file: header/01common.inc


;******  Processing file: header/../generated/installed.inc

=1					installed_header = 1
=1					installed_main = 1
=1					installed_variable = 1
=1					installed_assembler = 1
=1					installed_error = 1
=1					installed_extension = 1
=1					installed_string = 1
=1					installed_device = 1
=0					installed_floatingpoint = 0
=1					installed_interaction = 1
=1					installed_tokeniser = 1
=1					installed_footer = 1

;******  Return to file: header/01common.inc

=$1000					CodeStart = $1000
=$800					MemoryStorage = $800
=$9f00					EndOfMemory = $9F00
=$28					ZeroPageStorage = $28
=$40					StackAddress = $40
=8					StackSize = 8
=2					retStackSizePages = 2
=8					hashTableSize = 8			; if this changes, the calculation is AccessSetup has to match it.
="G"					markerGOSUB = 'G'
="R"					markerREPEAT = 'R'
="F"					markerFOR = 'F'
="W"					markerWHILE = 'W'
="P"					markerPROC = 'P'
="$"					markerSTRING = '$'
="#"					markerFLOAT = '#'
="%"					markerINT = '%'
=5					VarHSize = 5 								; header (2 link, 2 name, 1 hash)
=5					VarASize = 5 								; array [address,size,byteSize]
=4					VarISize = 4 								; integer (32 bit)
=6					VarFSize = 6 								; float (4 mantissa, 1 exponent 1 sign/zero)
=2					VarSSize = 2 								; address (2 bytes)

;******  Return to file: basic.asm


;******  Processing file: header/02macros.inc


;******  Return to file: basic.asm


;******  Processing file: header/03data.inc

>0028					codePtr:.fill 	2							; (codePtr),y points to code.
>002a					temp0: 	.fill 	2							; working variables.
>002c					temp1: 	.fill 	2
>002e					temp2: 	.fill 	2
>0030					temp3: 	.fill 	2
.0032					tempshort:
>0032							.fill 	1
.0033					highMemory:
>0033							.fill 	2
.0035					lowMemory:
>0035							.fill 	2
>0800							.align	256
.0800					returnStack:
>0800							.fill 	retStackSizePages * 256
=512					retStackSize = retStackSizePages * 256
.0a00					SingleLetterVar:
>0a00					 		.fill 	26*4
.0a68					currentStorage:
>0040					esType:	.fill 	StackSize  					; type byte (see above)
>0048					esInt0:	.fill 	StackSize 					; integer or mantissa
>0050					esInt1:	.fill 	StackSize
>0058					esInt2:	.fill 	StackSize
>0060					esInt3:	.fill 	StackSize
>0068					esExp:	.fill 	StackSize 					; exponent ($80 = 0)
>0070					esZSign:.fill 	StackSize 					; for floating point - sign (bit 7) isZero (bit 6)
.0078					endOfStack:
=$48					esMant0 = esInt0 							; synonyms.
=$50					esMant1 = esInt1
=$58					esMant2 = esInt2
=$60					esMant3 = esInt3
.0a68					hashTables:
>0a68							.fill 	6*2*hashTableSize
.0ac8					basePage:
>0ac8							.fill 	2
.0aca					endProgram:
>0aca							.fill 	2
.0acc					endMemory:
>0acc							.fill 	2
.0ace					NullString:
>0ace							.fill 	1							; don't waste memory concreting null strings.
.0acf					convertBuffer:
>0acf							.fill 	35

;******  Processing file: header/../generated/tokenconst.inc

=$80					TOK_EOL=$80
=$81					TOK_SHIFT1=$81
=$82					TOK_SHIFT2=$82
=$83					TOK_SHIFT3=$83
=$84					TOK_FPC=$84
=$85					TOK_STR=$85
=$86					TOK_BINARYST=$86
=$99					TOK_STRUCTST=$99
=$a4					TOK_UNARYST=$a4
=$c9					TOK_TOKENS=$c9
=$86					TKW_AND                      = $86 ; and
=$87					TKW_OR                       = $87 ; or
=$88					TKW_XOR                      = $88 ; xor
=$89					TKW_GREATEREQUAL             = $89 ; >=
=$8a					TKW_LESSEQUAL                = $8a ; <=
=$8b					TKW_GREATER                  = $8b ; >
=$8c					TKW_LESS                     = $8c ; <
=$8d					TKW_EQUAL                    = $8d ; =
=$8e					TKW_LESSGREATER              = $8e ; <>
=$8f					TKW_PLUS                     = $8f ; +
=$90					TKW_MINUS                    = $90 ; -
=$91					TKW_GREATERGREATER           = $91 ; >>
=$92					TKW_LESSLESS                 = $92 ; <<
=$93					TKW_STAR                     = $93 ; *
=$94					TKW_SLASH                    = $94 ; /
=$95					TKW_MOD                      = $95 ; mod
=$96					TKW_HAT                      = $96 ; ^
=$97					TKW_PLING                    = $97 ; !
=$98					TKW_QMARK                    = $98 ; ?
=$99					TKW_REPEAT                   = $99 ; repeat
=$9a					TKW_WHILE                    = $9a ; while
=$9b					TKW_FOR                      = $9b ; for
=$9c					TKW_IF                       = $9c ; if
=$9d					TKW_DEFPROC                  = $9d ; defproc
=$9e					TKW_UNTIL                    = $9e ; until
=$9f					TKW_WEND                     = $9f ; wend
=$a0					TKW_NEXT                     = $a0 ; next
=$a1					TKW_THEN                     = $a1 ; then
=$a2					TKW_ENDIF                    = $a2 ; endif
=$a3					TKW_ENDPROC                  = $a3 ; endproc
=$a4					TKW_LPAREN                   = $a4 ; (
=$a5					TKW_LENLPAREN                = $a5 ; len(
=$a6					TKW_SGNLPAREN                = $a6 ; sgn(
=$a7					TKW_ABSLPAREN                = $a7 ; abs(
=$a8					TKW_RANDOMLPAREN             = $a8 ; random(
=$a9					TKW_PAGE                     = $a9 ; page
=$aa					TKW_TRUE                     = $aa ; true
=$ab					TKW_FALSE                    = $ab ; false
=$ac					TKW_MINLPAREN                = $ac ; min(
=$ad					TKW_MAXLPAREN                = $ad ; max(
=$ae					TKW_SYSLPAREN                = $ae ; sys(
=$af					TKW_TIMERLPAREN              = $af ; timer(
=$b0					TKW_EVENTLPAREN              = $b0 ; event(
=$b1					TKW_GETLPAREN                = $b1 ; get(
=$b2					TKW_INKEYLPAREN              = $b2 ; inkey(
=$b3					TKW_ALLOCLPAREN              = $b3 ; alloc(
=$b4					TKW_CHRDOLLARLPAREN          = $b4 ; chr$(
=$b5					TKW_LEFTDOLLARLPAREN         = $b5 ; left$(
=$b6					TKW_MIDDOLLARLPAREN          = $b6 ; mid$(
=$b7					TKW_RIGHTDOLLARLPAREN        = $b7 ; right$(
=$b8					TKW_STRDOLLARLPAREN          = $b8 ; str$(
=$b9					TKW_VALLPAREN                = $b9 ; val(
=$ba					TKW_PEEKLPAREN               = $ba ; peek(
=$bb					TKW_DEEKLPAREN               = $bb ; deek(
=$bc					TKW_LEEKLPAREN               = $bc ; leek(
=$bd					TKW_ASCLPAREN                = $bd ; asc(
=$be					TKW_INTLPAREN                = $be ; int(
=$bf					TKW_FLOATLPAREN              = $bf ; float(
=$c0					TKW_ISVALLPAREN              = $c0 ; isval(
=$c1					TKW_UPPERDOLLARLPAREN        = $c1 ; upper$(
=$c2					TKW_LOWERDOLLARLPAREN        = $c2 ; lower$(
=$c3					TKW_AT                       = $c3 ; @
=$c4					TKW_WAVY                     = $c4 ; ~
=$c5					TKW_AMP                      = $c5 ; &
=$c6					TKW_GETDOLLARLPAREN          = $c6 ; get$(
=$c7					TKW_INKEYDOLLARLPAREN        = $c7 ; inkey$(
=$c8					TKW_MEM                      = $c8 ; mem
=$c9					TKW_RPAREN                   = $c9 ; )
=$ca					TKW_COLON                    = $ca ; :
=$cb					TKW_COMMA                    = $cb ; ,
=$cc					TKW_SEMICOLON                = $cc ; ;
=$cd					TKW_QUOTE                    = $cd ; '
=$ce					TKW_TO                       = $ce ; to
=$cf					TKW_STEP                     = $cf ; step
=$d0					TKW_PROC                     = $d0 ; proc
=$d1					TKW_LOCAL                    = $d1 ; local
=$d2					TKW_DIM                      = $d2 ; dim
=$d3					TKW_REM                      = $d3 ; rem
=$d4					TKW_LET                      = $d4 ; let
=$d5					TKW_INPUT                    = $d5 ; input
=$d6					TKW_ELSE                     = $d6 ; else
=$d7					TKW_VDU                      = $d7 ; vdu
=$d8					TKW_PRINT                    = $d8 ; print
=$d9					TKW_GOTO                     = $d9 ; goto
=$da					TKW_GOSUB                    = $da ; gosub
=$db					TKW_RETURN                   = $db ; return
=$dc					TKW_DATA                     = $dc ; data
=$dd					TKW_ASSERT                   = $dd ; assert
=$de					TKW_POKE                     = $de ; poke
=$df					TKW_DOKE                     = $df ; doke
=$e0					TKW_LOKE                     = $e0 ; loke
=$e1					TKW_INK                      = $e1 ; ink
=$e2					TKW_PAPER                    = $e2 ; paper
=$e3					TKW_CLS                      = $e3 ; cls
=$e4					TKW_LOCATE                   = $e4 ; locate
=$e5					TKW_BREAK                    = $e5 ; break
=$86					TKW_CLEAR                    = $86 ; clear
=$87					TKW_LOAD                     = $87 ; load
=$88					TKW_SAVE                     = $88 ; save
=$89					TKW_LIST                     = $89 ; list
=$8a					TKW_NEW                      = $8a ; new
=$8b					TKW_RUN                      = $8b ; run
=$8c					TKW_READ                     = $8c ; read
=$8d					TKW_RESTORE                  = $8d ; restore
=$8e					TKW_END                      = $8e ; end
=$8f					TKW_STOP                     = $8f ; stop
=$90					TKW_XEMU                     = $90 ; xemu
=$91					TKW_ORA                      = $91 ; ora
=$92					TKW_LPARENANDRPAREN          = $92 ; (and)
=$93					TKW_EOR                      = $93 ; eor
=$94					TKW_ADC                      = $94 ; adc
=$95					TKW_STA                      = $95 ; sta
=$96					TKW_LDA                      = $96 ; lda
=$97					TKW_CMP                      = $97 ; cmp
=$98					TKW_SBC                      = $98 ; sbc
=$99					TKW_ASL                      = $99 ; asl
=$9a					TKW_ROL                      = $9a ; rol
=$9b					TKW_LSR                      = $9b ; lsr
=$9c					TKW_ROR                      = $9c ; ror
=$9d					TKW_STX                      = $9d ; stx
=$9e					TKW_LDX                      = $9e ; ldx
=$9f					TKW_DEC                      = $9f ; dec
=$a0					TKW_INC                      = $a0 ; inc
=$a1					TKW_STZ                      = $a1 ; stz
=$a2					TKW_BIT                      = $a2 ; bit
=$a3					TKW_STY                      = $a3 ; sty
=$a4					TKW_LDY                      = $a4 ; ldy
=$a5					TKW_CPY                      = $a5 ; cpy
=$a6					TKW_CPX                      = $a6 ; cpx
=$a7					TKW_TSB                      = $a7 ; tsb
=$a8					TKW_TRB                      = $a8 ; trb
=$a9					TKW_JSR                      = $a9 ; jsr
=$aa					TKW_JMP                      = $aa ; jmp
=$ab					TKW_BPL                      = $ab ; bpl
=$ac					TKW_BMI                      = $ac ; bmi
=$ad					TKW_BVC                      = $ad ; bvc
=$ae					TKW_BVS                      = $ae ; bvs
=$af					TKW_BCC                      = $af ; bcc
=$b0					TKW_BCS                      = $b0 ; bcs
=$b1					TKW_BNE                      = $b1 ; bne
=$b2					TKW_BEQ                      = $b2 ; beq
=$b3					TKW_BRA                      = $b3 ; bra
=$b4					TKW_BRK                      = $b4 ; brk
=$b5					TKW_PHP                      = $b5 ; php
=$b6					TKW_CLC                      = $b6 ; clc
=$b7					TKW_PLP                      = $b7 ; plp
=$b8					TKW_SEC                      = $b8 ; sec
=$b9					TKW_RTI                      = $b9 ; rti
=$ba					TKW_PHA                      = $ba ; pha
=$bb					TKW_CLI                      = $bb ; cli
=$bc					TKW_PHY                      = $bc ; phy
=$bd					TKW_RTS                      = $bd ; rts
=$be					TKW_PLA                      = $be ; pla
=$bf					TKW_SEI                      = $bf ; sei
=$c0					TKW_PLY                      = $c0 ; ply
=$c1					TKW_DEY                      = $c1 ; dey
=$c2					TKW_TXA                      = $c2 ; txa
=$c3					TKW_TYA                      = $c3 ; tya
=$c4					TKW_TXS                      = $c4 ; txs
=$c5					TKW_TAY                      = $c5 ; tay
=$c6					TKW_TAX                      = $c6 ; tax
=$c7					TKW_CLV                      = $c7 ; clv
=$c8					TKW_TSX                      = $c8 ; tsx
=$c9					TKW_INY                      = $c9 ; iny
=$ca					TKW_DEX                      = $ca ; dex
=$cb					TKW_CLD                      = $cb ; cld
=$cc					TKW_PHX                      = $cc ; phx
=$cd					TKW_INX                      = $cd ; inx
=$ce					TKW_NOP                      = $ce ; nop
=$cf					TKW_SED                      = $cf ; sed
=$d0					TKW_PLX                      = $d0 ; plx
=$86					TKW_VPOKE                    = $86 ; vpoke
=$87					TKW_VDOKE                    = $87 ; vdoke
=$88					TKW_VLOAD                    = $88 ; vload
=$86					TKW_VPEEKLPAREN              = $86 ; vpeek(
=$87					TKW_VDEEKLPAREN              = $87 ; vdeek(

;******  Return to file: header/03data.inc

=$3a					TYPE_INT =		($3A) 						; type bytes that end identifier.
=$3b					TYPE_INTARRAY =	($3B)
=$3c					TYPE_STR =		($3C)
=$3d					TYPE_STRARRAY =	($3D)
=$3e					TYPE_FLOAT =	($3E)
=$3f					TYPE_FLOATARRAY=($3F)

;******  Return to file: basic.asm


;******  Processing file: header/header.inc


;******  Return to file: basic.asm


;******  Processing file: assembler/assembler.inc


;******  Return to file: basic.asm


;******  Processing file: device/device.inc


;******  Return to file: basic.asm


;******  Processing file: error/error.inc


;******  Return to file: basic.asm


;******  Processing file: error/errorhandler.inc


;******  Processing file: error/../generated/errorid.inc

=1					ErrorID_Missing = 1 ; Feature not Present
=2					ErrorID_Syntax = 2 ; Syntax Error
=3					ErrorID_NoModule = 3 ; Module disabled
=4					ErrorID_Assert = 4 ; Assertion failed
=5					ErrorID_DivZero = 5 ; Divide By Zero
=6					ErrorID_Stop = 6 ; Stop
=7					ErrorID_BadType = 7 ; Type Mismatch
=8					ErrorID_BadValue = 8 ; Illegal Value
=9					ErrorID_MissingRP = 9 ; Missing right bracket
=10					ErrorID_MissingComma = 10 ; Missing comma
=11					ErrorID_NoReference = 11 ; Missing reference
=12					ErrorID_LineNumber = 12 ; Line Number not found
=13					ErrorID_StrLen = 13 ; String too long
=14					ErrorID_ReturnErr = 14 ; RETURN without GOSUB
=15					ErrorID_UntilErr = 15 ; UNTIL without REPEAT
=16					ErrorID_NextErr = 16 ; NEXT without FOR
=17					ErrorID_WendErr = 17 ; WEND without WHILE
=18					ErrorID_endprocErr = 18 ; ENDPROC without PROC
=19					ErrorID_BadIndex = 19 ; Bad NEXT index
=20					ErrorID_Struct = 20 ; Structures nested wrong
=21					ErrorID_NoAuto = 21 ; Cannot create variable
=22					ErrorID_RetStack = 22 ; Return stack out of space
=23					ErrorID_NoProc = 23 ; Unknown Procedure
=24					ErrorID_Params = 24 ; Parameters do not match
=25					ErrorID_DupArray = 25 ; Array already defined
=26					ErrorID_NotArray = 26 ; DIM requires array
=27					ErrorID_ArrayIndex = 27 ; Bad array index
=28					ErrorID_DataError = 28 ; Out of data
=29					ErrorID_Tokenise = 29 ; Cannot tokenise line
=30					ErrorID_Save = 30 ; Save failed
=31					ErrorID_Load = 31 ; Load failed
=32					ErrorID_Break = 32 ; Break
=33					ErrorID_Memory = 33 ; Out of memory
=34					ErrorID_NumStack = 34 ; Expression too complex

;******  Return to file: error/errorhandler.inc


;******  Return to file: basic.asm


;******  Processing file: extension/extension.inc


;******  Return to file: basic.asm


;******  Processing file: floatingpoint/float.inc

=5					FloatEmbeddedSize = 5

;******  Return to file: basic.asm


;******  Processing file: floatingpoint/floatingpoint.inc


;******  Return to file: basic.asm


;******  Processing file: interaction/interaction.inc


;******  Return to file: basic.asm


;******  Processing file: main/main.inc


;******  Return to file: basic.asm


;******  Processing file: string/memory.inc

=252					MaxStringSize = 252

;******  Return to file: basic.asm


;******  Processing file: string/string.inc


;******  Return to file: basic.asm


;******  Processing file: tokeniser/detokenise/colouring.inc

=$84					LTYLineNumber = $84
=$82					LTYPunctuation = $82
=$87					LTYIdentifier = $87
=$86					LTYConstant = $86
=$83					LTYKeyword = $83
=$81					LTYString = $81

;******  Return to file: basic.asm


;******  Processing file: tokeniser/tokeniser.inc


;******  Return to file: basic.asm


;******  Processing file: variable/variable.inc


;******  Return to file: basic.asm


;******  Processing file: footer/footer.inc


;******  Return to file: basic.asm

.1000					section_start_header:

;******  Processing file: header/header.asm


;******  Processing file: header/00start.asm

.1000					Start:
.1000	4c 0a 10	jmp $100a			jmp 	GoColdStart 				; +0 	boot BASIC
.1003	4c 28 10	jmp $1028			jmp 	GoTokTest					; +3 	run tokeniser test code.
>1006	45 35						.word 	TokenTableAddress
.1008							else
>1008	00 00						.word 	0
.100a					GoColdStart:
.100a	a9 00		lda #$00			lda 	#(programMemory) & $FF
.100c	8d c8 0a	sta $0ac8			sta 	basePage
.100f	a9 3c		lda #$3c			lda 	#(programMemory) >> 8
.1011	8d c9 0a	sta $0ac9			sta 	1+(basePage)
.1014	a9 00		lda #$00			lda 	#(endOfMemory) & $FF
.1016	8d cc 0a	sta $0acc			sta 	endMemory
.1019	a9 9f		lda #$9f			lda 	#(endOfMemory) >> 8
.101b	8d cd 0a	sta $0acd			sta 	1+(endMemory)
.101e	a2 06		ldx #$06		ldx	#6
.1020	20 64 11	jsr $1164		jsr	deviceHandler
.1023	a2 00		ldx #$00		ldx	#0
.1025	20 62 17	jsr $1762		jsr	interactionHandler
.1028					GoTokTest:
.1028	a2 04		ldx #$04		ldx	#4
.102a	20 73 38	jsr $3873		jsr	tokeniserHandler

;******  Return to file: header/header.asm


;******  Return to file: basic.asm

.102d					section_end_header:
.102d					section_start_assembler:

;******  Processing file: assembler/assembler.asm

.102d					assemblerHandler:
.102d	7c 30 10	jmp ($1030,x)			jmp 	(assemblerVectors,x)
.1030					assemblerVectors:

;******  Return to file: basic.asm

.1030					section_end_assembler:
.1030					section_start_device:

;******  Processing file: device/device.asm


;******  Processing file: device/option_x16/x16break.asm

.1030					X16Break:
.1030	20 e1 ff	jsr $ffe1			jsr 	$FFE1
.1033	f0 01		beq $1036			beq 	_IsBreak
.1035	60		rts				rts
.1036					_IsBreak:
.1036	a2 20		ldx #$20			ldx 	#ErrorID_Break
.1038	20 85 11	jsr $1185		jsr	errorHandler

;******  Return to file: device/device.asm


;******  Processing file: device/option_x16/x16file.asm

.103b					ExternSave:
.103b	98		tya				tya
.103c	48		pha				pha
.103d	20 8b 10	jsr $108b			jsr 	ExternGetLength 			; get length of file into A name YX
.1040	20 bd ff	jsr $ffbd			jsr 	$FFBD 						; set name
.1043	a9 01		lda #$01			lda 	#1
.1045	a2 08		ldx #$08			ldx 	#8	 						; device #8
.1047	a0 00		ldy #$00			ldy 	#0
.1049	20 ba ff	jsr $ffba			jsr 	$FFBA 						; set LFS
.104c	a5 49		lda $49				lda 	esInt0+1 					; copy start of save address to temp0
.104e	85 2a		sta $2a				sta 	temp0
.1050	a5 51		lda $51				lda 	esInt1+1
.1052	85 2b		sta $2b				sta 	temp0+1
.1054	a6 4a		ldx $4a				ldx 	esInt0+2 					; end address
.1056	a4 52		ldy $52				ldy 	esInt1+2
.1058	a9 2a		lda #$2a			lda 	#temp0 						; ref to start address
.105a	20 d8 ff	jsr $ffd8			jsr 	$FFD8 						; save
.105d	b0 03		bcs $1062			bcs 	_ESSave
.105f	68		pla				pla
.1060	a8		tay				tay
.1061	60		rts				rts
.1062					_ESSave:
.1062	a2 1e		ldx #$1e			ldx 	#ErrorID_Save
.1064	20 85 11	jsr $1185		jsr	errorHandler
.1067					ExternLoad:
.1067	98		tya				tya
.1068	48		pha				pha
.1069	20 8b 10	jsr $108b			jsr 	ExternGetLength 			; get length of file into A name YX
.106c	20 bd ff	jsr $ffbd			jsr 	$FFBD 						; set name
.106f	a9 01		lda #$01			lda 	#1
.1071	a2 08		ldx #$08			ldx 	#8	 						; device #8
.1073	a0 00		ldy #$00			ldy 	#0
.1075	20 ba ff	jsr $ffba			jsr 	$FFBA 						; set LFS
.1078	a6 49		ldx $49				ldx 	esInt0+1 					; load address
.107a	a4 51		ldy $51				ldy 	esInt1+1
.107c	a9 00		lda #$00			lda 	#0 							; load command
.107e	20 d5 ff	jsr $ffd5			jsr 	$FFD5
.1081	b0 03		bcs $1086			bcs 	_ESLoad
.1083	68		pla				pla
.1084	a8		tay				tay
.1085	60		rts				rts
.1086					_ESLoad:
.1086	a2 1f		ldx #$1f			ldx 	#ErrorID_Load
.1088	20 85 11	jsr $1185		jsr	errorHandler
.108b					ExternGetLength:
.108b	a5 48		lda $48				lda 	esInt0 						; length into A.
.108d	85 2a		sta $2a				sta 	temp0
.108f	a5 50		lda $50				lda 	esInt1
.1091	85 2b		sta $2b				sta 	temp0+1
.1093	a0 00		ldy #$00			ldy 	#0
.1095	b1 2a		lda ($2a),y			lda 	(temp0),y
.1097	a6 48		ldx $48				ldx 	esInt0 						; name into YX
.1099	a4 50		ldy $50				ldy 	esInt1
.109b	e8		inx				inx 								; advance over the length pointer.
.109c	d0 01		bne $109f			bne 	_ESNoCarry
.109e	c8		iny				iny
.109f					_ESNoCarry:
.109f	60		rts				rts

;******  Return to file: device/device.asm


;******  Processing file: device/option_x16/x16io.asm

=240					MaxLineInputSize = 240
.0af2					bufferCount:
>0af2							.fill 	0
.0af2					bufferStorage:
>0af2							.fill 	MaxLineInputSize
.10a0					IOInitialise:
.10a0	a9 0f		lda #$0f			lda 	#15 						; switch to upper/lower case mode
.10a2	20 cb 10	jsr $10cb			jsr 	IOPrintChar
.10a5	a9 02		lda #$02			lda 	#2 							; green on black and clear screen
.10a7	20 f7 10	jsr $10f7			jsr 	IOInk
.10aa	a9 00		lda #$00			lda 	#0
.10ac	20 0b 11	jsr $110b			jsr 	IOPaper
.10af	20 b3 10	jsr $10b3			jsr 	IOClearScreen
.10b2	60		rts				rts
.10b3					IOClearScreen:
.10b3	48		pha				pha
.10b4	a9 93		lda #$93			lda	 	#147 						; char code $93 clears screen
.10b6	20 cb 10	jsr $10cb			jsr 	IOPrintChar
.10b9	68		pla				pla
.10ba	60		rts				rts
.10bb					IONewLine:
.10bb	48		pha				pha
.10bc	a9 0d		lda #$0d			lda 	#13
.10be	20 cb 10	jsr $10cb			jsr 	IOPrintChar
.10c1	68		pla				pla
.10c2	60		rts				rts
.10c3					IOTab:
.10c3	48		pha				pha
.10c4	a9 20		lda #$20			lda 	#32
.10c6	20 cb 10	jsr $10cb			jsr 	IOPrintChar
.10c9	68		pla				pla
.10ca	60		rts				rts
.10cb					IOPrintAscii:
.10cb					IOPrintChar:
.10cb	aa		tax				tax 								; save in X so we can save Y
.10cc	5a		phy				phy
.10cd	8a		txa				txa
.10ce	c9 08		cmp #$08			cmp 	#8 							; make BS (8) onto CHR$(14) which is the
.10d0	d0 02		bne $10d4			bne 	_IOPCNotBS 					; Commodore/X16 backspace code.
.10d2	a9 14		lda #$14			lda 	#$14
.10d4					_IOPCNotBS:
.10d4	20 d2 ff	jsr $ffd2			jsr 	$FFD2 						; CBM OS Call.
.10d7	7a		ply				ply
.10d8	60		rts				rts
.10d9					IOInkey:
.10d9	98		tya				tya
.10da	48		pha				pha
.10db	20 e4 ff	jsr $ffe4			jsr 	$FFE4
.10de	85 32		sta $32				sta 	tempShort
.10e0	68		pla				pla
.10e1	a8		tay				tay
.10e2	a5 32		lda $32				lda 	tempShort					; no key pressed.
.10e4	f0 10		beq $10f6			beq 	_IOIExit
.10e6	c9 0d		cmp #$0d			cmp 	#13 						; allow CR (13)
.10e8	f0 0c		beq $10f6			beq 	_IOIExit
.10ea	c9 14		cmp #$14			cmp 	#$14 						; backspace code ($14) returns 8.
.10ec	f0 06		beq $10f4			beq 	_IOIBackspace
.10ee	c9 20		cmp #$20			cmp 	#32 						; no other control allowed.
.10f0	90 e7		bcc $10d9			bcc 	IOInkey
.10f2	b0 02		bcs $10f6			bcs 	_IOIExit
.10f4					_IOIBackspace:
.10f4	a9 08		lda #$08			lda 	#8 							; return chr(8)
.10f6					_IOIExit:
.10f6	60		rts				rts
.10f7					IOInk:
.10f7	48		pha				pha
.10f8	29 07		and #$07			and 	#7 							; 8 primaries
.10fa	aa		tax				tax
.10fb	bd 03 11	lda $1103,x			lda 	_IOColourTable,x 			; look up CBM code and print it.
.10fe	20 cb 10	jsr $10cb			jsr 	IOPrintChar
.1101	68		pla				pla
.1102	60		rts				rts
.1103					_IOColourTable:
>1103	90						.byte 	$90 					; 0 Black
>1104	96						.byte 	$96 					; 1 Red
>1105	1e						.byte 	$1E 					; 2 Green
>1106	9e						.byte 	$9E 					; 3 Yellow
>1107	9a						.byte 	$9A 					; 4 Blue
>1108	9c						.byte 	$9C 					; 5 Magenta
>1109	9f						.byte 	$9F 					; 6 Cyan
>110a	05						.byte 	$05 					; 7 White
.110b					IOPaper:
.110b	48		pha				pha
.110c	48		pha				pha
.110d	a9 01		lda #$01			lda 	#1 						; 1 swaps fgr/bgr, so we swap them, set fgr
.110f	20 cb 10	jsr $10cb			jsr 	IOPrintChar 			; and then swap them again.
.1112	68		pla				pla
.1113	20 f7 10	jsr $10f7			jsr 	IOInk
.1116	a9 01		lda #$01			lda 	#1
.1118	20 cb 10	jsr $10cb			jsr 	IOPrintChar
.111b	68		pla				pla
.111c	60		rts				rts
.111d					IOLocate:
.111d	48		pha				pha
.111e	a9 13		lda #$13			lda 	#$13 					; home cursor code
.1120	20 cb 10	jsr $10cb			jsr 	IOPrintChar
.1123	a9 11		lda #$11			lda 	#$11 	 				; print Y x $11 (down)
.1125	20 2c 11	jsr $112c			jsr 	_IOLoc2
.1128	68		pla				pla
.1129	a8		tay				tay
.112a	a9 1d		lda #$1d			lda 	#$1D 					; print Y x $1D (right)
.112c					_IOLoc2:
.112c	c0 00		cpy #$00			cpy 	#0
.112e	f0 06		beq $1136			beq 	_IOLocExit
.1130	20 cb 10	jsr $10cb			jsr 	IOPrintChar
.1133	88		dey				dey
.1134	d0 f6		bne $112c			bne 	_IOLoc2
.1136					_IOLocExit:
.1136	60		rts				rts
.1137					IOInput:
.1137	a9 00		lda #$00			lda 	#0
.1139	8d f2 0a	sta $0af2			sta 	bufferCount
.113c					_IOILoop:
.113c	20 cf ff	jsr $ffcf			jsr 	$FFCF
.113f	c9 0d		cmp #$0d			cmp 	#13
.1141	f0 10		beq $1153			beq 	_IOIExit
.1143	ae f2 0a	ldx $0af2			ldx 	bufferCount
.1146	e0 f0		cpx #$f0			cpx 	#MaxLineInputSize
.1148	f0 f2		beq $113c			beq 	_IOILoop
.114a	ee f2 0a	inc $0af2			inc 	bufferCount
.114d	9d f3 0a	sta $0af3,x			sta 	bufferStorage+1,x
.1150	4c 3c 11	jmp $113c			jmp 	_IOILoop
.1153					_IOIExit:
.1153	a9 f2		lda #$f2			lda 	#(bufferCount) & $FF
.1155	85 2a		sta $2a				sta 	temp0
.1157	a9 0a		lda #$0a			lda 	#(bufferCount) >> 8
.1159	85 2b		sta $2b				sta 	1+(temp0)
.115b	60		rts				rts

;******  Return to file: device/device.asm


;******  Processing file: device/option_x16/x16timer.asm

.115c					IOReadTimer:
.115c	20 de ff	jsr $ffde			jsr 	$FFDE 						; reads timer into YXA so we want only YA
.115f	48		pha				pha
.1160	8a		txa				txa
.1161	a8		tay				tay
.1162	68		pla				pla
.1163	60		rts				rts

;******  Return to file: device/device.asm

.1164					deviceHandler:
.1164	7c 67 11	jmp ($1167,x)			jmp 	(deviceVectors,x)
.1167					deviceVectors:
>1167	30 10					.word X16Break             ; index 0
>1169	b3 10					.word IOClearScreen        ; index 2
>116b	bb 10					.word IONewLine            ; index 4
>116d	a0 10					.word IOInitialise         ; index 6
>116f	f7 10					.word IOInk                ; index 8
>1171	d9 10					.word IOInkey              ; index 10
>1173	37 11					.word IOInput              ; index 12
>1175	67 10					.word ExternLoad           ; index 14
>1177	1d 11					.word IOLocate             ; index 16
>1179	0b 11					.word IOPaper              ; index 18
>117b	cb 10					.word IOPrintChar          ; index 20
>117d	cb 10					.word IOPrintAscii         ; index 22
>117f	3b 10					.word ExternSave           ; index 24
>1181	c3 10					.word IOTab                ; index 26
>1183	5c 11					.word IOReadTimer          ; index 28

;******  Return to file: basic.asm

.1185					section_end_device:
.1185					section_start_error:

;******  Processing file: error/error.asm


;******  Processing file: error/errorhandler.asm

.1185					ErrorHandler:
.1185	8a		txa				txa
.1186	48		pha				pha
.1187	a9 01		lda #$01			lda 	#1 							; red
.1189	a2 08		ldx #$08		ldx	#8
.118b	20 64 11	jsr $1164		jsr	deviceHandler
.118e	68		pla				pla
.118f	aa		tax				tax
.1190	a9 fb		lda #$fb			lda 	#(ErrorTextList) & $FF
.1192	85 2a		sta $2a				sta 	temp0
.1194	a9 11		lda #$11			lda 	#(ErrorTextList) >> 8
.1196	85 2b		sta $2b				sta 	1+(temp0)
.1198	ca		dex		_EHFind:dex									; errors start at 1
.1199	f0 10		beq $11ab			beq 	_EHFound
.119b	a0 00		ldy #$00			ldy 	#0 							; goto next text message, add length + 1 to the pointer.
.119d	38		sec				sec
.119e	a5 2a		lda $2a				lda 	temp0
.11a0	71 2a		adc ($2a),y			adc 	(temp0),y
.11a2	85 2a		sta $2a				sta 	temp0
.11a4	90 f2		bcc $1198			bcc 	_EHFind
.11a6	e6 2b		inc $2b				inc 	temp0+1
.11a8	4c 98 11	jmp $1198			jmp 	_EHFind
.11ab					_EHFound:
.11ab	20 4c 14	jsr $144c			jsr 	EHPrintAscii 				; print the string "temp0" now points to.
.11ae	a0 00		ldy #$00			ldy 	#0 							; in a line, e.g. the offset to next is non zero.
.11b0	b1 28		lda ($28),y			lda 	(codePtr),y
.11b2	f0 39		beq $11ed			beq 	_EHNoLine
.11b4	a5 29		lda $29				lda 	codePtr+1 					; code running from the command line.
.11b6	cd c9 0a	cmp $0ac9			cmp 	basePage+1
.11b9	90 32		bcc $11ed			bcc 	_EHNoLine
.11bb	a9 f7		lda #$f7			lda 	#(EHAtMsg) & $FF
.11bd	85 2a		sta $2a				sta 	temp0
.11bf	a9 11		lda #$11			lda 	#(EHAtMsg) >> 8
.11c1	85 2b		sta $2b				sta 	1+(temp0)
.11c3	20 4c 14	jsr $144c			jsr 	EHPrintAscii
.11c6	a0 01		ldy #$01			ldy 	#1 							; set up line number in TOS
.11c8	a2 00		ldx #$00			ldx 	#0
.11ca	b1 28		lda ($28),y			lda 	(codePtr),y
.11cc	95 48		sta $48,x			sta 	esInt0,x
.11ce	c8		iny				iny
.11cf	b1 28		lda ($28),y			lda 	(codePtr),y
.11d1	95 50		sta $50,x			sta 	esInt1,x
.11d3	a9 00		lda #$00			lda 	#0
.11d5	95 58		sta $58,x			sta 	esInt2,x
.11d7	95 60		sta $60,x			sta 	esInt3,x
.11d9	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.11db	85 2a		sta $2a				sta 	temp0
.11dd	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.11df	85 2b		sta $2b				sta 	1+(temp0)
.11e1	a0 0a		ldy #$0a			ldy 	#10 						; in base 10.
.11e3	a9 00		lda #$00			lda 	#0							; stack position zero.
.11e5	a2 0c		ldx #$0c		ldx	#12
.11e7	20 cc 2d	jsr $2dcc		jsr	mainHandler
.11ea	20 4c 14	jsr $144c			jsr 	EHPrintAscii
.11ed					_EHNoLine:
.11ed	a2 04		ldx #$04		ldx	#4
.11ef	20 64 11	jsr $1164		jsr	deviceHandler
.11f2	a2 02		ldx #$02		ldx	#2
.11f4	20 62 17	jsr $1762		jsr	interactionHandler
.11f7					EHAtMsg:
>11f7	03 20 40 20					.text 	3," @ "

;******  Processing file: error/../generated/errortext.inc

.11fb					ErrorTextList:
>11fb	13 46 65 61 74 75 72 65			.text 19,"Feature not Present"
>1203	20 6e 6f 74 20 50 72 65 73 65 6e 74
>120f	0c 53 79 6e 74 61 78 20			.text 12,"Syntax Error"
>1217	45 72 72 6f 72
>121c	0f 4d 6f 64 75 6c 65 20			.text 15,"Module disabled"
>1224	64 69 73 61 62 6c 65 64
>122c	10 41 73 73 65 72 74 69			.text 16,"Assertion failed"
>1234	6f 6e 20 66 61 69 6c 65 64
>123d	0e 44 69 76 69 64 65 20			.text 14,"Divide By Zero"
>1245	42 79 20 5a 65 72 6f
>124c	04 53 74 6f 70				.text 4,"Stop"
>1251	0d 54 79 70 65 20 4d 69			.text 13,"Type Mismatch"
>1259	73 6d 61 74 63 68
>125f	0d 49 6c 6c 65 67 61 6c			.text 13,"Illegal Value"
>1267	20 56 61 6c 75 65
>126d	15 4d 69 73 73 69 6e 67			.text 21,"Missing right bracket"
>1275	20 72 69 67 68 74 20 62 72 61 63 6b 65 74
>1283	0d 4d 69 73 73 69 6e 67			.text 13,"Missing comma"
>128b	20 63 6f 6d 6d 61
>1291	11 4d 69 73 73 69 6e 67			.text 17,"Missing reference"
>1299	20 72 65 66 65 72 65 6e 63 65
>12a3	15 4c 69 6e 65 20 4e 75			.text 21,"Line Number not found"
>12ab	6d 62 65 72 20 6e 6f 74 20 66 6f 75 6e 64
>12b9	0f 53 74 72 69 6e 67 20			.text 15,"String too long"
>12c1	74 6f 6f 20 6c 6f 6e 67
>12c9	14 52 45 54 55 52 4e 20			.text 20,"RETURN without GOSUB"
>12d1	77 69 74 68 6f 75 74 20 47 4f 53 55 42
>12de	14 55 4e 54 49 4c 20 77			.text 20,"UNTIL without REPEAT"
>12e6	69 74 68 6f 75 74 20 52 45 50 45 41 54
>12f3	10 4e 45 58 54 20 77 69			.text 16,"NEXT without FOR"
>12fb	74 68 6f 75 74 20 46 4f 52
>1304	12 57 45 4e 44 20 77 69			.text 18,"WEND without WHILE"
>130c	74 68 6f 75 74 20 57 48 49 4c 45
>1317	14 45 4e 44 50 52 4f 43			.text 20,"ENDPROC without PROC"
>131f	20 77 69 74 68 6f 75 74 20 50 52 4f 43
>132c	0e 42 61 64 20 4e 45 58			.text 14,"Bad NEXT index"
>1334	54 20 69 6e 64 65 78
>133b	17 53 74 72 75 63 74 75			.text 23,"Structures nested wrong"
>1343	72 65 73 20 6e 65 73 74 65 64 20 77 72 6f 6e 67
>1353	16 43 61 6e 6e 6f 74 20			.text 22,"Cannot create variable"
>135b	63 72 65 61 74 65 20 76 61 72 69 61 62 6c 65
>136a	19 52 65 74 75 72 6e 20			.text 25,"Return stack out of space"
>1372	73 74 61 63 6b 20 6f 75 74 20 6f 66 20 73 70 61
>1382	63 65
>1384	11 55 6e 6b 6e 6f 77 6e			.text 17,"Unknown Procedure"
>138c	20 50 72 6f 63 65 64 75 72 65
>1396	17 50 61 72 61 6d 65 74			.text 23,"Parameters do not match"
>139e	65 72 73 20 64 6f 20 6e 6f 74 20 6d 61 74 63 68
>13ae	15 41 72 72 61 79 20 61			.text 21,"Array already defined"
>13b6	6c 72 65 61 64 79 20 64 65 66 69 6e 65 64
>13c4	12 44 49 4d 20 72 65 71			.text 18,"DIM requires array"
>13cc	75 69 72 65 73 20 61 72 72 61 79
>13d7	0f 42 61 64 20 61 72 72			.text 15,"Bad array index"
>13df	61 79 20 69 6e 64 65 78
>13e7	0b 4f 75 74 20 6f 66 20			.text 11,"Out of data"
>13ef	64 61 74 61
>13f3	14 43 61 6e 6e 6f 74 20			.text 20,"Cannot tokenise line"
>13fb	74 6f 6b 65 6e 69 73 65 20 6c 69 6e 65
>1408	0b 53 61 76 65 20 66 61			.text 11,"Save failed"
>1410	69 6c 65 64
>1414	0b 4c 6f 61 64 20 66 61			.text 11,"Load failed"
>141c	69 6c 65 64
>1420	05 42 72 65 61 6b			.text 5,"Break"
>1426	0d 4f 75 74 20 6f 66 20			.text 13,"Out of memory"
>142e	6d 65 6d 6f 72 79
>1434	16 45 78 70 72 65 73 73			.text 22,"Expression too complex"
>143c	69 6f 6e 20 74 6f 6f 20 63 6f 6d 70 6c 65 78
>144b	00					.byte 0

;******  Return to file: error/errorhandler.asm

.144c					EHPrintAscii:
.144c	a0 00		ldy #$00			ldy 	#0
.144e	b1 2a		lda ($2a),y			lda 	(temp0),y
.1450	aa		tax				tax
.1451	f0 0f		beq $1462			beq 	_EHPExit
.1453					_EHPLoop:
.1453	c8		iny				iny
.1454	8a		txa				txa
.1455	48		pha				pha
.1456	b1 2a		lda ($2a),y			lda 	(temp0),y
.1458	a2 16		ldx #$16		ldx	#22
.145a	20 64 11	jsr $1164		jsr	deviceHandler
.145d	68		pla				pla
.145e	aa		tax				tax
.145f	ca		dex				dex
.1460	d0 f1		bne $1453			bne 	_EHPLoop
.1462					_EHPExit:
.1462	60		rts				rts

;******  Return to file: error/error.asm


;******  Return to file: basic.asm

.1463					section_end_error:
.1463					section_start_extension:

;******  Processing file: extension/extension.asm


;******  Processing file: extension/extensionhandler.asm

.1463					ExtensionHandler:
.1463	c9 ff		cmp #$ff			cmp 	#$FF						; A = $FF command, otherwise unary function stack level.
.1465	d0 08		bne $146f			bne 	_ExtensionUnary 			; is passed in A.
.1467	b1 28		lda ($28),y			lda 	(codePtr),y 				; so this is a command, using Group 2.
.1469	c8		iny				iny
.146a	0a		asl a				asl 	a
.146b	aa		tax				tax
.146c	7c 6d 14	jmp ($146d,x)			jmp 	(Group2Vectors-12,x)
.146f					_ExtensionUnary:
.146f	48		pha				pha 								; save stack pos in A
.1470	b1 28		lda ($28),y			lda 	(codePtr),y 				; get shifted token, double into X
.1472	c8		iny				iny
.1473	0a		asl a				asl 	a
.1474	aa		tax				tax
.1475	68		pla				pla 								; restore stack pos and call group3 command.
.1476	7c 73 14	jmp ($1473,x)			jmp 	(Group3Vectors-12,X)

;******  Processing file: extension/../generated/tokenvectors2.inc

.1479					Group2Vectors:
>1479	ae 14					.word	Command_VPoke            ; $86 vpoke
>147b	b1 14					.word	Command_VDoke            ; $87 vdoke
>147d	8b 14					.word	Command_VLoad            ; $88 vload

;******  Return to file: extension/extensionhandler.asm


;******  Processing file: extension/../generated/tokenvectors3.inc

.147f					Group3Vectors:
>147f	f2 14					.word	Command_VPeek            ; $86 vpeek(
>1481	f5 14					.word	Command_VDeek            ; $87 vdeek(

;******  Return to file: extension/extensionhandler.asm

.1483					XEvaluateInteger:
.1483	8a		txa				txa
.1484	a2 06		ldx #$06		ldx	#6
.1486	20 cc 2d	jsr $2dcc		jsr	mainHandler
.1489	aa		tax				tax
.148a	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/vload.asm

.148b					Command_VLoad:
.148b	a2 00		ldx #$00			ldx 	#0 								; string which is the file name
.148d	20 c6 26	jsr $26c6			jsr 	EvaluateString
.1490	e8		inx				inx
.1491	20 62 2c	jsr $2c62			jsr 	MInt32False
.1494	a5 35		lda $35				lda 	lowMemory 						; load it into lowMemory (for now ?)
.1496	95 48		sta $48,x			sta 	esInt0,x
.1498	a5 36		lda $36				lda 	lowMemory+1
.149a	95 50		sta $50,x			sta 	esInt1,x
.149c	ca		dex				dex
.149d	a2 0e		ldx #$0e		ldx	#14
.149f	20 64 11	jsr $1164		jsr	deviceHandler
.14a2	a5 49		lda $49				lda 	esInt0+1 						; (temp0) is where we are decoding from.
.14a4	85 2a		sta $2a				sta 	temp0
.14a6	a5 51		lda $51				lda 	esInt1+1
.14a8	85 2b		sta $2b				sta 	temp0+1
.14aa	20 13 15	jsr $1513			jsr 	LoadVRAMFile 					; load the VRAM file in.
.14ad	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/vpeekpoke.asm

.14ae					Command_VPoke:
.14ae	38		sec				sec 						; one byte , CS
.14af	b0 01		bcs $14b2			bcs 	CmdVideoWrite
.14b1					Command_VDoke:
.14b1	18		clc				clc 						; two bytes, CC
.14b2					CmdVideoWrite:
.14b2	08		php				php 						; save one or two btes
.14b3	a2 00		ldx #$00			ldx 	#0  				; get address and value into levels 0,1
.14b5	20 83 14	jsr $1483			jsr 	XEvaluateInteger
.14b8	20 e2 2c	jsr $2ce2			jsr 	CheckComma
.14bb	e8		inx				inx
.14bc	20 83 14	jsr $1483			jsr 	XEvaluateInteger
.14bf	ca		dex				dex
.14c0	20 d1 14	jsr $14d1			jsr 	SetUpTOSVRamAddress ; copy target address to VRAM address registers
.14c3	a5 49		lda $49				lda 	esInt0+1 			; get MSB of write value
.14c5	8d 23 9f	sta $9f23			sta 	$9F23
.14c8	28		plp				plp 						; if it was Poke then exit
.14c9	b0 05		bcs $14d0			bcs 	_CVWExit
.14cb	a5 51		lda $51				lda 	esInt1+1 			; doke, write the MSB.
.14cd	8d 23 9f	sta $9f23			sta 	$9F23
.14d0					_CVWExit:
.14d0	60		rts				rts
.14d1					SetUpTOSVRamAddress:
.14d1	b5 58		lda $58,x			lda 	esInt2,x 			; check range of address, data to $FFFF
.14d3	29 01		and #$01			and 	#1
.14d5	15 60		ora $60,x			ora 	esInt3,x
.14d7	d0 14		bne $14ed			bne 	CVWValue
.14d9	b5 48		lda $48,x			lda 	esInt0,x			; set address up
.14db	8d 20 9f	sta $9f20			sta 	$9F20
.14de	b5 50		lda $50,x			lda 	esInt1,x
.14e0	8d 21 9f	sta $9f21			sta	 	$9F21
.14e3	b5 58		lda $58,x			lda 	esInt2,x
.14e5	29 01		and #$01			and 	#1
.14e7	09 10		ora #$10			ora 	#$10 				; step 1.
.14e9	8d 22 9f	sta $9f22			sta 	$9F22
.14ec	60		rts				rts
.14ed					CVWValue:
.14ed	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.14ef	20 85 11	jsr $1185		jsr	errorHandler
.14f2					Command_VPeek:
.14f2	38		sec				sec 						; one byte , CS
.14f3	b0 01		bcs $14f6			bcs 	CmdVideoRead
.14f5					Command_VDeek:
.14f5	18		clc				clc 						; two bytes, CC
.14f6					CmdVideoRead:
.14f6	08		php				php 						; save action on stack.
.14f7	aa		tax				tax 						; save stack position
.14f8	20 83 14	jsr $1483			jsr 	XEvaluateInteger 	; address
.14fb	20 d5 2c	jsr $2cd5			jsr 	CheckRightParen 	; closing right bracket.
.14fe	20 d1 14	jsr $14d1			jsr 	SetUpTOSVRamAddress	; set up VRAM address.
.1501	20 62 2c	jsr $2c62			jsr 	MInt32False 		; zero return.
.1504	ad 23 9f	lda $9f23			lda 	$9F23				; copy 1st byte
.1507	95 48		sta $48,x			sta 	esInt0,x
.1509	28		plp				plp 						; check if DOKE (carry was clear)
.150a	b0 05		bcs $1511			bcs 	_CVRExit
.150c	ad 23 9f	lda $9f23			lda 	$9F23 				; copy 2nd byte
.150f	95 50		sta $50,x			sta 	esInt1,x
.1511					_CVRExit:
.1511	8a		txa				txa 						; return X position.
.1512	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/vramprocess.asm

.0be2					compressMode:
>0be2							.fill 	1
.1513					LoadVRAMFile:
.1513	a9 00		lda #$00			lda 	#0 							; defaults
.1515	8d 20 9f	sta $9f20			sta 	$9F20
.1518	8d 21 9f	sta $9f21			sta 	$9F21
.151b	8d e2 0b	sta $0be2			sta 	compressMode
.151e	a9 10		lda #$10			lda 	#$10
.1520	8d 22 9f	sta $9f22			sta 	$9F22
.1523					_LVRLoop:
.1523	20 73 15	jsr $1573			jsr 	LVFGet 						; get the next (never access direct)
.1526	c9 80		cmp #$80			cmp 	#$80 						; exit ?
.1528	f0 3a		beq $1564			beq 	_LVRExit
.152a	b0 39		bcs $1565			bcs 	_LVRLoad 					; load data in ?
.152c	c9 08		cmp #$08			cmp 	#$08 						; is it set address ?
.152e	90 09		bcc $1539			bcc 	_LVRSetAddress
.1530	c9 10		cmp #$10			cmp 	#$10 						; is it set compression type ?
.1532	90 29		bcc $155d			bcc 	_LVRSetCompress
.1534	a2 01		ldx #$01			ldx 	#ErrorID_missing
.1536	20 85 11	jsr $1185		jsr	errorHandler
.1539					_LVRSetAddress:
.1539	85 2d		sta $2d				sta 	temp1+1 					; 24 bit in temp1+1/temp1/A
.153b	20 73 15	jsr $1573			jsr 	LVFGet
.153e	85 2c		sta $2c				sta 	temp1
.1540	a9 00		lda #$00			lda 	#0
.1542	46 2d		lsr $2d				lsr 	temp1+1 					; / 2 twice.
.1544	66 2c		ror $2c				ror 	temp1
.1546	6a		ror a				ror		a
.1547	46 2d		lsr $2d				lsr 	temp1+1
.1549	66 2c		ror $2c				ror 	temp1
.154b	6a		ror a				ror		a
.154c	8d 20 9f	sta $9f20			sta 	$9F20 						; set write address with +1 increment
.154f	a5 2c		lda $2c				lda 	temp1
.1551	8d 21 9f	sta $9f21			sta 	$9F21
.1554	a5 2d		lda $2d				lda 	temp1+1
.1556	09 10		ora #$10			ora 	#$10
.1558	8d 22 9f	sta $9f22			sta 	$9F22
.155b	d0 c6		bne $1523			bne 	_LVRLoop
.155d					_LVRSetCompress:
.155d	29 07		and #$07			and 	#7
.155f	8d e2 0b	sta $0be2			sta 	compressMode
.1562	10 bf		bpl $1523			bpl 	_LVRLoop
.1564					_LVRExit:
.1564	60		rts				rts
.1565					_LVRLoad:
.1565	29 7f		and #$7f			and 	#$7F 						; count in X (is > 0)
.1567	aa		tax				tax
.1568					_LVRLCopy:
.1568	20 73 15	jsr $1573			jsr 	LVFGet 						; write to data.
.156b	8d 23 9f	sta $9f23			sta 	$9F23
.156e	ca		dex				dex
.156f	d0 f7		bne $1568			bne 	_LVRLCopy
.1571	f0 b0		beq $1523			beq 	_LVRLoop
.1573	84 32		sty $32		LVFGet:	sty 	tempShort
.1575	a0 00		ldy #$00			ldy 	#0
.1577	b1 2a		lda ($2a),y			lda 	(temp0),y
.1579	a4 32		ldy $32				ldy	 	tempShort
.157b	e6 2a		inc $2a				inc 	temp0
.157d	d0 02		bne $1581			bne 	_LVFGExit
.157f	e6 2b		inc $2b				inc 	temp0+1
.1581					_LVFGExit:
.1581	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Return to file: basic.asm

.1582					section_end_extension:
.1582					section_start_floatingpoint:

;******  Processing file: floatingpoint/floatingpoint.asm

.1582					floatingpointHandler:
.1582	a2 03		ldx #$03			ldx 	#ErrorID_NoModule
.1584	20 85 11	jsr $1185		jsr	errorHandler

;******  Return to file: basic.asm

.1587					section_end_floatingpoint:
.1587					section_start_interaction:

;******  Processing file: interaction/interaction.asm


;******  Processing file: interaction/cold.asm

.1587					ColdStartEntry:
.1587	a2 ff		ldx #$ff			ldx 	#$FF
.1589	9a		txs				txs
.158a	a2 02		ldx #$02		ldx	#2
.158c	20 64 11	jsr $1164		jsr	deviceHandler
.158f	a0 ff		ldy #$ff			ldy 	#255
.1591					_CSBanner:
.1591	c8		iny				iny
.1592	b9 b8 15	lda $15b8,y			lda 	Intro,y
.1595	f0 14		beq $15ab			beq 	_CSStart
.1597	c9 08		cmp #$08			cmp 	#8
.1599	90 08		bcc $15a3			bcc 	_CSInk
.159b	a2 16		ldx #$16		ldx	#22
.159d	20 64 11	jsr $1164		jsr	deviceHandler
.15a0	4c 91 15	jmp $1591			jmp 	_CSBanner
.15a3					_CSInk:
.15a3	a2 08		ldx #$08		ldx	#8
.15a5	20 64 11	jsr $1164		jsr	deviceHandler
.15a8	4c 91 15	jmp $1591			jmp 	_CSBanner
.15ab					_CSStart:
.15ab	a2 10		ldx #$10		ldx	#16
.15ad	20 cc 2d	jsr $2dcc		jsr	mainHandler
.15b0	a2 02		ldx #$02		ldx	#2
.15b2	20 cc 2d	jsr $2dcc		jsr	mainHandler
.15b5	4c cc 16	jmp $16cc			jmp 	WarmStartEntry
>15b8	06 2a 2a 2a 20 36 35 30		Intro:	.text 	6,"*** 6502 Extended BASIC ***",13,13
>15c0	32 20 45 78 74 65 6e 64 65 64 20 42 41 53 49 43
>15d0	20 2a 2a 2a 0d 0d
>15d6	03 57 72 69 74 74 65 6e				.text 	3,"Written by Paul Robson 2021",13,13
>15de	20 62 79 20 50 61 75 6c 20 52 6f 62 73 6f 6e 20
>15ee	32 30 32 31 0d 0d
>15f4	02 42 61 73 69 63 20				.text 	2,"Basic "
>15fb	30 2e 31 35					.text "0.15"
>15ff	20 28						.text 	" ("
>1601	31 33 2d 4d 61 72 2d 32				.text "13-Mar-21"
>1609	31
>160a	29 0d 0d 00					.text 	")",13,13,0

;******  Return to file: interaction/interaction.asm


;******  Processing file: interaction/delete.asm

.160e					DeleteLine:
.160e	ad c8 0a	lda $0ac8			lda 	basePage 					; copy program base to temp0
.1611	85 2a		sta $2a				sta 	temp0
.1613	ad c9 0a	lda $0ac9			lda 	basePage+1
.1616	85 2b		sta $2b				sta 	temp0+1
.1618	a0 01		ldy #$01	_DLLoop:ldy 	#1 							; see if found line ?
.161a	a5 48		lda $48				lda 	esInt0
.161c	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.161e	d0 07		bne $1627			bne 	_DLNext
.1620	c8		iny				iny
.1621	a5 50		lda $50				lda 	esInt1
.1623	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.1625	f0 0a		beq $1631			beq 	_DLFound
.1627	20 4f 16	jsr $164f	_DLNext:jsr 	IAdvanceTemp0 				; shift temp0 forward, return Z flag set if end.
.162a	d0 ec		bne $1618			bne 	_DLLoop
.162c	a0 00		ldy #$00			ldy 	#0 							; size of chunk to cut out.
.162e	b1 2a		lda ($2a),y			lda 	(temp0),y
.1630	60		rts				rts
.1631					_DLFound:
.1631	a0 00		ldy #$00			ldy 	#0 							; from here (temp0),y
.1633	b1 2a		lda ($2a),y			lda 	(temp0),y
.1635	a8		tay				tay
.1636	a2 00		ldx #$00			ldx 	#0  						; to (temp0,x)
.1638					_DLCopyDown:
.1638	b1 2a		lda ($2a),y			lda 	(temp0),y
.163a	81 2a		sta ($2a,x)			sta 	(temp0,x)
.163c	e6 2a		inc $2a				inc 	temp0 						; advance pointer
.163e	d0 02		bne $1642			bne 	_DLNoCarry
.1640	e6 2b		inc $2b				inc 	temp0+1
.1642					_DLNoCarry:
.1642	a5 2a		lda $2a				lda 	temp0 						; until hit low memory
.1644	c5 35		cmp $35				cmp 	lowMemory
.1646	d0 f0		bne $1638			bne 	_DLCopyDown
.1648	a5 2b		lda $2b				lda 	temp0+1
.164a	c5 36		cmp $36				cmp 	lowMemory+1
.164c	d0 ea		bne $1638			bne 	_DLCopyDown
.164e	60		rts				rts
.164f					IAdvanceTemp0:
.164f	84 32		sty $32				sty 	tempShort
.1651	18		clc				clc
.1652	a0 00		ldy #$00			ldy 	#0
.1654	b1 2a		lda ($2a),y			lda 	(temp0),y
.1656	65 2a		adc $2a				adc 	temp0
.1658	85 2a		sta $2a				sta 	temp0
.165a	90 02		bcc $165e			bcc 	_IATNoCarry
.165c	e6 2b		inc $2b				inc 	temp0+1
.165e					_IATNoCarry:
.165e	b1 2a		lda ($2a),y			lda 	(temp0),y
.1660	a4 32		ldy $32				ldy 	tempShort
.1662	c9 00		cmp #$00			cmp		#0
.1664	60		rts				rts

;******  Return to file: interaction/interaction.asm


;******  Processing file: interaction/insert.asm

.1665					InsertLine:
.1665	ad c8 0a	lda $0ac8			lda 	basePage 					; copy program base to temp0
.1668	85 2a		sta $2a				sta 	temp0
.166a	ad c9 0a	lda $0ac9			lda 	basePage+1
.166d	85 2b		sta $2b				sta 	temp0+1
.166f					_ILLoop:
.166f	a0 01		ldy #$01			ldy 	#1
.1671	b1 2a		lda ($2a),y			lda 	(temp0),y
.1673	c5 48		cmp $48				cmp 	esInt0
.1675	c8		iny				iny
.1676	b1 2a		lda ($2a),y			lda 	(temp0),y
.1678	e5 50		sbc $50				sbc 	esInt1
.167a	b0 05		bcs $1681			bcs 	_ILFound 					; we know it cannot be equal, it would have been deleted
.167c	20 4f 16	jsr $164f			jsr 	IAdvanceTemp0 				; shift temp0 forward, return Z flag set if end.
.167f	d0 ee		bne $166f			bne 	_ILLoop
.1681					_ILFound:
.1681	a5 35		lda $35				lda 	lowMemory 					; shift lowMemory up to make space for it.
.1683	85 2c		sta $2c				sta 	temp1
.1685	a5 36		lda $36				lda 	lowMemory+1
.1687	85 2d		sta $2d				sta 	temp1+1
.1689	ad 20 0d	lda $0d20			lda 	tokenBufferIndex 			; space to make in Y, 0 in X.
.168c	18		clc				clc
.168d	69 03		adc #$03			adc 	#3
.168f	a8		tay				tay
.1690	a2 00		ldx #$00			ldx 	#0
.1692	a1 2c		lda ($2c,x)	_ILMove:lda 	(temp1,x)
.1694	91 2c		sta ($2c),y			sta 	(temp1),y
.1696	a5 2c		lda $2c				lda 	temp1
.1698	c5 2a		cmp $2a				cmp 	temp0
.169a	d0 06		bne $16a2			bne 	_ILMNext
.169c	a5 2d		lda $2d				lda 	temp1+1
.169e	c5 2b		cmp $2b				cmp 	temp0+1
.16a0	f0 0b		beq $16ad			beq 	_ILMCopy
.16a2					_ILMNext:
.16a2	a5 2c		lda $2c				lda 	temp1
.16a4	d0 02		bne $16a8			bne 	_ILNoBorrow
.16a6	c6 2d		dec $2d				dec 	temp1+1
.16a8					_ILNoBorrow:
.16a8	c6 2c		dec $2c				dec 	temp1
.16aa	4c 92 16	jmp $1692			jmp 	_ILMove
.16ad					_ILMCopy:
.16ad	98		tya				tya 								; Y is the offset of the new line.
.16ae	81 2a		sta ($2a,x)			sta 	(temp0,x)					; X = 0 still.
.16b0	a0 01		ldy #$01			ldy 	#1 							; copy in line number.
.16b2	a5 48		lda $48				lda 	esInt0
.16b4	91 2a		sta ($2a),y			sta 	(temp0),y
.16b6	c8		iny				iny
.16b7	a5 50		lda $50				lda 	esInt1
.16b9	91 2a		sta ($2a),y			sta 	(temp0),y
.16bb	a0 00		ldy #$00			ldy 	#0 							; copy the body in
.16bd					_ILMCopy2:
.16bd	b1 28		lda ($28),y			lda 	(codePtr),y
.16bf	c8		iny				iny
.16c0	c8		iny				iny
.16c1	c8		iny				iny
.16c2	91 2a		sta ($2a),y			sta 	(temp0),y
.16c4	88		dey				dey
.16c5	88		dey				dey
.16c6	cc 20 0d	cpy $0d20			cpy 	tokenBufferIndex
.16c9	d0 f2		bne $16bd			bne 	_ILMCopy2
.16cb	60		rts				rts

;******  Return to file: interaction/interaction.asm


;******  Processing file: interaction/warm.asm

.16cc					WarmStartEntry:
.16cc	a2 ff		ldx #$ff			ldx 	#$FF
.16ce	9a		txs				txs
.16cf	a9 02		lda #$02			lda 	#2							; green text.
.16d1	a2 08		ldx #$08		ldx	#8
.16d3	20 64 11	jsr $1164		jsr	deviceHandler
.16d6	a2 0c		ldx #$0c		ldx	#12
.16d8	20 64 11	jsr $1164		jsr	deviceHandler
.16db	a5 2a		lda $2a				lda 	temp0	 					; copy temp0 to codePtr
.16dd	85 28		sta $28				sta 	codePtr
.16df	a5 2b		lda $2b				lda 	temp0+1
.16e1	85 29		sta $29				sta 	codePtr+1
.16e3	a2 04		ldx #$04		ldx	#4
.16e5	20 64 11	jsr $1164		jsr	deviceHandler
.16e8	a2 06		ldx #$06		ldx	#6
.16ea	20 73 38	jsr $3873		jsr	tokeniserHandler
.16ed	90 25		bcc $1714			bcc 	WSEError 					; failed.
.16ef	a9 1d		lda #$1d			lda 	#(tokenHeader) & $FF
.16f1	85 28		sta $28				sta 	codePtr
.16f3	a9 0c		lda #$0c			lda 	#(tokenHeader) >> 8
.16f5	85 29		sta $29				sta 	1+(codePtr)
.16f7	ad 20 0c	lda $0c20			lda 	tokenBuffer 				; is it a blank line, go get another line.
.16fa	c9 80		cmp #$80			cmp 	#$80
.16fc	f0 ce		beq $16cc			beq 	WarmStartEntry
.16fe	29 c0		and #$c0			and 	#$C0						; does it start with a number
.1700	c9 40		cmp #$40			cmp 	#$40
.1702	f0 15		beq $1719			beq 	HasLineNumber
.1704	a9 00		lda #$00			lda 	#0 							; zero the token header, so it will look like a
.1706	8d 1d 0c	sta $0c1d			sta 	tokenHeader 				; fake program line.
.1709	8d 1e 0c	sta $0c1e			sta 	tokenHeader+1
.170c	8d 1f 0c	sta $0c1f			sta 	tokenHeader+2
.170f	a2 12		ldx #$12		ldx	#18
.1711	20 cc 2d	jsr $2dcc		jsr	mainHandler
.1714					WSEError:
.1714	a2 1d		ldx #$1d			ldx 	#ErrorID_Tokenise
.1716	20 85 11	jsr $1185		jsr	errorHandler
.1719					HasLineNumber:
.1719	a0 03		ldy #$03			ldy 	#3 							; get line number
.171b	a9 00		lda #$00			lda 	#0
.171d	a2 06		ldx #$06		ldx	#6
.171f	20 cc 2d	jsr $2dcc		jsr	mainHandler
.1722	a5 58		lda $58				lda 	esInt2		 				; check in range.
.1724	05 60		ora $60				ora 	esInt3
.1726	d0 ec		bne $1714			bne 	WSEError
.1728	98		tya				tya 								; make codePtr point to code after the line number.
.1729	18		clc				clc
.172a	65 28		adc $28				adc 	codePtr
.172c	85 28		sta $28				sta 	codePtr
.172e	90 02		bcc $1732			bcc		_HLNNoCarry
.1730	e6 29		inc $29				inc 	codePtr+1
.1732					_HLNNoCarry:
.1732	98		tya				tya 								; subtract that offset from the code buffer index
.1733	38		sec				sec
.1734	49 ff		eor #$ff			eor 	#$FF
.1736	6d 20 0d	adc $0d20			adc 	tokenBufferIndex
.1739	18		clc				clc 								; add space allowing for header & $80 trailer
.173a	69 04		adc #$04			adc 	#4
.173c	8d 20 0d	sta $0d20			sta 	tokenBufferIndex 			; this is the number of bytes occupied.
.173f	20 0e 16	jsr $160e			jsr 	DeleteLine 					; always delete the line, it's deleted and reinserted.
.1742					_HLNNoDelete:
.1742	ad 20 0d	lda $0d20			lda 	tokenBufferIndex 			; if line was empty, then don't insert
.1745	c9 01		cmp #$01			cmp 	#1 							; (the one character is the EOL marker)
.1747	f0 0c		beq $1755			beq 	_HLMEditDone
.1749	a5 36		lda $36				lda 	lowMemory+1 				; is there space, if we allow a little bit of
.174b	18		clc				clc 								; workspace (1k)
.174c	69 04		adc #$04			adc 	#4
.174e	c5 34		cmp $34				cmp 	highMemory+1
.1750	b0 0b		bcs $175d			bcs 	_HLMMemory
.1752	20 65 16	jsr $1665			jsr 	InsertLine 					; insert the line in
.1755					_HLMEditDone:
.1755	a2 02		ldx #$02		ldx	#2
.1757	20 cc 2d	jsr $2dcc		jsr	mainHandler
.175a	4c cc 16	jmp $16cc			jmp 	WarmStartEntry
.175d					_HLMMemory:
.175d	a2 21		ldx #$21			ldx 	#ErrorID_Memory
.175f	20 85 11	jsr $1185		jsr	errorHandler

;******  Return to file: interaction/interaction.asm

.1762					interactionHandler:
.1762	7c 65 17	jmp ($1765,x)			jmp 	(interactionVectors,x)
.1765					interactionVectors:
>1765	87 15					.word ColdStartEntry       ; index 0
>1767	cc 16					.word WarmStartEntry       ; index 2

;******  Return to file: basic.asm

.1769					section_end_interaction:
.1769					section_start_main:

;******  Processing file: main/main.asm


;******  Processing file: main/commands/assert.asm

.1769					Command_Assert:
.1769	20 cf 26	jsr $26cf			jsr 	EvaluateRootInteger 		; what is being asserted.
.176c	20 89 2c	jsr $2c89			jsr 	MInt32Zero 					; is it true ?
.176f	f0 01		beq $1772			beq 	_CAError
.1771	60		rts				rts
.1772					_CAError:
.1772	a2 04		ldx #$04			ldx 	#ErrorID_Assert
.1774	20 85 11	jsr $1185		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/commands/clear.asm

.1777					CommandClear:
.1777					XCommandClear:
.1777	98		tya				tya
.1778	48		pha				pha
.1779	ad cc 0a	lda $0acc			lda 	endMemory					; set high memory = end of memory
.177c	85 33		sta $33				sta 	highMemory
.177e	ad cd 0a	lda $0acd			lda 	endMemory+1
.1781	85 34		sta $34				sta 	highMemory+1
.1783	ad c8 0a	lda $0ac8			lda 	basePage 					; work out where the program ends.
.1786	85 2a		sta $2a				sta 	temp0
.1788	ad c9 0a	lda $0ac9			lda 	basePage+1
.178b	85 2b		sta $2b				sta 	temp0+1
.178d					_CCFindEnd:
.178d	a0 00		ldy #$00			ldy 	#0
.178f	b1 2a		lda ($2a),y			lda 	(temp0),y
.1791	f0 0c		beq $179f			beq 	_CCFoundEnd 				; offset zero is end.
.1793	18		clc				clc
.1794	65 2a		adc $2a				adc 	temp0 						; move to next line
.1796	85 2a		sta $2a				sta 	temp0
.1798	90 f3		bcc $178d			bcc 	_CCFindEnd
.179a	e6 2b		inc $2b				inc 	temp0+1
.179c	4c 8d 17	jmp $178d			jmp 	_CCFindEnd
.179f					_CCFoundEnd:
.179f	a5 2a		lda $2a				lda 	temp0 						; put temp0 in lowMemory
.17a1	85 35		sta $35				sta 	lowMemory
.17a3	a5 2b		lda $2b				lda 	temp0+1
.17a5	85 36		sta $36				sta 	lowMemory+1
.17a7	18		clc				clc 								; put temp0+1 in endProgram
.17a8	a5 2a		lda $2a				lda 	temp0
.17aa	69 01		adc #$01			adc 	#1
.17ac	8d ca 0a	sta $0aca			sta 	endProgram
.17af	a5 2b		lda $2b				lda 	temp0+1
.17b1	69 00		adc #$00			adc 	#0
.17b3	8d cb 0a	sta $0acb			sta 	endProgram+1
.17b6	18		clc				clc 								; put a bit of space in.
.17b7	a5 35		lda $35				lda 	lowMemory
.17b9	69 04		adc #$04			adc 	#4
.17bb	85 35		sta $35				sta 	lowMemory
.17bd	90 02		bcc $17c1			bcc 	_CCNoCarry
.17bf	e6 36		inc $36				inc 	lowMemory+1
.17c1					_CCNoCarry:
.17c1	20 6b 2d	jsr $2d6b			jsr 	RSReset 					; reset the return stack.
.17c4	a2 04		ldx #$04		ldx	#4
.17c6	20 82 3b	jsr $3b82		jsr	variableHandler
.17c9	20 7c 20	jsr $207c			jsr 	ScanProc 					; scan for procedures
.17cc	20 37 1e	jsr $1e37			jsr 	CommandRestore 				; do a restore
.17cf	68		pla				pla
.17d0	a8		tay				tay
.17d1	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/dim.asm

.17d2					Command_Dim:
.17d2	a2 02		ldx #$02		ldx	#2
.17d4	20 82 3b	jsr $3b82		jsr	variableHandler
.17d7	b1 28		lda ($28),y			lda 	(codePtr),y 				; see what follows.
.17d9	c8		iny				iny
.17da	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; comma follows, go back and do next
.17dc	f0 f4		beq $17d2			beq 	Command_Dim
.17de	88		dey				dey 								; unpick get
.17df	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/for.asm

.17e0					Command_FOR:
.17e0	a9 46		lda #$46			lda 	#markerFOR 					; allocate the space and set the marker
.17e2	a2 0b		ldx #$0b			ldx 	#11
.17e4	20 79 2d	jsr $2d79			jsr 	RSClaim
.17e7	20 e1 19	jsr $19e1			jsr 	CommandLET 					; do the same as LET FOR [a = 4]
.17ea	a5 40		lda $40				lda 	esType 						; check type should be integer reference.
.17ec	c9 80		cmp #$80			cmp 	#$80 						; we do not do FOR floats.
.17ee	d0 4c		bne $183c			bne 	_CFType
.17f0	a9 ce		lda #$ce			lda 	#TKW_TO 					; check TO present.
.17f2	20 ca 2c	jsr $2cca			jsr 	CheckToken
.17f5	a2 01		ldx #$01			ldx 	#1 							; keep the variable address in stack 0
.17f7	20 d1 26	jsr $26d1			jsr 	EvaluateInteger				; get terminal value in stack 1
.17fa	98		tya				tya
.17fb	48		pha				pha
.17fc	a0 04		ldy #$04			ldy 	#4
.17fe	a5 48		lda $48				lda		esInt0 						; copy the address of the index variable into 4 and 5
.1800	91 37		sta ($37),y			sta 	(rsPointer),y
.1802	c8		iny				iny
.1803	a5 50		lda $50				lda		esInt1
.1805	91 37		sta ($37),y			sta 	(rsPointer),y
.1807	c8		iny				iny
.1808	a9 01		lda #$01			lda 	#1  						; the default step in 6, (-128 .. 127 only)
.180a	91 37		sta ($37),y			sta 	(rsPointer),y
.180c	c8		iny				iny
.180d	a5 49		lda $49				lda		esInt0+1 					; terminal value in 7 to 11.
.180f	91 37		sta ($37),y			sta 	(rsPointer),y
.1811	c8		iny				iny
.1812	a5 51		lda $51				lda		esInt1+1
.1814	91 37		sta ($37),y			sta 	(rsPointer),y
.1816	c8		iny				iny
.1817	a5 59		lda $59				lda		esInt2+1
.1819	91 37		sta ($37),y			sta 	(rsPointer),y
.181b	c8		iny				iny
.181c	a5 61		lda $61				lda		esInt3+1
.181e	91 37		sta ($37),y			sta 	(rsPointer),y
.1820	68		pla				pla
.1821	a8		tay				tay
.1822	b1 28		lda ($28),y			lda 	(codePtr),y 				; followed by STEP.
.1824	c9 cf		cmp #$cf			cmp 	#TKW_STEP
.1826	d0 0e		bne $1836			bne 	_CFDone
.1828	c8		iny				iny									; skip over step.
.1829	20 d1 26	jsr $26d1			jsr 	EvaluateInteger 			; get step
.182c	98		tya				tya
.182d	48		pha				pha
.182e	b5 48		lda $48,x			lda 	esInt0,x 					; copy it into step (bit lazy here)
.1830	a0 06		ldy #$06			ldy 	#6
.1832	91 37		sta ($37),y			sta 	(rsPointer),y
.1834	68		pla				pla
.1835	a8		tay				tay
.1836					_CFDone:
.1836	a9 01		lda #$01			lda 	#1
.1838	20 a5 2d	jsr $2da5			jsr 	RSSavePosition 				; save position.
.183b	60		rts				rts
.183c					_CFType:
.183c	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.183e	20 85 11	jsr $1185		jsr	errorHandler
.1841					Command_NEXT:
.1841	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.1843	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.1845	c9 46		cmp #$46			cmp 	#markerFOR 						; does it match
.1847	f0 05		beq $184e			beq 	_isok
.1849	a2 10		ldx #$10			ldx 	#ErrorID_nextErr
.184b	20 85 11	jsr $1185		jsr	errorHandler
.184e					_isok:
.184e	b1 28		lda ($28),y			lda 	(codePtr),y 				; is it NEXT <index>
.1850	c9 40		cmp #$40			cmp 	#$40 						; e.g. a variable follows 00-3F
.1852	b0 18		bcs $186c			bcs 	_CNNoIndex
.1854	a2 00		ldx #$00			ldx 	#0 							; start on stack
.1856	20 04 27	jsr $2704			jsr 	EvaluateReference 			; this is the variable/parameter to localise.
.1859	98		tya				tya
.185a	48		pha				pha
.185b	a0 04		ldy #$04			ldy 	#4 							; check same variable as that stored at +4,+5
.185d	b1 37		lda ($37),y			lda 	(rsPointer),y
.185f	d5 48		cmp $48,x			cmp 	esInt0,x
.1861	d0 76		bne $18d9			bne 	_CNBadIndex
.1863	c8		iny				iny
.1864	b1 37		lda ($37),y			lda 	(rsPointer),y
.1866	d5 50		cmp $50,x			cmp 	esInt1,x
.1868	d0 6f		bne $18d9			bne 	_CNBadIndex
.186a	68		pla				pla
.186b	a8		tay				tay
.186c					_CNNoIndex:
.186c	98		tya				tya
.186d	48		pha				pha
.186e	a0 04		ldy #$04			ldy 	#4 							; make temp0 point to the index
.1870	b1 37		lda ($37),y			lda 	(rsPointer),y
.1872	85 2a		sta $2a				sta 	temp0
.1874	c8		iny				iny
.1875	b1 37		lda ($37),y			lda 	(rsPointer),y
.1877	85 2b		sta $2b				sta 	temp0+1
.1879	c8		iny				iny
.187a	a2 00		ldx #$00			ldx 	#0 							; X is the sign extend part of the step.
.187c	b1 37		lda ($37),y			lda 	(rsPointer),y 				; get the step.
.187e	85 2f		sta $2f				sta 	temp2+1 					; save for later.
.1880	10 01		bpl $1883			bpl 	_CNSignX
.1882	ca		dex				dex  								; X = $FF
.1883					_CNSignX:
.1883	18		clc				clc 								; add to the LSB
.1884	a0 00		ldy #$00			ldy 	#0
.1886	71 2a		adc ($2a),y			adc 	(temp0),y
.1888	91 2a		sta ($2a),y			sta 	(temp0),y
.188a					_CNPropogate:
.188a	c8		iny				iny  								; add the sign extended in X to the rest.
.188b	8a		txa				txa
.188c	71 2a		adc ($2a),y			adc 	(temp0),y
.188e	91 2a		sta ($2a),y			sta 	(temp0),y
.1890	c8		iny				iny
.1891	8a		txa				txa
.1892	71 2a		adc ($2a),y			adc 	(temp0),y
.1894	91 2a		sta ($2a),y			sta 	(temp0),y
.1896	c8		iny				iny
.1897	8a		txa				txa
.1898	71 2a		adc ($2a),y			adc 	(temp0),y
.189a	91 2a		sta ($2a),y			sta 	(temp0),y
.189c	18		clc				clc 								; point temp1 to the terminal value stored in the stack.
.189d	a5 37		lda $37				lda 	rsPointer
.189f	69 07		adc #$07			adc 	#7
.18a1	85 2c		sta $2c				sta 	temp1
.18a3	a9 00		lda #$00			lda 	#0
.18a5	85 2e		sta $2e				sta 	temp2 						; clear temp2, which is the OR of all the subtractions.
.18a7	a8		tay				tay 								; and clear the Y register again.
.18a8	65 38		adc $38				adc 	rsPointer+1
.18aa	85 2d		sta $2d				sta 	temp1+1
.18ac	38		sec				sec 								; calculate current - limit oring interim values.
.18ad	20 e5 18	jsr $18e5			jsr 	_CNCompare 					; each of these does a byte.
.18b0	20 e5 18	jsr $18e5			jsr 	_CNCompare 					; we calculate the OR of all these subtractions.
.18b3	20 e5 18	jsr $18e5			jsr 	_CNCompare 					; and the carry of the subtraction.
.18b6	20 e5 18	jsr $18e5			jsr 	_CNCompare
.18b9	50 02		bvc $18bd			bvc 	_CNNoOverflow 				; converts to a signed comparison on the sign bit.
.18bb	49 80		eor #$80			eor 	#$80
.18bd					_CNNoOverflow:
.18bd	a4 2f		ldy $2f				ldy 	temp2+1						; get step back
.18bf	30 1d		bmi $18de			bmi 	_CNCheckDownto
.18c1	c9 00		cmp #$00			cmp 	#0
.18c3	30 0c		bmi $18d1			bmi 	_CNLoopRound 				; loop round if < =
.18c5	a5 2e		lda $2e				lda 	temp2
.18c7	f0 08		beq $18d1			beq 	_CNLoopRound
.18c9					_CNLoopExit:
.18c9	68		pla				pla
.18ca	a8		tay				tay
.18cb	a9 0b		lda #$0b			lda 	#11
.18cd	20 9b 2d	jsr $2d9b			jsr 	RSFree
.18d0	60		rts				rts
.18d1					_CNLoopRound:
.18d1	68		pla				pla
.18d2	a8		tay				tay
.18d3	a9 01		lda #$01			lda 	#1
.18d5	20 b8 2d	jsr $2db8			jsr 	RSLoadPosition				; go back to the loop top
.18d8	60		rts				rts
.18d9					_CNBadIndex:
.18d9	a2 13		ldx #$13			ldx 	#ErrorID_BadIndex
.18db	20 85 11	jsr $1185		jsr	errorHandler
.18de					_CNCheckDownto:
.18de	c9 00		cmp #$00			cmp 	#0
.18e0	10 ef		bpl $18d1			bpl 	_CNLoopRound
.18e2	4c c9 18	jmp $18c9			jmp 	_CNLoopExit
.18e5					_CNCompare:
.18e5	b1 2a		lda ($2a),y			lda 	(temp0),y 					; do the subtraction - compare don't care about answer
.18e7	f1 2c		sbc ($2c),y			sbc 	(temp1),y
.18e9	05 2e		ora $2e				ora 	temp2 						; Or into temp2 (does not affect carry)
.18eb	85 2e		sta $2e				sta 	temp2
.18ed	c8		iny				iny
.18ee	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/if.asm

.18ef					CommandIf:
.18ef	20 cf 26	jsr $26cf			jsr 	EvaluateRootInteger 		; get what's being tested.
.18f2	b1 28		lda ($28),y			lda 	(codePtr),y 				; check for IF .. THEN or IF .. GOTO which are single lines.
.18f4	c9 d9		cmp #$d9			cmp 	#TKW_GOTO
.18f6	f0 04		beq $18fc			beq 	_IfSimple
.18f8	c9 a1		cmp #$a1			cmp 	#TKW_THEN
.18fa	d0 1b		bne $1917			bne 	_IfComplex
.18fc					_IfSimple:
.18fc	20 89 2c	jsr $2c89			jsr 	MInt32Zero					; check if TOS zero
.18ff	f0 10		beq $1911			beq 	_IfEOL 						; go to next line.
.1901	b1 28		lda ($28),y			lda 	(codePtr),y 				; get and skip token.
.1903	c8		iny				iny
.1904	c9 d9		cmp #$d9			cmp 	#TKW_GOTO 					; was it if GOTO ?
.1906	f0 0c		beq $1914			beq 	_IfGoto 					; do the Goto code
.1908	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows the THEN ?
.190a	29 c0		and #$c0			and 	#$C0 						; check $40-$7F
.190c	c9 40		cmp #$40			cmp 	#$40 						; e.g. number IF x = 0 THEN 170
.190e	f0 04		beq $1914			beq 	_IfGoto
.1910	60		rts				rts 								; else continue on this line.
.1911					_IfEOL:
.1911	4c f1 20	jmp $20f1			jmp 	AdvanceNextLine 			; go to next line
.1914					_IfGoto:
.1914	4c 66 21	jmp $2166			jmp 	CommandGoto
.1917					_IfComplex:
.1917	20 89 2c	jsr $2c89			jsr 	MInt32Zero 					; is it true ?
.191a	f0 01		beq $191d			beq 	_IFSkip 					; if non-zero then skip to ELSE/ENDIF
.191c	60		rts				rts 								; else continue.
.191d					_IFSkip:
.191d	a9 d6		lda #$d6			lda	 	#TKW_ELSE 					; test failed, go to ELSE or ENDIF whichever comes first.
.191f	a2 a2		ldx #$a2			ldx 	#TKW_ENDIF
.1921	4c ef 2c	jmp $2cef			jmp		ScanForward
.1924					Command_ELSE:
.1924	a2 a2		ldx #$a2			ldx 	#TKW_ENDIF
.1926	8a		txa				txa
.1927	4c ef 2c	jmp $2cef			jmp		ScanForward
.192a					Command_ENDIF:
.192a	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/input.asm

=32					MaxInputSize = 32
.0be3					InputBuffer:
>0be3							.fill 	MaxInputSize+1
.192b					Command_Input:
.192b	b1 28		lda ($28),y			lda 	(codePtr),y 			; see what's next.
.192d	c8		iny				iny
.192e	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 				; ignore commas.
.1930	f0 f9		beq $192b			beq 	Command_Input
.1932	88		dey				dey 							; undo consume
.1933	c9 ca		cmp #$ca			cmp 	#TKW_COLON
.1935	f0 54		beq $198b			beq 	_CIExit 				; : or EOL, exit
.1937	c9 80		cmp #$80			cmp 	#TOK_EOL
.1939	f0 50		beq $198b			beq 	_CIExit
.193b	c9 40		cmp #$40			cmp 	#$40 					; variable ?
.193d	90 12		bcc $1951			bcc 	_CIVariable
.193f	c9 85		cmp #$85			cmp 	#TOK_STR 				; if not quoted string syntax error.
.1941	d0 43		bne $1986			bne 	_CISyntax
.1943	a2 00		ldx #$00			ldx 	#0
.1945	20 c6 26	jsr $26c6			jsr 	EvaluateString 			; evaluate and print string
.1948	20 56 1a	jsr $1a56			jsr 	TOSToTemp0
.194b	20 59 1d	jsr $1d59			jsr 	PrintString
.194e	4c 2b 19	jmp $192b			jmp 	Command_Input
.1951					_CIVariable:
.1951	a2 00		ldx #$00			ldx 	#0 						; evaluate a reference.
.1953	20 04 27	jsr $2704			jsr 	EvaluateReference  		; this is where its going
.1956					_CIRetry:
.1956	a9 3f		lda #$3f			lda 	#"?"					; print prompt
.1958	a2 14		ldx #$14		ldx	#20
.195a	20 64 11	jsr $1164		jsr	deviceHandler
.195d	98		tya				tya
.195e	48		pha				pha
.195f	20 9f 19	jsr $199f			jsr 	InputString 			; input a string (manually)
.1962	a2 01		ldx #$01			ldx 	#1
.1964	20 8c 19	jsr $198c			jsr 	BufferToStackX 			; make stack,x ref input string.
.1967	a5 40		lda $40				lda 	esType 					; if target type numeric
.1969	29 40		and #$40			and 	#$40 					; then convert to number
.196b	d0 11		bne $197e			bne 	_CIWrite
.196d	a2 01		ldx #$01			ldx 	#1
.196f	20 56 1a	jsr $1a56			jsr 	TOSToTemp0 				; string address in temp0, goes here.
.1972	a9 0a		lda #$0a			lda 	#10
.1974	20 d0 2a	jsr $2ad0			jsr 	MInt32FromString 		; convert it back from a string.
.1977	68		pla				pla
.1978	a8		tay				tay
.1979	b0 03		bcs $197e			bcs 	_CIWrite 				; successfully converted.
.197b	18		clc				clc 							; default fail FP conversion
.197c	90 d8		bcc $1956			bcc		_CIRetry				; failed, try again.
.197e					_CIWrite:
.197e	a2 00		ldx #$00			ldx 	#0
.1980	20 f4 19	jsr $19f4			jsr 	WriteValue
.1983	4c 2b 19	jmp $192b			jmp 	Command_Input
.1986					_CISyntax:
.1986	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.1988	20 85 11	jsr $1185		jsr	errorHandler
.198b					_CIExit:
.198b	60		rts				rts
.198c					BufferToStackX:
.198c	a9 e3		lda #$e3			lda 	#InputBuffer & $FF
.198e	95 48		sta $48,x			sta 	esInt0,x
.1990	a9 0b		lda #$0b			lda 	#InputBuffer >> 8
.1992	95 50		sta $50,x			sta 	esInt1,x
.1994	a9 00		lda #$00			lda 	#0
.1996	95 58		sta $58,x			sta 	esInt2,x
.1998	95 60		sta $60,x			sta 	esInt3,x
.199a	a9 40		lda #$40			lda 	#$40
.199c	95 40		sta $40,x			sta 	esType,x
.199e	60		rts				rts
.199f					InputString:
.199f	a9 00		lda #$00			lda 	#0
.19a1	8d e3 0b	sta $0be3			sta 	InputBuffer
.19a4					_InputLoop:
.19a4	a2 00		ldx #$00		ldx	#0
.19a6	20 64 11	jsr $1164		jsr	deviceHandler
.19a9	a2 0a		ldx #$0a		ldx	#10
.19ab	20 64 11	jsr $1164		jsr	deviceHandler
.19ae	c9 00		cmp #$00			cmp 	#0
.19b0	f0 f2		beq $19a4			beq 	_InputLoop
.19b2	c9 08		cmp #$08			cmp 	#8
.19b4	f0 19		beq $19cf			beq 	_InputBackspace
.19b6	c9 0d		cmp #$0d			cmp 	#13
.19b8	f0 21		beq $19db			beq 	_InputExit
.19ba	ae e3 0b	ldx $0be3			ldx 	InputBuffer
.19bd	e0 20		cpx #$20			cpx 	#MaxInputSize 			; too many characters
.19bf	f0 e3		beq $19a4			beq 	_InputLoop
.19c1	9d e4 0b	sta $0be4,x			sta 	InputBuffer+1,x 		; write char
.19c4	ee e3 0b	inc $0be3			inc 	InputBuffer 			; advance count.
.19c7					_InputPrintLoop:
.19c7	a2 14		ldx #$14		ldx	#20
.19c9	20 64 11	jsr $1164		jsr	deviceHandler
.19cc	4c a4 19	jmp $19a4			jmp	 	_InputLoop
.19cf					_InputBackspace:
.19cf	ad e3 0b	lda $0be3			lda 	InputBuffer 			; at start
.19d2	f0 d0		beq $19a4			beq 	_InputLoop
.19d4	ce e3 0b	dec $0be3			dec 	InputBuffer
.19d7	a9 08		lda #$08			lda 	#8
.19d9	d0 ec		bne $19c7			bne 	_InputPrintLoop
.19db					_InputExit:
.19db	a2 04		ldx #$04		ldx	#4
.19dd	20 64 11	jsr $1164		jsr	deviceHandler
.19e0	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/let.asm

.19e1					CommandLet:
.19e1	a2 00		ldx #$00			ldx 	#0  						; get address to write.
.19e3	20 04 27	jsr $2704			jsr 	EvaluateReference
.19e6	a9 8d		lda #$8d			lda 	#TKW_EQUAL 					; check for equals
.19e8	20 ca 2c	jsr $2cca			jsr 	CheckToken
.19eb	e8		inx				inx 								; do RHS
.19ec	20 b2 26	jsr $26b2			jsr 	Evaluate 					; evaluate and dereference
.19ef	ca		dex				dex
.19f0	20 f4 19	jsr $19f4			jsr 	WriteValue 					; write it out
.19f3	60		rts				rts
.19f4					WriteValue:
.19f4	98		tya				tya
.19f5	48		pha				pha
.19f6	20 56 1a	jsr $1a56			jsr 	TOSToTemp0 					; set temp0 to point to target address.
.19f9	b5 40		lda $40,x			lda 	esType,x 					; check the string flags match
.19fb	55 41		eor $41,x			eor 	esType+1,x 					; one string, one number causes an error.
.19fd	29 40		and #$40			and 	#$40
.19ff	d0 50		bne $1a51			bne		_WVType
.1a01	a0 01		ldy #$01			ldy 	#1 							; for string, copy 0 and 1.
.1a03	b5 40		lda $40,x			lda 	esType,x 					; check for string assignment
.1a05	29 40		and #$40			and 	#$40
.1a07	d0 1f		bne $1a28			bne 	_WVCopyString
.1a09	b5 40		lda $40,x			lda 	esType,x 					; check both are integer.
.1a0b	15 41		ora $41,x			ora 	esType+1,x
.1a0d	4a		lsr a				lsr 	a
.1a0e	90 22		bcc $1a32			bcc 	_WVCopyData4 				; copy 4 data bytes.
.1a10	b5 40		lda $40,x			lda 	esType,x
.1a12	4a		lsr a				lsr 	a
.1a13	90 3c		bcc $1a51			bcc 	_WVType
.1a15	e8		inx				inx 								; force the value being written to be a float.
.1a16	20 13 22	jsr $2213			jsr 	BPMakeFloat
.1a19	ca		dex				dex
.1a1a	20 56 1a	jsr $1a56			jsr 	TOSToTemp0 					; set Temp0 to write address
.1a1d	e8		inx				inx
.1a1e	8a		txa				txa
.1a1f	a2 20		ldx #$20		ldx	#32
.1a21	20 82 15	jsr $1582		jsr	floatingpointHandler
.1a24	aa		tax				tax
.1a25	4c 4e 1a	jmp $1a4e			jmp 	_WVCopyExit
.1a28					_WVCopyString:
.1a28	8a		txa				txa
.1a29	a2 0e		ldx #$0e		ldx	#14
.1a2b	20 82 30	jsr $3082		jsr	stringHandler
.1a2e	aa		tax				tax
.1a2f	4c 4e 1a	jmp $1a4e			jmp 	_WVCopyExit
.1a32					_WVCopyData4:
.1a32	b5 40		lda $40,x			lda 	esType,x 					; is the int ref a byte ref ?
.1a34	29 20		and #$20			and 	#$20 						; (e.g. is bit 5 set)
.1a36	d0 10		bne $1a48			bne 	_WVCopyData1
.1a38	a0 03		ldy #$03			ldy 	#3
.1a3a	b5 61		lda $61,x			lda 	esInt3+1,x
.1a3c	91 2a		sta ($2a),y			sta 	(temp0),y
.1a3e	88		dey				dey
.1a3f	b5 59		lda $59,x			lda 	esInt2+1,x
.1a41	91 2a		sta ($2a),y			sta 	(temp0),y
.1a43	88		dey				dey
.1a44	b5 51		lda $51,x			lda 	esInt1+1,x
.1a46	91 2a		sta ($2a),y			sta 	(temp0),y
.1a48					_WVCopyData1:
.1a48	a0 00		ldy #$00			ldy 	#0
.1a4a	b5 49		lda $49,x			lda 	esInt0+1,x
.1a4c	91 2a		sta ($2a),y			sta 	(temp0),y
.1a4e					_WVCopyExit:
.1a4e	68		pla				pla
.1a4f	a8		tay				tay
.1a50	60		rts				rts
.1a51					_WVType:
.1a51	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.1a53	20 85 11	jsr $1185		jsr	errorHandler
.1a56					TOSToTemp0:
.1a56	b5 48		lda $48,x			lda 	esInt0,x
.1a58	85 2a		sta $2a				sta 	temp0
.1a5a	b5 50		lda $50,x			lda 	esInt1,x
.1a5c	85 2b		sta $2b				sta 	temp0+1
.1a5e	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/list.asm

.0c04					structIndent:
>0c04							.fill 	1
.1a5f					CommandList:
.1a5f	a2 00		ldx #$00			ldx		#0 							; set start/end lines in stack 0/1 to 0 and $FFFF
.1a61	8e 04 0c	stx $0c04			stx 	structIndent
.1a64	20 62 2c	jsr $2c62			jsr 	MInt32False
.1a67	e8		inx				inx
.1a68	20 5e 2c	jsr $2c5e			jsr 	MInt32True
.1a6b	b1 28		lda ($28),y			lda 	(codePtr),y 				; look at first token
.1a6d	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; list ,xxxx
.1a6f	f0 15		beq $1a86			beq 	_CLEndLine
.1a71	c9 00		cmp #$00			cmp 	#0 							; list ... on its own.
.1a73	30 1b		bmi $1a90			bmi 	_CLDoListing 				; do the whole lot.
.1a75	a2 00		ldx #$00			ldx 	#0 							; get start line at stack:0
.1a77	20 d1 26	jsr $26d1			jsr 	EvaluateInteger
.1a7a	b1 28		lda ($28),y			lda 	(codePtr),y 				; , follows ?
.1a7c	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.1a7e	f0 06		beq $1a86			beq 	_CLEndLine
.1a80	20 a0 2b	jsr $2ba0			jsr 	MInt32CopyUp 				; copy first to second if just a line number on its
.1a83	4c 90 1a	jmp $1a90			jmp 	_CLDoListing 				; own e.g. list 1100
.1a86					_CLEndLine:
.1a86	c8		iny				iny 								; skip comma
.1a87	b1 28		lda ($28),y			lda 	(codePtr),y  				; no number follows, then its list 1000,
.1a89	30 05		bmi $1a90			bmi 	_CLDoListing
.1a8b	a2 01		ldx #$01			ldx 	#1 							; get the last line to list
.1a8d	20 d1 26	jsr $26d1			jsr 	EvaluateInteger				; get end
.1a90					_CLDoListing:
.1a90	20 17 1f	jsr $1f17			jsr 	ResetCodeAddress 			; back to the start.
.1a93					_CLCheckLoop:
.1a93	a2 00		ldx #$00		ldx	#0
.1a95	20 64 11	jsr $1164		jsr	deviceHandler
.1a98	a0 00		ldy #$00			ldy 	#0							; check end.
.1a9a	b1 28		lda ($28),y			lda 	(codePtr),y
.1a9c	f0 41		beq $1adf			beq 	_CLEnd
.1a9e	a2 00		ldx #$00			ldx 	#0 							; compare vs lower.
.1aa0	20 e2 1a	jsr $1ae2			jsr 	CLCompareLineTOS
.1aa3	c9 ff		cmp #$ff			cmp 	#255 						; if < skip
.1aa5	f0 28		beq $1acf			beq 	_CLNext
.1aa7	e8		inx				inx
.1aa8	20 e2 1a	jsr $1ae2			jsr 	CLCompareLineTOS 			; compare vs higher
.1aab	c9 01		cmp #$01			cmp 	#1
.1aad	f0 20		beq $1acf			beq 	_CLNext
.1aaf	a9 80		lda #$80			lda 	#$80 						; undo any down indents this line.
.1ab1	20 04 1b	jsr $1b04			jsr 	CLStructureCheck
.1ab4	ad 04 0c	lda $0c04			lda 	structIndent 				; indent level.
.1ab7	10 02		bpl $1abb			bpl 	_CLPositive
.1ab9	a9 00		lda #$00			lda 	#0
.1abb					_CLPositive:
.1abb	a2 02		ldx #$02		ldx	#2
.1abd	20 73 38	jsr $3873		jsr	tokeniserHandler
.1ac0	a9 82		lda #$82			lda 	#$82 						; up indents from this point on.
.1ac2	20 04 1b	jsr $1b04			jsr 	CLStructureCheck
.1ac5	ad 04 0c	lda $0c04			lda 	structIndent
.1ac8	10 05		bpl $1acf			bpl 	_CLNext
.1aca	a9 00		lda #$00			lda 	#0
.1acc	8d 04 0c	sta $0c04			sta 	structIndent
.1acf					_CLNext:
.1acf	a0 00		ldy #$00			ldy 	#0 							; go to next line.
.1ad1	b1 28		lda ($28),y			lda 	(codePtr),y
.1ad3	18		clc				clc
.1ad4	65 28		adc $28				adc 	codePtr
.1ad6	85 28		sta $28				sta 	codePtr
.1ad8	90 b9		bcc $1a93			bcc 	_CLCheckLoop
.1ada	e6 29		inc $29				inc 	codePtr+1
.1adc	4c 93 1a	jmp $1a93			jmp 	_CLCheckLoop
.1adf					_CLEnd:
.1adf	4c c7 2d	jmp $2dc7			jmp 	WarmStart 					; warm start after list.
.1ae2					CLCompareLineTOS:
.1ae2	a0 01		ldy #$01			ldy 	#1
.1ae4	b1 28		lda ($28),y			lda 	(codePtr),y
.1ae6	55 48		eor $48,x			eor 	esInt0,x
.1ae8	85 2a		sta $2a				sta 	temp0
.1aea	c8		iny				iny
.1aeb	b1 28		lda ($28),y			lda 	(codePtr),y
.1aed	55 50		eor $50,x			eor 	esInt1,x
.1aef	05 2a		ora $2a				ora 	temp0
.1af1	f0 10		beq $1b03			beq 	_CLCLTExit
.1af3	88		dey				dey
.1af4	b1 28		lda ($28),y			lda 	(codePtr),y
.1af6	d5 48		cmp $48,x			cmp 	esInt0,x
.1af8	c8		iny				iny
.1af9	b1 28		lda ($28),y			lda 	(codePtr),y
.1afb	f5 50		sbc $50,x			sbc 	esInt1,x
.1afd	a9 ff		lda #$ff			lda 	#255
.1aff	90 02		bcc $1b03			bcc 	_CLCLTExit
.1b01	a9 01		lda #$01			lda 	#1
.1b03					_CLCLTExit:
.1b03	60		rts				rts
.1b04					CLStructureCheck:
.1b04	85 2a		sta $2a				sta 	temp0
.1b06	a0 03		ldy #$03			ldy 	#3
.1b08					_CLSCLoop:
.1b08	b1 28		lda ($28),y			lda 	(codePtr),y 				; get and consume token.
.1b0a	c8		iny				iny
.1b0b	c9 80		cmp #$80			cmp 	#$80
.1b0d	90 f9		bcc $1b08			bcc 	_CLSCLoop 					; $00-$7F just step over.
.1b0f	f0 28		beq $1b39			beq		_CLSCExit					; EOL return
.1b11	c9 86		cmp #$86			cmp 	#$86 						; special handler
.1b13	90 1e		bcc $1b33			bcc 	_CLSCSpecial
.1b15	c9 99		cmp #$99			cmp 	#TOK_STRUCTST 				; check if structure changer.
.1b17	90 ef		bcc $1b08			bcc 	_CLSCLoop
.1b19	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST
.1b1b	b0 eb		bcs $1b08			bcs 	_CLSCLoop
.1b1d	aa		tax				tax 								; get adjustment
.1b1e	bd 6a 25	lda $256a,x			lda 	ELBinaryOperatorInfo-TOK_BINARYST,x
.1b21	c5 2a		cmp $2a				cmp 	temp0	 					; if what we're searching for
.1b23	d0 e3		bne $1b08			bne 	_CLSCLoop
.1b25	38		sec				sec
.1b26	e9 81		sbc #$81			sbc 	#$81 						; convert to offset
.1b28	0a		asl a				asl 	a 							; double indent step
.1b29	18		clc				clc
.1b2a	6d 04 0c	adc $0c04			adc 	structIndent 				; add to structure indent
.1b2d	8d 04 0c	sta $0c04			sta 	structIndent
.1b30	4c 08 1b	jmp $1b08			jmp 	_CLSCLoop
.1b33					_CLSCSpecial:
.1b33	20 32 2d	jsr $2d32			jsr 	ScannerSkipSpecial
.1b36	4c 08 1b	jmp $1b08			jmp 	_CLSCLoop
.1b39					_CLSCExit:
.1b39	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/loadsave.asm

.1b3a					CommandLoad:
.1b3a	20 62 1b	jsr $1b62			jsr 	CLSParameters 					; get parameters for load.
.1b3d	08		php				php
.1b3e	a2 0e		ldx #$0e		ldx	#14
.1b40	20 64 11	jsr $1164		jsr	deviceHandler
.1b43	28		plp				plp
.1b44	b0 08		bcs $1b4e			bcs 	_CLExit 						; if CC then load a program, so warm start.
.1b46	20 77 17	jsr $1777			jsr 	CommandClear
.1b49	a2 02		ldx #$02		ldx	#2
.1b4b	20 62 17	jsr $1762		jsr	interactionHandler
.1b4e					_CLExit
.1b4e	60		rts				rts
.1b4f					CommandSave:
.1b4f	20 62 1b	jsr $1b62			jsr 	CLSParameters					; get parameters for save
.1b52	90 08		bcc $1b5c			bcc 	_CSNoOverrideAddress
.1b54	20 e2 2c	jsr $2ce2			jsr 	CheckComma 						; should be a comma.
.1b57	a2 02		ldx #$02			ldx 	#2
.1b59	20 d1 26	jsr $26d1			jsr 	EvaluateInteger 				; get save end address.
.1b5c					_CSNoOverrideAddress:
.1b5c	a2 18		ldx #$18		ldx	#24
.1b5e	20 64 11	jsr $1164		jsr	deviceHandler
.1b61	60		rts				rts
.1b62					CLSParameters:
.1b62	a2 00		ldx #$00			ldx 	#0 								; string
.1b64	20 c6 26	jsr $26c6			jsr 	EvaluateString
.1b67	e8		inx				inx 									; erase out +1 +2
.1b68	20 62 2c	jsr $2c62			jsr 	MInt32False
.1b6b	e8		inx				inx
.1b6c	20 62 2c	jsr $2c62			jsr 	MInt32False
.1b6f	ad c8 0a	lda $0ac8			lda 	basePage 						; default start address.
.1b72	85 49		sta $49				sta 	esInt0+1
.1b74	ad c9 0a	lda $0ac9			lda 	basePage+1
.1b77	85 51		sta $51				sta 	esInt1+1
.1b79	ad ca 0a	lda $0aca			lda 	endProgram 						; default end address
.1b7c	85 4a		sta $4a				sta 	esInt0+2
.1b7e	ad cb 0a	lda $0acb			lda 	endProgram+1
.1b81	85 52		sta $52				sta 	esInt1+2
.1b83	b1 28		lda ($28),y			lda 	(codePtr),y 					; , following
.1b85	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.1b87	d0 08		bne $1b91			bne 	_CLSDefault
.1b89	c8		iny				iny 									; skip comma
.1b8a	a2 01		ldx #$01			ldx 	#1 								; get numeric value.
.1b8c	20 d1 26	jsr $26d1			jsr 	EvaluateInteger
.1b8f	38		sec				sec
.1b90	60		rts				rts
.1b91					_CLSDefault:
.1b91	18		clc				clc
.1b92	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/local.asm

.0c05					storeSize:
>0c05							.fill 	1
.1b93					CommandLocal:
.1b93	a2 00		ldx #$00			ldx 	#0
.1b95	20 b1 1b	jsr $1bb1			jsr 	LocaliseVariable 			; localise one.
.1b98					_CLCheckNext:
.1b98	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows ?
.1b9a	c8		iny				iny
.1b9b	c9 8d		cmp #$8d			cmp 	#TKW_EQUAL 					; something local "x = 2" ?
.1b9d	f0 06		beq $1ba5			beq 	_CLAssignment
.1b9f	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; comma try again.
.1ba1	f0 f0		beq $1b93			beq 	CommandLocal
.1ba3	88		dey				dey
.1ba4	60		rts				rts
.1ba5					_CLAssignment:
.1ba5	a2 01		ldx #$01			ldx 	#1
.1ba7	20 b2 26	jsr $26b2			jsr 	Evaluate 					; evaluate RHS
.1baa	ca		dex				dex
.1bab	20 f4 19	jsr $19f4			jsr 	WriteValue
.1bae	4c 98 1b	jmp $1b98			jmp 	_CLCheckNext
.1bb1					LocaliseVariable:
.1bb1	b1 28		lda ($28),y			lda 	(codePtr),y 				; check it's a variable.
.1bb3	c9 40		cmp #$40			cmp 	#$40
.1bb5	b0 67		bcs $1c1e			bcs 	_LVSyntax
.1bb7	8a		txa				txa 								; get the address of that variable.
.1bb8	a2 00		ldx #$00		ldx	#0
.1bba	20 82 3b	jsr $3b82		jsr	variableHandler
.1bbd	aa		tax				tax
.1bbe	8a		txa				txa
.1bbf	48		pha				pha
.1bc0	98		tya				tya
.1bc1	48		pha				pha
.1bc2	20 56 1a	jsr $1a56			jsr 	TOSToTemp0 					; the address of the variable is now in temp0.
.1bc5	b5 40		lda $40,x			lda 	esType,x 					; get the type
.1bc7	0a		asl a				asl 	a
.1bc8	10 16		bpl $1be0			bpl 	_LVPushNumber
.1bca	a0 00		ldy #$00			ldy 	#0 							; put address of data in temp1
.1bcc	b1 2a		lda ($2a),y			lda 	(temp0),y
.1bce	c8		iny				iny
.1bcf	85 2c		sta $2c				sta 	temp1
.1bd1	b1 2a		lda ($2a),y			lda 	(temp0),y
.1bd3	85 2d		sta $2d				sta 	temp1+1
.1bd5	a0 00		ldy #$00			ldy 	#0 	 						; get length
.1bd7	b1 2c		lda ($2c),y			lda 	(temp1),y
.1bd9	aa		tax				tax 								; into X
.1bda	e8		inx				inx 								; +1 for length.
.1bdb	a9 24		lda #$24			lda 	#markerString
.1bdd	4c f5 1b	jmp $1bf5			jmp 	_LVWriteFrame
.1be0					_LVPushNumber:
.1be0	a5 2a		lda $2a				lda 	temp0 						; storage address and data source are the same
.1be2	85 2c		sta $2c				sta 	temp1
.1be4	a5 2b		lda $2b				lda 	temp0+1
.1be6	85 2d		sta $2d				sta 	temp1+1
.1be8	b5 40		lda $40,x			lda 	esType,x 					; put float flag into carry.
.1bea	4a		lsr a				lsr 	a
.1beb	a9 25		lda #$25			lda 	#markerInt 					; get marker and size.
.1bed	a2 04		ldx #$04			ldx 	#VarISize
.1bef	90 04		bcc $1bf5			bcc 	_LVIsInteger
.1bf1	a9 23		lda #$23			lda 	#markerFloat
.1bf3	a2 06		ldx #$06			ldx 	#VarFSize
.1bf5					_LVIsInteger:
.1bf5					_LVWriteFrame:
.1bf5	8e 05 0c	stx $0c05			stx 	storeSize 					; number of bytes to copy from (temp0)
.1bf8	e8		inx				inx 								; allocate 3 bytes, 2 for the address, 1 for the marker.
.1bf9	e8		inx				inx
.1bfa	e8		inx				inx
.1bfb	20 79 2d	jsr $2d79			jsr 	RSClaim 					; create the stack frame.
.1bfe	a5 2a		lda $2a				lda 	temp0 						; copy the target address to slots 1 & 2
.1c00	a0 01		ldy #$01			ldy 	#1
.1c02	91 37		sta ($37),y			sta 	(rsPointer),y
.1c04	c8		iny				iny
.1c05	a5 2b		lda $2b				lda 	temp0+1
.1c07	91 37		sta ($37),y			sta 	(rsPointer),y
.1c09	a0 00		ldy #$00			ldy 	#0
.1c0b					_LVCopyData:
.1c0b	b1 2c		lda ($2c),y			lda 	(temp1),y 					; get data from source, temp1
.1c0d	c8		iny				iny 								; write allowing for the header bit.
.1c0e	c8		iny				iny
.1c0f	c8		iny				iny
.1c10	91 37		sta ($37),y			sta 	(rsPointer),y
.1c12	88		dey				dey
.1c13	88		dey				dey
.1c14	ce 05 0c	dec $0c05			dec 	storeSize 					; do it storesize times
.1c17	d0 f2		bne $1c0b			bne 	_LVCopyData
.1c19	68		pla				pla
.1c1a	a8		tay				tay
.1c1b	68		pla				pla
.1c1c	aa		tax				tax
.1c1d	60		rts				rts
.1c1e					_LVSyntax:
.1c1e	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.1c20	20 85 11	jsr $1185		jsr	errorHandler
.1c23					RestoreLocals:
.1c23	a2 00		ldx #$00			ldx 	#0
.1c25	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.1c27	c9 40		cmp #$40			cmp	 	#64
.1c29	90 01		bcc $1c2c			bcc 	_RLocal
.1c2b	60		rts				rts
.1c2c					_RLocal:
.1c2c	8a		txa				txa
.1c2d	48		pha				pha
.1c2e	98		tya				tya
.1c2f	48		pha				pha
.1c30	a0 01		ldy #$01			ldy 	#1 							; copy target address to temp0
.1c32	b1 37		lda ($37),y			lda 	(rsPointer),y
.1c34	85 2a		sta $2a				sta 	temp0
.1c36	c8		iny				iny
.1c37	b1 37		lda ($37),y			lda 	(rsPointer),y
.1c39	85 2b		sta $2b				sta 	temp0+1
.1c3b	a0 00		ldy #$00			ldy 	#0 							; get type back.
.1c3d	b1 37		lda ($37),y			lda 	(rsPointer),y
.1c3f	c9 24		cmp #$24			cmp 	#markerString 				; string is ... different :)
.1c41	f0 28		beq $1c6b			beq 	_RString
.1c43	a2 04		ldx #$04			ldx		#VARISize 					; size integer
.1c45	c9 25		cmp #$25			cmp 	#markerInt
.1c47	f0 02		beq $1c4b			beq 	_RIsInteger
.1c49	a2 06		ldx #$06			ldx 	#VARFSize 					; size float
.1c4b					_RIsInteger:
.1c4b	8a		txa				txa
.1c4c	48		pha				pha
.1c4d	a0 03		ldy #$03			ldy 	#3							; start size to copy back from pointer.
.1c4f					_RCopyBack:
.1c4f	b1 37		lda ($37),y			lda 	(rsPointer),y
.1c51	88		dey				dey
.1c52	88		dey				dey
.1c53	88		dey				dey
.1c54	91 2a		sta ($2a),y			sta 	(temp0),y
.1c56	c8		iny				iny
.1c57	c8		iny				iny
.1c58	c8		iny				iny
.1c59	c8		iny				iny
.1c5a	ca		dex				dex
.1c5b	d0 f2		bne $1c4f			bne 	_RCopyBack
.1c5d	68		pla				pla 								; get size add 3
.1c5e	18		clc				clc
.1c5f	69 03		adc #$03			adc 	#3 							; (2 for address one for marker)
.1c61					_RRestoreAAndLoop:
.1c61	20 9b 2d	jsr $2d9b			jsr 	RSFree
.1c64	68		pla				pla
.1c65	a8		tay				tay
.1c66	68		pla				pla
.1c67	aa		tax				tax
.1c68	4c 23 1c	jmp $1c23			jmp 	RestoreLocals 				; go see if there are any more locals.
.1c6b					_RString:
.1c6b	a2 00		ldx #$00			ldx 	#0
.1c6d	a0 01		ldy #$01			ldy 	#1 							; set up for a string write.
.1c6f	b1 37		lda ($37),y			lda 	(rsPointer),y
.1c71	95 48		sta $48,x			sta 	esInt0,x
.1c73	c8		iny				iny
.1c74	b1 37		lda ($37),y			lda 	(rsPointer),y
.1c76	95 50		sta $50,x			sta 	esInt1,x
.1c78	18		clc				clc
.1c79	a5 37		lda $37				lda 	rsPointer
.1c7b	69 03		adc #$03			adc 	#3
.1c7d	95 49		sta $49,x			sta 	esInt0+1,x
.1c7f	a5 38		lda $38				lda 	rsPointer+1
.1c81	69 00		adc #$00			adc 	#0
.1c83	95 51		sta $51,x			sta 	esInt1+1,x
.1c85	8a		txa				txa
.1c86	a2 0e		ldx #$0e		ldx	#14
.1c88	20 82 30	jsr $3082		jsr	stringHandler
.1c8b	a0 03		ldy #$03			ldy 	#3 							; get string length
.1c8d	b1 37		lda ($37),y			lda 	(rsPointer),y
.1c8f	18		clc				clc
.1c90	69 04		adc #$04			adc 	#4 							; add 4 (pointer, marker, length) to restore.
.1c92	4c 61 1c	jmp $1c61			jmp 	_RRestoreAAndLoop

;******  Return to file: main/main.asm


;******  Processing file: main/commands/new.asm

.1c95					Command_New:
.1c95					Command_XNew:
.1c95	20 17 1f	jsr $1f17			jsr 	ResetCodeAddress 			; point to first line
.1c98	a0 00		ldy #$00			ldy 	#0 							; and zap it.
.1c9a	98		tya				tya
.1c9b	91 28		sta ($28),y			sta 	(codePtr),y
.1c9d	20 77 17	jsr $1777			jsr 	CommandClear 				; clear everything down.
.1ca0	4c eb 20	jmp $20eb			jmp 	CommandEND 					; do END code, as there's nothing to run.

;******  Return to file: main/main.asm


;******  Processing file: main/commands/poke.asm

.1ca3					Command_Poke:
.1ca3	a9 01		lda #$01			lda 	#1
.1ca5	d0 06		bne $1cad			bne 	PokeGeneral
.1ca7					Command_Doke:
.1ca7	a9 02		lda #$02			lda 	#2
.1ca9	d0 02		bne $1cad			bne 	PokeGeneral
.1cab					Command_Loke:
.1cab	a9 03		lda #$03			lda 	#3
.1cad					PokeGeneral:
.1cad	48		pha				pha 								; save id (PDL = 123)
.1cae	20 cf 26	jsr $26cf			jsr 	EvaluateRootInteger 		; target address
.1cb1	20 e2 2c	jsr $2ce2			jsr	 	CheckComma
.1cb4	e8		inx				inx
.1cb5	20 d1 26	jsr $26d1			jsr 	EvaluateInteger 			; what value to POKE ?
.1cb8	ca		dex				dex
.1cb9	20 56 1a	jsr $1a56			jsr 	TOSToTemp0 					; temp0 points to the target address
.1cbc	84 32		sty $32				sty 	tempShort 					; save Y
.1cbe	68		pla				pla 								; get copy type (1-3) and dispatch
.1cbf	aa		tax				tax
.1cc0	ca		dex				dex
.1cc1	f0 14		beq $1cd7			beq 	_Poke1
.1cc3	ca		dex				dex
.1cc4	f0 0b		beq $1cd1			beq 	_Poke2
.1cc6	a0 03		ldy #$03			ldy 	#3							; put 4 bytes
.1cc8	a5 61		lda $61				lda 	esInt3+1
.1cca	91 2a		sta ($2a),y			sta 	(temp0),y
.1ccc	88		dey				dey
.1ccd	a5 59		lda $59				lda 	esInt2+1
.1ccf	91 2a		sta ($2a),y			sta 	(temp0),y
.1cd1					_Poke2:
.1cd1	a0 01		ldy #$01			ldy 	#1
.1cd3	a5 51		lda $51				lda 	esInt1+1
.1cd5	91 2a		sta ($2a),y			sta 	(temp0),y
.1cd7					_Poke1:
.1cd7	a0 00		ldy #$00			ldy 	#0
.1cd9	a5 49		lda $49				lda 	esInt0+1
.1cdb	91 2a		sta ($2a),y			sta 	(temp0),y
.1cdd	a4 32		ldy $32				ldy 	tempShort 					; restore Y and exit
.1cdf	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/print.asm

.0c06					lastPrintToken:
>0c06							.fill 	1
.1ce0					Command_Print:
.1ce0	a9 00		lda #$00			lda 	#0 							; clear LPT to a non token
.1ce2	8d 06 0c	sta $0c06			sta 	lastPrintToken
.1ce5	88		dey				dey
.1ce6					_PrintLoopSkip:
.1ce6	c8		iny				iny
.1ce7					_PrintLoop:
.1ce7	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows
.1ce9	c9 80		cmp #$80			cmp 	#TOK_EOL  					; done if end of line or colon
.1ceb	f0 5b		beq $1d48			beq 	_PrintExit
.1ced	c9 ca		cmp #$ca			cmp 	#TKW_COLON
.1cef	f0 57		beq $1d48			beq 	_PrintExit
.1cf1	8d 06 0c	sta $0c06			sta 	lastPrintToken 				; update Last print token, so we check ; and ,
.1cf4	c9 cc		cmp #$cc			cmp 	#TKW_SEMICOLON 				; ignore semicolon
.1cf6	f0 ee		beq $1ce6			beq 	_PrintLoopSkip
.1cf8	c9 cd		cmp #$cd			cmp 	#TKW_QUOTE 					; ' is new line
.1cfa	f0 3c		beq $1d38			beq	 	_PrintNewLine
.1cfc	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; , is print tab
.1cfe	f0 40		beq $1d40			beq 	_PrintTab
.1d00	20 b0 26	jsr $26b0			jsr 	EvaluateRoot 				; evaluate something at the root
.1d03	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.1d05	85 2a		sta $2a				sta 	temp0
.1d07	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.1d09	85 2b		sta $2b				sta 	1+(temp0)
.1d0b	a5 40		lda $40				lda 	esType 						; get type
.1d0d	f0 15		beq $1d24			beq		_PrintInteger
.1d0f	4a		lsr a				lsr 	a 							; check for floating point
.1d10	b0 08		bcs $1d1a			bcs 	_PrintFloat
.1d12					_PrintString:
.1d12	a2 00		ldx #$00			ldx 	#0 							; bottom string to temp0
.1d14	20 56 1a	jsr $1a56			jsr 	TOSToTemp0
.1d17	4c 32 1d	jmp $1d32			jmp 	_PrintTemp0 				; print no leading space.
.1d1a					_PrintFloat:
.1d1a	a9 00		lda #$00			lda 	#0 							; stack level.
.1d1c	a2 14		ldx #$14		ldx	#20
.1d1e	20 82 15	jsr $1582		jsr	floatingpointHandler
.1d21	4c 2b 1d	jmp $1d2b			jmp 	_PrintSpaceTemp0
.1d24					_PrintInteger:
.1d24	a9 8a		lda #$8a			lda 	#10+$80 					; base 10 signed
.1d26	a2 00		ldx #$00			ldx 	#0 							; bottom stack element
.1d28	20 b8 2b	jsr $2bb8			jsr 	MInt32ToString				; convert to text
.1d2b					_PrintSpaceTemp0:
.1d2b	a9 20		lda #$20			lda 	#32
.1d2d	a2 14		ldx #$14		ldx	#20
.1d2f	20 64 11	jsr $1164		jsr	deviceHandler
.1d32					_PrintTemp0:
.1d32	20 59 1d	jsr $1d59			jsr 	PrintString
.1d35	4c e7 1c	jmp $1ce7			jmp 	_PrintLoop
.1d38					_PrintNewLine:
.1d38	a2 04		ldx #$04		ldx	#4
.1d3a	20 64 11	jsr $1164		jsr	deviceHandler
.1d3d	4c e6 1c	jmp $1ce6			jmp 	_PrintLoopSkip
.1d40					_PrintTab:
.1d40	a2 1a		ldx #$1a		ldx	#26
.1d42	20 64 11	jsr $1164		jsr	deviceHandler
.1d45	4c e6 1c	jmp $1ce6			jmp 	_PrintLoopSkip
.1d48					_PrintExit:
.1d48	ad 06 0c	lda $0c06			lda		lastPrintToken 				; check last token
.1d4b	c9 cc		cmp #$cc			cmp 	#TKW_SEMICOLON 				; if , or ; do not print NL
.1d4d	f0 09		beq $1d58			beq 	_PrintExit2
.1d4f	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.1d51	f0 05		beq $1d58			beq 	_PrintExit2
.1d53	a2 04		ldx #$04		ldx	#4
.1d55	20 64 11	jsr $1164		jsr	deviceHandler
.1d58					_PrintExit2:
.1d58	60		rts				rts
.1d59					PrintString:
.1d59	8a		txa				txa
.1d5a	48		pha				pha
.1d5b	98		tya				tya
.1d5c	48		pha				pha
.1d5d	a0 00		ldy #$00			ldy 	#0							; get length
.1d5f	b1 2a		lda ($2a),y			lda 	(temp0),y
.1d61	aa		tax				tax 								; into X
.1d62	e0 00		cpx #$00	_PSLoop:cpx 	#0 							; finished ?
.1d64	f0 10		beq $1d76			beq 	_PSExit
.1d66	ca		dex				dex
.1d67	8a		txa				txa
.1d68	48		pha				pha
.1d69	c8		iny				iny
.1d6a	b1 2a		lda ($2a),y			lda 	(temp0),y
.1d6c	a2 14		ldx #$14		ldx	#20
.1d6e	20 64 11	jsr $1164		jsr	deviceHandler
.1d71	68		pla				pla
.1d72	aa		tax				tax
.1d73	4c 62 1d	jmp $1d62			jmp 	_PSLoop
.1d76					_PSExit:
.1d76	68		pla				pla
.1d77	a8		tay				tay
.1d78	68		pla				pla
.1d79	aa		tax				tax
.1d7a	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/proc.asm

.0c07					paramCount:
>0c07							.fill 	1
.1d7b					CallProc:
.1d7b	20 10 20	jsr $2010			jsr 	FindProcedure 				; find procedure, put in temp0. A contains name length.
.1d7e	48		pha				pha 								; save length on stack
.1d7f	85 32		sta $32				sta 	tempShort 					; save length in tempShort
.1d81	a5 2b		lda $2b				lda 	temp0+1 					; save procedure target on stack.
.1d83	48		pha				pha
.1d84	a5 2a		lda $2a				lda 	temp0
.1d86	48		pha				pha
.1d87	98		tya				tya 								; calculate Y + length
.1d88	18		clc				clc
.1d89	65 32		adc $32				adc 	tempShort
.1d8b	a8		tay				tay
.1d8c	a2 00		ldx #$00			ldx 	#0 							; where the first parameter goes - 1
.1d8e					_CallProcEvalParams:
.1d8e	e8		inx				inx
.1d8f	b1 28		lda ($28),y			lda 	(codePtr),y 				; do we have ) , e.g. the end of the parameters ?
.1d91	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.1d93	f0 0b		beq $1da0			beq 	_CPDoneParams
.1d95	20 b2 26	jsr $26b2			jsr 	Evaluate 					; evaluate a parameter
.1d98	b1 28		lda ($28),y			lda 	(codePtr),Y 				; get what's next, preconsume
.1d9a	c8		iny				iny
.1d9b	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; if comma, go get another parameter
.1d9d	f0 ef		beq $1d8e			beq 	_CallProcEvalParams
.1d9f	88		dey				dey 								; undo consumption.
.1da0					_CPDoneParams:
.1da0	20 d5 2c	jsr $2cd5			jsr 	CheckRightParen 			; check closing parenthesis.
.1da3	8e 07 0c	stx $0c07			stx 	paramCount 					; store parameter count+1
.1da6	a2 04		ldx #$04			ldx 	#4							; make space on stack
.1da8	a9 50		lda #$50			lda 	#markerPROC
.1daa	20 79 2d	jsr $2d79			jsr 	RSClaim
.1dad	a9 01		lda #$01			lda 	#1 							; store return address.
.1daf	20 a5 2d	jsr $2da5			jsr 	RSSavePosition
.1db2	68		pla				pla 								; get the new code Ptr
.1db3	85 28		sta $28				sta 	codePtr
.1db5	68		pla				pla
.1db6	85 29		sta $29				sta 	codePtr+1
.1db8	68		pla				pla 								; length of name + 4 is the param start.
.1db9	18		clc				clc
.1dba	69 04		adc #$04			adc 	#4
.1dbc	a8		tay				tay
.1dbd	a2 ff		ldx #$ff			ldx 	#$FF
.1dbf					_CPLoadParameters:
.1dbf	e8		inx				inx 								; point to where the address should be loaded.
.1dc0	ec 07 0c	cpx $0c07			cpx 	paramCount 					; too many parameters in definition ?
.1dc3	f0 1e		beq $1de3			beq 	_CPParamError
.1dc5	b1 28		lda ($28),y			lda 	(codePtr),y					; what follows
.1dc7	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN 				; is it the right bracket
.1dc9	f0 0e		beq $1dd9			beq 	_CPParamComplete 			; done all the parameters, perhaps.
.1dcb	20 b1 1b	jsr $1bb1			jsr 	LocaliseVariable 			; make following variable local, ref in tos,x
.1dce	20 f4 19	jsr $19f4			jsr 	WriteValue 					; copy the evaluated parameter into there.
.1dd1	b1 28		lda ($28),y			lda 	(codePtr),y 				; followed by a comma ?
.1dd3	c8		iny				iny
.1dd4	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.1dd6	f0 e7		beq $1dbf			beq 	_CPLoadParameters
.1dd8	88		dey				dey 								; no, unconsume and check for )
.1dd9					_CPParamComplete:
.1dd9	20 d5 2c	jsr $2cd5			jsr 	CheckRightParen 			; check )
.1ddc	e8		inx				inx 								; check right number of parameters have been consumed
.1ddd	ec 07 0c	cpx $0c07			cpx 	paramCount
.1de0	d0 01		bne $1de3			bne 	_CPParamError
.1de2	60		rts				rts
.1de3					_CPParamError:
.1de3	a2 18		ldx #$18			ldx 	#ErrorID_Params
.1de5	20 85 11	jsr $1185		jsr	errorHandler
.1de8					ReturnProc:
.1de8	20 23 1c	jsr $1c23			jsr 	RestoreLocals 				; get the locals back.
.1deb	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.1ded	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.1def	c9 50		cmp #$50			cmp 	#markerPROC 						; does it match
.1df1	f0 05		beq $1df8			beq 	_isok
.1df3	a2 12		ldx #$12			ldx 	#ErrorID_endProcErr
.1df5	20 85 11	jsr $1185		jsr	errorHandler
.1df8					_isok:
.1df8	a9 01		lda #$01			lda 	#1
.1dfa	20 b8 2d	jsr $2db8			jsr 	RSLoadPosition 				; reload the position from offset 1.
.1dfd	a9 04		lda #$04			lda 	#4 							; throw 4 bytes from stack.
.1dff	20 9b 2d	jsr $2d9b			jsr 	RSFree
.1e02	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/readdata.asm

.0c08					dataPtr:
>0c08							.fill 	2
.0c0a					dataIndex:
>0c0a							.fill 	1
.1e03					CommandRead:
.1e03	a2 00		ldx #$00			ldx 	#0 							; get a reference to a variable in stack:0
.1e05	20 04 27	jsr $2704			jsr 	EvaluateReference
.1e08	20 49 1e	jsr $1e49			jsr 	SwapDPCP 					; use the data pointer.
.1e0b	b1 28		lda ($28),y			lda 	(codePtr),y 				; see where it is.
.1e0d	c8		iny				iny
.1e0e	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; if it is on a comma, it is in data.
.1e10	f0 07		beq $1e19			beq 	_CRInData
.1e12	88		dey				dey
.1e13	a9 dc		lda #$dc			lda 	#TKW_DATA 					; scan forward to a DATA statement.
.1e15	aa		tax				tax
.1e16	20 ef 2c	jsr $2cef			jsr 	ScanForward
.1e19					_CRInData:
.1e19	a2 01		ldx #$01			ldx 	#1 							; evaluate a value at Stack,1
.1e1b	20 b2 26	jsr $26b2			jsr 	Evaluate
.1e1e	ca		dex				dex 								; and write the value.
.1e1f	20 f4 19	jsr $19f4			jsr 	WriteValue
.1e22	20 49 1e	jsr $1e49			jsr 	SwapDPCP 					; get the code pointer back.
.1e25	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows ?
.1e27	c8		iny				iny
.1e28	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; if comma, another variable
.1e2a	f0 d7		beq $1e03			beq 	CommandRead
.1e2c	88		dey				dey
.1e2d	60		rts				rts
.1e2e					CommandData:
.1e2e	a9 80		lda #$80			lda 	#TOK_EOL 					; go forward to end of line or colon.
.1e30	a2 ca		ldx #$ca			ldx 	#TKW_COLON
.1e32	20 ef 2c	jsr $2cef			jsr 	ScanForward
.1e35	88		dey				dey 								; ending on EOL is a scan issue, as it increments
.1e36	60		rts				rts
.1e37					CommandRestore:
.1e37	ad c8 0a	lda $0ac8			lda 	basePage
.1e3a	8d 08 0c	sta $0c08			sta 	dataPtr
.1e3d	ad c9 0a	lda $0ac9			lda 	basePage+1
.1e40	8d 09 0c	sta $0c09			sta 	dataPtr+1
.1e43	a9 03		lda #$03			lda 	#3
.1e45	8d 0a 0c	sta $0c0a			sta 	dataIndex
.1e48	60		rts				rts
.1e49					SwapDPCP:
.1e49	8a		txa				txa
.1e4a	48		pha				pha
.1e4b	98		tya				tya 								; swap Y, DataIndex
.1e4c	ac 0a 0c	ldy $0c0a			ldy 	DataIndex
.1e4f	8d 0a 0c	sta $0c0a			sta 	DataIndex
.1e52	a5 28		lda $28				lda 	codePtr 					; swap code/dataptr low
.1e54	ae 08 0c	ldx $0c08			ldx 	dataptr
.1e57	8d 08 0c	sta $0c08			sta 	dataPtr
.1e5a	86 28		stx $28				stx 	codePtr
.1e5c	a5 29		lda $29				lda 	codePtr+1 					; swap code/dataptr high.
.1e5e	ae 09 0c	ldx $0c09			ldx 	dataptr+1
.1e61	8d 09 0c	sta $0c09			sta 	dataPtr+1
.1e64	86 29		stx $29				stx 	codePtr+1
.1e66	68		pla				pla
.1e67	aa		tax				tax
.1e68	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/rem.asm

.1e69					Command_Rem:
.1e69					Command_Rem2:
.1e69	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows
.1e6b	c9 85		cmp #$85			cmp 	#TOK_STR 					; if it is a string then skip it.
.1e6d	d0 06		bne $1e75			bne 	_CRNotString
.1e6f	c8		iny				iny
.1e70	98		tya				tya
.1e71	38		sec				sec
.1e72	71 28		adc ($28),y			adc 	(codePtr),y 				; get string size, add to Y, +1 for the length
.1e74	a8		tay				tay
.1e75					_CRNotString:
.1e75	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/repeat.asm

.1e76					Command_Repeat:
.1e76	a2 04		ldx #$04			ldx 	#4 							; allocate 4 bytes on stack for REPEAT
.1e78	a9 52		lda #$52			lda 	#markerREPEAT 				; repeat marker allocate 4 bytes
.1e7a	20 79 2d	jsr $2d79			jsr 	RSClaim
.1e7d	a9 01		lda #$01			lda 	#1 							; save position at offset 1.
.1e7f	20 a5 2d	jsr $2da5			jsr 	RSSavePosition
.1e82	60		rts				rts
.1e83					Command_Until:
.1e83	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.1e85	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.1e87	c9 52		cmp #$52			cmp 	#markerREPEAT 						; does it match
.1e89	f0 05		beq $1e90			beq 	_isok
.1e8b	a2 0f		ldx #$0f			ldx 	#ErrorID_untilErr
.1e8d	20 85 11	jsr $1185		jsr	errorHandler
.1e90					_isok:
.1e90	20 cf 26	jsr $26cf			jsr 	EvaluateRootInteger 		; at the bottom.
.1e93	20 89 2c	jsr $2c89			jsr 	MInt32Zero					; check if TOS zero
.1e96	d0 06		bne $1e9e			bne 	_CUExit
.1e98	a9 01		lda #$01			lda 	#1
.1e9a	20 b8 2d	jsr $2db8			jsr 	RSLoadPosition 				; reload the position from offset 1.
.1e9d	60		rts				rts
.1e9e					_CUExit:
.1e9e	a9 04		lda #$04			lda 	#4 							; throw 4 bytes from stack.
.1ea0	20 9b 2d	jsr $2d9b			jsr 	RSFree
.1ea3	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/run.asm

.0c0b					breakCounter:
>0c0b								.fill 	1
.0c0c					breakIncrement:
>0c0c								.fill 	1
.1ea4					Command_Run:
.1ea4					XCommand_Run:
.1ea4	a2 ff		ldx #$ff			ldx 	#$FF 						; reset the stack.
.1ea6	9a		txs				txs
.1ea7	20 11 1f	jsr $1f11			jsr 	BreakOn 					; turn break on
.1eaa	20 77 17	jsr $1777			jsr 	CommandClear 				; clear everything.
.1ead	20 17 1f	jsr $1f17			jsr 	ResetCodeAddress 			; back to the start.
.1eb0					Command_RunFrom:
.1eb0	a0 03		ldy #$03			ldy 	#3 							; over offset/line #
.1eb2					CRNextInstruction:
.1eb2	64 3a		stz $3a				stz 	softMemAlloc+1
.1eb4	ad 0b 0c	lda $0c0b			lda 	breakCounter 				; check for break.
.1eb7	6d 0c 0c	adc $0c0c			adc 	breakIncrement
.1eba	8d 0b 0c	sta $0c0b			sta 	breakCounter
.1ebd	90 05		bcc $1ec4			bcc 	_CRNoChecks
.1ebf	a2 00		ldx #$00		ldx	#0
.1ec1	20 64 11	jsr $1164		jsr	deviceHandler
.1ec4					_CRNoChecks
.1ec4	b1 28		lda ($28),y			lda 	(codePtr),y 				; get next token.
.1ec6	10 1c		bpl $1ee4			bpl 	_CRNotToken
.1ec8	c9 c9		cmp #$c9			cmp 	#TOK_TOKENS 				; if in the tokens then do that token.
.1eca	b0 0c		bcs $1ed8			bcs 	_CRExecute
.1ecc	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST 				; unary is ignored.
.1ece	b0 54		bcs $1f24			bcs 	Unimplemented
.1ed0	c9 99		cmp #$99			cmp 	#TOK_STRUCTST 				; execute structures.
.1ed2	b0 04		bcs $1ed8			bcs 	_CRExecute
.1ed4	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; if one of the system tokens $80-$85 do that
.1ed6	b0 16		bcs $1eee			bcs 	_CRCheckIndirect 			; if in that unused range check for ! or ?
.1ed8					_CRExecute:
.1ed8	c8		iny				iny 								; consume it.
.1ed9	0a		asl a				asl 	a 							; double it, losing most significant bit.
.1eda	aa		tax				tax
.1edb	20 e1 1e	jsr $1ee1			jsr 	_CRRunRoutine 				; we want to do jsr (group0vectors,x)
.1ede	4c b2 1e	jmp $1eb2			jmp 	CRNextInstruction
.1ee1					_CRRunRoutine:
.1ee1	7c 2e 1f	jmp ($1f2e,x)			jmp 	(Group0Vectors,x)
.1ee4					_CRNotToken:
.1ee4	c9 40		cmp #$40			cmp 	#$40 						; if 0-3F then it is a letter
.1ee6	b0 3c		bcs $1f24			bcs 	Unimplemented
.1ee8					_CRDefaultLet:
.1ee8	20 e1 19	jsr $19e1			jsr 	CommandLet 					; do the default, LET
.1eeb	4c b2 1e	jmp $1eb2			jmp 	CRNextInstruction
.1eee					_CRCheckIndirect:
.1eee	c9 97		cmp #$97			cmp 	#TKW_PLING 					; !<term> =
.1ef0	f0 f6		beq $1ee8			beq 	_CRDefaultLet
.1ef2	c9 98		cmp #$98			cmp 	#TKW_QMARK 					; ?<term> =
.1ef4	f0 f2		beq $1ee8			beq 	_CRDefaultLet
.1ef6	d0 2c		bne $1f24			bne 	Unimplemented
.1ef8					CommandShift1:
.1ef8	b1 28		lda ($28),y			lda 	(codePtr),y 				; get shifted value
.1efa	10 28		bpl $1f24			bpl 	Unimplemented 				; we have an error as this should not happen.
.1efc	0a		asl a				asl 	a 							; double into X
.1efd	aa		tax				tax
.1efe	c8		iny				iny 								; advance over it.
.1eff	7c ee 1f	jmp ($1fee,x)			jmp 	(Group1Vectors-12,x) 		; and do the code.
.1f02					CommandShift2:
.1f02	a9 ff		lda #$ff			lda 	#$FF 						; $FF means command not unary function.
.1f04	20 63 14	jsr $1463		jsr	extensionHandler
.1f07	60		rts				rts
.1f08					CommandColon:
.1f08	60		rts				rts
.1f09					CommandBreak:
.1f09	20 cf 26	jsr $26cf			jsr 	EvaluateRootInteger
.1f0c	20 89 2c	jsr $2c89			jsr 	MInt32Zero
.1f0f	f0 02		beq $1f13			beq 	BreakOff
.1f11					BreakOn:
.1f11	a2 08		ldx #$08			ldx 	#8
.1f13					BreakOff:
.1f13	8e 0c 0c	stx $0c0c			stx 	breakIncrement
.1f16	60		rts				rts
.1f17					ResetCodeAddress:
.1f17	ad c8 0a	lda $0ac8			lda 	basePage 					; copy basePage to code Pointer
.1f1a	85 28		sta $28				sta 	codePtr
.1f1c	ad c9 0a	lda $0ac9			lda 	basePage+1
.1f1f	85 29		sta $29				sta 	codePtr+1
.1f21	a0 03		ldy #$03			ldy 	#3 							; offset after offset link and line#
.1f23	60		rts				rts
.1f24					Unimplemented:
.1f24	a2 01		ldx #$01			ldx 	#ErrorID_Missing
.1f26	20 85 11	jsr $1185		jsr	errorHandler
.1f29					TKErr01:
.1f29					TKErr02:
.1f29					TKErr03:
.1f29					TKErr04:
.1f29					TKErr05:
.1f29					TKErr06:
.1f29					TKErr07:
.1f29					TKErr08:
.1f29					TKErr09:
.1f29					TKErr10:
.1f29	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.1f2b	20 85 11	jsr $1185		jsr	errorHandler

;******  Processing file: main/commands/../../generated/tokenvectors0.inc

.1f2e					Group0Vectors:
>1f2e	f1 20					.word	AdvanceNextLine          ; $80 [[eol]]
>1f30	f8 1e					.word	CommandShift1            ; $81 [[sh1]]
>1f32	02 1f					.word	CommandShift2            ; $82 [[sh2]]
>1f34	29 1f					.word	TKErr09                  ; $83 [[sh3]]
>1f36	29 1f					.word	TKErr10                  ; $84 [[fpc]]
>1f38	29 1f					.word	TKErr08                  ; $85 [[str]]
>1f3a	b5 22					.word	AndHandler               ; $86 and
>1f3c	a2 22					.word	OrHandler                ; $87 or
>1f3e	8f 22					.word	XorHandler               ; $88 xor
>1f40	d7 23					.word	CompareGreaterEq         ; $89 >=
>1f42	e1 23					.word	CompareLessEq            ; $8a <=
>1f44	c3 23					.word	CompareGreater           ; $8b >
>1f46	b9 23					.word	CompareLess              ; $8c <
>1f48	af 23					.word	CompareEquals            ; $8d =
>1f4a	cd 23					.word	CompareNotEquals         ; $8e <>
>1f4c	20 22					.word	AddHandler               ; $8f +
>1f4e	43 22					.word	SubHandler               ; $90 -
>1f50	db 22					.word	ShrHandler               ; $91 >>
>1f52	c8 22					.word	ShlHandler               ; $92 <<
>1f54	56 22					.word	MulHandler               ; $93 *
>1f56	69 22					.word	DivHandler               ; $94 /
>1f58	7c 22					.word	ModHandler               ; $95 mod
>1f5a	14 23					.word	PowerHandler             ; $96 ^
>1f5c	ee 22					.word	WordRefHandler           ; $97 !
>1f5e	01 23					.word	ByteRefHandler           ; $98 ?
>1f60	76 1e					.word	Command_Repeat           ; $99 repeat
>1f62	b9 21					.word	Command_While            ; $9a while
>1f64	e0 17					.word	Command_FOR              ; $9b for
>1f66	ef 18					.word	CommandIf                ; $9c if
>1f68	29 1f					.word	TKErr04                  ; $9d defproc
>1f6a	83 1e					.word	Command_Until            ; $9e until
>1f6c	dc 21					.word	Command_Wend             ; $9f wend
>1f6e	41 18					.word	Command_NEXT             ; $a0 next
>1f70	29 1f					.word	TKErr06                  ; $a1 then
>1f72	2a 19					.word	Command_ENDIF            ; $a2 endif
>1f74	e8 1d					.word	ReturnProc               ; $a3 endproc
>1f76	b9 25					.word	UnaryParenthesis         ; $a4 (
>1f78	17 27					.word	UnaryLen                 ; $a5 len(
>1f7a	5b 27					.word	UnarySgn                 ; $a6 sgn(
>1f7c	44 27					.word	UnaryAbs                 ; $a7 abs(
>1f7e	b4 27					.word	Unary_Random             ; $a8 random(
>1f80	fe 27					.word	Unary_Page               ; $a9 page
>1f82	5e 2c					.word	MInt32True               ; $aa true
>1f84	62 2c					.word	MInt32False              ; $ab false
>1f86	c9 27					.word	Unary_Min                ; $ac min(
>1f88	cd 27					.word	Unary_Max                ; $ad max(
>1f8a	d6 28					.word	UnarySys                 ; $ae sys(
>1f8c	7f 28					.word	UnaryTimer               ; $af timer(
>1f8e	0e 26					.word	EventFunction            ; $b0 event(
>1f90	a8 28					.word	UnaryGet                 ; $b1 get(
>1f92	98 28					.word	UnaryInkey               ; $b2 inkey(
>1f94	4f 28					.word	UnaryAlloc               ; $b3 alloc(
>1f96	0f 29					.word	ExecChr                  ; $b4 chr$(
>1f98	3f 29					.word	ExecLeft                 ; $b5 left$(
>1f9a	5c 29					.word	ExecMid                  ; $b6 mid$(
>1f9c	84 29					.word	ExecRight                ; $b7 right$(
>1f9e	f1 23					.word	Event_Str                ; $b8 str$(
>1fa0	20 24					.word	UnaryVal                 ; $b9 val(
>1fa2	72 27					.word	UnaryPeek                ; $ba peek(
>1fa4	78 27					.word	UnaryDeek                ; $bb deek(
>1fa6	7e 27					.word	UnaryLeek                ; $bc leek(
>1fa8	35 27					.word	UnaryAsc                 ; $bd asc(
>1faa	29 28					.word	UnaryIntToFloat          ; $be int(
>1fac	3c 28					.word	UnaryFloatToInt          ; $bf float(
>1fae	23 24					.word	UnaryIsVal               ; $c0 isval(
>1fb0	26 29					.word	ExecUpper                ; $c1 upper$(
>1fb2	23 29					.word	ExecLower                ; $c2 lower$(
>1fb4	0c 28					.word	UnaryReference           ; $c3 @
>1fb6	22 28					.word	UnaryComplement          ; $c4 ~
>1fb8	1f 28					.word	UnaryHexMarker           ; $c5 &
>1fba	c1 28					.word	UnaryGetString           ; $c6 get$(
>1fbc	c7 28					.word	UnaryInkeyString         ; $c7 inkey$(
>1fbe	fe 28					.word	UnaryMem                 ; $c8 mem
>1fc0	29 1f					.word	TKErr01                  ; $c9 )
>1fc2	08 1f					.word	CommandColon             ; $ca :
>1fc4	29 1f					.word	TKErr02                  ; $cb ,
>1fc6	29 1f					.word	TKErr03                  ; $cc ;
>1fc8	69 1e					.word	Command_Rem2             ; $cd '
>1fca	29 1f					.word	TKErr07                  ; $ce to
>1fcc	29 1f					.word	TKErr05                  ; $cf step
>1fce	7b 1d					.word	CallProc                 ; $d0 proc
>1fd0	93 1b					.word	CommandLocal             ; $d1 local
>1fd2	d2 17					.word	Command_Dim              ; $d2 dim
>1fd4	69 1e					.word	Command_Rem              ; $d3 rem
>1fd6	e1 19					.word	CommandLet               ; $d4 let
>1fd8	2b 19					.word	Command_Input            ; $d5 input
>1fda	24 19					.word	Command_ELSE             ; $d6 else
>1fdc	98 21					.word	Command_VDU              ; $d7 vdu
>1fde	e0 1c					.word	Command_Print            ; $d8 print
>1fe0	66 21					.word	CommandGOTO              ; $d9 goto
>1fe2	3b 21					.word	CommandGOSUB             ; $da gosub
>1fe4	4e 21					.word	CommandRETURN            ; $db return
>1fe6	2e 1e					.word	CommandData              ; $dc data
>1fe8	69 17					.word	Command_Assert           ; $dd assert
>1fea	a3 1c					.word	Command_Poke             ; $de poke
>1fec	a7 1c					.word	Command_Doke             ; $df doke
>1fee	ab 1c					.word	Command_Loke             ; $e0 loke
>1ff0	0b 21					.word	Command_Ink              ; $e1 ink
>1ff2	16 21					.word	Command_Paper            ; $e2 paper
>1ff4	05 21					.word	Command_CLS              ; $e3 cls
>1ff6	21 21					.word	Command_Locate           ; $e4 locate
>1ff8	09 1f					.word	CommandBreak             ; $e5 break

;******  Return to file: main/commands/run.asm


;******  Processing file: main/commands/../../generated/tokenvectors1.inc

.1ffa					Group1Vectors:
>1ffa	77 17					.word	CommandClear             ; $86 clear
>1ffc	3a 1b					.word	CommandLoad              ; $87 load
>1ffe	4f 1b					.word	CommandSave              ; $88 save
>2000	5f 1a					.word	CommandList              ; $89 list
>2002	95 1c					.word	Command_New              ; $8a new
>2004	a4 1e					.word	Command_Run              ; $8b run
>2006	03 1e					.word	CommandRead              ; $8c read
>2008	37 1e					.word	CommandRestore           ; $8d restore
>200a	eb 20					.word	CommandEnd               ; $8e end
>200c	e6 20					.word	CommandStop              ; $8f stop
>200e	ee 20					.word	CommandXemu              ; $90 xemu

;******  Return to file: main/commands/run.asm


;******  Return to file: main/main.asm


;******  Processing file: main/commands/scanner.asm

.0c0d					procList:
>0c0d							.fill 	2		 					; terminated by name high being zero.
.0c0f					yInLine:
>0c0f							.fill 	1
.2010					FindProcedure:
.2010	8c 0f 0c	sty $0c0f			sty 	yInLine 					; save current position.
.2013	20 ce 20	jsr $20ce			jsr 	CalculateProcedureHash		; calculate the hash of the procedure.
.2016	85 2c		sta $2c				sta 	temp1
.2018	ad 0d 0c	lda $0c0d			lda		procList 					; put procList address in temp2
.201b	85 2e		sta $2e				sta 	temp2
.201d	ad 0e 0c	lda $0c0e			lda 	procList+1
.2020	85 2f		sta $2f				sta 	temp2+1
.2022	a0 00		ldy #$00			ldy 	#0 							; position in this table.
.2024					_FPLoop:
.2024	b1 2e		lda ($2e),y			lda 	(temp2),y
.2026	f0 4f		beq $2077			beq 	_FPError 					; if so, we don't know this procedure.
.2028	85 2b		sta $2b				sta 	temp0+1 					; copy MSB/LSB to temp0 as we go.
.202a	c8		iny				iny
.202b	b1 2e		lda ($2e),y			lda 	(temp2),y
.202d	85 2a		sta $2a				sta 	temp0
.202f	c8		iny				iny
.2030	b1 2e		lda ($2e),y			lda 	(temp2),y					; check the procedure hash.
.2032	c5 2c		cmp $2c				cmp 	temp1
.2034	d0 2b		bne $2061			bne 	_FPNext 					; hash is different, go to next.
.2036	38		sec				sec
.2037	ad 0f 0c	lda $0c0f			lda 	yInLine 					; position in line must be at least 4
.203a	e9 04		sbc #$04			sbc 	#4
.203c	18		clc				clc
.203d	65 28		adc $28				adc 	codePtr
.203f	85 30		sta $30				sta 	temp3
.2041	a5 29		lda $29				lda 	codePtr+1
.2043	69 00		adc #$00			adc 	#0
.2045	85 31		sta $31				sta 	temp3+1
.2047	98		tya				tya
.2048	48		pha				pha
.2049	a0 04		ldy #$04			ldy 	#4
.204b					_FPCName:
.204b	b1 30		lda ($30),y			lda 	(temp3),y 					; check the same
.204d	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.204f	d0 0e		bne $205f			bne 	_FPpulYNext 				; if different go to next one.
.2051	c8		iny				iny
.2052	c9 3a		cmp #$3a			cmp 	#$3A
.2054	90 f5		bcc $204b			bcc 	_FPCName 					; compare the whole lot....
.2056	68		pla				pla 								; throw away the saved Y
.2057	98		tya				tya 								; length of name is Y-4
.2058	38		sec				sec
.2059	e9 04		sbc #$04			sbc 	#4
.205b	ac 0f 0c	ldy $0c0f			ldy 	yInLine  					; get the original Y back
.205e	60		rts				rts
.205f					_FPpulYNext:
.205f	68		pla				pla
.2060	a8		tay				tay
.2061					_FPNext:
.2061	c8		iny				iny 								; next procedure record.
.2062	10 c0		bpl $2024			bpl 	_FPLoop 					; if done 128 already ... e.g. Y -ve
.2064	98		tya				tya 								; subtract 128 from Y
.2065	38		sec				sec
.2066	e9 80		sbc #$80			sbc 	#128
.2068	a8		tay				tay
.2069	18		clc				clc 								; add 128 to temp2, so we can have more than
.206a	a5 2e		lda $2e				lda 	temp2 						; 255/3 = 85 procedures
.206c	69 80		adc #$80			adc 	#128
.206e	85 2e		sta $2e				sta 	temp2
.2070	90 b2		bcc $2024			bcc 	_FPLoop
.2072	e6 2f		inc $2f				inc 	temp2+1
.2074	4c 24 20	jmp $2024			jmp 	_FPLoop
.2077					_FPError:
.2077	a2 17		ldx #$17			ldx 	#ErrorID_NoProc
.2079	20 85 11	jsr $1185		jsr	errorHandler
.207c					ScanProc:
.207c	98		tya				tya
.207d	48		pha				pha
.207e	a5 35		lda $35				lda 	lowMemory 					; copy the start of the procList, at low memory
.2080	8d 0d 0c	sta $0c0d			sta 	procList
.2083	a5 36		lda $36				lda 	lowMemory+1
.2085	8d 0e 0c	sta $0c0e			sta 	procList+1
.2088	20 17 1f	jsr $1f17			jsr 	ResetCodeAddress 			; back to the start.
.208b					_ScanLoop:
.208b	a0 00		ldy #$00			ldy 	#0 							; check reached program end
.208d	b1 28		lda ($28),y			lda 	(codePtr),y
.208f	f0 2a		beq $20bb			beq 	_ScanExit
.2091	a0 03		ldy #$03			ldy 	#3							; get first token
.2093	b1 28		lda ($28),y			lda 	(codePtr),y
.2095	c9 9d		cmp #$9d			cmp 	#TKW_DEFPROC				; skip to next if not DEFPROC
.2097	d0 12		bne $20ab			bne 	_ScanNext
.2099	a5 29		lda $29				lda 	codePtr+1 					; write high and low address of this line.
.209b	20 c3 20	jsr $20c3			jsr 	_ScanWrite
.209e	a5 28		lda $28				lda 	codePtr
.20a0	20 c3 20	jsr $20c3			jsr 	_ScanWrite
.20a3	a0 04		ldy #$04			ldy 	#4 							; start of name part
.20a5	20 ce 20	jsr $20ce			jsr 	CalculateProcedureHash 		; calculate procedure hash
.20a8	20 c3 20	jsr $20c3			jsr 	_ScanWrite					; and write that
.20ab					_ScanNext:
.20ab	18		clc				clc
.20ac	a0 00		ldy #$00			ldy 	#0
.20ae	b1 28		lda ($28),y			lda 	(codePtr),y
.20b0	65 28		adc $28				adc 	codePtr
.20b2	85 28		sta $28				sta 	codePtr
.20b4	90 d5		bcc $208b			bcc 	_ScanLoop
.20b6	e6 29		inc $29				inc 	codePtr+1
.20b8	4c 8b 20	jmp $208b			jmp 	_ScanLoop
.20bb					_ScanExit:
.20bb	a9 00		lda #$00			lda 	#0 							; write ending zero.
.20bd	20 c3 20	jsr $20c3			jsr 	_ScanWrite
.20c0	68		pla				pla
.20c1	a8		tay				tay
.20c2	60		rts				rts
.20c3					_ScanWrite:
.20c3	a0 00		ldy #$00			ldy 	#0
.20c5	91 35		sta ($35),y			sta 	(lowMemory),y
.20c7	e6 35		inc $35				inc 	lowMemory
.20c9	d0 02		bne $20cd			bne 	_SWNoCarry
.20cb	e6 36		inc $36				inc 	lowMemory+1
.20cd					_SWNoCarry:
.20cd	60		rts				rts
.20ce					CalculateProcedureHash:
.20ce	a9 00		lda #$00			lda 	#0 							; clear hash.
.20d0	85 2a		sta $2a				sta 	temp0
.20d2					_CPHLoop:
.20d2	18		clc				clc 								; add character and rotate and add carry back in
.20d3	b1 28		lda ($28),y			lda 	(codePtr),y
.20d5	65 2a		adc $2a				adc 	temp0
.20d7	6a		ror a				ror 	a
.20d8	69 0d		adc #$0d			adc 	#13 						; primes usually good for this sort of thing.
.20da	85 2a		sta $2a				sta 	temp0 						; (down with this sort of thing)
.20dc	b1 28		lda ($28),y			lda 	(codePtr),y
.20de	c8		iny				iny 								; advance incase we go round again.
.20df	c9 3a		cmp #$3a			cmp 	#$3A
.20e1	90 ef		bcc $20d2			bcc 	_CPHLoop
.20e3	a5 2a		lda $2a				lda 	temp0
.20e5	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/stopend.asm

.20e6					CommandStop:
.20e6	a2 06		ldx #$06			ldx 	#ErrorID_Stop
.20e8	20 85 11	jsr $1185		jsr	errorHandler
.20eb					CommandEnd:
.20eb	4c c7 2d	jmp $2dc7			jmp 	WarmStart
.20ee					CommandXemu:
.20ee	4c ff ff	jmp $ffff			jmp 	$FFFF 						; fudge to crash out of emulator
.20f1					AdvanceNextLine:
.20f1	a0 00		ldy #$00			ldy 	#0 							; get offset
.20f3	b1 28		lda ($28),y			lda 	(codePtr),y
.20f5	18		clc				clc 								; add to codePtr
.20f6	65 28		adc $28				adc 	codePtr
.20f8	85 28		sta $28				sta 	codePtr
.20fa	90 02		bcc $20fe			bcc 	_ANLNoCarry
.20fc	e6 29		inc $29				inc 	codePtr+1
.20fe					_ANLNoCarry:
.20fe	b1 28		lda ($28),y			lda 	(codePtr),y 				; if end of program (or was just stand alone.
.2100	f0 e9		beq $20eb			beq 	CommandEnd 					; execute END
.2102	a0 03		ldy #$03			ldy 	#3 							; start of tokens on line.
.2104	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/text.asm

.2105					Command_CLS:
.2105	a2 02		ldx #$02		ldx	#2
.2107	20 64 11	jsr $1164		jsr	deviceHandler
.210a	60		rts				rts
.210b					Command_Ink:
.210b	a2 00		ldx #$00			ldx 	#0
.210d	20 d9 26	jsr $26d9			jsr 	EvaluateSmallInteger
.2110	a2 08		ldx #$08		ldx	#8
.2112	20 64 11	jsr $1164		jsr	deviceHandler
.2115	60		rts				rts
.2116					Command_Paper:
.2116	a2 00		ldx #$00			ldx 	#0
.2118	20 d9 26	jsr $26d9			jsr 	EvaluateSmallInteger
.211b	a2 12		ldx #$12		ldx	#18
.211d	20 64 11	jsr $1164		jsr	deviceHandler
.2120	60		rts				rts
.2121					Command_Locate:
.2121	a2 00		ldx #$00			ldx 	#0
.2123	20 d9 26	jsr $26d9			jsr 	EvaluateSmallInteger
.2126	20 e2 2c	jsr $2ce2			jsr 	CheckComma
.2129	e8		inx				inx
.212a	20 d9 26	jsr $26d9			jsr 	EvaluateSmallInteger
.212d	98		tya				tya
.212e	48		pha				pha
.212f	a4 49		ldy $49				ldy 	esInt0+1
.2131	a5 48		lda $48				lda 	esInt0
.2133	a2 10		ldx #$10		ldx	#16
.2135	20 64 11	jsr $1164		jsr	deviceHandler
.2138	68		pla				pla
.2139	a8		tay				tay
.213a	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/transfer.asm

.213b					CommandGOSUB:
.213b	20 cf 26	jsr $26cf			jsr 	EvaluateRootInteger			; get GOSUB line on stack top.
.213e	a2 04		ldx #$04			ldx 	#4 							; allocate 4 bytes on stack for GOSUB
.2140	a9 47		lda #$47			lda 	#markerGOSUB  				; <marker> <return addr/offset>
.2142	20 79 2d	jsr $2d79			jsr 	RSClaim
.2145	a9 01		lda #$01			lda 	#1 							; save position at offset 1.
.2147	20 a5 2d	jsr $2da5			jsr 	RSSavePosition
.214a	a2 00		ldx #$00			ldx 	#0 							; point back at GOSUB line
.214c	f0 1b		beq $2169			beq 	GotoTOS 					; and do a GOTO there.
.214e					CommandRETURN:
.214e	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.2150	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.2152	c9 47		cmp #$47			cmp 	#markerGOSUB 						; does it match
.2154	f0 05		beq $215b			beq 	_isok
.2156	a2 0e		ldx #$0e			ldx 	#ErrorID_returnErr
.2158	20 85 11	jsr $1185		jsr	errorHandler
.215b					_isok:
.215b	a9 01		lda #$01			lda 	#1
.215d	20 b8 2d	jsr $2db8			jsr 	RSLoadPosition 				; reload the position from offset 1.
.2160	a9 04		lda #$04			lda 	#4 							; throw 4 bytes from stack.
.2162	20 9b 2d	jsr $2d9b			jsr 	RSFree
.2165	60		rts				rts
.2166					CommandGOTO:
.2166	20 cf 26	jsr $26cf			jsr 	EvaluateRootInteger 		; get GOTO line on stack top.
.2169					GotoTOS:
.2169	20 17 1f	jsr $1f17			jsr 	ResetCodeAddress 			; simple search.
.216c					_GotoSearch:
.216c	a0 00		ldy #$00			ldy 	#0 							; get offset
.216e	b1 28		lda ($28),y			lda 	(codePtr),y
.2170	f0 21		beq $2193			beq 	_GotoError 					; not found.
.2172	c8		iny				iny									; check LSB match
.2173	b1 28		lda ($28),y			lda 	(codePtr),y
.2175	d5 48		cmp $48,x			cmp 	esInt0,x
.2177	d0 07		bne $2180			bne 	_GotoNext
.2179	c8		iny				iny
.217a	b1 28		lda ($28),y			lda 	(codePtr),y
.217c	d5 50		cmp $50,x			cmp 	esInt1,x
.217e	f0 10		beq $2190			beq 	_GotoFound
.2180					_GotoNext:
.2180	a0 00		ldy #$00			ldy 	#0 							; go next line
.2182	b1 28		lda ($28),y			lda 	(codePtr),y
.2184	18		clc				clc
.2185	65 28		adc $28				adc 	codePtr
.2187	85 28		sta $28				sta 	codePtr
.2189	90 e1		bcc $216c			bcc 	_GotoSearch
.218b	e6 29		inc $29				inc 	codePtr+1
.218d	4c 6c 21	jmp $216c			jmp 	_GotoSearch
.2190					_GotoFound:
.2190	a0 03		ldy #$03			ldy 	#3 							; continue from that line
.2192	60		rts				rts
.2193					_GotoError:
.2193	a2 0c		ldx #$0c			ldx 	#ErrorID_LineNumber
.2195	20 85 11	jsr $1185		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/commands/vdu.asm

.2198					Command_VDU:
.2198	20 cf 26	jsr $26cf			jsr 	EvaluateRootInteger 			; get integer at root.
.219b	a5 48		lda $48				lda 	esInt0
.219d	a2 14		ldx #$14		ldx	#20
.219f	20 64 11	jsr $1164		jsr	deviceHandler
.21a2					_CVNext:
.21a2	b1 28		lda ($28),y			lda 	(codePtr),y 					; what follows ?
.21a4	c8		iny				iny
.21a5	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 						; comma, do again
.21a7	f0 ef		beq $2198			beq 	Command_VDU
.21a9	c9 cc		cmp #$cc			cmp 	#TKW_SEMICOLON 					; semicolon, print MSB
.21ab	d0 0a		bne $21b7			bne 	_CVExit
.21ad	a5 50		lda $50				lda 	esInt1
.21af	a2 14		ldx #$14		ldx	#20
.21b1	20 64 11	jsr $1164		jsr	deviceHandler
.21b4	4c a2 21	jmp $21a2			jmp 	_CVNext
.21b7	88		dey		_CVExit:dey
.21b8	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/while.asm

.21b9					Command_While:
.21b9	a9 57		lda #$57			lda 	#markerWhile 				; gosub marker allocate 4 bytes.
.21bb	a2 04		ldx #$04			ldx 	#4
.21bd	20 79 2d	jsr $2d79			jsr 	RSClaim 					; create on stack.
.21c0	88		dey				dey
.21c1	a9 01		lda #$01			lda 	#1
.21c3	20 a5 2d	jsr $2da5			jsr 	RSSavePosition 				; save position before the WHILE keyword.
.21c6	c8		iny				iny
.21c7	20 d1 26	jsr $26d1			jsr 	EvaluateInteger				; get the conditional
.21ca	20 89 2c	jsr $2c89			jsr 	MInt32Zero 	 				; if zero, skip forward to the fail code.
.21cd	f0 01		beq $21d0			beq 	_CWFail
.21cf	60		rts				rts
.21d0					_CWFail:
.21d0	a9 04		lda #$04			lda 	#4
.21d2	20 9b 2d	jsr $2d9b			jsr 	RSFree 						; close the just opened position.
.21d5	a9 9f		lda #$9f			lda 	#TKW_WEND 					; scan forward past WEND.
.21d7	aa		tax				tax
.21d8	20 ef 2c	jsr $2cef			jsr 	ScanForward
.21db	60		rts				rts
.21dc					Command_Wend:
.21dc	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.21de	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.21e0	c9 57		cmp #$57			cmp 	#markerWHILE 						; does it match
.21e2	f0 05		beq $21e9			beq 	_isok
.21e4	a2 11		ldx #$11			ldx 	#ErrorID_wendErr
.21e6	20 85 11	jsr $1185		jsr	errorHandler
.21e9					_isok:
.21e9	a9 01		lda #$01			lda 	#1
.21eb	20 b8 2d	jsr $2db8			jsr 	RSLoadPosition				; go back until true
.21ee	a9 04		lda #$04			lda 	#4
.21f0	20 9b 2d	jsr $2d9b			jsr 	RSFree 						; close the loop
.21f3	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/binary.asm

.21f4					BinaryProcess:
.21f4	b5 40		lda $40,x			lda 	esType,x 					; or type bytes together and check bit 6.
.21f6	15 41		ora $41,x			ora 	esType+1,x 					; (the float bit)
.21f8	0a		asl a				asl 	a
.21f9	30 0e		bmi $2209			bmi 	_BPStringType 				; if bit 6 is set, then string type, error
.21fb	18		clc				clc 								; return CC for integer
.21fc	29 02		and #$02			and 	#$02 						; $02 because of ASL A. check original bit 1.
.21fe	f0 08		beq $2208			beq 	_BPExit 					; if both integer then return with CC.
.2200	20 0e 22	jsr $220e			jsr 	BPMakeBothFloat 			; make both float
.2203	a9 01		lda #$01			lda 	#$01 						; set result type to float
.2205	95 40		sta $40,x			sta 	esType,x
.2207	38		sec				sec 								; and return with carry set.
.2208					_BPExit:
.2208	60		rts				rts
.2209					_BPStringType:
.2209	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.220b	20 85 11	jsr $1185		jsr	errorHandler
.220e					BPMakeBothFloat:
.220e	e8		inx				inx
.220f	20 13 22	jsr $2213			jsr 	BPMakeFloat 				; one is a float, so we do both as floats.
.2212	ca		dex				dex
.2213					BPMakeFloat:
.2213	b5 40		lda $40,x			lda 	esType,x 					; get type bit which is in bit 0
.2215	4a		lsr a				lsr 	a
.2216	b0 07		bcs $221f			bcs 	_BPIsFloat 					; already a float if set.
.2218	8a		txa				txa
.2219	a2 1a		ldx #$1a		ldx	#26
.221b	20 82 15	jsr $1582		jsr	floatingpointHandler
.221e	aa		tax				tax
.221f					_BPIsFloat:
.221f	60		rts				rts
.2220					AddHandler:
.2220	20 6f 24	jsr $246f			jsr 	DereferenceTwo 				; dereference top two on stack.
.2223	b5 40		lda $40,x			lda 	esType,x 					; check two strings.
.2225	35 41		and $41,x			and 	esType+1,x
.2227	29 40		and #$40			and 	#$40 						; if both have bit 6 set ... we have two strings
.2229	d0 10		bne $223b			bne 	_AHStringConcat				; concatenate strings.
.222b	20 f4 21	jsr $21f4			jsr 	BinaryProcess 				; check to see if either is float
.222e	b0 03		bcs $2233			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.2230	4c 46 2b	jmp $2b46			jmp 	MInt32Add 							; else do it as integer.
.2233					_IsFPOperation:
.2233	8a		txa				txa 								; call the relevant fp routine
.2234	a2 02		ldx #$02		ldx	#2
.2236	20 82 15	jsr $1582		jsr	floatingpointHandler
.2239	aa		tax				tax
.223a	60		rts				rts
.223b					_AHStringConcat:
.223b	8a		txa				txa 								; handled by the string module.
.223c	a2 04		ldx #$04		ldx	#4
.223e	20 82 30	jsr $3082		jsr	stringHandler
.2241	aa		tax				tax
.2242	60		rts				rts
.2243					SubHandler:
.2243	20 6f 24	jsr $246f			jsr 	DereferenceTwo
.2246	20 f4 21	jsr $21f4			jsr 	BinaryProcess 				; check to see if either is float
.2249	b0 03		bcs $224e			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.224b	4c 60 2b	jmp $2b60			jmp 	MInt32Sub 							; else do it as integer.
.224e					_IsFPOperation:
.224e	8a		txa				txa 								; call the relevant fp routine
.224f	a2 10		ldx #$10		ldx	#16
.2251	20 82 15	jsr $1582		jsr	floatingpointHandler
.2254	aa		tax				tax
.2255	60		rts				rts
.2256					MulHandler:
.2256	20 6f 24	jsr $246f			jsr 	DereferenceTwo
.2259	20 f4 21	jsr $21f4			jsr 	BinaryProcess 				; check to see if either is float
.225c	b0 03		bcs $2261			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.225e	4c 7a 2b	jmp $2b7a			jmp 	MInt32Multiply 							; else do it as integer.
.2261					_IsFPOperation:
.2261	8a		txa				txa 								; call the relevant fp routine
.2262	a2 0a		ldx #$0a		ldx	#10
.2264	20 82 15	jsr $1582		jsr	floatingpointHandler
.2267	aa		tax				tax
.2268	60		rts				rts
.2269					DivHandler:
.2269	20 6f 24	jsr $246f			jsr 	DereferenceTwo
.226c	20 f4 21	jsr $21f4			jsr 	BinaryProcess 				; check to see if either is float
.226f	b0 03		bcs $2274			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.2271	4c 37 2a	jmp $2a37			jmp 	MInt32SDivide 							; else do it as integer.
.2274					_IsFPOperation:
.2274	8a		txa				txa 								; call the relevant fp routine
.2275	a2 06		ldx #$06		ldx	#6
.2277	20 82 15	jsr $1582		jsr	floatingpointHandler
.227a	aa		tax				tax
.227b	60		rts				rts
.227c					ModHandler:
.227c	20 6f 24	jsr $246f			jsr 	DereferenceTwo
.227f	20 f4 21	jsr $21f4			jsr 	BinaryProcess 				; check to see if either is float
.2282	b0 03		bcs $2287			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.2284	4c b5 2a	jmp $2ab5			jmp 	MInt32Modulus 							; else do it as integer.
.2287					_IsFPOperation:
.2287	8a		txa				txa 								; call the relevant fp routine
.2288	a2 08		ldx #$08		ldx	#8
.228a	20 82 15	jsr $1582		jsr	floatingpointHandler
.228d	aa		tax				tax
.228e	60		rts				rts
.228f					XorHandler:
.228f	20 6f 24	jsr $246f			jsr 	DereferenceTwo
.2292	20 f4 21	jsr $21f4			jsr 	BinaryProcess 				; check to see if either is float
.2295	b0 03		bcs $229a			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.2297	4c e9 29	jmp $29e9			jmp 	MInt32Xor 							; else do it as integer.
.229a					_IsFPOperation:
.229a	8a		txa				txa 								; call the relevant fp routine
.229b	a2 08		ldx #$08		ldx	#8
.229d	20 82 15	jsr $1582		jsr	floatingpointHandler
.22a0	aa		tax				tax
.22a1	60		rts				rts
.22a2					OrHandler:
.22a2	20 6f 24	jsr $246f			jsr 	DereferenceTwo
.22a5	20 f4 21	jsr $21f4			jsr 	BinaryProcess 				; check to see if either is float
.22a8	b0 03		bcs $22ad			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.22aa	4c d0 29	jmp $29d0			jmp 	MInt32Or 							; else do it as integer.
.22ad					_IsFPOperation:
.22ad	8a		txa				txa 								; call the relevant fp routine
.22ae	a2 08		ldx #$08		ldx	#8
.22b0	20 82 15	jsr $1582		jsr	floatingpointHandler
.22b3	aa		tax				tax
.22b4	60		rts				rts
.22b5					AndHandler:
.22b5	20 6f 24	jsr $246f			jsr 	DereferenceTwo
.22b8	20 f4 21	jsr $21f4			jsr 	BinaryProcess 				; check to see if either is float
.22bb	b0 03		bcs $22c0			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.22bd	4c b7 29	jmp $29b7			jmp 	MInt32And 							; else do it as integer.
.22c0					_IsFPOperation:
.22c0	8a		txa				txa 								; call the relevant fp routine
.22c1	a2 08		ldx #$08		ldx	#8
.22c3	20 82 15	jsr $1582		jsr	floatingpointHandler
.22c6	aa		tax				tax
.22c7	60		rts				rts
.22c8					ShlHandler:
.22c8	20 6f 24	jsr $246f			jsr 	DereferenceTwo
.22cb	20 f4 21	jsr $21f4			jsr 	BinaryProcess 				; check to see if either is float
.22ce	b0 03		bcs $22d3			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.22d0	4c 49 23	jmp $2349			jmp 	Mint32ShiftLeftX 							; else do it as integer.
.22d3					_IsFPOperation:
.22d3	8a		txa				txa 								; call the relevant fp routine
.22d4	a2 08		ldx #$08		ldx	#8
.22d6	20 82 15	jsr $1582		jsr	floatingpointHandler
.22d9	aa		tax				tax
.22da	60		rts				rts
.22db					ShrHandler:
.22db	20 6f 24	jsr $246f			jsr 	DereferenceTwo
.22de	20 f4 21	jsr $21f4			jsr 	BinaryProcess 				; check to see if either is float
.22e1	b0 03		bcs $22e6			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.22e3	4c 4c 23	jmp $234c			jmp 	MInt32ShiftRightX 							; else do it as integer.
.22e6					_IsFPOperation:
.22e6	8a		txa				txa 								; call the relevant fp routine
.22e7	a2 08		ldx #$08		ldx	#8
.22e9	20 82 15	jsr $1582		jsr	floatingpointHandler
.22ec	aa		tax				tax
.22ed	60		rts				rts
.22ee					WordRefHandler:
.22ee	20 6f 24	jsr $246f			jsr 	DereferenceTwo
.22f1	20 f4 21	jsr $21f4			jsr 	BinaryProcess 				; check to see if either is float
.22f4	b0 03		bcs $22f9			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.22f6	4c 3b 23	jmp $233b			jmp 	MInt32WordIndirect 							; else do it as integer.
.22f9					_IsFPOperation:
.22f9	8a		txa				txa 								; call the relevant fp routine
.22fa	a2 08		ldx #$08		ldx	#8
.22fc	20 82 15	jsr $1582		jsr	floatingpointHandler
.22ff	aa		tax				tax
.2300	60		rts				rts
.2301					ByteRefHandler:
.2301	20 6f 24	jsr $246f			jsr 	DereferenceTwo
.2304	20 f4 21	jsr $21f4			jsr 	BinaryProcess 				; check to see if either is float
.2307	b0 03		bcs $230c			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.2309	4c 3f 23	jmp $233f			jmp 	MInt32ByteIndirect 							; else do it as integer.
.230c					_IsFPOperation:
.230c	8a		txa				txa 								; call the relevant fp routine
.230d	a2 08		ldx #$08		ldx	#8
.230f	20 82 15	jsr $1582		jsr	floatingpointHandler
.2312	aa		tax				tax
.2313	60		rts				rts
.2314					PowerHandler:
.2314	20 6f 24	jsr $246f			jsr 	DereferenceTwo
.2317	20 f4 21	jsr $21f4			jsr 	BinaryProcess 				; check to see if either is float
.231a	b0 03		bcs $231f			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.231c	4c 27 23	jmp $2327			jmp 	PowerInteger 							; else do it as integer.
.231f					_IsFPOperation:
.231f	8a		txa				txa 								; call the relevant fp routine
.2320	a2 16		ldx #$16		ldx	#22
.2322	20 82 15	jsr $1582		jsr	floatingpointHandler
.2325	aa		tax				tax
.2326	60		rts				rts
.2327					PowerInteger:
.2327	20 0e 22	jsr $220e			jsr 	BPMakeBothFloat				; make them float.
.232a	8a		txa				txa
.232b	a2 16		ldx #$16		ldx	#22
.232d	20 82 15	jsr $1582		jsr	floatingpointHandler
.2330	a2 12		ldx #$12		ldx	#18
.2332	20 82 15	jsr $1582		jsr	floatingpointHandler
.2335	aa		tax				tax
.2336	a9 00		lda #$00			lda 	#0 							; make type integer
.2338	95 40		sta $40,x			sta 	esType,x
.233a	60		rts				rts
.233b					Mint32WordIndirect:
.233b	a9 80		lda #$80	 		lda 	#$80 				 		; word reference type (bit 7 set)
.233d	d0 02		bne $2341			bne 	Min32Indirect
.233f					Mint32ByteIndirect:
.233f	a9 a0		lda #$a0			lda 	#$A0 						; byte reference type (bit 7, bit 5 set)
.2341					Min32Indirect:
.2341	48		pha				pha 								; save the indirection
.2342	20 46 2b	jsr $2b46			jsr 	MInt32Add 					; add a!b a?b
.2345	68		pla				pla 								; and set the type to reference.
.2346	95 40		sta $40,x			sta 	esType,x 	 				; so a!b => a+b and it's a reference....
.2348	60		rts				rts
.2349					Mint32ShiftLeftX:
.2349	18		clc				clc 								; CC shift left
.234a	90 01		bcc $234d			bcc 	Mint32Shift
.234c					Mint32ShiftRightX:
.234c	38		sec				sec 								; CS shift right
.234d					Mint32Shift:
.234d	08		php				php 								; save carry flag on stack.
.234e	b5 51		lda $51,x			lda 	esInt1+1,x 					; if shift >= 32 then it is zero.
.2350	15 59		ora $59,x			ora 	esInt2+1,x
.2352	15 61		ora $61,x			ora 	esInt3+1,x
.2354	d0 1e		bne $2374			bne 	_MShiftZero
.2356	b5 49		lda $49,x			lda 	esInt0+1,x
.2358	c9 20		cmp #$20			cmp 	#32
.235a	b0 18		bcs $2374			bcs 	_MShiftZero
.235c					_MShiftLoop:
.235c	b5 49		lda $49,x			lda 	esInt0+1,x 					; check count is zero
.235e	f0 12		beq $2372			beq 	_MShiftExit
.2360	d6 49		dec $49,x			dec 	esInt0+1,x
.2362	28		plp				plp 								; restore and save carry
.2363	08		php				php
.2364	90 06		bcc $236c			bcc 	_MShiftLeft 				; and shift left/right accordingly.
.2366	20 80 2c	jsr $2c80			jsr 	Mint32ShiftRight
.2369	4c 5c 23	jmp $235c			jmp 	_MShiftLoop
.236c					_MShiftLeft:
.236c	20 77 2c	jsr $2c77			jsr 	Mint32ShiftLeft
.236f	4c 5c 23	jmp $235c			jmp 	_MShiftLoop
.2372					_MShiftExit:
.2372	28		plp				plp	 								; throw saved carry and exit
.2373	60		rts				rts
.2374					_MShiftZero:
.2374	4c 62 2c	jmp $2c62			jmp 	MInt32False 				; return 0 as shifted >= 32 times.

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/compare.asm

.2377					PerformComparison:
.2377	20 6f 24	jsr $246f			jsr 	DereferenceTwo 				; make both values.
.237a	b5 40		lda $40,x			lda 	esType,x 					; check for two strings.
.237c	35 41		and $41,x			and 	esType+1,x
.237e	0a		asl a				asl 	a 							; bit 7 set if both bit 6s were set.
.237f	30 1d		bmi $239e			bmi 	_PCIsString
.2381	b5 40		lda $40,x			lda 	esType,x 					; check either is floating point.
.2383	15 41		ora $41,x			ora 	esType+1,x
.2385	0a		asl a				asl 	a 							; shift bit 6 (string) to bit 7, mixed types
.2386	30 22		bmi $23aa			bmi 	_PCError
.2388	29 02		and #$02			and 	#$02 						; because of ASL, check type in bit 0
.238a	f0 0f		beq $239b			beq 	_PCIsInteger 				; if not two integers, e.g. 1 of the bits is set
.238c	20 0e 22	jsr $220e			jsr 	BPMakeBothFloat 			; make both float
.238f	8a		txa				txa
.2390	a2 04		ldx #$04		ldx	#4
.2392	20 82 15	jsr $1582		jsr	floatingpointHandler
.2395	86 32		stx $32				stx 	tempShort 					; save result
.2397	aa		tax				tax
.2398	a5 32		lda $32				lda 	tempShort
.239a	60		rts				rts
.239b					_PCIsInteger:
.239b	4c 02 2a	jmp $2a02			jmp 	MInt32Compare
.239e					_PCIsString:
.239e	8a		txa				txa 								; A has SP
.239f	a2 08		ldx #$08		ldx	#8
.23a1	20 82 30	jsr $3082		jsr	stringHandler
.23a4	86 32		stx $32				stx 	tempShort 					; save result
.23a6	aa		tax				tax 								; put SP back in X and get result.
.23a7	a5 32		lda $32				lda 	tempShort
.23a9	60		rts				rts
.23aa					_PCError:
.23aa	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.23ac	20 85 11	jsr $1185		jsr	errorHandler
.23af					CompareEquals:
.23af	20 77 23	jsr $2377			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.23b2	c9 00		cmp #$00			cmp 	#$00 						; and we do something if it is = or <> a value.
.23b4	f0 35		beq $23eb			beq  	CompareTrue
.23b6	4c ee 23	jmp $23ee			jmp 	CompareFalse
.23b9					CompareLess:
.23b9	20 77 23	jsr $2377			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.23bc	c9 ff		cmp #$ff			cmp 	#$FF 						; and we do something if it is = or <> a value.
.23be	f0 2b		beq $23eb			beq  	CompareTrue
.23c0	4c ee 23	jmp $23ee			jmp 	CompareFalse
.23c3					CompareGreater:
.23c3	20 77 23	jsr $2377			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.23c6	c9 01		cmp #$01			cmp 	#$01 						; and we do something if it is = or <> a value.
.23c8	f0 21		beq $23eb			beq  	CompareTrue
.23ca	4c ee 23	jmp $23ee			jmp 	CompareFalse
.23cd					CompareNotEquals:
.23cd	20 77 23	jsr $2377			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.23d0	c9 00		cmp #$00			cmp 	#$00 						; and we do something if it is = or <> a value.
.23d2	d0 17		bne $23eb			bne  	CompareTrue
.23d4	4c ee 23	jmp $23ee			jmp 	CompareFalse
.23d7					CompareGreaterEq:
.23d7	20 77 23	jsr $2377			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.23da	c9 ff		cmp #$ff			cmp 	#$FF 						; and we do something if it is = or <> a value.
.23dc	d0 0d		bne $23eb			bne  	CompareTrue
.23de	4c ee 23	jmp $23ee			jmp 	CompareFalse
.23e1					CompareLessEq:
.23e1	20 77 23	jsr $2377			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.23e4	c9 01		cmp #$01			cmp 	#$01 						; and we do something if it is = or <> a value.
.23e6	d0 03		bne $23eb			bne  	CompareTrue
.23e8	4c ee 23	jmp $23ee			jmp 	CompareFalse
.23eb					CompareTrue:
.23eb	4c 5e 2c	jmp $2c5e			jmp 	MInt32True
.23ee					CompareFalse:
.23ee	4c 62 2c	jmp $2c62			jmp 	MInt32False

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/convert.asm

.23f1					Event_Str:
.23f1	20 bb 26	jsr $26bb			jsr 	EvaluateNumeric 			; get a number.
.23f4	b5 40		lda $40,x			lda 	esType,x 					; is it floating point
.23f6	d0 13		bne $240b			bne 	_ESFloat
.23f8	20 4e 24	jsr $244e			jsr 	ConvertGetBase 				; get base, or default.
.23fb	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.23fd	85 2a		sta $2a				sta 	temp0
.23ff	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.2401	85 2b		sta $2b				sta 	1+(temp0)
.2403	b5 49		lda $49,x			lda 	esInt0+1,x 					; get the base
.2405	20 b8 2b	jsr $2bb8			jsr 	MInt32ToString 				; convert to string.
.2408	4c 18 24	jmp $2418			jmp 	_ESCloneExit 				; clone and exit.
.240b					_ESFloat:
.240b	20 d5 2c	jsr $2cd5			jsr 	CheckRightParen 			; check closing )
.240e	20 56 1a	jsr $1a56			jsr 	TOSToTemp0 					; string address in temp0, goes here.
.2411	8a		txa				txa
.2412	a2 14		ldx #$14		ldx	#20
.2414	20 82 15	jsr $1582		jsr	floatingpointHandler
.2417	aa		tax				tax
.2418					_ESCloneExit:
.2418	8a		txa				txa
.2419	a2 02		ldx #$02		ldx	#2
.241b	20 82 30	jsr $3082		jsr	stringHandler
.241e	aa		tax				tax
.241f	60		rts				rts
.2420					UnaryVal:
.2420	38		sec				sec 								; Carry set to return value
.2421	b0 01		bcs $2424			bcs 	ValueMain
.2423					UnaryIsVal:
.2423	18		clc				clc									; Carry clear to return legitimacy
.2424					ValueMain:
.2424	08		php				php 								; save results (CS is value, CC is validation)
.2425	20 c6 26	jsr $26c6			jsr 	EvaluateString
.2428	20 4e 24	jsr $244e			jsr 	ConvertGetBase 				; get base, if any.
.242b	98		tya				tya
.242c	48		pha				pha
.242d	20 56 1a	jsr $1a56			jsr 	TOSToTemp0 					; string address in temp0, goes here.
.2430	b5 49		lda $49,x			lda 	esInt0+1,x 					; get the base
.2432	29 7f		and #$7f			and 	#$7F 						; ignore the sign bit.
.2434	20 d0 2a	jsr $2ad0			jsr 	MInt32FromString 			; convert it back from a string.
.2437	b0 0c		bcs $2445			bcs 	_VMSuccess 					; successfully converted.
.2439	b5 49		lda $49,x			lda 	esInt0+1,x 					; is base the default
.243b	c9 8a		cmp #$8a			cmp 	#$80+10 					; if no, then it is integer only.
.243d	f0 00		beq $243f			beq 	_VMFailed 	 				; so we failed.
.243f					_VMFailed:
.243f	68		pla				pla
.2440	a8		tay				tay
.2441	28		plp				plp
.2442	4c 62 2c	jmp $2c62			jmp 	MInt32False 				; return 0 whatever.
.2445					_VMSuccess:
.2445	68		pla				pla
.2446	a8		tay				tay
.2447	28		plp				plp 								; if CS the it was val() so we want the value.
.2448	b0 03		bcs $244d			bcs 	_VMExit
.244a	4c 5e 2c	jmp $2c5e			jmp 	MInt32True 					; otherwise return true as successful.
.244d					_VMExit:
.244d	60		rts				rts
.244e					ConvertGetBase:
.244e	a9 8a		lda #$8a			lda 	#10+$80 					; default base 10 signed.
.2450	95 49		sta $49,x			sta 	esInt0+1,x
.2452	b1 28		lda ($28),y			lda 	(codePtr),y 				; check for ,base)
.2454	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.2456	d0 0e		bne $2466			bne 	_CGBDone 					; not found, should be )
.2458	e8		inx				inx 								; next level
.2459	c8		iny				iny 								; skip comma.
.245a	20 d9 26	jsr $26d9			jsr 	EvaluateSmallInteger		; evaluate the base.
.245d	ca		dex				dex
.245e	c9 02		cmp #$02			cmp 	#2 							; base range is 2..16
.2460	90 08		bcc $246a			bcc 	_CGBValue 					; (it should work as high as 37)
.2462	c9 11		cmp #$11			cmp 	#17
.2464	b0 04		bcs $246a			bcs 	_CGBValue
.2466					_CGBDone:
.2466	20 d5 2c	jsr $2cd5			jsr 	CheckRightParen
.2469	60		rts				rts
.246a					_CGBValue:
.246a	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.246c	20 85 11	jsr $1185		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/dereference.asm

.246f					DereferenceTwo:
.246f	e8		inx				inx
.2470	20 74 24	jsr $2474			jsr 	DereferenceOne
.2473	ca		dex				dex
.2474					DereferenceOne:
.2474	b5 40		lda $40,x			lda 	esType,x
.2476	10 3d		bpl $24b5			bpl 	_DRNotReference 			; is it a reference ? if not, we don't need to do anything
.2478	4a		lsr a				lsr 	a 							; do float dereference if bit 0 set.
.2479	b0 3b		bcs $24b6			bcs 	_DRFloatDeReference
.247b	98		tya				tya
.247c	48		pha				pha
.247d	b5 48		lda $48,x			lda 	esInt0,x 					; copy address to temp0
.247f	85 2a		sta $2a				sta 	temp0
.2481	b5 50		lda $50,x			lda 	esInt1,x
.2483	85 2b		sta $2b				sta 	temp0+1
.2485	a9 00		lda #$00			lda 	#0 							; clear esInt1..3
.2487	95 50		sta $50,x			sta 	esInt1,x
.2489	95 58		sta $58,x			sta 	esInt2,x
.248b	95 60		sta $60,x			sta 	esInt3,x
.248d	b5 40		lda $40,x			lda 	esType,x 					; get the type byte.
.248f	29 60		and #$60			and 	#$60 						; get string flag ($40) and byte flag ($20)
.2491	0a		asl a				asl 	a 							; now string ($80) byte ($40)
.2492	30 0d		bmi $24a1			bmi 	_DeRefString 				; string, 2 bytes only
.2494	d0 11		bne $24a7			bne 	_DeRefByte 					; byte 1 byte only
.2496					_DeRefLong:
.2496	a0 03		ldy #$03			ldy 	#3
.2498	b1 2a		lda ($2a),y			lda 	(temp0),y
.249a	95 60		sta $60,x			sta 	esInt3,x
.249c	88		dey				dey
.249d	b1 2a		lda ($2a),y			lda 	(temp0),y
.249f	95 58		sta $58,x			sta 	esInt2,x
.24a1					_DeRefString:
.24a1	a0 01		ldy #$01			ldy 	#1
.24a3	b1 2a		lda ($2a),y			lda 	(temp0),y
.24a5	95 50		sta $50,x			sta 	esInt1,x
.24a7					_DeRefByte:
.24a7	a0 00		ldy #$00			ldy 	#0
.24a9	b1 2a		lda ($2a),y			lda 	(temp0),y
.24ab	95 48		sta $48,x			sta 	esInt0,x
.24ad	b5 40		lda $40,x			lda 	esType,x 					; clear byte and deref bits.
.24af	29 40		and #$40			and 	#$40
.24b1	95 40		sta $40,x			sta 	esType,x
.24b3	68		pla				pla
.24b4	a8		tay				tay
.24b5					_DRNotReference
.24b5	60		rts				rts
.24b6					_DRFloatDereference:
.24b6	20 56 1a	jsr $1a56			jsr 	TOSToTemp0 					; address to deref in temp0
.24b9	8a		txa				txa
.24ba	a2 1c		ldx #$1c		ldx	#28
.24bc	20 82 15	jsr $1582		jsr	floatingpointHandler
.24bf	aa		tax				tax
.24c0	a9 01		lda #$01			lda 	#$01 						; type to FP (float)
.24c2	95 40		sta $40,x			sta 	esType,x
.24c4	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/evaluate.asm

.24c5					EvaluateLevel:
.24c5	e0 08		cpx #$08			cpx 	#StackSize 					; check stack overflow
.24c7	b0 1e		bcs $24e7			bcs 	_ELStack
.24c9	48		pha				pha 								; save precedence level.
.24ca	a9 00		lda #$00			lda 	#0 							; zero the current stack level.
.24cc	95 48		sta $48,x			sta 	esInt0,x
.24ce	95 50		sta $50,x			sta 	esInt1,x
.24d0	95 58		sta $58,x			sta 	esInt2,x
.24d2	95 60		sta $60,x			sta 	esInt3,x
.24d4	95 40		sta $40,x			sta 	esType,x 					; zero the type (integer value)
.24d6	b1 28		lda ($28),y			lda 	(codePtr),y	 				; look at first token/character
.24d8	30 26		bmi $2500			bmi 	_ELIsToken 					; if -ve could be string, float, or unary function.
.24da	0a		asl a				asl 	a 							; if 00-3F then will now be PL and it's a variable.
.24db	30 0f		bmi $24ec			bmi 	_ELIsConstant 				; 40-7F will be -ve and that's an integer constant.
.24dd	8a		txa				txa 								; stack level in X
.24de	a2 00		ldx #$00		ldx	#0
.24e0	20 82 3b	jsr $3b82		jsr	variableHandler
.24e3	aa		tax				tax
.24e4	4c 29 25	jmp $2529			jmp		_ELHasTerm
.24e7					_ELStack:
.24e7	a2 22		ldx #$22			ldx 	#ErrorID_NumStack
.24e9	20 85 11	jsr $1185		jsr	errorHandler
.24ec					_ELIsConstant:
.24ec	4a		lsr a				lsr 	a 							; get the value back
.24ed	29 3f		and #$3f			and 	#$3F 						; force into range 0-63
.24ef	95 48		sta $48,x			sta 	esInt0,x 					; and put in LSB.
.24f1					_ELCheckNext:
.24f1	c8		iny				iny 								; look at next
.24f2	b1 28		lda ($28),y			lda 	(codePtr),y
.24f4	49 40		eor #$40			eor 	#$40 						; shift around so 40-7F => 00-3F
.24f6	c9 40		cmp #$40			cmp 	#$40 						; out of range ?
.24f8	b0 2f		bcs $2529			bcs 	_ELHasTerm 					; done getting the constant.
.24fa	20 c2 25	jsr $25c2			jsr 	ELShiftByteIn 				; shift byte into position.
.24fd	4c f1 24	jmp $24f1			jmp 	_ELCheckNext
.2500					_ELIsToken:
.2500	c9 85		cmp #$85			cmp 	#TOK_STR 					; handle strings.
.2502	f0 0f		beq $2513			beq 	_ELIsString
.2504	c9 84		cmp #$84			cmp 	#TOK_FPC 					; if no, then check unary.
.2506	d0 5f		bne $2567			bne 	_ELCheckUnary
.2508	8a		txa				txa 								; put X into A
.2509	c8		iny				iny 								; skip over the float marker
.250a	a2 18		ldx #$18		ldx	#24
.250c	20 82 15	jsr $1582		jsr	floatingpointHandler
.250f	aa		tax				tax 								; restore X
.2510	4c 29 25	jmp $2529			jmp 	_ELHasTerm
.2513					_ELIsString:
.2513	98		tya				tya 								; address of string is codePtr+y+1
.2514	38		sec				sec
.2515	65 28		adc $28				adc 	codePtr
.2517	95 48		sta $48,x			sta 	esInt0,x
.2519	a5 29		lda $29				lda 	codePtr+1
.251b	69 00		adc #$00			adc 	#0
.251d	95 50		sta $50,x			sta 	esInt1,x
.251f	a9 40		lda #$40			lda 	#$40 						; set type to string value
.2521	95 40		sta $40,x			sta 	esType,x
.2523	c8		iny				iny 								; skip over string.
.2524	98		tya				tya
.2525	38		sec				sec									; +1 for the length itself.
.2526	71 28		adc ($28),y			adc 	(codePtr),y
.2528	a8		tay				tay 								; and fall through to term loop code.
.2529					_ELHasTerm:
.2529	b1 28		lda ($28),y			lda 	(codePtr),y
.252b	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; check in the correct range for binary tokens.
.252d	90 04		bcc $2533			bcc 	_ELPopExit
.252f	c9 99		cmp #$99			cmp 	#TOK_STRUCTST
.2531	90 02		bcc $2535			bcc 	_ELHasBinaryTerm
.2533					_ELPopExit:
.2533	68		pla				pla
.2534					_ELExit:
.2534	60		rts				rts
.2535					_ELHasBinaryTerm:
.2535	84 32		sty $32				sty 	tempShort 					; save position
.2537	a8		tay				tay 								; use token as an index and get the precedence.
.2538	b9 6a 25	lda $256a,y			lda 	ELBinaryOperatorInfo-TOK_BINARYST,y
.253b	a4 32		ldy $32				ldy 	tempShort 					; restore Y
.253d	85 32		sta $32				sta 	tempShort 					; save precedence in memory.
.253f	68		pla				pla 								; restore current level.
.2540	c5 32		cmp $32				cmp 	tempShort 					; if current >= operator then exit
.2542	b0 f0		bcs $2534			bcs 	_ELExit
.2544	48		pha				pha 								; save current level back on the stack.
.2545	b1 28		lda ($28),y			lda 	(codePtr),y 				; save the binary operator on the stack and skip it.
.2547	48		pha				pha
.2548	c8		iny				iny
.2549	e8		inx				inx 								; calculate the RHS at the operator precedence.
.254a	a5 32		lda $32				lda 	tempShort
.254c	20 c5 24	jsr $24c5			jsr 	EvaluateLevel
.254f	ca		dex				dex
.2550	68		pla				pla 								; get the operator back out.
.2551					_ELExecuteA:
.2551	86 32		stx $32				stx 	tempShort 					; upload the vectors. Would be nice to use jmp (aaaa,x)
.2553	0a		asl a				asl 	a 							; but not practical. May use push/rts later.
.2554	aa		tax				tax
.2555	bd 2e 1f	lda $1f2e,x			lda 	Group0Vectors,x
.2558	85 2a		sta $2a				sta 	temp0
.255a	bd 2f 1f	lda $1f2f,x			lda 	Group0Vectors+1,x
.255d	85 2b		sta $2b				sta 	temp0+1
.255f	a6 32		ldx $32				ldx 	tempShort
.2561	20 ae 25	jsr $25ae			jsr 	_ELCallTemp0
.2564	4c 29 25	jmp $2529			jmp 	_ELHasTerm 					; and loop back round.
.2567					_ELCheckUnary:
.2567	c8		iny				iny 								; skip over token.
.2568	c9 90		cmp #$90			cmp 	#TKW_MINUS 					; is it - term
.256a	f0 19		beq $2585			beq 	_ELMinus
.256c	c9 97		cmp #$97			cmp 	#TKW_PLING 					; is it ! or ? term
.256e	f0 2c		beq $259c			beq 	_ELIndirect
.2570	c9 98		cmp #$98			cmp 	#TKW_QMARK
.2572	f0 28		beq $259c			beq 	_ELIndirect
.2574	c9 83		cmp #$83			cmp 	#TOK_SHIFT3 				; is it the unary extension.
.2576	f0 39		beq $25b1			beq 	_ELExtension
.2578	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST 				; must be TOK_UNARYST ... TOK_TOKENS
.257a	90 04		bcc $2580			bcc 	_ELUSyntax
.257c	c9 c9		cmp #$c9			cmp 	#TOK_TOKENS
.257e	90 d1		bcc $2551			bcc 	_ELExecuteA 				; if so do that token.
.2580					_ELUSyntax:
.2580	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.2582	20 85 11	jsr $1185		jsr	errorHandler
.2585					_ELMinus:
.2585	20 9a 26	jsr $269a			jsr 	EvaluateNumericTerm 		; get a number to negate.
.2588	b5 40		lda $40,x			lda 	esType,x 					; is it integer
.258a	f0 0a		beq $2596			beq 	_ELMinusInteger
.258c	8a		txa				txa
.258d	a2 0c		ldx #$0c		ldx	#12
.258f	20 82 15	jsr $1582		jsr	floatingpointHandler
.2592	aa		tax				tax
.2593	4c 29 25	jmp $2529			jmp 	_ELHasTerm
.2596					_ELMinusInteger:
.2596	20 1c 2c	jsr $2c1c			jsr 	MInt32Negate 				; do int negate
.2599	4c 29 25	jmp $2529			jmp 	_ELHasTerm
.259c					_ELIndirect:
.259c	48		pha				pha 								; save what we want (TKW_QMARK TWK_PLING)
.259d	20 a3 26	jsr $26a3			jsr 	EvaluateIntegerTerm 		; integer address
.25a0	68		pla				pla
.25a1	49 97		eor #$97			eor 	#TKW_PLING 					; now $00 if !
.25a3	f0 02		beq $25a7			beq 	_ELHaveModifier
.25a5	a9 20		lda #$20			lda 	#$20 						; now $00 if !, $20 if ?
.25a7					_ELHaveModifier:
.25a7	09 80		ora #$80			ora 	#$80						; make it the appropriate reference.
.25a9	95 40		sta $40,x			sta 	esType,x 					; $80 for ! $A0 for ?
.25ab	4c 29 25	jmp $2529			jmp 	_ELHasTerm
.25ae					_ELCallTemp0:
.25ae	6c 2a 00	jmp ($002a)			jmp 	(temp0)
.25b1					_ELExtension:
.25b1	8a		txa				txa 								; stack pos in A
.25b2	20 63 14	jsr $1463		jsr	extensionHandler
.25b5	aa		tax				tax 								; restore stack
.25b6	4c 29 25	jmp $2529			jmp 	_ELHasTerm
.25b9					UnaryParenthesis:
.25b9	a9 00		lda #$00			lda 	#0 							; ( is a unary function ....
.25bb	20 c5 24	jsr $24c5			jsr 	EvaluateLevel
.25be	20 d5 2c	jsr $2cd5			jsr 	CheckRightParen 			; check for )
.25c1	60		rts				rts
.25c2					ELShiftByteIn:
.25c2	48		pha				pha 								; save bits to shift in.
.25c3	b5 60		lda $60,x			lda 	esInt3,x 					; save top most byte
.25c5	48		pha				pha
.25c6	b5 58		lda $58,x			lda 	esInt2,x 					; shift everything left 8 bits
.25c8	95 60		sta $60,x			sta 	esInt3,x
.25ca	b5 50		lda $50,x			lda 	esInt1,x
.25cc	95 58		sta $58,x			sta 	esInt2,x
.25ce	b5 48		lda $48,x			lda 	esInt0,x
.25d0	95 50		sta $50,x			sta 	esInt1,x
.25d2	a9 00		lda #$00			lda 	#0
.25d4	95 48		sta $48,x			sta 	esInt0,x
.25d6	68		pla				pla 								; now A:TOS is a 5 byte register, shift right twice.
.25d7	29 03		and #$03			and 	#3 							; only want lower 2 bits
.25d9	09 04		ora #$04			ora 	#4  						; set bit 2 - when 1 we are done
.25db					_ELShiftLoop:
.25db	4a		lsr a				lsr 	a
.25dc	76 60		ror $60,x			ror 	esInt3,x
.25de	76 58		ror $58,x			ror 	esInt2,x
.25e0	76 50		ror $50,x			ror 	esInt1,x
.25e2	76 48		ror $48,x			ror 	esInt0,x
.25e4	c9 01		cmp #$01			cmp 	#1
.25e6	d0 f3		bne $25db			bne 	_ELShiftLoop
.25e8	68		pla				pla 								; get original 6 bit value and OR in.
.25e9	29 3f		and #$3f			and 	#$3F
.25eb	15 48		ora $48,x			ora 	esInt0,x
.25ed	95 48		sta $48,x			sta 	esInt0,x
.25ef	60		rts				rts
.25f0					ELBinaryOperatorInfo:

;******  Processing file: main/evaluate/../../generated/binarystructinfo.inc

>25f0	01					.byte	$01			; $86 and
>25f1	01					.byte	$01			; $87 or
>25f2	01					.byte	$01			; $88 xor
>25f3	02					.byte	$02			; $89 >=
>25f4	02					.byte	$02			; $8a <=
>25f5	02					.byte	$02			; $8b >
>25f6	02					.byte	$02			; $8c <
>25f7	02					.byte	$02			; $8d =
>25f8	02					.byte	$02			; $8e <>
>25f9	03					.byte	$03			; $8f +
>25fa	03					.byte	$03			; $90 -
>25fb	04					.byte	$04			; $91 >>
>25fc	04					.byte	$04			; $92 <<
>25fd	04					.byte	$04			; $93 *
>25fe	04					.byte	$04			; $94 /
>25ff	04					.byte	$04			; $95 mod
>2600	05					.byte	$05			; $96 ^
>2601	06					.byte	$06			; $97 !
>2602	06					.byte	$06			; $98 ?
>2603	82					.byte	$82			; $99 repeat
>2604	82					.byte	$82			; $9a while
>2605	82					.byte	$82			; $9b for
>2606	82					.byte	$82			; $9c if
>2607	82					.byte	$82			; $9d defproc
>2608	80					.byte	$80			; $9e until
>2609	80					.byte	$80			; $9f wend
>260a	80					.byte	$80			; $a0 next
>260b	80					.byte	$80			; $a1 then
>260c	80					.byte	$80			; $a2 endif
>260d	80					.byte	$80			; $a3 endproc

;******  Return to file: main/evaluate/evaluate.asm


;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/event.asm

.260e					EventFunction:
.260e	20 04 27	jsr $2704			jsr 	EvaluateReference			; get the variable reference that tracks the event
.2611	b5 40		lda $40,x			lda 	esType,x
.2613	c9 80		cmp #$80			cmp 	#$80 						; must be integer reference
.2615	d0 5b		bne $2672			bne 	_EFType
.2617	20 e2 2c	jsr $2ce2			jsr 	CheckComma
.261a	e8		inx				inx
.261b	20 d1 26	jsr $26d1			jsr 	EvaluateInteger		 		; get the elapsed time between firing.
.261e	20 d5 2c	jsr $2cd5			jsr 	CheckRightParen 			; finish off with the right bracket
.2621	ca		dex				dex
.2622	b5 50		lda $50,x			lda 	esInt1,x 					; check max of 32767, we use 16 bit for timers and
.2624	29 80		and #$80			and 	#$80 						; it doesn't work > 32767
.2626	15 58		ora $58,x			ora 	esInt2,x
.2628	15 60		ora $60,x			ora 	esInt3,x
.262a	d0 41		bne $266d			bne 	_EFValue
.262c	98		tya				tya
.262d	48		pha				pha
.262e	8a		txa				txa
.262f	48		pha				pha
.2630	a2 1c		ldx #$1c		ldx	#28
.2632	20 64 11	jsr $1164		jsr	deviceHandler
.2635	84 2d		sty $2d				sty 	temp1+1
.2637	85 2c		sta $2c				sta 	temp1
.2639	68		pla				pla
.263a	aa		tax				tax
.263b	20 56 1a	jsr $1a56			jsr 	TOSToTemp0 					; set temp0 to the address of the event variable
.263e	a0 03		ldy #$03			ldy 	#3							; if -ve
.2640	b1 2a		lda ($2a),y			lda 	(temp0),y
.2642	30 23		bmi $2667			bmi 	_EFFail 	 				; straight out with fail, means "on pause".
.2644	a0 00		ldy #$00			ldy 	#0 							; is the fire time zero ?
.2646	b1 2a		lda ($2a),y			lda 	(temp0),y
.2648	c8		iny				iny
.2649	11 2a		ora ($2a),y			ora 	(temp0),y
.264b	f0 17		beq $2664			beq 	_EFInitialise 				; if so, initialise the value but return false.
.264d	a0 00		ldy #$00			ldy 	#0 							; calculate trigger - timer
.264f	38		sec				sec
.2650	b1 2a		lda ($2a),y			lda 	(temp0),y
.2652	e5 2c		sbc $2c				sbc 	temp1
.2654	c8		iny				iny
.2655	b1 2a		lda ($2a),y			lda 	(temp0),y
.2657	e5 2d		sbc $2d				sbc 	temp1+1
.2659	10 0c		bpl $2667			bpl 	_EFFail 					; if trigger >= timer then return False
.265b	20 77 26	jsr $2677			jsr 	SetEventTimer 				; reset the timer for next time.
.265e	20 5e 2c	jsr $2c5e			jsr	 	MInt32True 					; and treutn true as fired.
.2661	68		pla				pla
.2662	a8		tay				tay
.2663	60		rts				rts
.2664					_EFInitialise:
.2664	20 77 26	jsr $2677			jsr		SetEventTimer 				; set trigger time to time + elapsed
.2667					_EFFail:
.2667	68		pla				pla
.2668	a8		tay				tay
.2669	20 62 2c	jsr $2c62			jsr 	MInt32False
.266c	60		rts				rts
.266d					_EFValue:
.266d	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.266f	20 85 11	jsr $1185		jsr	errorHandler
.2672					_EFType:
.2672	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.2674	20 85 11	jsr $1185		jsr	errorHandler
.2677					SetEventTimer:
.2677	a0 00		ldy #$00			ldy 	#0
.2679	18		clc				clc
.267a	a5 2c		lda $2c				lda 	temp1
.267c	75 49		adc $49,x			adc 	esInt0+1,x
.267e	91 2a		sta ($2a),y			sta		(temp0),y
.2680	c8		iny				iny
.2681	a5 2d		lda $2d				lda 	temp1+1
.2683	75 51		adc $51,x			adc 	esInt1+1,x
.2685	91 2a		sta ($2a),y			sta		(temp0),y
.2687	88		dey				dey
.2688	11 2a		ora ($2a),y			ora 	(temp0),y 					; if the result is non zero, exit
.268a	d0 04		bne $2690			bne 	_SETExit 					; zero means initialise.....
.268c	a9 01		lda #$01			lda 	#1 							; timer zero won't work, so make it 1, which is
.268e	91 2a		sta ($2a),y			sta 	(temp0),y 					; near enough.
.2690					_SETExit:
.2690	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/support.asm

.2691					EvaluateTerm:
.2691	a9 0f		lda #$0f			lda 	#15 						; no binary operator has this high a precedence.
.2693	20 c5 24	jsr $24c5			jsr 	EvaluateLevel
.2696	20 74 24	jsr $2474			jsr 	DereferenceOne
.2699	60		rts				rts
.269a					EvaluateNumericTerm:
.269a	20 91 26	jsr $2691			jsr 	EvaluateTerm
.269d	b5 40		lda $40,x			lda 	esType,x
.269f	0a		asl a				asl 	a 							; see if it's a string.
.26a0	30 09		bmi $26ab			bmi 	ENTType
.26a2	60		rts				rts
.26a3					EvaluateIntegerTerm:
.26a3	20 91 26	jsr $2691			jsr 	EvaluateTerm
.26a6	b5 40		lda $40,x			lda 	esType,x
.26a8	d0 01		bne $26ab			bne 	ENTType
.26aa	60		rts				rts
.26ab					ENTType:
.26ab	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.26ad	20 85 11	jsr $1185		jsr	errorHandler
.26b0					EvaluateRoot:
.26b0	a2 00		ldx #$00			ldx 	#0
.26b2					Evaluate:
.26b2	a9 00		lda #$00			lda 	#0
.26b4	20 c5 24	jsr $24c5			jsr 	EvaluateLevel
.26b7	20 74 24	jsr $2474			jsr 	DereferenceOne
.26ba	60		rts				rts
.26bb					EvaluateNumeric:
.26bb	20 b2 26	jsr $26b2			jsr 	Evaluate
.26be	b5 40		lda $40,x			lda 	esType,x
.26c0	0a		asl a				asl 	a 							; see if it's a string.
.26c1	30 e8		bmi $26ab			bmi 	ENTType
.26c3	4a		lsr a				lsr 	a 							; shift float flag into carry.
.26c4	4a		lsr a				lsr 	a
.26c5	60		rts				rts
.26c6					EvaluateString:
.26c6	20 b2 26	jsr $26b2			jsr 	Evaluate
.26c9	b5 40		lda $40,x			lda 	esType,x
.26cb	0a		asl a				asl 	a 							; see if it's a string.
.26cc	10 dd		bpl $26ab			bpl 	ENTType
.26ce	60		rts				rts
.26cf					EvaluateRootInteger:
.26cf	a2 00		ldx #$00			ldx 	#0
.26d1					EvaluateInteger:
.26d1	20 b2 26	jsr $26b2			jsr 	Evaluate
.26d4	b5 40		lda $40,x			lda 	esType,x
.26d6	d0 d3		bne $26ab			bne 	ENTType
.26d8	60		rts				rts
.26d9					EvaluateSmallInteger:
.26d9	20 d1 26	jsr $26d1			jsr 	EvaluateInteger
.26dc	b5 50		lda $50,x			lda 	esInt1,x
.26de	15 58		ora $58,x			ora 	esInt2,x
.26e0	15 60		ora $60,x			ora 	esInt3,x
.26e2	d0 03		bne $26e7			bne 	_ESIValue
.26e4	b5 48		lda $48,x			lda 	esInt0,x
.26e6	60		rts				rts
.26e7					_ESIValue:
.26e7	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.26e9	20 85 11	jsr $1185		jsr	errorHandler
.26ec					LinkEvaluate:
.26ec	aa		tax				tax
.26ed	20 b2 26	jsr $26b2			jsr 	Evaluate
.26f0	8a		txa				txa
.26f1	60		rts				rts
.26f2					LinkEvaluateTerm:
.26f2	aa		tax				tax
.26f3	20 91 26	jsr $2691			jsr 	EvaluateTerm
.26f6	8a		txa				txa
.26f7	60		rts				rts
.26f8					LinkEvaluateInteger:
.26f8	aa		tax				tax
.26f9	20 d1 26	jsr $26d1			jsr 	EvaluateInteger
.26fc	8a		txa				txa
.26fd	60		rts				rts
.26fe					LinkEvaluateSmallInt:
.26fe	aa		tax				tax
.26ff	20 d9 26	jsr $26d9			jsr 	EvaluateSmallInteger
.2702	8a		txa				txa
.2703	60		rts				rts
.2704					EvaluateReference:
.2704	ad 01 26	lda $2601			lda 	ELBinaryOperatorInfo+TKW_PLING-TOK_BINARYST
.2707	38		sec				sec 								; sub 1 to allow a!x b?x to work.
.2708	e9 01		sbc #$01			sbc 	#1
.270a	20 c5 24	jsr $24c5			jsr 	EvaluateLevel
.270d	b5 40		lda $40,x			lda 	esType,x
.270f	10 01		bpl $2712			bpl 	_ERFail
.2711	60		rts				rts
.2712					_ERFail:
.2712	a2 0b		ldx #$0b			ldx 	#ErrorID_NoReference
.2714	20 85 11	jsr $1185		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary.asm

.2717					UnaryLen:
.2717	20 25 27	jsr $2725			jsr 	ULStart
.271a					ULFinish:
.271a	b1 2a		lda ($2a),y			lda 	(temp0),y 					; get length prefix
.271c	a4 32		ldy $32				ldy 	tempShort 					; get Y back
.271e	20 71 2c	jsr $2c71			jsr 	MInt32Set8Bit 				; write it out.
.2721	20 d5 2c	jsr $2cd5			jsr 	CheckRightParen
.2724	60		rts				rts
.2725	20 c6 26	jsr $26c6	ULStart:jsr 	EvaluateString
.2728	b5 48		lda $48,x			lda 	esInt0,x 					; copy address of string to temp0
.272a	85 2a		sta $2a				sta 	temp0
.272c	b5 50		lda $50,x			lda 	esInt1,x
.272e	85 2b		sta $2b				sta 	temp0+1
.2730	84 32		sty $32				sty 	tempShort 					; get length
.2732	a0 00		ldy #$00			ldy 	#0
.2734	60		rts				rts
.2735					UnaryAsc:
.2735	20 25 27	jsr $2725			jsr 	ULStart 					; same as LEN() get string, save Y, point to length.
.2738	b1 2a		lda ($2a),y			lda 	(temp0),y 					; read length
.273a	c8		iny				iny 		 						; point to first character, we can do LEN code after that
.273b	c9 00		cmp #$00			cmp 	#0
.273d	d0 db		bne $271a			bne 	ULFinish 					; if length = 0 then error : asc("") -> error.
.273f	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.2741	20 85 11	jsr $1185		jsr	errorHandler
.2744					UnaryAbs:
.2744	20 bb 26	jsr $26bb			jsr 	EvaluateNumeric 			; some numeric value
.2747	b0 07		bcs $2750			bcs 	_UAFloat 					; CS then float, so use that function
.2749	20 17 2c	jsr $2c17			jsr 	MInt32Absolute 				; int version
.274c	20 d5 2c	jsr $2cd5			jsr 	CheckRightParen
.274f	60		rts				rts
.2750					_UAFloat:
.2750	8a		txa				txa 								; float version
.2751	a2 00		ldx #$00		ldx	#0
.2753	20 82 15	jsr $1582		jsr	floatingpointHandler
.2756	aa		tax				tax
.2757	20 d5 2c	jsr $2cd5			jsr 	CheckRightParen
.275a	60		rts				rts
.275b					UnarySgn:
.275b	20 bb 26	jsr $26bb			jsr 	EvaluateNumeric 			; same as above but sign of value
.275e	b0 07		bcs $2767			bcs 	_USFloat
.2760	20 4f 2c	jsr $2c4f			jsr 	MInt32Sign
.2763	20 d5 2c	jsr $2cd5			jsr 	CheckRightParen
.2766	60		rts				rts
.2767					_USFloat:
.2767	8a		txa				txa
.2768	a2 0e		ldx #$0e		ldx	#14
.276a	20 82 15	jsr $1582		jsr	floatingpointHandler
.276d	aa		tax				tax
.276e	20 d5 2c	jsr $2cd5			jsr 	CheckRightParen
.2771	60		rts				rts
.2772					UnaryPeek:
.2772	20 9e 27	jsr $279e			jsr 	PDLCode 					; each has common setup code put reads 1,2 or 4 bytes
.2775	4c 92 27	jmp $2792			jmp 	PDLByte0
.2778					UnaryDeek:
.2778	20 9e 27	jsr $279e			jsr 	PDLCode
.277b	4c 8c 27	jmp $278c			jmp 	PDLByte1
.277e					UnaryLeek:
.277e	20 9e 27	jsr $279e			jsr 	PDLCode
.2781	a0 03		ldy #$03			ldy 	#3							; read 3-2
.2783	b1 2a		lda ($2a),y			lda 	(temp0),y
.2785	95 60		sta $60,x			sta 	esInt3,x
.2787	88		dey				dey
.2788	b1 2a		lda ($2a),y			lda 	(temp0),y
.278a	95 58		sta $58,x			sta 	esInt2,x
.278c					PDLByte1:
.278c	a0 01		ldy #$01			ldy 	#1
.278e	b1 2a		lda ($2a),y			lda 	(temp0),y
.2790	95 50		sta $50,x			sta 	esInt1,x
.2792					PDLByte0:
.2792	a0 00		ldy #$00			ldy 	#0
.2794	b1 2a		lda ($2a),y			lda 	(temp0),y
.2796	95 48		sta $48,x			sta 	esInt0,x
.2798	a4 32		ldy $32				ldy 	tempShort 					; restore Y
.279a	20 d5 2c	jsr $2cd5			jsr 	CheckRightParen 			; check right and return
.279d	60		rts				rts
.279e					PDLCode:
.279e	20 d1 26	jsr $26d1			jsr 	EvaluateInteger 			; some address
.27a1	b5 48		lda $48,x			lda 	esInt0,x 					; copy address of string to temp0
.27a3	85 2a		sta $2a				sta 	temp0
.27a5	b5 50		lda $50,x			lda 	esInt1,x
.27a7	85 2b		sta $2b				sta 	temp0+1
.27a9	a9 00		lda #$00			lda 	#0 							; zero upper 3 bytes of result, type okay.
.27ab	95 50		sta $50,x			sta 	esInt1,x 					; PEEK needs upper 3 cleared
.27ad	95 58		sta $58,x			sta 	esInt2,x
.27af	95 60		sta $60,x			sta 	esInt3,x
.27b1	84 32		sty $32				sty 	tempShort 					; save Y
.27b3	60		rts				rts
.27b4					Unary_Random:
.27b4	20 92 2c	jsr $2c92			jsr 	MInt32Random 				; generate random number.
.27b7	b1 28		lda ($28),y			lda 	(codePtr),y 				; check followed by )
.27b9	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.27bb	f0 08		beq $27c5			beq 	_URExit
.27bd	e8		inx				inx 								; load range 0..r-1 into +1
.27be	20 d1 26	jsr $26d1			jsr 	EvaluateInteger
.27c1	ca		dex				dex
.27c2	20 b5 2a	jsr $2ab5			jsr 	MInt32Modulus 				; calculate random % modulus
.27c5					_URExit:
.27c5	20 d5 2c	jsr $2cd5			jsr 	CheckRightParen 			; check right and return
.27c8	60		rts				rts
.27c9					Unary_Min:
.27c9	a9 01		lda #$01			lda 	#1 							; c1 cmp c2 needs to be > e.g. c1 > c2
.27cb	d0 02		bne $27cf			bne 	UnaryMBody
.27cd					Unary_Max:
.27cd	a9 ff		lda #$ff			lda 	#$FF 						; c1 cmp c2 needs to be < e.g. c1 < c2
.27cf					UnaryMBody:
.27cf	48		pha				pha 								; save comparator on stack, shows min or max
.27d0	20 b2 26	jsr $26b2			jsr 	Evaluate 					; get the first thing to check
.27d3					_UnaryMLoop:
.27d3	b1 28		lda ($28),y			lda 	(codePtr),y 				; found ), indicates end.
.27d5	c8		iny				iny
.27d6	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.27d8	f0 09		beq $27e3			beq 	_UnaryMExit
.27da	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; found , indicates more.
.27dc	f0 07		beq $27e5			beq 	_UnaryMCompare
.27de	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.27e0	20 85 11	jsr $1185		jsr	errorHandler
.27e3					_UnaryMExit:
.27e3	68		pla				pla 								; done so throw comparator and return.
.27e4	60		rts				rts
.27e5					_UnaryMCompare:
.27e5	e8		inx				inx 								; get the 2nd thing to evaluate
.27e6	20 b2 26	jsr $26b2			jsr 	Evaluate
.27e9	ca		dex				dex
.27ea	20 77 23	jsr $2377			jsr 	PerformComparison 			; this is part of evaluate/compare.asm
.27ed	85 32		sta $32				sta 	tempShort 					; save result
.27ef	68		pla				pla 								; get what we need
.27f0	48		pha				pha
.27f1	c5 32		cmp $32				cmp 	tempShort 					; did we get it
.27f3	d0 de		bne $27d3			bne 	_UnaryMLoop 				; no, try another value.
.27f5	20 62 2c	jsr $2c62			jsr 	MInt32False 				; promote 2nd to 1st.
.27f8	20 46 2b	jsr $2b46			jsr 	MInt32Add
.27fb	4c d3 27	jmp $27d3			jmp 	_UnaryMLoop
.27fe					Unary_Page:
.27fe	20 62 2c	jsr $2c62			jsr 	MInt32False 				; zero
.2801	ad c8 0a	lda $0ac8			lda 	basePage 					; copy base page address in.
.2804	95 48		sta $48,x			sta 	esInt0,x
.2806	ad c9 0a	lda $0ac9			lda 	basePage+1
.2809	95 50		sta $50,x			sta 	esInt1,x
.280b	60		rts				rts
.280c					UnaryReference:
.280c	a9 0f		lda #$0f			lda 	#15
.280e	20 c5 24	jsr $24c5			jsr 	EvaluateLevel 				; evaluate term and don't deference.
.2811	b5 40		lda $40,x			lda 	esType,x 					; check it's a reference.
.2813	10 05		bpl $281a			bpl 	UType
.2815	a9 00		lda #$00			lda 	#0 							; make it an integer
.2817	95 40		sta $40,x			sta 	esType,x
.2819	60		rts				rts
.281a					UType:
.281a	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.281c	20 85 11	jsr $1185		jsr	errorHandler
.281f					UnaryHexMarker:
.281f	4c a3 26	jmp $26a3			jmp 	EvaluateIntegerTerm
.2822					UnaryComplement:
.2822	20 a3 26	jsr $26a3			jsr 	EvaluateIntegerTerm
.2825	20 36 2c	jsr $2c36			jsr 	MInt32Not
.2828	60		rts				rts
.2829					UnaryIntToFloat:
.2829	20 bb 26	jsr $26bb			jsr 	EvaluateNumeric				; some number
.282c	b5 40		lda $40,x			lda 	esType,x 					; if float already, exit
.282e	d0 0b		bne $283b			bne 	_UIFExit
.2830	8a		txa				txa 								; convert and set type
.2831	a2 1a		ldx #$1a		ldx	#26
.2833	20 82 15	jsr $1582		jsr	floatingpointHandler
.2836	aa		tax				tax
.2837	a9 01		lda #$01			lda 	#1
.2839	95 40		sta $40,x			sta 	esType,x
.283b					_UIFExit:
.283b	60		rts				rts
.283c					UnaryFloatToInt:
.283c	20 bb 26	jsr $26bb			jsr 	EvaluateNumeric 			; the number
.283f	b5 40		lda $40,x			lda 	esType,x 					; if int already exit
.2841	f0 0b		beq $284e			beq 	_UFIExit
.2843	8a		txa				txa 								; convert to int
.2844	a2 12		ldx #$12		ldx	#18
.2846	20 82 15	jsr $1582		jsr	floatingpointHandler
.2849	aa		tax				tax
.284a	a9 00		lda #$00			lda 	#0 							; set type
.284c	95 40		sta $40,x			sta 	esType,x
.284e					_UFIExit:
.284e	60		rts				rts
.284f					UnaryAlloc:
.284f	e8		inx				inx 								; evaluate memory required
.2850	20 d1 26	jsr $26d1			jsr 	EvaluateInteger
.2853	20 d5 2c	jsr $2cd5			jsr 	CheckRightParen
.2856	ca		dex				dex
.2857	b5 59		lda $59,x			lda 	esInt2+1,x 					; check at least in 64k range.
.2859	15 61		ora $61,x			ora 	esInt3+1,x
.285b	d0 1d		bne $287a			bne 	_UABadValue
.285d	20 62 2c	jsr $2c62			jsr 	MInt32False					; zero return.
.2860	a5 36		lda $36				lda 	lowMemory+1 				; copy low memory in
.2862	95 50		sta $50,x			sta 	esInt1,x
.2864	a5 35		lda $35				lda 	lowMemory
.2866	95 48		sta $48,x			sta 	esInt0,x
.2868	18		clc				clc 								; add alloc required.
.2869	75 49		adc $49,x			adc 	esInt0+1,x
.286b	85 35		sta $35				sta 	lowMemory
.286d	a5 36		lda $36				lda 	lowMemory+1
.286f	75 51		adc $51,x			adc 	esInt1+1,x
.2871	85 36		sta $36				sta 	lowMemory+1
.2873	b0 05		bcs $287a			bcs		_UABadValue 				; overflow definitely bad.
.2875	c5 34		cmp $34				cmp 	highMemory+1
.2877	b0 01		bcs $287a			bcs 	_UABadValue 				; out of memory bad.
.2879	60		rts				rts
.287a					_UABadValue:
.287a	a2 21		ldx #$21			ldx 	#ErrorID_Memory
.287c	20 85 11	jsr $1185		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary2.asm

.287f					UnaryTimer:
.287f	20 d5 2c	jsr $2cd5			jsr 	CheckRightParen 			; no parameters
.2882	98		tya				tya
.2883	48		pha				pha
.2884	20 89 2c	jsr $2c89			jsr 	MInt32Zero 					; zero result
.2887	86 2a		stx $2a				stx 	temp0 						; returning in YA so can't use .pshx
.2889	a2 1c		ldx #$1c		ldx	#28
.288b	20 64 11	jsr $1164		jsr	deviceHandler
.288e	a6 2a		ldx $2a				ldx 	temp0						; restore X and update 16 bit result
.2890	95 48		sta $48,x			sta 	esInt0,x
.2892	98		tya				tya
.2893	95 50		sta $50,x			sta 	esInt1,x
.2895	68		pla				pla
.2896	a8		tay				tay
.2897	60		rts				rts
.2898					UnaryInkey:
.2898	20 d5 2c	jsr $2cd5			jsr 	CheckRightParen
.289b	86 2a		stx $2a				stx 	temp0
.289d	a2 0a		ldx #$0a		ldx	#10
.289f	20 64 11	jsr $1164		jsr	deviceHandler
.28a2	a6 2a		ldx $2a				ldx 	temp0
.28a4	20 71 2c	jsr $2c71			jsr 	MInt32Set8Bit
.28a7	60		rts				rts
.28a8					UnaryGet:
.28a8	20 d5 2c	jsr $2cd5			jsr 	CheckRightParen
.28ab	86 2a		stx $2a				stx 	temp0
.28ad					_UGLoop:
.28ad	a2 00		ldx #$00		ldx	#0
.28af	20 64 11	jsr $1164		jsr	deviceHandler
.28b2	a2 0a		ldx #$0a		ldx	#10
.28b4	20 64 11	jsr $1164		jsr	deviceHandler
.28b7	c9 00		cmp #$00			cmp 	#0
.28b9	f0 f2		beq $28ad			beq 	_UGLoop
.28bb	a6 2a		ldx $2a				ldx 	temp0
.28bd	20 71 2c	jsr $2c71			jsr 	MInt32Set8Bit
.28c0	60		rts				rts
.28c1					UnaryGetString:
.28c1	20 a8 28	jsr $28a8			jsr 	UnaryGet
.28c4					UGSDoChr:
.28c4	4c 15 29	jmp $2915			jmp 	ChrCode
.28c7					UnaryInkeyString:
.28c7	20 98 28	jsr $2898			jsr 	UnaryInkey
.28ca	b5 48		lda $48,x			lda 	esInt0,x
.28cc	d0 f6		bne $28c4			bne 	UGSDoChr
.28ce	8a		txa				txa
.28cf	a2 06		ldx #$06		ldx	#6
.28d1	20 82 30	jsr $3082		jsr	stringHandler
.28d4	aa		tax				tax
.28d5	60		rts				rts
.28d6					UnarySys:
.28d6	20 d1 26	jsr $26d1			jsr 	EvaluateInteger 				; get the address
.28d9	20 d5 2c	jsr $2cd5			jsr 	CheckRightParen
.28dc	20 56 1a	jsr $1a56			jsr 	TOSToTemp0 						; copy call address to temp0
.28df	8a		txa				txa
.28e0	48		pha				pha
.28e1	98		tya				tya
.28e2	48		pha				pha
.28e3	ad 00 0a	lda $0a00			lda 	("A"-"A")*4+SingleLetterVar 	; load AXY
.28e6	ae 5c 0a	ldx $0a5c			ldx 	("X"-"A")*4+SingleLetterVar
.28e9	ac 60 0a	ldy $0a60			ldy 	("Y"-"A")*4+SingleLetterVar
.28ec	20 fb 28	jsr $28fb			jsr 	_CallTemp0
.28ef	85 32		sta $32				sta 	tempShort 						; restore YX
.28f1	68		pla				pla
.28f2	a8		tay				tay
.28f3	68		pla				pla
.28f4	aa		tax				tax
.28f5	a5 32		lda $32				lda 	tempShort
.28f7	20 71 2c	jsr $2c71			jsr 	MInt32Set8Bit 					; return result.
.28fa	60		rts				rts
.28fb					_CallTemp0:
.28fb	6c 2a 00	jmp ($002a)			jmp 	(temp0)
.28fe					UnaryMem:
.28fe	20 62 2c	jsr $2c62			jsr 	MInt32False 					; set to false (e.g. 0)
.2901	38		sec				sec
.2902	a5 33		lda $33				lda 	highMemory 						; calculate value
.2904	e5 35		sbc $35				sbc 	lowMemory
.2906	95 48		sta $48,x			sta 	esInt0,x
.2908	a5 34		lda $34				lda 	highMemory+1
.290a	e5 36		sbc $36				sbc 	lowMemory+1
.290c	95 50		sta $50,x			sta 	esInt1,x
.290e	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unarystr.asm

.290f					ExecChr:
.290f	20 d9 26	jsr $26d9			jsr 	EvaluateSmallInteger		; character number 0-255
.2912	20 d5 2c	jsr $2cd5			jsr 	CheckRightParen				; right bracket
.2915					ChrCode:
.2915	98		tya				tya
.2916	48		pha				pha
.2917	8a		txa				txa 								; A = stack
.2918	b4 48		ldy $48,x			ldy 	esInt0,x					; Y = character
.291a	a2 00		ldx #$00		ldx	#0
.291c	20 82 30	jsr $3082		jsr	stringHandler
.291f	aa		tax				tax 								; X = stack
.2920	68		pla				pla
.2921	a8		tay				tay
.2922	60		rts				rts
.2923					ExecLower:
.2923	38		sec				sec 								; set carry is lower
.2924	b0 01		bcs $2927			bcs 	ExecUpperLower
.2926					ExecUpper:
.2926	18		clc				clc 								; clear carry is upper
.2927					ExecUpperLower:
.2927	08		php				php 								; save carry
.2928	20 c6 26	jsr $26c6			jsr 	EvaluateString 				; string to stack,X
.292b	20 d5 2c	jsr $2cd5			jsr 	CheckRightParen 			; check closing right bracket.
.292e	28		plp				plp 								; restore carry, save Y
.292f	98		tya				tya
.2930	48		pha				pha
.2931	a9 00		lda #$00			lda 	#0 							; A zero if upper, 1 if lower.
.2933	2a		rol a				rol 	a
.2934	a8		tay				tay 								; now in Y
.2935	8a		txa				txa 								; do the substring and exit.
.2936	a2 0a		ldx #$0a		ldx	#10
.2938	20 82 30	jsr $3082		jsr	stringHandler
.293b	aa		tax				tax
.293c	68		pla				pla
.293d	a8		tay				tay
.293e	60		rts				rts
.293f					ExecLeft:
.293f	20 c6 26	jsr $26c6			jsr 	EvaluateString 				; string to stack,X
.2942	20 e2 2c	jsr $2ce2			jsr 	CheckComma
.2945	e8		inx				inx
.2946	a9 01		lda #$01			lda 	#1 							; 1 for 2nd parameter.
.2948	20 71 2c	jsr $2c71			jsr 	MInt32Set8Bit
.294b	e8		inx				inx
.294c	20 d9 26	jsr $26d9			jsr 	EvaluateSmallInteger 		; smallint 3rd parameter
.294f					ExecSubstring:
.294f	ca		dex				dex 								; fix up X
.2950	ca		dex				dex
.2951	20 d5 2c	jsr $2cd5			jsr 	CheckRightParen 			; check closing right bracket.
.2954	8a		txa				txa 								; do the substring and exit.
.2955	a2 0c		ldx #$0c		ldx	#12
.2957	20 82 30	jsr $3082		jsr	stringHandler
.295a	aa		tax				tax
.295b	60		rts				rts
.295c					ExecMid:
.295c	20 c6 26	jsr $26c6			jsr 	EvaluateString 				; string to stack,X
.295f	20 e2 2c	jsr $2ce2			jsr 	CheckComma
.2962	e8		inx				inx
.2963	20 d9 26	jsr $26d9			jsr 	EvaluateSmallInteger 		; smallint 2nd parameter
.2966	c9 00		cmp #$00			cmp 	#0
.2968	f0 15		beq $297f			beq 	_EMValue
.296a	e8		inx				inx
.296b	a9 ff		lda #$ff			lda 	#255 						; 255 default for 3nd parameter - this is optional.
.296d	20 71 2c	jsr $2c71			jsr 	MInt32Set8Bit
.2970	b1 28		lda ($28),y			lda 	(codePtr),y 				; is there a ) next
.2972	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN 				; if so, just MID$(a$,2)
.2974	f0 d9		beq $294f			beq 	ExecSubString
.2976	20 e2 2c	jsr $2ce2			jsr 	CheckComma
.2979	20 d9 26	jsr $26d9			jsr 	EvaluateSmallInteger 		; smallint 2nd parameter
.297c	4c 4f 29	jmp $294f			jmp 	ExecSubString
.297f					_EMValue:
.297f	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.2981	20 85 11	jsr $1185		jsr	errorHandler
.2984					ExecRight:
.2984	20 c6 26	jsr $26c6			jsr 	EvaluateString 				; string to stack,X
.2987	20 e2 2c	jsr $2ce2			jsr 	CheckComma
.298a	e8		inx				inx
.298b	20 d9 26	jsr $26d9			jsr 	EvaluateSmallInteger 		; smallint 2nd parameter.
.298e	ca		dex				dex
.298f	98		tya				tya
.2990	48		pha				pha
.2991	b5 48		lda $48,x			lda 	esInt0,x 					; copy address of string to temp0
.2993	85 2a		sta $2a				sta 	temp0
.2995	b5 50		lda $50,x			lda 	esInt1,x
.2997	85 2b		sta $2b				sta 	temp0+1
.2999	a0 00		ldy #$00			ldy 	#0 							; point to length
.299b	b1 2a		lda ($2a),y			lda 	(temp0),y 					; get the length.
.299d	18		clc				clc 								; add 1.
.299e	69 01		adc #$01			adc 	#1
.29a0	38		sec				sec
.29a1	f5 49		sbc $49,x			sbc 	esInt0+1,x  				; subtract right count.
.29a3	f0 02		beq $29a7			beq		_ERMake1 					; if zero, make it 1.
.29a5	b0 02		bcs $29a9			bcs		_EROkay
.29a7					_ERMake1:
.29a7	a9 01		lda #$01			lda 	#1 							; start position.
.29a9					_EROkay:
.29a9	e8		inx				inx 								; set start pos.
.29aa	95 48		sta $48,x			sta 	esInt0,x
.29ac	e8		inx				inx
.29ad	a9 ff		lda #$ff			lda 	#255 						; 255 default for 3nd parameter.
.29af	20 71 2c	jsr $2c71			jsr 	MInt32Set8Bit
.29b2	68		pla				pla
.29b3	a8		tay				tay
.29b4	4c 4f 29	jmp $294f			jmp 	ExecSubString 				; do the substring code.

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32binary.asm

.29b7					MInt32And:
.29b7	b5 48		lda $48,x			lda 	esInt0,x
.29b9	35 49		and $49,x			and 	esInt0+1,x
.29bb	95 48		sta $48,x			sta 	esInt0,x
.29bd	b5 50		lda $50,x			lda 	esInt1,x
.29bf	35 51		and $51,x			and 	esInt1+1,x
.29c1	95 50		sta $50,x			sta 	esInt1,x
.29c3	b5 58		lda $58,x			lda 	esInt2,x
.29c5	35 59		and $59,x			and 	esInt2+1,x
.29c7	95 58		sta $58,x			sta 	esInt2,x
.29c9	b5 60		lda $60,x			lda 	esInt3,x
.29cb	35 61		and $61,x			and 	esInt3+1,x
.29cd	95 60		sta $60,x			sta 	esInt3,x
.29cf	60		rts				rts
.29d0					MInt32Or:
.29d0	b5 48		lda $48,x			lda 	esInt0,x
.29d2	15 49		ora $49,x			ora 	esInt0+1,x
.29d4	95 48		sta $48,x			sta 	esInt0,x
.29d6	b5 50		lda $50,x			lda 	esInt1,x
.29d8	15 51		ora $51,x			ora 	esInt1+1,x
.29da	95 50		sta $50,x			sta 	esInt1,x
.29dc	b5 58		lda $58,x			lda 	esInt2,x
.29de	15 59		ora $59,x			ora 	esInt2+1,x
.29e0	95 58		sta $58,x			sta 	esInt2,x
.29e2	b5 60		lda $60,x			lda 	esInt3,x
.29e4	15 61		ora $61,x			ora 	esInt3+1,x
.29e6	95 60		sta $60,x			sta 	esInt3,x
.29e8	60		rts				rts
.29e9					MInt32Xor:
.29e9	b5 48		lda $48,x			lda 	esInt0,x
.29eb	55 49		eor $49,x			eor 	esInt0+1,x
.29ed	95 48		sta $48,x			sta 	esInt0,x
.29ef	b5 50		lda $50,x			lda 	esInt1,x
.29f1	55 51		eor $51,x			eor 	esInt1+1,x
.29f3	95 50		sta $50,x			sta 	esInt1,x
.29f5	b5 58		lda $58,x			lda 	esInt2,x
.29f7	55 59		eor $59,x			eor 	esInt2+1,x
.29f9	95 58		sta $58,x			sta 	esInt2,x
.29fb	b5 60		lda $60,x			lda 	esInt3,x
.29fd	55 61		eor $61,x			eor 	esInt3+1,x
.29ff	95 60		sta $60,x			sta 	esInt3,x
.2a01	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32compare.asm

.2a02					MInt32Compare:
.2a02	b5 48		lda $48,x			lda 	esInt0,x 					; equality check first.
.2a04	d5 49		cmp $49,x			cmp 	esInt0+1,x
.2a06	d0 13		bne $2a1b			bne 	MInt32Compare2
.2a08	b5 50		lda $50,x			lda 	esInt1,x
.2a0a	d5 51		cmp $51,x			cmp 	esInt1+1,x
.2a0c	d0 0d		bne $2a1b			bne 	MInt32Compare2
.2a0e	b5 58		lda $58,x			lda 	esInt2,x
.2a10	d5 59		cmp $59,x			cmp 	esInt2+1,x
.2a12	d0 07		bne $2a1b			bne 	MInt32Compare2
.2a14	b5 60		lda $60,x			lda 	esInt3,x
.2a16	55 61		eor $61,x			eor 	esInt3+1,x 					; EOR will return 0 if the same.
.2a18	d0 01		bne $2a1b			bne 	MInt32Compare2
.2a1a	60		rts				rts
.2a1b					MInt32Compare2:
.2a1b	b5 48		lda $48,x			lda		esInt0,x 					; unsigned 32 bit comparison.
.2a1d	d5 49		cmp $49,x			cmp 	esInt0+1,x
.2a1f	b5 50		lda $50,x			lda		esInt1,x
.2a21	f5 51		sbc $51,x			sbc 	esInt1+1,x
.2a23	b5 58		lda $58,x			lda		esInt2,x
.2a25	f5 59		sbc $59,x			sbc 	esInt2+1,x
.2a27	b5 60		lda $60,x			lda		esInt3,x
.2a29	f5 61		sbc $61,x			sbc 	esInt3+1,x
.2a2b	50 02		bvc $2a2f			bvc 	_I32LNoOverflow 			; make it signed 32 bit comparison
.2a2d	49 80		eor #$80			eor 	#$80
.2a2f					_I32LNoOverflow
.2a2f	30 03		bmi $2a34			bmi 	MInt32CLess					; if -ve then return $FF
.2a31	a9 01		lda #$01			lda 	#$01						; else return $01
.2a33	60		rts				rts
.2a34					MInt32CLess:
.2a34	a9 ff		lda #$ff			lda 	#$FF
.2a36	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32divide.asm

.2a37					MInt32SDivide:
.2a37	98		tya				tya  								; save Y, which is the count of negations
.2a38	48		pha				pha
.2a39	a0 00		ldy #$00			ldy 	#0 							; zero count
.2a3b	20 53 2a	jsr $2a53			jsr 	_MInt32SRemSign 			; unsign TOS
.2a3e	e8		inx				inx 								; unsign TOS+1
.2a3f	20 53 2a	jsr $2a53			jsr 	_MInt32SRemSign
.2a42	ca		dex				dex
.2a43	98		tya				tya 								; save sign count on stack
.2a44	48		pha				pha
.2a45	20 5c 2a	jsr $2a5c			jsr 	MInt32UDivide 				; unsigned division
.2a48	68		pla				pla 								; get sign count back
.2a49	29 01		and #$01			and 	#1 							; if it is odd, then negate result
.2a4b	f0 03		beq $2a50			beq 	_I32SNoNeg
.2a4d	20 1c 2c	jsr $2c1c			jsr 	MInt32Negate
.2a50					_I32SNoNeg:
.2a50	68		pla				pla 								; restoe Y and exit
.2a51	a8		tay				tay
.2a52	60		rts				rts
.2a53					_MInt32SRemSign:
.2a53	b5 60		lda $60,x			lda 	esInt3,x 					; is it -ve
.2a55	10 04		bpl $2a5b			bpl 	_MInt32SRSExit
.2a57	c8		iny				iny 								; increment the sign count
.2a58	20 1c 2c	jsr $2c1c			jsr 	MInt32Negate 				; negate the value.
.2a5b					_MInt32SRSExit:
.2a5b	60		rts				rts
.2a5c					MInt32UDivide:
.2a5c	b5 49		lda $49,x			lda 	esInt0+1,x 					; check for division by zero
.2a5e	15 51		ora $51,x			ora 	esInt1+1,x
.2a60	15 52		ora $52,x			ora 	esInt1+2,x
.2a62	15 53		ora $53,x			ora 	esInt1+3,x
.2a64	f0 4a		beq $2ab0			beq 	_MInt32DZero
.2a66	e8		inx				inx 								; clear A
.2a67	e8		inx				inx
.2a68	20 62 2c	jsr $2c62			jsr 	MInt32False
.2a6b	ca		dex				dex
.2a6c	ca		dex				dex
.2a6d	98		tya				tya 								; save Y on the stack
.2a6e	48		pha				pha
.2a6f	a0 20		ldy #$20			ldy 	#32 						; number of division passes
.2a71					_MInt32UDLoop:
.2a71	16 48		asl $48,x			asl 	esInt0,x					; shift QA left. First Q
.2a73	36 50		rol $50,x			rol 	esInt1,x
.2a75	36 58		rol $58,x			rol 	esInt2,x
.2a77	36 60		rol $60,x			rol 	esInt3,x
.2a79	36 4a		rol $4a,x			rol 	esInt0+2,x 					; then A.
.2a7b	36 52		rol $52,x			rol 	esInt1+2,x
.2a7d	36 5a		rol $5a,x			rol 	esInt2+2,x
.2a7f	36 62		rol $62,x			rol 	esInt3+2,x
.2a81	38		sec				sec 								; calculate A-M saving result on the stack
.2a82	b5 4a		lda $4a,x			lda 	esInt0+2,x
.2a84	f5 49		sbc $49,x			sbc 	esInt0+1,x
.2a86	48		pha				pha
.2a87	b5 52		lda $52,x			lda 	esInt1+2,x
.2a89	f5 51		sbc $51,x			sbc 	esInt1+1,x
.2a8b	48		pha				pha
.2a8c	b5 5a		lda $5a,x			lda 	esInt2+2,x
.2a8e	f5 59		sbc $59,x			sbc 	esInt2+1,x
.2a90	48		pha				pha
.2a91	b5 62		lda $62,x			lda 	esInt3+2,x
.2a93	f5 61		sbc $61,x			sbc 	esInt3+1,x
.2a95	90 10		bcc $2aa7			bcc		_MInt32NoSubtract 			; if A < M (e.g. carry clear) then reject this.
.2a97	95 62		sta $62,x			sta 	esInt3+2,x 					; write result back to A
.2a99	68		pla				pla
.2a9a	95 5a		sta $5a,x			sta 	esInt2+2,x
.2a9c	68		pla				pla
.2a9d	95 52		sta $52,x			sta 	esInt1+2,x
.2a9f	68		pla				pla
.2aa0	95 4a		sta $4a,x			sta 	esInt0+2,x
.2aa2	f6 48		inc $48,x			inc 	esInt0,x 					; sets bit 0 of Q - it was shifted left previously.
.2aa4	4c aa 2a	jmp $2aaa			jmp 	_MInt32Next 					; do the next iteration
.2aa7					_MInt32NoSubtract:
.2aa7	68		pla				pla
.2aa8	68		pla				pla
.2aa9	68		pla				pla
.2aaa					_MInt32Next:
.2aaa	88		dey				dey 								; do this 32 times.
.2aab	d0 c4		bne $2a71			bne 	_MInt32UDLoop
.2aad	68		pla				pla 								; restore Y and exit
.2aae	a8		tay				tay
.2aaf	60		rts				rts
.2ab0					_MInt32DZero:
.2ab0	a2 05		ldx #$05			ldx 	#ErrorID_DivZero
.2ab2	20 85 11	jsr $1185		jsr	errorHandler
.2ab5					MInt32Modulus:
.2ab5	20 5c 2a	jsr $2a5c			jsr 	MInt32UDivide 				; do the division.
.2ab8	b5 62		lda $62,x			lda 	esInt3+2,x 					; copy 2nd on stack (the remainder) to the top.
.2aba	95 60		sta $60,x			sta 	esInt3,x
.2abc	b5 5a		lda $5a,x			lda 	esInt2+2,x
.2abe	95 58		sta $58,x			sta 	esInt2,x
.2ac0	b5 52		lda $52,x			lda 	esInt1+2,x
.2ac2	95 50		sta $50,x			sta 	esInt1,x
.2ac4	b5 4a		lda $4a,x			lda 	esInt0+2,x
.2ac6	95 48		sta $48,x			sta 	esInt0,x
.2ac8	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32fromstr.asm

.0c10					fs32Length:
>0c10							.fill 	1
.2ac9					LinkInt32FromString:
.2ac9	aa		tax				tax
.2aca	98		tya				tya
.2acb	20 d0 2a	jsr $2ad0			jsr 	MInt32FromString
.2ace	8a		txa				txa
.2acf	60		rts				rts
.2ad0					MInt32FromString:
.2ad0	85 32		sta $32				sta 	tempShort 					; save base
.2ad2	98		tya				tya
.2ad3	48		pha				pha
.2ad4	a0 00		ldy #$00			ldy 	#0 							; get length of string to convert
.2ad6	b1 2a		lda ($2a),y			lda 	(temp0),y
.2ad8	8d 10 0c	sta $0c10			sta 	fs32Length
.2adb	f0 65		beq $2b42			beq 	_I32FSFail2					; fail if length zero.
.2add	a0 01		ldy #$01			ldy 	#1 							; set index into string being read
.2adf	b1 2a		lda ($2a),y			lda 	(temp0),y 					; look at first character
.2ae1	c9 2d		cmp #$2d			cmp 	#"-"						; is it a - character
.2ae3	d0 09		bne $2aee			bne 	_I32FSNotNegative
.2ae5	ad 10 0c	lda $0c10			lda 	fs32Length 					; get length back.
.2ae8	c9 01		cmp #$01			cmp 	#1 							; if 1 it is just a - on its own so fail.
.2aea	f0 56		beq $2b42			beq 	_I32FSFail2
.2aec	a0 02		ldy #$02			ldy 	#2 							; first digit of the number.
.2aee					_I32FSNotNegative:
.2aee	a5 32		lda $32				lda 	tempShort 					; get the base back.
.2af0	c0 02		cpy #$02			cpy 	#2 							; if we read a -ve (e.g. Y == 2)
.2af2	d0 02		bne $2af6			bne 	_I32FSNN2
.2af4	09 80		ora #$80			ora 	#$80						; set bit 7, this indicates a negated result.
.2af6					_I32FSNN2:
.2af6	48		pha				pha 								; save base + final sign on stack.
.2af7	20 62 2c	jsr $2c62			jsr 	MInt32False 				; zero the return value.
.2afa					_I32FSMainLoop:
.2afa	68		pla				pla 								; get the base back into tempShort
.2afb	48		pha				pha
.2afc	29 7f		and #$7f			and 	#$7F
.2afe	85 32		sta $32				sta 	tempShort
.2b00	b1 2a		lda ($2a),y			lda 	(temp0),y 					; look at next character.
.2b02	c9 61		cmp #$61			cmp 	#"a" 						; fix up case.
.2b04	90 02		bcc $2b08			bcc 	_I32FSNotLC
.2b06	e9 20		sbc #$20			sbc 	#32
.2b08					_I32FSNotLC:
.2b08	38		sec				sec 								; subtract 48 (ASCII "0") - ASCII to Hex conversion
.2b09	e9 30		sbc #$30			sbc 	#"0"
.2b0b	90 34		bcc $2b41			bcc 	_I32FSFail 					; nothing more to do.
.2b0d	c9 0a		cmp #$0a			cmp 	#9+1 						; if it is 0-9 validate vs base.
.2b0f	90 06		bcc $2b17			bcc 	_I32FSValidate
.2b11	c9 11		cmp #$11			cmp 	#17 						; is it between 58 and 64 ? if so bad.
.2b13	90 2c		bcc $2b41			bcc 	_I32FSFail
.2b15	e9 07		sbc #$07			sbc 	#7 							; adjust into range so now character is 0->nnn
.2b17					_I32FSValidate:
.2b17	c5 32		cmp $32				cmp 	tempShort 					; compare against the base.
.2b19	b0 26		bcs $2b41			bcs 	_I32FSFail 					; sorry, too large for this base, so fail.
.2b1b	48		pha				pha 								; save the new digit value.
.2b1c	e8		inx				inx 								; put base into next slot up on stack
.2b1d	a5 32		lda $32				lda 	tempShort
.2b1f	20 71 2c	jsr $2c71			jsr 	MInt32Set8Bit
.2b22	ca		dex				dex
.2b23	20 7a 2b	jsr $2b7a			jsr 	MInt32Multiply 				; multiply current by the base
.2b26	e8		inx				inx
.2b27	68		pla				pla  								; put additive into next slot
.2b28	20 71 2c	jsr $2c71			jsr 	MInt32Set8Bit
.2b2b	ca		dex				dex
.2b2c	20 46 2b	jsr $2b46			jsr 	MInt32Add 					; and add it
.2b2f	c8		iny				iny 								; bump the character pointer
.2b30	cc 10 0c	cpy $0c10			cpy 	fs32Length 					; until > length.
.2b33	f0 c5		beq $2afa			beq 	_I32FSMainLoop
.2b35	90 c3		bcc $2afa			bcc 	_I32FSMainLoop
.2b37					_I32FSDone:
.2b37	68		pla				pla 								; get base/final sign back
.2b38	10 03		bpl $2b3d			bpl 	_I32FSNN3
.2b3a	20 1c 2c	jsr $2c1c			jsr 	MInt32Negate 				; negate the result.
.2b3d					_I32FSNN3:
.2b3d	68		pla				pla
.2b3e	a8		tay				tay
.2b3f	38		sec				sec
.2b40	60		rts				rts
.2b41					_I32FSFail:
.2b41	68		pla				pla
.2b42					_I32FSFail2:
.2b42	68		pla				pla
.2b43	a8		tay				tay
.2b44	18		clc				clc
.2b45	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32math.asm

.2b46					MInt32Add:
.2b46	18		clc				clc
.2b47	b5 48		lda $48,x			lda 	esInt0,x
.2b49	75 49		adc $49,x			adc 	esInt0+1,x
.2b4b	95 48		sta $48,x			sta 	esInt0,x
.2b4d	b5 50		lda $50,x			lda 	esInt1,x
.2b4f	75 51		adc $51,x			adc 	esInt1+1,x
.2b51	95 50		sta $50,x			sta 	esInt1,x
.2b53	b5 58		lda $58,x			lda 	esInt2,x
.2b55	75 59		adc $59,x			adc 	esInt2+1,x
.2b57	95 58		sta $58,x			sta 	esInt2,x
.2b59	b5 60		lda $60,x			lda 	esInt3,x
.2b5b	75 61		adc $61,x			adc 	esInt3+1,x
.2b5d	95 60		sta $60,x			sta 	esInt3,x
.2b5f	60		rts				rts
.2b60					MInt32Sub:
.2b60	38		sec				sec
.2b61	b5 48		lda $48,x			lda 	esInt0,x
.2b63	f5 49		sbc $49,x			sbc 	esInt0+1,x
.2b65	95 48		sta $48,x			sta 	esInt0,x
.2b67	b5 50		lda $50,x			lda 	esInt1,x
.2b69	f5 51		sbc $51,x			sbc 	esInt1+1,x
.2b6b	95 50		sta $50,x			sta 	esInt1,x
.2b6d	b5 58		lda $58,x			lda 	esInt2,x
.2b6f	f5 59		sbc $59,x			sbc 	esInt2+1,x
.2b71	95 58		sta $58,x			sta 	esInt2,x
.2b73	b5 60		lda $60,x			lda 	esInt3,x
.2b75	f5 61		sbc $61,x			sbc 	esInt3+1,x
.2b77	95 60		sta $60,x			sta 	esInt3,x
.2b79	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32multiply.asm

.2b7a					MInt32Multiply:
.2b7a	e8		inx				inx 								; copy 2nd -> 3rd
.2b7b	20 a0 2b	jsr $2ba0			jsr 	MInt32CopyUp
.2b7e	ca		dex				dex
.2b7f	20 a0 2b	jsr $2ba0			jsr 	MInt32CopyUp 				; copy 1st -> 2nd
.2b82	20 62 2c	jsr $2c62			jsr 	MInt32False 				; zero 1st.
.2b85					_I32Loop:
.2b85	b5 4a		lda $4a,x			lda 	esInt0+2,x 					; get low bit of 3rd
.2b87	29 01		and #$01			and 	#1
.2b89	f0 03		beq $2b8e			beq 	_I32NoAdd 					; if set
.2b8b	20 46 2b	jsr $2b46			jsr 	MInt32Add 					; add 2nd to 1st.
.2b8e					_I32NoAdd:
.2b8e	e8		inx				inx 								; shift 2nd left
.2b8f	20 77 2c	jsr $2c77			jsr 	MInt32ShiftLeft
.2b92	e8		inx				inx  								; shift 3rd right
.2b93	20 80 2c	jsr $2c80			jsr 	MInt32ShiftRight
.2b96	20 89 2c	jsr $2c89			jsr 	MInt32Zero 					; check if zero.
.2b99	08		php				php 								; save status bits
.2b9a	ca		dex				dex 	 							; point back to 1st
.2b9b	ca		dex				dex
.2b9c	28		plp				plp 								; get status bits
.2b9d	d0 e6		bne $2b85			bne 	_I32Loop 					; if non-zero keep going.
.2b9f	60		rts				rts
.2ba0					MInt32CopyUp:
.2ba0	b5 48		lda $48,x			lda 	esInt0,x
.2ba2	95 49		sta $49,x			sta 	esInt0+1,x
.2ba4	b5 50		lda $50,x			lda 	esInt1,x
.2ba6	95 51		sta $51,x			sta 	esInt1+1,x
.2ba8	b5 58		lda $58,x			lda 	esInt2,x
.2baa	95 59		sta $59,x			sta 	esInt2+1,x
.2bac	b5 60		lda $60,x			lda 	esInt3,x
.2bae	95 61		sta $61,x			sta 	esInt3+1,x
.2bb0	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32tostr.asm

>0c11					MCharCount:	.fill 	1						; count of converted characters
.2bb1					MLInt32ToString:
.2bb1	aa		tax				tax									; module passes stack in A, base in Y
.2bb2	98		tya				tya
.2bb3	20 b8 2b	jsr $2bb8			jsr 	MInt32ToString
.2bb6	8a		txa				txa
.2bb7	60		rts				rts
.2bb8					MInt32ToString:
.2bb8	48		pha				pha 								; save base
.2bb9	85 32		sta $32				sta 	tempShort 					; save target base.
.2bbb	a9 00		lda #$00			lda 	#0
.2bbd	8d 11 0c	sta $0c11			sta 	MCharCount 					; clear character count to 0
.2bc0	98		tya				tya
.2bc1	48		pha				pha
.2bc2	a5 32		lda $32				lda 	tempShort 					; check if we are signed conversion
.2bc4	10 10		bpl $2bd6			bpl 	_I32TSUnsigned
.2bc6	48		pha				pha 								; save base on stack.
.2bc7	b5 60		lda $60,x			lda 	esInt3,x 					; is it actually negative
.2bc9	10 08		bpl $2bd3			bpl 	_I32TSNoFlip
.2bcb	a9 2d		lda #$2d			lda 	#"-" 						; write a '-' prefix out.
.2bcd	20 09 2c	jsr $2c09			jsr 	MI32WriteCharacter
.2bd0	20 1c 2c	jsr $2c1c			jsr 	MInt32Negate 				; negate the value, so now it's positive.
.2bd3					_I32TSNoFlip:
.2bd3	68		pla				pla 								; get the base back
.2bd4	29 7f		and #$7f			and 	#$7F 						; clear the sign flag so it's just a base now.
.2bd6					_I32TSUnsigned:
.2bd6	20 e4 2b	jsr $2be4			jsr 	MI32DivideWrite 			; recursive code to output string.
.2bd9	a0 00		ldy #$00			ldy 	#0 							; write charcount to first character.
.2bdb	ad 11 0c	lda $0c11			lda 	MCharCount
.2bde	91 2a		sta ($2a),y			sta 	(temp0),y
.2be0	68		pla				pla
.2be1	a8		tay				tay
.2be2	68		pla				pla
.2be3	60		rts				rts
.2be4					MI32DivideWrite:
.2be4	48		pha				pha 								; save the divisor/base
.2be5	e8		inx				inx 								; write in the dividing position.
.2be6	20 71 2c	jsr $2c71			jsr 	MInt32Set8Bit
.2be9	ca		dex				dex
.2bea	20 5c 2a	jsr $2a5c			jsr 	MInt32UDivide 				; divide number by base.
.2bed	68		pla				pla 								; get the base into Y
.2bee	a8		tay				tay
.2bef	b5 4a		lda $4a,x			lda 	esInt0+2,x 					; get the remainder and push on the stack.
.2bf1	48		pha				pha
.2bf2	20 89 2c	jsr $2c89			jsr 	MInt32Zero 					; is the result zero ?
.2bf5	f0 04		beq $2bfb			beq 	_I32NoRecurse 				; if so, don't recurse.
.2bf7	98		tya				tya 								; put base into A
.2bf8	20 e4 2b	jsr $2be4			jsr 	MI32DivideWrite 				; and jsr the dividor recursively.
.2bfb					_I32NoRecurse:
.2bfb	68		pla				pla 								; get the remainder back
.2bfc	c9 0a		cmp #$0a			cmp 	#10  						; handle hexadecimals, now converting to ASCII
.2bfe	90 02		bcc $2c02			bcc 	_I32NotHex
.2c00	69 06		adc #$06			adc 	#7-1
.2c02					_I32NotHex:
.2c02	18		clc				clc 								; make it ASCII
.2c03	69 30		adc #$30			adc 	#48
.2c05	20 09 2c	jsr $2c09			jsr 	MI32WriteCharacter 			; write the character out
.2c08	60		rts				rts 								; and exit.
.2c09					MI32WriteCharacter:
.2c09	ee 11 0c	inc $0c11			inc 	MCharCount 					; bump count (space for leading count)
.2c0c	ac 11 0c	ldy $0c11			ldy 	MCharCount 					; get position
.2c0f	91 2a		sta ($2a),y			sta 	(temp0),y 					; write out with trailing 0
.2c11	c8		iny				iny
.2c12	a9 00		lda #$00			lda 	#0
.2c14	91 2a		sta ($2a),y			sta 	(temp0),y
.2c16	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32unary.asm

>0c12					MSeed32:	.fill 	4							; random number seed.
.2c17					MInt32Absolute:
.2c17	b5 60		lda $60,x			lda 	esInt3,x 					; use negate code if -ve.
.2c19	30 01		bmi $2c1c			bmi 	MInt32Negate
.2c1b	60		rts				rts
.2c1c					MInt32Negate:
.2c1c	38		sec				sec 								; subtract from zero.
.2c1d	a9 00		lda #$00			lda 	#0
.2c1f	f5 48		sbc $48,x			sbc 	esInt0,x
.2c21	95 48		sta $48,x			sta 	esInt0,x
.2c23	a9 00		lda #$00			lda 	#0
.2c25	f5 50		sbc $50,x			sbc 	esInt1,x
.2c27	95 50		sta $50,x			sta 	esInt1,x
.2c29	a9 00		lda #$00			lda 	#0
.2c2b	f5 58		sbc $58,x			sbc 	esInt2,x
.2c2d	95 58		sta $58,x			sta 	esInt2,x
.2c2f	a9 00		lda #$00			lda 	#0
.2c31	f5 60		sbc $60,x			sbc 	esInt3,x
.2c33	95 60		sta $60,x			sta 	esInt3,x
.2c35	60		rts				rts
.2c36					MInt32Not:
.2c36	b5 48		lda $48,x			lda 	esInt0,x 					; one's complement all four.
.2c38	49 ff		eor #$ff			eor 	#$FF
.2c3a	95 48		sta $48,x			sta 	esInt0,x
.2c3c	b5 50		lda $50,x			lda 	esInt1,x
.2c3e	49 ff		eor #$ff			eor 	#$FF
.2c40	95 50		sta $50,x			sta 	esInt1,x
.2c42	b5 58		lda $58,x			lda 	esInt2,x
.2c44	49 ff		eor #$ff			eor 	#$FF
.2c46	95 58		sta $58,x			sta 	esInt2,x
.2c48	b5 60		lda $60,x			lda 	esInt3,x
.2c4a	49 ff		eor #$ff			eor 	#$FF
.2c4c	95 60		sta $60,x			sta 	esInt3,x
.2c4e	60		rts				rts
.2c4f					MInt32Sign:
.2c4f	b5 60		lda $60,x			lda 	esInt3,x					; look at MSB
.2c51	30 0b		bmi $2c5e			bmi 	MInt32True 					; if set return -1 (true)
.2c53	20 89 2c	jsr $2c89			jsr 	MInt32Zero 					; is it zero ?
.2c56	f0 0a		beq $2c62			beq 	MInt32False 				; if zero return 0 (false)
.2c58	20 62 2c	jsr $2c62			jsr 	MInt32False 				; > 0 return 1, by setting it to zero
.2c5b	f6 48		inc $48,x			inc 	esInt0,x  					; and bumping the LSB.
.2c5d	60		rts				rts
.2c5e					MInt32True:
.2c5e	a9 ff		lda #$ff			lda 	#$FF 						; set to $FFFFFFFF
.2c60	d0 02		bne $2c64			bne 	MInt32WriteAll
.2c62					MInt32False:
.2c62	a9 00		lda #$00			lda 	#0
.2c64					MInt32WriteAll:
.2c64	95 48		sta $48,x			sta 	esInt0,x
.2c66					MInt32Write123:
.2c66	95 50		sta $50,x			sta 	esInt1,x
.2c68	95 58		sta $58,x			sta 	esInt2,x
.2c6a	95 60		sta $60,x			sta 	esInt3,x
.2c6c	a9 00		lda #$00			lda 	#$00						; and make it an integer
.2c6e	95 40		sta $40,x			sta 	esType,x
.2c70	60		rts				rts
.2c71					MInt32Set8Bit:
.2c71	95 48		sta $48,x			sta 	esInt0,x 					; coopt above function to write
.2c73	a9 00		lda #$00			lda 	#0 							; a value 0-255
.2c75	f0 ef		beq $2c66			beq		MInt32Write123
.2c77					MInt32ShiftLeft:
.2c77	16 48		asl $48,x			asl 	esInt0,x
.2c79	36 50		rol $50,x			rol	 	esInt1,x
.2c7b	36 58		rol $58,x			rol	 	esInt2,x
.2c7d	36 60		rol $60,x			rol	 	esInt3,x
.2c7f	60		rts				rts
.2c80					MInt32ShiftRight:
.2c80	56 60		lsr $60,x			lsr 	esInt3,x
.2c82	76 58		ror $58,x			ror 	esInt2,x
.2c84	76 50		ror $50,x			ror 	esInt1,x
.2c86	76 48		ror $48,x			ror 	esInt0,x
.2c88	60		rts				rts
.2c89					MInt32Zero:
.2c89	b5 48		lda $48,x			lda 	esInt0,x
.2c8b	15 50		ora $50,x			ora 	esInt1,x
.2c8d	15 58		ora $58,x			ora 	esInt2,x
.2c8f	15 60		ora $60,x			ora 	esInt3,x
.2c91	60		rts				rts
.2c92					MInt32Random:
.2c92	98		tya				tya
.2c93	48		pha				pha
.2c94	a0 07		ldy #$07			ldy 	#7 							; do it 7 times
.2c96	ad 12 0c	lda $0c12			lda 	MSeed32+0 					; check the seed isn't zero
.2c99	d0 03		bne $2c9e			bne 	_Random1
.2c9b	a8		tay				tay 								; if so do it 256 times
.2c9c	a9 aa		lda #$aa			lda		#$AA 						; and use this to seed the seed....
.2c9e					_Random1:
.2c9e	0a		asl a				asl 	a
.2c9f	2e 13 0c	rol $0c13			rol 	MSeed32+1
.2ca2	2e 14 0c	rol $0c14			rol 	MSeed32+2
.2ca5	2e 15 0c	rol $0c15			rol 	MSeed32+3
.2ca8	90 02		bcc $2cac			bcc 	_Random2
.2caa	49 c5		eor #$c5			eor 	#$C5
.2cac					_Random2:
.2cac	88		dey				dey
.2cad	d0 ef		bne $2c9e			bne 	_Random1
.2caf	8d 12 0c	sta $0c12			sta 	MSeed32+0 					; copy the seed in.
.2cb2	95 48		sta $48,x			sta 	esInt0,x
.2cb4	ad 13 0c	lda $0c13			lda 	MSeed32+1
.2cb7	95 50		sta $50,x			sta 	esInt1,x
.2cb9	ad 14 0c	lda $0c14			lda 	MSeed32+2
.2cbc	95 58		sta $58,x			sta 	esInt2,x
.2cbe	ad 15 0c	lda $0c15			lda 	MSeed32+3
.2cc1	95 60		sta $60,x			sta 	esInt3,x
.2cc3	68		pla				pla
.2cc4	a8		tay				tay
.2cc5	a9 00		lda #$00			lda 	#0
.2cc7	95 40		sta $40,x			sta 	esType,x
.2cc9	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/utility/check.asm

.2cca					CheckToken:
.2cca	d1 28		cmp ($28),y			cmp 	(codePtr),y
.2ccc	d0 02		bne $2cd0			bne 	_CTError
.2cce	c8		iny				iny
.2ccf	60		rts				rts
.2cd0					_CTError:
.2cd0	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.2cd2	20 85 11	jsr $1185		jsr	errorHandler
.2cd5					CheckRightParen:
.2cd5	b1 28		lda ($28),y			lda 	(codePtr),y
.2cd7	c8		iny				iny
.2cd8	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.2cda	d0 01		bne $2cdd			bne 	_CRPError
.2cdc	60		rts				rts
.2cdd					_CRPError:
.2cdd	a2 09		ldx #$09			ldx 	#ErrorID_MissingRP
.2cdf	20 85 11	jsr $1185		jsr	errorHandler
.2ce2					CheckComma:
.2ce2	b1 28		lda ($28),y			lda 	(codePtr),y
.2ce4	c8		iny				iny
.2ce5	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.2ce7	d0 01		bne $2cea			bne 	_CCError
.2ce9	60		rts				rts
.2cea					_CCError:
.2cea	a2 0a		ldx #$0a			ldx 	#ErrorID_MissingComma
.2cec	20 85 11	jsr $1185		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/utility/scanner.asm

.2cef					ScanForward:
.2cef	85 2c		sta $2c				sta 	temp1 						; save tokens to search in temp1/temp1+1
.2cf1	86 2d		stx $2d				stx 	temp1+1
.2cf3	a9 00		lda #$00			lda 	#0 							; temp2 counts structure levels.
.2cf5	85 2e		sta $2e				sta 	temp2
.2cf7	b1 28		lda ($28),y	_SFLoop:lda 	(codePtr),y 				; look at the next token.
.2cf9	c8		iny				iny
.2cfa	a6 2e		ldx $2e				ldx 	temp2 						; check structure levels are zero.
.2cfc	d0 08		bne $2d06			bne 	_SFNoCheck 					; if so, check token against entered values.
.2cfe	c5 2c		cmp $2c				cmp 	temp1 						; if either matches, we've reached the token
.2d00	f0 24		beq $2d26			beq 	_SFExit 					; at the same strcture depth.
.2d02	c5 2d		cmp $2d				cmp 	temp1+1
.2d04	f0 20		beq $2d26			beq 	_SFExit
.2d06					_SFNoCheck:
.2d06	c9 80		cmp #$80			cmp 	#$80 						; if it is 00-7F (variable/number) just skip it.
.2d08	90 ed		bcc $2cf7			bcc 	_SFLoop
.2d0a	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; $80-$85 is various specials.
.2d0c	90 19		bcc $2d27			bcc 	_SFSpecials
.2d0e	c9 99		cmp #$99			cmp 	#TOK_STRUCTST 				; if < structure start then continue
.2d10	90 e5		bcc $2cf7			bcc 	_SFLoop
.2d12	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST 				; if >= unary start (after structure) then continue.
.2d14	b0 e1		bcs $2cf7			bcs 	_SFLoop
.2d16	aa		tax				tax  								; token in X, and look up the adjuster.
.2d17	bd 6a 25	lda $256a,x			lda 	ELBinaryOperatorInfo-TOK_BINARYST,x
.2d1a	38		sec				sec 								; convert to an offset ($FF,$01)
.2d1b	e9 81		sbc #$81			sbc 	#$81
.2d1d	18		clc				clc 								; add to depth
.2d1e	65 2e		adc $2e				adc 	temp2
.2d20	85 2e		sta $2e				sta 	temp2
.2d22	10 d3		bpl $2cf7			bpl 	_SFLoop 					; +ve okay to continue
.2d24	30 07		bmi $2d2d			bmi 	SFError 					; if gone -ve then we have a nesting error
.2d26	60		rts		_SFExit:rts
.2d27					_SFSpecials:
.2d27	20 32 2d	jsr $2d32			jsr 	ScannerSkipSpecial
.2d2a	4c f7 2c	jmp $2cf7			jmp 	_SFLoop
.2d2d					SFError:
.2d2d	a2 14		ldx #$14			ldx 	#ErrorID_Struct
.2d2f	20 85 11	jsr $1185		jsr	errorHandler
.2d32					ScannerSkipSpecial:
.2d32	c9 80		cmp #$80			cmp 	#TOK_EOL 					; $80, advance to next line.
.2d34	f0 10		beq $2d46			beq 	_SFNextLine
.2d36	c9 84		cmp #$84			cmp 	#TOK_FPC					; $84, skip embedded float
.2d38	f0 2b		beq $2d65			beq 	_SFFloatSkip
.2d3a	c9 85		cmp #$85			cmp 	#TOK_STR 					; $85, skip string
.2d3c	f0 02		beq $2d40			beq 	_SFSkipString
.2d3e	c8		iny				iny									; $81,$82,$83 shift, so just advance over the shifted
.2d3f	60		rts				rts 								; token.
.2d40					_SFSkipString:
.2d40	98		tya				tya
.2d41	38		sec				sec
.2d42	71 28		adc ($28),y			adc 	(codePtr),y
.2d44	a8		tay				tay
.2d45	60		rts				rts
.2d46					_SFNextLine:
.2d46	a0 00		ldy #$00			ldy 	#0 							; get offset
.2d48	b1 28		lda ($28),y			lda 	(codePtr),y
.2d4a	18		clc				clc 								; add to code pointer.
.2d4b	65 28		adc $28				adc 	codePtr
.2d4d	85 28		sta $28				sta 	codePtr
.2d4f	90 02		bcc $2d53			bcc		_SFNLNoCarry
.2d51	e6 29		inc $29				inc 	codePtr+1
.2d53					_SFNLNoCarry:
.2d53	b1 28		lda ($28),y			lda 	(codePtr),y 				; reached the end of the program.
.2d55	d0 0b		bne $2d62			bne		_SFXNL 						; no go round again
.2d57	a5 2c		lda $2c				lda 	temp1
.2d59	c9 dc		cmp #$dc			cmp 	#TKW_DATA 					; if searching for Data different error.
.2d5b	d0 d0		bne $2d2d			bne 	SFError 					; read uses this to search for data statements
.2d5d	a2 1c		ldx #$1c			ldx 	#ErrorID_DataError
.2d5f	20 85 11	jsr $1185		jsr	errorHandler
.2d62	a0 03		ldy #$03	_SFXNL:	ldy 	#3
.2d64	60		rts				rts
.2d65					_SFFloatSkip:
.2d65	98		tya				tya 								; skip over an embedded float.
.2d66	18		clc				clc
.2d67	69 05		adc #$05			adc 	#FloatEmbeddedSize
.2d69	a8		tay				tay
.2d6a	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/utility/stack.asm

.0037					rsPointer:
>0037							.fill 	2							; to TOS, which is the current top-token.
.2d6b					RSReset:
.2d6b	a9 ff		lda #$ff			lda 	#(returnStack+retStackSize-1) & $FF
.2d6d	85 37		sta $37				sta 	rsPointer
.2d6f	a9 09		lda #$09			lda 	#(returnStack+retStackSize-1) >> 8
.2d71	85 38		sta $38				sta 	1+(rsPointer)
.2d73	a9 ff		lda #$ff			lda 	#$FF 						; put a duff marker on TOS, so nothing will pop
.2d75	8d ff 09	sta $09ff			sta 	returnStack+retStackSize-1
.2d78	60		rts				rts
.2d79					RSClaim:
.2d79	84 32		sty $32				sty 	tempShort 					; preserve Y
.2d7b	48		pha				pha 								; save marker on stack.
.2d7c	8a		txa				txa 								; get bytes required.
.2d7d	38		sec				sec
.2d7e	49 ff		eor #$ff			eor 	#$FF 						; add to rsPointer using 2's complement.
.2d80	65 37		adc $37				adc 	rsPointer
.2d82	85 37		sta $37				sta 	rsPointer
.2d84	a5 38		lda $38				lda 	rsPointer+1
.2d86	69 ff		adc #$ff			adc 	#$FF
.2d88	85 38		sta $38				sta 	rsPointer+1
.2d8a	c9 08		cmp #$08			cmp 	#returnStack>>8 			; overflow. underflow actually :)
.2d8c	90 08		bcc $2d96			bcc 	_RSCOverflow
.2d8e	68		pla				pla 								; get marker back
.2d8f	a0 00		ldy #$00			ldy 	#0 							; write marker out.
.2d91	91 37		sta ($37),y			sta 	(rsPointer),y
.2d93	a4 32		ldy $32				ldy 	tempShort 					; restore Y and exit
.2d95	60		rts				rts
.2d96					_RSCOverflow:
.2d96	a2 16		ldx #$16			ldx 	#ErrorID_RetStack
.2d98	20 85 11	jsr $1185		jsr	errorHandler
.2d9b					RSFree:
.2d9b	18		clc				clc
.2d9c	65 37		adc $37				adc 	rsPointer
.2d9e	85 37		sta $37				sta 	rsPointer
.2da0	90 02		bcc $2da4			bcc 	_RSFExit
.2da2	e6 38		inc $38				inc 	rsPointer+1
.2da4					_RSFExit:
.2da4	60		rts				rts
.2da5					RSSavePosition:
.2da5	84 32		sty $32				sty 	tempShort 					; save Y position
.2da7	a8		tay				tay 								; this is where we write it.
.2da8	a5 28		lda $28				lda 	codePtr 					; write codePointer out
.2daa	91 37		sta ($37),y			sta 	(rsPointer),y
.2dac	c8		iny				iny
.2dad	a5 29		lda $29				lda 	codePtr+1
.2daf	91 37		sta ($37),y			sta 	(rsPointer),y
.2db1	c8		iny				iny
.2db2	a5 32		lda $32				lda 	tempShort 					; write the Y position out.
.2db4	91 37		sta ($37),y			sta 	(rsPointer),y
.2db6	a8		tay				tay 								; fix Y back again to original value
.2db7	60		rts				rts
.2db8					RSLoadPosition:
.2db8	a8		tay				tay
.2db9	b1 37		lda ($37),y			lda 	(rsPointer),y 				; read codePointer back
.2dbb	85 28		sta $28				sta 	codePtr
.2dbd	c8		iny				iny
.2dbe	b1 37		lda ($37),y			lda 	(rsPointer),y
.2dc0	85 29		sta $29				sta 	codePtr+1
.2dc2	c8		iny				iny
.2dc3	b1 37		lda ($37),y			lda 	(rsPointer),y 				; and the offset
.2dc5	a8		tay				tay 								; to Y
.2dc6	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/utility/warmstart.asm

.2dc7					WarmStart:
.2dc7	a2 02		ldx #$02		ldx	#2
.2dc9	20 62 17	jsr $1762		jsr	interactionHandler

;******  Return to file: main/main.asm

.2dcc					mainHandler:
.2dcc	7c cf 2d	jmp ($2dcf,x)			jmp 	(mainVectors,x)
.2dcf					mainVectors:
>2dcf	d5 2c					.word CheckRightParen      ; index 0
>2dd1	77 17					.word XCommandClear        ; index 2
>2dd3	ec 26					.word LinkEvaluate         ; index 4
>2dd5	f8 26					.word LinkEvaluateInteger  ; index 6
>2dd7	fe 26					.word LinkEvaluateSmallInt ; index 8
>2dd9	f2 26					.word LinkEvaluateTerm     ; index 10
>2ddb	b1 2b					.word MLInt32ToString      ; index 12
>2ddd	95 1c					.word Command_XNew         ; index 14
>2ddf	a4 1e					.word XCommand_Run         ; index 16
>2de1	b0 1e					.word Command_RunFrom      ; index 18
>2de3	c9 2a					.word LinkInt32FromString  ; index 20

;******  Return to file: basic.asm

.2de5					section_end_main:
.2de5					section_start_string:

;******  Processing file: string/string.asm


;******  Processing file: string/chr.asm

.2de5					StringChrs:
.2de5	aa		tax				tax 								; set up stack
.2de6	a9 02		lda #$02			lda 	#2
.2de8	20 a8 2e	jsr $2ea8			jsr 	AllocateSoftString
.2deb	98		tya				tya
.2dec	20 ce 2e	jsr $2ece			jsr 	WriteSoftString
.2def					StringUpdate:
.2def	20 fd 2d	jsr $2dfd			jsr 	ReturnSoftString
.2df2	8a		txa				txa
.2df3	60		rts				rts
.2df4					StringNull:
.2df4	aa		tax				tax
.2df5	a9 01		lda #$01			lda 	#1
.2df7	20 a8 2e	jsr $2ea8			jsr 	AllocateSoftString
.2dfa	4c ef 2d	jmp $2def			jmp 	StringUpdate
.2dfd					ReturnSoftString:
.2dfd	a5 39		lda $39				lda 	softMemAlloc 				; copy address
.2dff	95 48		sta $48,x			sta 	esInt0,x
.2e01	a5 3a		lda $3a				lda 	softMemAlloc+1
.2e03	95 50		sta $50,x			sta 	esInt1,x
.2e05	a9 00		lda #$00			lda 	#0 							; zero upper bytes
.2e07	95 58		sta $58,x			sta 	esInt2,x
.2e09	95 60		sta $60,x			sta 	esInt3,x
.2e0b	a9 40		lda #$40			lda 	#$40 						; type string.
.2e0d	95 40		sta $40,x			sta 	esType,x
.2e0f	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/compare.asm

.2e10					STRCompare:
.2e10	48		pha				pha 								; save A
.2e11	aa		tax				tax 								; put stack pos in X
.2e12	98		tya				tya
.2e13	48		pha				pha
.2e14	20 48 2e	jsr $2e48			jsr 	CopyStringPair 				; copy strings to temp0,temp1
.2e17	a0 00		ldy #$00			ldy 	#0 							; get the smaller of the two string sizes.
.2e19	b1 2a		lda ($2a),y			lda 	(temp0),y
.2e1b	d1 2c		cmp ($2c),y			cmp 	(temp1),y
.2e1d	90 02		bcc $2e21			bcc 	_SCNotSmaller
.2e1f	b1 2c		lda ($2c),y			lda 	(temp1),y
.2e21					_SCNotSmaller:
.2e21	aa		tax				tax 								; put that in X. We compare this many chars first.
.2e22					_SCCompareLoop:
.2e22	e0 00		cpx #$00			cpx 	#0 							; if compared all the smaller, then it is the shorter
.2e24	f0 0c		beq $2e32			beq 	_SCSameToEndShortest 		; one that is the smallest if they are different lengths.
.2e26	ca		dex				dex 								; decrement chars to compare.
.2e27	c8		iny				iny 								; move to next character
.2e28	38		sec				sec 								; calculate s1[y]-s2[y]
.2e29	b1 2a		lda ($2a),y			lda 	(temp0),y
.2e2b	f1 2c		sbc ($2c),y			sbc 	(temp1),y
.2e2d	d0 0a		bne $2e39			bne 	_SCReturnResult 			; if different return sign of A
.2e2f	4c 22 2e	jmp $2e22			jmp 	_SCCompareLoop
.2e32					_SCSameToEndShortest
.2e32	a0 00		ldy #$00			ldy 	#0 							; compare len(s1) - len(s2)
.2e34	38		sec				sec
.2e35	b1 2a		lda ($2a),y			lda 	(temp0),y
.2e37	f1 2c		sbc ($2c),y			sbc 	(temp1),y
.2e39					_SCReturnResult:
.2e39	08		php				php 								; set return to zero preserving PSW.
.2e3a	a2 00		ldx #$00			ldx 	#0
.2e3c	28		plp				plp
.2e3d	f0 05		beq $2e44			beq 	_SCExit 					; two values equal, then exit
.2e3f	ca		dex				dex 								; X = $FF
.2e40	90 02		bcc $2e44			bcc 	_SCExit 					; if 1st < 2nd then -1
.2e42	a2 01		ldx #$01			ldx 	#1 							; X = $01 if greater
.2e44					_SCExit:
.2e44	68		pla				pla
.2e45	a8		tay				tay
.2e46	68		pla				pla
.2e47	60		rts				rts
.2e48					CopyStringPair:
.2e48	b5 49		lda $49,x			lda 	esInt0+1,x
.2e4a	85 2c		sta $2c				sta 	temp1
.2e4c	b5 51		lda $51,x			lda 	esInt1+1,x
.2e4e	85 2d		sta $2d				sta 	temp1+1
.2e50					CopyStringTop:
.2e50	b5 48		lda $48,x			lda 	esInt0,x
.2e52	85 2a		sta $2a				sta 	temp0
.2e54	b5 50		lda $50,x			lda 	esInt1,x
.2e56	85 2b		sta $2b				sta 	temp0+1
.2e58	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/concat.asm

.2e59					StringConcat:
.2e59	aa		tax				tax									; stack pos in X
.2e5a	98		tya				tya
.2e5b	48		pha				pha
.2e5c	20 48 2e	jsr $2e48			jsr 	CopyStringPair 				; temp0 and temp1 point to strings to concat.
.2e5f	38		sec				sec 								; calculate alloc strings. lengths added + 1 for size.
.2e60	a0 00		ldy #$00			ldy 	#0
.2e62	b1 2a		lda ($2a),y			lda 	(temp0),y
.2e64	71 2c		adc ($2c),y			adc 	(temp1),y
.2e66	b0 1c		bcs $2e84			bcs 	_SCError 					; just too many characters here.
.2e68	c9 fc		cmp #$fc			cmp 	#MaxStringSize
.2e6a	b0 18		bcs $2e84			bcs 	_SCError
.2e6c	20 a8 2e	jsr $2ea8			jsr 	AllocateSoftString 			; allocate soft string memory, set pointer.
.2e6f	20 9f 2e	jsr $2e9f			jsr 	CopySoftToStack 			; copy that to the stack.
.2e72	20 89 2e	jsr $2e89			jsr 	SCCopyTemp0 				; copy temp0
.2e75	a5 2c		lda $2c				lda 	temp1 						; copy temp1 to temp0
.2e77	85 2a		sta $2a				sta 	temp0
.2e79	a5 2d		lda $2d				lda 	temp1+1
.2e7b	85 2b		sta $2b				sta 	temp0+1
.2e7d	20 89 2e	jsr $2e89			jsr 	SCCopyTemp0 				; copy temp0 e.g. what was temp1.
.2e80	68		pla				pla
.2e81	a8		tay				tay
.2e82	8a		txa				txa 								; and A
.2e83	60		rts				rts
.2e84					_SCError:
.2e84	a2 0d		ldx #$0d			ldx 	#ErrorID_StrLen
.2e86	20 85 11	jsr $1185		jsr	errorHandler
.2e89					SCCopyTemp0:
.2e89	a0 00		ldy #$00			ldy 	#0 							; put count in temp2
.2e8b	b1 2a		lda ($2a),y			lda 	(temp0),y
.2e8d	85 2e		sta $2e				sta 	temp2
.2e8f					_SCCopyLoop:
.2e8f	a5 2e		lda $2e				lda 	temp2 						; done the lot
.2e91	f0 0b		beq $2e9e			beq 	_SCCopyExit
.2e93	c6 2e		dec $2e				dec 	temp2
.2e95	c8		iny				iny 								; get next char
.2e96	b1 2a		lda ($2a),y			lda 	(temp0),y
.2e98	20 ce 2e	jsr $2ece			jsr 	WriteSoftString 			; write to soft string.
.2e9b	4c 8f 2e	jmp $2e8f			jmp 	_SCCopyLoop
.2e9e					_SCCopyExit:
.2e9e	60		rts				rts
.2e9f					CopySoftToStack:
.2e9f	a5 39		lda $39				lda 	SoftMemAlloc 				; copy the memory allocation pointer to the stack.
.2ea1	95 48		sta $48,x			sta 	esInt0,x 					; type is already string.
.2ea3	a5 3a		lda $3a				lda 	SoftMemAlloc+1
.2ea5	95 50		sta $50,x			sta 	esInt1,x
.2ea7	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/memory.asm

.0039					softMemAlloc:
>0039							.fill 	2  							; if MSB is zero needs resetting on allocation.
.2ea8					AllocateSoftString:
.2ea8	85 32		sta $32				sta 	tempShort 					; save count
.2eaa	98		tya				tya
.2eab	48		pha				pha
.2eac	a5 3a		lda $3a				lda 	softMemAlloc+1 				; if the high byte is zero, it needs allocating.
.2eae	d0 09		bne $2eb9			bne 	_ASSDone
.2eb0	a5 33		lda $33				lda 	highMemory 					; reset the soft memory alloc pointer.
.2eb2	85 39		sta $39				sta 	softMemAlloc 				; to speed up slightly, we only reset this when we first need it
.2eb4	a4 34		ldy $34				ldy 	highMemory+1 				; but it needs to be reset before each command.
.2eb6	88		dey				dey 								; it is set to 1/4k below high memory, allowing space
.2eb7	84 3a		sty $3a				sty 	softMemAlloc+1 				; for a concreted string.
.2eb9					_ASSDone:
.2eb9	38		sec				sec 								; allocate downwards enough memory
.2eba	a5 39		lda $39				lda 	softMemAlloc 				; subtract the memory requirements in A from
.2ebc	e5 32		sbc $32				sbc 	tempShort 					; the soft memory pointer
.2ebe	85 39		sta $39				sta 	softMemAlloc
.2ec0	a5 3a		lda $3a				lda 	softMemAlloc+1
.2ec2	e9 00		sbc #$00			sbc 	#0
.2ec4	85 3a		sta $3a				sta 	softMemAlloc+1
.2ec6	a9 00		lda #$00			lda 	#0 							; empty that string, set the length = 0.
.2ec8	a8		tay				tay
.2ec9	91 39		sta ($39),y			sta 	(softMemAlloc),y
.2ecb	68		pla				pla
.2ecc	a8		tay				tay
.2ecd	60		rts				rts
.2ece					WriteSoftString:
.2ece	84 32		sty $32				sty 	tempShort 					; save Y
.2ed0	48		pha				pha 								; save character on stack
.2ed1	a0 00		ldy #$00			ldy 	#0 							; get and bump length
.2ed3	b1 39		lda ($39),y			lda 	(softMemAlloc),y
.2ed5	18		clc				clc
.2ed6	69 01		adc #$01			adc 	#1
.2ed8	91 39		sta ($39),y			sta 	(softMemAlloc),y
.2eda	a8		tay				tay 								; offset in Y
.2edb	68		pla				pla 								; get char and write.
.2edc	91 39		sta ($39),y			sta 	(softMemAlloc),y
.2ede	a4 32		ldy $32				ldy 	tempShort 					; restore Y and exit.
.2ee0	60		rts				rts
.2ee1					StrClone:
.2ee1	aa		tax				tax 								; set up stack.
.2ee2	98		tya				tya
.2ee3	48		pha				pha
.2ee4	a0 00		ldy #$00			ldy 	#0 							; get length, add 1 for length
.2ee6	b1 2a		lda ($2a),y			lda 	(temp0),y 					; this is the bytes required.
.2ee8	18		clc				clc
.2ee9	69 01		adc #$01			adc 	#1
.2eeb	20 a8 2e	jsr $2ea8			jsr 	AllocateSoftString 			; allocate soft memory
.2eee	a5 39		lda $39				lda 	softMemAlloc 				; copy that address to TOS
.2ef0	95 48		sta $48,x			sta 	esInt0,x
.2ef2	a5 3a		lda $3a				lda 	softMemAlloc+1
.2ef4	95 50		sta $50,x			sta 	esInt1,x
.2ef6	a9 00		lda #$00			lda 	#0 							; zero upper 2 bytes
.2ef8	95 58		sta $58,x			sta 	esInt2,x
.2efa	95 60		sta $60,x			sta 	esInt3,x
.2efc	a9 40		lda #$40			lda 	#$40 						; set type to string.
.2efe	95 40		sta $40,x			sta 	esType,x
.2f00	20 89 2e	jsr $2e89			jsr 	SCCopyTemp0 				; copy temp0 string to soft memory copy (concat.asm)
.2f03	68		pla				pla
.2f04	a8		tay				tay
.2f05	8a		txa				txa
.2f06	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/setcase.asm

.2f07					CaseString:
.2f07	48		pha				pha 								; save A and copy to X
.2f08	aa		tax				tax
.2f09	98		tya				tya
.2f0a	48		pha				pha
.2f0b	20 50 2e	jsr $2e50			jsr 	CopyStringTop 				; target string -> temp0
.2f0e	a0 00		ldy #$00			ldy 	#0
.2f10	b1 2a		lda ($2a),y			lda 	(temp0),y  					; get length,
.2f12	18		clc				clc
.2f13	69 01		adc #$01			adc 	#1 							; one more for length byte
.2f15	20 a8 2e	jsr $2ea8			jsr 	AllocateSoftString 			; allocate soft string memory, set pointer.
.2f18	20 9f 2e	jsr $2e9f			jsr 	CopySoftToStack 			; copy that to the stack.
.2f1b	a0 00		ldy #$00			ldy 	#0
.2f1d	b1 2a		lda ($2a),y			lda 	(temp0),y 					; count to copy in X
.2f1f	aa		tax				tax
.2f20					_CSCopy:
.2f20	e0 00		cpx #$00			cpx 	#0 							; finished if 0.
.2f22	f0 24		beq $2f48			beq 	_CSExit
.2f24	ca		dex				dex
.2f25	c8		iny				iny
.2f26	68		pla				pla 								; check direction
.2f27	48		pha				pha
.2f28	f0 0c		beq $2f36			beq 	_CSUpper
.2f2a	b1 2a		lda ($2a),y			lda 	(temp0),y 					; lower$() code
.2f2c	c9 41		cmp #$41			cmp 	#"A"
.2f2e	90 12		bcc $2f42			bcc 	_CSWrite
.2f30	c9 5b		cmp #$5b			cmp 	#"Z"+1
.2f32	b0 0e		bcs $2f42			bcs 	_CSWrite
.2f34	90 0a		bcc $2f40			bcc 	_CSFlipWrite
.2f36					_CSUpper:
.2f36	b1 2a		lda ($2a),y			lda 	(temp0),y 					; upper$() code
.2f38	c9 61		cmp #$61			cmp 	#"a"
.2f3a	90 06		bcc $2f42			bcc 	_CSWrite
.2f3c	c9 7b		cmp #$7b			cmp 	#"z"+1
.2f3e	b0 02		bcs $2f42			bcs 	_CSWrite
.2f40					_CSFlipWrite:
.2f40	49 20		eor #$20			eor 	#"A"^"a" 					; switch case.
.2f42					_CSWrite:
.2f42	20 ce 2e	jsr $2ece			jsr 	WriteSoftString 			; add to soft string.
.2f45	4c 20 2f	jmp $2f20			jmp 	_CSCopy
.2f48					_CSExit:
.2f48	68		pla				pla
.2f49	a8		tay				tay
.2f4a	68		pla				pla
.2f4b	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/substring.asm

.2f4c					StringSubstring:
.2f4c	48		pha				pha
.2f4d	aa		tax				tax 								; access stack.
.2f4e	98		tya				tya
.2f4f	48		pha				pha
.2f50	20 50 2e	jsr $2e50			jsr 	CopyStringTop 				; point temp0 to the string.
.2f53	a0 00		ldy #$00			ldy 	#0 							; get length.
.2f55	b1 2a		lda ($2a),y			lda 	(temp0),Y
.2f57	85 2c		sta $2c				sta 	temp1
.2f59	b5 49		lda $49,x			lda 	esInt0+1,x 					; get the initial offset
.2f5b	c5 2c		cmp $2c				cmp 	temp1 						; return "" if > length.
.2f5d	f0 02		beq $2f61			beq 	_SSBOkay
.2f5f	b0 2a		bcs $2f8b			bcs 	_SSBReturnNull
.2f61					_SSBOkay:
.2f61	a5 2c		lda $2c				lda 	temp1 						; get the total length +1
.2f63	18		clc				clc
.2f64	69 01		adc #$01			adc 	#1
.2f66	38		sec				sec
.2f67	f5 49		sbc $49,x			sbc 	esInt0+1,x 					; the anything >= this is bad - max size
.2f69	d5 4a		cmp $4a,x			cmp 	esInt0+2,x  				; check bad >= required
.2f6b	90 02		bcc $2f6f			bcc		_SSBTrunc
.2f6d	b5 4a		lda $4a,x			lda 	esInt0+2,x
.2f6f					_SSBTrunc:
.2f6f	85 2d		sta $2d				sta 	temp1+1 					; characters to copy.
.2f71	18		clc				clc
.2f72	69 01		adc #$01			adc 	#1 							; add 1
.2f74	20 a8 2e	jsr $2ea8			jsr 	AllocateSoftString 			; allocate soft string memory, set pointer.
.2f77	20 9f 2e	jsr $2e9f			jsr 	CopySoftToStack 			; copy that to the stack.
.2f7a	b4 49		ldy $49,x			ldy 	esInt0+1,x 					; get initial position of char to copy
.2f7c					_SSBCopyLoop:
.2f7c	a5 2d		lda $2d				lda 	temp1+1 					; done them all
.2f7e	f0 0e		beq $2f8e			beq 	_SSBExit
.2f80	c6 2d		dec $2d				dec 	temp1+1
.2f82	b1 2a		lda ($2a),y			lda 	(temp0),y 					; get and write character
.2f84	20 ce 2e	jsr $2ece			jsr 	WriteSoftString
.2f87	c8		iny				iny
.2f88	4c 7c 2f	jmp $2f7c			jmp 	_SSBCopyLoop
.2f8b					_SSBReturnNull:
.2f8b	20 92 2f	jsr $2f92			jsr 	ReturnNull
.2f8e					_SSBExit:
.2f8e	68		pla				pla
.2f8f	a8		tay				tay
.2f90	68		pla				pla
.2f91	60		rts				rts
.2f92					ReturnNull:
.2f92	a9 00		lda #$00			lda 	#0 							; clear null string
.2f94	8d ce 0a	sta $0ace			sta 	NullString
.2f97	a9 ce		lda #$ce			lda 	#NullString & $FF 			; set a pointer to it
.2f99	95 48		sta $48,x			sta 	esInt0,x
.2f9b	a9 0a		lda #$0a			lda 	#NullString >> 8
.2f9d	95 50		sta $50,x			sta 	esInt1,x
.2f9f	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/write.asm

.0c16					srcStrLen:
>0c16							.fill 	1
.2fa0					StringWrite:
.2fa0	aa		tax				tax
.2fa1	48		pha				pha
.2fa2	98		tya				tya
.2fa3	48		pha				pha
.2fa4	20 cb 2f	jsr $2fcb			jsr 	CheckOverwriteCurrent
.2fa7	b0 0d		bcs $2fb6			bcs		_SWCopyCurrent
.2fa9	20 09 30	jsr $3009			jsr 	RequiresConcretion
.2fac	90 0e		bcc $2fbc			bcc 	_SWWriteReference
.2fae	20 6c 30	jsr $306c			jsr 	CheckSpecialConcretion
.2fb1	b0 09		bcs $2fbc			bcs 	_SWWriteReference
.2fb3	20 1d 30	jsr $301d			jsr 	AllocateHardMemory
.2fb6					_SWCopyCurrent:
.2fb6	20 50 30	jsr $3050			jsr 	CopyStringToHardMemory
.2fb9	4c c7 2f	jmp $2fc7			jmp 	_SWExit
.2fbc					_SWWriteReference
.2fbc	a0 00		ldy #$00			ldy 	#0
.2fbe	a5 2a		lda $2a				lda 	temp0
.2fc0	91 2c		sta ($2c),y			sta 	(temp1),y
.2fc2	c8		iny				iny
.2fc3	a5 2b		lda $2b				lda 	temp0+1
.2fc5	91 2c		sta ($2c),y			sta 	(temp1),y
.2fc7					_SWExit:
.2fc7	68		pla				pla
.2fc8	a8		tay				tay
.2fc9	68		pla				pla
.2fca	60		rts				rts
.2fcb					CheckOverwriteCurrent:
.2fcb	a0 00		ldy #$00			ldy 	#0 						; get address of string being written to temp0
.2fcd	b5 51		lda $51,x			lda 	esInt1+1,x
.2fcf	85 2b		sta $2b				sta 	temp0+1
.2fd1	b5 49		lda $49,x			lda 	esInt0+1,x
.2fd3	85 2a		sta $2a				sta 	temp0
.2fd5	b1 2a		lda ($2a),y			lda 	(temp0),y 				; get length of string being copied and save it.
.2fd7	8d 16 0c	sta $0c16			sta 	srcStrLen
.2fda	b5 48		lda $48,x			lda 	esInt0,x 				; copy where the final address it being written to temp1.
.2fdc	85 2c		sta $2c				sta 	temp1 					; e.g. if it is ax$ then temp1 will point to the ax$
.2fde	b5 50		lda $50,x			lda 	esInt1,x 				; data record + 5
.2fe0	85 2d		sta $2d				sta 	temp1+1
.2fe2	a0 01		ldy #$01			ldy 	#1 						; get the MSB of the address of string currently stored there.
.2fe4	b1 2c		lda ($2c),y			lda 	(temp1),y
.2fe6	c5 34		cmp $34				cmp 	highMemory+1 			; if < high memory then it cannot be something stored
.2fe8	90 1b		bcc $3005			bcc 	_COCFail 				; in hard memory.
.2fea	a0 00		ldy #$00			ldy 	#0 						; copy target address - 1 into temp2
.2fec	b1 2c		lda ($2c),y			lda 	(temp1),y 				; when allocating hard memory, the overall size is
.2fee	e9 01		sbc #$01			sbc 	#1 						; in the previous byte.
.2ff0	85 2e		sta $2e				sta 	temp2
.2ff2	c8		iny				iny
.2ff3	b1 2c		lda ($2c),y			lda 	(temp1),y
.2ff5	e9 00		sbc #$00			sbc 	#0
.2ff7	85 2f		sta $2f				sta 	temp2+1
.2ff9	a0 00		ldy #$00			ldy 	#0 						; how large is this physical chunk.
.2ffb	b1 2e		lda ($2e),y			lda 	(temp2),y
.2ffd	38		sec				sec  							; maximum character capacity.
.2ffe	e9 02		sbc #$02			sbc 	#2
.3000	cd 16 0c	cmp $0c16			cmp 	srcStrLen 				; if >= the required length
.3003	b0 02		bcs $3007			bcs 	_COCCanReuse
.3005					_COCFail:
.3005	18		clc				clc
.3006	60		rts				rts
.3007					_COCCanReuse:
.3007	38		sec				sec
.3008	60		rts				rts
.3009					RequiresConcretion:
.3009	a5 2b		lda $2b				lda 	temp0+1 				; get MSB of address of string to be written
.300b	c5 34		cmp $34				cmp 	highMemory+1 			; if >= high memory it is concreted
.300d	b0 0a		bcs $3019			bcs 	_RCSucceed 				; so it needs concreting again - duplication.
.300f	a5 3a		lda $3a				lda 	softMemAlloc+1 			; have we allocated any soft memory yet ?
.3011	f0 08		beq $301b			beq 	_RCFail 				; if not, this cannot be soft memory.
.3013	a5 2b		lda $2b				lda 	temp0+1 				; get MSB of address of string to be written
.3015	c5 3a		cmp $3a				cmp 	softMemAlloc+1 			; if >= soft mem alloc it is either soft
.3017	90 02		bcc $301b			bcc 	_RCFail 				; so concreting
.3019					_RCSucceed:
.3019	38		sec				sec
.301a	60		rts				rts
.301b					_RCFail:
.301b	18		clc				clc
.301c	60		rts				rts
.301d					AllocateHardMemory:
.301d	98		tya				tya
.301e	48		pha				pha
.301f	ad 16 0c	lda $0c16			lda 	srcStrLen 				; characters in string
.3022	69 0a		adc #$0a			adc 	#1+1+8 					; one for hard memory size, one for string size, extra for expansion
.3024	b0 04		bcs $302a			bcs 	_AHMSetMax 				; max out that amount.
.3026	c9 fe		cmp #$fe			cmp 	#MaxStringSize+2
.3028	90 02		bcc $302c			bcc 	_AHMIsOkay
.302a					_AHMSetMax:
.302a	a9 fe		lda #$fe			lda 	#MaxStringSize+2
.302c					_AHMIsOkay:
.302c	48		pha				pha	 							; save size to be allocated
.302d	49 ff		eor #$ff			eor 	#$FF 					; complement and add to high Memory
.302f	38		sec				sec  							; and copy result to TOS as target address.
.3030	65 33		adc $33				adc 	highMemory
.3032	85 33		sta $33				sta 	highMemory
.3034	a5 34		lda $34				lda 	highMemory+1
.3036	69 ff		adc #$ff			adc 	#$FF
.3038	85 34		sta $34				sta 	highMemory+1
.303a	a0 00		ldy #$00			ldy 	#0 						; Y = 0
.303c	68		pla				pla 							; get the total size of the storage block
.303d	91 33		sta ($33),y			sta 	(highMemory),y 			; and set it
.303f	18		clc				clc
.3040	a5 33		lda $33				lda		highMemory 				; point the target address to the byte after this.
.3042	69 01		adc #$01			adc 	#1
.3044	91 2c		sta ($2c),y			sta 	(temp1),y
.3046	a5 34		lda $34				lda 	highMemory+1
.3048	69 00		adc #$00			adc 	#0
.304a	c8		iny				iny
.304b	91 2c		sta ($2c),y			sta 	(temp1),y
.304d	68		pla				pla
.304e	a8		tay				tay
.304f	60		rts				rts
.3050					CopyStringToHardMemory:
.3050	98		tya				tya
.3051	48		pha				pha
.3052	a0 00		ldy #$00			ldy 	#0 						; copy target address to temp2
.3054	b1 2c		lda ($2c),y			lda 	(temp1),y
.3056	85 2e		sta $2e				sta 	temp2
.3058	c8		iny				iny
.3059	b1 2c		lda ($2c),y			lda 	(temp1),y
.305b	85 2f		sta $2f				sta 	temp2+1
.305d	ac 16 0c	ldy $0c16			ldy 	srcStrLen 				; copy this + 1 characters, (length too) hence $FF compare
.3060					_CSTHMLoop:
.3060	b1 2a		lda ($2a),y			lda 	(temp0),y
.3062	91 2e		sta ($2e),y			sta 	(temp2),y
.3064	88		dey				dey
.3065	c0 ff		cpy #$ff			cpy 	#$FF 					; this does the +1
.3067	d0 f7		bne $3060			bne 	_CSTHMLoop
.3069	68		pla				pla
.306a	a8		tay				tay
.306b	60		rts				rts
.306c					CheckSpecialConcretion:
.306c	ad 16 0c	lda $0c16			lda 	srcStrLen 				; check string is null e.g. length = 0
.306f	f0 02		beq $3073			beq 	_CSCNullString
.3071	18		clc				clc
.3072	60		rts				rts
.3073					_CSCNullString:
.3073	a9 00		lda #$00			lda 	#0 						; by always returning this address we don't waste
.3075	8d ce 0a	sta $0ace			sta 	NullString		 		; storage on null strings.
.3078	a9 ce		lda #$ce			lda 	#(NullString) & $FF
.307a	85 2a		sta $2a				sta 	temp0
.307c	a9 0a		lda #$0a			lda 	#(NullString) >> 8
.307e	85 2b		sta $2b				sta 	1+(temp0)
.3080	38		sec				sec
.3081	60		rts				rts

;******  Return to file: string/string.asm

.3082					stringHandler:
.3082	7c 85 30	jmp ($3085,x)			jmp 	(stringVectors,x)
.3085					stringVectors:
>3085	e5 2d					.word StringChrs           ; index 0
>3087	e1 2e					.word StrClone             ; index 2
>3089	59 2e					.word StringConcat         ; index 4
>308b	f4 2d					.word StringNull           ; index 6
>308d	10 2e					.word STRCompare           ; index 8
>308f	07 2f					.word CaseString           ; index 10
>3091	4c 2f					.word StringSubstring      ; index 12
>3093	a0 2f					.word StringWrite          ; index 14

;******  Return to file: basic.asm

.3095					section_end_string:
.3095					section_start_tokeniser:

;******  Processing file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/detokenise/detokenise.asm

.0c17					deTokeniseVector:
>0c17							.fill 	2
.0c19					lastCharacterClass:
>0c19							.fill 	1
.0c1a					indent:
>0c1a							.fill 	1
.3095					ListLine:
.3095	48		pha				pha
.3096	a9 c3		lda #$c3			lda 	#(deTokenPrint) & $FF
.3098	8d 17 0c	sta $0c17			sta 	deTokeniseVector
.309b	a9 31		lda #$31			lda 	#(deTokenPrint) >> 8
.309d	8d 18 0c	sta $0c18			sta 	1+(deTokeniseVector)
.30a0	68		pla				pla
.30a1					Detokenise:
.30a1	18		clc				clc
.30a2	69 06		adc #$06			adc 	#6
.30a4	8d 1a 0c	sta $0c1a			sta 	indent
.30a7	a9 ff		lda #$ff			lda 	#$FF 					; last thing printed is a dummy value.
.30a9	8d 19 0c	sta $0c19			sta 	lastCharacterClass
.30ac	a2 02		ldx #$02			ldx 	#2
.30ae	20 62 2c	jsr $2c62			jsr 	MInt32False
.30b1	a0 01		ldy #$01			ldy 	#1 						; copy line number to stack,2 (as using stack 0,1)
.30b3	b1 28		lda ($28),y			lda 	(codePtr),y
.30b5	95 48		sta $48,x			sta 	esInt0,x
.30b7	c8		iny				iny
.30b8	b1 28		lda ($28),y			lda 	(codePtr),y
.30ba	95 50		sta $50,x			sta 	esInt1,x
.30bc	a9 84		lda #$84			lda 	#LTYLineNumber
.30be	20 9e 31	jsr $319e			jsr 	ListOutputCharacter
.30c1	a9 0a		lda #$0a			lda 	#10 					; base 10
.30c3	20 62 31	jsr $3162			jsr 	DTPrintInteger 			; print as integer.
.30c6	a0 00		ldy #$00			ldy 	#0 						; get length
.30c8	b1 2a		lda ($2a),y			lda 	(temp0),y 				; into X
.30ca	aa		tax				tax
.30cb					_DTPadOut:
.30cb	a9 20		lda #$20			lda 	#" " 					; pad out to indent.
.30cd	20 9e 31	jsr $319e			jsr 	ListOutputCharacter
.30d0	e8		inx				inx
.30d1	ec 1a 0c	cpx $0c1a			cpx 	indent
.30d4	d0 f5		bne $30cb			bne 	_DTPadOut
.30d6	a0 03		ldy #$03			ldy 	#3 						; start position.
.30d8					_DTListLoop
.30d8	b1 28		lda ($28),y			lda 	(codePtr),y
.30da	c9 85		cmp #$85			cmp 	#TOK_STR 				; Inline string.
.30dc	f0 58		beq $3136			beq 	_DTIsString
.30de	c9 84		cmp #$84			cmp 	#TOK_FPC 				; Floating point
.30e0	f0 7c		beq $315e			beq 	_DTIsFloat
.30e2	c9 c5		cmp #$c5			cmp 	#TKW_AMP 				; & hex marker
.30e4	f0 16		beq $30fc			beq 	_DTHexConstant
.30e6	c9 80		cmp #$80			cmp 	#TOK_EOL 				; End of Line
.30e8	d0 06		bne $30f0			bne 	_DTNotEnd
.30ea	a9 ff		lda #$ff			lda 	#255 					; print CR
.30ec	20 9e 31	jsr $319e			jsr 	ListOutputCharacter
.30ef	60		rts				rts
.30f0					_DTNotEnd:
.30f0	c9 00		cmp #$00			cmp 	#0
.30f2	30 36		bmi $312a			bmi 	_DTIsToken
.30f4	c9 40		cmp #$40			cmp 	#$40
.30f6	90 38		bcc $3130			bcc 	_DTIsIdentifier
.30f8	a9 0a		lda #$0a			lda 	#10 					; this is the base
.30fa	d0 08		bne $3104			bne 	_DTConstant
.30fc					_DTHexConstant:
.30fc	a9 26		lda #$26			lda 	#"&"
.30fe	20 9e 31	jsr $319e			jsr 	ListOutputCharacter
.3101	c8		iny				iny
.3102	a9 10		lda #$10			lda 	#16
.3104					_DTConstant:
.3104	48		pha				pha
.3105	a9 00		lda #$00			lda 	#0 							; now constant, may need spaces
.3107	20 df 31	jsr $31df			jsr 	DTSwitchMode
.310a	a9 86		lda #$86			lda 	#LTYConstant
.310c	20 9e 31	jsr $319e			jsr 	ListOutputCharacter
.310f	a2 02		ldx #$02			ldx 	#2
.3111	8a		txa				txa
.3112	a2 0a		ldx #$0a		ldx	#10
.3114	20 cc 2d	jsr $2dcc		jsr	mainHandler
.3117	aa		tax				tax
.3118	20 56 1a	jsr $1a56			jsr 	TOSToTemp0
.311b	68		pla				pla
.311c	85 32		sta $32				sta 	tempShort
.311e	98		tya				tya
.311f	48		pha				pha
.3120	a5 32		lda $32				lda 	tempShort
.3122	20 62 31	jsr $3162			jsr 	DTPrintInteger
.3125	68		pla				pla
.3126	a8		tay				tay
.3127	4c d8 30	jmp $30d8			jmp 	_DTListLoop
.312a					_DTIsToken:
.312a	20 38 32	jsr $3238			jsr 	DTDecodeToken
.312d	4c d8 30	jmp $30d8			jmp 	_DTListLoop
.3130					_DTIsIdentifier:
.3130	20 f1 31	jsr $31f1			jsr 	DTIdentifier
.3133	4c d8 30	jmp $30d8			jmp 	_DTListLoop
.3136					_DTIsString:
.3136	a9 01		lda #$01			lda 	#1 							; now punctuation, may need spaces
.3138	20 df 31	jsr $31df			jsr 	DTSwitchMode
.313b	a9 81		lda #$81			lda 	#LTYString
.313d	20 9e 31	jsr $319e			jsr 	ListOutputCharacter
.3140	a9 22		lda #$22			lda 	#'"'						; open quote
.3142	20 9e 31	jsr $319e			jsr 	ListOutputCharacter
.3145	a2 02		ldx #$02			ldx 	#2 							; evaluate string to TOS2.
.3147	8a		txa				txa
.3148	a2 0a		ldx #$0a		ldx	#10
.314a	20 cc 2d	jsr $2dcc		jsr	mainHandler
.314d	aa		tax				tax
.314e	20 56 1a	jsr $1a56			jsr 	TOSToTemp0
.3151	a9 00		lda #$00			lda 	#0 							; don't capitalise.
.3153	20 74 31	jsr $3174			jsr 	DTPrintLengthPrefix
.3156	a9 22		lda #$22			lda 	#'"'
.3158	20 9e 31	jsr $319e			jsr 	ListOutputCharacter
.315b	4c d8 30	jmp $30d8			jmp 	_DTListLoop
.315e					_DTIsFloat:
>315e	db						.byte 	$DB
.315f	4c 5e 31	jmp $315e			jmp 	_DTIsFloat

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/detokenise/dtprint.asm

.0c1b					tPrintCount:
>0c1b							.fill 	1
.3162					DTPrintInteger:
.3162	48		pha				pha
.3163	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.3165	85 2a		sta $2a				sta 	temp0
.3167	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.3169	85 2b		sta $2b				sta 	1+(temp0)
.316b	68		pla				pla
.316c	a8		tay				tay
.316d	8a		txa				txa
.316e	a2 0c		ldx #$0c		ldx	#12
.3170	20 cc 2d	jsr $2dcc		jsr	mainHandler
.3173	aa		tax				tax
.3174					DTPrintLengthPrefix:
.3174	aa		tax				tax
.3175	98		tya				tya
.3176	48		pha				pha
.3177	a0 00		ldy #$00			ldy 	#0
.3179	b1 2a		lda ($2a),y			lda 	(temp0),y
.317b	8d 1b 0c	sta $0c1b			sta 	tPrintCount
.317e	f0 1b		beq $319b			beq 	_DTPLPExit
.3180					_DTPLPLoop:
.3180	c8		iny				iny
.3181	b1 2a		lda ($2a),y			lda 	(temp0),y
.3183	29 7f		and #$7f			and 	#$7F
.3185	e0 00		cpx #$00			cpx 	#0
.3187	f0 0a		beq $3193			beq 	_DTPLPNoCase
.3189	c9 41		cmp #$41			cmp 	#"A"
.318b	90 06		bcc $3193			bcc 	_DTPLPNoCase
.318d	c9 5b		cmp #$5b			cmp 	#"Z"+1
.318f	b0 02		bcs $3193			bcs 	_DTPLPNoCase
.3191	49 20		eor #$20			eor 	#"A"^"a"
.3193					_DTPLPNoCase
.3193	20 9e 31	jsr $319e			jsr 	ListOutputCharacter
.3196	ce 1b 0c	dec $0c1b			dec 	tPrintCount
.3199	d0 e5		bne $3180			bne 	_DTPLPLoop
.319b					_DTPLPExit:
.319b	68		pla				pla
.319c	a8		tay				tay
.319d	60		rts				rts
.319e					ListOutputCharacter:
.319e	85 32		sta $32				sta 	tempShort
.31a0	48		pha				pha
.31a1	8a		txa				txa
.31a2	48		pha				pha
.31a3	98		tya				tya
.31a4	48		pha				pha
.31a5	a5 32		lda $32				lda 	tempShort
.31a7	c9 20		cmp #$20			cmp 	#32
.31a9	b0 0c		bcs $31b7			bcs		_LOCHiBit
.31ab	09 40		ora #$40			ora 	#64
.31ad	c9 40		cmp #$40			cmp 	#64
.31af	f0 06		beq $31b7			beq 	_LOCHiBit
.31b1	c9 5b		cmp #$5b			cmp 	#65+26
.31b3	b0 02		bcs $31b7			bcs 	_LOCHiBit
.31b5	69 20		adc #$20			adc 	#32
.31b7					_LOCHiBit:
.31b7	20 c0 31	jsr $31c0			jsr 	_LOCCallVector
.31ba	68		pla				pla
.31bb	a8		tay				tay
.31bc	68		pla				pla
.31bd	aa		tax				tax
.31be	68		pla				pla
.31bf					_LOCExit:
.31bf	60		rts				rts
.31c0					_LOCCallVector:
.31c0	6c 17 0c	jmp ($0c17)			jmp 	(deTokeniseVector)
.31c3					deTokenPrint:
.31c3	c9 00		cmp #$00			cmp 	#0
.31c5	30 06		bmi $31cd			bmi 	_dtpInk
.31c7	a2 16		ldx #$16		ldx	#22
.31c9	20 64 11	jsr $1164		jsr	deviceHandler
.31cc	60		rts				rts
.31cd	c9 ff		cmp #$ff	_dtpInk:cmp 	#255
.31cf	f0 08		beq $31d9			beq 	_dtpCR
.31d1	29 07		and #$07			and 	#7
.31d3	a2 08		ldx #$08		ldx	#8
.31d5	20 64 11	jsr $1164		jsr	deviceHandler
.31d8	60		rts				rts
.31d9					_dtpCR:
.31d9	a2 04		ldx #$04		ldx	#4
.31db	20 64 11	jsr $1164		jsr	deviceHandler
.31de	60		rts				rts
.31df					DTSwitchMode:
.31df	cd 19 0c	cmp $0c19			cmp 	LastCharacterClass
.31e2	f0 04		beq $31e8			beq 	_DTSMNoChange
.31e4	8d 19 0c	sta $0c19			sta 	LastCharacterClass
.31e7					_DTSMExit:
.31e7	60		rts				rts
.31e8					_DTSMNoChange:
.31e8	c9 01		cmp #$01			cmp 	#1
.31ea	f0 fb		beq $31e7			beq 	_DTSMExit
.31ec	a9 20		lda #$20			lda 	#" "
.31ee	4c 9e 31	jmp $319e			jmp 	ListOutputCharacter

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/detokenise/identifier.asm

.31f1					DTIdentifier:
.31f1	a9 00		lda #$00			lda 	#0 							; now text, may need spaces
.31f3	20 df 31	jsr $31df			jsr 	DTSwitchMode
.31f6	a9 87		lda #$87			lda 	#LTYIdentifier
.31f8	20 9e 31	jsr $319e			jsr 	ListOutputCharacter
.31fb					_DTILoop:
.31fb	b1 28		lda ($28),y			lda 	(codePtr),y 				; output main bit of identifier.
.31fd	c9 2d		cmp #$2d			cmp 	#"-"						; make - back to _
.31ff	d0 02		bne $3203			bne 	_DTINotUS
.3201	a9 5f		lda #$5f			lda 	#"_"
.3203					_DTINotUS:
.3203	20 9e 31	jsr $319e			jsr 	ListOutputCharacter
.3206	c8		iny				iny
.3207	b1 28		lda ($28),y			lda 	(codePtr),y 				; until end identifier marker.
.3209	c9 3a		cmp #$3a			cmp 	#$3A
.320b	90 ee		bcc $31fb			bcc 	_DTILoop
.320d	c8		iny				iny
.320e	c9 3a		cmp #$3a			cmp 	#$3A 						; is it integer non array
.3210	f0 25		beq $3237			beq 	_DTIExit 					; no postfix.
.3212	48		pha				pha
.3213	a9 01		lda #$01			lda  	#1 							; it ends in punctuation
.3215	8d 19 0c	sta $0c19			sta 	LastCharacterClass
.3218	a9 82		lda #$82			lda 	#LTYPunctuation
.321a	20 9e 31	jsr $319e			jsr 	ListOutputCharacter
.321d	68		pla				pla
.321e	c9 3b		cmp #$3b			cmp 	#$3B
.3220	f0 10		beq $3232			beq 	_DTIArray
.3222	4a		lsr a				lsr 	a 							; array flag in C
.3223	08		php				php
.3224	49 1e		eor #$1e			eor 	#$3C/2 						; check if $
.3226	f0 02		beq $322a			beq 	_DTIDollar
.3228	a9 07		lda #$07			lda 	#"$"^"#" 					; this if #, 0 if $
.322a					_DTIDollar:
.322a	49 24		eor #$24			eor 	#"$"
.322c	20 9e 31	jsr $319e			jsr 	ListOutputCharacter
.322f	28		plp				plp
.3230	90 05		bcc $3237			bcc 	_DTIExit
.3232					_DTIArray:
.3232	a9 28		lda #$28			lda 	#"("
.3234	20 9e 31	jsr $319e			jsr 	ListOutputCharacter
.3237					_DTIExit:
.3237	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/detokenise/token.asm

.3238					DTDecodeToken:
.3238	a2 00		ldx #$00			ldx 	#0 							; table number to use
.323a	b1 28		lda ($28),y			lda 	(codePtr),y
.323c	c9 84		cmp #$84			cmp 	#$84
.323e	b0 05		bcs $3245			bcs 	_DTNotShift
.3240	29 03		and #$03			and 	#3 							; get the shift 1..3
.3242	0a		asl a				asl 	a 							; put 2 x in X
.3243	aa		tax				tax
.3244	c8		iny				iny
.3245					_DTNotShift:
.3245	bd 45 35	lda $3545,x			lda 	TokenTableAddress,x 		; get the token table to use to decode it.
.3248	85 2a		sta $2a				sta 	temp0 						; point into temp0
.324a	bd 46 35	lda $3546,x			lda 	TokenTableAddress+1,x
.324d	85 2b		sta $2b				sta 	temp0+1
.324f	b1 28		lda ($28),y			lda 	(codePtr),y 				; get the token value.
.3251	c8		iny				iny 								; consume it.
.3252	aa		tax				tax
.3253	98		tya				tya
.3254	48		pha				pha
.3255					_DTFindText:
.3255	e0 86		cpx #$86			cpx 	#$86 						; finished ?
.3257	f0 11		beq $326a			beq 	_DTFoundText
.3259	ca		dex				dex
.325a	a0 00		ldy #$00			ldy 	#0
.325c	38		sec				sec
.325d	b1 2a		lda ($2a),y			lda 	(temp0),y
.325f	65 2a		adc $2a				adc 	temp0
.3261	85 2a		sta $2a				sta 	temp0
.3263	90 f0		bcc $3255			bcc 	_DTFindText
.3265	e6 2b		inc $2b				inc 	temp0+1
.3267	4c 55 32	jmp $3255			jmp 	_DTFindText
.326a					_DTFoundText:
.326a	a0 01		ldy #$01			ldy 	#1 							; get first character
.326c	b1 2a		lda ($2a),y			lda 	(temp0),y
.326e	29 7f		and #$7f			and 	#$7F 						; will have bit 7 set.
.3270	c9 41		cmp #$41			cmp 	#"A" 						; check for punctuation.
.3272	90 11		bcc $3285			bcc 	_DTIsPunctuation
.3274	c9 5b		cmp #$5b			cmp 	#"Z"+1
.3276	b0 0d		bcs $3285			bcs 	_DTIsPunctuation
.3278	a9 00		lda #$00			lda 	#0 							; now text, may need spaces
.327a	20 df 31	jsr $31df			jsr 	DTSwitchMode
.327d	a9 83		lda #$83			lda 	#LTYKeyword
.327f	20 9e 31	jsr $319e			jsr 	ListOutputCharacter
.3282	4c 8f 32	jmp $328f			jmp 	_DTPrint
.3285					_DTIsPunctuation:
.3285	a9 01		lda #$01			lda 	#1 							; now punctuation, may need spaces
.3287	20 df 31	jsr $31df			jsr 	DTSwitchMode
.328a	a9 82		lda #$82			lda 	#LTYPunctuation
.328c	20 9e 31	jsr $319e			jsr 	ListOutputCharacter
.328f					_DTPrint:
.328f	a9 01		lda #$01			lda 	#1 							; fix case.
.3291	20 74 31	jsr $3174			jsr 	DTPrintLengthPrefix 		; print it out.
.3294	a0 00		ldy #$00			ldy 	#0
.3296	b1 2a		lda ($2a),y			lda 	(temp0),y
.3298	a8		tay				tay
.3299	b1 2a		lda ($2a),y			lda 	(temp0),y
.329b	29 7f		and #$7f			and 	#$7F 						; will have bit 7 set.
.329d	c9 41		cmp #$41			cmp 	#"A" 						; check for punctuation.
.329f	90 04		bcc $32a5			bcc 	_DTIsNowPunctuation
.32a1	c9 5b		cmp #$5b			cmp 	#"Z"+1
.32a3	90 05		bcc $32aa			bcc 	_DTPExit
.32a5					_DTIsNowPunctuation:
.32a5	a9 01		lda #$01			lda 	#1
.32a7	8d 19 0c	sta $0c19			sta		LastCharacterClass
.32aa					_DTPExit:
.32aa	68		pla				pla
.32ab	a8		tay				tay
.32ac	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/search.asm

.0c1c					currentSet:
>0c1c							.fill 	1
.32ad					TokenSearch:
.32ad	8a		txa				txa
.32ae	48		pha				pha
.32af	98		tya				tya
.32b0	48		pha				pha
.32b1	a9 00		lda #$00			lda 	#0
.32b3	8d 1c 0c	sta $0c1c			sta 	currentSet
.32b6					_TSLoop:
.32b6	ad 1c 0c	lda $0c1c			lda 	currentSet 					; 2 x currentset in X
.32b9	0a		asl a				asl 	a
.32ba	aa		tax				tax
.32bb	bd 45 35	lda $3545,x			lda 	TokenTableAddress,x 		; set temp0 to the table address
.32be	85 2a		sta $2a				sta 	temp0
.32c0	bd 46 35	lda $3546,x			lda 	TokenTableAddress+1,x
.32c3	85 2b		sta $2b				sta 	temp0+1
.32c5	20 ec 32	jsr $32ec			jsr 	TokenSearchOne 				; search one table
.32c8	b0 0d		bcs $32d7			bcs 	_TSFound 					; found a token.
.32ca	ee 1c 0c	inc $0c1c			inc 	currentSet 					; next set
.32cd	ad 1c 0c	lda $0c1c			lda 	currentSet
.32d0	c9 04		cmp #$04			cmp 	#4
.32d2	d0 e2		bne $32b6			bne 	_TSLoop 					; back if not done all four.
.32d4	18		clc				clc 								; clear carry and exit
.32d5	90 10		bcc $32e7			bcc 	_TSExit
.32d7					_TSFound:
.32d7	48		pha				pha 								; save token
.32d8	ad 1c 0c	lda $0c1c			lda 	currentSet					; if set zero no shift
.32db	f0 05		beq $32e2			beq 	_TSNoShift
.32dd	09 80		ora #$80			ora 	#$80 						; Write as $81-$83
.32df	20 9b 33	jsr $339b			jsr 	TokenWrite
.32e2					_TSNoShift:
.32e2	68		pla				pla 								; get token back
.32e3	20 9b 33	jsr $339b			jsr 	TokenWrite 					; write it
.32e6	38		sec				sec 								; carry set indicating success
.32e7					_TSExit:
.32e7	68		pla				pla
.32e8	a8		tay				tay
.32e9	68		pla				pla
.32ea	aa		tax				tax
.32eb	60		rts				rts
.32ec					TokenSearchOne:
.32ec	a2 86		ldx #$86			ldx 	#$86 						; current token being tested.
.32ee					_TSOLoop:
.32ee	a0 00		ldy #$00			ldy 	#0
.32f0	b1 2a		lda ($2a),y			lda 	(temp0),y 					; get length of token
.32f2	f0 26		beq $331a			beq 	_TSOFail 					; if zero, end of table
.32f4	cd cf 0a	cmp $0acf			cmp 	convertBuffer 				; length is the same, compare the text matches.
.32f7	f0 11		beq $330a			beq 	_TSOCheckText
.32f9					_TSONext:
.32f9	e8		inx				inx 								; bump token
.32fa	a0 00		ldy #$00			ldy 	#0							; get length
.32fc	b1 2a		lda ($2a),y			lda 	(temp0),y
.32fe	38		sec				sec
.32ff	65 2a		adc $2a				adc 	temp0 						; add to temp0 + 1
.3301	85 2a		sta $2a				sta 	temp0
.3303	90 e9		bcc $32ee			bcc 	_TSOLoop
.3305	e6 2b		inc $2b				inc 	temp0+1
.3307	4c ee 32	jmp $32ee			jmp 	_TSOLoop
.330a					_TSOCheckText:
.330a	a8		tay				tay 								; compare length downto 1.
.330b					_TSOCheckLoop:
.330b	b1 2a		lda ($2a),y			lda 	(temp0),y 					; use EOR to compare
.330d	59 cf 0a	eor $0acf,y			eor 	convertBuffer,y
.3310	29 7f		and #$7f			and 	#$7F 						; ignore bit 7
.3312	d0 e5		bne $32f9			bne 	_TSONext 					; different goto next.
.3314	88		dey				dey 								; do all
.3315	d0 f4		bne $330b			bne 	_TSOCheckLoop
.3317	8a		txa				txa 								; return token in A and carry set
.3318	38		sec				sec
.3319	60		rts				rts
.331a					_TSOFail:
.331a	18		clc				clc
.331b	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/test.asm

.331c					TokTest:
.331c	a2 ff		ldx #$ff				ldx 	#$FF
.331e	9a		txs					txs
.331f	a9 3c		lda #$3c			lda 	#(TokenText1) & $FF
.3321	85 28		sta $28				sta 	codePtr
.3323	a9 33		lda #$33			lda 	#(TokenText1) >> 8
.3325	85 29		sta $29				sta 	1+(codePtr)
.3327	20 3c 33	jsr $333c				jsr 	Tokenise
.332a	a2 00		ldx #$00	TokStop:	ldx 	#0
.332c	bd 3c 33	lda $333c,x	_TokCheck:	lda 	TokenBytes1,x
.332f	dd 20 0c	cmp $0c20,x				cmp 	tokenBuffer,x
.3332	d0 fe		bne $3332	_TokFail:	bne 	_TokFail
.3334	e8		inx					inx
.3335	c9 80		cmp #$80				cmp 	#$80
.3337	d0 f3		bne $332c				bne 	_TokCheck
.3339	4c ff ff	jmp $ffff				jmp 	$FFFF

;******  Processing file: tokeniser/tokenise/../../generated/toktest.inc

.333c					TokenText1:
.333c					TokenBytes1:

;******  Return to file: tokeniser/tokenise/test.asm


;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokenise.asm

.0c1d					tokenHeader:
>0c1d							.fill 	3
.0c20					tokenBuffer:
>0c20							.fill 	256
.0d20					tokenBufferIndex:
>0d20							.fill 	1
.333c					Tokenise:
.333c	20 b4 33	jsr $33b4			jsr 	TokeniseMakeASCIIZ 			; convert to ASCIIZ string.
.333f					TokeniseASCIIZ:
.333f	20 c5 33	jsr $33c5			jsr 	TokeniseFixCase 			; remove controls and lower case outside quotes.
.3342	a9 00		lda #$00			lda 	#0 							; reset the token buffer index
.3344	8d 20 0d	sta $0d20			sta 	tokenBufferIndex
.3347	a8		tay				tay 								; start pointer
.3348	a9 80		lda #$80			lda 	#$80 						; empty token buffer ($80 ends it)
.334a	8d 20 0c	sta $0c20			sta 	tokenBuffer
.334d					_TokLoop:
.334d	b1 28		lda ($28),y			lda 	(codePtr),y 				; get next character
.334f	f0 46		beq $3397			beq 	_TokExit 					; if zero, then exit.
.3351	c8		iny				iny 								; skip over spaces.
.3352	c9 20		cmp #$20			cmp 	#" "
.3354	f0 f7		beq $334d			beq 	_TokLoop
.3356	88		dey				dey 								; point back to character.
.3357	c9 26		cmp #$26			cmp 	#"&"						; Hexadecimal constant.
.3359	f0 18		beq $3373			beq 	_TokHexConst
.335b	c9 22		cmp #$22			cmp 	#'"'						; Quoted String
.335d	f0 23		beq $3382			beq 	_TokQString
.335f	c9 5b		cmp #$5b			cmp 	#"Z"+1 						; > 'Z' is punctuation
.3361	b0 26		bcs $3389			bcs 	_TokPunctuation
.3363	c9 41		cmp #$41			cmp 	#"A" 						; A..Z identifier
.3365	b0 29		bcs $3390			bcs 	_TokIdentifier
.3367	c9 3a		cmp #$3a			cmp 	#"9"+1
.3369	b0 1e		bcs $3389			bcs 	_TokPunctuation 			; between 9 and A exclusive, punctuation
.336b	c9 30		cmp #$30			cmp 	#"0"
.336d	90 1a		bcc $3389			bcc 	_TokPunctuation 			; < 0, punctuation.
.336f	a9 0a		lda #$0a			lda 	#10  						; 0..9 constant in base 10.
.3371	d0 08		bne $337b			bne 	_TokConst
.3373					_TokHexConst:
.3373	c8		iny				iny									; consume token.
.3374	a9 c5		lda #$c5			lda 	#TKW_AMP 					; Write ampersand token out
.3376	20 9b 33	jsr $339b			jsr 	TokenWrite
.3379	a9 10		lda #$10			lda 	#16
.337b					_TokConst:
.337b	20 83 34	jsr $3483			jsr 	TokeniseInteger
.337e	b0 cd		bcs $334d			bcs 	_TokLoop
.3380	90 17		bcc $3399			bcc 	_TokFail
.3382					_TokQString:
.3382	20 19 35	jsr $3519			jsr 	TokeniseString
.3385	b0 c6		bcs $334d			bcs 	_TokLoop
.3387	90 10		bcc $3399			bcc 	_TokFail
.3389					_TokPunctuation:
.3389	20 f8 34	jsr $34f8			jsr 	TokenisePunctuation
.338c	b0 bf		bcs $334d			bcs 	_TokLoop
.338e	90 09		bcc $3399			bcc 	_TokFail
.3390					_TokIdentifier:
.3390	20 f4 33	jsr $33f4			jsr 	TokeniseIdentifier
.3393	b0 b8		bcs $334d			bcs 	_TokLoop
.3395	90 02		bcc $3399			bcc 	_TokFail
.3397					_TokExit:
.3397	38		sec				sec
.3398	60		rts				rts
.3399					_TokFail:
.3399	18		clc				clc
.339a	60		rts				rts
.339b					TokenWrite:
.339b	85 32		sta $32				sta 	tempShort 					; save XA
.339d	48		pha				pha
.339e	8a		txa				txa
.339f	48		pha				pha
.33a0	a5 32		lda $32				lda 	tempShort
.33a2	ae 20 0d	ldx $0d20			ldx 	tokenBufferIndex 			; geet index
.33a5	9d 20 0c	sta $0c20,x			sta 	tokenBuffer,x 				; write byte to buffer
.33a8	a9 80		lda #$80			lda 	#TOK_EOL 					; pre-emptively write EOL marker after
.33aa	9d 21 0c	sta $0c21,x			sta 	tokenBuffer+1,x
.33ad	ee 20 0d	inc $0d20			inc 	tokenBufferIndex 			; bump index
.33b0	68		pla				pla
.33b1	aa		tax				tax
.33b2	68		pla				pla
.33b3	60		rts				rts
.33b4					TokeniseMakeASCIIZ:
.33b4	a0 00		ldy #$00			ldy 	#0							; get length of string.
.33b6	b1 28		lda ($28),y			lda 	(codePtr),y
.33b8	a8		tay				tay
.33b9	c8		iny				iny 								; +1, the NULL goes here.
.33ba	a9 00		lda #$00			lda 	#0
.33bc	91 28		sta ($28),y			sta 	(codePtr),y 				; write the trailing NULL.
.33be	e6 28		inc $28				inc 	codePtr 					; bump the pointer.
.33c0	d0 02		bne $33c4			bne 	_TMKAExit
.33c2	e6 29		inc $29				inc 	codePtr+1
.33c4					_TMKAExit:
.33c4	60		rts				rts
.33c5					TokeniseFixCase:
.33c5	a0 00		ldy #$00			ldy 	#0 							; position in buffer.
.33c7	a2 01		ldx #$01			ldx 	#1 							; bit 0 of this is 'in quotes'
.33c9					_TFCFlipQ:
.33c9	8a		txa				txa
.33ca	49 01		eor #$01			eor 	#1
.33cc	aa		tax				tax
.33cd					_TFCLoop:
.33cd	b1 28		lda ($28),y			lda 	(codePtr),y 				; get character
.33cf	f0 22		beq $33f3			beq 	_TFCExit 					; if zero exit.
.33d1	c9 20		cmp #$20			cmp 	#32 						; if control
.33d3	90 1a		bcc $33ef			bcc 	_TFCControl
.33d5	c8		iny				iny 								; preconsume
.33d6	c9 22		cmp #$22			cmp 	#'"'
.33d8	f0 ef		beq $33c9			beq 	_TFCFlipQ
.33da	c9 61		cmp #$61			cmp 	#"a"						; check if L/C
.33dc	90 ef		bcc $33cd			bcc 	_TFCLoop
.33de	c9 7b		cmp #$7b			cmp 	#"z"+1
.33e0	b0 eb		bcs $33cd			bcs 	_TFCLoop
.33e2	e0 00		cpx #$00			cpx 	#0 							; in quotes, if so, leave alone.
.33e4	d0 e7		bne $33cd			bne 	_TFCLoop
.33e6	88		dey				dey
.33e7	49 20		eor #$20			eor 	#"A"^"a"					; make U/C
.33e9					_TFCWrite:
.33e9	91 28		sta ($28),y			sta 	(codePtr),y
.33eb	c8		iny				iny
.33ec	4c cd 33	jmp $33cd			jmp 	_TFCLoop
.33ef					_TFCControl:
.33ef	a9 20		lda #$20			lda 	#" "
.33f1	d0 f6		bne $33e9			bne 	_TFCWrite
.33f3					_TFCExit:
.33f3	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokident.asm

.33f4					TokeniseIdentifier:
.33f4	a2 00		ldx #$00			ldx 	#0
.33f6					_TICopyID:
.33f6	b1 28		lda ($28),y			lda 	(codePtr),y					; get characters
.33f8	c9 5f		cmp #$5f			cmp 	#"_" 						; underscore converted to minus internally.
.33fa	f0 16		beq $3412			beq 	_TICopyUnderscore
.33fc	c9 2e		cmp #$2e			cmp 	#"."
.33fe	f0 14		beq $3414			beq 	_TICopyIn
.3400	c9 30		cmp #$30			cmp 	#"0"
.3402	90 1b		bcc $341f			bcc 	_TIEndCopy
.3404	c9 3a		cmp #$3a			cmp 	#"9"+1
.3406	90 0c		bcc $3414			bcc 	_TICopyIn
.3408	c9 41		cmp #$41			cmp 	#"A"
.340a	90 13		bcc $341f			bcc 	_TIEndCopy
.340c	c9 5b		cmp #$5b			cmp 	#"Z"+1
.340e	b0 0f		bcs $341f			bcs		_TIEndCopy
.3410	90 02		bcc $3414			bcc 	_TICopyIn
.3412					_TICopyUnderScore:
.3412	a9 2d		lda #$2d			lda 	#"-"						; _ is mapped to -
.3414					_TICopyIn:
.3414	e8		inx				inx 								; write into buffer in 7 bit ASCII form
.3415	9d cf 0a	sta $0acf,x			sta 	convertBuffer,x
.3418	8e cf 0a	stx $0acf			stx 	convertBuffer
.341b	c8		iny				iny 								; next character
.341c	4c f6 33	jmp $33f6			jmp 	_TICopyID 					; loop round
.341f					_TIEndCopy:
.341f	a9 24		lda #$24			lda 	#"$"
.3421	20 76 34	jsr $3476			jsr 	TIDCheckCopy
.3424	a9 23		lda #$23			lda 	#"#"
.3426	20 76 34	jsr $3476			jsr 	TIDCheckCopy
.3429	a9 28		lda #$28			lda 	#"("
.342b	20 76 34	jsr $3476			jsr 	TIDCheckCopy
.342e	20 ad 32	jsr $32ad			jsr 	TokenSearch 				; is it a token
.3431	b0 41		bcs $3474			bcs 	_TIExit 					; if so, then exit.
.3433	98		tya				tya
.3434	48		pha				pha
.3435	a0 3a		ldy #$3a			ldy 	#$3A 						; default type.
.3437	ae cf 0a	ldx $0acf			ldx 	convertBuffer 				; is last character (
.343a	bd cf 0a	lda $0acf,x			lda 	convertBuffer,x
.343d	c9 28		cmp #$28			cmp 	#"("
.343f	d0 02		bne $3443			bne 	_TINotArray
.3441	ca		dex				dex 								; yes, remove it and convert to array.
.3442	c8		iny				iny
.3443					_TINotArray:
.3443	bd cf 0a	lda $0acf,x			lda 	convertBuffer,x 			; check for $
.3446	c9 24		cmp #$24			cmp 	#"$"
.3448	d0 03		bne $344d			bne 	_TINotString
.344a	ca		dex				dex
.344b	c8		iny				iny
.344c	c8		iny				iny
.344d					_TINotString:
.344d	bd cf 0a	lda $0acf,x			lda 	convertBuffer,x 			; check for #
.3450	c9 23		cmp #$23			cmp 	#"#"
.3452	d0 05		bne $3459			bne 	_TINotFloat
.3454	ca		dex				dex
.3455	c8		iny				iny
.3456	c8		iny				iny
.3457	c8		iny				iny
.3458	c8		iny				iny
.3459					_TINotFloat:
.3459	e8		inx				inx 								; write end marker for identifier.
.345a	98		tya				tya
.345b	9d cf 0a	sta $0acf,x			sta 	convertBuffer,x
.345e	8e cf 0a	stx $0acf			stx 	convertBuffer 				; update length.
.3461	a2 01		ldx #$01			ldx 	#1
.3463					_TIOutput:
.3463	bd cf 0a	lda $0acf,x			lda 	convertBuffer,x
.3466	29 3f		and #$3f			and 	#$3F
.3468	48		pha				pha
.3469	20 9b 33	jsr $339b			jsr 	TokenWrite
.346c	e8		inx				inx
.346d	68		pla				pla
.346e	c9 3a		cmp #$3a			cmp 	#$3A
.3470	90 f1		bcc $3463			bcc 	_TIOutput
.3472	68		pla				pla
.3473	a8		tay				tay
.3474					_TIExit:
.3474	38		sec				sec 								; this can't fail.
.3475	60		rts				rts
.3476					TIDCheckCopy:
.3476	d1 28		cmp ($28),y			cmp 	(codePtr),y
.3478	d0 08		bne $3482			bne 	_TIDCCExit
.347a	e8		inx				inx
.347b	9d cf 0a	sta $0acf,x			sta 	convertBuffer,x
.347e	8e cf 0a	stx $0acf			stx 	convertBuffer
.3481	c8		iny				iny
.3482					_TIDCCExit:
.3482	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokinteger.asm

.3483					TokeniseInteger:
.3483	85 2c		sta $2c				sta 	temp1 						; save base
.3485	a2 00		ldx #$00			ldx 	#0							; count of chars so far
.3487	8e cf 0a	stx $0acf			stx 	convertBuffer
.348a					_TIGetChars:
.348a	b1 28		lda ($28),y			lda 	(codePtr),y 				; check character is numeric
.348c	c9 30		cmp #$30			cmp 	#"0"
.348e	90 1f		bcc $34af			bcc 	_TIEndGet
.3490	c9 3a		cmp #$3a			cmp 	#"9"+1
.3492	90 10		bcc $34a4			bcc 	_TIHaveChar
.3494	a5 2c		lda $2c				lda 	temp1 						; fail if not hex mode
.3496	c9 0a		cmp #$0a			cmp 	#10
.3498	f0 15		beq $34af			beq 	_TIEndGet
.349a	b1 28		lda ($28),y			lda 	(codePtr),y 				; check legitimate hex.
.349c	c9 41		cmp #$41			cmp 	#"A"
.349e	90 0f		bcc $34af			bcc 	_TIEndGet
.34a0	c9 5b		cmp #$5b			cmp 	#"Z"+1
.34a2	b0 0b		bcs $34af			bcs 	_TIEndGet
.34a4					_TIHaveChar:
.34a4	e8		inx				inx 								; write into buffer.
.34a5	8e cf 0a	stx $0acf			stx 	convertBuffer
.34a8	9d cf 0a	sta $0acf,x			sta 	convertBuffer,x
.34ab	c8		iny				iny 								; next char
.34ac	4c 8a 34	jmp $348a			jmp 	_TIGetChars
.34af					_TIEndGet:
.34af	e0 00		cpx #$00			cpx 	#0 							; no char acquired.
.34b1	f0 1c		beq $34cf			beq 	_TIFail
.34b3	98		tya				tya
.34b4	48		pha				pha
.34b5	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.34b7	85 2a		sta $2a				sta 	temp0
.34b9	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.34bb	85 2b		sta $2b				sta 	1+(temp0)
.34bd	a9 00		lda #$00			lda 	#0 							; stack 0
.34bf	a4 2c		ldy $2c				ldy 	temp1 						; base Y
.34c1	a2 14		ldx #$14		ldx	#20
.34c3	20 cc 2d	jsr $2dcc		jsr	mainHandler
.34c6	68		pla				pla
.34c7	a8		tay				tay
.34c8	90 05		bcc $34cf			bcc 	_TIFail 					; didn't convert.
.34ca	20 d1 34	jsr $34d1			jsr 	TIRecursiveOut 				; recursive output ?
.34cd	38		sec				sec
.34ce	60		rts				rts
.34cf					_TIFail:
.34cf	18		clc				clc
.34d0	60		rts				rts
.34d1					TIRecursiveOut:
.34d1	a5 48		lda $48				lda 	esInt0 						; get value to output after possible recursion
.34d3	29 3f		and #$3f			and 	#$3F
.34d5	09 40		ora #$40			ora 	#$40
.34d7	48		pha				pha
.34d8	a5 48		lda $48				lda 	esInt0 						; are we recursing ?
.34da	29 c0		and #$c0			and 	#$C0
.34dc	05 50		ora $50				ora 	esInt1
.34de	05 58		ora $58				ora 	esInt2
.34e0	05 60		ora $60				ora 	esInt3
.34e2	f0 10		beq $34f4			beq 	_TIRONoRecursion
.34e4	a2 06		ldx #$06			ldx 	#6 							; shift right x 6
.34e6					_TIROShift:
.34e6	46 60		lsr $60				lsr 	esInt3
.34e8	66 58		ror $58				ror 	esInt2
.34ea	66 50		ror $50				ror 	esInt1
.34ec	66 48		ror $48				ror 	esInt0
.34ee	ca		dex				dex
.34ef	d0 f5		bne $34e6			bne 	_TIROShift
.34f1	20 d1 34	jsr $34d1			jsr 	TIRecursiveOut 				; call recursively
.34f4					_TIRONoRecursion:
.34f4	68		pla				pla 								; pull the old bit.
.34f5	4c 9b 33	jmp $339b			jmp 	TokenWrite

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokpunct.asm

.34f8					TokenisePunctuation:
.34f8	b1 28		lda ($28),y			lda	 	(codePtr),y 				; copy next 2 chars into convertBuffer
.34fa	8d d0 0a	sta $0ad0			sta 	convertBuffer+1
.34fd	c8		iny				iny
.34fe	b1 28		lda ($28),y			lda 	(codePtr),y
.3500	8d d1 0a	sta $0ad1			sta 	convertBuffer+2
.3503	c8		iny				iny 								; Y is +2
.3504	a9 02		lda #$02			lda 	#2 							; 2 character string.
.3506	8d cf 0a	sta $0acf			sta 	convertBuffer
.3509	20 ad 32	jsr $32ad			jsr 	TokenSearch 				; search for that token.
.350c	b0 0a		bcs $3518			bcs 	_TIFound
.350e	ce cf 0a	dec $0acf			dec 	convertBuffer 				; make it a 1 character string
.3511	88		dey				dey 								; Y is now +1
.3512	20 ad 32	jsr $32ad			jsr 	TokenSearch 				; search for that token.
.3515	b0 01		bcs $3518			bcs 	_TIFound
.3517	88		dey				dey 								; Y is now +0, carry clear indicating failure.
.3518					_TIFound:
.3518	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokstring.asm

.3519					TokeniseString:
.3519	c8		iny				iny 								; skip opening quote
.351a	a2 ff		ldx #$ff			ldx 	#255 						; count length of string.
.351c	84 2a		sty $2a				sty 	temp0 						; save start.
.351e					_TSGetLength:
.351e	b1 28		lda ($28),y			lda 	(codePtr),y 				; get next
.3520	f0 21		beq $3543			beq 	_TSFail						; end of line, fail
.3522	c8		iny				iny
.3523	e8		inx				inx
.3524	c9 22		cmp #$22			cmp 	#'"' 						; until end quote found.
.3526	d0 f6		bne $351e			bne 	_TSGetLength
.3528	a9 85		lda #$85			lda 	#TOK_STR 					; write string token out
.352a	20 9b 33	jsr $339b			jsr 	TokenWrite
.352d	8a		txa				txa 								; output length
.352e	20 9b 33	jsr $339b			jsr 	TokenWrite
.3531	a4 2a		ldy $2a				ldy 	temp0 						; get original position
.3533	e0 00		cpx #$00			cpx 	#0 							; check ended
.3535	f0 09		beq $3540			beq 	_TSExit
.3537					_TSOutput:
.3537	b1 28		lda ($28),y			lda 	(codePtr),y					; output character
.3539	20 9b 33	jsr $339b			jsr 	TokenWrite
.353c	c8		iny				iny
.353d	ca		dex				dex
.353e	d0 f7		bne $3537			bne 	_TSOutput
.3540					_TSExit:
.3540	c8		iny				iny 								; skip ending quote
.3541	38		sec				sec 								; return CS.
.3542	60		rts				rts
.3543					_TSFail:
.3543	18		clc				clc
.3544	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokentext.asm

.3545					TokenTableAddress:
>3545	4d 35						.word 	Group0Text
>3547	16 37						.word 	Group1Text
>3549	51 38						.word 	Group2Text
>354b	64 38						.word 	Group3Text

;******  Processing file: tokeniser/../generated/tokentext0.inc

.354d					Group0Text:
>354d	03 41 4e c4				.byte $03,$41,$4e,$c4                  ; $86 and
>3551	02 4f d2				.byte $02,$4f,$d2                      ; $87 or
>3554	03 58 4f d2				.byte $03,$58,$4f,$d2                  ; $88 xor
>3558	02 3e bd				.byte $02,$3e,$bd                      ; $89 >=
>355b	02 3c bd				.byte $02,$3c,$bd                      ; $8a <=
>355e	01 be					.byte $01,$be                          ; $8b >
>3560	01 bc					.byte $01,$bc                          ; $8c <
>3562	01 bd					.byte $01,$bd                          ; $8d =
>3564	02 3c be				.byte $02,$3c,$be                      ; $8e <>
>3567	01 ab					.byte $01,$ab                          ; $8f +
>3569	01 ad					.byte $01,$ad                          ; $90 -
>356b	02 3e be				.byte $02,$3e,$be                      ; $91 >>
>356e	02 3c bc				.byte $02,$3c,$bc                      ; $92 <<
>3571	01 aa					.byte $01,$aa                          ; $93 *
>3573	01 af					.byte $01,$af                          ; $94 /
>3575	03 4d 4f c4				.byte $03,$4d,$4f,$c4                  ; $95 mod
>3579	01 de					.byte $01,$de                          ; $96 ^
>357b	01 a1					.byte $01,$a1                          ; $97 !
>357d	01 bf					.byte $01,$bf                          ; $98 ?
>357f	06 52 45 50 45 41 d4			.byte $06,$52,$45,$50,$45,$41,$d4      ; $99 repeat
>3586	05 57 48 49 4c c5			.byte $05,$57,$48,$49,$4c,$c5          ; $9a while
>358c	03 46 4f d2				.byte $03,$46,$4f,$d2                  ; $9b for
>3590	02 49 c6				.byte $02,$49,$c6                      ; $9c if
>3593	07 44 45 46 50 52 4f c3			.byte $07,$44,$45,$46,$50,$52,$4f,$c3  ; $9d defproc
>359b	05 55 4e 54 49 cc			.byte $05,$55,$4e,$54,$49,$cc          ; $9e until
>35a1	04 57 45 4e c4				.byte $04,$57,$45,$4e,$c4              ; $9f wend
>35a6	04 4e 45 58 d4				.byte $04,$4e,$45,$58,$d4              ; $a0 next
>35ab	04 54 48 45 ce				.byte $04,$54,$48,$45,$ce              ; $a1 then
>35b0	05 45 4e 44 49 c6			.byte $05,$45,$4e,$44,$49,$c6          ; $a2 endif
>35b6	07 45 4e 44 50 52 4f c3			.byte $07,$45,$4e,$44,$50,$52,$4f,$c3  ; $a3 endproc
>35be	01 a8					.byte $01,$a8                          ; $a4 (
>35c0	04 4c 45 4e a8				.byte $04,$4c,$45,$4e,$a8              ; $a5 len(
>35c5	04 53 47 4e a8				.byte $04,$53,$47,$4e,$a8              ; $a6 sgn(
>35ca	04 41 42 53 a8				.byte $04,$41,$42,$53,$a8              ; $a7 abs(
>35cf	07 52 41 4e 44 4f 4d a8			.byte $07,$52,$41,$4e,$44,$4f,$4d,$a8  ; $a8 random(
>35d7	04 50 41 47 c5				.byte $04,$50,$41,$47,$c5              ; $a9 page
>35dc	04 54 52 55 c5				.byte $04,$54,$52,$55,$c5              ; $aa true
>35e1	05 46 41 4c 53 c5			.byte $05,$46,$41,$4c,$53,$c5          ; $ab false
>35e7	04 4d 49 4e a8				.byte $04,$4d,$49,$4e,$a8              ; $ac min(
>35ec	04 4d 41 58 a8				.byte $04,$4d,$41,$58,$a8              ; $ad max(
>35f1	04 53 59 53 a8				.byte $04,$53,$59,$53,$a8              ; $ae sys(
>35f6	06 54 49 4d 45 52 a8			.byte $06,$54,$49,$4d,$45,$52,$a8      ; $af timer(
>35fd	06 45 56 45 4e 54 a8			.byte $06,$45,$56,$45,$4e,$54,$a8      ; $b0 event(
>3604	04 47 45 54 a8				.byte $04,$47,$45,$54,$a8              ; $b1 get(
>3609	06 49 4e 4b 45 59 a8			.byte $06,$49,$4e,$4b,$45,$59,$a8      ; $b2 inkey(
>3610	06 41 4c 4c 4f 43 a8			.byte $06,$41,$4c,$4c,$4f,$43,$a8      ; $b3 alloc(
>3617	05 43 48 52 24 a8			.byte $05,$43,$48,$52,$24,$a8          ; $b4 chr$(
>361d	06 4c 45 46 54 24 a8			.byte $06,$4c,$45,$46,$54,$24,$a8      ; $b5 left$(
>3624	05 4d 49 44 24 a8			.byte $05,$4d,$49,$44,$24,$a8          ; $b6 mid$(
>362a	07 52 49 47 48 54 24 a8			.byte $07,$52,$49,$47,$48,$54,$24,$a8  ; $b7 right$(
>3632	05 53 54 52 24 a8			.byte $05,$53,$54,$52,$24,$a8          ; $b8 str$(
>3638	04 56 41 4c a8				.byte $04,$56,$41,$4c,$a8              ; $b9 val(
>363d	05 50 45 45 4b a8			.byte $05,$50,$45,$45,$4b,$a8          ; $ba peek(
>3643	05 44 45 45 4b a8			.byte $05,$44,$45,$45,$4b,$a8          ; $bb deek(
>3649	05 4c 45 45 4b a8			.byte $05,$4c,$45,$45,$4b,$a8          ; $bc leek(
>364f	04 41 53 43 a8				.byte $04,$41,$53,$43,$a8              ; $bd asc(
>3654	04 49 4e 54 a8				.byte $04,$49,$4e,$54,$a8              ; $be int(
>3659	06 46 4c 4f 41 54 a8			.byte $06,$46,$4c,$4f,$41,$54,$a8      ; $bf float(
>3660	06 49 53 56 41 4c a8			.byte $06,$49,$53,$56,$41,$4c,$a8      ; $c0 isval(
>3667	07 55 50 50 45 52 24 a8			.byte $07,$55,$50,$50,$45,$52,$24,$a8  ; $c1 upper$(
>366f	07 4c 4f 57 45 52 24 a8			.byte $07,$4c,$4f,$57,$45,$52,$24,$a8  ; $c2 lower$(
>3677	01 c0					.byte $01,$c0                          ; $c3 @
>3679	01 fe					.byte $01,$fe                          ; $c4 ~
>367b	01 a6					.byte $01,$a6                          ; $c5 &
>367d	05 47 45 54 24 a8			.byte $05,$47,$45,$54,$24,$a8          ; $c6 get$(
>3683	07 49 4e 4b 45 59 24 a8			.byte $07,$49,$4e,$4b,$45,$59,$24,$a8  ; $c7 inkey$(
>368b	03 4d 45 cd				.byte $03,$4d,$45,$cd                  ; $c8 mem
>368f	01 a9					.byte $01,$a9                          ; $c9 )
>3691	01 ba					.byte $01,$ba                          ; $ca :
>3693	01 ac					.byte $01,$ac                          ; $cb ,
>3695	01 bb					.byte $01,$bb                          ; $cc ;
>3697	01 a7					.byte $01,$a7                          ; $cd '
>3699	02 54 cf				.byte $02,$54,$cf                      ; $ce to
>369c	04 53 54 45 d0				.byte $04,$53,$54,$45,$d0              ; $cf step
>36a1	04 50 52 4f c3				.byte $04,$50,$52,$4f,$c3              ; $d0 proc
>36a6	05 4c 4f 43 41 cc			.byte $05,$4c,$4f,$43,$41,$cc          ; $d1 local
>36ac	03 44 49 cd				.byte $03,$44,$49,$cd                  ; $d2 dim
>36b0	03 52 45 cd				.byte $03,$52,$45,$cd                  ; $d3 rem
>36b4	03 4c 45 d4				.byte $03,$4c,$45,$d4                  ; $d4 let
>36b8	05 49 4e 50 55 d4			.byte $05,$49,$4e,$50,$55,$d4          ; $d5 input
>36be	04 45 4c 53 c5				.byte $04,$45,$4c,$53,$c5              ; $d6 else
>36c3	03 56 44 d5				.byte $03,$56,$44,$d5                  ; $d7 vdu
>36c7	05 50 52 49 4e d4			.byte $05,$50,$52,$49,$4e,$d4          ; $d8 print
>36cd	04 47 4f 54 cf				.byte $04,$47,$4f,$54,$cf              ; $d9 goto
>36d2	05 47 4f 53 55 c2			.byte $05,$47,$4f,$53,$55,$c2          ; $da gosub
>36d8	06 52 45 54 55 52 ce			.byte $06,$52,$45,$54,$55,$52,$ce      ; $db return
>36df	04 44 41 54 c1				.byte $04,$44,$41,$54,$c1              ; $dc data
>36e4	06 41 53 53 45 52 d4			.byte $06,$41,$53,$53,$45,$52,$d4      ; $dd assert
>36eb	04 50 4f 4b c5				.byte $04,$50,$4f,$4b,$c5              ; $de poke
>36f0	04 44 4f 4b c5				.byte $04,$44,$4f,$4b,$c5              ; $df doke
>36f5	04 4c 4f 4b c5				.byte $04,$4c,$4f,$4b,$c5              ; $e0 loke
>36fa	03 49 4e cb				.byte $03,$49,$4e,$cb                  ; $e1 ink
>36fe	05 50 41 50 45 d2			.byte $05,$50,$41,$50,$45,$d2          ; $e2 paper
>3704	03 43 4c d3				.byte $03,$43,$4c,$d3                  ; $e3 cls
>3708	06 4c 4f 43 41 54 c5			.byte $06,$4c,$4f,$43,$41,$54,$c5      ; $e4 locate
>370f	05 42 52 45 41 cb			.byte $05,$42,$52,$45,$41,$cb          ; $e5 break
>3715	00					.byte $00

;******  Return to file: tokeniser/tokentext.asm


;******  Processing file: tokeniser/../generated/tokentext1.inc

.3716					Group1Text:
>3716	05 43 4c 45 41 d2			.byte $05,$43,$4c,$45,$41,$d2          ; $86 clear
>371c	04 4c 4f 41 c4				.byte $04,$4c,$4f,$41,$c4              ; $87 load
>3721	04 53 41 56 c5				.byte $04,$53,$41,$56,$c5              ; $88 save
>3726	04 4c 49 53 d4				.byte $04,$4c,$49,$53,$d4              ; $89 list
>372b	03 4e 45 d7				.byte $03,$4e,$45,$d7                  ; $8a new
>372f	03 52 55 ce				.byte $03,$52,$55,$ce                  ; $8b run
>3733	04 52 45 41 c4				.byte $04,$52,$45,$41,$c4              ; $8c read
>3738	07 52 45 53 54 4f 52 c5			.byte $07,$52,$45,$53,$54,$4f,$52,$c5  ; $8d restore
>3740	03 45 4e c4				.byte $03,$45,$4e,$c4                  ; $8e end
>3744	04 53 54 4f d0				.byte $04,$53,$54,$4f,$d0              ; $8f stop
>3749	04 58 45 4d d5				.byte $04,$58,$45,$4d,$d5              ; $90 xemu
>374e	03 4f 52 c1				.byte $03,$4f,$52,$c1                  ; $91 ora
>3752	05 28 41 4e 44 a9			.byte $05,$28,$41,$4e,$44,$a9          ; $92 (and)
>3758	03 45 4f d2				.byte $03,$45,$4f,$d2                  ; $93 eor
>375c	03 41 44 c3				.byte $03,$41,$44,$c3                  ; $94 adc
>3760	03 53 54 c1				.byte $03,$53,$54,$c1                  ; $95 sta
>3764	03 4c 44 c1				.byte $03,$4c,$44,$c1                  ; $96 lda
>3768	03 43 4d d0				.byte $03,$43,$4d,$d0                  ; $97 cmp
>376c	03 53 42 c3				.byte $03,$53,$42,$c3                  ; $98 sbc
>3770	03 41 53 cc				.byte $03,$41,$53,$cc                  ; $99 asl
>3774	03 52 4f cc				.byte $03,$52,$4f,$cc                  ; $9a rol
>3778	03 4c 53 d2				.byte $03,$4c,$53,$d2                  ; $9b lsr
>377c	03 52 4f d2				.byte $03,$52,$4f,$d2                  ; $9c ror
>3780	03 53 54 d8				.byte $03,$53,$54,$d8                  ; $9d stx
>3784	03 4c 44 d8				.byte $03,$4c,$44,$d8                  ; $9e ldx
>3788	03 44 45 c3				.byte $03,$44,$45,$c3                  ; $9f dec
>378c	03 49 4e c3				.byte $03,$49,$4e,$c3                  ; $a0 inc
>3790	03 53 54 da				.byte $03,$53,$54,$da                  ; $a1 stz
>3794	03 42 49 d4				.byte $03,$42,$49,$d4                  ; $a2 bit
>3798	03 53 54 d9				.byte $03,$53,$54,$d9                  ; $a3 sty
>379c	03 4c 44 d9				.byte $03,$4c,$44,$d9                  ; $a4 ldy
>37a0	03 43 50 d9				.byte $03,$43,$50,$d9                  ; $a5 cpy
>37a4	03 43 50 d8				.byte $03,$43,$50,$d8                  ; $a6 cpx
>37a8	03 54 53 c2				.byte $03,$54,$53,$c2                  ; $a7 tsb
>37ac	03 54 52 c2				.byte $03,$54,$52,$c2                  ; $a8 trb
>37b0	03 4a 53 d2				.byte $03,$4a,$53,$d2                  ; $a9 jsr
>37b4	03 4a 4d d0				.byte $03,$4a,$4d,$d0                  ; $aa jmp
>37b8	03 42 50 cc				.byte $03,$42,$50,$cc                  ; $ab bpl
>37bc	03 42 4d c9				.byte $03,$42,$4d,$c9                  ; $ac bmi
>37c0	03 42 56 c3				.byte $03,$42,$56,$c3                  ; $ad bvc
>37c4	03 42 56 d3				.byte $03,$42,$56,$d3                  ; $ae bvs
>37c8	03 42 43 c3				.byte $03,$42,$43,$c3                  ; $af bcc
>37cc	03 42 43 d3				.byte $03,$42,$43,$d3                  ; $b0 bcs
>37d0	03 42 4e c5				.byte $03,$42,$4e,$c5                  ; $b1 bne
>37d4	03 42 45 d1				.byte $03,$42,$45,$d1                  ; $b2 beq
>37d8	03 42 52 c1				.byte $03,$42,$52,$c1                  ; $b3 bra
>37dc	03 42 52 cb				.byte $03,$42,$52,$cb                  ; $b4 brk
>37e0	03 50 48 d0				.byte $03,$50,$48,$d0                  ; $b5 php
>37e4	03 43 4c c3				.byte $03,$43,$4c,$c3                  ; $b6 clc
>37e8	03 50 4c d0				.byte $03,$50,$4c,$d0                  ; $b7 plp
>37ec	03 53 45 c3				.byte $03,$53,$45,$c3                  ; $b8 sec
>37f0	03 52 54 c9				.byte $03,$52,$54,$c9                  ; $b9 rti
>37f4	03 50 48 c1				.byte $03,$50,$48,$c1                  ; $ba pha
>37f8	03 43 4c c9				.byte $03,$43,$4c,$c9                  ; $bb cli
>37fc	03 50 48 d9				.byte $03,$50,$48,$d9                  ; $bc phy
>3800	03 52 54 d3				.byte $03,$52,$54,$d3                  ; $bd rts
>3804	03 50 4c c1				.byte $03,$50,$4c,$c1                  ; $be pla
>3808	03 53 45 c9				.byte $03,$53,$45,$c9                  ; $bf sei
>380c	03 50 4c d9				.byte $03,$50,$4c,$d9                  ; $c0 ply
>3810	03 44 45 d9				.byte $03,$44,$45,$d9                  ; $c1 dey
>3814	03 54 58 c1				.byte $03,$54,$58,$c1                  ; $c2 txa
>3818	03 54 59 c1				.byte $03,$54,$59,$c1                  ; $c3 tya
>381c	03 54 58 d3				.byte $03,$54,$58,$d3                  ; $c4 txs
>3820	03 54 41 d9				.byte $03,$54,$41,$d9                  ; $c5 tay
>3824	03 54 41 d8				.byte $03,$54,$41,$d8                  ; $c6 tax
>3828	03 43 4c d6				.byte $03,$43,$4c,$d6                  ; $c7 clv
>382c	03 54 53 d8				.byte $03,$54,$53,$d8                  ; $c8 tsx
>3830	03 49 4e d9				.byte $03,$49,$4e,$d9                  ; $c9 iny
>3834	03 44 45 d8				.byte $03,$44,$45,$d8                  ; $ca dex
>3838	03 43 4c c4				.byte $03,$43,$4c,$c4                  ; $cb cld
>383c	03 50 48 d8				.byte $03,$50,$48,$d8                  ; $cc phx
>3840	03 49 4e d8				.byte $03,$49,$4e,$d8                  ; $cd inx
>3844	03 4e 4f d0				.byte $03,$4e,$4f,$d0                  ; $ce nop
>3848	03 53 45 c4				.byte $03,$53,$45,$c4                  ; $cf sed
>384c	03 50 4c d8				.byte $03,$50,$4c,$d8                  ; $d0 plx
>3850	00					.byte $00

;******  Return to file: tokeniser/tokentext.asm


;******  Processing file: tokeniser/../generated/tokentext2.inc

.3851					Group2Text:
>3851	05 56 50 4f 4b c5			.byte $05,$56,$50,$4f,$4b,$c5          ; $86 vpoke
>3857	05 56 44 4f 4b c5			.byte $05,$56,$44,$4f,$4b,$c5          ; $87 vdoke
>385d	05 56 4c 4f 41 c4			.byte $05,$56,$4c,$4f,$41,$c4          ; $88 vload
>3863	00					.byte $00

;******  Return to file: tokeniser/tokentext.asm


;******  Processing file: tokeniser/../generated/tokentext3.inc

.3864					Group3Text:
>3864	06 56 50 45 45 4b a8			.byte $06,$56,$50,$45,$45,$4b,$a8      ; $86 vpeek(
>386b	06 56 44 45 45 4b a8			.byte $06,$56,$44,$45,$45,$4b,$a8      ; $87 vdeek(
>3872	00					.byte $00

;******  Return to file: tokeniser/tokentext.asm


;******  Return to file: tokeniser/tokeniser.asm

.3873					tokeniserHandler:
.3873	7c 76 38	jmp ($3876,x)			jmp 	(tokeniserVectors,x)
.3876					tokeniserVectors:
>3876	a1 30					.word Detokenise           ; index 0
>3878	95 30					.word ListLine             ; index 2
>387a	1c 33					.word TokTest              ; index 4
>387c	3c 33					.word Tokenise             ; index 6
>387e	3f 33					.word TokeniseASCIIZ       ; index 8

;******  Return to file: basic.asm

.3880					section_end_tokeniser:
.3880					section_start_variable:

;******  Processing file: variable/variable.asm


;******  Processing file: variable/access.asm

.0d21					varHash:
>0d21							.fill	1
.0d22					varType:
>0d22							.fill 	1
.0d23					varEnd:
>0d23							.fill 	1
.003b					hashList:
>003b							.fill 	2
.3880					AccessVariable:
.3880	aa		tax				tax 								; stack in X
.3881	c8		iny				iny									; look at second character
.3882	b1 28		lda ($28),y			lda 	(codePtr),y
.3884	88		dey				dey
.3885	c9 3a		cmp #$3a			cmp 	#TYPE_INT 					; is it the integer marker ($3A)
.3887	d0 15		bne $389e			bne 	_AVLong 					; no, always use the hash tables.
.3889	b1 28		lda ($28),y			lda 	(codePtr),y 				; this is the 6 bit ASCII of A-Z 1-26
.388b	38		sec				sec 	 							; make it 0-25
.388c	e9 01		sbc #$01			sbc 	#1
.388e	0a		asl a				asl 	a 							; x 4 as 4 bytes / variable.
.388f	0a		asl a				asl 	a
.3890	95 48		sta $48,x			sta 	esInt0,x
.3892	a9 0a		lda #$0a			lda 	#SingleLetterVar >> 8 		; make it an address
.3894	95 50		sta $50,x			sta 	esInt1,x
.3896	a9 80		lda #$80			lda 	#$80 						; type is an integer reference.
.3898	95 40		sta $40,x			sta 	esType,x
.389a	c8		iny				iny 								; skip over the variable reference in the code.
.389b	c8		iny				iny  								; (1 letter, 1 type)
.389c	8a		txa				txa 								; stack in A to return.
.389d	60		rts				rts
.389e					_AVLong:
.389e	8a		txa				txa
.389f	48		pha				pha
.38a0	20 e7 38	jsr $38e7			jsr 	AccessSetup 				; set up the basic information we need for later
.38a3	20 29 3b	jsr $3b29			jsr 	FindVariable 				; does the variable exist already ?
.38a6	b0 0e		bcs $38b6			bcs 	_AVFound 					; yes, then its found
.38a8	ad 22 0d	lda $0d22			lda 	varType 					; otherwise, is the variable type an array
.38ab	4a		lsr a				lsr 	a
.38ac	90 05		bcc $38b3			bcc 	_AVCanCreate 				; if not, we can autocreate
.38ae	a2 15		ldx #$15			ldx 	#ErrorID_noauto
.38b0	20 85 11	jsr $1185		jsr	errorHandler
.38b3					_AVCanCreate:
.38b3	20 9c 39	jsr $399c			jsr 	CreateVariable 				; variable does not exist, create it.
.38b6					_AVFound:
.38b6	68		pla				pla
.38b7	aa		tax				tax
.38b8	18		clc				clc 								; copy temp0 (variable record address)
.38b9	a5 2a		lda $2a				lda 	temp0 						; +5 (to point to the data)
.38bb	69 05		adc #$05			adc 	#5 							; (first 5 bytes are link, name, hash)
.38bd	95 48		sta $48,x			sta 	esInt0,x
.38bf	a5 2b		lda $2b				lda 	temp0+1
.38c1	69 00		adc #$00			adc 	#0
.38c3	95 50		sta $50,x			sta 	esInt1,x
.38c5	a9 00		lda #$00			lda 	#0
.38c7	95 58		sta $58,x			sta 	esInt2,x
.38c9	95 60		sta $60,x			sta 	esInt3,x
.38cb	ac 22 0d	ldy $0d22			ldy 	varType 					; get the type ID from the type.
.38ce	b9 a7 38	lda $38a7,y			lda 	_AVTypeTable-$3A,y 			; e.g. a reference to int/float/string.
.38d1	95 40		sta $40,x			sta 	esType,x
.38d3	ac 23 0d	ldy $0d23			ldy 	varEnd 						; restore Y
.38d6	ad 22 0d	lda $0d22			lda 	VarType 					; get variable type, put LSB into C
.38d9	4a		lsr a				lsr 	a
.38da	90 03		bcc $38df			bcc 	_AVNotArray 				; if carry set,it is an array variable.
.38dc	20 24 39	jsr $3924			jsr 	AccessArray 				; array lookup. if LSB was set.
.38df					_AVNotArray:
.38df	8a		txa				txa 								; return stack in A and return
.38e0	60		rts				rts
.38e1					_AVTypeTable:
>38e1	80 80						.byte 	$80,$80						; integer
>38e3	c0 c0						.byte 	$C0,$C0 					; string
>38e5	81 81						.byte 	$81,$81 					; float
.38e7					AccessSetup:
.38e7	a9 00		lda #$00			lda 	#0 							; zero the hash byte.
.38e9	8d 21 0d	sta $0d21			sta 	varHash
.38ec	98		tya				tya
.38ed	48		pha				pha
.38ee	b1 28		lda ($28),y	_ASLoop:lda 	(codePtr),y					; get next identifier character
.38f0	c9 3a		cmp #$3a			cmp 	#$3A 						; is it 3A-3F which end all identifiers ?
.38f2	b0 0b		bcs $38ff			bcs 	_ASComplete
.38f4	18		clc				clc 								; add to the hash. Might improve this.
.38f5	6d 21 0d	adc $0d21			adc 	varHash
.38f8	8d 21 0d	sta $0d21			sta 	varHash
.38fb	c8		iny				iny 								; next character
.38fc	4c ee 38	jmp $38ee			jmp 	_ASLoop
.38ff					_ASComplete:
.38ff	8d 22 0d	sta $0d22			sta 	varType 					; save variable type byte
.3902	c8		iny				iny
.3903	8c 23 0d	sty $0d23			sty 	varEnd 						; save the ending position.
.3906	38		sec				sec 								; convert type byte from $3A-$3F to 0..5
.3907	e9 3a		sbc #$3a			sbc 	#$3A
.3909	0a		asl a				asl 	a 							; multiply by hashTableSize (8 in this case)
.390a	0a		asl a				asl 	a
.390b	0a		asl a				asl 	a
.390c	0a		asl a				asl 	a 							; 2 bytes/word
.390d	85 2a		sta $2a				sta 	temp0 						; this is the offset to the start of the table.
.390f	ad 21 0d	lda $0d21			lda 	varHash 					; get hash
.3912	29 07		and #$07			and 	#(hashTableSize-1)			; force into range (for 8,0..7)
.3914	0a		asl a				asl  	a 							; x 2 (for word) and clear carry
.3915	65 2a		adc $2a				adc 	temp0 						; now offset from the start of the hash table.
.3917	69 68		adc #$68			adc 	#hashTables & $FF 			; add to hash table base address
.3919	85 3b		sta $3b				sta 	hashList 					; making hashLists point to the head of the link list.
.391b	a9 0a		lda #$0a			lda 	#hashTables >> 8
.391d	69 00		adc #$00			adc 	#0
.391f	85 3c		sta $3c				sta 	hashList+1
.3921	68		pla				pla
.3922	a8		tay				tay
.3923	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/accessarray.asm

.3924					AccessArray:
.3924	e8		inx				inx
.3925	8a		txa				txa
.3926	a2 06		ldx #$06		ldx	#6
.3928	20 cc 2d	jsr $2dcc		jsr	mainHandler
.392b	48		pha				pha
.392c	a2 00		ldx #$00		ldx	#0
.392e	20 cc 2d	jsr $2dcc		jsr	mainHandler
.3931	68		pla				pla
.3932	aa		tax				tax
.3933	ca		dex				dex
.3934	b5 61		lda $61,x			lda 	esInt3+1,x 					; check index value at least < 64k
.3936	15 59		ora $59,x			ora 	esInt2+1,x
.3938	d0 33		bne $396d			bne 	_AABadIndex
.393a	98		tya				tya
.393b	48		pha				pha
.393c	b5 48		lda $48,x			lda 	esInt0,x 					; put array info ptr in temp0 - this points to the
.393e	85 2a		sta $2a				sta 	temp0 						; address (+0) max (+2) and size (+4)
.3940	b5 50		lda $50,x			lda 	esInt1,x
.3942	85 2b		sta $2b				sta 	temp0+1
.3944	a0 02		ldy #$02			ldy 	#2 							; check out of range, compare against max index.
.3946	b5 49		lda $49,x			lda 	esInt0+1,x
.3948	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.394a	c8		iny				iny
.394b	b5 51		lda $51,x			lda 	esInt1+1,x
.394d	f1 2a		sbc ($2a),y			sbc 	(temp0),y
.394f	b0 1c		bcs $396d			bcs 	_AABadIndex 				; if >= then fail.
.3951	e8		inx				inx 								; point to index
.3952	a0 04		ldy #$04			ldy 	#4 							; get the size byte.
.3954	b1 2a		lda ($2a),y			lda 	(temp0),y
.3956	20 72 39	jsr $3972			jsr 	MultiplyTOSByA 				; specialist multiplier.
.3959	ca		dex				dex
.395a	a0 00		ldy #$00			ldy 	#0 							; add this to the array base as the new address
.395c	18		clc				clc
.395d	b5 49		lda $49,x			lda 	esInt0+1,x
.395f	71 2a		adc ($2a),y			adc 	(temp0),y
.3961	95 48		sta $48,x			sta 	esInt0,x
.3963	b5 51		lda $51,x			lda 	esInt1+1,x
.3965	c8		iny				iny
.3966	71 2a		adc ($2a),y			adc 	(temp0),y
.3968	95 50		sta $50,x			sta 	esInt1,x
.396a	68		pla				pla
.396b	a8		tay				tay
.396c	60		rts				rts
.396d					_AABadIndex:
.396d	a2 1b		ldx #$1b			ldx 	#ErrorID_ArrayIndex
.396f	20 85 11	jsr $1185		jsr	errorHandler
.3972					MultiplyTOSByA:
.3972	48		pha				pha
.3973	b5 48		lda $48,x			lda 	esInt0,x 					; copy index to temp1
.3975	85 2c		sta $2c				sta 	temp1
.3977	b5 50		lda $50,x			lda 	esInt1,x
.3979	85 2d		sta $2d				sta 	temp1+1
.397b	68		pla				pla
.397c	16 48		asl $48,x			asl 	esInt0,x 					; double it.
.397e	36 50		rol $50,x			rol 	esInt1,x
.3980	c9 02		cmp #$02			cmp 	#2 							; if x 2 then exit.
.3982	f0 17		beq $399b			beq 	_MTBAExit
.3984	c9 06		cmp #$06			cmp 	#6 							; if x 6 then add temp1 to index
.3986	d0 0f		bne $3997			bne 	_MTBANotFloat
.3988	48		pha				pha
.3989	18		clc				clc 								; so this will make it x 3
.398a	b5 48		lda $48,x			lda 	esInt0,x
.398c	65 2c		adc $2c				adc 	temp1
.398e	95 48		sta $48,x			sta 	esInt0,x
.3990	b5 50		lda $50,x			lda 	esInt1,x
.3992	65 2d		adc $2d				adc 	temp1+1
.3994	95 50		sta $50,x			sta 	esInt1,x
.3996	68		pla				pla
.3997					_MTBANotFloat:
.3997	16 48		asl $48,x			asl 	esInt0,x					; now it is x 4 or x 6
.3999	36 50		rol $50,x			rol 	esInt1,x
.399b					_MTBAExit:
.399b	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/create.asm

.399c					CreateVariable:
.399c	98		tya				tya 								; push Y on the stack twice.
.399d	48		pha				pha									; position in code of the new variable.
.399e	48		pha				pha
.399f	ae 22 0d	ldx $0d22			ldx 	varType 					; get var type 0-5 from the var type
.39a2	bd c6 39	lda $39c6,x			lda		_CVSize-$3A,x 				; the bytes required for this new variable.
.39a5	48		pha				pha 								; save length
.39a6	a5 35		lda $35				lda 	lowMemory 					; set low Memory ptr to temp0
.39a8	85 2a		sta $2a				sta 	temp0 						; (address of the new variable)
.39aa	a5 36		lda $36				lda 	lowMemory+1
.39ac	85 2b		sta $2b				sta 	temp0+1
.39ae	68		pla				pla 								; get length
.39af	18		clc				clc 								; add to low memory.
.39b0	65 35		adc $35				adc 	lowMemory
.39b2	85 35		sta $35				sta 	lowMemory
.39b4	90 08		bcc $39be			bcc 	_CVNoCarry
.39b6	e6 36		inc $36				inc 	lowMemory+1
.39b8	a5 36		lda $36				lda 	lowMemory+1 				; check out of memory.
.39ba	c5 34		cmp $34				cmp 	highMemory+1
.39bc	b0 3d		bcs $39fb			bcs 	_CVMemory
.39be					_CVNoCarry:
.39be	ad 21 0d	lda $0d21			lda 	varHash 					; store hash at offset 4.
.39c1	a0 04		ldy #$04			ldy 	#4
.39c3	91 2a		sta ($2a),y			sta 	(temp0),y
.39c5	68		pla				pla 								; offset, work out where the variable name is.
.39c6	18		clc				clc
.39c7	65 28		adc $28				adc 	codePtr
.39c9	a0 02		ldy #$02			ldy 	#2 							; copy that into slots 2 + 3.
.39cb	91 2a		sta ($2a),y			sta 	(temp0),y
.39cd	a5 29		lda $29				lda 	codePtr+1
.39cf	69 00		adc #$00			adc 	#0
.39d1	c8		iny				iny
.39d2	91 2a		sta ($2a),y			sta 	(temp0),y
.39d4	cd c9 0a	cmp $0ac9			cmp 	basePage+1 					; compare against the program base.
.39d7	b0 03		bcs $39dc			bcs 	_CVNotImmediate
.39d9	20 3e 3a	jsr $3a3e			jsr 	CloneVariableName 			; we need to clone the variable name (immediate mode)
.39dc					_CVNotImmediate:
.39dc	a0 00		ldy #$00			ldy 	#0 							; copy current hash pointer in link
.39de	b1 3b		lda ($3b),y			lda 	(hashList),y 				; so we're inserting it in the front of a linked list
.39e0	91 2a		sta ($2a),y			sta 	(temp0),y
.39e2	c8		iny				iny
.39e3	b1 3b		lda ($3b),y			lda 	(hashList),y
.39e5	91 2a		sta ($2a),y			sta 	(temp0),y
.39e7	a5 2b		lda $2b				lda 	temp0+1 					; set new link
.39e9	91 3b		sta ($3b),y			sta 	(hashList),y
.39eb	88		dey				dey
.39ec	a5 2a		lda $2a				lda 	temp0
.39ee	91 3b		sta ($3b),y			sta 	(hashList),y
.39f0	ad 22 0d	lda $0d22			lda 	varType 					; type in A
.39f3	a0 05		ldy #$05			ldy 	#5 							; offset in Y
.39f5	20 06 3a	jsr $3a06			jsr 	ZeroTemp0Y 					; zero (temp0),y with whatever type.
.39f8	68		pla				pla
.39f9	a8		tay				tay
.39fa	60		rts				rts
.39fb					_CVMemory:
.39fb	a2 21		ldx #$21			ldx 	#ErrorID_Memory
.39fd	20 85 11	jsr $1185		jsr	errorHandler
>3a00	09 0a				_CVSize:.byte 	VarHSize+VarISize,VarHSize+VarASize 					; <storage for integer>
>3a02	07 0a						.byte 	VarHSize+VarSSize,VarHSize+VarASize 					; <storage for string>
>3a04	0b 0a						.byte 	VarHSize+VarFSize,VarHSize+VarASize 					; <storage for float>
.3a06					ZeroTemp0Y:
.3a06	4a		lsr a				lsr 	a 							; bit 0 in carry
.3a07	0a		asl a				asl 	a
.3a08	b0 19		bcs $3a23			bcs 	_ZTExit 					; we don't initialise arrays.
.3a0a	c9 3c		cmp #$3c			cmp 	#$3C 						; check string
.3a0c	f0 16		beq $3a24			beq 	_ZTWriteNullString 			; write "" string
.3a0e	c9 3e		cmp #$3e			cmp 	#$3E 						; check float
.3a10	f0 22		beq $3a34			beq 	_ZTWriteFloat
.3a12	98		tya				tya
.3a13	48		pha				pha
.3a14	a9 00		lda #$00			lda 	#0
.3a16	91 2a		sta ($2a),y			sta 	(temp0),y
.3a18	c8		iny				iny
.3a19	91 2a		sta ($2a),y			sta 	(temp0),y
.3a1b	c8		iny				iny
.3a1c	91 2a		sta ($2a),y			sta 	(temp0),y
.3a1e	c8		iny				iny
.3a1f	91 2a		sta ($2a),y			sta 	(temp0),y
.3a21	68		pla				pla
.3a22	a8		tay				tay
.3a23					_ZTExit:
.3a23	60		rts				rts
.3a24					_ZTWriteNullString:
.3a24	a9 00		lda #$00			lda 	#0 							; put a reference to null string as the default value.
.3a26	8d ce 0a	sta $0ace			sta 	NullString
.3a29	a9 ce		lda #$ce			lda 	#NullString & $FF
.3a2b	91 2a		sta ($2a),y			sta 	(temp0),y
.3a2d	a9 0a		lda #$0a			lda 	#NullString >> 8
.3a2f	c8		iny				iny
.3a30	91 2a		sta ($2a),y			sta 	(temp0),y
.3a32	88		dey				dey
.3a33	60		rts				rts
.3a34					_ZTWriteFloat:
.3a34	8a		txa				txa
.3a35	48		pha				pha
.3a36	a2 1e		ldx #$1e		ldx	#30
.3a38	20 82 15	jsr $1582		jsr	floatingpointHandler
.3a3b	68		pla				pla
.3a3c	aa		tax				tax
.3a3d	60		rts				rts
.3a3e					CloneVariableName:
.3a3e	a0 02		ldy #$02			ldy 	#2 							; copy vname address to temp2
.3a40	b1 2a		lda ($2a),y			lda 	(temp0),y
.3a42	85 2e		sta $2e				sta 	temp2
.3a44	c8		iny				iny
.3a45	b1 2a		lda ($2a),y			lda 	(temp0),y
.3a47	85 2f		sta $2f				sta 	temp2+1
.3a49	a5 36		lda $36				lda 	lowMemory+1 				; copy lowMemory address to (temp0),2/3
.3a4b	91 2a		sta ($2a),y			sta 	(temp0),y
.3a4d	88		dey				dey
.3a4e	a5 35		lda $35				lda 	lowMemory
.3a50	91 2a		sta ($2a),y			sta 	(temp0),y
.3a52	a0 00		ldy #$00			ldy 	#0 							; copy data from (temp2) to (lowMemory)
.3a54					_CVNCopy:
.3a54	b1 2e		lda ($2e),y			lda		(temp2),y
.3a56	91 35		sta ($35),y			sta 	(lowMemory),y
.3a58	c8		iny				iny
.3a59	c9 3a		cmp #$3a			cmp 	#$3A 						; until the whole name has been copied.
.3a5b	90 f7		bcc $3a54			bcc 	_CVNCopy
.3a5d	98		tya				tya 								; add Y to low memory
.3a5e	18		clc				clc
.3a5f	65 35		adc $35				adc 	lowMemory
.3a61	85 35		sta $35				sta 	lowMemory
.3a63	90 02		bcc $3a67			bcc 	_CVNNoCarry
.3a65	e6 36		inc $36				inc 	lowMemory+1
.3a67					_CVNNoCarry:
.3a67	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/createarray.asm

.3a68					CreateArray:
.3a68	20 e7 38	jsr $38e7			jsr 	AccessSetup 				; set up the basic stuff.
.3a6b	ad 22 0d	lda $0d22			lda 	varType 					; is the variable type an array
.3a6e	4a		lsr a				lsr 	a
.3a6f	90 3f		bcc $3ab0			bcc 	_CANotArray 				; no, cause an error.
.3a71	20 29 3b	jsr $3b29			jsr 	FindVariable 				; does the variable exist already
.3a74	b0 35		bcs $3aab			bcs 	_CAFound 					; cannot redefine it.
.3a76	20 9c 39	jsr $399c			jsr 	CreateVariable 				; create the variable entry.
.3a79	ac 23 0d	ldy $0d23			ldy 	varEnd 						; point Y to the end of the variable entry.
.3a7c	a5 2a		lda $2a				lda 	temp0 						; push address of new variable entry on the stack
.3a7e	48		pha				pha
.3a7f	a5 2b		lda $2b				lda 	temp0+1
.3a81	48		pha				pha
.3a82	ad 22 0d	lda $0d22			lda 	varType 					; push variable type on the stack.
.3a85	48		pha				pha
.3a86	a9 00		lda #$00			lda 	#0 							; work out the array dimension on TOS.
.3a88	a2 06		ldx #$06		ldx	#6
.3a8a	20 cc 2d	jsr $2dcc		jsr	mainHandler
.3a8d	a2 00		ldx #$00		ldx	#0
.3a8f	20 cc 2d	jsr $2dcc		jsr	mainHandler
.3a92	68		pla				pla 		 						; restore type and position.
.3a93	8d 22 0d	sta $0d22			sta 	varType
.3a96	68		pla				pla
.3a97	85 2b		sta $2b				sta 	temp0+1
.3a99	68		pla				pla
.3a9a	85 2a		sta $2a				sta 	temp0
.3a9c	a5 50		lda $50				lda 	esInt1 						; limit array max to 4096.
.3a9e	29 e0		and #$e0			and 	#$E0
.3aa0	05 58		ora $58				ora 	esInt2
.3aa2	05 60		ora $60				ora 	esInt3
.3aa4	f0 0f		beq $3ab5			beq 	_CASizeOk
.3aa6					_CASize:
.3aa6	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.3aa8	20 85 11	jsr $1185		jsr	errorHandler
.3aab					_CAFound:
.3aab	a2 19		ldx #$19			ldx 	#ErrorID_DupArray
.3aad	20 85 11	jsr $1185		jsr	errorHandler
.3ab0					_CANotArray:
.3ab0	a2 1a		ldx #$1a			ldx 	#ErrorID_NotArray
.3ab2	20 85 11	jsr $1185		jsr	errorHandler
.3ab5					_CASizeOk:
.3ab5	e6 48		inc $48				inc 	esInt0 						; bump it by one, as we index from 0
.3ab7	d0 02		bne $3abb			bne 	_CANoCarry 					; e.g. DIM A(10) ... A(0) - A(10)
.3ab9	e6 49		inc $49				inc 	esInt0+1
.3abb					_CANoCarry:
.3abb	98		tya				tya
.3abc	48		pha				pha
.3abd	a0 05		ldy #$05			ldy 	#5
.3abf	a5 35		lda $35				lda 	lowMemory 					; copy low memory address in +5,+6
.3ac1	91 2a		sta ($2a),y			sta 	(temp0),y 					; this is where it will come from
.3ac3	c8		iny				iny
.3ac4	a5 36		lda $36				lda 	lowMemory+1
.3ac6	91 2a		sta ($2a),y			sta 	(temp0),y
.3ac8	c8		iny				iny
.3ac9	a5 48		lda $48				lda 	esInt0 						; copy maximum index value to +7,+8
.3acb	91 2a		sta ($2a),y			sta 	(temp0),y
.3acd	c8		iny				iny
.3ace	a5 50		lda $50				lda 	esInt1
.3ad0	91 2a		sta ($2a),y			sta 	(temp0),y
.3ad2	c8		iny				iny
.3ad3	ae 22 0d	ldx $0d22			ldx 	varType 					; get the length per element
.3ad6	bd e2 3a	lda $3ae2,x			lda 	_CAActualSize-$3A-1,x
.3ad9	91 2a		sta ($2a),y			sta 	(temp0),y
.3adb	aa		tax				tax 								; save size in X
.3adc	a5 35		lda $35				lda 	lowMemory 					; set temp0 to low memory.
.3ade	85 2a		sta $2a				sta 	temp0
.3ae0	a5 36		lda $36				lda 	lowMemory+1
.3ae2	85 2b		sta $2b				sta 	temp0+1
.3ae4	a9 00		lda #$00			lda 	#0 							; temp1 is the counter.
.3ae6	85 2c		sta $2c				sta 	temp1
.3ae8	85 2d		sta $2d				sta 	temp1+1
.3aea					_CAInitialiseArray:
.3aea	a0 00		ldy #$00			ldy 	#0 							; write a null record at temp0
.3aec	ad 22 0d	lda $0d22			lda 	varType 					; base type of array in A.
.3aef	29 fe		and #$fe			and 	#$FE
.3af1	20 06 3a	jsr $3a06			jsr 	ZeroTemp0Y
.3af4	8a		txa				txa 								; add X to temp0, also updating lowMemory
.3af5	18		clc				clc
.3af6	65 2a		adc $2a				adc 	temp0
.3af8	85 2a		sta $2a				sta 	temp0
.3afa	85 35		sta $35				sta 	lowMemory
.3afc	a5 2b		lda $2b				lda 	temp0+1
.3afe	69 00		adc #$00			adc 	#0
.3b00	85 2b		sta $2b				sta 	temp0+1
.3b02	85 36		sta $36				sta 	lowMemory+1
.3b04	c5 34		cmp $34				cmp 	highMemory+1				; out of memory check
.3b06	b0 1c		bcs $3b24			bcs 	_CAMemory
.3b08	e6 2c		inc $2c				inc 	temp1 						; bump the counter.
.3b0a	d0 02		bne $3b0e			bne 	_CAIANoCarry
.3b0c	e6 2d		inc $2d				inc 	temp1+1
.3b0e					_CAIANoCarry:
.3b0e	a5 48		lda $48				lda 	esInt0 						; counter reached max index
.3b10	c5 2c		cmp $2c				cmp 	temp1
.3b12	d0 d6		bne $3aea			bne 	_CAInitialiseArray
.3b14	a5 50		lda $50				lda 	esInt1
.3b16	c5 2d		cmp $2d				cmp 	temp1+1
.3b18	d0 d0		bne $3aea			bne 	_CAInitialiseArray
.3b1a	68		pla				pla
.3b1b	a8		tay				tay
.3b1c	60		rts				rts
.3b1d					_CAActualSize:
>3b1d	04 00						.byte 	VarISize,0
>3b1f	02 00						.byte 	VarSSize,0
>3b21	06 00						.byte 	VarFSize,0
>3b23	db						.byte 	$DB
.3b24					_CAMemory:
.3b24	a2 21		ldx #$21			ldx 	#ErrorID_Memory
.3b26	20 85 11	jsr $1185		jsr	errorHandler

;******  Return to file: variable/variable.asm


;******  Processing file: variable/find.asm

.3b29					FindVariable:
.3b29	98		tya				tya
.3b2a	48		pha				pha
.3b2b	98		tya				tya 								; point temp2 to the actual name
.3b2c	18		clc				clc 								; in memory of the variable being created
.3b2d	65 28		adc $28				adc 	codePtr
.3b2f	85 2e		sta $2e				sta 	temp2
.3b31	a5 29		lda $29				lda 	codePtr+1
.3b33	69 00		adc #$00			adc 	#0
.3b35	85 2f		sta $2f				sta 	temp2+1
.3b37	a0 00		ldy #$00			ldy 	#0
.3b39	a5 3b		lda $3b				lda 	hashList 					; copy hashlist to temp0
.3b3b	85 2a		sta $2a				sta 	temp0
.3b3d	a5 3c		lda $3c				lda 	hashList+1
.3b3f	85 2b		sta $2b				sta 	temp0+1
.3b41	a0 01		ldy #$01	_FVNext:ldy 	#1 							; get MSB
.3b43	b1 2a		lda ($2a),y			lda 	(temp0),y
.3b45	f0 2c		beq $3b73			beq 	_FVFail
.3b47	aa		tax				tax
.3b48	88		dey				dey		 							; get LSB
.3b49	b1 2a		lda ($2a),y			lda 	(temp0),y
.3b4b	85 2a		sta $2a				sta 	temp0 						; update pointer.
.3b4d	86 2b		stx $2b				stx 	temp0+1
.3b4f	a0 04		ldy #$04			ldy 	#4 							; check hashes match
.3b51	b1 2a		lda ($2a),y			lda 	(temp0),y
.3b53	cd 21 0d	cmp $0d21			cmp 	varHash
.3b56	d0 e9		bne $3b41			bne 	_FVNext 					; if not, no point in checking the name.
.3b58	88		dey				dey 								; copy name pointer (+2,+3) to temp1.
.3b59	b1 2a		lda ($2a),y			lda 	(temp0),y
.3b5b	85 2d		sta $2d				sta 	temp1+1
.3b5d	88		dey				dey
.3b5e	b1 2a		lda ($2a),y			lda 	(temp0),y
.3b60	85 2c		sta $2c				sta 	temp1
.3b62	a0 00		ldy #$00			ldy 	#0
.3b64					_FVCheck:
.3b64	b1 2c		lda ($2c),y			lda 	(temp1),y 					; compare names
.3b66	d1 2e		cmp ($2e),y			cmp 	(temp2),y
.3b68	d0 d7		bne $3b41			bne 	_FVNext		 				; fail if different.
.3b6a	c8		iny				iny
.3b6b	c9 3a		cmp #$3a			cmp 	#$3A 						; until reached the end marker.
.3b6d	90 f5		bcc $3b64			bcc 	_FVCheck
.3b6f	68		pla				pla
.3b70	a8		tay				tay
.3b71	38		sec				sec
.3b72	60		rts				rts
.3b73					_FVFail:
.3b73	68		pla				pla
.3b74	a8		tay				tay
.3b75	18		clc				clc
.3b76	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/reset.asm

.3b77					HashTableReset:
.3b77	a2 60		ldx #$60			ldx 	#6*2*hashTableSize			; 6 types, 2 bytes per table entry.
.3b79	a9 00		lda #$00			lda 	#0
.3b7b					_HTRClear:
.3b7b	9d 67 0a	sta $0a67,x			sta 	hashTables-1,x
.3b7e	ca		dex				dex
.3b7f	d0 fa		bne $3b7b			bne 	_HTRClear
.3b81	60		rts				rts

;******  Return to file: variable/variable.asm

.3b82					variableHandler:
.3b82	7c 85 3b	jmp ($3b85,x)			jmp 	(variableVectors,x)
.3b85					variableVectors:
>3b85	80 38					.word AccessVariable       ; index 0
>3b87	68 3a					.word CreateArray          ; index 2
>3b89	77 3b					.word HashTableReset       ; index 4

;******  Return to file: basic.asm

.3b8b					section_end_variable:
.3b8b					section_start_footer:

;******  Processing file: footer/footer.asm


;******  Processing file: footer/99end.asm

.003d					endZeroPage:
.0d24					endStorage:
>3b8b							.align 	256
.3c00					programMemory:
>3bff	ff						.byte 	$FF

;******  Return to file: footer/footer.asm


;******  Return to file: basic.asm

.3c00					section_end_footer:

;******  End of listing
