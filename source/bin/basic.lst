
; 64tass Turbo Assembler Macro V1.55.2200 listing file
; 64tass -D autorun=1 -D coldstartnew=0 -Walias -Wmacro-prefix -Wall -q -c -L ../source/bin/basic.lst -l ../source/bin/basic.lbl -Wall -o ../source/bin/stub.prg basic.asm
; Mon Mar 29 14:02:09 2021

;Offset	;Hex		;Monitor	;Source

;******  Command line definitions

=1					autorun=1
=0					coldstartnew=0

;******  Processing input file: basic.asm


;******  Processing file: header/01common.inc


;******  Processing file: header/../generated/installed.inc

=1					installed_header = 1
=1					installed_main = 1
=1					installed_variable = 1
=1					installed_assembler = 1
=1					installed_error = 1
=1					installed_extension = 1
=1					installed_string = 1
=1					installed_device = 1
=0					installed_floatingpoint = 0
=1					installed_interaction = 1
=1					installed_tokeniser = 1
=1					installed_footer = 1

;******  Return to file: header/01common.inc

=$1000					CodeStart = $1000
=$800					MemoryStorage = $800
=$9f00					EndOfMemory = $9F00
=$28					ZeroPageStorage = $28
=$48					StackAddress = $48
=8					StackSize = 8
=2					retStackSizePages = 2
=8					hashTableSize = 8			; if this changes, the calculation is AccessSetup has to match it.
="G"					markerGOSUB = 'G'
="R"					markerREPEAT = 'R'
="F"					markerFOR = 'F'
="W"					markerWHILE = 'W'
="P"					markerPROC = 'P'
="$"					markerSTRING = '$'
="#"					markerFLOAT = '#'
="%"					markerINT = '%'
=5					VarHSize = 5 								; header (2 link, 2 name, 1 hash)
=2					VarASize = 2 								; array [address of first level]
=4					VarISize = 4 								; integer (32 bit)
=6					VarFSize = 6 								; float (4 mantissa, 1 exponent 1 sign/zero)
=2					VarSSize = 2 								; address (2 bytes)

;******  Return to file: basic.asm


;******  Processing file: header/02macros.inc


;******  Return to file: basic.asm


;******  Processing file: header/03data.inc

>0028					codePtr:.fill 	2							; (codePtr),y points to code.
>002a					temp0: 	.fill 	2							; working variables.
>002c					temp1: 	.fill 	2
>002e					temp2: 	.fill 	2
>0030					temp3: 	.fill 	2
.0032					tempshort:
>0032							.fill 	1
.0033					highMemory:
>0033							.fill 	2
.0035					lowMemory:
>0035							.fill 	2
>0800							.align	256
.0800					returnStack:
>0800							.fill 	retStackSizePages * 256
=512					retStackSize = retStackSizePages * 256
.0a00					SingleLetterVar:
>0a00					 		.fill 	26*4
.0a68					currentStorage:
>0048					esType:	.fill 	StackSize  					; type byte (see above)
>0050					esInt0:	.fill 	StackSize 					; integer or mantissa
>0058					esInt1:	.fill 	StackSize
>0060					esInt2:	.fill 	StackSize
>0068					esInt3:	.fill 	StackSize
>0070					esExp:	.fill 	StackSize 					; exponent ($80 = 0)
>0078					esZSign:.fill 	StackSize 					; for floating point - sign (bit 7) isZero (bit 6)
.0080					endOfStack:
=$50					esMant0 = esInt0 							; synonyms.
=$58					esMant1 = esInt1
=$60					esMant2 = esInt2
=$68					esMant3 = esInt3
.0a68					hashTables:
>0a68							.fill 	6*2*hashTableSize
.0ac8					basePage:
>0ac8							.fill 	2
.0aca					endProgram:
>0aca							.fill 	2
.0acc					endMemory:
>0acc							.fill 	2
.0ace					NullString:
>0ace							.fill 	1							; don't waste memory concreting null strings.
.0acf					convertBuffer:
>0acf							.fill 	35

;******  Processing file: header/../generated/tokenconst.inc

=$80					TOK_EOL=$80
=$81					TOK_SHIFT1=$81
=$82					TOK_SHIFT2=$82
=$83					TOK_SHIFT3=$83
=$84					TOK_FPC=$84
=$85					TOK_STR=$85
=$86					TOK_BINARYST=$86
=$99					TOK_STRUCTST=$99
=$a4					TOK_UNARYST=$a4
=$c9					TOK_TOKENS=$c9
=$86					TKW_AND                      = $86 ; and
=$87					TKW_OR                       = $87 ; or
=$88					TKW_XOR                      = $88 ; xor
=$89					TKW_GREATEREQUAL             = $89 ; >=
=$8a					TKW_LESSEQUAL                = $8a ; <=
=$8b					TKW_GREATER                  = $8b ; >
=$8c					TKW_LESS                     = $8c ; <
=$8d					TKW_EQUAL                    = $8d ; =
=$8e					TKW_LESSGREATER              = $8e ; <>
=$8f					TKW_PLUS                     = $8f ; +
=$90					TKW_MINUS                    = $90 ; -
=$91					TKW_GREATERGREATER           = $91 ; >>
=$92					TKW_LESSLESS                 = $92 ; <<
=$93					TKW_STAR                     = $93 ; *
=$94					TKW_SLASH                    = $94 ; /
=$95					TKW_MOD                      = $95 ; mod
=$96					TKW_HAT                      = $96 ; ^
=$97					TKW_PLING                    = $97 ; !
=$98					TKW_QMARK                    = $98 ; ?
=$99					TKW_REPEAT                   = $99 ; repeat
=$9a					TKW_WHILE                    = $9a ; while
=$9b					TKW_FOR                      = $9b ; for
=$9c					TKW_IF                       = $9c ; if
=$9d					TKW_DEFPROC                  = $9d ; defproc
=$9e					TKW_UNTIL                    = $9e ; until
=$9f					TKW_WEND                     = $9f ; wend
=$a0					TKW_NEXT                     = $a0 ; next
=$a1					TKW_THEN                     = $a1 ; then
=$a2					TKW_ENDIF                    = $a2 ; endif
=$a3					TKW_ENDPROC                  = $a3 ; endproc
=$a4					TKW_LPAREN                   = $a4 ; (
=$a5					TKW_LENLPAREN                = $a5 ; len(
=$a6					TKW_SGNLPAREN                = $a6 ; sgn(
=$a7					TKW_ABSLPAREN                = $a7 ; abs(
=$a8					TKW_RANDOMLPAREN             = $a8 ; random(
=$a9					TKW_PAGE                     = $a9 ; page
=$aa					TKW_TRUE                     = $aa ; true
=$ab					TKW_FALSE                    = $ab ; false
=$ac					TKW_MINLPAREN                = $ac ; min(
=$ad					TKW_MAXLPAREN                = $ad ; max(
=$ae					TKW_SYSLPAREN                = $ae ; sys(
=$af					TKW_TIMERLPAREN              = $af ; timer(
=$b0					TKW_EVENTLPAREN              = $b0 ; event(
=$b1					TKW_GETLPAREN                = $b1 ; get(
=$b2					TKW_INKEYLPAREN              = $b2 ; inkey(
=$b3					TKW_ALLOCLPAREN              = $b3 ; alloc(
=$b4					TKW_CHRDOLLARLPAREN          = $b4 ; chr$(
=$b5					TKW_LEFTDOLLARLPAREN         = $b5 ; left$(
=$b6					TKW_MIDDOLLARLPAREN          = $b6 ; mid$(
=$b7					TKW_RIGHTDOLLARLPAREN        = $b7 ; right$(
=$b8					TKW_STRDOLLARLPAREN          = $b8 ; str$(
=$b9					TKW_VALLPAREN                = $b9 ; val(
=$ba					TKW_PEEKLPAREN               = $ba ; peek(
=$bb					TKW_DEEKLPAREN               = $bb ; deek(
=$bc					TKW_LEEKLPAREN               = $bc ; leek(
=$bd					TKW_ASCLPAREN                = $bd ; asc(
=$be					TKW_INTLPAREN                = $be ; int(
=$bf					TKW_FLOATLPAREN              = $bf ; float(
=$c0					TKW_ISVALLPAREN              = $c0 ; isval(
=$c1					TKW_UPPERDOLLARLPAREN        = $c1 ; upper$(
=$c2					TKW_LOWERDOLLARLPAREN        = $c2 ; lower$(
=$c3					TKW_ATC                      = $c3 ; @
=$c4					TKW_WAVY                     = $c4 ; ~
=$c5					TKW_AMP                      = $c5 ; &
=$c6					TKW_GETDOLLARLPAREN          = $c6 ; get$(
=$c7					TKW_INKEYDOLLARLPAREN        = $c7 ; inkey$(
=$c8					TKW_MEM                      = $c8 ; mem
=$c9					TKW_RPAREN                   = $c9 ; )
=$ca					TKW_COLON                    = $ca ; :
=$cb					TKW_COMMA                    = $cb ; ,
=$cc					TKW_SEMICOLON                = $cc ; ;
=$cd					TKW_QUOTE                    = $cd ; '
=$ce					TKW_TO                       = $ce ; to
=$cf					TKW_STEP                     = $cf ; step
=$d0					TKW_PROC                     = $d0 ; proc
=$d1					TKW_LOCAL                    = $d1 ; local
=$d2					TKW_DIM                      = $d2 ; dim
=$d3					TKW_REM                      = $d3 ; rem
=$d4					TKW_LET                      = $d4 ; let
=$d5					TKW_INPUT                    = $d5 ; input
=$d6					TKW_ELSE                     = $d6 ; else
=$d7					TKW_VDU                      = $d7 ; vdu
=$d8					TKW_PRINT                    = $d8 ; print
=$d9					TKW_DATA                     = $d9 ; data
=$da					TKW_IMAGE                    = $da ; image
=$db					TKW_AT                       = $db ; at
=$dc					TKW_FLIP                     = $dc ; flip
=$dd					TKW_ASSERT                   = $dd ; assert
=$de					TKW_POKE                     = $de ; poke
=$df					TKW_DOKE                     = $df ; doke
=$e0					TKW_LOKE                     = $e0 ; loke
=$e1					TKW_INK                      = $e1 ; ink
=$e2					TKW_PAPER                    = $e2 ; paper
=$e3					TKW_CLS                      = $e3 ; cls
=$e4					TKW_LOCATE                   = $e4 ; locate
=$e5					TKW_PERIOD                   = $e5 ; .
=$e6					TKW_HASH                     = $e6 ; #
=$e7					TKW_CLEAR                    = $e7 ; clear
=$86					TKW_LOAD                     = $86 ; load
=$87					TKW_SAVE                     = $87 ; save
=$88					TKW_LIST                     = $88 ; list
=$89					TKW_NEW                      = $89 ; new
=$8a					TKW_BREAK                    = $8a ; break
=$8b					TKW_RUN                      = $8b ; run
=$8c					TKW_READ                     = $8c ; read
=$8d					TKW_RESTORE                  = $8d ; restore
=$8e					TKW_END                      = $8e ; end
=$8f					TKW_STOP                     = $8f ; stop
=$90					TKW_XEMU                     = $90 ; xemu
=$91					TKW_GOTO                     = $91 ; goto
=$92					TKW_GOSUB                    = $92 ; gosub
=$93					TKW_RETURN                   = $93 ; return
=$94					TKW_ORA                      = $94 ; ora
=$95					TKW_LPARENANDRPAREN          = $95 ; (and)
=$96					TKW_EOR                      = $96 ; eor
=$97					TKW_ADC                      = $97 ; adc
=$98					TKW_STA                      = $98 ; sta
=$99					TKW_LDA                      = $99 ; lda
=$9a					TKW_CMP                      = $9a ; cmp
=$9b					TKW_SBC                      = $9b ; sbc
=$9c					TKW_ASL                      = $9c ; asl
=$9d					TKW_ROL                      = $9d ; rol
=$9e					TKW_LSR                      = $9e ; lsr
=$9f					TKW_ROR                      = $9f ; ror
=$a0					TKW_STX                      = $a0 ; stx
=$a1					TKW_LDX                      = $a1 ; ldx
=$a2					TKW_DEC                      = $a2 ; dec
=$a3					TKW_INC                      = $a3 ; inc
=$a4					TKW_STZ                      = $a4 ; stz
=$a5					TKW_BIT                      = $a5 ; bit
=$a6					TKW_STY                      = $a6 ; sty
=$a7					TKW_LDY                      = $a7 ; ldy
=$a8					TKW_CPY                      = $a8 ; cpy
=$a9					TKW_CPX                      = $a9 ; cpx
=$aa					TKW_TSB                      = $aa ; tsb
=$ab					TKW_TRB                      = $ab ; trb
=$ac					TKW_JSR                      = $ac ; jsr
=$ad					TKW_JMP                      = $ad ; jmp
=$ae					TKW_BPL                      = $ae ; bpl
=$af					TKW_BMI                      = $af ; bmi
=$b0					TKW_BVC                      = $b0 ; bvc
=$b1					TKW_BVS                      = $b1 ; bvs
=$b2					TKW_BCC                      = $b2 ; bcc
=$b3					TKW_BCS                      = $b3 ; bcs
=$b4					TKW_BNE                      = $b4 ; bne
=$b5					TKW_BEQ                      = $b5 ; beq
=$b6					TKW_BRA                      = $b6 ; bra
=$b7					TKW_BRK                      = $b7 ; brk
=$b8					TKW_PHP                      = $b8 ; php
=$b9					TKW_CLC                      = $b9 ; clc
=$ba					TKW_PLP                      = $ba ; plp
=$bb					TKW_SEC                      = $bb ; sec
=$bc					TKW_RTI                      = $bc ; rti
=$bd					TKW_PHA                      = $bd ; pha
=$be					TKW_CLI                      = $be ; cli
=$bf					TKW_PHY                      = $bf ; phy
=$c0					TKW_RTS                      = $c0 ; rts
=$c1					TKW_PLA                      = $c1 ; pla
=$c2					TKW_SEI                      = $c2 ; sei
=$c3					TKW_PLY                      = $c3 ; ply
=$c4					TKW_DEY                      = $c4 ; dey
=$c5					TKW_TXA                      = $c5 ; txa
=$c6					TKW_TYA                      = $c6 ; tya
=$c7					TKW_TXS                      = $c7 ; txs
=$c8					TKW_TAY                      = $c8 ; tay
=$c9					TKW_TAX                      = $c9 ; tax
=$ca					TKW_CLV                      = $ca ; clv
=$cb					TKW_TSX                      = $cb ; tsx
=$cc					TKW_INY                      = $cc ; iny
=$cd					TKW_DEX                      = $cd ; dex
=$ce					TKW_CLD                      = $ce ; cld
=$cf					TKW_PHX                      = $cf ; phx
=$d0					TKW_INX                      = $d0 ; inx
=$d1					TKW_NOP                      = $d1 ; nop
=$d2					TKW_SED                      = $d2 ; sed
=$d3					TKW_PLX                      = $d3 ; plx
=$86					TKW_VPOKE                    = $86 ; vpoke
=$87					TKW_VDOKE                    = $87 ; vdoke
=$88					TKW_VLOAD                    = $88 ; vload
=$89					TKW_MODE                     = $89 ; mode
=$8a					TKW_PALETTE                  = $8a ; palette
=$8b					TKW_SPRITE                   = $8b ; sprite
=$86					TKW_VPEEKLPAREN              = $86 ; vpeek(
=$87					TKW_VDEEKLPAREN              = $87 ; vdeek(
=$88					TKW_SPRITEPERIODXLPAREN      = $88 ; sprite.x(
=$89					TKW_SPRITEPERIODYLPAREN      = $89 ; sprite.y(
=$8a					TKW_HITLPAREN                = $8a ; hit(

;******  Return to file: header/03data.inc

=$3a					TYPE_INT =		($3A) 						; type bytes that end identifier.
=$3b					TYPE_INTARRAY =	($3B)
=$3c					TYPE_STR =		($3C)
=$3d					TYPE_STRARRAY =	($3D)
=$3e					TYPE_FLOAT =	($3E)
=$3f					TYPE_FLOATARRAY=($3F)

;******  Processing file: header/../generated/asmconst.inc

=$94					TKA_GROUP1 = $94
=$9c					TKA_GROUP2 = $9c
=$ae					TKA_GROUP3 = $ae
=$b7					TKA_GROUP4 = $b7
=$d4					TKA_END4 = $d4

;******  Return to file: header/03data.inc


;******  Return to file: basic.asm


;******  Processing file: header/header.inc


;******  Return to file: basic.asm


;******  Processing file: assembler/asmconst.inc

=0					AMD_IMM		= 0					; Immediate mode.
=1					AMD_ZERO 	= 1					; Zero Page
=2					AMD_ACCIMP	= 2					; Accumulator/Implied
=3					AMD_ABS 	= 3					; Absolute
=4					AMD_ZEROINDY= 4					; Zero Indirect,Y
=5					AMD_ZEROX 	= 5					; Zero Page,X
=6					AMD_ABSY 	= 6					; Absolute,Y
=7					AMD_ABSX 	= 7					; Absolute,X
=8					AMD_ZEROIND = 8					; Zero Indirect
=9					AMD_ZEROY 	= 9					; Zero Page,Y
=10					AMD_ABSIND 	= 10				; Absolute Indirect
=11					AMD_ABSINDX	= 11				; Absolute Indirect Indexed
=12					AMD_REL		= 12				; Relative
=13					AMD_ZEROINDX= 13 				; Zero Indirect,X

;******  Return to file: basic.asm


;******  Processing file: assembler/assembler.inc


;******  Return to file: basic.asm


;******  Processing file: device/device.inc


;******  Return to file: basic.asm


;******  Processing file: error/error.inc


;******  Return to file: basic.asm


;******  Processing file: error/errorhandler.inc


;******  Processing file: error/../generated/errorid.inc

=1					ErrorID_Missing = 1 ; Feature not Present
=2					ErrorID_Syntax = 2 ; Syntax Error
=3					ErrorID_NoModule = 3 ; Module disabled
=4					ErrorID_Assert = 4 ; Assertion failed
=5					ErrorID_DivZero = 5 ; Divide By Zero
=6					ErrorID_Stop = 6 ; Stop
=7					ErrorID_BadType = 7 ; Type Mismatch
=8					ErrorID_BadValue = 8 ; Illegal Value
=9					ErrorID_MissingRP = 9 ; Missing right bracket
=10					ErrorID_MissingComma = 10 ; Missing comma
=11					ErrorID_NoReference = 11 ; Missing reference
=12					ErrorID_LineNumber = 12 ; Line Number not found
=13					ErrorID_StrLen = 13 ; String too long
=14					ErrorID_ReturnErr = 14 ; RETURN without GOSUB
=15					ErrorID_UntilErr = 15 ; UNTIL without REPEAT
=16					ErrorID_NextErr = 16 ; NEXT without FOR
=17					ErrorID_WendErr = 17 ; WEND without WHILE
=18					ErrorID_endprocErr = 18 ; ENDPROC without PROC
=19					ErrorID_BadIndex = 19 ; Bad NEXT index
=20					ErrorID_Struct = 20 ; Structures nested wrong
=21					ErrorID_NoAuto = 21 ; Cannot create variable
=22					ErrorID_RetStack = 22 ; Return stack out of space
=23					ErrorID_NoProc = 23 ; Unknown Procedure
=24					ErrorID_Params = 24 ; Parameters do not match
=25					ErrorID_DupArray = 25 ; Array already defined
=26					ErrorID_NotArray = 26 ; DIM requires array
=27					ErrorID_ArrayIndex = 27 ; Bad array index
=28					ErrorID_ArrayDepth = 28 ; Wrong number of array indices
=29					ErrorID_DataError = 29 ; Out of data
=30					ErrorID_Tokenise = 30 ; Cannot tokenise line
=31					ErrorID_Save = 31 ; Save failed
=32					ErrorID_Load = 32 ; Load failed
=33					ErrorID_Break = 33 ; Break
=34					ErrorID_Memory = 34 ; Out of memory
=35					ErrorID_NumStack = 35 ; Expression too complex
=36					ErrorID_Assembler = 36 ; Bad Operand/Mode
=37					ErrorID_Branch = 37 ; Branch out of range
=38					ErrorID_Label = 38 ; Label changed value
=39					ErrorID_NoSprite = 39 ; No Sprite Selected

;******  Return to file: error/errorhandler.inc


;******  Return to file: basic.asm


;******  Processing file: extension/extension.inc


;******  Return to file: basic.asm


;******  Processing file: extension/option_x16/x16const.inc

=64					X16MaxImages = 64 							; max # of sprite images.

;******  Return to file: basic.asm


;******  Processing file: floatingpoint/float.inc

=5					FloatEmbeddedSize = 5

;******  Return to file: basic.asm


;******  Processing file: floatingpoint/floatingpoint.inc


;******  Return to file: basic.asm


;******  Processing file: interaction/interaction.inc


;******  Return to file: basic.asm


;******  Processing file: main/main.inc


;******  Return to file: basic.asm


;******  Processing file: string/functions/memory.inc

=252					MaxStringSize = 252

;******  Return to file: basic.asm


;******  Processing file: string/string.inc


;******  Return to file: basic.asm


;******  Processing file: tokeniser/detokenise/colouring.inc

=$84					LTYLineNumber = $84
=$82					LTYPunctuation = $82
=$87					LTYIdentifier = $87
=$86					LTYConstant = $86
=$83					LTYKeyword = $83
=$81					LTYString = $81

;******  Return to file: basic.asm


;******  Processing file: tokeniser/tokeniser.inc


;******  Return to file: basic.asm


;******  Processing file: variable/variable.inc


;******  Return to file: basic.asm


;******  Processing file: footer/footer.inc


;******  Return to file: basic.asm

.1000					section_start_header:

;******  Processing file: header/header.asm


;******  Processing file: header/00start.asm

.1000					Start:
.1000	4c 0a 10	jmp $100a			jmp 	GoColdStart 				; +0 	boot BASIC
.1003	4c 58 10	jmp $1058			jmp 	GoTokTest					; +3 	run tokeniser test code.
>1006	f3 3d						.word 	TokenTableAddress
.1008							else
>1008	00 00						.word 	0
.100a					GoColdStart:
.100a	a9 00		lda #$00			lda 	#(programMemory) & $FF
.100c	8d c8 0a	sta $0ac8			sta 	basePage
.100f	a9 46		lda #$46			lda 	#(programMemory) >> 8
.1011	8d c9 0a	sta $0ac9			sta 	1+(basePage)
.1014	a9 00		lda #$00			lda 	#(endOfMemory) & $FF
.1016	8d cc 0a	sta $0acc			sta 	endMemory
.1019	a9 9f		lda #$9f			lda 	#(endOfMemory) >> 8
.101b	8d cd 0a	sta $0acd			sta 	1+(endMemory)
.101e	20 26 10	jsr $1026			jsr 	InitialiseAll 				; initialise everything.
.1021	a2 02		ldx #$02		ldx	#2
.1023	20 ca 1f	jsr $1fca		jsr	interactionHandler

;******  Processing file: header/../generated/initialiseall.asm

.1026					InitialiseAll:
.1026	a9 00		lda #$00		lda #0
.1028	a2 00		ldx #$00		ldx	#0
.102a	20 b4 13	jsr $13b4		jsr	assemblerHandler
.102d	a9 00		lda #$00		lda #0
.102f	a2 00		ldx #$00		ldx	#0
.1031	20 f6 14	jsr $14f6		jsr	deviceHandler
.1034	a9 00		lda #$00		lda #0
.1036	a2 00		ldx #$00		ldx	#0
.1038	20 ca 1f	jsr $1fca		jsr	interactionHandler
.103b	a9 00		lda #$00		lda #0
.103d	a2 00		ldx #$00		ldx	#0
.103f	20 64 36	jsr $3664		jsr	mainHandler
.1042	a9 00		lda #$00		lda #0
.1044	a2 00		ldx #$00		ldx	#0
.1046	20 21 39	jsr $3921		jsr	stringHandler
.1049	a9 00		lda #$00		lda #0
.104b	a2 00		ldx #$00		ldx	#0
.104d	20 60 41	jsr $4160		jsr	tokeniserHandler
.1050	a9 00		lda #$00		lda #0
.1052	a2 00		ldx #$00		ldx	#0
.1054	20 31 45	jsr $4531		jsr	variableHandler
.1057	60		rts			rts

;******  Return to file: header/00start.asm

.1058					GoTokTest:
.1058	a2 06		ldx #$06		ldx	#6
.105a	20 60 41	jsr $4160		jsr	tokeniserHandler

;******  Return to file: header/header.asm


;******  Return to file: basic.asm

.105d					section_end_header:
.105d					section_start_assembler:

;******  Processing file: assembler/assembler.asm


;******  Processing file: assembler/asmoperand.asm

.105d					AsmGetOperand:
.105d	a2 00		ldx #$00			ldx 	#0 							; clear the operand.
.105f	8a		txa				txa
.1060	95 50		sta $50,x			sta 	esInt0,x
.1062	95 58		sta $58,x			sta 	esInt1,x
.1064	95 60		sta $60,x			sta 	esInt2,x
.1066	95 68		sta $68,x			sta 	esInt3,x
.1068	b1 28		lda ($28),y			lda 	(codePtr),y 				; first into X
.106a	aa		tax				tax
.106b	a9 02		lda #$02			lda 	#AMD_ACCIMP
.106d	e0 80		cpx #$80			cpx 	#TOK_EOL 					; if end of line or colon, return implied mode.
.106f	f0 41		beq $10b2			beq 	_AGOExit
.1071	e0 ca		cpx #$ca			cpx 	#TKW_COLON
.1073	f0 3d		beq $10b2			beq 	_AGOExit
.1075	c8		iny				iny 								; consume the token
.1076	a9 00		lda #$00			lda 	#AMD_IMM
.1078	e0 e6		cpx #$e6			cpx 	#TKW_HASH 					; if a hash present, then immediate mode.
.107a	f0 2d		beq $10a9			beq		_AGOEvalExit 				; with an operand.
.107c	e0 a4		cpx #$a4			cpx 	#TKW_LPAREN 				; left bracket ?
.107e	f0 40		beq $10c0			beq 	_AGOIndirect
.1080	e0 01		cpx #$01			cpx 	#$01 						; is it "A" e.g. the variable A.
.1082	d0 0b		bne $108f			bne 	_AGOZeroPage1 				; if not it is zero zero,x zero,y, unpick 1 iny
.1084	b1 28		lda ($28),y			lda 	(codePtr),y 				; get the second character & consume it
.1086	c8		iny				iny
.1087	aa		tax				tax
.1088	a9 02		lda #$02			lda 	#AMD_ACCIMP 				; and return Acc/Implied if it is just A
.108a	e0 3a		cpx #$3a			cpx 	#$3A
.108c	f0 24		beq $10b2			beq 	_AGOExit
.108e	88		dey				dey 								; unpick 2 iny
.108f					_AGOZeroPage1:
.108f	88		dey				dey
.1090	a9 00		lda #$00			lda 	#0 							; get the address into esInt0/1
.1092	a2 0a		ldx #$0a		ldx	#10
.1094	20 64 36	jsr $3664		jsr	mainHandler
.1097	20 ef 10	jsr $10ef			jsr 	AsmGetIndexing
.109a	a9 01		lda #$01			lda 	#AMD_ZERO
.109c	90 14		bcc $10b2			bcc 	_AGOExit
.109e	a9 05		lda #$05			lda 	#AMD_ZEROX
.10a0	e0 00		cpx #$00			cpx 	#0
.10a2	f0 0e		beq $10b2			beq 	_AGOExit
.10a4	a9 09		lda #$09			lda 	#AMD_ZEROY
.10a6	4c b2 10	jmp $10b2			jmp 	_AGOExit
.10a9					_AGOEvalExit:
.10a9	48		pha				pha
.10aa	a9 00		lda #$00			lda 	#0 							; evaluate operand in root.
.10ac	a2 0a		ldx #$0a		ldx	#10
.10ae	20 64 36	jsr $3664		jsr	mainHandler
.10b1	68		pla				pla
.10b2					_AGOExit:
.10b2	48		pha				pha 								; save the mode
.10b3	a5 60		lda $60				lda 	esInt2 						; check the operand is zero.
.10b5	05 68		ora $68				ora 	esInt3
.10b7	d0 02		bne $10bb			bne 	_AGOValue
.10b9	68		pla				pla
.10ba	60		rts				rts
.10bb					_AGOValue:
.10bb	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.10bd	20 18 15	jsr $1518		jsr	errorHandler
.10c0					_AGOIndirect:
.10c0	a9 00		lda #$00			lda 	#0 							; evaluate operand in root.
.10c2	a2 0a		ldx #$0a		ldx	#10
.10c4	20 64 36	jsr $3664		jsr	mainHandler
.10c7	b1 28		lda ($28),y			lda 	(codePtr),y 				; does ) follow ? if so might be ) or ),Y
.10c9	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.10cb	f0 11		beq $10de			beq 	_AGOIndIndY
.10cd	20 ef 10	jsr $10ef			jsr 	ASMGetIndexing 				; must be ,X)
.10d0	90 39		bcc $110b			bcc 	AGISyntax
.10d2	e0 00		cpx #$00			cpx 	#0
.10d4	d0 35		bne $110b			bne 	AGISyntax
.10d6	a2 04		ldx #$04		ldx	#4
.10d8	20 64 36	jsr $3664		jsr	mainHandler
.10db	a9 0d		lda #$0d			lda 	#AMD_ZEROINDX
.10dd	60		rts				rts
.10de					_AGOIndIndY:
.10de	c8		iny				iny
.10df	20 ef 10	jsr $10ef			jsr 	ASMGetIndexing 				; get indexing if any
.10e2	a9 08		lda #$08			lda 	#AMD_ZEROIND
.10e4	90 cc		bcc $10b2			bcc 	_AGOExit 					; none then exit
.10e6	e0 00		cpx #$00			cpx 	#0 							; must be ,Y
.10e8	f0 21		beq $110b			beq 	AGISyntax
.10ea	a9 04		lda #$04			lda 	#AMD_ZEROINDY
.10ec	4c b2 10	jmp $10b2			jmp 	_AGOExit
.10ef					AsmGetIndexing:
.10ef	b1 28		lda ($28),y			lda 	(codePtr),y 				; check for comma
.10f1	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.10f3	18		clc				clc
.10f4	d0 14		bne $110a			bne 	_AGIExit 					; no comma, return with CC
.10f6	c8		iny				iny 								; get what SHOULD be X or Y
.10f7	b1 28		lda ($28),y			lda 	(codePtr),y  				; read it
.10f9	38		sec				sec 								; subtract 6 bit ASCII of X
.10fa	e9 18		sbc #$18			sbc 	#"X" & $3F
.10fc	c9 02		cmp #$02			cmp 	#2 							; if unsigned >= 2 then error
.10fe	b0 0b		bcs $110b			bcs 	AGISyntax
.1100	aa		tax				tax 								; put in index
.1101	c8		iny				iny 								; get what follows that, should be the $3A marker
.1102	b1 28		lda ($28),y			lda 	(codePtr),y
.1104	c8		iny				iny
.1105	c9 3a		cmp #$3a			cmp 	#$3A
.1107	d0 02		bne $110b			bne 	AGISyntax
.1109	38		sec				sec 								; return CS and index mode in X
.110a					_AGIExit:
.110a	60		rts				rts
.110b					AGISyntax:
.110b	a2 02		ldx #$02			ldx 	#ErrorID_syntax
.110d	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: assembler/assembler.asm


;******  Processing file: assembler/asmwrite.asm

.0af2					finalOpcode:
>0af2							.fill 	1
.1110					AsmWriteInstruction:
.1110	8d f2 0a	sta $0af2			sta 	finalOpcode					; save opcode.
.1113	98		tya				tya
.1114	48		pha				pha
.1115	ad 38 0a	lda $0a38			lda 	SingleLetterVar+("O"-"A")*4	; check O
.1118	29 02		and #$02			and 	#2
.111a	f0 2d		beq $1149			beq 	_ASMWNoEcho 				; if zero then don't echo.
.111c	ad 3d 0a	lda $0a3d			lda 	SingleLetterVar+("P"-"A")*4+1 ; write address in P
.111f	20 84 11	jsr $1184			jsr 	AWIWriteHex
.1122	ad 3c 0a	lda $0a3c			lda 	SingleLetterVar+("P"-"A")*4
.1125	20 84 11	jsr $1184			jsr 	AWIWriteHex
.1128	ad f2 0a	lda $0af2			lda 	finalOpcode 				; write opcode
.112b	20 7d 11	jsr $117d			jsr 	AWIWriteHexSpace
.112e	e0 00		cpx #$00			cpx 	#0
.1130	f0 0e		beq $1140			beq 	_ASMWEchoExit
.1132	a5 50		lda $50				lda 	esInt0
.1134	20 7d 11	jsr $117d			jsr 	AWIWriteHexSpace
.1137	e0 01		cpx #$01			cpx 	#1
.1139	f0 05		beq $1140			beq 	_ASMWEchoExit
.113b	a5 58		lda $58				lda 	esInt1
.113d	20 7d 11	jsr $117d			jsr 	AWIWriteHexSpace
.1140					_ASMWEchoExit:
.1140	8a		txa				txa
.1141	48		pha				pha
.1142	a2 06		ldx #$06		ldx	#6
.1144	20 f6 14	jsr $14f6		jsr	deviceHandler
.1147	68		pla				pla
.1148	aa		tax				tax
.1149					_ASMWNoEcho:
.1149	ad f2 0a	lda $0af2			lda 	finalOpcode
.114c	20 64 11	jsr $1164			jsr 	AsmWriteByte
.114f	e0 00		cpx #$00			cpx 	#0
.1151	f0 0e		beq $1161			beq 	_ASMWExit
.1153	a5 50		lda $50				lda 	esInt0
.1155	20 64 11	jsr $1164			jsr 	AsmWriteByte
.1158	e0 01		cpx #$01			cpx 	#1
.115a	f0 05		beq $1161			beq 	_ASMWExit
.115c	a5 58		lda $58				lda 	esInt1
.115e	20 64 11	jsr $1164			jsr 	AsmWriteByte
.1161					_ASMWExit:
.1161	68		pla				pla
.1162	a8		tay				tay
.1163	60		rts				rts
.1164					AsmWriteByte:
.1164	a0 00		ldy #$00			ldy 	#0
.1166	48		pha				pha
.1167	ad 3c 0a	lda $0a3c			lda 	SingleLetterVar+("P"-"A")*4 ; copy address to temp0
.116a	85 2a		sta $2a				sta 	temp0
.116c	ad 3d 0a	lda $0a3d			lda 	SingleLetterVar+("P"-"A")*4+1
.116f	85 2b		sta $2b				sta 	temp0+1
.1171	68		pla				pla 								; write out the byte.
.1172	91 2a		sta ($2a),y			sta 	(temp0),y
.1174	ee 3c 0a	inc $0a3c			inc 	SingleLetterVar+("P"-"A")*4	; increment P
.1177	d0 03		bne $117c			bne 	_AWBNoCarry
.1179	ee 3d 0a	inc $0a3d			inc 	SingleLetterVar+("P"-"A")*4+1
.117c					_AWBNoCarry:
.117c	60		rts				rts
.117d					AWIWriteHexSpace:
.117d	48		pha				pha
.117e	a9 20		lda #$20			lda 	#" "
.1180	20 97 11	jsr $1197			jsr 	AWIPrintChar
.1183	68		pla				pla
.1184					AWIWriteHex:
.1184	48		pha				pha
.1185	4a		lsr a				lsr 	a
.1186	4a		lsr a				lsr 	a
.1187	4a		lsr a				lsr 	a
.1188	4a		lsr a				lsr 	a
.1189	20 8d 11	jsr $118d			jsr 	AWIPrintNibble
.118c	68		pla				pla
.118d					AWIPrintNibble:
.118d	29 0f		and #$0f			and 	#15
.118f	c9 0a		cmp #$0a			cmp 	#10
.1191	90 02		bcc $1195			bcc 	_AWIPNDigit
.1193	69 06		adc #$06			adc 	#6
.1195					_AWIPNDigit:
.1195	69 30		adc #$30			adc 	#48
.1197					AWIPrintChar:
.1197	85 32		sta $32				sta 	tempShort
.1199	8a		txa				txa
.119a	48		pha				pha
.119b	a5 32		lda $32				lda 	tempShort
.119d	a2 16		ldx #$16		ldx	#22
.119f	20 f6 14	jsr $14f6		jsr	deviceHandler
.11a2	68		pla				pla
.11a3	aa		tax				tax
.11a4	60		rts				rts

;******  Return to file: assembler/assembler.asm


;******  Processing file: assembler/assemblecmd.asm

.0af3					asmToken:
>0af3							.fill 	1
.0af4					asmMode:
>0af4							.fill 	1 							; esInt0/1
.0af5					asmBaseOpcode:
>0af5							.fill 	1
.11a5					AssembleOneInstruction:
.11a5	8d f3 0a	sta $0af3			sta 	asmToken 					; save the token
.11a8	aa		tax				tax
.11a9	bd 72 11	lda $1172,x			lda 	OpcodeTable-TKA_GROUP1,x 	; get the base opcode.
.11ac	8d f5 0a	sta $0af5			sta 	asmBaseOpcode
.11af	20 5d 10	jsr $105d			jsr 	AsmGetOperand 				; identify the address mode and operand where applicable.
.11b2	8d f4 0a	sta $0af4			sta 	asmMode
.11b5	a5 58		lda $58				lda 	esInt1 						; check if this is a three byte operand.
.11b7	d0 05		bne $11be			bne 	_AOIThreeBytes 				; if so, we have to use three byte
.11b9	20 d4 11	jsr $11d4			jsr 	AssembleAttempt 			; try to assemble token/mode/operand (2 bytes)
.11bc	b0 10		bcs $11ce			bcs 	_AOISuccess 				; worked ok.
.11be					_AOIThreeBytes:
.11be	ae f4 0a	ldx $0af4			ldx 	asmMode 					; convert mode to 3 byte version, where possible.
.11c1	bd f8 11	lda $11f8,x			lda 	AbsoluteVersionTable,x
.11c4	30 09		bmi $11cf			bmi 	_AOIError					; not possible, no equivalent.
.11c6	8d f4 0a	sta $0af4			sta 	asmMode
.11c9	20 d4 11	jsr $11d4			jsr 	AssembleAttempt 			; try to assemble token/mode/operand (3 bytes)
.11cc	90 01		bcc $11cf			bcc 	_AOIError 					; didn't work.
.11ce					_AOISuccess:
.11ce	60		rts				rts
.11cf					_AOIError:
.11cf	a2 24		ldx #$24			ldx 	#ErrorID_Assembler
.11d1	20 18 15	jsr $1518		jsr	errorHandler
.11d4					AssembleAttempt:
.11d4	20 dd 11	jsr $11dd			jsr 	_AADispatch 				; go to the code which dispatches to the appropriate
.11d7	b0 03		bcs $11dc			bcs 	_AAExit 					; exit if carry set, e.g. was successful
.11d9	20 87 13	jsr $1387			jsr 	AssembleSpecialCase
.11dc					_AAExit:
.11dc	60		rts				rts
.11dd					_AADispatch:
.11dd	ad f3 0a	lda $0af3			lda 	asmToken
.11e0	c9 b7		cmp #$b7			cmp 	#TKA_GROUP4
.11e2	b0 11		bcs $11f5			bcs 	_AAGroup4
.11e4	c9 ae		cmp #$ae			cmp 	#TKA_GROUP3
.11e6	b0 0a		bcs $11f2			bcs 	_AAGroup3
.11e8	c9 9c		cmp #$9c			cmp 	#TKA_GROUP2
.11ea	b0 03		bcs $11ef			bcs 	_AAGroup2
.11ec	4c cd 12	jmp $12cd			jmp 	AssembleGroup1
.11ef					_AAGroup2:
.11ef	4c 28 13	jmp $1328			jmp 	AssembleGroup2
.11f2					_AAGroup3:
.11f2	4c 49 13	jmp $1349			jmp 	AssembleGroup3
.11f5					_AAGroup4:
.11f5	4c 7d 13	jmp $137d			jmp 	AssembleGroup4
.11f8					AbsoluteVersionTable:
>11f8	ff						.byte	$FF 			; fail AMD_IMM
>11f9	03						.byte	AMD_ABS 		; absolute AMD_ZERO
>11fa	ff						.byte	$FF 			; fail AMD_ACCIMP
>11fb	ff						.byte	$FF 			; fail AMD_ABS
>11fc	ff						.byte 	$FF 			; fail AMD_ZEROINDY
>11fd	07						.byte	AMD_ABSX 		; absolute AMD_ZEROX
>11fe	ff						.byte	$FF 			; fail AMD_ABSY
>11ff	ff						.byte	$FF 			; fail AMD_ABSX
>1200	0a						.byte	AMD_ABSIND 		; absolute AMD_ZEROIND
>1201	06						.byte	AMD_ABSY 		; absolute AMD_ZEROY
>1202	ff						.byte	$FF 			; fail AMD_ABSIND
>1203	ff						.byte	$FF 			; fail AMD_ABSINDX
>1204	ff						.byte	$FF 			; fail AMD_REL
>1205	0b						.byte 	AMD_ABSINDX 	; absolute AMD_ZEROINDX

;******  Processing file: assembler/../generated/asmtables.inc

.1206					OpcodeTable:
>1206	01					.byte	$01			; $94 ora
>1207	21					.byte	$21			; $95 (and)
>1208	41					.byte	$41			; $96 eor
>1209	61					.byte	$61			; $97 adc
>120a	81					.byte	$81			; $98 sta
>120b	a1					.byte	$a1			; $99 lda
>120c	c1					.byte	$c1			; $9a cmp
>120d	e1					.byte	$e1			; $9b sbc
>120e	02					.byte	$02			; $9c asl
>120f	22					.byte	$22			; $9d rol
>1210	42					.byte	$42			; $9e lsr
>1211	62					.byte	$62			; $9f ror
>1212	82					.byte	$82			; $a0 stx
>1213	a2					.byte	$a2			; $a1 ldx
>1214	c2					.byte	$c2			; $a2 dec
>1215	e2					.byte	$e2			; $a3 inc
>1216	60					.byte	$60			; $a4 stz
>1217	20					.byte	$20			; $a5 bit
>1218	80					.byte	$80			; $a6 sty
>1219	a0					.byte	$a0			; $a7 ldy
>121a	c0					.byte	$c0			; $a8 cpy
>121b	e0					.byte	$e0			; $a9 cpx
>121c	00					.byte	$00			; $aa tsb
>121d	10					.byte	$10			; $ab trb
>121e	14					.byte	$14			; $ac jsr
>121f	40					.byte	$40			; $ad jmp
>1220	10					.byte	$10			; $ae bpl
>1221	30					.byte	$30			; $af bmi
>1222	50					.byte	$50			; $b0 bvc
>1223	70					.byte	$70			; $b1 bvs
>1224	90					.byte	$90			; $b2 bcc
>1225	b0					.byte	$b0			; $b3 bcs
>1226	d0					.byte	$d0			; $b4 bne
>1227	f0					.byte	$f0			; $b5 beq
>1228	80					.byte	$80			; $b6 bra
>1229	00					.byte	$00			; $b7 brk
>122a	08					.byte	$08			; $b8 php
>122b	18					.byte	$18			; $b9 clc
>122c	28					.byte	$28			; $ba plp
>122d	38					.byte	$38			; $bb sec
>122e	40					.byte	$40			; $bc rti
>122f	48					.byte	$48			; $bd pha
>1230	58					.byte	$58			; $be cli
>1231	5a					.byte	$5a			; $bf phy
>1232	60					.byte	$60			; $c0 rts
>1233	68					.byte	$68			; $c1 pla
>1234	78					.byte	$78			; $c2 sei
>1235	7a					.byte	$7a			; $c3 ply
>1236	88					.byte	$88			; $c4 dey
>1237	8a					.byte	$8a			; $c5 txa
>1238	98					.byte	$98			; $c6 tya
>1239	9a					.byte	$9a			; $c7 txs
>123a	a8					.byte	$a8			; $c8 tay
>123b	aa					.byte	$aa			; $c9 tax
>123c	b8					.byte	$b8			; $ca clv
>123d	ba					.byte	$ba			; $cb tsx
>123e	c8					.byte	$c8			; $cc iny
>123f	ca					.byte	$ca			; $cd dex
>1240	d8					.byte	$d8			; $ce cld
>1241	da					.byte	$da			; $cf phx
>1242	e8					.byte	$e8			; $d0 inx
>1243	ea					.byte	$ea			; $d1 nop
>1244	f8					.byte	$f8			; $d2 sed
>1245	fa					.byte	$fa			; $d3 plx
.1246					Group2OpcodeAvailability:
>1246	ae					.byte	$ae			; $9c asl $02
>1247	ae					.byte	$ae			; $9d rol $22
>1248	ae					.byte	$ae			; $9e lsr $42
>1249	ae					.byte	$ae			; $9f ror $62
>124a	0a					.byte	$0a			; $a0 stx $82
>124b	0b					.byte	$0b			; $a1 ldx $a2
>124c	aa					.byte	$aa			; $a2 dec $c2
>124d	aa					.byte	$aa			; $a3 inc $e2
>124e	22					.byte	$22			; $a4 stz $60
>124f	aa					.byte	$aa			; $a5 bit $20
>1250	2a					.byte	$2a			; $a6 sty $80
>1251	ab					.byte	$ab			; $a7 ldy $a0
>1252	2b					.byte	$2b			; $a8 cpy $c0
>1253	0b					.byte	$0b			; $a9 cpx $e0
>1254	0a					.byte	$0a			; $aa tsb $00
>1255	0a					.byte	$0a			; $ab trb $10
>1256	08					.byte	$08			; $ac jsr $14
>1257	08					.byte	$08			; $ad jmp $40
.1258					AssemblerSpecialCases:
>1258	ad 0a 6c				.byte	$ad,10,$6c		; jmp (abs)
>125b	ad 0b 7c				.byte	$ad,11,$7c		; jmp (abs,x)
>125e	a1 06 be				.byte	$a1,6,$be		; ldx abs,y
>1261	a1 09 b6				.byte	$a1,9,$b6		; ldx zp,y
>1264	a0 09 96				.byte	$a0,9,$96		; stx zp,y
>1267	a3 02 1a				.byte	$a3,2,$1a		; inc acc
>126a	a2 02 3a				.byte	$a2,2,$3a		; dec acc
>126d	a5 00 89				.byte	$a5,0,$89		; bit #
>1270	a4 03 9c				.byte	$a4,3,$9c		; stz abs
>1273	a4 07 9e				.byte	$a4,7,$9e		; stz abs,x
>1276	00					.byte	0

;******  Return to file: assembler/assemblecmd.asm


;******  Return to file: assembler/assembler.asm


;******  Processing file: assembler/assemblelabel.asm

.1277					AssembleLabel:
.1277	b1 28		lda ($28),y			lda 	(codePtr),y 				; check it's followed by a variable name.
.1279	c9 3a		cmp #$3a			cmp 	#$3A
.127b	b0 4b		bcs $12c8			bcs 	_ALSyntax
.127d	a9 00		lda #$00			lda 	#0							; get a variable name on to stack:0
.127f	a2 02		ldx #$02		ldx	#2
.1281	20 31 45	jsr $4531		jsr	variableHandler
.1284	a5 48		lda $48				lda 	esType 						; check integer reference
.1286	c9 80		cmp #$80			cmp 	#$80
.1288	d0 3e		bne $12c8			bne 	_ALSyntax
.128a	a5 50		lda $50				lda 	esInt0 						; copy that reference address to temp0
.128c	85 2a		sta $2a				sta 	temp0
.128e	a5 58		lda $58				lda 	esInt1
.1290	85 2b		sta $2b				sta 	temp0+1
.1292	98		tya				tya
.1293	48		pha				pha
.1294	ad 38 0a	lda $0a38			lda 	SingleLetterVar+("O"-"A")*4	; are we in Pass 2
.1297	4a		lsr a				lsr 	a
.1298	90 11		bcc $12ab			bcc 	_ALWrite
.129a	a0 00		ldy #$00			ldy 	#0
.129c	ad 3c 0a	lda $0a3c			lda 	SingleLetterVar+("P"-"A")*4 ; compare the value in P to the variable
.129f	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.12a1	d0 20		bne $12c3			bne 	_ALChanged
.12a3	c8		iny				iny
.12a4	ad 3d 0a	lda $0a3d			lda 	SingleLetterVar+("P"-"A")*4+1
.12a7	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.12a9	d0 18		bne $12c3			bne 	_ALChanged
.12ab					_ALWrite:
.12ab	a0 00		ldy #$00			ldy 	#0
.12ad	ad 3c 0a	lda $0a3c			lda 	SingleLetterVar+("P"-"A")*4 ; copy the value in P into the variable
.12b0	91 2a		sta ($2a),y			sta 	(temp0),y
.12b2	ad 3d 0a	lda $0a3d			lda 	SingleLetterVar+("P"-"A")*4+1
.12b5	c8		iny				iny
.12b6	91 2a		sta ($2a),y			sta 	(temp0),y
.12b8	a9 00		lda #$00			lda 	#0
.12ba	c8		iny				iny
.12bb	91 2a		sta ($2a),y			sta 	(temp0),y
.12bd	c8		iny				iny
.12be	91 2a		sta ($2a),y			sta 	(temp0),y
.12c0	68		pla				pla
.12c1	a8		tay				tay
.12c2	60		rts				rts
.12c3					_ALChanged:
.12c3	a2 26		ldx #$26			ldx 	#ErrorID_Label
.12c5	20 18 15	jsr $1518		jsr	errorHandler
.12c8					_ALSyntax:
.12c8	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.12ca	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: assembler/assembler.asm


;******  Processing file: assembler/subgroup.asm

.12cd					AssembleGroup1:
.12cd	ad f3 0a	lda $0af3			lda 	asmToken 					; firstly, we throw out STA immediate
.12d0	c9 98		cmp #$98			cmp 	#TKW_STA
.12d2	d0 07		bne $12db			bne 	_AG1NotStoreImm
.12d4	ad f4 0a	lda $0af4			lda 	asmMode
.12d7	c9 00		cmp #$00			cmp 	#AMD_IMM
.12d9	f0 2c		beq $1307			beq 	AG1ModeError
.12db					_AG1NotStoreImm:
.12db	ae f4 0a	ldx $0af4			ldx 	asmMode						; get mode into X.
.12de	bd 0c 13	lda $130c,x			lda		AMDOperandSize,X 			; get the size of the operand and push on stack
.12e1	48		pha				pha
.12e2	f0 23		beq $1307			beq 	AG1ModeError 				; if the size is zero, the mode must be Accumulator
.12e4	e0 00		cpx #$00			cpx 	#0 							; if the mode is zero, e.g. immediate
.12e6	d0 02		bne $12ea			bne 	_AG1NotImmediate
.12e8	a2 02		ldx #$02			ldx 	#2 							; then we use offset 2 here. This is how the 6502
.12ea					_AG1NotImmediate:
.12ea	e0 0d		cpx #$0d			cpx 	#AMD_ZEROINDX 				; (zero,x) uses slot 0.
.12ec	d0 02		bne $12f0			bne 	_AG1NotZX
.12ee	a2 00		ldx #$00			ldx 	#0
.12f0					_AG1NotZX:
.12f0	68		pla				pla 								; restore length
.12f1	e0 09		cpx #$09			cpx 	#9 							; anything > 8 fails.
.12f3	b0 10		bcs $1305			bcs 	AG1Fail
.12f5					AG1ReturnValue:
.12f5	85 32		sta $32				sta 	tempShort 					; save size of operand
.12f7	18		clc				clc
.12f8	bd 1a 13	lda $131a,x			lda 	AMDOffsetFromBase,X 		; get the offset for the address mode.
.12fb	6d f5 0a	adc $0af5			adc 	asmBaseOpcode 				; add the base opcode.
.12fe	a6 32		ldx $32				ldx 	tempShort 					; length in X
.1300	20 10 11	jsr $1110			jsr 	AsmWriteInstruction 		; output instruction.
.1303	38		sec				sec
.1304	60		rts				rts
.1305					AG1Fail:
.1305	18		clc				clc
.1306	60		rts				rts
.1307					AG1ModeError:
.1307	a2 24		ldx #$24			ldx 	#ErrorID_Assembler
.1309	20 18 15	jsr $1518		jsr	errorHandler
.130c					AMDOperandSize:
>130c	01 01 00 02					.byte 	1,1,0,2
>1310	01 01 02 02					.byte 	1,1,2,2
>1314	01 01 02 02					.byte 	1,1,2,2
>1318	01 01						.byte 	1,1
.131a					AMDOffsetFromBase:
>131a	00 04 08 0c					.byte 	0,4,8,12
>131e	10 14 18 1c					.byte	16,20,24,28
>1322	11 00 00 00					.byte 	17,0,0,0
>1326	00 00						.byte 	0,0
.1328					AssembleGroup2:
.1328	ad f4 0a	lda $0af4			lda 	asmMode 					; get the mode; if >= 8 cannot be a legit group 2
.132b	c9 08		cmp #$08			cmp 	#8
.132d	b0 18		bcs $1347			bcs 	_AG2Fail
.132f	85 2a		sta $2a				sta 	temp0 						; save in temp9
.1331	ae f3 0a	ldx $0af3			ldx 	asmToken					; get token in X, then get the availability flags for it
.1334	bd aa 11	lda $11aa,x			lda 	Group2OpcodeAvailability-TKA_GROUP2,x
.1337					_AG2Shift:
.1337	4a		lsr a				lsr 	a
.1338	c6 2a		dec $2a				dec 	temp0
.133a	10 fb		bpl $1337			bpl 	_AG2Shift
.133c	90 09		bcc $1347			bcc 	_AG2Fail 					; cannot do that instruction w/that opcode.
.133e	ae f4 0a	ldx $0af4			ldx  	asmMode 					; mode in X
.1341	bd 0c 13	lda $130c,x			lda		AMDOperandSize,X 			; get the size of the operand in A
.1344	4c f5 12	jmp $12f5			jmp 	AG1ReturnValue 				; and use that with Group 1's exit code
.1347					_AG2Fail:
.1347	18		clc				clc
.1348	60		rts				rts
.1349					AssembleGroup3:
.1349	ad 38 0a	lda $0a38			lda 	SingleLetterVar+("O"-"A")*4	; check bit 0 (pass) of O
.134c	4a		lsr a				lsr 	a
.134d	a9 00		lda #$00			lda 	#0 							; if clear, e.g. pass 1, use default zero.
.134f	90 21		bcc $1372			bcc 	_AG3Default
.1351	38		sec				sec	 								; calculate branch offset
.1352	a5 50		lda $50				lda		esInt0
.1354	ed 3c 0a	sbc $0a3c			sbc 	SingleLetterVar+("P"-"A")*4
.1357	aa		tax				tax
.1358	a5 58		lda $58				lda		esInt1
.135a	ed 3d 0a	sbc $0a3d			sbc 	SingleLetterVar+("P"-"A")*4+1
.135d	85 58		sta $58				sta 	esInt1
.135f	8a		txa				txa 								; add 126, now 128 too many.
.1360	18		clc				clc 								; we can use this to check the range
.1361	69 7e		adc #$7e			adc 	#126
.1363	85 50		sta $50				sta 	esInt0
.1365	90 02		bcc $1369			bcc 	_AG3NoCarry
.1367	e6 58		inc $58				inc 	esInt1
.1369					_AG3NoCarry:
.1369	a5 58		lda $58				lda 	esInt1 						; check in range.
.136b	d0 0b		bne $1378			bne 	_AG3Range
.136d	a5 50		lda $50				lda 	esInt0 						; fix up branch distance
.136f	38		sec				sec
.1370	e9 80		sbc #$80			sbc 	#128
.1372					_AG3Default:
.1372	85 50		sta $50				sta 	esInt0
.1374					_AG3ExitOk:
.1374	a2 01		ldx #$01			ldx 	#1 							; one opcode, use AG4 Code
.1376	d0 07		bne $137f			bne 	AG4Write
.1378					_AG3Range:
.1378	a2 25		ldx #$25			ldx 	#ErrorID_Branch
.137a	20 18 15	jsr $1518		jsr	errorHandler
.137d					AssembleGroup4:
.137d	a2 00		ldx #$00			ldx 	#0 							; no parameters in the opcode.
.137f					AG4Write:
.137f	ad f5 0a	lda $0af5			lda 	asmBaseOpcode				; the opcode is the opcode base.
.1382	20 10 11	jsr $1110			jsr 	AsmWriteInstruction 		; output instruction.
.1385	38		sec				sec
.1386	60		rts				rts
.1387					AssembleSpecialCase:
.1387	a2 00		ldx #$00			ldx 	#0
.1389					_ASCScan:
.1389	bd 58 12	lda $1258,x			lda 	AssemblerSpecialCases,x 	; scan token and mode for match
.138c	cd f3 0a	cmp $0af3			cmp 	asmToken
.138f	d0 08		bne $1399			bne 	_ASCNext
.1391	bd 59 12	lda $1259,x			lda 	AssemblerSpecialCases+1,x
.1394	cd f4 0a	cmp $0af4			cmp 	asmMode
.1397	f0 0a		beq $13a3			beq 	_ASCFound
.1399					_ASCNext:
.1399	e8		inx				inx									; next entry
.139a	e8		inx				inx
.139b	e8		inx				inx
.139c	bd 58 12	lda $1258,x			lda 	AssemblerSpecialCases,x 	; until table ends
.139f	d0 e8		bne $1389			bne 	_ASCScan
.13a1	18		clc				clc
.13a2	60		rts				rts
.13a3					_ASCFound:
.13a3	bd 5a 12	lda $125a,x			lda 	AssemblerSpecialCases+2,x 	; get the new opcode.
.13a6	48		pha				pha
.13a7	ae f4 0a	ldx $0af4			ldx  	asmMode 					; mode in X
.13aa	bd 0c 13	lda $130c,x			lda		AMDOperandSize,X 			; get the size of the operand in X
.13ad	aa		tax				tax
.13ae	68		pla				pla 								; opcode back
.13af	20 10 11	jsr $1110			jsr 	AsmWriteInstruction 		; output instruction.
.13b2	38		sec				sec
.13b3	60		rts				rts

;******  Return to file: assembler/assembler.asm

.13b4					assemblerHandler:
.13b4	7c b7 13	jmp ($13b7,x)			jmp 	(assemblerVectors,x)
.13b7					assemblerVectors:
>13b7	bd 13					.word _DummyControlHandler ; index 0
>13b9	a5 11					.word AssembleOneInstruction ; index 2
>13bb	77 12					.word AssembleLabel        ; index 4
.13bd					_DummyControlHandler:
.13bd	60		rts			rts

;******  Return to file: basic.asm

.13be					section_end_assembler:
.13be					section_start_device:

;******  Processing file: device/device.asm


;******  Processing file: device/option_x16/x16break.asm

.13be					X16Break:
.13be	20 e1 ff	jsr $ffe1			jsr 	$FFE1
.13c1	f0 01		beq $13c4			beq 	_IsBreak
.13c3	60		rts				rts
.13c4					_IsBreak:
.13c4	a2 21		ldx #$21			ldx 	#ErrorID_Break
.13c6	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: device/device.asm


;******  Processing file: device/option_x16/x16file.asm

.13c9					ExternSave:
.13c9	98		tya				tya
.13ca	48		pha				pha
.13cb	20 19 14	jsr $1419			jsr 	ExternGetLength 			; get length of file into A name YX
.13ce	20 bd ff	jsr $ffbd			jsr 	$FFBD 						; set name
.13d1	a9 01		lda #$01			lda 	#1
.13d3	a2 08		ldx #$08			ldx 	#8	 						; device #8
.13d5	a0 00		ldy #$00			ldy 	#0
.13d7	20 ba ff	jsr $ffba			jsr 	$FFBA 						; set LFS
.13da	a5 51		lda $51				lda 	esInt0+1 					; copy start of save address to temp0
.13dc	85 2a		sta $2a				sta 	temp0
.13de	a5 59		lda $59				lda 	esInt1+1
.13e0	85 2b		sta $2b				sta 	temp0+1
.13e2	a6 52		ldx $52				ldx 	esInt0+2 					; end address
.13e4	a4 5a		ldy $5a				ldy 	esInt1+2
.13e6	a9 2a		lda #$2a			lda 	#temp0 						; ref to start address
.13e8	20 d8 ff	jsr $ffd8			jsr 	$FFD8 						; save
.13eb	b0 03		bcs $13f0			bcs 	_ESSave
.13ed	68		pla				pla
.13ee	a8		tay				tay
.13ef	60		rts				rts
.13f0					_ESSave:
.13f0	a2 1f		ldx #$1f			ldx 	#ErrorID_Save
.13f2	20 18 15	jsr $1518		jsr	errorHandler
.13f5					ExternLoad:
.13f5	98		tya				tya
.13f6	48		pha				pha
.13f7	20 19 14	jsr $1419			jsr 	ExternGetLength 			; get length of file into A name YX
.13fa	20 bd ff	jsr $ffbd			jsr 	$FFBD 						; set name
.13fd	a9 01		lda #$01			lda 	#1
.13ff	a2 08		ldx #$08			ldx 	#8	 						; device #8
.1401	a0 00		ldy #$00			ldy 	#0
.1403	20 ba ff	jsr $ffba			jsr 	$FFBA 						; set LFS
.1406	a6 51		ldx $51				ldx 	esInt0+1 					; load address
.1408	a4 59		ldy $59				ldy 	esInt1+1
.140a	a9 00		lda #$00			lda 	#0 							; load command
.140c	20 d5 ff	jsr $ffd5			jsr 	$FFD5
.140f	b0 03		bcs $1414			bcs 	_ESLoad
.1411	68		pla				pla
.1412	a8		tay				tay
.1413	60		rts				rts
.1414					_ESLoad:
.1414	a2 20		ldx #$20			ldx 	#ErrorID_Load
.1416	20 18 15	jsr $1518		jsr	errorHandler
.1419					ExternGetLength:
.1419	a5 50		lda $50				lda 	esInt0 						; length into A.
.141b	85 2a		sta $2a				sta 	temp0
.141d	a5 58		lda $58				lda 	esInt1
.141f	85 2b		sta $2b				sta 	temp0+1
.1421	a0 00		ldy #$00			ldy 	#0
.1423	b1 2a		lda ($2a),y			lda 	(temp0),y
.1425	a6 50		ldx $50				ldx 	esInt0 						; name into YX
.1427	a4 58		ldy $58				ldy 	esInt1
.1429	e8		inx				inx 								; advance over the length pointer.
.142a	d0 01		bne $142d			bne 	_ESNoCarry
.142c	c8		iny				iny
.142d					_ESNoCarry:
.142d	60		rts				rts

;******  Return to file: device/device.asm


;******  Processing file: device/option_x16/x16io.asm

=240					MaxLineInputSize = 240
.0af6					bufferCount:
>0af6							.fill 	0
.0af6					bufferStorage:
>0af6							.fill 	MaxLineInputSize
.142e					IOControlHandler:
.142e	c9 00		cmp #$00			cmp 	#0
.1430	d0 12		bne $1444			bne		_CHExit
.1432	a9 0f		lda #$0f			lda 	#15 						; switch to upper/lower case mode
.1434	20 5d 14	jsr $145d			jsr 	IOPrintChar
.1437	a9 02		lda #$02			lda 	#2 							; green on black and clear screen
.1439	20 89 14	jsr $1489			jsr 	IOInk
.143c	a9 00		lda #$00			lda 	#0
.143e	20 9d 14	jsr $149d			jsr 	IOPaper
.1441	20 45 14	jsr $1445			jsr 	IOClearScreen
.1444					_CHExit:
.1444	60		rts				rts
.1445					IOClearScreen:
.1445	48		pha				pha
.1446	a9 93		lda #$93			lda	 	#147 						; char code $93 clears screen
.1448	20 5d 14	jsr $145d			jsr 	IOPrintChar
.144b	68		pla				pla
.144c	60		rts				rts
.144d					IONewLine:
.144d	48		pha				pha
.144e	a9 0d		lda #$0d			lda 	#13
.1450	20 5d 14	jsr $145d			jsr 	IOPrintChar
.1453	68		pla				pla
.1454	60		rts				rts
.1455					IOTab:
.1455	48		pha				pha
.1456	a9 20		lda #$20			lda 	#32
.1458	20 5d 14	jsr $145d			jsr 	IOPrintChar
.145b	68		pla				pla
.145c	60		rts				rts
.145d					IOPrintAscii:
.145d					IOPrintChar:
.145d	aa		tax				tax 								; save in X so we can save Y
.145e	5a		phy				phy
.145f	8a		txa				txa
.1460	c9 08		cmp #$08			cmp 	#8 							; make BS (8) onto CHR$(14) which is the
.1462	d0 02		bne $1466			bne 	_IOPCNotBS 					; Commodore/X16 backspace code.
.1464	a9 14		lda #$14			lda 	#$14
.1466					_IOPCNotBS:
.1466	20 d2 ff	jsr $ffd2			jsr 	$FFD2 						; CBM OS Call.
.1469	7a		ply				ply
.146a	60		rts				rts
.146b					IOInkey:
.146b	98		tya				tya
.146c	48		pha				pha
.146d	20 e4 ff	jsr $ffe4			jsr 	$FFE4
.1470	85 32		sta $32				sta 	tempShort
.1472	68		pla				pla
.1473	a8		tay				tay
.1474	a5 32		lda $32				lda 	tempShort					; no key pressed.
.1476	f0 10		beq $1488			beq 	_IOIExit
.1478	c9 0d		cmp #$0d			cmp 	#13 						; allow CR (13)
.147a	f0 0c		beq $1488			beq 	_IOIExit
.147c	c9 14		cmp #$14			cmp 	#$14 						; backspace code ($14) returns 8.
.147e	f0 06		beq $1486			beq 	_IOIBackspace
.1480	c9 20		cmp #$20			cmp 	#32 						; no other control allowed.
.1482	90 e7		bcc $146b			bcc 	IOInkey
.1484	b0 02		bcs $1488			bcs 	_IOIExit
.1486					_IOIBackspace:
.1486	a9 08		lda #$08			lda 	#8 							; return chr(8)
.1488					_IOIExit:
.1488	60		rts				rts
.1489					IOInk:
.1489	48		pha				pha
.148a	29 07		and #$07			and 	#7 							; 8 primaries
.148c	aa		tax				tax
.148d	bd 95 14	lda $1495,x			lda 	_IOColourTable,x 			; look up CBM code and print it.
.1490	20 5d 14	jsr $145d			jsr 	IOPrintChar
.1493	68		pla				pla
.1494	60		rts				rts
.1495					_IOColourTable:
>1495	90						.byte 	$90 					; 0 Black
>1496	96						.byte 	$96 					; 1 Red
>1497	1e						.byte 	$1E 					; 2 Green
>1498	9e						.byte 	$9E 					; 3 Yellow
>1499	9a						.byte 	$9A 					; 4 Blue
>149a	9c						.byte 	$9C 					; 5 Magenta
>149b	9f						.byte 	$9F 					; 6 Cyan
>149c	05						.byte 	$05 					; 7 White
.149d					IOPaper:
.149d	48		pha				pha
.149e	48		pha				pha
.149f	a9 01		lda #$01			lda 	#1 						; 1 swaps fgr/bgr, so we swap them, set fgr
.14a1	20 5d 14	jsr $145d			jsr 	IOPrintChar 			; and then swap them again.
.14a4	68		pla				pla
.14a5	20 89 14	jsr $1489			jsr 	IOInk
.14a8	a9 01		lda #$01			lda 	#1
.14aa	20 5d 14	jsr $145d			jsr 	IOPrintChar
.14ad	68		pla				pla
.14ae	60		rts				rts
.14af					IOLocate:
.14af	48		pha				pha
.14b0	a9 13		lda #$13			lda 	#$13 					; home cursor code
.14b2	20 5d 14	jsr $145d			jsr 	IOPrintChar
.14b5	a9 11		lda #$11			lda 	#$11 	 				; print Y x $11 (down)
.14b7	20 be 14	jsr $14be			jsr 	_IOLoc2
.14ba	68		pla				pla
.14bb	a8		tay				tay
.14bc	a9 1d		lda #$1d			lda 	#$1D 					; print Y x $1D (right)
.14be					_IOLoc2:
.14be	c0 00		cpy #$00			cpy 	#0
.14c0	f0 06		beq $14c8			beq 	_IOLocExit
.14c2	20 5d 14	jsr $145d			jsr 	IOPrintChar
.14c5	88		dey				dey
.14c6	d0 f6		bne $14be			bne 	_IOLoc2
.14c8					_IOLocExit:
.14c8	60		rts				rts
.14c9					IOInput:
.14c9	a9 00		lda #$00			lda 	#0
.14cb	8d f6 0a	sta $0af6			sta 	bufferCount
.14ce					_IOILoop:
.14ce	20 cf ff	jsr $ffcf			jsr 	$FFCF
.14d1	c9 0d		cmp #$0d			cmp 	#13
.14d3	f0 10		beq $14e5			beq 	_IOIExit
.14d5	ae f6 0a	ldx $0af6			ldx 	bufferCount
.14d8	e0 f0		cpx #$f0			cpx 	#MaxLineInputSize
.14da	f0 f2		beq $14ce			beq 	_IOILoop
.14dc	ee f6 0a	inc $0af6			inc 	bufferCount
.14df	9d f7 0a	sta $0af7,x			sta 	bufferStorage+1,x
.14e2	4c ce 14	jmp $14ce			jmp 	_IOILoop
.14e5					_IOIExit:
.14e5	a9 f6		lda #$f6			lda 	#(bufferCount) & $FF
.14e7	85 2a		sta $2a				sta 	temp0
.14e9	a9 0a		lda #$0a			lda 	#(bufferCount) >> 8
.14eb	85 2b		sta $2b				sta 	1+(temp0)
.14ed	60		rts				rts

;******  Return to file: device/device.asm


;******  Processing file: device/option_x16/x16timer.asm

.14ee					IOReadTimer:
.14ee	20 de ff	jsr $ffde			jsr 	$FFDE 						; reads timer into YXA so we want only YA
.14f1	48		pha				pha
.14f2	8a		txa				txa
.14f3	a8		tay				tay
.14f4	68		pla				pla
.14f5	60		rts				rts

;******  Return to file: device/device.asm

.14f6					deviceHandler:
.14f6	7c f9 14	jmp ($14f9,x)			jmp 	(deviceVectors,x)
.14f9					deviceVectors:
>14f9	2e 14					.word IOControlHandler     ; index 0
>14fb	be 13					.word X16Break             ; index 2
>14fd	45 14					.word IOClearScreen        ; index 4
>14ff	4d 14					.word IONewLine            ; index 6
>1501	89 14					.word IOInk                ; index 8
>1503	6b 14					.word IOInkey              ; index 10
>1505	c9 14					.word IOInput              ; index 12
>1507	f5 13					.word ExternLoad           ; index 14
>1509	af 14					.word IOLocate             ; index 16
>150b	9d 14					.word IOPaper              ; index 18
>150d	5d 14					.word IOPrintChar          ; index 20
>150f	5d 14					.word IOPrintAscii         ; index 22
>1511	c9 13					.word ExternSave           ; index 24
>1513	55 14					.word IOTab                ; index 26
>1515	ee 14					.word IOReadTimer          ; index 28
.1517					_DummyControlHandler:
.1517	60		rts			rts

;******  Return to file: basic.asm

.1518					section_end_device:
.1518					section_start_error:

;******  Processing file: error/error.asm


;******  Processing file: error/errorhandler.asm

.1518					ErrorHandler:
.1518	8a		txa				txa
.1519	48		pha				pha
.151a	a9 01		lda #$01			lda 	#1 							; red
.151c	a2 08		ldx #$08		ldx	#8
.151e	20 f6 14	jsr $14f6		jsr	deviceHandler
.1521	68		pla				pla
.1522	aa		tax				tax
.1523	a9 8e		lda #$8e			lda 	#(ErrorTextList) & $FF
.1525	85 2a		sta $2a				sta 	temp0
.1527	a9 15		lda #$15			lda 	#(ErrorTextList) >> 8
.1529	85 2b		sta $2b				sta 	1+(temp0)
.152b	ca		dex		_EHFind:dex									; errors start at 1
.152c	f0 10		beq $153e			beq 	_EHFound
.152e	a0 00		ldy #$00			ldy 	#0 							; goto next text message, add length + 1 to the pointer.
.1530	38		sec				sec
.1531	a5 2a		lda $2a				lda 	temp0
.1533	71 2a		adc ($2a),y			adc 	(temp0),y
.1535	85 2a		sta $2a				sta 	temp0
.1537	90 f2		bcc $152b			bcc 	_EHFind
.1539	e6 2b		inc $2b				inc 	temp0+1
.153b	4c 2b 15	jmp $152b			jmp 	_EHFind
.153e					_EHFound:
.153e	20 49 18	jsr $1849			jsr 	EHPrintAscii 				; print the string "temp0" now points to.
.1541	a0 00		ldy #$00			ldy 	#0 							; in a line, e.g. the offset to next is non zero.
.1543	b1 28		lda ($28),y			lda 	(codePtr),y
.1545	f0 39		beq $1580			beq 	_EHNoLine
.1547	a5 29		lda $29				lda 	codePtr+1 					; code running from the command line.
.1549	cd c9 0a	cmp $0ac9			cmp 	basePage+1
.154c	90 32		bcc $1580			bcc 	_EHNoLine
.154e	a9 8a		lda #$8a			lda 	#(EHAtMsg) & $FF
.1550	85 2a		sta $2a				sta 	temp0
.1552	a9 15		lda #$15			lda 	#(EHAtMsg) >> 8
.1554	85 2b		sta $2b				sta 	1+(temp0)
.1556	20 49 18	jsr $1849			jsr 	EHPrintAscii
.1559	a0 01		ldy #$01			ldy 	#1 							; set up line number in TOS
.155b	a2 00		ldx #$00			ldx 	#0
.155d	b1 28		lda ($28),y			lda 	(codePtr),y
.155f	95 50		sta $50,x			sta 	esInt0,x
.1561	c8		iny				iny
.1562	b1 28		lda ($28),y			lda 	(codePtr),y
.1564	95 58		sta $58,x			sta 	esInt1,x
.1566	a9 00		lda #$00			lda 	#0
.1568	95 60		sta $60,x			sta 	esInt2,x
.156a	95 68		sta $68,x			sta 	esInt3,x
.156c	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.156e	85 2a		sta $2a				sta 	temp0
.1570	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.1572	85 2b		sta $2b				sta 	1+(temp0)
.1574	a0 0a		ldy #$0a			ldy 	#10 						; in base 10.
.1576	a9 00		lda #$00			lda 	#0							; stack position zero.
.1578	a2 12		ldx #$12		ldx	#18
.157a	20 64 36	jsr $3664		jsr	mainHandler
.157d	20 49 18	jsr $1849			jsr 	EHPrintAscii
.1580					_EHNoLine:
.1580	a2 06		ldx #$06		ldx	#6
.1582	20 f6 14	jsr $14f6		jsr	deviceHandler
.1585	a2 04		ldx #$04		ldx	#4
.1587	20 ca 1f	jsr $1fca		jsr	interactionHandler
.158a					EHAtMsg:
>158a	03 20 40 20					.text 	3," @ "

;******  Processing file: error/../generated/errortext.inc

.158e					ErrorTextList:
>158e	13 46 65 61 74 75 72 65			.text 19,"Feature not Present"
>1596	20 6e 6f 74 20 50 72 65 73 65 6e 74
>15a2	0c 53 79 6e 74 61 78 20			.text 12,"Syntax Error"
>15aa	45 72 72 6f 72
>15af	0f 4d 6f 64 75 6c 65 20			.text 15,"Module disabled"
>15b7	64 69 73 61 62 6c 65 64
>15bf	10 41 73 73 65 72 74 69			.text 16,"Assertion failed"
>15c7	6f 6e 20 66 61 69 6c 65 64
>15d0	0e 44 69 76 69 64 65 20			.text 14,"Divide By Zero"
>15d8	42 79 20 5a 65 72 6f
>15df	04 53 74 6f 70				.text 4,"Stop"
>15e4	0d 54 79 70 65 20 4d 69			.text 13,"Type Mismatch"
>15ec	73 6d 61 74 63 68
>15f2	0d 49 6c 6c 65 67 61 6c			.text 13,"Illegal Value"
>15fa	20 56 61 6c 75 65
>1600	15 4d 69 73 73 69 6e 67			.text 21,"Missing right bracket"
>1608	20 72 69 67 68 74 20 62 72 61 63 6b 65 74
>1616	0d 4d 69 73 73 69 6e 67			.text 13,"Missing comma"
>161e	20 63 6f 6d 6d 61
>1624	11 4d 69 73 73 69 6e 67			.text 17,"Missing reference"
>162c	20 72 65 66 65 72 65 6e 63 65
>1636	15 4c 69 6e 65 20 4e 75			.text 21,"Line Number not found"
>163e	6d 62 65 72 20 6e 6f 74 20 66 6f 75 6e 64
>164c	0f 53 74 72 69 6e 67 20			.text 15,"String too long"
>1654	74 6f 6f 20 6c 6f 6e 67
>165c	14 52 45 54 55 52 4e 20			.text 20,"RETURN without GOSUB"
>1664	77 69 74 68 6f 75 74 20 47 4f 53 55 42
>1671	14 55 4e 54 49 4c 20 77			.text 20,"UNTIL without REPEAT"
>1679	69 74 68 6f 75 74 20 52 45 50 45 41 54
>1686	10 4e 45 58 54 20 77 69			.text 16,"NEXT without FOR"
>168e	74 68 6f 75 74 20 46 4f 52
>1697	12 57 45 4e 44 20 77 69			.text 18,"WEND without WHILE"
>169f	74 68 6f 75 74 20 57 48 49 4c 45
>16aa	14 45 4e 44 50 52 4f 43			.text 20,"ENDPROC without PROC"
>16b2	20 77 69 74 68 6f 75 74 20 50 52 4f 43
>16bf	0e 42 61 64 20 4e 45 58			.text 14,"Bad NEXT index"
>16c7	54 20 69 6e 64 65 78
>16ce	17 53 74 72 75 63 74 75			.text 23,"Structures nested wrong"
>16d6	72 65 73 20 6e 65 73 74 65 64 20 77 72 6f 6e 67
>16e6	16 43 61 6e 6e 6f 74 20			.text 22,"Cannot create variable"
>16ee	63 72 65 61 74 65 20 76 61 72 69 61 62 6c 65
>16fd	19 52 65 74 75 72 6e 20			.text 25,"Return stack out of space"
>1705	73 74 61 63 6b 20 6f 75 74 20 6f 66 20 73 70 61
>1715	63 65
>1717	11 55 6e 6b 6e 6f 77 6e			.text 17,"Unknown Procedure"
>171f	20 50 72 6f 63 65 64 75 72 65
>1729	17 50 61 72 61 6d 65 74			.text 23,"Parameters do not match"
>1731	65 72 73 20 64 6f 20 6e 6f 74 20 6d 61 74 63 68
>1741	15 41 72 72 61 79 20 61			.text 21,"Array already defined"
>1749	6c 72 65 61 64 79 20 64 65 66 69 6e 65 64
>1757	12 44 49 4d 20 72 65 71			.text 18,"DIM requires array"
>175f	75 69 72 65 73 20 61 72 72 61 79
>176a	0f 42 61 64 20 61 72 72			.text 15,"Bad array index"
>1772	61 79 20 69 6e 64 65 78
>177a	1d 57 72 6f 6e 67 20 6e			.text 29,"Wrong number of array indices"
>1782	75 6d 62 65 72 20 6f 66 20 61 72 72 61 79 20 69
>1792	6e 64 69 63 65 73
>1798	0b 4f 75 74 20 6f 66 20			.text 11,"Out of data"
>17a0	64 61 74 61
>17a4	14 43 61 6e 6e 6f 74 20			.text 20,"Cannot tokenise line"
>17ac	74 6f 6b 65 6e 69 73 65 20 6c 69 6e 65
>17b9	0b 53 61 76 65 20 66 61			.text 11,"Save failed"
>17c1	69 6c 65 64
>17c5	0b 4c 6f 61 64 20 66 61			.text 11,"Load failed"
>17cd	69 6c 65 64
>17d1	05 42 72 65 61 6b			.text 5,"Break"
>17d7	0d 4f 75 74 20 6f 66 20			.text 13,"Out of memory"
>17df	6d 65 6d 6f 72 79
>17e5	16 45 78 70 72 65 73 73			.text 22,"Expression too complex"
>17ed	69 6f 6e 20 74 6f 6f 20 63 6f 6d 70 6c 65 78
>17fc	10 42 61 64 20 4f 70 65			.text 16,"Bad Operand/Mode"
>1804	72 61 6e 64 2f 4d 6f 64 65
>180d	13 42 72 61 6e 63 68 20			.text 19,"Branch out of range"
>1815	6f 75 74 20 6f 66 20 72 61 6e 67 65
>1821	13 4c 61 62 65 6c 20 63			.text 19,"Label changed value"
>1829	68 61 6e 67 65 64 20 76 61 6c 75 65
>1835	12 4e 6f 20 53 70 72 69			.text 18,"No Sprite Selected"
>183d	74 65 20 53 65 6c 65 63 74 65 64
>1848	00					.byte 0

;******  Return to file: error/errorhandler.asm

.1849					EHPrintAscii:
.1849	a0 00		ldy #$00			ldy 	#0
.184b	b1 2a		lda ($2a),y			lda 	(temp0),y
.184d	aa		tax				tax
.184e	f0 0f		beq $185f			beq 	_EHPExit
.1850					_EHPLoop:
.1850	c8		iny				iny
.1851	8a		txa				txa
.1852	48		pha				pha
.1853	b1 2a		lda ($2a),y			lda 	(temp0),y
.1855	a2 16		ldx #$16		ldx	#22
.1857	20 f6 14	jsr $14f6		jsr	deviceHandler
.185a	68		pla				pla
.185b	aa		tax				tax
.185c	ca		dex				dex
.185d	d0 f1		bne $1850			bne 	_EHPLoop
.185f					_EHPExit:
.185f	60		rts				rts

;******  Return to file: error/error.asm


;******  Return to file: basic.asm

.1860					section_end_error:
.1860					section_start_extension:

;******  Processing file: extension/extension.asm


;******  Processing file: extension/extensionhandler.asm

.1860					ExtensionHandler:
.1860	c9 fe		cmp #$fe			cmp 	#$FE 						; check for force mode 0
.1862	f0 16		beq $187a			beq 	_ExtensionForce
.1864	c9 ff		cmp #$ff			cmp 	#$FF						; A = $FF command, otherwise unary function stack level.
.1866	d0 08		bne $1870			bne 	_ExtensionUnary 			; is passed in A.
.1868	b1 28		lda ($28),y			lda 	(codePtr),y 				; so this is a command, using Group 2.
.186a	c8		iny				iny
.186b	0a		asl a				asl 	a
.186c	aa		tax				tax
.186d	7c 71 18	jmp ($1871,x)			jmp 	(Group2Vectors-12,x)
.1870					_ExtensionUnary:
.1870	48		pha				pha 								; save stack pos in A
.1871	b1 28		lda ($28),y			lda 	(codePtr),y 				; get shifted token, double into X
.1873	c8		iny				iny
.1874	0a		asl a				asl 	a
.1875	aa		tax				tax
.1876	68		pla				pla 								; restore stack pos and call group3 command.
.1877	7c 7d 18	jmp ($187d,x)			jmp 	(Group3Vectors-12,X)
.187a					_ExtensionForce:
.187a	4c 5b 1b	jmp $1b5b			jmp 	ForceMode0

;******  Processing file: extension/../generated/tokenvectors2.inc

.187d					Group2Vectors:
>187d	77 1c					.word	Command_VPoke            ; $86 vpoke
>187f	7a 1c					.word	Command_VDoke            ; $87 vdoke
>1881	4f 1c					.word	Command_VLoad            ; $88 vload
>1883	6d 1b					.word	CommandMode              ; $89 mode
>1885	18 1c					.word	CommandPalette           ; $8a palette
>1887	58 19					.word	CommandSprite            ; $8b sprite

;******  Return to file: extension/extensionhandler.asm


;******  Processing file: extension/../generated/tokenvectors3.inc

.1889					Group3Vectors:
>1889	c3 1c					.word	Command_VPeek            ; $86 vpeek(
>188b	c6 1c					.word	Command_VDeek            ; $87 vdeek(
>188d	2b 1b					.word	Sprite_GetX              ; $88 sprite.x(
>188f	2e 1b					.word	Sprite_GetY              ; $89 sprite.y(
>1891	9b 18					.word	FunctionCollide          ; $8a hit(

;******  Return to file: extension/extensionhandler.asm

.1893					XEvaluateInteger:
.1893	8a		txa				txa
.1894	a2 0a		ldx #$0a		ldx	#10
.1896	20 64 36	jsr $3664		jsr	mainHandler
.1899	aa		tax				tax
.189a	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/sprites/collide.asm

.0be6					hitSprite1:
>0be6							.fill 	1 							; this won't work ... if you nest HIT() which
.0be7					hitSprite2:
>0be7							.fill 	1
.0be8					hitRange:
>0be8							.fill 	1
.189b					FunctionCollide:
.189b	48		pha				pha 								; save and put index into X
.189c	aa		tax				tax
.189d	a9 00		lda #$00			lda 	#0 							; set hit range to default.
.189f	8d e8 0b	sta $0be8			sta 	hitRange
.18a2	20 47 19	jsr $1947			jsr 	_FCGetSpriteID
.18a5	8d e6 0b	sta $0be6			sta 	hitSprite1
.18a8	8a		txa				txa
.18a9	48		pha				pha
.18aa	a2 02		ldx #$02		ldx	#2
.18ac	20 64 36	jsr $3664		jsr	mainHandler
.18af	68		pla				pla
.18b0	aa		tax				tax
.18b1	20 47 19	jsr $1947			jsr 	_FCGetSpriteID
.18b4	8d e7 0b	sta $0be7			sta 	hitSprite2
.18b7	b1 28		lda ($28),y			lda 	(codePtr),y 				; is there a third parameter
.18b9	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.18bb	f0 13		beq $18d0			beq 	_FCParam2
.18bd	8a		txa				txa
.18be	48		pha				pha
.18bf	a2 02		ldx #$02		ldx	#2
.18c1	20 64 36	jsr $3664		jsr	mainHandler
.18c4	68		pla				pla
.18c5	a2 0c		ldx #$0c		ldx	#12
.18c7	20 64 36	jsr $3664		jsr	mainHandler
.18ca	aa		tax				tax
.18cb	b5 50		lda $50,x			lda 	esInt0,x
.18cd	8d e8 0b	sta $0be8			sta 	hitRange
.18d0					_FCParam2:
.18d0	a2 04		ldx #$04		ldx	#4
.18d2	20 64 36	jsr $3664		jsr	mainHandler
.18d5	68		pla				pla 								; set X to point to the stack again.
.18d6	48		pha				pha
.18d7	aa		tax				tax
.18d8	98		tya				tya
.18d9	48		pha				pha
.18da	18		clc				clc 								; do it with the horizontal values.
.18db	20 fd 18	jsr $18fd			jsr 	_FCCheck
.18de	90 0a		bcc $18ea			bcc 	_FCFail
.18e0	38		sec				sec 								; do it with the vertical values.
.18e1	20 fd 18	jsr $18fd			jsr 	_FCCheck
.18e4	90 04		bcc $18ea			bcc 	_FCFail
.18e6	a9 ff		lda #$ff			lda 	#255 						; pass, return -1
.18e8	d0 02		bne $18ec			bne 	_FCReturnA
.18ea					_FCFail:
.18ea	a9 00		lda #$00			lda 	#0 							; return 0, it didn't work.
.18ec					_FCReturnA:
.18ec	85 32		sta $32				sta 	tempShort 					; put result in tempShort
.18ee	68		pla				pla
.18ef	a8		tay				tay
.18f0	68		pla				pla 								; restore stack, return result and exit.
.18f1	aa		tax				tax
.18f2	a5 32		lda $32				lda 	tempShort
.18f4	95 50		sta $50,x			sta 	esInt0,x
.18f6	95 58		sta $58,x			sta 	esInt1,x
.18f8	95 60		sta $60,x			sta 	esInt2,x
.18fa	95 68		sta $68,x			sta 	esInt3,x
.18fc	60		rts				rts
.18fd					_FCCheck:
.18fd	08		php				php 								; save the H/V flag twice
.18fe	08		php				php
.18ff	ad e6 0b	lda $0be6			lda 	hitSprite1 					; select sprite 1 and read its location
.1902	20 85 1a	jsr $1a85			jsr 	SelectSpriteA 				; into X
.1905	28		plp				plp
.1906	20 e7 1a	jsr $1ae7			jsr 	SpriteReadCoordinate
.1909	ad e7 0b	lda $0be7			lda 	hitSprite2					; now repeat for sprite 2 and location X+1
.190c	20 85 1a	jsr $1a85			jsr 	SelectSpriteA
.190f	e8		inx				inx
.1910	28		plp				plp
.1911	20 e7 1a	jsr $1ae7			jsr 	SpriteReadCoordinate
.1914	ca		dex				dex
.1915	38		sec				sec 								; calculate |s1.c-s2.c| put in temp0
.1916	b5 50		lda $50,x			lda 	esInt0,x
.1918	f5 51		sbc $51,x			sbc 	esInt0+1,x
.191a	85 2a		sta $2a				sta 	temp0
.191c	b5 58		lda $58,x			lda 	esInt1,x
.191e	f5 59		sbc $59,x			sbc 	esInt1+1,x
.1920	85 2b		sta $2b				sta 	temp0+1
.1922	10 0d		bpl $1931			bpl 	_FCCIsPositive
.1924	38		sec				sec 								; if -ve calculate |difference|
.1925	a9 00		lda #$00			lda 	#0
.1927	e5 2a		sbc $2a				sbc 	temp0
.1929	85 2a		sta $2a				sta 	temp0
.192b	a9 00		lda #$00			lda 	#0
.192d	e5 2b		sbc $2b				sbc 	temp0+1
.192f	85 2b		sta $2b				sta 	temp0+1
.1931					_FCCIsPositive:
.1931	a5 2b		lda $2b				lda 	temp0+1 					; if range >= 256 then definitely fail.
.1933	d0 10		bne $1945			bne 	_FCCFail
.1935	18		clc				clc 								; work out required min distance which is
.1936	b5 68		lda $68,x			lda 	esInt3,x 					; the sum of the half width/heights
.1938	75 69		adc $69,x			adc 	esInt3+1,x
.193a	ac e8 0b	ldy $0be8			ldy 	hitRange 					; get the hit range
.193d	f0 01		beq $1940			beq 	_FCCNoSetRange 				; override if non zero.
.193f	98		tya				tya
.1940					_FCCNoSetRange:
.1940	c5 2a		cmp $2a				cmp 	temp0 						; result is range > distance
.1942	f0 01		beq $1945			beq 	_FCCFail
.1944	60		rts				rts
.1945					_FCCFail:
.1945	18		clc				clc
.1946	60		rts				rts
.1947					_FCGetSpriteID:
.1947	8a		txa				txa
.1948	a2 0c		ldx #$0c		ldx	#12
.194a	20 64 36	jsr $3664		jsr	mainHandler
.194d	aa		tax				tax
.194e	b5 50		lda $50,x			lda 	esInt0,x
.1950	30 01		bmi $1953			bmi 	_FCGSValue
.1952	60		rts				rts
.1953					_FCGSValue:
.1953	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.1955	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/sprites/sprite.asm

.0be9					currSprite:
>0be9							.fill 	2
.1958					CommandSprite:
.1958	20 5a 1a	jsr $1a5a			jsr 	CSCheckOnOff 				; look for TRUE/FALSE
.195b	d0 0d		bne $196a			bne 	_CSCheckClear
.195d	ad 29 9f	lda $9f29			lda 	$9F29 						; sprite enable is bit 6.
.1960	29 bf		and #$bf			and 	#$BF 						; clear it whatever
.1962	90 02		bcc $1966			bcc 	_CSNotOn 					; if CS turn on, so set it
.1964	09 40		ora #$40			ora 	#$40
.1966					_CSNotOn:
.1966	8d 29 9f	sta $9f29			sta 	$9F29 						; write it back in new state and exit
.1969	60		rts				rts
.196a					_CSCheckClear:
.196a	a9 00		lda #$00			lda 	#0 							; no sprite currently selected.
.196c	8d ea 0b	sta $0bea			sta 	currSprite+1
.196f	b1 28		lda ($28),y			lda 	(codePtr),y 				; check for CLEAR
.1971	c9 e7		cmp #$e7			cmp 	#TKW_CLEAR
.1973	d0 05		bne $197a			bne 	_CSCommandLoop 				; not CLEAR, go to main loop
.1975	20 6b 1a	jsr $1a6b			jsr 	CSClearSprites 				; clear all the sprites
.1978	c8		iny				iny 								; consume CLEAR token and exit.
.1979	60		rts				rts
.197a					_CSCommandLoop:
.197a	20 5a 1a	jsr $1a5a			jsr 	CSCheckOnOff 				; check sprite on/off
.197d	f0 2c		beq $19ab			beq 	_CSSetVisibility
.197f	b1 28		lda ($28),y			lda 	(codePtr),y 				; get and consume character
.1981	c9 80		cmp #$80			cmp 	#TOK_EOL					; EOL exit.
.1983	f0 25		beq $19aa			beq 	_CSExit
.1985	c8		iny				iny									; consume it
.1986	c9 ca		cmp #$ca			cmp 	#TKW_COLON 					; colon exit
.1988	f0 20		beq $19aa			beq 	_CSExit
.198a	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; semantic comma
.198c	f0 ec		beq $197a			beq 	_CSCommandLoop
.198e	c9 da		cmp #$da			cmp		#TKW_IMAGE 					; image ?
.1990	f0 69		beq $19fb			beq 	_CSSetImage
.1992	c9 dc		cmp #$dc			cmp 	#TKW_FLIP 					; flip ?
.1994	f0 2b		beq $19c1			beq 	_CSSetFlip
.1996	c9 ce		cmp #$ce			cmp 	#TKW_TO 					; to ?
.1998	f0 46		beq $19e0			beq 	_CSSetPos
.199a	88		dey				dey 								; unpick DEY
.199b	a9 00		lda #$00			lda 	#0 							; sprite # now at level 0
.199d	a2 0c		ldx #$0c		ldx	#12
.199f	20 64 36	jsr $3664		jsr	mainHandler
.19a2	a5 50		lda $50				lda 	esInt0
.19a4	20 85 1a	jsr $1a85			jsr 	SelectSpriteA
.19a7	4c 7a 19	jmp $197a			jmp 	_CSCommandLoop
.19aa					_CSExit:
.19aa	60		rts				rts
.19ab					_CSSetVisibility:
.19ab	08		php				php 								; save carry
.19ac	a9 06		lda #$06			lda 	#6 							; set pos to offset 6.
.19ae	20 41 1a	jsr $1a41			jsr 	SpriteSetTarget
.19b1	ad 23 9f	lda $9f23			lda 	$9F23 						; read it.
.19b4	29 f3		and #$f3			and 	#$F3 						; clear depth bits, disabling it.
.19b6	28		plp				plp
.19b7	90 02		bcc $19bb			bcc 	_CSSetOff 					; check if carry was set
.19b9	09 0c		ora #$0c			ora 	#$0C 						; otherwise set depth bits to 11, on top.
.19bb					_CSSetOff:
.19bb	8d 23 9f	sta $9f23			sta 	$9F23 						; update and loop back
.19be	4c 7a 19	jmp $197a			jmp 	_CSCommandLoop
.19c1					_CSSetFlip:
.19c1	a9 00		lda #$00			lda 	#0 							; image # now at level 0
.19c3	a2 0c		ldx #$0c		ldx	#12
.19c5	20 64 36	jsr $3664		jsr	mainHandler
.19c8	a9 06		lda #$06			lda 	#6 							; set sprite position to +6
.19ca	20 41 1a	jsr $1a41			jsr 	SpriteSetTarget
.19cd	a5 50		lda $50				lda 	esInt0 						; flip value & 3 => temp0
.19cf	29 03		and #$03			and 	#3
.19d1	85 2a		sta $2a				sta 	temp0
.19d3	ad 23 9f	lda $9f23			lda 	$9F23 						; update the flip.
.19d6	29 fc		and #$fc			and 	#$FC
.19d8	05 2a		ora $2a				ora 	temp0
.19da	8d 23 9f	sta $9f23			sta 	$9F23
.19dd	4c 7a 19	jmp $197a			jmp 	_CSCommandLoop
.19e0					_CSSetPos:
.19e0	a9 00		lda #$00			lda 	#0 							; X now at level 0
.19e2	a2 0a		ldx #$0a		ldx	#10
.19e4	20 64 36	jsr $3664		jsr	mainHandler
.19e7	a2 02		ldx #$02		ldx	#2
.19e9	20 64 36	jsr $3664		jsr	mainHandler
.19ec	a9 01		lda #$01			lda 	#1 							; Y now at level 1
.19ee	a2 0a		ldx #$0a		ldx	#10
.19f0	20 64 36	jsr $3664		jsr	mainHandler
.19f3	a2 00		ldx #$00			ldx 	#0 							; coords at 0,1
.19f5	20 a3 1a	jsr $1aa3			jsr 	SpriteMove 					; move it.
.19f8	4c 7a 19	jmp $197a			jmp 	_CSCommandLoop
.19fb					_CSSetImage:
.19fb	a9 00		lda #$00			lda 	#0 							; image # now at level 0
.19fd	a2 0c		ldx #$0c		ldx	#12
.19ff	20 64 36	jsr $3664		jsr	mainHandler
.1a02	a9 00		lda #$00			lda 	#0 							; set sprite position to +0
.1a04	20 41 1a	jsr $1a41			jsr 	SpriteSetTarget
.1a07	a6 50		ldx $50				ldx 	esInt0 						; get image # into X
.1a09	bd 30 0c	lda $0c30,x			lda 	imageAddr2Low,x 			; copy low address in.
.1a0c	8d 23 9f	sta $9f23			sta 	$9F23
.1a0f	ee 20 9f	inc $9f20			inc 	$9F20 						; bump to offset 1.
.1a12	bd f0 0b	lda $0bf0,x			lda 	imageInfo,x 				; get 4/8 bit flag from info.
.1a15	29 10		and #$10			and 	#$10
.1a17	0a		asl a				asl 	a
.1a18	0a		asl a				asl		a
.1a19	0a		asl a				asl 	a 							; put into bit 7
.1a1a	1d 70 0c	ora $0c70,x			ora 	imageAddr2High,x 			; or high address with it.
.1a1d	8d 23 9f	sta $9f23			sta 	$9F23 						; write the high byte.
.1a20	a9 06		lda #$06			lda 	#6
.1a22	20 41 1a	jsr $1a41			jsr 	SpriteSetTarget 			; set sprite on.
.1a25	ad 23 9f	lda $9f23			lda 	$9F23
.1a28	09 0c		ora #$0c			ora 	#$0C
.1a2a	8d 23 9f	sta $9f23			sta 	$9F23
.1a2d	ee 20 9f	inc $9f20			inc 	$9F20 						; point to byte 7 : height/width/palette offset
.1a30	bd f0 0b	lda $0bf0,x			lda 	imageInfo,x 				; get image info
.1a33	0a		asl a				asl 	a 							; shift bits 0-3 to 4-7
.1a34	0a		asl a				asl 	a
.1a35	0a		asl a				asl 	a
.1a36	0a		asl a				asl 	a
.1a37	b0 02		bcs $1a3b			bcs		_CSNoOffset 				; if bit 4 was set don't set the offset.
.1a39	09 0f		ora #$0f			ora 	#$0F 						; set palette offset and write back
.1a3b					_CSNoOffset:
.1a3b	8d 23 9f	sta $9f23			sta 	$9F23
.1a3e	4c 7a 19	jmp $197a			jmp 	_CSCommandLoop
.1a41					SpriteSetTarget:
.1a41	0d e9 0b	ora $0be9			ora 	currSprite
.1a44	8d 20 9f	sta $9f20			sta 	$9F20
.1a47	ad ea 0b	lda $0bea			lda 	currSprite+1
.1a4a	f0 09		beq $1a55			beq 	_SSTNoSet
.1a4c	8d 21 9f	sta $9f21			sta 	$9F21
.1a4f	a9 01		lda #$01			lda 	#$01
.1a51	8d 22 9f	sta $9f22			sta 	$9F22
.1a54	60		rts				rts
.1a55					_SSTNoSet:
.1a55	a2 27		ldx #$27			ldx 	#ErrorID_NoSprite
.1a57	20 18 15	jsr $1518		jsr	errorHandler
.1a5a					CSCheckOnOff:
.1a5a	b1 28		lda ($28),y			lda 	(codePtr),y 				; get and consume it.
.1a5c	c8		iny				iny
.1a5d	c9 ab		cmp #$ab			cmp 	#TKW_FALSE					; return CC/EQ if FALSE
.1a5f	18		clc				clc
.1a60	f0 08		beq $1a6a			beq 	_CSCOExit
.1a62	c9 aa		cmp #$aa			cmp 	#TKW_TRUE 					; return CS/EQ if TRUE
.1a64	38		sec				sec 								; return NE if neither.
.1a65	f0 03		beq $1a6a			beq 	_CSCOExit
.1a67	88		dey				dey 								; undo consume
.1a68	c9 aa		cmp #$aa			cmp 	#TKW_TRUE 					; and set NE again, DEY will change it.
.1a6a					_CSCOExit:
.1a6a	60		rts				rts
.1a6b					CSClearSprites:
.1a6b	a9 11		lda #$11			lda 	#$11 						; set address to 1FC00 with single bump
.1a6d	8d 22 9f	sta $9f22			sta 	$9F22
.1a70	a9 fc		lda #$fc			lda 	#$FC
.1a72	8d 21 9f	sta $9f21			sta 	$9F21
.1a75	a9 00		lda #$00			lda 	#0
.1a77	8d 20 9f	sta $9f20			sta 	$9F20
.1a7a					_CSClear:
.1a7a	a9 00		lda #$00			lda 	#0 							; set everything to $00
.1a7c	8d 23 9f	sta $9f23			sta 	$9F23
.1a7f	ad 21 9f	lda $9f21			lda 	$9F21
.1a82	d0 f6		bne $1a7a			bne 	_CSClear
.1a84	60		rts				rts
.1a85					SelectSpriteA:
.1a85	85 2a		sta $2a				sta 	temp0
.1a87	a9 00		lda #$00			lda 	#0
.1a89	06 2a		asl $2a				asl		temp0 						; multiply A:esInt0 by 8
.1a8b	b0 11		bcs $1a9e			bcs 	_CSBadValue 				; sprites only 0-127
.1a8d	06 2a		asl $2a				asl 	temp0
.1a8f	2a		rol a				rol 	a
.1a90	06 2a		asl $2a				asl 	temp0
.1a92	2a		rol a				rol 	a
.1a93	09 fc		ora #$fc			ora 	#$FC 						; MSB of address (barring $01 upper third byte)
.1a95	8d ea 0b	sta $0bea			sta 	currSprite+1
.1a98	a5 2a		lda $2a				lda 	temp0 						; LSB of address
.1a9a	8d e9 0b	sta $0be9			sta 	currSprite+0
.1a9d	60		rts				rts
.1a9e					_CSBadValue
.1a9e	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.1aa0	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/sprites/spritemove.asm

.1aa3					SpriteMove:
.1aa3	98		tya				tya
.1aa4	48		pha				pha
.1aa5	a9 07		lda #$07			lda 	#7 									; point to height/width byte and read it.
.1aa7	20 41 1a	jsr $1a41			jsr 	SpriteSetTarget
.1aaa	ad 23 9f	lda $9f23			lda 	$9F23
.1aad	4a		lsr a				lsr 	a 									; A now contains bits 0-1 (width) 2-3 (height)
.1aae	4a		lsr a				lsr 	a
.1aaf	4a		lsr a				lsr 	a
.1ab0	4a		lsr a				lsr 	a
.1ab1	85 2a		sta $2a				sta 	temp0 								; save these bits so we can work out the centre.
.1ab3	a9 02		lda #$02			lda 	#2 									; point to X position.Low
.1ab5	20 41 1a	jsr $1a41			jsr 	SpriteSetTarget
.1ab8	20 c7 1a	jsr $1ac7			jsr 	SMWritePosition 					; write X position out.
.1abb	46 2a		lsr $2a				lsr 	temp0 								; shift height bits into 0,1
.1abd	46 2a		lsr $2a				lsr 	temp0
.1abf	e8		inx				inx 										; get the y position
.1ac0	20 c7 1a	jsr $1ac7			jsr 	SMWritePosition 					; and write that out.
.1ac3	ca		dex				dex 										; fix X and quit.
.1ac4	68		pla				pla
.1ac5	a8		tay				tay
.1ac6	60		rts				rts
.1ac7					SMWritePosition:
.1ac7	a5 2a		lda $2a				lda 	temp0 								; get dim size
.1ac9	29 03		and #$03			and 	#3 									; in range into Y
.1acb	a8		tay				tay
.1acc	38		sec				sec
.1acd	b5 50		lda $50,x			lda 	esInt0,x
.1acf	f9 e3 1a	sbc $1ae3,y			sbc 	SMHalfSize,y
.1ad2	8d 23 9f	sta $9f23			sta 	$9F23
.1ad5	ee 20 9f	inc $9f20			inc 	$9F20
.1ad8	b5 58		lda $58,x			lda 	esInt1,x
.1ada	e9 00		sbc #$00			sbc 	#0
.1adc	8d 23 9f	sta $9f23			sta 	$9F23
.1adf	ee 20 9f	inc $9f20			inc 	$9F20
.1ae2	60		rts				rts
.1ae3					SMHalfSize:
>1ae3	04 08 10 20					.byte 	4,8,16,32 							; half size each dimension.
.1ae7					SpriteReadCoordinate:
.1ae7	98		tya				tya
.1ae8	48		pha				pha
.1ae9	08		php				php 										; save CTR on stack
.1aea	a9 07		lda #$07			lda 	#7 									; point to height/width byte and read it.
.1aec	20 41 1a	jsr $1a41			jsr 	SpriteSetTarget
.1aef	ad 23 9f	lda $9f23			lda 	$9F23
.1af2	4a		lsr a				lsr 	a 									; A now contains bits 0-1 (width) 2-3 (height)
.1af3	4a		lsr a				lsr 	a
.1af4	4a		lsr a				lsr 	a
.1af5	4a		lsr a				lsr 	a
.1af6	28		plp				plp 										; restore CTS
.1af7	08		php				php
.1af8	90 02		bcc $1afc			bcc 	_SPRCNotY1 							; if it is Y, e.g. CS, shift twice more.
.1afa	4a		lsr a				lsr 	a
.1afb	4a		lsr a				lsr 	a
.1afc					_SPRCNotY1:
.1afc	29 03		and #$03			and 	#3 									; point into half width/height
.1afe	a8		tay				tay
.1aff	b9 e3 1a	lda $1ae3,y			lda 	SMHalfSize,y 						; get half size -> esInt3,x
.1b02	95 68		sta $68,x			sta 	esInt3,x
.1b04	28		plp				plp 										; CS Y CC X
.1b05	a9 00		lda #$00			lda 	#0 									; A = 0 X A = 2 Y
.1b07	2a		rol a				rol 	a
.1b08	2a		rol a				rol 	a
.1b09	69 02		adc #$02			adc 	#2 									; A = 2 X A = 4 Y
.1b0b	20 41 1a	jsr $1a41			jsr 	SpriteSetTarget 					; set data pointer offset by that
.1b0e	18		clc				clc 										; read and unfix centre.
.1b0f	ad 23 9f	lda $9f23			lda 	$9F23
.1b12	75 68		adc $68,x			adc 	esInt3,x
.1b14	95 50		sta $50,x			sta 	esInt0,x
.1b16	ee 20 9f	inc $9f20			inc 	$9F20 								; do MSB
.1b19	ad 23 9f	lda $9f23			lda 	$9F23
.1b1c	69 00		adc #$00			adc 	#0
.1b1e	29 0f		and #$0f			and 	#$0F 								; sign extend on bit 11.
.1b20	c9 08		cmp #$08			cmp		#$08
.1b22	90 02		bcc $1b26			bcc 	_SPRCNoSX
.1b24	09 f0		ora #$f0			ora 	#$F0
.1b26					_SPRCNoSX:
.1b26	95 58		sta $58,x			sta 	esInt1,x
.1b28	68		pla				pla
.1b29	a8		tay				tay
.1b2a	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/sprites/spriteutils.asm

.1b2b					Sprite_GetX:
.1b2b	18		clc				clc
.1b2c	90 01		bcc $1b2f			bcc 	SpriteGetCode
.1b2e					Sprite_GetY:
.1b2e	38		sec				sec
.1b2f					SpriteGetCode:
.1b2f	08		php				php 								; CLC : X SEC: Y, save on stack.
.1b30	48		pha				pha 								; save stack position
.1b31	20 4d 1b	jsr $1b4d			jsr 	GetSpriteNumber 			; get # of sprite.
.1b34	a2 04		ldx #$04		ldx	#4
.1b36	20 64 36	jsr $3664		jsr	mainHandler
.1b39	68		pla				pla
.1b3a	aa		tax				tax
.1b3b	28		plp				plp 								; which one ?
.1b3c	20 e7 1a	jsr $1ae7			jsr 	SpriteReadCoordinate 		; read appropriate coordinate into esInt0,x
.1b3f	b5 58		lda $58,x			lda 	esInt1,x 					; get sign bit, sign extend 16->32 bits
.1b41	29 80		and #$80			and 	#$80
.1b43	f0 02		beq $1b47			beq 	_SGXYPos
.1b45	a9 ff		lda #$ff			lda 	#$FF
.1b47					_SGXYPos:
.1b47	95 60		sta $60,x			sta 	esInt2,x
.1b49	95 68		sta $68,x			sta 	esInt3,x
.1b4b	8a		txa				txa 								; return NSP in A
.1b4c	60		rts				rts
.1b4d					GetSpriteNumber:
.1b4d	48		pha				pha
.1b4e	a2 0c		ldx #$0c		ldx	#12
.1b50	20 64 36	jsr $3664		jsr	mainHandler
.1b53	68		pla				pla
.1b54	aa		tax				tax
.1b55	b5 50		lda $50,x			lda 	esInt0,x
.1b57	20 85 1a	jsr $1a85			jsr 	SelectSpriteA
.1b5a	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/video/mode.asm

.0beb					currentMode:
>0beb							.fill 	4
.1b5b					ForceMode0:
.1b5b	a2 00		ldx #$00			ldx 	#0
.1b5d	86 50		stx $50				stx 	esInt0 						; in case we do it.
.1b5f					_FMCheck:
.1b5f	bd ec 1b	lda $1bec,x			lda 	CMModeList,x 				; do we need to switch ?
.1b62	dd eb 0b	cmp $0beb,x			cmp 	currentMode,x
.1b65	d0 13		bne $1b7a			bne 	CMSetMode 					; different so switch.
.1b67	e8		inx				inx
.1b68	e0 04		cpx #$04			cpx 	#4
.1b6a	d0 f3		bne $1b5f			bne 	_FMCheck
.1b6c	60		rts				rts
.1b6d					CommandMode:
.1b6d	a9 00		lda #$00			lda 	#0
.1b6f	a2 0a		ldx #$0a		ldx	#10
.1b71	20 64 36	jsr $3664		jsr	mainHandler
.1b74	a5 68		lda $68				lda 	esInt3
.1b76	29 70		and #$70			and 	#$70
.1b78	d0 06		bne $1b80			bne 	CMNoExpand
.1b7a					CMSetMode:
.1b7a	20 cb 1b	jsr $1bcb			jsr 	CMExpandMode
.1b7d	4c 94 1b	jmp $1b94			jmp 	CMUpdateMode
.1b80					CMNoExpand:
.1b80	a5 50		lda $50				lda 	esInt0
.1b82	8d eb 0b	sta $0beb			sta 	currentMode
.1b85	a5 58		lda $58				lda 	esInt1
.1b87	8d ec 0b	sta $0bec			sta 	currentMode+1
.1b8a	a5 60		lda $60				lda 	esInt2
.1b8c	8d ed 0b	sta $0bed			sta 	currentMode+2
.1b8f	a5 68		lda $68				lda 	esInt3
.1b91	8d ee 0b	sta $0bee			sta 	currentMode+3
.1b94					CMUpdateMode:
.1b94	a2 11		ldx #$11			ldx 	#$11
.1b96					_CMClear:
.1b96	a9 00		lda #$00			lda 	#0
.1b98	9d 29 9f	sta $9f29,x			sta 	$9F29,X
.1b9b	ca		dex				dex
.1b9c	10 f8		bpl $1b96			bpl 	_CMClear
.1b9e	ad ee 0b	lda $0bee			lda 	currentMode+3 				; get current mode
.1ba1	48		pha				pha 								; stack twice.
.1ba2	48		pha				pha
.1ba3	29 70		and #$70			and 	#$70 						; isolates bits 6,5,4 (sprites,L1 enable,L0 enable)
.1ba5	09 01		ora #$01			ora 	#$01 						; turn the output on.
.1ba7	8d 29 9f	sta $9f29			sta 	$9F29 						; write to DC_VIDEO
.1baa	68		pla				pla 								; get back
.1bab	20 f0 1b	jsr $1bf0			jsr 	CMToScale 					; convert lower 2 bits to a scale.
.1bae	8d 2a 9f	sta $9f2a			sta 	$9F2A 						; write to H-Scale
.1bb1	68		pla				pla 								; get back, convert bits 2,3 to a scale.
.1bb2	4a		lsr a				lsr 	a
.1bb3	4a		lsr a				lsr 	a
.1bb4	20 f0 1b	jsr $1bf0			jsr 	CMToScale 					; convert lower 2 bits to a scale.
.1bb7	8d 2b 9f	sta $9f2b			sta 	$9F2B
.1bba	a2 00		ldx #$00			ldx 	#0 							; this is offset from $9F2D to do L0
.1bbc	ad eb 0b	lda $0beb			lda 	currentMode					; get L0 config byte
.1bbf	20 fb 1b	jsr $1bfb			jsr 	CMDecodeLayer 				; and decode layer 0
.1bc2	a2 07		ldx #$07			ldx 	#7 							; when we do layer 1, offset by 7 hence starts at $9F34
.1bc4	ad ec 0b	lda $0bec			lda 	currentMode+1
.1bc7	20 fb 1b	jsr $1bfb			jsr 	CMDecodeLayer
.1bca	60		rts				rts
.1bcb					CMExpandMode:
.1bcb	a5 50		lda $50				lda 	esInt0 						; get mode number
.1bcd	c9 01		cmp #$01			cmp 	#(CMEndModeList-CMModeList) >> 2
.1bcf	b0 16		bcs $1be7			bcs 	_CMModeError
.1bd1	0a		asl a				asl 	a 							; x 4 into X
.1bd2	0a		asl a				asl 	a
.1bd3	aa		tax				tax
.1bd4	98		tya				tya
.1bd5	48		pha				pha
.1bd6	a0 00		ldy #$00			ldy 	#0
.1bd8					_CMEMCopy:
.1bd8	bd ec 1b	lda $1bec,x			lda 	CMModeList,x
.1bdb	99 eb 0b	sta $0beb,y			sta 	currentMode,y
.1bde	e8		inx				inx
.1bdf	c8		iny				iny
.1be0	c0 04		cpy #$04			cpy 	#4
.1be2	d0 f4		bne $1bd8			bne 	_CMEMCopy
.1be4	68		pla				pla
.1be5	a8		tay				tay
.1be6	60		rts				rts
.1be7					_CMModeError:
.1be7	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.1be9	20 18 15	jsr $1518		jsr	errorHandler
.1bec					CMModeList:
>1bec	00 60 00 20					.dword	$20006000 					; Mode 0 which is the standard 80x60 mode, no sprites
.1bf0					CMEndModeList:
.1bf0					CMToScale:
.1bf0	29 03		and #$03			and 	#3 							; lower 2 bits only
.1bf2	aa		tax				tax 								; put in X for counting
.1bf3	a9 00		lda #$00			lda 	#0 							; zero result
.1bf5	38		sec				sec 								; first time rotate CS in
.1bf6					_CMTSLoop:
.1bf6	6a		ror a				ror 	a
.1bf7	ca		dex				dex
.1bf8	10 fc		bpl $1bf6			bpl 	_CMTSLoop
.1bfa	60		rts				rts
.1bfb					CMDecodeLayer:
.1bfb	48		pha				pha 								; save it.
.1bfc	29 f7		and #$f7			and 	#$F7 						; all the bits except T256C which you can't set using this
.1bfe	9d 2d 9f	sta $9f2d,x			sta 	$9F2D,X
.1c01	68		pla				pla 								; get it back
.1c02	29 08		and #$08			and 	#$08 						; the missing bit sets the tile size.
.1c04	f0 02		beq $1c08			beq 	_CMDLNotSet
.1c06	a9 03		lda #$03			lda 	#$03 						; which sets both lower bits, they're square.
.1c08					_CMDLNotSet:
.1c08	e0 00		cpx #$00			cpx 	#0
.1c0a	f0 06		beq $1c12			beq 	_CMDLayer0 					; layer 1 has standard defaults for tile table, e.g. $7C
.1c0c	09 7c		ora #$7c			ora 	#$7C 						; so set those bits and write it out.
.1c0e	9d 2f 9f	sta $9f2f,x			sta 	$9F2F,X
.1c11	60		rts				rts
.1c12					_CMDLayer0:
.1c12	09 80		ora #$80			ora 	#$80 						; tile base is $80
.1c14	9d 2f 9f	sta $9f2f,x			sta 	$9F2F,X
.1c17	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/video/palette.asm

.1c18					CommandPalette:
.1c18	a9 00		lda #$00			lda 	#0
.1c1a	a2 0c		ldx #$0c		ldx	#12
.1c1c	20 64 36	jsr $3664		jsr	mainHandler
.1c1f	a2 02		ldx #$02		ldx	#2
.1c21	20 64 36	jsr $3664		jsr	mainHandler
.1c24	a9 01		lda #$01			lda 	#1
.1c26	a2 08		ldx #$08		ldx	#8
.1c28	20 64 36	jsr $3664		jsr	mainHandler
.1c2b	a5 50		lda $50				lda 	esInt0 					; get palette #
.1c2d	20 3d 1c	jsr $1c3d			jsr 	PointToPaletteA			; point to palette register
.1c30	a5 51		lda $51				lda 	esInt0+1
.1c32	8d 23 9f	sta $9f23			sta 	$9F23
.1c35	a5 59		lda $59				lda 	esInt1+1
.1c37	29 0f		and #$0f			and 	#$0F
.1c39	8d 23 9f	sta $9f23			sta 	$9F23
.1c3c	60		rts				rts
.1c3d					PointToPaletteA:
.1c3d	0a		asl a				asl 	a 							; x 2 -> LSB
.1c3e	8d 20 9f	sta $9f20			sta 	$9F20
.1c41	a9 00		lda #$00			lda 	#0 							; carry into A
.1c43	2a		rol a				rol 	a
.1c44	09 fa		ora #$fa			ora 	#$FA 						; make correct address
.1c46	8d 21 9f	sta $9f21			sta 	$9F21
.1c49	a9 11		lda #$11			lda 	#$11 						; $01 and single step => $9F22
.1c4b	8d 22 9f	sta $9f22			sta 	$9F22
.1c4e	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/video/vload.asm

.1c4f					Command_VLoad:
.1c4f	a9 00		lda #$00			lda 	#0 								; string which is the file name
.1c51	a2 0e		ldx #$0e		ldx	#14
.1c53	20 64 36	jsr $3664		jsr	mainHandler
.1c56	a2 01		ldx #$01			ldx 	#1 								; load address at +1.
.1c58	a5 35		lda $35				lda 	lowMemory 						; load it into lowMemory (for now ?)
.1c5a	95 50		sta $50,x			sta 	esInt0,x
.1c5c	a5 36		lda $36				lda 	lowMemory+1
.1c5e	95 58		sta $58,x			sta 	esInt1,x
.1c60	a9 00		lda #$00			lda 	#0
.1c62	95 60		sta $60,x			sta 	esInt2,x
.1c64	95 68		sta $68,x			sta 	esInt3,x
.1c66	a2 0e		ldx #$0e		ldx	#14
.1c68	20 f6 14	jsr $14f6		jsr	deviceHandler
.1c6b	a5 51		lda $51				lda 	esInt0+1 						; (temp0) is where we are decoding from.
.1c6d	85 2a		sta $2a				sta 	temp0
.1c6f	a5 59		lda $59				lda 	esInt1+1
.1c71	85 2b		sta $2b				sta 	temp0+1
.1c73	20 ef 1c	jsr $1cef			jsr 	LoadVRAMFile 					; load the VRAM file in.
.1c76	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/video/vpeekpoke.asm

.1c77					Command_VPoke:
.1c77	38		sec				sec 						; one byte , CS
.1c78	b0 01		bcs $1c7b			bcs 	CmdVideoWrite
.1c7a					Command_VDoke:
.1c7a	18		clc				clc 						; two bytes, CC
.1c7b					CmdVideoWrite:
.1c7b	08		php				php 						; save one or two btes
.1c7c	a9 00		lda #$00			lda 	#0  				; get address and value into levels 0,1
.1c7e	a2 0a		ldx #$0a		ldx	#10
.1c80	20 64 36	jsr $3664		jsr	mainHandler
.1c83	a2 02		ldx #$02		ldx	#2
.1c85	20 64 36	jsr $3664		jsr	mainHandler
.1c88	a9 01		lda #$01			lda 	#1
.1c8a	a2 0a		ldx #$0a		ldx	#10
.1c8c	20 64 36	jsr $3664		jsr	mainHandler
.1c8f	a2 00		ldx #$00			ldx 	#0
.1c91	20 a2 1c	jsr $1ca2			jsr 	SetUpTOSVRamAddress ; copy target address to VRAM address registers
.1c94	a5 51		lda $51				lda 	esInt0+1 			; get MSB of write value
.1c96	8d 23 9f	sta $9f23			sta 	$9F23
.1c99	28		plp				plp 						; if it was Poke then exit
.1c9a	b0 05		bcs $1ca1			bcs 	_CVWExit
.1c9c	a5 59		lda $59				lda 	esInt1+1 			; doke, write the MSB.
.1c9e	8d 23 9f	sta $9f23			sta 	$9F23
.1ca1					_CVWExit:
.1ca1	60		rts				rts
.1ca2					SetUpTOSVRamAddress:
.1ca2	b5 60		lda $60,x			lda 	esInt2,x 			; check range of address, data to $FFFF
.1ca4	29 fe		and #$fe			and 	#$FE
.1ca6	15 68		ora $68,x			ora 	esInt3,x
.1ca8	d0 14		bne $1cbe			bne 	CVWValue
.1caa	b5 50		lda $50,x			lda 	esInt0,x			; set address up
.1cac	8d 20 9f	sta $9f20			sta 	$9F20
.1caf	b5 58		lda $58,x			lda 	esInt1,x
.1cb1	8d 21 9f	sta $9f21			sta	 	$9F21
.1cb4	b5 60		lda $60,x			lda 	esInt2,x
.1cb6	29 01		and #$01			and 	#1
.1cb8	09 10		ora #$10			ora 	#$10 				; step 1.
.1cba	8d 22 9f	sta $9f22			sta 	$9F22
.1cbd	60		rts				rts
.1cbe					CVWValue:
.1cbe	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.1cc0	20 18 15	jsr $1518		jsr	errorHandler
.1cc3					Command_VPeek:
.1cc3	38		sec				sec 						; one byte , CS
.1cc4	b0 01		bcs $1cc7			bcs 	CmdVideoRead
.1cc6					Command_VDeek:
.1cc6	18		clc				clc 						; two bytes, CC
.1cc7					CmdVideoRead:
.1cc7	08		php				php 						; save action on stack.
.1cc8	48		pha				pha 						; save stack position
.1cc9	a2 0a		ldx #$0a		ldx	#10
.1ccb	20 64 36	jsr $3664		jsr	mainHandler
.1cce	a2 04		ldx #$04		ldx	#4
.1cd0	20 64 36	jsr $3664		jsr	mainHandler
.1cd3	68		pla				pla
.1cd4	aa		tax				tax
.1cd5	20 a2 1c	jsr $1ca2			jsr 	SetUpTOSVRamAddress	; set up VRAM address.
.1cd8	a9 00		lda #$00			lda 	#0 					; zero upper 3 bytes
.1cda	95 58		sta $58,x			sta 	esInt1,x
.1cdc	95 60		sta $60,x			sta 	esInt2,x
.1cde	95 68		sta $68,x			sta 	esInt3,x
.1ce0	ad 23 9f	lda $9f23			lda 	$9F23				; copy 1st byte
.1ce3	95 50		sta $50,x			sta 	esInt0,x
.1ce5	28		plp				plp 						; check if DOKE (carry was clear)
.1ce6	b0 05		bcs $1ced			bcs 	_CVRExit
.1ce8	ad 23 9f	lda $9f23			lda 	$9F23 				; copy 2nd byte
.1ceb	95 58		sta $58,x			sta 	esInt1,x
.1ced					_CVRExit:
.1ced	8a		txa				txa 						; return X position.
.1cee	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/video/vramprocess.asm

.0bef					compressMode:
>0bef							.fill 	1
.0bf0					imageInfo:
>0bf0							.fill 	X16MaxImages
.0c30					imageAddr2Low:
>0c30							.fill  	X16MaxImages
.0c70					imageAddr2High:
>0c70							.fill  	X16MaxImages
.1cef					LoadVRAMFile:
.1cef	8a		txa				txa
.1cf0	48		pha				pha
.1cf1	98		tya				tya
.1cf2	48		pha				pha
.1cf3					_LVRLoop:
.1cf3	20 cf 1d	jsr $1dcf			jsr 	LVFGet 						; get the next (never access direct)
.1cf6	c9 80		cmp #$80			cmp 	#$80 						; exit ?
.1cf8	f0 42		beq $1d3c			beq 	_LVRExit
.1cfa	b0 5c		bcs $1d58			bcs 	_LVRLoad 					; load data in ?
.1cfc	c9 08		cmp #$08			cmp 	#$08 						; is it set address ?
.1cfe	90 11		bcc $1d11			bcc 	_LVRSetAddress
.1d00	c9 0f		cmp #$0f			cmp 	#$0F 						; is it define palette
.1d02	f0 3d		beq $1d41			beq 	_LVRSetPalette
.1d04	c9 10		cmp #$10			cmp 	#$10 						; is it set compression type ?
.1d06	90 2d		bcc $1d35			bcc 	_LVRSetCompress
.1d08	c9 64		cmp #$64			cmp 	#$64 						; is it set sprite type.
.1d0a	90 60		bcc $1d6c			bcc 	_LVRSetSprite
.1d0c	a2 01		ldx #$01			ldx 	#ErrorID_missing
.1d0e	20 18 15	jsr $1518		jsr	errorHandler
.1d11					_LVRSetAddress:
.1d11	85 2d		sta $2d				sta 	temp1+1 					; 24 bit in temp1+1/temp1/A
.1d13	20 cf 1d	jsr $1dcf			jsr 	LVFGet
.1d16	85 2c		sta $2c				sta 	temp1
.1d18	a9 00		lda #$00			lda 	#0
.1d1a	46 2d		lsr $2d				lsr 	temp1+1 					; / 2 twice.
.1d1c	66 2c		ror $2c				ror 	temp1
.1d1e	6a		ror a				ror		a
.1d1f	46 2d		lsr $2d				lsr 	temp1+1
.1d21	66 2c		ror $2c				ror 	temp1
.1d23	6a		ror a				ror		a
.1d24	8d 20 9f	sta $9f20			sta 	$9F20 						; set write address with +1 increment
.1d27	a5 2c		lda $2c				lda 	temp1
.1d29	8d 21 9f	sta $9f21			sta 	$9F21
.1d2c	a5 2d		lda $2d				lda 	temp1+1
.1d2e	09 10		ora #$10			ora 	#$10
.1d30	8d 22 9f	sta $9f22			sta 	$9F22
.1d33	d0 be		bne $1cf3			bne 	_LVRLoop
.1d35					_LVRSetCompress:
.1d35	29 07		and #$07			and 	#7
.1d37	8d ef 0b	sta $0bef			sta 	compressMode
.1d3a	10 b7		bpl $1cf3			bpl 	_LVRLoop
.1d3c					_LVRExit:
.1d3c	68		pla				pla
.1d3d	a8		tay				tay
.1d3e	68		pla				pla
.1d3f	aa		tax				tax
.1d40	60		rts				rts
.1d41					_LVRSetPalette:
.1d41	20 cf 1d	jsr $1dcf			jsr 	LVFGet 						; get palette id.
.1d44	20 3d 1c	jsr $1c3d			jsr 	PointToPaletteA 			; in palette.asm
.1d47	20 cf 1d	jsr $1dcf			jsr 	LVFGet 						; copy 12 bit palette data in.
.1d4a	8d 23 9f	sta $9f23			sta 	$9F23
.1d4d	20 cf 1d	jsr $1dcf			jsr 	LVFGet
.1d50	29 0f		and #$0f			and 	#$0F
.1d52	8d 23 9f	sta $9f23			sta 	$9F23
.1d55	4c f3 1c	jmp $1cf3			jmp 	_LVRLoop
.1d58					_LVRLoad:
.1d58	ae ef 0b	ldx $0bef			ldx 	compressMode
.1d5b	d0 55		bne $1db2			bne 	_LVRNotMode0
.1d5d	29 7f		and #$7f			and 	#$7F 						; count in X (is > 0)
.1d5f					_LVRLCopyX:
.1d5f	aa		tax				tax
.1d60					_LVRLCopy:
.1d60	20 cf 1d	jsr $1dcf			jsr 	LVFGet 						; write to data.
.1d63	8d 23 9f	sta $9f23			sta 	$9F23
.1d66	ca		dex				dex
.1d67	d0 f7		bne $1d60			bne 	_LVRLCopy
.1d69	4c f3 1c	jmp $1cf3			jmp 	_LVRLoop
.1d6c					_LVRSetSprite:
.1d6c	48		pha				pha 								; save on stack
.1d6d	20 cf 1d	jsr $1dcf			jsr 	LVFGet 						; get the sprite number into X
.1d70	aa		tax				tax
.1d71	c9 40		cmp #$40			cmp 	#X16MaxImages				; too high ?
.1d73	b0 38		bcs $1dad			bcs 	_LVRSSValue
.1d75	68		pla				pla 								; restore the data held in the first byte
.1d76	9d f0 0b	sta $0bf0,x			sta 	imageInfo,x 				; and write into the sprite image table.
.1d79					_LVRAlignVRAM:
.1d79	ad 20 9f	lda $9f20			lda 	$9F20 						; check VRAM on 32 byte boundary
.1d7c	29 1f		and #$1f			and 	#$1F
.1d7e	f0 07		beq $1d87			beq 	_LVRAligned
.1d80	a9 00		lda #$00			lda 	#$00
.1d82	8d 23 9f	sta $9f23			sta 	$9F23
.1d85	f0 f2		beq $1d79			beq 	_LVRAlignVRAM
.1d87					_LVRAligned:
.1d87	ad 22 9f	lda $9f22			lda 	$9F22 						; put address/32 in sprite image table
.1d8a	4a		lsr a				lsr 	a 	 						; first halve into temp1
.1d8b	ad 21 9f	lda $9f21			lda 	$9F21
.1d8e	6a		ror a				ror 	a
.1d8f	85 2d		sta $2d				sta 	temp1+1
.1d91	ad 20 9f	lda $9f20			lda 	$9F20
.1d94	6a		ror a				ror 	a
.1d95	85 2c		sta $2c				sta 	temp1
.1d97	a0 04		ldy #$04			ldy 	#4 							; divide it by 16 in temp1
.1d99					_LVRShift:
.1d99	46 2d		lsr $2d				lsr 	temp1+1
.1d9b	66 2c		ror $2c				ror 	temp1
.1d9d	88		dey				dey
.1d9e	d0 f9		bne $1d99			bne 	_LVRShift
.1da0	a5 2d		lda $2d				lda 	temp1+1 					; copy result.
.1da2	9d 70 0c	sta $0c70,x			sta 	imageAddr2High,x
.1da5	a5 2c		lda $2c				lda 	temp1
.1da7	9d 30 0c	sta $0c30,x			sta 	imageAddr2Low,x
.1daa	4c f3 1c	jmp $1cf3			jmp 	_LVRLoop
.1dad					_LVRSSValue:
.1dad	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.1daf	20 18 15	jsr $1518		jsr	errorHandler
.1db2					_LVRNotMode0:
.1db2	e0 01		cpx #$01			cpx 	#1
.1db4	d0 15		bne $1dcb			bne 	_LVRNotMode1
.1db6	29 7f		and #$7f			and 	#$7F 						; drop bit 7
.1db8	c9 40		cmp #$40			cmp 	#$40
.1dba	90 a3		bcc $1d5f			bcc 	_LVRLCopyX 					; 00-3F use mode 0's copying code.
.1dbc					_LVRRLEGroup:
.1dbc	29 3f		and #$3f			and 	#$3F
.1dbe	aa		tax				tax
.1dbf	20 cf 1d	jsr $1dcf			jsr 	LVFGet
.1dc2					_LVRLEGroupLoop:
.1dc2	8d 23 9f	sta $9f23			sta 	$9F23
.1dc5	ca		dex				dex
.1dc6	d0 fa		bne $1dc2			bne 	_LVRLEGroupLoop
.1dc8	4c f3 1c	jmp $1cf3			jmp 	_LVRLoop
.1dcb					_LVRNotMode1:
>1dcb	db						.byte 	$DB
.1dcc	4c cb 1d	jmp $1dcb			jmp 	_LVRNotMode1
.1dcf	84 32		sty $32		LVFGet:	sty 	tempShort
.1dd1	a0 00		ldy #$00			ldy 	#0
.1dd3	b1 2a		lda ($2a),y			lda 	(temp0),y
.1dd5	a4 32		ldy $32				ldy	 	tempShort
.1dd7	e6 2a		inc $2a				inc 	temp0
.1dd9	d0 02		bne $1ddd			bne 	_LVFGExit
.1ddb	e6 2b		inc $2b				inc 	temp0+1
.1ddd					_LVFGExit:
.1ddd	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Return to file: basic.asm

.1dde					section_end_extension:
.1dde					section_start_floatingpoint:

;******  Processing file: floatingpoint/floatingpoint.asm

.1dde					floatingpointHandler:
.1dde	a2 03		ldx #$03			ldx 	#ErrorID_NoModule
.1de0	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: basic.asm

.1de3					section_end_floatingpoint:
.1de3					section_start_interaction:

;******  Processing file: interaction/interaction.asm


;******  Processing file: interaction/cold.asm

.1de3					ColdStartEntry:
.1de3	a2 ff		ldx #$ff			ldx 	#$FF
.1de5	9a		txs				txs
.1de6	20 6f 1e	jsr $1e6f			jsr 	ForceStandardMode
.1de9	a2 04		ldx #$04		ldx	#4
.1deb	20 f6 14	jsr $14f6		jsr	deviceHandler
.1dee	a0 ff		ldy #$ff			ldy 	#255
.1df0					_CSBanner:
.1df0	c8		iny				iny
.1df1	b9 17 1e	lda $1e17,y			lda 	Intro,y
.1df4	f0 14		beq $1e0a			beq 	_CSStart
.1df6	c9 08		cmp #$08			cmp 	#8
.1df8	90 08		bcc $1e02			bcc 	_CSInk
.1dfa	a2 16		ldx #$16		ldx	#22
.1dfc	20 f6 14	jsr $14f6		jsr	deviceHandler
.1dff	4c f0 1d	jmp $1df0			jmp 	_CSBanner
.1e02					_CSInk:
.1e02	a2 08		ldx #$08		ldx	#8
.1e04	20 f6 14	jsr $14f6		jsr	deviceHandler
.1e07	4c f0 1d	jmp $1df0			jmp 	_CSBanner
.1e0a					_CSStart:
.1e0a	a2 16		ldx #$16		ldx	#22
.1e0c	20 64 36	jsr $3664		jsr	mainHandler
.1e0f	a2 06		ldx #$06		ldx	#6
.1e11	20 64 36	jsr $3664		jsr	mainHandler
.1e14	4c 2f 1f	jmp $1f2f			jmp 	WarmStartEntry
>1e17	06 2a 2a 2a 20 36 35 30		Intro:	.text 	6,"*** 6502 Extended BASIC ***",13,13
>1e1f	32 20 45 78 74 65 6e 64 65 64 20 42 41 53 49 43
>1e2f	20 2a 2a 2a 0d 0d
>1e35	03 57 72 69 74 74 65 6e				.text 	3,"Written by Paul Robson 2021",13,13
>1e3d	20 62 79 20 50 61 75 6c 20 52 6f 62 73 6f 6e 20
>1e4d	32 30 32 31 0d 0d
>1e53	02 42 61 73 69 63 20				.text 	2,"Basic "
>1e5a	30 2e 31 39					.text "0.19"
>1e5e	20 28						.text 	" ("
>1e60	32 38 2d 4d 61 72 2d 32				.text "28-Mar-2021"
>1e68	30 32 31
>1e6b	29 0d 0d 00					.text 	")",13,13,0
.1e6f					ForceStandardMode:
.1e6f	a9 fe		lda #$fe			lda 	#$FE
.1e71	20 60 18	jsr $1860		jsr	extensionHandler
.1e74	60		rts				rts

;******  Return to file: interaction/interaction.asm


;******  Processing file: interaction/delete.asm

.1e75					DeleteLine:
.1e75	ad c8 0a	lda $0ac8			lda 	basePage 					; copy program base to temp0
.1e78	85 2a		sta $2a				sta 	temp0
.1e7a	ad c9 0a	lda $0ac9			lda 	basePage+1
.1e7d	85 2b		sta $2b				sta 	temp0+1
.1e7f	a0 01		ldy #$01	_DLLoop:ldy 	#1 							; see if found line ?
.1e81	a5 50		lda $50				lda 	esInt0 						; e.g. the linenumbers match
.1e83	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.1e85	d0 07		bne $1e8e			bne 	_DLNext
.1e87	c8		iny				iny
.1e88	a5 58		lda $58				lda 	esInt1
.1e8a	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.1e8c	f0 06		beq $1e94			beq 	_DLFound
.1e8e	20 b2 1e	jsr $1eb2	_DLNext:jsr 	IAdvanceTemp0 				; shift temp0 forward, return Z flag set if end.
.1e91	d0 ec		bne $1e7f			bne 	_DLLoop
.1e93	60		rts				rts
.1e94					_DLFound:
.1e94	a0 00		ldy #$00			ldy 	#0 							; this is the line to cut, so this offset is the bytes to remove
.1e96	b1 2a		lda ($2a),y			lda 	(temp0),y
.1e98	a8		tay				tay 								; so we copy from (temp0),y
.1e99	a2 00		ldx #$00			ldx 	#0  						; to (temp0,x)
.1e9b					_DLCopyDown:
.1e9b	b1 2a		lda ($2a),y			lda 	(temp0),y 					; copy one byte.
.1e9d	81 2a		sta ($2a,x)			sta 	(temp0,x)
.1e9f	e6 2a		inc $2a				inc 	temp0 						; advance pointer
.1ea1	d0 02		bne $1ea5			bne 	_DLNoCarry
.1ea3	e6 2b		inc $2b				inc 	temp0+1
.1ea5					_DLNoCarry:
.1ea5	a5 2a		lda $2a				lda 	temp0 						; until hit low memory
.1ea7	c5 35		cmp $35				cmp 	lowMemory 					; which is comfortably after End Program.
.1ea9	d0 f0		bne $1e9b			bne 	_DLCopyDown
.1eab	a5 2b		lda $2b				lda 	temp0+1
.1ead	c5 36		cmp $36				cmp 	lowMemory+1
.1eaf	d0 ea		bne $1e9b			bne 	_DLCopyDown
.1eb1	60		rts				rts
.1eb2					IAdvanceTemp0:
.1eb2	84 32		sty $32				sty 	tempShort
.1eb4	18		clc				clc
.1eb5	a0 00		ldy #$00			ldy 	#0 							; get offset
.1eb7	b1 2a		lda ($2a),y			lda 	(temp0),y 					; add to temp0
.1eb9	65 2a		adc $2a				adc 	temp0
.1ebb	85 2a		sta $2a				sta 	temp0
.1ebd	90 02		bcc $1ec1			bcc 	_IATNoCarry
.1ebf	e6 2b		inc $2b				inc 	temp0+1
.1ec1					_IATNoCarry:
.1ec1	b1 2a		lda ($2a),y			lda 	(temp0),y
.1ec3	a4 32		ldy $32				ldy 	tempShort
.1ec5	c9 00		cmp #$00			cmp		#0 							; Z set if program end.
.1ec7	60		rts				rts

;******  Return to file: interaction/interaction.asm


;******  Processing file: interaction/insert.asm

.1ec8					InsertLine:
.1ec8	ad c8 0a	lda $0ac8			lda 	basePage 					; copy program base to temp0
.1ecb	85 2a		sta $2a				sta 	temp0
.1ecd	ad c9 0a	lda $0ac9			lda 	basePage+1
.1ed0	85 2b		sta $2b				sta 	temp0+1
.1ed2					_ILLoop:
.1ed2	a0 01		ldy #$01			ldy 	#1
.1ed4	b1 2a		lda ($2a),y			lda 	(temp0),y
.1ed6	c5 50		cmp $50				cmp 	esInt0
.1ed8	c8		iny				iny
.1ed9	b1 2a		lda ($2a),y			lda 	(temp0),y
.1edb	e5 58		sbc $58				sbc 	esInt1
.1edd	b0 05		bcs $1ee4			bcs 	_ILFound 					; we know it cannot be equal, it would have been deleted
.1edf	20 b2 1e	jsr $1eb2			jsr 	IAdvanceTemp0 				; shift temp0 forward, return Z flag set if end.
.1ee2	d0 ee		bne $1ed2			bne 	_ILLoop
.1ee4					_ILFound:
.1ee4	a5 35		lda $35				lda 	lowMemory 					; shift lowMemory up to make space for it.
.1ee6	85 2c		sta $2c				sta 	temp1             			; this pointer goes backwards
.1ee8	a5 36		lda $36				lda 	lowMemory+1
.1eea	85 2d		sta $2d				sta 	temp1+1
.1eec	ad ed 0d	lda $0ded			lda 	tokenBufferIndex 			; space to make in Y, 0 in X.
.1eef	18		clc				clc 								; add 3 for the line number and offset.
.1ef0	69 03		adc #$03			adc 	#3 							; tokenbuffer already has $80
.1ef2	a8		tay				tay
.1ef3	a2 00		ldx #$00			ldx 	#0
.1ef5	a1 2c		lda ($2c,x)	_ILMove:lda 	(temp1,x)					; shift up
.1ef7	91 2c		sta ($2c),y			sta 	(temp1),y
.1ef9	a5 2c		lda $2c				lda 	temp1 						; check reached the insert point ?
.1efb	c5 2a		cmp $2a				cmp 	temp0
.1efd	d0 06		bne $1f05			bne 	_ILMNext
.1eff	a5 2d		lda $2d				lda 	temp1+1
.1f01	c5 2b		cmp $2b				cmp 	temp0+1
.1f03	f0 0b		beq $1f10			beq 	_ILMCopy
.1f05					_ILMNext:
.1f05	a5 2c		lda $2c				lda 	temp1
.1f07	d0 02		bne $1f0b			bne 	_ILNoBorrow
.1f09	c6 2d		dec $2d				dec 	temp1+1
.1f0b					_ILNoBorrow:
.1f0b	c6 2c		dec $2c				dec 	temp1
.1f0d	4c f5 1e	jmp $1ef5			jmp 	_ILMove 					; and go round again
.1f10					_ILMCopy:
.1f10	98		tya				tya 								; Y is the offset of the new line.
.1f11	81 2a		sta ($2a,x)			sta 	(temp0,x)					; X = 0 still.
.1f13	a0 01		ldy #$01			ldy 	#1 							; copy in line number.
.1f15	a5 50		lda $50				lda 	esInt0
.1f17	91 2a		sta ($2a),y			sta 	(temp0),y
.1f19	c8		iny				iny
.1f1a	a5 58		lda $58				lda 	esInt1
.1f1c	91 2a		sta ($2a),y			sta 	(temp0),y
.1f1e	a0 00		ldy #$00			ldy 	#0 							; copy the body in
.1f20					_ILMCopy2:
.1f20	b1 28		lda ($28),y			lda 	(codePtr),y
.1f22	c8		iny				iny
.1f23	c8		iny				iny
.1f24	c8		iny				iny
.1f25	91 2a		sta ($2a),y			sta 	(temp0),y
.1f27	88		dey				dey
.1f28	88		dey				dey
.1f29	cc ed 0d	cpy $0ded			cpy 	tokenBufferIndex
.1f2c	d0 f2		bne $1f20			bne 	_ILMCopy2
.1f2e	60		rts				rts

;******  Return to file: interaction/interaction.asm


;******  Processing file: interaction/warm.asm

.1f2f					WarmStartEntry:
.1f2f	a2 ff		ldx #$ff			ldx 	#$FF
.1f31	9a		txs				txs
.1f32	20 6f 1e	jsr $1e6f			jsr 	ForceStandardMode
.1f35	a9 02		lda #$02			lda 	#2							; green text.
.1f37	a2 08		ldx #$08		ldx	#8
.1f39	20 f6 14	jsr $14f6		jsr	deviceHandler
.1f3c	a2 0c		ldx #$0c		ldx	#12
.1f3e	20 f6 14	jsr $14f6		jsr	deviceHandler
.1f41	a5 2a		lda $2a				lda 	temp0	 					; copy temp0 to codePtr
.1f43	85 28		sta $28				sta 	codePtr
.1f45	a5 2b		lda $2b				lda 	temp0+1
.1f47	85 29		sta $29				sta 	codePtr+1
.1f49	a2 06		ldx #$06		ldx	#6
.1f4b	20 f6 14	jsr $14f6		jsr	deviceHandler
.1f4e	a2 08		ldx #$08		ldx	#8
.1f50	20 60 41	jsr $4160		jsr	tokeniserHandler
.1f53	c9 00		cmp #$00			cmp 	#0
.1f55	f0 25		beq $1f7c			beq 	WSEError 					; failed (tokenise can fail if it doesn't know a character e.g. |)
.1f57	a9 ea		lda #$ea			lda 	#(tokenHeader) & $FF
.1f59	85 28		sta $28				sta 	codePtr
.1f5b	a9 0c		lda #$0c			lda 	#(tokenHeader) >> 8
.1f5d	85 29		sta $29				sta 	1+(codePtr)
.1f5f	ad ed 0c	lda $0ced			lda 	tokenBuffer 				; is it a blank line, go get another line.
.1f62	c9 80		cmp #$80			cmp 	#$80
.1f64	f0 c9		beq $1f2f			beq 	WarmStartEntry
.1f66	29 c0		and #$c0			and 	#$C0						; does it start with a number
.1f68	c9 40		cmp #$40			cmp 	#$40 						; e.g. is it 01xx xxxx
.1f6a	f0 15		beq $1f81			beq 	HasLineNumber
.1f6c	a9 00		lda #$00			lda 	#0 							; zero the token header, so it will look like a
.1f6e	8d ea 0c	sta $0cea			sta 	tokenHeader 				; fake program line.
.1f71	8d eb 0c	sta $0ceb			sta 	tokenHeader+1
.1f74	8d ec 0c	sta $0cec			sta 	tokenHeader+2
.1f77	a2 18		ldx #$18		ldx	#24
.1f79	20 64 36	jsr $3664		jsr	mainHandler
.1f7c					WSEError:
.1f7c	a2 1e		ldx #$1e			ldx 	#ErrorID_Tokenise
.1f7e	20 18 15	jsr $1518		jsr	errorHandler
.1f81					HasLineNumber:
.1f81	a0 03		ldy #$03			ldy 	#3 							; get line number
.1f83	a9 00		lda #$00			lda 	#0
.1f85	a2 0a		ldx #$0a		ldx	#10
.1f87	20 64 36	jsr $3664		jsr	mainHandler
.1f8a	a5 60		lda $60				lda 	esInt2		 				; check in range (only 2 bytes)
.1f8c	05 68		ora $68				ora 	esInt3
.1f8e	d0 ec		bne $1f7c			bne 	WSEError
.1f90	98		tya				tya 								; make codePtr point to code after the line number.
.1f91	18		clc				clc 								; by skipping over the tokenised number.
.1f92	65 28		adc $28				adc 	codePtr
.1f94	85 28		sta $28				sta 	codePtr
.1f96	90 02		bcc $1f9a			bcc		_HLNNoCarry
.1f98	e6 29		inc $29				inc 	codePtr+1
.1f9a					_HLNNoCarry:
.1f9a	98		tya				tya 								; subtract that offset from the code buffer index
.1f9b	38		sec				sec
.1f9c	49 ff		eor #$ff			eor 	#$FF
.1f9e	6d ed 0d	adc $0ded			adc 	tokenBufferIndex
.1fa1	18		clc				clc 								; add space allowing for header & $80 trailer
.1fa2	69 04		adc #$04			adc 	#4
.1fa4	8d ed 0d	sta $0ded			sta 	tokenBufferIndex 			; this is the number of bytes occupied.
.1fa7	20 75 1e	jsr $1e75			jsr 	DeleteLine 					; always delete the line, it's deleted and reinserted.
.1faa					_HLNNoDelete:
.1faa	ad ed 0d	lda $0ded			lda 	tokenBufferIndex 			; if line was empty, then don't insert
.1fad	c9 01		cmp #$01			cmp 	#1 							; (the one character is the EOL marker)
.1faf	f0 0c		beq $1fbd			beq 	_HLMEditDone
.1fb1	a5 36		lda $36				lda 	lowMemory+1 				; is there space, if we allow a little bit of
.1fb3	18		clc				clc 								; workspace (1k)
.1fb4	69 04		adc #$04			adc 	#4 							; e.g. 4 x 256
.1fb6	c5 34		cmp $34				cmp 	highMemory+1
.1fb8	b0 0b		bcs $1fc5			bcs 	_HLMMemory 					; nope, won't allowit.
.1fba	20 c8 1e	jsr $1ec8			jsr 	InsertLine 					; insert the line in
.1fbd					_HLMEditDone:
.1fbd	a2 06		ldx #$06		ldx	#6
.1fbf	20 64 36	jsr $3664		jsr	mainHandler
.1fc2	4c 2f 1f	jmp $1f2f			jmp 	WarmStartEntry
.1fc5					_HLMMemory:
.1fc5	a2 22		ldx #$22			ldx 	#ErrorID_Memory
.1fc7	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: interaction/interaction.asm

.1fca					interactionHandler:
.1fca	7c cd 1f	jmp ($1fcd,x)			jmp 	(interactionVectors,x)
.1fcd					interactionVectors:
>1fcd	d3 1f					.word _DummyControlHandler ; index 0
>1fcf	e3 1d					.word ColdStartEntry       ; index 2
>1fd1	2f 1f					.word WarmStartEntry       ; index 4
.1fd3					_DummyControlHandler:
.1fd3	60		rts			rts

;******  Return to file: basic.asm

.1fd4					section_end_interaction:
.1fd4					section_start_main:

;******  Processing file: main/main.asm


;******  Processing file: main/commands/compat/readdata.asm

.0cb0					dataPtr:
>0cb0							.fill 	2
.0cb2					dataIndex:
>0cb2							.fill 	1
.1fd4					CommandRead:
.1fd4	a2 00		ldx #$00			ldx 	#0 							; get a reference to a variable in stack:0
.1fd6	20 17 2f	jsr $2f17			jsr 	EvaluateReference
.1fd9	20 1a 20	jsr $201a			jsr 	SwapDPCP 					; use the data pointer.
.1fdc	b1 28		lda ($28),y			lda 	(codePtr),y 				; see where it is.
.1fde	c8		iny				iny
.1fdf	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; if it is on a comma, it is in data.
.1fe1	f0 07		beq $1fea			beq 	_CRInData
.1fe3	88		dey				dey
.1fe4	a9 d9		lda #$d9			lda 	#TKW_DATA 					; scan forward to a DATA statement.
.1fe6	aa		tax				tax
.1fe7	20 1b 27	jsr $271b			jsr 	ScanForward
.1fea					_CRInData:
.1fea	a2 01		ldx #$01			ldx 	#1 							; evaluate a value at Stack,1
.1fec	20 bf 2e	jsr $2ebf			jsr 	Evaluate
.1fef	ca		dex				dex 								; and write the value.
.1ff0	20 6e 22	jsr $226e			jsr 	WriteValue
.1ff3	20 1a 20	jsr $201a			jsr 	SwapDPCP 					; get the code pointer back.
.1ff6	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows ?
.1ff8	c8		iny				iny
.1ff9	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; if comma, another variable
.1ffb	f0 d7		beq $1fd4			beq 	CommandRead
.1ffd	88		dey				dey
.1ffe	60		rts				rts
.1fff					CommandData:
.1fff	a9 80		lda #$80			lda 	#TOK_EOL 					; go forward to end of line or colon.
.2001	a2 ca		ldx #$ca			ldx 	#TKW_COLON
.2003	20 1b 27	jsr $271b			jsr 	ScanForward
.2006	88		dey				dey 								; ending on EOL is a scan issue, as it increments
.2007	60		rts				rts
.2008					CommandRestore:
.2008	ad c8 0a	lda $0ac8			lda 	basePage
.200b	8d b0 0c	sta $0cb0			sta 	dataPtr
.200e	ad c9 0a	lda $0ac9			lda 	basePage+1
.2011	8d b1 0c	sta $0cb1			sta 	dataPtr+1
.2014	a9 03		lda #$03			lda 	#3
.2016	8d b2 0c	sta $0cb2			sta 	dataIndex
.2019	60		rts				rts
.201a					SwapDPCP:
.201a	8a		txa				txa
.201b	48		pha				pha
.201c	98		tya				tya 								; swap Y, DataIndex
.201d	ac b2 0c	ldy $0cb2			ldy 	DataIndex
.2020	8d b2 0c	sta $0cb2			sta 	DataIndex
.2023	a5 28		lda $28				lda 	codePtr 					; swap code/dataptr low
.2025	ae b0 0c	ldx $0cb0			ldx 	dataptr
.2028	8d b0 0c	sta $0cb0			sta 	dataPtr
.202b	86 28		stx $28				stx 	codePtr
.202d	a5 29		lda $29				lda 	codePtr+1 					; swap code/dataptr high.
.202f	ae b1 0c	ldx $0cb1			ldx 	dataptr+1
.2032	8d b1 0c	sta $0cb1			sta 	dataPtr+1
.2035	86 29		stx $29				stx 	codePtr+1
.2037	68		pla				pla
.2038	aa		tax				tax
.2039	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/compat/transfer.asm

.203a					CommandGOSUB:
.203a	20 dc 2e	jsr $2edc			jsr 	EvaluateRootInteger			; get GOSUB line on stack top.
.203d	a2 04		ldx #$04			ldx 	#4 							; allocate 4 bytes on stack for GOSUB
.203f	a9 47		lda #$47			lda 	#markerGOSUB  				; <marker> <return addr/offset>
.2041	20 11 36	jsr $3611			jsr 	RSClaim
.2044	a9 01		lda #$01			lda 	#1 							; save position at offset 1.
.2046	20 3d 36	jsr $363d			jsr 	RSSavePosition
.2049	a2 00		ldx #$00			ldx 	#0 							; point back at GOSUB line
.204b	f0 1b		beq $2068			beq 	GotoTOS 					; and do a GOTO there.
.204d					CommandRETURN:
.204d	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.204f	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.2051	c9 47		cmp #$47			cmp 	#markerGOSUB 						; does it match
.2053	f0 05		beq $205a			beq 	_isok
.2055	a2 0e		ldx #$0e			ldx 	#ErrorID_returnErr
.2057	20 18 15	jsr $1518		jsr	errorHandler
.205a					_isok:
.205a	a9 01		lda #$01			lda 	#1
.205c	20 50 36	jsr $3650			jsr 	RSLoadPosition 				; reload the position from offset 1.
.205f	a9 04		lda #$04			lda 	#4 							; throw 4 bytes from stack.
.2061	20 33 36	jsr $3633			jsr 	RSFree
.2064	60		rts				rts
.2065					CommandGOTO:
.2065	20 dc 2e	jsr $2edc			jsr 	EvaluateRootInteger 		; get GOTO line on stack top.
.2068					GotoTOS:
.2068	20 ff 29	jsr $29ff			jsr 	ResetCodeAddress 			; simple search.
.206b					_GotoSearch:
.206b	a0 00		ldy #$00			ldy 	#0 							; get offset
.206d	b1 28		lda ($28),y			lda 	(codePtr),y
.206f	f0 21		beq $2092			beq 	_GotoError 					; not found.
.2071	c8		iny				iny									; check LSB match
.2072	b1 28		lda ($28),y			lda 	(codePtr),y
.2074	d5 50		cmp $50,x			cmp 	esInt0,x
.2076	d0 07		bne $207f			bne 	_GotoNext
.2078	c8		iny				iny
.2079	b1 28		lda ($28),y			lda 	(codePtr),y
.207b	d5 58		cmp $58,x			cmp 	esInt1,x
.207d	f0 10		beq $208f			beq 	_GotoFound
.207f					_GotoNext:
.207f	a0 00		ldy #$00			ldy 	#0 							; go next line
.2081	b1 28		lda ($28),y			lda 	(codePtr),y
.2083	18		clc				clc
.2084	65 28		adc $28				adc 	codePtr
.2086	85 28		sta $28				sta 	codePtr
.2088	90 e1		bcc $206b			bcc 	_GotoSearch
.208a	e6 29		inc $29				inc 	codePtr+1
.208c	4c 6b 20	jmp $206b			jmp 	_GotoSearch
.208f					_GotoFound:
.208f	a0 03		ldy #$03			ldy 	#3 							; continue from that line
.2091	60		rts				rts
.2092					_GotoError:
.2092	a2 0c		ldx #$0c			ldx 	#ErrorID_LineNumber
.2094	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/commands/io/input.asm

=32					MaxInputSize = 32
.0cb3					InputBuffer:
>0cb3							.fill 	MaxInputSize+1
.2097					Command_Input:
.2097	b1 28		lda ($28),y			lda 	(codePtr),y 			; see what's next.
.2099	c8		iny				iny
.209a	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 				; ignore commas.
.209c	f0 f9		beq $2097			beq 	Command_Input
.209e	88		dey				dey 							; undo consume
.209f	c9 ca		cmp #$ca			cmp 	#TKW_COLON
.20a1	f0 54		beq $20f7			beq 	_CIExit 				; : or EOL, exit
.20a3	c9 80		cmp #$80			cmp 	#TOK_EOL
.20a5	f0 50		beq $20f7			beq 	_CIExit
.20a7	c9 40		cmp #$40			cmp 	#$40 					; variable ?
.20a9	90 12		bcc $20bd			bcc 	_CIVariable
.20ab	c9 85		cmp #$85			cmp 	#TOK_STR 				; if not quoted string syntax error.
.20ad	d0 43		bne $20f2			bne 	_CISyntax
.20af	a2 00		ldx #$00			ldx 	#0
.20b1	20 d3 2e	jsr $2ed3			jsr 	EvaluateString 			; evaluate and print string
.20b4	20 d0 22	jsr $22d0			jsr 	TOSToTemp0
.20b7	20 c6 21	jsr $21c6			jsr 	PrintString
.20ba	4c 97 20	jmp $2097			jmp 	Command_Input
.20bd					_CIVariable:
.20bd	a2 00		ldx #$00			ldx 	#0 						; evaluate a reference.
.20bf	20 17 2f	jsr $2f17			jsr 	EvaluateReference  		; this is where its going
.20c2					_CIRetry:
.20c2	a9 3f		lda #$3f			lda 	#"?"					; print prompt
.20c4	a2 14		ldx #$14		ldx	#20
.20c6	20 f6 14	jsr $14f6		jsr	deviceHandler
.20c9	98		tya				tya
.20ca	48		pha				pha
.20cb	20 0b 21	jsr $210b			jsr 	InputString 			; input a string (manually)
.20ce	a2 01		ldx #$01			ldx 	#1
.20d0	20 f8 20	jsr $20f8			jsr 	BufferToStackX 			; make stack,x ref input string.
.20d3	a5 48		lda $48				lda 	esType 					; if target type numeric
.20d5	29 40		and #$40			and 	#$40 					; then convert to number
.20d7	d0 11		bne $20ea			bne 	_CIWrite
.20d9	a2 01		ldx #$01			ldx 	#1
.20db	20 d0 22	jsr $22d0			jsr 	TOSToTemp0 				; string address in temp0, goes here.
.20de	a9 0a		lda #$0a			lda 	#10
.20e0	20 e4 33	jsr $33e4			jsr 	MInt32FromString 		; convert it back from a string.
.20e3	68		pla				pla
.20e4	a8		tay				tay
.20e5	b0 03		bcs $20ea			bcs 	_CIWrite 				; successfully converted.
.20e7	18		clc				clc 							; default fail FP conversion
.20e8	90 d8		bcc $20c2			bcc		_CIRetry				; failed, try again.
.20ea					_CIWrite:
.20ea	a2 00		ldx #$00			ldx 	#0
.20ec	20 6e 22	jsr $226e			jsr 	WriteValue
.20ef	4c 97 20	jmp $2097			jmp 	Command_Input
.20f2					_CISyntax:
.20f2	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.20f4	20 18 15	jsr $1518		jsr	errorHandler
.20f7					_CIExit:
.20f7	60		rts				rts
.20f8					BufferToStackX:
.20f8	a9 b3		lda #$b3			lda 	#InputBuffer & $FF
.20fa	95 50		sta $50,x			sta 	esInt0,x
.20fc	a9 0c		lda #$0c			lda 	#InputBuffer >> 8
.20fe	95 58		sta $58,x			sta 	esInt1,x
.2100	a9 00		lda #$00			lda 	#0
.2102	95 60		sta $60,x			sta 	esInt2,x
.2104	95 68		sta $68,x			sta 	esInt3,x
.2106	a9 40		lda #$40			lda 	#$40
.2108	95 48		sta $48,x			sta 	esType,x
.210a	60		rts				rts
.210b					InputString:
.210b	a9 00		lda #$00			lda 	#0
.210d	8d b3 0c	sta $0cb3			sta 	InputBuffer
.2110					_InputLoop:
.2110	a2 02		ldx #$02		ldx	#2
.2112	20 f6 14	jsr $14f6		jsr	deviceHandler
.2115	a2 0a		ldx #$0a		ldx	#10
.2117	20 f6 14	jsr $14f6		jsr	deviceHandler
.211a	c9 00		cmp #$00			cmp 	#0
.211c	f0 f2		beq $2110			beq 	_InputLoop
.211e	c9 08		cmp #$08			cmp 	#8
.2120	f0 19		beq $213b			beq 	_InputBackspace
.2122	c9 0d		cmp #$0d			cmp 	#13
.2124	f0 21		beq $2147			beq 	_InputExit
.2126	ae b3 0c	ldx $0cb3			ldx 	InputBuffer
.2129	e0 20		cpx #$20			cpx 	#MaxInputSize 			; too many characters
.212b	f0 e3		beq $2110			beq 	_InputLoop
.212d	9d b4 0c	sta $0cb4,x			sta 	InputBuffer+1,x 		; write char
.2130	ee b3 0c	inc $0cb3			inc 	InputBuffer 			; advance count.
.2133					_InputPrintLoop:
.2133	a2 14		ldx #$14		ldx	#20
.2135	20 f6 14	jsr $14f6		jsr	deviceHandler
.2138	4c 10 21	jmp $2110			jmp	 	_InputLoop
.213b					_InputBackspace:
.213b	ad b3 0c	lda $0cb3			lda 	InputBuffer 			; at start
.213e	f0 d0		beq $2110			beq 	_InputLoop
.2140	ce b3 0c	dec $0cb3			dec 	InputBuffer
.2143	a9 08		lda #$08			lda 	#8
.2145	d0 ec		bne $2133			bne 	_InputPrintLoop
.2147					_InputExit:
.2147	a2 06		ldx #$06		ldx	#6
.2149	20 f6 14	jsr $14f6		jsr	deviceHandler
.214c	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/io/print.asm

.0cd4					lastPrintToken:
>0cd4							.fill 	1
.214d					Command_Print:
.214d	a9 00		lda #$00			lda 	#0 							; clear LPT to a non token
.214f	8d d4 0c	sta $0cd4			sta 	lastPrintToken
.2152	88		dey				dey
.2153					_PrintLoopSkip:
.2153	c8		iny				iny
.2154					_PrintLoop:
.2154	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows
.2156	c9 80		cmp #$80			cmp 	#TOK_EOL  					; done if end of line or colon
.2158	f0 5b		beq $21b5			beq 	_PrintExit
.215a	c9 ca		cmp #$ca			cmp 	#TKW_COLON
.215c	f0 57		beq $21b5			beq 	_PrintExit
.215e	8d d4 0c	sta $0cd4			sta 	lastPrintToken 				; update Last print token, so we check ; and ,
.2161	c9 cc		cmp #$cc			cmp 	#TKW_SEMICOLON 				; ignore semicolon
.2163	f0 ee		beq $2153			beq 	_PrintLoopSkip
.2165	c9 cd		cmp #$cd			cmp 	#TKW_QUOTE 					; ' is new line
.2167	f0 3c		beq $21a5			beq	 	_PrintNewLine
.2169	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; , is print tab
.216b	f0 40		beq $21ad			beq 	_PrintTab
.216d	20 bd 2e	jsr $2ebd			jsr 	EvaluateRoot 				; evaluate something at the root
.2170	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.2172	85 2a		sta $2a				sta 	temp0
.2174	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.2176	85 2b		sta $2b				sta 	1+(temp0)
.2178	a5 48		lda $48				lda 	esType 						; get type
.217a	f0 15		beq $2191			beq		_PrintInteger
.217c	4a		lsr a				lsr 	a 							; check for floating point
.217d	b0 08		bcs $2187			bcs 	_PrintFloat
.217f					_PrintString:
.217f	a2 00		ldx #$00			ldx 	#0 							; bottom string to temp0
.2181	20 d0 22	jsr $22d0			jsr 	TOSToTemp0
.2184	4c 9f 21	jmp $219f			jmp 	_PrintTemp0 				; print no leading space.
.2187					_PrintFloat:
.2187	a9 00		lda #$00			lda 	#0 							; stack level.
.2189	a2 16		ldx #$16		ldx	#22
.218b	20 de 1d	jsr $1dde		jsr	floatingpointHandler
.218e	4c 98 21	jmp $2198			jmp 	_PrintSpaceTemp0
.2191					_PrintInteger:
.2191	a9 8a		lda #$8a			lda 	#10+$80 					; base 10 signed
.2193	a2 00		ldx #$00			ldx 	#0 							; bottom stack element
.2195	20 cc 34	jsr $34cc			jsr 	MInt32ToString				; convert to text
.2198					_PrintSpaceTemp0:
.2198	a9 20		lda #$20			lda 	#32
.219a	a2 14		ldx #$14		ldx	#20
.219c	20 f6 14	jsr $14f6		jsr	deviceHandler
.219f					_PrintTemp0:
.219f	20 c6 21	jsr $21c6			jsr 	PrintString
.21a2	4c 54 21	jmp $2154			jmp 	_PrintLoop
.21a5					_PrintNewLine:
.21a5	a2 06		ldx #$06		ldx	#6
.21a7	20 f6 14	jsr $14f6		jsr	deviceHandler
.21aa	4c 53 21	jmp $2153			jmp 	_PrintLoopSkip
.21ad					_PrintTab:
.21ad	a2 1a		ldx #$1a		ldx	#26
.21af	20 f6 14	jsr $14f6		jsr	deviceHandler
.21b2	4c 53 21	jmp $2153			jmp 	_PrintLoopSkip
.21b5					_PrintExit:
.21b5	ad d4 0c	lda $0cd4			lda		lastPrintToken 				; check last token
.21b8	c9 cc		cmp #$cc			cmp 	#TKW_SEMICOLON 				; if , or ; do not print NL
.21ba	f0 09		beq $21c5			beq 	_PrintExit2
.21bc	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.21be	f0 05		beq $21c5			beq 	_PrintExit2
.21c0	a2 06		ldx #$06		ldx	#6
.21c2	20 f6 14	jsr $14f6		jsr	deviceHandler
.21c5					_PrintExit2:
.21c5	60		rts				rts
.21c6					PrintString:
.21c6	8a		txa				txa
.21c7	48		pha				pha
.21c8	98		tya				tya
.21c9	48		pha				pha
.21ca	a0 00		ldy #$00			ldy 	#0							; get length
.21cc	b1 2a		lda ($2a),y			lda 	(temp0),y
.21ce	aa		tax				tax 								; into X
.21cf	e0 00		cpx #$00	_PSLoop:cpx 	#0 							; finished ?
.21d1	f0 10		beq $21e3			beq 	_PSExit
.21d3	ca		dex				dex
.21d4	8a		txa				txa
.21d5	48		pha				pha
.21d6	c8		iny				iny
.21d7	b1 2a		lda ($2a),y			lda 	(temp0),y
.21d9	a2 14		ldx #$14		ldx	#20
.21db	20 f6 14	jsr $14f6		jsr	deviceHandler
.21de	68		pla				pla
.21df	aa		tax				tax
.21e0	4c cf 21	jmp $21cf			jmp 	_PSLoop
.21e3					_PSExit:
.21e3	68		pla				pla
.21e4	a8		tay				tay
.21e5	68		pla				pla
.21e6	aa		tax				tax
.21e7	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/io/text.asm

.21e8					Command_CLS:
.21e8	a2 04		ldx #$04		ldx	#4
.21ea	20 f6 14	jsr $14f6		jsr	deviceHandler
.21ed	60		rts				rts
.21ee					Command_Ink:
.21ee	a2 00		ldx #$00			ldx 	#0
.21f0	20 e6 2e	jsr $2ee6			jsr 	EvaluateSmallInteger
.21f3	a2 08		ldx #$08		ldx	#8
.21f5	20 f6 14	jsr $14f6		jsr	deviceHandler
.21f8	60		rts				rts
.21f9					Command_Paper:
.21f9	a2 00		ldx #$00			ldx 	#0
.21fb	20 e6 2e	jsr $2ee6			jsr 	EvaluateSmallInteger
.21fe	a2 12		ldx #$12		ldx	#18
.2200	20 f6 14	jsr $14f6		jsr	deviceHandler
.2203	60		rts				rts
.2204					Command_Locate:
.2204	a2 00		ldx #$00			ldx 	#0
.2206	20 e6 2e	jsr $2ee6			jsr 	EvaluateSmallInteger
.2209	20 f6 35	jsr $35f6			jsr 	CheckComma
.220c	e8		inx				inx
.220d	20 e6 2e	jsr $2ee6			jsr 	EvaluateSmallInteger
.2210	98		tya				tya
.2211	48		pha				pha
.2212	a4 51		ldy $51				ldy 	esInt0+1
.2214	a5 50		lda $50				lda 	esInt0
.2216	a2 10		ldx #$10		ldx	#16
.2218	20 f6 14	jsr $14f6		jsr	deviceHandler
.221b	68		pla				pla
.221c	a8		tay				tay
.221d	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/io/vdu.asm

.221e					Command_VDU:
.221e	20 dc 2e	jsr $2edc			jsr 	EvaluateRootInteger 			; get integer at root.
.2221	a5 50		lda $50				lda 	esInt0
.2223	a2 14		ldx #$14		ldx	#20
.2225	20 f6 14	jsr $14f6		jsr	deviceHandler
.2228					_CVNext:
.2228	b1 28		lda ($28),y			lda 	(codePtr),y 					; what follows ?
.222a	c8		iny				iny
.222b	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 						; comma, do again
.222d	f0 ef		beq $221e			beq 	Command_VDU
.222f	c9 cc		cmp #$cc			cmp 	#TKW_SEMICOLON 					; semicolon, print MSB
.2231	d0 0a		bne $223d			bne 	_CVExit
.2233	a5 58		lda $58				lda 	esInt1
.2235	a2 14		ldx #$14		ldx	#20
.2237	20 f6 14	jsr $14f6		jsr	deviceHandler
.223a	4c 28 22	jmp $2228			jmp 	_CVNext
.223d	88		dey		_CVExit:dey
.223e	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/link.asm


;******  Return to file: main/main.asm


;******  Processing file: main/commands/misc/assert.asm

.223f					Command_Assert:
.223f	20 dc 2e	jsr $2edc			jsr 	EvaluateRootInteger 		; what is being asserted.
.2242	20 9d 35	jsr $359d			jsr 	MInt32Zero 					; is it true ?
.2245	f0 01		beq $2248			beq 	_CAError
.2247	60		rts				rts
.2248					_CAError:
.2248	a2 04		ldx #$04			ldx 	#ErrorID_Assert
.224a	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/commands/misc/dim.asm

.224d					Command_Dim:
.224d	a2 04		ldx #$04		ldx	#4
.224f	20 31 45	jsr $4531		jsr	variableHandler
.2252	b1 28		lda ($28),y			lda 	(codePtr),y 				; see what follows.
.2254	c8		iny				iny
.2255	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; comma follows, go back and do next
.2257	f0 f4		beq $224d			beq 	Command_Dim
.2259	88		dey				dey 								; unpick get
.225a	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/misc/let.asm

.225b					CommandLet:
.225b	a2 00		ldx #$00			ldx 	#0  						; get address to write.
.225d	20 17 2f	jsr $2f17			jsr 	EvaluateReference
.2260	a9 8d		lda #$8d			lda 	#TKW_EQUAL 					; check for equals
.2262	20 de 35	jsr $35de			jsr 	CheckToken
.2265	e8		inx				inx 								; do RHS
.2266	20 bf 2e	jsr $2ebf			jsr 	Evaluate 					; evaluate and dereference
.2269	ca		dex				dex
.226a	20 6e 22	jsr $226e			jsr 	WriteValue 					; write it out
.226d	60		rts				rts
.226e					WriteValue:
.226e	98		tya				tya
.226f	48		pha				pha
.2270	20 d0 22	jsr $22d0			jsr 	TOSToTemp0 					; set temp0 to point to target address.
.2273	b5 48		lda $48,x			lda 	esType,x 					; check the string flags match
.2275	55 49		eor $49,x			eor 	esType+1,x 					; one string, one number causes an error.
.2277	29 40		and #$40			and 	#$40
.2279	d0 50		bne $22cb			bne		_WVType
.227b	a0 01		ldy #$01			ldy 	#1 							; for string, copy 0 and 1.
.227d	b5 48		lda $48,x			lda 	esType,x 					; check for string assignment
.227f	29 40		and #$40			and 	#$40
.2281	d0 1f		bne $22a2			bne 	_WVCopyString
.2283	b5 48		lda $48,x			lda 	esType,x 					; check both are integer.
.2285	15 49		ora $49,x			ora 	esType+1,x
.2287	4a		lsr a				lsr 	a
.2288	90 22		bcc $22ac			bcc 	_WVCopyData4 				; copy 4 data bytes.
.228a	b5 48		lda $48,x			lda 	esType,x
.228c	4a		lsr a				lsr 	a
.228d	90 3c		bcc $22cb			bcc 	_WVType
.228f	e8		inx				inx 								; force the value being written to be a float.
.2290	20 21 2b	jsr $2b21			jsr 	BPMakeFloat
.2293	ca		dex				dex
.2294	20 d0 22	jsr $22d0			jsr 	TOSToTemp0 					; set Temp0 to write address
.2297	e8		inx				inx
.2298	8a		txa				txa
.2299	a2 22		ldx #$22		ldx	#34
.229b	20 de 1d	jsr $1dde		jsr	floatingpointHandler
.229e	aa		tax				tax
.229f	4c c8 22	jmp $22c8			jmp 	_WVCopyExit
.22a2					_WVCopyString:
.22a2	8a		txa				txa
.22a3	a2 10		ldx #$10		ldx	#16
.22a5	20 21 39	jsr $3921		jsr	stringHandler
.22a8	aa		tax				tax
.22a9	4c c8 22	jmp $22c8			jmp 	_WVCopyExit
.22ac					_WVCopyData4:
.22ac	b5 48		lda $48,x			lda 	esType,x 					; is the int ref a byte ref ?
.22ae	29 20		and #$20			and 	#$20 						; (e.g. is bit 5 set)
.22b0	d0 10		bne $22c2			bne 	_WVCopyData1
.22b2	a0 03		ldy #$03			ldy 	#3
.22b4	b5 69		lda $69,x			lda 	esInt3+1,x
.22b6	91 2a		sta ($2a),y			sta 	(temp0),y
.22b8	88		dey				dey
.22b9	b5 61		lda $61,x			lda 	esInt2+1,x
.22bb	91 2a		sta ($2a),y			sta 	(temp0),y
.22bd	88		dey				dey
.22be	b5 59		lda $59,x			lda 	esInt1+1,x
.22c0	91 2a		sta ($2a),y			sta 	(temp0),y
.22c2					_WVCopyData1:
.22c2	a0 00		ldy #$00			ldy 	#0
.22c4	b5 51		lda $51,x			lda 	esInt0+1,x
.22c6	91 2a		sta ($2a),y			sta 	(temp0),y
.22c8					_WVCopyExit:
.22c8	68		pla				pla
.22c9	a8		tay				tay
.22ca	60		rts				rts
.22cb					_WVType:
.22cb	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.22cd	20 18 15	jsr $1518		jsr	errorHandler
.22d0					TOSToTemp0:
.22d0	b5 50		lda $50,x			lda 	esInt0,x
.22d2	85 2a		sta $2a				sta 	temp0
.22d4	b5 58		lda $58,x			lda 	esInt1,x
.22d6	85 2b		sta $2b				sta 	temp0+1
.22d8	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/misc/poke.asm

.22d9					Command_Poke:
.22d9	a9 01		lda #$01			lda 	#1
.22db	d0 06		bne $22e3			bne 	PokeGeneral
.22dd					Command_Doke:
.22dd	a9 02		lda #$02			lda 	#2
.22df	d0 02		bne $22e3			bne 	PokeGeneral
.22e1					Command_Loke:
.22e1	a9 03		lda #$03			lda 	#3
.22e3					PokeGeneral:
.22e3	48		pha				pha 								; save id (PDL = 123)
.22e4	20 dc 2e	jsr $2edc			jsr 	EvaluateRootInteger 		; target address
.22e7	20 f6 35	jsr $35f6			jsr	 	CheckComma
.22ea	e8		inx				inx
.22eb	20 de 2e	jsr $2ede			jsr 	EvaluateInteger 			; what value to POKE ?
.22ee	ca		dex				dex
.22ef	20 d0 22	jsr $22d0			jsr 	TOSToTemp0 					; temp0 points to the target address
.22f2	84 32		sty $32				sty 	tempShort 					; save Y
.22f4	68		pla				pla 								; get copy type (1-3) and dispatch
.22f5	aa		tax				tax
.22f6	ca		dex				dex
.22f7	f0 14		beq $230d			beq 	_Poke1
.22f9	ca		dex				dex
.22fa	f0 0b		beq $2307			beq 	_Poke2
.22fc	a0 03		ldy #$03			ldy 	#3							; put 4 bytes
.22fe	a5 69		lda $69				lda 	esInt3+1
.2300	91 2a		sta ($2a),y			sta 	(temp0),y
.2302	88		dey				dey
.2303	a5 61		lda $61				lda 	esInt2+1
.2305	91 2a		sta ($2a),y			sta 	(temp0),y
.2307					_Poke2:
.2307	a0 01		ldy #$01			ldy 	#1
.2309	a5 59		lda $59				lda 	esInt1+1
.230b	91 2a		sta ($2a),y			sta 	(temp0),y
.230d					_Poke1:
.230d	a0 00		ldy #$00			ldy 	#0
.230f	a5 51		lda $51				lda 	esInt0+1
.2311	91 2a		sta ($2a),y			sta 	(temp0),y
.2313	a4 32		ldy $32				ldy 	tempShort 					; restore Y and exit
.2315	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/misc/rem.asm

.2316					Command_Rem:
.2316					Command_Rem2:
.2316	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows
.2318	c9 85		cmp #$85			cmp 	#TOK_STR 					; if it is a string then skip it.
.231a	d0 06		bne $2322			bne 	_CRNotString
.231c	c8		iny				iny
.231d	98		tya				tya
.231e	38		sec				sec
.231f	71 28		adc ($28),y			adc 	(codePtr),y 				; get string size, add to Y, +1 for the length
.2321	a8		tay				tay
.2322					_CRNotString:
.2322	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/misc/stopend.asm

.2323					CommandStop:
.2323	a2 06		ldx #$06			ldx 	#ErrorID_Stop
.2325	20 18 15	jsr $1518		jsr	errorHandler
.2328					CommandEnd:
.2328	4c 5f 36	jmp $365f			jmp 	WarmStart
.232b					CommandXemu:
.232b	4c ff ff	jmp $ffff			jmp 	$FFFF 						; fudge to crash out of emulator
.232e					AdvanceNextLine:
.232e	a0 00		ldy #$00			ldy 	#0 							; get offset
.2330	b1 28		lda ($28),y			lda 	(codePtr),y
.2332	18		clc				clc 								; add to codePtr
.2333	65 28		adc $28				adc 	codePtr
.2335	85 28		sta $28				sta 	codePtr
.2337	90 02		bcc $233b			bcc 	_ANLNoCarry
.2339	e6 29		inc $29				inc 	codePtr+1
.233b					_ANLNoCarry:
.233b	b1 28		lda ($28),y			lda 	(codePtr),y 				; if end of program (or was just stand alone.
.233d	f0 e9		beq $2328			beq 	CommandEnd 					; execute END
.233f	a0 03		ldy #$03			ldy 	#3 							; start of tokens on line.
.2341	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/for.asm

.2342					Command_FOR:
.2342	a9 46		lda #$46			lda 	#markerFOR 					; allocate the space and set the marker
.2344	a2 0b		ldx #$0b			ldx 	#11
.2346	20 11 36	jsr $3611			jsr 	RSClaim
.2349	20 5b 22	jsr $225b			jsr 	CommandLET 					; do the same as LET FOR [a = 4]
.234c	a5 48		lda $48				lda 	esType 						; check type should be integer reference.
.234e	c9 80		cmp #$80			cmp 	#$80 						; we do not do FOR floats.
.2350	d0 4c		bne $239e			bne 	_CFType
.2352	a9 ce		lda #$ce			lda 	#TKW_TO 					; check TO present.
.2354	20 de 35	jsr $35de			jsr 	CheckToken
.2357	a2 01		ldx #$01			ldx 	#1 							; keep the variable address in stack 0
.2359	20 de 2e	jsr $2ede			jsr 	EvaluateInteger				; get terminal value in stack 1
.235c	98		tya				tya
.235d	48		pha				pha
.235e	a0 04		ldy #$04			ldy 	#4
.2360	a5 50		lda $50				lda		esInt0 						; copy the address of the index variable into 4 and 5
.2362	91 37		sta ($37),y			sta 	(rsPointer),y
.2364	c8		iny				iny
.2365	a5 58		lda $58				lda		esInt1
.2367	91 37		sta ($37),y			sta 	(rsPointer),y
.2369	c8		iny				iny
.236a	a9 01		lda #$01			lda 	#1  						; the default step in 6, (-128 .. 127 only)
.236c	91 37		sta ($37),y			sta 	(rsPointer),y
.236e	c8		iny				iny
.236f	a5 51		lda $51				lda		esInt0+1 					; terminal value in 7 to 11.
.2371	91 37		sta ($37),y			sta 	(rsPointer),y
.2373	c8		iny				iny
.2374	a5 59		lda $59				lda		esInt1+1
.2376	91 37		sta ($37),y			sta 	(rsPointer),y
.2378	c8		iny				iny
.2379	a5 61		lda $61				lda		esInt2+1
.237b	91 37		sta ($37),y			sta 	(rsPointer),y
.237d	c8		iny				iny
.237e	a5 69		lda $69				lda		esInt3+1
.2380	91 37		sta ($37),y			sta 	(rsPointer),y
.2382	68		pla				pla
.2383	a8		tay				tay
.2384	b1 28		lda ($28),y			lda 	(codePtr),y 				; followed by STEP.
.2386	c9 cf		cmp #$cf			cmp 	#TKW_STEP
.2388	d0 0e		bne $2398			bne 	_CFDone
.238a	c8		iny				iny									; skip over step.
.238b	20 de 2e	jsr $2ede			jsr 	EvaluateInteger 			; get step
.238e	98		tya				tya
.238f	48		pha				pha
.2390	b5 50		lda $50,x			lda 	esInt0,x 					; copy it into step (bit lazy here)
.2392	a0 06		ldy #$06			ldy 	#6
.2394	91 37		sta ($37),y			sta 	(rsPointer),y
.2396	68		pla				pla
.2397	a8		tay				tay
.2398					_CFDone:
.2398	a9 01		lda #$01			lda 	#1
.239a	20 3d 36	jsr $363d			jsr 	RSSavePosition 				; save position.
.239d	60		rts				rts
.239e					_CFType:
.239e	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.23a0	20 18 15	jsr $1518		jsr	errorHandler
.23a3					Command_NEXT:
.23a3	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.23a5	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.23a7	c9 46		cmp #$46			cmp 	#markerFOR 						; does it match
.23a9	f0 05		beq $23b0			beq 	_isok
.23ab	a2 10		ldx #$10			ldx 	#ErrorID_nextErr
.23ad	20 18 15	jsr $1518		jsr	errorHandler
.23b0					_isok:
.23b0	b1 28		lda ($28),y			lda 	(codePtr),y 				; is it NEXT <index>
.23b2	c9 40		cmp #$40			cmp 	#$40 						; e.g. a variable follows 00-3F
.23b4	b0 18		bcs $23ce			bcs 	_CNNoIndex
.23b6	a2 00		ldx #$00			ldx 	#0 							; start on stack
.23b8	20 17 2f	jsr $2f17			jsr 	EvaluateReference 			; this is the variable/parameter to localise.
.23bb	98		tya				tya
.23bc	48		pha				pha
.23bd	a0 04		ldy #$04			ldy 	#4 							; check same variable as that stored at +4,+5
.23bf	b1 37		lda ($37),y			lda 	(rsPointer),y
.23c1	d5 50		cmp $50,x			cmp 	esInt0,x
.23c3	d0 76		bne $243b			bne 	_CNBadIndex
.23c5	c8		iny				iny
.23c6	b1 37		lda ($37),y			lda 	(rsPointer),y
.23c8	d5 58		cmp $58,x			cmp 	esInt1,x
.23ca	d0 6f		bne $243b			bne 	_CNBadIndex
.23cc	68		pla				pla
.23cd	a8		tay				tay
.23ce					_CNNoIndex:
.23ce	98		tya				tya
.23cf	48		pha				pha
.23d0	a0 04		ldy #$04			ldy 	#4 							; make temp0 point to the index
.23d2	b1 37		lda ($37),y			lda 	(rsPointer),y
.23d4	85 2a		sta $2a				sta 	temp0
.23d6	c8		iny				iny
.23d7	b1 37		lda ($37),y			lda 	(rsPointer),y
.23d9	85 2b		sta $2b				sta 	temp0+1
.23db	c8		iny				iny
.23dc	a2 00		ldx #$00			ldx 	#0 							; X is the sign extend part of the step.
.23de	b1 37		lda ($37),y			lda 	(rsPointer),y 				; get the step.
.23e0	85 2f		sta $2f				sta 	temp2+1 					; save for later.
.23e2	10 01		bpl $23e5			bpl 	_CNSignX
.23e4	ca		dex				dex  								; X = $FF
.23e5					_CNSignX:
.23e5	18		clc				clc 								; add to the LSB
.23e6	a0 00		ldy #$00			ldy 	#0
.23e8	71 2a		adc ($2a),y			adc 	(temp0),y
.23ea	91 2a		sta ($2a),y			sta 	(temp0),y
.23ec					_CNPropogate:
.23ec	c8		iny				iny  								; add the sign extended in X to the rest.
.23ed	8a		txa				txa
.23ee	71 2a		adc ($2a),y			adc 	(temp0),y
.23f0	91 2a		sta ($2a),y			sta 	(temp0),y
.23f2	c8		iny				iny
.23f3	8a		txa				txa
.23f4	71 2a		adc ($2a),y			adc 	(temp0),y
.23f6	91 2a		sta ($2a),y			sta 	(temp0),y
.23f8	c8		iny				iny
.23f9	8a		txa				txa
.23fa	71 2a		adc ($2a),y			adc 	(temp0),y
.23fc	91 2a		sta ($2a),y			sta 	(temp0),y
.23fe	18		clc				clc 								; point temp1 to the terminal value stored in the stack.
.23ff	a5 37		lda $37				lda 	rsPointer
.2401	69 07		adc #$07			adc 	#7
.2403	85 2c		sta $2c				sta 	temp1
.2405	a9 00		lda #$00			lda 	#0
.2407	85 2e		sta $2e				sta 	temp2 						; clear temp2, which is the OR of all the subtractions.
.2409	a8		tay				tay 								; and clear the Y register again.
.240a	65 38		adc $38				adc 	rsPointer+1
.240c	85 2d		sta $2d				sta 	temp1+1
.240e	38		sec				sec 								; calculate current - limit oring interim values.
.240f	20 47 24	jsr $2447			jsr 	_CNCompare 					; each of these does a byte.
.2412	20 47 24	jsr $2447			jsr 	_CNCompare 					; we calculate the OR of all these subtractions.
.2415	20 47 24	jsr $2447			jsr 	_CNCompare 					; and the carry of the subtraction.
.2418	20 47 24	jsr $2447			jsr 	_CNCompare
.241b	50 02		bvc $241f			bvc 	_CNNoOverflow 				; converts to a signed comparison on the sign bit.
.241d	49 80		eor #$80			eor 	#$80
.241f					_CNNoOverflow:
.241f	a4 2f		ldy $2f				ldy 	temp2+1						; get step back
.2421	30 1d		bmi $2440			bmi 	_CNCheckDownto
.2423	c9 00		cmp #$00			cmp 	#0
.2425	30 0c		bmi $2433			bmi 	_CNLoopRound 				; loop round if < =
.2427	a5 2e		lda $2e				lda 	temp2
.2429	f0 08		beq $2433			beq 	_CNLoopRound
.242b					_CNLoopExit:
.242b	68		pla				pla
.242c	a8		tay				tay
.242d	a9 0b		lda #$0b			lda 	#11
.242f	20 33 36	jsr $3633			jsr 	RSFree
.2432	60		rts				rts
.2433					_CNLoopRound:
.2433	68		pla				pla
.2434	a8		tay				tay
.2435	a9 01		lda #$01			lda 	#1
.2437	20 50 36	jsr $3650			jsr 	RSLoadPosition				; go back to the loop top
.243a	60		rts				rts
.243b					_CNBadIndex:
.243b	a2 13		ldx #$13			ldx 	#ErrorID_BadIndex
.243d	20 18 15	jsr $1518		jsr	errorHandler
.2440					_CNCheckDownto:
.2440	c9 00		cmp #$00			cmp 	#0
.2442	10 ef		bpl $2433			bpl 	_CNLoopRound
.2444	4c 2b 24	jmp $242b			jmp 	_CNLoopExit
.2447					_CNCompare:
.2447	b1 2a		lda ($2a),y			lda 	(temp0),y 					; do the subtraction - compare don't care about answer
.2449	f1 2c		sbc ($2c),y			sbc 	(temp1),y
.244b	05 2e		ora $2e				ora 	temp2 						; Or into temp2 (does not affect carry)
.244d	85 2e		sta $2e				sta 	temp2
.244f	c8		iny				iny
.2450	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/if.asm

.2451					CommandIf:
.2451	20 dc 2e	jsr $2edc			jsr 	EvaluateRootInteger 		; get what's being tested.
.2454	b1 28		lda ($28),y			lda 	(codePtr),y 				; check for IF .. THEN or IF .. GOTO which are single lines.
.2456	c9 91		cmp #$91			cmp 	#TKW_GOTO
.2458	f0 04		beq $245e			beq 	_IfSimple
.245a	c9 a1		cmp #$a1			cmp 	#TKW_THEN
.245c	d0 1b		bne $2479			bne 	_IfComplex
.245e					_IfSimple:
.245e	20 9d 35	jsr $359d			jsr 	MInt32Zero					; check if TOS zero
.2461	f0 10		beq $2473			beq 	_IfEOL 						; go to next line.
.2463	b1 28		lda ($28),y			lda 	(codePtr),y 				; get and skip token.
.2465	c8		iny				iny
.2466	c9 91		cmp #$91			cmp 	#TKW_GOTO 					; was it if GOTO ?
.2468	f0 0c		beq $2476			beq 	_IfGoto 					; do the Goto code
.246a	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows the THEN ?
.246c	29 c0		and #$c0			and 	#$C0 						; check $40-$7F
.246e	c9 40		cmp #$40			cmp 	#$40 						; e.g. number IF x = 0 THEN 170
.2470	f0 04		beq $2476			beq 	_IfGoto
.2472	60		rts				rts 								; else continue on this line.
.2473					_IfEOL:
.2473	4c 2e 23	jmp $232e			jmp 	AdvanceNextLine 			; go to next line
.2476					_IfGoto:
.2476	4c 65 20	jmp $2065			jmp 	CommandGoto
.2479					_IfComplex:
.2479	20 9d 35	jsr $359d			jsr 	MInt32Zero 					; is it true ?
.247c	f0 01		beq $247f			beq 	_IFSkip 					; if non-zero then skip to ELSE/ENDIF
.247e	60		rts				rts 								; else continue.
.247f					_IFSkip:
.247f	a9 d6		lda #$d6			lda	 	#TKW_ELSE 					; test failed, go to ELSE or ENDIF whichever comes first.
.2481	a2 a2		ldx #$a2			ldx 	#TKW_ENDIF
.2483	4c 1b 27	jmp $271b			jmp		ScanForward
.2486					Command_ELSE:
.2486	a2 a2		ldx #$a2			ldx 	#TKW_ENDIF
.2488	8a		txa				txa
.2489	4c 1b 27	jmp $271b			jmp		ScanForward
.248c					Command_ENDIF:
.248c	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/local.asm

.0cd5					storeSize:
>0cd5							.fill 	1
.248d					CommandLocal:
.248d	a2 00		ldx #$00			ldx 	#0
.248f	20 ab 24	jsr $24ab			jsr 	LocaliseVariable 			; localise one.
.2492					_CLCheckNext:
.2492	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows ?
.2494	c8		iny				iny
.2495	c9 8d		cmp #$8d			cmp 	#TKW_EQUAL 					; something local "x = 2" ?
.2497	f0 06		beq $249f			beq 	_CLAssignment
.2499	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; comma try again.
.249b	f0 f0		beq $248d			beq 	CommandLocal
.249d	88		dey				dey
.249e	60		rts				rts
.249f					_CLAssignment:
.249f	a2 01		ldx #$01			ldx 	#1
.24a1	20 bf 2e	jsr $2ebf			jsr 	Evaluate 					; evaluate RHS
.24a4	ca		dex				dex
.24a5	20 6e 22	jsr $226e			jsr 	WriteValue
.24a8	4c 92 24	jmp $2492			jmp 	_CLCheckNext
.24ab					LocaliseVariable:
.24ab	b1 28		lda ($28),y			lda 	(codePtr),y 				; check it's a variable.
.24ad	c9 40		cmp #$40			cmp 	#$40
.24af	b0 67		bcs $2518			bcs 	_LVSyntax
.24b1	8a		txa				txa 								; get the address of that variable.
.24b2	a2 02		ldx #$02		ldx	#2
.24b4	20 31 45	jsr $4531		jsr	variableHandler
.24b7	aa		tax				tax
.24b8	8a		txa				txa
.24b9	48		pha				pha
.24ba	98		tya				tya
.24bb	48		pha				pha
.24bc	20 d0 22	jsr $22d0			jsr 	TOSToTemp0 					; the address of the variable is now in temp0.
.24bf	b5 48		lda $48,x			lda 	esType,x 					; get the type
.24c1	0a		asl a				asl 	a
.24c2	10 16		bpl $24da			bpl 	_LVPushNumber
.24c4	a0 00		ldy #$00			ldy 	#0 							; put address of data in temp1
.24c6	b1 2a		lda ($2a),y			lda 	(temp0),y
.24c8	c8		iny				iny
.24c9	85 2c		sta $2c				sta 	temp1
.24cb	b1 2a		lda ($2a),y			lda 	(temp0),y
.24cd	85 2d		sta $2d				sta 	temp1+1
.24cf	a0 00		ldy #$00			ldy 	#0 	 						; get length
.24d1	b1 2c		lda ($2c),y			lda 	(temp1),y
.24d3	aa		tax				tax 								; into X
.24d4	e8		inx				inx 								; +1 for length.
.24d5	a9 24		lda #$24			lda 	#markerString
.24d7	4c ef 24	jmp $24ef			jmp 	_LVWriteFrame
.24da					_LVPushNumber:
.24da	a5 2a		lda $2a				lda 	temp0 						; storage address and data source are the same
.24dc	85 2c		sta $2c				sta 	temp1
.24de	a5 2b		lda $2b				lda 	temp0+1
.24e0	85 2d		sta $2d				sta 	temp1+1
.24e2	b5 48		lda $48,x			lda 	esType,x 					; put float flag into carry.
.24e4	4a		lsr a				lsr 	a
.24e5	a9 25		lda #$25			lda 	#markerInt 					; get marker and size.
.24e7	a2 04		ldx #$04			ldx 	#VarISize
.24e9	90 04		bcc $24ef			bcc 	_LVIsInteger
.24eb	a9 23		lda #$23			lda 	#markerFloat
.24ed	a2 06		ldx #$06			ldx 	#VarFSize
.24ef					_LVIsInteger:
.24ef					_LVWriteFrame:
.24ef	8e d5 0c	stx $0cd5			stx 	storeSize 					; number of bytes to copy from (temp0)
.24f2	e8		inx				inx 								; allocate 3 bytes, 2 for the address, 1 for the marker.
.24f3	e8		inx				inx
.24f4	e8		inx				inx
.24f5	20 11 36	jsr $3611			jsr 	RSClaim 					; create the stack frame.
.24f8	a5 2a		lda $2a				lda 	temp0 						; copy the target address to slots 1 & 2
.24fa	a0 01		ldy #$01			ldy 	#1
.24fc	91 37		sta ($37),y			sta 	(rsPointer),y
.24fe	c8		iny				iny
.24ff	a5 2b		lda $2b				lda 	temp0+1
.2501	91 37		sta ($37),y			sta 	(rsPointer),y
.2503	a0 00		ldy #$00			ldy 	#0
.2505					_LVCopyData:
.2505	b1 2c		lda ($2c),y			lda 	(temp1),y 					; get data from source, temp1
.2507	c8		iny				iny 								; write allowing for the header bit.
.2508	c8		iny				iny
.2509	c8		iny				iny
.250a	91 37		sta ($37),y			sta 	(rsPointer),y
.250c	88		dey				dey
.250d	88		dey				dey
.250e	ce d5 0c	dec $0cd5			dec 	storeSize 					; do it storesize times
.2511	d0 f2		bne $2505			bne 	_LVCopyData
.2513	68		pla				pla
.2514	a8		tay				tay
.2515	68		pla				pla
.2516	aa		tax				tax
.2517	60		rts				rts
.2518					_LVSyntax:
.2518	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.251a	20 18 15	jsr $1518		jsr	errorHandler
.251d					RestoreLocals:
.251d	a2 00		ldx #$00			ldx 	#0
.251f	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.2521	c9 40		cmp #$40			cmp	 	#64
.2523	90 01		bcc $2526			bcc 	_RLocal
.2525	60		rts				rts
.2526					_RLocal:
.2526	8a		txa				txa
.2527	48		pha				pha
.2528	98		tya				tya
.2529	48		pha				pha
.252a	a0 01		ldy #$01			ldy 	#1 							; copy target address to temp0
.252c	b1 37		lda ($37),y			lda 	(rsPointer),y
.252e	85 2a		sta $2a				sta 	temp0
.2530	c8		iny				iny
.2531	b1 37		lda ($37),y			lda 	(rsPointer),y
.2533	85 2b		sta $2b				sta 	temp0+1
.2535	a0 00		ldy #$00			ldy 	#0 							; get type back.
.2537	b1 37		lda ($37),y			lda 	(rsPointer),y
.2539	c9 24		cmp #$24			cmp 	#markerString 				; string is ... different :)
.253b	f0 28		beq $2565			beq 	_RString
.253d	a2 04		ldx #$04			ldx		#VARISize 					; size integer
.253f	c9 25		cmp #$25			cmp 	#markerInt
.2541	f0 02		beq $2545			beq 	_RIsInteger
.2543	a2 06		ldx #$06			ldx 	#VARFSize 					; size float
.2545					_RIsInteger:
.2545	8a		txa				txa
.2546	48		pha				pha
.2547	a0 03		ldy #$03			ldy 	#3							; start size to copy back from pointer.
.2549					_RCopyBack:
.2549	b1 37		lda ($37),y			lda 	(rsPointer),y
.254b	88		dey				dey
.254c	88		dey				dey
.254d	88		dey				dey
.254e	91 2a		sta ($2a),y			sta 	(temp0),y
.2550	c8		iny				iny
.2551	c8		iny				iny
.2552	c8		iny				iny
.2553	c8		iny				iny
.2554	ca		dex				dex
.2555	d0 f2		bne $2549			bne 	_RCopyBack
.2557	68		pla				pla 								; get size add 3
.2558	18		clc				clc
.2559	69 03		adc #$03			adc 	#3 							; (2 for address one for marker)
.255b					_RRestoreAAndLoop:
.255b	20 33 36	jsr $3633			jsr 	RSFree
.255e	68		pla				pla
.255f	a8		tay				tay
.2560	68		pla				pla
.2561	aa		tax				tax
.2562	4c 1d 25	jmp $251d			jmp 	RestoreLocals 				; go see if there are any more locals.
.2565					_RString:
.2565	a2 00		ldx #$00			ldx 	#0
.2567	a0 01		ldy #$01			ldy 	#1 							; set up for a string write.
.2569	b1 37		lda ($37),y			lda 	(rsPointer),y
.256b	95 50		sta $50,x			sta 	esInt0,x
.256d	c8		iny				iny
.256e	b1 37		lda ($37),y			lda 	(rsPointer),y
.2570	95 58		sta $58,x			sta 	esInt1,x
.2572	18		clc				clc
.2573	a5 37		lda $37				lda 	rsPointer
.2575	69 03		adc #$03			adc 	#3
.2577	95 51		sta $51,x			sta 	esInt0+1,x
.2579	a5 38		lda $38				lda 	rsPointer+1
.257b	69 00		adc #$00			adc 	#0
.257d	95 59		sta $59,x			sta 	esInt1+1,x
.257f	8a		txa				txa
.2580	a2 10		ldx #$10		ldx	#16
.2582	20 21 39	jsr $3921		jsr	stringHandler
.2585	a0 03		ldy #$03			ldy 	#3 							; get string length
.2587	b1 37		lda ($37),y			lda 	(rsPointer),y
.2589	18		clc				clc
.258a	69 04		adc #$04			adc 	#4 							; add 4 (pointer, marker, length) to restore.
.258c	4c 5b 25	jmp $255b			jmp 	_RRestoreAAndLoop

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/proc.asm

.0cd6					paramCount:
>0cd6							.fill 	1
.258f					CallProc:
.258f	20 17 26	jsr $2617			jsr 	FindProcedure 				; find procedure, put in temp0. A contains name length.
.2592	48		pha				pha 								; save length on stack
.2593	85 32		sta $32				sta 	tempShort 					; save length in tempShort
.2595	a5 2b		lda $2b				lda 	temp0+1 					; save procedure target on stack.
.2597	48		pha				pha
.2598	a5 2a		lda $2a				lda 	temp0
.259a	48		pha				pha
.259b	98		tya				tya 								; calculate Y + length
.259c	18		clc				clc
.259d	65 32		adc $32				adc 	tempShort
.259f	a8		tay				tay
.25a0	a2 00		ldx #$00			ldx 	#0 							; where the first parameter goes - 1
.25a2					_CallProcEvalParams:
.25a2	e8		inx				inx
.25a3	b1 28		lda ($28),y			lda 	(codePtr),y 				; do we have ) , e.g. the end of the parameters ?
.25a5	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.25a7	f0 0b		beq $25b4			beq 	_CPDoneParams
.25a9	20 bf 2e	jsr $2ebf			jsr 	Evaluate 					; evaluate a parameter
.25ac	b1 28		lda ($28),y			lda 	(codePtr),Y 				; get what's next, preconsume
.25ae	c8		iny				iny
.25af	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; if comma, go get another parameter
.25b1	f0 ef		beq $25a2			beq 	_CallProcEvalParams
.25b3	88		dey				dey 								; undo consumption.
.25b4					_CPDoneParams:
.25b4	20 e9 35	jsr $35e9			jsr 	CheckRightParen 			; check closing parenthesis.
.25b7	8e d6 0c	stx $0cd6			stx 	paramCount 					; store parameter count+1
.25ba	a2 04		ldx #$04			ldx 	#4							; make space on stack
.25bc	a9 50		lda #$50			lda 	#markerPROC
.25be	20 11 36	jsr $3611			jsr 	RSClaim
.25c1	a9 01		lda #$01			lda 	#1 							; store return address.
.25c3	20 3d 36	jsr $363d			jsr 	RSSavePosition
.25c6	68		pla				pla 								; get the new code Ptr
.25c7	85 28		sta $28				sta 	codePtr
.25c9	68		pla				pla
.25ca	85 29		sta $29				sta 	codePtr+1
.25cc	68		pla				pla 								; length of name + 4 is the param start.
.25cd	18		clc				clc
.25ce	69 04		adc #$04			adc 	#4
.25d0	a8		tay				tay
.25d1	a2 ff		ldx #$ff			ldx 	#$FF
.25d3					_CPLoadParameters:
.25d3	e8		inx				inx 								; point to where the address should be loaded.
.25d4	ec d6 0c	cpx $0cd6			cpx 	paramCount 					; too many parameters in definition ?
.25d7	f0 1e		beq $25f7			beq 	_CPParamError
.25d9	b1 28		lda ($28),y			lda 	(codePtr),y					; what follows
.25db	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN 				; is it the right bracket
.25dd	f0 0e		beq $25ed			beq 	_CPParamComplete 			; done all the parameters, perhaps.
.25df	20 ab 24	jsr $24ab			jsr 	LocaliseVariable 			; make following variable local, ref in tos,x
.25e2	20 6e 22	jsr $226e			jsr 	WriteValue 					; copy the evaluated parameter into there.
.25e5	b1 28		lda ($28),y			lda 	(codePtr),y 				; followed by a comma ?
.25e7	c8		iny				iny
.25e8	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.25ea	f0 e7		beq $25d3			beq 	_CPLoadParameters
.25ec	88		dey				dey 								; no, unconsume and check for )
.25ed					_CPParamComplete:
.25ed	20 e9 35	jsr $35e9			jsr 	CheckRightParen 			; check )
.25f0	e8		inx				inx 								; check right number of parameters have been consumed
.25f1	ec d6 0c	cpx $0cd6			cpx 	paramCount
.25f4	d0 01		bne $25f7			bne 	_CPParamError
.25f6	60		rts				rts
.25f7					_CPParamError:
.25f7	a2 18		ldx #$18			ldx 	#ErrorID_Params
.25f9	20 18 15	jsr $1518		jsr	errorHandler
.25fc					ReturnProc:
.25fc	20 1d 25	jsr $251d			jsr 	RestoreLocals 				; get the locals back.
.25ff	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.2601	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.2603	c9 50		cmp #$50			cmp 	#markerPROC 						; does it match
.2605	f0 05		beq $260c			beq 	_isok
.2607	a2 12		ldx #$12			ldx 	#ErrorID_endProcErr
.2609	20 18 15	jsr $1518		jsr	errorHandler
.260c					_isok:
.260c	a9 01		lda #$01			lda 	#1
.260e	20 50 36	jsr $3650			jsr 	RSLoadPosition 				; reload the position from offset 1.
.2611	a9 04		lda #$04			lda 	#4 							; throw 4 bytes from stack.
.2613	20 33 36	jsr $3633			jsr 	RSFree
.2616	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/proctable.asm

.0cd7					procList:
>0cd7							.fill 	2		 					; terminated by name high being zero.
.0cd9					yInLine:
>0cd9							.fill 	1
.2617					FindProcedure:
.2617	8c d9 0c	sty $0cd9			sty 	yInLine 					; save current position.
.261a	20 d5 26	jsr $26d5			jsr 	CalculateProcedureHash		; calculate the hash of the procedure.
.261d	85 2c		sta $2c				sta 	temp1
.261f	ad d7 0c	lda $0cd7			lda		procList 					; put procList address in temp2
.2622	85 2e		sta $2e				sta 	temp2
.2624	ad d8 0c	lda $0cd8			lda 	procList+1
.2627	85 2f		sta $2f				sta 	temp2+1
.2629	a0 00		ldy #$00			ldy 	#0 							; position in this table.
.262b					_FPLoop:
.262b	b1 2e		lda ($2e),y			lda 	(temp2),y
.262d	f0 4f		beq $267e			beq 	_FPError 					; if so, we don't know this procedure.
.262f	85 2b		sta $2b				sta 	temp0+1 					; copy MSB/LSB to temp0 as we go.
.2631	c8		iny				iny
.2632	b1 2e		lda ($2e),y			lda 	(temp2),y
.2634	85 2a		sta $2a				sta 	temp0
.2636	c8		iny				iny
.2637	b1 2e		lda ($2e),y			lda 	(temp2),y					; check the procedure hash.
.2639	c5 2c		cmp $2c				cmp 	temp1
.263b	d0 2b		bne $2668			bne 	_FPNext 					; hash is different, go to next.
.263d	38		sec				sec
.263e	ad d9 0c	lda $0cd9			lda 	yInLine 					; position in line must be at least 4
.2641	e9 04		sbc #$04			sbc 	#4
.2643	18		clc				clc
.2644	65 28		adc $28				adc 	codePtr
.2646	85 30		sta $30				sta 	temp3
.2648	a5 29		lda $29				lda 	codePtr+1
.264a	69 00		adc #$00			adc 	#0
.264c	85 31		sta $31				sta 	temp3+1
.264e	98		tya				tya
.264f	48		pha				pha
.2650	a0 04		ldy #$04			ldy 	#4
.2652					_FPCName:
.2652	b1 30		lda ($30),y			lda 	(temp3),y 					; check the same
.2654	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.2656	d0 0e		bne $2666			bne 	_FPpulYNext 				; if different go to next one.
.2658	c8		iny				iny
.2659	c9 3a		cmp #$3a			cmp 	#$3A
.265b	90 f5		bcc $2652			bcc 	_FPCName 					; compare the whole lot....
.265d	68		pla				pla 								; throw away the saved Y
.265e	98		tya				tya 								; length of name is Y-4
.265f	38		sec				sec
.2660	e9 04		sbc #$04			sbc 	#4
.2662	ac d9 0c	ldy $0cd9			ldy 	yInLine  					; get the original Y back
.2665	60		rts				rts
.2666					_FPpulYNext:
.2666	68		pla				pla
.2667	a8		tay				tay
.2668					_FPNext:
.2668	c8		iny				iny 								; next procedure record.
.2669	10 c0		bpl $262b			bpl 	_FPLoop 					; if done 128 already ... e.g. Y -ve
.266b	98		tya				tya 								; subtract 128 from Y
.266c	38		sec				sec
.266d	e9 80		sbc #$80			sbc 	#128
.266f	a8		tay				tay
.2670	18		clc				clc 								; add 128 to temp2, so we can have more than
.2671	a5 2e		lda $2e				lda 	temp2 						; 255/3 = 85 procedures
.2673	69 80		adc #$80			adc 	#128
.2675	85 2e		sta $2e				sta 	temp2
.2677	90 b2		bcc $262b			bcc 	_FPLoop
.2679	e6 2f		inc $2f				inc 	temp2+1
.267b	4c 2b 26	jmp $262b			jmp 	_FPLoop
.267e					_FPError:
.267e	a2 17		ldx #$17			ldx 	#ErrorID_NoProc
.2680	20 18 15	jsr $1518		jsr	errorHandler
.2683					ScanProc:
.2683	98		tya				tya
.2684	48		pha				pha
.2685	a5 35		lda $35				lda 	lowMemory 					; copy the start of the procList, at low memory
.2687	8d d7 0c	sta $0cd7			sta 	procList
.268a	a5 36		lda $36				lda 	lowMemory+1
.268c	8d d8 0c	sta $0cd8			sta 	procList+1
.268f	20 ff 29	jsr $29ff			jsr 	ResetCodeAddress 			; back to the start.
.2692					_ScanLoop:
.2692	a0 00		ldy #$00			ldy 	#0 							; check reached program end
.2694	b1 28		lda ($28),y			lda 	(codePtr),y
.2696	f0 2a		beq $26c2			beq 	_ScanExit
.2698	a0 03		ldy #$03			ldy 	#3							; get first token
.269a	b1 28		lda ($28),y			lda 	(codePtr),y
.269c	c9 9d		cmp #$9d			cmp 	#TKW_DEFPROC				; skip to next if not DEFPROC
.269e	d0 12		bne $26b2			bne 	_ScanNext
.26a0	a5 29		lda $29				lda 	codePtr+1 					; write high and low address of this line.
.26a2	20 ca 26	jsr $26ca			jsr 	_ScanWrite
.26a5	a5 28		lda $28				lda 	codePtr
.26a7	20 ca 26	jsr $26ca			jsr 	_ScanWrite
.26aa	a0 04		ldy #$04			ldy 	#4 							; start of name part
.26ac	20 d5 26	jsr $26d5			jsr 	CalculateProcedureHash 		; calculate procedure hash
.26af	20 ca 26	jsr $26ca			jsr 	_ScanWrite					; and write that
.26b2					_ScanNext:
.26b2	18		clc				clc
.26b3	a0 00		ldy #$00			ldy 	#0
.26b5	b1 28		lda ($28),y			lda 	(codePtr),y
.26b7	65 28		adc $28				adc 	codePtr
.26b9	85 28		sta $28				sta 	codePtr
.26bb	90 d5		bcc $2692			bcc 	_ScanLoop
.26bd	e6 29		inc $29				inc 	codePtr+1
.26bf	4c 92 26	jmp $2692			jmp 	_ScanLoop
.26c2					_ScanExit:
.26c2	a9 00		lda #$00			lda 	#0 							; write ending zero.
.26c4	20 ca 26	jsr $26ca			jsr 	_ScanWrite
.26c7	68		pla				pla
.26c8	a8		tay				tay
.26c9	60		rts				rts
.26ca					_ScanWrite:
.26ca	a0 00		ldy #$00			ldy 	#0
.26cc	91 35		sta ($35),y			sta 	(lowMemory),y
.26ce	e6 35		inc $35				inc 	lowMemory
.26d0	d0 02		bne $26d4			bne 	_SWNoCarry
.26d2	e6 36		inc $36				inc 	lowMemory+1
.26d4					_SWNoCarry:
.26d4	60		rts				rts
.26d5					CalculateProcedureHash:
.26d5	a9 00		lda #$00			lda 	#0 							; clear hash.
.26d7	85 2a		sta $2a				sta 	temp0
.26d9					_CPHLoop:
.26d9	18		clc				clc 								; add character and rotate and add carry back in
.26da	b1 28		lda ($28),y			lda 	(codePtr),y
.26dc	65 2a		adc $2a				adc 	temp0
.26de	6a		ror a				ror 	a
.26df	69 0d		adc #$0d			adc 	#13 						; primes usually good for this sort of thing.
.26e1	85 2a		sta $2a				sta 	temp0 						; (down with this sort of thing)
.26e3	b1 28		lda ($28),y			lda 	(codePtr),y
.26e5	c8		iny				iny 								; advance incase we go round again.
.26e6	c9 3a		cmp #$3a			cmp 	#$3A
.26e8	90 ef		bcc $26d9			bcc 	_CPHLoop
.26ea	a5 2a		lda $2a				lda 	temp0
.26ec	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/repeat.asm

.26ed					Command_Repeat:
.26ed	a2 04		ldx #$04			ldx 	#4 							; allocate 4 bytes on stack for REPEAT
.26ef	a9 52		lda #$52			lda 	#markerREPEAT 				; repeat marker allocate 4 bytes
.26f1	20 11 36	jsr $3611			jsr 	RSClaim
.26f4	a9 01		lda #$01			lda 	#1 							; save position at offset 1.
.26f6	20 3d 36	jsr $363d			jsr 	RSSavePosition
.26f9	60		rts				rts
.26fa					Command_Until:
.26fa	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.26fc	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.26fe	c9 52		cmp #$52			cmp 	#markerREPEAT 						; does it match
.2700	f0 05		beq $2707			beq 	_isok
.2702	a2 0f		ldx #$0f			ldx 	#ErrorID_untilErr
.2704	20 18 15	jsr $1518		jsr	errorHandler
.2707					_isok:
.2707	20 dc 2e	jsr $2edc			jsr 	EvaluateRootInteger 		; at the bottom.
.270a	20 9d 35	jsr $359d			jsr 	MInt32Zero					; check if TOS zero
.270d	d0 06		bne $2715			bne 	_CUExit
.270f	a9 01		lda #$01			lda 	#1
.2711	20 50 36	jsr $3650			jsr 	RSLoadPosition 				; reload the position from offset 1.
.2714	60		rts				rts
.2715					_CUExit:
.2715	a9 04		lda #$04			lda 	#4 							; throw 4 bytes from stack.
.2717	20 33 36	jsr $3633			jsr 	RSFree
.271a	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/scanner.asm

.271b					ScanForward:
.271b	85 2c		sta $2c				sta 	temp1 						; save tokens to search in temp1/temp1+1
.271d	86 2d		stx $2d				stx 	temp1+1
.271f	a9 00		lda #$00			lda 	#0 							; temp2 counts structure levels.
.2721	85 2e		sta $2e				sta 	temp2
.2723	b1 28		lda ($28),y	_SFLoop:lda 	(codePtr),y 				; look at the next token.
.2725	c8		iny				iny
.2726	a6 2e		ldx $2e				ldx 	temp2 						; check structure levels are zero.
.2728	d0 08		bne $2732			bne 	_SFNoCheck 					; if so, check token against entered values.
.272a	c5 2c		cmp $2c				cmp 	temp1 						; if either matches, we've reached the token
.272c	f0 24		beq $2752			beq 	_SFExit 					; at the same strcture depth.
.272e	c5 2d		cmp $2d				cmp 	temp1+1
.2730	f0 20		beq $2752			beq 	_SFExit
.2732					_SFNoCheck:
.2732	c9 80		cmp #$80			cmp 	#$80 						; if it is 00-7F (variable/number) just skip it.
.2734	90 ed		bcc $2723			bcc 	_SFLoop
.2736	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; $80-$85 is various specials.
.2738	90 19		bcc $2753			bcc 	_SFSpecials
.273a	c9 99		cmp #$99			cmp 	#TOK_STRUCTST 				; if < structure start then continue
.273c	90 e5		bcc $2723			bcc 	_SFLoop
.273e	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST 				; if >= unary start (after structure) then continue.
.2740	b0 e1		bcs $2723			bcs 	_SFLoop
.2742	aa		tax				tax  								; token in X, and look up the adjuster.
.2743	bd fa 2d	lda $2dfa,x			lda 	ELBinaryOperatorInfo-TOK_BINARYST,x
.2746	38		sec				sec 								; convert to an offset ($FF,$01)
.2747	e9 81		sbc #$81			sbc 	#$81
.2749	18		clc				clc 								; add to depth
.274a	65 2e		adc $2e				adc 	temp2
.274c	85 2e		sta $2e				sta 	temp2
.274e	10 d3		bpl $2723			bpl 	_SFLoop 					; +ve okay to continue
.2750	30 07		bmi $2759			bmi 	SFError 					; if gone -ve then we have a nesting error
.2752	60		rts		_SFExit:rts
.2753					_SFSpecials:
.2753	20 5e 27	jsr $275e			jsr 	ScannerSkipSpecial
.2756	4c 23 27	jmp $2723			jmp 	_SFLoop
.2759					SFError:
.2759	a2 14		ldx #$14			ldx 	#ErrorID_Struct
.275b	20 18 15	jsr $1518		jsr	errorHandler
.275e					ScannerSkipSpecial:
.275e	c9 80		cmp #$80			cmp 	#TOK_EOL 					; $80, advance to next line.
.2760	f0 10		beq $2772			beq 	_SFNextLine
.2762	c9 84		cmp #$84			cmp 	#TOK_FPC					; $84, skip embedded float
.2764	f0 2b		beq $2791			beq 	_SFFloatSkip
.2766	c9 85		cmp #$85			cmp 	#TOK_STR 					; $85, skip string
.2768	f0 02		beq $276c			beq 	_SFSkipString
.276a	c8		iny				iny									; $81,$82,$83 shift, so just advance over the shifted
.276b	60		rts				rts 								; token.
.276c					_SFSkipString:
.276c	98		tya				tya
.276d	38		sec				sec
.276e	71 28		adc ($28),y			adc 	(codePtr),y
.2770	a8		tay				tay
.2771	60		rts				rts
.2772					_SFNextLine:
.2772	a0 00		ldy #$00			ldy 	#0 							; get offset
.2774	b1 28		lda ($28),y			lda 	(codePtr),y
.2776	18		clc				clc 								; add to code pointer.
.2777	65 28		adc $28				adc 	codePtr
.2779	85 28		sta $28				sta 	codePtr
.277b	90 02		bcc $277f			bcc		_SFNLNoCarry
.277d	e6 29		inc $29				inc 	codePtr+1
.277f					_SFNLNoCarry:
.277f	b1 28		lda ($28),y			lda 	(codePtr),y 				; reached the end of the program.
.2781	d0 0b		bne $278e			bne		_SFXNL 						; no go round again
.2783	a5 2c		lda $2c				lda 	temp1
.2785	c9 d9		cmp #$d9			cmp 	#TKW_DATA 					; if searching for Data different error.
.2787	d0 d0		bne $2759			bne 	SFError 					; read uses this to search for data statements
.2789	a2 1d		ldx #$1d			ldx 	#ErrorID_DataError
.278b	20 18 15	jsr $1518		jsr	errorHandler
.278e	a0 03		ldy #$03	_SFXNL:	ldy 	#3
.2790	60		rts				rts
.2791					_SFFloatSkip:
.2791	98		tya				tya 								; skip over an embedded float.
.2792	18		clc				clc
.2793	69 05		adc #$05			adc 	#FloatEmbeddedSize
.2795	a8		tay				tay
.2796	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/while.asm

.2797					Command_While:
.2797	a9 57		lda #$57			lda 	#markerWhile 				; gosub marker allocate 4 bytes.
.2799	a2 04		ldx #$04			ldx 	#4
.279b	20 11 36	jsr $3611			jsr 	RSClaim 					; create on stack.
.279e	88		dey				dey
.279f	a9 01		lda #$01			lda 	#1
.27a1	20 3d 36	jsr $363d			jsr 	RSSavePosition 				; save position before the WHILE keyword.
.27a4	c8		iny				iny
.27a5	20 dc 2e	jsr $2edc			jsr 	EvaluateRootInteger			; get the conditional
.27a8	20 9d 35	jsr $359d			jsr 	MInt32Zero 	 				; if zero, skip forward to the fail code.
.27ab	f0 01		beq $27ae			beq 	_CWFail
.27ad	60		rts				rts
.27ae					_CWFail:
.27ae	a9 04		lda #$04			lda 	#4
.27b0	20 33 36	jsr $3633			jsr 	RSFree 						; close the just opened position.
.27b3	a9 9f		lda #$9f			lda 	#TKW_WEND 					; scan forward past WEND.
.27b5	aa		tax				tax
.27b6	20 1b 27	jsr $271b			jsr 	ScanForward
.27b9	60		rts				rts
.27ba					Command_Wend:
.27ba	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.27bc	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.27be	c9 57		cmp #$57			cmp 	#markerWHILE 						; does it match
.27c0	f0 05		beq $27c7			beq 	_isok
.27c2	a2 11		ldx #$11			ldx 	#ErrorID_wendErr
.27c4	20 18 15	jsr $1518		jsr	errorHandler
.27c7					_isok:
.27c7	a9 01		lda #$01			lda 	#1
.27c9	20 50 36	jsr $3650			jsr 	RSLoadPosition				; go back until true
.27cc	a9 04		lda #$04			lda 	#4
.27ce	20 33 36	jsr $3633			jsr 	RSFree 						; close the loop
.27d1	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/system/clear.asm

.27d2					CommandClear:
.27d2					XCommandClear:
.27d2	98		tya				tya
.27d3	48		pha				pha
.27d4	ad cc 0a	lda $0acc			lda 	endMemory					; set high memory = end of memory
.27d7	85 33		sta $33				sta 	highMemory
.27d9	ad cd 0a	lda $0acd			lda 	endMemory+1
.27dc	85 34		sta $34				sta 	highMemory+1
.27de	ad c8 0a	lda $0ac8			lda 	basePage 					; work out where the program ends.
.27e1	85 2a		sta $2a				sta 	temp0
.27e3	ad c9 0a	lda $0ac9			lda 	basePage+1
.27e6	85 2b		sta $2b				sta 	temp0+1
.27e8					_CCFindEnd:
.27e8	a0 00		ldy #$00			ldy 	#0
.27ea	b1 2a		lda ($2a),y			lda 	(temp0),y
.27ec	f0 0c		beq $27fa			beq 	_CCFoundEnd 				; offset zero is end.
.27ee	18		clc				clc
.27ef	65 2a		adc $2a				adc 	temp0 						; move to next line
.27f1	85 2a		sta $2a				sta 	temp0
.27f3	90 f3		bcc $27e8			bcc 	_CCFindEnd
.27f5	e6 2b		inc $2b				inc 	temp0+1
.27f7	4c e8 27	jmp $27e8			jmp 	_CCFindEnd
.27fa					_CCFoundEnd:
.27fa	a5 2a		lda $2a				lda 	temp0 						; put temp0 in lowMemory
.27fc	85 35		sta $35				sta 	lowMemory
.27fe	a5 2b		lda $2b				lda 	temp0+1
.2800	85 36		sta $36				sta 	lowMemory+1
.2802	18		clc				clc 								; put temp0+1 in endProgram
.2803	a5 2a		lda $2a				lda 	temp0
.2805	69 01		adc #$01			adc 	#1
.2807	8d ca 0a	sta $0aca			sta 	endProgram
.280a	a5 2b		lda $2b				lda 	temp0+1
.280c	69 00		adc #$00			adc 	#0
.280e	8d cb 0a	sta $0acb			sta 	endProgram+1
.2811	18		clc				clc 								; put a bit of space in.
.2812	a5 35		lda $35				lda 	lowMemory
.2814	69 04		adc #$04			adc 	#4
.2816	85 35		sta $35				sta 	lowMemory
.2818	90 02		bcc $281c			bcc 	_CCNoCarry
.281a	e6 36		inc $36				inc 	lowMemory+1
.281c					_CCNoCarry:
.281c	20 03 36	jsr $3603			jsr 	RSReset 					; reset the return stack.
.281f	a2 06		ldx #$06		ldx	#6
.2821	20 31 45	jsr $4531		jsr	variableHandler
.2824	20 83 26	jsr $2683			jsr 	ScanProc 					; scan for procedures
.2827	20 08 20	jsr $2008			jsr 	CommandRestore 				; do a restore
.282a	68		pla				pla
.282b	a8		tay				tay
.282c	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/system/list.asm

.0cda					structIndent:
>0cda							.fill 	1
.282d					CommandList:
.282d	a2 00		ldx #$00			ldx		#0 							; set start/end lines in stack 0/1 to 0 and $FFFF
.282f	8e da 0c	stx $0cda			stx 	structIndent
.2832	20 76 35	jsr $3576			jsr 	MInt32False
.2835	e8		inx				inx
.2836	20 72 35	jsr $3572			jsr 	MInt32True
.2839	b1 28		lda ($28),y			lda 	(codePtr),y 				; look at first token
.283b	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; list ,xxxx
.283d	f0 15		beq $2854			beq 	_CLEndLine
.283f	c9 00		cmp #$00			cmp 	#0 							; list ... on its own.
.2841	30 1b		bmi $285e			bmi 	_CLDoListing 				; do the whole lot.
.2843	a2 00		ldx #$00			ldx 	#0 							; get start line at stack:0
.2845	20 de 2e	jsr $2ede			jsr 	EvaluateInteger
.2848	b1 28		lda ($28),y			lda 	(codePtr),y 				; , follows ?
.284a	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.284c	f0 06		beq $2854			beq 	_CLEndLine
.284e	20 b4 34	jsr $34b4			jsr 	MInt32CopyUp 				; copy first to second if just a line number on its
.2851	4c 5e 28	jmp $285e			jmp 	_CLDoListing 				; own e.g. list 1100
.2854					_CLEndLine:
.2854	c8		iny				iny 								; skip comma
.2855	b1 28		lda ($28),y			lda 	(codePtr),y  				; no number follows, then its list 1000,
.2857	30 05		bmi $285e			bmi 	_CLDoListing
.2859	a2 01		ldx #$01			ldx 	#1 							; get the last line to list
.285b	20 de 2e	jsr $2ede			jsr 	EvaluateInteger				; get end
.285e					_CLDoListing:
.285e	20 ff 29	jsr $29ff			jsr 	ResetCodeAddress 			; back to the start.
.2861					_CLCheckLoop:
.2861	a2 02		ldx #$02		ldx	#2
.2863	20 f6 14	jsr $14f6		jsr	deviceHandler
.2866	a0 00		ldy #$00			ldy 	#0							; check end.
.2868	b1 28		lda ($28),y			lda 	(codePtr),y
.286a	f0 41		beq $28ad			beq 	_CLEnd
.286c	a2 00		ldx #$00			ldx 	#0 							; compare vs lower.
.286e	20 b0 28	jsr $28b0			jsr 	CLCompareLineTOS
.2871	c9 ff		cmp #$ff			cmp 	#255 						; if < skip
.2873	f0 28		beq $289d			beq 	_CLNext
.2875	e8		inx				inx
.2876	20 b0 28	jsr $28b0			jsr 	CLCompareLineTOS 			; compare vs higher
.2879	c9 01		cmp #$01			cmp 	#1
.287b	f0 20		beq $289d			beq 	_CLNext
.287d	a9 80		lda #$80			lda 	#$80 						; undo any down indents this line.
.287f	20 d2 28	jsr $28d2			jsr 	CLStructureCheck
.2882	ad da 0c	lda $0cda			lda 	structIndent 				; indent level.
.2885	10 02		bpl $2889			bpl 	_CLPositive
.2887	a9 00		lda #$00			lda 	#0
.2889					_CLPositive:
.2889	a2 04		ldx #$04		ldx	#4
.288b	20 60 41	jsr $4160		jsr	tokeniserHandler
.288e	a9 82		lda #$82			lda 	#$82 						; up indents from this point on.
.2890	20 d2 28	jsr $28d2			jsr 	CLStructureCheck
.2893	ad da 0c	lda $0cda			lda 	structIndent
.2896	10 05		bpl $289d			bpl 	_CLNext
.2898	a9 00		lda #$00			lda 	#0
.289a	8d da 0c	sta $0cda			sta 	structIndent
.289d					_CLNext:
.289d	a0 00		ldy #$00			ldy 	#0 							; go to next line.
.289f	b1 28		lda ($28),y			lda 	(codePtr),y
.28a1	18		clc				clc
.28a2	65 28		adc $28				adc 	codePtr
.28a4	85 28		sta $28				sta 	codePtr
.28a6	90 b9		bcc $2861			bcc 	_CLCheckLoop
.28a8	e6 29		inc $29				inc 	codePtr+1
.28aa	4c 61 28	jmp $2861			jmp 	_CLCheckLoop
.28ad					_CLEnd:
.28ad	4c 5f 36	jmp $365f			jmp 	WarmStart 					; warm start after list.
.28b0					CLCompareLineTOS:
.28b0	a0 01		ldy #$01			ldy 	#1
.28b2	b1 28		lda ($28),y			lda 	(codePtr),y
.28b4	55 50		eor $50,x			eor 	esInt0,x
.28b6	85 2a		sta $2a				sta 	temp0
.28b8	c8		iny				iny
.28b9	b1 28		lda ($28),y			lda 	(codePtr),y
.28bb	55 58		eor $58,x			eor 	esInt1,x
.28bd	05 2a		ora $2a				ora 	temp0
.28bf	f0 10		beq $28d1			beq 	_CLCLTExit
.28c1	88		dey				dey
.28c2	b1 28		lda ($28),y			lda 	(codePtr),y
.28c4	d5 50		cmp $50,x			cmp 	esInt0,x
.28c6	c8		iny				iny
.28c7	b1 28		lda ($28),y			lda 	(codePtr),y
.28c9	f5 58		sbc $58,x			sbc 	esInt1,x
.28cb	a9 ff		lda #$ff			lda 	#255
.28cd	90 02		bcc $28d1			bcc 	_CLCLTExit
.28cf	a9 01		lda #$01			lda 	#1
.28d1					_CLCLTExit:
.28d1	60		rts				rts
.28d2					CLStructureCheck:
.28d2	85 2a		sta $2a				sta 	temp0
.28d4	a0 03		ldy #$03			ldy 	#3
.28d6					_CLSCLoop:
.28d6	b1 28		lda ($28),y			lda 	(codePtr),y 				; get and consume token.
.28d8	c8		iny				iny
.28d9	c9 80		cmp #$80			cmp 	#$80
.28db	90 f9		bcc $28d6			bcc 	_CLSCLoop 					; $00-$7F just step over.
.28dd	f0 28		beq $2907			beq		_CLSCExit					; EOL return
.28df	c9 86		cmp #$86			cmp 	#$86 						; special handler
.28e1	90 1e		bcc $2901			bcc 	_CLSCSpecial
.28e3	c9 99		cmp #$99			cmp 	#TOK_STRUCTST 				; check if structure changer.
.28e5	90 ef		bcc $28d6			bcc 	_CLSCLoop
.28e7	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST
.28e9	b0 eb		bcs $28d6			bcs 	_CLSCLoop
.28eb	aa		tax				tax 								; get adjustment
.28ec	bd fa 2d	lda $2dfa,x			lda 	ELBinaryOperatorInfo-TOK_BINARYST,x
.28ef	c5 2a		cmp $2a				cmp 	temp0	 					; if what we're searching for
.28f1	d0 e3		bne $28d6			bne 	_CLSCLoop
.28f3	38		sec				sec
.28f4	e9 81		sbc #$81			sbc 	#$81 						; convert to offset
.28f6	0a		asl a				asl 	a 							; double indent step
.28f7	18		clc				clc
.28f8	6d da 0c	adc $0cda			adc 	structIndent 				; add to structure indent
.28fb	8d da 0c	sta $0cda			sta 	structIndent
.28fe	4c d6 28	jmp $28d6			jmp 	_CLSCLoop
.2901					_CLSCSpecial:
.2901	20 5e 27	jsr $275e			jsr 	ScannerSkipSpecial
.2904	4c d6 28	jmp $28d6			jmp 	_CLSCLoop
.2907					_CLSCExit:
.2907	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/system/loadsave.asm

.2908					CommandLoad:
.2908	20 30 29	jsr $2930			jsr 	CLSParameters 					; get parameters for load.
.290b	08		php				php
.290c	a2 0e		ldx #$0e		ldx	#14
.290e	20 f6 14	jsr $14f6		jsr	deviceHandler
.2911	28		plp				plp
.2912	b0 08		bcs $291c			bcs 	_CLExit 						; if CC then load a program, so warm start.
.2914	20 d2 27	jsr $27d2			jsr 	CommandClear
.2917	a2 04		ldx #$04		ldx	#4
.2919	20 ca 1f	jsr $1fca		jsr	interactionHandler
.291c					_CLExit
.291c	60		rts				rts
.291d					CommandSave:
.291d	20 30 29	jsr $2930			jsr 	CLSParameters					; get parameters for save
.2920	90 08		bcc $292a			bcc 	_CSNoOverrideAddress
.2922	20 f6 35	jsr $35f6			jsr 	CheckComma 						; should be a comma.
.2925	a2 02		ldx #$02			ldx 	#2
.2927	20 de 2e	jsr $2ede			jsr 	EvaluateInteger 				; get save end address.
.292a					_CSNoOverrideAddress:
.292a	a2 18		ldx #$18		ldx	#24
.292c	20 f6 14	jsr $14f6		jsr	deviceHandler
.292f	60		rts				rts
.2930					CLSParameters:
.2930	a2 00		ldx #$00			ldx 	#0 								; string
.2932	20 d3 2e	jsr $2ed3			jsr 	EvaluateString
.2935	e8		inx				inx 									; erase out +1 +2
.2936	20 76 35	jsr $3576			jsr 	MInt32False
.2939	e8		inx				inx
.293a	20 76 35	jsr $3576			jsr 	MInt32False
.293d	ad c8 0a	lda $0ac8			lda 	basePage 						; default start address.
.2940	85 51		sta $51				sta 	esInt0+1
.2942	ad c9 0a	lda $0ac9			lda 	basePage+1
.2945	85 59		sta $59				sta 	esInt1+1
.2947	ad ca 0a	lda $0aca			lda 	endProgram 						; default end address
.294a	85 52		sta $52				sta 	esInt0+2
.294c	ad cb 0a	lda $0acb			lda 	endProgram+1
.294f	85 5a		sta $5a				sta 	esInt1+2
.2951	b1 28		lda ($28),y			lda 	(codePtr),y 					; , following
.2953	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.2955	d0 08		bne $295f			bne 	_CLSDefault
.2957	c8		iny				iny 									; skip comma
.2958	a2 01		ldx #$01			ldx 	#1 								; get numeric value.
.295a	20 de 2e	jsr $2ede			jsr 	EvaluateInteger
.295d	38		sec				sec
.295e	60		rts				rts
.295f					_CLSDefault:
.295f	18		clc				clc
.2960	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/system/new.asm

.2961					Command_New:
.2961					Command_XNew:
.2961	20 ff 29	jsr $29ff			jsr 	ResetCodeAddress 			; point to first line
.2964	a0 00		ldy #$00			ldy 	#0 							; and zap it.
.2966	98		tya				tya
.2967	91 28		sta ($28),y			sta 	(codePtr),y
.2969	20 d2 27	jsr $27d2			jsr 	CommandClear 				; clear everything down.
.296c	4c 28 23	jmp $2328			jmp 	CommandEND 					; do END code, as there's nothing to run.

;******  Return to file: main/main.asm


;******  Processing file: main/commands/system/run.asm

.0cdb					breakCounter:
>0cdb								.fill 	1
.0cdc					breakIncrement:
>0cdc								.fill 	1
.296f					Command_Run:
.296f					XCommand_Run:
.296f	a2 ff		ldx #$ff			ldx 	#$FF 						; reset the stack.
.2971	9a		txs				txs
.2972	20 f9 29	jsr $29f9			jsr 	BreakOn 					; turn break on
.2975	20 d2 27	jsr $27d2			jsr 	CommandClear 				; clear everything.
.2978	20 ff 29	jsr $29ff			jsr 	ResetCodeAddress 			; back to the start.
.297b					Command_RunFrom:
.297b	a0 03		ldy #$03			ldy 	#3 							; over offset/line #
.297d					CRNextInstruction:
.297d	64 3a		stz $3a				stz 	softMemAlloc+1
.297f	ad db 0c	lda $0cdb			lda 	breakCounter 				; check for break.
.2982	6d dc 0c	adc $0cdc			adc 	breakIncrement
.2985	8d db 0c	sta $0cdb			sta 	breakCounter
.2988	90 05		bcc $298f			bcc 	_CRNoChecks
.298a	a2 02		ldx #$02		ldx	#2
.298c	20 f6 14	jsr $14f6		jsr	deviceHandler
.298f					_CRNoChecks
.298f	b1 28		lda ($28),y			lda 	(codePtr),y 				; get next token.
.2991	10 1c		bpl $29af			bpl 	_CRNotToken
.2993	c9 c9		cmp #$c9			cmp 	#TOK_TOKENS 				; if in the tokens then do that token.
.2995	b0 0c		bcs $29a3			bcs 	_CRExecute
.2997	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST 				; unary is ignored.
.2999	b0 71		bcs $2a0c			bcs 	Unimplemented
.299b	c9 99		cmp #$99			cmp 	#TOK_STRUCTST 				; execute structures.
.299d	b0 04		bcs $29a3			bcs 	_CRExecute
.299f	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; if one of the system tokens $80-$85 do that
.29a1	b0 16		bcs $29b9			bcs 	_CRCheckIndirect 			; if in that unused range check for ! or ? or AND
.29a3					_CRExecute:
.29a3	c8		iny				iny 								; consume it.
.29a4	0a		asl a				asl 	a 							; double it, losing most significant bit.
.29a5	aa		tax				tax
.29a6	20 ac 29	jsr $29ac			jsr 	_CRRunRoutine 				; we want to do jsr (group0vectors,x)
.29a9	4c 7d 29	jmp $297d			jmp 	CRNextInstruction
.29ac					_CRRunRoutine:
.29ac	7c 16 2a	jmp ($2a16,x)			jmp 	(Group0Vectors,x)
.29af					_CRNotToken:
.29af	c9 40		cmp #$40			cmp 	#$40 						; if 0-3F then it is a letter
.29b1	b0 59		bcs $2a0c			bcs 	Unimplemented
.29b3					_CRDefaultLet:
.29b3	20 5b 22	jsr $225b			jsr 	CommandLet 					; do the default, LET
.29b6	4c 7d 29	jmp $297d			jmp 	CRNextInstruction
.29b9					_CRCheckIndirect:
.29b9	c9 86		cmp #$86			cmp 	#TKW_AND 					; AND (assembler)
.29bb	f0 0a		beq $29c7			beq 	_CRAndCommand
.29bd	c9 97		cmp #$97			cmp 	#TKW_PLING 					; !<term> =
.29bf	f0 f2		beq $29b3			beq 	_CRDefaultLet
.29c1	c9 98		cmp #$98			cmp 	#TKW_QMARK 					; ?<term> =
.29c3	f0 ee		beq $29b3			beq 	_CRDefaultLet
.29c5	d0 45		bne $2a0c			bne 	Unimplemented
.29c7					_CRAndCommand:
.29c7	c8		iny				iny 								; skip over the AND token
.29c8	a9 95		lda #$95			lda 	#TKW_LPARENANDRPAREN 		; replace it with the pseudo-and
.29ca	20 e4 29	jsr $29e4			jsr 	CommandAssembler 			; do the assembler command
.29cd	4c 7d 29	jmp $297d			jmp 	CRNextInstruction 			; and loop round.
.29d0					CommandShift1:
.29d0	b1 28		lda ($28),y			lda 	(codePtr),y 				; get shifted value
.29d2	10 38		bpl $2a0c			bpl 	Unimplemented 				; we have an error as this should not happen.
.29d4	c8		iny				iny 								; advance over it.
.29d5	c9 94		cmp #$94			cmp 	#TKA_GROUP1 				; is it an assembler constant ?
.29d7	b0 0b		bcs $29e4			bcs 	CommandAssembler
.29d9	0a		asl a				asl 	a 							; double into X
.29da	aa		tax				tax
.29db	7c da 2a	jmp ($2ada,x)			jmp 	(Group1Vectors-12,x) 		; and do the code.
.29de					CommandShift2:
.29de	a9 ff		lda #$ff			lda 	#$FF 						; $FF means command not unary function.
.29e0	20 60 18	jsr $1860		jsr	extensionHandler
.29e3	60		rts				rts
.29e4					CommandAssembler:
.29e4	a2 02		ldx #$02		ldx	#2
.29e6	20 b4 13	jsr $13b4		jsr	assemblerHandler
.29e9	60		rts				rts
.29ea					CommandAssemblerLabel:
.29ea	a2 04		ldx #$04		ldx	#4
.29ec	20 b4 13	jsr $13b4		jsr	assemblerHandler
.29ef	60		rts				rts
.29f0					CommandColon:
.29f0	60		rts				rts
.29f1					CommandBreak:
.29f1	20 dc 2e	jsr $2edc			jsr 	EvaluateRootInteger
.29f4	20 9d 35	jsr $359d			jsr 	MInt32Zero
.29f7	f0 02		beq $29fb			beq 	BreakOff
.29f9					BreakOn:
.29f9	a2 08		ldx #$08			ldx 	#8
.29fb					BreakOff:
.29fb	8e dc 0c	stx $0cdc			stx 	breakIncrement
.29fe	60		rts				rts
.29ff					ResetCodeAddress:
.29ff	ad c8 0a	lda $0ac8			lda 	basePage 					; copy basePage to code Pointer
.2a02	85 28		sta $28				sta 	codePtr
.2a04	ad c9 0a	lda $0ac9			lda 	basePage+1
.2a07	85 29		sta $29				sta 	codePtr+1
.2a09	a0 03		ldy #$03			ldy 	#3 							; offset after offset link and line#
.2a0b	60		rts				rts
.2a0c					Unimplemented:
.2a0c	a2 01		ldx #$01			ldx 	#ErrorID_Missing
.2a0e	20 18 15	jsr $1518		jsr	errorHandler
.2a11					TKErr01:
.2a11					TKErr02:
.2a11					TKErr03:
.2a11					TKErr04:
.2a11					TKErr05:
.2a11					TKErr06:
.2a11					TKErr07:
.2a11					TKErr08:
.2a11					TKErr09:
.2a11					TKErr10:
.2a11					TKErr11:
.2a11					TKErr12:
.2a11					TKErr13:
.2a11					TKErr14:
.2a11	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.2a13	20 18 15	jsr $1518		jsr	errorHandler

;******  Processing file: main/commands/system/../../../generated/tokenvectors0.inc

.2a16					Group0Vectors:
>2a16	2e 23					.word	AdvanceNextLine          ; $80 [[eol]]
>2a18	d0 29					.word	CommandShift1            ; $81 [[sh1]]
>2a1a	de 29					.word	CommandShift2            ; $82 [[sh2]]
>2a1c	11 2a					.word	TKErr09                  ; $83 [[sh3]]
>2a1e	11 2a					.word	TKErr10                  ; $84 [[fpc]]
>2a20	11 2a					.word	TKErr08                  ; $85 [[str]]
>2a22	c3 2b					.word	AndHandler               ; $86 and
>2a24	b0 2b					.word	OrHandler                ; $87 or
>2a26	9d 2b					.word	XorHandler               ; $88 xor
>2a28	e5 2c					.word	CompareGreaterEq         ; $89 >=
>2a2a	ef 2c					.word	CompareLessEq            ; $8a <=
>2a2c	d1 2c					.word	CompareGreater           ; $8b >
>2a2e	c7 2c					.word	CompareLess              ; $8c <
>2a30	bd 2c					.word	CompareEquals            ; $8d =
>2a32	db 2c					.word	CompareNotEquals         ; $8e <>
>2a34	2e 2b					.word	AddHandler               ; $8f +
>2a36	51 2b					.word	SubHandler               ; $90 -
>2a38	e9 2b					.word	ShrHandler               ; $91 >>
>2a3a	d6 2b					.word	ShlHandler               ; $92 <<
>2a3c	64 2b					.word	MulHandler               ; $93 *
>2a3e	77 2b					.word	DivHandler               ; $94 /
>2a40	8a 2b					.word	ModHandler               ; $95 mod
>2a42	22 2c					.word	PowerHandler             ; $96 ^
>2a44	fc 2b					.word	WordRefHandler           ; $97 !
>2a46	0f 2c					.word	ByteRefHandler           ; $98 ?
>2a48	ed 26					.word	Command_Repeat           ; $99 repeat
>2a4a	97 27					.word	Command_While            ; $9a while
>2a4c	42 23					.word	Command_FOR              ; $9b for
>2a4e	51 24					.word	CommandIf                ; $9c if
>2a50	11 2a					.word	TKErr04                  ; $9d defproc
>2a52	fa 26					.word	Command_Until            ; $9e until
>2a54	ba 27					.word	Command_Wend             ; $9f wend
>2a56	a3 23					.word	Command_NEXT             ; $a0 next
>2a58	11 2a					.word	TKErr06                  ; $a1 then
>2a5a	8c 24					.word	Command_ENDIF            ; $a2 endif
>2a5c	fc 25					.word	ReturnProc               ; $a3 endproc
>2a5e	49 2e					.word	UnaryParenthesis         ; $a4 (
>2a60	2b 30					.word	UnaryLen                 ; $a5 len(
>2a62	6f 30					.word	UnarySgn                 ; $a6 sgn(
>2a64	58 30					.word	UnaryAbs                 ; $a7 abs(
>2a66	c8 30					.word	Unary_Random             ; $a8 random(
>2a68	12 31					.word	Unary_Page               ; $a9 page
>2a6a	72 35					.word	MInt32True               ; $aa true
>2a6c	76 35					.word	MInt32False              ; $ab false
>2a6e	dd 30					.word	Unary_Min                ; $ac min(
>2a70	e1 30					.word	Unary_Max                ; $ad max(
>2a72	ea 31					.word	UnarySys                 ; $ae sys(
>2a74	93 31					.word	UnaryTimer               ; $af timer(
>2a76	a8 2f					.word	EventFunction            ; $b0 event(
>2a78	bc 31					.word	UnaryGet                 ; $b1 get(
>2a7a	ac 31					.word	UnaryInkey               ; $b2 inkey(
>2a7c	63 31					.word	UnaryAlloc               ; $b3 alloc(
>2a7e	23 32					.word	ExecChr                  ; $b4 chr$(
>2a80	53 32					.word	ExecLeft                 ; $b5 left$(
>2a82	70 32					.word	ExecMid                  ; $b6 mid$(
>2a84	98 32					.word	ExecRight                ; $b7 right$(
>2a86	2a 2f					.word	Event_Str                ; $b8 str$(
>2a88	59 2f					.word	UnaryVal                 ; $b9 val(
>2a8a	86 30					.word	UnaryPeek                ; $ba peek(
>2a8c	8c 30					.word	UnaryDeek                ; $bb deek(
>2a8e	92 30					.word	UnaryLeek                ; $bc leek(
>2a90	49 30					.word	UnaryAsc                 ; $bd asc(
>2a92	3d 31					.word	UnaryIntToFloat          ; $be int(
>2a94	50 31					.word	UnaryFloatToInt          ; $bf float(
>2a96	5c 2f					.word	UnaryIsVal               ; $c0 isval(
>2a98	3a 32					.word	ExecUpper                ; $c1 upper$(
>2a9a	37 32					.word	ExecLower                ; $c2 lower$(
>2a9c	20 31					.word	UnaryReference           ; $c3 @
>2a9e	36 31					.word	UnaryComplement          ; $c4 ~
>2aa0	33 31					.word	UnaryHexMarker           ; $c5 &
>2aa2	d5 31					.word	UnaryGetString           ; $c6 get$(
>2aa4	db 31					.word	UnaryInkeyString         ; $c7 inkey$(
>2aa6	12 32					.word	UnaryMem                 ; $c8 mem
>2aa8	11 2a					.word	TKErr01                  ; $c9 )
>2aaa	f0 29					.word	CommandColon             ; $ca :
>2aac	11 2a					.word	TKErr02                  ; $cb ,
>2aae	11 2a					.word	TKErr03                  ; $cc ;
>2ab0	16 23					.word	Command_Rem2             ; $cd '
>2ab2	11 2a					.word	TKErr07                  ; $ce to
>2ab4	11 2a					.word	TKErr05                  ; $cf step
>2ab6	8f 25					.word	CallProc                 ; $d0 proc
>2ab8	8d 24					.word	CommandLocal             ; $d1 local
>2aba	4d 22					.word	Command_Dim              ; $d2 dim
>2abc	16 23					.word	Command_Rem              ; $d3 rem
>2abe	5b 22					.word	CommandLet               ; $d4 let
>2ac0	97 20					.word	Command_Input            ; $d5 input
>2ac2	86 24					.word	Command_ELSE             ; $d6 else
>2ac4	1e 22					.word	Command_VDU              ; $d7 vdu
>2ac6	4d 21					.word	Command_Print            ; $d8 print
>2ac8	ff 1f					.word	CommandData              ; $d9 data
>2aca	11 2a					.word	TKErr13                  ; $da image
>2acc	11 2a					.word	TKErr12                  ; $db at
>2ace	11 2a					.word	TKErr14                  ; $dc flip
>2ad0	3f 22					.word	Command_Assert           ; $dd assert
>2ad2	d9 22					.word	Command_Poke             ; $de poke
>2ad4	dd 22					.word	Command_Doke             ; $df doke
>2ad6	e1 22					.word	Command_Loke             ; $e0 loke
>2ad8	ee 21					.word	Command_Ink              ; $e1 ink
>2ada	f9 21					.word	Command_Paper            ; $e2 paper
>2adc	e8 21					.word	Command_CLS              ; $e3 cls
>2ade	04 22					.word	Command_Locate           ; $e4 locate
>2ae0	ea 29					.word	CommandAssemblerLabel    ; $e5 .
>2ae2	11 2a					.word	TKErr11                  ; $e6 #
>2ae4	d2 27					.word	CommandClear             ; $e7 clear

;******  Return to file: main/commands/system/run.asm


;******  Processing file: main/commands/system/../../../generated/tokenvectors1.inc

.2ae6					Group1Vectors:
>2ae6	08 29					.word	CommandLoad              ; $86 load
>2ae8	1d 29					.word	CommandSave              ; $87 save
>2aea	2d 28					.word	CommandList              ; $88 list
>2aec	61 29					.word	Command_New              ; $89 new
>2aee	f1 29					.word	CommandBreak             ; $8a break
>2af0	6f 29					.word	Command_Run              ; $8b run
>2af2	d4 1f					.word	CommandRead              ; $8c read
>2af4	08 20					.word	CommandRestore           ; $8d restore
>2af6	28 23					.word	CommandEnd               ; $8e end
>2af8	23 23					.word	CommandStop              ; $8f stop
>2afa	2b 23					.word	CommandXemu              ; $90 xemu
>2afc	65 20					.word	CommandGOTO              ; $91 goto
>2afe	3a 20					.word	CommandGOSUB             ; $92 gosub
>2b00	4d 20					.word	CommandRETURN            ; $93 return

;******  Return to file: main/commands/system/run.asm


;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/binary/binary.asm

.2b02					BinaryProcess:
.2b02	b5 48		lda $48,x			lda 	esType,x 					; or type bytes together and check bit 6.
.2b04	15 49		ora $49,x			ora 	esType+1,x 					; (the float bit)
.2b06	0a		asl a				asl 	a
.2b07	30 0e		bmi $2b17			bmi 	_BPStringType 				; if bit 6 is set, then string type, error
.2b09	18		clc				clc 								; return CC for integer
.2b0a	29 02		and #$02			and 	#$02 						; $02 because of ASL A. check original bit 1.
.2b0c	f0 08		beq $2b16			beq 	_BPExit 					; if both integer then return with CC.
.2b0e	20 1c 2b	jsr $2b1c			jsr 	BPMakeBothFloat 			; make both float
.2b11	a9 01		lda #$01			lda 	#$01 						; set result type to float
.2b13	95 48		sta $48,x			sta 	esType,x
.2b15	38		sec				sec 								; and return with carry set.
.2b16					_BPExit:
.2b16	60		rts				rts
.2b17					_BPStringType:
.2b17	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.2b19	20 18 15	jsr $1518		jsr	errorHandler
.2b1c					BPMakeBothFloat:
.2b1c	e8		inx				inx
.2b1d	20 21 2b	jsr $2b21			jsr 	BPMakeFloat 				; one is a float, so we do both as floats.
.2b20	ca		dex				dex
.2b21					BPMakeFloat:
.2b21	b5 48		lda $48,x			lda 	esType,x 					; get type bit which is in bit 0
.2b23	4a		lsr a				lsr 	a
.2b24	b0 07		bcs $2b2d			bcs 	_BPIsFloat 					; already a float if set.
.2b26	8a		txa				txa
.2b27	a2 1c		ldx #$1c		ldx	#28
.2b29	20 de 1d	jsr $1dde		jsr	floatingpointHandler
.2b2c	aa		tax				tax
.2b2d					_BPIsFloat:
.2b2d	60		rts				rts
.2b2e					AddHandler:
.2b2e	20 ff 2c	jsr $2cff			jsr 	DereferenceTwo 				; dereference top two on stack.
.2b31	b5 48		lda $48,x			lda 	esType,x 					; check two strings.
.2b33	35 49		and $49,x			and 	esType+1,x
.2b35	29 40		and #$40			and 	#$40 						; if both have bit 6 set ... we have two strings
.2b37	d0 10		bne $2b49			bne 	_AHStringConcat				; concatenate strings.
.2b39	20 02 2b	jsr $2b02			jsr 	BinaryProcess 				; check to see if either is float
.2b3c	b0 03		bcs $2b41			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.2b3e	4c 5a 34	jmp $345a			jmp 	MInt32Add 							; else do it as integer.
.2b41					_IsFPOperation:
.2b41	8a		txa				txa 								; call the relevant fp routine
.2b42	a2 04		ldx #$04		ldx	#4
.2b44	20 de 1d	jsr $1dde		jsr	floatingpointHandler
.2b47	aa		tax				tax
.2b48	60		rts				rts
.2b49					_AHStringConcat:
.2b49	8a		txa				txa 								; handled by the string module.
.2b4a	a2 06		ldx #$06		ldx	#6
.2b4c	20 21 39	jsr $3921		jsr	stringHandler
.2b4f	aa		tax				tax
.2b50	60		rts				rts
.2b51					SubHandler:
.2b51	20 ff 2c	jsr $2cff			jsr 	DereferenceTwo
.2b54	20 02 2b	jsr $2b02			jsr 	BinaryProcess 				; check to see if either is float
.2b57	b0 03		bcs $2b5c			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.2b59	4c 74 34	jmp $3474			jmp 	MInt32Sub 							; else do it as integer.
.2b5c					_IsFPOperation:
.2b5c	8a		txa				txa 								; call the relevant fp routine
.2b5d	a2 12		ldx #$12		ldx	#18
.2b5f	20 de 1d	jsr $1dde		jsr	floatingpointHandler
.2b62	aa		tax				tax
.2b63	60		rts				rts
.2b64					MulHandler:
.2b64	20 ff 2c	jsr $2cff			jsr 	DereferenceTwo
.2b67	20 02 2b	jsr $2b02			jsr 	BinaryProcess 				; check to see if either is float
.2b6a	b0 03		bcs $2b6f			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.2b6c	4c 8e 34	jmp $348e			jmp 	MInt32Multiply 							; else do it as integer.
.2b6f					_IsFPOperation:
.2b6f	8a		txa				txa 								; call the relevant fp routine
.2b70	a2 0c		ldx #$0c		ldx	#12
.2b72	20 de 1d	jsr $1dde		jsr	floatingpointHandler
.2b75	aa		tax				tax
.2b76	60		rts				rts
.2b77					DivHandler:
.2b77	20 ff 2c	jsr $2cff			jsr 	DereferenceTwo
.2b7a	20 02 2b	jsr $2b02			jsr 	BinaryProcess 				; check to see if either is float
.2b7d	b0 03		bcs $2b82			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.2b7f	4c 4b 33	jmp $334b			jmp 	MInt32SDivide 							; else do it as integer.
.2b82					_IsFPOperation:
.2b82	8a		txa				txa 								; call the relevant fp routine
.2b83	a2 08		ldx #$08		ldx	#8
.2b85	20 de 1d	jsr $1dde		jsr	floatingpointHandler
.2b88	aa		tax				tax
.2b89	60		rts				rts
.2b8a					ModHandler:
.2b8a	20 ff 2c	jsr $2cff			jsr 	DereferenceTwo
.2b8d	20 02 2b	jsr $2b02			jsr 	BinaryProcess 				; check to see if either is float
.2b90	b0 03		bcs $2b95			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.2b92	4c c9 33	jmp $33c9			jmp 	MInt32Modulus 							; else do it as integer.
.2b95					_IsFPOperation:
.2b95	8a		txa				txa 								; call the relevant fp routine
.2b96	a2 0a		ldx #$0a		ldx	#10
.2b98	20 de 1d	jsr $1dde		jsr	floatingpointHandler
.2b9b	aa		tax				tax
.2b9c	60		rts				rts
.2b9d					XorHandler:
.2b9d	20 ff 2c	jsr $2cff			jsr 	DereferenceTwo
.2ba0	20 02 2b	jsr $2b02			jsr 	BinaryProcess 				; check to see if either is float
.2ba3	b0 03		bcs $2ba8			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.2ba5	4c fd 32	jmp $32fd			jmp 	MInt32Xor 							; else do it as integer.
.2ba8					_IsFPOperation:
.2ba8	8a		txa				txa 								; call the relevant fp routine
.2ba9	a2 0a		ldx #$0a		ldx	#10
.2bab	20 de 1d	jsr $1dde		jsr	floatingpointHandler
.2bae	aa		tax				tax
.2baf	60		rts				rts
.2bb0					OrHandler:
.2bb0	20 ff 2c	jsr $2cff			jsr 	DereferenceTwo
.2bb3	20 02 2b	jsr $2b02			jsr 	BinaryProcess 				; check to see if either is float
.2bb6	b0 03		bcs $2bbb			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.2bb8	4c e4 32	jmp $32e4			jmp 	MInt32Or 							; else do it as integer.
.2bbb					_IsFPOperation:
.2bbb	8a		txa				txa 								; call the relevant fp routine
.2bbc	a2 0a		ldx #$0a		ldx	#10
.2bbe	20 de 1d	jsr $1dde		jsr	floatingpointHandler
.2bc1	aa		tax				tax
.2bc2	60		rts				rts
.2bc3					AndHandler:
.2bc3	20 ff 2c	jsr $2cff			jsr 	DereferenceTwo
.2bc6	20 02 2b	jsr $2b02			jsr 	BinaryProcess 				; check to see if either is float
.2bc9	b0 03		bcs $2bce			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.2bcb	4c cb 32	jmp $32cb			jmp 	MInt32And 							; else do it as integer.
.2bce					_IsFPOperation:
.2bce	8a		txa				txa 								; call the relevant fp routine
.2bcf	a2 0a		ldx #$0a		ldx	#10
.2bd1	20 de 1d	jsr $1dde		jsr	floatingpointHandler
.2bd4	aa		tax				tax
.2bd5	60		rts				rts
.2bd6					ShlHandler:
.2bd6	20 ff 2c	jsr $2cff			jsr 	DereferenceTwo
.2bd9	20 02 2b	jsr $2b02			jsr 	BinaryProcess 				; check to see if either is float
.2bdc	b0 03		bcs $2be1			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.2bde	4c 57 2c	jmp $2c57			jmp 	Mint32ShiftLeftX 							; else do it as integer.
.2be1					_IsFPOperation:
.2be1	8a		txa				txa 								; call the relevant fp routine
.2be2	a2 0a		ldx #$0a		ldx	#10
.2be4	20 de 1d	jsr $1dde		jsr	floatingpointHandler
.2be7	aa		tax				tax
.2be8	60		rts				rts
.2be9					ShrHandler:
.2be9	20 ff 2c	jsr $2cff			jsr 	DereferenceTwo
.2bec	20 02 2b	jsr $2b02			jsr 	BinaryProcess 				; check to see if either is float
.2bef	b0 03		bcs $2bf4			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.2bf1	4c 5a 2c	jmp $2c5a			jmp 	MInt32ShiftRightX 							; else do it as integer.
.2bf4					_IsFPOperation:
.2bf4	8a		txa				txa 								; call the relevant fp routine
.2bf5	a2 0a		ldx #$0a		ldx	#10
.2bf7	20 de 1d	jsr $1dde		jsr	floatingpointHandler
.2bfa	aa		tax				tax
.2bfb	60		rts				rts
.2bfc					WordRefHandler:
.2bfc	20 ff 2c	jsr $2cff			jsr 	DereferenceTwo
.2bff	20 02 2b	jsr $2b02			jsr 	BinaryProcess 				; check to see if either is float
.2c02	b0 03		bcs $2c07			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.2c04	4c 49 2c	jmp $2c49			jmp 	MInt32WordIndirect 							; else do it as integer.
.2c07					_IsFPOperation:
.2c07	8a		txa				txa 								; call the relevant fp routine
.2c08	a2 0a		ldx #$0a		ldx	#10
.2c0a	20 de 1d	jsr $1dde		jsr	floatingpointHandler
.2c0d	aa		tax				tax
.2c0e	60		rts				rts
.2c0f					ByteRefHandler:
.2c0f	20 ff 2c	jsr $2cff			jsr 	DereferenceTwo
.2c12	20 02 2b	jsr $2b02			jsr 	BinaryProcess 				; check to see if either is float
.2c15	b0 03		bcs $2c1a			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.2c17	4c 4d 2c	jmp $2c4d			jmp 	MInt32ByteIndirect 							; else do it as integer.
.2c1a					_IsFPOperation:
.2c1a	8a		txa				txa 								; call the relevant fp routine
.2c1b	a2 0a		ldx #$0a		ldx	#10
.2c1d	20 de 1d	jsr $1dde		jsr	floatingpointHandler
.2c20	aa		tax				tax
.2c21	60		rts				rts
.2c22					PowerHandler:
.2c22	20 ff 2c	jsr $2cff			jsr 	DereferenceTwo
.2c25	20 02 2b	jsr $2b02			jsr 	BinaryProcess 				; check to see if either is float
.2c28	b0 03		bcs $2c2d			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.2c2a	4c 35 2c	jmp $2c35			jmp 	PowerInteger 							; else do it as integer.
.2c2d					_IsFPOperation:
.2c2d	8a		txa				txa 								; call the relevant fp routine
.2c2e	a2 18		ldx #$18		ldx	#24
.2c30	20 de 1d	jsr $1dde		jsr	floatingpointHandler
.2c33	aa		tax				tax
.2c34	60		rts				rts
.2c35					PowerInteger:
.2c35	20 1c 2b	jsr $2b1c			jsr 	BPMakeBothFloat				; make them float.
.2c38	8a		txa				txa
.2c39	a2 18		ldx #$18		ldx	#24
.2c3b	20 de 1d	jsr $1dde		jsr	floatingpointHandler
.2c3e	a2 14		ldx #$14		ldx	#20
.2c40	20 de 1d	jsr $1dde		jsr	floatingpointHandler
.2c43	aa		tax				tax
.2c44	a9 00		lda #$00			lda 	#0 							; make type integer
.2c46	95 48		sta $48,x			sta 	esType,x
.2c48	60		rts				rts
.2c49					Mint32WordIndirect:
.2c49	a9 80		lda #$80	 		lda 	#$80 				 		; word reference type (bit 7 set)
.2c4b	d0 02		bne $2c4f			bne 	Min32Indirect
.2c4d					Mint32ByteIndirect:
.2c4d	a9 a0		lda #$a0			lda 	#$A0 						; byte reference type (bit 7, bit 5 set)
.2c4f					Min32Indirect:
.2c4f	48		pha				pha 								; save the indirection
.2c50	20 5a 34	jsr $345a			jsr 	MInt32Add 					; add a!b a?b
.2c53	68		pla				pla 								; and set the type to reference.
.2c54	95 48		sta $48,x			sta 	esType,x 	 				; so a!b => a+b and it's a reference....
.2c56	60		rts				rts
.2c57					Mint32ShiftLeftX:
.2c57	18		clc				clc 								; CC shift left
.2c58	90 01		bcc $2c5b			bcc 	Mint32Shift
.2c5a					Mint32ShiftRightX:
.2c5a	38		sec				sec 								; CS shift right
.2c5b					Mint32Shift:
.2c5b	08		php				php 								; save carry flag on stack.
.2c5c	b5 59		lda $59,x			lda 	esInt1+1,x 					; if shift >= 32 then it is zero.
.2c5e	15 61		ora $61,x			ora 	esInt2+1,x
.2c60	15 69		ora $69,x			ora 	esInt3+1,x
.2c62	d0 1e		bne $2c82			bne 	_MShiftZero
.2c64	b5 51		lda $51,x			lda 	esInt0+1,x
.2c66	c9 20		cmp #$20			cmp 	#32
.2c68	b0 18		bcs $2c82			bcs 	_MShiftZero
.2c6a					_MShiftLoop:
.2c6a	b5 51		lda $51,x			lda 	esInt0+1,x 					; check count is zero
.2c6c	f0 12		beq $2c80			beq 	_MShiftExit
.2c6e	d6 51		dec $51,x			dec 	esInt0+1,x
.2c70	28		plp				plp 								; restore and save carry
.2c71	08		php				php
.2c72	90 06		bcc $2c7a			bcc 	_MShiftLeft 				; and shift left/right accordingly.
.2c74	20 94 35	jsr $3594			jsr 	Mint32ShiftRight
.2c77	4c 6a 2c	jmp $2c6a			jmp 	_MShiftLoop
.2c7a					_MShiftLeft:
.2c7a	20 8b 35	jsr $358b			jsr 	Mint32ShiftLeft
.2c7d	4c 6a 2c	jmp $2c6a			jmp 	_MShiftLoop
.2c80					_MShiftExit:
.2c80	28		plp				plp	 								; throw saved carry and exit
.2c81	60		rts				rts
.2c82					_MShiftZero:
.2c82	4c 76 35	jmp $3576			jmp 	MInt32False 				; return 0 as shifted >= 32 times.

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/binary/compare.asm

.2c85					PerformComparison:
.2c85	20 ff 2c	jsr $2cff			jsr 	DereferenceTwo 				; make both values.
.2c88	b5 48		lda $48,x			lda 	esType,x 					; check for two strings.
.2c8a	35 49		and $49,x			and 	esType+1,x
.2c8c	0a		asl a				asl 	a 							; bit 7 set if both bit 6s were set.
.2c8d	30 1d		bmi $2cac			bmi 	_PCIsString
.2c8f	b5 48		lda $48,x			lda 	esType,x 					; check either is floating point.
.2c91	15 49		ora $49,x			ora 	esType+1,x
.2c93	0a		asl a				asl 	a 							; shift bit 6 (string) to bit 7, mixed types
.2c94	30 22		bmi $2cb8			bmi 	_PCError
.2c96	29 02		and #$02			and 	#$02 						; because of ASL, check type in bit 0
.2c98	f0 0f		beq $2ca9			beq 	_PCIsInteger 				; if not two integers, e.g. 1 of the bits is set
.2c9a	20 1c 2b	jsr $2b1c			jsr 	BPMakeBothFloat 			; make both float
.2c9d	8a		txa				txa
.2c9e	a2 06		ldx #$06		ldx	#6
.2ca0	20 de 1d	jsr $1dde		jsr	floatingpointHandler
.2ca3	86 32		stx $32				stx 	tempShort 					; save result
.2ca5	aa		tax				tax
.2ca6	a5 32		lda $32				lda 	tempShort
.2ca8	60		rts				rts
.2ca9					_PCIsInteger:
.2ca9	4c 16 33	jmp $3316			jmp 	MInt32Compare
.2cac					_PCIsString:
.2cac	8a		txa				txa 								; A has SP
.2cad	a2 0a		ldx #$0a		ldx	#10
.2caf	20 21 39	jsr $3921		jsr	stringHandler
.2cb2	86 32		stx $32				stx 	tempShort 					; save result
.2cb4	aa		tax				tax 								; put SP back in X and get result.
.2cb5	a5 32		lda $32				lda 	tempShort
.2cb7	60		rts				rts
.2cb8					_PCError:
.2cb8	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.2cba	20 18 15	jsr $1518		jsr	errorHandler
.2cbd					CompareEquals:
.2cbd	20 85 2c	jsr $2c85			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.2cc0	c9 00		cmp #$00			cmp 	#$00 						; and we do something if it is = or <> a value.
.2cc2	f0 35		beq $2cf9			beq  	CompareTrue
.2cc4	4c fc 2c	jmp $2cfc			jmp 	CompareFalse
.2cc7					CompareLess:
.2cc7	20 85 2c	jsr $2c85			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.2cca	c9 ff		cmp #$ff			cmp 	#$FF 						; and we do something if it is = or <> a value.
.2ccc	f0 2b		beq $2cf9			beq  	CompareTrue
.2cce	4c fc 2c	jmp $2cfc			jmp 	CompareFalse
.2cd1					CompareGreater:
.2cd1	20 85 2c	jsr $2c85			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.2cd4	c9 01		cmp #$01			cmp 	#$01 						; and we do something if it is = or <> a value.
.2cd6	f0 21		beq $2cf9			beq  	CompareTrue
.2cd8	4c fc 2c	jmp $2cfc			jmp 	CompareFalse
.2cdb					CompareNotEquals:
.2cdb	20 85 2c	jsr $2c85			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.2cde	c9 00		cmp #$00			cmp 	#$00 						; and we do something if it is = or <> a value.
.2ce0	d0 17		bne $2cf9			bne  	CompareTrue
.2ce2	4c fc 2c	jmp $2cfc			jmp 	CompareFalse
.2ce5					CompareGreaterEq:
.2ce5	20 85 2c	jsr $2c85			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.2ce8	c9 ff		cmp #$ff			cmp 	#$FF 						; and we do something if it is = or <> a value.
.2cea	d0 0d		bne $2cf9			bne  	CompareTrue
.2cec	4c fc 2c	jmp $2cfc			jmp 	CompareFalse
.2cef					CompareLessEq:
.2cef	20 85 2c	jsr $2c85			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.2cf2	c9 01		cmp #$01			cmp 	#$01 						; and we do something if it is = or <> a value.
.2cf4	d0 03		bne $2cf9			bne  	CompareTrue
.2cf6	4c fc 2c	jmp $2cfc			jmp 	CompareFalse
.2cf9					CompareTrue:
.2cf9	4c 72 35	jmp $3572			jmp 	MInt32True
.2cfc					CompareFalse:
.2cfc	4c 76 35	jmp $3576			jmp 	MInt32False

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/dereference.asm

.2cff					DereferenceTwo:
.2cff	e8		inx				inx
.2d00	20 04 2d	jsr $2d04			jsr 	DereferenceOne
.2d03	ca		dex				dex
.2d04					DereferenceOne:
.2d04	b5 48		lda $48,x			lda 	esType,x
.2d06	10 3d		bpl $2d45			bpl 	_DRNotReference 			; is it a reference ? if not, we don't need to do anything
.2d08	4a		lsr a				lsr 	a 							; do float dereference if bit 0 set.
.2d09	b0 3b		bcs $2d46			bcs 	_DRFloatDeReference
.2d0b	98		tya				tya
.2d0c	48		pha				pha
.2d0d	b5 50		lda $50,x			lda 	esInt0,x 					; copy address to temp0
.2d0f	85 2a		sta $2a				sta 	temp0
.2d11	b5 58		lda $58,x			lda 	esInt1,x
.2d13	85 2b		sta $2b				sta 	temp0+1
.2d15	a9 00		lda #$00			lda 	#0 							; clear esInt1..3
.2d17	95 58		sta $58,x			sta 	esInt1,x
.2d19	95 60		sta $60,x			sta 	esInt2,x
.2d1b	95 68		sta $68,x			sta 	esInt3,x
.2d1d	b5 48		lda $48,x			lda 	esType,x 					; get the type byte.
.2d1f	29 60		and #$60			and 	#$60 						; get string flag ($40) and byte flag ($20)
.2d21	0a		asl a				asl 	a 							; now string ($80) byte ($40)
.2d22	30 0d		bmi $2d31			bmi 	_DeRefString 				; string, 2 bytes only
.2d24	d0 11		bne $2d37			bne 	_DeRefByte 					; byte 1 byte only
.2d26					_DeRefLong:
.2d26	a0 03		ldy #$03			ldy 	#3
.2d28	b1 2a		lda ($2a),y			lda 	(temp0),y
.2d2a	95 68		sta $68,x			sta 	esInt3,x
.2d2c	88		dey				dey
.2d2d	b1 2a		lda ($2a),y			lda 	(temp0),y
.2d2f	95 60		sta $60,x			sta 	esInt2,x
.2d31					_DeRefString:
.2d31	a0 01		ldy #$01			ldy 	#1
.2d33	b1 2a		lda ($2a),y			lda 	(temp0),y
.2d35	95 58		sta $58,x			sta 	esInt1,x
.2d37					_DeRefByte:
.2d37	a0 00		ldy #$00			ldy 	#0
.2d39	b1 2a		lda ($2a),y			lda 	(temp0),y
.2d3b	95 50		sta $50,x			sta 	esInt0,x
.2d3d	b5 48		lda $48,x			lda 	esType,x 					; clear byte and deref bits.
.2d3f	29 40		and #$40			and 	#$40
.2d41	95 48		sta $48,x			sta 	esType,x
.2d43	68		pla				pla
.2d44	a8		tay				tay
.2d45					_DRNotReference
.2d45	60		rts				rts
.2d46					_DRFloatDereference:
.2d46	20 d0 22	jsr $22d0			jsr 	TOSToTemp0 					; address to deref in temp0
.2d49	8a		txa				txa
.2d4a	a2 1e		ldx #$1e		ldx	#30
.2d4c	20 de 1d	jsr $1dde		jsr	floatingpointHandler
.2d4f	aa		tax				tax
.2d50	a9 01		lda #$01			lda 	#$01 						; type to FP (float)
.2d52	95 48		sta $48,x			sta 	esType,x
.2d54	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/evaluate.asm

.2d55					EvaluateLevel:
.2d55	e0 08		cpx #$08			cpx 	#StackSize 					; check stack overflow
.2d57	b0 1e		bcs $2d77			bcs 	_ELStack
.2d59	48		pha				pha 								; save precedence level.
.2d5a	a9 00		lda #$00			lda 	#0 							; zero the current stack level.
.2d5c	95 50		sta $50,x			sta 	esInt0,x
.2d5e	95 58		sta $58,x			sta 	esInt1,x
.2d60	95 60		sta $60,x			sta 	esInt2,x
.2d62	95 68		sta $68,x			sta 	esInt3,x
.2d64	95 48		sta $48,x			sta 	esType,x 					; zero the type (integer value)
.2d66	b1 28		lda ($28),y			lda 	(codePtr),y	 				; look at first token/character
.2d68	30 26		bmi $2d90			bmi 	_ELIsToken 					; if -ve could be string, float, or unary function.
.2d6a	0a		asl a				asl 	a 							; if 00-3F then will now be PL and it's a variable.
.2d6b	30 0f		bmi $2d7c			bmi 	_ELIsConstant 				; 40-7F will be -ve and that's an integer constant.
.2d6d	8a		txa				txa 								; stack level in X
.2d6e	a2 02		ldx #$02		ldx	#2
.2d70	20 31 45	jsr $4531		jsr	variableHandler
.2d73	aa		tax				tax
.2d74	4c b9 2d	jmp $2db9			jmp		_ELHasTerm
.2d77					_ELStack:
.2d77	a2 23		ldx #$23			ldx 	#ErrorID_NumStack
.2d79	20 18 15	jsr $1518		jsr	errorHandler
.2d7c					_ELIsConstant:
.2d7c	4a		lsr a				lsr 	a 							; get the value back
.2d7d	29 3f		and #$3f			and 	#$3F 						; force into range 0-63
.2d7f	95 50		sta $50,x			sta 	esInt0,x 					; and put in LSB.
.2d81					_ELCheckNext:
.2d81	c8		iny				iny 								; look at next
.2d82	b1 28		lda ($28),y			lda 	(codePtr),y
.2d84	49 40		eor #$40			eor 	#$40 						; shift around so 40-7F => 00-3F
.2d86	c9 40		cmp #$40			cmp 	#$40 						; out of range ?
.2d88	b0 2f		bcs $2db9			bcs 	_ELHasTerm 					; done getting the constant.
.2d8a	20 52 2e	jsr $2e52			jsr 	ELShiftByteIn 				; shift byte into position.
.2d8d	4c 81 2d	jmp $2d81			jmp 	_ELCheckNext
.2d90					_ELIsToken:
.2d90	c9 85		cmp #$85			cmp 	#TOK_STR 					; handle strings.
.2d92	f0 0f		beq $2da3			beq 	_ELIsString
.2d94	c9 84		cmp #$84			cmp 	#TOK_FPC 					; if no, then check unary.
.2d96	d0 5f		bne $2df7			bne 	_ELCheckUnary
.2d98	8a		txa				txa 								; put X into A
.2d99	c8		iny				iny 								; skip over the float marker
.2d9a	a2 1a		ldx #$1a		ldx	#26
.2d9c	20 de 1d	jsr $1dde		jsr	floatingpointHandler
.2d9f	aa		tax				tax 								; restore X
.2da0	4c b9 2d	jmp $2db9			jmp 	_ELHasTerm
.2da3					_ELIsString:
.2da3	98		tya				tya 								; address of string is codePtr+y+1
.2da4	38		sec				sec
.2da5	65 28		adc $28				adc 	codePtr
.2da7	95 50		sta $50,x			sta 	esInt0,x
.2da9	a5 29		lda $29				lda 	codePtr+1
.2dab	69 00		adc #$00			adc 	#0
.2dad	95 58		sta $58,x			sta 	esInt1,x
.2daf	a9 40		lda #$40			lda 	#$40 						; set type to string value
.2db1	95 48		sta $48,x			sta 	esType,x
.2db3	c8		iny				iny 								; skip over string.
.2db4	98		tya				tya
.2db5	38		sec				sec									; +1 for the length itself.
.2db6	71 28		adc ($28),y			adc 	(codePtr),y
.2db8	a8		tay				tay 								; and fall through to term loop code.
.2db9					_ELHasTerm:
.2db9	b1 28		lda ($28),y			lda 	(codePtr),y
.2dbb	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; check in the correct range for binary tokens.
.2dbd	90 04		bcc $2dc3			bcc 	_ELPopExit
.2dbf	c9 99		cmp #$99			cmp 	#TOK_STRUCTST
.2dc1	90 02		bcc $2dc5			bcc 	_ELHasBinaryTerm
.2dc3					_ELPopExit:
.2dc3	68		pla				pla
.2dc4					_ELExit:
.2dc4	60		rts				rts
.2dc5					_ELHasBinaryTerm:
.2dc5	84 32		sty $32				sty 	tempShort 					; save position
.2dc7	a8		tay				tay 								; use token as an index and get the precedence.
.2dc8	b9 fa 2d	lda $2dfa,y			lda 	ELBinaryOperatorInfo-TOK_BINARYST,y
.2dcb	a4 32		ldy $32				ldy 	tempShort 					; restore Y
.2dcd	85 32		sta $32				sta 	tempShort 					; save precedence in memory.
.2dcf	68		pla				pla 								; restore current level.
.2dd0	c5 32		cmp $32				cmp 	tempShort 					; if current >= operator then exit
.2dd2	b0 f0		bcs $2dc4			bcs 	_ELExit
.2dd4	48		pha				pha 								; save current level back on the stack.
.2dd5	b1 28		lda ($28),y			lda 	(codePtr),y 				; save the binary operator on the stack and skip it.
.2dd7	48		pha				pha
.2dd8	c8		iny				iny
.2dd9	e8		inx				inx 								; calculate the RHS at the operator precedence.
.2dda	a5 32		lda $32				lda 	tempShort
.2ddc	20 55 2d	jsr $2d55			jsr 	EvaluateLevel
.2ddf	ca		dex				dex
.2de0	68		pla				pla 								; get the operator back out.
.2de1					_ELExecuteA:
.2de1	86 32		stx $32				stx 	tempShort 					; upload the vectors. Would be nice to use jmp (aaaa,x)
.2de3	0a		asl a				asl 	a 							; but not practical. May use push/rts later.
.2de4	aa		tax				tax
.2de5	bd 16 2a	lda $2a16,x			lda 	Group0Vectors,x
.2de8	85 2a		sta $2a				sta 	temp0
.2dea	bd 17 2a	lda $2a17,x			lda 	Group0Vectors+1,x
.2ded	85 2b		sta $2b				sta 	temp0+1
.2def	a6 32		ldx $32				ldx 	tempShort
.2df1	20 3e 2e	jsr $2e3e			jsr 	_ELCallTemp0
.2df4	4c b9 2d	jmp $2db9			jmp 	_ELHasTerm 					; and loop back round.
.2df7					_ELCheckUnary:
.2df7	c8		iny				iny 								; skip over token.
.2df8	c9 90		cmp #$90			cmp 	#TKW_MINUS 					; is it - term
.2dfa	f0 19		beq $2e15			beq 	_ELMinus
.2dfc	c9 97		cmp #$97			cmp 	#TKW_PLING 					; is it ! or ? term
.2dfe	f0 2c		beq $2e2c			beq 	_ELIndirect
.2e00	c9 98		cmp #$98			cmp 	#TKW_QMARK
.2e02	f0 28		beq $2e2c			beq 	_ELIndirect
.2e04	c9 83		cmp #$83			cmp 	#TOK_SHIFT3 				; is it the unary extension.
.2e06	f0 39		beq $2e41			beq 	_ELExtension
.2e08	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST 				; must be TOK_UNARYST ... TOK_TOKENS
.2e0a	90 04		bcc $2e10			bcc 	_ELUSyntax
.2e0c	c9 c9		cmp #$c9			cmp 	#TOK_TOKENS
.2e0e	90 d1		bcc $2de1			bcc 	_ELExecuteA 				; if so do that token.
.2e10					_ELUSyntax:
.2e10	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.2e12	20 18 15	jsr $1518		jsr	errorHandler
.2e15					_ELMinus:
.2e15	20 a7 2e	jsr $2ea7			jsr 	EvaluateNumericTerm 		; get a number to negate.
.2e18	b5 48		lda $48,x			lda 	esType,x 					; is it integer
.2e1a	f0 0a		beq $2e26			beq 	_ELMinusInteger
.2e1c	8a		txa				txa
.2e1d	a2 0e		ldx #$0e		ldx	#14
.2e1f	20 de 1d	jsr $1dde		jsr	floatingpointHandler
.2e22	aa		tax				tax
.2e23	4c b9 2d	jmp $2db9			jmp 	_ELHasTerm
.2e26					_ELMinusInteger:
.2e26	20 30 35	jsr $3530			jsr 	MInt32Negate 				; do int negate
.2e29	4c b9 2d	jmp $2db9			jmp 	_ELHasTerm
.2e2c					_ELIndirect:
.2e2c	48		pha				pha 								; save what we want (TKW_QMARK TWK_PLING)
.2e2d	20 b0 2e	jsr $2eb0			jsr 	EvaluateIntegerTerm 		; integer address
.2e30	68		pla				pla
.2e31	49 97		eor #$97			eor 	#TKW_PLING 					; now $00 if !
.2e33	f0 02		beq $2e37			beq 	_ELHaveModifier
.2e35	a9 20		lda #$20			lda 	#$20 						; now $00 if !, $20 if ?
.2e37					_ELHaveModifier:
.2e37	09 80		ora #$80			ora 	#$80						; make it the appropriate reference.
.2e39	95 48		sta $48,x			sta 	esType,x 					; $80 for ! $A0 for ?
.2e3b	4c b9 2d	jmp $2db9			jmp 	_ELHasTerm
.2e3e					_ELCallTemp0:
.2e3e	6c 2a 00	jmp ($002a)			jmp 	(temp0)
.2e41					_ELExtension:
.2e41	8a		txa				txa 								; stack pos in A
.2e42	20 60 18	jsr $1860		jsr	extensionHandler
.2e45	aa		tax				tax 								; restore stack
.2e46	4c b9 2d	jmp $2db9			jmp 	_ELHasTerm
.2e49					UnaryParenthesis:
.2e49	a9 00		lda #$00			lda 	#0 							; ( is a unary function ....
.2e4b	20 55 2d	jsr $2d55			jsr 	EvaluateLevel
.2e4e	20 e9 35	jsr $35e9			jsr 	CheckRightParen 			; check for )
.2e51	60		rts				rts
.2e52					ELShiftByteIn:
.2e52	48		pha				pha 								; save bits to shift in.
.2e53	b5 68		lda $68,x			lda 	esInt3,x 					; save top most byte
.2e55	48		pha				pha
.2e56	b5 60		lda $60,x			lda 	esInt2,x 					; shift everything left 8 bits
.2e58	95 68		sta $68,x			sta 	esInt3,x
.2e5a	b5 58		lda $58,x			lda 	esInt1,x
.2e5c	95 60		sta $60,x			sta 	esInt2,x
.2e5e	b5 50		lda $50,x			lda 	esInt0,x
.2e60	95 58		sta $58,x			sta 	esInt1,x
.2e62	a9 00		lda #$00			lda 	#0
.2e64	95 50		sta $50,x			sta 	esInt0,x
.2e66	68		pla				pla 								; now A:TOS is a 5 byte register, shift right twice.
.2e67	29 03		and #$03			and 	#3 							; only want lower 2 bits
.2e69	09 04		ora #$04			ora 	#4  						; set bit 2 - when 1 we are done
.2e6b					_ELShiftLoop:
.2e6b	4a		lsr a				lsr 	a
.2e6c	76 68		ror $68,x			ror 	esInt3,x
.2e6e	76 60		ror $60,x			ror 	esInt2,x
.2e70	76 58		ror $58,x			ror 	esInt1,x
.2e72	76 50		ror $50,x			ror 	esInt0,x
.2e74	c9 01		cmp #$01			cmp 	#1
.2e76	d0 f3		bne $2e6b			bne 	_ELShiftLoop
.2e78	68		pla				pla 								; get original 6 bit value and OR in.
.2e79	29 3f		and #$3f			and 	#$3F
.2e7b	15 50		ora $50,x			ora 	esInt0,x
.2e7d	95 50		sta $50,x			sta 	esInt0,x
.2e7f	60		rts				rts
.2e80					ELBinaryOperatorInfo:

;******  Processing file: main/evaluate/../../generated/binarystructinfo.inc

>2e80	01					.byte	$01			; $86 and
>2e81	01					.byte	$01			; $87 or
>2e82	01					.byte	$01			; $88 xor
>2e83	02					.byte	$02			; $89 >=
>2e84	02					.byte	$02			; $8a <=
>2e85	02					.byte	$02			; $8b >
>2e86	02					.byte	$02			; $8c <
>2e87	02					.byte	$02			; $8d =
>2e88	02					.byte	$02			; $8e <>
>2e89	03					.byte	$03			; $8f +
>2e8a	03					.byte	$03			; $90 -
>2e8b	04					.byte	$04			; $91 >>
>2e8c	04					.byte	$04			; $92 <<
>2e8d	04					.byte	$04			; $93 *
>2e8e	04					.byte	$04			; $94 /
>2e8f	04					.byte	$04			; $95 mod
>2e90	05					.byte	$05			; $96 ^
>2e91	06					.byte	$06			; $97 !
>2e92	06					.byte	$06			; $98 ?
>2e93	82					.byte	$82			; $99 repeat
>2e94	82					.byte	$82			; $9a while
>2e95	82					.byte	$82			; $9b for
>2e96	82					.byte	$82			; $9c if
>2e97	82					.byte	$82			; $9d defproc
>2e98	80					.byte	$80			; $9e until
>2e99	80					.byte	$80			; $9f wend
>2e9a	80					.byte	$80			; $a0 next
>2e9b	80					.byte	$80			; $a1 then
>2e9c	80					.byte	$80			; $a2 endif
>2e9d	80					.byte	$80			; $a3 endproc

;******  Return to file: main/evaluate/evaluate.asm


;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/support.asm

.2e9e					EvaluateTerm:
.2e9e	a9 0f		lda #$0f			lda 	#15 						; no binary operator has this high a precedence.
.2ea0	20 55 2d	jsr $2d55			jsr 	EvaluateLevel
.2ea3	20 04 2d	jsr $2d04			jsr 	DereferenceOne
.2ea6	60		rts				rts
.2ea7					EvaluateNumericTerm:
.2ea7	20 9e 2e	jsr $2e9e			jsr 	EvaluateTerm
.2eaa	b5 48		lda $48,x			lda 	esType,x
.2eac	0a		asl a				asl 	a 							; see if it's a string.
.2ead	30 09		bmi $2eb8			bmi 	ENTType
.2eaf	60		rts				rts
.2eb0					EvaluateIntegerTerm:
.2eb0	20 9e 2e	jsr $2e9e			jsr 	EvaluateTerm
.2eb3	b5 48		lda $48,x			lda 	esType,x
.2eb5	d0 01		bne $2eb8			bne 	ENTType
.2eb7	60		rts				rts
.2eb8					ENTType:
.2eb8	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.2eba	20 18 15	jsr $1518		jsr	errorHandler
.2ebd					EvaluateRoot:
.2ebd	a2 00		ldx #$00			ldx 	#0
.2ebf					Evaluate:
.2ebf	a9 00		lda #$00			lda 	#0
.2ec1	20 55 2d	jsr $2d55			jsr 	EvaluateLevel
.2ec4	20 04 2d	jsr $2d04			jsr 	DereferenceOne
.2ec7	60		rts				rts
.2ec8					EvaluateNumeric:
.2ec8	20 bf 2e	jsr $2ebf			jsr 	Evaluate
.2ecb	b5 48		lda $48,x			lda 	esType,x
.2ecd	0a		asl a				asl 	a 							; see if it's a string.
.2ece	30 e8		bmi $2eb8			bmi 	ENTType
.2ed0	4a		lsr a				lsr 	a 							; shift float flag into carry.
.2ed1	4a		lsr a				lsr 	a
.2ed2	60		rts				rts
.2ed3					EvaluateString:
.2ed3	20 bf 2e	jsr $2ebf			jsr 	Evaluate
.2ed6	b5 48		lda $48,x			lda 	esType,x
.2ed8	0a		asl a				asl 	a 							; see if it's a string.
.2ed9	10 dd		bpl $2eb8			bpl 	ENTType
.2edb	60		rts				rts
.2edc					EvaluateRootInteger:
.2edc	a2 00		ldx #$00			ldx 	#0
.2ede					EvaluateInteger:
.2ede	20 bf 2e	jsr $2ebf			jsr 	Evaluate
.2ee1	b5 48		lda $48,x			lda 	esType,x
.2ee3	d0 d3		bne $2eb8			bne 	ENTType
.2ee5	60		rts				rts
.2ee6					EvaluateSmallInteger:
.2ee6	20 de 2e	jsr $2ede			jsr 	EvaluateInteger
.2ee9	b5 58		lda $58,x			lda 	esInt1,x
.2eeb	15 60		ora $60,x			ora 	esInt2,x
.2eed	15 68		ora $68,x			ora 	esInt3,x
.2eef	d0 03		bne $2ef4			bne 	_ESIValue
.2ef1	b5 50		lda $50,x			lda 	esInt0,x
.2ef3	60		rts				rts
.2ef4					_ESIValue:
.2ef4	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.2ef6	20 18 15	jsr $1518		jsr	errorHandler
.2ef9					LinkEvaluate:
.2ef9	aa		tax				tax
.2efa	20 bf 2e	jsr $2ebf			jsr 	Evaluate
.2efd	8a		txa				txa
.2efe	60		rts				rts
.2eff					LinkEvaluateTerm:
.2eff	aa		tax				tax
.2f00	20 9e 2e	jsr $2e9e			jsr 	EvaluateTerm
.2f03	8a		txa				txa
.2f04	60		rts				rts
.2f05					LinkEvaluateInteger:
.2f05	aa		tax				tax
.2f06	20 de 2e	jsr $2ede			jsr 	EvaluateInteger
.2f09	8a		txa				txa
.2f0a	60		rts				rts
.2f0b					LinkEvaluateString:
.2f0b	aa		tax				tax
.2f0c	20 d3 2e	jsr $2ed3			jsr 	EvaluateString
.2f0f	8a		txa				txa
.2f10	60		rts				rts
.2f11					LinkEvaluateSmallInt:
.2f11	aa		tax				tax
.2f12	20 e6 2e	jsr $2ee6			jsr 	EvaluateSmallInteger
.2f15	8a		txa				txa
.2f16	60		rts				rts
.2f17					EvaluateReference:
.2f17	ad 91 2e	lda $2e91			lda 	ELBinaryOperatorInfo+TKW_PLING-TOK_BINARYST
.2f1a	38		sec				sec 								; sub 1 to allow a!x b?x to work.
.2f1b	e9 01		sbc #$01			sbc 	#1
.2f1d	20 55 2d	jsr $2d55			jsr 	EvaluateLevel
.2f20	b5 48		lda $48,x			lda 	esType,x
.2f22	10 01		bpl $2f25			bpl 	_ERFail
.2f24	60		rts				rts
.2f25					_ERFail:
.2f25	a2 0b		ldx #$0b			ldx 	#ErrorID_NoReference
.2f27	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary/convert.asm

.2f2a					Event_Str:
.2f2a	20 c8 2e	jsr $2ec8			jsr 	EvaluateNumeric 			; get a number.
.2f2d	b5 48		lda $48,x			lda 	esType,x 					; is it floating point
.2f2f	d0 13		bne $2f44			bne 	_ESFloat
.2f31	20 87 2f	jsr $2f87			jsr 	ConvertGetBase 				; get base, or default.
.2f34	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.2f36	85 2a		sta $2a				sta 	temp0
.2f38	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.2f3a	85 2b		sta $2b				sta 	1+(temp0)
.2f3c	b5 51		lda $51,x			lda 	esInt0+1,x 					; get the base
.2f3e	20 cc 34	jsr $34cc			jsr 	MInt32ToString 				; convert to string.
.2f41	4c 51 2f	jmp $2f51			jmp 	_ESCloneExit 				; clone and exit.
.2f44					_ESFloat:
.2f44	20 e9 35	jsr $35e9			jsr 	CheckRightParen 			; check closing )
.2f47	20 d0 22	jsr $22d0			jsr 	TOSToTemp0 					; string address in temp0, goes here.
.2f4a	8a		txa				txa
.2f4b	a2 16		ldx #$16		ldx	#22
.2f4d	20 de 1d	jsr $1dde		jsr	floatingpointHandler
.2f50	aa		tax				tax
.2f51					_ESCloneExit:
.2f51	8a		txa				txa
.2f52	a2 04		ldx #$04		ldx	#4
.2f54	20 21 39	jsr $3921		jsr	stringHandler
.2f57	aa		tax				tax
.2f58	60		rts				rts
.2f59					UnaryVal:
.2f59	38		sec				sec 								; Carry set to return value
.2f5a	b0 01		bcs $2f5d			bcs 	ValueMain
.2f5c					UnaryIsVal:
.2f5c	18		clc				clc									; Carry clear to return legitimacy
.2f5d					ValueMain:
.2f5d	08		php				php 								; save results (CS is value, CC is validation)
.2f5e	20 d3 2e	jsr $2ed3			jsr 	EvaluateString
.2f61	20 87 2f	jsr $2f87			jsr 	ConvertGetBase 				; get base, if any.
.2f64	98		tya				tya
.2f65	48		pha				pha
.2f66	20 d0 22	jsr $22d0			jsr 	TOSToTemp0 					; string address in temp0, goes here.
.2f69	b5 51		lda $51,x			lda 	esInt0+1,x 					; get the base
.2f6b	29 7f		and #$7f			and 	#$7F 						; ignore the sign bit.
.2f6d	20 e4 33	jsr $33e4			jsr 	MInt32FromString 			; convert it back from a string.
.2f70	b0 0c		bcs $2f7e			bcs 	_VMSuccess 					; successfully converted.
.2f72	b5 51		lda $51,x			lda 	esInt0+1,x 					; is base the default
.2f74	c9 8a		cmp #$8a			cmp 	#$80+10 					; if no, then it is integer only.
.2f76	f0 00		beq $2f78			beq 	_VMFailed 	 				; so we failed.
.2f78					_VMFailed:
.2f78	68		pla				pla
.2f79	a8		tay				tay
.2f7a	28		plp				plp
.2f7b	4c 76 35	jmp $3576			jmp 	MInt32False 				; return 0 whatever.
.2f7e					_VMSuccess:
.2f7e	68		pla				pla
.2f7f	a8		tay				tay
.2f80	28		plp				plp 								; if CS the it was val() so we want the value.
.2f81	b0 03		bcs $2f86			bcs 	_VMExit
.2f83	4c 72 35	jmp $3572			jmp 	MInt32True 					; otherwise return true as successful.
.2f86					_VMExit:
.2f86	60		rts				rts
.2f87					ConvertGetBase:
.2f87	a9 8a		lda #$8a			lda 	#10+$80 					; default base 10 signed.
.2f89	95 51		sta $51,x			sta 	esInt0+1,x
.2f8b	b1 28		lda ($28),y			lda 	(codePtr),y 				; check for ,base)
.2f8d	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.2f8f	d0 0e		bne $2f9f			bne 	_CGBDone 					; not found, should be )
.2f91	e8		inx				inx 								; next level
.2f92	c8		iny				iny 								; skip comma.
.2f93	20 e6 2e	jsr $2ee6			jsr 	EvaluateSmallInteger		; evaluate the base.
.2f96	ca		dex				dex
.2f97	c9 02		cmp #$02			cmp 	#2 							; base range is 2..16
.2f99	90 08		bcc $2fa3			bcc 	_CGBValue 					; (it should work as high as 37)
.2f9b	c9 11		cmp #$11			cmp 	#17
.2f9d	b0 04		bcs $2fa3			bcs 	_CGBValue
.2f9f					_CGBDone:
.2f9f	20 e9 35	jsr $35e9			jsr 	CheckRightParen
.2fa2	60		rts				rts
.2fa3					_CGBValue:
.2fa3	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.2fa5	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary/event.asm

.2fa8					EventFunction:
.2fa8	20 17 2f	jsr $2f17			jsr 	EvaluateReference			; get the variable reference that tracks the event
.2fab	b5 48		lda $48,x			lda 	esType,x
.2fad	c9 80		cmp #$80			cmp 	#$80 						; must be integer reference
.2faf	d0 5b		bne $300c			bne 	_EFType
.2fb1	20 f6 35	jsr $35f6			jsr 	CheckComma
.2fb4	e8		inx				inx
.2fb5	20 de 2e	jsr $2ede			jsr 	EvaluateInteger		 		; get the elapsed time between firing.
.2fb8	20 e9 35	jsr $35e9			jsr 	CheckRightParen 			; finish off with the right bracket
.2fbb	ca		dex				dex
.2fbc	b5 58		lda $58,x			lda 	esInt1,x 					; check max of 32767, we use 16 bit for timers and
.2fbe	29 80		and #$80			and 	#$80 						; it doesn't work > 32767
.2fc0	15 60		ora $60,x			ora 	esInt2,x
.2fc2	15 68		ora $68,x			ora 	esInt3,x
.2fc4	d0 41		bne $3007			bne 	_EFValue
.2fc6	98		tya				tya
.2fc7	48		pha				pha
.2fc8	8a		txa				txa
.2fc9	48		pha				pha
.2fca	a2 1c		ldx #$1c		ldx	#28
.2fcc	20 f6 14	jsr $14f6		jsr	deviceHandler
.2fcf	84 2d		sty $2d				sty 	temp1+1
.2fd1	85 2c		sta $2c				sta 	temp1
.2fd3	68		pla				pla
.2fd4	aa		tax				tax
.2fd5	20 d0 22	jsr $22d0			jsr 	TOSToTemp0 					; set temp0 to the address of the event variable
.2fd8	a0 03		ldy #$03			ldy 	#3							; if -ve
.2fda	b1 2a		lda ($2a),y			lda 	(temp0),y
.2fdc	30 23		bmi $3001			bmi 	_EFFail 	 				; straight out with fail, means "on pause".
.2fde	a0 00		ldy #$00			ldy 	#0 							; is the fire time zero ?
.2fe0	b1 2a		lda ($2a),y			lda 	(temp0),y
.2fe2	c8		iny				iny
.2fe3	11 2a		ora ($2a),y			ora 	(temp0),y
.2fe5	f0 17		beq $2ffe			beq 	_EFInitialise 				; if so, initialise the value but return false.
.2fe7	a0 00		ldy #$00			ldy 	#0 							; calculate trigger - timer
.2fe9	38		sec				sec
.2fea	b1 2a		lda ($2a),y			lda 	(temp0),y
.2fec	e5 2c		sbc $2c				sbc 	temp1
.2fee	c8		iny				iny
.2fef	b1 2a		lda ($2a),y			lda 	(temp0),y
.2ff1	e5 2d		sbc $2d				sbc 	temp1+1
.2ff3	10 0c		bpl $3001			bpl 	_EFFail 					; if trigger >= timer then return False
.2ff5	20 11 30	jsr $3011			jsr 	SetEventTimer 				; reset the timer for next time.
.2ff8	20 72 35	jsr $3572			jsr	 	MInt32True 					; and treutn true as fired.
.2ffb	68		pla				pla
.2ffc	a8		tay				tay
.2ffd	60		rts				rts
.2ffe					_EFInitialise:
.2ffe	20 11 30	jsr $3011			jsr		SetEventTimer 				; set trigger time to time + elapsed
.3001					_EFFail:
.3001	68		pla				pla
.3002	a8		tay				tay
.3003	20 76 35	jsr $3576			jsr 	MInt32False
.3006	60		rts				rts
.3007					_EFValue:
.3007	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.3009	20 18 15	jsr $1518		jsr	errorHandler
.300c					_EFType:
.300c	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.300e	20 18 15	jsr $1518		jsr	errorHandler
.3011					SetEventTimer:
.3011	a0 00		ldy #$00			ldy 	#0
.3013	18		clc				clc
.3014	a5 2c		lda $2c				lda 	temp1
.3016	75 51		adc $51,x			adc 	esInt0+1,x
.3018	91 2a		sta ($2a),y			sta		(temp0),y
.301a	c8		iny				iny
.301b	a5 2d		lda $2d				lda 	temp1+1
.301d	75 59		adc $59,x			adc 	esInt1+1,x
.301f	91 2a		sta ($2a),y			sta		(temp0),y
.3021	88		dey				dey
.3022	11 2a		ora ($2a),y			ora 	(temp0),y 					; if the result is non zero, exit
.3024	d0 04		bne $302a			bne 	_SETExit 					; zero means initialise.....
.3026	a9 01		lda #$01			lda 	#1 							; timer zero won't work, so make it 1, which is
.3028	91 2a		sta ($2a),y			sta 	(temp0),y 					; near enough.
.302a					_SETExit:
.302a	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary/unary.asm

.302b					UnaryLen:
.302b	20 39 30	jsr $3039			jsr 	ULStart
.302e					ULFinish:
.302e	b1 2a		lda ($2a),y			lda 	(temp0),y 					; get length prefix
.3030	a4 32		ldy $32				ldy 	tempShort 					; get Y back
.3032	20 85 35	jsr $3585			jsr 	MInt32Set8Bit 				; write it out.
.3035	20 e9 35	jsr $35e9			jsr 	CheckRightParen
.3038	60		rts				rts
.3039	20 d3 2e	jsr $2ed3	ULStart:jsr 	EvaluateString
.303c	b5 50		lda $50,x			lda 	esInt0,x 					; copy address of string to temp0
.303e	85 2a		sta $2a				sta 	temp0
.3040	b5 58		lda $58,x			lda 	esInt1,x
.3042	85 2b		sta $2b				sta 	temp0+1
.3044	84 32		sty $32				sty 	tempShort 					; get length
.3046	a0 00		ldy #$00			ldy 	#0
.3048	60		rts				rts
.3049					UnaryAsc:
.3049	20 39 30	jsr $3039			jsr 	ULStart 					; same as LEN() get string, save Y, point to length.
.304c	b1 2a		lda ($2a),y			lda 	(temp0),y 					; read length
.304e	c8		iny				iny 		 						; point to first character, we can do LEN code after that
.304f	c9 00		cmp #$00			cmp 	#0
.3051	d0 db		bne $302e			bne 	ULFinish 					; if length = 0 then error : asc("") -> error.
.3053	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.3055	20 18 15	jsr $1518		jsr	errorHandler
.3058					UnaryAbs:
.3058	20 c8 2e	jsr $2ec8			jsr 	EvaluateNumeric 			; some numeric value
.305b	b0 07		bcs $3064			bcs 	_UAFloat 					; CS then float, so use that function
.305d	20 2b 35	jsr $352b			jsr 	MInt32Absolute 				; int version
.3060	20 e9 35	jsr $35e9			jsr 	CheckRightParen
.3063	60		rts				rts
.3064					_UAFloat:
.3064	8a		txa				txa 								; float version
.3065	a2 02		ldx #$02		ldx	#2
.3067	20 de 1d	jsr $1dde		jsr	floatingpointHandler
.306a	aa		tax				tax
.306b	20 e9 35	jsr $35e9			jsr 	CheckRightParen
.306e	60		rts				rts
.306f					UnarySgn:
.306f	20 c8 2e	jsr $2ec8			jsr 	EvaluateNumeric 			; same as above but sign of value
.3072	b0 07		bcs $307b			bcs 	_USFloat
.3074	20 63 35	jsr $3563			jsr 	MInt32Sign
.3077	20 e9 35	jsr $35e9			jsr 	CheckRightParen
.307a	60		rts				rts
.307b					_USFloat:
.307b	8a		txa				txa
.307c	a2 10		ldx #$10		ldx	#16
.307e	20 de 1d	jsr $1dde		jsr	floatingpointHandler
.3081	aa		tax				tax
.3082	20 e9 35	jsr $35e9			jsr 	CheckRightParen
.3085	60		rts				rts
.3086					UnaryPeek:
.3086	20 b2 30	jsr $30b2			jsr 	PDLCode 					; each has common setup code put reads 1,2 or 4 bytes
.3089	4c a6 30	jmp $30a6			jmp 	PDLByte0
.308c					UnaryDeek:
.308c	20 b2 30	jsr $30b2			jsr 	PDLCode
.308f	4c a0 30	jmp $30a0			jmp 	PDLByte1
.3092					UnaryLeek:
.3092	20 b2 30	jsr $30b2			jsr 	PDLCode
.3095	a0 03		ldy #$03			ldy 	#3							; read 3-2
.3097	b1 2a		lda ($2a),y			lda 	(temp0),y
.3099	95 68		sta $68,x			sta 	esInt3,x
.309b	88		dey				dey
.309c	b1 2a		lda ($2a),y			lda 	(temp0),y
.309e	95 60		sta $60,x			sta 	esInt2,x
.30a0					PDLByte1:
.30a0	a0 01		ldy #$01			ldy 	#1
.30a2	b1 2a		lda ($2a),y			lda 	(temp0),y
.30a4	95 58		sta $58,x			sta 	esInt1,x
.30a6					PDLByte0:
.30a6	a0 00		ldy #$00			ldy 	#0
.30a8	b1 2a		lda ($2a),y			lda 	(temp0),y
.30aa	95 50		sta $50,x			sta 	esInt0,x
.30ac	a4 32		ldy $32				ldy 	tempShort 					; restore Y
.30ae	20 e9 35	jsr $35e9			jsr 	CheckRightParen 			; check right and return
.30b1	60		rts				rts
.30b2					PDLCode:
.30b2	20 de 2e	jsr $2ede			jsr 	EvaluateInteger 			; some address
.30b5	b5 50		lda $50,x			lda 	esInt0,x 					; copy address of string to temp0
.30b7	85 2a		sta $2a				sta 	temp0
.30b9	b5 58		lda $58,x			lda 	esInt1,x
.30bb	85 2b		sta $2b				sta 	temp0+1
.30bd	a9 00		lda #$00			lda 	#0 							; zero upper 3 bytes of result, type okay.
.30bf	95 58		sta $58,x			sta 	esInt1,x 					; PEEK needs upper 3 cleared
.30c1	95 60		sta $60,x			sta 	esInt2,x
.30c3	95 68		sta $68,x			sta 	esInt3,x
.30c5	84 32		sty $32				sty 	tempShort 					; save Y
.30c7	60		rts				rts
.30c8					Unary_Random:
.30c8	20 a6 35	jsr $35a6			jsr 	MInt32Random 				; generate random number.
.30cb	b1 28		lda ($28),y			lda 	(codePtr),y 				; check followed by )
.30cd	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.30cf	f0 08		beq $30d9			beq 	_URExit
.30d1	e8		inx				inx 								; load range 0..r-1 into +1
.30d2	20 de 2e	jsr $2ede			jsr 	EvaluateInteger
.30d5	ca		dex				dex
.30d6	20 c9 33	jsr $33c9			jsr 	MInt32Modulus 				; calculate random % modulus
.30d9					_URExit:
.30d9	20 e9 35	jsr $35e9			jsr 	CheckRightParen 			; check right and return
.30dc	60		rts				rts
.30dd					Unary_Min:
.30dd	a9 01		lda #$01			lda 	#1 							; c1 cmp c2 needs to be > e.g. c1 > c2
.30df	d0 02		bne $30e3			bne 	UnaryMBody
.30e1					Unary_Max:
.30e1	a9 ff		lda #$ff			lda 	#$FF 						; c1 cmp c2 needs to be < e.g. c1 < c2
.30e3					UnaryMBody:
.30e3	48		pha				pha 								; save comparator on stack, shows min or max
.30e4	20 bf 2e	jsr $2ebf			jsr 	Evaluate 					; get the first thing to check
.30e7					_UnaryMLoop:
.30e7	b1 28		lda ($28),y			lda 	(codePtr),y 				; found ), indicates end.
.30e9	c8		iny				iny
.30ea	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.30ec	f0 09		beq $30f7			beq 	_UnaryMExit
.30ee	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; found , indicates more.
.30f0	f0 07		beq $30f9			beq 	_UnaryMCompare
.30f2	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.30f4	20 18 15	jsr $1518		jsr	errorHandler
.30f7					_UnaryMExit:
.30f7	68		pla				pla 								; done so throw comparator and return.
.30f8	60		rts				rts
.30f9					_UnaryMCompare:
.30f9	e8		inx				inx 								; get the 2nd thing to evaluate
.30fa	20 bf 2e	jsr $2ebf			jsr 	Evaluate
.30fd	ca		dex				dex
.30fe	20 85 2c	jsr $2c85			jsr 	PerformComparison 			; this is part of evaluate/compare.asm
.3101	85 32		sta $32				sta 	tempShort 					; save result
.3103	68		pla				pla 								; get what we need
.3104	48		pha				pha
.3105	c5 32		cmp $32				cmp 	tempShort 					; did we get it
.3107	d0 de		bne $30e7			bne 	_UnaryMLoop 				; no, try another value.
.3109	20 76 35	jsr $3576			jsr 	MInt32False 				; promote 2nd to 1st.
.310c	20 5a 34	jsr $345a			jsr 	MInt32Add
.310f	4c e7 30	jmp $30e7			jmp 	_UnaryMLoop
.3112					Unary_Page:
.3112	20 76 35	jsr $3576			jsr 	MInt32False 				; zero
.3115	ad c8 0a	lda $0ac8			lda 	basePage 					; copy base page address in.
.3118	95 50		sta $50,x			sta 	esInt0,x
.311a	ad c9 0a	lda $0ac9			lda 	basePage+1
.311d	95 58		sta $58,x			sta 	esInt1,x
.311f	60		rts				rts
.3120					UnaryReference:
.3120	a9 0f		lda #$0f			lda 	#15
.3122	20 55 2d	jsr $2d55			jsr 	EvaluateLevel 				; evaluate term and don't deference.
.3125	b5 48		lda $48,x			lda 	esType,x 					; check it's a reference.
.3127	10 05		bpl $312e			bpl 	UType
.3129	a9 00		lda #$00			lda 	#0 							; make it an integer
.312b	95 48		sta $48,x			sta 	esType,x
.312d	60		rts				rts
.312e					UType:
.312e	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.3130	20 18 15	jsr $1518		jsr	errorHandler
.3133					UnaryHexMarker:
.3133	4c b0 2e	jmp $2eb0			jmp 	EvaluateIntegerTerm
.3136					UnaryComplement:
.3136	20 b0 2e	jsr $2eb0			jsr 	EvaluateIntegerTerm
.3139	20 4a 35	jsr $354a			jsr 	MInt32Not
.313c	60		rts				rts
.313d					UnaryIntToFloat:
.313d	20 c8 2e	jsr $2ec8			jsr 	EvaluateNumeric				; some number
.3140	b5 48		lda $48,x			lda 	esType,x 					; if float already, exit
.3142	d0 0b		bne $314f			bne 	_UIFExit
.3144	8a		txa				txa 								; convert and set type
.3145	a2 1c		ldx #$1c		ldx	#28
.3147	20 de 1d	jsr $1dde		jsr	floatingpointHandler
.314a	aa		tax				tax
.314b	a9 01		lda #$01			lda 	#1
.314d	95 48		sta $48,x			sta 	esType,x
.314f					_UIFExit:
.314f	60		rts				rts
.3150					UnaryFloatToInt:
.3150	20 c8 2e	jsr $2ec8			jsr 	EvaluateNumeric 			; the number
.3153	b5 48		lda $48,x			lda 	esType,x 					; if int already exit
.3155	f0 0b		beq $3162			beq 	_UFIExit
.3157	8a		txa				txa 								; convert to int
.3158	a2 14		ldx #$14		ldx	#20
.315a	20 de 1d	jsr $1dde		jsr	floatingpointHandler
.315d	aa		tax				tax
.315e	a9 00		lda #$00			lda 	#0 							; set type
.3160	95 48		sta $48,x			sta 	esType,x
.3162					_UFIExit:
.3162	60		rts				rts
.3163					UnaryAlloc:
.3163	e8		inx				inx 								; evaluate memory required
.3164	20 de 2e	jsr $2ede			jsr 	EvaluateInteger
.3167	20 e9 35	jsr $35e9			jsr 	CheckRightParen
.316a	ca		dex				dex
.316b	b5 61		lda $61,x			lda 	esInt2+1,x 					; check at least in 64k range.
.316d	15 69		ora $69,x			ora 	esInt3+1,x
.316f	d0 1d		bne $318e			bne 	_UABadValue
.3171	20 76 35	jsr $3576			jsr 	MInt32False					; zero return.
.3174	a5 36		lda $36				lda 	lowMemory+1 				; copy low memory in
.3176	95 58		sta $58,x			sta 	esInt1,x
.3178	a5 35		lda $35				lda 	lowMemory
.317a	95 50		sta $50,x			sta 	esInt0,x
.317c	18		clc				clc 								; add alloc required.
.317d	75 51		adc $51,x			adc 	esInt0+1,x
.317f	85 35		sta $35				sta 	lowMemory
.3181	a5 36		lda $36				lda 	lowMemory+1
.3183	75 59		adc $59,x			adc 	esInt1+1,x
.3185	85 36		sta $36				sta 	lowMemory+1
.3187	b0 05		bcs $318e			bcs		_UABadValue 				; overflow definitely bad.
.3189	c5 34		cmp $34				cmp 	highMemory+1
.318b	b0 01		bcs $318e			bcs 	_UABadValue 				; out of memory bad.
.318d	60		rts				rts
.318e					_UABadValue:
.318e	a2 22		ldx #$22			ldx 	#ErrorID_Memory
.3190	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary/unary2.asm

.3193					UnaryTimer:
.3193	20 e9 35	jsr $35e9			jsr 	CheckRightParen 			; no parameters
.3196	98		tya				tya
.3197	48		pha				pha
.3198	20 9d 35	jsr $359d			jsr 	MInt32Zero 					; zero result
.319b	86 2a		stx $2a				stx 	temp0 						; returning in YA so can't use .pshx
.319d	a2 1c		ldx #$1c		ldx	#28
.319f	20 f6 14	jsr $14f6		jsr	deviceHandler
.31a2	a6 2a		ldx $2a				ldx 	temp0						; restore X and update 16 bit result
.31a4	95 50		sta $50,x			sta 	esInt0,x
.31a6	98		tya				tya
.31a7	95 58		sta $58,x			sta 	esInt1,x
.31a9	68		pla				pla
.31aa	a8		tay				tay
.31ab	60		rts				rts
.31ac					UnaryInkey:
.31ac	20 e9 35	jsr $35e9			jsr 	CheckRightParen
.31af	86 2a		stx $2a				stx 	temp0
.31b1	a2 0a		ldx #$0a		ldx	#10
.31b3	20 f6 14	jsr $14f6		jsr	deviceHandler
.31b6	a6 2a		ldx $2a				ldx 	temp0
.31b8	20 85 35	jsr $3585			jsr 	MInt32Set8Bit
.31bb	60		rts				rts
.31bc					UnaryGet:
.31bc	20 e9 35	jsr $35e9			jsr 	CheckRightParen
.31bf	86 2a		stx $2a				stx 	temp0
.31c1					_UGLoop:
.31c1	a2 02		ldx #$02		ldx	#2
.31c3	20 f6 14	jsr $14f6		jsr	deviceHandler
.31c6	a2 0a		ldx #$0a		ldx	#10
.31c8	20 f6 14	jsr $14f6		jsr	deviceHandler
.31cb	c9 00		cmp #$00			cmp 	#0
.31cd	f0 f2		beq $31c1			beq 	_UGLoop
.31cf	a6 2a		ldx $2a				ldx 	temp0
.31d1	20 85 35	jsr $3585			jsr 	MInt32Set8Bit
.31d4	60		rts				rts
.31d5					UnaryGetString:
.31d5	20 bc 31	jsr $31bc			jsr 	UnaryGet
.31d8					UGSDoChr:
.31d8	4c 29 32	jmp $3229			jmp 	ChrCode
.31db					UnaryInkeyString:
.31db	20 ac 31	jsr $31ac			jsr 	UnaryInkey
.31de	b5 50		lda $50,x			lda 	esInt0,x
.31e0	d0 f6		bne $31d8			bne 	UGSDoChr
.31e2	8a		txa				txa
.31e3	a2 08		ldx #$08		ldx	#8
.31e5	20 21 39	jsr $3921		jsr	stringHandler
.31e8	aa		tax				tax
.31e9	60		rts				rts
.31ea					UnarySys:
.31ea	20 de 2e	jsr $2ede			jsr 	EvaluateInteger 				; get the address
.31ed	20 e9 35	jsr $35e9			jsr 	CheckRightParen
.31f0	20 d0 22	jsr $22d0			jsr 	TOSToTemp0 						; copy call address to temp0
.31f3	8a		txa				txa
.31f4	48		pha				pha
.31f5	98		tya				tya
.31f6	48		pha				pha
.31f7	ad 00 0a	lda $0a00			lda 	("A"-"A")*4+SingleLetterVar 	; load AXY
.31fa	ae 5c 0a	ldx $0a5c			ldx 	("X"-"A")*4+SingleLetterVar
.31fd	ac 60 0a	ldy $0a60			ldy 	("Y"-"A")*4+SingleLetterVar
.3200	20 0f 32	jsr $320f			jsr 	_CallTemp0
.3203	85 32		sta $32				sta 	tempShort 						; restore YX
.3205	68		pla				pla
.3206	a8		tay				tay
.3207	68		pla				pla
.3208	aa		tax				tax
.3209	a5 32		lda $32				lda 	tempShort
.320b	20 85 35	jsr $3585			jsr 	MInt32Set8Bit 					; return result.
.320e	60		rts				rts
.320f					_CallTemp0:
.320f	6c 2a 00	jmp ($002a)			jmp 	(temp0)
.3212					UnaryMem:
.3212	20 76 35	jsr $3576			jsr 	MInt32False 					; set to false (e.g. 0)
.3215	38		sec				sec
.3216	a5 33		lda $33				lda 	highMemory 						; calculate value
.3218	e5 35		sbc $35				sbc 	lowMemory
.321a	95 50		sta $50,x			sta 	esInt0,x
.321c	a5 34		lda $34				lda 	highMemory+1
.321e	e5 36		sbc $36				sbc 	lowMemory+1
.3220	95 58		sta $58,x			sta 	esInt1,x
.3222	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary/unarystr.asm

.3223					ExecChr:
.3223	20 e6 2e	jsr $2ee6			jsr 	EvaluateSmallInteger		; character number 0-255
.3226	20 e9 35	jsr $35e9			jsr 	CheckRightParen				; right bracket
.3229					ChrCode:
.3229	98		tya				tya
.322a	48		pha				pha
.322b	8a		txa				txa 								; A = stack
.322c	b4 50		ldy $50,x			ldy 	esInt0,x					; Y = character
.322e	a2 02		ldx #$02		ldx	#2
.3230	20 21 39	jsr $3921		jsr	stringHandler
.3233	aa		tax				tax 								; X = stack
.3234	68		pla				pla
.3235	a8		tay				tay
.3236	60		rts				rts
.3237					ExecLower:
.3237	38		sec				sec 								; set carry is lower
.3238	b0 01		bcs $323b			bcs 	ExecUpperLower
.323a					ExecUpper:
.323a	18		clc				clc 								; clear carry is upper
.323b					ExecUpperLower:
.323b	08		php				php 								; save carry
.323c	20 d3 2e	jsr $2ed3			jsr 	EvaluateString 				; string to stack,X
.323f	20 e9 35	jsr $35e9			jsr 	CheckRightParen 			; check closing right bracket.
.3242	28		plp				plp 								; restore carry, save Y
.3243	98		tya				tya
.3244	48		pha				pha
.3245	a9 00		lda #$00			lda 	#0 							; A zero if upper, 1 if lower.
.3247	2a		rol a				rol 	a
.3248	a8		tay				tay 								; now in Y
.3249	8a		txa				txa 								; do the substring and exit.
.324a	a2 0c		ldx #$0c		ldx	#12
.324c	20 21 39	jsr $3921		jsr	stringHandler
.324f	aa		tax				tax
.3250	68		pla				pla
.3251	a8		tay				tay
.3252	60		rts				rts
.3253					ExecLeft:
.3253	20 d3 2e	jsr $2ed3			jsr 	EvaluateString 				; string to stack,X
.3256	20 f6 35	jsr $35f6			jsr 	CheckComma
.3259	e8		inx				inx
.325a	a9 01		lda #$01			lda 	#1 							; 1 for 2nd parameter.
.325c	20 85 35	jsr $3585			jsr 	MInt32Set8Bit
.325f	e8		inx				inx
.3260	20 e6 2e	jsr $2ee6			jsr 	EvaluateSmallInteger 		; smallint 3rd parameter
.3263					ExecSubstring:
.3263	ca		dex				dex 								; fix up X
.3264	ca		dex				dex
.3265	20 e9 35	jsr $35e9			jsr 	CheckRightParen 			; check closing right bracket.
.3268	8a		txa				txa 								; do the substring and exit.
.3269	a2 0e		ldx #$0e		ldx	#14
.326b	20 21 39	jsr $3921		jsr	stringHandler
.326e	aa		tax				tax
.326f	60		rts				rts
.3270					ExecMid:
.3270	20 d3 2e	jsr $2ed3			jsr 	EvaluateString 				; string to stack,X
.3273	20 f6 35	jsr $35f6			jsr 	CheckComma
.3276	e8		inx				inx
.3277	20 e6 2e	jsr $2ee6			jsr 	EvaluateSmallInteger 		; smallint 2nd parameter
.327a	c9 00		cmp #$00			cmp 	#0
.327c	f0 15		beq $3293			beq 	_EMValue
.327e	e8		inx				inx
.327f	a9 ff		lda #$ff			lda 	#255 						; 255 default for 3nd parameter - this is optional.
.3281	20 85 35	jsr $3585			jsr 	MInt32Set8Bit
.3284	b1 28		lda ($28),y			lda 	(codePtr),y 				; is there a ) next
.3286	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN 				; if so, just MID$(a$,2)
.3288	f0 d9		beq $3263			beq 	ExecSubString
.328a	20 f6 35	jsr $35f6			jsr 	CheckComma
.328d	20 e6 2e	jsr $2ee6			jsr 	EvaluateSmallInteger 		; smallint 2nd parameter
.3290	4c 63 32	jmp $3263			jmp 	ExecSubString
.3293					_EMValue:
.3293	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.3295	20 18 15	jsr $1518		jsr	errorHandler
.3298					ExecRight:
.3298	20 d3 2e	jsr $2ed3			jsr 	EvaluateString 				; string to stack,X
.329b	20 f6 35	jsr $35f6			jsr 	CheckComma
.329e	e8		inx				inx
.329f	20 e6 2e	jsr $2ee6			jsr 	EvaluateSmallInteger 		; smallint 2nd parameter.
.32a2	ca		dex				dex
.32a3	98		tya				tya
.32a4	48		pha				pha
.32a5	b5 50		lda $50,x			lda 	esInt0,x 					; copy address of string to temp0
.32a7	85 2a		sta $2a				sta 	temp0
.32a9	b5 58		lda $58,x			lda 	esInt1,x
.32ab	85 2b		sta $2b				sta 	temp0+1
.32ad	a0 00		ldy #$00			ldy 	#0 							; point to length
.32af	b1 2a		lda ($2a),y			lda 	(temp0),y 					; get the length.
.32b1	18		clc				clc 								; add 1.
.32b2	69 01		adc #$01			adc 	#1
.32b4	38		sec				sec
.32b5	f5 51		sbc $51,x			sbc 	esInt0+1,x  				; subtract right count.
.32b7	f0 02		beq $32bb			beq		_ERMake1 					; if zero, make it 1.
.32b9	b0 02		bcs $32bd			bcs		_EROkay
.32bb					_ERMake1:
.32bb	a9 01		lda #$01			lda 	#1 							; start position.
.32bd					_EROkay:
.32bd	e8		inx				inx 								; set start pos.
.32be	95 50		sta $50,x			sta 	esInt0,x
.32c0	e8		inx				inx
.32c1	a9 ff		lda #$ff			lda 	#255 						; 255 default for 3nd parameter.
.32c3	20 85 35	jsr $3585			jsr 	MInt32Set8Bit
.32c6	68		pla				pla
.32c7	a8		tay				tay
.32c8	4c 63 32	jmp $3263			jmp 	ExecSubString 				; do the substring code.

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32binary.asm

.32cb					MInt32And:
.32cb	b5 50		lda $50,x			lda 	esInt0,x
.32cd	35 51		and $51,x			and 	esInt0+1,x
.32cf	95 50		sta $50,x			sta 	esInt0,x
.32d1	b5 58		lda $58,x			lda 	esInt1,x
.32d3	35 59		and $59,x			and 	esInt1+1,x
.32d5	95 58		sta $58,x			sta 	esInt1,x
.32d7	b5 60		lda $60,x			lda 	esInt2,x
.32d9	35 61		and $61,x			and 	esInt2+1,x
.32db	95 60		sta $60,x			sta 	esInt2,x
.32dd	b5 68		lda $68,x			lda 	esInt3,x
.32df	35 69		and $69,x			and 	esInt3+1,x
.32e1	95 68		sta $68,x			sta 	esInt3,x
.32e3	60		rts				rts
.32e4					MInt32Or:
.32e4	b5 50		lda $50,x			lda 	esInt0,x
.32e6	15 51		ora $51,x			ora 	esInt0+1,x
.32e8	95 50		sta $50,x			sta 	esInt0,x
.32ea	b5 58		lda $58,x			lda 	esInt1,x
.32ec	15 59		ora $59,x			ora 	esInt1+1,x
.32ee	95 58		sta $58,x			sta 	esInt1,x
.32f0	b5 60		lda $60,x			lda 	esInt2,x
.32f2	15 61		ora $61,x			ora 	esInt2+1,x
.32f4	95 60		sta $60,x			sta 	esInt2,x
.32f6	b5 68		lda $68,x			lda 	esInt3,x
.32f8	15 69		ora $69,x			ora 	esInt3+1,x
.32fa	95 68		sta $68,x			sta 	esInt3,x
.32fc	60		rts				rts
.32fd					MInt32Xor:
.32fd	b5 50		lda $50,x			lda 	esInt0,x
.32ff	55 51		eor $51,x			eor 	esInt0+1,x
.3301	95 50		sta $50,x			sta 	esInt0,x
.3303	b5 58		lda $58,x			lda 	esInt1,x
.3305	55 59		eor $59,x			eor 	esInt1+1,x
.3307	95 58		sta $58,x			sta 	esInt1,x
.3309	b5 60		lda $60,x			lda 	esInt2,x
.330b	55 61		eor $61,x			eor 	esInt2+1,x
.330d	95 60		sta $60,x			sta 	esInt2,x
.330f	b5 68		lda $68,x			lda 	esInt3,x
.3311	55 69		eor $69,x			eor 	esInt3+1,x
.3313	95 68		sta $68,x			sta 	esInt3,x
.3315	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32compare.asm

.3316					MInt32Compare:
.3316	b5 50		lda $50,x			lda 	esInt0,x 					; equality check first.
.3318	d5 51		cmp $51,x			cmp 	esInt0+1,x
.331a	d0 13		bne $332f			bne 	MInt32Compare2
.331c	b5 58		lda $58,x			lda 	esInt1,x
.331e	d5 59		cmp $59,x			cmp 	esInt1+1,x
.3320	d0 0d		bne $332f			bne 	MInt32Compare2
.3322	b5 60		lda $60,x			lda 	esInt2,x
.3324	d5 61		cmp $61,x			cmp 	esInt2+1,x
.3326	d0 07		bne $332f			bne 	MInt32Compare2
.3328	b5 68		lda $68,x			lda 	esInt3,x
.332a	55 69		eor $69,x			eor 	esInt3+1,x 					; EOR will return 0 if the same.
.332c	d0 01		bne $332f			bne 	MInt32Compare2
.332e	60		rts				rts
.332f					MInt32Compare2:
.332f	b5 50		lda $50,x			lda		esInt0,x 					; unsigned 32 bit comparison.
.3331	d5 51		cmp $51,x			cmp 	esInt0+1,x
.3333	b5 58		lda $58,x			lda		esInt1,x
.3335	f5 59		sbc $59,x			sbc 	esInt1+1,x
.3337	b5 60		lda $60,x			lda		esInt2,x
.3339	f5 61		sbc $61,x			sbc 	esInt2+1,x
.333b	b5 68		lda $68,x			lda		esInt3,x
.333d	f5 69		sbc $69,x			sbc 	esInt3+1,x
.333f	50 02		bvc $3343			bvc 	_I32LNoOverflow 			; make it signed 32 bit comparison
.3341	49 80		eor #$80			eor 	#$80
.3343					_I32LNoOverflow
.3343	30 03		bmi $3348			bmi 	MInt32CLess					; if -ve then return $FF
.3345	a9 01		lda #$01			lda 	#$01						; else return $01
.3347	60		rts				rts
.3348					MInt32CLess:
.3348	a9 ff		lda #$ff			lda 	#$FF
.334a	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32divide.asm

.334b					MInt32SDivide:
.334b	98		tya				tya  								; save Y, which is the count of negations
.334c	48		pha				pha
.334d	a0 00		ldy #$00			ldy 	#0 							; zero count
.334f	20 67 33	jsr $3367			jsr 	_MInt32SRemSign 			; unsign TOS
.3352	e8		inx				inx 								; unsign TOS+1
.3353	20 67 33	jsr $3367			jsr 	_MInt32SRemSign
.3356	ca		dex				dex
.3357	98		tya				tya 								; save sign count on stack
.3358	48		pha				pha
.3359	20 70 33	jsr $3370			jsr 	MInt32UDivide 				; unsigned division
.335c	68		pla				pla 								; get sign count back
.335d	29 01		and #$01			and 	#1 							; if it is odd, then negate result
.335f	f0 03		beq $3364			beq 	_I32SNoNeg
.3361	20 30 35	jsr $3530			jsr 	MInt32Negate
.3364					_I32SNoNeg:
.3364	68		pla				pla 								; restoe Y and exit
.3365	a8		tay				tay
.3366	60		rts				rts
.3367					_MInt32SRemSign:
.3367	b5 68		lda $68,x			lda 	esInt3,x 					; is it -ve
.3369	10 04		bpl $336f			bpl 	_MInt32SRSExit
.336b	c8		iny				iny 								; increment the sign count
.336c	20 30 35	jsr $3530			jsr 	MInt32Negate 				; negate the value.
.336f					_MInt32SRSExit:
.336f	60		rts				rts
.3370					MInt32UDivide:
.3370	b5 51		lda $51,x			lda 	esInt0+1,x 					; check for division by zero
.3372	15 59		ora $59,x			ora 	esInt1+1,x
.3374	15 5a		ora $5a,x			ora 	esInt1+2,x
.3376	15 5b		ora $5b,x			ora 	esInt1+3,x
.3378	f0 4a		beq $33c4			beq 	_MInt32DZero
.337a	e8		inx				inx 								; clear A
.337b	e8		inx				inx
.337c	20 76 35	jsr $3576			jsr 	MInt32False
.337f	ca		dex				dex
.3380	ca		dex				dex
.3381	98		tya				tya 								; save Y on the stack
.3382	48		pha				pha
.3383	a0 20		ldy #$20			ldy 	#32 						; number of division passes
.3385					_MInt32UDLoop:
.3385	16 50		asl $50,x			asl 	esInt0,x					; shift QA left. First Q
.3387	36 58		rol $58,x			rol 	esInt1,x
.3389	36 60		rol $60,x			rol 	esInt2,x
.338b	36 68		rol $68,x			rol 	esInt3,x
.338d	36 52		rol $52,x			rol 	esInt0+2,x 					; then A.
.338f	36 5a		rol $5a,x			rol 	esInt1+2,x
.3391	36 62		rol $62,x			rol 	esInt2+2,x
.3393	36 6a		rol $6a,x			rol 	esInt3+2,x
.3395	38		sec				sec 								; calculate A-M saving result on the stack
.3396	b5 52		lda $52,x			lda 	esInt0+2,x
.3398	f5 51		sbc $51,x			sbc 	esInt0+1,x
.339a	48		pha				pha
.339b	b5 5a		lda $5a,x			lda 	esInt1+2,x
.339d	f5 59		sbc $59,x			sbc 	esInt1+1,x
.339f	48		pha				pha
.33a0	b5 62		lda $62,x			lda 	esInt2+2,x
.33a2	f5 61		sbc $61,x			sbc 	esInt2+1,x
.33a4	48		pha				pha
.33a5	b5 6a		lda $6a,x			lda 	esInt3+2,x
.33a7	f5 69		sbc $69,x			sbc 	esInt3+1,x
.33a9	90 10		bcc $33bb			bcc		_MInt32NoSubtract 			; if A < M (e.g. carry clear) then reject this.
.33ab	95 6a		sta $6a,x			sta 	esInt3+2,x 					; write result back to A
.33ad	68		pla				pla
.33ae	95 62		sta $62,x			sta 	esInt2+2,x
.33b0	68		pla				pla
.33b1	95 5a		sta $5a,x			sta 	esInt1+2,x
.33b3	68		pla				pla
.33b4	95 52		sta $52,x			sta 	esInt0+2,x
.33b6	f6 50		inc $50,x			inc 	esInt0,x 					; sets bit 0 of Q - it was shifted left previously.
.33b8	4c be 33	jmp $33be			jmp 	_MInt32Next 					; do the next iteration
.33bb					_MInt32NoSubtract:
.33bb	68		pla				pla
.33bc	68		pla				pla
.33bd	68		pla				pla
.33be					_MInt32Next:
.33be	88		dey				dey 								; do this 32 times.
.33bf	d0 c4		bne $3385			bne 	_MInt32UDLoop
.33c1	68		pla				pla 								; restore Y and exit
.33c2	a8		tay				tay
.33c3	60		rts				rts
.33c4					_MInt32DZero:
.33c4	a2 05		ldx #$05			ldx 	#ErrorID_DivZero
.33c6	20 18 15	jsr $1518		jsr	errorHandler
.33c9					MInt32Modulus:
.33c9	20 70 33	jsr $3370			jsr 	MInt32UDivide 				; do the division.
.33cc	b5 6a		lda $6a,x			lda 	esInt3+2,x 					; copy 2nd on stack (the remainder) to the top.
.33ce	95 68		sta $68,x			sta 	esInt3,x
.33d0	b5 62		lda $62,x			lda 	esInt2+2,x
.33d2	95 60		sta $60,x			sta 	esInt2,x
.33d4	b5 5a		lda $5a,x			lda 	esInt1+2,x
.33d6	95 58		sta $58,x			sta 	esInt1,x
.33d8	b5 52		lda $52,x			lda 	esInt0+2,x
.33da	95 50		sta $50,x			sta 	esInt0,x
.33dc	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32fromstr.asm

.0cdd					fs32Length:
>0cdd							.fill 	1
.33dd					LinkInt32FromString:
.33dd	aa		tax				tax
.33de	98		tya				tya
.33df	20 e4 33	jsr $33e4			jsr 	MInt32FromString
.33e2	8a		txa				txa
.33e3	60		rts				rts
.33e4					MInt32FromString:
.33e4	85 32		sta $32				sta 	tempShort 					; save base
.33e6	98		tya				tya
.33e7	48		pha				pha
.33e8	a0 00		ldy #$00			ldy 	#0 							; get length of string to convert
.33ea	b1 2a		lda ($2a),y			lda 	(temp0),y
.33ec	8d dd 0c	sta $0cdd			sta 	fs32Length
.33ef	f0 65		beq $3456			beq 	_I32FSFail2					; fail if length zero.
.33f1	a0 01		ldy #$01			ldy 	#1 							; set index into string being read
.33f3	b1 2a		lda ($2a),y			lda 	(temp0),y 					; look at first character
.33f5	c9 2d		cmp #$2d			cmp 	#"-"						; is it a - character
.33f7	d0 09		bne $3402			bne 	_I32FSNotNegative
.33f9	ad dd 0c	lda $0cdd			lda 	fs32Length 					; get length back.
.33fc	c9 01		cmp #$01			cmp 	#1 							; if 1 it is just a - on its own so fail.
.33fe	f0 56		beq $3456			beq 	_I32FSFail2
.3400	a0 02		ldy #$02			ldy 	#2 							; first digit of the number.
.3402					_I32FSNotNegative:
.3402	a5 32		lda $32				lda 	tempShort 					; get the base back.
.3404	c0 02		cpy #$02			cpy 	#2 							; if we read a -ve (e.g. Y == 2)
.3406	d0 02		bne $340a			bne 	_I32FSNN2
.3408	09 80		ora #$80			ora 	#$80						; set bit 7, this indicates a negated result.
.340a					_I32FSNN2:
.340a	48		pha				pha 								; save base + final sign on stack.
.340b	20 76 35	jsr $3576			jsr 	MInt32False 				; zero the return value.
.340e					_I32FSMainLoop:
.340e	68		pla				pla 								; get the base back into tempShort
.340f	48		pha				pha
.3410	29 7f		and #$7f			and 	#$7F
.3412	85 32		sta $32				sta 	tempShort
.3414	b1 2a		lda ($2a),y			lda 	(temp0),y 					; look at next character.
.3416	c9 61		cmp #$61			cmp 	#"a" 						; fix up case.
.3418	90 02		bcc $341c			bcc 	_I32FSNotLC
.341a	e9 20		sbc #$20			sbc 	#32
.341c					_I32FSNotLC:
.341c	38		sec				sec 								; subtract 48 (ASCII "0") - ASCII to Hex conversion
.341d	e9 30		sbc #$30			sbc 	#"0"
.341f	90 34		bcc $3455			bcc 	_I32FSFail 					; nothing more to do.
.3421	c9 0a		cmp #$0a			cmp 	#9+1 						; if it is 0-9 validate vs base.
.3423	90 06		bcc $342b			bcc 	_I32FSValidate
.3425	c9 11		cmp #$11			cmp 	#17 						; is it between 58 and 64 ? if so bad.
.3427	90 2c		bcc $3455			bcc 	_I32FSFail
.3429	e9 07		sbc #$07			sbc 	#7 							; adjust into range so now character is 0->nnn
.342b					_I32FSValidate:
.342b	c5 32		cmp $32				cmp 	tempShort 					; compare against the base.
.342d	b0 26		bcs $3455			bcs 	_I32FSFail 					; sorry, too large for this base, so fail.
.342f	48		pha				pha 								; save the new digit value.
.3430	e8		inx				inx 								; put base into next slot up on stack
.3431	a5 32		lda $32				lda 	tempShort
.3433	20 85 35	jsr $3585			jsr 	MInt32Set8Bit
.3436	ca		dex				dex
.3437	20 8e 34	jsr $348e			jsr 	MInt32Multiply 				; multiply current by the base
.343a	e8		inx				inx
.343b	68		pla				pla  								; put additive into next slot
.343c	20 85 35	jsr $3585			jsr 	MInt32Set8Bit
.343f	ca		dex				dex
.3440	20 5a 34	jsr $345a			jsr 	MInt32Add 					; and add it
.3443	c8		iny				iny 								; bump the character pointer
.3444	cc dd 0c	cpy $0cdd			cpy 	fs32Length 					; until > length.
.3447	f0 c5		beq $340e			beq 	_I32FSMainLoop
.3449	90 c3		bcc $340e			bcc 	_I32FSMainLoop
.344b					_I32FSDone:
.344b	68		pla				pla 								; get base/final sign back
.344c	10 03		bpl $3451			bpl 	_I32FSNN3
.344e	20 30 35	jsr $3530			jsr 	MInt32Negate 				; negate the result.
.3451					_I32FSNN3:
.3451	68		pla				pla
.3452	a8		tay				tay
.3453	38		sec				sec
.3454	60		rts				rts
.3455					_I32FSFail:
.3455	68		pla				pla
.3456					_I32FSFail2:
.3456	68		pla				pla
.3457	a8		tay				tay
.3458	18		clc				clc
.3459	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32math.asm

.345a					MInt32Add:
.345a	18		clc				clc
.345b	b5 50		lda $50,x			lda 	esInt0,x
.345d	75 51		adc $51,x			adc 	esInt0+1,x
.345f	95 50		sta $50,x			sta 	esInt0,x
.3461	b5 58		lda $58,x			lda 	esInt1,x
.3463	75 59		adc $59,x			adc 	esInt1+1,x
.3465	95 58		sta $58,x			sta 	esInt1,x
.3467	b5 60		lda $60,x			lda 	esInt2,x
.3469	75 61		adc $61,x			adc 	esInt2+1,x
.346b	95 60		sta $60,x			sta 	esInt2,x
.346d	b5 68		lda $68,x			lda 	esInt3,x
.346f	75 69		adc $69,x			adc 	esInt3+1,x
.3471	95 68		sta $68,x			sta 	esInt3,x
.3473	60		rts				rts
.3474					MInt32Sub:
.3474	38		sec				sec
.3475	b5 50		lda $50,x			lda 	esInt0,x
.3477	f5 51		sbc $51,x			sbc 	esInt0+1,x
.3479	95 50		sta $50,x			sta 	esInt0,x
.347b	b5 58		lda $58,x			lda 	esInt1,x
.347d	f5 59		sbc $59,x			sbc 	esInt1+1,x
.347f	95 58		sta $58,x			sta 	esInt1,x
.3481	b5 60		lda $60,x			lda 	esInt2,x
.3483	f5 61		sbc $61,x			sbc 	esInt2+1,x
.3485	95 60		sta $60,x			sta 	esInt2,x
.3487	b5 68		lda $68,x			lda 	esInt3,x
.3489	f5 69		sbc $69,x			sbc 	esInt3+1,x
.348b	95 68		sta $68,x			sta 	esInt3,x
.348d	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32multiply.asm

.348e					MInt32Multiply:
.348e	e8		inx				inx 								; copy 2nd -> 3rd
.348f	20 b4 34	jsr $34b4			jsr 	MInt32CopyUp
.3492	ca		dex				dex
.3493	20 b4 34	jsr $34b4			jsr 	MInt32CopyUp 				; copy 1st -> 2nd
.3496	20 76 35	jsr $3576			jsr 	MInt32False 				; zero 1st.
.3499					_I32Loop:
.3499	b5 52		lda $52,x			lda 	esInt0+2,x 					; get low bit of 3rd
.349b	29 01		and #$01			and 	#1
.349d	f0 03		beq $34a2			beq 	_I32NoAdd 					; if set
.349f	20 5a 34	jsr $345a			jsr 	MInt32Add 					; add 2nd to 1st.
.34a2					_I32NoAdd:
.34a2	e8		inx				inx 								; shift 2nd left
.34a3	20 8b 35	jsr $358b			jsr 	MInt32ShiftLeft
.34a6	e8		inx				inx  								; shift 3rd right
.34a7	20 94 35	jsr $3594			jsr 	MInt32ShiftRight
.34aa	20 9d 35	jsr $359d			jsr 	MInt32Zero 					; check if zero.
.34ad	08		php				php 								; save status bits
.34ae	ca		dex				dex 	 							; point back to 1st
.34af	ca		dex				dex
.34b0	28		plp				plp 								; get status bits
.34b1	d0 e6		bne $3499			bne 	_I32Loop 					; if non-zero keep going.
.34b3	60		rts				rts
.34b4					MInt32CopyUp:
.34b4	b5 50		lda $50,x			lda 	esInt0,x
.34b6	95 51		sta $51,x			sta 	esInt0+1,x
.34b8	b5 58		lda $58,x			lda 	esInt1,x
.34ba	95 59		sta $59,x			sta 	esInt1+1,x
.34bc	b5 60		lda $60,x			lda 	esInt2,x
.34be	95 61		sta $61,x			sta 	esInt2+1,x
.34c0	b5 68		lda $68,x			lda 	esInt3,x
.34c2	95 69		sta $69,x			sta 	esInt3+1,x
.34c4	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32tostr.asm

>0cde					MCharCount:	.fill 	1						; count of converted characters
.34c5					MLInt32ToString:
.34c5	aa		tax				tax									; module passes stack in A, base in Y
.34c6	98		tya				tya
.34c7	20 cc 34	jsr $34cc			jsr 	MInt32ToString
.34ca	8a		txa				txa
.34cb	60		rts				rts
.34cc					MInt32ToString:
.34cc	48		pha				pha 								; save base
.34cd	85 32		sta $32				sta 	tempShort 					; save target base.
.34cf	a9 00		lda #$00			lda 	#0
.34d1	8d de 0c	sta $0cde			sta 	MCharCount 					; clear character count to 0
.34d4	98		tya				tya
.34d5	48		pha				pha
.34d6	a5 32		lda $32				lda 	tempShort 					; check if we are signed conversion
.34d8	10 10		bpl $34ea			bpl 	_I32TSUnsigned
.34da	48		pha				pha 								; save base on stack.
.34db	b5 68		lda $68,x			lda 	esInt3,x 					; is it actually negative
.34dd	10 08		bpl $34e7			bpl 	_I32TSNoFlip
.34df	a9 2d		lda #$2d			lda 	#"-" 						; write a '-' prefix out.
.34e1	20 1d 35	jsr $351d			jsr 	MI32WriteCharacter
.34e4	20 30 35	jsr $3530			jsr 	MInt32Negate 				; negate the value, so now it's positive.
.34e7					_I32TSNoFlip:
.34e7	68		pla				pla 								; get the base back
.34e8	29 7f		and #$7f			and 	#$7F 						; clear the sign flag so it's just a base now.
.34ea					_I32TSUnsigned:
.34ea	20 f8 34	jsr $34f8			jsr 	MI32DivideWrite 			; recursive code to output string.
.34ed	a0 00		ldy #$00			ldy 	#0 							; write charcount to first character.
.34ef	ad de 0c	lda $0cde			lda 	MCharCount
.34f2	91 2a		sta ($2a),y			sta 	(temp0),y
.34f4	68		pla				pla
.34f5	a8		tay				tay
.34f6	68		pla				pla
.34f7	60		rts				rts
.34f8					MI32DivideWrite:
.34f8	48		pha				pha 								; save the divisor/base
.34f9	e8		inx				inx 								; write in the dividing position.
.34fa	20 85 35	jsr $3585			jsr 	MInt32Set8Bit
.34fd	ca		dex				dex
.34fe	20 70 33	jsr $3370			jsr 	MInt32UDivide 				; divide number by base.
.3501	68		pla				pla 								; get the base into Y
.3502	a8		tay				tay
.3503	b5 52		lda $52,x			lda 	esInt0+2,x 					; get the remainder and push on the stack.
.3505	48		pha				pha
.3506	20 9d 35	jsr $359d			jsr 	MInt32Zero 					; is the result zero ?
.3509	f0 04		beq $350f			beq 	_I32NoRecurse 				; if so, don't recurse.
.350b	98		tya				tya 								; put base into A
.350c	20 f8 34	jsr $34f8			jsr 	MI32DivideWrite 				; and jsr the dividor recursively.
.350f					_I32NoRecurse:
.350f	68		pla				pla 								; get the remainder back
.3510	c9 0a		cmp #$0a			cmp 	#10  						; handle hexadecimals, now converting to ASCII
.3512	90 02		bcc $3516			bcc 	_I32NotHex
.3514	69 06		adc #$06			adc 	#7-1
.3516					_I32NotHex:
.3516	18		clc				clc 								; make it ASCII
.3517	69 30		adc #$30			adc 	#48
.3519	20 1d 35	jsr $351d			jsr 	MI32WriteCharacter 			; write the character out
.351c	60		rts				rts 								; and exit.
.351d					MI32WriteCharacter:
.351d	ee de 0c	inc $0cde			inc 	MCharCount 					; bump count (space for leading count)
.3520	ac de 0c	ldy $0cde			ldy 	MCharCount 					; get position
.3523	91 2a		sta ($2a),y			sta 	(temp0),y 					; write out with trailing 0
.3525	c8		iny				iny
.3526	a9 00		lda #$00			lda 	#0
.3528	91 2a		sta ($2a),y			sta 	(temp0),y
.352a	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32unary.asm

>0cdf					MSeed32:	.fill 	4							; random number seed.
.352b					MInt32Absolute:
.352b	b5 68		lda $68,x			lda 	esInt3,x 					; use negate code if -ve.
.352d	30 01		bmi $3530			bmi 	MInt32Negate
.352f	60		rts				rts
.3530					MInt32Negate:
.3530	38		sec				sec 								; subtract from zero.
.3531	a9 00		lda #$00			lda 	#0
.3533	f5 50		sbc $50,x			sbc 	esInt0,x
.3535	95 50		sta $50,x			sta 	esInt0,x
.3537	a9 00		lda #$00			lda 	#0
.3539	f5 58		sbc $58,x			sbc 	esInt1,x
.353b	95 58		sta $58,x			sta 	esInt1,x
.353d	a9 00		lda #$00			lda 	#0
.353f	f5 60		sbc $60,x			sbc 	esInt2,x
.3541	95 60		sta $60,x			sta 	esInt2,x
.3543	a9 00		lda #$00			lda 	#0
.3545	f5 68		sbc $68,x			sbc 	esInt3,x
.3547	95 68		sta $68,x			sta 	esInt3,x
.3549	60		rts				rts
.354a					MInt32Not:
.354a	b5 50		lda $50,x			lda 	esInt0,x 					; one's complement all four.
.354c	49 ff		eor #$ff			eor 	#$FF
.354e	95 50		sta $50,x			sta 	esInt0,x
.3550	b5 58		lda $58,x			lda 	esInt1,x
.3552	49 ff		eor #$ff			eor 	#$FF
.3554	95 58		sta $58,x			sta 	esInt1,x
.3556	b5 60		lda $60,x			lda 	esInt2,x
.3558	49 ff		eor #$ff			eor 	#$FF
.355a	95 60		sta $60,x			sta 	esInt2,x
.355c	b5 68		lda $68,x			lda 	esInt3,x
.355e	49 ff		eor #$ff			eor 	#$FF
.3560	95 68		sta $68,x			sta 	esInt3,x
.3562	60		rts				rts
.3563					MInt32Sign:
.3563	b5 68		lda $68,x			lda 	esInt3,x					; look at MSB
.3565	30 0b		bmi $3572			bmi 	MInt32True 					; if set return -1 (true)
.3567	20 9d 35	jsr $359d			jsr 	MInt32Zero 					; is it zero ?
.356a	f0 0a		beq $3576			beq 	MInt32False 				; if zero return 0 (false)
.356c	20 76 35	jsr $3576			jsr 	MInt32False 				; > 0 return 1, by setting it to zero
.356f	f6 50		inc $50,x			inc 	esInt0,x  					; and bumping the LSB.
.3571	60		rts				rts
.3572					MInt32True:
.3572	a9 ff		lda #$ff			lda 	#$FF 						; set to $FFFFFFFF
.3574	d0 02		bne $3578			bne 	MInt32WriteAll
.3576					MInt32False:
.3576	a9 00		lda #$00			lda 	#0
.3578					MInt32WriteAll:
.3578	95 50		sta $50,x			sta 	esInt0,x
.357a					MInt32Write123:
.357a	95 58		sta $58,x			sta 	esInt1,x
.357c	95 60		sta $60,x			sta 	esInt2,x
.357e	95 68		sta $68,x			sta 	esInt3,x
.3580	a9 00		lda #$00			lda 	#$00						; and make it an integer
.3582	95 48		sta $48,x			sta 	esType,x
.3584	60		rts				rts
.3585					MInt32Set8Bit:
.3585	95 50		sta $50,x			sta 	esInt0,x 					; coopt above function to write
.3587	a9 00		lda #$00			lda 	#0 							; a value 0-255
.3589	f0 ef		beq $357a			beq		MInt32Write123
.358b					MInt32ShiftLeft:
.358b	16 50		asl $50,x			asl 	esInt0,x
.358d	36 58		rol $58,x			rol	 	esInt1,x
.358f	36 60		rol $60,x			rol	 	esInt2,x
.3591	36 68		rol $68,x			rol	 	esInt3,x
.3593	60		rts				rts
.3594					MInt32ShiftRight:
.3594	56 68		lsr $68,x			lsr 	esInt3,x
.3596	76 60		ror $60,x			ror 	esInt2,x
.3598	76 58		ror $58,x			ror 	esInt1,x
.359a	76 50		ror $50,x			ror 	esInt0,x
.359c	60		rts				rts
.359d					MInt32Zero:
.359d	b5 50		lda $50,x			lda 	esInt0,x
.359f	15 58		ora $58,x			ora 	esInt1,x
.35a1	15 60		ora $60,x			ora 	esInt2,x
.35a3	15 68		ora $68,x			ora 	esInt3,x
.35a5	60		rts				rts
.35a6					MInt32Random:
.35a6	98		tya				tya
.35a7	48		pha				pha
.35a8	a0 07		ldy #$07			ldy 	#7 							; do it 7 times
.35aa	ad df 0c	lda $0cdf			lda 	MSeed32+0 					; check the seed isn't zero
.35ad	d0 03		bne $35b2			bne 	_Random1
.35af	a8		tay				tay 								; if so do it 256 times
.35b0	a9 aa		lda #$aa			lda		#$AA 						; and use this to seed the seed....
.35b2					_Random1:
.35b2	0a		asl a				asl 	a
.35b3	2e e0 0c	rol $0ce0			rol 	MSeed32+1
.35b6	2e e1 0c	rol $0ce1			rol 	MSeed32+2
.35b9	2e e2 0c	rol $0ce2			rol 	MSeed32+3
.35bc	90 02		bcc $35c0			bcc 	_Random2
.35be	49 c5		eor #$c5			eor 	#$C5
.35c0					_Random2:
.35c0	88		dey				dey
.35c1	d0 ef		bne $35b2			bne 	_Random1
.35c3	8d df 0c	sta $0cdf			sta 	MSeed32+0 					; copy the seed in.
.35c6	95 50		sta $50,x			sta 	esInt0,x
.35c8	ad e0 0c	lda $0ce0			lda 	MSeed32+1
.35cb	95 58		sta $58,x			sta 	esInt1,x
.35cd	ad e1 0c	lda $0ce1			lda 	MSeed32+2
.35d0	95 60		sta $60,x			sta 	esInt2,x
.35d2	ad e2 0c	lda $0ce2			lda 	MSeed32+3
.35d5	95 68		sta $68,x			sta 	esInt3,x
.35d7	68		pla				pla
.35d8	a8		tay				tay
.35d9	a9 00		lda #$00			lda 	#0
.35db	95 48		sta $48,x			sta 	esType,x
.35dd	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/utility/check.asm

.35de					CheckToken:
.35de	d1 28		cmp ($28),y			cmp 	(codePtr),y
.35e0	d0 02		bne $35e4			bne 	_CTError
.35e2	c8		iny				iny
.35e3	60		rts				rts
.35e4					_CTError:
.35e4	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.35e6	20 18 15	jsr $1518		jsr	errorHandler
.35e9					CheckRightParen:
.35e9	b1 28		lda ($28),y			lda 	(codePtr),y
.35eb	c8		iny				iny
.35ec	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.35ee	d0 01		bne $35f1			bne 	_CRPError
.35f0	60		rts				rts
.35f1					_CRPError:
.35f1	a2 09		ldx #$09			ldx 	#ErrorID_MissingRP
.35f3	20 18 15	jsr $1518		jsr	errorHandler
.35f6					CheckComma:
.35f6	b1 28		lda ($28),y			lda 	(codePtr),y
.35f8	c8		iny				iny
.35f9	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.35fb	d0 01		bne $35fe			bne 	_CCError
.35fd	60		rts				rts
.35fe					_CCError:
.35fe	a2 0a		ldx #$0a			ldx 	#ErrorID_MissingComma
.3600	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/utility/stack.asm

.0037					rsPointer:
>0037							.fill 	2							; to TOS, which is the current top-token.
.3603					RSReset:
.3603	a9 ff		lda #$ff			lda 	#(returnStack+retStackSize-1) & $FF
.3605	85 37		sta $37				sta 	rsPointer
.3607	a9 09		lda #$09			lda 	#(returnStack+retStackSize-1) >> 8
.3609	85 38		sta $38				sta 	1+(rsPointer)
.360b	a9 ff		lda #$ff			lda 	#$FF 						; put a duff marker on TOS, so nothing will pop
.360d	8d ff 09	sta $09ff			sta 	returnStack+retStackSize-1
.3610	60		rts				rts
.3611					RSClaim:
.3611	84 32		sty $32				sty 	tempShort 					; preserve Y
.3613	48		pha				pha 								; save marker on stack.
.3614	8a		txa				txa 								; get bytes required.
.3615	38		sec				sec
.3616	49 ff		eor #$ff			eor 	#$FF 						; add to rsPointer using 2's complement.
.3618	65 37		adc $37				adc 	rsPointer
.361a	85 37		sta $37				sta 	rsPointer
.361c	a5 38		lda $38				lda 	rsPointer+1
.361e	69 ff		adc #$ff			adc 	#$FF
.3620	85 38		sta $38				sta 	rsPointer+1
.3622	c9 08		cmp #$08			cmp 	#returnStack>>8 			; overflow. underflow actually :)
.3624	90 08		bcc $362e			bcc 	_RSCOverflow
.3626	68		pla				pla 								; get marker back
.3627	a0 00		ldy #$00			ldy 	#0 							; write marker out.
.3629	91 37		sta ($37),y			sta 	(rsPointer),y
.362b	a4 32		ldy $32				ldy 	tempShort 					; restore Y and exit
.362d	60		rts				rts
.362e					_RSCOverflow:
.362e	a2 16		ldx #$16			ldx 	#ErrorID_RetStack
.3630	20 18 15	jsr $1518		jsr	errorHandler
.3633					RSFree:
.3633	18		clc				clc
.3634	65 37		adc $37				adc 	rsPointer
.3636	85 37		sta $37				sta 	rsPointer
.3638	90 02		bcc $363c			bcc 	_RSFExit
.363a	e6 38		inc $38				inc 	rsPointer+1
.363c					_RSFExit:
.363c	60		rts				rts
.363d					RSSavePosition:
.363d	84 32		sty $32				sty 	tempShort 					; save Y position
.363f	a8		tay				tay 								; this is where we write it.
.3640	a5 28		lda $28				lda 	codePtr 					; write codePointer out
.3642	91 37		sta ($37),y			sta 	(rsPointer),y
.3644	c8		iny				iny
.3645	a5 29		lda $29				lda 	codePtr+1
.3647	91 37		sta ($37),y			sta 	(rsPointer),y
.3649	c8		iny				iny
.364a	a5 32		lda $32				lda 	tempShort 					; write the Y position out.
.364c	91 37		sta ($37),y			sta 	(rsPointer),y
.364e	a8		tay				tay 								; fix Y back again to original value
.364f	60		rts				rts
.3650					RSLoadPosition:
.3650	a8		tay				tay
.3651	b1 37		lda ($37),y			lda 	(rsPointer),y 				; read codePointer back
.3653	85 28		sta $28				sta 	codePtr
.3655	c8		iny				iny
.3656	b1 37		lda ($37),y			lda 	(rsPointer),y
.3658	85 29		sta $29				sta 	codePtr+1
.365a	c8		iny				iny
.365b	b1 37		lda ($37),y			lda 	(rsPointer),y 				; and the offset
.365d	a8		tay				tay 								; to Y
.365e	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/utility/warmstart.asm

.365f					WarmStart:
.365f	a2 04		ldx #$04		ldx	#4
.3661	20 ca 1f	jsr $1fca		jsr	interactionHandler

;******  Return to file: main/main.asm

.3664					mainHandler:
.3664	7c 67 36	jmp ($3667,x)			jmp 	(mainVectors,x)
.3667					mainVectors:
>3667	83 36					.word _DummyControlHandler ; index 0
>3669	f6 35					.word CheckComma           ; index 2
>366b	e9 35					.word CheckRightParen      ; index 4
>366d	d2 27					.word XCommandClear        ; index 6
>366f	f9 2e					.word LinkEvaluate         ; index 8
>3671	05 2f					.word LinkEvaluateInteger  ; index 10
>3673	11 2f					.word LinkEvaluateSmallInt ; index 12
>3675	0b 2f					.word LinkEvaluateString   ; index 14
>3677	ff 2e					.word LinkEvaluateTerm     ; index 16
>3679	c5 34					.word MLInt32ToString      ; index 18
>367b	61 29					.word Command_XNew         ; index 20
>367d	6f 29					.word XCommand_Run         ; index 22
>367f	7b 29					.word Command_RunFrom      ; index 24
>3681	dd 33					.word LinkInt32FromString  ; index 26
.3683					_DummyControlHandler:
.3683	60		rts			rts

;******  Return to file: basic.asm

.3684					section_end_main:
.3684					section_start_string:

;******  Processing file: string/string.asm


;******  Processing file: string/functions/chr.asm

.3684					StringChrs:
.3684	aa		tax				tax 								; set up stack
.3685	a9 02		lda #$02			lda 	#2
.3687	20 47 37	jsr $3747			jsr 	AllocateSoftString
.368a	98		tya				tya
.368b	20 6d 37	jsr $376d			jsr 	WriteSoftString
.368e					StringUpdate:
.368e	20 9c 36	jsr $369c			jsr 	ReturnSoftString
.3691	8a		txa				txa
.3692	60		rts				rts
.3693					StringNull:
.3693	aa		tax				tax
.3694	a9 01		lda #$01			lda 	#1
.3696	20 47 37	jsr $3747			jsr 	AllocateSoftString
.3699	4c 8e 36	jmp $368e			jmp 	StringUpdate
.369c					ReturnSoftString:
.369c	a5 39		lda $39				lda 	softMemAlloc 				; copy address
.369e	95 50		sta $50,x			sta 	esInt0,x
.36a0	a5 3a		lda $3a				lda 	softMemAlloc+1
.36a2	95 58		sta $58,x			sta 	esInt1,x
.36a4	a9 00		lda #$00			lda 	#0 							; zero upper bytes
.36a6	95 60		sta $60,x			sta 	esInt2,x
.36a8	95 68		sta $68,x			sta 	esInt3,x
.36aa	a9 40		lda #$40			lda 	#$40 						; type string.
.36ac	95 48		sta $48,x			sta 	esType,x
.36ae	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/functions/compare.asm

.36af					STRCompare:
.36af	48		pha				pha 								; save A
.36b0	aa		tax				tax 								; put stack pos in X
.36b1	98		tya				tya
.36b2	48		pha				pha
.36b3	20 e7 36	jsr $36e7			jsr 	CopyStringPair 				; copy strings to temp0,temp1
.36b6	a0 00		ldy #$00			ldy 	#0 							; get the smaller of the two string sizes.
.36b8	b1 2a		lda ($2a),y			lda 	(temp0),y
.36ba	d1 2c		cmp ($2c),y			cmp 	(temp1),y
.36bc	90 02		bcc $36c0			bcc 	_SCNotSmaller
.36be	b1 2c		lda ($2c),y			lda 	(temp1),y
.36c0					_SCNotSmaller:
.36c0	aa		tax				tax 								; put that in X. We compare this many chars first.
.36c1					_SCCompareLoop:
.36c1	e0 00		cpx #$00			cpx 	#0 							; if compared all the smaller, then it is the shorter
.36c3	f0 0c		beq $36d1			beq 	_SCSameToEndShortest 		; one that is the smallest if they are different lengths.
.36c5	ca		dex				dex 								; decrement chars to compare.
.36c6	c8		iny				iny 								; move to next character
.36c7	38		sec				sec 								; calculate s1[y]-s2[y]
.36c8	b1 2a		lda ($2a),y			lda 	(temp0),y
.36ca	f1 2c		sbc ($2c),y			sbc 	(temp1),y
.36cc	d0 0a		bne $36d8			bne 	_SCReturnResult 			; if different return sign of A
.36ce	4c c1 36	jmp $36c1			jmp 	_SCCompareLoop
.36d1					_SCSameToEndShortest
.36d1	a0 00		ldy #$00			ldy 	#0 							; compare len(s1) - len(s2)
.36d3	38		sec				sec
.36d4	b1 2a		lda ($2a),y			lda 	(temp0),y
.36d6	f1 2c		sbc ($2c),y			sbc 	(temp1),y
.36d8					_SCReturnResult:
.36d8	08		php				php 								; set return to zero preserving PSW.
.36d9	a2 00		ldx #$00			ldx 	#0
.36db	28		plp				plp
.36dc	f0 05		beq $36e3			beq 	_SCExit 					; two values equal, then exit
.36de	ca		dex				dex 								; X = $FF
.36df	90 02		bcc $36e3			bcc 	_SCExit 					; if 1st < 2nd then -1
.36e1	a2 01		ldx #$01			ldx 	#1 							; X = $01 if greater
.36e3					_SCExit:
.36e3	68		pla				pla
.36e4	a8		tay				tay
.36e5	68		pla				pla
.36e6	60		rts				rts
.36e7					CopyStringPair:
.36e7	b5 51		lda $51,x			lda 	esInt0+1,x
.36e9	85 2c		sta $2c				sta 	temp1
.36eb	b5 59		lda $59,x			lda 	esInt1+1,x
.36ed	85 2d		sta $2d				sta 	temp1+1
.36ef					CopyStringTop:
.36ef	b5 50		lda $50,x			lda 	esInt0,x
.36f1	85 2a		sta $2a				sta 	temp0
.36f3	b5 58		lda $58,x			lda 	esInt1,x
.36f5	85 2b		sta $2b				sta 	temp0+1
.36f7	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/functions/concat.asm

.36f8					StringConcat:
.36f8	aa		tax				tax									; stack pos in X
.36f9	98		tya				tya
.36fa	48		pha				pha
.36fb	20 e7 36	jsr $36e7			jsr 	CopyStringPair 				; temp0 and temp1 point to strings to concat.
.36fe	38		sec				sec 								; calculate alloc strings. lengths added + 1 for size.
.36ff	a0 00		ldy #$00			ldy 	#0
.3701	b1 2a		lda ($2a),y			lda 	(temp0),y
.3703	71 2c		adc ($2c),y			adc 	(temp1),y
.3705	b0 1c		bcs $3723			bcs 	_SCError 					; just too many characters here.
.3707	c9 fc		cmp #$fc			cmp 	#MaxStringSize
.3709	b0 18		bcs $3723			bcs 	_SCError
.370b	20 47 37	jsr $3747			jsr 	AllocateSoftString 			; allocate soft string memory, set pointer.
.370e	20 3e 37	jsr $373e			jsr 	CopySoftToStack 			; copy that to the stack.
.3711	20 28 37	jsr $3728			jsr 	SCCopyTemp0 				; copy temp0
.3714	a5 2c		lda $2c				lda 	temp1 						; copy temp1 to temp0
.3716	85 2a		sta $2a				sta 	temp0
.3718	a5 2d		lda $2d				lda 	temp1+1
.371a	85 2b		sta $2b				sta 	temp0+1
.371c	20 28 37	jsr $3728			jsr 	SCCopyTemp0 				; copy temp0 e.g. what was temp1.
.371f	68		pla				pla
.3720	a8		tay				tay
.3721	8a		txa				txa 								; and A
.3722	60		rts				rts
.3723					_SCError:
.3723	a2 0d		ldx #$0d			ldx 	#ErrorID_StrLen
.3725	20 18 15	jsr $1518		jsr	errorHandler
.3728					SCCopyTemp0:
.3728	a0 00		ldy #$00			ldy 	#0 							; put count in temp2
.372a	b1 2a		lda ($2a),y			lda 	(temp0),y
.372c	85 2e		sta $2e				sta 	temp2
.372e					_SCCopyLoop:
.372e	a5 2e		lda $2e				lda 	temp2 						; done the lot
.3730	f0 0b		beq $373d			beq 	_SCCopyExit
.3732	c6 2e		dec $2e				dec 	temp2
.3734	c8		iny				iny 								; get next char
.3735	b1 2a		lda ($2a),y			lda 	(temp0),y
.3737	20 6d 37	jsr $376d			jsr 	WriteSoftString 			; write to soft string.
.373a	4c 2e 37	jmp $372e			jmp 	_SCCopyLoop
.373d					_SCCopyExit:
.373d	60		rts				rts
.373e					CopySoftToStack:
.373e	a5 39		lda $39				lda 	SoftMemAlloc 				; copy the memory allocation pointer to the stack.
.3740	95 50		sta $50,x			sta 	esInt0,x 					; type is already string.
.3742	a5 3a		lda $3a				lda 	SoftMemAlloc+1
.3744	95 58		sta $58,x			sta 	esInt1,x
.3746	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/functions/memory.asm

.0039					softMemAlloc:
>0039							.fill 	2  							; if MSB is zero needs resetting on allocation.
.3747					AllocateSoftString:
.3747	85 32		sta $32				sta 	tempShort 					; save count
.3749	98		tya				tya
.374a	48		pha				pha
.374b	a5 3a		lda $3a				lda 	softMemAlloc+1 				; if the high byte is zero, it needs allocating.
.374d	d0 09		bne $3758			bne 	_ASSDone
.374f	a5 33		lda $33				lda 	highMemory 					; reset the soft memory alloc pointer.
.3751	85 39		sta $39				sta 	softMemAlloc 				; to speed up slightly, we only reset this when we first need it
.3753	a4 34		ldy $34				ldy 	highMemory+1 				; but it needs to be reset before each command.
.3755	88		dey				dey 								; it is set to 1/4k below high memory, allowing space
.3756	84 3a		sty $3a				sty 	softMemAlloc+1 				; for a concreted string.
.3758					_ASSDone:
.3758	38		sec				sec 								; allocate downwards enough memory
.3759	a5 39		lda $39				lda 	softMemAlloc 				; subtract the memory requirements in A from
.375b	e5 32		sbc $32				sbc 	tempShort 					; the soft memory pointer
.375d	85 39		sta $39				sta 	softMemAlloc
.375f	a5 3a		lda $3a				lda 	softMemAlloc+1
.3761	e9 00		sbc #$00			sbc 	#0
.3763	85 3a		sta $3a				sta 	softMemAlloc+1
.3765	a9 00		lda #$00			lda 	#0 							; empty that string, set the length = 0.
.3767	a8		tay				tay
.3768	91 39		sta ($39),y			sta 	(softMemAlloc),y
.376a	68		pla				pla
.376b	a8		tay				tay
.376c	60		rts				rts
.376d					WriteSoftString:
.376d	84 32		sty $32				sty 	tempShort 					; save Y
.376f	48		pha				pha 								; save character on stack
.3770	a0 00		ldy #$00			ldy 	#0 							; get and bump length
.3772	b1 39		lda ($39),y			lda 	(softMemAlloc),y
.3774	18		clc				clc
.3775	69 01		adc #$01			adc 	#1
.3777	91 39		sta ($39),y			sta 	(softMemAlloc),y
.3779	a8		tay				tay 								; offset in Y
.377a	68		pla				pla 								; get char and write.
.377b	91 39		sta ($39),y			sta 	(softMemAlloc),y
.377d	a4 32		ldy $32				ldy 	tempShort 					; restore Y and exit.
.377f	60		rts				rts
.3780					StrClone:
.3780	aa		tax				tax 								; set up stack.
.3781	98		tya				tya
.3782	48		pha				pha
.3783	a0 00		ldy #$00			ldy 	#0 							; get length, add 1 for length
.3785	b1 2a		lda ($2a),y			lda 	(temp0),y 					; this is the bytes required.
.3787	18		clc				clc
.3788	69 01		adc #$01			adc 	#1
.378a	20 47 37	jsr $3747			jsr 	AllocateSoftString 			; allocate soft memory
.378d	a5 39		lda $39				lda 	softMemAlloc 				; copy that address to TOS
.378f	95 50		sta $50,x			sta 	esInt0,x
.3791	a5 3a		lda $3a				lda 	softMemAlloc+1
.3793	95 58		sta $58,x			sta 	esInt1,x
.3795	a9 00		lda #$00			lda 	#0 							; zero upper 2 bytes
.3797	95 60		sta $60,x			sta 	esInt2,x
.3799	95 68		sta $68,x			sta 	esInt3,x
.379b	a9 40		lda #$40			lda 	#$40 						; set type to string.
.379d	95 48		sta $48,x			sta 	esType,x
.379f	20 28 37	jsr $3728			jsr 	SCCopyTemp0 				; copy temp0 string to soft memory copy (concat.asm)
.37a2	68		pla				pla
.37a3	a8		tay				tay
.37a4	8a		txa				txa
.37a5	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/functions/setcase.asm

.37a6					CaseString:
.37a6	48		pha				pha 								; save A and copy to X
.37a7	aa		tax				tax
.37a8	98		tya				tya
.37a9	48		pha				pha
.37aa	20 ef 36	jsr $36ef			jsr 	CopyStringTop 				; target string -> temp0
.37ad	a0 00		ldy #$00			ldy 	#0
.37af	b1 2a		lda ($2a),y			lda 	(temp0),y  					; get length,
.37b1	18		clc				clc
.37b2	69 01		adc #$01			adc 	#1 							; one more for length byte
.37b4	20 47 37	jsr $3747			jsr 	AllocateSoftString 			; allocate soft string memory, set pointer.
.37b7	20 3e 37	jsr $373e			jsr 	CopySoftToStack 			; copy that to the stack.
.37ba	a0 00		ldy #$00			ldy 	#0
.37bc	b1 2a		lda ($2a),y			lda 	(temp0),y 					; count to copy in X
.37be	aa		tax				tax
.37bf					_CSCopy:
.37bf	e0 00		cpx #$00			cpx 	#0 							; finished if 0.
.37c1	f0 24		beq $37e7			beq 	_CSExit
.37c3	ca		dex				dex
.37c4	c8		iny				iny
.37c5	68		pla				pla 								; check direction
.37c6	48		pha				pha
.37c7	f0 0c		beq $37d5			beq 	_CSUpper
.37c9	b1 2a		lda ($2a),y			lda 	(temp0),y 					; lower$() code
.37cb	c9 41		cmp #$41			cmp 	#"A"
.37cd	90 12		bcc $37e1			bcc 	_CSWrite
.37cf	c9 5b		cmp #$5b			cmp 	#"Z"+1
.37d1	b0 0e		bcs $37e1			bcs 	_CSWrite
.37d3	90 0a		bcc $37df			bcc 	_CSFlipWrite
.37d5					_CSUpper:
.37d5	b1 2a		lda ($2a),y			lda 	(temp0),y 					; upper$() code
.37d7	c9 61		cmp #$61			cmp 	#"a"
.37d9	90 06		bcc $37e1			bcc 	_CSWrite
.37db	c9 7b		cmp #$7b			cmp 	#"z"+1
.37dd	b0 02		bcs $37e1			bcs 	_CSWrite
.37df					_CSFlipWrite:
.37df	49 20		eor #$20			eor 	#"A"^"a" 					; switch case.
.37e1					_CSWrite:
.37e1	20 6d 37	jsr $376d			jsr 	WriteSoftString 			; add to soft string.
.37e4	4c bf 37	jmp $37bf			jmp 	_CSCopy
.37e7					_CSExit:
.37e7	68		pla				pla
.37e8	a8		tay				tay
.37e9	68		pla				pla
.37ea	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/functions/substring.asm

.37eb					StringSubstring:
.37eb	48		pha				pha
.37ec	aa		tax				tax 								; access stack.
.37ed	98		tya				tya
.37ee	48		pha				pha
.37ef	20 ef 36	jsr $36ef			jsr 	CopyStringTop 				; point temp0 to the string.
.37f2	a0 00		ldy #$00			ldy 	#0 							; get length.
.37f4	b1 2a		lda ($2a),y			lda 	(temp0),Y
.37f6	85 2c		sta $2c				sta 	temp1
.37f8	b5 51		lda $51,x			lda 	esInt0+1,x 					; get the initial offset
.37fa	c5 2c		cmp $2c				cmp 	temp1 						; return "" if > length.
.37fc	f0 02		beq $3800			beq 	_SSBOkay
.37fe	b0 2a		bcs $382a			bcs 	_SSBReturnNull
.3800					_SSBOkay:
.3800	a5 2c		lda $2c				lda 	temp1 						; get the total length +1
.3802	18		clc				clc
.3803	69 01		adc #$01			adc 	#1
.3805	38		sec				sec
.3806	f5 51		sbc $51,x			sbc 	esInt0+1,x 					; the anything >= this is bad - max size
.3808	d5 52		cmp $52,x			cmp 	esInt0+2,x  				; check bad >= required
.380a	90 02		bcc $380e			bcc		_SSBTrunc
.380c	b5 52		lda $52,x			lda 	esInt0+2,x
.380e					_SSBTrunc:
.380e	85 2d		sta $2d				sta 	temp1+1 					; characters to copy.
.3810	18		clc				clc
.3811	69 01		adc #$01			adc 	#1 							; add 1
.3813	20 47 37	jsr $3747			jsr 	AllocateSoftString 			; allocate soft string memory, set pointer.
.3816	20 3e 37	jsr $373e			jsr 	CopySoftToStack 			; copy that to the stack.
.3819	b4 51		ldy $51,x			ldy 	esInt0+1,x 					; get initial position of char to copy
.381b					_SSBCopyLoop:
.381b	a5 2d		lda $2d				lda 	temp1+1 					; done them all
.381d	f0 0e		beq $382d			beq 	_SSBExit
.381f	c6 2d		dec $2d				dec 	temp1+1
.3821	b1 2a		lda ($2a),y			lda 	(temp0),y 					; get and write character
.3823	20 6d 37	jsr $376d			jsr 	WriteSoftString
.3826	c8		iny				iny
.3827	4c 1b 38	jmp $381b			jmp 	_SSBCopyLoop
.382a					_SSBReturnNull:
.382a	20 31 38	jsr $3831			jsr 	ReturnNull
.382d					_SSBExit:
.382d	68		pla				pla
.382e	a8		tay				tay
.382f	68		pla				pla
.3830	60		rts				rts
.3831					ReturnNull:
.3831	a9 00		lda #$00			lda 	#0 							; clear null string
.3833	8d ce 0a	sta $0ace			sta 	NullString
.3836	a9 ce		lda #$ce			lda 	#NullString & $FF 			; set a pointer to it
.3838	95 50		sta $50,x			sta 	esInt0,x
.383a	a9 0a		lda #$0a			lda 	#NullString >> 8
.383c	95 58		sta $58,x			sta 	esInt1,x
.383e	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/functions/write.asm

.0ce3					srcStrLen:
>0ce3							.fill 	1
.383f					StringWrite:
.383f	aa		tax				tax
.3840	48		pha				pha
.3841	98		tya				tya
.3842	48		pha				pha
.3843	20 6a 38	jsr $386a			jsr 	CheckOverwriteCurrent
.3846	b0 0d		bcs $3855			bcs		_SWCopyCurrent
.3848	20 a8 38	jsr $38a8			jsr 	RequiresConcretion
.384b	90 0e		bcc $385b			bcc 	_SWWriteReference
.384d	20 0b 39	jsr $390b			jsr 	CheckSpecialConcretion
.3850	b0 09		bcs $385b			bcs 	_SWWriteReference
.3852	20 bc 38	jsr $38bc			jsr 	AllocateHardMemory
.3855					_SWCopyCurrent:
.3855	20 ef 38	jsr $38ef			jsr 	CopyStringToHardMemory
.3858	4c 66 38	jmp $3866			jmp 	_SWExit
.385b					_SWWriteReference
.385b	a0 00		ldy #$00			ldy 	#0
.385d	a5 2a		lda $2a				lda 	temp0
.385f	91 2c		sta ($2c),y			sta 	(temp1),y
.3861	c8		iny				iny
.3862	a5 2b		lda $2b				lda 	temp0+1
.3864	91 2c		sta ($2c),y			sta 	(temp1),y
.3866					_SWExit:
.3866	68		pla				pla
.3867	a8		tay				tay
.3868	68		pla				pla
.3869	60		rts				rts
.386a					CheckOverwriteCurrent:
.386a	a0 00		ldy #$00			ldy 	#0 						; get address of string being written to temp0
.386c	b5 59		lda $59,x			lda 	esInt1+1,x
.386e	85 2b		sta $2b				sta 	temp0+1
.3870	b5 51		lda $51,x			lda 	esInt0+1,x
.3872	85 2a		sta $2a				sta 	temp0
.3874	b1 2a		lda ($2a),y			lda 	(temp0),y 				; get length of string being copied and save it.
.3876	8d e3 0c	sta $0ce3			sta 	srcStrLen
.3879	b5 50		lda $50,x			lda 	esInt0,x 				; copy where the final address it being written to temp1.
.387b	85 2c		sta $2c				sta 	temp1 					; e.g. if it is ax$ then temp1 will point to the ax$
.387d	b5 58		lda $58,x			lda 	esInt1,x 				; data record + 5
.387f	85 2d		sta $2d				sta 	temp1+1
.3881	a0 01		ldy #$01			ldy 	#1 						; get the MSB of the address of string currently stored there.
.3883	b1 2c		lda ($2c),y			lda 	(temp1),y
.3885	c5 34		cmp $34				cmp 	highMemory+1 			; if < high memory then it cannot be something stored
.3887	90 1b		bcc $38a4			bcc 	_COCFail 				; in hard memory.
.3889	a0 00		ldy #$00			ldy 	#0 						; copy target address - 1 into temp2
.388b	b1 2c		lda ($2c),y			lda 	(temp1),y 				; when allocating hard memory, the overall size is
.388d	e9 01		sbc #$01			sbc 	#1 						; in the previous byte.
.388f	85 2e		sta $2e				sta 	temp2
.3891	c8		iny				iny
.3892	b1 2c		lda ($2c),y			lda 	(temp1),y
.3894	e9 00		sbc #$00			sbc 	#0
.3896	85 2f		sta $2f				sta 	temp2+1
.3898	a0 00		ldy #$00			ldy 	#0 						; how large is this physical chunk.
.389a	b1 2e		lda ($2e),y			lda 	(temp2),y
.389c	38		sec				sec  							; maximum character capacity.
.389d	e9 02		sbc #$02			sbc 	#2
.389f	cd e3 0c	cmp $0ce3			cmp 	srcStrLen 				; if >= the required length
.38a2	b0 02		bcs $38a6			bcs 	_COCCanReuse
.38a4					_COCFail:
.38a4	18		clc				clc
.38a5	60		rts				rts
.38a6					_COCCanReuse:
.38a6	38		sec				sec
.38a7	60		rts				rts
.38a8					RequiresConcretion:
.38a8	a5 2b		lda $2b				lda 	temp0+1 				; get MSB of address of string to be written
.38aa	c5 34		cmp $34				cmp 	highMemory+1 			; if >= high memory it is concreted
.38ac	b0 0a		bcs $38b8			bcs 	_RCSucceed 				; so it needs concreting again - duplication.
.38ae	a5 3a		lda $3a				lda 	softMemAlloc+1 			; have we allocated any soft memory yet ?
.38b0	f0 08		beq $38ba			beq 	_RCFail 				; if not, this cannot be soft memory.
.38b2	a5 2b		lda $2b				lda 	temp0+1 				; get MSB of address of string to be written
.38b4	c5 3a		cmp $3a				cmp 	softMemAlloc+1 			; if >= soft mem alloc it is either soft
.38b6	90 02		bcc $38ba			bcc 	_RCFail 				; so concreting
.38b8					_RCSucceed:
.38b8	38		sec				sec
.38b9	60		rts				rts
.38ba					_RCFail:
.38ba	18		clc				clc
.38bb	60		rts				rts
.38bc					AllocateHardMemory:
.38bc	98		tya				tya
.38bd	48		pha				pha
.38be	ad e3 0c	lda $0ce3			lda 	srcStrLen 				; characters in string
.38c1	69 0a		adc #$0a			adc 	#1+1+8 					; one for hard memory size, one for string size, extra for expansion
.38c3	b0 04		bcs $38c9			bcs 	_AHMSetMax 				; max out that amount.
.38c5	c9 fe		cmp #$fe			cmp 	#MaxStringSize+2
.38c7	90 02		bcc $38cb			bcc 	_AHMIsOkay
.38c9					_AHMSetMax:
.38c9	a9 fe		lda #$fe			lda 	#MaxStringSize+2
.38cb					_AHMIsOkay:
.38cb	48		pha				pha	 							; save size to be allocated
.38cc	49 ff		eor #$ff			eor 	#$FF 					; complement and add to high Memory
.38ce	38		sec				sec  							; and copy result to TOS as target address.
.38cf	65 33		adc $33				adc 	highMemory
.38d1	85 33		sta $33				sta 	highMemory
.38d3	a5 34		lda $34				lda 	highMemory+1
.38d5	69 ff		adc #$ff			adc 	#$FF
.38d7	85 34		sta $34				sta 	highMemory+1
.38d9	a0 00		ldy #$00			ldy 	#0 						; Y = 0
.38db	68		pla				pla 							; get the total size of the storage block
.38dc	91 33		sta ($33),y			sta 	(highMemory),y 			; and set it
.38de	18		clc				clc
.38df	a5 33		lda $33				lda		highMemory 				; point the target address to the byte after this.
.38e1	69 01		adc #$01			adc 	#1
.38e3	91 2c		sta ($2c),y			sta 	(temp1),y
.38e5	a5 34		lda $34				lda 	highMemory+1
.38e7	69 00		adc #$00			adc 	#0
.38e9	c8		iny				iny
.38ea	91 2c		sta ($2c),y			sta 	(temp1),y
.38ec	68		pla				pla
.38ed	a8		tay				tay
.38ee	60		rts				rts
.38ef					CopyStringToHardMemory:
.38ef	98		tya				tya
.38f0	48		pha				pha
.38f1	a0 00		ldy #$00			ldy 	#0 						; copy target address to temp2
.38f3	b1 2c		lda ($2c),y			lda 	(temp1),y
.38f5	85 2e		sta $2e				sta 	temp2
.38f7	c8		iny				iny
.38f8	b1 2c		lda ($2c),y			lda 	(temp1),y
.38fa	85 2f		sta $2f				sta 	temp2+1
.38fc	ac e3 0c	ldy $0ce3			ldy 	srcStrLen 				; copy this + 1 characters, (length too) hence $FF compare
.38ff					_CSTHMLoop:
.38ff	b1 2a		lda ($2a),y			lda 	(temp0),y
.3901	91 2e		sta ($2e),y			sta 	(temp2),y
.3903	88		dey				dey
.3904	c0 ff		cpy #$ff			cpy 	#$FF 					; this does the +1
.3906	d0 f7		bne $38ff			bne 	_CSTHMLoop
.3908	68		pla				pla
.3909	a8		tay				tay
.390a	60		rts				rts
.390b					CheckSpecialConcretion:
.390b	ad e3 0c	lda $0ce3			lda 	srcStrLen 				; check string is null e.g. length = 0
.390e	f0 02		beq $3912			beq 	_CSCNullString
.3910	18		clc				clc
.3911	60		rts				rts
.3912					_CSCNullString:
.3912	a9 00		lda #$00			lda 	#0 						; by always returning this address we don't waste
.3914	8d ce 0a	sta $0ace			sta 	NullString		 		; storage on null strings.
.3917	a9 ce		lda #$ce			lda 	#(NullString) & $FF
.3919	85 2a		sta $2a				sta 	temp0
.391b	a9 0a		lda #$0a			lda 	#(NullString) >> 8
.391d	85 2b		sta $2b				sta 	1+(temp0)
.391f	38		sec				sec
.3920	60		rts				rts

;******  Return to file: string/string.asm

.3921					stringHandler:
.3921	7c 24 39	jmp ($3924,x)			jmp 	(stringVectors,x)
.3924					stringVectors:
>3924	36 39					.word _DummyControlHandler ; index 0
>3926	84 36					.word StringChrs           ; index 2
>3928	80 37					.word StrClone             ; index 4
>392a	f8 36					.word StringConcat         ; index 6
>392c	93 36					.word StringNull           ; index 8
>392e	af 36					.word STRCompare           ; index 10
>3930	a6 37					.word CaseString           ; index 12
>3932	eb 37					.word StringSubstring      ; index 14
>3934	3f 38					.word StringWrite          ; index 16
.3936					_DummyControlHandler:
.3936	60		rts			rts

;******  Return to file: basic.asm

.3937					section_end_string:
.3937					section_start_tokeniser:

;******  Processing file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/detokenise/detokenise.asm

.0ce4					deTokeniseVector:
>0ce4							.fill 	2
.0ce6					lastCharacterClass:
>0ce6							.fill 	1
.0ce7					indent:
>0ce7							.fill 	1
.3937					ListLine:
.3937	48		pha				pha								; enter here to list to console. sets the output vector
.3938	a9 6f		lda #$6f			lda 	#(deTokenPrint) & $FF
.393a	8d e4 0c	sta $0ce4			sta 	deTokeniseVector
.393d	a9 3a		lda #$3a			lda 	#(deTokenPrint) >> 8
.393f	8d e5 0c	sta $0ce5			sta 	1+(deTokeniseVector)
.3942	68		pla				pla
.3943					Detokenise:
.3943	18		clc				clc 							; space required for line number.
.3944	69 06		adc #$06			adc 	#6
.3946	8d e7 0c	sta $0ce7			sta 	indent
.3949	a9 ff		lda #$ff			lda 	#$FF 					; last thing printed is a dummy value.
.394b	8d e6 0c	sta $0ce6			sta 	lastCharacterClass
.394e	a2 02		ldx #$02			ldx 	#2
.3950	a9 00		lda #$00			lda 	#0 						; clear upper two bytes
.3952	95 60		sta $60,x			sta 	esInt2,x
.3954	95 68		sta $68,x			sta 	esInt3,x
.3956	a0 01		ldy #$01			ldy 	#1 						; copy line number to stack,2 (as using stack 0,1 for list range)
.3958	b1 28		lda ($28),y			lda 	(codePtr),y
.395a	95 50		sta $50,x			sta 	esInt0,x
.395c	c8		iny				iny
.395d	b1 28		lda ($28),y			lda 	(codePtr),y
.395f	95 58		sta $58,x			sta 	esInt1,x
.3961	a9 84		lda #$84			lda 	#LTYLineNumber
.3963	20 4a 3a	jsr $3a4a			jsr 	ListOutputCharacter
.3966	a9 0a		lda #$0a			lda 	#10 					; base 10
.3968	20 0e 3a	jsr $3a0e			jsr 	DTPrintInteger 			; print as integer.
.396b	a0 00		ldy #$00			ldy 	#0 						; get length
.396d	b1 2a		lda ($2a),y			lda 	(temp0),y 				; into X
.396f	aa		tax				tax
.3970					_DTPadOut:
.3970	a9 20		lda #$20			lda 	#" " 					; pad out to indent.
.3972	20 4a 3a	jsr $3a4a			jsr 	ListOutputCharacter
.3975	e8		inx				inx
.3976	ec e7 0c	cpx $0ce7			cpx 	indent
.3979	d0 f5		bne $3970			bne 	_DTPadOut
.397b	a0 03		ldy #$03			ldy 	#3 						; start position.
.397d					_DTListLoop:
.397d	b1 28		lda ($28),y			lda 	(codePtr),y
.397f	c9 85		cmp #$85			cmp 	#TOK_STR 				; Inline string.
.3981	f0 5e		beq $39e1			beq 	_DTIsString
.3983	c9 84		cmp #$84			cmp 	#TOK_FPC 				; Floating point
.3985	f0 56		beq $39dd			beq 	_DTIsFloat
.3987	c9 c5		cmp #$c5			cmp 	#TKW_AMP 				; & hex marker
.3989	f0 16		beq $39a1			beq 	_DTHexConstant
.398b	c9 80		cmp #$80			cmp 	#TOK_EOL 				; End of Line
.398d	d0 06		bne $3995			bne 	_DTNotEnd
.398f	a9 ff		lda #$ff			lda 	#255 					; print CR
.3991	20 4a 3a	jsr $3a4a			jsr 	ListOutputCharacter
.3994	60		rts				rts
.3995					_DTNotEnd:
.3995	c9 00		cmp #$00			cmp 	#0
.3997	30 38		bmi $39d1			bmi 	_DTIsToken
.3999	c9 40		cmp #$40			cmp 	#$40
.399b	90 3a		bcc $39d7			bcc 	_DTIsIdentifier
.399d	a9 0a		lda #$0a			lda 	#10 					; this is the base, unsigned decimal
.399f	d0 0d		bne $39ae			bne 	_DTConstant
.39a1					_DTHexConstant:
.39a1	a9 26		lda #$26			lda 	#"&"
.39a3	20 4a 3a	jsr $3a4a			jsr 	ListOutputCharacter
.39a6	c8		iny				iny
.39a7	a9 01		lda #$01			lda 	#1 						; switch to spaces so &xxxx is treated like a number.
.39a9	20 8b 3a	jsr $3a8b			jsr 	DTSwitchMode
.39ac	a9 10		lda #$10			lda 	#16						; print line unsigned hex
.39ae					_DTConstant:
.39ae	48		pha				pha
.39af	a9 00		lda #$00			lda 	#0 						; now constant, may need spaces
.39b1	20 8b 3a	jsr $3a8b			jsr 	DTSwitchMode
.39b4	a9 86		lda #$86			lda 	#LTYConstant
.39b6	20 4a 3a	jsr $3a4a			jsr 	ListOutputCharacter
.39b9	a2 02		ldx #$02			ldx 	#2 						; get its value
.39bb	8a		txa				txa
.39bc	a2 10		ldx #$10		ldx	#16
.39be	20 64 36	jsr $3664		jsr	mainHandler
.39c1	aa		tax				tax
.39c2	68		pla				pla 							; get base back
.39c3	85 32		sta $32				sta 	tempShort
.39c5	98		tya				tya
.39c6	48		pha				pha
.39c7	a5 32		lda $32				lda 	tempShort 				; print in base A stck level X
.39c9	20 0e 3a	jsr $3a0e			jsr 	DTPrintInteger
.39cc	68		pla				pla
.39cd	a8		tay				tay
.39ce	4c 7d 39	jmp $397d			jmp 	_DTListLoop
.39d1					_DTIsToken:
.39d1	20 e4 3a	jsr $3ae4			jsr 	DTDecodeToken
.39d4	4c 7d 39	jmp $397d			jmp 	_DTListLoop
.39d7					_DTIsIdentifier:
.39d7	20 9d 3a	jsr $3a9d			jsr 	DTIdentifier
.39da	4c 7d 39	jmp $397d			jmp 	_DTListLoop
.39dd					_DTIsFloat:
>39dd	db						.byte 	$DB
.39de	4c dd 39	jmp $39dd			jmp 	_DTIsFloat
.39e1					_DTIsString:
.39e1	a9 01		lda #$01			lda 	#1 							; now punctuation, may need spaces
.39e3	20 8b 3a	jsr $3a8b			jsr 	DTSwitchMode
.39e6	a9 81		lda #$81			lda 	#LTYString
.39e8	20 4a 3a	jsr $3a4a			jsr 	ListOutputCharacter
.39eb	a9 22		lda #$22			lda 	#'"'						; open quote
.39ed	20 4a 3a	jsr $3a4a			jsr 	ListOutputCharacter
.39f0	a2 02		ldx #$02			ldx 	#2 							; evaluate string to TOS2.
.39f2	8a		txa				txa
.39f3	a2 10		ldx #$10		ldx	#16
.39f5	20 64 36	jsr $3664		jsr	mainHandler
.39f8	aa		tax				tax
.39f9	b5 50		lda $50,x			lda 	esInt0,x 					; copy string address to temp0
.39fb	85 2a		sta $2a				sta 	temp0
.39fd	b5 58		lda $58,x			lda 	esInt1,x
.39ff	85 2b		sta $2b				sta 	temp0+1
.3a01	a9 00		lda #$00			lda 	#0 							; don't capitalise.
.3a03	20 20 3a	jsr $3a20			jsr 	DTPrintLengthPrefix
.3a06	a9 22		lda #$22			lda 	#'"'
.3a08	20 4a 3a	jsr $3a4a			jsr 	ListOutputCharacter
.3a0b	4c 7d 39	jmp $397d			jmp 	_DTListLoop

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/detokenise/dtprint.asm

.0ce8					tPrintCount:
>0ce8							.fill 	1
.3a0e					DTPrintInteger:
.3a0e	48		pha				pha									; save base
.3a0f	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.3a11	85 2a		sta $2a				sta 	temp0
.3a13	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.3a15	85 2b		sta $2b				sta 	1+(temp0)
.3a17	68		pla				pla
.3a18	a8		tay				tay
.3a19	8a		txa				txa
.3a1a	a2 12		ldx #$12		ldx	#18
.3a1c	20 64 36	jsr $3664		jsr	mainHandler
.3a1f	aa		tax				tax 								; then drop through here.
.3a20					DTPrintLengthPrefix:
.3a20	aa		tax				tax 								; A = 0 = don't case convert.
.3a21	98		tya				tya
.3a22	48		pha				pha
.3a23	a0 00		ldy #$00			ldy 	#0 							; get string length = chars to print.
.3a25	b1 2a		lda ($2a),y			lda 	(temp0),y
.3a27	8d e8 0c	sta $0ce8			sta 	tPrintCount
.3a2a	f0 1b		beq $3a47			beq 	_DTPLPExit 					; empty string
.3a2c					_DTPLPLoop:
.3a2c	c8		iny				iny 								; get next.
.3a2d	b1 2a		lda ($2a),y			lda 	(temp0),y
.3a2f	29 7f		and #$7f			and 	#$7F
.3a31	e0 00		cpx #$00			cpx 	#0 							; skip if not case converting
.3a33	f0 0a		beq $3a3f			beq 	_DTPLPNoCase
.3a35	c9 41		cmp #$41			cmp 	#"A" 						; if converting UC -> LC
.3a37	90 06		bcc $3a3f			bcc 	_DTPLPNoCase
.3a39	c9 5b		cmp #$5b			cmp 	#"Z"+1
.3a3b	b0 02		bcs $3a3f			bcs 	_DTPLPNoCase
.3a3d	49 20		eor #$20			eor 	#"A"^"a"
.3a3f					_DTPLPNoCase
.3a3f	20 4a 3a	jsr $3a4a			jsr 	ListOutputCharacter 		; call handler
.3a42	ce e8 0c	dec $0ce8			dec 	tPrintCount 				; do all the characters
.3a45	d0 e5		bne $3a2c			bne 	_DTPLPLoop
.3a47					_DTPLPExit:
.3a47	68		pla				pla
.3a48	a8		tay				tay
.3a49	60		rts				rts
.3a4a					ListOutputCharacter:
.3a4a	85 32		sta $32				sta 	tempShort
.3a4c	48		pha				pha
.3a4d	8a		txa				txa
.3a4e	48		pha				pha
.3a4f	98		tya				tya
.3a50	48		pha				pha
.3a51	a5 32		lda $32				lda 	tempShort 					; convert ASCII 6 bit (0-31) to 7 bit.
.3a53	c9 20		cmp #$20			cmp 	#32
.3a55	b0 0c		bcs $3a63			bcs		_LOCHiBit
.3a57	09 40		ora #$40			ora 	#64 						; conversion
.3a59	c9 40		cmp #$40			cmp 	#64							; make l/c
.3a5b	f0 06		beq $3a63			beq 	_LOCHiBit
.3a5d	c9 5b		cmp #$5b			cmp 	#65+26
.3a5f	b0 02		bcs $3a63			bcs 	_LOCHiBit
.3a61	69 20		adc #$20			adc 	#32
.3a63					_LOCHiBit:
.3a63	20 6c 3a	jsr $3a6c			jsr 	_LOCCallVector				; call o/p handler routine
.3a66	68		pla				pla
.3a67	a8		tay				tay
.3a68	68		pla				pla
.3a69	aa		tax				tax
.3a6a	68		pla				pla
.3a6b					_LOCExit:
.3a6b	60		rts				rts
.3a6c					_LOCCallVector:
.3a6c	6c e4 0c	jmp ($0ce4)			jmp 	(deTokeniseVector)
.3a6f					deTokenPrint:
.3a6f	c9 00		cmp #$00			cmp 	#0 							; if bit 7 sets ink colour
.3a71	30 06		bmi $3a79			bmi 	_dtpInk
.3a73	a2 16		ldx #$16		ldx	#22
.3a75	20 f6 14	jsr $14f6		jsr	deviceHandler
.3a78	60		rts				rts
.3a79	c9 ff		cmp #$ff	_dtpInk:cmp 	#255 						; e.g. herhe, get ink and set it
.3a7b	f0 08		beq $3a85			beq 	_dtpCR						; except $FF => CRLF
.3a7d	29 07		and #$07			and 	#7
.3a7f	a2 08		ldx #$08		ldx	#8
.3a81	20 f6 14	jsr $14f6		jsr	deviceHandler
.3a84	60		rts				rts
.3a85					_dtpCR:
.3a85	a2 06		ldx #$06		ldx	#6
.3a87	20 f6 14	jsr $14f6		jsr	deviceHandler
.3a8a	60		rts				rts
.3a8b					DTSwitchMode:
.3a8b	cd e6 0c	cmp $0ce6			cmp 	LastCharacterClass 			; if changed, update character class
.3a8e	f0 04		beq $3a94			beq 	_DTSMNoChange
.3a90	8d e6 0c	sta $0ce6			sta 	LastCharacterClass
.3a93					_DTSMExit:
.3a93	60		rts				rts
.3a94					_DTSMNoChange:
.3a94	c9 01		cmp #$01			cmp 	#1 							; if didn't change to punctuation, two identifiers so we
.3a96	f0 fb		beq $3a93			beq 	_DTSMExit 					; need a space.
.3a98	a9 20		lda #$20			lda 	#" "
.3a9a	4c 4a 3a	jmp $3a4a			jmp 	ListOutputCharacter

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/detokenise/identifier.asm

.3a9d					DTIdentifier:
.3a9d	a9 00		lda #$00			lda 	#0 							; now text, may need spaces
.3a9f	20 8b 3a	jsr $3a8b			jsr 	DTSwitchMode
.3aa2	a9 87		lda #$87			lda 	#LTYIdentifier
.3aa4	20 4a 3a	jsr $3a4a			jsr 	ListOutputCharacter
.3aa7					_DTILoop:
.3aa7	b1 28		lda ($28),y			lda 	(codePtr),y 				; output main bit of identifier.
.3aa9	c9 2d		cmp #$2d			cmp 	#"-"						; make - back to _
.3aab	d0 02		bne $3aaf			bne 	_DTINotUS
.3aad	a9 5f		lda #$5f			lda 	#"_"
.3aaf					_DTINotUS:
.3aaf	20 4a 3a	jsr $3a4a			jsr 	ListOutputCharacter
.3ab2	c8		iny				iny
.3ab3	b1 28		lda ($28),y			lda 	(codePtr),y 				; until end identifier marker.
.3ab5	c9 3a		cmp #$3a			cmp 	#$3A
.3ab7	90 ee		bcc $3aa7			bcc 	_DTILoop
.3ab9	c8		iny				iny
.3aba	c9 3a		cmp #$3a			cmp 	#$3A 						; is it integer non array
.3abc	f0 25		beq $3ae3			beq 	_DTIExit 					; no postfix.
.3abe	48		pha				pha
.3abf	a9 01		lda #$01			lda  	#1 							; it ends in punctuation
.3ac1	8d e6 0c	sta $0ce6			sta 	LastCharacterClass
.3ac4	a9 82		lda #$82			lda 	#LTYPunctuation
.3ac6	20 4a 3a	jsr $3a4a			jsr 	ListOutputCharacter
.3ac9	68		pla				pla
.3aca	c9 3b		cmp #$3b			cmp 	#$3B
.3acc	f0 10		beq $3ade			beq 	_DTIArray
.3ace	4a		lsr a				lsr 	a 							; array flag in C
.3acf	08		php				php
.3ad0	49 1e		eor #$1e			eor 	#$3C/2 						; check if $
.3ad2	f0 02		beq $3ad6			beq 	_DTIDollar
.3ad4	a9 07		lda #$07			lda 	#"$"^"#" 					; this if #, 0 if $
.3ad6					_DTIDollar:
.3ad6	49 24		eor #$24			eor 	#"$"
.3ad8	20 4a 3a	jsr $3a4a			jsr 	ListOutputCharacter
.3adb	28		plp				plp
.3adc	90 05		bcc $3ae3			bcc 	_DTIExit
.3ade					_DTIArray:
.3ade	a9 28		lda #$28			lda 	#"("
.3ae0	20 4a 3a	jsr $3a4a			jsr 	ListOutputCharacter
.3ae3					_DTIExit:
.3ae3	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/detokenise/token.asm

.3ae4					DTDecodeToken:
.3ae4	a2 00		ldx #$00			ldx 	#0 							; table number to use
.3ae6	b1 28		lda ($28),y			lda 	(codePtr),y
.3ae8	c9 84		cmp #$84			cmp 	#$84
.3aea	b0 05		bcs $3af1			bcs 	_DTNotShift
.3aec	29 03		and #$03			and 	#3 							; get the shift 1..3
.3aee	0a		asl a				asl 	a 							; put 2 x in X
.3aef	aa		tax				tax
.3af0	c8		iny				iny
.3af1					_DTNotShift:
.3af1	bd f3 3d	lda $3df3,x			lda 	TokenTableAddress,x 		; get the token table to use to decode it.
.3af4	85 2a		sta $2a				sta 	temp0 						; point into temp0
.3af6	bd f4 3d	lda $3df4,x			lda 	TokenTableAddress+1,x
.3af9	85 2b		sta $2b				sta 	temp0+1
.3afb	b1 28		lda ($28),y			lda 	(codePtr),y 				; get the token value.
.3afd	c8		iny				iny 								; consume it.
.3afe	aa		tax				tax
.3aff	98		tya				tya
.3b00	48		pha				pha
.3b01					_DTFindText:
.3b01	e0 86		cpx #$86			cpx 	#$86 						; finished ?
.3b03	f0 11		beq $3b16			beq 	_DTFoundText
.3b05	ca		dex				dex
.3b06	a0 00		ldy #$00			ldy 	#0 							; add length+1 to temp0
.3b08	38		sec				sec
.3b09	b1 2a		lda ($2a),y			lda 	(temp0),y
.3b0b	65 2a		adc $2a				adc 	temp0
.3b0d	85 2a		sta $2a				sta 	temp0
.3b0f	90 f0		bcc $3b01			bcc 	_DTFindText
.3b11	e6 2b		inc $2b				inc 	temp0+1
.3b13	4c 01 3b	jmp $3b01			jmp 	_DTFindText
.3b16					_DTFoundText:
.3b16	a0 01		ldy #$01			ldy 	#1 							; get first character
.3b18	b1 2a		lda ($2a),y			lda 	(temp0),y
.3b1a	29 7f		and #$7f			and 	#$7F 						; will have bit 7 set.
.3b1c	c9 41		cmp #$41			cmp 	#"A" 						; check for punctuation.
.3b1e	90 11		bcc $3b31			bcc 	_DTIsPunctuation
.3b20	c9 5b		cmp #$5b			cmp 	#"Z"+1
.3b22	b0 0d		bcs $3b31			bcs 	_DTIsPunctuation
.3b24	a9 00		lda #$00			lda 	#0 							; now text, may need spaces
.3b26	20 8b 3a	jsr $3a8b			jsr 	DTSwitchMode
.3b29	a9 83		lda #$83			lda 	#LTYKeyword
.3b2b	20 4a 3a	jsr $3a4a			jsr 	ListOutputCharacter
.3b2e	4c 3b 3b	jmp $3b3b			jmp 	_DTPrint
.3b31					_DTIsPunctuation:
.3b31	a9 01		lda #$01			lda 	#1 							; now punctuation, may need spaces
.3b33	20 8b 3a	jsr $3a8b			jsr 	DTSwitchMode
.3b36	a9 82		lda #$82			lda 	#LTYPunctuation
.3b38	20 4a 3a	jsr $3a4a			jsr 	ListOutputCharacter
.3b3b					_DTPrint:
.3b3b	a9 01		lda #$01			lda 	#1 							; fix case.
.3b3d	20 20 3a	jsr $3a20			jsr 	DTPrintLengthPrefix 		; print it out.
.3b40	a0 00		ldy #$00			ldy 	#0
.3b42	b1 2a		lda ($2a),y			lda 	(temp0),y
.3b44	a8		tay				tay
.3b45	b1 2a		lda ($2a),y			lda 	(temp0),y
.3b47	29 7f		and #$7f			and 	#$7F 						; will have bit 7 set.
.3b49	c9 41		cmp #$41			cmp 	#"A" 						; check for punctuation.
.3b4b	90 04		bcc $3b51			bcc 	_DTIsNowPunctuation
.3b4d	c9 5b		cmp #$5b			cmp 	#"Z"+1
.3b4f	90 05		bcc $3b56			bcc 	_DTPExit
.3b51					_DTIsNowPunctuation:
.3b51	a9 01		lda #$01			lda 	#1
.3b53	8d e6 0c	sta $0ce6			sta		LastCharacterClass
.3b56					_DTPExit:
.3b56	68		pla				pla
.3b57	a8		tay				tay
.3b58	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/search.asm

.0ce9					currentSet:
>0ce9							.fill 	1
.3b59					TokenSearch:
.3b59	8a		txa				txa
.3b5a	48		pha				pha
.3b5b	98		tya				tya
.3b5c	48		pha				pha
.3b5d	a9 00		lda #$00			lda 	#0
.3b5f	8d e9 0c	sta $0ce9			sta 	currentSet
.3b62					_TSLoop:
.3b62	ad e9 0c	lda $0ce9			lda 	currentSet 					; 2 x currentset in X
.3b65	0a		asl a				asl 	a
.3b66	aa		tax				tax
.3b67	bd f3 3d	lda $3df3,x			lda 	TokenTableAddress,x 		; set temp0 to the table address
.3b6a	85 2a		sta $2a				sta 	temp0
.3b6c	bd f4 3d	lda $3df4,x			lda 	TokenTableAddress+1,x
.3b6f	85 2b		sta $2b				sta 	temp0+1
.3b71	20 98 3b	jsr $3b98			jsr 	TokenSearchOne 				; search one table
.3b74	b0 0d		bcs $3b83			bcs 	_TSFound 					; found a token.
.3b76	ee e9 0c	inc $0ce9			inc 	currentSet 					; next set
.3b79	ad e9 0c	lda $0ce9			lda 	currentSet
.3b7c	c9 04		cmp #$04			cmp 	#4
.3b7e	d0 e2		bne $3b62			bne 	_TSLoop 					; back if not done all four.
.3b80	18		clc				clc 								; clear carry and exit
.3b81	90 10		bcc $3b93			bcc 	_TSExit
.3b83					_TSFound:
.3b83	48		pha				pha 								; save token
.3b84	ad e9 0c	lda $0ce9			lda 	currentSet					; if set zero no shift
.3b87	f0 05		beq $3b8e			beq 	_TSNoShift
.3b89	09 80		ora #$80			ora 	#$80 						; Write as $81-$83
.3b8b	20 49 3c	jsr $3c49			jsr 	TokenWrite
.3b8e					_TSNoShift:
.3b8e	68		pla				pla 								; get token back
.3b8f	20 49 3c	jsr $3c49			jsr 	TokenWrite 					; write it
.3b92	38		sec				sec 								; carry set indicating success
.3b93					_TSExit:
.3b93	68		pla				pla
.3b94	a8		tay				tay
.3b95	68		pla				pla
.3b96	aa		tax				tax
.3b97	60		rts				rts
.3b98					TokenSearchOne:
.3b98	a2 86		ldx #$86			ldx 	#$86 						; current token being tested.
.3b9a					_TSOLoop:
.3b9a	a0 00		ldy #$00			ldy 	#0
.3b9c	b1 2a		lda ($2a),y			lda 	(temp0),y 					; get length of token
.3b9e	f0 26		beq $3bc6			beq 	_TSOFail 					; if zero, end of table
.3ba0	cd cf 0a	cmp $0acf			cmp 	convertBuffer 				; length is the same, compare the text matches.
.3ba3	f0 11		beq $3bb6			beq 	_TSOCheckText
.3ba5					_TSONext:
.3ba5	e8		inx				inx 								; bump token
.3ba6	a0 00		ldy #$00			ldy 	#0							; get length
.3ba8	b1 2a		lda ($2a),y			lda 	(temp0),y
.3baa	38		sec				sec
.3bab	65 2a		adc $2a				adc 	temp0 						; add to temp0 + 1
.3bad	85 2a		sta $2a				sta 	temp0
.3baf	90 e9		bcc $3b9a			bcc 	_TSOLoop
.3bb1	e6 2b		inc $2b				inc 	temp0+1
.3bb3	4c 9a 3b	jmp $3b9a			jmp 	_TSOLoop
.3bb6					_TSOCheckText:
.3bb6	a8		tay				tay 								; compare length downto 1.
.3bb7					_TSOCheckLoop:
.3bb7	b1 2a		lda ($2a),y			lda 	(temp0),y 					; use EOR to compare
.3bb9	59 cf 0a	eor $0acf,y			eor 	convertBuffer,y
.3bbc	29 7f		and #$7f			and 	#$7F 						; ignore bit 7
.3bbe	d0 e5		bne $3ba5			bne 	_TSONext 					; different goto next.
.3bc0	88		dey				dey 								; do all
.3bc1	d0 f4		bne $3bb7			bne 	_TSOCheckLoop
.3bc3	8a		txa				txa 								; return token in A and carry set
.3bc4	38		sec				sec
.3bc5	60		rts				rts
.3bc6					_TSOFail:
.3bc6	18		clc				clc
.3bc7	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/test.asm

.3bc8					TokTest:
.3bc8	a2 ff		ldx #$ff				ldx 	#$FF
.3bca	9a		txs					txs
.3bcb	a9 e8		lda #$e8			lda 	#(TokenText1) & $FF
.3bcd	85 28		sta $28				sta 	codePtr
.3bcf	a9 3b		lda #$3b			lda 	#(TokenText1) >> 8
.3bd1	85 29		sta $29				sta 	1+(codePtr)
.3bd3	20 e8 3b	jsr $3be8				jsr 	Tokenise
.3bd6	a2 00		ldx #$00	TokStop:	ldx 	#0 					; compare vs precalculated result
.3bd8	bd e8 3b	lda $3be8,x	_TokCheck:	lda 	TokenBytes1,x
.3bdb	dd ed 0c	cmp $0ced,x				cmp 	tokenBuffer,x
.3bde	d0 fe		bne $3bde	_TokFail:	bne 	_TokFail	 		; error.
.3be0	e8		inx					inx
.3be1	c9 80		cmp #$80				cmp 	#$80
.3be3	d0 f3		bne $3bd8				bne 	_TokCheck
.3be5	4c ff ff	jmp $ffff				jmp 	$FFFF 				; successfully tokenised then quit.

;******  Processing file: tokeniser/tokenise/../../generated/toktest.inc

.3be8					TokenText1:
.3be8					TokenBytes1:

;******  Return to file: tokeniser/tokenise/test.asm


;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokenise.asm

.0cea					tokenHeader:
>0cea							.fill 	3
.0ced					tokenBuffer:
>0ced							.fill 	256
.0ded					tokenBufferIndex:
>0ded							.fill 	1
.3be8					Tokenise:
.3be8	20 62 3c	jsr $3c62			jsr 	TokeniseMakeASCIIZ 			; convert to ASCIIZ string.
.3beb					TokeniseASCIIZ:
.3beb	20 73 3c	jsr $3c73			jsr 	TokeniseFixCase 			; remove controls and lower case outside quotes.
.3bee	a9 00		lda #$00			lda 	#0 							; reset the token buffer index
.3bf0	8d ed 0d	sta $0ded			sta 	tokenBufferIndex
.3bf3	a8		tay				tay 								; start pointer
.3bf4	a9 80		lda #$80			lda 	#$80 						; empty token buffer ($80 ends it)
.3bf6	8d ed 0c	sta $0ced			sta 	tokenBuffer
.3bf9					_TokLoop:
.3bf9	b1 28		lda ($28),y			lda 	(codePtr),y 				; get next character
.3bfb	f0 46		beq $3c43			beq 	_TokExit 					; if zero, then exit.
.3bfd	c8		iny				iny 								; skip over spaces.
.3bfe	c9 20		cmp #$20			cmp 	#" "
.3c00	f0 f7		beq $3bf9			beq 	_TokLoop
.3c02	88		dey				dey 								; point back to character.
.3c03	c9 26		cmp #$26			cmp 	#"&"						; Hexadecimal constant.
.3c05	f0 18		beq $3c1f			beq 	_TokHexConst
.3c07	c9 22		cmp #$22			cmp 	#'"'						; Quoted String
.3c09	f0 23		beq $3c2e			beq 	_TokQString
.3c0b	c9 5b		cmp #$5b			cmp 	#"Z"+1 						; > 'Z' is punctuation
.3c0d	b0 26		bcs $3c35			bcs 	_TokPunctuation
.3c0f	c9 41		cmp #$41			cmp 	#"A" 						; A..Z identifier
.3c11	b0 29		bcs $3c3c			bcs 	_TokIdentifier
.3c13	c9 3a		cmp #$3a			cmp 	#"9"+1
.3c15	b0 1e		bcs $3c35			bcs 	_TokPunctuation 			; between 9 and A exclusive, punctuation
.3c17	c9 30		cmp #$30			cmp 	#"0"
.3c19	90 1a		bcc $3c35			bcc 	_TokPunctuation 			; < 0, punctuation.
.3c1b	a9 0a		lda #$0a			lda 	#10  						; 0..9 constant in base 10.
.3c1d	d0 08		bne $3c27			bne 	_TokConst
.3c1f					_TokHexConst:
.3c1f	c8		iny				iny									; consume token.
.3c20	a9 c5		lda #$c5			lda 	#TKW_AMP 					; Write ampersand token out
.3c22	20 49 3c	jsr $3c49			jsr 	TokenWrite
.3c25	a9 10		lda #$10			lda 	#16
.3c27					_TokConst:
.3c27	20 31 3d	jsr $3d31			jsr 	TokeniseInteger
.3c2a	b0 cd		bcs $3bf9			bcs 	_TokLoop
.3c2c	90 18		bcc $3c46			bcc 	_TokFail
.3c2e					_TokQString:
.3c2e	20 c7 3d	jsr $3dc7			jsr 	TokeniseString
.3c31	b0 c6		bcs $3bf9			bcs 	_TokLoop
.3c33	90 11		bcc $3c46			bcc 	_TokFail
.3c35					_TokPunctuation:
.3c35	20 a6 3d	jsr $3da6			jsr 	TokenisePunctuation
.3c38	b0 bf		bcs $3bf9			bcs 	_TokLoop
.3c3a	90 0a		bcc $3c46			bcc 	_TokFail
.3c3c					_TokIdentifier:
.3c3c	20 a2 3c	jsr $3ca2			jsr 	TokeniseIdentifier
.3c3f	b0 b8		bcs $3bf9			bcs 	_TokLoop
.3c41	90 03		bcc $3c46			bcc 	_TokFail
.3c43					_TokExit:
.3c43	a9 01		lda #$01			lda 	#1
.3c45	60		rts				rts
.3c46					_TokFail:
.3c46	a9 00		lda #$00			lda 	#0
.3c48	60		rts				rts
.3c49					TokenWrite:
.3c49	85 32		sta $32				sta 	tempShort 					; save XA
.3c4b	48		pha				pha
.3c4c	8a		txa				txa
.3c4d	48		pha				pha
.3c4e	a5 32		lda $32				lda 	tempShort
.3c50	ae ed 0d	ldx $0ded			ldx 	tokenBufferIndex 			; geet index
.3c53	9d ed 0c	sta $0ced,x			sta 	tokenBuffer,x 				; write byte to buffer
.3c56	a9 80		lda #$80			lda 	#TOK_EOL 					; pre-emptively write EOL marker after
.3c58	9d ee 0c	sta $0cee,x			sta 	tokenBuffer+1,x
.3c5b	ee ed 0d	inc $0ded			inc 	tokenBufferIndex 			; bump index
.3c5e	68		pla				pla
.3c5f	aa		tax				tax
.3c60	68		pla				pla
.3c61	60		rts				rts
.3c62					TokeniseMakeASCIIZ:
.3c62	a0 00		ldy #$00			ldy 	#0							; get length of string.
.3c64	b1 28		lda ($28),y			lda 	(codePtr),y
.3c66	a8		tay				tay
.3c67	c8		iny				iny 								; +1, the NULL goes here.
.3c68	a9 00		lda #$00			lda 	#0
.3c6a	91 28		sta ($28),y			sta 	(codePtr),y 				; write the trailing NULL.
.3c6c	e6 28		inc $28				inc 	codePtr 					; bump the pointer.
.3c6e	d0 02		bne $3c72			bne 	_TMKAExit
.3c70	e6 29		inc $29				inc 	codePtr+1
.3c72					_TMKAExit:
.3c72	60		rts				rts
.3c73					TokeniseFixCase:
.3c73	a0 00		ldy #$00			ldy 	#0 							; position in buffer.
.3c75	a2 01		ldx #$01			ldx 	#1 							; bit 0 of this is 'in quotes'
.3c77					_TFCFlipQ:
.3c77	8a		txa				txa
.3c78	49 01		eor #$01			eor 	#1
.3c7a	aa		tax				tax
.3c7b					_TFCLoop:
.3c7b	b1 28		lda ($28),y			lda 	(codePtr),y 				; get character
.3c7d	f0 22		beq $3ca1			beq 	_TFCExit 					; if zero exit.
.3c7f	c9 20		cmp #$20			cmp 	#32 						; if control
.3c81	90 1a		bcc $3c9d			bcc 	_TFCControl
.3c83	c8		iny				iny 								; preconsume
.3c84	c9 22		cmp #$22			cmp 	#'"'
.3c86	f0 ef		beq $3c77			beq 	_TFCFlipQ
.3c88	c9 61		cmp #$61			cmp 	#"a"						; check if L/C
.3c8a	90 ef		bcc $3c7b			bcc 	_TFCLoop
.3c8c	c9 7b		cmp #$7b			cmp 	#"z"+1
.3c8e	b0 eb		bcs $3c7b			bcs 	_TFCLoop
.3c90	e0 00		cpx #$00			cpx 	#0 							; in quotes, if so, leave alone.
.3c92	d0 e7		bne $3c7b			bne 	_TFCLoop
.3c94	88		dey				dey
.3c95	49 20		eor #$20			eor 	#"A"^"a"					; make U/C
.3c97					_TFCWrite:
.3c97	91 28		sta ($28),y			sta 	(codePtr),y
.3c99	c8		iny				iny
.3c9a	4c 7b 3c	jmp $3c7b			jmp 	_TFCLoop
.3c9d					_TFCControl:
.3c9d	a9 20		lda #$20			lda 	#" "
.3c9f	d0 f6		bne $3c97			bne 	_TFCWrite
.3ca1					_TFCExit:
.3ca1	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokident.asm

.3ca2					TokeniseIdentifier:
.3ca2	a2 00		ldx #$00			ldx 	#0
.3ca4					_TICopyID:
.3ca4	b1 28		lda ($28),y			lda 	(codePtr),y					; get characters
.3ca6	c9 5f		cmp #$5f			cmp 	#"_" 						; underscore converted to minus internally.
.3ca8	f0 16		beq $3cc0			beq 	_TICopyUnderscore
.3caa	c9 2e		cmp #$2e			cmp 	#"."
.3cac	f0 14		beq $3cc2			beq 	_TICopyIn
.3cae	c9 30		cmp #$30			cmp 	#"0"
.3cb0	90 1b		bcc $3ccd			bcc 	_TIEndCopy
.3cb2	c9 3a		cmp #$3a			cmp 	#"9"+1
.3cb4	90 0c		bcc $3cc2			bcc 	_TICopyIn
.3cb6	c9 41		cmp #$41			cmp 	#"A"
.3cb8	90 13		bcc $3ccd			bcc 	_TIEndCopy
.3cba	c9 5b		cmp #$5b			cmp 	#"Z"+1
.3cbc	b0 0f		bcs $3ccd			bcs		_TIEndCopy
.3cbe	90 02		bcc $3cc2			bcc 	_TICopyIn
.3cc0					_TICopyUnderScore:
.3cc0	a9 2d		lda #$2d			lda 	#"-"						; _ is mapped to -
.3cc2					_TICopyIn:
.3cc2	e8		inx				inx 								; write into buffer in 7 bit ASCII form
.3cc3	9d cf 0a	sta $0acf,x			sta 	convertBuffer,x
.3cc6	8e cf 0a	stx $0acf			stx 	convertBuffer
.3cc9	c8		iny				iny 								; next character
.3cca	4c a4 3c	jmp $3ca4			jmp 	_TICopyID 					; loop round
.3ccd					_TIEndCopy:
.3ccd	a9 24		lda #$24			lda 	#"$"
.3ccf	20 24 3d	jsr $3d24			jsr 	TIDCheckCopy
.3cd2	a9 23		lda #$23			lda 	#"#"
.3cd4	20 24 3d	jsr $3d24			jsr 	TIDCheckCopy
.3cd7	a9 28		lda #$28			lda 	#"("
.3cd9	20 24 3d	jsr $3d24			jsr 	TIDCheckCopy
.3cdc	20 59 3b	jsr $3b59			jsr 	TokenSearch 				; is it a token
.3cdf	b0 41		bcs $3d22			bcs 	_TIExit 					; if so, then exit.
.3ce1	98		tya				tya
.3ce2	48		pha				pha
.3ce3	a0 3a		ldy #$3a			ldy 	#$3A 						; default type.
.3ce5	ae cf 0a	ldx $0acf			ldx 	convertBuffer 				; is last character (
.3ce8	bd cf 0a	lda $0acf,x			lda 	convertBuffer,x
.3ceb	c9 28		cmp #$28			cmp 	#"("
.3ced	d0 02		bne $3cf1			bne 	_TINotArray
.3cef	ca		dex				dex 								; yes, remove it and convert to array.
.3cf0	c8		iny				iny
.3cf1					_TINotArray:
.3cf1	bd cf 0a	lda $0acf,x			lda 	convertBuffer,x 			; check for $
.3cf4	c9 24		cmp #$24			cmp 	#"$"
.3cf6	d0 03		bne $3cfb			bne 	_TINotString
.3cf8	ca		dex				dex
.3cf9	c8		iny				iny
.3cfa	c8		iny				iny
.3cfb					_TINotString:
.3cfb	bd cf 0a	lda $0acf,x			lda 	convertBuffer,x 			; check for #
.3cfe	c9 23		cmp #$23			cmp 	#"#"
.3d00	d0 05		bne $3d07			bne 	_TINotFloat
.3d02	ca		dex				dex
.3d03	c8		iny				iny
.3d04	c8		iny				iny
.3d05	c8		iny				iny
.3d06	c8		iny				iny
.3d07					_TINotFloat:
.3d07	e8		inx				inx 								; write end marker for identifier.
.3d08	98		tya				tya
.3d09	9d cf 0a	sta $0acf,x			sta 	convertBuffer,x
.3d0c	8e cf 0a	stx $0acf			stx 	convertBuffer 				; update length.
.3d0f	a2 01		ldx #$01			ldx 	#1
.3d11					_TIOutput:
.3d11	bd cf 0a	lda $0acf,x			lda 	convertBuffer,x
.3d14	29 3f		and #$3f			and 	#$3F
.3d16	48		pha				pha
.3d17	20 49 3c	jsr $3c49			jsr 	TokenWrite
.3d1a	e8		inx				inx
.3d1b	68		pla				pla
.3d1c	c9 3a		cmp #$3a			cmp 	#$3A
.3d1e	90 f1		bcc $3d11			bcc 	_TIOutput
.3d20	68		pla				pla
.3d21	a8		tay				tay
.3d22					_TIExit:
.3d22	38		sec				sec 								; this can't fail.
.3d23	60		rts				rts
.3d24					TIDCheckCopy:
.3d24	d1 28		cmp ($28),y			cmp 	(codePtr),y
.3d26	d0 08		bne $3d30			bne 	_TIDCCExit
.3d28	e8		inx				inx
.3d29	9d cf 0a	sta $0acf,x			sta 	convertBuffer,x
.3d2c	8e cf 0a	stx $0acf			stx 	convertBuffer
.3d2f	c8		iny				iny
.3d30					_TIDCCExit:
.3d30	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokinteger.asm

.3d31					TokeniseInteger:
.3d31	85 2c		sta $2c				sta 	temp1 						; save base
.3d33	a2 00		ldx #$00			ldx 	#0							; count of chars so far
.3d35	8e cf 0a	stx $0acf			stx 	convertBuffer
.3d38					_TIGetChars:
.3d38	b1 28		lda ($28),y			lda 	(codePtr),y 				; check character is numeric
.3d3a	c9 30		cmp #$30			cmp 	#"0"
.3d3c	90 1f		bcc $3d5d			bcc 	_TIEndGet
.3d3e	c9 3a		cmp #$3a			cmp 	#"9"+1
.3d40	90 10		bcc $3d52			bcc 	_TIHaveChar
.3d42	a5 2c		lda $2c				lda 	temp1 						; fail if not hex mode
.3d44	c9 0a		cmp #$0a			cmp 	#10
.3d46	f0 15		beq $3d5d			beq 	_TIEndGet
.3d48	b1 28		lda ($28),y			lda 	(codePtr),y 				; check legitimate hex.
.3d4a	c9 41		cmp #$41			cmp 	#"A"
.3d4c	90 0f		bcc $3d5d			bcc 	_TIEndGet
.3d4e	c9 5b		cmp #$5b			cmp 	#"Z"+1
.3d50	b0 0b		bcs $3d5d			bcs 	_TIEndGet
.3d52					_TIHaveChar:
.3d52	e8		inx				inx 								; write into buffer.
.3d53	8e cf 0a	stx $0acf			stx 	convertBuffer
.3d56	9d cf 0a	sta $0acf,x			sta 	convertBuffer,x
.3d59	c8		iny				iny 								; next char
.3d5a	4c 38 3d	jmp $3d38			jmp 	_TIGetChars
.3d5d					_TIEndGet:
.3d5d	e0 00		cpx #$00			cpx 	#0 							; no char acquired.
.3d5f	f0 1c		beq $3d7d			beq 	_TIFail
.3d61	98		tya				tya
.3d62	48		pha				pha
.3d63	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.3d65	85 2a		sta $2a				sta 	temp0
.3d67	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.3d69	85 2b		sta $2b				sta 	1+(temp0)
.3d6b	a9 00		lda #$00			lda 	#0 							; stack level 0
.3d6d	a4 2c		ldy $2c				ldy 	temp1 						; base Y
.3d6f	a2 1a		ldx #$1a		ldx	#26
.3d71	20 64 36	jsr $3664		jsr	mainHandler
.3d74	68		pla				pla
.3d75	a8		tay				tay
.3d76	90 05		bcc $3d7d			bcc 	_TIFail 					; didn't convert.
.3d78	20 7f 3d	jsr $3d7f			jsr 	TIRecursiveOut 				; recursive output ?
.3d7b	38		sec				sec
.3d7c	60		rts				rts
.3d7d					_TIFail:
.3d7d	18		clc				clc
.3d7e	60		rts				rts
.3d7f					TIRecursiveOut:
.3d7f	a5 50		lda $50				lda 	esInt0 						; get value to output after possible recursion
.3d81	29 3f		and #$3f			and 	#$3F
.3d83	09 40		ora #$40			ora 	#$40
.3d85	48		pha				pha
.3d86	a5 50		lda $50				lda 	esInt0 						; are we recursing ?
.3d88	29 c0		and #$c0			and 	#$C0
.3d8a	05 58		ora $58				ora 	esInt1
.3d8c	05 60		ora $60				ora 	esInt2
.3d8e	05 68		ora $68				ora 	esInt3
.3d90	f0 10		beq $3da2			beq 	_TIRONoRecursion
.3d92	a2 06		ldx #$06			ldx 	#6 							; shift right x 6
.3d94					_TIROShift:
.3d94	46 68		lsr $68				lsr 	esInt3
.3d96	66 60		ror $60				ror 	esInt2
.3d98	66 58		ror $58				ror 	esInt1
.3d9a	66 50		ror $50				ror 	esInt0
.3d9c	ca		dex				dex
.3d9d	d0 f5		bne $3d94			bne 	_TIROShift
.3d9f	20 7f 3d	jsr $3d7f			jsr 	TIRecursiveOut 				; call recursively
.3da2					_TIRONoRecursion:
.3da2	68		pla				pla 								; pull the old bit.
.3da3	4c 49 3c	jmp $3c49			jmp 	TokenWrite

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokpunct.asm

.3da6					TokenisePunctuation:
.3da6	b1 28		lda ($28),y			lda	 	(codePtr),y 				; copy next 2 chars into convertBuffer
.3da8	8d d0 0a	sta $0ad0			sta 	convertBuffer+1
.3dab	c8		iny				iny
.3dac	b1 28		lda ($28),y			lda 	(codePtr),y
.3dae	8d d1 0a	sta $0ad1			sta 	convertBuffer+2
.3db1	c8		iny				iny 								; Y is +2
.3db2	a9 02		lda #$02			lda 	#2 							; 2 character string.
.3db4	8d cf 0a	sta $0acf			sta 	convertBuffer
.3db7	20 59 3b	jsr $3b59			jsr 	TokenSearch 				; search for that token.
.3dba	b0 0a		bcs $3dc6			bcs 	_TIFound
.3dbc	ce cf 0a	dec $0acf			dec 	convertBuffer 				; make it a 1 character string
.3dbf	88		dey				dey 								; Y is now +1
.3dc0	20 59 3b	jsr $3b59			jsr 	TokenSearch 				; search for that token.
.3dc3	b0 01		bcs $3dc6			bcs 	_TIFound
.3dc5	88		dey				dey 								; Y is now +0, carry clear indicating failure.
.3dc6					_TIFound:
.3dc6	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokstring.asm

.3dc7					TokeniseString:
.3dc7	c8		iny				iny 								; skip opening quote
.3dc8	a2 ff		ldx #$ff			ldx 	#255 						; count length of string.
.3dca	84 2a		sty $2a				sty 	temp0 						; save start.
.3dcc					_TSGetLength:
.3dcc	b1 28		lda ($28),y			lda 	(codePtr),y 				; get next
.3dce	f0 21		beq $3df1			beq 	_TSFail						; end of line, fail
.3dd0	c8		iny				iny
.3dd1	e8		inx				inx
.3dd2	c9 22		cmp #$22			cmp 	#'"' 						; until end quote found.
.3dd4	d0 f6		bne $3dcc			bne 	_TSGetLength
.3dd6	a9 85		lda #$85			lda 	#TOK_STR 					; write string token out
.3dd8	20 49 3c	jsr $3c49			jsr 	TokenWrite
.3ddb	8a		txa				txa 								; output length
.3ddc	20 49 3c	jsr $3c49			jsr 	TokenWrite
.3ddf	a4 2a		ldy $2a				ldy 	temp0 						; get original position
.3de1	e0 00		cpx #$00			cpx 	#0 							; check ended
.3de3	f0 09		beq $3dee			beq 	_TSExit
.3de5					_TSOutput:
.3de5	b1 28		lda ($28),y			lda 	(codePtr),y					; output character
.3de7	20 49 3c	jsr $3c49			jsr 	TokenWrite
.3dea	c8		iny				iny
.3deb	ca		dex				dex
.3dec	d0 f7		bne $3de5			bne 	_TSOutput
.3dee					_TSExit:
.3dee	c8		iny				iny 								; skip ending quote
.3def	38		sec				sec 								; return CS.
.3df0	60		rts				rts
.3df1					_TSFail:
.3df1	18		clc				clc
.3df2	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokentext.asm

.3df3					TokenTableAddress:
>3df3	fb 3d						.word 	Group0Text
>3df5	c4 3f						.word 	Group1Text
>3df7	11 41						.word 	Group2Text
>3df9	38 41						.word 	Group3Text

;******  Processing file: tokeniser/../generated/tokentext0.inc

.3dfb					Group0Text:
>3dfb	03 41 4e c4				.byte $03,$41,$4e,$c4                  ; $86 and
>3dff	02 4f d2				.byte $02,$4f,$d2                      ; $87 or
>3e02	03 58 4f d2				.byte $03,$58,$4f,$d2                  ; $88 xor
>3e06	02 3e bd				.byte $02,$3e,$bd                      ; $89 >=
>3e09	02 3c bd				.byte $02,$3c,$bd                      ; $8a <=
>3e0c	01 be					.byte $01,$be                          ; $8b >
>3e0e	01 bc					.byte $01,$bc                          ; $8c <
>3e10	01 bd					.byte $01,$bd                          ; $8d =
>3e12	02 3c be				.byte $02,$3c,$be                      ; $8e <>
>3e15	01 ab					.byte $01,$ab                          ; $8f +
>3e17	01 ad					.byte $01,$ad                          ; $90 -
>3e19	02 3e be				.byte $02,$3e,$be                      ; $91 >>
>3e1c	02 3c bc				.byte $02,$3c,$bc                      ; $92 <<
>3e1f	01 aa					.byte $01,$aa                          ; $93 *
>3e21	01 af					.byte $01,$af                          ; $94 /
>3e23	03 4d 4f c4				.byte $03,$4d,$4f,$c4                  ; $95 mod
>3e27	01 de					.byte $01,$de                          ; $96 ^
>3e29	01 a1					.byte $01,$a1                          ; $97 !
>3e2b	01 bf					.byte $01,$bf                          ; $98 ?
>3e2d	06 52 45 50 45 41 d4			.byte $06,$52,$45,$50,$45,$41,$d4      ; $99 repeat
>3e34	05 57 48 49 4c c5			.byte $05,$57,$48,$49,$4c,$c5          ; $9a while
>3e3a	03 46 4f d2				.byte $03,$46,$4f,$d2                  ; $9b for
>3e3e	02 49 c6				.byte $02,$49,$c6                      ; $9c if
>3e41	07 44 45 46 50 52 4f c3			.byte $07,$44,$45,$46,$50,$52,$4f,$c3  ; $9d defproc
>3e49	05 55 4e 54 49 cc			.byte $05,$55,$4e,$54,$49,$cc          ; $9e until
>3e4f	04 57 45 4e c4				.byte $04,$57,$45,$4e,$c4              ; $9f wend
>3e54	04 4e 45 58 d4				.byte $04,$4e,$45,$58,$d4              ; $a0 next
>3e59	04 54 48 45 ce				.byte $04,$54,$48,$45,$ce              ; $a1 then
>3e5e	05 45 4e 44 49 c6			.byte $05,$45,$4e,$44,$49,$c6          ; $a2 endif
>3e64	07 45 4e 44 50 52 4f c3			.byte $07,$45,$4e,$44,$50,$52,$4f,$c3  ; $a3 endproc
>3e6c	01 a8					.byte $01,$a8                          ; $a4 (
>3e6e	04 4c 45 4e a8				.byte $04,$4c,$45,$4e,$a8              ; $a5 len(
>3e73	04 53 47 4e a8				.byte $04,$53,$47,$4e,$a8              ; $a6 sgn(
>3e78	04 41 42 53 a8				.byte $04,$41,$42,$53,$a8              ; $a7 abs(
>3e7d	07 52 41 4e 44 4f 4d a8			.byte $07,$52,$41,$4e,$44,$4f,$4d,$a8  ; $a8 random(
>3e85	04 50 41 47 c5				.byte $04,$50,$41,$47,$c5              ; $a9 page
>3e8a	04 54 52 55 c5				.byte $04,$54,$52,$55,$c5              ; $aa true
>3e8f	05 46 41 4c 53 c5			.byte $05,$46,$41,$4c,$53,$c5          ; $ab false
>3e95	04 4d 49 4e a8				.byte $04,$4d,$49,$4e,$a8              ; $ac min(
>3e9a	04 4d 41 58 a8				.byte $04,$4d,$41,$58,$a8              ; $ad max(
>3e9f	04 53 59 53 a8				.byte $04,$53,$59,$53,$a8              ; $ae sys(
>3ea4	06 54 49 4d 45 52 a8			.byte $06,$54,$49,$4d,$45,$52,$a8      ; $af timer(
>3eab	06 45 56 45 4e 54 a8			.byte $06,$45,$56,$45,$4e,$54,$a8      ; $b0 event(
>3eb2	04 47 45 54 a8				.byte $04,$47,$45,$54,$a8              ; $b1 get(
>3eb7	06 49 4e 4b 45 59 a8			.byte $06,$49,$4e,$4b,$45,$59,$a8      ; $b2 inkey(
>3ebe	06 41 4c 4c 4f 43 a8			.byte $06,$41,$4c,$4c,$4f,$43,$a8      ; $b3 alloc(
>3ec5	05 43 48 52 24 a8			.byte $05,$43,$48,$52,$24,$a8          ; $b4 chr$(
>3ecb	06 4c 45 46 54 24 a8			.byte $06,$4c,$45,$46,$54,$24,$a8      ; $b5 left$(
>3ed2	05 4d 49 44 24 a8			.byte $05,$4d,$49,$44,$24,$a8          ; $b6 mid$(
>3ed8	07 52 49 47 48 54 24 a8			.byte $07,$52,$49,$47,$48,$54,$24,$a8  ; $b7 right$(
>3ee0	05 53 54 52 24 a8			.byte $05,$53,$54,$52,$24,$a8          ; $b8 str$(
>3ee6	04 56 41 4c a8				.byte $04,$56,$41,$4c,$a8              ; $b9 val(
>3eeb	05 50 45 45 4b a8			.byte $05,$50,$45,$45,$4b,$a8          ; $ba peek(
>3ef1	05 44 45 45 4b a8			.byte $05,$44,$45,$45,$4b,$a8          ; $bb deek(
>3ef7	05 4c 45 45 4b a8			.byte $05,$4c,$45,$45,$4b,$a8          ; $bc leek(
>3efd	04 41 53 43 a8				.byte $04,$41,$53,$43,$a8              ; $bd asc(
>3f02	04 49 4e 54 a8				.byte $04,$49,$4e,$54,$a8              ; $be int(
>3f07	06 46 4c 4f 41 54 a8			.byte $06,$46,$4c,$4f,$41,$54,$a8      ; $bf float(
>3f0e	06 49 53 56 41 4c a8			.byte $06,$49,$53,$56,$41,$4c,$a8      ; $c0 isval(
>3f15	07 55 50 50 45 52 24 a8			.byte $07,$55,$50,$50,$45,$52,$24,$a8  ; $c1 upper$(
>3f1d	07 4c 4f 57 45 52 24 a8			.byte $07,$4c,$4f,$57,$45,$52,$24,$a8  ; $c2 lower$(
>3f25	01 c0					.byte $01,$c0                          ; $c3 @
>3f27	01 fe					.byte $01,$fe                          ; $c4 ~
>3f29	01 a6					.byte $01,$a6                          ; $c5 &
>3f2b	05 47 45 54 24 a8			.byte $05,$47,$45,$54,$24,$a8          ; $c6 get$(
>3f31	07 49 4e 4b 45 59 24 a8			.byte $07,$49,$4e,$4b,$45,$59,$24,$a8  ; $c7 inkey$(
>3f39	03 4d 45 cd				.byte $03,$4d,$45,$cd                  ; $c8 mem
>3f3d	01 a9					.byte $01,$a9                          ; $c9 )
>3f3f	01 ba					.byte $01,$ba                          ; $ca :
>3f41	01 ac					.byte $01,$ac                          ; $cb ,
>3f43	01 bb					.byte $01,$bb                          ; $cc ;
>3f45	01 a7					.byte $01,$a7                          ; $cd '
>3f47	02 54 cf				.byte $02,$54,$cf                      ; $ce to
>3f4a	04 53 54 45 d0				.byte $04,$53,$54,$45,$d0              ; $cf step
>3f4f	04 50 52 4f c3				.byte $04,$50,$52,$4f,$c3              ; $d0 proc
>3f54	05 4c 4f 43 41 cc			.byte $05,$4c,$4f,$43,$41,$cc          ; $d1 local
>3f5a	03 44 49 cd				.byte $03,$44,$49,$cd                  ; $d2 dim
>3f5e	03 52 45 cd				.byte $03,$52,$45,$cd                  ; $d3 rem
>3f62	03 4c 45 d4				.byte $03,$4c,$45,$d4                  ; $d4 let
>3f66	05 49 4e 50 55 d4			.byte $05,$49,$4e,$50,$55,$d4          ; $d5 input
>3f6c	04 45 4c 53 c5				.byte $04,$45,$4c,$53,$c5              ; $d6 else
>3f71	03 56 44 d5				.byte $03,$56,$44,$d5                  ; $d7 vdu
>3f75	05 50 52 49 4e d4			.byte $05,$50,$52,$49,$4e,$d4          ; $d8 print
>3f7b	04 44 41 54 c1				.byte $04,$44,$41,$54,$c1              ; $d9 data
>3f80	05 49 4d 41 47 c5			.byte $05,$49,$4d,$41,$47,$c5          ; $da image
>3f86	02 41 d4				.byte $02,$41,$d4                      ; $db at
>3f89	04 46 4c 49 d0				.byte $04,$46,$4c,$49,$d0              ; $dc flip
>3f8e	06 41 53 53 45 52 d4			.byte $06,$41,$53,$53,$45,$52,$d4      ; $dd assert
>3f95	04 50 4f 4b c5				.byte $04,$50,$4f,$4b,$c5              ; $de poke
>3f9a	04 44 4f 4b c5				.byte $04,$44,$4f,$4b,$c5              ; $df doke
>3f9f	04 4c 4f 4b c5				.byte $04,$4c,$4f,$4b,$c5              ; $e0 loke
>3fa4	03 49 4e cb				.byte $03,$49,$4e,$cb                  ; $e1 ink
>3fa8	05 50 41 50 45 d2			.byte $05,$50,$41,$50,$45,$d2          ; $e2 paper
>3fae	03 43 4c d3				.byte $03,$43,$4c,$d3                  ; $e3 cls
>3fb2	06 4c 4f 43 41 54 c5			.byte $06,$4c,$4f,$43,$41,$54,$c5      ; $e4 locate
>3fb9	01 ae					.byte $01,$ae                          ; $e5 .
>3fbb	01 a3					.byte $01,$a3                          ; $e6 #
>3fbd	05 43 4c 45 41 d2			.byte $05,$43,$4c,$45,$41,$d2          ; $e7 clear
>3fc3	00					.byte $00

;******  Return to file: tokeniser/tokentext.asm


;******  Processing file: tokeniser/../generated/tokentext1.inc

.3fc4					Group1Text:
>3fc4	04 4c 4f 41 c4				.byte $04,$4c,$4f,$41,$c4              ; $86 load
>3fc9	04 53 41 56 c5				.byte $04,$53,$41,$56,$c5              ; $87 save
>3fce	04 4c 49 53 d4				.byte $04,$4c,$49,$53,$d4              ; $88 list
>3fd3	03 4e 45 d7				.byte $03,$4e,$45,$d7                  ; $89 new
>3fd7	05 42 52 45 41 cb			.byte $05,$42,$52,$45,$41,$cb          ; $8a break
>3fdd	03 52 55 ce				.byte $03,$52,$55,$ce                  ; $8b run
>3fe1	04 52 45 41 c4				.byte $04,$52,$45,$41,$c4              ; $8c read
>3fe6	07 52 45 53 54 4f 52 c5			.byte $07,$52,$45,$53,$54,$4f,$52,$c5  ; $8d restore
>3fee	03 45 4e c4				.byte $03,$45,$4e,$c4                  ; $8e end
>3ff2	04 53 54 4f d0				.byte $04,$53,$54,$4f,$d0              ; $8f stop
>3ff7	04 58 45 4d d5				.byte $04,$58,$45,$4d,$d5              ; $90 xemu
>3ffc	04 47 4f 54 cf				.byte $04,$47,$4f,$54,$cf              ; $91 goto
>4001	05 47 4f 53 55 c2			.byte $05,$47,$4f,$53,$55,$c2          ; $92 gosub
>4007	06 52 45 54 55 52 ce			.byte $06,$52,$45,$54,$55,$52,$ce      ; $93 return
>400e	03 4f 52 c1				.byte $03,$4f,$52,$c1                  ; $94 ora
>4012	05 28 41 4e 44 a9			.byte $05,$28,$41,$4e,$44,$a9          ; $95 (and)
>4018	03 45 4f d2				.byte $03,$45,$4f,$d2                  ; $96 eor
>401c	03 41 44 c3				.byte $03,$41,$44,$c3                  ; $97 adc
>4020	03 53 54 c1				.byte $03,$53,$54,$c1                  ; $98 sta
>4024	03 4c 44 c1				.byte $03,$4c,$44,$c1                  ; $99 lda
>4028	03 43 4d d0				.byte $03,$43,$4d,$d0                  ; $9a cmp
>402c	03 53 42 c3				.byte $03,$53,$42,$c3                  ; $9b sbc
>4030	03 41 53 cc				.byte $03,$41,$53,$cc                  ; $9c asl
>4034	03 52 4f cc				.byte $03,$52,$4f,$cc                  ; $9d rol
>4038	03 4c 53 d2				.byte $03,$4c,$53,$d2                  ; $9e lsr
>403c	03 52 4f d2				.byte $03,$52,$4f,$d2                  ; $9f ror
>4040	03 53 54 d8				.byte $03,$53,$54,$d8                  ; $a0 stx
>4044	03 4c 44 d8				.byte $03,$4c,$44,$d8                  ; $a1 ldx
>4048	03 44 45 c3				.byte $03,$44,$45,$c3                  ; $a2 dec
>404c	03 49 4e c3				.byte $03,$49,$4e,$c3                  ; $a3 inc
>4050	03 53 54 da				.byte $03,$53,$54,$da                  ; $a4 stz
>4054	03 42 49 d4				.byte $03,$42,$49,$d4                  ; $a5 bit
>4058	03 53 54 d9				.byte $03,$53,$54,$d9                  ; $a6 sty
>405c	03 4c 44 d9				.byte $03,$4c,$44,$d9                  ; $a7 ldy
>4060	03 43 50 d9				.byte $03,$43,$50,$d9                  ; $a8 cpy
>4064	03 43 50 d8				.byte $03,$43,$50,$d8                  ; $a9 cpx
>4068	03 54 53 c2				.byte $03,$54,$53,$c2                  ; $aa tsb
>406c	03 54 52 c2				.byte $03,$54,$52,$c2                  ; $ab trb
>4070	03 4a 53 d2				.byte $03,$4a,$53,$d2                  ; $ac jsr
>4074	03 4a 4d d0				.byte $03,$4a,$4d,$d0                  ; $ad jmp
>4078	03 42 50 cc				.byte $03,$42,$50,$cc                  ; $ae bpl
>407c	03 42 4d c9				.byte $03,$42,$4d,$c9                  ; $af bmi
>4080	03 42 56 c3				.byte $03,$42,$56,$c3                  ; $b0 bvc
>4084	03 42 56 d3				.byte $03,$42,$56,$d3                  ; $b1 bvs
>4088	03 42 43 c3				.byte $03,$42,$43,$c3                  ; $b2 bcc
>408c	03 42 43 d3				.byte $03,$42,$43,$d3                  ; $b3 bcs
>4090	03 42 4e c5				.byte $03,$42,$4e,$c5                  ; $b4 bne
>4094	03 42 45 d1				.byte $03,$42,$45,$d1                  ; $b5 beq
>4098	03 42 52 c1				.byte $03,$42,$52,$c1                  ; $b6 bra
>409c	03 42 52 cb				.byte $03,$42,$52,$cb                  ; $b7 brk
>40a0	03 50 48 d0				.byte $03,$50,$48,$d0                  ; $b8 php
>40a4	03 43 4c c3				.byte $03,$43,$4c,$c3                  ; $b9 clc
>40a8	03 50 4c d0				.byte $03,$50,$4c,$d0                  ; $ba plp
>40ac	03 53 45 c3				.byte $03,$53,$45,$c3                  ; $bb sec
>40b0	03 52 54 c9				.byte $03,$52,$54,$c9                  ; $bc rti
>40b4	03 50 48 c1				.byte $03,$50,$48,$c1                  ; $bd pha
>40b8	03 43 4c c9				.byte $03,$43,$4c,$c9                  ; $be cli
>40bc	03 50 48 d9				.byte $03,$50,$48,$d9                  ; $bf phy
>40c0	03 52 54 d3				.byte $03,$52,$54,$d3                  ; $c0 rts
>40c4	03 50 4c c1				.byte $03,$50,$4c,$c1                  ; $c1 pla
>40c8	03 53 45 c9				.byte $03,$53,$45,$c9                  ; $c2 sei
>40cc	03 50 4c d9				.byte $03,$50,$4c,$d9                  ; $c3 ply
>40d0	03 44 45 d9				.byte $03,$44,$45,$d9                  ; $c4 dey
>40d4	03 54 58 c1				.byte $03,$54,$58,$c1                  ; $c5 txa
>40d8	03 54 59 c1				.byte $03,$54,$59,$c1                  ; $c6 tya
>40dc	03 54 58 d3				.byte $03,$54,$58,$d3                  ; $c7 txs
>40e0	03 54 41 d9				.byte $03,$54,$41,$d9                  ; $c8 tay
>40e4	03 54 41 d8				.byte $03,$54,$41,$d8                  ; $c9 tax
>40e8	03 43 4c d6				.byte $03,$43,$4c,$d6                  ; $ca clv
>40ec	03 54 53 d8				.byte $03,$54,$53,$d8                  ; $cb tsx
>40f0	03 49 4e d9				.byte $03,$49,$4e,$d9                  ; $cc iny
>40f4	03 44 45 d8				.byte $03,$44,$45,$d8                  ; $cd dex
>40f8	03 43 4c c4				.byte $03,$43,$4c,$c4                  ; $ce cld
>40fc	03 50 48 d8				.byte $03,$50,$48,$d8                  ; $cf phx
>4100	03 49 4e d8				.byte $03,$49,$4e,$d8                  ; $d0 inx
>4104	03 4e 4f d0				.byte $03,$4e,$4f,$d0                  ; $d1 nop
>4108	03 53 45 c4				.byte $03,$53,$45,$c4                  ; $d2 sed
>410c	03 50 4c d8				.byte $03,$50,$4c,$d8                  ; $d3 plx
>4110	00					.byte $00

;******  Return to file: tokeniser/tokentext.asm


;******  Processing file: tokeniser/../generated/tokentext2.inc

.4111					Group2Text:
>4111	05 56 50 4f 4b c5			.byte $05,$56,$50,$4f,$4b,$c5          ; $86 vpoke
>4117	05 56 44 4f 4b c5			.byte $05,$56,$44,$4f,$4b,$c5          ; $87 vdoke
>411d	05 56 4c 4f 41 c4			.byte $05,$56,$4c,$4f,$41,$c4          ; $88 vload
>4123	04 4d 4f 44 c5				.byte $04,$4d,$4f,$44,$c5              ; $89 mode
>4128	07 50 41 4c 45 54 54 c5			.byte $07,$50,$41,$4c,$45,$54,$54,$c5  ; $8a palette
>4130	06 53 50 52 49 54 c5			.byte $06,$53,$50,$52,$49,$54,$c5      ; $8b sprite
>4137	00					.byte $00

;******  Return to file: tokeniser/tokentext.asm


;******  Processing file: tokeniser/../generated/tokentext3.inc

.4138					Group3Text:
>4138	06 56 50 45 45 4b a8			.byte $06,$56,$50,$45,$45,$4b,$a8      ; $86 vpeek(
>413f	06 56 44 45 45 4b a8			.byte $06,$56,$44,$45,$45,$4b,$a8      ; $87 vdeek(
>4146	09 53 50 52 49 54 45 2e			.byte $09,$53,$50,$52,$49,$54,$45,$2e,$58,$a8 ; $88 sprite.x(
>414e	58 a8
>4150	09 53 50 52 49 54 45 2e			.byte $09,$53,$50,$52,$49,$54,$45,$2e,$59,$a8 ; $89 sprite.y(
>4158	59 a8
>415a	04 48 49 54 a8				.byte $04,$48,$49,$54,$a8              ; $8a hit(
>415f	00					.byte $00

;******  Return to file: tokeniser/tokentext.asm


;******  Return to file: tokeniser/tokeniser.asm

.4160					tokeniserHandler:
.4160	7c 63 41	jmp ($4163,x)			jmp 	(tokeniserVectors,x)
.4163					tokeniserVectors:
>4163	6f 41					.word _DummyControlHandler ; index 0
>4165	43 39					.word Detokenise           ; index 2
>4167	37 39					.word ListLine             ; index 4
>4169	c8 3b					.word TokTest              ; index 6
>416b	e8 3b					.word Tokenise             ; index 8
>416d	eb 3b					.word TokeniseASCIIZ       ; index 10
.416f					_DummyControlHandler:
.416f	60		rts			rts

;******  Return to file: basic.asm

.4170					section_end_tokeniser:
.4170					section_start_variable:

;******  Processing file: variable/variable.asm


;******  Processing file: variable/array/access.asm

.4170					AccessArray:
.4170	8a		txa				txa
.4171	48		pha				pha
.4172	e8		inx				inx
.4173	20 3c 42	jsr $423c			jsr 	GetArrayDimensions 			; get the array dimensions one up from here.
.4176	68		pla				pla
.4177	aa		tax				tax
.4178	b5 50		lda $50,x			lda 	esInt0,x 					; restore address to follow in temp0.
.417a	85 2a		sta $2a				sta 	temp0
.417c	b5 58		lda $58,x			lda 	esInt1,x
.417e	85 2b		sta $2b				sta 	temp0+1
.4180	8a		txa				txa
.4181	48		pha				pha
.4182	98		tya				tya
.4183	48		pha				pha
.4184					_AAFollow:
.4184	a0 00		ldy #$00			ldy 	#0
.4186	b1 2a		lda ($2a),y			lda 	(temp0),y
.4188	48		pha				pha
.4189	c8		iny				iny
.418a	b1 2a		lda ($2a),y			lda 	(temp0),y
.418c	85 2b		sta $2b				sta 	temp0+1
.418e	68		pla				pla
.418f	85 2a		sta $2a				sta 	temp0
.4191	e8		inx				inx 								; advance to next stack slot.
.4192	a0 00		ldy #$00			ldy 	#0
.4194	b1 2a		lda ($2a),y			lda 	(temp0),y 					; compare max index vs required index
.4196	d5 50		cmp $50,x			cmp 	esInt0,x
.4198	c8		iny				iny
.4199	b1 2a		lda ($2a),y			lda 	(temp0),y 					; drop bit 7 of the size, indicates follow.
.419b	85 2c		sta $2c				sta 	temp1 						; save the size in temp1 for later use.
.419d	29 7f		and #$7f			and 	#$7F
.419f	f5 58		sbc $58,x			sbc 	esInt1,x
.41a1	90 50		bcc $41f3			bcc 	_AABadIndex 				; failed on index if max index < required.
.41a3	18		clc				clc
.41a4	a5 2a		lda $2a				lda 	temp0
.41a6	69 02		adc #$02			adc 	#2
.41a8	85 2a		sta $2a				sta 	temp0
.41aa	90 02		bcc $41ae			bcc 	_AANoCarry
.41ac	e6 2b		inc $2b				inc 	temp0+1
.41ae					_AANoCarry:
.41ae	b5 50		lda $50,x			lda 	esInt0,x
.41b0	85 2e		sta $2e				sta 	temp2
.41b2	b5 58		lda $58,x			lda 	esInt1,x
.41b4	85 2f		sta $2f				sta 	temp2+1
.41b6	ac f0 0d	ldy $0df0			ldy 	varType
.41b9	b9 96 42	lda $4296,y			lda 	CAActualSize-$3A,y
.41bc	b4 49		ldy $49,x			ldy 	esType+1,x 					; is it top level
.41be	30 02		bmi $41c2			bmi 	_AANotPointer
.41c0	a9 02		lda #$02			lda 	#2 							; array of pointers is 2.
.41c2					_AANotPointer:
.41c2	20 40 43	jsr $4340			jsr 	MultiplyTemp2ByA 			; multiply the index by the data size, in temp2.
.41c5	18		clc				clc
.41c6	a5 2a		lda $2a				lda 	temp0
.41c8	65 2e		adc $2e				adc 	temp2
.41ca	85 2a		sta $2a				sta 	temp0
.41cc	a5 2b		lda $2b				lda 	temp0+1
.41ce	65 2f		adc $2f				adc 	temp2+1
.41d0	85 2b		sta $2b				sta 	temp0+1
.41d2	b5 49		lda $49,x			lda 	esType+1,x
.41d4	30 07		bmi $41dd			bmi 	_AAUsedAllIndices
.41d6	a5 2c		lda $2c				lda 	temp1 						; check if this is a pointer array e.g. there are subarrays
.41d8	10 14		bpl $41ee			bpl 	_AABadDepth 				; no, too many indexes.
.41da	4c 84 41	jmp $4184			jmp 	_AAFollow 					; otherwise follow them.
.41dd					_AAUsedAllIndices:
.41dd	a5 2c		lda $2c				lda 	temp1 						; get original high length byte.
.41df	30 0d		bmi $41ee			bmi 	_AABadDepth 				; if -ve then this is an array of pointers.
.41e1	68		pla				pla
.41e2	a8		tay				tay
.41e3	68		pla				pla
.41e4	aa		tax				tax
.41e5	a5 2a		lda $2a				lda 	temp0 						; copy address of array element to stack,x
.41e7	95 50		sta $50,x			sta 	esInt0,x
.41e9	a5 2b		lda $2b				lda 	temp0+1
.41eb	95 58		sta $58,x			sta 	esInt1,x
.41ed	60		rts				rts
.41ee					_AABadDepth:
.41ee	a2 1c		ldx #$1c			ldx 	#ErrorID_ArrayDepth
.41f0	20 18 15	jsr $1518		jsr	errorHandler
.41f3					_AABadIndex:
.41f3	a2 1b		ldx #$1b			ldx 	#ErrorID_ArrayIndex
.41f5	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: variable/variable.asm


;******  Processing file: variable/array/create.asm

.0dee					elementSize:
>0dee							.fill	 1
.41f8					CreateArray:
.41f8	20 cf 43	jsr $43cf			jsr 	AccessSetup 				; set up the basic stuff.
.41fb	ad f0 0d	lda $0df0			lda 	varType 					; is the variable type an array
.41fe	4a		lsr a				lsr 	a
.41ff	90 36		bcc $4237			bcc 	CANotArray 					; no, cause an error.
.4201	20 d8 44	jsr $44d8			jsr 	FindVariable 				; does the variable exist already
.4204	b0 2c		bcs $4232			bcs 	CAFound 					; cannot redefine it.
.4206	20 0c 44	jsr $440c			jsr 	CreateVariable 				; create the variable entry.
.4209	a5 2a		lda $2a				lda 	temp0 						; push address of new variable entry on the stack
.420b	48		pha				pha
.420c	a5 2b		lda $2b				lda 	temp0+1
.420e	48		pha				pha
.420f	a2 00		ldx #$00			ldx 	#0
.4211	20 3c 42	jsr $423c			jsr 	GetArrayDimensions 			; get the array dimensions
.4214	a2 00		ldx #$00			ldx 	#0 							; create at level $00
.4216	20 6c 42	jsr $426c			jsr 	CreateArrayLevel 			; level to YA
.4219	aa		tax				tax 								; level now in YX
.421a	68		pla				pla 								; get address back to temp0 to write.
.421b	85 2b		sta $2b				sta 	temp0+1
.421d	68		pla				pla
.421e	85 2a		sta $2a				sta 	temp0
.4220	98		tya				tya 								; write YX there.
.4221	a0 06		ldy #$06			ldy 	#6
.4223	91 2a		sta ($2a),y			sta 	(temp0),y
.4225	88		dey				dey
.4226	8a		txa				txa
.4227	91 2a		sta ($2a),y			sta 	(temp0),y
.4229	ac f1 0d	ldy $0df1			ldy 	varEnd 						; restore Y and exit.
.422c	60		rts				rts
.422d					CASize:
.422d	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.422f	20 18 15	jsr $1518		jsr	errorHandler
.4232					CAFound:
.4232	a2 19		ldx #$19			ldx 	#ErrorID_DupArray
.4234	20 18 15	jsr $1518		jsr	errorHandler
.4237					CANotArray:
.4237	a2 1a		ldx #$1a			ldx 	#ErrorID_NotArray
.4239	20 18 15	jsr $1518		jsr	errorHandler
.423c					GetArrayDimensions:
.423c	ad f0 0d	lda $0df0			lda 	varType 					; push variable type on the stack.
.423f	48		pha				pha
.4240	ac f1 0d	ldy $0df1			ldy 	varEnd
.4243					_CAGetDimensions:
.4243	8a		txa				txa 								; get the next level
.4244	a2 0a		ldx #$0a		ldx	#10
.4246	20 64 36	jsr $3664		jsr	mainHandler
.4249	aa		tax				tax
.424a	b5 58		lda $58,x			lda 	esInt1,x 					; index must be < 8192
.424c	29 e0		and #$e0			and 	#$E0
.424e	15 60		ora $60,x			ora 	esInt2,x
.4250	15 68		ora $68,x			ora 	esInt3,x
.4252	d0 d9		bne $422d			bne 	CASize
.4254	e8		inx				inx 								; next level.
.4255	b1 28		lda ($28),y			lda 	(codePtr),y 				; get/consume following character
.4257	c8		iny				iny
.4258	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; loop back if more dimensions
.425a	f0 e7		beq $4243			beq 	_CAGetDimensions
.425c	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN 				; right bracket ?
.425e	d0 cd		bne $422d			bne 	CASize
.4260	a9 ff		lda #$ff			lda 	#$FF 						; set the type past the end to $FF so we know how many
.4262	95 48		sta $48,x			sta 	esType,x 					; dimensions there are.
.4264	68		pla				pla 								; restore the variable type ($3A-$3F)
.4265	8d f0 0d	sta $0df0			sta 	varType
.4268	8c f1 0d	sty $0df1			sty 	varEnd 						; save exit Y value, after dimensions
.426b	60		rts				rts
.426c					CreateArrayLevel:
.426c	ac f0 0d	ldy $0df0			ldy 	varType
.426f	b9 96 42	lda $4296,y			lda 	CAActualSize-$3A,y
.4272	8d ee 0d	sta $0dee			sta 	elementSize 				; get element size this level.
.4275	b4 49		ldy $49,x			ldy 	esType+1,x 					; is it top level
.4277	30 05		bmi $427e			bmi 	_CANotPointer
.4279	a9 02		lda #$02			lda 	#2 							; array of pointers is 2.
.427b	8d ee 0d	sta $0dee			sta 	elementSize
.427e					_CANotPointer:
.427e	a5 35		lda $35				lda 	lowMemory 					; start creating at temp0, saving start on stack.
.4280	85 2a		sta $2a				sta 	temp0
.4282	48		pha				pha
.4283	a5 36		lda $36				lda 	lowMemory+1
.4285	85 2b		sta $2b				sta 	temp0+1
.4287	48		pha				pha
.4288	20 09 43	jsr $4309			jsr 	AllocateArraySpace 			; allocate space for all array stuff at this level.
.428b	a0 00		ldy #$00			ldy 	#0
.428d	b5 50		lda $50,x			lda 	esInt0,x
.428f	91 2a		sta ($2a),y			sta 	(temp0),y
.4291	c8		iny				iny
.4292	b5 58		lda $58,x			lda 	esInt1,x
.4294	91 2a		sta ($2a),y			sta 	(temp0),y
.4296	b5 49		lda $49,x			lda 	esType+1,x 					; do we have another level ?
.4298	30 06		bmi $42a0			bmi 	_CALNotLast
.429a	b1 2a		lda ($2a),y			lda 	(temp0),y 					; set bit 7, indicates an array of pointers to other levels.
.429c	09 80		ora #$80			ora 	#$80
.429e	91 2a		sta ($2a),y			sta 	(temp0),y
.42a0					_CALNotLast:
.42a0	a9 02		lda #$02			lda 	#2
.42a2	20 c6 42	jsr $42c6			jsr 	_CALAddTemp0
.42a5	b5 50		lda $50,x			lda 	esInt0,x 					; copy stack:01 to stack:23 so we can use it to
.42a7	95 60		sta $60,x			sta 	esInt2,x 					; count.
.42a9	b5 58		lda $58,x			lda 	esInt1,x
.42ab	95 68		sta $68,x			sta 	esInt3,x
.42ad					_CALClear:
.42ad	20 d6 42	jsr $42d6			jsr 	EraseOneElement
.42b0	ad ee 0d	lda $0dee			lda 	elementSize 				; move to next element
.42b3	20 c6 42	jsr $42c6			jsr 	_CALAddTemp0
.42b6	b5 60		lda $60,x			lda 	esInt2,x 					; decrement counter
.42b8	d0 02		bne $42bc			bne 	_CALNoBorrow
.42ba	d6 68		dec $68,x			dec 	esInt3,x
.42bc					_CALNoBorrow:
.42bc	d6 60		dec $60,x			dec 	esInt2,x
.42be	b5 68		lda $68,x			lda 	esInt3,x 					; loop back if >= 0 - we need +1 because indices
.42c0	10 eb		bpl $42ad			bpl 	_CALClear 					; start at 0 e.g. x(10) is actually 11 array entries.
.42c2	68		pla				pla 								; restore the start of this into YA.
.42c3	a8		tay				tay
.42c4	68		pla				pla
.42c5	60		rts				rts
.42c6					_CALAddTemp0:
.42c6	18		clc				clc
.42c7	65 2a		adc $2a				adc 	temp0
.42c9	85 2a		sta $2a				sta 	temp0
.42cb	90 02		bcc $42cf			bcc 	_CALANoCarry
.42cd	e6 2b		inc $2b				inc 	temp0+1
.42cf					_CALANoCarry:
.42cf	60		rts				rts
.42d0					CAActualSize:
>42d0	04 04						.byte 	VarISize,VarISize
>42d2	02 02						.byte 	VarSSize,VarSSize
>42d4	06 06						.byte 	VarFSize,VarFSize
.42d6					EraseOneElement:
.42d6	b5 49		lda $49,x			lda 	esType+1,x 					; is this a list of sub arrays
.42d8	10 09		bpl $42e3			bpl 	_EOESubArray
.42da	a0 00		ldy #$00			ldy 	#0 							; write the empty variable value out.
.42dc	ad f0 0d	lda $0df0			lda 	varType
.42df	20 76 44	jsr $4476			jsr 	ZeroTemp0Y
.42e2	60		rts				rts
.42e3					_EOESubArray:
.42e3	a5 2a		lda $2a				lda 	temp0 						; save temp0, these are effectively locals.
.42e5	48		pha				pha
.42e6	a5 2b		lda $2b				lda 	temp0+1
.42e8	48		pha				pha
.42e9	ad ee 0d	lda $0dee			lda 	elementSize 				; save element size
.42ec	48		pha				pha
.42ed	e8		inx				inx 								; create at next level
.42ee	20 6c 42	jsr $426c			jsr 	CreateArrayLevel
.42f1	ca		dex				dex
.42f2	85 32		sta $32				sta 	tempShort 					; save A
.42f4	68		pla				pla  								; restore element size.
.42f5	8d ee 0d	sta $0dee			sta 	elementSize
.42f8	68		pla				pla 								; restore temp0, which is where this new array level goes.
.42f9	85 2b		sta $2b				sta 	temp0+1
.42fb	68		pla				pla
.42fc	85 2a		sta $2a				sta 	temp0
.42fe	98		tya				tya 								; store Y/A there
.42ff	a0 01		ldy #$01			ldy 	#1
.4301	91 2a		sta ($2a),y			sta 	(temp0),y
.4303	a5 32		lda $32				lda 	tempShort
.4305	88		dey				dey
.4306	91 2a		sta ($2a),y			sta 	(temp0),y
.4308	60		rts				rts
.4309					AllocateArraySpace:
.4309	18		clc				clc 								; element count + 1 => temp2.
.430a	b5 50		lda $50,x			lda 	esInt0,x
.430c	69 01		adc #$01			adc 	#1
.430e	85 2e		sta $2e				sta 	temp2
.4310	b5 58		lda $58,x			lda 	esInt1,x
.4312	69 00		adc #$00			adc 	#0
.4314	85 2f		sta $2f				sta 	temp2+1
.4316	ad ee 0d	lda $0dee			lda 	elementSize 				; bytes per element
.4319	20 40 43	jsr $4340			jsr 	MultiplyTemp2ByA 			; temp2 = (count + 1) x bytes per element.
.431c	18		clc				clc 								; add 2 for 'max element' byte.
.431d	a5 2e		lda $2e				lda 	temp2
.431f	69 02		adc #$02			adc 	#2
.4321	85 2e		sta $2e				sta 	temp2
.4323	90 02		bcc $4327			bcc 	_AASNoCarry
.4325	e6 2f		inc $2f				inc 	temp2+1
.4327					_AASNoCarry:
.4327	18		clc				clc 								; add to low memory, allocating space.
.4328	a5 35		lda $35				lda 	lowMemory
.432a	65 2e		adc $2e				adc 	temp2
.432c	85 35		sta $35				sta 	lowMemory
.432e	a5 36		lda $36				lda 	lowMemory+1
.4330	65 2f		adc $2f				adc 	temp2+1
.4332	85 36		sta $36				sta 	lowMemory+1
.4334	b0 05		bcs $433b			bcs 	_AASFail 					; out of memory as adding causes wrapround
.4336	c5 34		cmp $34				cmp 	highMemory+1 				; >= high memory pointer.
.4338	b0 01		bcs $433b			bcs 	_AASFail
.433a	60		rts				rts
.433b					_AASFail:
.433b	a2 22		ldx #$22			ldx 	#ErrorID_Memory
.433d	20 18 15	jsr $1518		jsr	errorHandler
.4340					MultiplyTemp2ByA:
.4340	48		pha				pha
.4341	a5 2e		lda $2e				lda 	temp2 						; copy temp2 to temp3.
.4343	85 30		sta $30				sta 	temp3
.4345	a5 2f		lda $2f				lda 	temp2+1
.4347	85 31		sta $31				sta 	temp3+1
.4349	68		pla				pla
.434a	06 2e		asl $2e				asl 	temp2 						; double it.
.434c	26 2f		rol $2f				rol 	temp2+1
.434e	c9 02		cmp #$02			cmp 	#2 							; if x 2 then exit.
.4350	f0 15		beq $4367			beq 	_MTBAExit
.4352	c9 06		cmp #$06			cmp 	#6 							; if x 6 then add temp3 to temp2
.4354	d0 0d		bne $4363			bne 	_MTBANotFloat
.4356	18		clc				clc 								; so this will make it x 3
.4357	a5 2e		lda $2e				lda 	temp2
.4359	65 30		adc $30				adc 	temp3
.435b	85 2e		sta $2e				sta 	temp2
.435d	a5 2f		lda $2f				lda 	temp2+1
.435f	65 31		adc $31				adc 	temp3+1
.4361	85 2f		sta $2f				sta 	temp2+1
.4363					_MTBANotFloat:
.4363	06 2e		asl $2e				asl 	temp2 						; double it.
.4365	26 2f		rol $2f				rol 	temp2+1
.4367					_MTBAExit:
.4367	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/variable/access.asm

.0def					varHash:
>0def							.fill	1
.0df0					varType:
>0df0							.fill 	1
.0df1					varEnd:
>0df1							.fill 	1
.003b					hashList:
>003b							.fill 	2
.4368					AccessVariable:
.4368	aa		tax				tax 								; stack in X
.4369	c8		iny				iny									; look at second character
.436a	b1 28		lda ($28),y			lda 	(codePtr),y
.436c	88		dey				dey
.436d	c9 3a		cmp #$3a			cmp 	#TYPE_INT 					; is it the integer marker ($3A)
.436f	d0 15		bne $4386			bne 	_AVLong 					; no, always use the hash tables.
.4371	b1 28		lda ($28),y			lda 	(codePtr),y 				; this is the 6 bit ASCII of A-Z 1-26
.4373	38		sec				sec 	 							; make it 0-25
.4374	e9 01		sbc #$01			sbc 	#1
.4376	0a		asl a				asl 	a 							; x 4 as 4 bytes / variable.
.4377	0a		asl a				asl 	a
.4378	95 50		sta $50,x			sta 	esInt0,x
.437a	a9 0a		lda #$0a			lda 	#SingleLetterVar >> 8 		; make it an address
.437c	95 58		sta $58,x			sta 	esInt1,x
.437e	a9 80		lda #$80			lda 	#$80 						; type is an integer reference.
.4380	95 48		sta $48,x			sta 	esType,x
.4382	c8		iny				iny 								; skip over the variable reference in the code.
.4383	c8		iny				iny  								; (1 letter, 1 type)
.4384	8a		txa				txa 								; stack in A to return.
.4385	60		rts				rts
.4386					_AVLong:
.4386	8a		txa				txa
.4387	48		pha				pha
.4388	20 cf 43	jsr $43cf			jsr 	AccessSetup 				; set up the basic information we need for later
.438b	20 d8 44	jsr $44d8			jsr 	FindVariable 				; does the variable exist already ?
.438e	b0 0e		bcs $439e			bcs 	_AVFound 					; yes, then its found
.4390	ad f0 0d	lda $0df0			lda 	varType 					; otherwise, is the variable type an array
.4393	4a		lsr a				lsr 	a
.4394	90 05		bcc $439b			bcc 	_AVCanCreate 				; if not, we can autocreate
.4396	a2 15		ldx #$15			ldx 	#ErrorID_noauto
.4398	20 18 15	jsr $1518		jsr	errorHandler
.439b					_AVCanCreate:
.439b	20 0c 44	jsr $440c			jsr 	CreateVariable 				; variable does not exist, create it.
.439e					_AVFound:
.439e	68		pla				pla
.439f	aa		tax				tax
.43a0	18		clc				clc 								; copy temp0 (variable record address)
.43a1	a5 2a		lda $2a				lda 	temp0 						; +5 (to point to the data)
.43a3	69 05		adc #$05			adc 	#5 							; (first 5 bytes are link, name, hash)
.43a5	95 50		sta $50,x			sta 	esInt0,x
.43a7	a5 2b		lda $2b				lda 	temp0+1
.43a9	69 00		adc #$00			adc 	#0
.43ab	95 58		sta $58,x			sta 	esInt1,x
.43ad	a9 00		lda #$00			lda 	#0
.43af	95 60		sta $60,x			sta 	esInt2,x
.43b1	95 68		sta $68,x			sta 	esInt3,x
.43b3	ac f0 0d	ldy $0df0			ldy 	varType 					; get the type ID from the type.
.43b6	b9 8f 43	lda $438f,y			lda 	_AVTypeTable-$3A,y 			; e.g. a reference to int/float/string.
.43b9	95 48		sta $48,x			sta 	esType,x
.43bb	ac f1 0d	ldy $0df1			ldy 	varEnd 						; restore Y
.43be	ad f0 0d	lda $0df0			lda 	VarType 					; get variable type, put LSB into C
.43c1	4a		lsr a				lsr 	a
.43c2	90 03		bcc $43c7			bcc 	_AVNotArray 				; if carry set,it is an array variable.
.43c4	20 70 41	jsr $4170			jsr 	AccessArray 				; array lookup. if LSB was set.
.43c7					_AVNotArray:
.43c7	8a		txa				txa 								; return stack in A and return
.43c8	60		rts				rts
.43c9					_AVTypeTable:
>43c9	80 80						.byte 	$80,$80						; integer
>43cb	c0 c0						.byte 	$C0,$C0 					; string
>43cd	81 81						.byte 	$81,$81 					; float
.43cf					AccessSetup:
.43cf	a9 00		lda #$00			lda 	#0 							; zero the hash byte.
.43d1	8d ef 0d	sta $0def			sta 	varHash
.43d4	98		tya				tya
.43d5	48		pha				pha
.43d6	b1 28		lda ($28),y	_ASLoop:lda 	(codePtr),y					; get next identifier character
.43d8	c9 3a		cmp #$3a			cmp 	#$3A 						; is it 3A-3F which end all identifiers ?
.43da	b0 0b		bcs $43e7			bcs 	_ASComplete
.43dc	18		clc				clc 								; add to the hash. Might improve this.
.43dd	6d ef 0d	adc $0def			adc 	varHash
.43e0	8d ef 0d	sta $0def			sta 	varHash
.43e3	c8		iny				iny 								; next character
.43e4	4c d6 43	jmp $43d6			jmp 	_ASLoop
.43e7					_ASComplete:
.43e7	8d f0 0d	sta $0df0			sta 	varType 					; save variable type byte
.43ea	c8		iny				iny
.43eb	8c f1 0d	sty $0df1			sty 	varEnd 						; save the ending position.
.43ee	38		sec				sec 								; convert type byte from $3A-$3F to 0..5
.43ef	e9 3a		sbc #$3a			sbc 	#$3A
.43f1	0a		asl a				asl 	a 							; multiply by hashTableSize (8 in this case)
.43f2	0a		asl a				asl 	a
.43f3	0a		asl a				asl 	a
.43f4	0a		asl a				asl 	a 							; 2 bytes/word
.43f5	85 2a		sta $2a				sta 	temp0 						; this is the offset to the start of the table.
.43f7	ad ef 0d	lda $0def			lda 	varHash 					; get hash
.43fa	29 07		and #$07			and 	#(hashTableSize-1)			; force into range (for 8,0..7)
.43fc	0a		asl a				asl  	a 							; x 2 (for word) and clear carry
.43fd	65 2a		adc $2a				adc 	temp0 						; now offset from the start of the hash table.
.43ff	69 68		adc #$68			adc 	#hashTables & $FF 			; add to hash table base address
.4401	85 3b		sta $3b				sta 	hashList 					; making hashLists point to the head of the link list.
.4403	a9 0a		lda #$0a			lda 	#hashTables >> 8
.4405	69 00		adc #$00			adc 	#0
.4407	85 3c		sta $3c				sta 	hashList+1
.4409	68		pla				pla
.440a	a8		tay				tay
.440b	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/variable/create.asm

.440c					CreateVariable:
.440c	98		tya				tya 								; push Y on the stack twice.
.440d	48		pha				pha									; position in code of the new variable.
.440e	48		pha				pha
.440f	ae f0 0d	ldx $0df0			ldx 	varType 					; get var type 0-5 from the var type
.4412	bd 36 44	lda $4436,x			lda		_CVSize-$3A,x 				; the bytes required for this new variable.
.4415	48		pha				pha 								; save length
.4416	a5 35		lda $35				lda 	lowMemory 					; set low Memory ptr to temp0
.4418	85 2a		sta $2a				sta 	temp0 						; (address of the new variable)
.441a	a5 36		lda $36				lda 	lowMemory+1
.441c	85 2b		sta $2b				sta 	temp0+1
.441e	68		pla				pla 								; get length
.441f	18		clc				clc 								; add to low memory.
.4420	65 35		adc $35				adc 	lowMemory
.4422	85 35		sta $35				sta 	lowMemory
.4424	90 08		bcc $442e			bcc 	_CVNoCarry
.4426	e6 36		inc $36				inc 	lowMemory+1
.4428	a5 36		lda $36				lda 	lowMemory+1 				; check out of memory.
.442a	c5 34		cmp $34				cmp 	highMemory+1
.442c	b0 3d		bcs $446b			bcs 	_CVMemory
.442e					_CVNoCarry:
.442e	ad ef 0d	lda $0def			lda 	varHash 					; store hash at offset 4.
.4431	a0 04		ldy #$04			ldy 	#4
.4433	91 2a		sta ($2a),y			sta 	(temp0),y
.4435	68		pla				pla 								; offset, work out where the variable name is.
.4436	18		clc				clc
.4437	65 28		adc $28				adc 	codePtr
.4439	a0 02		ldy #$02			ldy 	#2 							; copy that into slots 2 + 3.
.443b	91 2a		sta ($2a),y			sta 	(temp0),y
.443d	a5 29		lda $29				lda 	codePtr+1
.443f	69 00		adc #$00			adc 	#0
.4441	c8		iny				iny
.4442	91 2a		sta ($2a),y			sta 	(temp0),y
.4444	cd c9 0a	cmp $0ac9			cmp 	basePage+1 					; compare against the program base.
.4447	b0 03		bcs $444c			bcs 	_CVNotImmediate
.4449	20 ae 44	jsr $44ae			jsr 	CloneVariableName 			; we need to clone the variable name (immediate mode)
.444c					_CVNotImmediate:
.444c	a0 00		ldy #$00			ldy 	#0 							; copy current hash pointer in link
.444e	b1 3b		lda ($3b),y			lda 	(hashList),y 				; so we're inserting it in the front of a linked list
.4450	91 2a		sta ($2a),y			sta 	(temp0),y
.4452	c8		iny				iny
.4453	b1 3b		lda ($3b),y			lda 	(hashList),y
.4455	91 2a		sta ($2a),y			sta 	(temp0),y
.4457	a5 2b		lda $2b				lda 	temp0+1 					; set new link
.4459	91 3b		sta ($3b),y			sta 	(hashList),y
.445b	88		dey				dey
.445c	a5 2a		lda $2a				lda 	temp0
.445e	91 3b		sta ($3b),y			sta 	(hashList),y
.4460	ad f0 0d	lda $0df0			lda 	varType 					; type in A
.4463	a0 05		ldy #$05			ldy 	#5 							; offset in Y
.4465	20 76 44	jsr $4476			jsr 	ZeroTemp0Y 					; zero (temp0),y with whatever type.
.4468	68		pla				pla
.4469	a8		tay				tay
.446a	60		rts				rts
.446b					_CVMemory:
.446b	a2 22		ldx #$22			ldx 	#ErrorID_Memory
.446d	20 18 15	jsr $1518		jsr	errorHandler
>4470	09 07				_CVSize:.byte 	VarHSize+VarISize,VarHSize+VarASize 					; <storage for integer>
>4472	07 07						.byte 	VarHSize+VarSSize,VarHSize+VarASize 					; <storage for string>
>4474	0b 07						.byte 	VarHSize+VarFSize,VarHSize+VarASize 					; <storage for float>
.4476					ZeroTemp0Y:
.4476	4a		lsr a				lsr 	a 							; bit 0 in carry
.4477	0a		asl a				asl 	a
.4478	b0 19		bcs $4493			bcs 	_ZTExit 					; we don't initialise arrays.
.447a	c9 3c		cmp #$3c			cmp 	#$3C 						; check string
.447c	f0 16		beq $4494			beq 	_ZTWriteNullString 			; write "" string
.447e	c9 3e		cmp #$3e			cmp 	#$3E 						; check float
.4480	f0 22		beq $44a4			beq 	_ZTWriteFloat
.4482	98		tya				tya
.4483	48		pha				pha
.4484	a9 00		lda #$00			lda 	#0
.4486	91 2a		sta ($2a),y			sta 	(temp0),y
.4488	c8		iny				iny
.4489	91 2a		sta ($2a),y			sta 	(temp0),y
.448b	c8		iny				iny
.448c	91 2a		sta ($2a),y			sta 	(temp0),y
.448e	c8		iny				iny
.448f	91 2a		sta ($2a),y			sta 	(temp0),y
.4491	68		pla				pla
.4492	a8		tay				tay
.4493					_ZTExit:
.4493	60		rts				rts
.4494					_ZTWriteNullString:
.4494	a9 00		lda #$00			lda 	#0 							; put a reference to null string as the default value.
.4496	8d ce 0a	sta $0ace			sta 	NullString
.4499	a9 ce		lda #$ce			lda 	#NullString & $FF
.449b	91 2a		sta ($2a),y			sta 	(temp0),y
.449d	a9 0a		lda #$0a			lda 	#NullString >> 8
.449f	c8		iny				iny
.44a0	91 2a		sta ($2a),y			sta 	(temp0),y
.44a2	88		dey				dey
.44a3	60		rts				rts
.44a4					_ZTWriteFloat:
.44a4	8a		txa				txa
.44a5	48		pha				pha
.44a6	a2 20		ldx #$20		ldx	#32
.44a8	20 de 1d	jsr $1dde		jsr	floatingpointHandler
.44ab	68		pla				pla
.44ac	aa		tax				tax
.44ad	60		rts				rts
.44ae					CloneVariableName:
.44ae	a0 02		ldy #$02			ldy 	#2 							; copy vname address to temp2
.44b0	b1 2a		lda ($2a),y			lda 	(temp0),y
.44b2	85 2e		sta $2e				sta 	temp2
.44b4	c8		iny				iny
.44b5	b1 2a		lda ($2a),y			lda 	(temp0),y
.44b7	85 2f		sta $2f				sta 	temp2+1
.44b9	a5 36		lda $36				lda 	lowMemory+1 				; copy lowMemory address to (temp0),2/3
.44bb	91 2a		sta ($2a),y			sta 	(temp0),y
.44bd	88		dey				dey
.44be	a5 35		lda $35				lda 	lowMemory
.44c0	91 2a		sta ($2a),y			sta 	(temp0),y
.44c2	a0 00		ldy #$00			ldy 	#0 							; copy data from (temp2) to (lowMemory)
.44c4					_CVNCopy:
.44c4	b1 2e		lda ($2e),y			lda		(temp2),y
.44c6	91 35		sta ($35),y			sta 	(lowMemory),y
.44c8	c8		iny				iny
.44c9	c9 3a		cmp #$3a			cmp 	#$3A 						; until the whole name has been copied.
.44cb	90 f7		bcc $44c4			bcc 	_CVNCopy
.44cd	98		tya				tya 								; add Y to low memory
.44ce	18		clc				clc
.44cf	65 35		adc $35				adc 	lowMemory
.44d1	85 35		sta $35				sta 	lowMemory
.44d3	90 02		bcc $44d7			bcc 	_CVNNoCarry
.44d5	e6 36		inc $36				inc 	lowMemory+1
.44d7					_CVNNoCarry:
.44d7	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/variable/find.asm

.44d8					FindVariable:
.44d8	98		tya				tya
.44d9	48		pha				pha
.44da	98		tya				tya 								; point temp2 to the actual name
.44db	18		clc				clc 								; in memory of the variable being created
.44dc	65 28		adc $28				adc 	codePtr
.44de	85 2e		sta $2e				sta 	temp2
.44e0	a5 29		lda $29				lda 	codePtr+1
.44e2	69 00		adc #$00			adc 	#0
.44e4	85 2f		sta $2f				sta 	temp2+1
.44e6	a0 00		ldy #$00			ldy 	#0
.44e8	a5 3b		lda $3b				lda 	hashList 					; copy hashlist to temp0
.44ea	85 2a		sta $2a				sta 	temp0
.44ec	a5 3c		lda $3c				lda 	hashList+1
.44ee	85 2b		sta $2b				sta 	temp0+1
.44f0	a0 01		ldy #$01	_FVNext:ldy 	#1 							; get MSB
.44f2	b1 2a		lda ($2a),y			lda 	(temp0),y
.44f4	f0 2c		beq $4522			beq 	_FVFail
.44f6	aa		tax				tax
.44f7	88		dey				dey		 							; get LSB
.44f8	b1 2a		lda ($2a),y			lda 	(temp0),y
.44fa	85 2a		sta $2a				sta 	temp0 						; update pointer.
.44fc	86 2b		stx $2b				stx 	temp0+1
.44fe	a0 04		ldy #$04			ldy 	#4 							; check hashes match
.4500	b1 2a		lda ($2a),y			lda 	(temp0),y
.4502	cd ef 0d	cmp $0def			cmp 	varHash
.4505	d0 e9		bne $44f0			bne 	_FVNext 					; if not, no point in checking the name.
.4507	88		dey				dey 								; copy name pointer (+2,+3) to temp1.
.4508	b1 2a		lda ($2a),y			lda 	(temp0),y
.450a	85 2d		sta $2d				sta 	temp1+1
.450c	88		dey				dey
.450d	b1 2a		lda ($2a),y			lda 	(temp0),y
.450f	85 2c		sta $2c				sta 	temp1
.4511	a0 00		ldy #$00			ldy 	#0
.4513					_FVCheck:
.4513	b1 2c		lda ($2c),y			lda 	(temp1),y 					; compare names
.4515	d1 2e		cmp ($2e),y			cmp 	(temp2),y
.4517	d0 d7		bne $44f0			bne 	_FVNext		 				; fail if different.
.4519	c8		iny				iny
.451a	c9 3a		cmp #$3a			cmp 	#$3A 						; until reached the end marker.
.451c	90 f5		bcc $4513			bcc 	_FVCheck
.451e	68		pla				pla
.451f	a8		tay				tay
.4520	38		sec				sec
.4521	60		rts				rts
.4522					_FVFail:
.4522	68		pla				pla
.4523	a8		tay				tay
.4524	18		clc				clc
.4525	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/variable/reset.asm

.4526					HashTableReset:
.4526	a2 60		ldx #$60			ldx 	#6*2*hashTableSize			; 6 types, 2 bytes per table entry.
.4528	a9 00		lda #$00			lda 	#0
.452a					_HTRClear:
.452a	9d 67 0a	sta $0a67,x			sta 	hashTables-1,x
.452d	ca		dex				dex
.452e	d0 fa		bne $452a			bne 	_HTRClear
.4530	60		rts				rts

;******  Return to file: variable/variable.asm

.4531					variableHandler:
.4531	7c 34 45	jmp ($4534,x)			jmp 	(variableVectors,x)
.4534					variableVectors:
>4534	3c 45					.word _DummyControlHandler ; index 0
>4536	68 43					.word AccessVariable       ; index 2
>4538	f8 41					.word CreateArray          ; index 4
>453a	26 45					.word HashTableReset       ; index 6
.453c					_DummyControlHandler:
.453c	60		rts			rts

;******  Return to file: basic.asm

.453d					section_end_variable:
.453d					section_start_footer:

;******  Processing file: footer/footer.asm


;******  Processing file: footer/99end.asm

.003d					endZeroPage:
.0df2					endStorage:
>453d							.align 	256
.4600					programMemory:
>45ff	ff						.byte 	$FF

;******  Return to file: footer/footer.asm


;******  Return to file: basic.asm

.4600					section_end_footer:

;******  End of listing
