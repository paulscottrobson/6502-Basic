
; 64tass Turbo Assembler Macro V1.55.2200 listing file
; 64tass -Walias -Wmacro-prefix -Wall -q -c -L ../source/bin/basic.lst -l ../source/bin/basic.lbl -Wall -o ../source/bin/basic.prg basic.asm
; Fri Mar  5 19:58:57 2021

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: basic.asm


;******  Processing file: main/00header/01common.inc


;******  Processing file: main/00header/../../generated/installed.inc

=1					installed_main = 1
=1					installed_variable = 1
=1					installed_assembler = 1
=1					installed_error = 1
=1					installed_extension = 1
=1					installed_string = 1
=1					installed_device = 1
=0					installed_floatingpoint = 0
=1					installed_interaction = 1
=1					installed_tokeniser = 1

;******  Return to file: main/00header/01common.inc

=$1000					CodeStart = $1000
=$800					MemoryStorage = $800
=$02					ZeroPageStorage = $02
=8					StackSize = 8
=512					retStackSize = 512
=8					hashTableSize = 8			; if this changes, the calculation is AccessSetup has to match it.
="G"					markerGOSUB = 'G'
="R"					markerREPEAT = 'R'
="F"					markerFOR = 'F'
="W"					markerWHILE = 'W'
="P"					markerPROC = 'P'
="$"					markerSTRING = '$'
="#"					markerFLOAT = '#'
="%"					markerINT = '%'
=5					VarHSize = 5 								; header (2 link, 2 name, 1 hash)
=4					VarISize = 4 								; integer (32 bit)
=6					VarFSize = 6 								; float (4 mantissa, 1 exponent 1 sign/zero)
=2					VarSSize = 2 								; address (2 bytes)

;******  Return to file: basic.asm


;******  Processing file: main/00header/02macros.inc


;******  Return to file: basic.asm


;******  Processing file: main/00header/03data.inc

>0002					codePtr:.fill 	2							; (codePtr),y points to code.
>0004					temp0: 	.fill 	2							; working variables.
>0006					temp1: 	.fill 	2
>0008					temp2: 	.fill 	2
>000a					temp3: 	.fill 	2
.000c					tempshort:
>000c							.fill 	1
.000d					highMemory:
>000d							.fill 	2
.000f					lowMemory:
>000f							.fill 	2
>0040					esType:	.fill 	StackSize  					; type byte (see above)
>0048					esInt0:	.fill 	StackSize 					; integer or mantissa
>0050					esInt1:	.fill 	StackSize
>0058					esInt2:	.fill 	StackSize
>0060					esInt3:	.fill 	StackSize
>0068					esExp:	.fill 	StackSize 					; exponent ($80 = 0)
>0070					esZSign:.fill 	StackSize 					; for floating point - sign (bit 7) isZero (bit 6)
=$48					esMant0 = esInt0 							; synonyms.
=$50					esMant1 = esInt1
=$58					esMant2 = esInt2
=$60					esMant3 = esInt3
>0800							.align	256
.0800					returnStack:
>0800							.fill 	retStackSize
>0a00							.align	256
.0a00					SingleLetterVar:
>0a00					 		.fill 	26*4
.0a68					hashTables:
>0a68							.fill 	6*2*hashTableSize
.0ac8					basePage:
>0ac8							.fill 	2
.0aca					endMemory:
>0aca							.fill 	2
.0acc					NullString:
>0acc							.fill 	1							; don't waste memory concreting null strings.
.0acd					convertBuffer:
>0acd							.fill 	35

;******  Processing file: main/00header/../../generated/tokenconst.inc

=$80					TOK_EOL=$80
=$81					TOK_SHIFT1=$81
=$82					TOK_SHIFT2=$82
=$83					TOK_SHIFT3=$83
=$84					TOK_FPC=$84
=$85					TOK_STR=$85
=$86					TOK_BINARYST=$86
=$99					TOK_STRUCTST=$99
=$a4					TOK_UNARYST=$a4
=$c4					TOK_TOKENS=$c4
=$86					TKW_AND                      = $86 ; and
=$87					TKW_OR                       = $87 ; or
=$88					TKW_XOR                      = $88 ; xor
=$89					TKW_GREATEREQUAL             = $89 ; >=
=$8a					TKW_LESSEQUAL                = $8a ; <=
=$8b					TKW_GREATER                  = $8b ; >
=$8c					TKW_LESS                     = $8c ; <
=$8d					TKW_EQUAL                    = $8d ; =
=$8e					TKW_LESSGREATER              = $8e ; <>
=$8f					TKW_PLUS                     = $8f ; +
=$90					TKW_MINUS                    = $90 ; -
=$91					TKW_GREATERGREATER           = $91 ; >>
=$92					TKW_LESSLESS                 = $92 ; <<
=$93					TKW_STAR                     = $93 ; *
=$94					TKW_SLASH                    = $94 ; /
=$95					TKW_MOD                      = $95 ; mod
=$96					TKW_HAT                      = $96 ; ^
=$97					TKW_PLING                    = $97 ; !
=$98					TKW_QMARK                    = $98 ; ?
=$99					TKW_REPEAT                   = $99 ; repeat
=$9a					TKW_WHILE                    = $9a ; while
=$9b					TKW_FOR                      = $9b ; for
=$9c					TKW_IF                       = $9c ; if
=$9d					TKW_DEFPROC                  = $9d ; defproc
=$9e					TKW_UNTIL                    = $9e ; until
=$9f					TKW_WEND                     = $9f ; wend
=$a0					TKW_NEXT                     = $a0 ; next
=$a1					TKW_THEN                     = $a1 ; then
=$a2					TKW_ENDIF                    = $a2 ; endif
=$a3					TKW_ENDPROC                  = $a3 ; endproc
=$a4					TKW_LPAREN                   = $a4 ; (
=$a5					TKW_LENLPAREN                = $a5 ; len(
=$a6					TKW_SGNLPAREN                = $a6 ; sgn(
=$a7					TKW_ABSLPAREN                = $a7 ; abs(
=$a8					TKW_RANDOMLPAREN             = $a8 ; random(
=$a9					TKW_PAGE                     = $a9 ; page
=$aa					TKW_TRUE                     = $aa ; true
=$ab					TKW_FALSE                    = $ab ; false
=$ac					TKW_MINLPAREN                = $ac ; min(
=$ad					TKW_MAXLPAREN                = $ad ; max(
=$ae					TKW_SYSLPAREN                = $ae ; sys(
=$af					TKW_TIMERLPAREN              = $af ; timer(
=$b0					TKW_EVENTLPAREN              = $b0 ; event(
=$b1					TKW_GETLPAREN                = $b1 ; get(
=$b2					TKW_INKEYLPAREN              = $b2 ; inkey(
=$b3					TKW_ALLOCLPAREN              = $b3 ; alloc(
=$b4					TKW_CHRDOLLARLPAREN          = $b4 ; chr$(
=$b5					TKW_LEFTDOLLARLPAREN         = $b5 ; left$(
=$b6					TKW_MIDDOLLARLPAREN          = $b6 ; mid$(
=$b7					TKW_RIGHTDOLLARLPAREN        = $b7 ; right$(
=$b8					TKW_STRDOLLARLPAREN          = $b8 ; str$(
=$b9					TKW_VALLPAREN                = $b9 ; val(
=$ba					TKW_PEEKLPAREN               = $ba ; peek(
=$bb					TKW_DEEKLPAREN               = $bb ; deek(
=$bc					TKW_LEEKLPAREN               = $bc ; leek(
=$bd					TKW_ASCLPAREN                = $bd ; asc(
=$be					TKW_INTLPAREN                = $be ; int(
=$bf					TKW_FLOATLPAREN              = $bf ; float(
=$c0					TKW_ISVALLPAREN              = $c0 ; isval(
=$c1					TKW_AT                       = $c1 ; @
=$c2					TKW_WAVY                     = $c2 ; ~
=$c3					TKW_AMP                      = $c3 ; &
=$c4					TKW_RPAREN                   = $c4 ; )
=$c5					TKW_COLON                    = $c5 ; :
=$c6					TKW_COMMA                    = $c6 ; ,
=$c7					TKW_SEMICOLON                = $c7 ; ;
=$c8					TKW_QUOTE                    = $c8 ; '
=$c9					TKW_TO                       = $c9 ; to
=$ca					TKW_STEP                     = $ca ; step
=$cb					TKW_PROC                     = $cb ; proc
=$cc					TKW_LOCAL                    = $cc ; local
=$cd					TKW_DIM                      = $cd ; dim
=$ce					TKW_REM                      = $ce ; rem
=$cf					TKW_LET                      = $cf ; let
=$d0					TKW_INPUT                    = $d0 ; input
=$d1					TKW_ELSE                     = $d1 ; else
=$d2					TKW_VDU                      = $d2 ; vdu
=$d3					TKW_PRINT                    = $d3 ; print
=$d4					TKW_GOTO                     = $d4 ; goto
=$d5					TKW_GOSUB                    = $d5 ; gosub
=$d6					TKW_RETURN                   = $d6 ; return
=$d7					TKW_DATA                     = $d7 ; data
=$d8					TKW_ASSERT                   = $d8 ; assert
=$d9					TKW_POKE                     = $d9 ; poke
=$da					TKW_DOKE                     = $da ; doke
=$db					TKW_LOKE                     = $db ; loke
=$86					TKW_CLEAR                    = $86 ; clear
=$87					TKW_LOAD                     = $87 ; load
=$88					TKW_SAVE                     = $88 ; save
=$89					TKW_LIST                     = $89 ; list
=$8a					TKW_NEW                      = $8a ; new
=$8b					TKW_RUN                      = $8b ; run
=$8c					TKW_READ                     = $8c ; read
=$8d					TKW_RESTORE                  = $8d ; restore
=$8e					TKW_END                      = $8e ; end
=$8f					TKW_STOP                     = $8f ; stop
=$86					TKW_VPOKE                    = $86 ; vpoke
=$87					TKW_VDOKE                    = $87 ; vdoke
=$86					TKW_VPEEKLPAREN              = $86 ; vpeek(
=$87					TKW_VDEEKLPAREN              = $87 ; vdeek(

;******  Return to file: main/00header/03data.inc

=$3a					TYPE_INT =		($3A) 						; type bytes that end identifier.
=$3b					TYPE_INTARRAY =	($3B)
=$3c					TYPE_STR =		($3C)
=$3d					TYPE_STRARRAY =	($3D)
=$3e					TYPE_FLOAT =	($3E)
=$3f					TYPE_FLOATARRAY=($3F)

;******  Return to file: basic.asm


;******  Processing file: main/imath/intmacros.inc


;******  Return to file: basic.asm


;******  Processing file: main/main.inc


;******  Return to file: basic.asm


;******  Processing file: assembler/assembler.inc


;******  Return to file: basic.asm


;******  Processing file: device/device.inc


;******  Return to file: basic.asm


;******  Processing file: error/error.inc


;******  Return to file: basic.asm


;******  Processing file: error/errorhandler.inc


;******  Processing file: error/../generated/errorid.inc

=1					ErrorID_Missing = 1 ; Feature not Present
=2					ErrorID_Syntax = 2 ; Syntax Error
=3					ErrorID_NoModule = 3 ; Module disabled
=4					ErrorID_Assert = 4 ; Assertion failed
=5					ErrorID_DivZero = 5 ; Divide By Zero
=6					ErrorID_Stop = 6 ; Stop
=7					ErrorID_BadType = 7 ; Type Mismatch
=8					ErrorID_BadValue = 8 ; Illegal Value
=9					ErrorID_MissingRP = 9 ; Missing right bracket
=10					ErrorID_MissingComma = 10 ; Missing comma
=11					ErrorID_NoReference = 11 ; Missing reference
=12					ErrorID_LineNumber = 12 ; Line Number not found
=13					ErrorID_StrLen = 13 ; String too long.
=14					ErrorID_ReturnErr = 14 ; RETURN without GOSUB
=15					ErrorID_UntilErr = 15 ; UNTIL without REPEAT
=16					ErrorID_NextErr = 16 ; NEXT without FOR
=17					ErrorID_WendErr = 17 ; WEND without WHILE
=18					ErrorID_endprocErr = 18 ; ENDPROC without PROC
=19					ErrorID_BadIndex = 19 ; Bad NEXT index
=20					ErrorID_Struct = 20 ; Structures nested wrong
=21					ErrorID_NoAuto = 21 ; Cannot create variable
=22					ErrorID_RetStack = 22 ; Return stack out of space.
=23					ErrorID_NoProc = 23 ; Unknown Procedure
=24					ErrorID_Params = 24 ; Parameters do not match.

;******  Return to file: error/errorhandler.inc


;******  Return to file: basic.asm


;******  Processing file: extension/extension.inc


;******  Return to file: basic.asm


;******  Processing file: floatingpoint/floatingpoint.inc


;******  Return to file: basic.asm


;******  Processing file: interaction/interaction.inc


;******  Return to file: basic.asm


;******  Processing file: string/memory.inc

=252					MaxStringSize = 252

;******  Return to file: basic.asm


;******  Processing file: string/string.inc


;******  Return to file: basic.asm


;******  Processing file: tokeniser/tokeniser.inc


;******  Return to file: basic.asm


;******  Processing file: variable/variable.inc


;******  Return to file: basic.asm

.1000					section_start_main:

;******  Processing file: main/main.asm


;******  Processing file: main/00header/00start.asm

.1000	a2 ff		ldx #$ff	Start:	ldx 	#$FF
.1002	9a		txs				txs
.1003	a9 00		lda #$00			lda 	#(testBaseAddress) & $FF
.1005	8d c8 0a	sta $0ac8			sta 	basePage
.1008	a9 50		lda #$50			lda 	#(testBaseAddress) >> 8
.100a	8d c9 0a	sta $0ac9			sta 	1+(basePage)
.100d	a9 00		lda #$00			lda 	#($9800) & $FF
.100f	8d ca 0a	sta $0aca			sta 	endMemory
.1012	a9 98		lda #$98			lda 	#($9800) >> 8
.1014	8d cb 0a	sta $0acb			sta 	1+(endMemory)
.1017	4c ac 13	jmp $13ac			jmp 	Command_Run
.2829					ReturnPos:
.5000					testBaseAddress:

;******  Processing file: main/00header/../../generated/testcode.inc

>5000	08 0a 00 d3 41 94 40 80			.byte 8,10,0,211,65,148,64,128,8,11,0,153,197,158,171,128,0
>5008	08 0b 00 99 c5 9e ab 80 00

;******  Return to file: main/00header/00start.asm


;******  Return to file: main/main.asm


;******  Processing file: main/commands/assert.asm

.101a					Command_Assert:
.101a	20 5e 1a	jsr $1a5e			jsr 	EvaluateRootInteger 		; what is being asserted.
.101d	20 86 20	jsr $2086			jsr 	MInt32Zero 					; is it true ?
.1020	f0 01		beq $1023			beq 	_CAError
.1022	60		rts				rts
.1023					_CAError:
.1023	a2 04		ldx #$04			ldx 	#ErrorID_Assert
.1025	20 91 21	jsr $2191		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/commands/clear.asm

.1028					CommandClear:
.1028	98		tya				tya
.1029	48		pha				pha
.102a	ad ca 0a	lda $0aca			lda 	endMemory					; set high memory = end of memory
.102d	85 0d		sta $0d				sta 	highMemory
.102f	ad cb 0a	lda $0acb			lda 	endMemory+1
.1032	85 0e		sta $0e				sta 	highMemory+1
.1034	ad c8 0a	lda $0ac8			lda 	basePage 					; work out where the program ends.
.1037	85 04		sta $04				sta 	temp0
.1039	ad c9 0a	lda $0ac9			lda 	basePage+1
.103c	85 05		sta $05				sta 	temp0+1
.103e					_CCFindEnd:
.103e	a0 00		ldy #$00			ldy 	#0
.1040	b1 04		lda ($04),y			lda 	(temp0),y
.1042	f0 0c		beq $1050			beq 	_CCFoundEnd 				; offset zero is end.
.1044	18		clc				clc
.1045	65 04		adc $04				adc 	temp0 						; move to next line
.1047	85 04		sta $04				sta 	temp0
.1049	90 f3		bcc $103e			bcc 	_CCFindEnd
.104b	e6 05		inc $05				inc 	temp0+1
.104d	4c 3e 10	jmp $103e			jmp 	_CCFindEnd
.1050					_CCFoundEnd:
.1050	a5 04		lda $04				lda 	temp0 						; put temp0 in lowMemory
.1052	85 0f		sta $0f				sta 	lowMemory
.1054	a5 05		lda $05				lda 	temp0+1
.1056	85 10		sta $10				sta 	lowMemory+1
.1058	a9 04		lda #$04			lda 	#4 							; skip low free memory clear, leave a gap.
.105a	20 6b 10	jsr $106b			jsr 	AdvanceLowMemoryByte		; need at least one here, to skip the end of program zero offset.
.105d	20 ec 20	jsr $20ec			jsr 	RSReset 					; reset the return stack.
.1060	a2 02		ldx #$02		ldx	#2
.1062	20 22 28	jsr $2822		jsr	variableHandler
.1065	20 55 15	jsr $1555			jsr 	ScanProc 					; scan for procedures
.1068	68		pla				pla
.1069	a8		tay				tay
.106a	60		rts				rts
.106b					AdvanceLowMemoryByte:
.106b	18		clc				clc
.106c	65 0f		adc $0f				adc 	lowMemory
.106e	85 0f		sta $0f				sta 	lowMemory
.1070	90 02		bcc $1074			bcc 	_ALMBExit
.1072	e6 10		inc $10				inc 	lowMemory+1
.1074					_ALMBExit:
.1074	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/for.asm

.2829					Command_FOR:
.2829	a9 46		lda #$46			lda 	#markerFOR 					; allocate the space.
.282b	a2 0b		ldx #$0b			ldx 	#11
.282d	20 fa 20	jsr $20fa			jsr 	RSClaim
.2830	20 b1 10	jsr $10b1			jsr 	CommandLET 					; do the same as LET.
.2833	a5 40		lda $40				lda 	esType 						; check type should be integer reference.
.2835	c9 80		cmp #$80			cmp 	#$80
.2837	d0 4c		bne $2885			bne 	_CFType
.2839	a9 c9		lda #$c9			lda 	#TKW_TO 					; check TO present.
.283b	20 c7 20	jsr $20c7			jsr 	CheckToken
.283e	a2 01		ldx #$01			ldx 	#1 							; keep the variable address in stack 0
.2840	20 60 1a	jsr $1a60			jsr 	EvaluateInteger				; get terminal value in stack 1
.2843	98		tya				tya
.2844	48		pha				pha
.2845	a0 04		ldy #$04			ldy 	#4
.2847	a5 48		lda $48				lda		esInt0 						; the address of the index into 4 and 5
.2849	91 78		sta ($78),y			sta 	(rsPointer),y
.284b	c8		iny				iny
.284c	a5 50		lda $50				lda		esInt1
.284e	91 78		sta ($78),y			sta 	(rsPointer),y
.2850	c8		iny				iny
.2851	a9 01		lda #$01			lda 	#1  						; the default step in 6
.2853	91 78		sta ($78),y			sta 	(rsPointer),y
.2855	c8		iny				iny
.2856	a5 49		lda $49				lda		esInt0+1 					; terminal value in 7 to 11.
.2858	91 78		sta ($78),y			sta 	(rsPointer),y
.285a	c8		iny				iny
.285b	a5 51		lda $51				lda		esInt1+1
.285d	91 78		sta ($78),y			sta 	(rsPointer),y
.285f	c8		iny				iny
.2860	a5 59		lda $59				lda		esInt2+1
.2862	91 78		sta ($78),y			sta 	(rsPointer),y
.2864	c8		iny				iny
.2865	a5 61		lda $61				lda		esInt3+1
.2867	91 78		sta ($78),y			sta 	(rsPointer),y
.2869	68		pla				pla
.286a	a8		tay				tay
.286b	b1 02		lda ($02),y			lda 	(codePtr),y 				; followed by STEP.
.286d	c9 ca		cmp #$ca			cmp 	#TKW_STEP
.286f	d0 0e		bne $287f			bne 	_CFDone
.2871	c8		iny				iny									; skip over step.
.2872	20 60 1a	jsr $1a60			jsr 	EvaluateInteger 			; get step
.2875	98		tya				tya
.2876	48		pha				pha
.2877	b5 48		lda $48,x			lda 	esInt0,x 					; copy it into step (bit lazy here)
.2879	a0 06		ldy #$06			ldy 	#6
.287b	91 78		sta ($78),y			sta 	(rsPointer),y
.287d	68		pla				pla
.287e	a8		tay				tay
.287f					_CFDone:
.287f	a9 01		lda #$01			lda 	#1
.2881	20 26 21	jsr $2126			jsr 	RSSavePosition 				; save position.
.2884	60		rts				rts
.2885					_CFType:
.2885	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.2887	20 91 21	jsr $2191		jsr	errorHandler
.288a					Command_NEXT:
.288a	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.288c	a1 78		lda ($78,x)			lda 	(rsPointer,x)
.288e	c9 46		cmp #$46			cmp 	#markerFOR 						; does it match
.2890	f0 05		beq $2897			beq 	_isok
.2892	a2 10		ldx #$10			ldx 	#ErrorID_nextErr
.2894	20 91 21	jsr $2191		jsr	errorHandler
.2897					_isok:
.2897	b1 02		lda ($02),y			lda 	(codePtr),y 				; is it NEXT <index>
.2899	c9 40		cmp #$40			cmp 	#$40 						; e.g. a variable follows 00-3F
.289b	b0 18		bcs $28b5			bcs 	_CNNoIndex
.289d	a2 00		ldx #$00			ldx 	#0 							; start on stack
.289f	20 8d 1a	jsr $1a8d			jsr 	EvaluateReference 			; this is the variable/parameter to localise.
.28a2	98		tya				tya
.28a3	48		pha				pha
.28a4	a0 04		ldy #$04			ldy 	#4 							; check same variable
.28a6	b1 78		lda ($78),y			lda 	(rsPointer),y
.28a8	d5 48		cmp $48,x			cmp 	esInt0,x
.28aa	d0 76		bne $2922			bne 	_CNBadIndex
.28ac	c8		iny				iny
.28ad	b1 78		lda ($78),y			lda 	(rsPointer),y
.28af	d5 50		cmp $50,x			cmp 	esInt1,x
.28b1	d0 6f		bne $2922			bne 	_CNBadIndex
.28b3	68		pla				pla
.28b4	a8		tay				tay
.28b5					_CNNoIndex:
.28b5	98		tya				tya
.28b6	48		pha				pha
.28b7	a0 04		ldy #$04			ldy 	#4 							; make temp0 point to the index
.28b9	b1 78		lda ($78),y			lda 	(rsPointer),y
.28bb	85 04		sta $04				sta 	temp0
.28bd	c8		iny				iny
.28be	b1 78		lda ($78),y			lda 	(rsPointer),y
.28c0	85 05		sta $05				sta 	temp0+1
.28c2	c8		iny				iny
.28c3	a2 00		ldx #$00			ldx 	#0 							; X is the sign extend part of the step.
.28c5	b1 78		lda ($78),y			lda 	(rsPointer),y 				; get the step.
.28c7	85 09		sta $09				sta 	temp2+1 					; save for later.
.28c9	10 01		bpl $28cc			bpl 	_CNSignX
.28cb	ca		dex				dex  								; X = $FF
.28cc					_CNSignX:
.28cc	18		clc				clc 								; add to the LSB
.28cd	a0 00		ldy #$00			ldy 	#0
.28cf	71 04		adc ($04),y			adc 	(temp0),y
.28d1	91 04		sta ($04),y			sta 	(temp0),y
.28d3					_CNPropogate:
.28d3	c8		iny				iny  								; add the sign extended in X to the rest.
.28d4	8a		txa				txa
.28d5	71 04		adc ($04),y			adc 	(temp0),y
.28d7	91 04		sta ($04),y			sta 	(temp0),y
.28d9	c8		iny				iny
.28da	8a		txa				txa
.28db	71 04		adc ($04),y			adc 	(temp0),y
.28dd	91 04		sta ($04),y			sta 	(temp0),y
.28df	c8		iny				iny
.28e0	8a		txa				txa
.28e1	71 04		adc ($04),y			adc 	(temp0),y
.28e3	91 04		sta ($04),y			sta 	(temp0),y
.28e5	18		clc				clc 								; point temp1 to the terminal value stored in the stack.
.28e6	a5 78		lda $78				lda 	rsPointer
.28e8	69 07		adc #$07			adc 	#7
.28ea	85 06		sta $06				sta 	temp1
.28ec	a9 00		lda #$00			lda 	#0
.28ee	85 08		sta $08				sta 	temp2 						; clear temp2, which is the OR of all the subtractions.
.28f0	a8		tay				tay 								; and clear the Y register again.
.28f1	65 79		adc $79				adc 	rsPointer+1
.28f3	85 07		sta $07				sta 	temp1+1
.28f5	38		sec				sec 								; calculate current - limit oring interim values.
.28f6	20 2e 29	jsr $292e			jsr 	_CNCompare
.28f9	20 2e 29	jsr $292e			jsr 	_CNCompare
.28fc	20 2e 29	jsr $292e			jsr 	_CNCompare
.28ff	20 2e 29	jsr $292e			jsr 	_CNCompare
.2902	50 02		bvc $2906			bvc 	_CNNoOverflow 				; converts to a signed comparison on the sign bit.
.2904	49 80		eor #$80			eor 	#$80
.2906					_CNNoOverflow:
.2906	a4 09		ldy $09				ldy 	temp2+1						; get step back
.2908	30 1d		bmi $2927			bmi 	_CNCheckDownto
.290a	c9 00		cmp #$00			cmp 	#0
.290c	30 0c		bmi $291a			bmi 	_CNLoopRound 				; loop round if < =
.290e	a5 08		lda $08				lda 	temp2
.2910	f0 08		beq $291a			beq 	_CNLoopRound
.2912					_CNLoopExit:
.2912	68		pla				pla
.2913	a8		tay				tay
.2914	a9 0b		lda #$0b			lda 	#11
.2916	20 1c 21	jsr $211c			jsr 	RSFree
.2919	60		rts				rts
.291a					_CNLoopRound:
.291a	68		pla				pla
.291b	a8		tay				tay
.291c	a9 01		lda #$01			lda 	#1
.291e	20 39 21	jsr $2139			jsr 	RSLoadPosition				; go back to the loop top
.2921	60		rts				rts
.2922					_CNBadIndex:
.2922	a2 13		ldx #$13			ldx 	#ErrorID_BadIndex
.2924	20 91 21	jsr $2191		jsr	errorHandler
.2927					_CNCheckDownto:
.2927	c9 00		cmp #$00			cmp 	#0
.2929	10 ef		bpl $291a			bpl 	_CNLoopRound
.292b	4c 12 29	jmp $2912			jmp 	_CNLoopExit
.292e					_CNCompare:
.292e	b1 04		lda ($04),y			lda 	(temp0),y 					; do the subtraction - compare don't care about answer
.2930	f1 06		sbc ($06),y			sbc 	(temp1),y
.2932	05 08		ora $08				ora 	temp2 						; Or into temp2 (does not affect carry)
.2934	85 08		sta $08				sta 	temp2
.2936	c8		iny				iny
.2937	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/if.asm

.1075					CommandIf:
.1075	20 5e 1a	jsr $1a5e			jsr 	EvaluateRootInteger 		; if what ?
.1078	b1 02		lda ($02),y			lda 	(codePtr),y 				; check for IF .. THEN or IF .. GOTO which are single lines.
.107a	c9 d4		cmp #$d4			cmp 	#TKW_GOTO
.107c	f0 04		beq $1082			beq 	_IfSimple
.107e	c9 a1		cmp #$a1			cmp 	#TKW_THEN
.1080	d0 1b		bne $109d			bne 	_IfComplex
.1082					_IfSimple:
.1082	20 86 20	jsr $2086			jsr 	MInt32Zero					; check if TOS zero
.1085	f0 10		beq $1097			beq 	_IfEOL 						; go to next line.
.1087	b1 02		lda ($02),y			lda 	(codePtr),y 				; get and skip token.
.1089	c8		iny				iny
.108a	c9 d4		cmp #$d4			cmp 	#TKW_GOTO 					; was it if GOTO ?
.108c	f0 0c		beq $109a			beq 	_IfGoto 					; do the Goto code
.108e	b1 02		lda ($02),y			lda 	(codePtr),y 				; what follows the THEN ?
.1090	29 c0		and #$c0			and 	#$C0 						; check $40-$7F
.1092	c9 40		cmp #$40			cmp 	#$40 						; e.g. number IF x = 0 THEN 170
.1094	f0 04		beq $109a			beq 	_IfGoto
.1096	60		rts				rts 								; else continue on this line.
.1097					_IfEOL:
.1097	4c c9 15	jmp $15c9			jmp 	AdvanceNextLine 			; go to next line
.109a					_IfGoto:
.109a	4c 08 16	jmp $1608			jmp 	CommandGoto
.109d					_IfComplex:
.109d	20 86 20	jsr $2086			jsr 	MInt32Zero 					; is it true ?
.10a0	f0 01		beq $10a3			beq 	_IFSkip 					; if non-zero then skip to ELSE/ENDIF
.10a2	60		rts				rts 								; else continue.
.10a3					_IFSkip:
.10a3	a9 d1		lda #$d1			lda	 	#TKW_ELSE 					; test failed, go to ELSE or ENDIF whichever comes first.
.10a5	a2 a2		ldx #$a2			ldx 	#TKW_ENDIF
.10a7	4c a1 29	jmp $29a1			jmp		ScanForward
.10aa					Command_ELSE:
.10aa	a2 a2		ldx #$a2			ldx 	#TKW_ENDIF
.10ac	8a		txa				txa
.10ad	4c a1 29	jmp $29a1			jmp		ScanForward
.10b0					Command_ENDIF:
.10b0	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/let.asm

.10b1					CommandLet:
.10b1	a2 00		ldx #$00			ldx 	#0  						; get address to write.
.10b3	20 8d 1a	jsr $1a8d			jsr 	EvaluateReference
.10b6	a9 8d		lda #$8d			lda 	#TKW_EQUAL 					; check for equals
.10b8	20 c7 20	jsr $20c7			jsr 	CheckToken
.10bb	e8		inx				inx 								; do RHS
.10bc	20 41 1a	jsr $1a41			jsr 	Evaluate 					; evaluate and derefernce
.10bf	ca		dex				dex
.10c0	20 c4 10	jsr $10c4			jsr 	WriteValue 					; write it out
.10c3	60		rts				rts
.10c4					WriteValue:
.10c4	98		tya				tya
.10c5	48		pha				pha
.10c6	20 26 11	jsr $1126			jsr 	TOSToTemp0 					; set temp0 to point to target address.
.10c9	b5 40		lda $40,x			lda 	esType,x 					; check the string/integer flags match
.10cb	55 41		eor $41,x			eor 	esType+1,x
.10cd	29 40		and #$40			and 	#$40
.10cf	d0 50		bne $1121			bne		_WVType
.10d1	a0 01		ldy #$01			ldy 	#1 							; for string, copy 0 and 1.
.10d3	b5 40		lda $40,x			lda 	esType,x 					; check for string assignment
.10d5	29 40		and #$40			and 	#$40
.10d7	d0 1f		bne $10f8			bne 	_WVCopyString
.10d9	b5 40		lda $40,x			lda 	esType,x 					; check both are integer.
.10db	15 41		ora $41,x			ora 	esType+1,x
.10dd	4a		lsr a				lsr 	a
.10de	90 22		bcc $1102			bcc 	_WVCopyData4
.10e0	b5 40		lda $40,x			lda 	esType,x
.10e2	4a		lsr a				lsr 	a
.10e3	90 3c		bcc $1121			bcc 	_WVType
.10e5	e8		inx				inx 								; force the value being written to be a float.
.10e6	20 7a 16	jsr $167a			jsr 	BPMakeFloat
.10e9	ca		dex				dex
.10ea	20 26 11	jsr $1126			jsr 	TOSToTemp0 					; set Temp0 to write address
.10ed	e8		inx				inx
.10ee	8a		txa				txa
.10ef	a2 20		ldx #$20		ldx	#32
.10f1	20 42 24	jsr $2442		jsr	floatingpointHandler
.10f4	aa		tax				tax
.10f5	4c 1e 11	jmp $111e			jmp 	_WVCopyExit
.10f8					_WVCopyString:
.10f8	8a		txa				txa
.10f9	a2 0a		ldx #$0a		ldx	#10
.10fb	20 99 26	jsr $2699		jsr	stringHandler
.10fe	aa		tax				tax
.10ff	4c 1e 11	jmp $111e			jmp 	_WVCopyExit
.1102					_WVCopyData4:
.1102	b5 40		lda $40,x			lda 	esType,x 					; is the int ref a byte ref ?
.1104	29 20		and #$20			and 	#$20
.1106	d0 10		bne $1118			bne 	_WVCopyData1
.1108	a0 03		ldy #$03			ldy 	#3
.110a	b5 61		lda $61,x			lda 	esInt3+1,x
.110c	91 04		sta ($04),y			sta 	(temp0),y
.110e	88		dey				dey
.110f	b5 59		lda $59,x			lda 	esInt2+1,x
.1111	91 04		sta ($04),y			sta 	(temp0),y
.1113	88		dey				dey
.1114	b5 51		lda $51,x			lda 	esInt1+1,x
.1116	91 04		sta ($04),y			sta 	(temp0),y
.1118					_WVCopyData1:
.1118	a0 00		ldy #$00			ldy 	#0
.111a	b5 49		lda $49,x			lda 	esInt0+1,x
.111c	91 04		sta ($04),y			sta 	(temp0),y
.111e					_WVCopyExit:
.111e	68		pla				pla
.111f	a8		tay				tay
.1120	60		rts				rts
.1121					_WVType:
.1121	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.1123	20 91 21	jsr $2191		jsr	errorHandler
.1126					TOSToTemp0:
.1126	b5 48		lda $48,x			lda 	esInt0,x
.1128	85 04		sta $04				sta 	temp0
.112a	b5 50		lda $50,x			lda 	esInt1,x
.112c	85 05		sta $05				sta 	temp0+1
.112e	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/local.asm

.0af0					storeSize:
>0af0							.fill 	1
.112f					CommandLocal:
.112f	a2 00		ldx #$00			ldx 	#0
.1131	20 4d 11	jsr $114d			jsr 	LocaliseVariable 			; localise one.
.1134					_CLCheckNext:
.1134	b1 02		lda ($02),y			lda 	(codePtr),y 				; what follows ?
.1136	c8		iny				iny
.1137	c9 8d		cmp #$8d			cmp 	#TKW_EQUAL 					; local x = 2 ?
.1139	f0 06		beq $1141			beq 	_CLAssignment
.113b	c9 c6		cmp #$c6			cmp 	#TKW_COMMA 					; comma try again.
.113d	f0 f0		beq $112f			beq 	CommandLocal
.113f	88		dey				dey
.1140	60		rts				rts
.1141					_CLAssignment:
.1141	a2 01		ldx #$01			ldx 	#1
.1143	20 41 1a	jsr $1a41			jsr 	Evaluate 					; evaluate RHS
.1146	ca		dex				dex
.1147	20 c4 10	jsr $10c4			jsr 	WriteValue
.114a	4c 34 11	jmp $1134			jmp 	_CLCheckNext
.114d					LocaliseVariable:
.114d	b1 02		lda ($02),y			lda 	(codePtr),y 				; check it's a variable.
.114f	c9 40		cmp #$40			cmp 	#$40
.1151	b0 67		bcs $11ba			bcs 	_LVSyntax
.1153	8a		txa				txa 								; get the address of that variable.
.1154	a2 00		ldx #$00		ldx	#0
.1156	20 22 28	jsr $2822		jsr	variableHandler
.1159	aa		tax				tax
.115a	8a		txa				txa
.115b	48		pha				pha
.115c	98		tya				tya
.115d	48		pha				pha
.115e	20 26 11	jsr $1126			jsr 	TOSToTemp0 					; the address of the variable is now in temp0.
.1161	b5 40		lda $40,x			lda 	esType,x 					; get the type
.1163	0a		asl a				asl 	a
.1164	10 16		bpl $117c			bpl 	_LVPushNumber
.1166	a0 00		ldy #$00			ldy 	#0 							; put address of data in temp1
.1168	b1 04		lda ($04),y			lda 	(temp0),y
.116a	c8		iny				iny
.116b	85 06		sta $06				sta 	temp1
.116d	b1 04		lda ($04),y			lda 	(temp0),y
.116f	85 07		sta $07				sta 	temp1+1
.1171	a0 00		ldy #$00			ldy 	#0 	 						; get length
.1173	b1 06		lda ($06),y			lda 	(temp1),y
.1175	aa		tax				tax 								; into X
.1176	e8		inx				inx 								; +1 for length.
.1177	a9 24		lda #$24			lda 	#markerString
.1179	4c 91 11	jmp $1191			jmp 	_LVWriteFrame
.117c					_LVPushNumber:
.117c	a5 04		lda $04				lda 	temp0 						; storage address and data source are the same
.117e	85 06		sta $06				sta 	temp1
.1180	a5 05		lda $05				lda 	temp0+1
.1182	85 07		sta $07				sta 	temp1+1
.1184	b5 40		lda $40,x			lda 	esType,x 					; put float flag into carry.
.1186	4a		lsr a				lsr 	a
.1187	a9 25		lda #$25			lda 	#markerInt 					; get marker and size.
.1189	a2 04		ldx #$04			ldx 	#VarISize
.118b	90 04		bcc $1191			bcc 	_LVIsInteger
.118d	a9 23		lda #$23			lda 	#markerFloat
.118f	a2 06		ldx #$06			ldx 	#VarFSize
.1191					_LVIsInteger:
.1191					_LVWriteFrame:
.1191	8e f0 0a	stx $0af0			stx 	storeSize 					; number of bytes to copy from (temp0)
.1194	e8		inx				inx 								; allocate 3 bytes, 2 for the address, 1 for the marker.
.1195	e8		inx				inx
.1196	e8		inx				inx
.1197	20 fa 20	jsr $20fa			jsr 	RSClaim 					; create the stack frame.
.119a	a5 04		lda $04				lda 	temp0 						; copy the target address to slots 1 & 2
.119c	a0 01		ldy #$01			ldy 	#1
.119e	91 78		sta ($78),y			sta 	(rsPointer),y
.11a0	c8		iny				iny
.11a1	a5 05		lda $05				lda 	temp0+1
.11a3	91 78		sta ($78),y			sta 	(rsPointer),y
.11a5	a0 00		ldy #$00			ldy 	#0
.11a7					_LVCopyData:
.11a7	b1 06		lda ($06),y			lda 	(temp1),y 					; get data from source, temp1
.11a9	c8		iny				iny 								; write allowing for the header bit.
.11aa	c8		iny				iny
.11ab	c8		iny				iny
.11ac	91 78		sta ($78),y			sta 	(rsPointer),y
.11ae	88		dey				dey
.11af	88		dey				dey
.11b0	ce f0 0a	dec $0af0			dec 	storeSize 					; do it storesize times
.11b3	d0 f2		bne $11a7			bne 	_LVCopyData
.11b5	68		pla				pla
.11b6	a8		tay				tay
.11b7	68		pla				pla
.11b8	aa		tax				tax
.11b9	60		rts				rts
.11ba					_LVSyntax:
.11ba	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.11bc	20 91 21	jsr $2191		jsr	errorHandler
.11bf					RestoreLocals:
.11bf	a2 00		ldx #$00			ldx 	#0
.11c1	a1 78		lda ($78,x)			lda 	(rsPointer,x)
.11c3	c9 40		cmp #$40			cmp	 	#64
.11c5	90 01		bcc $11c8			bcc 	_RLocal
.11c7	60		rts				rts
.11c8					_RLocal:
.11c8	8a		txa				txa
.11c9	48		pha				pha
.11ca	98		tya				tya
.11cb	48		pha				pha
.11cc	a0 01		ldy #$01			ldy 	#1 							; copy target address to temp0
.11ce	b1 78		lda ($78),y			lda 	(rsPointer),y
.11d0	85 04		sta $04				sta 	temp0
.11d2	c8		iny				iny
.11d3	b1 78		lda ($78),y			lda 	(rsPointer),y
.11d5	85 05		sta $05				sta 	temp0+1
.11d7	a0 00		ldy #$00			ldy 	#0 							; get type back.
.11d9	b1 78		lda ($78),y			lda 	(rsPointer),y
.11db	c9 24		cmp #$24			cmp 	#markerString 				; string is ... different :)
.11dd	f0 28		beq $1207			beq 	_RString
.11df	a2 04		ldx #$04			ldx		#VARISize 					; size integer
.11e1	c9 25		cmp #$25			cmp 	#markerInt
.11e3	f0 02		beq $11e7			beq 	_RIsInteger
.11e5	a2 06		ldx #$06			ldx 	#VARFSize 					; size float
.11e7					_RIsInteger:
.11e7	8a		txa				txa
.11e8	48		pha				pha
.11e9	a0 03		ldy #$03			ldy 	#3							; start size to copy back from pointer.
.11eb					_RCopyBack:
.11eb	b1 78		lda ($78),y			lda 	(rsPointer),y
.11ed	88		dey				dey
.11ee	88		dey				dey
.11ef	88		dey				dey
.11f0	91 04		sta ($04),y			sta 	(temp0),y
.11f2	c8		iny				iny
.11f3	c8		iny				iny
.11f4	c8		iny				iny
.11f5	c8		iny				iny
.11f6	ca		dex				dex
.11f7	d0 f2		bne $11eb			bne 	_RCopyBack
.11f9	68		pla				pla 								; get size add 3
.11fa	18		clc				clc
.11fb	69 03		adc #$03			adc 	#3 							; (2 for address one for marker)
.11fd					_RRestoreAAndLoop:
.11fd	20 1c 21	jsr $211c			jsr 	RSFree
.1200	68		pla				pla
.1201	a8		tay				tay
.1202	68		pla				pla
.1203	aa		tax				tax
.1204	4c bf 11	jmp $11bf			jmp 	RestoreLocals 				; go see if there are any more locals.
.1207					_RString:
.1207	a2 00		ldx #$00			ldx 	#0
.1209	a0 01		ldy #$01			ldy 	#1 							; set up for a string write.
.120b	b1 78		lda ($78),y			lda 	(rsPointer),y
.120d	95 48		sta $48,x			sta 	esInt0,x
.120f	c8		iny				iny
.1210	b1 78		lda ($78),y			lda 	(rsPointer),y
.1212	95 50		sta $50,x			sta 	esInt1,x
.1214	18		clc				clc
.1215	a5 78		lda $78				lda 	rsPointer
.1217	69 03		adc #$03			adc 	#3
.1219	95 49		sta $49,x			sta 	esInt0+1,x
.121b	a5 79		lda $79				lda 	rsPointer+1
.121d	69 00		adc #$00			adc 	#0
.121f	95 51		sta $51,x			sta 	esInt1+1,x
.1221	8a		txa				txa
.1222	a2 0a		ldx #$0a		ldx	#10
.1224	20 99 26	jsr $2699		jsr	stringHandler
.1227	a0 03		ldy #$03			ldy 	#3 							; get string length
.1229	b1 78		lda ($78),y			lda 	(rsPointer),y
.122b	18		clc				clc
.122c	69 04		adc #$04			adc 	#4 							; add 4 (pointer, marker, length) to restore.
.122e	4c fd 11	jmp $11fd			jmp 	_RRestoreAAndLoop

;******  Return to file: main/main.asm


;******  Processing file: main/commands/new.asm

.1231					Command_New:
.1231	20 06 14	jsr $1406			jsr 	ResetCodeAddress 			; point to first line
.1234	a0 00		ldy #$00			ldy 	#0 							; and zap it.
.1236	98		tya				tya
.1237	91 02		sta ($02),y			sta 	(codePtr),y
.1239	20 28 10	jsr $1028			jsr 	CommandClear 				; clear everything down.
.123c	4c c6 15	jmp $15c6			jmp 	CommandEND 					; do END code, as there's nothing to run.

;******  Return to file: main/main.asm


;******  Processing file: main/commands/poke.asm

.123f					Command_Poke:
.123f	a9 01		lda #$01			lda 	#1
.1241	d0 06		bne $1249			bne 	PokeGeneral
.1243					Command_Doke:
.1243	a9 02		lda #$02			lda 	#2
.1245	d0 02		bne $1249			bne 	PokeGeneral
.1247					Command_Loke:
.1247	a9 03		lda #$03			lda 	#3
.1249					PokeGeneral:
.1249	48		pha				pha 								; save size
.124a	20 5e 1a	jsr $1a5e			jsr 	EvaluateRootInteger 		; target address
.124d	20 df 20	jsr $20df			jsr	 	CheckComma
.1250	e8		inx				inx
.1251	20 60 1a	jsr $1a60			jsr 	EvaluateInteger 			; what value to POKE ?
.1254	ca		dex				dex
.1255	20 26 11	jsr $1126			jsr 	TOSToTemp0 					; temp0 points to the target address
.1258	84 0c		sty $0c				sty 	tempShort 					; save Y
.125a	68		pla				pla 								; get copy type and dispatch
.125b	aa		tax				tax
.125c	ca		dex				dex
.125d	f0 14		beq $1273			beq 	_Poke1
.125f	ca		dex				dex
.1260	f0 0b		beq $126d			beq 	_Poke2
.1262	a0 03		ldy #$03			ldy 	#3
.1264	a5 61		lda $61				lda 	esInt3+1
.1266	91 04		sta ($04),y			sta 	(temp0),y
.1268	88		dey				dey
.1269	a5 59		lda $59				lda 	esInt2+1
.126b	91 04		sta ($04),y			sta 	(temp0),y
.126d					_Poke2:
.126d	a0 01		ldy #$01			ldy 	#1
.126f	a5 51		lda $51				lda 	esInt1+1
.1271	91 04		sta ($04),y			sta 	(temp0),y
.1273					_Poke1:
.1273	a0 00		ldy #$00			ldy 	#0
.1275	a5 49		lda $49				lda 	esInt0+1
.1277	91 04		sta ($04),y			sta 	(temp0),y
.1279	a4 0c		ldy $0c				ldy 	tempShort 					; restore Y and exit
.127b	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/print.asm

.0af1					lastPrintToken:
>0af1							.fill 	1
.127c					Command_Print:
.127c	a9 00		lda #$00			lda 	#0 							; clear LPT flag
.127e	8d f1 0a	sta $0af1			sta 	lastPrintToken
.1281	88		dey				dey
.1282					_PrintLoopSkip:
.1282	c8		iny				iny
.1283					_PrintLoop:
.1283	b1 02		lda ($02),y			lda 	(codePtr),y 				; what follows
.1285	c9 80		cmp #$80			cmp 	#TOK_EOL  					; done if end of line or colon
.1287	f0 5b		beq $12e4			beq 	_PrintExit
.1289	c9 c5		cmp #$c5			cmp 	#TKW_COLON
.128b	f0 57		beq $12e4			beq 	_PrintExit
.128d	8d f1 0a	sta $0af1			sta 	lastPrintToken 				; update LPT
.1290	c9 c7		cmp #$c7			cmp 	#TKW_SEMICOLON 				; ignore semicolon
.1292	f0 ee		beq $1282			beq 	_PrintLoopSkip
.1294	c9 c8		cmp #$c8			cmp 	#TKW_QUOTE 					; ' is new line
.1296	f0 3c		beq $12d4			beq	 	_PrintNewLine
.1298	c9 c6		cmp #$c6			cmp 	#TKW_COMMA 					; , is print tab
.129a	f0 40		beq $12dc			beq 	_PrintTab
.129c	20 3f 1a	jsr $1a3f			jsr 	EvaluateRoot 				; evaluate something at the root
.129f	a9 cd		lda #$cd			lda 	#(convertBuffer) & $FF
.12a1	85 04		sta $04				sta 	temp0
.12a3	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.12a5	85 05		sta $05				sta 	1+(temp0)
.12a7	a5 40		lda $40				lda 	esType 						; get type
.12a9	f0 15		beq $12c0			beq		_PrintInteger
.12ab	4a		lsr a				lsr 	a 							; check for floating point
.12ac	b0 08		bcs $12b6			bcs 	_PrintFloat
.12ae					_PrintString:
.12ae	a2 00		ldx #$00			ldx 	#0 							; bottom string to temp0
.12b0	20 26 11	jsr $1126			jsr 	TOSToTemp0
.12b3	4c ce 12	jmp $12ce			jmp 	_PrintTemp0 				; print no leading space.
.12b6					_PrintFloat:
.12b6	a9 00		lda #$00			lda 	#0 							; stack level.
.12b8	a2 14		ldx #$14		ldx	#20
.12ba	20 42 24	jsr $2442		jsr	floatingpointHandler
.12bd	4c c7 12	jmp $12c7			jmp 	_PrintSpaceTemp0
.12c0					_PrintInteger:
.12c0	a9 8a		lda #$8a			lda 	#10+$80 					; base 10 signed
.12c2	a2 00		ldx #$00			ldx 	#0 							; bottom stack element
.12c4	20 b5 1f	jsr $1fb5			jsr 	MInt32ToString				; convert to text
.12c7					_PrintSpaceTemp0:
.12c7	a9 20		lda #$20			lda 	#32
.12c9	a2 04		ldx #$04		ldx	#4
.12cb	20 84 21	jsr $2184		jsr	deviceHandler
.12ce					_PrintTemp0:
.12ce	20 f5 12	jsr $12f5			jsr 	PrintString
.12d1	4c 83 12	jmp $1283			jmp 	_PrintLoop
.12d4					_PrintNewLine:
.12d4	a2 00		ldx #$00		ldx	#0
.12d6	20 84 21	jsr $2184		jsr	deviceHandler
.12d9	4c 82 12	jmp $1282			jmp 	_PrintLoopSkip
.12dc					_PrintTab:
.12dc	a2 06		ldx #$06		ldx	#6
.12de	20 84 21	jsr $2184		jsr	deviceHandler
.12e1	4c 82 12	jmp $1282			jmp 	_PrintLoopSkip
.12e4					_PrintExit:
.12e4	ad f1 0a	lda $0af1			lda		lastPrintToken 				; check last token
.12e7	c9 c7		cmp #$c7			cmp 	#TKW_SEMICOLON 				; if , or ; do not print NL
.12e9	f0 09		beq $12f4			beq 	_PrintExit2
.12eb	c9 c6		cmp #$c6			cmp 	#TKW_COMMA
.12ed	f0 05		beq $12f4			beq 	_PrintExit2
.12ef	a2 00		ldx #$00		ldx	#0
.12f1	20 84 21	jsr $2184		jsr	deviceHandler
.12f4					_PrintExit2:
.12f4	60		rts				rts
.12f5					PrintString:
.12f5	8a		txa				txa
.12f6	48		pha				pha
.12f7	98		tya				tya
.12f8	48		pha				pha
.12f9	a0 00		ldy #$00			ldy 	#0							; get length
.12fb	b1 04		lda ($04),y			lda 	(temp0),y
.12fd	aa		tax				tax 								; into X
.12fe	e0 00		cpx #$00	_PSLoop:cpx 	#0 							; finished ?
.1300	f0 10		beq $1312			beq 	_PSExit
.1302	ca		dex				dex
.1303	8a		txa				txa
.1304	48		pha				pha
.1305	c8		iny				iny
.1306	b1 04		lda ($04),y			lda 	(temp0),y
.1308	a2 04		ldx #$04		ldx	#4
.130a	20 84 21	jsr $2184		jsr	deviceHandler
.130d	68		pla				pla
.130e	aa		tax				tax
.130f	4c fe 12	jmp $12fe			jmp 	_PSLoop
.1312					_PSExit:
.1312	68		pla				pla
.1313	a8		tay				tay
.1314	68		pla				pla
.1315	aa		tax				tax
.1316	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/proc.asm

.0af2					paramCount:
>0af2							.fill 	1
.1317					CallProc:
.1317	20 e9 14	jsr $14e9			jsr 	FindProcedure 				; find procedure, put in temp0. A contains name length.
.131a	48		pha				pha 								; save length on stack
.131b	85 0c		sta $0c				sta 	tempShort 					; save length in tempShort
.131d	a5 05		lda $05				lda 	temp0+1 					; save procedure target on stack.
.131f	48		pha				pha
.1320	a5 04		lda $04				lda 	temp0
.1322	48		pha				pha
.1323	98		tya				tya 								; calculate Y + length
.1324	18		clc				clc
.1325	65 0c		adc $0c				adc 	tempShort
.1327	a8		tay				tay
.1328	a2 00		ldx #$00			ldx 	#0 							; where the first parameter goes - 1
.132a					_CallProcEvalParams:
.132a	e8		inx				inx
.132b	b1 02		lda ($02),y			lda 	(codePtr),y 				; do we have ) ?
.132d	c9 c4		cmp #$c4			cmp 	#TKW_RPAREN
.132f	f0 0b		beq $133c			beq 	_CPDoneParams
.1331	20 41 1a	jsr $1a41			jsr 	Evaluate 					; evaluate a parameter
.1334	b1 02		lda ($02),y			lda 	(codePtr),Y 				; get what's next, preconsume
.1336	c8		iny				iny
.1337	c9 c6		cmp #$c6			cmp 	#TKW_COMMA 					; if comma, go get another parameter
.1339	f0 ef		beq $132a			beq 	_CallProcEvalParams
.133b	88		dey				dey 								; undo consumption.
.133c					_CPDoneParams:
.133c	20 d2 20	jsr $20d2			jsr 	CheckRightParen 			; check closing parenthesis.
.133f	8e f2 0a	stx $0af2			stx 	paramCount 					; store parameter count+1
.1342	a2 04		ldx #$04			ldx 	#4							; make space on stack
.1344	a9 50		lda #$50			lda 	#markerPROC
.1346	20 fa 20	jsr $20fa			jsr 	RSClaim
.1349	a9 01		lda #$01			lda 	#1 							; store return address.
.134b	20 26 21	jsr $2126			jsr 	RSSavePosition
.134e	68		pla				pla 								; get the new code Ptr
.134f	85 02		sta $02				sta 	codePtr
.1351	68		pla				pla
.1352	85 03		sta $03				sta 	codePtr+1
.1354	68		pla				pla 								; length of name + 4 is the param start.
.1355	18		clc				clc
.1356	69 04		adc #$04			adc 	#4
.1358	a8		tay				tay
.1359	a2 ff		ldx #$ff			ldx 	#$FF
.135b					_CPLoadParameters:
.135b	e8		inx				inx 								; point to where the address should be loaded.
.135c	ec f2 0a	cpx $0af2			cpx 	paramCount 					; too many parameters in definition ?
.135f	f0 1e		beq $137f			beq 	_CPParamError
.1361	b1 02		lda ($02),y			lda 	(codePtr),y					; what follows
.1363	c9 c4		cmp #$c4			cmp 	#TKW_RPAREN 				; is it the right bracket
.1365	f0 0e		beq $1375			beq 	_CPParamComplete 			; done all the parameters
.1367	20 4d 11	jsr $114d			jsr 	LocaliseVariable 			; make following variable local, ref in tos,x
.136a	20 c4 10	jsr $10c4			jsr 	WriteValue 					; copy the evaluated parameter into there.
.136d	b1 02		lda ($02),y			lda 	(codePtr),y 				; followed by a comma ?
.136f	c8		iny				iny
.1370	c9 c6		cmp #$c6			cmp 	#TKW_COMMA
.1372	f0 e7		beq $135b			beq 	_CPLoadParameters
.1374	88		dey				dey 								; no, unconsume and check for )
.1375					_CPParamComplete:
.1375	20 d2 20	jsr $20d2			jsr 	CheckRightParen 			; check )
.1378	e8		inx				inx 								; check right number of parameters
.1379	ec f2 0a	cpx $0af2			cpx 	paramCount
.137c	d0 01		bne $137f			bne 	_CPParamError
.137e	60		rts				rts
.137f					_CPParamError:
.137f	a2 18		ldx #$18			ldx 	#ErrorID_Params
.1381	20 91 21	jsr $2191		jsr	errorHandler
.1384					ReturnProc:
.1384	20 bf 11	jsr $11bf			jsr 	RestoreLocals 				; get the locals back.
.1387	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.1389	a1 78		lda ($78,x)			lda 	(rsPointer,x)
.138b	c9 50		cmp #$50			cmp 	#markerPROC 						; does it match
.138d	f0 05		beq $1394			beq 	_isok
.138f	a2 12		ldx #$12			ldx 	#ErrorID_endProcErr
.1391	20 91 21	jsr $2191		jsr	errorHandler
.1394					_isok:
.1394	a9 01		lda #$01			lda 	#1
.1396	20 39 21	jsr $2139			jsr 	RSLoadPosition 				; reload the position from offset 1.
.1399	a9 04		lda #$04			lda 	#4 							; throw 4 bytes from stack.
.139b	20 1c 21	jsr $211c			jsr 	RSFree
.139e	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/rem.asm

.139f					Command_Rem:
.139f					Command_Rem2:
.139f	b1 02		lda ($02),y			lda 	(codePtr),y 				; what follows
.13a1	c9 85		cmp #$85			cmp 	#TOK_STR 					; if it is a string then skip it.
.13a3	d0 06		bne $13ab			bne 	_CRNotString
.13a5	c8		iny				iny
.13a6	98		tya				tya
.13a7	38		sec				sec
.13a8	71 02		adc ($02),y			adc 	(codePtr),y 				; get string size, add to Y, +1 for the length
.13aa	a8		tay				tay
.13ab					_CRNotString:
.13ab	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/repeat.asm

.2938					Command_Repeat:
.2938	a2 04		ldx #$04			ldx 	#4 							; allocate 4 bytes on stack for REPEAT
.293a	a9 52		lda #$52			lda 	#markerREPEAT 				; repeat marker allocate 4 bytes
.293c	20 fa 20	jsr $20fa			jsr 	RSClaim
.293f	a9 01		lda #$01			lda 	#1 							; save position at offset 1.
.2941	20 26 21	jsr $2126			jsr 	RSSavePosition
.2944	60		rts				rts
.2945					Command_Until:
.2945	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.2947	a1 78		lda ($78,x)			lda 	(rsPointer,x)
.2949	c9 52		cmp #$52			cmp 	#markerREPEAT 						; does it match
.294b	f0 05		beq $2952			beq 	_isok
.294d	a2 0f		ldx #$0f			ldx 	#ErrorID_untilErr
.294f	20 91 21	jsr $2191		jsr	errorHandler
.2952					_isok:
.2952	20 5e 1a	jsr $1a5e			jsr 	EvaluateRootInteger 		; at the bottom.
.2955	20 86 20	jsr $2086			jsr 	MInt32Zero					; check if TOS zero
.2958	d0 06		bne $2960			bne 	_CUExit
.295a	a9 01		lda #$01			lda 	#1
.295c	20 39 21	jsr $2139			jsr 	RSLoadPosition 				; reload the position from offset 1.
.295f	60		rts				rts
.2960					_CUExit:
.2960	a9 04		lda #$04			lda 	#4 							; throw 4 bytes from stack.
.2962	20 1c 21	jsr $211c			jsr 	RSFree
.2965	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/run.asm

.13ac					Command_Run:
.13ac	a2 ff		ldx #$ff			ldx 	#$FF
.13ae	9a		txs				txs
.13af	20 28 10	jsr $1028			jsr 	CommandClear 				; clear everything.
.13b2	20 06 14	jsr $1406			jsr 	ResetCodeAddress 			; back to the start.
.13b5	a0 03		ldy #$03			ldy 	#3
.13b7					CRNextInstruction:
.13b7	64 7b		stz $7b				stz 	softMemAlloc+1
.13b9	b1 02		lda ($02),y			lda 	(codePtr),y 				; get next token.
.13bb	10 1c		bpl $13d9			bpl 	_CRNotToken
.13bd	c9 c4		cmp #$c4			cmp 	#TOK_TOKENS 				; if in the tokens then do that token.
.13bf	b0 0c		bcs $13cd			bcs 	_CRExecute
.13c1	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST 				; unary is ignored.
.13c3	b0 4e		bcs $1413			bcs 	Unimplemented
.13c5	c9 99		cmp #$99			cmp 	#TOK_STRUCTST 				; execute structures.
.13c7	b0 04		bcs $13cd			bcs 	_CRExecute
.13c9	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; if one of the system tokens $80-$85 do that
.13cb	b0 16		bcs $13e3			bcs 	_CRCheckIndirect 			; if in that unused range check for ! or ?
.13cd					_CRExecute:
.13cd	c8		iny				iny 								; consume it.
.13ce	0a		asl a				asl 	a 							; double it, losing most significant bit.
.13cf	aa		tax				tax
.13d0	20 d6 13	jsr $13d6			jsr 	_CRRunRoutine 				; we want to do jsr (group0vectors,x)
.13d3	4c b7 13	jmp $13b7			jmp 	CRNextInstruction
.13d6					_CRRunRoutine:
.13d6	7c 1d 14	jmp ($141d,x)			jmp 	(Group0Vectors,x)
.13d9					_CRNotToken:
.13d9	c9 40		cmp #$40			cmp 	#$40 						; if 0-3F then it is a letter
.13db	b0 36		bcs $1413			bcs 	Unimplemented
.13dd					_CRDefaultLet:
.13dd	20 b1 10	jsr $10b1			jsr 	CommandLet 					; do the default, LET
.13e0	4c b7 13	jmp $13b7			jmp 	CRNextInstruction
.13e3					_CRCheckIndirect:
.13e3	c9 97		cmp #$97			cmp 	#TKW_PLING 					; !<term> =
.13e5	f0 f6		beq $13dd			beq 	_CRDefaultLet
.13e7	c9 98		cmp #$98			cmp 	#TKW_QMARK 					; ?<term> =
.13e9	f0 f2		beq $13dd			beq 	_CRDefaultLet
.13eb	d0 26		bne $1413			bne 	Unimplemented
.13ed					CommandShift1:
.13ed	b1 02		lda ($02),y			lda 	(codePtr),y 				; get shifted value
.13ef	10 22		bpl $1413			bpl 	Unimplemented 				; we have an error as this should not happen.
.13f1	0a		asl a				asl 	a 							; double into X
.13f2	aa		tax				tax
.13f3	c8		iny				iny 								; advance over it.
.13f4	20 fa 13	jsr $13fa			jsr 	_RunIt 						; we have no jsr (aaaa,X)
.13f7	4c b7 13	jmp $13b7			jmp 	CRNextInstruction
.13fa					_RunIt:
.13fa	7c c9 14	jmp ($14c9,x)			jmp 	(Group1Vectors-12,x) 		; and do the code.
.13fd					CommandShift2:
.13fd	a9 ff		lda #$ff			lda 	#$FF 						; $FF means command not unary function.
.13ff	20 b1 23	jsr $23b1		jsr	extensionHandler
.1402	4c b7 13	jmp $13b7			jmp 	CRNextInstruction
.1405					CommandColon:
.1405	60		rts				rts
.1406					ResetCodeAddress:
.1406	ad c8 0a	lda $0ac8			lda 	basePage 					; copy basePage to code Pointer
.1409	85 02		sta $02				sta 	codePtr
.140b	ad c9 0a	lda $0ac9			lda 	basePage+1
.140e	85 03		sta $03				sta 	codePtr+1
.1410	a0 03		ldy #$03			ldy 	#3 							; offset after offset link and line#
.1412	60		rts				rts
.1413					Unimplemented:
.1413	a2 01		ldx #$01			ldx 	#ErrorID_Missing
.1415	20 91 21	jsr $2191		jsr	errorHandler
.1418					TKErr01:
.1418					TKErr02:
.1418					TKErr03:
.1418					TKErr04:
.1418					TKErr05:
.1418					TKErr06:
.1418					TKErr07:
.1418					TKErr08:
.1418					TKErr09:
.1418					TKErr10:
.1418	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.141a	20 91 21	jsr $2191		jsr	errorHandler

;******  Processing file: main/commands/../../generated/tokenvectors0.inc

.141d					Group0Vectors:
>141d	c9 15					.word	AdvanceNextLine          ; $80 [[eol]]
>141f	ed 13					.word	CommandShift1            ; $81 [[sh1]]
>1421	fd 13					.word	CommandShift2            ; $82 [[sh2]]
>1423	18 14					.word	TKErr09                  ; $83 [[sh3]]
>1425	18 14					.word	TKErr10                  ; $84 [[fpc]]
>1427	18 14					.word	TKErr08                  ; $85 [[str]]
>1429	1c 17					.word	AndHandler               ; $86 and
>142b	09 17					.word	OrHandler                ; $87 or
>142d	f6 16					.word	XorHandler               ; $88 xor
>142f	3e 18					.word	CompareGreaterEq         ; $89 >=
>1431	48 18					.word	CompareLessEq            ; $8a <=
>1433	2a 18					.word	CompareGreater           ; $8b >
>1435	20 18					.word	CompareLess              ; $8c <
>1437	16 18					.word	CompareEquals            ; $8d =
>1439	34 18					.word	CompareNotEquals         ; $8e <>
>143b	87 16					.word	AddHandler               ; $8f +
>143d	aa 16					.word	SubHandler               ; $90 -
>143f	42 17					.word	ShrHandler               ; $91 >>
>1441	2f 17					.word	ShlHandler               ; $92 <<
>1443	bd 16					.word	MulHandler               ; $93 *
>1445	d0 16					.word	DivHandler               ; $94 /
>1447	e3 16					.word	ModHandler               ; $95 mod
>1449	7b 17					.word	PowerHandler             ; $96 ^
>144b	55 17					.word	WordRefHandler           ; $97 !
>144d	68 17					.word	ByteRefHandler           ; $98 ?
>144f	38 29					.word	Command_Repeat           ; $99 repeat
>1451	66 29					.word	Command_While            ; $9a while
>1453	29 28					.word	Command_FOR              ; $9b for
>1455	75 10					.word	CommandIf                ; $9c if
>1457	18 14					.word	TKErr04                  ; $9d defproc
>1459	45 29					.word	Command_Until            ; $9e until
>145b	89 29					.word	Command_Wend             ; $9f wend
>145d	8a 28					.word	Command_NEXT             ; $a0 next
>145f	18 14					.word	TKErr06                  ; $a1 then
>1461	b0 10					.word	Command_ENDIF            ; $a2 endif
>1463	84 13					.word	ReturnProc               ; $a3 endproc
>1465	17 1a					.word	UnaryParenthesis         ; $a4 (
>1467	6f 1b					.word	UnaryLen                 ; $a5 len(
>1469	b3 1b					.word	UnarySgn                 ; $a6 sgn(
>146b	9c 1b					.word	UnaryAbs                 ; $a7 abs(
>146d	0c 1c					.word	Unary_Random             ; $a8 random(
>146f	56 1c					.word	Unary_Page               ; $a9 page
>1471	5b 20					.word	MInt32True               ; $aa true
>1473	5f 20					.word	MInt32False              ; $ab false
>1475	21 1c					.word	Unary_Min                ; $ac min(
>1477	25 1c					.word	Unary_Max                ; $ad max(
>1479	0c 1d					.word	UnarySys                 ; $ae sys(
>147b	cf 1c					.word	UnaryTimer               ; $af timer(
>147d	ec 1a					.word	EventFunction            ; $b0 event(
>147f	f8 1c					.word	UnaryGet                 ; $b1 get(
>1481	e8 1c					.word	UnaryInkey               ; $b2 inkey(
>1483	a3 1c					.word	UnaryAlloc               ; $b3 alloc(
>1485	34 1d					.word	ExecChr                  ; $b4 chr$(
>1487	48 1d					.word	ExecLeft                 ; $b5 left$(
>1489	65 1d					.word	ExecMid                  ; $b6 mid$(
>148b	8d 1d					.word	ExecRight                ; $b7 right$(
>148d	58 18					.word	Event_Str                ; $b8 str$(
>148f	87 18					.word	UnaryVal                 ; $b9 val(
>1491	ca 1b					.word	UnaryPeek                ; $ba peek(
>1493	d0 1b					.word	UnaryDeek                ; $bb deek(
>1495	d6 1b					.word	UnaryLeek                ; $bc leek(
>1497	8d 1b					.word	UnaryAsc                 ; $bd asc(
>1499	81 1c					.word	UnaryIntToFloat          ; $be int(
>149b	94 1c					.word	UnaryFloatToInt          ; $bf float(
>149d	8a 18					.word	UnaryIsVal               ; $c0 isval(
>149f	64 1c					.word	UnaryReference           ; $c1 @
>14a1	7a 1c					.word	UnaryComplement          ; $c2 ~
>14a3	77 1c					.word	UnaryHexMarker           ; $c3 &
>14a5	18 14					.word	TKErr01                  ; $c4 )
>14a7	05 14					.word	CommandColon             ; $c5 :
>14a9	18 14					.word	TKErr02                  ; $c6 ,
>14ab	18 14					.word	TKErr03                  ; $c7 ;
>14ad	9f 13					.word	Command_Rem2             ; $c8 '
>14af	18 14					.word	TKErr07                  ; $c9 to
>14b1	18 14					.word	TKErr05                  ; $ca step
>14b3	17 13					.word	CallProc                 ; $cb proc
>14b5	2f 11					.word	CommandLocal             ; $cc local
>14b7	13 14					.word	Unimplemented            ; $cd dim
>14b9	9f 13					.word	Command_Rem              ; $ce rem
>14bb	b1 10					.word	CommandLet               ; $cf let
>14bd	13 14					.word	Unimplemented            ; $d0 input
>14bf	aa 10					.word	Command_ELSE             ; $d1 else
>14c1	3a 16					.word	Command_VDU              ; $d2 vdu
>14c3	7c 12					.word	Command_Print            ; $d3 print
>14c5	08 16					.word	CommandGOTO              ; $d4 goto
>14c7	dd 15					.word	CommandGOSUB             ; $d5 gosub
>14c9	f0 15					.word	CommandRETURN            ; $d6 return
>14cb	13 14					.word	Unimplemented            ; $d7 data
>14cd	1a 10					.word	Command_Assert           ; $d8 assert
>14cf	3f 12					.word	Command_Poke             ; $d9 poke
>14d1	43 12					.word	Command_Doke             ; $da doke
>14d3	47 12					.word	Command_Loke             ; $db loke

;******  Return to file: main/commands/run.asm


;******  Processing file: main/commands/../../generated/tokenvectors1.inc

.14d5					Group1Vectors:
>14d5	28 10					.word	CommandClear             ; $86 clear
>14d7	13 14					.word	Unimplemented            ; $87 load
>14d9	13 14					.word	Unimplemented            ; $88 save
>14db	13 14					.word	Unimplemented            ; $89 list
>14dd	31 12					.word	Command_New              ; $8a new
>14df	ac 13					.word	Command_Run              ; $8b run
>14e1	13 14					.word	Unimplemented            ; $8c read
>14e3	13 14					.word	Unimplemented            ; $8d restore
>14e5	c6 15					.word	CommandEnd               ; $8e end
>14e7	c1 15					.word	CommandStop              ; $8f stop

;******  Return to file: main/commands/run.asm


;******  Return to file: main/main.asm


;******  Processing file: main/commands/scanner.asm

.0af3					procList:
>0af3							.fill 	2		 					; terminated by name high.
.0af5					yInLine:
>0af5							.fill 	1
.14e9					FindProcedure:
.14e9	8c f5 0a	sty $0af5			sty 	yInLine
.14ec	20 a7 15	jsr $15a7			jsr 	CalculateProcedureHash		; calculate the hash of the procedure.
.14ef	85 06		sta $06				sta 	temp1
.14f1	ad f3 0a	lda $0af3			lda		procList 					; put procList address in temp2
.14f4	85 08		sta $08				sta 	temp2
.14f6	ad f4 0a	lda $0af4			lda 	procList+1
.14f9	85 09		sta $09				sta 	temp2+1
.14fb	a0 00		ldy #$00			ldy 	#0 							; position in this table.
.14fd					_FPLoop:
.14fd	b1 08		lda ($08),y			lda 	(temp2),y
.14ff	f0 4f		beq $1550			beq 	_FPError 					; if so, we don't know this procedure.
.1501	85 05		sta $05				sta 	temp0+1 					; copy MSB/LSB to temp0 as we go.
.1503	c8		iny				iny
.1504	b1 08		lda ($08),y			lda 	(temp2),y
.1506	85 04		sta $04				sta 	temp0
.1508	c8		iny				iny
.1509	b1 08		lda ($08),y			lda 	(temp2),y					; check the procedure hash.
.150b	c5 06		cmp $06				cmp 	temp1
.150d	d0 2b		bne $153a			bne 	_FPNext 					; hash is different, go to next.
.150f	38		sec				sec
.1510	ad f5 0a	lda $0af5			lda 	yInLine 					; position in line must be at least 4
.1513	e9 04		sbc #$04			sbc 	#4
.1515	18		clc				clc
.1516	65 02		adc $02				adc 	codePtr
.1518	85 0a		sta $0a				sta 	temp3
.151a	a5 03		lda $03				lda 	codePtr+1
.151c	69 00		adc #$00			adc 	#0
.151e	85 0b		sta $0b				sta 	temp3+1
.1520	98		tya				tya
.1521	48		pha				pha
.1522	a0 04		ldy #$04			ldy 	#4
.1524					_FPCName:
.1524	b1 0a		lda ($0a),y			lda 	(temp3),y 					; check the same
.1526	d1 04		cmp ($04),y			cmp 	(temp0),y
.1528	d0 0e		bne $1538			bne 	_FPpulYNext 				; if different go to next one.
.152a	c8		iny				iny
.152b	c9 3a		cmp #$3a			cmp 	#$3A
.152d	90 f5		bcc $1524			bcc 	_FPCName 					; compare the whole lot....
.152f	68		pla				pla 								; throw away the saved Y
.1530	98		tya				tya 								; length of name is Y-4
.1531	38		sec				sec
.1532	e9 04		sbc #$04			sbc 	#4
.1534	ac f5 0a	ldy $0af5			ldy 	yInLine  					; get the original Y back
.1537	60		rts				rts
.1538					_FPpulYNext:
.1538	68		pla				pla
.1539	a8		tay				tay
.153a					_FPNext:
.153a	c8		iny				iny 								; next procedure record.
.153b	10 c0		bpl $14fd			bpl 	_FPLoop 					; if done 128 already ... e.g. Y -ve
.153d	98		tya				tya 								; subtract 128 from Y
.153e	38		sec				sec
.153f	e9 80		sbc #$80			sbc 	#128
.1541	a8		tay				tay
.1542	18		clc				clc 								; add 128 to temp2, so we can have more than
.1543	a5 08		lda $08				lda 	temp2 						; 255/3 = 85 procedures
.1545	69 80		adc #$80			adc 	#128
.1547	85 08		sta $08				sta 	temp2
.1549	90 b2		bcc $14fd			bcc 	_FPLoop
.154b	e6 09		inc $09				inc 	temp2+1
.154d	4c fd 14	jmp $14fd			jmp 	_FPLoop
.1550					_FPError:
.1550	a2 17		ldx #$17			ldx 	#ErrorID_NoProc
.1552	20 91 21	jsr $2191		jsr	errorHandler
.1555					ScanProc:
.1555	98		tya				tya
.1556	48		pha				pha
.1557	a5 0f		lda $0f				lda 	lowMemory 					; copy the start of the procList, at low memory
.1559	8d f3 0a	sta $0af3			sta 	procList
.155c	a5 10		lda $10				lda 	lowMemory+1
.155e	8d f4 0a	sta $0af4			sta 	procList+1
.1561	20 06 14	jsr $1406			jsr 	ResetCodeAddress 			; back to the start.
.1564					_ScanLoop:
.1564	a0 00		ldy #$00			ldy 	#0 							; check reached program end
.1566	b1 02		lda ($02),y			lda 	(codePtr),y
.1568	f0 2a		beq $1594			beq 	_ScanExit
.156a	a0 03		ldy #$03			ldy 	#3							; get first token
.156c	b1 02		lda ($02),y			lda 	(codePtr),y
.156e	c9 9d		cmp #$9d			cmp 	#TKW_DEFPROC				; skip next if not DEFPROC
.1570	d0 12		bne $1584			bne 	_ScanNext
.1572	a5 03		lda $03				lda 	codePtr+1 					; write high and low
.1574	20 9c 15	jsr $159c			jsr 	_ScanWrite
.1577	a5 02		lda $02				lda 	codePtr
.1579	20 9c 15	jsr $159c			jsr 	_ScanWrite
.157c	a0 04		ldy #$04			ldy 	#4 							; start of name part
.157e	20 a7 15	jsr $15a7			jsr 	CalculateProcedureHash 		; calculate procedure hash
.1581	20 9c 15	jsr $159c			jsr 	_ScanWrite
.1584					_ScanNext:
.1584	18		clc				clc
.1585	a0 00		ldy #$00			ldy 	#0
.1587	b1 02		lda ($02),y			lda 	(codePtr),y
.1589	65 02		adc $02				adc 	codePtr
.158b	85 02		sta $02				sta 	codePtr
.158d	90 d5		bcc $1564			bcc 	_ScanLoop
.158f	e6 03		inc $03				inc 	codePtr+1
.1591	4c 64 15	jmp $1564			jmp 	_ScanLoop
.1594					_ScanExit:
.1594	a9 00		lda #$00			lda 	#0 							; write ending zero.
.1596	20 9c 15	jsr $159c			jsr 	_ScanWrite
.1599	68		pla				pla
.159a	a8		tay				tay
.159b	60		rts				rts
.159c					_ScanWrite:
.159c	a0 00		ldy #$00			ldy 	#0
.159e	91 0f		sta ($0f),y			sta 	(lowMemory),y
.15a0	e6 0f		inc $0f				inc 	lowMemory
.15a2	d0 02		bne $15a6			bne 	_SWNoCarry
.15a4	e6 10		inc $10				inc 	lowMemory+1
.15a6					_SWNoCarry:
.15a6	60		rts				rts
.15a7					CalculateProcedureHash:
.15a7	a9 00		lda #$00			lda 	#0 							; clear hash.
.15a9	85 04		sta $04				sta 	temp0
.15ab					_CPHLoop:
.15ab	18		clc				clc 								; add character and rotate and add carry back in
.15ac	b1 02		lda ($02),y			lda 	(codePtr),y
.15ae	65 04		adc $04				adc 	temp0
.15b0	6a		ror a				ror 	a
.15b1	69 0d		adc #$0d			adc 	#13 						; primes usually good for this sort of thing.
.15b3	85 04		sta $04				sta 	temp0 						; (down with this sort of thing)
.15b5	b1 02		lda ($02),y			lda 	(codePtr),y
.15b7	c8		iny				iny 								; advance incase we go round again.
.15b8	c9 3a		cmp #$3a			cmp 	#$3A
.15ba	90 ef		bcc $15ab			bcc 	_CPHLoop
.15bc	a5 04		lda $04				lda 	temp0
.15be	a9 aa		lda #$aa			lda 	#$AA
.15c0	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/stopend.asm

.15c1					CommandStop:
.15c1	a2 06		ldx #$06			ldx 	#ErrorID_Stop
.15c3	20 91 21	jsr $2191		jsr	errorHandler
.15c6					CommandEnd:
.15c6	4c ff ff	jmp $ffff			jmp 	$FFFF 						; fudge to crash out of emulator
.15c9					AdvanceNextLine:
.15c9	a0 00		ldy #$00			ldy 	#0 							; get offset
.15cb	b1 02		lda ($02),y			lda 	(codePtr),y
.15cd	18		clc				clc 								; add to codePtr
.15ce	65 02		adc $02				adc 	codePtr
.15d0	85 02		sta $02				sta 	codePtr
.15d2	90 02		bcc $15d6			bcc 	_ANLNoCarry
.15d4	e6 03		inc $03				inc 	codePtr+1
.15d6					_ANLNoCarry:
.15d6	b1 02		lda ($02),y			lda 	(codePtr),y 				; if end of program (or was just stand alone.
.15d8	f0 ec		beq $15c6			beq 	CommandEnd 					; execute END
.15da	a0 03		ldy #$03			ldy 	#3 							; start of tokens on line.
.15dc	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/transfer.asm

.15dd					CommandGOSUB:
.15dd	20 5e 1a	jsr $1a5e			jsr 	EvaluateRootInteger			; get GOSUB line on stack top.
.15e0	a2 04		ldx #$04			ldx 	#4 							; allocate 4 bytes on stack for GOSUB
.15e2	a9 47		lda #$47			lda 	#markerGOSUB  				; <marker> <return addr/offset>
.15e4	20 fa 20	jsr $20fa			jsr 	RSClaim
.15e7	a9 01		lda #$01			lda 	#1 							; save position at offset 1.
.15e9	20 26 21	jsr $2126			jsr 	RSSavePosition
.15ec	a2 00		ldx #$00			ldx 	#0 							; point back at GOSUB line
.15ee	f0 1b		beq $160b			beq 	GotoTOS 					; and do a GOTO there.
.15f0					CommandRETURN:
.15f0	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.15f2	a1 78		lda ($78,x)			lda 	(rsPointer,x)
.15f4	c9 47		cmp #$47			cmp 	#markerGOSUB 						; does it match
.15f6	f0 05		beq $15fd			beq 	_isok
.15f8	a2 0e		ldx #$0e			ldx 	#ErrorID_returnErr
.15fa	20 91 21	jsr $2191		jsr	errorHandler
.15fd					_isok:
.15fd	a9 01		lda #$01			lda 	#1
.15ff	20 39 21	jsr $2139			jsr 	RSLoadPosition 				; reload the position from offset 1.
.1602	a9 04		lda #$04			lda 	#4 							; throw 4 bytes from stack.
.1604	20 1c 21	jsr $211c			jsr 	RSFree
.1607	60		rts				rts
.1608					CommandGOTO:
.1608	20 5e 1a	jsr $1a5e			jsr 	EvaluateRootInteger 		; get GOTO line on stack top.
.160b					GotoTOS:
.160b	20 06 14	jsr $1406			jsr 	ResetCodeAddress 			; simple search.
.160e					_GotoSearch:
.160e	a0 00		ldy #$00			ldy 	#0 							; get offset
.1610	b1 02		lda ($02),y			lda 	(codePtr),y
.1612	f0 21		beq $1635			beq 	_GotoError 					; not found.
.1614	c8		iny				iny									; check LSB match
.1615	b1 02		lda ($02),y			lda 	(codePtr),y
.1617	d5 48		cmp $48,x			cmp 	esInt0,x
.1619	d0 07		bne $1622			bne 	_GotoNext
.161b	c8		iny				iny
.161c	b1 02		lda ($02),y			lda 	(codePtr),y
.161e	d5 50		cmp $50,x			cmp 	esInt1,x
.1620	f0 10		beq $1632			beq 	_GotoFound
.1622					_GotoNext:
.1622	a0 00		ldy #$00			ldy 	#0 							; go next line
.1624	b1 02		lda ($02),y			lda 	(codePtr),y
.1626	18		clc				clc
.1627	65 02		adc $02				adc 	codePtr
.1629	85 02		sta $02				sta 	codePtr
.162b	90 e1		bcc $160e			bcc 	_GotoSearch
.162d	e6 03		inc $03				inc 	codePtr+1
.162f	4c 0e 16	jmp $160e			jmp 	_GotoSearch
.1632					_GotoFound:
.1632	a0 03		ldy #$03			ldy 	#3 							; continue from that line
.1634	60		rts				rts
.1635					_GotoError:
.1635	a2 0c		ldx #$0c			ldx 	#ErrorID_LineNumber
.1637	20 91 21	jsr $2191		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/commands/vdu.asm

.163a					Command_VDU:
.163a	20 5e 1a	jsr $1a5e			jsr 	EvaluateRootInteger 			; get integer at root.
.163d	a5 48		lda $48				lda 	esInt0
.163f	a2 04		ldx #$04		ldx	#4
.1641	20 84 21	jsr $2184		jsr	deviceHandler
.1644					_CVNext:
.1644	b1 02		lda ($02),y			lda 	(codePtr),y 					; what follows ?
.1646	c8		iny				iny
.1647	c9 c6		cmp #$c6			cmp 	#TKW_COMMA 						; comma, do again
.1649	f0 ef		beq $163a			beq 	Command_VDU
.164b	c9 c7		cmp #$c7			cmp 	#TKW_SEMICOLON 					; semicolon, print MSB
.164d	d0 0a		bne $1659			bne 	_CVExit
.164f	a5 50		lda $50				lda 	esInt1
.1651	a2 04		ldx #$04		ldx	#4
.1653	20 84 21	jsr $2184		jsr	deviceHandler
.1656	4c 44 16	jmp $1644			jmp 	_CVNext
.1659	88		dey		_CVExit:dey
.165a	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/while.asm

.2966					Command_While:
.2966	a9 57		lda #$57			lda 	#markerWhile 				; gosub marker allocate 4 bytes.
.2968	a2 04		ldx #$04			ldx 	#4
.296a	20 fa 20	jsr $20fa			jsr 	RSClaim 					; create on stack.
.296d	88		dey				dey
.296e	a9 01		lda #$01			lda 	#1
.2970	20 26 21	jsr $2126			jsr 	RSSavePosition 				; save position before the WHILE keyword.
.2973	c8		iny				iny
.2974	20 60 1a	jsr $1a60			jsr 	EvaluateInteger				; get the conditional
.2977	20 86 20	jsr $2086			jsr 	MInt32Zero 	 				; if zero, skip forward.
.297a	f0 01		beq $297d			beq 	_CWFail
.297c	60		rts				rts
.297d					_CWFail:
.297d	a9 04		lda #$04			lda 	#4
.297f	20 1c 21	jsr $211c			jsr 	RSFree 						; close the just opened position.
.2982	a9 9f		lda #$9f			lda 	#TKW_WEND 					; scan forward past WEND.
.2984	aa		tax				tax
.2985	20 a1 29	jsr $29a1			jsr 	ScanForward
.2988	60		rts				rts
.2989					Command_Wend:
.2989	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.298b	a1 78		lda ($78,x)			lda 	(rsPointer,x)
.298d	c9 57		cmp #$57			cmp 	#markerWHILE 						; does it match
.298f	f0 05		beq $2996			beq 	_isok
.2991	a2 11		ldx #$11			ldx 	#ErrorID_wendErr
.2993	20 91 21	jsr $2191		jsr	errorHandler
.2996					_isok:
.2996	a9 01		lda #$01			lda 	#1
.2998	20 39 21	jsr $2139			jsr 	RSLoadPosition				; go back until true
.299b	a9 04		lda #$04			lda 	#4
.299d	20 1c 21	jsr $211c			jsr 	RSFree 						; close the loop
.29a0	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/binary.asm

.165b					BinaryProcess:
.165b	b5 40		lda $40,x			lda 	esType,x 					; or type bytes together and check bit 6.
.165d	15 41		ora $41,x			ora 	esType+1,x
.165f	0a		asl a				asl 	a
.1660	30 0e		bmi $1670			bmi 	_BPStringType 				; if one is set, then string type.
.1662	18		clc				clc 								; return CC for integer
.1663	29 02		and #$02			and 	#$02 						; $02 because of ASL A.
.1665	f0 08		beq $166f			beq 	_BPExit 					; if both integer then return with CC.
.1667	20 75 16	jsr $1675			jsr 	BPMakeBothFloat 			; make both float
.166a	a9 01		lda #$01			lda 	#$01 						; set result type to float
.166c	95 40		sta $40,x			sta 	esType,x
.166e	38		sec				sec 								; and return with carry set.
.166f					_BPExit:
.166f	60		rts				rts
.1670					_BPStringType:
.1670	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.1672	20 91 21	jsr $2191		jsr	errorHandler
.1675					BPMakeBothFloat:
.1675	e8		inx				inx
.1676	20 7a 16	jsr $167a			jsr 	BPMakeFloat 				; one is a float, so we do both as floats.
.1679	ca		dex				dex
.167a					BPMakeFloat:
.167a	b5 40		lda $40,x			lda 	esType,x 					; get type bit.
.167c	4a		lsr a				lsr 	a
.167d	b0 07		bcs $1686			bcs 	_BPIsFloat
.167f	8a		txa				txa
.1680	a2 1a		ldx #$1a		ldx	#26
.1682	20 42 24	jsr $2442		jsr	floatingpointHandler
.1685	aa		tax				tax
.1686					_BPIsFloat:
.1686	60		rts				rts
.1687					AddHandler:
.1687	20 d6 18	jsr $18d6			jsr 	DereferenceTwo 				; dereference top two on stack.
.168a	b5 40		lda $40,x			lda 	esType,x 					; check two strings.
.168c	35 41		and $41,x			and 	esType+1,x
.168e	29 40		and #$40			and 	#$40 						; if both have bit 6 set ...
.1690	d0 10		bne $16a2			bne 	_AHStringConcat				; concatenate strings.
.1692	20 5b 16	jsr $165b			jsr 	BinaryProcess 				; check to see if either is float
.1695	b0 03		bcs $169a			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.1697	4c 48 1f	jmp $1f48			jmp 	MInt32Add 							; else do it as integer.
.169a					_IsFPOperation:
.169a	8a		txa				txa 								; call the relevant fp routine
.169b	a2 02		ldx #$02		ldx	#2
.169d	20 42 24	jsr $2442		jsr	floatingpointHandler
.16a0	aa		tax				tax
.16a1	60		rts				rts
.16a2					_AHStringConcat:
.16a2	8a		txa				txa
.16a3	a2 04		ldx #$04		ldx	#4
.16a5	20 99 26	jsr $2699		jsr	stringHandler
.16a8	aa		tax				tax
.16a9	60		rts				rts
.16aa					SubHandler:
.16aa	20 d6 18	jsr $18d6			jsr 	DereferenceTwo
.16ad	20 5b 16	jsr $165b			jsr 	BinaryProcess 				; check to see if either is float
.16b0	b0 03		bcs $16b5			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.16b2	4c 62 1f	jmp $1f62			jmp 	MInt32Sub 							; else do it as integer.
.16b5					_IsFPOperation:
.16b5	8a		txa				txa 								; call the relevant fp routine
.16b6	a2 10		ldx #$10		ldx	#16
.16b8	20 42 24	jsr $2442		jsr	floatingpointHandler
.16bb	aa		tax				tax
.16bc	60		rts				rts
.16bd					MulHandler:
.16bd	20 d6 18	jsr $18d6			jsr 	DereferenceTwo
.16c0	20 5b 16	jsr $165b			jsr 	BinaryProcess 				; check to see if either is float
.16c3	b0 03		bcs $16c8			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.16c5	4c 7c 1f	jmp $1f7c			jmp 	MInt32Multiply 							; else do it as integer.
.16c8					_IsFPOperation:
.16c8	8a		txa				txa 								; call the relevant fp routine
.16c9	a2 0a		ldx #$0a		ldx	#10
.16cb	20 42 24	jsr $2442		jsr	floatingpointHandler
.16ce	aa		tax				tax
.16cf	60		rts				rts
.16d0					DivHandler:
.16d0	20 d6 18	jsr $18d6			jsr 	DereferenceTwo
.16d3	20 5b 16	jsr $165b			jsr 	BinaryProcess 				; check to see if either is float
.16d6	b0 03		bcs $16db			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.16d8	4c 40 1e	jmp $1e40			jmp 	MInt32SDivide 							; else do it as integer.
.16db					_IsFPOperation:
.16db	8a		txa				txa 								; call the relevant fp routine
.16dc	a2 06		ldx #$06		ldx	#6
.16de	20 42 24	jsr $2442		jsr	floatingpointHandler
.16e1	aa		tax				tax
.16e2	60		rts				rts
.16e3					ModHandler:
.16e3	20 d6 18	jsr $18d6			jsr 	DereferenceTwo
.16e6	20 5b 16	jsr $165b			jsr 	BinaryProcess 				; check to see if either is float
.16e9	b0 03		bcs $16ee			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.16eb	4c be 1e	jmp $1ebe			jmp 	MInt32Modulus 							; else do it as integer.
.16ee					_IsFPOperation:
.16ee	8a		txa				txa 								; call the relevant fp routine
.16ef	a2 08		ldx #$08		ldx	#8
.16f1	20 42 24	jsr $2442		jsr	floatingpointHandler
.16f4	aa		tax				tax
.16f5	60		rts				rts
.16f6					XorHandler:
.16f6	20 d6 18	jsr $18d6			jsr 	DereferenceTwo
.16f9	20 5b 16	jsr $165b			jsr 	BinaryProcess 				; check to see if either is float
.16fc	b0 03		bcs $1701			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.16fe	4c f2 1d	jmp $1df2			jmp 	MInt32Xor 							; else do it as integer.
.1701					_IsFPOperation:
.1701	8a		txa				txa 								; call the relevant fp routine
.1702	a2 08		ldx #$08		ldx	#8
.1704	20 42 24	jsr $2442		jsr	floatingpointHandler
.1707	aa		tax				tax
.1708	60		rts				rts
.1709					OrHandler:
.1709	20 d6 18	jsr $18d6			jsr 	DereferenceTwo
.170c	20 5b 16	jsr $165b			jsr 	BinaryProcess 				; check to see if either is float
.170f	b0 03		bcs $1714			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.1711	4c d9 1d	jmp $1dd9			jmp 	MInt32Or 							; else do it as integer.
.1714					_IsFPOperation:
.1714	8a		txa				txa 								; call the relevant fp routine
.1715	a2 08		ldx #$08		ldx	#8
.1717	20 42 24	jsr $2442		jsr	floatingpointHandler
.171a	aa		tax				tax
.171b	60		rts				rts
.171c					AndHandler:
.171c	20 d6 18	jsr $18d6			jsr 	DereferenceTwo
.171f	20 5b 16	jsr $165b			jsr 	BinaryProcess 				; check to see if either is float
.1722	b0 03		bcs $1727			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.1724	4c c0 1d	jmp $1dc0			jmp 	MInt32And 							; else do it as integer.
.1727					_IsFPOperation:
.1727	8a		txa				txa 								; call the relevant fp routine
.1728	a2 08		ldx #$08		ldx	#8
.172a	20 42 24	jsr $2442		jsr	floatingpointHandler
.172d	aa		tax				tax
.172e	60		rts				rts
.172f					ShlHandler:
.172f	20 d6 18	jsr $18d6			jsr 	DereferenceTwo
.1732	20 5b 16	jsr $165b			jsr 	BinaryProcess 				; check to see if either is float
.1735	b0 03		bcs $173a			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.1737	4c b0 17	jmp $17b0			jmp 	Mint32ShiftLeftX 							; else do it as integer.
.173a					_IsFPOperation:
.173a	8a		txa				txa 								; call the relevant fp routine
.173b	a2 08		ldx #$08		ldx	#8
.173d	20 42 24	jsr $2442		jsr	floatingpointHandler
.1740	aa		tax				tax
.1741	60		rts				rts
.1742					ShrHandler:
.1742	20 d6 18	jsr $18d6			jsr 	DereferenceTwo
.1745	20 5b 16	jsr $165b			jsr 	BinaryProcess 				; check to see if either is float
.1748	b0 03		bcs $174d			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.174a	4c b3 17	jmp $17b3			jmp 	MInt32ShiftRightX 							; else do it as integer.
.174d					_IsFPOperation:
.174d	8a		txa				txa 								; call the relevant fp routine
.174e	a2 08		ldx #$08		ldx	#8
.1750	20 42 24	jsr $2442		jsr	floatingpointHandler
.1753	aa		tax				tax
.1754	60		rts				rts
.1755					WordRefHandler:
.1755	20 d6 18	jsr $18d6			jsr 	DereferenceTwo
.1758	20 5b 16	jsr $165b			jsr 	BinaryProcess 				; check to see if either is float
.175b	b0 03		bcs $1760			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.175d	4c a2 17	jmp $17a2			jmp 	MInt32WordIndirect 							; else do it as integer.
.1760					_IsFPOperation:
.1760	8a		txa				txa 								; call the relevant fp routine
.1761	a2 08		ldx #$08		ldx	#8
.1763	20 42 24	jsr $2442		jsr	floatingpointHandler
.1766	aa		tax				tax
.1767	60		rts				rts
.1768					ByteRefHandler:
.1768	20 d6 18	jsr $18d6			jsr 	DereferenceTwo
.176b	20 5b 16	jsr $165b			jsr 	BinaryProcess 				; check to see if either is float
.176e	b0 03		bcs $1773			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.1770	4c a6 17	jmp $17a6			jmp 	MInt32ByteIndirect 							; else do it as integer.
.1773					_IsFPOperation:
.1773	8a		txa				txa 								; call the relevant fp routine
.1774	a2 08		ldx #$08		ldx	#8
.1776	20 42 24	jsr $2442		jsr	floatingpointHandler
.1779	aa		tax				tax
.177a	60		rts				rts
.177b					PowerHandler:
.177b	20 d6 18	jsr $18d6			jsr 	DereferenceTwo
.177e	20 5b 16	jsr $165b			jsr 	BinaryProcess 				; check to see if either is float
.1781	b0 03		bcs $1786			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.1783	4c 8e 17	jmp $178e			jmp 	PowerInteger 							; else do it as integer.
.1786					_IsFPOperation:
.1786	8a		txa				txa 								; call the relevant fp routine
.1787	a2 16		ldx #$16		ldx	#22
.1789	20 42 24	jsr $2442		jsr	floatingpointHandler
.178c	aa		tax				tax
.178d	60		rts				rts
.178e					PowerInteger:
.178e	20 75 16	jsr $1675			jsr 	BPMakeBothFloat				; make them float.
.1791	8a		txa				txa
.1792	a2 16		ldx #$16		ldx	#22
.1794	20 42 24	jsr $2442		jsr	floatingpointHandler
.1797	a2 12		ldx #$12		ldx	#18
.1799	20 42 24	jsr $2442		jsr	floatingpointHandler
.179c	aa		tax				tax
.179d	a9 00		lda #$00			lda 	#0 							; make type integer
.179f	95 40		sta $40,x			sta 	esType,x
.17a1	60		rts				rts
.17a2					Mint32WordIndirect:
.17a2	a9 80		lda #$80			lda 	#$80 				 		; word reference type
.17a4	d0 02		bne $17a8			bne 	Min32Indirect
.17a6					Mint32ByteIndirect:
.17a6	a9 a0		lda #$a0			lda 	#$A0 						; byte reference type
.17a8					Min32Indirect:
.17a8	48		pha				pha 								; save the indirection
.17a9	20 48 1f	jsr $1f48			jsr 	MInt32Add 					; add a!b a?b
.17ac	68		pla				pla 								; and set the type to reference.
.17ad	95 40		sta $40,x			sta 	esType,x
.17af	60		rts				rts
.17b0					Mint32ShiftLeftX:
.17b0	18		clc				clc
.17b1	90 01		bcc $17b4			bcc 	Mint32Shift
.17b3					Mint32ShiftRightX:
.17b3	38		sec				sec
.17b4					Mint32Shift:
.17b4	08		php				php 								; save carry flag on stack.
.17b5	b5 51		lda $51,x			lda 	esInt1+1,x 					; if shift >= 32 then it is zero.
.17b7	15 59		ora $59,x			ora 	esInt2+1,x
.17b9	15 61		ora $61,x			ora 	esInt3+1,x
.17bb	d0 1e		bne $17db			bne 	_MShiftZero
.17bd	b5 49		lda $49,x			lda 	esInt0+1,x
.17bf	c9 20		cmp #$20			cmp 	#32
.17c1	b0 18		bcs $17db			bcs 	_MShiftZero
.17c3					_MShiftLoop:
.17c3	b5 49		lda $49,x			lda 	esInt0+1,x 					; check count is zero
.17c5	f0 12		beq $17d9			beq 	_MShiftExit
.17c7	d6 49		dec $49,x			dec 	esInt0+1,x
.17c9	28		plp				plp 								; restore and save carry
.17ca	08		php				php
.17cb	90 06		bcc $17d3			bcc 	_MShiftLeft
.17cd	20 7d 20	jsr $207d			jsr 	Mint32ShiftRight
.17d0	4c c3 17	jmp $17c3			jmp 	_MShiftLoop
.17d3					_MShiftLeft:
.17d3	20 74 20	jsr $2074			jsr 	Mint32ShiftLeft
.17d6	4c c3 17	jmp $17c3			jmp 	_MShiftLoop
.17d9					_MShiftExit:
.17d9	28		plp				plp	 								; throw saved carry and exit
.17da	60		rts				rts
.17db					_MShiftZero:
.17db	4c 5f 20	jmp $205f			jmp 	MInt32False 				; return 0.

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/compare.asm

.17de					PerformComparison:
.17de	20 d6 18	jsr $18d6			jsr 	DereferenceTwo 				; make both values.
.17e1	b5 40		lda $40,x			lda 	esType,x 					; check for two strings.
.17e3	35 41		and $41,x			and 	esType+1,x
.17e5	0a		asl a				asl 	a
.17e6	30 1d		bmi $1805			bmi 	_PCIsString
.17e8	b5 40		lda $40,x			lda 	esType,x 					; check either is floating point.
.17ea	15 41		ora $41,x			ora 	esType+1,x
.17ec	0a		asl a				asl 	a 							; shift bit 6 (string) to bit 7
.17ed	30 22		bmi $1811			bmi 	_PCError
.17ef	29 02		and #$02			and 	#$02 						; because of ASL, check type in bit 0
.17f1	f0 0f		beq $1802			beq 	_PCIsInteger 				; if not two integers
.17f3	20 75 16	jsr $1675			jsr 	BPMakeBothFloat 			; make both float
.17f6	8a		txa				txa
.17f7	a2 04		ldx #$04		ldx	#4
.17f9	20 42 24	jsr $2442		jsr	floatingpointHandler
.17fc	86 0c		stx $0c				stx 	tempShort 					; save result
.17fe	aa		tax				tax
.17ff	a5 0c		lda $0c				lda 	tempShort
.1801	60		rts				rts
.1802					_PCIsInteger:
.1802	4c 0b 1e	jmp $1e0b			jmp 	MInt32Compare
.1805					_PCIsString:
.1805	8a		txa				txa 								; A has SP
.1806	a2 06		ldx #$06		ldx	#6
.1808	20 99 26	jsr $2699		jsr	stringHandler
.180b	86 0c		stx $0c				stx 	tempShort 					; save result
.180d	aa		tax				tax 								; put SP back in X and get result.
.180e	a5 0c		lda $0c				lda 	tempShort
.1810	60		rts				rts
.1811					_PCError:
.1811	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.1813	20 91 21	jsr $2191		jsr	errorHandler
.1816					CompareEquals:
.1816	20 de 17	jsr $17de			jsr 	PerformComparison
.1819	c9 00		cmp #$00			cmp 	#$00
.181b	f0 35		beq $1852			beq  	CompareTrue
.181d	4c 55 18	jmp $1855			jmp 	CompareFalse
.1820					CompareLess:
.1820	20 de 17	jsr $17de			jsr 	PerformComparison
.1823	c9 ff		cmp #$ff			cmp 	#$FF
.1825	f0 2b		beq $1852			beq  	CompareTrue
.1827	4c 55 18	jmp $1855			jmp 	CompareFalse
.182a					CompareGreater:
.182a	20 de 17	jsr $17de			jsr 	PerformComparison
.182d	c9 01		cmp #$01			cmp 	#$01
.182f	f0 21		beq $1852			beq  	CompareTrue
.1831	4c 55 18	jmp $1855			jmp 	CompareFalse
.1834					CompareNotEquals:
.1834	20 de 17	jsr $17de			jsr 	PerformComparison
.1837	c9 00		cmp #$00			cmp 	#$00
.1839	d0 17		bne $1852			bne  	CompareTrue
.183b	4c 55 18	jmp $1855			jmp 	CompareFalse
.183e					CompareGreaterEq:
.183e	20 de 17	jsr $17de			jsr 	PerformComparison
.1841	c9 ff		cmp #$ff			cmp 	#$FF
.1843	d0 0d		bne $1852			bne  	CompareTrue
.1845	4c 55 18	jmp $1855			jmp 	CompareFalse
.1848					CompareLessEq:
.1848	20 de 17	jsr $17de			jsr 	PerformComparison
.184b	c9 01		cmp #$01			cmp 	#$01
.184d	d0 03		bne $1852			bne  	CompareTrue
.184f	4c 55 18	jmp $1855			jmp 	CompareFalse
.1852					CompareTrue:
.1852	4c 5b 20	jmp $205b			jmp 	MInt32True
.1855					CompareFalse:
.1855	4c 5f 20	jmp $205f			jmp 	MInt32False

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/convert.asm

.1858					Event_Str:
.1858	20 4a 1a	jsr $1a4a			jsr 	EvaluateNumeric 			; get a number.
.185b	b5 40		lda $40,x			lda 	esType,x 					; is it floating point
.185d	d0 13		bne $1872			bne 	_ESFloat
.185f	20 b5 18	jsr $18b5			jsr 	ConvertGetBase
.1862	a9 cd		lda #$cd			lda 	#(convertBuffer) & $FF
.1864	85 04		sta $04				sta 	temp0
.1866	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.1868	85 05		sta $05				sta 	1+(temp0)
.186a	b5 49		lda $49,x			lda 	esInt0+1,x 					; get the base
.186c	20 b5 1f	jsr $1fb5			jsr 	MInt32ToString 				; convert to string.
.186f	4c 7f 18	jmp $187f			jmp 	_ESCloneExit 				; clone and exit.
.1872					_ESFloat:
.1872	20 d2 20	jsr $20d2			jsr 	CheckRightParen 			; check closing )
.1875	20 26 11	jsr $1126			jsr 	TOSToTemp0 					; string address in temp0, goes here.
.1878	8a		txa				txa
.1879	a2 14		ldx #$14		ldx	#20
.187b	20 42 24	jsr $2442		jsr	floatingpointHandler
.187e	aa		tax				tax
.187f					_ESCloneExit:
.187f	8a		txa				txa
.1880	a2 02		ldx #$02		ldx	#2
.1882	20 99 26	jsr $2699		jsr	stringHandler
.1885	aa		tax				tax
.1886	60		rts				rts
.1887					UnaryVal:
.1887	38		sec				sec
.1888	b0 01		bcs $188b			bcs 	ValueMain
.188a					UnaryIsVal:
.188a	18		clc				clc
.188b					ValueMain:
.188b	08		php				php 								; save results (CS is value, CC is validation)
.188c	20 55 1a	jsr $1a55			jsr 	EvaluateString
.188f	20 b5 18	jsr $18b5			jsr 	ConvertGetBase 				; get base, if any.
.1892	98		tya				tya
.1893	48		pha				pha
.1894	20 26 11	jsr $1126			jsr 	TOSToTemp0 					; string address in temp0, goes here.
.1897	b5 49		lda $49,x			lda 	esInt0+1,x 					; get the base
.1899	29 7f		and #$7f			and 	#$7F 						; ignore the sign bit.
.189b	20 d2 1e	jsr $1ed2			jsr 	MInt32FromString 			; convert it back from a string.
.189e	b0 0c		bcs $18ac			bcs 	_VMSuccess 					; successfully converted.
.18a0	b5 49		lda $49,x			lda 	esInt0+1,x 					; is base the default
.18a2	c9 8a		cmp #$8a			cmp 	#$80+10 					; if no, then it is integer only.
.18a4	f0 00		beq $18a6			beq 	_VMFailed 	 				; so we failed.
.18a6					_VMFailed:
.18a6	68		pla				pla
.18a7	a8		tay				tay
.18a8	28		plp				plp
.18a9	4c 5f 20	jmp $205f			jmp 	MInt32False 				; return 0 whatever.
.18ac					_VMSuccess:
.18ac	68		pla				pla
.18ad	a8		tay				tay
.18ae	28		plp				plp 								; if CS the it was val() so we want the value.
.18af	b0 03		bcs $18b4			bcs 	_VMExit
.18b1	4c 5b 20	jmp $205b			jmp 	MInt32True 					; otherwise return true as successful.
.18b4					_VMExit:
.18b4	60		rts				rts
.18b5					ConvertGetBase:
.18b5	a9 8a		lda #$8a			lda 	#10+$80 					; default base 10 signed.
.18b7	95 49		sta $49,x			sta 	esInt0+1,x
.18b9	b1 02		lda ($02),y			lda 	(codePtr),y
.18bb	c9 c6		cmp #$c6			cmp 	#TKW_COMMA
.18bd	d0 0e		bne $18cd			bne 	_CGBDone
.18bf	e8		inx				inx 								; next level
.18c0	c8		iny				iny 								; skip comma.
.18c1	20 68 1a	jsr $1a68			jsr 	EvaluateSmallInteger		; evaluate the base.
.18c4	ca		dex				dex
.18c5	c9 02		cmp #$02			cmp 	#2
.18c7	90 08		bcc $18d1			bcc 	_CGBValue
.18c9	c9 11		cmp #$11			cmp 	#17
.18cb	b0 04		bcs $18d1			bcs 	_CGBValue
.18cd					_CGBDone:
.18cd	20 d2 20	jsr $20d2			jsr 	CheckRightParen
.18d0	60		rts				rts
.18d1					_CGBValue:
.18d1	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.18d3	20 91 21	jsr $2191		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/dereference.asm

.18d6					DereferenceTwo:
.18d6	e8		inx				inx
.18d7	20 db 18	jsr $18db			jsr 	DereferenceOne
.18da	ca		dex				dex
.18db					DereferenceOne:
.18db	b5 40		lda $40,x			lda 	esType,x
.18dd	10 3d		bpl $191c			bpl 	_DRNotReference 			; is it a reference ?
.18df	4a		lsr a				lsr 	a 							; do float dereference if bit 0 set.
.18e0	b0 3b		bcs $191d			bcs 	_DRFloatDeReference
.18e2	98		tya				tya
.18e3	48		pha				pha
.18e4	b5 48		lda $48,x			lda 	esInt0,x 					; copy address to temp0
.18e6	85 04		sta $04				sta 	temp0
.18e8	b5 50		lda $50,x			lda 	esInt1,x
.18ea	85 05		sta $05				sta 	temp0+1
.18ec	a9 00		lda #$00			lda 	#0 							; clear esInt1..3
.18ee	95 50		sta $50,x			sta 	esInt1,x
.18f0	95 58		sta $58,x			sta 	esInt2,x
.18f2	95 60		sta $60,x			sta 	esInt3,x
.18f4	b5 40		lda $40,x			lda 	esType,x 					; get the type byte.
.18f6	29 60		and #$60			and 	#$60 						; get string flag ($40) and byte flag ($20)
.18f8	0a		asl a				asl 	a 							; now string ($80) byte ($40)
.18f9	30 0d		bmi $1908			bmi 	_DeRefString 				; string, 2 bytes only
.18fb	d0 11		bne $190e			bne 	_DeRefByte 					; byte 1 byte only
.18fd					_DeRefLong:
.18fd	a0 03		ldy #$03			ldy 	#3
.18ff	b1 04		lda ($04),y			lda 	(temp0),y
.1901	95 60		sta $60,x			sta 	esInt3,x
.1903	88		dey				dey
.1904	b1 04		lda ($04),y			lda 	(temp0),y
.1906	95 58		sta $58,x			sta 	esInt2,x
.1908					_DeRefString:
.1908	a0 01		ldy #$01			ldy 	#1
.190a	b1 04		lda ($04),y			lda 	(temp0),y
.190c	95 50		sta $50,x			sta 	esInt1,x
.190e					_DeRefByte:
.190e	a0 00		ldy #$00			ldy 	#0
.1910	b1 04		lda ($04),y			lda 	(temp0),y
.1912	95 48		sta $48,x			sta 	esInt0,x
.1914	b5 40		lda $40,x			lda 	esType,x 					; clear byte and deref bits.
.1916	29 40		and #$40			and 	#$40
.1918	95 40		sta $40,x			sta 	esType,x
.191a	68		pla				pla
.191b	a8		tay				tay
.191c					_DRNotReference
.191c	60		rts				rts
.191d					_DRFloatDereference:
.191d	20 26 11	jsr $1126			jsr 	TOSToTemp0 					; address to deref in temp0
.1920	8a		txa				txa
.1921	a2 1c		ldx #$1c		ldx	#28
.1923	20 42 24	jsr $2442		jsr	floatingpointHandler
.1926	aa		tax				tax
.1927	a9 01		lda #$01			lda 	#$01 						; type to FP (float)
.1929	95 40		sta $40,x			sta 	esType,x
.192b	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/evaluate.asm

.192c					EvaluateLevel:
.192c	48		pha				pha 								; save precedence level.
.192d	a9 00		lda #$00			lda 	#0 							; zero the current stack level.
.192f	95 48		sta $48,x			sta 	esInt0,x
.1931	95 50		sta $50,x			sta 	esInt1,x
.1933	95 58		sta $58,x			sta 	esInt2,x
.1935	95 60		sta $60,x			sta 	esInt3,x
.1937	95 40		sta $40,x			sta 	esType,x 					; zero the type (integer value)
.1939	b1 02		lda ($02),y			lda 	(codePtr),y	 				; look at first token/character
.193b	30 21		bmi $195e			bmi 	_ELIsToken 					; if -ve could be string, float, or unary function.
.193d	0a		asl a				asl 	a 							; if 00-3F then will now be PL and it's a variable.
.193e	30 0a		bmi $194a			bmi 	_ELIsConstant 				; 40-7F will be -ve and that's an integer constant.
.1940	8a		txa				txa 								; stack level in X
.1941	a2 00		ldx #$00		ldx	#0
.1943	20 22 28	jsr $2822		jsr	variableHandler
.1946	aa		tax				tax
.1947	4c 87 19	jmp $1987			jmp		_ELHasTerm
.194a					_ELIsConstant:
.194a	4a		lsr a				lsr 	a 							; get the value back
.194b	29 3f		and #$3f			and 	#$3F 						; force into range 0-63
.194d	95 48		sta $48,x			sta 	esInt0,x 					; and put in LSB.
.194f					_ELCheckNext:
.194f	c8		iny				iny 								; look at next
.1950	b1 02		lda ($02),y			lda 	(codePtr),y
.1952	49 40		eor #$40			eor 	#$40 						; shift around so 40-7F => 00-3F
.1954	c9 40		cmp #$40			cmp 	#$40 						; out of range ?
.1956	b0 2f		bcs $1987			bcs 	_ELHasTerm 					; done getting the constant.
.1958	20 a0 1a	jsr $1aa0			jsr 	ELShiftByteIn 				; shift byte into position.
.195b	4c 4f 19	jmp $194f			jmp 	_ELCheckNext
.195e					_ELIsToken:
.195e	c9 85		cmp #$85			cmp 	#TOK_STR 					; handle strings.
.1960	f0 0f		beq $1971			beq 	_ELIsString
.1962	c9 84		cmp #$84			cmp 	#TOK_FPC 					; if no, then check unary.
.1964	d0 5f		bne $19c5			bne 	_ELCheckUnary
.1966	8a		txa				txa 								; put X into A
.1967	c8		iny				iny 								; skip over the float marker
.1968	a2 18		ldx #$18		ldx	#24
.196a	20 42 24	jsr $2442		jsr	floatingpointHandler
.196d	aa		tax				tax 								; restore X
.196e	4c 87 19	jmp $1987			jmp 	_ELHasTerm
.1971					_ELIsString:
.1971	98		tya				tya 								; address of string is codePtr+y+1
.1972	38		sec				sec
.1973	65 02		adc $02				adc 	codePtr
.1975	95 48		sta $48,x			sta 	esInt0,x
.1977	a5 03		lda $03				lda 	codePtr+1
.1979	69 00		adc #$00			adc 	#0
.197b	95 50		sta $50,x			sta 	esInt1,x
.197d	a9 40		lda #$40			lda 	#$40 						; set type to string value
.197f	95 40		sta $40,x			sta 	esType,x
.1981	c8		iny				iny 								; skip over string.
.1982	98		tya				tya
.1983	38		sec				sec									; +1 for the length itself.
.1984	71 02		adc ($02),y			adc 	(codePtr),y
.1986	a8		tay				tay 								; and fall through to term loop code.
.1987					_ELHasTerm:
.1987	b1 02		lda ($02),y			lda 	(codePtr),y
.1989	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; check in the correct range for binary tokens.
.198b	90 04		bcc $1991			bcc 	_ELPopExit
.198d	c9 99		cmp #$99			cmp 	#TOK_STRUCTST
.198f	90 02		bcc $1993			bcc 	_ELHasBinaryTerm
.1991					_ELPopExit:
.1991	68		pla				pla
.1992					_ELExit:
.1992	60		rts				rts
.1993					_ELHasBinaryTerm:
.1993	84 0c		sty $0c				sty 	tempShort 					; save position
.1995	a8		tay				tay 								; use token as an index and get the precedence.
.1996	b9 48 1a	lda $1a48,y			lda 	ELBinaryOperatorInfo-TOK_BINARYST,y
.1999	a4 0c		ldy $0c				ldy 	tempShort 					; restore Y
.199b	85 0c		sta $0c				sta 	tempShort 					; save precedence in memory.
.199d	68		pla				pla 								; restore current level.
.199e	c5 0c		cmp $0c				cmp 	tempShort 					; if current >= operator then exit
.19a0	b0 f0		bcs $1992			bcs 	_ELExit
.19a2	48		pha				pha 								; save current level back on the stack.
.19a3	b1 02		lda ($02),y			lda 	(codePtr),y 				; save the binary operator on the stack and skip it.
.19a5	48		pha				pha
.19a6	c8		iny				iny
.19a7	e8		inx				inx 								; calculate the RHS at the operator precedence.
.19a8	a5 0c		lda $0c				lda 	tempShort
.19aa	20 2c 19	jsr $192c			jsr 	EvaluateLevel
.19ad	ca		dex				dex
.19ae	68		pla				pla 								; get the operator back out.
.19af					_ELExecuteA:
.19af	86 0c		stx $0c				stx 	tempShort 					; upload the vectors. Would be nice to use jmp (aaaa,x)
.19b1	0a		asl a				asl 	a 							; but not practical. May use push/rts later.
.19b2	aa		tax				tax
.19b3	bd 1d 14	lda $141d,x			lda 	Group0Vectors,x
.19b6	85 04		sta $04				sta 	temp0
.19b8	bd 1e 14	lda $141e,x			lda 	Group0Vectors+1,x
.19bb	85 05		sta $05				sta 	temp0+1
.19bd	a6 0c		ldx $0c				ldx 	tempShort
.19bf	20 0c 1a	jsr $1a0c			jsr 	_ELCallTemp0
.19c2	4c 87 19	jmp $1987			jmp 	_ELHasTerm 					; and loop back round.
.19c5					_ELCheckUnary:
.19c5	c8		iny				iny 								; skip over token.
.19c6	c9 90		cmp #$90			cmp 	#TKW_MINUS 					; is it - term
.19c8	f0 19		beq $19e3			beq 	_ELMinus
.19ca	c9 97		cmp #$97			cmp 	#TKW_PLING 					; is it ! or ? term
.19cc	f0 2c		beq $19fa			beq 	_ELIndirect
.19ce	c9 98		cmp #$98			cmp 	#TKW_QMARK
.19d0	f0 28		beq $19fa			beq 	_ELIndirect
.19d2	c9 83		cmp #$83			cmp 	#TOK_SHIFT3 				; is it the unary extension.
.19d4	f0 39		beq $1a0f			beq 	_ELExtension
.19d6	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST 				; must be TOK_UNARYST ... TOK_TOKENS
.19d8	90 04		bcc $19de			bcc 	_ELUSyntax
.19da	c9 c4		cmp #$c4			cmp 	#TOK_TOKENS
.19dc	90 d1		bcc $19af			bcc 	_ELExecuteA 				; if so do that token.
.19de					_ELUSyntax:
.19de	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.19e0	20 91 21	jsr $2191		jsr	errorHandler
.19e3					_ELMinus:
.19e3	20 29 1a	jsr $1a29			jsr 	EvaluateNumericTerm 		; get a number to negate.
.19e6	b5 40		lda $40,x			lda 	esType,x 					; is it integer
.19e8	f0 0a		beq $19f4			beq 	_ELMinusInteger
.19ea	8a		txa				txa
.19eb	a2 0c		ldx #$0c		ldx	#12
.19ed	20 42 24	jsr $2442		jsr	floatingpointHandler
.19f0	aa		tax				tax
.19f1	4c 87 19	jmp $1987			jmp 	_ELHasTerm
.19f4					_ELMinusInteger:
.19f4	20 19 20	jsr $2019			jsr 	MInt32Negate 				; do int negate
.19f7	4c 87 19	jmp $1987			jmp 	_ELHasTerm
.19fa					_ELIndirect:
.19fa	48		pha				pha 								; save what we want (TKW_QMARK TWK_PLING)
.19fb	20 32 1a	jsr $1a32			jsr 	EvaluateIntegerTerm 		; integer address
.19fe	68		pla				pla
.19ff	49 97		eor #$97			eor 	#TKW_PLING 					; now $00 if !
.1a01	f0 02		beq $1a05			beq 	_ELHaveModifier
.1a03	a9 20		lda #$20			lda 	#$20 						; now $00 if !, $20 if ?
.1a05					_ELHaveModifier:
.1a05	09 80		ora #$80			ora 	#$80						; make it the appropriate reference.
.1a07	95 40		sta $40,x			sta 	esType,x
.1a09	4c 87 19	jmp $1987			jmp 	_ELHasTerm
.1a0c					_ELCallTemp0:
.1a0c	6c 04 00	jmp ($0004)			jmp 	(temp0)
.1a0f					_ELExtension:
.1a0f	8a		txa				txa 								; stack pos in A
.1a10	20 b1 23	jsr $23b1		jsr	extensionHandler
.1a13	aa		tax				tax 								; restore stack
.1a14	4c 87 19	jmp $1987			jmp 	_ELHasTerm
.1a17					UnaryParenthesis:
.1a17	a9 00		lda #$00			lda 	#0 							; ( is a unary function ....
.1a19	20 2c 19	jsr $192c			jsr 	EvaluateLevel
.1a1c	20 d2 20	jsr $20d2			jsr 	CheckRightParen 			; check for )
.1a1f	60		rts				rts
.1a20					EvaluateTerm:
.1a20	a9 0f		lda #$0f			lda 	#15
.1a22	20 2c 19	jsr $192c			jsr 	EvaluateLevel
.1a25	20 db 18	jsr $18db			jsr 	DereferenceOne
.1a28	60		rts				rts
.1a29					EvaluateNumericTerm:
.1a29	20 20 1a	jsr $1a20			jsr 	EvaluateTerm
.1a2c	b5 40		lda $40,x			lda 	esType,x
.1a2e	0a		asl a				asl 	a 							; see if it's a string.
.1a2f	30 09		bmi $1a3a			bmi 	ENTType
.1a31	60		rts				rts
.1a32					EvaluateIntegerTerm:
.1a32	20 20 1a	jsr $1a20			jsr 	EvaluateTerm
.1a35	b5 40		lda $40,x			lda 	esType,x
.1a37	d0 01		bne $1a3a			bne 	ENTType
.1a39	60		rts				rts
.1a3a					ENTType:
.1a3a	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.1a3c	20 91 21	jsr $2191		jsr	errorHandler
.1a3f					EvaluateRoot:
.1a3f	a2 00		ldx #$00			ldx 	#0
.1a41					Evaluate:
.1a41	a9 00		lda #$00			lda 	#0
.1a43	20 2c 19	jsr $192c			jsr 	EvaluateLevel
.1a46	20 db 18	jsr $18db			jsr 	DereferenceOne
.1a49	60		rts				rts
.1a4a					EvaluateNumeric:
.1a4a	20 41 1a	jsr $1a41			jsr 	Evaluate
.1a4d	b5 40		lda $40,x			lda 	esType,x
.1a4f	0a		asl a				asl 	a 							; see if it's a string.
.1a50	30 e8		bmi $1a3a			bmi 	ENTType
.1a52	4a		lsr a				lsr 	a 							; shift float flag into carry.
.1a53	4a		lsr a				lsr 	a
.1a54	60		rts				rts
.1a55					EvaluateString:
.1a55	20 41 1a	jsr $1a41			jsr 	Evaluate
.1a58	b5 40		lda $40,x			lda 	esType,x
.1a5a	0a		asl a				asl 	a 							; see if it's a string.
.1a5b	10 dd		bpl $1a3a			bpl 	ENTType
.1a5d	60		rts				rts
.1a5e					EvaluateRootInteger:
.1a5e	a2 00		ldx #$00			ldx 	#0
.1a60					EvaluateInteger:
.1a60	20 41 1a	jsr $1a41			jsr 	Evaluate
.1a63	b5 40		lda $40,x			lda 	esType,x
.1a65	d0 d3		bne $1a3a			bne 	ENTType
.1a67	60		rts				rts
.1a68					EvaluateSmallInteger:
.1a68	20 60 1a	jsr $1a60			jsr 	EvaluateInteger
.1a6b	b5 50		lda $50,x			lda 	esInt1,x
.1a6d	15 58		ora $58,x			ora 	esInt2,x
.1a6f	15 60		ora $60,x			ora 	esInt3,x
.1a71	d0 03		bne $1a76			bne 	_ESIValue
.1a73	b5 48		lda $48,x			lda 	esInt0,x
.1a75	60		rts				rts
.1a76					_ESIValue:
.1a76	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.1a78	20 91 21	jsr $2191		jsr	errorHandler
.1a7b					LinkEvaluate:
.1a7b	aa		tax				tax
.1a7c	20 41 1a	jsr $1a41			jsr 	Evaluate
.1a7f	8a		txa				txa
.1a80	60		rts				rts
.1a81					LinkEvaluateInteger:
.1a81	aa		tax				tax
.1a82	20 60 1a	jsr $1a60			jsr 	EvaluateInteger
.1a85	8a		txa				txa
.1a86	60		rts				rts
.1a87					LinkEvaluateSmallInt:
.1a87	aa		tax				tax
.1a88	20 68 1a	jsr $1a68			jsr 	EvaluateSmallInteger
.1a8b	8a		txa				txa
.1a8c	60		rts				rts
.1a8d					EvaluateReference:
.1a8d	ad df 1a	lda $1adf			lda 	ELBinaryOperatorInfo+TKW_PLING-TOK_BINARYST
.1a90	38		sec				sec 								; sub 1 to allow a!x b?x to work.
.1a91	e9 01		sbc #$01			sbc 	#1
.1a93	20 2c 19	jsr $192c			jsr 	EvaluateLevel
.1a96	b5 40		lda $40,x			lda 	esType,x
.1a98	10 01		bpl $1a9b			bpl 	_ERFail
.1a9a	60		rts				rts
.1a9b					_ERFail:
.1a9b	a2 0b		ldx #$0b			ldx 	#ErrorID_NoReference
.1a9d	20 91 21	jsr $2191		jsr	errorHandler
.1aa0					ELShiftByteIn:
.1aa0	48		pha				pha 								; save bits to shift in.
.1aa1	b5 60		lda $60,x			lda 	esInt3,x 					; save top most byte
.1aa3	48		pha				pha
.1aa4	b5 58		lda $58,x			lda 	esInt2,x 					; shift everything left 8 bits
.1aa6	95 60		sta $60,x			sta 	esInt3,x
.1aa8	b5 50		lda $50,x			lda 	esInt1,x
.1aaa	95 58		sta $58,x			sta 	esInt2,x
.1aac	b5 48		lda $48,x			lda 	esInt0,x
.1aae	95 50		sta $50,x			sta 	esInt1,x
.1ab0	a9 00		lda #$00			lda 	#0
.1ab2	95 48		sta $48,x			sta 	esInt0,x
.1ab4	68		pla				pla 								; now A:TOS is a 5 byte register, shift right twice.
.1ab5	29 03		and #$03			and 	#3 							; only want lower 2 bits
.1ab7	09 04		ora #$04			ora 	#4  						; set bit 2 - when 1 we are done
.1ab9					_ELShiftLoop:
.1ab9	4a		lsr a				lsr 	a
.1aba	76 60		ror $60,x			ror 	esInt3,x
.1abc	76 58		ror $58,x			ror 	esInt2,x
.1abe	76 50		ror $50,x			ror 	esInt1,x
.1ac0	76 48		ror $48,x			ror 	esInt0,x
.1ac2	c9 01		cmp #$01			cmp 	#1
.1ac4	d0 f3		bne $1ab9			bne 	_ELShiftLoop
.1ac6	68		pla				pla 								; get original 6 bit value and OR in.
.1ac7	29 3f		and #$3f			and 	#$3F
.1ac9	15 48		ora $48,x			ora 	esInt0,x
.1acb	95 48		sta $48,x			sta 	esInt0,x
.1acd	60		rts				rts
.1ace					ELBinaryOperatorInfo:

;******  Processing file: main/evaluate/../../generated/binarystructinfo.inc

>1ace	01					.byte	$01			; $86 and
>1acf	01					.byte	$01			; $87 or
>1ad0	01					.byte	$01			; $88 xor
>1ad1	02					.byte	$02			; $89 >=
>1ad2	02					.byte	$02			; $8a <=
>1ad3	02					.byte	$02			; $8b >
>1ad4	02					.byte	$02			; $8c <
>1ad5	02					.byte	$02			; $8d =
>1ad6	02					.byte	$02			; $8e <>
>1ad7	03					.byte	$03			; $8f +
>1ad8	03					.byte	$03			; $90 -
>1ad9	04					.byte	$04			; $91 >>
>1ada	04					.byte	$04			; $92 <<
>1adb	04					.byte	$04			; $93 *
>1adc	04					.byte	$04			; $94 /
>1add	04					.byte	$04			; $95 mod
>1ade	05					.byte	$05			; $96 ^
>1adf	06					.byte	$06			; $97 !
>1ae0	06					.byte	$06			; $98 ?
>1ae1	82					.byte	$82			; $99 repeat
>1ae2	82					.byte	$82			; $9a while
>1ae3	82					.byte	$82			; $9b for
>1ae4	82					.byte	$82			; $9c if
>1ae5	82					.byte	$82			; $9d defproc
>1ae6	80					.byte	$80			; $9e until
>1ae7	80					.byte	$80			; $9f wend
>1ae8	80					.byte	$80			; $a0 next
>1ae9	80					.byte	$80			; $a1 then
>1aea	80					.byte	$80			; $a2 endif
>1aeb	80					.byte	$80			; $a3 endproc

;******  Return to file: main/evaluate/evaluate.asm


;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/event.asm

.1aec					EventFunction:
.1aec	20 8d 1a	jsr $1a8d			jsr 	EvaluateReference			; get the variable reference.
.1aef	b5 40		lda $40,x			lda 	esType,x
.1af1	c9 80		cmp #$80			cmp 	#$80 						; must be int ref
.1af3	d0 5b		bne $1b50			bne 	_EFType
.1af5	20 df 20	jsr $20df			jsr 	CheckComma
.1af8	e8		inx				inx
.1af9	20 60 1a	jsr $1a60			jsr 	EvaluateInteger		 		; get the elapsed time between firing.
.1afc	20 d2 20	jsr $20d2			jsr 	CheckRightParen 			; finish off with the
.1aff	ca		dex				dex
.1b00	b5 50		lda $50,x			lda 	esInt1,x 					; check max of 32767
.1b02	29 80		and #$80			and 	#$80
.1b04	15 58		ora $58,x			ora 	esInt2,x
.1b06	15 60		ora $60,x			ora 	esInt3,x
.1b08	d0 41		bne $1b4b			bne 	_EFValue
.1b0a	98		tya				tya
.1b0b	48		pha				pha
.1b0c	8a		txa				txa
.1b0d	48		pha				pha
.1b0e	a2 08		ldx #$08		ldx	#8
.1b10	20 84 21	jsr $2184		jsr	deviceHandler
.1b13	84 07		sty $07				sty 	temp1+1
.1b15	85 06		sta $06				sta 	temp1
.1b17	68		pla				pla
.1b18	aa		tax				tax
.1b19	20 26 11	jsr $1126			jsr 	TOSToTemp0 					; point temp0 to the variable.
.1b1c	a0 03		ldy #$03			ldy 	#3							; if -ve
.1b1e	b1 04		lda ($04),y			lda 	(temp0),y
.1b20	30 23		bmi $1b45			bmi 	_EFFail 	 				; straight out with fail, means on pause.
.1b22	a0 00		ldy #$00			ldy 	#0 							; is the fire time zero ?
.1b24	b1 04		lda ($04),y			lda 	(temp0),y
.1b26	c8		iny				iny
.1b27	11 04		ora ($04),y			ora 	(temp0),y
.1b29	f0 17		beq $1b42			beq 	_EFInitialise 				; if so, initialise the value but return false.
.1b2b	a0 00		ldy #$00			ldy 	#0 							; calculate trigger - timer
.1b2d	38		sec				sec
.1b2e	b1 04		lda ($04),y			lda 	(temp0),y
.1b30	e5 06		sbc $06				sbc 	temp1
.1b32	c8		iny				iny
.1b33	b1 04		lda ($04),y			lda 	(temp0),y
.1b35	e5 07		sbc $07				sbc 	temp1+1
.1b37	10 0c		bpl $1b45			bpl 	_EFFail 					; if trigger >= timer then return False
.1b39	20 55 1b	jsr $1b55			jsr 	SetEventTimer 				; reset the timer for next time.
.1b3c	20 5b 20	jsr $205b			jsr	 	MInt32True 					; and treutn true as fired.
.1b3f	68		pla				pla
.1b40	a8		tay				tay
.1b41	60		rts				rts
.1b42					_EFInitialise:
.1b42	20 55 1b	jsr $1b55			jsr		SetEventTimer 				; set trigger time to time + elapsed
.1b45					_EFFail:
.1b45	68		pla				pla
.1b46	a8		tay				tay
.1b47	20 5f 20	jsr $205f			jsr 	MInt32False
.1b4a	60		rts				rts
.1b4b					_EFValue:
.1b4b	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.1b4d	20 91 21	jsr $2191		jsr	errorHandler
.1b50					_EFType:
.1b50	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.1b52	20 91 21	jsr $2191		jsr	errorHandler
.1b55					SetEventTimer:
.1b55	a0 00		ldy #$00			ldy 	#0 							; add elapsed to current time, store in variable
.1b57	18		clc				clc
.1b58	a5 06		lda $06				lda 	temp1
.1b5a	75 49		adc $49,x			adc 	esInt0+1,x
.1b5c	91 04		sta ($04),y			sta		(temp0),y
.1b5e	c8		iny				iny
.1b5f	a5 07		lda $07				lda 	temp1+1
.1b61	75 51		adc $51,x			adc 	esInt1+1,x
.1b63	91 04		sta ($04),y			sta		(temp0),y
.1b65	88		dey				dey
.1b66	11 04		ora ($04),y			ora 	(temp0),y 					; if the result is non zero, exit
.1b68	d0 04		bne $1b6e			bne 	_SETExit
.1b6a	a9 01		lda #$01			lda 	#1 							; timer zero won't work, so make it 1, which is
.1b6c	91 04		sta ($04),y			sta 	(temp0),y 					; near enough.
.1b6e					_SETExit:
.1b6e	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary.asm

.1b6f					UnaryLen:
.1b6f	20 7d 1b	jsr $1b7d			jsr 	ULStart
.1b72					ULFinish:
.1b72	b1 04		lda ($04),y			lda 	(temp0),y
.1b74	a4 0c		ldy $0c				ldy 	tempShort
.1b76	20 6e 20	jsr $206e			jsr 	MInt32Set8Bit
.1b79	20 d2 20	jsr $20d2			jsr 	CheckRightParen
.1b7c	60		rts				rts
.1b7d	20 55 1a	jsr $1a55	ULStart:jsr 	EvaluateString
.1b80	b5 48		lda $48,x			lda 	esInt0,x 					; copy address of string to temp0
.1b82	85 04		sta $04				sta 	temp0
.1b84	b5 50		lda $50,x			lda 	esInt1,x
.1b86	85 05		sta $05				sta 	temp0+1
.1b88	84 0c		sty $0c				sty 	tempShort 					; get length
.1b8a	a0 00		ldy #$00			ldy 	#0
.1b8c	60		rts				rts
.1b8d					UnaryAsc:
.1b8d	20 7d 1b	jsr $1b7d			jsr 	ULStart 					; same as LEN() get string, save Y, point to length.
.1b90	b1 04		lda ($04),y			lda 	(temp0),y
.1b92	c8		iny				iny 		 						; point to first character, we can do LEN code after that
.1b93	c9 00		cmp #$00			cmp 	#0
.1b95	d0 db		bne $1b72			bne 	ULFinish
.1b97	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.1b99	20 91 21	jsr $2191		jsr	errorHandler
.1b9c					UnaryAbs:
.1b9c	20 4a 1a	jsr $1a4a			jsr 	EvaluateNumeric
.1b9f	b0 07		bcs $1ba8			bcs 	_UAFloat
.1ba1	20 14 20	jsr $2014			jsr 	MInt32Absolute
.1ba4	20 d2 20	jsr $20d2			jsr 	CheckRightParen
.1ba7	60		rts				rts
.1ba8					_UAFloat:
.1ba8	8a		txa				txa
.1ba9	a2 00		ldx #$00		ldx	#0
.1bab	20 42 24	jsr $2442		jsr	floatingpointHandler
.1bae	aa		tax				tax
.1baf	20 d2 20	jsr $20d2			jsr 	CheckRightParen
.1bb2	60		rts				rts
.1bb3					UnarySgn:
.1bb3	20 4a 1a	jsr $1a4a			jsr 	EvaluateNumeric
.1bb6	b0 07		bcs $1bbf			bcs 	_USFloat
.1bb8	20 4c 20	jsr $204c			jsr 	MInt32Sign
.1bbb	20 d2 20	jsr $20d2			jsr 	CheckRightParen
.1bbe	60		rts				rts
.1bbf					_USFloat:
.1bbf	8a		txa				txa
.1bc0	a2 0e		ldx #$0e		ldx	#14
.1bc2	20 42 24	jsr $2442		jsr	floatingpointHandler
.1bc5	aa		tax				tax
.1bc6	20 d2 20	jsr $20d2			jsr 	CheckRightParen
.1bc9	60		rts				rts
.1bca					UnaryPeek:
.1bca	20 f6 1b	jsr $1bf6			jsr 	PDLCode
.1bcd	4c ea 1b	jmp $1bea			jmp 	PDLByte0
.1bd0					UnaryDeek:
.1bd0	20 f6 1b	jsr $1bf6			jsr 	PDLCode
.1bd3	4c e4 1b	jmp $1be4			jmp 	PDLByte1
.1bd6					UnaryLeek:
.1bd6	20 f6 1b	jsr $1bf6			jsr 	PDLCode
.1bd9	a0 03		ldy #$03			ldy 	#3
.1bdb	b1 04		lda ($04),y			lda 	(temp0),y
.1bdd	95 60		sta $60,x			sta 	esInt3,x
.1bdf	88		dey				dey
.1be0	b1 04		lda ($04),y			lda 	(temp0),y
.1be2	95 58		sta $58,x			sta 	esInt2,x
.1be4					PDLByte1:
.1be4	a0 01		ldy #$01			ldy 	#1
.1be6	b1 04		lda ($04),y			lda 	(temp0),y
.1be8	95 50		sta $50,x			sta 	esInt1,x
.1bea					PDLByte0:
.1bea	a0 00		ldy #$00			ldy 	#0
.1bec	b1 04		lda ($04),y			lda 	(temp0),y
.1bee	95 48		sta $48,x			sta 	esInt0,x
.1bf0	a4 0c		ldy $0c				ldy 	tempShort 					; restore Y
.1bf2	20 d2 20	jsr $20d2			jsr 	CheckRightParen 			; check right and return
.1bf5	60		rts				rts
.1bf6					PDLCode:
.1bf6	20 60 1a	jsr $1a60			jsr 	EvaluateInteger
.1bf9	b5 48		lda $48,x			lda 	esInt0,x 					; copy address of string to temp0
.1bfb	85 04		sta $04				sta 	temp0
.1bfd	b5 50		lda $50,x			lda 	esInt1,x
.1bff	85 05		sta $05				sta 	temp0+1
.1c01	a9 00		lda #$00			lda 	#0 							; zero upper 3 bytes of result, type okay.
.1c03	95 50		sta $50,x			sta 	esInt1,x
.1c05	95 58		sta $58,x			sta 	esInt2,x
.1c07	95 60		sta $60,x			sta 	esInt3,x
.1c09	84 0c		sty $0c				sty 	tempShort 					; save Y
.1c0b	60		rts				rts
.1c0c					Unary_Random:
.1c0c	20 8f 20	jsr $208f			jsr 	MInt32Random 				; generate random number.
.1c0f	b1 02		lda ($02),y			lda 	(codePtr),y 				; check followed by )
.1c11	c9 c4		cmp #$c4			cmp 	#TKW_RPAREN
.1c13	f0 08		beq $1c1d			beq 	_URExit
.1c15	e8		inx				inx 								; load range 0..r-1 into +1
.1c16	20 60 1a	jsr $1a60			jsr 	EvaluateInteger
.1c19	ca		dex				dex
.1c1a	20 be 1e	jsr $1ebe			jsr 	MInt32Modulus 				; calculate random % modulus
.1c1d					_URExit:
.1c1d	20 d2 20	jsr $20d2			jsr 	CheckRightParen 			; check right and return
.1c20	60		rts				rts
.1c21					Unary_Min:
.1c21	a9 01		lda #$01			lda 	#1 							; c1 cmp c2 needs to be > e.g. c1 > c2
.1c23	d0 02		bne $1c27			bne 	UnaryMBody
.1c25					Unary_Max:
.1c25	a9 ff		lda #$ff			lda 	#$FF 						; c1 cmp c2 needs to be < e.g. c1 < c2
.1c27					UnaryMBody:
.1c27	48		pha				pha 								; save comparator on stack.
.1c28	20 41 1a	jsr $1a41			jsr 	Evaluate 					; get the first thing to check
.1c2b					_UnaryMLoop:
.1c2b	b1 02		lda ($02),y			lda 	(codePtr),y 				; found ), indicates end.
.1c2d	c8		iny				iny
.1c2e	c9 c4		cmp #$c4			cmp 	#TKW_RPAREN
.1c30	f0 09		beq $1c3b			beq 	_UnaryMExit
.1c32	c9 c6		cmp #$c6			cmp 	#TKW_COMMA 					; found , indicates more.
.1c34	f0 07		beq $1c3d			beq 	_UnaryMCompare
.1c36	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.1c38	20 91 21	jsr $2191		jsr	errorHandler
.1c3b					_UnaryMExit:
.1c3b	68		pla				pla 								; throw comparator and return.
.1c3c	60		rts				rts
.1c3d					_UnaryMCompare:
.1c3d	e8		inx				inx 								; get the 2nd thing to evaluate
.1c3e	20 41 1a	jsr $1a41			jsr 	Evaluate
.1c41	ca		dex				dex
.1c42	20 de 17	jsr $17de			jsr 	PerformComparison 			; this is part of evaluate/compare.asm
.1c45	85 0c		sta $0c				sta 	tempShort 					; save result
.1c47	68		pla				pla 								; get what we need
.1c48	48		pha				pha
.1c49	c5 0c		cmp $0c				cmp 	tempShort 					; did we get it
.1c4b	d0 de		bne $1c2b			bne 	_UnaryMLoop 				; no, try another value.
.1c4d	20 5f 20	jsr $205f			jsr 	MInt32False 				; promote 2nd to 1st.
.1c50	20 48 1f	jsr $1f48			jsr 	MInt32Add
.1c53	4c 2b 1c	jmp $1c2b			jmp 	_UnaryMLoop
.1c56					Unary_Page:
.1c56	20 5f 20	jsr $205f			jsr 	MInt32False 				; zero
.1c59	ad c8 0a	lda $0ac8			lda 	basePage 					; copy base page address in.
.1c5c	95 48		sta $48,x			sta 	esInt0,x
.1c5e	ad c9 0a	lda $0ac9			lda 	basePage+1
.1c61	95 50		sta $50,x			sta 	esInt1,x
.1c63	60		rts				rts
.1c64					UnaryReference:
.1c64	a9 0f		lda #$0f			lda 	#15
.1c66	20 2c 19	jsr $192c			jsr 	EvaluateLevel 				; evaluate term and don't deference.
.1c69	b5 40		lda $40,x			lda 	esType,x 					; check it's a reference.
.1c6b	10 05		bpl $1c72			bpl 	UType
.1c6d	a9 00		lda #$00			lda 	#0 							; make it an integer
.1c6f	95 40		sta $40,x			sta 	esType,x
.1c71	60		rts				rts
.1c72					UType:
.1c72	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.1c74	20 91 21	jsr $2191		jsr	errorHandler
.1c77					UnaryHexMarker:
.1c77	4c 32 1a	jmp $1a32			jmp 	EvaluateIntegerTerm
.1c7a					UnaryComplement:
.1c7a	20 32 1a	jsr $1a32			jsr 	EvaluateIntegerTerm
.1c7d	20 33 20	jsr $2033			jsr 	MInt32Not
.1c80	60		rts				rts
.1c81					UnaryIntToFloat:
.1c81	20 4a 1a	jsr $1a4a			jsr 	EvaluateNumeric
.1c84	b5 40		lda $40,x			lda 	esType,x
.1c86	d0 0b		bne $1c93			bne 	_UIFExit
.1c88	8a		txa				txa
.1c89	a2 1a		ldx #$1a		ldx	#26
.1c8b	20 42 24	jsr $2442		jsr	floatingpointHandler
.1c8e	aa		tax				tax
.1c8f	a9 01		lda #$01			lda 	#1
.1c91	95 40		sta $40,x			sta 	esType,x
.1c93					_UIFExit:
.1c93	60		rts				rts
.1c94					UnaryFloatToInt:
.1c94	20 4a 1a	jsr $1a4a			jsr 	EvaluateNumeric
.1c97	b5 40		lda $40,x			lda 	esType,x
.1c99	f0 07		beq $1ca2			beq 	_UFIExit
.1c9b	8a		txa				txa
.1c9c	a2 12		ldx #$12		ldx	#18
.1c9e	20 42 24	jsr $2442		jsr	floatingpointHandler
.1ca1	aa		tax				tax
.1ca2					_UFIExit:
.1ca2	60		rts				rts
.1ca3					UnaryAlloc:
.1ca3	e8		inx				inx 								; evaluate memory required
.1ca4	20 60 1a	jsr $1a60			jsr 	EvaluateInteger
.1ca7	20 d2 20	jsr $20d2			jsr 	CheckRightParen
.1caa	ca		dex				dex
.1cab	b5 59		lda $59,x			lda 	esInt2+1,x 					; check at least in 64k range.
.1cad	15 61		ora $61,x			ora 	esInt3+1,x
.1caf	d0 19		bne $1cca			bne 	_UABadValue
.1cb1	20 5f 20	jsr $205f			jsr 	MInt32False					; zero return.
.1cb4	a5 10		lda $10				lda 	lowMemory+1 				; copy low memory in
.1cb6	95 50		sta $50,x			sta 	esInt1,x
.1cb8	a5 0f		lda $0f				lda 	lowMemory
.1cba	95 48		sta $48,x			sta 	esInt0,x
.1cbc	18		clc				clc 								; add alloc required.
.1cbd	75 49		adc $49,x			adc 	esInt0+1,x
.1cbf	85 0f		sta $0f				sta 	lowMemory
.1cc1	a5 10		lda $10				lda 	lowMemory+1
.1cc3	75 51		adc $51,x			adc 	esInt1+1,x
.1cc5	85 10		sta $10				sta 	lowMemory+1
.1cc7	b0 01		bcs $1cca			bcs		_UABadValue 				; overflow definitely bad.
.1cc9	60		rts				rts
.1cca					_UABadValue:
.1cca	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.1ccc	20 91 21	jsr $2191		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary2.asm

.1ccf					UnaryTimer:
.1ccf	20 d2 20	jsr $20d2			jsr 	CheckRightParen
.1cd2	98		tya				tya
.1cd3	48		pha				pha
.1cd4	20 86 20	jsr $2086			jsr 	MInt32Zero 					; zero result
.1cd7	86 04		stx $04				stx 	temp0 						; returning in YA so can't use .pshx
.1cd9	a2 08		ldx #$08		ldx	#8
.1cdb	20 84 21	jsr $2184		jsr	deviceHandler
.1cde	a6 04		ldx $04				ldx 	temp0						; restore X and update 16 bit result
.1ce0	95 48		sta $48,x			sta 	esInt0,x
.1ce2	98		tya				tya
.1ce3	95 50		sta $50,x			sta 	esInt1,x
.1ce5	68		pla				pla
.1ce6	a8		tay				tay
.1ce7	60		rts				rts
.1ce8					UnaryInkey:
.1ce8	20 d2 20	jsr $20d2			jsr 	CheckRightParen
.1ceb	86 04		stx $04				stx 	temp0
.1ced	a2 02		ldx #$02		ldx	#2
.1cef	20 84 21	jsr $2184		jsr	deviceHandler
.1cf2	a6 04		ldx $04				ldx 	temp0
.1cf4	20 6e 20	jsr $206e			jsr 	MInt32Set8Bit
.1cf7	60		rts				rts
.1cf8					UnaryGet:
.1cf8	20 d2 20	jsr $20d2			jsr 	CheckRightParen
.1cfb	86 04		stx $04				stx 	temp0
.1cfd					_UGLoop:
.1cfd	a2 02		ldx #$02		ldx	#2
.1cff	20 84 21	jsr $2184		jsr	deviceHandler
.1d02	c9 00		cmp #$00			cmp 	#0
.1d04	f0 f7		beq $1cfd			beq 	_UGLoop
.1d06	a6 04		ldx $04				ldx 	temp0
.1d08	20 6e 20	jsr $206e			jsr 	MInt32Set8Bit
.1d0b	60		rts				rts
.1d0c					UnarySys:
.1d0c	20 60 1a	jsr $1a60			jsr 	EvaluateInteger 				; get the address
.1d0f	20 d2 20	jsr $20d2			jsr 	CheckRightParen
.1d12	20 26 11	jsr $1126			jsr 	TOSToTemp0 						; copy to temp0
.1d15	8a		txa				txa
.1d16	48		pha				pha
.1d17	98		tya				tya
.1d18	48		pha				pha
.1d19	ad 00 0a	lda $0a00			lda 	("A"-"A")*4+SingleLetterVar 	; load AXY
.1d1c	ae 5c 0a	ldx $0a5c			ldx 	("X"-"A")*4+SingleLetterVar
.1d1f	ac 60 0a	ldy $0a60			ldy 	("Y"-"A")*4+SingleLetterVar
.1d22	20 31 1d	jsr $1d31			jsr 	_CallTemp0
.1d25	85 0c		sta $0c				sta 	tempShort 						; restore YX
.1d27	68		pla				pla
.1d28	a8		tay				tay
.1d29	68		pla				pla
.1d2a	aa		tax				tax
.1d2b	a5 0c		lda $0c				lda 	tempShort
.1d2d	20 6e 20	jsr $206e			jsr 	MInt32Set8Bit 					; return result.
.1d30	60		rts				rts
.1d31					_CallTemp0:
.1d31	6c 04 00	jmp ($0004)			jmp 	(temp0)

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unarystr.asm

.1d34					ExecChr:
.1d34	20 68 1a	jsr $1a68			jsr 	EvaluateSmallInteger		; character number
.1d37	20 d2 20	jsr $20d2			jsr 	CheckRightParen				; right bracket
.1d3a	98		tya				tya
.1d3b	48		pha				pha
.1d3c	8a		txa				txa 								; A = stack
.1d3d	b4 48		ldy $48,x			ldy 	esInt0,x					; Y = character
.1d3f	a2 00		ldx #$00		ldx	#0
.1d41	20 99 26	jsr $2699		jsr	stringHandler
.1d44	aa		tax				tax 								; X = stack
.1d45	68		pla				pla
.1d46	a8		tay				tay
.1d47	60		rts				rts
.1d48					ExecLeft:
.1d48	20 55 1a	jsr $1a55			jsr 	EvaluateString 				; string to stack,X
.1d4b	20 df 20	jsr $20df			jsr 	CheckComma
.1d4e	e8		inx				inx
.1d4f	a9 01		lda #$01			lda 	#1 							; 1 for 2nd parameter.
.1d51	20 6e 20	jsr $206e			jsr 	MInt32Set8Bit
.1d54	e8		inx				inx
.1d55	20 68 1a	jsr $1a68			jsr 	EvaluateSmallInteger 		; smallint 3rd parameter
.1d58					ExecSubstring:
.1d58	ca		dex				dex 								; fix up X
.1d59	ca		dex				dex
.1d5a	20 d2 20	jsr $20d2			jsr 	CheckRightParen 			; check closing right bracket.
.1d5d	8a		txa				txa 								; do the substring and exit.
.1d5e	a2 08		ldx #$08		ldx	#8
.1d60	20 99 26	jsr $2699		jsr	stringHandler
.1d63	aa		tax				tax
.1d64	60		rts				rts
.1d65					ExecMid:
.1d65	20 55 1a	jsr $1a55			jsr 	EvaluateString 				; string to stack,X
.1d68	20 df 20	jsr $20df			jsr 	CheckComma
.1d6b	e8		inx				inx
.1d6c	20 68 1a	jsr $1a68			jsr 	EvaluateSmallInteger 		; smallint 2nd parameter
.1d6f	c9 00		cmp #$00			cmp 	#0
.1d71	f0 15		beq $1d88			beq 	_EMValue
.1d73	e8		inx				inx
.1d74	a9 ff		lda #$ff			lda 	#255 						; 255 default for 3nd parameter.
.1d76	20 6e 20	jsr $206e			jsr 	MInt32Set8Bit
.1d79	b1 02		lda ($02),y			lda 	(codePtr),y 				; is there a ) next
.1d7b	c9 c4		cmp #$c4			cmp 	#TKW_RPAREN 				; if so, just MID$(a$,2)
.1d7d	f0 d9		beq $1d58			beq 	ExecSubString
.1d7f	20 df 20	jsr $20df			jsr 	CheckComma
.1d82	20 68 1a	jsr $1a68			jsr 	EvaluateSmallInteger 		; smallint 2nd parameter
.1d85	4c 58 1d	jmp $1d58			jmp 	ExecSubString
.1d88					_EMValue:
.1d88	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.1d8a	20 91 21	jsr $2191		jsr	errorHandler
.1d8d					ExecRight:
.1d8d	20 55 1a	jsr $1a55			jsr 	EvaluateString 				; string to stack,X
.1d90	20 df 20	jsr $20df			jsr 	CheckComma
.1d93	e8		inx				inx
.1d94	20 68 1a	jsr $1a68			jsr 	EvaluateSmallInteger 		; smallint 2nd parameter.
.1d97	ca		dex				dex
.1d98	98		tya				tya
.1d99	48		pha				pha
.1d9a	b5 48		lda $48,x			lda 	esInt0,x 					; copy address of string to temp0
.1d9c	85 04		sta $04				sta 	temp0
.1d9e	b5 50		lda $50,x			lda 	esInt1,x
.1da0	85 05		sta $05				sta 	temp0+1
.1da2	a0 00		ldy #$00			ldy 	#0 							; point to length
.1da4	b1 04		lda ($04),y			lda 	(temp0),y 					; get the length.
.1da6	18		clc				clc 								; add 1.
.1da7	69 01		adc #$01			adc 	#1
.1da9	38		sec				sec
.1daa	f5 49		sbc $49,x			sbc 	esInt0+1,x  				; subtract right count.
.1dac	f0 02		beq $1db0			beq		_ERMake1 					; if zero, make it 1.
.1dae	b0 02		bcs $1db2			bcs		_EROkay
.1db0					_ERMake1:
.1db0	a9 01		lda #$01			lda 	#1 							; start position.
.1db2					_EROkay:
.1db2	e8		inx				inx 								; set start pos.
.1db3	95 48		sta $48,x			sta 	esInt0,x
.1db5	e8		inx				inx
.1db6	a9 ff		lda #$ff			lda 	#255 						; 255 default for 3nd parameter.
.1db8	20 6e 20	jsr $206e			jsr 	MInt32Set8Bit
.1dbb	68		pla				pla
.1dbc	a8		tay				tay
.1dbd	4c 58 1d	jmp $1d58			jmp 	ExecSubString 				; do the substring code.

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32binary.asm

.1dc0					MInt32And:
.1dc0	b5 48		lda $48,x			lda 	esInt0,x
.1dc2	35 49		and $49,x			and 	esInt0+1,x
.1dc4	95 48		sta $48,x			sta 	esInt0,x
.1dc6	b5 50		lda $50,x			lda 	esInt1,x
.1dc8	35 51		and $51,x			and 	esInt1+1,x
.1dca	95 50		sta $50,x			sta 	esInt1,x
.1dcc	b5 58		lda $58,x			lda 	esInt2,x
.1dce	35 59		and $59,x			and 	esInt2+1,x
.1dd0	95 58		sta $58,x			sta 	esInt2,x
.1dd2	b5 60		lda $60,x			lda 	esInt3,x
.1dd4	35 61		and $61,x			and 	esInt3+1,x
.1dd6	95 60		sta $60,x			sta 	esInt3,x
.1dd8	60		rts				rts
.1dd9					MInt32Or:
.1dd9	b5 48		lda $48,x			lda 	esInt0,x
.1ddb	15 49		ora $49,x			ora 	esInt0+1,x
.1ddd	95 48		sta $48,x			sta 	esInt0,x
.1ddf	b5 50		lda $50,x			lda 	esInt1,x
.1de1	15 51		ora $51,x			ora 	esInt1+1,x
.1de3	95 50		sta $50,x			sta 	esInt1,x
.1de5	b5 58		lda $58,x			lda 	esInt2,x
.1de7	15 59		ora $59,x			ora 	esInt2+1,x
.1de9	95 58		sta $58,x			sta 	esInt2,x
.1deb	b5 60		lda $60,x			lda 	esInt3,x
.1ded	15 61		ora $61,x			ora 	esInt3+1,x
.1def	95 60		sta $60,x			sta 	esInt3,x
.1df1	60		rts				rts
.1df2					MInt32Xor:
.1df2	b5 48		lda $48,x			lda 	esInt0,x
.1df4	55 49		eor $49,x			eor 	esInt0+1,x
.1df6	95 48		sta $48,x			sta 	esInt0,x
.1df8	b5 50		lda $50,x			lda 	esInt1,x
.1dfa	55 51		eor $51,x			eor 	esInt1+1,x
.1dfc	95 50		sta $50,x			sta 	esInt1,x
.1dfe	b5 58		lda $58,x			lda 	esInt2,x
.1e00	55 59		eor $59,x			eor 	esInt2+1,x
.1e02	95 58		sta $58,x			sta 	esInt2,x
.1e04	b5 60		lda $60,x			lda 	esInt3,x
.1e06	55 61		eor $61,x			eor 	esInt3+1,x
.1e08	95 60		sta $60,x			sta 	esInt3,x
.1e0a	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32compare.asm

.1e0b					MInt32Compare:
.1e0b	b5 48		lda $48,x			lda 	esInt0,x 					; equality check.
.1e0d	d5 49		cmp $49,x			cmp 	esInt0+1,x
.1e0f	d0 13		bne $1e24			bne 	MInt32Compare2
.1e11	b5 50		lda $50,x			lda 	esInt1,x
.1e13	d5 51		cmp $51,x			cmp 	esInt1+1,x
.1e15	d0 0d		bne $1e24			bne 	MInt32Compare2
.1e17	b5 58		lda $58,x			lda 	esInt2,x
.1e19	d5 59		cmp $59,x			cmp 	esInt2+1,x
.1e1b	d0 07		bne $1e24			bne 	MInt32Compare2
.1e1d	b5 60		lda $60,x			lda 	esInt3,x
.1e1f	55 61		eor $61,x			eor 	esInt3+1,x 					; will return 0 if the same.
.1e21	d0 01		bne $1e24			bne 	MInt32Compare2
.1e23	60		rts				rts
.1e24					MInt32Compare2:
.1e24	b5 48		lda $48,x			lda		esInt0,x 					; unsigned 32 bit comparison.
.1e26	d5 49		cmp $49,x			cmp 	esInt0+1,x
.1e28	b5 50		lda $50,x			lda		esInt1,x
.1e2a	f5 51		sbc $51,x			sbc 	esInt1+1,x
.1e2c	b5 58		lda $58,x			lda		esInt2,x
.1e2e	f5 59		sbc $59,x			sbc 	esInt2+1,x
.1e30	b5 60		lda $60,x			lda		esInt3,x
.1e32	f5 61		sbc $61,x			sbc 	esInt3+1,x
.1e34	50 02		bvc $1e38			bvc 	_I32LNoOverflow 			; make it signed 32 bi comparison
.1e36	49 80		eor #$80			eor 	#$80
.1e38					_I32LNoOverflow
.1e38	30 03		bmi $1e3d			bmi 	MInt32CLess					; if -ve then return $FF
.1e3a	a9 01		lda #$01			lda 	#$01						; else return $01
.1e3c	60		rts				rts
.1e3d					MInt32CLess:
.1e3d	a9 ff		lda #$ff			lda 	#$FF
.1e3f	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32divide.asm

.1e40					MInt32SDivide:
.1e40	98		tya				tya  								; save Y, which is the count of negations
.1e41	48		pha				pha
.1e42	a0 00		ldy #$00			ldy 	#0 							; zero count
.1e44	20 5c 1e	jsr $1e5c			jsr 	_MInt32SRemSign 			; unsign TOS
.1e47	e8		inx				inx 								; unsign TOS+1
.1e48	20 5c 1e	jsr $1e5c			jsr 	_MInt32SRemSign
.1e4b	ca		dex				dex
.1e4c	98		tya				tya 								; save sign count on stack
.1e4d	48		pha				pha
.1e4e	20 65 1e	jsr $1e65			jsr 	MInt32UDivide 				; unsigned division
.1e51	68		pla				pla 								; get sign count back
.1e52	29 01		and #$01			and 	#1 							; if it is odd, then negate result
.1e54	f0 03		beq $1e59			beq 	_I32SNoNeg
.1e56	20 19 20	jsr $2019			jsr 	MInt32Negate
.1e59					_I32SNoNeg:
.1e59	68		pla				pla 								; restoe Y and exit
.1e5a	a8		tay				tay
.1e5b	60		rts				rts
.1e5c					_MInt32SRemSign:
.1e5c	b5 60		lda $60,x			lda 	esInt3,x 					; is it -ve
.1e5e	10 04		bpl $1e64			bpl 	_MInt32SRSExit
.1e60	c8		iny				iny 								; increment the sign count
.1e61	20 19 20	jsr $2019			jsr 	MInt32Negate 				; negate the value.
.1e64					_MInt32SRSExit:
.1e64	60		rts				rts
.1e65					MInt32UDivide:
.1e65	b5 49		lda $49,x			lda 	esInt0+1,x 					; check for division by zero
.1e67	15 51		ora $51,x			ora 	esInt1+1,x
.1e69	15 52		ora $52,x			ora 	esInt1+2,x
.1e6b	15 53		ora $53,x			ora 	esInt1+3,x
.1e6d	f0 4a		beq $1eb9			beq 	_MInt32DZero
.1e6f	e8		inx				inx 								; clear A
.1e70	e8		inx				inx
.1e71	20 5f 20	jsr $205f			jsr 	MInt32False
.1e74	ca		dex				dex
.1e75	ca		dex				dex
.1e76	98		tya				tya 								; save Y on the stack
.1e77	48		pha				pha
.1e78	a0 20		ldy #$20			ldy 	#32 						; number of division passes
.1e7a					_MInt32UDLoop:
.1e7a	16 48		asl $48,x			asl 	esInt0,x					; shift QA left. First Q
.1e7c	36 50		rol $50,x			rol 	esInt1,x
.1e7e	36 58		rol $58,x			rol 	esInt2,x
.1e80	36 60		rol $60,x			rol 	esInt3,x
.1e82	36 4a		rol $4a,x			rol 	esInt0+2,x 					; then A.
.1e84	36 52		rol $52,x			rol 	esInt1+2,x
.1e86	36 5a		rol $5a,x			rol 	esInt2+2,x
.1e88	36 62		rol $62,x			rol 	esInt3+2,x
.1e8a	38		sec				sec 								; calculate A-M saving result on the stack
.1e8b	b5 4a		lda $4a,x			lda 	esInt0+2,x
.1e8d	f5 49		sbc $49,x			sbc 	esInt0+1,x
.1e8f	48		pha				pha
.1e90	b5 52		lda $52,x			lda 	esInt1+2,x
.1e92	f5 51		sbc $51,x			sbc 	esInt1+1,x
.1e94	48		pha				pha
.1e95	b5 5a		lda $5a,x			lda 	esInt2+2,x
.1e97	f5 59		sbc $59,x			sbc 	esInt2+1,x
.1e99	48		pha				pha
.1e9a	b5 62		lda $62,x			lda 	esInt3+2,x
.1e9c	f5 61		sbc $61,x			sbc 	esInt3+1,x
.1e9e	90 10		bcc $1eb0			bcc		_MInt32NoSubtract 			; if A < M (e.g. carry clear) then reject this.
.1ea0	95 62		sta $62,x			sta 	esInt3+2,x 					; write result back to A
.1ea2	68		pla				pla
.1ea3	95 5a		sta $5a,x			sta 	esInt2+2,x
.1ea5	68		pla				pla
.1ea6	95 52		sta $52,x			sta 	esInt1+2,x
.1ea8	68		pla				pla
.1ea9	95 4a		sta $4a,x			sta 	esInt0+2,x
.1eab	f6 48		inc $48,x			inc 	esInt0,x 					; sets bit 0 of Q - it was shifted left previously.
.1ead	4c b3 1e	jmp $1eb3			jmp 	_MInt32Next 					; do the next iteration
.1eb0					_MInt32NoSubtract:
.1eb0	68		pla				pla
.1eb1	68		pla				pla
.1eb2	68		pla				pla
.1eb3					_MInt32Next:
.1eb3	88		dey				dey 								; do this 32 times.
.1eb4	d0 c4		bne $1e7a			bne 	_MInt32UDLoop
.1eb6	68		pla				pla 								; restore Y and exit
.1eb7	a8		tay				tay
.1eb8	60		rts				rts
.1eb9					_MInt32DZero:
.1eb9	a2 05		ldx #$05			ldx 	#ErrorID_DivZero
.1ebb	20 91 21	jsr $2191		jsr	errorHandler
.1ebe					MInt32Modulus:
.1ebe	20 65 1e	jsr $1e65			jsr 	MInt32UDivide 				; do the division.
.1ec1	b5 62		lda $62,x			lda 	esInt3+2,x 					; copy 2nd on stack (the remainder) to the top.
.1ec3	95 60		sta $60,x			sta 	esInt3,x
.1ec5	b5 5a		lda $5a,x			lda 	esInt2+2,x
.1ec7	95 58		sta $58,x			sta 	esInt2,x
.1ec9	b5 52		lda $52,x			lda 	esInt1+2,x
.1ecb	95 50		sta $50,x			sta 	esInt1,x
.1ecd	b5 4a		lda $4a,x			lda 	esInt0+2,x
.1ecf	95 48		sta $48,x			sta 	esInt0,x
.1ed1	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32fromstr.asm

.0af6					fs32Length:
>0af6							.fill 	1
.1ed2					MInt32FromString:
.1ed2	85 0c		sta $0c				sta 	tempShort 					; save base
.1ed4	98		tya				tya
.1ed5	48		pha				pha
.1ed6	a0 00		ldy #$00			ldy 	#0 							; get length
.1ed8	b1 04		lda ($04),y			lda 	(temp0),y
.1eda	8d f6 0a	sta $0af6			sta 	fs32Length
.1edd	f0 65		beq $1f44			beq 	_I32FSFail2					; fail if length zero.
.1edf	a0 01		ldy #$01			ldy 	#1 							; set index into string being read
.1ee1	b1 04		lda ($04),y			lda 	(temp0),y 					; look at first character
.1ee3	c9 2d		cmp #$2d			cmp 	#"-"						; is it a - character
.1ee5	d0 09		bne $1ef0			bne 	_I32FSNotNegative
.1ee7	ad f6 0a	lda $0af6			lda 	fs32Length 					; get length back.
.1eea	c9 01		cmp #$01			cmp 	#1 							; if 1 it is just a '-; so fail.'
.1eec	f0 56		beq $1f44			beq 	_I32FSFail2
.1eee	a0 02		ldy #$02			ldy 	#2 							; first digit of the number.
.1ef0					_I32FSNotNegative:
.1ef0	a5 0c		lda $0c				lda 	tempShort 					; get the base back.
.1ef2	c0 02		cpy #$02			cpy 	#2 							; if we read a -ve (e.g. Y == 2)
.1ef4	d0 02		bne $1ef8			bne 	_I32FSNN2
.1ef6	09 80		ora #$80			ora 	#$80						; set bit 7, this indicates a negated result.
.1ef8					_I32FSNN2:
.1ef8	48		pha				pha 								; save base + final sign on stack.
.1ef9	20 5f 20	jsr $205f			jsr 	MInt32False 				; zero the return value.
.1efc					_I32FSMainLoop:
.1efc	68		pla				pla 								; get the base back into tempShort
.1efd	48		pha				pha
.1efe	29 7f		and #$7f			and 	#$7F
.1f00	85 0c		sta $0c				sta 	tempShort
.1f02	b1 04		lda ($04),y			lda 	(temp0),y 					; look at next character.
.1f04	c9 61		cmp #$61			cmp 	#"a" 						; fix up case.
.1f06	90 02		bcc $1f0a			bcc 	_I32FSNotLC
.1f08	e9 20		sbc #$20			sbc 	#32
.1f0a					_I32FSNotLC:
.1f0a	38		sec				sec 								; subtract 48 (ASCII "0")
.1f0b	e9 30		sbc #$30			sbc 	#"0"
.1f0d	90 34		bcc $1f43			bcc 	_I32FSFail 					; nothing more to do.
.1f0f	c9 0a		cmp #$0a			cmp 	#9+1 						; if it is 0-9 validate vs base.
.1f11	90 06		bcc $1f19			bcc 	_I32FSValidate
.1f13	c9 11		cmp #$11			cmp 	#17 						; is it between 58 and 64 ? if so bad.
.1f15	90 2c		bcc $1f43			bcc 	_I32FSFail
.1f17	e9 07		sbc #$07			sbc 	#7 							; adjust into range so now character is 0->nnn
.1f19					_I32FSValidate:
.1f19	c5 0c		cmp $0c				cmp 	tempShort 					; compare against the base.
.1f1b	b0 26		bcs $1f43			bcs 	_I32FSFail 					; sorry, too large for this base.
.1f1d	48		pha				pha 								; save the new digit value.
.1f1e	e8		inx				inx 								; put base into next slot.
.1f1f	a5 0c		lda $0c				lda 	tempShort
.1f21	20 6e 20	jsr $206e			jsr 	MInt32Set8Bit
.1f24	ca		dex				dex
.1f25	20 7c 1f	jsr $1f7c			jsr 	MInt32Multiply 				; multiply current by the base
.1f28	e8		inx				inx
.1f29	68		pla				pla  								; put additive into next slot
.1f2a	20 6e 20	jsr $206e			jsr 	MInt32Set8Bit
.1f2d	ca		dex				dex
.1f2e	20 48 1f	jsr $1f48			jsr 	MInt32Add 					; and add it
.1f31	c8		iny				iny 								; look at next character
.1f32	cc f6 0a	cpy $0af6			cpy 	fs32Length 					; until > length.
.1f35	f0 c5		beq $1efc			beq 	_I32FSMainLoop
.1f37	90 c3		bcc $1efc			bcc 	_I32FSMainLoop
.1f39					_I32FSDone:
.1f39	68		pla				pla 								; get base/final sign back
.1f3a	10 03		bpl $1f3f			bpl 	_I32FSNN3
.1f3c	20 19 20	jsr $2019			jsr 	MInt32Negate 				; negate the result.
.1f3f					_I32FSNN3:
.1f3f	68		pla				pla
.1f40	a8		tay				tay
.1f41	38		sec				sec
.1f42	60		rts				rts
.1f43					_I32FSFail:
.1f43	68		pla				pla
.1f44					_I32FSFail2:
.1f44	68		pla				pla
.1f45	a8		tay				tay
.1f46	18		clc				clc
.1f47	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32math.asm

.1f48					MInt32Add:
.1f48	18		clc				clc
.1f49	b5 48		lda $48,x			lda 	esInt0,x
.1f4b	75 49		adc $49,x			adc 	esInt0+1,x
.1f4d	95 48		sta $48,x			sta 	esInt0,x
.1f4f	b5 50		lda $50,x			lda 	esInt1,x
.1f51	75 51		adc $51,x			adc 	esInt1+1,x
.1f53	95 50		sta $50,x			sta 	esInt1,x
.1f55	b5 58		lda $58,x			lda 	esInt2,x
.1f57	75 59		adc $59,x			adc 	esInt2+1,x
.1f59	95 58		sta $58,x			sta 	esInt2,x
.1f5b	b5 60		lda $60,x			lda 	esInt3,x
.1f5d	75 61		adc $61,x			adc 	esInt3+1,x
.1f5f	95 60		sta $60,x			sta 	esInt3,x
.1f61	60		rts				rts
.1f62					MInt32Sub:
.1f62	38		sec				sec
.1f63	b5 48		lda $48,x			lda 	esInt0,x
.1f65	f5 49		sbc $49,x			sbc 	esInt0+1,x
.1f67	95 48		sta $48,x			sta 	esInt0,x
.1f69	b5 50		lda $50,x			lda 	esInt1,x
.1f6b	f5 51		sbc $51,x			sbc 	esInt1+1,x
.1f6d	95 50		sta $50,x			sta 	esInt1,x
.1f6f	b5 58		lda $58,x			lda 	esInt2,x
.1f71	f5 59		sbc $59,x			sbc 	esInt2+1,x
.1f73	95 58		sta $58,x			sta 	esInt2,x
.1f75	b5 60		lda $60,x			lda 	esInt3,x
.1f77	f5 61		sbc $61,x			sbc 	esInt3+1,x
.1f79	95 60		sta $60,x			sta 	esInt3,x
.1f7b	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32multiply.asm

.1f7c					MInt32Multiply:
.1f7c	e8		inx				inx 								; copy 2nd -> 3rd
.1f7d	20 a2 1f	jsr $1fa2			jsr 	MInt32CopyUp
.1f80	ca		dex				dex
.1f81	20 a2 1f	jsr $1fa2			jsr 	MInt32CopyUp 				; copy 1st -> 2nd
.1f84	20 5f 20	jsr $205f			jsr 	MInt32False 					; zero 1st.
.1f87					_I32Loop:
.1f87	b5 4a		lda $4a,x			lda 	esInt0+2,x 					; get low bit of 3rd
.1f89	29 01		and #$01			and 	#1
.1f8b	f0 03		beq $1f90			beq 	_I32NoAdd 					; if set
.1f8d	20 48 1f	jsr $1f48			jsr 	MInt32Add 					; add 2nd to 1st.
.1f90					_I32NoAdd:
.1f90	e8		inx				inx 								; shift 2nd left
.1f91	20 74 20	jsr $2074			jsr 	MInt32ShiftLeft
.1f94	e8		inx				inx  								; shift 3rd right
.1f95	20 7d 20	jsr $207d			jsr 	MInt32ShiftRight
.1f98	20 86 20	jsr $2086			jsr 	MInt32Zero 					; check if zero.
.1f9b	08		php				php 								; save status bits
.1f9c	ca		dex				dex 	 							; point back to 1st
.1f9d	ca		dex				dex
.1f9e	28		plp				plp 								; get status bits
.1f9f	d0 e6		bne $1f87			bne 	_I32Loop 					; if non-zero keep going.
.1fa1	60		rts				rts
.1fa2					MInt32CopyUp:
.1fa2	b5 48		lda $48,x			lda 	esInt0,x
.1fa4	95 49		sta $49,x			sta 	esInt0+1,x
.1fa6	b5 50		lda $50,x			lda 	esInt1,x
.1fa8	95 51		sta $51,x			sta 	esInt1+1,x
.1faa	b5 58		lda $58,x			lda 	esInt2,x
.1fac	95 59		sta $59,x			sta 	esInt2+1,x
.1fae	b5 60		lda $60,x			lda 	esInt3,x
.1fb0	95 61		sta $61,x			sta 	esInt3+1,x
.1fb2	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32tostr.asm

>0af7					MCharCount:	.fill 	1						; count of converted characters
.1fb3					MLInt32ToString:
.1fb3	aa		tax				tax									; module passes stack in A, base in Y
.1fb4	98		tya				tya
.1fb5					MInt32ToString:
.1fb5	48		pha				pha 								; save base
.1fb6	85 0c		sta $0c				sta 	tempShort 					; save target base.
.1fb8	a9 00		lda #$00			lda 	#0
.1fba	8d f7 0a	sta $0af7			sta 	MCharCount 					; clear character count to 0
.1fbd	98		tya				tya
.1fbe	48		pha				pha
.1fbf	a5 0c		lda $0c				lda 	tempShort 					; check if we are signed conversion
.1fc1	10 10		bpl $1fd3			bpl 	_I32TSUnsigned
.1fc3	48		pha				pha 								; save base on stack.
.1fc4	b5 60		lda $60,x			lda 	esInt3,x 					; is it actually negative
.1fc6	10 08		bpl $1fd0			bpl 	_I32TSNoFlip
.1fc8	a9 2d		lda #$2d			lda 	#"-" 						; write a '-' prefix out.
.1fca	20 06 20	jsr $2006			jsr 	MI32WriteCharacter
.1fcd	20 19 20	jsr $2019			jsr 	MInt32Negate 				; negate the value.
.1fd0					_I32TSNoFlip:
.1fd0	68		pla				pla 								; get the base back
.1fd1	29 7f		and #$7f			and 	#$7F 						; clear the sign flag so it's just a base now.
.1fd3					_I32TSUnsigned:
.1fd3	20 e1 1f	jsr $1fe1			jsr 	MI32DivideWrite 			; recursive code to output string.
.1fd6	a0 00		ldy #$00			ldy 	#0 							; write charcount to first character.
.1fd8	ad f7 0a	lda $0af7			lda 	MCharCount
.1fdb	91 04		sta ($04),y			sta 	(temp0),y
.1fdd	68		pla				pla
.1fde	a8		tay				tay
.1fdf	68		pla				pla
.1fe0	60		rts				rts
.1fe1					MI32DivideWrite:
.1fe1	48		pha				pha 								; save the divisor/base
.1fe2	e8		inx				inx 								; write in the dividing position.
.1fe3	20 6e 20	jsr $206e			jsr 	MInt32Set8Bit
.1fe6	ca		dex				dex
.1fe7	20 65 1e	jsr $1e65			jsr 	MInt32UDivide 				; divide number by base.
.1fea	68		pla				pla 								; get the base into Y
.1feb	a8		tay				tay
.1fec	b5 4a		lda $4a,x			lda 	esInt0+2,x 					; get the remainder and push on the stack.
.1fee	48		pha				pha
.1fef	20 86 20	jsr $2086			jsr 	MInt32Zero 					; is the result zero ?
.1ff2	f0 04		beq $1ff8			beq 	_I32NoRecurse 				; if so, don't recurse.
.1ff4	98		tya				tya 								; put base into A
.1ff5	20 e1 1f	jsr $1fe1			jsr 	MI32DivideWrite 				; and jsr the dividor recursively.
.1ff8					_I32NoRecurse:
.1ff8	68		pla				pla 								; get the remainder back
.1ff9	c9 0a		cmp #$0a			cmp 	#10  						; handle hexadecimals.
.1ffb	90 02		bcc $1fff			bcc 	_I32NotHex
.1ffd	69 06		adc #$06			adc 	#7-1
.1fff					_I32NotHex:
.1fff	18		clc				clc 								; make it ASCII
.2000	69 30		adc #$30			adc 	#48
.2002	20 06 20	jsr $2006			jsr 	MI32WriteCharacter 			; write the character out
.2005	60		rts				rts 								; and exit.
.2006					MI32WriteCharacter:
.2006	ee f7 0a	inc $0af7			inc 	MCharCount 					; bump count (space for leading count)
.2009	ac f7 0a	ldy $0af7			ldy 	MCharCount 					; get position
.200c	91 04		sta ($04),y			sta 	(temp0),y 					; write out with trailing 0
.200e	c8		iny				iny
.200f	a9 00		lda #$00			lda 	#0
.2011	91 04		sta ($04),y			sta 	(temp0),y
.2013	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32unary.asm

>0af8					MSeed32:	.fill 	4							; random number seed.
.2014					MInt32Absolute:
.2014	b5 60		lda $60,x			lda 	esInt3,x 					; use negate code if -ve.
.2016	30 01		bmi $2019			bmi 	MInt32Negate
.2018	60		rts				rts
.2019					MInt32Negate:
.2019	38		sec				sec
.201a	a9 00		lda #$00			lda 	#0
.201c	f5 48		sbc $48,x			sbc 	esInt0,x
.201e	95 48		sta $48,x			sta 	esInt0,x
.2020	a9 00		lda #$00			lda 	#0
.2022	f5 50		sbc $50,x			sbc 	esInt1,x
.2024	95 50		sta $50,x			sta 	esInt1,x
.2026	a9 00		lda #$00			lda 	#0
.2028	f5 58		sbc $58,x			sbc 	esInt2,x
.202a	95 58		sta $58,x			sta 	esInt2,x
.202c	a9 00		lda #$00			lda 	#0
.202e	f5 60		sbc $60,x			sbc 	esInt3,x
.2030	95 60		sta $60,x			sta 	esInt3,x
.2032	60		rts				rts
.2033					MInt32Not:
.2033	b5 48		lda $48,x			lda 	esInt0,x
.2035	49 ff		eor #$ff			eor 	#$FF
.2037	95 48		sta $48,x			sta 	esInt0,x
.2039	b5 50		lda $50,x			lda 	esInt1,x
.203b	49 ff		eor #$ff			eor 	#$FF
.203d	95 50		sta $50,x			sta 	esInt1,x
.203f	b5 58		lda $58,x			lda 	esInt2,x
.2041	49 ff		eor #$ff			eor 	#$FF
.2043	95 58		sta $58,x			sta 	esInt2,x
.2045	b5 60		lda $60,x			lda 	esInt3,x
.2047	49 ff		eor #$ff			eor 	#$FF
.2049	95 60		sta $60,x			sta 	esInt3,x
.204b	60		rts				rts
.204c					MInt32Sign:
.204c	b5 60		lda $60,x			lda 	esInt3,x					; look at MSB
.204e	30 0b		bmi $205b			bmi 	MInt32True 					; if set return -1 (true)
.2050	20 86 20	jsr $2086			jsr 	MInt32Zero 					; is it zero ?
.2053	f0 0a		beq $205f			beq 	MInt32False 					; if zero return 0 (false)
.2055	20 5f 20	jsr $205f			jsr 	MInt32False 					; > 0 return 1
.2058	f6 48		inc $48,x			inc 	esInt0,x
.205a	60		rts				rts
.205b					MInt32True:
.205b	a9 ff		lda #$ff			lda 	#$FF 						; set to $FFFFFFFF
.205d	d0 02		bne $2061			bne 	MInt32WriteAll
.205f					MInt32False:
.205f	a9 00		lda #$00			lda 	#0
.2061					MInt32WriteAll:
.2061	95 48		sta $48,x			sta 	esInt0,x
.2063					MInt32Write123:
.2063	95 50		sta $50,x			sta 	esInt1,x
.2065	95 58		sta $58,x			sta 	esInt2,x
.2067	95 60		sta $60,x			sta 	esInt3,x
.2069	a9 00		lda #$00			lda 	#$00						; and make it an integer
.206b	95 40		sta $40,x			sta 	esType,x
.206d	60		rts				rts
.206e					MInt32Set8Bit:
.206e	95 48		sta $48,x			sta 	esInt0,x
.2070	a9 00		lda #$00			lda 	#0
.2072	f0 ef		beq $2063			beq		MInt32Write123
.2074					MInt32ShiftLeft:
.2074	16 48		asl $48,x			asl 	esInt0,x
.2076	36 50		rol $50,x			rol	 	esInt1,x
.2078	36 58		rol $58,x			rol	 	esInt2,x
.207a	36 60		rol $60,x			rol	 	esInt3,x
.207c	60		rts				rts
.207d					MInt32ShiftRight:
.207d	56 60		lsr $60,x			lsr 	esInt3,x
.207f	76 58		ror $58,x			ror 	esInt2,x
.2081	76 50		ror $50,x			ror 	esInt1,x
.2083	76 48		ror $48,x			ror 	esInt0,x
.2085	60		rts				rts
.2086					MInt32Zero:
.2086	b5 48		lda $48,x			lda 	esInt0,x
.2088	15 50		ora $50,x			ora 	esInt1,x
.208a	15 58		ora $58,x			ora 	esInt2,x
.208c	15 60		ora $60,x			ora 	esInt3,x
.208e	60		rts				rts
.208f					MInt32Random:
.208f	98		tya				tya
.2090	48		pha				pha
.2091	a0 07		ldy #$07			ldy 	#7
.2093	ad f8 0a	lda $0af8			lda 	MSeed32+0
.2096	d0 03		bne $209b			bne 	_Random1
.2098	a8		tay				tay
.2099	a9 aa		lda #$aa			lda		#$AA
.209b					_Random1:
.209b	0a		asl a				asl 	a
.209c	2e f9 0a	rol $0af9			rol 	MSeed32+1
.209f	2e fa 0a	rol $0afa			rol 	MSeed32+2
.20a2	2e fb 0a	rol $0afb			rol 	MSeed32+3
.20a5	90 02		bcc $20a9			bcc 	_Random2
.20a7	49 c5		eor #$c5			eor 	#$C5
.20a9					_Random2:
.20a9	88		dey				dey
.20aa	d0 ef		bne $209b			bne 	_Random1
.20ac	8d f8 0a	sta $0af8			sta 	MSeed32+0
.20af	95 48		sta $48,x			sta 	esInt0,x
.20b1	ad f9 0a	lda $0af9			lda 	MSeed32+1
.20b4	95 50		sta $50,x			sta 	esInt1,x
.20b6	ad fa 0a	lda $0afa			lda 	MSeed32+2
.20b9	95 58		sta $58,x			sta 	esInt2,x
.20bb	ad fb 0a	lda $0afb			lda 	MSeed32+3
.20be	95 60		sta $60,x			sta 	esInt3,x
.20c0	68		pla				pla
.20c1	a8		tay				tay
.20c2	a9 00		lda #$00			lda 	#0
.20c4	95 40		sta $40,x			sta 	esType,x
.20c6	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/utility/check.asm

.20c7					CheckToken:
.20c7	d1 02		cmp ($02),y			cmp 	(codePtr),y
.20c9	d0 02		bne $20cd			bne 	_CTError
.20cb	c8		iny				iny
.20cc	60		rts				rts
.20cd					_CTError:
.20cd	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.20cf	20 91 21	jsr $2191		jsr	errorHandler
.20d2					CheckRightParen:
.20d2	b1 02		lda ($02),y			lda 	(codePtr),y
.20d4	c8		iny				iny
.20d5	c9 c4		cmp #$c4			cmp 	#TKW_RPAREN
.20d7	d0 01		bne $20da			bne 	_CRPError
.20d9	60		rts				rts
.20da					_CRPError:
.20da	a2 09		ldx #$09			ldx 	#ErrorID_MissingRP
.20dc	20 91 21	jsr $2191		jsr	errorHandler
.20df					CheckComma:
.20df	b1 02		lda ($02),y			lda 	(codePtr),y
.20e1	c8		iny				iny
.20e2	c9 c6		cmp #$c6			cmp 	#TKW_COMMA
.20e4	d0 01		bne $20e7			bne 	_CCError
.20e6	60		rts				rts
.20e7					_CCError:
.20e7	a2 0a		ldx #$0a			ldx 	#ErrorID_MissingComma
.20e9	20 91 21	jsr $2191		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/utility/scanner.asm

.29a1					ScanForward:
.29a1	85 06		sta $06				sta 	temp1 						; save tokens to search in temp1/temp1+1
.29a3	86 07		stx $07				stx 	temp1+1
.29a5	a9 00		lda #$00			lda 	#0 							; temp2 counts structure levels.
.29a7	85 08		sta $08				sta 	temp2
.29a9	b1 02		lda ($02),y	_SFLoop:lda 	(codePtr),y 				; look at the next token.
.29ab	c8		iny				iny
.29ac	a6 08		ldx $08				ldx 	temp2 						; check structure levels are zero.
.29ae	d0 08		bne $29b8			bne 	_SFNoCheck 					; if so, check token against entered values.
.29b0	c5 06		cmp $06				cmp 	temp1
.29b2	f0 24		beq $29d8			beq 	_SFExit
.29b4	c5 07		cmp $07				cmp 	temp1+1
.29b6	f0 20		beq $29d8			beq 	_SFExit
.29b8					_SFNoCheck:
.29b8	c9 80		cmp #$80			cmp 	#$80 						; if it is 00-7F (variable/number) just skip it.
.29ba	90 ed		bcc $29a9			bcc 	_SFLoop
.29bc	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; $80-$85 is various specials.
.29be	90 19		bcc $29d9			bcc 	_SFSpecials
.29c0	c9 99		cmp #$99			cmp 	#TOK_STRUCTST 				; if < structure start then continue
.29c2	90 e5		bcc $29a9			bcc 	_SFLoop
.29c4	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST 				; if >= unary start (after structure) then continue.
.29c6	b0 e1		bcs $29a9			bcs 	_SFLoop
.29c8	aa		tax				tax  								; token in X, and look up the adjuster.
.29c9	bd 48 1a	lda $1a48,x			lda 	ELBinaryOperatorInfo-TOK_BINARYST,x
.29cc	38		sec				sec 								; convert to an offset
.29cd	e9 81		sbc #$81			sbc 	#$81
.29cf	18		clc				clc 								; add to depth
.29d0	65 08		adc $08				adc 	temp2
.29d2	85 08		sta $08				sta 	temp2
.29d4	10 d3		bpl $29a9			bpl 	_SFLoop 					; +ve okay to continue
.29d6	30 2a		bmi $2a02			bmi 	_SFError 					; if gone -ve then we have a nesting error
.29d8	60		rts		_SFExit:rts
.29d9					_SFSpecials:
.29d9	c9 80		cmp #$80			cmp 	#TOK_EOL 					; $80, advance to next line.
.29db	f0 14		beq $29f1			beq 	_SFNextLine
.29dd	c9 84		cmp #$84			cmp 	#TOK_FPC					; $84, skip embedded float
.29df	f0 26		beq $2a07			beq 	_SFFloatSkip
.29e1	c9 85		cmp #$85			cmp 	#TOK_STR 					; $85, skip string
.29e3	f0 04		beq $29e9			beq 	_SFSkipString
.29e5	c8		iny				iny									; $81,$82,$83 shift, so just advance over the shifted
.29e6	4c a9 29	jmp $29a9			jmp 	_SFLoop 					; token.
.29e9					_SFSkipString:
.29e9	98		tya				tya
.29ea	38		sec				sec
.29eb	71 02		adc ($02),y			adc 	(codePtr),y
.29ed	a8		tay				tay
.29ee	4c a9 29	jmp $29a9			jmp 	_SFLoop
.29f1					_SFNextLine:
.29f1	a0 00		ldy #$00			ldy 	#0 							; get offset
.29f3	b1 02		lda ($02),y			lda 	(codePtr),y
.29f5	18		clc				clc 								; add to code pointer.
.29f6	65 02		adc $02				adc 	codePtr
.29f8	85 02		sta $02				sta 	codePtr
.29fa	90 02		bcc $29fe			bcc		_SFNLNoCarry
.29fc	e6 03		inc $03				inc 	codePtr+1
.29fe					_SFNLNoCarry:
.29fe	b1 02		lda ($02),y			lda 	(codePtr),y 				; reached the end of the program.
.2a00	d0 a7		bne $29a9			bne		_SFLoop 					; no go round again
.2a02					_SFError:
.2a02	a2 14		ldx #$14			ldx 	#ErrorID_Struct
.2a04	20 91 21	jsr $2191		jsr	errorHandler
.2a07					_SFFloatSkip:
.2a07	4c 13 14	jmp $1413			jmp 	Unimplemented

;******  Return to file: main/main.asm


;******  Processing file: main/utility/stack.asm

.0078					rsPointer:
>0078							.fill 	2							; to TOS, which is the current top-token.
.20ec					RSReset:
.20ec	a9 ff		lda #$ff			lda 	#(returnStack+retStackSize-1) & $FF
.20ee	85 78		sta $78				sta 	rsPointer
.20f0	a9 09		lda #$09			lda 	#(returnStack+retStackSize-1) >> 8
.20f2	85 79		sta $79				sta 	1+(rsPointer)
.20f4	a9 ff		lda #$ff			lda 	#$FF 						; put a duff marker on TOS, so nothing will pop
.20f6	8d ff 09	sta $09ff			sta 	returnStack+retStackSize-1
.20f9	60		rts				rts
.20fa					RSClaim:
.20fa	84 0c		sty $0c				sty 	tempShort 					; preserve Y
.20fc	48		pha				pha 								; save marker on stack.
.20fd	8a		txa				txa 								; get bytes required.
.20fe	38		sec				sec
.20ff	49 ff		eor #$ff			eor 	#$FF 						; add to rsPointer using 2's complement.
.2101	65 78		adc $78				adc 	rsPointer
.2103	85 78		sta $78				sta 	rsPointer
.2105	a5 79		lda $79				lda 	rsPointer+1
.2107	69 ff		adc #$ff			adc 	#$FF
.2109	85 79		sta $79				sta 	rsPointer+1
.210b	c9 08		cmp #$08			cmp 	#returnStack>>8 			; overflow. underflow actually :)
.210d	90 08		bcc $2117			bcc 	_RSCOverflow
.210f	68		pla				pla 								; get marker back
.2110	a0 00		ldy #$00			ldy 	#0 							; write marker out.
.2112	91 78		sta ($78),y			sta 	(rsPointer),y
.2114	a4 0c		ldy $0c				ldy 	tempShort 					; restore Y and exit
.2116	60		rts				rts
.2117					_RSCOverflow:
.2117	a2 16		ldx #$16			ldx 	#ErrorID_RetStack
.2119	20 91 21	jsr $2191		jsr	errorHandler
.211c					RSFree:
.211c	18		clc				clc
.211d	65 78		adc $78				adc 	rsPointer
.211f	85 78		sta $78				sta 	rsPointer
.2121	90 02		bcc $2125			bcc 	_RSFExit
.2123	e6 79		inc $79				inc 	rsPointer+1
.2125					_RSFExit:
.2125	60		rts				rts
.2126					RSSavePosition:
.2126	84 0c		sty $0c				sty 	tempShort 					; save Y position
.2128	a8		tay				tay 								; this is where we write it.
.2129	a5 02		lda $02				lda 	codePtr 					; write codePointer out
.212b	91 78		sta ($78),y			sta 	(rsPointer),y
.212d	c8		iny				iny
.212e	a5 03		lda $03				lda 	codePtr+1
.2130	91 78		sta ($78),y			sta 	(rsPointer),y
.2132	c8		iny				iny
.2133	a5 0c		lda $0c				lda 	tempShort 					; write the Y position out.
.2135	91 78		sta ($78),y			sta 	(rsPointer),y
.2137	a8		tay				tay 								; fix Y back again to original value
.2138	60		rts				rts
.2139					RSLoadPosition:
.2139	a8		tay				tay
.213a	b1 78		lda ($78),y			lda 	(rsPointer),y 				; read codePointer back
.213c	85 02		sta $02				sta 	codePtr
.213e	c8		iny				iny
.213f	b1 78		lda ($78),y			lda 	(rsPointer),y
.2141	85 03		sta $03				sta 	codePtr+1
.2143	c8		iny				iny
.2144	b1 78		lda ($78),y			lda 	(rsPointer),y 				; and the offset
.2146	a8		tay				tay 								; to Y
.2147	60		rts				rts

;******  Return to file: main/main.asm

.2148					mainHandler:
.2148	7c 4b 21	jmp ($214b,x)			jmp 	(mainVectors,x)
.214b					mainVectors:
>214b	7b 1a					.word LinkEvaluate         ; index 0
>214d	81 1a					.word LinkEvaluateInteger  ; index 2
>214f	87 1a					.word LinkEvaluateSmallInt ; index 4
>2151	b3 1f					.word MLInt32ToString      ; index 6
>2153	f5 12					.word PrintString          ; index 8

;******  Return to file: basic.asm

.2155					section_end_main:
.2155					section_start_assembler:

;******  Processing file: assembler/assembler.asm

.2155					assemblerHandler:
.2155	7c 58 21	jmp ($2158,x)			jmp 	(assemblerVectors,x)
.2158					assemblerVectors:

;******  Return to file: basic.asm

.2158					section_end_assembler:
.2158					section_start_device:

;******  Processing file: device/device.asm


;******  Processing file: device/option_x16/x16io.asm

.2158					IONewLine:
.2158	48		pha				pha
.2159	a9 0d		lda #$0d			lda 	#13
.215b	20 68 21	jsr $2168			jsr 	IOPrintChar
.215e	68		pla				pla
.215f	60		rts				rts
.2160					IOTab:
.2160	48		pha				pha
.2161	a9 20		lda #$20			lda 	#32
.2163	20 68 21	jsr $2168			jsr 	IOPrintChar
.2166	68		pla				pla
.2167	60		rts				rts
.2168					IOPrintChar:
.2168	aa		tax				tax
.2169	5a		phy				phy
.216a	8a		txa				txa
.216b	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.216e	7a		ply				ply
.216f	60		rts				rts
.2170					IOInkey:
.2170	98		tya				tya
.2171	48		pha				pha
.2172	20 e4 ff	jsr $ffe4			jsr 	$FFE4
.2175	85 0c		sta $0c				sta 	tempShort
.2177	68		pla				pla
.2178	a8		tay				tay
.2179	a5 0c		lda $0c				lda 	tempShort
.217b	60		rts				rts

;******  Return to file: device/device.asm


;******  Processing file: device/option_x16/x16timer.asm

.217c					IOReadTimer:
.217c	20 de ff	jsr $ffde			jsr 	$FFDE
.217f	48		pha				pha
.2180	8a		txa				txa
.2181	a8		tay				tay
.2182	68		pla				pla
.2183	60		rts				rts

;******  Return to file: device/device.asm

.2184					deviceHandler:
.2184	7c 87 21	jmp ($2187,x)			jmp 	(deviceVectors,x)
.2187					deviceVectors:
>2187	58 21					.word IONewLine            ; index 0
>2189	70 21					.word IOInkey              ; index 2
>218b	68 21					.word IOPrintChar          ; index 4
>218d	60 21					.word IOTab                ; index 6
>218f	7c 21					.word IOReadTimer          ; index 8

;******  Return to file: basic.asm

.2191					section_end_device:
.2191					section_start_error:

;******  Processing file: error/error.asm


;******  Processing file: error/errorhandler.asm

.2191					ErrorHandler:
.2191	a9 fa		lda #$fa			lda 	#(ErrorTextList) & $FF
.2193	85 04		sta $04				sta 	temp0
.2195	a9 21		lda #$21			lda 	#(ErrorTextList) >> 8
.2197	85 05		sta $05				sta 	1+(temp0)
.2199	ca		dex		_EHFind:dex
.219a	f0 10		beq $21ac			beq 	_EHFound
.219c	a0 00		ldy #$00			ldy 	#0 							; goto next text message
.219e	38		sec				sec
.219f	a5 04		lda $04				lda 	temp0
.21a1	71 04		adc ($04),y			adc 	(temp0),y
.21a3	85 04		sta $04				sta 	temp0
.21a5	90 f2		bcc $2199			bcc 	_EHFind
.21a7	e6 05		inc $05				inc 	temp0+1
.21a9	4c 99 21	jmp $2199			jmp 	_EHFind
.21ac					_EHFound:
.21ac	a2 08		ldx #$08		ldx	#8
.21ae	20 48 21	jsr $2148		jsr	mainHandler
.21b1	a0 00		ldy #$00			ldy 	#0 							; in a line ?
.21b3	b1 02		lda ($02),y			lda 	(codePtr),y
.21b5	f0 0d		beq $21c4			beq 	_EHNoLine
.21b7	a9 f0		lda #$f0			lda 	#(EHAtMsg) & $FF
.21b9	85 04		sta $04				sta 	temp0
.21bb	a9 21		lda #$21			lda 	#(EHAtMsg) >> 8
.21bd	85 05		sta $05				sta 	1+(temp0)
.21bf	a2 08		ldx #$08		ldx	#8
.21c1	20 48 21	jsr $2148		jsr	mainHandler
.21c4					_EHNoLine:
.21c4	a0 01		ldy #$01			ldy 	#1
.21c6	a2 00		ldx #$00			ldx 	#0
.21c8	b1 02		lda ($02),y			lda 	(codePtr),y
.21ca	95 48		sta $48,x			sta 	esInt0,x
.21cc	c8		iny				iny
.21cd	b1 02		lda ($02),y			lda 	(codePtr),y
.21cf	95 50		sta $50,x			sta 	esInt1,x
.21d1	a9 00		lda #$00			lda 	#0
.21d3	95 58		sta $58,x			sta 	esInt2,x
.21d5	95 60		sta $60,x			sta 	esInt3,x
.21d7	a9 cd		lda #$cd			lda 	#(convertBuffer) & $FF
.21d9	85 04		sta $04				sta 	temp0
.21db	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.21dd	85 05		sta $05				sta 	1+(temp0)
.21df	a0 0a		ldy #$0a			ldy 	#10
.21e1	a9 00		lda #$00			lda 	#0
.21e3	a2 06		ldx #$06		ldx	#6
.21e5	20 48 21	jsr $2148		jsr	mainHandler
.21e8	a2 08		ldx #$08		ldx	#8
.21ea	20 48 21	jsr $2148		jsr	mainHandler
.21ed	4c ed 21	jmp $21ed	_EHHalt:jmp 	_EHHalt
.21f0					EHAtMsg:
>21f0	09 20 41 54 20 4c 49 4e				.text 	9," AT LINE "
>21f8	45 20

;******  Processing file: error/../generated/errortext.inc

.21fa					ErrorTextList:
>21fa	13 46 45 41 54 55 52 45			.text 19,"FEATURE NOT PRESENT"
>2202	20 4e 4f 54 20 50 52 45 53 45 4e 54
>220e	0c 53 59 4e 54 41 58 20			.text 12,"SYNTAX ERROR"
>2216	45 52 52 4f 52
>221b	0f 4d 4f 44 55 4c 45 20			.text 15,"MODULE DISABLED"
>2223	44 49 53 41 42 4c 45 44
>222b	10 41 53 53 45 52 54 49			.text 16,"ASSERTION FAILED"
>2233	4f 4e 20 46 41 49 4c 45 44
>223c	0e 44 49 56 49 44 45 20			.text 14,"DIVIDE BY ZERO"
>2244	42 59 20 5a 45 52 4f
>224b	04 53 54 4f 50				.text 4,"STOP"
>2250	0d 54 59 50 45 20 4d 49			.text 13,"TYPE MISMATCH"
>2258	53 4d 41 54 43 48
>225e	0d 49 4c 4c 45 47 41 4c			.text 13,"ILLEGAL VALUE"
>2266	20 56 41 4c 55 45
>226c	15 4d 49 53 53 49 4e 47			.text 21,"MISSING RIGHT BRACKET"
>2274	20 52 49 47 48 54 20 42 52 41 43 4b 45 54
>2282	0d 4d 49 53 53 49 4e 47			.text 13,"MISSING COMMA"
>228a	20 43 4f 4d 4d 41
>2290	11 4d 49 53 53 49 4e 47			.text 17,"MISSING REFERENCE"
>2298	20 52 45 46 45 52 45 4e 43 45
>22a2	15 4c 49 4e 45 20 4e 55			.text 21,"LINE NUMBER NOT FOUND"
>22aa	4d 42 45 52 20 4e 4f 54 20 46 4f 55 4e 44
>22b8	10 53 54 52 49 4e 47 20			.text 16,"STRING TOO LONG."
>22c0	54 4f 4f 20 4c 4f 4e 47 2e
>22c9	14 52 45 54 55 52 4e 20			.text 20,"RETURN WITHOUT GOSUB"
>22d1	57 49 54 48 4f 55 54 20 47 4f 53 55 42
>22de	14 55 4e 54 49 4c 20 57			.text 20,"UNTIL WITHOUT REPEAT"
>22e6	49 54 48 4f 55 54 20 52 45 50 45 41 54
>22f3	10 4e 45 58 54 20 57 49			.text 16,"NEXT WITHOUT FOR"
>22fb	54 48 4f 55 54 20 46 4f 52
>2304	12 57 45 4e 44 20 57 49			.text 18,"WEND WITHOUT WHILE"
>230c	54 48 4f 55 54 20 57 48 49 4c 45
>2317	14 45 4e 44 50 52 4f 43			.text 20,"ENDPROC WITHOUT PROC"
>231f	20 57 49 54 48 4f 55 54 20 50 52 4f 43
>232c	0e 42 41 44 20 4e 45 58			.text 14,"BAD NEXT INDEX"
>2334	54 20 49 4e 44 45 58
>233b	17 53 54 52 55 43 54 55			.text 23,"STRUCTURES NESTED WRONG"
>2343	52 45 53 20 4e 45 53 54 45 44 20 57 52 4f 4e 47
>2353	16 43 41 4e 4e 4f 54 20			.text 22,"CANNOT CREATE VARIABLE"
>235b	43 52 45 41 54 45 20 56 41 52 49 41 42 4c 45
>236a	1a 52 45 54 55 52 4e 20			.text 26,"RETURN STACK OUT OF SPACE."
>2372	53 54 41 43 4b 20 4f 55 54 20 4f 46 20 53 50 41
>2382	43 45 2e
>2385	11 55 4e 4b 4e 4f 57 4e			.text 17,"UNKNOWN PROCEDURE"
>238d	20 50 52 4f 43 45 44 55 52 45
>2397	18 50 41 52 41 4d 45 54			.text 24,"PARAMETERS DO NOT MATCH."
>239f	45 52 53 20 44 4f 20 4e 4f 54 20 4d 41 54 43 48
>23af	2e
>23b0	00					.byte 0

;******  Return to file: error/errorhandler.asm


;******  Return to file: error/error.asm


;******  Return to file: basic.asm

.23b1					section_end_error:
.23b1					section_start_extension:

;******  Processing file: extension/extension.asm


;******  Processing file: extension/extensionhandler.asm

.23b1					ExtensionHandler:
.23b1	c9 ff		cmp #$ff			cmp 	#$FF						; A = $FF command, otherwise unary function stack level.
.23b3	d0 08		bne $23bd			bne 	_ExtensionUnary
.23b5	b1 02		lda ($02),y			lda 	(codePtr),y
.23b7	c8		iny				iny
.23b8	0a		asl a				asl 	a
.23b9	aa		tax				tax
.23ba	7c bb 23	jmp ($23bb,x)			jmp 	(Group2Vectors-12,X)
.23bd					_ExtensionUnary:
.23bd	48		pha				pha 								; save stack pos in A
.23be	b1 02		lda ($02),y			lda 	(codePtr),y 				; get shifted token
.23c0	c8		iny				iny
.23c1	0a		asl a				asl 	a
.23c2	aa		tax				tax
.23c3	68		pla				pla
.23c4	7c bf 23	jmp ($23bf,x)			jmp 	(Group3Vectors-12,X)

;******  Processing file: extension/../generated/tokenvectors2.inc

.23c7					Group2Vectors:
>23c7	d7 23					.word	Command_VPoke            ; $86 vpoke
>23c9	da 23					.word	Command_VDoke            ; $87 vdoke

;******  Return to file: extension/extensionhandler.asm


;******  Processing file: extension/../generated/tokenvectors3.inc

.23cb					Group3Vectors:
>23cb	1b 24					.word	Command_VPeek            ; $86 vpeek(
>23cd	1e 24					.word	Command_VDeek            ; $87 vdeek(

;******  Return to file: extension/extensionhandler.asm

.23cf					XEvaluateInteger:
.23cf	8a		txa				txa
.23d0	a2 02		ldx #$02		ldx	#2
.23d2	20 48 21	jsr $2148		jsr	mainHandler
.23d5	aa		tax				tax
.23d6	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/vpeekpoke.asm

.23d7					Command_VPoke:
.23d7	38		sec				sec 						; one byte , CS
.23d8	b0 01		bcs $23db			bcs 	CmdVideoWrite
.23da					Command_VDoke:
.23da	18		clc				clc 						; two bytes, CC
.23db					CmdVideoWrite:
.23db	08		php				php
.23dc	a2 00		ldx #$00			ldx 	#0  				; get address into levels 0,1
.23de	20 cf 23	jsr $23cf			jsr 	XEvaluateInteger
.23e1	20 df 20	jsr $20df			jsr 	CheckComma
.23e4	e8		inx				inx
.23e5	20 cf 23	jsr $23cf			jsr 	XEvaluateInteger
.23e8	ca		dex				dex
.23e9	20 fa 23	jsr $23fa			jsr 	SetUpTOSVRamAddress
.23ec	a5 49		lda $49				lda 	esInt0+1 			; get MSB of write value
.23ee	8d 23 9f	sta $9f23			sta 	$9F23
.23f1	28		plp				plp 						; if it was Poke then exit
.23f2	b0 05		bcs $23f9			bcs 	_CVWExit
.23f4	a5 51		lda $51				lda 	esInt1+1 			; doke, write the MSB.
.23f6	8d 23 9f	sta $9f23			sta 	$9F23
.23f9					_CVWExit:
.23f9	60		rts				rts
.23fa					SetUpTOSVRamAddress:
.23fa	b5 58		lda $58,x			lda 	esInt2,x 			; check range of address, data to $FFFF
.23fc	29 01		and #$01			and 	#1
.23fe	15 60		ora $60,x			ora 	esInt3,x
.2400	d0 14		bne $2416			bne 	CVWValue
.2402	b5 48		lda $48,x			lda 	esInt0,x				; set address up
.2404	8d 20 9f	sta $9f20			sta 	$9F20
.2407	b5 50		lda $50,x			lda 	esInt1,x
.2409	8d 21 9f	sta $9f21			sta	 	$9F21
.240c	b5 58		lda $58,x			lda 	esInt2,x
.240e	29 01		and #$01			and 	#1
.2410	09 10		ora #$10			ora 	#$10 				; step 1.
.2412	8d 22 9f	sta $9f22			sta 	$9F22
.2415	60		rts				rts
.2416					CVWValue:
.2416	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.2418	20 91 21	jsr $2191		jsr	errorHandler
.241b					Command_VPeek:
.241b	38		sec				sec 						; one byte , CS
.241c	b0 01		bcs $241f			bcs 	CmdVideoRead
.241e					Command_VDeek:
.241e	18		clc				clc 						; two bytes, CC
.241f					CmdVideoRead:
>241f	db						.byte 	$DB
.2420	08		php				php 						; save action on stack.
.2421	aa		tax				tax 						; save stack position
.2422	20 cf 23	jsr $23cf			jsr 	XEvaluateInteger 	; address
.2425	20 d2 20	jsr $20d2			jsr 	CheckRightParen 	; closing right bracket.
.2428	20 fa 23	jsr $23fa			jsr 	SetUpTOSVRamAddress	; set up VRAM address.
.242b	a9 00		lda #$00			lda 	#0 					; zero the return value
.242d	95 60		sta $60,x			sta 	esInt3,x
.242f	95 58		sta $58,x			sta 	esInt2,x
.2431	95 50		sta $50,x			sta 	esInt1,x
.2433	ad 23 9f	lda $9f23			lda 	$9F23
.2436	95 48		sta $48,x			sta 	esInt0,x
.2438	28		plp				plp
.2439	b0 05		bcs $2440			bcs 	_CVRExit
.243b	ad 23 9f	lda $9f23			lda 	$9F23
.243e	95 50		sta $50,x			sta 	esInt1,x
.2440					_CVRExit:
.2440	8a		txa				txa 						; return X position.
.2441	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Return to file: basic.asm

.2442					section_end_extension:
.2442					section_start_floatingpoint:

;******  Processing file: floatingpoint/floatingpoint.asm

.2442					floatingpointHandler:
.2442	a2 03		ldx #$03			ldx 	#ErrorID_NoModule
.2444	20 91 21	jsr $2191		jsr	errorHandler

;******  Return to file: basic.asm

.2447					section_end_floatingpoint:
.2447					section_start_interaction:

;******  Processing file: interaction/interaction.asm

.2447					interactionHandler:
.2447	7c 4a 24	jmp ($244a,x)			jmp 	(interactionVectors,x)
.244a					interactionVectors:

;******  Return to file: basic.asm

.244a					section_end_interaction:
.244a					section_start_string:

;******  Processing file: string/string.asm


;******  Processing file: string/chr.asm

.244a					StringChrs:
.244a	aa		tax				tax 								; set up stack
.244b	a9 02		lda #$02			lda 	#2
.244d	20 04 25	jsr $2504			jsr 	AllocateSoftString
.2450	98		tya				tya
.2451	20 2a 25	jsr $252a			jsr 	WriteSoftString
.2454	20 59 24	jsr $2459			jsr 	ReturnSoftString
.2457	8a		txa				txa
.2458	60		rts				rts
.2459					ReturnSoftString:
.2459	a5 7a		lda $7a				lda 	softMemAlloc
.245b	95 48		sta $48,x			sta 	esInt0,x
.245d	a5 7b		lda $7b				lda 	softMemAlloc+1
.245f	95 50		sta $50,x			sta 	esInt1,x
.2461	a9 00		lda #$00			lda 	#0
.2463	95 58		sta $58,x			sta 	esInt2,x
.2465	95 60		sta $60,x			sta 	esInt3,x
.2467	a9 40		lda #$40			lda 	#$40
.2469	95 40		sta $40,x			sta 	esType,x
.246b	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/compare.asm

.246c					STRCompare:
.246c	48		pha				pha 								; save A
.246d	aa		tax				tax 								; put stack pos in X
.246e	98		tya				tya
.246f	48		pha				pha
.2470	20 a4 24	jsr $24a4			jsr 	CopyStringPair
.2473	a0 00		ldy #$00			ldy 	#0 							; get the smaller of the two string sizes.
.2475	b1 04		lda ($04),y			lda 	(temp0),y
.2477	d1 06		cmp ($06),y			cmp 	(temp1),y
.2479	90 02		bcc $247d			bcc 	_SCNotSmaller
.247b	b1 06		lda ($06),y			lda 	(temp1),y
.247d					_SCNotSmaller:
.247d	aa		tax				tax 								; put that in X. We compare this many chars first.
.247e					_SCCompareLoop:
.247e	e0 00		cpx #$00			cpx 	#0 							; if compared all the smaller, then it is the shorter
.2480	f0 0c		beq $248e			beq 	_SCSameToEndShortest 		; one that is the smallest if they are different lengths.
.2482	ca		dex				dex 								; decrement chars to compare.
.2483	c8		iny				iny 								; move to next character
.2484	38		sec				sec 								; calculate s1[y]-s2[y]
.2485	b1 04		lda ($04),y			lda 	(temp0),y
.2487	f1 06		sbc ($06),y			sbc 	(temp1),y
.2489	d0 0a		bne $2495			bne 	_SCReturnResult 			; if different return sign of A
.248b	4c 7e 24	jmp $247e			jmp 	_SCCompareLoop
.248e					_SCSameToEndShortest
.248e	a0 00		ldy #$00			ldy 	#0 							; compare len(s1) - len(s2)
.2490	38		sec				sec
.2491	b1 04		lda ($04),y			lda 	(temp0),y
.2493	f1 06		sbc ($06),y			sbc 	(temp1),y
.2495					_SCReturnResult:
.2495	08		php				php 								; set return to zero preserving PSW.
.2496	a2 00		ldx #$00			ldx 	#0
.2498	28		plp				plp
.2499	f0 05		beq $24a0			beq 	_SCExit 					; two values equal, then exit
.249b	ca		dex				dex 								; X = $FF
.249c	90 02		bcc $24a0			bcc 	_SCExit 					; if 1st < 2nd then -1
.249e	a2 01		ldx #$01			ldx 	#1 							; X = $01 if greater
.24a0					_SCExit:
.24a0	68		pla				pla
.24a1	a8		tay				tay
.24a2	68		pla				pla
.24a3	60		rts				rts
.24a4					CopyStringPair:
.24a4	b5 49		lda $49,x			lda 	esInt0+1,x
.24a6	85 06		sta $06				sta 	temp1
.24a8	b5 51		lda $51,x			lda 	esInt1+1,x
.24aa	85 07		sta $07				sta 	temp1+1
.24ac					CopyStringTop:
.24ac	b5 48		lda $48,x			lda 	esInt0,x
.24ae	85 04		sta $04				sta 	temp0
.24b0	b5 50		lda $50,x			lda 	esInt1,x
.24b2	85 05		sta $05				sta 	temp0+1
.24b4	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/concat.asm

.24b5					StringConcat:
.24b5	aa		tax				tax									; stack pos in X
.24b6	98		tya				tya
.24b7	48		pha				pha
.24b8	20 a4 24	jsr $24a4			jsr 	CopyStringPair 				; temp0 and temp1 point to strings to concat.
.24bb	38		sec				sec 								; calculate alloc strings. lengths added + 1 for size.
.24bc	a0 00		ldy #$00			ldy 	#0
.24be	b1 04		lda ($04),y			lda 	(temp0),y
.24c0	71 06		adc ($06),y			adc 	(temp1),y
.24c2	b0 1c		bcs $24e0			bcs 	_SCError 					; just too many characters here.
.24c4	c9 fc		cmp #$fc			cmp 	#MaxStringSize
.24c6	b0 18		bcs $24e0			bcs 	_SCError
.24c8	20 04 25	jsr $2504			jsr 	AllocateSoftString 			; allocate soft string memory, set pointer.
.24cb	20 fb 24	jsr $24fb			jsr 	CopySoftToStack 			; copy that to the stack.
.24ce	20 e5 24	jsr $24e5			jsr 	SCCopyTemp0 				; copy temp0
.24d1	a5 06		lda $06				lda 	temp1 						; copy temp1 to temp0
.24d3	85 04		sta $04				sta 	temp0
.24d5	a5 07		lda $07				lda 	temp1+1
.24d7	85 05		sta $05				sta 	temp0+1
.24d9	20 e5 24	jsr $24e5			jsr 	SCCopyTemp0 				; copy temp0 e.g. what was temp1.
.24dc	68		pla				pla
.24dd	a8		tay				tay
.24de	8a		txa				txa 								; and A
.24df	60		rts				rts
.24e0					_SCError:
.24e0	a2 0d		ldx #$0d			ldx 	#ErrorID_StrLen
.24e2	20 91 21	jsr $2191		jsr	errorHandler
.24e5					SCCopyTemp0:
.24e5	a0 00		ldy #$00			ldy 	#0 							; put count in temp2
.24e7	b1 04		lda ($04),y			lda 	(temp0),y
.24e9	85 08		sta $08				sta 	temp2
.24eb					_SCCopyLoop:
.24eb	a5 08		lda $08				lda 	temp2 						; done the lot
.24ed	f0 0b		beq $24fa			beq 	_SCCopyExit
.24ef	c6 08		dec $08				dec 	temp2
.24f1	c8		iny				iny 								; get next char
.24f2	b1 04		lda ($04),y			lda 	(temp0),y
.24f4	20 2a 25	jsr $252a			jsr 	WriteSoftString 			; write to soft string.
.24f7	4c eb 24	jmp $24eb			jmp 	_SCCopyLoop
.24fa					_SCCopyExit:
.24fa	60		rts				rts
.24fb					CopySoftToStack:
.24fb	a5 7a		lda $7a				lda 	SoftMemAlloc 				; copy the memory allocation pointer to the stack.
.24fd	95 48		sta $48,x			sta 	esInt0,x 					; type is already string.
.24ff	a5 7b		lda $7b				lda 	SoftMemAlloc+1
.2501	95 50		sta $50,x			sta 	esInt1,x
.2503	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/memory.asm

.007a					softMemAlloc:
>007a							.fill 	2  							; if MSB is zero needs resetting on allocation.
.2504					AllocateSoftString:
.2504	85 0c		sta $0c				sta 	tempShort 					; save count
.2506	98		tya				tya
.2507	48		pha				pha
.2508	a5 7b		lda $7b				lda 	softMemAlloc+1 				; if the high byte is zero, it needs allocating.
.250a	d0 09		bne $2515			bne 	_ASSDone
.250c	a5 0d		lda $0d				lda 	highMemory 					; reset the soft memory alloc pointer.
.250e	85 7a		sta $7a				sta 	softMemAlloc 				; to speed up slightly, we only reset this when we first need it
.2510	a4 0e		ldy $0e				ldy 	highMemory+1 				; but it needs to be reset before each command.
.2512	88		dey				dey
.2513	84 7b		sty $7b				sty 	softMemAlloc+1
.2515					_ASSDone:
.2515	38		sec				sec 								; allocate downwards enough memory
.2516	a5 7a		lda $7a				lda 	softMemAlloc
.2518	e5 0c		sbc $0c				sbc 	tempShort
.251a	85 7a		sta $7a				sta 	softMemAlloc
.251c	a5 7b		lda $7b				lda 	softMemAlloc+1
.251e	e9 00		sbc #$00			sbc 	#0
.2520	85 7b		sta $7b				sta 	softMemAlloc+1
.2522	a9 00		lda #$00			lda 	#0 							; empty that string, set the length = 0.
.2524	a8		tay				tay
.2525	91 7a		sta ($7a),y			sta 	(softMemAlloc),y
.2527	68		pla				pla
.2528	a8		tay				tay
.2529	60		rts				rts
.252a					WriteSoftString:
.252a	84 0c		sty $0c				sty 	tempShort 					; save Y
.252c	48		pha				pha
.252d	a0 00		ldy #$00			ldy 	#0 							; get and bump length
.252f	b1 7a		lda ($7a),y			lda 	(softMemAlloc),y
.2531	18		clc				clc
.2532	69 01		adc #$01			adc 	#1
.2534	91 7a		sta ($7a),y			sta 	(softMemAlloc),y
.2536	a8		tay				tay 								; pointer in Y
.2537	68		pla				pla 								; get char and write.
.2538	91 7a		sta ($7a),y			sta 	(softMemAlloc),y
.253a	a4 0c		ldy $0c				ldy 	tempShort 					; restore Y and exit.
.253c	60		rts				rts
.253d					StrClone:
.253d	aa		tax				tax 								; set up stack.
.253e	98		tya				tya
.253f	48		pha				pha
.2540	a0 00		ldy #$00			ldy 	#0 							; get length, add 1 for length
.2542	b1 04		lda ($04),y			lda 	(temp0),y
.2544	18		clc				clc
.2545	69 01		adc #$01			adc 	#1
.2547	20 04 25	jsr $2504			jsr 	AllocateSoftString 			; allocate soft memory
.254a	a5 7a		lda $7a				lda 	softMemAlloc 				; copy that address to TOS
.254c	95 48		sta $48,x			sta 	esInt0,x
.254e	a5 7b		lda $7b				lda 	softMemAlloc+1
.2550	95 50		sta $50,x			sta 	esInt1,x
.2552	a9 00		lda #$00			lda 	#0
.2554	95 58		sta $58,x			sta 	esInt2,x
.2556	95 60		sta $60,x			sta 	esInt3,x
.2558	a9 40		lda #$40			lda 	#$40 						; set type to string.
.255a	95 40		sta $40,x			sta 	esType,x
.255c	20 e5 24	jsr $24e5			jsr 	SCCopyTemp0 				; copy temp0 string to soft memory copy (concat.asm)
.255f	68		pla				pla
.2560	a8		tay				tay
.2561	8a		txa				txa
.2562	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/substring.asm

.2563					StringSubstring:
.2563	48		pha				pha
.2564	aa		tax				tax 								; access stack.
.2565	98		tya				tya
.2566	48		pha				pha
.2567	20 ac 24	jsr $24ac			jsr 	CopyStringTop 				; point temp0 to the string.
.256a	a0 00		ldy #$00			ldy 	#0 							; get length.
.256c	b1 04		lda ($04),y			lda 	(temp0),Y
.256e	85 06		sta $06				sta 	temp1
.2570	b5 49		lda $49,x			lda 	esInt0+1,x 					; get the initial offset
.2572	c5 06		cmp $06				cmp 	temp1 						;
.2574	f0 02		beq $2578			beq 	_SSBOkay
.2576	b0 2a		bcs $25a2			bcs 	_SSBReturnNull
.2578					_SSBOkay:
.2578	a5 06		lda $06				lda 	temp1 						; get the total length +1
.257a	18		clc				clc
.257b	69 01		adc #$01			adc 	#1
.257d	38		sec				sec
.257e	f5 49		sbc $49,x			sbc 	esInt0+1,x 					; the anything >= this is bad.
.2580	d5 4a		cmp $4a,x			cmp 	esInt0+2,x  				; check bad >= required
.2582	90 02		bcc $2586			bcc		_SSBTrunc
.2584	b5 4a		lda $4a,x			lda 	esInt0+2,x
.2586					_SSBTrunc:
.2586	85 07		sta $07				sta 	temp1+1 					; characters to copy.
.2588	18		clc				clc
.2589	69 01		adc #$01			adc 	#1 							; add 1
.258b	20 04 25	jsr $2504			jsr 	AllocateSoftString 			; allocate soft string memory, set pointer.
.258e	20 fb 24	jsr $24fb			jsr 	CopySoftToStack 			; copy that to the stack.
.2591	b4 49		ldy $49,x			ldy 	esInt0+1,x 					; get initial position of char to copy
.2593					_SSBCopyLoop:
.2593	a5 07		lda $07				lda 	temp1+1 					; done them all
.2595	f0 0e		beq $25a5			beq 	_SSBExit
.2597	c6 07		dec $07				dec 	temp1+1
.2599	b1 04		lda ($04),y			lda 	(temp0),y 					; get and write character
.259b	20 2a 25	jsr $252a			jsr 	WriteSoftString
.259e	c8		iny				iny
.259f	4c 93 25	jmp $2593			jmp 	_SSBCopyLoop
.25a2					_SSBReturnNull:
.25a2	20 a9 25	jsr $25a9			jsr 	ReturnNull
.25a5					_SSBExit:
.25a5	68		pla				pla
.25a6	a8		tay				tay
.25a7	68		pla				pla
.25a8	60		rts				rts
.25a9					ReturnNull:
.25a9	a9 00		lda #$00			lda 	#0 							; clear null string
.25ab	8d cc 0a	sta $0acc			sta 	NullString
.25ae	a9 cc		lda #$cc			lda 	#NullString & $FF 			; set a pointer to it
.25b0	95 48		sta $48,x			sta 	esInt0,x
.25b2	a9 0a		lda #$0a			lda 	#NullString >> 8
.25b4	95 50		sta $50,x			sta 	esInt1,x
.25b6	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/write.asm

.0afc					srcStrLen:
>0afc							.fill 	1
.25b7					StringWrite:
.25b7	aa		tax				tax
.25b8	48		pha				pha
.25b9	98		tya				tya
.25ba	48		pha				pha
.25bb	20 e2 25	jsr $25e2			jsr 	CheckOverwriteCurrent
.25be	b0 0d		bcs $25cd			bcs		_SWCopyCurrent
.25c0	20 20 26	jsr $2620			jsr 	RequiresConcretion
.25c3	90 0e		bcc $25d3			bcc 	_SWWriteReference
.25c5	20 83 26	jsr $2683			jsr 	CheckSpecialConcretion
.25c8	b0 09		bcs $25d3			bcs 	_SWWriteReference
.25ca	20 34 26	jsr $2634			jsr 	AllocateHardMemory
.25cd					_SWCopyCurrent:
.25cd	20 67 26	jsr $2667			jsr 	CopyStringToHardMemory
.25d0	4c de 25	jmp $25de			jmp 	_SWExit
.25d3					_SWWriteReference
.25d3	a0 00		ldy #$00			ldy 	#0
.25d5	a5 04		lda $04				lda 	temp0
.25d7	91 06		sta ($06),y			sta 	(temp1),y
.25d9	c8		iny				iny
.25da	a5 05		lda $05				lda 	temp0+1
.25dc	91 06		sta ($06),y			sta 	(temp1),y
.25de					_SWExit:
.25de	68		pla				pla
.25df	a8		tay				tay
.25e0	68		pla				pla
.25e1	60		rts				rts
.25e2					CheckOverwriteCurrent:
.25e2	a0 00		ldy #$00			ldy 	#0 						; get address of string being written to temp0
.25e4	b5 51		lda $51,x			lda 	esInt1+1,x
.25e6	85 05		sta $05				sta 	temp0+1
.25e8	b5 49		lda $49,x			lda 	esInt0+1,x
.25ea	85 04		sta $04				sta 	temp0
.25ec	b1 04		lda ($04),y			lda 	(temp0),y 				; get length of string being copied.
.25ee	8d fc 0a	sta $0afc			sta 	srcStrLen
.25f1	b5 48		lda $48,x			lda 	esInt0,x 				; copy where the final address it being written to temp1.
.25f3	85 06		sta $06				sta 	temp1 					; e.g. if it is ax$ then temp1 will point to the ax$
.25f5	b5 50		lda $50,x			lda 	esInt1,x 				; data record + 5
.25f7	85 07		sta $07				sta 	temp1+1
.25f9	a0 01		ldy #$01			ldy 	#1 						; get the MSB of the address of string currently stored there.
.25fb	b1 06		lda ($06),y			lda 	(temp1),y
.25fd	c5 0e		cmp $0e				cmp 	highMemory+1 			; if < high memory then it cannot be something stored
.25ff	90 1b		bcc $261c			bcc 	_COCFail 				; in hard memory.
.2601	a0 00		ldy #$00			ldy 	#0 						; copy target address - 1 into temp2
.2603	b1 06		lda ($06),y			lda 	(temp1),y
.2605	e9 01		sbc #$01			sbc 	#1
.2607	85 08		sta $08				sta 	temp2
.2609	c8		iny				iny
.260a	b1 06		lda ($06),y			lda 	(temp1),y
.260c	e9 00		sbc #$00			sbc 	#0
.260e	85 09		sta $09				sta 	temp2+1
.2610	a0 00		ldy #$00			ldy 	#0 						; how large is this physical chunk.
.2612	b1 08		lda ($08),y			lda 	(temp2),y
.2614	38		sec				sec  							; maximum character capacity.
.2615	e9 02		sbc #$02			sbc 	#2
.2617	cd fc 0a	cmp $0afc			cmp 	srcStrLen 				; if >= the required length
.261a	b0 02		bcs $261e			bcs 	_COCCanReuse
.261c					_COCFail:
.261c	18		clc				clc
.261d	60		rts				rts
.261e					_COCCanReuse:
.261e	38		sec				sec
.261f	60		rts				rts
.2620					RequiresConcretion:
.2620	a5 05		lda $05				lda 	temp0+1 				; get MSB of address of string to be written
.2622	c5 0e		cmp $0e				cmp 	highMemory+1 			; if >= high memory it is concreted
.2624	b0 0a		bcs $2630			bcs 	_RCSucceed 				; so it needs concreting again - duplication.
.2626	a5 7b		lda $7b				lda 	softMemAlloc+1 			; have we allocated any soft memory yet ?
.2628	f0 08		beq $2632			beq 	_RCFail 				; if not, this cannot be soft memory.
.262a	a5 05		lda $05				lda 	temp0+1 				; get MSB of address of string to be written
.262c	c5 7b		cmp $7b				cmp 	softMemAlloc+1 			; if >= soft mem alloc it is either soft
.262e	90 02		bcc $2632			bcc 	_RCFail 				; so concreting
.2630					_RCSucceed:
.2630	38		sec				sec
.2631	60		rts				rts
.2632					_RCFail:
.2632	18		clc				clc
.2633	60		rts				rts
.2634					AllocateHardMemory:
.2634	98		tya				tya
.2635	48		pha				pha
.2636	ad fc 0a	lda $0afc			lda 	srcStrLen 				; characters in string
.2639	69 0a		adc #$0a			adc 	#1+1+8 					; one for hard memory size, one for string size, extra for expansion
.263b	b0 04		bcs $2641			bcs 	_AHMSetMax 				; max out that amount.
.263d	c9 fe		cmp #$fe			cmp 	#MaxStringSize+2
.263f	90 02		bcc $2643			bcc 	_AHMIsOkay
.2641					_AHMSetMax:
.2641	a9 fe		lda #$fe			lda 	#MaxStringSize+2
.2643					_AHMIsOkay:
.2643	48		pha				pha
.2644	49 ff		eor #$ff			eor 	#$FF 					; complement and add to high Memory
.2646	38		sec				sec  							; and copy result to TOS as target address.
.2647	65 0d		adc $0d				adc 	highMemory
.2649	85 0d		sta $0d				sta 	highMemory
.264b	a5 0e		lda $0e				lda 	highMemory+1
.264d	69 ff		adc #$ff			adc 	#$FF
.264f	85 0e		sta $0e				sta 	highMemory+1
.2651	a0 00		ldy #$00			ldy 	#0 						; Y = 0
.2653	68		pla				pla 							; get the total size of the storage block
.2654	91 0d		sta ($0d),y			sta 	(highMemory),y
.2656	18		clc				clc
.2657	a5 0d		lda $0d				lda		highMemory 				; point the target address to the byte after this.
.2659	69 01		adc #$01			adc 	#1
.265b	91 06		sta ($06),y			sta 	(temp1),y
.265d	a5 0e		lda $0e				lda 	highMemory+1
.265f	69 00		adc #$00			adc 	#0
.2661	c8		iny				iny
.2662	91 06		sta ($06),y			sta 	(temp1),y
.2664	68		pla				pla
.2665	a8		tay				tay
.2666	60		rts				rts
.2667					CopyStringToHardMemory:
.2667	98		tya				tya
.2668	48		pha				pha
.2669	a0 00		ldy #$00			ldy 	#0 						; copy target address to temp2
.266b	b1 06		lda ($06),y			lda 	(temp1),y
.266d	85 08		sta $08				sta 	temp2
.266f	c8		iny				iny
.2670	b1 06		lda ($06),y			lda 	(temp1),y
.2672	85 09		sta $09				sta 	temp2+1
.2674	ac fc 0a	ldy $0afc			ldy 	srcStrLen 				; copy this + 1 characters, (length too) hence $FF compare
.2677					_CSTHMLoop:
.2677	b1 04		lda ($04),y			lda 	(temp0),y
.2679	91 08		sta ($08),y			sta 	(temp2),y
.267b	88		dey				dey
.267c	c0 ff		cpy #$ff			cpy 	#$FF
.267e	d0 f7		bne $2677			bne 	_CSTHMLoop
.2680	68		pla				pla
.2681	a8		tay				tay
.2682	60		rts				rts
.2683					CheckSpecialConcretion:
.2683	ad fc 0a	lda $0afc			lda 	srcStrLen 				; check string is null.
.2686	f0 02		beq $268a			beq 	_CSCNullString
.2688	18		clc				clc
.2689	60		rts				rts
.268a					_CSCNullString:
.268a	a9 00		lda #$00			lda 	#0
.268c	8d cc 0a	sta $0acc			sta 	NullString
.268f	a9 cc		lda #$cc			lda 	#(NullString) & $FF
.2691	85 04		sta $04				sta 	temp0
.2693	a9 0a		lda #$0a			lda 	#(NullString) >> 8
.2695	85 05		sta $05				sta 	1+(temp0)
.2697	38		sec				sec
.2698	60		rts				rts

;******  Return to file: string/string.asm

.2699					stringHandler:
.2699	7c 9c 26	jmp ($269c,x)			jmp 	(stringVectors,x)
.269c					stringVectors:
>269c	4a 24					.word StringChrs           ; index 0
>269e	3d 25					.word StrClone             ; index 2
>26a0	b5 24					.word StringConcat         ; index 4
>26a2	6c 24					.word STRCompare           ; index 6
>26a4	63 25					.word StringSubstring      ; index 8
>26a6	b7 25					.word StringWrite          ; index 10

;******  Return to file: basic.asm

.26a8					section_end_string:
.26a8					section_start_tokeniser:

;******  Processing file: tokeniser/tokeniser.asm

.26a8					tokeniserHandler:
.26a8	7c ab 26	jmp ($26ab,x)			jmp 	(tokeniserVectors,x)
.26ab					tokeniserVectors:

;******  Return to file: basic.asm

.26ab					section_end_tokeniser:
.26ab					section_start_variable:

;******  Processing file: variable/variable.asm


;******  Processing file: variable/access.asm

.0afd					varHash:
>0afd							.fill	1
.0afe					varType:
>0afe							.fill 	1
.0aff					varEnd:
>0aff							.fill 	1
.007c					hashList:
>007c							.fill 	2
.26ab					AccessVariable:
.26ab	aa		tax				tax 								; stack in X
.26ac	c8		iny				iny
.26ad	b1 02		lda ($02),y			lda 	(codePtr),y
.26af	88		dey				dey
.26b0	c9 3a		cmp #$3a			cmp 	#TYPE_INT 					; is it one of the end markers ?
.26b2	d0 15		bne $26c9			bne 	_AVLong
.26b4	b1 02		lda ($02),y			lda 	(codePtr),y 				; this is the 6 bit ASCII of A-Z 1-26
.26b6	38		sec				sec 	 							; make it 0-25
.26b7	e9 01		sbc #$01			sbc 	#1
.26b9	0a		asl a				asl 	a 							; x 4 is LSB of address
.26ba	0a		asl a				asl 	a
.26bb	95 48		sta $48,x			sta 	esInt0,x
.26bd	a9 0a		lda #$0a			lda 	#SingleLetterVar >> 8 		; make it an address
.26bf	95 50		sta $50,x			sta 	esInt1,x
.26c1	a9 80		lda #$80			lda 	#$80 						; type is integer reference.
.26c3	95 40		sta $40,x			sta 	esType,x
.26c5	c8		iny				iny 								; skip over the variable reference in the code.
.26c6	c8		iny				iny
.26c7	8a		txa				txa 								; stack in A to return.
.26c8	60		rts				rts
.26c9					_AVLong:
.26c9	8a		txa				txa
.26ca	48		pha				pha
.26cb	20 09 27	jsr $2709			jsr 	AccessSetup 				; set up the basic stuff.
.26ce	20 c9 27	jsr $27c9			jsr 	FindVariable 				; does the variable exist already
.26d1	b0 0e		bcs $26e1			bcs 	_AVFound
.26d3	ad fe 0a	lda $0afe			lda 	varType 					; is the variable type an array
.26d6	4a		lsr a				lsr 	a
.26d7	90 05		bcc $26de			bcc 	_AVCanCreate
.26d9	a2 15		ldx #$15			ldx 	#ErrorID_noauto
.26db	20 91 21	jsr $2191		jsr	errorHandler
.26de					_AVCanCreate:
.26de	20 46 27	jsr $2746			jsr 	CreateVariable 				; no, create it.
.26e1					_AVFound:
.26e1	68		pla				pla
.26e2	aa		tax				tax
.26e3	18		clc				clc 								; copy temp0 (variable record address)
.26e4	a5 04		lda $04				lda 	temp0 						; +5 (to point to the data)
.26e6	69 05		adc #$05			adc 	#5
.26e8	95 48		sta $48,x			sta 	esInt0,x
.26ea	a5 05		lda $05				lda 	temp0+1
.26ec	69 00		adc #$00			adc 	#0
.26ee	95 50		sta $50,x			sta 	esInt1,x
.26f0	a9 00		lda #$00			lda 	#0
.26f2	95 58		sta $58,x			sta 	esInt2,x
.26f4	95 60		sta $60,x			sta 	esInt3,x
.26f6	ac fe 0a	ldy $0afe			ldy 	varType 					; get the type ID from the type.
.26f9	b9 c9 26	lda $26c9,y			lda 	_AVTypeTable-$3A,y
.26fc	95 40		sta $40,x			sta 	esType,x
.26fe	ac ff 0a	ldy $0aff			ldy 	varEnd 						; restore Y
.2701	8a		txa				txa 								; return stack in A and return
.2702	60		rts				rts
.2703					_AVTypeTable:
>2703	80 80						.byte 	$80,$80						; integer
>2705	c0 c0						.byte 	$C0,$C0 					; string
>2707	81 81						.byte 	$81,$81 					; float
.2709					AccessSetup:
.2709	a9 00		lda #$00			lda 	#0 							; zero the hash byte.
.270b	8d fd 0a	sta $0afd			sta 	varHash
.270e	98		tya				tya
.270f	48		pha				pha
.2710	b1 02		lda ($02),y	_ASLoop:lda 	(codePtr),y					; get next identifier character
.2712	c9 3a		cmp #$3a			cmp 	#$3A 						; is it 3A-3F which end all identifiers ?
.2714	b0 0b		bcs $2721			bcs 	_ASComplete
.2716	18		clc				clc 								; add to the hash. Might improve this.
.2717	6d fd 0a	adc $0afd			adc 	varHash
.271a	8d fd 0a	sta $0afd			sta 	varHash
.271d	c8		iny				iny 								; next character
.271e	4c 10 27	jmp $2710			jmp 	_ASLoop
.2721					_ASComplete:
.2721	8d fe 0a	sta $0afe			sta 	varType 					; save variable type byte
.2724	c8		iny				iny
.2725	8c ff 0a	sty $0aff			sty 	varEnd 						; save the ending position.
.2728	38		sec				sec 								; convert type byte from $3A-$3F to 0..5
.2729	e9 3a		sbc #$3a			sbc 	#$3A
.272b	0a		asl a				asl 	a 							; multiply by hashTableSize (8 in this case)
.272c	0a		asl a				asl 	a
.272d	0a		asl a				asl 	a
.272e	0a		asl a				asl 	a 							; 2 bytes/word
.272f	85 04		sta $04				sta 	temp0 						; this is the offset to the start of the table.
.2731	ad fd 0a	lda $0afd			lda 	varHash 					; get hash
.2734	29 07		and #$07			and 	#(hashTableSize-1)			; force into range
.2736	0a		asl a				asl  	a 							; x 2 (for word) and CC
.2737	65 04		adc $04				adc 	temp0 						; now offset from the start of the hash table.
.2739	69 68		adc #$68			adc 	#hashTables & $FF 			; add to hash table base address
.273b	85 7c		sta $7c				sta 	hashList
.273d	a9 0a		lda #$0a			lda 	#hashTables >> 8
.273f	69 00		adc #$00			adc 	#0
.2741	85 7d		sta $7d				sta 	hashList+1
.2743	68		pla				pla
.2744	a8		tay				tay
.2745	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/create.asm

.2746					CreateVariable:
.2746	98		tya				tya 								; push Y on the stack twice.
.2747	48		pha				pha
.2748	48		pha				pha
.2749	ae fe 0a	ldx $0afe			ldx 	varType 					; get var type 0-5
.274c	bd 57 27	lda $2757,x			lda		_CVSize-$3A,x 				; the bytes for this new variable.
.274f	48		pha				pha 								; save length
.2750	a5 0f		lda $0f				lda 	lowMemory 					; set low Memory ptr to temp0
.2752	85 04		sta $04				sta 	temp0 						; (address of the new variable)
.2754	a5 10		lda $10				lda 	lowMemory+1
.2756	85 05		sta $05				sta 	temp0+1
.2758	68		pla				pla 								; get length
.2759	20 6b 10	jsr $106b			jsr 	AdvanceLowMemoryByte 		; shift alloc memory forward by the length.
.275c	ad fd 0a	lda $0afd			lda 	varHash 					; store hash at offset 4.
.275f	a0 04		ldy #$04			ldy 	#4
.2761	91 04		sta ($04),y			sta 	(temp0),y
.2763	68		pla				pla 								; offset, work out where the variable name is.
.2764	18		clc				clc
.2765	65 02		adc $02				adc 	codePtr
.2767	a0 02		ldy #$02			ldy 	#2 							; copy that into slots 2 + 3.
.2769	91 04		sta ($04),y			sta 	(temp0),y
.276b	a5 03		lda $03				lda 	codePtr+1
.276d	69 00		adc #$00			adc 	#0
.276f	c8		iny				iny
.2770	91 04		sta ($04),y			sta 	(temp0),y
.2772	a0 00		ldy #$00			ldy 	#0 							; copy current hash pointer in link
.2774	b1 7c		lda ($7c),y			lda 	(hashList),y
.2776	91 04		sta ($04),y			sta 	(temp0),y
.2778	c8		iny				iny
.2779	b1 7c		lda ($7c),y			lda 	(hashList),y
.277b	91 04		sta ($04),y			sta 	(temp0),y
.277d	a5 05		lda $05				lda 	temp0+1 					; set new link
.277f	91 7c		sta ($7c),y			sta 	(hashList),y
.2781	88		dey				dey
.2782	a5 04		lda $04				lda 	temp0
.2784	91 7c		sta ($7c),y			sta 	(hashList),y
.2786	ad fe 0a	lda $0afe			lda 	varType 					; type in A
.2789	a0 05		ldy #$05			ldy 	#5 							; offset in Y
.278b	20 97 27	jsr $2797			jsr 	ZeroTemp0Y 					; zero (temp0),y with whatever type.
.278e	68		pla				pla
.278f	a8		tay				tay
.2790	60		rts				rts
>2791	09 09				_CVSize:.byte 	VarHSize+VarISize,VarHSize+VarISize 					; <storage for integer>
>2793	07 07						.byte 	VarHSize+VarSSize,VarHSize+VarSSize 					; <storage for string>
>2795	0b 0b						.byte 	VarHSize+VarFSize,VarHSize+VarFSize 					; <storage for float>
.2797					ZeroTemp0Y:
.2797	29 fe		and #$fe			and 	#$FE 						; convert array type to base type
.2799	c9 3c		cmp #$3c			cmp 	#$3C 						; check string
.279b	f0 16		beq $27b3			beq 	_ZTWriteNullString 			; write "" string
.279d	c9 3e		cmp #$3e			cmp 	#$3E 						; check float
.279f	f0 22		beq $27c3			beq 	_ZTWriteFloat
.27a1	98		tya				tya
.27a2	48		pha				pha
.27a3	a9 00		lda #$00			lda 	#0
.27a5	91 04		sta ($04),y			sta 	(temp0),y
.27a7	c8		iny				iny
.27a8	91 04		sta ($04),y			sta 	(temp0),y
.27aa	c8		iny				iny
.27ab	91 04		sta ($04),y			sta 	(temp0),y
.27ad	c8		iny				iny
.27ae	91 04		sta ($04),y			sta 	(temp0),y
.27b0	68		pla				pla
.27b1	a8		tay				tay
.27b2	60		rts				rts
.27b3					_ZTWriteNullString:
.27b3	a9 00		lda #$00			lda 	#0 							; put a reference to null string as the default value.
.27b5	8d cc 0a	sta $0acc			sta 	NullString
.27b8	a9 cc		lda #$cc			lda 	#NullString & $FF
.27ba	91 04		sta ($04),y			sta 	(temp0),y
.27bc	a9 0a		lda #$0a			lda 	#NullString >> 8
.27be	c8		iny				iny
.27bf	91 04		sta ($04),y			sta 	(temp0),y
.27c1	88		dey				dey
.27c2	60		rts				rts
.27c3					_ZTWriteFloat:
.27c3	a2 1e		ldx #$1e		ldx	#30
.27c5	20 42 24	jsr $2442		jsr	floatingpointHandler
.27c8	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/find.asm

.27c9					FindVariable:
.27c9	98		tya				tya
.27ca	48		pha				pha
.27cb	98		tya				tya 								; point temp2 to the actual name.
.27cc	18		clc				clc
.27cd	65 02		adc $02				adc 	codePtr
.27cf	85 08		sta $08				sta 	temp2
.27d1	a5 03		lda $03				lda 	codePtr+1
.27d3	69 00		adc #$00			adc 	#0
.27d5	85 09		sta $09				sta 	temp2+1
.27d7	a0 00		ldy #$00			ldy 	#0
.27d9	a5 7c		lda $7c				lda 	hashList 					; copy hashlist to temp0
.27db	85 04		sta $04				sta 	temp0
.27dd	a5 7d		lda $7d				lda 	hashList+1
.27df	85 05		sta $05				sta 	temp0+1
.27e1	a0 01		ldy #$01	_FVNext:ldy 	#1 							; get MSB
.27e3	b1 04		lda ($04),y			lda 	(temp0),y
.27e5	f0 2c		beq $2813			beq 	_FVFail
.27e7	aa		tax				tax
.27e8	88		dey				dey		 							; get LSB
.27e9	b1 04		lda ($04),y			lda 	(temp0),y
.27eb	85 04		sta $04				sta 	temp0 						; update pointer.
.27ed	86 05		stx $05				stx 	temp0+1
.27ef	a0 04		ldy #$04			ldy 	#4 							; check hashes match
.27f1	b1 04		lda ($04),y			lda 	(temp0),y
.27f3	cd fd 0a	cmp $0afd			cmp 	varHash
.27f6	d0 e9		bne $27e1			bne 	_FVNext 					; if not, no point in checking the name.
.27f8	88		dey				dey 								; copy name pointer to temp1.
.27f9	b1 04		lda ($04),y			lda 	(temp0),y
.27fb	85 07		sta $07				sta 	temp1+1
.27fd	88		dey				dey
.27fe	b1 04		lda ($04),y			lda 	(temp0),y
.2800	85 06		sta $06				sta 	temp1
.2802	a0 00		ldy #$00			ldy 	#0
.2804					_FVCheck:
.2804	b1 06		lda ($06),y			lda 	(temp1),y 					; compare names
.2806	d1 08		cmp ($08),y			cmp 	(temp2),y
.2808	d0 d7		bne $27e1			bne 	_FVNext		 				; fail if different.
.280a	c8		iny				iny
.280b	c9 3a		cmp #$3a			cmp 	#$3A 						; until reached the end marker.
.280d	90 f5		bcc $2804			bcc 	_FVCheck
.280f	68		pla				pla
.2810	a8		tay				tay
.2811	38		sec				sec
.2812	60		rts				rts
.2813					_FVFail:
.2813	68		pla				pla
.2814	a8		tay				tay
.2815	18		clc				clc
.2816	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/reset.asm

.2817					HashTableReset:
.2817	a2 60		ldx #$60			ldx 	#6*2*hashTableSize
.2819	a9 00		lda #$00			lda 	#0
.281b					_HTRClear:
.281b	9d 67 0a	sta $0a67,x			sta 	hashTables-1,x
.281e	ca		dex				dex
.281f	d0 fa		bne $281b			bne 	_HTRClear
.2821	60		rts				rts

;******  Return to file: variable/variable.asm

.2822					variableHandler:
.2822	7c 25 28	jmp ($2825,x)			jmp 	(variableVectors,x)
.2825					variableVectors:
>2825	ab 26					.word AccessVariable       ; index 0
>2827	17 28					.word HashTableReset       ; index 2

;******  Return to file: basic.asm

.2829					section_end_variable:

;******  End of listing
