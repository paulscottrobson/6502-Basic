
; 64tass Turbo Assembler Macro V1.55.2200 listing file
; 64tass -Wall -q -c -L ../source/bin/basic.lst -l ../source/bin/basic.lbl -Wall -o ../source/bin/basic.prg basic.asm
; Thu Mar  4 12:08:07 2021

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: basic.asm


;******  Processing file: main/01common.inc


;******  Processing file: main/../generated/installed.inc

=1					installed_main = 1
=1					installed_variable = 1
=1					installed_assembler = 1
=1					installed_error = 1
=1					installed_string = 1
=1					installed_device = 1
=0					installed_floatingpoint = 0
=1					installed_interaction = 1
=1					installed_tokeniser = 1

;******  Return to file: main/01common.inc

=$1000					CodeStart = $1000
=$800					MemoryStorage = $800
=$02					ZeroPageStorage = $02
=8					StackSize = 8
=512					retStackSize = 512
=8					hashTableSize = 8			; if this changes, the calculation is AccessSetup has to match it.
="G"					markerGOSUB = 'G'
="R"					markerREPEAT = 'R'
="F"					markerFOR = 'F'
="W"					markerWHILE = 'W'
="P"					markerPROC = 'P'
=5					VarHSize = 5 								; header (2 link, 2 name, 1 hash)
=4					VarISize = 4 								; integer (32 bit)
=6					VarFSize = 6 								; float (4 mantissa, 1 exponent 1 sign/zero)
=2					VarSSize = 2 								; address (2 bytes)

;******  Return to file: basic.asm


;******  Processing file: main/02macros.inc


;******  Return to file: basic.asm


;******  Processing file: main/03data.inc

>0002					codePtr:.fill 	2							; (codePtr),y points to code.
>0004					temp0: 	.fill 	2							; working variables.
>0006					temp1: 	.fill 	2
>0008					temp2: 	.fill 	2
>000a					temp3: 	.fill 	2
.000c					tempShort:
>000c							.fill 	1
.000d					highMemory:
>000d							.fill 	2
.000f					lowMemory:
>000f							.fill 	2
>0040					esType:	.fill 	StackSize  					; type byte (see above)
>0048					esInt0:	.fill 	StackSize 					; integer or mantissa
>0050					esInt1:	.fill 	StackSize
>0058					esInt2:	.fill 	StackSize
>0060					esInt3:	.fill 	StackSize
>0068					esExp:	.fill 	StackSize 					; exponent ($80 = 0)
>0070					esZSign:.fill 	StackSize 					; for floating point - sign (bit 7) isZero (bit 6)
=$48					esMant0 = esInt0 							; synonyms.
=$50					esMant1 = esInt1
=$58					esMant2 = esInt2
=$60					esMant3 = esInt3
>0800							.align	256
.0800					returnStack:
>0800							.fill 	retStackSize
>0a00							.align	256
.0a00					SingleLetterVar:
>0a00					 		.fill 	26*4
.0a68					hashTables:
>0a68							.fill 	6*2*hashTableSize
.0ac8					basePage:
>0ac8							.fill 	2
.0aca					endMemory:
>0aca							.fill 	2
.0acc					NullString:
>0acc							.fill 	1							; don't waste memory concreting null strings.
.0acd					convertBuffer:
>0acd							.fill 	35

;******  Processing file: main/../generated/tokenconst.inc

=$80					TOK_EOL=$80
=$81					TOK_SHIFT1=$81
=$82					TOK_SHIFT2=$82
=$83					TOK_SHIFT3=$83
=$84					TOK_FPC=$84
=$85					TOK_STR=$85
=$86					TOK_BINARYST=$86
=$99					TOK_STRUCTST=$99
=$a4					TOK_UNARYST=$a4
=$c4					TOK_TOKENS=$c4
=$86					TKW_AND                      = $86 ; and
=$87					TKW_OR                       = $87 ; or
=$88					TKW_XOR                      = $88 ; xor
=$89					TKW_GREATEREQUAL             = $89 ; >=
=$8a					TKW_LESSEQUAL                = $8a ; <=
=$8b					TKW_GREATER                  = $8b ; >
=$8c					TKW_LESS                     = $8c ; <
=$8d					TKW_EQUAL                    = $8d ; =
=$8e					TKW_LESSGREATER              = $8e ; <>
=$8f					TKW_PLUS                     = $8f ; +
=$90					TKW_MINUS                    = $90 ; -
=$91					TKW_GREATERGREATER           = $91 ; >>
=$92					TKW_LESSLESS                 = $92 ; <<
=$93					TKW_STAR                     = $93 ; *
=$94					TKW_SLASH                    = $94 ; /
=$95					TKW_MOD                      = $95 ; mod
=$96					TKW_HAT                      = $96 ; ^
=$97					TKW_PLING                    = $97 ; !
=$98					TKW_QMARK                    = $98 ; ?
=$99					TKW_REPEAT                   = $99 ; repeat
=$9a					TKW_WHILE                    = $9a ; while
=$9b					TKW_FOR                      = $9b ; for
=$9c					TKW_IF                       = $9c ; if
=$9d					TKW_DEFPROC                  = $9d ; defproc
=$9e					TKW_UNTIL                    = $9e ; until
=$9f					TKW_WEND                     = $9f ; wend
=$a0					TKW_NEXT                     = $a0 ; next
=$a1					TKW_THEN                     = $a1 ; then
=$a2					TKW_ENDIF                    = $a2 ; endif
=$a3					TKW_ENDPROC                  = $a3 ; endproc
=$a4					TKW_LPAREN                   = $a4 ; (
=$a5					TKW_LENLPAREN                = $a5 ; len(
=$a6					TKW_SGNLPAREN                = $a6 ; sgn(
=$a7					TKW_ABSLPAREN                = $a7 ; abs(
=$a8					TKW_RANDOMLPAREN             = $a8 ; random(
=$a9					TKW_PAGE                     = $a9 ; page
=$aa					TKW_TRUE                     = $aa ; true
=$ab					TKW_FALSE                    = $ab ; false
=$ac					TKW_MINLPAREN                = $ac ; min(
=$ad					TKW_MAXLPAREN                = $ad ; max(
=$ae					TKW_SYSLPAREN                = $ae ; sys(
=$af					TKW_TIMERLPAREN              = $af ; timer(
=$b0					TKW_EVENTLPAREN              = $b0 ; event(
=$b1					TKW_GETLPAREN                = $b1 ; get(
=$b2					TKW_INKEYLPAREN              = $b2 ; inkey(
=$b3					TKW_ALLOCLPAREN              = $b3 ; alloc(
=$b4					TKW_CHRDOLLARLPAREN          = $b4 ; chr$(
=$b5					TKW_LEFTDOLLARLPAREN         = $b5 ; left$(
=$b6					TKW_MIDDOLLARLPAREN          = $b6 ; mid$(
=$b7					TKW_RIGHTDOLLARLPAREN        = $b7 ; right$(
=$b8					TKW_STRDOLLARLPAREN          = $b8 ; str$(
=$b9					TKW_VALLPAREN                = $b9 ; val(
=$ba					TKW_PEEKLPAREN               = $ba ; peek(
=$bb					TKW_DEEKLPAREN               = $bb ; deek(
=$bc					TKW_LEEKLPAREN               = $bc ; leek(
=$bd					TKW_ASCLPAREN                = $bd ; asc(
=$be					TKW_INTLPAREN                = $be ; int(
=$bf					TKW_FLOATLPAREN              = $bf ; float(
=$c0					TKW_ISVALLPAREN              = $c0 ; isval(
=$c1					TKW_AT                       = $c1 ; @
=$c2					TKW_WAVY                     = $c2 ; ~
=$c3					TKW_AMP                      = $c3 ; &
=$c4					TKW_RPAREN                   = $c4 ; )
=$c5					TKW_COLON                    = $c5 ; :
=$c6					TKW_COMMA                    = $c6 ; ,
=$c7					TKW_SEMICOLON                = $c7 ; ;
=$c8					TKW_QUOTE                    = $c8 ; '
=$c9					TKW_TO                       = $c9 ; to
=$ca					TKW_STEP                     = $ca ; step
=$cb					TKW_PROC                     = $cb ; proc
=$cc					TKW_LOCAL                    = $cc ; local
=$cd					TKW_DIM                      = $cd ; dim
=$ce					TKW_REM                      = $ce ; rem
=$cf					TKW_LET                      = $cf ; let
=$d0					TKW_INPUT                    = $d0 ; input
=$d1					TKW_ELSE                     = $d1 ; else
=$d2					TKW_VDU                      = $d2 ; vdu
=$d3					TKW_PRINT                    = $d3 ; print
=$d4					TKW_GOTO                     = $d4 ; goto
=$d5					TKW_GOSUB                    = $d5 ; gosub
=$d6					TKW_RETURN                   = $d6 ; return
=$d7					TKW_DATA                     = $d7 ; data
=$d8					TKW_ASSERT                   = $d8 ; assert
=$d9					TKW_POKE                     = $d9 ; poke
=$da					TKW_DOKE                     = $da ; doke
=$db					TKW_LOKE                     = $db ; loke
=$86					TKW_CLEAR                    = $86 ; clear
=$87					TKW_LOAD                     = $87 ; load
=$88					TKW_SAVE                     = $88 ; save
=$89					TKW_LIST                     = $89 ; list
=$8a					TKW_NEW                      = $8a ; new
=$8b					TKW_RUN                      = $8b ; run
=$8c					TKW_READ                     = $8c ; read
=$8d					TKW_RESTORE                  = $8d ; restore
=$8e					TKW_END                      = $8e ; end
=$8f					TKW_STOP                     = $8f ; stop
=$86					TKW_VPOKE                    = $86 ; vpoke
=$86					TKW_VPEEKLPAREN              = $86 ; vpeek(

;******  Return to file: main/03data.inc

=$3a					TYPE_INT =		($3A) 						; type bytes that end identifier.
=$3b					TYPE_INTARRAY =	($3B)
=$3c					TYPE_STR =		($3C)
=$3d					TYPE_STRARRAY =	($3D)
=$3e					TYPE_FLOAT =	($3E)
=$3f					TYPE_FLOATARRAY=($3F)

;******  Return to file: basic.asm


;******  Processing file: main/imath/intmacros.inc


;******  Return to file: basic.asm


;******  Processing file: main/main.inc


;******  Return to file: basic.asm


;******  Processing file: assembler/assembler.inc


;******  Return to file: basic.asm


;******  Processing file: device/device.inc


;******  Return to file: basic.asm


;******  Processing file: error/error.inc


;******  Return to file: basic.asm


;******  Processing file: error/errorhandler.inc


;******  Processing file: error/../generated/errorid.inc

=1					ErrorID_Missing = 1 ; Feature not Present
=2					ErrorID_Syntax = 2 ; Syntax Error
=3					ErrorID_NoModule = 3 ; Module disabled
=4					ErrorID_Assert = 4 ; Assertion failed
=5					ErrorID_DivZero = 5 ; Divide By Zero
=6					ErrorID_Stop = 6 ; Stop
=7					ErrorID_BadType = 7 ; Type Mismatch
=8					ErrorID_BadValue = 8 ; Illegal Value
=9					ErrorID_MissingRP = 9 ; Missing right bracket
=10					ErrorID_MissingComma = 10 ; Missing comma
=11					ErrorID_NoReference = 11 ; Missing reference
=12					ErrorID_LineNumber = 12 ; Line Number not found
=13					ErrorID_StrLen = 13 ; String too long.
=14					ErrorID_ReturnErr = 14 ; RETURN without GOSUB
=15					ErrorID_UntilErr = 15 ; UNTIL without REPEAT
=16					ErrorID_NextErr = 16 ; NEXT without FOR
=17					ErrorID_WendErr = 17 ; WEND without WHILE
=18					ErrorID_endprocErr = 18 ; ENDPROC without PROC
=19					ErrorID_BadIndex = 19 ; Bad NEXT index
=20					ErrorID_Struct = 20 ; Structures nested wrong
=21					ErrorID_NoAuto = 21 ; Cannot create variable
=22					ErrorID_RetStack = 22 ; Return stack out of space.
=23					ErrorID_NoProc = 23 ; Unknown Procedure
=24					ErrorID_Params = 24 ; Parameters do not match.

;******  Return to file: error/errorhandler.inc


;******  Return to file: basic.asm


;******  Processing file: floatingpoint/floatingpoint.inc


;******  Return to file: basic.asm


;******  Processing file: interaction/interaction.inc


;******  Return to file: basic.asm


;******  Processing file: string/memory.inc

=252					MaxStringSize = 252

;******  Return to file: basic.asm


;******  Processing file: string/string.inc


;******  Return to file: basic.asm


;******  Processing file: tokeniser/tokeniser.inc


;******  Return to file: basic.asm


;******  Processing file: variable/variable.inc


;******  Return to file: basic.asm

.1000					section_start_main:

;******  Processing file: main/main.asm


;******  Processing file: main/00start.asm

.1000	a2 ff		ldx #$ff	Start:	ldx 	#$FF
.1002	9a		txs				txs
.1003	a9 00		lda #$00			lda 	#(testBaseAddress) & $FF
.1005	8d c8 0a	sta $0ac8			sta 	basePage
.1008	a9 50		lda #$50			lda 	#(testBaseAddress) >> 8
.100a	8d c9 0a	sta $0ac9			sta 	1+(basePage)
.100d	a9 00		lda #$00			lda 	#($9800) & $FF
.100f	8d ca 0a	sta $0aca			sta 	endMemory
.1012	a9 98		lda #$98			lda 	#($9800) >> 8
.1014	8d cb 0a	sta $0acb			sta 	1+(endMemory)
.1017	4c bd 12	jmp $12bd			jmp 	Command_Run
.245f					ReturnPos:
.5000					testBaseAddress:

;******  Processing file: main/../generated/testcode.inc

>5000	0c 0a 00 d3 85 05 53 54			.byte 12,10,0,211,133,5,83,84,65,82,84,128,11,11,0,203,4,5,13,15,59,196,128,10,12,0,211,133,3,69,78,68,128,8,13,0,153,197,158,171,128,4,14,0,128,10,15,0,157,4,15,49,59,196,128,10,16,0,211,133,3,68,79,49,128,5,17,0,163,128,4,18,0,128,11,19,0,157,4,5,13,15,59,196,128,20,20,0,211,1,49,58,198,2,50,58,198,3,51,58,198,4,52,58,128,10,21,0,203,4,15,49,59,196,128,10,22,0,203,24,15,50,59,196,128,21,23,0,211,133,12,82,85,78,78,73,78,71,32,68,69,77,79,198,106,128,10,24,0,203,4,15,49,59,196,128,5,25,0,163,128,4,26,0,128,10,27,0,157,24,15,50,59,196,128,10,28,0,211,133,3,88,79,50,128,5,29,0,163,128,0
>5008	41 52 54 80 0b 0b 00 cb 04 05 0d 0f 3b c4 80 0a
>5018	0c 00 d3 85 03 45 4e 44 80 08 0d 00 99 c5 9e ab
>5028	80 04 0e 00 80 0a 0f 00 9d 04 0f 31 3b c4 80 0a
>5038	10 00 d3 85 03 44 4f 31 80 05 11 00 a3 80 04 12
>5048	00 80 0b 13 00 9d 04 05 0d 0f 3b c4 80 14 14 00
>5058	d3 01 31 3a c6 02 32 3a c6 03 33 3a c6 04 34 3a
>5068	80 0a 15 00 cb 04 0f 31 3b c4 80 0a 16 00 cb 18
>5078	0f 32 3b c4 80 15 17 00 d3 85 0c 52 55 4e 4e 49
>5088	4e 47 20 44 45 4d 4f c6 6a 80 0a 18 00 cb 04 0f
>5098	31 3b c4 80 05 19 00 a3 80 04 1a 00 80 0a 1b 00
>50a8	9d 18 0f 32 3b c4 80 0a 1c 00 d3 85 03 58 4f 32
>50b8	80 05 1d 00 a3 80 00

;******  Return to file: main/00start.asm


;******  Return to file: main/main.asm


;******  Processing file: main/commands/assert.asm

.101a					Command_Assert:
.101a	20 65 19	jsr $1965			jsr 	EvaluateRootInteger 		; what is being asserted.
.101d	20 85 1f	jsr $1f85			jsr 	MInt32Zero 					; is it true ?
.1020	f0 01		beq $1023			beq 	_CAError
.1022	60		rts				rts
.1023					_CAError:
.1023	a2 04		ldx #$04			ldx 	#ErrorID_Assert
.1025	20 8c 20	jsr $208c			jsr 	ErrorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/commands/clear.asm

.1028					CommandClear:
.1028	98		tya				tya
.1029	48		pha				pha
.102a	ad ca 0a	lda $0aca			lda 	endMemory					; set high memory = end of memory
.102d	85 0d		sta $0d				sta 	highMemory
.102f	ad cb 0a	lda $0acb			lda 	endMemory+1
.1032	85 0e		sta $0e				sta 	highMemory+1
.1034	ad c8 0a	lda $0ac8			lda 	basePage 					; work out where the program ends.
.1037	85 04		sta $04				sta 	temp0
.1039	ad c9 0a	lda $0ac9			lda 	basePage+1
.103c	85 05		sta $05				sta 	temp0+1
.103e					_CCFindEnd:
.103e	a0 00		ldy #$00			ldy 	#0
.1040	b1 04		lda ($04),y			lda 	(temp0),y
.1042	f0 0c		beq $1050			beq 	_CCFoundEnd 				; offset zero is end.
.1044	18		clc				clc
.1045	65 04		adc $04				adc 	temp0 						; move to next line
.1047	85 04		sta $04				sta 	temp0
.1049	90 f3		bcc $103e			bcc 	_CCFindEnd
.104b	e6 05		inc $05				inc 	temp0+1
.104d	4c 3e 10	jmp $103e			jmp 	_CCFindEnd
.1050					_CCFoundEnd:
.1050	a5 04		lda $04				lda 	temp0 						; put temp0 in lowMemory
.1052	85 0f		sta $0f				sta 	lowMemory
.1054	a5 05		lda $05				lda 	temp0+1
.1056	85 10		sta $10				sta 	lowMemory+1
.1058	a9 04		lda #$04			lda 	#4 							; skip low free memory clear, leave a gap.
.105a	20 6b 10	jsr $106b			jsr 	AdvanceLowMemoryByte		; need at least one here, to skip the end of program zero offset.
.105d	20 eb 1f	jsr $1feb			jsr 	RSReset 					; reset the return stack.
.1060	a2 02		ldx #$02		ldx	#2
.1062	20 58 24	jsr $2458		jsr	variableHandler
.1065	20 70 14	jsr $1470			jsr 	ScanProc 					; scan for procedures
.1068	68		pla				pla
.1069	a8		tay				tay
.106a	60		rts				rts
.106b					AdvanceLowMemoryByte:
.106b	18		clc				clc
.106c	65 0f		adc $0f				adc 	lowMemory
.106e	85 0f		sta $0f				sta 	lowMemory
.1070	90 02		bcc $1074			bcc 	_ALMBExit
.1072	e6 10		inc $10				inc 	lowMemory+1
.1074					_ALMBExit:
.1074	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/for.asm

.245f					Command_FOR:
.245f	a9 46		lda #$46			lda 	#markerFOR 					; allocate the space.
.2461	a2 0b		ldx #$0b			ldx 	#11
.2463	20 f9 1f	jsr $1ff9			jsr 	RSClaim
.2466	20 b1 10	jsr $10b1			jsr 	CommandLET 					; do the same as LET.
.2469	a5 40		lda $40				lda 	esType 						; check type should be integer reference.
.246b	c9 80		cmp #$80			cmp 	#$80
.246d	d0 4c		bne $24bb			bne 	_CFType
.246f	a9 c9		lda #$c9			lda 	#TKW_TO 					; check TO present.
.2471	20 c6 1f	jsr $1fc6			jsr 	CheckToken
.2474	a2 01		ldx #$01			ldx 	#1 							; keep the variable address in stack 0
.2476	20 67 19	jsr $1967			jsr 	EvaluateInteger				; get terminal value in stack 1
.2479	98		tya				tya
.247a	48		pha				pha
.247b	a0 04		ldy #$04			ldy 	#4
.247d	a5 48		lda $48				lda		esInt0 						; the address of the index into 4 and 5
.247f	91 78		sta ($78),y			sta 	(rsPointer),y
.2481	c8		iny				iny
.2482	a5 50		lda $50				lda		esInt1
.2484	91 78		sta ($78),y			sta 	(rsPointer),y
.2486	c8		iny				iny
.2487	a9 01		lda #$01			lda 	#1  						; the default step in 6
.2489	91 78		sta ($78),y			sta 	(rsPointer),y
.248b	c8		iny				iny
.248c	a5 49		lda $49				lda		esInt0+1 					; terminal value in 7 to 11.
.248e	91 78		sta ($78),y			sta 	(rsPointer),y
.2490	c8		iny				iny
.2491	a5 51		lda $51				lda		esInt1+1
.2493	91 78		sta ($78),y			sta 	(rsPointer),y
.2495	c8		iny				iny
.2496	a5 59		lda $59				lda		esInt2+1
.2498	91 78		sta ($78),y			sta 	(rsPointer),y
.249a	c8		iny				iny
.249b	a5 61		lda $61				lda		esInt3+1
.249d	91 78		sta ($78),y			sta 	(rsPointer),y
.249f	68		pla				pla
.24a0	a8		tay				tay
.24a1	b1 02		lda ($02),y			lda 	(codePtr),y 				; followed by STEP.
.24a3	c9 ca		cmp #$ca			cmp 	#TKW_STEP
.24a5	d0 0e		bne $24b5			bne 	_CFDone
.24a7	c8		iny				iny									; skip over step.
.24a8	20 67 19	jsr $1967			jsr 	EvaluateInteger 			; get step
.24ab	98		tya				tya
.24ac	48		pha				pha
.24ad	b5 48		lda $48,x			lda 	esInt0,x 					; copy it into step (bit lazy here)
.24af	a0 06		ldy #$06			ldy 	#6
.24b1	91 78		sta ($78),y			sta 	(rsPointer),y
.24b3	68		pla				pla
.24b4	a8		tay				tay
.24b5					_CFDone:
.24b5	a9 01		lda #$01			lda 	#1
.24b7	20 25 20	jsr $2025			jsr 	RSSavePosition 				; save position.
.24ba	60		rts				rts
.24bb					_CFType:
.24bb	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.24bd	20 8c 20	jsr $208c			jsr 	ErrorHandler
.24c0					Command_NEXT:
.24c0	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.24c2	a1 78		lda ($78,x)			lda 	(rsPointer,x)
.24c4	c9 46		cmp #$46			cmp 	#markerFOR 						; does it match
.24c6	f0 05		beq $24cd			beq 	_isok
.24c8	a2 10		ldx #$10			ldx 	#ErrorID_nextErr
.24ca	20 8c 20	jsr $208c			jsr 	ErrorHandler
.24cd					_isok:
.24cd	b1 02		lda ($02),y			lda 	(codePtr),y 				; is it NEXT <index>
.24cf	c9 40		cmp #$40			cmp 	#$40 						; e.g. a variable follows 00-3F
.24d1	b0 18		bcs $24eb			bcs 	_CNNoIndex
.24d3	a2 00		ldx #$00			ldx 	#0 							; start on stack
.24d5	20 94 19	jsr $1994			jsr 	EvaluateReference 			; this is the variable/parameter to localise.
.24d8	98		tya				tya
.24d9	48		pha				pha
.24da	a0 04		ldy #$04			ldy 	#4 							; check same variable
.24dc	b1 78		lda ($78),y			lda 	(rsPointer),y
.24de	d5 48		cmp $48,x			cmp 	esInt0,x
.24e0	d0 76		bne $2558			bne 	_CNBadIndex
.24e2	c8		iny				iny
.24e3	b1 78		lda ($78),y			lda 	(rsPointer),y
.24e5	d5 50		cmp $50,x			cmp 	esInt1,x
.24e7	d0 6f		bne $2558			bne 	_CNBadIndex
.24e9	68		pla				pla
.24ea	a8		tay				tay
.24eb					_CNNoIndex:
.24eb	98		tya				tya
.24ec	48		pha				pha
.24ed	a0 04		ldy #$04			ldy 	#4 							; make temp0 point to the index
.24ef	b1 78		lda ($78),y			lda 	(rsPointer),y
.24f1	85 04		sta $04				sta 	temp0
.24f3	c8		iny				iny
.24f4	b1 78		lda ($78),y			lda 	(rsPointer),y
.24f6	85 05		sta $05				sta 	temp0+1
.24f8	c8		iny				iny
.24f9	a2 00		ldx #$00			ldx 	#0 							; X is the sign extend part of the step.
.24fb	b1 78		lda ($78),y			lda 	(rsPointer),y 				; get the step.
.24fd	85 09		sta $09				sta 	temp2+1 					; save for later.
.24ff	10 01		bpl $2502			bpl 	_CNSignX
.2501	ca		dex				dex  								; X = $FF
.2502					_CNSignX:
.2502	18		clc				clc 								; add to the LSB
.2503	a0 00		ldy #$00			ldy 	#0
.2505	71 04		adc ($04),y			adc 	(temp0),y
.2507	91 04		sta ($04),y			sta 	(temp0),y
.2509					_CNPropogate:
.2509	c8		iny				iny  								; add the sign extended in X to the rest.
.250a	8a		txa				txa
.250b	71 04		adc ($04),y			adc 	(temp0),y
.250d	91 04		sta ($04),y			sta 	(temp0),y
.250f	c8		iny				iny
.2510	8a		txa				txa
.2511	71 04		adc ($04),y			adc 	(temp0),y
.2513	91 04		sta ($04),y			sta 	(temp0),y
.2515	c8		iny				iny
.2516	8a		txa				txa
.2517	71 04		adc ($04),y			adc 	(temp0),y
.2519	91 04		sta ($04),y			sta 	(temp0),y
.251b	18		clc				clc 								; point temp1 to the terminal value stored in the stack.
.251c	a5 78		lda $78				lda 	rsPointer
.251e	69 07		adc #$07			adc 	#7
.2520	85 06		sta $06				sta 	temp1
.2522	a9 00		lda #$00			lda 	#0
.2524	85 08		sta $08				sta 	temp2 						; clear temp2, which is the OR of all the subtractions.
.2526	a8		tay				tay 								; and clear the Y register again.
.2527	65 79		adc $79				adc 	rsPointer+1
.2529	85 07		sta $07				sta 	temp1+1
.252b	38		sec				sec 								; calculate current - limit oring interim values.
.252c	20 64 25	jsr $2564			jsr 	_CNCompare
.252f	20 64 25	jsr $2564			jsr 	_CNCompare
.2532	20 64 25	jsr $2564			jsr 	_CNCompare
.2535	20 64 25	jsr $2564			jsr 	_CNCompare
.2538	50 02		bvc $253c			bvc 	_CNNoOverflow 				; converts to a signed comparison on the sign bit.
.253a	49 80		eor #$80			eor 	#$80
.253c					_CNNoOverflow:
.253c	a4 09		ldy $09				ldy 	temp2+1						; get step back
.253e	30 1d		bmi $255d			bmi 	_CNCheckDownto
.2540	c9 00		cmp #$00			cmp 	#0
.2542	30 0c		bmi $2550			bmi 	_CNLoopRound 				; loop round if < =
.2544	a5 08		lda $08				lda 	temp2
.2546	f0 08		beq $2550			beq 	_CNLoopRound
.2548					_CNLoopExit:
.2548	68		pla				pla
.2549	a8		tay				tay
.254a	a9 0b		lda #$0b			lda 	#11
.254c	20 1b 20	jsr $201b			jsr 	RSFree
.254f	60		rts				rts
.2550					_CNLoopRound:
.2550	68		pla				pla
.2551	a8		tay				tay
.2552	a9 01		lda #$01			lda 	#1
.2554	20 38 20	jsr $2038			jsr 	RSLoadPosition				; go back to the loop top
.2557	60		rts				rts
.2558					_CNBadIndex:
.2558	a2 13		ldx #$13			ldx 	#ErrorID_BadIndex
.255a	20 8c 20	jsr $208c			jsr 	ErrorHandler
.255d					_CNCheckDownto:
.255d	c9 00		cmp #$00			cmp 	#0
.255f	10 ef		bpl $2550			bpl 	_CNLoopRound
.2561	4c 48 25	jmp $2548			jmp 	_CNLoopExit
.2564					_CNCompare:
.2564	b1 04		lda ($04),y			lda 	(temp0),y 					; do the subtraction - compare don't care about answer
.2566	f1 06		sbc ($06),y			sbc 	(temp1),y
.2568	05 08		ora $08				ora 	temp2 						; Or into temp2 (does not affect carry)
.256a	85 08		sta $08				sta 	temp2
.256c	c8		iny				iny
.256d	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/if.asm

.1075					CommandIf:
.1075	20 65 19	jsr $1965			jsr 	EvaluateRootInteger 		; if what ?
.1078	b1 02		lda ($02),y			lda 	(codePtr),y 				; check for IF .. THEN or IF .. GOTO which are single lines.
.107a	c9 d4		cmp #$d4			cmp 	#TKW_GOTO
.107c	f0 04		beq $1082			beq 	_IfSimple
.107e	c9 a1		cmp #$a1			cmp 	#TKW_THEN
.1080	d0 1b		bne $109d			bne 	_IfComplex
.1082					_IfSimple:
.1082	20 85 1f	jsr $1f85			jsr 	MInt32Zero					; check if TOS zero
.1085	f0 10		beq $1097			beq 	_IfEOL 						; go to next line.
.1087	b1 02		lda ($02),y			lda 	(codePtr),y 				; get and skip token.
.1089	c8		iny				iny
.108a	c9 d4		cmp #$d4			cmp 	#TKW_GOTO 					; was it if GOTO ?
.108c	f0 0c		beq $109a			beq 	_IfGoto 					; do the Goto code
.108e	b1 02		lda ($02),y			lda 	(codePtr),y 				; what follows the THEN ?
.1090	29 c0		and #$c0			and 	#$C0 						; check $40-$7F
.1092	c9 40		cmp #$40			cmp 	#$40 						; e.g. number IF x = 0 THEN 170
.1094	f0 04		beq $109a			beq 	_IfGoto
.1096	60		rts				rts 								; else continue on this line.
.1097					_IfEOL:
.1097	4c e4 14	jmp $14e4			jmp 	AdvanceNextLine 			; go to next line
.109a					_IfGoto:
.109a	4c 23 15	jmp $1523			jmp 	CommandGoto
.109d					_IfComplex:
.109d	20 85 1f	jsr $1f85			jsr 	MInt32Zero 					; is it true ?
.10a0	f0 01		beq $10a3			beq 	_IFSkip 					; if non-zero then skip to ELSE/ENDIF
.10a2	60		rts				rts 								; else continue.
.10a3					_IFSkip:
.10a3	a9 d1		lda #$d1			lda	 	#TKW_ELSE 					; test failed, go to ELSE or ENDIF whichever comes first.
.10a5	a2 a2		ldx #$a2			ldx 	#TKW_ENDIF
.10a7	4c d7 25	jmp $25d7			jmp		ScanForward
.10aa					Command_ELSE:
.10aa	a2 a2		ldx #$a2			ldx 	#TKW_ENDIF
.10ac	8a		txa				txa
.10ad	4c d7 25	jmp $25d7			jmp		ScanForward
.10b0					Command_ENDIF:
.10b0	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/let.asm

.10b1					CommandLet:
.10b1	a2 00		ldx #$00			ldx 	#0  						; get address to write.
.10b3	20 94 19	jsr $1994			jsr 	EvaluateReference
.10b6	a9 8d		lda #$8d			lda 	#TKW_EQUAL 					; check for equals
.10b8	20 c6 1f	jsr $1fc6			jsr 	CheckToken
.10bb	e8		inx				inx 								; do RHS
.10bc	20 48 19	jsr $1948			jsr 	Evaluate 					; evaluate and derefernce
.10bf	ca		dex				dex
.10c0	20 c4 10	jsr $10c4			jsr 	WriteValue 					; write it out
.10c3	60		rts				rts
.10c4					WriteValue:
.10c4	98		tya				tya
.10c5	48		pha				pha
.10c6	20 26 11	jsr $1126			jsr 	TOSToTemp0 					; set temp0 to point to target address.
.10c9	b5 40		lda $40,x			lda 	esType,x 					; check the string/integer flags match
.10cb	55 41		eor $41,x			eor 	esType+1,x
.10cd	29 40		and #$40			and 	#$40
.10cf	d0 50		bne $1121			bne		_WVType
.10d1	a0 01		ldy #$01			ldy 	#1 							; for string, copy 0 and 1.
.10d3	b5 40		lda $40,x			lda 	esType,x 					; check for string assignment
.10d5	29 40		and #$40			and 	#$40
.10d7	d0 1f		bne $10f8			bne 	_WVCopyString
.10d9	b5 40		lda $40,x			lda 	esType,x 					; check both are integer.
.10db	15 41		ora $41,x			ora 	esType+1,x
.10dd	4a		lsr a				lsr 	a
.10de	90 22		bcc $1102			bcc 	_WVCopyData4
.10e0	b5 40		lda $40,x			lda 	esType,x
.10e2	4a		lsr a				lsr 	a
.10e3	90 3c		bcc $1121			bcc 	_WVType
.10e5	e8		inx				inx 								; force the value being written to be a float.
.10e6	20 95 15	jsr $1595			jsr 	BPMakeFloat
.10e9	ca		dex				dex
.10ea	20 26 11	jsr $1126			jsr 	TOSToTemp0 					; set Temp0 to write address
.10ed	e8		inx				inx
.10ee	8a		txa				txa
.10ef	a2 1e		ldx #$1e		ldx	#30
.10f1	20 93 20	jsr $2093		jsr	floatingpointHandler
.10f4	aa		tax				tax
.10f5	4c 1e 11	jmp $111e			jmp 	_WVCopyExit
.10f8					_WVCopyString:
.10f8	8a		txa				txa
.10f9	a2 0a		ldx #$0a		ldx	#10
.10fb	20 ea 22	jsr $22ea		jsr	stringHandler
.10fe	aa		tax				tax
.10ff	4c 1e 11	jmp $111e			jmp 	_WVCopyExit
.1102					_WVCopyData4:
.1102	b5 40		lda $40,x			lda 	esType,x 					; is the int ref a byte ref ?
.1104	29 20		and #$20			and 	#$20
.1106	d0 10		bne $1118			bne 	_WVCopyData1
.1108	a0 03		ldy #$03			ldy 	#3
.110a	b5 61		lda $61,x			lda 	esInt3+1,x
.110c	91 04		sta ($04),y			sta 	(temp0),y
.110e	88		dey				dey
.110f	b5 59		lda $59,x			lda 	esInt2+1,x
.1111	91 04		sta ($04),y			sta 	(temp0),y
.1113	88		dey				dey
.1114	b5 51		lda $51,x			lda 	esInt1+1,x
.1116	91 04		sta ($04),y			sta 	(temp0),y
.1118					_WVCopyData1:
.1118	a0 00		ldy #$00			ldy 	#0
.111a	b5 49		lda $49,x			lda 	esInt0+1,x
.111c	91 04		sta ($04),y			sta 	(temp0),y
.111e					_WVCopyExit:
.111e	68		pla				pla
.111f	a8		tay				tay
.1120	60		rts				rts
.1121					_WVType:
.1121	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.1123	20 8c 20	jsr $208c			jsr 	ErrorHandler
.1126					TOSToTemp0:
.1126	b5 48		lda $48,x			lda 	esInt0,x
.1128	85 04		sta $04				sta 	temp0
.112a	b5 50		lda $50,x			lda 	esInt1,x
.112c	85 05		sta $05				sta 	temp0+1
.112e	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/local.asm

.112f					LocaliseVariable:
.112f	b1 02		lda ($02),y			lda 	(codePtr),y 				; check it's a variable.
.1131	c9 40		cmp #$40			cmp 	#$40
.1133	b0 08		bcs $113d			bcs 	_LVSyntax
.1135	8a		txa				txa 								; get the address of that variable.
.1136	a2 00		ldx #$00		ldx	#0
.1138	20 58 24	jsr $2458		jsr	variableHandler
.113b	aa		tax				tax
.113c	60		rts				rts
.113d					_LVSyntax:
.113d	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.113f	20 8c 20	jsr $208c			jsr 	ErrorHandler
.1142					RestoreLocals:
.1142	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/new.asm

.1143					Command_New:
.1143	20 1f 13	jsr $131f			jsr 	ResetCodeAddress 			; point to first line
.1146	a0 00		ldy #$00			ldy 	#0 							; and zap it.
.1148	98		tya				tya
.1149	91 02		sta ($02),y			sta 	(codePtr),y
.114b	20 28 10	jsr $1028			jsr 	CommandClear 				; clear everything down.
.114e	4c e1 14	jmp $14e1			jmp 	CommandEND 					; do END code, as there's nothing to run.

;******  Return to file: main/main.asm


;******  Processing file: main/commands/poke.asm

.1151					Command_Poke:
.1151	a9 01		lda #$01			lda 	#1
.1153	d0 06		bne $115b			bne 	PokeGeneral
.1155					Command_Doke:
.1155	a9 02		lda #$02			lda 	#2
.1157	d0 02		bne $115b			bne 	PokeGeneral
.1159					Command_Loke:
.1159	a9 03		lda #$03			lda 	#3
.115b					PokeGeneral:
.115b	48		pha				pha 								; save size
.115c	20 65 19	jsr $1965			jsr 	EvaluateRootInteger 		; target address
.115f	20 de 1f	jsr $1fde			jsr	 	CheckComma
.1162	e8		inx				inx
.1163	20 67 19	jsr $1967			jsr 	EvaluateInteger 			; what value to POKE ?
.1166	ca		dex				dex
.1167	20 26 11	jsr $1126			jsr 	TOSToTemp0 					; temp0 points to the target address
.116a	84 0c		sty $0c				sty 	tempShort 					; save Y
.116c	68		pla				pla 								; get copy type and dispatch
.116d	aa		tax				tax
.116e	ca		dex				dex
.116f	f0 14		beq $1185			beq 	_Poke1
.1171	ca		dex				dex
.1172	f0 0b		beq $117f			beq 	_Poke2
.1174	a0 03		ldy #$03			ldy 	#3
.1176	a5 61		lda $61				lda 	esInt3+1
.1178	91 04		sta ($04),y			sta 	(temp0),y
.117a	88		dey				dey
.117b	a5 59		lda $59				lda 	esInt2+1
.117d	91 04		sta ($04),y			sta 	(temp0),y
.117f					_Poke2:
.117f	a0 01		ldy #$01			ldy 	#1
.1181	a5 51		lda $51				lda 	esInt1+1
.1183	91 04		sta ($04),y			sta 	(temp0),y
.1185					_Poke1:
.1185	a0 00		ldy #$00			ldy 	#0
.1187	a5 49		lda $49				lda 	esInt0+1
.1189	91 04		sta ($04),y			sta 	(temp0),y
.118b	a4 0c		ldy $0c				ldy 	tempShort 					; restore Y and exit
.118d	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/print.asm

.0af0					lastPrintToken:
>0af0							.fill 	1
.118e					Command_Print:
.118e	a9 00		lda #$00			lda 	#0 							; clear LPT flag
.1190	8d f0 0a	sta $0af0			sta 	lastPrintToken
.1193	88		dey				dey
.1194					_PrintLoopSkip:
.1194	c8		iny				iny
.1195					_PrintLoop:
.1195	b1 02		lda ($02),y			lda 	(codePtr),y 				; what follows
.1197	c9 80		cmp #$80			cmp 	#TOK_EOL  					; done if end of line or colon
.1199	f0 5b		beq $11f6			beq 	_PrintExit
.119b	c9 c5		cmp #$c5			cmp 	#TKW_COLON
.119d	f0 57		beq $11f6			beq 	_PrintExit
.119f	8d f0 0a	sta $0af0			sta 	lastPrintToken 				; update LPT
.11a2	c9 c7		cmp #$c7			cmp 	#TKW_SEMICOLON 				; ignore semicolon
.11a4	f0 ee		beq $1194			beq 	_PrintLoopSkip
.11a6	c9 c8		cmp #$c8			cmp 	#TKW_QUOTE 					; ' is new line
.11a8	f0 3c		beq $11e6			beq	 	_PrintNewLine
.11aa	c9 c6		cmp #$c6			cmp 	#TKW_COMMA 					; , is print tab
.11ac	f0 40		beq $11ee			beq 	_PrintTab
.11ae	20 46 19	jsr $1946			jsr 	EvaluateRoot 				; evaluate something at the root
.11b1	a9 cd		lda #$cd			lda 	#(convertBuffer) & $FF
.11b3	85 04		sta $04				sta 	temp0
.11b5	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.11b7	85 05		sta $05				sta 	1+(temp0)
.11b9	a5 40		lda $40				lda 	esType 						; get type
.11bb	f0 15		beq $11d2			beq		_PrintInteger
.11bd	4a		lsr a				lsr 	a 							; check for floating point
.11be	b0 08		bcs $11c8			bcs 	_PrintFloat
.11c0					_PrintString:
.11c0	a2 00		ldx #$00			ldx 	#0 							; bottom string to temp0
.11c2	20 26 11	jsr $1126			jsr 	TOSToTemp0
.11c5	4c e0 11	jmp $11e0			jmp 	_PrintTemp0 				; print no leading space.
.11c8					_PrintFloat:
.11c8	a9 00		lda #$00			lda 	#0 							; stack level.
.11ca	a2 14		ldx #$14		ldx	#20
.11cc	20 93 20	jsr $2093		jsr	floatingpointHandler
.11cf	4c d9 11	jmp $11d9			jmp 	_PrintSpaceTemp0
.11d2					_PrintInteger:
.11d2	a9 8a		lda #$8a			lda 	#10+$80 					; base 10 signed
.11d4	a2 00		ldx #$00			ldx 	#0 							; bottom stack element
.11d6	20 b4 1e	jsr $1eb4			jsr 	MInt32ToString				; convert to text
.11d9					_PrintSpaceTemp0:
.11d9	a9 20		lda #$20			lda 	#32
.11db	a2 04		ldx #$04		ldx	#4
.11dd	20 7f 20	jsr $207f		jsr	deviceHandler
.11e0					_PrintTemp0:
.11e0	20 07 12	jsr $1207			jsr 	PrintString
.11e3	4c 95 11	jmp $1195			jmp 	_PrintLoop
.11e6					_PrintNewLine:
.11e6	a2 00		ldx #$00		ldx	#0
.11e8	20 7f 20	jsr $207f		jsr	deviceHandler
.11eb	4c 94 11	jmp $1194			jmp 	_PrintLoopSkip
.11ee					_PrintTab:
.11ee	a2 06		ldx #$06		ldx	#6
.11f0	20 7f 20	jsr $207f		jsr	deviceHandler
.11f3	4c 94 11	jmp $1194			jmp 	_PrintLoopSkip
.11f6					_PrintExit:
.11f6	ad f0 0a	lda $0af0			lda		lastPrintToken 				; check last token
.11f9	c9 c7		cmp #$c7			cmp 	#TKW_SEMICOLON 				; if , or ; do not print NL
.11fb	f0 09		beq $1206			beq 	_PrintExit2
.11fd	c9 c6		cmp #$c6			cmp 	#TKW_COMMA
.11ff	f0 05		beq $1206			beq 	_PrintExit2
.1201	a2 00		ldx #$00		ldx	#0
.1203	20 7f 20	jsr $207f		jsr	deviceHandler
.1206					_PrintExit2:
.1206	60		rts				rts
.1207					PrintString:
.1207	8a		txa				txa
.1208	48		pha				pha
.1209	98		tya				tya
.120a	48		pha				pha
.120b	a0 00		ldy #$00			ldy 	#0							; get length
.120d	b1 04		lda ($04),y			lda 	(temp0),y
.120f	aa		tax				tax 								; into X
.1210	e0 00		cpx #$00	_PSLoop:cpx 	#0 							; finished ?
.1212	f0 10		beq $1224			beq 	_PSExit
.1214	ca		dex				dex
.1215	8a		txa				txa
.1216	48		pha				pha
.1217	c8		iny				iny
.1218	b1 04		lda ($04),y			lda 	(temp0),y
.121a	a2 04		ldx #$04		ldx	#4
.121c	20 7f 20	jsr $207f		jsr	deviceHandler
.121f	68		pla				pla
.1220	aa		tax				tax
.1221	4c 10 12	jmp $1210			jmp 	_PSLoop
.1224					_PSExit:
.1224	68		pla				pla
.1225	a8		tay				tay
.1226	68		pla				pla
.1227	aa		tax				tax
.1228	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/proc.asm

.0af1					paramCount:
>0af1							.fill 	1
.1229					CallProc:
.1229	20 04 14	jsr $1404			jsr 	FindProcedure 				; find procedure, put in temp0. A contains name length.
.122c	48		pha				pha 								; save length on stack
.122d	85 0c		sta $0c				sta 	tempShort 					; save length in tempshort
.122f	a5 05		lda $05				lda 	temp0+1 					; save procedure target on stack.
.1231	48		pha				pha
.1232	a5 04		lda $04				lda 	temp0
.1234	48		pha				pha
.1235	98		tya				tya 								; calculate Y + length
.1236	18		clc				clc
.1237	65 0c		adc $0c				adc 	tempShort
.1239	a8		tay				tay
.123a	a2 00		ldx #$00			ldx 	#0 							; where the first parameter goes - 1
.123c					_CallProcEvalParams:
.123c	e8		inx				inx
.123d	b1 02		lda ($02),y			lda 	(codePtr),y 				; do we have ) ?
.123f	c9 c4		cmp #$c4			cmp 	#TKW_RPAREN
.1241	f0 0b		beq $124e			beq 	_CPDoneParams
.1243	20 48 19	jsr $1948			jsr 	Evaluate 					; evaluate a parameter
.1246	b1 02		lda ($02),y			lda 	(codePtr),Y 				; get what's next, preconsume
.1248	c8		iny				iny
.1249	c9 c6		cmp #$c6			cmp 	#TKW_COMMA 					; if comma, go get another parameter
.124b	f0 ef		beq $123c			beq 	_CallProcEvalParams
.124d	88		dey				dey 								; undo consumption.
.124e					_CPDoneParams:
.124e	20 d1 1f	jsr $1fd1			jsr 	CheckRightParen 			; check closing parenthesis.
.1251	8e f1 0a	stx $0af1			stx 	paramCount 					; store parameter count+1
.1254	a2 04		ldx #$04			ldx 	#4							; make space on stack
.1256	a9 50		lda #$50			lda 	#markerPROC
.1258	20 f9 1f	jsr $1ff9			jsr 	RSClaim
.125b	a9 01		lda #$01			lda 	#1 							; store return address.
.125d	20 25 20	jsr $2025			jsr 	RSSavePosition
.1260	68		pla				pla 								; get the new code Ptr
.1261	85 02		sta $02				sta 	codePtr
.1263	68		pla				pla
.1264	85 03		sta $03				sta 	codePtr+1
.1266	68		pla				pla 								; length of name + 4 is the param start.
.1267	18		clc				clc
.1268	69 04		adc #$04			adc 	#4
.126a	a8		tay				tay
.126b	a2 ff		ldx #$ff			ldx 	#$FF
.126d					_CPLoadParameters:
.126d	e8		inx				inx 								; point to where the address should be loaded.
.126e	ec f1 0a	cpx $0af1			cpx 	paramCount 					; too many parameters in definition ?
.1271	f0 1e		beq $1291			beq 	_CPParamError
.1273	b1 02		lda ($02),y			lda 	(codePtr),y					; what follows
.1275	c9 c4		cmp #$c4			cmp 	#TKW_RPAREN 				; is it the right bracket
.1277	f0 0e		beq $1287			beq 	_CPParamComplete 			; done all the parameters
.1279	20 2f 11	jsr $112f			jsr 	LocaliseVariable 			; make following variable local, ref in tos,x
.127c	20 c4 10	jsr $10c4			jsr 	WriteValue 					; copy the evaluated parameter into there.
.127f	b1 02		lda ($02),y			lda 	(codePtr),y 				; followed by a comma ?
.1281	c8		iny				iny
.1282	c9 c6		cmp #$c6			cmp 	#TKW_COMMA
.1284	f0 e7		beq $126d			beq 	_CPLoadParameters
.1286	88		dey				dey 								; no, unconsume and check for )
.1287					_CPParamComplete:
.1287	20 d1 1f	jsr $1fd1			jsr 	CheckRightParen 			; check )
.128a	e8		inx				inx 								; check right number of parameters
.128b	ec f1 0a	cpx $0af1			cpx 	paramCount
.128e	d0 01		bne $1291			bne 	_CPParamError
.1290	60		rts				rts
.1291					_CPParamError:
.1291	a2 18		ldx #$18			ldx 	#ErrorID_Params
.1293	20 8c 20	jsr $208c			jsr 	ErrorHandler
.1296					ReturnProc:
.1296	20 42 11	jsr $1142			jsr 	RestoreLocals 				; get the locals back.
.1299	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.129b	a1 78		lda ($78,x)			lda 	(rsPointer,x)
.129d	c9 50		cmp #$50			cmp 	#markerPROC 						; does it match
.129f	f0 05		beq $12a6			beq 	_isok
.12a1	a2 12		ldx #$12			ldx 	#ErrorID_endProcErr
.12a3	20 8c 20	jsr $208c			jsr 	ErrorHandler
.12a6					_isok:
.12a6	a9 01		lda #$01			lda 	#1
.12a8	20 38 20	jsr $2038			jsr 	RSLoadPosition 				; reload the position from offset 1.
.12ab	a9 04		lda #$04			lda 	#4 							; throw 4 bytes from stack.
.12ad	20 1b 20	jsr $201b			jsr 	RSFree

;******  Return to file: main/main.asm


;******  Processing file: main/commands/rem.asm

.12b0					Command_Rem:
.12b0					Command_Rem2:
.12b0	b1 02		lda ($02),y			lda 	(codePtr),y 				; what follows
.12b2	c9 85		cmp #$85			cmp 	#TOK_STR 					; if it is a string then skip it.
.12b4	d0 06		bne $12bc			bne 	_CRNotString
.12b6	c8		iny				iny
.12b7	98		tya				tya
.12b8	38		sec				sec
.12b9	71 02		adc ($02),y			adc 	(codePtr),y 				; get string size, add to Y, +1 for the length
.12bb	a8		tay				tay
.12bc					_CRNotString:
.12bc	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/repeat.asm

.256e					Command_Repeat:
.256e	a2 04		ldx #$04			ldx 	#4 							; allocate 4 bytes on stack for REPEAT
.2570	a9 52		lda #$52			lda 	#markerREPEAT 				; repeat marker allocate 4 bytes
.2572	20 f9 1f	jsr $1ff9			jsr 	RSClaim
.2575	a9 01		lda #$01			lda 	#1 							; save position at offset 1.
.2577	20 25 20	jsr $2025			jsr 	RSSavePosition
.257a	60		rts				rts
.257b					Command_Until:
.257b	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.257d	a1 78		lda ($78,x)			lda 	(rsPointer,x)
.257f	c9 52		cmp #$52			cmp 	#markerREPEAT 						; does it match
.2581	f0 05		beq $2588			beq 	_isok
.2583	a2 0f		ldx #$0f			ldx 	#ErrorID_untilErr
.2585	20 8c 20	jsr $208c			jsr 	ErrorHandler
.2588					_isok:
.2588	20 65 19	jsr $1965			jsr 	EvaluateRootInteger 		; at the bottom.
.258b	20 85 1f	jsr $1f85			jsr 	MInt32Zero					; check if TOS zero
.258e	d0 06		bne $2596			bne 	_CUExit
.2590	a9 01		lda #$01			lda 	#1
.2592	20 38 20	jsr $2038			jsr 	RSLoadPosition 				; reload the position from offset 1.
.2595	60		rts				rts
.2596					_CUExit:
.2596	a9 04		lda #$04			lda 	#4 							; throw 4 bytes from stack.
.2598	20 1b 20	jsr $201b			jsr 	RSFree
.259b	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/run.asm

.12bd					Command_Run:
.12bd	a2 ff		ldx #$ff			ldx 	#$FF
.12bf	9a		txs				txs
.12c0	20 28 10	jsr $1028			jsr 	CommandClear 				; clear everything.
.12c3	20 1f 13	jsr $131f			jsr 	ResetCodeAddress 			; back to the start.
.12c6	a0 03		ldy #$03			ldy 	#3
.12c8					CRNextInstruction:
.12c8	64 7b		stz $7b				stz 	softMemAlloc+1
.12ca	b1 02		lda ($02),y			lda 	(codePtr),y 				; get next token.
.12cc	10 1c		bpl $12ea			bpl 	_CRNotToken
.12ce	c9 c4		cmp #$c4			cmp 	#TOK_TOKENS 				; if in the tokens then do that token.
.12d0	b0 0c		bcs $12de			bcs 	_CRExecute
.12d2	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST 				; unary is ignored.
.12d4	b0 56		bcs $132c			bcs 	Unimplemented
.12d6	c9 99		cmp #$99			cmp 	#TOK_STRUCTST 				; execute structures.
.12d8	b0 04		bcs $12de			bcs 	_CRExecute
.12da	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; if one of the system tokens $80-$85 do that
.12dc	b0 16		bcs $12f4			bcs 	_CRCheckIndirect 			; if in that unused range check for ! or ?
.12de					_CRExecute:
.12de	c8		iny				iny 								; consume it.
.12df	0a		asl a				asl 	a 							; double it, losing most significant bit.
.12e0	aa		tax				tax
.12e1	20 e7 12	jsr $12e7			jsr 	_CRRunRoutine 				; we want to do jsr (group0vectors,x)
.12e4	4c c8 12	jmp $12c8			jmp 	CRNextInstruction
.12e7					_CRRunRoutine:
.12e7	7c 36 13	jmp ($1336,x)			jmp 	(Group0Vectors,x)
.12ea					_CRNotToken:
.12ea	c9 40		cmp #$40			cmp 	#$40 						; if 0-3F then it is a letter
.12ec	b0 3e		bcs $132c			bcs 	Unimplemented
.12ee					_CRDefaultLet:
.12ee	20 b1 10	jsr $10b1			jsr 	CommandLet 					; do the default, LET
.12f1	4c c8 12	jmp $12c8			jmp 	CRNextInstruction
.12f4					_CRCheckIndirect:
.12f4	c9 97		cmp #$97			cmp 	#TKW_PLING 					; !<term> =
.12f6	f0 f6		beq $12ee			beq 	_CRDefaultLet
.12f8	c9 98		cmp #$98			cmp 	#TKW_QMARK 					; ?<term> =
.12fa	f0 f2		beq $12ee			beq 	_CRDefaultLet
.12fc	d0 2e		bne $132c			bne 	Unimplemented
.12fe					CommandShift1:
.12fe	b1 02		lda ($02),y			lda 	(codePtr),y 				; get shifted value
.1300	10 2a		bpl $132c			bpl 	Unimplemented 				; we have an error as this should not happen.
.1302	0a		asl a				asl 	a 							; double into X
.1303	aa		tax				tax
.1304	c8		iny				iny 								; advance over it.
.1305	20 0b 13	jsr $130b			jsr 	_RunIt 						; we have no jsr (aaaa,X)
.1308	4c c8 12	jmp $12c8			jmp 	CRNextInstruction
.130b					_RunIt:
.130b	7c e2 13	jmp ($13e2,x)			jmp 	(Group1Vectors-6*2,x) 					; and do the code.
.130e					CommandShift2:
.130e	b1 02		lda ($02),y			lda 	(codePtr),y 				; get shifted value
.1310	10 1a		bpl $132c			bpl 	Unimplemented 				; we have an error as this should not happen.
.1312	0a		asl a				asl 	a 							; double into X
.1313	aa		tax				tax
.1314	c8		iny				iny 								; advance over it.
.1315	20 1b 13	jsr $131b			jsr 	_RunIt 						; we have no jsr (aaaa,X)
.1318	4c c8 12	jmp $12c8			jmp 	CRNextInstruction
.131b					_RunIt:
.131b	7c f6 13	jmp ($13f6,x)			jmp 	(Group2Vectors-6*2,x) 					; and do the code.
.131e					CommandColon:
.131e	60		rts				rts
.131f					ResetCodeAddress:
.131f	ad c8 0a	lda $0ac8			lda 	basePage 					; copy basePage to code Pointer
.1322	85 02		sta $02				sta 	codePtr
.1324	ad c9 0a	lda $0ac9			lda 	basePage+1
.1327	85 03		sta $03				sta 	codePtr+1
.1329	a0 03		ldy #$03			ldy 	#3 							; offset after offset link and line#
.132b	60		rts				rts
.132c					Unimplemented:
.132c	a2 01		ldx #$01			ldx 	#ErrorID_Missing
.132e	20 8c 20	jsr $208c			jsr 	ErrorHandler
.1331					TKErr01:
.1331					TKErr02:
.1331					TKErr03:
.1331					TKErr04:
.1331					TKErr05:
.1331					TKErr06:
.1331					TKErr07:
.1331					TKErr08:
.1331	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.1333	20 8c 20	jsr $208c			jsr 	ErrorHandler

;******  Processing file: main/commands/../../generated/tokenvectors0.inc

.1336					Group0Vectors:
>1336	e4 14					.word	AdvanceNextLine          ; $80 [[eol]]
>1338	fe 12					.word	CommandShift1            ; $81 [[sh1]]
>133a	0e 13					.word	CommandShift2            ; $82 [[sh2]]
>133c	2c 13					.word	Unimplemented            ; $83 [[sh3]]
>133e	2c 13					.word	Unimplemented            ; $84 [[fpc]]
>1340	31 13					.word	TKErr08                  ; $85 [[str]]
>1342	37 16					.word	AndHandler               ; $86 and
>1344	24 16					.word	OrHandler                ; $87 or
>1346	11 16					.word	XorHandler               ; $88 xor
>1348	59 17					.word	CompareGreaterEq         ; $89 >=
>134a	63 17					.word	CompareLessEq            ; $8a <=
>134c	45 17					.word	CompareGreater           ; $8b >
>134e	3b 17					.word	CompareLess              ; $8c <
>1350	31 17					.word	CompareEquals            ; $8d =
>1352	4f 17					.word	CompareNotEquals         ; $8e <>
>1354	a2 15					.word	AddHandler               ; $8f +
>1356	c5 15					.word	SubHandler               ; $90 -
>1358	5d 16					.word	ShrHandler               ; $91 >>
>135a	4a 16					.word	ShlHandler               ; $92 <<
>135c	d8 15					.word	MulHandler               ; $93 *
>135e	eb 15					.word	DivHandler               ; $94 /
>1360	fe 15					.word	ModHandler               ; $95 mod
>1362	96 16					.word	PowerHandler             ; $96 ^
>1364	70 16					.word	WordRefHandler           ; $97 !
>1366	83 16					.word	ByteRefHandler           ; $98 ?
>1368	6e 25					.word	Command_Repeat           ; $99 repeat
>136a	9c 25					.word	Command_While            ; $9a while
>136c	5f 24					.word	Command_FOR              ; $9b for
>136e	75 10					.word	CommandIf                ; $9c if
>1370	31 13					.word	TKErr04                  ; $9d defproc
>1372	7b 25					.word	Command_Until            ; $9e until
>1374	bf 25					.word	Command_Wend             ; $9f wend
>1376	c0 24					.word	Command_NEXT             ; $a0 next
>1378	31 13					.word	TKErr06                  ; $a1 then
>137a	b0 10					.word	Command_ENDIF            ; $a2 endif
>137c	96 12					.word	ReturnProc               ; $a3 endproc
>137e	1e 19					.word	UnaryParenthesis         ; $a4 (
>1380	70 1a					.word	UnaryLen                 ; $a5 len(
>1382	b4 1a					.word	UnarySgn                 ; $a6 sgn(
>1384	9d 1a					.word	UnaryAbs                 ; $a7 abs(
>1386	0d 1b					.word	Unary_Random             ; $a8 random(
>1388	57 1b					.word	Unary_Page               ; $a9 page
>138a	5a 1f					.word	MInt32True               ; $aa true
>138c	5e 1f					.word	MInt32False              ; $ab false
>138e	22 1b					.word	Unary_Min                ; $ac min(
>1390	26 1b					.word	Unary_Max                ; $ad max(
>1392	0d 1c					.word	UnarySys                 ; $ae sys(
>1394	d0 1b					.word	UnaryTimer               ; $af timer(
>1396	f3 19					.word	EventFunction            ; $b0 event(
>1398	f9 1b					.word	UnaryGet                 ; $b1 get(
>139a	e9 1b					.word	UnaryInkey               ; $b2 inkey(
>139c	a4 1b					.word	UnaryAlloc               ; $b3 alloc(
>139e	35 1c					.word	ExecChr                  ; $b4 chr$(
>13a0	49 1c					.word	ExecLeft                 ; $b5 left$(
>13a2	66 1c					.word	ExecMid                  ; $b6 mid$(
>13a4	8e 1c					.word	ExecRight                ; $b7 right$(
>13a6	73 17					.word	Event_Str                ; $b8 str$(
>13a8	a2 17					.word	UnaryVal                 ; $b9 val(
>13aa	cb 1a					.word	UnaryPeek                ; $ba peek(
>13ac	d1 1a					.word	UnaryDeek                ; $bb deek(
>13ae	d7 1a					.word	UnaryLeek                ; $bc leek(
>13b0	8e 1a					.word	UnaryAsc                 ; $bd asc(
>13b2	82 1b					.word	UnaryIntToFloat          ; $be int(
>13b4	95 1b					.word	UnaryFloatToInt          ; $bf float(
>13b6	a5 17					.word	UnaryIsVal               ; $c0 isval(
>13b8	65 1b					.word	UnaryReference           ; $c1 @
>13ba	7b 1b					.word	UnaryComplement          ; $c2 ~
>13bc	78 1b					.word	UnaryHexMarker           ; $c3 &
>13be	31 13					.word	TKErr01                  ; $c4 )
>13c0	1e 13					.word	CommandColon             ; $c5 :
>13c2	31 13					.word	TKErr02                  ; $c6 ,
>13c4	31 13					.word	TKErr03                  ; $c7 ;
>13c6	b0 12					.word	Command_Rem2             ; $c8 '
>13c8	31 13					.word	TKErr07                  ; $c9 to
>13ca	31 13					.word	TKErr05                  ; $ca step
>13cc	29 12					.word	CallProc                 ; $cb proc
>13ce	2c 13					.word	Unimplemented            ; $cc local
>13d0	2c 13					.word	Unimplemented            ; $cd dim
>13d2	b0 12					.word	Command_Rem              ; $ce rem
>13d4	b1 10					.word	CommandLet               ; $cf let
>13d6	2c 13					.word	Unimplemented            ; $d0 input
>13d8	aa 10					.word	Command_ELSE             ; $d1 else
>13da	55 15					.word	Command_VDU              ; $d2 vdu
>13dc	8e 11					.word	Command_Print            ; $d3 print
>13de	23 15					.word	CommandGOTO              ; $d4 goto
>13e0	f8 14					.word	CommandGOSUB             ; $d5 gosub
>13e2	0b 15					.word	CommandRETURN            ; $d6 return
>13e4	2c 13					.word	Unimplemented            ; $d7 data
>13e6	1a 10					.word	Command_Assert           ; $d8 assert
>13e8	51 11					.word	Command_Poke             ; $d9 poke
>13ea	55 11					.word	Command_Doke             ; $da doke
>13ec	59 11					.word	Command_Loke             ; $db loke

;******  Return to file: main/commands/run.asm


;******  Processing file: main/commands/../../generated/tokenvectors1.inc

.13ee					Group1Vectors:
>13ee	28 10					.word	CommandClear             ; $86 clear
>13f0	2c 13					.word	Unimplemented            ; $87 load
>13f2	2c 13					.word	Unimplemented            ; $88 save
>13f4	2c 13					.word	Unimplemented            ; $89 list
>13f6	43 11					.word	Command_New              ; $8a new
>13f8	bd 12					.word	Command_Run              ; $8b run
>13fa	2c 13					.word	Unimplemented            ; $8c read
>13fc	2c 13					.word	Unimplemented            ; $8d restore
>13fe	e1 14					.word	CommandEnd               ; $8e end
>1400	dc 14					.word	CommandStop              ; $8f stop

;******  Return to file: main/commands/run.asm


;******  Processing file: main/commands/../../generated/tokenvectors2.inc

.1402					Group2Vectors:
>1402	2c 13					.word	Unimplemented            ; $86 vpoke

;******  Return to file: main/commands/run.asm


;******  Return to file: main/main.asm


;******  Processing file: main/commands/scanner.asm

.0af2					procList:
>0af2							.fill 	2		 					; terminated by name high.
.0af4					yInLine:
>0af4							.fill 	1
.1404					FindProcedure:
.1404	8c f4 0a	sty $0af4			sty 	yInLine
.1407	20 c2 14	jsr $14c2			jsr 	CalculateProcedureHash		; calculate the hash of the procedure.
.140a	85 06		sta $06				sta 	temp1
.140c	ad f2 0a	lda $0af2			lda		procList 					; put procList address in temp2
.140f	85 08		sta $08				sta 	temp2
.1411	ad f3 0a	lda $0af3			lda 	procList+1
.1414	85 09		sta $09				sta 	temp2+1
.1416	a0 00		ldy #$00			ldy 	#0 							; position in this table.
.1418					_FPLoop:
.1418	b1 08		lda ($08),y			lda 	(temp2),y
.141a	f0 4f		beq $146b			beq 	_FPError 					; if so, we don't know this procedure.
.141c	85 05		sta $05				sta 	temp0+1 					; copy MSB/LSB to temp0 as we go.
.141e	c8		iny				iny
.141f	b1 08		lda ($08),y			lda 	(temp2),y
.1421	85 04		sta $04				sta 	temp0
.1423	c8		iny				iny
.1424	b1 08		lda ($08),y			lda 	(temp2),y					; check the procedure hash.
.1426	c5 06		cmp $06				cmp 	temp1
.1428	d0 2b		bne $1455			bne 	_FPNext 					; hash is different, go to next.
.142a	38		sec				sec
.142b	ad f4 0a	lda $0af4			lda 	yInLine 					; position in line must be at least 4
.142e	e9 04		sbc #$04			sbc 	#4
.1430	18		clc				clc
.1431	65 02		adc $02				adc 	codePtr
.1433	85 0a		sta $0a				sta 	temp3
.1435	a5 03		lda $03				lda 	codePtr+1
.1437	69 00		adc #$00			adc 	#0
.1439	85 0b		sta $0b				sta 	temp3+1
.143b	98		tya				tya
.143c	48		pha				pha
.143d	a0 04		ldy #$04			ldy 	#4
.143f					_FPCName:
.143f	b1 0a		lda ($0a),y			lda 	(temp3),y 					; check the same
.1441	d1 04		cmp ($04),y			cmp 	(temp0),y
.1443	d0 0e		bne $1453			bne 	_FPPulYNext 				; if different go to next one.
.1445	c8		iny				iny
.1446	c9 3a		cmp #$3a			cmp 	#$3A
.1448	90 f5		bcc $143f			bcc 	_FPCName 					; compare the whole lot....
.144a	68		pla				pla 								; throw away the saved Y
.144b	98		tya				tya 								; length of name is Y-4
.144c	38		sec				sec
.144d	e9 04		sbc #$04			sbc 	#4
.144f	ac f4 0a	ldy $0af4			ldy 	yInLine  					; get the original Y back
.1452	60		rts				rts
.1453					_FPPulYNext:
.1453	68		pla				pla
.1454	a8		tay				tay
.1455					_FPNext:
.1455	c8		iny				iny 								; next procedure record.
.1456	10 c0		bpl $1418			bpl 	_FPLoop 					; if done 128 already ... e.g. Y -ve
.1458	98		tya				tya 								; subtract 128 from Y
.1459	38		sec				sec
.145a	e9 80		sbc #$80			sbc 	#128
.145c	a8		tay				tay
.145d	18		clc				clc 								; add 128 to temp2, so we can have more than
.145e	a5 08		lda $08				lda 	temp2 						; 255/3 = 85 procedures
.1460	69 80		adc #$80			adc 	#128
.1462	85 08		sta $08				sta 	temp2
.1464	90 b2		bcc $1418			bcc 	_FPLoop
.1466	e6 09		inc $09				inc 	temp2+1
.1468	4c 18 14	jmp $1418			jmp 	_FPLoop
.146b					_FPError:
.146b	a2 17		ldx #$17			ldx 	#ErrorID_NoProc
.146d	20 8c 20	jsr $208c			jsr 	ErrorHandler
.1470					ScanProc:
.1470	98		tya				tya
.1471	48		pha				pha
.1472	a5 0f		lda $0f				lda 	lowMemory 					; copy the start of the procList, at low memory
.1474	8d f2 0a	sta $0af2			sta 	procList
.1477	a5 10		lda $10				lda 	lowMemory+1
.1479	8d f3 0a	sta $0af3			sta 	procList+1
.147c	20 1f 13	jsr $131f			jsr 	ResetCodeAddress 			; back to the start.
.147f					_ScanLoop:
.147f	a0 00		ldy #$00			ldy 	#0 							; check reached program end
.1481	b1 02		lda ($02),y			lda 	(codePtr),y
.1483	f0 2a		beq $14af			beq 	_ScanExit
.1485	a0 03		ldy #$03			ldy 	#3							; get first token
.1487	b1 02		lda ($02),y			lda 	(codePtr),y
.1489	c9 9d		cmp #$9d			cmp 	#TKW_DEFPROC				; skip next if not DEFPROC
.148b	d0 12		bne $149f			bne 	_ScanNext
.148d	a5 03		lda $03				lda 	codePtr+1 					; write high and low
.148f	20 b7 14	jsr $14b7			jsr 	_ScanWrite
.1492	a5 02		lda $02				lda 	codePtr
.1494	20 b7 14	jsr $14b7			jsr 	_ScanWrite
.1497	a0 04		ldy #$04			ldy 	#4 							; start of name part
.1499	20 c2 14	jsr $14c2			jsr 	CalculateProcedureHash 		; calculate procedure hash
.149c	20 b7 14	jsr $14b7			jsr 	_ScanWrite
.149f					_ScanNext:
.149f	18		clc				clc
.14a0	a0 00		ldy #$00			ldy 	#0
.14a2	b1 02		lda ($02),y			lda 	(codePtr),y
.14a4	65 02		adc $02				adc 	codePtr
.14a6	85 02		sta $02				sta 	codePtr
.14a8	90 d5		bcc $147f			bcc 	_ScanLoop
.14aa	e6 03		inc $03				inc 	codePtr+1
.14ac	4c 7f 14	jmp $147f			jmp 	_ScanLoop
.14af					_ScanExit:
.14af	a9 00		lda #$00			lda 	#0 							; write ending zero.
.14b1	20 b7 14	jsr $14b7			jsr 	_ScanWrite
.14b4	68		pla				pla
.14b5	a8		tay				tay
.14b6	60		rts				rts
.14b7					_ScanWrite:
.14b7	a0 00		ldy #$00			ldy 	#0
.14b9	91 0f		sta ($0f),y			sta 	(lowMemory),y
.14bb	e6 0f		inc $0f				inc 	lowMemory
.14bd	d0 02		bne $14c1			bne 	_SWNoCarry
.14bf	e6 10		inc $10				inc 	lowMemory+1
.14c1					_SWNoCarry:
.14c1	60		rts				rts
.14c2					CalculateProcedureHash:
.14c2	a9 00		lda #$00			lda 	#0 							; clear hash.
.14c4	85 04		sta $04				sta 	temp0
.14c6					_CPHLoop:
.14c6	18		clc				clc 								; add character and rotate and add carry back in
.14c7	b1 02		lda ($02),y			lda 	(codePtr),y
.14c9	65 04		adc $04				adc 	temp0
.14cb	6a		ror a				ror 	a
.14cc	69 0d		adc #$0d			adc 	#13 						; primes usually good for this sort of thing.
.14ce	85 04		sta $04				sta 	temp0 						; (down with this sort of thing)
.14d0	b1 02		lda ($02),y			lda 	(codePtr),y
.14d2	c8		iny				iny 								; advance incase we go round again.
.14d3	c9 3a		cmp #$3a			cmp 	#$3A
.14d5	90 ef		bcc $14c6			bcc 	_CPHLoop
.14d7	a5 04		lda $04				lda 	temp0
.14d9	a9 aa		lda #$aa			lda 	#$AA
.14db	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/stopend.asm

.14dc					CommandStop:
.14dc	a2 06		ldx #$06			ldx 	#ErrorID_Stop
.14de	20 8c 20	jsr $208c			jsr 	ErrorHandler
.14e1					CommandEnd:
.14e1	4c ff ff	jmp $ffff			jmp 	$FFFF 						; fudge to crash out of emulator
.14e4					AdvanceNextLine:
.14e4	a0 00		ldy #$00			ldy 	#0 							; get offset
.14e6	b1 02		lda ($02),y			lda 	(codePtr),y
.14e8	18		clc				clc 								; add to codePtr
.14e9	65 02		adc $02				adc 	codePtr
.14eb	85 02		sta $02				sta 	codePtr
.14ed	90 02		bcc $14f1			bcc 	_ANLNoCarry
.14ef	e6 03		inc $03				inc 	codePtr+1
.14f1					_ANLNoCarry:
.14f1	b1 02		lda ($02),y			lda 	(codePtr),y 				; if end of program (or was just stand alone.
.14f3	f0 ec		beq $14e1			beq 	CommandEnd 					; execute END
.14f5	a0 03		ldy #$03			ldy 	#3 							; start of tokens on line.
.14f7	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/transfer.asm

.14f8					CommandGOSUB:
.14f8	20 65 19	jsr $1965			jsr 	EvaluateRootInteger			; get GOSUB line on stack top.
.14fb	a2 04		ldx #$04			ldx 	#4 							; allocate 4 bytes on stack for GOSUB
.14fd	a9 47		lda #$47			lda 	#markerGOSUB  				; <marker> <return addr/offset>
.14ff	20 f9 1f	jsr $1ff9			jsr 	RSClaim
.1502	a9 01		lda #$01			lda 	#1 							; save position at offset 1.
.1504	20 25 20	jsr $2025			jsr 	RSSavePosition
.1507	a2 00		ldx #$00			ldx 	#0 							; point back at GOSUB line
.1509	f0 1b		beq $1526			beq 	GotoTOS 					; and do a GOTO there.
.150b					CommandRETURN:
.150b	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.150d	a1 78		lda ($78,x)			lda 	(rsPointer,x)
.150f	c9 47		cmp #$47			cmp 	#markerGOSUB 						; does it match
.1511	f0 05		beq $1518			beq 	_isok
.1513	a2 0e		ldx #$0e			ldx 	#ErrorID_returnErr
.1515	20 8c 20	jsr $208c			jsr 	ErrorHandler
.1518					_isok:
.1518	a9 01		lda #$01			lda 	#1
.151a	20 38 20	jsr $2038			jsr 	RSLoadPosition 				; reload the position from offset 1.
.151d	a9 04		lda #$04			lda 	#4 							; throw 4 bytes from stack.
.151f	20 1b 20	jsr $201b			jsr 	RSFree
.1522	60		rts				rts
.1523					CommandGOTO:
.1523	20 65 19	jsr $1965			jsr 	EvaluateRootInteger 		; get GOTO line on stack top.
.1526					GotoTOS:
.1526	20 1f 13	jsr $131f			jsr 	ResetCodeAddress 			; simple search.
.1529					_GotoSearch:
.1529	a0 00		ldy #$00			ldy 	#0 							; get offset
.152b	b1 02		lda ($02),y			lda 	(codePtr),y
.152d	f0 21		beq $1550			beq 	_GotoError 					; not found.
.152f	c8		iny				iny									; check LSB match
.1530	b1 02		lda ($02),y			lda 	(codePtr),y
.1532	d5 48		cmp $48,x			cmp 	esInt0,x
.1534	d0 07		bne $153d			bne 	_GotoNext
.1536	c8		iny				iny
.1537	b1 02		lda ($02),y			lda 	(codePtr),y
.1539	d5 50		cmp $50,x			cmp 	esInt1,x
.153b	f0 10		beq $154d			beq 	_GotoFound
.153d					_GotoNext:
.153d	a0 00		ldy #$00			ldy 	#0 							; go next line
.153f	b1 02		lda ($02),y			lda 	(codePtr),y
.1541	18		clc				clc
.1542	65 02		adc $02				adc 	codePtr
.1544	85 02		sta $02				sta 	codePtr
.1546	90 e1		bcc $1529			bcc 	_GotoSearch
.1548	e6 03		inc $03				inc 	codePtr+1
.154a	4c 29 15	jmp $1529			jmp 	_GotoSearch
.154d					_GotoFound:
.154d	a0 03		ldy #$03			ldy 	#3 							; continue from that line
.154f	60		rts				rts
.1550					_GotoError:
.1550	a2 0c		ldx #$0c			ldx 	#ErrorID_LineNumber
.1552	20 8c 20	jsr $208c			jsr 	ErrorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/commands/vdu.asm

.1555					Command_VDU:
.1555	20 65 19	jsr $1965			jsr 	EvaluateRootInteger 			; get integer at root.
.1558	a5 48		lda $48				lda 	esInt0
.155a	a2 04		ldx #$04		ldx	#4
.155c	20 7f 20	jsr $207f		jsr	deviceHandler
.155f					_CVNext:
.155f	b1 02		lda ($02),y			lda 	(codePtr),y 					; what follows ?
.1561	c8		iny				iny
.1562	c9 c6		cmp #$c6			cmp 	#TKW_COMMA 						; comma, do again
.1564	f0 ef		beq $1555			beq 	Command_VDU
.1566	c9 c7		cmp #$c7			cmp 	#TKW_SEMICOLON 					; semicolon, print MSB
.1568	d0 0a		bne $1574			bne 	_CVExit
.156a	a5 50		lda $50				lda 	esInt1
.156c	a2 04		ldx #$04		ldx	#4
.156e	20 7f 20	jsr $207f		jsr	deviceHandler
.1571	4c 5f 15	jmp $155f			jmp 	_CVNext
.1574	88		dey		_CVExit:dey
.1575	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/while.asm

.259c					Command_While:
.259c	a9 57		lda #$57			lda 	#markerWhile 				; gosub marker allocate 4 bytes.
.259e	a2 04		ldx #$04			ldx 	#4
.25a0	20 f9 1f	jsr $1ff9			jsr 	RSClaim 					; create on stack.
.25a3	88		dey				dey
.25a4	a9 01		lda #$01			lda 	#1
.25a6	20 25 20	jsr $2025			jsr 	RSSavePosition 				; save position before the WHILE keyword.
.25a9	c8		iny				iny
.25aa	20 67 19	jsr $1967			jsr 	EvaluateInteger				; get the conditional
.25ad	20 85 1f	jsr $1f85			jsr 	MInt32Zero 	 				; if zero, skip forward.
.25b0	f0 01		beq $25b3			beq 	_CWFail
.25b2	60		rts				rts
.25b3					_CWFail:
.25b3	a9 04		lda #$04			lda 	#4
.25b5	20 1b 20	jsr $201b			jsr 	RSFree 						; close the just opened position.
.25b8	a9 9f		lda #$9f			lda 	#TKW_WEND 					; scan forward past WEND.
.25ba	aa		tax				tax
.25bb	20 d7 25	jsr $25d7			jsr 	ScanForward
.25be	60		rts				rts
.25bf					Command_Wend:
.25bf	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.25c1	a1 78		lda ($78,x)			lda 	(rsPointer,x)
.25c3	c9 57		cmp #$57			cmp 	#markerWHILE 						; does it match
.25c5	f0 05		beq $25cc			beq 	_isok
.25c7	a2 11		ldx #$11			ldx 	#ErrorID_wendErr
.25c9	20 8c 20	jsr $208c			jsr 	ErrorHandler
.25cc					_isok:
.25cc	a9 01		lda #$01			lda 	#1
.25ce	20 38 20	jsr $2038			jsr 	RSLoadPosition				; go back until true
.25d1	a9 04		lda #$04			lda 	#4
.25d3	20 1b 20	jsr $201b			jsr 	RSFree 						; close the loop
.25d6	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/binary.asm

.1576					BinaryProcess:
.1576	b5 40		lda $40,x			lda 	esType,x 					; or type bytes together and check bit 6.
.1578	15 41		ora $41,x			ora 	esType+1,x
.157a	0a		asl a				asl 	a
.157b	30 0e		bmi $158b			bmi 	_BPStringType 				; if one is set, then string type.
.157d	18		clc				clc 								; return CC for integer
.157e	29 02		and #$02			and 	#$02 						; $02 because of ASL A.
.1580	f0 08		beq $158a			beq 	_BPExit 					; if both integer then return with CC.
.1582	20 90 15	jsr $1590			jsr 	BPMakeBothFloat 			; make both float
.1585	a9 01		lda #$01			lda 	#$01 						; set result type to float
.1587	95 40		sta $40,x			sta 	esType,x
.1589	38		sec				sec 								; and return with carry set.
.158a					_BPExit:
.158a	60		rts				rts
.158b					_BPStringType:
.158b	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.158d	20 8c 20	jsr $208c			jsr 	ErrorHandler
.1590					BPMakeBothFloat:
.1590	e8		inx				inx
.1591	20 95 15	jsr $1595			jsr 	BPMakeFloat 				; one is a float, so we do both as floats.
.1594	ca		dex				dex
.1595					BPMakeFloat:
.1595	b5 40		lda $40,x			lda 	esType,x 					; get type bit.
.1597	4a		lsr a				lsr 	a
.1598	b0 07		bcs $15a1			bcs 	_BPIsFloat
.159a	8a		txa				txa
.159b	a2 1a		ldx #$1a		ldx	#26
.159d	20 93 20	jsr $2093		jsr	floatingpointHandler
.15a0	aa		tax				tax
.15a1					_BPIsFloat:
.15a1	60		rts				rts
.15a2					AddHandler:
.15a2	20 f1 17	jsr $17f1			jsr 	DereferenceTwo 				; dereference top two on stack.
.15a5	b5 40		lda $40,x			lda 	esType,x 					; check two strings.
.15a7	35 41		and $41,x			and 	esType+1,x
.15a9	29 40		and #$40			and 	#$40 						; if both have bit 6 set ...
.15ab	d0 10		bne $15bd			bne 	_AHStringConcat				; concatenate strings.
.15ad	20 76 15	jsr $1576			jsr 	BinaryProcess 				; check to see if either is float
.15b0	b0 03		bcs $15b5			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.15b2	4c 49 1e	jmp $1e49			jmp 	MInt32Add 							; else do it as integer.
.15b5					_IsFPOperation:
.15b5	8a		txa				txa 								; call the relevant fp routine
.15b6	a2 02		ldx #$02		ldx	#2
.15b8	20 93 20	jsr $2093		jsr	floatingpointHandler
.15bb	aa		tax				tax
.15bc	60		rts				rts
.15bd					_AHStringConcat:
.15bd	8a		txa				txa
.15be	a2 04		ldx #$04		ldx	#4
.15c0	20 ea 22	jsr $22ea		jsr	stringHandler
.15c3	aa		tax				tax
.15c4	60		rts				rts
.15c5					SubHandler:
.15c5	20 f1 17	jsr $17f1			jsr 	DereferenceTwo
.15c8	20 76 15	jsr $1576			jsr 	BinaryProcess 				; check to see if either is float
.15cb	b0 03		bcs $15d0			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.15cd	4c 63 1e	jmp $1e63			jmp 	MInt32Sub 							; else do it as integer.
.15d0					_IsFPOperation:
.15d0	8a		txa				txa 								; call the relevant fp routine
.15d1	a2 10		ldx #$10		ldx	#16
.15d3	20 93 20	jsr $2093		jsr	floatingpointHandler
.15d6	aa		tax				tax
.15d7	60		rts				rts
.15d8					MulHandler:
.15d8	20 f1 17	jsr $17f1			jsr 	DereferenceTwo
.15db	20 76 15	jsr $1576			jsr 	BinaryProcess 				; check to see if either is float
.15de	b0 03		bcs $15e3			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.15e0	4c 7d 1e	jmp $1e7d			jmp 	MInt32Multiply 							; else do it as integer.
.15e3					_IsFPOperation:
.15e3	8a		txa				txa 								; call the relevant fp routine
.15e4	a2 0a		ldx #$0a		ldx	#10
.15e6	20 93 20	jsr $2093		jsr	floatingpointHandler
.15e9	aa		tax				tax
.15ea	60		rts				rts
.15eb					DivHandler:
.15eb	20 f1 17	jsr $17f1			jsr 	DereferenceTwo
.15ee	20 76 15	jsr $1576			jsr 	BinaryProcess 				; check to see if either is float
.15f1	b0 03		bcs $15f6			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.15f3	4c 41 1d	jmp $1d41			jmp 	MInt32SDivide 							; else do it as integer.
.15f6					_IsFPOperation:
.15f6	8a		txa				txa 								; call the relevant fp routine
.15f7	a2 06		ldx #$06		ldx	#6
.15f9	20 93 20	jsr $2093		jsr	floatingpointHandler
.15fc	aa		tax				tax
.15fd	60		rts				rts
.15fe					ModHandler:
.15fe	20 f1 17	jsr $17f1			jsr 	DereferenceTwo
.1601	20 76 15	jsr $1576			jsr 	BinaryProcess 				; check to see if either is float
.1604	b0 03		bcs $1609			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.1606	4c bf 1d	jmp $1dbf			jmp 	MInt32Modulus 							; else do it as integer.
.1609					_IsFPOperation:
.1609	8a		txa				txa 								; call the relevant fp routine
.160a	a2 08		ldx #$08		ldx	#8
.160c	20 93 20	jsr $2093		jsr	floatingpointHandler
.160f	aa		tax				tax
.1610	60		rts				rts
.1611					XorHandler:
.1611	20 f1 17	jsr $17f1			jsr 	DereferenceTwo
.1614	20 76 15	jsr $1576			jsr 	BinaryProcess 				; check to see if either is float
.1617	b0 03		bcs $161c			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.1619	4c f3 1c	jmp $1cf3			jmp 	MInt32Xor 							; else do it as integer.
.161c					_IsFPOperation:
.161c	8a		txa				txa 								; call the relevant fp routine
.161d	a2 08		ldx #$08		ldx	#8
.161f	20 93 20	jsr $2093		jsr	floatingpointHandler
.1622	aa		tax				tax
.1623	60		rts				rts
.1624					OrHandler:
.1624	20 f1 17	jsr $17f1			jsr 	DereferenceTwo
.1627	20 76 15	jsr $1576			jsr 	BinaryProcess 				; check to see if either is float
.162a	b0 03		bcs $162f			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.162c	4c da 1c	jmp $1cda			jmp 	MInt32Or 							; else do it as integer.
.162f					_IsFPOperation:
.162f	8a		txa				txa 								; call the relevant fp routine
.1630	a2 08		ldx #$08		ldx	#8
.1632	20 93 20	jsr $2093		jsr	floatingpointHandler
.1635	aa		tax				tax
.1636	60		rts				rts
.1637					AndHandler:
.1637	20 f1 17	jsr $17f1			jsr 	DereferenceTwo
.163a	20 76 15	jsr $1576			jsr 	BinaryProcess 				; check to see if either is float
.163d	b0 03		bcs $1642			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.163f	4c c1 1c	jmp $1cc1			jmp 	MInt32And 							; else do it as integer.
.1642					_IsFPOperation:
.1642	8a		txa				txa 								; call the relevant fp routine
.1643	a2 08		ldx #$08		ldx	#8
.1645	20 93 20	jsr $2093		jsr	floatingpointHandler
.1648	aa		tax				tax
.1649	60		rts				rts
.164a					ShlHandler:
.164a	20 f1 17	jsr $17f1			jsr 	DereferenceTwo
.164d	20 76 15	jsr $1576			jsr 	BinaryProcess 				; check to see if either is float
.1650	b0 03		bcs $1655			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.1652	4c cb 16	jmp $16cb			jmp 	Mint32ShiftLeftX 							; else do it as integer.
.1655					_IsFPOperation:
.1655	8a		txa				txa 								; call the relevant fp routine
.1656	a2 08		ldx #$08		ldx	#8
.1658	20 93 20	jsr $2093		jsr	floatingpointHandler
.165b	aa		tax				tax
.165c	60		rts				rts
.165d					ShrHandler:
.165d	20 f1 17	jsr $17f1			jsr 	DereferenceTwo
.1660	20 76 15	jsr $1576			jsr 	BinaryProcess 				; check to see if either is float
.1663	b0 03		bcs $1668			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.1665	4c ce 16	jmp $16ce			jmp 	MInt32ShiftRightX 							; else do it as integer.
.1668					_IsFPOperation:
.1668	8a		txa				txa 								; call the relevant fp routine
.1669	a2 08		ldx #$08		ldx	#8
.166b	20 93 20	jsr $2093		jsr	floatingpointHandler
.166e	aa		tax				tax
.166f	60		rts				rts
.1670					WordRefHandler:
.1670	20 f1 17	jsr $17f1			jsr 	DereferenceTwo
.1673	20 76 15	jsr $1576			jsr 	BinaryProcess 				; check to see if either is float
.1676	b0 03		bcs $167b			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.1678	4c bd 16	jmp $16bd			jmp 	MInt32WordIndirect 							; else do it as integer.
.167b					_IsFPOperation:
.167b	8a		txa				txa 								; call the relevant fp routine
.167c	a2 08		ldx #$08		ldx	#8
.167e	20 93 20	jsr $2093		jsr	floatingpointHandler
.1681	aa		tax				tax
.1682	60		rts				rts
.1683					ByteRefHandler:
.1683	20 f1 17	jsr $17f1			jsr 	DereferenceTwo
.1686	20 76 15	jsr $1576			jsr 	BinaryProcess 				; check to see if either is float
.1689	b0 03		bcs $168e			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.168b	4c c1 16	jmp $16c1			jmp 	MInt32ByteIndirect 							; else do it as integer.
.168e					_IsFPOperation:
.168e	8a		txa				txa 								; call the relevant fp routine
.168f	a2 08		ldx #$08		ldx	#8
.1691	20 93 20	jsr $2093		jsr	floatingpointHandler
.1694	aa		tax				tax
.1695	60		rts				rts
.1696					PowerHandler:
.1696	20 f1 17	jsr $17f1			jsr 	DereferenceTwo
.1699	20 76 15	jsr $1576			jsr 	BinaryProcess 				; check to see if either is float
.169c	b0 03		bcs $16a1			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.169e	4c a9 16	jmp $16a9			jmp 	PowerInteger 							; else do it as integer.
.16a1					_IsFPOperation:
.16a1	8a		txa				txa 								; call the relevant fp routine
.16a2	a2 16		ldx #$16		ldx	#22
.16a4	20 93 20	jsr $2093		jsr	floatingpointHandler
.16a7	aa		tax				tax
.16a8	60		rts				rts
.16a9					PowerInteger:
.16a9	20 90 15	jsr $1590			jsr 	BPMakeBothFloat				; make them float.
.16ac	8a		txa				txa
.16ad	a2 16		ldx #$16		ldx	#22
.16af	20 93 20	jsr $2093		jsr	floatingpointHandler
.16b2	a2 12		ldx #$12		ldx	#18
.16b4	20 93 20	jsr $2093		jsr	floatingpointHandler
.16b7	aa		tax				tax
.16b8	a9 00		lda #$00			lda 	#0 							; make type integer
.16ba	95 40		sta $40,x			sta 	esType,x
.16bc	60		rts				rts
.16bd					Mint32WordIndirect:
.16bd	a9 80		lda #$80			lda 	#$80 				 		; word reference type
.16bf	d0 02		bne $16c3			bne 	Min32Indirect
.16c1					Mint32ByteIndirect:
.16c1	a9 a0		lda #$a0			lda 	#$A0 						; byte reference type
.16c3					Min32Indirect:
.16c3	48		pha				pha 								; save the indirection
.16c4	20 49 1e	jsr $1e49			jsr 	MInt32Add 					; add a!b a?b
.16c7	68		pla				pla 								; and set the type to reference.
.16c8	95 40		sta $40,x			sta 	esType,x
.16ca	60		rts				rts
.16cb					Mint32ShiftLeftX:
.16cb	18		clc				clc
.16cc	90 01		bcc $16cf			bcc 	Mint32Shift
.16ce					Mint32ShiftRightX:
.16ce	38		sec				sec
.16cf					Mint32Shift:
.16cf	08		php				php 								; save carry flag on stack.
.16d0	b5 51		lda $51,x			lda 	esInt1+1,x 					; if shift >= 32 then it is zero.
.16d2	15 59		ora $59,x			ora 	esInt2+1,x
.16d4	15 61		ora $61,x			ora 	esInt3+1,x
.16d6	d0 1e		bne $16f6			bne 	_MShiftZero
.16d8	b5 49		lda $49,x			lda 	esInt0+1,x
.16da	c9 20		cmp #$20			cmp 	#32
.16dc	b0 18		bcs $16f6			bcs 	_MShiftZero
.16de					_MShiftLoop:
.16de	b5 49		lda $49,x			lda 	esInt0+1,x 					; check count is zero
.16e0	f0 12		beq $16f4			beq 	_MShiftExit
.16e2	d6 49		dec $49,x			dec 	esInt0+1,x
.16e4	28		plp				plp 								; restore and save carry
.16e5	08		php				php
.16e6	90 06		bcc $16ee			bcc 	_MShiftLeft
.16e8	20 7c 1f	jsr $1f7c			jsr 	Mint32ShiftRight
.16eb	4c de 16	jmp $16de			jmp 	_MShiftLoop
.16ee					_MShiftLeft:
.16ee	20 73 1f	jsr $1f73			jsr 	Mint32ShiftLeft
.16f1	4c de 16	jmp $16de			jmp 	_MShiftLoop
.16f4					_MShiftExit:
.16f4	28		plp				plp	 								; throw saved carry and exit
.16f5	60		rts				rts
.16f6					_MShiftZero:
.16f6	4c 5e 1f	jmp $1f5e			jmp 	MInt32False 				; return 0.

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/compare.asm

.16f9					PerformComparison:
.16f9	20 f1 17	jsr $17f1			jsr 	DereferenceTwo 				; make both values.
.16fc	b5 40		lda $40,x			lda 	esType,x 					; check for two strings.
.16fe	35 41		and $41,x			and 	esType+1,x
.1700	0a		asl a				asl 	a
.1701	30 1d		bmi $1720			bmi 	_PCIsString
.1703	b5 40		lda $40,x			lda 	esType,x 					; check either is floating point.
.1705	15 41		ora $41,x			ora 	esType+1,x
.1707	0a		asl a				asl 	a 							; shift bit 6 (string) to bit 7
.1708	30 22		bmi $172c			bmi 	_PCError
.170a	29 02		and #$02			and 	#$02 						; because of ASL, check type in bit 0
.170c	f0 0f		beq $171d			beq 	_PCIsInteger 				; if not two integers
.170e	20 90 15	jsr $1590			jsr 	BPMakeBothFloat 			; make both float
.1711	8a		txa				txa
.1712	a2 04		ldx #$04		ldx	#4
.1714	20 93 20	jsr $2093		jsr	floatingpointHandler
.1717	86 0c		stx $0c				stx 	tempShort 					; save result
.1719	aa		tax				tax
.171a	a5 0c		lda $0c				lda 	tempShort
.171c	60		rts				rts
.171d					_PCIsInteger:
.171d	4c 0c 1d	jmp $1d0c			jmp 	MInt32Compare
.1720					_PCIsString:
.1720	8a		txa				txa 								; A has SP
.1721	a2 06		ldx #$06		ldx	#6
.1723	20 ea 22	jsr $22ea		jsr	stringHandler
.1726	86 0c		stx $0c				stx 	tempShort 					; save result
.1728	aa		tax				tax 								; put SP back in X and get result.
.1729	a5 0c		lda $0c				lda 	tempShort
.172b	60		rts				rts
.172c					_PCError:
.172c	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.172e	20 8c 20	jsr $208c			jsr 	ErrorHandler
.1731					CompareEquals:
.1731	20 f9 16	jsr $16f9			jsr 	PerformComparison
.1734	c9 00		cmp #$00			cmp 	#$00
.1736	f0 35		beq $176d			beq  	CompareTrue
.1738	4c 70 17	jmp $1770			jmp 	CompareFalse
.173b					CompareLess:
.173b	20 f9 16	jsr $16f9			jsr 	PerformComparison
.173e	c9 ff		cmp #$ff			cmp 	#$FF
.1740	f0 2b		beq $176d			beq  	CompareTrue
.1742	4c 70 17	jmp $1770			jmp 	CompareFalse
.1745					CompareGreater:
.1745	20 f9 16	jsr $16f9			jsr 	PerformComparison
.1748	c9 01		cmp #$01			cmp 	#$01
.174a	f0 21		beq $176d			beq  	CompareTrue
.174c	4c 70 17	jmp $1770			jmp 	CompareFalse
.174f					CompareNotEquals:
.174f	20 f9 16	jsr $16f9			jsr 	PerformComparison
.1752	c9 00		cmp #$00			cmp 	#$00
.1754	d0 17		bne $176d			bne  	CompareTrue
.1756	4c 70 17	jmp $1770			jmp 	CompareFalse
.1759					CompareGreaterEq:
.1759	20 f9 16	jsr $16f9			jsr 	PerformComparison
.175c	c9 ff		cmp #$ff			cmp 	#$FF
.175e	d0 0d		bne $176d			bne  	CompareTrue
.1760	4c 70 17	jmp $1770			jmp 	CompareFalse
.1763					CompareLessEq:
.1763	20 f9 16	jsr $16f9			jsr 	PerformComparison
.1766	c9 01		cmp #$01			cmp 	#$01
.1768	d0 03		bne $176d			bne  	CompareTrue
.176a	4c 70 17	jmp $1770			jmp 	CompareFalse
.176d					CompareTrue:
.176d	4c 5a 1f	jmp $1f5a			jmp 	MInt32True
.1770					CompareFalse:
.1770	4c 5e 1f	jmp $1f5e			jmp 	MInt32False

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/convert.asm

.1773					Event_Str:
.1773	20 51 19	jsr $1951			jsr 	EvaluateNumeric 			; get a number.
.1776	b5 40		lda $40,x			lda 	esType,x 					; is it floating point
.1778	d0 13		bne $178d			bne 	_ESFloat
.177a	20 d0 17	jsr $17d0			jsr 	ConvertGetBase
.177d	a9 cd		lda #$cd			lda 	#(convertBuffer) & $FF
.177f	85 04		sta $04				sta 	temp0
.1781	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.1783	85 05		sta $05				sta 	1+(temp0)
.1785	b5 49		lda $49,x			lda 	esInt0+1,x 					; get the base
.1787	20 b4 1e	jsr $1eb4			jsr 	MInt32ToString 				; convert to string.
.178a	4c 9a 17	jmp $179a			jmp 	_ESCloneExit 				; clone and exit.
.178d					_ESFloat:
.178d	20 d1 1f	jsr $1fd1			jsr 	CheckRightParen 			; check closing )
.1790	20 26 11	jsr $1126			jsr 	TOSToTemp0 					; string address in temp0, goes here.
.1793	8a		txa				txa
.1794	a2 14		ldx #$14		ldx	#20
.1796	20 93 20	jsr $2093		jsr	floatingpointHandler
.1799	aa		tax				tax
.179a					_ESCloneExit:
.179a	8a		txa				txa
.179b	a2 02		ldx #$02		ldx	#2
.179d	20 ea 22	jsr $22ea		jsr	stringHandler
.17a0	aa		tax				tax
.17a1	60		rts				rts
.17a2					UnaryVal:
.17a2	38		sec				sec
.17a3	b0 01		bcs $17a6			bcs 	ValueMain
.17a5					UnaryIsVal:
.17a5	18		clc				clc
.17a6					ValueMain:
.17a6	08		php				php 								; save results (CS is value, CC is validation)
.17a7	20 5c 19	jsr $195c			jsr 	EvaluateString
.17aa	20 d0 17	jsr $17d0			jsr 	ConvertGetBase 				; get base, if any.
.17ad	98		tya				tya
.17ae	48		pha				pha
.17af	20 26 11	jsr $1126			jsr 	TOSToTemp0 					; string address in temp0, goes here.
.17b2	b5 49		lda $49,x			lda 	esInt0+1,x 					; get the base
.17b4	29 7f		and #$7f			and 	#$7F 						; ignore the sign bit.
.17b6	20 d3 1d	jsr $1dd3			jsr 	MInt32FromString 			; convert it back from a string.
.17b9	b0 0c		bcs $17c7			bcs 	_VMSuccess 					; successfully converted.
.17bb	b5 49		lda $49,x			lda 	esInt0+1,x 					; is base the default
.17bd	c9 8a		cmp #$8a			cmp 	#$80+10 					; if no, then it is integer only.
.17bf	f0 00		beq $17c1			beq 	_VMFailed 	 				; so we failed.
.17c1					_VMFailed:
.17c1	68		pla				pla
.17c2	a8		tay				tay
.17c3	28		plp				plp
.17c4	4c 5e 1f	jmp $1f5e			jmp 	MInt32False 				; return 0 whatever.
.17c7					_VMSuccess:
.17c7	68		pla				pla
.17c8	a8		tay				tay
.17c9	28		plp				plp 								; if CS the it was val() so we want the value.
.17ca	b0 03		bcs $17cf			bcs 	_VMExit
.17cc	4c 5a 1f	jmp $1f5a			jmp 	MInt32True 					; otherwise return true as successful.
.17cf					_VMExit:
.17cf	60		rts				rts
.17d0					ConvertGetBase:
.17d0	a9 8a		lda #$8a			lda 	#10+$80 					; default base 10 signed.
.17d2	95 49		sta $49,x			sta 	esInt0+1,x
.17d4	b1 02		lda ($02),y			lda 	(codePtr),y
.17d6	c9 c6		cmp #$c6			cmp 	#TKW_COMMA
.17d8	d0 0e		bne $17e8			bne 	_CGBDone
.17da	e8		inx				inx 								; next level
.17db	c8		iny				iny 								; skip comma.
.17dc	20 6f 19	jsr $196f			jsr 	EvaluateSmallInteger		; evaluate the base.
.17df	ca		dex				dex
.17e0	c9 02		cmp #$02			cmp 	#2
.17e2	90 08		bcc $17ec			bcc 	_CGBValue
.17e4	c9 11		cmp #$11			cmp 	#17
.17e6	b0 04		bcs $17ec			bcs 	_CGBValue
.17e8					_CGBDone:
.17e8	20 d1 1f	jsr $1fd1			jsr 	CheckRightParen
.17eb	60		rts				rts
.17ec					_CGBValue:
.17ec	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.17ee	20 8c 20	jsr $208c			jsr 	ErrorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/dereference.asm

.17f1					DereferenceTwo:
.17f1	e8		inx				inx
.17f2	20 f6 17	jsr $17f6			jsr 	DereferenceOne
.17f5	ca		dex				dex
.17f6					DereferenceOne:
.17f6	b5 40		lda $40,x			lda 	esType,x
.17f8	10 3d		bpl $1837			bpl 	_DRNotReference 			; is it a reference ?
.17fa	4a		lsr a				lsr 	a 							; do float dereference if bit 0 set.
.17fb	b0 3b		bcs $1838			bcs 	_DRFloatDeReference
.17fd	98		tya				tya
.17fe	48		pha				pha
.17ff	b5 48		lda $48,x			lda 	esInt0,x 					; copy address to temp0
.1801	85 04		sta $04				sta 	temp0
.1803	b5 50		lda $50,x			lda 	esInt1,x
.1805	85 05		sta $05				sta 	temp0+1
.1807	a9 00		lda #$00			lda 	#0 							; clear esInt1..3
.1809	95 50		sta $50,x			sta 	esInt1,x
.180b	95 58		sta $58,x			sta 	esInt2,x
.180d	95 60		sta $60,x			sta 	esInt3,x
.180f	b5 40		lda $40,x			lda 	esType,x 					; get the type byte.
.1811	29 60		and #$60			and 	#$60 						; get string flag ($40) and byte flag ($20)
.1813	0a		asl a				asl 	a 							; now string ($80) byte ($40)
.1814	30 0d		bmi $1823			bmi 	_DeRefString 				; string, 2 bytes only
.1816	d0 11		bne $1829			bne 	_DeRefByte 					; byte 1 byte only
.1818					_DeRefLong:
.1818	a0 03		ldy #$03			ldy 	#3
.181a	b1 04		lda ($04),y			lda 	(temp0),y
.181c	95 60		sta $60,x			sta 	esInt3,x
.181e	88		dey				dey
.181f	b1 04		lda ($04),y			lda 	(temp0),y
.1821	95 58		sta $58,x			sta 	esInt2,x
.1823					_DeRefString:
.1823	a0 01		ldy #$01			ldy 	#1
.1825	b1 04		lda ($04),y			lda 	(temp0),y
.1827	95 50		sta $50,x			sta 	esInt1,x
.1829					_DeRefByte:
.1829	a0 00		ldy #$00			ldy 	#0
.182b	b1 04		lda ($04),y			lda 	(temp0),y
.182d	95 48		sta $48,x			sta 	esInt0,x
.182f	b5 40		lda $40,x			lda 	esType,x 					; clear byte and deref bits.
.1831	29 40		and #$40			and 	#$40
.1833	95 40		sta $40,x			sta 	esType,x
.1835	68		pla				pla
.1836	a8		tay				tay
.1837					_DRNotReference
.1837	60		rts				rts
.1838					_DRFloatDereference:
.1838	8a		txa				txa
.1839							floatingpoint_deref
.1839	aa		tax				tax
.183a	a9 01		lda #$01			lda 	#$01 						; type to FP (float)
.183c	95 40		sta $40,x			sta 	esType,x
.183e	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/evaluate.asm

.183f					EvaluateLevel:
.183f	48		pha				pha 								; save precedence level.
.1840	a9 00		lda #$00			lda 	#0 							; zero the current stack level.
.1842	95 48		sta $48,x			sta 	esInt0,x
.1844	95 50		sta $50,x			sta 	esInt1,x
.1846	95 58		sta $58,x			sta 	esInt2,x
.1848	95 60		sta $60,x			sta 	esInt3,x
.184a	95 40		sta $40,x			sta 	esType,x 					; zero the type (integer value)
.184c	b1 02		lda ($02),y			lda 	(codePtr),y	 				; look at first token/character
.184e	30 21		bmi $1871			bmi 	_ELIsToken 					; if -ve could be string, float, or unary function.
.1850	0a		asl a				asl 	a 							; if 00-3F then will now be PL and it's a variable.
.1851	30 0a		bmi $185d			bmi 	_ELIsConstant 				; 40-7F will be -ve and that's an integer constant.
.1853	8a		txa				txa 								; stack level in X
.1854	a2 00		ldx #$00		ldx	#0
.1856	20 58 24	jsr $2458		jsr	variableHandler
.1859	aa		tax				tax
.185a	4c 9a 18	jmp $189a			jmp		_ELHasTerm
.185d					_ELIsConstant:
.185d	4a		lsr a				lsr 	a 							; get the value back
.185e	29 3f		and #$3f			and 	#$3F 						; force into range 0-63
.1860	95 48		sta $48,x			sta 	esInt0,x 					; and put in LSB.
.1862					_ELCheckNext:
.1862	c8		iny				iny 								; look at next
.1863	b1 02		lda ($02),y			lda 	(codePtr),y
.1865	49 40		eor #$40			eor 	#$40 						; shift around so 40-7F => 00-3F
.1867	c9 40		cmp #$40			cmp 	#$40 						; out of range ?
.1869	b0 2f		bcs $189a			bcs 	_ELHasTerm 					; done getting the constant.
.186b	20 a7 19	jsr $19a7			jsr 	ELShiftByteIn 				; shift byte into position.
.186e	4c 62 18	jmp $1862			jmp 	_ELCheckNext
.1871					_ELIsToken:
.1871	c9 85		cmp #$85			cmp 	#TOK_STR 					; handle strings.
.1873	f0 0f		beq $1884			beq 	_ELIsString
.1875	c9 84		cmp #$84			cmp 	#TOK_FPC 					; if no, then check unary.
.1877	d0 5f		bne $18d8			bne 	_ELCheckUnary
.1879	8a		txa				txa 								; put X into A
.187a	c8		iny				iny 								; skip over the float marker
.187b	a2 18		ldx #$18		ldx	#24
.187d	20 93 20	jsr $2093		jsr	floatingpointHandler
.1880	aa		tax				tax 								; restore X
.1881	4c 9a 18	jmp $189a			jmp 	_ELHasTerm
.1884					_ELIsString:
.1884	98		tya				tya 								; address of string is codePtr+y+1
.1885	38		sec				sec
.1886	65 02		adc $02				adc 	codePtr
.1888	95 48		sta $48,x			sta 	esInt0,x
.188a	a5 03		lda $03				lda 	codePtr+1
.188c	69 00		adc #$00			adc 	#0
.188e	95 50		sta $50,x			sta 	esInt1,x
.1890	a9 40		lda #$40			lda 	#$40 						; set type to string value
.1892	95 40		sta $40,x			sta 	esType,x
.1894	c8		iny				iny 								; skip over string.
.1895	98		tya				tya
.1896	38		sec				sec									; +1 for the length itself.
.1897	71 02		adc ($02),y			adc 	(codePtr),y
.1899	a8		tay				tay 								; and fall through to term loop code.
.189a					_ELHasTerm:
.189a	b1 02		lda ($02),y			lda 	(codePtr),y
.189c	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; check in the correct range for binary tokens.
.189e	90 04		bcc $18a4			bcc 	_ELPopExit
.18a0	c9 99		cmp #$99			cmp 	#TOK_STRUCTST
.18a2	90 02		bcc $18a6			bcc 	_ELHasBinaryTerm
.18a4					_ELPopExit:
.18a4	68		pla				pla
.18a5					_ELExit:
.18a5	60		rts				rts
.18a6					_ELHasBinaryTerm:
.18a6	84 0c		sty $0c				sty 	tempShort 					; save position
.18a8	a8		tay				tay 								; use token as an index and get the precedence.
.18a9	b9 4f 19	lda $194f,y			lda 	ELBinaryOperatorInfo-TOK_BINARYST,y
.18ac	a4 0c		ldy $0c				ldy 	tempShort 					; restore Y
.18ae	85 0c		sta $0c				sta 	tempShort 					; save precedence in memory.
.18b0	68		pla				pla 								; restore current level.
.18b1	c5 0c		cmp $0c				cmp 	tempShort 					; if current >= operator then exit
.18b3	b0 f0		bcs $18a5			bcs 	_ELExit
.18b5	48		pha				pha 								; save current level back on the stack.
.18b6	b1 02		lda ($02),y			lda 	(codePtr),y 				; save the binary operator on the stack and skip it.
.18b8	48		pha				pha
.18b9	c8		iny				iny
.18ba	e8		inx				inx 								; calculate the RHS at the operator precedence.
.18bb	a5 0c		lda $0c				lda 	tempShort
.18bd	20 3f 18	jsr $183f			jsr 	EvaluateLevel
.18c0	ca		dex				dex
.18c1	68		pla				pla 								; get the operator back out.
.18c2					_ELExecuteA:
.18c2	86 0c		stx $0c				stx 	tempShort 					; upload the vectors. Would be nice to use jmp (aaaa,x)
.18c4	0a		asl a				asl 	a 							; but not practical. May use push/rts later.
.18c5	aa		tax				tax
.18c6	bd 36 13	lda $1336,x			lda 	Group0Vectors,x
.18c9	85 04		sta $04				sta 	temp0
.18cb	bd 37 13	lda $1337,x			lda 	Group0Vectors+1,x
.18ce	85 05		sta $05				sta 	temp0+1
.18d0	a6 0c		ldx $0c				ldx 	tempShort
.18d2	20 1b 19	jsr $191b			jsr 	_ELCallTemp0
.18d5	4c 9a 18	jmp $189a			jmp 	_ELHasTerm 					; and loop back round.
.18d8					_ELCheckUnary:
.18d8	c8		iny				iny 								; skip over token.
.18d9	c9 90		cmp #$90			cmp 	#TKW_MINUS 					; is it - term
.18db	f0 15		beq $18f2			beq 	_ELMinus
.18dd	c9 97		cmp #$97			cmp 	#TKW_PLING 					; is it ! or ? term
.18df	f0 28		beq $1909			beq 	_ELIndirect
.18e1	c9 98		cmp #$98			cmp 	#TKW_QMARK
.18e3	f0 24		beq $1909			beq 	_ELIndirect
.18e5	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST 				; must be TOK_UNARYST ... TOK_TOKENS
.18e7	90 04		bcc $18ed			bcc 	_ELUSyntax
.18e9	c9 c4		cmp #$c4			cmp 	#TOK_TOKENS
.18eb	90 d5		bcc $18c2			bcc 	_ELExecuteA 				; if so do that token.
.18ed					_ELUSyntax:
.18ed	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.18ef	20 8c 20	jsr $208c			jsr 	ErrorHandler
.18f2					_ELMinus:
.18f2	20 30 19	jsr $1930			jsr 	EvaluateNumericTerm 		; get a number to negate.
.18f5	b5 40		lda $40,x			lda 	esType,x 					; is it integer
.18f7	f0 0a		beq $1903			beq 	_ELMinusInteger
.18f9	8a		txa				txa
.18fa	a2 0c		ldx #$0c		ldx	#12
.18fc	20 93 20	jsr $2093		jsr	floatingpointHandler
.18ff	aa		tax				tax
.1900	4c 9a 18	jmp $189a			jmp 	_ELHasTerm
.1903					_ELMinusInteger:
.1903	20 18 1f	jsr $1f18			jsr 	MInt32Negate 				; do int negate
.1906	4c 9a 18	jmp $189a			jmp 	_ELHasTerm
.1909					_ELIndirect:
.1909	48		pha				pha 								; save what we want (TKW_QMARK TWK_PLING)
.190a	20 39 19	jsr $1939			jsr 	EvaluateIntegerTerm 		; integer address
.190d	68		pla				pla
.190e	49 97		eor #$97			eor 	#TKW_PLING 					; now $00 if !
.1910	f0 02		beq $1914			beq 	_ELHaveModifier
.1912	a9 20		lda #$20			lda 	#$20 						; now $00 if !, $20 if ?
.1914					_ELHaveModifier:
.1914	09 80		ora #$80			ora 	#$80						; make it the appropriate reference.
.1916	95 40		sta $40,x			sta 	esType,x
.1918	4c 9a 18	jmp $189a			jmp 	_ELHasTerm
.191b					_ELCallTemp0:
.191b	6c 04 00	jmp ($0004)			jmp 	(temp0)
.191e					UnaryParenthesis:
.191e	a9 00		lda #$00			lda 	#0 							; ( is a unary function ....
.1920	20 3f 18	jsr $183f			jsr 	EvaluateLevel
.1923	20 d1 1f	jsr $1fd1			jsr 	CheckRightParen 			; check for )
.1926	60		rts				rts
.1927					EvaluateTerm:
.1927	a9 0f		lda #$0f			lda 	#15
.1929	20 3f 18	jsr $183f			jsr 	EvaluateLevel
.192c	20 f6 17	jsr $17f6			jsr 	DereferenceOne
.192f	60		rts				rts
.1930					EvaluateNumericTerm:
.1930	20 27 19	jsr $1927			jsr 	EvaluateTerm
.1933	b5 40		lda $40,x			lda 	esType,x
.1935	0a		asl a				asl 	a 							; see if it's a string.
.1936	30 09		bmi $1941			bmi 	ENTType
.1938	60		rts				rts
.1939					EvaluateIntegerTerm:
.1939	20 27 19	jsr $1927			jsr 	EvaluateTerm
.193c	b5 40		lda $40,x			lda 	esType,x
.193e	d0 01		bne $1941			bne 	ENTType
.1940	60		rts				rts
.1941					ENTType:
.1941	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.1943	20 8c 20	jsr $208c			jsr 	ErrorHandler
.1946					EvaluateRoot:
.1946	a2 00		ldx #$00			ldx 	#0
.1948					Evaluate:
.1948	a9 00		lda #$00			lda 	#0
.194a	20 3f 18	jsr $183f			jsr 	EvaluateLevel
.194d	20 f6 17	jsr $17f6			jsr 	DereferenceOne
.1950	60		rts				rts
.1951					EvaluateNumeric:
.1951	20 48 19	jsr $1948			jsr 	Evaluate
.1954	b5 40		lda $40,x			lda 	esType,x
.1956	0a		asl a				asl 	a 							; see if it's a string.
.1957	30 e8		bmi $1941			bmi 	ENTType
.1959	4a		lsr a				lsr 	a 							; shift float flag into carry.
.195a	4a		lsr a				lsr 	a
.195b	60		rts				rts
.195c					EvaluateString:
.195c	20 48 19	jsr $1948			jsr 	Evaluate
.195f	b5 40		lda $40,x			lda 	esType,x
.1961	0a		asl a				asl 	a 							; see if it's a string.
.1962	10 dd		bpl $1941			bpl 	ENTType
.1964	60		rts				rts
.1965					EvaluateRootInteger:
.1965	a2 00		ldx #$00			ldx 	#0
.1967					EvaluateInteger:
.1967	20 48 19	jsr $1948			jsr 	Evaluate
.196a	b5 40		lda $40,x			lda 	esType,x
.196c	d0 d3		bne $1941			bne 	ENTType
.196e	60		rts				rts
.196f					EvaluateSmallInteger:
.196f	20 67 19	jsr $1967			jsr 	EvaluateInteger
.1972	b5 50		lda $50,x			lda 	esInt1,x
.1974	15 58		ora $58,x			ora 	esInt2,x
.1976	15 60		ora $60,x			ora 	esInt3,x
.1978	d0 03		bne $197d			bne 	_ESIValue
.197a	b5 48		lda $48,x			lda 	esInt0,x
.197c	60		rts				rts
.197d					_ESIValue:
.197d	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.197f	20 8c 20	jsr $208c			jsr 	ErrorHandler
.1982					LinkEvaluate:
.1982	aa		tax				tax
.1983	20 48 19	jsr $1948			jsr 	Evaluate
.1986	8a		txa				txa
.1987	60		rts				rts
.1988					LinkEvaluateInteger:
.1988	aa		tax				tax
.1989	20 67 19	jsr $1967			jsr 	EvaluateInteger
.198c	8a		txa				txa
.198d	60		rts				rts
.198e					LinkEvaluateSmallInt:
.198e	aa		tax				tax
.198f	20 6f 19	jsr $196f			jsr 	EvaluateSmallInteger
.1992	8a		txa				txa
.1993	60		rts				rts
.1994					EvaluateReference:
.1994	ad e6 19	lda $19e6			lda 	ELBinaryOperatorInfo+TKW_PLING-TOK_BINARYST
.1997	38		sec				sec 								; sub 1 to allow a!x b?x to work.
.1998	e9 01		sbc #$01			sbc 	#1
.199a	20 3f 18	jsr $183f			jsr 	EvaluateLevel
.199d	b5 40		lda $40,x			lda 	esType,x
.199f	10 01		bpl $19a2			bpl 	_ERFail
.19a1	60		rts				rts
.19a2					_ERFail:
.19a2	a2 0b		ldx #$0b			ldx 	#ErrorID_NoReference
.19a4	20 8c 20	jsr $208c			jsr 	ErrorHandler
.19a7					ELShiftByteIn:
.19a7	48		pha				pha 								; save bits to shift in.
.19a8	b5 60		lda $60,x			lda 	esInt3,x 					; save top most byte
.19aa	48		pha				pha
.19ab	b5 58		lda $58,x			lda 	esInt2,x 					; shift everything left 8 bits
.19ad	95 60		sta $60,x			sta 	esInt3,x
.19af	b5 50		lda $50,x			lda 	esInt1,x
.19b1	95 58		sta $58,x			sta 	esInt2,x
.19b3	b5 48		lda $48,x			lda 	esInt0,x
.19b5	95 50		sta $50,x			sta 	esInt1,x
.19b7	a9 00		lda #$00			lda 	#0
.19b9	95 48		sta $48,x			sta 	esInt0,x
.19bb	68		pla				pla 								; now A:TOS is a 5 byte register, shift right twice.
.19bc	29 03		and #$03			and 	#3 							; only want lower 2 bits
.19be	09 04		ora #$04			ora 	#4  						; set bit 2 - when 1 we are done
.19c0					_ELShiftLoop:
.19c0	4a		lsr a				lsr 	a
.19c1	76 60		ror $60,x			ror 	esInt3,x
.19c3	76 58		ror $58,x			ror 	esInt2,x
.19c5	76 50		ror $50,x			ror 	esInt1,x
.19c7	76 48		ror $48,x			ror 	esInt0,x
.19c9	c9 01		cmp #$01			cmp 	#1
.19cb	d0 f3		bne $19c0			bne 	_ELShiftLoop
.19cd	68		pla				pla 								; get original 6 bit value and OR in.
.19ce	29 3f		and #$3f			and 	#$3F
.19d0	15 48		ora $48,x			ora 	esInt0,x
.19d2	95 48		sta $48,x			sta 	esInt0,x
.19d4	60		rts				rts
.19d5					ELBinaryOperatorInfo:

;******  Processing file: main/evaluate/../../generated/binarystructinfo.inc

>19d5	01					.byte	$01			; $86 and
>19d6	01					.byte	$01			; $87 or
>19d7	01					.byte	$01			; $88 xor
>19d8	02					.byte	$02			; $89 >=
>19d9	02					.byte	$02			; $8a <=
>19da	02					.byte	$02			; $8b >
>19db	02					.byte	$02			; $8c <
>19dc	02					.byte	$02			; $8d =
>19dd	02					.byte	$02			; $8e <>
>19de	03					.byte	$03			; $8f +
>19df	03					.byte	$03			; $90 -
>19e0	04					.byte	$04			; $91 >>
>19e1	04					.byte	$04			; $92 <<
>19e2	04					.byte	$04			; $93 *
>19e3	04					.byte	$04			; $94 /
>19e4	04					.byte	$04			; $95 mod
>19e5	05					.byte	$05			; $96 ^
>19e6	06					.byte	$06			; $97 !
>19e7	06					.byte	$06			; $98 ?
>19e8	82					.byte	$82			; $99 repeat
>19e9	82					.byte	$82			; $9a while
>19ea	82					.byte	$82			; $9b for
>19eb	82					.byte	$82			; $9c if
>19ec	82					.byte	$82			; $9d defproc
>19ed	80					.byte	$80			; $9e until
>19ee	80					.byte	$80			; $9f wend
>19ef	80					.byte	$80			; $a0 next
>19f0	80					.byte	$80			; $a1 then
>19f1	80					.byte	$80			; $a2 endif
>19f2	80					.byte	$80			; $a3 endproc

;******  Return to file: main/evaluate/evaluate.asm


;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/event.asm

.19f3					EventFunction:
.19f3	20 94 19	jsr $1994			jsr 	EvaluateReference			; get the variable reference.
.19f6	b5 40		lda $40,x			lda 	esType,x
.19f8	c9 80		cmp #$80			cmp 	#$80 						; must be int ref
.19fa	d0 55		bne $1a51			bne 	_EFType
.19fc	20 de 1f	jsr $1fde			jsr 	CheckComma
.19ff	e8		inx				inx
.1a00	20 67 19	jsr $1967			jsr 	EvaluateInteger		 		; get the elapsed time between firing.
.1a03	20 d1 1f	jsr $1fd1			jsr 	CheckRightParen 			; finish off with the
.1a06	ca		dex				dex
.1a07	b5 50		lda $50,x			lda 	esInt1,x 					; check max of 32767
.1a09	29 80		and #$80			and 	#$80
.1a0b	15 58		ora $58,x			ora 	esInt2,x
.1a0d	15 60		ora $60,x			ora 	esInt3,x
.1a0f	d0 3b		bne $1a4c			bne 	_EFValue
.1a11	98		tya				tya
.1a12	48		pha				pha
.1a13	8a		txa				txa
.1a14	48		pha				pha
.1a15	a2 08		ldx #$08		ldx	#8
.1a17	20 7f 20	jsr $207f		jsr	deviceHandler
.1a1a	84 07		sty $07				sty 	temp1+1
.1a1c	85 06		sta $06				sta 	temp1
.1a1e	68		pla				pla
.1a1f	aa		tax				tax
.1a20	20 26 11	jsr $1126			jsr 	TOSToTemp0 					; point temp0 to the variable.
.1a23	a0 00		ldy #$00			ldy 	#0 							; is the fire time zero ?
.1a25	b1 04		lda ($04),y			lda 	(temp0),y
.1a27	c8		iny				iny
.1a28	11 04		ora ($04),y			ora 	(temp0),y
.1a2a	f0 17		beq $1a43			beq 	_EFInitialise 				; if so, initialise the value but return false.
.1a2c	a0 00		ldy #$00			ldy 	#0 							; calculate trigger - timer
.1a2e	38		sec				sec
.1a2f	b1 04		lda ($04),y			lda 	(temp0),y
.1a31	e5 06		sbc $06				sbc 	temp1
.1a33	c8		iny				iny
.1a34	b1 04		lda ($04),y			lda 	(temp0),y
.1a36	e5 07		sbc $07				sbc 	temp1+1
.1a38	10 0c		bpl $1a46			bpl 	_EFFail 					; if trigger >= timer then return False
.1a3a	20 56 1a	jsr $1a56			jsr 	SetEventTimer 				; reset the timer for next time.
.1a3d	20 5a 1f	jsr $1f5a			jsr	 	MInt32True 					; and treutn true as fired.
.1a40	68		pla				pla
.1a41	a8		tay				tay
.1a42	60		rts				rts
.1a43					_EFInitialise:
.1a43	20 56 1a	jsr $1a56			jsr		SetEventTimer 				; set trigger time to time + elapsed
.1a46					_EFFail:
.1a46	20 5e 1f	jsr $1f5e			jsr 	MInt32False
.1a49	68		pla				pla
.1a4a	a8		tay				tay
.1a4b	60		rts				rts
.1a4c					_EFValue:
.1a4c	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.1a4e	20 8c 20	jsr $208c			jsr 	ErrorHandler
.1a51					_EFType:
.1a51	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.1a53	20 8c 20	jsr $208c			jsr 	ErrorHandler
.1a56					SetEventTimer:
.1a56	a0 00		ldy #$00			ldy 	#0 							; add elapsed to current time, store in variable
.1a58	18		clc				clc
.1a59	a5 06		lda $06				lda 	temp1
.1a5b	75 49		adc $49,x			adc 	esInt0+1,x
.1a5d	91 04		sta ($04),y			sta		(temp0),y
.1a5f	c8		iny				iny
.1a60	a5 07		lda $07				lda 	temp1+1
.1a62	75 51		adc $51,x			adc 	esInt1+1,x
.1a64	91 04		sta ($04),y			sta		(temp0),y
.1a66	88		dey				dey
.1a67	11 04		ora ($04),y			ora 	(temp0),y 					; if the result is non zero, exit
.1a69	d0 04		bne $1a6f			bne 	_SETExit
.1a6b	a9 01		lda #$01			lda 	#1 							; timer zero won't work, so make it 1, which is
.1a6d	91 04		sta ($04),y			sta 	(temp0),y 					; near enough.
.1a6f					_SETExit:
.1a6f	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary.asm

.1a70					UnaryLen:
.1a70	20 7e 1a	jsr $1a7e			jsr 	ULStart
.1a73					ULFinish:
.1a73	b1 04		lda ($04),y			lda 	(temp0),y
.1a75	a4 0c		ldy $0c				ldy 	tempShort
.1a77	20 6d 1f	jsr $1f6d			jsr 	MInt32Set8Bit
.1a7a	20 d1 1f	jsr $1fd1			jsr 	CheckRightParen
.1a7d	60		rts				rts
.1a7e	20 5c 19	jsr $195c	ULStart:jsr 	EvaluateString
.1a81	b5 48		lda $48,x			lda 	esInt0,x 					; copy address of string to temp0
.1a83	85 04		sta $04				sta 	temp0
.1a85	b5 50		lda $50,x			lda 	esInt1,x
.1a87	85 05		sta $05				sta 	temp0+1
.1a89	84 0c		sty $0c				sty 	tempShort 					; get length
.1a8b	a0 00		ldy #$00			ldy 	#0
.1a8d	60		rts				rts
.1a8e					UnaryAsc:
.1a8e	20 7e 1a	jsr $1a7e			jsr 	ULStart 					; same as LEN() get string, save Y, point to length.
.1a91	b1 04		lda ($04),y			lda 	(temp0),y
.1a93	c8		iny				iny 		 						; point to first character, we can do LEN code after that
.1a94	c9 00		cmp #$00			cmp 	#0
.1a96	d0 db		bne $1a73			bne 	ULFinish
.1a98	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.1a9a	20 8c 20	jsr $208c			jsr 	ErrorHandler
.1a9d					UnaryAbs:
.1a9d	20 51 19	jsr $1951			jsr 	EvaluateNumeric
.1aa0	b0 07		bcs $1aa9			bcs 	_UAFloat
.1aa2	20 13 1f	jsr $1f13			jsr 	MInt32Absolute
.1aa5	20 d1 1f	jsr $1fd1			jsr 	CheckRightParen
.1aa8	60		rts				rts
.1aa9					_UAFloat:
.1aa9	8a		txa				txa
.1aaa	a2 00		ldx #$00		ldx	#0
.1aac	20 93 20	jsr $2093		jsr	floatingpointHandler
.1aaf	aa		tax				tax
.1ab0	20 d1 1f	jsr $1fd1			jsr 	CheckRightParen
.1ab3	60		rts				rts
.1ab4					UnarySgn:
.1ab4	20 51 19	jsr $1951			jsr 	EvaluateNumeric
.1ab7	b0 07		bcs $1ac0			bcs 	_USFloat
.1ab9	20 4b 1f	jsr $1f4b			jsr 	MInt32Sign
.1abc	20 d1 1f	jsr $1fd1			jsr 	CheckRightParen
.1abf	60		rts				rts
.1ac0					_USFloat:
.1ac0	8a		txa				txa
.1ac1	a2 0e		ldx #$0e		ldx	#14
.1ac3	20 93 20	jsr $2093		jsr	floatingpointHandler
.1ac6	aa		tax				tax
.1ac7	20 d1 1f	jsr $1fd1			jsr 	CheckRightParen
.1aca	60		rts				rts
.1acb					UnaryPeek:
.1acb	20 f7 1a	jsr $1af7			jsr 	PDLCode
.1ace	4c eb 1a	jmp $1aeb			jmp 	PDLByte0
.1ad1					UnaryDeek:
.1ad1	20 f7 1a	jsr $1af7			jsr 	PDLCode
.1ad4	4c e5 1a	jmp $1ae5			jmp 	PDLByte1
.1ad7					UnaryLeek:
.1ad7	20 f7 1a	jsr $1af7			jsr 	PDLCode
.1ada	a0 03		ldy #$03			ldy 	#3
.1adc	b1 04		lda ($04),y			lda 	(temp0),y
.1ade	95 60		sta $60,x			sta 	esInt3,x
.1ae0	88		dey				dey
.1ae1	b1 04		lda ($04),y			lda 	(temp0),y
.1ae3	95 58		sta $58,x			sta 	esInt2,x
.1ae5					PDLByte1:
.1ae5	a0 01		ldy #$01			ldy 	#1
.1ae7	b1 04		lda ($04),y			lda 	(temp0),y
.1ae9	95 50		sta $50,x			sta 	esInt1,x
.1aeb					PDLByte0:
.1aeb	a0 00		ldy #$00			ldy 	#0
.1aed	b1 04		lda ($04),y			lda 	(temp0),y
.1aef	95 48		sta $48,x			sta 	esInt0,x
.1af1	a4 0c		ldy $0c				ldy 	tempShort 					; restore Y
.1af3	20 d1 1f	jsr $1fd1			jsr 	CheckRightParen 			; check right and return
.1af6	60		rts				rts
.1af7					PDLCode:
.1af7	20 67 19	jsr $1967			jsr 	EvaluateInteger
.1afa	b5 48		lda $48,x			lda 	esInt0,x 					; copy address of string to temp0
.1afc	85 04		sta $04				sta 	temp0
.1afe	b5 50		lda $50,x			lda 	esInt1,x
.1b00	85 05		sta $05				sta 	temp0+1
.1b02	a9 00		lda #$00			lda 	#0 							; zero upper 3 bytes of result, type okay.
.1b04	95 50		sta $50,x			sta 	esInt1,x
.1b06	95 58		sta $58,x			sta 	esInt2,x
.1b08	95 60		sta $60,x			sta 	esInt3,x
.1b0a	84 0c		sty $0c				sty 	tempShort 					; save Y
.1b0c	60		rts				rts
.1b0d					Unary_Random:
.1b0d	20 8e 1f	jsr $1f8e			jsr 	MInt32Random 				; generate random number.
.1b10	b1 02		lda ($02),y			lda 	(codePtr),y 				; check followed by )
.1b12	c9 c4		cmp #$c4			cmp 	#TKW_RPAREN
.1b14	f0 08		beq $1b1e			beq 	_URExit
.1b16	e8		inx				inx 								; load range 0..r-1 into +1
.1b17	20 67 19	jsr $1967			jsr 	EvaluateInteger
.1b1a	ca		dex				dex
.1b1b	20 bf 1d	jsr $1dbf			jsr 	MInt32Modulus 				; calculate random % modulus
.1b1e					_URExit:
.1b1e	20 d1 1f	jsr $1fd1			jsr 	CheckRightParen 			; check right and return
.1b21	60		rts				rts
.1b22					Unary_Min:
.1b22	a9 01		lda #$01			lda 	#1 							; c1 cmp c2 needs to be > e.g. c1 > c2
.1b24	d0 02		bne $1b28			bne 	UnaryMBody
.1b26					Unary_Max:
.1b26	a9 ff		lda #$ff			lda 	#$FF 						; c1 cmp c2 needs to be < e.g. c1 < c2
.1b28					UnaryMBody:
.1b28	48		pha				pha 								; save comparator on stack.
.1b29	20 48 19	jsr $1948			jsr 	Evaluate 					; get the first thing to check
.1b2c					_UnaryMLoop:
.1b2c	b1 02		lda ($02),y			lda 	(codePtr),y 				; found ), indicates end.
.1b2e	c8		iny				iny
.1b2f	c9 c4		cmp #$c4			cmp 	#TKW_RPAREN
.1b31	f0 09		beq $1b3c			beq 	_UnaryMExit
.1b33	c9 c6		cmp #$c6			cmp 	#TKW_COMMA 					; found , indicates more.
.1b35	f0 07		beq $1b3e			beq 	_UnaryMCompare
.1b37	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.1b39	20 8c 20	jsr $208c			jsr 	ErrorHandler
.1b3c					_UnaryMExit:
.1b3c	68		pla				pla 								; throw comparator and return.
.1b3d	60		rts				rts
.1b3e					_UnaryMCompare:
.1b3e	e8		inx				inx 								; get the 2nd thing to evaluate
.1b3f	20 48 19	jsr $1948			jsr 	Evaluate
.1b42	ca		dex				dex
.1b43	20 f9 16	jsr $16f9			jsr 	PerformComparison 			; this is part of evaluate/compare.asm
.1b46	85 0c		sta $0c				sta 	tempShort 					; save result
.1b48	68		pla				pla 								; get what we need
.1b49	48		pha				pha
.1b4a	c5 0c		cmp $0c				cmp 	tempShort 					; did we get it
.1b4c	d0 de		bne $1b2c			bne 	_UnaryMLoop 				; no, try another value.
.1b4e	20 5e 1f	jsr $1f5e			jsr 	MInt32False 				; promote 2nd to 1st.
.1b51	20 49 1e	jsr $1e49			jsr 	MInt32Add
.1b54	4c 2c 1b	jmp $1b2c			jmp 	_UnaryMLoop
.1b57					Unary_Page:
.1b57	20 5e 1f	jsr $1f5e			jsr 	MInt32False 				; zero
.1b5a	ad c8 0a	lda $0ac8			lda 	basePage 					; copy base page address in.
.1b5d	95 48		sta $48,x			sta 	esInt0,x
.1b5f	ad c9 0a	lda $0ac9			lda 	basePage+1
.1b62	95 50		sta $50,x			sta 	esInt1,x
.1b64	60		rts				rts
.1b65					UnaryReference:
.1b65	a9 0f		lda #$0f			lda 	#15
.1b67	20 3f 18	jsr $183f			jsr 	EvaluateLevel 				; evaluate term and don't deference.
.1b6a	b5 40		lda $40,x			lda 	esType,x 					; check it's a reference.
.1b6c	10 05		bpl $1b73			bpl 	UType
.1b6e	a9 00		lda #$00			lda 	#0 							; make it an integer
.1b70	95 40		sta $40,x			sta 	esType,x
.1b72	60		rts				rts
.1b73					UType:
.1b73	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.1b75	20 8c 20	jsr $208c			jsr 	ErrorHandler
.1b78					UnaryHexMarker:
.1b78	4c 39 19	jmp $1939			jmp 	EvaluateIntegerTerm
.1b7b					UnaryComplement:
.1b7b	20 39 19	jsr $1939			jsr 	EvaluateIntegerTerm
.1b7e	20 32 1f	jsr $1f32			jsr 	MInt32Not
.1b81	60		rts				rts
.1b82					UnaryIntToFloat:
.1b82	20 51 19	jsr $1951			jsr 	EvaluateNumeric
.1b85	b5 40		lda $40,x			lda 	esType,x
.1b87	d0 0b		bne $1b94			bne 	_UIFExit
.1b89	8a		txa				txa
.1b8a	a2 1a		ldx #$1a		ldx	#26
.1b8c	20 93 20	jsr $2093		jsr	floatingpointHandler
.1b8f	aa		tax				tax
.1b90	a9 01		lda #$01			lda 	#1
.1b92	95 40		sta $40,x			sta 	esType,x
.1b94					_UIFExit:
.1b94	60		rts				rts
.1b95					UnaryFloatToInt:
.1b95	20 51 19	jsr $1951			jsr 	EvaluateNumeric
.1b98	b5 40		lda $40,x			lda 	esType,x
.1b9a	f0 07		beq $1ba3			beq 	_UFIExit
.1b9c	8a		txa				txa
.1b9d	a2 12		ldx #$12		ldx	#18
.1b9f	20 93 20	jsr $2093		jsr	floatingpointHandler
.1ba2	aa		tax				tax
.1ba3					_UFIExit:
.1ba3	60		rts				rts
.1ba4					UnaryAlloc:
.1ba4	e8		inx				inx 								; evaluate memory required
.1ba5	20 67 19	jsr $1967			jsr 	EvaluateInteger
.1ba8	20 d1 1f	jsr $1fd1			jsr 	CheckRightParen
.1bab	ca		dex				dex
.1bac	b5 59		lda $59,x			lda 	esInt2+1,x 					; check at least in 64k range.
.1bae	15 61		ora $61,x			ora 	esInt3+1,x
.1bb0	d0 19		bne $1bcb			bne 	_UABadValue
.1bb2	20 5e 1f	jsr $1f5e			jsr 	MInt32False					; zero return.
.1bb5	a5 10		lda $10				lda 	lowMemory+1 				; copy low memory in
.1bb7	95 50		sta $50,x			sta 	esInt1,x
.1bb9	a5 0f		lda $0f				lda 	lowMemory
.1bbb	95 48		sta $48,x			sta 	esInt0,x
.1bbd	18		clc				clc 								; add alloc required.
.1bbe	75 49		adc $49,x			adc 	esInt0+1,x
.1bc0	85 0f		sta $0f				sta 	lowMemory
.1bc2	a5 10		lda $10				lda 	lowMemory+1
.1bc4	75 51		adc $51,x			adc 	esInt1+1,x
.1bc6	85 10		sta $10				sta 	lowMemory+1
.1bc8	b0 01		bcs $1bcb			bcs		_UABadValue 				; overflow definitely bad.
.1bca	60		rts				rts
.1bcb					_UABadValue:
.1bcb	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.1bcd	20 8c 20	jsr $208c			jsr 	ErrorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary2.asm

.1bd0					UnaryTimer:
.1bd0	20 d1 1f	jsr $1fd1			jsr 	CheckRightParen
.1bd3	98		tya				tya
.1bd4	48		pha				pha
.1bd5	20 85 1f	jsr $1f85			jsr 	MInt32Zero 					; zero result
.1bd8	86 04		stx $04				stx 	temp0 						; returning in YA so can't use pshx
.1bda	a2 08		ldx #$08		ldx	#8
.1bdc	20 7f 20	jsr $207f		jsr	deviceHandler
.1bdf	a6 04		ldx $04				ldx 	temp0						; restore X and update 16 bit result
.1be1	95 48		sta $48,x			sta 	esInt0,x
.1be3	98		tya				tya
.1be4	95 50		sta $50,x			sta 	esInt1,x
.1be6	68		pla				pla
.1be7	a8		tay				tay
.1be8	60		rts				rts
.1be9					UnaryInkey:
.1be9	20 d1 1f	jsr $1fd1			jsr 	CheckRightParen
.1bec	86 04		stx $04				stx 	temp0
.1bee	a2 02		ldx #$02		ldx	#2
.1bf0	20 7f 20	jsr $207f		jsr	deviceHandler
.1bf3	a6 04		ldx $04				ldx 	temp0
.1bf5	20 6d 1f	jsr $1f6d			jsr 	MInt32Set8Bit
.1bf8	60		rts				rts
.1bf9					UnaryGet:
.1bf9	20 d1 1f	jsr $1fd1			jsr 	CheckRightParen
.1bfc	86 04		stx $04				stx 	temp0
.1bfe					_UGLoop:
.1bfe	a2 02		ldx #$02		ldx	#2
.1c00	20 7f 20	jsr $207f		jsr	deviceHandler
.1c03	c9 00		cmp #$00			cmp 	#0
.1c05	f0 f7		beq $1bfe			beq 	_UGLoop
.1c07	a6 04		ldx $04				ldx 	temp0
.1c09	20 6d 1f	jsr $1f6d			jsr 	MInt32Set8Bit
.1c0c	60		rts				rts
.1c0d					UnarySys:
.1c0d	20 67 19	jsr $1967			jsr 	EvaluateInteger 				; get the address
.1c10	20 d1 1f	jsr $1fd1			jsr 	CheckRightParen
.1c13	20 26 11	jsr $1126			jsr 	TOSToTemp0 						; copy to temp0
.1c16	8a		txa				txa
.1c17	48		pha				pha
.1c18	98		tya				tya
.1c19	48		pha				pha
.1c1a	ad 00 0a	lda $0a00			lda 	("A"-"A")*4+SingleLetterVar 	; load AXY
.1c1d	ae 5c 0a	ldx $0a5c			ldx 	("X"-"A")*4+SingleLetterVar
.1c20	ac 60 0a	ldy $0a60			ldy 	("Y"-"A")*4+SingleLetterVar
.1c23	20 32 1c	jsr $1c32			jsr 	_CallTemp0
.1c26	85 0c		sta $0c				sta 	tempShort 						; restore YX
.1c28	68		pla				pla
.1c29	a8		tay				tay
.1c2a	68		pla				pla
.1c2b	aa		tax				tax
.1c2c	a5 0c		lda $0c				lda 	tempShort
.1c2e	20 6d 1f	jsr $1f6d			jsr 	MInt32Set8Bit 					; return result.
.1c31	60		rts				rts
.1c32					_CallTemp0:
.1c32	6c 04 00	jmp ($0004)			jmp 	(temp0)

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unarystr.asm

.1c35					ExecChr:
.1c35	20 6f 19	jsr $196f			jsr 	EvaluateSmallInteger		; character number
.1c38	20 d1 1f	jsr $1fd1			jsr 	CheckRightParen				; right bracket
.1c3b	98		tya				tya
.1c3c	48		pha				pha
.1c3d	8a		txa				txa 								; A = stack
.1c3e	b4 48		ldy $48,x			ldy 	esInt0,x					; Y = character
.1c40	a2 00		ldx #$00		ldx	#0
.1c42	20 ea 22	jsr $22ea		jsr	stringHandler
.1c45	aa		tax				tax 								; X = stack
.1c46	68		pla				pla
.1c47	a8		tay				tay
.1c48	60		rts				rts
.1c49					ExecLeft:
.1c49	20 5c 19	jsr $195c			jsr 	EvaluateString 				; string to stack,X
.1c4c	20 de 1f	jsr $1fde			jsr 	CheckComma
.1c4f	e8		inx				inx
.1c50	a9 01		lda #$01			lda 	#1 							; 1 for 2nd parameter.
.1c52	20 6d 1f	jsr $1f6d			jsr 	MInt32Set8Bit
.1c55	e8		inx				inx
.1c56	20 6f 19	jsr $196f			jsr 	EvaluateSmallInteger 		; smallint 3rd parameter
.1c59					ExecSubstring:
.1c59	ca		dex				dex 								; fix up X
.1c5a	ca		dex				dex
.1c5b	20 d1 1f	jsr $1fd1			jsr 	CheckRightParen 			; check closing right bracket.
.1c5e	8a		txa				txa 								; do the substring and exit.
.1c5f	a2 08		ldx #$08		ldx	#8
.1c61	20 ea 22	jsr $22ea		jsr	stringHandler
.1c64	aa		tax				tax
.1c65	60		rts				rts
.1c66					ExecMid:
.1c66	20 5c 19	jsr $195c			jsr 	EvaluateString 				; string to stack,X
.1c69	20 de 1f	jsr $1fde			jsr 	CheckComma
.1c6c	e8		inx				inx
.1c6d	20 6f 19	jsr $196f			jsr 	EvaluateSmallInteger 		; smallint 2nd parameter
.1c70	c9 00		cmp #$00			cmp 	#0
.1c72	f0 15		beq $1c89			beq 	_EMValue
.1c74	e8		inx				inx
.1c75	a9 ff		lda #$ff			lda 	#255 						; 255 default for 3nd parameter.
.1c77	20 6d 1f	jsr $1f6d			jsr 	MInt32Set8Bit
.1c7a	b1 02		lda ($02),y			lda 	(codePtr),y 				; is there a ) next
.1c7c	c9 c4		cmp #$c4			cmp 	#TKW_RPAREN 				; if so, just MID$(a$,2)
.1c7e	f0 d9		beq $1c59			beq 	ExecSubString
.1c80	20 de 1f	jsr $1fde			jsr 	CheckComma
.1c83	20 6f 19	jsr $196f			jsr 	EvaluateSmallInteger 		; smallint 2nd parameter
.1c86	4c 59 1c	jmp $1c59			jmp 	ExecSubString
.1c89					_EMValue:
.1c89	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.1c8b	20 8c 20	jsr $208c			jsr 	ErrorHandler
.1c8e					ExecRight:
.1c8e	20 5c 19	jsr $195c			jsr 	EvaluateString 				; string to stack,X
.1c91	20 de 1f	jsr $1fde			jsr 	CheckComma
.1c94	e8		inx				inx
.1c95	20 6f 19	jsr $196f			jsr 	EvaluateSmallInteger 		; smallint 2nd parameter.
.1c98	ca		dex				dex
.1c99	98		tya				tya
.1c9a	48		pha				pha
.1c9b	b5 48		lda $48,x			lda 	esInt0,x 					; copy address of string to temp0
.1c9d	85 04		sta $04				sta 	temp0
.1c9f	b5 50		lda $50,x			lda 	esInt1,x
.1ca1	85 05		sta $05				sta 	temp0+1
.1ca3	a0 00		ldy #$00			ldy 	#0 							; point to length
.1ca5	b1 04		lda ($04),y			lda 	(temp0),y 					; get the length.
.1ca7	18		clc				clc 								; add 1.
.1ca8	69 01		adc #$01			adc 	#1
.1caa	38		sec				sec
.1cab	f5 49		sbc $49,x			sbc 	esInt0+1,x  				; subtract right count.
.1cad	f0 02		beq $1cb1			beq		_ERMake1 					; if zero, make it 1.
.1caf	b0 02		bcs $1cb3			bcs		_EROkay
.1cb1					_ERMake1:
.1cb1	a9 01		lda #$01			lda 	#1 							; start position.
.1cb3					_EROkay:
.1cb3	e8		inx				inx 								; set start pos.
.1cb4	95 48		sta $48,x			sta 	esInt0,x
.1cb6	e8		inx				inx
.1cb7	a9 ff		lda #$ff			lda 	#255 						; 255 default for 3nd parameter.
.1cb9	20 6d 1f	jsr $1f6d			jsr 	MInt32Set8Bit
.1cbc	68		pla				pla
.1cbd	a8		tay				tay
.1cbe	4c 59 1c	jmp $1c59			jmp 	ExecSubString 				; do the substring code.

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32binary.asm

.1cc1					MInt32And:
.1cc1	b5 48		lda $48,x			lda 	esInt0,x
.1cc3	35 49		and $49,x			and 	esInt0+1,x
.1cc5	95 48		sta $48,x			sta 	esInt0,x
.1cc7	b5 50		lda $50,x			lda 	esInt1,x
.1cc9	35 51		and $51,x			and 	esInt1+1,x
.1ccb	95 50		sta $50,x			sta 	esInt1,x
.1ccd	b5 58		lda $58,x			lda 	esInt2,x
.1ccf	35 59		and $59,x			and 	esInt2+1,x
.1cd1	95 58		sta $58,x			sta 	esInt2,x
.1cd3	b5 60		lda $60,x			lda 	esInt3,x
.1cd5	35 61		and $61,x			and 	esInt3+1,x
.1cd7	95 60		sta $60,x			sta 	esInt3,x
.1cd9	60		rts				rts
.1cda					MInt32Or:
.1cda	b5 48		lda $48,x			lda 	esInt0,x
.1cdc	15 49		ora $49,x			ora 	esInt0+1,x
.1cde	95 48		sta $48,x			sta 	esInt0,x
.1ce0	b5 50		lda $50,x			lda 	esInt1,x
.1ce2	15 51		ora $51,x			ora 	esInt1+1,x
.1ce4	95 50		sta $50,x			sta 	esInt1,x
.1ce6	b5 58		lda $58,x			lda 	esInt2,x
.1ce8	15 59		ora $59,x			ora 	esInt2+1,x
.1cea	95 58		sta $58,x			sta 	esInt2,x
.1cec	b5 60		lda $60,x			lda 	esInt3,x
.1cee	15 61		ora $61,x			ora 	esInt3+1,x
.1cf0	95 60		sta $60,x			sta 	esInt3,x
.1cf2	60		rts				rts
.1cf3					MInt32Xor:
.1cf3	b5 48		lda $48,x			lda 	esInt0,x
.1cf5	55 49		eor $49,x			eor 	esInt0+1,x
.1cf7	95 48		sta $48,x			sta 	esInt0,x
.1cf9	b5 50		lda $50,x			lda 	esInt1,x
.1cfb	55 51		eor $51,x			eor 	esInt1+1,x
.1cfd	95 50		sta $50,x			sta 	esInt1,x
.1cff	b5 58		lda $58,x			lda 	esInt2,x
.1d01	55 59		eor $59,x			eor 	esInt2+1,x
.1d03	95 58		sta $58,x			sta 	esInt2,x
.1d05	b5 60		lda $60,x			lda 	esInt3,x
.1d07	55 61		eor $61,x			eor 	esInt3+1,x
.1d09	95 60		sta $60,x			sta 	esInt3,x
.1d0b	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32compare.asm

.1d0c					MInt32Compare:
.1d0c	b5 48		lda $48,x			lda 	esInt0,x 					; equality check.
.1d0e	d5 49		cmp $49,x			cmp 	esInt0+1,x
.1d10	d0 13		bne $1d25			bne 	MInt32Compare2
.1d12	b5 50		lda $50,x			lda 	esInt1,x
.1d14	d5 51		cmp $51,x			cmp 	esInt1+1,x
.1d16	d0 0d		bne $1d25			bne 	MInt32Compare2
.1d18	b5 58		lda $58,x			lda 	esInt2,x
.1d1a	d5 59		cmp $59,x			cmp 	esInt2+1,x
.1d1c	d0 07		bne $1d25			bne 	MInt32Compare2
.1d1e	b5 60		lda $60,x			lda 	esInt3,x
.1d20	55 61		eor $61,x			eor 	esInt3+1,x 					; will return 0 if the same.
.1d22	d0 01		bne $1d25			bne 	MInt32Compare2
.1d24	60		rts				rts
.1d25					MInt32Compare2:
.1d25	b5 48		lda $48,x			lda		esInt0,x 					; unsigned 32 bit comparison.
.1d27	d5 49		cmp $49,x			cmp 	esInt0+1,x
.1d29	b5 50		lda $50,x			lda		esInt1,x
.1d2b	f5 51		sbc $51,x			sbc 	esInt1+1,x
.1d2d	b5 58		lda $58,x			lda		esInt2,x
.1d2f	f5 59		sbc $59,x			sbc 	esInt2+1,x
.1d31	b5 60		lda $60,x			lda		esInt3,x
.1d33	f5 61		sbc $61,x			sbc 	esInt3+1,x
.1d35	50 02		bvc $1d39			bvc 	_I32LNoOverflow 			; make it signed 32 bi comparison
.1d37	49 80		eor #$80			eor 	#$80
.1d39					_I32LNoOverflow
.1d39	30 03		bmi $1d3e			bmi 	MInt32CLess					; if -ve then return $FF
.1d3b	a9 01		lda #$01			lda 	#$01						; else return $01
.1d3d	60		rts				rts
.1d3e					MInt32CLess:
.1d3e	a9 ff		lda #$ff			lda 	#$FF
.1d40	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32divide.asm

.1d41					MInt32SDivide:
.1d41	98		tya				tya  								; save Y, which is the count of negations
.1d42	48		pha				pha
.1d43	a0 00		ldy #$00			ldy 	#0 							; zero count
.1d45	20 5d 1d	jsr $1d5d			jsr 	_MInt32SRemSign 			; unsign TOS
.1d48	e8		inx				inx 								; unsign TOS+1
.1d49	20 5d 1d	jsr $1d5d			jsr 	_MInt32SRemSign
.1d4c	ca		dex				dex
.1d4d	98		tya				tya 								; save sign count on stack
.1d4e	48		pha				pha
.1d4f	20 66 1d	jsr $1d66			jsr 	MInt32UDivide 				; unsigned division
.1d52	68		pla				pla 								; get sign count back
.1d53	29 01		and #$01			and 	#1 							; if it is odd, then negate result
.1d55	f0 03		beq $1d5a			beq 	_I32SNoNeg
.1d57	20 18 1f	jsr $1f18			jsr 	MInt32Negate
.1d5a					_I32SNoNeg:
.1d5a	68		pla				pla 								; restoe Y and exit
.1d5b	a8		tay				tay
.1d5c	60		rts				rts
.1d5d					_MInt32SRemSign:
.1d5d	b5 60		lda $60,x			lda 	esInt3,x 					; is it -ve
.1d5f	10 04		bpl $1d65			bpl 	_MInt32SRSExit
.1d61	c8		iny				iny 								; increment the sign count
.1d62	20 18 1f	jsr $1f18			jsr 	MInt32Negate 				; negate the value.
.1d65					_MInt32SRSExit:
.1d65	60		rts				rts
.1d66					MInt32UDivide:
.1d66	b5 49		lda $49,x			lda 	esInt0+1,x 					; check for division by zero
.1d68	15 51		ora $51,x			ora 	esInt1+1,x
.1d6a	15 52		ora $52,x			ora 	esInt1+2,x
.1d6c	15 53		ora $53,x			ora 	esInt1+3,x
.1d6e	f0 4a		beq $1dba			beq 	_MInt32DZero
.1d70	e8		inx				inx 								; clear A
.1d71	e8		inx				inx
.1d72	20 5e 1f	jsr $1f5e			jsr 	MInt32False
.1d75	ca		dex				dex
.1d76	ca		dex				dex
.1d77	98		tya				tya 								; save Y on the stack
.1d78	48		pha				pha
.1d79	a0 20		ldy #$20			ldy 	#32 						; number of division passes
.1d7b					_MInt32UDLoop:
.1d7b	16 48		asl $48,x			asl 	esInt0,x					; shift QA left. First Q
.1d7d	36 50		rol $50,x			rol 	esInt1,x
.1d7f	36 58		rol $58,x			rol 	esInt2,x
.1d81	36 60		rol $60,x			rol 	esInt3,x
.1d83	36 4a		rol $4a,x			rol 	esInt0+2,x 					; then A.
.1d85	36 52		rol $52,x			rol 	esInt1+2,x
.1d87	36 5a		rol $5a,x			rol 	esInt2+2,x
.1d89	36 62		rol $62,x			rol 	esInt3+2,x
.1d8b	38		sec				sec 								; calculate A-M saving result on the stack
.1d8c	b5 4a		lda $4a,x			lda 	esInt0+2,x
.1d8e	f5 49		sbc $49,x			sbc 	esInt0+1,x
.1d90	48		pha				pha
.1d91	b5 52		lda $52,x			lda 	esInt1+2,x
.1d93	f5 51		sbc $51,x			sbc 	esInt1+1,x
.1d95	48		pha				pha
.1d96	b5 5a		lda $5a,x			lda 	esInt2+2,x
.1d98	f5 59		sbc $59,x			sbc 	esInt2+1,x
.1d9a	48		pha				pha
.1d9b	b5 62		lda $62,x			lda 	esInt3+2,x
.1d9d	f5 61		sbc $61,x			sbc 	esInt3+1,x
.1d9f	90 10		bcc $1db1			bcc		_MInt32NoSubtract 			; if A < M (e.g. carry clear) then reject this.
.1da1	95 62		sta $62,x			sta 	esInt3+2,x 					; write result back to A
.1da3	68		pla				pla
.1da4	95 5a		sta $5a,x			sta 	esInt2+2,x
.1da6	68		pla				pla
.1da7	95 52		sta $52,x			sta 	esInt1+2,x
.1da9	68		pla				pla
.1daa	95 4a		sta $4a,x			sta 	esInt0+2,x
.1dac	f6 48		inc $48,x			inc 	esInt0,x 					; sets bit 0 of Q - it was shifted left previously.
.1dae	4c b4 1d	jmp $1db4			jmp 	_MInt32Next 					; do the next iteration
.1db1					_MInt32NoSubtract:
.1db1	68		pla				pla
.1db2	68		pla				pla
.1db3	68		pla				pla
.1db4					_MInt32Next:
.1db4	88		dey				dey 								; do this 32 times.
.1db5	d0 c4		bne $1d7b			bne 	_MInt32UDLoop
.1db7	68		pla				pla 								; restore Y and exit
.1db8	a8		tay				tay
.1db9	60		rts				rts
.1dba					_MInt32DZero:
.1dba	a2 05		ldx #$05			ldx 	#ErrorID_DivZero
.1dbc	20 8c 20	jsr $208c			jsr 	ErrorHandler
.1dbf					MInt32Modulus:
.1dbf	20 66 1d	jsr $1d66			jsr 	MInt32UDivide 				; do the division.
.1dc2	b5 62		lda $62,x			lda 	esInt3+2,x 					; copy 2nd on stack (the remainder) to the top.
.1dc4	95 60		sta $60,x			sta 	esInt3,x
.1dc6	b5 5a		lda $5a,x			lda 	esInt2+2,x
.1dc8	95 58		sta $58,x			sta 	esInt2,x
.1dca	b5 52		lda $52,x			lda 	esInt1+2,x
.1dcc	95 50		sta $50,x			sta 	esInt1,x
.1dce	b5 4a		lda $4a,x			lda 	esInt0+2,x
.1dd0	95 48		sta $48,x			sta 	esInt0,x
.1dd2	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32fromstr.asm

.0af5					fs32Length:
>0af5							.fill 	1
.1dd3					MInt32FromString:
.1dd3	85 0c		sta $0c				sta 	tempShort 					; save base
.1dd5	98		tya				tya
.1dd6	48		pha				pha
.1dd7	a0 00		ldy #$00			ldy 	#0 							; get length
.1dd9	b1 04		lda ($04),y			lda 	(temp0),y
.1ddb	8d f5 0a	sta $0af5			sta 	fs32Length
.1dde	f0 65		beq $1e45			beq 	_I32FSFail2					; fail if length zero.
.1de0	a0 01		ldy #$01			ldy 	#1 							; set index into string being read
.1de2	b1 04		lda ($04),y			lda 	(temp0),y 					; look at first character
.1de4	c9 2d		cmp #$2d			cmp 	#"-"						; is it a - character
.1de6	d0 09		bne $1df1			bne 	_I32FSNotNegative
.1de8	ad f5 0a	lda $0af5			lda 	fs32Length 					; get length back.
.1deb	c9 01		cmp #$01			cmp 	#1 							; if 1 it is just a '-; so fail.'
.1ded	f0 56		beq $1e45			beq 	_I32FSFail2
.1def	a0 02		ldy #$02			ldy 	#2 							; first digit of the number.
.1df1					_I32FSNotNegative:
.1df1	a5 0c		lda $0c				lda 	tempShort 					; get the base back.
.1df3	c0 02		cpy #$02			cpy 	#2 							; if we read a -ve (e.g. Y == 2)
.1df5	d0 02		bne $1df9			bne 	_I32FSNN2
.1df7	09 80		ora #$80			ora 	#$80						; set bit 7, this indicates a negated result.
.1df9					_I32FSNN2:
.1df9	48		pha				pha 								; save base + final sign on stack.
.1dfa	20 5e 1f	jsr $1f5e			jsr 	MInt32False 				; zero the return value.
.1dfd					_I32FSMainLoop:
.1dfd	68		pla				pla 								; get the base back into tempshort
.1dfe	48		pha				pha
.1dff	29 7f		and #$7f			and 	#$7F
.1e01	85 0c		sta $0c				sta 	tempShort
.1e03	b1 04		lda ($04),y			lda 	(temp0),y 					; look at next character.
.1e05	c9 61		cmp #$61			cmp 	#"a" 						; fix up case.
.1e07	90 02		bcc $1e0b			bcc 	_I32FSNotLC
.1e09	e9 20		sbc #$20			sbc 	#32
.1e0b					_I32FSNotLC:
.1e0b	38		sec				sec 								; subtract 48 (ASCII "0")
.1e0c	e9 30		sbc #$30			sbc 	#"0"
.1e0e	90 34		bcc $1e44			bcc 	_I32FSFail 					; nothing more to do.
.1e10	c9 0a		cmp #$0a			cmp 	#9+1 						; if it is 0-9 validate vs base.
.1e12	90 06		bcc $1e1a			bcc 	_I32FSValidate
.1e14	c9 11		cmp #$11			cmp 	#17 						; is it between 58 and 64 ? if so bad.
.1e16	90 2c		bcc $1e44			bcc 	_I32FSFail
.1e18	e9 07		sbc #$07			sbc 	#7 							; adjust into range so now character is 0->nnn
.1e1a					_I32FSValidate:
.1e1a	c5 0c		cmp $0c				cmp 	tempShort 					; compare against the base.
.1e1c	b0 26		bcs $1e44			bcs 	_I32FSFail 					; sorry, too large for this base.
.1e1e	48		pha				pha 								; save the new digit value.
.1e1f	e8		inx				inx 								; put base into next slot.
.1e20	a5 0c		lda $0c				lda 	tempShort
.1e22	20 6d 1f	jsr $1f6d			jsr 	MInt32Set8Bit
.1e25	ca		dex				dex
.1e26	20 7d 1e	jsr $1e7d			jsr 	MInt32Multiply 				; multiply current by the base
.1e29	e8		inx				inx
.1e2a	68		pla				pla  								; put additive into next slot
.1e2b	20 6d 1f	jsr $1f6d			jsr 	MInt32Set8Bit
.1e2e	ca		dex				dex
.1e2f	20 49 1e	jsr $1e49			jsr 	MInt32Add 					; and add it
.1e32	c8		iny				iny 								; look at next character
.1e33	cc f5 0a	cpy $0af5			cpy 	fs32Length 					; until > length.
.1e36	f0 c5		beq $1dfd			beq 	_I32FSMainLoop
.1e38	90 c3		bcc $1dfd			bcc 	_I32FSMainLoop
.1e3a					_I32FSDone:
.1e3a	68		pla				pla 								; get base/final sign back
.1e3b	10 03		bpl $1e40			bpl 	_I32FSNN3
.1e3d	20 18 1f	jsr $1f18			jsr 	MInt32Negate 				; negate the result.
.1e40					_I32FSNN3:
.1e40	68		pla				pla
.1e41	a8		tay				tay
.1e42	38		sec				sec
.1e43	60		rts				rts
.1e44					_I32FSFail:
.1e44	68		pla				pla
.1e45					_I32FSFail2:
.1e45	68		pla				pla
.1e46	a8		tay				tay
.1e47	18		clc				clc
.1e48	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32math.asm

.1e49					MInt32Add:
.1e49	18		clc				clc
.1e4a	b5 48		lda $48,x			lda 	esInt0,x
.1e4c	75 49		adc $49,x			adc 	esInt0+1,x
.1e4e	95 48		sta $48,x			sta 	esInt0,x
.1e50	b5 50		lda $50,x			lda 	esInt1,x
.1e52	75 51		adc $51,x			adc 	esInt1+1,x
.1e54	95 50		sta $50,x			sta 	esInt1,x
.1e56	b5 58		lda $58,x			lda 	esInt2,x
.1e58	75 59		adc $59,x			adc 	esInt2+1,x
.1e5a	95 58		sta $58,x			sta 	esInt2,x
.1e5c	b5 60		lda $60,x			lda 	esInt3,x
.1e5e	75 61		adc $61,x			adc 	esInt3+1,x
.1e60	95 60		sta $60,x			sta 	esInt3,x
.1e62	60		rts				rts
.1e63					MInt32Sub:
.1e63	38		sec				sec
.1e64	b5 48		lda $48,x			lda 	esInt0,x
.1e66	f5 49		sbc $49,x			sbc 	esInt0+1,x
.1e68	95 48		sta $48,x			sta 	esInt0,x
.1e6a	b5 50		lda $50,x			lda 	esInt1,x
.1e6c	f5 51		sbc $51,x			sbc 	esInt1+1,x
.1e6e	95 50		sta $50,x			sta 	esInt1,x
.1e70	b5 58		lda $58,x			lda 	esInt2,x
.1e72	f5 59		sbc $59,x			sbc 	esInt2+1,x
.1e74	95 58		sta $58,x			sta 	esInt2,x
.1e76	b5 60		lda $60,x			lda 	esInt3,x
.1e78	f5 61		sbc $61,x			sbc 	esInt3+1,x
.1e7a	95 60		sta $60,x			sta 	esInt3,x
.1e7c	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32multiply.asm

.1e7d					MInt32Multiply:
.1e7d	e8		inx				inx 								; copy 2nd -> 3rd
.1e7e	20 a3 1e	jsr $1ea3			jsr 	MInt32CopyUp
.1e81	ca		dex				dex
.1e82	20 a3 1e	jsr $1ea3			jsr 	MInt32CopyUp 				; copy 1st -> 2nd
.1e85	20 5e 1f	jsr $1f5e			jsr 	MInt32False 					; zero 1st.
.1e88					_I32Loop:
.1e88	b5 4a		lda $4a,x			lda 	esInt0+2,x 					; get low bit of 3rd
.1e8a	29 01		and #$01			and 	#1
.1e8c	f0 03		beq $1e91			beq 	_I32NoAdd 					; if set
.1e8e	20 49 1e	jsr $1e49			jsr 	MInt32Add 					; add 2nd to 1st.
.1e91					_I32NoAdd:
.1e91	e8		inx				inx 								; shift 2nd left
.1e92	20 73 1f	jsr $1f73			jsr 	MInt32ShiftLeft
.1e95	e8		inx				inx  								; shift 3rd right
.1e96	20 7c 1f	jsr $1f7c			jsr 	MInt32ShiftRight
.1e99	20 85 1f	jsr $1f85			jsr 	MInt32Zero 					; check if zero.
.1e9c	08		php				php 								; save status bits
.1e9d	ca		dex				dex 	 							; point back to 1st
.1e9e	ca		dex				dex
.1e9f	28		plp				plp 								; get status bits
.1ea0	d0 e6		bne $1e88			bne 	_I32Loop 					; if non-zero keep going.
.1ea2	60		rts				rts
.1ea3					MInt32CopyUp:
.1ea3	b5 48		lda $48,x			lda 	esInt0,x
.1ea5	95 49		sta $49,x			sta 	esInt0+1,x
.1ea7	b5 50		lda $50,x			lda 	esInt1,x
.1ea9	95 51		sta $51,x			sta 	esInt1+1,x
.1eab	b5 58		lda $58,x			lda 	esInt2,x
.1ead	95 59		sta $59,x			sta 	esInt2+1,x
.1eaf	b5 60		lda $60,x			lda 	esInt3,x
.1eb1	95 61		sta $61,x			sta 	esInt3+1,x
.1eb3	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32tostr.asm

>0af6					MCharCount:	.fill 	1						; count of converted characters
.1eb4					MInt32ToString:
.1eb4	48		pha				pha 								; save base
.1eb5	85 0c		sta $0c				sta 	tempShort 					; save target base.
.1eb7	a9 00		lda #$00			lda 	#0
.1eb9	8d f6 0a	sta $0af6			sta 	MCharCount 					; clear character count to 0
.1ebc	98		tya				tya
.1ebd	48		pha				pha
.1ebe	a5 0c		lda $0c				lda 	tempShort 					; check if we are signed conversion
.1ec0	10 10		bpl $1ed2			bpl 	_I32TSUnsigned
.1ec2	48		pha				pha 								; save base on stack.
.1ec3	b5 60		lda $60,x			lda 	esInt3,x 					; is it actually negative
.1ec5	10 08		bpl $1ecf			bpl 	_I32TSNoFlip
.1ec7	a9 2d		lda #$2d			lda 	#"-" 						; write a '-' prefix out.
.1ec9	20 05 1f	jsr $1f05			jsr 	MI32WriteCharacter
.1ecc	20 18 1f	jsr $1f18			jsr 	MInt32Negate 				; negate the value.
.1ecf					_I32TSNoFlip:
.1ecf	68		pla				pla 								; get the base back
.1ed0	29 7f		and #$7f			and 	#$7F 						; clear the sign flag so it's just a base now.
.1ed2					_I32TSUnsigned:
.1ed2	20 e0 1e	jsr $1ee0			jsr 	MI32DivideWrite 			; recursive code to output string.
.1ed5	a0 00		ldy #$00			ldy 	#0 							; write charcount to first character.
.1ed7	ad f6 0a	lda $0af6			lda 	MCharCount
.1eda	91 04		sta ($04),y			sta 	(temp0),y
.1edc	68		pla				pla
.1edd	a8		tay				tay
.1ede	68		pla				pla
.1edf	60		rts				rts
.1ee0					MI32DivideWrite:
.1ee0	48		pha				pha 								; save the divisor/base
.1ee1	e8		inx				inx 								; write in the dividing position.
.1ee2	20 6d 1f	jsr $1f6d			jsr 	MInt32Set8Bit
.1ee5	ca		dex				dex
.1ee6	20 66 1d	jsr $1d66			jsr 	MInt32UDivide 				; divide number by base.
.1ee9	68		pla				pla 								; get the base into Y
.1eea	a8		tay				tay
.1eeb	b5 4a		lda $4a,x			lda 	esInt0+2,x 					; get the remainder and push on the stack.
.1eed	48		pha				pha
.1eee	20 85 1f	jsr $1f85			jsr 	MInt32Zero 					; is the result zero ?
.1ef1	f0 04		beq $1ef7			beq 	_I32NoRecurse 				; if so, don't recurse.
.1ef3	98		tya				tya 								; put base into A
.1ef4	20 e0 1e	jsr $1ee0			jsr 	MI32DivideWrite 				; and jsr the dividor recursively.
.1ef7					_I32NoRecurse:
.1ef7	68		pla				pla 								; get the remainder back
.1ef8	c9 0a		cmp #$0a			cmp 	#10  						; handle hexadecimals.
.1efa	90 02		bcc $1efe			bcc 	_I32NotHex
.1efc	69 06		adc #$06			adc 	#7-1
.1efe					_I32NotHex:
.1efe	18		clc				clc 								; make it ASCII
.1eff	69 30		adc #$30			adc 	#48
.1f01	20 05 1f	jsr $1f05			jsr 	MI32WriteCharacter 			; write the character out
.1f04	60		rts				rts 								; and exit.
.1f05					MI32WriteCharacter:
.1f05	ee f6 0a	inc $0af6			inc 	MCharCount 					; bump count (space for leading count)
.1f08	ac f6 0a	ldy $0af6			ldy 	MCharCount 					; get position
.1f0b	91 04		sta ($04),y			sta 	(temp0),y 					; write out with trailing 0
.1f0d	c8		iny				iny
.1f0e	a9 00		lda #$00			lda 	#0
.1f10	91 04		sta ($04),y			sta 	(temp0),y
.1f12	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32unary.asm

>0af7					MSeed32:	.fill 	4							; random number seed.
.1f13					MInt32Absolute:
.1f13	b5 60		lda $60,x			lda 	esInt3,x 					; use negate code if -ve.
.1f15	30 01		bmi $1f18			bmi 	MInt32Negate
.1f17	60		rts				rts
.1f18					MInt32Negate:
.1f18	38		sec				sec
.1f19	a9 00		lda #$00			lda 	#0
.1f1b	f5 48		sbc $48,x			sbc 	esInt0,x
.1f1d	95 48		sta $48,x			sta 	esInt0,x
.1f1f	a9 00		lda #$00			lda 	#0
.1f21	f5 50		sbc $50,x			sbc 	esInt1,x
.1f23	95 50		sta $50,x			sta 	esInt1,x
.1f25	a9 00		lda #$00			lda 	#0
.1f27	f5 58		sbc $58,x			sbc 	esInt2,x
.1f29	95 58		sta $58,x			sta 	esInt2,x
.1f2b	a9 00		lda #$00			lda 	#0
.1f2d	f5 60		sbc $60,x			sbc 	esInt3,x
.1f2f	95 60		sta $60,x			sta 	esInt3,x
.1f31	60		rts				rts
.1f32					MInt32Not:
.1f32	b5 48		lda $48,x			lda 	esInt0,x
.1f34	49 ff		eor #$ff			eor 	#$FF
.1f36	95 48		sta $48,x			sta 	esInt0,x
.1f38	b5 50		lda $50,x			lda 	esInt1,x
.1f3a	49 ff		eor #$ff			eor 	#$FF
.1f3c	95 50		sta $50,x			sta 	esInt1,x
.1f3e	b5 58		lda $58,x			lda 	esInt2,x
.1f40	49 ff		eor #$ff			eor 	#$FF
.1f42	95 58		sta $58,x			sta 	esInt2,x
.1f44	b5 60		lda $60,x			lda 	esInt3,x
.1f46	49 ff		eor #$ff			eor 	#$FF
.1f48	95 60		sta $60,x			sta 	esInt3,x
.1f4a	60		rts				rts
.1f4b					MInt32Sign:
.1f4b	b5 60		lda $60,x			lda 	esInt3,x					; look at MSB
.1f4d	30 0b		bmi $1f5a			bmi 	MInt32True 					; if set return -1 (true)
.1f4f	20 85 1f	jsr $1f85			jsr 	MInt32Zero 					; is it zero ?
.1f52	f0 0a		beq $1f5e			beq 	MInt32False 					; if zero return 0 (false)
.1f54	20 5e 1f	jsr $1f5e			jsr 	MInt32False 					; > 0 return 1
.1f57	f6 48		inc $48,x			inc 	esInt0,x
.1f59	60		rts				rts
.1f5a					MInt32True:
.1f5a	a9 ff		lda #$ff			lda 	#$FF 						; set to $FFFFFFFF
.1f5c	d0 02		bne $1f60			bne 	MInt32WriteAll
.1f5e					MInt32False:
.1f5e	a9 00		lda #$00			lda 	#0
.1f60					MInt32WriteAll:
.1f60	95 48		sta $48,x			sta 	esInt0,x
.1f62					MInt32Write123:
.1f62	95 50		sta $50,x			sta 	esInt1,x
.1f64	95 58		sta $58,x			sta 	esInt2,x
.1f66	95 60		sta $60,x			sta 	esInt3,x
.1f68	a9 00		lda #$00			lda 	#$00						; and make it an integer
.1f6a	95 40		sta $40,x			sta 	esType,x
.1f6c	60		rts				rts
.1f6d					MInt32Set8Bit:
.1f6d	95 48		sta $48,x			sta 	esInt0,x
.1f6f	a9 00		lda #$00			lda 	#0
.1f71	f0 ef		beq $1f62			beq		MInt32Write123
.1f73					MInt32ShiftLeft:
.1f73	16 48		asl $48,x			asl 	esInt0,x
.1f75	36 50		rol $50,x			rol	 	esInt1,x
.1f77	36 58		rol $58,x			rol	 	esInt2,x
.1f79	36 60		rol $60,x			rol	 	esInt3,x
.1f7b	60		rts				rts
.1f7c					MInt32ShiftRight:
.1f7c	56 60		lsr $60,x			lsr 	esInt3,x
.1f7e	76 58		ror $58,x			ror 	esInt2,x
.1f80	76 50		ror $50,x			ror 	esInt1,x
.1f82	76 48		ror $48,x			ror 	esInt0,x
.1f84	60		rts				rts
.1f85					MInt32Zero:
.1f85	b5 48		lda $48,x			lda 	esInt0,x
.1f87	15 50		ora $50,x			ora 	esInt1,x
.1f89	15 58		ora $58,x			ora 	esInt2,x
.1f8b	15 60		ora $60,x			ora 	esInt3,x
.1f8d	60		rts				rts
.1f8e					MInt32Random:
.1f8e	98		tya				tya
.1f8f	48		pha				pha
.1f90	a0 07		ldy #$07			ldy 	#7
.1f92	ad f7 0a	lda $0af7			lda 	MSeed32+0
.1f95	d0 03		bne $1f9a			bne 	_Random1
.1f97	a8		tay				tay
.1f98	a9 aa		lda #$aa			lda		#$AA
.1f9a					_Random1:
.1f9a	0a		asl a				asl 	a
.1f9b	2e f8 0a	rol $0af8			rol 	MSeed32+1
.1f9e	2e f9 0a	rol $0af9			rol 	MSeed32+2
.1fa1	2e fa 0a	rol $0afa			rol 	MSeed32+3
.1fa4	90 02		bcc $1fa8			bcc 	_Random2
.1fa6	49 c5		eor #$c5			eor 	#$C5
.1fa8					_Random2:
.1fa8	88		dey				dey
.1fa9	d0 ef		bne $1f9a			bne 	_Random1
.1fab	8d f7 0a	sta $0af7			sta 	MSeed32+0
.1fae	95 48		sta $48,x			sta 	esInt0,x
.1fb0	ad f8 0a	lda $0af8			lda 	MSeed32+1
.1fb3	95 50		sta $50,x			sta 	esInt1,x
.1fb5	ad f9 0a	lda $0af9			lda 	MSeed32+2
.1fb8	95 58		sta $58,x			sta 	esInt2,x
.1fba	ad fa 0a	lda $0afa			lda 	MSeed32+3
.1fbd	95 60		sta $60,x			sta 	esInt3,x
.1fbf	68		pla				pla
.1fc0	a8		tay				tay
.1fc1	a9 00		lda #$00			lda 	#0
.1fc3	95 40		sta $40,x			sta 	esType,x
.1fc5	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/utility/check.asm

.1fc6					CheckToken:
.1fc6	d1 02		cmp ($02),y			cmp 	(codePtr),y
.1fc8	d0 02		bne $1fcc			bne 	_CTError
.1fca	c8		iny				iny
.1fcb	60		rts				rts
.1fcc					_CTError:
.1fcc	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.1fce	20 8c 20	jsr $208c			jsr 	ErrorHandler
.1fd1					CheckRightParen:
.1fd1	b1 02		lda ($02),y			lda 	(codePtr),y
.1fd3	c8		iny				iny
.1fd4	c9 c4		cmp #$c4			cmp 	#TKW_RPAREN
.1fd6	d0 01		bne $1fd9			bne 	_CRPError
.1fd8	60		rts				rts
.1fd9					_CRPError:
.1fd9	a2 09		ldx #$09			ldx 	#ErrorID_MissingRP
.1fdb	20 8c 20	jsr $208c			jsr 	ErrorHandler
.1fde					CheckComma:
.1fde	b1 02		lda ($02),y			lda 	(codePtr),y
.1fe0	c8		iny				iny
.1fe1	c9 c6		cmp #$c6			cmp 	#TKW_COMMA
.1fe3	d0 01		bne $1fe6			bne 	_CCError
.1fe5	60		rts				rts
.1fe6					_CCError:
.1fe6	a2 0a		ldx #$0a			ldx 	#ErrorID_MissingComma
.1fe8	20 8c 20	jsr $208c			jsr 	ErrorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/utility/scanner.asm

.25d7					ScanForward:
.25d7	85 06		sta $06				sta 	temp1 						; save tokens to search in temp1/temp1+1
.25d9	86 07		stx $07				stx 	temp1+1
.25db	a9 00		lda #$00			lda 	#0 							; temp2 counts structure levels.
.25dd	85 08		sta $08				sta 	temp2
.25df	b1 02		lda ($02),y	_SFLoop:lda 	(codePtr),y 				; look at the next token.
.25e1	c8		iny				iny
.25e2	a6 08		ldx $08				ldx 	temp2 						; check structure levels are zero.
.25e4	d0 08		bne $25ee			bne 	_SFNoCheck 					; if so, check token against entered values.
.25e6	c5 06		cmp $06				cmp 	temp1
.25e8	f0 24		beq $260e			beq 	_SFExit
.25ea	c5 07		cmp $07				cmp 	temp1+1
.25ec	f0 20		beq $260e			beq 	_SFExit
.25ee					_SFNoCheck:
.25ee	c9 80		cmp #$80			cmp 	#$80 						; if it is 00-7F (variable/number) just skip it.
.25f0	90 ed		bcc $25df			bcc 	_SFLoop
.25f2	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; $80-$85 is various specials.
.25f4	90 19		bcc $260f			bcc 	_SFSpecials
.25f6	c9 99		cmp #$99			cmp 	#TOK_STRUCTST 				; if < structure start then continue
.25f8	90 e5		bcc $25df			bcc 	_SFLoop
.25fa	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST 				; if >= unary start (after structure) then continue.
.25fc	b0 e1		bcs $25df			bcs 	_SFLoop
.25fe	aa		tax				tax  								; token in X, and look up the adjuster.
.25ff	bd 4f 19	lda $194f,x			lda 	ELBinaryOperatorInfo-TOK_BINARYST,x
.2602	38		sec				sec 								; convert to an offset
.2603	e9 81		sbc #$81			sbc 	#$81
.2605	18		clc				clc 								; add to depth
.2606	65 08		adc $08				adc 	temp2
.2608	85 08		sta $08				sta 	temp2
.260a	10 d3		bpl $25df			bpl 	_SFLoop 					; +ve okay to continue
.260c	30 2a		bmi $2638			bmi 	_SFError 					; if gone -ve then we have a nesting error
.260e	60		rts		_SFExit:rts
.260f					_SFSpecials:
.260f	c9 80		cmp #$80			cmp 	#TOK_EOL 					; $80, advance to next line.
.2611	f0 14		beq $2627			beq 	_SFNextLine
.2613	c9 84		cmp #$84			cmp 	#TOK_FPC					; $84, skip embedded float
.2615	f0 26		beq $263d			beq 	_SFFloatSkip
.2617	c9 85		cmp #$85			cmp 	#TOK_STR 					; $85, skip string
.2619	f0 04		beq $261f			beq 	_SFSkipString
.261b	c8		iny				iny									; $81,$82,$83 shift, so just advance over the shifted
.261c	4c df 25	jmp $25df			jmp 	_SFLoop 					; token.
.261f					_SFSkipString:
.261f	98		tya				tya
.2620	38		sec				sec
.2621	71 02		adc ($02),y			adc 	(codePtr),y
.2623	a8		tay				tay
.2624	4c df 25	jmp $25df			jmp 	_SFLoop
.2627					_SFNextLine:
.2627	a0 00		ldy #$00			ldy 	#0 							; get offset
.2629	b1 02		lda ($02),y			lda 	(codePtr),y
.262b	18		clc				clc 								; add to code pointer.
.262c	65 02		adc $02				adc 	codePtr
.262e	85 02		sta $02				sta 	codePtr
.2630	90 02		bcc $2634			bcc		_SFNLNoCarry
.2632	e6 03		inc $03				inc 	codePtr+1
.2634					_SFNLNoCarry:
.2634	b1 02		lda ($02),y			lda 	(codePtr),y 				; reached the end of the program.
.2636	d0 a7		bne $25df			bne		_SFLoop 					; no go round again
.2638					_SFError:
.2638	a2 14		ldx #$14			ldx 	#ErrorID_Struct
.263a	20 8c 20	jsr $208c			jsr 	ErrorHandler
.263d					_SFFloatSkip:
.263d	4c 2c 13	jmp $132c			jmp 	Unimplemented

;******  Return to file: main/main.asm


;******  Processing file: main/utility/stack.asm

.0078					rsPointer:
>0078							.fill 	2							; to TOS, which is the current top-token.
.1feb					RSReset:
.1feb	a9 ff		lda #$ff			lda 	#(returnStack+retStackSize-1) & $FF
.1fed	85 78		sta $78				sta 	rsPointer
.1fef	a9 09		lda #$09			lda 	#(returnStack+retStackSize-1) >> 8
.1ff1	85 79		sta $79				sta 	1+(rsPointer)
.1ff3	a9 ff		lda #$ff			lda 	#$FF 						; put a duff marker on TOS, so nothing will pop
.1ff5	8d ff 09	sta $09ff			sta 	returnStack+retStackSize-1
.1ff8	60		rts				rts
.1ff9					RSClaim:
.1ff9	84 0c		sty $0c				sty 	tempShort 					; preserve Y
.1ffb	48		pha				pha 								; save marker on stack.
.1ffc	8a		txa				txa 								; get bytes required.
.1ffd	38		sec				sec
.1ffe	49 ff		eor #$ff			eor 	#$FF 						; add to rsPointer using 2's complement.
.2000	65 78		adc $78				adc 	rsPointer
.2002	85 78		sta $78				sta 	rsPointer
.2004	a5 79		lda $79				lda 	rsPointer+1
.2006	69 ff		adc #$ff			adc 	#$FF
.2008	85 79		sta $79				sta 	rsPointer+1
.200a	c9 08		cmp #$08			cmp 	#returnStack>>8 			; overflow. underflow actually :)
.200c	90 08		bcc $2016			bcc 	_RSCOverflow
.200e	68		pla				pla 								; get marker back
.200f	a0 00		ldy #$00			ldy 	#0 							; write marker out.
.2011	91 78		sta ($78),y			sta 	(rsPointer),y
.2013	a4 0c		ldy $0c				ldy 	tempShort 					; restore Y and exit
.2015	60		rts				rts
.2016					_RSCOverflow:
.2016	a2 16		ldx #$16			ldx 	#ErrorID_RetStack
.2018	20 8c 20	jsr $208c			jsr 	ErrorHandler
.201b					RSFree:
.201b	18		clc				clc
.201c	65 78		adc $78				adc 	rsPointer
.201e	85 78		sta $78				sta 	rsPointer
.2020	90 02		bcc $2024			bcc 	_RSFExit
.2022	e6 79		inc $79				inc 	rsPointer+1
.2024					_RSFExit:
.2024	60		rts				rts
.2025					RSSavePosition:
.2025	84 0c		sty $0c				sty 	tempShort 					; save Y position
.2027	a8		tay				tay 								; this is where we write it.
.2028	a5 02		lda $02				lda 	codePtr 					; write codePointer out
.202a	91 78		sta ($78),y			sta 	(rsPointer),y
.202c	c8		iny				iny
.202d	a5 03		lda $03				lda 	codePtr+1
.202f	91 78		sta ($78),y			sta 	(rsPointer),y
.2031	c8		iny				iny
.2032	a5 0c		lda $0c				lda 	tempShort 					; write the Y position out.
.2034	91 78		sta ($78),y			sta 	(rsPointer),y
.2036	a8		tay				tay 								; fix Y back again to original value
.2037	60		rts				rts
.2038					RSLoadPosition:
.2038	a8		tay				tay
.2039	b1 78		lda ($78),y			lda 	(rsPointer),y 				; read codePointer back
.203b	85 02		sta $02				sta 	codePtr
.203d	c8		iny				iny
.203e	b1 78		lda ($78),y			lda 	(rsPointer),y
.2040	85 03		sta $03				sta 	codePtr+1
.2042	c8		iny				iny
.2043	b1 78		lda ($78),y			lda 	(rsPointer),y 				; and the offset
.2045	a8		tay				tay 								; to Y
.2046	60		rts				rts

;******  Return to file: main/main.asm

.2047					mainHandler:
.2047	7c 4a 20	jmp ($204a,x)			jmp 	(mainVectors,x)
.204a					mainVectors:
>204a	82 19					.word LinkEvaluate         ; index 0
>204c	88 19					.word LinkEvaluateInteger  ; index 2
>204e	8e 19					.word LinkEvaluateSmallInt ; index 4

;******  Return to file: basic.asm

.2050					section_end_main:
.2050					section_start_assembler:

;******  Processing file: assembler/assembler.asm

.2050					assemblerHandler:
.2050	7c 53 20	jmp ($2053,x)			jmp 	(assemblerVectors,x)
.2053					assemblerVectors:

;******  Return to file: basic.asm

.2053					section_end_assembler:
.2053					section_start_device:

;******  Processing file: device/device.asm


;******  Processing file: device/x16/x16io.asm

.2053					IONewLine:
.2053	48		pha				pha
.2054	a9 0d		lda #$0d			lda 	#13
.2056	20 63 20	jsr $2063			jsr 	IOPrintChar
.2059	68		pla				pla
.205a	60		rts				rts
.205b					IOTab:
.205b	48		pha				pha
.205c	a9 20		lda #$20			lda 	#32
.205e	20 63 20	jsr $2063			jsr 	IOPrintChar
.2061	68		pla				pla
.2062	60		rts				rts
.2063					IOPrintChar:
.2063	aa		tax				tax
.2064	5a		phy				phy
.2065	8a		txa				txa
.2066	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.2069	7a		ply				ply
.206a	60		rts				rts
.206b					IOInkey:
.206b	98		tya				tya
.206c	48		pha				pha
.206d	20 e4 ff	jsr $ffe4			jsr 	$FFE4
.2070	85 0c		sta $0c				sta 	tempShort
.2072	68		pla				pla
.2073	a8		tay				tay
.2074	a5 0c		lda $0c				lda 	tempShort
.2076	60		rts				rts

;******  Return to file: device/device.asm


;******  Processing file: device/x16/x16timer.asm

.2077					IOReadTimer:
.2077	20 de ff	jsr $ffde			jsr 	$FFDE
.207a	48		pha				pha
.207b	8a		txa				txa
.207c	a8		tay				tay
.207d	68		pla				pla
.207e	60		rts				rts

;******  Return to file: device/device.asm

.207f					deviceHandler:
.207f	7c 82 20	jmp ($2082,x)			jmp 	(deviceVectors,x)
.2082					deviceVectors:
>2082	53 20					.word IONewLine            ; index 0
>2084	6b 20					.word IOInkey              ; index 2
>2086	63 20					.word IOPrintChar          ; index 4
>2088	5b 20					.word IOTab                ; index 6
>208a	77 20					.word IOReadTimer          ; index 8

;******  Return to file: basic.asm

.208c					section_end_device:
.208c					section_start_error:

;******  Processing file: error/error.asm


;******  Processing file: error/errorhandler.asm

.208c					ErrorHandler:
.208c	a9 ee		lda #$ee			lda 	#$EE
.208e	a8		tay				tay
>208f	db						.byte 	$DB
.2090	4c 90 20	jmp $2090	_EHHalt:jmp 	_EHHalt

;******  Return to file: error/error.asm


;******  Return to file: basic.asm

.2093					section_end_error:
.2093					section_start_floatingpoint:

;******  Processing file: floatingpoint/floatingpoint.asm

.2093					floatingpointHandler:
.2093	a2 03		ldx #$03			ldx 	#ErrorID_NoModule
.2095	20 8c 20	jsr $208c			jsr 	ErrorHandler

;******  Return to file: basic.asm

.2098					section_end_floatingpoint:
.2098					section_start_interaction:

;******  Processing file: interaction/interaction.asm

.2098					interactionHandler:
.2098	7c 9b 20	jmp ($209b,x)			jmp 	(interactionVectors,x)
.209b					interactionVectors:

;******  Return to file: basic.asm

.209b					section_end_interaction:
.209b					section_start_string:

;******  Processing file: string/string.asm


;******  Processing file: string/chr.asm

.209b					StringChrs:
.209b	aa		tax				tax 								; set up stack
.209c	a9 02		lda #$02			lda 	#2
.209e	20 55 21	jsr $2155			jsr 	AllocateSoftString
.20a1	98		tya				tya
.20a2	20 7b 21	jsr $217b			jsr 	WriteSoftString
.20a5	20 aa 20	jsr $20aa			jsr 	ReturnSoftString
.20a8	8a		txa				txa
.20a9	60		rts				rts
.20aa					ReturnSoftString:
.20aa	a5 7a		lda $7a				lda 	softMemAlloc
.20ac	95 48		sta $48,x			sta 	esInt0,x
.20ae	a5 7b		lda $7b				lda 	softMemAlloc+1
.20b0	95 50		sta $50,x			sta 	esInt1,x
.20b2	a9 00		lda #$00			lda 	#0
.20b4	95 58		sta $58,x			sta 	esInt2,x
.20b6	95 60		sta $60,x			sta 	esInt3,x
.20b8	a9 40		lda #$40			lda 	#$40
.20ba	95 40		sta $40,x			sta 	esType,x
.20bc	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/compare.asm

.20bd					STRCompare:
.20bd	48		pha				pha 								; save A
.20be	aa		tax				tax 								; put stack pos in X
.20bf	98		tya				tya
.20c0	48		pha				pha
.20c1	20 f5 20	jsr $20f5			jsr 	CopyStringPair
.20c4	a0 00		ldy #$00			ldy 	#0 							; get the smaller of the two string sizes.
.20c6	b1 04		lda ($04),y			lda 	(temp0),y
.20c8	d1 06		cmp ($06),y			cmp 	(temp1),y
.20ca	90 02		bcc $20ce			bcc 	_SCNotSmaller
.20cc	b1 06		lda ($06),y			lda 	(temp1),y
.20ce					_SCNotSmaller:
.20ce	aa		tax				tax 								; put that in X. We compare this many chars first.
.20cf					_SCCompareLoop:
.20cf	e0 00		cpx #$00			cpx 	#0 							; if compared all the smaller, then it is the shorter
.20d1	f0 0c		beq $20df			beq 	_SCSameToEndShortest 		; one that is the smallest if they are different lengths.
.20d3	ca		dex				dex 								; decrement chars to compare.
.20d4	c8		iny				iny 								; move to next character
.20d5	38		sec				sec 								; calculate s1[y]-s2[y]
.20d6	b1 04		lda ($04),y			lda 	(temp0),y
.20d8	f1 06		sbc ($06),y			sbc 	(temp1),y
.20da	d0 0a		bne $20e6			bne 	_SCReturnResult 			; if different return sign of A
.20dc	4c cf 20	jmp $20cf			jmp 	_SCCompareLoop
.20df					_SCSameToEndShortest
.20df	a0 00		ldy #$00			ldy 	#0 							; compare len(s1) - len(s2)
.20e1	38		sec				sec
.20e2	b1 04		lda ($04),y			lda 	(temp0),y
.20e4	f1 06		sbc ($06),y			sbc 	(temp1),y
.20e6					_SCReturnResult:
.20e6	08		php				php 								; set return to zero preserving PSW.
.20e7	a2 00		ldx #$00			ldx 	#0
.20e9	28		plp				plp
.20ea	f0 05		beq $20f1			beq 	_SCExit 					; two values equal, then exit
.20ec	ca		dex				dex 								; X = $FF
.20ed	90 02		bcc $20f1			bcc 	_SCExit 					; if 1st < 2nd then -1
.20ef	a2 01		ldx #$01			ldx 	#1 							; X = $01 if greater
.20f1					_SCExit:
.20f1	68		pla				pla
.20f2	a8		tay				tay
.20f3	68		pla				pla
.20f4	60		rts				rts
.20f5					CopyStringPair:
.20f5	b5 49		lda $49,x			lda 	esInt0+1,x
.20f7	85 06		sta $06				sta 	temp1
.20f9	b5 51		lda $51,x			lda 	esInt1+1,x
.20fb	85 07		sta $07				sta 	temp1+1
.20fd					CopyStringTop:
.20fd	b5 48		lda $48,x			lda 	esInt0,x
.20ff	85 04		sta $04				sta 	temp0
.2101	b5 50		lda $50,x			lda 	esInt1,x
.2103	85 05		sta $05				sta 	temp0+1
.2105	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/concat.asm

.2106					StringConcat:
.2106	aa		tax				tax									; stack pos in X
.2107	98		tya				tya
.2108	48		pha				pha
.2109	20 f5 20	jsr $20f5			jsr 	CopyStringPair 				; temp0 and temp1 point to strings to concat.
.210c	38		sec				sec 								; calculate alloc strings. lengths added + 1 for size.
.210d	a0 00		ldy #$00			ldy 	#0
.210f	b1 04		lda ($04),y			lda 	(temp0),y
.2111	71 06		adc ($06),y			adc 	(temp1),y
.2113	b0 1c		bcs $2131			bcs 	_SCError 					; just too many characters here.
.2115	c9 fc		cmp #$fc			cmp 	#MaxStringSize
.2117	b0 18		bcs $2131			bcs 	_SCError
.2119	20 55 21	jsr $2155			jsr 	AllocateSoftString 			; allocate soft string memory, set pointer.
.211c	20 4c 21	jsr $214c			jsr 	CopySoftToStack 			; copy that to the stack.
.211f	20 36 21	jsr $2136			jsr 	SCCopyTemp0 				; copy temp0
.2122	a5 06		lda $06				lda 	temp1 						; copy temp1 to temp0
.2124	85 04		sta $04				sta 	temp0
.2126	a5 07		lda $07				lda 	temp1+1
.2128	85 05		sta $05				sta 	temp0+1
.212a	20 36 21	jsr $2136			jsr 	SCCopyTemp0 				; copy temp0 e.g. what was temp1.
.212d	68		pla				pla
.212e	a8		tay				tay
.212f	8a		txa				txa 								; and A
.2130	60		rts				rts
.2131					_SCError:
.2131	a2 0d		ldx #$0d			ldx 	#ErrorID_StrLen
.2133	20 8c 20	jsr $208c			jsr 	ErrorHandler
.2136					SCCopyTemp0:
.2136	a0 00		ldy #$00			ldy 	#0 							; put count in temp2
.2138	b1 04		lda ($04),y			lda 	(temp0),y
.213a	85 08		sta $08				sta 	temp2
.213c					_SCCopyLoop:
.213c	a5 08		lda $08				lda 	temp2 						; done the lot
.213e	f0 0b		beq $214b			beq 	_SCCopyExit
.2140	c6 08		dec $08				dec 	temp2
.2142	c8		iny				iny 								; get next char
.2143	b1 04		lda ($04),y			lda 	(temp0),y
.2145	20 7b 21	jsr $217b			jsr 	WriteSoftString 			; write to soft string.
.2148	4c 3c 21	jmp $213c			jmp 	_SCCopyLoop
.214b					_SCCopyExit:
.214b	60		rts				rts
.214c					CopySoftToStack:
.214c	a5 7a		lda $7a				lda 	SoftMemAlloc 				; copy the memory allocation pointer to the stack.
.214e	95 48		sta $48,x			sta 	esInt0,x 					; type is already string.
.2150	a5 7b		lda $7b				lda 	SoftMemAlloc+1
.2152	95 50		sta $50,x			sta 	esInt1,x
.2154	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/memory.asm

.007a					softMemAlloc:
>007a							.fill 	2  							; if MSB is zero needs resetting on allocation.
.2155					AllocateSoftString:
.2155	85 0c		sta $0c				sta 	tempShort 					; save count
.2157	98		tya				tya
.2158	48		pha				pha
.2159	a5 7b		lda $7b				lda 	softMemAlloc+1 				; if the high byte is zero, it needs allocating.
.215b	d0 09		bne $2166			bne 	_ASSDone
.215d	a5 0d		lda $0d				lda 	highMemory 					; reset the soft memory alloc pointer.
.215f	85 7a		sta $7a				sta 	softMemAlloc 				; to speed up slightly, we only reset this when we first need it
.2161	a4 0e		ldy $0e				ldy 	highMemory+1 				; but it needs to be reset before each command.
.2163	88		dey				dey
.2164	84 7b		sty $7b				sty 	softMemAlloc+1
.2166					_ASSDone:
.2166	38		sec				sec 								; allocate downwards enough memory
.2167	a5 7a		lda $7a				lda 	softMemAlloc
.2169	e5 0c		sbc $0c				sbc 	tempShort
.216b	85 7a		sta $7a				sta 	softMemAlloc
.216d	a5 7b		lda $7b				lda 	softMemAlloc+1
.216f	e9 00		sbc #$00			sbc 	#0
.2171	85 7b		sta $7b				sta 	softMemAlloc+1
.2173	a9 00		lda #$00			lda 	#0 							; empty that string, set the length = 0.
.2175	a8		tay				tay
.2176	91 7a		sta ($7a),y			sta 	(softMemAlloc),y
.2178	68		pla				pla
.2179	a8		tay				tay
.217a	60		rts				rts
.217b					WriteSoftString:
.217b	84 0c		sty $0c				sty 	tempShort 					; save Y
.217d	48		pha				pha
.217e	a0 00		ldy #$00			ldy 	#0 							; get and bump length
.2180	b1 7a		lda ($7a),y			lda 	(softMemAlloc),y
.2182	18		clc				clc
.2183	69 01		adc #$01			adc 	#1
.2185	91 7a		sta ($7a),y			sta 	(softMemAlloc),y
.2187	a8		tay				tay 								; pointer in Y
.2188	68		pla				pla 								; get char and write.
.2189	91 7a		sta ($7a),y			sta 	(softMemAlloc),y
.218b	a4 0c		ldy $0c				ldy 	tempShort 					; restore Y and exit.
.218d	60		rts				rts
.218e					StrClone:
.218e	aa		tax				tax 								; set up stack.
.218f	98		tya				tya
.2190	48		pha				pha
.2191	a0 00		ldy #$00			ldy 	#0 							; get length, add 1 for length
.2193	b1 04		lda ($04),y			lda 	(temp0),y
.2195	18		clc				clc
.2196	69 01		adc #$01			adc 	#1
.2198	20 55 21	jsr $2155			jsr 	AllocateSoftString 			; allocate soft memory
.219b	a5 7a		lda $7a				lda 	softMemAlloc 				; copy that address to TOS
.219d	95 48		sta $48,x			sta 	esInt0,x
.219f	a5 7b		lda $7b				lda 	softMemAlloc+1
.21a1	95 50		sta $50,x			sta 	esInt1,x
.21a3	a9 00		lda #$00			lda 	#0
.21a5	95 58		sta $58,x			sta 	esInt2,x
.21a7	95 60		sta $60,x			sta 	esInt3,x
.21a9	a9 40		lda #$40			lda 	#$40 						; set type to string.
.21ab	95 40		sta $40,x			sta 	esType,x
.21ad	20 36 21	jsr $2136			jsr 	SCCopyTemp0 				; copy temp0 string to soft memory copy (concat.asm)
.21b0	68		pla				pla
.21b1	a8		tay				tay
.21b2	8a		txa				txa
.21b3	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/substring.asm

.21b4					StringSubstring:
.21b4	48		pha				pha
.21b5	aa		tax				tax 								; access stack.
.21b6	98		tya				tya
.21b7	48		pha				pha
.21b8	20 fd 20	jsr $20fd			jsr 	CopyStringTop 				; point temp0 to the string.
.21bb	a0 00		ldy #$00			ldy 	#0 							; get length.
.21bd	b1 04		lda ($04),y			lda 	(temp0),Y
.21bf	85 06		sta $06				sta 	temp1
.21c1	b5 49		lda $49,x			lda 	esInt0+1,x 					; get the initial offset
.21c3	c5 06		cmp $06				cmp 	temp1 						;
.21c5	f0 02		beq $21c9			beq 	_SSBOkay
.21c7	b0 2a		bcs $21f3			bcs 	_SSBReturnNull
.21c9					_SSBOkay:
.21c9	a5 06		lda $06				lda 	temp1 						; get the total length +1
.21cb	18		clc				clc
.21cc	69 01		adc #$01			adc 	#1
.21ce	38		sec				sec
.21cf	f5 49		sbc $49,x			sbc 	esInt0+1,x 					; the anything >= this is bad.
.21d1	d5 4a		cmp $4a,x			cmp 	esInt0+2,x  				; check bad >= required
.21d3	90 02		bcc $21d7			bcc		_SSBTrunc
.21d5	b5 4a		lda $4a,x			lda 	esInt0+2,x
.21d7					_SSBTrunc:
.21d7	85 07		sta $07				sta 	temp1+1 					; characters to copy.
.21d9	18		clc				clc
.21da	69 01		adc #$01			adc 	#1 							; add 1
.21dc	20 55 21	jsr $2155			jsr 	AllocateSoftString 			; allocate soft string memory, set pointer.
.21df	20 4c 21	jsr $214c			jsr 	CopySoftToStack 			; copy that to the stack.
.21e2	b4 49		ldy $49,x			ldy 	esInt0+1,x 					; get initial position of char to copy
.21e4					_SSBCopyLoop:
.21e4	a5 07		lda $07				lda 	temp1+1 					; done them all
.21e6	f0 0e		beq $21f6			beq 	_SSBExit
.21e8	c6 07		dec $07				dec 	temp1+1
.21ea	b1 04		lda ($04),y			lda 	(temp0),y 					; get and write character
.21ec	20 7b 21	jsr $217b			jsr 	WriteSoftString
.21ef	c8		iny				iny
.21f0	4c e4 21	jmp $21e4			jmp 	_SSBCopyLoop
.21f3					_SSBReturnNull:
.21f3	20 fa 21	jsr $21fa			jsr 	ReturnNull
.21f6					_SSBExit:
.21f6	68		pla				pla
.21f7	a8		tay				tay
.21f8	68		pla				pla
.21f9	60		rts				rts
.21fa					ReturnNull:
.21fa	a9 00		lda #$00			lda 	#0 							; clear null string
.21fc	8d cc 0a	sta $0acc			sta 	NullString
.21ff	a9 cc		lda #$cc			lda 	#NullString & $FF 			; set a pointer to it
.2201	95 48		sta $48,x			sta 	esInt0,x
.2203	a9 0a		lda #$0a			lda 	#NullString >> 8
.2205	95 50		sta $50,x			sta 	esInt1,x
.2207	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/write.asm

.0afb					srcStrLen:
>0afb							.fill 	1
.2208					StringWrite:
.2208	aa		tax				tax
.2209	48		pha				pha
.220a	98		tya				tya
.220b	48		pha				pha
.220c	20 33 22	jsr $2233			jsr 	CheckOverwriteCurrent
.220f	b0 0d		bcs $221e			bcs		_SWCopyCurrent
.2211	20 71 22	jsr $2271			jsr 	RequiresConcretion
.2214	90 0e		bcc $2224			bcc 	_SWWriteReference
.2216	20 d4 22	jsr $22d4			jsr 	CheckSpecialConcretion
.2219	b0 09		bcs $2224			bcs 	_SWWriteReference
.221b	20 85 22	jsr $2285			jsr 	AllocateHardMemory
.221e					_SWCopyCurrent:
.221e	20 b8 22	jsr $22b8			jsr 	CopyStringToHardMemory
.2221	4c 2f 22	jmp $222f			jmp 	_SWExit
.2224					_SWWriteReference
.2224	a0 00		ldy #$00			ldy 	#0
.2226	a5 04		lda $04				lda 	temp0
.2228	91 06		sta ($06),y			sta 	(temp1),y
.222a	c8		iny				iny
.222b	a5 05		lda $05				lda 	temp0+1
.222d	91 06		sta ($06),y			sta 	(temp1),y
.222f					_SWExit:
.222f	68		pla				pla
.2230	a8		tay				tay
.2231	68		pla				pla
.2232	60		rts				rts
.2233					CheckOverwriteCurrent:
.2233	a0 00		ldy #$00			ldy 	#0 						; get address of string being written to temp0
.2235	b5 51		lda $51,x			lda 	esInt1+1,x
.2237	85 05		sta $05				sta 	temp0+1
.2239	b5 49		lda $49,x			lda 	esInt0+1,x
.223b	85 04		sta $04				sta 	temp0
.223d	b1 04		lda ($04),y			lda 	(temp0),y 				; get length of string being copied.
.223f	8d fb 0a	sta $0afb			sta 	srcStrLen
.2242	b5 48		lda $48,x			lda 	esInt0,x 				; copy where the final address it being written to temp1.
.2244	85 06		sta $06				sta 	temp1 					; e.g. if it is ax$ then temp1 will point to the ax$
.2246	b5 50		lda $50,x			lda 	esInt1,x 				; data record + 5
.2248	85 07		sta $07				sta 	temp1+1
.224a	a0 01		ldy #$01			ldy 	#1 						; get the MSB of the address of string currently stored there.
.224c	b1 06		lda ($06),y			lda 	(temp1),y
.224e	c5 0e		cmp $0e				cmp 	highMemory+1 			; if < high memory then it cannot be something stored
.2250	90 1b		bcc $226d			bcc 	_COCFail 				; in hard memory.
.2252	a0 00		ldy #$00			ldy 	#0 						; copy target address - 1 into temp2
.2254	b1 06		lda ($06),y			lda 	(temp1),y
.2256	e9 01		sbc #$01			sbc 	#1
.2258	85 08		sta $08				sta 	temp2
.225a	c8		iny				iny
.225b	b1 06		lda ($06),y			lda 	(temp1),y
.225d	e9 00		sbc #$00			sbc 	#0
.225f	85 09		sta $09				sta 	temp2+1
.2261	a0 00		ldy #$00			ldy 	#0 						; how large is this physical chunk.
.2263	b1 08		lda ($08),y			lda 	(temp2),y
.2265	38		sec				sec  							; maximum character capacity.
.2266	e9 02		sbc #$02			sbc 	#2
.2268	cd fb 0a	cmp $0afb			cmp 	srcStrLen 				; if >= the required length
.226b	b0 02		bcs $226f			bcs 	_COCCanReuse
.226d					_COCFail:
.226d	18		clc				clc
.226e	60		rts				rts
.226f					_COCCanReuse:
.226f	38		sec				sec
.2270	60		rts				rts
.2271					RequiresConcretion:
.2271	a5 05		lda $05				lda 	temp0+1 				; get MSB of address of string to be written
.2273	c5 0e		cmp $0e				cmp 	highMemory+1 			; if >= high memory it is concreted
.2275	b0 0a		bcs $2281			bcs 	_RCSucceed 				; so it needs concreting again - duplication.
.2277	a5 7b		lda $7b				lda 	softMemAlloc+1 			; have we allocated any soft memory yet ?
.2279	f0 08		beq $2283			beq 	_RCFail 				; if not, this cannot be soft memory.
.227b	a5 05		lda $05				lda 	temp0+1 				; get MSB of address of string to be written
.227d	c5 7b		cmp $7b				cmp 	softMemAlloc+1 			; if >= soft mem alloc it is either soft
.227f	90 02		bcc $2283			bcc 	_RCFail 				; so concreting
.2281					_RCSucceed:
.2281	38		sec				sec
.2282	60		rts				rts
.2283					_RCFail:
.2283	18		clc				clc
.2284	60		rts				rts
.2285					AllocateHardMemory:
.2285	98		tya				tya
.2286	48		pha				pha
.2287	ad fb 0a	lda $0afb			lda 	srcStrLen 				; characters in string
.228a	69 0a		adc #$0a			adc 	#1+1+8 					; one for hard memory size, one for string size, extra for expansion
.228c	b0 04		bcs $2292			bcs 	_AHMSetMax 				; max out that amount.
.228e	c9 fe		cmp #$fe			cmp 	#MaxStringSize+2
.2290	90 02		bcc $2294			bcc 	_AHMIsOkay
.2292					_AHMSetMax:
.2292	a9 fe		lda #$fe			lda 	#MaxStringSize+2
.2294					_AHMIsOkay:
.2294	48		pha				pha
.2295	49 ff		eor #$ff			eor 	#$FF 					; complement and add to high Memory
.2297	38		sec				sec  							; and copy result to TOS as target address.
.2298	65 0d		adc $0d				adc 	highMemory
.229a	85 0d		sta $0d				sta 	highMemory
.229c	a5 0e		lda $0e				lda 	highMemory+1
.229e	69 ff		adc #$ff			adc 	#$FF
.22a0	85 0e		sta $0e				sta 	highMemory+1
.22a2	a0 00		ldy #$00			ldy 	#0 						; Y = 0
.22a4	68		pla				pla 							; get the total size of the storage block
.22a5	91 0d		sta ($0d),y			sta 	(highMemory),y
.22a7	18		clc				clc
.22a8	a5 0d		lda $0d				lda		highMemory 				; point the target address to the byte after this.
.22aa	69 01		adc #$01			adc 	#1
.22ac	91 06		sta ($06),y			sta 	(temp1),y
.22ae	a5 0e		lda $0e				lda 	highMemory+1
.22b0	69 00		adc #$00			adc 	#0
.22b2	c8		iny				iny
.22b3	91 06		sta ($06),y			sta 	(temp1),y
.22b5	68		pla				pla
.22b6	a8		tay				tay
.22b7	60		rts				rts
.22b8					CopyStringToHardMemory:
.22b8	98		tya				tya
.22b9	48		pha				pha
.22ba	a0 00		ldy #$00			ldy 	#0 						; copy target address to temp2
.22bc	b1 06		lda ($06),y			lda 	(temp1),y
.22be	85 08		sta $08				sta 	temp2
.22c0	c8		iny				iny
.22c1	b1 06		lda ($06),y			lda 	(temp1),y
.22c3	85 09		sta $09				sta 	temp2+1
.22c5	ac fb 0a	ldy $0afb			ldy 	srcStrLen 				; copy this + 1 characters, (length too) hence $FF compare
.22c8					_CSTHMLoop:
.22c8	b1 04		lda ($04),y			lda 	(temp0),y
.22ca	91 08		sta ($08),y			sta 	(temp2),y
.22cc	88		dey				dey
.22cd	c0 ff		cpy #$ff			cpy 	#$FF
.22cf	d0 f7		bne $22c8			bne 	_CSTHMLoop
.22d1	68		pla				pla
.22d2	a8		tay				tay
.22d3	60		rts				rts
.22d4					CheckSpecialConcretion:
.22d4	ad fb 0a	lda $0afb			lda 	srcStrLen 				; check string is null.
.22d7	f0 02		beq $22db			beq 	_CSCNullString
.22d9	18		clc				clc
.22da	60		rts				rts
.22db					_CSCNullString:
.22db	a9 00		lda #$00			lda 	#0
.22dd	8d cc 0a	sta $0acc			sta 	NullString
.22e0	a9 cc		lda #$cc			lda 	#(NullString) & $FF
.22e2	85 04		sta $04				sta 	temp0
.22e4	a9 0a		lda #$0a			lda 	#(NullString) >> 8
.22e6	85 05		sta $05				sta 	1+(temp0)
.22e8	38		sec				sec
.22e9	60		rts				rts

;******  Return to file: string/string.asm

.22ea					stringHandler:
.22ea	7c ed 22	jmp ($22ed,x)			jmp 	(stringVectors,x)
.22ed					stringVectors:
>22ed	9b 20					.word StringChrs           ; index 0
>22ef	8e 21					.word StrClone             ; index 2
>22f1	06 21					.word StringConcat         ; index 4
>22f3	bd 20					.word STRCompare           ; index 6
>22f5	b4 21					.word StringSubstring      ; index 8
>22f7	08 22					.word StringWrite          ; index 10

;******  Return to file: basic.asm

.22f9					section_end_string:
.22f9					section_start_tokeniser:

;******  Processing file: tokeniser/tokeniser.asm

.22f9					tokeniserHandler:
.22f9	7c fc 22	jmp ($22fc,x)			jmp 	(tokeniserVectors,x)
.22fc					tokeniserVectors:

;******  Return to file: basic.asm

.22fc					section_end_tokeniser:
.22fc					section_start_variable:

;******  Processing file: variable/variable.asm


;******  Processing file: variable/access.asm

.0afc					varHash:
>0afc							.fill	1
.0afd					varType:
>0afd							.fill 	1
.0afe					varEnd:
>0afe							.fill 	1
.007c					hashList:
>007c							.fill 	2
.22fc					AccessVariable:
.22fc	aa		tax				tax 								; stack in X
.22fd	c8		iny				iny
.22fe	b1 02		lda ($02),y			lda 	(codePtr),y
.2300	88		dey				dey
.2301	c9 3a		cmp #$3a			cmp 	#TYPE_INT 					; is it one of the end markers ?
.2303	d0 15		bne $231a			bne 	_AVLong
.2305	b1 02		lda ($02),y			lda 	(codePtr),y 				; this is the 6 bit ASCII of A-Z 1-26
.2307	38		sec				sec 	 							; make it 0-25
.2308	e9 01		sbc #$01			sbc 	#1
.230a	0a		asl a				asl 	a 							; x 4 is LSB of address
.230b	0a		asl a				asl 	a
.230c	95 48		sta $48,x			sta 	esInt0,x
.230e	a9 0a		lda #$0a			lda 	#SingleLetterVar >> 8 		; make it an address
.2310	95 50		sta $50,x			sta 	esInt1,x
.2312	a9 80		lda #$80			lda 	#$80 						; type is integer reference.
.2314	95 40		sta $40,x			sta 	esType,x
.2316	c8		iny				iny 								; skip over the variable reference in the code.
.2317	c8		iny				iny
.2318	8a		txa				txa 								; stack in A to return.
.2319	60		rts				rts
.231a					_AVLong:
.231a	8a		txa				txa
.231b	48		pha				pha
.231c	20 5a 23	jsr $235a			jsr 	AccessSetup 				; set up the basic stuff.
.231f	20 ff 23	jsr $23ff			jsr 	FindVariable 				; does the variable exist already
.2322	b0 0e		bcs $2332			bcs 	_AVFound
.2324	ad fd 0a	lda $0afd			lda 	varType 					; is the variable type an array
.2327	4a		lsr a				lsr 	a
.2328	90 05		bcc $232f			bcc 	_AVCanCreate
.232a	a2 15		ldx #$15			ldx 	#ErrorID_noauto
.232c	20 8c 20	jsr $208c			jsr 	ErrorHandler
.232f					_AVCanCreate:
.232f	20 97 23	jsr $2397			jsr 	CreateVariable 				; no, create it.
.2332					_AVFound:
.2332	68		pla				pla
.2333	aa		tax				tax
.2334	18		clc				clc 								; copy temp0 (variable record address)
.2335	a5 04		lda $04				lda 	temp0 						; +5 (to point to the data)
.2337	69 05		adc #$05			adc 	#5
.2339	95 48		sta $48,x			sta 	esInt0,x
.233b	a5 05		lda $05				lda 	temp0+1
.233d	69 00		adc #$00			adc 	#0
.233f	95 50		sta $50,x			sta 	esInt1,x
.2341	a9 00		lda #$00			lda 	#0
.2343	95 58		sta $58,x			sta 	esInt2,x
.2345	95 60		sta $60,x			sta 	esInt3,x
.2347	ac fd 0a	ldy $0afd			ldy 	varType 					; get the type ID from the type.
.234a	b9 1a 23	lda $231a,y			lda 	_AVTypeTable-$3A,y
.234d	95 40		sta $40,x			sta 	esType,x
.234f	ac fe 0a	ldy $0afe			ldy 	varEnd 						; restore Y
.2352	8a		txa				txa 								; return stack in A and return
.2353	60		rts				rts
.2354					_AVTypeTable:
>2354	80 80						.byte 	$80,$80						; integer
>2356	c0 c0						.byte 	$C0,$C0 					; string
>2358	81 81						.byte 	$81,$81 					; float
.235a					AccessSetup:
.235a	a9 00		lda #$00			lda 	#0 							; zero the hash byte.
.235c	8d fc 0a	sta $0afc			sta 	varHash
.235f	98		tya				tya
.2360	48		pha				pha
.2361	b1 02		lda ($02),y	_ASLoop:lda 	(codePtr),y					; get next identifier character
.2363	c9 3a		cmp #$3a			cmp 	#$3A 						; is it 3A-3F which end all identifiers ?
.2365	b0 0b		bcs $2372			bcs 	_ASComplete
.2367	18		clc				clc 								; add to the hash. Might improve this.
.2368	6d fc 0a	adc $0afc			adc 	varHash
.236b	8d fc 0a	sta $0afc			sta 	varHash
.236e	c8		iny				iny 								; next character
.236f	4c 61 23	jmp $2361			jmp 	_ASLoop
.2372					_ASComplete:
.2372	8d fd 0a	sta $0afd			sta 	varType 					; save variable type byte
.2375	c8		iny				iny
.2376	8c fe 0a	sty $0afe			sty 	varEnd 						; save the ending position.
.2379	38		sec				sec 								; convert type byte from $3A-$3F to 0..5
.237a	e9 3a		sbc #$3a			sbc 	#$3A
.237c	0a		asl a				asl 	a 							; multiply by hashTableSize (8 in this case)
.237d	0a		asl a				asl 	a
.237e	0a		asl a				asl 	a
.237f	0a		asl a				asl 	a 							; 2 bytes/word
.2380	85 04		sta $04				sta 	temp0 						; this is the offset to the start of the table.
.2382	ad fc 0a	lda $0afc			lda 	varHash 					; get hash
.2385	29 07		and #$07			and 	#(hashTableSize-1)			; force into range
.2387	0a		asl a				asl  	a 							; x 2 (for word) and CC
.2388	65 04		adc $04				adc 	temp0 						; now offset from the start of the hash table.
.238a	69 68		adc #$68			adc 	#hashTables & $FF 			; add to hash table base address
.238c	85 7c		sta $7c				sta 	hashList
.238e	a9 0a		lda #$0a			lda 	#hashTables >> 8
.2390	69 00		adc #$00			adc 	#0
.2392	85 7d		sta $7d				sta 	hashList+1
.2394	68		pla				pla
.2395	a8		tay				tay
.2396	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/create.asm

.2397					CreateVariable:
.2397	98		tya				tya 								; push Y on the stack twice.
.2398	48		pha				pha
.2399	48		pha				pha
.239a	ae fd 0a	ldx $0afd			ldx 	varType 					; get var type 0-5
.239d	bd bf 23	lda $23bf,x			lda		_CVSize-$3A,x 				; the bytes for this new variable.
.23a0	48		pha				pha 								; save length
.23a1	a8		tay				tay 								; put into Y.
.23a2	a5 0f		lda $0f				lda 	lowMemory 					; set low Memory ptr to temp0
.23a4	85 04		sta $04				sta 	temp0
.23a6	a5 10		lda $10				lda 	lowMemory+1
.23a8	85 05		sta $05				sta 	temp0+1
.23aa	68		pla				pla 								; get length
.23ab	20 6b 10	jsr $106b			jsr 	AdvanceLowMemoryByte 		; shift alloc memory forward by the length.
.23ae					_CVClear:
.23ae	88		dey				dey
.23af	a9 00		lda #$00			lda 	#0
.23b1	91 04		sta ($04),y			sta 	(temp0),y
.23b3	c0 04		cpy #$04			cpy 	#4
.23b5	d0 f7		bne $23ae			bne 	_CVClear
.23b7	ad fc 0a	lda $0afc			lda 	varHash 					; store hash at offset 4.
.23ba	91 04		sta ($04),y			sta 	(temp0),y
.23bc	68		pla				pla 								; offset, work out where the variable name is.
.23bd	18		clc				clc
.23be	65 02		adc $02				adc 	codePtr
.23c0	a0 02		ldy #$02			ldy 	#2 							; copy that into slots 2 + 3.
.23c2	91 04		sta ($04),y			sta 	(temp0),y
.23c4	a5 03		lda $03				lda 	codePtr+1
.23c6	69 00		adc #$00			adc 	#0
.23c8	c8		iny				iny
.23c9	91 04		sta ($04),y			sta 	(temp0),y
.23cb	a0 00		ldy #$00			ldy 	#0 							; copy current hash pointer in link
.23cd	b1 7c		lda ($7c),y			lda 	(hashList),y
.23cf	91 04		sta ($04),y			sta 	(temp0),y
.23d1	c8		iny				iny
.23d2	b1 7c		lda ($7c),y			lda 	(hashList),y
.23d4	91 04		sta ($04),y			sta 	(temp0),y
.23d6	a5 05		lda $05				lda 	temp0+1 					; set new link
.23d8	91 7c		sta ($7c),y			sta 	(hashList),y
.23da	88		dey				dey
.23db	a5 04		lda $04				lda 	temp0
.23dd	91 7c		sta ($7c),y			sta 	(hashList),y
.23df	ad fd 0a	lda $0afd			lda 	varType 					; is it a string ($3C)
.23e2	c9 3c		cmp #$3c			cmp 	#$3C
.23e4	d0 10		bne $23f6			bne 	_CVNoDefaultNull
.23e6	a9 00		lda #$00			lda 	#0 							; put a reference to null string as the default value.
.23e8	8d cc 0a	sta $0acc			sta 	NullString
.23eb	a0 05		ldy #$05			ldy 	#5
.23ed	a9 cc		lda #$cc			lda 	#NullString & $FF
.23ef	91 04		sta ($04),y			sta 	(temp0),y
.23f1	a9 0a		lda #$0a			lda 	#NullString >> 8
.23f3	c8		iny				iny
.23f4	91 04		sta ($04),y			sta 	(temp0),y
.23f6					_CVNoDefaultNull:
.23f6	68		pla				pla
.23f7	a8		tay				tay
.23f8	60		rts				rts
>23f9	09 09				_CVSize:.byte 	VarHSize+VarISize,VarHSize+VarISize 					; <storage for integer>
>23fb	07 07						.byte 	VarHSize+VarSSize,VarHSize+VarSSize 					; <storage for string>
>23fd	0b 0b						.byte 	VarHSize+VarFSize,VarHSize+VarFSize 					; <storage for float>

;******  Return to file: variable/variable.asm


;******  Processing file: variable/find.asm

.23ff					FindVariable:
.23ff	98		tya				tya
.2400	48		pha				pha
.2401	98		tya				tya 								; point temp2 to the actual name.
.2402	18		clc				clc
.2403	65 02		adc $02				adc 	codePtr
.2405	85 08		sta $08				sta 	temp2
.2407	a5 03		lda $03				lda 	codePtr+1
.2409	69 00		adc #$00			adc 	#0
.240b	85 09		sta $09				sta 	temp2+1
.240d	a0 00		ldy #$00			ldy 	#0
.240f	a5 7c		lda $7c				lda 	hashList 					; copy hashlist to temp0
.2411	85 04		sta $04				sta 	temp0
.2413	a5 7d		lda $7d				lda 	hashList+1
.2415	85 05		sta $05				sta 	temp0+1
.2417	a0 01		ldy #$01	_FVNext:ldy 	#1 							; get MSB
.2419	b1 04		lda ($04),y			lda 	(temp0),y
.241b	f0 2c		beq $2449			beq 	_FVFail
.241d	aa		tax				tax
.241e	88		dey				dey		 							; get LSB
.241f	b1 04		lda ($04),y			lda 	(temp0),y
.2421	85 04		sta $04				sta 	temp0 						; update pointer.
.2423	86 05		stx $05				stx 	temp0+1
.2425	a0 04		ldy #$04			ldy 	#4 							; check hashes match
.2427	b1 04		lda ($04),y			lda 	(temp0),y
.2429	cd fc 0a	cmp $0afc			cmp 	varHash
.242c	d0 e9		bne $2417			bne 	_FVNext 					; if not, no point in checking the name.
.242e	88		dey				dey 								; copy name pointer to temp1.
.242f	b1 04		lda ($04),y			lda 	(temp0),y
.2431	85 07		sta $07				sta 	temp1+1
.2433	88		dey				dey
.2434	b1 04		lda ($04),y			lda 	(temp0),y
.2436	85 06		sta $06				sta 	temp1
.2438	a0 00		ldy #$00			ldy 	#0
.243a					_FVCheck:
.243a	b1 06		lda ($06),y			lda 	(temp1),y 					; compare names
.243c	d1 08		cmp ($08),y			cmp 	(temp2),y
.243e	d0 d7		bne $2417			bne 	_FVNext		 				; fail if different.
.2440	c8		iny				iny
.2441	c9 3a		cmp #$3a			cmp 	#$3A 						; until reached the end marker.
.2443	90 f5		bcc $243a			bcc 	_FVCheck
.2445	68		pla				pla
.2446	a8		tay				tay
.2447	38		sec				sec
.2448	60		rts				rts
.2449					_FVFail:
.2449	68		pla				pla
.244a	a8		tay				tay
.244b	18		clc				clc
.244c	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/reset.asm

.244d					HashTableReset:
.244d	a2 60		ldx #$60			ldx 	#6*2*hashTableSize
.244f	a9 00		lda #$00			lda 	#0
.2451					_HTRClear:
.2451	9d 67 0a	sta $0a67,x			sta 	hashTables-1,x
.2454	ca		dex				dex
.2455	d0 fa		bne $2451			bne 	_HTRClear
.2457	60		rts				rts

;******  Return to file: variable/variable.asm

.2458					variableHandler:
.2458	7c 5b 24	jmp ($245b,x)			jmp 	(variableVectors,x)
.245b					variableVectors:
>245b	fc 22					.word AccessVariable       ; index 0
>245d	4d 24					.word HashTableReset       ; index 2

;******  Return to file: basic.asm

.245f					section_end_variable:

;******  End of listing
