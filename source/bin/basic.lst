
; 64tass Turbo Assembler Macro V1.55.2200 listing file
; 64tass -D autorun=1 -D coldstartnew=0 -Walias -Wmacro-prefix -Wall -q -c -L ../source/bin/basic.lst -l ../source/bin/basic.lbl -Wall -o ../source/bin/stub.prg basic.asm
; Tue Mar 30 09:34:16 2021

;Offset	;Hex		;Monitor	;Source

;******  Command line definitions

=1					autorun=1
=0					coldstartnew=0

;******  Processing input file: basic.asm


;******  Processing file: header/01common.inc


;******  Processing file: header/../generated/installed.inc

=1					installed_header = 1
=1					installed_main = 1
=1					installed_variable = 1
=1					installed_assembler = 1
=1					installed_error = 1
=1					installed_extension = 1
=1					installed_string = 1
=1					installed_device = 1
=0					installed_floatingpoint = 0
=1					installed_interaction = 1
=1					installed_tokeniser = 1
=1					installed_footer = 1

;******  Return to file: header/01common.inc

=$1000					CodeStart = $1000
=$800					MemoryStorage = $800
=$9f00					EndOfMemory = $9F00
=$28					ZeroPageStorage = $28
=$48					StackAddress = $48
=8					StackSize = 8
=2					retStackSizePages = 2
=8					hashTableSize = 8			; if this changes, the calculation is AccessSetup has to match it.
="G"					markerGOSUB = 'G'
="R"					markerREPEAT = 'R'
="F"					markerFOR = 'F'
="W"					markerWHILE = 'W'
="P"					markerPROC = 'P'
="$"					markerSTRING = '$'
="#"					markerFLOAT = '#'
="%"					markerINT = '%'
=5					VarHSize = 5 								; header (2 link, 2 name, 1 hash)
=2					VarASize = 2 								; array [address of first level]
=4					VarISize = 4 								; integer (32 bit)
=6					VarFSize = 6 								; float (4 mantissa, 1 exponent 1 sign/zero)
=2					VarSSize = 2 								; address (2 bytes)

;******  Return to file: basic.asm


;******  Processing file: header/02macros.inc


;******  Return to file: basic.asm


;******  Processing file: header/03data.inc

>0028					codePtr:.fill 	2							; (codePtr),y points to code.
>002a					temp0: 	.fill 	2							; working variables.
>002c					temp1: 	.fill 	2
>002e					temp2: 	.fill 	2
>0030					temp3: 	.fill 	2
.0032					tempshort:
>0032							.fill 	1
.0033					highMemory:
>0033							.fill 	2
.0035					lowMemory:
>0035							.fill 	2
>0800							.align	256
.0800					returnStack:
>0800							.fill 	retStackSizePages * 256
=512					retStackSize = retStackSizePages * 256
.0a00					SingleLetterVar:
>0a00					 		.fill 	26*4
.0a68					currentStorage:
>0048					esType:	.fill 	StackSize  					; type byte (see above)
>0050					esInt0:	.fill 	StackSize 					; integer or mantissa
>0058					esInt1:	.fill 	StackSize
>0060					esInt2:	.fill 	StackSize
>0068					esInt3:	.fill 	StackSize
>0070					esExp:	.fill 	StackSize 					; exponent ($80 = 0)
>0078					esZSign:.fill 	StackSize 					; for floating point - sign (bit 7) isZero (bit 6)
.0080					endOfStack:
=$50					esMant0 = esInt0 							; synonyms.
=$58					esMant1 = esInt1
=$60					esMant2 = esInt2
=$68					esMant3 = esInt3
.0a68					hashTables:
>0a68							.fill 	6*2*hashTableSize
.0ac8					basePage:
>0ac8							.fill 	2
.0aca					endProgram:
>0aca							.fill 	2
.0acc					endMemory:
>0acc							.fill 	2
.0ace					NullString:
>0ace							.fill 	1							; don't waste memory concreting null strings.
.0acf					convertBuffer:
>0acf							.fill 	35

;******  Processing file: header/../generated/tokenconst.inc

=$80					TOK_EOL=$80
=$81					TOK_SHIFT1=$81
=$82					TOK_SHIFT2=$82
=$83					TOK_SHIFT3=$83
=$84					TOK_FPC=$84
=$85					TOK_STR=$85
=$86					TOK_BINARYST=$86
=$99					TOK_STRUCTST=$99
=$a4					TOK_UNARYST=$a4
=$c9					TOK_TOKENS=$c9
=$86					TKW_AND                      = $86 ; and
=$87					TKW_OR                       = $87 ; or
=$88					TKW_XOR                      = $88 ; xor
=$89					TKW_GREATEREQUAL             = $89 ; >=
=$8a					TKW_LESSEQUAL                = $8a ; <=
=$8b					TKW_GREATER                  = $8b ; >
=$8c					TKW_LESS                     = $8c ; <
=$8d					TKW_EQUAL                    = $8d ; =
=$8e					TKW_LESSGREATER              = $8e ; <>
=$8f					TKW_PLUS                     = $8f ; +
=$90					TKW_MINUS                    = $90 ; -
=$91					TKW_GREATERGREATER           = $91 ; >>
=$92					TKW_LESSLESS                 = $92 ; <<
=$93					TKW_STAR                     = $93 ; *
=$94					TKW_SLASH                    = $94 ; /
=$95					TKW_MOD                      = $95 ; mod
=$96					TKW_HAT                      = $96 ; ^
=$97					TKW_PLING                    = $97 ; !
=$98					TKW_QMARK                    = $98 ; ?
=$99					TKW_REPEAT                   = $99 ; repeat
=$9a					TKW_WHILE                    = $9a ; while
=$9b					TKW_FOR                      = $9b ; for
=$9c					TKW_IF                       = $9c ; if
=$9d					TKW_DEFPROC                  = $9d ; defproc
=$9e					TKW_UNTIL                    = $9e ; until
=$9f					TKW_WEND                     = $9f ; wend
=$a0					TKW_NEXT                     = $a0 ; next
=$a1					TKW_THEN                     = $a1 ; then
=$a2					TKW_ENDIF                    = $a2 ; endif
=$a3					TKW_ENDPROC                  = $a3 ; endproc
=$a4					TKW_LPAREN                   = $a4 ; (
=$a5					TKW_LENLPAREN                = $a5 ; len(
=$a6					TKW_SGNLPAREN                = $a6 ; sgn(
=$a7					TKW_ABSLPAREN                = $a7 ; abs(
=$a8					TKW_RANDOMLPAREN             = $a8 ; random(
=$a9					TKW_PAGE                     = $a9 ; page
=$aa					TKW_TRUE                     = $aa ; true
=$ab					TKW_FALSE                    = $ab ; false
=$ac					TKW_MINLPAREN                = $ac ; min(
=$ad					TKW_MAXLPAREN                = $ad ; max(
=$ae					TKW_SYSLPAREN                = $ae ; sys(
=$af					TKW_TIMERLPAREN              = $af ; timer(
=$b0					TKW_EVENTLPAREN              = $b0 ; event(
=$b1					TKW_GETLPAREN                = $b1 ; get(
=$b2					TKW_INKEYLPAREN              = $b2 ; inkey(
=$b3					TKW_ALLOCLPAREN              = $b3 ; alloc(
=$b4					TKW_CHRDOLLARLPAREN          = $b4 ; chr$(
=$b5					TKW_LEFTDOLLARLPAREN         = $b5 ; left$(
=$b6					TKW_MIDDOLLARLPAREN          = $b6 ; mid$(
=$b7					TKW_RIGHTDOLLARLPAREN        = $b7 ; right$(
=$b8					TKW_STRDOLLARLPAREN          = $b8 ; str$(
=$b9					TKW_VALLPAREN                = $b9 ; val(
=$ba					TKW_PEEKLPAREN               = $ba ; peek(
=$bb					TKW_DEEKLPAREN               = $bb ; deek(
=$bc					TKW_LEEKLPAREN               = $bc ; leek(
=$bd					TKW_ASCLPAREN                = $bd ; asc(
=$be					TKW_INTLPAREN                = $be ; int(
=$bf					TKW_FLOATLPAREN              = $bf ; float(
=$c0					TKW_ISVALLPAREN              = $c0 ; isval(
=$c1					TKW_UPPERDOLLARLPAREN        = $c1 ; upper$(
=$c2					TKW_LOWERDOLLARLPAREN        = $c2 ; lower$(
=$c3					TKW_ATC                      = $c3 ; @
=$c4					TKW_WAVY                     = $c4 ; ~
=$c5					TKW_AMP                      = $c5 ; &
=$c6					TKW_GETDOLLARLPAREN          = $c6 ; get$(
=$c7					TKW_INKEYDOLLARLPAREN        = $c7 ; inkey$(
=$c8					TKW_MEM                      = $c8 ; mem
=$c9					TKW_RPAREN                   = $c9 ; )
=$ca					TKW_COLON                    = $ca ; :
=$cb					TKW_COMMA                    = $cb ; ,
=$cc					TKW_SEMICOLON                = $cc ; ;
=$cd					TKW_QUOTE                    = $cd ; '
=$ce					TKW_TO                       = $ce ; to
=$cf					TKW_STEP                     = $cf ; step
=$d0					TKW_PROC                     = $d0 ; proc
=$d1					TKW_LOCAL                    = $d1 ; local
=$d2					TKW_DIM                      = $d2 ; dim
=$d3					TKW_REM                      = $d3 ; rem
=$d4					TKW_LET                      = $d4 ; let
=$d5					TKW_INPUT                    = $d5 ; input
=$d6					TKW_ELSE                     = $d6 ; else
=$d7					TKW_VDU                      = $d7 ; vdu
=$d8					TKW_PRINT                    = $d8 ; print
=$d9					TKW_DATA                     = $d9 ; data
=$da					TKW_IMAGE                    = $da ; image
=$db					TKW_AT                       = $db ; at
=$dc					TKW_FLIP                     = $dc ; flip
=$dd					TKW_ASSERT                   = $dd ; assert
=$de					TKW_POKE                     = $de ; poke
=$df					TKW_DOKE                     = $df ; doke
=$e0					TKW_LOKE                     = $e0 ; loke
=$e1					TKW_INK                      = $e1 ; ink
=$e2					TKW_PAPER                    = $e2 ; paper
=$e3					TKW_CLS                      = $e3 ; cls
=$e4					TKW_LOCATE                   = $e4 ; locate
=$e5					TKW_PERIOD                   = $e5 ; .
=$e6					TKW_HASH                     = $e6 ; #
=$e7					TKW_CLEAR                    = $e7 ; clear
=$86					TKW_LOAD                     = $86 ; load
=$87					TKW_SAVE                     = $87 ; save
=$88					TKW_LIST                     = $88 ; list
=$89					TKW_NEW                      = $89 ; new
=$8a					TKW_BREAK                    = $8a ; break
=$8b					TKW_RUN                      = $8b ; run
=$8c					TKW_READ                     = $8c ; read
=$8d					TKW_RESTORE                  = $8d ; restore
=$8e					TKW_END                      = $8e ; end
=$8f					TKW_STOP                     = $8f ; stop
=$90					TKW_XEMU                     = $90 ; xemu
=$91					TKW_GOTO                     = $91 ; goto
=$92					TKW_GOSUB                    = $92 ; gosub
=$93					TKW_RETURN                   = $93 ; return
=$94					TKW_ORA                      = $94 ; ora
=$95					TKW_LPARENANDRPAREN          = $95 ; (and)
=$96					TKW_EOR                      = $96 ; eor
=$97					TKW_ADC                      = $97 ; adc
=$98					TKW_STA                      = $98 ; sta
=$99					TKW_LDA                      = $99 ; lda
=$9a					TKW_CMP                      = $9a ; cmp
=$9b					TKW_SBC                      = $9b ; sbc
=$9c					TKW_ASL                      = $9c ; asl
=$9d					TKW_ROL                      = $9d ; rol
=$9e					TKW_LSR                      = $9e ; lsr
=$9f					TKW_ROR                      = $9f ; ror
=$a0					TKW_STX                      = $a0 ; stx
=$a1					TKW_LDX                      = $a1 ; ldx
=$a2					TKW_DEC                      = $a2 ; dec
=$a3					TKW_INC                      = $a3 ; inc
=$a4					TKW_STZ                      = $a4 ; stz
=$a5					TKW_BIT                      = $a5 ; bit
=$a6					TKW_STY                      = $a6 ; sty
=$a7					TKW_LDY                      = $a7 ; ldy
=$a8					TKW_CPY                      = $a8 ; cpy
=$a9					TKW_CPX                      = $a9 ; cpx
=$aa					TKW_TSB                      = $aa ; tsb
=$ab					TKW_TRB                      = $ab ; trb
=$ac					TKW_JSR                      = $ac ; jsr
=$ad					TKW_JMP                      = $ad ; jmp
=$ae					TKW_BPL                      = $ae ; bpl
=$af					TKW_BMI                      = $af ; bmi
=$b0					TKW_BVC                      = $b0 ; bvc
=$b1					TKW_BVS                      = $b1 ; bvs
=$b2					TKW_BCC                      = $b2 ; bcc
=$b3					TKW_BCS                      = $b3 ; bcs
=$b4					TKW_BNE                      = $b4 ; bne
=$b5					TKW_BEQ                      = $b5 ; beq
=$b6					TKW_BRA                      = $b6 ; bra
=$b7					TKW_BRK                      = $b7 ; brk
=$b8					TKW_PHP                      = $b8 ; php
=$b9					TKW_CLC                      = $b9 ; clc
=$ba					TKW_PLP                      = $ba ; plp
=$bb					TKW_SEC                      = $bb ; sec
=$bc					TKW_RTI                      = $bc ; rti
=$bd					TKW_PHA                      = $bd ; pha
=$be					TKW_CLI                      = $be ; cli
=$bf					TKW_PHY                      = $bf ; phy
=$c0					TKW_RTS                      = $c0 ; rts
=$c1					TKW_PLA                      = $c1 ; pla
=$c2					TKW_SEI                      = $c2 ; sei
=$c3					TKW_PLY                      = $c3 ; ply
=$c4					TKW_DEY                      = $c4 ; dey
=$c5					TKW_TXA                      = $c5 ; txa
=$c6					TKW_TYA                      = $c6 ; tya
=$c7					TKW_TXS                      = $c7 ; txs
=$c8					TKW_TAY                      = $c8 ; tay
=$c9					TKW_TAX                      = $c9 ; tax
=$ca					TKW_CLV                      = $ca ; clv
=$cb					TKW_TSX                      = $cb ; tsx
=$cc					TKW_INY                      = $cc ; iny
=$cd					TKW_DEX                      = $cd ; dex
=$ce					TKW_CLD                      = $ce ; cld
=$cf					TKW_PHX                      = $cf ; phx
=$d0					TKW_INX                      = $d0 ; inx
=$d1					TKW_NOP                      = $d1 ; nop
=$d2					TKW_SED                      = $d2 ; sed
=$d3					TKW_PLX                      = $d3 ; plx
=$86					TKW_VPOKE                    = $86 ; vpoke
=$87					TKW_VDOKE                    = $87 ; vdoke
=$88					TKW_VLOAD                    = $88 ; vload
=$89					TKW_MODE                     = $89 ; mode
=$8a					TKW_PALETTE                  = $8a ; palette
=$8b					TKW_SPRITE                   = $8b ; sprite
=$86					TKW_VPEEKLPAREN              = $86 ; vpeek(
=$87					TKW_VDEEKLPAREN              = $87 ; vdeek(
=$88					TKW_SPRITEPERIODXLPAREN      = $88 ; sprite.x(
=$89					TKW_SPRITEPERIODYLPAREN      = $89 ; sprite.y(
=$8a					TKW_HITLPAREN                = $8a ; hit(
=$8b					TKW_JOYPERIODXLPAREN         = $8b ; joy.x(
=$8c					TKW_JOYPERIODYLPAREN         = $8c ; joy.y(
=$8d					TKW_JOYPERIODBLPAREN         = $8d ; joy.b(
=$8e					TKW_CLOCKLPAREN              = $8e ; clock(

;******  Return to file: header/03data.inc

=$3a					TYPE_INT =		($3A) 						; type bytes that end identifier.
=$3b					TYPE_INTARRAY =	($3B)
=$3c					TYPE_STR =		($3C)
=$3d					TYPE_STRARRAY =	($3D)
=$3e					TYPE_FLOAT =	($3E)
=$3f					TYPE_FLOATARRAY=($3F)

;******  Processing file: header/../generated/asmconst.inc

=$94					TKA_GROUP1 = $94
=$9c					TKA_GROUP2 = $9c
=$ae					TKA_GROUP3 = $ae
=$b7					TKA_GROUP4 = $b7
=$d4					TKA_END4 = $d4

;******  Return to file: header/03data.inc


;******  Return to file: basic.asm


;******  Processing file: header/header.inc


;******  Return to file: basic.asm


;******  Processing file: assembler/asmconst.inc

=0					AMD_IMM		= 0					; Immediate mode.
=1					AMD_ZERO 	= 1					; Zero Page
=2					AMD_ACCIMP	= 2					; Accumulator/Implied
=3					AMD_ABS 	= 3					; Absolute
=4					AMD_ZEROINDY= 4					; Zero Indirect,Y
=5					AMD_ZEROX 	= 5					; Zero Page,X
=6					AMD_ABSY 	= 6					; Absolute,Y
=7					AMD_ABSX 	= 7					; Absolute,X
=8					AMD_ZEROIND = 8					; Zero Indirect
=9					AMD_ZEROY 	= 9					; Zero Page,Y
=10					AMD_ABSIND 	= 10				; Absolute Indirect
=11					AMD_ABSINDX	= 11				; Absolute Indirect Indexed
=12					AMD_REL		= 12				; Relative
=13					AMD_ZEROINDX= 13 				; Zero Indirect,X

;******  Return to file: basic.asm


;******  Processing file: assembler/assembler.inc


;******  Return to file: basic.asm


;******  Processing file: device/device.inc


;******  Return to file: basic.asm


;******  Processing file: error/error.inc


;******  Return to file: basic.asm


;******  Processing file: error/errorhandler.inc


;******  Processing file: error/../generated/errorid.inc

=1					ErrorID_Missing = 1 ; Feature not Present
=2					ErrorID_Syntax = 2 ; Syntax Error
=3					ErrorID_NoModule = 3 ; Module disabled
=4					ErrorID_Assert = 4 ; Assertion failed
=5					ErrorID_DivZero = 5 ; Divide By Zero
=6					ErrorID_Stop = 6 ; Stop
=7					ErrorID_BadType = 7 ; Type Mismatch
=8					ErrorID_BadValue = 8 ; Illegal Value
=9					ErrorID_MissingRP = 9 ; Missing right bracket
=10					ErrorID_MissingComma = 10 ; Missing comma
=11					ErrorID_NoReference = 11 ; Missing reference
=12					ErrorID_LineNumber = 12 ; Line Number not found
=13					ErrorID_StrLen = 13 ; String too long
=14					ErrorID_ReturnErr = 14 ; RETURN without GOSUB
=15					ErrorID_UntilErr = 15 ; UNTIL without REPEAT
=16					ErrorID_NextErr = 16 ; NEXT without FOR
=17					ErrorID_WendErr = 17 ; WEND without WHILE
=18					ErrorID_endprocErr = 18 ; ENDPROC without PROC
=19					ErrorID_BadIndex = 19 ; Bad NEXT index
=20					ErrorID_Struct = 20 ; Structures nested wrong
=21					ErrorID_NoAuto = 21 ; Cannot create variable
=22					ErrorID_RetStack = 22 ; Return stack out of space
=23					ErrorID_NoProc = 23 ; Unknown Procedure
=24					ErrorID_Params = 24 ; Parameters do not match
=25					ErrorID_DupArray = 25 ; Array already defined
=26					ErrorID_NotArray = 26 ; DIM requires array
=27					ErrorID_ArrayIndex = 27 ; Bad array index
=28					ErrorID_ArrayDepth = 28 ; Wrong number of array indices
=29					ErrorID_DataError = 29 ; Out of data
=30					ErrorID_Tokenise = 30 ; Cannot tokenise line
=31					ErrorID_Save = 31 ; Save failed
=32					ErrorID_Load = 32 ; Load failed
=33					ErrorID_Break = 33 ; Break
=34					ErrorID_Memory = 34 ; Out of memory
=35					ErrorID_NumStack = 35 ; Expression too complex
=36					ErrorID_Assembler = 36 ; Bad Operand/Mode
=37					ErrorID_Branch = 37 ; Branch out of range
=38					ErrorID_Label = 38 ; Label changed value
=39					ErrorID_NoSprite = 39 ; No Sprite Selected
=40					ErrorID_Hardware = 40 ; Hardware

;******  Return to file: error/errorhandler.inc


;******  Return to file: basic.asm


;******  Processing file: extension/extension.inc


;******  Return to file: basic.asm


;******  Processing file: extension/option_x16/x16const.inc

=64					X16MaxImages = 64 							; max # of sprite images.

;******  Return to file: basic.asm


;******  Processing file: floatingpoint/float.inc

=5					FloatEmbeddedSize = 5

;******  Return to file: basic.asm


;******  Processing file: floatingpoint/floatingpoint.inc


;******  Return to file: basic.asm


;******  Processing file: interaction/interaction.inc


;******  Return to file: basic.asm


;******  Processing file: main/main.inc


;******  Return to file: basic.asm


;******  Processing file: string/functions/memory.inc

=252					MaxStringSize = 252

;******  Return to file: basic.asm


;******  Processing file: string/string.inc


;******  Return to file: basic.asm


;******  Processing file: tokeniser/detokenise/colouring.inc

=$84					LTYLineNumber = $84
=$82					LTYPunctuation = $82
=$87					LTYIdentifier = $87
=$86					LTYConstant = $86
=$83					LTYKeyword = $83
=$81					LTYString = $81

;******  Return to file: basic.asm


;******  Processing file: tokeniser/tokeniser.inc


;******  Return to file: basic.asm


;******  Processing file: variable/variable.inc


;******  Return to file: basic.asm


;******  Processing file: footer/footer.inc


;******  Return to file: basic.asm

.1000					section_start_header:

;******  Processing file: header/header.asm


;******  Processing file: header/00start.asm

.1000					Start:
.1000	4c 0a 10	jmp $100a			jmp 	GoColdStart 				; +0 	boot BASIC
.1003	4c 58 10	jmp $1058			jmp 	GoTokTest					; +3 	run tokeniser test code.
>1006	c5 3e						.word 	TokenTableAddress
.1008							else
>1008	00 00						.word 	0
.100a					GoColdStart:
.100a	a9 00		lda #$00			lda 	#(programMemory) & $FF
.100c	8d c8 0a	sta $0ac8			sta 	basePage
.100f	a9 47		lda #$47			lda 	#(programMemory) >> 8
.1011	8d c9 0a	sta $0ac9			sta 	1+(basePage)
.1014	a9 00		lda #$00			lda 	#(endOfMemory) & $FF
.1016	8d cc 0a	sta $0acc			sta 	endMemory
.1019	a9 9f		lda #$9f			lda 	#(endOfMemory) >> 8
.101b	8d cd 0a	sta $0acd			sta 	1+(endMemory)
.101e	20 26 10	jsr $1026			jsr 	InitialiseAll 				; initialise everything.
.1021	a2 02		ldx #$02		ldx	#2
.1023	20 9c 20	jsr $209c		jsr	interactionHandler

;******  Processing file: header/../generated/initialiseall.asm

.1026					InitialiseAll:
.1026	a9 00		lda #$00		lda #0
.1028	a2 00		ldx #$00		ldx	#0
.102a	20 b4 13	jsr $13b4		jsr	assemblerHandler
.102d	a9 00		lda #$00		lda #0
.102f	a2 00		ldx #$00		ldx	#0
.1031	20 f6 14	jsr $14f6		jsr	deviceHandler
.1034	a9 00		lda #$00		lda #0
.1036	a2 00		ldx #$00		ldx	#0
.1038	20 9c 20	jsr $209c		jsr	interactionHandler
.103b	a9 00		lda #$00		lda #0
.103d	a2 00		ldx #$00		ldx	#0
.103f	20 36 37	jsr $3736		jsr	mainHandler
.1042	a9 00		lda #$00		lda #0
.1044	a2 00		ldx #$00		ldx	#0
.1046	20 f3 39	jsr $39f3		jsr	stringHandler
.1049	a9 00		lda #$00		lda #0
.104b	a2 00		ldx #$00		ldx	#0
.104d	20 4e 42	jsr $424e		jsr	tokeniserHandler
.1050	a9 00		lda #$00		lda #0
.1052	a2 00		ldx #$00		ldx	#0
.1054	20 1f 46	jsr $461f		jsr	variableHandler
.1057	60		rts			rts

;******  Return to file: header/00start.asm

.1058					GoTokTest:
.1058	a2 06		ldx #$06		ldx	#6
.105a	20 4e 42	jsr $424e		jsr	tokeniserHandler

;******  Return to file: header/header.asm


;******  Return to file: basic.asm

.105d					section_end_header:
.105d					section_start_assembler:

;******  Processing file: assembler/assembler.asm


;******  Processing file: assembler/asmoperand.asm

.105d					AsmGetOperand:
.105d	a2 00		ldx #$00			ldx 	#0 							; clear the operand.
.105f	8a		txa				txa
.1060	95 50		sta $50,x			sta 	esInt0,x
.1062	95 58		sta $58,x			sta 	esInt1,x
.1064	95 60		sta $60,x			sta 	esInt2,x
.1066	95 68		sta $68,x			sta 	esInt3,x
.1068	b1 28		lda ($28),y			lda 	(codePtr),y 				; first into X
.106a	aa		tax				tax
.106b	a9 02		lda #$02			lda 	#AMD_ACCIMP
.106d	e0 80		cpx #$80			cpx 	#TOK_EOL 					; if end of line or colon, return implied mode.
.106f	f0 41		beq $10b2			beq 	_AGOExit
.1071	e0 ca		cpx #$ca			cpx 	#TKW_COLON
.1073	f0 3d		beq $10b2			beq 	_AGOExit
.1075	c8		iny				iny 								; consume the token
.1076	a9 00		lda #$00			lda 	#AMD_IMM
.1078	e0 e6		cpx #$e6			cpx 	#TKW_HASH 					; if a hash present, then immediate mode.
.107a	f0 2d		beq $10a9			beq		_AGOEvalExit 				; with an operand.
.107c	e0 a4		cpx #$a4			cpx 	#TKW_LPAREN 				; left bracket ?
.107e	f0 40		beq $10c0			beq 	_AGOIndirect
.1080	e0 01		cpx #$01			cpx 	#$01 						; is it "A" e.g. the variable A.
.1082	d0 0b		bne $108f			bne 	_AGOZeroPage1 				; if not it is zero zero,x zero,y, unpick 1 iny
.1084	b1 28		lda ($28),y			lda 	(codePtr),y 				; get the second character & consume it
.1086	c8		iny				iny
.1087	aa		tax				tax
.1088	a9 02		lda #$02			lda 	#AMD_ACCIMP 				; and return Acc/Implied if it is just A
.108a	e0 3a		cpx #$3a			cpx 	#$3A
.108c	f0 24		beq $10b2			beq 	_AGOExit
.108e	88		dey				dey 								; unpick 2 iny
.108f					_AGOZeroPage1:
.108f	88		dey				dey
.1090	a9 00		lda #$00			lda 	#0 							; get the address into esInt0/1
.1092	a2 0a		ldx #$0a		ldx	#10
.1094	20 36 37	jsr $3736		jsr	mainHandler
.1097	20 ef 10	jsr $10ef			jsr 	AsmGetIndexing
.109a	a9 01		lda #$01			lda 	#AMD_ZERO
.109c	90 14		bcc $10b2			bcc 	_AGOExit
.109e	a9 05		lda #$05			lda 	#AMD_ZEROX
.10a0	e0 00		cpx #$00			cpx 	#0
.10a2	f0 0e		beq $10b2			beq 	_AGOExit
.10a4	a9 09		lda #$09			lda 	#AMD_ZEROY
.10a6	4c b2 10	jmp $10b2			jmp 	_AGOExit
.10a9					_AGOEvalExit:
.10a9	48		pha				pha
.10aa	a9 00		lda #$00			lda 	#0 							; evaluate operand in root.
.10ac	a2 0a		ldx #$0a		ldx	#10
.10ae	20 36 37	jsr $3736		jsr	mainHandler
.10b1	68		pla				pla
.10b2					_AGOExit:
.10b2	48		pha				pha 								; save the mode
.10b3	a5 60		lda $60				lda 	esInt2 						; check the operand is zero.
.10b5	05 68		ora $68				ora 	esInt3
.10b7	d0 02		bne $10bb			bne 	_AGOValue
.10b9	68		pla				pla
.10ba	60		rts				rts
.10bb					_AGOValue:
.10bb	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.10bd	20 18 15	jsr $1518		jsr	errorHandler
.10c0					_AGOIndirect:
.10c0	a9 00		lda #$00			lda 	#0 							; evaluate operand in root.
.10c2	a2 0a		ldx #$0a		ldx	#10
.10c4	20 36 37	jsr $3736		jsr	mainHandler
.10c7	b1 28		lda ($28),y			lda 	(codePtr),y 				; does ) follow ? if so might be ) or ),Y
.10c9	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.10cb	f0 11		beq $10de			beq 	_AGOIndIndY
.10cd	20 ef 10	jsr $10ef			jsr 	ASMGetIndexing 				; must be ,X)
.10d0	90 39		bcc $110b			bcc 	AGISyntax
.10d2	e0 00		cpx #$00			cpx 	#0
.10d4	d0 35		bne $110b			bne 	AGISyntax
.10d6	a2 04		ldx #$04		ldx	#4
.10d8	20 36 37	jsr $3736		jsr	mainHandler
.10db	a9 0d		lda #$0d			lda 	#AMD_ZEROINDX
.10dd	60		rts				rts
.10de					_AGOIndIndY:
.10de	c8		iny				iny
.10df	20 ef 10	jsr $10ef			jsr 	ASMGetIndexing 				; get indexing if any
.10e2	a9 08		lda #$08			lda 	#AMD_ZEROIND
.10e4	90 cc		bcc $10b2			bcc 	_AGOExit 					; none then exit
.10e6	e0 00		cpx #$00			cpx 	#0 							; must be ,Y
.10e8	f0 21		beq $110b			beq 	AGISyntax
.10ea	a9 04		lda #$04			lda 	#AMD_ZEROINDY
.10ec	4c b2 10	jmp $10b2			jmp 	_AGOExit
.10ef					AsmGetIndexing:
.10ef	b1 28		lda ($28),y			lda 	(codePtr),y 				; check for comma
.10f1	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.10f3	18		clc				clc
.10f4	d0 14		bne $110a			bne 	_AGIExit 					; no comma, return with CC
.10f6	c8		iny				iny 								; get what SHOULD be X or Y
.10f7	b1 28		lda ($28),y			lda 	(codePtr),y  				; read it
.10f9	38		sec				sec 								; subtract 6 bit ASCII of X
.10fa	e9 18		sbc #$18			sbc 	#"X" & $3F
.10fc	c9 02		cmp #$02			cmp 	#2 							; if unsigned >= 2 then error
.10fe	b0 0b		bcs $110b			bcs 	AGISyntax
.1100	aa		tax				tax 								; put in index
.1101	c8		iny				iny 								; get what follows that, should be the $3A marker
.1102	b1 28		lda ($28),y			lda 	(codePtr),y
.1104	c8		iny				iny
.1105	c9 3a		cmp #$3a			cmp 	#$3A
.1107	d0 02		bne $110b			bne 	AGISyntax
.1109	38		sec				sec 								; return CS and index mode in X
.110a					_AGIExit:
.110a	60		rts				rts
.110b					AGISyntax:
.110b	a2 02		ldx #$02			ldx 	#ErrorID_syntax
.110d	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: assembler/assembler.asm


;******  Processing file: assembler/asmwrite.asm

.0af2					finalOpcode:
>0af2							.fill 	1
.1110					AsmWriteInstruction:
.1110	8d f2 0a	sta $0af2			sta 	finalOpcode					; save opcode.
.1113	98		tya				tya
.1114	48		pha				pha
.1115	ad 38 0a	lda $0a38			lda 	SingleLetterVar+("O"-"A")*4	; check O
.1118	29 02		and #$02			and 	#2
.111a	f0 2d		beq $1149			beq 	_ASMWNoEcho 				; if zero then don't echo.
.111c	ad 3d 0a	lda $0a3d			lda 	SingleLetterVar+("P"-"A")*4+1 ; write address in P
.111f	20 84 11	jsr $1184			jsr 	AWIWriteHex
.1122	ad 3c 0a	lda $0a3c			lda 	SingleLetterVar+("P"-"A")*4
.1125	20 84 11	jsr $1184			jsr 	AWIWriteHex
.1128	ad f2 0a	lda $0af2			lda 	finalOpcode 				; write opcode
.112b	20 7d 11	jsr $117d			jsr 	AWIWriteHexSpace
.112e	e0 00		cpx #$00			cpx 	#0
.1130	f0 0e		beq $1140			beq 	_ASMWEchoExit
.1132	a5 50		lda $50				lda 	esInt0
.1134	20 7d 11	jsr $117d			jsr 	AWIWriteHexSpace
.1137	e0 01		cpx #$01			cpx 	#1
.1139	f0 05		beq $1140			beq 	_ASMWEchoExit
.113b	a5 58		lda $58				lda 	esInt1
.113d	20 7d 11	jsr $117d			jsr 	AWIWriteHexSpace
.1140					_ASMWEchoExit:
.1140	8a		txa				txa
.1141	48		pha				pha
.1142	a2 06		ldx #$06		ldx	#6
.1144	20 f6 14	jsr $14f6		jsr	deviceHandler
.1147	68		pla				pla
.1148	aa		tax				tax
.1149					_ASMWNoEcho:
.1149	ad f2 0a	lda $0af2			lda 	finalOpcode
.114c	20 64 11	jsr $1164			jsr 	AsmWriteByte
.114f	e0 00		cpx #$00			cpx 	#0
.1151	f0 0e		beq $1161			beq 	_ASMWExit
.1153	a5 50		lda $50				lda 	esInt0
.1155	20 64 11	jsr $1164			jsr 	AsmWriteByte
.1158	e0 01		cpx #$01			cpx 	#1
.115a	f0 05		beq $1161			beq 	_ASMWExit
.115c	a5 58		lda $58				lda 	esInt1
.115e	20 64 11	jsr $1164			jsr 	AsmWriteByte
.1161					_ASMWExit:
.1161	68		pla				pla
.1162	a8		tay				tay
.1163	60		rts				rts
.1164					AsmWriteByte:
.1164	a0 00		ldy #$00			ldy 	#0
.1166	48		pha				pha
.1167	ad 3c 0a	lda $0a3c			lda 	SingleLetterVar+("P"-"A")*4 ; copy address to temp0
.116a	85 2a		sta $2a				sta 	temp0
.116c	ad 3d 0a	lda $0a3d			lda 	SingleLetterVar+("P"-"A")*4+1
.116f	85 2b		sta $2b				sta 	temp0+1
.1171	68		pla				pla 								; write out the byte.
.1172	91 2a		sta ($2a),y			sta 	(temp0),y
.1174	ee 3c 0a	inc $0a3c			inc 	SingleLetterVar+("P"-"A")*4	; increment P
.1177	d0 03		bne $117c			bne 	_AWBNoCarry
.1179	ee 3d 0a	inc $0a3d			inc 	SingleLetterVar+("P"-"A")*4+1
.117c					_AWBNoCarry:
.117c	60		rts				rts
.117d					AWIWriteHexSpace:
.117d	48		pha				pha
.117e	a9 20		lda #$20			lda 	#" "
.1180	20 97 11	jsr $1197			jsr 	AWIPrintChar
.1183	68		pla				pla
.1184					AWIWriteHex:
.1184	48		pha				pha
.1185	4a		lsr a				lsr 	a
.1186	4a		lsr a				lsr 	a
.1187	4a		lsr a				lsr 	a
.1188	4a		lsr a				lsr 	a
.1189	20 8d 11	jsr $118d			jsr 	AWIPrintNibble
.118c	68		pla				pla
.118d					AWIPrintNibble:
.118d	29 0f		and #$0f			and 	#15
.118f	c9 0a		cmp #$0a			cmp 	#10
.1191	90 02		bcc $1195			bcc 	_AWIPNDigit
.1193	69 06		adc #$06			adc 	#6
.1195					_AWIPNDigit:
.1195	69 30		adc #$30			adc 	#48
.1197					AWIPrintChar:
.1197	85 32		sta $32				sta 	tempShort
.1199	8a		txa				txa
.119a	48		pha				pha
.119b	a5 32		lda $32				lda 	tempShort
.119d	a2 16		ldx #$16		ldx	#22
.119f	20 f6 14	jsr $14f6		jsr	deviceHandler
.11a2	68		pla				pla
.11a3	aa		tax				tax
.11a4	60		rts				rts

;******  Return to file: assembler/assembler.asm


;******  Processing file: assembler/assemblecmd.asm

.0af3					asmToken:
>0af3							.fill 	1
.0af4					asmMode:
>0af4							.fill 	1 							; esInt0/1
.0af5					asmBaseOpcode:
>0af5							.fill 	1
.11a5					AssembleOneInstruction:
.11a5	8d f3 0a	sta $0af3			sta 	asmToken 					; save the token
.11a8	aa		tax				tax
.11a9	bd 72 11	lda $1172,x			lda 	OpcodeTable-TKA_GROUP1,x 	; get the base opcode.
.11ac	8d f5 0a	sta $0af5			sta 	asmBaseOpcode
.11af	20 5d 10	jsr $105d			jsr 	AsmGetOperand 				; identify the address mode and operand where applicable.
.11b2	8d f4 0a	sta $0af4			sta 	asmMode
.11b5	a5 58		lda $58				lda 	esInt1 						; check if this is a three byte operand.
.11b7	d0 05		bne $11be			bne 	_AOIThreeBytes 				; if so, we have to use three byte
.11b9	20 d4 11	jsr $11d4			jsr 	AssembleAttempt 			; try to assemble token/mode/operand (2 bytes)
.11bc	b0 10		bcs $11ce			bcs 	_AOISuccess 				; worked ok.
.11be					_AOIThreeBytes:
.11be	ae f4 0a	ldx $0af4			ldx 	asmMode 					; convert mode to 3 byte version, where possible.
.11c1	bd f8 11	lda $11f8,x			lda 	AbsoluteVersionTable,x
.11c4	30 09		bmi $11cf			bmi 	_AOIError					; not possible, no equivalent.
.11c6	8d f4 0a	sta $0af4			sta 	asmMode
.11c9	20 d4 11	jsr $11d4			jsr 	AssembleAttempt 			; try to assemble token/mode/operand (3 bytes)
.11cc	90 01		bcc $11cf			bcc 	_AOIError 					; didn't work.
.11ce					_AOISuccess:
.11ce	60		rts				rts
.11cf					_AOIError:
.11cf	a2 24		ldx #$24			ldx 	#ErrorID_Assembler
.11d1	20 18 15	jsr $1518		jsr	errorHandler
.11d4					AssembleAttempt:
.11d4	20 dd 11	jsr $11dd			jsr 	_AADispatch 				; go to the code which dispatches to the appropriate
.11d7	b0 03		bcs $11dc			bcs 	_AAExit 					; exit if carry set, e.g. was successful
.11d9	20 87 13	jsr $1387			jsr 	AssembleSpecialCase
.11dc					_AAExit:
.11dc	60		rts				rts
.11dd					_AADispatch:
.11dd	ad f3 0a	lda $0af3			lda 	asmToken
.11e0	c9 b7		cmp #$b7			cmp 	#TKA_GROUP4
.11e2	b0 11		bcs $11f5			bcs 	_AAGroup4
.11e4	c9 ae		cmp #$ae			cmp 	#TKA_GROUP3
.11e6	b0 0a		bcs $11f2			bcs 	_AAGroup3
.11e8	c9 9c		cmp #$9c			cmp 	#TKA_GROUP2
.11ea	b0 03		bcs $11ef			bcs 	_AAGroup2
.11ec	4c cd 12	jmp $12cd			jmp 	AssembleGroup1
.11ef					_AAGroup2:
.11ef	4c 28 13	jmp $1328			jmp 	AssembleGroup2
.11f2					_AAGroup3:
.11f2	4c 49 13	jmp $1349			jmp 	AssembleGroup3
.11f5					_AAGroup4:
.11f5	4c 7d 13	jmp $137d			jmp 	AssembleGroup4
.11f8					AbsoluteVersionTable:
>11f8	ff						.byte	$FF 			; fail AMD_IMM
>11f9	03						.byte	AMD_ABS 		; absolute AMD_ZERO
>11fa	ff						.byte	$FF 			; fail AMD_ACCIMP
>11fb	ff						.byte	$FF 			; fail AMD_ABS
>11fc	ff						.byte 	$FF 			; fail AMD_ZEROINDY
>11fd	07						.byte	AMD_ABSX 		; absolute AMD_ZEROX
>11fe	ff						.byte	$FF 			; fail AMD_ABSY
>11ff	ff						.byte	$FF 			; fail AMD_ABSX
>1200	0a						.byte	AMD_ABSIND 		; absolute AMD_ZEROIND
>1201	06						.byte	AMD_ABSY 		; absolute AMD_ZEROY
>1202	ff						.byte	$FF 			; fail AMD_ABSIND
>1203	ff						.byte	$FF 			; fail AMD_ABSINDX
>1204	ff						.byte	$FF 			; fail AMD_REL
>1205	0b						.byte 	AMD_ABSINDX 	; absolute AMD_ZEROINDX

;******  Processing file: assembler/../generated/asmtables.inc

.1206					OpcodeTable:
>1206	01					.byte	$01			; $94 ora
>1207	21					.byte	$21			; $95 (and)
>1208	41					.byte	$41			; $96 eor
>1209	61					.byte	$61			; $97 adc
>120a	81					.byte	$81			; $98 sta
>120b	a1					.byte	$a1			; $99 lda
>120c	c1					.byte	$c1			; $9a cmp
>120d	e1					.byte	$e1			; $9b sbc
>120e	02					.byte	$02			; $9c asl
>120f	22					.byte	$22			; $9d rol
>1210	42					.byte	$42			; $9e lsr
>1211	62					.byte	$62			; $9f ror
>1212	82					.byte	$82			; $a0 stx
>1213	a2					.byte	$a2			; $a1 ldx
>1214	c2					.byte	$c2			; $a2 dec
>1215	e2					.byte	$e2			; $a3 inc
>1216	60					.byte	$60			; $a4 stz
>1217	20					.byte	$20			; $a5 bit
>1218	80					.byte	$80			; $a6 sty
>1219	a0					.byte	$a0			; $a7 ldy
>121a	c0					.byte	$c0			; $a8 cpy
>121b	e0					.byte	$e0			; $a9 cpx
>121c	00					.byte	$00			; $aa tsb
>121d	10					.byte	$10			; $ab trb
>121e	14					.byte	$14			; $ac jsr
>121f	40					.byte	$40			; $ad jmp
>1220	10					.byte	$10			; $ae bpl
>1221	30					.byte	$30			; $af bmi
>1222	50					.byte	$50			; $b0 bvc
>1223	70					.byte	$70			; $b1 bvs
>1224	90					.byte	$90			; $b2 bcc
>1225	b0					.byte	$b0			; $b3 bcs
>1226	d0					.byte	$d0			; $b4 bne
>1227	f0					.byte	$f0			; $b5 beq
>1228	80					.byte	$80			; $b6 bra
>1229	00					.byte	$00			; $b7 brk
>122a	08					.byte	$08			; $b8 php
>122b	18					.byte	$18			; $b9 clc
>122c	28					.byte	$28			; $ba plp
>122d	38					.byte	$38			; $bb sec
>122e	40					.byte	$40			; $bc rti
>122f	48					.byte	$48			; $bd pha
>1230	58					.byte	$58			; $be cli
>1231	5a					.byte	$5a			; $bf phy
>1232	60					.byte	$60			; $c0 rts
>1233	68					.byte	$68			; $c1 pla
>1234	78					.byte	$78			; $c2 sei
>1235	7a					.byte	$7a			; $c3 ply
>1236	88					.byte	$88			; $c4 dey
>1237	8a					.byte	$8a			; $c5 txa
>1238	98					.byte	$98			; $c6 tya
>1239	9a					.byte	$9a			; $c7 txs
>123a	a8					.byte	$a8			; $c8 tay
>123b	aa					.byte	$aa			; $c9 tax
>123c	b8					.byte	$b8			; $ca clv
>123d	ba					.byte	$ba			; $cb tsx
>123e	c8					.byte	$c8			; $cc iny
>123f	ca					.byte	$ca			; $cd dex
>1240	d8					.byte	$d8			; $ce cld
>1241	da					.byte	$da			; $cf phx
>1242	e8					.byte	$e8			; $d0 inx
>1243	ea					.byte	$ea			; $d1 nop
>1244	f8					.byte	$f8			; $d2 sed
>1245	fa					.byte	$fa			; $d3 plx
.1246					Group2OpcodeAvailability:
>1246	ae					.byte	$ae			; $9c asl $02
>1247	ae					.byte	$ae			; $9d rol $22
>1248	ae					.byte	$ae			; $9e lsr $42
>1249	ae					.byte	$ae			; $9f ror $62
>124a	0a					.byte	$0a			; $a0 stx $82
>124b	0b					.byte	$0b			; $a1 ldx $a2
>124c	aa					.byte	$aa			; $a2 dec $c2
>124d	aa					.byte	$aa			; $a3 inc $e2
>124e	22					.byte	$22			; $a4 stz $60
>124f	aa					.byte	$aa			; $a5 bit $20
>1250	2a					.byte	$2a			; $a6 sty $80
>1251	ab					.byte	$ab			; $a7 ldy $a0
>1252	2b					.byte	$2b			; $a8 cpy $c0
>1253	0b					.byte	$0b			; $a9 cpx $e0
>1254	0a					.byte	$0a			; $aa tsb $00
>1255	0a					.byte	$0a			; $ab trb $10
>1256	08					.byte	$08			; $ac jsr $14
>1257	08					.byte	$08			; $ad jmp $40
.1258					AssemblerSpecialCases:
>1258	ad 0a 6c				.byte	$ad,10,$6c		; jmp (abs)
>125b	ad 0b 7c				.byte	$ad,11,$7c		; jmp (abs,x)
>125e	a1 06 be				.byte	$a1,6,$be		; ldx abs,y
>1261	a1 09 b6				.byte	$a1,9,$b6		; ldx zp,y
>1264	a0 09 96				.byte	$a0,9,$96		; stx zp,y
>1267	a3 02 1a				.byte	$a3,2,$1a		; inc acc
>126a	a2 02 3a				.byte	$a2,2,$3a		; dec acc
>126d	a5 00 89				.byte	$a5,0,$89		; bit #
>1270	a4 03 9c				.byte	$a4,3,$9c		; stz abs
>1273	a4 07 9e				.byte	$a4,7,$9e		; stz abs,x
>1276	00					.byte	0

;******  Return to file: assembler/assemblecmd.asm


;******  Return to file: assembler/assembler.asm


;******  Processing file: assembler/assemblelabel.asm

.1277					AssembleLabel:
.1277	b1 28		lda ($28),y			lda 	(codePtr),y 				; check it's followed by a variable name.
.1279	c9 3a		cmp #$3a			cmp 	#$3A
.127b	b0 4b		bcs $12c8			bcs 	_ALSyntax
.127d	a9 00		lda #$00			lda 	#0							; get a variable name on to stack:0
.127f	a2 02		ldx #$02		ldx	#2
.1281	20 1f 46	jsr $461f		jsr	variableHandler
.1284	a5 48		lda $48				lda 	esType 						; check integer reference
.1286	c9 80		cmp #$80			cmp 	#$80
.1288	d0 3e		bne $12c8			bne 	_ALSyntax
.128a	a5 50		lda $50				lda 	esInt0 						; copy that reference address to temp0
.128c	85 2a		sta $2a				sta 	temp0
.128e	a5 58		lda $58				lda 	esInt1
.1290	85 2b		sta $2b				sta 	temp0+1
.1292	98		tya				tya
.1293	48		pha				pha
.1294	ad 38 0a	lda $0a38			lda 	SingleLetterVar+("O"-"A")*4	; are we in Pass 2
.1297	4a		lsr a				lsr 	a
.1298	90 11		bcc $12ab			bcc 	_ALWrite
.129a	a0 00		ldy #$00			ldy 	#0
.129c	ad 3c 0a	lda $0a3c			lda 	SingleLetterVar+("P"-"A")*4 ; compare the value in P to the variable
.129f	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.12a1	d0 20		bne $12c3			bne 	_ALChanged
.12a3	c8		iny				iny
.12a4	ad 3d 0a	lda $0a3d			lda 	SingleLetterVar+("P"-"A")*4+1
.12a7	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.12a9	d0 18		bne $12c3			bne 	_ALChanged
.12ab					_ALWrite:
.12ab	a0 00		ldy #$00			ldy 	#0
.12ad	ad 3c 0a	lda $0a3c			lda 	SingleLetterVar+("P"-"A")*4 ; copy the value in P into the variable
.12b0	91 2a		sta ($2a),y			sta 	(temp0),y
.12b2	ad 3d 0a	lda $0a3d			lda 	SingleLetterVar+("P"-"A")*4+1
.12b5	c8		iny				iny
.12b6	91 2a		sta ($2a),y			sta 	(temp0),y
.12b8	a9 00		lda #$00			lda 	#0
.12ba	c8		iny				iny
.12bb	91 2a		sta ($2a),y			sta 	(temp0),y
.12bd	c8		iny				iny
.12be	91 2a		sta ($2a),y			sta 	(temp0),y
.12c0	68		pla				pla
.12c1	a8		tay				tay
.12c2	60		rts				rts
.12c3					_ALChanged:
.12c3	a2 26		ldx #$26			ldx 	#ErrorID_Label
.12c5	20 18 15	jsr $1518		jsr	errorHandler
.12c8					_ALSyntax:
.12c8	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.12ca	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: assembler/assembler.asm


;******  Processing file: assembler/subgroup.asm

.12cd					AssembleGroup1:
.12cd	ad f3 0a	lda $0af3			lda 	asmToken 					; firstly, we throw out STA immediate
.12d0	c9 98		cmp #$98			cmp 	#TKW_STA
.12d2	d0 07		bne $12db			bne 	_AG1NotStoreImm
.12d4	ad f4 0a	lda $0af4			lda 	asmMode
.12d7	c9 00		cmp #$00			cmp 	#AMD_IMM
.12d9	f0 2c		beq $1307			beq 	AG1ModeError
.12db					_AG1NotStoreImm:
.12db	ae f4 0a	ldx $0af4			ldx 	asmMode						; get mode into X.
.12de	bd 0c 13	lda $130c,x			lda		AMDOperandSize,X 			; get the size of the operand and push on stack
.12e1	48		pha				pha
.12e2	f0 23		beq $1307			beq 	AG1ModeError 				; if the size is zero, the mode must be Accumulator
.12e4	e0 00		cpx #$00			cpx 	#0 							; if the mode is zero, e.g. immediate
.12e6	d0 02		bne $12ea			bne 	_AG1NotImmediate
.12e8	a2 02		ldx #$02			ldx 	#2 							; then we use offset 2 here. This is how the 6502
.12ea					_AG1NotImmediate:
.12ea	e0 0d		cpx #$0d			cpx 	#AMD_ZEROINDX 				; (zero,x) uses slot 0.
.12ec	d0 02		bne $12f0			bne 	_AG1NotZX
.12ee	a2 00		ldx #$00			ldx 	#0
.12f0					_AG1NotZX:
.12f0	68		pla				pla 								; restore length
.12f1	e0 09		cpx #$09			cpx 	#9 							; anything > 8 fails.
.12f3	b0 10		bcs $1305			bcs 	AG1Fail
.12f5					AG1ReturnValue:
.12f5	85 32		sta $32				sta 	tempShort 					; save size of operand
.12f7	18		clc				clc
.12f8	bd 1a 13	lda $131a,x			lda 	AMDOffsetFromBase,X 		; get the offset for the address mode.
.12fb	6d f5 0a	adc $0af5			adc 	asmBaseOpcode 				; add the base opcode.
.12fe	a6 32		ldx $32				ldx 	tempShort 					; length in X
.1300	20 10 11	jsr $1110			jsr 	AsmWriteInstruction 		; output instruction.
.1303	38		sec				sec
.1304	60		rts				rts
.1305					AG1Fail:
.1305	18		clc				clc
.1306	60		rts				rts
.1307					AG1ModeError:
.1307	a2 24		ldx #$24			ldx 	#ErrorID_Assembler
.1309	20 18 15	jsr $1518		jsr	errorHandler
.130c					AMDOperandSize:
>130c	01 01 00 02					.byte 	1,1,0,2
>1310	01 01 02 02					.byte 	1,1,2,2
>1314	01 01 02 02					.byte 	1,1,2,2
>1318	01 01						.byte 	1,1
.131a					AMDOffsetFromBase:
>131a	00 04 08 0c					.byte 	0,4,8,12
>131e	10 14 18 1c					.byte	16,20,24,28
>1322	11 00 00 00					.byte 	17,0,0,0
>1326	00 00						.byte 	0,0
.1328					AssembleGroup2:
.1328	ad f4 0a	lda $0af4			lda 	asmMode 					; get the mode; if >= 8 cannot be a legit group 2
.132b	c9 08		cmp #$08			cmp 	#8
.132d	b0 18		bcs $1347			bcs 	_AG2Fail
.132f	85 2a		sta $2a				sta 	temp0 						; save in temp9
.1331	ae f3 0a	ldx $0af3			ldx 	asmToken					; get token in X, then get the availability flags for it
.1334	bd aa 11	lda $11aa,x			lda 	Group2OpcodeAvailability-TKA_GROUP2,x
.1337					_AG2Shift:
.1337	4a		lsr a				lsr 	a
.1338	c6 2a		dec $2a				dec 	temp0
.133a	10 fb		bpl $1337			bpl 	_AG2Shift
.133c	90 09		bcc $1347			bcc 	_AG2Fail 					; cannot do that instruction w/that opcode.
.133e	ae f4 0a	ldx $0af4			ldx  	asmMode 					; mode in X
.1341	bd 0c 13	lda $130c,x			lda		AMDOperandSize,X 			; get the size of the operand in A
.1344	4c f5 12	jmp $12f5			jmp 	AG1ReturnValue 				; and use that with Group 1's exit code
.1347					_AG2Fail:
.1347	18		clc				clc
.1348	60		rts				rts
.1349					AssembleGroup3:
.1349	ad 38 0a	lda $0a38			lda 	SingleLetterVar+("O"-"A")*4	; check bit 0 (pass) of O
.134c	4a		lsr a				lsr 	a
.134d	a9 00		lda #$00			lda 	#0 							; if clear, e.g. pass 1, use default zero.
.134f	90 21		bcc $1372			bcc 	_AG3Default
.1351	38		sec				sec	 								; calculate branch offset
.1352	a5 50		lda $50				lda		esInt0
.1354	ed 3c 0a	sbc $0a3c			sbc 	SingleLetterVar+("P"-"A")*4
.1357	aa		tax				tax
.1358	a5 58		lda $58				lda		esInt1
.135a	ed 3d 0a	sbc $0a3d			sbc 	SingleLetterVar+("P"-"A")*4+1
.135d	85 58		sta $58				sta 	esInt1
.135f	8a		txa				txa 								; add 126, now 128 too many.
.1360	18		clc				clc 								; we can use this to check the range
.1361	69 7e		adc #$7e			adc 	#126
.1363	85 50		sta $50				sta 	esInt0
.1365	90 02		bcc $1369			bcc 	_AG3NoCarry
.1367	e6 58		inc $58				inc 	esInt1
.1369					_AG3NoCarry:
.1369	a5 58		lda $58				lda 	esInt1 						; check in range.
.136b	d0 0b		bne $1378			bne 	_AG3Range
.136d	a5 50		lda $50				lda 	esInt0 						; fix up branch distance
.136f	38		sec				sec
.1370	e9 80		sbc #$80			sbc 	#128
.1372					_AG3Default:
.1372	85 50		sta $50				sta 	esInt0
.1374					_AG3ExitOk:
.1374	a2 01		ldx #$01			ldx 	#1 							; one opcode, use AG4 Code
.1376	d0 07		bne $137f			bne 	AG4Write
.1378					_AG3Range:
.1378	a2 25		ldx #$25			ldx 	#ErrorID_Branch
.137a	20 18 15	jsr $1518		jsr	errorHandler
.137d					AssembleGroup4:
.137d	a2 00		ldx #$00			ldx 	#0 							; no parameters in the opcode.
.137f					AG4Write:
.137f	ad f5 0a	lda $0af5			lda 	asmBaseOpcode				; the opcode is the opcode base.
.1382	20 10 11	jsr $1110			jsr 	AsmWriteInstruction 		; output instruction.
.1385	38		sec				sec
.1386	60		rts				rts
.1387					AssembleSpecialCase:
.1387	a2 00		ldx #$00			ldx 	#0
.1389					_ASCScan:
.1389	bd 58 12	lda $1258,x			lda 	AssemblerSpecialCases,x 	; scan token and mode for match
.138c	cd f3 0a	cmp $0af3			cmp 	asmToken
.138f	d0 08		bne $1399			bne 	_ASCNext
.1391	bd 59 12	lda $1259,x			lda 	AssemblerSpecialCases+1,x
.1394	cd f4 0a	cmp $0af4			cmp 	asmMode
.1397	f0 0a		beq $13a3			beq 	_ASCFound
.1399					_ASCNext:
.1399	e8		inx				inx									; next entry
.139a	e8		inx				inx
.139b	e8		inx				inx
.139c	bd 58 12	lda $1258,x			lda 	AssemblerSpecialCases,x 	; until table ends
.139f	d0 e8		bne $1389			bne 	_ASCScan
.13a1	18		clc				clc
.13a2	60		rts				rts
.13a3					_ASCFound:
.13a3	bd 5a 12	lda $125a,x			lda 	AssemblerSpecialCases+2,x 	; get the new opcode.
.13a6	48		pha				pha
.13a7	ae f4 0a	ldx $0af4			ldx  	asmMode 					; mode in X
.13aa	bd 0c 13	lda $130c,x			lda		AMDOperandSize,X 			; get the size of the operand in X
.13ad	aa		tax				tax
.13ae	68		pla				pla 								; opcode back
.13af	20 10 11	jsr $1110			jsr 	AsmWriteInstruction 		; output instruction.
.13b2	38		sec				sec
.13b3	60		rts				rts

;******  Return to file: assembler/assembler.asm

.13b4					assemblerHandler:
.13b4	7c b7 13	jmp ($13b7,x)			jmp 	(assemblerVectors,x)
.13b7					assemblerVectors:
>13b7	bd 13					.word _DummyControlHandler ; index 0
>13b9	a5 11					.word AssembleOneInstruction ; index 2
>13bb	77 12					.word AssembleLabel        ; index 4
.13bd					_DummyControlHandler:
.13bd	60		rts			rts

;******  Return to file: basic.asm

.13be					section_end_assembler:
.13be					section_start_device:

;******  Processing file: device/device.asm


;******  Processing file: device/option_x16/x16break.asm

.13be					X16Break:
.13be	20 e1 ff	jsr $ffe1			jsr 	$FFE1
.13c1	f0 01		beq $13c4			beq 	_IsBreak
.13c3	60		rts				rts
.13c4					_IsBreak:
.13c4	a2 21		ldx #$21			ldx 	#ErrorID_Break
.13c6	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: device/device.asm


;******  Processing file: device/option_x16/x16file.asm

.13c9					ExternSave:
.13c9	98		tya				tya
.13ca	48		pha				pha
.13cb	20 19 14	jsr $1419			jsr 	ExternGetLength 			; get length of file into A name YX
.13ce	20 bd ff	jsr $ffbd			jsr 	$FFBD 						; set name
.13d1	a9 01		lda #$01			lda 	#1
.13d3	a2 08		ldx #$08			ldx 	#8	 						; device #8
.13d5	a0 00		ldy #$00			ldy 	#0
.13d7	20 ba ff	jsr $ffba			jsr 	$FFBA 						; set LFS
.13da	a5 51		lda $51				lda 	esInt0+1 					; copy start of save address to temp0
.13dc	85 2a		sta $2a				sta 	temp0
.13de	a5 59		lda $59				lda 	esInt1+1
.13e0	85 2b		sta $2b				sta 	temp0+1
.13e2	a6 52		ldx $52				ldx 	esInt0+2 					; end address
.13e4	a4 5a		ldy $5a				ldy 	esInt1+2
.13e6	a9 2a		lda #$2a			lda 	#temp0 						; ref to start address
.13e8	20 d8 ff	jsr $ffd8			jsr 	$FFD8 						; save
.13eb	b0 03		bcs $13f0			bcs 	_ESSave
.13ed	68		pla				pla
.13ee	a8		tay				tay
.13ef	60		rts				rts
.13f0					_ESSave:
.13f0	a2 1f		ldx #$1f			ldx 	#ErrorID_Save
.13f2	20 18 15	jsr $1518		jsr	errorHandler
.13f5					ExternLoad:
.13f5	98		tya				tya
.13f6	48		pha				pha
.13f7	20 19 14	jsr $1419			jsr 	ExternGetLength 			; get length of file into A name YX
.13fa	20 bd ff	jsr $ffbd			jsr 	$FFBD 						; set name
.13fd	a9 01		lda #$01			lda 	#1
.13ff	a2 08		ldx #$08			ldx 	#8	 						; device #8
.1401	a0 00		ldy #$00			ldy 	#0
.1403	20 ba ff	jsr $ffba			jsr 	$FFBA 						; set LFS
.1406	a6 51		ldx $51				ldx 	esInt0+1 					; load address
.1408	a4 59		ldy $59				ldy 	esInt1+1
.140a	a9 00		lda #$00			lda 	#0 							; load command
.140c	20 d5 ff	jsr $ffd5			jsr 	$FFD5
.140f	b0 03		bcs $1414			bcs 	_ESLoad
.1411	68		pla				pla
.1412	a8		tay				tay
.1413	60		rts				rts
.1414					_ESLoad:
.1414	a2 20		ldx #$20			ldx 	#ErrorID_Load
.1416	20 18 15	jsr $1518		jsr	errorHandler
.1419					ExternGetLength:
.1419	a5 50		lda $50				lda 	esInt0 						; length into A.
.141b	85 2a		sta $2a				sta 	temp0
.141d	a5 58		lda $58				lda 	esInt1
.141f	85 2b		sta $2b				sta 	temp0+1
.1421	a0 00		ldy #$00			ldy 	#0
.1423	b1 2a		lda ($2a),y			lda 	(temp0),y
.1425	a6 50		ldx $50				ldx 	esInt0 						; name into YX
.1427	a4 58		ldy $58				ldy 	esInt1
.1429	e8		inx				inx 								; advance over the length pointer.
.142a	d0 01		bne $142d			bne 	_ESNoCarry
.142c	c8		iny				iny
.142d					_ESNoCarry:
.142d	60		rts				rts

;******  Return to file: device/device.asm


;******  Processing file: device/option_x16/x16io.asm

=240					MaxLineInputSize = 240
.0af6					bufferCount:
>0af6							.fill 	0
.0af6					bufferStorage:
>0af6							.fill 	MaxLineInputSize
.142e					IOControlHandler:
.142e	c9 00		cmp #$00			cmp 	#0
.1430	d0 12		bne $1444			bne		_CHExit
.1432	a9 0f		lda #$0f			lda 	#15 						; switch to upper/lower case mode
.1434	20 5d 14	jsr $145d			jsr 	IOPrintChar
.1437	a9 02		lda #$02			lda 	#2 							; green on black and clear screen
.1439	20 89 14	jsr $1489			jsr 	IOInk
.143c	a9 00		lda #$00			lda 	#0
.143e	20 9d 14	jsr $149d			jsr 	IOPaper
.1441	20 45 14	jsr $1445			jsr 	IOClearScreen
.1444					_CHExit:
.1444	60		rts				rts
.1445					IOClearScreen:
.1445	48		pha				pha
.1446	a9 93		lda #$93			lda	 	#147 						; char code $93 clears screen
.1448	20 5d 14	jsr $145d			jsr 	IOPrintChar
.144b	68		pla				pla
.144c	60		rts				rts
.144d					IONewLine:
.144d	48		pha				pha
.144e	a9 0d		lda #$0d			lda 	#13
.1450	20 5d 14	jsr $145d			jsr 	IOPrintChar
.1453	68		pla				pla
.1454	60		rts				rts
.1455					IOTab:
.1455	48		pha				pha
.1456	a9 20		lda #$20			lda 	#32
.1458	20 5d 14	jsr $145d			jsr 	IOPrintChar
.145b	68		pla				pla
.145c	60		rts				rts
.145d					IOPrintAscii:
.145d					IOPrintChar:
.145d	aa		tax				tax 								; save in X so we can save Y
.145e	5a		phy				phy
.145f	8a		txa				txa
.1460	c9 08		cmp #$08			cmp 	#8 							; make BS (8) onto CHR$(14) which is the
.1462	d0 02		bne $1466			bne 	_IOPCNotBS 					; Commodore/X16 backspace code.
.1464	a9 14		lda #$14			lda 	#$14
.1466					_IOPCNotBS:
.1466	20 d2 ff	jsr $ffd2			jsr 	$FFD2 						; CBM OS Call.
.1469	7a		ply				ply
.146a	60		rts				rts
.146b					IOInkey:
.146b	98		tya				tya
.146c	48		pha				pha
.146d	20 e4 ff	jsr $ffe4			jsr 	$FFE4
.1470	85 32		sta $32				sta 	tempShort
.1472	68		pla				pla
.1473	a8		tay				tay
.1474	a5 32		lda $32				lda 	tempShort					; no key pressed.
.1476	f0 10		beq $1488			beq 	_IOIExit
.1478	c9 0d		cmp #$0d			cmp 	#13 						; allow CR (13)
.147a	f0 0c		beq $1488			beq 	_IOIExit
.147c	c9 14		cmp #$14			cmp 	#$14 						; backspace code ($14) returns 8.
.147e	f0 06		beq $1486			beq 	_IOIBackspace
.1480	c9 20		cmp #$20			cmp 	#32 						; no other control allowed.
.1482	90 e7		bcc $146b			bcc 	IOInkey
.1484	b0 02		bcs $1488			bcs 	_IOIExit
.1486					_IOIBackspace:
.1486	a9 08		lda #$08			lda 	#8 							; return chr(8)
.1488					_IOIExit:
.1488	60		rts				rts
.1489					IOInk:
.1489	48		pha				pha
.148a	29 07		and #$07			and 	#7 							; 8 primaries
.148c	aa		tax				tax
.148d	bd 95 14	lda $1495,x			lda 	_IOColourTable,x 			; look up CBM code and print it.
.1490	20 5d 14	jsr $145d			jsr 	IOPrintChar
.1493	68		pla				pla
.1494	60		rts				rts
.1495					_IOColourTable:
>1495	90						.byte 	$90 					; 0 Black
>1496	96						.byte 	$96 					; 1 Red
>1497	1e						.byte 	$1E 					; 2 Green
>1498	9e						.byte 	$9E 					; 3 Yellow
>1499	9a						.byte 	$9A 					; 4 Blue
>149a	9c						.byte 	$9C 					; 5 Magenta
>149b	9f						.byte 	$9F 					; 6 Cyan
>149c	05						.byte 	$05 					; 7 White
.149d					IOPaper:
.149d	48		pha				pha
.149e	48		pha				pha
.149f	a9 01		lda #$01			lda 	#1 						; 1 swaps fgr/bgr, so we swap them, set fgr
.14a1	20 5d 14	jsr $145d			jsr 	IOPrintChar 			; and then swap them again.
.14a4	68		pla				pla
.14a5	20 89 14	jsr $1489			jsr 	IOInk
.14a8	a9 01		lda #$01			lda 	#1
.14aa	20 5d 14	jsr $145d			jsr 	IOPrintChar
.14ad	68		pla				pla
.14ae	60		rts				rts
.14af					IOLocate:
.14af	48		pha				pha
.14b0	a9 13		lda #$13			lda 	#$13 					; home cursor code
.14b2	20 5d 14	jsr $145d			jsr 	IOPrintChar
.14b5	a9 11		lda #$11			lda 	#$11 	 				; print Y x $11 (down)
.14b7	20 be 14	jsr $14be			jsr 	_IOLoc2
.14ba	68		pla				pla
.14bb	a8		tay				tay
.14bc	a9 1d		lda #$1d			lda 	#$1D 					; print Y x $1D (right)
.14be					_IOLoc2:
.14be	c0 00		cpy #$00			cpy 	#0
.14c0	f0 06		beq $14c8			beq 	_IOLocExit
.14c2	20 5d 14	jsr $145d			jsr 	IOPrintChar
.14c5	88		dey				dey
.14c6	d0 f6		bne $14be			bne 	_IOLoc2
.14c8					_IOLocExit:
.14c8	60		rts				rts
.14c9					IOInput:
.14c9	a9 00		lda #$00			lda 	#0
.14cb	8d f6 0a	sta $0af6			sta 	bufferCount
.14ce					_IOILoop:
.14ce	20 cf ff	jsr $ffcf			jsr 	$FFCF
.14d1	c9 0d		cmp #$0d			cmp 	#13
.14d3	f0 10		beq $14e5			beq 	_IOIExit
.14d5	ae f6 0a	ldx $0af6			ldx 	bufferCount
.14d8	e0 f0		cpx #$f0			cpx 	#MaxLineInputSize
.14da	f0 f2		beq $14ce			beq 	_IOILoop
.14dc	ee f6 0a	inc $0af6			inc 	bufferCount
.14df	9d f7 0a	sta $0af7,x			sta 	bufferStorage+1,x
.14e2	4c ce 14	jmp $14ce			jmp 	_IOILoop
.14e5					_IOIExit:
.14e5	a9 f6		lda #$f6			lda 	#(bufferCount) & $FF
.14e7	85 2a		sta $2a				sta 	temp0
.14e9	a9 0a		lda #$0a			lda 	#(bufferCount) >> 8
.14eb	85 2b		sta $2b				sta 	1+(temp0)
.14ed	60		rts				rts

;******  Return to file: device/device.asm


;******  Processing file: device/option_x16/x16timer.asm

.14ee					IOReadTimer:
.14ee	20 de ff	jsr $ffde			jsr 	$FFDE 						; reads timer into YXA so we want only YA
.14f1	48		pha				pha
.14f2	8a		txa				txa
.14f3	a8		tay				tay
.14f4	68		pla				pla
.14f5	60		rts				rts

;******  Return to file: device/device.asm

.14f6					deviceHandler:
.14f6	7c f9 14	jmp ($14f9,x)			jmp 	(deviceVectors,x)
.14f9					deviceVectors:
>14f9	2e 14					.word IOControlHandler     ; index 0
>14fb	be 13					.word X16Break             ; index 2
>14fd	45 14					.word IOClearScreen        ; index 4
>14ff	4d 14					.word IONewLine            ; index 6
>1501	89 14					.word IOInk                ; index 8
>1503	6b 14					.word IOInkey              ; index 10
>1505	c9 14					.word IOInput              ; index 12
>1507	f5 13					.word ExternLoad           ; index 14
>1509	af 14					.word IOLocate             ; index 16
>150b	9d 14					.word IOPaper              ; index 18
>150d	5d 14					.word IOPrintChar          ; index 20
>150f	5d 14					.word IOPrintAscii         ; index 22
>1511	c9 13					.word ExternSave           ; index 24
>1513	55 14					.word IOTab                ; index 26
>1515	ee 14					.word IOReadTimer          ; index 28
.1517					_DummyControlHandler:
.1517	60		rts			rts

;******  Return to file: basic.asm

.1518					section_end_device:
.1518					section_start_error:

;******  Processing file: error/error.asm


;******  Processing file: error/errorhandler.asm

.1518					ErrorHandler:
.1518	8a		txa				txa
.1519	48		pha				pha
.151a	a9 01		lda #$01			lda 	#1 							; red
.151c	a2 08		ldx #$08		ldx	#8
.151e	20 f6 14	jsr $14f6		jsr	deviceHandler
.1521	68		pla				pla
.1522	aa		tax				tax
.1523	a9 8e		lda #$8e			lda 	#(ErrorTextList) & $FF
.1525	85 2a		sta $2a				sta 	temp0
.1527	a9 15		lda #$15			lda 	#(ErrorTextList) >> 8
.1529	85 2b		sta $2b				sta 	1+(temp0)
.152b	ca		dex		_EHFind:dex									; errors start at 1
.152c	f0 10		beq $153e			beq 	_EHFound
.152e	a0 00		ldy #$00			ldy 	#0 							; goto next text message, add length + 1 to the pointer.
.1530	38		sec				sec
.1531	a5 2a		lda $2a				lda 	temp0
.1533	71 2a		adc ($2a),y			adc 	(temp0),y
.1535	85 2a		sta $2a				sta 	temp0
.1537	90 f2		bcc $152b			bcc 	_EHFind
.1539	e6 2b		inc $2b				inc 	temp0+1
.153b	4c 2b 15	jmp $152b			jmp 	_EHFind
.153e					_EHFound:
.153e	20 52 18	jsr $1852			jsr 	EHPrintAscii 				; print the string "temp0" now points to.
.1541	a0 00		ldy #$00			ldy 	#0 							; in a line, e.g. the offset to next is non zero.
.1543	b1 28		lda ($28),y			lda 	(codePtr),y
.1545	f0 39		beq $1580			beq 	_EHNoLine
.1547	a5 29		lda $29				lda 	codePtr+1 					; code running from the command line.
.1549	cd c9 0a	cmp $0ac9			cmp 	basePage+1
.154c	90 32		bcc $1580			bcc 	_EHNoLine
.154e	a9 8a		lda #$8a			lda 	#(EHAtMsg) & $FF
.1550	85 2a		sta $2a				sta 	temp0
.1552	a9 15		lda #$15			lda 	#(EHAtMsg) >> 8
.1554	85 2b		sta $2b				sta 	1+(temp0)
.1556	20 52 18	jsr $1852			jsr 	EHPrintAscii
.1559	a0 01		ldy #$01			ldy 	#1 							; set up line number in TOS
.155b	a2 00		ldx #$00			ldx 	#0
.155d	b1 28		lda ($28),y			lda 	(codePtr),y
.155f	95 50		sta $50,x			sta 	esInt0,x
.1561	c8		iny				iny
.1562	b1 28		lda ($28),y			lda 	(codePtr),y
.1564	95 58		sta $58,x			sta 	esInt1,x
.1566	a9 00		lda #$00			lda 	#0
.1568	95 60		sta $60,x			sta 	esInt2,x
.156a	95 68		sta $68,x			sta 	esInt3,x
.156c	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.156e	85 2a		sta $2a				sta 	temp0
.1570	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.1572	85 2b		sta $2b				sta 	1+(temp0)
.1574	a0 0a		ldy #$0a			ldy 	#10 						; in base 10.
.1576	a9 00		lda #$00			lda 	#0							; stack position zero.
.1578	a2 12		ldx #$12		ldx	#18
.157a	20 36 37	jsr $3736		jsr	mainHandler
.157d	20 52 18	jsr $1852			jsr 	EHPrintAscii
.1580					_EHNoLine:
.1580	a2 06		ldx #$06		ldx	#6
.1582	20 f6 14	jsr $14f6		jsr	deviceHandler
.1585	a2 04		ldx #$04		ldx	#4
.1587	20 9c 20	jsr $209c		jsr	interactionHandler
.158a					EHAtMsg:
>158a	03 20 40 20					.text 	3," @ "

;******  Processing file: error/../generated/errortext.inc

.158e					ErrorTextList:
>158e	13 46 65 61 74 75 72 65			.text 19,"Feature not Present"
>1596	20 6e 6f 74 20 50 72 65 73 65 6e 74
>15a2	0c 53 79 6e 74 61 78 20			.text 12,"Syntax Error"
>15aa	45 72 72 6f 72
>15af	0f 4d 6f 64 75 6c 65 20			.text 15,"Module disabled"
>15b7	64 69 73 61 62 6c 65 64
>15bf	10 41 73 73 65 72 74 69			.text 16,"Assertion failed"
>15c7	6f 6e 20 66 61 69 6c 65 64
>15d0	0e 44 69 76 69 64 65 20			.text 14,"Divide By Zero"
>15d8	42 79 20 5a 65 72 6f
>15df	04 53 74 6f 70				.text 4,"Stop"
>15e4	0d 54 79 70 65 20 4d 69			.text 13,"Type Mismatch"
>15ec	73 6d 61 74 63 68
>15f2	0d 49 6c 6c 65 67 61 6c			.text 13,"Illegal Value"
>15fa	20 56 61 6c 75 65
>1600	15 4d 69 73 73 69 6e 67			.text 21,"Missing right bracket"
>1608	20 72 69 67 68 74 20 62 72 61 63 6b 65 74
>1616	0d 4d 69 73 73 69 6e 67			.text 13,"Missing comma"
>161e	20 63 6f 6d 6d 61
>1624	11 4d 69 73 73 69 6e 67			.text 17,"Missing reference"
>162c	20 72 65 66 65 72 65 6e 63 65
>1636	15 4c 69 6e 65 20 4e 75			.text 21,"Line Number not found"
>163e	6d 62 65 72 20 6e 6f 74 20 66 6f 75 6e 64
>164c	0f 53 74 72 69 6e 67 20			.text 15,"String too long"
>1654	74 6f 6f 20 6c 6f 6e 67
>165c	14 52 45 54 55 52 4e 20			.text 20,"RETURN without GOSUB"
>1664	77 69 74 68 6f 75 74 20 47 4f 53 55 42
>1671	14 55 4e 54 49 4c 20 77			.text 20,"UNTIL without REPEAT"
>1679	69 74 68 6f 75 74 20 52 45 50 45 41 54
>1686	10 4e 45 58 54 20 77 69			.text 16,"NEXT without FOR"
>168e	74 68 6f 75 74 20 46 4f 52
>1697	12 57 45 4e 44 20 77 69			.text 18,"WEND without WHILE"
>169f	74 68 6f 75 74 20 57 48 49 4c 45
>16aa	14 45 4e 44 50 52 4f 43			.text 20,"ENDPROC without PROC"
>16b2	20 77 69 74 68 6f 75 74 20 50 52 4f 43
>16bf	0e 42 61 64 20 4e 45 58			.text 14,"Bad NEXT index"
>16c7	54 20 69 6e 64 65 78
>16ce	17 53 74 72 75 63 74 75			.text 23,"Structures nested wrong"
>16d6	72 65 73 20 6e 65 73 74 65 64 20 77 72 6f 6e 67
>16e6	16 43 61 6e 6e 6f 74 20			.text 22,"Cannot create variable"
>16ee	63 72 65 61 74 65 20 76 61 72 69 61 62 6c 65
>16fd	19 52 65 74 75 72 6e 20			.text 25,"Return stack out of space"
>1705	73 74 61 63 6b 20 6f 75 74 20 6f 66 20 73 70 61
>1715	63 65
>1717	11 55 6e 6b 6e 6f 77 6e			.text 17,"Unknown Procedure"
>171f	20 50 72 6f 63 65 64 75 72 65
>1729	17 50 61 72 61 6d 65 74			.text 23,"Parameters do not match"
>1731	65 72 73 20 64 6f 20 6e 6f 74 20 6d 61 74 63 68
>1741	15 41 72 72 61 79 20 61			.text 21,"Array already defined"
>1749	6c 72 65 61 64 79 20 64 65 66 69 6e 65 64
>1757	12 44 49 4d 20 72 65 71			.text 18,"DIM requires array"
>175f	75 69 72 65 73 20 61 72 72 61 79
>176a	0f 42 61 64 20 61 72 72			.text 15,"Bad array index"
>1772	61 79 20 69 6e 64 65 78
>177a	1d 57 72 6f 6e 67 20 6e			.text 29,"Wrong number of array indices"
>1782	75 6d 62 65 72 20 6f 66 20 61 72 72 61 79 20 69
>1792	6e 64 69 63 65 73
>1798	0b 4f 75 74 20 6f 66 20			.text 11,"Out of data"
>17a0	64 61 74 61
>17a4	14 43 61 6e 6e 6f 74 20			.text 20,"Cannot tokenise line"
>17ac	74 6f 6b 65 6e 69 73 65 20 6c 69 6e 65
>17b9	0b 53 61 76 65 20 66 61			.text 11,"Save failed"
>17c1	69 6c 65 64
>17c5	0b 4c 6f 61 64 20 66 61			.text 11,"Load failed"
>17cd	69 6c 65 64
>17d1	05 42 72 65 61 6b			.text 5,"Break"
>17d7	0d 4f 75 74 20 6f 66 20			.text 13,"Out of memory"
>17df	6d 65 6d 6f 72 79
>17e5	16 45 78 70 72 65 73 73			.text 22,"Expression too complex"
>17ed	69 6f 6e 20 74 6f 6f 20 63 6f 6d 70 6c 65 78
>17fc	10 42 61 64 20 4f 70 65			.text 16,"Bad Operand/Mode"
>1804	72 61 6e 64 2f 4d 6f 64 65
>180d	13 42 72 61 6e 63 68 20			.text 19,"Branch out of range"
>1815	6f 75 74 20 6f 66 20 72 61 6e 67 65
>1821	13 4c 61 62 65 6c 20 63			.text 19,"Label changed value"
>1829	68 61 6e 67 65 64 20 76 61 6c 75 65
>1835	12 4e 6f 20 53 70 72 69			.text 18,"No Sprite Selected"
>183d	74 65 20 53 65 6c 65 63 74 65 64
>1848	08 48 61 72 64 77 61 72			.text 8,"Hardware"
>1850	65
>1851	00					.byte 0

;******  Return to file: error/errorhandler.asm

.1852					EHPrintAscii:
.1852	a0 00		ldy #$00			ldy 	#0
.1854	b1 2a		lda ($2a),y			lda 	(temp0),y
.1856	aa		tax				tax
.1857	f0 0f		beq $1868			beq 	_EHPExit
.1859					_EHPLoop:
.1859	c8		iny				iny
.185a	8a		txa				txa
.185b	48		pha				pha
.185c	b1 2a		lda ($2a),y			lda 	(temp0),y
.185e	a2 16		ldx #$16		ldx	#22
.1860	20 f6 14	jsr $14f6		jsr	deviceHandler
.1863	68		pla				pla
.1864	aa		tax				tax
.1865	ca		dex				dex
.1866	d0 f1		bne $1859			bne 	_EHPLoop
.1868					_EHPExit:
.1868	60		rts				rts

;******  Return to file: error/error.asm


;******  Return to file: basic.asm

.1869					section_end_error:
.1869					section_start_extension:

;******  Processing file: extension/extension.asm


;******  Processing file: extension/extensionhandler.asm

.1869					ExtensionHandler:
.1869	c9 fe		cmp #$fe			cmp 	#$FE 						; check for force mode 0
.186b	f0 16		beq $1883			beq 	_ExtensionForce
.186d	c9 ff		cmp #$ff			cmp 	#$FF						; A = $FF command, otherwise unary function stack level.
.186f	d0 08		bne $1879			bne 	_ExtensionUnary 			; is passed in A.
.1871	b1 28		lda ($28),y			lda 	(codePtr),y 				; so this is a command, using Group 2.
.1873	c8		iny				iny
.1874	0a		asl a				asl 	a
.1875	aa		tax				tax
.1876	7c 7a 18	jmp ($187a,x)			jmp 	(Group2Vectors-12,x)
.1879					_ExtensionUnary:
.1879	48		pha				pha 								; save stack pos in A
.187a	b1 28		lda ($28),y			lda 	(codePtr),y 				; get shifted token, double into X
.187c	c8		iny				iny
.187d	0a		asl a				asl 	a
.187e	aa		tax				tax
.187f	68		pla				pla 								; restore stack pos and call group3 command.
.1880	7c 86 18	jmp ($1886,x)			jmp 	(Group3Vectors-12,X)
.1883					_ExtensionForce:
.1883	4c 21 1c	jmp $1c21			jmp 	ForceMode0

;******  Processing file: extension/../generated/tokenvectors2.inc

.1886					Group2Vectors:
>1886	49 1d					.word	Command_VPoke            ; $86 vpoke
>1888	4c 1d					.word	Command_VDoke            ; $87 vdoke
>188a	21 1d					.word	Command_VLoad            ; $88 vload
>188c	33 1c					.word	CommandMode              ; $89 mode
>188e	ea 1c					.word	CommandPalette           ; $8a palette
>1890	1e 1a					.word	CommandSprite            ; $8b sprite

;******  Return to file: extension/extensionhandler.asm


;******  Processing file: extension/../generated/tokenvectors3.inc

.1892					Group3Vectors:
>1892	95 1d					.word	Command_VPeek            ; $86 vpeek(
>1894	98 1d					.word	Command_VDeek            ; $87 vdeek(
>1896	f1 1b					.word	Sprite_GetX              ; $88 sprite.x(
>1898	f4 1b					.word	Sprite_GetY              ; $89 sprite.y(
>189a	61 19					.word	FunctionCollide          ; $8a hit(
>189c	d9 18					.word	Unary_JoyX               ; $8b joy.x(
>189e	dc 18					.word	Unary_JoyY               ; $8c joy.y(
>18a0	17 19					.word	Unary_JButton            ; $8d joy.b(
>18a2	ac 18					.word	Unary_Clock              ; $8e clock(

;******  Return to file: extension/extensionhandler.asm

.18a4					XEvaluateInteger:
.18a4	8a		txa				txa
.18a5	a2 0a		ldx #$0a		ldx	#10
.18a7	20 36 37	jsr $3736		jsr	mainHandler
.18aa	aa		tax				tax
.18ab	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/miscellany/clock.asm

.18ac					Unary_Clock:
.18ac	a2 0c		ldx #$0c		ldx	#12
.18ae	20 36 37	jsr $3736		jsr	mainHandler
.18b1	48		pha				pha 								; save stack pos
.18b2	a2 04		ldx #$04		ldx	#4
.18b4	20 36 37	jsr $3736		jsr	mainHandler
.18b7	98		tya				tya
.18b8	48		pha				pha
.18b9	20 50 ff	jsr $ff50			jsr 	$FF50
.18bc	68		pla				pla
.18bd	a8		tay				tay
.18be	68		pla				pla 								; restore, repush, put into X to read offset
.18bf	48		pha				pha
.18c0	aa		tax				tax
.18c1	b5 50		lda $50,x			lda 	esInt0,x 					; must be 0-5
.18c3	c9 06		cmp #$06			cmp 	#6
.18c5	b0 0d		bcs $18d4			bcs 	_UCValue
.18c7	aa		tax				tax 								; index in X and read RTC.
.18c8	b5 02		lda $02,x			lda 	2,x
.18ca	85 32		sta $32				sta 	tempshort
.18cc	68		pla				pla 								; restore number stack index.
.18cd	aa		tax				tax
.18ce	a5 32		lda $32				lda 	tempShort
.18d0	95 50		sta $50,x			sta 	esInt0,x 					; rest are set up.
.18d2	8a		txa				txa
.18d3	60		rts				rts
.18d4					_UCValue:
.18d4	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.18d6	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/miscellany/joystick.asm

.18d9					Unary_JoyX:
.18d9	38		sec				sec
.18da	b0 01		bcs $18dd			bcs 	JoystickRead
.18dc					Unary_JoyY:
.18dc	18		clc				clc
.18dd					JoystickRead:
.18dd	48		pha				pha 								; save stack position
.18de	08		php				php 								; save test flag.
.18df	a2 04		ldx #$04		ldx	#4
.18e1	20 36 37	jsr $3736		jsr	mainHandler
.18e4	20 3e 19	jsr $193e			jsr 	ReadJoystick 				; read it.
.18e7	28		plp				plp
.18e8	b0 02		bcs $18ec			bcs 	_JRNoShift 					; if Y, shift right twice so accessing Y buttons
.18ea	4a		lsr a				lsr 	a
.18eb	4a		lsr a				lsr 	a
.18ec					_JRNoShift:
.18ec	29 03		and #$03			and 	#3 							; isolate the test bits.
.18ee	f0 0d		beq $18fd			beq 	JoyReturnA 					; if nothing pressed, return A.
.18f0	c9 03		cmp #$03			cmp 	#3
.18f2	f0 07		beq $18fb			beq 	JoyReturnFalse 				; could be both on a keyboard.
.18f4	4a		lsr a				lsr 	a 							; bit 0 set, its +1
.18f5	b0 16		bcs $190d			bcs 	JoyReturn1
.18f7					JoyReturnTrue:
.18f7	a9 ff		lda #$ff			lda 	#$FF
.18f9	d0 02		bne $18fd			bne 	JoyReturnA
.18fb					JoyReturnFalse:
.18fb	a9 00		lda #$00			lda 	#0
.18fd					JoyReturnA:
.18fd	85 32		sta $32				sta 	tempShort 					; return A
.18ff	68		pla				pla
.1900	aa		tax				tax
.1901	a5 32		lda $32				lda 	tempShort
.1903	95 50		sta $50,x			sta 	esInt0,x
.1905					JoyReturn13:
.1905	95 58		sta $58,x			sta 	esInt1,x
.1907	95 60		sta $60,x			sta 	esInt2,x
.1909	95 68		sta $68,x			sta 	esInt3,x
.190b	8a		txa				txa 								; return NSP in A
.190c	60		rts				rts
.190d					JoyReturn1:
.190d	68		pla				pla
.190e	aa		tax				tax
.190f	a9 01		lda #$01			lda 	#1
.1911	95 50		sta $50,x			sta 	esInt0,x
.1913	a9 00		lda #$00			lda 	#0
.1915	f0 ee		beq $1905			beq 	JoyReturn13
.1917					Unary_JButton:
.1917	48		pha				pha 								; save X on stack, put in X
.1918	a2 0c		ldx #$0c		ldx	#12
.191a	20 36 37	jsr $3736		jsr	mainHandler
.191d	aa		tax				tax 								; get value to check, push on stack.
.191e	b5 50		lda $50,x			lda 	esInt0,x
.1920	c9 04		cmp #$04			cmp 	#4 							; check button 0-3
.1922	b0 15		bcs $1939			bcs 	_UJBadValue
.1924	69 05		adc #$05			adc 	#5 							; four more shifts to get the bit into carry.
.1926	48		pha				pha 								; save that shift count on the stack.
.1927	a2 04		ldx #$04		ldx	#4
.1929	20 36 37	jsr $3736		jsr	mainHandler
.192c	68		pla				pla
.192d	aa		tax				tax
.192e	20 3e 19	jsr $193e			jsr 	ReadJoystick 				; joystick read
.1931					_UJShift:
.1931	4a		lsr a				lsr 	a
.1932	ca		dex				dex
.1933	d0 fc		bne $1931			bne 	_UJShift
.1935	b0 c0		bcs $18f7			bcs 	JoyReturnTrue
.1937	90 c2		bcc $18fb			bcc 	JoyReturnFalse
.1939					_UJBadValue:
.1939	a2 28		ldx #$28			ldx 	#ErrorID_Hardware
.193b	20 18 15	jsr $1518		jsr	errorHandler
.193e					ReadJoystick:
.193e	8a		txa				txa
.193f	48		pha				pha
.1940	98		tya				tya
.1941	48		pha				pha
.1942	a9 00		lda #$00			lda 	#0
.1944	20 56 ff	jsr $ff56			jsr 	$FF56
.1947	c0 00		cpy #$00			cpy 	#0
.1949	d0 11		bne $195c			bne 	_RJError
.194b	c9 00		cmp #$00			cmp 	#0 							; bug, returns $00 initially
.194d	d0 02		bne $1951			bne 	_RJNoBug
.194f	a9 ff		lda #$ff			lda 	#$FF
.1951					_RJNoBug:
.1951	85 32		sta $32				sta 	tempShort
.1953	68		pla				pla
.1954	a8		tay				tay
.1955	68		pla				pla
.1956	aa		tax				tax
.1957	a5 32		lda $32				lda 	tempShort
.1959	49 ff		eor #$ff			eor 	#$FF 						; active 1 bit.
.195b	60		rts				rts
.195c					_RJError:
.195c	a2 28		ldx #$28			ldx 	#ErrorID_Hardware
.195e	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/sprites/collide.asm

.0be6					hitSprite1:
>0be6							.fill 	1 							; this won't work ... if you nest HIT() which
.0be7					hitSprite2:
>0be7							.fill 	1
.0be8					hitRange:
>0be8							.fill 	1
.1961					FunctionCollide:
.1961	48		pha				pha 								; save and put index into X
.1962	aa		tax				tax
.1963	a9 00		lda #$00			lda 	#0 							; set hit range to default.
.1965	8d e8 0b	sta $0be8			sta 	hitRange
.1968	20 0d 1a	jsr $1a0d			jsr 	_FCGetSpriteID
.196b	8d e6 0b	sta $0be6			sta 	hitSprite1
.196e	8a		txa				txa
.196f	48		pha				pha
.1970	a2 02		ldx #$02		ldx	#2
.1972	20 36 37	jsr $3736		jsr	mainHandler
.1975	68		pla				pla
.1976	aa		tax				tax
.1977	20 0d 1a	jsr $1a0d			jsr 	_FCGetSpriteID
.197a	8d e7 0b	sta $0be7			sta 	hitSprite2
.197d	b1 28		lda ($28),y			lda 	(codePtr),y 				; is there a third parameter
.197f	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.1981	f0 13		beq $1996			beq 	_FCParam2
.1983	8a		txa				txa
.1984	48		pha				pha
.1985	a2 02		ldx #$02		ldx	#2
.1987	20 36 37	jsr $3736		jsr	mainHandler
.198a	68		pla				pla
.198b	a2 0c		ldx #$0c		ldx	#12
.198d	20 36 37	jsr $3736		jsr	mainHandler
.1990	aa		tax				tax
.1991	b5 50		lda $50,x			lda 	esInt0,x
.1993	8d e8 0b	sta $0be8			sta 	hitRange
.1996					_FCParam2:
.1996	a2 04		ldx #$04		ldx	#4
.1998	20 36 37	jsr $3736		jsr	mainHandler
.199b	68		pla				pla 								; set X to point to the stack again.
.199c	48		pha				pha
.199d	aa		tax				tax
.199e	98		tya				tya
.199f	48		pha				pha
.19a0	18		clc				clc 								; do it with the horizontal values.
.19a1	20 c3 19	jsr $19c3			jsr 	_FCCheck
.19a4	90 0a		bcc $19b0			bcc 	_FCFail
.19a6	38		sec				sec 								; do it with the vertical values.
.19a7	20 c3 19	jsr $19c3			jsr 	_FCCheck
.19aa	90 04		bcc $19b0			bcc 	_FCFail
.19ac	a9 ff		lda #$ff			lda 	#255 						; pass, return -1
.19ae	d0 02		bne $19b2			bne 	_FCReturnA
.19b0					_FCFail:
.19b0	a9 00		lda #$00			lda 	#0 							; return 0, it didn't work.
.19b2					_FCReturnA:
.19b2	85 32		sta $32				sta 	tempShort 					; put result in tempShort
.19b4	68		pla				pla
.19b5	a8		tay				tay
.19b6	68		pla				pla 								; restore stack, return result and exit.
.19b7	aa		tax				tax
.19b8	a5 32		lda $32				lda 	tempShort
.19ba	95 50		sta $50,x			sta 	esInt0,x
.19bc	95 58		sta $58,x			sta 	esInt1,x
.19be	95 60		sta $60,x			sta 	esInt2,x
.19c0	95 68		sta $68,x			sta 	esInt3,x
.19c2	60		rts				rts
.19c3					_FCCheck:
.19c3	08		php				php 								; save the H/V flag twice
.19c4	08		php				php
.19c5	ad e6 0b	lda $0be6			lda 	hitSprite1 					; select sprite 1 and read its location
.19c8	20 4b 1b	jsr $1b4b			jsr 	SelectSpriteA 				; into X
.19cb	28		plp				plp
.19cc	20 ad 1b	jsr $1bad			jsr 	SpriteReadCoordinate
.19cf	ad e7 0b	lda $0be7			lda 	hitSprite2					; now repeat for sprite 2 and location X+1
.19d2	20 4b 1b	jsr $1b4b			jsr 	SelectSpriteA
.19d5	e8		inx				inx
.19d6	28		plp				plp
.19d7	20 ad 1b	jsr $1bad			jsr 	SpriteReadCoordinate
.19da	ca		dex				dex
.19db	38		sec				sec 								; calculate |s1.c-s2.c| put in temp0
.19dc	b5 50		lda $50,x			lda 	esInt0,x
.19de	f5 51		sbc $51,x			sbc 	esInt0+1,x
.19e0	85 2a		sta $2a				sta 	temp0
.19e2	b5 58		lda $58,x			lda 	esInt1,x
.19e4	f5 59		sbc $59,x			sbc 	esInt1+1,x
.19e6	85 2b		sta $2b				sta 	temp0+1
.19e8	10 0d		bpl $19f7			bpl 	_FCCIsPositive
.19ea	38		sec				sec 								; if -ve calculate |difference|
.19eb	a9 00		lda #$00			lda 	#0
.19ed	e5 2a		sbc $2a				sbc 	temp0
.19ef	85 2a		sta $2a				sta 	temp0
.19f1	a9 00		lda #$00			lda 	#0
.19f3	e5 2b		sbc $2b				sbc 	temp0+1
.19f5	85 2b		sta $2b				sta 	temp0+1
.19f7					_FCCIsPositive:
.19f7	a5 2b		lda $2b				lda 	temp0+1 					; if range >= 256 then definitely fail.
.19f9	d0 10		bne $1a0b			bne 	_FCCFail
.19fb	18		clc				clc 								; work out required min distance which is
.19fc	b5 68		lda $68,x			lda 	esInt3,x 					; the sum of the half width/heights
.19fe	75 69		adc $69,x			adc 	esInt3+1,x
.1a00	ac e8 0b	ldy $0be8			ldy 	hitRange 					; get the hit range
.1a03	f0 01		beq $1a06			beq 	_FCCNoSetRange 				; override if non zero.
.1a05	98		tya				tya
.1a06					_FCCNoSetRange:
.1a06	c5 2a		cmp $2a				cmp 	temp0 						; result is range > distance
.1a08	f0 01		beq $1a0b			beq 	_FCCFail
.1a0a	60		rts				rts
.1a0b					_FCCFail:
.1a0b	18		clc				clc
.1a0c	60		rts				rts
.1a0d					_FCGetSpriteID:
.1a0d	8a		txa				txa
.1a0e	a2 0c		ldx #$0c		ldx	#12
.1a10	20 36 37	jsr $3736		jsr	mainHandler
.1a13	aa		tax				tax
.1a14	b5 50		lda $50,x			lda 	esInt0,x
.1a16	30 01		bmi $1a19			bmi 	_FCGSValue
.1a18	60		rts				rts
.1a19					_FCGSValue:
.1a19	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.1a1b	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/sprites/sprite.asm

.0be9					currSprite:
>0be9							.fill 	2
.1a1e					CommandSprite:
.1a1e	20 20 1b	jsr $1b20			jsr 	CSCheckOnOff 				; look for TRUE/FALSE
.1a21	d0 0d		bne $1a30			bne 	_CSCheckClear
.1a23	ad 29 9f	lda $9f29			lda 	$9F29 						; sprite enable is bit 6.
.1a26	29 bf		and #$bf			and 	#$BF 						; clear it whatever
.1a28	90 02		bcc $1a2c			bcc 	_CSNotOn 					; if CS turn on, so set it
.1a2a	09 40		ora #$40			ora 	#$40
.1a2c					_CSNotOn:
.1a2c	8d 29 9f	sta $9f29			sta 	$9F29 						; write it back in new state and exit
.1a2f	60		rts				rts
.1a30					_CSCheckClear:
.1a30	a9 00		lda #$00			lda 	#0 							; no sprite currently selected.
.1a32	8d ea 0b	sta $0bea			sta 	currSprite+1
.1a35	b1 28		lda ($28),y			lda 	(codePtr),y 				; check for CLEAR
.1a37	c9 e7		cmp #$e7			cmp 	#TKW_CLEAR
.1a39	d0 05		bne $1a40			bne 	_CSCommandLoop 				; not CLEAR, go to main loop
.1a3b	20 31 1b	jsr $1b31			jsr 	CSClearSprites 				; clear all the sprites
.1a3e	c8		iny				iny 								; consume CLEAR token and exit.
.1a3f	60		rts				rts
.1a40					_CSCommandLoop:
.1a40	20 20 1b	jsr $1b20			jsr 	CSCheckOnOff 				; check sprite on/off
.1a43	f0 2c		beq $1a71			beq 	_CSSetVisibility
.1a45	b1 28		lda ($28),y			lda 	(codePtr),y 				; get and consume character
.1a47	c9 80		cmp #$80			cmp 	#TOK_EOL					; EOL exit.
.1a49	f0 25		beq $1a70			beq 	_CSExit
.1a4b	c8		iny				iny									; consume it
.1a4c	c9 ca		cmp #$ca			cmp 	#TKW_COLON 					; colon exit
.1a4e	f0 20		beq $1a70			beq 	_CSExit
.1a50	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; semantic comma
.1a52	f0 ec		beq $1a40			beq 	_CSCommandLoop
.1a54	c9 da		cmp #$da			cmp		#TKW_IMAGE 					; image ?
.1a56	f0 69		beq $1ac1			beq 	_CSSetImage
.1a58	c9 dc		cmp #$dc			cmp 	#TKW_FLIP 					; flip ?
.1a5a	f0 2b		beq $1a87			beq 	_CSSetFlip
.1a5c	c9 ce		cmp #$ce			cmp 	#TKW_TO 					; to ?
.1a5e	f0 46		beq $1aa6			beq 	_CSSetPos
.1a60	88		dey				dey 								; unpick DEY
.1a61	a9 00		lda #$00			lda 	#0 							; sprite # now at level 0
.1a63	a2 0c		ldx #$0c		ldx	#12
.1a65	20 36 37	jsr $3736		jsr	mainHandler
.1a68	a5 50		lda $50				lda 	esInt0
.1a6a	20 4b 1b	jsr $1b4b			jsr 	SelectSpriteA
.1a6d	4c 40 1a	jmp $1a40			jmp 	_CSCommandLoop
.1a70					_CSExit:
.1a70	60		rts				rts
.1a71					_CSSetVisibility:
.1a71	08		php				php 								; save carry
.1a72	a9 06		lda #$06			lda 	#6 							; set pos to offset 6.
.1a74	20 07 1b	jsr $1b07			jsr 	SpriteSetTarget
.1a77	ad 23 9f	lda $9f23			lda 	$9F23 						; read it.
.1a7a	29 f3		and #$f3			and 	#$F3 						; clear depth bits, disabling it.
.1a7c	28		plp				plp
.1a7d	90 02		bcc $1a81			bcc 	_CSSetOff 					; check if carry was set
.1a7f	09 0c		ora #$0c			ora 	#$0C 						; otherwise set depth bits to 11, on top.
.1a81					_CSSetOff:
.1a81	8d 23 9f	sta $9f23			sta 	$9F23 						; update and loop back
.1a84	4c 40 1a	jmp $1a40			jmp 	_CSCommandLoop
.1a87					_CSSetFlip:
.1a87	a9 00		lda #$00			lda 	#0 							; image # now at level 0
.1a89	a2 0c		ldx #$0c		ldx	#12
.1a8b	20 36 37	jsr $3736		jsr	mainHandler
.1a8e	a9 06		lda #$06			lda 	#6 							; set sprite position to +6
.1a90	20 07 1b	jsr $1b07			jsr 	SpriteSetTarget
.1a93	a5 50		lda $50				lda 	esInt0 						; flip value & 3 => temp0
.1a95	29 03		and #$03			and 	#3
.1a97	85 2a		sta $2a				sta 	temp0
.1a99	ad 23 9f	lda $9f23			lda 	$9F23 						; update the flip.
.1a9c	29 fc		and #$fc			and 	#$FC
.1a9e	05 2a		ora $2a				ora 	temp0
.1aa0	8d 23 9f	sta $9f23			sta 	$9F23
.1aa3	4c 40 1a	jmp $1a40			jmp 	_CSCommandLoop
.1aa6					_CSSetPos:
.1aa6	a9 00		lda #$00			lda 	#0 							; X now at level 0
.1aa8	a2 0a		ldx #$0a		ldx	#10
.1aaa	20 36 37	jsr $3736		jsr	mainHandler
.1aad	a2 02		ldx #$02		ldx	#2
.1aaf	20 36 37	jsr $3736		jsr	mainHandler
.1ab2	a9 01		lda #$01			lda 	#1 							; Y now at level 1
.1ab4	a2 0a		ldx #$0a		ldx	#10
.1ab6	20 36 37	jsr $3736		jsr	mainHandler
.1ab9	a2 00		ldx #$00			ldx 	#0 							; coords at 0,1
.1abb	20 69 1b	jsr $1b69			jsr 	SpriteMove 					; move it.
.1abe	4c 40 1a	jmp $1a40			jmp 	_CSCommandLoop
.1ac1					_CSSetImage:
.1ac1	a9 00		lda #$00			lda 	#0 							; image # now at level 0
.1ac3	a2 0c		ldx #$0c		ldx	#12
.1ac5	20 36 37	jsr $3736		jsr	mainHandler
.1ac8	a9 00		lda #$00			lda 	#0 							; set sprite position to +0
.1aca	20 07 1b	jsr $1b07			jsr 	SpriteSetTarget
.1acd	a6 50		ldx $50				ldx 	esInt0 						; get image # into X
.1acf	bd 30 0c	lda $0c30,x			lda 	imageAddr2Low,x 			; copy low address in.
.1ad2	8d 23 9f	sta $9f23			sta 	$9F23
.1ad5	ee 20 9f	inc $9f20			inc 	$9F20 						; bump to offset 1.
.1ad8	bd f0 0b	lda $0bf0,x			lda 	imageInfo,x 				; get 4/8 bit flag from info.
.1adb	29 10		and #$10			and 	#$10
.1add	0a		asl a				asl 	a
.1ade	0a		asl a				asl		a
.1adf	0a		asl a				asl 	a 							; put into bit 7
.1ae0	1d 70 0c	ora $0c70,x			ora 	imageAddr2High,x 			; or high address with it.
.1ae3	8d 23 9f	sta $9f23			sta 	$9F23 						; write the high byte.
.1ae6	a9 06		lda #$06			lda 	#6
.1ae8	20 07 1b	jsr $1b07			jsr 	SpriteSetTarget 			; set sprite on.
.1aeb	ad 23 9f	lda $9f23			lda 	$9F23
.1aee	09 0c		ora #$0c			ora 	#$0C
.1af0	8d 23 9f	sta $9f23			sta 	$9F23
.1af3	ee 20 9f	inc $9f20			inc 	$9F20 						; point to byte 7 : height/width/palette offset
.1af6	bd f0 0b	lda $0bf0,x			lda 	imageInfo,x 				; get image info
.1af9	0a		asl a				asl 	a 							; shift bits 0-3 to 4-7
.1afa	0a		asl a				asl 	a
.1afb	0a		asl a				asl 	a
.1afc	0a		asl a				asl 	a
.1afd	b0 02		bcs $1b01			bcs		_CSNoOffset 				; if bit 4 was set don't set the offset.
.1aff	09 0f		ora #$0f			ora 	#$0F 						; set palette offset and write back
.1b01					_CSNoOffset:
.1b01	8d 23 9f	sta $9f23			sta 	$9F23
.1b04	4c 40 1a	jmp $1a40			jmp 	_CSCommandLoop
.1b07					SpriteSetTarget:
.1b07	0d e9 0b	ora $0be9			ora 	currSprite
.1b0a	8d 20 9f	sta $9f20			sta 	$9F20
.1b0d	ad ea 0b	lda $0bea			lda 	currSprite+1
.1b10	f0 09		beq $1b1b			beq 	_SSTNoSet
.1b12	8d 21 9f	sta $9f21			sta 	$9F21
.1b15	a9 01		lda #$01			lda 	#$01
.1b17	8d 22 9f	sta $9f22			sta 	$9F22
.1b1a	60		rts				rts
.1b1b					_SSTNoSet:
.1b1b	a2 27		ldx #$27			ldx 	#ErrorID_NoSprite
.1b1d	20 18 15	jsr $1518		jsr	errorHandler
.1b20					CSCheckOnOff:
.1b20	b1 28		lda ($28),y			lda 	(codePtr),y 				; get and consume it.
.1b22	c8		iny				iny
.1b23	c9 ab		cmp #$ab			cmp 	#TKW_FALSE					; return CC/EQ if FALSE
.1b25	18		clc				clc
.1b26	f0 08		beq $1b30			beq 	_CSCOExit
.1b28	c9 aa		cmp #$aa			cmp 	#TKW_TRUE 					; return CS/EQ if TRUE
.1b2a	38		sec				sec 								; return NE if neither.
.1b2b	f0 03		beq $1b30			beq 	_CSCOExit
.1b2d	88		dey				dey 								; undo consume
.1b2e	c9 aa		cmp #$aa			cmp 	#TKW_TRUE 					; and set NE again, DEY will change it.
.1b30					_CSCOExit:
.1b30	60		rts				rts
.1b31					CSClearSprites:
.1b31	a9 11		lda #$11			lda 	#$11 						; set address to 1FC00 with single bump
.1b33	8d 22 9f	sta $9f22			sta 	$9F22
.1b36	a9 fc		lda #$fc			lda 	#$FC
.1b38	8d 21 9f	sta $9f21			sta 	$9F21
.1b3b	a9 00		lda #$00			lda 	#0
.1b3d	8d 20 9f	sta $9f20			sta 	$9F20
.1b40					_CSClear:
.1b40	a9 00		lda #$00			lda 	#0 							; set everything to $00
.1b42	8d 23 9f	sta $9f23			sta 	$9F23
.1b45	ad 21 9f	lda $9f21			lda 	$9F21
.1b48	d0 f6		bne $1b40			bne 	_CSClear
.1b4a	60		rts				rts
.1b4b					SelectSpriteA:
.1b4b	85 2a		sta $2a				sta 	temp0
.1b4d	a9 00		lda #$00			lda 	#0
.1b4f	06 2a		asl $2a				asl		temp0 						; multiply A:esInt0 by 8
.1b51	b0 11		bcs $1b64			bcs 	_CSBadValue 				; sprites only 0-127
.1b53	06 2a		asl $2a				asl 	temp0
.1b55	2a		rol a				rol 	a
.1b56	06 2a		asl $2a				asl 	temp0
.1b58	2a		rol a				rol 	a
.1b59	09 fc		ora #$fc			ora 	#$FC 						; MSB of address (barring $01 upper third byte)
.1b5b	8d ea 0b	sta $0bea			sta 	currSprite+1
.1b5e	a5 2a		lda $2a				lda 	temp0 						; LSB of address
.1b60	8d e9 0b	sta $0be9			sta 	currSprite+0
.1b63	60		rts				rts
.1b64					_CSBadValue
.1b64	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.1b66	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/sprites/spritemove.asm

.1b69					SpriteMove:
.1b69	98		tya				tya
.1b6a	48		pha				pha
.1b6b	a9 07		lda #$07			lda 	#7 									; point to height/width byte and read it.
.1b6d	20 07 1b	jsr $1b07			jsr 	SpriteSetTarget
.1b70	ad 23 9f	lda $9f23			lda 	$9F23
.1b73	4a		lsr a				lsr 	a 									; A now contains bits 0-1 (width) 2-3 (height)
.1b74	4a		lsr a				lsr 	a
.1b75	4a		lsr a				lsr 	a
.1b76	4a		lsr a				lsr 	a
.1b77	85 2a		sta $2a				sta 	temp0 								; save these bits so we can work out the centre.
.1b79	a9 02		lda #$02			lda 	#2 									; point to X position.Low
.1b7b	20 07 1b	jsr $1b07			jsr 	SpriteSetTarget
.1b7e	20 8d 1b	jsr $1b8d			jsr 	SMWritePosition 					; write X position out.
.1b81	46 2a		lsr $2a				lsr 	temp0 								; shift height bits into 0,1
.1b83	46 2a		lsr $2a				lsr 	temp0
.1b85	e8		inx				inx 										; get the y position
.1b86	20 8d 1b	jsr $1b8d			jsr 	SMWritePosition 					; and write that out.
.1b89	ca		dex				dex 										; fix X and quit.
.1b8a	68		pla				pla
.1b8b	a8		tay				tay
.1b8c	60		rts				rts
.1b8d					SMWritePosition:
.1b8d	a5 2a		lda $2a				lda 	temp0 								; get dim size
.1b8f	29 03		and #$03			and 	#3 									; in range into Y
.1b91	a8		tay				tay
.1b92	38		sec				sec
.1b93	b5 50		lda $50,x			lda 	esInt0,x
.1b95	f9 a9 1b	sbc $1ba9,y			sbc 	SMHalfSize,y
.1b98	8d 23 9f	sta $9f23			sta 	$9F23
.1b9b	ee 20 9f	inc $9f20			inc 	$9F20
.1b9e	b5 58		lda $58,x			lda 	esInt1,x
.1ba0	e9 00		sbc #$00			sbc 	#0
.1ba2	8d 23 9f	sta $9f23			sta 	$9F23
.1ba5	ee 20 9f	inc $9f20			inc 	$9F20
.1ba8	60		rts				rts
.1ba9					SMHalfSize:
>1ba9	04 08 10 20					.byte 	4,8,16,32 							; half size each dimension.
.1bad					SpriteReadCoordinate:
.1bad	98		tya				tya
.1bae	48		pha				pha
.1baf	08		php				php 										; save CTR on stack
.1bb0	a9 07		lda #$07			lda 	#7 									; point to height/width byte and read it.
.1bb2	20 07 1b	jsr $1b07			jsr 	SpriteSetTarget
.1bb5	ad 23 9f	lda $9f23			lda 	$9F23
.1bb8	4a		lsr a				lsr 	a 									; A now contains bits 0-1 (width) 2-3 (height)
.1bb9	4a		lsr a				lsr 	a
.1bba	4a		lsr a				lsr 	a
.1bbb	4a		lsr a				lsr 	a
.1bbc	28		plp				plp 										; restore CTS
.1bbd	08		php				php
.1bbe	90 02		bcc $1bc2			bcc 	_SPRCNotY1 							; if it is Y, e.g. CS, shift twice more.
.1bc0	4a		lsr a				lsr 	a
.1bc1	4a		lsr a				lsr 	a
.1bc2					_SPRCNotY1:
.1bc2	29 03		and #$03			and 	#3 									; point into half width/height
.1bc4	a8		tay				tay
.1bc5	b9 a9 1b	lda $1ba9,y			lda 	SMHalfSize,y 						; get half size -> esInt3,x
.1bc8	95 68		sta $68,x			sta 	esInt3,x
.1bca	28		plp				plp 										; CS Y CC X
.1bcb	a9 00		lda #$00			lda 	#0 									; A = 0 X A = 2 Y
.1bcd	2a		rol a				rol 	a
.1bce	2a		rol a				rol 	a
.1bcf	69 02		adc #$02			adc 	#2 									; A = 2 X A = 4 Y
.1bd1	20 07 1b	jsr $1b07			jsr 	SpriteSetTarget 					; set data pointer offset by that
.1bd4	18		clc				clc 										; read and unfix centre.
.1bd5	ad 23 9f	lda $9f23			lda 	$9F23
.1bd8	75 68		adc $68,x			adc 	esInt3,x
.1bda	95 50		sta $50,x			sta 	esInt0,x
.1bdc	ee 20 9f	inc $9f20			inc 	$9F20 								; do MSB
.1bdf	ad 23 9f	lda $9f23			lda 	$9F23
.1be2	69 00		adc #$00			adc 	#0
.1be4	29 0f		and #$0f			and 	#$0F 								; sign extend on bit 11.
.1be6	c9 08		cmp #$08			cmp		#$08
.1be8	90 02		bcc $1bec			bcc 	_SPRCNoSX
.1bea	09 f0		ora #$f0			ora 	#$F0
.1bec					_SPRCNoSX:
.1bec	95 58		sta $58,x			sta 	esInt1,x
.1bee	68		pla				pla
.1bef	a8		tay				tay
.1bf0	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/sprites/spriteutils.asm

.1bf1					Sprite_GetX:
.1bf1	18		clc				clc
.1bf2	90 01		bcc $1bf5			bcc 	SpriteGetCode
.1bf4					Sprite_GetY:
.1bf4	38		sec				sec
.1bf5					SpriteGetCode:
.1bf5	08		php				php 								; CLC : X SEC: Y, save on stack.
.1bf6	48		pha				pha 								; save stack position
.1bf7	20 13 1c	jsr $1c13			jsr 	GetSpriteNumber 			; get # of sprite.
.1bfa	a2 04		ldx #$04		ldx	#4
.1bfc	20 36 37	jsr $3736		jsr	mainHandler
.1bff	68		pla				pla
.1c00	aa		tax				tax
.1c01	28		plp				plp 								; which one ?
.1c02	20 ad 1b	jsr $1bad			jsr 	SpriteReadCoordinate 		; read appropriate coordinate into esInt0,x
.1c05	b5 58		lda $58,x			lda 	esInt1,x 					; get sign bit, sign extend 16->32 bits
.1c07	29 80		and #$80			and 	#$80
.1c09	f0 02		beq $1c0d			beq 	_SGXYPos
.1c0b	a9 ff		lda #$ff			lda 	#$FF
.1c0d					_SGXYPos:
.1c0d	95 60		sta $60,x			sta 	esInt2,x
.1c0f	95 68		sta $68,x			sta 	esInt3,x
.1c11	8a		txa				txa 								; return NSP in A
.1c12	60		rts				rts
.1c13					GetSpriteNumber:
.1c13	48		pha				pha
.1c14	a2 0c		ldx #$0c		ldx	#12
.1c16	20 36 37	jsr $3736		jsr	mainHandler
.1c19	68		pla				pla
.1c1a	aa		tax				tax
.1c1b	b5 50		lda $50,x			lda 	esInt0,x
.1c1d	20 4b 1b	jsr $1b4b			jsr 	SelectSpriteA
.1c20	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/video/mode.asm

.0beb					currentMode:
>0beb							.fill 	4
.1c21					ForceMode0:
.1c21	a2 00		ldx #$00			ldx 	#0
.1c23	86 50		stx $50				stx 	esInt0 						; in case we do it.
.1c25					_FMCheck:
.1c25	bd b2 1c	lda $1cb2,x			lda 	CMModeList,x 				; do we need to switch ?
.1c28	dd eb 0b	cmp $0beb,x			cmp 	currentMode,x
.1c2b	d0 13		bne $1c40			bne 	CMSetMode 					; different so switch.
.1c2d	e8		inx				inx
.1c2e	e0 04		cpx #$04			cpx 	#4
.1c30	d0 f3		bne $1c25			bne 	_FMCheck
.1c32	60		rts				rts
.1c33					CommandMode:
.1c33	a9 00		lda #$00			lda 	#0
.1c35	a2 0a		ldx #$0a		ldx	#10
.1c37	20 36 37	jsr $3736		jsr	mainHandler
.1c3a	a5 68		lda $68				lda 	esInt3
.1c3c	29 70		and #$70			and 	#$70
.1c3e	d0 06		bne $1c46			bne 	CMNoExpand
.1c40					CMSetMode:
.1c40	20 91 1c	jsr $1c91			jsr 	CMExpandMode
.1c43	4c 5a 1c	jmp $1c5a			jmp 	CMUpdateMode
.1c46					CMNoExpand:
.1c46	a5 50		lda $50				lda 	esInt0
.1c48	8d eb 0b	sta $0beb			sta 	currentMode
.1c4b	a5 58		lda $58				lda 	esInt1
.1c4d	8d ec 0b	sta $0bec			sta 	currentMode+1
.1c50	a5 60		lda $60				lda 	esInt2
.1c52	8d ed 0b	sta $0bed			sta 	currentMode+2
.1c55	a5 68		lda $68				lda 	esInt3
.1c57	8d ee 0b	sta $0bee			sta 	currentMode+3
.1c5a					CMUpdateMode:
.1c5a	a2 11		ldx #$11			ldx 	#$11
.1c5c					_CMClear:
.1c5c	a9 00		lda #$00			lda 	#0
.1c5e	9d 29 9f	sta $9f29,x			sta 	$9F29,X
.1c61	ca		dex				dex
.1c62	10 f8		bpl $1c5c			bpl 	_CMClear
.1c64	ad ee 0b	lda $0bee			lda 	currentMode+3 				; get current mode
.1c67	48		pha				pha 								; stack twice.
.1c68	48		pha				pha
.1c69	29 70		and #$70			and 	#$70 						; isolates bits 6,5,4 (sprites,L1 enable,L0 enable)
.1c6b	09 01		ora #$01			ora 	#$01 						; turn the output on.
.1c6d	8d 29 9f	sta $9f29			sta 	$9F29 						; write to DC_VIDEO
.1c70	68		pla				pla 								; get back
.1c71	20 c2 1c	jsr $1cc2			jsr 	CMToScale 					; convert lower 2 bits to a scale.
.1c74	8d 2a 9f	sta $9f2a			sta 	$9F2A 						; write to H-Scale
.1c77	68		pla				pla 								; get back, convert bits 2,3 to a scale.
.1c78	4a		lsr a				lsr 	a
.1c79	4a		lsr a				lsr 	a
.1c7a	20 c2 1c	jsr $1cc2			jsr 	CMToScale 					; convert lower 2 bits to a scale.
.1c7d	8d 2b 9f	sta $9f2b			sta 	$9F2B
.1c80	a2 00		ldx #$00			ldx 	#0 							; this is offset from $9F2D to do L0
.1c82	ad eb 0b	lda $0beb			lda 	currentMode					; get L0 config byte
.1c85	20 cd 1c	jsr $1ccd			jsr 	CMDecodeLayer 				; and decode layer 0
.1c88	a2 07		ldx #$07			ldx 	#7 							; when we do layer 1, offset by 7 hence starts at $9F34
.1c8a	ad ec 0b	lda $0bec			lda 	currentMode+1
.1c8d	20 cd 1c	jsr $1ccd			jsr 	CMDecodeLayer
.1c90	60		rts				rts
.1c91					CMExpandMode:
.1c91	a5 50		lda $50				lda 	esInt0 						; get mode number
.1c93	c9 04		cmp #$04			cmp 	#(CMEndModeList-CMModeList) >> 2
.1c95	b0 16		bcs $1cad			bcs 	_CMModeError
.1c97	0a		asl a				asl 	a 							; x 4 into X
.1c98	0a		asl a				asl 	a
.1c99	aa		tax				tax
.1c9a	98		tya				tya
.1c9b	48		pha				pha
.1c9c	a0 00		ldy #$00			ldy 	#0
.1c9e					_CMEMCopy:
.1c9e	bd b2 1c	lda $1cb2,x			lda 	CMModeList,x
.1ca1	99 eb 0b	sta $0beb,y			sta 	currentMode,y
.1ca4	e8		inx				inx
.1ca5	c8		iny				iny
.1ca6	c0 04		cpy #$04			cpy 	#4
.1ca8	d0 f4		bne $1c9e			bne 	_CMEMCopy
.1caa	68		pla				pla
.1cab	a8		tay				tay
.1cac	60		rts				rts
.1cad					_CMModeError:
.1cad	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.1caf	20 18 15	jsr $1518		jsr	errorHandler
.1cb2					CMModeList:
>1cb2	00 60 00 20					.dword	$20006000 					; Mode 0 which is the standard 80x60 mode, no sprites
>1cb6	00 60 00 25					.dword 	$25006000					; Mode 1 (40x30)
>1cba	00 60 00 2a					.dword 	$2A006000 					; Mode 2 (20x15)
>1cbe	07 60 00 15					.dword 	$15006007 					; Mode 3 (320x200 256 colour bitmap)
.1cc2					CMEndModeList:
.1cc2					CMToScale:
.1cc2	29 03		and #$03			and 	#3 							; lower 2 bits only
.1cc4	aa		tax				tax 								; put in X for counting
.1cc5	a9 00		lda #$00			lda 	#0 							; zero result
.1cc7	38		sec				sec 								; first time rotate CS in
.1cc8					_CMTSLoop:
.1cc8	6a		ror a				ror 	a
.1cc9	ca		dex				dex
.1cca	10 fc		bpl $1cc8			bpl 	_CMTSLoop
.1ccc	60		rts				rts
.1ccd					CMDecodeLayer:
.1ccd	48		pha				pha 								; save it.
.1cce	29 f7		and #$f7			and 	#$F7 						; all the bits except T256C which you can't set using this
.1cd0	9d 2d 9f	sta $9f2d,x			sta 	$9F2D,X
.1cd3	68		pla				pla 								; get it back
.1cd4	29 08		and #$08			and 	#$08 						; the missing bit sets the tile size.
.1cd6	f0 02		beq $1cda			beq 	_CMDLNotSet
.1cd8	a9 03		lda #$03			lda 	#$03 						; which sets both lower bits, they're square.
.1cda					_CMDLNotSet:
.1cda	e0 00		cpx #$00			cpx 	#0
.1cdc	f0 06		beq $1ce4			beq 	_CMDLayer0 					; layer 1 has standard defaults for tile table, e.g. $7C
.1cde	09 7c		ora #$7c			ora 	#$7C 						; so set those bits and write it out.
.1ce0	9d 2f 9f	sta $9f2f,x			sta 	$9F2F,X
.1ce3	60		rts				rts
.1ce4					_CMDLayer0:
.1ce4	09 80		ora #$80			ora 	#$80 						; tile base is $80
.1ce6	9d 2f 9f	sta $9f2f,x			sta 	$9F2F,X
.1ce9	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/video/palette.asm

.1cea					CommandPalette:
.1cea	a9 00		lda #$00			lda 	#0
.1cec	a2 0c		ldx #$0c		ldx	#12
.1cee	20 36 37	jsr $3736		jsr	mainHandler
.1cf1	a2 02		ldx #$02		ldx	#2
.1cf3	20 36 37	jsr $3736		jsr	mainHandler
.1cf6	a9 01		lda #$01			lda 	#1
.1cf8	a2 08		ldx #$08		ldx	#8
.1cfa	20 36 37	jsr $3736		jsr	mainHandler
.1cfd	a5 50		lda $50				lda 	esInt0 					; get palette #
.1cff	20 0f 1d	jsr $1d0f			jsr 	PointToPaletteA			; point to palette register
.1d02	a5 51		lda $51				lda 	esInt0+1
.1d04	8d 23 9f	sta $9f23			sta 	$9F23
.1d07	a5 59		lda $59				lda 	esInt1+1
.1d09	29 0f		and #$0f			and 	#$0F
.1d0b	8d 23 9f	sta $9f23			sta 	$9F23
.1d0e	60		rts				rts
.1d0f					PointToPaletteA:
.1d0f	0a		asl a				asl 	a 							; x 2 -> LSB
.1d10	8d 20 9f	sta $9f20			sta 	$9F20
.1d13	a9 00		lda #$00			lda 	#0 							; carry into A
.1d15	2a		rol a				rol 	a
.1d16	09 fa		ora #$fa			ora 	#$FA 						; make correct address
.1d18	8d 21 9f	sta $9f21			sta 	$9F21
.1d1b	a9 11		lda #$11			lda 	#$11 						; $01 and single step => $9F22
.1d1d	8d 22 9f	sta $9f22			sta 	$9F22
.1d20	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/video/vload.asm

.1d21					Command_VLoad:
.1d21	a9 00		lda #$00			lda 	#0 								; string which is the file name
.1d23	a2 0e		ldx #$0e		ldx	#14
.1d25	20 36 37	jsr $3736		jsr	mainHandler
.1d28	a2 01		ldx #$01			ldx 	#1 								; load address at +1.
.1d2a	a5 35		lda $35				lda 	lowMemory 						; load it into lowMemory (for now ?)
.1d2c	95 50		sta $50,x			sta 	esInt0,x
.1d2e	a5 36		lda $36				lda 	lowMemory+1
.1d30	95 58		sta $58,x			sta 	esInt1,x
.1d32	a9 00		lda #$00			lda 	#0
.1d34	95 60		sta $60,x			sta 	esInt2,x
.1d36	95 68		sta $68,x			sta 	esInt3,x
.1d38	a2 0e		ldx #$0e		ldx	#14
.1d3a	20 f6 14	jsr $14f6		jsr	deviceHandler
.1d3d	a5 51		lda $51				lda 	esInt0+1 						; (temp0) is where we are decoding from.
.1d3f	85 2a		sta $2a				sta 	temp0
.1d41	a5 59		lda $59				lda 	esInt1+1
.1d43	85 2b		sta $2b				sta 	temp0+1
.1d45	20 c1 1d	jsr $1dc1			jsr 	LoadVRAMFile 					; load the VRAM file in.
.1d48	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/video/vpeekpoke.asm

.1d49					Command_VPoke:
.1d49	38		sec				sec 						; one byte , CS
.1d4a	b0 01		bcs $1d4d			bcs 	CmdVideoWrite
.1d4c					Command_VDoke:
.1d4c	18		clc				clc 						; two bytes, CC
.1d4d					CmdVideoWrite:
.1d4d	08		php				php 						; save one or two btes
.1d4e	a9 00		lda #$00			lda 	#0  				; get address and value into levels 0,1
.1d50	a2 0a		ldx #$0a		ldx	#10
.1d52	20 36 37	jsr $3736		jsr	mainHandler
.1d55	a2 02		ldx #$02		ldx	#2
.1d57	20 36 37	jsr $3736		jsr	mainHandler
.1d5a	a9 01		lda #$01			lda 	#1
.1d5c	a2 0a		ldx #$0a		ldx	#10
.1d5e	20 36 37	jsr $3736		jsr	mainHandler
.1d61	a2 00		ldx #$00			ldx 	#0
.1d63	20 74 1d	jsr $1d74			jsr 	SetUpTOSVRamAddress ; copy target address to VRAM address registers
.1d66	a5 51		lda $51				lda 	esInt0+1 			; get MSB of write value
.1d68	8d 23 9f	sta $9f23			sta 	$9F23
.1d6b	28		plp				plp 						; if it was Poke then exit
.1d6c	b0 05		bcs $1d73			bcs 	_CVWExit
.1d6e	a5 59		lda $59				lda 	esInt1+1 			; doke, write the MSB.
.1d70	8d 23 9f	sta $9f23			sta 	$9F23
.1d73					_CVWExit:
.1d73	60		rts				rts
.1d74					SetUpTOSVRamAddress:
.1d74	b5 60		lda $60,x			lda 	esInt2,x 			; check range of address, data to $FFFF
.1d76	29 fe		and #$fe			and 	#$FE
.1d78	15 68		ora $68,x			ora 	esInt3,x
.1d7a	d0 14		bne $1d90			bne 	CVWValue
.1d7c	b5 50		lda $50,x			lda 	esInt0,x			; set address up
.1d7e	8d 20 9f	sta $9f20			sta 	$9F20
.1d81	b5 58		lda $58,x			lda 	esInt1,x
.1d83	8d 21 9f	sta $9f21			sta	 	$9F21
.1d86	b5 60		lda $60,x			lda 	esInt2,x
.1d88	29 01		and #$01			and 	#1
.1d8a	09 10		ora #$10			ora 	#$10 				; step 1.
.1d8c	8d 22 9f	sta $9f22			sta 	$9F22
.1d8f	60		rts				rts
.1d90					CVWValue:
.1d90	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.1d92	20 18 15	jsr $1518		jsr	errorHandler
.1d95					Command_VPeek:
.1d95	38		sec				sec 						; one byte , CS
.1d96	b0 01		bcs $1d99			bcs 	CmdVideoRead
.1d98					Command_VDeek:
.1d98	18		clc				clc 						; two bytes, CC
.1d99					CmdVideoRead:
.1d99	08		php				php 						; save action on stack.
.1d9a	48		pha				pha 						; save stack position
.1d9b	a2 0a		ldx #$0a		ldx	#10
.1d9d	20 36 37	jsr $3736		jsr	mainHandler
.1da0	a2 04		ldx #$04		ldx	#4
.1da2	20 36 37	jsr $3736		jsr	mainHandler
.1da5	68		pla				pla
.1da6	aa		tax				tax
.1da7	20 74 1d	jsr $1d74			jsr 	SetUpTOSVRamAddress	; set up VRAM address.
.1daa	a9 00		lda #$00			lda 	#0 					; zero upper 3 bytes
.1dac	95 58		sta $58,x			sta 	esInt1,x
.1dae	95 60		sta $60,x			sta 	esInt2,x
.1db0	95 68		sta $68,x			sta 	esInt3,x
.1db2	ad 23 9f	lda $9f23			lda 	$9F23				; copy 1st byte
.1db5	95 50		sta $50,x			sta 	esInt0,x
.1db7	28		plp				plp 						; check if DOKE (carry was clear)
.1db8	b0 05		bcs $1dbf			bcs 	_CVRExit
.1dba	ad 23 9f	lda $9f23			lda 	$9F23 				; copy 2nd byte
.1dbd	95 58		sta $58,x			sta 	esInt1,x
.1dbf					_CVRExit:
.1dbf	8a		txa				txa 						; return X position.
.1dc0	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/video/vramprocess.asm

.0bef					compressMode:
>0bef							.fill 	1
.0bf0					imageInfo:
>0bf0							.fill 	X16MaxImages
.0c30					imageAddr2Low:
>0c30							.fill  	X16MaxImages
.0c70					imageAddr2High:
>0c70							.fill  	X16MaxImages
.1dc1					LoadVRAMFile:
.1dc1	8a		txa				txa
.1dc2	48		pha				pha
.1dc3	98		tya				tya
.1dc4	48		pha				pha
.1dc5					_LVRLoop:
.1dc5	20 a1 1e	jsr $1ea1			jsr 	LVFGet 						; get the next (never access direct)
.1dc8	c9 80		cmp #$80			cmp 	#$80 						; exit ?
.1dca	f0 42		beq $1e0e			beq 	_LVRExit
.1dcc	b0 5c		bcs $1e2a			bcs 	_LVRLoad 					; load data in ?
.1dce	c9 08		cmp #$08			cmp 	#$08 						; is it set address ?
.1dd0	90 11		bcc $1de3			bcc 	_LVRSetAddress
.1dd2	c9 0f		cmp #$0f			cmp 	#$0F 						; is it define palette
.1dd4	f0 3d		beq $1e13			beq 	_LVRSetPalette
.1dd6	c9 10		cmp #$10			cmp 	#$10 						; is it set compression type ?
.1dd8	90 2d		bcc $1e07			bcc 	_LVRSetCompress
.1dda	c9 64		cmp #$64			cmp 	#$64 						; is it set sprite type.
.1ddc	90 60		bcc $1e3e			bcc 	_LVRSetSprite
.1dde	a2 01		ldx #$01			ldx 	#ErrorID_missing
.1de0	20 18 15	jsr $1518		jsr	errorHandler
.1de3					_LVRSetAddress:
.1de3	85 2d		sta $2d				sta 	temp1+1 					; 24 bit in temp1+1/temp1/A
.1de5	20 a1 1e	jsr $1ea1			jsr 	LVFGet
.1de8	85 2c		sta $2c				sta 	temp1
.1dea	a9 00		lda #$00			lda 	#0
.1dec	46 2d		lsr $2d				lsr 	temp1+1 					; / 2 twice.
.1dee	66 2c		ror $2c				ror 	temp1
.1df0	6a		ror a				ror		a
.1df1	46 2d		lsr $2d				lsr 	temp1+1
.1df3	66 2c		ror $2c				ror 	temp1
.1df5	6a		ror a				ror		a
.1df6	8d 20 9f	sta $9f20			sta 	$9F20 						; set write address with +1 increment
.1df9	a5 2c		lda $2c				lda 	temp1
.1dfb	8d 21 9f	sta $9f21			sta 	$9F21
.1dfe	a5 2d		lda $2d				lda 	temp1+1
.1e00	09 10		ora #$10			ora 	#$10
.1e02	8d 22 9f	sta $9f22			sta 	$9F22
.1e05	d0 be		bne $1dc5			bne 	_LVRLoop
.1e07					_LVRSetCompress:
.1e07	29 07		and #$07			and 	#7
.1e09	8d ef 0b	sta $0bef			sta 	compressMode
.1e0c	10 b7		bpl $1dc5			bpl 	_LVRLoop
.1e0e					_LVRExit:
.1e0e	68		pla				pla
.1e0f	a8		tay				tay
.1e10	68		pla				pla
.1e11	aa		tax				tax
.1e12	60		rts				rts
.1e13					_LVRSetPalette:
.1e13	20 a1 1e	jsr $1ea1			jsr 	LVFGet 						; get palette id.
.1e16	20 0f 1d	jsr $1d0f			jsr 	PointToPaletteA 			; in palette.asm
.1e19	20 a1 1e	jsr $1ea1			jsr 	LVFGet 						; copy 12 bit palette data in.
.1e1c	8d 23 9f	sta $9f23			sta 	$9F23
.1e1f	20 a1 1e	jsr $1ea1			jsr 	LVFGet
.1e22	29 0f		and #$0f			and 	#$0F
.1e24	8d 23 9f	sta $9f23			sta 	$9F23
.1e27	4c c5 1d	jmp $1dc5			jmp 	_LVRLoop
.1e2a					_LVRLoad:
.1e2a	ae ef 0b	ldx $0bef			ldx 	compressMode
.1e2d	d0 55		bne $1e84			bne 	_LVRNotMode0
.1e2f	29 7f		and #$7f			and 	#$7F 						; count in X (is > 0)
.1e31					_LVRLCopyX:
.1e31	aa		tax				tax
.1e32					_LVRLCopy:
.1e32	20 a1 1e	jsr $1ea1			jsr 	LVFGet 						; write to data.
.1e35	8d 23 9f	sta $9f23			sta 	$9F23
.1e38	ca		dex				dex
.1e39	d0 f7		bne $1e32			bne 	_LVRLCopy
.1e3b	4c c5 1d	jmp $1dc5			jmp 	_LVRLoop
.1e3e					_LVRSetSprite:
.1e3e	48		pha				pha 								; save on stack
.1e3f	20 a1 1e	jsr $1ea1			jsr 	LVFGet 						; get the sprite number into X
.1e42	aa		tax				tax
.1e43	c9 40		cmp #$40			cmp 	#X16MaxImages				; too high ?
.1e45	b0 38		bcs $1e7f			bcs 	_LVRSSValue
.1e47	68		pla				pla 								; restore the data held in the first byte
.1e48	9d f0 0b	sta $0bf0,x			sta 	imageInfo,x 				; and write into the sprite image table.
.1e4b					_LVRAlignVRAM:
.1e4b	ad 20 9f	lda $9f20			lda 	$9F20 						; check VRAM on 32 byte boundary
.1e4e	29 1f		and #$1f			and 	#$1F
.1e50	f0 07		beq $1e59			beq 	_LVRAligned
.1e52	a9 00		lda #$00			lda 	#$00
.1e54	8d 23 9f	sta $9f23			sta 	$9F23
.1e57	f0 f2		beq $1e4b			beq 	_LVRAlignVRAM
.1e59					_LVRAligned:
.1e59	ad 22 9f	lda $9f22			lda 	$9F22 						; put address/32 in sprite image table
.1e5c	4a		lsr a				lsr 	a 	 						; first halve into temp1
.1e5d	ad 21 9f	lda $9f21			lda 	$9F21
.1e60	6a		ror a				ror 	a
.1e61	85 2d		sta $2d				sta 	temp1+1
.1e63	ad 20 9f	lda $9f20			lda 	$9F20
.1e66	6a		ror a				ror 	a
.1e67	85 2c		sta $2c				sta 	temp1
.1e69	a0 04		ldy #$04			ldy 	#4 							; divide it by 16 in temp1
.1e6b					_LVRShift:
.1e6b	46 2d		lsr $2d				lsr 	temp1+1
.1e6d	66 2c		ror $2c				ror 	temp1
.1e6f	88		dey				dey
.1e70	d0 f9		bne $1e6b			bne 	_LVRShift
.1e72	a5 2d		lda $2d				lda 	temp1+1 					; copy result.
.1e74	9d 70 0c	sta $0c70,x			sta 	imageAddr2High,x
.1e77	a5 2c		lda $2c				lda 	temp1
.1e79	9d 30 0c	sta $0c30,x			sta 	imageAddr2Low,x
.1e7c	4c c5 1d	jmp $1dc5			jmp 	_LVRLoop
.1e7f					_LVRSSValue:
.1e7f	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.1e81	20 18 15	jsr $1518		jsr	errorHandler
.1e84					_LVRNotMode0:
.1e84	e0 01		cpx #$01			cpx 	#1
.1e86	d0 15		bne $1e9d			bne 	_LVRNotMode1
.1e88	29 7f		and #$7f			and 	#$7F 						; drop bit 7
.1e8a	c9 40		cmp #$40			cmp 	#$40
.1e8c	90 a3		bcc $1e31			bcc 	_LVRLCopyX 					; 00-3F use mode 0's copying code.
.1e8e					_LVRRLEGroup:
.1e8e	29 3f		and #$3f			and 	#$3F
.1e90	aa		tax				tax
.1e91	20 a1 1e	jsr $1ea1			jsr 	LVFGet
.1e94					_LVRLEGroupLoop:
.1e94	8d 23 9f	sta $9f23			sta 	$9F23
.1e97	ca		dex				dex
.1e98	d0 fa		bne $1e94			bne 	_LVRLEGroupLoop
.1e9a	4c c5 1d	jmp $1dc5			jmp 	_LVRLoop
.1e9d					_LVRNotMode1:
>1e9d	db						.byte 	$DB
.1e9e	4c 9d 1e	jmp $1e9d			jmp 	_LVRNotMode1
.1ea1	84 32		sty $32		LVFGet:	sty 	tempShort
.1ea3	a0 00		ldy #$00			ldy 	#0
.1ea5	b1 2a		lda ($2a),y			lda 	(temp0),y
.1ea7	a4 32		ldy $32				ldy	 	tempShort
.1ea9	e6 2a		inc $2a				inc 	temp0
.1eab	d0 02		bne $1eaf			bne 	_LVFGExit
.1ead	e6 2b		inc $2b				inc 	temp0+1
.1eaf					_LVFGExit:
.1eaf	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Return to file: basic.asm

.1eb0					section_end_extension:
.1eb0					section_start_floatingpoint:

;******  Processing file: floatingpoint/floatingpoint.asm

.1eb0					floatingpointHandler:
.1eb0	a2 03		ldx #$03			ldx 	#ErrorID_NoModule
.1eb2	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: basic.asm

.1eb5					section_end_floatingpoint:
.1eb5					section_start_interaction:

;******  Processing file: interaction/interaction.asm


;******  Processing file: interaction/cold.asm

.1eb5					ColdStartEntry:
.1eb5	a2 ff		ldx #$ff			ldx 	#$FF
.1eb7	9a		txs				txs
.1eb8	20 41 1f	jsr $1f41			jsr 	ForceStandardMode
.1ebb	a2 04		ldx #$04		ldx	#4
.1ebd	20 f6 14	jsr $14f6		jsr	deviceHandler
.1ec0	a0 ff		ldy #$ff			ldy 	#255
.1ec2					_CSBanner:
.1ec2	c8		iny				iny
.1ec3	b9 e9 1e	lda $1ee9,y			lda 	Intro,y
.1ec6	f0 14		beq $1edc			beq 	_CSStart
.1ec8	c9 08		cmp #$08			cmp 	#8
.1eca	90 08		bcc $1ed4			bcc 	_CSInk
.1ecc	a2 16		ldx #$16		ldx	#22
.1ece	20 f6 14	jsr $14f6		jsr	deviceHandler
.1ed1	4c c2 1e	jmp $1ec2			jmp 	_CSBanner
.1ed4					_CSInk:
.1ed4	a2 08		ldx #$08		ldx	#8
.1ed6	20 f6 14	jsr $14f6		jsr	deviceHandler
.1ed9	4c c2 1e	jmp $1ec2			jmp 	_CSBanner
.1edc					_CSStart:
.1edc	a2 16		ldx #$16		ldx	#22
.1ede	20 36 37	jsr $3736		jsr	mainHandler
.1ee1	a2 06		ldx #$06		ldx	#6
.1ee3	20 36 37	jsr $3736		jsr	mainHandler
.1ee6	4c 01 20	jmp $2001			jmp 	WarmStartEntry
>1ee9	06 2a 2a 2a 20 36 35 30		Intro:	.text 	6,"*** 6502 Extended BASIC ***",13,13
>1ef1	32 20 45 78 74 65 6e 64 65 64 20 42 41 53 49 43
>1f01	20 2a 2a 2a 0d 0d
>1f07	03 57 72 69 74 74 65 6e				.text 	3,"Written by Paul Robson 2021",13,13
>1f0f	20 62 79 20 50 61 75 6c 20 52 6f 62 73 6f 6e 20
>1f1f	32 30 32 31 0d 0d
>1f25	02 42 61 73 69 63 20				.text 	2,"Basic "
>1f2c	30 2e 31 39					.text "0.19"
>1f30	20 28						.text 	" ("
>1f32	32 38 2d 4d 61 72 2d 32				.text "28-Mar-2021"
>1f3a	30 32 31
>1f3d	29 0d 0d 00					.text 	")",13,13,0
.1f41					ForceStandardMode:
.1f41	a9 fe		lda #$fe			lda 	#$FE
.1f43	20 69 18	jsr $1869		jsr	extensionHandler
.1f46	60		rts				rts

;******  Return to file: interaction/interaction.asm


;******  Processing file: interaction/delete.asm

.1f47					DeleteLine:
.1f47	ad c8 0a	lda $0ac8			lda 	basePage 					; copy program base to temp0
.1f4a	85 2a		sta $2a				sta 	temp0
.1f4c	ad c9 0a	lda $0ac9			lda 	basePage+1
.1f4f	85 2b		sta $2b				sta 	temp0+1
.1f51	a0 01		ldy #$01	_DLLoop:ldy 	#1 							; see if found line ?
.1f53	a5 50		lda $50				lda 	esInt0 						; e.g. the linenumbers match
.1f55	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.1f57	d0 07		bne $1f60			bne 	_DLNext
.1f59	c8		iny				iny
.1f5a	a5 58		lda $58				lda 	esInt1
.1f5c	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.1f5e	f0 06		beq $1f66			beq 	_DLFound
.1f60	20 84 1f	jsr $1f84	_DLNext:jsr 	IAdvanceTemp0 				; shift temp0 forward, return Z flag set if end.
.1f63	d0 ec		bne $1f51			bne 	_DLLoop
.1f65	60		rts				rts
.1f66					_DLFound:
.1f66	a0 00		ldy #$00			ldy 	#0 							; this is the line to cut, so this offset is the bytes to remove
.1f68	b1 2a		lda ($2a),y			lda 	(temp0),y
.1f6a	a8		tay				tay 								; so we copy from (temp0),y
.1f6b	a2 00		ldx #$00			ldx 	#0  						; to (temp0,x)
.1f6d					_DLCopyDown:
.1f6d	b1 2a		lda ($2a),y			lda 	(temp0),y 					; copy one byte.
.1f6f	81 2a		sta ($2a,x)			sta 	(temp0,x)
.1f71	e6 2a		inc $2a				inc 	temp0 						; advance pointer
.1f73	d0 02		bne $1f77			bne 	_DLNoCarry
.1f75	e6 2b		inc $2b				inc 	temp0+1
.1f77					_DLNoCarry:
.1f77	a5 2a		lda $2a				lda 	temp0 						; until hit low memory
.1f79	c5 35		cmp $35				cmp 	lowMemory 					; which is comfortably after End Program.
.1f7b	d0 f0		bne $1f6d			bne 	_DLCopyDown
.1f7d	a5 2b		lda $2b				lda 	temp0+1
.1f7f	c5 36		cmp $36				cmp 	lowMemory+1
.1f81	d0 ea		bne $1f6d			bne 	_DLCopyDown
.1f83	60		rts				rts
.1f84					IAdvanceTemp0:
.1f84	84 32		sty $32				sty 	tempShort
.1f86	18		clc				clc
.1f87	a0 00		ldy #$00			ldy 	#0 							; get offset
.1f89	b1 2a		lda ($2a),y			lda 	(temp0),y 					; add to temp0
.1f8b	65 2a		adc $2a				adc 	temp0
.1f8d	85 2a		sta $2a				sta 	temp0
.1f8f	90 02		bcc $1f93			bcc 	_IATNoCarry
.1f91	e6 2b		inc $2b				inc 	temp0+1
.1f93					_IATNoCarry:
.1f93	b1 2a		lda ($2a),y			lda 	(temp0),y
.1f95	a4 32		ldy $32				ldy 	tempShort
.1f97	c9 00		cmp #$00			cmp		#0 							; Z set if program end.
.1f99	60		rts				rts

;******  Return to file: interaction/interaction.asm


;******  Processing file: interaction/insert.asm

.1f9a					InsertLine:
.1f9a	ad c8 0a	lda $0ac8			lda 	basePage 					; copy program base to temp0
.1f9d	85 2a		sta $2a				sta 	temp0
.1f9f	ad c9 0a	lda $0ac9			lda 	basePage+1
.1fa2	85 2b		sta $2b				sta 	temp0+1
.1fa4					_ILLoop:
.1fa4	a0 01		ldy #$01			ldy 	#1
.1fa6	b1 2a		lda ($2a),y			lda 	(temp0),y
.1fa8	c5 50		cmp $50				cmp 	esInt0
.1faa	c8		iny				iny
.1fab	b1 2a		lda ($2a),y			lda 	(temp0),y
.1fad	e5 58		sbc $58				sbc 	esInt1
.1faf	b0 05		bcs $1fb6			bcs 	_ILFound 					; we know it cannot be equal, it would have been deleted
.1fb1	20 84 1f	jsr $1f84			jsr 	IAdvanceTemp0 				; shift temp0 forward, return Z flag set if end.
.1fb4	d0 ee		bne $1fa4			bne 	_ILLoop
.1fb6					_ILFound:
.1fb6	a5 35		lda $35				lda 	lowMemory 					; shift lowMemory up to make space for it.
.1fb8	85 2c		sta $2c				sta 	temp1             			; this pointer goes backwards
.1fba	a5 36		lda $36				lda 	lowMemory+1
.1fbc	85 2d		sta $2d				sta 	temp1+1
.1fbe	ad ed 0d	lda $0ded			lda 	tokenBufferIndex 			; space to make in Y, 0 in X.
.1fc1	18		clc				clc 								; add 3 for the line number and offset.
.1fc2	69 03		adc #$03			adc 	#3 							; tokenbuffer already has $80
.1fc4	a8		tay				tay
.1fc5	a2 00		ldx #$00			ldx 	#0
.1fc7	a1 2c		lda ($2c,x)	_ILMove:lda 	(temp1,x)					; shift up
.1fc9	91 2c		sta ($2c),y			sta 	(temp1),y
.1fcb	a5 2c		lda $2c				lda 	temp1 						; check reached the insert point ?
.1fcd	c5 2a		cmp $2a				cmp 	temp0
.1fcf	d0 06		bne $1fd7			bne 	_ILMNext
.1fd1	a5 2d		lda $2d				lda 	temp1+1
.1fd3	c5 2b		cmp $2b				cmp 	temp0+1
.1fd5	f0 0b		beq $1fe2			beq 	_ILMCopy
.1fd7					_ILMNext:
.1fd7	a5 2c		lda $2c				lda 	temp1
.1fd9	d0 02		bne $1fdd			bne 	_ILNoBorrow
.1fdb	c6 2d		dec $2d				dec 	temp1+1
.1fdd					_ILNoBorrow:
.1fdd	c6 2c		dec $2c				dec 	temp1
.1fdf	4c c7 1f	jmp $1fc7			jmp 	_ILMove 					; and go round again
.1fe2					_ILMCopy:
.1fe2	98		tya				tya 								; Y is the offset of the new line.
.1fe3	81 2a		sta ($2a,x)			sta 	(temp0,x)					; X = 0 still.
.1fe5	a0 01		ldy #$01			ldy 	#1 							; copy in line number.
.1fe7	a5 50		lda $50				lda 	esInt0
.1fe9	91 2a		sta ($2a),y			sta 	(temp0),y
.1feb	c8		iny				iny
.1fec	a5 58		lda $58				lda 	esInt1
.1fee	91 2a		sta ($2a),y			sta 	(temp0),y
.1ff0	a0 00		ldy #$00			ldy 	#0 							; copy the body in
.1ff2					_ILMCopy2:
.1ff2	b1 28		lda ($28),y			lda 	(codePtr),y
.1ff4	c8		iny				iny
.1ff5	c8		iny				iny
.1ff6	c8		iny				iny
.1ff7	91 2a		sta ($2a),y			sta 	(temp0),y
.1ff9	88		dey				dey
.1ffa	88		dey				dey
.1ffb	cc ed 0d	cpy $0ded			cpy 	tokenBufferIndex
.1ffe	d0 f2		bne $1ff2			bne 	_ILMCopy2
.2000	60		rts				rts

;******  Return to file: interaction/interaction.asm


;******  Processing file: interaction/warm.asm

.2001					WarmStartEntry:
.2001	a2 ff		ldx #$ff			ldx 	#$FF
.2003	9a		txs				txs
.2004	20 41 1f	jsr $1f41			jsr 	ForceStandardMode
.2007	a9 02		lda #$02			lda 	#2							; green text.
.2009	a2 08		ldx #$08		ldx	#8
.200b	20 f6 14	jsr $14f6		jsr	deviceHandler
.200e	a2 0c		ldx #$0c		ldx	#12
.2010	20 f6 14	jsr $14f6		jsr	deviceHandler
.2013	a5 2a		lda $2a				lda 	temp0	 					; copy temp0 to codePtr
.2015	85 28		sta $28				sta 	codePtr
.2017	a5 2b		lda $2b				lda 	temp0+1
.2019	85 29		sta $29				sta 	codePtr+1
.201b	a2 06		ldx #$06		ldx	#6
.201d	20 f6 14	jsr $14f6		jsr	deviceHandler
.2020	a2 08		ldx #$08		ldx	#8
.2022	20 4e 42	jsr $424e		jsr	tokeniserHandler
.2025	c9 00		cmp #$00			cmp 	#0
.2027	f0 25		beq $204e			beq 	WSEError 					; failed (tokenise can fail if it doesn't know a character e.g. |)
.2029	a9 ea		lda #$ea			lda 	#(tokenHeader) & $FF
.202b	85 28		sta $28				sta 	codePtr
.202d	a9 0c		lda #$0c			lda 	#(tokenHeader) >> 8
.202f	85 29		sta $29				sta 	1+(codePtr)
.2031	ad ed 0c	lda $0ced			lda 	tokenBuffer 				; is it a blank line, go get another line.
.2034	c9 80		cmp #$80			cmp 	#$80
.2036	f0 c9		beq $2001			beq 	WarmStartEntry
.2038	29 c0		and #$c0			and 	#$C0						; does it start with a number
.203a	c9 40		cmp #$40			cmp 	#$40 						; e.g. is it 01xx xxxx
.203c	f0 15		beq $2053			beq 	HasLineNumber
.203e	a9 00		lda #$00			lda 	#0 							; zero the token header, so it will look like a
.2040	8d ea 0c	sta $0cea			sta 	tokenHeader 				; fake program line.
.2043	8d eb 0c	sta $0ceb			sta 	tokenHeader+1
.2046	8d ec 0c	sta $0cec			sta 	tokenHeader+2
.2049	a2 18		ldx #$18		ldx	#24
.204b	20 36 37	jsr $3736		jsr	mainHandler
.204e					WSEError:
.204e	a2 1e		ldx #$1e			ldx 	#ErrorID_Tokenise
.2050	20 18 15	jsr $1518		jsr	errorHandler
.2053					HasLineNumber:
.2053	a0 03		ldy #$03			ldy 	#3 							; get line number
.2055	a9 00		lda #$00			lda 	#0
.2057	a2 0a		ldx #$0a		ldx	#10
.2059	20 36 37	jsr $3736		jsr	mainHandler
.205c	a5 60		lda $60				lda 	esInt2		 				; check in range (only 2 bytes)
.205e	05 68		ora $68				ora 	esInt3
.2060	d0 ec		bne $204e			bne 	WSEError
.2062	98		tya				tya 								; make codePtr point to code after the line number.
.2063	18		clc				clc 								; by skipping over the tokenised number.
.2064	65 28		adc $28				adc 	codePtr
.2066	85 28		sta $28				sta 	codePtr
.2068	90 02		bcc $206c			bcc		_HLNNoCarry
.206a	e6 29		inc $29				inc 	codePtr+1
.206c					_HLNNoCarry:
.206c	98		tya				tya 								; subtract that offset from the code buffer index
.206d	38		sec				sec
.206e	49 ff		eor #$ff			eor 	#$FF
.2070	6d ed 0d	adc $0ded			adc 	tokenBufferIndex
.2073	18		clc				clc 								; add space allowing for header & $80 trailer
.2074	69 04		adc #$04			adc 	#4
.2076	8d ed 0d	sta $0ded			sta 	tokenBufferIndex 			; this is the number of bytes occupied.
.2079	20 47 1f	jsr $1f47			jsr 	DeleteLine 					; always delete the line, it's deleted and reinserted.
.207c					_HLNNoDelete:
.207c	ad ed 0d	lda $0ded			lda 	tokenBufferIndex 			; if line was empty, then don't insert
.207f	c9 01		cmp #$01			cmp 	#1 							; (the one character is the EOL marker)
.2081	f0 0c		beq $208f			beq 	_HLMEditDone
.2083	a5 36		lda $36				lda 	lowMemory+1 				; is there space, if we allow a little bit of
.2085	18		clc				clc 								; workspace (1k)
.2086	69 04		adc #$04			adc 	#4 							; e.g. 4 x 256
.2088	c5 34		cmp $34				cmp 	highMemory+1
.208a	b0 0b		bcs $2097			bcs 	_HLMMemory 					; nope, won't allowit.
.208c	20 9a 1f	jsr $1f9a			jsr 	InsertLine 					; insert the line in
.208f					_HLMEditDone:
.208f	a2 06		ldx #$06		ldx	#6
.2091	20 36 37	jsr $3736		jsr	mainHandler
.2094	4c 01 20	jmp $2001			jmp 	WarmStartEntry
.2097					_HLMMemory:
.2097	a2 22		ldx #$22			ldx 	#ErrorID_Memory
.2099	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: interaction/interaction.asm

.209c					interactionHandler:
.209c	7c 9f 20	jmp ($209f,x)			jmp 	(interactionVectors,x)
.209f					interactionVectors:
>209f	a5 20					.word _DummyControlHandler ; index 0
>20a1	b5 1e					.word ColdStartEntry       ; index 2
>20a3	01 20					.word WarmStartEntry       ; index 4
.20a5					_DummyControlHandler:
.20a5	60		rts			rts

;******  Return to file: basic.asm

.20a6					section_end_interaction:
.20a6					section_start_main:

;******  Processing file: main/main.asm


;******  Processing file: main/commands/compat/readdata.asm

.0cb0					dataPtr:
>0cb0							.fill 	2
.0cb2					dataIndex:
>0cb2							.fill 	1
.20a6					CommandRead:
.20a6	a2 00		ldx #$00			ldx 	#0 							; get a reference to a variable in stack:0
.20a8	20 e9 2f	jsr $2fe9			jsr 	EvaluateReference
.20ab	20 ec 20	jsr $20ec			jsr 	SwapDPCP 					; use the data pointer.
.20ae	b1 28		lda ($28),y			lda 	(codePtr),y 				; see where it is.
.20b0	c8		iny				iny
.20b1	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; if it is on a comma, it is in data.
.20b3	f0 07		beq $20bc			beq 	_CRInData
.20b5	88		dey				dey
.20b6	a9 d9		lda #$d9			lda 	#TKW_DATA 					; scan forward to a DATA statement.
.20b8	aa		tax				tax
.20b9	20 ed 27	jsr $27ed			jsr 	ScanForward
.20bc					_CRInData:
.20bc	a2 01		ldx #$01			ldx 	#1 							; evaluate a value at Stack,1
.20be	20 91 2f	jsr $2f91			jsr 	Evaluate
.20c1	ca		dex				dex 								; and write the value.
.20c2	20 40 23	jsr $2340			jsr 	WriteValue
.20c5	20 ec 20	jsr $20ec			jsr 	SwapDPCP 					; get the code pointer back.
.20c8	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows ?
.20ca	c8		iny				iny
.20cb	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; if comma, another variable
.20cd	f0 d7		beq $20a6			beq 	CommandRead
.20cf	88		dey				dey
.20d0	60		rts				rts
.20d1					CommandData:
.20d1	a9 80		lda #$80			lda 	#TOK_EOL 					; go forward to end of line or colon.
.20d3	a2 ca		ldx #$ca			ldx 	#TKW_COLON
.20d5	20 ed 27	jsr $27ed			jsr 	ScanForward
.20d8	88		dey				dey 								; ending on EOL is a scan issue, as it increments
.20d9	60		rts				rts
.20da					CommandRestore:
.20da	ad c8 0a	lda $0ac8			lda 	basePage
.20dd	8d b0 0c	sta $0cb0			sta 	dataPtr
.20e0	ad c9 0a	lda $0ac9			lda 	basePage+1
.20e3	8d b1 0c	sta $0cb1			sta 	dataPtr+1
.20e6	a9 03		lda #$03			lda 	#3
.20e8	8d b2 0c	sta $0cb2			sta 	dataIndex
.20eb	60		rts				rts
.20ec					SwapDPCP:
.20ec	8a		txa				txa
.20ed	48		pha				pha
.20ee	98		tya				tya 								; swap Y, DataIndex
.20ef	ac b2 0c	ldy $0cb2			ldy 	DataIndex
.20f2	8d b2 0c	sta $0cb2			sta 	DataIndex
.20f5	a5 28		lda $28				lda 	codePtr 					; swap code/dataptr low
.20f7	ae b0 0c	ldx $0cb0			ldx 	dataptr
.20fa	8d b0 0c	sta $0cb0			sta 	dataPtr
.20fd	86 28		stx $28				stx 	codePtr
.20ff	a5 29		lda $29				lda 	codePtr+1 					; swap code/dataptr high.
.2101	ae b1 0c	ldx $0cb1			ldx 	dataptr+1
.2104	8d b1 0c	sta $0cb1			sta 	dataPtr+1
.2107	86 29		stx $29				stx 	codePtr+1
.2109	68		pla				pla
.210a	aa		tax				tax
.210b	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/compat/transfer.asm

.210c					CommandGOSUB:
.210c	20 ae 2f	jsr $2fae			jsr 	EvaluateRootInteger			; get GOSUB line on stack top.
.210f	a2 04		ldx #$04			ldx 	#4 							; allocate 4 bytes on stack for GOSUB
.2111	a9 47		lda #$47			lda 	#markerGOSUB  				; <marker> <return addr/offset>
.2113	20 e3 36	jsr $36e3			jsr 	RSClaim
.2116	a9 01		lda #$01			lda 	#1 							; save position at offset 1.
.2118	20 0f 37	jsr $370f			jsr 	RSSavePosition
.211b	a2 00		ldx #$00			ldx 	#0 							; point back at GOSUB line
.211d	f0 1b		beq $213a			beq 	GotoTOS 					; and do a GOTO there.
.211f					CommandRETURN:
.211f	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.2121	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.2123	c9 47		cmp #$47			cmp 	#markerGOSUB 						; does it match
.2125	f0 05		beq $212c			beq 	_isok
.2127	a2 0e		ldx #$0e			ldx 	#ErrorID_returnErr
.2129	20 18 15	jsr $1518		jsr	errorHandler
.212c					_isok:
.212c	a9 01		lda #$01			lda 	#1
.212e	20 22 37	jsr $3722			jsr 	RSLoadPosition 				; reload the position from offset 1.
.2131	a9 04		lda #$04			lda 	#4 							; throw 4 bytes from stack.
.2133	20 05 37	jsr $3705			jsr 	RSFree
.2136	60		rts				rts
.2137					CommandGOTO:
.2137	20 ae 2f	jsr $2fae			jsr 	EvaluateRootInteger 		; get GOTO line on stack top.
.213a					GotoTOS:
.213a	20 d1 2a	jsr $2ad1			jsr 	ResetCodeAddress 			; simple search.
.213d					_GotoSearch:
.213d	a0 00		ldy #$00			ldy 	#0 							; get offset
.213f	b1 28		lda ($28),y			lda 	(codePtr),y
.2141	f0 21		beq $2164			beq 	_GotoError 					; not found.
.2143	c8		iny				iny									; check LSB match
.2144	b1 28		lda ($28),y			lda 	(codePtr),y
.2146	d5 50		cmp $50,x			cmp 	esInt0,x
.2148	d0 07		bne $2151			bne 	_GotoNext
.214a	c8		iny				iny
.214b	b1 28		lda ($28),y			lda 	(codePtr),y
.214d	d5 58		cmp $58,x			cmp 	esInt1,x
.214f	f0 10		beq $2161			beq 	_GotoFound
.2151					_GotoNext:
.2151	a0 00		ldy #$00			ldy 	#0 							; go next line
.2153	b1 28		lda ($28),y			lda 	(codePtr),y
.2155	18		clc				clc
.2156	65 28		adc $28				adc 	codePtr
.2158	85 28		sta $28				sta 	codePtr
.215a	90 e1		bcc $213d			bcc 	_GotoSearch
.215c	e6 29		inc $29				inc 	codePtr+1
.215e	4c 3d 21	jmp $213d			jmp 	_GotoSearch
.2161					_GotoFound:
.2161	a0 03		ldy #$03			ldy 	#3 							; continue from that line
.2163	60		rts				rts
.2164					_GotoError:
.2164	a2 0c		ldx #$0c			ldx 	#ErrorID_LineNumber
.2166	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/commands/io/input.asm

=32					MaxInputSize = 32
.0cb3					InputBuffer:
>0cb3							.fill 	MaxInputSize+1
.2169					Command_Input:
.2169	b1 28		lda ($28),y			lda 	(codePtr),y 			; see what's next.
.216b	c8		iny				iny
.216c	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 				; ignore commas.
.216e	f0 f9		beq $2169			beq 	Command_Input
.2170	88		dey				dey 							; undo consume
.2171	c9 ca		cmp #$ca			cmp 	#TKW_COLON
.2173	f0 54		beq $21c9			beq 	_CIExit 				; : or EOL, exit
.2175	c9 80		cmp #$80			cmp 	#TOK_EOL
.2177	f0 50		beq $21c9			beq 	_CIExit
.2179	c9 40		cmp #$40			cmp 	#$40 					; variable ?
.217b	90 12		bcc $218f			bcc 	_CIVariable
.217d	c9 85		cmp #$85			cmp 	#TOK_STR 				; if not quoted string syntax error.
.217f	d0 43		bne $21c4			bne 	_CISyntax
.2181	a2 00		ldx #$00			ldx 	#0
.2183	20 a5 2f	jsr $2fa5			jsr 	EvaluateString 			; evaluate and print string
.2186	20 a2 23	jsr $23a2			jsr 	TOSToTemp0
.2189	20 98 22	jsr $2298			jsr 	PrintString
.218c	4c 69 21	jmp $2169			jmp 	Command_Input
.218f					_CIVariable:
.218f	a2 00		ldx #$00			ldx 	#0 						; evaluate a reference.
.2191	20 e9 2f	jsr $2fe9			jsr 	EvaluateReference  		; this is where its going
.2194					_CIRetry:
.2194	a9 3f		lda #$3f			lda 	#"?"					; print prompt
.2196	a2 14		ldx #$14		ldx	#20
.2198	20 f6 14	jsr $14f6		jsr	deviceHandler
.219b	98		tya				tya
.219c	48		pha				pha
.219d	20 dd 21	jsr $21dd			jsr 	InputString 			; input a string (manually)
.21a0	a2 01		ldx #$01			ldx 	#1
.21a2	20 ca 21	jsr $21ca			jsr 	BufferToStackX 			; make stack,x ref input string.
.21a5	a5 48		lda $48				lda 	esType 					; if target type numeric
.21a7	29 40		and #$40			and 	#$40 					; then convert to number
.21a9	d0 11		bne $21bc			bne 	_CIWrite
.21ab	a2 01		ldx #$01			ldx 	#1
.21ad	20 a2 23	jsr $23a2			jsr 	TOSToTemp0 				; string address in temp0, goes here.
.21b0	a9 0a		lda #$0a			lda 	#10
.21b2	20 b6 34	jsr $34b6			jsr 	MInt32FromString 		; convert it back from a string.
.21b5	68		pla				pla
.21b6	a8		tay				tay
.21b7	b0 03		bcs $21bc			bcs 	_CIWrite 				; successfully converted.
.21b9	18		clc				clc 							; default fail FP conversion
.21ba	90 d8		bcc $2194			bcc		_CIRetry				; failed, try again.
.21bc					_CIWrite:
.21bc	a2 00		ldx #$00			ldx 	#0
.21be	20 40 23	jsr $2340			jsr 	WriteValue
.21c1	4c 69 21	jmp $2169			jmp 	Command_Input
.21c4					_CISyntax:
.21c4	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.21c6	20 18 15	jsr $1518		jsr	errorHandler
.21c9					_CIExit:
.21c9	60		rts				rts
.21ca					BufferToStackX:
.21ca	a9 b3		lda #$b3			lda 	#InputBuffer & $FF
.21cc	95 50		sta $50,x			sta 	esInt0,x
.21ce	a9 0c		lda #$0c			lda 	#InputBuffer >> 8
.21d0	95 58		sta $58,x			sta 	esInt1,x
.21d2	a9 00		lda #$00			lda 	#0
.21d4	95 60		sta $60,x			sta 	esInt2,x
.21d6	95 68		sta $68,x			sta 	esInt3,x
.21d8	a9 40		lda #$40			lda 	#$40
.21da	95 48		sta $48,x			sta 	esType,x
.21dc	60		rts				rts
.21dd					InputString:
.21dd	a9 00		lda #$00			lda 	#0
.21df	8d b3 0c	sta $0cb3			sta 	InputBuffer
.21e2					_InputLoop:
.21e2	a2 02		ldx #$02		ldx	#2
.21e4	20 f6 14	jsr $14f6		jsr	deviceHandler
.21e7	a2 0a		ldx #$0a		ldx	#10
.21e9	20 f6 14	jsr $14f6		jsr	deviceHandler
.21ec	c9 00		cmp #$00			cmp 	#0
.21ee	f0 f2		beq $21e2			beq 	_InputLoop
.21f0	c9 08		cmp #$08			cmp 	#8
.21f2	f0 19		beq $220d			beq 	_InputBackspace
.21f4	c9 0d		cmp #$0d			cmp 	#13
.21f6	f0 21		beq $2219			beq 	_InputExit
.21f8	ae b3 0c	ldx $0cb3			ldx 	InputBuffer
.21fb	e0 20		cpx #$20			cpx 	#MaxInputSize 			; too many characters
.21fd	f0 e3		beq $21e2			beq 	_InputLoop
.21ff	9d b4 0c	sta $0cb4,x			sta 	InputBuffer+1,x 		; write char
.2202	ee b3 0c	inc $0cb3			inc 	InputBuffer 			; advance count.
.2205					_InputPrintLoop:
.2205	a2 14		ldx #$14		ldx	#20
.2207	20 f6 14	jsr $14f6		jsr	deviceHandler
.220a	4c e2 21	jmp $21e2			jmp	 	_InputLoop
.220d					_InputBackspace:
.220d	ad b3 0c	lda $0cb3			lda 	InputBuffer 			; at start
.2210	f0 d0		beq $21e2			beq 	_InputLoop
.2212	ce b3 0c	dec $0cb3			dec 	InputBuffer
.2215	a9 08		lda #$08			lda 	#8
.2217	d0 ec		bne $2205			bne 	_InputPrintLoop
.2219					_InputExit:
.2219	a2 06		ldx #$06		ldx	#6
.221b	20 f6 14	jsr $14f6		jsr	deviceHandler
.221e	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/io/print.asm

.0cd4					lastPrintToken:
>0cd4							.fill 	1
.221f					Command_Print:
.221f	a9 00		lda #$00			lda 	#0 							; clear LPT to a non token
.2221	8d d4 0c	sta $0cd4			sta 	lastPrintToken
.2224	88		dey				dey
.2225					_PrintLoopSkip:
.2225	c8		iny				iny
.2226					_PrintLoop:
.2226	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows
.2228	c9 80		cmp #$80			cmp 	#TOK_EOL  					; done if end of line or colon
.222a	f0 5b		beq $2287			beq 	_PrintExit
.222c	c9 ca		cmp #$ca			cmp 	#TKW_COLON
.222e	f0 57		beq $2287			beq 	_PrintExit
.2230	8d d4 0c	sta $0cd4			sta 	lastPrintToken 				; update Last print token, so we check ; and ,
.2233	c9 cc		cmp #$cc			cmp 	#TKW_SEMICOLON 				; ignore semicolon
.2235	f0 ee		beq $2225			beq 	_PrintLoopSkip
.2237	c9 cd		cmp #$cd			cmp 	#TKW_QUOTE 					; ' is new line
.2239	f0 3c		beq $2277			beq	 	_PrintNewLine
.223b	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; , is print tab
.223d	f0 40		beq $227f			beq 	_PrintTab
.223f	20 8f 2f	jsr $2f8f			jsr 	EvaluateRoot 				; evaluate something at the root
.2242	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.2244	85 2a		sta $2a				sta 	temp0
.2246	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.2248	85 2b		sta $2b				sta 	1+(temp0)
.224a	a5 48		lda $48				lda 	esType 						; get type
.224c	f0 15		beq $2263			beq		_PrintInteger
.224e	4a		lsr a				lsr 	a 							; check for floating point
.224f	b0 08		bcs $2259			bcs 	_PrintFloat
.2251					_PrintString:
.2251	a2 00		ldx #$00			ldx 	#0 							; bottom string to temp0
.2253	20 a2 23	jsr $23a2			jsr 	TOSToTemp0
.2256	4c 71 22	jmp $2271			jmp 	_PrintTemp0 				; print no leading space.
.2259					_PrintFloat:
.2259	a9 00		lda #$00			lda 	#0 							; stack level.
.225b	a2 16		ldx #$16		ldx	#22
.225d	20 b0 1e	jsr $1eb0		jsr	floatingpointHandler
.2260	4c 6a 22	jmp $226a			jmp 	_PrintSpaceTemp0
.2263					_PrintInteger:
.2263	a9 8a		lda #$8a			lda 	#10+$80 					; base 10 signed
.2265	a2 00		ldx #$00			ldx 	#0 							; bottom stack element
.2267	20 9e 35	jsr $359e			jsr 	MInt32ToString				; convert to text
.226a					_PrintSpaceTemp0:
.226a	a9 20		lda #$20			lda 	#32
.226c	a2 14		ldx #$14		ldx	#20
.226e	20 f6 14	jsr $14f6		jsr	deviceHandler
.2271					_PrintTemp0:
.2271	20 98 22	jsr $2298			jsr 	PrintString
.2274	4c 26 22	jmp $2226			jmp 	_PrintLoop
.2277					_PrintNewLine:
.2277	a2 06		ldx #$06		ldx	#6
.2279	20 f6 14	jsr $14f6		jsr	deviceHandler
.227c	4c 25 22	jmp $2225			jmp 	_PrintLoopSkip
.227f					_PrintTab:
.227f	a2 1a		ldx #$1a		ldx	#26
.2281	20 f6 14	jsr $14f6		jsr	deviceHandler
.2284	4c 25 22	jmp $2225			jmp 	_PrintLoopSkip
.2287					_PrintExit:
.2287	ad d4 0c	lda $0cd4			lda		lastPrintToken 				; check last token
.228a	c9 cc		cmp #$cc			cmp 	#TKW_SEMICOLON 				; if , or ; do not print NL
.228c	f0 09		beq $2297			beq 	_PrintExit2
.228e	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.2290	f0 05		beq $2297			beq 	_PrintExit2
.2292	a2 06		ldx #$06		ldx	#6
.2294	20 f6 14	jsr $14f6		jsr	deviceHandler
.2297					_PrintExit2:
.2297	60		rts				rts
.2298					PrintString:
.2298	8a		txa				txa
.2299	48		pha				pha
.229a	98		tya				tya
.229b	48		pha				pha
.229c	a0 00		ldy #$00			ldy 	#0							; get length
.229e	b1 2a		lda ($2a),y			lda 	(temp0),y
.22a0	aa		tax				tax 								; into X
.22a1	e0 00		cpx #$00	_PSLoop:cpx 	#0 							; finished ?
.22a3	f0 10		beq $22b5			beq 	_PSExit
.22a5	ca		dex				dex
.22a6	8a		txa				txa
.22a7	48		pha				pha
.22a8	c8		iny				iny
.22a9	b1 2a		lda ($2a),y			lda 	(temp0),y
.22ab	a2 14		ldx #$14		ldx	#20
.22ad	20 f6 14	jsr $14f6		jsr	deviceHandler
.22b0	68		pla				pla
.22b1	aa		tax				tax
.22b2	4c a1 22	jmp $22a1			jmp 	_PSLoop
.22b5					_PSExit:
.22b5	68		pla				pla
.22b6	a8		tay				tay
.22b7	68		pla				pla
.22b8	aa		tax				tax
.22b9	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/io/text.asm

.22ba					Command_CLS:
.22ba	a2 04		ldx #$04		ldx	#4
.22bc	20 f6 14	jsr $14f6		jsr	deviceHandler
.22bf	60		rts				rts
.22c0					Command_Ink:
.22c0	a2 00		ldx #$00			ldx 	#0
.22c2	20 b8 2f	jsr $2fb8			jsr 	EvaluateSmallInteger
.22c5	a2 08		ldx #$08		ldx	#8
.22c7	20 f6 14	jsr $14f6		jsr	deviceHandler
.22ca	60		rts				rts
.22cb					Command_Paper:
.22cb	a2 00		ldx #$00			ldx 	#0
.22cd	20 b8 2f	jsr $2fb8			jsr 	EvaluateSmallInteger
.22d0	a2 12		ldx #$12		ldx	#18
.22d2	20 f6 14	jsr $14f6		jsr	deviceHandler
.22d5	60		rts				rts
.22d6					Command_Locate:
.22d6	a2 00		ldx #$00			ldx 	#0
.22d8	20 b8 2f	jsr $2fb8			jsr 	EvaluateSmallInteger
.22db	20 c8 36	jsr $36c8			jsr 	CheckComma
.22de	e8		inx				inx
.22df	20 b8 2f	jsr $2fb8			jsr 	EvaluateSmallInteger
.22e2	98		tya				tya
.22e3	48		pha				pha
.22e4	a4 51		ldy $51				ldy 	esInt0+1
.22e6	a5 50		lda $50				lda 	esInt0
.22e8	a2 10		ldx #$10		ldx	#16
.22ea	20 f6 14	jsr $14f6		jsr	deviceHandler
.22ed	68		pla				pla
.22ee	a8		tay				tay
.22ef	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/io/vdu.asm

.22f0					Command_VDU:
.22f0	20 ae 2f	jsr $2fae			jsr 	EvaluateRootInteger 			; get integer at root.
.22f3	a5 50		lda $50				lda 	esInt0
.22f5	a2 14		ldx #$14		ldx	#20
.22f7	20 f6 14	jsr $14f6		jsr	deviceHandler
.22fa					_CVNext:
.22fa	b1 28		lda ($28),y			lda 	(codePtr),y 					; what follows ?
.22fc	c8		iny				iny
.22fd	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 						; comma, do again
.22ff	f0 ef		beq $22f0			beq 	Command_VDU
.2301	c9 cc		cmp #$cc			cmp 	#TKW_SEMICOLON 					; semicolon, print MSB
.2303	d0 0a		bne $230f			bne 	_CVExit
.2305	a5 58		lda $58				lda 	esInt1
.2307	a2 14		ldx #$14		ldx	#20
.2309	20 f6 14	jsr $14f6		jsr	deviceHandler
.230c	4c fa 22	jmp $22fa			jmp 	_CVNext
.230f	88		dey		_CVExit:dey
.2310	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/link.asm


;******  Return to file: main/main.asm


;******  Processing file: main/commands/misc/assert.asm

.2311					Command_Assert:
.2311	20 ae 2f	jsr $2fae			jsr 	EvaluateRootInteger 		; what is being asserted.
.2314	20 6f 36	jsr $366f			jsr 	MInt32Zero 					; is it true ?
.2317	f0 01		beq $231a			beq 	_CAError
.2319	60		rts				rts
.231a					_CAError:
.231a	a2 04		ldx #$04			ldx 	#ErrorID_Assert
.231c	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/commands/misc/dim.asm

.231f					Command_Dim:
.231f	a2 04		ldx #$04		ldx	#4
.2321	20 1f 46	jsr $461f		jsr	variableHandler
.2324	b1 28		lda ($28),y			lda 	(codePtr),y 				; see what follows.
.2326	c8		iny				iny
.2327	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; comma follows, go back and do next
.2329	f0 f4		beq $231f			beq 	Command_Dim
.232b	88		dey				dey 								; unpick get
.232c	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/misc/let.asm

.232d					CommandLet:
.232d	a2 00		ldx #$00			ldx 	#0  						; get address to write.
.232f	20 e9 2f	jsr $2fe9			jsr 	EvaluateReference
.2332	a9 8d		lda #$8d			lda 	#TKW_EQUAL 					; check for equals
.2334	20 b0 36	jsr $36b0			jsr 	CheckToken
.2337	e8		inx				inx 								; do RHS
.2338	20 91 2f	jsr $2f91			jsr 	Evaluate 					; evaluate and dereference
.233b	ca		dex				dex
.233c	20 40 23	jsr $2340			jsr 	WriteValue 					; write it out
.233f	60		rts				rts
.2340					WriteValue:
.2340	98		tya				tya
.2341	48		pha				pha
.2342	20 a2 23	jsr $23a2			jsr 	TOSToTemp0 					; set temp0 to point to target address.
.2345	b5 48		lda $48,x			lda 	esType,x 					; check the string flags match
.2347	55 49		eor $49,x			eor 	esType+1,x 					; one string, one number causes an error.
.2349	29 40		and #$40			and 	#$40
.234b	d0 50		bne $239d			bne		_WVType
.234d	a0 01		ldy #$01			ldy 	#1 							; for string, copy 0 and 1.
.234f	b5 48		lda $48,x			lda 	esType,x 					; check for string assignment
.2351	29 40		and #$40			and 	#$40
.2353	d0 1f		bne $2374			bne 	_WVCopyString
.2355	b5 48		lda $48,x			lda 	esType,x 					; check both are integer.
.2357	15 49		ora $49,x			ora 	esType+1,x
.2359	4a		lsr a				lsr 	a
.235a	90 22		bcc $237e			bcc 	_WVCopyData4 				; copy 4 data bytes.
.235c	b5 48		lda $48,x			lda 	esType,x
.235e	4a		lsr a				lsr 	a
.235f	90 3c		bcc $239d			bcc 	_WVType
.2361	e8		inx				inx 								; force the value being written to be a float.
.2362	20 f3 2b	jsr $2bf3			jsr 	BPMakeFloat
.2365	ca		dex				dex
.2366	20 a2 23	jsr $23a2			jsr 	TOSToTemp0 					; set Temp0 to write address
.2369	e8		inx				inx
.236a	8a		txa				txa
.236b	a2 22		ldx #$22		ldx	#34
.236d	20 b0 1e	jsr $1eb0		jsr	floatingpointHandler
.2370	aa		tax				tax
.2371	4c 9a 23	jmp $239a			jmp 	_WVCopyExit
.2374					_WVCopyString:
.2374	8a		txa				txa
.2375	a2 10		ldx #$10		ldx	#16
.2377	20 f3 39	jsr $39f3		jsr	stringHandler
.237a	aa		tax				tax
.237b	4c 9a 23	jmp $239a			jmp 	_WVCopyExit
.237e					_WVCopyData4:
.237e	b5 48		lda $48,x			lda 	esType,x 					; is the int ref a byte ref ?
.2380	29 20		and #$20			and 	#$20 						; (e.g. is bit 5 set)
.2382	d0 10		bne $2394			bne 	_WVCopyData1
.2384	a0 03		ldy #$03			ldy 	#3
.2386	b5 69		lda $69,x			lda 	esInt3+1,x
.2388	91 2a		sta ($2a),y			sta 	(temp0),y
.238a	88		dey				dey
.238b	b5 61		lda $61,x			lda 	esInt2+1,x
.238d	91 2a		sta ($2a),y			sta 	(temp0),y
.238f	88		dey				dey
.2390	b5 59		lda $59,x			lda 	esInt1+1,x
.2392	91 2a		sta ($2a),y			sta 	(temp0),y
.2394					_WVCopyData1:
.2394	a0 00		ldy #$00			ldy 	#0
.2396	b5 51		lda $51,x			lda 	esInt0+1,x
.2398	91 2a		sta ($2a),y			sta 	(temp0),y
.239a					_WVCopyExit:
.239a	68		pla				pla
.239b	a8		tay				tay
.239c	60		rts				rts
.239d					_WVType:
.239d	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.239f	20 18 15	jsr $1518		jsr	errorHandler
.23a2					TOSToTemp0:
.23a2	b5 50		lda $50,x			lda 	esInt0,x
.23a4	85 2a		sta $2a				sta 	temp0
.23a6	b5 58		lda $58,x			lda 	esInt1,x
.23a8	85 2b		sta $2b				sta 	temp0+1
.23aa	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/misc/poke.asm

.23ab					Command_Poke:
.23ab	a9 01		lda #$01			lda 	#1
.23ad	d0 06		bne $23b5			bne 	PokeGeneral
.23af					Command_Doke:
.23af	a9 02		lda #$02			lda 	#2
.23b1	d0 02		bne $23b5			bne 	PokeGeneral
.23b3					Command_Loke:
.23b3	a9 03		lda #$03			lda 	#3
.23b5					PokeGeneral:
.23b5	48		pha				pha 								; save id (PDL = 123)
.23b6	20 ae 2f	jsr $2fae			jsr 	EvaluateRootInteger 		; target address
.23b9	20 c8 36	jsr $36c8			jsr	 	CheckComma
.23bc	e8		inx				inx
.23bd	20 b0 2f	jsr $2fb0			jsr 	EvaluateInteger 			; what value to POKE ?
.23c0	ca		dex				dex
.23c1	20 a2 23	jsr $23a2			jsr 	TOSToTemp0 					; temp0 points to the target address
.23c4	84 32		sty $32				sty 	tempShort 					; save Y
.23c6	68		pla				pla 								; get copy type (1-3) and dispatch
.23c7	aa		tax				tax
.23c8	ca		dex				dex
.23c9	f0 14		beq $23df			beq 	_Poke1
.23cb	ca		dex				dex
.23cc	f0 0b		beq $23d9			beq 	_Poke2
.23ce	a0 03		ldy #$03			ldy 	#3							; put 4 bytes
.23d0	a5 69		lda $69				lda 	esInt3+1
.23d2	91 2a		sta ($2a),y			sta 	(temp0),y
.23d4	88		dey				dey
.23d5	a5 61		lda $61				lda 	esInt2+1
.23d7	91 2a		sta ($2a),y			sta 	(temp0),y
.23d9					_Poke2:
.23d9	a0 01		ldy #$01			ldy 	#1
.23db	a5 59		lda $59				lda 	esInt1+1
.23dd	91 2a		sta ($2a),y			sta 	(temp0),y
.23df					_Poke1:
.23df	a0 00		ldy #$00			ldy 	#0
.23e1	a5 51		lda $51				lda 	esInt0+1
.23e3	91 2a		sta ($2a),y			sta 	(temp0),y
.23e5	a4 32		ldy $32				ldy 	tempShort 					; restore Y and exit
.23e7	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/misc/rem.asm

.23e8					Command_Rem:
.23e8					Command_Rem2:
.23e8	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows
.23ea	c9 85		cmp #$85			cmp 	#TOK_STR 					; if it is a string then skip it.
.23ec	d0 06		bne $23f4			bne 	_CRNotString
.23ee	c8		iny				iny
.23ef	98		tya				tya
.23f0	38		sec				sec
.23f1	71 28		adc ($28),y			adc 	(codePtr),y 				; get string size, add to Y, +1 for the length
.23f3	a8		tay				tay
.23f4					_CRNotString:
.23f4	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/misc/stopend.asm

.23f5					CommandStop:
.23f5	a2 06		ldx #$06			ldx 	#ErrorID_Stop
.23f7	20 18 15	jsr $1518		jsr	errorHandler
.23fa					CommandEnd:
.23fa	4c 31 37	jmp $3731			jmp 	WarmStart
.23fd					CommandXemu:
.23fd	4c ff ff	jmp $ffff			jmp 	$FFFF 						; fudge to crash out of emulator
.2400					AdvanceNextLine:
.2400	a0 00		ldy #$00			ldy 	#0 							; get offset
.2402	b1 28		lda ($28),y			lda 	(codePtr),y
.2404	18		clc				clc 								; add to codePtr
.2405	65 28		adc $28				adc 	codePtr
.2407	85 28		sta $28				sta 	codePtr
.2409	90 02		bcc $240d			bcc 	_ANLNoCarry
.240b	e6 29		inc $29				inc 	codePtr+1
.240d					_ANLNoCarry:
.240d	b1 28		lda ($28),y			lda 	(codePtr),y 				; if end of program (or was just stand alone.
.240f	f0 e9		beq $23fa			beq 	CommandEnd 					; execute END
.2411	a0 03		ldy #$03			ldy 	#3 							; start of tokens on line.
.2413	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/for.asm

.2414					Command_FOR:
.2414	a9 46		lda #$46			lda 	#markerFOR 					; allocate the space and set the marker
.2416	a2 0b		ldx #$0b			ldx 	#11
.2418	20 e3 36	jsr $36e3			jsr 	RSClaim
.241b	20 2d 23	jsr $232d			jsr 	CommandLET 					; do the same as LET FOR [a = 4]
.241e	a5 48		lda $48				lda 	esType 						; check type should be integer reference.
.2420	c9 80		cmp #$80			cmp 	#$80 						; we do not do FOR floats.
.2422	d0 4c		bne $2470			bne 	_CFType
.2424	a9 ce		lda #$ce			lda 	#TKW_TO 					; check TO present.
.2426	20 b0 36	jsr $36b0			jsr 	CheckToken
.2429	a2 01		ldx #$01			ldx 	#1 							; keep the variable address in stack 0
.242b	20 b0 2f	jsr $2fb0			jsr 	EvaluateInteger				; get terminal value in stack 1
.242e	98		tya				tya
.242f	48		pha				pha
.2430	a0 04		ldy #$04			ldy 	#4
.2432	a5 50		lda $50				lda		esInt0 						; copy the address of the index variable into 4 and 5
.2434	91 37		sta ($37),y			sta 	(rsPointer),y
.2436	c8		iny				iny
.2437	a5 58		lda $58				lda		esInt1
.2439	91 37		sta ($37),y			sta 	(rsPointer),y
.243b	c8		iny				iny
.243c	a9 01		lda #$01			lda 	#1  						; the default step in 6, (-128 .. 127 only)
.243e	91 37		sta ($37),y			sta 	(rsPointer),y
.2440	c8		iny				iny
.2441	a5 51		lda $51				lda		esInt0+1 					; terminal value in 7 to 11.
.2443	91 37		sta ($37),y			sta 	(rsPointer),y
.2445	c8		iny				iny
.2446	a5 59		lda $59				lda		esInt1+1
.2448	91 37		sta ($37),y			sta 	(rsPointer),y
.244a	c8		iny				iny
.244b	a5 61		lda $61				lda		esInt2+1
.244d	91 37		sta ($37),y			sta 	(rsPointer),y
.244f	c8		iny				iny
.2450	a5 69		lda $69				lda		esInt3+1
.2452	91 37		sta ($37),y			sta 	(rsPointer),y
.2454	68		pla				pla
.2455	a8		tay				tay
.2456	b1 28		lda ($28),y			lda 	(codePtr),y 				; followed by STEP.
.2458	c9 cf		cmp #$cf			cmp 	#TKW_STEP
.245a	d0 0e		bne $246a			bne 	_CFDone
.245c	c8		iny				iny									; skip over step.
.245d	20 b0 2f	jsr $2fb0			jsr 	EvaluateInteger 			; get step
.2460	98		tya				tya
.2461	48		pha				pha
.2462	b5 50		lda $50,x			lda 	esInt0,x 					; copy it into step (bit lazy here)
.2464	a0 06		ldy #$06			ldy 	#6
.2466	91 37		sta ($37),y			sta 	(rsPointer),y
.2468	68		pla				pla
.2469	a8		tay				tay
.246a					_CFDone:
.246a	a9 01		lda #$01			lda 	#1
.246c	20 0f 37	jsr $370f			jsr 	RSSavePosition 				; save position.
.246f	60		rts				rts
.2470					_CFType:
.2470	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.2472	20 18 15	jsr $1518		jsr	errorHandler
.2475					Command_NEXT:
.2475	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.2477	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.2479	c9 46		cmp #$46			cmp 	#markerFOR 						; does it match
.247b	f0 05		beq $2482			beq 	_isok
.247d	a2 10		ldx #$10			ldx 	#ErrorID_nextErr
.247f	20 18 15	jsr $1518		jsr	errorHandler
.2482					_isok:
.2482	b1 28		lda ($28),y			lda 	(codePtr),y 				; is it NEXT <index>
.2484	c9 40		cmp #$40			cmp 	#$40 						; e.g. a variable follows 00-3F
.2486	b0 18		bcs $24a0			bcs 	_CNNoIndex
.2488	a2 00		ldx #$00			ldx 	#0 							; start on stack
.248a	20 e9 2f	jsr $2fe9			jsr 	EvaluateReference 			; this is the variable/parameter to localise.
.248d	98		tya				tya
.248e	48		pha				pha
.248f	a0 04		ldy #$04			ldy 	#4 							; check same variable as that stored at +4,+5
.2491	b1 37		lda ($37),y			lda 	(rsPointer),y
.2493	d5 50		cmp $50,x			cmp 	esInt0,x
.2495	d0 76		bne $250d			bne 	_CNBadIndex
.2497	c8		iny				iny
.2498	b1 37		lda ($37),y			lda 	(rsPointer),y
.249a	d5 58		cmp $58,x			cmp 	esInt1,x
.249c	d0 6f		bne $250d			bne 	_CNBadIndex
.249e	68		pla				pla
.249f	a8		tay				tay
.24a0					_CNNoIndex:
.24a0	98		tya				tya
.24a1	48		pha				pha
.24a2	a0 04		ldy #$04			ldy 	#4 							; make temp0 point to the index
.24a4	b1 37		lda ($37),y			lda 	(rsPointer),y
.24a6	85 2a		sta $2a				sta 	temp0
.24a8	c8		iny				iny
.24a9	b1 37		lda ($37),y			lda 	(rsPointer),y
.24ab	85 2b		sta $2b				sta 	temp0+1
.24ad	c8		iny				iny
.24ae	a2 00		ldx #$00			ldx 	#0 							; X is the sign extend part of the step.
.24b0	b1 37		lda ($37),y			lda 	(rsPointer),y 				; get the step.
.24b2	85 2f		sta $2f				sta 	temp2+1 					; save for later.
.24b4	10 01		bpl $24b7			bpl 	_CNSignX
.24b6	ca		dex				dex  								; X = $FF
.24b7					_CNSignX:
.24b7	18		clc				clc 								; add to the LSB
.24b8	a0 00		ldy #$00			ldy 	#0
.24ba	71 2a		adc ($2a),y			adc 	(temp0),y
.24bc	91 2a		sta ($2a),y			sta 	(temp0),y
.24be					_CNPropogate:
.24be	c8		iny				iny  								; add the sign extended in X to the rest.
.24bf	8a		txa				txa
.24c0	71 2a		adc ($2a),y			adc 	(temp0),y
.24c2	91 2a		sta ($2a),y			sta 	(temp0),y
.24c4	c8		iny				iny
.24c5	8a		txa				txa
.24c6	71 2a		adc ($2a),y			adc 	(temp0),y
.24c8	91 2a		sta ($2a),y			sta 	(temp0),y
.24ca	c8		iny				iny
.24cb	8a		txa				txa
.24cc	71 2a		adc ($2a),y			adc 	(temp0),y
.24ce	91 2a		sta ($2a),y			sta 	(temp0),y
.24d0	18		clc				clc 								; point temp1 to the terminal value stored in the stack.
.24d1	a5 37		lda $37				lda 	rsPointer
.24d3	69 07		adc #$07			adc 	#7
.24d5	85 2c		sta $2c				sta 	temp1
.24d7	a9 00		lda #$00			lda 	#0
.24d9	85 2e		sta $2e				sta 	temp2 						; clear temp2, which is the OR of all the subtractions.
.24db	a8		tay				tay 								; and clear the Y register again.
.24dc	65 38		adc $38				adc 	rsPointer+1
.24de	85 2d		sta $2d				sta 	temp1+1
.24e0	38		sec				sec 								; calculate current - limit oring interim values.
.24e1	20 19 25	jsr $2519			jsr 	_CNCompare 					; each of these does a byte.
.24e4	20 19 25	jsr $2519			jsr 	_CNCompare 					; we calculate the OR of all these subtractions.
.24e7	20 19 25	jsr $2519			jsr 	_CNCompare 					; and the carry of the subtraction.
.24ea	20 19 25	jsr $2519			jsr 	_CNCompare
.24ed	50 02		bvc $24f1			bvc 	_CNNoOverflow 				; converts to a signed comparison on the sign bit.
.24ef	49 80		eor #$80			eor 	#$80
.24f1					_CNNoOverflow:
.24f1	a4 2f		ldy $2f				ldy 	temp2+1						; get step back
.24f3	30 1d		bmi $2512			bmi 	_CNCheckDownto
.24f5	c9 00		cmp #$00			cmp 	#0
.24f7	30 0c		bmi $2505			bmi 	_CNLoopRound 				; loop round if < =
.24f9	a5 2e		lda $2e				lda 	temp2
.24fb	f0 08		beq $2505			beq 	_CNLoopRound
.24fd					_CNLoopExit:
.24fd	68		pla				pla
.24fe	a8		tay				tay
.24ff	a9 0b		lda #$0b			lda 	#11
.2501	20 05 37	jsr $3705			jsr 	RSFree
.2504	60		rts				rts
.2505					_CNLoopRound:
.2505	68		pla				pla
.2506	a8		tay				tay
.2507	a9 01		lda #$01			lda 	#1
.2509	20 22 37	jsr $3722			jsr 	RSLoadPosition				; go back to the loop top
.250c	60		rts				rts
.250d					_CNBadIndex:
.250d	a2 13		ldx #$13			ldx 	#ErrorID_BadIndex
.250f	20 18 15	jsr $1518		jsr	errorHandler
.2512					_CNCheckDownto:
.2512	c9 00		cmp #$00			cmp 	#0
.2514	10 ef		bpl $2505			bpl 	_CNLoopRound
.2516	4c fd 24	jmp $24fd			jmp 	_CNLoopExit
.2519					_CNCompare:
.2519	b1 2a		lda ($2a),y			lda 	(temp0),y 					; do the subtraction - compare don't care about answer
.251b	f1 2c		sbc ($2c),y			sbc 	(temp1),y
.251d	05 2e		ora $2e				ora 	temp2 						; Or into temp2 (does not affect carry)
.251f	85 2e		sta $2e				sta 	temp2
.2521	c8		iny				iny
.2522	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/if.asm

.2523					CommandIf:
.2523	20 ae 2f	jsr $2fae			jsr 	EvaluateRootInteger 		; get what's being tested.
.2526	b1 28		lda ($28),y			lda 	(codePtr),y 				; check for IF .. THEN or IF .. GOTO which are single lines.
.2528	c9 91		cmp #$91			cmp 	#TKW_GOTO
.252a	f0 04		beq $2530			beq 	_IfSimple
.252c	c9 a1		cmp #$a1			cmp 	#TKW_THEN
.252e	d0 1b		bne $254b			bne 	_IfComplex
.2530					_IfSimple:
.2530	20 6f 36	jsr $366f			jsr 	MInt32Zero					; check if TOS zero
.2533	f0 10		beq $2545			beq 	_IfEOL 						; go to next line.
.2535	b1 28		lda ($28),y			lda 	(codePtr),y 				; get and skip token.
.2537	c8		iny				iny
.2538	c9 91		cmp #$91			cmp 	#TKW_GOTO 					; was it if GOTO ?
.253a	f0 0c		beq $2548			beq 	_IfGoto 					; do the Goto code
.253c	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows the THEN ?
.253e	29 c0		and #$c0			and 	#$C0 						; check $40-$7F
.2540	c9 40		cmp #$40			cmp 	#$40 						; e.g. number IF x = 0 THEN 170
.2542	f0 04		beq $2548			beq 	_IfGoto
.2544	60		rts				rts 								; else continue on this line.
.2545					_IfEOL:
.2545	4c 00 24	jmp $2400			jmp 	AdvanceNextLine 			; go to next line
.2548					_IfGoto:
.2548	4c 37 21	jmp $2137			jmp 	CommandGoto
.254b					_IfComplex:
.254b	20 6f 36	jsr $366f			jsr 	MInt32Zero 					; is it true ?
.254e	f0 01		beq $2551			beq 	_IFSkip 					; if non-zero then skip to ELSE/ENDIF
.2550	60		rts				rts 								; else continue.
.2551					_IFSkip:
.2551	a9 d6		lda #$d6			lda	 	#TKW_ELSE 					; test failed, go to ELSE or ENDIF whichever comes first.
.2553	a2 a2		ldx #$a2			ldx 	#TKW_ENDIF
.2555	4c ed 27	jmp $27ed			jmp		ScanForward
.2558					Command_ELSE:
.2558	a2 a2		ldx #$a2			ldx 	#TKW_ENDIF
.255a	8a		txa				txa
.255b	4c ed 27	jmp $27ed			jmp		ScanForward
.255e					Command_ENDIF:
.255e	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/local.asm

.0cd5					storeSize:
>0cd5							.fill 	1
.255f					CommandLocal:
.255f	a2 00		ldx #$00			ldx 	#0
.2561	20 7d 25	jsr $257d			jsr 	LocaliseVariable 			; localise one.
.2564					_CLCheckNext:
.2564	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows ?
.2566	c8		iny				iny
.2567	c9 8d		cmp #$8d			cmp 	#TKW_EQUAL 					; something local "x = 2" ?
.2569	f0 06		beq $2571			beq 	_CLAssignment
.256b	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; comma try again.
.256d	f0 f0		beq $255f			beq 	CommandLocal
.256f	88		dey				dey
.2570	60		rts				rts
.2571					_CLAssignment:
.2571	a2 01		ldx #$01			ldx 	#1
.2573	20 91 2f	jsr $2f91			jsr 	Evaluate 					; evaluate RHS
.2576	ca		dex				dex
.2577	20 40 23	jsr $2340			jsr 	WriteValue
.257a	4c 64 25	jmp $2564			jmp 	_CLCheckNext
.257d					LocaliseVariable:
.257d	b1 28		lda ($28),y			lda 	(codePtr),y 				; check it's a variable.
.257f	c9 40		cmp #$40			cmp 	#$40
.2581	b0 67		bcs $25ea			bcs 	_LVSyntax
.2583	8a		txa				txa 								; get the address of that variable.
.2584	a2 02		ldx #$02		ldx	#2
.2586	20 1f 46	jsr $461f		jsr	variableHandler
.2589	aa		tax				tax
.258a	8a		txa				txa
.258b	48		pha				pha
.258c	98		tya				tya
.258d	48		pha				pha
.258e	20 a2 23	jsr $23a2			jsr 	TOSToTemp0 					; the address of the variable is now in temp0.
.2591	b5 48		lda $48,x			lda 	esType,x 					; get the type
.2593	0a		asl a				asl 	a
.2594	10 16		bpl $25ac			bpl 	_LVPushNumber
.2596	a0 00		ldy #$00			ldy 	#0 							; put address of data in temp1
.2598	b1 2a		lda ($2a),y			lda 	(temp0),y
.259a	c8		iny				iny
.259b	85 2c		sta $2c				sta 	temp1
.259d	b1 2a		lda ($2a),y			lda 	(temp0),y
.259f	85 2d		sta $2d				sta 	temp1+1
.25a1	a0 00		ldy #$00			ldy 	#0 	 						; get length
.25a3	b1 2c		lda ($2c),y			lda 	(temp1),y
.25a5	aa		tax				tax 								; into X
.25a6	e8		inx				inx 								; +1 for length.
.25a7	a9 24		lda #$24			lda 	#markerString
.25a9	4c c1 25	jmp $25c1			jmp 	_LVWriteFrame
.25ac					_LVPushNumber:
.25ac	a5 2a		lda $2a				lda 	temp0 						; storage address and data source are the same
.25ae	85 2c		sta $2c				sta 	temp1
.25b0	a5 2b		lda $2b				lda 	temp0+1
.25b2	85 2d		sta $2d				sta 	temp1+1
.25b4	b5 48		lda $48,x			lda 	esType,x 					; put float flag into carry.
.25b6	4a		lsr a				lsr 	a
.25b7	a9 25		lda #$25			lda 	#markerInt 					; get marker and size.
.25b9	a2 04		ldx #$04			ldx 	#VarISize
.25bb	90 04		bcc $25c1			bcc 	_LVIsInteger
.25bd	a9 23		lda #$23			lda 	#markerFloat
.25bf	a2 06		ldx #$06			ldx 	#VarFSize
.25c1					_LVIsInteger:
.25c1					_LVWriteFrame:
.25c1	8e d5 0c	stx $0cd5			stx 	storeSize 					; number of bytes to copy from (temp0)
.25c4	e8		inx				inx 								; allocate 3 bytes, 2 for the address, 1 for the marker.
.25c5	e8		inx				inx
.25c6	e8		inx				inx
.25c7	20 e3 36	jsr $36e3			jsr 	RSClaim 					; create the stack frame.
.25ca	a5 2a		lda $2a				lda 	temp0 						; copy the target address to slots 1 & 2
.25cc	a0 01		ldy #$01			ldy 	#1
.25ce	91 37		sta ($37),y			sta 	(rsPointer),y
.25d0	c8		iny				iny
.25d1	a5 2b		lda $2b				lda 	temp0+1
.25d3	91 37		sta ($37),y			sta 	(rsPointer),y
.25d5	a0 00		ldy #$00			ldy 	#0
.25d7					_LVCopyData:
.25d7	b1 2c		lda ($2c),y			lda 	(temp1),y 					; get data from source, temp1
.25d9	c8		iny				iny 								; write allowing for the header bit.
.25da	c8		iny				iny
.25db	c8		iny				iny
.25dc	91 37		sta ($37),y			sta 	(rsPointer),y
.25de	88		dey				dey
.25df	88		dey				dey
.25e0	ce d5 0c	dec $0cd5			dec 	storeSize 					; do it storesize times
.25e3	d0 f2		bne $25d7			bne 	_LVCopyData
.25e5	68		pla				pla
.25e6	a8		tay				tay
.25e7	68		pla				pla
.25e8	aa		tax				tax
.25e9	60		rts				rts
.25ea					_LVSyntax:
.25ea	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.25ec	20 18 15	jsr $1518		jsr	errorHandler
.25ef					RestoreLocals:
.25ef	a2 00		ldx #$00			ldx 	#0
.25f1	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.25f3	c9 40		cmp #$40			cmp	 	#64
.25f5	90 01		bcc $25f8			bcc 	_RLocal
.25f7	60		rts				rts
.25f8					_RLocal:
.25f8	8a		txa				txa
.25f9	48		pha				pha
.25fa	98		tya				tya
.25fb	48		pha				pha
.25fc	a0 01		ldy #$01			ldy 	#1 							; copy target address to temp0
.25fe	b1 37		lda ($37),y			lda 	(rsPointer),y
.2600	85 2a		sta $2a				sta 	temp0
.2602	c8		iny				iny
.2603	b1 37		lda ($37),y			lda 	(rsPointer),y
.2605	85 2b		sta $2b				sta 	temp0+1
.2607	a0 00		ldy #$00			ldy 	#0 							; get type back.
.2609	b1 37		lda ($37),y			lda 	(rsPointer),y
.260b	c9 24		cmp #$24			cmp 	#markerString 				; string is ... different :)
.260d	f0 28		beq $2637			beq 	_RString
.260f	a2 04		ldx #$04			ldx		#VARISize 					; size integer
.2611	c9 25		cmp #$25			cmp 	#markerInt
.2613	f0 02		beq $2617			beq 	_RIsInteger
.2615	a2 06		ldx #$06			ldx 	#VARFSize 					; size float
.2617					_RIsInteger:
.2617	8a		txa				txa
.2618	48		pha				pha
.2619	a0 03		ldy #$03			ldy 	#3							; start size to copy back from pointer.
.261b					_RCopyBack:
.261b	b1 37		lda ($37),y			lda 	(rsPointer),y
.261d	88		dey				dey
.261e	88		dey				dey
.261f	88		dey				dey
.2620	91 2a		sta ($2a),y			sta 	(temp0),y
.2622	c8		iny				iny
.2623	c8		iny				iny
.2624	c8		iny				iny
.2625	c8		iny				iny
.2626	ca		dex				dex
.2627	d0 f2		bne $261b			bne 	_RCopyBack
.2629	68		pla				pla 								; get size add 3
.262a	18		clc				clc
.262b	69 03		adc #$03			adc 	#3 							; (2 for address one for marker)
.262d					_RRestoreAAndLoop:
.262d	20 05 37	jsr $3705			jsr 	RSFree
.2630	68		pla				pla
.2631	a8		tay				tay
.2632	68		pla				pla
.2633	aa		tax				tax
.2634	4c ef 25	jmp $25ef			jmp 	RestoreLocals 				; go see if there are any more locals.
.2637					_RString:
.2637	a2 00		ldx #$00			ldx 	#0
.2639	a0 01		ldy #$01			ldy 	#1 							; set up for a string write.
.263b	b1 37		lda ($37),y			lda 	(rsPointer),y
.263d	95 50		sta $50,x			sta 	esInt0,x
.263f	c8		iny				iny
.2640	b1 37		lda ($37),y			lda 	(rsPointer),y
.2642	95 58		sta $58,x			sta 	esInt1,x
.2644	18		clc				clc
.2645	a5 37		lda $37				lda 	rsPointer
.2647	69 03		adc #$03			adc 	#3
.2649	95 51		sta $51,x			sta 	esInt0+1,x
.264b	a5 38		lda $38				lda 	rsPointer+1
.264d	69 00		adc #$00			adc 	#0
.264f	95 59		sta $59,x			sta 	esInt1+1,x
.2651	8a		txa				txa
.2652	a2 10		ldx #$10		ldx	#16
.2654	20 f3 39	jsr $39f3		jsr	stringHandler
.2657	a0 03		ldy #$03			ldy 	#3 							; get string length
.2659	b1 37		lda ($37),y			lda 	(rsPointer),y
.265b	18		clc				clc
.265c	69 04		adc #$04			adc 	#4 							; add 4 (pointer, marker, length) to restore.
.265e	4c 2d 26	jmp $262d			jmp 	_RRestoreAAndLoop

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/proc.asm

.0cd6					paramCount:
>0cd6							.fill 	1
.2661					CallProc:
.2661	20 e9 26	jsr $26e9			jsr 	FindProcedure 				; find procedure, put in temp0. A contains name length.
.2664	48		pha				pha 								; save length on stack
.2665	85 32		sta $32				sta 	tempShort 					; save length in tempShort
.2667	a5 2b		lda $2b				lda 	temp0+1 					; save procedure target on stack.
.2669	48		pha				pha
.266a	a5 2a		lda $2a				lda 	temp0
.266c	48		pha				pha
.266d	98		tya				tya 								; calculate Y + length
.266e	18		clc				clc
.266f	65 32		adc $32				adc 	tempShort
.2671	a8		tay				tay
.2672	a2 00		ldx #$00			ldx 	#0 							; where the first parameter goes - 1
.2674					_CallProcEvalParams:
.2674	e8		inx				inx
.2675	b1 28		lda ($28),y			lda 	(codePtr),y 				; do we have ) , e.g. the end of the parameters ?
.2677	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.2679	f0 0b		beq $2686			beq 	_CPDoneParams
.267b	20 91 2f	jsr $2f91			jsr 	Evaluate 					; evaluate a parameter
.267e	b1 28		lda ($28),y			lda 	(codePtr),Y 				; get what's next, preconsume
.2680	c8		iny				iny
.2681	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; if comma, go get another parameter
.2683	f0 ef		beq $2674			beq 	_CallProcEvalParams
.2685	88		dey				dey 								; undo consumption.
.2686					_CPDoneParams:
.2686	20 bb 36	jsr $36bb			jsr 	CheckRightParen 			; check closing parenthesis.
.2689	8e d6 0c	stx $0cd6			stx 	paramCount 					; store parameter count+1
.268c	a2 04		ldx #$04			ldx 	#4							; make space on stack
.268e	a9 50		lda #$50			lda 	#markerPROC
.2690	20 e3 36	jsr $36e3			jsr 	RSClaim
.2693	a9 01		lda #$01			lda 	#1 							; store return address.
.2695	20 0f 37	jsr $370f			jsr 	RSSavePosition
.2698	68		pla				pla 								; get the new code Ptr
.2699	85 28		sta $28				sta 	codePtr
.269b	68		pla				pla
.269c	85 29		sta $29				sta 	codePtr+1
.269e	68		pla				pla 								; length of name + 4 is the param start.
.269f	18		clc				clc
.26a0	69 04		adc #$04			adc 	#4
.26a2	a8		tay				tay
.26a3	a2 ff		ldx #$ff			ldx 	#$FF
.26a5					_CPLoadParameters:
.26a5	e8		inx				inx 								; point to where the address should be loaded.
.26a6	ec d6 0c	cpx $0cd6			cpx 	paramCount 					; too many parameters in definition ?
.26a9	f0 1e		beq $26c9			beq 	_CPParamError
.26ab	b1 28		lda ($28),y			lda 	(codePtr),y					; what follows
.26ad	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN 				; is it the right bracket
.26af	f0 0e		beq $26bf			beq 	_CPParamComplete 			; done all the parameters, perhaps.
.26b1	20 7d 25	jsr $257d			jsr 	LocaliseVariable 			; make following variable local, ref in tos,x
.26b4	20 40 23	jsr $2340			jsr 	WriteValue 					; copy the evaluated parameter into there.
.26b7	b1 28		lda ($28),y			lda 	(codePtr),y 				; followed by a comma ?
.26b9	c8		iny				iny
.26ba	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.26bc	f0 e7		beq $26a5			beq 	_CPLoadParameters
.26be	88		dey				dey 								; no, unconsume and check for )
.26bf					_CPParamComplete:
.26bf	20 bb 36	jsr $36bb			jsr 	CheckRightParen 			; check )
.26c2	e8		inx				inx 								; check right number of parameters have been consumed
.26c3	ec d6 0c	cpx $0cd6			cpx 	paramCount
.26c6	d0 01		bne $26c9			bne 	_CPParamError
.26c8	60		rts				rts
.26c9					_CPParamError:
.26c9	a2 18		ldx #$18			ldx 	#ErrorID_Params
.26cb	20 18 15	jsr $1518		jsr	errorHandler
.26ce					ReturnProc:
.26ce	20 ef 25	jsr $25ef			jsr 	RestoreLocals 				; get the locals back.
.26d1	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.26d3	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.26d5	c9 50		cmp #$50			cmp 	#markerPROC 						; does it match
.26d7	f0 05		beq $26de			beq 	_isok
.26d9	a2 12		ldx #$12			ldx 	#ErrorID_endProcErr
.26db	20 18 15	jsr $1518		jsr	errorHandler
.26de					_isok:
.26de	a9 01		lda #$01			lda 	#1
.26e0	20 22 37	jsr $3722			jsr 	RSLoadPosition 				; reload the position from offset 1.
.26e3	a9 04		lda #$04			lda 	#4 							; throw 4 bytes from stack.
.26e5	20 05 37	jsr $3705			jsr 	RSFree
.26e8	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/proctable.asm

.0cd7					procList:
>0cd7							.fill 	2		 					; terminated by name high being zero.
.0cd9					yInLine:
>0cd9							.fill 	1
.26e9					FindProcedure:
.26e9	8c d9 0c	sty $0cd9			sty 	yInLine 					; save current position.
.26ec	20 a7 27	jsr $27a7			jsr 	CalculateProcedureHash		; calculate the hash of the procedure.
.26ef	85 2c		sta $2c				sta 	temp1
.26f1	ad d7 0c	lda $0cd7			lda		procList 					; put procList address in temp2
.26f4	85 2e		sta $2e				sta 	temp2
.26f6	ad d8 0c	lda $0cd8			lda 	procList+1
.26f9	85 2f		sta $2f				sta 	temp2+1
.26fb	a0 00		ldy #$00			ldy 	#0 							; position in this table.
.26fd					_FPLoop:
.26fd	b1 2e		lda ($2e),y			lda 	(temp2),y
.26ff	f0 4f		beq $2750			beq 	_FPError 					; if so, we don't know this procedure.
.2701	85 2b		sta $2b				sta 	temp0+1 					; copy MSB/LSB to temp0 as we go.
.2703	c8		iny				iny
.2704	b1 2e		lda ($2e),y			lda 	(temp2),y
.2706	85 2a		sta $2a				sta 	temp0
.2708	c8		iny				iny
.2709	b1 2e		lda ($2e),y			lda 	(temp2),y					; check the procedure hash.
.270b	c5 2c		cmp $2c				cmp 	temp1
.270d	d0 2b		bne $273a			bne 	_FPNext 					; hash is different, go to next.
.270f	38		sec				sec
.2710	ad d9 0c	lda $0cd9			lda 	yInLine 					; position in line must be at least 4
.2713	e9 04		sbc #$04			sbc 	#4
.2715	18		clc				clc
.2716	65 28		adc $28				adc 	codePtr
.2718	85 30		sta $30				sta 	temp3
.271a	a5 29		lda $29				lda 	codePtr+1
.271c	69 00		adc #$00			adc 	#0
.271e	85 31		sta $31				sta 	temp3+1
.2720	98		tya				tya
.2721	48		pha				pha
.2722	a0 04		ldy #$04			ldy 	#4
.2724					_FPCName:
.2724	b1 30		lda ($30),y			lda 	(temp3),y 					; check the same
.2726	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.2728	d0 0e		bne $2738			bne 	_FPpulYNext 				; if different go to next one.
.272a	c8		iny				iny
.272b	c9 3a		cmp #$3a			cmp 	#$3A
.272d	90 f5		bcc $2724			bcc 	_FPCName 					; compare the whole lot....
.272f	68		pla				pla 								; throw away the saved Y
.2730	98		tya				tya 								; length of name is Y-4
.2731	38		sec				sec
.2732	e9 04		sbc #$04			sbc 	#4
.2734	ac d9 0c	ldy $0cd9			ldy 	yInLine  					; get the original Y back
.2737	60		rts				rts
.2738					_FPpulYNext:
.2738	68		pla				pla
.2739	a8		tay				tay
.273a					_FPNext:
.273a	c8		iny				iny 								; next procedure record.
.273b	10 c0		bpl $26fd			bpl 	_FPLoop 					; if done 128 already ... e.g. Y -ve
.273d	98		tya				tya 								; subtract 128 from Y
.273e	38		sec				sec
.273f	e9 80		sbc #$80			sbc 	#128
.2741	a8		tay				tay
.2742	18		clc				clc 								; add 128 to temp2, so we can have more than
.2743	a5 2e		lda $2e				lda 	temp2 						; 255/3 = 85 procedures
.2745	69 80		adc #$80			adc 	#128
.2747	85 2e		sta $2e				sta 	temp2
.2749	90 b2		bcc $26fd			bcc 	_FPLoop
.274b	e6 2f		inc $2f				inc 	temp2+1
.274d	4c fd 26	jmp $26fd			jmp 	_FPLoop
.2750					_FPError:
.2750	a2 17		ldx #$17			ldx 	#ErrorID_NoProc
.2752	20 18 15	jsr $1518		jsr	errorHandler
.2755					ScanProc:
.2755	98		tya				tya
.2756	48		pha				pha
.2757	a5 35		lda $35				lda 	lowMemory 					; copy the start of the procList, at low memory
.2759	8d d7 0c	sta $0cd7			sta 	procList
.275c	a5 36		lda $36				lda 	lowMemory+1
.275e	8d d8 0c	sta $0cd8			sta 	procList+1
.2761	20 d1 2a	jsr $2ad1			jsr 	ResetCodeAddress 			; back to the start.
.2764					_ScanLoop:
.2764	a0 00		ldy #$00			ldy 	#0 							; check reached program end
.2766	b1 28		lda ($28),y			lda 	(codePtr),y
.2768	f0 2a		beq $2794			beq 	_ScanExit
.276a	a0 03		ldy #$03			ldy 	#3							; get first token
.276c	b1 28		lda ($28),y			lda 	(codePtr),y
.276e	c9 9d		cmp #$9d			cmp 	#TKW_DEFPROC				; skip to next if not DEFPROC
.2770	d0 12		bne $2784			bne 	_ScanNext
.2772	a5 29		lda $29				lda 	codePtr+1 					; write high and low address of this line.
.2774	20 9c 27	jsr $279c			jsr 	_ScanWrite
.2777	a5 28		lda $28				lda 	codePtr
.2779	20 9c 27	jsr $279c			jsr 	_ScanWrite
.277c	a0 04		ldy #$04			ldy 	#4 							; start of name part
.277e	20 a7 27	jsr $27a7			jsr 	CalculateProcedureHash 		; calculate procedure hash
.2781	20 9c 27	jsr $279c			jsr 	_ScanWrite					; and write that
.2784					_ScanNext:
.2784	18		clc				clc
.2785	a0 00		ldy #$00			ldy 	#0
.2787	b1 28		lda ($28),y			lda 	(codePtr),y
.2789	65 28		adc $28				adc 	codePtr
.278b	85 28		sta $28				sta 	codePtr
.278d	90 d5		bcc $2764			bcc 	_ScanLoop
.278f	e6 29		inc $29				inc 	codePtr+1
.2791	4c 64 27	jmp $2764			jmp 	_ScanLoop
.2794					_ScanExit:
.2794	a9 00		lda #$00			lda 	#0 							; write ending zero.
.2796	20 9c 27	jsr $279c			jsr 	_ScanWrite
.2799	68		pla				pla
.279a	a8		tay				tay
.279b	60		rts				rts
.279c					_ScanWrite:
.279c	a0 00		ldy #$00			ldy 	#0
.279e	91 35		sta ($35),y			sta 	(lowMemory),y
.27a0	e6 35		inc $35				inc 	lowMemory
.27a2	d0 02		bne $27a6			bne 	_SWNoCarry
.27a4	e6 36		inc $36				inc 	lowMemory+1
.27a6					_SWNoCarry:
.27a6	60		rts				rts
.27a7					CalculateProcedureHash:
.27a7	a9 00		lda #$00			lda 	#0 							; clear hash.
.27a9	85 2a		sta $2a				sta 	temp0
.27ab					_CPHLoop:
.27ab	18		clc				clc 								; add character and rotate and add carry back in
.27ac	b1 28		lda ($28),y			lda 	(codePtr),y
.27ae	65 2a		adc $2a				adc 	temp0
.27b0	6a		ror a				ror 	a
.27b1	69 0d		adc #$0d			adc 	#13 						; primes usually good for this sort of thing.
.27b3	85 2a		sta $2a				sta 	temp0 						; (down with this sort of thing)
.27b5	b1 28		lda ($28),y			lda 	(codePtr),y
.27b7	c8		iny				iny 								; advance incase we go round again.
.27b8	c9 3a		cmp #$3a			cmp 	#$3A
.27ba	90 ef		bcc $27ab			bcc 	_CPHLoop
.27bc	a5 2a		lda $2a				lda 	temp0
.27be	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/repeat.asm

.27bf					Command_Repeat:
.27bf	a2 04		ldx #$04			ldx 	#4 							; allocate 4 bytes on stack for REPEAT
.27c1	a9 52		lda #$52			lda 	#markerREPEAT 				; repeat marker allocate 4 bytes
.27c3	20 e3 36	jsr $36e3			jsr 	RSClaim
.27c6	a9 01		lda #$01			lda 	#1 							; save position at offset 1.
.27c8	20 0f 37	jsr $370f			jsr 	RSSavePosition
.27cb	60		rts				rts
.27cc					Command_Until:
.27cc	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.27ce	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.27d0	c9 52		cmp #$52			cmp 	#markerREPEAT 						; does it match
.27d2	f0 05		beq $27d9			beq 	_isok
.27d4	a2 0f		ldx #$0f			ldx 	#ErrorID_untilErr
.27d6	20 18 15	jsr $1518		jsr	errorHandler
.27d9					_isok:
.27d9	20 ae 2f	jsr $2fae			jsr 	EvaluateRootInteger 		; at the bottom.
.27dc	20 6f 36	jsr $366f			jsr 	MInt32Zero					; check if TOS zero
.27df	d0 06		bne $27e7			bne 	_CUExit
.27e1	a9 01		lda #$01			lda 	#1
.27e3	20 22 37	jsr $3722			jsr 	RSLoadPosition 				; reload the position from offset 1.
.27e6	60		rts				rts
.27e7					_CUExit:
.27e7	a9 04		lda #$04			lda 	#4 							; throw 4 bytes from stack.
.27e9	20 05 37	jsr $3705			jsr 	RSFree
.27ec	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/scanner.asm

.27ed					ScanForward:
.27ed	85 2c		sta $2c				sta 	temp1 						; save tokens to search in temp1/temp1+1
.27ef	86 2d		stx $2d				stx 	temp1+1
.27f1	a9 00		lda #$00			lda 	#0 							; temp2 counts structure levels.
.27f3	85 2e		sta $2e				sta 	temp2
.27f5	b1 28		lda ($28),y	_SFLoop:lda 	(codePtr),y 				; look at the next token.
.27f7	c8		iny				iny
.27f8	a6 2e		ldx $2e				ldx 	temp2 						; check structure levels are zero.
.27fa	d0 08		bne $2804			bne 	_SFNoCheck 					; if so, check token against entered values.
.27fc	c5 2c		cmp $2c				cmp 	temp1 						; if either matches, we've reached the token
.27fe	f0 24		beq $2824			beq 	_SFExit 					; at the same strcture depth.
.2800	c5 2d		cmp $2d				cmp 	temp1+1
.2802	f0 20		beq $2824			beq 	_SFExit
.2804					_SFNoCheck:
.2804	c9 80		cmp #$80			cmp 	#$80 						; if it is 00-7F (variable/number) just skip it.
.2806	90 ed		bcc $27f5			bcc 	_SFLoop
.2808	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; $80-$85 is various specials.
.280a	90 19		bcc $2825			bcc 	_SFSpecials
.280c	c9 99		cmp #$99			cmp 	#TOK_STRUCTST 				; if < structure start then continue
.280e	90 e5		bcc $27f5			bcc 	_SFLoop
.2810	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST 				; if >= unary start (after structure) then continue.
.2812	b0 e1		bcs $27f5			bcs 	_SFLoop
.2814	aa		tax				tax  								; token in X, and look up the adjuster.
.2815	bd cc 2e	lda $2ecc,x			lda 	ELBinaryOperatorInfo-TOK_BINARYST,x
.2818	38		sec				sec 								; convert to an offset ($FF,$01)
.2819	e9 81		sbc #$81			sbc 	#$81
.281b	18		clc				clc 								; add to depth
.281c	65 2e		adc $2e				adc 	temp2
.281e	85 2e		sta $2e				sta 	temp2
.2820	10 d3		bpl $27f5			bpl 	_SFLoop 					; +ve okay to continue
.2822	30 07		bmi $282b			bmi 	SFError 					; if gone -ve then we have a nesting error
.2824	60		rts		_SFExit:rts
.2825					_SFSpecials:
.2825	20 30 28	jsr $2830			jsr 	ScannerSkipSpecial
.2828	4c f5 27	jmp $27f5			jmp 	_SFLoop
.282b					SFError:
.282b	a2 14		ldx #$14			ldx 	#ErrorID_Struct
.282d	20 18 15	jsr $1518		jsr	errorHandler
.2830					ScannerSkipSpecial:
.2830	c9 80		cmp #$80			cmp 	#TOK_EOL 					; $80, advance to next line.
.2832	f0 10		beq $2844			beq 	_SFNextLine
.2834	c9 84		cmp #$84			cmp 	#TOK_FPC					; $84, skip embedded float
.2836	f0 2b		beq $2863			beq 	_SFFloatSkip
.2838	c9 85		cmp #$85			cmp 	#TOK_STR 					; $85, skip string
.283a	f0 02		beq $283e			beq 	_SFSkipString
.283c	c8		iny				iny									; $81,$82,$83 shift, so just advance over the shifted
.283d	60		rts				rts 								; token.
.283e					_SFSkipString:
.283e	98		tya				tya
.283f	38		sec				sec
.2840	71 28		adc ($28),y			adc 	(codePtr),y
.2842	a8		tay				tay
.2843	60		rts				rts
.2844					_SFNextLine:
.2844	a0 00		ldy #$00			ldy 	#0 							; get offset
.2846	b1 28		lda ($28),y			lda 	(codePtr),y
.2848	18		clc				clc 								; add to code pointer.
.2849	65 28		adc $28				adc 	codePtr
.284b	85 28		sta $28				sta 	codePtr
.284d	90 02		bcc $2851			bcc		_SFNLNoCarry
.284f	e6 29		inc $29				inc 	codePtr+1
.2851					_SFNLNoCarry:
.2851	b1 28		lda ($28),y			lda 	(codePtr),y 				; reached the end of the program.
.2853	d0 0b		bne $2860			bne		_SFXNL 						; no go round again
.2855	a5 2c		lda $2c				lda 	temp1
.2857	c9 d9		cmp #$d9			cmp 	#TKW_DATA 					; if searching for Data different error.
.2859	d0 d0		bne $282b			bne 	SFError 					; read uses this to search for data statements
.285b	a2 1d		ldx #$1d			ldx 	#ErrorID_DataError
.285d	20 18 15	jsr $1518		jsr	errorHandler
.2860	a0 03		ldy #$03	_SFXNL:	ldy 	#3
.2862	60		rts				rts
.2863					_SFFloatSkip:
.2863	98		tya				tya 								; skip over an embedded float.
.2864	18		clc				clc
.2865	69 05		adc #$05			adc 	#FloatEmbeddedSize
.2867	a8		tay				tay
.2868	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/while.asm

.2869					Command_While:
.2869	a9 57		lda #$57			lda 	#markerWhile 				; gosub marker allocate 4 bytes.
.286b	a2 04		ldx #$04			ldx 	#4
.286d	20 e3 36	jsr $36e3			jsr 	RSClaim 					; create on stack.
.2870	88		dey				dey
.2871	a9 01		lda #$01			lda 	#1
.2873	20 0f 37	jsr $370f			jsr 	RSSavePosition 				; save position before the WHILE keyword.
.2876	c8		iny				iny
.2877	20 ae 2f	jsr $2fae			jsr 	EvaluateRootInteger			; get the conditional
.287a	20 6f 36	jsr $366f			jsr 	MInt32Zero 	 				; if zero, skip forward to the fail code.
.287d	f0 01		beq $2880			beq 	_CWFail
.287f	60		rts				rts
.2880					_CWFail:
.2880	a9 04		lda #$04			lda 	#4
.2882	20 05 37	jsr $3705			jsr 	RSFree 						; close the just opened position.
.2885	a9 9f		lda #$9f			lda 	#TKW_WEND 					; scan forward past WEND.
.2887	aa		tax				tax
.2888	20 ed 27	jsr $27ed			jsr 	ScanForward
.288b	60		rts				rts
.288c					Command_Wend:
.288c	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.288e	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.2890	c9 57		cmp #$57			cmp 	#markerWHILE 						; does it match
.2892	f0 05		beq $2899			beq 	_isok
.2894	a2 11		ldx #$11			ldx 	#ErrorID_wendErr
.2896	20 18 15	jsr $1518		jsr	errorHandler
.2899					_isok:
.2899	a9 01		lda #$01			lda 	#1
.289b	20 22 37	jsr $3722			jsr 	RSLoadPosition				; go back until true
.289e	a9 04		lda #$04			lda 	#4
.28a0	20 05 37	jsr $3705			jsr 	RSFree 						; close the loop
.28a3	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/system/clear.asm

.28a4					CommandClear:
.28a4					XCommandClear:
.28a4	98		tya				tya
.28a5	48		pha				pha
.28a6	ad cc 0a	lda $0acc			lda 	endMemory					; set high memory = end of memory
.28a9	85 33		sta $33				sta 	highMemory
.28ab	ad cd 0a	lda $0acd			lda 	endMemory+1
.28ae	85 34		sta $34				sta 	highMemory+1
.28b0	ad c8 0a	lda $0ac8			lda 	basePage 					; work out where the program ends.
.28b3	85 2a		sta $2a				sta 	temp0
.28b5	ad c9 0a	lda $0ac9			lda 	basePage+1
.28b8	85 2b		sta $2b				sta 	temp0+1
.28ba					_CCFindEnd:
.28ba	a0 00		ldy #$00			ldy 	#0
.28bc	b1 2a		lda ($2a),y			lda 	(temp0),y
.28be	f0 0c		beq $28cc			beq 	_CCFoundEnd 				; offset zero is end.
.28c0	18		clc				clc
.28c1	65 2a		adc $2a				adc 	temp0 						; move to next line
.28c3	85 2a		sta $2a				sta 	temp0
.28c5	90 f3		bcc $28ba			bcc 	_CCFindEnd
.28c7	e6 2b		inc $2b				inc 	temp0+1
.28c9	4c ba 28	jmp $28ba			jmp 	_CCFindEnd
.28cc					_CCFoundEnd:
.28cc	a5 2a		lda $2a				lda 	temp0 						; put temp0 in lowMemory
.28ce	85 35		sta $35				sta 	lowMemory
.28d0	a5 2b		lda $2b				lda 	temp0+1
.28d2	85 36		sta $36				sta 	lowMemory+1
.28d4	18		clc				clc 								; put temp0+1 in endProgram
.28d5	a5 2a		lda $2a				lda 	temp0
.28d7	69 01		adc #$01			adc 	#1
.28d9	8d ca 0a	sta $0aca			sta 	endProgram
.28dc	a5 2b		lda $2b				lda 	temp0+1
.28de	69 00		adc #$00			adc 	#0
.28e0	8d cb 0a	sta $0acb			sta 	endProgram+1
.28e3	18		clc				clc 								; put a bit of space in.
.28e4	a5 35		lda $35				lda 	lowMemory
.28e6	69 04		adc #$04			adc 	#4
.28e8	85 35		sta $35				sta 	lowMemory
.28ea	90 02		bcc $28ee			bcc 	_CCNoCarry
.28ec	e6 36		inc $36				inc 	lowMemory+1
.28ee					_CCNoCarry:
.28ee	20 d5 36	jsr $36d5			jsr 	RSReset 					; reset the return stack.
.28f1	a2 06		ldx #$06		ldx	#6
.28f3	20 1f 46	jsr $461f		jsr	variableHandler
.28f6	20 55 27	jsr $2755			jsr 	ScanProc 					; scan for procedures
.28f9	20 da 20	jsr $20da			jsr 	CommandRestore 				; do a restore
.28fc	68		pla				pla
.28fd	a8		tay				tay
.28fe	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/system/list.asm

.0cda					structIndent:
>0cda							.fill 	1
.28ff					CommandList:
.28ff	a2 00		ldx #$00			ldx		#0 							; set start/end lines in stack 0/1 to 0 and $FFFF
.2901	8e da 0c	stx $0cda			stx 	structIndent
.2904	20 48 36	jsr $3648			jsr 	MInt32False
.2907	e8		inx				inx
.2908	20 44 36	jsr $3644			jsr 	MInt32True
.290b	b1 28		lda ($28),y			lda 	(codePtr),y 				; look at first token
.290d	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; list ,xxxx
.290f	f0 15		beq $2926			beq 	_CLEndLine
.2911	c9 00		cmp #$00			cmp 	#0 							; list ... on its own.
.2913	30 1b		bmi $2930			bmi 	_CLDoListing 				; do the whole lot.
.2915	a2 00		ldx #$00			ldx 	#0 							; get start line at stack:0
.2917	20 b0 2f	jsr $2fb0			jsr 	EvaluateInteger
.291a	b1 28		lda ($28),y			lda 	(codePtr),y 				; , follows ?
.291c	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.291e	f0 06		beq $2926			beq 	_CLEndLine
.2920	20 86 35	jsr $3586			jsr 	MInt32CopyUp 				; copy first to second if just a line number on its
.2923	4c 30 29	jmp $2930			jmp 	_CLDoListing 				; own e.g. list 1100
.2926					_CLEndLine:
.2926	c8		iny				iny 								; skip comma
.2927	b1 28		lda ($28),y			lda 	(codePtr),y  				; no number follows, then its list 1000,
.2929	30 05		bmi $2930			bmi 	_CLDoListing
.292b	a2 01		ldx #$01			ldx 	#1 							; get the last line to list
.292d	20 b0 2f	jsr $2fb0			jsr 	EvaluateInteger				; get end
.2930					_CLDoListing:
.2930	20 d1 2a	jsr $2ad1			jsr 	ResetCodeAddress 			; back to the start.
.2933					_CLCheckLoop:
.2933	a2 02		ldx #$02		ldx	#2
.2935	20 f6 14	jsr $14f6		jsr	deviceHandler
.2938	a0 00		ldy #$00			ldy 	#0							; check end.
.293a	b1 28		lda ($28),y			lda 	(codePtr),y
.293c	f0 41		beq $297f			beq 	_CLEnd
.293e	a2 00		ldx #$00			ldx 	#0 							; compare vs lower.
.2940	20 82 29	jsr $2982			jsr 	CLCompareLineTOS
.2943	c9 ff		cmp #$ff			cmp 	#255 						; if < skip
.2945	f0 28		beq $296f			beq 	_CLNext
.2947	e8		inx				inx
.2948	20 82 29	jsr $2982			jsr 	CLCompareLineTOS 			; compare vs higher
.294b	c9 01		cmp #$01			cmp 	#1
.294d	f0 20		beq $296f			beq 	_CLNext
.294f	a9 80		lda #$80			lda 	#$80 						; undo any down indents this line.
.2951	20 a4 29	jsr $29a4			jsr 	CLStructureCheck
.2954	ad da 0c	lda $0cda			lda 	structIndent 				; indent level.
.2957	10 02		bpl $295b			bpl 	_CLPositive
.2959	a9 00		lda #$00			lda 	#0
.295b					_CLPositive:
.295b	a2 04		ldx #$04		ldx	#4
.295d	20 4e 42	jsr $424e		jsr	tokeniserHandler
.2960	a9 82		lda #$82			lda 	#$82 						; up indents from this point on.
.2962	20 a4 29	jsr $29a4			jsr 	CLStructureCheck
.2965	ad da 0c	lda $0cda			lda 	structIndent
.2968	10 05		bpl $296f			bpl 	_CLNext
.296a	a9 00		lda #$00			lda 	#0
.296c	8d da 0c	sta $0cda			sta 	structIndent
.296f					_CLNext:
.296f	a0 00		ldy #$00			ldy 	#0 							; go to next line.
.2971	b1 28		lda ($28),y			lda 	(codePtr),y
.2973	18		clc				clc
.2974	65 28		adc $28				adc 	codePtr
.2976	85 28		sta $28				sta 	codePtr
.2978	90 b9		bcc $2933			bcc 	_CLCheckLoop
.297a	e6 29		inc $29				inc 	codePtr+1
.297c	4c 33 29	jmp $2933			jmp 	_CLCheckLoop
.297f					_CLEnd:
.297f	4c 31 37	jmp $3731			jmp 	WarmStart 					; warm start after list.
.2982					CLCompareLineTOS:
.2982	a0 01		ldy #$01			ldy 	#1
.2984	b1 28		lda ($28),y			lda 	(codePtr),y
.2986	55 50		eor $50,x			eor 	esInt0,x
.2988	85 2a		sta $2a				sta 	temp0
.298a	c8		iny				iny
.298b	b1 28		lda ($28),y			lda 	(codePtr),y
.298d	55 58		eor $58,x			eor 	esInt1,x
.298f	05 2a		ora $2a				ora 	temp0
.2991	f0 10		beq $29a3			beq 	_CLCLTExit
.2993	88		dey				dey
.2994	b1 28		lda ($28),y			lda 	(codePtr),y
.2996	d5 50		cmp $50,x			cmp 	esInt0,x
.2998	c8		iny				iny
.2999	b1 28		lda ($28),y			lda 	(codePtr),y
.299b	f5 58		sbc $58,x			sbc 	esInt1,x
.299d	a9 ff		lda #$ff			lda 	#255
.299f	90 02		bcc $29a3			bcc 	_CLCLTExit
.29a1	a9 01		lda #$01			lda 	#1
.29a3					_CLCLTExit:
.29a3	60		rts				rts
.29a4					CLStructureCheck:
.29a4	85 2a		sta $2a				sta 	temp0
.29a6	a0 03		ldy #$03			ldy 	#3
.29a8					_CLSCLoop:
.29a8	b1 28		lda ($28),y			lda 	(codePtr),y 				; get and consume token.
.29aa	c8		iny				iny
.29ab	c9 80		cmp #$80			cmp 	#$80
.29ad	90 f9		bcc $29a8			bcc 	_CLSCLoop 					; $00-$7F just step over.
.29af	f0 28		beq $29d9			beq		_CLSCExit					; EOL return
.29b1	c9 86		cmp #$86			cmp 	#$86 						; special handler
.29b3	90 1e		bcc $29d3			bcc 	_CLSCSpecial
.29b5	c9 99		cmp #$99			cmp 	#TOK_STRUCTST 				; check if structure changer.
.29b7	90 ef		bcc $29a8			bcc 	_CLSCLoop
.29b9	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST
.29bb	b0 eb		bcs $29a8			bcs 	_CLSCLoop
.29bd	aa		tax				tax 								; get adjustment
.29be	bd cc 2e	lda $2ecc,x			lda 	ELBinaryOperatorInfo-TOK_BINARYST,x
.29c1	c5 2a		cmp $2a				cmp 	temp0	 					; if what we're searching for
.29c3	d0 e3		bne $29a8			bne 	_CLSCLoop
.29c5	38		sec				sec
.29c6	e9 81		sbc #$81			sbc 	#$81 						; convert to offset
.29c8	0a		asl a				asl 	a 							; double indent step
.29c9	18		clc				clc
.29ca	6d da 0c	adc $0cda			adc 	structIndent 				; add to structure indent
.29cd	8d da 0c	sta $0cda			sta 	structIndent
.29d0	4c a8 29	jmp $29a8			jmp 	_CLSCLoop
.29d3					_CLSCSpecial:
.29d3	20 30 28	jsr $2830			jsr 	ScannerSkipSpecial
.29d6	4c a8 29	jmp $29a8			jmp 	_CLSCLoop
.29d9					_CLSCExit:
.29d9	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/system/loadsave.asm

.29da					CommandLoad:
.29da	20 02 2a	jsr $2a02			jsr 	CLSParameters 					; get parameters for load.
.29dd	08		php				php
.29de	a2 0e		ldx #$0e		ldx	#14
.29e0	20 f6 14	jsr $14f6		jsr	deviceHandler
.29e3	28		plp				plp
.29e4	b0 08		bcs $29ee			bcs 	_CLExit 						; if CC then load a program, so warm start.
.29e6	20 a4 28	jsr $28a4			jsr 	CommandClear
.29e9	a2 04		ldx #$04		ldx	#4
.29eb	20 9c 20	jsr $209c		jsr	interactionHandler
.29ee					_CLExit
.29ee	60		rts				rts
.29ef					CommandSave:
.29ef	20 02 2a	jsr $2a02			jsr 	CLSParameters					; get parameters for save
.29f2	90 08		bcc $29fc			bcc 	_CSNoOverrideAddress
.29f4	20 c8 36	jsr $36c8			jsr 	CheckComma 						; should be a comma.
.29f7	a2 02		ldx #$02			ldx 	#2
.29f9	20 b0 2f	jsr $2fb0			jsr 	EvaluateInteger 				; get save end address.
.29fc					_CSNoOverrideAddress:
.29fc	a2 18		ldx #$18		ldx	#24
.29fe	20 f6 14	jsr $14f6		jsr	deviceHandler
.2a01	60		rts				rts
.2a02					CLSParameters:
.2a02	a2 00		ldx #$00			ldx 	#0 								; string
.2a04	20 a5 2f	jsr $2fa5			jsr 	EvaluateString
.2a07	e8		inx				inx 									; erase out +1 +2
.2a08	20 48 36	jsr $3648			jsr 	MInt32False
.2a0b	e8		inx				inx
.2a0c	20 48 36	jsr $3648			jsr 	MInt32False
.2a0f	ad c8 0a	lda $0ac8			lda 	basePage 						; default start address.
.2a12	85 51		sta $51				sta 	esInt0+1
.2a14	ad c9 0a	lda $0ac9			lda 	basePage+1
.2a17	85 59		sta $59				sta 	esInt1+1
.2a19	ad ca 0a	lda $0aca			lda 	endProgram 						; default end address
.2a1c	85 52		sta $52				sta 	esInt0+2
.2a1e	ad cb 0a	lda $0acb			lda 	endProgram+1
.2a21	85 5a		sta $5a				sta 	esInt1+2
.2a23	b1 28		lda ($28),y			lda 	(codePtr),y 					; , following
.2a25	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.2a27	d0 08		bne $2a31			bne 	_CLSDefault
.2a29	c8		iny				iny 									; skip comma
.2a2a	a2 01		ldx #$01			ldx 	#1 								; get numeric value.
.2a2c	20 b0 2f	jsr $2fb0			jsr 	EvaluateInteger
.2a2f	38		sec				sec
.2a30	60		rts				rts
.2a31					_CLSDefault:
.2a31	18		clc				clc
.2a32	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/system/new.asm

.2a33					Command_New:
.2a33					Command_XNew:
.2a33	20 d1 2a	jsr $2ad1			jsr 	ResetCodeAddress 			; point to first line
.2a36	a0 00		ldy #$00			ldy 	#0 							; and zap it.
.2a38	98		tya				tya
.2a39	91 28		sta ($28),y			sta 	(codePtr),y
.2a3b	20 a4 28	jsr $28a4			jsr 	CommandClear 				; clear everything down.
.2a3e	4c fa 23	jmp $23fa			jmp 	CommandEND 					; do END code, as there's nothing to run.

;******  Return to file: main/main.asm


;******  Processing file: main/commands/system/run.asm

.0cdb					breakCounter:
>0cdb								.fill 	1
.0cdc					breakIncrement:
>0cdc								.fill 	1
.2a41					Command_Run:
.2a41					XCommand_Run:
.2a41	a2 ff		ldx #$ff			ldx 	#$FF 						; reset the stack.
.2a43	9a		txs				txs
.2a44	20 cb 2a	jsr $2acb			jsr 	BreakOn 					; turn break on
.2a47	20 a4 28	jsr $28a4			jsr 	CommandClear 				; clear everything.
.2a4a	20 d1 2a	jsr $2ad1			jsr 	ResetCodeAddress 			; back to the start.
.2a4d					Command_RunFrom:
.2a4d	a0 03		ldy #$03			ldy 	#3 							; over offset/line #
.2a4f					CRNextInstruction:
.2a4f	64 3a		stz $3a				stz 	softMemAlloc+1
.2a51	ad db 0c	lda $0cdb			lda 	breakCounter 				; check for break.
.2a54	6d dc 0c	adc $0cdc			adc 	breakIncrement
.2a57	8d db 0c	sta $0cdb			sta 	breakCounter
.2a5a	90 05		bcc $2a61			bcc 	_CRNoChecks
.2a5c	a2 02		ldx #$02		ldx	#2
.2a5e	20 f6 14	jsr $14f6		jsr	deviceHandler
.2a61					_CRNoChecks
.2a61	b1 28		lda ($28),y			lda 	(codePtr),y 				; get next token.
.2a63	10 1c		bpl $2a81			bpl 	_CRNotToken
.2a65	c9 c9		cmp #$c9			cmp 	#TOK_TOKENS 				; if in the tokens then do that token.
.2a67	b0 0c		bcs $2a75			bcs 	_CRExecute
.2a69	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST 				; unary is ignored.
.2a6b	b0 71		bcs $2ade			bcs 	Unimplemented
.2a6d	c9 99		cmp #$99			cmp 	#TOK_STRUCTST 				; execute structures.
.2a6f	b0 04		bcs $2a75			bcs 	_CRExecute
.2a71	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; if one of the system tokens $80-$85 do that
.2a73	b0 16		bcs $2a8b			bcs 	_CRCheckIndirect 			; if in that unused range check for ! or ? or AND
.2a75					_CRExecute:
.2a75	c8		iny				iny 								; consume it.
.2a76	0a		asl a				asl 	a 							; double it, losing most significant bit.
.2a77	aa		tax				tax
.2a78	20 7e 2a	jsr $2a7e			jsr 	_CRRunRoutine 				; we want to do jsr (group0vectors,x)
.2a7b	4c 4f 2a	jmp $2a4f			jmp 	CRNextInstruction
.2a7e					_CRRunRoutine:
.2a7e	7c e8 2a	jmp ($2ae8,x)			jmp 	(Group0Vectors,x)
.2a81					_CRNotToken:
.2a81	c9 40		cmp #$40			cmp 	#$40 						; if 0-3F then it is a letter
.2a83	b0 59		bcs $2ade			bcs 	Unimplemented
.2a85					_CRDefaultLet:
.2a85	20 2d 23	jsr $232d			jsr 	CommandLet 					; do the default, LET
.2a88	4c 4f 2a	jmp $2a4f			jmp 	CRNextInstruction
.2a8b					_CRCheckIndirect:
.2a8b	c9 86		cmp #$86			cmp 	#TKW_AND 					; AND (assembler)
.2a8d	f0 0a		beq $2a99			beq 	_CRAndCommand
.2a8f	c9 97		cmp #$97			cmp 	#TKW_PLING 					; !<term> =
.2a91	f0 f2		beq $2a85			beq 	_CRDefaultLet
.2a93	c9 98		cmp #$98			cmp 	#TKW_QMARK 					; ?<term> =
.2a95	f0 ee		beq $2a85			beq 	_CRDefaultLet
.2a97	d0 45		bne $2ade			bne 	Unimplemented
.2a99					_CRAndCommand:
.2a99	c8		iny				iny 								; skip over the AND token
.2a9a	a9 95		lda #$95			lda 	#TKW_LPARENANDRPAREN 		; replace it with the pseudo-and
.2a9c	20 b6 2a	jsr $2ab6			jsr 	CommandAssembler 			; do the assembler command
.2a9f	4c 4f 2a	jmp $2a4f			jmp 	CRNextInstruction 			; and loop round.
.2aa2					CommandShift1:
.2aa2	b1 28		lda ($28),y			lda 	(codePtr),y 				; get shifted value
.2aa4	10 38		bpl $2ade			bpl 	Unimplemented 				; we have an error as this should not happen.
.2aa6	c8		iny				iny 								; advance over it.
.2aa7	c9 94		cmp #$94			cmp 	#TKA_GROUP1 				; is it an assembler constant ?
.2aa9	b0 0b		bcs $2ab6			bcs 	CommandAssembler
.2aab	0a		asl a				asl 	a 							; double into X
.2aac	aa		tax				tax
.2aad	7c ac 2b	jmp ($2bac,x)			jmp 	(Group1Vectors-12,x) 		; and do the code.
.2ab0					CommandShift2:
.2ab0	a9 ff		lda #$ff			lda 	#$FF 						; $FF means command not unary function.
.2ab2	20 69 18	jsr $1869		jsr	extensionHandler
.2ab5	60		rts				rts
.2ab6					CommandAssembler:
.2ab6	a2 02		ldx #$02		ldx	#2
.2ab8	20 b4 13	jsr $13b4		jsr	assemblerHandler
.2abb	60		rts				rts
.2abc					CommandAssemblerLabel:
.2abc	a2 04		ldx #$04		ldx	#4
.2abe	20 b4 13	jsr $13b4		jsr	assemblerHandler
.2ac1	60		rts				rts
.2ac2					CommandColon:
.2ac2	60		rts				rts
.2ac3					CommandBreak:
.2ac3	20 ae 2f	jsr $2fae			jsr 	EvaluateRootInteger
.2ac6	20 6f 36	jsr $366f			jsr 	MInt32Zero
.2ac9	f0 02		beq $2acd			beq 	BreakOff
.2acb					BreakOn:
.2acb	a2 08		ldx #$08			ldx 	#8
.2acd					BreakOff:
.2acd	8e dc 0c	stx $0cdc			stx 	breakIncrement
.2ad0	60		rts				rts
.2ad1					ResetCodeAddress:
.2ad1	ad c8 0a	lda $0ac8			lda 	basePage 					; copy basePage to code Pointer
.2ad4	85 28		sta $28				sta 	codePtr
.2ad6	ad c9 0a	lda $0ac9			lda 	basePage+1
.2ad9	85 29		sta $29				sta 	codePtr+1
.2adb	a0 03		ldy #$03			ldy 	#3 							; offset after offset link and line#
.2add	60		rts				rts
.2ade					Unimplemented:
.2ade	a2 01		ldx #$01			ldx 	#ErrorID_Missing
.2ae0	20 18 15	jsr $1518		jsr	errorHandler
.2ae3					TKErr01:
.2ae3					TKErr02:
.2ae3					TKErr03:
.2ae3					TKErr04:
.2ae3					TKErr05:
.2ae3					TKErr06:
.2ae3					TKErr07:
.2ae3					TKErr08:
.2ae3					TKErr09:
.2ae3					TKErr10:
.2ae3					TKErr11:
.2ae3					TKErr12:
.2ae3					TKErr13:
.2ae3					TKErr14:
.2ae3	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.2ae5	20 18 15	jsr $1518		jsr	errorHandler

;******  Processing file: main/commands/system/../../../generated/tokenvectors0.inc

.2ae8					Group0Vectors:
>2ae8	00 24					.word	AdvanceNextLine          ; $80 [[eol]]
>2aea	a2 2a					.word	CommandShift1            ; $81 [[sh1]]
>2aec	b0 2a					.word	CommandShift2            ; $82 [[sh2]]
>2aee	e3 2a					.word	TKErr09                  ; $83 [[sh3]]
>2af0	e3 2a					.word	TKErr10                  ; $84 [[fpc]]
>2af2	e3 2a					.word	TKErr08                  ; $85 [[str]]
>2af4	95 2c					.word	AndHandler               ; $86 and
>2af6	82 2c					.word	OrHandler                ; $87 or
>2af8	6f 2c					.word	XorHandler               ; $88 xor
>2afa	b7 2d					.word	CompareGreaterEq         ; $89 >=
>2afc	c1 2d					.word	CompareLessEq            ; $8a <=
>2afe	a3 2d					.word	CompareGreater           ; $8b >
>2b00	99 2d					.word	CompareLess              ; $8c <
>2b02	8f 2d					.word	CompareEquals            ; $8d =
>2b04	ad 2d					.word	CompareNotEquals         ; $8e <>
>2b06	00 2c					.word	AddHandler               ; $8f +
>2b08	23 2c					.word	SubHandler               ; $90 -
>2b0a	bb 2c					.word	ShrHandler               ; $91 >>
>2b0c	a8 2c					.word	ShlHandler               ; $92 <<
>2b0e	36 2c					.word	MulHandler               ; $93 *
>2b10	49 2c					.word	DivHandler               ; $94 /
>2b12	5c 2c					.word	ModHandler               ; $95 mod
>2b14	f4 2c					.word	PowerHandler             ; $96 ^
>2b16	ce 2c					.word	WordRefHandler           ; $97 !
>2b18	e1 2c					.word	ByteRefHandler           ; $98 ?
>2b1a	bf 27					.word	Command_Repeat           ; $99 repeat
>2b1c	69 28					.word	Command_While            ; $9a while
>2b1e	14 24					.word	Command_FOR              ; $9b for
>2b20	23 25					.word	CommandIf                ; $9c if
>2b22	e3 2a					.word	TKErr04                  ; $9d defproc
>2b24	cc 27					.word	Command_Until            ; $9e until
>2b26	8c 28					.word	Command_Wend             ; $9f wend
>2b28	75 24					.word	Command_NEXT             ; $a0 next
>2b2a	e3 2a					.word	TKErr06                  ; $a1 then
>2b2c	5e 25					.word	Command_ENDIF            ; $a2 endif
>2b2e	ce 26					.word	ReturnProc               ; $a3 endproc
>2b30	1b 2f					.word	UnaryParenthesis         ; $a4 (
>2b32	fd 30					.word	UnaryLen                 ; $a5 len(
>2b34	41 31					.word	UnarySgn                 ; $a6 sgn(
>2b36	2a 31					.word	UnaryAbs                 ; $a7 abs(
>2b38	9a 31					.word	Unary_Random             ; $a8 random(
>2b3a	e4 31					.word	Unary_Page               ; $a9 page
>2b3c	44 36					.word	MInt32True               ; $aa true
>2b3e	48 36					.word	MInt32False              ; $ab false
>2b40	af 31					.word	Unary_Min                ; $ac min(
>2b42	b3 31					.word	Unary_Max                ; $ad max(
>2b44	bc 32					.word	UnarySys                 ; $ae sys(
>2b46	65 32					.word	UnaryTimer               ; $af timer(
>2b48	7a 30					.word	EventFunction            ; $b0 event(
>2b4a	8e 32					.word	UnaryGet                 ; $b1 get(
>2b4c	7e 32					.word	UnaryInkey               ; $b2 inkey(
>2b4e	35 32					.word	UnaryAlloc               ; $b3 alloc(
>2b50	f5 32					.word	ExecChr                  ; $b4 chr$(
>2b52	25 33					.word	ExecLeft                 ; $b5 left$(
>2b54	42 33					.word	ExecMid                  ; $b6 mid$(
>2b56	6a 33					.word	ExecRight                ; $b7 right$(
>2b58	fc 2f					.word	Event_Str                ; $b8 str$(
>2b5a	2b 30					.word	UnaryVal                 ; $b9 val(
>2b5c	58 31					.word	UnaryPeek                ; $ba peek(
>2b5e	5e 31					.word	UnaryDeek                ; $bb deek(
>2b60	64 31					.word	UnaryLeek                ; $bc leek(
>2b62	1b 31					.word	UnaryAsc                 ; $bd asc(
>2b64	0f 32					.word	UnaryIntToFloat          ; $be int(
>2b66	22 32					.word	UnaryFloatToInt          ; $bf float(
>2b68	2e 30					.word	UnaryIsVal               ; $c0 isval(
>2b6a	0c 33					.word	ExecUpper                ; $c1 upper$(
>2b6c	09 33					.word	ExecLower                ; $c2 lower$(
>2b6e	f2 31					.word	UnaryReference           ; $c3 @
>2b70	08 32					.word	UnaryComplement          ; $c4 ~
>2b72	05 32					.word	UnaryHexMarker           ; $c5 &
>2b74	a7 32					.word	UnaryGetString           ; $c6 get$(
>2b76	ad 32					.word	UnaryInkeyString         ; $c7 inkey$(
>2b78	e4 32					.word	UnaryMem                 ; $c8 mem
>2b7a	e3 2a					.word	TKErr01                  ; $c9 )
>2b7c	c2 2a					.word	CommandColon             ; $ca :
>2b7e	e3 2a					.word	TKErr02                  ; $cb ,
>2b80	e3 2a					.word	TKErr03                  ; $cc ;
>2b82	e8 23					.word	Command_Rem2             ; $cd '
>2b84	e3 2a					.word	TKErr07                  ; $ce to
>2b86	e3 2a					.word	TKErr05                  ; $cf step
>2b88	61 26					.word	CallProc                 ; $d0 proc
>2b8a	5f 25					.word	CommandLocal             ; $d1 local
>2b8c	1f 23					.word	Command_Dim              ; $d2 dim
>2b8e	e8 23					.word	Command_Rem              ; $d3 rem
>2b90	2d 23					.word	CommandLet               ; $d4 let
>2b92	69 21					.word	Command_Input            ; $d5 input
>2b94	58 25					.word	Command_ELSE             ; $d6 else
>2b96	f0 22					.word	Command_VDU              ; $d7 vdu
>2b98	1f 22					.word	Command_Print            ; $d8 print
>2b9a	d1 20					.word	CommandData              ; $d9 data
>2b9c	e3 2a					.word	TKErr13                  ; $da image
>2b9e	e3 2a					.word	TKErr12                  ; $db at
>2ba0	e3 2a					.word	TKErr14                  ; $dc flip
>2ba2	11 23					.word	Command_Assert           ; $dd assert
>2ba4	ab 23					.word	Command_Poke             ; $de poke
>2ba6	af 23					.word	Command_Doke             ; $df doke
>2ba8	b3 23					.word	Command_Loke             ; $e0 loke
>2baa	c0 22					.word	Command_Ink              ; $e1 ink
>2bac	cb 22					.word	Command_Paper            ; $e2 paper
>2bae	ba 22					.word	Command_CLS              ; $e3 cls
>2bb0	d6 22					.word	Command_Locate           ; $e4 locate
>2bb2	bc 2a					.word	CommandAssemblerLabel    ; $e5 .
>2bb4	e3 2a					.word	TKErr11                  ; $e6 #
>2bb6	a4 28					.word	CommandClear             ; $e7 clear

;******  Return to file: main/commands/system/run.asm


;******  Processing file: main/commands/system/../../../generated/tokenvectors1.inc

.2bb8					Group1Vectors:
>2bb8	da 29					.word	CommandLoad              ; $86 load
>2bba	ef 29					.word	CommandSave              ; $87 save
>2bbc	ff 28					.word	CommandList              ; $88 list
>2bbe	33 2a					.word	Command_New              ; $89 new
>2bc0	c3 2a					.word	CommandBreak             ; $8a break
>2bc2	41 2a					.word	Command_Run              ; $8b run
>2bc4	a6 20					.word	CommandRead              ; $8c read
>2bc6	da 20					.word	CommandRestore           ; $8d restore
>2bc8	fa 23					.word	CommandEnd               ; $8e end
>2bca	f5 23					.word	CommandStop              ; $8f stop
>2bcc	fd 23					.word	CommandXemu              ; $90 xemu
>2bce	37 21					.word	CommandGOTO              ; $91 goto
>2bd0	0c 21					.word	CommandGOSUB             ; $92 gosub
>2bd2	1f 21					.word	CommandRETURN            ; $93 return

;******  Return to file: main/commands/system/run.asm


;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/binary/binary.asm

.2bd4					BinaryProcess:
.2bd4	b5 48		lda $48,x			lda 	esType,x 					; or type bytes together and check bit 6.
.2bd6	15 49		ora $49,x			ora 	esType+1,x 					; (the float bit)
.2bd8	0a		asl a				asl 	a
.2bd9	30 0e		bmi $2be9			bmi 	_BPStringType 				; if bit 6 is set, then string type, error
.2bdb	18		clc				clc 								; return CC for integer
.2bdc	29 02		and #$02			and 	#$02 						; $02 because of ASL A. check original bit 1.
.2bde	f0 08		beq $2be8			beq 	_BPExit 					; if both integer then return with CC.
.2be0	20 ee 2b	jsr $2bee			jsr 	BPMakeBothFloat 			; make both float
.2be3	a9 01		lda #$01			lda 	#$01 						; set result type to float
.2be5	95 48		sta $48,x			sta 	esType,x
.2be7	38		sec				sec 								; and return with carry set.
.2be8					_BPExit:
.2be8	60		rts				rts
.2be9					_BPStringType:
.2be9	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.2beb	20 18 15	jsr $1518		jsr	errorHandler
.2bee					BPMakeBothFloat:
.2bee	e8		inx				inx
.2bef	20 f3 2b	jsr $2bf3			jsr 	BPMakeFloat 				; one is a float, so we do both as floats.
.2bf2	ca		dex				dex
.2bf3					BPMakeFloat:
.2bf3	b5 48		lda $48,x			lda 	esType,x 					; get type bit which is in bit 0
.2bf5	4a		lsr a				lsr 	a
.2bf6	b0 07		bcs $2bff			bcs 	_BPIsFloat 					; already a float if set.
.2bf8	8a		txa				txa
.2bf9	a2 1c		ldx #$1c		ldx	#28
.2bfb	20 b0 1e	jsr $1eb0		jsr	floatingpointHandler
.2bfe	aa		tax				tax
.2bff					_BPIsFloat:
.2bff	60		rts				rts
.2c00					AddHandler:
.2c00	20 d1 2d	jsr $2dd1			jsr 	DereferenceTwo 				; dereference top two on stack.
.2c03	b5 48		lda $48,x			lda 	esType,x 					; check two strings.
.2c05	35 49		and $49,x			and 	esType+1,x
.2c07	29 40		and #$40			and 	#$40 						; if both have bit 6 set ... we have two strings
.2c09	d0 10		bne $2c1b			bne 	_AHStringConcat				; concatenate strings.
.2c0b	20 d4 2b	jsr $2bd4			jsr 	BinaryProcess 				; check to see if either is float
.2c0e	b0 03		bcs $2c13			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.2c10	4c 2c 35	jmp $352c			jmp 	MInt32Add 							; else do it as integer.
.2c13					_IsFPOperation:
.2c13	8a		txa				txa 								; call the relevant fp routine
.2c14	a2 04		ldx #$04		ldx	#4
.2c16	20 b0 1e	jsr $1eb0		jsr	floatingpointHandler
.2c19	aa		tax				tax
.2c1a	60		rts				rts
.2c1b					_AHStringConcat:
.2c1b	8a		txa				txa 								; handled by the string module.
.2c1c	a2 06		ldx #$06		ldx	#6
.2c1e	20 f3 39	jsr $39f3		jsr	stringHandler
.2c21	aa		tax				tax
.2c22	60		rts				rts
.2c23					SubHandler:
.2c23	20 d1 2d	jsr $2dd1			jsr 	DereferenceTwo
.2c26	20 d4 2b	jsr $2bd4			jsr 	BinaryProcess 				; check to see if either is float
.2c29	b0 03		bcs $2c2e			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.2c2b	4c 46 35	jmp $3546			jmp 	MInt32Sub 							; else do it as integer.
.2c2e					_IsFPOperation:
.2c2e	8a		txa				txa 								; call the relevant fp routine
.2c2f	a2 12		ldx #$12		ldx	#18
.2c31	20 b0 1e	jsr $1eb0		jsr	floatingpointHandler
.2c34	aa		tax				tax
.2c35	60		rts				rts
.2c36					MulHandler:
.2c36	20 d1 2d	jsr $2dd1			jsr 	DereferenceTwo
.2c39	20 d4 2b	jsr $2bd4			jsr 	BinaryProcess 				; check to see if either is float
.2c3c	b0 03		bcs $2c41			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.2c3e	4c 60 35	jmp $3560			jmp 	MInt32Multiply 							; else do it as integer.
.2c41					_IsFPOperation:
.2c41	8a		txa				txa 								; call the relevant fp routine
.2c42	a2 0c		ldx #$0c		ldx	#12
.2c44	20 b0 1e	jsr $1eb0		jsr	floatingpointHandler
.2c47	aa		tax				tax
.2c48	60		rts				rts
.2c49					DivHandler:
.2c49	20 d1 2d	jsr $2dd1			jsr 	DereferenceTwo
.2c4c	20 d4 2b	jsr $2bd4			jsr 	BinaryProcess 				; check to see if either is float
.2c4f	b0 03		bcs $2c54			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.2c51	4c 1d 34	jmp $341d			jmp 	MInt32SDivide 							; else do it as integer.
.2c54					_IsFPOperation:
.2c54	8a		txa				txa 								; call the relevant fp routine
.2c55	a2 08		ldx #$08		ldx	#8
.2c57	20 b0 1e	jsr $1eb0		jsr	floatingpointHandler
.2c5a	aa		tax				tax
.2c5b	60		rts				rts
.2c5c					ModHandler:
.2c5c	20 d1 2d	jsr $2dd1			jsr 	DereferenceTwo
.2c5f	20 d4 2b	jsr $2bd4			jsr 	BinaryProcess 				; check to see if either is float
.2c62	b0 03		bcs $2c67			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.2c64	4c 9b 34	jmp $349b			jmp 	MInt32Modulus 							; else do it as integer.
.2c67					_IsFPOperation:
.2c67	8a		txa				txa 								; call the relevant fp routine
.2c68	a2 0a		ldx #$0a		ldx	#10
.2c6a	20 b0 1e	jsr $1eb0		jsr	floatingpointHandler
.2c6d	aa		tax				tax
.2c6e	60		rts				rts
.2c6f					XorHandler:
.2c6f	20 d1 2d	jsr $2dd1			jsr 	DereferenceTwo
.2c72	20 d4 2b	jsr $2bd4			jsr 	BinaryProcess 				; check to see if either is float
.2c75	b0 03		bcs $2c7a			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.2c77	4c cf 33	jmp $33cf			jmp 	MInt32Xor 							; else do it as integer.
.2c7a					_IsFPOperation:
.2c7a	8a		txa				txa 								; call the relevant fp routine
.2c7b	a2 0a		ldx #$0a		ldx	#10
.2c7d	20 b0 1e	jsr $1eb0		jsr	floatingpointHandler
.2c80	aa		tax				tax
.2c81	60		rts				rts
.2c82					OrHandler:
.2c82	20 d1 2d	jsr $2dd1			jsr 	DereferenceTwo
.2c85	20 d4 2b	jsr $2bd4			jsr 	BinaryProcess 				; check to see if either is float
.2c88	b0 03		bcs $2c8d			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.2c8a	4c b6 33	jmp $33b6			jmp 	MInt32Or 							; else do it as integer.
.2c8d					_IsFPOperation:
.2c8d	8a		txa				txa 								; call the relevant fp routine
.2c8e	a2 0a		ldx #$0a		ldx	#10
.2c90	20 b0 1e	jsr $1eb0		jsr	floatingpointHandler
.2c93	aa		tax				tax
.2c94	60		rts				rts
.2c95					AndHandler:
.2c95	20 d1 2d	jsr $2dd1			jsr 	DereferenceTwo
.2c98	20 d4 2b	jsr $2bd4			jsr 	BinaryProcess 				; check to see if either is float
.2c9b	b0 03		bcs $2ca0			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.2c9d	4c 9d 33	jmp $339d			jmp 	MInt32And 							; else do it as integer.
.2ca0					_IsFPOperation:
.2ca0	8a		txa				txa 								; call the relevant fp routine
.2ca1	a2 0a		ldx #$0a		ldx	#10
.2ca3	20 b0 1e	jsr $1eb0		jsr	floatingpointHandler
.2ca6	aa		tax				tax
.2ca7	60		rts				rts
.2ca8					ShlHandler:
.2ca8	20 d1 2d	jsr $2dd1			jsr 	DereferenceTwo
.2cab	20 d4 2b	jsr $2bd4			jsr 	BinaryProcess 				; check to see if either is float
.2cae	b0 03		bcs $2cb3			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.2cb0	4c 29 2d	jmp $2d29			jmp 	Mint32ShiftLeftX 							; else do it as integer.
.2cb3					_IsFPOperation:
.2cb3	8a		txa				txa 								; call the relevant fp routine
.2cb4	a2 0a		ldx #$0a		ldx	#10
.2cb6	20 b0 1e	jsr $1eb0		jsr	floatingpointHandler
.2cb9	aa		tax				tax
.2cba	60		rts				rts
.2cbb					ShrHandler:
.2cbb	20 d1 2d	jsr $2dd1			jsr 	DereferenceTwo
.2cbe	20 d4 2b	jsr $2bd4			jsr 	BinaryProcess 				; check to see if either is float
.2cc1	b0 03		bcs $2cc6			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.2cc3	4c 2c 2d	jmp $2d2c			jmp 	MInt32ShiftRightX 							; else do it as integer.
.2cc6					_IsFPOperation:
.2cc6	8a		txa				txa 								; call the relevant fp routine
.2cc7	a2 0a		ldx #$0a		ldx	#10
.2cc9	20 b0 1e	jsr $1eb0		jsr	floatingpointHandler
.2ccc	aa		tax				tax
.2ccd	60		rts				rts
.2cce					WordRefHandler:
.2cce	20 d1 2d	jsr $2dd1			jsr 	DereferenceTwo
.2cd1	20 d4 2b	jsr $2bd4			jsr 	BinaryProcess 				; check to see if either is float
.2cd4	b0 03		bcs $2cd9			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.2cd6	4c 1b 2d	jmp $2d1b			jmp 	MInt32WordIndirect 							; else do it as integer.
.2cd9					_IsFPOperation:
.2cd9	8a		txa				txa 								; call the relevant fp routine
.2cda	a2 0a		ldx #$0a		ldx	#10
.2cdc	20 b0 1e	jsr $1eb0		jsr	floatingpointHandler
.2cdf	aa		tax				tax
.2ce0	60		rts				rts
.2ce1					ByteRefHandler:
.2ce1	20 d1 2d	jsr $2dd1			jsr 	DereferenceTwo
.2ce4	20 d4 2b	jsr $2bd4			jsr 	BinaryProcess 				; check to see if either is float
.2ce7	b0 03		bcs $2cec			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.2ce9	4c 1f 2d	jmp $2d1f			jmp 	MInt32ByteIndirect 							; else do it as integer.
.2cec					_IsFPOperation:
.2cec	8a		txa				txa 								; call the relevant fp routine
.2ced	a2 0a		ldx #$0a		ldx	#10
.2cef	20 b0 1e	jsr $1eb0		jsr	floatingpointHandler
.2cf2	aa		tax				tax
.2cf3	60		rts				rts
.2cf4					PowerHandler:
.2cf4	20 d1 2d	jsr $2dd1			jsr 	DereferenceTwo
.2cf7	20 d4 2b	jsr $2bd4			jsr 	BinaryProcess 				; check to see if either is float
.2cfa	b0 03		bcs $2cff			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.2cfc	4c 07 2d	jmp $2d07			jmp 	PowerInteger 							; else do it as integer.
.2cff					_IsFPOperation:
.2cff	8a		txa				txa 								; call the relevant fp routine
.2d00	a2 18		ldx #$18		ldx	#24
.2d02	20 b0 1e	jsr $1eb0		jsr	floatingpointHandler
.2d05	aa		tax				tax
.2d06	60		rts				rts
.2d07					PowerInteger:
.2d07	20 ee 2b	jsr $2bee			jsr 	BPMakeBothFloat				; make them float.
.2d0a	8a		txa				txa
.2d0b	a2 18		ldx #$18		ldx	#24
.2d0d	20 b0 1e	jsr $1eb0		jsr	floatingpointHandler
.2d10	a2 14		ldx #$14		ldx	#20
.2d12	20 b0 1e	jsr $1eb0		jsr	floatingpointHandler
.2d15	aa		tax				tax
.2d16	a9 00		lda #$00			lda 	#0 							; make type integer
.2d18	95 48		sta $48,x			sta 	esType,x
.2d1a	60		rts				rts
.2d1b					Mint32WordIndirect:
.2d1b	a9 80		lda #$80	 		lda 	#$80 				 		; word reference type (bit 7 set)
.2d1d	d0 02		bne $2d21			bne 	Min32Indirect
.2d1f					Mint32ByteIndirect:
.2d1f	a9 a0		lda #$a0			lda 	#$A0 						; byte reference type (bit 7, bit 5 set)
.2d21					Min32Indirect:
.2d21	48		pha				pha 								; save the indirection
.2d22	20 2c 35	jsr $352c			jsr 	MInt32Add 					; add a!b a?b
.2d25	68		pla				pla 								; and set the type to reference.
.2d26	95 48		sta $48,x			sta 	esType,x 	 				; so a!b => a+b and it's a reference....
.2d28	60		rts				rts
.2d29					Mint32ShiftLeftX:
.2d29	18		clc				clc 								; CC shift left
.2d2a	90 01		bcc $2d2d			bcc 	Mint32Shift
.2d2c					Mint32ShiftRightX:
.2d2c	38		sec				sec 								; CS shift right
.2d2d					Mint32Shift:
.2d2d	08		php				php 								; save carry flag on stack.
.2d2e	b5 59		lda $59,x			lda 	esInt1+1,x 					; if shift >= 32 then it is zero.
.2d30	15 61		ora $61,x			ora 	esInt2+1,x
.2d32	15 69		ora $69,x			ora 	esInt3+1,x
.2d34	d0 1e		bne $2d54			bne 	_MShiftZero
.2d36	b5 51		lda $51,x			lda 	esInt0+1,x
.2d38	c9 20		cmp #$20			cmp 	#32
.2d3a	b0 18		bcs $2d54			bcs 	_MShiftZero
.2d3c					_MShiftLoop:
.2d3c	b5 51		lda $51,x			lda 	esInt0+1,x 					; check count is zero
.2d3e	f0 12		beq $2d52			beq 	_MShiftExit
.2d40	d6 51		dec $51,x			dec 	esInt0+1,x
.2d42	28		plp				plp 								; restore and save carry
.2d43	08		php				php
.2d44	90 06		bcc $2d4c			bcc 	_MShiftLeft 				; and shift left/right accordingly.
.2d46	20 66 36	jsr $3666			jsr 	Mint32ShiftRight
.2d49	4c 3c 2d	jmp $2d3c			jmp 	_MShiftLoop
.2d4c					_MShiftLeft:
.2d4c	20 5d 36	jsr $365d			jsr 	Mint32ShiftLeft
.2d4f	4c 3c 2d	jmp $2d3c			jmp 	_MShiftLoop
.2d52					_MShiftExit:
.2d52	28		plp				plp	 								; throw saved carry and exit
.2d53	60		rts				rts
.2d54					_MShiftZero:
.2d54	4c 48 36	jmp $3648			jmp 	MInt32False 				; return 0 as shifted >= 32 times.

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/binary/compare.asm

.2d57					PerformComparison:
.2d57	20 d1 2d	jsr $2dd1			jsr 	DereferenceTwo 				; make both values.
.2d5a	b5 48		lda $48,x			lda 	esType,x 					; check for two strings.
.2d5c	35 49		and $49,x			and 	esType+1,x
.2d5e	0a		asl a				asl 	a 							; bit 7 set if both bit 6s were set.
.2d5f	30 1d		bmi $2d7e			bmi 	_PCIsString
.2d61	b5 48		lda $48,x			lda 	esType,x 					; check either is floating point.
.2d63	15 49		ora $49,x			ora 	esType+1,x
.2d65	0a		asl a				asl 	a 							; shift bit 6 (string) to bit 7, mixed types
.2d66	30 22		bmi $2d8a			bmi 	_PCError
.2d68	29 02		and #$02			and 	#$02 						; because of ASL, check type in bit 0
.2d6a	f0 0f		beq $2d7b			beq 	_PCIsInteger 				; if not two integers, e.g. 1 of the bits is set
.2d6c	20 ee 2b	jsr $2bee			jsr 	BPMakeBothFloat 			; make both float
.2d6f	8a		txa				txa
.2d70	a2 06		ldx #$06		ldx	#6
.2d72	20 b0 1e	jsr $1eb0		jsr	floatingpointHandler
.2d75	86 32		stx $32				stx 	tempShort 					; save result
.2d77	aa		tax				tax
.2d78	a5 32		lda $32				lda 	tempShort
.2d7a	60		rts				rts
.2d7b					_PCIsInteger:
.2d7b	4c e8 33	jmp $33e8			jmp 	MInt32Compare
.2d7e					_PCIsString:
.2d7e	8a		txa				txa 								; A has SP
.2d7f	a2 0a		ldx #$0a		ldx	#10
.2d81	20 f3 39	jsr $39f3		jsr	stringHandler
.2d84	86 32		stx $32				stx 	tempShort 					; save result
.2d86	aa		tax				tax 								; put SP back in X and get result.
.2d87	a5 32		lda $32				lda 	tempShort
.2d89	60		rts				rts
.2d8a					_PCError:
.2d8a	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.2d8c	20 18 15	jsr $1518		jsr	errorHandler
.2d8f					CompareEquals:
.2d8f	20 57 2d	jsr $2d57			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.2d92	c9 00		cmp #$00			cmp 	#$00 						; and we do something if it is = or <> a value.
.2d94	f0 35		beq $2dcb			beq  	CompareTrue
.2d96	4c ce 2d	jmp $2dce			jmp 	CompareFalse
.2d99					CompareLess:
.2d99	20 57 2d	jsr $2d57			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.2d9c	c9 ff		cmp #$ff			cmp 	#$FF 						; and we do something if it is = or <> a value.
.2d9e	f0 2b		beq $2dcb			beq  	CompareTrue
.2da0	4c ce 2d	jmp $2dce			jmp 	CompareFalse
.2da3					CompareGreater:
.2da3	20 57 2d	jsr $2d57			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.2da6	c9 01		cmp #$01			cmp 	#$01 						; and we do something if it is = or <> a value.
.2da8	f0 21		beq $2dcb			beq  	CompareTrue
.2daa	4c ce 2d	jmp $2dce			jmp 	CompareFalse
.2dad					CompareNotEquals:
.2dad	20 57 2d	jsr $2d57			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.2db0	c9 00		cmp #$00			cmp 	#$00 						; and we do something if it is = or <> a value.
.2db2	d0 17		bne $2dcb			bne  	CompareTrue
.2db4	4c ce 2d	jmp $2dce			jmp 	CompareFalse
.2db7					CompareGreaterEq:
.2db7	20 57 2d	jsr $2d57			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.2dba	c9 ff		cmp #$ff			cmp 	#$FF 						; and we do something if it is = or <> a value.
.2dbc	d0 0d		bne $2dcb			bne  	CompareTrue
.2dbe	4c ce 2d	jmp $2dce			jmp 	CompareFalse
.2dc1					CompareLessEq:
.2dc1	20 57 2d	jsr $2d57			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.2dc4	c9 01		cmp #$01			cmp 	#$01 						; and we do something if it is = or <> a value.
.2dc6	d0 03		bne $2dcb			bne  	CompareTrue
.2dc8	4c ce 2d	jmp $2dce			jmp 	CompareFalse
.2dcb					CompareTrue:
.2dcb	4c 44 36	jmp $3644			jmp 	MInt32True
.2dce					CompareFalse:
.2dce	4c 48 36	jmp $3648			jmp 	MInt32False

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/dereference.asm

.2dd1					DereferenceTwo:
.2dd1	e8		inx				inx
.2dd2	20 d6 2d	jsr $2dd6			jsr 	DereferenceOne
.2dd5	ca		dex				dex
.2dd6					DereferenceOne:
.2dd6	b5 48		lda $48,x			lda 	esType,x
.2dd8	10 3d		bpl $2e17			bpl 	_DRNotReference 			; is it a reference ? if not, we don't need to do anything
.2dda	4a		lsr a				lsr 	a 							; do float dereference if bit 0 set.
.2ddb	b0 3b		bcs $2e18			bcs 	_DRFloatDeReference
.2ddd	98		tya				tya
.2dde	48		pha				pha
.2ddf	b5 50		lda $50,x			lda 	esInt0,x 					; copy address to temp0
.2de1	85 2a		sta $2a				sta 	temp0
.2de3	b5 58		lda $58,x			lda 	esInt1,x
.2de5	85 2b		sta $2b				sta 	temp0+1
.2de7	a9 00		lda #$00			lda 	#0 							; clear esInt1..3
.2de9	95 58		sta $58,x			sta 	esInt1,x
.2deb	95 60		sta $60,x			sta 	esInt2,x
.2ded	95 68		sta $68,x			sta 	esInt3,x
.2def	b5 48		lda $48,x			lda 	esType,x 					; get the type byte.
.2df1	29 60		and #$60			and 	#$60 						; get string flag ($40) and byte flag ($20)
.2df3	0a		asl a				asl 	a 							; now string ($80) byte ($40)
.2df4	30 0d		bmi $2e03			bmi 	_DeRefString 				; string, 2 bytes only
.2df6	d0 11		bne $2e09			bne 	_DeRefByte 					; byte 1 byte only
.2df8					_DeRefLong:
.2df8	a0 03		ldy #$03			ldy 	#3
.2dfa	b1 2a		lda ($2a),y			lda 	(temp0),y
.2dfc	95 68		sta $68,x			sta 	esInt3,x
.2dfe	88		dey				dey
.2dff	b1 2a		lda ($2a),y			lda 	(temp0),y
.2e01	95 60		sta $60,x			sta 	esInt2,x
.2e03					_DeRefString:
.2e03	a0 01		ldy #$01			ldy 	#1
.2e05	b1 2a		lda ($2a),y			lda 	(temp0),y
.2e07	95 58		sta $58,x			sta 	esInt1,x
.2e09					_DeRefByte:
.2e09	a0 00		ldy #$00			ldy 	#0
.2e0b	b1 2a		lda ($2a),y			lda 	(temp0),y
.2e0d	95 50		sta $50,x			sta 	esInt0,x
.2e0f	b5 48		lda $48,x			lda 	esType,x 					; clear byte and deref bits.
.2e11	29 40		and #$40			and 	#$40
.2e13	95 48		sta $48,x			sta 	esType,x
.2e15	68		pla				pla
.2e16	a8		tay				tay
.2e17					_DRNotReference
.2e17	60		rts				rts
.2e18					_DRFloatDereference:
.2e18	20 a2 23	jsr $23a2			jsr 	TOSToTemp0 					; address to deref in temp0
.2e1b	8a		txa				txa
.2e1c	a2 1e		ldx #$1e		ldx	#30
.2e1e	20 b0 1e	jsr $1eb0		jsr	floatingpointHandler
.2e21	aa		tax				tax
.2e22	a9 01		lda #$01			lda 	#$01 						; type to FP (float)
.2e24	95 48		sta $48,x			sta 	esType,x
.2e26	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/evaluate.asm

.2e27					EvaluateLevel:
.2e27	e0 08		cpx #$08			cpx 	#StackSize 					; check stack overflow
.2e29	b0 1e		bcs $2e49			bcs 	_ELStack
.2e2b	48		pha				pha 								; save precedence level.
.2e2c	a9 00		lda #$00			lda 	#0 							; zero the current stack level.
.2e2e	95 50		sta $50,x			sta 	esInt0,x
.2e30	95 58		sta $58,x			sta 	esInt1,x
.2e32	95 60		sta $60,x			sta 	esInt2,x
.2e34	95 68		sta $68,x			sta 	esInt3,x
.2e36	95 48		sta $48,x			sta 	esType,x 					; zero the type (integer value)
.2e38	b1 28		lda ($28),y			lda 	(codePtr),y	 				; look at first token/character
.2e3a	30 26		bmi $2e62			bmi 	_ELIsToken 					; if -ve could be string, float, or unary function.
.2e3c	0a		asl a				asl 	a 							; if 00-3F then will now be PL and it's a variable.
.2e3d	30 0f		bmi $2e4e			bmi 	_ELIsConstant 				; 40-7F will be -ve and that's an integer constant.
.2e3f	8a		txa				txa 								; stack level in X
.2e40	a2 02		ldx #$02		ldx	#2
.2e42	20 1f 46	jsr $461f		jsr	variableHandler
.2e45	aa		tax				tax
.2e46	4c 8b 2e	jmp $2e8b			jmp		_ELHasTerm
.2e49					_ELStack:
.2e49	a2 23		ldx #$23			ldx 	#ErrorID_NumStack
.2e4b	20 18 15	jsr $1518		jsr	errorHandler
.2e4e					_ELIsConstant:
.2e4e	4a		lsr a				lsr 	a 							; get the value back
.2e4f	29 3f		and #$3f			and 	#$3F 						; force into range 0-63
.2e51	95 50		sta $50,x			sta 	esInt0,x 					; and put in LSB.
.2e53					_ELCheckNext:
.2e53	c8		iny				iny 								; look at next
.2e54	b1 28		lda ($28),y			lda 	(codePtr),y
.2e56	49 40		eor #$40			eor 	#$40 						; shift around so 40-7F => 00-3F
.2e58	c9 40		cmp #$40			cmp 	#$40 						; out of range ?
.2e5a	b0 2f		bcs $2e8b			bcs 	_ELHasTerm 					; done getting the constant.
.2e5c	20 24 2f	jsr $2f24			jsr 	ELShiftByteIn 				; shift byte into position.
.2e5f	4c 53 2e	jmp $2e53			jmp 	_ELCheckNext
.2e62					_ELIsToken:
.2e62	c9 85		cmp #$85			cmp 	#TOK_STR 					; handle strings.
.2e64	f0 0f		beq $2e75			beq 	_ELIsString
.2e66	c9 84		cmp #$84			cmp 	#TOK_FPC 					; if no, then check unary.
.2e68	d0 5f		bne $2ec9			bne 	_ELCheckUnary
.2e6a	8a		txa				txa 								; put X into A
.2e6b	c8		iny				iny 								; skip over the float marker
.2e6c	a2 1a		ldx #$1a		ldx	#26
.2e6e	20 b0 1e	jsr $1eb0		jsr	floatingpointHandler
.2e71	aa		tax				tax 								; restore X
.2e72	4c 8b 2e	jmp $2e8b			jmp 	_ELHasTerm
.2e75					_ELIsString:
.2e75	98		tya				tya 								; address of string is codePtr+y+1
.2e76	38		sec				sec
.2e77	65 28		adc $28				adc 	codePtr
.2e79	95 50		sta $50,x			sta 	esInt0,x
.2e7b	a5 29		lda $29				lda 	codePtr+1
.2e7d	69 00		adc #$00			adc 	#0
.2e7f	95 58		sta $58,x			sta 	esInt1,x
.2e81	a9 40		lda #$40			lda 	#$40 						; set type to string value
.2e83	95 48		sta $48,x			sta 	esType,x
.2e85	c8		iny				iny 								; skip over string.
.2e86	98		tya				tya
.2e87	38		sec				sec									; +1 for the length itself.
.2e88	71 28		adc ($28),y			adc 	(codePtr),y
.2e8a	a8		tay				tay 								; and fall through to term loop code.
.2e8b					_ELHasTerm:
.2e8b	b1 28		lda ($28),y			lda 	(codePtr),y
.2e8d	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; check in the correct range for binary tokens.
.2e8f	90 04		bcc $2e95			bcc 	_ELPopExit
.2e91	c9 99		cmp #$99			cmp 	#TOK_STRUCTST
.2e93	90 02		bcc $2e97			bcc 	_ELHasBinaryTerm
.2e95					_ELPopExit:
.2e95	68		pla				pla
.2e96					_ELExit:
.2e96	60		rts				rts
.2e97					_ELHasBinaryTerm:
.2e97	84 32		sty $32				sty 	tempShort 					; save position
.2e99	a8		tay				tay 								; use token as an index and get the precedence.
.2e9a	b9 cc 2e	lda $2ecc,y			lda 	ELBinaryOperatorInfo-TOK_BINARYST,y
.2e9d	a4 32		ldy $32				ldy 	tempShort 					; restore Y
.2e9f	85 32		sta $32				sta 	tempShort 					; save precedence in memory.
.2ea1	68		pla				pla 								; restore current level.
.2ea2	c5 32		cmp $32				cmp 	tempShort 					; if current >= operator then exit
.2ea4	b0 f0		bcs $2e96			bcs 	_ELExit
.2ea6	48		pha				pha 								; save current level back on the stack.
.2ea7	b1 28		lda ($28),y			lda 	(codePtr),y 				; save the binary operator on the stack and skip it.
.2ea9	48		pha				pha
.2eaa	c8		iny				iny
.2eab	e8		inx				inx 								; calculate the RHS at the operator precedence.
.2eac	a5 32		lda $32				lda 	tempShort
.2eae	20 27 2e	jsr $2e27			jsr 	EvaluateLevel
.2eb1	ca		dex				dex
.2eb2	68		pla				pla 								; get the operator back out.
.2eb3					_ELExecuteA:
.2eb3	86 32		stx $32				stx 	tempShort 					; upload the vectors. Would be nice to use jmp (aaaa,x)
.2eb5	0a		asl a				asl 	a 							; but not practical. May use push/rts later.
.2eb6	aa		tax				tax
.2eb7	bd e8 2a	lda $2ae8,x			lda 	Group0Vectors,x
.2eba	85 2a		sta $2a				sta 	temp0
.2ebc	bd e9 2a	lda $2ae9,x			lda 	Group0Vectors+1,x
.2ebf	85 2b		sta $2b				sta 	temp0+1
.2ec1	a6 32		ldx $32				ldx 	tempShort
.2ec3	20 10 2f	jsr $2f10			jsr 	_ELCallTemp0
.2ec6	4c 8b 2e	jmp $2e8b			jmp 	_ELHasTerm 					; and loop back round.
.2ec9					_ELCheckUnary:
.2ec9	c8		iny				iny 								; skip over token.
.2eca	c9 90		cmp #$90			cmp 	#TKW_MINUS 					; is it - term
.2ecc	f0 19		beq $2ee7			beq 	_ELMinus
.2ece	c9 97		cmp #$97			cmp 	#TKW_PLING 					; is it ! or ? term
.2ed0	f0 2c		beq $2efe			beq 	_ELIndirect
.2ed2	c9 98		cmp #$98			cmp 	#TKW_QMARK
.2ed4	f0 28		beq $2efe			beq 	_ELIndirect
.2ed6	c9 83		cmp #$83			cmp 	#TOK_SHIFT3 				; is it the unary extension.
.2ed8	f0 39		beq $2f13			beq 	_ELExtension
.2eda	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST 				; must be TOK_UNARYST ... TOK_TOKENS
.2edc	90 04		bcc $2ee2			bcc 	_ELUSyntax
.2ede	c9 c9		cmp #$c9			cmp 	#TOK_TOKENS
.2ee0	90 d1		bcc $2eb3			bcc 	_ELExecuteA 				; if so do that token.
.2ee2					_ELUSyntax:
.2ee2	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.2ee4	20 18 15	jsr $1518		jsr	errorHandler
.2ee7					_ELMinus:
.2ee7	20 79 2f	jsr $2f79			jsr 	EvaluateNumericTerm 		; get a number to negate.
.2eea	b5 48		lda $48,x			lda 	esType,x 					; is it integer
.2eec	f0 0a		beq $2ef8			beq 	_ELMinusInteger
.2eee	8a		txa				txa
.2eef	a2 0e		ldx #$0e		ldx	#14
.2ef1	20 b0 1e	jsr $1eb0		jsr	floatingpointHandler
.2ef4	aa		tax				tax
.2ef5	4c 8b 2e	jmp $2e8b			jmp 	_ELHasTerm
.2ef8					_ELMinusInteger:
.2ef8	20 02 36	jsr $3602			jsr 	MInt32Negate 				; do int negate
.2efb	4c 8b 2e	jmp $2e8b			jmp 	_ELHasTerm
.2efe					_ELIndirect:
.2efe	48		pha				pha 								; save what we want (TKW_QMARK TWK_PLING)
.2eff	20 82 2f	jsr $2f82			jsr 	EvaluateIntegerTerm 		; integer address
.2f02	68		pla				pla
.2f03	49 97		eor #$97			eor 	#TKW_PLING 					; now $00 if !
.2f05	f0 02		beq $2f09			beq 	_ELHaveModifier
.2f07	a9 20		lda #$20			lda 	#$20 						; now $00 if !, $20 if ?
.2f09					_ELHaveModifier:
.2f09	09 80		ora #$80			ora 	#$80						; make it the appropriate reference.
.2f0b	95 48		sta $48,x			sta 	esType,x 					; $80 for ! $A0 for ?
.2f0d	4c 8b 2e	jmp $2e8b			jmp 	_ELHasTerm
.2f10					_ELCallTemp0:
.2f10	6c 2a 00	jmp ($002a)			jmp 	(temp0)
.2f13					_ELExtension:
.2f13	8a		txa				txa 								; stack pos in A
.2f14	20 69 18	jsr $1869		jsr	extensionHandler
.2f17	aa		tax				tax 								; restore stack
.2f18	4c 8b 2e	jmp $2e8b			jmp 	_ELHasTerm
.2f1b					UnaryParenthesis:
.2f1b	a9 00		lda #$00			lda 	#0 							; ( is a unary function ....
.2f1d	20 27 2e	jsr $2e27			jsr 	EvaluateLevel
.2f20	20 bb 36	jsr $36bb			jsr 	CheckRightParen 			; check for )
.2f23	60		rts				rts
.2f24					ELShiftByteIn:
.2f24	48		pha				pha 								; save bits to shift in.
.2f25	b5 68		lda $68,x			lda 	esInt3,x 					; save top most byte
.2f27	48		pha				pha
.2f28	b5 60		lda $60,x			lda 	esInt2,x 					; shift everything left 8 bits
.2f2a	95 68		sta $68,x			sta 	esInt3,x
.2f2c	b5 58		lda $58,x			lda 	esInt1,x
.2f2e	95 60		sta $60,x			sta 	esInt2,x
.2f30	b5 50		lda $50,x			lda 	esInt0,x
.2f32	95 58		sta $58,x			sta 	esInt1,x
.2f34	a9 00		lda #$00			lda 	#0
.2f36	95 50		sta $50,x			sta 	esInt0,x
.2f38	68		pla				pla 								; now A:TOS is a 5 byte register, shift right twice.
.2f39	29 03		and #$03			and 	#3 							; only want lower 2 bits
.2f3b	09 04		ora #$04			ora 	#4  						; set bit 2 - when 1 we are done
.2f3d					_ELShiftLoop:
.2f3d	4a		lsr a				lsr 	a
.2f3e	76 68		ror $68,x			ror 	esInt3,x
.2f40	76 60		ror $60,x			ror 	esInt2,x
.2f42	76 58		ror $58,x			ror 	esInt1,x
.2f44	76 50		ror $50,x			ror 	esInt0,x
.2f46	c9 01		cmp #$01			cmp 	#1
.2f48	d0 f3		bne $2f3d			bne 	_ELShiftLoop
.2f4a	68		pla				pla 								; get original 6 bit value and OR in.
.2f4b	29 3f		and #$3f			and 	#$3F
.2f4d	15 50		ora $50,x			ora 	esInt0,x
.2f4f	95 50		sta $50,x			sta 	esInt0,x
.2f51	60		rts				rts
.2f52					ELBinaryOperatorInfo:

;******  Processing file: main/evaluate/../../generated/binarystructinfo.inc

>2f52	01					.byte	$01			; $86 and
>2f53	01					.byte	$01			; $87 or
>2f54	01					.byte	$01			; $88 xor
>2f55	02					.byte	$02			; $89 >=
>2f56	02					.byte	$02			; $8a <=
>2f57	02					.byte	$02			; $8b >
>2f58	02					.byte	$02			; $8c <
>2f59	02					.byte	$02			; $8d =
>2f5a	02					.byte	$02			; $8e <>
>2f5b	03					.byte	$03			; $8f +
>2f5c	03					.byte	$03			; $90 -
>2f5d	04					.byte	$04			; $91 >>
>2f5e	04					.byte	$04			; $92 <<
>2f5f	04					.byte	$04			; $93 *
>2f60	04					.byte	$04			; $94 /
>2f61	04					.byte	$04			; $95 mod
>2f62	05					.byte	$05			; $96 ^
>2f63	06					.byte	$06			; $97 !
>2f64	06					.byte	$06			; $98 ?
>2f65	82					.byte	$82			; $99 repeat
>2f66	82					.byte	$82			; $9a while
>2f67	82					.byte	$82			; $9b for
>2f68	82					.byte	$82			; $9c if
>2f69	82					.byte	$82			; $9d defproc
>2f6a	80					.byte	$80			; $9e until
>2f6b	80					.byte	$80			; $9f wend
>2f6c	80					.byte	$80			; $a0 next
>2f6d	80					.byte	$80			; $a1 then
>2f6e	80					.byte	$80			; $a2 endif
>2f6f	80					.byte	$80			; $a3 endproc

;******  Return to file: main/evaluate/evaluate.asm


;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/support.asm

.2f70					EvaluateTerm:
.2f70	a9 0f		lda #$0f			lda 	#15 						; no binary operator has this high a precedence.
.2f72	20 27 2e	jsr $2e27			jsr 	EvaluateLevel
.2f75	20 d6 2d	jsr $2dd6			jsr 	DereferenceOne
.2f78	60		rts				rts
.2f79					EvaluateNumericTerm:
.2f79	20 70 2f	jsr $2f70			jsr 	EvaluateTerm
.2f7c	b5 48		lda $48,x			lda 	esType,x
.2f7e	0a		asl a				asl 	a 							; see if it's a string.
.2f7f	30 09		bmi $2f8a			bmi 	ENTType
.2f81	60		rts				rts
.2f82					EvaluateIntegerTerm:
.2f82	20 70 2f	jsr $2f70			jsr 	EvaluateTerm
.2f85	b5 48		lda $48,x			lda 	esType,x
.2f87	d0 01		bne $2f8a			bne 	ENTType
.2f89	60		rts				rts
.2f8a					ENTType:
.2f8a	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.2f8c	20 18 15	jsr $1518		jsr	errorHandler
.2f8f					EvaluateRoot:
.2f8f	a2 00		ldx #$00			ldx 	#0
.2f91					Evaluate:
.2f91	a9 00		lda #$00			lda 	#0
.2f93	20 27 2e	jsr $2e27			jsr 	EvaluateLevel
.2f96	20 d6 2d	jsr $2dd6			jsr 	DereferenceOne
.2f99	60		rts				rts
.2f9a					EvaluateNumeric:
.2f9a	20 91 2f	jsr $2f91			jsr 	Evaluate
.2f9d	b5 48		lda $48,x			lda 	esType,x
.2f9f	0a		asl a				asl 	a 							; see if it's a string.
.2fa0	30 e8		bmi $2f8a			bmi 	ENTType
.2fa2	4a		lsr a				lsr 	a 							; shift float flag into carry.
.2fa3	4a		lsr a				lsr 	a
.2fa4	60		rts				rts
.2fa5					EvaluateString:
.2fa5	20 91 2f	jsr $2f91			jsr 	Evaluate
.2fa8	b5 48		lda $48,x			lda 	esType,x
.2faa	0a		asl a				asl 	a 							; see if it's a string.
.2fab	10 dd		bpl $2f8a			bpl 	ENTType
.2fad	60		rts				rts
.2fae					EvaluateRootInteger:
.2fae	a2 00		ldx #$00			ldx 	#0
.2fb0					EvaluateInteger:
.2fb0	20 91 2f	jsr $2f91			jsr 	Evaluate
.2fb3	b5 48		lda $48,x			lda 	esType,x
.2fb5	d0 d3		bne $2f8a			bne 	ENTType
.2fb7	60		rts				rts
.2fb8					EvaluateSmallInteger:
.2fb8	20 b0 2f	jsr $2fb0			jsr 	EvaluateInteger
.2fbb	b5 58		lda $58,x			lda 	esInt1,x
.2fbd	15 60		ora $60,x			ora 	esInt2,x
.2fbf	15 68		ora $68,x			ora 	esInt3,x
.2fc1	d0 03		bne $2fc6			bne 	_ESIValue
.2fc3	b5 50		lda $50,x			lda 	esInt0,x
.2fc5	60		rts				rts
.2fc6					_ESIValue:
.2fc6	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.2fc8	20 18 15	jsr $1518		jsr	errorHandler
.2fcb					LinkEvaluate:
.2fcb	aa		tax				tax
.2fcc	20 91 2f	jsr $2f91			jsr 	Evaluate
.2fcf	8a		txa				txa
.2fd0	60		rts				rts
.2fd1					LinkEvaluateTerm:
.2fd1	aa		tax				tax
.2fd2	20 70 2f	jsr $2f70			jsr 	EvaluateTerm
.2fd5	8a		txa				txa
.2fd6	60		rts				rts
.2fd7					LinkEvaluateInteger:
.2fd7	aa		tax				tax
.2fd8	20 b0 2f	jsr $2fb0			jsr 	EvaluateInteger
.2fdb	8a		txa				txa
.2fdc	60		rts				rts
.2fdd					LinkEvaluateString:
.2fdd	aa		tax				tax
.2fde	20 a5 2f	jsr $2fa5			jsr 	EvaluateString
.2fe1	8a		txa				txa
.2fe2	60		rts				rts
.2fe3					LinkEvaluateSmallInt:
.2fe3	aa		tax				tax
.2fe4	20 b8 2f	jsr $2fb8			jsr 	EvaluateSmallInteger
.2fe7	8a		txa				txa
.2fe8	60		rts				rts
.2fe9					EvaluateReference:
.2fe9	ad 63 2f	lda $2f63			lda 	ELBinaryOperatorInfo+TKW_PLING-TOK_BINARYST
.2fec	38		sec				sec 								; sub 1 to allow a!x b?x to work.
.2fed	e9 01		sbc #$01			sbc 	#1
.2fef	20 27 2e	jsr $2e27			jsr 	EvaluateLevel
.2ff2	b5 48		lda $48,x			lda 	esType,x
.2ff4	10 01		bpl $2ff7			bpl 	_ERFail
.2ff6	60		rts				rts
.2ff7					_ERFail:
.2ff7	a2 0b		ldx #$0b			ldx 	#ErrorID_NoReference
.2ff9	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary/convert.asm

.2ffc					Event_Str:
.2ffc	20 9a 2f	jsr $2f9a			jsr 	EvaluateNumeric 			; get a number.
.2fff	b5 48		lda $48,x			lda 	esType,x 					; is it floating point
.3001	d0 13		bne $3016			bne 	_ESFloat
.3003	20 59 30	jsr $3059			jsr 	ConvertGetBase 				; get base, or default.
.3006	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.3008	85 2a		sta $2a				sta 	temp0
.300a	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.300c	85 2b		sta $2b				sta 	1+(temp0)
.300e	b5 51		lda $51,x			lda 	esInt0+1,x 					; get the base
.3010	20 9e 35	jsr $359e			jsr 	MInt32ToString 				; convert to string.
.3013	4c 23 30	jmp $3023			jmp 	_ESCloneExit 				; clone and exit.
.3016					_ESFloat:
.3016	20 bb 36	jsr $36bb			jsr 	CheckRightParen 			; check closing )
.3019	20 a2 23	jsr $23a2			jsr 	TOSToTemp0 					; string address in temp0, goes here.
.301c	8a		txa				txa
.301d	a2 16		ldx #$16		ldx	#22
.301f	20 b0 1e	jsr $1eb0		jsr	floatingpointHandler
.3022	aa		tax				tax
.3023					_ESCloneExit:
.3023	8a		txa				txa
.3024	a2 04		ldx #$04		ldx	#4
.3026	20 f3 39	jsr $39f3		jsr	stringHandler
.3029	aa		tax				tax
.302a	60		rts				rts
.302b					UnaryVal:
.302b	38		sec				sec 								; Carry set to return value
.302c	b0 01		bcs $302f			bcs 	ValueMain
.302e					UnaryIsVal:
.302e	18		clc				clc									; Carry clear to return legitimacy
.302f					ValueMain:
.302f	08		php				php 								; save results (CS is value, CC is validation)
.3030	20 a5 2f	jsr $2fa5			jsr 	EvaluateString
.3033	20 59 30	jsr $3059			jsr 	ConvertGetBase 				; get base, if any.
.3036	98		tya				tya
.3037	48		pha				pha
.3038	20 a2 23	jsr $23a2			jsr 	TOSToTemp0 					; string address in temp0, goes here.
.303b	b5 51		lda $51,x			lda 	esInt0+1,x 					; get the base
.303d	29 7f		and #$7f			and 	#$7F 						; ignore the sign bit.
.303f	20 b6 34	jsr $34b6			jsr 	MInt32FromString 			; convert it back from a string.
.3042	b0 0c		bcs $3050			bcs 	_VMSuccess 					; successfully converted.
.3044	b5 51		lda $51,x			lda 	esInt0+1,x 					; is base the default
.3046	c9 8a		cmp #$8a			cmp 	#$80+10 					; if no, then it is integer only.
.3048	f0 00		beq $304a			beq 	_VMFailed 	 				; so we failed.
.304a					_VMFailed:
.304a	68		pla				pla
.304b	a8		tay				tay
.304c	28		plp				plp
.304d	4c 48 36	jmp $3648			jmp 	MInt32False 				; return 0 whatever.
.3050					_VMSuccess:
.3050	68		pla				pla
.3051	a8		tay				tay
.3052	28		plp				plp 								; if CS the it was val() so we want the value.
.3053	b0 03		bcs $3058			bcs 	_VMExit
.3055	4c 44 36	jmp $3644			jmp 	MInt32True 					; otherwise return true as successful.
.3058					_VMExit:
.3058	60		rts				rts
.3059					ConvertGetBase:
.3059	a9 8a		lda #$8a			lda 	#10+$80 					; default base 10 signed.
.305b	95 51		sta $51,x			sta 	esInt0+1,x
.305d	b1 28		lda ($28),y			lda 	(codePtr),y 				; check for ,base)
.305f	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.3061	d0 0e		bne $3071			bne 	_CGBDone 					; not found, should be )
.3063	e8		inx				inx 								; next level
.3064	c8		iny				iny 								; skip comma.
.3065	20 b8 2f	jsr $2fb8			jsr 	EvaluateSmallInteger		; evaluate the base.
.3068	ca		dex				dex
.3069	c9 02		cmp #$02			cmp 	#2 							; base range is 2..16
.306b	90 08		bcc $3075			bcc 	_CGBValue 					; (it should work as high as 37)
.306d	c9 11		cmp #$11			cmp 	#17
.306f	b0 04		bcs $3075			bcs 	_CGBValue
.3071					_CGBDone:
.3071	20 bb 36	jsr $36bb			jsr 	CheckRightParen
.3074	60		rts				rts
.3075					_CGBValue:
.3075	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.3077	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary/event.asm

.307a					EventFunction:
.307a	20 e9 2f	jsr $2fe9			jsr 	EvaluateReference			; get the variable reference that tracks the event
.307d	b5 48		lda $48,x			lda 	esType,x
.307f	c9 80		cmp #$80			cmp 	#$80 						; must be integer reference
.3081	d0 5b		bne $30de			bne 	_EFType
.3083	20 c8 36	jsr $36c8			jsr 	CheckComma
.3086	e8		inx				inx
.3087	20 b0 2f	jsr $2fb0			jsr 	EvaluateInteger		 		; get the elapsed time between firing.
.308a	20 bb 36	jsr $36bb			jsr 	CheckRightParen 			; finish off with the right bracket
.308d	ca		dex				dex
.308e	b5 58		lda $58,x			lda 	esInt1,x 					; check max of 32767, we use 16 bit for timers and
.3090	29 80		and #$80			and 	#$80 						; it doesn't work > 32767
.3092	15 60		ora $60,x			ora 	esInt2,x
.3094	15 68		ora $68,x			ora 	esInt3,x
.3096	d0 41		bne $30d9			bne 	_EFValue
.3098	98		tya				tya
.3099	48		pha				pha
.309a	8a		txa				txa
.309b	48		pha				pha
.309c	a2 1c		ldx #$1c		ldx	#28
.309e	20 f6 14	jsr $14f6		jsr	deviceHandler
.30a1	84 2d		sty $2d				sty 	temp1+1
.30a3	85 2c		sta $2c				sta 	temp1
.30a5	68		pla				pla
.30a6	aa		tax				tax
.30a7	20 a2 23	jsr $23a2			jsr 	TOSToTemp0 					; set temp0 to the address of the event variable
.30aa	a0 03		ldy #$03			ldy 	#3							; if -ve
.30ac	b1 2a		lda ($2a),y			lda 	(temp0),y
.30ae	30 23		bmi $30d3			bmi 	_EFFail 	 				; straight out with fail, means "on pause".
.30b0	a0 00		ldy #$00			ldy 	#0 							; is the fire time zero ?
.30b2	b1 2a		lda ($2a),y			lda 	(temp0),y
.30b4	c8		iny				iny
.30b5	11 2a		ora ($2a),y			ora 	(temp0),y
.30b7	f0 17		beq $30d0			beq 	_EFInitialise 				; if so, initialise the value but return false.
.30b9	a0 00		ldy #$00			ldy 	#0 							; calculate trigger - timer
.30bb	38		sec				sec
.30bc	b1 2a		lda ($2a),y			lda 	(temp0),y
.30be	e5 2c		sbc $2c				sbc 	temp1
.30c0	c8		iny				iny
.30c1	b1 2a		lda ($2a),y			lda 	(temp0),y
.30c3	e5 2d		sbc $2d				sbc 	temp1+1
.30c5	10 0c		bpl $30d3			bpl 	_EFFail 					; if trigger >= timer then return False
.30c7	20 e3 30	jsr $30e3			jsr 	SetEventTimer 				; reset the timer for next time.
.30ca	20 44 36	jsr $3644			jsr	 	MInt32True 					; and treutn true as fired.
.30cd	68		pla				pla
.30ce	a8		tay				tay
.30cf	60		rts				rts
.30d0					_EFInitialise:
.30d0	20 e3 30	jsr $30e3			jsr		SetEventTimer 				; set trigger time to time + elapsed
.30d3					_EFFail:
.30d3	68		pla				pla
.30d4	a8		tay				tay
.30d5	20 48 36	jsr $3648			jsr 	MInt32False
.30d8	60		rts				rts
.30d9					_EFValue:
.30d9	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.30db	20 18 15	jsr $1518		jsr	errorHandler
.30de					_EFType:
.30de	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.30e0	20 18 15	jsr $1518		jsr	errorHandler
.30e3					SetEventTimer:
.30e3	a0 00		ldy #$00			ldy 	#0
.30e5	18		clc				clc
.30e6	a5 2c		lda $2c				lda 	temp1
.30e8	75 51		adc $51,x			adc 	esInt0+1,x
.30ea	91 2a		sta ($2a),y			sta		(temp0),y
.30ec	c8		iny				iny
.30ed	a5 2d		lda $2d				lda 	temp1+1
.30ef	75 59		adc $59,x			adc 	esInt1+1,x
.30f1	91 2a		sta ($2a),y			sta		(temp0),y
.30f3	88		dey				dey
.30f4	11 2a		ora ($2a),y			ora 	(temp0),y 					; if the result is non zero, exit
.30f6	d0 04		bne $30fc			bne 	_SETExit 					; zero means initialise.....
.30f8	a9 01		lda #$01			lda 	#1 							; timer zero won't work, so make it 1, which is
.30fa	91 2a		sta ($2a),y			sta 	(temp0),y 					; near enough.
.30fc					_SETExit:
.30fc	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary/unary.asm

.30fd					UnaryLen:
.30fd	20 0b 31	jsr $310b			jsr 	ULStart
.3100					ULFinish:
.3100	b1 2a		lda ($2a),y			lda 	(temp0),y 					; get length prefix
.3102	a4 32		ldy $32				ldy 	tempShort 					; get Y back
.3104	20 57 36	jsr $3657			jsr 	MInt32Set8Bit 				; write it out.
.3107	20 bb 36	jsr $36bb			jsr 	CheckRightParen
.310a	60		rts				rts
.310b	20 a5 2f	jsr $2fa5	ULStart:jsr 	EvaluateString
.310e	b5 50		lda $50,x			lda 	esInt0,x 					; copy address of string to temp0
.3110	85 2a		sta $2a				sta 	temp0
.3112	b5 58		lda $58,x			lda 	esInt1,x
.3114	85 2b		sta $2b				sta 	temp0+1
.3116	84 32		sty $32				sty 	tempShort 					; get length
.3118	a0 00		ldy #$00			ldy 	#0
.311a	60		rts				rts
.311b					UnaryAsc:
.311b	20 0b 31	jsr $310b			jsr 	ULStart 					; same as LEN() get string, save Y, point to length.
.311e	b1 2a		lda ($2a),y			lda 	(temp0),y 					; read length
.3120	c8		iny				iny 		 						; point to first character, we can do LEN code after that
.3121	c9 00		cmp #$00			cmp 	#0
.3123	d0 db		bne $3100			bne 	ULFinish 					; if length = 0 then error : asc("") -> error.
.3125	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.3127	20 18 15	jsr $1518		jsr	errorHandler
.312a					UnaryAbs:
.312a	20 9a 2f	jsr $2f9a			jsr 	EvaluateNumeric 			; some numeric value
.312d	b0 07		bcs $3136			bcs 	_UAFloat 					; CS then float, so use that function
.312f	20 fd 35	jsr $35fd			jsr 	MInt32Absolute 				; int version
.3132	20 bb 36	jsr $36bb			jsr 	CheckRightParen
.3135	60		rts				rts
.3136					_UAFloat:
.3136	8a		txa				txa 								; float version
.3137	a2 02		ldx #$02		ldx	#2
.3139	20 b0 1e	jsr $1eb0		jsr	floatingpointHandler
.313c	aa		tax				tax
.313d	20 bb 36	jsr $36bb			jsr 	CheckRightParen
.3140	60		rts				rts
.3141					UnarySgn:
.3141	20 9a 2f	jsr $2f9a			jsr 	EvaluateNumeric 			; same as above but sign of value
.3144	b0 07		bcs $314d			bcs 	_USFloat
.3146	20 35 36	jsr $3635			jsr 	MInt32Sign
.3149	20 bb 36	jsr $36bb			jsr 	CheckRightParen
.314c	60		rts				rts
.314d					_USFloat:
.314d	8a		txa				txa
.314e	a2 10		ldx #$10		ldx	#16
.3150	20 b0 1e	jsr $1eb0		jsr	floatingpointHandler
.3153	aa		tax				tax
.3154	20 bb 36	jsr $36bb			jsr 	CheckRightParen
.3157	60		rts				rts
.3158					UnaryPeek:
.3158	20 84 31	jsr $3184			jsr 	PDLCode 					; each has common setup code put reads 1,2 or 4 bytes
.315b	4c 78 31	jmp $3178			jmp 	PDLByte0
.315e					UnaryDeek:
.315e	20 84 31	jsr $3184			jsr 	PDLCode
.3161	4c 72 31	jmp $3172			jmp 	PDLByte1
.3164					UnaryLeek:
.3164	20 84 31	jsr $3184			jsr 	PDLCode
.3167	a0 03		ldy #$03			ldy 	#3							; read 3-2
.3169	b1 2a		lda ($2a),y			lda 	(temp0),y
.316b	95 68		sta $68,x			sta 	esInt3,x
.316d	88		dey				dey
.316e	b1 2a		lda ($2a),y			lda 	(temp0),y
.3170	95 60		sta $60,x			sta 	esInt2,x
.3172					PDLByte1:
.3172	a0 01		ldy #$01			ldy 	#1
.3174	b1 2a		lda ($2a),y			lda 	(temp0),y
.3176	95 58		sta $58,x			sta 	esInt1,x
.3178					PDLByte0:
.3178	a0 00		ldy #$00			ldy 	#0
.317a	b1 2a		lda ($2a),y			lda 	(temp0),y
.317c	95 50		sta $50,x			sta 	esInt0,x
.317e	a4 32		ldy $32				ldy 	tempShort 					; restore Y
.3180	20 bb 36	jsr $36bb			jsr 	CheckRightParen 			; check right and return
.3183	60		rts				rts
.3184					PDLCode:
.3184	20 b0 2f	jsr $2fb0			jsr 	EvaluateInteger 			; some address
.3187	b5 50		lda $50,x			lda 	esInt0,x 					; copy address of string to temp0
.3189	85 2a		sta $2a				sta 	temp0
.318b	b5 58		lda $58,x			lda 	esInt1,x
.318d	85 2b		sta $2b				sta 	temp0+1
.318f	a9 00		lda #$00			lda 	#0 							; zero upper 3 bytes of result, type okay.
.3191	95 58		sta $58,x			sta 	esInt1,x 					; PEEK needs upper 3 cleared
.3193	95 60		sta $60,x			sta 	esInt2,x
.3195	95 68		sta $68,x			sta 	esInt3,x
.3197	84 32		sty $32				sty 	tempShort 					; save Y
.3199	60		rts				rts
.319a					Unary_Random:
.319a	20 78 36	jsr $3678			jsr 	MInt32Random 				; generate random number.
.319d	b1 28		lda ($28),y			lda 	(codePtr),y 				; check followed by )
.319f	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.31a1	f0 08		beq $31ab			beq 	_URExit
.31a3	e8		inx				inx 								; load range 0..r-1 into +1
.31a4	20 b0 2f	jsr $2fb0			jsr 	EvaluateInteger
.31a7	ca		dex				dex
.31a8	20 9b 34	jsr $349b			jsr 	MInt32Modulus 				; calculate random % modulus
.31ab					_URExit:
.31ab	20 bb 36	jsr $36bb			jsr 	CheckRightParen 			; check right and return
.31ae	60		rts				rts
.31af					Unary_Min:
.31af	a9 01		lda #$01			lda 	#1 							; c1 cmp c2 needs to be > e.g. c1 > c2
.31b1	d0 02		bne $31b5			bne 	UnaryMBody
.31b3					Unary_Max:
.31b3	a9 ff		lda #$ff			lda 	#$FF 						; c1 cmp c2 needs to be < e.g. c1 < c2
.31b5					UnaryMBody:
.31b5	48		pha				pha 								; save comparator on stack, shows min or max
.31b6	20 91 2f	jsr $2f91			jsr 	Evaluate 					; get the first thing to check
.31b9					_UnaryMLoop:
.31b9	b1 28		lda ($28),y			lda 	(codePtr),y 				; found ), indicates end.
.31bb	c8		iny				iny
.31bc	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.31be	f0 09		beq $31c9			beq 	_UnaryMExit
.31c0	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; found , indicates more.
.31c2	f0 07		beq $31cb			beq 	_UnaryMCompare
.31c4	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.31c6	20 18 15	jsr $1518		jsr	errorHandler
.31c9					_UnaryMExit:
.31c9	68		pla				pla 								; done so throw comparator and return.
.31ca	60		rts				rts
.31cb					_UnaryMCompare:
.31cb	e8		inx				inx 								; get the 2nd thing to evaluate
.31cc	20 91 2f	jsr $2f91			jsr 	Evaluate
.31cf	ca		dex				dex
.31d0	20 57 2d	jsr $2d57			jsr 	PerformComparison 			; this is part of evaluate/compare.asm
.31d3	85 32		sta $32				sta 	tempShort 					; save result
.31d5	68		pla				pla 								; get what we need
.31d6	48		pha				pha
.31d7	c5 32		cmp $32				cmp 	tempShort 					; did we get it
.31d9	d0 de		bne $31b9			bne 	_UnaryMLoop 				; no, try another value.
.31db	20 48 36	jsr $3648			jsr 	MInt32False 				; promote 2nd to 1st.
.31de	20 2c 35	jsr $352c			jsr 	MInt32Add
.31e1	4c b9 31	jmp $31b9			jmp 	_UnaryMLoop
.31e4					Unary_Page:
.31e4	20 48 36	jsr $3648			jsr 	MInt32False 				; zero
.31e7	ad c8 0a	lda $0ac8			lda 	basePage 					; copy base page address in.
.31ea	95 50		sta $50,x			sta 	esInt0,x
.31ec	ad c9 0a	lda $0ac9			lda 	basePage+1
.31ef	95 58		sta $58,x			sta 	esInt1,x
.31f1	60		rts				rts
.31f2					UnaryReference:
.31f2	a9 0f		lda #$0f			lda 	#15
.31f4	20 27 2e	jsr $2e27			jsr 	EvaluateLevel 				; evaluate term and don't deference.
.31f7	b5 48		lda $48,x			lda 	esType,x 					; check it's a reference.
.31f9	10 05		bpl $3200			bpl 	UType
.31fb	a9 00		lda #$00			lda 	#0 							; make it an integer
.31fd	95 48		sta $48,x			sta 	esType,x
.31ff	60		rts				rts
.3200					UType:
.3200	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.3202	20 18 15	jsr $1518		jsr	errorHandler
.3205					UnaryHexMarker:
.3205	4c 82 2f	jmp $2f82			jmp 	EvaluateIntegerTerm
.3208					UnaryComplement:
.3208	20 82 2f	jsr $2f82			jsr 	EvaluateIntegerTerm
.320b	20 1c 36	jsr $361c			jsr 	MInt32Not
.320e	60		rts				rts
.320f					UnaryIntToFloat:
.320f	20 9a 2f	jsr $2f9a			jsr 	EvaluateNumeric				; some number
.3212	b5 48		lda $48,x			lda 	esType,x 					; if float already, exit
.3214	d0 0b		bne $3221			bne 	_UIFExit
.3216	8a		txa				txa 								; convert and set type
.3217	a2 1c		ldx #$1c		ldx	#28
.3219	20 b0 1e	jsr $1eb0		jsr	floatingpointHandler
.321c	aa		tax				tax
.321d	a9 01		lda #$01			lda 	#1
.321f	95 48		sta $48,x			sta 	esType,x
.3221					_UIFExit:
.3221	60		rts				rts
.3222					UnaryFloatToInt:
.3222	20 9a 2f	jsr $2f9a			jsr 	EvaluateNumeric 			; the number
.3225	b5 48		lda $48,x			lda 	esType,x 					; if int already exit
.3227	f0 0b		beq $3234			beq 	_UFIExit
.3229	8a		txa				txa 								; convert to int
.322a	a2 14		ldx #$14		ldx	#20
.322c	20 b0 1e	jsr $1eb0		jsr	floatingpointHandler
.322f	aa		tax				tax
.3230	a9 00		lda #$00			lda 	#0 							; set type
.3232	95 48		sta $48,x			sta 	esType,x
.3234					_UFIExit:
.3234	60		rts				rts
.3235					UnaryAlloc:
.3235	e8		inx				inx 								; evaluate memory required
.3236	20 b0 2f	jsr $2fb0			jsr 	EvaluateInteger
.3239	20 bb 36	jsr $36bb			jsr 	CheckRightParen
.323c	ca		dex				dex
.323d	b5 61		lda $61,x			lda 	esInt2+1,x 					; check at least in 64k range.
.323f	15 69		ora $69,x			ora 	esInt3+1,x
.3241	d0 1d		bne $3260			bne 	_UABadValue
.3243	20 48 36	jsr $3648			jsr 	MInt32False					; zero return.
.3246	a5 36		lda $36				lda 	lowMemory+1 				; copy low memory in
.3248	95 58		sta $58,x			sta 	esInt1,x
.324a	a5 35		lda $35				lda 	lowMemory
.324c	95 50		sta $50,x			sta 	esInt0,x
.324e	18		clc				clc 								; add alloc required.
.324f	75 51		adc $51,x			adc 	esInt0+1,x
.3251	85 35		sta $35				sta 	lowMemory
.3253	a5 36		lda $36				lda 	lowMemory+1
.3255	75 59		adc $59,x			adc 	esInt1+1,x
.3257	85 36		sta $36				sta 	lowMemory+1
.3259	b0 05		bcs $3260			bcs		_UABadValue 				; overflow definitely bad.
.325b	c5 34		cmp $34				cmp 	highMemory+1
.325d	b0 01		bcs $3260			bcs 	_UABadValue 				; out of memory bad.
.325f	60		rts				rts
.3260					_UABadValue:
.3260	a2 22		ldx #$22			ldx 	#ErrorID_Memory
.3262	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary/unary2.asm

.3265					UnaryTimer:
.3265	20 bb 36	jsr $36bb			jsr 	CheckRightParen 			; no parameters
.3268	98		tya				tya
.3269	48		pha				pha
.326a	20 6f 36	jsr $366f			jsr 	MInt32Zero 					; zero result
.326d	86 2a		stx $2a				stx 	temp0 						; returning in YA so can't use .pshx
.326f	a2 1c		ldx #$1c		ldx	#28
.3271	20 f6 14	jsr $14f6		jsr	deviceHandler
.3274	a6 2a		ldx $2a				ldx 	temp0						; restore X and update 16 bit result
.3276	95 50		sta $50,x			sta 	esInt0,x
.3278	98		tya				tya
.3279	95 58		sta $58,x			sta 	esInt1,x
.327b	68		pla				pla
.327c	a8		tay				tay
.327d	60		rts				rts
.327e					UnaryInkey:
.327e	20 bb 36	jsr $36bb			jsr 	CheckRightParen
.3281	86 2a		stx $2a				stx 	temp0
.3283	a2 0a		ldx #$0a		ldx	#10
.3285	20 f6 14	jsr $14f6		jsr	deviceHandler
.3288	a6 2a		ldx $2a				ldx 	temp0
.328a	20 57 36	jsr $3657			jsr 	MInt32Set8Bit
.328d	60		rts				rts
.328e					UnaryGet:
.328e	20 bb 36	jsr $36bb			jsr 	CheckRightParen
.3291	86 2a		stx $2a				stx 	temp0
.3293					_UGLoop:
.3293	a2 02		ldx #$02		ldx	#2
.3295	20 f6 14	jsr $14f6		jsr	deviceHandler
.3298	a2 0a		ldx #$0a		ldx	#10
.329a	20 f6 14	jsr $14f6		jsr	deviceHandler
.329d	c9 00		cmp #$00			cmp 	#0
.329f	f0 f2		beq $3293			beq 	_UGLoop
.32a1	a6 2a		ldx $2a				ldx 	temp0
.32a3	20 57 36	jsr $3657			jsr 	MInt32Set8Bit
.32a6	60		rts				rts
.32a7					UnaryGetString:
.32a7	20 8e 32	jsr $328e			jsr 	UnaryGet
.32aa					UGSDoChr:
.32aa	4c fb 32	jmp $32fb			jmp 	ChrCode
.32ad					UnaryInkeyString:
.32ad	20 7e 32	jsr $327e			jsr 	UnaryInkey
.32b0	b5 50		lda $50,x			lda 	esInt0,x
.32b2	d0 f6		bne $32aa			bne 	UGSDoChr
.32b4	8a		txa				txa
.32b5	a2 08		ldx #$08		ldx	#8
.32b7	20 f3 39	jsr $39f3		jsr	stringHandler
.32ba	aa		tax				tax
.32bb	60		rts				rts
.32bc					UnarySys:
.32bc	20 b0 2f	jsr $2fb0			jsr 	EvaluateInteger 				; get the address
.32bf	20 bb 36	jsr $36bb			jsr 	CheckRightParen
.32c2	20 a2 23	jsr $23a2			jsr 	TOSToTemp0 						; copy call address to temp0
.32c5	8a		txa				txa
.32c6	48		pha				pha
.32c7	98		tya				tya
.32c8	48		pha				pha
.32c9	ad 00 0a	lda $0a00			lda 	("A"-"A")*4+SingleLetterVar 	; load AXY
.32cc	ae 5c 0a	ldx $0a5c			ldx 	("X"-"A")*4+SingleLetterVar
.32cf	ac 60 0a	ldy $0a60			ldy 	("Y"-"A")*4+SingleLetterVar
.32d2	20 e1 32	jsr $32e1			jsr 	_CallTemp0
.32d5	85 32		sta $32				sta 	tempShort 						; restore YX
.32d7	68		pla				pla
.32d8	a8		tay				tay
.32d9	68		pla				pla
.32da	aa		tax				tax
.32db	a5 32		lda $32				lda 	tempShort
.32dd	20 57 36	jsr $3657			jsr 	MInt32Set8Bit 					; return result.
.32e0	60		rts				rts
.32e1					_CallTemp0:
.32e1	6c 2a 00	jmp ($002a)			jmp 	(temp0)
.32e4					UnaryMem:
.32e4	20 48 36	jsr $3648			jsr 	MInt32False 					; set to false (e.g. 0)
.32e7	38		sec				sec
.32e8	a5 33		lda $33				lda 	highMemory 						; calculate value
.32ea	e5 35		sbc $35				sbc 	lowMemory
.32ec	95 50		sta $50,x			sta 	esInt0,x
.32ee	a5 34		lda $34				lda 	highMemory+1
.32f0	e5 36		sbc $36				sbc 	lowMemory+1
.32f2	95 58		sta $58,x			sta 	esInt1,x
.32f4	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary/unarystr.asm

.32f5					ExecChr:
.32f5	20 b8 2f	jsr $2fb8			jsr 	EvaluateSmallInteger		; character number 0-255
.32f8	20 bb 36	jsr $36bb			jsr 	CheckRightParen				; right bracket
.32fb					ChrCode:
.32fb	98		tya				tya
.32fc	48		pha				pha
.32fd	8a		txa				txa 								; A = stack
.32fe	b4 50		ldy $50,x			ldy 	esInt0,x					; Y = character
.3300	a2 02		ldx #$02		ldx	#2
.3302	20 f3 39	jsr $39f3		jsr	stringHandler
.3305	aa		tax				tax 								; X = stack
.3306	68		pla				pla
.3307	a8		tay				tay
.3308	60		rts				rts
.3309					ExecLower:
.3309	38		sec				sec 								; set carry is lower
.330a	b0 01		bcs $330d			bcs 	ExecUpperLower
.330c					ExecUpper:
.330c	18		clc				clc 								; clear carry is upper
.330d					ExecUpperLower:
.330d	08		php				php 								; save carry
.330e	20 a5 2f	jsr $2fa5			jsr 	EvaluateString 				; string to stack,X
.3311	20 bb 36	jsr $36bb			jsr 	CheckRightParen 			; check closing right bracket.
.3314	28		plp				plp 								; restore carry, save Y
.3315	98		tya				tya
.3316	48		pha				pha
.3317	a9 00		lda #$00			lda 	#0 							; A zero if upper, 1 if lower.
.3319	2a		rol a				rol 	a
.331a	a8		tay				tay 								; now in Y
.331b	8a		txa				txa 								; do the substring and exit.
.331c	a2 0c		ldx #$0c		ldx	#12
.331e	20 f3 39	jsr $39f3		jsr	stringHandler
.3321	aa		tax				tax
.3322	68		pla				pla
.3323	a8		tay				tay
.3324	60		rts				rts
.3325					ExecLeft:
.3325	20 a5 2f	jsr $2fa5			jsr 	EvaluateString 				; string to stack,X
.3328	20 c8 36	jsr $36c8			jsr 	CheckComma
.332b	e8		inx				inx
.332c	a9 01		lda #$01			lda 	#1 							; 1 for 2nd parameter.
.332e	20 57 36	jsr $3657			jsr 	MInt32Set8Bit
.3331	e8		inx				inx
.3332	20 b8 2f	jsr $2fb8			jsr 	EvaluateSmallInteger 		; smallint 3rd parameter
.3335					ExecSubstring:
.3335	ca		dex				dex 								; fix up X
.3336	ca		dex				dex
.3337	20 bb 36	jsr $36bb			jsr 	CheckRightParen 			; check closing right bracket.
.333a	8a		txa				txa 								; do the substring and exit.
.333b	a2 0e		ldx #$0e		ldx	#14
.333d	20 f3 39	jsr $39f3		jsr	stringHandler
.3340	aa		tax				tax
.3341	60		rts				rts
.3342					ExecMid:
.3342	20 a5 2f	jsr $2fa5			jsr 	EvaluateString 				; string to stack,X
.3345	20 c8 36	jsr $36c8			jsr 	CheckComma
.3348	e8		inx				inx
.3349	20 b8 2f	jsr $2fb8			jsr 	EvaluateSmallInteger 		; smallint 2nd parameter
.334c	c9 00		cmp #$00			cmp 	#0
.334e	f0 15		beq $3365			beq 	_EMValue
.3350	e8		inx				inx
.3351	a9 ff		lda #$ff			lda 	#255 						; 255 default for 3nd parameter - this is optional.
.3353	20 57 36	jsr $3657			jsr 	MInt32Set8Bit
.3356	b1 28		lda ($28),y			lda 	(codePtr),y 				; is there a ) next
.3358	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN 				; if so, just MID$(a$,2)
.335a	f0 d9		beq $3335			beq 	ExecSubString
.335c	20 c8 36	jsr $36c8			jsr 	CheckComma
.335f	20 b8 2f	jsr $2fb8			jsr 	EvaluateSmallInteger 		; smallint 2nd parameter
.3362	4c 35 33	jmp $3335			jmp 	ExecSubString
.3365					_EMValue:
.3365	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.3367	20 18 15	jsr $1518		jsr	errorHandler
.336a					ExecRight:
.336a	20 a5 2f	jsr $2fa5			jsr 	EvaluateString 				; string to stack,X
.336d	20 c8 36	jsr $36c8			jsr 	CheckComma
.3370	e8		inx				inx
.3371	20 b8 2f	jsr $2fb8			jsr 	EvaluateSmallInteger 		; smallint 2nd parameter.
.3374	ca		dex				dex
.3375	98		tya				tya
.3376	48		pha				pha
.3377	b5 50		lda $50,x			lda 	esInt0,x 					; copy address of string to temp0
.3379	85 2a		sta $2a				sta 	temp0
.337b	b5 58		lda $58,x			lda 	esInt1,x
.337d	85 2b		sta $2b				sta 	temp0+1
.337f	a0 00		ldy #$00			ldy 	#0 							; point to length
.3381	b1 2a		lda ($2a),y			lda 	(temp0),y 					; get the length.
.3383	18		clc				clc 								; add 1.
.3384	69 01		adc #$01			adc 	#1
.3386	38		sec				sec
.3387	f5 51		sbc $51,x			sbc 	esInt0+1,x  				; subtract right count.
.3389	f0 02		beq $338d			beq		_ERMake1 					; if zero, make it 1.
.338b	b0 02		bcs $338f			bcs		_EROkay
.338d					_ERMake1:
.338d	a9 01		lda #$01			lda 	#1 							; start position.
.338f					_EROkay:
.338f	e8		inx				inx 								; set start pos.
.3390	95 50		sta $50,x			sta 	esInt0,x
.3392	e8		inx				inx
.3393	a9 ff		lda #$ff			lda 	#255 						; 255 default for 3nd parameter.
.3395	20 57 36	jsr $3657			jsr 	MInt32Set8Bit
.3398	68		pla				pla
.3399	a8		tay				tay
.339a	4c 35 33	jmp $3335			jmp 	ExecSubString 				; do the substring code.

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32binary.asm

.339d					MInt32And:
.339d	b5 50		lda $50,x			lda 	esInt0,x
.339f	35 51		and $51,x			and 	esInt0+1,x
.33a1	95 50		sta $50,x			sta 	esInt0,x
.33a3	b5 58		lda $58,x			lda 	esInt1,x
.33a5	35 59		and $59,x			and 	esInt1+1,x
.33a7	95 58		sta $58,x			sta 	esInt1,x
.33a9	b5 60		lda $60,x			lda 	esInt2,x
.33ab	35 61		and $61,x			and 	esInt2+1,x
.33ad	95 60		sta $60,x			sta 	esInt2,x
.33af	b5 68		lda $68,x			lda 	esInt3,x
.33b1	35 69		and $69,x			and 	esInt3+1,x
.33b3	95 68		sta $68,x			sta 	esInt3,x
.33b5	60		rts				rts
.33b6					MInt32Or:
.33b6	b5 50		lda $50,x			lda 	esInt0,x
.33b8	15 51		ora $51,x			ora 	esInt0+1,x
.33ba	95 50		sta $50,x			sta 	esInt0,x
.33bc	b5 58		lda $58,x			lda 	esInt1,x
.33be	15 59		ora $59,x			ora 	esInt1+1,x
.33c0	95 58		sta $58,x			sta 	esInt1,x
.33c2	b5 60		lda $60,x			lda 	esInt2,x
.33c4	15 61		ora $61,x			ora 	esInt2+1,x
.33c6	95 60		sta $60,x			sta 	esInt2,x
.33c8	b5 68		lda $68,x			lda 	esInt3,x
.33ca	15 69		ora $69,x			ora 	esInt3+1,x
.33cc	95 68		sta $68,x			sta 	esInt3,x
.33ce	60		rts				rts
.33cf					MInt32Xor:
.33cf	b5 50		lda $50,x			lda 	esInt0,x
.33d1	55 51		eor $51,x			eor 	esInt0+1,x
.33d3	95 50		sta $50,x			sta 	esInt0,x
.33d5	b5 58		lda $58,x			lda 	esInt1,x
.33d7	55 59		eor $59,x			eor 	esInt1+1,x
.33d9	95 58		sta $58,x			sta 	esInt1,x
.33db	b5 60		lda $60,x			lda 	esInt2,x
.33dd	55 61		eor $61,x			eor 	esInt2+1,x
.33df	95 60		sta $60,x			sta 	esInt2,x
.33e1	b5 68		lda $68,x			lda 	esInt3,x
.33e3	55 69		eor $69,x			eor 	esInt3+1,x
.33e5	95 68		sta $68,x			sta 	esInt3,x
.33e7	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32compare.asm

.33e8					MInt32Compare:
.33e8	b5 50		lda $50,x			lda 	esInt0,x 					; equality check first.
.33ea	d5 51		cmp $51,x			cmp 	esInt0+1,x
.33ec	d0 13		bne $3401			bne 	MInt32Compare2
.33ee	b5 58		lda $58,x			lda 	esInt1,x
.33f0	d5 59		cmp $59,x			cmp 	esInt1+1,x
.33f2	d0 0d		bne $3401			bne 	MInt32Compare2
.33f4	b5 60		lda $60,x			lda 	esInt2,x
.33f6	d5 61		cmp $61,x			cmp 	esInt2+1,x
.33f8	d0 07		bne $3401			bne 	MInt32Compare2
.33fa	b5 68		lda $68,x			lda 	esInt3,x
.33fc	55 69		eor $69,x			eor 	esInt3+1,x 					; EOR will return 0 if the same.
.33fe	d0 01		bne $3401			bne 	MInt32Compare2
.3400	60		rts				rts
.3401					MInt32Compare2:
.3401	b5 50		lda $50,x			lda		esInt0,x 					; unsigned 32 bit comparison.
.3403	d5 51		cmp $51,x			cmp 	esInt0+1,x
.3405	b5 58		lda $58,x			lda		esInt1,x
.3407	f5 59		sbc $59,x			sbc 	esInt1+1,x
.3409	b5 60		lda $60,x			lda		esInt2,x
.340b	f5 61		sbc $61,x			sbc 	esInt2+1,x
.340d	b5 68		lda $68,x			lda		esInt3,x
.340f	f5 69		sbc $69,x			sbc 	esInt3+1,x
.3411	50 02		bvc $3415			bvc 	_I32LNoOverflow 			; make it signed 32 bit comparison
.3413	49 80		eor #$80			eor 	#$80
.3415					_I32LNoOverflow
.3415	30 03		bmi $341a			bmi 	MInt32CLess					; if -ve then return $FF
.3417	a9 01		lda #$01			lda 	#$01						; else return $01
.3419	60		rts				rts
.341a					MInt32CLess:
.341a	a9 ff		lda #$ff			lda 	#$FF
.341c	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32divide.asm

.341d					MInt32SDivide:
.341d	98		tya				tya  								; save Y, which is the count of negations
.341e	48		pha				pha
.341f	a0 00		ldy #$00			ldy 	#0 							; zero count
.3421	20 39 34	jsr $3439			jsr 	_MInt32SRemSign 			; unsign TOS
.3424	e8		inx				inx 								; unsign TOS+1
.3425	20 39 34	jsr $3439			jsr 	_MInt32SRemSign
.3428	ca		dex				dex
.3429	98		tya				tya 								; save sign count on stack
.342a	48		pha				pha
.342b	20 42 34	jsr $3442			jsr 	MInt32UDivide 				; unsigned division
.342e	68		pla				pla 								; get sign count back
.342f	29 01		and #$01			and 	#1 							; if it is odd, then negate result
.3431	f0 03		beq $3436			beq 	_I32SNoNeg
.3433	20 02 36	jsr $3602			jsr 	MInt32Negate
.3436					_I32SNoNeg:
.3436	68		pla				pla 								; restoe Y and exit
.3437	a8		tay				tay
.3438	60		rts				rts
.3439					_MInt32SRemSign:
.3439	b5 68		lda $68,x			lda 	esInt3,x 					; is it -ve
.343b	10 04		bpl $3441			bpl 	_MInt32SRSExit
.343d	c8		iny				iny 								; increment the sign count
.343e	20 02 36	jsr $3602			jsr 	MInt32Negate 				; negate the value.
.3441					_MInt32SRSExit:
.3441	60		rts				rts
.3442					MInt32UDivide:
.3442	b5 51		lda $51,x			lda 	esInt0+1,x 					; check for division by zero
.3444	15 59		ora $59,x			ora 	esInt1+1,x
.3446	15 5a		ora $5a,x			ora 	esInt1+2,x
.3448	15 5b		ora $5b,x			ora 	esInt1+3,x
.344a	f0 4a		beq $3496			beq 	_MInt32DZero
.344c	e8		inx				inx 								; clear A
.344d	e8		inx				inx
.344e	20 48 36	jsr $3648			jsr 	MInt32False
.3451	ca		dex				dex
.3452	ca		dex				dex
.3453	98		tya				tya 								; save Y on the stack
.3454	48		pha				pha
.3455	a0 20		ldy #$20			ldy 	#32 						; number of division passes
.3457					_MInt32UDLoop:
.3457	16 50		asl $50,x			asl 	esInt0,x					; shift QA left. First Q
.3459	36 58		rol $58,x			rol 	esInt1,x
.345b	36 60		rol $60,x			rol 	esInt2,x
.345d	36 68		rol $68,x			rol 	esInt3,x
.345f	36 52		rol $52,x			rol 	esInt0+2,x 					; then A.
.3461	36 5a		rol $5a,x			rol 	esInt1+2,x
.3463	36 62		rol $62,x			rol 	esInt2+2,x
.3465	36 6a		rol $6a,x			rol 	esInt3+2,x
.3467	38		sec				sec 								; calculate A-M saving result on the stack
.3468	b5 52		lda $52,x			lda 	esInt0+2,x
.346a	f5 51		sbc $51,x			sbc 	esInt0+1,x
.346c	48		pha				pha
.346d	b5 5a		lda $5a,x			lda 	esInt1+2,x
.346f	f5 59		sbc $59,x			sbc 	esInt1+1,x
.3471	48		pha				pha
.3472	b5 62		lda $62,x			lda 	esInt2+2,x
.3474	f5 61		sbc $61,x			sbc 	esInt2+1,x
.3476	48		pha				pha
.3477	b5 6a		lda $6a,x			lda 	esInt3+2,x
.3479	f5 69		sbc $69,x			sbc 	esInt3+1,x
.347b	90 10		bcc $348d			bcc		_MInt32NoSubtract 			; if A < M (e.g. carry clear) then reject this.
.347d	95 6a		sta $6a,x			sta 	esInt3+2,x 					; write result back to A
.347f	68		pla				pla
.3480	95 62		sta $62,x			sta 	esInt2+2,x
.3482	68		pla				pla
.3483	95 5a		sta $5a,x			sta 	esInt1+2,x
.3485	68		pla				pla
.3486	95 52		sta $52,x			sta 	esInt0+2,x
.3488	f6 50		inc $50,x			inc 	esInt0,x 					; sets bit 0 of Q - it was shifted left previously.
.348a	4c 90 34	jmp $3490			jmp 	_MInt32Next 					; do the next iteration
.348d					_MInt32NoSubtract:
.348d	68		pla				pla
.348e	68		pla				pla
.348f	68		pla				pla
.3490					_MInt32Next:
.3490	88		dey				dey 								; do this 32 times.
.3491	d0 c4		bne $3457			bne 	_MInt32UDLoop
.3493	68		pla				pla 								; restore Y and exit
.3494	a8		tay				tay
.3495	60		rts				rts
.3496					_MInt32DZero:
.3496	a2 05		ldx #$05			ldx 	#ErrorID_DivZero
.3498	20 18 15	jsr $1518		jsr	errorHandler
.349b					MInt32Modulus:
.349b	20 42 34	jsr $3442			jsr 	MInt32UDivide 				; do the division.
.349e	b5 6a		lda $6a,x			lda 	esInt3+2,x 					; copy 2nd on stack (the remainder) to the top.
.34a0	95 68		sta $68,x			sta 	esInt3,x
.34a2	b5 62		lda $62,x			lda 	esInt2+2,x
.34a4	95 60		sta $60,x			sta 	esInt2,x
.34a6	b5 5a		lda $5a,x			lda 	esInt1+2,x
.34a8	95 58		sta $58,x			sta 	esInt1,x
.34aa	b5 52		lda $52,x			lda 	esInt0+2,x
.34ac	95 50		sta $50,x			sta 	esInt0,x
.34ae	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32fromstr.asm

.0cdd					fs32Length:
>0cdd							.fill 	1
.34af					LinkInt32FromString:
.34af	aa		tax				tax
.34b0	98		tya				tya
.34b1	20 b6 34	jsr $34b6			jsr 	MInt32FromString
.34b4	8a		txa				txa
.34b5	60		rts				rts
.34b6					MInt32FromString:
.34b6	85 32		sta $32				sta 	tempShort 					; save base
.34b8	98		tya				tya
.34b9	48		pha				pha
.34ba	a0 00		ldy #$00			ldy 	#0 							; get length of string to convert
.34bc	b1 2a		lda ($2a),y			lda 	(temp0),y
.34be	8d dd 0c	sta $0cdd			sta 	fs32Length
.34c1	f0 65		beq $3528			beq 	_I32FSFail2					; fail if length zero.
.34c3	a0 01		ldy #$01			ldy 	#1 							; set index into string being read
.34c5	b1 2a		lda ($2a),y			lda 	(temp0),y 					; look at first character
.34c7	c9 2d		cmp #$2d			cmp 	#"-"						; is it a - character
.34c9	d0 09		bne $34d4			bne 	_I32FSNotNegative
.34cb	ad dd 0c	lda $0cdd			lda 	fs32Length 					; get length back.
.34ce	c9 01		cmp #$01			cmp 	#1 							; if 1 it is just a - on its own so fail.
.34d0	f0 56		beq $3528			beq 	_I32FSFail2
.34d2	a0 02		ldy #$02			ldy 	#2 							; first digit of the number.
.34d4					_I32FSNotNegative:
.34d4	a5 32		lda $32				lda 	tempShort 					; get the base back.
.34d6	c0 02		cpy #$02			cpy 	#2 							; if we read a -ve (e.g. Y == 2)
.34d8	d0 02		bne $34dc			bne 	_I32FSNN2
.34da	09 80		ora #$80			ora 	#$80						; set bit 7, this indicates a negated result.
.34dc					_I32FSNN2:
.34dc	48		pha				pha 								; save base + final sign on stack.
.34dd	20 48 36	jsr $3648			jsr 	MInt32False 				; zero the return value.
.34e0					_I32FSMainLoop:
.34e0	68		pla				pla 								; get the base back into tempShort
.34e1	48		pha				pha
.34e2	29 7f		and #$7f			and 	#$7F
.34e4	85 32		sta $32				sta 	tempShort
.34e6	b1 2a		lda ($2a),y			lda 	(temp0),y 					; look at next character.
.34e8	c9 61		cmp #$61			cmp 	#"a" 						; fix up case.
.34ea	90 02		bcc $34ee			bcc 	_I32FSNotLC
.34ec	e9 20		sbc #$20			sbc 	#32
.34ee					_I32FSNotLC:
.34ee	38		sec				sec 								; subtract 48 (ASCII "0") - ASCII to Hex conversion
.34ef	e9 30		sbc #$30			sbc 	#"0"
.34f1	90 34		bcc $3527			bcc 	_I32FSFail 					; nothing more to do.
.34f3	c9 0a		cmp #$0a			cmp 	#9+1 						; if it is 0-9 validate vs base.
.34f5	90 06		bcc $34fd			bcc 	_I32FSValidate
.34f7	c9 11		cmp #$11			cmp 	#17 						; is it between 58 and 64 ? if so bad.
.34f9	90 2c		bcc $3527			bcc 	_I32FSFail
.34fb	e9 07		sbc #$07			sbc 	#7 							; adjust into range so now character is 0->nnn
.34fd					_I32FSValidate:
.34fd	c5 32		cmp $32				cmp 	tempShort 					; compare against the base.
.34ff	b0 26		bcs $3527			bcs 	_I32FSFail 					; sorry, too large for this base, so fail.
.3501	48		pha				pha 								; save the new digit value.
.3502	e8		inx				inx 								; put base into next slot up on stack
.3503	a5 32		lda $32				lda 	tempShort
.3505	20 57 36	jsr $3657			jsr 	MInt32Set8Bit
.3508	ca		dex				dex
.3509	20 60 35	jsr $3560			jsr 	MInt32Multiply 				; multiply current by the base
.350c	e8		inx				inx
.350d	68		pla				pla  								; put additive into next slot
.350e	20 57 36	jsr $3657			jsr 	MInt32Set8Bit
.3511	ca		dex				dex
.3512	20 2c 35	jsr $352c			jsr 	MInt32Add 					; and add it
.3515	c8		iny				iny 								; bump the character pointer
.3516	cc dd 0c	cpy $0cdd			cpy 	fs32Length 					; until > length.
.3519	f0 c5		beq $34e0			beq 	_I32FSMainLoop
.351b	90 c3		bcc $34e0			bcc 	_I32FSMainLoop
.351d					_I32FSDone:
.351d	68		pla				pla 								; get base/final sign back
.351e	10 03		bpl $3523			bpl 	_I32FSNN3
.3520	20 02 36	jsr $3602			jsr 	MInt32Negate 				; negate the result.
.3523					_I32FSNN3:
.3523	68		pla				pla
.3524	a8		tay				tay
.3525	38		sec				sec
.3526	60		rts				rts
.3527					_I32FSFail:
.3527	68		pla				pla
.3528					_I32FSFail2:
.3528	68		pla				pla
.3529	a8		tay				tay
.352a	18		clc				clc
.352b	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32math.asm

.352c					MInt32Add:
.352c	18		clc				clc
.352d	b5 50		lda $50,x			lda 	esInt0,x
.352f	75 51		adc $51,x			adc 	esInt0+1,x
.3531	95 50		sta $50,x			sta 	esInt0,x
.3533	b5 58		lda $58,x			lda 	esInt1,x
.3535	75 59		adc $59,x			adc 	esInt1+1,x
.3537	95 58		sta $58,x			sta 	esInt1,x
.3539	b5 60		lda $60,x			lda 	esInt2,x
.353b	75 61		adc $61,x			adc 	esInt2+1,x
.353d	95 60		sta $60,x			sta 	esInt2,x
.353f	b5 68		lda $68,x			lda 	esInt3,x
.3541	75 69		adc $69,x			adc 	esInt3+1,x
.3543	95 68		sta $68,x			sta 	esInt3,x
.3545	60		rts				rts
.3546					MInt32Sub:
.3546	38		sec				sec
.3547	b5 50		lda $50,x			lda 	esInt0,x
.3549	f5 51		sbc $51,x			sbc 	esInt0+1,x
.354b	95 50		sta $50,x			sta 	esInt0,x
.354d	b5 58		lda $58,x			lda 	esInt1,x
.354f	f5 59		sbc $59,x			sbc 	esInt1+1,x
.3551	95 58		sta $58,x			sta 	esInt1,x
.3553	b5 60		lda $60,x			lda 	esInt2,x
.3555	f5 61		sbc $61,x			sbc 	esInt2+1,x
.3557	95 60		sta $60,x			sta 	esInt2,x
.3559	b5 68		lda $68,x			lda 	esInt3,x
.355b	f5 69		sbc $69,x			sbc 	esInt3+1,x
.355d	95 68		sta $68,x			sta 	esInt3,x
.355f	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32multiply.asm

.3560					MInt32Multiply:
.3560	e8		inx				inx 								; copy 2nd -> 3rd
.3561	20 86 35	jsr $3586			jsr 	MInt32CopyUp
.3564	ca		dex				dex
.3565	20 86 35	jsr $3586			jsr 	MInt32CopyUp 				; copy 1st -> 2nd
.3568	20 48 36	jsr $3648			jsr 	MInt32False 				; zero 1st.
.356b					_I32Loop:
.356b	b5 52		lda $52,x			lda 	esInt0+2,x 					; get low bit of 3rd
.356d	29 01		and #$01			and 	#1
.356f	f0 03		beq $3574			beq 	_I32NoAdd 					; if set
.3571	20 2c 35	jsr $352c			jsr 	MInt32Add 					; add 2nd to 1st.
.3574					_I32NoAdd:
.3574	e8		inx				inx 								; shift 2nd left
.3575	20 5d 36	jsr $365d			jsr 	MInt32ShiftLeft
.3578	e8		inx				inx  								; shift 3rd right
.3579	20 66 36	jsr $3666			jsr 	MInt32ShiftRight
.357c	20 6f 36	jsr $366f			jsr 	MInt32Zero 					; check if zero.
.357f	08		php				php 								; save status bits
.3580	ca		dex				dex 	 							; point back to 1st
.3581	ca		dex				dex
.3582	28		plp				plp 								; get status bits
.3583	d0 e6		bne $356b			bne 	_I32Loop 					; if non-zero keep going.
.3585	60		rts				rts
.3586					MInt32CopyUp:
.3586	b5 50		lda $50,x			lda 	esInt0,x
.3588	95 51		sta $51,x			sta 	esInt0+1,x
.358a	b5 58		lda $58,x			lda 	esInt1,x
.358c	95 59		sta $59,x			sta 	esInt1+1,x
.358e	b5 60		lda $60,x			lda 	esInt2,x
.3590	95 61		sta $61,x			sta 	esInt2+1,x
.3592	b5 68		lda $68,x			lda 	esInt3,x
.3594	95 69		sta $69,x			sta 	esInt3+1,x
.3596	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32tostr.asm

>0cde					MCharCount:	.fill 	1						; count of converted characters
.3597					MLInt32ToString:
.3597	aa		tax				tax									; module passes stack in A, base in Y
.3598	98		tya				tya
.3599	20 9e 35	jsr $359e			jsr 	MInt32ToString
.359c	8a		txa				txa
.359d	60		rts				rts
.359e					MInt32ToString:
.359e	48		pha				pha 								; save base
.359f	85 32		sta $32				sta 	tempShort 					; save target base.
.35a1	a9 00		lda #$00			lda 	#0
.35a3	8d de 0c	sta $0cde			sta 	MCharCount 					; clear character count to 0
.35a6	98		tya				tya
.35a7	48		pha				pha
.35a8	a5 32		lda $32				lda 	tempShort 					; check if we are signed conversion
.35aa	10 10		bpl $35bc			bpl 	_I32TSUnsigned
.35ac	48		pha				pha 								; save base on stack.
.35ad	b5 68		lda $68,x			lda 	esInt3,x 					; is it actually negative
.35af	10 08		bpl $35b9			bpl 	_I32TSNoFlip
.35b1	a9 2d		lda #$2d			lda 	#"-" 						; write a '-' prefix out.
.35b3	20 ef 35	jsr $35ef			jsr 	MI32WriteCharacter
.35b6	20 02 36	jsr $3602			jsr 	MInt32Negate 				; negate the value, so now it's positive.
.35b9					_I32TSNoFlip:
.35b9	68		pla				pla 								; get the base back
.35ba	29 7f		and #$7f			and 	#$7F 						; clear the sign flag so it's just a base now.
.35bc					_I32TSUnsigned:
.35bc	20 ca 35	jsr $35ca			jsr 	MI32DivideWrite 			; recursive code to output string.
.35bf	a0 00		ldy #$00			ldy 	#0 							; write charcount to first character.
.35c1	ad de 0c	lda $0cde			lda 	MCharCount
.35c4	91 2a		sta ($2a),y			sta 	(temp0),y
.35c6	68		pla				pla
.35c7	a8		tay				tay
.35c8	68		pla				pla
.35c9	60		rts				rts
.35ca					MI32DivideWrite:
.35ca	48		pha				pha 								; save the divisor/base
.35cb	e8		inx				inx 								; write in the dividing position.
.35cc	20 57 36	jsr $3657			jsr 	MInt32Set8Bit
.35cf	ca		dex				dex
.35d0	20 42 34	jsr $3442			jsr 	MInt32UDivide 				; divide number by base.
.35d3	68		pla				pla 								; get the base into Y
.35d4	a8		tay				tay
.35d5	b5 52		lda $52,x			lda 	esInt0+2,x 					; get the remainder and push on the stack.
.35d7	48		pha				pha
.35d8	20 6f 36	jsr $366f			jsr 	MInt32Zero 					; is the result zero ?
.35db	f0 04		beq $35e1			beq 	_I32NoRecurse 				; if so, don't recurse.
.35dd	98		tya				tya 								; put base into A
.35de	20 ca 35	jsr $35ca			jsr 	MI32DivideWrite 				; and jsr the dividor recursively.
.35e1					_I32NoRecurse:
.35e1	68		pla				pla 								; get the remainder back
.35e2	c9 0a		cmp #$0a			cmp 	#10  						; handle hexadecimals, now converting to ASCII
.35e4	90 02		bcc $35e8			bcc 	_I32NotHex
.35e6	69 06		adc #$06			adc 	#7-1
.35e8					_I32NotHex:
.35e8	18		clc				clc 								; make it ASCII
.35e9	69 30		adc #$30			adc 	#48
.35eb	20 ef 35	jsr $35ef			jsr 	MI32WriteCharacter 			; write the character out
.35ee	60		rts				rts 								; and exit.
.35ef					MI32WriteCharacter:
.35ef	ee de 0c	inc $0cde			inc 	MCharCount 					; bump count (space for leading count)
.35f2	ac de 0c	ldy $0cde			ldy 	MCharCount 					; get position
.35f5	91 2a		sta ($2a),y			sta 	(temp0),y 					; write out with trailing 0
.35f7	c8		iny				iny
.35f8	a9 00		lda #$00			lda 	#0
.35fa	91 2a		sta ($2a),y			sta 	(temp0),y
.35fc	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32unary.asm

>0cdf					MSeed32:	.fill 	4							; random number seed.
.35fd					MInt32Absolute:
.35fd	b5 68		lda $68,x			lda 	esInt3,x 					; use negate code if -ve.
.35ff	30 01		bmi $3602			bmi 	MInt32Negate
.3601	60		rts				rts
.3602					MInt32Negate:
.3602	38		sec				sec 								; subtract from zero.
.3603	a9 00		lda #$00			lda 	#0
.3605	f5 50		sbc $50,x			sbc 	esInt0,x
.3607	95 50		sta $50,x			sta 	esInt0,x
.3609	a9 00		lda #$00			lda 	#0
.360b	f5 58		sbc $58,x			sbc 	esInt1,x
.360d	95 58		sta $58,x			sta 	esInt1,x
.360f	a9 00		lda #$00			lda 	#0
.3611	f5 60		sbc $60,x			sbc 	esInt2,x
.3613	95 60		sta $60,x			sta 	esInt2,x
.3615	a9 00		lda #$00			lda 	#0
.3617	f5 68		sbc $68,x			sbc 	esInt3,x
.3619	95 68		sta $68,x			sta 	esInt3,x
.361b	60		rts				rts
.361c					MInt32Not:
.361c	b5 50		lda $50,x			lda 	esInt0,x 					; one's complement all four.
.361e	49 ff		eor #$ff			eor 	#$FF
.3620	95 50		sta $50,x			sta 	esInt0,x
.3622	b5 58		lda $58,x			lda 	esInt1,x
.3624	49 ff		eor #$ff			eor 	#$FF
.3626	95 58		sta $58,x			sta 	esInt1,x
.3628	b5 60		lda $60,x			lda 	esInt2,x
.362a	49 ff		eor #$ff			eor 	#$FF
.362c	95 60		sta $60,x			sta 	esInt2,x
.362e	b5 68		lda $68,x			lda 	esInt3,x
.3630	49 ff		eor #$ff			eor 	#$FF
.3632	95 68		sta $68,x			sta 	esInt3,x
.3634	60		rts				rts
.3635					MInt32Sign:
.3635	b5 68		lda $68,x			lda 	esInt3,x					; look at MSB
.3637	30 0b		bmi $3644			bmi 	MInt32True 					; if set return -1 (true)
.3639	20 6f 36	jsr $366f			jsr 	MInt32Zero 					; is it zero ?
.363c	f0 0a		beq $3648			beq 	MInt32False 				; if zero return 0 (false)
.363e	20 48 36	jsr $3648			jsr 	MInt32False 				; > 0 return 1, by setting it to zero
.3641	f6 50		inc $50,x			inc 	esInt0,x  					; and bumping the LSB.
.3643	60		rts				rts
.3644					MInt32True:
.3644	a9 ff		lda #$ff			lda 	#$FF 						; set to $FFFFFFFF
.3646	d0 02		bne $364a			bne 	MInt32WriteAll
.3648					MInt32False:
.3648	a9 00		lda #$00			lda 	#0
.364a					MInt32WriteAll:
.364a	95 50		sta $50,x			sta 	esInt0,x
.364c					MInt32Write123:
.364c	95 58		sta $58,x			sta 	esInt1,x
.364e	95 60		sta $60,x			sta 	esInt2,x
.3650	95 68		sta $68,x			sta 	esInt3,x
.3652	a9 00		lda #$00			lda 	#$00						; and make it an integer
.3654	95 48		sta $48,x			sta 	esType,x
.3656	60		rts				rts
.3657					MInt32Set8Bit:
.3657	95 50		sta $50,x			sta 	esInt0,x 					; coopt above function to write
.3659	a9 00		lda #$00			lda 	#0 							; a value 0-255
.365b	f0 ef		beq $364c			beq		MInt32Write123
.365d					MInt32ShiftLeft:
.365d	16 50		asl $50,x			asl 	esInt0,x
.365f	36 58		rol $58,x			rol	 	esInt1,x
.3661	36 60		rol $60,x			rol	 	esInt2,x
.3663	36 68		rol $68,x			rol	 	esInt3,x
.3665	60		rts				rts
.3666					MInt32ShiftRight:
.3666	56 68		lsr $68,x			lsr 	esInt3,x
.3668	76 60		ror $60,x			ror 	esInt2,x
.366a	76 58		ror $58,x			ror 	esInt1,x
.366c	76 50		ror $50,x			ror 	esInt0,x
.366e	60		rts				rts
.366f					MInt32Zero:
.366f	b5 50		lda $50,x			lda 	esInt0,x
.3671	15 58		ora $58,x			ora 	esInt1,x
.3673	15 60		ora $60,x			ora 	esInt2,x
.3675	15 68		ora $68,x			ora 	esInt3,x
.3677	60		rts				rts
.3678					MInt32Random:
.3678	98		tya				tya
.3679	48		pha				pha
.367a	a0 07		ldy #$07			ldy 	#7 							; do it 7 times
.367c	ad df 0c	lda $0cdf			lda 	MSeed32+0 					; check the seed isn't zero
.367f	d0 03		bne $3684			bne 	_Random1
.3681	a8		tay				tay 								; if so do it 256 times
.3682	a9 aa		lda #$aa			lda		#$AA 						; and use this to seed the seed....
.3684					_Random1:
.3684	0a		asl a				asl 	a
.3685	2e e0 0c	rol $0ce0			rol 	MSeed32+1
.3688	2e e1 0c	rol $0ce1			rol 	MSeed32+2
.368b	2e e2 0c	rol $0ce2			rol 	MSeed32+3
.368e	90 02		bcc $3692			bcc 	_Random2
.3690	49 c5		eor #$c5			eor 	#$C5
.3692					_Random2:
.3692	88		dey				dey
.3693	d0 ef		bne $3684			bne 	_Random1
.3695	8d df 0c	sta $0cdf			sta 	MSeed32+0 					; copy the seed in.
.3698	95 50		sta $50,x			sta 	esInt0,x
.369a	ad e0 0c	lda $0ce0			lda 	MSeed32+1
.369d	95 58		sta $58,x			sta 	esInt1,x
.369f	ad e1 0c	lda $0ce1			lda 	MSeed32+2
.36a2	95 60		sta $60,x			sta 	esInt2,x
.36a4	ad e2 0c	lda $0ce2			lda 	MSeed32+3
.36a7	95 68		sta $68,x			sta 	esInt3,x
.36a9	68		pla				pla
.36aa	a8		tay				tay
.36ab	a9 00		lda #$00			lda 	#0
.36ad	95 48		sta $48,x			sta 	esType,x
.36af	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/utility/check.asm

.36b0					CheckToken:
.36b0	d1 28		cmp ($28),y			cmp 	(codePtr),y
.36b2	d0 02		bne $36b6			bne 	_CTError
.36b4	c8		iny				iny
.36b5	60		rts				rts
.36b6					_CTError:
.36b6	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.36b8	20 18 15	jsr $1518		jsr	errorHandler
.36bb					CheckRightParen:
.36bb	b1 28		lda ($28),y			lda 	(codePtr),y
.36bd	c8		iny				iny
.36be	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.36c0	d0 01		bne $36c3			bne 	_CRPError
.36c2	60		rts				rts
.36c3					_CRPError:
.36c3	a2 09		ldx #$09			ldx 	#ErrorID_MissingRP
.36c5	20 18 15	jsr $1518		jsr	errorHandler
.36c8					CheckComma:
.36c8	b1 28		lda ($28),y			lda 	(codePtr),y
.36ca	c8		iny				iny
.36cb	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.36cd	d0 01		bne $36d0			bne 	_CCError
.36cf	60		rts				rts
.36d0					_CCError:
.36d0	a2 0a		ldx #$0a			ldx 	#ErrorID_MissingComma
.36d2	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/utility/stack.asm

.0037					rsPointer:
>0037							.fill 	2							; to TOS, which is the current top-token.
.36d5					RSReset:
.36d5	a9 ff		lda #$ff			lda 	#(returnStack+retStackSize-1) & $FF
.36d7	85 37		sta $37				sta 	rsPointer
.36d9	a9 09		lda #$09			lda 	#(returnStack+retStackSize-1) >> 8
.36db	85 38		sta $38				sta 	1+(rsPointer)
.36dd	a9 ff		lda #$ff			lda 	#$FF 						; put a duff marker on TOS, so nothing will pop
.36df	8d ff 09	sta $09ff			sta 	returnStack+retStackSize-1
.36e2	60		rts				rts
.36e3					RSClaim:
.36e3	84 32		sty $32				sty 	tempShort 					; preserve Y
.36e5	48		pha				pha 								; save marker on stack.
.36e6	8a		txa				txa 								; get bytes required.
.36e7	38		sec				sec
.36e8	49 ff		eor #$ff			eor 	#$FF 						; add to rsPointer using 2's complement.
.36ea	65 37		adc $37				adc 	rsPointer
.36ec	85 37		sta $37				sta 	rsPointer
.36ee	a5 38		lda $38				lda 	rsPointer+1
.36f0	69 ff		adc #$ff			adc 	#$FF
.36f2	85 38		sta $38				sta 	rsPointer+1
.36f4	c9 08		cmp #$08			cmp 	#returnStack>>8 			; overflow. underflow actually :)
.36f6	90 08		bcc $3700			bcc 	_RSCOverflow
.36f8	68		pla				pla 								; get marker back
.36f9	a0 00		ldy #$00			ldy 	#0 							; write marker out.
.36fb	91 37		sta ($37),y			sta 	(rsPointer),y
.36fd	a4 32		ldy $32				ldy 	tempShort 					; restore Y and exit
.36ff	60		rts				rts
.3700					_RSCOverflow:
.3700	a2 16		ldx #$16			ldx 	#ErrorID_RetStack
.3702	20 18 15	jsr $1518		jsr	errorHandler
.3705					RSFree:
.3705	18		clc				clc
.3706	65 37		adc $37				adc 	rsPointer
.3708	85 37		sta $37				sta 	rsPointer
.370a	90 02		bcc $370e			bcc 	_RSFExit
.370c	e6 38		inc $38				inc 	rsPointer+1
.370e					_RSFExit:
.370e	60		rts				rts
.370f					RSSavePosition:
.370f	84 32		sty $32				sty 	tempShort 					; save Y position
.3711	a8		tay				tay 								; this is where we write it.
.3712	a5 28		lda $28				lda 	codePtr 					; write codePointer out
.3714	91 37		sta ($37),y			sta 	(rsPointer),y
.3716	c8		iny				iny
.3717	a5 29		lda $29				lda 	codePtr+1
.3719	91 37		sta ($37),y			sta 	(rsPointer),y
.371b	c8		iny				iny
.371c	a5 32		lda $32				lda 	tempShort 					; write the Y position out.
.371e	91 37		sta ($37),y			sta 	(rsPointer),y
.3720	a8		tay				tay 								; fix Y back again to original value
.3721	60		rts				rts
.3722					RSLoadPosition:
.3722	a8		tay				tay
.3723	b1 37		lda ($37),y			lda 	(rsPointer),y 				; read codePointer back
.3725	85 28		sta $28				sta 	codePtr
.3727	c8		iny				iny
.3728	b1 37		lda ($37),y			lda 	(rsPointer),y
.372a	85 29		sta $29				sta 	codePtr+1
.372c	c8		iny				iny
.372d	b1 37		lda ($37),y			lda 	(rsPointer),y 				; and the offset
.372f	a8		tay				tay 								; to Y
.3730	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/utility/warmstart.asm

.3731					WarmStart:
.3731	a2 04		ldx #$04		ldx	#4
.3733	20 9c 20	jsr $209c		jsr	interactionHandler

;******  Return to file: main/main.asm

.3736					mainHandler:
.3736	7c 39 37	jmp ($3739,x)			jmp 	(mainVectors,x)
.3739					mainVectors:
>3739	55 37					.word _DummyControlHandler ; index 0
>373b	c8 36					.word CheckComma           ; index 2
>373d	bb 36					.word CheckRightParen      ; index 4
>373f	a4 28					.word XCommandClear        ; index 6
>3741	cb 2f					.word LinkEvaluate         ; index 8
>3743	d7 2f					.word LinkEvaluateInteger  ; index 10
>3745	e3 2f					.word LinkEvaluateSmallInt ; index 12
>3747	dd 2f					.word LinkEvaluateString   ; index 14
>3749	d1 2f					.word LinkEvaluateTerm     ; index 16
>374b	97 35					.word MLInt32ToString      ; index 18
>374d	33 2a					.word Command_XNew         ; index 20
>374f	41 2a					.word XCommand_Run         ; index 22
>3751	4d 2a					.word Command_RunFrom      ; index 24
>3753	af 34					.word LinkInt32FromString  ; index 26
.3755					_DummyControlHandler:
.3755	60		rts			rts

;******  Return to file: basic.asm

.3756					section_end_main:
.3756					section_start_string:

;******  Processing file: string/string.asm


;******  Processing file: string/functions/chr.asm

.3756					StringChrs:
.3756	aa		tax				tax 								; set up stack
.3757	a9 02		lda #$02			lda 	#2
.3759	20 19 38	jsr $3819			jsr 	AllocateSoftString
.375c	98		tya				tya
.375d	20 3f 38	jsr $383f			jsr 	WriteSoftString
.3760					StringUpdate:
.3760	20 6e 37	jsr $376e			jsr 	ReturnSoftString
.3763	8a		txa				txa
.3764	60		rts				rts
.3765					StringNull:
.3765	aa		tax				tax
.3766	a9 01		lda #$01			lda 	#1
.3768	20 19 38	jsr $3819			jsr 	AllocateSoftString
.376b	4c 60 37	jmp $3760			jmp 	StringUpdate
.376e					ReturnSoftString:
.376e	a5 39		lda $39				lda 	softMemAlloc 				; copy address
.3770	95 50		sta $50,x			sta 	esInt0,x
.3772	a5 3a		lda $3a				lda 	softMemAlloc+1
.3774	95 58		sta $58,x			sta 	esInt1,x
.3776	a9 00		lda #$00			lda 	#0 							; zero upper bytes
.3778	95 60		sta $60,x			sta 	esInt2,x
.377a	95 68		sta $68,x			sta 	esInt3,x
.377c	a9 40		lda #$40			lda 	#$40 						; type string.
.377e	95 48		sta $48,x			sta 	esType,x
.3780	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/functions/compare.asm

.3781					STRCompare:
.3781	48		pha				pha 								; save A
.3782	aa		tax				tax 								; put stack pos in X
.3783	98		tya				tya
.3784	48		pha				pha
.3785	20 b9 37	jsr $37b9			jsr 	CopyStringPair 				; copy strings to temp0,temp1
.3788	a0 00		ldy #$00			ldy 	#0 							; get the smaller of the two string sizes.
.378a	b1 2a		lda ($2a),y			lda 	(temp0),y
.378c	d1 2c		cmp ($2c),y			cmp 	(temp1),y
.378e	90 02		bcc $3792			bcc 	_SCNotSmaller
.3790	b1 2c		lda ($2c),y			lda 	(temp1),y
.3792					_SCNotSmaller:
.3792	aa		tax				tax 								; put that in X. We compare this many chars first.
.3793					_SCCompareLoop:
.3793	e0 00		cpx #$00			cpx 	#0 							; if compared all the smaller, then it is the shorter
.3795	f0 0c		beq $37a3			beq 	_SCSameToEndShortest 		; one that is the smallest if they are different lengths.
.3797	ca		dex				dex 								; decrement chars to compare.
.3798	c8		iny				iny 								; move to next character
.3799	38		sec				sec 								; calculate s1[y]-s2[y]
.379a	b1 2a		lda ($2a),y			lda 	(temp0),y
.379c	f1 2c		sbc ($2c),y			sbc 	(temp1),y
.379e	d0 0a		bne $37aa			bne 	_SCReturnResult 			; if different return sign of A
.37a0	4c 93 37	jmp $3793			jmp 	_SCCompareLoop
.37a3					_SCSameToEndShortest
.37a3	a0 00		ldy #$00			ldy 	#0 							; compare len(s1) - len(s2)
.37a5	38		sec				sec
.37a6	b1 2a		lda ($2a),y			lda 	(temp0),y
.37a8	f1 2c		sbc ($2c),y			sbc 	(temp1),y
.37aa					_SCReturnResult:
.37aa	08		php				php 								; set return to zero preserving PSW.
.37ab	a2 00		ldx #$00			ldx 	#0
.37ad	28		plp				plp
.37ae	f0 05		beq $37b5			beq 	_SCExit 					; two values equal, then exit
.37b0	ca		dex				dex 								; X = $FF
.37b1	90 02		bcc $37b5			bcc 	_SCExit 					; if 1st < 2nd then -1
.37b3	a2 01		ldx #$01			ldx 	#1 							; X = $01 if greater
.37b5					_SCExit:
.37b5	68		pla				pla
.37b6	a8		tay				tay
.37b7	68		pla				pla
.37b8	60		rts				rts
.37b9					CopyStringPair:
.37b9	b5 51		lda $51,x			lda 	esInt0+1,x
.37bb	85 2c		sta $2c				sta 	temp1
.37bd	b5 59		lda $59,x			lda 	esInt1+1,x
.37bf	85 2d		sta $2d				sta 	temp1+1
.37c1					CopyStringTop:
.37c1	b5 50		lda $50,x			lda 	esInt0,x
.37c3	85 2a		sta $2a				sta 	temp0
.37c5	b5 58		lda $58,x			lda 	esInt1,x
.37c7	85 2b		sta $2b				sta 	temp0+1
.37c9	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/functions/concat.asm

.37ca					StringConcat:
.37ca	aa		tax				tax									; stack pos in X
.37cb	98		tya				tya
.37cc	48		pha				pha
.37cd	20 b9 37	jsr $37b9			jsr 	CopyStringPair 				; temp0 and temp1 point to strings to concat.
.37d0	38		sec				sec 								; calculate alloc strings. lengths added + 1 for size.
.37d1	a0 00		ldy #$00			ldy 	#0
.37d3	b1 2a		lda ($2a),y			lda 	(temp0),y
.37d5	71 2c		adc ($2c),y			adc 	(temp1),y
.37d7	b0 1c		bcs $37f5			bcs 	_SCError 					; just too many characters here.
.37d9	c9 fc		cmp #$fc			cmp 	#MaxStringSize
.37db	b0 18		bcs $37f5			bcs 	_SCError
.37dd	20 19 38	jsr $3819			jsr 	AllocateSoftString 			; allocate soft string memory, set pointer.
.37e0	20 10 38	jsr $3810			jsr 	CopySoftToStack 			; copy that to the stack.
.37e3	20 fa 37	jsr $37fa			jsr 	SCCopyTemp0 				; copy temp0
.37e6	a5 2c		lda $2c				lda 	temp1 						; copy temp1 to temp0
.37e8	85 2a		sta $2a				sta 	temp0
.37ea	a5 2d		lda $2d				lda 	temp1+1
.37ec	85 2b		sta $2b				sta 	temp0+1
.37ee	20 fa 37	jsr $37fa			jsr 	SCCopyTemp0 				; copy temp0 e.g. what was temp1.
.37f1	68		pla				pla
.37f2	a8		tay				tay
.37f3	8a		txa				txa 								; and A
.37f4	60		rts				rts
.37f5					_SCError:
.37f5	a2 0d		ldx #$0d			ldx 	#ErrorID_StrLen
.37f7	20 18 15	jsr $1518		jsr	errorHandler
.37fa					SCCopyTemp0:
.37fa	a0 00		ldy #$00			ldy 	#0 							; put count in temp2
.37fc	b1 2a		lda ($2a),y			lda 	(temp0),y
.37fe	85 2e		sta $2e				sta 	temp2
.3800					_SCCopyLoop:
.3800	a5 2e		lda $2e				lda 	temp2 						; done the lot
.3802	f0 0b		beq $380f			beq 	_SCCopyExit
.3804	c6 2e		dec $2e				dec 	temp2
.3806	c8		iny				iny 								; get next char
.3807	b1 2a		lda ($2a),y			lda 	(temp0),y
.3809	20 3f 38	jsr $383f			jsr 	WriteSoftString 			; write to soft string.
.380c	4c 00 38	jmp $3800			jmp 	_SCCopyLoop
.380f					_SCCopyExit:
.380f	60		rts				rts
.3810					CopySoftToStack:
.3810	a5 39		lda $39				lda 	SoftMemAlloc 				; copy the memory allocation pointer to the stack.
.3812	95 50		sta $50,x			sta 	esInt0,x 					; type is already string.
.3814	a5 3a		lda $3a				lda 	SoftMemAlloc+1
.3816	95 58		sta $58,x			sta 	esInt1,x
.3818	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/functions/memory.asm

.0039					softMemAlloc:
>0039							.fill 	2  							; if MSB is zero needs resetting on allocation.
.3819					AllocateSoftString:
.3819	85 32		sta $32				sta 	tempShort 					; save count
.381b	98		tya				tya
.381c	48		pha				pha
.381d	a5 3a		lda $3a				lda 	softMemAlloc+1 				; if the high byte is zero, it needs allocating.
.381f	d0 09		bne $382a			bne 	_ASSDone
.3821	a5 33		lda $33				lda 	highMemory 					; reset the soft memory alloc pointer.
.3823	85 39		sta $39				sta 	softMemAlloc 				; to speed up slightly, we only reset this when we first need it
.3825	a4 34		ldy $34				ldy 	highMemory+1 				; but it needs to be reset before each command.
.3827	88		dey				dey 								; it is set to 1/4k below high memory, allowing space
.3828	84 3a		sty $3a				sty 	softMemAlloc+1 				; for a concreted string.
.382a					_ASSDone:
.382a	38		sec				sec 								; allocate downwards enough memory
.382b	a5 39		lda $39				lda 	softMemAlloc 				; subtract the memory requirements in A from
.382d	e5 32		sbc $32				sbc 	tempShort 					; the soft memory pointer
.382f	85 39		sta $39				sta 	softMemAlloc
.3831	a5 3a		lda $3a				lda 	softMemAlloc+1
.3833	e9 00		sbc #$00			sbc 	#0
.3835	85 3a		sta $3a				sta 	softMemAlloc+1
.3837	a9 00		lda #$00			lda 	#0 							; empty that string, set the length = 0.
.3839	a8		tay				tay
.383a	91 39		sta ($39),y			sta 	(softMemAlloc),y
.383c	68		pla				pla
.383d	a8		tay				tay
.383e	60		rts				rts
.383f					WriteSoftString:
.383f	84 32		sty $32				sty 	tempShort 					; save Y
.3841	48		pha				pha 								; save character on stack
.3842	a0 00		ldy #$00			ldy 	#0 							; get and bump length
.3844	b1 39		lda ($39),y			lda 	(softMemAlloc),y
.3846	18		clc				clc
.3847	69 01		adc #$01			adc 	#1
.3849	91 39		sta ($39),y			sta 	(softMemAlloc),y
.384b	a8		tay				tay 								; offset in Y
.384c	68		pla				pla 								; get char and write.
.384d	91 39		sta ($39),y			sta 	(softMemAlloc),y
.384f	a4 32		ldy $32				ldy 	tempShort 					; restore Y and exit.
.3851	60		rts				rts
.3852					StrClone:
.3852	aa		tax				tax 								; set up stack.
.3853	98		tya				tya
.3854	48		pha				pha
.3855	a0 00		ldy #$00			ldy 	#0 							; get length, add 1 for length
.3857	b1 2a		lda ($2a),y			lda 	(temp0),y 					; this is the bytes required.
.3859	18		clc				clc
.385a	69 01		adc #$01			adc 	#1
.385c	20 19 38	jsr $3819			jsr 	AllocateSoftString 			; allocate soft memory
.385f	a5 39		lda $39				lda 	softMemAlloc 				; copy that address to TOS
.3861	95 50		sta $50,x			sta 	esInt0,x
.3863	a5 3a		lda $3a				lda 	softMemAlloc+1
.3865	95 58		sta $58,x			sta 	esInt1,x
.3867	a9 00		lda #$00			lda 	#0 							; zero upper 2 bytes
.3869	95 60		sta $60,x			sta 	esInt2,x
.386b	95 68		sta $68,x			sta 	esInt3,x
.386d	a9 40		lda #$40			lda 	#$40 						; set type to string.
.386f	95 48		sta $48,x			sta 	esType,x
.3871	20 fa 37	jsr $37fa			jsr 	SCCopyTemp0 				; copy temp0 string to soft memory copy (concat.asm)
.3874	68		pla				pla
.3875	a8		tay				tay
.3876	8a		txa				txa
.3877	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/functions/setcase.asm

.3878					CaseString:
.3878	48		pha				pha 								; save A and copy to X
.3879	aa		tax				tax
.387a	98		tya				tya
.387b	48		pha				pha
.387c	20 c1 37	jsr $37c1			jsr 	CopyStringTop 				; target string -> temp0
.387f	a0 00		ldy #$00			ldy 	#0
.3881	b1 2a		lda ($2a),y			lda 	(temp0),y  					; get length,
.3883	18		clc				clc
.3884	69 01		adc #$01			adc 	#1 							; one more for length byte
.3886	20 19 38	jsr $3819			jsr 	AllocateSoftString 			; allocate soft string memory, set pointer.
.3889	20 10 38	jsr $3810			jsr 	CopySoftToStack 			; copy that to the stack.
.388c	a0 00		ldy #$00			ldy 	#0
.388e	b1 2a		lda ($2a),y			lda 	(temp0),y 					; count to copy in X
.3890	aa		tax				tax
.3891					_CSCopy:
.3891	e0 00		cpx #$00			cpx 	#0 							; finished if 0.
.3893	f0 24		beq $38b9			beq 	_CSExit
.3895	ca		dex				dex
.3896	c8		iny				iny
.3897	68		pla				pla 								; check direction
.3898	48		pha				pha
.3899	f0 0c		beq $38a7			beq 	_CSUpper
.389b	b1 2a		lda ($2a),y			lda 	(temp0),y 					; lower$() code
.389d	c9 41		cmp #$41			cmp 	#"A"
.389f	90 12		bcc $38b3			bcc 	_CSWrite
.38a1	c9 5b		cmp #$5b			cmp 	#"Z"+1
.38a3	b0 0e		bcs $38b3			bcs 	_CSWrite
.38a5	90 0a		bcc $38b1			bcc 	_CSFlipWrite
.38a7					_CSUpper:
.38a7	b1 2a		lda ($2a),y			lda 	(temp0),y 					; upper$() code
.38a9	c9 61		cmp #$61			cmp 	#"a"
.38ab	90 06		bcc $38b3			bcc 	_CSWrite
.38ad	c9 7b		cmp #$7b			cmp 	#"z"+1
.38af	b0 02		bcs $38b3			bcs 	_CSWrite
.38b1					_CSFlipWrite:
.38b1	49 20		eor #$20			eor 	#"A"^"a" 					; switch case.
.38b3					_CSWrite:
.38b3	20 3f 38	jsr $383f			jsr 	WriteSoftString 			; add to soft string.
.38b6	4c 91 38	jmp $3891			jmp 	_CSCopy
.38b9					_CSExit:
.38b9	68		pla				pla
.38ba	a8		tay				tay
.38bb	68		pla				pla
.38bc	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/functions/substring.asm

.38bd					StringSubstring:
.38bd	48		pha				pha
.38be	aa		tax				tax 								; access stack.
.38bf	98		tya				tya
.38c0	48		pha				pha
.38c1	20 c1 37	jsr $37c1			jsr 	CopyStringTop 				; point temp0 to the string.
.38c4	a0 00		ldy #$00			ldy 	#0 							; get length.
.38c6	b1 2a		lda ($2a),y			lda 	(temp0),Y
.38c8	85 2c		sta $2c				sta 	temp1
.38ca	b5 51		lda $51,x			lda 	esInt0+1,x 					; get the initial offset
.38cc	c5 2c		cmp $2c				cmp 	temp1 						; return "" if > length.
.38ce	f0 02		beq $38d2			beq 	_SSBOkay
.38d0	b0 2a		bcs $38fc			bcs 	_SSBReturnNull
.38d2					_SSBOkay:
.38d2	a5 2c		lda $2c				lda 	temp1 						; get the total length +1
.38d4	18		clc				clc
.38d5	69 01		adc #$01			adc 	#1
.38d7	38		sec				sec
.38d8	f5 51		sbc $51,x			sbc 	esInt0+1,x 					; the anything >= this is bad - max size
.38da	d5 52		cmp $52,x			cmp 	esInt0+2,x  				; check bad >= required
.38dc	90 02		bcc $38e0			bcc		_SSBTrunc
.38de	b5 52		lda $52,x			lda 	esInt0+2,x
.38e0					_SSBTrunc:
.38e0	85 2d		sta $2d				sta 	temp1+1 					; characters to copy.
.38e2	18		clc				clc
.38e3	69 01		adc #$01			adc 	#1 							; add 1
.38e5	20 19 38	jsr $3819			jsr 	AllocateSoftString 			; allocate soft string memory, set pointer.
.38e8	20 10 38	jsr $3810			jsr 	CopySoftToStack 			; copy that to the stack.
.38eb	b4 51		ldy $51,x			ldy 	esInt0+1,x 					; get initial position of char to copy
.38ed					_SSBCopyLoop:
.38ed	a5 2d		lda $2d				lda 	temp1+1 					; done them all
.38ef	f0 0e		beq $38ff			beq 	_SSBExit
.38f1	c6 2d		dec $2d				dec 	temp1+1
.38f3	b1 2a		lda ($2a),y			lda 	(temp0),y 					; get and write character
.38f5	20 3f 38	jsr $383f			jsr 	WriteSoftString
.38f8	c8		iny				iny
.38f9	4c ed 38	jmp $38ed			jmp 	_SSBCopyLoop
.38fc					_SSBReturnNull:
.38fc	20 03 39	jsr $3903			jsr 	ReturnNull
.38ff					_SSBExit:
.38ff	68		pla				pla
.3900	a8		tay				tay
.3901	68		pla				pla
.3902	60		rts				rts
.3903					ReturnNull:
.3903	a9 00		lda #$00			lda 	#0 							; clear null string
.3905	8d ce 0a	sta $0ace			sta 	NullString
.3908	a9 ce		lda #$ce			lda 	#NullString & $FF 			; set a pointer to it
.390a	95 50		sta $50,x			sta 	esInt0,x
.390c	a9 0a		lda #$0a			lda 	#NullString >> 8
.390e	95 58		sta $58,x			sta 	esInt1,x
.3910	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/functions/write.asm

.0ce3					srcStrLen:
>0ce3							.fill 	1
.3911					StringWrite:
.3911	aa		tax				tax
.3912	48		pha				pha
.3913	98		tya				tya
.3914	48		pha				pha
.3915	20 3c 39	jsr $393c			jsr 	CheckOverwriteCurrent
.3918	b0 0d		bcs $3927			bcs		_SWCopyCurrent
.391a	20 7a 39	jsr $397a			jsr 	RequiresConcretion
.391d	90 0e		bcc $392d			bcc 	_SWWriteReference
.391f	20 dd 39	jsr $39dd			jsr 	CheckSpecialConcretion
.3922	b0 09		bcs $392d			bcs 	_SWWriteReference
.3924	20 8e 39	jsr $398e			jsr 	AllocateHardMemory
.3927					_SWCopyCurrent:
.3927	20 c1 39	jsr $39c1			jsr 	CopyStringToHardMemory
.392a	4c 38 39	jmp $3938			jmp 	_SWExit
.392d					_SWWriteReference
.392d	a0 00		ldy #$00			ldy 	#0
.392f	a5 2a		lda $2a				lda 	temp0
.3931	91 2c		sta ($2c),y			sta 	(temp1),y
.3933	c8		iny				iny
.3934	a5 2b		lda $2b				lda 	temp0+1
.3936	91 2c		sta ($2c),y			sta 	(temp1),y
.3938					_SWExit:
.3938	68		pla				pla
.3939	a8		tay				tay
.393a	68		pla				pla
.393b	60		rts				rts
.393c					CheckOverwriteCurrent:
.393c	a0 00		ldy #$00			ldy 	#0 						; get address of string being written to temp0
.393e	b5 59		lda $59,x			lda 	esInt1+1,x
.3940	85 2b		sta $2b				sta 	temp0+1
.3942	b5 51		lda $51,x			lda 	esInt0+1,x
.3944	85 2a		sta $2a				sta 	temp0
.3946	b1 2a		lda ($2a),y			lda 	(temp0),y 				; get length of string being copied and save it.
.3948	8d e3 0c	sta $0ce3			sta 	srcStrLen
.394b	b5 50		lda $50,x			lda 	esInt0,x 				; copy where the final address it being written to temp1.
.394d	85 2c		sta $2c				sta 	temp1 					; e.g. if it is ax$ then temp1 will point to the ax$
.394f	b5 58		lda $58,x			lda 	esInt1,x 				; data record + 5
.3951	85 2d		sta $2d				sta 	temp1+1
.3953	a0 01		ldy #$01			ldy 	#1 						; get the MSB of the address of string currently stored there.
.3955	b1 2c		lda ($2c),y			lda 	(temp1),y
.3957	c5 34		cmp $34				cmp 	highMemory+1 			; if < high memory then it cannot be something stored
.3959	90 1b		bcc $3976			bcc 	_COCFail 				; in hard memory.
.395b	a0 00		ldy #$00			ldy 	#0 						; copy target address - 1 into temp2
.395d	b1 2c		lda ($2c),y			lda 	(temp1),y 				; when allocating hard memory, the overall size is
.395f	e9 01		sbc #$01			sbc 	#1 						; in the previous byte.
.3961	85 2e		sta $2e				sta 	temp2
.3963	c8		iny				iny
.3964	b1 2c		lda ($2c),y			lda 	(temp1),y
.3966	e9 00		sbc #$00			sbc 	#0
.3968	85 2f		sta $2f				sta 	temp2+1
.396a	a0 00		ldy #$00			ldy 	#0 						; how large is this physical chunk.
.396c	b1 2e		lda ($2e),y			lda 	(temp2),y
.396e	38		sec				sec  							; maximum character capacity.
.396f	e9 02		sbc #$02			sbc 	#2
.3971	cd e3 0c	cmp $0ce3			cmp 	srcStrLen 				; if >= the required length
.3974	b0 02		bcs $3978			bcs 	_COCCanReuse
.3976					_COCFail:
.3976	18		clc				clc
.3977	60		rts				rts
.3978					_COCCanReuse:
.3978	38		sec				sec
.3979	60		rts				rts
.397a					RequiresConcretion:
.397a	a5 2b		lda $2b				lda 	temp0+1 				; get MSB of address of string to be written
.397c	c5 34		cmp $34				cmp 	highMemory+1 			; if >= high memory it is concreted
.397e	b0 0a		bcs $398a			bcs 	_RCSucceed 				; so it needs concreting again - duplication.
.3980	a5 3a		lda $3a				lda 	softMemAlloc+1 			; have we allocated any soft memory yet ?
.3982	f0 08		beq $398c			beq 	_RCFail 				; if not, this cannot be soft memory.
.3984	a5 2b		lda $2b				lda 	temp0+1 				; get MSB of address of string to be written
.3986	c5 3a		cmp $3a				cmp 	softMemAlloc+1 			; if >= soft mem alloc it is either soft
.3988	90 02		bcc $398c			bcc 	_RCFail 				; so concreting
.398a					_RCSucceed:
.398a	38		sec				sec
.398b	60		rts				rts
.398c					_RCFail:
.398c	18		clc				clc
.398d	60		rts				rts
.398e					AllocateHardMemory:
.398e	98		tya				tya
.398f	48		pha				pha
.3990	ad e3 0c	lda $0ce3			lda 	srcStrLen 				; characters in string
.3993	69 0a		adc #$0a			adc 	#1+1+8 					; one for hard memory size, one for string size, extra for expansion
.3995	b0 04		bcs $399b			bcs 	_AHMSetMax 				; max out that amount.
.3997	c9 fe		cmp #$fe			cmp 	#MaxStringSize+2
.3999	90 02		bcc $399d			bcc 	_AHMIsOkay
.399b					_AHMSetMax:
.399b	a9 fe		lda #$fe			lda 	#MaxStringSize+2
.399d					_AHMIsOkay:
.399d	48		pha				pha	 							; save size to be allocated
.399e	49 ff		eor #$ff			eor 	#$FF 					; complement and add to high Memory
.39a0	38		sec				sec  							; and copy result to TOS as target address.
.39a1	65 33		adc $33				adc 	highMemory
.39a3	85 33		sta $33				sta 	highMemory
.39a5	a5 34		lda $34				lda 	highMemory+1
.39a7	69 ff		adc #$ff			adc 	#$FF
.39a9	85 34		sta $34				sta 	highMemory+1
.39ab	a0 00		ldy #$00			ldy 	#0 						; Y = 0
.39ad	68		pla				pla 							; get the total size of the storage block
.39ae	91 33		sta ($33),y			sta 	(highMemory),y 			; and set it
.39b0	18		clc				clc
.39b1	a5 33		lda $33				lda		highMemory 				; point the target address to the byte after this.
.39b3	69 01		adc #$01			adc 	#1
.39b5	91 2c		sta ($2c),y			sta 	(temp1),y
.39b7	a5 34		lda $34				lda 	highMemory+1
.39b9	69 00		adc #$00			adc 	#0
.39bb	c8		iny				iny
.39bc	91 2c		sta ($2c),y			sta 	(temp1),y
.39be	68		pla				pla
.39bf	a8		tay				tay
.39c0	60		rts				rts
.39c1					CopyStringToHardMemory:
.39c1	98		tya				tya
.39c2	48		pha				pha
.39c3	a0 00		ldy #$00			ldy 	#0 						; copy target address to temp2
.39c5	b1 2c		lda ($2c),y			lda 	(temp1),y
.39c7	85 2e		sta $2e				sta 	temp2
.39c9	c8		iny				iny
.39ca	b1 2c		lda ($2c),y			lda 	(temp1),y
.39cc	85 2f		sta $2f				sta 	temp2+1
.39ce	ac e3 0c	ldy $0ce3			ldy 	srcStrLen 				; copy this + 1 characters, (length too) hence $FF compare
.39d1					_CSTHMLoop:
.39d1	b1 2a		lda ($2a),y			lda 	(temp0),y
.39d3	91 2e		sta ($2e),y			sta 	(temp2),y
.39d5	88		dey				dey
.39d6	c0 ff		cpy #$ff			cpy 	#$FF 					; this does the +1
.39d8	d0 f7		bne $39d1			bne 	_CSTHMLoop
.39da	68		pla				pla
.39db	a8		tay				tay
.39dc	60		rts				rts
.39dd					CheckSpecialConcretion:
.39dd	ad e3 0c	lda $0ce3			lda 	srcStrLen 				; check string is null e.g. length = 0
.39e0	f0 02		beq $39e4			beq 	_CSCNullString
.39e2	18		clc				clc
.39e3	60		rts				rts
.39e4					_CSCNullString:
.39e4	a9 00		lda #$00			lda 	#0 						; by always returning this address we don't waste
.39e6	8d ce 0a	sta $0ace			sta 	NullString		 		; storage on null strings.
.39e9	a9 ce		lda #$ce			lda 	#(NullString) & $FF
.39eb	85 2a		sta $2a				sta 	temp0
.39ed	a9 0a		lda #$0a			lda 	#(NullString) >> 8
.39ef	85 2b		sta $2b				sta 	1+(temp0)
.39f1	38		sec				sec
.39f2	60		rts				rts

;******  Return to file: string/string.asm

.39f3					stringHandler:
.39f3	7c f6 39	jmp ($39f6,x)			jmp 	(stringVectors,x)
.39f6					stringVectors:
>39f6	08 3a					.word _DummyControlHandler ; index 0
>39f8	56 37					.word StringChrs           ; index 2
>39fa	52 38					.word StrClone             ; index 4
>39fc	ca 37					.word StringConcat         ; index 6
>39fe	65 37					.word StringNull           ; index 8
>3a00	81 37					.word STRCompare           ; index 10
>3a02	78 38					.word CaseString           ; index 12
>3a04	bd 38					.word StringSubstring      ; index 14
>3a06	11 39					.word StringWrite          ; index 16
.3a08					_DummyControlHandler:
.3a08	60		rts			rts

;******  Return to file: basic.asm

.3a09					section_end_string:
.3a09					section_start_tokeniser:

;******  Processing file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/detokenise/detokenise.asm

.0ce4					deTokeniseVector:
>0ce4							.fill 	2
.0ce6					lastCharacterClass:
>0ce6							.fill 	1
.0ce7					indent:
>0ce7							.fill 	1
.3a09					ListLine:
.3a09	48		pha				pha								; enter here to list to console. sets the output vector
.3a0a	a9 41		lda #$41			lda 	#(deTokenPrint) & $FF
.3a0c	8d e4 0c	sta $0ce4			sta 	deTokeniseVector
.3a0f	a9 3b		lda #$3b			lda 	#(deTokenPrint) >> 8
.3a11	8d e5 0c	sta $0ce5			sta 	1+(deTokeniseVector)
.3a14	68		pla				pla
.3a15					Detokenise:
.3a15	18		clc				clc 							; space required for line number.
.3a16	69 06		adc #$06			adc 	#6
.3a18	8d e7 0c	sta $0ce7			sta 	indent
.3a1b	a9 ff		lda #$ff			lda 	#$FF 					; last thing printed is a dummy value.
.3a1d	8d e6 0c	sta $0ce6			sta 	lastCharacterClass
.3a20	a2 02		ldx #$02			ldx 	#2
.3a22	a9 00		lda #$00			lda 	#0 						; clear upper two bytes
.3a24	95 60		sta $60,x			sta 	esInt2,x
.3a26	95 68		sta $68,x			sta 	esInt3,x
.3a28	a0 01		ldy #$01			ldy 	#1 						; copy line number to stack,2 (as using stack 0,1 for list range)
.3a2a	b1 28		lda ($28),y			lda 	(codePtr),y
.3a2c	95 50		sta $50,x			sta 	esInt0,x
.3a2e	c8		iny				iny
.3a2f	b1 28		lda ($28),y			lda 	(codePtr),y
.3a31	95 58		sta $58,x			sta 	esInt1,x
.3a33	a9 84		lda #$84			lda 	#LTYLineNumber
.3a35	20 1c 3b	jsr $3b1c			jsr 	ListOutputCharacter
.3a38	a9 0a		lda #$0a			lda 	#10 					; base 10
.3a3a	20 e0 3a	jsr $3ae0			jsr 	DTPrintInteger 			; print as integer.
.3a3d	a0 00		ldy #$00			ldy 	#0 						; get length
.3a3f	b1 2a		lda ($2a),y			lda 	(temp0),y 				; into X
.3a41	aa		tax				tax
.3a42					_DTPadOut:
.3a42	a9 20		lda #$20			lda 	#" " 					; pad out to indent.
.3a44	20 1c 3b	jsr $3b1c			jsr 	ListOutputCharacter
.3a47	e8		inx				inx
.3a48	ec e7 0c	cpx $0ce7			cpx 	indent
.3a4b	d0 f5		bne $3a42			bne 	_DTPadOut
.3a4d	a0 03		ldy #$03			ldy 	#3 						; start position.
.3a4f					_DTListLoop:
.3a4f	b1 28		lda ($28),y			lda 	(codePtr),y
.3a51	c9 85		cmp #$85			cmp 	#TOK_STR 				; Inline string.
.3a53	f0 5e		beq $3ab3			beq 	_DTIsString
.3a55	c9 84		cmp #$84			cmp 	#TOK_FPC 				; Floating point
.3a57	f0 56		beq $3aaf			beq 	_DTIsFloat
.3a59	c9 c5		cmp #$c5			cmp 	#TKW_AMP 				; & hex marker
.3a5b	f0 16		beq $3a73			beq 	_DTHexConstant
.3a5d	c9 80		cmp #$80			cmp 	#TOK_EOL 				; End of Line
.3a5f	d0 06		bne $3a67			bne 	_DTNotEnd
.3a61	a9 ff		lda #$ff			lda 	#255 					; print CR
.3a63	20 1c 3b	jsr $3b1c			jsr 	ListOutputCharacter
.3a66	60		rts				rts
.3a67					_DTNotEnd:
.3a67	c9 00		cmp #$00			cmp 	#0
.3a69	30 38		bmi $3aa3			bmi 	_DTIsToken
.3a6b	c9 40		cmp #$40			cmp 	#$40
.3a6d	90 3a		bcc $3aa9			bcc 	_DTIsIdentifier
.3a6f	a9 0a		lda #$0a			lda 	#10 					; this is the base, unsigned decimal
.3a71	d0 0d		bne $3a80			bne 	_DTConstant
.3a73					_DTHexConstant:
.3a73	a9 26		lda #$26			lda 	#"&"
.3a75	20 1c 3b	jsr $3b1c			jsr 	ListOutputCharacter
.3a78	c8		iny				iny
.3a79	a9 01		lda #$01			lda 	#1 						; switch to spaces so &xxxx is treated like a number.
.3a7b	20 5d 3b	jsr $3b5d			jsr 	DTSwitchMode
.3a7e	a9 10		lda #$10			lda 	#16						; print line unsigned hex
.3a80					_DTConstant:
.3a80	48		pha				pha
.3a81	a9 00		lda #$00			lda 	#0 						; now constant, may need spaces
.3a83	20 5d 3b	jsr $3b5d			jsr 	DTSwitchMode
.3a86	a9 86		lda #$86			lda 	#LTYConstant
.3a88	20 1c 3b	jsr $3b1c			jsr 	ListOutputCharacter
.3a8b	a2 02		ldx #$02			ldx 	#2 						; get its value
.3a8d	8a		txa				txa
.3a8e	a2 10		ldx #$10		ldx	#16
.3a90	20 36 37	jsr $3736		jsr	mainHandler
.3a93	aa		tax				tax
.3a94	68		pla				pla 							; get base back
.3a95	85 32		sta $32				sta 	tempShort
.3a97	98		tya				tya
.3a98	48		pha				pha
.3a99	a5 32		lda $32				lda 	tempShort 				; print in base A stck level X
.3a9b	20 e0 3a	jsr $3ae0			jsr 	DTPrintInteger
.3a9e	68		pla				pla
.3a9f	a8		tay				tay
.3aa0	4c 4f 3a	jmp $3a4f			jmp 	_DTListLoop
.3aa3					_DTIsToken:
.3aa3	20 b6 3b	jsr $3bb6			jsr 	DTDecodeToken
.3aa6	4c 4f 3a	jmp $3a4f			jmp 	_DTListLoop
.3aa9					_DTIsIdentifier:
.3aa9	20 6f 3b	jsr $3b6f			jsr 	DTIdentifier
.3aac	4c 4f 3a	jmp $3a4f			jmp 	_DTListLoop
.3aaf					_DTIsFloat:
>3aaf	db						.byte 	$DB
.3ab0	4c af 3a	jmp $3aaf			jmp 	_DTIsFloat
.3ab3					_DTIsString:
.3ab3	a9 01		lda #$01			lda 	#1 							; now punctuation, may need spaces
.3ab5	20 5d 3b	jsr $3b5d			jsr 	DTSwitchMode
.3ab8	a9 81		lda #$81			lda 	#LTYString
.3aba	20 1c 3b	jsr $3b1c			jsr 	ListOutputCharacter
.3abd	a9 22		lda #$22			lda 	#'"'						; open quote
.3abf	20 1c 3b	jsr $3b1c			jsr 	ListOutputCharacter
.3ac2	a2 02		ldx #$02			ldx 	#2 							; evaluate string to TOS2.
.3ac4	8a		txa				txa
.3ac5	a2 10		ldx #$10		ldx	#16
.3ac7	20 36 37	jsr $3736		jsr	mainHandler
.3aca	aa		tax				tax
.3acb	b5 50		lda $50,x			lda 	esInt0,x 					; copy string address to temp0
.3acd	85 2a		sta $2a				sta 	temp0
.3acf	b5 58		lda $58,x			lda 	esInt1,x
.3ad1	85 2b		sta $2b				sta 	temp0+1
.3ad3	a9 00		lda #$00			lda 	#0 							; don't capitalise.
.3ad5	20 f2 3a	jsr $3af2			jsr 	DTPrintLengthPrefix
.3ad8	a9 22		lda #$22			lda 	#'"'
.3ada	20 1c 3b	jsr $3b1c			jsr 	ListOutputCharacter
.3add	4c 4f 3a	jmp $3a4f			jmp 	_DTListLoop

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/detokenise/dtprint.asm

.0ce8					tPrintCount:
>0ce8							.fill 	1
.3ae0					DTPrintInteger:
.3ae0	48		pha				pha									; save base
.3ae1	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.3ae3	85 2a		sta $2a				sta 	temp0
.3ae5	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.3ae7	85 2b		sta $2b				sta 	1+(temp0)
.3ae9	68		pla				pla
.3aea	a8		tay				tay
.3aeb	8a		txa				txa
.3aec	a2 12		ldx #$12		ldx	#18
.3aee	20 36 37	jsr $3736		jsr	mainHandler
.3af1	aa		tax				tax 								; then drop through here.
.3af2					DTPrintLengthPrefix:
.3af2	aa		tax				tax 								; A = 0 = don't case convert.
.3af3	98		tya				tya
.3af4	48		pha				pha
.3af5	a0 00		ldy #$00			ldy 	#0 							; get string length = chars to print.
.3af7	b1 2a		lda ($2a),y			lda 	(temp0),y
.3af9	8d e8 0c	sta $0ce8			sta 	tPrintCount
.3afc	f0 1b		beq $3b19			beq 	_DTPLPExit 					; empty string
.3afe					_DTPLPLoop:
.3afe	c8		iny				iny 								; get next.
.3aff	b1 2a		lda ($2a),y			lda 	(temp0),y
.3b01	29 7f		and #$7f			and 	#$7F
.3b03	e0 00		cpx #$00			cpx 	#0 							; skip if not case converting
.3b05	f0 0a		beq $3b11			beq 	_DTPLPNoCase
.3b07	c9 41		cmp #$41			cmp 	#"A" 						; if converting UC -> LC
.3b09	90 06		bcc $3b11			bcc 	_DTPLPNoCase
.3b0b	c9 5b		cmp #$5b			cmp 	#"Z"+1
.3b0d	b0 02		bcs $3b11			bcs 	_DTPLPNoCase
.3b0f	49 20		eor #$20			eor 	#"A"^"a"
.3b11					_DTPLPNoCase
.3b11	20 1c 3b	jsr $3b1c			jsr 	ListOutputCharacter 		; call handler
.3b14	ce e8 0c	dec $0ce8			dec 	tPrintCount 				; do all the characters
.3b17	d0 e5		bne $3afe			bne 	_DTPLPLoop
.3b19					_DTPLPExit:
.3b19	68		pla				pla
.3b1a	a8		tay				tay
.3b1b	60		rts				rts
.3b1c					ListOutputCharacter:
.3b1c	85 32		sta $32				sta 	tempShort
.3b1e	48		pha				pha
.3b1f	8a		txa				txa
.3b20	48		pha				pha
.3b21	98		tya				tya
.3b22	48		pha				pha
.3b23	a5 32		lda $32				lda 	tempShort 					; convert ASCII 6 bit (0-31) to 7 bit.
.3b25	c9 20		cmp #$20			cmp 	#32
.3b27	b0 0c		bcs $3b35			bcs		_LOCHiBit
.3b29	09 40		ora #$40			ora 	#64 						; conversion
.3b2b	c9 40		cmp #$40			cmp 	#64							; make l/c
.3b2d	f0 06		beq $3b35			beq 	_LOCHiBit
.3b2f	c9 5b		cmp #$5b			cmp 	#65+26
.3b31	b0 02		bcs $3b35			bcs 	_LOCHiBit
.3b33	69 20		adc #$20			adc 	#32
.3b35					_LOCHiBit:
.3b35	20 3e 3b	jsr $3b3e			jsr 	_LOCCallVector				; call o/p handler routine
.3b38	68		pla				pla
.3b39	a8		tay				tay
.3b3a	68		pla				pla
.3b3b	aa		tax				tax
.3b3c	68		pla				pla
.3b3d					_LOCExit:
.3b3d	60		rts				rts
.3b3e					_LOCCallVector:
.3b3e	6c e4 0c	jmp ($0ce4)			jmp 	(deTokeniseVector)
.3b41					deTokenPrint:
.3b41	c9 00		cmp #$00			cmp 	#0 							; if bit 7 sets ink colour
.3b43	30 06		bmi $3b4b			bmi 	_dtpInk
.3b45	a2 16		ldx #$16		ldx	#22
.3b47	20 f6 14	jsr $14f6		jsr	deviceHandler
.3b4a	60		rts				rts
.3b4b	c9 ff		cmp #$ff	_dtpInk:cmp 	#255 						; e.g. herhe, get ink and set it
.3b4d	f0 08		beq $3b57			beq 	_dtpCR						; except $FF => CRLF
.3b4f	29 07		and #$07			and 	#7
.3b51	a2 08		ldx #$08		ldx	#8
.3b53	20 f6 14	jsr $14f6		jsr	deviceHandler
.3b56	60		rts				rts
.3b57					_dtpCR:
.3b57	a2 06		ldx #$06		ldx	#6
.3b59	20 f6 14	jsr $14f6		jsr	deviceHandler
.3b5c	60		rts				rts
.3b5d					DTSwitchMode:
.3b5d	cd e6 0c	cmp $0ce6			cmp 	LastCharacterClass 			; if changed, update character class
.3b60	f0 04		beq $3b66			beq 	_DTSMNoChange
.3b62	8d e6 0c	sta $0ce6			sta 	LastCharacterClass
.3b65					_DTSMExit:
.3b65	60		rts				rts
.3b66					_DTSMNoChange:
.3b66	c9 01		cmp #$01			cmp 	#1 							; if didn't change to punctuation, two identifiers so we
.3b68	f0 fb		beq $3b65			beq 	_DTSMExit 					; need a space.
.3b6a	a9 20		lda #$20			lda 	#" "
.3b6c	4c 1c 3b	jmp $3b1c			jmp 	ListOutputCharacter

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/detokenise/identifier.asm

.3b6f					DTIdentifier:
.3b6f	a9 00		lda #$00			lda 	#0 							; now text, may need spaces
.3b71	20 5d 3b	jsr $3b5d			jsr 	DTSwitchMode
.3b74	a9 87		lda #$87			lda 	#LTYIdentifier
.3b76	20 1c 3b	jsr $3b1c			jsr 	ListOutputCharacter
.3b79					_DTILoop:
.3b79	b1 28		lda ($28),y			lda 	(codePtr),y 				; output main bit of identifier.
.3b7b	c9 2d		cmp #$2d			cmp 	#"-"						; make - back to _
.3b7d	d0 02		bne $3b81			bne 	_DTINotUS
.3b7f	a9 5f		lda #$5f			lda 	#"_"
.3b81					_DTINotUS:
.3b81	20 1c 3b	jsr $3b1c			jsr 	ListOutputCharacter
.3b84	c8		iny				iny
.3b85	b1 28		lda ($28),y			lda 	(codePtr),y 				; until end identifier marker.
.3b87	c9 3a		cmp #$3a			cmp 	#$3A
.3b89	90 ee		bcc $3b79			bcc 	_DTILoop
.3b8b	c8		iny				iny
.3b8c	c9 3a		cmp #$3a			cmp 	#$3A 						; is it integer non array
.3b8e	f0 25		beq $3bb5			beq 	_DTIExit 					; no postfix.
.3b90	48		pha				pha
.3b91	a9 01		lda #$01			lda  	#1 							; it ends in punctuation
.3b93	8d e6 0c	sta $0ce6			sta 	LastCharacterClass
.3b96	a9 82		lda #$82			lda 	#LTYPunctuation
.3b98	20 1c 3b	jsr $3b1c			jsr 	ListOutputCharacter
.3b9b	68		pla				pla
.3b9c	c9 3b		cmp #$3b			cmp 	#$3B
.3b9e	f0 10		beq $3bb0			beq 	_DTIArray
.3ba0	4a		lsr a				lsr 	a 							; array flag in C
.3ba1	08		php				php
.3ba2	49 1e		eor #$1e			eor 	#$3C/2 						; check if $
.3ba4	f0 02		beq $3ba8			beq 	_DTIDollar
.3ba6	a9 07		lda #$07			lda 	#"$"^"#" 					; this if #, 0 if $
.3ba8					_DTIDollar:
.3ba8	49 24		eor #$24			eor 	#"$"
.3baa	20 1c 3b	jsr $3b1c			jsr 	ListOutputCharacter
.3bad	28		plp				plp
.3bae	90 05		bcc $3bb5			bcc 	_DTIExit
.3bb0					_DTIArray:
.3bb0	a9 28		lda #$28			lda 	#"("
.3bb2	20 1c 3b	jsr $3b1c			jsr 	ListOutputCharacter
.3bb5					_DTIExit:
.3bb5	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/detokenise/token.asm

.3bb6					DTDecodeToken:
.3bb6	a2 00		ldx #$00			ldx 	#0 							; table number to use
.3bb8	b1 28		lda ($28),y			lda 	(codePtr),y
.3bba	c9 84		cmp #$84			cmp 	#$84
.3bbc	b0 05		bcs $3bc3			bcs 	_DTNotShift
.3bbe	29 03		and #$03			and 	#3 							; get the shift 1..3
.3bc0	0a		asl a				asl 	a 							; put 2 x in X
.3bc1	aa		tax				tax
.3bc2	c8		iny				iny
.3bc3					_DTNotShift:
.3bc3	bd c5 3e	lda $3ec5,x			lda 	TokenTableAddress,x 		; get the token table to use to decode it.
.3bc6	85 2a		sta $2a				sta 	temp0 						; point into temp0
.3bc8	bd c6 3e	lda $3ec6,x			lda 	TokenTableAddress+1,x
.3bcb	85 2b		sta $2b				sta 	temp0+1
.3bcd	b1 28		lda ($28),y			lda 	(codePtr),y 				; get the token value.
.3bcf	c8		iny				iny 								; consume it.
.3bd0	aa		tax				tax
.3bd1	98		tya				tya
.3bd2	48		pha				pha
.3bd3					_DTFindText:
.3bd3	e0 86		cpx #$86			cpx 	#$86 						; finished ?
.3bd5	f0 11		beq $3be8			beq 	_DTFoundText
.3bd7	ca		dex				dex
.3bd8	a0 00		ldy #$00			ldy 	#0 							; add length+1 to temp0
.3bda	38		sec				sec
.3bdb	b1 2a		lda ($2a),y			lda 	(temp0),y
.3bdd	65 2a		adc $2a				adc 	temp0
.3bdf	85 2a		sta $2a				sta 	temp0
.3be1	90 f0		bcc $3bd3			bcc 	_DTFindText
.3be3	e6 2b		inc $2b				inc 	temp0+1
.3be5	4c d3 3b	jmp $3bd3			jmp 	_DTFindText
.3be8					_DTFoundText:
.3be8	a0 01		ldy #$01			ldy 	#1 							; get first character
.3bea	b1 2a		lda ($2a),y			lda 	(temp0),y
.3bec	29 7f		and #$7f			and 	#$7F 						; will have bit 7 set.
.3bee	c9 41		cmp #$41			cmp 	#"A" 						; check for punctuation.
.3bf0	90 11		bcc $3c03			bcc 	_DTIsPunctuation
.3bf2	c9 5b		cmp #$5b			cmp 	#"Z"+1
.3bf4	b0 0d		bcs $3c03			bcs 	_DTIsPunctuation
.3bf6	a9 00		lda #$00			lda 	#0 							; now text, may need spaces
.3bf8	20 5d 3b	jsr $3b5d			jsr 	DTSwitchMode
.3bfb	a9 83		lda #$83			lda 	#LTYKeyword
.3bfd	20 1c 3b	jsr $3b1c			jsr 	ListOutputCharacter
.3c00	4c 0d 3c	jmp $3c0d			jmp 	_DTPrint
.3c03					_DTIsPunctuation:
.3c03	a9 01		lda #$01			lda 	#1 							; now punctuation, may need spaces
.3c05	20 5d 3b	jsr $3b5d			jsr 	DTSwitchMode
.3c08	a9 82		lda #$82			lda 	#LTYPunctuation
.3c0a	20 1c 3b	jsr $3b1c			jsr 	ListOutputCharacter
.3c0d					_DTPrint:
.3c0d	a9 01		lda #$01			lda 	#1 							; fix case.
.3c0f	20 f2 3a	jsr $3af2			jsr 	DTPrintLengthPrefix 		; print it out.
.3c12	a0 00		ldy #$00			ldy 	#0
.3c14	b1 2a		lda ($2a),y			lda 	(temp0),y
.3c16	a8		tay				tay
.3c17	b1 2a		lda ($2a),y			lda 	(temp0),y
.3c19	29 7f		and #$7f			and 	#$7F 						; will have bit 7 set.
.3c1b	c9 41		cmp #$41			cmp 	#"A" 						; check for punctuation.
.3c1d	90 04		bcc $3c23			bcc 	_DTIsNowPunctuation
.3c1f	c9 5b		cmp #$5b			cmp 	#"Z"+1
.3c21	90 05		bcc $3c28			bcc 	_DTPExit
.3c23					_DTIsNowPunctuation:
.3c23	a9 01		lda #$01			lda 	#1
.3c25	8d e6 0c	sta $0ce6			sta		LastCharacterClass
.3c28					_DTPExit:
.3c28	68		pla				pla
.3c29	a8		tay				tay
.3c2a	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/search.asm

.0ce9					currentSet:
>0ce9							.fill 	1
.3c2b					TokenSearch:
.3c2b	8a		txa				txa
.3c2c	48		pha				pha
.3c2d	98		tya				tya
.3c2e	48		pha				pha
.3c2f	a9 00		lda #$00			lda 	#0
.3c31	8d e9 0c	sta $0ce9			sta 	currentSet
.3c34					_TSLoop:
.3c34	ad e9 0c	lda $0ce9			lda 	currentSet 					; 2 x currentset in X
.3c37	0a		asl a				asl 	a
.3c38	aa		tax				tax
.3c39	bd c5 3e	lda $3ec5,x			lda 	TokenTableAddress,x 		; set temp0 to the table address
.3c3c	85 2a		sta $2a				sta 	temp0
.3c3e	bd c6 3e	lda $3ec6,x			lda 	TokenTableAddress+1,x
.3c41	85 2b		sta $2b				sta 	temp0+1
.3c43	20 6a 3c	jsr $3c6a			jsr 	TokenSearchOne 				; search one table
.3c46	b0 0d		bcs $3c55			bcs 	_TSFound 					; found a token.
.3c48	ee e9 0c	inc $0ce9			inc 	currentSet 					; next set
.3c4b	ad e9 0c	lda $0ce9			lda 	currentSet
.3c4e	c9 04		cmp #$04			cmp 	#4
.3c50	d0 e2		bne $3c34			bne 	_TSLoop 					; back if not done all four.
.3c52	18		clc				clc 								; clear carry and exit
.3c53	90 10		bcc $3c65			bcc 	_TSExit
.3c55					_TSFound:
.3c55	48		pha				pha 								; save token
.3c56	ad e9 0c	lda $0ce9			lda 	currentSet					; if set zero no shift
.3c59	f0 05		beq $3c60			beq 	_TSNoShift
.3c5b	09 80		ora #$80			ora 	#$80 						; Write as $81-$83
.3c5d	20 1b 3d	jsr $3d1b			jsr 	TokenWrite
.3c60					_TSNoShift:
.3c60	68		pla				pla 								; get token back
.3c61	20 1b 3d	jsr $3d1b			jsr 	TokenWrite 					; write it
.3c64	38		sec				sec 								; carry set indicating success
.3c65					_TSExit:
.3c65	68		pla				pla
.3c66	a8		tay				tay
.3c67	68		pla				pla
.3c68	aa		tax				tax
.3c69	60		rts				rts
.3c6a					TokenSearchOne:
.3c6a	a2 86		ldx #$86			ldx 	#$86 						; current token being tested.
.3c6c					_TSOLoop:
.3c6c	a0 00		ldy #$00			ldy 	#0
.3c6e	b1 2a		lda ($2a),y			lda 	(temp0),y 					; get length of token
.3c70	f0 26		beq $3c98			beq 	_TSOFail 					; if zero, end of table
.3c72	cd cf 0a	cmp $0acf			cmp 	convertBuffer 				; length is the same, compare the text matches.
.3c75	f0 11		beq $3c88			beq 	_TSOCheckText
.3c77					_TSONext:
.3c77	e8		inx				inx 								; bump token
.3c78	a0 00		ldy #$00			ldy 	#0							; get length
.3c7a	b1 2a		lda ($2a),y			lda 	(temp0),y
.3c7c	38		sec				sec
.3c7d	65 2a		adc $2a				adc 	temp0 						; add to temp0 + 1
.3c7f	85 2a		sta $2a				sta 	temp0
.3c81	90 e9		bcc $3c6c			bcc 	_TSOLoop
.3c83	e6 2b		inc $2b				inc 	temp0+1
.3c85	4c 6c 3c	jmp $3c6c			jmp 	_TSOLoop
.3c88					_TSOCheckText:
.3c88	a8		tay				tay 								; compare length downto 1.
.3c89					_TSOCheckLoop:
.3c89	b1 2a		lda ($2a),y			lda 	(temp0),y 					; use EOR to compare
.3c8b	59 cf 0a	eor $0acf,y			eor 	convertBuffer,y
.3c8e	29 7f		and #$7f			and 	#$7F 						; ignore bit 7
.3c90	d0 e5		bne $3c77			bne 	_TSONext 					; different goto next.
.3c92	88		dey				dey 								; do all
.3c93	d0 f4		bne $3c89			bne 	_TSOCheckLoop
.3c95	8a		txa				txa 								; return token in A and carry set
.3c96	38		sec				sec
.3c97	60		rts				rts
.3c98					_TSOFail:
.3c98	18		clc				clc
.3c99	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/test.asm

.3c9a					TokTest:
.3c9a	a2 ff		ldx #$ff				ldx 	#$FF
.3c9c	9a		txs					txs
.3c9d	a9 ba		lda #$ba			lda 	#(TokenText1) & $FF
.3c9f	85 28		sta $28				sta 	codePtr
.3ca1	a9 3c		lda #$3c			lda 	#(TokenText1) >> 8
.3ca3	85 29		sta $29				sta 	1+(codePtr)
.3ca5	20 ba 3c	jsr $3cba				jsr 	Tokenise
.3ca8	a2 00		ldx #$00	TokStop:	ldx 	#0 					; compare vs precalculated result
.3caa	bd ba 3c	lda $3cba,x	_TokCheck:	lda 	TokenBytes1,x
.3cad	dd ed 0c	cmp $0ced,x				cmp 	tokenBuffer,x
.3cb0	d0 fe		bne $3cb0	_TokFail:	bne 	_TokFail	 		; error.
.3cb2	e8		inx					inx
.3cb3	c9 80		cmp #$80				cmp 	#$80
.3cb5	d0 f3		bne $3caa				bne 	_TokCheck
.3cb7	4c ff ff	jmp $ffff				jmp 	$FFFF 				; successfully tokenised then quit.

;******  Processing file: tokeniser/tokenise/../../generated/toktest.inc

.3cba					TokenText1:
.3cba					TokenBytes1:

;******  Return to file: tokeniser/tokenise/test.asm


;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokenise.asm

.0cea					tokenHeader:
>0cea							.fill 	3
.0ced					tokenBuffer:
>0ced							.fill 	256
.0ded					tokenBufferIndex:
>0ded							.fill 	1
.3cba					Tokenise:
.3cba	20 34 3d	jsr $3d34			jsr 	TokeniseMakeASCIIZ 			; convert to ASCIIZ string.
.3cbd					TokeniseASCIIZ:
.3cbd	20 45 3d	jsr $3d45			jsr 	TokeniseFixCase 			; remove controls and lower case outside quotes.
.3cc0	a9 00		lda #$00			lda 	#0 							; reset the token buffer index
.3cc2	8d ed 0d	sta $0ded			sta 	tokenBufferIndex
.3cc5	a8		tay				tay 								; start pointer
.3cc6	a9 80		lda #$80			lda 	#$80 						; empty token buffer ($80 ends it)
.3cc8	8d ed 0c	sta $0ced			sta 	tokenBuffer
.3ccb					_TokLoop:
.3ccb	b1 28		lda ($28),y			lda 	(codePtr),y 				; get next character
.3ccd	f0 46		beq $3d15			beq 	_TokExit 					; if zero, then exit.
.3ccf	c8		iny				iny 								; skip over spaces.
.3cd0	c9 20		cmp #$20			cmp 	#" "
.3cd2	f0 f7		beq $3ccb			beq 	_TokLoop
.3cd4	88		dey				dey 								; point back to character.
.3cd5	c9 26		cmp #$26			cmp 	#"&"						; Hexadecimal constant.
.3cd7	f0 18		beq $3cf1			beq 	_TokHexConst
.3cd9	c9 22		cmp #$22			cmp 	#'"'						; Quoted String
.3cdb	f0 23		beq $3d00			beq 	_TokQString
.3cdd	c9 5b		cmp #$5b			cmp 	#"Z"+1 						; > 'Z' is punctuation
.3cdf	b0 26		bcs $3d07			bcs 	_TokPunctuation
.3ce1	c9 41		cmp #$41			cmp 	#"A" 						; A..Z identifier
.3ce3	b0 29		bcs $3d0e			bcs 	_TokIdentifier
.3ce5	c9 3a		cmp #$3a			cmp 	#"9"+1
.3ce7	b0 1e		bcs $3d07			bcs 	_TokPunctuation 			; between 9 and A exclusive, punctuation
.3ce9	c9 30		cmp #$30			cmp 	#"0"
.3ceb	90 1a		bcc $3d07			bcc 	_TokPunctuation 			; < 0, punctuation.
.3ced	a9 0a		lda #$0a			lda 	#10  						; 0..9 constant in base 10.
.3cef	d0 08		bne $3cf9			bne 	_TokConst
.3cf1					_TokHexConst:
.3cf1	c8		iny				iny									; consume token.
.3cf2	a9 c5		lda #$c5			lda 	#TKW_AMP 					; Write ampersand token out
.3cf4	20 1b 3d	jsr $3d1b			jsr 	TokenWrite
.3cf7	a9 10		lda #$10			lda 	#16
.3cf9					_TokConst:
.3cf9	20 03 3e	jsr $3e03			jsr 	TokeniseInteger
.3cfc	b0 cd		bcs $3ccb			bcs 	_TokLoop
.3cfe	90 18		bcc $3d18			bcc 	_TokFail
.3d00					_TokQString:
.3d00	20 99 3e	jsr $3e99			jsr 	TokeniseString
.3d03	b0 c6		bcs $3ccb			bcs 	_TokLoop
.3d05	90 11		bcc $3d18			bcc 	_TokFail
.3d07					_TokPunctuation:
.3d07	20 78 3e	jsr $3e78			jsr 	TokenisePunctuation
.3d0a	b0 bf		bcs $3ccb			bcs 	_TokLoop
.3d0c	90 0a		bcc $3d18			bcc 	_TokFail
.3d0e					_TokIdentifier:
.3d0e	20 74 3d	jsr $3d74			jsr 	TokeniseIdentifier
.3d11	b0 b8		bcs $3ccb			bcs 	_TokLoop
.3d13	90 03		bcc $3d18			bcc 	_TokFail
.3d15					_TokExit:
.3d15	a9 01		lda #$01			lda 	#1
.3d17	60		rts				rts
.3d18					_TokFail:
.3d18	a9 00		lda #$00			lda 	#0
.3d1a	60		rts				rts
.3d1b					TokenWrite:
.3d1b	85 32		sta $32				sta 	tempShort 					; save XA
.3d1d	48		pha				pha
.3d1e	8a		txa				txa
.3d1f	48		pha				pha
.3d20	a5 32		lda $32				lda 	tempShort
.3d22	ae ed 0d	ldx $0ded			ldx 	tokenBufferIndex 			; geet index
.3d25	9d ed 0c	sta $0ced,x			sta 	tokenBuffer,x 				; write byte to buffer
.3d28	a9 80		lda #$80			lda 	#TOK_EOL 					; pre-emptively write EOL marker after
.3d2a	9d ee 0c	sta $0cee,x			sta 	tokenBuffer+1,x
.3d2d	ee ed 0d	inc $0ded			inc 	tokenBufferIndex 			; bump index
.3d30	68		pla				pla
.3d31	aa		tax				tax
.3d32	68		pla				pla
.3d33	60		rts				rts
.3d34					TokeniseMakeASCIIZ:
.3d34	a0 00		ldy #$00			ldy 	#0							; get length of string.
.3d36	b1 28		lda ($28),y			lda 	(codePtr),y
.3d38	a8		tay				tay
.3d39	c8		iny				iny 								; +1, the NULL goes here.
.3d3a	a9 00		lda #$00			lda 	#0
.3d3c	91 28		sta ($28),y			sta 	(codePtr),y 				; write the trailing NULL.
.3d3e	e6 28		inc $28				inc 	codePtr 					; bump the pointer.
.3d40	d0 02		bne $3d44			bne 	_TMKAExit
.3d42	e6 29		inc $29				inc 	codePtr+1
.3d44					_TMKAExit:
.3d44	60		rts				rts
.3d45					TokeniseFixCase:
.3d45	a0 00		ldy #$00			ldy 	#0 							; position in buffer.
.3d47	a2 01		ldx #$01			ldx 	#1 							; bit 0 of this is 'in quotes'
.3d49					_TFCFlipQ:
.3d49	8a		txa				txa
.3d4a	49 01		eor #$01			eor 	#1
.3d4c	aa		tax				tax
.3d4d					_TFCLoop:
.3d4d	b1 28		lda ($28),y			lda 	(codePtr),y 				; get character
.3d4f	f0 22		beq $3d73			beq 	_TFCExit 					; if zero exit.
.3d51	c9 20		cmp #$20			cmp 	#32 						; if control
.3d53	90 1a		bcc $3d6f			bcc 	_TFCControl
.3d55	c8		iny				iny 								; preconsume
.3d56	c9 22		cmp #$22			cmp 	#'"'
.3d58	f0 ef		beq $3d49			beq 	_TFCFlipQ
.3d5a	c9 61		cmp #$61			cmp 	#"a"						; check if L/C
.3d5c	90 ef		bcc $3d4d			bcc 	_TFCLoop
.3d5e	c9 7b		cmp #$7b			cmp 	#"z"+1
.3d60	b0 eb		bcs $3d4d			bcs 	_TFCLoop
.3d62	e0 00		cpx #$00			cpx 	#0 							; in quotes, if so, leave alone.
.3d64	d0 e7		bne $3d4d			bne 	_TFCLoop
.3d66	88		dey				dey
.3d67	49 20		eor #$20			eor 	#"A"^"a"					; make U/C
.3d69					_TFCWrite:
.3d69	91 28		sta ($28),y			sta 	(codePtr),y
.3d6b	c8		iny				iny
.3d6c	4c 4d 3d	jmp $3d4d			jmp 	_TFCLoop
.3d6f					_TFCControl:
.3d6f	a9 20		lda #$20			lda 	#" "
.3d71	d0 f6		bne $3d69			bne 	_TFCWrite
.3d73					_TFCExit:
.3d73	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokident.asm

.3d74					TokeniseIdentifier:
.3d74	a2 00		ldx #$00			ldx 	#0
.3d76					_TICopyID:
.3d76	b1 28		lda ($28),y			lda 	(codePtr),y					; get characters
.3d78	c9 5f		cmp #$5f			cmp 	#"_" 						; underscore converted to minus internally.
.3d7a	f0 16		beq $3d92			beq 	_TICopyUnderscore
.3d7c	c9 2e		cmp #$2e			cmp 	#"."
.3d7e	f0 14		beq $3d94			beq 	_TICopyIn
.3d80	c9 30		cmp #$30			cmp 	#"0"
.3d82	90 1b		bcc $3d9f			bcc 	_TIEndCopy
.3d84	c9 3a		cmp #$3a			cmp 	#"9"+1
.3d86	90 0c		bcc $3d94			bcc 	_TICopyIn
.3d88	c9 41		cmp #$41			cmp 	#"A"
.3d8a	90 13		bcc $3d9f			bcc 	_TIEndCopy
.3d8c	c9 5b		cmp #$5b			cmp 	#"Z"+1
.3d8e	b0 0f		bcs $3d9f			bcs		_TIEndCopy
.3d90	90 02		bcc $3d94			bcc 	_TICopyIn
.3d92					_TICopyUnderScore:
.3d92	a9 2d		lda #$2d			lda 	#"-"						; _ is mapped to -
.3d94					_TICopyIn:
.3d94	e8		inx				inx 								; write into buffer in 7 bit ASCII form
.3d95	9d cf 0a	sta $0acf,x			sta 	convertBuffer,x
.3d98	8e cf 0a	stx $0acf			stx 	convertBuffer
.3d9b	c8		iny				iny 								; next character
.3d9c	4c 76 3d	jmp $3d76			jmp 	_TICopyID 					; loop round
.3d9f					_TIEndCopy:
.3d9f	a9 24		lda #$24			lda 	#"$"
.3da1	20 f6 3d	jsr $3df6			jsr 	TIDCheckCopy
.3da4	a9 23		lda #$23			lda 	#"#"
.3da6	20 f6 3d	jsr $3df6			jsr 	TIDCheckCopy
.3da9	a9 28		lda #$28			lda 	#"("
.3dab	20 f6 3d	jsr $3df6			jsr 	TIDCheckCopy
.3dae	20 2b 3c	jsr $3c2b			jsr 	TokenSearch 				; is it a token
.3db1	b0 41		bcs $3df4			bcs 	_TIExit 					; if so, then exit.
.3db3	98		tya				tya
.3db4	48		pha				pha
.3db5	a0 3a		ldy #$3a			ldy 	#$3A 						; default type.
.3db7	ae cf 0a	ldx $0acf			ldx 	convertBuffer 				; is last character (
.3dba	bd cf 0a	lda $0acf,x			lda 	convertBuffer,x
.3dbd	c9 28		cmp #$28			cmp 	#"("
.3dbf	d0 02		bne $3dc3			bne 	_TINotArray
.3dc1	ca		dex				dex 								; yes, remove it and convert to array.
.3dc2	c8		iny				iny
.3dc3					_TINotArray:
.3dc3	bd cf 0a	lda $0acf,x			lda 	convertBuffer,x 			; check for $
.3dc6	c9 24		cmp #$24			cmp 	#"$"
.3dc8	d0 03		bne $3dcd			bne 	_TINotString
.3dca	ca		dex				dex
.3dcb	c8		iny				iny
.3dcc	c8		iny				iny
.3dcd					_TINotString:
.3dcd	bd cf 0a	lda $0acf,x			lda 	convertBuffer,x 			; check for #
.3dd0	c9 23		cmp #$23			cmp 	#"#"
.3dd2	d0 05		bne $3dd9			bne 	_TINotFloat
.3dd4	ca		dex				dex
.3dd5	c8		iny				iny
.3dd6	c8		iny				iny
.3dd7	c8		iny				iny
.3dd8	c8		iny				iny
.3dd9					_TINotFloat:
.3dd9	e8		inx				inx 								; write end marker for identifier.
.3dda	98		tya				tya
.3ddb	9d cf 0a	sta $0acf,x			sta 	convertBuffer,x
.3dde	8e cf 0a	stx $0acf			stx 	convertBuffer 				; update length.
.3de1	a2 01		ldx #$01			ldx 	#1
.3de3					_TIOutput:
.3de3	bd cf 0a	lda $0acf,x			lda 	convertBuffer,x
.3de6	29 3f		and #$3f			and 	#$3F
.3de8	48		pha				pha
.3de9	20 1b 3d	jsr $3d1b			jsr 	TokenWrite
.3dec	e8		inx				inx
.3ded	68		pla				pla
.3dee	c9 3a		cmp #$3a			cmp 	#$3A
.3df0	90 f1		bcc $3de3			bcc 	_TIOutput
.3df2	68		pla				pla
.3df3	a8		tay				tay
.3df4					_TIExit:
.3df4	38		sec				sec 								; this can't fail.
.3df5	60		rts				rts
.3df6					TIDCheckCopy:
.3df6	d1 28		cmp ($28),y			cmp 	(codePtr),y
.3df8	d0 08		bne $3e02			bne 	_TIDCCExit
.3dfa	e8		inx				inx
.3dfb	9d cf 0a	sta $0acf,x			sta 	convertBuffer,x
.3dfe	8e cf 0a	stx $0acf			stx 	convertBuffer
.3e01	c8		iny				iny
.3e02					_TIDCCExit:
.3e02	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokinteger.asm

.3e03					TokeniseInteger:
.3e03	85 2c		sta $2c				sta 	temp1 						; save base
.3e05	a2 00		ldx #$00			ldx 	#0							; count of chars so far
.3e07	8e cf 0a	stx $0acf			stx 	convertBuffer
.3e0a					_TIGetChars:
.3e0a	b1 28		lda ($28),y			lda 	(codePtr),y 				; check character is numeric
.3e0c	c9 30		cmp #$30			cmp 	#"0"
.3e0e	90 1f		bcc $3e2f			bcc 	_TIEndGet
.3e10	c9 3a		cmp #$3a			cmp 	#"9"+1
.3e12	90 10		bcc $3e24			bcc 	_TIHaveChar
.3e14	a5 2c		lda $2c				lda 	temp1 						; fail if not hex mode
.3e16	c9 0a		cmp #$0a			cmp 	#10
.3e18	f0 15		beq $3e2f			beq 	_TIEndGet
.3e1a	b1 28		lda ($28),y			lda 	(codePtr),y 				; check legitimate hex.
.3e1c	c9 41		cmp #$41			cmp 	#"A"
.3e1e	90 0f		bcc $3e2f			bcc 	_TIEndGet
.3e20	c9 5b		cmp #$5b			cmp 	#"Z"+1
.3e22	b0 0b		bcs $3e2f			bcs 	_TIEndGet
.3e24					_TIHaveChar:
.3e24	e8		inx				inx 								; write into buffer.
.3e25	8e cf 0a	stx $0acf			stx 	convertBuffer
.3e28	9d cf 0a	sta $0acf,x			sta 	convertBuffer,x
.3e2b	c8		iny				iny 								; next char
.3e2c	4c 0a 3e	jmp $3e0a			jmp 	_TIGetChars
.3e2f					_TIEndGet:
.3e2f	e0 00		cpx #$00			cpx 	#0 							; no char acquired.
.3e31	f0 1c		beq $3e4f			beq 	_TIFail
.3e33	98		tya				tya
.3e34	48		pha				pha
.3e35	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.3e37	85 2a		sta $2a				sta 	temp0
.3e39	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.3e3b	85 2b		sta $2b				sta 	1+(temp0)
.3e3d	a9 00		lda #$00			lda 	#0 							; stack level 0
.3e3f	a4 2c		ldy $2c				ldy 	temp1 						; base Y
.3e41	a2 1a		ldx #$1a		ldx	#26
.3e43	20 36 37	jsr $3736		jsr	mainHandler
.3e46	68		pla				pla
.3e47	a8		tay				tay
.3e48	90 05		bcc $3e4f			bcc 	_TIFail 					; didn't convert.
.3e4a	20 51 3e	jsr $3e51			jsr 	TIRecursiveOut 				; recursive output ?
.3e4d	38		sec				sec
.3e4e	60		rts				rts
.3e4f					_TIFail:
.3e4f	18		clc				clc
.3e50	60		rts				rts
.3e51					TIRecursiveOut:
.3e51	a5 50		lda $50				lda 	esInt0 						; get value to output after possible recursion
.3e53	29 3f		and #$3f			and 	#$3F
.3e55	09 40		ora #$40			ora 	#$40
.3e57	48		pha				pha
.3e58	a5 50		lda $50				lda 	esInt0 						; are we recursing ?
.3e5a	29 c0		and #$c0			and 	#$C0
.3e5c	05 58		ora $58				ora 	esInt1
.3e5e	05 60		ora $60				ora 	esInt2
.3e60	05 68		ora $68				ora 	esInt3
.3e62	f0 10		beq $3e74			beq 	_TIRONoRecursion
.3e64	a2 06		ldx #$06			ldx 	#6 							; shift right x 6
.3e66					_TIROShift:
.3e66	46 68		lsr $68				lsr 	esInt3
.3e68	66 60		ror $60				ror 	esInt2
.3e6a	66 58		ror $58				ror 	esInt1
.3e6c	66 50		ror $50				ror 	esInt0
.3e6e	ca		dex				dex
.3e6f	d0 f5		bne $3e66			bne 	_TIROShift
.3e71	20 51 3e	jsr $3e51			jsr 	TIRecursiveOut 				; call recursively
.3e74					_TIRONoRecursion:
.3e74	68		pla				pla 								; pull the old bit.
.3e75	4c 1b 3d	jmp $3d1b			jmp 	TokenWrite

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokpunct.asm

.3e78					TokenisePunctuation:
.3e78	b1 28		lda ($28),y			lda	 	(codePtr),y 				; copy next 2 chars into convertBuffer
.3e7a	8d d0 0a	sta $0ad0			sta 	convertBuffer+1
.3e7d	c8		iny				iny
.3e7e	b1 28		lda ($28),y			lda 	(codePtr),y
.3e80	8d d1 0a	sta $0ad1			sta 	convertBuffer+2
.3e83	c8		iny				iny 								; Y is +2
.3e84	a9 02		lda #$02			lda 	#2 							; 2 character string.
.3e86	8d cf 0a	sta $0acf			sta 	convertBuffer
.3e89	20 2b 3c	jsr $3c2b			jsr 	TokenSearch 				; search for that token.
.3e8c	b0 0a		bcs $3e98			bcs 	_TIFound
.3e8e	ce cf 0a	dec $0acf			dec 	convertBuffer 				; make it a 1 character string
.3e91	88		dey				dey 								; Y is now +1
.3e92	20 2b 3c	jsr $3c2b			jsr 	TokenSearch 				; search for that token.
.3e95	b0 01		bcs $3e98			bcs 	_TIFound
.3e97	88		dey				dey 								; Y is now +0, carry clear indicating failure.
.3e98					_TIFound:
.3e98	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokstring.asm

.3e99					TokeniseString:
.3e99	c8		iny				iny 								; skip opening quote
.3e9a	a2 ff		ldx #$ff			ldx 	#255 						; count length of string.
.3e9c	84 2a		sty $2a				sty 	temp0 						; save start.
.3e9e					_TSGetLength:
.3e9e	b1 28		lda ($28),y			lda 	(codePtr),y 				; get next
.3ea0	f0 21		beq $3ec3			beq 	_TSFail						; end of line, fail
.3ea2	c8		iny				iny
.3ea3	e8		inx				inx
.3ea4	c9 22		cmp #$22			cmp 	#'"' 						; until end quote found.
.3ea6	d0 f6		bne $3e9e			bne 	_TSGetLength
.3ea8	a9 85		lda #$85			lda 	#TOK_STR 					; write string token out
.3eaa	20 1b 3d	jsr $3d1b			jsr 	TokenWrite
.3ead	8a		txa				txa 								; output length
.3eae	20 1b 3d	jsr $3d1b			jsr 	TokenWrite
.3eb1	a4 2a		ldy $2a				ldy 	temp0 						; get original position
.3eb3	e0 00		cpx #$00			cpx 	#0 							; check ended
.3eb5	f0 09		beq $3ec0			beq 	_TSExit
.3eb7					_TSOutput:
.3eb7	b1 28		lda ($28),y			lda 	(codePtr),y					; output character
.3eb9	20 1b 3d	jsr $3d1b			jsr 	TokenWrite
.3ebc	c8		iny				iny
.3ebd	ca		dex				dex
.3ebe	d0 f7		bne $3eb7			bne 	_TSOutput
.3ec0					_TSExit:
.3ec0	c8		iny				iny 								; skip ending quote
.3ec1	38		sec				sec 								; return CS.
.3ec2	60		rts				rts
.3ec3					_TSFail:
.3ec3	18		clc				clc
.3ec4	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokentext.asm

.3ec5					TokenTableAddress:
>3ec5	cd 3e						.word 	Group0Text
>3ec7	96 40						.word 	Group1Text
>3ec9	e3 41						.word 	Group2Text
>3ecb	0a 42						.word 	Group3Text

;******  Processing file: tokeniser/../generated/tokentext0.inc

.3ecd					Group0Text:
>3ecd	03 41 4e c4				.byte $03,$41,$4e,$c4                  ; $86 and
>3ed1	02 4f d2				.byte $02,$4f,$d2                      ; $87 or
>3ed4	03 58 4f d2				.byte $03,$58,$4f,$d2                  ; $88 xor
>3ed8	02 3e bd				.byte $02,$3e,$bd                      ; $89 >=
>3edb	02 3c bd				.byte $02,$3c,$bd                      ; $8a <=
>3ede	01 be					.byte $01,$be                          ; $8b >
>3ee0	01 bc					.byte $01,$bc                          ; $8c <
>3ee2	01 bd					.byte $01,$bd                          ; $8d =
>3ee4	02 3c be				.byte $02,$3c,$be                      ; $8e <>
>3ee7	01 ab					.byte $01,$ab                          ; $8f +
>3ee9	01 ad					.byte $01,$ad                          ; $90 -
>3eeb	02 3e be				.byte $02,$3e,$be                      ; $91 >>
>3eee	02 3c bc				.byte $02,$3c,$bc                      ; $92 <<
>3ef1	01 aa					.byte $01,$aa                          ; $93 *
>3ef3	01 af					.byte $01,$af                          ; $94 /
>3ef5	03 4d 4f c4				.byte $03,$4d,$4f,$c4                  ; $95 mod
>3ef9	01 de					.byte $01,$de                          ; $96 ^
>3efb	01 a1					.byte $01,$a1                          ; $97 !
>3efd	01 bf					.byte $01,$bf                          ; $98 ?
>3eff	06 52 45 50 45 41 d4			.byte $06,$52,$45,$50,$45,$41,$d4      ; $99 repeat
>3f06	05 57 48 49 4c c5			.byte $05,$57,$48,$49,$4c,$c5          ; $9a while
>3f0c	03 46 4f d2				.byte $03,$46,$4f,$d2                  ; $9b for
>3f10	02 49 c6				.byte $02,$49,$c6                      ; $9c if
>3f13	07 44 45 46 50 52 4f c3			.byte $07,$44,$45,$46,$50,$52,$4f,$c3  ; $9d defproc
>3f1b	05 55 4e 54 49 cc			.byte $05,$55,$4e,$54,$49,$cc          ; $9e until
>3f21	04 57 45 4e c4				.byte $04,$57,$45,$4e,$c4              ; $9f wend
>3f26	04 4e 45 58 d4				.byte $04,$4e,$45,$58,$d4              ; $a0 next
>3f2b	04 54 48 45 ce				.byte $04,$54,$48,$45,$ce              ; $a1 then
>3f30	05 45 4e 44 49 c6			.byte $05,$45,$4e,$44,$49,$c6          ; $a2 endif
>3f36	07 45 4e 44 50 52 4f c3			.byte $07,$45,$4e,$44,$50,$52,$4f,$c3  ; $a3 endproc
>3f3e	01 a8					.byte $01,$a8                          ; $a4 (
>3f40	04 4c 45 4e a8				.byte $04,$4c,$45,$4e,$a8              ; $a5 len(
>3f45	04 53 47 4e a8				.byte $04,$53,$47,$4e,$a8              ; $a6 sgn(
>3f4a	04 41 42 53 a8				.byte $04,$41,$42,$53,$a8              ; $a7 abs(
>3f4f	07 52 41 4e 44 4f 4d a8			.byte $07,$52,$41,$4e,$44,$4f,$4d,$a8  ; $a8 random(
>3f57	04 50 41 47 c5				.byte $04,$50,$41,$47,$c5              ; $a9 page
>3f5c	04 54 52 55 c5				.byte $04,$54,$52,$55,$c5              ; $aa true
>3f61	05 46 41 4c 53 c5			.byte $05,$46,$41,$4c,$53,$c5          ; $ab false
>3f67	04 4d 49 4e a8				.byte $04,$4d,$49,$4e,$a8              ; $ac min(
>3f6c	04 4d 41 58 a8				.byte $04,$4d,$41,$58,$a8              ; $ad max(
>3f71	04 53 59 53 a8				.byte $04,$53,$59,$53,$a8              ; $ae sys(
>3f76	06 54 49 4d 45 52 a8			.byte $06,$54,$49,$4d,$45,$52,$a8      ; $af timer(
>3f7d	06 45 56 45 4e 54 a8			.byte $06,$45,$56,$45,$4e,$54,$a8      ; $b0 event(
>3f84	04 47 45 54 a8				.byte $04,$47,$45,$54,$a8              ; $b1 get(
>3f89	06 49 4e 4b 45 59 a8			.byte $06,$49,$4e,$4b,$45,$59,$a8      ; $b2 inkey(
>3f90	06 41 4c 4c 4f 43 a8			.byte $06,$41,$4c,$4c,$4f,$43,$a8      ; $b3 alloc(
>3f97	05 43 48 52 24 a8			.byte $05,$43,$48,$52,$24,$a8          ; $b4 chr$(
>3f9d	06 4c 45 46 54 24 a8			.byte $06,$4c,$45,$46,$54,$24,$a8      ; $b5 left$(
>3fa4	05 4d 49 44 24 a8			.byte $05,$4d,$49,$44,$24,$a8          ; $b6 mid$(
>3faa	07 52 49 47 48 54 24 a8			.byte $07,$52,$49,$47,$48,$54,$24,$a8  ; $b7 right$(
>3fb2	05 53 54 52 24 a8			.byte $05,$53,$54,$52,$24,$a8          ; $b8 str$(
>3fb8	04 56 41 4c a8				.byte $04,$56,$41,$4c,$a8              ; $b9 val(
>3fbd	05 50 45 45 4b a8			.byte $05,$50,$45,$45,$4b,$a8          ; $ba peek(
>3fc3	05 44 45 45 4b a8			.byte $05,$44,$45,$45,$4b,$a8          ; $bb deek(
>3fc9	05 4c 45 45 4b a8			.byte $05,$4c,$45,$45,$4b,$a8          ; $bc leek(
>3fcf	04 41 53 43 a8				.byte $04,$41,$53,$43,$a8              ; $bd asc(
>3fd4	04 49 4e 54 a8				.byte $04,$49,$4e,$54,$a8              ; $be int(
>3fd9	06 46 4c 4f 41 54 a8			.byte $06,$46,$4c,$4f,$41,$54,$a8      ; $bf float(
>3fe0	06 49 53 56 41 4c a8			.byte $06,$49,$53,$56,$41,$4c,$a8      ; $c0 isval(
>3fe7	07 55 50 50 45 52 24 a8			.byte $07,$55,$50,$50,$45,$52,$24,$a8  ; $c1 upper$(
>3fef	07 4c 4f 57 45 52 24 a8			.byte $07,$4c,$4f,$57,$45,$52,$24,$a8  ; $c2 lower$(
>3ff7	01 c0					.byte $01,$c0                          ; $c3 @
>3ff9	01 fe					.byte $01,$fe                          ; $c4 ~
>3ffb	01 a6					.byte $01,$a6                          ; $c5 &
>3ffd	05 47 45 54 24 a8			.byte $05,$47,$45,$54,$24,$a8          ; $c6 get$(
>4003	07 49 4e 4b 45 59 24 a8			.byte $07,$49,$4e,$4b,$45,$59,$24,$a8  ; $c7 inkey$(
>400b	03 4d 45 cd				.byte $03,$4d,$45,$cd                  ; $c8 mem
>400f	01 a9					.byte $01,$a9                          ; $c9 )
>4011	01 ba					.byte $01,$ba                          ; $ca :
>4013	01 ac					.byte $01,$ac                          ; $cb ,
>4015	01 bb					.byte $01,$bb                          ; $cc ;
>4017	01 a7					.byte $01,$a7                          ; $cd '
>4019	02 54 cf				.byte $02,$54,$cf                      ; $ce to
>401c	04 53 54 45 d0				.byte $04,$53,$54,$45,$d0              ; $cf step
>4021	04 50 52 4f c3				.byte $04,$50,$52,$4f,$c3              ; $d0 proc
>4026	05 4c 4f 43 41 cc			.byte $05,$4c,$4f,$43,$41,$cc          ; $d1 local
>402c	03 44 49 cd				.byte $03,$44,$49,$cd                  ; $d2 dim
>4030	03 52 45 cd				.byte $03,$52,$45,$cd                  ; $d3 rem
>4034	03 4c 45 d4				.byte $03,$4c,$45,$d4                  ; $d4 let
>4038	05 49 4e 50 55 d4			.byte $05,$49,$4e,$50,$55,$d4          ; $d5 input
>403e	04 45 4c 53 c5				.byte $04,$45,$4c,$53,$c5              ; $d6 else
>4043	03 56 44 d5				.byte $03,$56,$44,$d5                  ; $d7 vdu
>4047	05 50 52 49 4e d4			.byte $05,$50,$52,$49,$4e,$d4          ; $d8 print
>404d	04 44 41 54 c1				.byte $04,$44,$41,$54,$c1              ; $d9 data
>4052	05 49 4d 41 47 c5			.byte $05,$49,$4d,$41,$47,$c5          ; $da image
>4058	02 41 d4				.byte $02,$41,$d4                      ; $db at
>405b	04 46 4c 49 d0				.byte $04,$46,$4c,$49,$d0              ; $dc flip
>4060	06 41 53 53 45 52 d4			.byte $06,$41,$53,$53,$45,$52,$d4      ; $dd assert
>4067	04 50 4f 4b c5				.byte $04,$50,$4f,$4b,$c5              ; $de poke
>406c	04 44 4f 4b c5				.byte $04,$44,$4f,$4b,$c5              ; $df doke
>4071	04 4c 4f 4b c5				.byte $04,$4c,$4f,$4b,$c5              ; $e0 loke
>4076	03 49 4e cb				.byte $03,$49,$4e,$cb                  ; $e1 ink
>407a	05 50 41 50 45 d2			.byte $05,$50,$41,$50,$45,$d2          ; $e2 paper
>4080	03 43 4c d3				.byte $03,$43,$4c,$d3                  ; $e3 cls
>4084	06 4c 4f 43 41 54 c5			.byte $06,$4c,$4f,$43,$41,$54,$c5      ; $e4 locate
>408b	01 ae					.byte $01,$ae                          ; $e5 .
>408d	01 a3					.byte $01,$a3                          ; $e6 #
>408f	05 43 4c 45 41 d2			.byte $05,$43,$4c,$45,$41,$d2          ; $e7 clear
>4095	00					.byte $00

;******  Return to file: tokeniser/tokentext.asm


;******  Processing file: tokeniser/../generated/tokentext1.inc

.4096					Group1Text:
>4096	04 4c 4f 41 c4				.byte $04,$4c,$4f,$41,$c4              ; $86 load
>409b	04 53 41 56 c5				.byte $04,$53,$41,$56,$c5              ; $87 save
>40a0	04 4c 49 53 d4				.byte $04,$4c,$49,$53,$d4              ; $88 list
>40a5	03 4e 45 d7				.byte $03,$4e,$45,$d7                  ; $89 new
>40a9	05 42 52 45 41 cb			.byte $05,$42,$52,$45,$41,$cb          ; $8a break
>40af	03 52 55 ce				.byte $03,$52,$55,$ce                  ; $8b run
>40b3	04 52 45 41 c4				.byte $04,$52,$45,$41,$c4              ; $8c read
>40b8	07 52 45 53 54 4f 52 c5			.byte $07,$52,$45,$53,$54,$4f,$52,$c5  ; $8d restore
>40c0	03 45 4e c4				.byte $03,$45,$4e,$c4                  ; $8e end
>40c4	04 53 54 4f d0				.byte $04,$53,$54,$4f,$d0              ; $8f stop
>40c9	04 58 45 4d d5				.byte $04,$58,$45,$4d,$d5              ; $90 xemu
>40ce	04 47 4f 54 cf				.byte $04,$47,$4f,$54,$cf              ; $91 goto
>40d3	05 47 4f 53 55 c2			.byte $05,$47,$4f,$53,$55,$c2          ; $92 gosub
>40d9	06 52 45 54 55 52 ce			.byte $06,$52,$45,$54,$55,$52,$ce      ; $93 return
>40e0	03 4f 52 c1				.byte $03,$4f,$52,$c1                  ; $94 ora
>40e4	05 28 41 4e 44 a9			.byte $05,$28,$41,$4e,$44,$a9          ; $95 (and)
>40ea	03 45 4f d2				.byte $03,$45,$4f,$d2                  ; $96 eor
>40ee	03 41 44 c3				.byte $03,$41,$44,$c3                  ; $97 adc
>40f2	03 53 54 c1				.byte $03,$53,$54,$c1                  ; $98 sta
>40f6	03 4c 44 c1				.byte $03,$4c,$44,$c1                  ; $99 lda
>40fa	03 43 4d d0				.byte $03,$43,$4d,$d0                  ; $9a cmp
>40fe	03 53 42 c3				.byte $03,$53,$42,$c3                  ; $9b sbc
>4102	03 41 53 cc				.byte $03,$41,$53,$cc                  ; $9c asl
>4106	03 52 4f cc				.byte $03,$52,$4f,$cc                  ; $9d rol
>410a	03 4c 53 d2				.byte $03,$4c,$53,$d2                  ; $9e lsr
>410e	03 52 4f d2				.byte $03,$52,$4f,$d2                  ; $9f ror
>4112	03 53 54 d8				.byte $03,$53,$54,$d8                  ; $a0 stx
>4116	03 4c 44 d8				.byte $03,$4c,$44,$d8                  ; $a1 ldx
>411a	03 44 45 c3				.byte $03,$44,$45,$c3                  ; $a2 dec
>411e	03 49 4e c3				.byte $03,$49,$4e,$c3                  ; $a3 inc
>4122	03 53 54 da				.byte $03,$53,$54,$da                  ; $a4 stz
>4126	03 42 49 d4				.byte $03,$42,$49,$d4                  ; $a5 bit
>412a	03 53 54 d9				.byte $03,$53,$54,$d9                  ; $a6 sty
>412e	03 4c 44 d9				.byte $03,$4c,$44,$d9                  ; $a7 ldy
>4132	03 43 50 d9				.byte $03,$43,$50,$d9                  ; $a8 cpy
>4136	03 43 50 d8				.byte $03,$43,$50,$d8                  ; $a9 cpx
>413a	03 54 53 c2				.byte $03,$54,$53,$c2                  ; $aa tsb
>413e	03 54 52 c2				.byte $03,$54,$52,$c2                  ; $ab trb
>4142	03 4a 53 d2				.byte $03,$4a,$53,$d2                  ; $ac jsr
>4146	03 4a 4d d0				.byte $03,$4a,$4d,$d0                  ; $ad jmp
>414a	03 42 50 cc				.byte $03,$42,$50,$cc                  ; $ae bpl
>414e	03 42 4d c9				.byte $03,$42,$4d,$c9                  ; $af bmi
>4152	03 42 56 c3				.byte $03,$42,$56,$c3                  ; $b0 bvc
>4156	03 42 56 d3				.byte $03,$42,$56,$d3                  ; $b1 bvs
>415a	03 42 43 c3				.byte $03,$42,$43,$c3                  ; $b2 bcc
>415e	03 42 43 d3				.byte $03,$42,$43,$d3                  ; $b3 bcs
>4162	03 42 4e c5				.byte $03,$42,$4e,$c5                  ; $b4 bne
>4166	03 42 45 d1				.byte $03,$42,$45,$d1                  ; $b5 beq
>416a	03 42 52 c1				.byte $03,$42,$52,$c1                  ; $b6 bra
>416e	03 42 52 cb				.byte $03,$42,$52,$cb                  ; $b7 brk
>4172	03 50 48 d0				.byte $03,$50,$48,$d0                  ; $b8 php
>4176	03 43 4c c3				.byte $03,$43,$4c,$c3                  ; $b9 clc
>417a	03 50 4c d0				.byte $03,$50,$4c,$d0                  ; $ba plp
>417e	03 53 45 c3				.byte $03,$53,$45,$c3                  ; $bb sec
>4182	03 52 54 c9				.byte $03,$52,$54,$c9                  ; $bc rti
>4186	03 50 48 c1				.byte $03,$50,$48,$c1                  ; $bd pha
>418a	03 43 4c c9				.byte $03,$43,$4c,$c9                  ; $be cli
>418e	03 50 48 d9				.byte $03,$50,$48,$d9                  ; $bf phy
>4192	03 52 54 d3				.byte $03,$52,$54,$d3                  ; $c0 rts
>4196	03 50 4c c1				.byte $03,$50,$4c,$c1                  ; $c1 pla
>419a	03 53 45 c9				.byte $03,$53,$45,$c9                  ; $c2 sei
>419e	03 50 4c d9				.byte $03,$50,$4c,$d9                  ; $c3 ply
>41a2	03 44 45 d9				.byte $03,$44,$45,$d9                  ; $c4 dey
>41a6	03 54 58 c1				.byte $03,$54,$58,$c1                  ; $c5 txa
>41aa	03 54 59 c1				.byte $03,$54,$59,$c1                  ; $c6 tya
>41ae	03 54 58 d3				.byte $03,$54,$58,$d3                  ; $c7 txs
>41b2	03 54 41 d9				.byte $03,$54,$41,$d9                  ; $c8 tay
>41b6	03 54 41 d8				.byte $03,$54,$41,$d8                  ; $c9 tax
>41ba	03 43 4c d6				.byte $03,$43,$4c,$d6                  ; $ca clv
>41be	03 54 53 d8				.byte $03,$54,$53,$d8                  ; $cb tsx
>41c2	03 49 4e d9				.byte $03,$49,$4e,$d9                  ; $cc iny
>41c6	03 44 45 d8				.byte $03,$44,$45,$d8                  ; $cd dex
>41ca	03 43 4c c4				.byte $03,$43,$4c,$c4                  ; $ce cld
>41ce	03 50 48 d8				.byte $03,$50,$48,$d8                  ; $cf phx
>41d2	03 49 4e d8				.byte $03,$49,$4e,$d8                  ; $d0 inx
>41d6	03 4e 4f d0				.byte $03,$4e,$4f,$d0                  ; $d1 nop
>41da	03 53 45 c4				.byte $03,$53,$45,$c4                  ; $d2 sed
>41de	03 50 4c d8				.byte $03,$50,$4c,$d8                  ; $d3 plx
>41e2	00					.byte $00

;******  Return to file: tokeniser/tokentext.asm


;******  Processing file: tokeniser/../generated/tokentext2.inc

.41e3					Group2Text:
>41e3	05 56 50 4f 4b c5			.byte $05,$56,$50,$4f,$4b,$c5          ; $86 vpoke
>41e9	05 56 44 4f 4b c5			.byte $05,$56,$44,$4f,$4b,$c5          ; $87 vdoke
>41ef	05 56 4c 4f 41 c4			.byte $05,$56,$4c,$4f,$41,$c4          ; $88 vload
>41f5	04 4d 4f 44 c5				.byte $04,$4d,$4f,$44,$c5              ; $89 mode
>41fa	07 50 41 4c 45 54 54 c5			.byte $07,$50,$41,$4c,$45,$54,$54,$c5  ; $8a palette
>4202	06 53 50 52 49 54 c5			.byte $06,$53,$50,$52,$49,$54,$c5      ; $8b sprite
>4209	00					.byte $00

;******  Return to file: tokeniser/tokentext.asm


;******  Processing file: tokeniser/../generated/tokentext3.inc

.420a					Group3Text:
>420a	06 56 50 45 45 4b a8			.byte $06,$56,$50,$45,$45,$4b,$a8      ; $86 vpeek(
>4211	06 56 44 45 45 4b a8			.byte $06,$56,$44,$45,$45,$4b,$a8      ; $87 vdeek(
>4218	09 53 50 52 49 54 45 2e			.byte $09,$53,$50,$52,$49,$54,$45,$2e,$58,$a8 ; $88 sprite.x(
>4220	58 a8
>4222	09 53 50 52 49 54 45 2e			.byte $09,$53,$50,$52,$49,$54,$45,$2e,$59,$a8 ; $89 sprite.y(
>422a	59 a8
>422c	04 48 49 54 a8				.byte $04,$48,$49,$54,$a8              ; $8a hit(
>4231	06 4a 4f 59 2e 58 a8			.byte $06,$4a,$4f,$59,$2e,$58,$a8      ; $8b joy.x(
>4238	06 4a 4f 59 2e 59 a8			.byte $06,$4a,$4f,$59,$2e,$59,$a8      ; $8c joy.y(
>423f	06 4a 4f 59 2e 42 a8			.byte $06,$4a,$4f,$59,$2e,$42,$a8      ; $8d joy.b(
>4246	06 43 4c 4f 43 4b a8			.byte $06,$43,$4c,$4f,$43,$4b,$a8      ; $8e clock(
>424d	00					.byte $00

;******  Return to file: tokeniser/tokentext.asm


;******  Return to file: tokeniser/tokeniser.asm

.424e					tokeniserHandler:
.424e	7c 51 42	jmp ($4251,x)			jmp 	(tokeniserVectors,x)
.4251					tokeniserVectors:
>4251	5d 42					.word _DummyControlHandler ; index 0
>4253	15 3a					.word Detokenise           ; index 2
>4255	09 3a					.word ListLine             ; index 4
>4257	9a 3c					.word TokTest              ; index 6
>4259	ba 3c					.word Tokenise             ; index 8
>425b	bd 3c					.word TokeniseASCIIZ       ; index 10
.425d					_DummyControlHandler:
.425d	60		rts			rts

;******  Return to file: basic.asm

.425e					section_end_tokeniser:
.425e					section_start_variable:

;******  Processing file: variable/variable.asm


;******  Processing file: variable/array/access.asm

.425e					AccessArray:
.425e	8a		txa				txa
.425f	48		pha				pha
.4260	e8		inx				inx
.4261	20 2a 43	jsr $432a			jsr 	GetArrayDimensions 			; get the array dimensions one up from here.
.4264	68		pla				pla
.4265	aa		tax				tax
.4266	b5 50		lda $50,x			lda 	esInt0,x 					; restore address to follow in temp0.
.4268	85 2a		sta $2a				sta 	temp0
.426a	b5 58		lda $58,x			lda 	esInt1,x
.426c	85 2b		sta $2b				sta 	temp0+1
.426e	8a		txa				txa
.426f	48		pha				pha
.4270	98		tya				tya
.4271	48		pha				pha
.4272					_AAFollow:
.4272	a0 00		ldy #$00			ldy 	#0
.4274	b1 2a		lda ($2a),y			lda 	(temp0),y
.4276	48		pha				pha
.4277	c8		iny				iny
.4278	b1 2a		lda ($2a),y			lda 	(temp0),y
.427a	85 2b		sta $2b				sta 	temp0+1
.427c	68		pla				pla
.427d	85 2a		sta $2a				sta 	temp0
.427f	e8		inx				inx 								; advance to next stack slot.
.4280	a0 00		ldy #$00			ldy 	#0
.4282	b1 2a		lda ($2a),y			lda 	(temp0),y 					; compare max index vs required index
.4284	d5 50		cmp $50,x			cmp 	esInt0,x
.4286	c8		iny				iny
.4287	b1 2a		lda ($2a),y			lda 	(temp0),y 					; drop bit 7 of the size, indicates follow.
.4289	85 2c		sta $2c				sta 	temp1 						; save the size in temp1 for later use.
.428b	29 7f		and #$7f			and 	#$7F
.428d	f5 58		sbc $58,x			sbc 	esInt1,x
.428f	90 50		bcc $42e1			bcc 	_AABadIndex 				; failed on index if max index < required.
.4291	18		clc				clc
.4292	a5 2a		lda $2a				lda 	temp0
.4294	69 02		adc #$02			adc 	#2
.4296	85 2a		sta $2a				sta 	temp0
.4298	90 02		bcc $429c			bcc 	_AANoCarry
.429a	e6 2b		inc $2b				inc 	temp0+1
.429c					_AANoCarry:
.429c	b5 50		lda $50,x			lda 	esInt0,x
.429e	85 2e		sta $2e				sta 	temp2
.42a0	b5 58		lda $58,x			lda 	esInt1,x
.42a2	85 2f		sta $2f				sta 	temp2+1
.42a4	ac f0 0d	ldy $0df0			ldy 	varType
.42a7	b9 84 43	lda $4384,y			lda 	CAActualSize-$3A,y
.42aa	b4 49		ldy $49,x			ldy 	esType+1,x 					; is it top level
.42ac	30 02		bmi $42b0			bmi 	_AANotPointer
.42ae	a9 02		lda #$02			lda 	#2 							; array of pointers is 2.
.42b0					_AANotPointer:
.42b0	20 2e 44	jsr $442e			jsr 	MultiplyTemp2ByA 			; multiply the index by the data size, in temp2.
.42b3	18		clc				clc
.42b4	a5 2a		lda $2a				lda 	temp0
.42b6	65 2e		adc $2e				adc 	temp2
.42b8	85 2a		sta $2a				sta 	temp0
.42ba	a5 2b		lda $2b				lda 	temp0+1
.42bc	65 2f		adc $2f				adc 	temp2+1
.42be	85 2b		sta $2b				sta 	temp0+1
.42c0	b5 49		lda $49,x			lda 	esType+1,x
.42c2	30 07		bmi $42cb			bmi 	_AAUsedAllIndices
.42c4	a5 2c		lda $2c				lda 	temp1 						; check if this is a pointer array e.g. there are subarrays
.42c6	10 14		bpl $42dc			bpl 	_AABadDepth 				; no, too many indexes.
.42c8	4c 72 42	jmp $4272			jmp 	_AAFollow 					; otherwise follow them.
.42cb					_AAUsedAllIndices:
.42cb	a5 2c		lda $2c				lda 	temp1 						; get original high length byte.
.42cd	30 0d		bmi $42dc			bmi 	_AABadDepth 				; if -ve then this is an array of pointers.
.42cf	68		pla				pla
.42d0	a8		tay				tay
.42d1	68		pla				pla
.42d2	aa		tax				tax
.42d3	a5 2a		lda $2a				lda 	temp0 						; copy address of array element to stack,x
.42d5	95 50		sta $50,x			sta 	esInt0,x
.42d7	a5 2b		lda $2b				lda 	temp0+1
.42d9	95 58		sta $58,x			sta 	esInt1,x
.42db	60		rts				rts
.42dc					_AABadDepth:
.42dc	a2 1c		ldx #$1c			ldx 	#ErrorID_ArrayDepth
.42de	20 18 15	jsr $1518		jsr	errorHandler
.42e1					_AABadIndex:
.42e1	a2 1b		ldx #$1b			ldx 	#ErrorID_ArrayIndex
.42e3	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: variable/variable.asm


;******  Processing file: variable/array/create.asm

.0dee					elementSize:
>0dee							.fill	 1
.42e6					CreateArray:
.42e6	20 bd 44	jsr $44bd			jsr 	AccessSetup 				; set up the basic stuff.
.42e9	ad f0 0d	lda $0df0			lda 	varType 					; is the variable type an array
.42ec	4a		lsr a				lsr 	a
.42ed	90 36		bcc $4325			bcc 	CANotArray 					; no, cause an error.
.42ef	20 c6 45	jsr $45c6			jsr 	FindVariable 				; does the variable exist already
.42f2	b0 2c		bcs $4320			bcs 	CAFound 					; cannot redefine it.
.42f4	20 fa 44	jsr $44fa			jsr 	CreateVariable 				; create the variable entry.
.42f7	a5 2a		lda $2a				lda 	temp0 						; push address of new variable entry on the stack
.42f9	48		pha				pha
.42fa	a5 2b		lda $2b				lda 	temp0+1
.42fc	48		pha				pha
.42fd	a2 00		ldx #$00			ldx 	#0
.42ff	20 2a 43	jsr $432a			jsr 	GetArrayDimensions 			; get the array dimensions
.4302	a2 00		ldx #$00			ldx 	#0 							; create at level $00
.4304	20 5a 43	jsr $435a			jsr 	CreateArrayLevel 			; level to YA
.4307	aa		tax				tax 								; level now in YX
.4308	68		pla				pla 								; get address back to temp0 to write.
.4309	85 2b		sta $2b				sta 	temp0+1
.430b	68		pla				pla
.430c	85 2a		sta $2a				sta 	temp0
.430e	98		tya				tya 								; write YX there.
.430f	a0 06		ldy #$06			ldy 	#6
.4311	91 2a		sta ($2a),y			sta 	(temp0),y
.4313	88		dey				dey
.4314	8a		txa				txa
.4315	91 2a		sta ($2a),y			sta 	(temp0),y
.4317	ac f1 0d	ldy $0df1			ldy 	varEnd 						; restore Y and exit.
.431a	60		rts				rts
.431b					CASize:
.431b	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.431d	20 18 15	jsr $1518		jsr	errorHandler
.4320					CAFound:
.4320	a2 19		ldx #$19			ldx 	#ErrorID_DupArray
.4322	20 18 15	jsr $1518		jsr	errorHandler
.4325					CANotArray:
.4325	a2 1a		ldx #$1a			ldx 	#ErrorID_NotArray
.4327	20 18 15	jsr $1518		jsr	errorHandler
.432a					GetArrayDimensions:
.432a	ad f0 0d	lda $0df0			lda 	varType 					; push variable type on the stack.
.432d	48		pha				pha
.432e	ac f1 0d	ldy $0df1			ldy 	varEnd
.4331					_CAGetDimensions:
.4331	8a		txa				txa 								; get the next level
.4332	a2 0a		ldx #$0a		ldx	#10
.4334	20 36 37	jsr $3736		jsr	mainHandler
.4337	aa		tax				tax
.4338	b5 58		lda $58,x			lda 	esInt1,x 					; index must be < 8192
.433a	29 e0		and #$e0			and 	#$E0
.433c	15 60		ora $60,x			ora 	esInt2,x
.433e	15 68		ora $68,x			ora 	esInt3,x
.4340	d0 d9		bne $431b			bne 	CASize
.4342	e8		inx				inx 								; next level.
.4343	b1 28		lda ($28),y			lda 	(codePtr),y 				; get/consume following character
.4345	c8		iny				iny
.4346	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; loop back if more dimensions
.4348	f0 e7		beq $4331			beq 	_CAGetDimensions
.434a	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN 				; right bracket ?
.434c	d0 cd		bne $431b			bne 	CASize
.434e	a9 ff		lda #$ff			lda 	#$FF 						; set the type past the end to $FF so we know how many
.4350	95 48		sta $48,x			sta 	esType,x 					; dimensions there are.
.4352	68		pla				pla 								; restore the variable type ($3A-$3F)
.4353	8d f0 0d	sta $0df0			sta 	varType
.4356	8c f1 0d	sty $0df1			sty 	varEnd 						; save exit Y value, after dimensions
.4359	60		rts				rts
.435a					CreateArrayLevel:
.435a	ac f0 0d	ldy $0df0			ldy 	varType
.435d	b9 84 43	lda $4384,y			lda 	CAActualSize-$3A,y
.4360	8d ee 0d	sta $0dee			sta 	elementSize 				; get element size this level.
.4363	b4 49		ldy $49,x			ldy 	esType+1,x 					; is it top level
.4365	30 05		bmi $436c			bmi 	_CANotPointer
.4367	a9 02		lda #$02			lda 	#2 							; array of pointers is 2.
.4369	8d ee 0d	sta $0dee			sta 	elementSize
.436c					_CANotPointer:
.436c	a5 35		lda $35				lda 	lowMemory 					; start creating at temp0, saving start on stack.
.436e	85 2a		sta $2a				sta 	temp0
.4370	48		pha				pha
.4371	a5 36		lda $36				lda 	lowMemory+1
.4373	85 2b		sta $2b				sta 	temp0+1
.4375	48		pha				pha
.4376	20 f7 43	jsr $43f7			jsr 	AllocateArraySpace 			; allocate space for all array stuff at this level.
.4379	a0 00		ldy #$00			ldy 	#0
.437b	b5 50		lda $50,x			lda 	esInt0,x
.437d	91 2a		sta ($2a),y			sta 	(temp0),y
.437f	c8		iny				iny
.4380	b5 58		lda $58,x			lda 	esInt1,x
.4382	91 2a		sta ($2a),y			sta 	(temp0),y
.4384	b5 49		lda $49,x			lda 	esType+1,x 					; do we have another level ?
.4386	30 06		bmi $438e			bmi 	_CALNotLast
.4388	b1 2a		lda ($2a),y			lda 	(temp0),y 					; set bit 7, indicates an array of pointers to other levels.
.438a	09 80		ora #$80			ora 	#$80
.438c	91 2a		sta ($2a),y			sta 	(temp0),y
.438e					_CALNotLast:
.438e	a9 02		lda #$02			lda 	#2
.4390	20 b4 43	jsr $43b4			jsr 	_CALAddTemp0
.4393	b5 50		lda $50,x			lda 	esInt0,x 					; copy stack:01 to stack:23 so we can use it to
.4395	95 60		sta $60,x			sta 	esInt2,x 					; count.
.4397	b5 58		lda $58,x			lda 	esInt1,x
.4399	95 68		sta $68,x			sta 	esInt3,x
.439b					_CALClear:
.439b	20 c4 43	jsr $43c4			jsr 	EraseOneElement
.439e	ad ee 0d	lda $0dee			lda 	elementSize 				; move to next element
.43a1	20 b4 43	jsr $43b4			jsr 	_CALAddTemp0
.43a4	b5 60		lda $60,x			lda 	esInt2,x 					; decrement counter
.43a6	d0 02		bne $43aa			bne 	_CALNoBorrow
.43a8	d6 68		dec $68,x			dec 	esInt3,x
.43aa					_CALNoBorrow:
.43aa	d6 60		dec $60,x			dec 	esInt2,x
.43ac	b5 68		lda $68,x			lda 	esInt3,x 					; loop back if >= 0 - we need +1 because indices
.43ae	10 eb		bpl $439b			bpl 	_CALClear 					; start at 0 e.g. x(10) is actually 11 array entries.
.43b0	68		pla				pla 								; restore the start of this into YA.
.43b1	a8		tay				tay
.43b2	68		pla				pla
.43b3	60		rts				rts
.43b4					_CALAddTemp0:
.43b4	18		clc				clc
.43b5	65 2a		adc $2a				adc 	temp0
.43b7	85 2a		sta $2a				sta 	temp0
.43b9	90 02		bcc $43bd			bcc 	_CALANoCarry
.43bb	e6 2b		inc $2b				inc 	temp0+1
.43bd					_CALANoCarry:
.43bd	60		rts				rts
.43be					CAActualSize:
>43be	04 04						.byte 	VarISize,VarISize
>43c0	02 02						.byte 	VarSSize,VarSSize
>43c2	06 06						.byte 	VarFSize,VarFSize
.43c4					EraseOneElement:
.43c4	b5 49		lda $49,x			lda 	esType+1,x 					; is this a list of sub arrays
.43c6	10 09		bpl $43d1			bpl 	_EOESubArray
.43c8	a0 00		ldy #$00			ldy 	#0 							; write the empty variable value out.
.43ca	ad f0 0d	lda $0df0			lda 	varType
.43cd	20 64 45	jsr $4564			jsr 	ZeroTemp0Y
.43d0	60		rts				rts
.43d1					_EOESubArray:
.43d1	a5 2a		lda $2a				lda 	temp0 						; save temp0, these are effectively locals.
.43d3	48		pha				pha
.43d4	a5 2b		lda $2b				lda 	temp0+1
.43d6	48		pha				pha
.43d7	ad ee 0d	lda $0dee			lda 	elementSize 				; save element size
.43da	48		pha				pha
.43db	e8		inx				inx 								; create at next level
.43dc	20 5a 43	jsr $435a			jsr 	CreateArrayLevel
.43df	ca		dex				dex
.43e0	85 32		sta $32				sta 	tempShort 					; save A
.43e2	68		pla				pla  								; restore element size.
.43e3	8d ee 0d	sta $0dee			sta 	elementSize
.43e6	68		pla				pla 								; restore temp0, which is where this new array level goes.
.43e7	85 2b		sta $2b				sta 	temp0+1
.43e9	68		pla				pla
.43ea	85 2a		sta $2a				sta 	temp0
.43ec	98		tya				tya 								; store Y/A there
.43ed	a0 01		ldy #$01			ldy 	#1
.43ef	91 2a		sta ($2a),y			sta 	(temp0),y
.43f1	a5 32		lda $32				lda 	tempShort
.43f3	88		dey				dey
.43f4	91 2a		sta ($2a),y			sta 	(temp0),y
.43f6	60		rts				rts
.43f7					AllocateArraySpace:
.43f7	18		clc				clc 								; element count + 1 => temp2.
.43f8	b5 50		lda $50,x			lda 	esInt0,x
.43fa	69 01		adc #$01			adc 	#1
.43fc	85 2e		sta $2e				sta 	temp2
.43fe	b5 58		lda $58,x			lda 	esInt1,x
.4400	69 00		adc #$00			adc 	#0
.4402	85 2f		sta $2f				sta 	temp2+1
.4404	ad ee 0d	lda $0dee			lda 	elementSize 				; bytes per element
.4407	20 2e 44	jsr $442e			jsr 	MultiplyTemp2ByA 			; temp2 = (count + 1) x bytes per element.
.440a	18		clc				clc 								; add 2 for 'max element' byte.
.440b	a5 2e		lda $2e				lda 	temp2
.440d	69 02		adc #$02			adc 	#2
.440f	85 2e		sta $2e				sta 	temp2
.4411	90 02		bcc $4415			bcc 	_AASNoCarry
.4413	e6 2f		inc $2f				inc 	temp2+1
.4415					_AASNoCarry:
.4415	18		clc				clc 								; add to low memory, allocating space.
.4416	a5 35		lda $35				lda 	lowMemory
.4418	65 2e		adc $2e				adc 	temp2
.441a	85 35		sta $35				sta 	lowMemory
.441c	a5 36		lda $36				lda 	lowMemory+1
.441e	65 2f		adc $2f				adc 	temp2+1
.4420	85 36		sta $36				sta 	lowMemory+1
.4422	b0 05		bcs $4429			bcs 	_AASFail 					; out of memory as adding causes wrapround
.4424	c5 34		cmp $34				cmp 	highMemory+1 				; >= high memory pointer.
.4426	b0 01		bcs $4429			bcs 	_AASFail
.4428	60		rts				rts
.4429					_AASFail:
.4429	a2 22		ldx #$22			ldx 	#ErrorID_Memory
.442b	20 18 15	jsr $1518		jsr	errorHandler
.442e					MultiplyTemp2ByA:
.442e	48		pha				pha
.442f	a5 2e		lda $2e				lda 	temp2 						; copy temp2 to temp3.
.4431	85 30		sta $30				sta 	temp3
.4433	a5 2f		lda $2f				lda 	temp2+1
.4435	85 31		sta $31				sta 	temp3+1
.4437	68		pla				pla
.4438	06 2e		asl $2e				asl 	temp2 						; double it.
.443a	26 2f		rol $2f				rol 	temp2+1
.443c	c9 02		cmp #$02			cmp 	#2 							; if x 2 then exit.
.443e	f0 15		beq $4455			beq 	_MTBAExit
.4440	c9 06		cmp #$06			cmp 	#6 							; if x 6 then add temp3 to temp2
.4442	d0 0d		bne $4451			bne 	_MTBANotFloat
.4444	18		clc				clc 								; so this will make it x 3
.4445	a5 2e		lda $2e				lda 	temp2
.4447	65 30		adc $30				adc 	temp3
.4449	85 2e		sta $2e				sta 	temp2
.444b	a5 2f		lda $2f				lda 	temp2+1
.444d	65 31		adc $31				adc 	temp3+1
.444f	85 2f		sta $2f				sta 	temp2+1
.4451					_MTBANotFloat:
.4451	06 2e		asl $2e				asl 	temp2 						; double it.
.4453	26 2f		rol $2f				rol 	temp2+1
.4455					_MTBAExit:
.4455	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/variable/access.asm

.0def					varHash:
>0def							.fill	1
.0df0					varType:
>0df0							.fill 	1
.0df1					varEnd:
>0df1							.fill 	1
.003b					hashList:
>003b							.fill 	2
.4456					AccessVariable:
.4456	aa		tax				tax 								; stack in X
.4457	c8		iny				iny									; look at second character
.4458	b1 28		lda ($28),y			lda 	(codePtr),y
.445a	88		dey				dey
.445b	c9 3a		cmp #$3a			cmp 	#TYPE_INT 					; is it the integer marker ($3A)
.445d	d0 15		bne $4474			bne 	_AVLong 					; no, always use the hash tables.
.445f	b1 28		lda ($28),y			lda 	(codePtr),y 				; this is the 6 bit ASCII of A-Z 1-26
.4461	38		sec				sec 	 							; make it 0-25
.4462	e9 01		sbc #$01			sbc 	#1
.4464	0a		asl a				asl 	a 							; x 4 as 4 bytes / variable.
.4465	0a		asl a				asl 	a
.4466	95 50		sta $50,x			sta 	esInt0,x
.4468	a9 0a		lda #$0a			lda 	#SingleLetterVar >> 8 		; make it an address
.446a	95 58		sta $58,x			sta 	esInt1,x
.446c	a9 80		lda #$80			lda 	#$80 						; type is an integer reference.
.446e	95 48		sta $48,x			sta 	esType,x
.4470	c8		iny				iny 								; skip over the variable reference in the code.
.4471	c8		iny				iny  								; (1 letter, 1 type)
.4472	8a		txa				txa 								; stack in A to return.
.4473	60		rts				rts
.4474					_AVLong:
.4474	8a		txa				txa
.4475	48		pha				pha
.4476	20 bd 44	jsr $44bd			jsr 	AccessSetup 				; set up the basic information we need for later
.4479	20 c6 45	jsr $45c6			jsr 	FindVariable 				; does the variable exist already ?
.447c	b0 0e		bcs $448c			bcs 	_AVFound 					; yes, then its found
.447e	ad f0 0d	lda $0df0			lda 	varType 					; otherwise, is the variable type an array
.4481	4a		lsr a				lsr 	a
.4482	90 05		bcc $4489			bcc 	_AVCanCreate 				; if not, we can autocreate
.4484	a2 15		ldx #$15			ldx 	#ErrorID_noauto
.4486	20 18 15	jsr $1518		jsr	errorHandler
.4489					_AVCanCreate:
.4489	20 fa 44	jsr $44fa			jsr 	CreateVariable 				; variable does not exist, create it.
.448c					_AVFound:
.448c	68		pla				pla
.448d	aa		tax				tax
.448e	18		clc				clc 								; copy temp0 (variable record address)
.448f	a5 2a		lda $2a				lda 	temp0 						; +5 (to point to the data)
.4491	69 05		adc #$05			adc 	#5 							; (first 5 bytes are link, name, hash)
.4493	95 50		sta $50,x			sta 	esInt0,x
.4495	a5 2b		lda $2b				lda 	temp0+1
.4497	69 00		adc #$00			adc 	#0
.4499	95 58		sta $58,x			sta 	esInt1,x
.449b	a9 00		lda #$00			lda 	#0
.449d	95 60		sta $60,x			sta 	esInt2,x
.449f	95 68		sta $68,x			sta 	esInt3,x
.44a1	ac f0 0d	ldy $0df0			ldy 	varType 					; get the type ID from the type.
.44a4	b9 7d 44	lda $447d,y			lda 	_AVTypeTable-$3A,y 			; e.g. a reference to int/float/string.
.44a7	95 48		sta $48,x			sta 	esType,x
.44a9	ac f1 0d	ldy $0df1			ldy 	varEnd 						; restore Y
.44ac	ad f0 0d	lda $0df0			lda 	VarType 					; get variable type, put LSB into C
.44af	4a		lsr a				lsr 	a
.44b0	90 03		bcc $44b5			bcc 	_AVNotArray 				; if carry set,it is an array variable.
.44b2	20 5e 42	jsr $425e			jsr 	AccessArray 				; array lookup. if LSB was set.
.44b5					_AVNotArray:
.44b5	8a		txa				txa 								; return stack in A and return
.44b6	60		rts				rts
.44b7					_AVTypeTable:
>44b7	80 80						.byte 	$80,$80						; integer
>44b9	c0 c0						.byte 	$C0,$C0 					; string
>44bb	81 81						.byte 	$81,$81 					; float
.44bd					AccessSetup:
.44bd	a9 00		lda #$00			lda 	#0 							; zero the hash byte.
.44bf	8d ef 0d	sta $0def			sta 	varHash
.44c2	98		tya				tya
.44c3	48		pha				pha
.44c4	b1 28		lda ($28),y	_ASLoop:lda 	(codePtr),y					; get next identifier character
.44c6	c9 3a		cmp #$3a			cmp 	#$3A 						; is it 3A-3F which end all identifiers ?
.44c8	b0 0b		bcs $44d5			bcs 	_ASComplete
.44ca	18		clc				clc 								; add to the hash. Might improve this.
.44cb	6d ef 0d	adc $0def			adc 	varHash
.44ce	8d ef 0d	sta $0def			sta 	varHash
.44d1	c8		iny				iny 								; next character
.44d2	4c c4 44	jmp $44c4			jmp 	_ASLoop
.44d5					_ASComplete:
.44d5	8d f0 0d	sta $0df0			sta 	varType 					; save variable type byte
.44d8	c8		iny				iny
.44d9	8c f1 0d	sty $0df1			sty 	varEnd 						; save the ending position.
.44dc	38		sec				sec 								; convert type byte from $3A-$3F to 0..5
.44dd	e9 3a		sbc #$3a			sbc 	#$3A
.44df	0a		asl a				asl 	a 							; multiply by hashTableSize (8 in this case)
.44e0	0a		asl a				asl 	a
.44e1	0a		asl a				asl 	a
.44e2	0a		asl a				asl 	a 							; 2 bytes/word
.44e3	85 2a		sta $2a				sta 	temp0 						; this is the offset to the start of the table.
.44e5	ad ef 0d	lda $0def			lda 	varHash 					; get hash
.44e8	29 07		and #$07			and 	#(hashTableSize-1)			; force into range (for 8,0..7)
.44ea	0a		asl a				asl  	a 							; x 2 (for word) and clear carry
.44eb	65 2a		adc $2a				adc 	temp0 						; now offset from the start of the hash table.
.44ed	69 68		adc #$68			adc 	#hashTables & $FF 			; add to hash table base address
.44ef	85 3b		sta $3b				sta 	hashList 					; making hashLists point to the head of the link list.
.44f1	a9 0a		lda #$0a			lda 	#hashTables >> 8
.44f3	69 00		adc #$00			adc 	#0
.44f5	85 3c		sta $3c				sta 	hashList+1
.44f7	68		pla				pla
.44f8	a8		tay				tay
.44f9	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/variable/create.asm

.44fa					CreateVariable:
.44fa	98		tya				tya 								; push Y on the stack twice.
.44fb	48		pha				pha									; position in code of the new variable.
.44fc	48		pha				pha
.44fd	ae f0 0d	ldx $0df0			ldx 	varType 					; get var type 0-5 from the var type
.4500	bd 24 45	lda $4524,x			lda		_CVSize-$3A,x 				; the bytes required for this new variable.
.4503	48		pha				pha 								; save length
.4504	a5 35		lda $35				lda 	lowMemory 					; set low Memory ptr to temp0
.4506	85 2a		sta $2a				sta 	temp0 						; (address of the new variable)
.4508	a5 36		lda $36				lda 	lowMemory+1
.450a	85 2b		sta $2b				sta 	temp0+1
.450c	68		pla				pla 								; get length
.450d	18		clc				clc 								; add to low memory.
.450e	65 35		adc $35				adc 	lowMemory
.4510	85 35		sta $35				sta 	lowMemory
.4512	90 08		bcc $451c			bcc 	_CVNoCarry
.4514	e6 36		inc $36				inc 	lowMemory+1
.4516	a5 36		lda $36				lda 	lowMemory+1 				; check out of memory.
.4518	c5 34		cmp $34				cmp 	highMemory+1
.451a	b0 3d		bcs $4559			bcs 	_CVMemory
.451c					_CVNoCarry:
.451c	ad ef 0d	lda $0def			lda 	varHash 					; store hash at offset 4.
.451f	a0 04		ldy #$04			ldy 	#4
.4521	91 2a		sta ($2a),y			sta 	(temp0),y
.4523	68		pla				pla 								; offset, work out where the variable name is.
.4524	18		clc				clc
.4525	65 28		adc $28				adc 	codePtr
.4527	a0 02		ldy #$02			ldy 	#2 							; copy that into slots 2 + 3.
.4529	91 2a		sta ($2a),y			sta 	(temp0),y
.452b	a5 29		lda $29				lda 	codePtr+1
.452d	69 00		adc #$00			adc 	#0
.452f	c8		iny				iny
.4530	91 2a		sta ($2a),y			sta 	(temp0),y
.4532	cd c9 0a	cmp $0ac9			cmp 	basePage+1 					; compare against the program base.
.4535	b0 03		bcs $453a			bcs 	_CVNotImmediate
.4537	20 9c 45	jsr $459c			jsr 	CloneVariableName 			; we need to clone the variable name (immediate mode)
.453a					_CVNotImmediate:
.453a	a0 00		ldy #$00			ldy 	#0 							; copy current hash pointer in link
.453c	b1 3b		lda ($3b),y			lda 	(hashList),y 				; so we're inserting it in the front of a linked list
.453e	91 2a		sta ($2a),y			sta 	(temp0),y
.4540	c8		iny				iny
.4541	b1 3b		lda ($3b),y			lda 	(hashList),y
.4543	91 2a		sta ($2a),y			sta 	(temp0),y
.4545	a5 2b		lda $2b				lda 	temp0+1 					; set new link
.4547	91 3b		sta ($3b),y			sta 	(hashList),y
.4549	88		dey				dey
.454a	a5 2a		lda $2a				lda 	temp0
.454c	91 3b		sta ($3b),y			sta 	(hashList),y
.454e	ad f0 0d	lda $0df0			lda 	varType 					; type in A
.4551	a0 05		ldy #$05			ldy 	#5 							; offset in Y
.4553	20 64 45	jsr $4564			jsr 	ZeroTemp0Y 					; zero (temp0),y with whatever type.
.4556	68		pla				pla
.4557	a8		tay				tay
.4558	60		rts				rts
.4559					_CVMemory:
.4559	a2 22		ldx #$22			ldx 	#ErrorID_Memory
.455b	20 18 15	jsr $1518		jsr	errorHandler
>455e	09 07				_CVSize:.byte 	VarHSize+VarISize,VarHSize+VarASize 					; <storage for integer>
>4560	07 07						.byte 	VarHSize+VarSSize,VarHSize+VarASize 					; <storage for string>
>4562	0b 07						.byte 	VarHSize+VarFSize,VarHSize+VarASize 					; <storage for float>
.4564					ZeroTemp0Y:
.4564	4a		lsr a				lsr 	a 							; bit 0 in carry
.4565	0a		asl a				asl 	a
.4566	b0 19		bcs $4581			bcs 	_ZTExit 					; we don't initialise arrays.
.4568	c9 3c		cmp #$3c			cmp 	#$3C 						; check string
.456a	f0 16		beq $4582			beq 	_ZTWriteNullString 			; write "" string
.456c	c9 3e		cmp #$3e			cmp 	#$3E 						; check float
.456e	f0 22		beq $4592			beq 	_ZTWriteFloat
.4570	98		tya				tya
.4571	48		pha				pha
.4572	a9 00		lda #$00			lda 	#0
.4574	91 2a		sta ($2a),y			sta 	(temp0),y
.4576	c8		iny				iny
.4577	91 2a		sta ($2a),y			sta 	(temp0),y
.4579	c8		iny				iny
.457a	91 2a		sta ($2a),y			sta 	(temp0),y
.457c	c8		iny				iny
.457d	91 2a		sta ($2a),y			sta 	(temp0),y
.457f	68		pla				pla
.4580	a8		tay				tay
.4581					_ZTExit:
.4581	60		rts				rts
.4582					_ZTWriteNullString:
.4582	a9 00		lda #$00			lda 	#0 							; put a reference to null string as the default value.
.4584	8d ce 0a	sta $0ace			sta 	NullString
.4587	a9 ce		lda #$ce			lda 	#NullString & $FF
.4589	91 2a		sta ($2a),y			sta 	(temp0),y
.458b	a9 0a		lda #$0a			lda 	#NullString >> 8
.458d	c8		iny				iny
.458e	91 2a		sta ($2a),y			sta 	(temp0),y
.4590	88		dey				dey
.4591	60		rts				rts
.4592					_ZTWriteFloat:
.4592	8a		txa				txa
.4593	48		pha				pha
.4594	a2 20		ldx #$20		ldx	#32
.4596	20 b0 1e	jsr $1eb0		jsr	floatingpointHandler
.4599	68		pla				pla
.459a	aa		tax				tax
.459b	60		rts				rts
.459c					CloneVariableName:
.459c	a0 02		ldy #$02			ldy 	#2 							; copy vname address to temp2
.459e	b1 2a		lda ($2a),y			lda 	(temp0),y
.45a0	85 2e		sta $2e				sta 	temp2
.45a2	c8		iny				iny
.45a3	b1 2a		lda ($2a),y			lda 	(temp0),y
.45a5	85 2f		sta $2f				sta 	temp2+1
.45a7	a5 36		lda $36				lda 	lowMemory+1 				; copy lowMemory address to (temp0),2/3
.45a9	91 2a		sta ($2a),y			sta 	(temp0),y
.45ab	88		dey				dey
.45ac	a5 35		lda $35				lda 	lowMemory
.45ae	91 2a		sta ($2a),y			sta 	(temp0),y
.45b0	a0 00		ldy #$00			ldy 	#0 							; copy data from (temp2) to (lowMemory)
.45b2					_CVNCopy:
.45b2	b1 2e		lda ($2e),y			lda		(temp2),y
.45b4	91 35		sta ($35),y			sta 	(lowMemory),y
.45b6	c8		iny				iny
.45b7	c9 3a		cmp #$3a			cmp 	#$3A 						; until the whole name has been copied.
.45b9	90 f7		bcc $45b2			bcc 	_CVNCopy
.45bb	98		tya				tya 								; add Y to low memory
.45bc	18		clc				clc
.45bd	65 35		adc $35				adc 	lowMemory
.45bf	85 35		sta $35				sta 	lowMemory
.45c1	90 02		bcc $45c5			bcc 	_CVNNoCarry
.45c3	e6 36		inc $36				inc 	lowMemory+1
.45c5					_CVNNoCarry:
.45c5	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/variable/find.asm

.45c6					FindVariable:
.45c6	98		tya				tya
.45c7	48		pha				pha
.45c8	98		tya				tya 								; point temp2 to the actual name
.45c9	18		clc				clc 								; in memory of the variable being created
.45ca	65 28		adc $28				adc 	codePtr
.45cc	85 2e		sta $2e				sta 	temp2
.45ce	a5 29		lda $29				lda 	codePtr+1
.45d0	69 00		adc #$00			adc 	#0
.45d2	85 2f		sta $2f				sta 	temp2+1
.45d4	a0 00		ldy #$00			ldy 	#0
.45d6	a5 3b		lda $3b				lda 	hashList 					; copy hashlist to temp0
.45d8	85 2a		sta $2a				sta 	temp0
.45da	a5 3c		lda $3c				lda 	hashList+1
.45dc	85 2b		sta $2b				sta 	temp0+1
.45de	a0 01		ldy #$01	_FVNext:ldy 	#1 							; get MSB
.45e0	b1 2a		lda ($2a),y			lda 	(temp0),y
.45e2	f0 2c		beq $4610			beq 	_FVFail
.45e4	aa		tax				tax
.45e5	88		dey				dey		 							; get LSB
.45e6	b1 2a		lda ($2a),y			lda 	(temp0),y
.45e8	85 2a		sta $2a				sta 	temp0 						; update pointer.
.45ea	86 2b		stx $2b				stx 	temp0+1
.45ec	a0 04		ldy #$04			ldy 	#4 							; check hashes match
.45ee	b1 2a		lda ($2a),y			lda 	(temp0),y
.45f0	cd ef 0d	cmp $0def			cmp 	varHash
.45f3	d0 e9		bne $45de			bne 	_FVNext 					; if not, no point in checking the name.
.45f5	88		dey				dey 								; copy name pointer (+2,+3) to temp1.
.45f6	b1 2a		lda ($2a),y			lda 	(temp0),y
.45f8	85 2d		sta $2d				sta 	temp1+1
.45fa	88		dey				dey
.45fb	b1 2a		lda ($2a),y			lda 	(temp0),y
.45fd	85 2c		sta $2c				sta 	temp1
.45ff	a0 00		ldy #$00			ldy 	#0
.4601					_FVCheck:
.4601	b1 2c		lda ($2c),y			lda 	(temp1),y 					; compare names
.4603	d1 2e		cmp ($2e),y			cmp 	(temp2),y
.4605	d0 d7		bne $45de			bne 	_FVNext		 				; fail if different.
.4607	c8		iny				iny
.4608	c9 3a		cmp #$3a			cmp 	#$3A 						; until reached the end marker.
.460a	90 f5		bcc $4601			bcc 	_FVCheck
.460c	68		pla				pla
.460d	a8		tay				tay
.460e	38		sec				sec
.460f	60		rts				rts
.4610					_FVFail:
.4610	68		pla				pla
.4611	a8		tay				tay
.4612	18		clc				clc
.4613	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/variable/reset.asm

.4614					HashTableReset:
.4614	a2 60		ldx #$60			ldx 	#6*2*hashTableSize			; 6 types, 2 bytes per table entry.
.4616	a9 00		lda #$00			lda 	#0
.4618					_HTRClear:
.4618	9d 67 0a	sta $0a67,x			sta 	hashTables-1,x
.461b	ca		dex				dex
.461c	d0 fa		bne $4618			bne 	_HTRClear
.461e	60		rts				rts

;******  Return to file: variable/variable.asm

.461f					variableHandler:
.461f	7c 22 46	jmp ($4622,x)			jmp 	(variableVectors,x)
.4622					variableVectors:
>4622	2a 46					.word _DummyControlHandler ; index 0
>4624	56 44					.word AccessVariable       ; index 2
>4626	e6 42					.word CreateArray          ; index 4
>4628	14 46					.word HashTableReset       ; index 6
.462a					_DummyControlHandler:
.462a	60		rts			rts

;******  Return to file: basic.asm

.462b					section_end_variable:
.462b					section_start_footer:

;******  Processing file: footer/footer.asm


;******  Processing file: footer/99end.asm

.003d					endZeroPage:
.0df2					endStorage:
>462b							.align 	256
.4700					programMemory:
>46ff	ff						.byte 	$FF

;******  Return to file: footer/footer.asm


;******  Return to file: basic.asm

.4700					section_end_footer:

;******  End of listing
