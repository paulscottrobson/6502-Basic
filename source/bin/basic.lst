
; 64tass Turbo Assembler Macro V1.55.2200 listing file
; 64tass -D autorun=1 -D coldstartnew=0 -Walias -Wmacro-prefix -Wall -q -c -L ../source/bin/basic.lst -l ../source/bin/basic.lbl -Wall -o ../source/bin/stub.prg basic.asm
; Thu Mar 18 17:29:56 2021

;Offset	;Hex		;Monitor	;Source

;******  Command line definitions

=1					autorun=1
=0					coldstartnew=0

;******  Processing input file: basic.asm


;******  Processing file: header/01common.inc


;******  Processing file: header/../generated/installed.inc

=1					installed_header = 1
=1					installed_main = 1
=1					installed_variable = 1
=1					installed_assembler = 1
=1					installed_error = 1
=1					installed_extension = 1
=1					installed_string = 1
=1					installed_device = 1
=0					installed_floatingpoint = 0
=1					installed_interaction = 1
=1					installed_tokeniser = 1
=1					installed_footer = 1

;******  Return to file: header/01common.inc

=$1000					CodeStart = $1000
=$800					MemoryStorage = $800
=$9f00					EndOfMemory = $9F00
=$28					ZeroPageStorage = $28
=$48					StackAddress = $48
=8					StackSize = 8
=2					retStackSizePages = 2
=8					hashTableSize = 8			; if this changes, the calculation is AccessSetup has to match it.
="G"					markerGOSUB = 'G'
="R"					markerREPEAT = 'R'
="F"					markerFOR = 'F'
="W"					markerWHILE = 'W'
="P"					markerPROC = 'P'
="$"					markerSTRING = '$'
="#"					markerFLOAT = '#'
="%"					markerINT = '%'
=5					VarHSize = 5 								; header (2 link, 2 name, 1 hash)
=2					VarASize = 2 								; array [address of first level]
=4					VarISize = 4 								; integer (32 bit)
=6					VarFSize = 6 								; float (4 mantissa, 1 exponent 1 sign/zero)
=2					VarSSize = 2 								; address (2 bytes)

;******  Return to file: basic.asm


;******  Processing file: header/02macros.inc


;******  Return to file: basic.asm


;******  Processing file: header/03data.inc

>0028					codePtr:.fill 	2							; (codePtr),y points to code.
>002a					temp0: 	.fill 	2							; working variables.
>002c					temp1: 	.fill 	2
>002e					temp2: 	.fill 	2
>0030					temp3: 	.fill 	2
.0032					tempshort:
>0032							.fill 	1
.0033					highMemory:
>0033							.fill 	2
.0035					lowMemory:
>0035							.fill 	2
>0800							.align	256
.0800					returnStack:
>0800							.fill 	retStackSizePages * 256
=512					retStackSize = retStackSizePages * 256
.0a00					SingleLetterVar:
>0a00					 		.fill 	26*4
.0a68					currentStorage:
>0048					esType:	.fill 	StackSize  					; type byte (see above)
>0050					esInt0:	.fill 	StackSize 					; integer or mantissa
>0058					esInt1:	.fill 	StackSize
>0060					esInt2:	.fill 	StackSize
>0068					esInt3:	.fill 	StackSize
>0070					esExp:	.fill 	StackSize 					; exponent ($80 = 0)
>0078					esZSign:.fill 	StackSize 					; for floating point - sign (bit 7) isZero (bit 6)
.0080					endOfStack:
=$50					esMant0 = esInt0 							; synonyms.
=$58					esMant1 = esInt1
=$60					esMant2 = esInt2
=$68					esMant3 = esInt3
.0a68					hashTables:
>0a68							.fill 	6*2*hashTableSize
.0ac8					basePage:
>0ac8							.fill 	2
.0aca					endProgram:
>0aca							.fill 	2
.0acc					endMemory:
>0acc							.fill 	2
.0ace					NullString:
>0ace							.fill 	1							; don't waste memory concreting null strings.
.0acf					convertBuffer:
>0acf							.fill 	35

;******  Processing file: header/../generated/tokenconst.inc

=$80					TOK_EOL=$80
=$81					TOK_SHIFT1=$81
=$82					TOK_SHIFT2=$82
=$83					TOK_SHIFT3=$83
=$84					TOK_FPC=$84
=$85					TOK_STR=$85
=$86					TOK_BINARYST=$86
=$99					TOK_STRUCTST=$99
=$a4					TOK_UNARYST=$a4
=$c9					TOK_TOKENS=$c9
=$86					TKW_AND                      = $86 ; and
=$87					TKW_OR                       = $87 ; or
=$88					TKW_XOR                      = $88 ; xor
=$89					TKW_GREATEREQUAL             = $89 ; >=
=$8a					TKW_LESSEQUAL                = $8a ; <=
=$8b					TKW_GREATER                  = $8b ; >
=$8c					TKW_LESS                     = $8c ; <
=$8d					TKW_EQUAL                    = $8d ; =
=$8e					TKW_LESSGREATER              = $8e ; <>
=$8f					TKW_PLUS                     = $8f ; +
=$90					TKW_MINUS                    = $90 ; -
=$91					TKW_GREATERGREATER           = $91 ; >>
=$92					TKW_LESSLESS                 = $92 ; <<
=$93					TKW_STAR                     = $93 ; *
=$94					TKW_SLASH                    = $94 ; /
=$95					TKW_MOD                      = $95 ; mod
=$96					TKW_HAT                      = $96 ; ^
=$97					TKW_PLING                    = $97 ; !
=$98					TKW_QMARK                    = $98 ; ?
=$99					TKW_REPEAT                   = $99 ; repeat
=$9a					TKW_WHILE                    = $9a ; while
=$9b					TKW_FOR                      = $9b ; for
=$9c					TKW_IF                       = $9c ; if
=$9d					TKW_DEFPROC                  = $9d ; defproc
=$9e					TKW_UNTIL                    = $9e ; until
=$9f					TKW_WEND                     = $9f ; wend
=$a0					TKW_NEXT                     = $a0 ; next
=$a1					TKW_THEN                     = $a1 ; then
=$a2					TKW_ENDIF                    = $a2 ; endif
=$a3					TKW_ENDPROC                  = $a3 ; endproc
=$a4					TKW_LPAREN                   = $a4 ; (
=$a5					TKW_LENLPAREN                = $a5 ; len(
=$a6					TKW_SGNLPAREN                = $a6 ; sgn(
=$a7					TKW_ABSLPAREN                = $a7 ; abs(
=$a8					TKW_RANDOMLPAREN             = $a8 ; random(
=$a9					TKW_PAGE                     = $a9 ; page
=$aa					TKW_TRUE                     = $aa ; true
=$ab					TKW_FALSE                    = $ab ; false
=$ac					TKW_MINLPAREN                = $ac ; min(
=$ad					TKW_MAXLPAREN                = $ad ; max(
=$ae					TKW_SYSLPAREN                = $ae ; sys(
=$af					TKW_TIMERLPAREN              = $af ; timer(
=$b0					TKW_EVENTLPAREN              = $b0 ; event(
=$b1					TKW_GETLPAREN                = $b1 ; get(
=$b2					TKW_INKEYLPAREN              = $b2 ; inkey(
=$b3					TKW_ALLOCLPAREN              = $b3 ; alloc(
=$b4					TKW_CHRDOLLARLPAREN          = $b4 ; chr$(
=$b5					TKW_LEFTDOLLARLPAREN         = $b5 ; left$(
=$b6					TKW_MIDDOLLARLPAREN          = $b6 ; mid$(
=$b7					TKW_RIGHTDOLLARLPAREN        = $b7 ; right$(
=$b8					TKW_STRDOLLARLPAREN          = $b8 ; str$(
=$b9					TKW_VALLPAREN                = $b9 ; val(
=$ba					TKW_PEEKLPAREN               = $ba ; peek(
=$bb					TKW_DEEKLPAREN               = $bb ; deek(
=$bc					TKW_LEEKLPAREN               = $bc ; leek(
=$bd					TKW_ASCLPAREN                = $bd ; asc(
=$be					TKW_INTLPAREN                = $be ; int(
=$bf					TKW_FLOATLPAREN              = $bf ; float(
=$c0					TKW_ISVALLPAREN              = $c0 ; isval(
=$c1					TKW_UPPERDOLLARLPAREN        = $c1 ; upper$(
=$c2					TKW_LOWERDOLLARLPAREN        = $c2 ; lower$(
=$c3					TKW_AT                       = $c3 ; @
=$c4					TKW_WAVY                     = $c4 ; ~
=$c5					TKW_AMP                      = $c5 ; &
=$c6					TKW_GETDOLLARLPAREN          = $c6 ; get$(
=$c7					TKW_INKEYDOLLARLPAREN        = $c7 ; inkey$(
=$c8					TKW_MEM                      = $c8 ; mem
=$c9					TKW_RPAREN                   = $c9 ; )
=$ca					TKW_COLON                    = $ca ; :
=$cb					TKW_COMMA                    = $cb ; ,
=$cc					TKW_SEMICOLON                = $cc ; ;
=$cd					TKW_QUOTE                    = $cd ; '
=$ce					TKW_TO                       = $ce ; to
=$cf					TKW_STEP                     = $cf ; step
=$d0					TKW_PROC                     = $d0 ; proc
=$d1					TKW_LOCAL                    = $d1 ; local
=$d2					TKW_DIM                      = $d2 ; dim
=$d3					TKW_REM                      = $d3 ; rem
=$d4					TKW_LET                      = $d4 ; let
=$d5					TKW_INPUT                    = $d5 ; input
=$d6					TKW_ELSE                     = $d6 ; else
=$d7					TKW_VDU                      = $d7 ; vdu
=$d8					TKW_PRINT                    = $d8 ; print
=$d9					TKW_GOTO                     = $d9 ; goto
=$da					TKW_GOSUB                    = $da ; gosub
=$db					TKW_RETURN                   = $db ; return
=$dc					TKW_DATA                     = $dc ; data
=$dd					TKW_ASSERT                   = $dd ; assert
=$de					TKW_POKE                     = $de ; poke
=$df					TKW_DOKE                     = $df ; doke
=$e0					TKW_LOKE                     = $e0 ; loke
=$e1					TKW_INK                      = $e1 ; ink
=$e2					TKW_PAPER                    = $e2 ; paper
=$e3					TKW_CLS                      = $e3 ; cls
=$e4					TKW_LOCATE                   = $e4 ; locate
=$e5					TKW_BREAK                    = $e5 ; break
=$e6					TKW_PERIOD                   = $e6 ; .
=$e7					TKW_HASH                     = $e7 ; #
=$86					TKW_CLEAR                    = $86 ; clear
=$87					TKW_LOAD                     = $87 ; load
=$88					TKW_SAVE                     = $88 ; save
=$89					TKW_LIST                     = $89 ; list
=$8a					TKW_NEW                      = $8a ; new
=$8b					TKW_RUN                      = $8b ; run
=$8c					TKW_READ                     = $8c ; read
=$8d					TKW_RESTORE                  = $8d ; restore
=$8e					TKW_END                      = $8e ; end
=$8f					TKW_STOP                     = $8f ; stop
=$90					TKW_XEMU                     = $90 ; xemu
=$91					TKW_ORA                      = $91 ; ora
=$92					TKW_LPARENANDRPAREN          = $92 ; (and)
=$93					TKW_EOR                      = $93 ; eor
=$94					TKW_ADC                      = $94 ; adc
=$95					TKW_STA                      = $95 ; sta
=$96					TKW_LDA                      = $96 ; lda
=$97					TKW_CMP                      = $97 ; cmp
=$98					TKW_SBC                      = $98 ; sbc
=$99					TKW_ASL                      = $99 ; asl
=$9a					TKW_ROL                      = $9a ; rol
=$9b					TKW_LSR                      = $9b ; lsr
=$9c					TKW_ROR                      = $9c ; ror
=$9d					TKW_STX                      = $9d ; stx
=$9e					TKW_LDX                      = $9e ; ldx
=$9f					TKW_DEC                      = $9f ; dec
=$a0					TKW_INC                      = $a0 ; inc
=$a1					TKW_STZ                      = $a1 ; stz
=$a2					TKW_BIT                      = $a2 ; bit
=$a3					TKW_STY                      = $a3 ; sty
=$a4					TKW_LDY                      = $a4 ; ldy
=$a5					TKW_CPY                      = $a5 ; cpy
=$a6					TKW_CPX                      = $a6 ; cpx
=$a7					TKW_TSB                      = $a7 ; tsb
=$a8					TKW_TRB                      = $a8 ; trb
=$a9					TKW_JSR                      = $a9 ; jsr
=$aa					TKW_JMP                      = $aa ; jmp
=$ab					TKW_BPL                      = $ab ; bpl
=$ac					TKW_BMI                      = $ac ; bmi
=$ad					TKW_BVC                      = $ad ; bvc
=$ae					TKW_BVS                      = $ae ; bvs
=$af					TKW_BCC                      = $af ; bcc
=$b0					TKW_BCS                      = $b0 ; bcs
=$b1					TKW_BNE                      = $b1 ; bne
=$b2					TKW_BEQ                      = $b2 ; beq
=$b3					TKW_BRA                      = $b3 ; bra
=$b4					TKW_BRK                      = $b4 ; brk
=$b5					TKW_PHP                      = $b5 ; php
=$b6					TKW_CLC                      = $b6 ; clc
=$b7					TKW_PLP                      = $b7 ; plp
=$b8					TKW_SEC                      = $b8 ; sec
=$b9					TKW_RTI                      = $b9 ; rti
=$ba					TKW_PHA                      = $ba ; pha
=$bb					TKW_CLI                      = $bb ; cli
=$bc					TKW_PHY                      = $bc ; phy
=$bd					TKW_RTS                      = $bd ; rts
=$be					TKW_PLA                      = $be ; pla
=$bf					TKW_SEI                      = $bf ; sei
=$c0					TKW_PLY                      = $c0 ; ply
=$c1					TKW_DEY                      = $c1 ; dey
=$c2					TKW_TXA                      = $c2 ; txa
=$c3					TKW_TYA                      = $c3 ; tya
=$c4					TKW_TXS                      = $c4 ; txs
=$c5					TKW_TAY                      = $c5 ; tay
=$c6					TKW_TAX                      = $c6 ; tax
=$c7					TKW_CLV                      = $c7 ; clv
=$c8					TKW_TSX                      = $c8 ; tsx
=$c9					TKW_INY                      = $c9 ; iny
=$ca					TKW_DEX                      = $ca ; dex
=$cb					TKW_CLD                      = $cb ; cld
=$cc					TKW_PHX                      = $cc ; phx
=$cd					TKW_INX                      = $cd ; inx
=$ce					TKW_NOP                      = $ce ; nop
=$cf					TKW_SED                      = $cf ; sed
=$d0					TKW_PLX                      = $d0 ; plx
=$86					TKW_VPOKE                    = $86 ; vpoke
=$87					TKW_VDOKE                    = $87 ; vdoke
=$88					TKW_VLOAD                    = $88 ; vload
=$89					TKW_MODE                     = $89 ; mode
=$86					TKW_VPEEKLPAREN              = $86 ; vpeek(
=$87					TKW_VDEEKLPAREN              = $87 ; vdeek(

;******  Return to file: header/03data.inc

=$3a					TYPE_INT =		($3A) 						; type bytes that end identifier.
=$3b					TYPE_INTARRAY =	($3B)
=$3c					TYPE_STR =		($3C)
=$3d					TYPE_STRARRAY =	($3D)
=$3e					TYPE_FLOAT =	($3E)
=$3f					TYPE_FLOATARRAY=($3F)

;******  Processing file: header/../generated/asmconst.inc

=$91					TKA_GROUP1 = $91
=$99					TKA_GROUP2 = $99
=$ab					TKA_GROUP3 = $ab
=$b4					TKA_GROUP4 = $b4
=$d1					TKA_END4 = $d1

;******  Return to file: header/03data.inc


;******  Return to file: basic.asm


;******  Processing file: header/header.inc


;******  Return to file: basic.asm


;******  Processing file: assembler/asmconst.inc

=0					AMD_IMM		= 0					; Immediate mode.
=1					AMD_ZERO 	= 1					; Zero Page
=2					AMD_ACCIMP	= 2					; Accumulator/Implied
=3					AMD_ABS 	= 3					; Absolute
=4					AMD_ZEROINDY= 4					; Zero Indirect,Y
=5					AMD_ZEROX 	= 5					; Zero Page,X
=6					AMD_ABSY 	= 6					; Absolute,Y
=7					AMD_ABSX 	= 7					; Absolute,X
=8					AMD_ZEROIND = 8					; Zero Indirect
=9					AMD_ZEROY 	= 9					; Zero Page,Y
=10					AMD_ABSIND 	= 10				; Absolute Indirect
=11					AMD_ABSINDX	= 11				; Absolute Indirect Indexed
=12					AMD_REL		= 12				; Relative
=13					AMD_ZEROINDX= 13 				; Zero Indirect,X

;******  Return to file: basic.asm


;******  Processing file: assembler/assembler.inc


;******  Return to file: basic.asm


;******  Processing file: device/device.inc


;******  Return to file: basic.asm


;******  Processing file: error/error.inc


;******  Return to file: basic.asm


;******  Processing file: error/errorhandler.inc


;******  Processing file: error/../generated/errorid.inc

=1					ErrorID_Missing = 1 ; Feature not Present
=2					ErrorID_Syntax = 2 ; Syntax Error
=3					ErrorID_NoModule = 3 ; Module disabled
=4					ErrorID_Assert = 4 ; Assertion failed
=5					ErrorID_DivZero = 5 ; Divide By Zero
=6					ErrorID_Stop = 6 ; Stop
=7					ErrorID_BadType = 7 ; Type Mismatch
=8					ErrorID_BadValue = 8 ; Illegal Value
=9					ErrorID_MissingRP = 9 ; Missing right bracket
=10					ErrorID_MissingComma = 10 ; Missing comma
=11					ErrorID_NoReference = 11 ; Missing reference
=12					ErrorID_LineNumber = 12 ; Line Number not found
=13					ErrorID_StrLen = 13 ; String too long
=14					ErrorID_ReturnErr = 14 ; RETURN without GOSUB
=15					ErrorID_UntilErr = 15 ; UNTIL without REPEAT
=16					ErrorID_NextErr = 16 ; NEXT without FOR
=17					ErrorID_WendErr = 17 ; WEND without WHILE
=18					ErrorID_endprocErr = 18 ; ENDPROC without PROC
=19					ErrorID_BadIndex = 19 ; Bad NEXT index
=20					ErrorID_Struct = 20 ; Structures nested wrong
=21					ErrorID_NoAuto = 21 ; Cannot create variable
=22					ErrorID_RetStack = 22 ; Return stack out of space
=23					ErrorID_NoProc = 23 ; Unknown Procedure
=24					ErrorID_Params = 24 ; Parameters do not match
=25					ErrorID_DupArray = 25 ; Array already defined
=26					ErrorID_NotArray = 26 ; DIM requires array
=27					ErrorID_ArrayIndex = 27 ; Bad array index
=28					ErrorID_ArrayDepth = 28 ; Wrong number of array indices
=29					ErrorID_DataError = 29 ; Out of data
=30					ErrorID_Tokenise = 30 ; Cannot tokenise line
=31					ErrorID_Save = 31 ; Save failed
=32					ErrorID_Load = 32 ; Load failed
=33					ErrorID_Break = 33 ; Break
=34					ErrorID_Memory = 34 ; Out of memory
=35					ErrorID_NumStack = 35 ; Expression too complex
=36					ErrorID_Assembler = 36 ; Bad Operand/Mode
=37					ErrorID_Branch = 37 ; Branch out of range
=38					ErrorID_Label = 38 ; Label changed value

;******  Return to file: error/errorhandler.inc


;******  Return to file: basic.asm


;******  Processing file: extension/extension.inc


;******  Return to file: basic.asm


;******  Processing file: floatingpoint/float.inc

=5					FloatEmbeddedSize = 5

;******  Return to file: basic.asm


;******  Processing file: floatingpoint/floatingpoint.inc


;******  Return to file: basic.asm


;******  Processing file: interaction/interaction.inc


;******  Return to file: basic.asm


;******  Processing file: main/main.inc


;******  Return to file: basic.asm


;******  Processing file: string/functions/memory.inc

=252					MaxStringSize = 252

;******  Return to file: basic.asm


;******  Processing file: string/string.inc


;******  Return to file: basic.asm


;******  Processing file: tokeniser/detokenise/colouring.inc

=$84					LTYLineNumber = $84
=$82					LTYPunctuation = $82
=$87					LTYIdentifier = $87
=$86					LTYConstant = $86
=$83					LTYKeyword = $83
=$81					LTYString = $81

;******  Return to file: basic.asm


;******  Processing file: tokeniser/tokeniser.inc


;******  Return to file: basic.asm


;******  Processing file: variable/variable.inc


;******  Return to file: basic.asm


;******  Processing file: footer/footer.inc


;******  Return to file: basic.asm

.1000					section_start_header:

;******  Processing file: header/header.asm


;******  Processing file: header/00start.asm

.1000					Start:
.1000	4c 0a 10	jmp $100a			jmp 	GoColdStart 				; +0 	boot BASIC
.1003	4c 28 10	jmp $1028			jmp 	GoTokTest					; +3 	run tokeniser test code.
>1006	ce 39						.word 	TokenTableAddress
.1008							else
>1008	00 00						.word 	0
.100a					GoColdStart:
.100a	a9 00		lda #$00			lda 	#(programMemory) & $FF
.100c	8d c8 0a	sta $0ac8			sta 	basePage
.100f	a9 41		lda #$41			lda 	#(programMemory) >> 8
.1011	8d c9 0a	sta $0ac9			sta 	1+(basePage)
.1014	a9 00		lda #$00			lda 	#(endOfMemory) & $FF
.1016	8d cc 0a	sta $0acc			sta 	endMemory
.1019	a9 9f		lda #$9f			lda 	#(endOfMemory) >> 8
.101b	8d cd 0a	sta $0acd			sta 	1+(endMemory)
.101e	a2 06		ldx #$06		ldx	#6
.1020	20 bf 14	jsr $14bf		jsr	deviceHandler
.1023	a2 00		ldx #$00		ldx	#0
.1025	20 c1 1b	jsr $1bc1		jsr	interactionHandler
.1028					GoTokTest:
.1028	a2 04		ldx #$04		ldx	#4
.102a	20 05 3d	jsr $3d05		jsr	tokeniserHandler

;******  Return to file: header/header.asm


;******  Return to file: basic.asm

.102d					section_end_header:
.102d					section_start_assembler:

;******  Processing file: assembler/assembler.asm


;******  Processing file: assembler/asmoperand.asm

.102d					AsmGetOperand:
.102d	a2 00		ldx #$00			ldx 	#0 							; clear the operand.
.102f	8a		txa				txa
.1030	95 50		sta $50,x			sta 	esInt0,x
.1032	95 58		sta $58,x			sta 	esInt1,x
.1034	95 60		sta $60,x			sta 	esInt2,x
.1036	95 68		sta $68,x			sta 	esInt3,x
.1038	b1 28		lda ($28),y			lda 	(codePtr),y 				; first into X
.103a	aa		tax				tax
.103b	a9 02		lda #$02			lda 	#AMD_ACCIMP
.103d	e0 80		cpx #$80			cpx 	#TOK_EOL 					; if end of line or colon, return implied mode.
.103f	f0 41		beq $1082			beq 	_AGOExit
.1041	e0 ca		cpx #$ca			cpx 	#TKW_COLON
.1043	f0 3d		beq $1082			beq 	_AGOExit
.1045	c8		iny				iny 								; consume the token
.1046	a9 00		lda #$00			lda 	#AMD_IMM
.1048	e0 e7		cpx #$e7			cpx 	#TKW_HASH 					; if a hash present, then immediate mode.
.104a	f0 2d		beq $1079			beq		_AGOEvalExit 				; with an operand.
.104c	e0 a4		cpx #$a4			cpx 	#TKW_LPAREN 				; left bracket ?
.104e	f0 40		beq $1090			beq 	_AGOIndirect
.1050	e0 01		cpx #$01			cpx 	#$01 						; is it "A" e.g. the variable A.
.1052	d0 0b		bne $105f			bne 	_AGOZeroPage1 				; if not it is zero zero,x zero,y, unpick 1 iny
.1054	b1 28		lda ($28),y			lda 	(codePtr),y 				; get the second character & consume it
.1056	c8		iny				iny
.1057	aa		tax				tax
.1058	a9 02		lda #$02			lda 	#AMD_ACCIMP 				; and return Acc/Implied if it is just A
.105a	e0 3a		cpx #$3a			cpx 	#$3A
.105c	f0 24		beq $1082			beq 	_AGOExit
.105e	88		dey				dey 								; unpick 2 iny
.105f					_AGOZeroPage1:
.105f	88		dey				dey
.1060	a9 00		lda #$00			lda 	#0 							; get the address into esInt0/1
.1062	a2 06		ldx #$06		ldx	#6
.1064	20 4c 32	jsr $324c		jsr	mainHandler
.1067	20 bf 10	jsr $10bf			jsr 	AsmGetIndexing
.106a	a9 01		lda #$01			lda 	#AMD_ZERO
.106c	90 14		bcc $1082			bcc 	_AGOExit
.106e	a9 05		lda #$05			lda 	#AMD_ZEROX
.1070	e0 00		cpx #$00			cpx 	#0
.1072	f0 0e		beq $1082			beq 	_AGOExit
.1074	a9 09		lda #$09			lda 	#AMD_ZEROY
.1076	4c 82 10	jmp $1082			jmp 	_AGOExit
.1079					_AGOEvalExit:
.1079	48		pha				pha
.107a	a9 00		lda #$00			lda 	#0 							; evaluate operand in root.
.107c	a2 06		ldx #$06		ldx	#6
.107e	20 4c 32	jsr $324c		jsr	mainHandler
.1081	68		pla				pla
.1082					_AGOExit:
.1082	48		pha				pha 								; save the mode
.1083	a5 60		lda $60				lda 	esInt2 						; check the operand is zero.
.1085	05 68		ora $68				ora 	esInt3
.1087	d0 02		bne $108b			bne 	_AGOValue
.1089	68		pla				pla
.108a	60		rts				rts
.108b					_AGOValue:
.108b	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.108d	20 e0 14	jsr $14e0		jsr	errorHandler
.1090					_AGOIndirect:
.1090	a9 00		lda #$00			lda 	#0 							; evaluate operand in root.
.1092	a2 06		ldx #$06		ldx	#6
.1094	20 4c 32	jsr $324c		jsr	mainHandler
.1097	b1 28		lda ($28),y			lda 	(codePtr),y 				; does ) follow ? if so might be ) or ),Y
.1099	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.109b	f0 11		beq $10ae			beq 	_AGOIndIndY
.109d	20 bf 10	jsr $10bf			jsr 	ASMGetIndexing 				; must be ,X)
.10a0	90 39		bcc $10db			bcc 	AGISyntax
.10a2	e0 00		cpx #$00			cpx 	#0
.10a4	d0 35		bne $10db			bne 	AGISyntax
.10a6	a2 00		ldx #$00		ldx	#0
.10a8	20 4c 32	jsr $324c		jsr	mainHandler
.10ab	a9 0d		lda #$0d			lda 	#AMD_ZEROINDX
.10ad	60		rts				rts
.10ae					_AGOIndIndY:
.10ae	c8		iny				iny
.10af	20 bf 10	jsr $10bf			jsr 	ASMGetIndexing 				; get indexing if any
.10b2	a9 08		lda #$08			lda 	#AMD_ZEROIND
.10b4	90 cc		bcc $1082			bcc 	_AGOExit 					; none then exit
.10b6	e0 00		cpx #$00			cpx 	#0 							; must be ,Y
.10b8	f0 21		beq $10db			beq 	AGISyntax
.10ba	a9 04		lda #$04			lda 	#AMD_ZEROINDY
.10bc	4c 82 10	jmp $1082			jmp 	_AGOExit
.10bf					AsmGetIndexing:
.10bf	b1 28		lda ($28),y			lda 	(codePtr),y 				; check for comma
.10c1	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.10c3	18		clc				clc
.10c4	d0 14		bne $10da			bne 	_AGIExit 					; no comma, return with CC
.10c6	c8		iny				iny 								; get what SHOULD be X or Y
.10c7	b1 28		lda ($28),y			lda 	(codePtr),y  				; read it
.10c9	38		sec				sec 								; subtract 6 bit ASCII of X
.10ca	e9 18		sbc #$18			sbc 	#"X" & $3F
.10cc	c9 02		cmp #$02			cmp 	#2 							; if unsigned >= 2 then error
.10ce	b0 0b		bcs $10db			bcs 	AGISyntax
.10d0	aa		tax				tax 								; put in index
.10d1	c8		iny				iny 								; get what follows that, should be the $3A marker
.10d2	b1 28		lda ($28),y			lda 	(codePtr),y
.10d4	c8		iny				iny
.10d5	c9 3a		cmp #$3a			cmp 	#$3A
.10d7	d0 02		bne $10db			bne 	AGISyntax
.10d9	38		sec				sec 								; return CS and index mode in X
.10da					_AGIExit:
.10da	60		rts				rts
.10db					AGISyntax:
.10db	a2 02		ldx #$02			ldx 	#ErrorID_syntax
.10dd	20 e0 14	jsr $14e0		jsr	errorHandler

;******  Return to file: assembler/assembler.asm


;******  Processing file: assembler/asmwrite.asm

.0af2					finalOpcode:
>0af2							.fill 	1
.10e0					AsmWriteInstruction:
.10e0	8d f2 0a	sta $0af2			sta 	finalOpcode					; save opcode.
.10e3	98		tya				tya
.10e4	48		pha				pha
.10e5	ad 38 0a	lda $0a38			lda 	SingleLetterVar+("O"-"A")*4	; check O
.10e8	29 02		and #$02			and 	#2
.10ea	f0 2d		beq $1119			beq 	_ASMWNoEcho 				; if zero then don't echo.
.10ec	ad 3d 0a	lda $0a3d			lda 	SingleLetterVar+("P"-"A")*4+1 ; write address in P
.10ef	20 54 11	jsr $1154			jsr 	AWIWriteHex
.10f2	ad 3c 0a	lda $0a3c			lda 	SingleLetterVar+("P"-"A")*4
.10f5	20 54 11	jsr $1154			jsr 	AWIWriteHex
.10f8	ad f2 0a	lda $0af2			lda 	finalOpcode 				; write opcode
.10fb	20 4d 11	jsr $114d			jsr 	AWIWriteHexSpace
.10fe	e0 00		cpx #$00			cpx 	#0
.1100	f0 0e		beq $1110			beq 	_ASMWEchoExit
.1102	a5 50		lda $50				lda 	esInt0
.1104	20 4d 11	jsr $114d			jsr 	AWIWriteHexSpace
.1107	e0 01		cpx #$01			cpx 	#1
.1109	f0 05		beq $1110			beq 	_ASMWEchoExit
.110b	a5 58		lda $58				lda 	esInt1
.110d	20 4d 11	jsr $114d			jsr 	AWIWriteHexSpace
.1110					_ASMWEchoExit:
.1110	8a		txa				txa
.1111	48		pha				pha
.1112	a2 04		ldx #$04		ldx	#4
.1114	20 bf 14	jsr $14bf		jsr	deviceHandler
.1117	68		pla				pla
.1118	aa		tax				tax
.1119					_ASMWNoEcho:
.1119	ad f2 0a	lda $0af2			lda 	finalOpcode
.111c	20 34 11	jsr $1134			jsr 	AsmWriteByte
.111f	e0 00		cpx #$00			cpx 	#0
.1121	f0 0e		beq $1131			beq 	_ASMWExit
.1123	a5 50		lda $50				lda 	esInt0
.1125	20 34 11	jsr $1134			jsr 	AsmWriteByte
.1128	e0 01		cpx #$01			cpx 	#1
.112a	f0 05		beq $1131			beq 	_ASMWExit
.112c	a5 58		lda $58				lda 	esInt1
.112e	20 34 11	jsr $1134			jsr 	AsmWriteByte
.1131					_ASMWExit:
.1131	68		pla				pla
.1132	a8		tay				tay
.1133	60		rts				rts
.1134					AsmWriteByte:
.1134	a0 00		ldy #$00			ldy 	#0
.1136	48		pha				pha
.1137	ad 3c 0a	lda $0a3c			lda 	SingleLetterVar+("P"-"A")*4 ; copy address to temp0
.113a	85 2a		sta $2a				sta 	temp0
.113c	ad 3d 0a	lda $0a3d			lda 	SingleLetterVar+("P"-"A")*4+1
.113f	85 2b		sta $2b				sta 	temp0+1
.1141	68		pla				pla 								; write out the byte.
.1142	91 2a		sta ($2a),y			sta 	(temp0),y
.1144	ee 3c 0a	inc $0a3c			inc 	SingleLetterVar+("P"-"A")*4	; increment P
.1147	d0 03		bne $114c			bne 	_AWBNoCarry
.1149	ee 3d 0a	inc $0a3d			inc 	SingleLetterVar+("P"-"A")*4+1
.114c					_AWBNoCarry:
.114c	60		rts				rts
.114d					AWIWriteHexSpace:
.114d	48		pha				pha
.114e	a9 20		lda #$20			lda 	#" "
.1150	20 67 11	jsr $1167			jsr 	AWIPrintChar
.1153	68		pla				pla
.1154					AWIWriteHex:
.1154	48		pha				pha
.1155	4a		lsr a				lsr 	a
.1156	4a		lsr a				lsr 	a
.1157	4a		lsr a				lsr 	a
.1158	4a		lsr a				lsr 	a
.1159	20 5d 11	jsr $115d			jsr 	AWIPrintNibble
.115c	68		pla				pla
.115d					AWIPrintNibble:
.115d	29 0f		and #$0f			and 	#15
.115f	c9 0a		cmp #$0a			cmp 	#10
.1161	90 02		bcc $1165			bcc 	_AWIPNDigit
.1163	69 06		adc #$06			adc 	#6
.1165					_AWIPNDigit:
.1165	69 30		adc #$30			adc 	#48
.1167					AWIPrintChar:
.1167	85 32		sta $32				sta 	tempShort
.1169	8a		txa				txa
.116a	48		pha				pha
.116b	a5 32		lda $32				lda 	tempShort
.116d	a2 16		ldx #$16		ldx	#22
.116f	20 bf 14	jsr $14bf		jsr	deviceHandler
.1172	68		pla				pla
.1173	aa		tax				tax
.1174	60		rts				rts

;******  Return to file: assembler/assembler.asm


;******  Processing file: assembler/assemblecmd.asm

.0af3					asmToken:
>0af3							.fill 	1
.0af4					asmMode:
>0af4							.fill 	1 							; esInt0/1
.0af5					asmBaseOpcode:
>0af5							.fill 	1
.1175					AssembleOneInstruction:
.1175	8d f3 0a	sta $0af3			sta 	asmToken 					; save the token
.1178	aa		tax				tax
.1179	bd 45 11	lda $1145,x			lda 	OpcodeTable-TKA_GROUP1,x 	; get the base opcode.
.117c	8d f5 0a	sta $0af5			sta 	asmBaseOpcode
.117f	20 2d 10	jsr $102d			jsr 	AsmGetOperand 				; identify the address mode and operand where applicable.
.1182	8d f4 0a	sta $0af4			sta 	asmMode
.1185	a5 58		lda $58				lda 	esInt1 						; check if this is a three byte operand.
.1187	d0 05		bne $118e			bne 	_AOIThreeBytes 				; if so, we have to use three byte
.1189	20 a4 11	jsr $11a4			jsr 	AssembleAttempt 			; try to assemble token/mode/operand (2 bytes)
.118c	b0 10		bcs $119e			bcs 	_AOISuccess 				; worked ok.
.118e					_AOIThreeBytes:
.118e	ae f4 0a	ldx $0af4			ldx 	asmMode 					; convert mode to 3 byte version, where possible.
.1191	bd c8 11	lda $11c8,x			lda 	AbsoluteVersionTable,x
.1194	30 09		bmi $119f			bmi 	_AOIError					; not possible, no equivalent.
.1196	8d f4 0a	sta $0af4			sta 	asmMode
.1199	20 a4 11	jsr $11a4			jsr 	AssembleAttempt 			; try to assemble token/mode/operand (3 bytes)
.119c	90 01		bcc $119f			bcc 	_AOIError 					; didn't work.
.119e					_AOISuccess:
.119e	60		rts				rts
.119f					_AOIError:
.119f	a2 24		ldx #$24			ldx 	#ErrorID_Assembler
.11a1	20 e0 14	jsr $14e0		jsr	errorHandler
.11a4					AssembleAttempt:
.11a4	20 ad 11	jsr $11ad			jsr 	_AADispatch 				; go to the code which dispatches to the appropriate
.11a7	b0 03		bcs $11ac			bcs 	_AAExit 					; exit if carry set, e.g. was successful
.11a9	20 57 13	jsr $1357			jsr 	AssembleSpecialCase
.11ac					_AAExit:
.11ac	60		rts				rts
.11ad					_AADispatch:
.11ad	ad f3 0a	lda $0af3			lda 	asmToken
.11b0	c9 b4		cmp #$b4			cmp 	#TKA_GROUP4
.11b2	b0 11		bcs $11c5			bcs 	_AAGroup4
.11b4	c9 ab		cmp #$ab			cmp 	#TKA_GROUP3
.11b6	b0 0a		bcs $11c2			bcs 	_AAGroup3
.11b8	c9 99		cmp #$99			cmp 	#TKA_GROUP2
.11ba	b0 03		bcs $11bf			bcs 	_AAGroup2
.11bc	4c 9d 12	jmp $129d			jmp 	AssembleGroup1
.11bf					_AAGroup2:
.11bf	4c f8 12	jmp $12f8			jmp 	AssembleGroup2
.11c2					_AAGroup3:
.11c2	4c 19 13	jmp $1319			jmp 	AssembleGroup3
.11c5					_AAGroup4:
.11c5	4c 4d 13	jmp $134d			jmp 	AssembleGroup4
.11c8					AbsoluteVersionTable:
>11c8	ff						.byte	$FF 			; fail AMD_IMM
>11c9	03						.byte	AMD_ABS 		; absolute AMD_ZERO
>11ca	ff						.byte	$FF 			; fail AMD_ACCIMP
>11cb	ff						.byte	$FF 			; fail AMD_ABS
>11cc	ff						.byte 	$FF 			; fail AMD_ZEROINDY
>11cd	07						.byte	AMD_ABSX 		; absolute AMD_ZEROX
>11ce	ff						.byte	$FF 			; fail AMD_ABSY
>11cf	ff						.byte	$FF 			; fail AMD_ABSX
>11d0	0a						.byte	AMD_ABSIND 		; absolute AMD_ZEROIND
>11d1	06						.byte	AMD_ABSY 		; absolute AMD_ZEROY
>11d2	ff						.byte	$FF 			; fail AMD_ABSIND
>11d3	ff						.byte	$FF 			; fail AMD_ABSINDX
>11d4	ff						.byte	$FF 			; fail AMD_REL
>11d5	0b						.byte 	AMD_ABSINDX 	; absolute AMD_ZEROINDX

;******  Processing file: assembler/../generated/asmtables.inc

.11d6					OpcodeTable:
>11d6	01					.byte	$01			; $91 ora
>11d7	21					.byte	$21			; $92 (and)
>11d8	41					.byte	$41			; $93 eor
>11d9	61					.byte	$61			; $94 adc
>11da	81					.byte	$81			; $95 sta
>11db	a1					.byte	$a1			; $96 lda
>11dc	c1					.byte	$c1			; $97 cmp
>11dd	e1					.byte	$e1			; $98 sbc
>11de	02					.byte	$02			; $99 asl
>11df	22					.byte	$22			; $9a rol
>11e0	42					.byte	$42			; $9b lsr
>11e1	62					.byte	$62			; $9c ror
>11e2	82					.byte	$82			; $9d stx
>11e3	a2					.byte	$a2			; $9e ldx
>11e4	c2					.byte	$c2			; $9f dec
>11e5	e2					.byte	$e2			; $a0 inc
>11e6	60					.byte	$60			; $a1 stz
>11e7	20					.byte	$20			; $a2 bit
>11e8	80					.byte	$80			; $a3 sty
>11e9	a0					.byte	$a0			; $a4 ldy
>11ea	c0					.byte	$c0			; $a5 cpy
>11eb	e0					.byte	$e0			; $a6 cpx
>11ec	00					.byte	$00			; $a7 tsb
>11ed	10					.byte	$10			; $a8 trb
>11ee	14					.byte	$14			; $a9 jsr
>11ef	40					.byte	$40			; $aa jmp
>11f0	10					.byte	$10			; $ab bpl
>11f1	30					.byte	$30			; $ac bmi
>11f2	50					.byte	$50			; $ad bvc
>11f3	70					.byte	$70			; $ae bvs
>11f4	90					.byte	$90			; $af bcc
>11f5	b0					.byte	$b0			; $b0 bcs
>11f6	d0					.byte	$d0			; $b1 bne
>11f7	f0					.byte	$f0			; $b2 beq
>11f8	80					.byte	$80			; $b3 bra
>11f9	00					.byte	$00			; $b4 brk
>11fa	08					.byte	$08			; $b5 php
>11fb	18					.byte	$18			; $b6 clc
>11fc	28					.byte	$28			; $b7 plp
>11fd	38					.byte	$38			; $b8 sec
>11fe	40					.byte	$40			; $b9 rti
>11ff	48					.byte	$48			; $ba pha
>1200	58					.byte	$58			; $bb cli
>1201	5a					.byte	$5a			; $bc phy
>1202	60					.byte	$60			; $bd rts
>1203	68					.byte	$68			; $be pla
>1204	78					.byte	$78			; $bf sei
>1205	7a					.byte	$7a			; $c0 ply
>1206	88					.byte	$88			; $c1 dey
>1207	8a					.byte	$8a			; $c2 txa
>1208	98					.byte	$98			; $c3 tya
>1209	9a					.byte	$9a			; $c4 txs
>120a	a8					.byte	$a8			; $c5 tay
>120b	aa					.byte	$aa			; $c6 tax
>120c	b8					.byte	$b8			; $c7 clv
>120d	ba					.byte	$ba			; $c8 tsx
>120e	c8					.byte	$c8			; $c9 iny
>120f	ca					.byte	$ca			; $ca dex
>1210	d8					.byte	$d8			; $cb cld
>1211	da					.byte	$da			; $cc phx
>1212	e8					.byte	$e8			; $cd inx
>1213	ea					.byte	$ea			; $ce nop
>1214	f8					.byte	$f8			; $cf sed
>1215	fa					.byte	$fa			; $d0 plx
.1216					Group2OpcodeAvailability:
>1216	ae					.byte	$ae			; $99 asl $02
>1217	ae					.byte	$ae			; $9a rol $22
>1218	ae					.byte	$ae			; $9b lsr $42
>1219	ae					.byte	$ae			; $9c ror $62
>121a	0a					.byte	$0a			; $9d stx $82
>121b	0b					.byte	$0b			; $9e ldx $a2
>121c	aa					.byte	$aa			; $9f dec $c2
>121d	aa					.byte	$aa			; $a0 inc $e2
>121e	22					.byte	$22			; $a1 stz $60
>121f	aa					.byte	$aa			; $a2 bit $20
>1220	2a					.byte	$2a			; $a3 sty $80
>1221	ab					.byte	$ab			; $a4 ldy $a0
>1222	2b					.byte	$2b			; $a5 cpy $c0
>1223	0b					.byte	$0b			; $a6 cpx $e0
>1224	0a					.byte	$0a			; $a7 tsb $00
>1225	0a					.byte	$0a			; $a8 trb $10
>1226	08					.byte	$08			; $a9 jsr $14
>1227	08					.byte	$08			; $aa jmp $40
.1228					AssemblerSpecialCases:
>1228	aa 0a 6c				.byte	$aa,10,$6c		; jmp (abs)
>122b	aa 0b 7c				.byte	$aa,11,$7c		; jmp (abs,x)
>122e	9e 06 be				.byte	$9e,6,$be		; ldx abs,y
>1231	9e 09 b6				.byte	$9e,9,$b6		; ldx zp,y
>1234	9d 09 96				.byte	$9d,9,$96		; stx zp,y
>1237	a0 02 1a				.byte	$a0,2,$1a		; inc acc
>123a	9f 02 3a				.byte	$9f,2,$3a		; dec acc
>123d	a2 00 89				.byte	$a2,0,$89		; bit #
>1240	a1 03 9c				.byte	$a1,3,$9c		; stz abs
>1243	a1 07 9e				.byte	$a1,7,$9e		; stz abs,x
>1246	00					.byte	0

;******  Return to file: assembler/assemblecmd.asm


;******  Return to file: assembler/assembler.asm


;******  Processing file: assembler/assemblelabel.asm

.1247					AssembleLabel:
.1247	b1 28		lda ($28),y			lda 	(codePtr),y 				; check it's followed by a variable name.
.1249	c9 3a		cmp #$3a			cmp 	#$3A
.124b	b0 4b		bcs $1298			bcs 	_ALSyntax
.124d	a9 00		lda #$00			lda 	#0							; get a variable name on to stack:0
.124f	a2 00		ldx #$00		ldx	#0
.1251	20 d3 40	jsr $40d3		jsr	variableHandler
.1254	a5 48		lda $48				lda 	esType 						; check integer reference
.1256	c9 80		cmp #$80			cmp 	#$80
.1258	d0 3e		bne $1298			bne 	_ALSyntax
.125a	a5 50		lda $50				lda 	esInt0 						; copy that reference address to temp0
.125c	85 2a		sta $2a				sta 	temp0
.125e	a5 58		lda $58				lda 	esInt1
.1260	85 2b		sta $2b				sta 	temp0+1
.1262	98		tya				tya
.1263	48		pha				pha
.1264	ad 38 0a	lda $0a38			lda 	SingleLetterVar+("O"-"A")*4	; are we in Pass 2
.1267	4a		lsr a				lsr 	a
.1268	90 11		bcc $127b			bcc 	_ALWrite
.126a	a0 00		ldy #$00			ldy 	#0
.126c	ad 3c 0a	lda $0a3c			lda 	SingleLetterVar+("P"-"A")*4 ; compare the value in P to the variable
.126f	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.1271	d0 20		bne $1293			bne 	_ALChanged
.1273	c8		iny				iny
.1274	ad 3d 0a	lda $0a3d			lda 	SingleLetterVar+("P"-"A")*4+1
.1277	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.1279	d0 18		bne $1293			bne 	_ALChanged
.127b					_ALWrite:
.127b	a0 00		ldy #$00			ldy 	#0
.127d	ad 3c 0a	lda $0a3c			lda 	SingleLetterVar+("P"-"A")*4 ; copy the value in P into the variable
.1280	91 2a		sta ($2a),y			sta 	(temp0),y
.1282	ad 3d 0a	lda $0a3d			lda 	SingleLetterVar+("P"-"A")*4+1
.1285	c8		iny				iny
.1286	91 2a		sta ($2a),y			sta 	(temp0),y
.1288	a9 00		lda #$00			lda 	#0
.128a	c8		iny				iny
.128b	91 2a		sta ($2a),y			sta 	(temp0),y
.128d	c8		iny				iny
.128e	91 2a		sta ($2a),y			sta 	(temp0),y
.1290	68		pla				pla
.1291	a8		tay				tay
.1292	60		rts				rts
.1293					_ALChanged:
.1293	a2 26		ldx #$26			ldx 	#ErrorID_Label
.1295	20 e0 14	jsr $14e0		jsr	errorHandler
.1298					_ALSyntax:
.1298	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.129a	20 e0 14	jsr $14e0		jsr	errorHandler

;******  Return to file: assembler/assembler.asm


;******  Processing file: assembler/subgroup.asm

.129d					AssembleGroup1:
.129d	ad f3 0a	lda $0af3			lda 	asmToken 					; firstly, we throw out STA immediate
.12a0	c9 95		cmp #$95			cmp 	#TKW_STA
.12a2	d0 07		bne $12ab			bne 	_AG1NotStoreImm
.12a4	ad f4 0a	lda $0af4			lda 	asmMode
.12a7	c9 00		cmp #$00			cmp 	#AMD_IMM
.12a9	f0 2c		beq $12d7			beq 	AG1ModeError
.12ab					_AG1NotStoreImm:
.12ab	ae f4 0a	ldx $0af4			ldx 	asmMode						; get mode into X.
.12ae	bd dc 12	lda $12dc,x			lda		AMDOperandSize,X 			; get the size of the operand and push on stack
.12b1	48		pha				pha
.12b2	f0 23		beq $12d7			beq 	AG1ModeError 				; if the size is zero, the mode must be Accumulator
.12b4	e0 00		cpx #$00			cpx 	#0 							; if the mode is zero, e.g. immediate
.12b6	d0 02		bne $12ba			bne 	_AG1NotImmediate
.12b8	a2 02		ldx #$02			ldx 	#2 							; then we use offset 2 here. This is how the 6502
.12ba					_AG1NotImmediate:
.12ba	e0 0d		cpx #$0d			cpx 	#AMD_ZEROINDX 				; (zero,x) uses slot 0.
.12bc	d0 02		bne $12c0			bne 	_AG1NotZX
.12be	a2 00		ldx #$00			ldx 	#0
.12c0					_AG1NotZX:
.12c0	68		pla				pla 								; restore length
.12c1	e0 09		cpx #$09			cpx 	#9 							; anything > 8 fails.
.12c3	b0 10		bcs $12d5			bcs 	AG1Fail
.12c5					AG1ReturnValue:
.12c5	85 32		sta $32				sta 	tempShort 					; save size of operand
.12c7	18		clc				clc
.12c8	bd ea 12	lda $12ea,x			lda 	AMDOffsetFromBase,X 		; get the offset for the address mode.
.12cb	6d f5 0a	adc $0af5			adc 	asmBaseOpcode 				; add the base opcode.
.12ce	a6 32		ldx $32				ldx 	tempShort 					; length in X
.12d0	20 e0 10	jsr $10e0			jsr 	AsmWriteInstruction 		; output instruction.
.12d3	38		sec				sec
.12d4	60		rts				rts
.12d5					AG1Fail:
.12d5	18		clc				clc
.12d6	60		rts				rts
.12d7					AG1ModeError:
.12d7	a2 24		ldx #$24			ldx 	#ErrorID_Assembler
.12d9	20 e0 14	jsr $14e0		jsr	errorHandler
.12dc					AMDOperandSize:
>12dc	01 01 00 02					.byte 	1,1,0,2
>12e0	01 01 02 02					.byte 	1,1,2,2
>12e4	01 01 02 02					.byte 	1,1,2,2
>12e8	01 01						.byte 	1,1
.12ea					AMDOffsetFromBase:
>12ea	00 04 08 0c					.byte 	0,4,8,12
>12ee	10 14 18 1c					.byte	16,20,24,28
>12f2	11 00 00 00					.byte 	17,0,0,0
>12f6	00 00						.byte 	0,0
.12f8					AssembleGroup2:
.12f8	ad f4 0a	lda $0af4			lda 	asmMode 					; get the mode; if >= 8 cannot be a legit group 2
.12fb	c9 08		cmp #$08			cmp 	#8
.12fd	b0 18		bcs $1317			bcs 	_AG2Fail
.12ff	85 2a		sta $2a				sta 	temp0 						; save in temp9
.1301	ae f3 0a	ldx $0af3			ldx 	asmToken					; get token in X, then get the availability flags for it
.1304	bd 7d 11	lda $117d,x			lda 	Group2OpcodeAvailability-TKA_GROUP2,x
.1307					_AG2Shift:
.1307	4a		lsr a				lsr 	a
.1308	c6 2a		dec $2a				dec 	temp0
.130a	10 fb		bpl $1307			bpl 	_AG2Shift
.130c	90 09		bcc $1317			bcc 	_AG2Fail 					; cannot do that instruction w/that opcode.
.130e	ae f4 0a	ldx $0af4			ldx  	asmMode 					; mode in X
.1311	bd dc 12	lda $12dc,x			lda		AMDOperandSize,X 			; get the size of the operand in A
.1314	4c c5 12	jmp $12c5			jmp 	AG1ReturnValue 				; and use that with Group 1's exit code
.1317					_AG2Fail:
.1317	18		clc				clc
.1318	60		rts				rts
.1319					AssembleGroup3:
.1319	ad 38 0a	lda $0a38			lda 	SingleLetterVar+("O"-"A")*4	; check bit 0 (pass) of O
.131c	4a		lsr a				lsr 	a
.131d	a9 00		lda #$00			lda 	#0 							; if clear, e.g. pass 1, use default zero.
.131f	90 21		bcc $1342			bcc 	_AG3Default
.1321	38		sec				sec	 								; calculate branch offset
.1322	a5 50		lda $50				lda		esInt0
.1324	ed 3c 0a	sbc $0a3c			sbc 	SingleLetterVar+("P"-"A")*4
.1327	aa		tax				tax
.1328	a5 58		lda $58				lda		esInt1
.132a	ed 3d 0a	sbc $0a3d			sbc 	SingleLetterVar+("P"-"A")*4+1
.132d	85 58		sta $58				sta 	esInt1
.132f	8a		txa				txa 								; add 126, now 128 too many.
.1330	18		clc				clc 								; we can use this to check the range
.1331	69 7e		adc #$7e			adc 	#126
.1333	85 50		sta $50				sta 	esInt0
.1335	90 02		bcc $1339			bcc 	_AG3NoCarry
.1337	e6 58		inc $58				inc 	esInt1
.1339					_AG3NoCarry:
.1339	a5 58		lda $58				lda 	esInt1 						; check in range.
.133b	d0 0b		bne $1348			bne 	_AG3Range
.133d	a5 50		lda $50				lda 	esInt0 						; fix up branch distance
.133f	38		sec				sec
.1340	e9 80		sbc #$80			sbc 	#128
.1342					_AG3Default:
.1342	85 50		sta $50				sta 	esInt0
.1344					_AG3ExitOk:
.1344	a2 01		ldx #$01			ldx 	#1 							; one opcode, use AG4 Code
.1346	d0 07		bne $134f			bne 	AG4Write
.1348					_AG3Range:
.1348	a2 25		ldx #$25			ldx 	#ErrorID_Branch
.134a	20 e0 14	jsr $14e0		jsr	errorHandler
.134d					AssembleGroup4:
.134d	a2 00		ldx #$00			ldx 	#0 							; no parameters in the opcode.
.134f					AG4Write:
.134f	ad f5 0a	lda $0af5			lda 	asmBaseOpcode				; the opcode is the opcode base.
.1352	20 e0 10	jsr $10e0			jsr 	AsmWriteInstruction 		; output instruction.
.1355	38		sec				sec
.1356	60		rts				rts
.1357					AssembleSpecialCase:
.1357	a2 00		ldx #$00			ldx 	#0
.1359					_ASCScan:
.1359	bd 28 12	lda $1228,x			lda 	AssemblerSpecialCases,x 	; scan token and mode for match
.135c	cd f3 0a	cmp $0af3			cmp 	asmToken
.135f	d0 08		bne $1369			bne 	_ASCNext
.1361	bd 29 12	lda $1229,x			lda 	AssemblerSpecialCases+1,x
.1364	cd f4 0a	cmp $0af4			cmp 	asmMode
.1367	f0 0a		beq $1373			beq 	_ASCFound
.1369					_ASCNext:
.1369	e8		inx				inx									; next entry
.136a	e8		inx				inx
.136b	e8		inx				inx
.136c	bd 28 12	lda $1228,x			lda 	AssemblerSpecialCases,x 	; until table ends
.136f	d0 e8		bne $1359			bne 	_ASCScan
.1371	18		clc				clc
.1372	60		rts				rts
.1373					_ASCFound:
.1373	bd 2a 12	lda $122a,x			lda 	AssemblerSpecialCases+2,x 	; get the new opcode.
.1376	48		pha				pha
.1377	ae f4 0a	ldx $0af4			ldx  	asmMode 					; mode in X
.137a	bd dc 12	lda $12dc,x			lda		AMDOperandSize,X 			; get the size of the operand in X
.137d	aa		tax				tax
.137e	68		pla				pla 								; opcode back
.137f	20 e0 10	jsr $10e0			jsr 	AsmWriteInstruction 		; output instruction.
.1382	38		sec				sec
.1383	60		rts				rts

;******  Return to file: assembler/assembler.asm

.1384					assemblerHandler:
.1384	7c 87 13	jmp ($1387,x)			jmp 	(assemblerVectors,x)
.1387					assemblerVectors:
>1387	75 11					.word AssembleOneInstruction ; index 0
>1389	47 12					.word AssembleLabel        ; index 2

;******  Return to file: basic.asm

.138b					section_end_assembler:
.138b					section_start_device:

;******  Processing file: device/device.asm


;******  Processing file: device/option_x16/x16break.asm

.138b					X16Break:
.138b	20 e1 ff	jsr $ffe1			jsr 	$FFE1
.138e	f0 01		beq $1391			beq 	_IsBreak
.1390	60		rts				rts
.1391					_IsBreak:
.1391	a2 21		ldx #$21			ldx 	#ErrorID_Break
.1393	20 e0 14	jsr $14e0		jsr	errorHandler

;******  Return to file: device/device.asm


;******  Processing file: device/option_x16/x16file.asm

.1396					ExternSave:
.1396	98		tya				tya
.1397	48		pha				pha
.1398	20 e6 13	jsr $13e6			jsr 	ExternGetLength 			; get length of file into A name YX
.139b	20 bd ff	jsr $ffbd			jsr 	$FFBD 						; set name
.139e	a9 01		lda #$01			lda 	#1
.13a0	a2 08		ldx #$08			ldx 	#8	 						; device #8
.13a2	a0 00		ldy #$00			ldy 	#0
.13a4	20 ba ff	jsr $ffba			jsr 	$FFBA 						; set LFS
.13a7	a5 51		lda $51				lda 	esInt0+1 					; copy start of save address to temp0
.13a9	85 2a		sta $2a				sta 	temp0
.13ab	a5 59		lda $59				lda 	esInt1+1
.13ad	85 2b		sta $2b				sta 	temp0+1
.13af	a6 52		ldx $52				ldx 	esInt0+2 					; end address
.13b1	a4 5a		ldy $5a				ldy 	esInt1+2
.13b3	a9 2a		lda #$2a			lda 	#temp0 						; ref to start address
.13b5	20 d8 ff	jsr $ffd8			jsr 	$FFD8 						; save
.13b8	b0 03		bcs $13bd			bcs 	_ESSave
.13ba	68		pla				pla
.13bb	a8		tay				tay
.13bc	60		rts				rts
.13bd					_ESSave:
.13bd	a2 1f		ldx #$1f			ldx 	#ErrorID_Save
.13bf	20 e0 14	jsr $14e0		jsr	errorHandler
.13c2					ExternLoad:
.13c2	98		tya				tya
.13c3	48		pha				pha
.13c4	20 e6 13	jsr $13e6			jsr 	ExternGetLength 			; get length of file into A name YX
.13c7	20 bd ff	jsr $ffbd			jsr 	$FFBD 						; set name
.13ca	a9 01		lda #$01			lda 	#1
.13cc	a2 08		ldx #$08			ldx 	#8	 						; device #8
.13ce	a0 00		ldy #$00			ldy 	#0
.13d0	20 ba ff	jsr $ffba			jsr 	$FFBA 						; set LFS
.13d3	a6 51		ldx $51				ldx 	esInt0+1 					; load address
.13d5	a4 59		ldy $59				ldy 	esInt1+1
.13d7	a9 00		lda #$00			lda 	#0 							; load command
.13d9	20 d5 ff	jsr $ffd5			jsr 	$FFD5
.13dc	b0 03		bcs $13e1			bcs 	_ESLoad
.13de	68		pla				pla
.13df	a8		tay				tay
.13e0	60		rts				rts
.13e1					_ESLoad:
.13e1	a2 20		ldx #$20			ldx 	#ErrorID_Load
.13e3	20 e0 14	jsr $14e0		jsr	errorHandler
.13e6					ExternGetLength:
.13e6	a5 50		lda $50				lda 	esInt0 						; length into A.
.13e8	85 2a		sta $2a				sta 	temp0
.13ea	a5 58		lda $58				lda 	esInt1
.13ec	85 2b		sta $2b				sta 	temp0+1
.13ee	a0 00		ldy #$00			ldy 	#0
.13f0	b1 2a		lda ($2a),y			lda 	(temp0),y
.13f2	a6 50		ldx $50				ldx 	esInt0 						; name into YX
.13f4	a4 58		ldy $58				ldy 	esInt1
.13f6	e8		inx				inx 								; advance over the length pointer.
.13f7	d0 01		bne $13fa			bne 	_ESNoCarry
.13f9	c8		iny				iny
.13fa					_ESNoCarry:
.13fa	60		rts				rts

;******  Return to file: device/device.asm


;******  Processing file: device/option_x16/x16io.asm

=240					MaxLineInputSize = 240
.0af6					bufferCount:
>0af6							.fill 	0
.0af6					bufferStorage:
>0af6							.fill 	MaxLineInputSize
.13fb					IOInitialise:
.13fb	a9 0f		lda #$0f			lda 	#15 						; switch to upper/lower case mode
.13fd	20 26 14	jsr $1426			jsr 	IOPrintChar
.1400	a9 02		lda #$02			lda 	#2 							; green on black and clear screen
.1402	20 52 14	jsr $1452			jsr 	IOInk
.1405	a9 00		lda #$00			lda 	#0
.1407	20 66 14	jsr $1466			jsr 	IOPaper
.140a	20 0e 14	jsr $140e			jsr 	IOClearScreen
.140d	60		rts				rts
.140e					IOClearScreen:
.140e	48		pha				pha
.140f	a9 93		lda #$93			lda	 	#147 						; char code $93 clears screen
.1411	20 26 14	jsr $1426			jsr 	IOPrintChar
.1414	68		pla				pla
.1415	60		rts				rts
.1416					IONewLine:
.1416	48		pha				pha
.1417	a9 0d		lda #$0d			lda 	#13
.1419	20 26 14	jsr $1426			jsr 	IOPrintChar
.141c	68		pla				pla
.141d	60		rts				rts
.141e					IOTab:
.141e	48		pha				pha
.141f	a9 20		lda #$20			lda 	#32
.1421	20 26 14	jsr $1426			jsr 	IOPrintChar
.1424	68		pla				pla
.1425	60		rts				rts
.1426					IOPrintAscii:
.1426					IOPrintChar:
.1426	aa		tax				tax 								; save in X so we can save Y
.1427	5a		phy				phy
.1428	8a		txa				txa
.1429	c9 08		cmp #$08			cmp 	#8 							; make BS (8) onto CHR$(14) which is the
.142b	d0 02		bne $142f			bne 	_IOPCNotBS 					; Commodore/X16 backspace code.
.142d	a9 14		lda #$14			lda 	#$14
.142f					_IOPCNotBS:
.142f	20 d2 ff	jsr $ffd2			jsr 	$FFD2 						; CBM OS Call.
.1432	7a		ply				ply
.1433	60		rts				rts
.1434					IOInkey:
.1434	98		tya				tya
.1435	48		pha				pha
.1436	20 e4 ff	jsr $ffe4			jsr 	$FFE4
.1439	85 32		sta $32				sta 	tempShort
.143b	68		pla				pla
.143c	a8		tay				tay
.143d	a5 32		lda $32				lda 	tempShort					; no key pressed.
.143f	f0 10		beq $1451			beq 	_IOIExit
.1441	c9 0d		cmp #$0d			cmp 	#13 						; allow CR (13)
.1443	f0 0c		beq $1451			beq 	_IOIExit
.1445	c9 14		cmp #$14			cmp 	#$14 						; backspace code ($14) returns 8.
.1447	f0 06		beq $144f			beq 	_IOIBackspace
.1449	c9 20		cmp #$20			cmp 	#32 						; no other control allowed.
.144b	90 e7		bcc $1434			bcc 	IOInkey
.144d	b0 02		bcs $1451			bcs 	_IOIExit
.144f					_IOIBackspace:
.144f	a9 08		lda #$08			lda 	#8 							; return chr(8)
.1451					_IOIExit:
.1451	60		rts				rts
.1452					IOInk:
.1452	48		pha				pha
.1453	29 07		and #$07			and 	#7 							; 8 primaries
.1455	aa		tax				tax
.1456	bd 5e 14	lda $145e,x			lda 	_IOColourTable,x 			; look up CBM code and print it.
.1459	20 26 14	jsr $1426			jsr 	IOPrintChar
.145c	68		pla				pla
.145d	60		rts				rts
.145e					_IOColourTable:
>145e	90						.byte 	$90 					; 0 Black
>145f	96						.byte 	$96 					; 1 Red
>1460	1e						.byte 	$1E 					; 2 Green
>1461	9e						.byte 	$9E 					; 3 Yellow
>1462	9a						.byte 	$9A 					; 4 Blue
>1463	9c						.byte 	$9C 					; 5 Magenta
>1464	9f						.byte 	$9F 					; 6 Cyan
>1465	05						.byte 	$05 					; 7 White
.1466					IOPaper:
.1466	48		pha				pha
.1467	48		pha				pha
.1468	a9 01		lda #$01			lda 	#1 						; 1 swaps fgr/bgr, so we swap them, set fgr
.146a	20 26 14	jsr $1426			jsr 	IOPrintChar 			; and then swap them again.
.146d	68		pla				pla
.146e	20 52 14	jsr $1452			jsr 	IOInk
.1471	a9 01		lda #$01			lda 	#1
.1473	20 26 14	jsr $1426			jsr 	IOPrintChar
.1476	68		pla				pla
.1477	60		rts				rts
.1478					IOLocate:
.1478	48		pha				pha
.1479	a9 13		lda #$13			lda 	#$13 					; home cursor code
.147b	20 26 14	jsr $1426			jsr 	IOPrintChar
.147e	a9 11		lda #$11			lda 	#$11 	 				; print Y x $11 (down)
.1480	20 87 14	jsr $1487			jsr 	_IOLoc2
.1483	68		pla				pla
.1484	a8		tay				tay
.1485	a9 1d		lda #$1d			lda 	#$1D 					; print Y x $1D (right)
.1487					_IOLoc2:
.1487	c0 00		cpy #$00			cpy 	#0
.1489	f0 06		beq $1491			beq 	_IOLocExit
.148b	20 26 14	jsr $1426			jsr 	IOPrintChar
.148e	88		dey				dey
.148f	d0 f6		bne $1487			bne 	_IOLoc2
.1491					_IOLocExit:
.1491	60		rts				rts
.1492					IOInput:
.1492	a9 00		lda #$00			lda 	#0
.1494	8d f6 0a	sta $0af6			sta 	bufferCount
.1497					_IOILoop:
.1497	20 cf ff	jsr $ffcf			jsr 	$FFCF
.149a	c9 0d		cmp #$0d			cmp 	#13
.149c	f0 10		beq $14ae			beq 	_IOIExit
.149e	ae f6 0a	ldx $0af6			ldx 	bufferCount
.14a1	e0 f0		cpx #$f0			cpx 	#MaxLineInputSize
.14a3	f0 f2		beq $1497			beq 	_IOILoop
.14a5	ee f6 0a	inc $0af6			inc 	bufferCount
.14a8	9d f7 0a	sta $0af7,x			sta 	bufferStorage+1,x
.14ab	4c 97 14	jmp $1497			jmp 	_IOILoop
.14ae					_IOIExit:
.14ae	a9 f6		lda #$f6			lda 	#(bufferCount) & $FF
.14b0	85 2a		sta $2a				sta 	temp0
.14b2	a9 0a		lda #$0a			lda 	#(bufferCount) >> 8
.14b4	85 2b		sta $2b				sta 	1+(temp0)
.14b6	60		rts				rts

;******  Return to file: device/device.asm


;******  Processing file: device/option_x16/x16timer.asm

.14b7					IOReadTimer:
.14b7	20 de ff	jsr $ffde			jsr 	$FFDE 						; reads timer into YXA so we want only YA
.14ba	48		pha				pha
.14bb	8a		txa				txa
.14bc	a8		tay				tay
.14bd	68		pla				pla
.14be	60		rts				rts

;******  Return to file: device/device.asm

.14bf					deviceHandler:
.14bf	7c c2 14	jmp ($14c2,x)			jmp 	(deviceVectors,x)
.14c2					deviceVectors:
>14c2	8b 13					.word X16Break             ; index 0
>14c4	0e 14					.word IOClearScreen        ; index 2
>14c6	16 14					.word IONewLine            ; index 4
>14c8	fb 13					.word IOInitialise         ; index 6
>14ca	52 14					.word IOInk                ; index 8
>14cc	34 14					.word IOInkey              ; index 10
>14ce	92 14					.word IOInput              ; index 12
>14d0	c2 13					.word ExternLoad           ; index 14
>14d2	78 14					.word IOLocate             ; index 16
>14d4	66 14					.word IOPaper              ; index 18
>14d6	26 14					.word IOPrintChar          ; index 20
>14d8	26 14					.word IOPrintAscii         ; index 22
>14da	96 13					.word ExternSave           ; index 24
>14dc	1e 14					.word IOTab                ; index 26
>14de	b7 14					.word IOReadTimer          ; index 28

;******  Return to file: basic.asm

.14e0					section_end_device:
.14e0					section_start_error:

;******  Processing file: error/error.asm


;******  Processing file: error/errorhandler.asm

.14e0					ErrorHandler:
.14e0	8a		txa				txa
.14e1	48		pha				pha
.14e2	a9 01		lda #$01			lda 	#1 							; red
.14e4	a2 08		ldx #$08		ldx	#8
.14e6	20 bf 14	jsr $14bf		jsr	deviceHandler
.14e9	68		pla				pla
.14ea	aa		tax				tax
.14eb	a9 56		lda #$56			lda 	#(ErrorTextList) & $FF
.14ed	85 2a		sta $2a				sta 	temp0
.14ef	a9 15		lda #$15			lda 	#(ErrorTextList) >> 8
.14f1	85 2b		sta $2b				sta 	1+(temp0)
.14f3	ca		dex		_EHFind:dex									; errors start at 1
.14f4	f0 10		beq $1506			beq 	_EHFound
.14f6	a0 00		ldy #$00			ldy 	#0 							; goto next text message, add length + 1 to the pointer.
.14f8	38		sec				sec
.14f9	a5 2a		lda $2a				lda 	temp0
.14fb	71 2a		adc ($2a),y			adc 	(temp0),y
.14fd	85 2a		sta $2a				sta 	temp0
.14ff	90 f2		bcc $14f3			bcc 	_EHFind
.1501	e6 2b		inc $2b				inc 	temp0+1
.1503	4c f3 14	jmp $14f3			jmp 	_EHFind
.1506					_EHFound:
.1506	20 fe 17	jsr $17fe			jsr 	EHPrintAscii 				; print the string "temp0" now points to.
.1509	a0 00		ldy #$00			ldy 	#0 							; in a line, e.g. the offset to next is non zero.
.150b	b1 28		lda ($28),y			lda 	(codePtr),y
.150d	f0 39		beq $1548			beq 	_EHNoLine
.150f	a5 29		lda $29				lda 	codePtr+1 					; code running from the command line.
.1511	cd c9 0a	cmp $0ac9			cmp 	basePage+1
.1514	90 32		bcc $1548			bcc 	_EHNoLine
.1516	a9 52		lda #$52			lda 	#(EHAtMsg) & $FF
.1518	85 2a		sta $2a				sta 	temp0
.151a	a9 15		lda #$15			lda 	#(EHAtMsg) >> 8
.151c	85 2b		sta $2b				sta 	1+(temp0)
.151e	20 fe 17	jsr $17fe			jsr 	EHPrintAscii
.1521	a0 01		ldy #$01			ldy 	#1 							; set up line number in TOS
.1523	a2 00		ldx #$00			ldx 	#0
.1525	b1 28		lda ($28),y			lda 	(codePtr),y
.1527	95 50		sta $50,x			sta 	esInt0,x
.1529	c8		iny				iny
.152a	b1 28		lda ($28),y			lda 	(codePtr),y
.152c	95 58		sta $58,x			sta 	esInt1,x
.152e	a9 00		lda #$00			lda 	#0
.1530	95 60		sta $60,x			sta 	esInt2,x
.1532	95 68		sta $68,x			sta 	esInt3,x
.1534	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.1536	85 2a		sta $2a				sta 	temp0
.1538	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.153a	85 2b		sta $2b				sta 	1+(temp0)
.153c	a0 0a		ldy #$0a			ldy 	#10 						; in base 10.
.153e	a9 00		lda #$00			lda 	#0							; stack position zero.
.1540	a2 0c		ldx #$0c		ldx	#12
.1542	20 4c 32	jsr $324c		jsr	mainHandler
.1545	20 fe 17	jsr $17fe			jsr 	EHPrintAscii
.1548					_EHNoLine:
.1548	a2 04		ldx #$04		ldx	#4
.154a	20 bf 14	jsr $14bf		jsr	deviceHandler
.154d	a2 02		ldx #$02		ldx	#2
.154f	20 c1 1b	jsr $1bc1		jsr	interactionHandler
.1552					EHAtMsg:
>1552	03 20 40 20					.text 	3," @ "

;******  Processing file: error/../generated/errortext.inc

.1556					ErrorTextList:
>1556	13 46 65 61 74 75 72 65			.text 19,"Feature not Present"
>155e	20 6e 6f 74 20 50 72 65 73 65 6e 74
>156a	0c 53 79 6e 74 61 78 20			.text 12,"Syntax Error"
>1572	45 72 72 6f 72
>1577	0f 4d 6f 64 75 6c 65 20			.text 15,"Module disabled"
>157f	64 69 73 61 62 6c 65 64
>1587	10 41 73 73 65 72 74 69			.text 16,"Assertion failed"
>158f	6f 6e 20 66 61 69 6c 65 64
>1598	0e 44 69 76 69 64 65 20			.text 14,"Divide By Zero"
>15a0	42 79 20 5a 65 72 6f
>15a7	04 53 74 6f 70				.text 4,"Stop"
>15ac	0d 54 79 70 65 20 4d 69			.text 13,"Type Mismatch"
>15b4	73 6d 61 74 63 68
>15ba	0d 49 6c 6c 65 67 61 6c			.text 13,"Illegal Value"
>15c2	20 56 61 6c 75 65
>15c8	15 4d 69 73 73 69 6e 67			.text 21,"Missing right bracket"
>15d0	20 72 69 67 68 74 20 62 72 61 63 6b 65 74
>15de	0d 4d 69 73 73 69 6e 67			.text 13,"Missing comma"
>15e6	20 63 6f 6d 6d 61
>15ec	11 4d 69 73 73 69 6e 67			.text 17,"Missing reference"
>15f4	20 72 65 66 65 72 65 6e 63 65
>15fe	15 4c 69 6e 65 20 4e 75			.text 21,"Line Number not found"
>1606	6d 62 65 72 20 6e 6f 74 20 66 6f 75 6e 64
>1614	0f 53 74 72 69 6e 67 20			.text 15,"String too long"
>161c	74 6f 6f 20 6c 6f 6e 67
>1624	14 52 45 54 55 52 4e 20			.text 20,"RETURN without GOSUB"
>162c	77 69 74 68 6f 75 74 20 47 4f 53 55 42
>1639	14 55 4e 54 49 4c 20 77			.text 20,"UNTIL without REPEAT"
>1641	69 74 68 6f 75 74 20 52 45 50 45 41 54
>164e	10 4e 45 58 54 20 77 69			.text 16,"NEXT without FOR"
>1656	74 68 6f 75 74 20 46 4f 52
>165f	12 57 45 4e 44 20 77 69			.text 18,"WEND without WHILE"
>1667	74 68 6f 75 74 20 57 48 49 4c 45
>1672	14 45 4e 44 50 52 4f 43			.text 20,"ENDPROC without PROC"
>167a	20 77 69 74 68 6f 75 74 20 50 52 4f 43
>1687	0e 42 61 64 20 4e 45 58			.text 14,"Bad NEXT index"
>168f	54 20 69 6e 64 65 78
>1696	17 53 74 72 75 63 74 75			.text 23,"Structures nested wrong"
>169e	72 65 73 20 6e 65 73 74 65 64 20 77 72 6f 6e 67
>16ae	16 43 61 6e 6e 6f 74 20			.text 22,"Cannot create variable"
>16b6	63 72 65 61 74 65 20 76 61 72 69 61 62 6c 65
>16c5	19 52 65 74 75 72 6e 20			.text 25,"Return stack out of space"
>16cd	73 74 61 63 6b 20 6f 75 74 20 6f 66 20 73 70 61
>16dd	63 65
>16df	11 55 6e 6b 6e 6f 77 6e			.text 17,"Unknown Procedure"
>16e7	20 50 72 6f 63 65 64 75 72 65
>16f1	17 50 61 72 61 6d 65 74			.text 23,"Parameters do not match"
>16f9	65 72 73 20 64 6f 20 6e 6f 74 20 6d 61 74 63 68
>1709	15 41 72 72 61 79 20 61			.text 21,"Array already defined"
>1711	6c 72 65 61 64 79 20 64 65 66 69 6e 65 64
>171f	12 44 49 4d 20 72 65 71			.text 18,"DIM requires array"
>1727	75 69 72 65 73 20 61 72 72 61 79
>1732	0f 42 61 64 20 61 72 72			.text 15,"Bad array index"
>173a	61 79 20 69 6e 64 65 78
>1742	1d 57 72 6f 6e 67 20 6e			.text 29,"Wrong number of array indices"
>174a	75 6d 62 65 72 20 6f 66 20 61 72 72 61 79 20 69
>175a	6e 64 69 63 65 73
>1760	0b 4f 75 74 20 6f 66 20			.text 11,"Out of data"
>1768	64 61 74 61
>176c	14 43 61 6e 6e 6f 74 20			.text 20,"Cannot tokenise line"
>1774	74 6f 6b 65 6e 69 73 65 20 6c 69 6e 65
>1781	0b 53 61 76 65 20 66 61			.text 11,"Save failed"
>1789	69 6c 65 64
>178d	0b 4c 6f 61 64 20 66 61			.text 11,"Load failed"
>1795	69 6c 65 64
>1799	05 42 72 65 61 6b			.text 5,"Break"
>179f	0d 4f 75 74 20 6f 66 20			.text 13,"Out of memory"
>17a7	6d 65 6d 6f 72 79
>17ad	16 45 78 70 72 65 73 73			.text 22,"Expression too complex"
>17b5	69 6f 6e 20 74 6f 6f 20 63 6f 6d 70 6c 65 78
>17c4	10 42 61 64 20 4f 70 65			.text 16,"Bad Operand/Mode"
>17cc	72 61 6e 64 2f 4d 6f 64 65
>17d5	13 42 72 61 6e 63 68 20			.text 19,"Branch out of range"
>17dd	6f 75 74 20 6f 66 20 72 61 6e 67 65
>17e9	13 4c 61 62 65 6c 20 63			.text 19,"Label changed value"
>17f1	68 61 6e 67 65 64 20 76 61 6c 75 65
>17fd	00					.byte 0

;******  Return to file: error/errorhandler.asm

.17fe					EHPrintAscii:
.17fe	a0 00		ldy #$00			ldy 	#0
.1800	b1 2a		lda ($2a),y			lda 	(temp0),y
.1802	aa		tax				tax
.1803	f0 0f		beq $1814			beq 	_EHPExit
.1805					_EHPLoop:
.1805	c8		iny				iny
.1806	8a		txa				txa
.1807	48		pha				pha
.1808	b1 2a		lda ($2a),y			lda 	(temp0),y
.180a	a2 16		ldx #$16		ldx	#22
.180c	20 bf 14	jsr $14bf		jsr	deviceHandler
.180f	68		pla				pla
.1810	aa		tax				tax
.1811	ca		dex				dex
.1812	d0 f1		bne $1805			bne 	_EHPLoop
.1814					_EHPExit:
.1814	60		rts				rts

;******  Return to file: error/error.asm


;******  Return to file: basic.asm

.1815					section_end_error:
.1815					section_start_extension:

;******  Processing file: extension/extension.asm


;******  Processing file: extension/extensionhandler.asm

.1815					ExtensionHandler:
.1815	c9 ff		cmp #$ff			cmp 	#$FF						; A = $FF command, otherwise unary function stack level.
.1817	d0 08		bne $1821			bne 	_ExtensionUnary 			; is passed in A.
.1819	b1 28		lda ($28),y			lda 	(codePtr),y 				; so this is a command, using Group 2.
.181b	c8		iny				iny
.181c	0a		asl a				asl 	a
.181d	aa		tax				tax
.181e	7c 1f 18	jmp ($181f,x)			jmp 	(Group2Vectors-12,x)
.1821					_ExtensionUnary:
.1821	48		pha				pha 								; save stack pos in A
.1822	b1 28		lda ($28),y			lda 	(codePtr),y 				; get shifted token, double into X
.1824	c8		iny				iny
.1825	0a		asl a				asl 	a
.1826	aa		tax				tax
.1827	68		pla				pla 								; restore stack pos and call group3 command.
.1828	7c 27 18	jmp ($1827,x)			jmp 	(Group3Vectors-12,X)

;******  Processing file: extension/../generated/tokenvectors2.inc

.182b					Group2Vectors:
>182b	1d 19					.word	Command_VPoke            ; $86 vpoke
>182d	20 19					.word	Command_VDoke            ; $87 vdoke
>182f	fa 18					.word	Command_VLoad            ; $88 vload
>1831	51 18					.word	CommandMode              ; $89 mode

;******  Return to file: extension/extensionhandler.asm


;******  Processing file: extension/../generated/tokenvectors3.inc

.1833					Group3Vectors:
>1833	61 19					.word	Command_VPeek            ; $86 vpeek(
>1835	64 19					.word	Command_VDeek            ; $87 vdeek(

;******  Return to file: extension/extensionhandler.asm

.1837					XEvaluateInteger:
.1837	8a		txa				txa
.1838	a2 06		ldx #$06		ldx	#6
.183a	20 4c 32	jsr $324c		jsr	mainHandler
.183d	aa		tax				tax
.183e	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/mode.asm

.0be6					currentMode:
>0be6							.fill 	4
.183f					ForceMode0:
.183f	a2 00		ldx #$00			ldx 	#0
.1841	86 50		stx $50				stx 	esInt0 						; in case we do it.
.1843					_FMCheck:
.1843	bd ce 18	lda $18ce,x			lda 	CMModeList,x 				; do we need to switch ?
.1846	dd e6 0b	cmp $0be6,x			cmp 	currentMode,x
.1849	d0 11		bne $185c			bne 	CMSetMode 					; different so switch.
.184b	e8		inx				inx
.184c	e0 04		cpx #$04			cpx 	#4
.184e	d0 f3		bne $1843			bne 	_FMCheck
.1850	60		rts				rts
.1851					CommandMode:
.1851	a2 00		ldx #$00			ldx 	#0
.1853	20 37 18	jsr $1837			jsr 	XEvaluateInteger
.1856	a5 68		lda $68				lda 	esInt3
.1858	29 70		and #$70			and 	#$70
.185a	d0 06		bne $1862			bne 	CMNoExpand
.185c					CMSetMode:
.185c	20 ad 18	jsr $18ad			jsr 	CMExpandMode
.185f	4c 76 18	jmp $1876			jmp 	CMUpdateMode
.1862					CMNoExpand:
.1862	a5 50		lda $50				lda 	esInt0
.1864	8d e6 0b	sta $0be6			sta 	currentMode
.1867	a5 58		lda $58				lda 	esInt1
.1869	8d e7 0b	sta $0be7			sta 	currentMode+1
.186c	a5 60		lda $60				lda 	esInt2
.186e	8d e8 0b	sta $0be8			sta 	currentMode+2
.1871	a5 68		lda $68				lda 	esInt3
.1873	8d e9 0b	sta $0be9			sta 	currentMode+3
.1876					CMUpdateMode:
.1876	a2 11		ldx #$11			ldx 	#$11
.1878					_CMClear:
.1878	a9 00		lda #$00			lda 	#0
.187a	9d 29 9f	sta $9f29,x			sta 	$9F29,X
.187d	ca		dex				dex
.187e	10 f8		bpl $1878			bpl 	_CMClear
.1880	ad e9 0b	lda $0be9			lda 	currentMode+3 				; get current mode
.1883	48		pha				pha 								; stack twice.
.1884	48		pha				pha
.1885	29 70		and #$70			and 	#$70 						; isolates bits 6,5,4 (sprites,L1 enable,L0 enable)
.1887	09 01		ora #$01			ora 	#$01 						; turn the output on.
.1889	8d 29 9f	sta $9f29			sta 	$9F29 						; write to DC_VIDEO
.188c	68		pla				pla 								; get back
.188d	20 d2 18	jsr $18d2			jsr 	CMToScale 					; convert lower 2 bits to a scale.
.1890	8d 2a 9f	sta $9f2a			sta 	$9F2A 						; write to H-Scale
.1893	68		pla				pla 								; get back, convert bits 2,3 to a scale.
.1894	4a		lsr a				lsr 	a
.1895	4a		lsr a				lsr 	a
.1896	20 d2 18	jsr $18d2			jsr 	CMToScale 					; convert lower 2 bits to a scale.
.1899	8d 2b 9f	sta $9f2b			sta 	$9F2B
.189c	a2 00		ldx #$00			ldx 	#0 							; this is offset from $9F2D to do L0
.189e	ad e6 0b	lda $0be6			lda 	currentMode					; get L0 config byte
.18a1	20 dd 18	jsr $18dd			jsr 	CMDecodeLayer 				; and decode layer 0
.18a4	a2 07		ldx #$07			ldx 	#7 							; when we do layer 1, offset by 7 hence starts at $9F34
.18a6	ad e7 0b	lda $0be7			lda 	currentMode+1
.18a9	20 dd 18	jsr $18dd			jsr 	CMDecodeLayer
.18ac	60		rts				rts
.18ad					CMExpandMode:
.18ad	a5 50		lda $50				lda 	esInt0 						; get mode number
.18af	c9 01		cmp #$01			cmp 	#(CMEndModeList-CMModeList) >> 2
.18b1	b0 16		bcs $18c9			bcs 	_CMModeError
.18b3	0a		asl a				asl 	a 							; x 4 into X
.18b4	0a		asl a				asl 	a
.18b5	aa		tax				tax
.18b6	98		tya				tya
.18b7	48		pha				pha
.18b8	a0 00		ldy #$00			ldy 	#0
.18ba					_CMEMCopy:
.18ba	bd ce 18	lda $18ce,x			lda 	CMModeList,x
.18bd	99 e6 0b	sta $0be6,y			sta 	currentMode,y
.18c0	e8		inx				inx
.18c1	c8		iny				iny
.18c2	c0 04		cpy #$04			cpy 	#4
.18c4	d0 f4		bne $18ba			bne 	_CMEMCopy
.18c6	68		pla				pla
.18c7	a8		tay				tay
.18c8	60		rts				rts
.18c9					_CMModeError:
.18c9	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.18cb	20 e0 14	jsr $14e0		jsr	errorHandler
.18ce					CMModeList:
>18ce	00 60 00 20					.dword	$20006000 					; Mode 0 which is the standard 80x60 mode, no sprites
.18d2					CMEndModeList:
.18d2					CMToScale:
.18d2	29 03		and #$03			and 	#3 							; lower 2 bits only
.18d4	aa		tax				tax 								; put in X for counting
.18d5	a9 00		lda #$00			lda 	#0 							; zero result
.18d7	38		sec				sec 								; first time rotate CS in
.18d8					_CMTSLoop:
.18d8	6a		ror a				ror 	a
.18d9	ca		dex				dex
.18da	10 fc		bpl $18d8			bpl 	_CMTSLoop
.18dc	60		rts				rts
.18dd					CMDecodeLayer:
.18dd	48		pha				pha 								; save it.
.18de	29 f7		and #$f7			and 	#$F7 						; all the bits except T256C which you can't set using this
.18e0	9d 2d 9f	sta $9f2d,x			sta 	$9F2D,X
.18e3	68		pla				pla 								; get it back
.18e4	29 08		and #$08			and 	#$08 						; the missing bit sets the tile size.
.18e6	f0 02		beq $18ea			beq 	_CMDLNotSet
.18e8	a9 03		lda #$03			lda 	#$03 						; which sets both lower bits, they're square.
.18ea					_CMDLNotSet:
.18ea	e0 00		cpx #$00			cpx 	#0
.18ec	f0 06		beq $18f4			beq 	_CMDLayer0 					; layer 1 has standard defaults for tile table, e.g. $7C
.18ee	09 7c		ora #$7c			ora 	#$7C 						; so set those bits and write it out.
.18f0	9d 2f 9f	sta $9f2f,x			sta 	$9F2F,X
.18f3	60		rts				rts
.18f4					_CMDLayer0:
.18f4	09 80		ora #$80			ora 	#$80 						; tile base is $80
.18f6	9d 2f 9f	sta $9f2f,x			sta 	$9F2F,X
.18f9	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/vload.asm

.18fa					Command_VLoad:
.18fa	a2 00		ldx #$00			ldx 	#0 								; string which is the file name
.18fc	20 c1 2a	jsr $2ac1			jsr 	EvaluateString
.18ff	e8		inx				inx
.1900	20 5e 31	jsr $315e			jsr 	MInt32False
.1903	a5 35		lda $35				lda 	lowMemory 						; load it into lowMemory (for now ?)
.1905	95 50		sta $50,x			sta 	esInt0,x
.1907	a5 36		lda $36				lda 	lowMemory+1
.1909	95 58		sta $58,x			sta 	esInt1,x
.190b	ca		dex				dex
.190c	a2 0e		ldx #$0e		ldx	#14
.190e	20 bf 14	jsr $14bf		jsr	deviceHandler
.1911	a5 51		lda $51				lda 	esInt0+1 						; (temp0) is where we are decoding from.
.1913	85 2a		sta $2a				sta 	temp0
.1915	a5 59		lda $59				lda 	esInt1+1
.1917	85 2b		sta $2b				sta 	temp0+1
.1919	20 82 19	jsr $1982			jsr 	LoadVRAMFile 					; load the VRAM file in.
.191c	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/vpeekpoke.asm

.191d					Command_VPoke:
.191d	38		sec				sec 						; one byte , CS
.191e	b0 01		bcs $1921			bcs 	CmdVideoWrite
.1920					Command_VDoke:
.1920	18		clc				clc 						; two bytes, CC
.1921					CmdVideoWrite:
.1921	08		php				php 						; save one or two btes
.1922	a2 00		ldx #$00			ldx 	#0  				; get address and value into levels 0,1
.1924	20 37 18	jsr $1837			jsr 	XEvaluateInteger
.1927	20 de 31	jsr $31de			jsr 	CheckComma
.192a	e8		inx				inx
.192b	20 37 18	jsr $1837			jsr 	XEvaluateInteger
.192e	ca		dex				dex
.192f	20 40 19	jsr $1940			jsr 	SetUpTOSVRamAddress ; copy target address to VRAM address registers
.1932	a5 51		lda $51				lda 	esInt0+1 			; get MSB of write value
.1934	8d 23 9f	sta $9f23			sta 	$9F23
.1937	28		plp				plp 						; if it was Poke then exit
.1938	b0 05		bcs $193f			bcs 	_CVWExit
.193a	a5 59		lda $59				lda 	esInt1+1 			; doke, write the MSB.
.193c	8d 23 9f	sta $9f23			sta 	$9F23
.193f					_CVWExit:
.193f	60		rts				rts
.1940					SetUpTOSVRamAddress:
.1940	b5 60		lda $60,x			lda 	esInt2,x 			; check range of address, data to $FFFF
.1942	29 fe		and #$fe			and 	#$FE
.1944	15 68		ora $68,x			ora 	esInt3,x
.1946	d0 14		bne $195c			bne 	CVWValue
.1948	b5 50		lda $50,x			lda 	esInt0,x			; set address up
.194a	8d 20 9f	sta $9f20			sta 	$9F20
.194d	b5 58		lda $58,x			lda 	esInt1,x
.194f	8d 21 9f	sta $9f21			sta	 	$9F21
.1952	b5 60		lda $60,x			lda 	esInt2,x
.1954	29 01		and #$01			and 	#1
.1956	09 10		ora #$10			ora 	#$10 				; step 1.
.1958	8d 22 9f	sta $9f22			sta 	$9F22
.195b	60		rts				rts
.195c					CVWValue:
.195c	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.195e	20 e0 14	jsr $14e0		jsr	errorHandler
.1961					Command_VPeek:
.1961	38		sec				sec 						; one byte , CS
.1962	b0 01		bcs $1965			bcs 	CmdVideoRead
.1964					Command_VDeek:
.1964	18		clc				clc 						; two bytes, CC
.1965					CmdVideoRead:
.1965	08		php				php 						; save action on stack.
.1966	aa		tax				tax 						; save stack position
.1967	20 37 18	jsr $1837			jsr 	XEvaluateInteger 	; address
.196a	20 d1 31	jsr $31d1			jsr 	CheckRightParen 	; closing right bracket.
.196d	20 40 19	jsr $1940			jsr 	SetUpTOSVRamAddress	; set up VRAM address.
.1970	20 5e 31	jsr $315e			jsr 	MInt32False 		; zero return.
.1973	ad 23 9f	lda $9f23			lda 	$9F23				; copy 1st byte
.1976	95 50		sta $50,x			sta 	esInt0,x
.1978	28		plp				plp 						; check if DOKE (carry was clear)
.1979	b0 05		bcs $1980			bcs 	_CVRExit
.197b	ad 23 9f	lda $9f23			lda 	$9F23 				; copy 2nd byte
.197e	95 58		sta $58,x			sta 	esInt1,x
.1980					_CVRExit:
.1980	8a		txa				txa 						; return X position.
.1981	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/vramprocess.asm

.0bea					compressMode:
>0bea							.fill 	1
.1982					LoadVRAMFile:
.1982					_LVRLoop:
.1982	20 d2 19	jsr $19d2			jsr 	LVFGet 						; get the next (never access direct)
.1985	c9 80		cmp #$80			cmp 	#$80 						; exit ?
.1987	f0 3a		beq $19c3			beq 	_LVRExit
.1989	b0 39		bcs $19c4			bcs 	_LVRLoad 					; load data in ?
.198b	c9 08		cmp #$08			cmp 	#$08 						; is it set address ?
.198d	90 09		bcc $1998			bcc 	_LVRSetAddress
.198f	c9 10		cmp #$10			cmp 	#$10 						; is it set compression type ?
.1991	90 29		bcc $19bc			bcc 	_LVRSetCompress
.1993	a2 01		ldx #$01			ldx 	#ErrorID_missing
.1995	20 e0 14	jsr $14e0		jsr	errorHandler
.1998					_LVRSetAddress:
.1998	85 2d		sta $2d				sta 	temp1+1 					; 24 bit in temp1+1/temp1/A
.199a	20 d2 19	jsr $19d2			jsr 	LVFGet
.199d	85 2c		sta $2c				sta 	temp1
.199f	a9 00		lda #$00			lda 	#0
.19a1	46 2d		lsr $2d				lsr 	temp1+1 					; / 2 twice.
.19a3	66 2c		ror $2c				ror 	temp1
.19a5	6a		ror a				ror		a
.19a6	46 2d		lsr $2d				lsr 	temp1+1
.19a8	66 2c		ror $2c				ror 	temp1
.19aa	6a		ror a				ror		a
.19ab	8d 20 9f	sta $9f20			sta 	$9F20 						; set write address with +1 increment
.19ae	a5 2c		lda $2c				lda 	temp1
.19b0	8d 21 9f	sta $9f21			sta 	$9F21
.19b3	a5 2d		lda $2d				lda 	temp1+1
.19b5	09 10		ora #$10			ora 	#$10
.19b7	8d 22 9f	sta $9f22			sta 	$9F22
.19ba	d0 c6		bne $1982			bne 	_LVRLoop
.19bc					_LVRSetCompress:
.19bc	29 07		and #$07			and 	#7
.19be	8d ea 0b	sta $0bea			sta 	compressMode
.19c1	10 bf		bpl $1982			bpl 	_LVRLoop
.19c3					_LVRExit:
.19c3	60		rts				rts
.19c4					_LVRLoad:
.19c4	29 7f		and #$7f			and 	#$7F 						; count in X (is > 0)
.19c6	aa		tax				tax
.19c7					_LVRLCopy:
.19c7	20 d2 19	jsr $19d2			jsr 	LVFGet 						; write to data.
.19ca	8d 23 9f	sta $9f23			sta 	$9F23
.19cd	ca		dex				dex
.19ce	d0 f7		bne $19c7			bne 	_LVRLCopy
.19d0	f0 b0		beq $1982			beq 	_LVRLoop
.19d2	84 32		sty $32		LVFGet:	sty 	tempShort
.19d4	a0 00		ldy #$00			ldy 	#0
.19d6	b1 2a		lda ($2a),y			lda 	(temp0),y
.19d8	a4 32		ldy $32				ldy	 	tempShort
.19da	e6 2a		inc $2a				inc 	temp0
.19dc	d0 02		bne $19e0			bne 	_LVFGExit
.19de	e6 2b		inc $2b				inc 	temp0+1
.19e0					_LVFGExit:
.19e0	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Return to file: basic.asm

.19e1					section_end_extension:
.19e1					section_start_floatingpoint:

;******  Processing file: floatingpoint/floatingpoint.asm

.19e1					floatingpointHandler:
.19e1	a2 03		ldx #$03			ldx 	#ErrorID_NoModule
.19e3	20 e0 14	jsr $14e0		jsr	errorHandler

;******  Return to file: basic.asm

.19e6					section_end_floatingpoint:
.19e6					section_start_interaction:

;******  Processing file: interaction/interaction.asm


;******  Processing file: interaction/cold.asm

.19e6					ColdStartEntry:
.19e6	a2 ff		ldx #$ff			ldx 	#$FF
.19e8	9a		txs				txs
.19e9	a2 02		ldx #$02		ldx	#2
.19eb	20 bf 14	jsr $14bf		jsr	deviceHandler
.19ee	a0 ff		ldy #$ff			ldy 	#255
.19f0					_CSBanner:
.19f0	c8		iny				iny
.19f1	b9 17 1a	lda $1a17,y			lda 	Intro,y
.19f4	f0 14		beq $1a0a			beq 	_CSStart
.19f6	c9 08		cmp #$08			cmp 	#8
.19f8	90 08		bcc $1a02			bcc 	_CSInk
.19fa	a2 16		ldx #$16		ldx	#22
.19fc	20 bf 14	jsr $14bf		jsr	deviceHandler
.19ff	4c f0 19	jmp $19f0			jmp 	_CSBanner
.1a02					_CSInk:
.1a02	a2 08		ldx #$08		ldx	#8
.1a04	20 bf 14	jsr $14bf		jsr	deviceHandler
.1a07	4c f0 19	jmp $19f0			jmp 	_CSBanner
.1a0a					_CSStart:
.1a0a	a2 10		ldx #$10		ldx	#16
.1a0c	20 4c 32	jsr $324c		jsr	mainHandler
.1a0f	a2 02		ldx #$02		ldx	#2
.1a11	20 4c 32	jsr $324c		jsr	mainHandler
.1a14	4c 29 1b	jmp $1b29			jmp 	WarmStartEntry
>1a17	06 2a 2a 2a 20 36 35 30		Intro:	.text 	6,"*** 6502 Extended BASIC ***",13,13
>1a1f	32 20 45 78 74 65 6e 64 65 64 20 42 41 53 49 43
>1a2f	20 2a 2a 2a 0d 0d
>1a35	03 57 72 69 74 74 65 6e				.text 	3,"Written by Paul Robson 2021",13,13
>1a3d	20 62 79 20 50 61 75 6c 20 52 6f 62 73 6f 6e 20
>1a4d	32 30 32 31 0d 0d
>1a53	02 42 61 73 69 63 20				.text 	2,"Basic "
>1a5a	30 2e 31 37					.text "0.17"
>1a5e	20 28						.text 	" ("
>1a60	31 38 2d 4d 61 72 2d 32				.text "18-Mar-2021"
>1a68	30 32 31
>1a6b	29 0d 0d 00					.text 	")",13,13,0

;******  Return to file: interaction/interaction.asm


;******  Processing file: interaction/delete.asm

.1a6f					DeleteLine:
.1a6f	ad c8 0a	lda $0ac8			lda 	basePage 					; copy program base to temp0
.1a72	85 2a		sta $2a				sta 	temp0
.1a74	ad c9 0a	lda $0ac9			lda 	basePage+1
.1a77	85 2b		sta $2b				sta 	temp0+1
.1a79	a0 01		ldy #$01	_DLLoop:ldy 	#1 							; see if found line ?
.1a7b	a5 50		lda $50				lda 	esInt0 						; e.g. the linenumbers match
.1a7d	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.1a7f	d0 07		bne $1a88			bne 	_DLNext
.1a81	c8		iny				iny
.1a82	a5 58		lda $58				lda 	esInt1
.1a84	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.1a86	f0 06		beq $1a8e			beq 	_DLFound
.1a88	20 ac 1a	jsr $1aac	_DLNext:jsr 	IAdvanceTemp0 				; shift temp0 forward, return Z flag set if end.
.1a8b	d0 ec		bne $1a79			bne 	_DLLoop
.1a8d	60		rts				rts
.1a8e					_DLFound:
.1a8e	a0 00		ldy #$00			ldy 	#0 							; this is the line to cut, so this offset is the bytes to remove
.1a90	b1 2a		lda ($2a),y			lda 	(temp0),y
.1a92	a8		tay				tay 								; so we copy from (temp0),y
.1a93	a2 00		ldx #$00			ldx 	#0  						; to (temp0,x)
.1a95					_DLCopyDown:
.1a95	b1 2a		lda ($2a),y			lda 	(temp0),y 					; copy one byte.
.1a97	81 2a		sta ($2a,x)			sta 	(temp0,x)
.1a99	e6 2a		inc $2a				inc 	temp0 						; advance pointer
.1a9b	d0 02		bne $1a9f			bne 	_DLNoCarry
.1a9d	e6 2b		inc $2b				inc 	temp0+1
.1a9f					_DLNoCarry:
.1a9f	a5 2a		lda $2a				lda 	temp0 						; until hit low memory
.1aa1	c5 35		cmp $35				cmp 	lowMemory 					; which is comfortably after End Program.
.1aa3	d0 f0		bne $1a95			bne 	_DLCopyDown
.1aa5	a5 2b		lda $2b				lda 	temp0+1
.1aa7	c5 36		cmp $36				cmp 	lowMemory+1
.1aa9	d0 ea		bne $1a95			bne 	_DLCopyDown
.1aab	60		rts				rts
.1aac					IAdvanceTemp0:
.1aac	84 32		sty $32				sty 	tempShort
.1aae	18		clc				clc
.1aaf	a0 00		ldy #$00			ldy 	#0 							; get offset
.1ab1	b1 2a		lda ($2a),y			lda 	(temp0),y 					; add to temp0
.1ab3	65 2a		adc $2a				adc 	temp0
.1ab5	85 2a		sta $2a				sta 	temp0
.1ab7	90 02		bcc $1abb			bcc 	_IATNoCarry
.1ab9	e6 2b		inc $2b				inc 	temp0+1
.1abb					_IATNoCarry:
.1abb	b1 2a		lda ($2a),y			lda 	(temp0),y
.1abd	a4 32		ldy $32				ldy 	tempShort
.1abf	c9 00		cmp #$00			cmp		#0 							; Z set if program end.
.1ac1	60		rts				rts

;******  Return to file: interaction/interaction.asm


;******  Processing file: interaction/insert.asm

.1ac2					InsertLine:
.1ac2	ad c8 0a	lda $0ac8			lda 	basePage 					; copy program base to temp0
.1ac5	85 2a		sta $2a				sta 	temp0
.1ac7	ad c9 0a	lda $0ac9			lda 	basePage+1
.1aca	85 2b		sta $2b				sta 	temp0+1
.1acc					_ILLoop:
.1acc	a0 01		ldy #$01			ldy 	#1
.1ace	b1 2a		lda ($2a),y			lda 	(temp0),y
.1ad0	c5 50		cmp $50				cmp 	esInt0
.1ad2	c8		iny				iny
.1ad3	b1 2a		lda ($2a),y			lda 	(temp0),y
.1ad5	e5 58		sbc $58				sbc 	esInt1
.1ad7	b0 05		bcs $1ade			bcs 	_ILFound 					; we know it cannot be equal, it would have been deleted
.1ad9	20 ac 1a	jsr $1aac			jsr 	IAdvanceTemp0 				; shift temp0 forward, return Z flag set if end.
.1adc	d0 ee		bne $1acc			bne 	_ILLoop
.1ade					_ILFound:
.1ade	a5 35		lda $35				lda 	lowMemory 					; shift lowMemory up to make space for it.
.1ae0	85 2c		sta $2c				sta 	temp1             			; this pointer goes backwards
.1ae2	a5 36		lda $36				lda 	lowMemory+1
.1ae4	85 2d		sta $2d				sta 	temp1+1
.1ae6	ad 28 0d	lda $0d28			lda 	tokenBufferIndex 			; space to make in Y, 0 in X.
.1ae9	18		clc				clc 								; add 3 for the line number and offset.
.1aea	69 03		adc #$03			adc 	#3 							; tokenbuffer already has $80
.1aec	a8		tay				tay
.1aed	a2 00		ldx #$00			ldx 	#0
.1aef	a1 2c		lda ($2c,x)	_ILMove:lda 	(temp1,x)					; shift up
.1af1	91 2c		sta ($2c),y			sta 	(temp1),y
.1af3	a5 2c		lda $2c				lda 	temp1 						; check reached the insert point ?
.1af5	c5 2a		cmp $2a				cmp 	temp0
.1af7	d0 06		bne $1aff			bne 	_ILMNext
.1af9	a5 2d		lda $2d				lda 	temp1+1
.1afb	c5 2b		cmp $2b				cmp 	temp0+1
.1afd	f0 0b		beq $1b0a			beq 	_ILMCopy
.1aff					_ILMNext:
.1aff	a5 2c		lda $2c				lda 	temp1
.1b01	d0 02		bne $1b05			bne 	_ILNoBorrow
.1b03	c6 2d		dec $2d				dec 	temp1+1
.1b05					_ILNoBorrow:
.1b05	c6 2c		dec $2c				dec 	temp1
.1b07	4c ef 1a	jmp $1aef			jmp 	_ILMove 					; and go round again
.1b0a					_ILMCopy:
.1b0a	98		tya				tya 								; Y is the offset of the new line.
.1b0b	81 2a		sta ($2a,x)			sta 	(temp0,x)					; X = 0 still.
.1b0d	a0 01		ldy #$01			ldy 	#1 							; copy in line number.
.1b0f	a5 50		lda $50				lda 	esInt0
.1b11	91 2a		sta ($2a),y			sta 	(temp0),y
.1b13	c8		iny				iny
.1b14	a5 58		lda $58				lda 	esInt1
.1b16	91 2a		sta ($2a),y			sta 	(temp0),y
.1b18	a0 00		ldy #$00			ldy 	#0 							; copy the body in
.1b1a					_ILMCopy2:
.1b1a	b1 28		lda ($28),y			lda 	(codePtr),y
.1b1c	c8		iny				iny
.1b1d	c8		iny				iny
.1b1e	c8		iny				iny
.1b1f	91 2a		sta ($2a),y			sta 	(temp0),y
.1b21	88		dey				dey
.1b22	88		dey				dey
.1b23	cc 28 0d	cpy $0d28			cpy 	tokenBufferIndex
.1b26	d0 f2		bne $1b1a			bne 	_ILMCopy2
.1b28	60		rts				rts

;******  Return to file: interaction/interaction.asm


;******  Processing file: interaction/warm.asm

.1b29					WarmStartEntry:
.1b29	a2 ff		ldx #$ff			ldx 	#$FF
.1b2b	9a		txs				txs
.1b2c	a9 02		lda #$02			lda 	#2							; green text.
.1b2e	a2 08		ldx #$08		ldx	#8
.1b30	20 bf 14	jsr $14bf		jsr	deviceHandler
.1b33	a2 0c		ldx #$0c		ldx	#12
.1b35	20 bf 14	jsr $14bf		jsr	deviceHandler
.1b38	a5 2a		lda $2a				lda 	temp0	 					; copy temp0 to codePtr
.1b3a	85 28		sta $28				sta 	codePtr
.1b3c	a5 2b		lda $2b				lda 	temp0+1
.1b3e	85 29		sta $29				sta 	codePtr+1
.1b40	a2 04		ldx #$04		ldx	#4
.1b42	20 bf 14	jsr $14bf		jsr	deviceHandler
.1b45	a2 06		ldx #$06		ldx	#6
.1b47	20 05 3d	jsr $3d05		jsr	tokeniserHandler
.1b4a	c9 00		cmp #$00			cmp 	#0
.1b4c	f0 25		beq $1b73			beq 	WSEError 					; failed (tokenise can fail if it doesn't know a character e.g. |)
.1b4e	a9 25		lda #$25			lda 	#(tokenHeader) & $FF
.1b50	85 28		sta $28				sta 	codePtr
.1b52	a9 0c		lda #$0c			lda 	#(tokenHeader) >> 8
.1b54	85 29		sta $29				sta 	1+(codePtr)
.1b56	ad 28 0c	lda $0c28			lda 	tokenBuffer 				; is it a blank line, go get another line.
.1b59	c9 80		cmp #$80			cmp 	#$80
.1b5b	f0 cc		beq $1b29			beq 	WarmStartEntry
.1b5d	29 c0		and #$c0			and 	#$C0						; does it start with a number
.1b5f	c9 40		cmp #$40			cmp 	#$40 						; e.g. is it 01xx xxxx
.1b61	f0 15		beq $1b78			beq 	HasLineNumber
.1b63	a9 00		lda #$00			lda 	#0 							; zero the token header, so it will look like a
.1b65	8d 25 0c	sta $0c25			sta 	tokenHeader 				; fake program line.
.1b68	8d 26 0c	sta $0c26			sta 	tokenHeader+1
.1b6b	8d 27 0c	sta $0c27			sta 	tokenHeader+2
.1b6e	a2 12		ldx #$12		ldx	#18
.1b70	20 4c 32	jsr $324c		jsr	mainHandler
.1b73					WSEError:
.1b73	a2 1e		ldx #$1e			ldx 	#ErrorID_Tokenise
.1b75	20 e0 14	jsr $14e0		jsr	errorHandler
.1b78					HasLineNumber:
.1b78	a0 03		ldy #$03			ldy 	#3 							; get line number
.1b7a	a9 00		lda #$00			lda 	#0
.1b7c	a2 06		ldx #$06		ldx	#6
.1b7e	20 4c 32	jsr $324c		jsr	mainHandler
.1b81	a5 60		lda $60				lda 	esInt2		 				; check in range (only 2 bytes)
.1b83	05 68		ora $68				ora 	esInt3
.1b85	d0 ec		bne $1b73			bne 	WSEError
.1b87	98		tya				tya 								; make codePtr point to code after the line number.
.1b88	18		clc				clc 								; by skipping over the tokenised number.
.1b89	65 28		adc $28				adc 	codePtr
.1b8b	85 28		sta $28				sta 	codePtr
.1b8d	90 02		bcc $1b91			bcc		_HLNNoCarry
.1b8f	e6 29		inc $29				inc 	codePtr+1
.1b91					_HLNNoCarry:
.1b91	98		tya				tya 								; subtract that offset from the code buffer index
.1b92	38		sec				sec
.1b93	49 ff		eor #$ff			eor 	#$FF
.1b95	6d 28 0d	adc $0d28			adc 	tokenBufferIndex
.1b98	18		clc				clc 								; add space allowing for header & $80 trailer
.1b99	69 04		adc #$04			adc 	#4
.1b9b	8d 28 0d	sta $0d28			sta 	tokenBufferIndex 			; this is the number of bytes occupied.
.1b9e	20 6f 1a	jsr $1a6f			jsr 	DeleteLine 					; always delete the line, it's deleted and reinserted.
.1ba1					_HLNNoDelete:
.1ba1	ad 28 0d	lda $0d28			lda 	tokenBufferIndex 			; if line was empty, then don't insert
.1ba4	c9 01		cmp #$01			cmp 	#1 							; (the one character is the EOL marker)
.1ba6	f0 0c		beq $1bb4			beq 	_HLMEditDone
.1ba8	a5 36		lda $36				lda 	lowMemory+1 				; is there space, if we allow a little bit of
.1baa	18		clc				clc 								; workspace (1k)
.1bab	69 04		adc #$04			adc 	#4 							; e.g. 4 x 256
.1bad	c5 34		cmp $34				cmp 	highMemory+1
.1baf	b0 0b		bcs $1bbc			bcs 	_HLMMemory 					; nope, won't allowit.
.1bb1	20 c2 1a	jsr $1ac2			jsr 	InsertLine 					; insert the line in
.1bb4					_HLMEditDone:
.1bb4	a2 02		ldx #$02		ldx	#2
.1bb6	20 4c 32	jsr $324c		jsr	mainHandler
.1bb9	4c 29 1b	jmp $1b29			jmp 	WarmStartEntry
.1bbc					_HLMMemory:
.1bbc	a2 22		ldx #$22			ldx 	#ErrorID_Memory
.1bbe	20 e0 14	jsr $14e0		jsr	errorHandler

;******  Return to file: interaction/interaction.asm

.1bc1					interactionHandler:
.1bc1	7c c4 1b	jmp ($1bc4,x)			jmp 	(interactionVectors,x)
.1bc4					interactionVectors:
>1bc4	e6 19					.word ColdStartEntry       ; index 0
>1bc6	29 1b					.word WarmStartEntry       ; index 2

;******  Return to file: basic.asm

.1bc8					section_end_interaction:
.1bc8					section_start_main:

;******  Processing file: main/main.asm


;******  Processing file: main/commands/compat/readdata.asm

.0beb					dataPtr:
>0beb							.fill 	2
.0bed					dataIndex:
>0bed							.fill 	1
.1bc8					CommandRead:
.1bc8	a2 00		ldx #$00			ldx 	#0 							; get a reference to a variable in stack:0
.1bca	20 ff 2a	jsr $2aff			jsr 	EvaluateReference
.1bcd	20 0e 1c	jsr $1c0e			jsr 	SwapDPCP 					; use the data pointer.
.1bd0	b1 28		lda ($28),y			lda 	(codePtr),y 				; see where it is.
.1bd2	c8		iny				iny
.1bd3	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; if it is on a comma, it is in data.
.1bd5	f0 07		beq $1bde			beq 	_CRInData
.1bd7	88		dey				dey
.1bd8	a9 dc		lda #$dc			lda 	#TKW_DATA 					; scan forward to a DATA statement.
.1bda	aa		tax				tax
.1bdb	20 0f 23	jsr $230f			jsr 	ScanForward
.1bde					_CRInData:
.1bde	a2 01		ldx #$01			ldx 	#1 							; evaluate a value at Stack,1
.1be0	20 ad 2a	jsr $2aad			jsr 	Evaluate
.1be3	ca		dex				dex 								; and write the value.
.1be4	20 62 1e	jsr $1e62			jsr 	WriteValue
.1be7	20 0e 1c	jsr $1c0e			jsr 	SwapDPCP 					; get the code pointer back.
.1bea	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows ?
.1bec	c8		iny				iny
.1bed	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; if comma, another variable
.1bef	f0 d7		beq $1bc8			beq 	CommandRead
.1bf1	88		dey				dey
.1bf2	60		rts				rts
.1bf3					CommandData:
.1bf3	a9 80		lda #$80			lda 	#TOK_EOL 					; go forward to end of line or colon.
.1bf5	a2 ca		ldx #$ca			ldx 	#TKW_COLON
.1bf7	20 0f 23	jsr $230f			jsr 	ScanForward
.1bfa	88		dey				dey 								; ending on EOL is a scan issue, as it increments
.1bfb	60		rts				rts
.1bfc					CommandRestore:
.1bfc	ad c8 0a	lda $0ac8			lda 	basePage
.1bff	8d eb 0b	sta $0beb			sta 	dataPtr
.1c02	ad c9 0a	lda $0ac9			lda 	basePage+1
.1c05	8d ec 0b	sta $0bec			sta 	dataPtr+1
.1c08	a9 03		lda #$03			lda 	#3
.1c0a	8d ed 0b	sta $0bed			sta 	dataIndex
.1c0d	60		rts				rts
.1c0e					SwapDPCP:
.1c0e	8a		txa				txa
.1c0f	48		pha				pha
.1c10	98		tya				tya 								; swap Y, DataIndex
.1c11	ac ed 0b	ldy $0bed			ldy 	DataIndex
.1c14	8d ed 0b	sta $0bed			sta 	DataIndex
.1c17	a5 28		lda $28				lda 	codePtr 					; swap code/dataptr low
.1c19	ae eb 0b	ldx $0beb			ldx 	dataptr
.1c1c	8d eb 0b	sta $0beb			sta 	dataPtr
.1c1f	86 28		stx $28				stx 	codePtr
.1c21	a5 29		lda $29				lda 	codePtr+1 					; swap code/dataptr high.
.1c23	ae ec 0b	ldx $0bec			ldx 	dataptr+1
.1c26	8d ec 0b	sta $0bec			sta 	dataPtr+1
.1c29	86 29		stx $29				stx 	codePtr+1
.1c2b	68		pla				pla
.1c2c	aa		tax				tax
.1c2d	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/compat/transfer.asm

.1c2e					CommandGOSUB:
.1c2e	20 ca 2a	jsr $2aca			jsr 	EvaluateRootInteger			; get GOSUB line on stack top.
.1c31	a2 04		ldx #$04			ldx 	#4 							; allocate 4 bytes on stack for GOSUB
.1c33	a9 47		lda #$47			lda 	#markerGOSUB  				; <marker> <return addr/offset>
.1c35	20 f9 31	jsr $31f9			jsr 	RSClaim
.1c38	a9 01		lda #$01			lda 	#1 							; save position at offset 1.
.1c3a	20 25 32	jsr $3225			jsr 	RSSavePosition
.1c3d	a2 00		ldx #$00			ldx 	#0 							; point back at GOSUB line
.1c3f	f0 1b		beq $1c5c			beq 	GotoTOS 					; and do a GOTO there.
.1c41					CommandRETURN:
.1c41	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.1c43	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.1c45	c9 47		cmp #$47			cmp 	#markerGOSUB 						; does it match
.1c47	f0 05		beq $1c4e			beq 	_isok
.1c49	a2 0e		ldx #$0e			ldx 	#ErrorID_returnErr
.1c4b	20 e0 14	jsr $14e0		jsr	errorHandler
.1c4e					_isok:
.1c4e	a9 01		lda #$01			lda 	#1
.1c50	20 38 32	jsr $3238			jsr 	RSLoadPosition 				; reload the position from offset 1.
.1c53	a9 04		lda #$04			lda 	#4 							; throw 4 bytes from stack.
.1c55	20 1b 32	jsr $321b			jsr 	RSFree
.1c58	60		rts				rts
.1c59					CommandGOTO:
.1c59	20 ca 2a	jsr $2aca			jsr 	EvaluateRootInteger 		; get GOTO line on stack top.
.1c5c					GotoTOS:
.1c5c	20 f3 25	jsr $25f3			jsr 	ResetCodeAddress 			; simple search.
.1c5f					_GotoSearch:
.1c5f	a0 00		ldy #$00			ldy 	#0 							; get offset
.1c61	b1 28		lda ($28),y			lda 	(codePtr),y
.1c63	f0 21		beq $1c86			beq 	_GotoError 					; not found.
.1c65	c8		iny				iny									; check LSB match
.1c66	b1 28		lda ($28),y			lda 	(codePtr),y
.1c68	d5 50		cmp $50,x			cmp 	esInt0,x
.1c6a	d0 07		bne $1c73			bne 	_GotoNext
.1c6c	c8		iny				iny
.1c6d	b1 28		lda ($28),y			lda 	(codePtr),y
.1c6f	d5 58		cmp $58,x			cmp 	esInt1,x
.1c71	f0 10		beq $1c83			beq 	_GotoFound
.1c73					_GotoNext:
.1c73	a0 00		ldy #$00			ldy 	#0 							; go next line
.1c75	b1 28		lda ($28),y			lda 	(codePtr),y
.1c77	18		clc				clc
.1c78	65 28		adc $28				adc 	codePtr
.1c7a	85 28		sta $28				sta 	codePtr
.1c7c	90 e1		bcc $1c5f			bcc 	_GotoSearch
.1c7e	e6 29		inc $29				inc 	codePtr+1
.1c80	4c 5f 1c	jmp $1c5f			jmp 	_GotoSearch
.1c83					_GotoFound:
.1c83	a0 03		ldy #$03			ldy 	#3 							; continue from that line
.1c85	60		rts				rts
.1c86					_GotoError:
.1c86	a2 0c		ldx #$0c			ldx 	#ErrorID_LineNumber
.1c88	20 e0 14	jsr $14e0		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/commands/io/input.asm

=32					MaxInputSize = 32
.0bee					InputBuffer:
>0bee							.fill 	MaxInputSize+1
.1c8b					Command_Input:
.1c8b	b1 28		lda ($28),y			lda 	(codePtr),y 			; see what's next.
.1c8d	c8		iny				iny
.1c8e	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 				; ignore commas.
.1c90	f0 f9		beq $1c8b			beq 	Command_Input
.1c92	88		dey				dey 							; undo consume
.1c93	c9 ca		cmp #$ca			cmp 	#TKW_COLON
.1c95	f0 54		beq $1ceb			beq 	_CIExit 				; : or EOL, exit
.1c97	c9 80		cmp #$80			cmp 	#TOK_EOL
.1c99	f0 50		beq $1ceb			beq 	_CIExit
.1c9b	c9 40		cmp #$40			cmp 	#$40 					; variable ?
.1c9d	90 12		bcc $1cb1			bcc 	_CIVariable
.1c9f	c9 85		cmp #$85			cmp 	#TOK_STR 				; if not quoted string syntax error.
.1ca1	d0 43		bne $1ce6			bne 	_CISyntax
.1ca3	a2 00		ldx #$00			ldx 	#0
.1ca5	20 c1 2a	jsr $2ac1			jsr 	EvaluateString 			; evaluate and print string
.1ca8	20 c4 1e	jsr $1ec4			jsr 	TOSToTemp0
.1cab	20 ba 1d	jsr $1dba			jsr 	PrintString
.1cae	4c 8b 1c	jmp $1c8b			jmp 	Command_Input
.1cb1					_CIVariable:
.1cb1	a2 00		ldx #$00			ldx 	#0 						; evaluate a reference.
.1cb3	20 ff 2a	jsr $2aff			jsr 	EvaluateReference  		; this is where its going
.1cb6					_CIRetry:
.1cb6	a9 3f		lda #$3f			lda 	#"?"					; print prompt
.1cb8	a2 14		ldx #$14		ldx	#20
.1cba	20 bf 14	jsr $14bf		jsr	deviceHandler
.1cbd	98		tya				tya
.1cbe	48		pha				pha
.1cbf	20 ff 1c	jsr $1cff			jsr 	InputString 			; input a string (manually)
.1cc2	a2 01		ldx #$01			ldx 	#1
.1cc4	20 ec 1c	jsr $1cec			jsr 	BufferToStackX 			; make stack,x ref input string.
.1cc7	a5 48		lda $48				lda 	esType 					; if target type numeric
.1cc9	29 40		and #$40			and 	#$40 					; then convert to number
.1ccb	d0 11		bne $1cde			bne 	_CIWrite
.1ccd	a2 01		ldx #$01			ldx 	#1
.1ccf	20 c4 1e	jsr $1ec4			jsr 	TOSToTemp0 				; string address in temp0, goes here.
.1cd2	a9 0a		lda #$0a			lda 	#10
.1cd4	20 cc 2f	jsr $2fcc			jsr 	MInt32FromString 		; convert it back from a string.
.1cd7	68		pla				pla
.1cd8	a8		tay				tay
.1cd9	b0 03		bcs $1cde			bcs 	_CIWrite 				; successfully converted.
.1cdb	18		clc				clc 							; default fail FP conversion
.1cdc	90 d8		bcc $1cb6			bcc		_CIRetry				; failed, try again.
.1cde					_CIWrite:
.1cde	a2 00		ldx #$00			ldx 	#0
.1ce0	20 62 1e	jsr $1e62			jsr 	WriteValue
.1ce3	4c 8b 1c	jmp $1c8b			jmp 	Command_Input
.1ce6					_CISyntax:
.1ce6	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.1ce8	20 e0 14	jsr $14e0		jsr	errorHandler
.1ceb					_CIExit:
.1ceb	60		rts				rts
.1cec					BufferToStackX:
.1cec	a9 ee		lda #$ee			lda 	#InputBuffer & $FF
.1cee	95 50		sta $50,x			sta 	esInt0,x
.1cf0	a9 0b		lda #$0b			lda 	#InputBuffer >> 8
.1cf2	95 58		sta $58,x			sta 	esInt1,x
.1cf4	a9 00		lda #$00			lda 	#0
.1cf6	95 60		sta $60,x			sta 	esInt2,x
.1cf8	95 68		sta $68,x			sta 	esInt3,x
.1cfa	a9 40		lda #$40			lda 	#$40
.1cfc	95 48		sta $48,x			sta 	esType,x
.1cfe	60		rts				rts
.1cff					InputString:
.1cff	a9 00		lda #$00			lda 	#0
.1d01	8d ee 0b	sta $0bee			sta 	InputBuffer
.1d04					_InputLoop:
.1d04	a2 00		ldx #$00		ldx	#0
.1d06	20 bf 14	jsr $14bf		jsr	deviceHandler
.1d09	a2 0a		ldx #$0a		ldx	#10
.1d0b	20 bf 14	jsr $14bf		jsr	deviceHandler
.1d0e	c9 00		cmp #$00			cmp 	#0
.1d10	f0 f2		beq $1d04			beq 	_InputLoop
.1d12	c9 08		cmp #$08			cmp 	#8
.1d14	f0 19		beq $1d2f			beq 	_InputBackspace
.1d16	c9 0d		cmp #$0d			cmp 	#13
.1d18	f0 21		beq $1d3b			beq 	_InputExit
.1d1a	ae ee 0b	ldx $0bee			ldx 	InputBuffer
.1d1d	e0 20		cpx #$20			cpx 	#MaxInputSize 			; too many characters
.1d1f	f0 e3		beq $1d04			beq 	_InputLoop
.1d21	9d ef 0b	sta $0bef,x			sta 	InputBuffer+1,x 		; write char
.1d24	ee ee 0b	inc $0bee			inc 	InputBuffer 			; advance count.
.1d27					_InputPrintLoop:
.1d27	a2 14		ldx #$14		ldx	#20
.1d29	20 bf 14	jsr $14bf		jsr	deviceHandler
.1d2c	4c 04 1d	jmp $1d04			jmp	 	_InputLoop
.1d2f					_InputBackspace:
.1d2f	ad ee 0b	lda $0bee			lda 	InputBuffer 			; at start
.1d32	f0 d0		beq $1d04			beq 	_InputLoop
.1d34	ce ee 0b	dec $0bee			dec 	InputBuffer
.1d37	a9 08		lda #$08			lda 	#8
.1d39	d0 ec		bne $1d27			bne 	_InputPrintLoop
.1d3b					_InputExit:
.1d3b	a2 04		ldx #$04		ldx	#4
.1d3d	20 bf 14	jsr $14bf		jsr	deviceHandler
.1d40	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/io/print.asm

.0c0f					lastPrintToken:
>0c0f							.fill 	1
.1d41					Command_Print:
.1d41	a9 00		lda #$00			lda 	#0 							; clear LPT to a non token
.1d43	8d 0f 0c	sta $0c0f			sta 	lastPrintToken
.1d46	88		dey				dey
.1d47					_PrintLoopSkip:
.1d47	c8		iny				iny
.1d48					_PrintLoop:
.1d48	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows
.1d4a	c9 80		cmp #$80			cmp 	#TOK_EOL  					; done if end of line or colon
.1d4c	f0 5b		beq $1da9			beq 	_PrintExit
.1d4e	c9 ca		cmp #$ca			cmp 	#TKW_COLON
.1d50	f0 57		beq $1da9			beq 	_PrintExit
.1d52	8d 0f 0c	sta $0c0f			sta 	lastPrintToken 				; update Last print token, so we check ; and ,
.1d55	c9 cc		cmp #$cc			cmp 	#TKW_SEMICOLON 				; ignore semicolon
.1d57	f0 ee		beq $1d47			beq 	_PrintLoopSkip
.1d59	c9 cd		cmp #$cd			cmp 	#TKW_QUOTE 					; ' is new line
.1d5b	f0 3c		beq $1d99			beq	 	_PrintNewLine
.1d5d	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; , is print tab
.1d5f	f0 40		beq $1da1			beq 	_PrintTab
.1d61	20 ab 2a	jsr $2aab			jsr 	EvaluateRoot 				; evaluate something at the root
.1d64	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.1d66	85 2a		sta $2a				sta 	temp0
.1d68	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.1d6a	85 2b		sta $2b				sta 	1+(temp0)
.1d6c	a5 48		lda $48				lda 	esType 						; get type
.1d6e	f0 15		beq $1d85			beq		_PrintInteger
.1d70	4a		lsr a				lsr 	a 							; check for floating point
.1d71	b0 08		bcs $1d7b			bcs 	_PrintFloat
.1d73					_PrintString:
.1d73	a2 00		ldx #$00			ldx 	#0 							; bottom string to temp0
.1d75	20 c4 1e	jsr $1ec4			jsr 	TOSToTemp0
.1d78	4c 93 1d	jmp $1d93			jmp 	_PrintTemp0 				; print no leading space.
.1d7b					_PrintFloat:
.1d7b	a9 00		lda #$00			lda 	#0 							; stack level.
.1d7d	a2 14		ldx #$14		ldx	#20
.1d7f	20 e1 19	jsr $19e1		jsr	floatingpointHandler
.1d82	4c 8c 1d	jmp $1d8c			jmp 	_PrintSpaceTemp0
.1d85					_PrintInteger:
.1d85	a9 8a		lda #$8a			lda 	#10+$80 					; base 10 signed
.1d87	a2 00		ldx #$00			ldx 	#0 							; bottom stack element
.1d89	20 b4 30	jsr $30b4			jsr 	MInt32ToString				; convert to text
.1d8c					_PrintSpaceTemp0:
.1d8c	a9 20		lda #$20			lda 	#32
.1d8e	a2 14		ldx #$14		ldx	#20
.1d90	20 bf 14	jsr $14bf		jsr	deviceHandler
.1d93					_PrintTemp0:
.1d93	20 ba 1d	jsr $1dba			jsr 	PrintString
.1d96	4c 48 1d	jmp $1d48			jmp 	_PrintLoop
.1d99					_PrintNewLine:
.1d99	a2 04		ldx #$04		ldx	#4
.1d9b	20 bf 14	jsr $14bf		jsr	deviceHandler
.1d9e	4c 47 1d	jmp $1d47			jmp 	_PrintLoopSkip
.1da1					_PrintTab:
.1da1	a2 1a		ldx #$1a		ldx	#26
.1da3	20 bf 14	jsr $14bf		jsr	deviceHandler
.1da6	4c 47 1d	jmp $1d47			jmp 	_PrintLoopSkip
.1da9					_PrintExit:
.1da9	ad 0f 0c	lda $0c0f			lda		lastPrintToken 				; check last token
.1dac	c9 cc		cmp #$cc			cmp 	#TKW_SEMICOLON 				; if , or ; do not print NL
.1dae	f0 09		beq $1db9			beq 	_PrintExit2
.1db0	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.1db2	f0 05		beq $1db9			beq 	_PrintExit2
.1db4	a2 04		ldx #$04		ldx	#4
.1db6	20 bf 14	jsr $14bf		jsr	deviceHandler
.1db9					_PrintExit2:
.1db9	60		rts				rts
.1dba					PrintString:
.1dba	8a		txa				txa
.1dbb	48		pha				pha
.1dbc	98		tya				tya
.1dbd	48		pha				pha
.1dbe	a0 00		ldy #$00			ldy 	#0							; get length
.1dc0	b1 2a		lda ($2a),y			lda 	(temp0),y
.1dc2	aa		tax				tax 								; into X
.1dc3	e0 00		cpx #$00	_PSLoop:cpx 	#0 							; finished ?
.1dc5	f0 10		beq $1dd7			beq 	_PSExit
.1dc7	ca		dex				dex
.1dc8	8a		txa				txa
.1dc9	48		pha				pha
.1dca	c8		iny				iny
.1dcb	b1 2a		lda ($2a),y			lda 	(temp0),y
.1dcd	a2 14		ldx #$14		ldx	#20
.1dcf	20 bf 14	jsr $14bf		jsr	deviceHandler
.1dd2	68		pla				pla
.1dd3	aa		tax				tax
.1dd4	4c c3 1d	jmp $1dc3			jmp 	_PSLoop
.1dd7					_PSExit:
.1dd7	68		pla				pla
.1dd8	a8		tay				tay
.1dd9	68		pla				pla
.1dda	aa		tax				tax
.1ddb	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/io/text.asm

.1ddc					Command_CLS:
.1ddc	a2 02		ldx #$02		ldx	#2
.1dde	20 bf 14	jsr $14bf		jsr	deviceHandler
.1de1	60		rts				rts
.1de2					Command_Ink:
.1de2	a2 00		ldx #$00			ldx 	#0
.1de4	20 d4 2a	jsr $2ad4			jsr 	EvaluateSmallInteger
.1de7	a2 08		ldx #$08		ldx	#8
.1de9	20 bf 14	jsr $14bf		jsr	deviceHandler
.1dec	60		rts				rts
.1ded					Command_Paper:
.1ded	a2 00		ldx #$00			ldx 	#0
.1def	20 d4 2a	jsr $2ad4			jsr 	EvaluateSmallInteger
.1df2	a2 12		ldx #$12		ldx	#18
.1df4	20 bf 14	jsr $14bf		jsr	deviceHandler
.1df7	60		rts				rts
.1df8					Command_Locate:
.1df8	a2 00		ldx #$00			ldx 	#0
.1dfa	20 d4 2a	jsr $2ad4			jsr 	EvaluateSmallInteger
.1dfd	20 de 31	jsr $31de			jsr 	CheckComma
.1e00	e8		inx				inx
.1e01	20 d4 2a	jsr $2ad4			jsr 	EvaluateSmallInteger
.1e04	98		tya				tya
.1e05	48		pha				pha
.1e06	a4 51		ldy $51				ldy 	esInt0+1
.1e08	a5 50		lda $50				lda 	esInt0
.1e0a	a2 10		ldx #$10		ldx	#16
.1e0c	20 bf 14	jsr $14bf		jsr	deviceHandler
.1e0f	68		pla				pla
.1e10	a8		tay				tay
.1e11	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/io/vdu.asm

.1e12					Command_VDU:
.1e12	20 ca 2a	jsr $2aca			jsr 	EvaluateRootInteger 			; get integer at root.
.1e15	a5 50		lda $50				lda 	esInt0
.1e17	a2 14		ldx #$14		ldx	#20
.1e19	20 bf 14	jsr $14bf		jsr	deviceHandler
.1e1c					_CVNext:
.1e1c	b1 28		lda ($28),y			lda 	(codePtr),y 					; what follows ?
.1e1e	c8		iny				iny
.1e1f	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 						; comma, do again
.1e21	f0 ef		beq $1e12			beq 	Command_VDU
.1e23	c9 cc		cmp #$cc			cmp 	#TKW_SEMICOLON 					; semicolon, print MSB
.1e25	d0 0a		bne $1e31			bne 	_CVExit
.1e27	a5 58		lda $58				lda 	esInt1
.1e29	a2 14		ldx #$14		ldx	#20
.1e2b	20 bf 14	jsr $14bf		jsr	deviceHandler
.1e2e	4c 1c 1e	jmp $1e1c			jmp 	_CVNext
.1e31	88		dey		_CVExit:dey
.1e32	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/link.asm


;******  Return to file: main/main.asm


;******  Processing file: main/commands/misc/assert.asm

.1e33					Command_Assert:
.1e33	20 ca 2a	jsr $2aca			jsr 	EvaluateRootInteger 		; what is being asserted.
.1e36	20 85 31	jsr $3185			jsr 	MInt32Zero 					; is it true ?
.1e39	f0 01		beq $1e3c			beq 	_CAError
.1e3b	60		rts				rts
.1e3c					_CAError:
.1e3c	a2 04		ldx #$04			ldx 	#ErrorID_Assert
.1e3e	20 e0 14	jsr $14e0		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/commands/misc/dim.asm

.1e41					Command_Dim:
.1e41	a2 02		ldx #$02		ldx	#2
.1e43	20 d3 40	jsr $40d3		jsr	variableHandler
.1e46	b1 28		lda ($28),y			lda 	(codePtr),y 				; see what follows.
.1e48	c8		iny				iny
.1e49	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; comma follows, go back and do next
.1e4b	f0 f4		beq $1e41			beq 	Command_Dim
.1e4d	88		dey				dey 								; unpick get
.1e4e	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/misc/let.asm

.1e4f					CommandLet:
.1e4f	a2 00		ldx #$00			ldx 	#0  						; get address to write.
.1e51	20 ff 2a	jsr $2aff			jsr 	EvaluateReference
.1e54	a9 8d		lda #$8d			lda 	#TKW_EQUAL 					; check for equals
.1e56	20 c6 31	jsr $31c6			jsr 	CheckToken
.1e59	e8		inx				inx 								; do RHS
.1e5a	20 ad 2a	jsr $2aad			jsr 	Evaluate 					; evaluate and dereference
.1e5d	ca		dex				dex
.1e5e	20 62 1e	jsr $1e62			jsr 	WriteValue 					; write it out
.1e61	60		rts				rts
.1e62					WriteValue:
.1e62	98		tya				tya
.1e63	48		pha				pha
.1e64	20 c4 1e	jsr $1ec4			jsr 	TOSToTemp0 					; set temp0 to point to target address.
.1e67	b5 48		lda $48,x			lda 	esType,x 					; check the string flags match
.1e69	55 49		eor $49,x			eor 	esType+1,x 					; one string, one number causes an error.
.1e6b	29 40		and #$40			and 	#$40
.1e6d	d0 50		bne $1ebf			bne		_WVType
.1e6f	a0 01		ldy #$01			ldy 	#1 							; for string, copy 0 and 1.
.1e71	b5 48		lda $48,x			lda 	esType,x 					; check for string assignment
.1e73	29 40		and #$40			and 	#$40
.1e75	d0 1f		bne $1e96			bne 	_WVCopyString
.1e77	b5 48		lda $48,x			lda 	esType,x 					; check both are integer.
.1e79	15 49		ora $49,x			ora 	esType+1,x
.1e7b	4a		lsr a				lsr 	a
.1e7c	90 22		bcc $1ea0			bcc 	_WVCopyData4 				; copy 4 data bytes.
.1e7e	b5 48		lda $48,x			lda 	esType,x
.1e80	4a		lsr a				lsr 	a
.1e81	90 3c		bcc $1ebf			bcc 	_WVType
.1e83	e8		inx				inx 								; force the value being written to be a float.
.1e84	20 0f 27	jsr $270f			jsr 	BPMakeFloat
.1e87	ca		dex				dex
.1e88	20 c4 1e	jsr $1ec4			jsr 	TOSToTemp0 					; set Temp0 to write address
.1e8b	e8		inx				inx
.1e8c	8a		txa				txa
.1e8d	a2 20		ldx #$20		ldx	#32
.1e8f	20 e1 19	jsr $19e1		jsr	floatingpointHandler
.1e92	aa		tax				tax
.1e93	4c bc 1e	jmp $1ebc			jmp 	_WVCopyExit
.1e96					_WVCopyString:
.1e96	8a		txa				txa
.1e97	a2 0e		ldx #$0e		ldx	#14
.1e99	20 02 35	jsr $3502		jsr	stringHandler
.1e9c	aa		tax				tax
.1e9d	4c bc 1e	jmp $1ebc			jmp 	_WVCopyExit
.1ea0					_WVCopyData4:
.1ea0	b5 48		lda $48,x			lda 	esType,x 					; is the int ref a byte ref ?
.1ea2	29 20		and #$20			and 	#$20 						; (e.g. is bit 5 set)
.1ea4	d0 10		bne $1eb6			bne 	_WVCopyData1
.1ea6	a0 03		ldy #$03			ldy 	#3
.1ea8	b5 69		lda $69,x			lda 	esInt3+1,x
.1eaa	91 2a		sta ($2a),y			sta 	(temp0),y
.1eac	88		dey				dey
.1ead	b5 61		lda $61,x			lda 	esInt2+1,x
.1eaf	91 2a		sta ($2a),y			sta 	(temp0),y
.1eb1	88		dey				dey
.1eb2	b5 59		lda $59,x			lda 	esInt1+1,x
.1eb4	91 2a		sta ($2a),y			sta 	(temp0),y
.1eb6					_WVCopyData1:
.1eb6	a0 00		ldy #$00			ldy 	#0
.1eb8	b5 51		lda $51,x			lda 	esInt0+1,x
.1eba	91 2a		sta ($2a),y			sta 	(temp0),y
.1ebc					_WVCopyExit:
.1ebc	68		pla				pla
.1ebd	a8		tay				tay
.1ebe	60		rts				rts
.1ebf					_WVType:
.1ebf	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.1ec1	20 e0 14	jsr $14e0		jsr	errorHandler
.1ec4					TOSToTemp0:
.1ec4	b5 50		lda $50,x			lda 	esInt0,x
.1ec6	85 2a		sta $2a				sta 	temp0
.1ec8	b5 58		lda $58,x			lda 	esInt1,x
.1eca	85 2b		sta $2b				sta 	temp0+1
.1ecc	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/misc/poke.asm

.1ecd					Command_Poke:
.1ecd	a9 01		lda #$01			lda 	#1
.1ecf	d0 06		bne $1ed7			bne 	PokeGeneral
.1ed1					Command_Doke:
.1ed1	a9 02		lda #$02			lda 	#2
.1ed3	d0 02		bne $1ed7			bne 	PokeGeneral
.1ed5					Command_Loke:
.1ed5	a9 03		lda #$03			lda 	#3
.1ed7					PokeGeneral:
.1ed7	48		pha				pha 								; save id (PDL = 123)
.1ed8	20 ca 2a	jsr $2aca			jsr 	EvaluateRootInteger 		; target address
.1edb	20 de 31	jsr $31de			jsr	 	CheckComma
.1ede	e8		inx				inx
.1edf	20 cc 2a	jsr $2acc			jsr 	EvaluateInteger 			; what value to POKE ?
.1ee2	ca		dex				dex
.1ee3	20 c4 1e	jsr $1ec4			jsr 	TOSToTemp0 					; temp0 points to the target address
.1ee6	84 32		sty $32				sty 	tempShort 					; save Y
.1ee8	68		pla				pla 								; get copy type (1-3) and dispatch
.1ee9	aa		tax				tax
.1eea	ca		dex				dex
.1eeb	f0 14		beq $1f01			beq 	_Poke1
.1eed	ca		dex				dex
.1eee	f0 0b		beq $1efb			beq 	_Poke2
.1ef0	a0 03		ldy #$03			ldy 	#3							; put 4 bytes
.1ef2	a5 69		lda $69				lda 	esInt3+1
.1ef4	91 2a		sta ($2a),y			sta 	(temp0),y
.1ef6	88		dey				dey
.1ef7	a5 61		lda $61				lda 	esInt2+1
.1ef9	91 2a		sta ($2a),y			sta 	(temp0),y
.1efb					_Poke2:
.1efb	a0 01		ldy #$01			ldy 	#1
.1efd	a5 59		lda $59				lda 	esInt1+1
.1eff	91 2a		sta ($2a),y			sta 	(temp0),y
.1f01					_Poke1:
.1f01	a0 00		ldy #$00			ldy 	#0
.1f03	a5 51		lda $51				lda 	esInt0+1
.1f05	91 2a		sta ($2a),y			sta 	(temp0),y
.1f07	a4 32		ldy $32				ldy 	tempShort 					; restore Y and exit
.1f09	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/misc/rem.asm

.1f0a					Command_Rem:
.1f0a					Command_Rem2:
.1f0a	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows
.1f0c	c9 85		cmp #$85			cmp 	#TOK_STR 					; if it is a string then skip it.
.1f0e	d0 06		bne $1f16			bne 	_CRNotString
.1f10	c8		iny				iny
.1f11	98		tya				tya
.1f12	38		sec				sec
.1f13	71 28		adc ($28),y			adc 	(codePtr),y 				; get string size, add to Y, +1 for the length
.1f15	a8		tay				tay
.1f16					_CRNotString:
.1f16	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/misc/stopend.asm

.1f17					CommandStop:
.1f17	a2 06		ldx #$06			ldx 	#ErrorID_Stop
.1f19	20 e0 14	jsr $14e0		jsr	errorHandler
.1f1c					CommandEnd:
.1f1c	4c 47 32	jmp $3247			jmp 	WarmStart
.1f1f					CommandXemu:
.1f1f	4c ff ff	jmp $ffff			jmp 	$FFFF 						; fudge to crash out of emulator
.1f22					AdvanceNextLine:
.1f22	a0 00		ldy #$00			ldy 	#0 							; get offset
.1f24	b1 28		lda ($28),y			lda 	(codePtr),y
.1f26	18		clc				clc 								; add to codePtr
.1f27	65 28		adc $28				adc 	codePtr
.1f29	85 28		sta $28				sta 	codePtr
.1f2b	90 02		bcc $1f2f			bcc 	_ANLNoCarry
.1f2d	e6 29		inc $29				inc 	codePtr+1
.1f2f					_ANLNoCarry:
.1f2f	b1 28		lda ($28),y			lda 	(codePtr),y 				; if end of program (or was just stand alone.
.1f31	f0 e9		beq $1f1c			beq 	CommandEnd 					; execute END
.1f33	a0 03		ldy #$03			ldy 	#3 							; start of tokens on line.
.1f35	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/for.asm

.1f36					Command_FOR:
.1f36	a9 46		lda #$46			lda 	#markerFOR 					; allocate the space and set the marker
.1f38	a2 0b		ldx #$0b			ldx 	#11
.1f3a	20 f9 31	jsr $31f9			jsr 	RSClaim
.1f3d	20 4f 1e	jsr $1e4f			jsr 	CommandLET 					; do the same as LET FOR [a = 4]
.1f40	a5 48		lda $48				lda 	esType 						; check type should be integer reference.
.1f42	c9 80		cmp #$80			cmp 	#$80 						; we do not do FOR floats.
.1f44	d0 4c		bne $1f92			bne 	_CFType
.1f46	a9 ce		lda #$ce			lda 	#TKW_TO 					; check TO present.
.1f48	20 c6 31	jsr $31c6			jsr 	CheckToken
.1f4b	a2 01		ldx #$01			ldx 	#1 							; keep the variable address in stack 0
.1f4d	20 cc 2a	jsr $2acc			jsr 	EvaluateInteger				; get terminal value in stack 1
.1f50	98		tya				tya
.1f51	48		pha				pha
.1f52	a0 04		ldy #$04			ldy 	#4
.1f54	a5 50		lda $50				lda		esInt0 						; copy the address of the index variable into 4 and 5
.1f56	91 37		sta ($37),y			sta 	(rsPointer),y
.1f58	c8		iny				iny
.1f59	a5 58		lda $58				lda		esInt1
.1f5b	91 37		sta ($37),y			sta 	(rsPointer),y
.1f5d	c8		iny				iny
.1f5e	a9 01		lda #$01			lda 	#1  						; the default step in 6, (-128 .. 127 only)
.1f60	91 37		sta ($37),y			sta 	(rsPointer),y
.1f62	c8		iny				iny
.1f63	a5 51		lda $51				lda		esInt0+1 					; terminal value in 7 to 11.
.1f65	91 37		sta ($37),y			sta 	(rsPointer),y
.1f67	c8		iny				iny
.1f68	a5 59		lda $59				lda		esInt1+1
.1f6a	91 37		sta ($37),y			sta 	(rsPointer),y
.1f6c	c8		iny				iny
.1f6d	a5 61		lda $61				lda		esInt2+1
.1f6f	91 37		sta ($37),y			sta 	(rsPointer),y
.1f71	c8		iny				iny
.1f72	a5 69		lda $69				lda		esInt3+1
.1f74	91 37		sta ($37),y			sta 	(rsPointer),y
.1f76	68		pla				pla
.1f77	a8		tay				tay
.1f78	b1 28		lda ($28),y			lda 	(codePtr),y 				; followed by STEP.
.1f7a	c9 cf		cmp #$cf			cmp 	#TKW_STEP
.1f7c	d0 0e		bne $1f8c			bne 	_CFDone
.1f7e	c8		iny				iny									; skip over step.
.1f7f	20 cc 2a	jsr $2acc			jsr 	EvaluateInteger 			; get step
.1f82	98		tya				tya
.1f83	48		pha				pha
.1f84	b5 50		lda $50,x			lda 	esInt0,x 					; copy it into step (bit lazy here)
.1f86	a0 06		ldy #$06			ldy 	#6
.1f88	91 37		sta ($37),y			sta 	(rsPointer),y
.1f8a	68		pla				pla
.1f8b	a8		tay				tay
.1f8c					_CFDone:
.1f8c	a9 01		lda #$01			lda 	#1
.1f8e	20 25 32	jsr $3225			jsr 	RSSavePosition 				; save position.
.1f91	60		rts				rts
.1f92					_CFType:
.1f92	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.1f94	20 e0 14	jsr $14e0		jsr	errorHandler
.1f97					Command_NEXT:
.1f97	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.1f99	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.1f9b	c9 46		cmp #$46			cmp 	#markerFOR 						; does it match
.1f9d	f0 05		beq $1fa4			beq 	_isok
.1f9f	a2 10		ldx #$10			ldx 	#ErrorID_nextErr
.1fa1	20 e0 14	jsr $14e0		jsr	errorHandler
.1fa4					_isok:
.1fa4	b1 28		lda ($28),y			lda 	(codePtr),y 				; is it NEXT <index>
.1fa6	c9 40		cmp #$40			cmp 	#$40 						; e.g. a variable follows 00-3F
.1fa8	b0 18		bcs $1fc2			bcs 	_CNNoIndex
.1faa	a2 00		ldx #$00			ldx 	#0 							; start on stack
.1fac	20 ff 2a	jsr $2aff			jsr 	EvaluateReference 			; this is the variable/parameter to localise.
.1faf	98		tya				tya
.1fb0	48		pha				pha
.1fb1	a0 04		ldy #$04			ldy 	#4 							; check same variable as that stored at +4,+5
.1fb3	b1 37		lda ($37),y			lda 	(rsPointer),y
.1fb5	d5 50		cmp $50,x			cmp 	esInt0,x
.1fb7	d0 76		bne $202f			bne 	_CNBadIndex
.1fb9	c8		iny				iny
.1fba	b1 37		lda ($37),y			lda 	(rsPointer),y
.1fbc	d5 58		cmp $58,x			cmp 	esInt1,x
.1fbe	d0 6f		bne $202f			bne 	_CNBadIndex
.1fc0	68		pla				pla
.1fc1	a8		tay				tay
.1fc2					_CNNoIndex:
.1fc2	98		tya				tya
.1fc3	48		pha				pha
.1fc4	a0 04		ldy #$04			ldy 	#4 							; make temp0 point to the index
.1fc6	b1 37		lda ($37),y			lda 	(rsPointer),y
.1fc8	85 2a		sta $2a				sta 	temp0
.1fca	c8		iny				iny
.1fcb	b1 37		lda ($37),y			lda 	(rsPointer),y
.1fcd	85 2b		sta $2b				sta 	temp0+1
.1fcf	c8		iny				iny
.1fd0	a2 00		ldx #$00			ldx 	#0 							; X is the sign extend part of the step.
.1fd2	b1 37		lda ($37),y			lda 	(rsPointer),y 				; get the step.
.1fd4	85 2f		sta $2f				sta 	temp2+1 					; save for later.
.1fd6	10 01		bpl $1fd9			bpl 	_CNSignX
.1fd8	ca		dex				dex  								; X = $FF
.1fd9					_CNSignX:
.1fd9	18		clc				clc 								; add to the LSB
.1fda	a0 00		ldy #$00			ldy 	#0
.1fdc	71 2a		adc ($2a),y			adc 	(temp0),y
.1fde	91 2a		sta ($2a),y			sta 	(temp0),y
.1fe0					_CNPropogate:
.1fe0	c8		iny				iny  								; add the sign extended in X to the rest.
.1fe1	8a		txa				txa
.1fe2	71 2a		adc ($2a),y			adc 	(temp0),y
.1fe4	91 2a		sta ($2a),y			sta 	(temp0),y
.1fe6	c8		iny				iny
.1fe7	8a		txa				txa
.1fe8	71 2a		adc ($2a),y			adc 	(temp0),y
.1fea	91 2a		sta ($2a),y			sta 	(temp0),y
.1fec	c8		iny				iny
.1fed	8a		txa				txa
.1fee	71 2a		adc ($2a),y			adc 	(temp0),y
.1ff0	91 2a		sta ($2a),y			sta 	(temp0),y
.1ff2	18		clc				clc 								; point temp1 to the terminal value stored in the stack.
.1ff3	a5 37		lda $37				lda 	rsPointer
.1ff5	69 07		adc #$07			adc 	#7
.1ff7	85 2c		sta $2c				sta 	temp1
.1ff9	a9 00		lda #$00			lda 	#0
.1ffb	85 2e		sta $2e				sta 	temp2 						; clear temp2, which is the OR of all the subtractions.
.1ffd	a8		tay				tay 								; and clear the Y register again.
.1ffe	65 38		adc $38				adc 	rsPointer+1
.2000	85 2d		sta $2d				sta 	temp1+1
.2002	38		sec				sec 								; calculate current - limit oring interim values.
.2003	20 3b 20	jsr $203b			jsr 	_CNCompare 					; each of these does a byte.
.2006	20 3b 20	jsr $203b			jsr 	_CNCompare 					; we calculate the OR of all these subtractions.
.2009	20 3b 20	jsr $203b			jsr 	_CNCompare 					; and the carry of the subtraction.
.200c	20 3b 20	jsr $203b			jsr 	_CNCompare
.200f	50 02		bvc $2013			bvc 	_CNNoOverflow 				; converts to a signed comparison on the sign bit.
.2011	49 80		eor #$80			eor 	#$80
.2013					_CNNoOverflow:
.2013	a4 2f		ldy $2f				ldy 	temp2+1						; get step back
.2015	30 1d		bmi $2034			bmi 	_CNCheckDownto
.2017	c9 00		cmp #$00			cmp 	#0
.2019	30 0c		bmi $2027			bmi 	_CNLoopRound 				; loop round if < =
.201b	a5 2e		lda $2e				lda 	temp2
.201d	f0 08		beq $2027			beq 	_CNLoopRound
.201f					_CNLoopExit:
.201f	68		pla				pla
.2020	a8		tay				tay
.2021	a9 0b		lda #$0b			lda 	#11
.2023	20 1b 32	jsr $321b			jsr 	RSFree
.2026	60		rts				rts
.2027					_CNLoopRound:
.2027	68		pla				pla
.2028	a8		tay				tay
.2029	a9 01		lda #$01			lda 	#1
.202b	20 38 32	jsr $3238			jsr 	RSLoadPosition				; go back to the loop top
.202e	60		rts				rts
.202f					_CNBadIndex:
.202f	a2 13		ldx #$13			ldx 	#ErrorID_BadIndex
.2031	20 e0 14	jsr $14e0		jsr	errorHandler
.2034					_CNCheckDownto:
.2034	c9 00		cmp #$00			cmp 	#0
.2036	10 ef		bpl $2027			bpl 	_CNLoopRound
.2038	4c 1f 20	jmp $201f			jmp 	_CNLoopExit
.203b					_CNCompare:
.203b	b1 2a		lda ($2a),y			lda 	(temp0),y 					; do the subtraction - compare don't care about answer
.203d	f1 2c		sbc ($2c),y			sbc 	(temp1),y
.203f	05 2e		ora $2e				ora 	temp2 						; Or into temp2 (does not affect carry)
.2041	85 2e		sta $2e				sta 	temp2
.2043	c8		iny				iny
.2044	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/if.asm

.2045					CommandIf:
.2045	20 ca 2a	jsr $2aca			jsr 	EvaluateRootInteger 		; get what's being tested.
.2048	b1 28		lda ($28),y			lda 	(codePtr),y 				; check for IF .. THEN or IF .. GOTO which are single lines.
.204a	c9 d9		cmp #$d9			cmp 	#TKW_GOTO
.204c	f0 04		beq $2052			beq 	_IfSimple
.204e	c9 a1		cmp #$a1			cmp 	#TKW_THEN
.2050	d0 1b		bne $206d			bne 	_IfComplex
.2052					_IfSimple:
.2052	20 85 31	jsr $3185			jsr 	MInt32Zero					; check if TOS zero
.2055	f0 10		beq $2067			beq 	_IfEOL 						; go to next line.
.2057	b1 28		lda ($28),y			lda 	(codePtr),y 				; get and skip token.
.2059	c8		iny				iny
.205a	c9 d9		cmp #$d9			cmp 	#TKW_GOTO 					; was it if GOTO ?
.205c	f0 0c		beq $206a			beq 	_IfGoto 					; do the Goto code
.205e	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows the THEN ?
.2060	29 c0		and #$c0			and 	#$C0 						; check $40-$7F
.2062	c9 40		cmp #$40			cmp 	#$40 						; e.g. number IF x = 0 THEN 170
.2064	f0 04		beq $206a			beq 	_IfGoto
.2066	60		rts				rts 								; else continue on this line.
.2067					_IfEOL:
.2067	4c 22 1f	jmp $1f22			jmp 	AdvanceNextLine 			; go to next line
.206a					_IfGoto:
.206a	4c 59 1c	jmp $1c59			jmp 	CommandGoto
.206d					_IfComplex:
.206d	20 85 31	jsr $3185			jsr 	MInt32Zero 					; is it true ?
.2070	f0 01		beq $2073			beq 	_IFSkip 					; if non-zero then skip to ELSE/ENDIF
.2072	60		rts				rts 								; else continue.
.2073					_IFSkip:
.2073	a9 d6		lda #$d6			lda	 	#TKW_ELSE 					; test failed, go to ELSE or ENDIF whichever comes first.
.2075	a2 a2		ldx #$a2			ldx 	#TKW_ENDIF
.2077	4c 0f 23	jmp $230f			jmp		ScanForward
.207a					Command_ELSE:
.207a	a2 a2		ldx #$a2			ldx 	#TKW_ENDIF
.207c	8a		txa				txa
.207d	4c 0f 23	jmp $230f			jmp		ScanForward
.2080					Command_ENDIF:
.2080	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/local.asm

.0c10					storeSize:
>0c10							.fill 	1
.2081					CommandLocal:
.2081	a2 00		ldx #$00			ldx 	#0
.2083	20 9f 20	jsr $209f			jsr 	LocaliseVariable 			; localise one.
.2086					_CLCheckNext:
.2086	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows ?
.2088	c8		iny				iny
.2089	c9 8d		cmp #$8d			cmp 	#TKW_EQUAL 					; something local "x = 2" ?
.208b	f0 06		beq $2093			beq 	_CLAssignment
.208d	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; comma try again.
.208f	f0 f0		beq $2081			beq 	CommandLocal
.2091	88		dey				dey
.2092	60		rts				rts
.2093					_CLAssignment:
.2093	a2 01		ldx #$01			ldx 	#1
.2095	20 ad 2a	jsr $2aad			jsr 	Evaluate 					; evaluate RHS
.2098	ca		dex				dex
.2099	20 62 1e	jsr $1e62			jsr 	WriteValue
.209c	4c 86 20	jmp $2086			jmp 	_CLCheckNext
.209f					LocaliseVariable:
.209f	b1 28		lda ($28),y			lda 	(codePtr),y 				; check it's a variable.
.20a1	c9 40		cmp #$40			cmp 	#$40
.20a3	b0 67		bcs $210c			bcs 	_LVSyntax
.20a5	8a		txa				txa 								; get the address of that variable.
.20a6	a2 00		ldx #$00		ldx	#0
.20a8	20 d3 40	jsr $40d3		jsr	variableHandler
.20ab	aa		tax				tax
.20ac	8a		txa				txa
.20ad	48		pha				pha
.20ae	98		tya				tya
.20af	48		pha				pha
.20b0	20 c4 1e	jsr $1ec4			jsr 	TOSToTemp0 					; the address of the variable is now in temp0.
.20b3	b5 48		lda $48,x			lda 	esType,x 					; get the type
.20b5	0a		asl a				asl 	a
.20b6	10 16		bpl $20ce			bpl 	_LVPushNumber
.20b8	a0 00		ldy #$00			ldy 	#0 							; put address of data in temp1
.20ba	b1 2a		lda ($2a),y			lda 	(temp0),y
.20bc	c8		iny				iny
.20bd	85 2c		sta $2c				sta 	temp1
.20bf	b1 2a		lda ($2a),y			lda 	(temp0),y
.20c1	85 2d		sta $2d				sta 	temp1+1
.20c3	a0 00		ldy #$00			ldy 	#0 	 						; get length
.20c5	b1 2c		lda ($2c),y			lda 	(temp1),y
.20c7	aa		tax				tax 								; into X
.20c8	e8		inx				inx 								; +1 for length.
.20c9	a9 24		lda #$24			lda 	#markerString
.20cb	4c e3 20	jmp $20e3			jmp 	_LVWriteFrame
.20ce					_LVPushNumber:
.20ce	a5 2a		lda $2a				lda 	temp0 						; storage address and data source are the same
.20d0	85 2c		sta $2c				sta 	temp1
.20d2	a5 2b		lda $2b				lda 	temp0+1
.20d4	85 2d		sta $2d				sta 	temp1+1
.20d6	b5 48		lda $48,x			lda 	esType,x 					; put float flag into carry.
.20d8	4a		lsr a				lsr 	a
.20d9	a9 25		lda #$25			lda 	#markerInt 					; get marker and size.
.20db	a2 04		ldx #$04			ldx 	#VarISize
.20dd	90 04		bcc $20e3			bcc 	_LVIsInteger
.20df	a9 23		lda #$23			lda 	#markerFloat
.20e1	a2 06		ldx #$06			ldx 	#VarFSize
.20e3					_LVIsInteger:
.20e3					_LVWriteFrame:
.20e3	8e 10 0c	stx $0c10			stx 	storeSize 					; number of bytes to copy from (temp0)
.20e6	e8		inx				inx 								; allocate 3 bytes, 2 for the address, 1 for the marker.
.20e7	e8		inx				inx
.20e8	e8		inx				inx
.20e9	20 f9 31	jsr $31f9			jsr 	RSClaim 					; create the stack frame.
.20ec	a5 2a		lda $2a				lda 	temp0 						; copy the target address to slots 1 & 2
.20ee	a0 01		ldy #$01			ldy 	#1
.20f0	91 37		sta ($37),y			sta 	(rsPointer),y
.20f2	c8		iny				iny
.20f3	a5 2b		lda $2b				lda 	temp0+1
.20f5	91 37		sta ($37),y			sta 	(rsPointer),y
.20f7	a0 00		ldy #$00			ldy 	#0
.20f9					_LVCopyData:
.20f9	b1 2c		lda ($2c),y			lda 	(temp1),y 					; get data from source, temp1
.20fb	c8		iny				iny 								; write allowing for the header bit.
.20fc	c8		iny				iny
.20fd	c8		iny				iny
.20fe	91 37		sta ($37),y			sta 	(rsPointer),y
.2100	88		dey				dey
.2101	88		dey				dey
.2102	ce 10 0c	dec $0c10			dec 	storeSize 					; do it storesize times
.2105	d0 f2		bne $20f9			bne 	_LVCopyData
.2107	68		pla				pla
.2108	a8		tay				tay
.2109	68		pla				pla
.210a	aa		tax				tax
.210b	60		rts				rts
.210c					_LVSyntax:
.210c	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.210e	20 e0 14	jsr $14e0		jsr	errorHandler
.2111					RestoreLocals:
.2111	a2 00		ldx #$00			ldx 	#0
.2113	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.2115	c9 40		cmp #$40			cmp	 	#64
.2117	90 01		bcc $211a			bcc 	_RLocal
.2119	60		rts				rts
.211a					_RLocal:
.211a	8a		txa				txa
.211b	48		pha				pha
.211c	98		tya				tya
.211d	48		pha				pha
.211e	a0 01		ldy #$01			ldy 	#1 							; copy target address to temp0
.2120	b1 37		lda ($37),y			lda 	(rsPointer),y
.2122	85 2a		sta $2a				sta 	temp0
.2124	c8		iny				iny
.2125	b1 37		lda ($37),y			lda 	(rsPointer),y
.2127	85 2b		sta $2b				sta 	temp0+1
.2129	a0 00		ldy #$00			ldy 	#0 							; get type back.
.212b	b1 37		lda ($37),y			lda 	(rsPointer),y
.212d	c9 24		cmp #$24			cmp 	#markerString 				; string is ... different :)
.212f	f0 28		beq $2159			beq 	_RString
.2131	a2 04		ldx #$04			ldx		#VARISize 					; size integer
.2133	c9 25		cmp #$25			cmp 	#markerInt
.2135	f0 02		beq $2139			beq 	_RIsInteger
.2137	a2 06		ldx #$06			ldx 	#VARFSize 					; size float
.2139					_RIsInteger:
.2139	8a		txa				txa
.213a	48		pha				pha
.213b	a0 03		ldy #$03			ldy 	#3							; start size to copy back from pointer.
.213d					_RCopyBack:
.213d	b1 37		lda ($37),y			lda 	(rsPointer),y
.213f	88		dey				dey
.2140	88		dey				dey
.2141	88		dey				dey
.2142	91 2a		sta ($2a),y			sta 	(temp0),y
.2144	c8		iny				iny
.2145	c8		iny				iny
.2146	c8		iny				iny
.2147	c8		iny				iny
.2148	ca		dex				dex
.2149	d0 f2		bne $213d			bne 	_RCopyBack
.214b	68		pla				pla 								; get size add 3
.214c	18		clc				clc
.214d	69 03		adc #$03			adc 	#3 							; (2 for address one for marker)
.214f					_RRestoreAAndLoop:
.214f	20 1b 32	jsr $321b			jsr 	RSFree
.2152	68		pla				pla
.2153	a8		tay				tay
.2154	68		pla				pla
.2155	aa		tax				tax
.2156	4c 11 21	jmp $2111			jmp 	RestoreLocals 				; go see if there are any more locals.
.2159					_RString:
.2159	a2 00		ldx #$00			ldx 	#0
.215b	a0 01		ldy #$01			ldy 	#1 							; set up for a string write.
.215d	b1 37		lda ($37),y			lda 	(rsPointer),y
.215f	95 50		sta $50,x			sta 	esInt0,x
.2161	c8		iny				iny
.2162	b1 37		lda ($37),y			lda 	(rsPointer),y
.2164	95 58		sta $58,x			sta 	esInt1,x
.2166	18		clc				clc
.2167	a5 37		lda $37				lda 	rsPointer
.2169	69 03		adc #$03			adc 	#3
.216b	95 51		sta $51,x			sta 	esInt0+1,x
.216d	a5 38		lda $38				lda 	rsPointer+1
.216f	69 00		adc #$00			adc 	#0
.2171	95 59		sta $59,x			sta 	esInt1+1,x
.2173	8a		txa				txa
.2174	a2 0e		ldx #$0e		ldx	#14
.2176	20 02 35	jsr $3502		jsr	stringHandler
.2179	a0 03		ldy #$03			ldy 	#3 							; get string length
.217b	b1 37		lda ($37),y			lda 	(rsPointer),y
.217d	18		clc				clc
.217e	69 04		adc #$04			adc 	#4 							; add 4 (pointer, marker, length) to restore.
.2180	4c 4f 21	jmp $214f			jmp 	_RRestoreAAndLoop

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/proc.asm

.0c11					paramCount:
>0c11							.fill 	1
.2183					CallProc:
.2183	20 0b 22	jsr $220b			jsr 	FindProcedure 				; find procedure, put in temp0. A contains name length.
.2186	48		pha				pha 								; save length on stack
.2187	85 32		sta $32				sta 	tempShort 					; save length in tempShort
.2189	a5 2b		lda $2b				lda 	temp0+1 					; save procedure target on stack.
.218b	48		pha				pha
.218c	a5 2a		lda $2a				lda 	temp0
.218e	48		pha				pha
.218f	98		tya				tya 								; calculate Y + length
.2190	18		clc				clc
.2191	65 32		adc $32				adc 	tempShort
.2193	a8		tay				tay
.2194	a2 00		ldx #$00			ldx 	#0 							; where the first parameter goes - 1
.2196					_CallProcEvalParams:
.2196	e8		inx				inx
.2197	b1 28		lda ($28),y			lda 	(codePtr),y 				; do we have ) , e.g. the end of the parameters ?
.2199	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.219b	f0 0b		beq $21a8			beq 	_CPDoneParams
.219d	20 ad 2a	jsr $2aad			jsr 	Evaluate 					; evaluate a parameter
.21a0	b1 28		lda ($28),y			lda 	(codePtr),Y 				; get what's next, preconsume
.21a2	c8		iny				iny
.21a3	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; if comma, go get another parameter
.21a5	f0 ef		beq $2196			beq 	_CallProcEvalParams
.21a7	88		dey				dey 								; undo consumption.
.21a8					_CPDoneParams:
.21a8	20 d1 31	jsr $31d1			jsr 	CheckRightParen 			; check closing parenthesis.
.21ab	8e 11 0c	stx $0c11			stx 	paramCount 					; store parameter count+1
.21ae	a2 04		ldx #$04			ldx 	#4							; make space on stack
.21b0	a9 50		lda #$50			lda 	#markerPROC
.21b2	20 f9 31	jsr $31f9			jsr 	RSClaim
.21b5	a9 01		lda #$01			lda 	#1 							; store return address.
.21b7	20 25 32	jsr $3225			jsr 	RSSavePosition
.21ba	68		pla				pla 								; get the new code Ptr
.21bb	85 28		sta $28				sta 	codePtr
.21bd	68		pla				pla
.21be	85 29		sta $29				sta 	codePtr+1
.21c0	68		pla				pla 								; length of name + 4 is the param start.
.21c1	18		clc				clc
.21c2	69 04		adc #$04			adc 	#4
.21c4	a8		tay				tay
.21c5	a2 ff		ldx #$ff			ldx 	#$FF
.21c7					_CPLoadParameters:
.21c7	e8		inx				inx 								; point to where the address should be loaded.
.21c8	ec 11 0c	cpx $0c11			cpx 	paramCount 					; too many parameters in definition ?
.21cb	f0 1e		beq $21eb			beq 	_CPParamError
.21cd	b1 28		lda ($28),y			lda 	(codePtr),y					; what follows
.21cf	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN 				; is it the right bracket
.21d1	f0 0e		beq $21e1			beq 	_CPParamComplete 			; done all the parameters, perhaps.
.21d3	20 9f 20	jsr $209f			jsr 	LocaliseVariable 			; make following variable local, ref in tos,x
.21d6	20 62 1e	jsr $1e62			jsr 	WriteValue 					; copy the evaluated parameter into there.
.21d9	b1 28		lda ($28),y			lda 	(codePtr),y 				; followed by a comma ?
.21db	c8		iny				iny
.21dc	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.21de	f0 e7		beq $21c7			beq 	_CPLoadParameters
.21e0	88		dey				dey 								; no, unconsume and check for )
.21e1					_CPParamComplete:
.21e1	20 d1 31	jsr $31d1			jsr 	CheckRightParen 			; check )
.21e4	e8		inx				inx 								; check right number of parameters have been consumed
.21e5	ec 11 0c	cpx $0c11			cpx 	paramCount
.21e8	d0 01		bne $21eb			bne 	_CPParamError
.21ea	60		rts				rts
.21eb					_CPParamError:
.21eb	a2 18		ldx #$18			ldx 	#ErrorID_Params
.21ed	20 e0 14	jsr $14e0		jsr	errorHandler
.21f0					ReturnProc:
.21f0	20 11 21	jsr $2111			jsr 	RestoreLocals 				; get the locals back.
.21f3	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.21f5	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.21f7	c9 50		cmp #$50			cmp 	#markerPROC 						; does it match
.21f9	f0 05		beq $2200			beq 	_isok
.21fb	a2 12		ldx #$12			ldx 	#ErrorID_endProcErr
.21fd	20 e0 14	jsr $14e0		jsr	errorHandler
.2200					_isok:
.2200	a9 01		lda #$01			lda 	#1
.2202	20 38 32	jsr $3238			jsr 	RSLoadPosition 				; reload the position from offset 1.
.2205	a9 04		lda #$04			lda 	#4 							; throw 4 bytes from stack.
.2207	20 1b 32	jsr $321b			jsr 	RSFree
.220a	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/proctable.asm

.0c12					procList:
>0c12							.fill 	2		 					; terminated by name high being zero.
.0c14					yInLine:
>0c14							.fill 	1
.220b					FindProcedure:
.220b	8c 14 0c	sty $0c14			sty 	yInLine 					; save current position.
.220e	20 c9 22	jsr $22c9			jsr 	CalculateProcedureHash		; calculate the hash of the procedure.
.2211	85 2c		sta $2c				sta 	temp1
.2213	ad 12 0c	lda $0c12			lda		procList 					; put procList address in temp2
.2216	85 2e		sta $2e				sta 	temp2
.2218	ad 13 0c	lda $0c13			lda 	procList+1
.221b	85 2f		sta $2f				sta 	temp2+1
.221d	a0 00		ldy #$00			ldy 	#0 							; position in this table.
.221f					_FPLoop:
.221f	b1 2e		lda ($2e),y			lda 	(temp2),y
.2221	f0 4f		beq $2272			beq 	_FPError 					; if so, we don't know this procedure.
.2223	85 2b		sta $2b				sta 	temp0+1 					; copy MSB/LSB to temp0 as we go.
.2225	c8		iny				iny
.2226	b1 2e		lda ($2e),y			lda 	(temp2),y
.2228	85 2a		sta $2a				sta 	temp0
.222a	c8		iny				iny
.222b	b1 2e		lda ($2e),y			lda 	(temp2),y					; check the procedure hash.
.222d	c5 2c		cmp $2c				cmp 	temp1
.222f	d0 2b		bne $225c			bne 	_FPNext 					; hash is different, go to next.
.2231	38		sec				sec
.2232	ad 14 0c	lda $0c14			lda 	yInLine 					; position in line must be at least 4
.2235	e9 04		sbc #$04			sbc 	#4
.2237	18		clc				clc
.2238	65 28		adc $28				adc 	codePtr
.223a	85 30		sta $30				sta 	temp3
.223c	a5 29		lda $29				lda 	codePtr+1
.223e	69 00		adc #$00			adc 	#0
.2240	85 31		sta $31				sta 	temp3+1
.2242	98		tya				tya
.2243	48		pha				pha
.2244	a0 04		ldy #$04			ldy 	#4
.2246					_FPCName:
.2246	b1 30		lda ($30),y			lda 	(temp3),y 					; check the same
.2248	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.224a	d0 0e		bne $225a			bne 	_FPpulYNext 				; if different go to next one.
.224c	c8		iny				iny
.224d	c9 3a		cmp #$3a			cmp 	#$3A
.224f	90 f5		bcc $2246			bcc 	_FPCName 					; compare the whole lot....
.2251	68		pla				pla 								; throw away the saved Y
.2252	98		tya				tya 								; length of name is Y-4
.2253	38		sec				sec
.2254	e9 04		sbc #$04			sbc 	#4
.2256	ac 14 0c	ldy $0c14			ldy 	yInLine  					; get the original Y back
.2259	60		rts				rts
.225a					_FPpulYNext:
.225a	68		pla				pla
.225b	a8		tay				tay
.225c					_FPNext:
.225c	c8		iny				iny 								; next procedure record.
.225d	10 c0		bpl $221f			bpl 	_FPLoop 					; if done 128 already ... e.g. Y -ve
.225f	98		tya				tya 								; subtract 128 from Y
.2260	38		sec				sec
.2261	e9 80		sbc #$80			sbc 	#128
.2263	a8		tay				tay
.2264	18		clc				clc 								; add 128 to temp2, so we can have more than
.2265	a5 2e		lda $2e				lda 	temp2 						; 255/3 = 85 procedures
.2267	69 80		adc #$80			adc 	#128
.2269	85 2e		sta $2e				sta 	temp2
.226b	90 b2		bcc $221f			bcc 	_FPLoop
.226d	e6 2f		inc $2f				inc 	temp2+1
.226f	4c 1f 22	jmp $221f			jmp 	_FPLoop
.2272					_FPError:
.2272	a2 17		ldx #$17			ldx 	#ErrorID_NoProc
.2274	20 e0 14	jsr $14e0		jsr	errorHandler
.2277					ScanProc:
.2277	98		tya				tya
.2278	48		pha				pha
.2279	a5 35		lda $35				lda 	lowMemory 					; copy the start of the procList, at low memory
.227b	8d 12 0c	sta $0c12			sta 	procList
.227e	a5 36		lda $36				lda 	lowMemory+1
.2280	8d 13 0c	sta $0c13			sta 	procList+1
.2283	20 f3 25	jsr $25f3			jsr 	ResetCodeAddress 			; back to the start.
.2286					_ScanLoop:
.2286	a0 00		ldy #$00			ldy 	#0 							; check reached program end
.2288	b1 28		lda ($28),y			lda 	(codePtr),y
.228a	f0 2a		beq $22b6			beq 	_ScanExit
.228c	a0 03		ldy #$03			ldy 	#3							; get first token
.228e	b1 28		lda ($28),y			lda 	(codePtr),y
.2290	c9 9d		cmp #$9d			cmp 	#TKW_DEFPROC				; skip to next if not DEFPROC
.2292	d0 12		bne $22a6			bne 	_ScanNext
.2294	a5 29		lda $29				lda 	codePtr+1 					; write high and low address of this line.
.2296	20 be 22	jsr $22be			jsr 	_ScanWrite
.2299	a5 28		lda $28				lda 	codePtr
.229b	20 be 22	jsr $22be			jsr 	_ScanWrite
.229e	a0 04		ldy #$04			ldy 	#4 							; start of name part
.22a0	20 c9 22	jsr $22c9			jsr 	CalculateProcedureHash 		; calculate procedure hash
.22a3	20 be 22	jsr $22be			jsr 	_ScanWrite					; and write that
.22a6					_ScanNext:
.22a6	18		clc				clc
.22a7	a0 00		ldy #$00			ldy 	#0
.22a9	b1 28		lda ($28),y			lda 	(codePtr),y
.22ab	65 28		adc $28				adc 	codePtr
.22ad	85 28		sta $28				sta 	codePtr
.22af	90 d5		bcc $2286			bcc 	_ScanLoop
.22b1	e6 29		inc $29				inc 	codePtr+1
.22b3	4c 86 22	jmp $2286			jmp 	_ScanLoop
.22b6					_ScanExit:
.22b6	a9 00		lda #$00			lda 	#0 							; write ending zero.
.22b8	20 be 22	jsr $22be			jsr 	_ScanWrite
.22bb	68		pla				pla
.22bc	a8		tay				tay
.22bd	60		rts				rts
.22be					_ScanWrite:
.22be	a0 00		ldy #$00			ldy 	#0
.22c0	91 35		sta ($35),y			sta 	(lowMemory),y
.22c2	e6 35		inc $35				inc 	lowMemory
.22c4	d0 02		bne $22c8			bne 	_SWNoCarry
.22c6	e6 36		inc $36				inc 	lowMemory+1
.22c8					_SWNoCarry:
.22c8	60		rts				rts
.22c9					CalculateProcedureHash:
.22c9	a9 00		lda #$00			lda 	#0 							; clear hash.
.22cb	85 2a		sta $2a				sta 	temp0
.22cd					_CPHLoop:
.22cd	18		clc				clc 								; add character and rotate and add carry back in
.22ce	b1 28		lda ($28),y			lda 	(codePtr),y
.22d0	65 2a		adc $2a				adc 	temp0
.22d2	6a		ror a				ror 	a
.22d3	69 0d		adc #$0d			adc 	#13 						; primes usually good for this sort of thing.
.22d5	85 2a		sta $2a				sta 	temp0 						; (down with this sort of thing)
.22d7	b1 28		lda ($28),y			lda 	(codePtr),y
.22d9	c8		iny				iny 								; advance incase we go round again.
.22da	c9 3a		cmp #$3a			cmp 	#$3A
.22dc	90 ef		bcc $22cd			bcc 	_CPHLoop
.22de	a5 2a		lda $2a				lda 	temp0
.22e0	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/repeat.asm

.22e1					Command_Repeat:
.22e1	a2 04		ldx #$04			ldx 	#4 							; allocate 4 bytes on stack for REPEAT
.22e3	a9 52		lda #$52			lda 	#markerREPEAT 				; repeat marker allocate 4 bytes
.22e5	20 f9 31	jsr $31f9			jsr 	RSClaim
.22e8	a9 01		lda #$01			lda 	#1 							; save position at offset 1.
.22ea	20 25 32	jsr $3225			jsr 	RSSavePosition
.22ed	60		rts				rts
.22ee					Command_Until:
.22ee	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.22f0	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.22f2	c9 52		cmp #$52			cmp 	#markerREPEAT 						; does it match
.22f4	f0 05		beq $22fb			beq 	_isok
.22f6	a2 0f		ldx #$0f			ldx 	#ErrorID_untilErr
.22f8	20 e0 14	jsr $14e0		jsr	errorHandler
.22fb					_isok:
.22fb	20 ca 2a	jsr $2aca			jsr 	EvaluateRootInteger 		; at the bottom.
.22fe	20 85 31	jsr $3185			jsr 	MInt32Zero					; check if TOS zero
.2301	d0 06		bne $2309			bne 	_CUExit
.2303	a9 01		lda #$01			lda 	#1
.2305	20 38 32	jsr $3238			jsr 	RSLoadPosition 				; reload the position from offset 1.
.2308	60		rts				rts
.2309					_CUExit:
.2309	a9 04		lda #$04			lda 	#4 							; throw 4 bytes from stack.
.230b	20 1b 32	jsr $321b			jsr 	RSFree
.230e	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/scanner.asm

.230f					ScanForward:
.230f	85 2c		sta $2c				sta 	temp1 						; save tokens to search in temp1/temp1+1
.2311	86 2d		stx $2d				stx 	temp1+1
.2313	a9 00		lda #$00			lda 	#0 							; temp2 counts structure levels.
.2315	85 2e		sta $2e				sta 	temp2
.2317	b1 28		lda ($28),y	_SFLoop:lda 	(codePtr),y 				; look at the next token.
.2319	c8		iny				iny
.231a	a6 2e		ldx $2e				ldx 	temp2 						; check structure levels are zero.
.231c	d0 08		bne $2326			bne 	_SFNoCheck 					; if so, check token against entered values.
.231e	c5 2c		cmp $2c				cmp 	temp1 						; if either matches, we've reached the token
.2320	f0 24		beq $2346			beq 	_SFExit 					; at the same strcture depth.
.2322	c5 2d		cmp $2d				cmp 	temp1+1
.2324	f0 20		beq $2346			beq 	_SFExit
.2326					_SFNoCheck:
.2326	c9 80		cmp #$80			cmp 	#$80 						; if it is 00-7F (variable/number) just skip it.
.2328	90 ed		bcc $2317			bcc 	_SFLoop
.232a	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; $80-$85 is various specials.
.232c	90 19		bcc $2347			bcc 	_SFSpecials
.232e	c9 99		cmp #$99			cmp 	#TOK_STRUCTST 				; if < structure start then continue
.2330	90 e5		bcc $2317			bcc 	_SFLoop
.2332	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST 				; if >= unary start (after structure) then continue.
.2334	b0 e1		bcs $2317			bcs 	_SFLoop
.2336	aa		tax				tax  								; token in X, and look up the adjuster.
.2337	bd e8 29	lda $29e8,x			lda 	ELBinaryOperatorInfo-TOK_BINARYST,x
.233a	38		sec				sec 								; convert to an offset ($FF,$01)
.233b	e9 81		sbc #$81			sbc 	#$81
.233d	18		clc				clc 								; add to depth
.233e	65 2e		adc $2e				adc 	temp2
.2340	85 2e		sta $2e				sta 	temp2
.2342	10 d3		bpl $2317			bpl 	_SFLoop 					; +ve okay to continue
.2344	30 07		bmi $234d			bmi 	SFError 					; if gone -ve then we have a nesting error
.2346	60		rts		_SFExit:rts
.2347					_SFSpecials:
.2347	20 52 23	jsr $2352			jsr 	ScannerSkipSpecial
.234a	4c 17 23	jmp $2317			jmp 	_SFLoop
.234d					SFError:
.234d	a2 14		ldx #$14			ldx 	#ErrorID_Struct
.234f	20 e0 14	jsr $14e0		jsr	errorHandler
.2352					ScannerSkipSpecial:
.2352	c9 80		cmp #$80			cmp 	#TOK_EOL 					; $80, advance to next line.
.2354	f0 10		beq $2366			beq 	_SFNextLine
.2356	c9 84		cmp #$84			cmp 	#TOK_FPC					; $84, skip embedded float
.2358	f0 2b		beq $2385			beq 	_SFFloatSkip
.235a	c9 85		cmp #$85			cmp 	#TOK_STR 					; $85, skip string
.235c	f0 02		beq $2360			beq 	_SFSkipString
.235e	c8		iny				iny									; $81,$82,$83 shift, so just advance over the shifted
.235f	60		rts				rts 								; token.
.2360					_SFSkipString:
.2360	98		tya				tya
.2361	38		sec				sec
.2362	71 28		adc ($28),y			adc 	(codePtr),y
.2364	a8		tay				tay
.2365	60		rts				rts
.2366					_SFNextLine:
.2366	a0 00		ldy #$00			ldy 	#0 							; get offset
.2368	b1 28		lda ($28),y			lda 	(codePtr),y
.236a	18		clc				clc 								; add to code pointer.
.236b	65 28		adc $28				adc 	codePtr
.236d	85 28		sta $28				sta 	codePtr
.236f	90 02		bcc $2373			bcc		_SFNLNoCarry
.2371	e6 29		inc $29				inc 	codePtr+1
.2373					_SFNLNoCarry:
.2373	b1 28		lda ($28),y			lda 	(codePtr),y 				; reached the end of the program.
.2375	d0 0b		bne $2382			bne		_SFXNL 						; no go round again
.2377	a5 2c		lda $2c				lda 	temp1
.2379	c9 dc		cmp #$dc			cmp 	#TKW_DATA 					; if searching for Data different error.
.237b	d0 d0		bne $234d			bne 	SFError 					; read uses this to search for data statements
.237d	a2 1d		ldx #$1d			ldx 	#ErrorID_DataError
.237f	20 e0 14	jsr $14e0		jsr	errorHandler
.2382	a0 03		ldy #$03	_SFXNL:	ldy 	#3
.2384	60		rts				rts
.2385					_SFFloatSkip:
.2385	98		tya				tya 								; skip over an embedded float.
.2386	18		clc				clc
.2387	69 05		adc #$05			adc 	#FloatEmbeddedSize
.2389	a8		tay				tay
.238a	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/while.asm

.238b					Command_While:
.238b	a9 57		lda #$57			lda 	#markerWhile 				; gosub marker allocate 4 bytes.
.238d	a2 04		ldx #$04			ldx 	#4
.238f	20 f9 31	jsr $31f9			jsr 	RSClaim 					; create on stack.
.2392	88		dey				dey
.2393	a9 01		lda #$01			lda 	#1
.2395	20 25 32	jsr $3225			jsr 	RSSavePosition 				; save position before the WHILE keyword.
.2398	c8		iny				iny
.2399	20 cc 2a	jsr $2acc			jsr 	EvaluateInteger				; get the conditional
.239c	20 85 31	jsr $3185			jsr 	MInt32Zero 	 				; if zero, skip forward to the fail code.
.239f	f0 01		beq $23a2			beq 	_CWFail
.23a1	60		rts				rts
.23a2					_CWFail:
.23a2	a9 04		lda #$04			lda 	#4
.23a4	20 1b 32	jsr $321b			jsr 	RSFree 						; close the just opened position.
.23a7	a9 9f		lda #$9f			lda 	#TKW_WEND 					; scan forward past WEND.
.23a9	aa		tax				tax
.23aa	20 0f 23	jsr $230f			jsr 	ScanForward
.23ad	60		rts				rts
.23ae					Command_Wend:
.23ae	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.23b0	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.23b2	c9 57		cmp #$57			cmp 	#markerWHILE 						; does it match
.23b4	f0 05		beq $23bb			beq 	_isok
.23b6	a2 11		ldx #$11			ldx 	#ErrorID_wendErr
.23b8	20 e0 14	jsr $14e0		jsr	errorHandler
.23bb					_isok:
.23bb	a9 01		lda #$01			lda 	#1
.23bd	20 38 32	jsr $3238			jsr 	RSLoadPosition				; go back until true
.23c0	a9 04		lda #$04			lda 	#4
.23c2	20 1b 32	jsr $321b			jsr 	RSFree 						; close the loop
.23c5	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/system/clear.asm

.23c6					CommandClear:
.23c6					XCommandClear:
.23c6	98		tya				tya
.23c7	48		pha				pha
.23c8	ad cc 0a	lda $0acc			lda 	endMemory					; set high memory = end of memory
.23cb	85 33		sta $33				sta 	highMemory
.23cd	ad cd 0a	lda $0acd			lda 	endMemory+1
.23d0	85 34		sta $34				sta 	highMemory+1
.23d2	ad c8 0a	lda $0ac8			lda 	basePage 					; work out where the program ends.
.23d5	85 2a		sta $2a				sta 	temp0
.23d7	ad c9 0a	lda $0ac9			lda 	basePage+1
.23da	85 2b		sta $2b				sta 	temp0+1
.23dc					_CCFindEnd:
.23dc	a0 00		ldy #$00			ldy 	#0
.23de	b1 2a		lda ($2a),y			lda 	(temp0),y
.23e0	f0 0c		beq $23ee			beq 	_CCFoundEnd 				; offset zero is end.
.23e2	18		clc				clc
.23e3	65 2a		adc $2a				adc 	temp0 						; move to next line
.23e5	85 2a		sta $2a				sta 	temp0
.23e7	90 f3		bcc $23dc			bcc 	_CCFindEnd
.23e9	e6 2b		inc $2b				inc 	temp0+1
.23eb	4c dc 23	jmp $23dc			jmp 	_CCFindEnd
.23ee					_CCFoundEnd:
.23ee	a5 2a		lda $2a				lda 	temp0 						; put temp0 in lowMemory
.23f0	85 35		sta $35				sta 	lowMemory
.23f2	a5 2b		lda $2b				lda 	temp0+1
.23f4	85 36		sta $36				sta 	lowMemory+1
.23f6	18		clc				clc 								; put temp0+1 in endProgram
.23f7	a5 2a		lda $2a				lda 	temp0
.23f9	69 01		adc #$01			adc 	#1
.23fb	8d ca 0a	sta $0aca			sta 	endProgram
.23fe	a5 2b		lda $2b				lda 	temp0+1
.2400	69 00		adc #$00			adc 	#0
.2402	8d cb 0a	sta $0acb			sta 	endProgram+1
.2405	18		clc				clc 								; put a bit of space in.
.2406	a5 35		lda $35				lda 	lowMemory
.2408	69 04		adc #$04			adc 	#4
.240a	85 35		sta $35				sta 	lowMemory
.240c	90 02		bcc $2410			bcc 	_CCNoCarry
.240e	e6 36		inc $36				inc 	lowMemory+1
.2410					_CCNoCarry:
.2410	20 eb 31	jsr $31eb			jsr 	RSReset 					; reset the return stack.
.2413	a2 04		ldx #$04		ldx	#4
.2415	20 d3 40	jsr $40d3		jsr	variableHandler
.2418	20 77 22	jsr $2277			jsr 	ScanProc 					; scan for procedures
.241b	20 fc 1b	jsr $1bfc			jsr 	CommandRestore 				; do a restore
.241e	68		pla				pla
.241f	a8		tay				tay
.2420	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/system/list.asm

.0c15					structIndent:
>0c15							.fill 	1
.2421					CommandList:
.2421	a2 00		ldx #$00			ldx		#0 							; set start/end lines in stack 0/1 to 0 and $FFFF
.2423	8e 15 0c	stx $0c15			stx 	structIndent
.2426	20 5e 31	jsr $315e			jsr 	MInt32False
.2429	e8		inx				inx
.242a	20 5a 31	jsr $315a			jsr 	MInt32True
.242d	b1 28		lda ($28),y			lda 	(codePtr),y 				; look at first token
.242f	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; list ,xxxx
.2431	f0 15		beq $2448			beq 	_CLEndLine
.2433	c9 00		cmp #$00			cmp 	#0 							; list ... on its own.
.2435	30 1b		bmi $2452			bmi 	_CLDoListing 				; do the whole lot.
.2437	a2 00		ldx #$00			ldx 	#0 							; get start line at stack:0
.2439	20 cc 2a	jsr $2acc			jsr 	EvaluateInteger
.243c	b1 28		lda ($28),y			lda 	(codePtr),y 				; , follows ?
.243e	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.2440	f0 06		beq $2448			beq 	_CLEndLine
.2442	20 9c 30	jsr $309c			jsr 	MInt32CopyUp 				; copy first to second if just a line number on its
.2445	4c 52 24	jmp $2452			jmp 	_CLDoListing 				; own e.g. list 1100
.2448					_CLEndLine:
.2448	c8		iny				iny 								; skip comma
.2449	b1 28		lda ($28),y			lda 	(codePtr),y  				; no number follows, then its list 1000,
.244b	30 05		bmi $2452			bmi 	_CLDoListing
.244d	a2 01		ldx #$01			ldx 	#1 							; get the last line to list
.244f	20 cc 2a	jsr $2acc			jsr 	EvaluateInteger				; get end
.2452					_CLDoListing:
.2452	20 f3 25	jsr $25f3			jsr 	ResetCodeAddress 			; back to the start.
.2455					_CLCheckLoop:
.2455	a2 00		ldx #$00		ldx	#0
.2457	20 bf 14	jsr $14bf		jsr	deviceHandler
.245a	a0 00		ldy #$00			ldy 	#0							; check end.
.245c	b1 28		lda ($28),y			lda 	(codePtr),y
.245e	f0 41		beq $24a1			beq 	_CLEnd
.2460	a2 00		ldx #$00			ldx 	#0 							; compare vs lower.
.2462	20 a4 24	jsr $24a4			jsr 	CLCompareLineTOS
.2465	c9 ff		cmp #$ff			cmp 	#255 						; if < skip
.2467	f0 28		beq $2491			beq 	_CLNext
.2469	e8		inx				inx
.246a	20 a4 24	jsr $24a4			jsr 	CLCompareLineTOS 			; compare vs higher
.246d	c9 01		cmp #$01			cmp 	#1
.246f	f0 20		beq $2491			beq 	_CLNext
.2471	a9 80		lda #$80			lda 	#$80 						; undo any down indents this line.
.2473	20 c6 24	jsr $24c6			jsr 	CLStructureCheck
.2476	ad 15 0c	lda $0c15			lda 	structIndent 				; indent level.
.2479	10 02		bpl $247d			bpl 	_CLPositive
.247b	a9 00		lda #$00			lda 	#0
.247d					_CLPositive:
.247d	a2 02		ldx #$02		ldx	#2
.247f	20 05 3d	jsr $3d05		jsr	tokeniserHandler
.2482	a9 82		lda #$82			lda 	#$82 						; up indents from this point on.
.2484	20 c6 24	jsr $24c6			jsr 	CLStructureCheck
.2487	ad 15 0c	lda $0c15			lda 	structIndent
.248a	10 05		bpl $2491			bpl 	_CLNext
.248c	a9 00		lda #$00			lda 	#0
.248e	8d 15 0c	sta $0c15			sta 	structIndent
.2491					_CLNext:
.2491	a0 00		ldy #$00			ldy 	#0 							; go to next line.
.2493	b1 28		lda ($28),y			lda 	(codePtr),y
.2495	18		clc				clc
.2496	65 28		adc $28				adc 	codePtr
.2498	85 28		sta $28				sta 	codePtr
.249a	90 b9		bcc $2455			bcc 	_CLCheckLoop
.249c	e6 29		inc $29				inc 	codePtr+1
.249e	4c 55 24	jmp $2455			jmp 	_CLCheckLoop
.24a1					_CLEnd:
.24a1	4c 47 32	jmp $3247			jmp 	WarmStart 					; warm start after list.
.24a4					CLCompareLineTOS:
.24a4	a0 01		ldy #$01			ldy 	#1
.24a6	b1 28		lda ($28),y			lda 	(codePtr),y
.24a8	55 50		eor $50,x			eor 	esInt0,x
.24aa	85 2a		sta $2a				sta 	temp0
.24ac	c8		iny				iny
.24ad	b1 28		lda ($28),y			lda 	(codePtr),y
.24af	55 58		eor $58,x			eor 	esInt1,x
.24b1	05 2a		ora $2a				ora 	temp0
.24b3	f0 10		beq $24c5			beq 	_CLCLTExit
.24b5	88		dey				dey
.24b6	b1 28		lda ($28),y			lda 	(codePtr),y
.24b8	d5 50		cmp $50,x			cmp 	esInt0,x
.24ba	c8		iny				iny
.24bb	b1 28		lda ($28),y			lda 	(codePtr),y
.24bd	f5 58		sbc $58,x			sbc 	esInt1,x
.24bf	a9 ff		lda #$ff			lda 	#255
.24c1	90 02		bcc $24c5			bcc 	_CLCLTExit
.24c3	a9 01		lda #$01			lda 	#1
.24c5					_CLCLTExit:
.24c5	60		rts				rts
.24c6					CLStructureCheck:
.24c6	85 2a		sta $2a				sta 	temp0
.24c8	a0 03		ldy #$03			ldy 	#3
.24ca					_CLSCLoop:
.24ca	b1 28		lda ($28),y			lda 	(codePtr),y 				; get and consume token.
.24cc	c8		iny				iny
.24cd	c9 80		cmp #$80			cmp 	#$80
.24cf	90 f9		bcc $24ca			bcc 	_CLSCLoop 					; $00-$7F just step over.
.24d1	f0 28		beq $24fb			beq		_CLSCExit					; EOL return
.24d3	c9 86		cmp #$86			cmp 	#$86 						; special handler
.24d5	90 1e		bcc $24f5			bcc 	_CLSCSpecial
.24d7	c9 99		cmp #$99			cmp 	#TOK_STRUCTST 				; check if structure changer.
.24d9	90 ef		bcc $24ca			bcc 	_CLSCLoop
.24db	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST
.24dd	b0 eb		bcs $24ca			bcs 	_CLSCLoop
.24df	aa		tax				tax 								; get adjustment
.24e0	bd e8 29	lda $29e8,x			lda 	ELBinaryOperatorInfo-TOK_BINARYST,x
.24e3	c5 2a		cmp $2a				cmp 	temp0	 					; if what we're searching for
.24e5	d0 e3		bne $24ca			bne 	_CLSCLoop
.24e7	38		sec				sec
.24e8	e9 81		sbc #$81			sbc 	#$81 						; convert to offset
.24ea	0a		asl a				asl 	a 							; double indent step
.24eb	18		clc				clc
.24ec	6d 15 0c	adc $0c15			adc 	structIndent 				; add to structure indent
.24ef	8d 15 0c	sta $0c15			sta 	structIndent
.24f2	4c ca 24	jmp $24ca			jmp 	_CLSCLoop
.24f5					_CLSCSpecial:
.24f5	20 52 23	jsr $2352			jsr 	ScannerSkipSpecial
.24f8	4c ca 24	jmp $24ca			jmp 	_CLSCLoop
.24fb					_CLSCExit:
.24fb	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/system/loadsave.asm

.24fc					CommandLoad:
.24fc	20 24 25	jsr $2524			jsr 	CLSParameters 					; get parameters for load.
.24ff	08		php				php
.2500	a2 0e		ldx #$0e		ldx	#14
.2502	20 bf 14	jsr $14bf		jsr	deviceHandler
.2505	28		plp				plp
.2506	b0 08		bcs $2510			bcs 	_CLExit 						; if CC then load a program, so warm start.
.2508	20 c6 23	jsr $23c6			jsr 	CommandClear
.250b	a2 02		ldx #$02		ldx	#2
.250d	20 c1 1b	jsr $1bc1		jsr	interactionHandler
.2510					_CLExit
.2510	60		rts				rts
.2511					CommandSave:
.2511	20 24 25	jsr $2524			jsr 	CLSParameters					; get parameters for save
.2514	90 08		bcc $251e			bcc 	_CSNoOverrideAddress
.2516	20 de 31	jsr $31de			jsr 	CheckComma 						; should be a comma.
.2519	a2 02		ldx #$02			ldx 	#2
.251b	20 cc 2a	jsr $2acc			jsr 	EvaluateInteger 				; get save end address.
.251e					_CSNoOverrideAddress:
.251e	a2 18		ldx #$18		ldx	#24
.2520	20 bf 14	jsr $14bf		jsr	deviceHandler
.2523	60		rts				rts
.2524					CLSParameters:
.2524	a2 00		ldx #$00			ldx 	#0 								; string
.2526	20 c1 2a	jsr $2ac1			jsr 	EvaluateString
.2529	e8		inx				inx 									; erase out +1 +2
.252a	20 5e 31	jsr $315e			jsr 	MInt32False
.252d	e8		inx				inx
.252e	20 5e 31	jsr $315e			jsr 	MInt32False
.2531	ad c8 0a	lda $0ac8			lda 	basePage 						; default start address.
.2534	85 51		sta $51				sta 	esInt0+1
.2536	ad c9 0a	lda $0ac9			lda 	basePage+1
.2539	85 59		sta $59				sta 	esInt1+1
.253b	ad ca 0a	lda $0aca			lda 	endProgram 						; default end address
.253e	85 52		sta $52				sta 	esInt0+2
.2540	ad cb 0a	lda $0acb			lda 	endProgram+1
.2543	85 5a		sta $5a				sta 	esInt1+2
.2545	b1 28		lda ($28),y			lda 	(codePtr),y 					; , following
.2547	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.2549	d0 08		bne $2553			bne 	_CLSDefault
.254b	c8		iny				iny 									; skip comma
.254c	a2 01		ldx #$01			ldx 	#1 								; get numeric value.
.254e	20 cc 2a	jsr $2acc			jsr 	EvaluateInteger
.2551	38		sec				sec
.2552	60		rts				rts
.2553					_CLSDefault:
.2553	18		clc				clc
.2554	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/system/new.asm

.2555					Command_New:
.2555					Command_XNew:
.2555	20 f3 25	jsr $25f3			jsr 	ResetCodeAddress 			; point to first line
.2558	a0 00		ldy #$00			ldy 	#0 							; and zap it.
.255a	98		tya				tya
.255b	91 28		sta ($28),y			sta 	(codePtr),y
.255d	20 c6 23	jsr $23c6			jsr 	CommandClear 				; clear everything down.
.2560	4c 1c 1f	jmp $1f1c			jmp 	CommandEND 					; do END code, as there's nothing to run.

;******  Return to file: main/main.asm


;******  Processing file: main/commands/system/run.asm

.0c16					breakCounter:
>0c16								.fill 	1
.0c17					breakIncrement:
>0c17								.fill 	1
.2563					Command_Run:
.2563					XCommand_Run:
.2563	a2 ff		ldx #$ff			ldx 	#$FF 						; reset the stack.
.2565	9a		txs				txs
.2566	20 ed 25	jsr $25ed			jsr 	BreakOn 					; turn break on
.2569	20 c6 23	jsr $23c6			jsr 	CommandClear 				; clear everything.
.256c	20 f3 25	jsr $25f3			jsr 	ResetCodeAddress 			; back to the start.
.256f					Command_RunFrom:
.256f	a0 03		ldy #$03			ldy 	#3 							; over offset/line #
.2571					CRNextInstruction:
.2571	64 3a		stz $3a				stz 	softMemAlloc+1
.2573	ad 16 0c	lda $0c16			lda 	breakCounter 				; check for break.
.2576	6d 17 0c	adc $0c17			adc 	breakIncrement
.2579	8d 16 0c	sta $0c16			sta 	breakCounter
.257c	90 05		bcc $2583			bcc 	_CRNoChecks
.257e	a2 00		ldx #$00		ldx	#0
.2580	20 bf 14	jsr $14bf		jsr	deviceHandler
.2583					_CRNoChecks
.2583	b1 28		lda ($28),y			lda 	(codePtr),y 				; get next token.
.2585	10 1c		bpl $25a3			bpl 	_CRNotToken
.2587	c9 c9		cmp #$c9			cmp 	#TOK_TOKENS 				; if in the tokens then do that token.
.2589	b0 0c		bcs $2597			bcs 	_CRExecute
.258b	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST 				; unary is ignored.
.258d	b0 71		bcs $2600			bcs 	Unimplemented
.258f	c9 99		cmp #$99			cmp 	#TOK_STRUCTST 				; execute structures.
.2591	b0 04		bcs $2597			bcs 	_CRExecute
.2593	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; if one of the system tokens $80-$85 do that
.2595	b0 16		bcs $25ad			bcs 	_CRCheckIndirect 			; if in that unused range check for ! or ? or AND
.2597					_CRExecute:
.2597	c8		iny				iny 								; consume it.
.2598	0a		asl a				asl 	a 							; double it, losing most significant bit.
.2599	aa		tax				tax
.259a	20 a0 25	jsr $25a0			jsr 	_CRRunRoutine 				; we want to do jsr (group0vectors,x)
.259d	4c 71 25	jmp $2571			jmp 	CRNextInstruction
.25a0					_CRRunRoutine:
.25a0	7c 0a 26	jmp ($260a,x)			jmp 	(Group0Vectors,x)
.25a3					_CRNotToken:
.25a3	c9 40		cmp #$40			cmp 	#$40 						; if 0-3F then it is a letter
.25a5	b0 59		bcs $2600			bcs 	Unimplemented
.25a7					_CRDefaultLet:
.25a7	20 4f 1e	jsr $1e4f			jsr 	CommandLet 					; do the default, LET
.25aa	4c 71 25	jmp $2571			jmp 	CRNextInstruction
.25ad					_CRCheckIndirect:
.25ad	c9 86		cmp #$86			cmp 	#TKW_AND 					; AND (assembler)
.25af	f0 0a		beq $25bb			beq 	_CRAndCommand
.25b1	c9 97		cmp #$97			cmp 	#TKW_PLING 					; !<term> =
.25b3	f0 f2		beq $25a7			beq 	_CRDefaultLet
.25b5	c9 98		cmp #$98			cmp 	#TKW_QMARK 					; ?<term> =
.25b7	f0 ee		beq $25a7			beq 	_CRDefaultLet
.25b9	d0 45		bne $2600			bne 	Unimplemented
.25bb					_CRAndCommand:
.25bb	c8		iny				iny 								; skip over the AND token
.25bc	a9 92		lda #$92			lda 	#TKW_LPARENANDRPAREN 		; replace it with the pseudo-and
.25be	20 d8 25	jsr $25d8			jsr 	CommandAssembler 			; do the assembler command
.25c1	4c 71 25	jmp $2571			jmp 	CRNextInstruction 			; and loop round.
.25c4					CommandShift1:
.25c4	b1 28		lda ($28),y			lda 	(codePtr),y 				; get shifted value
.25c6	10 38		bpl $2600			bpl 	Unimplemented 				; we have an error as this should not happen.
.25c8	c8		iny				iny 								; advance over it.
.25c9	c9 91		cmp #$91			cmp 	#TKA_GROUP1 				; is it an assembler constant ?
.25cb	b0 0b		bcs $25d8			bcs 	CommandAssembler
.25cd	0a		asl a				asl 	a 							; double into X
.25ce	aa		tax				tax
.25cf	7c ce 26	jmp ($26ce,x)			jmp 	(Group1Vectors-12,x) 		; and do the code.
.25d2					CommandShift2:
.25d2	a9 ff		lda #$ff			lda 	#$FF 						; $FF means command not unary function.
.25d4	20 15 18	jsr $1815		jsr	extensionHandler
.25d7	60		rts				rts
.25d8					CommandAssembler:
.25d8	a2 00		ldx #$00		ldx	#0
.25da	20 84 13	jsr $1384		jsr	assemblerHandler
.25dd	60		rts				rts
.25de					CommandAssemblerLabel:
.25de	a2 02		ldx #$02		ldx	#2
.25e0	20 84 13	jsr $1384		jsr	assemblerHandler
.25e3	60		rts				rts
.25e4					CommandColon:
.25e4	60		rts				rts
.25e5					CommandBreak:
.25e5	20 ca 2a	jsr $2aca			jsr 	EvaluateRootInteger
.25e8	20 85 31	jsr $3185			jsr 	MInt32Zero
.25eb	f0 02		beq $25ef			beq 	BreakOff
.25ed					BreakOn:
.25ed	a2 08		ldx #$08			ldx 	#8
.25ef					BreakOff:
.25ef	8e 17 0c	stx $0c17			stx 	breakIncrement
.25f2	60		rts				rts
.25f3					ResetCodeAddress:
.25f3	ad c8 0a	lda $0ac8			lda 	basePage 					; copy basePage to code Pointer
.25f6	85 28		sta $28				sta 	codePtr
.25f8	ad c9 0a	lda $0ac9			lda 	basePage+1
.25fb	85 29		sta $29				sta 	codePtr+1
.25fd	a0 03		ldy #$03			ldy 	#3 							; offset after offset link and line#
.25ff	60		rts				rts
.2600					Unimplemented:
.2600	a2 01		ldx #$01			ldx 	#ErrorID_Missing
.2602	20 e0 14	jsr $14e0		jsr	errorHandler
.2605					TKErr01:
.2605					TKErr02:
.2605					TKErr03:
.2605					TKErr04:
.2605					TKErr05:
.2605					TKErr06:
.2605					TKErr07:
.2605					TKErr08:
.2605					TKErr09:
.2605					TKErr10:
.2605					TKErr11:
.2605	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.2607	20 e0 14	jsr $14e0		jsr	errorHandler

;******  Processing file: main/commands/system/../../../generated/tokenvectors0.inc

.260a					Group0Vectors:
>260a	22 1f					.word	AdvanceNextLine          ; $80 [[eol]]
>260c	c4 25					.word	CommandShift1            ; $81 [[sh1]]
>260e	d2 25					.word	CommandShift2            ; $82 [[sh2]]
>2610	05 26					.word	TKErr09                  ; $83 [[sh3]]
>2612	05 26					.word	TKErr10                  ; $84 [[fpc]]
>2614	05 26					.word	TKErr08                  ; $85 [[str]]
>2616	b1 27					.word	AndHandler               ; $86 and
>2618	9e 27					.word	OrHandler                ; $87 or
>261a	8b 27					.word	XorHandler               ; $88 xor
>261c	d3 28					.word	CompareGreaterEq         ; $89 >=
>261e	dd 28					.word	CompareLessEq            ; $8a <=
>2620	bf 28					.word	CompareGreater           ; $8b >
>2622	b5 28					.word	CompareLess              ; $8c <
>2624	ab 28					.word	CompareEquals            ; $8d =
>2626	c9 28					.word	CompareNotEquals         ; $8e <>
>2628	1c 27					.word	AddHandler               ; $8f +
>262a	3f 27					.word	SubHandler               ; $90 -
>262c	d7 27					.word	ShrHandler               ; $91 >>
>262e	c4 27					.word	ShlHandler               ; $92 <<
>2630	52 27					.word	MulHandler               ; $93 *
>2632	65 27					.word	DivHandler               ; $94 /
>2634	78 27					.word	ModHandler               ; $95 mod
>2636	10 28					.word	PowerHandler             ; $96 ^
>2638	ea 27					.word	WordRefHandler           ; $97 !
>263a	fd 27					.word	ByteRefHandler           ; $98 ?
>263c	e1 22					.word	Command_Repeat           ; $99 repeat
>263e	8b 23					.word	Command_While            ; $9a while
>2640	36 1f					.word	Command_FOR              ; $9b for
>2642	45 20					.word	CommandIf                ; $9c if
>2644	05 26					.word	TKErr04                  ; $9d defproc
>2646	ee 22					.word	Command_Until            ; $9e until
>2648	ae 23					.word	Command_Wend             ; $9f wend
>264a	97 1f					.word	Command_NEXT             ; $a0 next
>264c	05 26					.word	TKErr06                  ; $a1 then
>264e	80 20					.word	Command_ENDIF            ; $a2 endif
>2650	f0 21					.word	ReturnProc               ; $a3 endproc
>2652	37 2a					.word	UnaryParenthesis         ; $a4 (
>2654	13 2c					.word	UnaryLen                 ; $a5 len(
>2656	57 2c					.word	UnarySgn                 ; $a6 sgn(
>2658	40 2c					.word	UnaryAbs                 ; $a7 abs(
>265a	b0 2c					.word	Unary_Random             ; $a8 random(
>265c	fa 2c					.word	Unary_Page               ; $a9 page
>265e	5a 31					.word	MInt32True               ; $aa true
>2660	5e 31					.word	MInt32False              ; $ab false
>2662	c5 2c					.word	Unary_Min                ; $ac min(
>2664	c9 2c					.word	Unary_Max                ; $ad max(
>2666	d2 2d					.word	UnarySys                 ; $ae sys(
>2668	7b 2d					.word	UnaryTimer               ; $af timer(
>266a	90 2b					.word	EventFunction            ; $b0 event(
>266c	a4 2d					.word	UnaryGet                 ; $b1 get(
>266e	94 2d					.word	UnaryInkey               ; $b2 inkey(
>2670	4b 2d					.word	UnaryAlloc               ; $b3 alloc(
>2672	0b 2e					.word	ExecChr                  ; $b4 chr$(
>2674	3b 2e					.word	ExecLeft                 ; $b5 left$(
>2676	58 2e					.word	ExecMid                  ; $b6 mid$(
>2678	80 2e					.word	ExecRight                ; $b7 right$(
>267a	12 2b					.word	Event_Str                ; $b8 str$(
>267c	41 2b					.word	UnaryVal                 ; $b9 val(
>267e	6e 2c					.word	UnaryPeek                ; $ba peek(
>2680	74 2c					.word	UnaryDeek                ; $bb deek(
>2682	7a 2c					.word	UnaryLeek                ; $bc leek(
>2684	31 2c					.word	UnaryAsc                 ; $bd asc(
>2686	25 2d					.word	UnaryIntToFloat          ; $be int(
>2688	38 2d					.word	UnaryFloatToInt          ; $bf float(
>268a	44 2b					.word	UnaryIsVal               ; $c0 isval(
>268c	22 2e					.word	ExecUpper                ; $c1 upper$(
>268e	1f 2e					.word	ExecLower                ; $c2 lower$(
>2690	08 2d					.word	UnaryReference           ; $c3 @
>2692	1e 2d					.word	UnaryComplement          ; $c4 ~
>2694	1b 2d					.word	UnaryHexMarker           ; $c5 &
>2696	bd 2d					.word	UnaryGetString           ; $c6 get$(
>2698	c3 2d					.word	UnaryInkeyString         ; $c7 inkey$(
>269a	fa 2d					.word	UnaryMem                 ; $c8 mem
>269c	05 26					.word	TKErr01                  ; $c9 )
>269e	e4 25					.word	CommandColon             ; $ca :
>26a0	05 26					.word	TKErr02                  ; $cb ,
>26a2	05 26					.word	TKErr03                  ; $cc ;
>26a4	0a 1f					.word	Command_Rem2             ; $cd '
>26a6	05 26					.word	TKErr07                  ; $ce to
>26a8	05 26					.word	TKErr05                  ; $cf step
>26aa	83 21					.word	CallProc                 ; $d0 proc
>26ac	81 20					.word	CommandLocal             ; $d1 local
>26ae	41 1e					.word	Command_Dim              ; $d2 dim
>26b0	0a 1f					.word	Command_Rem              ; $d3 rem
>26b2	4f 1e					.word	CommandLet               ; $d4 let
>26b4	8b 1c					.word	Command_Input            ; $d5 input
>26b6	7a 20					.word	Command_ELSE             ; $d6 else
>26b8	12 1e					.word	Command_VDU              ; $d7 vdu
>26ba	41 1d					.word	Command_Print            ; $d8 print
>26bc	59 1c					.word	CommandGOTO              ; $d9 goto
>26be	2e 1c					.word	CommandGOSUB             ; $da gosub
>26c0	41 1c					.word	CommandRETURN            ; $db return
>26c2	f3 1b					.word	CommandData              ; $dc data
>26c4	33 1e					.word	Command_Assert           ; $dd assert
>26c6	cd 1e					.word	Command_Poke             ; $de poke
>26c8	d1 1e					.word	Command_Doke             ; $df doke
>26ca	d5 1e					.word	Command_Loke             ; $e0 loke
>26cc	e2 1d					.word	Command_Ink              ; $e1 ink
>26ce	ed 1d					.word	Command_Paper            ; $e2 paper
>26d0	dc 1d					.word	Command_CLS              ; $e3 cls
>26d2	f8 1d					.word	Command_Locate           ; $e4 locate
>26d4	e5 25					.word	CommandBreak             ; $e5 break
>26d6	de 25					.word	CommandAssemblerLabel    ; $e6 .
>26d8	05 26					.word	TKErr11                  ; $e7 #

;******  Return to file: main/commands/system/run.asm


;******  Processing file: main/commands/system/../../../generated/tokenvectors1.inc

.26da					Group1Vectors:
>26da	c6 23					.word	CommandClear             ; $86 clear
>26dc	fc 24					.word	CommandLoad              ; $87 load
>26de	11 25					.word	CommandSave              ; $88 save
>26e0	21 24					.word	CommandList              ; $89 list
>26e2	55 25					.word	Command_New              ; $8a new
>26e4	63 25					.word	Command_Run              ; $8b run
>26e6	c8 1b					.word	CommandRead              ; $8c read
>26e8	fc 1b					.word	CommandRestore           ; $8d restore
>26ea	1c 1f					.word	CommandEnd               ; $8e end
>26ec	17 1f					.word	CommandStop              ; $8f stop
>26ee	1f 1f					.word	CommandXemu              ; $90 xemu

;******  Return to file: main/commands/system/run.asm


;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/binary/binary.asm

.26f0					BinaryProcess:
.26f0	b5 48		lda $48,x			lda 	esType,x 					; or type bytes together and check bit 6.
.26f2	15 49		ora $49,x			ora 	esType+1,x 					; (the float bit)
.26f4	0a		asl a				asl 	a
.26f5	30 0e		bmi $2705			bmi 	_BPStringType 				; if bit 6 is set, then string type, error
.26f7	18		clc				clc 								; return CC for integer
.26f8	29 02		and #$02			and 	#$02 						; $02 because of ASL A. check original bit 1.
.26fa	f0 08		beq $2704			beq 	_BPExit 					; if both integer then return with CC.
.26fc	20 0a 27	jsr $270a			jsr 	BPMakeBothFloat 			; make both float
.26ff	a9 01		lda #$01			lda 	#$01 						; set result type to float
.2701	95 48		sta $48,x			sta 	esType,x
.2703	38		sec				sec 								; and return with carry set.
.2704					_BPExit:
.2704	60		rts				rts
.2705					_BPStringType:
.2705	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.2707	20 e0 14	jsr $14e0		jsr	errorHandler
.270a					BPMakeBothFloat:
.270a	e8		inx				inx
.270b	20 0f 27	jsr $270f			jsr 	BPMakeFloat 				; one is a float, so we do both as floats.
.270e	ca		dex				dex
.270f					BPMakeFloat:
.270f	b5 48		lda $48,x			lda 	esType,x 					; get type bit which is in bit 0
.2711	4a		lsr a				lsr 	a
.2712	b0 07		bcs $271b			bcs 	_BPIsFloat 					; already a float if set.
.2714	8a		txa				txa
.2715	a2 1a		ldx #$1a		ldx	#26
.2717	20 e1 19	jsr $19e1		jsr	floatingpointHandler
.271a	aa		tax				tax
.271b					_BPIsFloat:
.271b	60		rts				rts
.271c					AddHandler:
.271c	20 ed 28	jsr $28ed			jsr 	DereferenceTwo 				; dereference top two on stack.
.271f	b5 48		lda $48,x			lda 	esType,x 					; check two strings.
.2721	35 49		and $49,x			and 	esType+1,x
.2723	29 40		and #$40			and 	#$40 						; if both have bit 6 set ... we have two strings
.2725	d0 10		bne $2737			bne 	_AHStringConcat				; concatenate strings.
.2727	20 f0 26	jsr $26f0			jsr 	BinaryProcess 				; check to see if either is float
.272a	b0 03		bcs $272f			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.272c	4c 42 30	jmp $3042			jmp 	MInt32Add 							; else do it as integer.
.272f					_IsFPOperation:
.272f	8a		txa				txa 								; call the relevant fp routine
.2730	a2 02		ldx #$02		ldx	#2
.2732	20 e1 19	jsr $19e1		jsr	floatingpointHandler
.2735	aa		tax				tax
.2736	60		rts				rts
.2737					_AHStringConcat:
.2737	8a		txa				txa 								; handled by the string module.
.2738	a2 04		ldx #$04		ldx	#4
.273a	20 02 35	jsr $3502		jsr	stringHandler
.273d	aa		tax				tax
.273e	60		rts				rts
.273f					SubHandler:
.273f	20 ed 28	jsr $28ed			jsr 	DereferenceTwo
.2742	20 f0 26	jsr $26f0			jsr 	BinaryProcess 				; check to see if either is float
.2745	b0 03		bcs $274a			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.2747	4c 5c 30	jmp $305c			jmp 	MInt32Sub 							; else do it as integer.
.274a					_IsFPOperation:
.274a	8a		txa				txa 								; call the relevant fp routine
.274b	a2 10		ldx #$10		ldx	#16
.274d	20 e1 19	jsr $19e1		jsr	floatingpointHandler
.2750	aa		tax				tax
.2751	60		rts				rts
.2752					MulHandler:
.2752	20 ed 28	jsr $28ed			jsr 	DereferenceTwo
.2755	20 f0 26	jsr $26f0			jsr 	BinaryProcess 				; check to see if either is float
.2758	b0 03		bcs $275d			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.275a	4c 76 30	jmp $3076			jmp 	MInt32Multiply 							; else do it as integer.
.275d					_IsFPOperation:
.275d	8a		txa				txa 								; call the relevant fp routine
.275e	a2 0a		ldx #$0a		ldx	#10
.2760	20 e1 19	jsr $19e1		jsr	floatingpointHandler
.2763	aa		tax				tax
.2764	60		rts				rts
.2765					DivHandler:
.2765	20 ed 28	jsr $28ed			jsr 	DereferenceTwo
.2768	20 f0 26	jsr $26f0			jsr 	BinaryProcess 				; check to see if either is float
.276b	b0 03		bcs $2770			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.276d	4c 33 2f	jmp $2f33			jmp 	MInt32SDivide 							; else do it as integer.
.2770					_IsFPOperation:
.2770	8a		txa				txa 								; call the relevant fp routine
.2771	a2 06		ldx #$06		ldx	#6
.2773	20 e1 19	jsr $19e1		jsr	floatingpointHandler
.2776	aa		tax				tax
.2777	60		rts				rts
.2778					ModHandler:
.2778	20 ed 28	jsr $28ed			jsr 	DereferenceTwo
.277b	20 f0 26	jsr $26f0			jsr 	BinaryProcess 				; check to see if either is float
.277e	b0 03		bcs $2783			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.2780	4c b1 2f	jmp $2fb1			jmp 	MInt32Modulus 							; else do it as integer.
.2783					_IsFPOperation:
.2783	8a		txa				txa 								; call the relevant fp routine
.2784	a2 08		ldx #$08		ldx	#8
.2786	20 e1 19	jsr $19e1		jsr	floatingpointHandler
.2789	aa		tax				tax
.278a	60		rts				rts
.278b					XorHandler:
.278b	20 ed 28	jsr $28ed			jsr 	DereferenceTwo
.278e	20 f0 26	jsr $26f0			jsr 	BinaryProcess 				; check to see if either is float
.2791	b0 03		bcs $2796			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.2793	4c e5 2e	jmp $2ee5			jmp 	MInt32Xor 							; else do it as integer.
.2796					_IsFPOperation:
.2796	8a		txa				txa 								; call the relevant fp routine
.2797	a2 08		ldx #$08		ldx	#8
.2799	20 e1 19	jsr $19e1		jsr	floatingpointHandler
.279c	aa		tax				tax
.279d	60		rts				rts
.279e					OrHandler:
.279e	20 ed 28	jsr $28ed			jsr 	DereferenceTwo
.27a1	20 f0 26	jsr $26f0			jsr 	BinaryProcess 				; check to see if either is float
.27a4	b0 03		bcs $27a9			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.27a6	4c cc 2e	jmp $2ecc			jmp 	MInt32Or 							; else do it as integer.
.27a9					_IsFPOperation:
.27a9	8a		txa				txa 								; call the relevant fp routine
.27aa	a2 08		ldx #$08		ldx	#8
.27ac	20 e1 19	jsr $19e1		jsr	floatingpointHandler
.27af	aa		tax				tax
.27b0	60		rts				rts
.27b1					AndHandler:
.27b1	20 ed 28	jsr $28ed			jsr 	DereferenceTwo
.27b4	20 f0 26	jsr $26f0			jsr 	BinaryProcess 				; check to see if either is float
.27b7	b0 03		bcs $27bc			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.27b9	4c b3 2e	jmp $2eb3			jmp 	MInt32And 							; else do it as integer.
.27bc					_IsFPOperation:
.27bc	8a		txa				txa 								; call the relevant fp routine
.27bd	a2 08		ldx #$08		ldx	#8
.27bf	20 e1 19	jsr $19e1		jsr	floatingpointHandler
.27c2	aa		tax				tax
.27c3	60		rts				rts
.27c4					ShlHandler:
.27c4	20 ed 28	jsr $28ed			jsr 	DereferenceTwo
.27c7	20 f0 26	jsr $26f0			jsr 	BinaryProcess 				; check to see if either is float
.27ca	b0 03		bcs $27cf			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.27cc	4c 45 28	jmp $2845			jmp 	Mint32ShiftLeftX 							; else do it as integer.
.27cf					_IsFPOperation:
.27cf	8a		txa				txa 								; call the relevant fp routine
.27d0	a2 08		ldx #$08		ldx	#8
.27d2	20 e1 19	jsr $19e1		jsr	floatingpointHandler
.27d5	aa		tax				tax
.27d6	60		rts				rts
.27d7					ShrHandler:
.27d7	20 ed 28	jsr $28ed			jsr 	DereferenceTwo
.27da	20 f0 26	jsr $26f0			jsr 	BinaryProcess 				; check to see if either is float
.27dd	b0 03		bcs $27e2			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.27df	4c 48 28	jmp $2848			jmp 	MInt32ShiftRightX 							; else do it as integer.
.27e2					_IsFPOperation:
.27e2	8a		txa				txa 								; call the relevant fp routine
.27e3	a2 08		ldx #$08		ldx	#8
.27e5	20 e1 19	jsr $19e1		jsr	floatingpointHandler
.27e8	aa		tax				tax
.27e9	60		rts				rts
.27ea					WordRefHandler:
.27ea	20 ed 28	jsr $28ed			jsr 	DereferenceTwo
.27ed	20 f0 26	jsr $26f0			jsr 	BinaryProcess 				; check to see if either is float
.27f0	b0 03		bcs $27f5			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.27f2	4c 37 28	jmp $2837			jmp 	MInt32WordIndirect 							; else do it as integer.
.27f5					_IsFPOperation:
.27f5	8a		txa				txa 								; call the relevant fp routine
.27f6	a2 08		ldx #$08		ldx	#8
.27f8	20 e1 19	jsr $19e1		jsr	floatingpointHandler
.27fb	aa		tax				tax
.27fc	60		rts				rts
.27fd					ByteRefHandler:
.27fd	20 ed 28	jsr $28ed			jsr 	DereferenceTwo
.2800	20 f0 26	jsr $26f0			jsr 	BinaryProcess 				; check to see if either is float
.2803	b0 03		bcs $2808			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.2805	4c 3b 28	jmp $283b			jmp 	MInt32ByteIndirect 							; else do it as integer.
.2808					_IsFPOperation:
.2808	8a		txa				txa 								; call the relevant fp routine
.2809	a2 08		ldx #$08		ldx	#8
.280b	20 e1 19	jsr $19e1		jsr	floatingpointHandler
.280e	aa		tax				tax
.280f	60		rts				rts
.2810					PowerHandler:
.2810	20 ed 28	jsr $28ed			jsr 	DereferenceTwo
.2813	20 f0 26	jsr $26f0			jsr 	BinaryProcess 				; check to see if either is float
.2816	b0 03		bcs $281b			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.2818	4c 23 28	jmp $2823			jmp 	PowerInteger 							; else do it as integer.
.281b					_IsFPOperation:
.281b	8a		txa				txa 								; call the relevant fp routine
.281c	a2 16		ldx #$16		ldx	#22
.281e	20 e1 19	jsr $19e1		jsr	floatingpointHandler
.2821	aa		tax				tax
.2822	60		rts				rts
.2823					PowerInteger:
.2823	20 0a 27	jsr $270a			jsr 	BPMakeBothFloat				; make them float.
.2826	8a		txa				txa
.2827	a2 16		ldx #$16		ldx	#22
.2829	20 e1 19	jsr $19e1		jsr	floatingpointHandler
.282c	a2 12		ldx #$12		ldx	#18
.282e	20 e1 19	jsr $19e1		jsr	floatingpointHandler
.2831	aa		tax				tax
.2832	a9 00		lda #$00			lda 	#0 							; make type integer
.2834	95 48		sta $48,x			sta 	esType,x
.2836	60		rts				rts
.2837					Mint32WordIndirect:
.2837	a9 80		lda #$80	 		lda 	#$80 				 		; word reference type (bit 7 set)
.2839	d0 02		bne $283d			bne 	Min32Indirect
.283b					Mint32ByteIndirect:
.283b	a9 a0		lda #$a0			lda 	#$A0 						; byte reference type (bit 7, bit 5 set)
.283d					Min32Indirect:
.283d	48		pha				pha 								; save the indirection
.283e	20 42 30	jsr $3042			jsr 	MInt32Add 					; add a!b a?b
.2841	68		pla				pla 								; and set the type to reference.
.2842	95 48		sta $48,x			sta 	esType,x 	 				; so a!b => a+b and it's a reference....
.2844	60		rts				rts
.2845					Mint32ShiftLeftX:
.2845	18		clc				clc 								; CC shift left
.2846	90 01		bcc $2849			bcc 	Mint32Shift
.2848					Mint32ShiftRightX:
.2848	38		sec				sec 								; CS shift right
.2849					Mint32Shift:
.2849	08		php				php 								; save carry flag on stack.
.284a	b5 59		lda $59,x			lda 	esInt1+1,x 					; if shift >= 32 then it is zero.
.284c	15 61		ora $61,x			ora 	esInt2+1,x
.284e	15 69		ora $69,x			ora 	esInt3+1,x
.2850	d0 1e		bne $2870			bne 	_MShiftZero
.2852	b5 51		lda $51,x			lda 	esInt0+1,x
.2854	c9 20		cmp #$20			cmp 	#32
.2856	b0 18		bcs $2870			bcs 	_MShiftZero
.2858					_MShiftLoop:
.2858	b5 51		lda $51,x			lda 	esInt0+1,x 					; check count is zero
.285a	f0 12		beq $286e			beq 	_MShiftExit
.285c	d6 51		dec $51,x			dec 	esInt0+1,x
.285e	28		plp				plp 								; restore and save carry
.285f	08		php				php
.2860	90 06		bcc $2868			bcc 	_MShiftLeft 				; and shift left/right accordingly.
.2862	20 7c 31	jsr $317c			jsr 	Mint32ShiftRight
.2865	4c 58 28	jmp $2858			jmp 	_MShiftLoop
.2868					_MShiftLeft:
.2868	20 73 31	jsr $3173			jsr 	Mint32ShiftLeft
.286b	4c 58 28	jmp $2858			jmp 	_MShiftLoop
.286e					_MShiftExit:
.286e	28		plp				plp	 								; throw saved carry and exit
.286f	60		rts				rts
.2870					_MShiftZero:
.2870	4c 5e 31	jmp $315e			jmp 	MInt32False 				; return 0 as shifted >= 32 times.

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/binary/compare.asm

.2873					PerformComparison:
.2873	20 ed 28	jsr $28ed			jsr 	DereferenceTwo 				; make both values.
.2876	b5 48		lda $48,x			lda 	esType,x 					; check for two strings.
.2878	35 49		and $49,x			and 	esType+1,x
.287a	0a		asl a				asl 	a 							; bit 7 set if both bit 6s were set.
.287b	30 1d		bmi $289a			bmi 	_PCIsString
.287d	b5 48		lda $48,x			lda 	esType,x 					; check either is floating point.
.287f	15 49		ora $49,x			ora 	esType+1,x
.2881	0a		asl a				asl 	a 							; shift bit 6 (string) to bit 7, mixed types
.2882	30 22		bmi $28a6			bmi 	_PCError
.2884	29 02		and #$02			and 	#$02 						; because of ASL, check type in bit 0
.2886	f0 0f		beq $2897			beq 	_PCIsInteger 				; if not two integers, e.g. 1 of the bits is set
.2888	20 0a 27	jsr $270a			jsr 	BPMakeBothFloat 			; make both float
.288b	8a		txa				txa
.288c	a2 04		ldx #$04		ldx	#4
.288e	20 e1 19	jsr $19e1		jsr	floatingpointHandler
.2891	86 32		stx $32				stx 	tempShort 					; save result
.2893	aa		tax				tax
.2894	a5 32		lda $32				lda 	tempShort
.2896	60		rts				rts
.2897					_PCIsInteger:
.2897	4c fe 2e	jmp $2efe			jmp 	MInt32Compare
.289a					_PCIsString:
.289a	8a		txa				txa 								; A has SP
.289b	a2 08		ldx #$08		ldx	#8
.289d	20 02 35	jsr $3502		jsr	stringHandler
.28a0	86 32		stx $32				stx 	tempShort 					; save result
.28a2	aa		tax				tax 								; put SP back in X and get result.
.28a3	a5 32		lda $32				lda 	tempShort
.28a5	60		rts				rts
.28a6					_PCError:
.28a6	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.28a8	20 e0 14	jsr $14e0		jsr	errorHandler
.28ab					CompareEquals:
.28ab	20 73 28	jsr $2873			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.28ae	c9 00		cmp #$00			cmp 	#$00 						; and we do something if it is = or <> a value.
.28b0	f0 35		beq $28e7			beq  	CompareTrue
.28b2	4c ea 28	jmp $28ea			jmp 	CompareFalse
.28b5					CompareLess:
.28b5	20 73 28	jsr $2873			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.28b8	c9 ff		cmp #$ff			cmp 	#$FF 						; and we do something if it is = or <> a value.
.28ba	f0 2b		beq $28e7			beq  	CompareTrue
.28bc	4c ea 28	jmp $28ea			jmp 	CompareFalse
.28bf					CompareGreater:
.28bf	20 73 28	jsr $2873			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.28c2	c9 01		cmp #$01			cmp 	#$01 						; and we do something if it is = or <> a value.
.28c4	f0 21		beq $28e7			beq  	CompareTrue
.28c6	4c ea 28	jmp $28ea			jmp 	CompareFalse
.28c9					CompareNotEquals:
.28c9	20 73 28	jsr $2873			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.28cc	c9 00		cmp #$00			cmp 	#$00 						; and we do something if it is = or <> a value.
.28ce	d0 17		bne $28e7			bne  	CompareTrue
.28d0	4c ea 28	jmp $28ea			jmp 	CompareFalse
.28d3					CompareGreaterEq:
.28d3	20 73 28	jsr $2873			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.28d6	c9 ff		cmp #$ff			cmp 	#$FF 						; and we do something if it is = or <> a value.
.28d8	d0 0d		bne $28e7			bne  	CompareTrue
.28da	4c ea 28	jmp $28ea			jmp 	CompareFalse
.28dd					CompareLessEq:
.28dd	20 73 28	jsr $2873			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.28e0	c9 01		cmp #$01			cmp 	#$01 						; and we do something if it is = or <> a value.
.28e2	d0 03		bne $28e7			bne  	CompareTrue
.28e4	4c ea 28	jmp $28ea			jmp 	CompareFalse
.28e7					CompareTrue:
.28e7	4c 5a 31	jmp $315a			jmp 	MInt32True
.28ea					CompareFalse:
.28ea	4c 5e 31	jmp $315e			jmp 	MInt32False

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/dereference.asm

.28ed					DereferenceTwo:
.28ed	e8		inx				inx
.28ee	20 f2 28	jsr $28f2			jsr 	DereferenceOne
.28f1	ca		dex				dex
.28f2					DereferenceOne:
.28f2	b5 48		lda $48,x			lda 	esType,x
.28f4	10 3d		bpl $2933			bpl 	_DRNotReference 			; is it a reference ? if not, we don't need to do anything
.28f6	4a		lsr a				lsr 	a 							; do float dereference if bit 0 set.
.28f7	b0 3b		bcs $2934			bcs 	_DRFloatDeReference
.28f9	98		tya				tya
.28fa	48		pha				pha
.28fb	b5 50		lda $50,x			lda 	esInt0,x 					; copy address to temp0
.28fd	85 2a		sta $2a				sta 	temp0
.28ff	b5 58		lda $58,x			lda 	esInt1,x
.2901	85 2b		sta $2b				sta 	temp0+1
.2903	a9 00		lda #$00			lda 	#0 							; clear esInt1..3
.2905	95 58		sta $58,x			sta 	esInt1,x
.2907	95 60		sta $60,x			sta 	esInt2,x
.2909	95 68		sta $68,x			sta 	esInt3,x
.290b	b5 48		lda $48,x			lda 	esType,x 					; get the type byte.
.290d	29 60		and #$60			and 	#$60 						; get string flag ($40) and byte flag ($20)
.290f	0a		asl a				asl 	a 							; now string ($80) byte ($40)
.2910	30 0d		bmi $291f			bmi 	_DeRefString 				; string, 2 bytes only
.2912	d0 11		bne $2925			bne 	_DeRefByte 					; byte 1 byte only
.2914					_DeRefLong:
.2914	a0 03		ldy #$03			ldy 	#3
.2916	b1 2a		lda ($2a),y			lda 	(temp0),y
.2918	95 68		sta $68,x			sta 	esInt3,x
.291a	88		dey				dey
.291b	b1 2a		lda ($2a),y			lda 	(temp0),y
.291d	95 60		sta $60,x			sta 	esInt2,x
.291f					_DeRefString:
.291f	a0 01		ldy #$01			ldy 	#1
.2921	b1 2a		lda ($2a),y			lda 	(temp0),y
.2923	95 58		sta $58,x			sta 	esInt1,x
.2925					_DeRefByte:
.2925	a0 00		ldy #$00			ldy 	#0
.2927	b1 2a		lda ($2a),y			lda 	(temp0),y
.2929	95 50		sta $50,x			sta 	esInt0,x
.292b	b5 48		lda $48,x			lda 	esType,x 					; clear byte and deref bits.
.292d	29 40		and #$40			and 	#$40
.292f	95 48		sta $48,x			sta 	esType,x
.2931	68		pla				pla
.2932	a8		tay				tay
.2933					_DRNotReference
.2933	60		rts				rts
.2934					_DRFloatDereference:
.2934	20 c4 1e	jsr $1ec4			jsr 	TOSToTemp0 					; address to deref in temp0
.2937	8a		txa				txa
.2938	a2 1c		ldx #$1c		ldx	#28
.293a	20 e1 19	jsr $19e1		jsr	floatingpointHandler
.293d	aa		tax				tax
.293e	a9 01		lda #$01			lda 	#$01 						; type to FP (float)
.2940	95 48		sta $48,x			sta 	esType,x
.2942	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/evaluate.asm

.2943					EvaluateLevel:
.2943	e0 08		cpx #$08			cpx 	#StackSize 					; check stack overflow
.2945	b0 1e		bcs $2965			bcs 	_ELStack
.2947	48		pha				pha 								; save precedence level.
.2948	a9 00		lda #$00			lda 	#0 							; zero the current stack level.
.294a	95 50		sta $50,x			sta 	esInt0,x
.294c	95 58		sta $58,x			sta 	esInt1,x
.294e	95 60		sta $60,x			sta 	esInt2,x
.2950	95 68		sta $68,x			sta 	esInt3,x
.2952	95 48		sta $48,x			sta 	esType,x 					; zero the type (integer value)
.2954	b1 28		lda ($28),y			lda 	(codePtr),y	 				; look at first token/character
.2956	30 26		bmi $297e			bmi 	_ELIsToken 					; if -ve could be string, float, or unary function.
.2958	0a		asl a				asl 	a 							; if 00-3F then will now be PL and it's a variable.
.2959	30 0f		bmi $296a			bmi 	_ELIsConstant 				; 40-7F will be -ve and that's an integer constant.
.295b	8a		txa				txa 								; stack level in X
.295c	a2 00		ldx #$00		ldx	#0
.295e	20 d3 40	jsr $40d3		jsr	variableHandler
.2961	aa		tax				tax
.2962	4c a7 29	jmp $29a7			jmp		_ELHasTerm
.2965					_ELStack:
.2965	a2 23		ldx #$23			ldx 	#ErrorID_NumStack
.2967	20 e0 14	jsr $14e0		jsr	errorHandler
.296a					_ELIsConstant:
.296a	4a		lsr a				lsr 	a 							; get the value back
.296b	29 3f		and #$3f			and 	#$3F 						; force into range 0-63
.296d	95 50		sta $50,x			sta 	esInt0,x 					; and put in LSB.
.296f					_ELCheckNext:
.296f	c8		iny				iny 								; look at next
.2970	b1 28		lda ($28),y			lda 	(codePtr),y
.2972	49 40		eor #$40			eor 	#$40 						; shift around so 40-7F => 00-3F
.2974	c9 40		cmp #$40			cmp 	#$40 						; out of range ?
.2976	b0 2f		bcs $29a7			bcs 	_ELHasTerm 					; done getting the constant.
.2978	20 40 2a	jsr $2a40			jsr 	ELShiftByteIn 				; shift byte into position.
.297b	4c 6f 29	jmp $296f			jmp 	_ELCheckNext
.297e					_ELIsToken:
.297e	c9 85		cmp #$85			cmp 	#TOK_STR 					; handle strings.
.2980	f0 0f		beq $2991			beq 	_ELIsString
.2982	c9 84		cmp #$84			cmp 	#TOK_FPC 					; if no, then check unary.
.2984	d0 5f		bne $29e5			bne 	_ELCheckUnary
.2986	8a		txa				txa 								; put X into A
.2987	c8		iny				iny 								; skip over the float marker
.2988	a2 18		ldx #$18		ldx	#24
.298a	20 e1 19	jsr $19e1		jsr	floatingpointHandler
.298d	aa		tax				tax 								; restore X
.298e	4c a7 29	jmp $29a7			jmp 	_ELHasTerm
.2991					_ELIsString:
.2991	98		tya				tya 								; address of string is codePtr+y+1
.2992	38		sec				sec
.2993	65 28		adc $28				adc 	codePtr
.2995	95 50		sta $50,x			sta 	esInt0,x
.2997	a5 29		lda $29				lda 	codePtr+1
.2999	69 00		adc #$00			adc 	#0
.299b	95 58		sta $58,x			sta 	esInt1,x
.299d	a9 40		lda #$40			lda 	#$40 						; set type to string value
.299f	95 48		sta $48,x			sta 	esType,x
.29a1	c8		iny				iny 								; skip over string.
.29a2	98		tya				tya
.29a3	38		sec				sec									; +1 for the length itself.
.29a4	71 28		adc ($28),y			adc 	(codePtr),y
.29a6	a8		tay				tay 								; and fall through to term loop code.
.29a7					_ELHasTerm:
.29a7	b1 28		lda ($28),y			lda 	(codePtr),y
.29a9	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; check in the correct range for binary tokens.
.29ab	90 04		bcc $29b1			bcc 	_ELPopExit
.29ad	c9 99		cmp #$99			cmp 	#TOK_STRUCTST
.29af	90 02		bcc $29b3			bcc 	_ELHasBinaryTerm
.29b1					_ELPopExit:
.29b1	68		pla				pla
.29b2					_ELExit:
.29b2	60		rts				rts
.29b3					_ELHasBinaryTerm:
.29b3	84 32		sty $32				sty 	tempShort 					; save position
.29b5	a8		tay				tay 								; use token as an index and get the precedence.
.29b6	b9 e8 29	lda $29e8,y			lda 	ELBinaryOperatorInfo-TOK_BINARYST,y
.29b9	a4 32		ldy $32				ldy 	tempShort 					; restore Y
.29bb	85 32		sta $32				sta 	tempShort 					; save precedence in memory.
.29bd	68		pla				pla 								; restore current level.
.29be	c5 32		cmp $32				cmp 	tempShort 					; if current >= operator then exit
.29c0	b0 f0		bcs $29b2			bcs 	_ELExit
.29c2	48		pha				pha 								; save current level back on the stack.
.29c3	b1 28		lda ($28),y			lda 	(codePtr),y 				; save the binary operator on the stack and skip it.
.29c5	48		pha				pha
.29c6	c8		iny				iny
.29c7	e8		inx				inx 								; calculate the RHS at the operator precedence.
.29c8	a5 32		lda $32				lda 	tempShort
.29ca	20 43 29	jsr $2943			jsr 	EvaluateLevel
.29cd	ca		dex				dex
.29ce	68		pla				pla 								; get the operator back out.
.29cf					_ELExecuteA:
.29cf	86 32		stx $32				stx 	tempShort 					; upload the vectors. Would be nice to use jmp (aaaa,x)
.29d1	0a		asl a				asl 	a 							; but not practical. May use push/rts later.
.29d2	aa		tax				tax
.29d3	bd 0a 26	lda $260a,x			lda 	Group0Vectors,x
.29d6	85 2a		sta $2a				sta 	temp0
.29d8	bd 0b 26	lda $260b,x			lda 	Group0Vectors+1,x
.29db	85 2b		sta $2b				sta 	temp0+1
.29dd	a6 32		ldx $32				ldx 	tempShort
.29df	20 2c 2a	jsr $2a2c			jsr 	_ELCallTemp0
.29e2	4c a7 29	jmp $29a7			jmp 	_ELHasTerm 					; and loop back round.
.29e5					_ELCheckUnary:
.29e5	c8		iny				iny 								; skip over token.
.29e6	c9 90		cmp #$90			cmp 	#TKW_MINUS 					; is it - term
.29e8	f0 19		beq $2a03			beq 	_ELMinus
.29ea	c9 97		cmp #$97			cmp 	#TKW_PLING 					; is it ! or ? term
.29ec	f0 2c		beq $2a1a			beq 	_ELIndirect
.29ee	c9 98		cmp #$98			cmp 	#TKW_QMARK
.29f0	f0 28		beq $2a1a			beq 	_ELIndirect
.29f2	c9 83		cmp #$83			cmp 	#TOK_SHIFT3 				; is it the unary extension.
.29f4	f0 39		beq $2a2f			beq 	_ELExtension
.29f6	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST 				; must be TOK_UNARYST ... TOK_TOKENS
.29f8	90 04		bcc $29fe			bcc 	_ELUSyntax
.29fa	c9 c9		cmp #$c9			cmp 	#TOK_TOKENS
.29fc	90 d1		bcc $29cf			bcc 	_ELExecuteA 				; if so do that token.
.29fe					_ELUSyntax:
.29fe	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.2a00	20 e0 14	jsr $14e0		jsr	errorHandler
.2a03					_ELMinus:
.2a03	20 95 2a	jsr $2a95			jsr 	EvaluateNumericTerm 		; get a number to negate.
.2a06	b5 48		lda $48,x			lda 	esType,x 					; is it integer
.2a08	f0 0a		beq $2a14			beq 	_ELMinusInteger
.2a0a	8a		txa				txa
.2a0b	a2 0c		ldx #$0c		ldx	#12
.2a0d	20 e1 19	jsr $19e1		jsr	floatingpointHandler
.2a10	aa		tax				tax
.2a11	4c a7 29	jmp $29a7			jmp 	_ELHasTerm
.2a14					_ELMinusInteger:
.2a14	20 18 31	jsr $3118			jsr 	MInt32Negate 				; do int negate
.2a17	4c a7 29	jmp $29a7			jmp 	_ELHasTerm
.2a1a					_ELIndirect:
.2a1a	48		pha				pha 								; save what we want (TKW_QMARK TWK_PLING)
.2a1b	20 9e 2a	jsr $2a9e			jsr 	EvaluateIntegerTerm 		; integer address
.2a1e	68		pla				pla
.2a1f	49 97		eor #$97			eor 	#TKW_PLING 					; now $00 if !
.2a21	f0 02		beq $2a25			beq 	_ELHaveModifier
.2a23	a9 20		lda #$20			lda 	#$20 						; now $00 if !, $20 if ?
.2a25					_ELHaveModifier:
.2a25	09 80		ora #$80			ora 	#$80						; make it the appropriate reference.
.2a27	95 48		sta $48,x			sta 	esType,x 					; $80 for ! $A0 for ?
.2a29	4c a7 29	jmp $29a7			jmp 	_ELHasTerm
.2a2c					_ELCallTemp0:
.2a2c	6c 2a 00	jmp ($002a)			jmp 	(temp0)
.2a2f					_ELExtension:
.2a2f	8a		txa				txa 								; stack pos in A
.2a30	20 15 18	jsr $1815		jsr	extensionHandler
.2a33	aa		tax				tax 								; restore stack
.2a34	4c a7 29	jmp $29a7			jmp 	_ELHasTerm
.2a37					UnaryParenthesis:
.2a37	a9 00		lda #$00			lda 	#0 							; ( is a unary function ....
.2a39	20 43 29	jsr $2943			jsr 	EvaluateLevel
.2a3c	20 d1 31	jsr $31d1			jsr 	CheckRightParen 			; check for )
.2a3f	60		rts				rts
.2a40					ELShiftByteIn:
.2a40	48		pha				pha 								; save bits to shift in.
.2a41	b5 68		lda $68,x			lda 	esInt3,x 					; save top most byte
.2a43	48		pha				pha
.2a44	b5 60		lda $60,x			lda 	esInt2,x 					; shift everything left 8 bits
.2a46	95 68		sta $68,x			sta 	esInt3,x
.2a48	b5 58		lda $58,x			lda 	esInt1,x
.2a4a	95 60		sta $60,x			sta 	esInt2,x
.2a4c	b5 50		lda $50,x			lda 	esInt0,x
.2a4e	95 58		sta $58,x			sta 	esInt1,x
.2a50	a9 00		lda #$00			lda 	#0
.2a52	95 50		sta $50,x			sta 	esInt0,x
.2a54	68		pla				pla 								; now A:TOS is a 5 byte register, shift right twice.
.2a55	29 03		and #$03			and 	#3 							; only want lower 2 bits
.2a57	09 04		ora #$04			ora 	#4  						; set bit 2 - when 1 we are done
.2a59					_ELShiftLoop:
.2a59	4a		lsr a				lsr 	a
.2a5a	76 68		ror $68,x			ror 	esInt3,x
.2a5c	76 60		ror $60,x			ror 	esInt2,x
.2a5e	76 58		ror $58,x			ror 	esInt1,x
.2a60	76 50		ror $50,x			ror 	esInt0,x
.2a62	c9 01		cmp #$01			cmp 	#1
.2a64	d0 f3		bne $2a59			bne 	_ELShiftLoop
.2a66	68		pla				pla 								; get original 6 bit value and OR in.
.2a67	29 3f		and #$3f			and 	#$3F
.2a69	15 50		ora $50,x			ora 	esInt0,x
.2a6b	95 50		sta $50,x			sta 	esInt0,x
.2a6d	60		rts				rts
.2a6e					ELBinaryOperatorInfo:

;******  Processing file: main/evaluate/../../generated/binarystructinfo.inc

>2a6e	01					.byte	$01			; $86 and
>2a6f	01					.byte	$01			; $87 or
>2a70	01					.byte	$01			; $88 xor
>2a71	02					.byte	$02			; $89 >=
>2a72	02					.byte	$02			; $8a <=
>2a73	02					.byte	$02			; $8b >
>2a74	02					.byte	$02			; $8c <
>2a75	02					.byte	$02			; $8d =
>2a76	02					.byte	$02			; $8e <>
>2a77	03					.byte	$03			; $8f +
>2a78	03					.byte	$03			; $90 -
>2a79	04					.byte	$04			; $91 >>
>2a7a	04					.byte	$04			; $92 <<
>2a7b	04					.byte	$04			; $93 *
>2a7c	04					.byte	$04			; $94 /
>2a7d	04					.byte	$04			; $95 mod
>2a7e	05					.byte	$05			; $96 ^
>2a7f	06					.byte	$06			; $97 !
>2a80	06					.byte	$06			; $98 ?
>2a81	82					.byte	$82			; $99 repeat
>2a82	82					.byte	$82			; $9a while
>2a83	82					.byte	$82			; $9b for
>2a84	82					.byte	$82			; $9c if
>2a85	82					.byte	$82			; $9d defproc
>2a86	80					.byte	$80			; $9e until
>2a87	80					.byte	$80			; $9f wend
>2a88	80					.byte	$80			; $a0 next
>2a89	80					.byte	$80			; $a1 then
>2a8a	80					.byte	$80			; $a2 endif
>2a8b	80					.byte	$80			; $a3 endproc

;******  Return to file: main/evaluate/evaluate.asm


;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/support.asm

.2a8c					EvaluateTerm:
.2a8c	a9 0f		lda #$0f			lda 	#15 						; no binary operator has this high a precedence.
.2a8e	20 43 29	jsr $2943			jsr 	EvaluateLevel
.2a91	20 f2 28	jsr $28f2			jsr 	DereferenceOne
.2a94	60		rts				rts
.2a95					EvaluateNumericTerm:
.2a95	20 8c 2a	jsr $2a8c			jsr 	EvaluateTerm
.2a98	b5 48		lda $48,x			lda 	esType,x
.2a9a	0a		asl a				asl 	a 							; see if it's a string.
.2a9b	30 09		bmi $2aa6			bmi 	ENTType
.2a9d	60		rts				rts
.2a9e					EvaluateIntegerTerm:
.2a9e	20 8c 2a	jsr $2a8c			jsr 	EvaluateTerm
.2aa1	b5 48		lda $48,x			lda 	esType,x
.2aa3	d0 01		bne $2aa6			bne 	ENTType
.2aa5	60		rts				rts
.2aa6					ENTType:
.2aa6	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.2aa8	20 e0 14	jsr $14e0		jsr	errorHandler
.2aab					EvaluateRoot:
.2aab	a2 00		ldx #$00			ldx 	#0
.2aad					Evaluate:
.2aad	a9 00		lda #$00			lda 	#0
.2aaf	20 43 29	jsr $2943			jsr 	EvaluateLevel
.2ab2	20 f2 28	jsr $28f2			jsr 	DereferenceOne
.2ab5	60		rts				rts
.2ab6					EvaluateNumeric:
.2ab6	20 ad 2a	jsr $2aad			jsr 	Evaluate
.2ab9	b5 48		lda $48,x			lda 	esType,x
.2abb	0a		asl a				asl 	a 							; see if it's a string.
.2abc	30 e8		bmi $2aa6			bmi 	ENTType
.2abe	4a		lsr a				lsr 	a 							; shift float flag into carry.
.2abf	4a		lsr a				lsr 	a
.2ac0	60		rts				rts
.2ac1					EvaluateString:
.2ac1	20 ad 2a	jsr $2aad			jsr 	Evaluate
.2ac4	b5 48		lda $48,x			lda 	esType,x
.2ac6	0a		asl a				asl 	a 							; see if it's a string.
.2ac7	10 dd		bpl $2aa6			bpl 	ENTType
.2ac9	60		rts				rts
.2aca					EvaluateRootInteger:
.2aca	a2 00		ldx #$00			ldx 	#0
.2acc					EvaluateInteger:
.2acc	20 ad 2a	jsr $2aad			jsr 	Evaluate
.2acf	b5 48		lda $48,x			lda 	esType,x
.2ad1	d0 d3		bne $2aa6			bne 	ENTType
.2ad3	60		rts				rts
.2ad4					EvaluateSmallInteger:
.2ad4	20 cc 2a	jsr $2acc			jsr 	EvaluateInteger
.2ad7	b5 58		lda $58,x			lda 	esInt1,x
.2ad9	15 60		ora $60,x			ora 	esInt2,x
.2adb	15 68		ora $68,x			ora 	esInt3,x
.2add	d0 03		bne $2ae2			bne 	_ESIValue
.2adf	b5 50		lda $50,x			lda 	esInt0,x
.2ae1	60		rts				rts
.2ae2					_ESIValue:
.2ae2	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.2ae4	20 e0 14	jsr $14e0		jsr	errorHandler
.2ae7					LinkEvaluate:
.2ae7	aa		tax				tax
.2ae8	20 ad 2a	jsr $2aad			jsr 	Evaluate
.2aeb	8a		txa				txa
.2aec	60		rts				rts
.2aed					LinkEvaluateTerm:
.2aed	aa		tax				tax
.2aee	20 8c 2a	jsr $2a8c			jsr 	EvaluateTerm
.2af1	8a		txa				txa
.2af2	60		rts				rts
.2af3					LinkEvaluateInteger:
.2af3	aa		tax				tax
.2af4	20 cc 2a	jsr $2acc			jsr 	EvaluateInteger
.2af7	8a		txa				txa
.2af8	60		rts				rts
.2af9					LinkEvaluateSmallInt:
.2af9	aa		tax				tax
.2afa	20 d4 2a	jsr $2ad4			jsr 	EvaluateSmallInteger
.2afd	8a		txa				txa
.2afe	60		rts				rts
.2aff					EvaluateReference:
.2aff	ad 7f 2a	lda $2a7f			lda 	ELBinaryOperatorInfo+TKW_PLING-TOK_BINARYST
.2b02	38		sec				sec 								; sub 1 to allow a!x b?x to work.
.2b03	e9 01		sbc #$01			sbc 	#1
.2b05	20 43 29	jsr $2943			jsr 	EvaluateLevel
.2b08	b5 48		lda $48,x			lda 	esType,x
.2b0a	10 01		bpl $2b0d			bpl 	_ERFail
.2b0c	60		rts				rts
.2b0d					_ERFail:
.2b0d	a2 0b		ldx #$0b			ldx 	#ErrorID_NoReference
.2b0f	20 e0 14	jsr $14e0		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary/convert.asm

.2b12					Event_Str:
.2b12	20 b6 2a	jsr $2ab6			jsr 	EvaluateNumeric 			; get a number.
.2b15	b5 48		lda $48,x			lda 	esType,x 					; is it floating point
.2b17	d0 13		bne $2b2c			bne 	_ESFloat
.2b19	20 6f 2b	jsr $2b6f			jsr 	ConvertGetBase 				; get base, or default.
.2b1c	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.2b1e	85 2a		sta $2a				sta 	temp0
.2b20	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.2b22	85 2b		sta $2b				sta 	1+(temp0)
.2b24	b5 51		lda $51,x			lda 	esInt0+1,x 					; get the base
.2b26	20 b4 30	jsr $30b4			jsr 	MInt32ToString 				; convert to string.
.2b29	4c 39 2b	jmp $2b39			jmp 	_ESCloneExit 				; clone and exit.
.2b2c					_ESFloat:
.2b2c	20 d1 31	jsr $31d1			jsr 	CheckRightParen 			; check closing )
.2b2f	20 c4 1e	jsr $1ec4			jsr 	TOSToTemp0 					; string address in temp0, goes here.
.2b32	8a		txa				txa
.2b33	a2 14		ldx #$14		ldx	#20
.2b35	20 e1 19	jsr $19e1		jsr	floatingpointHandler
.2b38	aa		tax				tax
.2b39					_ESCloneExit:
.2b39	8a		txa				txa
.2b3a	a2 02		ldx #$02		ldx	#2
.2b3c	20 02 35	jsr $3502		jsr	stringHandler
.2b3f	aa		tax				tax
.2b40	60		rts				rts
.2b41					UnaryVal:
.2b41	38		sec				sec 								; Carry set to return value
.2b42	b0 01		bcs $2b45			bcs 	ValueMain
.2b44					UnaryIsVal:
.2b44	18		clc				clc									; Carry clear to return legitimacy
.2b45					ValueMain:
.2b45	08		php				php 								; save results (CS is value, CC is validation)
.2b46	20 c1 2a	jsr $2ac1			jsr 	EvaluateString
.2b49	20 6f 2b	jsr $2b6f			jsr 	ConvertGetBase 				; get base, if any.
.2b4c	98		tya				tya
.2b4d	48		pha				pha
.2b4e	20 c4 1e	jsr $1ec4			jsr 	TOSToTemp0 					; string address in temp0, goes here.
.2b51	b5 51		lda $51,x			lda 	esInt0+1,x 					; get the base
.2b53	29 7f		and #$7f			and 	#$7F 						; ignore the sign bit.
.2b55	20 cc 2f	jsr $2fcc			jsr 	MInt32FromString 			; convert it back from a string.
.2b58	b0 0c		bcs $2b66			bcs 	_VMSuccess 					; successfully converted.
.2b5a	b5 51		lda $51,x			lda 	esInt0+1,x 					; is base the default
.2b5c	c9 8a		cmp #$8a			cmp 	#$80+10 					; if no, then it is integer only.
.2b5e	f0 00		beq $2b60			beq 	_VMFailed 	 				; so we failed.
.2b60					_VMFailed:
.2b60	68		pla				pla
.2b61	a8		tay				tay
.2b62	28		plp				plp
.2b63	4c 5e 31	jmp $315e			jmp 	MInt32False 				; return 0 whatever.
.2b66					_VMSuccess:
.2b66	68		pla				pla
.2b67	a8		tay				tay
.2b68	28		plp				plp 								; if CS the it was val() so we want the value.
.2b69	b0 03		bcs $2b6e			bcs 	_VMExit
.2b6b	4c 5a 31	jmp $315a			jmp 	MInt32True 					; otherwise return true as successful.
.2b6e					_VMExit:
.2b6e	60		rts				rts
.2b6f					ConvertGetBase:
.2b6f	a9 8a		lda #$8a			lda 	#10+$80 					; default base 10 signed.
.2b71	95 51		sta $51,x			sta 	esInt0+1,x
.2b73	b1 28		lda ($28),y			lda 	(codePtr),y 				; check for ,base)
.2b75	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.2b77	d0 0e		bne $2b87			bne 	_CGBDone 					; not found, should be )
.2b79	e8		inx				inx 								; next level
.2b7a	c8		iny				iny 								; skip comma.
.2b7b	20 d4 2a	jsr $2ad4			jsr 	EvaluateSmallInteger		; evaluate the base.
.2b7e	ca		dex				dex
.2b7f	c9 02		cmp #$02			cmp 	#2 							; base range is 2..16
.2b81	90 08		bcc $2b8b			bcc 	_CGBValue 					; (it should work as high as 37)
.2b83	c9 11		cmp #$11			cmp 	#17
.2b85	b0 04		bcs $2b8b			bcs 	_CGBValue
.2b87					_CGBDone:
.2b87	20 d1 31	jsr $31d1			jsr 	CheckRightParen
.2b8a	60		rts				rts
.2b8b					_CGBValue:
.2b8b	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.2b8d	20 e0 14	jsr $14e0		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary/event.asm

.2b90					EventFunction:
.2b90	20 ff 2a	jsr $2aff			jsr 	EvaluateReference			; get the variable reference that tracks the event
.2b93	b5 48		lda $48,x			lda 	esType,x
.2b95	c9 80		cmp #$80			cmp 	#$80 						; must be integer reference
.2b97	d0 5b		bne $2bf4			bne 	_EFType
.2b99	20 de 31	jsr $31de			jsr 	CheckComma
.2b9c	e8		inx				inx
.2b9d	20 cc 2a	jsr $2acc			jsr 	EvaluateInteger		 		; get the elapsed time between firing.
.2ba0	20 d1 31	jsr $31d1			jsr 	CheckRightParen 			; finish off with the right bracket
.2ba3	ca		dex				dex
.2ba4	b5 58		lda $58,x			lda 	esInt1,x 					; check max of 32767, we use 16 bit for timers and
.2ba6	29 80		and #$80			and 	#$80 						; it doesn't work > 32767
.2ba8	15 60		ora $60,x			ora 	esInt2,x
.2baa	15 68		ora $68,x			ora 	esInt3,x
.2bac	d0 41		bne $2bef			bne 	_EFValue
.2bae	98		tya				tya
.2baf	48		pha				pha
.2bb0	8a		txa				txa
.2bb1	48		pha				pha
.2bb2	a2 1c		ldx #$1c		ldx	#28
.2bb4	20 bf 14	jsr $14bf		jsr	deviceHandler
.2bb7	84 2d		sty $2d				sty 	temp1+1
.2bb9	85 2c		sta $2c				sta 	temp1
.2bbb	68		pla				pla
.2bbc	aa		tax				tax
.2bbd	20 c4 1e	jsr $1ec4			jsr 	TOSToTemp0 					; set temp0 to the address of the event variable
.2bc0	a0 03		ldy #$03			ldy 	#3							; if -ve
.2bc2	b1 2a		lda ($2a),y			lda 	(temp0),y
.2bc4	30 23		bmi $2be9			bmi 	_EFFail 	 				; straight out with fail, means "on pause".
.2bc6	a0 00		ldy #$00			ldy 	#0 							; is the fire time zero ?
.2bc8	b1 2a		lda ($2a),y			lda 	(temp0),y
.2bca	c8		iny				iny
.2bcb	11 2a		ora ($2a),y			ora 	(temp0),y
.2bcd	f0 17		beq $2be6			beq 	_EFInitialise 				; if so, initialise the value but return false.
.2bcf	a0 00		ldy #$00			ldy 	#0 							; calculate trigger - timer
.2bd1	38		sec				sec
.2bd2	b1 2a		lda ($2a),y			lda 	(temp0),y
.2bd4	e5 2c		sbc $2c				sbc 	temp1
.2bd6	c8		iny				iny
.2bd7	b1 2a		lda ($2a),y			lda 	(temp0),y
.2bd9	e5 2d		sbc $2d				sbc 	temp1+1
.2bdb	10 0c		bpl $2be9			bpl 	_EFFail 					; if trigger >= timer then return False
.2bdd	20 f9 2b	jsr $2bf9			jsr 	SetEventTimer 				; reset the timer for next time.
.2be0	20 5a 31	jsr $315a			jsr	 	MInt32True 					; and treutn true as fired.
.2be3	68		pla				pla
.2be4	a8		tay				tay
.2be5	60		rts				rts
.2be6					_EFInitialise:
.2be6	20 f9 2b	jsr $2bf9			jsr		SetEventTimer 				; set trigger time to time + elapsed
.2be9					_EFFail:
.2be9	68		pla				pla
.2bea	a8		tay				tay
.2beb	20 5e 31	jsr $315e			jsr 	MInt32False
.2bee	60		rts				rts
.2bef					_EFValue:
.2bef	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.2bf1	20 e0 14	jsr $14e0		jsr	errorHandler
.2bf4					_EFType:
.2bf4	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.2bf6	20 e0 14	jsr $14e0		jsr	errorHandler
.2bf9					SetEventTimer:
.2bf9	a0 00		ldy #$00			ldy 	#0
.2bfb	18		clc				clc
.2bfc	a5 2c		lda $2c				lda 	temp1
.2bfe	75 51		adc $51,x			adc 	esInt0+1,x
.2c00	91 2a		sta ($2a),y			sta		(temp0),y
.2c02	c8		iny				iny
.2c03	a5 2d		lda $2d				lda 	temp1+1
.2c05	75 59		adc $59,x			adc 	esInt1+1,x
.2c07	91 2a		sta ($2a),y			sta		(temp0),y
.2c09	88		dey				dey
.2c0a	11 2a		ora ($2a),y			ora 	(temp0),y 					; if the result is non zero, exit
.2c0c	d0 04		bne $2c12			bne 	_SETExit 					; zero means initialise.....
.2c0e	a9 01		lda #$01			lda 	#1 							; timer zero won't work, so make it 1, which is
.2c10	91 2a		sta ($2a),y			sta 	(temp0),y 					; near enough.
.2c12					_SETExit:
.2c12	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary/unary.asm

.2c13					UnaryLen:
.2c13	20 21 2c	jsr $2c21			jsr 	ULStart
.2c16					ULFinish:
.2c16	b1 2a		lda ($2a),y			lda 	(temp0),y 					; get length prefix
.2c18	a4 32		ldy $32				ldy 	tempShort 					; get Y back
.2c1a	20 6d 31	jsr $316d			jsr 	MInt32Set8Bit 				; write it out.
.2c1d	20 d1 31	jsr $31d1			jsr 	CheckRightParen
.2c20	60		rts				rts
.2c21	20 c1 2a	jsr $2ac1	ULStart:jsr 	EvaluateString
.2c24	b5 50		lda $50,x			lda 	esInt0,x 					; copy address of string to temp0
.2c26	85 2a		sta $2a				sta 	temp0
.2c28	b5 58		lda $58,x			lda 	esInt1,x
.2c2a	85 2b		sta $2b				sta 	temp0+1
.2c2c	84 32		sty $32				sty 	tempShort 					; get length
.2c2e	a0 00		ldy #$00			ldy 	#0
.2c30	60		rts				rts
.2c31					UnaryAsc:
.2c31	20 21 2c	jsr $2c21			jsr 	ULStart 					; same as LEN() get string, save Y, point to length.
.2c34	b1 2a		lda ($2a),y			lda 	(temp0),y 					; read length
.2c36	c8		iny				iny 		 						; point to first character, we can do LEN code after that
.2c37	c9 00		cmp #$00			cmp 	#0
.2c39	d0 db		bne $2c16			bne 	ULFinish 					; if length = 0 then error : asc("") -> error.
.2c3b	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.2c3d	20 e0 14	jsr $14e0		jsr	errorHandler
.2c40					UnaryAbs:
.2c40	20 b6 2a	jsr $2ab6			jsr 	EvaluateNumeric 			; some numeric value
.2c43	b0 07		bcs $2c4c			bcs 	_UAFloat 					; CS then float, so use that function
.2c45	20 13 31	jsr $3113			jsr 	MInt32Absolute 				; int version
.2c48	20 d1 31	jsr $31d1			jsr 	CheckRightParen
.2c4b	60		rts				rts
.2c4c					_UAFloat:
.2c4c	8a		txa				txa 								; float version
.2c4d	a2 00		ldx #$00		ldx	#0
.2c4f	20 e1 19	jsr $19e1		jsr	floatingpointHandler
.2c52	aa		tax				tax
.2c53	20 d1 31	jsr $31d1			jsr 	CheckRightParen
.2c56	60		rts				rts
.2c57					UnarySgn:
.2c57	20 b6 2a	jsr $2ab6			jsr 	EvaluateNumeric 			; same as above but sign of value
.2c5a	b0 07		bcs $2c63			bcs 	_USFloat
.2c5c	20 4b 31	jsr $314b			jsr 	MInt32Sign
.2c5f	20 d1 31	jsr $31d1			jsr 	CheckRightParen
.2c62	60		rts				rts
.2c63					_USFloat:
.2c63	8a		txa				txa
.2c64	a2 0e		ldx #$0e		ldx	#14
.2c66	20 e1 19	jsr $19e1		jsr	floatingpointHandler
.2c69	aa		tax				tax
.2c6a	20 d1 31	jsr $31d1			jsr 	CheckRightParen
.2c6d	60		rts				rts
.2c6e					UnaryPeek:
.2c6e	20 9a 2c	jsr $2c9a			jsr 	PDLCode 					; each has common setup code put reads 1,2 or 4 bytes
.2c71	4c 8e 2c	jmp $2c8e			jmp 	PDLByte0
.2c74					UnaryDeek:
.2c74	20 9a 2c	jsr $2c9a			jsr 	PDLCode
.2c77	4c 88 2c	jmp $2c88			jmp 	PDLByte1
.2c7a					UnaryLeek:
.2c7a	20 9a 2c	jsr $2c9a			jsr 	PDLCode
.2c7d	a0 03		ldy #$03			ldy 	#3							; read 3-2
.2c7f	b1 2a		lda ($2a),y			lda 	(temp0),y
.2c81	95 68		sta $68,x			sta 	esInt3,x
.2c83	88		dey				dey
.2c84	b1 2a		lda ($2a),y			lda 	(temp0),y
.2c86	95 60		sta $60,x			sta 	esInt2,x
.2c88					PDLByte1:
.2c88	a0 01		ldy #$01			ldy 	#1
.2c8a	b1 2a		lda ($2a),y			lda 	(temp0),y
.2c8c	95 58		sta $58,x			sta 	esInt1,x
.2c8e					PDLByte0:
.2c8e	a0 00		ldy #$00			ldy 	#0
.2c90	b1 2a		lda ($2a),y			lda 	(temp0),y
.2c92	95 50		sta $50,x			sta 	esInt0,x
.2c94	a4 32		ldy $32				ldy 	tempShort 					; restore Y
.2c96	20 d1 31	jsr $31d1			jsr 	CheckRightParen 			; check right and return
.2c99	60		rts				rts
.2c9a					PDLCode:
.2c9a	20 cc 2a	jsr $2acc			jsr 	EvaluateInteger 			; some address
.2c9d	b5 50		lda $50,x			lda 	esInt0,x 					; copy address of string to temp0
.2c9f	85 2a		sta $2a				sta 	temp0
.2ca1	b5 58		lda $58,x			lda 	esInt1,x
.2ca3	85 2b		sta $2b				sta 	temp0+1
.2ca5	a9 00		lda #$00			lda 	#0 							; zero upper 3 bytes of result, type okay.
.2ca7	95 58		sta $58,x			sta 	esInt1,x 					; PEEK needs upper 3 cleared
.2ca9	95 60		sta $60,x			sta 	esInt2,x
.2cab	95 68		sta $68,x			sta 	esInt3,x
.2cad	84 32		sty $32				sty 	tempShort 					; save Y
.2caf	60		rts				rts
.2cb0					Unary_Random:
.2cb0	20 8e 31	jsr $318e			jsr 	MInt32Random 				; generate random number.
.2cb3	b1 28		lda ($28),y			lda 	(codePtr),y 				; check followed by )
.2cb5	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.2cb7	f0 08		beq $2cc1			beq 	_URExit
.2cb9	e8		inx				inx 								; load range 0..r-1 into +1
.2cba	20 cc 2a	jsr $2acc			jsr 	EvaluateInteger
.2cbd	ca		dex				dex
.2cbe	20 b1 2f	jsr $2fb1			jsr 	MInt32Modulus 				; calculate random % modulus
.2cc1					_URExit:
.2cc1	20 d1 31	jsr $31d1			jsr 	CheckRightParen 			; check right and return
.2cc4	60		rts				rts
.2cc5					Unary_Min:
.2cc5	a9 01		lda #$01			lda 	#1 							; c1 cmp c2 needs to be > e.g. c1 > c2
.2cc7	d0 02		bne $2ccb			bne 	UnaryMBody
.2cc9					Unary_Max:
.2cc9	a9 ff		lda #$ff			lda 	#$FF 						; c1 cmp c2 needs to be < e.g. c1 < c2
.2ccb					UnaryMBody:
.2ccb	48		pha				pha 								; save comparator on stack, shows min or max
.2ccc	20 ad 2a	jsr $2aad			jsr 	Evaluate 					; get the first thing to check
.2ccf					_UnaryMLoop:
.2ccf	b1 28		lda ($28),y			lda 	(codePtr),y 				; found ), indicates end.
.2cd1	c8		iny				iny
.2cd2	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.2cd4	f0 09		beq $2cdf			beq 	_UnaryMExit
.2cd6	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; found , indicates more.
.2cd8	f0 07		beq $2ce1			beq 	_UnaryMCompare
.2cda	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.2cdc	20 e0 14	jsr $14e0		jsr	errorHandler
.2cdf					_UnaryMExit:
.2cdf	68		pla				pla 								; done so throw comparator and return.
.2ce0	60		rts				rts
.2ce1					_UnaryMCompare:
.2ce1	e8		inx				inx 								; get the 2nd thing to evaluate
.2ce2	20 ad 2a	jsr $2aad			jsr 	Evaluate
.2ce5	ca		dex				dex
.2ce6	20 73 28	jsr $2873			jsr 	PerformComparison 			; this is part of evaluate/compare.asm
.2ce9	85 32		sta $32				sta 	tempShort 					; save result
.2ceb	68		pla				pla 								; get what we need
.2cec	48		pha				pha
.2ced	c5 32		cmp $32				cmp 	tempShort 					; did we get it
.2cef	d0 de		bne $2ccf			bne 	_UnaryMLoop 				; no, try another value.
.2cf1	20 5e 31	jsr $315e			jsr 	MInt32False 				; promote 2nd to 1st.
.2cf4	20 42 30	jsr $3042			jsr 	MInt32Add
.2cf7	4c cf 2c	jmp $2ccf			jmp 	_UnaryMLoop
.2cfa					Unary_Page:
.2cfa	20 5e 31	jsr $315e			jsr 	MInt32False 				; zero
.2cfd	ad c8 0a	lda $0ac8			lda 	basePage 					; copy base page address in.
.2d00	95 50		sta $50,x			sta 	esInt0,x
.2d02	ad c9 0a	lda $0ac9			lda 	basePage+1
.2d05	95 58		sta $58,x			sta 	esInt1,x
.2d07	60		rts				rts
.2d08					UnaryReference:
.2d08	a9 0f		lda #$0f			lda 	#15
.2d0a	20 43 29	jsr $2943			jsr 	EvaluateLevel 				; evaluate term and don't deference.
.2d0d	b5 48		lda $48,x			lda 	esType,x 					; check it's a reference.
.2d0f	10 05		bpl $2d16			bpl 	UType
.2d11	a9 00		lda #$00			lda 	#0 							; make it an integer
.2d13	95 48		sta $48,x			sta 	esType,x
.2d15	60		rts				rts
.2d16					UType:
.2d16	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.2d18	20 e0 14	jsr $14e0		jsr	errorHandler
.2d1b					UnaryHexMarker:
.2d1b	4c 9e 2a	jmp $2a9e			jmp 	EvaluateIntegerTerm
.2d1e					UnaryComplement:
.2d1e	20 9e 2a	jsr $2a9e			jsr 	EvaluateIntegerTerm
.2d21	20 32 31	jsr $3132			jsr 	MInt32Not
.2d24	60		rts				rts
.2d25					UnaryIntToFloat:
.2d25	20 b6 2a	jsr $2ab6			jsr 	EvaluateNumeric				; some number
.2d28	b5 48		lda $48,x			lda 	esType,x 					; if float already, exit
.2d2a	d0 0b		bne $2d37			bne 	_UIFExit
.2d2c	8a		txa				txa 								; convert and set type
.2d2d	a2 1a		ldx #$1a		ldx	#26
.2d2f	20 e1 19	jsr $19e1		jsr	floatingpointHandler
.2d32	aa		tax				tax
.2d33	a9 01		lda #$01			lda 	#1
.2d35	95 48		sta $48,x			sta 	esType,x
.2d37					_UIFExit:
.2d37	60		rts				rts
.2d38					UnaryFloatToInt:
.2d38	20 b6 2a	jsr $2ab6			jsr 	EvaluateNumeric 			; the number
.2d3b	b5 48		lda $48,x			lda 	esType,x 					; if int already exit
.2d3d	f0 0b		beq $2d4a			beq 	_UFIExit
.2d3f	8a		txa				txa 								; convert to int
.2d40	a2 12		ldx #$12		ldx	#18
.2d42	20 e1 19	jsr $19e1		jsr	floatingpointHandler
.2d45	aa		tax				tax
.2d46	a9 00		lda #$00			lda 	#0 							; set type
.2d48	95 48		sta $48,x			sta 	esType,x
.2d4a					_UFIExit:
.2d4a	60		rts				rts
.2d4b					UnaryAlloc:
.2d4b	e8		inx				inx 								; evaluate memory required
.2d4c	20 cc 2a	jsr $2acc			jsr 	EvaluateInteger
.2d4f	20 d1 31	jsr $31d1			jsr 	CheckRightParen
.2d52	ca		dex				dex
.2d53	b5 61		lda $61,x			lda 	esInt2+1,x 					; check at least in 64k range.
.2d55	15 69		ora $69,x			ora 	esInt3+1,x
.2d57	d0 1d		bne $2d76			bne 	_UABadValue
.2d59	20 5e 31	jsr $315e			jsr 	MInt32False					; zero return.
.2d5c	a5 36		lda $36				lda 	lowMemory+1 				; copy low memory in
.2d5e	95 58		sta $58,x			sta 	esInt1,x
.2d60	a5 35		lda $35				lda 	lowMemory
.2d62	95 50		sta $50,x			sta 	esInt0,x
.2d64	18		clc				clc 								; add alloc required.
.2d65	75 51		adc $51,x			adc 	esInt0+1,x
.2d67	85 35		sta $35				sta 	lowMemory
.2d69	a5 36		lda $36				lda 	lowMemory+1
.2d6b	75 59		adc $59,x			adc 	esInt1+1,x
.2d6d	85 36		sta $36				sta 	lowMemory+1
.2d6f	b0 05		bcs $2d76			bcs		_UABadValue 				; overflow definitely bad.
.2d71	c5 34		cmp $34				cmp 	highMemory+1
.2d73	b0 01		bcs $2d76			bcs 	_UABadValue 				; out of memory bad.
.2d75	60		rts				rts
.2d76					_UABadValue:
.2d76	a2 22		ldx #$22			ldx 	#ErrorID_Memory
.2d78	20 e0 14	jsr $14e0		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary/unary2.asm

.2d7b					UnaryTimer:
.2d7b	20 d1 31	jsr $31d1			jsr 	CheckRightParen 			; no parameters
.2d7e	98		tya				tya
.2d7f	48		pha				pha
.2d80	20 85 31	jsr $3185			jsr 	MInt32Zero 					; zero result
.2d83	86 2a		stx $2a				stx 	temp0 						; returning in YA so can't use .pshx
.2d85	a2 1c		ldx #$1c		ldx	#28
.2d87	20 bf 14	jsr $14bf		jsr	deviceHandler
.2d8a	a6 2a		ldx $2a				ldx 	temp0						; restore X and update 16 bit result
.2d8c	95 50		sta $50,x			sta 	esInt0,x
.2d8e	98		tya				tya
.2d8f	95 58		sta $58,x			sta 	esInt1,x
.2d91	68		pla				pla
.2d92	a8		tay				tay
.2d93	60		rts				rts
.2d94					UnaryInkey:
.2d94	20 d1 31	jsr $31d1			jsr 	CheckRightParen
.2d97	86 2a		stx $2a				stx 	temp0
.2d99	a2 0a		ldx #$0a		ldx	#10
.2d9b	20 bf 14	jsr $14bf		jsr	deviceHandler
.2d9e	a6 2a		ldx $2a				ldx 	temp0
.2da0	20 6d 31	jsr $316d			jsr 	MInt32Set8Bit
.2da3	60		rts				rts
.2da4					UnaryGet:
.2da4	20 d1 31	jsr $31d1			jsr 	CheckRightParen
.2da7	86 2a		stx $2a				stx 	temp0
.2da9					_UGLoop:
.2da9	a2 00		ldx #$00		ldx	#0
.2dab	20 bf 14	jsr $14bf		jsr	deviceHandler
.2dae	a2 0a		ldx #$0a		ldx	#10
.2db0	20 bf 14	jsr $14bf		jsr	deviceHandler
.2db3	c9 00		cmp #$00			cmp 	#0
.2db5	f0 f2		beq $2da9			beq 	_UGLoop
.2db7	a6 2a		ldx $2a				ldx 	temp0
.2db9	20 6d 31	jsr $316d			jsr 	MInt32Set8Bit
.2dbc	60		rts				rts
.2dbd					UnaryGetString:
.2dbd	20 a4 2d	jsr $2da4			jsr 	UnaryGet
.2dc0					UGSDoChr:
.2dc0	4c 11 2e	jmp $2e11			jmp 	ChrCode
.2dc3					UnaryInkeyString:
.2dc3	20 94 2d	jsr $2d94			jsr 	UnaryInkey
.2dc6	b5 50		lda $50,x			lda 	esInt0,x
.2dc8	d0 f6		bne $2dc0			bne 	UGSDoChr
.2dca	8a		txa				txa
.2dcb	a2 06		ldx #$06		ldx	#6
.2dcd	20 02 35	jsr $3502		jsr	stringHandler
.2dd0	aa		tax				tax
.2dd1	60		rts				rts
.2dd2					UnarySys:
.2dd2	20 cc 2a	jsr $2acc			jsr 	EvaluateInteger 				; get the address
.2dd5	20 d1 31	jsr $31d1			jsr 	CheckRightParen
.2dd8	20 c4 1e	jsr $1ec4			jsr 	TOSToTemp0 						; copy call address to temp0
.2ddb	8a		txa				txa
.2ddc	48		pha				pha
.2ddd	98		tya				tya
.2dde	48		pha				pha
.2ddf	ad 00 0a	lda $0a00			lda 	("A"-"A")*4+SingleLetterVar 	; load AXY
.2de2	ae 5c 0a	ldx $0a5c			ldx 	("X"-"A")*4+SingleLetterVar
.2de5	ac 60 0a	ldy $0a60			ldy 	("Y"-"A")*4+SingleLetterVar
.2de8	20 f7 2d	jsr $2df7			jsr 	_CallTemp0
.2deb	85 32		sta $32				sta 	tempShort 						; restore YX
.2ded	68		pla				pla
.2dee	a8		tay				tay
.2def	68		pla				pla
.2df0	aa		tax				tax
.2df1	a5 32		lda $32				lda 	tempShort
.2df3	20 6d 31	jsr $316d			jsr 	MInt32Set8Bit 					; return result.
.2df6	60		rts				rts
.2df7					_CallTemp0:
.2df7	6c 2a 00	jmp ($002a)			jmp 	(temp0)
.2dfa					UnaryMem:
.2dfa	20 5e 31	jsr $315e			jsr 	MInt32False 					; set to false (e.g. 0)
.2dfd	38		sec				sec
.2dfe	a5 33		lda $33				lda 	highMemory 						; calculate value
.2e00	e5 35		sbc $35				sbc 	lowMemory
.2e02	95 50		sta $50,x			sta 	esInt0,x
.2e04	a5 34		lda $34				lda 	highMemory+1
.2e06	e5 36		sbc $36				sbc 	lowMemory+1
.2e08	95 58		sta $58,x			sta 	esInt1,x
.2e0a	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary/unarystr.asm

.2e0b					ExecChr:
.2e0b	20 d4 2a	jsr $2ad4			jsr 	EvaluateSmallInteger		; character number 0-255
.2e0e	20 d1 31	jsr $31d1			jsr 	CheckRightParen				; right bracket
.2e11					ChrCode:
.2e11	98		tya				tya
.2e12	48		pha				pha
.2e13	8a		txa				txa 								; A = stack
.2e14	b4 50		ldy $50,x			ldy 	esInt0,x					; Y = character
.2e16	a2 00		ldx #$00		ldx	#0
.2e18	20 02 35	jsr $3502		jsr	stringHandler
.2e1b	aa		tax				tax 								; X = stack
.2e1c	68		pla				pla
.2e1d	a8		tay				tay
.2e1e	60		rts				rts
.2e1f					ExecLower:
.2e1f	38		sec				sec 								; set carry is lower
.2e20	b0 01		bcs $2e23			bcs 	ExecUpperLower
.2e22					ExecUpper:
.2e22	18		clc				clc 								; clear carry is upper
.2e23					ExecUpperLower:
.2e23	08		php				php 								; save carry
.2e24	20 c1 2a	jsr $2ac1			jsr 	EvaluateString 				; string to stack,X
.2e27	20 d1 31	jsr $31d1			jsr 	CheckRightParen 			; check closing right bracket.
.2e2a	28		plp				plp 								; restore carry, save Y
.2e2b	98		tya				tya
.2e2c	48		pha				pha
.2e2d	a9 00		lda #$00			lda 	#0 							; A zero if upper, 1 if lower.
.2e2f	2a		rol a				rol 	a
.2e30	a8		tay				tay 								; now in Y
.2e31	8a		txa				txa 								; do the substring and exit.
.2e32	a2 0a		ldx #$0a		ldx	#10
.2e34	20 02 35	jsr $3502		jsr	stringHandler
.2e37	aa		tax				tax
.2e38	68		pla				pla
.2e39	a8		tay				tay
.2e3a	60		rts				rts
.2e3b					ExecLeft:
.2e3b	20 c1 2a	jsr $2ac1			jsr 	EvaluateString 				; string to stack,X
.2e3e	20 de 31	jsr $31de			jsr 	CheckComma
.2e41	e8		inx				inx
.2e42	a9 01		lda #$01			lda 	#1 							; 1 for 2nd parameter.
.2e44	20 6d 31	jsr $316d			jsr 	MInt32Set8Bit
.2e47	e8		inx				inx
.2e48	20 d4 2a	jsr $2ad4			jsr 	EvaluateSmallInteger 		; smallint 3rd parameter
.2e4b					ExecSubstring:
.2e4b	ca		dex				dex 								; fix up X
.2e4c	ca		dex				dex
.2e4d	20 d1 31	jsr $31d1			jsr 	CheckRightParen 			; check closing right bracket.
.2e50	8a		txa				txa 								; do the substring and exit.
.2e51	a2 0c		ldx #$0c		ldx	#12
.2e53	20 02 35	jsr $3502		jsr	stringHandler
.2e56	aa		tax				tax
.2e57	60		rts				rts
.2e58					ExecMid:
.2e58	20 c1 2a	jsr $2ac1			jsr 	EvaluateString 				; string to stack,X
.2e5b	20 de 31	jsr $31de			jsr 	CheckComma
.2e5e	e8		inx				inx
.2e5f	20 d4 2a	jsr $2ad4			jsr 	EvaluateSmallInteger 		; smallint 2nd parameter
.2e62	c9 00		cmp #$00			cmp 	#0
.2e64	f0 15		beq $2e7b			beq 	_EMValue
.2e66	e8		inx				inx
.2e67	a9 ff		lda #$ff			lda 	#255 						; 255 default for 3nd parameter - this is optional.
.2e69	20 6d 31	jsr $316d			jsr 	MInt32Set8Bit
.2e6c	b1 28		lda ($28),y			lda 	(codePtr),y 				; is there a ) next
.2e6e	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN 				; if so, just MID$(a$,2)
.2e70	f0 d9		beq $2e4b			beq 	ExecSubString
.2e72	20 de 31	jsr $31de			jsr 	CheckComma
.2e75	20 d4 2a	jsr $2ad4			jsr 	EvaluateSmallInteger 		; smallint 2nd parameter
.2e78	4c 4b 2e	jmp $2e4b			jmp 	ExecSubString
.2e7b					_EMValue:
.2e7b	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.2e7d	20 e0 14	jsr $14e0		jsr	errorHandler
.2e80					ExecRight:
.2e80	20 c1 2a	jsr $2ac1			jsr 	EvaluateString 				; string to stack,X
.2e83	20 de 31	jsr $31de			jsr 	CheckComma
.2e86	e8		inx				inx
.2e87	20 d4 2a	jsr $2ad4			jsr 	EvaluateSmallInteger 		; smallint 2nd parameter.
.2e8a	ca		dex				dex
.2e8b	98		tya				tya
.2e8c	48		pha				pha
.2e8d	b5 50		lda $50,x			lda 	esInt0,x 					; copy address of string to temp0
.2e8f	85 2a		sta $2a				sta 	temp0
.2e91	b5 58		lda $58,x			lda 	esInt1,x
.2e93	85 2b		sta $2b				sta 	temp0+1
.2e95	a0 00		ldy #$00			ldy 	#0 							; point to length
.2e97	b1 2a		lda ($2a),y			lda 	(temp0),y 					; get the length.
.2e99	18		clc				clc 								; add 1.
.2e9a	69 01		adc #$01			adc 	#1
.2e9c	38		sec				sec
.2e9d	f5 51		sbc $51,x			sbc 	esInt0+1,x  				; subtract right count.
.2e9f	f0 02		beq $2ea3			beq		_ERMake1 					; if zero, make it 1.
.2ea1	b0 02		bcs $2ea5			bcs		_EROkay
.2ea3					_ERMake1:
.2ea3	a9 01		lda #$01			lda 	#1 							; start position.
.2ea5					_EROkay:
.2ea5	e8		inx				inx 								; set start pos.
.2ea6	95 50		sta $50,x			sta 	esInt0,x
.2ea8	e8		inx				inx
.2ea9	a9 ff		lda #$ff			lda 	#255 						; 255 default for 3nd parameter.
.2eab	20 6d 31	jsr $316d			jsr 	MInt32Set8Bit
.2eae	68		pla				pla
.2eaf	a8		tay				tay
.2eb0	4c 4b 2e	jmp $2e4b			jmp 	ExecSubString 				; do the substring code.

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32binary.asm

.2eb3					MInt32And:
.2eb3	b5 50		lda $50,x			lda 	esInt0,x
.2eb5	35 51		and $51,x			and 	esInt0+1,x
.2eb7	95 50		sta $50,x			sta 	esInt0,x
.2eb9	b5 58		lda $58,x			lda 	esInt1,x
.2ebb	35 59		and $59,x			and 	esInt1+1,x
.2ebd	95 58		sta $58,x			sta 	esInt1,x
.2ebf	b5 60		lda $60,x			lda 	esInt2,x
.2ec1	35 61		and $61,x			and 	esInt2+1,x
.2ec3	95 60		sta $60,x			sta 	esInt2,x
.2ec5	b5 68		lda $68,x			lda 	esInt3,x
.2ec7	35 69		and $69,x			and 	esInt3+1,x
.2ec9	95 68		sta $68,x			sta 	esInt3,x
.2ecb	60		rts				rts
.2ecc					MInt32Or:
.2ecc	b5 50		lda $50,x			lda 	esInt0,x
.2ece	15 51		ora $51,x			ora 	esInt0+1,x
.2ed0	95 50		sta $50,x			sta 	esInt0,x
.2ed2	b5 58		lda $58,x			lda 	esInt1,x
.2ed4	15 59		ora $59,x			ora 	esInt1+1,x
.2ed6	95 58		sta $58,x			sta 	esInt1,x
.2ed8	b5 60		lda $60,x			lda 	esInt2,x
.2eda	15 61		ora $61,x			ora 	esInt2+1,x
.2edc	95 60		sta $60,x			sta 	esInt2,x
.2ede	b5 68		lda $68,x			lda 	esInt3,x
.2ee0	15 69		ora $69,x			ora 	esInt3+1,x
.2ee2	95 68		sta $68,x			sta 	esInt3,x
.2ee4	60		rts				rts
.2ee5					MInt32Xor:
.2ee5	b5 50		lda $50,x			lda 	esInt0,x
.2ee7	55 51		eor $51,x			eor 	esInt0+1,x
.2ee9	95 50		sta $50,x			sta 	esInt0,x
.2eeb	b5 58		lda $58,x			lda 	esInt1,x
.2eed	55 59		eor $59,x			eor 	esInt1+1,x
.2eef	95 58		sta $58,x			sta 	esInt1,x
.2ef1	b5 60		lda $60,x			lda 	esInt2,x
.2ef3	55 61		eor $61,x			eor 	esInt2+1,x
.2ef5	95 60		sta $60,x			sta 	esInt2,x
.2ef7	b5 68		lda $68,x			lda 	esInt3,x
.2ef9	55 69		eor $69,x			eor 	esInt3+1,x
.2efb	95 68		sta $68,x			sta 	esInt3,x
.2efd	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32compare.asm

.2efe					MInt32Compare:
.2efe	b5 50		lda $50,x			lda 	esInt0,x 					; equality check first.
.2f00	d5 51		cmp $51,x			cmp 	esInt0+1,x
.2f02	d0 13		bne $2f17			bne 	MInt32Compare2
.2f04	b5 58		lda $58,x			lda 	esInt1,x
.2f06	d5 59		cmp $59,x			cmp 	esInt1+1,x
.2f08	d0 0d		bne $2f17			bne 	MInt32Compare2
.2f0a	b5 60		lda $60,x			lda 	esInt2,x
.2f0c	d5 61		cmp $61,x			cmp 	esInt2+1,x
.2f0e	d0 07		bne $2f17			bne 	MInt32Compare2
.2f10	b5 68		lda $68,x			lda 	esInt3,x
.2f12	55 69		eor $69,x			eor 	esInt3+1,x 					; EOR will return 0 if the same.
.2f14	d0 01		bne $2f17			bne 	MInt32Compare2
.2f16	60		rts				rts
.2f17					MInt32Compare2:
.2f17	b5 50		lda $50,x			lda		esInt0,x 					; unsigned 32 bit comparison.
.2f19	d5 51		cmp $51,x			cmp 	esInt0+1,x
.2f1b	b5 58		lda $58,x			lda		esInt1,x
.2f1d	f5 59		sbc $59,x			sbc 	esInt1+1,x
.2f1f	b5 60		lda $60,x			lda		esInt2,x
.2f21	f5 61		sbc $61,x			sbc 	esInt2+1,x
.2f23	b5 68		lda $68,x			lda		esInt3,x
.2f25	f5 69		sbc $69,x			sbc 	esInt3+1,x
.2f27	50 02		bvc $2f2b			bvc 	_I32LNoOverflow 			; make it signed 32 bit comparison
.2f29	49 80		eor #$80			eor 	#$80
.2f2b					_I32LNoOverflow
.2f2b	30 03		bmi $2f30			bmi 	MInt32CLess					; if -ve then return $FF
.2f2d	a9 01		lda #$01			lda 	#$01						; else return $01
.2f2f	60		rts				rts
.2f30					MInt32CLess:
.2f30	a9 ff		lda #$ff			lda 	#$FF
.2f32	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32divide.asm

.2f33					MInt32SDivide:
.2f33	98		tya				tya  								; save Y, which is the count of negations
.2f34	48		pha				pha
.2f35	a0 00		ldy #$00			ldy 	#0 							; zero count
.2f37	20 4f 2f	jsr $2f4f			jsr 	_MInt32SRemSign 			; unsign TOS
.2f3a	e8		inx				inx 								; unsign TOS+1
.2f3b	20 4f 2f	jsr $2f4f			jsr 	_MInt32SRemSign
.2f3e	ca		dex				dex
.2f3f	98		tya				tya 								; save sign count on stack
.2f40	48		pha				pha
.2f41	20 58 2f	jsr $2f58			jsr 	MInt32UDivide 				; unsigned division
.2f44	68		pla				pla 								; get sign count back
.2f45	29 01		and #$01			and 	#1 							; if it is odd, then negate result
.2f47	f0 03		beq $2f4c			beq 	_I32SNoNeg
.2f49	20 18 31	jsr $3118			jsr 	MInt32Negate
.2f4c					_I32SNoNeg:
.2f4c	68		pla				pla 								; restoe Y and exit
.2f4d	a8		tay				tay
.2f4e	60		rts				rts
.2f4f					_MInt32SRemSign:
.2f4f	b5 68		lda $68,x			lda 	esInt3,x 					; is it -ve
.2f51	10 04		bpl $2f57			bpl 	_MInt32SRSExit
.2f53	c8		iny				iny 								; increment the sign count
.2f54	20 18 31	jsr $3118			jsr 	MInt32Negate 				; negate the value.
.2f57					_MInt32SRSExit:
.2f57	60		rts				rts
.2f58					MInt32UDivide:
.2f58	b5 51		lda $51,x			lda 	esInt0+1,x 					; check for division by zero
.2f5a	15 59		ora $59,x			ora 	esInt1+1,x
.2f5c	15 5a		ora $5a,x			ora 	esInt1+2,x
.2f5e	15 5b		ora $5b,x			ora 	esInt1+3,x
.2f60	f0 4a		beq $2fac			beq 	_MInt32DZero
.2f62	e8		inx				inx 								; clear A
.2f63	e8		inx				inx
.2f64	20 5e 31	jsr $315e			jsr 	MInt32False
.2f67	ca		dex				dex
.2f68	ca		dex				dex
.2f69	98		tya				tya 								; save Y on the stack
.2f6a	48		pha				pha
.2f6b	a0 20		ldy #$20			ldy 	#32 						; number of division passes
.2f6d					_MInt32UDLoop:
.2f6d	16 50		asl $50,x			asl 	esInt0,x					; shift QA left. First Q
.2f6f	36 58		rol $58,x			rol 	esInt1,x
.2f71	36 60		rol $60,x			rol 	esInt2,x
.2f73	36 68		rol $68,x			rol 	esInt3,x
.2f75	36 52		rol $52,x			rol 	esInt0+2,x 					; then A.
.2f77	36 5a		rol $5a,x			rol 	esInt1+2,x
.2f79	36 62		rol $62,x			rol 	esInt2+2,x
.2f7b	36 6a		rol $6a,x			rol 	esInt3+2,x
.2f7d	38		sec				sec 								; calculate A-M saving result on the stack
.2f7e	b5 52		lda $52,x			lda 	esInt0+2,x
.2f80	f5 51		sbc $51,x			sbc 	esInt0+1,x
.2f82	48		pha				pha
.2f83	b5 5a		lda $5a,x			lda 	esInt1+2,x
.2f85	f5 59		sbc $59,x			sbc 	esInt1+1,x
.2f87	48		pha				pha
.2f88	b5 62		lda $62,x			lda 	esInt2+2,x
.2f8a	f5 61		sbc $61,x			sbc 	esInt2+1,x
.2f8c	48		pha				pha
.2f8d	b5 6a		lda $6a,x			lda 	esInt3+2,x
.2f8f	f5 69		sbc $69,x			sbc 	esInt3+1,x
.2f91	90 10		bcc $2fa3			bcc		_MInt32NoSubtract 			; if A < M (e.g. carry clear) then reject this.
.2f93	95 6a		sta $6a,x			sta 	esInt3+2,x 					; write result back to A
.2f95	68		pla				pla
.2f96	95 62		sta $62,x			sta 	esInt2+2,x
.2f98	68		pla				pla
.2f99	95 5a		sta $5a,x			sta 	esInt1+2,x
.2f9b	68		pla				pla
.2f9c	95 52		sta $52,x			sta 	esInt0+2,x
.2f9e	f6 50		inc $50,x			inc 	esInt0,x 					; sets bit 0 of Q - it was shifted left previously.
.2fa0	4c a6 2f	jmp $2fa6			jmp 	_MInt32Next 					; do the next iteration
.2fa3					_MInt32NoSubtract:
.2fa3	68		pla				pla
.2fa4	68		pla				pla
.2fa5	68		pla				pla
.2fa6					_MInt32Next:
.2fa6	88		dey				dey 								; do this 32 times.
.2fa7	d0 c4		bne $2f6d			bne 	_MInt32UDLoop
.2fa9	68		pla				pla 								; restore Y and exit
.2faa	a8		tay				tay
.2fab	60		rts				rts
.2fac					_MInt32DZero:
.2fac	a2 05		ldx #$05			ldx 	#ErrorID_DivZero
.2fae	20 e0 14	jsr $14e0		jsr	errorHandler
.2fb1					MInt32Modulus:
.2fb1	20 58 2f	jsr $2f58			jsr 	MInt32UDivide 				; do the division.
.2fb4	b5 6a		lda $6a,x			lda 	esInt3+2,x 					; copy 2nd on stack (the remainder) to the top.
.2fb6	95 68		sta $68,x			sta 	esInt3,x
.2fb8	b5 62		lda $62,x			lda 	esInt2+2,x
.2fba	95 60		sta $60,x			sta 	esInt2,x
.2fbc	b5 5a		lda $5a,x			lda 	esInt1+2,x
.2fbe	95 58		sta $58,x			sta 	esInt1,x
.2fc0	b5 52		lda $52,x			lda 	esInt0+2,x
.2fc2	95 50		sta $50,x			sta 	esInt0,x
.2fc4	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32fromstr.asm

.0c18					fs32Length:
>0c18							.fill 	1
.2fc5					LinkInt32FromString:
.2fc5	aa		tax				tax
.2fc6	98		tya				tya
.2fc7	20 cc 2f	jsr $2fcc			jsr 	MInt32FromString
.2fca	8a		txa				txa
.2fcb	60		rts				rts
.2fcc					MInt32FromString:
.2fcc	85 32		sta $32				sta 	tempShort 					; save base
.2fce	98		tya				tya
.2fcf	48		pha				pha
.2fd0	a0 00		ldy #$00			ldy 	#0 							; get length of string to convert
.2fd2	b1 2a		lda ($2a),y			lda 	(temp0),y
.2fd4	8d 18 0c	sta $0c18			sta 	fs32Length
.2fd7	f0 65		beq $303e			beq 	_I32FSFail2					; fail if length zero.
.2fd9	a0 01		ldy #$01			ldy 	#1 							; set index into string being read
.2fdb	b1 2a		lda ($2a),y			lda 	(temp0),y 					; look at first character
.2fdd	c9 2d		cmp #$2d			cmp 	#"-"						; is it a - character
.2fdf	d0 09		bne $2fea			bne 	_I32FSNotNegative
.2fe1	ad 18 0c	lda $0c18			lda 	fs32Length 					; get length back.
.2fe4	c9 01		cmp #$01			cmp 	#1 							; if 1 it is just a - on its own so fail.
.2fe6	f0 56		beq $303e			beq 	_I32FSFail2
.2fe8	a0 02		ldy #$02			ldy 	#2 							; first digit of the number.
.2fea					_I32FSNotNegative:
.2fea	a5 32		lda $32				lda 	tempShort 					; get the base back.
.2fec	c0 02		cpy #$02			cpy 	#2 							; if we read a -ve (e.g. Y == 2)
.2fee	d0 02		bne $2ff2			bne 	_I32FSNN2
.2ff0	09 80		ora #$80			ora 	#$80						; set bit 7, this indicates a negated result.
.2ff2					_I32FSNN2:
.2ff2	48		pha				pha 								; save base + final sign on stack.
.2ff3	20 5e 31	jsr $315e			jsr 	MInt32False 				; zero the return value.
.2ff6					_I32FSMainLoop:
.2ff6	68		pla				pla 								; get the base back into tempShort
.2ff7	48		pha				pha
.2ff8	29 7f		and #$7f			and 	#$7F
.2ffa	85 32		sta $32				sta 	tempShort
.2ffc	b1 2a		lda ($2a),y			lda 	(temp0),y 					; look at next character.
.2ffe	c9 61		cmp #$61			cmp 	#"a" 						; fix up case.
.3000	90 02		bcc $3004			bcc 	_I32FSNotLC
.3002	e9 20		sbc #$20			sbc 	#32
.3004					_I32FSNotLC:
.3004	38		sec				sec 								; subtract 48 (ASCII "0") - ASCII to Hex conversion
.3005	e9 30		sbc #$30			sbc 	#"0"
.3007	90 34		bcc $303d			bcc 	_I32FSFail 					; nothing more to do.
.3009	c9 0a		cmp #$0a			cmp 	#9+1 						; if it is 0-9 validate vs base.
.300b	90 06		bcc $3013			bcc 	_I32FSValidate
.300d	c9 11		cmp #$11			cmp 	#17 						; is it between 58 and 64 ? if so bad.
.300f	90 2c		bcc $303d			bcc 	_I32FSFail
.3011	e9 07		sbc #$07			sbc 	#7 							; adjust into range so now character is 0->nnn
.3013					_I32FSValidate:
.3013	c5 32		cmp $32				cmp 	tempShort 					; compare against the base.
.3015	b0 26		bcs $303d			bcs 	_I32FSFail 					; sorry, too large for this base, so fail.
.3017	48		pha				pha 								; save the new digit value.
.3018	e8		inx				inx 								; put base into next slot up on stack
.3019	a5 32		lda $32				lda 	tempShort
.301b	20 6d 31	jsr $316d			jsr 	MInt32Set8Bit
.301e	ca		dex				dex
.301f	20 76 30	jsr $3076			jsr 	MInt32Multiply 				; multiply current by the base
.3022	e8		inx				inx
.3023	68		pla				pla  								; put additive into next slot
.3024	20 6d 31	jsr $316d			jsr 	MInt32Set8Bit
.3027	ca		dex				dex
.3028	20 42 30	jsr $3042			jsr 	MInt32Add 					; and add it
.302b	c8		iny				iny 								; bump the character pointer
.302c	cc 18 0c	cpy $0c18			cpy 	fs32Length 					; until > length.
.302f	f0 c5		beq $2ff6			beq 	_I32FSMainLoop
.3031	90 c3		bcc $2ff6			bcc 	_I32FSMainLoop
.3033					_I32FSDone:
.3033	68		pla				pla 								; get base/final sign back
.3034	10 03		bpl $3039			bpl 	_I32FSNN3
.3036	20 18 31	jsr $3118			jsr 	MInt32Negate 				; negate the result.
.3039					_I32FSNN3:
.3039	68		pla				pla
.303a	a8		tay				tay
.303b	38		sec				sec
.303c	60		rts				rts
.303d					_I32FSFail:
.303d	68		pla				pla
.303e					_I32FSFail2:
.303e	68		pla				pla
.303f	a8		tay				tay
.3040	18		clc				clc
.3041	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32math.asm

.3042					MInt32Add:
.3042	18		clc				clc
.3043	b5 50		lda $50,x			lda 	esInt0,x
.3045	75 51		adc $51,x			adc 	esInt0+1,x
.3047	95 50		sta $50,x			sta 	esInt0,x
.3049	b5 58		lda $58,x			lda 	esInt1,x
.304b	75 59		adc $59,x			adc 	esInt1+1,x
.304d	95 58		sta $58,x			sta 	esInt1,x
.304f	b5 60		lda $60,x			lda 	esInt2,x
.3051	75 61		adc $61,x			adc 	esInt2+1,x
.3053	95 60		sta $60,x			sta 	esInt2,x
.3055	b5 68		lda $68,x			lda 	esInt3,x
.3057	75 69		adc $69,x			adc 	esInt3+1,x
.3059	95 68		sta $68,x			sta 	esInt3,x
.305b	60		rts				rts
.305c					MInt32Sub:
.305c	38		sec				sec
.305d	b5 50		lda $50,x			lda 	esInt0,x
.305f	f5 51		sbc $51,x			sbc 	esInt0+1,x
.3061	95 50		sta $50,x			sta 	esInt0,x
.3063	b5 58		lda $58,x			lda 	esInt1,x
.3065	f5 59		sbc $59,x			sbc 	esInt1+1,x
.3067	95 58		sta $58,x			sta 	esInt1,x
.3069	b5 60		lda $60,x			lda 	esInt2,x
.306b	f5 61		sbc $61,x			sbc 	esInt2+1,x
.306d	95 60		sta $60,x			sta 	esInt2,x
.306f	b5 68		lda $68,x			lda 	esInt3,x
.3071	f5 69		sbc $69,x			sbc 	esInt3+1,x
.3073	95 68		sta $68,x			sta 	esInt3,x
.3075	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32multiply.asm

.3076					MInt32Multiply:
.3076	e8		inx				inx 								; copy 2nd -> 3rd
.3077	20 9c 30	jsr $309c			jsr 	MInt32CopyUp
.307a	ca		dex				dex
.307b	20 9c 30	jsr $309c			jsr 	MInt32CopyUp 				; copy 1st -> 2nd
.307e	20 5e 31	jsr $315e			jsr 	MInt32False 				; zero 1st.
.3081					_I32Loop:
.3081	b5 52		lda $52,x			lda 	esInt0+2,x 					; get low bit of 3rd
.3083	29 01		and #$01			and 	#1
.3085	f0 03		beq $308a			beq 	_I32NoAdd 					; if set
.3087	20 42 30	jsr $3042			jsr 	MInt32Add 					; add 2nd to 1st.
.308a					_I32NoAdd:
.308a	e8		inx				inx 								; shift 2nd left
.308b	20 73 31	jsr $3173			jsr 	MInt32ShiftLeft
.308e	e8		inx				inx  								; shift 3rd right
.308f	20 7c 31	jsr $317c			jsr 	MInt32ShiftRight
.3092	20 85 31	jsr $3185			jsr 	MInt32Zero 					; check if zero.
.3095	08		php				php 								; save status bits
.3096	ca		dex				dex 	 							; point back to 1st
.3097	ca		dex				dex
.3098	28		plp				plp 								; get status bits
.3099	d0 e6		bne $3081			bne 	_I32Loop 					; if non-zero keep going.
.309b	60		rts				rts
.309c					MInt32CopyUp:
.309c	b5 50		lda $50,x			lda 	esInt0,x
.309e	95 51		sta $51,x			sta 	esInt0+1,x
.30a0	b5 58		lda $58,x			lda 	esInt1,x
.30a2	95 59		sta $59,x			sta 	esInt1+1,x
.30a4	b5 60		lda $60,x			lda 	esInt2,x
.30a6	95 61		sta $61,x			sta 	esInt2+1,x
.30a8	b5 68		lda $68,x			lda 	esInt3,x
.30aa	95 69		sta $69,x			sta 	esInt3+1,x
.30ac	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32tostr.asm

>0c19					MCharCount:	.fill 	1						; count of converted characters
.30ad					MLInt32ToString:
.30ad	aa		tax				tax									; module passes stack in A, base in Y
.30ae	98		tya				tya
.30af	20 b4 30	jsr $30b4			jsr 	MInt32ToString
.30b2	8a		txa				txa
.30b3	60		rts				rts
.30b4					MInt32ToString:
.30b4	48		pha				pha 								; save base
.30b5	85 32		sta $32				sta 	tempShort 					; save target base.
.30b7	a9 00		lda #$00			lda 	#0
.30b9	8d 19 0c	sta $0c19			sta 	MCharCount 					; clear character count to 0
.30bc	98		tya				tya
.30bd	48		pha				pha
.30be	a5 32		lda $32				lda 	tempShort 					; check if we are signed conversion
.30c0	10 10		bpl $30d2			bpl 	_I32TSUnsigned
.30c2	48		pha				pha 								; save base on stack.
.30c3	b5 68		lda $68,x			lda 	esInt3,x 					; is it actually negative
.30c5	10 08		bpl $30cf			bpl 	_I32TSNoFlip
.30c7	a9 2d		lda #$2d			lda 	#"-" 						; write a '-' prefix out.
.30c9	20 05 31	jsr $3105			jsr 	MI32WriteCharacter
.30cc	20 18 31	jsr $3118			jsr 	MInt32Negate 				; negate the value, so now it's positive.
.30cf					_I32TSNoFlip:
.30cf	68		pla				pla 								; get the base back
.30d0	29 7f		and #$7f			and 	#$7F 						; clear the sign flag so it's just a base now.
.30d2					_I32TSUnsigned:
.30d2	20 e0 30	jsr $30e0			jsr 	MI32DivideWrite 			; recursive code to output string.
.30d5	a0 00		ldy #$00			ldy 	#0 							; write charcount to first character.
.30d7	ad 19 0c	lda $0c19			lda 	MCharCount
.30da	91 2a		sta ($2a),y			sta 	(temp0),y
.30dc	68		pla				pla
.30dd	a8		tay				tay
.30de	68		pla				pla
.30df	60		rts				rts
.30e0					MI32DivideWrite:
.30e0	48		pha				pha 								; save the divisor/base
.30e1	e8		inx				inx 								; write in the dividing position.
.30e2	20 6d 31	jsr $316d			jsr 	MInt32Set8Bit
.30e5	ca		dex				dex
.30e6	20 58 2f	jsr $2f58			jsr 	MInt32UDivide 				; divide number by base.
.30e9	68		pla				pla 								; get the base into Y
.30ea	a8		tay				tay
.30eb	b5 52		lda $52,x			lda 	esInt0+2,x 					; get the remainder and push on the stack.
.30ed	48		pha				pha
.30ee	20 85 31	jsr $3185			jsr 	MInt32Zero 					; is the result zero ?
.30f1	f0 04		beq $30f7			beq 	_I32NoRecurse 				; if so, don't recurse.
.30f3	98		tya				tya 								; put base into A
.30f4	20 e0 30	jsr $30e0			jsr 	MI32DivideWrite 				; and jsr the dividor recursively.
.30f7					_I32NoRecurse:
.30f7	68		pla				pla 								; get the remainder back
.30f8	c9 0a		cmp #$0a			cmp 	#10  						; handle hexadecimals, now converting to ASCII
.30fa	90 02		bcc $30fe			bcc 	_I32NotHex
.30fc	69 06		adc #$06			adc 	#7-1
.30fe					_I32NotHex:
.30fe	18		clc				clc 								; make it ASCII
.30ff	69 30		adc #$30			adc 	#48
.3101	20 05 31	jsr $3105			jsr 	MI32WriteCharacter 			; write the character out
.3104	60		rts				rts 								; and exit.
.3105					MI32WriteCharacter:
.3105	ee 19 0c	inc $0c19			inc 	MCharCount 					; bump count (space for leading count)
.3108	ac 19 0c	ldy $0c19			ldy 	MCharCount 					; get position
.310b	91 2a		sta ($2a),y			sta 	(temp0),y 					; write out with trailing 0
.310d	c8		iny				iny
.310e	a9 00		lda #$00			lda 	#0
.3110	91 2a		sta ($2a),y			sta 	(temp0),y
.3112	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32unary.asm

>0c1a					MSeed32:	.fill 	4							; random number seed.
.3113					MInt32Absolute:
.3113	b5 68		lda $68,x			lda 	esInt3,x 					; use negate code if -ve.
.3115	30 01		bmi $3118			bmi 	MInt32Negate
.3117	60		rts				rts
.3118					MInt32Negate:
.3118	38		sec				sec 								; subtract from zero.
.3119	a9 00		lda #$00			lda 	#0
.311b	f5 50		sbc $50,x			sbc 	esInt0,x
.311d	95 50		sta $50,x			sta 	esInt0,x
.311f	a9 00		lda #$00			lda 	#0
.3121	f5 58		sbc $58,x			sbc 	esInt1,x
.3123	95 58		sta $58,x			sta 	esInt1,x
.3125	a9 00		lda #$00			lda 	#0
.3127	f5 60		sbc $60,x			sbc 	esInt2,x
.3129	95 60		sta $60,x			sta 	esInt2,x
.312b	a9 00		lda #$00			lda 	#0
.312d	f5 68		sbc $68,x			sbc 	esInt3,x
.312f	95 68		sta $68,x			sta 	esInt3,x
.3131	60		rts				rts
.3132					MInt32Not:
.3132	b5 50		lda $50,x			lda 	esInt0,x 					; one's complement all four.
.3134	49 ff		eor #$ff			eor 	#$FF
.3136	95 50		sta $50,x			sta 	esInt0,x
.3138	b5 58		lda $58,x			lda 	esInt1,x
.313a	49 ff		eor #$ff			eor 	#$FF
.313c	95 58		sta $58,x			sta 	esInt1,x
.313e	b5 60		lda $60,x			lda 	esInt2,x
.3140	49 ff		eor #$ff			eor 	#$FF
.3142	95 60		sta $60,x			sta 	esInt2,x
.3144	b5 68		lda $68,x			lda 	esInt3,x
.3146	49 ff		eor #$ff			eor 	#$FF
.3148	95 68		sta $68,x			sta 	esInt3,x
.314a	60		rts				rts
.314b					MInt32Sign:
.314b	b5 68		lda $68,x			lda 	esInt3,x					; look at MSB
.314d	30 0b		bmi $315a			bmi 	MInt32True 					; if set return -1 (true)
.314f	20 85 31	jsr $3185			jsr 	MInt32Zero 					; is it zero ?
.3152	f0 0a		beq $315e			beq 	MInt32False 				; if zero return 0 (false)
.3154	20 5e 31	jsr $315e			jsr 	MInt32False 				; > 0 return 1, by setting it to zero
.3157	f6 50		inc $50,x			inc 	esInt0,x  					; and bumping the LSB.
.3159	60		rts				rts
.315a					MInt32True:
.315a	a9 ff		lda #$ff			lda 	#$FF 						; set to $FFFFFFFF
.315c	d0 02		bne $3160			bne 	MInt32WriteAll
.315e					MInt32False:
.315e	a9 00		lda #$00			lda 	#0
.3160					MInt32WriteAll:
.3160	95 50		sta $50,x			sta 	esInt0,x
.3162					MInt32Write123:
.3162	95 58		sta $58,x			sta 	esInt1,x
.3164	95 60		sta $60,x			sta 	esInt2,x
.3166	95 68		sta $68,x			sta 	esInt3,x
.3168	a9 00		lda #$00			lda 	#$00						; and make it an integer
.316a	95 48		sta $48,x			sta 	esType,x
.316c	60		rts				rts
.316d					MInt32Set8Bit:
.316d	95 50		sta $50,x			sta 	esInt0,x 					; coopt above function to write
.316f	a9 00		lda #$00			lda 	#0 							; a value 0-255
.3171	f0 ef		beq $3162			beq		MInt32Write123
.3173					MInt32ShiftLeft:
.3173	16 50		asl $50,x			asl 	esInt0,x
.3175	36 58		rol $58,x			rol	 	esInt1,x
.3177	36 60		rol $60,x			rol	 	esInt2,x
.3179	36 68		rol $68,x			rol	 	esInt3,x
.317b	60		rts				rts
.317c					MInt32ShiftRight:
.317c	56 68		lsr $68,x			lsr 	esInt3,x
.317e	76 60		ror $60,x			ror 	esInt2,x
.3180	76 58		ror $58,x			ror 	esInt1,x
.3182	76 50		ror $50,x			ror 	esInt0,x
.3184	60		rts				rts
.3185					MInt32Zero:
.3185	b5 50		lda $50,x			lda 	esInt0,x
.3187	15 58		ora $58,x			ora 	esInt1,x
.3189	15 60		ora $60,x			ora 	esInt2,x
.318b	15 68		ora $68,x			ora 	esInt3,x
.318d	60		rts				rts
.318e					MInt32Random:
.318e	98		tya				tya
.318f	48		pha				pha
.3190	a0 07		ldy #$07			ldy 	#7 							; do it 7 times
.3192	ad 1a 0c	lda $0c1a			lda 	MSeed32+0 					; check the seed isn't zero
.3195	d0 03		bne $319a			bne 	_Random1
.3197	a8		tay				tay 								; if so do it 256 times
.3198	a9 aa		lda #$aa			lda		#$AA 						; and use this to seed the seed....
.319a					_Random1:
.319a	0a		asl a				asl 	a
.319b	2e 1b 0c	rol $0c1b			rol 	MSeed32+1
.319e	2e 1c 0c	rol $0c1c			rol 	MSeed32+2
.31a1	2e 1d 0c	rol $0c1d			rol 	MSeed32+3
.31a4	90 02		bcc $31a8			bcc 	_Random2
.31a6	49 c5		eor #$c5			eor 	#$C5
.31a8					_Random2:
.31a8	88		dey				dey
.31a9	d0 ef		bne $319a			bne 	_Random1
.31ab	8d 1a 0c	sta $0c1a			sta 	MSeed32+0 					; copy the seed in.
.31ae	95 50		sta $50,x			sta 	esInt0,x
.31b0	ad 1b 0c	lda $0c1b			lda 	MSeed32+1
.31b3	95 58		sta $58,x			sta 	esInt1,x
.31b5	ad 1c 0c	lda $0c1c			lda 	MSeed32+2
.31b8	95 60		sta $60,x			sta 	esInt2,x
.31ba	ad 1d 0c	lda $0c1d			lda 	MSeed32+3
.31bd	95 68		sta $68,x			sta 	esInt3,x
.31bf	68		pla				pla
.31c0	a8		tay				tay
.31c1	a9 00		lda #$00			lda 	#0
.31c3	95 48		sta $48,x			sta 	esType,x
.31c5	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/utility/check.asm

.31c6					CheckToken:
.31c6	d1 28		cmp ($28),y			cmp 	(codePtr),y
.31c8	d0 02		bne $31cc			bne 	_CTError
.31ca	c8		iny				iny
.31cb	60		rts				rts
.31cc					_CTError:
.31cc	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.31ce	20 e0 14	jsr $14e0		jsr	errorHandler
.31d1					CheckRightParen:
.31d1	b1 28		lda ($28),y			lda 	(codePtr),y
.31d3	c8		iny				iny
.31d4	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.31d6	d0 01		bne $31d9			bne 	_CRPError
.31d8	60		rts				rts
.31d9					_CRPError:
.31d9	a2 09		ldx #$09			ldx 	#ErrorID_MissingRP
.31db	20 e0 14	jsr $14e0		jsr	errorHandler
.31de					CheckComma:
.31de	b1 28		lda ($28),y			lda 	(codePtr),y
.31e0	c8		iny				iny
.31e1	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.31e3	d0 01		bne $31e6			bne 	_CCError
.31e5	60		rts				rts
.31e6					_CCError:
.31e6	a2 0a		ldx #$0a			ldx 	#ErrorID_MissingComma
.31e8	20 e0 14	jsr $14e0		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/utility/stack.asm

.0037					rsPointer:
>0037							.fill 	2							; to TOS, which is the current top-token.
.31eb					RSReset:
.31eb	a9 ff		lda #$ff			lda 	#(returnStack+retStackSize-1) & $FF
.31ed	85 37		sta $37				sta 	rsPointer
.31ef	a9 09		lda #$09			lda 	#(returnStack+retStackSize-1) >> 8
.31f1	85 38		sta $38				sta 	1+(rsPointer)
.31f3	a9 ff		lda #$ff			lda 	#$FF 						; put a duff marker on TOS, so nothing will pop
.31f5	8d ff 09	sta $09ff			sta 	returnStack+retStackSize-1
.31f8	60		rts				rts
.31f9					RSClaim:
.31f9	84 32		sty $32				sty 	tempShort 					; preserve Y
.31fb	48		pha				pha 								; save marker on stack.
.31fc	8a		txa				txa 								; get bytes required.
.31fd	38		sec				sec
.31fe	49 ff		eor #$ff			eor 	#$FF 						; add to rsPointer using 2's complement.
.3200	65 37		adc $37				adc 	rsPointer
.3202	85 37		sta $37				sta 	rsPointer
.3204	a5 38		lda $38				lda 	rsPointer+1
.3206	69 ff		adc #$ff			adc 	#$FF
.3208	85 38		sta $38				sta 	rsPointer+1
.320a	c9 08		cmp #$08			cmp 	#returnStack>>8 			; overflow. underflow actually :)
.320c	90 08		bcc $3216			bcc 	_RSCOverflow
.320e	68		pla				pla 								; get marker back
.320f	a0 00		ldy #$00			ldy 	#0 							; write marker out.
.3211	91 37		sta ($37),y			sta 	(rsPointer),y
.3213	a4 32		ldy $32				ldy 	tempShort 					; restore Y and exit
.3215	60		rts				rts
.3216					_RSCOverflow:
.3216	a2 16		ldx #$16			ldx 	#ErrorID_RetStack
.3218	20 e0 14	jsr $14e0		jsr	errorHandler
.321b					RSFree:
.321b	18		clc				clc
.321c	65 37		adc $37				adc 	rsPointer
.321e	85 37		sta $37				sta 	rsPointer
.3220	90 02		bcc $3224			bcc 	_RSFExit
.3222	e6 38		inc $38				inc 	rsPointer+1
.3224					_RSFExit:
.3224	60		rts				rts
.3225					RSSavePosition:
.3225	84 32		sty $32				sty 	tempShort 					; save Y position
.3227	a8		tay				tay 								; this is where we write it.
.3228	a5 28		lda $28				lda 	codePtr 					; write codePointer out
.322a	91 37		sta ($37),y			sta 	(rsPointer),y
.322c	c8		iny				iny
.322d	a5 29		lda $29				lda 	codePtr+1
.322f	91 37		sta ($37),y			sta 	(rsPointer),y
.3231	c8		iny				iny
.3232	a5 32		lda $32				lda 	tempShort 					; write the Y position out.
.3234	91 37		sta ($37),y			sta 	(rsPointer),y
.3236	a8		tay				tay 								; fix Y back again to original value
.3237	60		rts				rts
.3238					RSLoadPosition:
.3238	a8		tay				tay
.3239	b1 37		lda ($37),y			lda 	(rsPointer),y 				; read codePointer back
.323b	85 28		sta $28				sta 	codePtr
.323d	c8		iny				iny
.323e	b1 37		lda ($37),y			lda 	(rsPointer),y
.3240	85 29		sta $29				sta 	codePtr+1
.3242	c8		iny				iny
.3243	b1 37		lda ($37),y			lda 	(rsPointer),y 				; and the offset
.3245	a8		tay				tay 								; to Y
.3246	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/utility/warmstart.asm

.3247					WarmStart:
.3247	a2 02		ldx #$02		ldx	#2
.3249	20 c1 1b	jsr $1bc1		jsr	interactionHandler

;******  Return to file: main/main.asm

.324c					mainHandler:
.324c	7c 4f 32	jmp ($324f,x)			jmp 	(mainVectors,x)
.324f					mainVectors:
>324f	d1 31					.word CheckRightParen      ; index 0
>3251	c6 23					.word XCommandClear        ; index 2
>3253	e7 2a					.word LinkEvaluate         ; index 4
>3255	f3 2a					.word LinkEvaluateInteger  ; index 6
>3257	f9 2a					.word LinkEvaluateSmallInt ; index 8
>3259	ed 2a					.word LinkEvaluateTerm     ; index 10
>325b	ad 30					.word MLInt32ToString      ; index 12
>325d	55 25					.word Command_XNew         ; index 14
>325f	63 25					.word XCommand_Run         ; index 16
>3261	6f 25					.word Command_RunFrom      ; index 18
>3263	c5 2f					.word LinkInt32FromString  ; index 20

;******  Return to file: basic.asm

.3265					section_end_main:
.3265					section_start_string:

;******  Processing file: string/string.asm


;******  Processing file: string/functions/chr.asm

.3265					StringChrs:
.3265	aa		tax				tax 								; set up stack
.3266	a9 02		lda #$02			lda 	#2
.3268	20 28 33	jsr $3328			jsr 	AllocateSoftString
.326b	98		tya				tya
.326c	20 4e 33	jsr $334e			jsr 	WriteSoftString
.326f					StringUpdate:
.326f	20 7d 32	jsr $327d			jsr 	ReturnSoftString
.3272	8a		txa				txa
.3273	60		rts				rts
.3274					StringNull:
.3274	aa		tax				tax
.3275	a9 01		lda #$01			lda 	#1
.3277	20 28 33	jsr $3328			jsr 	AllocateSoftString
.327a	4c 6f 32	jmp $326f			jmp 	StringUpdate
.327d					ReturnSoftString:
.327d	a5 39		lda $39				lda 	softMemAlloc 				; copy address
.327f	95 50		sta $50,x			sta 	esInt0,x
.3281	a5 3a		lda $3a				lda 	softMemAlloc+1
.3283	95 58		sta $58,x			sta 	esInt1,x
.3285	a9 00		lda #$00			lda 	#0 							; zero upper bytes
.3287	95 60		sta $60,x			sta 	esInt2,x
.3289	95 68		sta $68,x			sta 	esInt3,x
.328b	a9 40		lda #$40			lda 	#$40 						; type string.
.328d	95 48		sta $48,x			sta 	esType,x
.328f	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/functions/compare.asm

.3290					STRCompare:
.3290	48		pha				pha 								; save A
.3291	aa		tax				tax 								; put stack pos in X
.3292	98		tya				tya
.3293	48		pha				pha
.3294	20 c8 32	jsr $32c8			jsr 	CopyStringPair 				; copy strings to temp0,temp1
.3297	a0 00		ldy #$00			ldy 	#0 							; get the smaller of the two string sizes.
.3299	b1 2a		lda ($2a),y			lda 	(temp0),y
.329b	d1 2c		cmp ($2c),y			cmp 	(temp1),y
.329d	90 02		bcc $32a1			bcc 	_SCNotSmaller
.329f	b1 2c		lda ($2c),y			lda 	(temp1),y
.32a1					_SCNotSmaller:
.32a1	aa		tax				tax 								; put that in X. We compare this many chars first.
.32a2					_SCCompareLoop:
.32a2	e0 00		cpx #$00			cpx 	#0 							; if compared all the smaller, then it is the shorter
.32a4	f0 0c		beq $32b2			beq 	_SCSameToEndShortest 		; one that is the smallest if they are different lengths.
.32a6	ca		dex				dex 								; decrement chars to compare.
.32a7	c8		iny				iny 								; move to next character
.32a8	38		sec				sec 								; calculate s1[y]-s2[y]
.32a9	b1 2a		lda ($2a),y			lda 	(temp0),y
.32ab	f1 2c		sbc ($2c),y			sbc 	(temp1),y
.32ad	d0 0a		bne $32b9			bne 	_SCReturnResult 			; if different return sign of A
.32af	4c a2 32	jmp $32a2			jmp 	_SCCompareLoop
.32b2					_SCSameToEndShortest
.32b2	a0 00		ldy #$00			ldy 	#0 							; compare len(s1) - len(s2)
.32b4	38		sec				sec
.32b5	b1 2a		lda ($2a),y			lda 	(temp0),y
.32b7	f1 2c		sbc ($2c),y			sbc 	(temp1),y
.32b9					_SCReturnResult:
.32b9	08		php				php 								; set return to zero preserving PSW.
.32ba	a2 00		ldx #$00			ldx 	#0
.32bc	28		plp				plp
.32bd	f0 05		beq $32c4			beq 	_SCExit 					; two values equal, then exit
.32bf	ca		dex				dex 								; X = $FF
.32c0	90 02		bcc $32c4			bcc 	_SCExit 					; if 1st < 2nd then -1
.32c2	a2 01		ldx #$01			ldx 	#1 							; X = $01 if greater
.32c4					_SCExit:
.32c4	68		pla				pla
.32c5	a8		tay				tay
.32c6	68		pla				pla
.32c7	60		rts				rts
.32c8					CopyStringPair:
.32c8	b5 51		lda $51,x			lda 	esInt0+1,x
.32ca	85 2c		sta $2c				sta 	temp1
.32cc	b5 59		lda $59,x			lda 	esInt1+1,x
.32ce	85 2d		sta $2d				sta 	temp1+1
.32d0					CopyStringTop:
.32d0	b5 50		lda $50,x			lda 	esInt0,x
.32d2	85 2a		sta $2a				sta 	temp0
.32d4	b5 58		lda $58,x			lda 	esInt1,x
.32d6	85 2b		sta $2b				sta 	temp0+1
.32d8	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/functions/concat.asm

.32d9					StringConcat:
.32d9	aa		tax				tax									; stack pos in X
.32da	98		tya				tya
.32db	48		pha				pha
.32dc	20 c8 32	jsr $32c8			jsr 	CopyStringPair 				; temp0 and temp1 point to strings to concat.
.32df	38		sec				sec 								; calculate alloc strings. lengths added + 1 for size.
.32e0	a0 00		ldy #$00			ldy 	#0
.32e2	b1 2a		lda ($2a),y			lda 	(temp0),y
.32e4	71 2c		adc ($2c),y			adc 	(temp1),y
.32e6	b0 1c		bcs $3304			bcs 	_SCError 					; just too many characters here.
.32e8	c9 fc		cmp #$fc			cmp 	#MaxStringSize
.32ea	b0 18		bcs $3304			bcs 	_SCError
.32ec	20 28 33	jsr $3328			jsr 	AllocateSoftString 			; allocate soft string memory, set pointer.
.32ef	20 1f 33	jsr $331f			jsr 	CopySoftToStack 			; copy that to the stack.
.32f2	20 09 33	jsr $3309			jsr 	SCCopyTemp0 				; copy temp0
.32f5	a5 2c		lda $2c				lda 	temp1 						; copy temp1 to temp0
.32f7	85 2a		sta $2a				sta 	temp0
.32f9	a5 2d		lda $2d				lda 	temp1+1
.32fb	85 2b		sta $2b				sta 	temp0+1
.32fd	20 09 33	jsr $3309			jsr 	SCCopyTemp0 				; copy temp0 e.g. what was temp1.
.3300	68		pla				pla
.3301	a8		tay				tay
.3302	8a		txa				txa 								; and A
.3303	60		rts				rts
.3304					_SCError:
.3304	a2 0d		ldx #$0d			ldx 	#ErrorID_StrLen
.3306	20 e0 14	jsr $14e0		jsr	errorHandler
.3309					SCCopyTemp0:
.3309	a0 00		ldy #$00			ldy 	#0 							; put count in temp2
.330b	b1 2a		lda ($2a),y			lda 	(temp0),y
.330d	85 2e		sta $2e				sta 	temp2
.330f					_SCCopyLoop:
.330f	a5 2e		lda $2e				lda 	temp2 						; done the lot
.3311	f0 0b		beq $331e			beq 	_SCCopyExit
.3313	c6 2e		dec $2e				dec 	temp2
.3315	c8		iny				iny 								; get next char
.3316	b1 2a		lda ($2a),y			lda 	(temp0),y
.3318	20 4e 33	jsr $334e			jsr 	WriteSoftString 			; write to soft string.
.331b	4c 0f 33	jmp $330f			jmp 	_SCCopyLoop
.331e					_SCCopyExit:
.331e	60		rts				rts
.331f					CopySoftToStack:
.331f	a5 39		lda $39				lda 	SoftMemAlloc 				; copy the memory allocation pointer to the stack.
.3321	95 50		sta $50,x			sta 	esInt0,x 					; type is already string.
.3323	a5 3a		lda $3a				lda 	SoftMemAlloc+1
.3325	95 58		sta $58,x			sta 	esInt1,x
.3327	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/functions/memory.asm

.0039					softMemAlloc:
>0039							.fill 	2  							; if MSB is zero needs resetting on allocation.
.3328					AllocateSoftString:
.3328	85 32		sta $32				sta 	tempShort 					; save count
.332a	98		tya				tya
.332b	48		pha				pha
.332c	a5 3a		lda $3a				lda 	softMemAlloc+1 				; if the high byte is zero, it needs allocating.
.332e	d0 09		bne $3339			bne 	_ASSDone
.3330	a5 33		lda $33				lda 	highMemory 					; reset the soft memory alloc pointer.
.3332	85 39		sta $39				sta 	softMemAlloc 				; to speed up slightly, we only reset this when we first need it
.3334	a4 34		ldy $34				ldy 	highMemory+1 				; but it needs to be reset before each command.
.3336	88		dey				dey 								; it is set to 1/4k below high memory, allowing space
.3337	84 3a		sty $3a				sty 	softMemAlloc+1 				; for a concreted string.
.3339					_ASSDone:
.3339	38		sec				sec 								; allocate downwards enough memory
.333a	a5 39		lda $39				lda 	softMemAlloc 				; subtract the memory requirements in A from
.333c	e5 32		sbc $32				sbc 	tempShort 					; the soft memory pointer
.333e	85 39		sta $39				sta 	softMemAlloc
.3340	a5 3a		lda $3a				lda 	softMemAlloc+1
.3342	e9 00		sbc #$00			sbc 	#0
.3344	85 3a		sta $3a				sta 	softMemAlloc+1
.3346	a9 00		lda #$00			lda 	#0 							; empty that string, set the length = 0.
.3348	a8		tay				tay
.3349	91 39		sta ($39),y			sta 	(softMemAlloc),y
.334b	68		pla				pla
.334c	a8		tay				tay
.334d	60		rts				rts
.334e					WriteSoftString:
.334e	84 32		sty $32				sty 	tempShort 					; save Y
.3350	48		pha				pha 								; save character on stack
.3351	a0 00		ldy #$00			ldy 	#0 							; get and bump length
.3353	b1 39		lda ($39),y			lda 	(softMemAlloc),y
.3355	18		clc				clc
.3356	69 01		adc #$01			adc 	#1
.3358	91 39		sta ($39),y			sta 	(softMemAlloc),y
.335a	a8		tay				tay 								; offset in Y
.335b	68		pla				pla 								; get char and write.
.335c	91 39		sta ($39),y			sta 	(softMemAlloc),y
.335e	a4 32		ldy $32				ldy 	tempShort 					; restore Y and exit.
.3360	60		rts				rts
.3361					StrClone:
.3361	aa		tax				tax 								; set up stack.
.3362	98		tya				tya
.3363	48		pha				pha
.3364	a0 00		ldy #$00			ldy 	#0 							; get length, add 1 for length
.3366	b1 2a		lda ($2a),y			lda 	(temp0),y 					; this is the bytes required.
.3368	18		clc				clc
.3369	69 01		adc #$01			adc 	#1
.336b	20 28 33	jsr $3328			jsr 	AllocateSoftString 			; allocate soft memory
.336e	a5 39		lda $39				lda 	softMemAlloc 				; copy that address to TOS
.3370	95 50		sta $50,x			sta 	esInt0,x
.3372	a5 3a		lda $3a				lda 	softMemAlloc+1
.3374	95 58		sta $58,x			sta 	esInt1,x
.3376	a9 00		lda #$00			lda 	#0 							; zero upper 2 bytes
.3378	95 60		sta $60,x			sta 	esInt2,x
.337a	95 68		sta $68,x			sta 	esInt3,x
.337c	a9 40		lda #$40			lda 	#$40 						; set type to string.
.337e	95 48		sta $48,x			sta 	esType,x
.3380	20 09 33	jsr $3309			jsr 	SCCopyTemp0 				; copy temp0 string to soft memory copy (concat.asm)
.3383	68		pla				pla
.3384	a8		tay				tay
.3385	8a		txa				txa
.3386	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/functions/setcase.asm

.3387					CaseString:
.3387	48		pha				pha 								; save A and copy to X
.3388	aa		tax				tax
.3389	98		tya				tya
.338a	48		pha				pha
.338b	20 d0 32	jsr $32d0			jsr 	CopyStringTop 				; target string -> temp0
.338e	a0 00		ldy #$00			ldy 	#0
.3390	b1 2a		lda ($2a),y			lda 	(temp0),y  					; get length,
.3392	18		clc				clc
.3393	69 01		adc #$01			adc 	#1 							; one more for length byte
.3395	20 28 33	jsr $3328			jsr 	AllocateSoftString 			; allocate soft string memory, set pointer.
.3398	20 1f 33	jsr $331f			jsr 	CopySoftToStack 			; copy that to the stack.
.339b	a0 00		ldy #$00			ldy 	#0
.339d	b1 2a		lda ($2a),y			lda 	(temp0),y 					; count to copy in X
.339f	aa		tax				tax
.33a0					_CSCopy:
.33a0	e0 00		cpx #$00			cpx 	#0 							; finished if 0.
.33a2	f0 24		beq $33c8			beq 	_CSExit
.33a4	ca		dex				dex
.33a5	c8		iny				iny
.33a6	68		pla				pla 								; check direction
.33a7	48		pha				pha
.33a8	f0 0c		beq $33b6			beq 	_CSUpper
.33aa	b1 2a		lda ($2a),y			lda 	(temp0),y 					; lower$() code
.33ac	c9 41		cmp #$41			cmp 	#"A"
.33ae	90 12		bcc $33c2			bcc 	_CSWrite
.33b0	c9 5b		cmp #$5b			cmp 	#"Z"+1
.33b2	b0 0e		bcs $33c2			bcs 	_CSWrite
.33b4	90 0a		bcc $33c0			bcc 	_CSFlipWrite
.33b6					_CSUpper:
.33b6	b1 2a		lda ($2a),y			lda 	(temp0),y 					; upper$() code
.33b8	c9 61		cmp #$61			cmp 	#"a"
.33ba	90 06		bcc $33c2			bcc 	_CSWrite
.33bc	c9 7b		cmp #$7b			cmp 	#"z"+1
.33be	b0 02		bcs $33c2			bcs 	_CSWrite
.33c0					_CSFlipWrite:
.33c0	49 20		eor #$20			eor 	#"A"^"a" 					; switch case.
.33c2					_CSWrite:
.33c2	20 4e 33	jsr $334e			jsr 	WriteSoftString 			; add to soft string.
.33c5	4c a0 33	jmp $33a0			jmp 	_CSCopy
.33c8					_CSExit:
.33c8	68		pla				pla
.33c9	a8		tay				tay
.33ca	68		pla				pla
.33cb	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/functions/substring.asm

.33cc					StringSubstring:
.33cc	48		pha				pha
.33cd	aa		tax				tax 								; access stack.
.33ce	98		tya				tya
.33cf	48		pha				pha
.33d0	20 d0 32	jsr $32d0			jsr 	CopyStringTop 				; point temp0 to the string.
.33d3	a0 00		ldy #$00			ldy 	#0 							; get length.
.33d5	b1 2a		lda ($2a),y			lda 	(temp0),Y
.33d7	85 2c		sta $2c				sta 	temp1
.33d9	b5 51		lda $51,x			lda 	esInt0+1,x 					; get the initial offset
.33db	c5 2c		cmp $2c				cmp 	temp1 						; return "" if > length.
.33dd	f0 02		beq $33e1			beq 	_SSBOkay
.33df	b0 2a		bcs $340b			bcs 	_SSBReturnNull
.33e1					_SSBOkay:
.33e1	a5 2c		lda $2c				lda 	temp1 						; get the total length +1
.33e3	18		clc				clc
.33e4	69 01		adc #$01			adc 	#1
.33e6	38		sec				sec
.33e7	f5 51		sbc $51,x			sbc 	esInt0+1,x 					; the anything >= this is bad - max size
.33e9	d5 52		cmp $52,x			cmp 	esInt0+2,x  				; check bad >= required
.33eb	90 02		bcc $33ef			bcc		_SSBTrunc
.33ed	b5 52		lda $52,x			lda 	esInt0+2,x
.33ef					_SSBTrunc:
.33ef	85 2d		sta $2d				sta 	temp1+1 					; characters to copy.
.33f1	18		clc				clc
.33f2	69 01		adc #$01			adc 	#1 							; add 1
.33f4	20 28 33	jsr $3328			jsr 	AllocateSoftString 			; allocate soft string memory, set pointer.
.33f7	20 1f 33	jsr $331f			jsr 	CopySoftToStack 			; copy that to the stack.
.33fa	b4 51		ldy $51,x			ldy 	esInt0+1,x 					; get initial position of char to copy
.33fc					_SSBCopyLoop:
.33fc	a5 2d		lda $2d				lda 	temp1+1 					; done them all
.33fe	f0 0e		beq $340e			beq 	_SSBExit
.3400	c6 2d		dec $2d				dec 	temp1+1
.3402	b1 2a		lda ($2a),y			lda 	(temp0),y 					; get and write character
.3404	20 4e 33	jsr $334e			jsr 	WriteSoftString
.3407	c8		iny				iny
.3408	4c fc 33	jmp $33fc			jmp 	_SSBCopyLoop
.340b					_SSBReturnNull:
.340b	20 12 34	jsr $3412			jsr 	ReturnNull
.340e					_SSBExit:
.340e	68		pla				pla
.340f	a8		tay				tay
.3410	68		pla				pla
.3411	60		rts				rts
.3412					ReturnNull:
.3412	a9 00		lda #$00			lda 	#0 							; clear null string
.3414	8d ce 0a	sta $0ace			sta 	NullString
.3417	a9 ce		lda #$ce			lda 	#NullString & $FF 			; set a pointer to it
.3419	95 50		sta $50,x			sta 	esInt0,x
.341b	a9 0a		lda #$0a			lda 	#NullString >> 8
.341d	95 58		sta $58,x			sta 	esInt1,x
.341f	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/functions/write.asm

.0c1e					srcStrLen:
>0c1e							.fill 	1
.3420					StringWrite:
.3420	aa		tax				tax
.3421	48		pha				pha
.3422	98		tya				tya
.3423	48		pha				pha
.3424	20 4b 34	jsr $344b			jsr 	CheckOverwriteCurrent
.3427	b0 0d		bcs $3436			bcs		_SWCopyCurrent
.3429	20 89 34	jsr $3489			jsr 	RequiresConcretion
.342c	90 0e		bcc $343c			bcc 	_SWWriteReference
.342e	20 ec 34	jsr $34ec			jsr 	CheckSpecialConcretion
.3431	b0 09		bcs $343c			bcs 	_SWWriteReference
.3433	20 9d 34	jsr $349d			jsr 	AllocateHardMemory
.3436					_SWCopyCurrent:
.3436	20 d0 34	jsr $34d0			jsr 	CopyStringToHardMemory
.3439	4c 47 34	jmp $3447			jmp 	_SWExit
.343c					_SWWriteReference
.343c	a0 00		ldy #$00			ldy 	#0
.343e	a5 2a		lda $2a				lda 	temp0
.3440	91 2c		sta ($2c),y			sta 	(temp1),y
.3442	c8		iny				iny
.3443	a5 2b		lda $2b				lda 	temp0+1
.3445	91 2c		sta ($2c),y			sta 	(temp1),y
.3447					_SWExit:
.3447	68		pla				pla
.3448	a8		tay				tay
.3449	68		pla				pla
.344a	60		rts				rts
.344b					CheckOverwriteCurrent:
.344b	a0 00		ldy #$00			ldy 	#0 						; get address of string being written to temp0
.344d	b5 59		lda $59,x			lda 	esInt1+1,x
.344f	85 2b		sta $2b				sta 	temp0+1
.3451	b5 51		lda $51,x			lda 	esInt0+1,x
.3453	85 2a		sta $2a				sta 	temp0
.3455	b1 2a		lda ($2a),y			lda 	(temp0),y 				; get length of string being copied and save it.
.3457	8d 1e 0c	sta $0c1e			sta 	srcStrLen
.345a	b5 50		lda $50,x			lda 	esInt0,x 				; copy where the final address it being written to temp1.
.345c	85 2c		sta $2c				sta 	temp1 					; e.g. if it is ax$ then temp1 will point to the ax$
.345e	b5 58		lda $58,x			lda 	esInt1,x 				; data record + 5
.3460	85 2d		sta $2d				sta 	temp1+1
.3462	a0 01		ldy #$01			ldy 	#1 						; get the MSB of the address of string currently stored there.
.3464	b1 2c		lda ($2c),y			lda 	(temp1),y
.3466	c5 34		cmp $34				cmp 	highMemory+1 			; if < high memory then it cannot be something stored
.3468	90 1b		bcc $3485			bcc 	_COCFail 				; in hard memory.
.346a	a0 00		ldy #$00			ldy 	#0 						; copy target address - 1 into temp2
.346c	b1 2c		lda ($2c),y			lda 	(temp1),y 				; when allocating hard memory, the overall size is
.346e	e9 01		sbc #$01			sbc 	#1 						; in the previous byte.
.3470	85 2e		sta $2e				sta 	temp2
.3472	c8		iny				iny
.3473	b1 2c		lda ($2c),y			lda 	(temp1),y
.3475	e9 00		sbc #$00			sbc 	#0
.3477	85 2f		sta $2f				sta 	temp2+1
.3479	a0 00		ldy #$00			ldy 	#0 						; how large is this physical chunk.
.347b	b1 2e		lda ($2e),y			lda 	(temp2),y
.347d	38		sec				sec  							; maximum character capacity.
.347e	e9 02		sbc #$02			sbc 	#2
.3480	cd 1e 0c	cmp $0c1e			cmp 	srcStrLen 				; if >= the required length
.3483	b0 02		bcs $3487			bcs 	_COCCanReuse
.3485					_COCFail:
.3485	18		clc				clc
.3486	60		rts				rts
.3487					_COCCanReuse:
.3487	38		sec				sec
.3488	60		rts				rts
.3489					RequiresConcretion:
.3489	a5 2b		lda $2b				lda 	temp0+1 				; get MSB of address of string to be written
.348b	c5 34		cmp $34				cmp 	highMemory+1 			; if >= high memory it is concreted
.348d	b0 0a		bcs $3499			bcs 	_RCSucceed 				; so it needs concreting again - duplication.
.348f	a5 3a		lda $3a				lda 	softMemAlloc+1 			; have we allocated any soft memory yet ?
.3491	f0 08		beq $349b			beq 	_RCFail 				; if not, this cannot be soft memory.
.3493	a5 2b		lda $2b				lda 	temp0+1 				; get MSB of address of string to be written
.3495	c5 3a		cmp $3a				cmp 	softMemAlloc+1 			; if >= soft mem alloc it is either soft
.3497	90 02		bcc $349b			bcc 	_RCFail 				; so concreting
.3499					_RCSucceed:
.3499	38		sec				sec
.349a	60		rts				rts
.349b					_RCFail:
.349b	18		clc				clc
.349c	60		rts				rts
.349d					AllocateHardMemory:
.349d	98		tya				tya
.349e	48		pha				pha
.349f	ad 1e 0c	lda $0c1e			lda 	srcStrLen 				; characters in string
.34a2	69 0a		adc #$0a			adc 	#1+1+8 					; one for hard memory size, one for string size, extra for expansion
.34a4	b0 04		bcs $34aa			bcs 	_AHMSetMax 				; max out that amount.
.34a6	c9 fe		cmp #$fe			cmp 	#MaxStringSize+2
.34a8	90 02		bcc $34ac			bcc 	_AHMIsOkay
.34aa					_AHMSetMax:
.34aa	a9 fe		lda #$fe			lda 	#MaxStringSize+2
.34ac					_AHMIsOkay:
.34ac	48		pha				pha	 							; save size to be allocated
.34ad	49 ff		eor #$ff			eor 	#$FF 					; complement and add to high Memory
.34af	38		sec				sec  							; and copy result to TOS as target address.
.34b0	65 33		adc $33				adc 	highMemory
.34b2	85 33		sta $33				sta 	highMemory
.34b4	a5 34		lda $34				lda 	highMemory+1
.34b6	69 ff		adc #$ff			adc 	#$FF
.34b8	85 34		sta $34				sta 	highMemory+1
.34ba	a0 00		ldy #$00			ldy 	#0 						; Y = 0
.34bc	68		pla				pla 							; get the total size of the storage block
.34bd	91 33		sta ($33),y			sta 	(highMemory),y 			; and set it
.34bf	18		clc				clc
.34c0	a5 33		lda $33				lda		highMemory 				; point the target address to the byte after this.
.34c2	69 01		adc #$01			adc 	#1
.34c4	91 2c		sta ($2c),y			sta 	(temp1),y
.34c6	a5 34		lda $34				lda 	highMemory+1
.34c8	69 00		adc #$00			adc 	#0
.34ca	c8		iny				iny
.34cb	91 2c		sta ($2c),y			sta 	(temp1),y
.34cd	68		pla				pla
.34ce	a8		tay				tay
.34cf	60		rts				rts
.34d0					CopyStringToHardMemory:
.34d0	98		tya				tya
.34d1	48		pha				pha
.34d2	a0 00		ldy #$00			ldy 	#0 						; copy target address to temp2
.34d4	b1 2c		lda ($2c),y			lda 	(temp1),y
.34d6	85 2e		sta $2e				sta 	temp2
.34d8	c8		iny				iny
.34d9	b1 2c		lda ($2c),y			lda 	(temp1),y
.34db	85 2f		sta $2f				sta 	temp2+1
.34dd	ac 1e 0c	ldy $0c1e			ldy 	srcStrLen 				; copy this + 1 characters, (length too) hence $FF compare
.34e0					_CSTHMLoop:
.34e0	b1 2a		lda ($2a),y			lda 	(temp0),y
.34e2	91 2e		sta ($2e),y			sta 	(temp2),y
.34e4	88		dey				dey
.34e5	c0 ff		cpy #$ff			cpy 	#$FF 					; this does the +1
.34e7	d0 f7		bne $34e0			bne 	_CSTHMLoop
.34e9	68		pla				pla
.34ea	a8		tay				tay
.34eb	60		rts				rts
.34ec					CheckSpecialConcretion:
.34ec	ad 1e 0c	lda $0c1e			lda 	srcStrLen 				; check string is null e.g. length = 0
.34ef	f0 02		beq $34f3			beq 	_CSCNullString
.34f1	18		clc				clc
.34f2	60		rts				rts
.34f3					_CSCNullString:
.34f3	a9 00		lda #$00			lda 	#0 						; by always returning this address we don't waste
.34f5	8d ce 0a	sta $0ace			sta 	NullString		 		; storage on null strings.
.34f8	a9 ce		lda #$ce			lda 	#(NullString) & $FF
.34fa	85 2a		sta $2a				sta 	temp0
.34fc	a9 0a		lda #$0a			lda 	#(NullString) >> 8
.34fe	85 2b		sta $2b				sta 	1+(temp0)
.3500	38		sec				sec
.3501	60		rts				rts

;******  Return to file: string/string.asm

.3502					stringHandler:
.3502	7c 05 35	jmp ($3505,x)			jmp 	(stringVectors,x)
.3505					stringVectors:
>3505	65 32					.word StringChrs           ; index 0
>3507	61 33					.word StrClone             ; index 2
>3509	d9 32					.word StringConcat         ; index 4
>350b	74 32					.word StringNull           ; index 6
>350d	90 32					.word STRCompare           ; index 8
>350f	87 33					.word CaseString           ; index 10
>3511	cc 33					.word StringSubstring      ; index 12
>3513	20 34					.word StringWrite          ; index 14

;******  Return to file: basic.asm

.3515					section_end_string:
.3515					section_start_tokeniser:

;******  Processing file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/detokenise/detokenise.asm

.0c1f					deTokeniseVector:
>0c1f							.fill 	2
.0c21					lastCharacterClass:
>0c21							.fill 	1
.0c22					indent:
>0c22							.fill 	1
.3515					ListLine:
.3515	48		pha				pha								; enter here to list to console. sets the output vector
.3516	a9 4a		lda #$4a			lda 	#(deTokenPrint) & $FF
.3518	8d 1f 0c	sta $0c1f			sta 	deTokeniseVector
.351b	a9 36		lda #$36			lda 	#(deTokenPrint) >> 8
.351d	8d 20 0c	sta $0c20			sta 	1+(deTokeniseVector)
.3520	68		pla				pla
.3521					Detokenise:
.3521	18		clc				clc 							; space required for line number.
.3522	69 06		adc #$06			adc 	#6
.3524	8d 22 0c	sta $0c22			sta 	indent
.3527	a9 ff		lda #$ff			lda 	#$FF 					; last thing printed is a dummy value.
.3529	8d 21 0c	sta $0c21			sta 	lastCharacterClass
.352c	a2 02		ldx #$02			ldx 	#2
.352e	20 5e 31	jsr $315e			jsr 	MInt32False
.3531	a0 01		ldy #$01			ldy 	#1 						; copy line number to stack,2 (as using stack 0,1 for list range)
.3533	b1 28		lda ($28),y			lda 	(codePtr),y
.3535	95 50		sta $50,x			sta 	esInt0,x
.3537	c8		iny				iny
.3538	b1 28		lda ($28),y			lda 	(codePtr),y
.353a	95 58		sta $58,x			sta 	esInt1,x
.353c	a9 84		lda #$84			lda 	#LTYLineNumber
.353e	20 25 36	jsr $3625			jsr 	ListOutputCharacter
.3541	a9 0a		lda #$0a			lda 	#10 					; base 10
.3543	20 e9 35	jsr $35e9			jsr 	DTPrintInteger 			; print as integer.
.3546	a0 00		ldy #$00			ldy 	#0 						; get length
.3548	b1 2a		lda ($2a),y			lda 	(temp0),y 				; into X
.354a	aa		tax				tax
.354b					_DTPadOut:
.354b	a9 20		lda #$20			lda 	#" " 					; pad out to indent.
.354d	20 25 36	jsr $3625			jsr 	ListOutputCharacter
.3550	e8		inx				inx
.3551	ec 22 0c	cpx $0c22			cpx 	indent
.3554	d0 f5		bne $354b			bne 	_DTPadOut
.3556	a0 03		ldy #$03			ldy 	#3 						; start position.
.3558					_DTListLoop
.3558	b1 28		lda ($28),y			lda 	(codePtr),y
.355a	c9 85		cmp #$85			cmp 	#TOK_STR 				; Inline string.
.355c	f0 5e		beq $35bc			beq 	_DTIsString
.355e	c9 84		cmp #$84			cmp 	#TOK_FPC 				; Floating point
.3560	f0 56		beq $35b8			beq 	_DTIsFloat
.3562	c9 c5		cmp #$c5			cmp 	#TKW_AMP 				; & hex marker
.3564	f0 16		beq $357c			beq 	_DTHexConstant
.3566	c9 80		cmp #$80			cmp 	#TOK_EOL 				; End of Line
.3568	d0 06		bne $3570			bne 	_DTNotEnd
.356a	a9 ff		lda #$ff			lda 	#255 					; print CR
.356c	20 25 36	jsr $3625			jsr 	ListOutputCharacter
.356f	60		rts				rts
.3570					_DTNotEnd:
.3570	c9 00		cmp #$00			cmp 	#0
.3572	30 38		bmi $35ac			bmi 	_DTIsToken
.3574	c9 40		cmp #$40			cmp 	#$40
.3576	90 3a		bcc $35b2			bcc 	_DTIsIdentifier
.3578	a9 0a		lda #$0a			lda 	#10 					; this is the base, unsigned decimal
.357a	d0 0d		bne $3589			bne 	_DTConstant
.357c					_DTHexConstant:
.357c	a9 26		lda #$26			lda 	#"&"
.357e	20 25 36	jsr $3625			jsr 	ListOutputCharacter
.3581	c8		iny				iny
.3582	a9 01		lda #$01			lda 	#1 						; switch to spaces so &xxxx is treated like a number.
.3584	20 66 36	jsr $3666			jsr 	DTSwitchMode
.3587	a9 10		lda #$10			lda 	#16						; print line unsigned hex
.3589					_DTConstant:
.3589	48		pha				pha
.358a	a9 00		lda #$00			lda 	#0 						; now constant, may need spaces
.358c	20 66 36	jsr $3666			jsr 	DTSwitchMode
.358f	a9 86		lda #$86			lda 	#LTYConstant
.3591	20 25 36	jsr $3625			jsr 	ListOutputCharacter
.3594	a2 02		ldx #$02			ldx 	#2 						; get its value
.3596	8a		txa				txa
.3597	a2 0a		ldx #$0a		ldx	#10
.3599	20 4c 32	jsr $324c		jsr	mainHandler
.359c	aa		tax				tax
.359d	68		pla				pla 							; get base back
.359e	85 32		sta $32				sta 	tempShort
.35a0	98		tya				tya
.35a1	48		pha				pha
.35a2	a5 32		lda $32				lda 	tempShort 				; print in base A stck level X
.35a4	20 e9 35	jsr $35e9			jsr 	DTPrintInteger
.35a7	68		pla				pla
.35a8	a8		tay				tay
.35a9	4c 58 35	jmp $3558			jmp 	_DTListLoop
.35ac					_DTIsToken:
.35ac	20 bf 36	jsr $36bf			jsr 	DTDecodeToken
.35af	4c 58 35	jmp $3558			jmp 	_DTListLoop
.35b2					_DTIsIdentifier:
.35b2	20 78 36	jsr $3678			jsr 	DTIdentifier
.35b5	4c 58 35	jmp $3558			jmp 	_DTListLoop
.35b8					_DTIsFloat:
>35b8	db						.byte 	$DB
.35b9	4c b8 35	jmp $35b8			jmp 	_DTIsFloat
.35bc					_DTIsString:
.35bc	a9 01		lda #$01			lda 	#1 							; now punctuation, may need spaces
.35be	20 66 36	jsr $3666			jsr 	DTSwitchMode
.35c1	a9 81		lda #$81			lda 	#LTYString
.35c3	20 25 36	jsr $3625			jsr 	ListOutputCharacter
.35c6	a9 22		lda #$22			lda 	#'"'						; open quote
.35c8	20 25 36	jsr $3625			jsr 	ListOutputCharacter
.35cb	a2 02		ldx #$02			ldx 	#2 							; evaluate string to TOS2.
.35cd	8a		txa				txa
.35ce	a2 0a		ldx #$0a		ldx	#10
.35d0	20 4c 32	jsr $324c		jsr	mainHandler
.35d3	aa		tax				tax
.35d4	b5 50		lda $50,x			lda 	esInt0,x 					; copy string address to temp0
.35d6	85 2a		sta $2a				sta 	temp0
.35d8	b5 58		lda $58,x			lda 	esInt1,x
.35da	85 2b		sta $2b				sta 	temp0+1
.35dc	a9 00		lda #$00			lda 	#0 							; don't capitalise.
.35de	20 fb 35	jsr $35fb			jsr 	DTPrintLengthPrefix
.35e1	a9 22		lda #$22			lda 	#'"'
.35e3	20 25 36	jsr $3625			jsr 	ListOutputCharacter
.35e6	4c 58 35	jmp $3558			jmp 	_DTListLoop

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/detokenise/dtprint.asm

.0c23					tPrintCount:
>0c23							.fill 	1
.35e9					DTPrintInteger:
.35e9	48		pha				pha									; save base
.35ea	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.35ec	85 2a		sta $2a				sta 	temp0
.35ee	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.35f0	85 2b		sta $2b				sta 	1+(temp0)
.35f2	68		pla				pla
.35f3	a8		tay				tay
.35f4	8a		txa				txa
.35f5	a2 0c		ldx #$0c		ldx	#12
.35f7	20 4c 32	jsr $324c		jsr	mainHandler
.35fa	aa		tax				tax 								; then drop through here.
.35fb					DTPrintLengthPrefix:
.35fb	aa		tax				tax 								; A = 0 = don't case convert.
.35fc	98		tya				tya
.35fd	48		pha				pha
.35fe	a0 00		ldy #$00			ldy 	#0 							; get string length = chars to print.
.3600	b1 2a		lda ($2a),y			lda 	(temp0),y
.3602	8d 23 0c	sta $0c23			sta 	tPrintCount
.3605	f0 1b		beq $3622			beq 	_DTPLPExit 					; empty string
.3607					_DTPLPLoop:
.3607	c8		iny				iny 								; get next.
.3608	b1 2a		lda ($2a),y			lda 	(temp0),y
.360a	29 7f		and #$7f			and 	#$7F
.360c	e0 00		cpx #$00			cpx 	#0 							; skip if not case converting
.360e	f0 0a		beq $361a			beq 	_DTPLPNoCase
.3610	c9 41		cmp #$41			cmp 	#"A" 						; if converting UC -> LC
.3612	90 06		bcc $361a			bcc 	_DTPLPNoCase
.3614	c9 5b		cmp #$5b			cmp 	#"Z"+1
.3616	b0 02		bcs $361a			bcs 	_DTPLPNoCase
.3618	49 20		eor #$20			eor 	#"A"^"a"
.361a					_DTPLPNoCase
.361a	20 25 36	jsr $3625			jsr 	ListOutputCharacter 		; call handler
.361d	ce 23 0c	dec $0c23			dec 	tPrintCount 				; do all the characters
.3620	d0 e5		bne $3607			bne 	_DTPLPLoop
.3622					_DTPLPExit:
.3622	68		pla				pla
.3623	a8		tay				tay
.3624	60		rts				rts
.3625					ListOutputCharacter:
.3625	85 32		sta $32				sta 	tempShort
.3627	48		pha				pha
.3628	8a		txa				txa
.3629	48		pha				pha
.362a	98		tya				tya
.362b	48		pha				pha
.362c	a5 32		lda $32				lda 	tempShort 					; convert ASCII 6 bit (0-31) to 7 bit.
.362e	c9 20		cmp #$20			cmp 	#32
.3630	b0 0c		bcs $363e			bcs		_LOCHiBit
.3632	09 40		ora #$40			ora 	#64 						; conversion
.3634	c9 40		cmp #$40			cmp 	#64							; make l/c
.3636	f0 06		beq $363e			beq 	_LOCHiBit
.3638	c9 5b		cmp #$5b			cmp 	#65+26
.363a	b0 02		bcs $363e			bcs 	_LOCHiBit
.363c	69 20		adc #$20			adc 	#32
.363e					_LOCHiBit:
.363e	20 47 36	jsr $3647			jsr 	_LOCCallVector				; call o/p handler routine
.3641	68		pla				pla
.3642	a8		tay				tay
.3643	68		pla				pla
.3644	aa		tax				tax
.3645	68		pla				pla
.3646					_LOCExit:
.3646	60		rts				rts
.3647					_LOCCallVector:
.3647	6c 1f 0c	jmp ($0c1f)			jmp 	(deTokeniseVector)
.364a					deTokenPrint:
.364a	c9 00		cmp #$00			cmp 	#0 							; if bit 7 sets ink colour
.364c	30 06		bmi $3654			bmi 	_dtpInk
.364e	a2 16		ldx #$16		ldx	#22
.3650	20 bf 14	jsr $14bf		jsr	deviceHandler
.3653	60		rts				rts
.3654	c9 ff		cmp #$ff	_dtpInk:cmp 	#255 						; e.g. herhe, get ink and set it
.3656	f0 08		beq $3660			beq 	_dtpCR						; except $FF => CRLF
.3658	29 07		and #$07			and 	#7
.365a	a2 08		ldx #$08		ldx	#8
.365c	20 bf 14	jsr $14bf		jsr	deviceHandler
.365f	60		rts				rts
.3660					_dtpCR:
.3660	a2 04		ldx #$04		ldx	#4
.3662	20 bf 14	jsr $14bf		jsr	deviceHandler
.3665	60		rts				rts
.3666					DTSwitchMode:
.3666	cd 21 0c	cmp $0c21			cmp 	LastCharacterClass 			; if changed, update character class
.3669	f0 04		beq $366f			beq 	_DTSMNoChange
.366b	8d 21 0c	sta $0c21			sta 	LastCharacterClass
.366e					_DTSMExit:
.366e	60		rts				rts
.366f					_DTSMNoChange:
.366f	c9 01		cmp #$01			cmp 	#1 							; if didn't change to punctuation, two identifiers so we
.3671	f0 fb		beq $366e			beq 	_DTSMExit 					; need a space.
.3673	a9 20		lda #$20			lda 	#" "
.3675	4c 25 36	jmp $3625			jmp 	ListOutputCharacter

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/detokenise/identifier.asm

.3678					DTIdentifier:
.3678	a9 00		lda #$00			lda 	#0 							; now text, may need spaces
.367a	20 66 36	jsr $3666			jsr 	DTSwitchMode
.367d	a9 87		lda #$87			lda 	#LTYIdentifier
.367f	20 25 36	jsr $3625			jsr 	ListOutputCharacter
.3682					_DTILoop:
.3682	b1 28		lda ($28),y			lda 	(codePtr),y 				; output main bit of identifier.
.3684	c9 2d		cmp #$2d			cmp 	#"-"						; make - back to _
.3686	d0 02		bne $368a			bne 	_DTINotUS
.3688	a9 5f		lda #$5f			lda 	#"_"
.368a					_DTINotUS:
.368a	20 25 36	jsr $3625			jsr 	ListOutputCharacter
.368d	c8		iny				iny
.368e	b1 28		lda ($28),y			lda 	(codePtr),y 				; until end identifier marker.
.3690	c9 3a		cmp #$3a			cmp 	#$3A
.3692	90 ee		bcc $3682			bcc 	_DTILoop
.3694	c8		iny				iny
.3695	c9 3a		cmp #$3a			cmp 	#$3A 						; is it integer non array
.3697	f0 25		beq $36be			beq 	_DTIExit 					; no postfix.
.3699	48		pha				pha
.369a	a9 01		lda #$01			lda  	#1 							; it ends in punctuation
.369c	8d 21 0c	sta $0c21			sta 	LastCharacterClass
.369f	a9 82		lda #$82			lda 	#LTYPunctuation
.36a1	20 25 36	jsr $3625			jsr 	ListOutputCharacter
.36a4	68		pla				pla
.36a5	c9 3b		cmp #$3b			cmp 	#$3B
.36a7	f0 10		beq $36b9			beq 	_DTIArray
.36a9	4a		lsr a				lsr 	a 							; array flag in C
.36aa	08		php				php
.36ab	49 1e		eor #$1e			eor 	#$3C/2 						; check if $
.36ad	f0 02		beq $36b1			beq 	_DTIDollar
.36af	a9 07		lda #$07			lda 	#"$"^"#" 					; this if #, 0 if $
.36b1					_DTIDollar:
.36b1	49 24		eor #$24			eor 	#"$"
.36b3	20 25 36	jsr $3625			jsr 	ListOutputCharacter
.36b6	28		plp				plp
.36b7	90 05		bcc $36be			bcc 	_DTIExit
.36b9					_DTIArray:
.36b9	a9 28		lda #$28			lda 	#"("
.36bb	20 25 36	jsr $3625			jsr 	ListOutputCharacter
.36be					_DTIExit:
.36be	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/detokenise/token.asm

.36bf					DTDecodeToken:
.36bf	a2 00		ldx #$00			ldx 	#0 							; table number to use
.36c1	b1 28		lda ($28),y			lda 	(codePtr),y
.36c3	c9 84		cmp #$84			cmp 	#$84
.36c5	b0 05		bcs $36cc			bcs 	_DTNotShift
.36c7	29 03		and #$03			and 	#3 							; get the shift 1..3
.36c9	0a		asl a				asl 	a 							; put 2 x in X
.36ca	aa		tax				tax
.36cb	c8		iny				iny
.36cc					_DTNotShift:
.36cc	bd ce 39	lda $39ce,x			lda 	TokenTableAddress,x 		; get the token table to use to decode it.
.36cf	85 2a		sta $2a				sta 	temp0 						; point into temp0
.36d1	bd cf 39	lda $39cf,x			lda 	TokenTableAddress+1,x
.36d4	85 2b		sta $2b				sta 	temp0+1
.36d6	b1 28		lda ($28),y			lda 	(codePtr),y 				; get the token value.
.36d8	c8		iny				iny 								; consume it.
.36d9	aa		tax				tax
.36da	98		tya				tya
.36db	48		pha				pha
.36dc					_DTFindText:
.36dc	e0 86		cpx #$86			cpx 	#$86 						; finished ?
.36de	f0 11		beq $36f1			beq 	_DTFoundText
.36e0	ca		dex				dex
.36e1	a0 00		ldy #$00			ldy 	#0 							; add length+1 to temp0
.36e3	38		sec				sec
.36e4	b1 2a		lda ($2a),y			lda 	(temp0),y
.36e6	65 2a		adc $2a				adc 	temp0
.36e8	85 2a		sta $2a				sta 	temp0
.36ea	90 f0		bcc $36dc			bcc 	_DTFindText
.36ec	e6 2b		inc $2b				inc 	temp0+1
.36ee	4c dc 36	jmp $36dc			jmp 	_DTFindText
.36f1					_DTFoundText:
.36f1	a0 01		ldy #$01			ldy 	#1 							; get first character
.36f3	b1 2a		lda ($2a),y			lda 	(temp0),y
.36f5	29 7f		and #$7f			and 	#$7F 						; will have bit 7 set.
.36f7	c9 41		cmp #$41			cmp 	#"A" 						; check for punctuation.
.36f9	90 11		bcc $370c			bcc 	_DTIsPunctuation
.36fb	c9 5b		cmp #$5b			cmp 	#"Z"+1
.36fd	b0 0d		bcs $370c			bcs 	_DTIsPunctuation
.36ff	a9 00		lda #$00			lda 	#0 							; now text, may need spaces
.3701	20 66 36	jsr $3666			jsr 	DTSwitchMode
.3704	a9 83		lda #$83			lda 	#LTYKeyword
.3706	20 25 36	jsr $3625			jsr 	ListOutputCharacter
.3709	4c 16 37	jmp $3716			jmp 	_DTPrint
.370c					_DTIsPunctuation:
.370c	a9 01		lda #$01			lda 	#1 							; now punctuation, may need spaces
.370e	20 66 36	jsr $3666			jsr 	DTSwitchMode
.3711	a9 82		lda #$82			lda 	#LTYPunctuation
.3713	20 25 36	jsr $3625			jsr 	ListOutputCharacter
.3716					_DTPrint:
.3716	a9 01		lda #$01			lda 	#1 							; fix case.
.3718	20 fb 35	jsr $35fb			jsr 	DTPrintLengthPrefix 		; print it out.
.371b	a0 00		ldy #$00			ldy 	#0
.371d	b1 2a		lda ($2a),y			lda 	(temp0),y
.371f	a8		tay				tay
.3720	b1 2a		lda ($2a),y			lda 	(temp0),y
.3722	29 7f		and #$7f			and 	#$7F 						; will have bit 7 set.
.3724	c9 41		cmp #$41			cmp 	#"A" 						; check for punctuation.
.3726	90 04		bcc $372c			bcc 	_DTIsNowPunctuation
.3728	c9 5b		cmp #$5b			cmp 	#"Z"+1
.372a	90 05		bcc $3731			bcc 	_DTPExit
.372c					_DTIsNowPunctuation:
.372c	a9 01		lda #$01			lda 	#1
.372e	8d 21 0c	sta $0c21			sta		LastCharacterClass
.3731					_DTPExit:
.3731	68		pla				pla
.3732	a8		tay				tay
.3733	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/search.asm

.0c24					currentSet:
>0c24							.fill 	1
.3734					TokenSearch:
.3734	8a		txa				txa
.3735	48		pha				pha
.3736	98		tya				tya
.3737	48		pha				pha
.3738	a9 00		lda #$00			lda 	#0
.373a	8d 24 0c	sta $0c24			sta 	currentSet
.373d					_TSLoop:
.373d	ad 24 0c	lda $0c24			lda 	currentSet 					; 2 x currentset in X
.3740	0a		asl a				asl 	a
.3741	aa		tax				tax
.3742	bd ce 39	lda $39ce,x			lda 	TokenTableAddress,x 		; set temp0 to the table address
.3745	85 2a		sta $2a				sta 	temp0
.3747	bd cf 39	lda $39cf,x			lda 	TokenTableAddress+1,x
.374a	85 2b		sta $2b				sta 	temp0+1
.374c	20 73 37	jsr $3773			jsr 	TokenSearchOne 				; search one table
.374f	b0 0d		bcs $375e			bcs 	_TSFound 					; found a token.
.3751	ee 24 0c	inc $0c24			inc 	currentSet 					; next set
.3754	ad 24 0c	lda $0c24			lda 	currentSet
.3757	c9 04		cmp #$04			cmp 	#4
.3759	d0 e2		bne $373d			bne 	_TSLoop 					; back if not done all four.
.375b	18		clc				clc 								; clear carry and exit
.375c	90 10		bcc $376e			bcc 	_TSExit
.375e					_TSFound:
.375e	48		pha				pha 								; save token
.375f	ad 24 0c	lda $0c24			lda 	currentSet					; if set zero no shift
.3762	f0 05		beq $3769			beq 	_TSNoShift
.3764	09 80		ora #$80			ora 	#$80 						; Write as $81-$83
.3766	20 24 38	jsr $3824			jsr 	TokenWrite
.3769					_TSNoShift:
.3769	68		pla				pla 								; get token back
.376a	20 24 38	jsr $3824			jsr 	TokenWrite 					; write it
.376d	38		sec				sec 								; carry set indicating success
.376e					_TSExit:
.376e	68		pla				pla
.376f	a8		tay				tay
.3770	68		pla				pla
.3771	aa		tax				tax
.3772	60		rts				rts
.3773					TokenSearchOne:
.3773	a2 86		ldx #$86			ldx 	#$86 						; current token being tested.
.3775					_TSOLoop:
.3775	a0 00		ldy #$00			ldy 	#0
.3777	b1 2a		lda ($2a),y			lda 	(temp0),y 					; get length of token
.3779	f0 26		beq $37a1			beq 	_TSOFail 					; if zero, end of table
.377b	cd cf 0a	cmp $0acf			cmp 	convertBuffer 				; length is the same, compare the text matches.
.377e	f0 11		beq $3791			beq 	_TSOCheckText
.3780					_TSONext:
.3780	e8		inx				inx 								; bump token
.3781	a0 00		ldy #$00			ldy 	#0							; get length
.3783	b1 2a		lda ($2a),y			lda 	(temp0),y
.3785	38		sec				sec
.3786	65 2a		adc $2a				adc 	temp0 						; add to temp0 + 1
.3788	85 2a		sta $2a				sta 	temp0
.378a	90 e9		bcc $3775			bcc 	_TSOLoop
.378c	e6 2b		inc $2b				inc 	temp0+1
.378e	4c 75 37	jmp $3775			jmp 	_TSOLoop
.3791					_TSOCheckText:
.3791	a8		tay				tay 								; compare length downto 1.
.3792					_TSOCheckLoop:
.3792	b1 2a		lda ($2a),y			lda 	(temp0),y 					; use EOR to compare
.3794	59 cf 0a	eor $0acf,y			eor 	convertBuffer,y
.3797	29 7f		and #$7f			and 	#$7F 						; ignore bit 7
.3799	d0 e5		bne $3780			bne 	_TSONext 					; different goto next.
.379b	88		dey				dey 								; do all
.379c	d0 f4		bne $3792			bne 	_TSOCheckLoop
.379e	8a		txa				txa 								; return token in A and carry set
.379f	38		sec				sec
.37a0	60		rts				rts
.37a1					_TSOFail:
.37a1	18		clc				clc
.37a2	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/test.asm

.37a3					TokTest:
.37a3	a2 ff		ldx #$ff				ldx 	#$FF
.37a5	9a		txs					txs
.37a6	a9 c3		lda #$c3			lda 	#(TokenText1) & $FF
.37a8	85 28		sta $28				sta 	codePtr
.37aa	a9 37		lda #$37			lda 	#(TokenText1) >> 8
.37ac	85 29		sta $29				sta 	1+(codePtr)
.37ae	20 c3 37	jsr $37c3				jsr 	Tokenise
.37b1	a2 00		ldx #$00	TokStop:	ldx 	#0 					; compare vs precalculated result
.37b3	bd c3 37	lda $37c3,x	_TokCheck:	lda 	TokenBytes1,x
.37b6	dd 28 0c	cmp $0c28,x				cmp 	tokenBuffer,x
.37b9	d0 fe		bne $37b9	_TokFail:	bne 	_TokFail	 		; error.
.37bb	e8		inx					inx
.37bc	c9 80		cmp #$80				cmp 	#$80
.37be	d0 f3		bne $37b3				bne 	_TokCheck
.37c0	4c ff ff	jmp $ffff				jmp 	$FFFF 				; successfully tokenised then quit.

;******  Processing file: tokeniser/tokenise/../../generated/toktest.inc

.37c3					TokenText1:
.37c3					TokenBytes1:

;******  Return to file: tokeniser/tokenise/test.asm


;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokenise.asm

.0c25					tokenHeader:
>0c25							.fill 	3
.0c28					tokenBuffer:
>0c28							.fill 	256
.0d28					tokenBufferIndex:
>0d28							.fill 	1
.37c3					Tokenise:
.37c3	20 3d 38	jsr $383d			jsr 	TokeniseMakeASCIIZ 			; convert to ASCIIZ string.
.37c6					TokeniseASCIIZ:
.37c6	20 4e 38	jsr $384e			jsr 	TokeniseFixCase 			; remove controls and lower case outside quotes.
.37c9	a9 00		lda #$00			lda 	#0 							; reset the token buffer index
.37cb	8d 28 0d	sta $0d28			sta 	tokenBufferIndex
.37ce	a8		tay				tay 								; start pointer
.37cf	a9 80		lda #$80			lda 	#$80 						; empty token buffer ($80 ends it)
.37d1	8d 28 0c	sta $0c28			sta 	tokenBuffer
.37d4					_TokLoop:
.37d4	b1 28		lda ($28),y			lda 	(codePtr),y 				; get next character
.37d6	f0 46		beq $381e			beq 	_TokExit 					; if zero, then exit.
.37d8	c8		iny				iny 								; skip over spaces.
.37d9	c9 20		cmp #$20			cmp 	#" "
.37db	f0 f7		beq $37d4			beq 	_TokLoop
.37dd	88		dey				dey 								; point back to character.
.37de	c9 26		cmp #$26			cmp 	#"&"						; Hexadecimal constant.
.37e0	f0 18		beq $37fa			beq 	_TokHexConst
.37e2	c9 22		cmp #$22			cmp 	#'"'						; Quoted String
.37e4	f0 23		beq $3809			beq 	_TokQString
.37e6	c9 5b		cmp #$5b			cmp 	#"Z"+1 						; > 'Z' is punctuation
.37e8	b0 26		bcs $3810			bcs 	_TokPunctuation
.37ea	c9 41		cmp #$41			cmp 	#"A" 						; A..Z identifier
.37ec	b0 29		bcs $3817			bcs 	_TokIdentifier
.37ee	c9 3a		cmp #$3a			cmp 	#"9"+1
.37f0	b0 1e		bcs $3810			bcs 	_TokPunctuation 			; between 9 and A exclusive, punctuation
.37f2	c9 30		cmp #$30			cmp 	#"0"
.37f4	90 1a		bcc $3810			bcc 	_TokPunctuation 			; < 0, punctuation.
.37f6	a9 0a		lda #$0a			lda 	#10  						; 0..9 constant in base 10.
.37f8	d0 08		bne $3802			bne 	_TokConst
.37fa					_TokHexConst:
.37fa	c8		iny				iny									; consume token.
.37fb	a9 c5		lda #$c5			lda 	#TKW_AMP 					; Write ampersand token out
.37fd	20 24 38	jsr $3824			jsr 	TokenWrite
.3800	a9 10		lda #$10			lda 	#16
.3802					_TokConst:
.3802	20 0c 39	jsr $390c			jsr 	TokeniseInteger
.3805	b0 cd		bcs $37d4			bcs 	_TokLoop
.3807	90 18		bcc $3821			bcc 	_TokFail
.3809					_TokQString:
.3809	20 a2 39	jsr $39a2			jsr 	TokeniseString
.380c	b0 c6		bcs $37d4			bcs 	_TokLoop
.380e	90 11		bcc $3821			bcc 	_TokFail
.3810					_TokPunctuation:
.3810	20 81 39	jsr $3981			jsr 	TokenisePunctuation
.3813	b0 bf		bcs $37d4			bcs 	_TokLoop
.3815	90 0a		bcc $3821			bcc 	_TokFail
.3817					_TokIdentifier:
.3817	20 7d 38	jsr $387d			jsr 	TokeniseIdentifier
.381a	b0 b8		bcs $37d4			bcs 	_TokLoop
.381c	90 03		bcc $3821			bcc 	_TokFail
.381e					_TokExit:
.381e	a9 01		lda #$01			lda 	#1
.3820	60		rts				rts
.3821					_TokFail:
.3821	a9 00		lda #$00			lda 	#0
.3823	60		rts				rts
.3824					TokenWrite:
.3824	85 32		sta $32				sta 	tempShort 					; save XA
.3826	48		pha				pha
.3827	8a		txa				txa
.3828	48		pha				pha
.3829	a5 32		lda $32				lda 	tempShort
.382b	ae 28 0d	ldx $0d28			ldx 	tokenBufferIndex 			; geet index
.382e	9d 28 0c	sta $0c28,x			sta 	tokenBuffer,x 				; write byte to buffer
.3831	a9 80		lda #$80			lda 	#TOK_EOL 					; pre-emptively write EOL marker after
.3833	9d 29 0c	sta $0c29,x			sta 	tokenBuffer+1,x
.3836	ee 28 0d	inc $0d28			inc 	tokenBufferIndex 			; bump index
.3839	68		pla				pla
.383a	aa		tax				tax
.383b	68		pla				pla
.383c	60		rts				rts
.383d					TokeniseMakeASCIIZ:
.383d	a0 00		ldy #$00			ldy 	#0							; get length of string.
.383f	b1 28		lda ($28),y			lda 	(codePtr),y
.3841	a8		tay				tay
.3842	c8		iny				iny 								; +1, the NULL goes here.
.3843	a9 00		lda #$00			lda 	#0
.3845	91 28		sta ($28),y			sta 	(codePtr),y 				; write the trailing NULL.
.3847	e6 28		inc $28				inc 	codePtr 					; bump the pointer.
.3849	d0 02		bne $384d			bne 	_TMKAExit
.384b	e6 29		inc $29				inc 	codePtr+1
.384d					_TMKAExit:
.384d	60		rts				rts
.384e					TokeniseFixCase:
.384e	a0 00		ldy #$00			ldy 	#0 							; position in buffer.
.3850	a2 01		ldx #$01			ldx 	#1 							; bit 0 of this is 'in quotes'
.3852					_TFCFlipQ:
.3852	8a		txa				txa
.3853	49 01		eor #$01			eor 	#1
.3855	aa		tax				tax
.3856					_TFCLoop:
.3856	b1 28		lda ($28),y			lda 	(codePtr),y 				; get character
.3858	f0 22		beq $387c			beq 	_TFCExit 					; if zero exit.
.385a	c9 20		cmp #$20			cmp 	#32 						; if control
.385c	90 1a		bcc $3878			bcc 	_TFCControl
.385e	c8		iny				iny 								; preconsume
.385f	c9 22		cmp #$22			cmp 	#'"'
.3861	f0 ef		beq $3852			beq 	_TFCFlipQ
.3863	c9 61		cmp #$61			cmp 	#"a"						; check if L/C
.3865	90 ef		bcc $3856			bcc 	_TFCLoop
.3867	c9 7b		cmp #$7b			cmp 	#"z"+1
.3869	b0 eb		bcs $3856			bcs 	_TFCLoop
.386b	e0 00		cpx #$00			cpx 	#0 							; in quotes, if so, leave alone.
.386d	d0 e7		bne $3856			bne 	_TFCLoop
.386f	88		dey				dey
.3870	49 20		eor #$20			eor 	#"A"^"a"					; make U/C
.3872					_TFCWrite:
.3872	91 28		sta ($28),y			sta 	(codePtr),y
.3874	c8		iny				iny
.3875	4c 56 38	jmp $3856			jmp 	_TFCLoop
.3878					_TFCControl:
.3878	a9 20		lda #$20			lda 	#" "
.387a	d0 f6		bne $3872			bne 	_TFCWrite
.387c					_TFCExit:
.387c	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokident.asm

.387d					TokeniseIdentifier:
.387d	a2 00		ldx #$00			ldx 	#0
.387f					_TICopyID:
.387f	b1 28		lda ($28),y			lda 	(codePtr),y					; get characters
.3881	c9 5f		cmp #$5f			cmp 	#"_" 						; underscore converted to minus internally.
.3883	f0 16		beq $389b			beq 	_TICopyUnderscore
.3885	c9 2e		cmp #$2e			cmp 	#"."
.3887	f0 14		beq $389d			beq 	_TICopyIn
.3889	c9 30		cmp #$30			cmp 	#"0"
.388b	90 1b		bcc $38a8			bcc 	_TIEndCopy
.388d	c9 3a		cmp #$3a			cmp 	#"9"+1
.388f	90 0c		bcc $389d			bcc 	_TICopyIn
.3891	c9 41		cmp #$41			cmp 	#"A"
.3893	90 13		bcc $38a8			bcc 	_TIEndCopy
.3895	c9 5b		cmp #$5b			cmp 	#"Z"+1
.3897	b0 0f		bcs $38a8			bcs		_TIEndCopy
.3899	90 02		bcc $389d			bcc 	_TICopyIn
.389b					_TICopyUnderScore:
.389b	a9 2d		lda #$2d			lda 	#"-"						; _ is mapped to -
.389d					_TICopyIn:
.389d	e8		inx				inx 								; write into buffer in 7 bit ASCII form
.389e	9d cf 0a	sta $0acf,x			sta 	convertBuffer,x
.38a1	8e cf 0a	stx $0acf			stx 	convertBuffer
.38a4	c8		iny				iny 								; next character
.38a5	4c 7f 38	jmp $387f			jmp 	_TICopyID 					; loop round
.38a8					_TIEndCopy:
.38a8	a9 24		lda #$24			lda 	#"$"
.38aa	20 ff 38	jsr $38ff			jsr 	TIDCheckCopy
.38ad	a9 23		lda #$23			lda 	#"#"
.38af	20 ff 38	jsr $38ff			jsr 	TIDCheckCopy
.38b2	a9 28		lda #$28			lda 	#"("
.38b4	20 ff 38	jsr $38ff			jsr 	TIDCheckCopy
.38b7	20 34 37	jsr $3734			jsr 	TokenSearch 				; is it a token
.38ba	b0 41		bcs $38fd			bcs 	_TIExit 					; if so, then exit.
.38bc	98		tya				tya
.38bd	48		pha				pha
.38be	a0 3a		ldy #$3a			ldy 	#$3A 						; default type.
.38c0	ae cf 0a	ldx $0acf			ldx 	convertBuffer 				; is last character (
.38c3	bd cf 0a	lda $0acf,x			lda 	convertBuffer,x
.38c6	c9 28		cmp #$28			cmp 	#"("
.38c8	d0 02		bne $38cc			bne 	_TINotArray
.38ca	ca		dex				dex 								; yes, remove it and convert to array.
.38cb	c8		iny				iny
.38cc					_TINotArray:
.38cc	bd cf 0a	lda $0acf,x			lda 	convertBuffer,x 			; check for $
.38cf	c9 24		cmp #$24			cmp 	#"$"
.38d1	d0 03		bne $38d6			bne 	_TINotString
.38d3	ca		dex				dex
.38d4	c8		iny				iny
.38d5	c8		iny				iny
.38d6					_TINotString:
.38d6	bd cf 0a	lda $0acf,x			lda 	convertBuffer,x 			; check for #
.38d9	c9 23		cmp #$23			cmp 	#"#"
.38db	d0 05		bne $38e2			bne 	_TINotFloat
.38dd	ca		dex				dex
.38de	c8		iny				iny
.38df	c8		iny				iny
.38e0	c8		iny				iny
.38e1	c8		iny				iny
.38e2					_TINotFloat:
.38e2	e8		inx				inx 								; write end marker for identifier.
.38e3	98		tya				tya
.38e4	9d cf 0a	sta $0acf,x			sta 	convertBuffer,x
.38e7	8e cf 0a	stx $0acf			stx 	convertBuffer 				; update length.
.38ea	a2 01		ldx #$01			ldx 	#1
.38ec					_TIOutput:
.38ec	bd cf 0a	lda $0acf,x			lda 	convertBuffer,x
.38ef	29 3f		and #$3f			and 	#$3F
.38f1	48		pha				pha
.38f2	20 24 38	jsr $3824			jsr 	TokenWrite
.38f5	e8		inx				inx
.38f6	68		pla				pla
.38f7	c9 3a		cmp #$3a			cmp 	#$3A
.38f9	90 f1		bcc $38ec			bcc 	_TIOutput
.38fb	68		pla				pla
.38fc	a8		tay				tay
.38fd					_TIExit:
.38fd	38		sec				sec 								; this can't fail.
.38fe	60		rts				rts
.38ff					TIDCheckCopy:
.38ff	d1 28		cmp ($28),y			cmp 	(codePtr),y
.3901	d0 08		bne $390b			bne 	_TIDCCExit
.3903	e8		inx				inx
.3904	9d cf 0a	sta $0acf,x			sta 	convertBuffer,x
.3907	8e cf 0a	stx $0acf			stx 	convertBuffer
.390a	c8		iny				iny
.390b					_TIDCCExit:
.390b	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokinteger.asm

.390c					TokeniseInteger:
.390c	85 2c		sta $2c				sta 	temp1 						; save base
.390e	a2 00		ldx #$00			ldx 	#0							; count of chars so far
.3910	8e cf 0a	stx $0acf			stx 	convertBuffer
.3913					_TIGetChars:
.3913	b1 28		lda ($28),y			lda 	(codePtr),y 				; check character is numeric
.3915	c9 30		cmp #$30			cmp 	#"0"
.3917	90 1f		bcc $3938			bcc 	_TIEndGet
.3919	c9 3a		cmp #$3a			cmp 	#"9"+1
.391b	90 10		bcc $392d			bcc 	_TIHaveChar
.391d	a5 2c		lda $2c				lda 	temp1 						; fail if not hex mode
.391f	c9 0a		cmp #$0a			cmp 	#10
.3921	f0 15		beq $3938			beq 	_TIEndGet
.3923	b1 28		lda ($28),y			lda 	(codePtr),y 				; check legitimate hex.
.3925	c9 41		cmp #$41			cmp 	#"A"
.3927	90 0f		bcc $3938			bcc 	_TIEndGet
.3929	c9 5b		cmp #$5b			cmp 	#"Z"+1
.392b	b0 0b		bcs $3938			bcs 	_TIEndGet
.392d					_TIHaveChar:
.392d	e8		inx				inx 								; write into buffer.
.392e	8e cf 0a	stx $0acf			stx 	convertBuffer
.3931	9d cf 0a	sta $0acf,x			sta 	convertBuffer,x
.3934	c8		iny				iny 								; next char
.3935	4c 13 39	jmp $3913			jmp 	_TIGetChars
.3938					_TIEndGet:
.3938	e0 00		cpx #$00			cpx 	#0 							; no char acquired.
.393a	f0 1c		beq $3958			beq 	_TIFail
.393c	98		tya				tya
.393d	48		pha				pha
.393e	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.3940	85 2a		sta $2a				sta 	temp0
.3942	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.3944	85 2b		sta $2b				sta 	1+(temp0)
.3946	a9 00		lda #$00			lda 	#0 							; stack level 0
.3948	a4 2c		ldy $2c				ldy 	temp1 						; base Y
.394a	a2 14		ldx #$14		ldx	#20
.394c	20 4c 32	jsr $324c		jsr	mainHandler
.394f	68		pla				pla
.3950	a8		tay				tay
.3951	90 05		bcc $3958			bcc 	_TIFail 					; didn't convert.
.3953	20 5a 39	jsr $395a			jsr 	TIRecursiveOut 				; recursive output ?
.3956	38		sec				sec
.3957	60		rts				rts
.3958					_TIFail:
.3958	18		clc				clc
.3959	60		rts				rts
.395a					TIRecursiveOut:
.395a	a5 50		lda $50				lda 	esInt0 						; get value to output after possible recursion
.395c	29 3f		and #$3f			and 	#$3F
.395e	09 40		ora #$40			ora 	#$40
.3960	48		pha				pha
.3961	a5 50		lda $50				lda 	esInt0 						; are we recursing ?
.3963	29 c0		and #$c0			and 	#$C0
.3965	05 58		ora $58				ora 	esInt1
.3967	05 60		ora $60				ora 	esInt2
.3969	05 68		ora $68				ora 	esInt3
.396b	f0 10		beq $397d			beq 	_TIRONoRecursion
.396d	a2 06		ldx #$06			ldx 	#6 							; shift right x 6
.396f					_TIROShift:
.396f	46 68		lsr $68				lsr 	esInt3
.3971	66 60		ror $60				ror 	esInt2
.3973	66 58		ror $58				ror 	esInt1
.3975	66 50		ror $50				ror 	esInt0
.3977	ca		dex				dex
.3978	d0 f5		bne $396f			bne 	_TIROShift
.397a	20 5a 39	jsr $395a			jsr 	TIRecursiveOut 				; call recursively
.397d					_TIRONoRecursion:
.397d	68		pla				pla 								; pull the old bit.
.397e	4c 24 38	jmp $3824			jmp 	TokenWrite

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokpunct.asm

.3981					TokenisePunctuation:
.3981	b1 28		lda ($28),y			lda	 	(codePtr),y 				; copy next 2 chars into convertBuffer
.3983	8d d0 0a	sta $0ad0			sta 	convertBuffer+1
.3986	c8		iny				iny
.3987	b1 28		lda ($28),y			lda 	(codePtr),y
.3989	8d d1 0a	sta $0ad1			sta 	convertBuffer+2
.398c	c8		iny				iny 								; Y is +2
.398d	a9 02		lda #$02			lda 	#2 							; 2 character string.
.398f	8d cf 0a	sta $0acf			sta 	convertBuffer
.3992	20 34 37	jsr $3734			jsr 	TokenSearch 				; search for that token.
.3995	b0 0a		bcs $39a1			bcs 	_TIFound
.3997	ce cf 0a	dec $0acf			dec 	convertBuffer 				; make it a 1 character string
.399a	88		dey				dey 								; Y is now +1
.399b	20 34 37	jsr $3734			jsr 	TokenSearch 				; search for that token.
.399e	b0 01		bcs $39a1			bcs 	_TIFound
.39a0	88		dey				dey 								; Y is now +0, carry clear indicating failure.
.39a1					_TIFound:
.39a1	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokstring.asm

.39a2					TokeniseString:
.39a2	c8		iny				iny 								; skip opening quote
.39a3	a2 ff		ldx #$ff			ldx 	#255 						; count length of string.
.39a5	84 2a		sty $2a				sty 	temp0 						; save start.
.39a7					_TSGetLength:
.39a7	b1 28		lda ($28),y			lda 	(codePtr),y 				; get next
.39a9	f0 21		beq $39cc			beq 	_TSFail						; end of line, fail
.39ab	c8		iny				iny
.39ac	e8		inx				inx
.39ad	c9 22		cmp #$22			cmp 	#'"' 						; until end quote found.
.39af	d0 f6		bne $39a7			bne 	_TSGetLength
.39b1	a9 85		lda #$85			lda 	#TOK_STR 					; write string token out
.39b3	20 24 38	jsr $3824			jsr 	TokenWrite
.39b6	8a		txa				txa 								; output length
.39b7	20 24 38	jsr $3824			jsr 	TokenWrite
.39ba	a4 2a		ldy $2a				ldy 	temp0 						; get original position
.39bc	e0 00		cpx #$00			cpx 	#0 							; check ended
.39be	f0 09		beq $39c9			beq 	_TSExit
.39c0					_TSOutput:
.39c0	b1 28		lda ($28),y			lda 	(codePtr),y					; output character
.39c2	20 24 38	jsr $3824			jsr 	TokenWrite
.39c5	c8		iny				iny
.39c6	ca		dex				dex
.39c7	d0 f7		bne $39c0			bne 	_TSOutput
.39c9					_TSExit:
.39c9	c8		iny				iny 								; skip ending quote
.39ca	38		sec				sec 								; return CS.
.39cb	60		rts				rts
.39cc					_TSFail:
.39cc	18		clc				clc
.39cd	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokentext.asm

.39ce					TokenTableAddress:
>39ce	d6 39						.word 	Group0Text
>39d0	a3 3b						.word 	Group1Text
>39d2	de 3c						.word 	Group2Text
>39d4	f6 3c						.word 	Group3Text

;******  Processing file: tokeniser/../generated/tokentext0.inc

.39d6					Group0Text:
>39d6	03 41 4e c4				.byte $03,$41,$4e,$c4                  ; $86 and
>39da	02 4f d2				.byte $02,$4f,$d2                      ; $87 or
>39dd	03 58 4f d2				.byte $03,$58,$4f,$d2                  ; $88 xor
>39e1	02 3e bd				.byte $02,$3e,$bd                      ; $89 >=
>39e4	02 3c bd				.byte $02,$3c,$bd                      ; $8a <=
>39e7	01 be					.byte $01,$be                          ; $8b >
>39e9	01 bc					.byte $01,$bc                          ; $8c <
>39eb	01 bd					.byte $01,$bd                          ; $8d =
>39ed	02 3c be				.byte $02,$3c,$be                      ; $8e <>
>39f0	01 ab					.byte $01,$ab                          ; $8f +
>39f2	01 ad					.byte $01,$ad                          ; $90 -
>39f4	02 3e be				.byte $02,$3e,$be                      ; $91 >>
>39f7	02 3c bc				.byte $02,$3c,$bc                      ; $92 <<
>39fa	01 aa					.byte $01,$aa                          ; $93 *
>39fc	01 af					.byte $01,$af                          ; $94 /
>39fe	03 4d 4f c4				.byte $03,$4d,$4f,$c4                  ; $95 mod
>3a02	01 de					.byte $01,$de                          ; $96 ^
>3a04	01 a1					.byte $01,$a1                          ; $97 !
>3a06	01 bf					.byte $01,$bf                          ; $98 ?
>3a08	06 52 45 50 45 41 d4			.byte $06,$52,$45,$50,$45,$41,$d4      ; $99 repeat
>3a0f	05 57 48 49 4c c5			.byte $05,$57,$48,$49,$4c,$c5          ; $9a while
>3a15	03 46 4f d2				.byte $03,$46,$4f,$d2                  ; $9b for
>3a19	02 49 c6				.byte $02,$49,$c6                      ; $9c if
>3a1c	07 44 45 46 50 52 4f c3			.byte $07,$44,$45,$46,$50,$52,$4f,$c3  ; $9d defproc
>3a24	05 55 4e 54 49 cc			.byte $05,$55,$4e,$54,$49,$cc          ; $9e until
>3a2a	04 57 45 4e c4				.byte $04,$57,$45,$4e,$c4              ; $9f wend
>3a2f	04 4e 45 58 d4				.byte $04,$4e,$45,$58,$d4              ; $a0 next
>3a34	04 54 48 45 ce				.byte $04,$54,$48,$45,$ce              ; $a1 then
>3a39	05 45 4e 44 49 c6			.byte $05,$45,$4e,$44,$49,$c6          ; $a2 endif
>3a3f	07 45 4e 44 50 52 4f c3			.byte $07,$45,$4e,$44,$50,$52,$4f,$c3  ; $a3 endproc
>3a47	01 a8					.byte $01,$a8                          ; $a4 (
>3a49	04 4c 45 4e a8				.byte $04,$4c,$45,$4e,$a8              ; $a5 len(
>3a4e	04 53 47 4e a8				.byte $04,$53,$47,$4e,$a8              ; $a6 sgn(
>3a53	04 41 42 53 a8				.byte $04,$41,$42,$53,$a8              ; $a7 abs(
>3a58	07 52 41 4e 44 4f 4d a8			.byte $07,$52,$41,$4e,$44,$4f,$4d,$a8  ; $a8 random(
>3a60	04 50 41 47 c5				.byte $04,$50,$41,$47,$c5              ; $a9 page
>3a65	04 54 52 55 c5				.byte $04,$54,$52,$55,$c5              ; $aa true
>3a6a	05 46 41 4c 53 c5			.byte $05,$46,$41,$4c,$53,$c5          ; $ab false
>3a70	04 4d 49 4e a8				.byte $04,$4d,$49,$4e,$a8              ; $ac min(
>3a75	04 4d 41 58 a8				.byte $04,$4d,$41,$58,$a8              ; $ad max(
>3a7a	04 53 59 53 a8				.byte $04,$53,$59,$53,$a8              ; $ae sys(
>3a7f	06 54 49 4d 45 52 a8			.byte $06,$54,$49,$4d,$45,$52,$a8      ; $af timer(
>3a86	06 45 56 45 4e 54 a8			.byte $06,$45,$56,$45,$4e,$54,$a8      ; $b0 event(
>3a8d	04 47 45 54 a8				.byte $04,$47,$45,$54,$a8              ; $b1 get(
>3a92	06 49 4e 4b 45 59 a8			.byte $06,$49,$4e,$4b,$45,$59,$a8      ; $b2 inkey(
>3a99	06 41 4c 4c 4f 43 a8			.byte $06,$41,$4c,$4c,$4f,$43,$a8      ; $b3 alloc(
>3aa0	05 43 48 52 24 a8			.byte $05,$43,$48,$52,$24,$a8          ; $b4 chr$(
>3aa6	06 4c 45 46 54 24 a8			.byte $06,$4c,$45,$46,$54,$24,$a8      ; $b5 left$(
>3aad	05 4d 49 44 24 a8			.byte $05,$4d,$49,$44,$24,$a8          ; $b6 mid$(
>3ab3	07 52 49 47 48 54 24 a8			.byte $07,$52,$49,$47,$48,$54,$24,$a8  ; $b7 right$(
>3abb	05 53 54 52 24 a8			.byte $05,$53,$54,$52,$24,$a8          ; $b8 str$(
>3ac1	04 56 41 4c a8				.byte $04,$56,$41,$4c,$a8              ; $b9 val(
>3ac6	05 50 45 45 4b a8			.byte $05,$50,$45,$45,$4b,$a8          ; $ba peek(
>3acc	05 44 45 45 4b a8			.byte $05,$44,$45,$45,$4b,$a8          ; $bb deek(
>3ad2	05 4c 45 45 4b a8			.byte $05,$4c,$45,$45,$4b,$a8          ; $bc leek(
>3ad8	04 41 53 43 a8				.byte $04,$41,$53,$43,$a8              ; $bd asc(
>3add	04 49 4e 54 a8				.byte $04,$49,$4e,$54,$a8              ; $be int(
>3ae2	06 46 4c 4f 41 54 a8			.byte $06,$46,$4c,$4f,$41,$54,$a8      ; $bf float(
>3ae9	06 49 53 56 41 4c a8			.byte $06,$49,$53,$56,$41,$4c,$a8      ; $c0 isval(
>3af0	07 55 50 50 45 52 24 a8			.byte $07,$55,$50,$50,$45,$52,$24,$a8  ; $c1 upper$(
>3af8	07 4c 4f 57 45 52 24 a8			.byte $07,$4c,$4f,$57,$45,$52,$24,$a8  ; $c2 lower$(
>3b00	01 c0					.byte $01,$c0                          ; $c3 @
>3b02	01 fe					.byte $01,$fe                          ; $c4 ~
>3b04	01 a6					.byte $01,$a6                          ; $c5 &
>3b06	05 47 45 54 24 a8			.byte $05,$47,$45,$54,$24,$a8          ; $c6 get$(
>3b0c	07 49 4e 4b 45 59 24 a8			.byte $07,$49,$4e,$4b,$45,$59,$24,$a8  ; $c7 inkey$(
>3b14	03 4d 45 cd				.byte $03,$4d,$45,$cd                  ; $c8 mem
>3b18	01 a9					.byte $01,$a9                          ; $c9 )
>3b1a	01 ba					.byte $01,$ba                          ; $ca :
>3b1c	01 ac					.byte $01,$ac                          ; $cb ,
>3b1e	01 bb					.byte $01,$bb                          ; $cc ;
>3b20	01 a7					.byte $01,$a7                          ; $cd '
>3b22	02 54 cf				.byte $02,$54,$cf                      ; $ce to
>3b25	04 53 54 45 d0				.byte $04,$53,$54,$45,$d0              ; $cf step
>3b2a	04 50 52 4f c3				.byte $04,$50,$52,$4f,$c3              ; $d0 proc
>3b2f	05 4c 4f 43 41 cc			.byte $05,$4c,$4f,$43,$41,$cc          ; $d1 local
>3b35	03 44 49 cd				.byte $03,$44,$49,$cd                  ; $d2 dim
>3b39	03 52 45 cd				.byte $03,$52,$45,$cd                  ; $d3 rem
>3b3d	03 4c 45 d4				.byte $03,$4c,$45,$d4                  ; $d4 let
>3b41	05 49 4e 50 55 d4			.byte $05,$49,$4e,$50,$55,$d4          ; $d5 input
>3b47	04 45 4c 53 c5				.byte $04,$45,$4c,$53,$c5              ; $d6 else
>3b4c	03 56 44 d5				.byte $03,$56,$44,$d5                  ; $d7 vdu
>3b50	05 50 52 49 4e d4			.byte $05,$50,$52,$49,$4e,$d4          ; $d8 print
>3b56	04 47 4f 54 cf				.byte $04,$47,$4f,$54,$cf              ; $d9 goto
>3b5b	05 47 4f 53 55 c2			.byte $05,$47,$4f,$53,$55,$c2          ; $da gosub
>3b61	06 52 45 54 55 52 ce			.byte $06,$52,$45,$54,$55,$52,$ce      ; $db return
>3b68	04 44 41 54 c1				.byte $04,$44,$41,$54,$c1              ; $dc data
>3b6d	06 41 53 53 45 52 d4			.byte $06,$41,$53,$53,$45,$52,$d4      ; $dd assert
>3b74	04 50 4f 4b c5				.byte $04,$50,$4f,$4b,$c5              ; $de poke
>3b79	04 44 4f 4b c5				.byte $04,$44,$4f,$4b,$c5              ; $df doke
>3b7e	04 4c 4f 4b c5				.byte $04,$4c,$4f,$4b,$c5              ; $e0 loke
>3b83	03 49 4e cb				.byte $03,$49,$4e,$cb                  ; $e1 ink
>3b87	05 50 41 50 45 d2			.byte $05,$50,$41,$50,$45,$d2          ; $e2 paper
>3b8d	03 43 4c d3				.byte $03,$43,$4c,$d3                  ; $e3 cls
>3b91	06 4c 4f 43 41 54 c5			.byte $06,$4c,$4f,$43,$41,$54,$c5      ; $e4 locate
>3b98	05 42 52 45 41 cb			.byte $05,$42,$52,$45,$41,$cb          ; $e5 break
>3b9e	01 ae					.byte $01,$ae                          ; $e6 .
>3ba0	01 a3					.byte $01,$a3                          ; $e7 #
>3ba2	00					.byte $00

;******  Return to file: tokeniser/tokentext.asm


;******  Processing file: tokeniser/../generated/tokentext1.inc

.3ba3					Group1Text:
>3ba3	05 43 4c 45 41 d2			.byte $05,$43,$4c,$45,$41,$d2          ; $86 clear
>3ba9	04 4c 4f 41 c4				.byte $04,$4c,$4f,$41,$c4              ; $87 load
>3bae	04 53 41 56 c5				.byte $04,$53,$41,$56,$c5              ; $88 save
>3bb3	04 4c 49 53 d4				.byte $04,$4c,$49,$53,$d4              ; $89 list
>3bb8	03 4e 45 d7				.byte $03,$4e,$45,$d7                  ; $8a new
>3bbc	03 52 55 ce				.byte $03,$52,$55,$ce                  ; $8b run
>3bc0	04 52 45 41 c4				.byte $04,$52,$45,$41,$c4              ; $8c read
>3bc5	07 52 45 53 54 4f 52 c5			.byte $07,$52,$45,$53,$54,$4f,$52,$c5  ; $8d restore
>3bcd	03 45 4e c4				.byte $03,$45,$4e,$c4                  ; $8e end
>3bd1	04 53 54 4f d0				.byte $04,$53,$54,$4f,$d0              ; $8f stop
>3bd6	04 58 45 4d d5				.byte $04,$58,$45,$4d,$d5              ; $90 xemu
>3bdb	03 4f 52 c1				.byte $03,$4f,$52,$c1                  ; $91 ora
>3bdf	05 28 41 4e 44 a9			.byte $05,$28,$41,$4e,$44,$a9          ; $92 (and)
>3be5	03 45 4f d2				.byte $03,$45,$4f,$d2                  ; $93 eor
>3be9	03 41 44 c3				.byte $03,$41,$44,$c3                  ; $94 adc
>3bed	03 53 54 c1				.byte $03,$53,$54,$c1                  ; $95 sta
>3bf1	03 4c 44 c1				.byte $03,$4c,$44,$c1                  ; $96 lda
>3bf5	03 43 4d d0				.byte $03,$43,$4d,$d0                  ; $97 cmp
>3bf9	03 53 42 c3				.byte $03,$53,$42,$c3                  ; $98 sbc
>3bfd	03 41 53 cc				.byte $03,$41,$53,$cc                  ; $99 asl
>3c01	03 52 4f cc				.byte $03,$52,$4f,$cc                  ; $9a rol
>3c05	03 4c 53 d2				.byte $03,$4c,$53,$d2                  ; $9b lsr
>3c09	03 52 4f d2				.byte $03,$52,$4f,$d2                  ; $9c ror
>3c0d	03 53 54 d8				.byte $03,$53,$54,$d8                  ; $9d stx
>3c11	03 4c 44 d8				.byte $03,$4c,$44,$d8                  ; $9e ldx
>3c15	03 44 45 c3				.byte $03,$44,$45,$c3                  ; $9f dec
>3c19	03 49 4e c3				.byte $03,$49,$4e,$c3                  ; $a0 inc
>3c1d	03 53 54 da				.byte $03,$53,$54,$da                  ; $a1 stz
>3c21	03 42 49 d4				.byte $03,$42,$49,$d4                  ; $a2 bit
>3c25	03 53 54 d9				.byte $03,$53,$54,$d9                  ; $a3 sty
>3c29	03 4c 44 d9				.byte $03,$4c,$44,$d9                  ; $a4 ldy
>3c2d	03 43 50 d9				.byte $03,$43,$50,$d9                  ; $a5 cpy
>3c31	03 43 50 d8				.byte $03,$43,$50,$d8                  ; $a6 cpx
>3c35	03 54 53 c2				.byte $03,$54,$53,$c2                  ; $a7 tsb
>3c39	03 54 52 c2				.byte $03,$54,$52,$c2                  ; $a8 trb
>3c3d	03 4a 53 d2				.byte $03,$4a,$53,$d2                  ; $a9 jsr
>3c41	03 4a 4d d0				.byte $03,$4a,$4d,$d0                  ; $aa jmp
>3c45	03 42 50 cc				.byte $03,$42,$50,$cc                  ; $ab bpl
>3c49	03 42 4d c9				.byte $03,$42,$4d,$c9                  ; $ac bmi
>3c4d	03 42 56 c3				.byte $03,$42,$56,$c3                  ; $ad bvc
>3c51	03 42 56 d3				.byte $03,$42,$56,$d3                  ; $ae bvs
>3c55	03 42 43 c3				.byte $03,$42,$43,$c3                  ; $af bcc
>3c59	03 42 43 d3				.byte $03,$42,$43,$d3                  ; $b0 bcs
>3c5d	03 42 4e c5				.byte $03,$42,$4e,$c5                  ; $b1 bne
>3c61	03 42 45 d1				.byte $03,$42,$45,$d1                  ; $b2 beq
>3c65	03 42 52 c1				.byte $03,$42,$52,$c1                  ; $b3 bra
>3c69	03 42 52 cb				.byte $03,$42,$52,$cb                  ; $b4 brk
>3c6d	03 50 48 d0				.byte $03,$50,$48,$d0                  ; $b5 php
>3c71	03 43 4c c3				.byte $03,$43,$4c,$c3                  ; $b6 clc
>3c75	03 50 4c d0				.byte $03,$50,$4c,$d0                  ; $b7 plp
>3c79	03 53 45 c3				.byte $03,$53,$45,$c3                  ; $b8 sec
>3c7d	03 52 54 c9				.byte $03,$52,$54,$c9                  ; $b9 rti
>3c81	03 50 48 c1				.byte $03,$50,$48,$c1                  ; $ba pha
>3c85	03 43 4c c9				.byte $03,$43,$4c,$c9                  ; $bb cli
>3c89	03 50 48 d9				.byte $03,$50,$48,$d9                  ; $bc phy
>3c8d	03 52 54 d3				.byte $03,$52,$54,$d3                  ; $bd rts
>3c91	03 50 4c c1				.byte $03,$50,$4c,$c1                  ; $be pla
>3c95	03 53 45 c9				.byte $03,$53,$45,$c9                  ; $bf sei
>3c99	03 50 4c d9				.byte $03,$50,$4c,$d9                  ; $c0 ply
>3c9d	03 44 45 d9				.byte $03,$44,$45,$d9                  ; $c1 dey
>3ca1	03 54 58 c1				.byte $03,$54,$58,$c1                  ; $c2 txa
>3ca5	03 54 59 c1				.byte $03,$54,$59,$c1                  ; $c3 tya
>3ca9	03 54 58 d3				.byte $03,$54,$58,$d3                  ; $c4 txs
>3cad	03 54 41 d9				.byte $03,$54,$41,$d9                  ; $c5 tay
>3cb1	03 54 41 d8				.byte $03,$54,$41,$d8                  ; $c6 tax
>3cb5	03 43 4c d6				.byte $03,$43,$4c,$d6                  ; $c7 clv
>3cb9	03 54 53 d8				.byte $03,$54,$53,$d8                  ; $c8 tsx
>3cbd	03 49 4e d9				.byte $03,$49,$4e,$d9                  ; $c9 iny
>3cc1	03 44 45 d8				.byte $03,$44,$45,$d8                  ; $ca dex
>3cc5	03 43 4c c4				.byte $03,$43,$4c,$c4                  ; $cb cld
>3cc9	03 50 48 d8				.byte $03,$50,$48,$d8                  ; $cc phx
>3ccd	03 49 4e d8				.byte $03,$49,$4e,$d8                  ; $cd inx
>3cd1	03 4e 4f d0				.byte $03,$4e,$4f,$d0                  ; $ce nop
>3cd5	03 53 45 c4				.byte $03,$53,$45,$c4                  ; $cf sed
>3cd9	03 50 4c d8				.byte $03,$50,$4c,$d8                  ; $d0 plx
>3cdd	00					.byte $00

;******  Return to file: tokeniser/tokentext.asm


;******  Processing file: tokeniser/../generated/tokentext2.inc

.3cde					Group2Text:
>3cde	05 56 50 4f 4b c5			.byte $05,$56,$50,$4f,$4b,$c5          ; $86 vpoke
>3ce4	05 56 44 4f 4b c5			.byte $05,$56,$44,$4f,$4b,$c5          ; $87 vdoke
>3cea	05 56 4c 4f 41 c4			.byte $05,$56,$4c,$4f,$41,$c4          ; $88 vload
>3cf0	04 4d 4f 44 c5				.byte $04,$4d,$4f,$44,$c5              ; $89 mode
>3cf5	00					.byte $00

;******  Return to file: tokeniser/tokentext.asm


;******  Processing file: tokeniser/../generated/tokentext3.inc

.3cf6					Group3Text:
>3cf6	06 56 50 45 45 4b a8			.byte $06,$56,$50,$45,$45,$4b,$a8      ; $86 vpeek(
>3cfd	06 56 44 45 45 4b a8			.byte $06,$56,$44,$45,$45,$4b,$a8      ; $87 vdeek(
>3d04	00					.byte $00

;******  Return to file: tokeniser/tokentext.asm


;******  Return to file: tokeniser/tokeniser.asm

.3d05					tokeniserHandler:
.3d05	7c 08 3d	jmp ($3d08,x)			jmp 	(tokeniserVectors,x)
.3d08					tokeniserVectors:
>3d08	21 35					.word Detokenise           ; index 0
>3d0a	15 35					.word ListLine             ; index 2
>3d0c	a3 37					.word TokTest              ; index 4
>3d0e	c3 37					.word Tokenise             ; index 6
>3d10	c6 37					.word TokeniseASCIIZ       ; index 8

;******  Return to file: basic.asm

.3d12					section_end_tokeniser:
.3d12					section_start_variable:

;******  Processing file: variable/variable.asm


;******  Processing file: variable/array/access.asm

.3d12					AccessArray:
.3d12	8a		txa				txa
.3d13	48		pha				pha
.3d14	e8		inx				inx
.3d15	20 de 3d	jsr $3dde			jsr 	GetArrayDimensions 			; get the array dimensions one up from here.
.3d18	68		pla				pla
.3d19	aa		tax				tax
.3d1a	b5 50		lda $50,x			lda 	esInt0,x 					; restore address to follow in temp0.
.3d1c	85 2a		sta $2a				sta 	temp0
.3d1e	b5 58		lda $58,x			lda 	esInt1,x
.3d20	85 2b		sta $2b				sta 	temp0+1
.3d22	8a		txa				txa
.3d23	48		pha				pha
.3d24	98		tya				tya
.3d25	48		pha				pha
.3d26					_AAFollow:
.3d26	a0 00		ldy #$00			ldy 	#0
.3d28	b1 2a		lda ($2a),y			lda 	(temp0),y
.3d2a	48		pha				pha
.3d2b	c8		iny				iny
.3d2c	b1 2a		lda ($2a),y			lda 	(temp0),y
.3d2e	85 2b		sta $2b				sta 	temp0+1
.3d30	68		pla				pla
.3d31	85 2a		sta $2a				sta 	temp0
.3d33	e8		inx				inx 								; advance to next stack slot.
.3d34	a0 00		ldy #$00			ldy 	#0
.3d36	b1 2a		lda ($2a),y			lda 	(temp0),y 					; compare max index vs required index
.3d38	d5 50		cmp $50,x			cmp 	esInt0,x
.3d3a	c8		iny				iny
.3d3b	b1 2a		lda ($2a),y			lda 	(temp0),y 					; drop bit 7 of the size, indicates follow.
.3d3d	85 2c		sta $2c				sta 	temp1 						; save the size in temp1 for later use.
.3d3f	29 7f		and #$7f			and 	#$7F
.3d41	f5 58		sbc $58,x			sbc 	esInt1,x
.3d43	90 50		bcc $3d95			bcc 	_AABadIndex 				; failed on index if max index < required.
.3d45	18		clc				clc
.3d46	a5 2a		lda $2a				lda 	temp0
.3d48	69 02		adc #$02			adc 	#2
.3d4a	85 2a		sta $2a				sta 	temp0
.3d4c	90 02		bcc $3d50			bcc 	_AANoCarry
.3d4e	e6 2b		inc $2b				inc 	temp0+1
.3d50					_AANoCarry:
.3d50	b5 50		lda $50,x			lda 	esInt0,x
.3d52	85 2e		sta $2e				sta 	temp2
.3d54	b5 58		lda $58,x			lda 	esInt1,x
.3d56	85 2f		sta $2f				sta 	temp2+1
.3d58	ac 2b 0d	ldy $0d2b			ldy 	varType
.3d5b	b9 38 3e	lda $3e38,y			lda 	CAActualSize-$3A,y
.3d5e	b4 49		ldy $49,x			ldy 	esType+1,x 					; is it top level
.3d60	30 02		bmi $3d64			bmi 	_AANotPointer
.3d62	a9 02		lda #$02			lda 	#2 							; array of pointers is 2.
.3d64					_AANotPointer:
.3d64	20 e2 3e	jsr $3ee2			jsr 	MultiplyTemp2ByA 			; multiply the index by the data size, in temp2.
.3d67	18		clc				clc
.3d68	a5 2a		lda $2a				lda 	temp0
.3d6a	65 2e		adc $2e				adc 	temp2
.3d6c	85 2a		sta $2a				sta 	temp0
.3d6e	a5 2b		lda $2b				lda 	temp0+1
.3d70	65 2f		adc $2f				adc 	temp2+1
.3d72	85 2b		sta $2b				sta 	temp0+1
.3d74	b5 49		lda $49,x			lda 	esType+1,x
.3d76	30 07		bmi $3d7f			bmi 	_AAUsedAllIndices
.3d78	a5 2c		lda $2c				lda 	temp1 						; check if this is a pointer array e.g. there are subarrays
.3d7a	10 14		bpl $3d90			bpl 	_AABadDepth 				; no, too many indexes.
.3d7c	4c 26 3d	jmp $3d26			jmp 	_AAFollow 					; otherwise follow them.
.3d7f					_AAUsedAllIndices:
.3d7f	a5 2c		lda $2c				lda 	temp1 						; get original high length byte.
.3d81	30 0d		bmi $3d90			bmi 	_AABadDepth 				; if -ve then this is an array of pointers.
.3d83	68		pla				pla
.3d84	a8		tay				tay
.3d85	68		pla				pla
.3d86	aa		tax				tax
.3d87	a5 2a		lda $2a				lda 	temp0 						; copy address of array element to stack,x
.3d89	95 50		sta $50,x			sta 	esInt0,x
.3d8b	a5 2b		lda $2b				lda 	temp0+1
.3d8d	95 58		sta $58,x			sta 	esInt1,x
.3d8f	60		rts				rts
.3d90					_AABadDepth:
.3d90	a2 1c		ldx #$1c			ldx 	#ErrorID_ArrayDepth
.3d92	20 e0 14	jsr $14e0		jsr	errorHandler
.3d95					_AABadIndex:
.3d95	a2 1b		ldx #$1b			ldx 	#ErrorID_ArrayIndex
.3d97	20 e0 14	jsr $14e0		jsr	errorHandler

;******  Return to file: variable/variable.asm


;******  Processing file: variable/array/create.asm

.0d29					elementSize:
>0d29							.fill	 1
.3d9a					CreateArray:
.3d9a	20 71 3f	jsr $3f71			jsr 	AccessSetup 				; set up the basic stuff.
.3d9d	ad 2b 0d	lda $0d2b			lda 	varType 					; is the variable type an array
.3da0	4a		lsr a				lsr 	a
.3da1	90 36		bcc $3dd9			bcc 	CANotArray 					; no, cause an error.
.3da3	20 7a 40	jsr $407a			jsr 	FindVariable 				; does the variable exist already
.3da6	b0 2c		bcs $3dd4			bcs 	CAFound 					; cannot redefine it.
.3da8	20 ae 3f	jsr $3fae			jsr 	CreateVariable 				; create the variable entry.
.3dab	a5 2a		lda $2a				lda 	temp0 						; push address of new variable entry on the stack
.3dad	48		pha				pha
.3dae	a5 2b		lda $2b				lda 	temp0+1
.3db0	48		pha				pha
.3db1	a2 00		ldx #$00			ldx 	#0
.3db3	20 de 3d	jsr $3dde			jsr 	GetArrayDimensions 			; get the array dimensions
.3db6	a2 00		ldx #$00			ldx 	#0 							; create at level $00
.3db8	20 0e 3e	jsr $3e0e			jsr 	CreateArrayLevel 			; level to YA
.3dbb	aa		tax				tax 								; level now in YX
.3dbc	68		pla				pla 								; get address back to temp0 to write.
.3dbd	85 2b		sta $2b				sta 	temp0+1
.3dbf	68		pla				pla
.3dc0	85 2a		sta $2a				sta 	temp0
.3dc2	98		tya				tya 								; write YX there.
.3dc3	a0 06		ldy #$06			ldy 	#6
.3dc5	91 2a		sta ($2a),y			sta 	(temp0),y
.3dc7	88		dey				dey
.3dc8	8a		txa				txa
.3dc9	91 2a		sta ($2a),y			sta 	(temp0),y
.3dcb	ac 2c 0d	ldy $0d2c			ldy 	varEnd 						; restore Y and exit.
.3dce	60		rts				rts
.3dcf					CASize:
.3dcf	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.3dd1	20 e0 14	jsr $14e0		jsr	errorHandler
.3dd4					CAFound:
.3dd4	a2 19		ldx #$19			ldx 	#ErrorID_DupArray
.3dd6	20 e0 14	jsr $14e0		jsr	errorHandler
.3dd9					CANotArray:
.3dd9	a2 1a		ldx #$1a			ldx 	#ErrorID_NotArray
.3ddb	20 e0 14	jsr $14e0		jsr	errorHandler
.3dde					GetArrayDimensions:
.3dde	ad 2b 0d	lda $0d2b			lda 	varType 					; push variable type on the stack.
.3de1	48		pha				pha
.3de2	ac 2c 0d	ldy $0d2c			ldy 	varEnd
.3de5					_CAGetDimensions:
.3de5	8a		txa				txa 								; get the next level
.3de6	a2 06		ldx #$06		ldx	#6
.3de8	20 4c 32	jsr $324c		jsr	mainHandler
.3deb	aa		tax				tax
.3dec	b5 58		lda $58,x			lda 	esInt1,x 					; index must be < 8192
.3dee	29 e0		and #$e0			and 	#$E0
.3df0	15 60		ora $60,x			ora 	esInt2,x
.3df2	15 68		ora $68,x			ora 	esInt3,x
.3df4	d0 d9		bne $3dcf			bne 	CASize
.3df6	e8		inx				inx 								; next level.
.3df7	b1 28		lda ($28),y			lda 	(codePtr),y 				; get/consume following character
.3df9	c8		iny				iny
.3dfa	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; loop back if more dimensions
.3dfc	f0 e7		beq $3de5			beq 	_CAGetDimensions
.3dfe	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN 				; right bracket ?
.3e00	d0 cd		bne $3dcf			bne 	CASize
.3e02	a9 ff		lda #$ff			lda 	#$FF 						; set the type past the end to $FF so we know how many
.3e04	95 48		sta $48,x			sta 	esType,x 					; dimensions there are.
.3e06	68		pla				pla 								; restore the variable type ($3A-$3F)
.3e07	8d 2b 0d	sta $0d2b			sta 	varType
.3e0a	8c 2c 0d	sty $0d2c			sty 	varEnd 						; save exit Y value, after dimensions
.3e0d	60		rts				rts
.3e0e					CreateArrayLevel:
.3e0e	ac 2b 0d	ldy $0d2b			ldy 	varType
.3e11	b9 38 3e	lda $3e38,y			lda 	CAActualSize-$3A,y
.3e14	8d 29 0d	sta $0d29			sta 	elementSize 				; get element size this level.
.3e17	b4 49		ldy $49,x			ldy 	esType+1,x 					; is it top level
.3e19	30 05		bmi $3e20			bmi 	_CANotPointer
.3e1b	a9 02		lda #$02			lda 	#2 							; array of pointers is 2.
.3e1d	8d 29 0d	sta $0d29			sta 	elementSize
.3e20					_CANotPointer:
.3e20	a5 35		lda $35				lda 	lowMemory 					; start creating at temp0, saving start on stack.
.3e22	85 2a		sta $2a				sta 	temp0
.3e24	48		pha				pha
.3e25	a5 36		lda $36				lda 	lowMemory+1
.3e27	85 2b		sta $2b				sta 	temp0+1
.3e29	48		pha				pha
.3e2a	20 ab 3e	jsr $3eab			jsr 	AllocateArraySpace 			; allocate space for all array stuff at this level.
.3e2d	a0 00		ldy #$00			ldy 	#0
.3e2f	b5 50		lda $50,x			lda 	esInt0,x
.3e31	91 2a		sta ($2a),y			sta 	(temp0),y
.3e33	c8		iny				iny
.3e34	b5 58		lda $58,x			lda 	esInt1,x
.3e36	91 2a		sta ($2a),y			sta 	(temp0),y
.3e38	b5 49		lda $49,x			lda 	esType+1,x 					; do we have another level ?
.3e3a	30 06		bmi $3e42			bmi 	_CALNotLast
.3e3c	b1 2a		lda ($2a),y			lda 	(temp0),y 					; set bit 7, indicates an array of pointers to other levels.
.3e3e	09 80		ora #$80			ora 	#$80
.3e40	91 2a		sta ($2a),y			sta 	(temp0),y
.3e42					_CALNotLast:
.3e42	a9 02		lda #$02			lda 	#2
.3e44	20 68 3e	jsr $3e68			jsr 	_CALAddTemp0
.3e47	b5 50		lda $50,x			lda 	esInt0,x 					; copy stack:01 to stack:23 so we can use it to
.3e49	95 60		sta $60,x			sta 	esInt2,x 					; count.
.3e4b	b5 58		lda $58,x			lda 	esInt1,x
.3e4d	95 68		sta $68,x			sta 	esInt3,x
.3e4f					_CALClear:
.3e4f	20 78 3e	jsr $3e78			jsr 	EraseOneElement
.3e52	ad 29 0d	lda $0d29			lda 	elementSize 				; move to next element
.3e55	20 68 3e	jsr $3e68			jsr 	_CALAddTemp0
.3e58	b5 60		lda $60,x			lda 	esInt2,x 					; decrement counter
.3e5a	d0 02		bne $3e5e			bne 	_CALNoBorrow
.3e5c	d6 68		dec $68,x			dec 	esInt3,x
.3e5e					_CALNoBorrow:
.3e5e	d6 60		dec $60,x			dec 	esInt2,x
.3e60	b5 68		lda $68,x			lda 	esInt3,x 					; loop back if >= 0 - we need +1 because indices
.3e62	10 eb		bpl $3e4f			bpl 	_CALClear 					; start at 0 e.g. x(10) is actually 11 array entries.
.3e64	68		pla				pla 								; restore the start of this into YA.
.3e65	a8		tay				tay
.3e66	68		pla				pla
.3e67	60		rts				rts
.3e68					_CALAddTemp0:
.3e68	18		clc				clc
.3e69	65 2a		adc $2a				adc 	temp0
.3e6b	85 2a		sta $2a				sta 	temp0
.3e6d	90 02		bcc $3e71			bcc 	_CALANoCarry
.3e6f	e6 2b		inc $2b				inc 	temp0+1
.3e71					_CALANoCarry:
.3e71	60		rts				rts
.3e72					CAActualSize:
>3e72	04 04						.byte 	VarISize,VarISize
>3e74	02 02						.byte 	VarSSize,VarSSize
>3e76	06 06						.byte 	VarFSize,VarFSize
.3e78					EraseOneElement:
.3e78	b5 49		lda $49,x			lda 	esType+1,x 					; is this a list of sub arrays
.3e7a	10 09		bpl $3e85			bpl 	_EOESubArray
.3e7c	a0 00		ldy #$00			ldy 	#0 							; write the empty variable value out.
.3e7e	ad 2b 0d	lda $0d2b			lda 	varType
.3e81	20 18 40	jsr $4018			jsr 	ZeroTemp0Y
.3e84	60		rts				rts
.3e85					_EOESubArray:
.3e85	a5 2a		lda $2a				lda 	temp0 						; save temp0, these are effectively locals.
.3e87	48		pha				pha
.3e88	a5 2b		lda $2b				lda 	temp0+1
.3e8a	48		pha				pha
.3e8b	ad 29 0d	lda $0d29			lda 	elementSize 				; save element size
.3e8e	48		pha				pha
.3e8f	e8		inx				inx 								; create at next level
.3e90	20 0e 3e	jsr $3e0e			jsr 	CreateArrayLevel
.3e93	ca		dex				dex
.3e94	85 32		sta $32				sta 	tempShort 					; save A
.3e96	68		pla				pla  								; restore element size.
.3e97	8d 29 0d	sta $0d29			sta 	elementSize
.3e9a	68		pla				pla 								; restore temp0, which is where this new array level goes.
.3e9b	85 2b		sta $2b				sta 	temp0+1
.3e9d	68		pla				pla
.3e9e	85 2a		sta $2a				sta 	temp0
.3ea0	98		tya				tya 								; store Y/A there
.3ea1	a0 01		ldy #$01			ldy 	#1
.3ea3	91 2a		sta ($2a),y			sta 	(temp0),y
.3ea5	a5 32		lda $32				lda 	tempShort
.3ea7	88		dey				dey
.3ea8	91 2a		sta ($2a),y			sta 	(temp0),y
.3eaa	60		rts				rts
.3eab					AllocateArraySpace:
.3eab	18		clc				clc 								; element count + 1 => temp2.
.3eac	b5 50		lda $50,x			lda 	esInt0,x
.3eae	69 01		adc #$01			adc 	#1
.3eb0	85 2e		sta $2e				sta 	temp2
.3eb2	b5 58		lda $58,x			lda 	esInt1,x
.3eb4	69 00		adc #$00			adc 	#0
.3eb6	85 2f		sta $2f				sta 	temp2+1
.3eb8	ad 29 0d	lda $0d29			lda 	elementSize 				; bytes per element
.3ebb	20 e2 3e	jsr $3ee2			jsr 	MultiplyTemp2ByA 			; temp2 = (count + 1) x bytes per element.
.3ebe	18		clc				clc 								; add 2 for 'max element' byte.
.3ebf	a5 2e		lda $2e				lda 	temp2
.3ec1	69 02		adc #$02			adc 	#2
.3ec3	85 2e		sta $2e				sta 	temp2
.3ec5	90 02		bcc $3ec9			bcc 	_AASNoCarry
.3ec7	e6 2f		inc $2f				inc 	temp2+1
.3ec9					_AASNoCarry:
.3ec9	18		clc				clc 								; add to low memory, allocating space.
.3eca	a5 35		lda $35				lda 	lowMemory
.3ecc	65 2e		adc $2e				adc 	temp2
.3ece	85 35		sta $35				sta 	lowMemory
.3ed0	a5 36		lda $36				lda 	lowMemory+1
.3ed2	65 2f		adc $2f				adc 	temp2+1
.3ed4	85 36		sta $36				sta 	lowMemory+1
.3ed6	b0 05		bcs $3edd			bcs 	_AASFail 					; out of memory as adding causes wrapround
.3ed8	c5 34		cmp $34				cmp 	highMemory+1 				; >= high memory pointer.
.3eda	b0 01		bcs $3edd			bcs 	_AASFail
.3edc	60		rts				rts
.3edd					_AASFail:
.3edd	a2 22		ldx #$22			ldx 	#ErrorID_Memory
.3edf	20 e0 14	jsr $14e0		jsr	errorHandler
.3ee2					MultiplyTemp2ByA:
.3ee2	48		pha				pha
.3ee3	a5 2e		lda $2e				lda 	temp2 						; copy temp2 to temp3.
.3ee5	85 30		sta $30				sta 	temp3
.3ee7	a5 2f		lda $2f				lda 	temp2+1
.3ee9	85 31		sta $31				sta 	temp3+1
.3eeb	68		pla				pla
.3eec	06 2e		asl $2e				asl 	temp2 						; double it.
.3eee	26 2f		rol $2f				rol 	temp2+1
.3ef0	c9 02		cmp #$02			cmp 	#2 							; if x 2 then exit.
.3ef2	f0 15		beq $3f09			beq 	_MTBAExit
.3ef4	c9 06		cmp #$06			cmp 	#6 							; if x 6 then add temp3 to temp2
.3ef6	d0 0d		bne $3f05			bne 	_MTBANotFloat
.3ef8	18		clc				clc 								; so this will make it x 3
.3ef9	a5 2e		lda $2e				lda 	temp2
.3efb	65 30		adc $30				adc 	temp3
.3efd	85 2e		sta $2e				sta 	temp2
.3eff	a5 2f		lda $2f				lda 	temp2+1
.3f01	65 31		adc $31				adc 	temp3+1
.3f03	85 2f		sta $2f				sta 	temp2+1
.3f05					_MTBANotFloat:
.3f05	06 2e		asl $2e				asl 	temp2 						; double it.
.3f07	26 2f		rol $2f				rol 	temp2+1
.3f09					_MTBAExit:
.3f09	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/variable/access.asm

.0d2a					varHash:
>0d2a							.fill	1
.0d2b					varType:
>0d2b							.fill 	1
.0d2c					varEnd:
>0d2c							.fill 	1
.003b					hashList:
>003b							.fill 	2
.3f0a					AccessVariable:
.3f0a	aa		tax				tax 								; stack in X
.3f0b	c8		iny				iny									; look at second character
.3f0c	b1 28		lda ($28),y			lda 	(codePtr),y
.3f0e	88		dey				dey
.3f0f	c9 3a		cmp #$3a			cmp 	#TYPE_INT 					; is it the integer marker ($3A)
.3f11	d0 15		bne $3f28			bne 	_AVLong 					; no, always use the hash tables.
.3f13	b1 28		lda ($28),y			lda 	(codePtr),y 				; this is the 6 bit ASCII of A-Z 1-26
.3f15	38		sec				sec 	 							; make it 0-25
.3f16	e9 01		sbc #$01			sbc 	#1
.3f18	0a		asl a				asl 	a 							; x 4 as 4 bytes / variable.
.3f19	0a		asl a				asl 	a
.3f1a	95 50		sta $50,x			sta 	esInt0,x
.3f1c	a9 0a		lda #$0a			lda 	#SingleLetterVar >> 8 		; make it an address
.3f1e	95 58		sta $58,x			sta 	esInt1,x
.3f20	a9 80		lda #$80			lda 	#$80 						; type is an integer reference.
.3f22	95 48		sta $48,x			sta 	esType,x
.3f24	c8		iny				iny 								; skip over the variable reference in the code.
.3f25	c8		iny				iny  								; (1 letter, 1 type)
.3f26	8a		txa				txa 								; stack in A to return.
.3f27	60		rts				rts
.3f28					_AVLong:
.3f28	8a		txa				txa
.3f29	48		pha				pha
.3f2a	20 71 3f	jsr $3f71			jsr 	AccessSetup 				; set up the basic information we need for later
.3f2d	20 7a 40	jsr $407a			jsr 	FindVariable 				; does the variable exist already ?
.3f30	b0 0e		bcs $3f40			bcs 	_AVFound 					; yes, then its found
.3f32	ad 2b 0d	lda $0d2b			lda 	varType 					; otherwise, is the variable type an array
.3f35	4a		lsr a				lsr 	a
.3f36	90 05		bcc $3f3d			bcc 	_AVCanCreate 				; if not, we can autocreate
.3f38	a2 15		ldx #$15			ldx 	#ErrorID_noauto
.3f3a	20 e0 14	jsr $14e0		jsr	errorHandler
.3f3d					_AVCanCreate:
.3f3d	20 ae 3f	jsr $3fae			jsr 	CreateVariable 				; variable does not exist, create it.
.3f40					_AVFound:
.3f40	68		pla				pla
.3f41	aa		tax				tax
.3f42	18		clc				clc 								; copy temp0 (variable record address)
.3f43	a5 2a		lda $2a				lda 	temp0 						; +5 (to point to the data)
.3f45	69 05		adc #$05			adc 	#5 							; (first 5 bytes are link, name, hash)
.3f47	95 50		sta $50,x			sta 	esInt0,x
.3f49	a5 2b		lda $2b				lda 	temp0+1
.3f4b	69 00		adc #$00			adc 	#0
.3f4d	95 58		sta $58,x			sta 	esInt1,x
.3f4f	a9 00		lda #$00			lda 	#0
.3f51	95 60		sta $60,x			sta 	esInt2,x
.3f53	95 68		sta $68,x			sta 	esInt3,x
.3f55	ac 2b 0d	ldy $0d2b			ldy 	varType 					; get the type ID from the type.
.3f58	b9 31 3f	lda $3f31,y			lda 	_AVTypeTable-$3A,y 			; e.g. a reference to int/float/string.
.3f5b	95 48		sta $48,x			sta 	esType,x
.3f5d	ac 2c 0d	ldy $0d2c			ldy 	varEnd 						; restore Y
.3f60	ad 2b 0d	lda $0d2b			lda 	VarType 					; get variable type, put LSB into C
.3f63	4a		lsr a				lsr 	a
.3f64	90 03		bcc $3f69			bcc 	_AVNotArray 				; if carry set,it is an array variable.
.3f66	20 12 3d	jsr $3d12			jsr 	AccessArray 				; array lookup. if LSB was set.
.3f69					_AVNotArray:
.3f69	8a		txa				txa 								; return stack in A and return
.3f6a	60		rts				rts
.3f6b					_AVTypeTable:
>3f6b	80 80						.byte 	$80,$80						; integer
>3f6d	c0 c0						.byte 	$C0,$C0 					; string
>3f6f	81 81						.byte 	$81,$81 					; float
.3f71					AccessSetup:
.3f71	a9 00		lda #$00			lda 	#0 							; zero the hash byte.
.3f73	8d 2a 0d	sta $0d2a			sta 	varHash
.3f76	98		tya				tya
.3f77	48		pha				pha
.3f78	b1 28		lda ($28),y	_ASLoop:lda 	(codePtr),y					; get next identifier character
.3f7a	c9 3a		cmp #$3a			cmp 	#$3A 						; is it 3A-3F which end all identifiers ?
.3f7c	b0 0b		bcs $3f89			bcs 	_ASComplete
.3f7e	18		clc				clc 								; add to the hash. Might improve this.
.3f7f	6d 2a 0d	adc $0d2a			adc 	varHash
.3f82	8d 2a 0d	sta $0d2a			sta 	varHash
.3f85	c8		iny				iny 								; next character
.3f86	4c 78 3f	jmp $3f78			jmp 	_ASLoop
.3f89					_ASComplete:
.3f89	8d 2b 0d	sta $0d2b			sta 	varType 					; save variable type byte
.3f8c	c8		iny				iny
.3f8d	8c 2c 0d	sty $0d2c			sty 	varEnd 						; save the ending position.
.3f90	38		sec				sec 								; convert type byte from $3A-$3F to 0..5
.3f91	e9 3a		sbc #$3a			sbc 	#$3A
.3f93	0a		asl a				asl 	a 							; multiply by hashTableSize (8 in this case)
.3f94	0a		asl a				asl 	a
.3f95	0a		asl a				asl 	a
.3f96	0a		asl a				asl 	a 							; 2 bytes/word
.3f97	85 2a		sta $2a				sta 	temp0 						; this is the offset to the start of the table.
.3f99	ad 2a 0d	lda $0d2a			lda 	varHash 					; get hash
.3f9c	29 07		and #$07			and 	#(hashTableSize-1)			; force into range (for 8,0..7)
.3f9e	0a		asl a				asl  	a 							; x 2 (for word) and clear carry
.3f9f	65 2a		adc $2a				adc 	temp0 						; now offset from the start of the hash table.
.3fa1	69 68		adc #$68			adc 	#hashTables & $FF 			; add to hash table base address
.3fa3	85 3b		sta $3b				sta 	hashList 					; making hashLists point to the head of the link list.
.3fa5	a9 0a		lda #$0a			lda 	#hashTables >> 8
.3fa7	69 00		adc #$00			adc 	#0
.3fa9	85 3c		sta $3c				sta 	hashList+1
.3fab	68		pla				pla
.3fac	a8		tay				tay
.3fad	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/variable/create.asm

.3fae					CreateVariable:
.3fae	98		tya				tya 								; push Y on the stack twice.
.3faf	48		pha				pha									; position in code of the new variable.
.3fb0	48		pha				pha
.3fb1	ae 2b 0d	ldx $0d2b			ldx 	varType 					; get var type 0-5 from the var type
.3fb4	bd d8 3f	lda $3fd8,x			lda		_CVSize-$3A,x 				; the bytes required for this new variable.
.3fb7	48		pha				pha 								; save length
.3fb8	a5 35		lda $35				lda 	lowMemory 					; set low Memory ptr to temp0
.3fba	85 2a		sta $2a				sta 	temp0 						; (address of the new variable)
.3fbc	a5 36		lda $36				lda 	lowMemory+1
.3fbe	85 2b		sta $2b				sta 	temp0+1
.3fc0	68		pla				pla 								; get length
.3fc1	18		clc				clc 								; add to low memory.
.3fc2	65 35		adc $35				adc 	lowMemory
.3fc4	85 35		sta $35				sta 	lowMemory
.3fc6	90 08		bcc $3fd0			bcc 	_CVNoCarry
.3fc8	e6 36		inc $36				inc 	lowMemory+1
.3fca	a5 36		lda $36				lda 	lowMemory+1 				; check out of memory.
.3fcc	c5 34		cmp $34				cmp 	highMemory+1
.3fce	b0 3d		bcs $400d			bcs 	_CVMemory
.3fd0					_CVNoCarry:
.3fd0	ad 2a 0d	lda $0d2a			lda 	varHash 					; store hash at offset 4.
.3fd3	a0 04		ldy #$04			ldy 	#4
.3fd5	91 2a		sta ($2a),y			sta 	(temp0),y
.3fd7	68		pla				pla 								; offset, work out where the variable name is.
.3fd8	18		clc				clc
.3fd9	65 28		adc $28				adc 	codePtr
.3fdb	a0 02		ldy #$02			ldy 	#2 							; copy that into slots 2 + 3.
.3fdd	91 2a		sta ($2a),y			sta 	(temp0),y
.3fdf	a5 29		lda $29				lda 	codePtr+1
.3fe1	69 00		adc #$00			adc 	#0
.3fe3	c8		iny				iny
.3fe4	91 2a		sta ($2a),y			sta 	(temp0),y
.3fe6	cd c9 0a	cmp $0ac9			cmp 	basePage+1 					; compare against the program base.
.3fe9	b0 03		bcs $3fee			bcs 	_CVNotImmediate
.3feb	20 50 40	jsr $4050			jsr 	CloneVariableName 			; we need to clone the variable name (immediate mode)
.3fee					_CVNotImmediate:
.3fee	a0 00		ldy #$00			ldy 	#0 							; copy current hash pointer in link
.3ff0	b1 3b		lda ($3b),y			lda 	(hashList),y 				; so we're inserting it in the front of a linked list
.3ff2	91 2a		sta ($2a),y			sta 	(temp0),y
.3ff4	c8		iny				iny
.3ff5	b1 3b		lda ($3b),y			lda 	(hashList),y
.3ff7	91 2a		sta ($2a),y			sta 	(temp0),y
.3ff9	a5 2b		lda $2b				lda 	temp0+1 					; set new link
.3ffb	91 3b		sta ($3b),y			sta 	(hashList),y
.3ffd	88		dey				dey
.3ffe	a5 2a		lda $2a				lda 	temp0
.4000	91 3b		sta ($3b),y			sta 	(hashList),y
.4002	ad 2b 0d	lda $0d2b			lda 	varType 					; type in A
.4005	a0 05		ldy #$05			ldy 	#5 							; offset in Y
.4007	20 18 40	jsr $4018			jsr 	ZeroTemp0Y 					; zero (temp0),y with whatever type.
.400a	68		pla				pla
.400b	a8		tay				tay
.400c	60		rts				rts
.400d					_CVMemory:
.400d	a2 22		ldx #$22			ldx 	#ErrorID_Memory
.400f	20 e0 14	jsr $14e0		jsr	errorHandler
>4012	09 07				_CVSize:.byte 	VarHSize+VarISize,VarHSize+VarASize 					; <storage for integer>
>4014	07 07						.byte 	VarHSize+VarSSize,VarHSize+VarASize 					; <storage for string>
>4016	0b 07						.byte 	VarHSize+VarFSize,VarHSize+VarASize 					; <storage for float>
.4018					ZeroTemp0Y:
.4018	4a		lsr a				lsr 	a 							; bit 0 in carry
.4019	0a		asl a				asl 	a
.401a	b0 19		bcs $4035			bcs 	_ZTExit 					; we don't initialise arrays.
.401c	c9 3c		cmp #$3c			cmp 	#$3C 						; check string
.401e	f0 16		beq $4036			beq 	_ZTWriteNullString 			; write "" string
.4020	c9 3e		cmp #$3e			cmp 	#$3E 						; check float
.4022	f0 22		beq $4046			beq 	_ZTWriteFloat
.4024	98		tya				tya
.4025	48		pha				pha
.4026	a9 00		lda #$00			lda 	#0
.4028	91 2a		sta ($2a),y			sta 	(temp0),y
.402a	c8		iny				iny
.402b	91 2a		sta ($2a),y			sta 	(temp0),y
.402d	c8		iny				iny
.402e	91 2a		sta ($2a),y			sta 	(temp0),y
.4030	c8		iny				iny
.4031	91 2a		sta ($2a),y			sta 	(temp0),y
.4033	68		pla				pla
.4034	a8		tay				tay
.4035					_ZTExit:
.4035	60		rts				rts
.4036					_ZTWriteNullString:
.4036	a9 00		lda #$00			lda 	#0 							; put a reference to null string as the default value.
.4038	8d ce 0a	sta $0ace			sta 	NullString
.403b	a9 ce		lda #$ce			lda 	#NullString & $FF
.403d	91 2a		sta ($2a),y			sta 	(temp0),y
.403f	a9 0a		lda #$0a			lda 	#NullString >> 8
.4041	c8		iny				iny
.4042	91 2a		sta ($2a),y			sta 	(temp0),y
.4044	88		dey				dey
.4045	60		rts				rts
.4046					_ZTWriteFloat:
.4046	8a		txa				txa
.4047	48		pha				pha
.4048	a2 1e		ldx #$1e		ldx	#30
.404a	20 e1 19	jsr $19e1		jsr	floatingpointHandler
.404d	68		pla				pla
.404e	aa		tax				tax
.404f	60		rts				rts
.4050					CloneVariableName:
.4050	a0 02		ldy #$02			ldy 	#2 							; copy vname address to temp2
.4052	b1 2a		lda ($2a),y			lda 	(temp0),y
.4054	85 2e		sta $2e				sta 	temp2
.4056	c8		iny				iny
.4057	b1 2a		lda ($2a),y			lda 	(temp0),y
.4059	85 2f		sta $2f				sta 	temp2+1
.405b	a5 36		lda $36				lda 	lowMemory+1 				; copy lowMemory address to (temp0),2/3
.405d	91 2a		sta ($2a),y			sta 	(temp0),y
.405f	88		dey				dey
.4060	a5 35		lda $35				lda 	lowMemory
.4062	91 2a		sta ($2a),y			sta 	(temp0),y
.4064	a0 00		ldy #$00			ldy 	#0 							; copy data from (temp2) to (lowMemory)
.4066					_CVNCopy:
.4066	b1 2e		lda ($2e),y			lda		(temp2),y
.4068	91 35		sta ($35),y			sta 	(lowMemory),y
.406a	c8		iny				iny
.406b	c9 3a		cmp #$3a			cmp 	#$3A 						; until the whole name has been copied.
.406d	90 f7		bcc $4066			bcc 	_CVNCopy
.406f	98		tya				tya 								; add Y to low memory
.4070	18		clc				clc
.4071	65 35		adc $35				adc 	lowMemory
.4073	85 35		sta $35				sta 	lowMemory
.4075	90 02		bcc $4079			bcc 	_CVNNoCarry
.4077	e6 36		inc $36				inc 	lowMemory+1
.4079					_CVNNoCarry:
.4079	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/variable/find.asm

.407a					FindVariable:
.407a	98		tya				tya
.407b	48		pha				pha
.407c	98		tya				tya 								; point temp2 to the actual name
.407d	18		clc				clc 								; in memory of the variable being created
.407e	65 28		adc $28				adc 	codePtr
.4080	85 2e		sta $2e				sta 	temp2
.4082	a5 29		lda $29				lda 	codePtr+1
.4084	69 00		adc #$00			adc 	#0
.4086	85 2f		sta $2f				sta 	temp2+1
.4088	a0 00		ldy #$00			ldy 	#0
.408a	a5 3b		lda $3b				lda 	hashList 					; copy hashlist to temp0
.408c	85 2a		sta $2a				sta 	temp0
.408e	a5 3c		lda $3c				lda 	hashList+1
.4090	85 2b		sta $2b				sta 	temp0+1
.4092	a0 01		ldy #$01	_FVNext:ldy 	#1 							; get MSB
.4094	b1 2a		lda ($2a),y			lda 	(temp0),y
.4096	f0 2c		beq $40c4			beq 	_FVFail
.4098	aa		tax				tax
.4099	88		dey				dey		 							; get LSB
.409a	b1 2a		lda ($2a),y			lda 	(temp0),y
.409c	85 2a		sta $2a				sta 	temp0 						; update pointer.
.409e	86 2b		stx $2b				stx 	temp0+1
.40a0	a0 04		ldy #$04			ldy 	#4 							; check hashes match
.40a2	b1 2a		lda ($2a),y			lda 	(temp0),y
.40a4	cd 2a 0d	cmp $0d2a			cmp 	varHash
.40a7	d0 e9		bne $4092			bne 	_FVNext 					; if not, no point in checking the name.
.40a9	88		dey				dey 								; copy name pointer (+2,+3) to temp1.
.40aa	b1 2a		lda ($2a),y			lda 	(temp0),y
.40ac	85 2d		sta $2d				sta 	temp1+1
.40ae	88		dey				dey
.40af	b1 2a		lda ($2a),y			lda 	(temp0),y
.40b1	85 2c		sta $2c				sta 	temp1
.40b3	a0 00		ldy #$00			ldy 	#0
.40b5					_FVCheck:
.40b5	b1 2c		lda ($2c),y			lda 	(temp1),y 					; compare names
.40b7	d1 2e		cmp ($2e),y			cmp 	(temp2),y
.40b9	d0 d7		bne $4092			bne 	_FVNext		 				; fail if different.
.40bb	c8		iny				iny
.40bc	c9 3a		cmp #$3a			cmp 	#$3A 						; until reached the end marker.
.40be	90 f5		bcc $40b5			bcc 	_FVCheck
.40c0	68		pla				pla
.40c1	a8		tay				tay
.40c2	38		sec				sec
.40c3	60		rts				rts
.40c4					_FVFail:
.40c4	68		pla				pla
.40c5	a8		tay				tay
.40c6	18		clc				clc
.40c7	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/variable/reset.asm

.40c8					HashTableReset:
.40c8	a2 60		ldx #$60			ldx 	#6*2*hashTableSize			; 6 types, 2 bytes per table entry.
.40ca	a9 00		lda #$00			lda 	#0
.40cc					_HTRClear:
.40cc	9d 67 0a	sta $0a67,x			sta 	hashTables-1,x
.40cf	ca		dex				dex
.40d0	d0 fa		bne $40cc			bne 	_HTRClear
.40d2	60		rts				rts

;******  Return to file: variable/variable.asm

.40d3					variableHandler:
.40d3	7c d6 40	jmp ($40d6,x)			jmp 	(variableVectors,x)
.40d6					variableVectors:
>40d6	0a 3f					.word AccessVariable       ; index 0
>40d8	9a 3d					.word CreateArray          ; index 2
>40da	c8 40					.word HashTableReset       ; index 4

;******  Return to file: basic.asm

.40dc					section_end_variable:
.40dc					section_start_footer:

;******  Processing file: footer/footer.asm


;******  Processing file: footer/99end.asm

.003d					endZeroPage:
.0d2d					endStorage:
>40dc							.align 	256
.4100					programMemory:
>40ff	ff						.byte 	$FF

;******  Return to file: footer/footer.asm


;******  Return to file: basic.asm

.4100					section_end_footer:

;******  End of listing
