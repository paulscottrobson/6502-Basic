
; 64tass Turbo Assembler Macro V1.55.2200 listing file
; 64tass -D autorun=1 -D coldstartnew=0 -Walias -Wmacro-prefix -Wall -q -c -L ..\source\bin\basic.lst -l ..\source\bin\basic.lbl -Wall -o ..\source\bin\stub.prg basic.asm
; Thu Apr 01 06:47:06 2021

;Offset	;Hex		;Monitor	;Source

;******  Command line definitions

=1					autorun=1
=0					coldstartnew=0

;******  Processing input file: basic.asm


;******  Processing file: header/01common.inc


;******  Processing file: header/../generated/installed.inc

=1					installed_header = 1
=1					installed_main = 1
=1					installed_variable = 1
=1					installed_assembler = 1
=1					installed_error = 1
=1					installed_extension = 1
=1					installed_string = 1
=1					installed_device = 1
=0					installed_floatingpoint = 0
=1					installed_interaction = 1
=1					installed_tokeniser = 1
=1					installed_footer = 1

;******  Return to file: header/01common.inc

=$1000					CodeStart = $1000
=$800					MemoryStorage = $800
=$9f00					EndOfMemory = $9F00
=$28					ZeroPageStorage = $28
=$90					StackAddress = $90
=8					StackSize = 8
=2					retStackSizePages = 2
=8					hashTableSize = 8			; if this changes, the calculation is AccessSetup has to match it.
="G"					markerGOSUB = 'G'
="R"					markerREPEAT = 'R'
="F"					markerFOR = 'F'
="W"					markerWHILE = 'W'
="P"					markerPROC = 'P'
="$"					markerSTRING = '$'
="#"					markerFLOAT = '#'
="%"					markerINT = '%'
=5					VarHSize = 5 								; header (2 link, 2 name, 1 hash)
=2					VarASize = 2 								; array [address of first level]
=4					VarISize = 4 								; integer (32 bit)
=6					VarFSize = 6 								; float (4 mantissa, 1 exponent 1 sign/zero)
=2					VarSSize = 2 								; address (2 bytes)

;******  Return to file: basic.asm


;******  Processing file: header/02macros.inc


;******  Return to file: basic.asm


;******  Processing file: header/03data.inc

>0028					codePtr:.fill 	2							; (codePtr),y points to code.
>002a					temp0: 	.fill 	2							; working variables.
>002c					temp1: 	.fill 	2
>002e					temp2: 	.fill 	2
>0030					temp3: 	.fill 	2
.0032					tempshort:
>0032							.fill 	1
.0033					highMemory:
>0033							.fill 	2
.0035					lowMemory:
>0035							.fill 	2
>0800							.align	256
.0800					returnStack:
>0800							.fill 	retStackSizePages * 256
=512					retStackSize = retStackSizePages * 256
.0a00					SingleLetterVar:
>0a00					 		.fill 	26*4
.0a68					currentStorage:
>0090					esType:	.fill 	StackSize  					; type byte (see above)
>0098					esInt0:	.fill 	StackSize 					; integer or mantissa
>00a0					esInt1:	.fill 	StackSize
>00a8					esInt2:	.fill 	StackSize
>00b0					esInt3:	.fill 	StackSize
>00b8					esExp:	.fill 	StackSize 					; exponent ($80 = 0)
>00c0					esZSign:.fill 	StackSize 					; for floating point - sign (bit 7) isZero (bit 6)
.00c8					endOfStack:
=$98					esMant0 = esInt0 							; synonyms.
=$a0					esMant1 = esInt1
=$a8					esMant2 = esInt2
=$b0					esMant3 = esInt3
.0a68					hashTables:
>0a68							.fill 	6*2*hashTableSize
.0ac8					basePage:
>0ac8							.fill 	2
.0aca					endProgram:
>0aca							.fill 	2
.0acc					endMemory:
>0acc							.fill 	2
.0ace					NullString:
>0ace							.fill 	1							; don't waste memory concreting null strings.
.0acf					convertBuffer:
>0acf							.fill 	35

;******  Processing file: header/../generated/tokenconst.inc

=$80					TOK_EOL=$80
=$81					TOK_SHIFT1=$81
=$82					TOK_SHIFT2=$82
=$83					TOK_SHIFT3=$83
=$84					TOK_FPC=$84
=$85					TOK_STR=$85
=$86					TOK_BINARYST=$86
=$99					TOK_STRUCTST=$99
=$a4					TOK_UNARYST=$a4
=$c9					TOK_TOKENS=$c9
=$86					TKW_AND                      = $86 ; and
=$87					TKW_OR                       = $87 ; or
=$88					TKW_XOR                      = $88 ; xor
=$89					TKW_GREATEREQUAL             = $89 ; >=
=$8a					TKW_LESSEQUAL                = $8a ; <=
=$8b					TKW_GREATER                  = $8b ; >
=$8c					TKW_LESS                     = $8c ; <
=$8d					TKW_EQUAL                    = $8d ; =
=$8e					TKW_LESSGREATER              = $8e ; <>
=$8f					TKW_PLUS                     = $8f ; +
=$90					TKW_MINUS                    = $90 ; -
=$91					TKW_GREATERGREATER           = $91 ; >>
=$92					TKW_LESSLESS                 = $92 ; <<
=$93					TKW_STAR                     = $93 ; *
=$94					TKW_SLASH                    = $94 ; /
=$95					TKW_MOD                      = $95 ; mod
=$96					TKW_HAT                      = $96 ; ^
=$97					TKW_PLING                    = $97 ; !
=$98					TKW_QMARK                    = $98 ; ?
=$99					TKW_REPEAT                   = $99 ; repeat
=$9a					TKW_WHILE                    = $9a ; while
=$9b					TKW_FOR                      = $9b ; for
=$9c					TKW_IF                       = $9c ; if
=$9d					TKW_DEFPROC                  = $9d ; defproc
=$9e					TKW_UNTIL                    = $9e ; until
=$9f					TKW_WEND                     = $9f ; wend
=$a0					TKW_NEXT                     = $a0 ; next
=$a1					TKW_THEN                     = $a1 ; then
=$a2					TKW_ENDIF                    = $a2 ; endif
=$a3					TKW_ENDPROC                  = $a3 ; endproc
=$a4					TKW_LPAREN                   = $a4 ; (
=$a5					TKW_LENLPAREN                = $a5 ; len(
=$a6					TKW_SGNLPAREN                = $a6 ; sgn(
=$a7					TKW_ABSLPAREN                = $a7 ; abs(
=$a8					TKW_RANDOMLPAREN             = $a8 ; random(
=$a9					TKW_PAGE                     = $a9 ; page
=$aa					TKW_TRUE                     = $aa ; true
=$ab					TKW_FALSE                    = $ab ; false
=$ac					TKW_MINLPAREN                = $ac ; min(
=$ad					TKW_MAXLPAREN                = $ad ; max(
=$ae					TKW_SYSLPAREN                = $ae ; sys(
=$af					TKW_TIMERLPAREN              = $af ; timer(
=$b0					TKW_EVENTLPAREN              = $b0 ; event(
=$b1					TKW_GETLPAREN                = $b1 ; get(
=$b2					TKW_INKEYLPAREN              = $b2 ; inkey(
=$b3					TKW_ALLOCLPAREN              = $b3 ; alloc(
=$b4					TKW_CHRDOLLARLPAREN          = $b4 ; chr$(
=$b5					TKW_LEFTDOLLARLPAREN         = $b5 ; left$(
=$b6					TKW_MIDDOLLARLPAREN          = $b6 ; mid$(
=$b7					TKW_RIGHTDOLLARLPAREN        = $b7 ; right$(
=$b8					TKW_STRDOLLARLPAREN          = $b8 ; str$(
=$b9					TKW_VALLPAREN                = $b9 ; val(
=$ba					TKW_PEEKLPAREN               = $ba ; peek(
=$bb					TKW_DEEKLPAREN               = $bb ; deek(
=$bc					TKW_LEEKLPAREN               = $bc ; leek(
=$bd					TKW_ASCLPAREN                = $bd ; asc(
=$be					TKW_INTLPAREN                = $be ; int(
=$bf					TKW_FLOATLPAREN              = $bf ; float(
=$c0					TKW_ISVALLPAREN              = $c0 ; isval(
=$c1					TKW_UPPERDOLLARLPAREN        = $c1 ; upper$(
=$c2					TKW_LOWERDOLLARLPAREN        = $c2 ; lower$(
=$c3					TKW_ATC                      = $c3 ; @
=$c4					TKW_WAVY                     = $c4 ; ~
=$c5					TKW_AMP                      = $c5 ; &
=$c6					TKW_GETDOLLARLPAREN          = $c6 ; get$(
=$c7					TKW_INKEYDOLLARLPAREN        = $c7 ; inkey$(
=$c8					TKW_MEM                      = $c8 ; mem
=$c9					TKW_RPAREN                   = $c9 ; )
=$ca					TKW_COLON                    = $ca ; :
=$cb					TKW_COMMA                    = $cb ; ,
=$cc					TKW_SEMICOLON                = $cc ; ;
=$cd					TKW_QUOTE                    = $cd ; '
=$ce					TKW_TO                       = $ce ; to
=$cf					TKW_STEP                     = $cf ; step
=$d0					TKW_PROC                     = $d0 ; proc
=$d1					TKW_LOCAL                    = $d1 ; local
=$d2					TKW_DIM                      = $d2 ; dim
=$d3					TKW_REM                      = $d3 ; rem
=$d4					TKW_LET                      = $d4 ; let
=$d5					TKW_INPUT                    = $d5 ; input
=$d6					TKW_ELSE                     = $d6 ; else
=$d7					TKW_VDU                      = $d7 ; vdu
=$d8					TKW_PRINT                    = $d8 ; print
=$d9					TKW_DATA                     = $d9 ; data
=$da					TKW_IMAGE                    = $da ; image
=$db					TKW_AT                       = $db ; at
=$dc					TKW_FLIP                     = $dc ; flip
=$dd					TKW_ASSERT                   = $dd ; assert
=$de					TKW_POKE                     = $de ; poke
=$df					TKW_DOKE                     = $df ; doke
=$e0					TKW_LOKE                     = $e0 ; loke
=$e1					TKW_INK                      = $e1 ; ink
=$e2					TKW_PAPER                    = $e2 ; paper
=$e3					TKW_CLS                      = $e3 ; cls
=$e4					TKW_LOCATE                   = $e4 ; locate
=$e5					TKW_PERIOD                   = $e5 ; .
=$e6					TKW_HASH                     = $e6 ; #
=$e7					TKW_CLEAR                    = $e7 ; clear
=$86					TKW_LOAD                     = $86 ; load
=$87					TKW_SAVE                     = $87 ; save
=$88					TKW_LIST                     = $88 ; list
=$89					TKW_NEW                      = $89 ; new
=$8a					TKW_BREAK                    = $8a ; break
=$8b					TKW_RUN                      = $8b ; run
=$8c					TKW_READ                     = $8c ; read
=$8d					TKW_RESTORE                  = $8d ; restore
=$8e					TKW_END                      = $8e ; end
=$8f					TKW_STOP                     = $8f ; stop
=$90					TKW_XEMU                     = $90 ; xemu
=$91					TKW_GOTO                     = $91 ; goto
=$92					TKW_GOSUB                    = $92 ; gosub
=$93					TKW_RETURN                   = $93 ; return
=$94					TKW_ORA                      = $94 ; ora
=$95					TKW_LPARENANDRPAREN          = $95 ; (and)
=$96					TKW_EOR                      = $96 ; eor
=$97					TKW_ADC                      = $97 ; adc
=$98					TKW_STA                      = $98 ; sta
=$99					TKW_LDA                      = $99 ; lda
=$9a					TKW_CMP                      = $9a ; cmp
=$9b					TKW_SBC                      = $9b ; sbc
=$9c					TKW_ASL                      = $9c ; asl
=$9d					TKW_ROL                      = $9d ; rol
=$9e					TKW_LSR                      = $9e ; lsr
=$9f					TKW_ROR                      = $9f ; ror
=$a0					TKW_STX                      = $a0 ; stx
=$a1					TKW_LDX                      = $a1 ; ldx
=$a2					TKW_DEC                      = $a2 ; dec
=$a3					TKW_INC                      = $a3 ; inc
=$a4					TKW_STZ                      = $a4 ; stz
=$a5					TKW_BIT                      = $a5 ; bit
=$a6					TKW_STY                      = $a6 ; sty
=$a7					TKW_LDY                      = $a7 ; ldy
=$a8					TKW_CPY                      = $a8 ; cpy
=$a9					TKW_CPX                      = $a9 ; cpx
=$aa					TKW_TSB                      = $aa ; tsb
=$ab					TKW_TRB                      = $ab ; trb
=$ac					TKW_JSR                      = $ac ; jsr
=$ad					TKW_JMP                      = $ad ; jmp
=$ae					TKW_BPL                      = $ae ; bpl
=$af					TKW_BMI                      = $af ; bmi
=$b0					TKW_BVC                      = $b0 ; bvc
=$b1					TKW_BVS                      = $b1 ; bvs
=$b2					TKW_BCC                      = $b2 ; bcc
=$b3					TKW_BCS                      = $b3 ; bcs
=$b4					TKW_BNE                      = $b4 ; bne
=$b5					TKW_BEQ                      = $b5 ; beq
=$b6					TKW_BRA                      = $b6 ; bra
=$b7					TKW_BRK                      = $b7 ; brk
=$b8					TKW_PHP                      = $b8 ; php
=$b9					TKW_CLC                      = $b9 ; clc
=$ba					TKW_PLP                      = $ba ; plp
=$bb					TKW_SEC                      = $bb ; sec
=$bc					TKW_RTI                      = $bc ; rti
=$bd					TKW_PHA                      = $bd ; pha
=$be					TKW_CLI                      = $be ; cli
=$bf					TKW_PHY                      = $bf ; phy
=$c0					TKW_RTS                      = $c0 ; rts
=$c1					TKW_PLA                      = $c1 ; pla
=$c2					TKW_SEI                      = $c2 ; sei
=$c3					TKW_PLY                      = $c3 ; ply
=$c4					TKW_DEY                      = $c4 ; dey
=$c5					TKW_TXA                      = $c5 ; txa
=$c6					TKW_TYA                      = $c6 ; tya
=$c7					TKW_TXS                      = $c7 ; txs
=$c8					TKW_TAY                      = $c8 ; tay
=$c9					TKW_TAX                      = $c9 ; tax
=$ca					TKW_CLV                      = $ca ; clv
=$cb					TKW_TSX                      = $cb ; tsx
=$cc					TKW_INY                      = $cc ; iny
=$cd					TKW_DEX                      = $cd ; dex
=$ce					TKW_CLD                      = $ce ; cld
=$cf					TKW_PHX                      = $cf ; phx
=$d0					TKW_INX                      = $d0 ; inx
=$d1					TKW_NOP                      = $d1 ; nop
=$d2					TKW_SED                      = $d2 ; sed
=$d3					TKW_PLX                      = $d3 ; plx
=$86					TKW_VPOKE                    = $86 ; vpoke
=$87					TKW_VDOKE                    = $87 ; vdoke
=$88					TKW_VLOAD                    = $88 ; vload
=$89					TKW_MODE                     = $89 ; mode
=$8a					TKW_PALETTE                  = $8a ; palette
=$8b					TKW_SPRITE                   = $8b ; sprite
=$8c					TKW_CLG                      = $8c ; clg
=$86					TKW_VPEEKLPAREN              = $86 ; vpeek(
=$87					TKW_VDEEKLPAREN              = $87 ; vdeek(
=$88					TKW_SPRITEPERIODXLPAREN      = $88 ; sprite.x(
=$89					TKW_SPRITEPERIODYLPAREN      = $89 ; sprite.y(
=$8a					TKW_HITLPAREN                = $8a ; hit(
=$8b					TKW_JOYPERIODXLPAREN         = $8b ; joy.x(
=$8c					TKW_JOYPERIODYLPAREN         = $8c ; joy.y(
=$8d					TKW_JOYPERIODBLPAREN         = $8d ; joy.b(
=$8e					TKW_CLOCKLPAREN              = $8e ; clock(

;******  Return to file: header/03data.inc

=$3a					TYPE_INT =		($3A) 						; type bytes that end identifier.
=$3b					TYPE_INTARRAY =	($3B)
=$3c					TYPE_STR =		($3C)
=$3d					TYPE_STRARRAY =	($3D)
=$3e					TYPE_FLOAT =	($3E)
=$3f					TYPE_FLOATARRAY=($3F)

;******  Processing file: header/../generated/asmconst.inc

=$94					TKA_GROUP1 = $94
=$9c					TKA_GROUP2 = $9c
=$ae					TKA_GROUP3 = $ae
=$b7					TKA_GROUP4 = $b7
=$d4					TKA_END4 = $d4

;******  Return to file: header/03data.inc


;******  Return to file: basic.asm


;******  Processing file: header/header.inc


;******  Return to file: basic.asm


;******  Processing file: assembler/asmconst.inc

=0					AMD_IMM		= 0					; Immediate mode.
=1					AMD_ZERO 	= 1					; Zero Page
=2					AMD_ACCIMP	= 2					; Accumulator/Implied
=3					AMD_ABS 	= 3					; Absolute
=4					AMD_ZEROINDY= 4					; Zero Indirect,Y
=5					AMD_ZEROX 	= 5					; Zero Page,X
=6					AMD_ABSY 	= 6					; Absolute,Y
=7					AMD_ABSX 	= 7					; Absolute,X
=8					AMD_ZEROIND = 8					; Zero Indirect
=9					AMD_ZEROY 	= 9					; Zero Page,Y
=10					AMD_ABSIND 	= 10				; Absolute Indirect
=11					AMD_ABSINDX	= 11				; Absolute Indirect Indexed
=12					AMD_REL		= 12				; Relative
=13					AMD_ZEROINDX= 13 				; Zero Indirect,X

;******  Return to file: basic.asm


;******  Processing file: assembler/assembler.inc


;******  Return to file: basic.asm


;******  Processing file: device/device.inc


;******  Return to file: basic.asm


;******  Processing file: error/error.inc


;******  Return to file: basic.asm


;******  Processing file: error/errorhandler.inc


;******  Processing file: error/../generated/errorid.inc

=1					ErrorID_Missing = 1 ; Feature not Present
=2					ErrorID_Syntax = 2 ; Syntax Error
=3					ErrorID_NoModule = 3 ; Module disabled
=4					ErrorID_Assert = 4 ; Assertion failed
=5					ErrorID_DivZero = 5 ; Divide By Zero
=6					ErrorID_Stop = 6 ; Stop
=7					ErrorID_BadType = 7 ; Type Mismatch
=8					ErrorID_BadValue = 8 ; Illegal Value
=9					ErrorID_MissingRP = 9 ; Missing right bracket
=10					ErrorID_MissingComma = 10 ; Missing comma
=11					ErrorID_NoReference = 11 ; Missing reference
=12					ErrorID_LineNumber = 12 ; Line Number not found
=13					ErrorID_StrLen = 13 ; String too long
=14					ErrorID_ReturnErr = 14 ; RETURN without GOSUB
=15					ErrorID_UntilErr = 15 ; UNTIL without REPEAT
=16					ErrorID_NextErr = 16 ; NEXT without FOR
=17					ErrorID_WendErr = 17 ; WEND without WHILE
=18					ErrorID_endprocErr = 18 ; ENDPROC without PROC
=19					ErrorID_BadIndex = 19 ; Bad NEXT index
=20					ErrorID_Struct = 20 ; Structures nested wrong
=21					ErrorID_NoAuto = 21 ; Cannot create variable
=22					ErrorID_RetStack = 22 ; Return stack out of space
=23					ErrorID_NoProc = 23 ; Unknown Procedure
=24					ErrorID_Params = 24 ; Parameters do not match
=25					ErrorID_DupArray = 25 ; Array already defined
=26					ErrorID_NotArray = 26 ; DIM requires array
=27					ErrorID_ArrayIndex = 27 ; Bad array index
=28					ErrorID_ArrayDepth = 28 ; Wrong number of array indices
=29					ErrorID_DataError = 29 ; Out of data
=30					ErrorID_Tokenise = 30 ; Cannot tokenise line
=31					ErrorID_Save = 31 ; Save failed
=32					ErrorID_Load = 32 ; Load failed
=33					ErrorID_Break = 33 ; Break
=34					ErrorID_Memory = 34 ; Out of memory
=35					ErrorID_NumStack = 35 ; Expression too complex
=36					ErrorID_Assembler = 36 ; Bad Operand/Mode
=37					ErrorID_Branch = 37 ; Branch out of range
=38					ErrorID_Label = 38 ; Label changed value
=39					ErrorID_NoSprite = 39 ; No Sprite Selected
=40					ErrorID_Hardware = 40 ; Hardware

;******  Return to file: error/errorhandler.inc


;******  Return to file: basic.asm


;******  Processing file: extension/extension.inc


;******  Return to file: basic.asm


;******  Processing file: extension/option_x16/x16const.inc

=64					X16MaxImages = 64 							; max # of sprite images.

;******  Return to file: basic.asm


;******  Processing file: floatingpoint/float.inc

=5					FloatEmbeddedSize = 5

;******  Return to file: basic.asm


;******  Processing file: floatingpoint/floatingpoint.inc


;******  Return to file: basic.asm


;******  Processing file: interaction/interaction.inc


;******  Return to file: basic.asm


;******  Processing file: main/main.inc


;******  Return to file: basic.asm


;******  Processing file: string/functions/memory.inc

=252					MaxStringSize = 252

;******  Return to file: basic.asm


;******  Processing file: string/string.inc


;******  Return to file: basic.asm


;******  Processing file: tokeniser/detokenise/colouring.inc

=$84					LTYLineNumber = $84
=$82					LTYPunctuation = $82
=$87					LTYIdentifier = $87
=$86					LTYConstant = $86
=$83					LTYKeyword = $83
=$81					LTYString = $81

;******  Return to file: basic.asm


;******  Processing file: tokeniser/tokeniser.inc


;******  Return to file: basic.asm


;******  Processing file: variable/variable.inc


;******  Return to file: basic.asm


;******  Processing file: footer/footer.inc


;******  Return to file: basic.asm

.1000					section_start_header:

;******  Processing file: header/header.asm


;******  Processing file: header/00start.asm

.1000					Start:
.1000	4c 0a 10	jmp $100a			jmp 	GoColdStart 				; +0 	boot BASIC
.1003	4c 58 10	jmp $1058			jmp 	GoTokTest					; +3 	run tokeniser test code.
>1006	31 41						.word 	TokenTableAddress
.1008							else
>1008	00 00						.word 	0
.100a					GoColdStart:
.100a	a9 00		lda #$00			lda 	#(programMemory) & $FF
.100c	8d c8 0a	sta $0ac8			sta 	basePage
.100f	a9 49		lda #$49			lda 	#(programMemory) >> 8
.1011	8d c9 0a	sta $0ac9			sta 	1+(basePage)
.1014	a9 00		lda #$00			lda 	#(endOfMemory) & $FF
.1016	8d cc 0a	sta $0acc			sta 	endMemory
.1019	a9 9f		lda #$9f			lda 	#(endOfMemory) >> 8
.101b	8d cd 0a	sta $0acd			sta 	1+(endMemory)
.101e	20 26 10	jsr $1026			jsr 	InitialiseAll 				; initialise everything.
.1021	a2 02		ldx #$02		ldx	#2
.1023	20 08 23	jsr $2308		jsr	interactionHandler

;******  Processing file: header/../generated/initialiseall.asm

.1026					InitialiseAll:
.1026	a9 00		lda #$00		lda #0
.1028	a2 00		ldx #$00		ldx	#0
.102a	20 b4 13	jsr $13b4		jsr	assemblerHandler
.102d	a9 00		lda #$00		lda #0
.102f	a2 00		ldx #$00		ldx	#0
.1031	20 f6 14	jsr $14f6		jsr	deviceHandler
.1034	a9 00		lda #$00		lda #0
.1036	a2 00		ldx #$00		ldx	#0
.1038	20 08 23	jsr $2308		jsr	interactionHandler
.103b	a9 00		lda #$00		lda #0
.103d	a2 00		ldx #$00		ldx	#0
.103f	20 a2 39	jsr $39a2		jsr	mainHandler
.1042	a9 00		lda #$00		lda #0
.1044	a2 00		ldx #$00		ldx	#0
.1046	20 5f 3c	jsr $3c5f		jsr	stringHandler
.1049	a9 00		lda #$00		lda #0
.104b	a2 00		ldx #$00		ldx	#0
.104d	20 be 44	jsr $44be		jsr	tokeniserHandler
.1050	a9 00		lda #$00		lda #0
.1052	a2 00		ldx #$00		ldx	#0
.1054	20 8f 48	jsr $488f		jsr	variableHandler
.1057	60		rts			rts

;******  Return to file: header/00start.asm

.1058					GoTokTest:
.1058	a2 06		ldx #$06		ldx	#6
.105a	20 be 44	jsr $44be		jsr	tokeniserHandler

;******  Return to file: header/header.asm


;******  Return to file: basic.asm

.105d					section_end_header:
.105d					section_start_assembler:

;******  Processing file: assembler/assembler.asm


;******  Processing file: assembler/asmoperand.asm

.105d					AsmGetOperand:
.105d	a2 00		ldx #$00			ldx 	#0 							; clear the operand.
.105f	8a		txa				txa
.1060	95 98		sta $98,x			sta 	esInt0,x
.1062	95 a0		sta $a0,x			sta 	esInt1,x
.1064	95 a8		sta $a8,x			sta 	esInt2,x
.1066	95 b0		sta $b0,x			sta 	esInt3,x
.1068	b1 28		lda ($28),y			lda 	(codePtr),y 				; first into X
.106a	aa		tax				tax
.106b	a9 02		lda #$02			lda 	#AMD_ACCIMP
.106d	e0 80		cpx #$80			cpx 	#TOK_EOL 					; if end of line or colon, return implied mode.
.106f	f0 41		beq $10b2			beq 	_AGOExit
.1071	e0 ca		cpx #$ca			cpx 	#TKW_COLON
.1073	f0 3d		beq $10b2			beq 	_AGOExit
.1075	c8		iny				iny 								; consume the token
.1076	a9 00		lda #$00			lda 	#AMD_IMM
.1078	e0 e6		cpx #$e6			cpx 	#TKW_HASH 					; if a hash present, then immediate mode.
.107a	f0 2d		beq $10a9			beq		_AGOEvalExit 				; with an operand.
.107c	e0 a4		cpx #$a4			cpx 	#TKW_LPAREN 				; left bracket ?
.107e	f0 40		beq $10c0			beq 	_AGOIndirect
.1080	e0 01		cpx #$01			cpx 	#$01 						; is it "A" e.g. the variable A.
.1082	d0 0b		bne $108f			bne 	_AGOZeroPage1 				; if not it is zero zero,x zero,y, unpick 1 iny
.1084	b1 28		lda ($28),y			lda 	(codePtr),y 				; get the second character & consume it
.1086	c8		iny				iny
.1087	aa		tax				tax
.1088	a9 02		lda #$02			lda 	#AMD_ACCIMP 				; and return Acc/Implied if it is just A
.108a	e0 3a		cpx #$3a			cpx 	#$3A
.108c	f0 24		beq $10b2			beq 	_AGOExit
.108e	88		dey				dey 								; unpick 2 iny
.108f					_AGOZeroPage1:
.108f	88		dey				dey
.1090	a9 00		lda #$00			lda 	#0 							; get the address into esInt0/1
.1092	a2 0a		ldx #$0a		ldx	#10
.1094	20 a2 39	jsr $39a2		jsr	mainHandler
.1097	20 ef 10	jsr $10ef			jsr 	AsmGetIndexing
.109a	a9 01		lda #$01			lda 	#AMD_ZERO
.109c	90 14		bcc $10b2			bcc 	_AGOExit
.109e	a9 05		lda #$05			lda 	#AMD_ZEROX
.10a0	e0 00		cpx #$00			cpx 	#0
.10a2	f0 0e		beq $10b2			beq 	_AGOExit
.10a4	a9 09		lda #$09			lda 	#AMD_ZEROY
.10a6	4c b2 10	jmp $10b2			jmp 	_AGOExit
.10a9					_AGOEvalExit:
.10a9	48		pha				pha
.10aa	a9 00		lda #$00			lda 	#0 							; evaluate operand in root.
.10ac	a2 0a		ldx #$0a		ldx	#10
.10ae	20 a2 39	jsr $39a2		jsr	mainHandler
.10b1	68		pla				pla
.10b2					_AGOExit:
.10b2	48		pha				pha 								; save the mode
.10b3	a5 a8		lda $a8				lda 	esInt2 						; check the operand is zero.
.10b5	05 b0		ora $b0				ora 	esInt3
.10b7	d0 02		bne $10bb			bne 	_AGOValue
.10b9	68		pla				pla
.10ba	60		rts				rts
.10bb					_AGOValue:
.10bb	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.10bd	20 18 15	jsr $1518		jsr	errorHandler
.10c0					_AGOIndirect:
.10c0	a9 00		lda #$00			lda 	#0 							; evaluate operand in root.
.10c2	a2 0a		ldx #$0a		ldx	#10
.10c4	20 a2 39	jsr $39a2		jsr	mainHandler
.10c7	b1 28		lda ($28),y			lda 	(codePtr),y 				; does ) follow ? if so might be ) or ),Y
.10c9	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.10cb	f0 11		beq $10de			beq 	_AGOIndIndY
.10cd	20 ef 10	jsr $10ef			jsr 	ASMGetIndexing 				; must be ,X)
.10d0	90 39		bcc $110b			bcc 	AGISyntax
.10d2	e0 00		cpx #$00			cpx 	#0
.10d4	d0 35		bne $110b			bne 	AGISyntax
.10d6	a2 04		ldx #$04		ldx	#4
.10d8	20 a2 39	jsr $39a2		jsr	mainHandler
.10db	a9 0d		lda #$0d			lda 	#AMD_ZEROINDX
.10dd	60		rts				rts
.10de					_AGOIndIndY:
.10de	c8		iny				iny
.10df	20 ef 10	jsr $10ef			jsr 	ASMGetIndexing 				; get indexing if any
.10e2	a9 08		lda #$08			lda 	#AMD_ZEROIND
.10e4	90 cc		bcc $10b2			bcc 	_AGOExit 					; none then exit
.10e6	e0 00		cpx #$00			cpx 	#0 							; must be ,Y
.10e8	f0 21		beq $110b			beq 	AGISyntax
.10ea	a9 04		lda #$04			lda 	#AMD_ZEROINDY
.10ec	4c b2 10	jmp $10b2			jmp 	_AGOExit
.10ef					AsmGetIndexing:
.10ef	b1 28		lda ($28),y			lda 	(codePtr),y 				; check for comma
.10f1	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.10f3	18		clc				clc
.10f4	d0 14		bne $110a			bne 	_AGIExit 					; no comma, return with CC
.10f6	c8		iny				iny 								; get what SHOULD be X or Y
.10f7	b1 28		lda ($28),y			lda 	(codePtr),y  				; read it
.10f9	38		sec				sec 								; subtract 6 bit ASCII of X
.10fa	e9 18		sbc #$18			sbc 	#"X" & $3F
.10fc	c9 02		cmp #$02			cmp 	#2 							; if unsigned >= 2 then error
.10fe	b0 0b		bcs $110b			bcs 	AGISyntax
.1100	aa		tax				tax 								; put in index
.1101	c8		iny				iny 								; get what follows that, should be the $3A marker
.1102	b1 28		lda ($28),y			lda 	(codePtr),y
.1104	c8		iny				iny
.1105	c9 3a		cmp #$3a			cmp 	#$3A
.1107	d0 02		bne $110b			bne 	AGISyntax
.1109	38		sec				sec 								; return CS and index mode in X
.110a					_AGIExit:
.110a	60		rts				rts
.110b					AGISyntax:
.110b	a2 02		ldx #$02			ldx 	#ErrorID_syntax
.110d	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: assembler/assembler.asm


;******  Processing file: assembler/asmwrite.asm

.0af2					finalOpcode:
>0af2							.fill 	1
.1110					AsmWriteInstruction:
.1110	8d f2 0a	sta $0af2			sta 	finalOpcode					; save opcode.
.1113	98		tya				tya
.1114	48		pha				pha
.1115	ad 38 0a	lda $0a38			lda 	SingleLetterVar+("O"-"A")*4	; check O
.1118	29 02		and #$02			and 	#2
.111a	f0 2d		beq $1149			beq 	_ASMWNoEcho 				; if zero then don't echo.
.111c	ad 3d 0a	lda $0a3d			lda 	SingleLetterVar+("P"-"A")*4+1 ; write address in P
.111f	20 84 11	jsr $1184			jsr 	AWIWriteHex
.1122	ad 3c 0a	lda $0a3c			lda 	SingleLetterVar+("P"-"A")*4
.1125	20 84 11	jsr $1184			jsr 	AWIWriteHex
.1128	ad f2 0a	lda $0af2			lda 	finalOpcode 				; write opcode
.112b	20 7d 11	jsr $117d			jsr 	AWIWriteHexSpace
.112e	e0 00		cpx #$00			cpx 	#0
.1130	f0 0e		beq $1140			beq 	_ASMWEchoExit
.1132	a5 98		lda $98				lda 	esInt0
.1134	20 7d 11	jsr $117d			jsr 	AWIWriteHexSpace
.1137	e0 01		cpx #$01			cpx 	#1
.1139	f0 05		beq $1140			beq 	_ASMWEchoExit
.113b	a5 a0		lda $a0				lda 	esInt1
.113d	20 7d 11	jsr $117d			jsr 	AWIWriteHexSpace
.1140					_ASMWEchoExit:
.1140	8a		txa				txa
.1141	48		pha				pha
.1142	a2 06		ldx #$06		ldx	#6
.1144	20 f6 14	jsr $14f6		jsr	deviceHandler
.1147	68		pla				pla
.1148	aa		tax				tax
.1149					_ASMWNoEcho:
.1149	ad f2 0a	lda $0af2			lda 	finalOpcode
.114c	20 64 11	jsr $1164			jsr 	AsmWriteByte
.114f	e0 00		cpx #$00			cpx 	#0
.1151	f0 0e		beq $1161			beq 	_ASMWExit
.1153	a5 98		lda $98				lda 	esInt0
.1155	20 64 11	jsr $1164			jsr 	AsmWriteByte
.1158	e0 01		cpx #$01			cpx 	#1
.115a	f0 05		beq $1161			beq 	_ASMWExit
.115c	a5 a0		lda $a0				lda 	esInt1
.115e	20 64 11	jsr $1164			jsr 	AsmWriteByte
.1161					_ASMWExit:
.1161	68		pla				pla
.1162	a8		tay				tay
.1163	60		rts				rts
.1164					AsmWriteByte:
.1164	a0 00		ldy #$00			ldy 	#0
.1166	48		pha				pha
.1167	ad 3c 0a	lda $0a3c			lda 	SingleLetterVar+("P"-"A")*4 ; copy address to temp0
.116a	85 2a		sta $2a				sta 	temp0
.116c	ad 3d 0a	lda $0a3d			lda 	SingleLetterVar+("P"-"A")*4+1
.116f	85 2b		sta $2b				sta 	temp0+1
.1171	68		pla				pla 								; write out the byte.
.1172	91 2a		sta ($2a),y			sta 	(temp0),y
.1174	ee 3c 0a	inc $0a3c			inc 	SingleLetterVar+("P"-"A")*4	; increment P
.1177	d0 03		bne $117c			bne 	_AWBNoCarry
.1179	ee 3d 0a	inc $0a3d			inc 	SingleLetterVar+("P"-"A")*4+1
.117c					_AWBNoCarry:
.117c	60		rts				rts
.117d					AWIWriteHexSpace:
.117d	48		pha				pha
.117e	a9 20		lda #$20			lda 	#" "
.1180	20 97 11	jsr $1197			jsr 	AWIPrintChar
.1183	68		pla				pla
.1184					AWIWriteHex:
.1184	48		pha				pha
.1185	4a		lsr a				lsr 	a
.1186	4a		lsr a				lsr 	a
.1187	4a		lsr a				lsr 	a
.1188	4a		lsr a				lsr 	a
.1189	20 8d 11	jsr $118d			jsr 	AWIPrintNibble
.118c	68		pla				pla
.118d					AWIPrintNibble:
.118d	29 0f		and #$0f			and 	#15
.118f	c9 0a		cmp #$0a			cmp 	#10
.1191	90 02		bcc $1195			bcc 	_AWIPNDigit
.1193	69 06		adc #$06			adc 	#6
.1195					_AWIPNDigit:
.1195	69 30		adc #$30			adc 	#48
.1197					AWIPrintChar:
.1197	85 32		sta $32				sta 	tempShort
.1199	8a		txa				txa
.119a	48		pha				pha
.119b	a5 32		lda $32				lda 	tempShort
.119d	a2 16		ldx #$16		ldx	#22
.119f	20 f6 14	jsr $14f6		jsr	deviceHandler
.11a2	68		pla				pla
.11a3	aa		tax				tax
.11a4	60		rts				rts

;******  Return to file: assembler/assembler.asm


;******  Processing file: assembler/assemblecmd.asm

.0af3					asmToken:
>0af3							.fill 	1
.0af4					asmMode:
>0af4							.fill 	1 							; esInt0/1
.0af5					asmBaseOpcode:
>0af5							.fill 	1
.11a5					AssembleOneInstruction:
.11a5	8d f3 0a	sta $0af3			sta 	asmToken 					; save the token
.11a8	aa		tax				tax
.11a9	bd 72 11	lda $1172,x			lda 	OpcodeTable-TKA_GROUP1,x 	; get the base opcode.
.11ac	8d f5 0a	sta $0af5			sta 	asmBaseOpcode
.11af	20 5d 10	jsr $105d			jsr 	AsmGetOperand 				; identify the address mode and operand where applicable.
.11b2	8d f4 0a	sta $0af4			sta 	asmMode
.11b5	a5 a0		lda $a0				lda 	esInt1 						; check if this is a three byte operand.
.11b7	d0 05		bne $11be			bne 	_AOIThreeBytes 				; if so, we have to use three byte
.11b9	20 d4 11	jsr $11d4			jsr 	AssembleAttempt 			; try to assemble token/mode/operand (2 bytes)
.11bc	b0 10		bcs $11ce			bcs 	_AOISuccess 				; worked ok.
.11be					_AOIThreeBytes:
.11be	ae f4 0a	ldx $0af4			ldx 	asmMode 					; convert mode to 3 byte version, where possible.
.11c1	bd f8 11	lda $11f8,x			lda 	AbsoluteVersionTable,x
.11c4	30 09		bmi $11cf			bmi 	_AOIError					; not possible, no equivalent.
.11c6	8d f4 0a	sta $0af4			sta 	asmMode
.11c9	20 d4 11	jsr $11d4			jsr 	AssembleAttempt 			; try to assemble token/mode/operand (3 bytes)
.11cc	90 01		bcc $11cf			bcc 	_AOIError 					; didn't work.
.11ce					_AOISuccess:
.11ce	60		rts				rts
.11cf					_AOIError:
.11cf	a2 24		ldx #$24			ldx 	#ErrorID_Assembler
.11d1	20 18 15	jsr $1518		jsr	errorHandler
.11d4					AssembleAttempt:
.11d4	20 dd 11	jsr $11dd			jsr 	_AADispatch 				; go to the code which dispatches to the appropriate
.11d7	b0 03		bcs $11dc			bcs 	_AAExit 					; exit if carry set, e.g. was successful
.11d9	20 87 13	jsr $1387			jsr 	AssembleSpecialCase
.11dc					_AAExit:
.11dc	60		rts				rts
.11dd					_AADispatch:
.11dd	ad f3 0a	lda $0af3			lda 	asmToken
.11e0	c9 b7		cmp #$b7			cmp 	#TKA_GROUP4
.11e2	b0 11		bcs $11f5			bcs 	_AAGroup4
.11e4	c9 ae		cmp #$ae			cmp 	#TKA_GROUP3
.11e6	b0 0a		bcs $11f2			bcs 	_AAGroup3
.11e8	c9 9c		cmp #$9c			cmp 	#TKA_GROUP2
.11ea	b0 03		bcs $11ef			bcs 	_AAGroup2
.11ec	4c cd 12	jmp $12cd			jmp 	AssembleGroup1
.11ef					_AAGroup2:
.11ef	4c 28 13	jmp $1328			jmp 	AssembleGroup2
.11f2					_AAGroup3:
.11f2	4c 49 13	jmp $1349			jmp 	AssembleGroup3
.11f5					_AAGroup4:
.11f5	4c 7d 13	jmp $137d			jmp 	AssembleGroup4
.11f8					AbsoluteVersionTable:
>11f8	ff						.byte	$FF 			; fail AMD_IMM
>11f9	03						.byte	AMD_ABS 		; absolute AMD_ZERO
>11fa	ff						.byte	$FF 			; fail AMD_ACCIMP
>11fb	ff						.byte	$FF 			; fail AMD_ABS
>11fc	ff						.byte 	$FF 			; fail AMD_ZEROINDY
>11fd	07						.byte	AMD_ABSX 		; absolute AMD_ZEROX
>11fe	ff						.byte	$FF 			; fail AMD_ABSY
>11ff	ff						.byte	$FF 			; fail AMD_ABSX
>1200	0a						.byte	AMD_ABSIND 		; absolute AMD_ZEROIND
>1201	06						.byte	AMD_ABSY 		; absolute AMD_ZEROY
>1202	ff						.byte	$FF 			; fail AMD_ABSIND
>1203	ff						.byte	$FF 			; fail AMD_ABSINDX
>1204	ff						.byte	$FF 			; fail AMD_REL
>1205	0b						.byte 	AMD_ABSINDX 	; absolute AMD_ZEROINDX

;******  Processing file: assembler/../generated/asmtables.inc

.1206					OpcodeTable:
>1206	01					.byte	$01			; $94 ora
>1207	21					.byte	$21			; $95 (and)
>1208	41					.byte	$41			; $96 eor
>1209	61					.byte	$61			; $97 adc
>120a	81					.byte	$81			; $98 sta
>120b	a1					.byte	$a1			; $99 lda
>120c	c1					.byte	$c1			; $9a cmp
>120d	e1					.byte	$e1			; $9b sbc
>120e	02					.byte	$02			; $9c asl
>120f	22					.byte	$22			; $9d rol
>1210	42					.byte	$42			; $9e lsr
>1211	62					.byte	$62			; $9f ror
>1212	82					.byte	$82			; $a0 stx
>1213	a2					.byte	$a2			; $a1 ldx
>1214	c2					.byte	$c2			; $a2 dec
>1215	e2					.byte	$e2			; $a3 inc
>1216	60					.byte	$60			; $a4 stz
>1217	20					.byte	$20			; $a5 bit
>1218	80					.byte	$80			; $a6 sty
>1219	a0					.byte	$a0			; $a7 ldy
>121a	c0					.byte	$c0			; $a8 cpy
>121b	e0					.byte	$e0			; $a9 cpx
>121c	00					.byte	$00			; $aa tsb
>121d	10					.byte	$10			; $ab trb
>121e	14					.byte	$14			; $ac jsr
>121f	40					.byte	$40			; $ad jmp
>1220	10					.byte	$10			; $ae bpl
>1221	30					.byte	$30			; $af bmi
>1222	50					.byte	$50			; $b0 bvc
>1223	70					.byte	$70			; $b1 bvs
>1224	90					.byte	$90			; $b2 bcc
>1225	b0					.byte	$b0			; $b3 bcs
>1226	d0					.byte	$d0			; $b4 bne
>1227	f0					.byte	$f0			; $b5 beq
>1228	80					.byte	$80			; $b6 bra
>1229	00					.byte	$00			; $b7 brk
>122a	08					.byte	$08			; $b8 php
>122b	18					.byte	$18			; $b9 clc
>122c	28					.byte	$28			; $ba plp
>122d	38					.byte	$38			; $bb sec
>122e	40					.byte	$40			; $bc rti
>122f	48					.byte	$48			; $bd pha
>1230	58					.byte	$58			; $be cli
>1231	5a					.byte	$5a			; $bf phy
>1232	60					.byte	$60			; $c0 rts
>1233	68					.byte	$68			; $c1 pla
>1234	78					.byte	$78			; $c2 sei
>1235	7a					.byte	$7a			; $c3 ply
>1236	88					.byte	$88			; $c4 dey
>1237	8a					.byte	$8a			; $c5 txa
>1238	98					.byte	$98			; $c6 tya
>1239	9a					.byte	$9a			; $c7 txs
>123a	a8					.byte	$a8			; $c8 tay
>123b	aa					.byte	$aa			; $c9 tax
>123c	b8					.byte	$b8			; $ca clv
>123d	ba					.byte	$ba			; $cb tsx
>123e	c8					.byte	$c8			; $cc iny
>123f	ca					.byte	$ca			; $cd dex
>1240	d8					.byte	$d8			; $ce cld
>1241	da					.byte	$da			; $cf phx
>1242	e8					.byte	$e8			; $d0 inx
>1243	ea					.byte	$ea			; $d1 nop
>1244	f8					.byte	$f8			; $d2 sed
>1245	fa					.byte	$fa			; $d3 plx
.1246					Group2OpcodeAvailability:
>1246	ae					.byte	$ae			; $9c asl $02
>1247	ae					.byte	$ae			; $9d rol $22
>1248	ae					.byte	$ae			; $9e lsr $42
>1249	ae					.byte	$ae			; $9f ror $62
>124a	0a					.byte	$0a			; $a0 stx $82
>124b	0b					.byte	$0b			; $a1 ldx $a2
>124c	aa					.byte	$aa			; $a2 dec $c2
>124d	aa					.byte	$aa			; $a3 inc $e2
>124e	22					.byte	$22			; $a4 stz $60
>124f	aa					.byte	$aa			; $a5 bit $20
>1250	2a					.byte	$2a			; $a6 sty $80
>1251	ab					.byte	$ab			; $a7 ldy $a0
>1252	2b					.byte	$2b			; $a8 cpy $c0
>1253	0b					.byte	$0b			; $a9 cpx $e0
>1254	0a					.byte	$0a			; $aa tsb $00
>1255	0a					.byte	$0a			; $ab trb $10
>1256	08					.byte	$08			; $ac jsr $14
>1257	08					.byte	$08			; $ad jmp $40
.1258					AssemblerSpecialCases:
>1258	ad 0a 6c				.byte	$ad,10,$6c		; jmp (abs)
>125b	ad 0b 7c				.byte	$ad,11,$7c		; jmp (abs,x)
>125e	a1 06 be				.byte	$a1,6,$be		; ldx abs,y
>1261	a1 09 b6				.byte	$a1,9,$b6		; ldx zp,y
>1264	a0 09 96				.byte	$a0,9,$96		; stx zp,y
>1267	a3 02 1a				.byte	$a3,2,$1a		; inc acc
>126a	a2 02 3a				.byte	$a2,2,$3a		; dec acc
>126d	a5 00 89				.byte	$a5,0,$89		; bit #
>1270	a4 03 9c				.byte	$a4,3,$9c		; stz abs
>1273	a4 07 9e				.byte	$a4,7,$9e		; stz abs,x
>1276	00					.byte	0

;******  Return to file: assembler/assemblecmd.asm


;******  Return to file: assembler/assembler.asm


;******  Processing file: assembler/assemblelabel.asm

.1277					AssembleLabel:
.1277	b1 28		lda ($28),y			lda 	(codePtr),y 				; check it's followed by a variable name.
.1279	c9 3a		cmp #$3a			cmp 	#$3A
.127b	b0 4b		bcs $12c8			bcs 	_ALSyntax
.127d	a9 00		lda #$00			lda 	#0							; get a variable name on to stack:0
.127f	a2 02		ldx #$02		ldx	#2
.1281	20 8f 48	jsr $488f		jsr	variableHandler
.1284	a5 90		lda $90				lda 	esType 						; check integer reference
.1286	c9 80		cmp #$80			cmp 	#$80
.1288	d0 3e		bne $12c8			bne 	_ALSyntax
.128a	a5 98		lda $98				lda 	esInt0 						; copy that reference address to temp0
.128c	85 2a		sta $2a				sta 	temp0
.128e	a5 a0		lda $a0				lda 	esInt1
.1290	85 2b		sta $2b				sta 	temp0+1
.1292	98		tya				tya
.1293	48		pha				pha
.1294	ad 38 0a	lda $0a38			lda 	SingleLetterVar+("O"-"A")*4	; are we in Pass 2
.1297	4a		lsr a				lsr 	a
.1298	90 11		bcc $12ab			bcc 	_ALWrite
.129a	a0 00		ldy #$00			ldy 	#0
.129c	ad 3c 0a	lda $0a3c			lda 	SingleLetterVar+("P"-"A")*4 ; compare the value in P to the variable
.129f	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.12a1	d0 20		bne $12c3			bne 	_ALChanged
.12a3	c8		iny				iny
.12a4	ad 3d 0a	lda $0a3d			lda 	SingleLetterVar+("P"-"A")*4+1
.12a7	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.12a9	d0 18		bne $12c3			bne 	_ALChanged
.12ab					_ALWrite:
.12ab	a0 00		ldy #$00			ldy 	#0
.12ad	ad 3c 0a	lda $0a3c			lda 	SingleLetterVar+("P"-"A")*4 ; copy the value in P into the variable
.12b0	91 2a		sta ($2a),y			sta 	(temp0),y
.12b2	ad 3d 0a	lda $0a3d			lda 	SingleLetterVar+("P"-"A")*4+1
.12b5	c8		iny				iny
.12b6	91 2a		sta ($2a),y			sta 	(temp0),y
.12b8	a9 00		lda #$00			lda 	#0
.12ba	c8		iny				iny
.12bb	91 2a		sta ($2a),y			sta 	(temp0),y
.12bd	c8		iny				iny
.12be	91 2a		sta ($2a),y			sta 	(temp0),y
.12c0	68		pla				pla
.12c1	a8		tay				tay
.12c2	60		rts				rts
.12c3					_ALChanged:
.12c3	a2 26		ldx #$26			ldx 	#ErrorID_Label
.12c5	20 18 15	jsr $1518		jsr	errorHandler
.12c8					_ALSyntax:
.12c8	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.12ca	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: assembler/assembler.asm


;******  Processing file: assembler/subgroup.asm

.12cd					AssembleGroup1:
.12cd	ad f3 0a	lda $0af3			lda 	asmToken 					; firstly, we throw out STA immediate
.12d0	c9 98		cmp #$98			cmp 	#TKW_STA
.12d2	d0 07		bne $12db			bne 	_AG1NotStoreImm
.12d4	ad f4 0a	lda $0af4			lda 	asmMode
.12d7	c9 00		cmp #$00			cmp 	#AMD_IMM
.12d9	f0 2c		beq $1307			beq 	AG1ModeError
.12db					_AG1NotStoreImm:
.12db	ae f4 0a	ldx $0af4			ldx 	asmMode						; get mode into X.
.12de	bd 0c 13	lda $130c,x			lda		AMDOperandSize,X 			; get the size of the operand and push on stack
.12e1	48		pha				pha
.12e2	f0 23		beq $1307			beq 	AG1ModeError 				; if the size is zero, the mode must be Accumulator
.12e4	e0 00		cpx #$00			cpx 	#0 							; if the mode is zero, e.g. immediate
.12e6	d0 02		bne $12ea			bne 	_AG1NotImmediate
.12e8	a2 02		ldx #$02			ldx 	#2 							; then we use offset 2 here. This is how the 6502
.12ea					_AG1NotImmediate:
.12ea	e0 0d		cpx #$0d			cpx 	#AMD_ZEROINDX 				; (zero,x) uses slot 0.
.12ec	d0 02		bne $12f0			bne 	_AG1NotZX
.12ee	a2 00		ldx #$00			ldx 	#0
.12f0					_AG1NotZX:
.12f0	68		pla				pla 								; restore length
.12f1	e0 09		cpx #$09			cpx 	#9 							; anything > 8 fails.
.12f3	b0 10		bcs $1305			bcs 	AG1Fail
.12f5					AG1ReturnValue:
.12f5	85 32		sta $32				sta 	tempShort 					; save size of operand
.12f7	18		clc				clc
.12f8	bd 1a 13	lda $131a,x			lda 	AMDOffsetFromBase,X 		; get the offset for the address mode.
.12fb	6d f5 0a	adc $0af5			adc 	asmBaseOpcode 				; add the base opcode.
.12fe	a6 32		ldx $32				ldx 	tempShort 					; length in X
.1300	20 10 11	jsr $1110			jsr 	AsmWriteInstruction 		; output instruction.
.1303	38		sec				sec
.1304	60		rts				rts
.1305					AG1Fail:
.1305	18		clc				clc
.1306	60		rts				rts
.1307					AG1ModeError:
.1307	a2 24		ldx #$24			ldx 	#ErrorID_Assembler
.1309	20 18 15	jsr $1518		jsr	errorHandler
.130c					AMDOperandSize:
>130c	01 01 00 02					.byte 	1,1,0,2
>1310	01 01 02 02					.byte 	1,1,2,2
>1314	01 01 02 02					.byte 	1,1,2,2
>1318	01 01						.byte 	1,1
.131a					AMDOffsetFromBase:
>131a	00 04 08 0c					.byte 	0,4,8,12
>131e	10 14 18 1c					.byte	16,20,24,28
>1322	11 00 00 00					.byte 	17,0,0,0
>1326	00 00						.byte 	0,0
.1328					AssembleGroup2:
.1328	ad f4 0a	lda $0af4			lda 	asmMode 					; get the mode; if >= 8 cannot be a legit group 2
.132b	c9 08		cmp #$08			cmp 	#8
.132d	b0 18		bcs $1347			bcs 	_AG2Fail
.132f	85 2a		sta $2a				sta 	temp0 						; save in temp9
.1331	ae f3 0a	ldx $0af3			ldx 	asmToken					; get token in X, then get the availability flags for it
.1334	bd aa 11	lda $11aa,x			lda 	Group2OpcodeAvailability-TKA_GROUP2,x
.1337					_AG2Shift:
.1337	4a		lsr a				lsr 	a
.1338	c6 2a		dec $2a				dec 	temp0
.133a	10 fb		bpl $1337			bpl 	_AG2Shift
.133c	90 09		bcc $1347			bcc 	_AG2Fail 					; cannot do that instruction w/that opcode.
.133e	ae f4 0a	ldx $0af4			ldx  	asmMode 					; mode in X
.1341	bd 0c 13	lda $130c,x			lda		AMDOperandSize,X 			; get the size of the operand in A
.1344	4c f5 12	jmp $12f5			jmp 	AG1ReturnValue 				; and use that with Group 1's exit code
.1347					_AG2Fail:
.1347	18		clc				clc
.1348	60		rts				rts
.1349					AssembleGroup3:
.1349	ad 38 0a	lda $0a38			lda 	SingleLetterVar+("O"-"A")*4	; check bit 0 (pass) of O
.134c	4a		lsr a				lsr 	a
.134d	a9 00		lda #$00			lda 	#0 							; if clear, e.g. pass 1, use default zero.
.134f	90 21		bcc $1372			bcc 	_AG3Default
.1351	38		sec				sec	 								; calculate branch offset
.1352	a5 98		lda $98				lda		esInt0
.1354	ed 3c 0a	sbc $0a3c			sbc 	SingleLetterVar+("P"-"A")*4
.1357	aa		tax				tax
.1358	a5 a0		lda $a0				lda		esInt1
.135a	ed 3d 0a	sbc $0a3d			sbc 	SingleLetterVar+("P"-"A")*4+1
.135d	85 a0		sta $a0				sta 	esInt1
.135f	8a		txa				txa 								; add 126, now 128 too many.
.1360	18		clc				clc 								; we can use this to check the range
.1361	69 7e		adc #$7e			adc 	#126
.1363	85 98		sta $98				sta 	esInt0
.1365	90 02		bcc $1369			bcc 	_AG3NoCarry
.1367	e6 a0		inc $a0				inc 	esInt1
.1369					_AG3NoCarry:
.1369	a5 a0		lda $a0				lda 	esInt1 						; check in range.
.136b	d0 0b		bne $1378			bne 	_AG3Range
.136d	a5 98		lda $98				lda 	esInt0 						; fix up branch distance
.136f	38		sec				sec
.1370	e9 80		sbc #$80			sbc 	#128
.1372					_AG3Default:
.1372	85 98		sta $98				sta 	esInt0
.1374					_AG3ExitOk:
.1374	a2 01		ldx #$01			ldx 	#1 							; one opcode, use AG4 Code
.1376	d0 07		bne $137f			bne 	AG4Write
.1378					_AG3Range:
.1378	a2 25		ldx #$25			ldx 	#ErrorID_Branch
.137a	20 18 15	jsr $1518		jsr	errorHandler
.137d					AssembleGroup4:
.137d	a2 00		ldx #$00			ldx 	#0 							; no parameters in the opcode.
.137f					AG4Write:
.137f	ad f5 0a	lda $0af5			lda 	asmBaseOpcode				; the opcode is the opcode base.
.1382	20 10 11	jsr $1110			jsr 	AsmWriteInstruction 		; output instruction.
.1385	38		sec				sec
.1386	60		rts				rts
.1387					AssembleSpecialCase:
.1387	a2 00		ldx #$00			ldx 	#0
.1389					_ASCScan:
.1389	bd 58 12	lda $1258,x			lda 	AssemblerSpecialCases,x 	; scan token and mode for match
.138c	cd f3 0a	cmp $0af3			cmp 	asmToken
.138f	d0 08		bne $1399			bne 	_ASCNext
.1391	bd 59 12	lda $1259,x			lda 	AssemblerSpecialCases+1,x
.1394	cd f4 0a	cmp $0af4			cmp 	asmMode
.1397	f0 0a		beq $13a3			beq 	_ASCFound
.1399					_ASCNext:
.1399	e8		inx				inx									; next entry
.139a	e8		inx				inx
.139b	e8		inx				inx
.139c	bd 58 12	lda $1258,x			lda 	AssemblerSpecialCases,x 	; until table ends
.139f	d0 e8		bne $1389			bne 	_ASCScan
.13a1	18		clc				clc
.13a2	60		rts				rts
.13a3					_ASCFound:
.13a3	bd 5a 12	lda $125a,x			lda 	AssemblerSpecialCases+2,x 	; get the new opcode.
.13a6	48		pha				pha
.13a7	ae f4 0a	ldx $0af4			ldx  	asmMode 					; mode in X
.13aa	bd 0c 13	lda $130c,x			lda		AMDOperandSize,X 			; get the size of the operand in X
.13ad	aa		tax				tax
.13ae	68		pla				pla 								; opcode back
.13af	20 10 11	jsr $1110			jsr 	AsmWriteInstruction 		; output instruction.
.13b2	38		sec				sec
.13b3	60		rts				rts

;******  Return to file: assembler/assembler.asm

.13b4					assemblerHandler:
.13b4	7c b7 13	jmp ($13b7,x)			jmp 	(assemblerVectors,x)
.13b7					assemblerVectors:
>13b7	bd 13					.word _DummyControlHandler ; index 0
>13b9	a5 11					.word AssembleOneInstruction ; index 2
>13bb	77 12					.word AssembleLabel        ; index 4
.13bd					_DummyControlHandler:
.13bd	60		rts			rts

;******  Return to file: basic.asm

.13be					section_end_assembler:
.13be					section_start_device:

;******  Processing file: device/device.asm


;******  Processing file: device/option_x16/x16break.asm

.13be					X16Break:
.13be	20 e1 ff	jsr $ffe1			jsr 	$FFE1
.13c1	f0 01		beq $13c4			beq 	_IsBreak
.13c3	60		rts				rts
.13c4					_IsBreak:
.13c4	a2 21		ldx #$21			ldx 	#ErrorID_Break
.13c6	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: device/device.asm


;******  Processing file: device/option_x16/x16file.asm

.13c9					ExternSave:
.13c9	98		tya				tya
.13ca	48		pha				pha
.13cb	20 19 14	jsr $1419			jsr 	ExternGetLength 			; get length of file into A name YX
.13ce	20 bd ff	jsr $ffbd			jsr 	$FFBD 						; set name
.13d1	a9 01		lda #$01			lda 	#1
.13d3	a2 08		ldx #$08			ldx 	#8	 						; device #8
.13d5	a0 00		ldy #$00			ldy 	#0
.13d7	20 ba ff	jsr $ffba			jsr 	$FFBA 						; set LFS
.13da	a5 99		lda $99				lda 	esInt0+1 					; copy start of save address to temp0
.13dc	85 2a		sta $2a				sta 	temp0
.13de	a5 a1		lda $a1				lda 	esInt1+1
.13e0	85 2b		sta $2b				sta 	temp0+1
.13e2	a6 9a		ldx $9a				ldx 	esInt0+2 					; end address
.13e4	a4 a2		ldy $a2				ldy 	esInt1+2
.13e6	a9 2a		lda #$2a			lda 	#temp0 						; ref to start address
.13e8	20 d8 ff	jsr $ffd8			jsr 	$FFD8 						; save
.13eb	b0 03		bcs $13f0			bcs 	_ESSave
.13ed	68		pla				pla
.13ee	a8		tay				tay
.13ef	60		rts				rts
.13f0					_ESSave:
.13f0	a2 1f		ldx #$1f			ldx 	#ErrorID_Save
.13f2	20 18 15	jsr $1518		jsr	errorHandler
.13f5					ExternLoad:
.13f5	98		tya				tya
.13f6	48		pha				pha
.13f7	20 19 14	jsr $1419			jsr 	ExternGetLength 			; get length of file into A name YX
.13fa	20 bd ff	jsr $ffbd			jsr 	$FFBD 						; set name
.13fd	a9 01		lda #$01			lda 	#1
.13ff	a2 08		ldx #$08			ldx 	#8	 						; device #8
.1401	a0 00		ldy #$00			ldy 	#0
.1403	20 ba ff	jsr $ffba			jsr 	$FFBA 						; set LFS
.1406	a6 99		ldx $99				ldx 	esInt0+1 					; load address
.1408	a4 a1		ldy $a1				ldy 	esInt1+1
.140a	a9 00		lda #$00			lda 	#0 							; load command
.140c	20 d5 ff	jsr $ffd5			jsr 	$FFD5
.140f	b0 03		bcs $1414			bcs 	_ESLoad
.1411	68		pla				pla
.1412	a8		tay				tay
.1413	60		rts				rts
.1414					_ESLoad:
.1414	a2 20		ldx #$20			ldx 	#ErrorID_Load
.1416	20 18 15	jsr $1518		jsr	errorHandler
.1419					ExternGetLength:
.1419	a5 98		lda $98				lda 	esInt0 						; length into A.
.141b	85 2a		sta $2a				sta 	temp0
.141d	a5 a0		lda $a0				lda 	esInt1
.141f	85 2b		sta $2b				sta 	temp0+1
.1421	a0 00		ldy #$00			ldy 	#0
.1423	b1 2a		lda ($2a),y			lda 	(temp0),y
.1425	a6 98		ldx $98				ldx 	esInt0 						; name into YX
.1427	a4 a0		ldy $a0				ldy 	esInt1
.1429	e8		inx				inx 								; advance over the length pointer.
.142a	d0 01		bne $142d			bne 	_ESNoCarry
.142c	c8		iny				iny
.142d					_ESNoCarry:
.142d	60		rts				rts

;******  Return to file: device/device.asm


;******  Processing file: device/option_x16/x16io.asm

=240					MaxLineInputSize = 240
.0af6					bufferCount:
>0af6							.fill 	0
.0af6					bufferStorage:
>0af6							.fill 	MaxLineInputSize
.142e					IOControlHandler:
.142e	c9 00		cmp #$00			cmp 	#0
.1430	d0 12		bne $1444			bne		_CHExit
.1432	a9 0f		lda #$0f			lda 	#15 						; switch to upper/lower case mode
.1434	20 5d 14	jsr $145d			jsr 	IOPrintChar
.1437	a9 02		lda #$02			lda 	#2 							; green on black and clear screen
.1439	20 89 14	jsr $1489			jsr 	IOInk
.143c	a9 00		lda #$00			lda 	#0
.143e	20 9d 14	jsr $149d			jsr 	IOPaper
.1441	20 45 14	jsr $1445			jsr 	IOClearScreen
.1444					_CHExit:
.1444	60		rts				rts
.1445					IOClearScreen:
.1445	48		pha				pha
.1446	a9 93		lda #$93			lda	 	#147 						; char code $93 clears screen
.1448	20 5d 14	jsr $145d			jsr 	IOPrintChar
.144b	68		pla				pla
.144c	60		rts				rts
.144d					IONewLine:
.144d	48		pha				pha
.144e	a9 0d		lda #$0d			lda 	#13
.1450	20 5d 14	jsr $145d			jsr 	IOPrintChar
.1453	68		pla				pla
.1454	60		rts				rts
.1455					IOTab:
.1455	48		pha				pha
.1456	a9 20		lda #$20			lda 	#32
.1458	20 5d 14	jsr $145d			jsr 	IOPrintChar
.145b	68		pla				pla
.145c	60		rts				rts
.145d					IOPrintAscii:
.145d					IOPrintChar:
.145d	aa		tax				tax 								; save in X so we can save Y
.145e	5a		phy				phy
.145f	8a		txa				txa
.1460	c9 08		cmp #$08			cmp 	#8 							; make BS (8) onto CHR$(14) which is the
.1462	d0 02		bne $1466			bne 	_IOPCNotBS 					; Commodore/X16 backspace code.
.1464	a9 14		lda #$14			lda 	#$14
.1466					_IOPCNotBS:
.1466	20 d2 ff	jsr $ffd2			jsr 	$FFD2 						; CBM OS Call.
.1469	7a		ply				ply
.146a	60		rts				rts
.146b					IOInkey:
.146b	98		tya				tya
.146c	48		pha				pha
.146d	20 e4 ff	jsr $ffe4			jsr 	$FFE4
.1470	85 32		sta $32				sta 	tempShort
.1472	68		pla				pla
.1473	a8		tay				tay
.1474	a5 32		lda $32				lda 	tempShort					; no key pressed.
.1476	f0 10		beq $1488			beq 	_IOIExit
.1478	c9 0d		cmp #$0d			cmp 	#13 						; allow CR (13)
.147a	f0 0c		beq $1488			beq 	_IOIExit
.147c	c9 14		cmp #$14			cmp 	#$14 						; backspace code ($14) returns 8.
.147e	f0 06		beq $1486			beq 	_IOIBackspace
.1480	c9 20		cmp #$20			cmp 	#32 						; no other control allowed.
.1482	90 e7		bcc $146b			bcc 	IOInkey
.1484	b0 02		bcs $1488			bcs 	_IOIExit
.1486					_IOIBackspace:
.1486	a9 08		lda #$08			lda 	#8 							; return chr(8)
.1488					_IOIExit:
.1488	60		rts				rts
.1489					IOInk:
.1489	48		pha				pha
.148a	29 07		and #$07			and 	#7 							; 8 primaries
.148c	aa		tax				tax
.148d	bd 95 14	lda $1495,x			lda 	_IOColourTable,x 			; look up CBM code and print it.
.1490	20 5d 14	jsr $145d			jsr 	IOPrintChar
.1493	68		pla				pla
.1494	60		rts				rts
.1495					_IOColourTable:
>1495	90						.byte 	$90 					; 0 Black
>1496	96						.byte 	$96 					; 1 Red
>1497	1e						.byte 	$1E 					; 2 Green
>1498	9e						.byte 	$9E 					; 3 Yellow
>1499	9a						.byte 	$9A 					; 4 Blue
>149a	9c						.byte 	$9C 					; 5 Magenta
>149b	9f						.byte 	$9F 					; 6 Cyan
>149c	05						.byte 	$05 					; 7 White
.149d					IOPaper:
.149d	48		pha				pha
.149e	48		pha				pha
.149f	a9 01		lda #$01			lda 	#1 						; 1 swaps fgr/bgr, so we swap them, set fgr
.14a1	20 5d 14	jsr $145d			jsr 	IOPrintChar 			; and then swap them again.
.14a4	68		pla				pla
.14a5	20 89 14	jsr $1489			jsr 	IOInk
.14a8	a9 01		lda #$01			lda 	#1
.14aa	20 5d 14	jsr $145d			jsr 	IOPrintChar
.14ad	68		pla				pla
.14ae	60		rts				rts
.14af					IOLocate:
.14af	48		pha				pha
.14b0	a9 13		lda #$13			lda 	#$13 					; home cursor code
.14b2	20 5d 14	jsr $145d			jsr 	IOPrintChar
.14b5	a9 11		lda #$11			lda 	#$11 	 				; print Y x $11 (down)
.14b7	20 be 14	jsr $14be			jsr 	_IOLoc2
.14ba	68		pla				pla
.14bb	a8		tay				tay
.14bc	a9 1d		lda #$1d			lda 	#$1D 					; print Y x $1D (right)
.14be					_IOLoc2:
.14be	c0 00		cpy #$00			cpy 	#0
.14c0	f0 06		beq $14c8			beq 	_IOLocExit
.14c2	20 5d 14	jsr $145d			jsr 	IOPrintChar
.14c5	88		dey				dey
.14c6	d0 f6		bne $14be			bne 	_IOLoc2
.14c8					_IOLocExit:
.14c8	60		rts				rts
.14c9					IOInput:
.14c9	a9 00		lda #$00			lda 	#0
.14cb	8d f6 0a	sta $0af6			sta 	bufferCount
.14ce					_IOILoop:
.14ce	20 cf ff	jsr $ffcf			jsr 	$FFCF
.14d1	c9 0d		cmp #$0d			cmp 	#13
.14d3	f0 10		beq $14e5			beq 	_IOIExit
.14d5	ae f6 0a	ldx $0af6			ldx 	bufferCount
.14d8	e0 f0		cpx #$f0			cpx 	#MaxLineInputSize
.14da	f0 f2		beq $14ce			beq 	_IOILoop
.14dc	ee f6 0a	inc $0af6			inc 	bufferCount
.14df	9d f7 0a	sta $0af7,x			sta 	bufferStorage+1,x
.14e2	4c ce 14	jmp $14ce			jmp 	_IOILoop
.14e5					_IOIExit:
.14e5	a9 f6		lda #$f6			lda 	#(bufferCount) & $FF
.14e7	85 2a		sta $2a				sta 	temp0
.14e9	a9 0a		lda #$0a			lda 	#(bufferCount) >> 8
.14eb	85 2b		sta $2b				sta 	1+(temp0)
.14ed	60		rts				rts

;******  Return to file: device/device.asm


;******  Processing file: device/option_x16/x16timer.asm

.14ee					IOReadTimer:
.14ee	20 de ff	jsr $ffde			jsr 	$FFDE 						; reads timer into YXA so we want only YA
.14f1	48		pha				pha
.14f2	8a		txa				txa
.14f3	a8		tay				tay
.14f4	68		pla				pla
.14f5	60		rts				rts

;******  Return to file: device/device.asm

.14f6					deviceHandler:
.14f6	7c f9 14	jmp ($14f9,x)			jmp 	(deviceVectors,x)
.14f9					deviceVectors:
>14f9	2e 14					.word IOControlHandler     ; index 0
>14fb	be 13					.word X16Break             ; index 2
>14fd	45 14					.word IOClearScreen        ; index 4
>14ff	4d 14					.word IONewLine            ; index 6
>1501	89 14					.word IOInk                ; index 8
>1503	6b 14					.word IOInkey              ; index 10
>1505	c9 14					.word IOInput              ; index 12
>1507	f5 13					.word ExternLoad           ; index 14
>1509	af 14					.word IOLocate             ; index 16
>150b	9d 14					.word IOPaper              ; index 18
>150d	5d 14					.word IOPrintChar          ; index 20
>150f	5d 14					.word IOPrintAscii         ; index 22
>1511	c9 13					.word ExternSave           ; index 24
>1513	55 14					.word IOTab                ; index 26
>1515	ee 14					.word IOReadTimer          ; index 28
.1517					_DummyControlHandler:
.1517	60		rts			rts

;******  Return to file: basic.asm

.1518					section_end_device:
.1518					section_start_error:

;******  Processing file: error/error.asm


;******  Processing file: error/errorhandler.asm

.1518					ErrorHandler:
.1518	8a		txa				txa
.1519	48		pha				pha
.151a	a9 01		lda #$01			lda 	#1 							; red
.151c	a2 08		ldx #$08		ldx	#8
.151e	20 f6 14	jsr $14f6		jsr	deviceHandler
.1521	68		pla				pla
.1522	aa		tax				tax
.1523	a9 8e		lda #$8e			lda 	#(ErrorTextList) & $FF
.1525	85 2a		sta $2a				sta 	temp0
.1527	a9 15		lda #$15			lda 	#(ErrorTextList) >> 8
.1529	85 2b		sta $2b				sta 	1+(temp0)
.152b	ca		dex		_EHFind:dex									; errors start at 1
.152c	f0 10		beq $153e			beq 	_EHFound
.152e	a0 00		ldy #$00			ldy 	#0 							; goto next text message, add length + 1 to the pointer.
.1530	38		sec				sec
.1531	a5 2a		lda $2a				lda 	temp0
.1533	71 2a		adc ($2a),y			adc 	(temp0),y
.1535	85 2a		sta $2a				sta 	temp0
.1537	90 f2		bcc $152b			bcc 	_EHFind
.1539	e6 2b		inc $2b				inc 	temp0+1
.153b	4c 2b 15	jmp $152b			jmp 	_EHFind
.153e					_EHFound:
.153e	20 52 18	jsr $1852			jsr 	EHPrintAscii 				; print the string "temp0" now points to.
.1541	a0 00		ldy #$00			ldy 	#0 							; in a line, e.g. the offset to next is non zero.
.1543	b1 28		lda ($28),y			lda 	(codePtr),y
.1545	f0 39		beq $1580			beq 	_EHNoLine
.1547	a5 29		lda $29				lda 	codePtr+1 					; code running from the command line.
.1549	cd c9 0a	cmp $0ac9			cmp 	basePage+1
.154c	90 32		bcc $1580			bcc 	_EHNoLine
.154e	a9 8a		lda #$8a			lda 	#(EHAtMsg) & $FF
.1550	85 2a		sta $2a				sta 	temp0
.1552	a9 15		lda #$15			lda 	#(EHAtMsg) >> 8
.1554	85 2b		sta $2b				sta 	1+(temp0)
.1556	20 52 18	jsr $1852			jsr 	EHPrintAscii
.1559	a0 01		ldy #$01			ldy 	#1 							; set up line number in TOS
.155b	a2 00		ldx #$00			ldx 	#0
.155d	b1 28		lda ($28),y			lda 	(codePtr),y
.155f	95 98		sta $98,x			sta 	esInt0,x
.1561	c8		iny				iny
.1562	b1 28		lda ($28),y			lda 	(codePtr),y
.1564	95 a0		sta $a0,x			sta 	esInt1,x
.1566	a9 00		lda #$00			lda 	#0
.1568	95 a8		sta $a8,x			sta 	esInt2,x
.156a	95 b0		sta $b0,x			sta 	esInt3,x
.156c	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.156e	85 2a		sta $2a				sta 	temp0
.1570	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.1572	85 2b		sta $2b				sta 	1+(temp0)
.1574	a0 0a		ldy #$0a			ldy 	#10 						; in base 10.
.1576	a9 00		lda #$00			lda 	#0							; stack position zero.
.1578	a2 12		ldx #$12		ldx	#18
.157a	20 a2 39	jsr $39a2		jsr	mainHandler
.157d	20 52 18	jsr $1852			jsr 	EHPrintAscii
.1580					_EHNoLine:
.1580	a2 06		ldx #$06		ldx	#6
.1582	20 f6 14	jsr $14f6		jsr	deviceHandler
.1585	a2 04		ldx #$04		ldx	#4
.1587	20 08 23	jsr $2308		jsr	interactionHandler
.158a					EHAtMsg:
>158a	03 20 40 20					.text 	3," @ "

;******  Processing file: error/../generated/errortext.inc

.158e					ErrorTextList:
>158e	13 46 65 61 74 75 72 65			.text 19,"Feature not Present"
>1596	20 6e 6f 74 20 50 72 65 73 65 6e 74
>15a2	0c 53 79 6e 74 61 78 20			.text 12,"Syntax Error"
>15aa	45 72 72 6f 72
>15af	0f 4d 6f 64 75 6c 65 20			.text 15,"Module disabled"
>15b7	64 69 73 61 62 6c 65 64
>15bf	10 41 73 73 65 72 74 69			.text 16,"Assertion failed"
>15c7	6f 6e 20 66 61 69 6c 65 64
>15d0	0e 44 69 76 69 64 65 20			.text 14,"Divide By Zero"
>15d8	42 79 20 5a 65 72 6f
>15df	04 53 74 6f 70				.text 4,"Stop"
>15e4	0d 54 79 70 65 20 4d 69			.text 13,"Type Mismatch"
>15ec	73 6d 61 74 63 68
>15f2	0d 49 6c 6c 65 67 61 6c			.text 13,"Illegal Value"
>15fa	20 56 61 6c 75 65
>1600	15 4d 69 73 73 69 6e 67			.text 21,"Missing right bracket"
>1608	20 72 69 67 68 74 20 62 72 61 63 6b 65 74
>1616	0d 4d 69 73 73 69 6e 67			.text 13,"Missing comma"
>161e	20 63 6f 6d 6d 61
>1624	11 4d 69 73 73 69 6e 67			.text 17,"Missing reference"
>162c	20 72 65 66 65 72 65 6e 63 65
>1636	15 4c 69 6e 65 20 4e 75			.text 21,"Line Number not found"
>163e	6d 62 65 72 20 6e 6f 74 20 66 6f 75 6e 64
>164c	0f 53 74 72 69 6e 67 20			.text 15,"String too long"
>1654	74 6f 6f 20 6c 6f 6e 67
>165c	14 52 45 54 55 52 4e 20			.text 20,"RETURN without GOSUB"
>1664	77 69 74 68 6f 75 74 20 47 4f 53 55 42
>1671	14 55 4e 54 49 4c 20 77			.text 20,"UNTIL without REPEAT"
>1679	69 74 68 6f 75 74 20 52 45 50 45 41 54
>1686	10 4e 45 58 54 20 77 69			.text 16,"NEXT without FOR"
>168e	74 68 6f 75 74 20 46 4f 52
>1697	12 57 45 4e 44 20 77 69			.text 18,"WEND without WHILE"
>169f	74 68 6f 75 74 20 57 48 49 4c 45
>16aa	14 45 4e 44 50 52 4f 43			.text 20,"ENDPROC without PROC"
>16b2	20 77 69 74 68 6f 75 74 20 50 52 4f 43
>16bf	0e 42 61 64 20 4e 45 58			.text 14,"Bad NEXT index"
>16c7	54 20 69 6e 64 65 78
>16ce	17 53 74 72 75 63 74 75			.text 23,"Structures nested wrong"
>16d6	72 65 73 20 6e 65 73 74 65 64 20 77 72 6f 6e 67
>16e6	16 43 61 6e 6e 6f 74 20			.text 22,"Cannot create variable"
>16ee	63 72 65 61 74 65 20 76 61 72 69 61 62 6c 65
>16fd	19 52 65 74 75 72 6e 20			.text 25,"Return stack out of space"
>1705	73 74 61 63 6b 20 6f 75 74 20 6f 66 20 73 70 61
>1715	63 65
>1717	11 55 6e 6b 6e 6f 77 6e			.text 17,"Unknown Procedure"
>171f	20 50 72 6f 63 65 64 75 72 65
>1729	17 50 61 72 61 6d 65 74			.text 23,"Parameters do not match"
>1731	65 72 73 20 64 6f 20 6e 6f 74 20 6d 61 74 63 68
>1741	15 41 72 72 61 79 20 61			.text 21,"Array already defined"
>1749	6c 72 65 61 64 79 20 64 65 66 69 6e 65 64
>1757	12 44 49 4d 20 72 65 71			.text 18,"DIM requires array"
>175f	75 69 72 65 73 20 61 72 72 61 79
>176a	0f 42 61 64 20 61 72 72			.text 15,"Bad array index"
>1772	61 79 20 69 6e 64 65 78
>177a	1d 57 72 6f 6e 67 20 6e			.text 29,"Wrong number of array indices"
>1782	75 6d 62 65 72 20 6f 66 20 61 72 72 61 79 20 69
>1792	6e 64 69 63 65 73
>1798	0b 4f 75 74 20 6f 66 20			.text 11,"Out of data"
>17a0	64 61 74 61
>17a4	14 43 61 6e 6e 6f 74 20			.text 20,"Cannot tokenise line"
>17ac	74 6f 6b 65 6e 69 73 65 20 6c 69 6e 65
>17b9	0b 53 61 76 65 20 66 61			.text 11,"Save failed"
>17c1	69 6c 65 64
>17c5	0b 4c 6f 61 64 20 66 61			.text 11,"Load failed"
>17cd	69 6c 65 64
>17d1	05 42 72 65 61 6b			.text 5,"Break"
>17d7	0d 4f 75 74 20 6f 66 20			.text 13,"Out of memory"
>17df	6d 65 6d 6f 72 79
>17e5	16 45 78 70 72 65 73 73			.text 22,"Expression too complex"
>17ed	69 6f 6e 20 74 6f 6f 20 63 6f 6d 70 6c 65 78
>17fc	10 42 61 64 20 4f 70 65			.text 16,"Bad Operand/Mode"
>1804	72 61 6e 64 2f 4d 6f 64 65
>180d	13 42 72 61 6e 63 68 20			.text 19,"Branch out of range"
>1815	6f 75 74 20 6f 66 20 72 61 6e 67 65
>1821	13 4c 61 62 65 6c 20 63			.text 19,"Label changed value"
>1829	68 61 6e 67 65 64 20 76 61 6c 75 65
>1835	12 4e 6f 20 53 70 72 69			.text 18,"No Sprite Selected"
>183d	74 65 20 53 65 6c 65 63 74 65 64
>1848	08 48 61 72 64 77 61 72			.text 8,"Hardware"
>1850	65
>1851	00					.byte 0

;******  Return to file: error/errorhandler.asm

.1852					EHPrintAscii:
.1852	a0 00		ldy #$00			ldy 	#0
.1854	b1 2a		lda ($2a),y			lda 	(temp0),y
.1856	aa		tax				tax
.1857	f0 0f		beq $1868			beq 	_EHPExit
.1859					_EHPLoop:
.1859	c8		iny				iny
.185a	8a		txa				txa
.185b	48		pha				pha
.185c	b1 2a		lda ($2a),y			lda 	(temp0),y
.185e	a2 16		ldx #$16		ldx	#22
.1860	20 f6 14	jsr $14f6		jsr	deviceHandler
.1863	68		pla				pla
.1864	aa		tax				tax
.1865	ca		dex				dex
.1866	d0 f1		bne $1859			bne 	_EHPLoop
.1868					_EHPExit:
.1868	60		rts				rts

;******  Return to file: error/error.asm


;******  Return to file: basic.asm

.1869					section_end_error:
.1869					section_start_extension:

;******  Processing file: extension/extension.asm


;******  Processing file: extension/extensionhandler.asm

.1869					ExtensionHandler:
.1869	c9 fe		cmp #$fe			cmp 	#$FE 						; check for force mode 0
.186b	f0 16		beq $1883			beq 	_ExtensionForce
.186d	c9 ff		cmp #$ff			cmp 	#$FF						; A = $FF command, otherwise unary function stack level.
.186f	d0 08		bne $1879			bne 	_ExtensionUnary 			; is passed in A.
.1871	b1 28		lda ($28),y			lda 	(codePtr),y 				; so this is a command, using Group 2.
.1873	c8		iny				iny
.1874	0a		asl a				asl 	a
.1875	aa		tax				tax
.1876	7c 7a 18	jmp ($187a,x)			jmp 	(Group2Vectors-12,x)
.1879					_ExtensionUnary:
.1879	48		pha				pha 								; save stack pos in A
.187a	b1 28		lda ($28),y			lda 	(codePtr),y 				; get shifted token, double into X
.187c	c8		iny				iny
.187d	0a		asl a				asl 	a
.187e	aa		tax				tax
.187f	68		pla				pla 								; restore stack pos and call group3 command.
.1880	7c 88 18	jmp ($1888,x)			jmp 	(Group3Vectors-12,X)
.1883					_ExtensionForce:
.1883	4c 83 1e	jmp $1e83			jmp 	ForceMode0

;******  Processing file: extension/../generated/tokenvectors2.inc

.1886					Group2Vectors:
>1886	b5 1f					.word	Command_VPoke            ; $86 vpoke
>1888	b8 1f					.word	Command_VDoke            ; $87 vdoke
>188a	8d 1f					.word	Command_VLoad            ; $88 vload
>188c	95 1e					.word	CommandMode              ; $89 mode
>188e	56 1f					.word	CommandPalette           ; $8a palette
>1890	80 1c					.word	CommandSprite            ; $8b sprite
>1892	52 1f					.word	CommandClg               ; $8c clg

;******  Return to file: extension/extensionhandler.asm


;******  Processing file: extension/../generated/tokenvectors3.inc

.1894					Group3Vectors:
>1894	01 20					.word	Command_VPeek            ; $86 vpeek(
>1896	04 20					.word	Command_VDeek            ; $87 vdeek(
>1898	53 1e					.word	Sprite_GetX              ; $88 sprite.x(
>189a	56 1e					.word	Sprite_GetY              ; $89 sprite.y(
>189c	c3 1b					.word	FunctionCollide          ; $8a hit(
>189e	3b 1b					.word	Unary_JoyX               ; $8b joy.x(
>18a0	3e 1b					.word	Unary_JoyY               ; $8c joy.y(
>18a2	79 1b					.word	Unary_JButton            ; $8d joy.b(
>18a4	0e 1b					.word	Unary_Clock              ; $8e clock(

;******  Return to file: extension/extensionhandler.asm

.18a6					XEvaluateInteger:
.18a6	8a		txa				txa
.18a7	a2 0a		ldx #$0a		ldx	#10
.18a9	20 a2 39	jsr $39a2		jsr	mainHandler
.18ac	aa		tax				tax
.18ad	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/graphics/general.asm

.0be6					gStartStorage:
.0be6					gCurrentXPos:
>0be6							.fill 	2 							; copying the coordinate here, and into x2, and the old
.0be8					gCurrentYPos:
>0be8							.fill 	2
.0bea					gX1:
>0bea							.fill 	2		 					; most recently used. x2,y2 are the most recently used.
.0bec					gY1:
>0bec							.fill 	2
.0bee					gX2:
>0bee							.fill 	2
.0bf0					gY2:
>0bf0							.fill 	2
.0bf2					gModifiers:
.0bf2					gInk:
>0bf2							.fill 	1
.0bf3					gPaper:
>0bf3							.fill 	1
.0bf4					gSize:
>0bf4							.fill 	1
.0bf5					gImage:
>0bf5							.fill 	1
.0bf6					gFlip:
>0bf6							.fill 	1
.0bf7					gWordHandler:
>0bf7							.fill 	2
.0bf9					gEndStorage:
.18ae					GResetStorage:
.18ae	8a		txa				txa
.18af	48		pha				pha
.18b0	a2 12		ldx #$12			ldx 	#gEndStorage-gStartStorage-1 ; fill all storage for gfx with 0
.18b2	a9 00		lda #$00			lda 	#0
.18b4					_GRSLoop:
.18b4	9d e6 0b	sta $0be6,x			sta 	gStartStorage,x
.18b7	ca		dex				dex
.18b8	10 fa		bpl $18b4			bpl 	_GRSLoop
.18ba	ee f2 0b	inc $0bf2			inc 	gInk 						; make ink 1.
.18bd	68		pla				pla
.18be	aa		tax				tax
.18bf	60		rts				rts
.18c0					GHandler:
.18c0	8e f8 0b	stx $0bf8			stx 	gWordHandler+1 				; save code that draws the actual line or whatever.
.18c3	8d f7 0b	sta $0bf7			sta 	gWordHandler
.18c6	88		dey				dey 								; predecrement
.18c7					_GHLoopNext:
.18c7	c8		iny				iny									; advance one character
.18c8					_GHLoop:
.18c8	b1 28		lda ($28),y			lda 	(codePtr),y 				; look at character.
.18ca	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; , go to next
.18cc	f0 f9		beq $18c7			beq 	_GHLoopNext
.18ce	c9 80		cmp #$80			cmp 	#TOK_EOL 					; end of line or : , exit
.18d0	f0 42		beq $1914			beq 	_GHExit
.18d2	c9 ca		cmp #$ca			cmp 	#TKW_COLON
.18d4	f0 3e		beq $1914			beq 	_GHExit
.18d6	c9 db		cmp #$db			cmp 	#TKW_AT 					; have we found AT or TO
.18d8	f0 2d		beq $1907			beq 	_GHCallHandler 				; update post & call the handler
.18da	c9 ce		cmp #$ce			cmp 	#TKW_TO
.18dc	f0 29		beq $1907			beq 	_GHCallHandler
.18de	a2 00		ldx #$00			ldx 	#0 							; now see if it matches a token modifier (INK,PAPER etc.)
.18e0					_GHCheckTokens:
.18e0	b1 28		lda ($28),y			lda 	(codePtr),y
.18e2	dd 15 19	cmp $1915,x			cmp 	_GHTokenTable,x
.18e5	f0 0c		beq $18f3			beq 	_GHFoundToken
.18e7	e8		inx				inx
.18e8	bd 15 19	lda $1915,x			lda 	_GHTokenTable,x
.18eb	d0 f3		bne $18e0			bne 	_GHCheckTokens
.18ed	20 1b 19	jsr $191b			jsr 	GHMakeCurrent 				; should be a coordinate pair then.
.18f0	4c c8 18	jmp $18c8			jmp 	_GHLoop
.18f3					_GHFoundToken:
.18f3	c8		iny				iny 								; skip token (INK/PAPER etc.)
.18f4	8a		txa				txa
.18f5	48		pha				pha
.18f6	a9 00		lda #$00			lda 	#0 							; evaluate byte
.18f8	a2 0c		ldx #$0c		ldx	#12
.18fa	20 a2 39	jsr $39a2		jsr	mainHandler
.18fd	68		pla				pla
.18fe	aa		tax				tax
.18ff	a5 98		lda $98				lda 	esInt0 						; get evaluated value
.1901	9d f2 0b	sta $0bf2,x			sta 	gModifiers,x 				; update the modifiers
.1904	4c c8 18	jmp $18c8			jmp 	_GHLoop 					; and loop back
.1907					_GHCallHandler:
.1907	c8		iny				iny 								; consume AT or TO.
.1908	20 1b 19	jsr $191b			jsr 	GHMakeCurrent 				; update the coordinates.
.190b	20 11 19	jsr $1911			jsr 	_GHCallHandlerCode 			; call the handler code
.190e	4c c8 18	jmp $18c8			jmp 	_GHLoop 					; and loop round.
.1911					_GHCallHandlerCode:
.1911	6c f7 0b	jmp ($0bf7)			jmp 	(gWordHandler)
.1914					_GHExit:
.1914	60		rts				rts
.1915					_GHTokenTable:
>1915	e1 e2 d2 da dc					.byte 	TKW_INK,TKW_PAPER,TKW_DIM,TKW_IMAGE,TKW_FLIP
>191a	00						.byte 	0
.191b					GHMakeCurrent:
.191b	8a		txa				txa
.191c	48		pha				pha
.191d	a2 00		ldx #$00			ldx 	#0 							; do for 0 offset (X)
.191f	20 2f 19	jsr $192f			jsr 	_GHMCDoIt
.1922	a2 02		ldx #$02		ldx	#2
.1924	20 a2 39	jsr $39a2		jsr	mainHandler
.1927	a2 02		ldx #$02			ldx 	#2 							; do for 2 offset (Y)
.1929	20 2f 19	jsr $192f			jsr 	_GHMCDoIt
.192c	68		pla				pla
.192d	aa		tax				tax
.192e	60		rts				rts
.192f					_GHMCDoIt:
.192f	bd e6 0b	lda $0be6,x			lda 	gCurrentXPos,x 				; copy the current position to X,Y
.1932	9d ea 0b	sta $0bea,x			sta 	gX1,x
.1935	bd e7 0b	lda $0be7,x			lda 	gCurrentXPos+1,x
.1938	9d eb 0b	sta $0beb,x			sta 	gX1+1,x
.193b	8a		txa				txa
.193c	48		pha				pha
.193d	a9 00		lda #$00			lda 	#0 							; evaluate the parameter, now in esInt0,esInt1
.193f	a2 0a		ldx #$0a		ldx	#10
.1941	20 a2 39	jsr $39a2		jsr	mainHandler
.1944	68		pla				pla
.1945	aa		tax				tax
.1946	a5 98		lda $98				lda 	esInt0
.1948	9d e6 0b	sta $0be6,x			sta 	gCurrentXPos,x
.194b	9d ee 0b	sta $0bee,x			sta 	gX2,x
.194e	a5 a0		lda $a0				lda 	esInt1
.1950	9d e7 0b	sta $0be7,x			sta 	gCurrentXPos+1,x
.1953	9d ef 0b	sta $0bef,x			sta 	gX2+1,x
.1956	a5 a8		lda $a8				lda 	esInt2 						; check reasonable range.
.1958	05 b0		ora $b0				ora 	esInt3
.195a	d0 01		bne $195d			bne 	_GMHCRange
.195c	60		rts				rts
.195d					_GMHCRange:
.195d	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.195f	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/driver/coords.asm

.1962					gdMvRight:
.1962	ee 20 9f	inc $9f20			inc 	$9F20 						; bump $9F20
.1965	d0 08		bne $196f			bne 	_gdMR0
.1967	ee 21 9f	inc $9f21			inc 	$9F21
.196a	d0 03		bne $196f			bne 	_gdMR0
.196c	ee 22 9f	inc $9f22			inc 	$9F22
.196f					_gdMR0:
.196f	ee ff 0b	inc $0bff			inc 	gdXPos
.1972	d0 03		bne $1977			bne 	_gdMR1
.1974	ee 00 0c	inc $0c00			inc 	gdXPos+1
.1977					_gdMR1:
.1977	ad 00 0c	lda $0c00			lda 	gdXPos+1		 			; check MSB
.197a	f0 0d		beq $1989			beq 	gdMOffScreen
.197c	c9 02		cmp #$02			cmp 	#2
.197e	b0 07		bcs $1987			bcs 	gdmOnScreen
.1980	ad ff 0b	lda $0bff			lda 	gdXPos 						; $01xx check < $140
.1983	c9 40		cmp #$40			cmp 	#$40
.1985	b0 02		bcs $1989			bcs 	gdmOffScreen
.1987					gdmOnScreen:
.1987	18		clc				clc
.1988	60		rts				rts
.1989					gdmOffScreen:
.1989	38		sec				sec
.198a	60		rts				rts
.198b					gdMvUp:
.198b	ad 01 0c	lda $0c01			lda 	gdYPos 						; decrement Y Pos
.198e	d0 03		bne $1993			bne 	_gdMU1
.1990	ce 02 0c	dec $0c02			dec 	gdYPos+1
.1993	ce 01 0c	dec $0c01	_gdMU1:	dec 	gdYPos
.1996	38		sec				sec 								; adjust position by -320
.1997	ad 20 9f	lda $9f20			lda 	$9F20
.199a	e9 40		sbc #$40			sbc 	#64
.199c	8d 20 9f	sta $9f20			sta 	$9F20
.199f	ad 21 9f	lda $9f21			lda 	$9F21
.19a2	e9 01		sbc #$01			sbc 	#1
.19a4	8d 21 9f	sta $9f21			sta 	$9F21
.19a7	ad 22 9f	lda $9f22			lda 	$9F22
.19aa	e9 00		sbc #$00			sbc 	#0
.19ac	8d 22 9f	sta $9f22			sta 	$9F22
.19af	4c d3 19	jmp $19d3			jmp 	gdCheckYRange
.19b2					gdMvDown:
.19b2	ee 01 0c	inc $0c01			inc 	gdYPos 						; decrement Y Pos
.19b5	d0 03		bne $19ba			bne 	_gdMU1
.19b7	ee 02 0c	inc $0c02			inc 	gdYPos+1
.19ba					_gdMU1:
.19ba	18		clc				clc 								; adjust position by -320
.19bb	ad 20 9f	lda $9f20			lda 	$9F20
.19be	69 40		adc #$40			adc 	#64
.19c0	8d 20 9f	sta $9f20			sta 	$9F20
.19c3	ad 21 9f	lda $9f21			lda 	$9F21
.19c6	69 01		adc #$01			adc 	#1
.19c8	8d 21 9f	sta $9f21			sta 	$9F21
.19cb	ad 22 9f	lda $9f22			lda 	$9F22
.19ce	69 00		adc #$00			adc 	#0
.19d0	8d 22 9f	sta $9f22			sta 	$9F22
.19d3					gdCheckYRange:
.19d3	ad 02 0c	lda $0c02			lda 	gdYPos+1
.19d6	d0 b1		bne $1989			bne 	gdmOffScreen
.19d8	ad 01 0c	lda $0c01			lda 	gdYPos
.19db	c9 c8		cmp #$c8			cmp 	#200
.19dd	b0 aa		bcs $1989			bcs 	gdmOffScreen
.19df	90 a6		bcc $1987			bcc 	gdmOnScreen
.19e1					gdUpdatePixelOffset:
.19e1	ad 00 0c	lda $0c00			lda 	gdXPos+1 					; check X < 320 ($140)
.19e4	f0 0b		beq $19f1			beq 	_gdUPOCheckY
.19e6	c9 02		cmp #$02			cmp 	#2
.19e8	b0 13		bcs $19fd			bcs 	_gdUPOBad
.19ea	ad ff 0b	lda $0bff			lda 	gdXPos
.19ed	c9 40		cmp #$40			cmp 	#$40
.19ef	b0 0c		bcs $19fd			bcs 	_gdUPOBad
.19f1					_gdUPOCheckY:
.19f1	ad 02 0c	lda $0c02			lda 	gdYPos+1 					; check Y < 200
.19f4	d0 0e		bne $1a04			bne 	_gdUPOCalculate
.19f6	ad 01 0c	lda $0c01			lda 	gdYPos
.19f9	c9 c8		cmp #$c8			cmp 	#200
.19fb	90 07		bcc $1a04			bcc 	_gdUPOCalculate
.19fd					_gdUPOBad:
.19fd	a9 00		lda #$00			lda 	#0
.19ff	8d 03 0c	sta $0c03			sta 	gdIsPosOkay
.1a02	38		sec				sec
.1a03	60		rts				rts
.1a04					_gdUPOCalculate:
.1a04	a9 00		lda #$00			lda 	#0 							; temp0 is LSB of result start as 256 x Y
.1a06	85 2a		sta $2a				sta 	temp0
.1a08	ad 01 0c	lda $0c01			lda 	gdYPos
.1a0b	85 2b		sta $2b				sta 	temp0+1
.1a0d	46 2b		lsr $2b				lsr 	temp0+1 					; / 4 so temp0 is YC x 64
.1a0f	66 2a		ror $2a				ror 	temp0
.1a11	46 2b		lsr $2b				lsr 	temp0+1
.1a13	66 2a		ror $2a				ror 	temp0
.1a15	ad 01 0c	lda $0c01			lda 	gdYPos 						; add 256 x Y => 320 * Y < 64k
.1a18	18		clc				clc
.1a19	65 2b		adc $2b				adc 	temp0+1
.1a1b	85 2b		sta $2b				sta 	temp0+1 					; temp0 = 320 x Y now add X => pixeloffset
.1a1d	18		clc				clc
.1a1e	a5 2a		lda $2a				lda 	temp0
.1a20	6d ff 0b	adc $0bff			adc 	gdXPos
.1a23	8d fd 0b	sta $0bfd			sta 	gdPixelOffset
.1a26	a5 2b		lda $2b				lda 	temp0+1
.1a28	6d 00 0c	adc $0c00			adc 	gdXPos+1
.1a2b	8d fe 0b	sta $0bfe			sta 	gdPixelOffset+1
.1a2e	a9 01		lda #$01			lda 	#1 							; it's legitimate.
.1a30	8d 03 0c	sta $0c03			sta 	gdIsPosOkay
.1a33	20 38 1a	jsr $1a38			jsr 	gdCopyPosition 				; copy position over
.1a36	18		clc				clc
.1a37	60		rts				rts
.1a38					gdCopyPosition:
.1a38	48		pha				pha
.1a39	18		clc				clc
.1a3a	ad fa 0b	lda $0bfa			lda 	gdBitmapAddress
.1a3d	6d fd 0b	adc $0bfd			adc 	gdPixelOffset
.1a40	8d 20 9f	sta $9f20			sta 	$9F20
.1a43	ad fb 0b	lda $0bfb			lda 	gdBitmapAddress+1
.1a46	6d fe 0b	adc $0bfe			adc 	gdPixelOffset+1
.1a49	8d 21 9f	sta $9f21			sta 	$9F21
.1a4c	ad fc 0b	lda $0bfc			lda 	gdBitmapAddress+2
.1a4f	69 00		adc #$00			adc 	#0
.1a51	8d 22 9f	sta $9f22			sta 	$9F22
.1a54	68		pla				pla
.1a55	60		rts				rts
.1a56					gdPlotInk:
.1a56	ad 04 0c	lda $0c04			lda 	gdInk
.1a59	8d 23 9f	sta $9f23			sta 	$9F23
.1a5c	60		rts				rts
.1a5d					gdPlotPaper:
.1a5d	ad 05 0c	lda $0c05			lda 	gdPaper
.1a60	c9 ff		cmp #$ff			cmp 	#$FF
.1a62	f0 03		beq $1a67			beq 	_gdPPSkip
.1a64	8d 23 9f	sta $9f23			sta 	$9F23
.1a67					_gdPPSkip:
.1a67	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/driver/driver.asm

.0bf9					gdEnabled:
>0bf9							.fill 	1
.0bfa					gdBitmapAddress:
>0bfa							.fill 	3
.0bfd					gdPixelOffset:
>0bfd							.fill 	2
.0bff					gdXPos:
>0bff							.fill 	2
.0c01					gdYPos:
>0c01							.fill 	2
.0c03					gdIsPosOkay:
>0c03							.fill 	1
.0c04					gdInk:
>0c04							.fill 	1
.0c05					gdPaper:
>0c05							.fill 	1
.1a68					gdModeChanged:
.1a68	8a		txa				txa
.1a69	48		pha				pha
.1a6a	98		tya				tya
.1a6b	48		pha				pha
.1a6c	a9 00		lda #$00			lda 	#0 							; zero the enabled flag.
.1a6e	8d f9 0b	sta $0bf9			sta 	gdEnabled
.1a71	ad 2a 9f	lda $9f2a			lda 	$9F2A 						; requires $40 for H/V Scale
.1a74	c9 40		cmp #$40			cmp 	#$40
.1a76	d0 1f		bne $1a97			bne 	_gdExit
.1a78	ad 2b 9f	lda $9f2b			lda 	$9F2B
.1a7b	c9 40		cmp #$40			cmp 	#$40
.1a7d	d0 18		bne $1a97			bne 	_gdExit
.1a7f	ad 29 9f	lda $9f29			lda 	$9F29 						; read DC_Video, see which layers are enabled.
.1a82	0a		asl a				asl 	a 							;
.1a83	0a		asl a				asl 	a 							; bit 7 now set if layer 1 enabled.
.1a84	10 09		bpl $1a8f			bpl 	_gdNotLayer1
.1a86	48		pha				pha 								; save A
.1a87	a2 07		ldx #$07			ldx 	#7 							; check offset 7 (e.g. start at $9F34)
.1a89	20 9f 1a	jsr $1a9f			jsr 	gdCheckBitmap 				; go see if this is a bitmap
.1a8c	68		pla				pla 								; restore A
.1a8d	b0 08		bcs $1a97			bcs 	_gdExit 					; if successful then exit
.1a8f					_gdNotLayer1:
.1a8f	0a		asl a				asl 	a 							; bit 7 now set if layer 0 enabled.
.1a90	10 05		bpl $1a97			bpl 	_gdExit 					; if not enabled, exit
.1a92	a2 00		ldx #$00			ldx 	#0 							; check offset 0 (e.g. start at $9F2D)
.1a94	20 9f 1a	jsr $1a9f			jsr 	gdCheckBitmap 				; go see if this is a bitmap
.1a97					_gdExit:
.1a97	20 bc 1a	jsr $1abc			jsr 	gdClearGraphics 			; clear graphics display.
.1a9a	68		pla				pla
.1a9b	a8		tay				tay
.1a9c	68		pla				pla
.1a9d	aa		tax				tax
.1a9e	60		rts				rts
.1a9f					gdCheckBitmap:
.1a9f	bd 2d 9f	lda $9f2d,x			lda 	$9F2D,x 					; look at bitmap bit.
.1aa2	c9 07		cmp #$07			cmp 	#7 							; must be zero map size, bitmap and 8bpp
.1aa4	d0 14		bne $1aba			bne 	_gdCBFail
.1aa6	ee f9 0b	inc $0bf9			inc 	gdEnabled 					; set the enabled flag to non zero.
.1aa9	bd 2f 9f	lda $9f2f,x			lda 	$9F2F,x 					; this is the bitmap address / 2
.1aac	0a		asl a				asl 	a
.1aad	8d fb 0b	sta $0bfb			sta 	gdBitmapAddress+1
.1ab0	69 00		adc #$00			adc 	#$00 						; set to no move, updated manually.
.1ab2	8d fc 0b	sta $0bfc			sta 	gdBitmapAddress+2
.1ab5	a9 00		lda #$00			lda 	#$00
.1ab7	8d fa 0b	sta $0bfa			sta 	gdBitmapAddress 			; this is a 17 bit address.
.1aba					_gdCBFail:
.1aba	18		clc				clc
.1abb	60		rts				rts
.1abc					gdClearGraphics:
.1abc	8a		txa				txa
.1abd	48		pha				pha
.1abe	98		tya				tya
.1abf	48		pha				pha
.1ac0	ad f9 0b	lda $0bf9			lda 	gdEnabled 					; screen enabled
.1ac3	f0 2e		beq $1af3			beq 	_gdCGExit
.1ac5	a9 00		lda #$00			lda 	#0 							; reset position
.1ac7	8d 03 0c	sta $0c03			sta 	gdIsPosOkay 				; not legal position
.1aca	8d fd 0b	sta $0bfd			sta 	gdPixelOffset 				; zero pixel offset.
.1acd	8d fe 0b	sta $0bfe			sta 	gdPixelOffset+1
.1ad0	8d 05 0c	sta $0c05			sta 	gdPaper 					; paper black
.1ad3	20 38 1a	jsr $1a38			jsr 	gdCopyPosition
.1ad6	ad 22 9f	lda $9f22			lda 	$9F22 						; make it autoincrement.
.1ad9	09 10		ora #$10			ora 	#$10
.1adb	8d 22 9f	sta $9f22			sta 	$9F22
.1ade	a9 01		lda #$01			lda 	#1 							; ink white
.1ae0	8d 04 0c	sta $0c04			sta 	gdInk
.1ae3	a0 fa		ldy #$fa			ldy 	#$FA						; 320 x 200 pixels = $FA00
.1ae5	a2 00		ldx #$00			ldx 	#0
.1ae7	ad 05 0c	lda $0c05			lda 	gdPaper
.1aea					_gdCGLoop1:
.1aea	8d 23 9f	sta $9f23			sta 	$9F23
.1aed	ca		dex				dex
.1aee	d0 fa		bne $1aea			bne 	_gdCGLoop1
.1af0	88		dey				dey
.1af1	d0 f7		bne $1aea			bne 	_gdCGLoop1
.1af3					_gdCGExit:
.1af3	68		pla				pla
.1af4	a8		tay				tay
.1af5	68		pla				pla
.1af6	aa		tax				tax
.1af7	60		rts				rts
.1af8					gdSetInk:
.1af8	8d 04 0c	sta $0c04			sta 	gdInk
.1afb	60		rts				rts
.1afc					gdSetPaper:
.1afc	8d 05 0c	sta $0c05			sta 	gdPaper
.1aff	60		rts				rts
.1b00					gdSetX:
.1b00	8d ff 0b	sta $0bff			sta 	gdXPos
.1b03	8e 00 0c	stx $0c00			stx 	gdXPos+1
.1b06	60		rts				rts
.1b07					gdSetY:
.1b07	8d 01 0c	sta $0c01			sta 	gdYPos
.1b0a	8e 02 0c	stx $0c02			stx 	gdYPos+1
.1b0d	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/miscellany/clock.asm

.1b0e					Unary_Clock:
.1b0e	a2 0c		ldx #$0c		ldx	#12
.1b10	20 a2 39	jsr $39a2		jsr	mainHandler
.1b13	48		pha				pha 								; save stack pos
.1b14	a2 04		ldx #$04		ldx	#4
.1b16	20 a2 39	jsr $39a2		jsr	mainHandler
.1b19	98		tya				tya
.1b1a	48		pha				pha
.1b1b	20 50 ff	jsr $ff50			jsr 	$FF50
.1b1e	68		pla				pla
.1b1f	a8		tay				tay
.1b20	68		pla				pla 								; restore, repush, put into X to read offset
.1b21	48		pha				pha
.1b22	aa		tax				tax
.1b23	b5 98		lda $98,x			lda 	esInt0,x 					; must be 0-5
.1b25	c9 06		cmp #$06			cmp 	#6
.1b27	b0 0d		bcs $1b36			bcs 	_UCValue
.1b29	aa		tax				tax 								; index in X and read RTC.
.1b2a	b5 02		lda $02,x			lda 	2,x
.1b2c	85 32		sta $32				sta 	tempshort
.1b2e	68		pla				pla 								; restore number stack index.
.1b2f	aa		tax				tax
.1b30	a5 32		lda $32				lda 	tempShort
.1b32	95 98		sta $98,x			sta 	esInt0,x 					; rest are set up.
.1b34	8a		txa				txa
.1b35	60		rts				rts
.1b36					_UCValue:
.1b36	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.1b38	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/miscellany/joystick.asm

.1b3b					Unary_JoyX:
.1b3b	38		sec				sec
.1b3c	b0 01		bcs $1b3f			bcs 	JoystickRead
.1b3e					Unary_JoyY:
.1b3e	18		clc				clc
.1b3f					JoystickRead:
.1b3f	48		pha				pha 								; save stack position
.1b40	08		php				php 								; save test flag.
.1b41	a2 04		ldx #$04		ldx	#4
.1b43	20 a2 39	jsr $39a2		jsr	mainHandler
.1b46	20 a0 1b	jsr $1ba0			jsr 	ReadJoystick 				; read it.
.1b49	28		plp				plp
.1b4a	b0 02		bcs $1b4e			bcs 	_JRNoShift 					; if Y, shift right twice so accessing Y buttons
.1b4c	4a		lsr a				lsr 	a
.1b4d	4a		lsr a				lsr 	a
.1b4e					_JRNoShift:
.1b4e	29 03		and #$03			and 	#3 							; isolate the test bits.
.1b50	f0 0d		beq $1b5f			beq 	JoyReturnA 					; if nothing pressed, return A.
.1b52	c9 03		cmp #$03			cmp 	#3
.1b54	f0 07		beq $1b5d			beq 	JoyReturnFalse 				; could be both on a keyboard.
.1b56	4a		lsr a				lsr 	a 							; bit 0 set, its +1
.1b57	b0 16		bcs $1b6f			bcs 	JoyReturn1
.1b59					JoyReturnTrue:
.1b59	a9 ff		lda #$ff			lda 	#$FF
.1b5b	d0 02		bne $1b5f			bne 	JoyReturnA
.1b5d					JoyReturnFalse:
.1b5d	a9 00		lda #$00			lda 	#0
.1b5f					JoyReturnA:
.1b5f	85 32		sta $32				sta 	tempShort 					; return A
.1b61	68		pla				pla
.1b62	aa		tax				tax
.1b63	a5 32		lda $32				lda 	tempShort
.1b65	95 98		sta $98,x			sta 	esInt0,x
.1b67					JoyReturn13:
.1b67	95 a0		sta $a0,x			sta 	esInt1,x
.1b69	95 a8		sta $a8,x			sta 	esInt2,x
.1b6b	95 b0		sta $b0,x			sta 	esInt3,x
.1b6d	8a		txa				txa 								; return NSP in A
.1b6e	60		rts				rts
.1b6f					JoyReturn1:
.1b6f	68		pla				pla
.1b70	aa		tax				tax
.1b71	a9 01		lda #$01			lda 	#1
.1b73	95 98		sta $98,x			sta 	esInt0,x
.1b75	a9 00		lda #$00			lda 	#0
.1b77	f0 ee		beq $1b67			beq 	JoyReturn13
.1b79					Unary_JButton:
.1b79	48		pha				pha 								; save X on stack, put in X
.1b7a	a2 0c		ldx #$0c		ldx	#12
.1b7c	20 a2 39	jsr $39a2		jsr	mainHandler
.1b7f	aa		tax				tax 								; get value to check, push on stack.
.1b80	b5 98		lda $98,x			lda 	esInt0,x
.1b82	c9 04		cmp #$04			cmp 	#4 							; check button 0-3
.1b84	b0 15		bcs $1b9b			bcs 	_UJBadValue
.1b86	69 05		adc #$05			adc 	#5 							; four more shifts to get the bit into carry.
.1b88	48		pha				pha 								; save that shift count on the stack.
.1b89	a2 04		ldx #$04		ldx	#4
.1b8b	20 a2 39	jsr $39a2		jsr	mainHandler
.1b8e	68		pla				pla
.1b8f	aa		tax				tax
.1b90	20 a0 1b	jsr $1ba0			jsr 	ReadJoystick 				; joystick read
.1b93					_UJShift:
.1b93	4a		lsr a				lsr 	a
.1b94	ca		dex				dex
.1b95	d0 fc		bne $1b93			bne 	_UJShift
.1b97	b0 c0		bcs $1b59			bcs 	JoyReturnTrue
.1b99	90 c2		bcc $1b5d			bcc 	JoyReturnFalse
.1b9b					_UJBadValue:
.1b9b	a2 28		ldx #$28			ldx 	#ErrorID_Hardware
.1b9d	20 18 15	jsr $1518		jsr	errorHandler
.1ba0					ReadJoystick:
.1ba0	8a		txa				txa
.1ba1	48		pha				pha
.1ba2	98		tya				tya
.1ba3	48		pha				pha
.1ba4	a9 00		lda #$00			lda 	#0
.1ba6	20 56 ff	jsr $ff56			jsr 	$FF56
.1ba9	c0 00		cpy #$00			cpy 	#0
.1bab	d0 11		bne $1bbe			bne 	_RJError
.1bad	c9 00		cmp #$00			cmp 	#0 							; bug, returns $00 initially
.1baf	d0 02		bne $1bb3			bne 	_RJNoBug
.1bb1	a9 ff		lda #$ff			lda 	#$FF
.1bb3					_RJNoBug:
.1bb3	85 32		sta $32				sta 	tempShort
.1bb5	68		pla				pla
.1bb6	a8		tay				tay
.1bb7	68		pla				pla
.1bb8	aa		tax				tax
.1bb9	a5 32		lda $32				lda 	tempShort
.1bbb	49 ff		eor #$ff			eor 	#$FF 						; active 1 bit.
.1bbd	60		rts				rts
.1bbe					_RJError:
.1bbe	a2 28		ldx #$28			ldx 	#ErrorID_Hardware
.1bc0	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/sprites/collide.asm

.0c06					hitSprite1:
>0c06							.fill 	1 							; this won't work ... if you nest HIT() which
.0c07					hitSprite2:
>0c07							.fill 	1
.0c08					hitRange:
>0c08							.fill 	1
.1bc3					FunctionCollide:
.1bc3	48		pha				pha 								; save and put index into X
.1bc4	aa		tax				tax
.1bc5	a9 00		lda #$00			lda 	#0 							; set hit range to default.
.1bc7	8d 08 0c	sta $0c08			sta 	hitRange
.1bca	20 6f 1c	jsr $1c6f			jsr 	_FCGetSpriteID
.1bcd	8d 06 0c	sta $0c06			sta 	hitSprite1
.1bd0	8a		txa				txa
.1bd1	48		pha				pha
.1bd2	a2 02		ldx #$02		ldx	#2
.1bd4	20 a2 39	jsr $39a2		jsr	mainHandler
.1bd7	68		pla				pla
.1bd8	aa		tax				tax
.1bd9	20 6f 1c	jsr $1c6f			jsr 	_FCGetSpriteID
.1bdc	8d 07 0c	sta $0c07			sta 	hitSprite2
.1bdf	b1 28		lda ($28),y			lda 	(codePtr),y 				; is there a third parameter
.1be1	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.1be3	f0 13		beq $1bf8			beq 	_FCParam2
.1be5	8a		txa				txa
.1be6	48		pha				pha
.1be7	a2 02		ldx #$02		ldx	#2
.1be9	20 a2 39	jsr $39a2		jsr	mainHandler
.1bec	68		pla				pla
.1bed	a2 0c		ldx #$0c		ldx	#12
.1bef	20 a2 39	jsr $39a2		jsr	mainHandler
.1bf2	aa		tax				tax
.1bf3	b5 98		lda $98,x			lda 	esInt0,x
.1bf5	8d 08 0c	sta $0c08			sta 	hitRange
.1bf8					_FCParam2:
.1bf8	a2 04		ldx #$04		ldx	#4
.1bfa	20 a2 39	jsr $39a2		jsr	mainHandler
.1bfd	68		pla				pla 								; set X to point to the stack again.
.1bfe	48		pha				pha
.1bff	aa		tax				tax
.1c00	98		tya				tya
.1c01	48		pha				pha
.1c02	18		clc				clc 								; do it with the horizontal values.
.1c03	20 25 1c	jsr $1c25			jsr 	_FCCheck
.1c06	90 0a		bcc $1c12			bcc 	_FCFail
.1c08	38		sec				sec 								; do it with the vertical values.
.1c09	20 25 1c	jsr $1c25			jsr 	_FCCheck
.1c0c	90 04		bcc $1c12			bcc 	_FCFail
.1c0e	a9 ff		lda #$ff			lda 	#255 						; pass, return -1
.1c10	d0 02		bne $1c14			bne 	_FCReturnA
.1c12					_FCFail:
.1c12	a9 00		lda #$00			lda 	#0 							; return 0, it didn't work.
.1c14					_FCReturnA:
.1c14	85 32		sta $32				sta 	tempShort 					; put result in tempShort
.1c16	68		pla				pla
.1c17	a8		tay				tay
.1c18	68		pla				pla 								; restore stack, return result and exit.
.1c19	aa		tax				tax
.1c1a	a5 32		lda $32				lda 	tempShort
.1c1c	95 98		sta $98,x			sta 	esInt0,x
.1c1e	95 a0		sta $a0,x			sta 	esInt1,x
.1c20	95 a8		sta $a8,x			sta 	esInt2,x
.1c22	95 b0		sta $b0,x			sta 	esInt3,x
.1c24	60		rts				rts
.1c25					_FCCheck:
.1c25	08		php				php 								; save the H/V flag twice
.1c26	08		php				php
.1c27	ad 06 0c	lda $0c06			lda 	hitSprite1 					; select sprite 1 and read its location
.1c2a	20 ad 1d	jsr $1dad			jsr 	SelectSpriteA 				; into X
.1c2d	28		plp				plp
.1c2e	20 0f 1e	jsr $1e0f			jsr 	SpriteReadCoordinate
.1c31	ad 07 0c	lda $0c07			lda 	hitSprite2					; now repeat for sprite 2 and location X+1
.1c34	20 ad 1d	jsr $1dad			jsr 	SelectSpriteA
.1c37	e8		inx				inx
.1c38	28		plp				plp
.1c39	20 0f 1e	jsr $1e0f			jsr 	SpriteReadCoordinate
.1c3c	ca		dex				dex
.1c3d	38		sec				sec 								; calculate |s1.c-s2.c| put in temp0
.1c3e	b5 98		lda $98,x			lda 	esInt0,x
.1c40	f5 99		sbc $99,x			sbc 	esInt0+1,x
.1c42	85 2a		sta $2a				sta 	temp0
.1c44	b5 a0		lda $a0,x			lda 	esInt1,x
.1c46	f5 a1		sbc $a1,x			sbc 	esInt1+1,x
.1c48	85 2b		sta $2b				sta 	temp0+1
.1c4a	10 0d		bpl $1c59			bpl 	_FCCIsPositive
.1c4c	38		sec				sec 								; if -ve calculate |difference|
.1c4d	a9 00		lda #$00			lda 	#0
.1c4f	e5 2a		sbc $2a				sbc 	temp0
.1c51	85 2a		sta $2a				sta 	temp0
.1c53	a9 00		lda #$00			lda 	#0
.1c55	e5 2b		sbc $2b				sbc 	temp0+1
.1c57	85 2b		sta $2b				sta 	temp0+1
.1c59					_FCCIsPositive:
.1c59	a5 2b		lda $2b				lda 	temp0+1 					; if range >= 256 then definitely fail.
.1c5b	d0 10		bne $1c6d			bne 	_FCCFail
.1c5d	18		clc				clc 								; work out required min distance which is
.1c5e	b5 b0		lda $b0,x			lda 	esInt3,x 					; the sum of the half width/heights
.1c60	75 b1		adc $b1,x			adc 	esInt3+1,x
.1c62	ac 08 0c	ldy $0c08			ldy 	hitRange 					; get the hit range
.1c65	f0 01		beq $1c68			beq 	_FCCNoSetRange 				; override if non zero.
.1c67	98		tya				tya
.1c68					_FCCNoSetRange:
.1c68	c5 2a		cmp $2a				cmp 	temp0 						; result is range > distance
.1c6a	f0 01		beq $1c6d			beq 	_FCCFail
.1c6c	60		rts				rts
.1c6d					_FCCFail:
.1c6d	18		clc				clc
.1c6e	60		rts				rts
.1c6f					_FCGetSpriteID:
.1c6f	8a		txa				txa
.1c70	a2 0c		ldx #$0c		ldx	#12
.1c72	20 a2 39	jsr $39a2		jsr	mainHandler
.1c75	aa		tax				tax
.1c76	b5 98		lda $98,x			lda 	esInt0,x
.1c78	30 01		bmi $1c7b			bmi 	_FCGSValue
.1c7a	60		rts				rts
.1c7b					_FCGSValue:
.1c7b	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.1c7d	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/sprites/sprite.asm

.0c09					currSprite:
>0c09							.fill 	2
.1c80					CommandSprite:
.1c80	20 82 1d	jsr $1d82			jsr 	CSCheckOnOff 				; look for TRUE/FALSE
.1c83	d0 0d		bne $1c92			bne 	_CSCheckClear
.1c85	ad 29 9f	lda $9f29			lda 	$9F29 						; sprite enable is bit 6.
.1c88	29 bf		and #$bf			and 	#$BF 						; clear it whatever
.1c8a	90 02		bcc $1c8e			bcc 	_CSNotOn 					; if CS turn on, so set it
.1c8c	09 40		ora #$40			ora 	#$40
.1c8e					_CSNotOn:
.1c8e	8d 29 9f	sta $9f29			sta 	$9F29 						; write it back in new state and exit
.1c91	60		rts				rts
.1c92					_CSCheckClear:
.1c92	a9 00		lda #$00			lda 	#0 							; no sprite currently selected.
.1c94	8d 0a 0c	sta $0c0a			sta 	currSprite+1
.1c97	b1 28		lda ($28),y			lda 	(codePtr),y 				; check for CLEAR
.1c99	c9 e7		cmp #$e7			cmp 	#TKW_CLEAR
.1c9b	d0 05		bne $1ca2			bne 	_CSCommandLoop 				; not CLEAR, go to main loop
.1c9d	20 93 1d	jsr $1d93			jsr 	CSClearSprites 				; clear all the sprites
.1ca0	c8		iny				iny 								; consume CLEAR token and exit.
.1ca1	60		rts				rts
.1ca2					_CSCommandLoop:
.1ca2	20 82 1d	jsr $1d82			jsr 	CSCheckOnOff 				; check sprite on/off
.1ca5	f0 2c		beq $1cd3			beq 	_CSSetVisibility
.1ca7	b1 28		lda ($28),y			lda 	(codePtr),y 				; get and consume character
.1ca9	c9 80		cmp #$80			cmp 	#TOK_EOL					; EOL exit.
.1cab	f0 25		beq $1cd2			beq 	_CSExit
.1cad	c8		iny				iny									; consume it
.1cae	c9 ca		cmp #$ca			cmp 	#TKW_COLON 					; colon exit
.1cb0	f0 20		beq $1cd2			beq 	_CSExit
.1cb2	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; semantic comma
.1cb4	f0 ec		beq $1ca2			beq 	_CSCommandLoop
.1cb6	c9 da		cmp #$da			cmp		#TKW_IMAGE 					; image ?
.1cb8	f0 69		beq $1d23			beq 	_CSSetImage
.1cba	c9 dc		cmp #$dc			cmp 	#TKW_FLIP 					; flip ?
.1cbc	f0 2b		beq $1ce9			beq 	_CSSetFlip
.1cbe	c9 ce		cmp #$ce			cmp 	#TKW_TO 					; to ?
.1cc0	f0 46		beq $1d08			beq 	_CSSetPos
.1cc2	88		dey				dey 								; unpick DEY
.1cc3	a9 00		lda #$00			lda 	#0 							; sprite # now at level 0
.1cc5	a2 0c		ldx #$0c		ldx	#12
.1cc7	20 a2 39	jsr $39a2		jsr	mainHandler
.1cca	a5 98		lda $98				lda 	esInt0
.1ccc	20 ad 1d	jsr $1dad			jsr 	SelectSpriteA
.1ccf	4c a2 1c	jmp $1ca2			jmp 	_CSCommandLoop
.1cd2					_CSExit:
.1cd2	60		rts				rts
.1cd3					_CSSetVisibility:
.1cd3	08		php				php 								; save carry
.1cd4	a9 06		lda #$06			lda 	#6 							; set pos to offset 6.
.1cd6	20 69 1d	jsr $1d69			jsr 	SpriteSetTarget
.1cd9	ad 23 9f	lda $9f23			lda 	$9F23 						; read it.
.1cdc	29 f3		and #$f3			and 	#$F3 						; clear depth bits, disabling it.
.1cde	28		plp				plp
.1cdf	90 02		bcc $1ce3			bcc 	_CSSetOff 					; check if carry was set
.1ce1	09 0c		ora #$0c			ora 	#$0C 						; otherwise set depth bits to 11, on top.
.1ce3					_CSSetOff:
.1ce3	8d 23 9f	sta $9f23			sta 	$9F23 						; update and loop back
.1ce6	4c a2 1c	jmp $1ca2			jmp 	_CSCommandLoop
.1ce9					_CSSetFlip:
.1ce9	a9 00		lda #$00			lda 	#0 							; image # now at level 0
.1ceb	a2 0c		ldx #$0c		ldx	#12
.1ced	20 a2 39	jsr $39a2		jsr	mainHandler
.1cf0	a9 06		lda #$06			lda 	#6 							; set sprite position to +6
.1cf2	20 69 1d	jsr $1d69			jsr 	SpriteSetTarget
.1cf5	a5 98		lda $98				lda 	esInt0 						; flip value & 3 => temp0
.1cf7	29 03		and #$03			and 	#3
.1cf9	85 2a		sta $2a				sta 	temp0
.1cfb	ad 23 9f	lda $9f23			lda 	$9F23 						; update the flip.
.1cfe	29 fc		and #$fc			and 	#$FC
.1d00	05 2a		ora $2a				ora 	temp0
.1d02	8d 23 9f	sta $9f23			sta 	$9F23
.1d05	4c a2 1c	jmp $1ca2			jmp 	_CSCommandLoop
.1d08					_CSSetPos:
.1d08	a9 00		lda #$00			lda 	#0 							; X now at level 0
.1d0a	a2 0a		ldx #$0a		ldx	#10
.1d0c	20 a2 39	jsr $39a2		jsr	mainHandler
.1d0f	a2 02		ldx #$02		ldx	#2
.1d11	20 a2 39	jsr $39a2		jsr	mainHandler
.1d14	a9 01		lda #$01			lda 	#1 							; Y now at level 1
.1d16	a2 0a		ldx #$0a		ldx	#10
.1d18	20 a2 39	jsr $39a2		jsr	mainHandler
.1d1b	a2 00		ldx #$00			ldx 	#0 							; coords at 0,1
.1d1d	20 cb 1d	jsr $1dcb			jsr 	SpriteMove 					; move it.
.1d20	4c a2 1c	jmp $1ca2			jmp 	_CSCommandLoop
.1d23					_CSSetImage:
.1d23	a9 00		lda #$00			lda 	#0 							; image # now at level 0
.1d25	a2 0c		ldx #$0c		ldx	#12
.1d27	20 a2 39	jsr $39a2		jsr	mainHandler
.1d2a	a9 00		lda #$00			lda 	#0 							; set sprite position to +0
.1d2c	20 69 1d	jsr $1d69			jsr 	SpriteSetTarget
.1d2f	a6 98		ldx $98				ldx 	esInt0 						; get image # into X
.1d31	bd 50 0c	lda $0c50,x			lda 	imageAddr2Low,x 			; copy low address in.
.1d34	8d 23 9f	sta $9f23			sta 	$9F23
.1d37	ee 20 9f	inc $9f20			inc 	$9F20 						; bump to offset 1.
.1d3a	bd 10 0c	lda $0c10,x			lda 	imageInfo,x 				; get 4/8 bit flag from info.
.1d3d	29 10		and #$10			and 	#$10
.1d3f	0a		asl a				asl 	a
.1d40	0a		asl a				asl		a
.1d41	0a		asl a				asl 	a 							; put into bit 7
.1d42	1d 90 0c	ora $0c90,x			ora 	imageAddr2High,x 			; or high address with it.
.1d45	8d 23 9f	sta $9f23			sta 	$9F23 						; write the high byte.
.1d48	a9 06		lda #$06			lda 	#6
.1d4a	20 69 1d	jsr $1d69			jsr 	SpriteSetTarget 			; set sprite on.
.1d4d	ad 23 9f	lda $9f23			lda 	$9F23
.1d50	09 0c		ora #$0c			ora 	#$0C
.1d52	8d 23 9f	sta $9f23			sta 	$9F23
.1d55	ee 20 9f	inc $9f20			inc 	$9F20 						; point to byte 7 : height/width/palette offset
.1d58	bd 10 0c	lda $0c10,x			lda 	imageInfo,x 				; get image info
.1d5b	0a		asl a				asl 	a 							; shift bits 0-3 to 4-7
.1d5c	0a		asl a				asl 	a
.1d5d	0a		asl a				asl 	a
.1d5e	0a		asl a				asl 	a
.1d5f	b0 02		bcs $1d63			bcs		_CSNoOffset 				; if bit 4 was set don't set the offset.
.1d61	09 0f		ora #$0f			ora 	#$0F 						; set palette offset and write back
.1d63					_CSNoOffset:
.1d63	8d 23 9f	sta $9f23			sta 	$9F23
.1d66	4c a2 1c	jmp $1ca2			jmp 	_CSCommandLoop
.1d69					SpriteSetTarget:
.1d69	0d 09 0c	ora $0c09			ora 	currSprite
.1d6c	8d 20 9f	sta $9f20			sta 	$9F20
.1d6f	ad 0a 0c	lda $0c0a			lda 	currSprite+1
.1d72	f0 09		beq $1d7d			beq 	_SSTNoSet
.1d74	8d 21 9f	sta $9f21			sta 	$9F21
.1d77	a9 01		lda #$01			lda 	#$01
.1d79	8d 22 9f	sta $9f22			sta 	$9F22
.1d7c	60		rts				rts
.1d7d					_SSTNoSet:
.1d7d	a2 27		ldx #$27			ldx 	#ErrorID_NoSprite
.1d7f	20 18 15	jsr $1518		jsr	errorHandler
.1d82					CSCheckOnOff:
.1d82	b1 28		lda ($28),y			lda 	(codePtr),y 				; get and consume it.
.1d84	c8		iny				iny
.1d85	c9 ab		cmp #$ab			cmp 	#TKW_FALSE					; return CC/EQ if FALSE
.1d87	18		clc				clc
.1d88	f0 08		beq $1d92			beq 	_CSCOExit
.1d8a	c9 aa		cmp #$aa			cmp 	#TKW_TRUE 					; return CS/EQ if TRUE
.1d8c	38		sec				sec 								; return NE if neither.
.1d8d	f0 03		beq $1d92			beq 	_CSCOExit
.1d8f	88		dey				dey 								; undo consume
.1d90	c9 aa		cmp #$aa			cmp 	#TKW_TRUE 					; and set NE again, DEY will change it.
.1d92					_CSCOExit:
.1d92	60		rts				rts
.1d93					CSClearSprites:
.1d93	a9 11		lda #$11			lda 	#$11 						; set address to 1FC00 with single bump
.1d95	8d 22 9f	sta $9f22			sta 	$9F22
.1d98	a9 fc		lda #$fc			lda 	#$FC
.1d9a	8d 21 9f	sta $9f21			sta 	$9F21
.1d9d	a9 00		lda #$00			lda 	#0
.1d9f	8d 20 9f	sta $9f20			sta 	$9F20
.1da2					_CSClear:
.1da2	a9 00		lda #$00			lda 	#0 							; set everything to $00
.1da4	8d 23 9f	sta $9f23			sta 	$9F23
.1da7	ad 21 9f	lda $9f21			lda 	$9F21
.1daa	d0 f6		bne $1da2			bne 	_CSClear
.1dac	60		rts				rts
.1dad					SelectSpriteA:
.1dad	85 2a		sta $2a				sta 	temp0
.1daf	a9 00		lda #$00			lda 	#0
.1db1	06 2a		asl $2a				asl		temp0 						; multiply A:esInt0 by 8
.1db3	b0 11		bcs $1dc6			bcs 	_CSBadValue 				; sprites only 0-127
.1db5	06 2a		asl $2a				asl 	temp0
.1db7	2a		rol a				rol 	a
.1db8	06 2a		asl $2a				asl 	temp0
.1dba	2a		rol a				rol 	a
.1dbb	09 fc		ora #$fc			ora 	#$FC 						; MSB of address (barring $01 upper third byte)
.1dbd	8d 0a 0c	sta $0c0a			sta 	currSprite+1
.1dc0	a5 2a		lda $2a				lda 	temp0 						; LSB of address
.1dc2	8d 09 0c	sta $0c09			sta 	currSprite+0
.1dc5	60		rts				rts
.1dc6					_CSBadValue
.1dc6	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.1dc8	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/sprites/spritemove.asm

.1dcb					SpriteMove:
.1dcb	98		tya				tya
.1dcc	48		pha				pha
.1dcd	a9 07		lda #$07			lda 	#7 									; point to height/width byte and read it.
.1dcf	20 69 1d	jsr $1d69			jsr 	SpriteSetTarget
.1dd2	ad 23 9f	lda $9f23			lda 	$9F23
.1dd5	4a		lsr a				lsr 	a 									; A now contains bits 0-1 (width) 2-3 (height)
.1dd6	4a		lsr a				lsr 	a
.1dd7	4a		lsr a				lsr 	a
.1dd8	4a		lsr a				lsr 	a
.1dd9	85 2a		sta $2a				sta 	temp0 								; save these bits so we can work out the centre.
.1ddb	a9 02		lda #$02			lda 	#2 									; point to X position.Low
.1ddd	20 69 1d	jsr $1d69			jsr 	SpriteSetTarget
.1de0	20 ef 1d	jsr $1def			jsr 	SMWritePosition 					; write X position out.
.1de3	46 2a		lsr $2a				lsr 	temp0 								; shift height bits into 0,1
.1de5	46 2a		lsr $2a				lsr 	temp0
.1de7	e8		inx				inx 										; get the y position
.1de8	20 ef 1d	jsr $1def			jsr 	SMWritePosition 					; and write that out.
.1deb	ca		dex				dex 										; fix X and quit.
.1dec	68		pla				pla
.1ded	a8		tay				tay
.1dee	60		rts				rts
.1def					SMWritePosition:
.1def	a5 2a		lda $2a				lda 	temp0 								; get dim size
.1df1	29 03		and #$03			and 	#3 									; in range into Y
.1df3	a8		tay				tay
.1df4	38		sec				sec
.1df5	b5 98		lda $98,x			lda 	esInt0,x
.1df7	f9 0b 1e	sbc $1e0b,y			sbc 	SMHalfSize,y
.1dfa	8d 23 9f	sta $9f23			sta 	$9F23
.1dfd	ee 20 9f	inc $9f20			inc 	$9F20
.1e00	b5 a0		lda $a0,x			lda 	esInt1,x
.1e02	e9 00		sbc #$00			sbc 	#0
.1e04	8d 23 9f	sta $9f23			sta 	$9F23
.1e07	ee 20 9f	inc $9f20			inc 	$9F20
.1e0a	60		rts				rts
.1e0b					SMHalfSize:
>1e0b	04 08 10 20					.byte 	4,8,16,32 							; half size each dimension.
.1e0f					SpriteReadCoordinate:
.1e0f	98		tya				tya
.1e10	48		pha				pha
.1e11	08		php				php 										; save CTR on stack
.1e12	a9 07		lda #$07			lda 	#7 									; point to height/width byte and read it.
.1e14	20 69 1d	jsr $1d69			jsr 	SpriteSetTarget
.1e17	ad 23 9f	lda $9f23			lda 	$9F23
.1e1a	4a		lsr a				lsr 	a 									; A now contains bits 0-1 (width) 2-3 (height)
.1e1b	4a		lsr a				lsr 	a
.1e1c	4a		lsr a				lsr 	a
.1e1d	4a		lsr a				lsr 	a
.1e1e	28		plp				plp 										; restore CTS
.1e1f	08		php				php
.1e20	90 02		bcc $1e24			bcc 	_SPRCNotY1 							; if it is Y, e.g. CS, shift twice more.
.1e22	4a		lsr a				lsr 	a
.1e23	4a		lsr a				lsr 	a
.1e24					_SPRCNotY1:
.1e24	29 03		and #$03			and 	#3 									; point into half width/height
.1e26	a8		tay				tay
.1e27	b9 0b 1e	lda $1e0b,y			lda 	SMHalfSize,y 						; get half size -> esInt3,x
.1e2a	95 b0		sta $b0,x			sta 	esInt3,x
.1e2c	28		plp				plp 										; CS Y CC X
.1e2d	a9 00		lda #$00			lda 	#0 									; A = 0 X A = 2 Y
.1e2f	2a		rol a				rol 	a
.1e30	2a		rol a				rol 	a
.1e31	69 02		adc #$02			adc 	#2 									; A = 2 X A = 4 Y
.1e33	20 69 1d	jsr $1d69			jsr 	SpriteSetTarget 					; set data pointer offset by that
.1e36	18		clc				clc 										; read and unfix centre.
.1e37	ad 23 9f	lda $9f23			lda 	$9F23
.1e3a	75 b0		adc $b0,x			adc 	esInt3,x
.1e3c	95 98		sta $98,x			sta 	esInt0,x
.1e3e	ee 20 9f	inc $9f20			inc 	$9F20 								; do MSB
.1e41	ad 23 9f	lda $9f23			lda 	$9F23
.1e44	69 00		adc #$00			adc 	#0
.1e46	29 0f		and #$0f			and 	#$0F 								; sign extend on bit 11.
.1e48	c9 08		cmp #$08			cmp		#$08
.1e4a	90 02		bcc $1e4e			bcc 	_SPRCNoSX
.1e4c	09 f0		ora #$f0			ora 	#$F0
.1e4e					_SPRCNoSX:
.1e4e	95 a0		sta $a0,x			sta 	esInt1,x
.1e50	68		pla				pla
.1e51	a8		tay				tay
.1e52	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/sprites/spriteutils.asm

.1e53					Sprite_GetX:
.1e53	18		clc				clc
.1e54	90 01		bcc $1e57			bcc 	SpriteGetCode
.1e56					Sprite_GetY:
.1e56	38		sec				sec
.1e57					SpriteGetCode:
.1e57	08		php				php 								; CLC : X SEC: Y, save on stack.
.1e58	48		pha				pha 								; save stack position
.1e59	20 75 1e	jsr $1e75			jsr 	GetSpriteNumber 			; get # of sprite.
.1e5c	a2 04		ldx #$04		ldx	#4
.1e5e	20 a2 39	jsr $39a2		jsr	mainHandler
.1e61	68		pla				pla
.1e62	aa		tax				tax
.1e63	28		plp				plp 								; which one ?
.1e64	20 0f 1e	jsr $1e0f			jsr 	SpriteReadCoordinate 		; read appropriate coordinate into esInt0,x
.1e67	b5 a0		lda $a0,x			lda 	esInt1,x 					; get sign bit, sign extend 16->32 bits
.1e69	29 80		and #$80			and 	#$80
.1e6b	f0 02		beq $1e6f			beq 	_SGXYPos
.1e6d	a9 ff		lda #$ff			lda 	#$FF
.1e6f					_SGXYPos:
.1e6f	95 a8		sta $a8,x			sta 	esInt2,x
.1e71	95 b0		sta $b0,x			sta 	esInt3,x
.1e73	8a		txa				txa 								; return NSP in A
.1e74	60		rts				rts
.1e75					GetSpriteNumber:
.1e75	48		pha				pha
.1e76	a2 0c		ldx #$0c		ldx	#12
.1e78	20 a2 39	jsr $39a2		jsr	mainHandler
.1e7b	68		pla				pla
.1e7c	aa		tax				tax
.1e7d	b5 98		lda $98,x			lda 	esInt0,x
.1e7f	20 ad 1d	jsr $1dad			jsr 	SelectSpriteA
.1e82	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/video/mode.asm

.0c0b					currentMode:
>0c0b							.fill 	4
.1e83					ForceMode0:
.1e83	a2 00		ldx #$00			ldx 	#0
.1e85	86 98		stx $98				stx 	esInt0 						; in case we do it.
.1e87					_FMCheck:
.1e87	bd 1a 1f	lda $1f1a,x			lda 	CMModeList,x 				; do we need to switch ?
.1e8a	dd 0b 0c	cmp $0c0b,x			cmp 	currentMode,x
.1e8d	d0 13		bne $1ea2			bne 	CMSetMode 					; different so switch.
.1e8f	e8		inx				inx
.1e90	e0 04		cpx #$04			cpx 	#4
.1e92	d0 f3		bne $1e87			bne 	_FMCheck
.1e94	60		rts				rts
.1e95					CommandMode:
.1e95	a9 00		lda #$00			lda 	#0
.1e97	a2 0a		ldx #$0a		ldx	#10
.1e99	20 a2 39	jsr $39a2		jsr	mainHandler
.1e9c	a5 b0		lda $b0				lda 	esInt3
.1e9e	29 70		and #$70			and 	#$70
.1ea0	d0 06		bne $1ea8			bne 	CMNoExpand
.1ea2					CMSetMode:
.1ea2	20 f9 1e	jsr $1ef9			jsr 	CMExpandMode
.1ea5	4c bc 1e	jmp $1ebc			jmp 	CMUpdateMode
.1ea8					CMNoExpand:
.1ea8	a5 98		lda $98				lda 	esInt0
.1eaa	8d 0b 0c	sta $0c0b			sta 	currentMode
.1ead	a5 a0		lda $a0				lda 	esInt1
.1eaf	8d 0c 0c	sta $0c0c			sta 	currentMode+1
.1eb2	a5 a8		lda $a8				lda 	esInt2
.1eb4	8d 0d 0c	sta $0c0d			sta 	currentMode+2
.1eb7	a5 b0		lda $b0				lda 	esInt3
.1eb9	8d 0e 0c	sta $0c0e			sta 	currentMode+3
.1ebc					CMUpdateMode:
.1ebc	a2 11		ldx #$11			ldx 	#$11
.1ebe					_CMClear:
.1ebe	a9 00		lda #$00			lda 	#0
.1ec0	9d 29 9f	sta $9f29,x			sta 	$9F29,X
.1ec3	ca		dex				dex
.1ec4	10 f8		bpl $1ebe			bpl 	_CMClear
.1ec6	ad 0e 0c	lda $0c0e			lda 	currentMode+3 				; get current mode
.1ec9	48		pha				pha 								; stack twice.
.1eca	48		pha				pha
.1ecb	29 70		and #$70			and 	#$70 						; isolates bits 6,5,4 (sprites,L1 enable,L0 enable)
.1ecd	09 01		ora #$01			ora 	#$01 						; turn the output on.
.1ecf	8d 29 9f	sta $9f29			sta 	$9F29 						; write to DC_VIDEO
.1ed2	68		pla				pla 								; get back
.1ed3	20 2a 1f	jsr $1f2a			jsr 	CMToScale 					; convert lower 2 bits to a scale.
.1ed6	8d 2a 9f	sta $9f2a			sta 	$9F2A 						; write to H-Scale
.1ed9	68		pla				pla 								; get back, convert bits 2,3 to a scale.
.1eda	4a		lsr a				lsr 	a
.1edb	4a		lsr a				lsr 	a
.1edc	20 2a 1f	jsr $1f2a			jsr 	CMToScale 					; convert lower 2 bits to a scale.
.1edf	8d 2b 9f	sta $9f2b			sta 	$9F2B
.1ee2	a2 00		ldx #$00			ldx 	#0 							; this is offset from $9F2D to do L0
.1ee4	ad 0b 0c	lda $0c0b			lda 	currentMode					; get L0 config byte
.1ee7	20 35 1f	jsr $1f35			jsr 	CMDecodeLayer 				; and decode layer 0
.1eea	a2 07		ldx #$07			ldx 	#7 							; when we do layer 1, offset by 7 hence starts at $9F34
.1eec	ad 0c 0c	lda $0c0c			lda 	currentMode+1
.1eef	20 35 1f	jsr $1f35			jsr 	CMDecodeLayer
.1ef2	20 68 1a	jsr $1a68			jsr 	gdModeChanged 				; check the bitmap status.
.1ef5	20 ae 18	jsr $18ae			jsr 	GResetStorage 				; reset the graphics drawing storage.
.1ef8	60		rts				rts
.1ef9					CMExpandMode:
.1ef9	a5 98		lda $98				lda 	esInt0 						; get mode number
.1efb	c9 04		cmp #$04			cmp 	#(CMEndModeList-CMModeList) >> 2
.1efd	b0 16		bcs $1f15			bcs 	_CMModeError
.1eff	0a		asl a				asl 	a 							; x 4 into X
.1f00	0a		asl a				asl 	a
.1f01	aa		tax				tax
.1f02	98		tya				tya
.1f03	48		pha				pha
.1f04	a0 00		ldy #$00			ldy 	#0
.1f06					_CMEMCopy:
.1f06	bd 1a 1f	lda $1f1a,x			lda 	CMModeList,x
.1f09	99 0b 0c	sta $0c0b,y			sta 	currentMode,y
.1f0c	e8		inx				inx
.1f0d	c8		iny				iny
.1f0e	c0 04		cpy #$04			cpy 	#4
.1f10	d0 f4		bne $1f06			bne 	_CMEMCopy
.1f12	68		pla				pla
.1f13	a8		tay				tay
.1f14	60		rts				rts
.1f15					_CMModeError:
.1f15	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.1f17	20 18 15	jsr $1518		jsr	errorHandler
.1f1a					CMModeList:
>1f1a	00 60 00 20					.dword	$20006000 					; Mode 0 which is the standard 80x60 mode, no sprites
>1f1e	00 60 00 25					.dword 	$25006000					; Mode 1 (40x30)
>1f22	00 60 00 2a					.dword 	$2A006000 					; Mode 2 (20x15)
>1f26	07 60 00 15					.dword 	$15006007 					; Mode 3 (320x200 256 colour bitmap)
.1f2a					CMEndModeList:
.1f2a					CMToScale:
.1f2a	29 03		and #$03			and 	#3 							; lower 2 bits only
.1f2c	aa		tax				tax 								; put in X for counting
.1f2d	a9 00		lda #$00			lda 	#0 							; zero result
.1f2f	38		sec				sec 								; first time rotate CS in
.1f30					_CMTSLoop:
.1f30	6a		ror a				ror 	a
.1f31	ca		dex				dex
.1f32	10 fc		bpl $1f30			bpl 	_CMTSLoop
.1f34	60		rts				rts
.1f35					CMDecodeLayer:
.1f35	48		pha				pha 								; save it.
.1f36	29 f7		and #$f7			and 	#$F7 						; all the bits except T256C which you can't set using this
.1f38	9d 2d 9f	sta $9f2d,x			sta 	$9F2D,X
.1f3b	68		pla				pla 								; get it back
.1f3c	29 08		and #$08			and 	#$08 						; the missing bit sets the tile size.
.1f3e	f0 02		beq $1f42			beq 	_CMDLNotSet
.1f40	a9 03		lda #$03			lda 	#$03 						; which sets both lower bits, they're square.
.1f42					_CMDLNotSet:
.1f42	e0 00		cpx #$00			cpx 	#0
.1f44	f0 06		beq $1f4c			beq 	_CMDLayer0 					; layer 1 has standard defaults for tile table, e.g. $7C
.1f46	09 7c		ora #$7c			ora 	#$7C 						; so set those bits and write it out.
.1f48	9d 2f 9f	sta $9f2f,x			sta 	$9F2F,X
.1f4b	60		rts				rts
.1f4c					_CMDLayer0:
.1f4c	09 80		ora #$80			ora 	#$80 						; tile base is $80
.1f4e	9d 2f 9f	sta $9f2f,x			sta 	$9F2F,X
.1f51	60		rts				rts
.1f52					CommandClg:
.1f52	20 bc 1a	jsr $1abc			jsr 	gdClearGraphics
.1f55	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/video/palette.asm

.1f56					CommandPalette:
.1f56	a9 00		lda #$00			lda 	#0
.1f58	a2 0c		ldx #$0c		ldx	#12
.1f5a	20 a2 39	jsr $39a2		jsr	mainHandler
.1f5d	a2 02		ldx #$02		ldx	#2
.1f5f	20 a2 39	jsr $39a2		jsr	mainHandler
.1f62	a9 01		lda #$01			lda 	#1
.1f64	a2 08		ldx #$08		ldx	#8
.1f66	20 a2 39	jsr $39a2		jsr	mainHandler
.1f69	a5 98		lda $98				lda 	esInt0 					; get palette #
.1f6b	20 7b 1f	jsr $1f7b			jsr 	PointToPaletteA			; point to palette register
.1f6e	a5 99		lda $99				lda 	esInt0+1
.1f70	8d 23 9f	sta $9f23			sta 	$9F23
.1f73	a5 a1		lda $a1				lda 	esInt1+1
.1f75	29 0f		and #$0f			and 	#$0F
.1f77	8d 23 9f	sta $9f23			sta 	$9F23
.1f7a	60		rts				rts
.1f7b					PointToPaletteA:
.1f7b	0a		asl a				asl 	a 							; x 2 -> LSB
.1f7c	8d 20 9f	sta $9f20			sta 	$9F20
.1f7f	a9 00		lda #$00			lda 	#0 							; carry into A
.1f81	2a		rol a				rol 	a
.1f82	09 fa		ora #$fa			ora 	#$FA 						; make correct address
.1f84	8d 21 9f	sta $9f21			sta 	$9F21
.1f87	a9 11		lda #$11			lda 	#$11 						; $01 and single step => $9F22
.1f89	8d 22 9f	sta $9f22			sta 	$9F22
.1f8c	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/video/vload.asm

.1f8d					Command_VLoad:
.1f8d	a9 00		lda #$00			lda 	#0 								; string which is the file name
.1f8f	a2 0e		ldx #$0e		ldx	#14
.1f91	20 a2 39	jsr $39a2		jsr	mainHandler
.1f94	a2 01		ldx #$01			ldx 	#1 								; load address at +1.
.1f96	a5 35		lda $35				lda 	lowMemory 						; load it into lowMemory (for now ?)
.1f98	95 98		sta $98,x			sta 	esInt0,x
.1f9a	a5 36		lda $36				lda 	lowMemory+1
.1f9c	95 a0		sta $a0,x			sta 	esInt1,x
.1f9e	a9 00		lda #$00			lda 	#0
.1fa0	95 a8		sta $a8,x			sta 	esInt2,x
.1fa2	95 b0		sta $b0,x			sta 	esInt3,x
.1fa4	a2 0e		ldx #$0e		ldx	#14
.1fa6	20 f6 14	jsr $14f6		jsr	deviceHandler
.1fa9	a5 99		lda $99				lda 	esInt0+1 						; (temp0) is where we are decoding from.
.1fab	85 2a		sta $2a				sta 	temp0
.1fad	a5 a1		lda $a1				lda 	esInt1+1
.1faf	85 2b		sta $2b				sta 	temp0+1
.1fb1	20 2d 20	jsr $202d			jsr 	LoadVRAMFile 					; load the VRAM file in.
.1fb4	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/video/vpeekpoke.asm

.1fb5					Command_VPoke:
.1fb5	38		sec				sec 						; one byte , CS
.1fb6	b0 01		bcs $1fb9			bcs 	CmdVideoWrite
.1fb8					Command_VDoke:
.1fb8	18		clc				clc 						; two bytes, CC
.1fb9					CmdVideoWrite:
.1fb9	08		php				php 						; save one or two btes
.1fba	a9 00		lda #$00			lda 	#0  				; get address and value into levels 0,1
.1fbc	a2 0a		ldx #$0a		ldx	#10
.1fbe	20 a2 39	jsr $39a2		jsr	mainHandler
.1fc1	a2 02		ldx #$02		ldx	#2
.1fc3	20 a2 39	jsr $39a2		jsr	mainHandler
.1fc6	a9 01		lda #$01			lda 	#1
.1fc8	a2 0a		ldx #$0a		ldx	#10
.1fca	20 a2 39	jsr $39a2		jsr	mainHandler
.1fcd	a2 00		ldx #$00			ldx 	#0
.1fcf	20 e0 1f	jsr $1fe0			jsr 	SetUpTOSVRamAddress ; copy target address to VRAM address registers
.1fd2	a5 99		lda $99				lda 	esInt0+1 			; get MSB of write value
.1fd4	8d 23 9f	sta $9f23			sta 	$9F23
.1fd7	28		plp				plp 						; if it was Poke then exit
.1fd8	b0 05		bcs $1fdf			bcs 	_CVWExit
.1fda	a5 a1		lda $a1				lda 	esInt1+1 			; doke, write the MSB.
.1fdc	8d 23 9f	sta $9f23			sta 	$9F23
.1fdf					_CVWExit:
.1fdf	60		rts				rts
.1fe0					SetUpTOSVRamAddress:
.1fe0	b5 a8		lda $a8,x			lda 	esInt2,x 			; check range of address, data to $FFFF
.1fe2	29 fe		and #$fe			and 	#$FE
.1fe4	15 b0		ora $b0,x			ora 	esInt3,x
.1fe6	d0 14		bne $1ffc			bne 	CVWValue
.1fe8	b5 98		lda $98,x			lda 	esInt0,x			; set address up
.1fea	8d 20 9f	sta $9f20			sta 	$9F20
.1fed	b5 a0		lda $a0,x			lda 	esInt1,x
.1fef	8d 21 9f	sta $9f21			sta	 	$9F21
.1ff2	b5 a8		lda $a8,x			lda 	esInt2,x
.1ff4	29 01		and #$01			and 	#1
.1ff6	09 10		ora #$10			ora 	#$10 				; step 1.
.1ff8	8d 22 9f	sta $9f22			sta 	$9F22
.1ffb	60		rts				rts
.1ffc					CVWValue:
.1ffc	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.1ffe	20 18 15	jsr $1518		jsr	errorHandler
.2001					Command_VPeek:
.2001	38		sec				sec 						; one byte , CS
.2002	b0 01		bcs $2005			bcs 	CmdVideoRead
.2004					Command_VDeek:
.2004	18		clc				clc 						; two bytes, CC
.2005					CmdVideoRead:
.2005	08		php				php 						; save action on stack.
.2006	48		pha				pha 						; save stack position
.2007	a2 0a		ldx #$0a		ldx	#10
.2009	20 a2 39	jsr $39a2		jsr	mainHandler
.200c	a2 04		ldx #$04		ldx	#4
.200e	20 a2 39	jsr $39a2		jsr	mainHandler
.2011	68		pla				pla
.2012	aa		tax				tax
.2013	20 e0 1f	jsr $1fe0			jsr 	SetUpTOSVRamAddress	; set up VRAM address.
.2016	a9 00		lda #$00			lda 	#0 					; zero upper 3 bytes
.2018	95 a0		sta $a0,x			sta 	esInt1,x
.201a	95 a8		sta $a8,x			sta 	esInt2,x
.201c	95 b0		sta $b0,x			sta 	esInt3,x
.201e	ad 23 9f	lda $9f23			lda 	$9F23				; copy 1st byte
.2021	95 98		sta $98,x			sta 	esInt0,x
.2023	28		plp				plp 						; check if DOKE (carry was clear)
.2024	b0 05		bcs $202b			bcs 	_CVRExit
.2026	ad 23 9f	lda $9f23			lda 	$9F23 				; copy 2nd byte
.2029	95 a0		sta $a0,x			sta 	esInt1,x
.202b					_CVRExit:
.202b	8a		txa				txa 						; return X position.
.202c	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/video/vramprocess.asm

.0c0f					compressMode:
>0c0f							.fill 	1
.0c10					imageInfo:
>0c10							.fill 	X16MaxImages
.0c50					imageAddr2Low:
>0c50							.fill  	X16MaxImages
.0c90					imageAddr2High:
>0c90							.fill  	X16MaxImages
.202d					LoadVRAMFile:
.202d	8a		txa				txa
.202e	48		pha				pha
.202f	98		tya				tya
.2030	48		pha				pha
.2031					_LVRLoop:
.2031	20 0d 21	jsr $210d			jsr 	LVFGet 						; get the next (never access direct)
.2034	c9 80		cmp #$80			cmp 	#$80 						; exit ?
.2036	f0 42		beq $207a			beq 	_LVRExit
.2038	b0 5c		bcs $2096			bcs 	_LVRLoad 					; load data in ?
.203a	c9 08		cmp #$08			cmp 	#$08 						; is it set address ?
.203c	90 11		bcc $204f			bcc 	_LVRSetAddress
.203e	c9 0f		cmp #$0f			cmp 	#$0F 						; is it define palette
.2040	f0 3d		beq $207f			beq 	_LVRSetPalette
.2042	c9 10		cmp #$10			cmp 	#$10 						; is it set compression type ?
.2044	90 2d		bcc $2073			bcc 	_LVRSetCompress
.2046	c9 64		cmp #$64			cmp 	#$64 						; is it set sprite type.
.2048	90 60		bcc $20aa			bcc 	_LVRSetSprite
.204a	a2 01		ldx #$01			ldx 	#ErrorID_missing
.204c	20 18 15	jsr $1518		jsr	errorHandler
.204f					_LVRSetAddress:
.204f	85 2d		sta $2d				sta 	temp1+1 					; 24 bit in temp1+1/temp1/A
.2051	20 0d 21	jsr $210d			jsr 	LVFGet
.2054	85 2c		sta $2c				sta 	temp1
.2056	a9 00		lda #$00			lda 	#0
.2058	46 2d		lsr $2d				lsr 	temp1+1 					; / 2 twice.
.205a	66 2c		ror $2c				ror 	temp1
.205c	6a		ror a				ror		a
.205d	46 2d		lsr $2d				lsr 	temp1+1
.205f	66 2c		ror $2c				ror 	temp1
.2061	6a		ror a				ror		a
.2062	8d 20 9f	sta $9f20			sta 	$9F20 						; set write address with +1 increment
.2065	a5 2c		lda $2c				lda 	temp1
.2067	8d 21 9f	sta $9f21			sta 	$9F21
.206a	a5 2d		lda $2d				lda 	temp1+1
.206c	09 10		ora #$10			ora 	#$10
.206e	8d 22 9f	sta $9f22			sta 	$9F22
.2071	d0 be		bne $2031			bne 	_LVRLoop
.2073					_LVRSetCompress:
.2073	29 07		and #$07			and 	#7
.2075	8d 0f 0c	sta $0c0f			sta 	compressMode
.2078	10 b7		bpl $2031			bpl 	_LVRLoop
.207a					_LVRExit:
.207a	68		pla				pla
.207b	a8		tay				tay
.207c	68		pla				pla
.207d	aa		tax				tax
.207e	60		rts				rts
.207f					_LVRSetPalette:
.207f	20 0d 21	jsr $210d			jsr 	LVFGet 						; get palette id.
.2082	20 7b 1f	jsr $1f7b			jsr 	PointToPaletteA 			; in palette.asm
.2085	20 0d 21	jsr $210d			jsr 	LVFGet 						; copy 12 bit palette data in.
.2088	8d 23 9f	sta $9f23			sta 	$9F23
.208b	20 0d 21	jsr $210d			jsr 	LVFGet
.208e	29 0f		and #$0f			and 	#$0F
.2090	8d 23 9f	sta $9f23			sta 	$9F23
.2093	4c 31 20	jmp $2031			jmp 	_LVRLoop
.2096					_LVRLoad:
.2096	ae 0f 0c	ldx $0c0f			ldx 	compressMode
.2099	d0 55		bne $20f0			bne 	_LVRNotMode0
.209b	29 7f		and #$7f			and 	#$7F 						; count in X (is > 0)
.209d					_LVRLCopyX:
.209d	aa		tax				tax
.209e					_LVRLCopy:
.209e	20 0d 21	jsr $210d			jsr 	LVFGet 						; write to data.
.20a1	8d 23 9f	sta $9f23			sta 	$9F23
.20a4	ca		dex				dex
.20a5	d0 f7		bne $209e			bne 	_LVRLCopy
.20a7	4c 31 20	jmp $2031			jmp 	_LVRLoop
.20aa					_LVRSetSprite:
.20aa	48		pha				pha 								; save on stack
.20ab	20 0d 21	jsr $210d			jsr 	LVFGet 						; get the sprite number into X
.20ae	aa		tax				tax
.20af	c9 40		cmp #$40			cmp 	#X16MaxImages				; too high ?
.20b1	b0 38		bcs $20eb			bcs 	_LVRSSValue
.20b3	68		pla				pla 								; restore the data held in the first byte
.20b4	9d 10 0c	sta $0c10,x			sta 	imageInfo,x 				; and write into the sprite image table.
.20b7					_LVRAlignVRAM:
.20b7	ad 20 9f	lda $9f20			lda 	$9F20 						; check VRAM on 32 byte boundary
.20ba	29 1f		and #$1f			and 	#$1F
.20bc	f0 07		beq $20c5			beq 	_LVRAligned
.20be	a9 00		lda #$00			lda 	#$00
.20c0	8d 23 9f	sta $9f23			sta 	$9F23
.20c3	f0 f2		beq $20b7			beq 	_LVRAlignVRAM
.20c5					_LVRAligned:
.20c5	ad 22 9f	lda $9f22			lda 	$9F22 						; put address/32 in sprite image table
.20c8	4a		lsr a				lsr 	a 	 						; first halve into temp1
.20c9	ad 21 9f	lda $9f21			lda 	$9F21
.20cc	6a		ror a				ror 	a
.20cd	85 2d		sta $2d				sta 	temp1+1
.20cf	ad 20 9f	lda $9f20			lda 	$9F20
.20d2	6a		ror a				ror 	a
.20d3	85 2c		sta $2c				sta 	temp1
.20d5	a0 04		ldy #$04			ldy 	#4 							; divide it by 16 in temp1
.20d7					_LVRShift:
.20d7	46 2d		lsr $2d				lsr 	temp1+1
.20d9	66 2c		ror $2c				ror 	temp1
.20db	88		dey				dey
.20dc	d0 f9		bne $20d7			bne 	_LVRShift
.20de	a5 2d		lda $2d				lda 	temp1+1 					; copy result.
.20e0	9d 90 0c	sta $0c90,x			sta 	imageAddr2High,x
.20e3	a5 2c		lda $2c				lda 	temp1
.20e5	9d 50 0c	sta $0c50,x			sta 	imageAddr2Low,x
.20e8	4c 31 20	jmp $2031			jmp 	_LVRLoop
.20eb					_LVRSSValue:
.20eb	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.20ed	20 18 15	jsr $1518		jsr	errorHandler
.20f0					_LVRNotMode0:
.20f0	e0 01		cpx #$01			cpx 	#1
.20f2	d0 15		bne $2109			bne 	_LVRNotMode1
.20f4	29 7f		and #$7f			and 	#$7F 						; drop bit 7
.20f6	c9 40		cmp #$40			cmp 	#$40
.20f8	90 a3		bcc $209d			bcc 	_LVRLCopyX 					; 00-3F use mode 0's copying code.
.20fa					_LVRRLEGroup:
.20fa	29 3f		and #$3f			and 	#$3F
.20fc	aa		tax				tax
.20fd	20 0d 21	jsr $210d			jsr 	LVFGet
.2100					_LVRLEGroupLoop:
.2100	8d 23 9f	sta $9f23			sta 	$9F23
.2103	ca		dex				dex
.2104	d0 fa		bne $2100			bne 	_LVRLEGroupLoop
.2106	4c 31 20	jmp $2031			jmp 	_LVRLoop
.2109					_LVRNotMode1:
>2109	db						.byte 	$DB
.210a	4c 09 21	jmp $2109			jmp 	_LVRNotMode1
.210d	84 32		sty $32		LVFGet:	sty 	tempShort
.210f	a0 00		ldy #$00			ldy 	#0
.2111	b1 2a		lda ($2a),y			lda 	(temp0),y
.2113	a4 32		ldy $32				ldy	 	tempShort
.2115	e6 2a		inc $2a				inc 	temp0
.2117	d0 02		bne $211b			bne 	_LVFGExit
.2119	e6 2b		inc $2b				inc 	temp0+1
.211b					_LVFGExit:
.211b	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Return to file: basic.asm

.211c					section_end_extension:
.211c					section_start_floatingpoint:

;******  Processing file: floatingpoint/floatingpoint.asm

.211c					floatingpointHandler:
.211c	a2 03		ldx #$03			ldx 	#ErrorID_NoModule
.211e	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: basic.asm

.2121					section_end_floatingpoint:
.2121					section_start_interaction:

;******  Processing file: interaction/interaction.asm


;******  Processing file: interaction/cold.asm

.2121					ColdStartEntry:
.2121	a2 ff		ldx #$ff			ldx 	#$FF
.2123	9a		txs				txs
.2124	20 ad 21	jsr $21ad			jsr 	ForceStandardMode
.2127	a2 04		ldx #$04		ldx	#4
.2129	20 f6 14	jsr $14f6		jsr	deviceHandler
.212c	a0 ff		ldy #$ff			ldy 	#255
.212e					_CSBanner:
.212e	c8		iny				iny
.212f	b9 55 21	lda $2155,y			lda 	Intro,y
.2132	f0 14		beq $2148			beq 	_CSStart
.2134	c9 08		cmp #$08			cmp 	#8
.2136	90 08		bcc $2140			bcc 	_CSInk
.2138	a2 16		ldx #$16		ldx	#22
.213a	20 f6 14	jsr $14f6		jsr	deviceHandler
.213d	4c 2e 21	jmp $212e			jmp 	_CSBanner
.2140					_CSInk:
.2140	a2 08		ldx #$08		ldx	#8
.2142	20 f6 14	jsr $14f6		jsr	deviceHandler
.2145	4c 2e 21	jmp $212e			jmp 	_CSBanner
.2148					_CSStart:
.2148	a2 16		ldx #$16		ldx	#22
.214a	20 a2 39	jsr $39a2		jsr	mainHandler
.214d	a2 06		ldx #$06		ldx	#6
.214f	20 a2 39	jsr $39a2		jsr	mainHandler
.2152	4c 6d 22	jmp $226d			jmp 	WarmStartEntry
>2155	06 2a 2a 2a 20 36 35 30		Intro:	.text 	6,"*** 6502 Extended BASIC ***",13,13
>215d	32 20 45 78 74 65 6e 64 65 64 20 42 41 53 49 43
>216d	20 2a 2a 2a 0d 0d
>2173	03 57 72 69 74 74 65 6e				.text 	3,"Written by Paul Robson 2021",13,13
>217b	20 62 79 20 50 61 75 6c 20 52 6f 62 73 6f 6e 20
>218b	32 30 32 31 0d 0d
>2191	02 42 61 73 69 63 20				.text 	2,"Basic "
>2198	30 2e 32 30					.text "0.20"
>219c	20 28						.text 	" ("
>219e	33 30 2d 4d 61 72 2d 32				.text "30-Mar-2021"
>21a6	30 32 31
>21a9	29 0d 0d 00					.text 	")",13,13,0
.21ad					ForceStandardMode:
.21ad	a9 fe		lda #$fe			lda 	#$FE
.21af	20 69 18	jsr $1869		jsr	extensionHandler
.21b2	60		rts				rts

;******  Return to file: interaction/interaction.asm


;******  Processing file: interaction/delete.asm

.21b3					DeleteLine:
.21b3	ad c8 0a	lda $0ac8			lda 	basePage 					; copy program base to temp0
.21b6	85 2a		sta $2a				sta 	temp0
.21b8	ad c9 0a	lda $0ac9			lda 	basePage+1
.21bb	85 2b		sta $2b				sta 	temp0+1
.21bd	a0 01		ldy #$01	_DLLoop:ldy 	#1 							; see if found line ?
.21bf	a5 98		lda $98				lda 	esInt0 						; e.g. the linenumbers match
.21c1	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.21c3	d0 07		bne $21cc			bne 	_DLNext
.21c5	c8		iny				iny
.21c6	a5 a0		lda $a0				lda 	esInt1
.21c8	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.21ca	f0 06		beq $21d2			beq 	_DLFound
.21cc	20 f0 21	jsr $21f0	_DLNext:jsr 	IAdvanceTemp0 				; shift temp0 forward, return Z flag set if end.
.21cf	d0 ec		bne $21bd			bne 	_DLLoop
.21d1	60		rts				rts
.21d2					_DLFound:
.21d2	a0 00		ldy #$00			ldy 	#0 							; this is the line to cut, so this offset is the bytes to remove
.21d4	b1 2a		lda ($2a),y			lda 	(temp0),y
.21d6	a8		tay				tay 								; so we copy from (temp0),y
.21d7	a2 00		ldx #$00			ldx 	#0  						; to (temp0,x)
.21d9					_DLCopyDown:
.21d9	b1 2a		lda ($2a),y			lda 	(temp0),y 					; copy one byte.
.21db	81 2a		sta ($2a,x)			sta 	(temp0,x)
.21dd	e6 2a		inc $2a				inc 	temp0 						; advance pointer
.21df	d0 02		bne $21e3			bne 	_DLNoCarry
.21e1	e6 2b		inc $2b				inc 	temp0+1
.21e3					_DLNoCarry:
.21e3	a5 2a		lda $2a				lda 	temp0 						; until hit low memory
.21e5	c5 35		cmp $35				cmp 	lowMemory 					; which is comfortably after End Program.
.21e7	d0 f0		bne $21d9			bne 	_DLCopyDown
.21e9	a5 2b		lda $2b				lda 	temp0+1
.21eb	c5 36		cmp $36				cmp 	lowMemory+1
.21ed	d0 ea		bne $21d9			bne 	_DLCopyDown
.21ef	60		rts				rts
.21f0					IAdvanceTemp0:
.21f0	84 32		sty $32				sty 	tempShort
.21f2	18		clc				clc
.21f3	a0 00		ldy #$00			ldy 	#0 							; get offset
.21f5	b1 2a		lda ($2a),y			lda 	(temp0),y 					; add to temp0
.21f7	65 2a		adc $2a				adc 	temp0
.21f9	85 2a		sta $2a				sta 	temp0
.21fb	90 02		bcc $21ff			bcc 	_IATNoCarry
.21fd	e6 2b		inc $2b				inc 	temp0+1
.21ff					_IATNoCarry:
.21ff	b1 2a		lda ($2a),y			lda 	(temp0),y
.2201	a4 32		ldy $32				ldy 	tempShort
.2203	c9 00		cmp #$00			cmp		#0 							; Z set if program end.
.2205	60		rts				rts

;******  Return to file: interaction/interaction.asm


;******  Processing file: interaction/insert.asm

.2206					InsertLine:
.2206	ad c8 0a	lda $0ac8			lda 	basePage 					; copy program base to temp0
.2209	85 2a		sta $2a				sta 	temp0
.220b	ad c9 0a	lda $0ac9			lda 	basePage+1
.220e	85 2b		sta $2b				sta 	temp0+1
.2210					_ILLoop:
.2210	a0 01		ldy #$01			ldy 	#1
.2212	b1 2a		lda ($2a),y			lda 	(temp0),y
.2214	c5 98		cmp $98				cmp 	esInt0
.2216	c8		iny				iny
.2217	b1 2a		lda ($2a),y			lda 	(temp0),y
.2219	e5 a0		sbc $a0				sbc 	esInt1
.221b	b0 05		bcs $2222			bcs 	_ILFound 					; we know it cannot be equal, it would have been deleted
.221d	20 f0 21	jsr $21f0			jsr 	IAdvanceTemp0 				; shift temp0 forward, return Z flag set if end.
.2220	d0 ee		bne $2210			bne 	_ILLoop
.2222					_ILFound:
.2222	a5 35		lda $35				lda 	lowMemory 					; shift lowMemory up to make space for it.
.2224	85 2c		sta $2c				sta 	temp1             			; this pointer goes backwards
.2226	a5 36		lda $36				lda 	lowMemory+1
.2228	85 2d		sta $2d				sta 	temp1+1
.222a	ad 0d 0e	lda $0e0d			lda 	tokenBufferIndex 			; space to make in Y, 0 in X.
.222d	18		clc				clc 								; add 3 for the line number and offset.
.222e	69 03		adc #$03			adc 	#3 							; tokenbuffer already has $80
.2230	a8		tay				tay
.2231	a2 00		ldx #$00			ldx 	#0
.2233	a1 2c		lda ($2c,x)	_ILMove:lda 	(temp1,x)					; shift up
.2235	91 2c		sta ($2c),y			sta 	(temp1),y
.2237	a5 2c		lda $2c				lda 	temp1 						; check reached the insert point ?
.2239	c5 2a		cmp $2a				cmp 	temp0
.223b	d0 06		bne $2243			bne 	_ILMNext
.223d	a5 2d		lda $2d				lda 	temp1+1
.223f	c5 2b		cmp $2b				cmp 	temp0+1
.2241	f0 0b		beq $224e			beq 	_ILMCopy
.2243					_ILMNext:
.2243	a5 2c		lda $2c				lda 	temp1
.2245	d0 02		bne $2249			bne 	_ILNoBorrow
.2247	c6 2d		dec $2d				dec 	temp1+1
.2249					_ILNoBorrow:
.2249	c6 2c		dec $2c				dec 	temp1
.224b	4c 33 22	jmp $2233			jmp 	_ILMove 					; and go round again
.224e					_ILMCopy:
.224e	98		tya				tya 								; Y is the offset of the new line.
.224f	81 2a		sta ($2a,x)			sta 	(temp0,x)					; X = 0 still.
.2251	a0 01		ldy #$01			ldy 	#1 							; copy in line number.
.2253	a5 98		lda $98				lda 	esInt0
.2255	91 2a		sta ($2a),y			sta 	(temp0),y
.2257	c8		iny				iny
.2258	a5 a0		lda $a0				lda 	esInt1
.225a	91 2a		sta ($2a),y			sta 	(temp0),y
.225c	a0 00		ldy #$00			ldy 	#0 							; copy the body in
.225e					_ILMCopy2:
.225e	b1 28		lda ($28),y			lda 	(codePtr),y
.2260	c8		iny				iny
.2261	c8		iny				iny
.2262	c8		iny				iny
.2263	91 2a		sta ($2a),y			sta 	(temp0),y
.2265	88		dey				dey
.2266	88		dey				dey
.2267	cc 0d 0e	cpy $0e0d			cpy 	tokenBufferIndex
.226a	d0 f2		bne $225e			bne 	_ILMCopy2
.226c	60		rts				rts

;******  Return to file: interaction/interaction.asm


;******  Processing file: interaction/warm.asm

.226d					WarmStartEntry:
.226d	a2 ff		ldx #$ff			ldx 	#$FF
.226f	9a		txs				txs
.2270	20 ad 21	jsr $21ad			jsr 	ForceStandardMode
.2273	a9 02		lda #$02			lda 	#2							; green text.
.2275	a2 08		ldx #$08		ldx	#8
.2277	20 f6 14	jsr $14f6		jsr	deviceHandler
.227a	a2 0c		ldx #$0c		ldx	#12
.227c	20 f6 14	jsr $14f6		jsr	deviceHandler
.227f	a5 2a		lda $2a				lda 	temp0	 					; copy temp0 to codePtr
.2281	85 28		sta $28				sta 	codePtr
.2283	a5 2b		lda $2b				lda 	temp0+1
.2285	85 29		sta $29				sta 	codePtr+1
.2287	a2 06		ldx #$06		ldx	#6
.2289	20 f6 14	jsr $14f6		jsr	deviceHandler
.228c	a2 08		ldx #$08		ldx	#8
.228e	20 be 44	jsr $44be		jsr	tokeniserHandler
.2291	c9 00		cmp #$00			cmp 	#0
.2293	f0 25		beq $22ba			beq 	WSEError 					; failed (tokenise can fail if it doesn't know a character e.g. |)
.2295	a9 0a		lda #$0a			lda 	#(tokenHeader) & $FF
.2297	85 28		sta $28				sta 	codePtr
.2299	a9 0d		lda #$0d			lda 	#(tokenHeader) >> 8
.229b	85 29		sta $29				sta 	1+(codePtr)
.229d	ad 0d 0d	lda $0d0d			lda 	tokenBuffer 				; is it a blank line, go get another line.
.22a0	c9 80		cmp #$80			cmp 	#$80
.22a2	f0 c9		beq $226d			beq 	WarmStartEntry
.22a4	29 c0		and #$c0			and 	#$C0						; does it start with a number
.22a6	c9 40		cmp #$40			cmp 	#$40 						; e.g. is it 01xx xxxx
.22a8	f0 15		beq $22bf			beq 	HasLineNumber
.22aa	a9 00		lda #$00			lda 	#0 							; zero the token header, so it will look like a
.22ac	8d 0a 0d	sta $0d0a			sta 	tokenHeader 				; fake program line.
.22af	8d 0b 0d	sta $0d0b			sta 	tokenHeader+1
.22b2	8d 0c 0d	sta $0d0c			sta 	tokenHeader+2
.22b5	a2 18		ldx #$18		ldx	#24
.22b7	20 a2 39	jsr $39a2		jsr	mainHandler
.22ba					WSEError:
.22ba	a2 1e		ldx #$1e			ldx 	#ErrorID_Tokenise
.22bc	20 18 15	jsr $1518		jsr	errorHandler
.22bf					HasLineNumber:
.22bf	a0 03		ldy #$03			ldy 	#3 							; get line number
.22c1	a9 00		lda #$00			lda 	#0
.22c3	a2 0a		ldx #$0a		ldx	#10
.22c5	20 a2 39	jsr $39a2		jsr	mainHandler
.22c8	a5 a8		lda $a8				lda 	esInt2		 				; check in range (only 2 bytes)
.22ca	05 b0		ora $b0				ora 	esInt3
.22cc	d0 ec		bne $22ba			bne 	WSEError
.22ce	98		tya				tya 								; make codePtr point to code after the line number.
.22cf	18		clc				clc 								; by skipping over the tokenised number.
.22d0	65 28		adc $28				adc 	codePtr
.22d2	85 28		sta $28				sta 	codePtr
.22d4	90 02		bcc $22d8			bcc		_HLNNoCarry
.22d6	e6 29		inc $29				inc 	codePtr+1
.22d8					_HLNNoCarry:
.22d8	98		tya				tya 								; subtract that offset from the code buffer index
.22d9	38		sec				sec
.22da	49 ff		eor #$ff			eor 	#$FF
.22dc	6d 0d 0e	adc $0e0d			adc 	tokenBufferIndex
.22df	18		clc				clc 								; add space allowing for header & $80 trailer
.22e0	69 04		adc #$04			adc 	#4
.22e2	8d 0d 0e	sta $0e0d			sta 	tokenBufferIndex 			; this is the number of bytes occupied.
.22e5	20 b3 21	jsr $21b3			jsr 	DeleteLine 					; always delete the line, it's deleted and reinserted.
.22e8					_HLNNoDelete:
.22e8	ad 0d 0e	lda $0e0d			lda 	tokenBufferIndex 			; if line was empty, then don't insert
.22eb	c9 01		cmp #$01			cmp 	#1 							; (the one character is the EOL marker)
.22ed	f0 0c		beq $22fb			beq 	_HLMEditDone
.22ef	a5 36		lda $36				lda 	lowMemory+1 				; is there space, if we allow a little bit of
.22f1	18		clc				clc 								; workspace (1k)
.22f2	69 04		adc #$04			adc 	#4 							; e.g. 4 x 256
.22f4	c5 34		cmp $34				cmp 	highMemory+1
.22f6	b0 0b		bcs $2303			bcs 	_HLMMemory 					; nope, won't allowit.
.22f8	20 06 22	jsr $2206			jsr 	InsertLine 					; insert the line in
.22fb					_HLMEditDone:
.22fb	a2 06		ldx #$06		ldx	#6
.22fd	20 a2 39	jsr $39a2		jsr	mainHandler
.2300	4c 6d 22	jmp $226d			jmp 	WarmStartEntry
.2303					_HLMMemory:
.2303	a2 22		ldx #$22			ldx 	#ErrorID_Memory
.2305	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: interaction/interaction.asm

.2308					interactionHandler:
.2308	7c 0b 23	jmp ($230b,x)			jmp 	(interactionVectors,x)
.230b					interactionVectors:
>230b	11 23					.word _DummyControlHandler ; index 0
>230d	21 21					.word ColdStartEntry       ; index 2
>230f	6d 22					.word WarmStartEntry       ; index 4
.2311					_DummyControlHandler:
.2311	60		rts			rts

;******  Return to file: basic.asm

.2312					section_end_interaction:
.2312					section_start_main:

;******  Processing file: main/main.asm


;******  Processing file: main/commands/compat/readdata.asm

.0cd0					dataPtr:
>0cd0							.fill 	2
.0cd2					dataIndex:
>0cd2							.fill 	1
.2312					CommandRead:
.2312	a2 00		ldx #$00			ldx 	#0 							; get a reference to a variable in stack:0
.2314	20 55 32	jsr $3255			jsr 	EvaluateReference
.2317	20 58 23	jsr $2358			jsr 	SwapDPCP 					; use the data pointer.
.231a	b1 28		lda ($28),y			lda 	(codePtr),y 				; see where it is.
.231c	c8		iny				iny
.231d	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; if it is on a comma, it is in data.
.231f	f0 07		beq $2328			beq 	_CRInData
.2321	88		dey				dey
.2322	a9 d9		lda #$d9			lda 	#TKW_DATA 					; scan forward to a DATA statement.
.2324	aa		tax				tax
.2325	20 59 2a	jsr $2a59			jsr 	ScanForward
.2328					_CRInData:
.2328	a2 01		ldx #$01			ldx 	#1 							; evaluate a value at Stack,1
.232a	20 fd 31	jsr $31fd			jsr 	Evaluate
.232d	ca		dex				dex 								; and write the value.
.232e	20 ac 25	jsr $25ac			jsr 	WriteValue
.2331	20 58 23	jsr $2358			jsr 	SwapDPCP 					; get the code pointer back.
.2334	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows ?
.2336	c8		iny				iny
.2337	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; if comma, another variable
.2339	f0 d7		beq $2312			beq 	CommandRead
.233b	88		dey				dey
.233c	60		rts				rts
.233d					CommandData:
.233d	a9 80		lda #$80			lda 	#TOK_EOL 					; go forward to end of line or colon.
.233f	a2 ca		ldx #$ca			ldx 	#TKW_COLON
.2341	20 59 2a	jsr $2a59			jsr 	ScanForward
.2344	88		dey				dey 								; ending on EOL is a scan issue, as it increments
.2345	60		rts				rts
.2346					CommandRestore:
.2346	ad c8 0a	lda $0ac8			lda 	basePage
.2349	8d d0 0c	sta $0cd0			sta 	dataPtr
.234c	ad c9 0a	lda $0ac9			lda 	basePage+1
.234f	8d d1 0c	sta $0cd1			sta 	dataPtr+1
.2352	a9 03		lda #$03			lda 	#3
.2354	8d d2 0c	sta $0cd2			sta 	dataIndex
.2357	60		rts				rts
.2358					SwapDPCP:
.2358	8a		txa				txa
.2359	48		pha				pha
.235a	98		tya				tya 								; swap Y, DataIndex
.235b	ac d2 0c	ldy $0cd2			ldy 	DataIndex
.235e	8d d2 0c	sta $0cd2			sta 	DataIndex
.2361	a5 28		lda $28				lda 	codePtr 					; swap code/dataptr low
.2363	ae d0 0c	ldx $0cd0			ldx 	dataptr
.2366	8d d0 0c	sta $0cd0			sta 	dataPtr
.2369	86 28		stx $28				stx 	codePtr
.236b	a5 29		lda $29				lda 	codePtr+1 					; swap code/dataptr high.
.236d	ae d1 0c	ldx $0cd1			ldx 	dataptr+1
.2370	8d d1 0c	sta $0cd1			sta 	dataPtr+1
.2373	86 29		stx $29				stx 	codePtr+1
.2375	68		pla				pla
.2376	aa		tax				tax
.2377	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/compat/transfer.asm

.2378					CommandGOSUB:
.2378	20 1a 32	jsr $321a			jsr 	EvaluateRootInteger			; get GOSUB line on stack top.
.237b	a2 04		ldx #$04			ldx 	#4 							; allocate 4 bytes on stack for GOSUB
.237d	a9 47		lda #$47			lda 	#markerGOSUB  				; <marker> <return addr/offset>
.237f	20 4f 39	jsr $394f			jsr 	RSClaim
.2382	a9 01		lda #$01			lda 	#1 							; save position at offset 1.
.2384	20 7b 39	jsr $397b			jsr 	RSSavePosition
.2387	a2 00		ldx #$00			ldx 	#0 							; point back at GOSUB line
.2389	f0 1b		beq $23a6			beq 	GotoTOS 					; and do a GOTO there.
.238b					CommandRETURN:
.238b	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.238d	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.238f	c9 47		cmp #$47			cmp 	#markerGOSUB 						; does it match
.2391	f0 05		beq $2398			beq 	_isok
.2393	a2 0e		ldx #$0e			ldx 	#ErrorID_returnErr
.2395	20 18 15	jsr $1518		jsr	errorHandler
.2398					_isok:
.2398	a9 01		lda #$01			lda 	#1
.239a	20 8e 39	jsr $398e			jsr 	RSLoadPosition 				; reload the position from offset 1.
.239d	a9 04		lda #$04			lda 	#4 							; throw 4 bytes from stack.
.239f	20 71 39	jsr $3971			jsr 	RSFree
.23a2	60		rts				rts
.23a3					CommandGOTO:
.23a3	20 1a 32	jsr $321a			jsr 	EvaluateRootInteger 		; get GOTO line on stack top.
.23a6					GotoTOS:
.23a6	20 3d 2d	jsr $2d3d			jsr 	ResetCodeAddress 			; simple search.
.23a9					_GotoSearch:
.23a9	a0 00		ldy #$00			ldy 	#0 							; get offset
.23ab	b1 28		lda ($28),y			lda 	(codePtr),y
.23ad	f0 21		beq $23d0			beq 	_GotoError 					; not found.
.23af	c8		iny				iny									; check LSB match
.23b0	b1 28		lda ($28),y			lda 	(codePtr),y
.23b2	d5 98		cmp $98,x			cmp 	esInt0,x
.23b4	d0 07		bne $23bd			bne 	_GotoNext
.23b6	c8		iny				iny
.23b7	b1 28		lda ($28),y			lda 	(codePtr),y
.23b9	d5 a0		cmp $a0,x			cmp 	esInt1,x
.23bb	f0 10		beq $23cd			beq 	_GotoFound
.23bd					_GotoNext:
.23bd	a0 00		ldy #$00			ldy 	#0 							; go next line
.23bf	b1 28		lda ($28),y			lda 	(codePtr),y
.23c1	18		clc				clc
.23c2	65 28		adc $28				adc 	codePtr
.23c4	85 28		sta $28				sta 	codePtr
.23c6	90 e1		bcc $23a9			bcc 	_GotoSearch
.23c8	e6 29		inc $29				inc 	codePtr+1
.23ca	4c a9 23	jmp $23a9			jmp 	_GotoSearch
.23cd					_GotoFound:
.23cd	a0 03		ldy #$03			ldy 	#3 							; continue from that line
.23cf	60		rts				rts
.23d0					_GotoError:
.23d0	a2 0c		ldx #$0c			ldx 	#ErrorID_LineNumber
.23d2	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/commands/io/input.asm

=32					MaxInputSize = 32
.0cd3					InputBuffer:
>0cd3							.fill 	MaxInputSize+1
.23d5					Command_Input:
.23d5	b1 28		lda ($28),y			lda 	(codePtr),y 			; see what's next.
.23d7	c8		iny				iny
.23d8	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 				; ignore commas.
.23da	f0 f9		beq $23d5			beq 	Command_Input
.23dc	88		dey				dey 							; undo consume
.23dd	c9 ca		cmp #$ca			cmp 	#TKW_COLON
.23df	f0 54		beq $2435			beq 	_CIExit 				; : or EOL, exit
.23e1	c9 80		cmp #$80			cmp 	#TOK_EOL
.23e3	f0 50		beq $2435			beq 	_CIExit
.23e5	c9 40		cmp #$40			cmp 	#$40 					; variable ?
.23e7	90 12		bcc $23fb			bcc 	_CIVariable
.23e9	c9 85		cmp #$85			cmp 	#TOK_STR 				; if not quoted string syntax error.
.23eb	d0 43		bne $2430			bne 	_CISyntax
.23ed	a2 00		ldx #$00			ldx 	#0
.23ef	20 11 32	jsr $3211			jsr 	EvaluateString 			; evaluate and print string
.23f2	20 0e 26	jsr $260e			jsr 	TOSToTemp0
.23f5	20 04 25	jsr $2504			jsr 	PrintString
.23f8	4c d5 23	jmp $23d5			jmp 	Command_Input
.23fb					_CIVariable:
.23fb	a2 00		ldx #$00			ldx 	#0 						; evaluate a reference.
.23fd	20 55 32	jsr $3255			jsr 	EvaluateReference  		; this is where its going
.2400					_CIRetry:
.2400	a9 3f		lda #$3f			lda 	#"?"					; print prompt
.2402	a2 14		ldx #$14		ldx	#20
.2404	20 f6 14	jsr $14f6		jsr	deviceHandler
.2407	98		tya				tya
.2408	48		pha				pha
.2409	20 49 24	jsr $2449			jsr 	InputString 			; input a string (manually)
.240c	a2 01		ldx #$01			ldx 	#1
.240e	20 36 24	jsr $2436			jsr 	BufferToStackX 			; make stack,x ref input string.
.2411	a5 90		lda $90				lda 	esType 					; if target type numeric
.2413	29 40		and #$40			and 	#$40 					; then convert to number
.2415	d0 11		bne $2428			bne 	_CIWrite
.2417	a2 01		ldx #$01			ldx 	#1
.2419	20 0e 26	jsr $260e			jsr 	TOSToTemp0 				; string address in temp0, goes here.
.241c	a9 0a		lda #$0a			lda 	#10
.241e	20 22 37	jsr $3722			jsr 	MInt32FromString 		; convert it back from a string.
.2421	68		pla				pla
.2422	a8		tay				tay
.2423	b0 03		bcs $2428			bcs 	_CIWrite 				; successfully converted.
.2425	18		clc				clc 							; default fail FP conversion
.2426	90 d8		bcc $2400			bcc		_CIRetry				; failed, try again.
.2428					_CIWrite:
.2428	a2 00		ldx #$00			ldx 	#0
.242a	20 ac 25	jsr $25ac			jsr 	WriteValue
.242d	4c d5 23	jmp $23d5			jmp 	Command_Input
.2430					_CISyntax:
.2430	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.2432	20 18 15	jsr $1518		jsr	errorHandler
.2435					_CIExit:
.2435	60		rts				rts
.2436					BufferToStackX:
.2436	a9 d3		lda #$d3			lda 	#InputBuffer & $FF
.2438	95 98		sta $98,x			sta 	esInt0,x
.243a	a9 0c		lda #$0c			lda 	#InputBuffer >> 8
.243c	95 a0		sta $a0,x			sta 	esInt1,x
.243e	a9 00		lda #$00			lda 	#0
.2440	95 a8		sta $a8,x			sta 	esInt2,x
.2442	95 b0		sta $b0,x			sta 	esInt3,x
.2444	a9 40		lda #$40			lda 	#$40
.2446	95 90		sta $90,x			sta 	esType,x
.2448	60		rts				rts
.2449					InputString:
.2449	a9 00		lda #$00			lda 	#0
.244b	8d d3 0c	sta $0cd3			sta 	InputBuffer
.244e					_InputLoop:
.244e	a2 02		ldx #$02		ldx	#2
.2450	20 f6 14	jsr $14f6		jsr	deviceHandler
.2453	a2 0a		ldx #$0a		ldx	#10
.2455	20 f6 14	jsr $14f6		jsr	deviceHandler
.2458	c9 00		cmp #$00			cmp 	#0
.245a	f0 f2		beq $244e			beq 	_InputLoop
.245c	c9 08		cmp #$08			cmp 	#8
.245e	f0 19		beq $2479			beq 	_InputBackspace
.2460	c9 0d		cmp #$0d			cmp 	#13
.2462	f0 21		beq $2485			beq 	_InputExit
.2464	ae d3 0c	ldx $0cd3			ldx 	InputBuffer
.2467	e0 20		cpx #$20			cpx 	#MaxInputSize 			; too many characters
.2469	f0 e3		beq $244e			beq 	_InputLoop
.246b	9d d4 0c	sta $0cd4,x			sta 	InputBuffer+1,x 		; write char
.246e	ee d3 0c	inc $0cd3			inc 	InputBuffer 			; advance count.
.2471					_InputPrintLoop:
.2471	a2 14		ldx #$14		ldx	#20
.2473	20 f6 14	jsr $14f6		jsr	deviceHandler
.2476	4c 4e 24	jmp $244e			jmp	 	_InputLoop
.2479					_InputBackspace:
.2479	ad d3 0c	lda $0cd3			lda 	InputBuffer 			; at start
.247c	f0 d0		beq $244e			beq 	_InputLoop
.247e	ce d3 0c	dec $0cd3			dec 	InputBuffer
.2481	a9 08		lda #$08			lda 	#8
.2483	d0 ec		bne $2471			bne 	_InputPrintLoop
.2485					_InputExit:
.2485	a2 06		ldx #$06		ldx	#6
.2487	20 f6 14	jsr $14f6		jsr	deviceHandler
.248a	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/io/print.asm

.0cf4					lastPrintToken:
>0cf4							.fill 	1
.248b					Command_Print:
.248b	a9 00		lda #$00			lda 	#0 							; clear LPT to a non token
.248d	8d f4 0c	sta $0cf4			sta 	lastPrintToken
.2490	88		dey				dey
.2491					_PrintLoopSkip:
.2491	c8		iny				iny
.2492					_PrintLoop:
.2492	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows
.2494	c9 80		cmp #$80			cmp 	#TOK_EOL  					; done if end of line or colon
.2496	f0 5b		beq $24f3			beq 	_PrintExit
.2498	c9 ca		cmp #$ca			cmp 	#TKW_COLON
.249a	f0 57		beq $24f3			beq 	_PrintExit
.249c	8d f4 0c	sta $0cf4			sta 	lastPrintToken 				; update Last print token, so we check ; and ,
.249f	c9 cc		cmp #$cc			cmp 	#TKW_SEMICOLON 				; ignore semicolon
.24a1	f0 ee		beq $2491			beq 	_PrintLoopSkip
.24a3	c9 cd		cmp #$cd			cmp 	#TKW_QUOTE 					; ' is new line
.24a5	f0 3c		beq $24e3			beq	 	_PrintNewLine
.24a7	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; , is print tab
.24a9	f0 40		beq $24eb			beq 	_PrintTab
.24ab	20 fb 31	jsr $31fb			jsr 	EvaluateRoot 				; evaluate something at the root
.24ae	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.24b0	85 2a		sta $2a				sta 	temp0
.24b2	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.24b4	85 2b		sta $2b				sta 	1+(temp0)
.24b6	a5 90		lda $90				lda 	esType 						; get type
.24b8	f0 15		beq $24cf			beq		_PrintInteger
.24ba	4a		lsr a				lsr 	a 							; check for floating point
.24bb	b0 08		bcs $24c5			bcs 	_PrintFloat
.24bd					_PrintString:
.24bd	a2 00		ldx #$00			ldx 	#0 							; bottom string to temp0
.24bf	20 0e 26	jsr $260e			jsr 	TOSToTemp0
.24c2	4c dd 24	jmp $24dd			jmp 	_PrintTemp0 				; print no leading space.
.24c5					_PrintFloat:
.24c5	a9 00		lda #$00			lda 	#0 							; stack level.
.24c7	a2 16		ldx #$16		ldx	#22
.24c9	20 1c 21	jsr $211c		jsr	floatingpointHandler
.24cc	4c d6 24	jmp $24d6			jmp 	_PrintSpaceTemp0
.24cf					_PrintInteger:
.24cf	a9 8a		lda #$8a			lda 	#10+$80 					; base 10 signed
.24d1	a2 00		ldx #$00			ldx 	#0 							; bottom stack element
.24d3	20 0a 38	jsr $380a			jsr 	MInt32ToString				; convert to text
.24d6					_PrintSpaceTemp0:
.24d6	a9 20		lda #$20			lda 	#32
.24d8	a2 14		ldx #$14		ldx	#20
.24da	20 f6 14	jsr $14f6		jsr	deviceHandler
.24dd					_PrintTemp0:
.24dd	20 04 25	jsr $2504			jsr 	PrintString
.24e0	4c 92 24	jmp $2492			jmp 	_PrintLoop
.24e3					_PrintNewLine:
.24e3	a2 06		ldx #$06		ldx	#6
.24e5	20 f6 14	jsr $14f6		jsr	deviceHandler
.24e8	4c 91 24	jmp $2491			jmp 	_PrintLoopSkip
.24eb					_PrintTab:
.24eb	a2 1a		ldx #$1a		ldx	#26
.24ed	20 f6 14	jsr $14f6		jsr	deviceHandler
.24f0	4c 91 24	jmp $2491			jmp 	_PrintLoopSkip
.24f3					_PrintExit:
.24f3	ad f4 0c	lda $0cf4			lda		lastPrintToken 				; check last token
.24f6	c9 cc		cmp #$cc			cmp 	#TKW_SEMICOLON 				; if , or ; do not print NL
.24f8	f0 09		beq $2503			beq 	_PrintExit2
.24fa	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.24fc	f0 05		beq $2503			beq 	_PrintExit2
.24fe	a2 06		ldx #$06		ldx	#6
.2500	20 f6 14	jsr $14f6		jsr	deviceHandler
.2503					_PrintExit2:
.2503	60		rts				rts
.2504					PrintString:
.2504	8a		txa				txa
.2505	48		pha				pha
.2506	98		tya				tya
.2507	48		pha				pha
.2508	a0 00		ldy #$00			ldy 	#0							; get length
.250a	b1 2a		lda ($2a),y			lda 	(temp0),y
.250c	aa		tax				tax 								; into X
.250d	e0 00		cpx #$00	_PSLoop:cpx 	#0 							; finished ?
.250f	f0 10		beq $2521			beq 	_PSExit
.2511	ca		dex				dex
.2512	8a		txa				txa
.2513	48		pha				pha
.2514	c8		iny				iny
.2515	b1 2a		lda ($2a),y			lda 	(temp0),y
.2517	a2 14		ldx #$14		ldx	#20
.2519	20 f6 14	jsr $14f6		jsr	deviceHandler
.251c	68		pla				pla
.251d	aa		tax				tax
.251e	4c 0d 25	jmp $250d			jmp 	_PSLoop
.2521					_PSExit:
.2521	68		pla				pla
.2522	a8		tay				tay
.2523	68		pla				pla
.2524	aa		tax				tax
.2525	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/io/text.asm

.2526					Command_CLS:
.2526	a2 04		ldx #$04		ldx	#4
.2528	20 f6 14	jsr $14f6		jsr	deviceHandler
.252b	60		rts				rts
.252c					Command_Ink:
.252c	a2 00		ldx #$00			ldx 	#0
.252e	20 24 32	jsr $3224			jsr 	EvaluateSmallInteger
.2531	a2 08		ldx #$08		ldx	#8
.2533	20 f6 14	jsr $14f6		jsr	deviceHandler
.2536	60		rts				rts
.2537					Command_Paper:
.2537	a2 00		ldx #$00			ldx 	#0
.2539	20 24 32	jsr $3224			jsr 	EvaluateSmallInteger
.253c	a2 12		ldx #$12		ldx	#18
.253e	20 f6 14	jsr $14f6		jsr	deviceHandler
.2541	60		rts				rts
.2542					Command_Locate:
.2542	a2 00		ldx #$00			ldx 	#0
.2544	20 24 32	jsr $3224			jsr 	EvaluateSmallInteger
.2547	20 34 39	jsr $3934			jsr 	CheckComma
.254a	e8		inx				inx
.254b	20 24 32	jsr $3224			jsr 	EvaluateSmallInteger
.254e	98		tya				tya
.254f	48		pha				pha
.2550	a4 99		ldy $99				ldy 	esInt0+1
.2552	a5 98		lda $98				lda 	esInt0
.2554	a2 10		ldx #$10		ldx	#16
.2556	20 f6 14	jsr $14f6		jsr	deviceHandler
.2559	68		pla				pla
.255a	a8		tay				tay
.255b	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/io/vdu.asm

.255c					Command_VDU:
.255c	20 1a 32	jsr $321a			jsr 	EvaluateRootInteger 			; get integer at root.
.255f	a5 98		lda $98				lda 	esInt0
.2561	a2 14		ldx #$14		ldx	#20
.2563	20 f6 14	jsr $14f6		jsr	deviceHandler
.2566					_CVNext:
.2566	b1 28		lda ($28),y			lda 	(codePtr),y 					; what follows ?
.2568	c8		iny				iny
.2569	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 						; comma, do again
.256b	f0 ef		beq $255c			beq 	Command_VDU
.256d	c9 cc		cmp #$cc			cmp 	#TKW_SEMICOLON 					; semicolon, print MSB
.256f	d0 0a		bne $257b			bne 	_CVExit
.2571	a5 a0		lda $a0				lda 	esInt1
.2573	a2 14		ldx #$14		ldx	#20
.2575	20 f6 14	jsr $14f6		jsr	deviceHandler
.2578	4c 66 25	jmp $2566			jmp 	_CVNext
.257b	88		dey		_CVExit:dey
.257c	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/link.asm


;******  Return to file: main/main.asm


;******  Processing file: main/commands/misc/assert.asm

.257d					Command_Assert:
.257d	20 1a 32	jsr $321a			jsr 	EvaluateRootInteger 		; what is being asserted.
.2580	20 db 38	jsr $38db			jsr 	MInt32Zero 					; is it true ?
.2583	f0 01		beq $2586			beq 	_CAError
.2585	60		rts				rts
.2586					_CAError:
.2586	a2 04		ldx #$04			ldx 	#ErrorID_Assert
.2588	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/commands/misc/dim.asm

.258b					Command_Dim:
.258b	a2 04		ldx #$04		ldx	#4
.258d	20 8f 48	jsr $488f		jsr	variableHandler
.2590	b1 28		lda ($28),y			lda 	(codePtr),y 				; see what follows.
.2592	c8		iny				iny
.2593	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; comma follows, go back and do next
.2595	f0 f4		beq $258b			beq 	Command_Dim
.2597	88		dey				dey 								; unpick get
.2598	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/misc/let.asm

.2599					CommandLet:
.2599	a2 00		ldx #$00			ldx 	#0  						; get address to write.
.259b	20 55 32	jsr $3255			jsr 	EvaluateReference
.259e	a9 8d		lda #$8d			lda 	#TKW_EQUAL 					; check for equals
.25a0	20 1c 39	jsr $391c			jsr 	CheckToken
.25a3	e8		inx				inx 								; do RHS
.25a4	20 fd 31	jsr $31fd			jsr 	Evaluate 					; evaluate and dereference
.25a7	ca		dex				dex
.25a8	20 ac 25	jsr $25ac			jsr 	WriteValue 					; write it out
.25ab	60		rts				rts
.25ac					WriteValue:
.25ac	98		tya				tya
.25ad	48		pha				pha
.25ae	20 0e 26	jsr $260e			jsr 	TOSToTemp0 					; set temp0 to point to target address.
.25b1	b5 90		lda $90,x			lda 	esType,x 					; check the string flags match
.25b3	55 91		eor $91,x			eor 	esType+1,x 					; one string, one number causes an error.
.25b5	29 40		and #$40			and 	#$40
.25b7	d0 50		bne $2609			bne		_WVType
.25b9	a0 01		ldy #$01			ldy 	#1 							; for string, copy 0 and 1.
.25bb	b5 90		lda $90,x			lda 	esType,x 					; check for string assignment
.25bd	29 40		and #$40			and 	#$40
.25bf	d0 1f		bne $25e0			bne 	_WVCopyString
.25c1	b5 90		lda $90,x			lda 	esType,x 					; check both are integer.
.25c3	15 91		ora $91,x			ora 	esType+1,x
.25c5	4a		lsr a				lsr 	a
.25c6	90 22		bcc $25ea			bcc 	_WVCopyData4 				; copy 4 data bytes.
.25c8	b5 90		lda $90,x			lda 	esType,x
.25ca	4a		lsr a				lsr 	a
.25cb	90 3c		bcc $2609			bcc 	_WVType
.25cd	e8		inx				inx 								; force the value being written to be a float.
.25ce	20 5f 2e	jsr $2e5f			jsr 	BPMakeFloat
.25d1	ca		dex				dex
.25d2	20 0e 26	jsr $260e			jsr 	TOSToTemp0 					; set Temp0 to write address
.25d5	e8		inx				inx
.25d6	8a		txa				txa
.25d7	a2 22		ldx #$22		ldx	#34
.25d9	20 1c 21	jsr $211c		jsr	floatingpointHandler
.25dc	aa		tax				tax
.25dd	4c 06 26	jmp $2606			jmp 	_WVCopyExit
.25e0					_WVCopyString:
.25e0	8a		txa				txa
.25e1	a2 10		ldx #$10		ldx	#16
.25e3	20 5f 3c	jsr $3c5f		jsr	stringHandler
.25e6	aa		tax				tax
.25e7	4c 06 26	jmp $2606			jmp 	_WVCopyExit
.25ea					_WVCopyData4:
.25ea	b5 90		lda $90,x			lda 	esType,x 					; is the int ref a byte ref ?
.25ec	29 20		and #$20			and 	#$20 						; (e.g. is bit 5 set)
.25ee	d0 10		bne $2600			bne 	_WVCopyData1
.25f0	a0 03		ldy #$03			ldy 	#3
.25f2	b5 b1		lda $b1,x			lda 	esInt3+1,x
.25f4	91 2a		sta ($2a),y			sta 	(temp0),y
.25f6	88		dey				dey
.25f7	b5 a9		lda $a9,x			lda 	esInt2+1,x
.25f9	91 2a		sta ($2a),y			sta 	(temp0),y
.25fb	88		dey				dey
.25fc	b5 a1		lda $a1,x			lda 	esInt1+1,x
.25fe	91 2a		sta ($2a),y			sta 	(temp0),y
.2600					_WVCopyData1:
.2600	a0 00		ldy #$00			ldy 	#0
.2602	b5 99		lda $99,x			lda 	esInt0+1,x
.2604	91 2a		sta ($2a),y			sta 	(temp0),y
.2606					_WVCopyExit:
.2606	68		pla				pla
.2607	a8		tay				tay
.2608	60		rts				rts
.2609					_WVType:
.2609	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.260b	20 18 15	jsr $1518		jsr	errorHandler
.260e					TOSToTemp0:
.260e	b5 98		lda $98,x			lda 	esInt0,x
.2610	85 2a		sta $2a				sta 	temp0
.2612	b5 a0		lda $a0,x			lda 	esInt1,x
.2614	85 2b		sta $2b				sta 	temp0+1
.2616	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/misc/poke.asm

.2617					Command_Poke:
.2617	a9 01		lda #$01			lda 	#1
.2619	d0 06		bne $2621			bne 	PokeGeneral
.261b					Command_Doke:
.261b	a9 02		lda #$02			lda 	#2
.261d	d0 02		bne $2621			bne 	PokeGeneral
.261f					Command_Loke:
.261f	a9 03		lda #$03			lda 	#3
.2621					PokeGeneral:
.2621	48		pha				pha 								; save id (PDL = 123)
.2622	20 1a 32	jsr $321a			jsr 	EvaluateRootInteger 		; target address
.2625	20 34 39	jsr $3934			jsr	 	CheckComma
.2628	e8		inx				inx
.2629	20 1c 32	jsr $321c			jsr 	EvaluateInteger 			; what value to POKE ?
.262c	ca		dex				dex
.262d	20 0e 26	jsr $260e			jsr 	TOSToTemp0 					; temp0 points to the target address
.2630	84 32		sty $32				sty 	tempShort 					; save Y
.2632	68		pla				pla 								; get copy type (1-3) and dispatch
.2633	aa		tax				tax
.2634	ca		dex				dex
.2635	f0 14		beq $264b			beq 	_Poke1
.2637	ca		dex				dex
.2638	f0 0b		beq $2645			beq 	_Poke2
.263a	a0 03		ldy #$03			ldy 	#3							; put 4 bytes
.263c	a5 b1		lda $b1				lda 	esInt3+1
.263e	91 2a		sta ($2a),y			sta 	(temp0),y
.2640	88		dey				dey
.2641	a5 a9		lda $a9				lda 	esInt2+1
.2643	91 2a		sta ($2a),y			sta 	(temp0),y
.2645					_Poke2:
.2645	a0 01		ldy #$01			ldy 	#1
.2647	a5 a1		lda $a1				lda 	esInt1+1
.2649	91 2a		sta ($2a),y			sta 	(temp0),y
.264b					_Poke1:
.264b	a0 00		ldy #$00			ldy 	#0
.264d	a5 99		lda $99				lda 	esInt0+1
.264f	91 2a		sta ($2a),y			sta 	(temp0),y
.2651	a4 32		ldy $32				ldy 	tempShort 					; restore Y and exit
.2653	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/misc/rem.asm

.2654					Command_Rem:
.2654					Command_Rem2:
.2654	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows
.2656	c9 85		cmp #$85			cmp 	#TOK_STR 					; if it is a string then skip it.
.2658	d0 06		bne $2660			bne 	_CRNotString
.265a	c8		iny				iny
.265b	98		tya				tya
.265c	38		sec				sec
.265d	71 28		adc ($28),y			adc 	(codePtr),y 				; get string size, add to Y, +1 for the length
.265f	a8		tay				tay
.2660					_CRNotString:
.2660	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/misc/stopend.asm

.2661					CommandStop:
.2661	a2 06		ldx #$06			ldx 	#ErrorID_Stop
.2663	20 18 15	jsr $1518		jsr	errorHandler
.2666					CommandEnd:
.2666	4c 9d 39	jmp $399d			jmp 	WarmStart
.2669					CommandXemu:
.2669	4c ff ff	jmp $ffff			jmp 	$FFFF 						; fudge to crash out of emulator
.266c					AdvanceNextLine:
.266c	a0 00		ldy #$00			ldy 	#0 							; get offset
.266e	b1 28		lda ($28),y			lda 	(codePtr),y
.2670	18		clc				clc 								; add to codePtr
.2671	65 28		adc $28				adc 	codePtr
.2673	85 28		sta $28				sta 	codePtr
.2675	90 02		bcc $2679			bcc 	_ANLNoCarry
.2677	e6 29		inc $29				inc 	codePtr+1
.2679					_ANLNoCarry:
.2679	b1 28		lda ($28),y			lda 	(codePtr),y 				; if end of program (or was just stand alone.
.267b	f0 e9		beq $2666			beq 	CommandEnd 					; execute END
.267d	a0 03		ldy #$03			ldy 	#3 							; start of tokens on line.
.267f	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/for.asm

.2680					Command_FOR:
.2680	a9 46		lda #$46			lda 	#markerFOR 					; allocate the space and set the marker
.2682	a2 0b		ldx #$0b			ldx 	#11
.2684	20 4f 39	jsr $394f			jsr 	RSClaim
.2687	20 99 25	jsr $2599			jsr 	CommandLET 					; do the same as LET FOR [a = 4]
.268a	a5 90		lda $90				lda 	esType 						; check type should be integer reference.
.268c	c9 80		cmp #$80			cmp 	#$80 						; we do not do FOR floats.
.268e	d0 4c		bne $26dc			bne 	_CFType
.2690	a9 ce		lda #$ce			lda 	#TKW_TO 					; check TO present.
.2692	20 1c 39	jsr $391c			jsr 	CheckToken
.2695	a2 01		ldx #$01			ldx 	#1 							; keep the variable address in stack 0
.2697	20 1c 32	jsr $321c			jsr 	EvaluateInteger				; get terminal value in stack 1
.269a	98		tya				tya
.269b	48		pha				pha
.269c	a0 04		ldy #$04			ldy 	#4
.269e	a5 98		lda $98				lda		esInt0 						; copy the address of the index variable into 4 and 5
.26a0	91 37		sta ($37),y			sta 	(rsPointer),y
.26a2	c8		iny				iny
.26a3	a5 a0		lda $a0				lda		esInt1
.26a5	91 37		sta ($37),y			sta 	(rsPointer),y
.26a7	c8		iny				iny
.26a8	a9 01		lda #$01			lda 	#1  						; the default step in 6, (-128 .. 127 only)
.26aa	91 37		sta ($37),y			sta 	(rsPointer),y
.26ac	c8		iny				iny
.26ad	a5 99		lda $99				lda		esInt0+1 					; terminal value in 7 to 11.
.26af	91 37		sta ($37),y			sta 	(rsPointer),y
.26b1	c8		iny				iny
.26b2	a5 a1		lda $a1				lda		esInt1+1
.26b4	91 37		sta ($37),y			sta 	(rsPointer),y
.26b6	c8		iny				iny
.26b7	a5 a9		lda $a9				lda		esInt2+1
.26b9	91 37		sta ($37),y			sta 	(rsPointer),y
.26bb	c8		iny				iny
.26bc	a5 b1		lda $b1				lda		esInt3+1
.26be	91 37		sta ($37),y			sta 	(rsPointer),y
.26c0	68		pla				pla
.26c1	a8		tay				tay
.26c2	b1 28		lda ($28),y			lda 	(codePtr),y 				; followed by STEP.
.26c4	c9 cf		cmp #$cf			cmp 	#TKW_STEP
.26c6	d0 0e		bne $26d6			bne 	_CFDone
.26c8	c8		iny				iny									; skip over step.
.26c9	20 1c 32	jsr $321c			jsr 	EvaluateInteger 			; get step
.26cc	98		tya				tya
.26cd	48		pha				pha
.26ce	b5 98		lda $98,x			lda 	esInt0,x 					; copy it into step (bit lazy here)
.26d0	a0 06		ldy #$06			ldy 	#6
.26d2	91 37		sta ($37),y			sta 	(rsPointer),y
.26d4	68		pla				pla
.26d5	a8		tay				tay
.26d6					_CFDone:
.26d6	a9 01		lda #$01			lda 	#1
.26d8	20 7b 39	jsr $397b			jsr 	RSSavePosition 				; save position.
.26db	60		rts				rts
.26dc					_CFType:
.26dc	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.26de	20 18 15	jsr $1518		jsr	errorHandler
.26e1					Command_NEXT:
.26e1	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.26e3	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.26e5	c9 46		cmp #$46			cmp 	#markerFOR 						; does it match
.26e7	f0 05		beq $26ee			beq 	_isok
.26e9	a2 10		ldx #$10			ldx 	#ErrorID_nextErr
.26eb	20 18 15	jsr $1518		jsr	errorHandler
.26ee					_isok:
.26ee	b1 28		lda ($28),y			lda 	(codePtr),y 				; is it NEXT <index>
.26f0	c9 40		cmp #$40			cmp 	#$40 						; e.g. a variable follows 00-3F
.26f2	b0 18		bcs $270c			bcs 	_CNNoIndex
.26f4	a2 00		ldx #$00			ldx 	#0 							; start on stack
.26f6	20 55 32	jsr $3255			jsr 	EvaluateReference 			; this is the variable/parameter to localise.
.26f9	98		tya				tya
.26fa	48		pha				pha
.26fb	a0 04		ldy #$04			ldy 	#4 							; check same variable as that stored at +4,+5
.26fd	b1 37		lda ($37),y			lda 	(rsPointer),y
.26ff	d5 98		cmp $98,x			cmp 	esInt0,x
.2701	d0 76		bne $2779			bne 	_CNBadIndex
.2703	c8		iny				iny
.2704	b1 37		lda ($37),y			lda 	(rsPointer),y
.2706	d5 a0		cmp $a0,x			cmp 	esInt1,x
.2708	d0 6f		bne $2779			bne 	_CNBadIndex
.270a	68		pla				pla
.270b	a8		tay				tay
.270c					_CNNoIndex:
.270c	98		tya				tya
.270d	48		pha				pha
.270e	a0 04		ldy #$04			ldy 	#4 							; make temp0 point to the index
.2710	b1 37		lda ($37),y			lda 	(rsPointer),y
.2712	85 2a		sta $2a				sta 	temp0
.2714	c8		iny				iny
.2715	b1 37		lda ($37),y			lda 	(rsPointer),y
.2717	85 2b		sta $2b				sta 	temp0+1
.2719	c8		iny				iny
.271a	a2 00		ldx #$00			ldx 	#0 							; X is the sign extend part of the step.
.271c	b1 37		lda ($37),y			lda 	(rsPointer),y 				; get the step.
.271e	85 2f		sta $2f				sta 	temp2+1 					; save for later.
.2720	10 01		bpl $2723			bpl 	_CNSignX
.2722	ca		dex				dex  								; X = $FF
.2723					_CNSignX:
.2723	18		clc				clc 								; add to the LSB
.2724	a0 00		ldy #$00			ldy 	#0
.2726	71 2a		adc ($2a),y			adc 	(temp0),y
.2728	91 2a		sta ($2a),y			sta 	(temp0),y
.272a					_CNPropogate:
.272a	c8		iny				iny  								; add the sign extended in X to the rest.
.272b	8a		txa				txa
.272c	71 2a		adc ($2a),y			adc 	(temp0),y
.272e	91 2a		sta ($2a),y			sta 	(temp0),y
.2730	c8		iny				iny
.2731	8a		txa				txa
.2732	71 2a		adc ($2a),y			adc 	(temp0),y
.2734	91 2a		sta ($2a),y			sta 	(temp0),y
.2736	c8		iny				iny
.2737	8a		txa				txa
.2738	71 2a		adc ($2a),y			adc 	(temp0),y
.273a	91 2a		sta ($2a),y			sta 	(temp0),y
.273c	18		clc				clc 								; point temp1 to the terminal value stored in the stack.
.273d	a5 37		lda $37				lda 	rsPointer
.273f	69 07		adc #$07			adc 	#7
.2741	85 2c		sta $2c				sta 	temp1
.2743	a9 00		lda #$00			lda 	#0
.2745	85 2e		sta $2e				sta 	temp2 						; clear temp2, which is the OR of all the subtractions.
.2747	a8		tay				tay 								; and clear the Y register again.
.2748	65 38		adc $38				adc 	rsPointer+1
.274a	85 2d		sta $2d				sta 	temp1+1
.274c	38		sec				sec 								; calculate current - limit oring interim values.
.274d	20 85 27	jsr $2785			jsr 	_CNCompare 					; each of these does a byte.
.2750	20 85 27	jsr $2785			jsr 	_CNCompare 					; we calculate the OR of all these subtractions.
.2753	20 85 27	jsr $2785			jsr 	_CNCompare 					; and the carry of the subtraction.
.2756	20 85 27	jsr $2785			jsr 	_CNCompare
.2759	50 02		bvc $275d			bvc 	_CNNoOverflow 				; converts to a signed comparison on the sign bit.
.275b	49 80		eor #$80			eor 	#$80
.275d					_CNNoOverflow:
.275d	a4 2f		ldy $2f				ldy 	temp2+1						; get step back
.275f	30 1d		bmi $277e			bmi 	_CNCheckDownto
.2761	c9 00		cmp #$00			cmp 	#0
.2763	30 0c		bmi $2771			bmi 	_CNLoopRound 				; loop round if < =
.2765	a5 2e		lda $2e				lda 	temp2
.2767	f0 08		beq $2771			beq 	_CNLoopRound
.2769					_CNLoopExit:
.2769	68		pla				pla
.276a	a8		tay				tay
.276b	a9 0b		lda #$0b			lda 	#11
.276d	20 71 39	jsr $3971			jsr 	RSFree
.2770	60		rts				rts
.2771					_CNLoopRound:
.2771	68		pla				pla
.2772	a8		tay				tay
.2773	a9 01		lda #$01			lda 	#1
.2775	20 8e 39	jsr $398e			jsr 	RSLoadPosition				; go back to the loop top
.2778	60		rts				rts
.2779					_CNBadIndex:
.2779	a2 13		ldx #$13			ldx 	#ErrorID_BadIndex
.277b	20 18 15	jsr $1518		jsr	errorHandler
.277e					_CNCheckDownto:
.277e	c9 00		cmp #$00			cmp 	#0
.2780	10 ef		bpl $2771			bpl 	_CNLoopRound
.2782	4c 69 27	jmp $2769			jmp 	_CNLoopExit
.2785					_CNCompare:
.2785	b1 2a		lda ($2a),y			lda 	(temp0),y 					; do the subtraction - compare don't care about answer
.2787	f1 2c		sbc ($2c),y			sbc 	(temp1),y
.2789	05 2e		ora $2e				ora 	temp2 						; Or into temp2 (does not affect carry)
.278b	85 2e		sta $2e				sta 	temp2
.278d	c8		iny				iny
.278e	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/if.asm

.278f					CommandIf:
.278f	20 1a 32	jsr $321a			jsr 	EvaluateRootInteger 		; get what's being tested.
.2792	b1 28		lda ($28),y			lda 	(codePtr),y 				; check for IF .. THEN or IF .. GOTO which are single lines.
.2794	c9 91		cmp #$91			cmp 	#TKW_GOTO
.2796	f0 04		beq $279c			beq 	_IfSimple
.2798	c9 a1		cmp #$a1			cmp 	#TKW_THEN
.279a	d0 1b		bne $27b7			bne 	_IfComplex
.279c					_IfSimple:
.279c	20 db 38	jsr $38db			jsr 	MInt32Zero					; check if TOS zero
.279f	f0 10		beq $27b1			beq 	_IfEOL 						; go to next line.
.27a1	b1 28		lda ($28),y			lda 	(codePtr),y 				; get and skip token.
.27a3	c8		iny				iny
.27a4	c9 91		cmp #$91			cmp 	#TKW_GOTO 					; was it if GOTO ?
.27a6	f0 0c		beq $27b4			beq 	_IfGoto 					; do the Goto code
.27a8	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows the THEN ?
.27aa	29 c0		and #$c0			and 	#$C0 						; check $40-$7F
.27ac	c9 40		cmp #$40			cmp 	#$40 						; e.g. number IF x = 0 THEN 170
.27ae	f0 04		beq $27b4			beq 	_IfGoto
.27b0	60		rts				rts 								; else continue on this line.
.27b1					_IfEOL:
.27b1	4c 6c 26	jmp $266c			jmp 	AdvanceNextLine 			; go to next line
.27b4					_IfGoto:
.27b4	4c a3 23	jmp $23a3			jmp 	CommandGoto
.27b7					_IfComplex:
.27b7	20 db 38	jsr $38db			jsr 	MInt32Zero 					; is it true ?
.27ba	f0 01		beq $27bd			beq 	_IFSkip 					; if non-zero then skip to ELSE/ENDIF
.27bc	60		rts				rts 								; else continue.
.27bd					_IFSkip:
.27bd	a9 d6		lda #$d6			lda	 	#TKW_ELSE 					; test failed, go to ELSE or ENDIF whichever comes first.
.27bf	a2 a2		ldx #$a2			ldx 	#TKW_ENDIF
.27c1	4c 59 2a	jmp $2a59			jmp		ScanForward
.27c4					Command_ELSE:
.27c4	a2 a2		ldx #$a2			ldx 	#TKW_ENDIF
.27c6	8a		txa				txa
.27c7	4c 59 2a	jmp $2a59			jmp		ScanForward
.27ca					Command_ENDIF:
.27ca	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/local.asm

.0cf5					storeSize:
>0cf5							.fill 	1
.27cb					CommandLocal:
.27cb	a2 00		ldx #$00			ldx 	#0
.27cd	20 e9 27	jsr $27e9			jsr 	LocaliseVariable 			; localise one.
.27d0					_CLCheckNext:
.27d0	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows ?
.27d2	c8		iny				iny
.27d3	c9 8d		cmp #$8d			cmp 	#TKW_EQUAL 					; something local "x = 2" ?
.27d5	f0 06		beq $27dd			beq 	_CLAssignment
.27d7	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; comma try again.
.27d9	f0 f0		beq $27cb			beq 	CommandLocal
.27db	88		dey				dey
.27dc	60		rts				rts
.27dd					_CLAssignment:
.27dd	a2 01		ldx #$01			ldx 	#1
.27df	20 fd 31	jsr $31fd			jsr 	Evaluate 					; evaluate RHS
.27e2	ca		dex				dex
.27e3	20 ac 25	jsr $25ac			jsr 	WriteValue
.27e6	4c d0 27	jmp $27d0			jmp 	_CLCheckNext
.27e9					LocaliseVariable:
.27e9	b1 28		lda ($28),y			lda 	(codePtr),y 				; check it's a variable.
.27eb	c9 40		cmp #$40			cmp 	#$40
.27ed	b0 67		bcs $2856			bcs 	_LVSyntax
.27ef	8a		txa				txa 								; get the address of that variable.
.27f0	a2 02		ldx #$02		ldx	#2
.27f2	20 8f 48	jsr $488f		jsr	variableHandler
.27f5	aa		tax				tax
.27f6	8a		txa				txa
.27f7	48		pha				pha
.27f8	98		tya				tya
.27f9	48		pha				pha
.27fa	20 0e 26	jsr $260e			jsr 	TOSToTemp0 					; the address of the variable is now in temp0.
.27fd	b5 90		lda $90,x			lda 	esType,x 					; get the type
.27ff	0a		asl a				asl 	a
.2800	10 16		bpl $2818			bpl 	_LVPushNumber
.2802	a0 00		ldy #$00			ldy 	#0 							; put address of data in temp1
.2804	b1 2a		lda ($2a),y			lda 	(temp0),y
.2806	c8		iny				iny
.2807	85 2c		sta $2c				sta 	temp1
.2809	b1 2a		lda ($2a),y			lda 	(temp0),y
.280b	85 2d		sta $2d				sta 	temp1+1
.280d	a0 00		ldy #$00			ldy 	#0 	 						; get length
.280f	b1 2c		lda ($2c),y			lda 	(temp1),y
.2811	aa		tax				tax 								; into X
.2812	e8		inx				inx 								; +1 for length.
.2813	a9 24		lda #$24			lda 	#markerString
.2815	4c 2d 28	jmp $282d			jmp 	_LVWriteFrame
.2818					_LVPushNumber:
.2818	a5 2a		lda $2a				lda 	temp0 						; storage address and data source are the same
.281a	85 2c		sta $2c				sta 	temp1
.281c	a5 2b		lda $2b				lda 	temp0+1
.281e	85 2d		sta $2d				sta 	temp1+1
.2820	b5 90		lda $90,x			lda 	esType,x 					; put float flag into carry.
.2822	4a		lsr a				lsr 	a
.2823	a9 25		lda #$25			lda 	#markerInt 					; get marker and size.
.2825	a2 04		ldx #$04			ldx 	#VarISize
.2827	90 04		bcc $282d			bcc 	_LVIsInteger
.2829	a9 23		lda #$23			lda 	#markerFloat
.282b	a2 06		ldx #$06			ldx 	#VarFSize
.282d					_LVIsInteger:
.282d					_LVWriteFrame:
.282d	8e f5 0c	stx $0cf5			stx 	storeSize 					; number of bytes to copy from (temp0)
.2830	e8		inx				inx 								; allocate 3 bytes, 2 for the address, 1 for the marker.
.2831	e8		inx				inx
.2832	e8		inx				inx
.2833	20 4f 39	jsr $394f			jsr 	RSClaim 					; create the stack frame.
.2836	a5 2a		lda $2a				lda 	temp0 						; copy the target address to slots 1 & 2
.2838	a0 01		ldy #$01			ldy 	#1
.283a	91 37		sta ($37),y			sta 	(rsPointer),y
.283c	c8		iny				iny
.283d	a5 2b		lda $2b				lda 	temp0+1
.283f	91 37		sta ($37),y			sta 	(rsPointer),y
.2841	a0 00		ldy #$00			ldy 	#0
.2843					_LVCopyData:
.2843	b1 2c		lda ($2c),y			lda 	(temp1),y 					; get data from source, temp1
.2845	c8		iny				iny 								; write allowing for the header bit.
.2846	c8		iny				iny
.2847	c8		iny				iny
.2848	91 37		sta ($37),y			sta 	(rsPointer),y
.284a	88		dey				dey
.284b	88		dey				dey
.284c	ce f5 0c	dec $0cf5			dec 	storeSize 					; do it storesize times
.284f	d0 f2		bne $2843			bne 	_LVCopyData
.2851	68		pla				pla
.2852	a8		tay				tay
.2853	68		pla				pla
.2854	aa		tax				tax
.2855	60		rts				rts
.2856					_LVSyntax:
.2856	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.2858	20 18 15	jsr $1518		jsr	errorHandler
.285b					RestoreLocals:
.285b	a2 00		ldx #$00			ldx 	#0
.285d	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.285f	c9 40		cmp #$40			cmp	 	#64
.2861	90 01		bcc $2864			bcc 	_RLocal
.2863	60		rts				rts
.2864					_RLocal:
.2864	8a		txa				txa
.2865	48		pha				pha
.2866	98		tya				tya
.2867	48		pha				pha
.2868	a0 01		ldy #$01			ldy 	#1 							; copy target address to temp0
.286a	b1 37		lda ($37),y			lda 	(rsPointer),y
.286c	85 2a		sta $2a				sta 	temp0
.286e	c8		iny				iny
.286f	b1 37		lda ($37),y			lda 	(rsPointer),y
.2871	85 2b		sta $2b				sta 	temp0+1
.2873	a0 00		ldy #$00			ldy 	#0 							; get type back.
.2875	b1 37		lda ($37),y			lda 	(rsPointer),y
.2877	c9 24		cmp #$24			cmp 	#markerString 				; string is ... different :)
.2879	f0 28		beq $28a3			beq 	_RString
.287b	a2 04		ldx #$04			ldx		#VARISize 					; size integer
.287d	c9 25		cmp #$25			cmp 	#markerInt
.287f	f0 02		beq $2883			beq 	_RIsInteger
.2881	a2 06		ldx #$06			ldx 	#VARFSize 					; size float
.2883					_RIsInteger:
.2883	8a		txa				txa
.2884	48		pha				pha
.2885	a0 03		ldy #$03			ldy 	#3							; start size to copy back from pointer.
.2887					_RCopyBack:
.2887	b1 37		lda ($37),y			lda 	(rsPointer),y
.2889	88		dey				dey
.288a	88		dey				dey
.288b	88		dey				dey
.288c	91 2a		sta ($2a),y			sta 	(temp0),y
.288e	c8		iny				iny
.288f	c8		iny				iny
.2890	c8		iny				iny
.2891	c8		iny				iny
.2892	ca		dex				dex
.2893	d0 f2		bne $2887			bne 	_RCopyBack
.2895	68		pla				pla 								; get size add 3
.2896	18		clc				clc
.2897	69 03		adc #$03			adc 	#3 							; (2 for address one for marker)
.2899					_RRestoreAAndLoop:
.2899	20 71 39	jsr $3971			jsr 	RSFree
.289c	68		pla				pla
.289d	a8		tay				tay
.289e	68		pla				pla
.289f	aa		tax				tax
.28a0	4c 5b 28	jmp $285b			jmp 	RestoreLocals 				; go see if there are any more locals.
.28a3					_RString:
.28a3	a2 00		ldx #$00			ldx 	#0
.28a5	a0 01		ldy #$01			ldy 	#1 							; set up for a string write.
.28a7	b1 37		lda ($37),y			lda 	(rsPointer),y
.28a9	95 98		sta $98,x			sta 	esInt0,x
.28ab	c8		iny				iny
.28ac	b1 37		lda ($37),y			lda 	(rsPointer),y
.28ae	95 a0		sta $a0,x			sta 	esInt1,x
.28b0	18		clc				clc
.28b1	a5 37		lda $37				lda 	rsPointer
.28b3	69 03		adc #$03			adc 	#3
.28b5	95 99		sta $99,x			sta 	esInt0+1,x
.28b7	a5 38		lda $38				lda 	rsPointer+1
.28b9	69 00		adc #$00			adc 	#0
.28bb	95 a1		sta $a1,x			sta 	esInt1+1,x
.28bd	8a		txa				txa
.28be	a2 10		ldx #$10		ldx	#16
.28c0	20 5f 3c	jsr $3c5f		jsr	stringHandler
.28c3	a0 03		ldy #$03			ldy 	#3 							; get string length
.28c5	b1 37		lda ($37),y			lda 	(rsPointer),y
.28c7	18		clc				clc
.28c8	69 04		adc #$04			adc 	#4 							; add 4 (pointer, marker, length) to restore.
.28ca	4c 99 28	jmp $2899			jmp 	_RRestoreAAndLoop

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/proc.asm

.0cf6					paramCount:
>0cf6							.fill 	1
.28cd					CallProc:
.28cd	20 55 29	jsr $2955			jsr 	FindProcedure 				; find procedure, put in temp0. A contains name length.
.28d0	48		pha				pha 								; save length on stack
.28d1	85 32		sta $32				sta 	tempShort 					; save length in tempShort
.28d3	a5 2b		lda $2b				lda 	temp0+1 					; save procedure target on stack.
.28d5	48		pha				pha
.28d6	a5 2a		lda $2a				lda 	temp0
.28d8	48		pha				pha
.28d9	98		tya				tya 								; calculate Y + length
.28da	18		clc				clc
.28db	65 32		adc $32				adc 	tempShort
.28dd	a8		tay				tay
.28de	a2 00		ldx #$00			ldx 	#0 							; where the first parameter goes - 1
.28e0					_CallProcEvalParams:
.28e0	e8		inx				inx
.28e1	b1 28		lda ($28),y			lda 	(codePtr),y 				; do we have ) , e.g. the end of the parameters ?
.28e3	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.28e5	f0 0b		beq $28f2			beq 	_CPDoneParams
.28e7	20 fd 31	jsr $31fd			jsr 	Evaluate 					; evaluate a parameter
.28ea	b1 28		lda ($28),y			lda 	(codePtr),Y 				; get what's next, preconsume
.28ec	c8		iny				iny
.28ed	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; if comma, go get another parameter
.28ef	f0 ef		beq $28e0			beq 	_CallProcEvalParams
.28f1	88		dey				dey 								; undo consumption.
.28f2					_CPDoneParams:
.28f2	20 27 39	jsr $3927			jsr 	CheckRightParen 			; check closing parenthesis.
.28f5	8e f6 0c	stx $0cf6			stx 	paramCount 					; store parameter count+1
.28f8	a2 04		ldx #$04			ldx 	#4							; make space on stack
.28fa	a9 50		lda #$50			lda 	#markerPROC
.28fc	20 4f 39	jsr $394f			jsr 	RSClaim
.28ff	a9 01		lda #$01			lda 	#1 							; store return address.
.2901	20 7b 39	jsr $397b			jsr 	RSSavePosition
.2904	68		pla				pla 								; get the new code Ptr
.2905	85 28		sta $28				sta 	codePtr
.2907	68		pla				pla
.2908	85 29		sta $29				sta 	codePtr+1
.290a	68		pla				pla 								; length of name + 4 is the param start.
.290b	18		clc				clc
.290c	69 04		adc #$04			adc 	#4
.290e	a8		tay				tay
.290f	a2 ff		ldx #$ff			ldx 	#$FF
.2911					_CPLoadParameters:
.2911	e8		inx				inx 								; point to where the address should be loaded.
.2912	ec f6 0c	cpx $0cf6			cpx 	paramCount 					; too many parameters in definition ?
.2915	f0 1e		beq $2935			beq 	_CPParamError
.2917	b1 28		lda ($28),y			lda 	(codePtr),y					; what follows
.2919	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN 				; is it the right bracket
.291b	f0 0e		beq $292b			beq 	_CPParamComplete 			; done all the parameters, perhaps.
.291d	20 e9 27	jsr $27e9			jsr 	LocaliseVariable 			; make following variable local, ref in tos,x
.2920	20 ac 25	jsr $25ac			jsr 	WriteValue 					; copy the evaluated parameter into there.
.2923	b1 28		lda ($28),y			lda 	(codePtr),y 				; followed by a comma ?
.2925	c8		iny				iny
.2926	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.2928	f0 e7		beq $2911			beq 	_CPLoadParameters
.292a	88		dey				dey 								; no, unconsume and check for )
.292b					_CPParamComplete:
.292b	20 27 39	jsr $3927			jsr 	CheckRightParen 			; check )
.292e	e8		inx				inx 								; check right number of parameters have been consumed
.292f	ec f6 0c	cpx $0cf6			cpx 	paramCount
.2932	d0 01		bne $2935			bne 	_CPParamError
.2934	60		rts				rts
.2935					_CPParamError:
.2935	a2 18		ldx #$18			ldx 	#ErrorID_Params
.2937	20 18 15	jsr $1518		jsr	errorHandler
.293a					ReturnProc:
.293a	20 5b 28	jsr $285b			jsr 	RestoreLocals 				; get the locals back.
.293d	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.293f	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.2941	c9 50		cmp #$50			cmp 	#markerPROC 						; does it match
.2943	f0 05		beq $294a			beq 	_isok
.2945	a2 12		ldx #$12			ldx 	#ErrorID_endProcErr
.2947	20 18 15	jsr $1518		jsr	errorHandler
.294a					_isok:
.294a	a9 01		lda #$01			lda 	#1
.294c	20 8e 39	jsr $398e			jsr 	RSLoadPosition 				; reload the position from offset 1.
.294f	a9 04		lda #$04			lda 	#4 							; throw 4 bytes from stack.
.2951	20 71 39	jsr $3971			jsr 	RSFree
.2954	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/proctable.asm

.0cf7					procList:
>0cf7							.fill 	2		 					; terminated by name high being zero.
.0cf9					yInLine:
>0cf9							.fill 	1
.2955					FindProcedure:
.2955	8c f9 0c	sty $0cf9			sty 	yInLine 					; save current position.
.2958	20 13 2a	jsr $2a13			jsr 	CalculateProcedureHash		; calculate the hash of the procedure.
.295b	85 2c		sta $2c				sta 	temp1
.295d	ad f7 0c	lda $0cf7			lda		procList 					; put procList address in temp2
.2960	85 2e		sta $2e				sta 	temp2
.2962	ad f8 0c	lda $0cf8			lda 	procList+1
.2965	85 2f		sta $2f				sta 	temp2+1
.2967	a0 00		ldy #$00			ldy 	#0 							; position in this table.
.2969					_FPLoop:
.2969	b1 2e		lda ($2e),y			lda 	(temp2),y
.296b	f0 4f		beq $29bc			beq 	_FPError 					; if so, we don't know this procedure.
.296d	85 2b		sta $2b				sta 	temp0+1 					; copy MSB/LSB to temp0 as we go.
.296f	c8		iny				iny
.2970	b1 2e		lda ($2e),y			lda 	(temp2),y
.2972	85 2a		sta $2a				sta 	temp0
.2974	c8		iny				iny
.2975	b1 2e		lda ($2e),y			lda 	(temp2),y					; check the procedure hash.
.2977	c5 2c		cmp $2c				cmp 	temp1
.2979	d0 2b		bne $29a6			bne 	_FPNext 					; hash is different, go to next.
.297b	38		sec				sec
.297c	ad f9 0c	lda $0cf9			lda 	yInLine 					; position in line must be at least 4
.297f	e9 04		sbc #$04			sbc 	#4
.2981	18		clc				clc
.2982	65 28		adc $28				adc 	codePtr
.2984	85 30		sta $30				sta 	temp3
.2986	a5 29		lda $29				lda 	codePtr+1
.2988	69 00		adc #$00			adc 	#0
.298a	85 31		sta $31				sta 	temp3+1
.298c	98		tya				tya
.298d	48		pha				pha
.298e	a0 04		ldy #$04			ldy 	#4
.2990					_FPCName:
.2990	b1 30		lda ($30),y			lda 	(temp3),y 					; check the same
.2992	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.2994	d0 0e		bne $29a4			bne 	_FPpulYNext 				; if different go to next one.
.2996	c8		iny				iny
.2997	c9 3a		cmp #$3a			cmp 	#$3A
.2999	90 f5		bcc $2990			bcc 	_FPCName 					; compare the whole lot....
.299b	68		pla				pla 								; throw away the saved Y
.299c	98		tya				tya 								; length of name is Y-4
.299d	38		sec				sec
.299e	e9 04		sbc #$04			sbc 	#4
.29a0	ac f9 0c	ldy $0cf9			ldy 	yInLine  					; get the original Y back
.29a3	60		rts				rts
.29a4					_FPpulYNext:
.29a4	68		pla				pla
.29a5	a8		tay				tay
.29a6					_FPNext:
.29a6	c8		iny				iny 								; next procedure record.
.29a7	10 c0		bpl $2969			bpl 	_FPLoop 					; if done 128 already ... e.g. Y -ve
.29a9	98		tya				tya 								; subtract 128 from Y
.29aa	38		sec				sec
.29ab	e9 80		sbc #$80			sbc 	#128
.29ad	a8		tay				tay
.29ae	18		clc				clc 								; add 128 to temp2, so we can have more than
.29af	a5 2e		lda $2e				lda 	temp2 						; 255/3 = 85 procedures
.29b1	69 80		adc #$80			adc 	#128
.29b3	85 2e		sta $2e				sta 	temp2
.29b5	90 b2		bcc $2969			bcc 	_FPLoop
.29b7	e6 2f		inc $2f				inc 	temp2+1
.29b9	4c 69 29	jmp $2969			jmp 	_FPLoop
.29bc					_FPError:
.29bc	a2 17		ldx #$17			ldx 	#ErrorID_NoProc
.29be	20 18 15	jsr $1518		jsr	errorHandler
.29c1					ScanProc:
.29c1	98		tya				tya
.29c2	48		pha				pha
.29c3	a5 35		lda $35				lda 	lowMemory 					; copy the start of the procList, at low memory
.29c5	8d f7 0c	sta $0cf7			sta 	procList
.29c8	a5 36		lda $36				lda 	lowMemory+1
.29ca	8d f8 0c	sta $0cf8			sta 	procList+1
.29cd	20 3d 2d	jsr $2d3d			jsr 	ResetCodeAddress 			; back to the start.
.29d0					_ScanLoop:
.29d0	a0 00		ldy #$00			ldy 	#0 							; check reached program end
.29d2	b1 28		lda ($28),y			lda 	(codePtr),y
.29d4	f0 2a		beq $2a00			beq 	_ScanExit
.29d6	a0 03		ldy #$03			ldy 	#3							; get first token
.29d8	b1 28		lda ($28),y			lda 	(codePtr),y
.29da	c9 9d		cmp #$9d			cmp 	#TKW_DEFPROC				; skip to next if not DEFPROC
.29dc	d0 12		bne $29f0			bne 	_ScanNext
.29de	a5 29		lda $29				lda 	codePtr+1 					; write high and low address of this line.
.29e0	20 08 2a	jsr $2a08			jsr 	_ScanWrite
.29e3	a5 28		lda $28				lda 	codePtr
.29e5	20 08 2a	jsr $2a08			jsr 	_ScanWrite
.29e8	a0 04		ldy #$04			ldy 	#4 							; start of name part
.29ea	20 13 2a	jsr $2a13			jsr 	CalculateProcedureHash 		; calculate procedure hash
.29ed	20 08 2a	jsr $2a08			jsr 	_ScanWrite					; and write that
.29f0					_ScanNext:
.29f0	18		clc				clc
.29f1	a0 00		ldy #$00			ldy 	#0
.29f3	b1 28		lda ($28),y			lda 	(codePtr),y
.29f5	65 28		adc $28				adc 	codePtr
.29f7	85 28		sta $28				sta 	codePtr
.29f9	90 d5		bcc $29d0			bcc 	_ScanLoop
.29fb	e6 29		inc $29				inc 	codePtr+1
.29fd	4c d0 29	jmp $29d0			jmp 	_ScanLoop
.2a00					_ScanExit:
.2a00	a9 00		lda #$00			lda 	#0 							; write ending zero.
.2a02	20 08 2a	jsr $2a08			jsr 	_ScanWrite
.2a05	68		pla				pla
.2a06	a8		tay				tay
.2a07	60		rts				rts
.2a08					_ScanWrite:
.2a08	a0 00		ldy #$00			ldy 	#0
.2a0a	91 35		sta ($35),y			sta 	(lowMemory),y
.2a0c	e6 35		inc $35				inc 	lowMemory
.2a0e	d0 02		bne $2a12			bne 	_SWNoCarry
.2a10	e6 36		inc $36				inc 	lowMemory+1
.2a12					_SWNoCarry:
.2a12	60		rts				rts
.2a13					CalculateProcedureHash:
.2a13	a9 00		lda #$00			lda 	#0 							; clear hash.
.2a15	85 2a		sta $2a				sta 	temp0
.2a17					_CPHLoop:
.2a17	18		clc				clc 								; add character and rotate and add carry back in
.2a18	b1 28		lda ($28),y			lda 	(codePtr),y
.2a1a	65 2a		adc $2a				adc 	temp0
.2a1c	6a		ror a				ror 	a
.2a1d	69 0d		adc #$0d			adc 	#13 						; primes usually good for this sort of thing.
.2a1f	85 2a		sta $2a				sta 	temp0 						; (down with this sort of thing)
.2a21	b1 28		lda ($28),y			lda 	(codePtr),y
.2a23	c8		iny				iny 								; advance incase we go round again.
.2a24	c9 3a		cmp #$3a			cmp 	#$3A
.2a26	90 ef		bcc $2a17			bcc 	_CPHLoop
.2a28	a5 2a		lda $2a				lda 	temp0
.2a2a	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/repeat.asm

.2a2b					Command_Repeat:
.2a2b	a2 04		ldx #$04			ldx 	#4 							; allocate 4 bytes on stack for REPEAT
.2a2d	a9 52		lda #$52			lda 	#markerREPEAT 				; repeat marker allocate 4 bytes
.2a2f	20 4f 39	jsr $394f			jsr 	RSClaim
.2a32	a9 01		lda #$01			lda 	#1 							; save position at offset 1.
.2a34	20 7b 39	jsr $397b			jsr 	RSSavePosition
.2a37	60		rts				rts
.2a38					Command_Until:
.2a38	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.2a3a	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.2a3c	c9 52		cmp #$52			cmp 	#markerREPEAT 						; does it match
.2a3e	f0 05		beq $2a45			beq 	_isok
.2a40	a2 0f		ldx #$0f			ldx 	#ErrorID_untilErr
.2a42	20 18 15	jsr $1518		jsr	errorHandler
.2a45					_isok:
.2a45	20 1a 32	jsr $321a			jsr 	EvaluateRootInteger 		; at the bottom.
.2a48	20 db 38	jsr $38db			jsr 	MInt32Zero					; check if TOS zero
.2a4b	d0 06		bne $2a53			bne 	_CUExit
.2a4d	a9 01		lda #$01			lda 	#1
.2a4f	20 8e 39	jsr $398e			jsr 	RSLoadPosition 				; reload the position from offset 1.
.2a52	60		rts				rts
.2a53					_CUExit:
.2a53	a9 04		lda #$04			lda 	#4 							; throw 4 bytes from stack.
.2a55	20 71 39	jsr $3971			jsr 	RSFree
.2a58	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/scanner.asm

.2a59					ScanForward:
.2a59	85 2c		sta $2c				sta 	temp1 						; save tokens to search in temp1/temp1+1
.2a5b	86 2d		stx $2d				stx 	temp1+1
.2a5d	a9 00		lda #$00			lda 	#0 							; temp2 counts structure levels.
.2a5f	85 2e		sta $2e				sta 	temp2
.2a61	b1 28		lda ($28),y	_SFLoop:lda 	(codePtr),y 				; look at the next token.
.2a63	c8		iny				iny
.2a64	a6 2e		ldx $2e				ldx 	temp2 						; check structure levels are zero.
.2a66	d0 08		bne $2a70			bne 	_SFNoCheck 					; if so, check token against entered values.
.2a68	c5 2c		cmp $2c				cmp 	temp1 						; if either matches, we've reached the token
.2a6a	f0 24		beq $2a90			beq 	_SFExit 					; at the same strcture depth.
.2a6c	c5 2d		cmp $2d				cmp 	temp1+1
.2a6e	f0 20		beq $2a90			beq 	_SFExit
.2a70					_SFNoCheck:
.2a70	c9 80		cmp #$80			cmp 	#$80 						; if it is 00-7F (variable/number) just skip it.
.2a72	90 ed		bcc $2a61			bcc 	_SFLoop
.2a74	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; $80-$85 is various specials.
.2a76	90 19		bcc $2a91			bcc 	_SFSpecials
.2a78	c9 99		cmp #$99			cmp 	#TOK_STRUCTST 				; if < structure start then continue
.2a7a	90 e5		bcc $2a61			bcc 	_SFLoop
.2a7c	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST 				; if >= unary start (after structure) then continue.
.2a7e	b0 e1		bcs $2a61			bcs 	_SFLoop
.2a80	aa		tax				tax  								; token in X, and look up the adjuster.
.2a81	bd 38 31	lda $3138,x			lda 	ELBinaryOperatorInfo-TOK_BINARYST,x
.2a84	38		sec				sec 								; convert to an offset ($FF,$01)
.2a85	e9 81		sbc #$81			sbc 	#$81
.2a87	18		clc				clc 								; add to depth
.2a88	65 2e		adc $2e				adc 	temp2
.2a8a	85 2e		sta $2e				sta 	temp2
.2a8c	10 d3		bpl $2a61			bpl 	_SFLoop 					; +ve okay to continue
.2a8e	30 07		bmi $2a97			bmi 	SFError 					; if gone -ve then we have a nesting error
.2a90	60		rts		_SFExit:rts
.2a91					_SFSpecials:
.2a91	20 9c 2a	jsr $2a9c			jsr 	ScannerSkipSpecial
.2a94	4c 61 2a	jmp $2a61			jmp 	_SFLoop
.2a97					SFError:
.2a97	a2 14		ldx #$14			ldx 	#ErrorID_Struct
.2a99	20 18 15	jsr $1518		jsr	errorHandler
.2a9c					ScannerSkipSpecial:
.2a9c	c9 80		cmp #$80			cmp 	#TOK_EOL 					; $80, advance to next line.
.2a9e	f0 10		beq $2ab0			beq 	_SFNextLine
.2aa0	c9 84		cmp #$84			cmp 	#TOK_FPC					; $84, skip embedded float
.2aa2	f0 2b		beq $2acf			beq 	_SFFloatSkip
.2aa4	c9 85		cmp #$85			cmp 	#TOK_STR 					; $85, skip string
.2aa6	f0 02		beq $2aaa			beq 	_SFSkipString
.2aa8	c8		iny				iny									; $81,$82,$83 shift, so just advance over the shifted
.2aa9	60		rts				rts 								; token.
.2aaa					_SFSkipString:
.2aaa	98		tya				tya
.2aab	38		sec				sec
.2aac	71 28		adc ($28),y			adc 	(codePtr),y
.2aae	a8		tay				tay
.2aaf	60		rts				rts
.2ab0					_SFNextLine:
.2ab0	a0 00		ldy #$00			ldy 	#0 							; get offset
.2ab2	b1 28		lda ($28),y			lda 	(codePtr),y
.2ab4	18		clc				clc 								; add to code pointer.
.2ab5	65 28		adc $28				adc 	codePtr
.2ab7	85 28		sta $28				sta 	codePtr
.2ab9	90 02		bcc $2abd			bcc		_SFNLNoCarry
.2abb	e6 29		inc $29				inc 	codePtr+1
.2abd					_SFNLNoCarry:
.2abd	b1 28		lda ($28),y			lda 	(codePtr),y 				; reached the end of the program.
.2abf	d0 0b		bne $2acc			bne		_SFXNL 						; no go round again
.2ac1	a5 2c		lda $2c				lda 	temp1
.2ac3	c9 d9		cmp #$d9			cmp 	#TKW_DATA 					; if searching for Data different error.
.2ac5	d0 d0		bne $2a97			bne 	SFError 					; read uses this to search for data statements
.2ac7	a2 1d		ldx #$1d			ldx 	#ErrorID_DataError
.2ac9	20 18 15	jsr $1518		jsr	errorHandler
.2acc	a0 03		ldy #$03	_SFXNL:	ldy 	#3
.2ace	60		rts				rts
.2acf					_SFFloatSkip:
.2acf	98		tya				tya 								; skip over an embedded float.
.2ad0	18		clc				clc
.2ad1	69 05		adc #$05			adc 	#FloatEmbeddedSize
.2ad3	a8		tay				tay
.2ad4	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/while.asm

.2ad5					Command_While:
.2ad5	a9 57		lda #$57			lda 	#markerWhile 				; gosub marker allocate 4 bytes.
.2ad7	a2 04		ldx #$04			ldx 	#4
.2ad9	20 4f 39	jsr $394f			jsr 	RSClaim 					; create on stack.
.2adc	88		dey				dey
.2add	a9 01		lda #$01			lda 	#1
.2adf	20 7b 39	jsr $397b			jsr 	RSSavePosition 				; save position before the WHILE keyword.
.2ae2	c8		iny				iny
.2ae3	20 1a 32	jsr $321a			jsr 	EvaluateRootInteger			; get the conditional
.2ae6	20 db 38	jsr $38db			jsr 	MInt32Zero 	 				; if zero, skip forward to the fail code.
.2ae9	f0 01		beq $2aec			beq 	_CWFail
.2aeb	60		rts				rts
.2aec					_CWFail:
.2aec	a9 04		lda #$04			lda 	#4
.2aee	20 71 39	jsr $3971			jsr 	RSFree 						; close the just opened position.
.2af1	a9 9f		lda #$9f			lda 	#TKW_WEND 					; scan forward past WEND.
.2af3	aa		tax				tax
.2af4	20 59 2a	jsr $2a59			jsr 	ScanForward
.2af7	60		rts				rts
.2af8					Command_Wend:
.2af8	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.2afa	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.2afc	c9 57		cmp #$57			cmp 	#markerWHILE 						; does it match
.2afe	f0 05		beq $2b05			beq 	_isok
.2b00	a2 11		ldx #$11			ldx 	#ErrorID_wendErr
.2b02	20 18 15	jsr $1518		jsr	errorHandler
.2b05					_isok:
.2b05	a9 01		lda #$01			lda 	#1
.2b07	20 8e 39	jsr $398e			jsr 	RSLoadPosition				; go back until true
.2b0a	a9 04		lda #$04			lda 	#4
.2b0c	20 71 39	jsr $3971			jsr 	RSFree 						; close the loop
.2b0f	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/system/clear.asm

.2b10					CommandClear:
.2b10					XCommandClear:
.2b10	98		tya				tya
.2b11	48		pha				pha
.2b12	ad cc 0a	lda $0acc			lda 	endMemory					; set high memory = end of memory
.2b15	85 33		sta $33				sta 	highMemory
.2b17	ad cd 0a	lda $0acd			lda 	endMemory+1
.2b1a	85 34		sta $34				sta 	highMemory+1
.2b1c	ad c8 0a	lda $0ac8			lda 	basePage 					; work out where the program ends.
.2b1f	85 2a		sta $2a				sta 	temp0
.2b21	ad c9 0a	lda $0ac9			lda 	basePage+1
.2b24	85 2b		sta $2b				sta 	temp0+1
.2b26					_CCFindEnd:
.2b26	a0 00		ldy #$00			ldy 	#0
.2b28	b1 2a		lda ($2a),y			lda 	(temp0),y
.2b2a	f0 0c		beq $2b38			beq 	_CCFoundEnd 				; offset zero is end.
.2b2c	18		clc				clc
.2b2d	65 2a		adc $2a				adc 	temp0 						; move to next line
.2b2f	85 2a		sta $2a				sta 	temp0
.2b31	90 f3		bcc $2b26			bcc 	_CCFindEnd
.2b33	e6 2b		inc $2b				inc 	temp0+1
.2b35	4c 26 2b	jmp $2b26			jmp 	_CCFindEnd
.2b38					_CCFoundEnd:
.2b38	a5 2a		lda $2a				lda 	temp0 						; put temp0 in lowMemory
.2b3a	85 35		sta $35				sta 	lowMemory
.2b3c	a5 2b		lda $2b				lda 	temp0+1
.2b3e	85 36		sta $36				sta 	lowMemory+1
.2b40	18		clc				clc 								; put temp0+1 in endProgram
.2b41	a5 2a		lda $2a				lda 	temp0
.2b43	69 01		adc #$01			adc 	#1
.2b45	8d ca 0a	sta $0aca			sta 	endProgram
.2b48	a5 2b		lda $2b				lda 	temp0+1
.2b4a	69 00		adc #$00			adc 	#0
.2b4c	8d cb 0a	sta $0acb			sta 	endProgram+1
.2b4f	18		clc				clc 								; put a bit of space in.
.2b50	a5 35		lda $35				lda 	lowMemory
.2b52	69 04		adc #$04			adc 	#4
.2b54	85 35		sta $35				sta 	lowMemory
.2b56	90 02		bcc $2b5a			bcc 	_CCNoCarry
.2b58	e6 36		inc $36				inc 	lowMemory+1
.2b5a					_CCNoCarry:
.2b5a	20 41 39	jsr $3941			jsr 	RSReset 					; reset the return stack.
.2b5d	a2 06		ldx #$06		ldx	#6
.2b5f	20 8f 48	jsr $488f		jsr	variableHandler
.2b62	20 c1 29	jsr $29c1			jsr 	ScanProc 					; scan for procedures
.2b65	20 46 23	jsr $2346			jsr 	CommandRestore 				; do a restore
.2b68	68		pla				pla
.2b69	a8		tay				tay
.2b6a	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/system/list.asm

.0cfa					structIndent:
>0cfa							.fill 	1
.2b6b					CommandList:
.2b6b	a2 00		ldx #$00			ldx		#0 							; set start/end lines in stack 0/1 to 0 and $FFFF
.2b6d	8e fa 0c	stx $0cfa			stx 	structIndent
.2b70	20 b4 38	jsr $38b4			jsr 	MInt32False
.2b73	e8		inx				inx
.2b74	20 b0 38	jsr $38b0			jsr 	MInt32True
.2b77	b1 28		lda ($28),y			lda 	(codePtr),y 				; look at first token
.2b79	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; list ,xxxx
.2b7b	f0 15		beq $2b92			beq 	_CLEndLine
.2b7d	c9 00		cmp #$00			cmp 	#0 							; list ... on its own.
.2b7f	30 1b		bmi $2b9c			bmi 	_CLDoListing 				; do the whole lot.
.2b81	a2 00		ldx #$00			ldx 	#0 							; get start line at stack:0
.2b83	20 1c 32	jsr $321c			jsr 	EvaluateInteger
.2b86	b1 28		lda ($28),y			lda 	(codePtr),y 				; , follows ?
.2b88	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.2b8a	f0 06		beq $2b92			beq 	_CLEndLine
.2b8c	20 f2 37	jsr $37f2			jsr 	MInt32CopyUp 				; copy first to second if just a line number on its
.2b8f	4c 9c 2b	jmp $2b9c			jmp 	_CLDoListing 				; own e.g. list 1100
.2b92					_CLEndLine:
.2b92	c8		iny				iny 								; skip comma
.2b93	b1 28		lda ($28),y			lda 	(codePtr),y  				; no number follows, then its list 1000,
.2b95	30 05		bmi $2b9c			bmi 	_CLDoListing
.2b97	a2 01		ldx #$01			ldx 	#1 							; get the last line to list
.2b99	20 1c 32	jsr $321c			jsr 	EvaluateInteger				; get end
.2b9c					_CLDoListing:
.2b9c	20 3d 2d	jsr $2d3d			jsr 	ResetCodeAddress 			; back to the start.
.2b9f					_CLCheckLoop:
.2b9f	a2 02		ldx #$02		ldx	#2
.2ba1	20 f6 14	jsr $14f6		jsr	deviceHandler
.2ba4	a0 00		ldy #$00			ldy 	#0							; check end.
.2ba6	b1 28		lda ($28),y			lda 	(codePtr),y
.2ba8	f0 41		beq $2beb			beq 	_CLEnd
.2baa	a2 00		ldx #$00			ldx 	#0 							; compare vs lower.
.2bac	20 ee 2b	jsr $2bee			jsr 	CLCompareLineTOS
.2baf	c9 ff		cmp #$ff			cmp 	#255 						; if < skip
.2bb1	f0 28		beq $2bdb			beq 	_CLNext
.2bb3	e8		inx				inx
.2bb4	20 ee 2b	jsr $2bee			jsr 	CLCompareLineTOS 			; compare vs higher
.2bb7	c9 01		cmp #$01			cmp 	#1
.2bb9	f0 20		beq $2bdb			beq 	_CLNext
.2bbb	a9 80		lda #$80			lda 	#$80 						; undo any down indents this line.
.2bbd	20 10 2c	jsr $2c10			jsr 	CLStructureCheck
.2bc0	ad fa 0c	lda $0cfa			lda 	structIndent 				; indent level.
.2bc3	10 02		bpl $2bc7			bpl 	_CLPositive
.2bc5	a9 00		lda #$00			lda 	#0
.2bc7					_CLPositive:
.2bc7	a2 04		ldx #$04		ldx	#4
.2bc9	20 be 44	jsr $44be		jsr	tokeniserHandler
.2bcc	a9 82		lda #$82			lda 	#$82 						; up indents from this point on.
.2bce	20 10 2c	jsr $2c10			jsr 	CLStructureCheck
.2bd1	ad fa 0c	lda $0cfa			lda 	structIndent
.2bd4	10 05		bpl $2bdb			bpl 	_CLNext
.2bd6	a9 00		lda #$00			lda 	#0
.2bd8	8d fa 0c	sta $0cfa			sta 	structIndent
.2bdb					_CLNext:
.2bdb	a0 00		ldy #$00			ldy 	#0 							; go to next line.
.2bdd	b1 28		lda ($28),y			lda 	(codePtr),y
.2bdf	18		clc				clc
.2be0	65 28		adc $28				adc 	codePtr
.2be2	85 28		sta $28				sta 	codePtr
.2be4	90 b9		bcc $2b9f			bcc 	_CLCheckLoop
.2be6	e6 29		inc $29				inc 	codePtr+1
.2be8	4c 9f 2b	jmp $2b9f			jmp 	_CLCheckLoop
.2beb					_CLEnd:
.2beb	4c 9d 39	jmp $399d			jmp 	WarmStart 					; warm start after list.
.2bee					CLCompareLineTOS:
.2bee	a0 01		ldy #$01			ldy 	#1
.2bf0	b1 28		lda ($28),y			lda 	(codePtr),y
.2bf2	55 98		eor $98,x			eor 	esInt0,x
.2bf4	85 2a		sta $2a				sta 	temp0
.2bf6	c8		iny				iny
.2bf7	b1 28		lda ($28),y			lda 	(codePtr),y
.2bf9	55 a0		eor $a0,x			eor 	esInt1,x
.2bfb	05 2a		ora $2a				ora 	temp0
.2bfd	f0 10		beq $2c0f			beq 	_CLCLTExit
.2bff	88		dey				dey
.2c00	b1 28		lda ($28),y			lda 	(codePtr),y
.2c02	d5 98		cmp $98,x			cmp 	esInt0,x
.2c04	c8		iny				iny
.2c05	b1 28		lda ($28),y			lda 	(codePtr),y
.2c07	f5 a0		sbc $a0,x			sbc 	esInt1,x
.2c09	a9 ff		lda #$ff			lda 	#255
.2c0b	90 02		bcc $2c0f			bcc 	_CLCLTExit
.2c0d	a9 01		lda #$01			lda 	#1
.2c0f					_CLCLTExit:
.2c0f	60		rts				rts
.2c10					CLStructureCheck:
.2c10	85 2a		sta $2a				sta 	temp0
.2c12	a0 03		ldy #$03			ldy 	#3
.2c14					_CLSCLoop:
.2c14	b1 28		lda ($28),y			lda 	(codePtr),y 				; get and consume token.
.2c16	c8		iny				iny
.2c17	c9 80		cmp #$80			cmp 	#$80
.2c19	90 f9		bcc $2c14			bcc 	_CLSCLoop 					; $00-$7F just step over.
.2c1b	f0 28		beq $2c45			beq		_CLSCExit					; EOL return
.2c1d	c9 86		cmp #$86			cmp 	#$86 						; special handler
.2c1f	90 1e		bcc $2c3f			bcc 	_CLSCSpecial
.2c21	c9 99		cmp #$99			cmp 	#TOK_STRUCTST 				; check if structure changer.
.2c23	90 ef		bcc $2c14			bcc 	_CLSCLoop
.2c25	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST
.2c27	b0 eb		bcs $2c14			bcs 	_CLSCLoop
.2c29	aa		tax				tax 								; get adjustment
.2c2a	bd 38 31	lda $3138,x			lda 	ELBinaryOperatorInfo-TOK_BINARYST,x
.2c2d	c5 2a		cmp $2a				cmp 	temp0	 					; if what we're searching for
.2c2f	d0 e3		bne $2c14			bne 	_CLSCLoop
.2c31	38		sec				sec
.2c32	e9 81		sbc #$81			sbc 	#$81 						; convert to offset
.2c34	0a		asl a				asl 	a 							; double indent step
.2c35	18		clc				clc
.2c36	6d fa 0c	adc $0cfa			adc 	structIndent 				; add to structure indent
.2c39	8d fa 0c	sta $0cfa			sta 	structIndent
.2c3c	4c 14 2c	jmp $2c14			jmp 	_CLSCLoop
.2c3f					_CLSCSpecial:
.2c3f	20 9c 2a	jsr $2a9c			jsr 	ScannerSkipSpecial
.2c42	4c 14 2c	jmp $2c14			jmp 	_CLSCLoop
.2c45					_CLSCExit:
.2c45	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/system/loadsave.asm

.2c46					CommandLoad:
.2c46	20 6e 2c	jsr $2c6e			jsr 	CLSParameters 					; get parameters for load.
.2c49	08		php				php
.2c4a	a2 0e		ldx #$0e		ldx	#14
.2c4c	20 f6 14	jsr $14f6		jsr	deviceHandler
.2c4f	28		plp				plp
.2c50	b0 08		bcs $2c5a			bcs 	_CLExit 						; if CC then load a program, so warm start.
.2c52	20 10 2b	jsr $2b10			jsr 	CommandClear
.2c55	a2 04		ldx #$04		ldx	#4
.2c57	20 08 23	jsr $2308		jsr	interactionHandler
.2c5a					_CLExit
.2c5a	60		rts				rts
.2c5b					CommandSave:
.2c5b	20 6e 2c	jsr $2c6e			jsr 	CLSParameters					; get parameters for save
.2c5e	90 08		bcc $2c68			bcc 	_CSNoOverrideAddress
.2c60	20 34 39	jsr $3934			jsr 	CheckComma 						; should be a comma.
.2c63	a2 02		ldx #$02			ldx 	#2
.2c65	20 1c 32	jsr $321c			jsr 	EvaluateInteger 				; get save end address.
.2c68					_CSNoOverrideAddress:
.2c68	a2 18		ldx #$18		ldx	#24
.2c6a	20 f6 14	jsr $14f6		jsr	deviceHandler
.2c6d	60		rts				rts
.2c6e					CLSParameters:
.2c6e	a2 00		ldx #$00			ldx 	#0 								; string
.2c70	20 11 32	jsr $3211			jsr 	EvaluateString
.2c73	e8		inx				inx 									; erase out +1 +2
.2c74	20 b4 38	jsr $38b4			jsr 	MInt32False
.2c77	e8		inx				inx
.2c78	20 b4 38	jsr $38b4			jsr 	MInt32False
.2c7b	ad c8 0a	lda $0ac8			lda 	basePage 						; default start address.
.2c7e	85 99		sta $99				sta 	esInt0+1
.2c80	ad c9 0a	lda $0ac9			lda 	basePage+1
.2c83	85 a1		sta $a1				sta 	esInt1+1
.2c85	ad ca 0a	lda $0aca			lda 	endProgram 						; default end address
.2c88	85 9a		sta $9a				sta 	esInt0+2
.2c8a	ad cb 0a	lda $0acb			lda 	endProgram+1
.2c8d	85 a2		sta $a2				sta 	esInt1+2
.2c8f	b1 28		lda ($28),y			lda 	(codePtr),y 					; , following
.2c91	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.2c93	d0 08		bne $2c9d			bne 	_CLSDefault
.2c95	c8		iny				iny 									; skip comma
.2c96	a2 01		ldx #$01			ldx 	#1 								; get numeric value.
.2c98	20 1c 32	jsr $321c			jsr 	EvaluateInteger
.2c9b	38		sec				sec
.2c9c	60		rts				rts
.2c9d					_CLSDefault:
.2c9d	18		clc				clc
.2c9e	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/system/new.asm

.2c9f					Command_New:
.2c9f					Command_XNew:
.2c9f	20 3d 2d	jsr $2d3d			jsr 	ResetCodeAddress 			; point to first line
.2ca2	a0 00		ldy #$00			ldy 	#0 							; and zap it.
.2ca4	98		tya				tya
.2ca5	91 28		sta ($28),y			sta 	(codePtr),y
.2ca7	20 10 2b	jsr $2b10			jsr 	CommandClear 				; clear everything down.
.2caa	4c 66 26	jmp $2666			jmp 	CommandEND 					; do END code, as there's nothing to run.

;******  Return to file: main/main.asm


;******  Processing file: main/commands/system/run.asm

.0cfb					breakCounter:
>0cfb								.fill 	1
.0cfc					breakIncrement:
>0cfc								.fill 	1
.2cad					Command_Run:
.2cad					XCommand_Run:
.2cad	a2 ff		ldx #$ff			ldx 	#$FF 						; reset the stack.
.2caf	9a		txs				txs
.2cb0	20 37 2d	jsr $2d37			jsr 	BreakOn 					; turn break on
.2cb3	20 10 2b	jsr $2b10			jsr 	CommandClear 				; clear everything.
.2cb6	20 3d 2d	jsr $2d3d			jsr 	ResetCodeAddress 			; back to the start.
.2cb9					Command_RunFrom:
.2cb9	a0 03		ldy #$03			ldy 	#3 							; over offset/line #
.2cbb					CRNextInstruction:
.2cbb	64 3a		stz $3a				stz 	softMemAlloc+1
.2cbd	ad fb 0c	lda $0cfb			lda 	breakCounter 				; check for break.
.2cc0	6d fc 0c	adc $0cfc			adc 	breakIncrement
.2cc3	8d fb 0c	sta $0cfb			sta 	breakCounter
.2cc6	90 05		bcc $2ccd			bcc 	_CRNoChecks
.2cc8	a2 02		ldx #$02		ldx	#2
.2cca	20 f6 14	jsr $14f6		jsr	deviceHandler
.2ccd					_CRNoChecks
.2ccd	b1 28		lda ($28),y			lda 	(codePtr),y 				; get next token.
.2ccf	10 1c		bpl $2ced			bpl 	_CRNotToken
.2cd1	c9 c9		cmp #$c9			cmp 	#TOK_TOKENS 				; if in the tokens then do that token.
.2cd3	b0 0c		bcs $2ce1			bcs 	_CRExecute
.2cd5	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST 				; unary is ignored.
.2cd7	b0 71		bcs $2d4a			bcs 	Unimplemented
.2cd9	c9 99		cmp #$99			cmp 	#TOK_STRUCTST 				; execute structures.
.2cdb	b0 04		bcs $2ce1			bcs 	_CRExecute
.2cdd	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; if one of the system tokens $80-$85 do that
.2cdf	b0 16		bcs $2cf7			bcs 	_CRCheckIndirect 			; if in that unused range check for ! or ? or AND
.2ce1					_CRExecute:
.2ce1	c8		iny				iny 								; consume it.
.2ce2	0a		asl a				asl 	a 							; double it, losing most significant bit.
.2ce3	aa		tax				tax
.2ce4	20 ea 2c	jsr $2cea			jsr 	_CRRunRoutine 				; we want to do jsr (group0vectors,x)
.2ce7	4c bb 2c	jmp $2cbb			jmp 	CRNextInstruction
.2cea					_CRRunRoutine:
.2cea	7c 54 2d	jmp ($2d54,x)			jmp 	(Group0Vectors,x)
.2ced					_CRNotToken:
.2ced	c9 40		cmp #$40			cmp 	#$40 						; if 0-3F then it is a letter
.2cef	b0 59		bcs $2d4a			bcs 	Unimplemented
.2cf1					_CRDefaultLet:
.2cf1	20 99 25	jsr $2599			jsr 	CommandLet 					; do the default, LET
.2cf4	4c bb 2c	jmp $2cbb			jmp 	CRNextInstruction
.2cf7					_CRCheckIndirect:
.2cf7	c9 86		cmp #$86			cmp 	#TKW_AND 					; AND (assembler)
.2cf9	f0 0a		beq $2d05			beq 	_CRAndCommand
.2cfb	c9 97		cmp #$97			cmp 	#TKW_PLING 					; !<term> =
.2cfd	f0 f2		beq $2cf1			beq 	_CRDefaultLet
.2cff	c9 98		cmp #$98			cmp 	#TKW_QMARK 					; ?<term> =
.2d01	f0 ee		beq $2cf1			beq 	_CRDefaultLet
.2d03	d0 45		bne $2d4a			bne 	Unimplemented
.2d05					_CRAndCommand:
.2d05	c8		iny				iny 								; skip over the AND token
.2d06	a9 95		lda #$95			lda 	#TKW_LPARENANDRPAREN 		; replace it with the pseudo-and
.2d08	20 22 2d	jsr $2d22			jsr 	CommandAssembler 			; do the assembler command
.2d0b	4c bb 2c	jmp $2cbb			jmp 	CRNextInstruction 			; and loop round.
.2d0e					CommandShift1:
.2d0e	b1 28		lda ($28),y			lda 	(codePtr),y 				; get shifted value
.2d10	10 38		bpl $2d4a			bpl 	Unimplemented 				; we have an error as this should not happen.
.2d12	c8		iny				iny 								; advance over it.
.2d13	c9 94		cmp #$94			cmp 	#TKA_GROUP1 				; is it an assembler constant ?
.2d15	b0 0b		bcs $2d22			bcs 	CommandAssembler
.2d17	0a		asl a				asl 	a 							; double into X
.2d18	aa		tax				tax
.2d19	7c 18 2e	jmp ($2e18,x)			jmp 	(Group1Vectors-12,x) 		; and do the code.
.2d1c					CommandShift2:
.2d1c	a9 ff		lda #$ff			lda 	#$FF 						; $FF means command not unary function.
.2d1e	20 69 18	jsr $1869		jsr	extensionHandler
.2d21	60		rts				rts
.2d22					CommandAssembler:
.2d22	a2 02		ldx #$02		ldx	#2
.2d24	20 b4 13	jsr $13b4		jsr	assemblerHandler
.2d27	60		rts				rts
.2d28					CommandAssemblerLabel:
.2d28	a2 04		ldx #$04		ldx	#4
.2d2a	20 b4 13	jsr $13b4		jsr	assemblerHandler
.2d2d	60		rts				rts
.2d2e					CommandColon:
.2d2e	60		rts				rts
.2d2f					CommandBreak:
.2d2f	20 1a 32	jsr $321a			jsr 	EvaluateRootInteger
.2d32	20 db 38	jsr $38db			jsr 	MInt32Zero
.2d35	f0 02		beq $2d39			beq 	BreakOff
.2d37					BreakOn:
.2d37	a2 08		ldx #$08			ldx 	#8
.2d39					BreakOff:
.2d39	8e fc 0c	stx $0cfc			stx 	breakIncrement
.2d3c	60		rts				rts
.2d3d					ResetCodeAddress:
.2d3d	ad c8 0a	lda $0ac8			lda 	basePage 					; copy basePage to code Pointer
.2d40	85 28		sta $28				sta 	codePtr
.2d42	ad c9 0a	lda $0ac9			lda 	basePage+1
.2d45	85 29		sta $29				sta 	codePtr+1
.2d47	a0 03		ldy #$03			ldy 	#3 							; offset after offset link and line#
.2d49	60		rts				rts
.2d4a					Unimplemented:
.2d4a	a2 01		ldx #$01			ldx 	#ErrorID_Missing
.2d4c	20 18 15	jsr $1518		jsr	errorHandler
.2d4f					TKErr01:
.2d4f					TKErr02:
.2d4f					TKErr03:
.2d4f					TKErr04:
.2d4f					TKErr05:
.2d4f					TKErr06:
.2d4f					TKErr07:
.2d4f					TKErr08:
.2d4f					TKErr09:
.2d4f					TKErr10:
.2d4f					TKErr11:
.2d4f					TKErr12:
.2d4f					TKErr13:
.2d4f					TKErr14:
.2d4f	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.2d51	20 18 15	jsr $1518		jsr	errorHandler

;******  Processing file: main/commands/system/../../../generated/tokenvectors0.inc

.2d54					Group0Vectors:
>2d54	6c 26					.word	AdvanceNextLine          ; $80 [[eol]]
>2d56	0e 2d					.word	CommandShift1            ; $81 [[sh1]]
>2d58	1c 2d					.word	CommandShift2            ; $82 [[sh2]]
>2d5a	4f 2d					.word	TKErr09                  ; $83 [[sh3]]
>2d5c	4f 2d					.word	TKErr10                  ; $84 [[fpc]]
>2d5e	4f 2d					.word	TKErr08                  ; $85 [[str]]
>2d60	01 2f					.word	AndHandler               ; $86 and
>2d62	ee 2e					.word	OrHandler                ; $87 or
>2d64	db 2e					.word	XorHandler               ; $88 xor
>2d66	23 30					.word	CompareGreaterEq         ; $89 >=
>2d68	2d 30					.word	CompareLessEq            ; $8a <=
>2d6a	0f 30					.word	CompareGreater           ; $8b >
>2d6c	05 30					.word	CompareLess              ; $8c <
>2d6e	fb 2f					.word	CompareEquals            ; $8d =
>2d70	19 30					.word	CompareNotEquals         ; $8e <>
>2d72	6c 2e					.word	AddHandler               ; $8f +
>2d74	8f 2e					.word	SubHandler               ; $90 -
>2d76	27 2f					.word	ShrHandler               ; $91 >>
>2d78	14 2f					.word	ShlHandler               ; $92 <<
>2d7a	a2 2e					.word	MulHandler               ; $93 *
>2d7c	b5 2e					.word	DivHandler               ; $94 /
>2d7e	c8 2e					.word	ModHandler               ; $95 mod
>2d80	60 2f					.word	PowerHandler             ; $96 ^
>2d82	3a 2f					.word	WordRefHandler           ; $97 !
>2d84	4d 2f					.word	ByteRefHandler           ; $98 ?
>2d86	2b 2a					.word	Command_Repeat           ; $99 repeat
>2d88	d5 2a					.word	Command_While            ; $9a while
>2d8a	80 26					.word	Command_FOR              ; $9b for
>2d8c	8f 27					.word	CommandIf                ; $9c if
>2d8e	4f 2d					.word	TKErr04                  ; $9d defproc
>2d90	38 2a					.word	Command_Until            ; $9e until
>2d92	f8 2a					.word	Command_Wend             ; $9f wend
>2d94	e1 26					.word	Command_NEXT             ; $a0 next
>2d96	4f 2d					.word	TKErr06                  ; $a1 then
>2d98	ca 27					.word	Command_ENDIF            ; $a2 endif
>2d9a	3a 29					.word	ReturnProc               ; $a3 endproc
>2d9c	87 31					.word	UnaryParenthesis         ; $a4 (
>2d9e	69 33					.word	UnaryLen                 ; $a5 len(
>2da0	ad 33					.word	UnarySgn                 ; $a6 sgn(
>2da2	96 33					.word	UnaryAbs                 ; $a7 abs(
>2da4	06 34					.word	Unary_Random             ; $a8 random(
>2da6	50 34					.word	Unary_Page               ; $a9 page
>2da8	b0 38					.word	MInt32True               ; $aa true
>2daa	b4 38					.word	MInt32False              ; $ab false
>2dac	1b 34					.word	Unary_Min                ; $ac min(
>2dae	1f 34					.word	Unary_Max                ; $ad max(
>2db0	28 35					.word	UnarySys                 ; $ae sys(
>2db2	d1 34					.word	UnaryTimer               ; $af timer(
>2db4	e6 32					.word	EventFunction            ; $b0 event(
>2db6	fa 34					.word	UnaryGet                 ; $b1 get(
>2db8	ea 34					.word	UnaryInkey               ; $b2 inkey(
>2dba	a1 34					.word	UnaryAlloc               ; $b3 alloc(
>2dbc	61 35					.word	ExecChr                  ; $b4 chr$(
>2dbe	91 35					.word	ExecLeft                 ; $b5 left$(
>2dc0	ae 35					.word	ExecMid                  ; $b6 mid$(
>2dc2	d6 35					.word	ExecRight                ; $b7 right$(
>2dc4	68 32					.word	Event_Str                ; $b8 str$(
>2dc6	97 32					.word	UnaryVal                 ; $b9 val(
>2dc8	c4 33					.word	UnaryPeek                ; $ba peek(
>2dca	ca 33					.word	UnaryDeek                ; $bb deek(
>2dcc	d0 33					.word	UnaryLeek                ; $bc leek(
>2dce	87 33					.word	UnaryAsc                 ; $bd asc(
>2dd0	7b 34					.word	UnaryIntToFloat          ; $be int(
>2dd2	8e 34					.word	UnaryFloatToInt          ; $bf float(
>2dd4	9a 32					.word	UnaryIsVal               ; $c0 isval(
>2dd6	78 35					.word	ExecUpper                ; $c1 upper$(
>2dd8	75 35					.word	ExecLower                ; $c2 lower$(
>2dda	5e 34					.word	UnaryReference           ; $c3 @
>2ddc	74 34					.word	UnaryComplement          ; $c4 ~
>2dde	71 34					.word	UnaryHexMarker           ; $c5 &
>2de0	13 35					.word	UnaryGetString           ; $c6 get$(
>2de2	19 35					.word	UnaryInkeyString         ; $c7 inkey$(
>2de4	50 35					.word	UnaryMem                 ; $c8 mem
>2de6	4f 2d					.word	TKErr01                  ; $c9 )
>2de8	2e 2d					.word	CommandColon             ; $ca :
>2dea	4f 2d					.word	TKErr02                  ; $cb ,
>2dec	4f 2d					.word	TKErr03                  ; $cc ;
>2dee	54 26					.word	Command_Rem2             ; $cd '
>2df0	4f 2d					.word	TKErr07                  ; $ce to
>2df2	4f 2d					.word	TKErr05                  ; $cf step
>2df4	cd 28					.word	CallProc                 ; $d0 proc
>2df6	cb 27					.word	CommandLocal             ; $d1 local
>2df8	8b 25					.word	Command_Dim              ; $d2 dim
>2dfa	54 26					.word	Command_Rem              ; $d3 rem
>2dfc	99 25					.word	CommandLet               ; $d4 let
>2dfe	d5 23					.word	Command_Input            ; $d5 input
>2e00	c4 27					.word	Command_ELSE             ; $d6 else
>2e02	5c 25					.word	Command_VDU              ; $d7 vdu
>2e04	8b 24					.word	Command_Print            ; $d8 print
>2e06	3d 23					.word	CommandData              ; $d9 data
>2e08	4f 2d					.word	TKErr13                  ; $da image
>2e0a	4f 2d					.word	TKErr12                  ; $db at
>2e0c	4f 2d					.word	TKErr14                  ; $dc flip
>2e0e	7d 25					.word	Command_Assert           ; $dd assert
>2e10	17 26					.word	Command_Poke             ; $de poke
>2e12	1b 26					.word	Command_Doke             ; $df doke
>2e14	1f 26					.word	Command_Loke             ; $e0 loke
>2e16	2c 25					.word	Command_Ink              ; $e1 ink
>2e18	37 25					.word	Command_Paper            ; $e2 paper
>2e1a	26 25					.word	Command_CLS              ; $e3 cls
>2e1c	42 25					.word	Command_Locate           ; $e4 locate
>2e1e	28 2d					.word	CommandAssemblerLabel    ; $e5 .
>2e20	4f 2d					.word	TKErr11                  ; $e6 #
>2e22	10 2b					.word	CommandClear             ; $e7 clear

;******  Return to file: main/commands/system/run.asm


;******  Processing file: main/commands/system/../../../generated/tokenvectors1.inc

.2e24					Group1Vectors:
>2e24	46 2c					.word	CommandLoad              ; $86 load
>2e26	5b 2c					.word	CommandSave              ; $87 save
>2e28	6b 2b					.word	CommandList              ; $88 list
>2e2a	9f 2c					.word	Command_New              ; $89 new
>2e2c	2f 2d					.word	CommandBreak             ; $8a break
>2e2e	ad 2c					.word	Command_Run              ; $8b run
>2e30	12 23					.word	CommandRead              ; $8c read
>2e32	46 23					.word	CommandRestore           ; $8d restore
>2e34	66 26					.word	CommandEnd               ; $8e end
>2e36	61 26					.word	CommandStop              ; $8f stop
>2e38	69 26					.word	CommandXemu              ; $90 xemu
>2e3a	a3 23					.word	CommandGOTO              ; $91 goto
>2e3c	78 23					.word	CommandGOSUB             ; $92 gosub
>2e3e	8b 23					.word	CommandRETURN            ; $93 return

;******  Return to file: main/commands/system/run.asm


;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/binary/binary.asm

.2e40					BinaryProcess:
.2e40	b5 90		lda $90,x			lda 	esType,x 					; or type bytes together and check bit 6.
.2e42	15 91		ora $91,x			ora 	esType+1,x 					; (the float bit)
.2e44	0a		asl a				asl 	a
.2e45	30 0e		bmi $2e55			bmi 	_BPStringType 				; if bit 6 is set, then string type, error
.2e47	18		clc				clc 								; return CC for integer
.2e48	29 02		and #$02			and 	#$02 						; $02 because of ASL A. check original bit 1.
.2e4a	f0 08		beq $2e54			beq 	_BPExit 					; if both integer then return with CC.
.2e4c	20 5a 2e	jsr $2e5a			jsr 	BPMakeBothFloat 			; make both float
.2e4f	a9 01		lda #$01			lda 	#$01 						; set result type to float
.2e51	95 90		sta $90,x			sta 	esType,x
.2e53	38		sec				sec 								; and return with carry set.
.2e54					_BPExit:
.2e54	60		rts				rts
.2e55					_BPStringType:
.2e55	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.2e57	20 18 15	jsr $1518		jsr	errorHandler
.2e5a					BPMakeBothFloat:
.2e5a	e8		inx				inx
.2e5b	20 5f 2e	jsr $2e5f			jsr 	BPMakeFloat 				; one is a float, so we do both as floats.
.2e5e	ca		dex				dex
.2e5f					BPMakeFloat:
.2e5f	b5 90		lda $90,x			lda 	esType,x 					; get type bit which is in bit 0
.2e61	4a		lsr a				lsr 	a
.2e62	b0 07		bcs $2e6b			bcs 	_BPIsFloat 					; already a float if set.
.2e64	8a		txa				txa
.2e65	a2 1c		ldx #$1c		ldx	#28
.2e67	20 1c 21	jsr $211c		jsr	floatingpointHandler
.2e6a	aa		tax				tax
.2e6b					_BPIsFloat:
.2e6b	60		rts				rts
.2e6c					AddHandler:
.2e6c	20 3d 30	jsr $303d			jsr 	DereferenceTwo 				; dereference top two on stack.
.2e6f	b5 90		lda $90,x			lda 	esType,x 					; check two strings.
.2e71	35 91		and $91,x			and 	esType+1,x
.2e73	29 40		and #$40			and 	#$40 						; if both have bit 6 set ... we have two strings
.2e75	d0 10		bne $2e87			bne 	_AHStringConcat				; concatenate strings.
.2e77	20 40 2e	jsr $2e40			jsr 	BinaryProcess 				; check to see if either is float
.2e7a	b0 03		bcs $2e7f			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.2e7c	4c 98 37	jmp $3798			jmp 	MInt32Add 							; else do it as integer.
.2e7f					_IsFPOperation:
.2e7f	8a		txa				txa 								; call the relevant fp routine
.2e80	a2 04		ldx #$04		ldx	#4
.2e82	20 1c 21	jsr $211c		jsr	floatingpointHandler
.2e85	aa		tax				tax
.2e86	60		rts				rts
.2e87					_AHStringConcat:
.2e87	8a		txa				txa 								; handled by the string module.
.2e88	a2 06		ldx #$06		ldx	#6
.2e8a	20 5f 3c	jsr $3c5f		jsr	stringHandler
.2e8d	aa		tax				tax
.2e8e	60		rts				rts
.2e8f					SubHandler:
.2e8f	20 3d 30	jsr $303d			jsr 	DereferenceTwo
.2e92	20 40 2e	jsr $2e40			jsr 	BinaryProcess 				; check to see if either is float
.2e95	b0 03		bcs $2e9a			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.2e97	4c b2 37	jmp $37b2			jmp 	MInt32Sub 							; else do it as integer.
.2e9a					_IsFPOperation:
.2e9a	8a		txa				txa 								; call the relevant fp routine
.2e9b	a2 12		ldx #$12		ldx	#18
.2e9d	20 1c 21	jsr $211c		jsr	floatingpointHandler
.2ea0	aa		tax				tax
.2ea1	60		rts				rts
.2ea2					MulHandler:
.2ea2	20 3d 30	jsr $303d			jsr 	DereferenceTwo
.2ea5	20 40 2e	jsr $2e40			jsr 	BinaryProcess 				; check to see if either is float
.2ea8	b0 03		bcs $2ead			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.2eaa	4c cc 37	jmp $37cc			jmp 	MInt32Multiply 							; else do it as integer.
.2ead					_IsFPOperation:
.2ead	8a		txa				txa 								; call the relevant fp routine
.2eae	a2 0c		ldx #$0c		ldx	#12
.2eb0	20 1c 21	jsr $211c		jsr	floatingpointHandler
.2eb3	aa		tax				tax
.2eb4	60		rts				rts
.2eb5					DivHandler:
.2eb5	20 3d 30	jsr $303d			jsr 	DereferenceTwo
.2eb8	20 40 2e	jsr $2e40			jsr 	BinaryProcess 				; check to see if either is float
.2ebb	b0 03		bcs $2ec0			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.2ebd	4c 89 36	jmp $3689			jmp 	MInt32SDivide 							; else do it as integer.
.2ec0					_IsFPOperation:
.2ec0	8a		txa				txa 								; call the relevant fp routine
.2ec1	a2 08		ldx #$08		ldx	#8
.2ec3	20 1c 21	jsr $211c		jsr	floatingpointHandler
.2ec6	aa		tax				tax
.2ec7	60		rts				rts
.2ec8					ModHandler:
.2ec8	20 3d 30	jsr $303d			jsr 	DereferenceTwo
.2ecb	20 40 2e	jsr $2e40			jsr 	BinaryProcess 				; check to see if either is float
.2ece	b0 03		bcs $2ed3			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.2ed0	4c 07 37	jmp $3707			jmp 	MInt32Modulus 							; else do it as integer.
.2ed3					_IsFPOperation:
.2ed3	8a		txa				txa 								; call the relevant fp routine
.2ed4	a2 0a		ldx #$0a		ldx	#10
.2ed6	20 1c 21	jsr $211c		jsr	floatingpointHandler
.2ed9	aa		tax				tax
.2eda	60		rts				rts
.2edb					XorHandler:
.2edb	20 3d 30	jsr $303d			jsr 	DereferenceTwo
.2ede	20 40 2e	jsr $2e40			jsr 	BinaryProcess 				; check to see if either is float
.2ee1	b0 03		bcs $2ee6			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.2ee3	4c 3b 36	jmp $363b			jmp 	MInt32Xor 							; else do it as integer.
.2ee6					_IsFPOperation:
.2ee6	8a		txa				txa 								; call the relevant fp routine
.2ee7	a2 0a		ldx #$0a		ldx	#10
.2ee9	20 1c 21	jsr $211c		jsr	floatingpointHandler
.2eec	aa		tax				tax
.2eed	60		rts				rts
.2eee					OrHandler:
.2eee	20 3d 30	jsr $303d			jsr 	DereferenceTwo
.2ef1	20 40 2e	jsr $2e40			jsr 	BinaryProcess 				; check to see if either is float
.2ef4	b0 03		bcs $2ef9			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.2ef6	4c 22 36	jmp $3622			jmp 	MInt32Or 							; else do it as integer.
.2ef9					_IsFPOperation:
.2ef9	8a		txa				txa 								; call the relevant fp routine
.2efa	a2 0a		ldx #$0a		ldx	#10
.2efc	20 1c 21	jsr $211c		jsr	floatingpointHandler
.2eff	aa		tax				tax
.2f00	60		rts				rts
.2f01					AndHandler:
.2f01	20 3d 30	jsr $303d			jsr 	DereferenceTwo
.2f04	20 40 2e	jsr $2e40			jsr 	BinaryProcess 				; check to see if either is float
.2f07	b0 03		bcs $2f0c			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.2f09	4c 09 36	jmp $3609			jmp 	MInt32And 							; else do it as integer.
.2f0c					_IsFPOperation:
.2f0c	8a		txa				txa 								; call the relevant fp routine
.2f0d	a2 0a		ldx #$0a		ldx	#10
.2f0f	20 1c 21	jsr $211c		jsr	floatingpointHandler
.2f12	aa		tax				tax
.2f13	60		rts				rts
.2f14					ShlHandler:
.2f14	20 3d 30	jsr $303d			jsr 	DereferenceTwo
.2f17	20 40 2e	jsr $2e40			jsr 	BinaryProcess 				; check to see if either is float
.2f1a	b0 03		bcs $2f1f			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.2f1c	4c 95 2f	jmp $2f95			jmp 	Mint32ShiftLeftX 							; else do it as integer.
.2f1f					_IsFPOperation:
.2f1f	8a		txa				txa 								; call the relevant fp routine
.2f20	a2 0a		ldx #$0a		ldx	#10
.2f22	20 1c 21	jsr $211c		jsr	floatingpointHandler
.2f25	aa		tax				tax
.2f26	60		rts				rts
.2f27					ShrHandler:
.2f27	20 3d 30	jsr $303d			jsr 	DereferenceTwo
.2f2a	20 40 2e	jsr $2e40			jsr 	BinaryProcess 				; check to see if either is float
.2f2d	b0 03		bcs $2f32			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.2f2f	4c 98 2f	jmp $2f98			jmp 	MInt32ShiftRightX 							; else do it as integer.
.2f32					_IsFPOperation:
.2f32	8a		txa				txa 								; call the relevant fp routine
.2f33	a2 0a		ldx #$0a		ldx	#10
.2f35	20 1c 21	jsr $211c		jsr	floatingpointHandler
.2f38	aa		tax				tax
.2f39	60		rts				rts
.2f3a					WordRefHandler:
.2f3a	20 3d 30	jsr $303d			jsr 	DereferenceTwo
.2f3d	20 40 2e	jsr $2e40			jsr 	BinaryProcess 				; check to see if either is float
.2f40	b0 03		bcs $2f45			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.2f42	4c 87 2f	jmp $2f87			jmp 	MInt32WordIndirect 							; else do it as integer.
.2f45					_IsFPOperation:
.2f45	8a		txa				txa 								; call the relevant fp routine
.2f46	a2 0a		ldx #$0a		ldx	#10
.2f48	20 1c 21	jsr $211c		jsr	floatingpointHandler
.2f4b	aa		tax				tax
.2f4c	60		rts				rts
.2f4d					ByteRefHandler:
.2f4d	20 3d 30	jsr $303d			jsr 	DereferenceTwo
.2f50	20 40 2e	jsr $2e40			jsr 	BinaryProcess 				; check to see if either is float
.2f53	b0 03		bcs $2f58			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.2f55	4c 8b 2f	jmp $2f8b			jmp 	MInt32ByteIndirect 							; else do it as integer.
.2f58					_IsFPOperation:
.2f58	8a		txa				txa 								; call the relevant fp routine
.2f59	a2 0a		ldx #$0a		ldx	#10
.2f5b	20 1c 21	jsr $211c		jsr	floatingpointHandler
.2f5e	aa		tax				tax
.2f5f	60		rts				rts
.2f60					PowerHandler:
.2f60	20 3d 30	jsr $303d			jsr 	DereferenceTwo
.2f63	20 40 2e	jsr $2e40			jsr 	BinaryProcess 				; check to see if either is float
.2f66	b0 03		bcs $2f6b			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.2f68	4c 73 2f	jmp $2f73			jmp 	PowerInteger 							; else do it as integer.
.2f6b					_IsFPOperation:
.2f6b	8a		txa				txa 								; call the relevant fp routine
.2f6c	a2 18		ldx #$18		ldx	#24
.2f6e	20 1c 21	jsr $211c		jsr	floatingpointHandler
.2f71	aa		tax				tax
.2f72	60		rts				rts
.2f73					PowerInteger:
.2f73	20 5a 2e	jsr $2e5a			jsr 	BPMakeBothFloat				; make them float.
.2f76	8a		txa				txa
.2f77	a2 18		ldx #$18		ldx	#24
.2f79	20 1c 21	jsr $211c		jsr	floatingpointHandler
.2f7c	a2 14		ldx #$14		ldx	#20
.2f7e	20 1c 21	jsr $211c		jsr	floatingpointHandler
.2f81	aa		tax				tax
.2f82	a9 00		lda #$00			lda 	#0 							; make type integer
.2f84	95 90		sta $90,x			sta 	esType,x
.2f86	60		rts				rts
.2f87					Mint32WordIndirect:
.2f87	a9 80		lda #$80	 		lda 	#$80 				 		; word reference type (bit 7 set)
.2f89	d0 02		bne $2f8d			bne 	Min32Indirect
.2f8b					Mint32ByteIndirect:
.2f8b	a9 a0		lda #$a0			lda 	#$A0 						; byte reference type (bit 7, bit 5 set)
.2f8d					Min32Indirect:
.2f8d	48		pha				pha 								; save the indirection
.2f8e	20 98 37	jsr $3798			jsr 	MInt32Add 					; add a!b a?b
.2f91	68		pla				pla 								; and set the type to reference.
.2f92	95 90		sta $90,x			sta 	esType,x 	 				; so a!b => a+b and it's a reference....
.2f94	60		rts				rts
.2f95					Mint32ShiftLeftX:
.2f95	18		clc				clc 								; CC shift left
.2f96	90 01		bcc $2f99			bcc 	Mint32Shift
.2f98					Mint32ShiftRightX:
.2f98	38		sec				sec 								; CS shift right
.2f99					Mint32Shift:
.2f99	08		php				php 								; save carry flag on stack.
.2f9a	b5 a1		lda $a1,x			lda 	esInt1+1,x 					; if shift >= 32 then it is zero.
.2f9c	15 a9		ora $a9,x			ora 	esInt2+1,x
.2f9e	15 b1		ora $b1,x			ora 	esInt3+1,x
.2fa0	d0 1e		bne $2fc0			bne 	_MShiftZero
.2fa2	b5 99		lda $99,x			lda 	esInt0+1,x
.2fa4	c9 20		cmp #$20			cmp 	#32
.2fa6	b0 18		bcs $2fc0			bcs 	_MShiftZero
.2fa8					_MShiftLoop:
.2fa8	b5 99		lda $99,x			lda 	esInt0+1,x 					; check count is zero
.2faa	f0 12		beq $2fbe			beq 	_MShiftExit
.2fac	d6 99		dec $99,x			dec 	esInt0+1,x
.2fae	28		plp				plp 								; restore and save carry
.2faf	08		php				php
.2fb0	90 06		bcc $2fb8			bcc 	_MShiftLeft 				; and shift left/right accordingly.
.2fb2	20 d2 38	jsr $38d2			jsr 	Mint32ShiftRight
.2fb5	4c a8 2f	jmp $2fa8			jmp 	_MShiftLoop
.2fb8					_MShiftLeft:
.2fb8	20 c9 38	jsr $38c9			jsr 	Mint32ShiftLeft
.2fbb	4c a8 2f	jmp $2fa8			jmp 	_MShiftLoop
.2fbe					_MShiftExit:
.2fbe	28		plp				plp	 								; throw saved carry and exit
.2fbf	60		rts				rts
.2fc0					_MShiftZero:
.2fc0	4c b4 38	jmp $38b4			jmp 	MInt32False 				; return 0 as shifted >= 32 times.

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/binary/compare.asm

.2fc3					PerformComparison:
.2fc3	20 3d 30	jsr $303d			jsr 	DereferenceTwo 				; make both values.
.2fc6	b5 90		lda $90,x			lda 	esType,x 					; check for two strings.
.2fc8	35 91		and $91,x			and 	esType+1,x
.2fca	0a		asl a				asl 	a 							; bit 7 set if both bit 6s were set.
.2fcb	30 1d		bmi $2fea			bmi 	_PCIsString
.2fcd	b5 90		lda $90,x			lda 	esType,x 					; check either is floating point.
.2fcf	15 91		ora $91,x			ora 	esType+1,x
.2fd1	0a		asl a				asl 	a 							; shift bit 6 (string) to bit 7, mixed types
.2fd2	30 22		bmi $2ff6			bmi 	_PCError
.2fd4	29 02		and #$02			and 	#$02 						; because of ASL, check type in bit 0
.2fd6	f0 0f		beq $2fe7			beq 	_PCIsInteger 				; if not two integers, e.g. 1 of the bits is set
.2fd8	20 5a 2e	jsr $2e5a			jsr 	BPMakeBothFloat 			; make both float
.2fdb	8a		txa				txa
.2fdc	a2 06		ldx #$06		ldx	#6
.2fde	20 1c 21	jsr $211c		jsr	floatingpointHandler
.2fe1	86 32		stx $32				stx 	tempShort 					; save result
.2fe3	aa		tax				tax
.2fe4	a5 32		lda $32				lda 	tempShort
.2fe6	60		rts				rts
.2fe7					_PCIsInteger:
.2fe7	4c 54 36	jmp $3654			jmp 	MInt32Compare
.2fea					_PCIsString:
.2fea	8a		txa				txa 								; A has SP
.2feb	a2 0a		ldx #$0a		ldx	#10
.2fed	20 5f 3c	jsr $3c5f		jsr	stringHandler
.2ff0	86 32		stx $32				stx 	tempShort 					; save result
.2ff2	aa		tax				tax 								; put SP back in X and get result.
.2ff3	a5 32		lda $32				lda 	tempShort
.2ff5	60		rts				rts
.2ff6					_PCError:
.2ff6	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.2ff8	20 18 15	jsr $1518		jsr	errorHandler
.2ffb					CompareEquals:
.2ffb	20 c3 2f	jsr $2fc3			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.2ffe	c9 00		cmp #$00			cmp 	#$00 						; and we do something if it is = or <> a value.
.3000	f0 35		beq $3037			beq  	CompareTrue
.3002	4c 3a 30	jmp $303a			jmp 	CompareFalse
.3005					CompareLess:
.3005	20 c3 2f	jsr $2fc3			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.3008	c9 ff		cmp #$ff			cmp 	#$FF 						; and we do something if it is = or <> a value.
.300a	f0 2b		beq $3037			beq  	CompareTrue
.300c	4c 3a 30	jmp $303a			jmp 	CompareFalse
.300f					CompareGreater:
.300f	20 c3 2f	jsr $2fc3			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.3012	c9 01		cmp #$01			cmp 	#$01 						; and we do something if it is = or <> a value.
.3014	f0 21		beq $3037			beq  	CompareTrue
.3016	4c 3a 30	jmp $303a			jmp 	CompareFalse
.3019					CompareNotEquals:
.3019	20 c3 2f	jsr $2fc3			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.301c	c9 00		cmp #$00			cmp 	#$00 						; and we do something if it is = or <> a value.
.301e	d0 17		bne $3037			bne  	CompareTrue
.3020	4c 3a 30	jmp $303a			jmp 	CompareFalse
.3023					CompareGreaterEq:
.3023	20 c3 2f	jsr $2fc3			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.3026	c9 ff		cmp #$ff			cmp 	#$FF 						; and we do something if it is = or <> a value.
.3028	d0 0d		bne $3037			bne  	CompareTrue
.302a	4c 3a 30	jmp $303a			jmp 	CompareFalse
.302d					CompareLessEq:
.302d	20 c3 2f	jsr $2fc3			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.3030	c9 01		cmp #$01			cmp 	#$01 						; and we do something if it is = or <> a value.
.3032	d0 03		bne $3037			bne  	CompareTrue
.3034	4c 3a 30	jmp $303a			jmp 	CompareFalse
.3037					CompareTrue:
.3037	4c b0 38	jmp $38b0			jmp 	MInt32True
.303a					CompareFalse:
.303a	4c b4 38	jmp $38b4			jmp 	MInt32False

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/dereference.asm

.303d					DereferenceTwo:
.303d	e8		inx				inx
.303e	20 42 30	jsr $3042			jsr 	DereferenceOne
.3041	ca		dex				dex
.3042					DereferenceOne:
.3042	b5 90		lda $90,x			lda 	esType,x
.3044	10 3d		bpl $3083			bpl 	_DRNotReference 			; is it a reference ? if not, we don't need to do anything
.3046	4a		lsr a				lsr 	a 							; do float dereference if bit 0 set.
.3047	b0 3b		bcs $3084			bcs 	_DRFloatDeReference
.3049	98		tya				tya
.304a	48		pha				pha
.304b	b5 98		lda $98,x			lda 	esInt0,x 					; copy address to temp0
.304d	85 2a		sta $2a				sta 	temp0
.304f	b5 a0		lda $a0,x			lda 	esInt1,x
.3051	85 2b		sta $2b				sta 	temp0+1
.3053	a9 00		lda #$00			lda 	#0 							; clear esInt1..3
.3055	95 a0		sta $a0,x			sta 	esInt1,x
.3057	95 a8		sta $a8,x			sta 	esInt2,x
.3059	95 b0		sta $b0,x			sta 	esInt3,x
.305b	b5 90		lda $90,x			lda 	esType,x 					; get the type byte.
.305d	29 60		and #$60			and 	#$60 						; get string flag ($40) and byte flag ($20)
.305f	0a		asl a				asl 	a 							; now string ($80) byte ($40)
.3060	30 0d		bmi $306f			bmi 	_DeRefString 				; string, 2 bytes only
.3062	d0 11		bne $3075			bne 	_DeRefByte 					; byte 1 byte only
.3064					_DeRefLong:
.3064	a0 03		ldy #$03			ldy 	#3
.3066	b1 2a		lda ($2a),y			lda 	(temp0),y
.3068	95 b0		sta $b0,x			sta 	esInt3,x
.306a	88		dey				dey
.306b	b1 2a		lda ($2a),y			lda 	(temp0),y
.306d	95 a8		sta $a8,x			sta 	esInt2,x
.306f					_DeRefString:
.306f	a0 01		ldy #$01			ldy 	#1
.3071	b1 2a		lda ($2a),y			lda 	(temp0),y
.3073	95 a0		sta $a0,x			sta 	esInt1,x
.3075					_DeRefByte:
.3075	a0 00		ldy #$00			ldy 	#0
.3077	b1 2a		lda ($2a),y			lda 	(temp0),y
.3079	95 98		sta $98,x			sta 	esInt0,x
.307b	b5 90		lda $90,x			lda 	esType,x 					; clear byte and deref bits.
.307d	29 40		and #$40			and 	#$40
.307f	95 90		sta $90,x			sta 	esType,x
.3081	68		pla				pla
.3082	a8		tay				tay
.3083					_DRNotReference
.3083	60		rts				rts
.3084					_DRFloatDereference:
.3084	20 0e 26	jsr $260e			jsr 	TOSToTemp0 					; address to deref in temp0
.3087	8a		txa				txa
.3088	a2 1e		ldx #$1e		ldx	#30
.308a	20 1c 21	jsr $211c		jsr	floatingpointHandler
.308d	aa		tax				tax
.308e	a9 01		lda #$01			lda 	#$01 						; type to FP (float)
.3090	95 90		sta $90,x			sta 	esType,x
.3092	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/evaluate.asm

.3093					EvaluateLevel:
.3093	e0 08		cpx #$08			cpx 	#StackSize 					; check stack overflow
.3095	b0 1e		bcs $30b5			bcs 	_ELStack
.3097	48		pha				pha 								; save precedence level.
.3098	a9 00		lda #$00			lda 	#0 							; zero the current stack level.
.309a	95 98		sta $98,x			sta 	esInt0,x
.309c	95 a0		sta $a0,x			sta 	esInt1,x
.309e	95 a8		sta $a8,x			sta 	esInt2,x
.30a0	95 b0		sta $b0,x			sta 	esInt3,x
.30a2	95 90		sta $90,x			sta 	esType,x 					; zero the type (integer value)
.30a4	b1 28		lda ($28),y			lda 	(codePtr),y	 				; look at first token/character
.30a6	30 26		bmi $30ce			bmi 	_ELIsToken 					; if -ve could be string, float, or unary function.
.30a8	0a		asl a				asl 	a 							; if 00-3F then will now be PL and it's a variable.
.30a9	30 0f		bmi $30ba			bmi 	_ELIsConstant 				; 40-7F will be -ve and that's an integer constant.
.30ab	8a		txa				txa 								; stack level in X
.30ac	a2 02		ldx #$02		ldx	#2
.30ae	20 8f 48	jsr $488f		jsr	variableHandler
.30b1	aa		tax				tax
.30b2	4c f7 30	jmp $30f7			jmp		_ELHasTerm
.30b5					_ELStack:
.30b5	a2 23		ldx #$23			ldx 	#ErrorID_NumStack
.30b7	20 18 15	jsr $1518		jsr	errorHandler
.30ba					_ELIsConstant:
.30ba	4a		lsr a				lsr 	a 							; get the value back
.30bb	29 3f		and #$3f			and 	#$3F 						; force into range 0-63
.30bd	95 98		sta $98,x			sta 	esInt0,x 					; and put in LSB.
.30bf					_ELCheckNext:
.30bf	c8		iny				iny 								; look at next
.30c0	b1 28		lda ($28),y			lda 	(codePtr),y
.30c2	49 40		eor #$40			eor 	#$40 						; shift around so 40-7F => 00-3F
.30c4	c9 40		cmp #$40			cmp 	#$40 						; out of range ?
.30c6	b0 2f		bcs $30f7			bcs 	_ELHasTerm 					; done getting the constant.
.30c8	20 90 31	jsr $3190			jsr 	ELShiftByteIn 				; shift byte into position.
.30cb	4c bf 30	jmp $30bf			jmp 	_ELCheckNext
.30ce					_ELIsToken:
.30ce	c9 85		cmp #$85			cmp 	#TOK_STR 					; handle strings.
.30d0	f0 0f		beq $30e1			beq 	_ELIsString
.30d2	c9 84		cmp #$84			cmp 	#TOK_FPC 					; if no, then check unary.
.30d4	d0 5f		bne $3135			bne 	_ELCheckUnary
.30d6	8a		txa				txa 								; put X into A
.30d7	c8		iny				iny 								; skip over the float marker
.30d8	a2 1a		ldx #$1a		ldx	#26
.30da	20 1c 21	jsr $211c		jsr	floatingpointHandler
.30dd	aa		tax				tax 								; restore X
.30de	4c f7 30	jmp $30f7			jmp 	_ELHasTerm
.30e1					_ELIsString:
.30e1	98		tya				tya 								; address of string is codePtr+y+1
.30e2	38		sec				sec
.30e3	65 28		adc $28				adc 	codePtr
.30e5	95 98		sta $98,x			sta 	esInt0,x
.30e7	a5 29		lda $29				lda 	codePtr+1
.30e9	69 00		adc #$00			adc 	#0
.30eb	95 a0		sta $a0,x			sta 	esInt1,x
.30ed	a9 40		lda #$40			lda 	#$40 						; set type to string value
.30ef	95 90		sta $90,x			sta 	esType,x
.30f1	c8		iny				iny 								; skip over string.
.30f2	98		tya				tya
.30f3	38		sec				sec									; +1 for the length itself.
.30f4	71 28		adc ($28),y			adc 	(codePtr),y
.30f6	a8		tay				tay 								; and fall through to term loop code.
.30f7					_ELHasTerm:
.30f7	b1 28		lda ($28),y			lda 	(codePtr),y
.30f9	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; check in the correct range for binary tokens.
.30fb	90 04		bcc $3101			bcc 	_ELPopExit
.30fd	c9 99		cmp #$99			cmp 	#TOK_STRUCTST
.30ff	90 02		bcc $3103			bcc 	_ELHasBinaryTerm
.3101					_ELPopExit:
.3101	68		pla				pla
.3102					_ELExit:
.3102	60		rts				rts
.3103					_ELHasBinaryTerm:
.3103	84 32		sty $32				sty 	tempShort 					; save position
.3105	a8		tay				tay 								; use token as an index and get the precedence.
.3106	b9 38 31	lda $3138,y			lda 	ELBinaryOperatorInfo-TOK_BINARYST,y
.3109	a4 32		ldy $32				ldy 	tempShort 					; restore Y
.310b	85 32		sta $32				sta 	tempShort 					; save precedence in memory.
.310d	68		pla				pla 								; restore current level.
.310e	c5 32		cmp $32				cmp 	tempShort 					; if current >= operator then exit
.3110	b0 f0		bcs $3102			bcs 	_ELExit
.3112	48		pha				pha 								; save current level back on the stack.
.3113	b1 28		lda ($28),y			lda 	(codePtr),y 				; save the binary operator on the stack and skip it.
.3115	48		pha				pha
.3116	c8		iny				iny
.3117	e8		inx				inx 								; calculate the RHS at the operator precedence.
.3118	a5 32		lda $32				lda 	tempShort
.311a	20 93 30	jsr $3093			jsr 	EvaluateLevel
.311d	ca		dex				dex
.311e	68		pla				pla 								; get the operator back out.
.311f					_ELExecuteA:
.311f	86 32		stx $32				stx 	tempShort 					; upload the vectors. Would be nice to use jmp (aaaa,x)
.3121	0a		asl a				asl 	a 							; but not practical. May use push/rts later.
.3122	aa		tax				tax
.3123	bd 54 2d	lda $2d54,x			lda 	Group0Vectors,x
.3126	85 2a		sta $2a				sta 	temp0
.3128	bd 55 2d	lda $2d55,x			lda 	Group0Vectors+1,x
.312b	85 2b		sta $2b				sta 	temp0+1
.312d	a6 32		ldx $32				ldx 	tempShort
.312f	20 7c 31	jsr $317c			jsr 	_ELCallTemp0
.3132	4c f7 30	jmp $30f7			jmp 	_ELHasTerm 					; and loop back round.
.3135					_ELCheckUnary:
.3135	c8		iny				iny 								; skip over token.
.3136	c9 90		cmp #$90			cmp 	#TKW_MINUS 					; is it - term
.3138	f0 19		beq $3153			beq 	_ELMinus
.313a	c9 97		cmp #$97			cmp 	#TKW_PLING 					; is it ! or ? term
.313c	f0 2c		beq $316a			beq 	_ELIndirect
.313e	c9 98		cmp #$98			cmp 	#TKW_QMARK
.3140	f0 28		beq $316a			beq 	_ELIndirect
.3142	c9 83		cmp #$83			cmp 	#TOK_SHIFT3 				; is it the unary extension.
.3144	f0 39		beq $317f			beq 	_ELExtension
.3146	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST 				; must be TOK_UNARYST ... TOK_TOKENS
.3148	90 04		bcc $314e			bcc 	_ELUSyntax
.314a	c9 c9		cmp #$c9			cmp 	#TOK_TOKENS
.314c	90 d1		bcc $311f			bcc 	_ELExecuteA 				; if so do that token.
.314e					_ELUSyntax:
.314e	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.3150	20 18 15	jsr $1518		jsr	errorHandler
.3153					_ELMinus:
.3153	20 e5 31	jsr $31e5			jsr 	EvaluateNumericTerm 		; get a number to negate.
.3156	b5 90		lda $90,x			lda 	esType,x 					; is it integer
.3158	f0 0a		beq $3164			beq 	_ELMinusInteger
.315a	8a		txa				txa
.315b	a2 0e		ldx #$0e		ldx	#14
.315d	20 1c 21	jsr $211c		jsr	floatingpointHandler
.3160	aa		tax				tax
.3161	4c f7 30	jmp $30f7			jmp 	_ELHasTerm
.3164					_ELMinusInteger:
.3164	20 6e 38	jsr $386e			jsr 	MInt32Negate 				; do int negate
.3167	4c f7 30	jmp $30f7			jmp 	_ELHasTerm
.316a					_ELIndirect:
.316a	48		pha				pha 								; save what we want (TKW_QMARK TWK_PLING)
.316b	20 ee 31	jsr $31ee			jsr 	EvaluateIntegerTerm 		; integer address
.316e	68		pla				pla
.316f	49 97		eor #$97			eor 	#TKW_PLING 					; now $00 if !
.3171	f0 02		beq $3175			beq 	_ELHaveModifier
.3173	a9 20		lda #$20			lda 	#$20 						; now $00 if !, $20 if ?
.3175					_ELHaveModifier:
.3175	09 80		ora #$80			ora 	#$80						; make it the appropriate reference.
.3177	95 90		sta $90,x			sta 	esType,x 					; $80 for ! $A0 for ?
.3179	4c f7 30	jmp $30f7			jmp 	_ELHasTerm
.317c					_ELCallTemp0:
.317c	6c 2a 00	jmp ($002a)			jmp 	(temp0)
.317f					_ELExtension:
.317f	8a		txa				txa 								; stack pos in A
.3180	20 69 18	jsr $1869		jsr	extensionHandler
.3183	aa		tax				tax 								; restore stack
.3184	4c f7 30	jmp $30f7			jmp 	_ELHasTerm
.3187					UnaryParenthesis:
.3187	a9 00		lda #$00			lda 	#0 							; ( is a unary function ....
.3189	20 93 30	jsr $3093			jsr 	EvaluateLevel
.318c	20 27 39	jsr $3927			jsr 	CheckRightParen 			; check for )
.318f	60		rts				rts
.3190					ELShiftByteIn:
.3190	48		pha				pha 								; save bits to shift in.
.3191	b5 b0		lda $b0,x			lda 	esInt3,x 					; save top most byte
.3193	48		pha				pha
.3194	b5 a8		lda $a8,x			lda 	esInt2,x 					; shift everything left 8 bits
.3196	95 b0		sta $b0,x			sta 	esInt3,x
.3198	b5 a0		lda $a0,x			lda 	esInt1,x
.319a	95 a8		sta $a8,x			sta 	esInt2,x
.319c	b5 98		lda $98,x			lda 	esInt0,x
.319e	95 a0		sta $a0,x			sta 	esInt1,x
.31a0	a9 00		lda #$00			lda 	#0
.31a2	95 98		sta $98,x			sta 	esInt0,x
.31a4	68		pla				pla 								; now A:TOS is a 5 byte register, shift right twice.
.31a5	29 03		and #$03			and 	#3 							; only want lower 2 bits
.31a7	09 04		ora #$04			ora 	#4  						; set bit 2 - when 1 we are done
.31a9					_ELShiftLoop:
.31a9	4a		lsr a				lsr 	a
.31aa	76 b0		ror $b0,x			ror 	esInt3,x
.31ac	76 a8		ror $a8,x			ror 	esInt2,x
.31ae	76 a0		ror $a0,x			ror 	esInt1,x
.31b0	76 98		ror $98,x			ror 	esInt0,x
.31b2	c9 01		cmp #$01			cmp 	#1
.31b4	d0 f3		bne $31a9			bne 	_ELShiftLoop
.31b6	68		pla				pla 								; get original 6 bit value and OR in.
.31b7	29 3f		and #$3f			and 	#$3F
.31b9	15 98		ora $98,x			ora 	esInt0,x
.31bb	95 98		sta $98,x			sta 	esInt0,x
.31bd	60		rts				rts
.31be					ELBinaryOperatorInfo:

;******  Processing file: main/evaluate/../../generated/binarystructinfo.inc

>31be	01					.byte	$01			; $86 and
>31bf	01					.byte	$01			; $87 or
>31c0	01					.byte	$01			; $88 xor
>31c1	02					.byte	$02			; $89 >=
>31c2	02					.byte	$02			; $8a <=
>31c3	02					.byte	$02			; $8b >
>31c4	02					.byte	$02			; $8c <
>31c5	02					.byte	$02			; $8d =
>31c6	02					.byte	$02			; $8e <>
>31c7	03					.byte	$03			; $8f +
>31c8	03					.byte	$03			; $90 -
>31c9	04					.byte	$04			; $91 >>
>31ca	04					.byte	$04			; $92 <<
>31cb	04					.byte	$04			; $93 *
>31cc	04					.byte	$04			; $94 /
>31cd	04					.byte	$04			; $95 mod
>31ce	05					.byte	$05			; $96 ^
>31cf	06					.byte	$06			; $97 !
>31d0	06					.byte	$06			; $98 ?
>31d1	82					.byte	$82			; $99 repeat
>31d2	82					.byte	$82			; $9a while
>31d3	82					.byte	$82			; $9b for
>31d4	82					.byte	$82			; $9c if
>31d5	82					.byte	$82			; $9d defproc
>31d6	80					.byte	$80			; $9e until
>31d7	80					.byte	$80			; $9f wend
>31d8	80					.byte	$80			; $a0 next
>31d9	80					.byte	$80			; $a1 then
>31da	80					.byte	$80			; $a2 endif
>31db	80					.byte	$80			; $a3 endproc

;******  Return to file: main/evaluate/evaluate.asm


;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/support.asm

.31dc					EvaluateTerm:
.31dc	a9 0f		lda #$0f			lda 	#15 						; no binary operator has this high a precedence.
.31de	20 93 30	jsr $3093			jsr 	EvaluateLevel
.31e1	20 42 30	jsr $3042			jsr 	DereferenceOne
.31e4	60		rts				rts
.31e5					EvaluateNumericTerm:
.31e5	20 dc 31	jsr $31dc			jsr 	EvaluateTerm
.31e8	b5 90		lda $90,x			lda 	esType,x
.31ea	0a		asl a				asl 	a 							; see if it's a string.
.31eb	30 09		bmi $31f6			bmi 	ENTType
.31ed	60		rts				rts
.31ee					EvaluateIntegerTerm:
.31ee	20 dc 31	jsr $31dc			jsr 	EvaluateTerm
.31f1	b5 90		lda $90,x			lda 	esType,x
.31f3	d0 01		bne $31f6			bne 	ENTType
.31f5	60		rts				rts
.31f6					ENTType:
.31f6	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.31f8	20 18 15	jsr $1518		jsr	errorHandler
.31fb					EvaluateRoot:
.31fb	a2 00		ldx #$00			ldx 	#0
.31fd					Evaluate:
.31fd	a9 00		lda #$00			lda 	#0
.31ff	20 93 30	jsr $3093			jsr 	EvaluateLevel
.3202	20 42 30	jsr $3042			jsr 	DereferenceOne
.3205	60		rts				rts
.3206					EvaluateNumeric:
.3206	20 fd 31	jsr $31fd			jsr 	Evaluate
.3209	b5 90		lda $90,x			lda 	esType,x
.320b	0a		asl a				asl 	a 							; see if it's a string.
.320c	30 e8		bmi $31f6			bmi 	ENTType
.320e	4a		lsr a				lsr 	a 							; shift float flag into carry.
.320f	4a		lsr a				lsr 	a
.3210	60		rts				rts
.3211					EvaluateString:
.3211	20 fd 31	jsr $31fd			jsr 	Evaluate
.3214	b5 90		lda $90,x			lda 	esType,x
.3216	0a		asl a				asl 	a 							; see if it's a string.
.3217	10 dd		bpl $31f6			bpl 	ENTType
.3219	60		rts				rts
.321a					EvaluateRootInteger:
.321a	a2 00		ldx #$00			ldx 	#0
.321c					EvaluateInteger:
.321c	20 fd 31	jsr $31fd			jsr 	Evaluate
.321f	b5 90		lda $90,x			lda 	esType,x
.3221	d0 d3		bne $31f6			bne 	ENTType
.3223	60		rts				rts
.3224					EvaluateSmallInteger:
.3224	20 1c 32	jsr $321c			jsr 	EvaluateInteger
.3227	b5 a0		lda $a0,x			lda 	esInt1,x
.3229	15 a8		ora $a8,x			ora 	esInt2,x
.322b	15 b0		ora $b0,x			ora 	esInt3,x
.322d	d0 03		bne $3232			bne 	_ESIValue
.322f	b5 98		lda $98,x			lda 	esInt0,x
.3231	60		rts				rts
.3232					_ESIValue:
.3232	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.3234	20 18 15	jsr $1518		jsr	errorHandler
.3237					LinkEvaluate:
.3237	aa		tax				tax
.3238	20 fd 31	jsr $31fd			jsr 	Evaluate
.323b	8a		txa				txa
.323c	60		rts				rts
.323d					LinkEvaluateTerm:
.323d	aa		tax				tax
.323e	20 dc 31	jsr $31dc			jsr 	EvaluateTerm
.3241	8a		txa				txa
.3242	60		rts				rts
.3243					LinkEvaluateInteger:
.3243	aa		tax				tax
.3244	20 1c 32	jsr $321c			jsr 	EvaluateInteger
.3247	8a		txa				txa
.3248	60		rts				rts
.3249					LinkEvaluateString:
.3249	aa		tax				tax
.324a	20 11 32	jsr $3211			jsr 	EvaluateString
.324d	8a		txa				txa
.324e	60		rts				rts
.324f					LinkEvaluateSmallInt:
.324f	aa		tax				tax
.3250	20 24 32	jsr $3224			jsr 	EvaluateSmallInteger
.3253	8a		txa				txa
.3254	60		rts				rts
.3255					EvaluateReference:
.3255	ad cf 31	lda $31cf			lda 	ELBinaryOperatorInfo+TKW_PLING-TOK_BINARYST
.3258	38		sec				sec 								; sub 1 to allow a!x b?x to work.
.3259	e9 01		sbc #$01			sbc 	#1
.325b	20 93 30	jsr $3093			jsr 	EvaluateLevel
.325e	b5 90		lda $90,x			lda 	esType,x
.3260	10 01		bpl $3263			bpl 	_ERFail
.3262	60		rts				rts
.3263					_ERFail:
.3263	a2 0b		ldx #$0b			ldx 	#ErrorID_NoReference
.3265	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary/convert.asm

.3268					Event_Str:
.3268	20 06 32	jsr $3206			jsr 	EvaluateNumeric 			; get a number.
.326b	b5 90		lda $90,x			lda 	esType,x 					; is it floating point
.326d	d0 13		bne $3282			bne 	_ESFloat
.326f	20 c5 32	jsr $32c5			jsr 	ConvertGetBase 				; get base, or default.
.3272	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.3274	85 2a		sta $2a				sta 	temp0
.3276	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.3278	85 2b		sta $2b				sta 	1+(temp0)
.327a	b5 99		lda $99,x			lda 	esInt0+1,x 					; get the base
.327c	20 0a 38	jsr $380a			jsr 	MInt32ToString 				; convert to string.
.327f	4c 8f 32	jmp $328f			jmp 	_ESCloneExit 				; clone and exit.
.3282					_ESFloat:
.3282	20 27 39	jsr $3927			jsr 	CheckRightParen 			; check closing )
.3285	20 0e 26	jsr $260e			jsr 	TOSToTemp0 					; string address in temp0, goes here.
.3288	8a		txa				txa
.3289	a2 16		ldx #$16		ldx	#22
.328b	20 1c 21	jsr $211c		jsr	floatingpointHandler
.328e	aa		tax				tax
.328f					_ESCloneExit:
.328f	8a		txa				txa
.3290	a2 04		ldx #$04		ldx	#4
.3292	20 5f 3c	jsr $3c5f		jsr	stringHandler
.3295	aa		tax				tax
.3296	60		rts				rts
.3297					UnaryVal:
.3297	38		sec				sec 								; Carry set to return value
.3298	b0 01		bcs $329b			bcs 	ValueMain
.329a					UnaryIsVal:
.329a	18		clc				clc									; Carry clear to return legitimacy
.329b					ValueMain:
.329b	08		php				php 								; save results (CS is value, CC is validation)
.329c	20 11 32	jsr $3211			jsr 	EvaluateString
.329f	20 c5 32	jsr $32c5			jsr 	ConvertGetBase 				; get base, if any.
.32a2	98		tya				tya
.32a3	48		pha				pha
.32a4	20 0e 26	jsr $260e			jsr 	TOSToTemp0 					; string address in temp0, goes here.
.32a7	b5 99		lda $99,x			lda 	esInt0+1,x 					; get the base
.32a9	29 7f		and #$7f			and 	#$7F 						; ignore the sign bit.
.32ab	20 22 37	jsr $3722			jsr 	MInt32FromString 			; convert it back from a string.
.32ae	b0 0c		bcs $32bc			bcs 	_VMSuccess 					; successfully converted.
.32b0	b5 99		lda $99,x			lda 	esInt0+1,x 					; is base the default
.32b2	c9 8a		cmp #$8a			cmp 	#$80+10 					; if no, then it is integer only.
.32b4	f0 00		beq $32b6			beq 	_VMFailed 	 				; so we failed.
.32b6					_VMFailed:
.32b6	68		pla				pla
.32b7	a8		tay				tay
.32b8	28		plp				plp
.32b9	4c b4 38	jmp $38b4			jmp 	MInt32False 				; return 0 whatever.
.32bc					_VMSuccess:
.32bc	68		pla				pla
.32bd	a8		tay				tay
.32be	28		plp				plp 								; if CS the it was val() so we want the value.
.32bf	b0 03		bcs $32c4			bcs 	_VMExit
.32c1	4c b0 38	jmp $38b0			jmp 	MInt32True 					; otherwise return true as successful.
.32c4					_VMExit:
.32c4	60		rts				rts
.32c5					ConvertGetBase:
.32c5	a9 8a		lda #$8a			lda 	#10+$80 					; default base 10 signed.
.32c7	95 99		sta $99,x			sta 	esInt0+1,x
.32c9	b1 28		lda ($28),y			lda 	(codePtr),y 				; check for ,base)
.32cb	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.32cd	d0 0e		bne $32dd			bne 	_CGBDone 					; not found, should be )
.32cf	e8		inx				inx 								; next level
.32d0	c8		iny				iny 								; skip comma.
.32d1	20 24 32	jsr $3224			jsr 	EvaluateSmallInteger		; evaluate the base.
.32d4	ca		dex				dex
.32d5	c9 02		cmp #$02			cmp 	#2 							; base range is 2..16
.32d7	90 08		bcc $32e1			bcc 	_CGBValue 					; (it should work as high as 37)
.32d9	c9 11		cmp #$11			cmp 	#17
.32db	b0 04		bcs $32e1			bcs 	_CGBValue
.32dd					_CGBDone:
.32dd	20 27 39	jsr $3927			jsr 	CheckRightParen
.32e0	60		rts				rts
.32e1					_CGBValue:
.32e1	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.32e3	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary/event.asm

.32e6					EventFunction:
.32e6	20 55 32	jsr $3255			jsr 	EvaluateReference			; get the variable reference that tracks the event
.32e9	b5 90		lda $90,x			lda 	esType,x
.32eb	c9 80		cmp #$80			cmp 	#$80 						; must be integer reference
.32ed	d0 5b		bne $334a			bne 	_EFType
.32ef	20 34 39	jsr $3934			jsr 	CheckComma
.32f2	e8		inx				inx
.32f3	20 1c 32	jsr $321c			jsr 	EvaluateInteger		 		; get the elapsed time between firing.
.32f6	20 27 39	jsr $3927			jsr 	CheckRightParen 			; finish off with the right bracket
.32f9	ca		dex				dex
.32fa	b5 a0		lda $a0,x			lda 	esInt1,x 					; check max of 32767, we use 16 bit for timers and
.32fc	29 80		and #$80			and 	#$80 						; it doesn't work > 32767
.32fe	15 a8		ora $a8,x			ora 	esInt2,x
.3300	15 b0		ora $b0,x			ora 	esInt3,x
.3302	d0 41		bne $3345			bne 	_EFValue
.3304	98		tya				tya
.3305	48		pha				pha
.3306	8a		txa				txa
.3307	48		pha				pha
.3308	a2 1c		ldx #$1c		ldx	#28
.330a	20 f6 14	jsr $14f6		jsr	deviceHandler
.330d	84 2d		sty $2d				sty 	temp1+1
.330f	85 2c		sta $2c				sta 	temp1
.3311	68		pla				pla
.3312	aa		tax				tax
.3313	20 0e 26	jsr $260e			jsr 	TOSToTemp0 					; set temp0 to the address of the event variable
.3316	a0 03		ldy #$03			ldy 	#3							; if -ve
.3318	b1 2a		lda ($2a),y			lda 	(temp0),y
.331a	30 23		bmi $333f			bmi 	_EFFail 	 				; straight out with fail, means "on pause".
.331c	a0 00		ldy #$00			ldy 	#0 							; is the fire time zero ?
.331e	b1 2a		lda ($2a),y			lda 	(temp0),y
.3320	c8		iny				iny
.3321	11 2a		ora ($2a),y			ora 	(temp0),y
.3323	f0 17		beq $333c			beq 	_EFInitialise 				; if so, initialise the value but return false.
.3325	a0 00		ldy #$00			ldy 	#0 							; calculate trigger - timer
.3327	38		sec				sec
.3328	b1 2a		lda ($2a),y			lda 	(temp0),y
.332a	e5 2c		sbc $2c				sbc 	temp1
.332c	c8		iny				iny
.332d	b1 2a		lda ($2a),y			lda 	(temp0),y
.332f	e5 2d		sbc $2d				sbc 	temp1+1
.3331	10 0c		bpl $333f			bpl 	_EFFail 					; if trigger >= timer then return False
.3333	20 4f 33	jsr $334f			jsr 	SetEventTimer 				; reset the timer for next time.
.3336	20 b0 38	jsr $38b0			jsr	 	MInt32True 					; and treutn true as fired.
.3339	68		pla				pla
.333a	a8		tay				tay
.333b	60		rts				rts
.333c					_EFInitialise:
.333c	20 4f 33	jsr $334f			jsr		SetEventTimer 				; set trigger time to time + elapsed
.333f					_EFFail:
.333f	68		pla				pla
.3340	a8		tay				tay
.3341	20 b4 38	jsr $38b4			jsr 	MInt32False
.3344	60		rts				rts
.3345					_EFValue:
.3345	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.3347	20 18 15	jsr $1518		jsr	errorHandler
.334a					_EFType:
.334a	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.334c	20 18 15	jsr $1518		jsr	errorHandler
.334f					SetEventTimer:
.334f	a0 00		ldy #$00			ldy 	#0
.3351	18		clc				clc
.3352	a5 2c		lda $2c				lda 	temp1
.3354	75 99		adc $99,x			adc 	esInt0+1,x
.3356	91 2a		sta ($2a),y			sta		(temp0),y
.3358	c8		iny				iny
.3359	a5 2d		lda $2d				lda 	temp1+1
.335b	75 a1		adc $a1,x			adc 	esInt1+1,x
.335d	91 2a		sta ($2a),y			sta		(temp0),y
.335f	88		dey				dey
.3360	11 2a		ora ($2a),y			ora 	(temp0),y 					; if the result is non zero, exit
.3362	d0 04		bne $3368			bne 	_SETExit 					; zero means initialise.....
.3364	a9 01		lda #$01			lda 	#1 							; timer zero won't work, so make it 1, which is
.3366	91 2a		sta ($2a),y			sta 	(temp0),y 					; near enough.
.3368					_SETExit:
.3368	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary/unary.asm

.3369					UnaryLen:
.3369	20 77 33	jsr $3377			jsr 	ULStart
.336c					ULFinish:
.336c	b1 2a		lda ($2a),y			lda 	(temp0),y 					; get length prefix
.336e	a4 32		ldy $32				ldy 	tempShort 					; get Y back
.3370	20 c3 38	jsr $38c3			jsr 	MInt32Set8Bit 				; write it out.
.3373	20 27 39	jsr $3927			jsr 	CheckRightParen
.3376	60		rts				rts
.3377	20 11 32	jsr $3211	ULStart:jsr 	EvaluateString
.337a	b5 98		lda $98,x			lda 	esInt0,x 					; copy address of string to temp0
.337c	85 2a		sta $2a				sta 	temp0
.337e	b5 a0		lda $a0,x			lda 	esInt1,x
.3380	85 2b		sta $2b				sta 	temp0+1
.3382	84 32		sty $32				sty 	tempShort 					; get length
.3384	a0 00		ldy #$00			ldy 	#0
.3386	60		rts				rts
.3387					UnaryAsc:
.3387	20 77 33	jsr $3377			jsr 	ULStart 					; same as LEN() get string, save Y, point to length.
.338a	b1 2a		lda ($2a),y			lda 	(temp0),y 					; read length
.338c	c8		iny				iny 		 						; point to first character, we can do LEN code after that
.338d	c9 00		cmp #$00			cmp 	#0
.338f	d0 db		bne $336c			bne 	ULFinish 					; if length = 0 then error : asc("") -> error.
.3391	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.3393	20 18 15	jsr $1518		jsr	errorHandler
.3396					UnaryAbs:
.3396	20 06 32	jsr $3206			jsr 	EvaluateNumeric 			; some numeric value
.3399	b0 07		bcs $33a2			bcs 	_UAFloat 					; CS then float, so use that function
.339b	20 69 38	jsr $3869			jsr 	MInt32Absolute 				; int version
.339e	20 27 39	jsr $3927			jsr 	CheckRightParen
.33a1	60		rts				rts
.33a2					_UAFloat:
.33a2	8a		txa				txa 								; float version
.33a3	a2 02		ldx #$02		ldx	#2
.33a5	20 1c 21	jsr $211c		jsr	floatingpointHandler
.33a8	aa		tax				tax
.33a9	20 27 39	jsr $3927			jsr 	CheckRightParen
.33ac	60		rts				rts
.33ad					UnarySgn:
.33ad	20 06 32	jsr $3206			jsr 	EvaluateNumeric 			; same as above but sign of value
.33b0	b0 07		bcs $33b9			bcs 	_USFloat
.33b2	20 a1 38	jsr $38a1			jsr 	MInt32Sign
.33b5	20 27 39	jsr $3927			jsr 	CheckRightParen
.33b8	60		rts				rts
.33b9					_USFloat:
.33b9	8a		txa				txa
.33ba	a2 10		ldx #$10		ldx	#16
.33bc	20 1c 21	jsr $211c		jsr	floatingpointHandler
.33bf	aa		tax				tax
.33c0	20 27 39	jsr $3927			jsr 	CheckRightParen
.33c3	60		rts				rts
.33c4					UnaryPeek:
.33c4	20 f0 33	jsr $33f0			jsr 	PDLCode 					; each has common setup code put reads 1,2 or 4 bytes
.33c7	4c e4 33	jmp $33e4			jmp 	PDLByte0
.33ca					UnaryDeek:
.33ca	20 f0 33	jsr $33f0			jsr 	PDLCode
.33cd	4c de 33	jmp $33de			jmp 	PDLByte1
.33d0					UnaryLeek:
.33d0	20 f0 33	jsr $33f0			jsr 	PDLCode
.33d3	a0 03		ldy #$03			ldy 	#3							; read 3-2
.33d5	b1 2a		lda ($2a),y			lda 	(temp0),y
.33d7	95 b0		sta $b0,x			sta 	esInt3,x
.33d9	88		dey				dey
.33da	b1 2a		lda ($2a),y			lda 	(temp0),y
.33dc	95 a8		sta $a8,x			sta 	esInt2,x
.33de					PDLByte1:
.33de	a0 01		ldy #$01			ldy 	#1
.33e0	b1 2a		lda ($2a),y			lda 	(temp0),y
.33e2	95 a0		sta $a0,x			sta 	esInt1,x
.33e4					PDLByte0:
.33e4	a0 00		ldy #$00			ldy 	#0
.33e6	b1 2a		lda ($2a),y			lda 	(temp0),y
.33e8	95 98		sta $98,x			sta 	esInt0,x
.33ea	a4 32		ldy $32				ldy 	tempShort 					; restore Y
.33ec	20 27 39	jsr $3927			jsr 	CheckRightParen 			; check right and return
.33ef	60		rts				rts
.33f0					PDLCode:
.33f0	20 1c 32	jsr $321c			jsr 	EvaluateInteger 			; some address
.33f3	b5 98		lda $98,x			lda 	esInt0,x 					; copy address of string to temp0
.33f5	85 2a		sta $2a				sta 	temp0
.33f7	b5 a0		lda $a0,x			lda 	esInt1,x
.33f9	85 2b		sta $2b				sta 	temp0+1
.33fb	a9 00		lda #$00			lda 	#0 							; zero upper 3 bytes of result, type okay.
.33fd	95 a0		sta $a0,x			sta 	esInt1,x 					; PEEK needs upper 3 cleared
.33ff	95 a8		sta $a8,x			sta 	esInt2,x
.3401	95 b0		sta $b0,x			sta 	esInt3,x
.3403	84 32		sty $32				sty 	tempShort 					; save Y
.3405	60		rts				rts
.3406					Unary_Random:
.3406	20 e4 38	jsr $38e4			jsr 	MInt32Random 				; generate random number.
.3409	b1 28		lda ($28),y			lda 	(codePtr),y 				; check followed by )
.340b	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.340d	f0 08		beq $3417			beq 	_URExit
.340f	e8		inx				inx 								; load range 0..r-1 into +1
.3410	20 1c 32	jsr $321c			jsr 	EvaluateInteger
.3413	ca		dex				dex
.3414	20 07 37	jsr $3707			jsr 	MInt32Modulus 				; calculate random % modulus
.3417					_URExit:
.3417	20 27 39	jsr $3927			jsr 	CheckRightParen 			; check right and return
.341a	60		rts				rts
.341b					Unary_Min:
.341b	a9 01		lda #$01			lda 	#1 							; c1 cmp c2 needs to be > e.g. c1 > c2
.341d	d0 02		bne $3421			bne 	UnaryMBody
.341f					Unary_Max:
.341f	a9 ff		lda #$ff			lda 	#$FF 						; c1 cmp c2 needs to be < e.g. c1 < c2
.3421					UnaryMBody:
.3421	48		pha				pha 								; save comparator on stack, shows min or max
.3422	20 fd 31	jsr $31fd			jsr 	Evaluate 					; get the first thing to check
.3425					_UnaryMLoop:
.3425	b1 28		lda ($28),y			lda 	(codePtr),y 				; found ), indicates end.
.3427	c8		iny				iny
.3428	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.342a	f0 09		beq $3435			beq 	_UnaryMExit
.342c	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; found , indicates more.
.342e	f0 07		beq $3437			beq 	_UnaryMCompare
.3430	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.3432	20 18 15	jsr $1518		jsr	errorHandler
.3435					_UnaryMExit:
.3435	68		pla				pla 								; done so throw comparator and return.
.3436	60		rts				rts
.3437					_UnaryMCompare:
.3437	e8		inx				inx 								; get the 2nd thing to evaluate
.3438	20 fd 31	jsr $31fd			jsr 	Evaluate
.343b	ca		dex				dex
.343c	20 c3 2f	jsr $2fc3			jsr 	PerformComparison 			; this is part of evaluate/compare.asm
.343f	85 32		sta $32				sta 	tempShort 					; save result
.3441	68		pla				pla 								; get what we need
.3442	48		pha				pha
.3443	c5 32		cmp $32				cmp 	tempShort 					; did we get it
.3445	d0 de		bne $3425			bne 	_UnaryMLoop 				; no, try another value.
.3447	20 b4 38	jsr $38b4			jsr 	MInt32False 				; promote 2nd to 1st.
.344a	20 98 37	jsr $3798			jsr 	MInt32Add
.344d	4c 25 34	jmp $3425			jmp 	_UnaryMLoop
.3450					Unary_Page:
.3450	20 b4 38	jsr $38b4			jsr 	MInt32False 				; zero
.3453	ad c8 0a	lda $0ac8			lda 	basePage 					; copy base page address in.
.3456	95 98		sta $98,x			sta 	esInt0,x
.3458	ad c9 0a	lda $0ac9			lda 	basePage+1
.345b	95 a0		sta $a0,x			sta 	esInt1,x
.345d	60		rts				rts
.345e					UnaryReference:
.345e	a9 0f		lda #$0f			lda 	#15
.3460	20 93 30	jsr $3093			jsr 	EvaluateLevel 				; evaluate term and don't deference.
.3463	b5 90		lda $90,x			lda 	esType,x 					; check it's a reference.
.3465	10 05		bpl $346c			bpl 	UType
.3467	a9 00		lda #$00			lda 	#0 							; make it an integer
.3469	95 90		sta $90,x			sta 	esType,x
.346b	60		rts				rts
.346c					UType:
.346c	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.346e	20 18 15	jsr $1518		jsr	errorHandler
.3471					UnaryHexMarker:
.3471	4c ee 31	jmp $31ee			jmp 	EvaluateIntegerTerm
.3474					UnaryComplement:
.3474	20 ee 31	jsr $31ee			jsr 	EvaluateIntegerTerm
.3477	20 88 38	jsr $3888			jsr 	MInt32Not
.347a	60		rts				rts
.347b					UnaryIntToFloat:
.347b	20 06 32	jsr $3206			jsr 	EvaluateNumeric				; some number
.347e	b5 90		lda $90,x			lda 	esType,x 					; if float already, exit
.3480	d0 0b		bne $348d			bne 	_UIFExit
.3482	8a		txa				txa 								; convert and set type
.3483	a2 1c		ldx #$1c		ldx	#28
.3485	20 1c 21	jsr $211c		jsr	floatingpointHandler
.3488	aa		tax				tax
.3489	a9 01		lda #$01			lda 	#1
.348b	95 90		sta $90,x			sta 	esType,x
.348d					_UIFExit:
.348d	60		rts				rts
.348e					UnaryFloatToInt:
.348e	20 06 32	jsr $3206			jsr 	EvaluateNumeric 			; the number
.3491	b5 90		lda $90,x			lda 	esType,x 					; if int already exit
.3493	f0 0b		beq $34a0			beq 	_UFIExit
.3495	8a		txa				txa 								; convert to int
.3496	a2 14		ldx #$14		ldx	#20
.3498	20 1c 21	jsr $211c		jsr	floatingpointHandler
.349b	aa		tax				tax
.349c	a9 00		lda #$00			lda 	#0 							; set type
.349e	95 90		sta $90,x			sta 	esType,x
.34a0					_UFIExit:
.34a0	60		rts				rts
.34a1					UnaryAlloc:
.34a1	e8		inx				inx 								; evaluate memory required
.34a2	20 1c 32	jsr $321c			jsr 	EvaluateInteger
.34a5	20 27 39	jsr $3927			jsr 	CheckRightParen
.34a8	ca		dex				dex
.34a9	b5 a9		lda $a9,x			lda 	esInt2+1,x 					; check at least in 64k range.
.34ab	15 b1		ora $b1,x			ora 	esInt3+1,x
.34ad	d0 1d		bne $34cc			bne 	_UABadValue
.34af	20 b4 38	jsr $38b4			jsr 	MInt32False					; zero return.
.34b2	a5 36		lda $36				lda 	lowMemory+1 				; copy low memory in
.34b4	95 a0		sta $a0,x			sta 	esInt1,x
.34b6	a5 35		lda $35				lda 	lowMemory
.34b8	95 98		sta $98,x			sta 	esInt0,x
.34ba	18		clc				clc 								; add alloc required.
.34bb	75 99		adc $99,x			adc 	esInt0+1,x
.34bd	85 35		sta $35				sta 	lowMemory
.34bf	a5 36		lda $36				lda 	lowMemory+1
.34c1	75 a1		adc $a1,x			adc 	esInt1+1,x
.34c3	85 36		sta $36				sta 	lowMemory+1
.34c5	b0 05		bcs $34cc			bcs		_UABadValue 				; overflow definitely bad.
.34c7	c5 34		cmp $34				cmp 	highMemory+1
.34c9	b0 01		bcs $34cc			bcs 	_UABadValue 				; out of memory bad.
.34cb	60		rts				rts
.34cc					_UABadValue:
.34cc	a2 22		ldx #$22			ldx 	#ErrorID_Memory
.34ce	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary/unary2.asm

.34d1					UnaryTimer:
.34d1	20 27 39	jsr $3927			jsr 	CheckRightParen 			; no parameters
.34d4	98		tya				tya
.34d5	48		pha				pha
.34d6	20 db 38	jsr $38db			jsr 	MInt32Zero 					; zero result
.34d9	86 2a		stx $2a				stx 	temp0 						; returning in YA so can't use .pshx
.34db	a2 1c		ldx #$1c		ldx	#28
.34dd	20 f6 14	jsr $14f6		jsr	deviceHandler
.34e0	a6 2a		ldx $2a				ldx 	temp0						; restore X and update 16 bit result
.34e2	95 98		sta $98,x			sta 	esInt0,x
.34e4	98		tya				tya
.34e5	95 a0		sta $a0,x			sta 	esInt1,x
.34e7	68		pla				pla
.34e8	a8		tay				tay
.34e9	60		rts				rts
.34ea					UnaryInkey:
.34ea	20 27 39	jsr $3927			jsr 	CheckRightParen
.34ed	86 2a		stx $2a				stx 	temp0
.34ef	a2 0a		ldx #$0a		ldx	#10
.34f1	20 f6 14	jsr $14f6		jsr	deviceHandler
.34f4	a6 2a		ldx $2a				ldx 	temp0
.34f6	20 c3 38	jsr $38c3			jsr 	MInt32Set8Bit
.34f9	60		rts				rts
.34fa					UnaryGet:
.34fa	20 27 39	jsr $3927			jsr 	CheckRightParen
.34fd	86 2a		stx $2a				stx 	temp0
.34ff					_UGLoop:
.34ff	a2 02		ldx #$02		ldx	#2
.3501	20 f6 14	jsr $14f6		jsr	deviceHandler
.3504	a2 0a		ldx #$0a		ldx	#10
.3506	20 f6 14	jsr $14f6		jsr	deviceHandler
.3509	c9 00		cmp #$00			cmp 	#0
.350b	f0 f2		beq $34ff			beq 	_UGLoop
.350d	a6 2a		ldx $2a				ldx 	temp0
.350f	20 c3 38	jsr $38c3			jsr 	MInt32Set8Bit
.3512	60		rts				rts
.3513					UnaryGetString:
.3513	20 fa 34	jsr $34fa			jsr 	UnaryGet
.3516					UGSDoChr:
.3516	4c 67 35	jmp $3567			jmp 	ChrCode
.3519					UnaryInkeyString:
.3519	20 ea 34	jsr $34ea			jsr 	UnaryInkey
.351c	b5 98		lda $98,x			lda 	esInt0,x
.351e	d0 f6		bne $3516			bne 	UGSDoChr
.3520	8a		txa				txa
.3521	a2 08		ldx #$08		ldx	#8
.3523	20 5f 3c	jsr $3c5f		jsr	stringHandler
.3526	aa		tax				tax
.3527	60		rts				rts
.3528					UnarySys:
.3528	20 1c 32	jsr $321c			jsr 	EvaluateInteger 				; get the address
.352b	20 27 39	jsr $3927			jsr 	CheckRightParen
.352e	20 0e 26	jsr $260e			jsr 	TOSToTemp0 						; copy call address to temp0
.3531	8a		txa				txa
.3532	48		pha				pha
.3533	98		tya				tya
.3534	48		pha				pha
.3535	ad 00 0a	lda $0a00			lda 	("A"-"A")*4+SingleLetterVar 	; load AXY
.3538	ae 5c 0a	ldx $0a5c			ldx 	("X"-"A")*4+SingleLetterVar
.353b	ac 60 0a	ldy $0a60			ldy 	("Y"-"A")*4+SingleLetterVar
.353e	20 4d 35	jsr $354d			jsr 	_CallTemp0
.3541	85 32		sta $32				sta 	tempShort 						; restore YX
.3543	68		pla				pla
.3544	a8		tay				tay
.3545	68		pla				pla
.3546	aa		tax				tax
.3547	a5 32		lda $32				lda 	tempShort
.3549	20 c3 38	jsr $38c3			jsr 	MInt32Set8Bit 					; return result.
.354c	60		rts				rts
.354d					_CallTemp0:
.354d	6c 2a 00	jmp ($002a)			jmp 	(temp0)
.3550					UnaryMem:
.3550	20 b4 38	jsr $38b4			jsr 	MInt32False 					; set to false (e.g. 0)
.3553	38		sec				sec
.3554	a5 33		lda $33				lda 	highMemory 						; calculate value
.3556	e5 35		sbc $35				sbc 	lowMemory
.3558	95 98		sta $98,x			sta 	esInt0,x
.355a	a5 34		lda $34				lda 	highMemory+1
.355c	e5 36		sbc $36				sbc 	lowMemory+1
.355e	95 a0		sta $a0,x			sta 	esInt1,x
.3560	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary/unarystr.asm

.3561					ExecChr:
.3561	20 24 32	jsr $3224			jsr 	EvaluateSmallInteger		; character number 0-255
.3564	20 27 39	jsr $3927			jsr 	CheckRightParen				; right bracket
.3567					ChrCode:
.3567	98		tya				tya
.3568	48		pha				pha
.3569	8a		txa				txa 								; A = stack
.356a	b4 98		ldy $98,x			ldy 	esInt0,x					; Y = character
.356c	a2 02		ldx #$02		ldx	#2
.356e	20 5f 3c	jsr $3c5f		jsr	stringHandler
.3571	aa		tax				tax 								; X = stack
.3572	68		pla				pla
.3573	a8		tay				tay
.3574	60		rts				rts
.3575					ExecLower:
.3575	38		sec				sec 								; set carry is lower
.3576	b0 01		bcs $3579			bcs 	ExecUpperLower
.3578					ExecUpper:
.3578	18		clc				clc 								; clear carry is upper
.3579					ExecUpperLower:
.3579	08		php				php 								; save carry
.357a	20 11 32	jsr $3211			jsr 	EvaluateString 				; string to stack,X
.357d	20 27 39	jsr $3927			jsr 	CheckRightParen 			; check closing right bracket.
.3580	28		plp				plp 								; restore carry, save Y
.3581	98		tya				tya
.3582	48		pha				pha
.3583	a9 00		lda #$00			lda 	#0 							; A zero if upper, 1 if lower.
.3585	2a		rol a				rol 	a
.3586	a8		tay				tay 								; now in Y
.3587	8a		txa				txa 								; do the substring and exit.
.3588	a2 0c		ldx #$0c		ldx	#12
.358a	20 5f 3c	jsr $3c5f		jsr	stringHandler
.358d	aa		tax				tax
.358e	68		pla				pla
.358f	a8		tay				tay
.3590	60		rts				rts
.3591					ExecLeft:
.3591	20 11 32	jsr $3211			jsr 	EvaluateString 				; string to stack,X
.3594	20 34 39	jsr $3934			jsr 	CheckComma
.3597	e8		inx				inx
.3598	a9 01		lda #$01			lda 	#1 							; 1 for 2nd parameter.
.359a	20 c3 38	jsr $38c3			jsr 	MInt32Set8Bit
.359d	e8		inx				inx
.359e	20 24 32	jsr $3224			jsr 	EvaluateSmallInteger 		; smallint 3rd parameter
.35a1					ExecSubstring:
.35a1	ca		dex				dex 								; fix up X
.35a2	ca		dex				dex
.35a3	20 27 39	jsr $3927			jsr 	CheckRightParen 			; check closing right bracket.
.35a6	8a		txa				txa 								; do the substring and exit.
.35a7	a2 0e		ldx #$0e		ldx	#14
.35a9	20 5f 3c	jsr $3c5f		jsr	stringHandler
.35ac	aa		tax				tax
.35ad	60		rts				rts
.35ae					ExecMid:
.35ae	20 11 32	jsr $3211			jsr 	EvaluateString 				; string to stack,X
.35b1	20 34 39	jsr $3934			jsr 	CheckComma
.35b4	e8		inx				inx
.35b5	20 24 32	jsr $3224			jsr 	EvaluateSmallInteger 		; smallint 2nd parameter
.35b8	c9 00		cmp #$00			cmp 	#0
.35ba	f0 15		beq $35d1			beq 	_EMValue
.35bc	e8		inx				inx
.35bd	a9 ff		lda #$ff			lda 	#255 						; 255 default for 3nd parameter - this is optional.
.35bf	20 c3 38	jsr $38c3			jsr 	MInt32Set8Bit
.35c2	b1 28		lda ($28),y			lda 	(codePtr),y 				; is there a ) next
.35c4	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN 				; if so, just MID$(a$,2)
.35c6	f0 d9		beq $35a1			beq 	ExecSubString
.35c8	20 34 39	jsr $3934			jsr 	CheckComma
.35cb	20 24 32	jsr $3224			jsr 	EvaluateSmallInteger 		; smallint 2nd parameter
.35ce	4c a1 35	jmp $35a1			jmp 	ExecSubString
.35d1					_EMValue:
.35d1	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.35d3	20 18 15	jsr $1518		jsr	errorHandler
.35d6					ExecRight:
.35d6	20 11 32	jsr $3211			jsr 	EvaluateString 				; string to stack,X
.35d9	20 34 39	jsr $3934			jsr 	CheckComma
.35dc	e8		inx				inx
.35dd	20 24 32	jsr $3224			jsr 	EvaluateSmallInteger 		; smallint 2nd parameter.
.35e0	ca		dex				dex
.35e1	98		tya				tya
.35e2	48		pha				pha
.35e3	b5 98		lda $98,x			lda 	esInt0,x 					; copy address of string to temp0
.35e5	85 2a		sta $2a				sta 	temp0
.35e7	b5 a0		lda $a0,x			lda 	esInt1,x
.35e9	85 2b		sta $2b				sta 	temp0+1
.35eb	a0 00		ldy #$00			ldy 	#0 							; point to length
.35ed	b1 2a		lda ($2a),y			lda 	(temp0),y 					; get the length.
.35ef	18		clc				clc 								; add 1.
.35f0	69 01		adc #$01			adc 	#1
.35f2	38		sec				sec
.35f3	f5 99		sbc $99,x			sbc 	esInt0+1,x  				; subtract right count.
.35f5	f0 02		beq $35f9			beq		_ERMake1 					; if zero, make it 1.
.35f7	b0 02		bcs $35fb			bcs		_EROkay
.35f9					_ERMake1:
.35f9	a9 01		lda #$01			lda 	#1 							; start position.
.35fb					_EROkay:
.35fb	e8		inx				inx 								; set start pos.
.35fc	95 98		sta $98,x			sta 	esInt0,x
.35fe	e8		inx				inx
.35ff	a9 ff		lda #$ff			lda 	#255 						; 255 default for 3nd parameter.
.3601	20 c3 38	jsr $38c3			jsr 	MInt32Set8Bit
.3604	68		pla				pla
.3605	a8		tay				tay
.3606	4c a1 35	jmp $35a1			jmp 	ExecSubString 				; do the substring code.

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32binary.asm

.3609					MInt32And:
.3609	b5 98		lda $98,x			lda 	esInt0,x
.360b	35 99		and $99,x			and 	esInt0+1,x
.360d	95 98		sta $98,x			sta 	esInt0,x
.360f	b5 a0		lda $a0,x			lda 	esInt1,x
.3611	35 a1		and $a1,x			and 	esInt1+1,x
.3613	95 a0		sta $a0,x			sta 	esInt1,x
.3615	b5 a8		lda $a8,x			lda 	esInt2,x
.3617	35 a9		and $a9,x			and 	esInt2+1,x
.3619	95 a8		sta $a8,x			sta 	esInt2,x
.361b	b5 b0		lda $b0,x			lda 	esInt3,x
.361d	35 b1		and $b1,x			and 	esInt3+1,x
.361f	95 b0		sta $b0,x			sta 	esInt3,x
.3621	60		rts				rts
.3622					MInt32Or:
.3622	b5 98		lda $98,x			lda 	esInt0,x
.3624	15 99		ora $99,x			ora 	esInt0+1,x
.3626	95 98		sta $98,x			sta 	esInt0,x
.3628	b5 a0		lda $a0,x			lda 	esInt1,x
.362a	15 a1		ora $a1,x			ora 	esInt1+1,x
.362c	95 a0		sta $a0,x			sta 	esInt1,x
.362e	b5 a8		lda $a8,x			lda 	esInt2,x
.3630	15 a9		ora $a9,x			ora 	esInt2+1,x
.3632	95 a8		sta $a8,x			sta 	esInt2,x
.3634	b5 b0		lda $b0,x			lda 	esInt3,x
.3636	15 b1		ora $b1,x			ora 	esInt3+1,x
.3638	95 b0		sta $b0,x			sta 	esInt3,x
.363a	60		rts				rts
.363b					MInt32Xor:
.363b	b5 98		lda $98,x			lda 	esInt0,x
.363d	55 99		eor $99,x			eor 	esInt0+1,x
.363f	95 98		sta $98,x			sta 	esInt0,x
.3641	b5 a0		lda $a0,x			lda 	esInt1,x
.3643	55 a1		eor $a1,x			eor 	esInt1+1,x
.3645	95 a0		sta $a0,x			sta 	esInt1,x
.3647	b5 a8		lda $a8,x			lda 	esInt2,x
.3649	55 a9		eor $a9,x			eor 	esInt2+1,x
.364b	95 a8		sta $a8,x			sta 	esInt2,x
.364d	b5 b0		lda $b0,x			lda 	esInt3,x
.364f	55 b1		eor $b1,x			eor 	esInt3+1,x
.3651	95 b0		sta $b0,x			sta 	esInt3,x
.3653	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32compare.asm

.3654					MInt32Compare:
.3654	b5 98		lda $98,x			lda 	esInt0,x 					; equality check first.
.3656	d5 99		cmp $99,x			cmp 	esInt0+1,x
.3658	d0 13		bne $366d			bne 	MInt32Compare2
.365a	b5 a0		lda $a0,x			lda 	esInt1,x
.365c	d5 a1		cmp $a1,x			cmp 	esInt1+1,x
.365e	d0 0d		bne $366d			bne 	MInt32Compare2
.3660	b5 a8		lda $a8,x			lda 	esInt2,x
.3662	d5 a9		cmp $a9,x			cmp 	esInt2+1,x
.3664	d0 07		bne $366d			bne 	MInt32Compare2
.3666	b5 b0		lda $b0,x			lda 	esInt3,x
.3668	55 b1		eor $b1,x			eor 	esInt3+1,x 					; EOR will return 0 if the same.
.366a	d0 01		bne $366d			bne 	MInt32Compare2
.366c	60		rts				rts
.366d					MInt32Compare2:
.366d	b5 98		lda $98,x			lda		esInt0,x 					; unsigned 32 bit comparison.
.366f	d5 99		cmp $99,x			cmp 	esInt0+1,x
.3671	b5 a0		lda $a0,x			lda		esInt1,x
.3673	f5 a1		sbc $a1,x			sbc 	esInt1+1,x
.3675	b5 a8		lda $a8,x			lda		esInt2,x
.3677	f5 a9		sbc $a9,x			sbc 	esInt2+1,x
.3679	b5 b0		lda $b0,x			lda		esInt3,x
.367b	f5 b1		sbc $b1,x			sbc 	esInt3+1,x
.367d	50 02		bvc $3681			bvc 	_I32LNoOverflow 			; make it signed 32 bit comparison
.367f	49 80		eor #$80			eor 	#$80
.3681					_I32LNoOverflow
.3681	30 03		bmi $3686			bmi 	MInt32CLess					; if -ve then return $FF
.3683	a9 01		lda #$01			lda 	#$01						; else return $01
.3685	60		rts				rts
.3686					MInt32CLess:
.3686	a9 ff		lda #$ff			lda 	#$FF
.3688	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32divide.asm

.3689					MInt32SDivide:
.3689	98		tya				tya  								; save Y, which is the count of negations
.368a	48		pha				pha
.368b	a0 00		ldy #$00			ldy 	#0 							; zero count
.368d	20 a5 36	jsr $36a5			jsr 	_MInt32SRemSign 			; unsign TOS
.3690	e8		inx				inx 								; unsign TOS+1
.3691	20 a5 36	jsr $36a5			jsr 	_MInt32SRemSign
.3694	ca		dex				dex
.3695	98		tya				tya 								; save sign count on stack
.3696	48		pha				pha
.3697	20 ae 36	jsr $36ae			jsr 	MInt32UDivide 				; unsigned division
.369a	68		pla				pla 								; get sign count back
.369b	29 01		and #$01			and 	#1 							; if it is odd, then negate result
.369d	f0 03		beq $36a2			beq 	_I32SNoNeg
.369f	20 6e 38	jsr $386e			jsr 	MInt32Negate
.36a2					_I32SNoNeg:
.36a2	68		pla				pla 								; restoe Y and exit
.36a3	a8		tay				tay
.36a4	60		rts				rts
.36a5					_MInt32SRemSign:
.36a5	b5 b0		lda $b0,x			lda 	esInt3,x 					; is it -ve
.36a7	10 04		bpl $36ad			bpl 	_MInt32SRSExit
.36a9	c8		iny				iny 								; increment the sign count
.36aa	20 6e 38	jsr $386e			jsr 	MInt32Negate 				; negate the value.
.36ad					_MInt32SRSExit:
.36ad	60		rts				rts
.36ae					MInt32UDivide:
.36ae	b5 99		lda $99,x			lda 	esInt0+1,x 					; check for division by zero
.36b0	15 a1		ora $a1,x			ora 	esInt1+1,x
.36b2	15 a2		ora $a2,x			ora 	esInt1+2,x
.36b4	15 a3		ora $a3,x			ora 	esInt1+3,x
.36b6	f0 4a		beq $3702			beq 	_MInt32DZero
.36b8	e8		inx				inx 								; clear A
.36b9	e8		inx				inx
.36ba	20 b4 38	jsr $38b4			jsr 	MInt32False
.36bd	ca		dex				dex
.36be	ca		dex				dex
.36bf	98		tya				tya 								; save Y on the stack
.36c0	48		pha				pha
.36c1	a0 20		ldy #$20			ldy 	#32 						; number of division passes
.36c3					_MInt32UDLoop:
.36c3	16 98		asl $98,x			asl 	esInt0,x					; shift QA left. First Q
.36c5	36 a0		rol $a0,x			rol 	esInt1,x
.36c7	36 a8		rol $a8,x			rol 	esInt2,x
.36c9	36 b0		rol $b0,x			rol 	esInt3,x
.36cb	36 9a		rol $9a,x			rol 	esInt0+2,x 					; then A.
.36cd	36 a2		rol $a2,x			rol 	esInt1+2,x
.36cf	36 aa		rol $aa,x			rol 	esInt2+2,x
.36d1	36 b2		rol $b2,x			rol 	esInt3+2,x
.36d3	38		sec				sec 								; calculate A-M saving result on the stack
.36d4	b5 9a		lda $9a,x			lda 	esInt0+2,x
.36d6	f5 99		sbc $99,x			sbc 	esInt0+1,x
.36d8	48		pha				pha
.36d9	b5 a2		lda $a2,x			lda 	esInt1+2,x
.36db	f5 a1		sbc $a1,x			sbc 	esInt1+1,x
.36dd	48		pha				pha
.36de	b5 aa		lda $aa,x			lda 	esInt2+2,x
.36e0	f5 a9		sbc $a9,x			sbc 	esInt2+1,x
.36e2	48		pha				pha
.36e3	b5 b2		lda $b2,x			lda 	esInt3+2,x
.36e5	f5 b1		sbc $b1,x			sbc 	esInt3+1,x
.36e7	90 10		bcc $36f9			bcc		_MInt32NoSubtract 			; if A < M (e.g. carry clear) then reject this.
.36e9	95 b2		sta $b2,x			sta 	esInt3+2,x 					; write result back to A
.36eb	68		pla				pla
.36ec	95 aa		sta $aa,x			sta 	esInt2+2,x
.36ee	68		pla				pla
.36ef	95 a2		sta $a2,x			sta 	esInt1+2,x
.36f1	68		pla				pla
.36f2	95 9a		sta $9a,x			sta 	esInt0+2,x
.36f4	f6 98		inc $98,x			inc 	esInt0,x 					; sets bit 0 of Q - it was shifted left previously.
.36f6	4c fc 36	jmp $36fc			jmp 	_MInt32Next 					; do the next iteration
.36f9					_MInt32NoSubtract:
.36f9	68		pla				pla
.36fa	68		pla				pla
.36fb	68		pla				pla
.36fc					_MInt32Next:
.36fc	88		dey				dey 								; do this 32 times.
.36fd	d0 c4		bne $36c3			bne 	_MInt32UDLoop
.36ff	68		pla				pla 								; restore Y and exit
.3700	a8		tay				tay
.3701	60		rts				rts
.3702					_MInt32DZero:
.3702	a2 05		ldx #$05			ldx 	#ErrorID_DivZero
.3704	20 18 15	jsr $1518		jsr	errorHandler
.3707					MInt32Modulus:
.3707	20 ae 36	jsr $36ae			jsr 	MInt32UDivide 				; do the division.
.370a	b5 b2		lda $b2,x			lda 	esInt3+2,x 					; copy 2nd on stack (the remainder) to the top.
.370c	95 b0		sta $b0,x			sta 	esInt3,x
.370e	b5 aa		lda $aa,x			lda 	esInt2+2,x
.3710	95 a8		sta $a8,x			sta 	esInt2,x
.3712	b5 a2		lda $a2,x			lda 	esInt1+2,x
.3714	95 a0		sta $a0,x			sta 	esInt1,x
.3716	b5 9a		lda $9a,x			lda 	esInt0+2,x
.3718	95 98		sta $98,x			sta 	esInt0,x
.371a	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32fromstr.asm

.0cfd					fs32Length:
>0cfd							.fill 	1
.371b					LinkInt32FromString:
.371b	aa		tax				tax
.371c	98		tya				tya
.371d	20 22 37	jsr $3722			jsr 	MInt32FromString
.3720	8a		txa				txa
.3721	60		rts				rts
.3722					MInt32FromString:
.3722	85 32		sta $32				sta 	tempShort 					; save base
.3724	98		tya				tya
.3725	48		pha				pha
.3726	a0 00		ldy #$00			ldy 	#0 							; get length of string to convert
.3728	b1 2a		lda ($2a),y			lda 	(temp0),y
.372a	8d fd 0c	sta $0cfd			sta 	fs32Length
.372d	f0 65		beq $3794			beq 	_I32FSFail2					; fail if length zero.
.372f	a0 01		ldy #$01			ldy 	#1 							; set index into string being read
.3731	b1 2a		lda ($2a),y			lda 	(temp0),y 					; look at first character
.3733	c9 2d		cmp #$2d			cmp 	#"-"						; is it a - character
.3735	d0 09		bne $3740			bne 	_I32FSNotNegative
.3737	ad fd 0c	lda $0cfd			lda 	fs32Length 					; get length back.
.373a	c9 01		cmp #$01			cmp 	#1 							; if 1 it is just a - on its own so fail.
.373c	f0 56		beq $3794			beq 	_I32FSFail2
.373e	a0 02		ldy #$02			ldy 	#2 							; first digit of the number.
.3740					_I32FSNotNegative:
.3740	a5 32		lda $32				lda 	tempShort 					; get the base back.
.3742	c0 02		cpy #$02			cpy 	#2 							; if we read a -ve (e.g. Y == 2)
.3744	d0 02		bne $3748			bne 	_I32FSNN2
.3746	09 80		ora #$80			ora 	#$80						; set bit 7, this indicates a negated result.
.3748					_I32FSNN2:
.3748	48		pha				pha 								; save base + final sign on stack.
.3749	20 b4 38	jsr $38b4			jsr 	MInt32False 				; zero the return value.
.374c					_I32FSMainLoop:
.374c	68		pla				pla 								; get the base back into tempShort
.374d	48		pha				pha
.374e	29 7f		and #$7f			and 	#$7F
.3750	85 32		sta $32				sta 	tempShort
.3752	b1 2a		lda ($2a),y			lda 	(temp0),y 					; look at next character.
.3754	c9 61		cmp #$61			cmp 	#"a" 						; fix up case.
.3756	90 02		bcc $375a			bcc 	_I32FSNotLC
.3758	e9 20		sbc #$20			sbc 	#32
.375a					_I32FSNotLC:
.375a	38		sec				sec 								; subtract 48 (ASCII "0") - ASCII to Hex conversion
.375b	e9 30		sbc #$30			sbc 	#"0"
.375d	90 34		bcc $3793			bcc 	_I32FSFail 					; nothing more to do.
.375f	c9 0a		cmp #$0a			cmp 	#9+1 						; if it is 0-9 validate vs base.
.3761	90 06		bcc $3769			bcc 	_I32FSValidate
.3763	c9 11		cmp #$11			cmp 	#17 						; is it between 58 and 64 ? if so bad.
.3765	90 2c		bcc $3793			bcc 	_I32FSFail
.3767	e9 07		sbc #$07			sbc 	#7 							; adjust into range so now character is 0->nnn
.3769					_I32FSValidate:
.3769	c5 32		cmp $32				cmp 	tempShort 					; compare against the base.
.376b	b0 26		bcs $3793			bcs 	_I32FSFail 					; sorry, too large for this base, so fail.
.376d	48		pha				pha 								; save the new digit value.
.376e	e8		inx				inx 								; put base into next slot up on stack
.376f	a5 32		lda $32				lda 	tempShort
.3771	20 c3 38	jsr $38c3			jsr 	MInt32Set8Bit
.3774	ca		dex				dex
.3775	20 cc 37	jsr $37cc			jsr 	MInt32Multiply 				; multiply current by the base
.3778	e8		inx				inx
.3779	68		pla				pla  								; put additive into next slot
.377a	20 c3 38	jsr $38c3			jsr 	MInt32Set8Bit
.377d	ca		dex				dex
.377e	20 98 37	jsr $3798			jsr 	MInt32Add 					; and add it
.3781	c8		iny				iny 								; bump the character pointer
.3782	cc fd 0c	cpy $0cfd			cpy 	fs32Length 					; until > length.
.3785	f0 c5		beq $374c			beq 	_I32FSMainLoop
.3787	90 c3		bcc $374c			bcc 	_I32FSMainLoop
.3789					_I32FSDone:
.3789	68		pla				pla 								; get base/final sign back
.378a	10 03		bpl $378f			bpl 	_I32FSNN3
.378c	20 6e 38	jsr $386e			jsr 	MInt32Negate 				; negate the result.
.378f					_I32FSNN3:
.378f	68		pla				pla
.3790	a8		tay				tay
.3791	38		sec				sec
.3792	60		rts				rts
.3793					_I32FSFail:
.3793	68		pla				pla
.3794					_I32FSFail2:
.3794	68		pla				pla
.3795	a8		tay				tay
.3796	18		clc				clc
.3797	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32math.asm

.3798					MInt32Add:
.3798	18		clc				clc
.3799	b5 98		lda $98,x			lda 	esInt0,x
.379b	75 99		adc $99,x			adc 	esInt0+1,x
.379d	95 98		sta $98,x			sta 	esInt0,x
.379f	b5 a0		lda $a0,x			lda 	esInt1,x
.37a1	75 a1		adc $a1,x			adc 	esInt1+1,x
.37a3	95 a0		sta $a0,x			sta 	esInt1,x
.37a5	b5 a8		lda $a8,x			lda 	esInt2,x
.37a7	75 a9		adc $a9,x			adc 	esInt2+1,x
.37a9	95 a8		sta $a8,x			sta 	esInt2,x
.37ab	b5 b0		lda $b0,x			lda 	esInt3,x
.37ad	75 b1		adc $b1,x			adc 	esInt3+1,x
.37af	95 b0		sta $b0,x			sta 	esInt3,x
.37b1	60		rts				rts
.37b2					MInt32Sub:
.37b2	38		sec				sec
.37b3	b5 98		lda $98,x			lda 	esInt0,x
.37b5	f5 99		sbc $99,x			sbc 	esInt0+1,x
.37b7	95 98		sta $98,x			sta 	esInt0,x
.37b9	b5 a0		lda $a0,x			lda 	esInt1,x
.37bb	f5 a1		sbc $a1,x			sbc 	esInt1+1,x
.37bd	95 a0		sta $a0,x			sta 	esInt1,x
.37bf	b5 a8		lda $a8,x			lda 	esInt2,x
.37c1	f5 a9		sbc $a9,x			sbc 	esInt2+1,x
.37c3	95 a8		sta $a8,x			sta 	esInt2,x
.37c5	b5 b0		lda $b0,x			lda 	esInt3,x
.37c7	f5 b1		sbc $b1,x			sbc 	esInt3+1,x
.37c9	95 b0		sta $b0,x			sta 	esInt3,x
.37cb	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32multiply.asm

.37cc					MInt32Multiply:
.37cc	e8		inx				inx 								; copy 2nd -> 3rd
.37cd	20 f2 37	jsr $37f2			jsr 	MInt32CopyUp
.37d0	ca		dex				dex
.37d1	20 f2 37	jsr $37f2			jsr 	MInt32CopyUp 				; copy 1st -> 2nd
.37d4	20 b4 38	jsr $38b4			jsr 	MInt32False 				; zero 1st.
.37d7					_I32Loop:
.37d7	b5 9a		lda $9a,x			lda 	esInt0+2,x 					; get low bit of 3rd
.37d9	29 01		and #$01			and 	#1
.37db	f0 03		beq $37e0			beq 	_I32NoAdd 					; if set
.37dd	20 98 37	jsr $3798			jsr 	MInt32Add 					; add 2nd to 1st.
.37e0					_I32NoAdd:
.37e0	e8		inx				inx 								; shift 2nd left
.37e1	20 c9 38	jsr $38c9			jsr 	MInt32ShiftLeft
.37e4	e8		inx				inx  								; shift 3rd right
.37e5	20 d2 38	jsr $38d2			jsr 	MInt32ShiftRight
.37e8	20 db 38	jsr $38db			jsr 	MInt32Zero 					; check if zero.
.37eb	08		php				php 								; save status bits
.37ec	ca		dex				dex 	 							; point back to 1st
.37ed	ca		dex				dex
.37ee	28		plp				plp 								; get status bits
.37ef	d0 e6		bne $37d7			bne 	_I32Loop 					; if non-zero keep going.
.37f1	60		rts				rts
.37f2					MInt32CopyUp:
.37f2	b5 98		lda $98,x			lda 	esInt0,x
.37f4	95 99		sta $99,x			sta 	esInt0+1,x
.37f6	b5 a0		lda $a0,x			lda 	esInt1,x
.37f8	95 a1		sta $a1,x			sta 	esInt1+1,x
.37fa	b5 a8		lda $a8,x			lda 	esInt2,x
.37fc	95 a9		sta $a9,x			sta 	esInt2+1,x
.37fe	b5 b0		lda $b0,x			lda 	esInt3,x
.3800	95 b1		sta $b1,x			sta 	esInt3+1,x
.3802	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32tostr.asm

>0cfe					MCharCount:	.fill 	1						; count of converted characters
.3803					MLInt32ToString:
.3803	aa		tax				tax									; module passes stack in A, base in Y
.3804	98		tya				tya
.3805	20 0a 38	jsr $380a			jsr 	MInt32ToString
.3808	8a		txa				txa
.3809	60		rts				rts
.380a					MInt32ToString:
.380a	48		pha				pha 								; save base
.380b	85 32		sta $32				sta 	tempShort 					; save target base.
.380d	a9 00		lda #$00			lda 	#0
.380f	8d fe 0c	sta $0cfe			sta 	MCharCount 					; clear character count to 0
.3812	98		tya				tya
.3813	48		pha				pha
.3814	a5 32		lda $32				lda 	tempShort 					; check if we are signed conversion
.3816	10 10		bpl $3828			bpl 	_I32TSUnsigned
.3818	48		pha				pha 								; save base on stack.
.3819	b5 b0		lda $b0,x			lda 	esInt3,x 					; is it actually negative
.381b	10 08		bpl $3825			bpl 	_I32TSNoFlip
.381d	a9 2d		lda #$2d			lda 	#"-" 						; write a '-' prefix out.
.381f	20 5b 38	jsr $385b			jsr 	MI32WriteCharacter
.3822	20 6e 38	jsr $386e			jsr 	MInt32Negate 				; negate the value, so now it's positive.
.3825					_I32TSNoFlip:
.3825	68		pla				pla 								; get the base back
.3826	29 7f		and #$7f			and 	#$7F 						; clear the sign flag so it's just a base now.
.3828					_I32TSUnsigned:
.3828	20 36 38	jsr $3836			jsr 	MI32DivideWrite 			; recursive code to output string.
.382b	a0 00		ldy #$00			ldy 	#0 							; write charcount to first character.
.382d	ad fe 0c	lda $0cfe			lda 	MCharCount
.3830	91 2a		sta ($2a),y			sta 	(temp0),y
.3832	68		pla				pla
.3833	a8		tay				tay
.3834	68		pla				pla
.3835	60		rts				rts
.3836					MI32DivideWrite:
.3836	48		pha				pha 								; save the divisor/base
.3837	e8		inx				inx 								; write in the dividing position.
.3838	20 c3 38	jsr $38c3			jsr 	MInt32Set8Bit
.383b	ca		dex				dex
.383c	20 ae 36	jsr $36ae			jsr 	MInt32UDivide 				; divide number by base.
.383f	68		pla				pla 								; get the base into Y
.3840	a8		tay				tay
.3841	b5 9a		lda $9a,x			lda 	esInt0+2,x 					; get the remainder and push on the stack.
.3843	48		pha				pha
.3844	20 db 38	jsr $38db			jsr 	MInt32Zero 					; is the result zero ?
.3847	f0 04		beq $384d			beq 	_I32NoRecurse 				; if so, don't recurse.
.3849	98		tya				tya 								; put base into A
.384a	20 36 38	jsr $3836			jsr 	MI32DivideWrite 				; and jsr the dividor recursively.
.384d					_I32NoRecurse:
.384d	68		pla				pla 								; get the remainder back
.384e	c9 0a		cmp #$0a			cmp 	#10  						; handle hexadecimals, now converting to ASCII
.3850	90 02		bcc $3854			bcc 	_I32NotHex
.3852	69 06		adc #$06			adc 	#7-1
.3854					_I32NotHex:
.3854	18		clc				clc 								; make it ASCII
.3855	69 30		adc #$30			adc 	#48
.3857	20 5b 38	jsr $385b			jsr 	MI32WriteCharacter 			; write the character out
.385a	60		rts				rts 								; and exit.
.385b					MI32WriteCharacter:
.385b	ee fe 0c	inc $0cfe			inc 	MCharCount 					; bump count (space for leading count)
.385e	ac fe 0c	ldy $0cfe			ldy 	MCharCount 					; get position
.3861	91 2a		sta ($2a),y			sta 	(temp0),y 					; write out with trailing 0
.3863	c8		iny				iny
.3864	a9 00		lda #$00			lda 	#0
.3866	91 2a		sta ($2a),y			sta 	(temp0),y
.3868	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32unary.asm

>0cff					MSeed32:	.fill 	4							; random number seed.
.3869					MInt32Absolute:
.3869	b5 b0		lda $b0,x			lda 	esInt3,x 					; use negate code if -ve.
.386b	30 01		bmi $386e			bmi 	MInt32Negate
.386d	60		rts				rts
.386e					MInt32Negate:
.386e	38		sec				sec 								; subtract from zero.
.386f	a9 00		lda #$00			lda 	#0
.3871	f5 98		sbc $98,x			sbc 	esInt0,x
.3873	95 98		sta $98,x			sta 	esInt0,x
.3875	a9 00		lda #$00			lda 	#0
.3877	f5 a0		sbc $a0,x			sbc 	esInt1,x
.3879	95 a0		sta $a0,x			sta 	esInt1,x
.387b	a9 00		lda #$00			lda 	#0
.387d	f5 a8		sbc $a8,x			sbc 	esInt2,x
.387f	95 a8		sta $a8,x			sta 	esInt2,x
.3881	a9 00		lda #$00			lda 	#0
.3883	f5 b0		sbc $b0,x			sbc 	esInt3,x
.3885	95 b0		sta $b0,x			sta 	esInt3,x
.3887	60		rts				rts
.3888					MInt32Not:
.3888	b5 98		lda $98,x			lda 	esInt0,x 					; one's complement all four.
.388a	49 ff		eor #$ff			eor 	#$FF
.388c	95 98		sta $98,x			sta 	esInt0,x
.388e	b5 a0		lda $a0,x			lda 	esInt1,x
.3890	49 ff		eor #$ff			eor 	#$FF
.3892	95 a0		sta $a0,x			sta 	esInt1,x
.3894	b5 a8		lda $a8,x			lda 	esInt2,x
.3896	49 ff		eor #$ff			eor 	#$FF
.3898	95 a8		sta $a8,x			sta 	esInt2,x
.389a	b5 b0		lda $b0,x			lda 	esInt3,x
.389c	49 ff		eor #$ff			eor 	#$FF
.389e	95 b0		sta $b0,x			sta 	esInt3,x
.38a0	60		rts				rts
.38a1					MInt32Sign:
.38a1	b5 b0		lda $b0,x			lda 	esInt3,x					; look at MSB
.38a3	30 0b		bmi $38b0			bmi 	MInt32True 					; if set return -1 (true)
.38a5	20 db 38	jsr $38db			jsr 	MInt32Zero 					; is it zero ?
.38a8	f0 0a		beq $38b4			beq 	MInt32False 				; if zero return 0 (false)
.38aa	20 b4 38	jsr $38b4			jsr 	MInt32False 				; > 0 return 1, by setting it to zero
.38ad	f6 98		inc $98,x			inc 	esInt0,x  					; and bumping the LSB.
.38af	60		rts				rts
.38b0					MInt32True:
.38b0	a9 ff		lda #$ff			lda 	#$FF 						; set to $FFFFFFFF
.38b2	d0 02		bne $38b6			bne 	MInt32WriteAll
.38b4					MInt32False:
.38b4	a9 00		lda #$00			lda 	#0
.38b6					MInt32WriteAll:
.38b6	95 98		sta $98,x			sta 	esInt0,x
.38b8					MInt32Write123:
.38b8	95 a0		sta $a0,x			sta 	esInt1,x
.38ba	95 a8		sta $a8,x			sta 	esInt2,x
.38bc	95 b0		sta $b0,x			sta 	esInt3,x
.38be	a9 00		lda #$00			lda 	#$00						; and make it an integer
.38c0	95 90		sta $90,x			sta 	esType,x
.38c2	60		rts				rts
.38c3					MInt32Set8Bit:
.38c3	95 98		sta $98,x			sta 	esInt0,x 					; coopt above function to write
.38c5	a9 00		lda #$00			lda 	#0 							; a value 0-255
.38c7	f0 ef		beq $38b8			beq		MInt32Write123
.38c9					MInt32ShiftLeft:
.38c9	16 98		asl $98,x			asl 	esInt0,x
.38cb	36 a0		rol $a0,x			rol	 	esInt1,x
.38cd	36 a8		rol $a8,x			rol	 	esInt2,x
.38cf	36 b0		rol $b0,x			rol	 	esInt3,x
.38d1	60		rts				rts
.38d2					MInt32ShiftRight:
.38d2	56 b0		lsr $b0,x			lsr 	esInt3,x
.38d4	76 a8		ror $a8,x			ror 	esInt2,x
.38d6	76 a0		ror $a0,x			ror 	esInt1,x
.38d8	76 98		ror $98,x			ror 	esInt0,x
.38da	60		rts				rts
.38db					MInt32Zero:
.38db	b5 98		lda $98,x			lda 	esInt0,x
.38dd	15 a0		ora $a0,x			ora 	esInt1,x
.38df	15 a8		ora $a8,x			ora 	esInt2,x
.38e1	15 b0		ora $b0,x			ora 	esInt3,x
.38e3	60		rts				rts
.38e4					MInt32Random:
.38e4	98		tya				tya
.38e5	48		pha				pha
.38e6	a0 07		ldy #$07			ldy 	#7 							; do it 7 times
.38e8	ad ff 0c	lda $0cff			lda 	MSeed32+0 					; check the seed isn't zero
.38eb	d0 03		bne $38f0			bne 	_Random1
.38ed	a8		tay				tay 								; if so do it 256 times
.38ee	a9 aa		lda #$aa			lda		#$AA 						; and use this to seed the seed....
.38f0					_Random1:
.38f0	0a		asl a				asl 	a
.38f1	2e 00 0d	rol $0d00			rol 	MSeed32+1
.38f4	2e 01 0d	rol $0d01			rol 	MSeed32+2
.38f7	2e 02 0d	rol $0d02			rol 	MSeed32+3
.38fa	90 02		bcc $38fe			bcc 	_Random2
.38fc	49 c5		eor #$c5			eor 	#$C5
.38fe					_Random2:
.38fe	88		dey				dey
.38ff	d0 ef		bne $38f0			bne 	_Random1
.3901	8d ff 0c	sta $0cff			sta 	MSeed32+0 					; copy the seed in.
.3904	95 98		sta $98,x			sta 	esInt0,x
.3906	ad 00 0d	lda $0d00			lda 	MSeed32+1
.3909	95 a0		sta $a0,x			sta 	esInt1,x
.390b	ad 01 0d	lda $0d01			lda 	MSeed32+2
.390e	95 a8		sta $a8,x			sta 	esInt2,x
.3910	ad 02 0d	lda $0d02			lda 	MSeed32+3
.3913	95 b0		sta $b0,x			sta 	esInt3,x
.3915	68		pla				pla
.3916	a8		tay				tay
.3917	a9 00		lda #$00			lda 	#0
.3919	95 90		sta $90,x			sta 	esType,x
.391b	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/utility/check.asm

.391c					CheckToken:
.391c	d1 28		cmp ($28),y			cmp 	(codePtr),y
.391e	d0 02		bne $3922			bne 	_CTError
.3920	c8		iny				iny
.3921	60		rts				rts
.3922					_CTError:
.3922	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.3924	20 18 15	jsr $1518		jsr	errorHandler
.3927					CheckRightParen:
.3927	b1 28		lda ($28),y			lda 	(codePtr),y
.3929	c8		iny				iny
.392a	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.392c	d0 01		bne $392f			bne 	_CRPError
.392e	60		rts				rts
.392f					_CRPError:
.392f	a2 09		ldx #$09			ldx 	#ErrorID_MissingRP
.3931	20 18 15	jsr $1518		jsr	errorHandler
.3934					CheckComma:
.3934	b1 28		lda ($28),y			lda 	(codePtr),y
.3936	c8		iny				iny
.3937	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.3939	d0 01		bne $393c			bne 	_CCError
.393b	60		rts				rts
.393c					_CCError:
.393c	a2 0a		ldx #$0a			ldx 	#ErrorID_MissingComma
.393e	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/utility/stack.asm

.0037					rsPointer:
>0037							.fill 	2							; to TOS, which is the current top-token.
.3941					RSReset:
.3941	a9 ff		lda #$ff			lda 	#(returnStack+retStackSize-1) & $FF
.3943	85 37		sta $37				sta 	rsPointer
.3945	a9 09		lda #$09			lda 	#(returnStack+retStackSize-1) >> 8
.3947	85 38		sta $38				sta 	1+(rsPointer)
.3949	a9 ff		lda #$ff			lda 	#$FF 						; put a duff marker on TOS, so nothing will pop
.394b	8d ff 09	sta $09ff			sta 	returnStack+retStackSize-1
.394e	60		rts				rts
.394f					RSClaim:
.394f	84 32		sty $32				sty 	tempShort 					; preserve Y
.3951	48		pha				pha 								; save marker on stack.
.3952	8a		txa				txa 								; get bytes required.
.3953	38		sec				sec
.3954	49 ff		eor #$ff			eor 	#$FF 						; add to rsPointer using 2's complement.
.3956	65 37		adc $37				adc 	rsPointer
.3958	85 37		sta $37				sta 	rsPointer
.395a	a5 38		lda $38				lda 	rsPointer+1
.395c	69 ff		adc #$ff			adc 	#$FF
.395e	85 38		sta $38				sta 	rsPointer+1
.3960	c9 08		cmp #$08			cmp 	#returnStack>>8 			; overflow. underflow actually :)
.3962	90 08		bcc $396c			bcc 	_RSCOverflow
.3964	68		pla				pla 								; get marker back
.3965	a0 00		ldy #$00			ldy 	#0 							; write marker out.
.3967	91 37		sta ($37),y			sta 	(rsPointer),y
.3969	a4 32		ldy $32				ldy 	tempShort 					; restore Y and exit
.396b	60		rts				rts
.396c					_RSCOverflow:
.396c	a2 16		ldx #$16			ldx 	#ErrorID_RetStack
.396e	20 18 15	jsr $1518		jsr	errorHandler
.3971					RSFree:
.3971	18		clc				clc
.3972	65 37		adc $37				adc 	rsPointer
.3974	85 37		sta $37				sta 	rsPointer
.3976	90 02		bcc $397a			bcc 	_RSFExit
.3978	e6 38		inc $38				inc 	rsPointer+1
.397a					_RSFExit:
.397a	60		rts				rts
.397b					RSSavePosition:
.397b	84 32		sty $32				sty 	tempShort 					; save Y position
.397d	a8		tay				tay 								; this is where we write it.
.397e	a5 28		lda $28				lda 	codePtr 					; write codePointer out
.3980	91 37		sta ($37),y			sta 	(rsPointer),y
.3982	c8		iny				iny
.3983	a5 29		lda $29				lda 	codePtr+1
.3985	91 37		sta ($37),y			sta 	(rsPointer),y
.3987	c8		iny				iny
.3988	a5 32		lda $32				lda 	tempShort 					; write the Y position out.
.398a	91 37		sta ($37),y			sta 	(rsPointer),y
.398c	a8		tay				tay 								; fix Y back again to original value
.398d	60		rts				rts
.398e					RSLoadPosition:
.398e	a8		tay				tay
.398f	b1 37		lda ($37),y			lda 	(rsPointer),y 				; read codePointer back
.3991	85 28		sta $28				sta 	codePtr
.3993	c8		iny				iny
.3994	b1 37		lda ($37),y			lda 	(rsPointer),y
.3996	85 29		sta $29				sta 	codePtr+1
.3998	c8		iny				iny
.3999	b1 37		lda ($37),y			lda 	(rsPointer),y 				; and the offset
.399b	a8		tay				tay 								; to Y
.399c	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/utility/warmstart.asm

.399d					WarmStart:
.399d	a2 04		ldx #$04		ldx	#4
.399f	20 08 23	jsr $2308		jsr	interactionHandler

;******  Return to file: main/main.asm

.39a2					mainHandler:
.39a2	7c a5 39	jmp ($39a5,x)			jmp 	(mainVectors,x)
.39a5					mainVectors:
>39a5	c1 39					.word _DummyControlHandler ; index 0
>39a7	34 39					.word CheckComma           ; index 2
>39a9	27 39					.word CheckRightParen      ; index 4
>39ab	10 2b					.word XCommandClear        ; index 6
>39ad	37 32					.word LinkEvaluate         ; index 8
>39af	43 32					.word LinkEvaluateInteger  ; index 10
>39b1	4f 32					.word LinkEvaluateSmallInt ; index 12
>39b3	49 32					.word LinkEvaluateString   ; index 14
>39b5	3d 32					.word LinkEvaluateTerm     ; index 16
>39b7	03 38					.word MLInt32ToString      ; index 18
>39b9	9f 2c					.word Command_XNew         ; index 20
>39bb	ad 2c					.word XCommand_Run         ; index 22
>39bd	b9 2c					.word Command_RunFrom      ; index 24
>39bf	1b 37					.word LinkInt32FromString  ; index 26
.39c1					_DummyControlHandler:
.39c1	60		rts			rts

;******  Return to file: basic.asm

.39c2					section_end_main:
.39c2					section_start_string:

;******  Processing file: string/string.asm


;******  Processing file: string/functions/chr.asm

.39c2					StringChrs:
.39c2	aa		tax				tax 								; set up stack
.39c3	a9 02		lda #$02			lda 	#2
.39c5	20 85 3a	jsr $3a85			jsr 	AllocateSoftString
.39c8	98		tya				tya
.39c9	20 ab 3a	jsr $3aab			jsr 	WriteSoftString
.39cc					StringUpdate:
.39cc	20 da 39	jsr $39da			jsr 	ReturnSoftString
.39cf	8a		txa				txa
.39d0	60		rts				rts
.39d1					StringNull:
.39d1	aa		tax				tax
.39d2	a9 01		lda #$01			lda 	#1
.39d4	20 85 3a	jsr $3a85			jsr 	AllocateSoftString
.39d7	4c cc 39	jmp $39cc			jmp 	StringUpdate
.39da					ReturnSoftString:
.39da	a5 39		lda $39				lda 	softMemAlloc 				; copy address
.39dc	95 98		sta $98,x			sta 	esInt0,x
.39de	a5 3a		lda $3a				lda 	softMemAlloc+1
.39e0	95 a0		sta $a0,x			sta 	esInt1,x
.39e2	a9 00		lda #$00			lda 	#0 							; zero upper bytes
.39e4	95 a8		sta $a8,x			sta 	esInt2,x
.39e6	95 b0		sta $b0,x			sta 	esInt3,x
.39e8	a9 40		lda #$40			lda 	#$40 						; type string.
.39ea	95 90		sta $90,x			sta 	esType,x
.39ec	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/functions/compare.asm

.39ed					STRCompare:
.39ed	48		pha				pha 								; save A
.39ee	aa		tax				tax 								; put stack pos in X
.39ef	98		tya				tya
.39f0	48		pha				pha
.39f1	20 25 3a	jsr $3a25			jsr 	CopyStringPair 				; copy strings to temp0,temp1
.39f4	a0 00		ldy #$00			ldy 	#0 							; get the smaller of the two string sizes.
.39f6	b1 2a		lda ($2a),y			lda 	(temp0),y
.39f8	d1 2c		cmp ($2c),y			cmp 	(temp1),y
.39fa	90 02		bcc $39fe			bcc 	_SCNotSmaller
.39fc	b1 2c		lda ($2c),y			lda 	(temp1),y
.39fe					_SCNotSmaller:
.39fe	aa		tax				tax 								; put that in X. We compare this many chars first.
.39ff					_SCCompareLoop:
.39ff	e0 00		cpx #$00			cpx 	#0 							; if compared all the smaller, then it is the shorter
.3a01	f0 0c		beq $3a0f			beq 	_SCSameToEndShortest 		; one that is the smallest if they are different lengths.
.3a03	ca		dex				dex 								; decrement chars to compare.
.3a04	c8		iny				iny 								; move to next character
.3a05	38		sec				sec 								; calculate s1[y]-s2[y]
.3a06	b1 2a		lda ($2a),y			lda 	(temp0),y
.3a08	f1 2c		sbc ($2c),y			sbc 	(temp1),y
.3a0a	d0 0a		bne $3a16			bne 	_SCReturnResult 			; if different return sign of A
.3a0c	4c ff 39	jmp $39ff			jmp 	_SCCompareLoop
.3a0f					_SCSameToEndShortest
.3a0f	a0 00		ldy #$00			ldy 	#0 							; compare len(s1) - len(s2)
.3a11	38		sec				sec
.3a12	b1 2a		lda ($2a),y			lda 	(temp0),y
.3a14	f1 2c		sbc ($2c),y			sbc 	(temp1),y
.3a16					_SCReturnResult:
.3a16	08		php				php 								; set return to zero preserving PSW.
.3a17	a2 00		ldx #$00			ldx 	#0
.3a19	28		plp				plp
.3a1a	f0 05		beq $3a21			beq 	_SCExit 					; two values equal, then exit
.3a1c	ca		dex				dex 								; X = $FF
.3a1d	90 02		bcc $3a21			bcc 	_SCExit 					; if 1st < 2nd then -1
.3a1f	a2 01		ldx #$01			ldx 	#1 							; X = $01 if greater
.3a21					_SCExit:
.3a21	68		pla				pla
.3a22	a8		tay				tay
.3a23	68		pla				pla
.3a24	60		rts				rts
.3a25					CopyStringPair:
.3a25	b5 99		lda $99,x			lda 	esInt0+1,x
.3a27	85 2c		sta $2c				sta 	temp1
.3a29	b5 a1		lda $a1,x			lda 	esInt1+1,x
.3a2b	85 2d		sta $2d				sta 	temp1+1
.3a2d					CopyStringTop:
.3a2d	b5 98		lda $98,x			lda 	esInt0,x
.3a2f	85 2a		sta $2a				sta 	temp0
.3a31	b5 a0		lda $a0,x			lda 	esInt1,x
.3a33	85 2b		sta $2b				sta 	temp0+1
.3a35	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/functions/concat.asm

.3a36					StringConcat:
.3a36	aa		tax				tax									; stack pos in X
.3a37	98		tya				tya
.3a38	48		pha				pha
.3a39	20 25 3a	jsr $3a25			jsr 	CopyStringPair 				; temp0 and temp1 point to strings to concat.
.3a3c	38		sec				sec 								; calculate alloc strings. lengths added + 1 for size.
.3a3d	a0 00		ldy #$00			ldy 	#0
.3a3f	b1 2a		lda ($2a),y			lda 	(temp0),y
.3a41	71 2c		adc ($2c),y			adc 	(temp1),y
.3a43	b0 1c		bcs $3a61			bcs 	_SCError 					; just too many characters here.
.3a45	c9 fc		cmp #$fc			cmp 	#MaxStringSize
.3a47	b0 18		bcs $3a61			bcs 	_SCError
.3a49	20 85 3a	jsr $3a85			jsr 	AllocateSoftString 			; allocate soft string memory, set pointer.
.3a4c	20 7c 3a	jsr $3a7c			jsr 	CopySoftToStack 			; copy that to the stack.
.3a4f	20 66 3a	jsr $3a66			jsr 	SCCopyTemp0 				; copy temp0
.3a52	a5 2c		lda $2c				lda 	temp1 						; copy temp1 to temp0
.3a54	85 2a		sta $2a				sta 	temp0
.3a56	a5 2d		lda $2d				lda 	temp1+1
.3a58	85 2b		sta $2b				sta 	temp0+1
.3a5a	20 66 3a	jsr $3a66			jsr 	SCCopyTemp0 				; copy temp0 e.g. what was temp1.
.3a5d	68		pla				pla
.3a5e	a8		tay				tay
.3a5f	8a		txa				txa 								; and A
.3a60	60		rts				rts
.3a61					_SCError:
.3a61	a2 0d		ldx #$0d			ldx 	#ErrorID_StrLen
.3a63	20 18 15	jsr $1518		jsr	errorHandler
.3a66					SCCopyTemp0:
.3a66	a0 00		ldy #$00			ldy 	#0 							; put count in temp2
.3a68	b1 2a		lda ($2a),y			lda 	(temp0),y
.3a6a	85 2e		sta $2e				sta 	temp2
.3a6c					_SCCopyLoop:
.3a6c	a5 2e		lda $2e				lda 	temp2 						; done the lot
.3a6e	f0 0b		beq $3a7b			beq 	_SCCopyExit
.3a70	c6 2e		dec $2e				dec 	temp2
.3a72	c8		iny				iny 								; get next char
.3a73	b1 2a		lda ($2a),y			lda 	(temp0),y
.3a75	20 ab 3a	jsr $3aab			jsr 	WriteSoftString 			; write to soft string.
.3a78	4c 6c 3a	jmp $3a6c			jmp 	_SCCopyLoop
.3a7b					_SCCopyExit:
.3a7b	60		rts				rts
.3a7c					CopySoftToStack:
.3a7c	a5 39		lda $39				lda 	SoftMemAlloc 				; copy the memory allocation pointer to the stack.
.3a7e	95 98		sta $98,x			sta 	esInt0,x 					; type is already string.
.3a80	a5 3a		lda $3a				lda 	SoftMemAlloc+1
.3a82	95 a0		sta $a0,x			sta 	esInt1,x
.3a84	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/functions/memory.asm

.0039					softMemAlloc:
>0039							.fill 	2  							; if MSB is zero needs resetting on allocation.
.3a85					AllocateSoftString:
.3a85	85 32		sta $32				sta 	tempShort 					; save count
.3a87	98		tya				tya
.3a88	48		pha				pha
.3a89	a5 3a		lda $3a				lda 	softMemAlloc+1 				; if the high byte is zero, it needs allocating.
.3a8b	d0 09		bne $3a96			bne 	_ASSDone
.3a8d	a5 33		lda $33				lda 	highMemory 					; reset the soft memory alloc pointer.
.3a8f	85 39		sta $39				sta 	softMemAlloc 				; to speed up slightly, we only reset this when we first need it
.3a91	a4 34		ldy $34				ldy 	highMemory+1 				; but it needs to be reset before each command.
.3a93	88		dey				dey 								; it is set to 1/4k below high memory, allowing space
.3a94	84 3a		sty $3a				sty 	softMemAlloc+1 				; for a concreted string.
.3a96					_ASSDone:
.3a96	38		sec				sec 								; allocate downwards enough memory
.3a97	a5 39		lda $39				lda 	softMemAlloc 				; subtract the memory requirements in A from
.3a99	e5 32		sbc $32				sbc 	tempShort 					; the soft memory pointer
.3a9b	85 39		sta $39				sta 	softMemAlloc
.3a9d	a5 3a		lda $3a				lda 	softMemAlloc+1
.3a9f	e9 00		sbc #$00			sbc 	#0
.3aa1	85 3a		sta $3a				sta 	softMemAlloc+1
.3aa3	a9 00		lda #$00			lda 	#0 							; empty that string, set the length = 0.
.3aa5	a8		tay				tay
.3aa6	91 39		sta ($39),y			sta 	(softMemAlloc),y
.3aa8	68		pla				pla
.3aa9	a8		tay				tay
.3aaa	60		rts				rts
.3aab					WriteSoftString:
.3aab	84 32		sty $32				sty 	tempShort 					; save Y
.3aad	48		pha				pha 								; save character on stack
.3aae	a0 00		ldy #$00			ldy 	#0 							; get and bump length
.3ab0	b1 39		lda ($39),y			lda 	(softMemAlloc),y
.3ab2	18		clc				clc
.3ab3	69 01		adc #$01			adc 	#1
.3ab5	91 39		sta ($39),y			sta 	(softMemAlloc),y
.3ab7	a8		tay				tay 								; offset in Y
.3ab8	68		pla				pla 								; get char and write.
.3ab9	91 39		sta ($39),y			sta 	(softMemAlloc),y
.3abb	a4 32		ldy $32				ldy 	tempShort 					; restore Y and exit.
.3abd	60		rts				rts
.3abe					StrClone:
.3abe	aa		tax				tax 								; set up stack.
.3abf	98		tya				tya
.3ac0	48		pha				pha
.3ac1	a0 00		ldy #$00			ldy 	#0 							; get length, add 1 for length
.3ac3	b1 2a		lda ($2a),y			lda 	(temp0),y 					; this is the bytes required.
.3ac5	18		clc				clc
.3ac6	69 01		adc #$01			adc 	#1
.3ac8	20 85 3a	jsr $3a85			jsr 	AllocateSoftString 			; allocate soft memory
.3acb	a5 39		lda $39				lda 	softMemAlloc 				; copy that address to TOS
.3acd	95 98		sta $98,x			sta 	esInt0,x
.3acf	a5 3a		lda $3a				lda 	softMemAlloc+1
.3ad1	95 a0		sta $a0,x			sta 	esInt1,x
.3ad3	a9 00		lda #$00			lda 	#0 							; zero upper 2 bytes
.3ad5	95 a8		sta $a8,x			sta 	esInt2,x
.3ad7	95 b0		sta $b0,x			sta 	esInt3,x
.3ad9	a9 40		lda #$40			lda 	#$40 						; set type to string.
.3adb	95 90		sta $90,x			sta 	esType,x
.3add	20 66 3a	jsr $3a66			jsr 	SCCopyTemp0 				; copy temp0 string to soft memory copy (concat.asm)
.3ae0	68		pla				pla
.3ae1	a8		tay				tay
.3ae2	8a		txa				txa
.3ae3	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/functions/setcase.asm

.3ae4					CaseString:
.3ae4	48		pha				pha 								; save A and copy to X
.3ae5	aa		tax				tax
.3ae6	98		tya				tya
.3ae7	48		pha				pha
.3ae8	20 2d 3a	jsr $3a2d			jsr 	CopyStringTop 				; target string -> temp0
.3aeb	a0 00		ldy #$00			ldy 	#0
.3aed	b1 2a		lda ($2a),y			lda 	(temp0),y  					; get length,
.3aef	18		clc				clc
.3af0	69 01		adc #$01			adc 	#1 							; one more for length byte
.3af2	20 85 3a	jsr $3a85			jsr 	AllocateSoftString 			; allocate soft string memory, set pointer.
.3af5	20 7c 3a	jsr $3a7c			jsr 	CopySoftToStack 			; copy that to the stack.
.3af8	a0 00		ldy #$00			ldy 	#0
.3afa	b1 2a		lda ($2a),y			lda 	(temp0),y 					; count to copy in X
.3afc	aa		tax				tax
.3afd					_CSCopy:
.3afd	e0 00		cpx #$00			cpx 	#0 							; finished if 0.
.3aff	f0 24		beq $3b25			beq 	_CSExit
.3b01	ca		dex				dex
.3b02	c8		iny				iny
.3b03	68		pla				pla 								; check direction
.3b04	48		pha				pha
.3b05	f0 0c		beq $3b13			beq 	_CSUpper
.3b07	b1 2a		lda ($2a),y			lda 	(temp0),y 					; lower$() code
.3b09	c9 41		cmp #$41			cmp 	#"A"
.3b0b	90 12		bcc $3b1f			bcc 	_CSWrite
.3b0d	c9 5b		cmp #$5b			cmp 	#"Z"+1
.3b0f	b0 0e		bcs $3b1f			bcs 	_CSWrite
.3b11	90 0a		bcc $3b1d			bcc 	_CSFlipWrite
.3b13					_CSUpper:
.3b13	b1 2a		lda ($2a),y			lda 	(temp0),y 					; upper$() code
.3b15	c9 61		cmp #$61			cmp 	#"a"
.3b17	90 06		bcc $3b1f			bcc 	_CSWrite
.3b19	c9 7b		cmp #$7b			cmp 	#"z"+1
.3b1b	b0 02		bcs $3b1f			bcs 	_CSWrite
.3b1d					_CSFlipWrite:
.3b1d	49 20		eor #$20			eor 	#"A"^"a" 					; switch case.
.3b1f					_CSWrite:
.3b1f	20 ab 3a	jsr $3aab			jsr 	WriteSoftString 			; add to soft string.
.3b22	4c fd 3a	jmp $3afd			jmp 	_CSCopy
.3b25					_CSExit:
.3b25	68		pla				pla
.3b26	a8		tay				tay
.3b27	68		pla				pla
.3b28	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/functions/substring.asm

.3b29					StringSubstring:
.3b29	48		pha				pha
.3b2a	aa		tax				tax 								; access stack.
.3b2b	98		tya				tya
.3b2c	48		pha				pha
.3b2d	20 2d 3a	jsr $3a2d			jsr 	CopyStringTop 				; point temp0 to the string.
.3b30	a0 00		ldy #$00			ldy 	#0 							; get length.
.3b32	b1 2a		lda ($2a),y			lda 	(temp0),Y
.3b34	85 2c		sta $2c				sta 	temp1
.3b36	b5 99		lda $99,x			lda 	esInt0+1,x 					; get the initial offset
.3b38	c5 2c		cmp $2c				cmp 	temp1 						; return "" if > length.
.3b3a	f0 02		beq $3b3e			beq 	_SSBOkay
.3b3c	b0 2a		bcs $3b68			bcs 	_SSBReturnNull
.3b3e					_SSBOkay:
.3b3e	a5 2c		lda $2c				lda 	temp1 						; get the total length +1
.3b40	18		clc				clc
.3b41	69 01		adc #$01			adc 	#1
.3b43	38		sec				sec
.3b44	f5 99		sbc $99,x			sbc 	esInt0+1,x 					; the anything >= this is bad - max size
.3b46	d5 9a		cmp $9a,x			cmp 	esInt0+2,x  				; check bad >= required
.3b48	90 02		bcc $3b4c			bcc		_SSBTrunc
.3b4a	b5 9a		lda $9a,x			lda 	esInt0+2,x
.3b4c					_SSBTrunc:
.3b4c	85 2d		sta $2d				sta 	temp1+1 					; characters to copy.
.3b4e	18		clc				clc
.3b4f	69 01		adc #$01			adc 	#1 							; add 1
.3b51	20 85 3a	jsr $3a85			jsr 	AllocateSoftString 			; allocate soft string memory, set pointer.
.3b54	20 7c 3a	jsr $3a7c			jsr 	CopySoftToStack 			; copy that to the stack.
.3b57	b4 99		ldy $99,x			ldy 	esInt0+1,x 					; get initial position of char to copy
.3b59					_SSBCopyLoop:
.3b59	a5 2d		lda $2d				lda 	temp1+1 					; done them all
.3b5b	f0 0e		beq $3b6b			beq 	_SSBExit
.3b5d	c6 2d		dec $2d				dec 	temp1+1
.3b5f	b1 2a		lda ($2a),y			lda 	(temp0),y 					; get and write character
.3b61	20 ab 3a	jsr $3aab			jsr 	WriteSoftString
.3b64	c8		iny				iny
.3b65	4c 59 3b	jmp $3b59			jmp 	_SSBCopyLoop
.3b68					_SSBReturnNull:
.3b68	20 6f 3b	jsr $3b6f			jsr 	ReturnNull
.3b6b					_SSBExit:
.3b6b	68		pla				pla
.3b6c	a8		tay				tay
.3b6d	68		pla				pla
.3b6e	60		rts				rts
.3b6f					ReturnNull:
.3b6f	a9 00		lda #$00			lda 	#0 							; clear null string
.3b71	8d ce 0a	sta $0ace			sta 	NullString
.3b74	a9 ce		lda #$ce			lda 	#NullString & $FF 			; set a pointer to it
.3b76	95 98		sta $98,x			sta 	esInt0,x
.3b78	a9 0a		lda #$0a			lda 	#NullString >> 8
.3b7a	95 a0		sta $a0,x			sta 	esInt1,x
.3b7c	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/functions/write.asm

.0d03					srcStrLen:
>0d03							.fill 	1
.3b7d					StringWrite:
.3b7d	aa		tax				tax
.3b7e	48		pha				pha
.3b7f	98		tya				tya
.3b80	48		pha				pha
.3b81	20 a8 3b	jsr $3ba8			jsr 	CheckOverwriteCurrent
.3b84	b0 0d		bcs $3b93			bcs		_SWCopyCurrent
.3b86	20 e6 3b	jsr $3be6			jsr 	RequiresConcretion
.3b89	90 0e		bcc $3b99			bcc 	_SWWriteReference
.3b8b	20 49 3c	jsr $3c49			jsr 	CheckSpecialConcretion
.3b8e	b0 09		bcs $3b99			bcs 	_SWWriteReference
.3b90	20 fa 3b	jsr $3bfa			jsr 	AllocateHardMemory
.3b93					_SWCopyCurrent:
.3b93	20 2d 3c	jsr $3c2d			jsr 	CopyStringToHardMemory
.3b96	4c a4 3b	jmp $3ba4			jmp 	_SWExit
.3b99					_SWWriteReference
.3b99	a0 00		ldy #$00			ldy 	#0
.3b9b	a5 2a		lda $2a				lda 	temp0
.3b9d	91 2c		sta ($2c),y			sta 	(temp1),y
.3b9f	c8		iny				iny
.3ba0	a5 2b		lda $2b				lda 	temp0+1
.3ba2	91 2c		sta ($2c),y			sta 	(temp1),y
.3ba4					_SWExit:
.3ba4	68		pla				pla
.3ba5	a8		tay				tay
.3ba6	68		pla				pla
.3ba7	60		rts				rts
.3ba8					CheckOverwriteCurrent:
.3ba8	a0 00		ldy #$00			ldy 	#0 						; get address of string being written to temp0
.3baa	b5 a1		lda $a1,x			lda 	esInt1+1,x
.3bac	85 2b		sta $2b				sta 	temp0+1
.3bae	b5 99		lda $99,x			lda 	esInt0+1,x
.3bb0	85 2a		sta $2a				sta 	temp0
.3bb2	b1 2a		lda ($2a),y			lda 	(temp0),y 				; get length of string being copied and save it.
.3bb4	8d 03 0d	sta $0d03			sta 	srcStrLen
.3bb7	b5 98		lda $98,x			lda 	esInt0,x 				; copy where the final address it being written to temp1.
.3bb9	85 2c		sta $2c				sta 	temp1 					; e.g. if it is ax$ then temp1 will point to the ax$
.3bbb	b5 a0		lda $a0,x			lda 	esInt1,x 				; data record + 5
.3bbd	85 2d		sta $2d				sta 	temp1+1
.3bbf	a0 01		ldy #$01			ldy 	#1 						; get the MSB of the address of string currently stored there.
.3bc1	b1 2c		lda ($2c),y			lda 	(temp1),y
.3bc3	c5 34		cmp $34				cmp 	highMemory+1 			; if < high memory then it cannot be something stored
.3bc5	90 1b		bcc $3be2			bcc 	_COCFail 				; in hard memory.
.3bc7	a0 00		ldy #$00			ldy 	#0 						; copy target address - 1 into temp2
.3bc9	b1 2c		lda ($2c),y			lda 	(temp1),y 				; when allocating hard memory, the overall size is
.3bcb	e9 01		sbc #$01			sbc 	#1 						; in the previous byte.
.3bcd	85 2e		sta $2e				sta 	temp2
.3bcf	c8		iny				iny
.3bd0	b1 2c		lda ($2c),y			lda 	(temp1),y
.3bd2	e9 00		sbc #$00			sbc 	#0
.3bd4	85 2f		sta $2f				sta 	temp2+1
.3bd6	a0 00		ldy #$00			ldy 	#0 						; how large is this physical chunk.
.3bd8	b1 2e		lda ($2e),y			lda 	(temp2),y
.3bda	38		sec				sec  							; maximum character capacity.
.3bdb	e9 02		sbc #$02			sbc 	#2
.3bdd	cd 03 0d	cmp $0d03			cmp 	srcStrLen 				; if >= the required length
.3be0	b0 02		bcs $3be4			bcs 	_COCCanReuse
.3be2					_COCFail:
.3be2	18		clc				clc
.3be3	60		rts				rts
.3be4					_COCCanReuse:
.3be4	38		sec				sec
.3be5	60		rts				rts
.3be6					RequiresConcretion:
.3be6	a5 2b		lda $2b				lda 	temp0+1 				; get MSB of address of string to be written
.3be8	c5 34		cmp $34				cmp 	highMemory+1 			; if >= high memory it is concreted
.3bea	b0 0a		bcs $3bf6			bcs 	_RCSucceed 				; so it needs concreting again - duplication.
.3bec	a5 3a		lda $3a				lda 	softMemAlloc+1 			; have we allocated any soft memory yet ?
.3bee	f0 08		beq $3bf8			beq 	_RCFail 				; if not, this cannot be soft memory.
.3bf0	a5 2b		lda $2b				lda 	temp0+1 				; get MSB of address of string to be written
.3bf2	c5 3a		cmp $3a				cmp 	softMemAlloc+1 			; if >= soft mem alloc it is either soft
.3bf4	90 02		bcc $3bf8			bcc 	_RCFail 				; so concreting
.3bf6					_RCSucceed:
.3bf6	38		sec				sec
.3bf7	60		rts				rts
.3bf8					_RCFail:
.3bf8	18		clc				clc
.3bf9	60		rts				rts
.3bfa					AllocateHardMemory:
.3bfa	98		tya				tya
.3bfb	48		pha				pha
.3bfc	ad 03 0d	lda $0d03			lda 	srcStrLen 				; characters in string
.3bff	69 0a		adc #$0a			adc 	#1+1+8 					; one for hard memory size, one for string size, extra for expansion
.3c01	b0 04		bcs $3c07			bcs 	_AHMSetMax 				; max out that amount.
.3c03	c9 fe		cmp #$fe			cmp 	#MaxStringSize+2
.3c05	90 02		bcc $3c09			bcc 	_AHMIsOkay
.3c07					_AHMSetMax:
.3c07	a9 fe		lda #$fe			lda 	#MaxStringSize+2
.3c09					_AHMIsOkay:
.3c09	48		pha				pha	 							; save size to be allocated
.3c0a	49 ff		eor #$ff			eor 	#$FF 					; complement and add to high Memory
.3c0c	38		sec				sec  							; and copy result to TOS as target address.
.3c0d	65 33		adc $33				adc 	highMemory
.3c0f	85 33		sta $33				sta 	highMemory
.3c11	a5 34		lda $34				lda 	highMemory+1
.3c13	69 ff		adc #$ff			adc 	#$FF
.3c15	85 34		sta $34				sta 	highMemory+1
.3c17	a0 00		ldy #$00			ldy 	#0 						; Y = 0
.3c19	68		pla				pla 							; get the total size of the storage block
.3c1a	91 33		sta ($33),y			sta 	(highMemory),y 			; and set it
.3c1c	18		clc				clc
.3c1d	a5 33		lda $33				lda		highMemory 				; point the target address to the byte after this.
.3c1f	69 01		adc #$01			adc 	#1
.3c21	91 2c		sta ($2c),y			sta 	(temp1),y
.3c23	a5 34		lda $34				lda 	highMemory+1
.3c25	69 00		adc #$00			adc 	#0
.3c27	c8		iny				iny
.3c28	91 2c		sta ($2c),y			sta 	(temp1),y
.3c2a	68		pla				pla
.3c2b	a8		tay				tay
.3c2c	60		rts				rts
.3c2d					CopyStringToHardMemory:
.3c2d	98		tya				tya
.3c2e	48		pha				pha
.3c2f	a0 00		ldy #$00			ldy 	#0 						; copy target address to temp2
.3c31	b1 2c		lda ($2c),y			lda 	(temp1),y
.3c33	85 2e		sta $2e				sta 	temp2
.3c35	c8		iny				iny
.3c36	b1 2c		lda ($2c),y			lda 	(temp1),y
.3c38	85 2f		sta $2f				sta 	temp2+1
.3c3a	ac 03 0d	ldy $0d03			ldy 	srcStrLen 				; copy this + 1 characters, (length too) hence $FF compare
.3c3d					_CSTHMLoop:
.3c3d	b1 2a		lda ($2a),y			lda 	(temp0),y
.3c3f	91 2e		sta ($2e),y			sta 	(temp2),y
.3c41	88		dey				dey
.3c42	c0 ff		cpy #$ff			cpy 	#$FF 					; this does the +1
.3c44	d0 f7		bne $3c3d			bne 	_CSTHMLoop
.3c46	68		pla				pla
.3c47	a8		tay				tay
.3c48	60		rts				rts
.3c49					CheckSpecialConcretion:
.3c49	ad 03 0d	lda $0d03			lda 	srcStrLen 				; check string is null e.g. length = 0
.3c4c	f0 02		beq $3c50			beq 	_CSCNullString
.3c4e	18		clc				clc
.3c4f	60		rts				rts
.3c50					_CSCNullString:
.3c50	a9 00		lda #$00			lda 	#0 						; by always returning this address we don't waste
.3c52	8d ce 0a	sta $0ace			sta 	NullString		 		; storage on null strings.
.3c55	a9 ce		lda #$ce			lda 	#(NullString) & $FF
.3c57	85 2a		sta $2a				sta 	temp0
.3c59	a9 0a		lda #$0a			lda 	#(NullString) >> 8
.3c5b	85 2b		sta $2b				sta 	1+(temp0)
.3c5d	38		sec				sec
.3c5e	60		rts				rts

;******  Return to file: string/string.asm

.3c5f					stringHandler:
.3c5f	7c 62 3c	jmp ($3c62,x)			jmp 	(stringVectors,x)
.3c62					stringVectors:
>3c62	74 3c					.word _DummyControlHandler ; index 0
>3c64	c2 39					.word StringChrs           ; index 2
>3c66	be 3a					.word StrClone             ; index 4
>3c68	36 3a					.word StringConcat         ; index 6
>3c6a	d1 39					.word StringNull           ; index 8
>3c6c	ed 39					.word STRCompare           ; index 10
>3c6e	e4 3a					.word CaseString           ; index 12
>3c70	29 3b					.word StringSubstring      ; index 14
>3c72	7d 3b					.word StringWrite          ; index 16
.3c74					_DummyControlHandler:
.3c74	60		rts			rts

;******  Return to file: basic.asm

.3c75					section_end_string:
.3c75					section_start_tokeniser:

;******  Processing file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/detokenise/detokenise.asm

.0d04					deTokeniseVector:
>0d04							.fill 	2
.0d06					lastCharacterClass:
>0d06							.fill 	1
.0d07					indent:
>0d07							.fill 	1
.3c75					ListLine:
.3c75	48		pha				pha								; enter here to list to console. sets the output vector
.3c76	a9 ad		lda #$ad			lda 	#(deTokenPrint) & $FF
.3c78	8d 04 0d	sta $0d04			sta 	deTokeniseVector
.3c7b	a9 3d		lda #$3d			lda 	#(deTokenPrint) >> 8
.3c7d	8d 05 0d	sta $0d05			sta 	1+(deTokeniseVector)
.3c80	68		pla				pla
.3c81					Detokenise:
.3c81	18		clc				clc 							; space required for line number.
.3c82	69 06		adc #$06			adc 	#6
.3c84	8d 07 0d	sta $0d07			sta 	indent
.3c87	a9 ff		lda #$ff			lda 	#$FF 					; last thing printed is a dummy value.
.3c89	8d 06 0d	sta $0d06			sta 	lastCharacterClass
.3c8c	a2 02		ldx #$02			ldx 	#2
.3c8e	a9 00		lda #$00			lda 	#0 						; clear upper two bytes
.3c90	95 a8		sta $a8,x			sta 	esInt2,x
.3c92	95 b0		sta $b0,x			sta 	esInt3,x
.3c94	a0 01		ldy #$01			ldy 	#1 						; copy line number to stack,2 (as using stack 0,1 for list range)
.3c96	b1 28		lda ($28),y			lda 	(codePtr),y
.3c98	95 98		sta $98,x			sta 	esInt0,x
.3c9a	c8		iny				iny
.3c9b	b1 28		lda ($28),y			lda 	(codePtr),y
.3c9d	95 a0		sta $a0,x			sta 	esInt1,x
.3c9f	a9 84		lda #$84			lda 	#LTYLineNumber
.3ca1	20 88 3d	jsr $3d88			jsr 	ListOutputCharacter
.3ca4	a9 0a		lda #$0a			lda 	#10 					; base 10
.3ca6	20 4c 3d	jsr $3d4c			jsr 	DTPrintInteger 			; print as integer.
.3ca9	a0 00		ldy #$00			ldy 	#0 						; get length
.3cab	b1 2a		lda ($2a),y			lda 	(temp0),y 				; into X
.3cad	aa		tax				tax
.3cae					_DTPadOut:
.3cae	a9 20		lda #$20			lda 	#" " 					; pad out to indent.
.3cb0	20 88 3d	jsr $3d88			jsr 	ListOutputCharacter
.3cb3	e8		inx				inx
.3cb4	ec 07 0d	cpx $0d07			cpx 	indent
.3cb7	d0 f5		bne $3cae			bne 	_DTPadOut
.3cb9	a0 03		ldy #$03			ldy 	#3 						; start position.
.3cbb					_DTListLoop:
.3cbb	b1 28		lda ($28),y			lda 	(codePtr),y
.3cbd	c9 85		cmp #$85			cmp 	#TOK_STR 				; Inline string.
.3cbf	f0 5e		beq $3d1f			beq 	_DTIsString
.3cc1	c9 84		cmp #$84			cmp 	#TOK_FPC 				; Floating point
.3cc3	f0 56		beq $3d1b			beq 	_DTIsFloat
.3cc5	c9 c5		cmp #$c5			cmp 	#TKW_AMP 				; & hex marker
.3cc7	f0 16		beq $3cdf			beq 	_DTHexConstant
.3cc9	c9 80		cmp #$80			cmp 	#TOK_EOL 				; End of Line
.3ccb	d0 06		bne $3cd3			bne 	_DTNotEnd
.3ccd	a9 ff		lda #$ff			lda 	#255 					; print CR
.3ccf	20 88 3d	jsr $3d88			jsr 	ListOutputCharacter
.3cd2	60		rts				rts
.3cd3					_DTNotEnd:
.3cd3	c9 00		cmp #$00			cmp 	#0
.3cd5	30 38		bmi $3d0f			bmi 	_DTIsToken
.3cd7	c9 40		cmp #$40			cmp 	#$40
.3cd9	90 3a		bcc $3d15			bcc 	_DTIsIdentifier
.3cdb	a9 0a		lda #$0a			lda 	#10 					; this is the base, unsigned decimal
.3cdd	d0 0d		bne $3cec			bne 	_DTConstant
.3cdf					_DTHexConstant:
.3cdf	a9 26		lda #$26			lda 	#"&"
.3ce1	20 88 3d	jsr $3d88			jsr 	ListOutputCharacter
.3ce4	c8		iny				iny
.3ce5	a9 01		lda #$01			lda 	#1 						; switch to spaces so &xxxx is treated like a number.
.3ce7	20 c9 3d	jsr $3dc9			jsr 	DTSwitchMode
.3cea	a9 10		lda #$10			lda 	#16						; print line unsigned hex
.3cec					_DTConstant:
.3cec	48		pha				pha
.3ced	a9 00		lda #$00			lda 	#0 						; now constant, may need spaces
.3cef	20 c9 3d	jsr $3dc9			jsr 	DTSwitchMode
.3cf2	a9 86		lda #$86			lda 	#LTYConstant
.3cf4	20 88 3d	jsr $3d88			jsr 	ListOutputCharacter
.3cf7	a2 02		ldx #$02			ldx 	#2 						; get its value
.3cf9	8a		txa				txa
.3cfa	a2 10		ldx #$10		ldx	#16
.3cfc	20 a2 39	jsr $39a2		jsr	mainHandler
.3cff	aa		tax				tax
.3d00	68		pla				pla 							; get base back
.3d01	85 32		sta $32				sta 	tempShort
.3d03	98		tya				tya
.3d04	48		pha				pha
.3d05	a5 32		lda $32				lda 	tempShort 				; print in base A stck level X
.3d07	20 4c 3d	jsr $3d4c			jsr 	DTPrintInteger
.3d0a	68		pla				pla
.3d0b	a8		tay				tay
.3d0c	4c bb 3c	jmp $3cbb			jmp 	_DTListLoop
.3d0f					_DTIsToken:
.3d0f	20 22 3e	jsr $3e22			jsr 	DTDecodeToken
.3d12	4c bb 3c	jmp $3cbb			jmp 	_DTListLoop
.3d15					_DTIsIdentifier:
.3d15	20 db 3d	jsr $3ddb			jsr 	DTIdentifier
.3d18	4c bb 3c	jmp $3cbb			jmp 	_DTListLoop
.3d1b					_DTIsFloat:
>3d1b	db						.byte 	$DB
.3d1c	4c 1b 3d	jmp $3d1b			jmp 	_DTIsFloat
.3d1f					_DTIsString:
.3d1f	a9 01		lda #$01			lda 	#1 							; now punctuation, may need spaces
.3d21	20 c9 3d	jsr $3dc9			jsr 	DTSwitchMode
.3d24	a9 81		lda #$81			lda 	#LTYString
.3d26	20 88 3d	jsr $3d88			jsr 	ListOutputCharacter
.3d29	a9 22		lda #$22			lda 	#'"'						; open quote
.3d2b	20 88 3d	jsr $3d88			jsr 	ListOutputCharacter
.3d2e	a2 02		ldx #$02			ldx 	#2 							; evaluate string to TOS2.
.3d30	8a		txa				txa
.3d31	a2 10		ldx #$10		ldx	#16
.3d33	20 a2 39	jsr $39a2		jsr	mainHandler
.3d36	aa		tax				tax
.3d37	b5 98		lda $98,x			lda 	esInt0,x 					; copy string address to temp0
.3d39	85 2a		sta $2a				sta 	temp0
.3d3b	b5 a0		lda $a0,x			lda 	esInt1,x
.3d3d	85 2b		sta $2b				sta 	temp0+1
.3d3f	a9 00		lda #$00			lda 	#0 							; don't capitalise.
.3d41	20 5e 3d	jsr $3d5e			jsr 	DTPrintLengthPrefix
.3d44	a9 22		lda #$22			lda 	#'"'
.3d46	20 88 3d	jsr $3d88			jsr 	ListOutputCharacter
.3d49	4c bb 3c	jmp $3cbb			jmp 	_DTListLoop

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/detokenise/dtprint.asm

.0d08					tPrintCount:
>0d08							.fill 	1
.3d4c					DTPrintInteger:
.3d4c	48		pha				pha									; save base
.3d4d	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.3d4f	85 2a		sta $2a				sta 	temp0
.3d51	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.3d53	85 2b		sta $2b				sta 	1+(temp0)
.3d55	68		pla				pla
.3d56	a8		tay				tay
.3d57	8a		txa				txa
.3d58	a2 12		ldx #$12		ldx	#18
.3d5a	20 a2 39	jsr $39a2		jsr	mainHandler
.3d5d	aa		tax				tax 								; then drop through here.
.3d5e					DTPrintLengthPrefix:
.3d5e	aa		tax				tax 								; A = 0 = don't case convert.
.3d5f	98		tya				tya
.3d60	48		pha				pha
.3d61	a0 00		ldy #$00			ldy 	#0 							; get string length = chars to print.
.3d63	b1 2a		lda ($2a),y			lda 	(temp0),y
.3d65	8d 08 0d	sta $0d08			sta 	tPrintCount
.3d68	f0 1b		beq $3d85			beq 	_DTPLPExit 					; empty string
.3d6a					_DTPLPLoop:
.3d6a	c8		iny				iny 								; get next.
.3d6b	b1 2a		lda ($2a),y			lda 	(temp0),y
.3d6d	29 7f		and #$7f			and 	#$7F
.3d6f	e0 00		cpx #$00			cpx 	#0 							; skip if not case converting
.3d71	f0 0a		beq $3d7d			beq 	_DTPLPNoCase
.3d73	c9 41		cmp #$41			cmp 	#"A" 						; if converting UC -> LC
.3d75	90 06		bcc $3d7d			bcc 	_DTPLPNoCase
.3d77	c9 5b		cmp #$5b			cmp 	#"Z"+1
.3d79	b0 02		bcs $3d7d			bcs 	_DTPLPNoCase
.3d7b	49 20		eor #$20			eor 	#"A"^"a"
.3d7d					_DTPLPNoCase
.3d7d	20 88 3d	jsr $3d88			jsr 	ListOutputCharacter 		; call handler
.3d80	ce 08 0d	dec $0d08			dec 	tPrintCount 				; do all the characters
.3d83	d0 e5		bne $3d6a			bne 	_DTPLPLoop
.3d85					_DTPLPExit:
.3d85	68		pla				pla
.3d86	a8		tay				tay
.3d87	60		rts				rts
.3d88					ListOutputCharacter:
.3d88	85 32		sta $32				sta 	tempShort
.3d8a	48		pha				pha
.3d8b	8a		txa				txa
.3d8c	48		pha				pha
.3d8d	98		tya				tya
.3d8e	48		pha				pha
.3d8f	a5 32		lda $32				lda 	tempShort 					; convert ASCII 6 bit (0-31) to 7 bit.
.3d91	c9 20		cmp #$20			cmp 	#32
.3d93	b0 0c		bcs $3da1			bcs		_LOCHiBit
.3d95	09 40		ora #$40			ora 	#64 						; conversion
.3d97	c9 40		cmp #$40			cmp 	#64							; make l/c
.3d99	f0 06		beq $3da1			beq 	_LOCHiBit
.3d9b	c9 5b		cmp #$5b			cmp 	#65+26
.3d9d	b0 02		bcs $3da1			bcs 	_LOCHiBit
.3d9f	69 20		adc #$20			adc 	#32
.3da1					_LOCHiBit:
.3da1	20 aa 3d	jsr $3daa			jsr 	_LOCCallVector				; call o/p handler routine
.3da4	68		pla				pla
.3da5	a8		tay				tay
.3da6	68		pla				pla
.3da7	aa		tax				tax
.3da8	68		pla				pla
.3da9					_LOCExit:
.3da9	60		rts				rts
.3daa					_LOCCallVector:
.3daa	6c 04 0d	jmp ($0d04)			jmp 	(deTokeniseVector)
.3dad					deTokenPrint:
.3dad	c9 00		cmp #$00			cmp 	#0 							; if bit 7 sets ink colour
.3daf	30 06		bmi $3db7			bmi 	_dtpInk
.3db1	a2 16		ldx #$16		ldx	#22
.3db3	20 f6 14	jsr $14f6		jsr	deviceHandler
.3db6	60		rts				rts
.3db7	c9 ff		cmp #$ff	_dtpInk:cmp 	#255 						; e.g. herhe, get ink and set it
.3db9	f0 08		beq $3dc3			beq 	_dtpCR						; except $FF => CRLF
.3dbb	29 07		and #$07			and 	#7
.3dbd	a2 08		ldx #$08		ldx	#8
.3dbf	20 f6 14	jsr $14f6		jsr	deviceHandler
.3dc2	60		rts				rts
.3dc3					_dtpCR:
.3dc3	a2 06		ldx #$06		ldx	#6
.3dc5	20 f6 14	jsr $14f6		jsr	deviceHandler
.3dc8	60		rts				rts
.3dc9					DTSwitchMode:
.3dc9	cd 06 0d	cmp $0d06			cmp 	LastCharacterClass 			; if changed, update character class
.3dcc	f0 04		beq $3dd2			beq 	_DTSMNoChange
.3dce	8d 06 0d	sta $0d06			sta 	LastCharacterClass
.3dd1					_DTSMExit:
.3dd1	60		rts				rts
.3dd2					_DTSMNoChange:
.3dd2	c9 01		cmp #$01			cmp 	#1 							; if didn't change to punctuation, two identifiers so we
.3dd4	f0 fb		beq $3dd1			beq 	_DTSMExit 					; need a space.
.3dd6	a9 20		lda #$20			lda 	#" "
.3dd8	4c 88 3d	jmp $3d88			jmp 	ListOutputCharacter

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/detokenise/identifier.asm

.3ddb					DTIdentifier:
.3ddb	a9 00		lda #$00			lda 	#0 							; now text, may need spaces
.3ddd	20 c9 3d	jsr $3dc9			jsr 	DTSwitchMode
.3de0	a9 87		lda #$87			lda 	#LTYIdentifier
.3de2	20 88 3d	jsr $3d88			jsr 	ListOutputCharacter
.3de5					_DTILoop:
.3de5	b1 28		lda ($28),y			lda 	(codePtr),y 				; output main bit of identifier.
.3de7	c9 2d		cmp #$2d			cmp 	#"-"						; make - back to _
.3de9	d0 02		bne $3ded			bne 	_DTINotUS
.3deb	a9 5f		lda #$5f			lda 	#"_"
.3ded					_DTINotUS:
.3ded	20 88 3d	jsr $3d88			jsr 	ListOutputCharacter
.3df0	c8		iny				iny
.3df1	b1 28		lda ($28),y			lda 	(codePtr),y 				; until end identifier marker.
.3df3	c9 3a		cmp #$3a			cmp 	#$3A
.3df5	90 ee		bcc $3de5			bcc 	_DTILoop
.3df7	c8		iny				iny
.3df8	c9 3a		cmp #$3a			cmp 	#$3A 						; is it integer non array
.3dfa	f0 25		beq $3e21			beq 	_DTIExit 					; no postfix.
.3dfc	48		pha				pha
.3dfd	a9 01		lda #$01			lda  	#1 							; it ends in punctuation
.3dff	8d 06 0d	sta $0d06			sta 	LastCharacterClass
.3e02	a9 82		lda #$82			lda 	#LTYPunctuation
.3e04	20 88 3d	jsr $3d88			jsr 	ListOutputCharacter
.3e07	68		pla				pla
.3e08	c9 3b		cmp #$3b			cmp 	#$3B
.3e0a	f0 10		beq $3e1c			beq 	_DTIArray
.3e0c	4a		lsr a				lsr 	a 							; array flag in C
.3e0d	08		php				php
.3e0e	49 1e		eor #$1e			eor 	#$3C/2 						; check if $
.3e10	f0 02		beq $3e14			beq 	_DTIDollar
.3e12	a9 07		lda #$07			lda 	#"$"^"#" 					; this if #, 0 if $
.3e14					_DTIDollar:
.3e14	49 24		eor #$24			eor 	#"$"
.3e16	20 88 3d	jsr $3d88			jsr 	ListOutputCharacter
.3e19	28		plp				plp
.3e1a	90 05		bcc $3e21			bcc 	_DTIExit
.3e1c					_DTIArray:
.3e1c	a9 28		lda #$28			lda 	#"("
.3e1e	20 88 3d	jsr $3d88			jsr 	ListOutputCharacter
.3e21					_DTIExit:
.3e21	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/detokenise/token.asm

.3e22					DTDecodeToken:
.3e22	a2 00		ldx #$00			ldx 	#0 							; table number to use
.3e24	b1 28		lda ($28),y			lda 	(codePtr),y
.3e26	c9 84		cmp #$84			cmp 	#$84
.3e28	b0 05		bcs $3e2f			bcs 	_DTNotShift
.3e2a	29 03		and #$03			and 	#3 							; get the shift 1..3
.3e2c	0a		asl a				asl 	a 							; put 2 x in X
.3e2d	aa		tax				tax
.3e2e	c8		iny				iny
.3e2f					_DTNotShift:
.3e2f	bd 31 41	lda $4131,x			lda 	TokenTableAddress,x 		; get the token table to use to decode it.
.3e32	85 2a		sta $2a				sta 	temp0 						; point into temp0
.3e34	bd 32 41	lda $4132,x			lda 	TokenTableAddress+1,x
.3e37	85 2b		sta $2b				sta 	temp0+1
.3e39	b1 28		lda ($28),y			lda 	(codePtr),y 				; get the token value.
.3e3b	c8		iny				iny 								; consume it.
.3e3c	aa		tax				tax
.3e3d	98		tya				tya
.3e3e	48		pha				pha
.3e3f					_DTFindText:
.3e3f	e0 86		cpx #$86			cpx 	#$86 						; finished ?
.3e41	f0 11		beq $3e54			beq 	_DTFoundText
.3e43	ca		dex				dex
.3e44	a0 00		ldy #$00			ldy 	#0 							; add length+1 to temp0
.3e46	38		sec				sec
.3e47	b1 2a		lda ($2a),y			lda 	(temp0),y
.3e49	65 2a		adc $2a				adc 	temp0
.3e4b	85 2a		sta $2a				sta 	temp0
.3e4d	90 f0		bcc $3e3f			bcc 	_DTFindText
.3e4f	e6 2b		inc $2b				inc 	temp0+1
.3e51	4c 3f 3e	jmp $3e3f			jmp 	_DTFindText
.3e54					_DTFoundText:
.3e54	a0 01		ldy #$01			ldy 	#1 							; get first character
.3e56	b1 2a		lda ($2a),y			lda 	(temp0),y
.3e58	29 7f		and #$7f			and 	#$7F 						; will have bit 7 set.
.3e5a	c9 41		cmp #$41			cmp 	#"A" 						; check for punctuation.
.3e5c	90 11		bcc $3e6f			bcc 	_DTIsPunctuation
.3e5e	c9 5b		cmp #$5b			cmp 	#"Z"+1
.3e60	b0 0d		bcs $3e6f			bcs 	_DTIsPunctuation
.3e62	a9 00		lda #$00			lda 	#0 							; now text, may need spaces
.3e64	20 c9 3d	jsr $3dc9			jsr 	DTSwitchMode
.3e67	a9 83		lda #$83			lda 	#LTYKeyword
.3e69	20 88 3d	jsr $3d88			jsr 	ListOutputCharacter
.3e6c	4c 79 3e	jmp $3e79			jmp 	_DTPrint
.3e6f					_DTIsPunctuation:
.3e6f	a9 01		lda #$01			lda 	#1 							; now punctuation, may need spaces
.3e71	20 c9 3d	jsr $3dc9			jsr 	DTSwitchMode
.3e74	a9 82		lda #$82			lda 	#LTYPunctuation
.3e76	20 88 3d	jsr $3d88			jsr 	ListOutputCharacter
.3e79					_DTPrint:
.3e79	a9 01		lda #$01			lda 	#1 							; fix case.
.3e7b	20 5e 3d	jsr $3d5e			jsr 	DTPrintLengthPrefix 		; print it out.
.3e7e	a0 00		ldy #$00			ldy 	#0
.3e80	b1 2a		lda ($2a),y			lda 	(temp0),y
.3e82	a8		tay				tay
.3e83	b1 2a		lda ($2a),y			lda 	(temp0),y
.3e85	29 7f		and #$7f			and 	#$7F 						; will have bit 7 set.
.3e87	c9 41		cmp #$41			cmp 	#"A" 						; check for punctuation.
.3e89	90 04		bcc $3e8f			bcc 	_DTIsNowPunctuation
.3e8b	c9 5b		cmp #$5b			cmp 	#"Z"+1
.3e8d	90 05		bcc $3e94			bcc 	_DTPExit
.3e8f					_DTIsNowPunctuation:
.3e8f	a9 01		lda #$01			lda 	#1
.3e91	8d 06 0d	sta $0d06			sta		LastCharacterClass
.3e94					_DTPExit:
.3e94	68		pla				pla
.3e95	a8		tay				tay
.3e96	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/search.asm

.0d09					currentSet:
>0d09							.fill 	1
.3e97					TokenSearch:
.3e97	8a		txa				txa
.3e98	48		pha				pha
.3e99	98		tya				tya
.3e9a	48		pha				pha
.3e9b	a9 00		lda #$00			lda 	#0
.3e9d	8d 09 0d	sta $0d09			sta 	currentSet
.3ea0					_TSLoop:
.3ea0	ad 09 0d	lda $0d09			lda 	currentSet 					; 2 x currentset in X
.3ea3	0a		asl a				asl 	a
.3ea4	aa		tax				tax
.3ea5	bd 31 41	lda $4131,x			lda 	TokenTableAddress,x 		; set temp0 to the table address
.3ea8	85 2a		sta $2a				sta 	temp0
.3eaa	bd 32 41	lda $4132,x			lda 	TokenTableAddress+1,x
.3ead	85 2b		sta $2b				sta 	temp0+1
.3eaf	20 d6 3e	jsr $3ed6			jsr 	TokenSearchOne 				; search one table
.3eb2	b0 0d		bcs $3ec1			bcs 	_TSFound 					; found a token.
.3eb4	ee 09 0d	inc $0d09			inc 	currentSet 					; next set
.3eb7	ad 09 0d	lda $0d09			lda 	currentSet
.3eba	c9 04		cmp #$04			cmp 	#4
.3ebc	d0 e2		bne $3ea0			bne 	_TSLoop 					; back if not done all four.
.3ebe	18		clc				clc 								; clear carry and exit
.3ebf	90 10		bcc $3ed1			bcc 	_TSExit
.3ec1					_TSFound:
.3ec1	48		pha				pha 								; save token
.3ec2	ad 09 0d	lda $0d09			lda 	currentSet					; if set zero no shift
.3ec5	f0 05		beq $3ecc			beq 	_TSNoShift
.3ec7	09 80		ora #$80			ora 	#$80 						; Write as $81-$83
.3ec9	20 87 3f	jsr $3f87			jsr 	TokenWrite
.3ecc					_TSNoShift:
.3ecc	68		pla				pla 								; get token back
.3ecd	20 87 3f	jsr $3f87			jsr 	TokenWrite 					; write it
.3ed0	38		sec				sec 								; carry set indicating success
.3ed1					_TSExit:
.3ed1	68		pla				pla
.3ed2	a8		tay				tay
.3ed3	68		pla				pla
.3ed4	aa		tax				tax
.3ed5	60		rts				rts
.3ed6					TokenSearchOne:
.3ed6	a2 86		ldx #$86			ldx 	#$86 						; current token being tested.
.3ed8					_TSOLoop:
.3ed8	a0 00		ldy #$00			ldy 	#0
.3eda	b1 2a		lda ($2a),y			lda 	(temp0),y 					; get length of token
.3edc	f0 26		beq $3f04			beq 	_TSOFail 					; if zero, end of table
.3ede	cd cf 0a	cmp $0acf			cmp 	convertBuffer 				; length is the same, compare the text matches.
.3ee1	f0 11		beq $3ef4			beq 	_TSOCheckText
.3ee3					_TSONext:
.3ee3	e8		inx				inx 								; bump token
.3ee4	a0 00		ldy #$00			ldy 	#0							; get length
.3ee6	b1 2a		lda ($2a),y			lda 	(temp0),y
.3ee8	38		sec				sec
.3ee9	65 2a		adc $2a				adc 	temp0 						; add to temp0 + 1
.3eeb	85 2a		sta $2a				sta 	temp0
.3eed	90 e9		bcc $3ed8			bcc 	_TSOLoop
.3eef	e6 2b		inc $2b				inc 	temp0+1
.3ef1	4c d8 3e	jmp $3ed8			jmp 	_TSOLoop
.3ef4					_TSOCheckText:
.3ef4	a8		tay				tay 								; compare length downto 1.
.3ef5					_TSOCheckLoop:
.3ef5	b1 2a		lda ($2a),y			lda 	(temp0),y 					; use EOR to compare
.3ef7	59 cf 0a	eor $0acf,y			eor 	convertBuffer,y
.3efa	29 7f		and #$7f			and 	#$7F 						; ignore bit 7
.3efc	d0 e5		bne $3ee3			bne 	_TSONext 					; different goto next.
.3efe	88		dey				dey 								; do all
.3eff	d0 f4		bne $3ef5			bne 	_TSOCheckLoop
.3f01	8a		txa				txa 								; return token in A and carry set
.3f02	38		sec				sec
.3f03	60		rts				rts
.3f04					_TSOFail:
.3f04	18		clc				clc
.3f05	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/test.asm

.3f06					TokTest:
.3f06	a2 ff		ldx #$ff				ldx 	#$FF
.3f08	9a		txs					txs
.3f09	a9 26		lda #$26			lda 	#(TokenText1) & $FF
.3f0b	85 28		sta $28				sta 	codePtr
.3f0d	a9 3f		lda #$3f			lda 	#(TokenText1) >> 8
.3f0f	85 29		sta $29				sta 	1+(codePtr)
.3f11	20 26 3f	jsr $3f26				jsr 	Tokenise
.3f14	a2 00		ldx #$00	TokStop:	ldx 	#0 					; compare vs precalculated result
.3f16	bd 26 3f	lda $3f26,x	_TokCheck:	lda 	TokenBytes1,x
.3f19	dd 0d 0d	cmp $0d0d,x				cmp 	tokenBuffer,x
.3f1c	d0 fe		bne $3f1c	_TokFail:	bne 	_TokFail	 		; error.
.3f1e	e8		inx					inx
.3f1f	c9 80		cmp #$80				cmp 	#$80
.3f21	d0 f3		bne $3f16				bne 	_TokCheck
.3f23	4c ff ff	jmp $ffff				jmp 	$FFFF 				; successfully tokenised then quit.

;******  Processing file: tokeniser/tokenise/../../generated/toktest.inc

.3f26					TokenText1:
.3f26					TokenBytes1:

;******  Return to file: tokeniser/tokenise/test.asm


;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokenise.asm

.0d0a					tokenHeader:
>0d0a							.fill 	3
.0d0d					tokenBuffer:
>0d0d							.fill 	256
.0e0d					tokenBufferIndex:
>0e0d							.fill 	1
.3f26					Tokenise:
.3f26	20 a0 3f	jsr $3fa0			jsr 	TokeniseMakeASCIIZ 			; convert to ASCIIZ string.
.3f29					TokeniseASCIIZ:
.3f29	20 b1 3f	jsr $3fb1			jsr 	TokeniseFixCase 			; remove controls and lower case outside quotes.
.3f2c	a9 00		lda #$00			lda 	#0 							; reset the token buffer index
.3f2e	8d 0d 0e	sta $0e0d			sta 	tokenBufferIndex
.3f31	a8		tay				tay 								; start pointer
.3f32	a9 80		lda #$80			lda 	#$80 						; empty token buffer ($80 ends it)
.3f34	8d 0d 0d	sta $0d0d			sta 	tokenBuffer
.3f37					_TokLoop:
.3f37	b1 28		lda ($28),y			lda 	(codePtr),y 				; get next character
.3f39	f0 46		beq $3f81			beq 	_TokExit 					; if zero, then exit.
.3f3b	c8		iny				iny 								; skip over spaces.
.3f3c	c9 20		cmp #$20			cmp 	#" "
.3f3e	f0 f7		beq $3f37			beq 	_TokLoop
.3f40	88		dey				dey 								; point back to character.
.3f41	c9 26		cmp #$26			cmp 	#"&"						; Hexadecimal constant.
.3f43	f0 18		beq $3f5d			beq 	_TokHexConst
.3f45	c9 22		cmp #$22			cmp 	#'"'						; Quoted String
.3f47	f0 23		beq $3f6c			beq 	_TokQString
.3f49	c9 5b		cmp #$5b			cmp 	#"Z"+1 						; > 'Z' is punctuation
.3f4b	b0 26		bcs $3f73			bcs 	_TokPunctuation
.3f4d	c9 41		cmp #$41			cmp 	#"A" 						; A..Z identifier
.3f4f	b0 29		bcs $3f7a			bcs 	_TokIdentifier
.3f51	c9 3a		cmp #$3a			cmp 	#"9"+1
.3f53	b0 1e		bcs $3f73			bcs 	_TokPunctuation 			; between 9 and A exclusive, punctuation
.3f55	c9 30		cmp #$30			cmp 	#"0"
.3f57	90 1a		bcc $3f73			bcc 	_TokPunctuation 			; < 0, punctuation.
.3f59	a9 0a		lda #$0a			lda 	#10  						; 0..9 constant in base 10.
.3f5b	d0 08		bne $3f65			bne 	_TokConst
.3f5d					_TokHexConst:
.3f5d	c8		iny				iny									; consume token.
.3f5e	a9 c5		lda #$c5			lda 	#TKW_AMP 					; Write ampersand token out
.3f60	20 87 3f	jsr $3f87			jsr 	TokenWrite
.3f63	a9 10		lda #$10			lda 	#16
.3f65					_TokConst:
.3f65	20 6f 40	jsr $406f			jsr 	TokeniseInteger
.3f68	b0 cd		bcs $3f37			bcs 	_TokLoop
.3f6a	90 18		bcc $3f84			bcc 	_TokFail
.3f6c					_TokQString:
.3f6c	20 05 41	jsr $4105			jsr 	TokeniseString
.3f6f	b0 c6		bcs $3f37			bcs 	_TokLoop
.3f71	90 11		bcc $3f84			bcc 	_TokFail
.3f73					_TokPunctuation:
.3f73	20 e4 40	jsr $40e4			jsr 	TokenisePunctuation
.3f76	b0 bf		bcs $3f37			bcs 	_TokLoop
.3f78	90 0a		bcc $3f84			bcc 	_TokFail
.3f7a					_TokIdentifier:
.3f7a	20 e0 3f	jsr $3fe0			jsr 	TokeniseIdentifier
.3f7d	b0 b8		bcs $3f37			bcs 	_TokLoop
.3f7f	90 03		bcc $3f84			bcc 	_TokFail
.3f81					_TokExit:
.3f81	a9 01		lda #$01			lda 	#1
.3f83	60		rts				rts
.3f84					_TokFail:
.3f84	a9 00		lda #$00			lda 	#0
.3f86	60		rts				rts
.3f87					TokenWrite:
.3f87	85 32		sta $32				sta 	tempShort 					; save XA
.3f89	48		pha				pha
.3f8a	8a		txa				txa
.3f8b	48		pha				pha
.3f8c	a5 32		lda $32				lda 	tempShort
.3f8e	ae 0d 0e	ldx $0e0d			ldx 	tokenBufferIndex 			; geet index
.3f91	9d 0d 0d	sta $0d0d,x			sta 	tokenBuffer,x 				; write byte to buffer
.3f94	a9 80		lda #$80			lda 	#TOK_EOL 					; pre-emptively write EOL marker after
.3f96	9d 0e 0d	sta $0d0e,x			sta 	tokenBuffer+1,x
.3f99	ee 0d 0e	inc $0e0d			inc 	tokenBufferIndex 			; bump index
.3f9c	68		pla				pla
.3f9d	aa		tax				tax
.3f9e	68		pla				pla
.3f9f	60		rts				rts
.3fa0					TokeniseMakeASCIIZ:
.3fa0	a0 00		ldy #$00			ldy 	#0							; get length of string.
.3fa2	b1 28		lda ($28),y			lda 	(codePtr),y
.3fa4	a8		tay				tay
.3fa5	c8		iny				iny 								; +1, the NULL goes here.
.3fa6	a9 00		lda #$00			lda 	#0
.3fa8	91 28		sta ($28),y			sta 	(codePtr),y 				; write the trailing NULL.
.3faa	e6 28		inc $28				inc 	codePtr 					; bump the pointer.
.3fac	d0 02		bne $3fb0			bne 	_TMKAExit
.3fae	e6 29		inc $29				inc 	codePtr+1
.3fb0					_TMKAExit:
.3fb0	60		rts				rts
.3fb1					TokeniseFixCase:
.3fb1	a0 00		ldy #$00			ldy 	#0 							; position in buffer.
.3fb3	a2 01		ldx #$01			ldx 	#1 							; bit 0 of this is 'in quotes'
.3fb5					_TFCFlipQ:
.3fb5	8a		txa				txa
.3fb6	49 01		eor #$01			eor 	#1
.3fb8	aa		tax				tax
.3fb9					_TFCLoop:
.3fb9	b1 28		lda ($28),y			lda 	(codePtr),y 				; get character
.3fbb	f0 22		beq $3fdf			beq 	_TFCExit 					; if zero exit.
.3fbd	c9 20		cmp #$20			cmp 	#32 						; if control
.3fbf	90 1a		bcc $3fdb			bcc 	_TFCControl
.3fc1	c8		iny				iny 								; preconsume
.3fc2	c9 22		cmp #$22			cmp 	#'"'
.3fc4	f0 ef		beq $3fb5			beq 	_TFCFlipQ
.3fc6	c9 61		cmp #$61			cmp 	#"a"						; check if L/C
.3fc8	90 ef		bcc $3fb9			bcc 	_TFCLoop
.3fca	c9 7b		cmp #$7b			cmp 	#"z"+1
.3fcc	b0 eb		bcs $3fb9			bcs 	_TFCLoop
.3fce	e0 00		cpx #$00			cpx 	#0 							; in quotes, if so, leave alone.
.3fd0	d0 e7		bne $3fb9			bne 	_TFCLoop
.3fd2	88		dey				dey
.3fd3	49 20		eor #$20			eor 	#"A"^"a"					; make U/C
.3fd5					_TFCWrite:
.3fd5	91 28		sta ($28),y			sta 	(codePtr),y
.3fd7	c8		iny				iny
.3fd8	4c b9 3f	jmp $3fb9			jmp 	_TFCLoop
.3fdb					_TFCControl:
.3fdb	a9 20		lda #$20			lda 	#" "
.3fdd	d0 f6		bne $3fd5			bne 	_TFCWrite
.3fdf					_TFCExit:
.3fdf	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokident.asm

.3fe0					TokeniseIdentifier:
.3fe0	a2 00		ldx #$00			ldx 	#0
.3fe2					_TICopyID:
.3fe2	b1 28		lda ($28),y			lda 	(codePtr),y					; get characters
.3fe4	c9 5f		cmp #$5f			cmp 	#"_" 						; underscore converted to minus internally.
.3fe6	f0 16		beq $3ffe			beq 	_TICopyUnderscore
.3fe8	c9 2e		cmp #$2e			cmp 	#"."
.3fea	f0 14		beq $4000			beq 	_TICopyIn
.3fec	c9 30		cmp #$30			cmp 	#"0"
.3fee	90 1b		bcc $400b			bcc 	_TIEndCopy
.3ff0	c9 3a		cmp #$3a			cmp 	#"9"+1
.3ff2	90 0c		bcc $4000			bcc 	_TICopyIn
.3ff4	c9 41		cmp #$41			cmp 	#"A"
.3ff6	90 13		bcc $400b			bcc 	_TIEndCopy
.3ff8	c9 5b		cmp #$5b			cmp 	#"Z"+1
.3ffa	b0 0f		bcs $400b			bcs		_TIEndCopy
.3ffc	90 02		bcc $4000			bcc 	_TICopyIn
.3ffe					_TICopyUnderScore:
.3ffe	a9 2d		lda #$2d			lda 	#"-"						; _ is mapped to -
.4000					_TICopyIn:
.4000	e8		inx				inx 								; write into buffer in 7 bit ASCII form
.4001	9d cf 0a	sta $0acf,x			sta 	convertBuffer,x
.4004	8e cf 0a	stx $0acf			stx 	convertBuffer
.4007	c8		iny				iny 								; next character
.4008	4c e2 3f	jmp $3fe2			jmp 	_TICopyID 					; loop round
.400b					_TIEndCopy:
.400b	a9 24		lda #$24			lda 	#"$"
.400d	20 62 40	jsr $4062			jsr 	TIDCheckCopy
.4010	a9 23		lda #$23			lda 	#"#"
.4012	20 62 40	jsr $4062			jsr 	TIDCheckCopy
.4015	a9 28		lda #$28			lda 	#"("
.4017	20 62 40	jsr $4062			jsr 	TIDCheckCopy
.401a	20 97 3e	jsr $3e97			jsr 	TokenSearch 				; is it a token
.401d	b0 41		bcs $4060			bcs 	_TIExit 					; if so, then exit.
.401f	98		tya				tya
.4020	48		pha				pha
.4021	a0 3a		ldy #$3a			ldy 	#$3A 						; default type.
.4023	ae cf 0a	ldx $0acf			ldx 	convertBuffer 				; is last character (
.4026	bd cf 0a	lda $0acf,x			lda 	convertBuffer,x
.4029	c9 28		cmp #$28			cmp 	#"("
.402b	d0 02		bne $402f			bne 	_TINotArray
.402d	ca		dex				dex 								; yes, remove it and convert to array.
.402e	c8		iny				iny
.402f					_TINotArray:
.402f	bd cf 0a	lda $0acf,x			lda 	convertBuffer,x 			; check for $
.4032	c9 24		cmp #$24			cmp 	#"$"
.4034	d0 03		bne $4039			bne 	_TINotString
.4036	ca		dex				dex
.4037	c8		iny				iny
.4038	c8		iny				iny
.4039					_TINotString:
.4039	bd cf 0a	lda $0acf,x			lda 	convertBuffer,x 			; check for #
.403c	c9 23		cmp #$23			cmp 	#"#"
.403e	d0 05		bne $4045			bne 	_TINotFloat
.4040	ca		dex				dex
.4041	c8		iny				iny
.4042	c8		iny				iny
.4043	c8		iny				iny
.4044	c8		iny				iny
.4045					_TINotFloat:
.4045	e8		inx				inx 								; write end marker for identifier.
.4046	98		tya				tya
.4047	9d cf 0a	sta $0acf,x			sta 	convertBuffer,x
.404a	8e cf 0a	stx $0acf			stx 	convertBuffer 				; update length.
.404d	a2 01		ldx #$01			ldx 	#1
.404f					_TIOutput:
.404f	bd cf 0a	lda $0acf,x			lda 	convertBuffer,x
.4052	29 3f		and #$3f			and 	#$3F
.4054	48		pha				pha
.4055	20 87 3f	jsr $3f87			jsr 	TokenWrite
.4058	e8		inx				inx
.4059	68		pla				pla
.405a	c9 3a		cmp #$3a			cmp 	#$3A
.405c	90 f1		bcc $404f			bcc 	_TIOutput
.405e	68		pla				pla
.405f	a8		tay				tay
.4060					_TIExit:
.4060	38		sec				sec 								; this can't fail.
.4061	60		rts				rts
.4062					TIDCheckCopy:
.4062	d1 28		cmp ($28),y			cmp 	(codePtr),y
.4064	d0 08		bne $406e			bne 	_TIDCCExit
.4066	e8		inx				inx
.4067	9d cf 0a	sta $0acf,x			sta 	convertBuffer,x
.406a	8e cf 0a	stx $0acf			stx 	convertBuffer
.406d	c8		iny				iny
.406e					_TIDCCExit:
.406e	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokinteger.asm

.406f					TokeniseInteger:
.406f	85 2c		sta $2c				sta 	temp1 						; save base
.4071	a2 00		ldx #$00			ldx 	#0							; count of chars so far
.4073	8e cf 0a	stx $0acf			stx 	convertBuffer
.4076					_TIGetChars:
.4076	b1 28		lda ($28),y			lda 	(codePtr),y 				; check character is numeric
.4078	c9 30		cmp #$30			cmp 	#"0"
.407a	90 1f		bcc $409b			bcc 	_TIEndGet
.407c	c9 3a		cmp #$3a			cmp 	#"9"+1
.407e	90 10		bcc $4090			bcc 	_TIHaveChar
.4080	a5 2c		lda $2c				lda 	temp1 						; fail if not hex mode
.4082	c9 0a		cmp #$0a			cmp 	#10
.4084	f0 15		beq $409b			beq 	_TIEndGet
.4086	b1 28		lda ($28),y			lda 	(codePtr),y 				; check legitimate hex.
.4088	c9 41		cmp #$41			cmp 	#"A"
.408a	90 0f		bcc $409b			bcc 	_TIEndGet
.408c	c9 5b		cmp #$5b			cmp 	#"Z"+1
.408e	b0 0b		bcs $409b			bcs 	_TIEndGet
.4090					_TIHaveChar:
.4090	e8		inx				inx 								; write into buffer.
.4091	8e cf 0a	stx $0acf			stx 	convertBuffer
.4094	9d cf 0a	sta $0acf,x			sta 	convertBuffer,x
.4097	c8		iny				iny 								; next char
.4098	4c 76 40	jmp $4076			jmp 	_TIGetChars
.409b					_TIEndGet:
.409b	e0 00		cpx #$00			cpx 	#0 							; no char acquired.
.409d	f0 1c		beq $40bb			beq 	_TIFail
.409f	98		tya				tya
.40a0	48		pha				pha
.40a1	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.40a3	85 2a		sta $2a				sta 	temp0
.40a5	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.40a7	85 2b		sta $2b				sta 	1+(temp0)
.40a9	a9 00		lda #$00			lda 	#0 							; stack level 0
.40ab	a4 2c		ldy $2c				ldy 	temp1 						; base Y
.40ad	a2 1a		ldx #$1a		ldx	#26
.40af	20 a2 39	jsr $39a2		jsr	mainHandler
.40b2	68		pla				pla
.40b3	a8		tay				tay
.40b4	90 05		bcc $40bb			bcc 	_TIFail 					; didn't convert.
.40b6	20 bd 40	jsr $40bd			jsr 	TIRecursiveOut 				; recursive output ?
.40b9	38		sec				sec
.40ba	60		rts				rts
.40bb					_TIFail:
.40bb	18		clc				clc
.40bc	60		rts				rts
.40bd					TIRecursiveOut:
.40bd	a5 98		lda $98				lda 	esInt0 						; get value to output after possible recursion
.40bf	29 3f		and #$3f			and 	#$3F
.40c1	09 40		ora #$40			ora 	#$40
.40c3	48		pha				pha
.40c4	a5 98		lda $98				lda 	esInt0 						; are we recursing ?
.40c6	29 c0		and #$c0			and 	#$C0
.40c8	05 a0		ora $a0				ora 	esInt1
.40ca	05 a8		ora $a8				ora 	esInt2
.40cc	05 b0		ora $b0				ora 	esInt3
.40ce	f0 10		beq $40e0			beq 	_TIRONoRecursion
.40d0	a2 06		ldx #$06			ldx 	#6 							; shift right x 6
.40d2					_TIROShift:
.40d2	46 b0		lsr $b0				lsr 	esInt3
.40d4	66 a8		ror $a8				ror 	esInt2
.40d6	66 a0		ror $a0				ror 	esInt1
.40d8	66 98		ror $98				ror 	esInt0
.40da	ca		dex				dex
.40db	d0 f5		bne $40d2			bne 	_TIROShift
.40dd	20 bd 40	jsr $40bd			jsr 	TIRecursiveOut 				; call recursively
.40e0					_TIRONoRecursion:
.40e0	68		pla				pla 								; pull the old bit.
.40e1	4c 87 3f	jmp $3f87			jmp 	TokenWrite

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokpunct.asm

.40e4					TokenisePunctuation:
.40e4	b1 28		lda ($28),y			lda	 	(codePtr),y 				; copy next 2 chars into convertBuffer
.40e6	8d d0 0a	sta $0ad0			sta 	convertBuffer+1
.40e9	c8		iny				iny
.40ea	b1 28		lda ($28),y			lda 	(codePtr),y
.40ec	8d d1 0a	sta $0ad1			sta 	convertBuffer+2
.40ef	c8		iny				iny 								; Y is +2
.40f0	a9 02		lda #$02			lda 	#2 							; 2 character string.
.40f2	8d cf 0a	sta $0acf			sta 	convertBuffer
.40f5	20 97 3e	jsr $3e97			jsr 	TokenSearch 				; search for that token.
.40f8	b0 0a		bcs $4104			bcs 	_TIFound
.40fa	ce cf 0a	dec $0acf			dec 	convertBuffer 				; make it a 1 character string
.40fd	88		dey				dey 								; Y is now +1
.40fe	20 97 3e	jsr $3e97			jsr 	TokenSearch 				; search for that token.
.4101	b0 01		bcs $4104			bcs 	_TIFound
.4103	88		dey				dey 								; Y is now +0, carry clear indicating failure.
.4104					_TIFound:
.4104	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokstring.asm

.4105					TokeniseString:
.4105	c8		iny				iny 								; skip opening quote
.4106	a2 ff		ldx #$ff			ldx 	#255 						; count length of string.
.4108	84 2a		sty $2a				sty 	temp0 						; save start.
.410a					_TSGetLength:
.410a	b1 28		lda ($28),y			lda 	(codePtr),y 				; get next
.410c	f0 21		beq $412f			beq 	_TSFail						; end of line, fail
.410e	c8		iny				iny
.410f	e8		inx				inx
.4110	c9 22		cmp #$22			cmp 	#'"' 						; until end quote found.
.4112	d0 f6		bne $410a			bne 	_TSGetLength
.4114	a9 85		lda #$85			lda 	#TOK_STR 					; write string token out
.4116	20 87 3f	jsr $3f87			jsr 	TokenWrite
.4119	8a		txa				txa 								; output length
.411a	20 87 3f	jsr $3f87			jsr 	TokenWrite
.411d	a4 2a		ldy $2a				ldy 	temp0 						; get original position
.411f	e0 00		cpx #$00			cpx 	#0 							; check ended
.4121	f0 09		beq $412c			beq 	_TSExit
.4123					_TSOutput:
.4123	b1 28		lda ($28),y			lda 	(codePtr),y					; output character
.4125	20 87 3f	jsr $3f87			jsr 	TokenWrite
.4128	c8		iny				iny
.4129	ca		dex				dex
.412a	d0 f7		bne $4123			bne 	_TSOutput
.412c					_TSExit:
.412c	c8		iny				iny 								; skip ending quote
.412d	38		sec				sec 								; return CS.
.412e	60		rts				rts
.412f					_TSFail:
.412f	18		clc				clc
.4130	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokentext.asm

.4131					TokenTableAddress:
>4131	39 41						.word 	Group0Text
>4133	02 43						.word 	Group1Text
>4135	4f 44						.word 	Group2Text
>4137	7a 44						.word 	Group3Text

;******  Processing file: tokeniser/../generated/tokentext0.inc

.4139					Group0Text:
>4139	03 41 4e c4				.byte $03,$41,$4e,$c4                  ; $86 and
>413d	02 4f d2				.byte $02,$4f,$d2                      ; $87 or
>4140	03 58 4f d2				.byte $03,$58,$4f,$d2                  ; $88 xor
>4144	02 3e bd				.byte $02,$3e,$bd                      ; $89 >=
>4147	02 3c bd				.byte $02,$3c,$bd                      ; $8a <=
>414a	01 be					.byte $01,$be                          ; $8b >
>414c	01 bc					.byte $01,$bc                          ; $8c <
>414e	01 bd					.byte $01,$bd                          ; $8d =
>4150	02 3c be				.byte $02,$3c,$be                      ; $8e <>
>4153	01 ab					.byte $01,$ab                          ; $8f +
>4155	01 ad					.byte $01,$ad                          ; $90 -
>4157	02 3e be				.byte $02,$3e,$be                      ; $91 >>
>415a	02 3c bc				.byte $02,$3c,$bc                      ; $92 <<
>415d	01 aa					.byte $01,$aa                          ; $93 *
>415f	01 af					.byte $01,$af                          ; $94 /
>4161	03 4d 4f c4				.byte $03,$4d,$4f,$c4                  ; $95 mod
>4165	01 de					.byte $01,$de                          ; $96 ^
>4167	01 a1					.byte $01,$a1                          ; $97 !
>4169	01 bf					.byte $01,$bf                          ; $98 ?
>416b	06 52 45 50 45 41 d4			.byte $06,$52,$45,$50,$45,$41,$d4      ; $99 repeat
>4172	05 57 48 49 4c c5			.byte $05,$57,$48,$49,$4c,$c5          ; $9a while
>4178	03 46 4f d2				.byte $03,$46,$4f,$d2                  ; $9b for
>417c	02 49 c6				.byte $02,$49,$c6                      ; $9c if
>417f	07 44 45 46 50 52 4f c3			.byte $07,$44,$45,$46,$50,$52,$4f,$c3  ; $9d defproc
>4187	05 55 4e 54 49 cc			.byte $05,$55,$4e,$54,$49,$cc          ; $9e until
>418d	04 57 45 4e c4				.byte $04,$57,$45,$4e,$c4              ; $9f wend
>4192	04 4e 45 58 d4				.byte $04,$4e,$45,$58,$d4              ; $a0 next
>4197	04 54 48 45 ce				.byte $04,$54,$48,$45,$ce              ; $a1 then
>419c	05 45 4e 44 49 c6			.byte $05,$45,$4e,$44,$49,$c6          ; $a2 endif
>41a2	07 45 4e 44 50 52 4f c3			.byte $07,$45,$4e,$44,$50,$52,$4f,$c3  ; $a3 endproc
>41aa	01 a8					.byte $01,$a8                          ; $a4 (
>41ac	04 4c 45 4e a8				.byte $04,$4c,$45,$4e,$a8              ; $a5 len(
>41b1	04 53 47 4e a8				.byte $04,$53,$47,$4e,$a8              ; $a6 sgn(
>41b6	04 41 42 53 a8				.byte $04,$41,$42,$53,$a8              ; $a7 abs(
>41bb	07 52 41 4e 44 4f 4d a8			.byte $07,$52,$41,$4e,$44,$4f,$4d,$a8  ; $a8 random(
>41c3	04 50 41 47 c5				.byte $04,$50,$41,$47,$c5              ; $a9 page
>41c8	04 54 52 55 c5				.byte $04,$54,$52,$55,$c5              ; $aa true
>41cd	05 46 41 4c 53 c5			.byte $05,$46,$41,$4c,$53,$c5          ; $ab false
>41d3	04 4d 49 4e a8				.byte $04,$4d,$49,$4e,$a8              ; $ac min(
>41d8	04 4d 41 58 a8				.byte $04,$4d,$41,$58,$a8              ; $ad max(
>41dd	04 53 59 53 a8				.byte $04,$53,$59,$53,$a8              ; $ae sys(
>41e2	06 54 49 4d 45 52 a8			.byte $06,$54,$49,$4d,$45,$52,$a8      ; $af timer(
>41e9	06 45 56 45 4e 54 a8			.byte $06,$45,$56,$45,$4e,$54,$a8      ; $b0 event(
>41f0	04 47 45 54 a8				.byte $04,$47,$45,$54,$a8              ; $b1 get(
>41f5	06 49 4e 4b 45 59 a8			.byte $06,$49,$4e,$4b,$45,$59,$a8      ; $b2 inkey(
>41fc	06 41 4c 4c 4f 43 a8			.byte $06,$41,$4c,$4c,$4f,$43,$a8      ; $b3 alloc(
>4203	05 43 48 52 24 a8			.byte $05,$43,$48,$52,$24,$a8          ; $b4 chr$(
>4209	06 4c 45 46 54 24 a8			.byte $06,$4c,$45,$46,$54,$24,$a8      ; $b5 left$(
>4210	05 4d 49 44 24 a8			.byte $05,$4d,$49,$44,$24,$a8          ; $b6 mid$(
>4216	07 52 49 47 48 54 24 a8			.byte $07,$52,$49,$47,$48,$54,$24,$a8  ; $b7 right$(
>421e	05 53 54 52 24 a8			.byte $05,$53,$54,$52,$24,$a8          ; $b8 str$(
>4224	04 56 41 4c a8				.byte $04,$56,$41,$4c,$a8              ; $b9 val(
>4229	05 50 45 45 4b a8			.byte $05,$50,$45,$45,$4b,$a8          ; $ba peek(
>422f	05 44 45 45 4b a8			.byte $05,$44,$45,$45,$4b,$a8          ; $bb deek(
>4235	05 4c 45 45 4b a8			.byte $05,$4c,$45,$45,$4b,$a8          ; $bc leek(
>423b	04 41 53 43 a8				.byte $04,$41,$53,$43,$a8              ; $bd asc(
>4240	04 49 4e 54 a8				.byte $04,$49,$4e,$54,$a8              ; $be int(
>4245	06 46 4c 4f 41 54 a8			.byte $06,$46,$4c,$4f,$41,$54,$a8      ; $bf float(
>424c	06 49 53 56 41 4c a8			.byte $06,$49,$53,$56,$41,$4c,$a8      ; $c0 isval(
>4253	07 55 50 50 45 52 24 a8			.byte $07,$55,$50,$50,$45,$52,$24,$a8  ; $c1 upper$(
>425b	07 4c 4f 57 45 52 24 a8			.byte $07,$4c,$4f,$57,$45,$52,$24,$a8  ; $c2 lower$(
>4263	01 c0					.byte $01,$c0                          ; $c3 @
>4265	01 fe					.byte $01,$fe                          ; $c4 ~
>4267	01 a6					.byte $01,$a6                          ; $c5 &
>4269	05 47 45 54 24 a8			.byte $05,$47,$45,$54,$24,$a8          ; $c6 get$(
>426f	07 49 4e 4b 45 59 24 a8			.byte $07,$49,$4e,$4b,$45,$59,$24,$a8  ; $c7 inkey$(
>4277	03 4d 45 cd				.byte $03,$4d,$45,$cd                  ; $c8 mem
>427b	01 a9					.byte $01,$a9                          ; $c9 )
>427d	01 ba					.byte $01,$ba                          ; $ca :
>427f	01 ac					.byte $01,$ac                          ; $cb ,
>4281	01 bb					.byte $01,$bb                          ; $cc ;
>4283	01 a7					.byte $01,$a7                          ; $cd '
>4285	02 54 cf				.byte $02,$54,$cf                      ; $ce to
>4288	04 53 54 45 d0				.byte $04,$53,$54,$45,$d0              ; $cf step
>428d	04 50 52 4f c3				.byte $04,$50,$52,$4f,$c3              ; $d0 proc
>4292	05 4c 4f 43 41 cc			.byte $05,$4c,$4f,$43,$41,$cc          ; $d1 local
>4298	03 44 49 cd				.byte $03,$44,$49,$cd                  ; $d2 dim
>429c	03 52 45 cd				.byte $03,$52,$45,$cd                  ; $d3 rem
>42a0	03 4c 45 d4				.byte $03,$4c,$45,$d4                  ; $d4 let
>42a4	05 49 4e 50 55 d4			.byte $05,$49,$4e,$50,$55,$d4          ; $d5 input
>42aa	04 45 4c 53 c5				.byte $04,$45,$4c,$53,$c5              ; $d6 else
>42af	03 56 44 d5				.byte $03,$56,$44,$d5                  ; $d7 vdu
>42b3	05 50 52 49 4e d4			.byte $05,$50,$52,$49,$4e,$d4          ; $d8 print
>42b9	04 44 41 54 c1				.byte $04,$44,$41,$54,$c1              ; $d9 data
>42be	05 49 4d 41 47 c5			.byte $05,$49,$4d,$41,$47,$c5          ; $da image
>42c4	02 41 d4				.byte $02,$41,$d4                      ; $db at
>42c7	04 46 4c 49 d0				.byte $04,$46,$4c,$49,$d0              ; $dc flip
>42cc	06 41 53 53 45 52 d4			.byte $06,$41,$53,$53,$45,$52,$d4      ; $dd assert
>42d3	04 50 4f 4b c5				.byte $04,$50,$4f,$4b,$c5              ; $de poke
>42d8	04 44 4f 4b c5				.byte $04,$44,$4f,$4b,$c5              ; $df doke
>42dd	04 4c 4f 4b c5				.byte $04,$4c,$4f,$4b,$c5              ; $e0 loke
>42e2	03 49 4e cb				.byte $03,$49,$4e,$cb                  ; $e1 ink
>42e6	05 50 41 50 45 d2			.byte $05,$50,$41,$50,$45,$d2          ; $e2 paper
>42ec	03 43 4c d3				.byte $03,$43,$4c,$d3                  ; $e3 cls
>42f0	06 4c 4f 43 41 54 c5			.byte $06,$4c,$4f,$43,$41,$54,$c5      ; $e4 locate
>42f7	01 ae					.byte $01,$ae                          ; $e5 .
>42f9	01 a3					.byte $01,$a3                          ; $e6 #
>42fb	05 43 4c 45 41 d2			.byte $05,$43,$4c,$45,$41,$d2          ; $e7 clear
>4301	00					.byte $00

;******  Return to file: tokeniser/tokentext.asm


;******  Processing file: tokeniser/../generated/tokentext1.inc

.4302					Group1Text:
>4302	04 4c 4f 41 c4				.byte $04,$4c,$4f,$41,$c4              ; $86 load
>4307	04 53 41 56 c5				.byte $04,$53,$41,$56,$c5              ; $87 save
>430c	04 4c 49 53 d4				.byte $04,$4c,$49,$53,$d4              ; $88 list
>4311	03 4e 45 d7				.byte $03,$4e,$45,$d7                  ; $89 new
>4315	05 42 52 45 41 cb			.byte $05,$42,$52,$45,$41,$cb          ; $8a break
>431b	03 52 55 ce				.byte $03,$52,$55,$ce                  ; $8b run
>431f	04 52 45 41 c4				.byte $04,$52,$45,$41,$c4              ; $8c read
>4324	07 52 45 53 54 4f 52 c5			.byte $07,$52,$45,$53,$54,$4f,$52,$c5  ; $8d restore
>432c	03 45 4e c4				.byte $03,$45,$4e,$c4                  ; $8e end
>4330	04 53 54 4f d0				.byte $04,$53,$54,$4f,$d0              ; $8f stop
>4335	04 58 45 4d d5				.byte $04,$58,$45,$4d,$d5              ; $90 xemu
>433a	04 47 4f 54 cf				.byte $04,$47,$4f,$54,$cf              ; $91 goto
>433f	05 47 4f 53 55 c2			.byte $05,$47,$4f,$53,$55,$c2          ; $92 gosub
>4345	06 52 45 54 55 52 ce			.byte $06,$52,$45,$54,$55,$52,$ce      ; $93 return
>434c	03 4f 52 c1				.byte $03,$4f,$52,$c1                  ; $94 ora
>4350	05 28 41 4e 44 a9			.byte $05,$28,$41,$4e,$44,$a9          ; $95 (and)
>4356	03 45 4f d2				.byte $03,$45,$4f,$d2                  ; $96 eor
>435a	03 41 44 c3				.byte $03,$41,$44,$c3                  ; $97 adc
>435e	03 53 54 c1				.byte $03,$53,$54,$c1                  ; $98 sta
>4362	03 4c 44 c1				.byte $03,$4c,$44,$c1                  ; $99 lda
>4366	03 43 4d d0				.byte $03,$43,$4d,$d0                  ; $9a cmp
>436a	03 53 42 c3				.byte $03,$53,$42,$c3                  ; $9b sbc
>436e	03 41 53 cc				.byte $03,$41,$53,$cc                  ; $9c asl
>4372	03 52 4f cc				.byte $03,$52,$4f,$cc                  ; $9d rol
>4376	03 4c 53 d2				.byte $03,$4c,$53,$d2                  ; $9e lsr
>437a	03 52 4f d2				.byte $03,$52,$4f,$d2                  ; $9f ror
>437e	03 53 54 d8				.byte $03,$53,$54,$d8                  ; $a0 stx
>4382	03 4c 44 d8				.byte $03,$4c,$44,$d8                  ; $a1 ldx
>4386	03 44 45 c3				.byte $03,$44,$45,$c3                  ; $a2 dec
>438a	03 49 4e c3				.byte $03,$49,$4e,$c3                  ; $a3 inc
>438e	03 53 54 da				.byte $03,$53,$54,$da                  ; $a4 stz
>4392	03 42 49 d4				.byte $03,$42,$49,$d4                  ; $a5 bit
>4396	03 53 54 d9				.byte $03,$53,$54,$d9                  ; $a6 sty
>439a	03 4c 44 d9				.byte $03,$4c,$44,$d9                  ; $a7 ldy
>439e	03 43 50 d9				.byte $03,$43,$50,$d9                  ; $a8 cpy
>43a2	03 43 50 d8				.byte $03,$43,$50,$d8                  ; $a9 cpx
>43a6	03 54 53 c2				.byte $03,$54,$53,$c2                  ; $aa tsb
>43aa	03 54 52 c2				.byte $03,$54,$52,$c2                  ; $ab trb
>43ae	03 4a 53 d2				.byte $03,$4a,$53,$d2                  ; $ac jsr
>43b2	03 4a 4d d0				.byte $03,$4a,$4d,$d0                  ; $ad jmp
>43b6	03 42 50 cc				.byte $03,$42,$50,$cc                  ; $ae bpl
>43ba	03 42 4d c9				.byte $03,$42,$4d,$c9                  ; $af bmi
>43be	03 42 56 c3				.byte $03,$42,$56,$c3                  ; $b0 bvc
>43c2	03 42 56 d3				.byte $03,$42,$56,$d3                  ; $b1 bvs
>43c6	03 42 43 c3				.byte $03,$42,$43,$c3                  ; $b2 bcc
>43ca	03 42 43 d3				.byte $03,$42,$43,$d3                  ; $b3 bcs
>43ce	03 42 4e c5				.byte $03,$42,$4e,$c5                  ; $b4 bne
>43d2	03 42 45 d1				.byte $03,$42,$45,$d1                  ; $b5 beq
>43d6	03 42 52 c1				.byte $03,$42,$52,$c1                  ; $b6 bra
>43da	03 42 52 cb				.byte $03,$42,$52,$cb                  ; $b7 brk
>43de	03 50 48 d0				.byte $03,$50,$48,$d0                  ; $b8 php
>43e2	03 43 4c c3				.byte $03,$43,$4c,$c3                  ; $b9 clc
>43e6	03 50 4c d0				.byte $03,$50,$4c,$d0                  ; $ba plp
>43ea	03 53 45 c3				.byte $03,$53,$45,$c3                  ; $bb sec
>43ee	03 52 54 c9				.byte $03,$52,$54,$c9                  ; $bc rti
>43f2	03 50 48 c1				.byte $03,$50,$48,$c1                  ; $bd pha
>43f6	03 43 4c c9				.byte $03,$43,$4c,$c9                  ; $be cli
>43fa	03 50 48 d9				.byte $03,$50,$48,$d9                  ; $bf phy
>43fe	03 52 54 d3				.byte $03,$52,$54,$d3                  ; $c0 rts
>4402	03 50 4c c1				.byte $03,$50,$4c,$c1                  ; $c1 pla
>4406	03 53 45 c9				.byte $03,$53,$45,$c9                  ; $c2 sei
>440a	03 50 4c d9				.byte $03,$50,$4c,$d9                  ; $c3 ply
>440e	03 44 45 d9				.byte $03,$44,$45,$d9                  ; $c4 dey
>4412	03 54 58 c1				.byte $03,$54,$58,$c1                  ; $c5 txa
>4416	03 54 59 c1				.byte $03,$54,$59,$c1                  ; $c6 tya
>441a	03 54 58 d3				.byte $03,$54,$58,$d3                  ; $c7 txs
>441e	03 54 41 d9				.byte $03,$54,$41,$d9                  ; $c8 tay
>4422	03 54 41 d8				.byte $03,$54,$41,$d8                  ; $c9 tax
>4426	03 43 4c d6				.byte $03,$43,$4c,$d6                  ; $ca clv
>442a	03 54 53 d8				.byte $03,$54,$53,$d8                  ; $cb tsx
>442e	03 49 4e d9				.byte $03,$49,$4e,$d9                  ; $cc iny
>4432	03 44 45 d8				.byte $03,$44,$45,$d8                  ; $cd dex
>4436	03 43 4c c4				.byte $03,$43,$4c,$c4                  ; $ce cld
>443a	03 50 48 d8				.byte $03,$50,$48,$d8                  ; $cf phx
>443e	03 49 4e d8				.byte $03,$49,$4e,$d8                  ; $d0 inx
>4442	03 4e 4f d0				.byte $03,$4e,$4f,$d0                  ; $d1 nop
>4446	03 53 45 c4				.byte $03,$53,$45,$c4                  ; $d2 sed
>444a	03 50 4c d8				.byte $03,$50,$4c,$d8                  ; $d3 plx
>444e	00					.byte $00

;******  Return to file: tokeniser/tokentext.asm


;******  Processing file: tokeniser/../generated/tokentext2.inc

.444f					Group2Text:
>444f	05 56 50 4f 4b c5			.byte $05,$56,$50,$4f,$4b,$c5          ; $86 vpoke
>4455	05 56 44 4f 4b c5			.byte $05,$56,$44,$4f,$4b,$c5          ; $87 vdoke
>445b	05 56 4c 4f 41 c4			.byte $05,$56,$4c,$4f,$41,$c4          ; $88 vload
>4461	04 4d 4f 44 c5				.byte $04,$4d,$4f,$44,$c5              ; $89 mode
>4466	07 50 41 4c 45 54 54 c5			.byte $07,$50,$41,$4c,$45,$54,$54,$c5  ; $8a palette
>446e	06 53 50 52 49 54 c5			.byte $06,$53,$50,$52,$49,$54,$c5      ; $8b sprite
>4475	03 43 4c c7				.byte $03,$43,$4c,$c7                  ; $8c clg
>4479	00					.byte $00

;******  Return to file: tokeniser/tokentext.asm


;******  Processing file: tokeniser/../generated/tokentext3.inc

.447a					Group3Text:
>447a	06 56 50 45 45 4b a8			.byte $06,$56,$50,$45,$45,$4b,$a8      ; $86 vpeek(
>4481	06 56 44 45 45 4b a8			.byte $06,$56,$44,$45,$45,$4b,$a8      ; $87 vdeek(
>4488	09 53 50 52 49 54 45 2e			.byte $09,$53,$50,$52,$49,$54,$45,$2e,$58,$a8 ; $88 sprite.x(
>4490	58 a8
>4492	09 53 50 52 49 54 45 2e			.byte $09,$53,$50,$52,$49,$54,$45,$2e,$59,$a8 ; $89 sprite.y(
>449a	59 a8
>449c	04 48 49 54 a8				.byte $04,$48,$49,$54,$a8              ; $8a hit(
>44a1	06 4a 4f 59 2e 58 a8			.byte $06,$4a,$4f,$59,$2e,$58,$a8      ; $8b joy.x(
>44a8	06 4a 4f 59 2e 59 a8			.byte $06,$4a,$4f,$59,$2e,$59,$a8      ; $8c joy.y(
>44af	06 4a 4f 59 2e 42 a8			.byte $06,$4a,$4f,$59,$2e,$42,$a8      ; $8d joy.b(
>44b6	06 43 4c 4f 43 4b a8			.byte $06,$43,$4c,$4f,$43,$4b,$a8      ; $8e clock(
>44bd	00					.byte $00

;******  Return to file: tokeniser/tokentext.asm


;******  Return to file: tokeniser/tokeniser.asm

.44be					tokeniserHandler:
.44be	7c c1 44	jmp ($44c1,x)			jmp 	(tokeniserVectors,x)
.44c1					tokeniserVectors:
>44c1	cd 44					.word _DummyControlHandler ; index 0
>44c3	81 3c					.word Detokenise           ; index 2
>44c5	75 3c					.word ListLine             ; index 4
>44c7	06 3f					.word TokTest              ; index 6
>44c9	26 3f					.word Tokenise             ; index 8
>44cb	29 3f					.word TokeniseASCIIZ       ; index 10
.44cd					_DummyControlHandler:
.44cd	60		rts			rts

;******  Return to file: basic.asm

.44ce					section_end_tokeniser:
.44ce					section_start_variable:

;******  Processing file: variable/variable.asm


;******  Processing file: variable/array/access.asm

.44ce					AccessArray:
.44ce	8a		txa				txa
.44cf	48		pha				pha
.44d0	e8		inx				inx
.44d1	20 9a 45	jsr $459a			jsr 	GetArrayDimensions 			; get the array dimensions one up from here.
.44d4	68		pla				pla
.44d5	aa		tax				tax
.44d6	b5 98		lda $98,x			lda 	esInt0,x 					; restore address to follow in temp0.
.44d8	85 2a		sta $2a				sta 	temp0
.44da	b5 a0		lda $a0,x			lda 	esInt1,x
.44dc	85 2b		sta $2b				sta 	temp0+1
.44de	8a		txa				txa
.44df	48		pha				pha
.44e0	98		tya				tya
.44e1	48		pha				pha
.44e2					_AAFollow:
.44e2	a0 00		ldy #$00			ldy 	#0
.44e4	b1 2a		lda ($2a),y			lda 	(temp0),y
.44e6	48		pha				pha
.44e7	c8		iny				iny
.44e8	b1 2a		lda ($2a),y			lda 	(temp0),y
.44ea	85 2b		sta $2b				sta 	temp0+1
.44ec	68		pla				pla
.44ed	85 2a		sta $2a				sta 	temp0
.44ef	e8		inx				inx 								; advance to next stack slot.
.44f0	a0 00		ldy #$00			ldy 	#0
.44f2	b1 2a		lda ($2a),y			lda 	(temp0),y 					; compare max index vs required index
.44f4	d5 98		cmp $98,x			cmp 	esInt0,x
.44f6	c8		iny				iny
.44f7	b1 2a		lda ($2a),y			lda 	(temp0),y 					; drop bit 7 of the size, indicates follow.
.44f9	85 2c		sta $2c				sta 	temp1 						; save the size in temp1 for later use.
.44fb	29 7f		and #$7f			and 	#$7F
.44fd	f5 a0		sbc $a0,x			sbc 	esInt1,x
.44ff	90 50		bcc $4551			bcc 	_AABadIndex 				; failed on index if max index < required.
.4501	18		clc				clc
.4502	a5 2a		lda $2a				lda 	temp0
.4504	69 02		adc #$02			adc 	#2
.4506	85 2a		sta $2a				sta 	temp0
.4508	90 02		bcc $450c			bcc 	_AANoCarry
.450a	e6 2b		inc $2b				inc 	temp0+1
.450c					_AANoCarry:
.450c	b5 98		lda $98,x			lda 	esInt0,x
.450e	85 2e		sta $2e				sta 	temp2
.4510	b5 a0		lda $a0,x			lda 	esInt1,x
.4512	85 2f		sta $2f				sta 	temp2+1
.4514	ac 10 0e	ldy $0e10			ldy 	varType
.4517	b9 f4 45	lda $45f4,y			lda 	CAActualSize-$3A,y
.451a	b4 91		ldy $91,x			ldy 	esType+1,x 					; is it top level
.451c	30 02		bmi $4520			bmi 	_AANotPointer
.451e	a9 02		lda #$02			lda 	#2 							; array of pointers is 2.
.4520					_AANotPointer:
.4520	20 9e 46	jsr $469e			jsr 	MultiplyTemp2ByA 			; multiply the index by the data size, in temp2.
.4523	18		clc				clc
.4524	a5 2a		lda $2a				lda 	temp0
.4526	65 2e		adc $2e				adc 	temp2
.4528	85 2a		sta $2a				sta 	temp0
.452a	a5 2b		lda $2b				lda 	temp0+1
.452c	65 2f		adc $2f				adc 	temp2+1
.452e	85 2b		sta $2b				sta 	temp0+1
.4530	b5 91		lda $91,x			lda 	esType+1,x
.4532	30 07		bmi $453b			bmi 	_AAUsedAllIndices
.4534	a5 2c		lda $2c				lda 	temp1 						; check if this is a pointer array e.g. there are subarrays
.4536	10 14		bpl $454c			bpl 	_AABadDepth 				; no, too many indexes.
.4538	4c e2 44	jmp $44e2			jmp 	_AAFollow 					; otherwise follow them.
.453b					_AAUsedAllIndices:
.453b	a5 2c		lda $2c				lda 	temp1 						; get original high length byte.
.453d	30 0d		bmi $454c			bmi 	_AABadDepth 				; if -ve then this is an array of pointers.
.453f	68		pla				pla
.4540	a8		tay				tay
.4541	68		pla				pla
.4542	aa		tax				tax
.4543	a5 2a		lda $2a				lda 	temp0 						; copy address of array element to stack,x
.4545	95 98		sta $98,x			sta 	esInt0,x
.4547	a5 2b		lda $2b				lda 	temp0+1
.4549	95 a0		sta $a0,x			sta 	esInt1,x
.454b	60		rts				rts
.454c					_AABadDepth:
.454c	a2 1c		ldx #$1c			ldx 	#ErrorID_ArrayDepth
.454e	20 18 15	jsr $1518		jsr	errorHandler
.4551					_AABadIndex:
.4551	a2 1b		ldx #$1b			ldx 	#ErrorID_ArrayIndex
.4553	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: variable/variable.asm


;******  Processing file: variable/array/create.asm

.0e0e					elementSize:
>0e0e							.fill	 1
.4556					CreateArray:
.4556	20 2d 47	jsr $472d			jsr 	AccessSetup 				; set up the basic stuff.
.4559	ad 10 0e	lda $0e10			lda 	varType 					; is the variable type an array
.455c	4a		lsr a				lsr 	a
.455d	90 36		bcc $4595			bcc 	CANotArray 					; no, cause an error.
.455f	20 36 48	jsr $4836			jsr 	FindVariable 				; does the variable exist already
.4562	b0 2c		bcs $4590			bcs 	CAFound 					; cannot redefine it.
.4564	20 6a 47	jsr $476a			jsr 	CreateVariable 				; create the variable entry.
.4567	a5 2a		lda $2a				lda 	temp0 						; push address of new variable entry on the stack
.4569	48		pha				pha
.456a	a5 2b		lda $2b				lda 	temp0+1
.456c	48		pha				pha
.456d	a2 00		ldx #$00			ldx 	#0
.456f	20 9a 45	jsr $459a			jsr 	GetArrayDimensions 			; get the array dimensions
.4572	a2 00		ldx #$00			ldx 	#0 							; create at level $00
.4574	20 ca 45	jsr $45ca			jsr 	CreateArrayLevel 			; level to YA
.4577	aa		tax				tax 								; level now in YX
.4578	68		pla				pla 								; get address back to temp0 to write.
.4579	85 2b		sta $2b				sta 	temp0+1
.457b	68		pla				pla
.457c	85 2a		sta $2a				sta 	temp0
.457e	98		tya				tya 								; write YX there.
.457f	a0 06		ldy #$06			ldy 	#6
.4581	91 2a		sta ($2a),y			sta 	(temp0),y
.4583	88		dey				dey
.4584	8a		txa				txa
.4585	91 2a		sta ($2a),y			sta 	(temp0),y
.4587	ac 11 0e	ldy $0e11			ldy 	varEnd 						; restore Y and exit.
.458a	60		rts				rts
.458b					CASize:
.458b	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.458d	20 18 15	jsr $1518		jsr	errorHandler
.4590					CAFound:
.4590	a2 19		ldx #$19			ldx 	#ErrorID_DupArray
.4592	20 18 15	jsr $1518		jsr	errorHandler
.4595					CANotArray:
.4595	a2 1a		ldx #$1a			ldx 	#ErrorID_NotArray
.4597	20 18 15	jsr $1518		jsr	errorHandler
.459a					GetArrayDimensions:
.459a	ad 10 0e	lda $0e10			lda 	varType 					; push variable type on the stack.
.459d	48		pha				pha
.459e	ac 11 0e	ldy $0e11			ldy 	varEnd
.45a1					_CAGetDimensions:
.45a1	8a		txa				txa 								; get the next level
.45a2	a2 0a		ldx #$0a		ldx	#10
.45a4	20 a2 39	jsr $39a2		jsr	mainHandler
.45a7	aa		tax				tax
.45a8	b5 a0		lda $a0,x			lda 	esInt1,x 					; index must be < 8192
.45aa	29 e0		and #$e0			and 	#$E0
.45ac	15 a8		ora $a8,x			ora 	esInt2,x
.45ae	15 b0		ora $b0,x			ora 	esInt3,x
.45b0	d0 d9		bne $458b			bne 	CASize
.45b2	e8		inx				inx 								; next level.
.45b3	b1 28		lda ($28),y			lda 	(codePtr),y 				; get/consume following character
.45b5	c8		iny				iny
.45b6	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; loop back if more dimensions
.45b8	f0 e7		beq $45a1			beq 	_CAGetDimensions
.45ba	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN 				; right bracket ?
.45bc	d0 cd		bne $458b			bne 	CASize
.45be	a9 ff		lda #$ff			lda 	#$FF 						; set the type past the end to $FF so we know how many
.45c0	95 90		sta $90,x			sta 	esType,x 					; dimensions there are.
.45c2	68		pla				pla 								; restore the variable type ($3A-$3F)
.45c3	8d 10 0e	sta $0e10			sta 	varType
.45c6	8c 11 0e	sty $0e11			sty 	varEnd 						; save exit Y value, after dimensions
.45c9	60		rts				rts
.45ca					CreateArrayLevel:
.45ca	ac 10 0e	ldy $0e10			ldy 	varType
.45cd	b9 f4 45	lda $45f4,y			lda 	CAActualSize-$3A,y
.45d0	8d 0e 0e	sta $0e0e			sta 	elementSize 				; get element size this level.
.45d3	b4 91		ldy $91,x			ldy 	esType+1,x 					; is it top level
.45d5	30 05		bmi $45dc			bmi 	_CANotPointer
.45d7	a9 02		lda #$02			lda 	#2 							; array of pointers is 2.
.45d9	8d 0e 0e	sta $0e0e			sta 	elementSize
.45dc					_CANotPointer:
.45dc	a5 35		lda $35				lda 	lowMemory 					; start creating at temp0, saving start on stack.
.45de	85 2a		sta $2a				sta 	temp0
.45e0	48		pha				pha
.45e1	a5 36		lda $36				lda 	lowMemory+1
.45e3	85 2b		sta $2b				sta 	temp0+1
.45e5	48		pha				pha
.45e6	20 67 46	jsr $4667			jsr 	AllocateArraySpace 			; allocate space for all array stuff at this level.
.45e9	a0 00		ldy #$00			ldy 	#0
.45eb	b5 98		lda $98,x			lda 	esInt0,x
.45ed	91 2a		sta ($2a),y			sta 	(temp0),y
.45ef	c8		iny				iny
.45f0	b5 a0		lda $a0,x			lda 	esInt1,x
.45f2	91 2a		sta ($2a),y			sta 	(temp0),y
.45f4	b5 91		lda $91,x			lda 	esType+1,x 					; do we have another level ?
.45f6	30 06		bmi $45fe			bmi 	_CALNotLast
.45f8	b1 2a		lda ($2a),y			lda 	(temp0),y 					; set bit 7, indicates an array of pointers to other levels.
.45fa	09 80		ora #$80			ora 	#$80
.45fc	91 2a		sta ($2a),y			sta 	(temp0),y
.45fe					_CALNotLast:
.45fe	a9 02		lda #$02			lda 	#2
.4600	20 24 46	jsr $4624			jsr 	_CALAddTemp0
.4603	b5 98		lda $98,x			lda 	esInt0,x 					; copy stack:01 to stack:23 so we can use it to
.4605	95 a8		sta $a8,x			sta 	esInt2,x 					; count.
.4607	b5 a0		lda $a0,x			lda 	esInt1,x
.4609	95 b0		sta $b0,x			sta 	esInt3,x
.460b					_CALClear:
.460b	20 34 46	jsr $4634			jsr 	EraseOneElement
.460e	ad 0e 0e	lda $0e0e			lda 	elementSize 				; move to next element
.4611	20 24 46	jsr $4624			jsr 	_CALAddTemp0
.4614	b5 a8		lda $a8,x			lda 	esInt2,x 					; decrement counter
.4616	d0 02		bne $461a			bne 	_CALNoBorrow
.4618	d6 b0		dec $b0,x			dec 	esInt3,x
.461a					_CALNoBorrow:
.461a	d6 a8		dec $a8,x			dec 	esInt2,x
.461c	b5 b0		lda $b0,x			lda 	esInt3,x 					; loop back if >= 0 - we need +1 because indices
.461e	10 eb		bpl $460b			bpl 	_CALClear 					; start at 0 e.g. x(10) is actually 11 array entries.
.4620	68		pla				pla 								; restore the start of this into YA.
.4621	a8		tay				tay
.4622	68		pla				pla
.4623	60		rts				rts
.4624					_CALAddTemp0:
.4624	18		clc				clc
.4625	65 2a		adc $2a				adc 	temp0
.4627	85 2a		sta $2a				sta 	temp0
.4629	90 02		bcc $462d			bcc 	_CALANoCarry
.462b	e6 2b		inc $2b				inc 	temp0+1
.462d					_CALANoCarry:
.462d	60		rts				rts
.462e					CAActualSize:
>462e	04 04						.byte 	VarISize,VarISize
>4630	02 02						.byte 	VarSSize,VarSSize
>4632	06 06						.byte 	VarFSize,VarFSize
.4634					EraseOneElement:
.4634	b5 91		lda $91,x			lda 	esType+1,x 					; is this a list of sub arrays
.4636	10 09		bpl $4641			bpl 	_EOESubArray
.4638	a0 00		ldy #$00			ldy 	#0 							; write the empty variable value out.
.463a	ad 10 0e	lda $0e10			lda 	varType
.463d	20 d4 47	jsr $47d4			jsr 	ZeroTemp0Y
.4640	60		rts				rts
.4641					_EOESubArray:
.4641	a5 2a		lda $2a				lda 	temp0 						; save temp0, these are effectively locals.
.4643	48		pha				pha
.4644	a5 2b		lda $2b				lda 	temp0+1
.4646	48		pha				pha
.4647	ad 0e 0e	lda $0e0e			lda 	elementSize 				; save element size
.464a	48		pha				pha
.464b	e8		inx				inx 								; create at next level
.464c	20 ca 45	jsr $45ca			jsr 	CreateArrayLevel
.464f	ca		dex				dex
.4650	85 32		sta $32				sta 	tempShort 					; save A
.4652	68		pla				pla  								; restore element size.
.4653	8d 0e 0e	sta $0e0e			sta 	elementSize
.4656	68		pla				pla 								; restore temp0, which is where this new array level goes.
.4657	85 2b		sta $2b				sta 	temp0+1
.4659	68		pla				pla
.465a	85 2a		sta $2a				sta 	temp0
.465c	98		tya				tya 								; store Y/A there
.465d	a0 01		ldy #$01			ldy 	#1
.465f	91 2a		sta ($2a),y			sta 	(temp0),y
.4661	a5 32		lda $32				lda 	tempShort
.4663	88		dey				dey
.4664	91 2a		sta ($2a),y			sta 	(temp0),y
.4666	60		rts				rts
.4667					AllocateArraySpace:
.4667	18		clc				clc 								; element count + 1 => temp2.
.4668	b5 98		lda $98,x			lda 	esInt0,x
.466a	69 01		adc #$01			adc 	#1
.466c	85 2e		sta $2e				sta 	temp2
.466e	b5 a0		lda $a0,x			lda 	esInt1,x
.4670	69 00		adc #$00			adc 	#0
.4672	85 2f		sta $2f				sta 	temp2+1
.4674	ad 0e 0e	lda $0e0e			lda 	elementSize 				; bytes per element
.4677	20 9e 46	jsr $469e			jsr 	MultiplyTemp2ByA 			; temp2 = (count + 1) x bytes per element.
.467a	18		clc				clc 								; add 2 for 'max element' byte.
.467b	a5 2e		lda $2e				lda 	temp2
.467d	69 02		adc #$02			adc 	#2
.467f	85 2e		sta $2e				sta 	temp2
.4681	90 02		bcc $4685			bcc 	_AASNoCarry
.4683	e6 2f		inc $2f				inc 	temp2+1
.4685					_AASNoCarry:
.4685	18		clc				clc 								; add to low memory, allocating space.
.4686	a5 35		lda $35				lda 	lowMemory
.4688	65 2e		adc $2e				adc 	temp2
.468a	85 35		sta $35				sta 	lowMemory
.468c	a5 36		lda $36				lda 	lowMemory+1
.468e	65 2f		adc $2f				adc 	temp2+1
.4690	85 36		sta $36				sta 	lowMemory+1
.4692	b0 05		bcs $4699			bcs 	_AASFail 					; out of memory as adding causes wrapround
.4694	c5 34		cmp $34				cmp 	highMemory+1 				; >= high memory pointer.
.4696	b0 01		bcs $4699			bcs 	_AASFail
.4698	60		rts				rts
.4699					_AASFail:
.4699	a2 22		ldx #$22			ldx 	#ErrorID_Memory
.469b	20 18 15	jsr $1518		jsr	errorHandler
.469e					MultiplyTemp2ByA:
.469e	48		pha				pha
.469f	a5 2e		lda $2e				lda 	temp2 						; copy temp2 to temp3.
.46a1	85 30		sta $30				sta 	temp3
.46a3	a5 2f		lda $2f				lda 	temp2+1
.46a5	85 31		sta $31				sta 	temp3+1
.46a7	68		pla				pla
.46a8	06 2e		asl $2e				asl 	temp2 						; double it.
.46aa	26 2f		rol $2f				rol 	temp2+1
.46ac	c9 02		cmp #$02			cmp 	#2 							; if x 2 then exit.
.46ae	f0 15		beq $46c5			beq 	_MTBAExit
.46b0	c9 06		cmp #$06			cmp 	#6 							; if x 6 then add temp3 to temp2
.46b2	d0 0d		bne $46c1			bne 	_MTBANotFloat
.46b4	18		clc				clc 								; so this will make it x 3
.46b5	a5 2e		lda $2e				lda 	temp2
.46b7	65 30		adc $30				adc 	temp3
.46b9	85 2e		sta $2e				sta 	temp2
.46bb	a5 2f		lda $2f				lda 	temp2+1
.46bd	65 31		adc $31				adc 	temp3+1
.46bf	85 2f		sta $2f				sta 	temp2+1
.46c1					_MTBANotFloat:
.46c1	06 2e		asl $2e				asl 	temp2 						; double it.
.46c3	26 2f		rol $2f				rol 	temp2+1
.46c5					_MTBAExit:
.46c5	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/variable/access.asm

.0e0f					varHash:
>0e0f							.fill	1
.0e10					varType:
>0e10							.fill 	1
.0e11					varEnd:
>0e11							.fill 	1
.003b					hashList:
>003b							.fill 	2
.46c6					AccessVariable:
.46c6	aa		tax				tax 								; stack in X
.46c7	c8		iny				iny									; look at second character
.46c8	b1 28		lda ($28),y			lda 	(codePtr),y
.46ca	88		dey				dey
.46cb	c9 3a		cmp #$3a			cmp 	#TYPE_INT 					; is it the integer marker ($3A)
.46cd	d0 15		bne $46e4			bne 	_AVLong 					; no, always use the hash tables.
.46cf	b1 28		lda ($28),y			lda 	(codePtr),y 				; this is the 6 bit ASCII of A-Z 1-26
.46d1	38		sec				sec 	 							; make it 0-25
.46d2	e9 01		sbc #$01			sbc 	#1
.46d4	0a		asl a				asl 	a 							; x 4 as 4 bytes / variable.
.46d5	0a		asl a				asl 	a
.46d6	95 98		sta $98,x			sta 	esInt0,x
.46d8	a9 0a		lda #$0a			lda 	#SingleLetterVar >> 8 		; make it an address
.46da	95 a0		sta $a0,x			sta 	esInt1,x
.46dc	a9 80		lda #$80			lda 	#$80 						; type is an integer reference.
.46de	95 90		sta $90,x			sta 	esType,x
.46e0	c8		iny				iny 								; skip over the variable reference in the code.
.46e1	c8		iny				iny  								; (1 letter, 1 type)
.46e2	8a		txa				txa 								; stack in A to return.
.46e3	60		rts				rts
.46e4					_AVLong:
.46e4	8a		txa				txa
.46e5	48		pha				pha
.46e6	20 2d 47	jsr $472d			jsr 	AccessSetup 				; set up the basic information we need for later
.46e9	20 36 48	jsr $4836			jsr 	FindVariable 				; does the variable exist already ?
.46ec	b0 0e		bcs $46fc			bcs 	_AVFound 					; yes, then its found
.46ee	ad 10 0e	lda $0e10			lda 	varType 					; otherwise, is the variable type an array
.46f1	4a		lsr a				lsr 	a
.46f2	90 05		bcc $46f9			bcc 	_AVCanCreate 				; if not, we can autocreate
.46f4	a2 15		ldx #$15			ldx 	#ErrorID_noauto
.46f6	20 18 15	jsr $1518		jsr	errorHandler
.46f9					_AVCanCreate:
.46f9	20 6a 47	jsr $476a			jsr 	CreateVariable 				; variable does not exist, create it.
.46fc					_AVFound:
.46fc	68		pla				pla
.46fd	aa		tax				tax
.46fe	18		clc				clc 								; copy temp0 (variable record address)
.46ff	a5 2a		lda $2a				lda 	temp0 						; +5 (to point to the data)
.4701	69 05		adc #$05			adc 	#5 							; (first 5 bytes are link, name, hash)
.4703	95 98		sta $98,x			sta 	esInt0,x
.4705	a5 2b		lda $2b				lda 	temp0+1
.4707	69 00		adc #$00			adc 	#0
.4709	95 a0		sta $a0,x			sta 	esInt1,x
.470b	a9 00		lda #$00			lda 	#0
.470d	95 a8		sta $a8,x			sta 	esInt2,x
.470f	95 b0		sta $b0,x			sta 	esInt3,x
.4711	ac 10 0e	ldy $0e10			ldy 	varType 					; get the type ID from the type.
.4714	b9 ed 46	lda $46ed,y			lda 	_AVTypeTable-$3A,y 			; e.g. a reference to int/float/string.
.4717	95 90		sta $90,x			sta 	esType,x
.4719	ac 11 0e	ldy $0e11			ldy 	varEnd 						; restore Y
.471c	ad 10 0e	lda $0e10			lda 	VarType 					; get variable type, put LSB into C
.471f	4a		lsr a				lsr 	a
.4720	90 03		bcc $4725			bcc 	_AVNotArray 				; if carry set,it is an array variable.
.4722	20 ce 44	jsr $44ce			jsr 	AccessArray 				; array lookup. if LSB was set.
.4725					_AVNotArray:
.4725	8a		txa				txa 								; return stack in A and return
.4726	60		rts				rts
.4727					_AVTypeTable:
>4727	80 80						.byte 	$80,$80						; integer
>4729	c0 c0						.byte 	$C0,$C0 					; string
>472b	81 81						.byte 	$81,$81 					; float
.472d					AccessSetup:
.472d	a9 00		lda #$00			lda 	#0 							; zero the hash byte.
.472f	8d 0f 0e	sta $0e0f			sta 	varHash
.4732	98		tya				tya
.4733	48		pha				pha
.4734	b1 28		lda ($28),y	_ASLoop:lda 	(codePtr),y					; get next identifier character
.4736	c9 3a		cmp #$3a			cmp 	#$3A 						; is it 3A-3F which end all identifiers ?
.4738	b0 0b		bcs $4745			bcs 	_ASComplete
.473a	18		clc				clc 								; add to the hash. Might improve this.
.473b	6d 0f 0e	adc $0e0f			adc 	varHash
.473e	8d 0f 0e	sta $0e0f			sta 	varHash
.4741	c8		iny				iny 								; next character
.4742	4c 34 47	jmp $4734			jmp 	_ASLoop
.4745					_ASComplete:
.4745	8d 10 0e	sta $0e10			sta 	varType 					; save variable type byte
.4748	c8		iny				iny
.4749	8c 11 0e	sty $0e11			sty 	varEnd 						; save the ending position.
.474c	38		sec				sec 								; convert type byte from $3A-$3F to 0..5
.474d	e9 3a		sbc #$3a			sbc 	#$3A
.474f	0a		asl a				asl 	a 							; multiply by hashTableSize (8 in this case)
.4750	0a		asl a				asl 	a
.4751	0a		asl a				asl 	a
.4752	0a		asl a				asl 	a 							; 2 bytes/word
.4753	85 2a		sta $2a				sta 	temp0 						; this is the offset to the start of the table.
.4755	ad 0f 0e	lda $0e0f			lda 	varHash 					; get hash
.4758	29 07		and #$07			and 	#(hashTableSize-1)			; force into range (for 8,0..7)
.475a	0a		asl a				asl  	a 							; x 2 (for word) and clear carry
.475b	65 2a		adc $2a				adc 	temp0 						; now offset from the start of the hash table.
.475d	69 68		adc #$68			adc 	#hashTables & $FF 			; add to hash table base address
.475f	85 3b		sta $3b				sta 	hashList 					; making hashLists point to the head of the link list.
.4761	a9 0a		lda #$0a			lda 	#hashTables >> 8
.4763	69 00		adc #$00			adc 	#0
.4765	85 3c		sta $3c				sta 	hashList+1
.4767	68		pla				pla
.4768	a8		tay				tay
.4769	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/variable/create.asm

.476a					CreateVariable:
.476a	98		tya				tya 								; push Y on the stack twice.
.476b	48		pha				pha									; position in code of the new variable.
.476c	48		pha				pha
.476d	ae 10 0e	ldx $0e10			ldx 	varType 					; get var type 0-5 from the var type
.4770	bd 94 47	lda $4794,x			lda		_CVSize-$3A,x 				; the bytes required for this new variable.
.4773	48		pha				pha 								; save length
.4774	a5 35		lda $35				lda 	lowMemory 					; set low Memory ptr to temp0
.4776	85 2a		sta $2a				sta 	temp0 						; (address of the new variable)
.4778	a5 36		lda $36				lda 	lowMemory+1
.477a	85 2b		sta $2b				sta 	temp0+1
.477c	68		pla				pla 								; get length
.477d	18		clc				clc 								; add to low memory.
.477e	65 35		adc $35				adc 	lowMemory
.4780	85 35		sta $35				sta 	lowMemory
.4782	90 08		bcc $478c			bcc 	_CVNoCarry
.4784	e6 36		inc $36				inc 	lowMemory+1
.4786	a5 36		lda $36				lda 	lowMemory+1 				; check out of memory.
.4788	c5 34		cmp $34				cmp 	highMemory+1
.478a	b0 3d		bcs $47c9			bcs 	_CVMemory
.478c					_CVNoCarry:
.478c	ad 0f 0e	lda $0e0f			lda 	varHash 					; store hash at offset 4.
.478f	a0 04		ldy #$04			ldy 	#4
.4791	91 2a		sta ($2a),y			sta 	(temp0),y
.4793	68		pla				pla 								; offset, work out where the variable name is.
.4794	18		clc				clc
.4795	65 28		adc $28				adc 	codePtr
.4797	a0 02		ldy #$02			ldy 	#2 							; copy that into slots 2 + 3.
.4799	91 2a		sta ($2a),y			sta 	(temp0),y
.479b	a5 29		lda $29				lda 	codePtr+1
.479d	69 00		adc #$00			adc 	#0
.479f	c8		iny				iny
.47a0	91 2a		sta ($2a),y			sta 	(temp0),y
.47a2	cd c9 0a	cmp $0ac9			cmp 	basePage+1 					; compare against the program base.
.47a5	b0 03		bcs $47aa			bcs 	_CVNotImmediate
.47a7	20 0c 48	jsr $480c			jsr 	CloneVariableName 			; we need to clone the variable name (immediate mode)
.47aa					_CVNotImmediate:
.47aa	a0 00		ldy #$00			ldy 	#0 							; copy current hash pointer in link
.47ac	b1 3b		lda ($3b),y			lda 	(hashList),y 				; so we're inserting it in the front of a linked list
.47ae	91 2a		sta ($2a),y			sta 	(temp0),y
.47b0	c8		iny				iny
.47b1	b1 3b		lda ($3b),y			lda 	(hashList),y
.47b3	91 2a		sta ($2a),y			sta 	(temp0),y
.47b5	a5 2b		lda $2b				lda 	temp0+1 					; set new link
.47b7	91 3b		sta ($3b),y			sta 	(hashList),y
.47b9	88		dey				dey
.47ba	a5 2a		lda $2a				lda 	temp0
.47bc	91 3b		sta ($3b),y			sta 	(hashList),y
.47be	ad 10 0e	lda $0e10			lda 	varType 					; type in A
.47c1	a0 05		ldy #$05			ldy 	#5 							; offset in Y
.47c3	20 d4 47	jsr $47d4			jsr 	ZeroTemp0Y 					; zero (temp0),y with whatever type.
.47c6	68		pla				pla
.47c7	a8		tay				tay
.47c8	60		rts				rts
.47c9					_CVMemory:
.47c9	a2 22		ldx #$22			ldx 	#ErrorID_Memory
.47cb	20 18 15	jsr $1518		jsr	errorHandler
>47ce	09 07				_CVSize:.byte 	VarHSize+VarISize,VarHSize+VarASize 					; <storage for integer>
>47d0	07 07						.byte 	VarHSize+VarSSize,VarHSize+VarASize 					; <storage for string>
>47d2	0b 07						.byte 	VarHSize+VarFSize,VarHSize+VarASize 					; <storage for float>
.47d4					ZeroTemp0Y:
.47d4	4a		lsr a				lsr 	a 							; bit 0 in carry
.47d5	0a		asl a				asl 	a
.47d6	b0 19		bcs $47f1			bcs 	_ZTExit 					; we don't initialise arrays.
.47d8	c9 3c		cmp #$3c			cmp 	#$3C 						; check string
.47da	f0 16		beq $47f2			beq 	_ZTWriteNullString 			; write "" string
.47dc	c9 3e		cmp #$3e			cmp 	#$3E 						; check float
.47de	f0 22		beq $4802			beq 	_ZTWriteFloat
.47e0	98		tya				tya
.47e1	48		pha				pha
.47e2	a9 00		lda #$00			lda 	#0
.47e4	91 2a		sta ($2a),y			sta 	(temp0),y
.47e6	c8		iny				iny
.47e7	91 2a		sta ($2a),y			sta 	(temp0),y
.47e9	c8		iny				iny
.47ea	91 2a		sta ($2a),y			sta 	(temp0),y
.47ec	c8		iny				iny
.47ed	91 2a		sta ($2a),y			sta 	(temp0),y
.47ef	68		pla				pla
.47f0	a8		tay				tay
.47f1					_ZTExit:
.47f1	60		rts				rts
.47f2					_ZTWriteNullString:
.47f2	a9 00		lda #$00			lda 	#0 							; put a reference to null string as the default value.
.47f4	8d ce 0a	sta $0ace			sta 	NullString
.47f7	a9 ce		lda #$ce			lda 	#NullString & $FF
.47f9	91 2a		sta ($2a),y			sta 	(temp0),y
.47fb	a9 0a		lda #$0a			lda 	#NullString >> 8
.47fd	c8		iny				iny
.47fe	91 2a		sta ($2a),y			sta 	(temp0),y
.4800	88		dey				dey
.4801	60		rts				rts
.4802					_ZTWriteFloat:
.4802	8a		txa				txa
.4803	48		pha				pha
.4804	a2 20		ldx #$20		ldx	#32
.4806	20 1c 21	jsr $211c		jsr	floatingpointHandler
.4809	68		pla				pla
.480a	aa		tax				tax
.480b	60		rts				rts
.480c					CloneVariableName:
.480c	a0 02		ldy #$02			ldy 	#2 							; copy vname address to temp2
.480e	b1 2a		lda ($2a),y			lda 	(temp0),y
.4810	85 2e		sta $2e				sta 	temp2
.4812	c8		iny				iny
.4813	b1 2a		lda ($2a),y			lda 	(temp0),y
.4815	85 2f		sta $2f				sta 	temp2+1
.4817	a5 36		lda $36				lda 	lowMemory+1 				; copy lowMemory address to (temp0),2/3
.4819	91 2a		sta ($2a),y			sta 	(temp0),y
.481b	88		dey				dey
.481c	a5 35		lda $35				lda 	lowMemory
.481e	91 2a		sta ($2a),y			sta 	(temp0),y
.4820	a0 00		ldy #$00			ldy 	#0 							; copy data from (temp2) to (lowMemory)
.4822					_CVNCopy:
.4822	b1 2e		lda ($2e),y			lda		(temp2),y
.4824	91 35		sta ($35),y			sta 	(lowMemory),y
.4826	c8		iny				iny
.4827	c9 3a		cmp #$3a			cmp 	#$3A 						; until the whole name has been copied.
.4829	90 f7		bcc $4822			bcc 	_CVNCopy
.482b	98		tya				tya 								; add Y to low memory
.482c	18		clc				clc
.482d	65 35		adc $35				adc 	lowMemory
.482f	85 35		sta $35				sta 	lowMemory
.4831	90 02		bcc $4835			bcc 	_CVNNoCarry
.4833	e6 36		inc $36				inc 	lowMemory+1
.4835					_CVNNoCarry:
.4835	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/variable/find.asm

.4836					FindVariable:
.4836	98		tya				tya
.4837	48		pha				pha
.4838	98		tya				tya 								; point temp2 to the actual name
.4839	18		clc				clc 								; in memory of the variable being created
.483a	65 28		adc $28				adc 	codePtr
.483c	85 2e		sta $2e				sta 	temp2
.483e	a5 29		lda $29				lda 	codePtr+1
.4840	69 00		adc #$00			adc 	#0
.4842	85 2f		sta $2f				sta 	temp2+1
.4844	a0 00		ldy #$00			ldy 	#0
.4846	a5 3b		lda $3b				lda 	hashList 					; copy hashlist to temp0
.4848	85 2a		sta $2a				sta 	temp0
.484a	a5 3c		lda $3c				lda 	hashList+1
.484c	85 2b		sta $2b				sta 	temp0+1
.484e	a0 01		ldy #$01	_FVNext:ldy 	#1 							; get MSB
.4850	b1 2a		lda ($2a),y			lda 	(temp0),y
.4852	f0 2c		beq $4880			beq 	_FVFail
.4854	aa		tax				tax
.4855	88		dey				dey		 							; get LSB
.4856	b1 2a		lda ($2a),y			lda 	(temp0),y
.4858	85 2a		sta $2a				sta 	temp0 						; update pointer.
.485a	86 2b		stx $2b				stx 	temp0+1
.485c	a0 04		ldy #$04			ldy 	#4 							; check hashes match
.485e	b1 2a		lda ($2a),y			lda 	(temp0),y
.4860	cd 0f 0e	cmp $0e0f			cmp 	varHash
.4863	d0 e9		bne $484e			bne 	_FVNext 					; if not, no point in checking the name.
.4865	88		dey				dey 								; copy name pointer (+2,+3) to temp1.
.4866	b1 2a		lda ($2a),y			lda 	(temp0),y
.4868	85 2d		sta $2d				sta 	temp1+1
.486a	88		dey				dey
.486b	b1 2a		lda ($2a),y			lda 	(temp0),y
.486d	85 2c		sta $2c				sta 	temp1
.486f	a0 00		ldy #$00			ldy 	#0
.4871					_FVCheck:
.4871	b1 2c		lda ($2c),y			lda 	(temp1),y 					; compare names
.4873	d1 2e		cmp ($2e),y			cmp 	(temp2),y
.4875	d0 d7		bne $484e			bne 	_FVNext		 				; fail if different.
.4877	c8		iny				iny
.4878	c9 3a		cmp #$3a			cmp 	#$3A 						; until reached the end marker.
.487a	90 f5		bcc $4871			bcc 	_FVCheck
.487c	68		pla				pla
.487d	a8		tay				tay
.487e	38		sec				sec
.487f	60		rts				rts
.4880					_FVFail:
.4880	68		pla				pla
.4881	a8		tay				tay
.4882	18		clc				clc
.4883	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/variable/reset.asm

.4884					HashTableReset:
.4884	a2 60		ldx #$60			ldx 	#6*2*hashTableSize			; 6 types, 2 bytes per table entry.
.4886	a9 00		lda #$00			lda 	#0
.4888					_HTRClear:
.4888	9d 67 0a	sta $0a67,x			sta 	hashTables-1,x
.488b	ca		dex				dex
.488c	d0 fa		bne $4888			bne 	_HTRClear
.488e	60		rts				rts

;******  Return to file: variable/variable.asm

.488f					variableHandler:
.488f	7c 92 48	jmp ($4892,x)			jmp 	(variableVectors,x)
.4892					variableVectors:
>4892	9a 48					.word _DummyControlHandler ; index 0
>4894	c6 46					.word AccessVariable       ; index 2
>4896	56 45					.word CreateArray          ; index 4
>4898	84 48					.word HashTableReset       ; index 6
.489a					_DummyControlHandler:
.489a	60		rts			rts

;******  Return to file: basic.asm

.489b					section_end_variable:
.489b					section_start_footer:

;******  Processing file: footer/footer.asm


;******  Processing file: footer/99end.asm

.003d					endZeroPage:
.0e12					endStorage:
>489b							.align 	256
.4900					programMemory:
>48ff	ff						.byte 	$FF

;******  Return to file: footer/footer.asm


;******  Return to file: basic.asm

.4900					section_end_footer:

;******  End of listing
