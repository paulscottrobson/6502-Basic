
; 64tass Turbo Assembler Macro V1.55.2200 listing file
; 64tass -D autorun=1 -D coldstartnew=0 -Walias -Wmacro-prefix -Wall -q -c -L ../source/bin/basic.lst -l ../source/bin/basic.lbl -Wall -o ../source/bin/stub.prg basic.asm
; Thu Mar 25 16:27:14 2021

;Offset	;Hex		;Monitor	;Source

;******  Command line definitions

=1					autorun=1
=0					coldstartnew=0

;******  Processing input file: basic.asm


;******  Processing file: header/01common.inc


;******  Processing file: header/../generated/installed.inc

=1					installed_header = 1
=1					installed_main = 1
=1					installed_variable = 1
=1					installed_assembler = 1
=1					installed_error = 1
=1					installed_extension = 1
=1					installed_string = 1
=1					installed_device = 1
=0					installed_floatingpoint = 0
=1					installed_interaction = 1
=1					installed_tokeniser = 1
=1					installed_footer = 1

;******  Return to file: header/01common.inc

=$1000					CodeStart = $1000
=$800					MemoryStorage = $800
=$9f00					EndOfMemory = $9F00
=$28					ZeroPageStorage = $28
=$48					StackAddress = $48
=8					StackSize = 8
=2					retStackSizePages = 2
=8					hashTableSize = 8			; if this changes, the calculation is AccessSetup has to match it.
="G"					markerGOSUB = 'G'
="R"					markerREPEAT = 'R'
="F"					markerFOR = 'F'
="W"					markerWHILE = 'W'
="P"					markerPROC = 'P'
="$"					markerSTRING = '$'
="#"					markerFLOAT = '#'
="%"					markerINT = '%'
=5					VarHSize = 5 								; header (2 link, 2 name, 1 hash)
=2					VarASize = 2 								; array [address of first level]
=4					VarISize = 4 								; integer (32 bit)
=6					VarFSize = 6 								; float (4 mantissa, 1 exponent 1 sign/zero)
=2					VarSSize = 2 								; address (2 bytes)

;******  Return to file: basic.asm


;******  Processing file: header/02macros.inc


;******  Return to file: basic.asm


;******  Processing file: header/03data.inc

>0028					codePtr:.fill 	2							; (codePtr),y points to code.
>002a					temp0: 	.fill 	2							; working variables.
>002c					temp1: 	.fill 	2
>002e					temp2: 	.fill 	2
>0030					temp3: 	.fill 	2
.0032					tempshort:
>0032							.fill 	1
.0033					highMemory:
>0033							.fill 	2
.0035					lowMemory:
>0035							.fill 	2
>0800							.align	256
.0800					returnStack:
>0800							.fill 	retStackSizePages * 256
=512					retStackSize = retStackSizePages * 256
.0a00					SingleLetterVar:
>0a00					 		.fill 	26*4
.0a68					currentStorage:
>0048					esType:	.fill 	StackSize  					; type byte (see above)
>0050					esInt0:	.fill 	StackSize 					; integer or mantissa
>0058					esInt1:	.fill 	StackSize
>0060					esInt2:	.fill 	StackSize
>0068					esInt3:	.fill 	StackSize
>0070					esExp:	.fill 	StackSize 					; exponent ($80 = 0)
>0078					esZSign:.fill 	StackSize 					; for floating point - sign (bit 7) isZero (bit 6)
.0080					endOfStack:
=$50					esMant0 = esInt0 							; synonyms.
=$58					esMant1 = esInt1
=$60					esMant2 = esInt2
=$68					esMant3 = esInt3
.0a68					hashTables:
>0a68							.fill 	6*2*hashTableSize
.0ac8					basePage:
>0ac8							.fill 	2
.0aca					endProgram:
>0aca							.fill 	2
.0acc					endMemory:
>0acc							.fill 	2
.0ace					NullString:
>0ace							.fill 	1							; don't waste memory concreting null strings.
.0acf					convertBuffer:
>0acf							.fill 	35

;******  Processing file: header/../generated/tokenconst.inc

=$80					TOK_EOL=$80
=$81					TOK_SHIFT1=$81
=$82					TOK_SHIFT2=$82
=$83					TOK_SHIFT3=$83
=$84					TOK_FPC=$84
=$85					TOK_STR=$85
=$86					TOK_BINARYST=$86
=$99					TOK_STRUCTST=$99
=$a4					TOK_UNARYST=$a4
=$c9					TOK_TOKENS=$c9
=$86					TKW_AND                      = $86 ; and
=$87					TKW_OR                       = $87 ; or
=$88					TKW_XOR                      = $88 ; xor
=$89					TKW_GREATEREQUAL             = $89 ; >=
=$8a					TKW_LESSEQUAL                = $8a ; <=
=$8b					TKW_GREATER                  = $8b ; >
=$8c					TKW_LESS                     = $8c ; <
=$8d					TKW_EQUAL                    = $8d ; =
=$8e					TKW_LESSGREATER              = $8e ; <>
=$8f					TKW_PLUS                     = $8f ; +
=$90					TKW_MINUS                    = $90 ; -
=$91					TKW_GREATERGREATER           = $91 ; >>
=$92					TKW_LESSLESS                 = $92 ; <<
=$93					TKW_STAR                     = $93 ; *
=$94					TKW_SLASH                    = $94 ; /
=$95					TKW_MOD                      = $95 ; mod
=$96					TKW_HAT                      = $96 ; ^
=$97					TKW_PLING                    = $97 ; !
=$98					TKW_QMARK                    = $98 ; ?
=$99					TKW_REPEAT                   = $99 ; repeat
=$9a					TKW_WHILE                    = $9a ; while
=$9b					TKW_FOR                      = $9b ; for
=$9c					TKW_IF                       = $9c ; if
=$9d					TKW_DEFPROC                  = $9d ; defproc
=$9e					TKW_UNTIL                    = $9e ; until
=$9f					TKW_WEND                     = $9f ; wend
=$a0					TKW_NEXT                     = $a0 ; next
=$a1					TKW_THEN                     = $a1 ; then
=$a2					TKW_ENDIF                    = $a2 ; endif
=$a3					TKW_ENDPROC                  = $a3 ; endproc
=$a4					TKW_LPAREN                   = $a4 ; (
=$a5					TKW_LENLPAREN                = $a5 ; len(
=$a6					TKW_SGNLPAREN                = $a6 ; sgn(
=$a7					TKW_ABSLPAREN                = $a7 ; abs(
=$a8					TKW_RANDOMLPAREN             = $a8 ; random(
=$a9					TKW_PAGE                     = $a9 ; page
=$aa					TKW_TRUE                     = $aa ; true
=$ab					TKW_FALSE                    = $ab ; false
=$ac					TKW_MINLPAREN                = $ac ; min(
=$ad					TKW_MAXLPAREN                = $ad ; max(
=$ae					TKW_SYSLPAREN                = $ae ; sys(
=$af					TKW_TIMERLPAREN              = $af ; timer(
=$b0					TKW_EVENTLPAREN              = $b0 ; event(
=$b1					TKW_GETLPAREN                = $b1 ; get(
=$b2					TKW_INKEYLPAREN              = $b2 ; inkey(
=$b3					TKW_ALLOCLPAREN              = $b3 ; alloc(
=$b4					TKW_CHRDOLLARLPAREN          = $b4 ; chr$(
=$b5					TKW_LEFTDOLLARLPAREN         = $b5 ; left$(
=$b6					TKW_MIDDOLLARLPAREN          = $b6 ; mid$(
=$b7					TKW_RIGHTDOLLARLPAREN        = $b7 ; right$(
=$b8					TKW_STRDOLLARLPAREN          = $b8 ; str$(
=$b9					TKW_VALLPAREN                = $b9 ; val(
=$ba					TKW_PEEKLPAREN               = $ba ; peek(
=$bb					TKW_DEEKLPAREN               = $bb ; deek(
=$bc					TKW_LEEKLPAREN               = $bc ; leek(
=$bd					TKW_ASCLPAREN                = $bd ; asc(
=$be					TKW_INTLPAREN                = $be ; int(
=$bf					TKW_FLOATLPAREN              = $bf ; float(
=$c0					TKW_ISVALLPAREN              = $c0 ; isval(
=$c1					TKW_UPPERDOLLARLPAREN        = $c1 ; upper$(
=$c2					TKW_LOWERDOLLARLPAREN        = $c2 ; lower$(
=$c3					TKW_ATC                      = $c3 ; @
=$c4					TKW_WAVY                     = $c4 ; ~
=$c5					TKW_AMP                      = $c5 ; &
=$c6					TKW_GETDOLLARLPAREN          = $c6 ; get$(
=$c7					TKW_INKEYDOLLARLPAREN        = $c7 ; inkey$(
=$c8					TKW_MEM                      = $c8 ; mem
=$c9					TKW_RPAREN                   = $c9 ; )
=$ca					TKW_COLON                    = $ca ; :
=$cb					TKW_COMMA                    = $cb ; ,
=$cc					TKW_SEMICOLON                = $cc ; ;
=$cd					TKW_QUOTE                    = $cd ; '
=$ce					TKW_TO                       = $ce ; to
=$cf					TKW_STEP                     = $cf ; step
=$d0					TKW_PROC                     = $d0 ; proc
=$d1					TKW_LOCAL                    = $d1 ; local
=$d2					TKW_DIM                      = $d2 ; dim
=$d3					TKW_REM                      = $d3 ; rem
=$d4					TKW_LET                      = $d4 ; let
=$d5					TKW_INPUT                    = $d5 ; input
=$d6					TKW_ELSE                     = $d6 ; else
=$d7					TKW_VDU                      = $d7 ; vdu
=$d8					TKW_PRINT                    = $d8 ; print
=$d9					TKW_DATA                     = $d9 ; data
=$da					TKW_IMAGE                    = $da ; image
=$db					TKW_AT                       = $db ; at
=$dc					TKW_FLIP                     = $dc ; flip
=$dd					TKW_ASSERT                   = $dd ; assert
=$de					TKW_POKE                     = $de ; poke
=$df					TKW_DOKE                     = $df ; doke
=$e0					TKW_LOKE                     = $e0 ; loke
=$e1					TKW_INK                      = $e1 ; ink
=$e2					TKW_PAPER                    = $e2 ; paper
=$e3					TKW_CLS                      = $e3 ; cls
=$e4					TKW_LOCATE                   = $e4 ; locate
=$e5					TKW_PERIOD                   = $e5 ; .
=$e6					TKW_HASH                     = $e6 ; #
=$e7					TKW_CLEAR                    = $e7 ; clear
=$86					TKW_LOAD                     = $86 ; load
=$87					TKW_SAVE                     = $87 ; save
=$88					TKW_LIST                     = $88 ; list
=$89					TKW_NEW                      = $89 ; new
=$8a					TKW_BREAK                    = $8a ; break
=$8b					TKW_RUN                      = $8b ; run
=$8c					TKW_READ                     = $8c ; read
=$8d					TKW_RESTORE                  = $8d ; restore
=$8e					TKW_END                      = $8e ; end
=$8f					TKW_STOP                     = $8f ; stop
=$90					TKW_XEMU                     = $90 ; xemu
=$91					TKW_GOTO                     = $91 ; goto
=$92					TKW_GOSUB                    = $92 ; gosub
=$93					TKW_RETURN                   = $93 ; return
=$94					TKW_ORA                      = $94 ; ora
=$95					TKW_LPARENANDRPAREN          = $95 ; (and)
=$96					TKW_EOR                      = $96 ; eor
=$97					TKW_ADC                      = $97 ; adc
=$98					TKW_STA                      = $98 ; sta
=$99					TKW_LDA                      = $99 ; lda
=$9a					TKW_CMP                      = $9a ; cmp
=$9b					TKW_SBC                      = $9b ; sbc
=$9c					TKW_ASL                      = $9c ; asl
=$9d					TKW_ROL                      = $9d ; rol
=$9e					TKW_LSR                      = $9e ; lsr
=$9f					TKW_ROR                      = $9f ; ror
=$a0					TKW_STX                      = $a0 ; stx
=$a1					TKW_LDX                      = $a1 ; ldx
=$a2					TKW_DEC                      = $a2 ; dec
=$a3					TKW_INC                      = $a3 ; inc
=$a4					TKW_STZ                      = $a4 ; stz
=$a5					TKW_BIT                      = $a5 ; bit
=$a6					TKW_STY                      = $a6 ; sty
=$a7					TKW_LDY                      = $a7 ; ldy
=$a8					TKW_CPY                      = $a8 ; cpy
=$a9					TKW_CPX                      = $a9 ; cpx
=$aa					TKW_TSB                      = $aa ; tsb
=$ab					TKW_TRB                      = $ab ; trb
=$ac					TKW_JSR                      = $ac ; jsr
=$ad					TKW_JMP                      = $ad ; jmp
=$ae					TKW_BPL                      = $ae ; bpl
=$af					TKW_BMI                      = $af ; bmi
=$b0					TKW_BVC                      = $b0 ; bvc
=$b1					TKW_BVS                      = $b1 ; bvs
=$b2					TKW_BCC                      = $b2 ; bcc
=$b3					TKW_BCS                      = $b3 ; bcs
=$b4					TKW_BNE                      = $b4 ; bne
=$b5					TKW_BEQ                      = $b5 ; beq
=$b6					TKW_BRA                      = $b6 ; bra
=$b7					TKW_BRK                      = $b7 ; brk
=$b8					TKW_PHP                      = $b8 ; php
=$b9					TKW_CLC                      = $b9 ; clc
=$ba					TKW_PLP                      = $ba ; plp
=$bb					TKW_SEC                      = $bb ; sec
=$bc					TKW_RTI                      = $bc ; rti
=$bd					TKW_PHA                      = $bd ; pha
=$be					TKW_CLI                      = $be ; cli
=$bf					TKW_PHY                      = $bf ; phy
=$c0					TKW_RTS                      = $c0 ; rts
=$c1					TKW_PLA                      = $c1 ; pla
=$c2					TKW_SEI                      = $c2 ; sei
=$c3					TKW_PLY                      = $c3 ; ply
=$c4					TKW_DEY                      = $c4 ; dey
=$c5					TKW_TXA                      = $c5 ; txa
=$c6					TKW_TYA                      = $c6 ; tya
=$c7					TKW_TXS                      = $c7 ; txs
=$c8					TKW_TAY                      = $c8 ; tay
=$c9					TKW_TAX                      = $c9 ; tax
=$ca					TKW_CLV                      = $ca ; clv
=$cb					TKW_TSX                      = $cb ; tsx
=$cc					TKW_INY                      = $cc ; iny
=$cd					TKW_DEX                      = $cd ; dex
=$ce					TKW_CLD                      = $ce ; cld
=$cf					TKW_PHX                      = $cf ; phx
=$d0					TKW_INX                      = $d0 ; inx
=$d1					TKW_NOP                      = $d1 ; nop
=$d2					TKW_SED                      = $d2 ; sed
=$d3					TKW_PLX                      = $d3 ; plx
=$86					TKW_VPOKE                    = $86 ; vpoke
=$87					TKW_VDOKE                    = $87 ; vdoke
=$88					TKW_VLOAD                    = $88 ; vload
=$89					TKW_MODE                     = $89 ; mode
=$8a					TKW_PALETTE                  = $8a ; palette
=$8b					TKW_SPRITE                   = $8b ; sprite
=$86					TKW_VPEEKLPAREN              = $86 ; vpeek(
=$87					TKW_VDEEKLPAREN              = $87 ; vdeek(

;******  Return to file: header/03data.inc

=$3a					TYPE_INT =		($3A) 						; type bytes that end identifier.
=$3b					TYPE_INTARRAY =	($3B)
=$3c					TYPE_STR =		($3C)
=$3d					TYPE_STRARRAY =	($3D)
=$3e					TYPE_FLOAT =	($3E)
=$3f					TYPE_FLOATARRAY=($3F)

;******  Processing file: header/../generated/asmconst.inc

=$94					TKA_GROUP1 = $94
=$9c					TKA_GROUP2 = $9c
=$ae					TKA_GROUP3 = $ae
=$b7					TKA_GROUP4 = $b7
=$d4					TKA_END4 = $d4

;******  Return to file: header/03data.inc


;******  Return to file: basic.asm


;******  Processing file: header/header.inc


;******  Return to file: basic.asm


;******  Processing file: assembler/asmconst.inc

=0					AMD_IMM		= 0					; Immediate mode.
=1					AMD_ZERO 	= 1					; Zero Page
=2					AMD_ACCIMP	= 2					; Accumulator/Implied
=3					AMD_ABS 	= 3					; Absolute
=4					AMD_ZEROINDY= 4					; Zero Indirect,Y
=5					AMD_ZEROX 	= 5					; Zero Page,X
=6					AMD_ABSY 	= 6					; Absolute,Y
=7					AMD_ABSX 	= 7					; Absolute,X
=8					AMD_ZEROIND = 8					; Zero Indirect
=9					AMD_ZEROY 	= 9					; Zero Page,Y
=10					AMD_ABSIND 	= 10				; Absolute Indirect
=11					AMD_ABSINDX	= 11				; Absolute Indirect Indexed
=12					AMD_REL		= 12				; Relative
=13					AMD_ZEROINDX= 13 				; Zero Indirect,X

;******  Return to file: basic.asm


;******  Processing file: assembler/assembler.inc


;******  Return to file: basic.asm


;******  Processing file: device/device.inc


;******  Return to file: basic.asm


;******  Processing file: error/error.inc


;******  Return to file: basic.asm


;******  Processing file: error/errorhandler.inc


;******  Processing file: error/../generated/errorid.inc

=1					ErrorID_Missing = 1 ; Feature not Present
=2					ErrorID_Syntax = 2 ; Syntax Error
=3					ErrorID_NoModule = 3 ; Module disabled
=4					ErrorID_Assert = 4 ; Assertion failed
=5					ErrorID_DivZero = 5 ; Divide By Zero
=6					ErrorID_Stop = 6 ; Stop
=7					ErrorID_BadType = 7 ; Type Mismatch
=8					ErrorID_BadValue = 8 ; Illegal Value
=9					ErrorID_MissingRP = 9 ; Missing right bracket
=10					ErrorID_MissingComma = 10 ; Missing comma
=11					ErrorID_NoReference = 11 ; Missing reference
=12					ErrorID_LineNumber = 12 ; Line Number not found
=13					ErrorID_StrLen = 13 ; String too long
=14					ErrorID_ReturnErr = 14 ; RETURN without GOSUB
=15					ErrorID_UntilErr = 15 ; UNTIL without REPEAT
=16					ErrorID_NextErr = 16 ; NEXT without FOR
=17					ErrorID_WendErr = 17 ; WEND without WHILE
=18					ErrorID_endprocErr = 18 ; ENDPROC without PROC
=19					ErrorID_BadIndex = 19 ; Bad NEXT index
=20					ErrorID_Struct = 20 ; Structures nested wrong
=21					ErrorID_NoAuto = 21 ; Cannot create variable
=22					ErrorID_RetStack = 22 ; Return stack out of space
=23					ErrorID_NoProc = 23 ; Unknown Procedure
=24					ErrorID_Params = 24 ; Parameters do not match
=25					ErrorID_DupArray = 25 ; Array already defined
=26					ErrorID_NotArray = 26 ; DIM requires array
=27					ErrorID_ArrayIndex = 27 ; Bad array index
=28					ErrorID_ArrayDepth = 28 ; Wrong number of array indices
=29					ErrorID_DataError = 29 ; Out of data
=30					ErrorID_Tokenise = 30 ; Cannot tokenise line
=31					ErrorID_Save = 31 ; Save failed
=32					ErrorID_Load = 32 ; Load failed
=33					ErrorID_Break = 33 ; Break
=34					ErrorID_Memory = 34 ; Out of memory
=35					ErrorID_NumStack = 35 ; Expression too complex
=36					ErrorID_Assembler = 36 ; Bad Operand/Mode
=37					ErrorID_Branch = 37 ; Branch out of range
=38					ErrorID_Label = 38 ; Label changed value

;******  Return to file: error/errorhandler.inc


;******  Return to file: basic.asm


;******  Processing file: extension/extension.inc


;******  Return to file: basic.asm


;******  Processing file: extension/option_x16/x16const.inc

=64					X16MaxImages = 64 							; max # of sprite images.

;******  Return to file: basic.asm


;******  Processing file: floatingpoint/float.inc

=5					FloatEmbeddedSize = 5

;******  Return to file: basic.asm


;******  Processing file: floatingpoint/floatingpoint.inc


;******  Return to file: basic.asm


;******  Processing file: interaction/interaction.inc


;******  Return to file: basic.asm


;******  Processing file: main/main.inc


;******  Return to file: basic.asm


;******  Processing file: string/functions/memory.inc

=252					MaxStringSize = 252

;******  Return to file: basic.asm


;******  Processing file: string/string.inc


;******  Return to file: basic.asm


;******  Processing file: tokeniser/detokenise/colouring.inc

=$84					LTYLineNumber = $84
=$82					LTYPunctuation = $82
=$87					LTYIdentifier = $87
=$86					LTYConstant = $86
=$83					LTYKeyword = $83
=$81					LTYString = $81

;******  Return to file: basic.asm


;******  Processing file: tokeniser/tokeniser.inc


;******  Return to file: basic.asm


;******  Processing file: variable/variable.inc


;******  Return to file: basic.asm


;******  Processing file: footer/footer.inc


;******  Return to file: basic.asm

.1000					section_start_header:

;******  Processing file: header/header.asm


;******  Processing file: header/00start.asm

.1000					Start:
.1000	4c 0a 10	jmp $100a			jmp 	GoColdStart 				; +0 	boot BASIC
.1003	4c 58 10	jmp $1058			jmp 	GoTokTest					; +3 	run tokeniser test code.
>1006	3f 3b						.word 	TokenTableAddress
.1008							else
>1008	00 00						.word 	0
.100a					GoColdStart:
.100a	a9 00		lda #$00			lda 	#(programMemory) & $FF
.100c	8d c8 0a	sta $0ac8			sta 	basePage
.100f	a9 43		lda #$43			lda 	#(programMemory) >> 8
.1011	8d c9 0a	sta $0ac9			sta 	1+(basePage)
.1014	a9 00		lda #$00			lda 	#(endOfMemory) & $FF
.1016	8d cc 0a	sta $0acc			sta 	endMemory
.1019	a9 9f		lda #$9f			lda 	#(endOfMemory) >> 8
.101b	8d cd 0a	sta $0acd			sta 	1+(endMemory)
.101e	20 26 10	jsr $1026			jsr 	InitialiseAll 				; initialise everything.
.1021	a2 02		ldx #$02		ldx	#2
.1023	20 16 1d	jsr $1d16		jsr	interactionHandler

;******  Processing file: header/../generated/initialiseall.asm

.1026					InitialiseAll:
.1026	a9 00		lda #$00		lda #0
.1028	a2 00		ldx #$00		ldx	#0
.102a	20 b4 13	jsr $13b4		jsr	assemblerHandler
.102d	a9 00		lda #$00		lda #0
.102f	a2 00		ldx #$00		ldx	#0
.1031	20 f6 14	jsr $14f6		jsr	deviceHandler
.1034	a9 00		lda #$00		lda #0
.1036	a2 00		ldx #$00		ldx	#0
.1038	20 16 1d	jsr $1d16		jsr	interactionHandler
.103b	a9 00		lda #$00		lda #0
.103d	a2 00		ldx #$00		ldx	#0
.103f	20 b0 33	jsr $33b0		jsr	mainHandler
.1042	a9 00		lda #$00		lda #0
.1044	a2 00		ldx #$00		ldx	#0
.1046	20 6d 36	jsr $366d		jsr	stringHandler
.1049	a9 00		lda #$00		lda #0
.104b	a2 00		ldx #$00		ldx	#0
.104d	20 93 3e	jsr $3e93		jsr	tokeniserHandler
.1050	a9 00		lda #$00		lda #0
.1052	a2 00		ldx #$00		ldx	#0
.1054	20 64 42	jsr $4264		jsr	variableHandler
.1057	60		rts			rts

;******  Return to file: header/00start.asm

.1058					GoTokTest:
.1058	a2 06		ldx #$06		ldx	#6
.105a	20 93 3e	jsr $3e93		jsr	tokeniserHandler

;******  Return to file: header/header.asm


;******  Return to file: basic.asm

.105d					section_end_header:
.105d					section_start_assembler:

;******  Processing file: assembler/assembler.asm


;******  Processing file: assembler/asmoperand.asm

.105d					AsmGetOperand:
.105d	a2 00		ldx #$00			ldx 	#0 							; clear the operand.
.105f	8a		txa				txa
.1060	95 50		sta $50,x			sta 	esInt0,x
.1062	95 58		sta $58,x			sta 	esInt1,x
.1064	95 60		sta $60,x			sta 	esInt2,x
.1066	95 68		sta $68,x			sta 	esInt3,x
.1068	b1 28		lda ($28),y			lda 	(codePtr),y 				; first into X
.106a	aa		tax				tax
.106b	a9 02		lda #$02			lda 	#AMD_ACCIMP
.106d	e0 80		cpx #$80			cpx 	#TOK_EOL 					; if end of line or colon, return implied mode.
.106f	f0 41		beq $10b2			beq 	_AGOExit
.1071	e0 ca		cpx #$ca			cpx 	#TKW_COLON
.1073	f0 3d		beq $10b2			beq 	_AGOExit
.1075	c8		iny				iny 								; consume the token
.1076	a9 00		lda #$00			lda 	#AMD_IMM
.1078	e0 e6		cpx #$e6			cpx 	#TKW_HASH 					; if a hash present, then immediate mode.
.107a	f0 2d		beq $10a9			beq		_AGOEvalExit 				; with an operand.
.107c	e0 a4		cpx #$a4			cpx 	#TKW_LPAREN 				; left bracket ?
.107e	f0 40		beq $10c0			beq 	_AGOIndirect
.1080	e0 01		cpx #$01			cpx 	#$01 						; is it "A" e.g. the variable A.
.1082	d0 0b		bne $108f			bne 	_AGOZeroPage1 				; if not it is zero zero,x zero,y, unpick 1 iny
.1084	b1 28		lda ($28),y			lda 	(codePtr),y 				; get the second character & consume it
.1086	c8		iny				iny
.1087	aa		tax				tax
.1088	a9 02		lda #$02			lda 	#AMD_ACCIMP 				; and return Acc/Implied if it is just A
.108a	e0 3a		cpx #$3a			cpx 	#$3A
.108c	f0 24		beq $10b2			beq 	_AGOExit
.108e	88		dey				dey 								; unpick 2 iny
.108f					_AGOZeroPage1:
.108f	88		dey				dey
.1090	a9 00		lda #$00			lda 	#0 							; get the address into esInt0/1
.1092	a2 0a		ldx #$0a		ldx	#10
.1094	20 b0 33	jsr $33b0		jsr	mainHandler
.1097	20 ef 10	jsr $10ef			jsr 	AsmGetIndexing
.109a	a9 01		lda #$01			lda 	#AMD_ZERO
.109c	90 14		bcc $10b2			bcc 	_AGOExit
.109e	a9 05		lda #$05			lda 	#AMD_ZEROX
.10a0	e0 00		cpx #$00			cpx 	#0
.10a2	f0 0e		beq $10b2			beq 	_AGOExit
.10a4	a9 09		lda #$09			lda 	#AMD_ZEROY
.10a6	4c b2 10	jmp $10b2			jmp 	_AGOExit
.10a9					_AGOEvalExit:
.10a9	48		pha				pha
.10aa	a9 00		lda #$00			lda 	#0 							; evaluate operand in root.
.10ac	a2 0a		ldx #$0a		ldx	#10
.10ae	20 b0 33	jsr $33b0		jsr	mainHandler
.10b1	68		pla				pla
.10b2					_AGOExit:
.10b2	48		pha				pha 								; save the mode
.10b3	a5 60		lda $60				lda 	esInt2 						; check the operand is zero.
.10b5	05 68		ora $68				ora 	esInt3
.10b7	d0 02		bne $10bb			bne 	_AGOValue
.10b9	68		pla				pla
.10ba	60		rts				rts
.10bb					_AGOValue:
.10bb	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.10bd	20 18 15	jsr $1518		jsr	errorHandler
.10c0					_AGOIndirect:
.10c0	a9 00		lda #$00			lda 	#0 							; evaluate operand in root.
.10c2	a2 0a		ldx #$0a		ldx	#10
.10c4	20 b0 33	jsr $33b0		jsr	mainHandler
.10c7	b1 28		lda ($28),y			lda 	(codePtr),y 				; does ) follow ? if so might be ) or ),Y
.10c9	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.10cb	f0 11		beq $10de			beq 	_AGOIndIndY
.10cd	20 ef 10	jsr $10ef			jsr 	ASMGetIndexing 				; must be ,X)
.10d0	90 39		bcc $110b			bcc 	AGISyntax
.10d2	e0 00		cpx #$00			cpx 	#0
.10d4	d0 35		bne $110b			bne 	AGISyntax
.10d6	a2 04		ldx #$04		ldx	#4
.10d8	20 b0 33	jsr $33b0		jsr	mainHandler
.10db	a9 0d		lda #$0d			lda 	#AMD_ZEROINDX
.10dd	60		rts				rts
.10de					_AGOIndIndY:
.10de	c8		iny				iny
.10df	20 ef 10	jsr $10ef			jsr 	ASMGetIndexing 				; get indexing if any
.10e2	a9 08		lda #$08			lda 	#AMD_ZEROIND
.10e4	90 cc		bcc $10b2			bcc 	_AGOExit 					; none then exit
.10e6	e0 00		cpx #$00			cpx 	#0 							; must be ,Y
.10e8	f0 21		beq $110b			beq 	AGISyntax
.10ea	a9 04		lda #$04			lda 	#AMD_ZEROINDY
.10ec	4c b2 10	jmp $10b2			jmp 	_AGOExit
.10ef					AsmGetIndexing:
.10ef	b1 28		lda ($28),y			lda 	(codePtr),y 				; check for comma
.10f1	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.10f3	18		clc				clc
.10f4	d0 14		bne $110a			bne 	_AGIExit 					; no comma, return with CC
.10f6	c8		iny				iny 								; get what SHOULD be X or Y
.10f7	b1 28		lda ($28),y			lda 	(codePtr),y  				; read it
.10f9	38		sec				sec 								; subtract 6 bit ASCII of X
.10fa	e9 18		sbc #$18			sbc 	#"X" & $3F
.10fc	c9 02		cmp #$02			cmp 	#2 							; if unsigned >= 2 then error
.10fe	b0 0b		bcs $110b			bcs 	AGISyntax
.1100	aa		tax				tax 								; put in index
.1101	c8		iny				iny 								; get what follows that, should be the $3A marker
.1102	b1 28		lda ($28),y			lda 	(codePtr),y
.1104	c8		iny				iny
.1105	c9 3a		cmp #$3a			cmp 	#$3A
.1107	d0 02		bne $110b			bne 	AGISyntax
.1109	38		sec				sec 								; return CS and index mode in X
.110a					_AGIExit:
.110a	60		rts				rts
.110b					AGISyntax:
.110b	a2 02		ldx #$02			ldx 	#ErrorID_syntax
.110d	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: assembler/assembler.asm


;******  Processing file: assembler/asmwrite.asm

.0af2					finalOpcode:
>0af2							.fill 	1
.1110					AsmWriteInstruction:
.1110	8d f2 0a	sta $0af2			sta 	finalOpcode					; save opcode.
.1113	98		tya				tya
.1114	48		pha				pha
.1115	ad 38 0a	lda $0a38			lda 	SingleLetterVar+("O"-"A")*4	; check O
.1118	29 02		and #$02			and 	#2
.111a	f0 2d		beq $1149			beq 	_ASMWNoEcho 				; if zero then don't echo.
.111c	ad 3d 0a	lda $0a3d			lda 	SingleLetterVar+("P"-"A")*4+1 ; write address in P
.111f	20 84 11	jsr $1184			jsr 	AWIWriteHex
.1122	ad 3c 0a	lda $0a3c			lda 	SingleLetterVar+("P"-"A")*4
.1125	20 84 11	jsr $1184			jsr 	AWIWriteHex
.1128	ad f2 0a	lda $0af2			lda 	finalOpcode 				; write opcode
.112b	20 7d 11	jsr $117d			jsr 	AWIWriteHexSpace
.112e	e0 00		cpx #$00			cpx 	#0
.1130	f0 0e		beq $1140			beq 	_ASMWEchoExit
.1132	a5 50		lda $50				lda 	esInt0
.1134	20 7d 11	jsr $117d			jsr 	AWIWriteHexSpace
.1137	e0 01		cpx #$01			cpx 	#1
.1139	f0 05		beq $1140			beq 	_ASMWEchoExit
.113b	a5 58		lda $58				lda 	esInt1
.113d	20 7d 11	jsr $117d			jsr 	AWIWriteHexSpace
.1140					_ASMWEchoExit:
.1140	8a		txa				txa
.1141	48		pha				pha
.1142	a2 06		ldx #$06		ldx	#6
.1144	20 f6 14	jsr $14f6		jsr	deviceHandler
.1147	68		pla				pla
.1148	aa		tax				tax
.1149					_ASMWNoEcho:
.1149	ad f2 0a	lda $0af2			lda 	finalOpcode
.114c	20 64 11	jsr $1164			jsr 	AsmWriteByte
.114f	e0 00		cpx #$00			cpx 	#0
.1151	f0 0e		beq $1161			beq 	_ASMWExit
.1153	a5 50		lda $50				lda 	esInt0
.1155	20 64 11	jsr $1164			jsr 	AsmWriteByte
.1158	e0 01		cpx #$01			cpx 	#1
.115a	f0 05		beq $1161			beq 	_ASMWExit
.115c	a5 58		lda $58				lda 	esInt1
.115e	20 64 11	jsr $1164			jsr 	AsmWriteByte
.1161					_ASMWExit:
.1161	68		pla				pla
.1162	a8		tay				tay
.1163	60		rts				rts
.1164					AsmWriteByte:
.1164	a0 00		ldy #$00			ldy 	#0
.1166	48		pha				pha
.1167	ad 3c 0a	lda $0a3c			lda 	SingleLetterVar+("P"-"A")*4 ; copy address to temp0
.116a	85 2a		sta $2a				sta 	temp0
.116c	ad 3d 0a	lda $0a3d			lda 	SingleLetterVar+("P"-"A")*4+1
.116f	85 2b		sta $2b				sta 	temp0+1
.1171	68		pla				pla 								; write out the byte.
.1172	91 2a		sta ($2a),y			sta 	(temp0),y
.1174	ee 3c 0a	inc $0a3c			inc 	SingleLetterVar+("P"-"A")*4	; increment P
.1177	d0 03		bne $117c			bne 	_AWBNoCarry
.1179	ee 3d 0a	inc $0a3d			inc 	SingleLetterVar+("P"-"A")*4+1
.117c					_AWBNoCarry:
.117c	60		rts				rts
.117d					AWIWriteHexSpace:
.117d	48		pha				pha
.117e	a9 20		lda #$20			lda 	#" "
.1180	20 97 11	jsr $1197			jsr 	AWIPrintChar
.1183	68		pla				pla
.1184					AWIWriteHex:
.1184	48		pha				pha
.1185	4a		lsr a				lsr 	a
.1186	4a		lsr a				lsr 	a
.1187	4a		lsr a				lsr 	a
.1188	4a		lsr a				lsr 	a
.1189	20 8d 11	jsr $118d			jsr 	AWIPrintNibble
.118c	68		pla				pla
.118d					AWIPrintNibble:
.118d	29 0f		and #$0f			and 	#15
.118f	c9 0a		cmp #$0a			cmp 	#10
.1191	90 02		bcc $1195			bcc 	_AWIPNDigit
.1193	69 06		adc #$06			adc 	#6
.1195					_AWIPNDigit:
.1195	69 30		adc #$30			adc 	#48
.1197					AWIPrintChar:
.1197	85 32		sta $32				sta 	tempShort
.1199	8a		txa				txa
.119a	48		pha				pha
.119b	a5 32		lda $32				lda 	tempShort
.119d	a2 16		ldx #$16		ldx	#22
.119f	20 f6 14	jsr $14f6		jsr	deviceHandler
.11a2	68		pla				pla
.11a3	aa		tax				tax
.11a4	60		rts				rts

;******  Return to file: assembler/assembler.asm


;******  Processing file: assembler/assemblecmd.asm

.0af3					asmToken:
>0af3							.fill 	1
.0af4					asmMode:
>0af4							.fill 	1 							; esInt0/1
.0af5					asmBaseOpcode:
>0af5							.fill 	1
.11a5					AssembleOneInstruction:
.11a5	8d f3 0a	sta $0af3			sta 	asmToken 					; save the token
.11a8	aa		tax				tax
.11a9	bd 72 11	lda $1172,x			lda 	OpcodeTable-TKA_GROUP1,x 	; get the base opcode.
.11ac	8d f5 0a	sta $0af5			sta 	asmBaseOpcode
.11af	20 5d 10	jsr $105d			jsr 	AsmGetOperand 				; identify the address mode and operand where applicable.
.11b2	8d f4 0a	sta $0af4			sta 	asmMode
.11b5	a5 58		lda $58				lda 	esInt1 						; check if this is a three byte operand.
.11b7	d0 05		bne $11be			bne 	_AOIThreeBytes 				; if so, we have to use three byte
.11b9	20 d4 11	jsr $11d4			jsr 	AssembleAttempt 			; try to assemble token/mode/operand (2 bytes)
.11bc	b0 10		bcs $11ce			bcs 	_AOISuccess 				; worked ok.
.11be					_AOIThreeBytes:
.11be	ae f4 0a	ldx $0af4			ldx 	asmMode 					; convert mode to 3 byte version, where possible.
.11c1	bd f8 11	lda $11f8,x			lda 	AbsoluteVersionTable,x
.11c4	30 09		bmi $11cf			bmi 	_AOIError					; not possible, no equivalent.
.11c6	8d f4 0a	sta $0af4			sta 	asmMode
.11c9	20 d4 11	jsr $11d4			jsr 	AssembleAttempt 			; try to assemble token/mode/operand (3 bytes)
.11cc	90 01		bcc $11cf			bcc 	_AOIError 					; didn't work.
.11ce					_AOISuccess:
.11ce	60		rts				rts
.11cf					_AOIError:
.11cf	a2 24		ldx #$24			ldx 	#ErrorID_Assembler
.11d1	20 18 15	jsr $1518		jsr	errorHandler
.11d4					AssembleAttempt:
.11d4	20 dd 11	jsr $11dd			jsr 	_AADispatch 				; go to the code which dispatches to the appropriate
.11d7	b0 03		bcs $11dc			bcs 	_AAExit 					; exit if carry set, e.g. was successful
.11d9	20 87 13	jsr $1387			jsr 	AssembleSpecialCase
.11dc					_AAExit:
.11dc	60		rts				rts
.11dd					_AADispatch:
.11dd	ad f3 0a	lda $0af3			lda 	asmToken
.11e0	c9 b7		cmp #$b7			cmp 	#TKA_GROUP4
.11e2	b0 11		bcs $11f5			bcs 	_AAGroup4
.11e4	c9 ae		cmp #$ae			cmp 	#TKA_GROUP3
.11e6	b0 0a		bcs $11f2			bcs 	_AAGroup3
.11e8	c9 9c		cmp #$9c			cmp 	#TKA_GROUP2
.11ea	b0 03		bcs $11ef			bcs 	_AAGroup2
.11ec	4c cd 12	jmp $12cd			jmp 	AssembleGroup1
.11ef					_AAGroup2:
.11ef	4c 28 13	jmp $1328			jmp 	AssembleGroup2
.11f2					_AAGroup3:
.11f2	4c 49 13	jmp $1349			jmp 	AssembleGroup3
.11f5					_AAGroup4:
.11f5	4c 7d 13	jmp $137d			jmp 	AssembleGroup4
.11f8					AbsoluteVersionTable:
>11f8	ff						.byte	$FF 			; fail AMD_IMM
>11f9	03						.byte	AMD_ABS 		; absolute AMD_ZERO
>11fa	ff						.byte	$FF 			; fail AMD_ACCIMP
>11fb	ff						.byte	$FF 			; fail AMD_ABS
>11fc	ff						.byte 	$FF 			; fail AMD_ZEROINDY
>11fd	07						.byte	AMD_ABSX 		; absolute AMD_ZEROX
>11fe	ff						.byte	$FF 			; fail AMD_ABSY
>11ff	ff						.byte	$FF 			; fail AMD_ABSX
>1200	0a						.byte	AMD_ABSIND 		; absolute AMD_ZEROIND
>1201	06						.byte	AMD_ABSY 		; absolute AMD_ZEROY
>1202	ff						.byte	$FF 			; fail AMD_ABSIND
>1203	ff						.byte	$FF 			; fail AMD_ABSINDX
>1204	ff						.byte	$FF 			; fail AMD_REL
>1205	0b						.byte 	AMD_ABSINDX 	; absolute AMD_ZEROINDX

;******  Processing file: assembler/../generated/asmtables.inc

.1206					OpcodeTable:
>1206	01					.byte	$01			; $94 ora
>1207	21					.byte	$21			; $95 (and)
>1208	41					.byte	$41			; $96 eor
>1209	61					.byte	$61			; $97 adc
>120a	81					.byte	$81			; $98 sta
>120b	a1					.byte	$a1			; $99 lda
>120c	c1					.byte	$c1			; $9a cmp
>120d	e1					.byte	$e1			; $9b sbc
>120e	02					.byte	$02			; $9c asl
>120f	22					.byte	$22			; $9d rol
>1210	42					.byte	$42			; $9e lsr
>1211	62					.byte	$62			; $9f ror
>1212	82					.byte	$82			; $a0 stx
>1213	a2					.byte	$a2			; $a1 ldx
>1214	c2					.byte	$c2			; $a2 dec
>1215	e2					.byte	$e2			; $a3 inc
>1216	60					.byte	$60			; $a4 stz
>1217	20					.byte	$20			; $a5 bit
>1218	80					.byte	$80			; $a6 sty
>1219	a0					.byte	$a0			; $a7 ldy
>121a	c0					.byte	$c0			; $a8 cpy
>121b	e0					.byte	$e0			; $a9 cpx
>121c	00					.byte	$00			; $aa tsb
>121d	10					.byte	$10			; $ab trb
>121e	14					.byte	$14			; $ac jsr
>121f	40					.byte	$40			; $ad jmp
>1220	10					.byte	$10			; $ae bpl
>1221	30					.byte	$30			; $af bmi
>1222	50					.byte	$50			; $b0 bvc
>1223	70					.byte	$70			; $b1 bvs
>1224	90					.byte	$90			; $b2 bcc
>1225	b0					.byte	$b0			; $b3 bcs
>1226	d0					.byte	$d0			; $b4 bne
>1227	f0					.byte	$f0			; $b5 beq
>1228	80					.byte	$80			; $b6 bra
>1229	00					.byte	$00			; $b7 brk
>122a	08					.byte	$08			; $b8 php
>122b	18					.byte	$18			; $b9 clc
>122c	28					.byte	$28			; $ba plp
>122d	38					.byte	$38			; $bb sec
>122e	40					.byte	$40			; $bc rti
>122f	48					.byte	$48			; $bd pha
>1230	58					.byte	$58			; $be cli
>1231	5a					.byte	$5a			; $bf phy
>1232	60					.byte	$60			; $c0 rts
>1233	68					.byte	$68			; $c1 pla
>1234	78					.byte	$78			; $c2 sei
>1235	7a					.byte	$7a			; $c3 ply
>1236	88					.byte	$88			; $c4 dey
>1237	8a					.byte	$8a			; $c5 txa
>1238	98					.byte	$98			; $c6 tya
>1239	9a					.byte	$9a			; $c7 txs
>123a	a8					.byte	$a8			; $c8 tay
>123b	aa					.byte	$aa			; $c9 tax
>123c	b8					.byte	$b8			; $ca clv
>123d	ba					.byte	$ba			; $cb tsx
>123e	c8					.byte	$c8			; $cc iny
>123f	ca					.byte	$ca			; $cd dex
>1240	d8					.byte	$d8			; $ce cld
>1241	da					.byte	$da			; $cf phx
>1242	e8					.byte	$e8			; $d0 inx
>1243	ea					.byte	$ea			; $d1 nop
>1244	f8					.byte	$f8			; $d2 sed
>1245	fa					.byte	$fa			; $d3 plx
.1246					Group2OpcodeAvailability:
>1246	ae					.byte	$ae			; $9c asl $02
>1247	ae					.byte	$ae			; $9d rol $22
>1248	ae					.byte	$ae			; $9e lsr $42
>1249	ae					.byte	$ae			; $9f ror $62
>124a	0a					.byte	$0a			; $a0 stx $82
>124b	0b					.byte	$0b			; $a1 ldx $a2
>124c	aa					.byte	$aa			; $a2 dec $c2
>124d	aa					.byte	$aa			; $a3 inc $e2
>124e	22					.byte	$22			; $a4 stz $60
>124f	aa					.byte	$aa			; $a5 bit $20
>1250	2a					.byte	$2a			; $a6 sty $80
>1251	ab					.byte	$ab			; $a7 ldy $a0
>1252	2b					.byte	$2b			; $a8 cpy $c0
>1253	0b					.byte	$0b			; $a9 cpx $e0
>1254	0a					.byte	$0a			; $aa tsb $00
>1255	0a					.byte	$0a			; $ab trb $10
>1256	08					.byte	$08			; $ac jsr $14
>1257	08					.byte	$08			; $ad jmp $40
.1258					AssemblerSpecialCases:
>1258	ad 0a 6c				.byte	$ad,10,$6c		; jmp (abs)
>125b	ad 0b 7c				.byte	$ad,11,$7c		; jmp (abs,x)
>125e	a1 06 be				.byte	$a1,6,$be		; ldx abs,y
>1261	a1 09 b6				.byte	$a1,9,$b6		; ldx zp,y
>1264	a0 09 96				.byte	$a0,9,$96		; stx zp,y
>1267	a3 02 1a				.byte	$a3,2,$1a		; inc acc
>126a	a2 02 3a				.byte	$a2,2,$3a		; dec acc
>126d	a5 00 89				.byte	$a5,0,$89		; bit #
>1270	a4 03 9c				.byte	$a4,3,$9c		; stz abs
>1273	a4 07 9e				.byte	$a4,7,$9e		; stz abs,x
>1276	00					.byte	0

;******  Return to file: assembler/assemblecmd.asm


;******  Return to file: assembler/assembler.asm


;******  Processing file: assembler/assemblelabel.asm

.1277					AssembleLabel:
.1277	b1 28		lda ($28),y			lda 	(codePtr),y 				; check it's followed by a variable name.
.1279	c9 3a		cmp #$3a			cmp 	#$3A
.127b	b0 4b		bcs $12c8			bcs 	_ALSyntax
.127d	a9 00		lda #$00			lda 	#0							; get a variable name on to stack:0
.127f	a2 02		ldx #$02		ldx	#2
.1281	20 64 42	jsr $4264		jsr	variableHandler
.1284	a5 48		lda $48				lda 	esType 						; check integer reference
.1286	c9 80		cmp #$80			cmp 	#$80
.1288	d0 3e		bne $12c8			bne 	_ALSyntax
.128a	a5 50		lda $50				lda 	esInt0 						; copy that reference address to temp0
.128c	85 2a		sta $2a				sta 	temp0
.128e	a5 58		lda $58				lda 	esInt1
.1290	85 2b		sta $2b				sta 	temp0+1
.1292	98		tya				tya
.1293	48		pha				pha
.1294	ad 38 0a	lda $0a38			lda 	SingleLetterVar+("O"-"A")*4	; are we in Pass 2
.1297	4a		lsr a				lsr 	a
.1298	90 11		bcc $12ab			bcc 	_ALWrite
.129a	a0 00		ldy #$00			ldy 	#0
.129c	ad 3c 0a	lda $0a3c			lda 	SingleLetterVar+("P"-"A")*4 ; compare the value in P to the variable
.129f	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.12a1	d0 20		bne $12c3			bne 	_ALChanged
.12a3	c8		iny				iny
.12a4	ad 3d 0a	lda $0a3d			lda 	SingleLetterVar+("P"-"A")*4+1
.12a7	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.12a9	d0 18		bne $12c3			bne 	_ALChanged
.12ab					_ALWrite:
.12ab	a0 00		ldy #$00			ldy 	#0
.12ad	ad 3c 0a	lda $0a3c			lda 	SingleLetterVar+("P"-"A")*4 ; copy the value in P into the variable
.12b0	91 2a		sta ($2a),y			sta 	(temp0),y
.12b2	ad 3d 0a	lda $0a3d			lda 	SingleLetterVar+("P"-"A")*4+1
.12b5	c8		iny				iny
.12b6	91 2a		sta ($2a),y			sta 	(temp0),y
.12b8	a9 00		lda #$00			lda 	#0
.12ba	c8		iny				iny
.12bb	91 2a		sta ($2a),y			sta 	(temp0),y
.12bd	c8		iny				iny
.12be	91 2a		sta ($2a),y			sta 	(temp0),y
.12c0	68		pla				pla
.12c1	a8		tay				tay
.12c2	60		rts				rts
.12c3					_ALChanged:
.12c3	a2 26		ldx #$26			ldx 	#ErrorID_Label
.12c5	20 18 15	jsr $1518		jsr	errorHandler
.12c8					_ALSyntax:
.12c8	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.12ca	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: assembler/assembler.asm


;******  Processing file: assembler/subgroup.asm

.12cd					AssembleGroup1:
.12cd	ad f3 0a	lda $0af3			lda 	asmToken 					; firstly, we throw out STA immediate
.12d0	c9 98		cmp #$98			cmp 	#TKW_STA
.12d2	d0 07		bne $12db			bne 	_AG1NotStoreImm
.12d4	ad f4 0a	lda $0af4			lda 	asmMode
.12d7	c9 00		cmp #$00			cmp 	#AMD_IMM
.12d9	f0 2c		beq $1307			beq 	AG1ModeError
.12db					_AG1NotStoreImm:
.12db	ae f4 0a	ldx $0af4			ldx 	asmMode						; get mode into X.
.12de	bd 0c 13	lda $130c,x			lda		AMDOperandSize,X 			; get the size of the operand and push on stack
.12e1	48		pha				pha
.12e2	f0 23		beq $1307			beq 	AG1ModeError 				; if the size is zero, the mode must be Accumulator
.12e4	e0 00		cpx #$00			cpx 	#0 							; if the mode is zero, e.g. immediate
.12e6	d0 02		bne $12ea			bne 	_AG1NotImmediate
.12e8	a2 02		ldx #$02			ldx 	#2 							; then we use offset 2 here. This is how the 6502
.12ea					_AG1NotImmediate:
.12ea	e0 0d		cpx #$0d			cpx 	#AMD_ZEROINDX 				; (zero,x) uses slot 0.
.12ec	d0 02		bne $12f0			bne 	_AG1NotZX
.12ee	a2 00		ldx #$00			ldx 	#0
.12f0					_AG1NotZX:
.12f0	68		pla				pla 								; restore length
.12f1	e0 09		cpx #$09			cpx 	#9 							; anything > 8 fails.
.12f3	b0 10		bcs $1305			bcs 	AG1Fail
.12f5					AG1ReturnValue:
.12f5	85 32		sta $32				sta 	tempShort 					; save size of operand
.12f7	18		clc				clc
.12f8	bd 1a 13	lda $131a,x			lda 	AMDOffsetFromBase,X 		; get the offset for the address mode.
.12fb	6d f5 0a	adc $0af5			adc 	asmBaseOpcode 				; add the base opcode.
.12fe	a6 32		ldx $32				ldx 	tempShort 					; length in X
.1300	20 10 11	jsr $1110			jsr 	AsmWriteInstruction 		; output instruction.
.1303	38		sec				sec
.1304	60		rts				rts
.1305					AG1Fail:
.1305	18		clc				clc
.1306	60		rts				rts
.1307					AG1ModeError:
.1307	a2 24		ldx #$24			ldx 	#ErrorID_Assembler
.1309	20 18 15	jsr $1518		jsr	errorHandler
.130c					AMDOperandSize:
>130c	01 01 00 02					.byte 	1,1,0,2
>1310	01 01 02 02					.byte 	1,1,2,2
>1314	01 01 02 02					.byte 	1,1,2,2
>1318	01 01						.byte 	1,1
.131a					AMDOffsetFromBase:
>131a	00 04 08 0c					.byte 	0,4,8,12
>131e	10 14 18 1c					.byte	16,20,24,28
>1322	11 00 00 00					.byte 	17,0,0,0
>1326	00 00						.byte 	0,0
.1328					AssembleGroup2:
.1328	ad f4 0a	lda $0af4			lda 	asmMode 					; get the mode; if >= 8 cannot be a legit group 2
.132b	c9 08		cmp #$08			cmp 	#8
.132d	b0 18		bcs $1347			bcs 	_AG2Fail
.132f	85 2a		sta $2a				sta 	temp0 						; save in temp9
.1331	ae f3 0a	ldx $0af3			ldx 	asmToken					; get token in X, then get the availability flags for it
.1334	bd aa 11	lda $11aa,x			lda 	Group2OpcodeAvailability-TKA_GROUP2,x
.1337					_AG2Shift:
.1337	4a		lsr a				lsr 	a
.1338	c6 2a		dec $2a				dec 	temp0
.133a	10 fb		bpl $1337			bpl 	_AG2Shift
.133c	90 09		bcc $1347			bcc 	_AG2Fail 					; cannot do that instruction w/that opcode.
.133e	ae f4 0a	ldx $0af4			ldx  	asmMode 					; mode in X
.1341	bd 0c 13	lda $130c,x			lda		AMDOperandSize,X 			; get the size of the operand in A
.1344	4c f5 12	jmp $12f5			jmp 	AG1ReturnValue 				; and use that with Group 1's exit code
.1347					_AG2Fail:
.1347	18		clc				clc
.1348	60		rts				rts
.1349					AssembleGroup3:
.1349	ad 38 0a	lda $0a38			lda 	SingleLetterVar+("O"-"A")*4	; check bit 0 (pass) of O
.134c	4a		lsr a				lsr 	a
.134d	a9 00		lda #$00			lda 	#0 							; if clear, e.g. pass 1, use default zero.
.134f	90 21		bcc $1372			bcc 	_AG3Default
.1351	38		sec				sec	 								; calculate branch offset
.1352	a5 50		lda $50				lda		esInt0
.1354	ed 3c 0a	sbc $0a3c			sbc 	SingleLetterVar+("P"-"A")*4
.1357	aa		tax				tax
.1358	a5 58		lda $58				lda		esInt1
.135a	ed 3d 0a	sbc $0a3d			sbc 	SingleLetterVar+("P"-"A")*4+1
.135d	85 58		sta $58				sta 	esInt1
.135f	8a		txa				txa 								; add 126, now 128 too many.
.1360	18		clc				clc 								; we can use this to check the range
.1361	69 7e		adc #$7e			adc 	#126
.1363	85 50		sta $50				sta 	esInt0
.1365	90 02		bcc $1369			bcc 	_AG3NoCarry
.1367	e6 58		inc $58				inc 	esInt1
.1369					_AG3NoCarry:
.1369	a5 58		lda $58				lda 	esInt1 						; check in range.
.136b	d0 0b		bne $1378			bne 	_AG3Range
.136d	a5 50		lda $50				lda 	esInt0 						; fix up branch distance
.136f	38		sec				sec
.1370	e9 80		sbc #$80			sbc 	#128
.1372					_AG3Default:
.1372	85 50		sta $50				sta 	esInt0
.1374					_AG3ExitOk:
.1374	a2 01		ldx #$01			ldx 	#1 							; one opcode, use AG4 Code
.1376	d0 07		bne $137f			bne 	AG4Write
.1378					_AG3Range:
.1378	a2 25		ldx #$25			ldx 	#ErrorID_Branch
.137a	20 18 15	jsr $1518		jsr	errorHandler
.137d					AssembleGroup4:
.137d	a2 00		ldx #$00			ldx 	#0 							; no parameters in the opcode.
.137f					AG4Write:
.137f	ad f5 0a	lda $0af5			lda 	asmBaseOpcode				; the opcode is the opcode base.
.1382	20 10 11	jsr $1110			jsr 	AsmWriteInstruction 		; output instruction.
.1385	38		sec				sec
.1386	60		rts				rts
.1387					AssembleSpecialCase:
.1387	a2 00		ldx #$00			ldx 	#0
.1389					_ASCScan:
.1389	bd 58 12	lda $1258,x			lda 	AssemblerSpecialCases,x 	; scan token and mode for match
.138c	cd f3 0a	cmp $0af3			cmp 	asmToken
.138f	d0 08		bne $1399			bne 	_ASCNext
.1391	bd 59 12	lda $1259,x			lda 	AssemblerSpecialCases+1,x
.1394	cd f4 0a	cmp $0af4			cmp 	asmMode
.1397	f0 0a		beq $13a3			beq 	_ASCFound
.1399					_ASCNext:
.1399	e8		inx				inx									; next entry
.139a	e8		inx				inx
.139b	e8		inx				inx
.139c	bd 58 12	lda $1258,x			lda 	AssemblerSpecialCases,x 	; until table ends
.139f	d0 e8		bne $1389			bne 	_ASCScan
.13a1	18		clc				clc
.13a2	60		rts				rts
.13a3					_ASCFound:
.13a3	bd 5a 12	lda $125a,x			lda 	AssemblerSpecialCases+2,x 	; get the new opcode.
.13a6	48		pha				pha
.13a7	ae f4 0a	ldx $0af4			ldx  	asmMode 					; mode in X
.13aa	bd 0c 13	lda $130c,x			lda		AMDOperandSize,X 			; get the size of the operand in X
.13ad	aa		tax				tax
.13ae	68		pla				pla 								; opcode back
.13af	20 10 11	jsr $1110			jsr 	AsmWriteInstruction 		; output instruction.
.13b2	38		sec				sec
.13b3	60		rts				rts

;******  Return to file: assembler/assembler.asm

.13b4					assemblerHandler:
.13b4	7c b7 13	jmp ($13b7,x)			jmp 	(assemblerVectors,x)
.13b7					assemblerVectors:
>13b7	bd 13					.word _DummyControlHandler ; index 0
>13b9	a5 11					.word AssembleOneInstruction ; index 2
>13bb	77 12					.word AssembleLabel        ; index 4
.13bd					_DummyControlHandler:
.13bd	60		rts			rts

;******  Return to file: basic.asm

.13be					section_end_assembler:
.13be					section_start_device:

;******  Processing file: device/device.asm


;******  Processing file: device/option_x16/x16break.asm

.13be					X16Break:
.13be	20 e1 ff	jsr $ffe1			jsr 	$FFE1
.13c1	f0 01		beq $13c4			beq 	_IsBreak
.13c3	60		rts				rts
.13c4					_IsBreak:
.13c4	a2 21		ldx #$21			ldx 	#ErrorID_Break
.13c6	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: device/device.asm


;******  Processing file: device/option_x16/x16file.asm

.13c9					ExternSave:
.13c9	98		tya				tya
.13ca	48		pha				pha
.13cb	20 19 14	jsr $1419			jsr 	ExternGetLength 			; get length of file into A name YX
.13ce	20 bd ff	jsr $ffbd			jsr 	$FFBD 						; set name
.13d1	a9 01		lda #$01			lda 	#1
.13d3	a2 08		ldx #$08			ldx 	#8	 						; device #8
.13d5	a0 00		ldy #$00			ldy 	#0
.13d7	20 ba ff	jsr $ffba			jsr 	$FFBA 						; set LFS
.13da	a5 51		lda $51				lda 	esInt0+1 					; copy start of save address to temp0
.13dc	85 2a		sta $2a				sta 	temp0
.13de	a5 59		lda $59				lda 	esInt1+1
.13e0	85 2b		sta $2b				sta 	temp0+1
.13e2	a6 52		ldx $52				ldx 	esInt0+2 					; end address
.13e4	a4 5a		ldy $5a				ldy 	esInt1+2
.13e6	a9 2a		lda #$2a			lda 	#temp0 						; ref to start address
.13e8	20 d8 ff	jsr $ffd8			jsr 	$FFD8 						; save
.13eb	b0 03		bcs $13f0			bcs 	_ESSave
.13ed	68		pla				pla
.13ee	a8		tay				tay
.13ef	60		rts				rts
.13f0					_ESSave:
.13f0	a2 1f		ldx #$1f			ldx 	#ErrorID_Save
.13f2	20 18 15	jsr $1518		jsr	errorHandler
.13f5					ExternLoad:
.13f5	98		tya				tya
.13f6	48		pha				pha
.13f7	20 19 14	jsr $1419			jsr 	ExternGetLength 			; get length of file into A name YX
.13fa	20 bd ff	jsr $ffbd			jsr 	$FFBD 						; set name
.13fd	a9 01		lda #$01			lda 	#1
.13ff	a2 08		ldx #$08			ldx 	#8	 						; device #8
.1401	a0 00		ldy #$00			ldy 	#0
.1403	20 ba ff	jsr $ffba			jsr 	$FFBA 						; set LFS
.1406	a6 51		ldx $51				ldx 	esInt0+1 					; load address
.1408	a4 59		ldy $59				ldy 	esInt1+1
.140a	a9 00		lda #$00			lda 	#0 							; load command
.140c	20 d5 ff	jsr $ffd5			jsr 	$FFD5
.140f	b0 03		bcs $1414			bcs 	_ESLoad
.1411	68		pla				pla
.1412	a8		tay				tay
.1413	60		rts				rts
.1414					_ESLoad:
.1414	a2 20		ldx #$20			ldx 	#ErrorID_Load
.1416	20 18 15	jsr $1518		jsr	errorHandler
.1419					ExternGetLength:
.1419	a5 50		lda $50				lda 	esInt0 						; length into A.
.141b	85 2a		sta $2a				sta 	temp0
.141d	a5 58		lda $58				lda 	esInt1
.141f	85 2b		sta $2b				sta 	temp0+1
.1421	a0 00		ldy #$00			ldy 	#0
.1423	b1 2a		lda ($2a),y			lda 	(temp0),y
.1425	a6 50		ldx $50				ldx 	esInt0 						; name into YX
.1427	a4 58		ldy $58				ldy 	esInt1
.1429	e8		inx				inx 								; advance over the length pointer.
.142a	d0 01		bne $142d			bne 	_ESNoCarry
.142c	c8		iny				iny
.142d					_ESNoCarry:
.142d	60		rts				rts

;******  Return to file: device/device.asm


;******  Processing file: device/option_x16/x16io.asm

=240					MaxLineInputSize = 240
.0af6					bufferCount:
>0af6							.fill 	0
.0af6					bufferStorage:
>0af6							.fill 	MaxLineInputSize
.142e					IOControlHandler:
.142e	c9 00		cmp #$00			cmp 	#0
.1430	d0 12		bne $1444			bne		_CHExit
.1432	a9 0f		lda #$0f			lda 	#15 						; switch to upper/lower case mode
.1434	20 5d 14	jsr $145d			jsr 	IOPrintChar
.1437	a9 02		lda #$02			lda 	#2 							; green on black and clear screen
.1439	20 89 14	jsr $1489			jsr 	IOInk
.143c	a9 00		lda #$00			lda 	#0
.143e	20 9d 14	jsr $149d			jsr 	IOPaper
.1441	20 45 14	jsr $1445			jsr 	IOClearScreen
.1444					_CHExit:
.1444	60		rts				rts
.1445					IOClearScreen:
.1445	48		pha				pha
.1446	a9 93		lda #$93			lda	 	#147 						; char code $93 clears screen
.1448	20 5d 14	jsr $145d			jsr 	IOPrintChar
.144b	68		pla				pla
.144c	60		rts				rts
.144d					IONewLine:
.144d	48		pha				pha
.144e	a9 0d		lda #$0d			lda 	#13
.1450	20 5d 14	jsr $145d			jsr 	IOPrintChar
.1453	68		pla				pla
.1454	60		rts				rts
.1455					IOTab:
.1455	48		pha				pha
.1456	a9 20		lda #$20			lda 	#32
.1458	20 5d 14	jsr $145d			jsr 	IOPrintChar
.145b	68		pla				pla
.145c	60		rts				rts
.145d					IOPrintAscii:
.145d					IOPrintChar:
.145d	aa		tax				tax 								; save in X so we can save Y
.145e	5a		phy				phy
.145f	8a		txa				txa
.1460	c9 08		cmp #$08			cmp 	#8 							; make BS (8) onto CHR$(14) which is the
.1462	d0 02		bne $1466			bne 	_IOPCNotBS 					; Commodore/X16 backspace code.
.1464	a9 14		lda #$14			lda 	#$14
.1466					_IOPCNotBS:
.1466	20 d2 ff	jsr $ffd2			jsr 	$FFD2 						; CBM OS Call.
.1469	7a		ply				ply
.146a	60		rts				rts
.146b					IOInkey:
.146b	98		tya				tya
.146c	48		pha				pha
.146d	20 e4 ff	jsr $ffe4			jsr 	$FFE4
.1470	85 32		sta $32				sta 	tempShort
.1472	68		pla				pla
.1473	a8		tay				tay
.1474	a5 32		lda $32				lda 	tempShort					; no key pressed.
.1476	f0 10		beq $1488			beq 	_IOIExit
.1478	c9 0d		cmp #$0d			cmp 	#13 						; allow CR (13)
.147a	f0 0c		beq $1488			beq 	_IOIExit
.147c	c9 14		cmp #$14			cmp 	#$14 						; backspace code ($14) returns 8.
.147e	f0 06		beq $1486			beq 	_IOIBackspace
.1480	c9 20		cmp #$20			cmp 	#32 						; no other control allowed.
.1482	90 e7		bcc $146b			bcc 	IOInkey
.1484	b0 02		bcs $1488			bcs 	_IOIExit
.1486					_IOIBackspace:
.1486	a9 08		lda #$08			lda 	#8 							; return chr(8)
.1488					_IOIExit:
.1488	60		rts				rts
.1489					IOInk:
.1489	48		pha				pha
.148a	29 07		and #$07			and 	#7 							; 8 primaries
.148c	aa		tax				tax
.148d	bd 95 14	lda $1495,x			lda 	_IOColourTable,x 			; look up CBM code and print it.
.1490	20 5d 14	jsr $145d			jsr 	IOPrintChar
.1493	68		pla				pla
.1494	60		rts				rts
.1495					_IOColourTable:
>1495	90						.byte 	$90 					; 0 Black
>1496	96						.byte 	$96 					; 1 Red
>1497	1e						.byte 	$1E 					; 2 Green
>1498	9e						.byte 	$9E 					; 3 Yellow
>1499	9a						.byte 	$9A 					; 4 Blue
>149a	9c						.byte 	$9C 					; 5 Magenta
>149b	9f						.byte 	$9F 					; 6 Cyan
>149c	05						.byte 	$05 					; 7 White
.149d					IOPaper:
.149d	48		pha				pha
.149e	48		pha				pha
.149f	a9 01		lda #$01			lda 	#1 						; 1 swaps fgr/bgr, so we swap them, set fgr
.14a1	20 5d 14	jsr $145d			jsr 	IOPrintChar 			; and then swap them again.
.14a4	68		pla				pla
.14a5	20 89 14	jsr $1489			jsr 	IOInk
.14a8	a9 01		lda #$01			lda 	#1
.14aa	20 5d 14	jsr $145d			jsr 	IOPrintChar
.14ad	68		pla				pla
.14ae	60		rts				rts
.14af					IOLocate:
.14af	48		pha				pha
.14b0	a9 13		lda #$13			lda 	#$13 					; home cursor code
.14b2	20 5d 14	jsr $145d			jsr 	IOPrintChar
.14b5	a9 11		lda #$11			lda 	#$11 	 				; print Y x $11 (down)
.14b7	20 be 14	jsr $14be			jsr 	_IOLoc2
.14ba	68		pla				pla
.14bb	a8		tay				tay
.14bc	a9 1d		lda #$1d			lda 	#$1D 					; print Y x $1D (right)
.14be					_IOLoc2:
.14be	c0 00		cpy #$00			cpy 	#0
.14c0	f0 06		beq $14c8			beq 	_IOLocExit
.14c2	20 5d 14	jsr $145d			jsr 	IOPrintChar
.14c5	88		dey				dey
.14c6	d0 f6		bne $14be			bne 	_IOLoc2
.14c8					_IOLocExit:
.14c8	60		rts				rts
.14c9					IOInput:
.14c9	a9 00		lda #$00			lda 	#0
.14cb	8d f6 0a	sta $0af6			sta 	bufferCount
.14ce					_IOILoop:
.14ce	20 cf ff	jsr $ffcf			jsr 	$FFCF
.14d1	c9 0d		cmp #$0d			cmp 	#13
.14d3	f0 10		beq $14e5			beq 	_IOIExit
.14d5	ae f6 0a	ldx $0af6			ldx 	bufferCount
.14d8	e0 f0		cpx #$f0			cpx 	#MaxLineInputSize
.14da	f0 f2		beq $14ce			beq 	_IOILoop
.14dc	ee f6 0a	inc $0af6			inc 	bufferCount
.14df	9d f7 0a	sta $0af7,x			sta 	bufferStorage+1,x
.14e2	4c ce 14	jmp $14ce			jmp 	_IOILoop
.14e5					_IOIExit:
.14e5	a9 f6		lda #$f6			lda 	#(bufferCount) & $FF
.14e7	85 2a		sta $2a				sta 	temp0
.14e9	a9 0a		lda #$0a			lda 	#(bufferCount) >> 8
.14eb	85 2b		sta $2b				sta 	1+(temp0)
.14ed	60		rts				rts

;******  Return to file: device/device.asm


;******  Processing file: device/option_x16/x16timer.asm

.14ee					IOReadTimer:
.14ee	20 de ff	jsr $ffde			jsr 	$FFDE 						; reads timer into YXA so we want only YA
.14f1	48		pha				pha
.14f2	8a		txa				txa
.14f3	a8		tay				tay
.14f4	68		pla				pla
.14f5	60		rts				rts

;******  Return to file: device/device.asm

.14f6					deviceHandler:
.14f6	7c f9 14	jmp ($14f9,x)			jmp 	(deviceVectors,x)
.14f9					deviceVectors:
>14f9	2e 14					.word IOControlHandler     ; index 0
>14fb	be 13					.word X16Break             ; index 2
>14fd	45 14					.word IOClearScreen        ; index 4
>14ff	4d 14					.word IONewLine            ; index 6
>1501	89 14					.word IOInk                ; index 8
>1503	6b 14					.word IOInkey              ; index 10
>1505	c9 14					.word IOInput              ; index 12
>1507	f5 13					.word ExternLoad           ; index 14
>1509	af 14					.word IOLocate             ; index 16
>150b	9d 14					.word IOPaper              ; index 18
>150d	5d 14					.word IOPrintChar          ; index 20
>150f	5d 14					.word IOPrintAscii         ; index 22
>1511	c9 13					.word ExternSave           ; index 24
>1513	55 14					.word IOTab                ; index 26
>1515	ee 14					.word IOReadTimer          ; index 28
.1517					_DummyControlHandler:
.1517	60		rts			rts

;******  Return to file: basic.asm

.1518					section_end_device:
.1518					section_start_error:

;******  Processing file: error/error.asm


;******  Processing file: error/errorhandler.asm

.1518					ErrorHandler:
.1518	8a		txa				txa
.1519	48		pha				pha
.151a	a9 01		lda #$01			lda 	#1 							; red
.151c	a2 08		ldx #$08		ldx	#8
.151e	20 f6 14	jsr $14f6		jsr	deviceHandler
.1521	68		pla				pla
.1522	aa		tax				tax
.1523	a9 8e		lda #$8e			lda 	#(ErrorTextList) & $FF
.1525	85 2a		sta $2a				sta 	temp0
.1527	a9 15		lda #$15			lda 	#(ErrorTextList) >> 8
.1529	85 2b		sta $2b				sta 	1+(temp0)
.152b	ca		dex		_EHFind:dex									; errors start at 1
.152c	f0 10		beq $153e			beq 	_EHFound
.152e	a0 00		ldy #$00			ldy 	#0 							; goto next text message, add length + 1 to the pointer.
.1530	38		sec				sec
.1531	a5 2a		lda $2a				lda 	temp0
.1533	71 2a		adc ($2a),y			adc 	(temp0),y
.1535	85 2a		sta $2a				sta 	temp0
.1537	90 f2		bcc $152b			bcc 	_EHFind
.1539	e6 2b		inc $2b				inc 	temp0+1
.153b	4c 2b 15	jmp $152b			jmp 	_EHFind
.153e					_EHFound:
.153e	20 36 18	jsr $1836			jsr 	EHPrintAscii 				; print the string "temp0" now points to.
.1541	a0 00		ldy #$00			ldy 	#0 							; in a line, e.g. the offset to next is non zero.
.1543	b1 28		lda ($28),y			lda 	(codePtr),y
.1545	f0 39		beq $1580			beq 	_EHNoLine
.1547	a5 29		lda $29				lda 	codePtr+1 					; code running from the command line.
.1549	cd c9 0a	cmp $0ac9			cmp 	basePage+1
.154c	90 32		bcc $1580			bcc 	_EHNoLine
.154e	a9 8a		lda #$8a			lda 	#(EHAtMsg) & $FF
.1550	85 2a		sta $2a				sta 	temp0
.1552	a9 15		lda #$15			lda 	#(EHAtMsg) >> 8
.1554	85 2b		sta $2b				sta 	1+(temp0)
.1556	20 36 18	jsr $1836			jsr 	EHPrintAscii
.1559	a0 01		ldy #$01			ldy 	#1 							; set up line number in TOS
.155b	a2 00		ldx #$00			ldx 	#0
.155d	b1 28		lda ($28),y			lda 	(codePtr),y
.155f	95 50		sta $50,x			sta 	esInt0,x
.1561	c8		iny				iny
.1562	b1 28		lda ($28),y			lda 	(codePtr),y
.1564	95 58		sta $58,x			sta 	esInt1,x
.1566	a9 00		lda #$00			lda 	#0
.1568	95 60		sta $60,x			sta 	esInt2,x
.156a	95 68		sta $68,x			sta 	esInt3,x
.156c	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.156e	85 2a		sta $2a				sta 	temp0
.1570	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.1572	85 2b		sta $2b				sta 	1+(temp0)
.1574	a0 0a		ldy #$0a			ldy 	#10 						; in base 10.
.1576	a9 00		lda #$00			lda 	#0							; stack position zero.
.1578	a2 12		ldx #$12		ldx	#18
.157a	20 b0 33	jsr $33b0		jsr	mainHandler
.157d	20 36 18	jsr $1836			jsr 	EHPrintAscii
.1580					_EHNoLine:
.1580	a2 06		ldx #$06		ldx	#6
.1582	20 f6 14	jsr $14f6		jsr	deviceHandler
.1585	a2 04		ldx #$04		ldx	#4
.1587	20 16 1d	jsr $1d16		jsr	interactionHandler
.158a					EHAtMsg:
>158a	03 20 40 20					.text 	3," @ "

;******  Processing file: error/../generated/errortext.inc

.158e					ErrorTextList:
>158e	13 46 65 61 74 75 72 65			.text 19,"Feature not Present"
>1596	20 6e 6f 74 20 50 72 65 73 65 6e 74
>15a2	0c 53 79 6e 74 61 78 20			.text 12,"Syntax Error"
>15aa	45 72 72 6f 72
>15af	0f 4d 6f 64 75 6c 65 20			.text 15,"Module disabled"
>15b7	64 69 73 61 62 6c 65 64
>15bf	10 41 73 73 65 72 74 69			.text 16,"Assertion failed"
>15c7	6f 6e 20 66 61 69 6c 65 64
>15d0	0e 44 69 76 69 64 65 20			.text 14,"Divide By Zero"
>15d8	42 79 20 5a 65 72 6f
>15df	04 53 74 6f 70				.text 4,"Stop"
>15e4	0d 54 79 70 65 20 4d 69			.text 13,"Type Mismatch"
>15ec	73 6d 61 74 63 68
>15f2	0d 49 6c 6c 65 67 61 6c			.text 13,"Illegal Value"
>15fa	20 56 61 6c 75 65
>1600	15 4d 69 73 73 69 6e 67			.text 21,"Missing right bracket"
>1608	20 72 69 67 68 74 20 62 72 61 63 6b 65 74
>1616	0d 4d 69 73 73 69 6e 67			.text 13,"Missing comma"
>161e	20 63 6f 6d 6d 61
>1624	11 4d 69 73 73 69 6e 67			.text 17,"Missing reference"
>162c	20 72 65 66 65 72 65 6e 63 65
>1636	15 4c 69 6e 65 20 4e 75			.text 21,"Line Number not found"
>163e	6d 62 65 72 20 6e 6f 74 20 66 6f 75 6e 64
>164c	0f 53 74 72 69 6e 67 20			.text 15,"String too long"
>1654	74 6f 6f 20 6c 6f 6e 67
>165c	14 52 45 54 55 52 4e 20			.text 20,"RETURN without GOSUB"
>1664	77 69 74 68 6f 75 74 20 47 4f 53 55 42
>1671	14 55 4e 54 49 4c 20 77			.text 20,"UNTIL without REPEAT"
>1679	69 74 68 6f 75 74 20 52 45 50 45 41 54
>1686	10 4e 45 58 54 20 77 69			.text 16,"NEXT without FOR"
>168e	74 68 6f 75 74 20 46 4f 52
>1697	12 57 45 4e 44 20 77 69			.text 18,"WEND without WHILE"
>169f	74 68 6f 75 74 20 57 48 49 4c 45
>16aa	14 45 4e 44 50 52 4f 43			.text 20,"ENDPROC without PROC"
>16b2	20 77 69 74 68 6f 75 74 20 50 52 4f 43
>16bf	0e 42 61 64 20 4e 45 58			.text 14,"Bad NEXT index"
>16c7	54 20 69 6e 64 65 78
>16ce	17 53 74 72 75 63 74 75			.text 23,"Structures nested wrong"
>16d6	72 65 73 20 6e 65 73 74 65 64 20 77 72 6f 6e 67
>16e6	16 43 61 6e 6e 6f 74 20			.text 22,"Cannot create variable"
>16ee	63 72 65 61 74 65 20 76 61 72 69 61 62 6c 65
>16fd	19 52 65 74 75 72 6e 20			.text 25,"Return stack out of space"
>1705	73 74 61 63 6b 20 6f 75 74 20 6f 66 20 73 70 61
>1715	63 65
>1717	11 55 6e 6b 6e 6f 77 6e			.text 17,"Unknown Procedure"
>171f	20 50 72 6f 63 65 64 75 72 65
>1729	17 50 61 72 61 6d 65 74			.text 23,"Parameters do not match"
>1731	65 72 73 20 64 6f 20 6e 6f 74 20 6d 61 74 63 68
>1741	15 41 72 72 61 79 20 61			.text 21,"Array already defined"
>1749	6c 72 65 61 64 79 20 64 65 66 69 6e 65 64
>1757	12 44 49 4d 20 72 65 71			.text 18,"DIM requires array"
>175f	75 69 72 65 73 20 61 72 72 61 79
>176a	0f 42 61 64 20 61 72 72			.text 15,"Bad array index"
>1772	61 79 20 69 6e 64 65 78
>177a	1d 57 72 6f 6e 67 20 6e			.text 29,"Wrong number of array indices"
>1782	75 6d 62 65 72 20 6f 66 20 61 72 72 61 79 20 69
>1792	6e 64 69 63 65 73
>1798	0b 4f 75 74 20 6f 66 20			.text 11,"Out of data"
>17a0	64 61 74 61
>17a4	14 43 61 6e 6e 6f 74 20			.text 20,"Cannot tokenise line"
>17ac	74 6f 6b 65 6e 69 73 65 20 6c 69 6e 65
>17b9	0b 53 61 76 65 20 66 61			.text 11,"Save failed"
>17c1	69 6c 65 64
>17c5	0b 4c 6f 61 64 20 66 61			.text 11,"Load failed"
>17cd	69 6c 65 64
>17d1	05 42 72 65 61 6b			.text 5,"Break"
>17d7	0d 4f 75 74 20 6f 66 20			.text 13,"Out of memory"
>17df	6d 65 6d 6f 72 79
>17e5	16 45 78 70 72 65 73 73			.text 22,"Expression too complex"
>17ed	69 6f 6e 20 74 6f 6f 20 63 6f 6d 70 6c 65 78
>17fc	10 42 61 64 20 4f 70 65			.text 16,"Bad Operand/Mode"
>1804	72 61 6e 64 2f 4d 6f 64 65
>180d	13 42 72 61 6e 63 68 20			.text 19,"Branch out of range"
>1815	6f 75 74 20 6f 66 20 72 61 6e 67 65
>1821	13 4c 61 62 65 6c 20 63			.text 19,"Label changed value"
>1829	68 61 6e 67 65 64 20 76 61 6c 75 65
>1835	00					.byte 0

;******  Return to file: error/errorhandler.asm

.1836					EHPrintAscii:
.1836	a0 00		ldy #$00			ldy 	#0
.1838	b1 2a		lda ($2a),y			lda 	(temp0),y
.183a	aa		tax				tax
.183b	f0 0f		beq $184c			beq 	_EHPExit
.183d					_EHPLoop:
.183d	c8		iny				iny
.183e	8a		txa				txa
.183f	48		pha				pha
.1840	b1 2a		lda ($2a),y			lda 	(temp0),y
.1842	a2 16		ldx #$16		ldx	#22
.1844	20 f6 14	jsr $14f6		jsr	deviceHandler
.1847	68		pla				pla
.1848	aa		tax				tax
.1849	ca		dex				dex
.184a	d0 f1		bne $183d			bne 	_EHPLoop
.184c					_EHPExit:
.184c	60		rts				rts

;******  Return to file: error/error.asm


;******  Return to file: basic.asm

.184d					section_end_error:
.184d					section_start_extension:

;******  Processing file: extension/extension.asm


;******  Processing file: extension/extensionhandler.asm

.184d					ExtensionHandler:
.184d	c9 fe		cmp #$fe			cmp 	#$FE 						; check for force mode 0
.184f	f0 16		beq $1867			beq 	_ExtensionForce
.1851	c9 ff		cmp #$ff			cmp 	#$FF						; A = $FF command, otherwise unary function stack level.
.1853	d0 08		bne $185d			bne 	_ExtensionUnary 			; is passed in A.
.1855	b1 28		lda ($28),y			lda 	(codePtr),y 				; so this is a command, using Group 2.
.1857	c8		iny				iny
.1858	0a		asl a				asl 	a
.1859	aa		tax				tax
.185a	7c 5e 18	jmp ($185e,x)			jmp 	(Group2Vectors-12,x)
.185d					_ExtensionUnary:
.185d	48		pha				pha 								; save stack pos in A
.185e	b1 28		lda ($28),y			lda 	(codePtr),y 				; get shifted token, double into X
.1860	c8		iny				iny
.1861	0a		asl a				asl 	a
.1862	aa		tax				tax
.1863	68		pla				pla 								; restore stack pos and call group3 command.
.1864	7c 6a 18	jmp ($186a,x)			jmp 	(Group3Vectors-12,X)
.1867					_ExtensionForce:
.1867	4c 82 18	jmp $1882			jmp 	ForceMode0

;******  Processing file: extension/../generated/tokenvectors2.inc

.186a					Group2Vectors:
>186a	01 1a					.word	Command_VPoke            ; $86 vpoke
>186c	04 1a					.word	Command_VDoke            ; $87 vdoke
>186e	d9 19					.word	Command_VLoad            ; $88 vload
>1870	94 18					.word	CommandMode              ; $89 mode
>1872	3f 19					.word	CommandPalette           ; $8a palette
>1874	76 19					.word	CommandSprite            ; $8b sprite

;******  Return to file: extension/extensionhandler.asm


;******  Processing file: extension/../generated/tokenvectors3.inc

.1876					Group3Vectors:
>1876	4d 1a					.word	Command_VPeek            ; $86 vpeek(
>1878	50 1a					.word	Command_VDeek            ; $87 vdeek(

;******  Return to file: extension/extensionhandler.asm

.187a					XEvaluateInteger:
.187a	8a		txa				txa
.187b	a2 0a		ldx #$0a		ldx	#10
.187d	20 b0 33	jsr $33b0		jsr	mainHandler
.1880	aa		tax				tax
.1881	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/mode.asm

.0be6					currentMode:
>0be6							.fill 	4
.1882					ForceMode0:
.1882	a2 00		ldx #$00			ldx 	#0
.1884	86 50		stx $50				stx 	esInt0 						; in case we do it.
.1886					_FMCheck:
.1886	bd 13 19	lda $1913,x			lda 	CMModeList,x 				; do we need to switch ?
.1889	dd e6 0b	cmp $0be6,x			cmp 	currentMode,x
.188c	d0 13		bne $18a1			bne 	CMSetMode 					; different so switch.
.188e	e8		inx				inx
.188f	e0 04		cpx #$04			cpx 	#4
.1891	d0 f3		bne $1886			bne 	_FMCheck
.1893	60		rts				rts
.1894					CommandMode:
.1894	a9 00		lda #$00			lda 	#0
.1896	a2 0a		ldx #$0a		ldx	#10
.1898	20 b0 33	jsr $33b0		jsr	mainHandler
.189b	a5 68		lda $68				lda 	esInt3
.189d	29 70		and #$70			and 	#$70
.189f	d0 06		bne $18a7			bne 	CMNoExpand
.18a1					CMSetMode:
.18a1	20 f2 18	jsr $18f2			jsr 	CMExpandMode
.18a4	4c bb 18	jmp $18bb			jmp 	CMUpdateMode
.18a7					CMNoExpand:
.18a7	a5 50		lda $50				lda 	esInt0
.18a9	8d e6 0b	sta $0be6			sta 	currentMode
.18ac	a5 58		lda $58				lda 	esInt1
.18ae	8d e7 0b	sta $0be7			sta 	currentMode+1
.18b1	a5 60		lda $60				lda 	esInt2
.18b3	8d e8 0b	sta $0be8			sta 	currentMode+2
.18b6	a5 68		lda $68				lda 	esInt3
.18b8	8d e9 0b	sta $0be9			sta 	currentMode+3
.18bb					CMUpdateMode:
.18bb	a2 11		ldx #$11			ldx 	#$11
.18bd					_CMClear:
.18bd	a9 00		lda #$00			lda 	#0
.18bf	9d 29 9f	sta $9f29,x			sta 	$9F29,X
.18c2	ca		dex				dex
.18c3	10 f8		bpl $18bd			bpl 	_CMClear
.18c5	ad e9 0b	lda $0be9			lda 	currentMode+3 				; get current mode
.18c8	48		pha				pha 								; stack twice.
.18c9	48		pha				pha
.18ca	29 70		and #$70			and 	#$70 						; isolates bits 6,5,4 (sprites,L1 enable,L0 enable)
.18cc	09 01		ora #$01			ora 	#$01 						; turn the output on.
.18ce	8d 29 9f	sta $9f29			sta 	$9F29 						; write to DC_VIDEO
.18d1	68		pla				pla 								; get back
.18d2	20 17 19	jsr $1917			jsr 	CMToScale 					; convert lower 2 bits to a scale.
.18d5	8d 2a 9f	sta $9f2a			sta 	$9F2A 						; write to H-Scale
.18d8	68		pla				pla 								; get back, convert bits 2,3 to a scale.
.18d9	4a		lsr a				lsr 	a
.18da	4a		lsr a				lsr 	a
.18db	20 17 19	jsr $1917			jsr 	CMToScale 					; convert lower 2 bits to a scale.
.18de	8d 2b 9f	sta $9f2b			sta 	$9F2B
.18e1	a2 00		ldx #$00			ldx 	#0 							; this is offset from $9F2D to do L0
.18e3	ad e6 0b	lda $0be6			lda 	currentMode					; get L0 config byte
.18e6	20 22 19	jsr $1922			jsr 	CMDecodeLayer 				; and decode layer 0
.18e9	a2 07		ldx #$07			ldx 	#7 							; when we do layer 1, offset by 7 hence starts at $9F34
.18eb	ad e7 0b	lda $0be7			lda 	currentMode+1
.18ee	20 22 19	jsr $1922			jsr 	CMDecodeLayer
.18f1	60		rts				rts
.18f2					CMExpandMode:
.18f2	a5 50		lda $50				lda 	esInt0 						; get mode number
.18f4	c9 01		cmp #$01			cmp 	#(CMEndModeList-CMModeList) >> 2
.18f6	b0 16		bcs $190e			bcs 	_CMModeError
.18f8	0a		asl a				asl 	a 							; x 4 into X
.18f9	0a		asl a				asl 	a
.18fa	aa		tax				tax
.18fb	98		tya				tya
.18fc	48		pha				pha
.18fd	a0 00		ldy #$00			ldy 	#0
.18ff					_CMEMCopy:
.18ff	bd 13 19	lda $1913,x			lda 	CMModeList,x
.1902	99 e6 0b	sta $0be6,y			sta 	currentMode,y
.1905	e8		inx				inx
.1906	c8		iny				iny
.1907	c0 04		cpy #$04			cpy 	#4
.1909	d0 f4		bne $18ff			bne 	_CMEMCopy
.190b	68		pla				pla
.190c	a8		tay				tay
.190d	60		rts				rts
.190e					_CMModeError:
.190e	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.1910	20 18 15	jsr $1518		jsr	errorHandler
.1913					CMModeList:
>1913	00 60 00 20					.dword	$20006000 					; Mode 0 which is the standard 80x60 mode, no sprites
.1917					CMEndModeList:
.1917					CMToScale:
.1917	29 03		and #$03			and 	#3 							; lower 2 bits only
.1919	aa		tax				tax 								; put in X for counting
.191a	a9 00		lda #$00			lda 	#0 							; zero result
.191c	38		sec				sec 								; first time rotate CS in
.191d					_CMTSLoop:
.191d	6a		ror a				ror 	a
.191e	ca		dex				dex
.191f	10 fc		bpl $191d			bpl 	_CMTSLoop
.1921	60		rts				rts
.1922					CMDecodeLayer:
.1922	48		pha				pha 								; save it.
.1923	29 f7		and #$f7			and 	#$F7 						; all the bits except T256C which you can't set using this
.1925	9d 2d 9f	sta $9f2d,x			sta 	$9F2D,X
.1928	68		pla				pla 								; get it back
.1929	29 08		and #$08			and 	#$08 						; the missing bit sets the tile size.
.192b	f0 02		beq $192f			beq 	_CMDLNotSet
.192d	a9 03		lda #$03			lda 	#$03 						; which sets both lower bits, they're square.
.192f					_CMDLNotSet:
.192f	e0 00		cpx #$00			cpx 	#0
.1931	f0 06		beq $1939			beq 	_CMDLayer0 					; layer 1 has standard defaults for tile table, e.g. $7C
.1933	09 7c		ora #$7c			ora 	#$7C 						; so set those bits and write it out.
.1935	9d 2f 9f	sta $9f2f,x			sta 	$9F2F,X
.1938	60		rts				rts
.1939					_CMDLayer0:
.1939	09 80		ora #$80			ora 	#$80 						; tile base is $80
.193b	9d 2f 9f	sta $9f2f,x			sta 	$9F2F,X
.193e	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/palette.asm

.193f					CommandPalette:
.193f	a9 00		lda #$00			lda 	#0
.1941	a2 0c		ldx #$0c		ldx	#12
.1943	20 b0 33	jsr $33b0		jsr	mainHandler
.1946	a2 02		ldx #$02		ldx	#2
.1948	20 b0 33	jsr $33b0		jsr	mainHandler
.194b	a9 01		lda #$01			lda 	#1
.194d	a2 08		ldx #$08		ldx	#8
.194f	20 b0 33	jsr $33b0		jsr	mainHandler
.1952	a5 50		lda $50				lda 	esInt0 					; get palette #
.1954	20 64 19	jsr $1964			jsr 	PointToPaletteA			; point to palette register
.1957	a5 51		lda $51				lda 	esInt0+1
.1959	8d 23 9f	sta $9f23			sta 	$9F23
.195c	a5 59		lda $59				lda 	esInt1+1
.195e	29 0f		and #$0f			and 	#$0F
.1960	8d 23 9f	sta $9f23			sta 	$9F23
.1963	60		rts				rts
.1964					PointToPaletteA:
.1964	0a		asl a				asl 	a 							; x 2 -> LSB
.1965	8d 20 9f	sta $9f20			sta 	$9F20
.1968	a9 00		lda #$00			lda 	#0 							; carry into A
.196a	2a		rol a				rol 	a
.196b	09 fa		ora #$fa			ora 	#$FA 						; make correct address
.196d	8d 21 9f	sta $9f21			sta 	$9F21
.1970	a9 11		lda #$11			lda 	#$11 						; $01 and single step => $9F22
.1972	8d 22 9f	sta $9f22			sta 	$9F22
.1975	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/sprite.asm

.0bea					currSprite:
>0bea							.fill 	2
.1976					CommandSprite:
.1976	20 ae 19	jsr $19ae			jsr 	CSCheckOnOff 				; look for TRUE/FALSE
.1979	d0 0d		bne $1988			bne 	_CSCheckClear
.197b	ad 29 9f	lda $9f29			lda 	$9F29 						; sprite enable is bit 6.
.197e	29 bf		and #$bf			and 	#$BF 						; clear it whatever
.1980	90 02		bcc $1984			bcc 	_CSNotOn 					; if CS turn on, so set it
.1982	09 40		ora #$40			ora 	#$40
.1984					_CSNotOn:
.1984	8d 29 9f	sta $9f29			sta 	$9F29 						; write it back in new state and exit
.1987	60		rts				rts
.1988					_CSCheckClear:
.1988	a9 00		lda #$00			lda 	#0 							; no sprite currently selected.
.198a	8d eb 0b	sta $0beb			sta 	currSprite+1
.198d	b1 28		lda ($28),y			lda 	(codePtr),y 				; check for CLEAR
.198f	c9 e7		cmp #$e7			cmp 	#TKW_CLEAR
.1991	d0 05		bne $1998			bne 	_CSCommandLoop 				; not CLEAR, go to main loop
.1993	20 bf 19	jsr $19bf			jsr 	CSClearSprites 				; clear all the sprites
.1996	c8		iny				iny 								; consume CLEAR token and exit.
.1997	60		rts				rts
.1998					_CSCommandLoop:
>1998	db						.byte 	$DB
.1999	b1 28		lda ($28),y			lda 	(codePtr),y 				; get and consume character
.199b	c9 80		cmp #$80			cmp 	#TOK_EOL					; EOL exit.
.199d	c8		iny				iny									; consume it
.199e	c9 ca		cmp #$ca			cmp 	#TKW_COLON 					; colon exit
.19a0	f0 0b		beq $19ad			beq 	_CSExit
.19a2	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; semantic comma
.19a4	f0 f2		beq $1998			beq 	_CSCommandLoop
.19a6	a9 00		lda #$00			lda 	#0 							; sprite # now at level 0
.19a8	a2 0c		ldx #$0c		ldx	#12
.19aa	20 b0 33	jsr $33b0		jsr	mainHandler
.19ad					_CSExit:
.19ad	60		rts				rts
.19ae					CSCheckOnOff:
.19ae	b1 28		lda ($28),y			lda 	(codePtr),y 				; get and consume it.
.19b0	c8		iny				iny
.19b1	c9 ab		cmp #$ab			cmp 	#TKW_FALSE					; return CC/EQ if FALSE
.19b3	18		clc				clc
.19b4	f0 08		beq $19be			beq 	_CSCOExit
.19b6	c9 aa		cmp #$aa			cmp 	#TKW_TRUE 					; return CS/EQ if TRUE
.19b8	38		sec				sec 								; return NE if neither.
.19b9	f0 03		beq $19be			beq 	_CSCOExit
.19bb	88		dey				dey 								; undo consume
.19bc	c9 aa		cmp #$aa			cmp 	#TKW_TRUE 					; and set NE again, DEY will change it.
.19be					_CSCOExit:
.19be	60		rts				rts
.19bf					CSClearSprites:
.19bf	a9 11		lda #$11			lda 	#$11 						; set address to 1FC00 with single bump
.19c1	8d 22 9f	sta $9f22			sta 	$9F22
.19c4	a9 fc		lda #$fc			lda 	#$FC
.19c6	8d 21 9f	sta $9f21			sta 	$9F21
.19c9	a9 00		lda #$00			lda 	#0
.19cb	8d 20 9f	sta $9f20			sta 	$9F20
.19ce					_CSClear:
.19ce	a9 00		lda #$00			lda 	#0 							; set everything to $00
.19d0	8d 23 9f	sta $9f23			sta 	$9F23
.19d3	ad 21 9f	lda $9f21			lda 	$9F21
.19d6	d0 f6		bne $19ce			bne 	_CSClear
.19d8	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/vload.asm

.19d9					Command_VLoad:
.19d9	a9 00		lda #$00			lda 	#0 								; string which is the file name
.19db	a2 0e		ldx #$0e		ldx	#14
.19dd	20 b0 33	jsr $33b0		jsr	mainHandler
.19e0	a2 01		ldx #$01			ldx 	#1 								; load address at +1.
.19e2	a5 35		lda $35				lda 	lowMemory 						; load it into lowMemory (for now ?)
.19e4	95 50		sta $50,x			sta 	esInt0,x
.19e6	a5 36		lda $36				lda 	lowMemory+1
.19e8	95 58		sta $58,x			sta 	esInt1,x
.19ea	a9 00		lda #$00			lda 	#0
.19ec	95 60		sta $60,x			sta 	esInt2,x
.19ee	95 68		sta $68,x			sta 	esInt3,x
.19f0	a2 0e		ldx #$0e		ldx	#14
.19f2	20 f6 14	jsr $14f6		jsr	deviceHandler
.19f5	a5 51		lda $51				lda 	esInt0+1 						; (temp0) is where we are decoding from.
.19f7	85 2a		sta $2a				sta 	temp0
.19f9	a5 59		lda $59				lda 	esInt1+1
.19fb	85 2b		sta $2b				sta 	temp0+1
.19fd	20 79 1a	jsr $1a79			jsr 	LoadVRAMFile 					; load the VRAM file in.
.1a00	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/vpeekpoke.asm

.1a01					Command_VPoke:
.1a01	38		sec				sec 						; one byte , CS
.1a02	b0 01		bcs $1a05			bcs 	CmdVideoWrite
.1a04					Command_VDoke:
.1a04	18		clc				clc 						; two bytes, CC
.1a05					CmdVideoWrite:
.1a05	08		php				php 						; save one or two btes
.1a06	a9 00		lda #$00			lda 	#0  				; get address and value into levels 0,1
.1a08	a2 0a		ldx #$0a		ldx	#10
.1a0a	20 b0 33	jsr $33b0		jsr	mainHandler
.1a0d	a2 02		ldx #$02		ldx	#2
.1a0f	20 b0 33	jsr $33b0		jsr	mainHandler
.1a12	a9 01		lda #$01			lda 	#1
.1a14	a2 0a		ldx #$0a		ldx	#10
.1a16	20 b0 33	jsr $33b0		jsr	mainHandler
.1a19	a2 00		ldx #$00			ldx 	#0
.1a1b	20 2c 1a	jsr $1a2c			jsr 	SetUpTOSVRamAddress ; copy target address to VRAM address registers
.1a1e	a5 51		lda $51				lda 	esInt0+1 			; get MSB of write value
.1a20	8d 23 9f	sta $9f23			sta 	$9F23
.1a23	28		plp				plp 						; if it was Poke then exit
.1a24	b0 05		bcs $1a2b			bcs 	_CVWExit
.1a26	a5 59		lda $59				lda 	esInt1+1 			; doke, write the MSB.
.1a28	8d 23 9f	sta $9f23			sta 	$9F23
.1a2b					_CVWExit:
.1a2b	60		rts				rts
.1a2c					SetUpTOSVRamAddress:
.1a2c	b5 60		lda $60,x			lda 	esInt2,x 			; check range of address, data to $FFFF
.1a2e	29 fe		and #$fe			and 	#$FE
.1a30	15 68		ora $68,x			ora 	esInt3,x
.1a32	d0 14		bne $1a48			bne 	CVWValue
.1a34	b5 50		lda $50,x			lda 	esInt0,x			; set address up
.1a36	8d 20 9f	sta $9f20			sta 	$9F20
.1a39	b5 58		lda $58,x			lda 	esInt1,x
.1a3b	8d 21 9f	sta $9f21			sta	 	$9F21
.1a3e	b5 60		lda $60,x			lda 	esInt2,x
.1a40	29 01		and #$01			and 	#1
.1a42	09 10		ora #$10			ora 	#$10 				; step 1.
.1a44	8d 22 9f	sta $9f22			sta 	$9F22
.1a47	60		rts				rts
.1a48					CVWValue:
.1a48	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.1a4a	20 18 15	jsr $1518		jsr	errorHandler
.1a4d					Command_VPeek:
.1a4d	38		sec				sec 						; one byte , CS
.1a4e	b0 01		bcs $1a51			bcs 	CmdVideoRead
.1a50					Command_VDeek:
.1a50	18		clc				clc 						; two bytes, CC
.1a51					CmdVideoRead:
.1a51	08		php				php 						; save action on stack.
.1a52	48		pha				pha 						; save stack position
.1a53	a2 0a		ldx #$0a		ldx	#10
.1a55	20 b0 33	jsr $33b0		jsr	mainHandler
.1a58	a2 04		ldx #$04		ldx	#4
.1a5a	20 b0 33	jsr $33b0		jsr	mainHandler
.1a5d	68		pla				pla
.1a5e	aa		tax				tax
.1a5f	20 2c 1a	jsr $1a2c			jsr 	SetUpTOSVRamAddress	; set up VRAM address.
.1a62	a9 00		lda #$00			lda 	#0 					; zero upper 3 bytes
.1a64	95 58		sta $58,x			sta 	esInt1,x
.1a66	95 60		sta $60,x			sta 	esInt2,x
.1a68	95 68		sta $68,x			sta 	esInt3,x
.1a6a	ad 23 9f	lda $9f23			lda 	$9F23				; copy 1st byte
.1a6d	95 50		sta $50,x			sta 	esInt0,x
.1a6f	28		plp				plp 						; check if DOKE (carry was clear)
.1a70	b0 05		bcs $1a77			bcs 	_CVRExit
.1a72	ad 23 9f	lda $9f23			lda 	$9F23 				; copy 2nd byte
.1a75	95 58		sta $58,x			sta 	esInt1,x
.1a77					_CVRExit:
.1a77	8a		txa				txa 						; return X position.
.1a78	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/vramprocess.asm

.0bec					compressMode:
>0bec							.fill 	1
.0bed					imageInfo:
>0bed							.fill 	X16MaxImages
.0c2d					imageAddr2Low:
>0c2d							.fill  	X16MaxImages
.0c6d					imageAddr2High:
>0c6d							.fill  	X16MaxImages
.1a79					LoadVRAMFile:
.1a79	8a		txa				txa
.1a7a	48		pha				pha
.1a7b	98		tya				tya
.1a7c	48		pha				pha
.1a7d					_LVRLoop:
.1a7d	20 1b 1b	jsr $1b1b			jsr 	LVFGet 						; get the next (never access direct)
.1a80	c9 80		cmp #$80			cmp 	#$80 						; exit ?
.1a82	f0 3e		beq $1ac2			beq 	_LVRExit
.1a84	b0 41		bcs $1ac7			bcs 	_LVRLoad 					; load data in ?
.1a86	c9 08		cmp #$08			cmp 	#$08 						; is it set address ?
.1a88	90 0d		bcc $1a97			bcc 	_LVRSetAddress
.1a8a	c9 10		cmp #$10			cmp 	#$10 						; is it set compression type ?
.1a8c	90 2d		bcc $1abb			bcc 	_LVRSetCompress
.1a8e	c9 64		cmp #$64			cmp 	#$64 						; is it set sprite type.
.1a90	90 43		bcc $1ad5			bcc 	_LVRSetSprite
.1a92	a2 01		ldx #$01			ldx 	#ErrorID_missing
.1a94	20 18 15	jsr $1518		jsr	errorHandler
.1a97					_LVRSetAddress:
.1a97	85 2d		sta $2d				sta 	temp1+1 					; 24 bit in temp1+1/temp1/A
.1a99	20 1b 1b	jsr $1b1b			jsr 	LVFGet
.1a9c	85 2c		sta $2c				sta 	temp1
.1a9e	a9 00		lda #$00			lda 	#0
.1aa0	46 2d		lsr $2d				lsr 	temp1+1 					; / 2 twice.
.1aa2	66 2c		ror $2c				ror 	temp1
.1aa4	6a		ror a				ror		a
.1aa5	46 2d		lsr $2d				lsr 	temp1+1
.1aa7	66 2c		ror $2c				ror 	temp1
.1aa9	6a		ror a				ror		a
.1aaa	8d 20 9f	sta $9f20			sta 	$9F20 						; set write address with +1 increment
.1aad	a5 2c		lda $2c				lda 	temp1
.1aaf	8d 21 9f	sta $9f21			sta 	$9F21
.1ab2	a5 2d		lda $2d				lda 	temp1+1
.1ab4	09 10		ora #$10			ora 	#$10
.1ab6	8d 22 9f	sta $9f22			sta 	$9F22
.1ab9	d0 c2		bne $1a7d			bne 	_LVRLoop
.1abb					_LVRSetCompress:
.1abb	29 07		and #$07			and 	#7
.1abd	8d ec 0b	sta $0bec			sta 	compressMode
.1ac0	10 bb		bpl $1a7d			bpl 	_LVRLoop
.1ac2					_LVRExit:
.1ac2	68		pla				pla
.1ac3	a8		tay				tay
.1ac4	68		pla				pla
.1ac5	aa		tax				tax
.1ac6	60		rts				rts
.1ac7					_LVRLoad:
.1ac7	29 7f		and #$7f			and 	#$7F 						; count in X (is > 0)
.1ac9	aa		tax				tax
.1aca					_LVRLCopy:
.1aca	20 1b 1b	jsr $1b1b			jsr 	LVFGet 						; write to data.
.1acd	8d 23 9f	sta $9f23			sta 	$9F23
.1ad0	ca		dex				dex
.1ad1	d0 f7		bne $1aca			bne 	_LVRLCopy
.1ad3	f0 a8		beq $1a7d			beq 	_LVRLoop
.1ad5					_LVRSetSprite:
.1ad5	48		pha				pha 								; save on stack
.1ad6	20 1b 1b	jsr $1b1b			jsr 	LVFGet 						; get the sprite number into X
.1ad9	aa		tax				tax
.1ada	c9 40		cmp #$40			cmp 	#X16MaxImages				; too high ?
.1adc	b0 38		bcs $1b16			bcs 	_LVRSSValue
.1ade	68		pla				pla 								; restore the data held in the first byte
.1adf	9d ed 0b	sta $0bed,x			sta 	imageInfo,x 				; and write into the sprite image table.
.1ae2					_LVRAlignVRAM:
.1ae2	ad 20 9f	lda $9f20			lda 	$9F20 						; check VRAM on 32 byte boundary
.1ae5	29 1f		and #$1f			and 	#$1F
.1ae7	f0 07		beq $1af0			beq 	_LVRAligned
.1ae9	a9 00		lda #$00			lda 	#$00
.1aeb	8d 23 9f	sta $9f23			sta 	$9F23
.1aee	f0 f2		beq $1ae2			beq 	_LVRAlignVRAM
.1af0					_LVRAligned:
.1af0	ad 22 9f	lda $9f22			lda 	$9F22 						; put address/32 in sprite image table
.1af3	4a		lsr a				lsr 	a 	 						; first halve into temp1
.1af4	ad 21 9f	lda $9f21			lda 	$9F21
.1af7	6a		ror a				ror 	a
.1af8	85 2d		sta $2d				sta 	temp1+1
.1afa	ad 20 9f	lda $9f20			lda 	$9F20
.1afd	6a		ror a				ror 	a
.1afe	85 2c		sta $2c				sta 	temp1
.1b00	a0 04		ldy #$04			ldy 	#4 							; divide it by 16 in temp1
.1b02					_LVRShift:
.1b02	46 2d		lsr $2d				lsr 	temp1+1
.1b04	66 2c		ror $2c				ror 	temp1
.1b06	88		dey				dey
.1b07	d0 f9		bne $1b02			bne 	_LVRShift
.1b09	a5 2d		lda $2d				lda 	temp1+1 					; copy result.
.1b0b	9d 6d 0c	sta $0c6d,x			sta 	imageAddr2High,x
.1b0e	a5 2c		lda $2c				lda 	temp1
.1b10	9d 2d 0c	sta $0c2d,x			sta 	imageAddr2Low,x
.1b13	4c 7d 1a	jmp $1a7d			jmp 	_LVRLoop
.1b16					_LVRSSValue:
.1b16	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.1b18	20 18 15	jsr $1518		jsr	errorHandler
.1b1b	84 32		sty $32		LVFGet:	sty 	tempShort
.1b1d	a0 00		ldy #$00			ldy 	#0
.1b1f	b1 2a		lda ($2a),y			lda 	(temp0),y
.1b21	a4 32		ldy $32				ldy	 	tempShort
.1b23	e6 2a		inc $2a				inc 	temp0
.1b25	d0 02		bne $1b29			bne 	_LVFGExit
.1b27	e6 2b		inc $2b				inc 	temp0+1
.1b29					_LVFGExit:
.1b29	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Return to file: basic.asm

.1b2a					section_end_extension:
.1b2a					section_start_floatingpoint:

;******  Processing file: floatingpoint/floatingpoint.asm

.1b2a					floatingpointHandler:
.1b2a	a2 03		ldx #$03			ldx 	#ErrorID_NoModule
.1b2c	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: basic.asm

.1b2f					section_end_floatingpoint:
.1b2f					section_start_interaction:

;******  Processing file: interaction/interaction.asm


;******  Processing file: interaction/cold.asm

.1b2f					ColdStartEntry:
.1b2f	a2 ff		ldx #$ff			ldx 	#$FF
.1b31	9a		txs				txs
.1b32	20 bb 1b	jsr $1bbb			jsr 	ForceStandardMode
.1b35	a2 04		ldx #$04		ldx	#4
.1b37	20 f6 14	jsr $14f6		jsr	deviceHandler
.1b3a	a0 ff		ldy #$ff			ldy 	#255
.1b3c					_CSBanner:
.1b3c	c8		iny				iny
.1b3d	b9 63 1b	lda $1b63,y			lda 	Intro,y
.1b40	f0 14		beq $1b56			beq 	_CSStart
.1b42	c9 08		cmp #$08			cmp 	#8
.1b44	90 08		bcc $1b4e			bcc 	_CSInk
.1b46	a2 16		ldx #$16		ldx	#22
.1b48	20 f6 14	jsr $14f6		jsr	deviceHandler
.1b4b	4c 3c 1b	jmp $1b3c			jmp 	_CSBanner
.1b4e					_CSInk:
.1b4e	a2 08		ldx #$08		ldx	#8
.1b50	20 f6 14	jsr $14f6		jsr	deviceHandler
.1b53	4c 3c 1b	jmp $1b3c			jmp 	_CSBanner
.1b56					_CSStart:
.1b56	a2 16		ldx #$16		ldx	#22
.1b58	20 b0 33	jsr $33b0		jsr	mainHandler
.1b5b	a2 06		ldx #$06		ldx	#6
.1b5d	20 b0 33	jsr $33b0		jsr	mainHandler
.1b60	4c 7b 1c	jmp $1c7b			jmp 	WarmStartEntry
>1b63	06 2a 2a 2a 20 36 35 30		Intro:	.text 	6,"*** 6502 Extended BASIC ***",13,13
>1b6b	32 20 45 78 74 65 6e 64 65 64 20 42 41 53 49 43
>1b7b	20 2a 2a 2a 0d 0d
>1b81	03 57 72 69 74 74 65 6e				.text 	3,"Written by Paul Robson 2021",13,13
>1b89	20 62 79 20 50 61 75 6c 20 52 6f 62 73 6f 6e 20
>1b99	32 30 32 31 0d 0d
>1b9f	02 42 61 73 69 63 20				.text 	2,"Basic "
>1ba6	30 2e 31 37					.text "0.17"
>1baa	20 28						.text 	" ("
>1bac	31 38 2d 4d 61 72 2d 32				.text "18-Mar-2021"
>1bb4	30 32 31
>1bb7	29 0d 0d 00					.text 	")",13,13,0
.1bbb					ForceStandardMode:
.1bbb	a9 fe		lda #$fe			lda 	#$FE
.1bbd	20 4d 18	jsr $184d		jsr	extensionHandler
.1bc0	60		rts				rts

;******  Return to file: interaction/interaction.asm


;******  Processing file: interaction/delete.asm

.1bc1					DeleteLine:
.1bc1	ad c8 0a	lda $0ac8			lda 	basePage 					; copy program base to temp0
.1bc4	85 2a		sta $2a				sta 	temp0
.1bc6	ad c9 0a	lda $0ac9			lda 	basePage+1
.1bc9	85 2b		sta $2b				sta 	temp0+1
.1bcb	a0 01		ldy #$01	_DLLoop:ldy 	#1 							; see if found line ?
.1bcd	a5 50		lda $50				lda 	esInt0 						; e.g. the linenumbers match
.1bcf	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.1bd1	d0 07		bne $1bda			bne 	_DLNext
.1bd3	c8		iny				iny
.1bd4	a5 58		lda $58				lda 	esInt1
.1bd6	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.1bd8	f0 06		beq $1be0			beq 	_DLFound
.1bda	20 fe 1b	jsr $1bfe	_DLNext:jsr 	IAdvanceTemp0 				; shift temp0 forward, return Z flag set if end.
.1bdd	d0 ec		bne $1bcb			bne 	_DLLoop
.1bdf	60		rts				rts
.1be0					_DLFound:
.1be0	a0 00		ldy #$00			ldy 	#0 							; this is the line to cut, so this offset is the bytes to remove
.1be2	b1 2a		lda ($2a),y			lda 	(temp0),y
.1be4	a8		tay				tay 								; so we copy from (temp0),y
.1be5	a2 00		ldx #$00			ldx 	#0  						; to (temp0,x)
.1be7					_DLCopyDown:
.1be7	b1 2a		lda ($2a),y			lda 	(temp0),y 					; copy one byte.
.1be9	81 2a		sta ($2a,x)			sta 	(temp0,x)
.1beb	e6 2a		inc $2a				inc 	temp0 						; advance pointer
.1bed	d0 02		bne $1bf1			bne 	_DLNoCarry
.1bef	e6 2b		inc $2b				inc 	temp0+1
.1bf1					_DLNoCarry:
.1bf1	a5 2a		lda $2a				lda 	temp0 						; until hit low memory
.1bf3	c5 35		cmp $35				cmp 	lowMemory 					; which is comfortably after End Program.
.1bf5	d0 f0		bne $1be7			bne 	_DLCopyDown
.1bf7	a5 2b		lda $2b				lda 	temp0+1
.1bf9	c5 36		cmp $36				cmp 	lowMemory+1
.1bfb	d0 ea		bne $1be7			bne 	_DLCopyDown
.1bfd	60		rts				rts
.1bfe					IAdvanceTemp0:
.1bfe	84 32		sty $32				sty 	tempShort
.1c00	18		clc				clc
.1c01	a0 00		ldy #$00			ldy 	#0 							; get offset
.1c03	b1 2a		lda ($2a),y			lda 	(temp0),y 					; add to temp0
.1c05	65 2a		adc $2a				adc 	temp0
.1c07	85 2a		sta $2a				sta 	temp0
.1c09	90 02		bcc $1c0d			bcc 	_IATNoCarry
.1c0b	e6 2b		inc $2b				inc 	temp0+1
.1c0d					_IATNoCarry:
.1c0d	b1 2a		lda ($2a),y			lda 	(temp0),y
.1c0f	a4 32		ldy $32				ldy 	tempShort
.1c11	c9 00		cmp #$00			cmp		#0 							; Z set if program end.
.1c13	60		rts				rts

;******  Return to file: interaction/interaction.asm


;******  Processing file: interaction/insert.asm

.1c14					InsertLine:
.1c14	ad c8 0a	lda $0ac8			lda 	basePage 					; copy program base to temp0
.1c17	85 2a		sta $2a				sta 	temp0
.1c19	ad c9 0a	lda $0ac9			lda 	basePage+1
.1c1c	85 2b		sta $2b				sta 	temp0+1
.1c1e					_ILLoop:
.1c1e	a0 01		ldy #$01			ldy 	#1
.1c20	b1 2a		lda ($2a),y			lda 	(temp0),y
.1c22	c5 50		cmp $50				cmp 	esInt0
.1c24	c8		iny				iny
.1c25	b1 2a		lda ($2a),y			lda 	(temp0),y
.1c27	e5 58		sbc $58				sbc 	esInt1
.1c29	b0 05		bcs $1c30			bcs 	_ILFound 					; we know it cannot be equal, it would have been deleted
.1c2b	20 fe 1b	jsr $1bfe			jsr 	IAdvanceTemp0 				; shift temp0 forward, return Z flag set if end.
.1c2e	d0 ee		bne $1c1e			bne 	_ILLoop
.1c30					_ILFound:
.1c30	a5 35		lda $35				lda 	lowMemory 					; shift lowMemory up to make space for it.
.1c32	85 2c		sta $2c				sta 	temp1             			; this pointer goes backwards
.1c34	a5 36		lda $36				lda 	lowMemory+1
.1c36	85 2d		sta $2d				sta 	temp1+1
.1c38	ad ea 0d	lda $0dea			lda 	tokenBufferIndex 			; space to make in Y, 0 in X.
.1c3b	18		clc				clc 								; add 3 for the line number and offset.
.1c3c	69 03		adc #$03			adc 	#3 							; tokenbuffer already has $80
.1c3e	a8		tay				tay
.1c3f	a2 00		ldx #$00			ldx 	#0
.1c41	a1 2c		lda ($2c,x)	_ILMove:lda 	(temp1,x)					; shift up
.1c43	91 2c		sta ($2c),y			sta 	(temp1),y
.1c45	a5 2c		lda $2c				lda 	temp1 						; check reached the insert point ?
.1c47	c5 2a		cmp $2a				cmp 	temp0
.1c49	d0 06		bne $1c51			bne 	_ILMNext
.1c4b	a5 2d		lda $2d				lda 	temp1+1
.1c4d	c5 2b		cmp $2b				cmp 	temp0+1
.1c4f	f0 0b		beq $1c5c			beq 	_ILMCopy
.1c51					_ILMNext:
.1c51	a5 2c		lda $2c				lda 	temp1
.1c53	d0 02		bne $1c57			bne 	_ILNoBorrow
.1c55	c6 2d		dec $2d				dec 	temp1+1
.1c57					_ILNoBorrow:
.1c57	c6 2c		dec $2c				dec 	temp1
.1c59	4c 41 1c	jmp $1c41			jmp 	_ILMove 					; and go round again
.1c5c					_ILMCopy:
.1c5c	98		tya				tya 								; Y is the offset of the new line.
.1c5d	81 2a		sta ($2a,x)			sta 	(temp0,x)					; X = 0 still.
.1c5f	a0 01		ldy #$01			ldy 	#1 							; copy in line number.
.1c61	a5 50		lda $50				lda 	esInt0
.1c63	91 2a		sta ($2a),y			sta 	(temp0),y
.1c65	c8		iny				iny
.1c66	a5 58		lda $58				lda 	esInt1
.1c68	91 2a		sta ($2a),y			sta 	(temp0),y
.1c6a	a0 00		ldy #$00			ldy 	#0 							; copy the body in
.1c6c					_ILMCopy2:
.1c6c	b1 28		lda ($28),y			lda 	(codePtr),y
.1c6e	c8		iny				iny
.1c6f	c8		iny				iny
.1c70	c8		iny				iny
.1c71	91 2a		sta ($2a),y			sta 	(temp0),y
.1c73	88		dey				dey
.1c74	88		dey				dey
.1c75	cc ea 0d	cpy $0dea			cpy 	tokenBufferIndex
.1c78	d0 f2		bne $1c6c			bne 	_ILMCopy2
.1c7a	60		rts				rts

;******  Return to file: interaction/interaction.asm


;******  Processing file: interaction/warm.asm

.1c7b					WarmStartEntry:
.1c7b	a2 ff		ldx #$ff			ldx 	#$FF
.1c7d	9a		txs				txs
.1c7e	20 bb 1b	jsr $1bbb			jsr 	ForceStandardMode
.1c81	a9 02		lda #$02			lda 	#2							; green text.
.1c83	a2 08		ldx #$08		ldx	#8
.1c85	20 f6 14	jsr $14f6		jsr	deviceHandler
.1c88	a2 0c		ldx #$0c		ldx	#12
.1c8a	20 f6 14	jsr $14f6		jsr	deviceHandler
.1c8d	a5 2a		lda $2a				lda 	temp0	 					; copy temp0 to codePtr
.1c8f	85 28		sta $28				sta 	codePtr
.1c91	a5 2b		lda $2b				lda 	temp0+1
.1c93	85 29		sta $29				sta 	codePtr+1
.1c95	a2 06		ldx #$06		ldx	#6
.1c97	20 f6 14	jsr $14f6		jsr	deviceHandler
.1c9a	a2 08		ldx #$08		ldx	#8
.1c9c	20 93 3e	jsr $3e93		jsr	tokeniserHandler
.1c9f	c9 00		cmp #$00			cmp 	#0
.1ca1	f0 25		beq $1cc8			beq 	WSEError 					; failed (tokenise can fail if it doesn't know a character e.g. |)
.1ca3	a9 e7		lda #$e7			lda 	#(tokenHeader) & $FF
.1ca5	85 28		sta $28				sta 	codePtr
.1ca7	a9 0c		lda #$0c			lda 	#(tokenHeader) >> 8
.1ca9	85 29		sta $29				sta 	1+(codePtr)
.1cab	ad ea 0c	lda $0cea			lda 	tokenBuffer 				; is it a blank line, go get another line.
.1cae	c9 80		cmp #$80			cmp 	#$80
.1cb0	f0 c9		beq $1c7b			beq 	WarmStartEntry
.1cb2	29 c0		and #$c0			and 	#$C0						; does it start with a number
.1cb4	c9 40		cmp #$40			cmp 	#$40 						; e.g. is it 01xx xxxx
.1cb6	f0 15		beq $1ccd			beq 	HasLineNumber
.1cb8	a9 00		lda #$00			lda 	#0 							; zero the token header, so it will look like a
.1cba	8d e7 0c	sta $0ce7			sta 	tokenHeader 				; fake program line.
.1cbd	8d e8 0c	sta $0ce8			sta 	tokenHeader+1
.1cc0	8d e9 0c	sta $0ce9			sta 	tokenHeader+2
.1cc3	a2 18		ldx #$18		ldx	#24
.1cc5	20 b0 33	jsr $33b0		jsr	mainHandler
.1cc8					WSEError:
.1cc8	a2 1e		ldx #$1e			ldx 	#ErrorID_Tokenise
.1cca	20 18 15	jsr $1518		jsr	errorHandler
.1ccd					HasLineNumber:
.1ccd	a0 03		ldy #$03			ldy 	#3 							; get line number
.1ccf	a9 00		lda #$00			lda 	#0
.1cd1	a2 0a		ldx #$0a		ldx	#10
.1cd3	20 b0 33	jsr $33b0		jsr	mainHandler
.1cd6	a5 60		lda $60				lda 	esInt2		 				; check in range (only 2 bytes)
.1cd8	05 68		ora $68				ora 	esInt3
.1cda	d0 ec		bne $1cc8			bne 	WSEError
.1cdc	98		tya				tya 								; make codePtr point to code after the line number.
.1cdd	18		clc				clc 								; by skipping over the tokenised number.
.1cde	65 28		adc $28				adc 	codePtr
.1ce0	85 28		sta $28				sta 	codePtr
.1ce2	90 02		bcc $1ce6			bcc		_HLNNoCarry
.1ce4	e6 29		inc $29				inc 	codePtr+1
.1ce6					_HLNNoCarry:
.1ce6	98		tya				tya 								; subtract that offset from the code buffer index
.1ce7	38		sec				sec
.1ce8	49 ff		eor #$ff			eor 	#$FF
.1cea	6d ea 0d	adc $0dea			adc 	tokenBufferIndex
.1ced	18		clc				clc 								; add space allowing for header & $80 trailer
.1cee	69 04		adc #$04			adc 	#4
.1cf0	8d ea 0d	sta $0dea			sta 	tokenBufferIndex 			; this is the number of bytes occupied.
.1cf3	20 c1 1b	jsr $1bc1			jsr 	DeleteLine 					; always delete the line, it's deleted and reinserted.
.1cf6					_HLNNoDelete:
.1cf6	ad ea 0d	lda $0dea			lda 	tokenBufferIndex 			; if line was empty, then don't insert
.1cf9	c9 01		cmp #$01			cmp 	#1 							; (the one character is the EOL marker)
.1cfb	f0 0c		beq $1d09			beq 	_HLMEditDone
.1cfd	a5 36		lda $36				lda 	lowMemory+1 				; is there space, if we allow a little bit of
.1cff	18		clc				clc 								; workspace (1k)
.1d00	69 04		adc #$04			adc 	#4 							; e.g. 4 x 256
.1d02	c5 34		cmp $34				cmp 	highMemory+1
.1d04	b0 0b		bcs $1d11			bcs 	_HLMMemory 					; nope, won't allowit.
.1d06	20 14 1c	jsr $1c14			jsr 	InsertLine 					; insert the line in
.1d09					_HLMEditDone:
.1d09	a2 06		ldx #$06		ldx	#6
.1d0b	20 b0 33	jsr $33b0		jsr	mainHandler
.1d0e	4c 7b 1c	jmp $1c7b			jmp 	WarmStartEntry
.1d11					_HLMMemory:
.1d11	a2 22		ldx #$22			ldx 	#ErrorID_Memory
.1d13	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: interaction/interaction.asm

.1d16					interactionHandler:
.1d16	7c 19 1d	jmp ($1d19,x)			jmp 	(interactionVectors,x)
.1d19					interactionVectors:
>1d19	1f 1d					.word _DummyControlHandler ; index 0
>1d1b	2f 1b					.word ColdStartEntry       ; index 2
>1d1d	7b 1c					.word WarmStartEntry       ; index 4
.1d1f					_DummyControlHandler:
.1d1f	60		rts			rts

;******  Return to file: basic.asm

.1d20					section_end_interaction:
.1d20					section_start_main:

;******  Processing file: main/main.asm


;******  Processing file: main/commands/compat/readdata.asm

.0cad					dataPtr:
>0cad							.fill 	2
.0caf					dataIndex:
>0caf							.fill 	1
.1d20					CommandRead:
.1d20	a2 00		ldx #$00			ldx 	#0 							; get a reference to a variable in stack:0
.1d22	20 63 2c	jsr $2c63			jsr 	EvaluateReference
.1d25	20 66 1d	jsr $1d66			jsr 	SwapDPCP 					; use the data pointer.
.1d28	b1 28		lda ($28),y			lda 	(codePtr),y 				; see where it is.
.1d2a	c8		iny				iny
.1d2b	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; if it is on a comma, it is in data.
.1d2d	f0 07		beq $1d36			beq 	_CRInData
.1d2f	88		dey				dey
.1d30	a9 d9		lda #$d9			lda 	#TKW_DATA 					; scan forward to a DATA statement.
.1d32	aa		tax				tax
.1d33	20 67 24	jsr $2467			jsr 	ScanForward
.1d36					_CRInData:
.1d36	a2 01		ldx #$01			ldx 	#1 							; evaluate a value at Stack,1
.1d38	20 0b 2c	jsr $2c0b			jsr 	Evaluate
.1d3b	ca		dex				dex 								; and write the value.
.1d3c	20 ba 1f	jsr $1fba			jsr 	WriteValue
.1d3f	20 66 1d	jsr $1d66			jsr 	SwapDPCP 					; get the code pointer back.
.1d42	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows ?
.1d44	c8		iny				iny
.1d45	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; if comma, another variable
.1d47	f0 d7		beq $1d20			beq 	CommandRead
.1d49	88		dey				dey
.1d4a	60		rts				rts
.1d4b					CommandData:
.1d4b	a9 80		lda #$80			lda 	#TOK_EOL 					; go forward to end of line or colon.
.1d4d	a2 ca		ldx #$ca			ldx 	#TKW_COLON
.1d4f	20 67 24	jsr $2467			jsr 	ScanForward
.1d52	88		dey				dey 								; ending on EOL is a scan issue, as it increments
.1d53	60		rts				rts
.1d54					CommandRestore:
.1d54	ad c8 0a	lda $0ac8			lda 	basePage
.1d57	8d ad 0c	sta $0cad			sta 	dataPtr
.1d5a	ad c9 0a	lda $0ac9			lda 	basePage+1
.1d5d	8d ae 0c	sta $0cae			sta 	dataPtr+1
.1d60	a9 03		lda #$03			lda 	#3
.1d62	8d af 0c	sta $0caf			sta 	dataIndex
.1d65	60		rts				rts
.1d66					SwapDPCP:
.1d66	8a		txa				txa
.1d67	48		pha				pha
.1d68	98		tya				tya 								; swap Y, DataIndex
.1d69	ac af 0c	ldy $0caf			ldy 	DataIndex
.1d6c	8d af 0c	sta $0caf			sta 	DataIndex
.1d6f	a5 28		lda $28				lda 	codePtr 					; swap code/dataptr low
.1d71	ae ad 0c	ldx $0cad			ldx 	dataptr
.1d74	8d ad 0c	sta $0cad			sta 	dataPtr
.1d77	86 28		stx $28				stx 	codePtr
.1d79	a5 29		lda $29				lda 	codePtr+1 					; swap code/dataptr high.
.1d7b	ae ae 0c	ldx $0cae			ldx 	dataptr+1
.1d7e	8d ae 0c	sta $0cae			sta 	dataPtr+1
.1d81	86 29		stx $29				stx 	codePtr+1
.1d83	68		pla				pla
.1d84	aa		tax				tax
.1d85	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/compat/transfer.asm

.1d86					CommandGOSUB:
.1d86	20 28 2c	jsr $2c28			jsr 	EvaluateRootInteger			; get GOSUB line on stack top.
.1d89	a2 04		ldx #$04			ldx 	#4 							; allocate 4 bytes on stack for GOSUB
.1d8b	a9 47		lda #$47			lda 	#markerGOSUB  				; <marker> <return addr/offset>
.1d8d	20 5d 33	jsr $335d			jsr 	RSClaim
.1d90	a9 01		lda #$01			lda 	#1 							; save position at offset 1.
.1d92	20 89 33	jsr $3389			jsr 	RSSavePosition
.1d95	a2 00		ldx #$00			ldx 	#0 							; point back at GOSUB line
.1d97	f0 1b		beq $1db4			beq 	GotoTOS 					; and do a GOTO there.
.1d99					CommandRETURN:
.1d99	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.1d9b	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.1d9d	c9 47		cmp #$47			cmp 	#markerGOSUB 						; does it match
.1d9f	f0 05		beq $1da6			beq 	_isok
.1da1	a2 0e		ldx #$0e			ldx 	#ErrorID_returnErr
.1da3	20 18 15	jsr $1518		jsr	errorHandler
.1da6					_isok:
.1da6	a9 01		lda #$01			lda 	#1
.1da8	20 9c 33	jsr $339c			jsr 	RSLoadPosition 				; reload the position from offset 1.
.1dab	a9 04		lda #$04			lda 	#4 							; throw 4 bytes from stack.
.1dad	20 7f 33	jsr $337f			jsr 	RSFree
.1db0	60		rts				rts
.1db1					CommandGOTO:
.1db1	20 28 2c	jsr $2c28			jsr 	EvaluateRootInteger 		; get GOTO line on stack top.
.1db4					GotoTOS:
.1db4	20 4b 27	jsr $274b			jsr 	ResetCodeAddress 			; simple search.
.1db7					_GotoSearch:
.1db7	a0 00		ldy #$00			ldy 	#0 							; get offset
.1db9	b1 28		lda ($28),y			lda 	(codePtr),y
.1dbb	f0 21		beq $1dde			beq 	_GotoError 					; not found.
.1dbd	c8		iny				iny									; check LSB match
.1dbe	b1 28		lda ($28),y			lda 	(codePtr),y
.1dc0	d5 50		cmp $50,x			cmp 	esInt0,x
.1dc2	d0 07		bne $1dcb			bne 	_GotoNext
.1dc4	c8		iny				iny
.1dc5	b1 28		lda ($28),y			lda 	(codePtr),y
.1dc7	d5 58		cmp $58,x			cmp 	esInt1,x
.1dc9	f0 10		beq $1ddb			beq 	_GotoFound
.1dcb					_GotoNext:
.1dcb	a0 00		ldy #$00			ldy 	#0 							; go next line
.1dcd	b1 28		lda ($28),y			lda 	(codePtr),y
.1dcf	18		clc				clc
.1dd0	65 28		adc $28				adc 	codePtr
.1dd2	85 28		sta $28				sta 	codePtr
.1dd4	90 e1		bcc $1db7			bcc 	_GotoSearch
.1dd6	e6 29		inc $29				inc 	codePtr+1
.1dd8	4c b7 1d	jmp $1db7			jmp 	_GotoSearch
.1ddb					_GotoFound:
.1ddb	a0 03		ldy #$03			ldy 	#3 							; continue from that line
.1ddd	60		rts				rts
.1dde					_GotoError:
.1dde	a2 0c		ldx #$0c			ldx 	#ErrorID_LineNumber
.1de0	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/commands/io/input.asm

=32					MaxInputSize = 32
.0cb0					InputBuffer:
>0cb0							.fill 	MaxInputSize+1
.1de3					Command_Input:
.1de3	b1 28		lda ($28),y			lda 	(codePtr),y 			; see what's next.
.1de5	c8		iny				iny
.1de6	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 				; ignore commas.
.1de8	f0 f9		beq $1de3			beq 	Command_Input
.1dea	88		dey				dey 							; undo consume
.1deb	c9 ca		cmp #$ca			cmp 	#TKW_COLON
.1ded	f0 54		beq $1e43			beq 	_CIExit 				; : or EOL, exit
.1def	c9 80		cmp #$80			cmp 	#TOK_EOL
.1df1	f0 50		beq $1e43			beq 	_CIExit
.1df3	c9 40		cmp #$40			cmp 	#$40 					; variable ?
.1df5	90 12		bcc $1e09			bcc 	_CIVariable
.1df7	c9 85		cmp #$85			cmp 	#TOK_STR 				; if not quoted string syntax error.
.1df9	d0 43		bne $1e3e			bne 	_CISyntax
.1dfb	a2 00		ldx #$00			ldx 	#0
.1dfd	20 1f 2c	jsr $2c1f			jsr 	EvaluateString 			; evaluate and print string
.1e00	20 1c 20	jsr $201c			jsr 	TOSToTemp0
.1e03	20 12 1f	jsr $1f12			jsr 	PrintString
.1e06	4c e3 1d	jmp $1de3			jmp 	Command_Input
.1e09					_CIVariable:
.1e09	a2 00		ldx #$00			ldx 	#0 						; evaluate a reference.
.1e0b	20 63 2c	jsr $2c63			jsr 	EvaluateReference  		; this is where its going
.1e0e					_CIRetry:
.1e0e	a9 3f		lda #$3f			lda 	#"?"					; print prompt
.1e10	a2 14		ldx #$14		ldx	#20
.1e12	20 f6 14	jsr $14f6		jsr	deviceHandler
.1e15	98		tya				tya
.1e16	48		pha				pha
.1e17	20 57 1e	jsr $1e57			jsr 	InputString 			; input a string (manually)
.1e1a	a2 01		ldx #$01			ldx 	#1
.1e1c	20 44 1e	jsr $1e44			jsr 	BufferToStackX 			; make stack,x ref input string.
.1e1f	a5 48		lda $48				lda 	esType 					; if target type numeric
.1e21	29 40		and #$40			and 	#$40 					; then convert to number
.1e23	d0 11		bne $1e36			bne 	_CIWrite
.1e25	a2 01		ldx #$01			ldx 	#1
.1e27	20 1c 20	jsr $201c			jsr 	TOSToTemp0 				; string address in temp0, goes here.
.1e2a	a9 0a		lda #$0a			lda 	#10
.1e2c	20 30 31	jsr $3130			jsr 	MInt32FromString 		; convert it back from a string.
.1e2f	68		pla				pla
.1e30	a8		tay				tay
.1e31	b0 03		bcs $1e36			bcs 	_CIWrite 				; successfully converted.
.1e33	18		clc				clc 							; default fail FP conversion
.1e34	90 d8		bcc $1e0e			bcc		_CIRetry				; failed, try again.
.1e36					_CIWrite:
.1e36	a2 00		ldx #$00			ldx 	#0
.1e38	20 ba 1f	jsr $1fba			jsr 	WriteValue
.1e3b	4c e3 1d	jmp $1de3			jmp 	Command_Input
.1e3e					_CISyntax:
.1e3e	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.1e40	20 18 15	jsr $1518		jsr	errorHandler
.1e43					_CIExit:
.1e43	60		rts				rts
.1e44					BufferToStackX:
.1e44	a9 b0		lda #$b0			lda 	#InputBuffer & $FF
.1e46	95 50		sta $50,x			sta 	esInt0,x
.1e48	a9 0c		lda #$0c			lda 	#InputBuffer >> 8
.1e4a	95 58		sta $58,x			sta 	esInt1,x
.1e4c	a9 00		lda #$00			lda 	#0
.1e4e	95 60		sta $60,x			sta 	esInt2,x
.1e50	95 68		sta $68,x			sta 	esInt3,x
.1e52	a9 40		lda #$40			lda 	#$40
.1e54	95 48		sta $48,x			sta 	esType,x
.1e56	60		rts				rts
.1e57					InputString:
.1e57	a9 00		lda #$00			lda 	#0
.1e59	8d b0 0c	sta $0cb0			sta 	InputBuffer
.1e5c					_InputLoop:
.1e5c	a2 02		ldx #$02		ldx	#2
.1e5e	20 f6 14	jsr $14f6		jsr	deviceHandler
.1e61	a2 0a		ldx #$0a		ldx	#10
.1e63	20 f6 14	jsr $14f6		jsr	deviceHandler
.1e66	c9 00		cmp #$00			cmp 	#0
.1e68	f0 f2		beq $1e5c			beq 	_InputLoop
.1e6a	c9 08		cmp #$08			cmp 	#8
.1e6c	f0 19		beq $1e87			beq 	_InputBackspace
.1e6e	c9 0d		cmp #$0d			cmp 	#13
.1e70	f0 21		beq $1e93			beq 	_InputExit
.1e72	ae b0 0c	ldx $0cb0			ldx 	InputBuffer
.1e75	e0 20		cpx #$20			cpx 	#MaxInputSize 			; too many characters
.1e77	f0 e3		beq $1e5c			beq 	_InputLoop
.1e79	9d b1 0c	sta $0cb1,x			sta 	InputBuffer+1,x 		; write char
.1e7c	ee b0 0c	inc $0cb0			inc 	InputBuffer 			; advance count.
.1e7f					_InputPrintLoop:
.1e7f	a2 14		ldx #$14		ldx	#20
.1e81	20 f6 14	jsr $14f6		jsr	deviceHandler
.1e84	4c 5c 1e	jmp $1e5c			jmp	 	_InputLoop
.1e87					_InputBackspace:
.1e87	ad b0 0c	lda $0cb0			lda 	InputBuffer 			; at start
.1e8a	f0 d0		beq $1e5c			beq 	_InputLoop
.1e8c	ce b0 0c	dec $0cb0			dec 	InputBuffer
.1e8f	a9 08		lda #$08			lda 	#8
.1e91	d0 ec		bne $1e7f			bne 	_InputPrintLoop
.1e93					_InputExit:
.1e93	a2 06		ldx #$06		ldx	#6
.1e95	20 f6 14	jsr $14f6		jsr	deviceHandler
.1e98	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/io/print.asm

.0cd1					lastPrintToken:
>0cd1							.fill 	1
.1e99					Command_Print:
.1e99	a9 00		lda #$00			lda 	#0 							; clear LPT to a non token
.1e9b	8d d1 0c	sta $0cd1			sta 	lastPrintToken
.1e9e	88		dey				dey
.1e9f					_PrintLoopSkip:
.1e9f	c8		iny				iny
.1ea0					_PrintLoop:
.1ea0	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows
.1ea2	c9 80		cmp #$80			cmp 	#TOK_EOL  					; done if end of line or colon
.1ea4	f0 5b		beq $1f01			beq 	_PrintExit
.1ea6	c9 ca		cmp #$ca			cmp 	#TKW_COLON
.1ea8	f0 57		beq $1f01			beq 	_PrintExit
.1eaa	8d d1 0c	sta $0cd1			sta 	lastPrintToken 				; update Last print token, so we check ; and ,
.1ead	c9 cc		cmp #$cc			cmp 	#TKW_SEMICOLON 				; ignore semicolon
.1eaf	f0 ee		beq $1e9f			beq 	_PrintLoopSkip
.1eb1	c9 cd		cmp #$cd			cmp 	#TKW_QUOTE 					; ' is new line
.1eb3	f0 3c		beq $1ef1			beq	 	_PrintNewLine
.1eb5	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; , is print tab
.1eb7	f0 40		beq $1ef9			beq 	_PrintTab
.1eb9	20 09 2c	jsr $2c09			jsr 	EvaluateRoot 				; evaluate something at the root
.1ebc	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.1ebe	85 2a		sta $2a				sta 	temp0
.1ec0	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.1ec2	85 2b		sta $2b				sta 	1+(temp0)
.1ec4	a5 48		lda $48				lda 	esType 						; get type
.1ec6	f0 15		beq $1edd			beq		_PrintInteger
.1ec8	4a		lsr a				lsr 	a 							; check for floating point
.1ec9	b0 08		bcs $1ed3			bcs 	_PrintFloat
.1ecb					_PrintString:
.1ecb	a2 00		ldx #$00			ldx 	#0 							; bottom string to temp0
.1ecd	20 1c 20	jsr $201c			jsr 	TOSToTemp0
.1ed0	4c eb 1e	jmp $1eeb			jmp 	_PrintTemp0 				; print no leading space.
.1ed3					_PrintFloat:
.1ed3	a9 00		lda #$00			lda 	#0 							; stack level.
.1ed5	a2 16		ldx #$16		ldx	#22
.1ed7	20 2a 1b	jsr $1b2a		jsr	floatingpointHandler
.1eda	4c e4 1e	jmp $1ee4			jmp 	_PrintSpaceTemp0
.1edd					_PrintInteger:
.1edd	a9 8a		lda #$8a			lda 	#10+$80 					; base 10 signed
.1edf	a2 00		ldx #$00			ldx 	#0 							; bottom stack element
.1ee1	20 18 32	jsr $3218			jsr 	MInt32ToString				; convert to text
.1ee4					_PrintSpaceTemp0:
.1ee4	a9 20		lda #$20			lda 	#32
.1ee6	a2 14		ldx #$14		ldx	#20
.1ee8	20 f6 14	jsr $14f6		jsr	deviceHandler
.1eeb					_PrintTemp0:
.1eeb	20 12 1f	jsr $1f12			jsr 	PrintString
.1eee	4c a0 1e	jmp $1ea0			jmp 	_PrintLoop
.1ef1					_PrintNewLine:
.1ef1	a2 06		ldx #$06		ldx	#6
.1ef3	20 f6 14	jsr $14f6		jsr	deviceHandler
.1ef6	4c 9f 1e	jmp $1e9f			jmp 	_PrintLoopSkip
.1ef9					_PrintTab:
.1ef9	a2 1a		ldx #$1a		ldx	#26
.1efb	20 f6 14	jsr $14f6		jsr	deviceHandler
.1efe	4c 9f 1e	jmp $1e9f			jmp 	_PrintLoopSkip
.1f01					_PrintExit:
.1f01	ad d1 0c	lda $0cd1			lda		lastPrintToken 				; check last token
.1f04	c9 cc		cmp #$cc			cmp 	#TKW_SEMICOLON 				; if , or ; do not print NL
.1f06	f0 09		beq $1f11			beq 	_PrintExit2
.1f08	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.1f0a	f0 05		beq $1f11			beq 	_PrintExit2
.1f0c	a2 06		ldx #$06		ldx	#6
.1f0e	20 f6 14	jsr $14f6		jsr	deviceHandler
.1f11					_PrintExit2:
.1f11	60		rts				rts
.1f12					PrintString:
.1f12	8a		txa				txa
.1f13	48		pha				pha
.1f14	98		tya				tya
.1f15	48		pha				pha
.1f16	a0 00		ldy #$00			ldy 	#0							; get length
.1f18	b1 2a		lda ($2a),y			lda 	(temp0),y
.1f1a	aa		tax				tax 								; into X
.1f1b	e0 00		cpx #$00	_PSLoop:cpx 	#0 							; finished ?
.1f1d	f0 10		beq $1f2f			beq 	_PSExit
.1f1f	ca		dex				dex
.1f20	8a		txa				txa
.1f21	48		pha				pha
.1f22	c8		iny				iny
.1f23	b1 2a		lda ($2a),y			lda 	(temp0),y
.1f25	a2 14		ldx #$14		ldx	#20
.1f27	20 f6 14	jsr $14f6		jsr	deviceHandler
.1f2a	68		pla				pla
.1f2b	aa		tax				tax
.1f2c	4c 1b 1f	jmp $1f1b			jmp 	_PSLoop
.1f2f					_PSExit:
.1f2f	68		pla				pla
.1f30	a8		tay				tay
.1f31	68		pla				pla
.1f32	aa		tax				tax
.1f33	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/io/text.asm

.1f34					Command_CLS:
.1f34	a2 04		ldx #$04		ldx	#4
.1f36	20 f6 14	jsr $14f6		jsr	deviceHandler
.1f39	60		rts				rts
.1f3a					Command_Ink:
.1f3a	a2 00		ldx #$00			ldx 	#0
.1f3c	20 32 2c	jsr $2c32			jsr 	EvaluateSmallInteger
.1f3f	a2 08		ldx #$08		ldx	#8
.1f41	20 f6 14	jsr $14f6		jsr	deviceHandler
.1f44	60		rts				rts
.1f45					Command_Paper:
.1f45	a2 00		ldx #$00			ldx 	#0
.1f47	20 32 2c	jsr $2c32			jsr 	EvaluateSmallInteger
.1f4a	a2 12		ldx #$12		ldx	#18
.1f4c	20 f6 14	jsr $14f6		jsr	deviceHandler
.1f4f	60		rts				rts
.1f50					Command_Locate:
.1f50	a2 00		ldx #$00			ldx 	#0
.1f52	20 32 2c	jsr $2c32			jsr 	EvaluateSmallInteger
.1f55	20 42 33	jsr $3342			jsr 	CheckComma
.1f58	e8		inx				inx
.1f59	20 32 2c	jsr $2c32			jsr 	EvaluateSmallInteger
.1f5c	98		tya				tya
.1f5d	48		pha				pha
.1f5e	a4 51		ldy $51				ldy 	esInt0+1
.1f60	a5 50		lda $50				lda 	esInt0
.1f62	a2 10		ldx #$10		ldx	#16
.1f64	20 f6 14	jsr $14f6		jsr	deviceHandler
.1f67	68		pla				pla
.1f68	a8		tay				tay
.1f69	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/io/vdu.asm

.1f6a					Command_VDU:
.1f6a	20 28 2c	jsr $2c28			jsr 	EvaluateRootInteger 			; get integer at root.
.1f6d	a5 50		lda $50				lda 	esInt0
.1f6f	a2 14		ldx #$14		ldx	#20
.1f71	20 f6 14	jsr $14f6		jsr	deviceHandler
.1f74					_CVNext:
.1f74	b1 28		lda ($28),y			lda 	(codePtr),y 					; what follows ?
.1f76	c8		iny				iny
.1f77	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 						; comma, do again
.1f79	f0 ef		beq $1f6a			beq 	Command_VDU
.1f7b	c9 cc		cmp #$cc			cmp 	#TKW_SEMICOLON 					; semicolon, print MSB
.1f7d	d0 0a		bne $1f89			bne 	_CVExit
.1f7f	a5 58		lda $58				lda 	esInt1
.1f81	a2 14		ldx #$14		ldx	#20
.1f83	20 f6 14	jsr $14f6		jsr	deviceHandler
.1f86	4c 74 1f	jmp $1f74			jmp 	_CVNext
.1f89	88		dey		_CVExit:dey
.1f8a	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/link.asm


;******  Return to file: main/main.asm


;******  Processing file: main/commands/misc/assert.asm

.1f8b					Command_Assert:
.1f8b	20 28 2c	jsr $2c28			jsr 	EvaluateRootInteger 		; what is being asserted.
.1f8e	20 e9 32	jsr $32e9			jsr 	MInt32Zero 					; is it true ?
.1f91	f0 01		beq $1f94			beq 	_CAError
.1f93	60		rts				rts
.1f94					_CAError:
.1f94	a2 04		ldx #$04			ldx 	#ErrorID_Assert
.1f96	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/commands/misc/dim.asm

.1f99					Command_Dim:
.1f99	a2 04		ldx #$04		ldx	#4
.1f9b	20 64 42	jsr $4264		jsr	variableHandler
.1f9e	b1 28		lda ($28),y			lda 	(codePtr),y 				; see what follows.
.1fa0	c8		iny				iny
.1fa1	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; comma follows, go back and do next
.1fa3	f0 f4		beq $1f99			beq 	Command_Dim
.1fa5	88		dey				dey 								; unpick get
.1fa6	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/misc/let.asm

.1fa7					CommandLet:
.1fa7	a2 00		ldx #$00			ldx 	#0  						; get address to write.
.1fa9	20 63 2c	jsr $2c63			jsr 	EvaluateReference
.1fac	a9 8d		lda #$8d			lda 	#TKW_EQUAL 					; check for equals
.1fae	20 2a 33	jsr $332a			jsr 	CheckToken
.1fb1	e8		inx				inx 								; do RHS
.1fb2	20 0b 2c	jsr $2c0b			jsr 	Evaluate 					; evaluate and dereference
.1fb5	ca		dex				dex
.1fb6	20 ba 1f	jsr $1fba			jsr 	WriteValue 					; write it out
.1fb9	60		rts				rts
.1fba					WriteValue:
.1fba	98		tya				tya
.1fbb	48		pha				pha
.1fbc	20 1c 20	jsr $201c			jsr 	TOSToTemp0 					; set temp0 to point to target address.
.1fbf	b5 48		lda $48,x			lda 	esType,x 					; check the string flags match
.1fc1	55 49		eor $49,x			eor 	esType+1,x 					; one string, one number causes an error.
.1fc3	29 40		and #$40			and 	#$40
.1fc5	d0 50		bne $2017			bne		_WVType
.1fc7	a0 01		ldy #$01			ldy 	#1 							; for string, copy 0 and 1.
.1fc9	b5 48		lda $48,x			lda 	esType,x 					; check for string assignment
.1fcb	29 40		and #$40			and 	#$40
.1fcd	d0 1f		bne $1fee			bne 	_WVCopyString
.1fcf	b5 48		lda $48,x			lda 	esType,x 					; check both are integer.
.1fd1	15 49		ora $49,x			ora 	esType+1,x
.1fd3	4a		lsr a				lsr 	a
.1fd4	90 22		bcc $1ff8			bcc 	_WVCopyData4 				; copy 4 data bytes.
.1fd6	b5 48		lda $48,x			lda 	esType,x
.1fd8	4a		lsr a				lsr 	a
.1fd9	90 3c		bcc $2017			bcc 	_WVType
.1fdb	e8		inx				inx 								; force the value being written to be a float.
.1fdc	20 6d 28	jsr $286d			jsr 	BPMakeFloat
.1fdf	ca		dex				dex
.1fe0	20 1c 20	jsr $201c			jsr 	TOSToTemp0 					; set Temp0 to write address
.1fe3	e8		inx				inx
.1fe4	8a		txa				txa
.1fe5	a2 22		ldx #$22		ldx	#34
.1fe7	20 2a 1b	jsr $1b2a		jsr	floatingpointHandler
.1fea	aa		tax				tax
.1feb	4c 14 20	jmp $2014			jmp 	_WVCopyExit
.1fee					_WVCopyString:
.1fee	8a		txa				txa
.1fef	a2 10		ldx #$10		ldx	#16
.1ff1	20 6d 36	jsr $366d		jsr	stringHandler
.1ff4	aa		tax				tax
.1ff5	4c 14 20	jmp $2014			jmp 	_WVCopyExit
.1ff8					_WVCopyData4:
.1ff8	b5 48		lda $48,x			lda 	esType,x 					; is the int ref a byte ref ?
.1ffa	29 20		and #$20			and 	#$20 						; (e.g. is bit 5 set)
.1ffc	d0 10		bne $200e			bne 	_WVCopyData1
.1ffe	a0 03		ldy #$03			ldy 	#3
.2000	b5 69		lda $69,x			lda 	esInt3+1,x
.2002	91 2a		sta ($2a),y			sta 	(temp0),y
.2004	88		dey				dey
.2005	b5 61		lda $61,x			lda 	esInt2+1,x
.2007	91 2a		sta ($2a),y			sta 	(temp0),y
.2009	88		dey				dey
.200a	b5 59		lda $59,x			lda 	esInt1+1,x
.200c	91 2a		sta ($2a),y			sta 	(temp0),y
.200e					_WVCopyData1:
.200e	a0 00		ldy #$00			ldy 	#0
.2010	b5 51		lda $51,x			lda 	esInt0+1,x
.2012	91 2a		sta ($2a),y			sta 	(temp0),y
.2014					_WVCopyExit:
.2014	68		pla				pla
.2015	a8		tay				tay
.2016	60		rts				rts
.2017					_WVType:
.2017	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.2019	20 18 15	jsr $1518		jsr	errorHandler
.201c					TOSToTemp0:
.201c	b5 50		lda $50,x			lda 	esInt0,x
.201e	85 2a		sta $2a				sta 	temp0
.2020	b5 58		lda $58,x			lda 	esInt1,x
.2022	85 2b		sta $2b				sta 	temp0+1
.2024	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/misc/poke.asm

.2025					Command_Poke:
.2025	a9 01		lda #$01			lda 	#1
.2027	d0 06		bne $202f			bne 	PokeGeneral
.2029					Command_Doke:
.2029	a9 02		lda #$02			lda 	#2
.202b	d0 02		bne $202f			bne 	PokeGeneral
.202d					Command_Loke:
.202d	a9 03		lda #$03			lda 	#3
.202f					PokeGeneral:
.202f	48		pha				pha 								; save id (PDL = 123)
.2030	20 28 2c	jsr $2c28			jsr 	EvaluateRootInteger 		; target address
.2033	20 42 33	jsr $3342			jsr	 	CheckComma
.2036	e8		inx				inx
.2037	20 2a 2c	jsr $2c2a			jsr 	EvaluateInteger 			; what value to POKE ?
.203a	ca		dex				dex
.203b	20 1c 20	jsr $201c			jsr 	TOSToTemp0 					; temp0 points to the target address
.203e	84 32		sty $32				sty 	tempShort 					; save Y
.2040	68		pla				pla 								; get copy type (1-3) and dispatch
.2041	aa		tax				tax
.2042	ca		dex				dex
.2043	f0 14		beq $2059			beq 	_Poke1
.2045	ca		dex				dex
.2046	f0 0b		beq $2053			beq 	_Poke2
.2048	a0 03		ldy #$03			ldy 	#3							; put 4 bytes
.204a	a5 69		lda $69				lda 	esInt3+1
.204c	91 2a		sta ($2a),y			sta 	(temp0),y
.204e	88		dey				dey
.204f	a5 61		lda $61				lda 	esInt2+1
.2051	91 2a		sta ($2a),y			sta 	(temp0),y
.2053					_Poke2:
.2053	a0 01		ldy #$01			ldy 	#1
.2055	a5 59		lda $59				lda 	esInt1+1
.2057	91 2a		sta ($2a),y			sta 	(temp0),y
.2059					_Poke1:
.2059	a0 00		ldy #$00			ldy 	#0
.205b	a5 51		lda $51				lda 	esInt0+1
.205d	91 2a		sta ($2a),y			sta 	(temp0),y
.205f	a4 32		ldy $32				ldy 	tempShort 					; restore Y and exit
.2061	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/misc/rem.asm

.2062					Command_Rem:
.2062					Command_Rem2:
.2062	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows
.2064	c9 85		cmp #$85			cmp 	#TOK_STR 					; if it is a string then skip it.
.2066	d0 06		bne $206e			bne 	_CRNotString
.2068	c8		iny				iny
.2069	98		tya				tya
.206a	38		sec				sec
.206b	71 28		adc ($28),y			adc 	(codePtr),y 				; get string size, add to Y, +1 for the length
.206d	a8		tay				tay
.206e					_CRNotString:
.206e	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/misc/stopend.asm

.206f					CommandStop:
.206f	a2 06		ldx #$06			ldx 	#ErrorID_Stop
.2071	20 18 15	jsr $1518		jsr	errorHandler
.2074					CommandEnd:
.2074	4c ab 33	jmp $33ab			jmp 	WarmStart
.2077					CommandXemu:
.2077	4c ff ff	jmp $ffff			jmp 	$FFFF 						; fudge to crash out of emulator
.207a					AdvanceNextLine:
.207a	a0 00		ldy #$00			ldy 	#0 							; get offset
.207c	b1 28		lda ($28),y			lda 	(codePtr),y
.207e	18		clc				clc 								; add to codePtr
.207f	65 28		adc $28				adc 	codePtr
.2081	85 28		sta $28				sta 	codePtr
.2083	90 02		bcc $2087			bcc 	_ANLNoCarry
.2085	e6 29		inc $29				inc 	codePtr+1
.2087					_ANLNoCarry:
.2087	b1 28		lda ($28),y			lda 	(codePtr),y 				; if end of program (or was just stand alone.
.2089	f0 e9		beq $2074			beq 	CommandEnd 					; execute END
.208b	a0 03		ldy #$03			ldy 	#3 							; start of tokens on line.
.208d	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/for.asm

.208e					Command_FOR:
.208e	a9 46		lda #$46			lda 	#markerFOR 					; allocate the space and set the marker
.2090	a2 0b		ldx #$0b			ldx 	#11
.2092	20 5d 33	jsr $335d			jsr 	RSClaim
.2095	20 a7 1f	jsr $1fa7			jsr 	CommandLET 					; do the same as LET FOR [a = 4]
.2098	a5 48		lda $48				lda 	esType 						; check type should be integer reference.
.209a	c9 80		cmp #$80			cmp 	#$80 						; we do not do FOR floats.
.209c	d0 4c		bne $20ea			bne 	_CFType
.209e	a9 ce		lda #$ce			lda 	#TKW_TO 					; check TO present.
.20a0	20 2a 33	jsr $332a			jsr 	CheckToken
.20a3	a2 01		ldx #$01			ldx 	#1 							; keep the variable address in stack 0
.20a5	20 2a 2c	jsr $2c2a			jsr 	EvaluateInteger				; get terminal value in stack 1
.20a8	98		tya				tya
.20a9	48		pha				pha
.20aa	a0 04		ldy #$04			ldy 	#4
.20ac	a5 50		lda $50				lda		esInt0 						; copy the address of the index variable into 4 and 5
.20ae	91 37		sta ($37),y			sta 	(rsPointer),y
.20b0	c8		iny				iny
.20b1	a5 58		lda $58				lda		esInt1
.20b3	91 37		sta ($37),y			sta 	(rsPointer),y
.20b5	c8		iny				iny
.20b6	a9 01		lda #$01			lda 	#1  						; the default step in 6, (-128 .. 127 only)
.20b8	91 37		sta ($37),y			sta 	(rsPointer),y
.20ba	c8		iny				iny
.20bb	a5 51		lda $51				lda		esInt0+1 					; terminal value in 7 to 11.
.20bd	91 37		sta ($37),y			sta 	(rsPointer),y
.20bf	c8		iny				iny
.20c0	a5 59		lda $59				lda		esInt1+1
.20c2	91 37		sta ($37),y			sta 	(rsPointer),y
.20c4	c8		iny				iny
.20c5	a5 61		lda $61				lda		esInt2+1
.20c7	91 37		sta ($37),y			sta 	(rsPointer),y
.20c9	c8		iny				iny
.20ca	a5 69		lda $69				lda		esInt3+1
.20cc	91 37		sta ($37),y			sta 	(rsPointer),y
.20ce	68		pla				pla
.20cf	a8		tay				tay
.20d0	b1 28		lda ($28),y			lda 	(codePtr),y 				; followed by STEP.
.20d2	c9 cf		cmp #$cf			cmp 	#TKW_STEP
.20d4	d0 0e		bne $20e4			bne 	_CFDone
.20d6	c8		iny				iny									; skip over step.
.20d7	20 2a 2c	jsr $2c2a			jsr 	EvaluateInteger 			; get step
.20da	98		tya				tya
.20db	48		pha				pha
.20dc	b5 50		lda $50,x			lda 	esInt0,x 					; copy it into step (bit lazy here)
.20de	a0 06		ldy #$06			ldy 	#6
.20e0	91 37		sta ($37),y			sta 	(rsPointer),y
.20e2	68		pla				pla
.20e3	a8		tay				tay
.20e4					_CFDone:
.20e4	a9 01		lda #$01			lda 	#1
.20e6	20 89 33	jsr $3389			jsr 	RSSavePosition 				; save position.
.20e9	60		rts				rts
.20ea					_CFType:
.20ea	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.20ec	20 18 15	jsr $1518		jsr	errorHandler
.20ef					Command_NEXT:
.20ef	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.20f1	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.20f3	c9 46		cmp #$46			cmp 	#markerFOR 						; does it match
.20f5	f0 05		beq $20fc			beq 	_isok
.20f7	a2 10		ldx #$10			ldx 	#ErrorID_nextErr
.20f9	20 18 15	jsr $1518		jsr	errorHandler
.20fc					_isok:
.20fc	b1 28		lda ($28),y			lda 	(codePtr),y 				; is it NEXT <index>
.20fe	c9 40		cmp #$40			cmp 	#$40 						; e.g. a variable follows 00-3F
.2100	b0 18		bcs $211a			bcs 	_CNNoIndex
.2102	a2 00		ldx #$00			ldx 	#0 							; start on stack
.2104	20 63 2c	jsr $2c63			jsr 	EvaluateReference 			; this is the variable/parameter to localise.
.2107	98		tya				tya
.2108	48		pha				pha
.2109	a0 04		ldy #$04			ldy 	#4 							; check same variable as that stored at +4,+5
.210b	b1 37		lda ($37),y			lda 	(rsPointer),y
.210d	d5 50		cmp $50,x			cmp 	esInt0,x
.210f	d0 76		bne $2187			bne 	_CNBadIndex
.2111	c8		iny				iny
.2112	b1 37		lda ($37),y			lda 	(rsPointer),y
.2114	d5 58		cmp $58,x			cmp 	esInt1,x
.2116	d0 6f		bne $2187			bne 	_CNBadIndex
.2118	68		pla				pla
.2119	a8		tay				tay
.211a					_CNNoIndex:
.211a	98		tya				tya
.211b	48		pha				pha
.211c	a0 04		ldy #$04			ldy 	#4 							; make temp0 point to the index
.211e	b1 37		lda ($37),y			lda 	(rsPointer),y
.2120	85 2a		sta $2a				sta 	temp0
.2122	c8		iny				iny
.2123	b1 37		lda ($37),y			lda 	(rsPointer),y
.2125	85 2b		sta $2b				sta 	temp0+1
.2127	c8		iny				iny
.2128	a2 00		ldx #$00			ldx 	#0 							; X is the sign extend part of the step.
.212a	b1 37		lda ($37),y			lda 	(rsPointer),y 				; get the step.
.212c	85 2f		sta $2f				sta 	temp2+1 					; save for later.
.212e	10 01		bpl $2131			bpl 	_CNSignX
.2130	ca		dex				dex  								; X = $FF
.2131					_CNSignX:
.2131	18		clc				clc 								; add to the LSB
.2132	a0 00		ldy #$00			ldy 	#0
.2134	71 2a		adc ($2a),y			adc 	(temp0),y
.2136	91 2a		sta ($2a),y			sta 	(temp0),y
.2138					_CNPropogate:
.2138	c8		iny				iny  								; add the sign extended in X to the rest.
.2139	8a		txa				txa
.213a	71 2a		adc ($2a),y			adc 	(temp0),y
.213c	91 2a		sta ($2a),y			sta 	(temp0),y
.213e	c8		iny				iny
.213f	8a		txa				txa
.2140	71 2a		adc ($2a),y			adc 	(temp0),y
.2142	91 2a		sta ($2a),y			sta 	(temp0),y
.2144	c8		iny				iny
.2145	8a		txa				txa
.2146	71 2a		adc ($2a),y			adc 	(temp0),y
.2148	91 2a		sta ($2a),y			sta 	(temp0),y
.214a	18		clc				clc 								; point temp1 to the terminal value stored in the stack.
.214b	a5 37		lda $37				lda 	rsPointer
.214d	69 07		adc #$07			adc 	#7
.214f	85 2c		sta $2c				sta 	temp1
.2151	a9 00		lda #$00			lda 	#0
.2153	85 2e		sta $2e				sta 	temp2 						; clear temp2, which is the OR of all the subtractions.
.2155	a8		tay				tay 								; and clear the Y register again.
.2156	65 38		adc $38				adc 	rsPointer+1
.2158	85 2d		sta $2d				sta 	temp1+1
.215a	38		sec				sec 								; calculate current - limit oring interim values.
.215b	20 93 21	jsr $2193			jsr 	_CNCompare 					; each of these does a byte.
.215e	20 93 21	jsr $2193			jsr 	_CNCompare 					; we calculate the OR of all these subtractions.
.2161	20 93 21	jsr $2193			jsr 	_CNCompare 					; and the carry of the subtraction.
.2164	20 93 21	jsr $2193			jsr 	_CNCompare
.2167	50 02		bvc $216b			bvc 	_CNNoOverflow 				; converts to a signed comparison on the sign bit.
.2169	49 80		eor #$80			eor 	#$80
.216b					_CNNoOverflow:
.216b	a4 2f		ldy $2f				ldy 	temp2+1						; get step back
.216d	30 1d		bmi $218c			bmi 	_CNCheckDownto
.216f	c9 00		cmp #$00			cmp 	#0
.2171	30 0c		bmi $217f			bmi 	_CNLoopRound 				; loop round if < =
.2173	a5 2e		lda $2e				lda 	temp2
.2175	f0 08		beq $217f			beq 	_CNLoopRound
.2177					_CNLoopExit:
.2177	68		pla				pla
.2178	a8		tay				tay
.2179	a9 0b		lda #$0b			lda 	#11
.217b	20 7f 33	jsr $337f			jsr 	RSFree
.217e	60		rts				rts
.217f					_CNLoopRound:
.217f	68		pla				pla
.2180	a8		tay				tay
.2181	a9 01		lda #$01			lda 	#1
.2183	20 9c 33	jsr $339c			jsr 	RSLoadPosition				; go back to the loop top
.2186	60		rts				rts
.2187					_CNBadIndex:
.2187	a2 13		ldx #$13			ldx 	#ErrorID_BadIndex
.2189	20 18 15	jsr $1518		jsr	errorHandler
.218c					_CNCheckDownto:
.218c	c9 00		cmp #$00			cmp 	#0
.218e	10 ef		bpl $217f			bpl 	_CNLoopRound
.2190	4c 77 21	jmp $2177			jmp 	_CNLoopExit
.2193					_CNCompare:
.2193	b1 2a		lda ($2a),y			lda 	(temp0),y 					; do the subtraction - compare don't care about answer
.2195	f1 2c		sbc ($2c),y			sbc 	(temp1),y
.2197	05 2e		ora $2e				ora 	temp2 						; Or into temp2 (does not affect carry)
.2199	85 2e		sta $2e				sta 	temp2
.219b	c8		iny				iny
.219c	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/if.asm

.219d					CommandIf:
.219d	20 28 2c	jsr $2c28			jsr 	EvaluateRootInteger 		; get what's being tested.
.21a0	b1 28		lda ($28),y			lda 	(codePtr),y 				; check for IF .. THEN or IF .. GOTO which are single lines.
.21a2	c9 91		cmp #$91			cmp 	#TKW_GOTO
.21a4	f0 04		beq $21aa			beq 	_IfSimple
.21a6	c9 a1		cmp #$a1			cmp 	#TKW_THEN
.21a8	d0 1b		bne $21c5			bne 	_IfComplex
.21aa					_IfSimple:
.21aa	20 e9 32	jsr $32e9			jsr 	MInt32Zero					; check if TOS zero
.21ad	f0 10		beq $21bf			beq 	_IfEOL 						; go to next line.
.21af	b1 28		lda ($28),y			lda 	(codePtr),y 				; get and skip token.
.21b1	c8		iny				iny
.21b2	c9 91		cmp #$91			cmp 	#TKW_GOTO 					; was it if GOTO ?
.21b4	f0 0c		beq $21c2			beq 	_IfGoto 					; do the Goto code
.21b6	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows the THEN ?
.21b8	29 c0		and #$c0			and 	#$C0 						; check $40-$7F
.21ba	c9 40		cmp #$40			cmp 	#$40 						; e.g. number IF x = 0 THEN 170
.21bc	f0 04		beq $21c2			beq 	_IfGoto
.21be	60		rts				rts 								; else continue on this line.
.21bf					_IfEOL:
.21bf	4c 7a 20	jmp $207a			jmp 	AdvanceNextLine 			; go to next line
.21c2					_IfGoto:
.21c2	4c b1 1d	jmp $1db1			jmp 	CommandGoto
.21c5					_IfComplex:
.21c5	20 e9 32	jsr $32e9			jsr 	MInt32Zero 					; is it true ?
.21c8	f0 01		beq $21cb			beq 	_IFSkip 					; if non-zero then skip to ELSE/ENDIF
.21ca	60		rts				rts 								; else continue.
.21cb					_IFSkip:
.21cb	a9 d6		lda #$d6			lda	 	#TKW_ELSE 					; test failed, go to ELSE or ENDIF whichever comes first.
.21cd	a2 a2		ldx #$a2			ldx 	#TKW_ENDIF
.21cf	4c 67 24	jmp $2467			jmp		ScanForward
.21d2					Command_ELSE:
.21d2	a2 a2		ldx #$a2			ldx 	#TKW_ENDIF
.21d4	8a		txa				txa
.21d5	4c 67 24	jmp $2467			jmp		ScanForward
.21d8					Command_ENDIF:
.21d8	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/local.asm

.0cd2					storeSize:
>0cd2							.fill 	1
.21d9					CommandLocal:
.21d9	a2 00		ldx #$00			ldx 	#0
.21db	20 f7 21	jsr $21f7			jsr 	LocaliseVariable 			; localise one.
.21de					_CLCheckNext:
.21de	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows ?
.21e0	c8		iny				iny
.21e1	c9 8d		cmp #$8d			cmp 	#TKW_EQUAL 					; something local "x = 2" ?
.21e3	f0 06		beq $21eb			beq 	_CLAssignment
.21e5	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; comma try again.
.21e7	f0 f0		beq $21d9			beq 	CommandLocal
.21e9	88		dey				dey
.21ea	60		rts				rts
.21eb					_CLAssignment:
.21eb	a2 01		ldx #$01			ldx 	#1
.21ed	20 0b 2c	jsr $2c0b			jsr 	Evaluate 					; evaluate RHS
.21f0	ca		dex				dex
.21f1	20 ba 1f	jsr $1fba			jsr 	WriteValue
.21f4	4c de 21	jmp $21de			jmp 	_CLCheckNext
.21f7					LocaliseVariable:
.21f7	b1 28		lda ($28),y			lda 	(codePtr),y 				; check it's a variable.
.21f9	c9 40		cmp #$40			cmp 	#$40
.21fb	b0 67		bcs $2264			bcs 	_LVSyntax
.21fd	8a		txa				txa 								; get the address of that variable.
.21fe	a2 02		ldx #$02		ldx	#2
.2200	20 64 42	jsr $4264		jsr	variableHandler
.2203	aa		tax				tax
.2204	8a		txa				txa
.2205	48		pha				pha
.2206	98		tya				tya
.2207	48		pha				pha
.2208	20 1c 20	jsr $201c			jsr 	TOSToTemp0 					; the address of the variable is now in temp0.
.220b	b5 48		lda $48,x			lda 	esType,x 					; get the type
.220d	0a		asl a				asl 	a
.220e	10 16		bpl $2226			bpl 	_LVPushNumber
.2210	a0 00		ldy #$00			ldy 	#0 							; put address of data in temp1
.2212	b1 2a		lda ($2a),y			lda 	(temp0),y
.2214	c8		iny				iny
.2215	85 2c		sta $2c				sta 	temp1
.2217	b1 2a		lda ($2a),y			lda 	(temp0),y
.2219	85 2d		sta $2d				sta 	temp1+1
.221b	a0 00		ldy #$00			ldy 	#0 	 						; get length
.221d	b1 2c		lda ($2c),y			lda 	(temp1),y
.221f	aa		tax				tax 								; into X
.2220	e8		inx				inx 								; +1 for length.
.2221	a9 24		lda #$24			lda 	#markerString
.2223	4c 3b 22	jmp $223b			jmp 	_LVWriteFrame
.2226					_LVPushNumber:
.2226	a5 2a		lda $2a				lda 	temp0 						; storage address and data source are the same
.2228	85 2c		sta $2c				sta 	temp1
.222a	a5 2b		lda $2b				lda 	temp0+1
.222c	85 2d		sta $2d				sta 	temp1+1
.222e	b5 48		lda $48,x			lda 	esType,x 					; put float flag into carry.
.2230	4a		lsr a				lsr 	a
.2231	a9 25		lda #$25			lda 	#markerInt 					; get marker and size.
.2233	a2 04		ldx #$04			ldx 	#VarISize
.2235	90 04		bcc $223b			bcc 	_LVIsInteger
.2237	a9 23		lda #$23			lda 	#markerFloat
.2239	a2 06		ldx #$06			ldx 	#VarFSize
.223b					_LVIsInteger:
.223b					_LVWriteFrame:
.223b	8e d2 0c	stx $0cd2			stx 	storeSize 					; number of bytes to copy from (temp0)
.223e	e8		inx				inx 								; allocate 3 bytes, 2 for the address, 1 for the marker.
.223f	e8		inx				inx
.2240	e8		inx				inx
.2241	20 5d 33	jsr $335d			jsr 	RSClaim 					; create the stack frame.
.2244	a5 2a		lda $2a				lda 	temp0 						; copy the target address to slots 1 & 2
.2246	a0 01		ldy #$01			ldy 	#1
.2248	91 37		sta ($37),y			sta 	(rsPointer),y
.224a	c8		iny				iny
.224b	a5 2b		lda $2b				lda 	temp0+1
.224d	91 37		sta ($37),y			sta 	(rsPointer),y
.224f	a0 00		ldy #$00			ldy 	#0
.2251					_LVCopyData:
.2251	b1 2c		lda ($2c),y			lda 	(temp1),y 					; get data from source, temp1
.2253	c8		iny				iny 								; write allowing for the header bit.
.2254	c8		iny				iny
.2255	c8		iny				iny
.2256	91 37		sta ($37),y			sta 	(rsPointer),y
.2258	88		dey				dey
.2259	88		dey				dey
.225a	ce d2 0c	dec $0cd2			dec 	storeSize 					; do it storesize times
.225d	d0 f2		bne $2251			bne 	_LVCopyData
.225f	68		pla				pla
.2260	a8		tay				tay
.2261	68		pla				pla
.2262	aa		tax				tax
.2263	60		rts				rts
.2264					_LVSyntax:
.2264	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.2266	20 18 15	jsr $1518		jsr	errorHandler
.2269					RestoreLocals:
.2269	a2 00		ldx #$00			ldx 	#0
.226b	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.226d	c9 40		cmp #$40			cmp	 	#64
.226f	90 01		bcc $2272			bcc 	_RLocal
.2271	60		rts				rts
.2272					_RLocal:
.2272	8a		txa				txa
.2273	48		pha				pha
.2274	98		tya				tya
.2275	48		pha				pha
.2276	a0 01		ldy #$01			ldy 	#1 							; copy target address to temp0
.2278	b1 37		lda ($37),y			lda 	(rsPointer),y
.227a	85 2a		sta $2a				sta 	temp0
.227c	c8		iny				iny
.227d	b1 37		lda ($37),y			lda 	(rsPointer),y
.227f	85 2b		sta $2b				sta 	temp0+1
.2281	a0 00		ldy #$00			ldy 	#0 							; get type back.
.2283	b1 37		lda ($37),y			lda 	(rsPointer),y
.2285	c9 24		cmp #$24			cmp 	#markerString 				; string is ... different :)
.2287	f0 28		beq $22b1			beq 	_RString
.2289	a2 04		ldx #$04			ldx		#VARISize 					; size integer
.228b	c9 25		cmp #$25			cmp 	#markerInt
.228d	f0 02		beq $2291			beq 	_RIsInteger
.228f	a2 06		ldx #$06			ldx 	#VARFSize 					; size float
.2291					_RIsInteger:
.2291	8a		txa				txa
.2292	48		pha				pha
.2293	a0 03		ldy #$03			ldy 	#3							; start size to copy back from pointer.
.2295					_RCopyBack:
.2295	b1 37		lda ($37),y			lda 	(rsPointer),y
.2297	88		dey				dey
.2298	88		dey				dey
.2299	88		dey				dey
.229a	91 2a		sta ($2a),y			sta 	(temp0),y
.229c	c8		iny				iny
.229d	c8		iny				iny
.229e	c8		iny				iny
.229f	c8		iny				iny
.22a0	ca		dex				dex
.22a1	d0 f2		bne $2295			bne 	_RCopyBack
.22a3	68		pla				pla 								; get size add 3
.22a4	18		clc				clc
.22a5	69 03		adc #$03			adc 	#3 							; (2 for address one for marker)
.22a7					_RRestoreAAndLoop:
.22a7	20 7f 33	jsr $337f			jsr 	RSFree
.22aa	68		pla				pla
.22ab	a8		tay				tay
.22ac	68		pla				pla
.22ad	aa		tax				tax
.22ae	4c 69 22	jmp $2269			jmp 	RestoreLocals 				; go see if there are any more locals.
.22b1					_RString:
.22b1	a2 00		ldx #$00			ldx 	#0
.22b3	a0 01		ldy #$01			ldy 	#1 							; set up for a string write.
.22b5	b1 37		lda ($37),y			lda 	(rsPointer),y
.22b7	95 50		sta $50,x			sta 	esInt0,x
.22b9	c8		iny				iny
.22ba	b1 37		lda ($37),y			lda 	(rsPointer),y
.22bc	95 58		sta $58,x			sta 	esInt1,x
.22be	18		clc				clc
.22bf	a5 37		lda $37				lda 	rsPointer
.22c1	69 03		adc #$03			adc 	#3
.22c3	95 51		sta $51,x			sta 	esInt0+1,x
.22c5	a5 38		lda $38				lda 	rsPointer+1
.22c7	69 00		adc #$00			adc 	#0
.22c9	95 59		sta $59,x			sta 	esInt1+1,x
.22cb	8a		txa				txa
.22cc	a2 10		ldx #$10		ldx	#16
.22ce	20 6d 36	jsr $366d		jsr	stringHandler
.22d1	a0 03		ldy #$03			ldy 	#3 							; get string length
.22d3	b1 37		lda ($37),y			lda 	(rsPointer),y
.22d5	18		clc				clc
.22d6	69 04		adc #$04			adc 	#4 							; add 4 (pointer, marker, length) to restore.
.22d8	4c a7 22	jmp $22a7			jmp 	_RRestoreAAndLoop

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/proc.asm

.0cd3					paramCount:
>0cd3							.fill 	1
.22db					CallProc:
.22db	20 63 23	jsr $2363			jsr 	FindProcedure 				; find procedure, put in temp0. A contains name length.
.22de	48		pha				pha 								; save length on stack
.22df	85 32		sta $32				sta 	tempShort 					; save length in tempShort
.22e1	a5 2b		lda $2b				lda 	temp0+1 					; save procedure target on stack.
.22e3	48		pha				pha
.22e4	a5 2a		lda $2a				lda 	temp0
.22e6	48		pha				pha
.22e7	98		tya				tya 								; calculate Y + length
.22e8	18		clc				clc
.22e9	65 32		adc $32				adc 	tempShort
.22eb	a8		tay				tay
.22ec	a2 00		ldx #$00			ldx 	#0 							; where the first parameter goes - 1
.22ee					_CallProcEvalParams:
.22ee	e8		inx				inx
.22ef	b1 28		lda ($28),y			lda 	(codePtr),y 				; do we have ) , e.g. the end of the parameters ?
.22f1	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.22f3	f0 0b		beq $2300			beq 	_CPDoneParams
.22f5	20 0b 2c	jsr $2c0b			jsr 	Evaluate 					; evaluate a parameter
.22f8	b1 28		lda ($28),y			lda 	(codePtr),Y 				; get what's next, preconsume
.22fa	c8		iny				iny
.22fb	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; if comma, go get another parameter
.22fd	f0 ef		beq $22ee			beq 	_CallProcEvalParams
.22ff	88		dey				dey 								; undo consumption.
.2300					_CPDoneParams:
.2300	20 35 33	jsr $3335			jsr 	CheckRightParen 			; check closing parenthesis.
.2303	8e d3 0c	stx $0cd3			stx 	paramCount 					; store parameter count+1
.2306	a2 04		ldx #$04			ldx 	#4							; make space on stack
.2308	a9 50		lda #$50			lda 	#markerPROC
.230a	20 5d 33	jsr $335d			jsr 	RSClaim
.230d	a9 01		lda #$01			lda 	#1 							; store return address.
.230f	20 89 33	jsr $3389			jsr 	RSSavePosition
.2312	68		pla				pla 								; get the new code Ptr
.2313	85 28		sta $28				sta 	codePtr
.2315	68		pla				pla
.2316	85 29		sta $29				sta 	codePtr+1
.2318	68		pla				pla 								; length of name + 4 is the param start.
.2319	18		clc				clc
.231a	69 04		adc #$04			adc 	#4
.231c	a8		tay				tay
.231d	a2 ff		ldx #$ff			ldx 	#$FF
.231f					_CPLoadParameters:
.231f	e8		inx				inx 								; point to where the address should be loaded.
.2320	ec d3 0c	cpx $0cd3			cpx 	paramCount 					; too many parameters in definition ?
.2323	f0 1e		beq $2343			beq 	_CPParamError
.2325	b1 28		lda ($28),y			lda 	(codePtr),y					; what follows
.2327	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN 				; is it the right bracket
.2329	f0 0e		beq $2339			beq 	_CPParamComplete 			; done all the parameters, perhaps.
.232b	20 f7 21	jsr $21f7			jsr 	LocaliseVariable 			; make following variable local, ref in tos,x
.232e	20 ba 1f	jsr $1fba			jsr 	WriteValue 					; copy the evaluated parameter into there.
.2331	b1 28		lda ($28),y			lda 	(codePtr),y 				; followed by a comma ?
.2333	c8		iny				iny
.2334	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.2336	f0 e7		beq $231f			beq 	_CPLoadParameters
.2338	88		dey				dey 								; no, unconsume and check for )
.2339					_CPParamComplete:
.2339	20 35 33	jsr $3335			jsr 	CheckRightParen 			; check )
.233c	e8		inx				inx 								; check right number of parameters have been consumed
.233d	ec d3 0c	cpx $0cd3			cpx 	paramCount
.2340	d0 01		bne $2343			bne 	_CPParamError
.2342	60		rts				rts
.2343					_CPParamError:
.2343	a2 18		ldx #$18			ldx 	#ErrorID_Params
.2345	20 18 15	jsr $1518		jsr	errorHandler
.2348					ReturnProc:
.2348	20 69 22	jsr $2269			jsr 	RestoreLocals 				; get the locals back.
.234b	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.234d	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.234f	c9 50		cmp #$50			cmp 	#markerPROC 						; does it match
.2351	f0 05		beq $2358			beq 	_isok
.2353	a2 12		ldx #$12			ldx 	#ErrorID_endProcErr
.2355	20 18 15	jsr $1518		jsr	errorHandler
.2358					_isok:
.2358	a9 01		lda #$01			lda 	#1
.235a	20 9c 33	jsr $339c			jsr 	RSLoadPosition 				; reload the position from offset 1.
.235d	a9 04		lda #$04			lda 	#4 							; throw 4 bytes from stack.
.235f	20 7f 33	jsr $337f			jsr 	RSFree
.2362	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/proctable.asm

.0cd4					procList:
>0cd4							.fill 	2		 					; terminated by name high being zero.
.0cd6					yInLine:
>0cd6							.fill 	1
.2363					FindProcedure:
.2363	8c d6 0c	sty $0cd6			sty 	yInLine 					; save current position.
.2366	20 21 24	jsr $2421			jsr 	CalculateProcedureHash		; calculate the hash of the procedure.
.2369	85 2c		sta $2c				sta 	temp1
.236b	ad d4 0c	lda $0cd4			lda		procList 					; put procList address in temp2
.236e	85 2e		sta $2e				sta 	temp2
.2370	ad d5 0c	lda $0cd5			lda 	procList+1
.2373	85 2f		sta $2f				sta 	temp2+1
.2375	a0 00		ldy #$00			ldy 	#0 							; position in this table.
.2377					_FPLoop:
.2377	b1 2e		lda ($2e),y			lda 	(temp2),y
.2379	f0 4f		beq $23ca			beq 	_FPError 					; if so, we don't know this procedure.
.237b	85 2b		sta $2b				sta 	temp0+1 					; copy MSB/LSB to temp0 as we go.
.237d	c8		iny				iny
.237e	b1 2e		lda ($2e),y			lda 	(temp2),y
.2380	85 2a		sta $2a				sta 	temp0
.2382	c8		iny				iny
.2383	b1 2e		lda ($2e),y			lda 	(temp2),y					; check the procedure hash.
.2385	c5 2c		cmp $2c				cmp 	temp1
.2387	d0 2b		bne $23b4			bne 	_FPNext 					; hash is different, go to next.
.2389	38		sec				sec
.238a	ad d6 0c	lda $0cd6			lda 	yInLine 					; position in line must be at least 4
.238d	e9 04		sbc #$04			sbc 	#4
.238f	18		clc				clc
.2390	65 28		adc $28				adc 	codePtr
.2392	85 30		sta $30				sta 	temp3
.2394	a5 29		lda $29				lda 	codePtr+1
.2396	69 00		adc #$00			adc 	#0
.2398	85 31		sta $31				sta 	temp3+1
.239a	98		tya				tya
.239b	48		pha				pha
.239c	a0 04		ldy #$04			ldy 	#4
.239e					_FPCName:
.239e	b1 30		lda ($30),y			lda 	(temp3),y 					; check the same
.23a0	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.23a2	d0 0e		bne $23b2			bne 	_FPpulYNext 				; if different go to next one.
.23a4	c8		iny				iny
.23a5	c9 3a		cmp #$3a			cmp 	#$3A
.23a7	90 f5		bcc $239e			bcc 	_FPCName 					; compare the whole lot....
.23a9	68		pla				pla 								; throw away the saved Y
.23aa	98		tya				tya 								; length of name is Y-4
.23ab	38		sec				sec
.23ac	e9 04		sbc #$04			sbc 	#4
.23ae	ac d6 0c	ldy $0cd6			ldy 	yInLine  					; get the original Y back
.23b1	60		rts				rts
.23b2					_FPpulYNext:
.23b2	68		pla				pla
.23b3	a8		tay				tay
.23b4					_FPNext:
.23b4	c8		iny				iny 								; next procedure record.
.23b5	10 c0		bpl $2377			bpl 	_FPLoop 					; if done 128 already ... e.g. Y -ve
.23b7	98		tya				tya 								; subtract 128 from Y
.23b8	38		sec				sec
.23b9	e9 80		sbc #$80			sbc 	#128
.23bb	a8		tay				tay
.23bc	18		clc				clc 								; add 128 to temp2, so we can have more than
.23bd	a5 2e		lda $2e				lda 	temp2 						; 255/3 = 85 procedures
.23bf	69 80		adc #$80			adc 	#128
.23c1	85 2e		sta $2e				sta 	temp2
.23c3	90 b2		bcc $2377			bcc 	_FPLoop
.23c5	e6 2f		inc $2f				inc 	temp2+1
.23c7	4c 77 23	jmp $2377			jmp 	_FPLoop
.23ca					_FPError:
.23ca	a2 17		ldx #$17			ldx 	#ErrorID_NoProc
.23cc	20 18 15	jsr $1518		jsr	errorHandler
.23cf					ScanProc:
.23cf	98		tya				tya
.23d0	48		pha				pha
.23d1	a5 35		lda $35				lda 	lowMemory 					; copy the start of the procList, at low memory
.23d3	8d d4 0c	sta $0cd4			sta 	procList
.23d6	a5 36		lda $36				lda 	lowMemory+1
.23d8	8d d5 0c	sta $0cd5			sta 	procList+1
.23db	20 4b 27	jsr $274b			jsr 	ResetCodeAddress 			; back to the start.
.23de					_ScanLoop:
.23de	a0 00		ldy #$00			ldy 	#0 							; check reached program end
.23e0	b1 28		lda ($28),y			lda 	(codePtr),y
.23e2	f0 2a		beq $240e			beq 	_ScanExit
.23e4	a0 03		ldy #$03			ldy 	#3							; get first token
.23e6	b1 28		lda ($28),y			lda 	(codePtr),y
.23e8	c9 9d		cmp #$9d			cmp 	#TKW_DEFPROC				; skip to next if not DEFPROC
.23ea	d0 12		bne $23fe			bne 	_ScanNext
.23ec	a5 29		lda $29				lda 	codePtr+1 					; write high and low address of this line.
.23ee	20 16 24	jsr $2416			jsr 	_ScanWrite
.23f1	a5 28		lda $28				lda 	codePtr
.23f3	20 16 24	jsr $2416			jsr 	_ScanWrite
.23f6	a0 04		ldy #$04			ldy 	#4 							; start of name part
.23f8	20 21 24	jsr $2421			jsr 	CalculateProcedureHash 		; calculate procedure hash
.23fb	20 16 24	jsr $2416			jsr 	_ScanWrite					; and write that
.23fe					_ScanNext:
.23fe	18		clc				clc
.23ff	a0 00		ldy #$00			ldy 	#0
.2401	b1 28		lda ($28),y			lda 	(codePtr),y
.2403	65 28		adc $28				adc 	codePtr
.2405	85 28		sta $28				sta 	codePtr
.2407	90 d5		bcc $23de			bcc 	_ScanLoop
.2409	e6 29		inc $29				inc 	codePtr+1
.240b	4c de 23	jmp $23de			jmp 	_ScanLoop
.240e					_ScanExit:
.240e	a9 00		lda #$00			lda 	#0 							; write ending zero.
.2410	20 16 24	jsr $2416			jsr 	_ScanWrite
.2413	68		pla				pla
.2414	a8		tay				tay
.2415	60		rts				rts
.2416					_ScanWrite:
.2416	a0 00		ldy #$00			ldy 	#0
.2418	91 35		sta ($35),y			sta 	(lowMemory),y
.241a	e6 35		inc $35				inc 	lowMemory
.241c	d0 02		bne $2420			bne 	_SWNoCarry
.241e	e6 36		inc $36				inc 	lowMemory+1
.2420					_SWNoCarry:
.2420	60		rts				rts
.2421					CalculateProcedureHash:
.2421	a9 00		lda #$00			lda 	#0 							; clear hash.
.2423	85 2a		sta $2a				sta 	temp0
.2425					_CPHLoop:
.2425	18		clc				clc 								; add character and rotate and add carry back in
.2426	b1 28		lda ($28),y			lda 	(codePtr),y
.2428	65 2a		adc $2a				adc 	temp0
.242a	6a		ror a				ror 	a
.242b	69 0d		adc #$0d			adc 	#13 						; primes usually good for this sort of thing.
.242d	85 2a		sta $2a				sta 	temp0 						; (down with this sort of thing)
.242f	b1 28		lda ($28),y			lda 	(codePtr),y
.2431	c8		iny				iny 								; advance incase we go round again.
.2432	c9 3a		cmp #$3a			cmp 	#$3A
.2434	90 ef		bcc $2425			bcc 	_CPHLoop
.2436	a5 2a		lda $2a				lda 	temp0
.2438	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/repeat.asm

.2439					Command_Repeat:
.2439	a2 04		ldx #$04			ldx 	#4 							; allocate 4 bytes on stack for REPEAT
.243b	a9 52		lda #$52			lda 	#markerREPEAT 				; repeat marker allocate 4 bytes
.243d	20 5d 33	jsr $335d			jsr 	RSClaim
.2440	a9 01		lda #$01			lda 	#1 							; save position at offset 1.
.2442	20 89 33	jsr $3389			jsr 	RSSavePosition
.2445	60		rts				rts
.2446					Command_Until:
.2446	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.2448	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.244a	c9 52		cmp #$52			cmp 	#markerREPEAT 						; does it match
.244c	f0 05		beq $2453			beq 	_isok
.244e	a2 0f		ldx #$0f			ldx 	#ErrorID_untilErr
.2450	20 18 15	jsr $1518		jsr	errorHandler
.2453					_isok:
.2453	20 28 2c	jsr $2c28			jsr 	EvaluateRootInteger 		; at the bottom.
.2456	20 e9 32	jsr $32e9			jsr 	MInt32Zero					; check if TOS zero
.2459	d0 06		bne $2461			bne 	_CUExit
.245b	a9 01		lda #$01			lda 	#1
.245d	20 9c 33	jsr $339c			jsr 	RSLoadPosition 				; reload the position from offset 1.
.2460	60		rts				rts
.2461					_CUExit:
.2461	a9 04		lda #$04			lda 	#4 							; throw 4 bytes from stack.
.2463	20 7f 33	jsr $337f			jsr 	RSFree
.2466	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/scanner.asm

.2467					ScanForward:
.2467	85 2c		sta $2c				sta 	temp1 						; save tokens to search in temp1/temp1+1
.2469	86 2d		stx $2d				stx 	temp1+1
.246b	a9 00		lda #$00			lda 	#0 							; temp2 counts structure levels.
.246d	85 2e		sta $2e				sta 	temp2
.246f	b1 28		lda ($28),y	_SFLoop:lda 	(codePtr),y 				; look at the next token.
.2471	c8		iny				iny
.2472	a6 2e		ldx $2e				ldx 	temp2 						; check structure levels are zero.
.2474	d0 08		bne $247e			bne 	_SFNoCheck 					; if so, check token against entered values.
.2476	c5 2c		cmp $2c				cmp 	temp1 						; if either matches, we've reached the token
.2478	f0 24		beq $249e			beq 	_SFExit 					; at the same strcture depth.
.247a	c5 2d		cmp $2d				cmp 	temp1+1
.247c	f0 20		beq $249e			beq 	_SFExit
.247e					_SFNoCheck:
.247e	c9 80		cmp #$80			cmp 	#$80 						; if it is 00-7F (variable/number) just skip it.
.2480	90 ed		bcc $246f			bcc 	_SFLoop
.2482	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; $80-$85 is various specials.
.2484	90 19		bcc $249f			bcc 	_SFSpecials
.2486	c9 99		cmp #$99			cmp 	#TOK_STRUCTST 				; if < structure start then continue
.2488	90 e5		bcc $246f			bcc 	_SFLoop
.248a	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST 				; if >= unary start (after structure) then continue.
.248c	b0 e1		bcs $246f			bcs 	_SFLoop
.248e	aa		tax				tax  								; token in X, and look up the adjuster.
.248f	bd 46 2b	lda $2b46,x			lda 	ELBinaryOperatorInfo-TOK_BINARYST,x
.2492	38		sec				sec 								; convert to an offset ($FF,$01)
.2493	e9 81		sbc #$81			sbc 	#$81
.2495	18		clc				clc 								; add to depth
.2496	65 2e		adc $2e				adc 	temp2
.2498	85 2e		sta $2e				sta 	temp2
.249a	10 d3		bpl $246f			bpl 	_SFLoop 					; +ve okay to continue
.249c	30 07		bmi $24a5			bmi 	SFError 					; if gone -ve then we have a nesting error
.249e	60		rts		_SFExit:rts
.249f					_SFSpecials:
.249f	20 aa 24	jsr $24aa			jsr 	ScannerSkipSpecial
.24a2	4c 6f 24	jmp $246f			jmp 	_SFLoop
.24a5					SFError:
.24a5	a2 14		ldx #$14			ldx 	#ErrorID_Struct
.24a7	20 18 15	jsr $1518		jsr	errorHandler
.24aa					ScannerSkipSpecial:
.24aa	c9 80		cmp #$80			cmp 	#TOK_EOL 					; $80, advance to next line.
.24ac	f0 10		beq $24be			beq 	_SFNextLine
.24ae	c9 84		cmp #$84			cmp 	#TOK_FPC					; $84, skip embedded float
.24b0	f0 2b		beq $24dd			beq 	_SFFloatSkip
.24b2	c9 85		cmp #$85			cmp 	#TOK_STR 					; $85, skip string
.24b4	f0 02		beq $24b8			beq 	_SFSkipString
.24b6	c8		iny				iny									; $81,$82,$83 shift, so just advance over the shifted
.24b7	60		rts				rts 								; token.
.24b8					_SFSkipString:
.24b8	98		tya				tya
.24b9	38		sec				sec
.24ba	71 28		adc ($28),y			adc 	(codePtr),y
.24bc	a8		tay				tay
.24bd	60		rts				rts
.24be					_SFNextLine:
.24be	a0 00		ldy #$00			ldy 	#0 							; get offset
.24c0	b1 28		lda ($28),y			lda 	(codePtr),y
.24c2	18		clc				clc 								; add to code pointer.
.24c3	65 28		adc $28				adc 	codePtr
.24c5	85 28		sta $28				sta 	codePtr
.24c7	90 02		bcc $24cb			bcc		_SFNLNoCarry
.24c9	e6 29		inc $29				inc 	codePtr+1
.24cb					_SFNLNoCarry:
.24cb	b1 28		lda ($28),y			lda 	(codePtr),y 				; reached the end of the program.
.24cd	d0 0b		bne $24da			bne		_SFXNL 						; no go round again
.24cf	a5 2c		lda $2c				lda 	temp1
.24d1	c9 d9		cmp #$d9			cmp 	#TKW_DATA 					; if searching for Data different error.
.24d3	d0 d0		bne $24a5			bne 	SFError 					; read uses this to search for data statements
.24d5	a2 1d		ldx #$1d			ldx 	#ErrorID_DataError
.24d7	20 18 15	jsr $1518		jsr	errorHandler
.24da	a0 03		ldy #$03	_SFXNL:	ldy 	#3
.24dc	60		rts				rts
.24dd					_SFFloatSkip:
.24dd	98		tya				tya 								; skip over an embedded float.
.24de	18		clc				clc
.24df	69 05		adc #$05			adc 	#FloatEmbeddedSize
.24e1	a8		tay				tay
.24e2	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/while.asm

.24e3					Command_While:
.24e3	a9 57		lda #$57			lda 	#markerWhile 				; gosub marker allocate 4 bytes.
.24e5	a2 04		ldx #$04			ldx 	#4
.24e7	20 5d 33	jsr $335d			jsr 	RSClaim 					; create on stack.
.24ea	88		dey				dey
.24eb	a9 01		lda #$01			lda 	#1
.24ed	20 89 33	jsr $3389			jsr 	RSSavePosition 				; save position before the WHILE keyword.
.24f0	c8		iny				iny
.24f1	20 2a 2c	jsr $2c2a			jsr 	EvaluateInteger				; get the conditional
.24f4	20 e9 32	jsr $32e9			jsr 	MInt32Zero 	 				; if zero, skip forward to the fail code.
.24f7	f0 01		beq $24fa			beq 	_CWFail
.24f9	60		rts				rts
.24fa					_CWFail:
.24fa	a9 04		lda #$04			lda 	#4
.24fc	20 7f 33	jsr $337f			jsr 	RSFree 						; close the just opened position.
.24ff	a9 9f		lda #$9f			lda 	#TKW_WEND 					; scan forward past WEND.
.2501	aa		tax				tax
.2502	20 67 24	jsr $2467			jsr 	ScanForward
.2505	60		rts				rts
.2506					Command_Wend:
.2506	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.2508	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.250a	c9 57		cmp #$57			cmp 	#markerWHILE 						; does it match
.250c	f0 05		beq $2513			beq 	_isok
.250e	a2 11		ldx #$11			ldx 	#ErrorID_wendErr
.2510	20 18 15	jsr $1518		jsr	errorHandler
.2513					_isok:
.2513	a9 01		lda #$01			lda 	#1
.2515	20 9c 33	jsr $339c			jsr 	RSLoadPosition				; go back until true
.2518	a9 04		lda #$04			lda 	#4
.251a	20 7f 33	jsr $337f			jsr 	RSFree 						; close the loop
.251d	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/system/clear.asm

.251e					CommandClear:
.251e					XCommandClear:
.251e	98		tya				tya
.251f	48		pha				pha
.2520	ad cc 0a	lda $0acc			lda 	endMemory					; set high memory = end of memory
.2523	85 33		sta $33				sta 	highMemory
.2525	ad cd 0a	lda $0acd			lda 	endMemory+1
.2528	85 34		sta $34				sta 	highMemory+1
.252a	ad c8 0a	lda $0ac8			lda 	basePage 					; work out where the program ends.
.252d	85 2a		sta $2a				sta 	temp0
.252f	ad c9 0a	lda $0ac9			lda 	basePage+1
.2532	85 2b		sta $2b				sta 	temp0+1
.2534					_CCFindEnd:
.2534	a0 00		ldy #$00			ldy 	#0
.2536	b1 2a		lda ($2a),y			lda 	(temp0),y
.2538	f0 0c		beq $2546			beq 	_CCFoundEnd 				; offset zero is end.
.253a	18		clc				clc
.253b	65 2a		adc $2a				adc 	temp0 						; move to next line
.253d	85 2a		sta $2a				sta 	temp0
.253f	90 f3		bcc $2534			bcc 	_CCFindEnd
.2541	e6 2b		inc $2b				inc 	temp0+1
.2543	4c 34 25	jmp $2534			jmp 	_CCFindEnd
.2546					_CCFoundEnd:
.2546	a5 2a		lda $2a				lda 	temp0 						; put temp0 in lowMemory
.2548	85 35		sta $35				sta 	lowMemory
.254a	a5 2b		lda $2b				lda 	temp0+1
.254c	85 36		sta $36				sta 	lowMemory+1
.254e	18		clc				clc 								; put temp0+1 in endProgram
.254f	a5 2a		lda $2a				lda 	temp0
.2551	69 01		adc #$01			adc 	#1
.2553	8d ca 0a	sta $0aca			sta 	endProgram
.2556	a5 2b		lda $2b				lda 	temp0+1
.2558	69 00		adc #$00			adc 	#0
.255a	8d cb 0a	sta $0acb			sta 	endProgram+1
.255d	18		clc				clc 								; put a bit of space in.
.255e	a5 35		lda $35				lda 	lowMemory
.2560	69 04		adc #$04			adc 	#4
.2562	85 35		sta $35				sta 	lowMemory
.2564	90 02		bcc $2568			bcc 	_CCNoCarry
.2566	e6 36		inc $36				inc 	lowMemory+1
.2568					_CCNoCarry:
.2568	20 4f 33	jsr $334f			jsr 	RSReset 					; reset the return stack.
.256b	a2 06		ldx #$06		ldx	#6
.256d	20 64 42	jsr $4264		jsr	variableHandler
.2570	20 cf 23	jsr $23cf			jsr 	ScanProc 					; scan for procedures
.2573	20 54 1d	jsr $1d54			jsr 	CommandRestore 				; do a restore
.2576	68		pla				pla
.2577	a8		tay				tay
.2578	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/system/list.asm

.0cd7					structIndent:
>0cd7							.fill 	1
.2579					CommandList:
.2579	a2 00		ldx #$00			ldx		#0 							; set start/end lines in stack 0/1 to 0 and $FFFF
.257b	8e d7 0c	stx $0cd7			stx 	structIndent
.257e	20 c2 32	jsr $32c2			jsr 	MInt32False
.2581	e8		inx				inx
.2582	20 be 32	jsr $32be			jsr 	MInt32True
.2585	b1 28		lda ($28),y			lda 	(codePtr),y 				; look at first token
.2587	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; list ,xxxx
.2589	f0 15		beq $25a0			beq 	_CLEndLine
.258b	c9 00		cmp #$00			cmp 	#0 							; list ... on its own.
.258d	30 1b		bmi $25aa			bmi 	_CLDoListing 				; do the whole lot.
.258f	a2 00		ldx #$00			ldx 	#0 							; get start line at stack:0
.2591	20 2a 2c	jsr $2c2a			jsr 	EvaluateInteger
.2594	b1 28		lda ($28),y			lda 	(codePtr),y 				; , follows ?
.2596	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.2598	f0 06		beq $25a0			beq 	_CLEndLine
.259a	20 00 32	jsr $3200			jsr 	MInt32CopyUp 				; copy first to second if just a line number on its
.259d	4c aa 25	jmp $25aa			jmp 	_CLDoListing 				; own e.g. list 1100
.25a0					_CLEndLine:
.25a0	c8		iny				iny 								; skip comma
.25a1	b1 28		lda ($28),y			lda 	(codePtr),y  				; no number follows, then its list 1000,
.25a3	30 05		bmi $25aa			bmi 	_CLDoListing
.25a5	a2 01		ldx #$01			ldx 	#1 							; get the last line to list
.25a7	20 2a 2c	jsr $2c2a			jsr 	EvaluateInteger				; get end
.25aa					_CLDoListing:
.25aa	20 4b 27	jsr $274b			jsr 	ResetCodeAddress 			; back to the start.
.25ad					_CLCheckLoop:
.25ad	a2 02		ldx #$02		ldx	#2
.25af	20 f6 14	jsr $14f6		jsr	deviceHandler
.25b2	a0 00		ldy #$00			ldy 	#0							; check end.
.25b4	b1 28		lda ($28),y			lda 	(codePtr),y
.25b6	f0 41		beq $25f9			beq 	_CLEnd
.25b8	a2 00		ldx #$00			ldx 	#0 							; compare vs lower.
.25ba	20 fc 25	jsr $25fc			jsr 	CLCompareLineTOS
.25bd	c9 ff		cmp #$ff			cmp 	#255 						; if < skip
.25bf	f0 28		beq $25e9			beq 	_CLNext
.25c1	e8		inx				inx
.25c2	20 fc 25	jsr $25fc			jsr 	CLCompareLineTOS 			; compare vs higher
.25c5	c9 01		cmp #$01			cmp 	#1
.25c7	f0 20		beq $25e9			beq 	_CLNext
.25c9	a9 80		lda #$80			lda 	#$80 						; undo any down indents this line.
.25cb	20 1e 26	jsr $261e			jsr 	CLStructureCheck
.25ce	ad d7 0c	lda $0cd7			lda 	structIndent 				; indent level.
.25d1	10 02		bpl $25d5			bpl 	_CLPositive
.25d3	a9 00		lda #$00			lda 	#0
.25d5					_CLPositive:
.25d5	a2 04		ldx #$04		ldx	#4
.25d7	20 93 3e	jsr $3e93		jsr	tokeniserHandler
.25da	a9 82		lda #$82			lda 	#$82 						; up indents from this point on.
.25dc	20 1e 26	jsr $261e			jsr 	CLStructureCheck
.25df	ad d7 0c	lda $0cd7			lda 	structIndent
.25e2	10 05		bpl $25e9			bpl 	_CLNext
.25e4	a9 00		lda #$00			lda 	#0
.25e6	8d d7 0c	sta $0cd7			sta 	structIndent
.25e9					_CLNext:
.25e9	a0 00		ldy #$00			ldy 	#0 							; go to next line.
.25eb	b1 28		lda ($28),y			lda 	(codePtr),y
.25ed	18		clc				clc
.25ee	65 28		adc $28				adc 	codePtr
.25f0	85 28		sta $28				sta 	codePtr
.25f2	90 b9		bcc $25ad			bcc 	_CLCheckLoop
.25f4	e6 29		inc $29				inc 	codePtr+1
.25f6	4c ad 25	jmp $25ad			jmp 	_CLCheckLoop
.25f9					_CLEnd:
.25f9	4c ab 33	jmp $33ab			jmp 	WarmStart 					; warm start after list.
.25fc					CLCompareLineTOS:
.25fc	a0 01		ldy #$01			ldy 	#1
.25fe	b1 28		lda ($28),y			lda 	(codePtr),y
.2600	55 50		eor $50,x			eor 	esInt0,x
.2602	85 2a		sta $2a				sta 	temp0
.2604	c8		iny				iny
.2605	b1 28		lda ($28),y			lda 	(codePtr),y
.2607	55 58		eor $58,x			eor 	esInt1,x
.2609	05 2a		ora $2a				ora 	temp0
.260b	f0 10		beq $261d			beq 	_CLCLTExit
.260d	88		dey				dey
.260e	b1 28		lda ($28),y			lda 	(codePtr),y
.2610	d5 50		cmp $50,x			cmp 	esInt0,x
.2612	c8		iny				iny
.2613	b1 28		lda ($28),y			lda 	(codePtr),y
.2615	f5 58		sbc $58,x			sbc 	esInt1,x
.2617	a9 ff		lda #$ff			lda 	#255
.2619	90 02		bcc $261d			bcc 	_CLCLTExit
.261b	a9 01		lda #$01			lda 	#1
.261d					_CLCLTExit:
.261d	60		rts				rts
.261e					CLStructureCheck:
.261e	85 2a		sta $2a				sta 	temp0
.2620	a0 03		ldy #$03			ldy 	#3
.2622					_CLSCLoop:
.2622	b1 28		lda ($28),y			lda 	(codePtr),y 				; get and consume token.
.2624	c8		iny				iny
.2625	c9 80		cmp #$80			cmp 	#$80
.2627	90 f9		bcc $2622			bcc 	_CLSCLoop 					; $00-$7F just step over.
.2629	f0 28		beq $2653			beq		_CLSCExit					; EOL return
.262b	c9 86		cmp #$86			cmp 	#$86 						; special handler
.262d	90 1e		bcc $264d			bcc 	_CLSCSpecial
.262f	c9 99		cmp #$99			cmp 	#TOK_STRUCTST 				; check if structure changer.
.2631	90 ef		bcc $2622			bcc 	_CLSCLoop
.2633	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST
.2635	b0 eb		bcs $2622			bcs 	_CLSCLoop
.2637	aa		tax				tax 								; get adjustment
.2638	bd 46 2b	lda $2b46,x			lda 	ELBinaryOperatorInfo-TOK_BINARYST,x
.263b	c5 2a		cmp $2a				cmp 	temp0	 					; if what we're searching for
.263d	d0 e3		bne $2622			bne 	_CLSCLoop
.263f	38		sec				sec
.2640	e9 81		sbc #$81			sbc 	#$81 						; convert to offset
.2642	0a		asl a				asl 	a 							; double indent step
.2643	18		clc				clc
.2644	6d d7 0c	adc $0cd7			adc 	structIndent 				; add to structure indent
.2647	8d d7 0c	sta $0cd7			sta 	structIndent
.264a	4c 22 26	jmp $2622			jmp 	_CLSCLoop
.264d					_CLSCSpecial:
.264d	20 aa 24	jsr $24aa			jsr 	ScannerSkipSpecial
.2650	4c 22 26	jmp $2622			jmp 	_CLSCLoop
.2653					_CLSCExit:
.2653	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/system/loadsave.asm

.2654					CommandLoad:
.2654	20 7c 26	jsr $267c			jsr 	CLSParameters 					; get parameters for load.
.2657	08		php				php
.2658	a2 0e		ldx #$0e		ldx	#14
.265a	20 f6 14	jsr $14f6		jsr	deviceHandler
.265d	28		plp				plp
.265e	b0 08		bcs $2668			bcs 	_CLExit 						; if CC then load a program, so warm start.
.2660	20 1e 25	jsr $251e			jsr 	CommandClear
.2663	a2 04		ldx #$04		ldx	#4
.2665	20 16 1d	jsr $1d16		jsr	interactionHandler
.2668					_CLExit
.2668	60		rts				rts
.2669					CommandSave:
.2669	20 7c 26	jsr $267c			jsr 	CLSParameters					; get parameters for save
.266c	90 08		bcc $2676			bcc 	_CSNoOverrideAddress
.266e	20 42 33	jsr $3342			jsr 	CheckComma 						; should be a comma.
.2671	a2 02		ldx #$02			ldx 	#2
.2673	20 2a 2c	jsr $2c2a			jsr 	EvaluateInteger 				; get save end address.
.2676					_CSNoOverrideAddress:
.2676	a2 18		ldx #$18		ldx	#24
.2678	20 f6 14	jsr $14f6		jsr	deviceHandler
.267b	60		rts				rts
.267c					CLSParameters:
.267c	a2 00		ldx #$00			ldx 	#0 								; string
.267e	20 1f 2c	jsr $2c1f			jsr 	EvaluateString
.2681	e8		inx				inx 									; erase out +1 +2
.2682	20 c2 32	jsr $32c2			jsr 	MInt32False
.2685	e8		inx				inx
.2686	20 c2 32	jsr $32c2			jsr 	MInt32False
.2689	ad c8 0a	lda $0ac8			lda 	basePage 						; default start address.
.268c	85 51		sta $51				sta 	esInt0+1
.268e	ad c9 0a	lda $0ac9			lda 	basePage+1
.2691	85 59		sta $59				sta 	esInt1+1
.2693	ad ca 0a	lda $0aca			lda 	endProgram 						; default end address
.2696	85 52		sta $52				sta 	esInt0+2
.2698	ad cb 0a	lda $0acb			lda 	endProgram+1
.269b	85 5a		sta $5a				sta 	esInt1+2
.269d	b1 28		lda ($28),y			lda 	(codePtr),y 					; , following
.269f	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.26a1	d0 08		bne $26ab			bne 	_CLSDefault
.26a3	c8		iny				iny 									; skip comma
.26a4	a2 01		ldx #$01			ldx 	#1 								; get numeric value.
.26a6	20 2a 2c	jsr $2c2a			jsr 	EvaluateInteger
.26a9	38		sec				sec
.26aa	60		rts				rts
.26ab					_CLSDefault:
.26ab	18		clc				clc
.26ac	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/system/new.asm

.26ad					Command_New:
.26ad					Command_XNew:
.26ad	20 4b 27	jsr $274b			jsr 	ResetCodeAddress 			; point to first line
.26b0	a0 00		ldy #$00			ldy 	#0 							; and zap it.
.26b2	98		tya				tya
.26b3	91 28		sta ($28),y			sta 	(codePtr),y
.26b5	20 1e 25	jsr $251e			jsr 	CommandClear 				; clear everything down.
.26b8	4c 74 20	jmp $2074			jmp 	CommandEND 					; do END code, as there's nothing to run.

;******  Return to file: main/main.asm


;******  Processing file: main/commands/system/run.asm

.0cd8					breakCounter:
>0cd8								.fill 	1
.0cd9					breakIncrement:
>0cd9								.fill 	1
.26bb					Command_Run:
.26bb					XCommand_Run:
.26bb	a2 ff		ldx #$ff			ldx 	#$FF 						; reset the stack.
.26bd	9a		txs				txs
.26be	20 45 27	jsr $2745			jsr 	BreakOn 					; turn break on
.26c1	20 1e 25	jsr $251e			jsr 	CommandClear 				; clear everything.
.26c4	20 4b 27	jsr $274b			jsr 	ResetCodeAddress 			; back to the start.
.26c7					Command_RunFrom:
.26c7	a0 03		ldy #$03			ldy 	#3 							; over offset/line #
.26c9					CRNextInstruction:
.26c9	64 3a		stz $3a				stz 	softMemAlloc+1
.26cb	ad d8 0c	lda $0cd8			lda 	breakCounter 				; check for break.
.26ce	6d d9 0c	adc $0cd9			adc 	breakIncrement
.26d1	8d d8 0c	sta $0cd8			sta 	breakCounter
.26d4	90 05		bcc $26db			bcc 	_CRNoChecks
.26d6	a2 02		ldx #$02		ldx	#2
.26d8	20 f6 14	jsr $14f6		jsr	deviceHandler
.26db					_CRNoChecks
.26db	b1 28		lda ($28),y			lda 	(codePtr),y 				; get next token.
.26dd	10 1c		bpl $26fb			bpl 	_CRNotToken
.26df	c9 c9		cmp #$c9			cmp 	#TOK_TOKENS 				; if in the tokens then do that token.
.26e1	b0 0c		bcs $26ef			bcs 	_CRExecute
.26e3	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST 				; unary is ignored.
.26e5	b0 71		bcs $2758			bcs 	Unimplemented
.26e7	c9 99		cmp #$99			cmp 	#TOK_STRUCTST 				; execute structures.
.26e9	b0 04		bcs $26ef			bcs 	_CRExecute
.26eb	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; if one of the system tokens $80-$85 do that
.26ed	b0 16		bcs $2705			bcs 	_CRCheckIndirect 			; if in that unused range check for ! or ? or AND
.26ef					_CRExecute:
.26ef	c8		iny				iny 								; consume it.
.26f0	0a		asl a				asl 	a 							; double it, losing most significant bit.
.26f1	aa		tax				tax
.26f2	20 f8 26	jsr $26f8			jsr 	_CRRunRoutine 				; we want to do jsr (group0vectors,x)
.26f5	4c c9 26	jmp $26c9			jmp 	CRNextInstruction
.26f8					_CRRunRoutine:
.26f8	7c 62 27	jmp ($2762,x)			jmp 	(Group0Vectors,x)
.26fb					_CRNotToken:
.26fb	c9 40		cmp #$40			cmp 	#$40 						; if 0-3F then it is a letter
.26fd	b0 59		bcs $2758			bcs 	Unimplemented
.26ff					_CRDefaultLet:
.26ff	20 a7 1f	jsr $1fa7			jsr 	CommandLet 					; do the default, LET
.2702	4c c9 26	jmp $26c9			jmp 	CRNextInstruction
.2705					_CRCheckIndirect:
.2705	c9 86		cmp #$86			cmp 	#TKW_AND 					; AND (assembler)
.2707	f0 0a		beq $2713			beq 	_CRAndCommand
.2709	c9 97		cmp #$97			cmp 	#TKW_PLING 					; !<term> =
.270b	f0 f2		beq $26ff			beq 	_CRDefaultLet
.270d	c9 98		cmp #$98			cmp 	#TKW_QMARK 					; ?<term> =
.270f	f0 ee		beq $26ff			beq 	_CRDefaultLet
.2711	d0 45		bne $2758			bne 	Unimplemented
.2713					_CRAndCommand:
.2713	c8		iny				iny 								; skip over the AND token
.2714	a9 95		lda #$95			lda 	#TKW_LPARENANDRPAREN 		; replace it with the pseudo-and
.2716	20 30 27	jsr $2730			jsr 	CommandAssembler 			; do the assembler command
.2719	4c c9 26	jmp $26c9			jmp 	CRNextInstruction 			; and loop round.
.271c					CommandShift1:
.271c	b1 28		lda ($28),y			lda 	(codePtr),y 				; get shifted value
.271e	10 38		bpl $2758			bpl 	Unimplemented 				; we have an error as this should not happen.
.2720	c8		iny				iny 								; advance over it.
.2721	c9 94		cmp #$94			cmp 	#TKA_GROUP1 				; is it an assembler constant ?
.2723	b0 0b		bcs $2730			bcs 	CommandAssembler
.2725	0a		asl a				asl 	a 							; double into X
.2726	aa		tax				tax
.2727	7c 26 28	jmp ($2826,x)			jmp 	(Group1Vectors-12,x) 		; and do the code.
.272a					CommandShift2:
.272a	a9 ff		lda #$ff			lda 	#$FF 						; $FF means command not unary function.
.272c	20 4d 18	jsr $184d		jsr	extensionHandler
.272f	60		rts				rts
.2730					CommandAssembler:
.2730	a2 02		ldx #$02		ldx	#2
.2732	20 b4 13	jsr $13b4		jsr	assemblerHandler
.2735	60		rts				rts
.2736					CommandAssemblerLabel:
.2736	a2 04		ldx #$04		ldx	#4
.2738	20 b4 13	jsr $13b4		jsr	assemblerHandler
.273b	60		rts				rts
.273c					CommandColon:
.273c	60		rts				rts
.273d					CommandBreak:
.273d	20 28 2c	jsr $2c28			jsr 	EvaluateRootInteger
.2740	20 e9 32	jsr $32e9			jsr 	MInt32Zero
.2743	f0 02		beq $2747			beq 	BreakOff
.2745					BreakOn:
.2745	a2 08		ldx #$08			ldx 	#8
.2747					BreakOff:
.2747	8e d9 0c	stx $0cd9			stx 	breakIncrement
.274a	60		rts				rts
.274b					ResetCodeAddress:
.274b	ad c8 0a	lda $0ac8			lda 	basePage 					; copy basePage to code Pointer
.274e	85 28		sta $28				sta 	codePtr
.2750	ad c9 0a	lda $0ac9			lda 	basePage+1
.2753	85 29		sta $29				sta 	codePtr+1
.2755	a0 03		ldy #$03			ldy 	#3 							; offset after offset link and line#
.2757	60		rts				rts
.2758					Unimplemented:
.2758	a2 01		ldx #$01			ldx 	#ErrorID_Missing
.275a	20 18 15	jsr $1518		jsr	errorHandler
.275d					TKErr01:
.275d					TKErr02:
.275d					TKErr03:
.275d					TKErr04:
.275d					TKErr05:
.275d					TKErr06:
.275d					TKErr07:
.275d					TKErr08:
.275d					TKErr09:
.275d					TKErr10:
.275d					TKErr11:
.275d					TKErr12:
.275d					TKErr13:
.275d					TKErr14:
.275d	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.275f	20 18 15	jsr $1518		jsr	errorHandler

;******  Processing file: main/commands/system/../../../generated/tokenvectors0.inc

.2762					Group0Vectors:
>2762	7a 20					.word	AdvanceNextLine          ; $80 [[eol]]
>2764	1c 27					.word	CommandShift1            ; $81 [[sh1]]
>2766	2a 27					.word	CommandShift2            ; $82 [[sh2]]
>2768	5d 27					.word	TKErr09                  ; $83 [[sh3]]
>276a	5d 27					.word	TKErr10                  ; $84 [[fpc]]
>276c	5d 27					.word	TKErr08                  ; $85 [[str]]
>276e	0f 29					.word	AndHandler               ; $86 and
>2770	fc 28					.word	OrHandler                ; $87 or
>2772	e9 28					.word	XorHandler               ; $88 xor
>2774	31 2a					.word	CompareGreaterEq         ; $89 >=
>2776	3b 2a					.word	CompareLessEq            ; $8a <=
>2778	1d 2a					.word	CompareGreater           ; $8b >
>277a	13 2a					.word	CompareLess              ; $8c <
>277c	09 2a					.word	CompareEquals            ; $8d =
>277e	27 2a					.word	CompareNotEquals         ; $8e <>
>2780	7a 28					.word	AddHandler               ; $8f +
>2782	9d 28					.word	SubHandler               ; $90 -
>2784	35 29					.word	ShrHandler               ; $91 >>
>2786	22 29					.word	ShlHandler               ; $92 <<
>2788	b0 28					.word	MulHandler               ; $93 *
>278a	c3 28					.word	DivHandler               ; $94 /
>278c	d6 28					.word	ModHandler               ; $95 mod
>278e	6e 29					.word	PowerHandler             ; $96 ^
>2790	48 29					.word	WordRefHandler           ; $97 !
>2792	5b 29					.word	ByteRefHandler           ; $98 ?
>2794	39 24					.word	Command_Repeat           ; $99 repeat
>2796	e3 24					.word	Command_While            ; $9a while
>2798	8e 20					.word	Command_FOR              ; $9b for
>279a	9d 21					.word	CommandIf                ; $9c if
>279c	5d 27					.word	TKErr04                  ; $9d defproc
>279e	46 24					.word	Command_Until            ; $9e until
>27a0	06 25					.word	Command_Wend             ; $9f wend
>27a2	ef 20					.word	Command_NEXT             ; $a0 next
>27a4	5d 27					.word	TKErr06                  ; $a1 then
>27a6	d8 21					.word	Command_ENDIF            ; $a2 endif
>27a8	48 23					.word	ReturnProc               ; $a3 endproc
>27aa	95 2b					.word	UnaryParenthesis         ; $a4 (
>27ac	77 2d					.word	UnaryLen                 ; $a5 len(
>27ae	bb 2d					.word	UnarySgn                 ; $a6 sgn(
>27b0	a4 2d					.word	UnaryAbs                 ; $a7 abs(
>27b2	14 2e					.word	Unary_Random             ; $a8 random(
>27b4	5e 2e					.word	Unary_Page               ; $a9 page
>27b6	be 32					.word	MInt32True               ; $aa true
>27b8	c2 32					.word	MInt32False              ; $ab false
>27ba	29 2e					.word	Unary_Min                ; $ac min(
>27bc	2d 2e					.word	Unary_Max                ; $ad max(
>27be	36 2f					.word	UnarySys                 ; $ae sys(
>27c0	df 2e					.word	UnaryTimer               ; $af timer(
>27c2	f4 2c					.word	EventFunction            ; $b0 event(
>27c4	08 2f					.word	UnaryGet                 ; $b1 get(
>27c6	f8 2e					.word	UnaryInkey               ; $b2 inkey(
>27c8	af 2e					.word	UnaryAlloc               ; $b3 alloc(
>27ca	6f 2f					.word	ExecChr                  ; $b4 chr$(
>27cc	9f 2f					.word	ExecLeft                 ; $b5 left$(
>27ce	bc 2f					.word	ExecMid                  ; $b6 mid$(
>27d0	e4 2f					.word	ExecRight                ; $b7 right$(
>27d2	76 2c					.word	Event_Str                ; $b8 str$(
>27d4	a5 2c					.word	UnaryVal                 ; $b9 val(
>27d6	d2 2d					.word	UnaryPeek                ; $ba peek(
>27d8	d8 2d					.word	UnaryDeek                ; $bb deek(
>27da	de 2d					.word	UnaryLeek                ; $bc leek(
>27dc	95 2d					.word	UnaryAsc                 ; $bd asc(
>27de	89 2e					.word	UnaryIntToFloat          ; $be int(
>27e0	9c 2e					.word	UnaryFloatToInt          ; $bf float(
>27e2	a8 2c					.word	UnaryIsVal               ; $c0 isval(
>27e4	86 2f					.word	ExecUpper                ; $c1 upper$(
>27e6	83 2f					.word	ExecLower                ; $c2 lower$(
>27e8	6c 2e					.word	UnaryReference           ; $c3 @
>27ea	82 2e					.word	UnaryComplement          ; $c4 ~
>27ec	7f 2e					.word	UnaryHexMarker           ; $c5 &
>27ee	21 2f					.word	UnaryGetString           ; $c6 get$(
>27f0	27 2f					.word	UnaryInkeyString         ; $c7 inkey$(
>27f2	5e 2f					.word	UnaryMem                 ; $c8 mem
>27f4	5d 27					.word	TKErr01                  ; $c9 )
>27f6	3c 27					.word	CommandColon             ; $ca :
>27f8	5d 27					.word	TKErr02                  ; $cb ,
>27fa	5d 27					.word	TKErr03                  ; $cc ;
>27fc	62 20					.word	Command_Rem2             ; $cd '
>27fe	5d 27					.word	TKErr07                  ; $ce to
>2800	5d 27					.word	TKErr05                  ; $cf step
>2802	db 22					.word	CallProc                 ; $d0 proc
>2804	d9 21					.word	CommandLocal             ; $d1 local
>2806	99 1f					.word	Command_Dim              ; $d2 dim
>2808	62 20					.word	Command_Rem              ; $d3 rem
>280a	a7 1f					.word	CommandLet               ; $d4 let
>280c	e3 1d					.word	Command_Input            ; $d5 input
>280e	d2 21					.word	Command_ELSE             ; $d6 else
>2810	6a 1f					.word	Command_VDU              ; $d7 vdu
>2812	99 1e					.word	Command_Print            ; $d8 print
>2814	4b 1d					.word	CommandData              ; $d9 data
>2816	5d 27					.word	TKErr13                  ; $da image
>2818	5d 27					.word	TKErr12                  ; $db at
>281a	5d 27					.word	TKErr14                  ; $dc flip
>281c	8b 1f					.word	Command_Assert           ; $dd assert
>281e	25 20					.word	Command_Poke             ; $de poke
>2820	29 20					.word	Command_Doke             ; $df doke
>2822	2d 20					.word	Command_Loke             ; $e0 loke
>2824	3a 1f					.word	Command_Ink              ; $e1 ink
>2826	45 1f					.word	Command_Paper            ; $e2 paper
>2828	34 1f					.word	Command_CLS              ; $e3 cls
>282a	50 1f					.word	Command_Locate           ; $e4 locate
>282c	36 27					.word	CommandAssemblerLabel    ; $e5 .
>282e	5d 27					.word	TKErr11                  ; $e6 #
>2830	1e 25					.word	CommandClear             ; $e7 clear

;******  Return to file: main/commands/system/run.asm


;******  Processing file: main/commands/system/../../../generated/tokenvectors1.inc

.2832					Group1Vectors:
>2832	54 26					.word	CommandLoad              ; $86 load
>2834	69 26					.word	CommandSave              ; $87 save
>2836	79 25					.word	CommandList              ; $88 list
>2838	ad 26					.word	Command_New              ; $89 new
>283a	3d 27					.word	CommandBreak             ; $8a break
>283c	bb 26					.word	Command_Run              ; $8b run
>283e	20 1d					.word	CommandRead              ; $8c read
>2840	54 1d					.word	CommandRestore           ; $8d restore
>2842	74 20					.word	CommandEnd               ; $8e end
>2844	6f 20					.word	CommandStop              ; $8f stop
>2846	77 20					.word	CommandXemu              ; $90 xemu
>2848	b1 1d					.word	CommandGOTO              ; $91 goto
>284a	86 1d					.word	CommandGOSUB             ; $92 gosub
>284c	99 1d					.word	CommandRETURN            ; $93 return

;******  Return to file: main/commands/system/run.asm


;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/binary/binary.asm

.284e					BinaryProcess:
.284e	b5 48		lda $48,x			lda 	esType,x 					; or type bytes together and check bit 6.
.2850	15 49		ora $49,x			ora 	esType+1,x 					; (the float bit)
.2852	0a		asl a				asl 	a
.2853	30 0e		bmi $2863			bmi 	_BPStringType 				; if bit 6 is set, then string type, error
.2855	18		clc				clc 								; return CC for integer
.2856	29 02		and #$02			and 	#$02 						; $02 because of ASL A. check original bit 1.
.2858	f0 08		beq $2862			beq 	_BPExit 					; if both integer then return with CC.
.285a	20 68 28	jsr $2868			jsr 	BPMakeBothFloat 			; make both float
.285d	a9 01		lda #$01			lda 	#$01 						; set result type to float
.285f	95 48		sta $48,x			sta 	esType,x
.2861	38		sec				sec 								; and return with carry set.
.2862					_BPExit:
.2862	60		rts				rts
.2863					_BPStringType:
.2863	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.2865	20 18 15	jsr $1518		jsr	errorHandler
.2868					BPMakeBothFloat:
.2868	e8		inx				inx
.2869	20 6d 28	jsr $286d			jsr 	BPMakeFloat 				; one is a float, so we do both as floats.
.286c	ca		dex				dex
.286d					BPMakeFloat:
.286d	b5 48		lda $48,x			lda 	esType,x 					; get type bit which is in bit 0
.286f	4a		lsr a				lsr 	a
.2870	b0 07		bcs $2879			bcs 	_BPIsFloat 					; already a float if set.
.2872	8a		txa				txa
.2873	a2 1c		ldx #$1c		ldx	#28
.2875	20 2a 1b	jsr $1b2a		jsr	floatingpointHandler
.2878	aa		tax				tax
.2879					_BPIsFloat:
.2879	60		rts				rts
.287a					AddHandler:
.287a	20 4b 2a	jsr $2a4b			jsr 	DereferenceTwo 				; dereference top two on stack.
.287d	b5 48		lda $48,x			lda 	esType,x 					; check two strings.
.287f	35 49		and $49,x			and 	esType+1,x
.2881	29 40		and #$40			and 	#$40 						; if both have bit 6 set ... we have two strings
.2883	d0 10		bne $2895			bne 	_AHStringConcat				; concatenate strings.
.2885	20 4e 28	jsr $284e			jsr 	BinaryProcess 				; check to see if either is float
.2888	b0 03		bcs $288d			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.288a	4c a6 31	jmp $31a6			jmp 	MInt32Add 							; else do it as integer.
.288d					_IsFPOperation:
.288d	8a		txa				txa 								; call the relevant fp routine
.288e	a2 04		ldx #$04		ldx	#4
.2890	20 2a 1b	jsr $1b2a		jsr	floatingpointHandler
.2893	aa		tax				tax
.2894	60		rts				rts
.2895					_AHStringConcat:
.2895	8a		txa				txa 								; handled by the string module.
.2896	a2 06		ldx #$06		ldx	#6
.2898	20 6d 36	jsr $366d		jsr	stringHandler
.289b	aa		tax				tax
.289c	60		rts				rts
.289d					SubHandler:
.289d	20 4b 2a	jsr $2a4b			jsr 	DereferenceTwo
.28a0	20 4e 28	jsr $284e			jsr 	BinaryProcess 				; check to see if either is float
.28a3	b0 03		bcs $28a8			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.28a5	4c c0 31	jmp $31c0			jmp 	MInt32Sub 							; else do it as integer.
.28a8					_IsFPOperation:
.28a8	8a		txa				txa 								; call the relevant fp routine
.28a9	a2 12		ldx #$12		ldx	#18
.28ab	20 2a 1b	jsr $1b2a		jsr	floatingpointHandler
.28ae	aa		tax				tax
.28af	60		rts				rts
.28b0					MulHandler:
.28b0	20 4b 2a	jsr $2a4b			jsr 	DereferenceTwo
.28b3	20 4e 28	jsr $284e			jsr 	BinaryProcess 				; check to see if either is float
.28b6	b0 03		bcs $28bb			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.28b8	4c da 31	jmp $31da			jmp 	MInt32Multiply 							; else do it as integer.
.28bb					_IsFPOperation:
.28bb	8a		txa				txa 								; call the relevant fp routine
.28bc	a2 0c		ldx #$0c		ldx	#12
.28be	20 2a 1b	jsr $1b2a		jsr	floatingpointHandler
.28c1	aa		tax				tax
.28c2	60		rts				rts
.28c3					DivHandler:
.28c3	20 4b 2a	jsr $2a4b			jsr 	DereferenceTwo
.28c6	20 4e 28	jsr $284e			jsr 	BinaryProcess 				; check to see if either is float
.28c9	b0 03		bcs $28ce			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.28cb	4c 97 30	jmp $3097			jmp 	MInt32SDivide 							; else do it as integer.
.28ce					_IsFPOperation:
.28ce	8a		txa				txa 								; call the relevant fp routine
.28cf	a2 08		ldx #$08		ldx	#8
.28d1	20 2a 1b	jsr $1b2a		jsr	floatingpointHandler
.28d4	aa		tax				tax
.28d5	60		rts				rts
.28d6					ModHandler:
.28d6	20 4b 2a	jsr $2a4b			jsr 	DereferenceTwo
.28d9	20 4e 28	jsr $284e			jsr 	BinaryProcess 				; check to see if either is float
.28dc	b0 03		bcs $28e1			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.28de	4c 15 31	jmp $3115			jmp 	MInt32Modulus 							; else do it as integer.
.28e1					_IsFPOperation:
.28e1	8a		txa				txa 								; call the relevant fp routine
.28e2	a2 0a		ldx #$0a		ldx	#10
.28e4	20 2a 1b	jsr $1b2a		jsr	floatingpointHandler
.28e7	aa		tax				tax
.28e8	60		rts				rts
.28e9					XorHandler:
.28e9	20 4b 2a	jsr $2a4b			jsr 	DereferenceTwo
.28ec	20 4e 28	jsr $284e			jsr 	BinaryProcess 				; check to see if either is float
.28ef	b0 03		bcs $28f4			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.28f1	4c 49 30	jmp $3049			jmp 	MInt32Xor 							; else do it as integer.
.28f4					_IsFPOperation:
.28f4	8a		txa				txa 								; call the relevant fp routine
.28f5	a2 0a		ldx #$0a		ldx	#10
.28f7	20 2a 1b	jsr $1b2a		jsr	floatingpointHandler
.28fa	aa		tax				tax
.28fb	60		rts				rts
.28fc					OrHandler:
.28fc	20 4b 2a	jsr $2a4b			jsr 	DereferenceTwo
.28ff	20 4e 28	jsr $284e			jsr 	BinaryProcess 				; check to see if either is float
.2902	b0 03		bcs $2907			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.2904	4c 30 30	jmp $3030			jmp 	MInt32Or 							; else do it as integer.
.2907					_IsFPOperation:
.2907	8a		txa				txa 								; call the relevant fp routine
.2908	a2 0a		ldx #$0a		ldx	#10
.290a	20 2a 1b	jsr $1b2a		jsr	floatingpointHandler
.290d	aa		tax				tax
.290e	60		rts				rts
.290f					AndHandler:
.290f	20 4b 2a	jsr $2a4b			jsr 	DereferenceTwo
.2912	20 4e 28	jsr $284e			jsr 	BinaryProcess 				; check to see if either is float
.2915	b0 03		bcs $291a			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.2917	4c 17 30	jmp $3017			jmp 	MInt32And 							; else do it as integer.
.291a					_IsFPOperation:
.291a	8a		txa				txa 								; call the relevant fp routine
.291b	a2 0a		ldx #$0a		ldx	#10
.291d	20 2a 1b	jsr $1b2a		jsr	floatingpointHandler
.2920	aa		tax				tax
.2921	60		rts				rts
.2922					ShlHandler:
.2922	20 4b 2a	jsr $2a4b			jsr 	DereferenceTwo
.2925	20 4e 28	jsr $284e			jsr 	BinaryProcess 				; check to see if either is float
.2928	b0 03		bcs $292d			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.292a	4c a3 29	jmp $29a3			jmp 	Mint32ShiftLeftX 							; else do it as integer.
.292d					_IsFPOperation:
.292d	8a		txa				txa 								; call the relevant fp routine
.292e	a2 0a		ldx #$0a		ldx	#10
.2930	20 2a 1b	jsr $1b2a		jsr	floatingpointHandler
.2933	aa		tax				tax
.2934	60		rts				rts
.2935					ShrHandler:
.2935	20 4b 2a	jsr $2a4b			jsr 	DereferenceTwo
.2938	20 4e 28	jsr $284e			jsr 	BinaryProcess 				; check to see if either is float
.293b	b0 03		bcs $2940			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.293d	4c a6 29	jmp $29a6			jmp 	MInt32ShiftRightX 							; else do it as integer.
.2940					_IsFPOperation:
.2940	8a		txa				txa 								; call the relevant fp routine
.2941	a2 0a		ldx #$0a		ldx	#10
.2943	20 2a 1b	jsr $1b2a		jsr	floatingpointHandler
.2946	aa		tax				tax
.2947	60		rts				rts
.2948					WordRefHandler:
.2948	20 4b 2a	jsr $2a4b			jsr 	DereferenceTwo
.294b	20 4e 28	jsr $284e			jsr 	BinaryProcess 				; check to see if either is float
.294e	b0 03		bcs $2953			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.2950	4c 95 29	jmp $2995			jmp 	MInt32WordIndirect 							; else do it as integer.
.2953					_IsFPOperation:
.2953	8a		txa				txa 								; call the relevant fp routine
.2954	a2 0a		ldx #$0a		ldx	#10
.2956	20 2a 1b	jsr $1b2a		jsr	floatingpointHandler
.2959	aa		tax				tax
.295a	60		rts				rts
.295b					ByteRefHandler:
.295b	20 4b 2a	jsr $2a4b			jsr 	DereferenceTwo
.295e	20 4e 28	jsr $284e			jsr 	BinaryProcess 				; check to see if either is float
.2961	b0 03		bcs $2966			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.2963	4c 99 29	jmp $2999			jmp 	MInt32ByteIndirect 							; else do it as integer.
.2966					_IsFPOperation:
.2966	8a		txa				txa 								; call the relevant fp routine
.2967	a2 0a		ldx #$0a		ldx	#10
.2969	20 2a 1b	jsr $1b2a		jsr	floatingpointHandler
.296c	aa		tax				tax
.296d	60		rts				rts
.296e					PowerHandler:
.296e	20 4b 2a	jsr $2a4b			jsr 	DereferenceTwo
.2971	20 4e 28	jsr $284e			jsr 	BinaryProcess 				; check to see if either is float
.2974	b0 03		bcs $2979			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.2976	4c 81 29	jmp $2981			jmp 	PowerInteger 							; else do it as integer.
.2979					_IsFPOperation:
.2979	8a		txa				txa 								; call the relevant fp routine
.297a	a2 18		ldx #$18		ldx	#24
.297c	20 2a 1b	jsr $1b2a		jsr	floatingpointHandler
.297f	aa		tax				tax
.2980	60		rts				rts
.2981					PowerInteger:
.2981	20 68 28	jsr $2868			jsr 	BPMakeBothFloat				; make them float.
.2984	8a		txa				txa
.2985	a2 18		ldx #$18		ldx	#24
.2987	20 2a 1b	jsr $1b2a		jsr	floatingpointHandler
.298a	a2 14		ldx #$14		ldx	#20
.298c	20 2a 1b	jsr $1b2a		jsr	floatingpointHandler
.298f	aa		tax				tax
.2990	a9 00		lda #$00			lda 	#0 							; make type integer
.2992	95 48		sta $48,x			sta 	esType,x
.2994	60		rts				rts
.2995					Mint32WordIndirect:
.2995	a9 80		lda #$80	 		lda 	#$80 				 		; word reference type (bit 7 set)
.2997	d0 02		bne $299b			bne 	Min32Indirect
.2999					Mint32ByteIndirect:
.2999	a9 a0		lda #$a0			lda 	#$A0 						; byte reference type (bit 7, bit 5 set)
.299b					Min32Indirect:
.299b	48		pha				pha 								; save the indirection
.299c	20 a6 31	jsr $31a6			jsr 	MInt32Add 					; add a!b a?b
.299f	68		pla				pla 								; and set the type to reference.
.29a0	95 48		sta $48,x			sta 	esType,x 	 				; so a!b => a+b and it's a reference....
.29a2	60		rts				rts
.29a3					Mint32ShiftLeftX:
.29a3	18		clc				clc 								; CC shift left
.29a4	90 01		bcc $29a7			bcc 	Mint32Shift
.29a6					Mint32ShiftRightX:
.29a6	38		sec				sec 								; CS shift right
.29a7					Mint32Shift:
.29a7	08		php				php 								; save carry flag on stack.
.29a8	b5 59		lda $59,x			lda 	esInt1+1,x 					; if shift >= 32 then it is zero.
.29aa	15 61		ora $61,x			ora 	esInt2+1,x
.29ac	15 69		ora $69,x			ora 	esInt3+1,x
.29ae	d0 1e		bne $29ce			bne 	_MShiftZero
.29b0	b5 51		lda $51,x			lda 	esInt0+1,x
.29b2	c9 20		cmp #$20			cmp 	#32
.29b4	b0 18		bcs $29ce			bcs 	_MShiftZero
.29b6					_MShiftLoop:
.29b6	b5 51		lda $51,x			lda 	esInt0+1,x 					; check count is zero
.29b8	f0 12		beq $29cc			beq 	_MShiftExit
.29ba	d6 51		dec $51,x			dec 	esInt0+1,x
.29bc	28		plp				plp 								; restore and save carry
.29bd	08		php				php
.29be	90 06		bcc $29c6			bcc 	_MShiftLeft 				; and shift left/right accordingly.
.29c0	20 e0 32	jsr $32e0			jsr 	Mint32ShiftRight
.29c3	4c b6 29	jmp $29b6			jmp 	_MShiftLoop
.29c6					_MShiftLeft:
.29c6	20 d7 32	jsr $32d7			jsr 	Mint32ShiftLeft
.29c9	4c b6 29	jmp $29b6			jmp 	_MShiftLoop
.29cc					_MShiftExit:
.29cc	28		plp				plp	 								; throw saved carry and exit
.29cd	60		rts				rts
.29ce					_MShiftZero:
.29ce	4c c2 32	jmp $32c2			jmp 	MInt32False 				; return 0 as shifted >= 32 times.

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/binary/compare.asm

.29d1					PerformComparison:
.29d1	20 4b 2a	jsr $2a4b			jsr 	DereferenceTwo 				; make both values.
.29d4	b5 48		lda $48,x			lda 	esType,x 					; check for two strings.
.29d6	35 49		and $49,x			and 	esType+1,x
.29d8	0a		asl a				asl 	a 							; bit 7 set if both bit 6s were set.
.29d9	30 1d		bmi $29f8			bmi 	_PCIsString
.29db	b5 48		lda $48,x			lda 	esType,x 					; check either is floating point.
.29dd	15 49		ora $49,x			ora 	esType+1,x
.29df	0a		asl a				asl 	a 							; shift bit 6 (string) to bit 7, mixed types
.29e0	30 22		bmi $2a04			bmi 	_PCError
.29e2	29 02		and #$02			and 	#$02 						; because of ASL, check type in bit 0
.29e4	f0 0f		beq $29f5			beq 	_PCIsInteger 				; if not two integers, e.g. 1 of the bits is set
.29e6	20 68 28	jsr $2868			jsr 	BPMakeBothFloat 			; make both float
.29e9	8a		txa				txa
.29ea	a2 06		ldx #$06		ldx	#6
.29ec	20 2a 1b	jsr $1b2a		jsr	floatingpointHandler
.29ef	86 32		stx $32				stx 	tempShort 					; save result
.29f1	aa		tax				tax
.29f2	a5 32		lda $32				lda 	tempShort
.29f4	60		rts				rts
.29f5					_PCIsInteger:
.29f5	4c 62 30	jmp $3062			jmp 	MInt32Compare
.29f8					_PCIsString:
.29f8	8a		txa				txa 								; A has SP
.29f9	a2 0a		ldx #$0a		ldx	#10
.29fb	20 6d 36	jsr $366d		jsr	stringHandler
.29fe	86 32		stx $32				stx 	tempShort 					; save result
.2a00	aa		tax				tax 								; put SP back in X and get result.
.2a01	a5 32		lda $32				lda 	tempShort
.2a03	60		rts				rts
.2a04					_PCError:
.2a04	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.2a06	20 18 15	jsr $1518		jsr	errorHandler
.2a09					CompareEquals:
.2a09	20 d1 29	jsr $29d1			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.2a0c	c9 00		cmp #$00			cmp 	#$00 						; and we do something if it is = or <> a value.
.2a0e	f0 35		beq $2a45			beq  	CompareTrue
.2a10	4c 48 2a	jmp $2a48			jmp 	CompareFalse
.2a13					CompareLess:
.2a13	20 d1 29	jsr $29d1			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.2a16	c9 ff		cmp #$ff			cmp 	#$FF 						; and we do something if it is = or <> a value.
.2a18	f0 2b		beq $2a45			beq  	CompareTrue
.2a1a	4c 48 2a	jmp $2a48			jmp 	CompareFalse
.2a1d					CompareGreater:
.2a1d	20 d1 29	jsr $29d1			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.2a20	c9 01		cmp #$01			cmp 	#$01 						; and we do something if it is = or <> a value.
.2a22	f0 21		beq $2a45			beq  	CompareTrue
.2a24	4c 48 2a	jmp $2a48			jmp 	CompareFalse
.2a27					CompareNotEquals:
.2a27	20 d1 29	jsr $29d1			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.2a2a	c9 00		cmp #$00			cmp 	#$00 						; and we do something if it is = or <> a value.
.2a2c	d0 17		bne $2a45			bne  	CompareTrue
.2a2e	4c 48 2a	jmp $2a48			jmp 	CompareFalse
.2a31					CompareGreaterEq:
.2a31	20 d1 29	jsr $29d1			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.2a34	c9 ff		cmp #$ff			cmp 	#$FF 						; and we do something if it is = or <> a value.
.2a36	d0 0d		bne $2a45			bne  	CompareTrue
.2a38	4c 48 2a	jmp $2a48			jmp 	CompareFalse
.2a3b					CompareLessEq:
.2a3b	20 d1 29	jsr $29d1			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.2a3e	c9 01		cmp #$01			cmp 	#$01 						; and we do something if it is = or <> a value.
.2a40	d0 03		bne $2a45			bne  	CompareTrue
.2a42	4c 48 2a	jmp $2a48			jmp 	CompareFalse
.2a45					CompareTrue:
.2a45	4c be 32	jmp $32be			jmp 	MInt32True
.2a48					CompareFalse:
.2a48	4c c2 32	jmp $32c2			jmp 	MInt32False

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/dereference.asm

.2a4b					DereferenceTwo:
.2a4b	e8		inx				inx
.2a4c	20 50 2a	jsr $2a50			jsr 	DereferenceOne
.2a4f	ca		dex				dex
.2a50					DereferenceOne:
.2a50	b5 48		lda $48,x			lda 	esType,x
.2a52	10 3d		bpl $2a91			bpl 	_DRNotReference 			; is it a reference ? if not, we don't need to do anything
.2a54	4a		lsr a				lsr 	a 							; do float dereference if bit 0 set.
.2a55	b0 3b		bcs $2a92			bcs 	_DRFloatDeReference
.2a57	98		tya				tya
.2a58	48		pha				pha
.2a59	b5 50		lda $50,x			lda 	esInt0,x 					; copy address to temp0
.2a5b	85 2a		sta $2a				sta 	temp0
.2a5d	b5 58		lda $58,x			lda 	esInt1,x
.2a5f	85 2b		sta $2b				sta 	temp0+1
.2a61	a9 00		lda #$00			lda 	#0 							; clear esInt1..3
.2a63	95 58		sta $58,x			sta 	esInt1,x
.2a65	95 60		sta $60,x			sta 	esInt2,x
.2a67	95 68		sta $68,x			sta 	esInt3,x
.2a69	b5 48		lda $48,x			lda 	esType,x 					; get the type byte.
.2a6b	29 60		and #$60			and 	#$60 						; get string flag ($40) and byte flag ($20)
.2a6d	0a		asl a				asl 	a 							; now string ($80) byte ($40)
.2a6e	30 0d		bmi $2a7d			bmi 	_DeRefString 				; string, 2 bytes only
.2a70	d0 11		bne $2a83			bne 	_DeRefByte 					; byte 1 byte only
.2a72					_DeRefLong:
.2a72	a0 03		ldy #$03			ldy 	#3
.2a74	b1 2a		lda ($2a),y			lda 	(temp0),y
.2a76	95 68		sta $68,x			sta 	esInt3,x
.2a78	88		dey				dey
.2a79	b1 2a		lda ($2a),y			lda 	(temp0),y
.2a7b	95 60		sta $60,x			sta 	esInt2,x
.2a7d					_DeRefString:
.2a7d	a0 01		ldy #$01			ldy 	#1
.2a7f	b1 2a		lda ($2a),y			lda 	(temp0),y
.2a81	95 58		sta $58,x			sta 	esInt1,x
.2a83					_DeRefByte:
.2a83	a0 00		ldy #$00			ldy 	#0
.2a85	b1 2a		lda ($2a),y			lda 	(temp0),y
.2a87	95 50		sta $50,x			sta 	esInt0,x
.2a89	b5 48		lda $48,x			lda 	esType,x 					; clear byte and deref bits.
.2a8b	29 40		and #$40			and 	#$40
.2a8d	95 48		sta $48,x			sta 	esType,x
.2a8f	68		pla				pla
.2a90	a8		tay				tay
.2a91					_DRNotReference
.2a91	60		rts				rts
.2a92					_DRFloatDereference:
.2a92	20 1c 20	jsr $201c			jsr 	TOSToTemp0 					; address to deref in temp0
.2a95	8a		txa				txa
.2a96	a2 1e		ldx #$1e		ldx	#30
.2a98	20 2a 1b	jsr $1b2a		jsr	floatingpointHandler
.2a9b	aa		tax				tax
.2a9c	a9 01		lda #$01			lda 	#$01 						; type to FP (float)
.2a9e	95 48		sta $48,x			sta 	esType,x
.2aa0	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/evaluate.asm

.2aa1					EvaluateLevel:
.2aa1	e0 08		cpx #$08			cpx 	#StackSize 					; check stack overflow
.2aa3	b0 1e		bcs $2ac3			bcs 	_ELStack
.2aa5	48		pha				pha 								; save precedence level.
.2aa6	a9 00		lda #$00			lda 	#0 							; zero the current stack level.
.2aa8	95 50		sta $50,x			sta 	esInt0,x
.2aaa	95 58		sta $58,x			sta 	esInt1,x
.2aac	95 60		sta $60,x			sta 	esInt2,x
.2aae	95 68		sta $68,x			sta 	esInt3,x
.2ab0	95 48		sta $48,x			sta 	esType,x 					; zero the type (integer value)
.2ab2	b1 28		lda ($28),y			lda 	(codePtr),y	 				; look at first token/character
.2ab4	30 26		bmi $2adc			bmi 	_ELIsToken 					; if -ve could be string, float, or unary function.
.2ab6	0a		asl a				asl 	a 							; if 00-3F then will now be PL and it's a variable.
.2ab7	30 0f		bmi $2ac8			bmi 	_ELIsConstant 				; 40-7F will be -ve and that's an integer constant.
.2ab9	8a		txa				txa 								; stack level in X
.2aba	a2 02		ldx #$02		ldx	#2
.2abc	20 64 42	jsr $4264		jsr	variableHandler
.2abf	aa		tax				tax
.2ac0	4c 05 2b	jmp $2b05			jmp		_ELHasTerm
.2ac3					_ELStack:
.2ac3	a2 23		ldx #$23			ldx 	#ErrorID_NumStack
.2ac5	20 18 15	jsr $1518		jsr	errorHandler
.2ac8					_ELIsConstant:
.2ac8	4a		lsr a				lsr 	a 							; get the value back
.2ac9	29 3f		and #$3f			and 	#$3F 						; force into range 0-63
.2acb	95 50		sta $50,x			sta 	esInt0,x 					; and put in LSB.
.2acd					_ELCheckNext:
.2acd	c8		iny				iny 								; look at next
.2ace	b1 28		lda ($28),y			lda 	(codePtr),y
.2ad0	49 40		eor #$40			eor 	#$40 						; shift around so 40-7F => 00-3F
.2ad2	c9 40		cmp #$40			cmp 	#$40 						; out of range ?
.2ad4	b0 2f		bcs $2b05			bcs 	_ELHasTerm 					; done getting the constant.
.2ad6	20 9e 2b	jsr $2b9e			jsr 	ELShiftByteIn 				; shift byte into position.
.2ad9	4c cd 2a	jmp $2acd			jmp 	_ELCheckNext
.2adc					_ELIsToken:
.2adc	c9 85		cmp #$85			cmp 	#TOK_STR 					; handle strings.
.2ade	f0 0f		beq $2aef			beq 	_ELIsString
.2ae0	c9 84		cmp #$84			cmp 	#TOK_FPC 					; if no, then check unary.
.2ae2	d0 5f		bne $2b43			bne 	_ELCheckUnary
.2ae4	8a		txa				txa 								; put X into A
.2ae5	c8		iny				iny 								; skip over the float marker
.2ae6	a2 1a		ldx #$1a		ldx	#26
.2ae8	20 2a 1b	jsr $1b2a		jsr	floatingpointHandler
.2aeb	aa		tax				tax 								; restore X
.2aec	4c 05 2b	jmp $2b05			jmp 	_ELHasTerm
.2aef					_ELIsString:
.2aef	98		tya				tya 								; address of string is codePtr+y+1
.2af0	38		sec				sec
.2af1	65 28		adc $28				adc 	codePtr
.2af3	95 50		sta $50,x			sta 	esInt0,x
.2af5	a5 29		lda $29				lda 	codePtr+1
.2af7	69 00		adc #$00			adc 	#0
.2af9	95 58		sta $58,x			sta 	esInt1,x
.2afb	a9 40		lda #$40			lda 	#$40 						; set type to string value
.2afd	95 48		sta $48,x			sta 	esType,x
.2aff	c8		iny				iny 								; skip over string.
.2b00	98		tya				tya
.2b01	38		sec				sec									; +1 for the length itself.
.2b02	71 28		adc ($28),y			adc 	(codePtr),y
.2b04	a8		tay				tay 								; and fall through to term loop code.
.2b05					_ELHasTerm:
.2b05	b1 28		lda ($28),y			lda 	(codePtr),y
.2b07	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; check in the correct range for binary tokens.
.2b09	90 04		bcc $2b0f			bcc 	_ELPopExit
.2b0b	c9 99		cmp #$99			cmp 	#TOK_STRUCTST
.2b0d	90 02		bcc $2b11			bcc 	_ELHasBinaryTerm
.2b0f					_ELPopExit:
.2b0f	68		pla				pla
.2b10					_ELExit:
.2b10	60		rts				rts
.2b11					_ELHasBinaryTerm:
.2b11	84 32		sty $32				sty 	tempShort 					; save position
.2b13	a8		tay				tay 								; use token as an index and get the precedence.
.2b14	b9 46 2b	lda $2b46,y			lda 	ELBinaryOperatorInfo-TOK_BINARYST,y
.2b17	a4 32		ldy $32				ldy 	tempShort 					; restore Y
.2b19	85 32		sta $32				sta 	tempShort 					; save precedence in memory.
.2b1b	68		pla				pla 								; restore current level.
.2b1c	c5 32		cmp $32				cmp 	tempShort 					; if current >= operator then exit
.2b1e	b0 f0		bcs $2b10			bcs 	_ELExit
.2b20	48		pha				pha 								; save current level back on the stack.
.2b21	b1 28		lda ($28),y			lda 	(codePtr),y 				; save the binary operator on the stack and skip it.
.2b23	48		pha				pha
.2b24	c8		iny				iny
.2b25	e8		inx				inx 								; calculate the RHS at the operator precedence.
.2b26	a5 32		lda $32				lda 	tempShort
.2b28	20 a1 2a	jsr $2aa1			jsr 	EvaluateLevel
.2b2b	ca		dex				dex
.2b2c	68		pla				pla 								; get the operator back out.
.2b2d					_ELExecuteA:
.2b2d	86 32		stx $32				stx 	tempShort 					; upload the vectors. Would be nice to use jmp (aaaa,x)
.2b2f	0a		asl a				asl 	a 							; but not practical. May use push/rts later.
.2b30	aa		tax				tax
.2b31	bd 62 27	lda $2762,x			lda 	Group0Vectors,x
.2b34	85 2a		sta $2a				sta 	temp0
.2b36	bd 63 27	lda $2763,x			lda 	Group0Vectors+1,x
.2b39	85 2b		sta $2b				sta 	temp0+1
.2b3b	a6 32		ldx $32				ldx 	tempShort
.2b3d	20 8a 2b	jsr $2b8a			jsr 	_ELCallTemp0
.2b40	4c 05 2b	jmp $2b05			jmp 	_ELHasTerm 					; and loop back round.
.2b43					_ELCheckUnary:
.2b43	c8		iny				iny 								; skip over token.
.2b44	c9 90		cmp #$90			cmp 	#TKW_MINUS 					; is it - term
.2b46	f0 19		beq $2b61			beq 	_ELMinus
.2b48	c9 97		cmp #$97			cmp 	#TKW_PLING 					; is it ! or ? term
.2b4a	f0 2c		beq $2b78			beq 	_ELIndirect
.2b4c	c9 98		cmp #$98			cmp 	#TKW_QMARK
.2b4e	f0 28		beq $2b78			beq 	_ELIndirect
.2b50	c9 83		cmp #$83			cmp 	#TOK_SHIFT3 				; is it the unary extension.
.2b52	f0 39		beq $2b8d			beq 	_ELExtension
.2b54	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST 				; must be TOK_UNARYST ... TOK_TOKENS
.2b56	90 04		bcc $2b5c			bcc 	_ELUSyntax
.2b58	c9 c9		cmp #$c9			cmp 	#TOK_TOKENS
.2b5a	90 d1		bcc $2b2d			bcc 	_ELExecuteA 				; if so do that token.
.2b5c					_ELUSyntax:
.2b5c	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.2b5e	20 18 15	jsr $1518		jsr	errorHandler
.2b61					_ELMinus:
.2b61	20 f3 2b	jsr $2bf3			jsr 	EvaluateNumericTerm 		; get a number to negate.
.2b64	b5 48		lda $48,x			lda 	esType,x 					; is it integer
.2b66	f0 0a		beq $2b72			beq 	_ELMinusInteger
.2b68	8a		txa				txa
.2b69	a2 0e		ldx #$0e		ldx	#14
.2b6b	20 2a 1b	jsr $1b2a		jsr	floatingpointHandler
.2b6e	aa		tax				tax
.2b6f	4c 05 2b	jmp $2b05			jmp 	_ELHasTerm
.2b72					_ELMinusInteger:
.2b72	20 7c 32	jsr $327c			jsr 	MInt32Negate 				; do int negate
.2b75	4c 05 2b	jmp $2b05			jmp 	_ELHasTerm
.2b78					_ELIndirect:
.2b78	48		pha				pha 								; save what we want (TKW_QMARK TWK_PLING)
.2b79	20 fc 2b	jsr $2bfc			jsr 	EvaluateIntegerTerm 		; integer address
.2b7c	68		pla				pla
.2b7d	49 97		eor #$97			eor 	#TKW_PLING 					; now $00 if !
.2b7f	f0 02		beq $2b83			beq 	_ELHaveModifier
.2b81	a9 20		lda #$20			lda 	#$20 						; now $00 if !, $20 if ?
.2b83					_ELHaveModifier:
.2b83	09 80		ora #$80			ora 	#$80						; make it the appropriate reference.
.2b85	95 48		sta $48,x			sta 	esType,x 					; $80 for ! $A0 for ?
.2b87	4c 05 2b	jmp $2b05			jmp 	_ELHasTerm
.2b8a					_ELCallTemp0:
.2b8a	6c 2a 00	jmp ($002a)			jmp 	(temp0)
.2b8d					_ELExtension:
.2b8d	8a		txa				txa 								; stack pos in A
.2b8e	20 4d 18	jsr $184d		jsr	extensionHandler
.2b91	aa		tax				tax 								; restore stack
.2b92	4c 05 2b	jmp $2b05			jmp 	_ELHasTerm
.2b95					UnaryParenthesis:
.2b95	a9 00		lda #$00			lda 	#0 							; ( is a unary function ....
.2b97	20 a1 2a	jsr $2aa1			jsr 	EvaluateLevel
.2b9a	20 35 33	jsr $3335			jsr 	CheckRightParen 			; check for )
.2b9d	60		rts				rts
.2b9e					ELShiftByteIn:
.2b9e	48		pha				pha 								; save bits to shift in.
.2b9f	b5 68		lda $68,x			lda 	esInt3,x 					; save top most byte
.2ba1	48		pha				pha
.2ba2	b5 60		lda $60,x			lda 	esInt2,x 					; shift everything left 8 bits
.2ba4	95 68		sta $68,x			sta 	esInt3,x
.2ba6	b5 58		lda $58,x			lda 	esInt1,x
.2ba8	95 60		sta $60,x			sta 	esInt2,x
.2baa	b5 50		lda $50,x			lda 	esInt0,x
.2bac	95 58		sta $58,x			sta 	esInt1,x
.2bae	a9 00		lda #$00			lda 	#0
.2bb0	95 50		sta $50,x			sta 	esInt0,x
.2bb2	68		pla				pla 								; now A:TOS is a 5 byte register, shift right twice.
.2bb3	29 03		and #$03			and 	#3 							; only want lower 2 bits
.2bb5	09 04		ora #$04			ora 	#4  						; set bit 2 - when 1 we are done
.2bb7					_ELShiftLoop:
.2bb7	4a		lsr a				lsr 	a
.2bb8	76 68		ror $68,x			ror 	esInt3,x
.2bba	76 60		ror $60,x			ror 	esInt2,x
.2bbc	76 58		ror $58,x			ror 	esInt1,x
.2bbe	76 50		ror $50,x			ror 	esInt0,x
.2bc0	c9 01		cmp #$01			cmp 	#1
.2bc2	d0 f3		bne $2bb7			bne 	_ELShiftLoop
.2bc4	68		pla				pla 								; get original 6 bit value and OR in.
.2bc5	29 3f		and #$3f			and 	#$3F
.2bc7	15 50		ora $50,x			ora 	esInt0,x
.2bc9	95 50		sta $50,x			sta 	esInt0,x
.2bcb	60		rts				rts
.2bcc					ELBinaryOperatorInfo:

;******  Processing file: main/evaluate/../../generated/binarystructinfo.inc

>2bcc	01					.byte	$01			; $86 and
>2bcd	01					.byte	$01			; $87 or
>2bce	01					.byte	$01			; $88 xor
>2bcf	02					.byte	$02			; $89 >=
>2bd0	02					.byte	$02			; $8a <=
>2bd1	02					.byte	$02			; $8b >
>2bd2	02					.byte	$02			; $8c <
>2bd3	02					.byte	$02			; $8d =
>2bd4	02					.byte	$02			; $8e <>
>2bd5	03					.byte	$03			; $8f +
>2bd6	03					.byte	$03			; $90 -
>2bd7	04					.byte	$04			; $91 >>
>2bd8	04					.byte	$04			; $92 <<
>2bd9	04					.byte	$04			; $93 *
>2bda	04					.byte	$04			; $94 /
>2bdb	04					.byte	$04			; $95 mod
>2bdc	05					.byte	$05			; $96 ^
>2bdd	06					.byte	$06			; $97 !
>2bde	06					.byte	$06			; $98 ?
>2bdf	82					.byte	$82			; $99 repeat
>2be0	82					.byte	$82			; $9a while
>2be1	82					.byte	$82			; $9b for
>2be2	82					.byte	$82			; $9c if
>2be3	82					.byte	$82			; $9d defproc
>2be4	80					.byte	$80			; $9e until
>2be5	80					.byte	$80			; $9f wend
>2be6	80					.byte	$80			; $a0 next
>2be7	80					.byte	$80			; $a1 then
>2be8	80					.byte	$80			; $a2 endif
>2be9	80					.byte	$80			; $a3 endproc

;******  Return to file: main/evaluate/evaluate.asm


;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/support.asm

.2bea					EvaluateTerm:
.2bea	a9 0f		lda #$0f			lda 	#15 						; no binary operator has this high a precedence.
.2bec	20 a1 2a	jsr $2aa1			jsr 	EvaluateLevel
.2bef	20 50 2a	jsr $2a50			jsr 	DereferenceOne
.2bf2	60		rts				rts
.2bf3					EvaluateNumericTerm:
.2bf3	20 ea 2b	jsr $2bea			jsr 	EvaluateTerm
.2bf6	b5 48		lda $48,x			lda 	esType,x
.2bf8	0a		asl a				asl 	a 							; see if it's a string.
.2bf9	30 09		bmi $2c04			bmi 	ENTType
.2bfb	60		rts				rts
.2bfc					EvaluateIntegerTerm:
.2bfc	20 ea 2b	jsr $2bea			jsr 	EvaluateTerm
.2bff	b5 48		lda $48,x			lda 	esType,x
.2c01	d0 01		bne $2c04			bne 	ENTType
.2c03	60		rts				rts
.2c04					ENTType:
.2c04	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.2c06	20 18 15	jsr $1518		jsr	errorHandler
.2c09					EvaluateRoot:
.2c09	a2 00		ldx #$00			ldx 	#0
.2c0b					Evaluate:
.2c0b	a9 00		lda #$00			lda 	#0
.2c0d	20 a1 2a	jsr $2aa1			jsr 	EvaluateLevel
.2c10	20 50 2a	jsr $2a50			jsr 	DereferenceOne
.2c13	60		rts				rts
.2c14					EvaluateNumeric:
.2c14	20 0b 2c	jsr $2c0b			jsr 	Evaluate
.2c17	b5 48		lda $48,x			lda 	esType,x
.2c19	0a		asl a				asl 	a 							; see if it's a string.
.2c1a	30 e8		bmi $2c04			bmi 	ENTType
.2c1c	4a		lsr a				lsr 	a 							; shift float flag into carry.
.2c1d	4a		lsr a				lsr 	a
.2c1e	60		rts				rts
.2c1f					EvaluateString:
.2c1f	20 0b 2c	jsr $2c0b			jsr 	Evaluate
.2c22	b5 48		lda $48,x			lda 	esType,x
.2c24	0a		asl a				asl 	a 							; see if it's a string.
.2c25	10 dd		bpl $2c04			bpl 	ENTType
.2c27	60		rts				rts
.2c28					EvaluateRootInteger:
.2c28	a2 00		ldx #$00			ldx 	#0
.2c2a					EvaluateInteger:
.2c2a	20 0b 2c	jsr $2c0b			jsr 	Evaluate
.2c2d	b5 48		lda $48,x			lda 	esType,x
.2c2f	d0 d3		bne $2c04			bne 	ENTType
.2c31	60		rts				rts
.2c32					EvaluateSmallInteger:
.2c32	20 2a 2c	jsr $2c2a			jsr 	EvaluateInteger
.2c35	b5 58		lda $58,x			lda 	esInt1,x
.2c37	15 60		ora $60,x			ora 	esInt2,x
.2c39	15 68		ora $68,x			ora 	esInt3,x
.2c3b	d0 03		bne $2c40			bne 	_ESIValue
.2c3d	b5 50		lda $50,x			lda 	esInt0,x
.2c3f	60		rts				rts
.2c40					_ESIValue:
.2c40	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.2c42	20 18 15	jsr $1518		jsr	errorHandler
.2c45					LinkEvaluate:
.2c45	aa		tax				tax
.2c46	20 0b 2c	jsr $2c0b			jsr 	Evaluate
.2c49	8a		txa				txa
.2c4a	60		rts				rts
.2c4b					LinkEvaluateTerm:
.2c4b	aa		tax				tax
.2c4c	20 ea 2b	jsr $2bea			jsr 	EvaluateTerm
.2c4f	8a		txa				txa
.2c50	60		rts				rts
.2c51					LinkEvaluateInteger:
.2c51	aa		tax				tax
.2c52	20 2a 2c	jsr $2c2a			jsr 	EvaluateInteger
.2c55	8a		txa				txa
.2c56	60		rts				rts
.2c57					LinkEvaluateString:
.2c57	aa		tax				tax
.2c58	20 1f 2c	jsr $2c1f			jsr 	EvaluateString
.2c5b	8a		txa				txa
.2c5c	60		rts				rts
.2c5d					LinkEvaluateSmallInt:
.2c5d	aa		tax				tax
.2c5e	20 32 2c	jsr $2c32			jsr 	EvaluateSmallInteger
.2c61	8a		txa				txa
.2c62	60		rts				rts
.2c63					EvaluateReference:
.2c63	ad dd 2b	lda $2bdd			lda 	ELBinaryOperatorInfo+TKW_PLING-TOK_BINARYST
.2c66	38		sec				sec 								; sub 1 to allow a!x b?x to work.
.2c67	e9 01		sbc #$01			sbc 	#1
.2c69	20 a1 2a	jsr $2aa1			jsr 	EvaluateLevel
.2c6c	b5 48		lda $48,x			lda 	esType,x
.2c6e	10 01		bpl $2c71			bpl 	_ERFail
.2c70	60		rts				rts
.2c71					_ERFail:
.2c71	a2 0b		ldx #$0b			ldx 	#ErrorID_NoReference
.2c73	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary/convert.asm

.2c76					Event_Str:
.2c76	20 14 2c	jsr $2c14			jsr 	EvaluateNumeric 			; get a number.
.2c79	b5 48		lda $48,x			lda 	esType,x 					; is it floating point
.2c7b	d0 13		bne $2c90			bne 	_ESFloat
.2c7d	20 d3 2c	jsr $2cd3			jsr 	ConvertGetBase 				; get base, or default.
.2c80	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.2c82	85 2a		sta $2a				sta 	temp0
.2c84	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.2c86	85 2b		sta $2b				sta 	1+(temp0)
.2c88	b5 51		lda $51,x			lda 	esInt0+1,x 					; get the base
.2c8a	20 18 32	jsr $3218			jsr 	MInt32ToString 				; convert to string.
.2c8d	4c 9d 2c	jmp $2c9d			jmp 	_ESCloneExit 				; clone and exit.
.2c90					_ESFloat:
.2c90	20 35 33	jsr $3335			jsr 	CheckRightParen 			; check closing )
.2c93	20 1c 20	jsr $201c			jsr 	TOSToTemp0 					; string address in temp0, goes here.
.2c96	8a		txa				txa
.2c97	a2 16		ldx #$16		ldx	#22
.2c99	20 2a 1b	jsr $1b2a		jsr	floatingpointHandler
.2c9c	aa		tax				tax
.2c9d					_ESCloneExit:
.2c9d	8a		txa				txa
.2c9e	a2 04		ldx #$04		ldx	#4
.2ca0	20 6d 36	jsr $366d		jsr	stringHandler
.2ca3	aa		tax				tax
.2ca4	60		rts				rts
.2ca5					UnaryVal:
.2ca5	38		sec				sec 								; Carry set to return value
.2ca6	b0 01		bcs $2ca9			bcs 	ValueMain
.2ca8					UnaryIsVal:
.2ca8	18		clc				clc									; Carry clear to return legitimacy
.2ca9					ValueMain:
.2ca9	08		php				php 								; save results (CS is value, CC is validation)
.2caa	20 1f 2c	jsr $2c1f			jsr 	EvaluateString
.2cad	20 d3 2c	jsr $2cd3			jsr 	ConvertGetBase 				; get base, if any.
.2cb0	98		tya				tya
.2cb1	48		pha				pha
.2cb2	20 1c 20	jsr $201c			jsr 	TOSToTemp0 					; string address in temp0, goes here.
.2cb5	b5 51		lda $51,x			lda 	esInt0+1,x 					; get the base
.2cb7	29 7f		and #$7f			and 	#$7F 						; ignore the sign bit.
.2cb9	20 30 31	jsr $3130			jsr 	MInt32FromString 			; convert it back from a string.
.2cbc	b0 0c		bcs $2cca			bcs 	_VMSuccess 					; successfully converted.
.2cbe	b5 51		lda $51,x			lda 	esInt0+1,x 					; is base the default
.2cc0	c9 8a		cmp #$8a			cmp 	#$80+10 					; if no, then it is integer only.
.2cc2	f0 00		beq $2cc4			beq 	_VMFailed 	 				; so we failed.
.2cc4					_VMFailed:
.2cc4	68		pla				pla
.2cc5	a8		tay				tay
.2cc6	28		plp				plp
.2cc7	4c c2 32	jmp $32c2			jmp 	MInt32False 				; return 0 whatever.
.2cca					_VMSuccess:
.2cca	68		pla				pla
.2ccb	a8		tay				tay
.2ccc	28		plp				plp 								; if CS the it was val() so we want the value.
.2ccd	b0 03		bcs $2cd2			bcs 	_VMExit
.2ccf	4c be 32	jmp $32be			jmp 	MInt32True 					; otherwise return true as successful.
.2cd2					_VMExit:
.2cd2	60		rts				rts
.2cd3					ConvertGetBase:
.2cd3	a9 8a		lda #$8a			lda 	#10+$80 					; default base 10 signed.
.2cd5	95 51		sta $51,x			sta 	esInt0+1,x
.2cd7	b1 28		lda ($28),y			lda 	(codePtr),y 				; check for ,base)
.2cd9	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.2cdb	d0 0e		bne $2ceb			bne 	_CGBDone 					; not found, should be )
.2cdd	e8		inx				inx 								; next level
.2cde	c8		iny				iny 								; skip comma.
.2cdf	20 32 2c	jsr $2c32			jsr 	EvaluateSmallInteger		; evaluate the base.
.2ce2	ca		dex				dex
.2ce3	c9 02		cmp #$02			cmp 	#2 							; base range is 2..16
.2ce5	90 08		bcc $2cef			bcc 	_CGBValue 					; (it should work as high as 37)
.2ce7	c9 11		cmp #$11			cmp 	#17
.2ce9	b0 04		bcs $2cef			bcs 	_CGBValue
.2ceb					_CGBDone:
.2ceb	20 35 33	jsr $3335			jsr 	CheckRightParen
.2cee	60		rts				rts
.2cef					_CGBValue:
.2cef	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.2cf1	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary/event.asm

.2cf4					EventFunction:
.2cf4	20 63 2c	jsr $2c63			jsr 	EvaluateReference			; get the variable reference that tracks the event
.2cf7	b5 48		lda $48,x			lda 	esType,x
.2cf9	c9 80		cmp #$80			cmp 	#$80 						; must be integer reference
.2cfb	d0 5b		bne $2d58			bne 	_EFType
.2cfd	20 42 33	jsr $3342			jsr 	CheckComma
.2d00	e8		inx				inx
.2d01	20 2a 2c	jsr $2c2a			jsr 	EvaluateInteger		 		; get the elapsed time between firing.
.2d04	20 35 33	jsr $3335			jsr 	CheckRightParen 			; finish off with the right bracket
.2d07	ca		dex				dex
.2d08	b5 58		lda $58,x			lda 	esInt1,x 					; check max of 32767, we use 16 bit for timers and
.2d0a	29 80		and #$80			and 	#$80 						; it doesn't work > 32767
.2d0c	15 60		ora $60,x			ora 	esInt2,x
.2d0e	15 68		ora $68,x			ora 	esInt3,x
.2d10	d0 41		bne $2d53			bne 	_EFValue
.2d12	98		tya				tya
.2d13	48		pha				pha
.2d14	8a		txa				txa
.2d15	48		pha				pha
.2d16	a2 1c		ldx #$1c		ldx	#28
.2d18	20 f6 14	jsr $14f6		jsr	deviceHandler
.2d1b	84 2d		sty $2d				sty 	temp1+1
.2d1d	85 2c		sta $2c				sta 	temp1
.2d1f	68		pla				pla
.2d20	aa		tax				tax
.2d21	20 1c 20	jsr $201c			jsr 	TOSToTemp0 					; set temp0 to the address of the event variable
.2d24	a0 03		ldy #$03			ldy 	#3							; if -ve
.2d26	b1 2a		lda ($2a),y			lda 	(temp0),y
.2d28	30 23		bmi $2d4d			bmi 	_EFFail 	 				; straight out with fail, means "on pause".
.2d2a	a0 00		ldy #$00			ldy 	#0 							; is the fire time zero ?
.2d2c	b1 2a		lda ($2a),y			lda 	(temp0),y
.2d2e	c8		iny				iny
.2d2f	11 2a		ora ($2a),y			ora 	(temp0),y
.2d31	f0 17		beq $2d4a			beq 	_EFInitialise 				; if so, initialise the value but return false.
.2d33	a0 00		ldy #$00			ldy 	#0 							; calculate trigger - timer
.2d35	38		sec				sec
.2d36	b1 2a		lda ($2a),y			lda 	(temp0),y
.2d38	e5 2c		sbc $2c				sbc 	temp1
.2d3a	c8		iny				iny
.2d3b	b1 2a		lda ($2a),y			lda 	(temp0),y
.2d3d	e5 2d		sbc $2d				sbc 	temp1+1
.2d3f	10 0c		bpl $2d4d			bpl 	_EFFail 					; if trigger >= timer then return False
.2d41	20 5d 2d	jsr $2d5d			jsr 	SetEventTimer 				; reset the timer for next time.
.2d44	20 be 32	jsr $32be			jsr	 	MInt32True 					; and treutn true as fired.
.2d47	68		pla				pla
.2d48	a8		tay				tay
.2d49	60		rts				rts
.2d4a					_EFInitialise:
.2d4a	20 5d 2d	jsr $2d5d			jsr		SetEventTimer 				; set trigger time to time + elapsed
.2d4d					_EFFail:
.2d4d	68		pla				pla
.2d4e	a8		tay				tay
.2d4f	20 c2 32	jsr $32c2			jsr 	MInt32False
.2d52	60		rts				rts
.2d53					_EFValue:
.2d53	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.2d55	20 18 15	jsr $1518		jsr	errorHandler
.2d58					_EFType:
.2d58	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.2d5a	20 18 15	jsr $1518		jsr	errorHandler
.2d5d					SetEventTimer:
.2d5d	a0 00		ldy #$00			ldy 	#0
.2d5f	18		clc				clc
.2d60	a5 2c		lda $2c				lda 	temp1
.2d62	75 51		adc $51,x			adc 	esInt0+1,x
.2d64	91 2a		sta ($2a),y			sta		(temp0),y
.2d66	c8		iny				iny
.2d67	a5 2d		lda $2d				lda 	temp1+1
.2d69	75 59		adc $59,x			adc 	esInt1+1,x
.2d6b	91 2a		sta ($2a),y			sta		(temp0),y
.2d6d	88		dey				dey
.2d6e	11 2a		ora ($2a),y			ora 	(temp0),y 					; if the result is non zero, exit
.2d70	d0 04		bne $2d76			bne 	_SETExit 					; zero means initialise.....
.2d72	a9 01		lda #$01			lda 	#1 							; timer zero won't work, so make it 1, which is
.2d74	91 2a		sta ($2a),y			sta 	(temp0),y 					; near enough.
.2d76					_SETExit:
.2d76	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary/unary.asm

.2d77					UnaryLen:
.2d77	20 85 2d	jsr $2d85			jsr 	ULStart
.2d7a					ULFinish:
.2d7a	b1 2a		lda ($2a),y			lda 	(temp0),y 					; get length prefix
.2d7c	a4 32		ldy $32				ldy 	tempShort 					; get Y back
.2d7e	20 d1 32	jsr $32d1			jsr 	MInt32Set8Bit 				; write it out.
.2d81	20 35 33	jsr $3335			jsr 	CheckRightParen
.2d84	60		rts				rts
.2d85	20 1f 2c	jsr $2c1f	ULStart:jsr 	EvaluateString
.2d88	b5 50		lda $50,x			lda 	esInt0,x 					; copy address of string to temp0
.2d8a	85 2a		sta $2a				sta 	temp0
.2d8c	b5 58		lda $58,x			lda 	esInt1,x
.2d8e	85 2b		sta $2b				sta 	temp0+1
.2d90	84 32		sty $32				sty 	tempShort 					; get length
.2d92	a0 00		ldy #$00			ldy 	#0
.2d94	60		rts				rts
.2d95					UnaryAsc:
.2d95	20 85 2d	jsr $2d85			jsr 	ULStart 					; same as LEN() get string, save Y, point to length.
.2d98	b1 2a		lda ($2a),y			lda 	(temp0),y 					; read length
.2d9a	c8		iny				iny 		 						; point to first character, we can do LEN code after that
.2d9b	c9 00		cmp #$00			cmp 	#0
.2d9d	d0 db		bne $2d7a			bne 	ULFinish 					; if length = 0 then error : asc("") -> error.
.2d9f	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.2da1	20 18 15	jsr $1518		jsr	errorHandler
.2da4					UnaryAbs:
.2da4	20 14 2c	jsr $2c14			jsr 	EvaluateNumeric 			; some numeric value
.2da7	b0 07		bcs $2db0			bcs 	_UAFloat 					; CS then float, so use that function
.2da9	20 77 32	jsr $3277			jsr 	MInt32Absolute 				; int version
.2dac	20 35 33	jsr $3335			jsr 	CheckRightParen
.2daf	60		rts				rts
.2db0					_UAFloat:
.2db0	8a		txa				txa 								; float version
.2db1	a2 02		ldx #$02		ldx	#2
.2db3	20 2a 1b	jsr $1b2a		jsr	floatingpointHandler
.2db6	aa		tax				tax
.2db7	20 35 33	jsr $3335			jsr 	CheckRightParen
.2dba	60		rts				rts
.2dbb					UnarySgn:
.2dbb	20 14 2c	jsr $2c14			jsr 	EvaluateNumeric 			; same as above but sign of value
.2dbe	b0 07		bcs $2dc7			bcs 	_USFloat
.2dc0	20 af 32	jsr $32af			jsr 	MInt32Sign
.2dc3	20 35 33	jsr $3335			jsr 	CheckRightParen
.2dc6	60		rts				rts
.2dc7					_USFloat:
.2dc7	8a		txa				txa
.2dc8	a2 10		ldx #$10		ldx	#16
.2dca	20 2a 1b	jsr $1b2a		jsr	floatingpointHandler
.2dcd	aa		tax				tax
.2dce	20 35 33	jsr $3335			jsr 	CheckRightParen
.2dd1	60		rts				rts
.2dd2					UnaryPeek:
.2dd2	20 fe 2d	jsr $2dfe			jsr 	PDLCode 					; each has common setup code put reads 1,2 or 4 bytes
.2dd5	4c f2 2d	jmp $2df2			jmp 	PDLByte0
.2dd8					UnaryDeek:
.2dd8	20 fe 2d	jsr $2dfe			jsr 	PDLCode
.2ddb	4c ec 2d	jmp $2dec			jmp 	PDLByte1
.2dde					UnaryLeek:
.2dde	20 fe 2d	jsr $2dfe			jsr 	PDLCode
.2de1	a0 03		ldy #$03			ldy 	#3							; read 3-2
.2de3	b1 2a		lda ($2a),y			lda 	(temp0),y
.2de5	95 68		sta $68,x			sta 	esInt3,x
.2de7	88		dey				dey
.2de8	b1 2a		lda ($2a),y			lda 	(temp0),y
.2dea	95 60		sta $60,x			sta 	esInt2,x
.2dec					PDLByte1:
.2dec	a0 01		ldy #$01			ldy 	#1
.2dee	b1 2a		lda ($2a),y			lda 	(temp0),y
.2df0	95 58		sta $58,x			sta 	esInt1,x
.2df2					PDLByte0:
.2df2	a0 00		ldy #$00			ldy 	#0
.2df4	b1 2a		lda ($2a),y			lda 	(temp0),y
.2df6	95 50		sta $50,x			sta 	esInt0,x
.2df8	a4 32		ldy $32				ldy 	tempShort 					; restore Y
.2dfa	20 35 33	jsr $3335			jsr 	CheckRightParen 			; check right and return
.2dfd	60		rts				rts
.2dfe					PDLCode:
.2dfe	20 2a 2c	jsr $2c2a			jsr 	EvaluateInteger 			; some address
.2e01	b5 50		lda $50,x			lda 	esInt0,x 					; copy address of string to temp0
.2e03	85 2a		sta $2a				sta 	temp0
.2e05	b5 58		lda $58,x			lda 	esInt1,x
.2e07	85 2b		sta $2b				sta 	temp0+1
.2e09	a9 00		lda #$00			lda 	#0 							; zero upper 3 bytes of result, type okay.
.2e0b	95 58		sta $58,x			sta 	esInt1,x 					; PEEK needs upper 3 cleared
.2e0d	95 60		sta $60,x			sta 	esInt2,x
.2e0f	95 68		sta $68,x			sta 	esInt3,x
.2e11	84 32		sty $32				sty 	tempShort 					; save Y
.2e13	60		rts				rts
.2e14					Unary_Random:
.2e14	20 f2 32	jsr $32f2			jsr 	MInt32Random 				; generate random number.
.2e17	b1 28		lda ($28),y			lda 	(codePtr),y 				; check followed by )
.2e19	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.2e1b	f0 08		beq $2e25			beq 	_URExit
.2e1d	e8		inx				inx 								; load range 0..r-1 into +1
.2e1e	20 2a 2c	jsr $2c2a			jsr 	EvaluateInteger
.2e21	ca		dex				dex
.2e22	20 15 31	jsr $3115			jsr 	MInt32Modulus 				; calculate random % modulus
.2e25					_URExit:
.2e25	20 35 33	jsr $3335			jsr 	CheckRightParen 			; check right and return
.2e28	60		rts				rts
.2e29					Unary_Min:
.2e29	a9 01		lda #$01			lda 	#1 							; c1 cmp c2 needs to be > e.g. c1 > c2
.2e2b	d0 02		bne $2e2f			bne 	UnaryMBody
.2e2d					Unary_Max:
.2e2d	a9 ff		lda #$ff			lda 	#$FF 						; c1 cmp c2 needs to be < e.g. c1 < c2
.2e2f					UnaryMBody:
.2e2f	48		pha				pha 								; save comparator on stack, shows min or max
.2e30	20 0b 2c	jsr $2c0b			jsr 	Evaluate 					; get the first thing to check
.2e33					_UnaryMLoop:
.2e33	b1 28		lda ($28),y			lda 	(codePtr),y 				; found ), indicates end.
.2e35	c8		iny				iny
.2e36	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.2e38	f0 09		beq $2e43			beq 	_UnaryMExit
.2e3a	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; found , indicates more.
.2e3c	f0 07		beq $2e45			beq 	_UnaryMCompare
.2e3e	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.2e40	20 18 15	jsr $1518		jsr	errorHandler
.2e43					_UnaryMExit:
.2e43	68		pla				pla 								; done so throw comparator and return.
.2e44	60		rts				rts
.2e45					_UnaryMCompare:
.2e45	e8		inx				inx 								; get the 2nd thing to evaluate
.2e46	20 0b 2c	jsr $2c0b			jsr 	Evaluate
.2e49	ca		dex				dex
.2e4a	20 d1 29	jsr $29d1			jsr 	PerformComparison 			; this is part of evaluate/compare.asm
.2e4d	85 32		sta $32				sta 	tempShort 					; save result
.2e4f	68		pla				pla 								; get what we need
.2e50	48		pha				pha
.2e51	c5 32		cmp $32				cmp 	tempShort 					; did we get it
.2e53	d0 de		bne $2e33			bne 	_UnaryMLoop 				; no, try another value.
.2e55	20 c2 32	jsr $32c2			jsr 	MInt32False 				; promote 2nd to 1st.
.2e58	20 a6 31	jsr $31a6			jsr 	MInt32Add
.2e5b	4c 33 2e	jmp $2e33			jmp 	_UnaryMLoop
.2e5e					Unary_Page:
.2e5e	20 c2 32	jsr $32c2			jsr 	MInt32False 				; zero
.2e61	ad c8 0a	lda $0ac8			lda 	basePage 					; copy base page address in.
.2e64	95 50		sta $50,x			sta 	esInt0,x
.2e66	ad c9 0a	lda $0ac9			lda 	basePage+1
.2e69	95 58		sta $58,x			sta 	esInt1,x
.2e6b	60		rts				rts
.2e6c					UnaryReference:
.2e6c	a9 0f		lda #$0f			lda 	#15
.2e6e	20 a1 2a	jsr $2aa1			jsr 	EvaluateLevel 				; evaluate term and don't deference.
.2e71	b5 48		lda $48,x			lda 	esType,x 					; check it's a reference.
.2e73	10 05		bpl $2e7a			bpl 	UType
.2e75	a9 00		lda #$00			lda 	#0 							; make it an integer
.2e77	95 48		sta $48,x			sta 	esType,x
.2e79	60		rts				rts
.2e7a					UType:
.2e7a	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.2e7c	20 18 15	jsr $1518		jsr	errorHandler
.2e7f					UnaryHexMarker:
.2e7f	4c fc 2b	jmp $2bfc			jmp 	EvaluateIntegerTerm
.2e82					UnaryComplement:
.2e82	20 fc 2b	jsr $2bfc			jsr 	EvaluateIntegerTerm
.2e85	20 96 32	jsr $3296			jsr 	MInt32Not
.2e88	60		rts				rts
.2e89					UnaryIntToFloat:
.2e89	20 14 2c	jsr $2c14			jsr 	EvaluateNumeric				; some number
.2e8c	b5 48		lda $48,x			lda 	esType,x 					; if float already, exit
.2e8e	d0 0b		bne $2e9b			bne 	_UIFExit
.2e90	8a		txa				txa 								; convert and set type
.2e91	a2 1c		ldx #$1c		ldx	#28
.2e93	20 2a 1b	jsr $1b2a		jsr	floatingpointHandler
.2e96	aa		tax				tax
.2e97	a9 01		lda #$01			lda 	#1
.2e99	95 48		sta $48,x			sta 	esType,x
.2e9b					_UIFExit:
.2e9b	60		rts				rts
.2e9c					UnaryFloatToInt:
.2e9c	20 14 2c	jsr $2c14			jsr 	EvaluateNumeric 			; the number
.2e9f	b5 48		lda $48,x			lda 	esType,x 					; if int already exit
.2ea1	f0 0b		beq $2eae			beq 	_UFIExit
.2ea3	8a		txa				txa 								; convert to int
.2ea4	a2 14		ldx #$14		ldx	#20
.2ea6	20 2a 1b	jsr $1b2a		jsr	floatingpointHandler
.2ea9	aa		tax				tax
.2eaa	a9 00		lda #$00			lda 	#0 							; set type
.2eac	95 48		sta $48,x			sta 	esType,x
.2eae					_UFIExit:
.2eae	60		rts				rts
.2eaf					UnaryAlloc:
.2eaf	e8		inx				inx 								; evaluate memory required
.2eb0	20 2a 2c	jsr $2c2a			jsr 	EvaluateInteger
.2eb3	20 35 33	jsr $3335			jsr 	CheckRightParen
.2eb6	ca		dex				dex
.2eb7	b5 61		lda $61,x			lda 	esInt2+1,x 					; check at least in 64k range.
.2eb9	15 69		ora $69,x			ora 	esInt3+1,x
.2ebb	d0 1d		bne $2eda			bne 	_UABadValue
.2ebd	20 c2 32	jsr $32c2			jsr 	MInt32False					; zero return.
.2ec0	a5 36		lda $36				lda 	lowMemory+1 				; copy low memory in
.2ec2	95 58		sta $58,x			sta 	esInt1,x
.2ec4	a5 35		lda $35				lda 	lowMemory
.2ec6	95 50		sta $50,x			sta 	esInt0,x
.2ec8	18		clc				clc 								; add alloc required.
.2ec9	75 51		adc $51,x			adc 	esInt0+1,x
.2ecb	85 35		sta $35				sta 	lowMemory
.2ecd	a5 36		lda $36				lda 	lowMemory+1
.2ecf	75 59		adc $59,x			adc 	esInt1+1,x
.2ed1	85 36		sta $36				sta 	lowMemory+1
.2ed3	b0 05		bcs $2eda			bcs		_UABadValue 				; overflow definitely bad.
.2ed5	c5 34		cmp $34				cmp 	highMemory+1
.2ed7	b0 01		bcs $2eda			bcs 	_UABadValue 				; out of memory bad.
.2ed9	60		rts				rts
.2eda					_UABadValue:
.2eda	a2 22		ldx #$22			ldx 	#ErrorID_Memory
.2edc	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary/unary2.asm

.2edf					UnaryTimer:
.2edf	20 35 33	jsr $3335			jsr 	CheckRightParen 			; no parameters
.2ee2	98		tya				tya
.2ee3	48		pha				pha
.2ee4	20 e9 32	jsr $32e9			jsr 	MInt32Zero 					; zero result
.2ee7	86 2a		stx $2a				stx 	temp0 						; returning in YA so can't use .pshx
.2ee9	a2 1c		ldx #$1c		ldx	#28
.2eeb	20 f6 14	jsr $14f6		jsr	deviceHandler
.2eee	a6 2a		ldx $2a				ldx 	temp0						; restore X and update 16 bit result
.2ef0	95 50		sta $50,x			sta 	esInt0,x
.2ef2	98		tya				tya
.2ef3	95 58		sta $58,x			sta 	esInt1,x
.2ef5	68		pla				pla
.2ef6	a8		tay				tay
.2ef7	60		rts				rts
.2ef8					UnaryInkey:
.2ef8	20 35 33	jsr $3335			jsr 	CheckRightParen
.2efb	86 2a		stx $2a				stx 	temp0
.2efd	a2 0a		ldx #$0a		ldx	#10
.2eff	20 f6 14	jsr $14f6		jsr	deviceHandler
.2f02	a6 2a		ldx $2a				ldx 	temp0
.2f04	20 d1 32	jsr $32d1			jsr 	MInt32Set8Bit
.2f07	60		rts				rts
.2f08					UnaryGet:
.2f08	20 35 33	jsr $3335			jsr 	CheckRightParen
.2f0b	86 2a		stx $2a				stx 	temp0
.2f0d					_UGLoop:
.2f0d	a2 02		ldx #$02		ldx	#2
.2f0f	20 f6 14	jsr $14f6		jsr	deviceHandler
.2f12	a2 0a		ldx #$0a		ldx	#10
.2f14	20 f6 14	jsr $14f6		jsr	deviceHandler
.2f17	c9 00		cmp #$00			cmp 	#0
.2f19	f0 f2		beq $2f0d			beq 	_UGLoop
.2f1b	a6 2a		ldx $2a				ldx 	temp0
.2f1d	20 d1 32	jsr $32d1			jsr 	MInt32Set8Bit
.2f20	60		rts				rts
.2f21					UnaryGetString:
.2f21	20 08 2f	jsr $2f08			jsr 	UnaryGet
.2f24					UGSDoChr:
.2f24	4c 75 2f	jmp $2f75			jmp 	ChrCode
.2f27					UnaryInkeyString:
.2f27	20 f8 2e	jsr $2ef8			jsr 	UnaryInkey
.2f2a	b5 50		lda $50,x			lda 	esInt0,x
.2f2c	d0 f6		bne $2f24			bne 	UGSDoChr
.2f2e	8a		txa				txa
.2f2f	a2 08		ldx #$08		ldx	#8
.2f31	20 6d 36	jsr $366d		jsr	stringHandler
.2f34	aa		tax				tax
.2f35	60		rts				rts
.2f36					UnarySys:
.2f36	20 2a 2c	jsr $2c2a			jsr 	EvaluateInteger 				; get the address
.2f39	20 35 33	jsr $3335			jsr 	CheckRightParen
.2f3c	20 1c 20	jsr $201c			jsr 	TOSToTemp0 						; copy call address to temp0
.2f3f	8a		txa				txa
.2f40	48		pha				pha
.2f41	98		tya				tya
.2f42	48		pha				pha
.2f43	ad 00 0a	lda $0a00			lda 	("A"-"A")*4+SingleLetterVar 	; load AXY
.2f46	ae 5c 0a	ldx $0a5c			ldx 	("X"-"A")*4+SingleLetterVar
.2f49	ac 60 0a	ldy $0a60			ldy 	("Y"-"A")*4+SingleLetterVar
.2f4c	20 5b 2f	jsr $2f5b			jsr 	_CallTemp0
.2f4f	85 32		sta $32				sta 	tempShort 						; restore YX
.2f51	68		pla				pla
.2f52	a8		tay				tay
.2f53	68		pla				pla
.2f54	aa		tax				tax
.2f55	a5 32		lda $32				lda 	tempShort
.2f57	20 d1 32	jsr $32d1			jsr 	MInt32Set8Bit 					; return result.
.2f5a	60		rts				rts
.2f5b					_CallTemp0:
.2f5b	6c 2a 00	jmp ($002a)			jmp 	(temp0)
.2f5e					UnaryMem:
.2f5e	20 c2 32	jsr $32c2			jsr 	MInt32False 					; set to false (e.g. 0)
.2f61	38		sec				sec
.2f62	a5 33		lda $33				lda 	highMemory 						; calculate value
.2f64	e5 35		sbc $35				sbc 	lowMemory
.2f66	95 50		sta $50,x			sta 	esInt0,x
.2f68	a5 34		lda $34				lda 	highMemory+1
.2f6a	e5 36		sbc $36				sbc 	lowMemory+1
.2f6c	95 58		sta $58,x			sta 	esInt1,x
.2f6e	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary/unarystr.asm

.2f6f					ExecChr:
.2f6f	20 32 2c	jsr $2c32			jsr 	EvaluateSmallInteger		; character number 0-255
.2f72	20 35 33	jsr $3335			jsr 	CheckRightParen				; right bracket
.2f75					ChrCode:
.2f75	98		tya				tya
.2f76	48		pha				pha
.2f77	8a		txa				txa 								; A = stack
.2f78	b4 50		ldy $50,x			ldy 	esInt0,x					; Y = character
.2f7a	a2 02		ldx #$02		ldx	#2
.2f7c	20 6d 36	jsr $366d		jsr	stringHandler
.2f7f	aa		tax				tax 								; X = stack
.2f80	68		pla				pla
.2f81	a8		tay				tay
.2f82	60		rts				rts
.2f83					ExecLower:
.2f83	38		sec				sec 								; set carry is lower
.2f84	b0 01		bcs $2f87			bcs 	ExecUpperLower
.2f86					ExecUpper:
.2f86	18		clc				clc 								; clear carry is upper
.2f87					ExecUpperLower:
.2f87	08		php				php 								; save carry
.2f88	20 1f 2c	jsr $2c1f			jsr 	EvaluateString 				; string to stack,X
.2f8b	20 35 33	jsr $3335			jsr 	CheckRightParen 			; check closing right bracket.
.2f8e	28		plp				plp 								; restore carry, save Y
.2f8f	98		tya				tya
.2f90	48		pha				pha
.2f91	a9 00		lda #$00			lda 	#0 							; A zero if upper, 1 if lower.
.2f93	2a		rol a				rol 	a
.2f94	a8		tay				tay 								; now in Y
.2f95	8a		txa				txa 								; do the substring and exit.
.2f96	a2 0c		ldx #$0c		ldx	#12
.2f98	20 6d 36	jsr $366d		jsr	stringHandler
.2f9b	aa		tax				tax
.2f9c	68		pla				pla
.2f9d	a8		tay				tay
.2f9e	60		rts				rts
.2f9f					ExecLeft:
.2f9f	20 1f 2c	jsr $2c1f			jsr 	EvaluateString 				; string to stack,X
.2fa2	20 42 33	jsr $3342			jsr 	CheckComma
.2fa5	e8		inx				inx
.2fa6	a9 01		lda #$01			lda 	#1 							; 1 for 2nd parameter.
.2fa8	20 d1 32	jsr $32d1			jsr 	MInt32Set8Bit
.2fab	e8		inx				inx
.2fac	20 32 2c	jsr $2c32			jsr 	EvaluateSmallInteger 		; smallint 3rd parameter
.2faf					ExecSubstring:
.2faf	ca		dex				dex 								; fix up X
.2fb0	ca		dex				dex
.2fb1	20 35 33	jsr $3335			jsr 	CheckRightParen 			; check closing right bracket.
.2fb4	8a		txa				txa 								; do the substring and exit.
.2fb5	a2 0e		ldx #$0e		ldx	#14
.2fb7	20 6d 36	jsr $366d		jsr	stringHandler
.2fba	aa		tax				tax
.2fbb	60		rts				rts
.2fbc					ExecMid:
.2fbc	20 1f 2c	jsr $2c1f			jsr 	EvaluateString 				; string to stack,X
.2fbf	20 42 33	jsr $3342			jsr 	CheckComma
.2fc2	e8		inx				inx
.2fc3	20 32 2c	jsr $2c32			jsr 	EvaluateSmallInteger 		; smallint 2nd parameter
.2fc6	c9 00		cmp #$00			cmp 	#0
.2fc8	f0 15		beq $2fdf			beq 	_EMValue
.2fca	e8		inx				inx
.2fcb	a9 ff		lda #$ff			lda 	#255 						; 255 default for 3nd parameter - this is optional.
.2fcd	20 d1 32	jsr $32d1			jsr 	MInt32Set8Bit
.2fd0	b1 28		lda ($28),y			lda 	(codePtr),y 				; is there a ) next
.2fd2	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN 				; if so, just MID$(a$,2)
.2fd4	f0 d9		beq $2faf			beq 	ExecSubString
.2fd6	20 42 33	jsr $3342			jsr 	CheckComma
.2fd9	20 32 2c	jsr $2c32			jsr 	EvaluateSmallInteger 		; smallint 2nd parameter
.2fdc	4c af 2f	jmp $2faf			jmp 	ExecSubString
.2fdf					_EMValue:
.2fdf	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.2fe1	20 18 15	jsr $1518		jsr	errorHandler
.2fe4					ExecRight:
.2fe4	20 1f 2c	jsr $2c1f			jsr 	EvaluateString 				; string to stack,X
.2fe7	20 42 33	jsr $3342			jsr 	CheckComma
.2fea	e8		inx				inx
.2feb	20 32 2c	jsr $2c32			jsr 	EvaluateSmallInteger 		; smallint 2nd parameter.
.2fee	ca		dex				dex
.2fef	98		tya				tya
.2ff0	48		pha				pha
.2ff1	b5 50		lda $50,x			lda 	esInt0,x 					; copy address of string to temp0
.2ff3	85 2a		sta $2a				sta 	temp0
.2ff5	b5 58		lda $58,x			lda 	esInt1,x
.2ff7	85 2b		sta $2b				sta 	temp0+1
.2ff9	a0 00		ldy #$00			ldy 	#0 							; point to length
.2ffb	b1 2a		lda ($2a),y			lda 	(temp0),y 					; get the length.
.2ffd	18		clc				clc 								; add 1.
.2ffe	69 01		adc #$01			adc 	#1
.3000	38		sec				sec
.3001	f5 51		sbc $51,x			sbc 	esInt0+1,x  				; subtract right count.
.3003	f0 02		beq $3007			beq		_ERMake1 					; if zero, make it 1.
.3005	b0 02		bcs $3009			bcs		_EROkay
.3007					_ERMake1:
.3007	a9 01		lda #$01			lda 	#1 							; start position.
.3009					_EROkay:
.3009	e8		inx				inx 								; set start pos.
.300a	95 50		sta $50,x			sta 	esInt0,x
.300c	e8		inx				inx
.300d	a9 ff		lda #$ff			lda 	#255 						; 255 default for 3nd parameter.
.300f	20 d1 32	jsr $32d1			jsr 	MInt32Set8Bit
.3012	68		pla				pla
.3013	a8		tay				tay
.3014	4c af 2f	jmp $2faf			jmp 	ExecSubString 				; do the substring code.

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32binary.asm

.3017					MInt32And:
.3017	b5 50		lda $50,x			lda 	esInt0,x
.3019	35 51		and $51,x			and 	esInt0+1,x
.301b	95 50		sta $50,x			sta 	esInt0,x
.301d	b5 58		lda $58,x			lda 	esInt1,x
.301f	35 59		and $59,x			and 	esInt1+1,x
.3021	95 58		sta $58,x			sta 	esInt1,x
.3023	b5 60		lda $60,x			lda 	esInt2,x
.3025	35 61		and $61,x			and 	esInt2+1,x
.3027	95 60		sta $60,x			sta 	esInt2,x
.3029	b5 68		lda $68,x			lda 	esInt3,x
.302b	35 69		and $69,x			and 	esInt3+1,x
.302d	95 68		sta $68,x			sta 	esInt3,x
.302f	60		rts				rts
.3030					MInt32Or:
.3030	b5 50		lda $50,x			lda 	esInt0,x
.3032	15 51		ora $51,x			ora 	esInt0+1,x
.3034	95 50		sta $50,x			sta 	esInt0,x
.3036	b5 58		lda $58,x			lda 	esInt1,x
.3038	15 59		ora $59,x			ora 	esInt1+1,x
.303a	95 58		sta $58,x			sta 	esInt1,x
.303c	b5 60		lda $60,x			lda 	esInt2,x
.303e	15 61		ora $61,x			ora 	esInt2+1,x
.3040	95 60		sta $60,x			sta 	esInt2,x
.3042	b5 68		lda $68,x			lda 	esInt3,x
.3044	15 69		ora $69,x			ora 	esInt3+1,x
.3046	95 68		sta $68,x			sta 	esInt3,x
.3048	60		rts				rts
.3049					MInt32Xor:
.3049	b5 50		lda $50,x			lda 	esInt0,x
.304b	55 51		eor $51,x			eor 	esInt0+1,x
.304d	95 50		sta $50,x			sta 	esInt0,x
.304f	b5 58		lda $58,x			lda 	esInt1,x
.3051	55 59		eor $59,x			eor 	esInt1+1,x
.3053	95 58		sta $58,x			sta 	esInt1,x
.3055	b5 60		lda $60,x			lda 	esInt2,x
.3057	55 61		eor $61,x			eor 	esInt2+1,x
.3059	95 60		sta $60,x			sta 	esInt2,x
.305b	b5 68		lda $68,x			lda 	esInt3,x
.305d	55 69		eor $69,x			eor 	esInt3+1,x
.305f	95 68		sta $68,x			sta 	esInt3,x
.3061	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32compare.asm

.3062					MInt32Compare:
.3062	b5 50		lda $50,x			lda 	esInt0,x 					; equality check first.
.3064	d5 51		cmp $51,x			cmp 	esInt0+1,x
.3066	d0 13		bne $307b			bne 	MInt32Compare2
.3068	b5 58		lda $58,x			lda 	esInt1,x
.306a	d5 59		cmp $59,x			cmp 	esInt1+1,x
.306c	d0 0d		bne $307b			bne 	MInt32Compare2
.306e	b5 60		lda $60,x			lda 	esInt2,x
.3070	d5 61		cmp $61,x			cmp 	esInt2+1,x
.3072	d0 07		bne $307b			bne 	MInt32Compare2
.3074	b5 68		lda $68,x			lda 	esInt3,x
.3076	55 69		eor $69,x			eor 	esInt3+1,x 					; EOR will return 0 if the same.
.3078	d0 01		bne $307b			bne 	MInt32Compare2
.307a	60		rts				rts
.307b					MInt32Compare2:
.307b	b5 50		lda $50,x			lda		esInt0,x 					; unsigned 32 bit comparison.
.307d	d5 51		cmp $51,x			cmp 	esInt0+1,x
.307f	b5 58		lda $58,x			lda		esInt1,x
.3081	f5 59		sbc $59,x			sbc 	esInt1+1,x
.3083	b5 60		lda $60,x			lda		esInt2,x
.3085	f5 61		sbc $61,x			sbc 	esInt2+1,x
.3087	b5 68		lda $68,x			lda		esInt3,x
.3089	f5 69		sbc $69,x			sbc 	esInt3+1,x
.308b	50 02		bvc $308f			bvc 	_I32LNoOverflow 			; make it signed 32 bit comparison
.308d	49 80		eor #$80			eor 	#$80
.308f					_I32LNoOverflow
.308f	30 03		bmi $3094			bmi 	MInt32CLess					; if -ve then return $FF
.3091	a9 01		lda #$01			lda 	#$01						; else return $01
.3093	60		rts				rts
.3094					MInt32CLess:
.3094	a9 ff		lda #$ff			lda 	#$FF
.3096	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32divide.asm

.3097					MInt32SDivide:
.3097	98		tya				tya  								; save Y, which is the count of negations
.3098	48		pha				pha
.3099	a0 00		ldy #$00			ldy 	#0 							; zero count
.309b	20 b3 30	jsr $30b3			jsr 	_MInt32SRemSign 			; unsign TOS
.309e	e8		inx				inx 								; unsign TOS+1
.309f	20 b3 30	jsr $30b3			jsr 	_MInt32SRemSign
.30a2	ca		dex				dex
.30a3	98		tya				tya 								; save sign count on stack
.30a4	48		pha				pha
.30a5	20 bc 30	jsr $30bc			jsr 	MInt32UDivide 				; unsigned division
.30a8	68		pla				pla 								; get sign count back
.30a9	29 01		and #$01			and 	#1 							; if it is odd, then negate result
.30ab	f0 03		beq $30b0			beq 	_I32SNoNeg
.30ad	20 7c 32	jsr $327c			jsr 	MInt32Negate
.30b0					_I32SNoNeg:
.30b0	68		pla				pla 								; restoe Y and exit
.30b1	a8		tay				tay
.30b2	60		rts				rts
.30b3					_MInt32SRemSign:
.30b3	b5 68		lda $68,x			lda 	esInt3,x 					; is it -ve
.30b5	10 04		bpl $30bb			bpl 	_MInt32SRSExit
.30b7	c8		iny				iny 								; increment the sign count
.30b8	20 7c 32	jsr $327c			jsr 	MInt32Negate 				; negate the value.
.30bb					_MInt32SRSExit:
.30bb	60		rts				rts
.30bc					MInt32UDivide:
.30bc	b5 51		lda $51,x			lda 	esInt0+1,x 					; check for division by zero
.30be	15 59		ora $59,x			ora 	esInt1+1,x
.30c0	15 5a		ora $5a,x			ora 	esInt1+2,x
.30c2	15 5b		ora $5b,x			ora 	esInt1+3,x
.30c4	f0 4a		beq $3110			beq 	_MInt32DZero
.30c6	e8		inx				inx 								; clear A
.30c7	e8		inx				inx
.30c8	20 c2 32	jsr $32c2			jsr 	MInt32False
.30cb	ca		dex				dex
.30cc	ca		dex				dex
.30cd	98		tya				tya 								; save Y on the stack
.30ce	48		pha				pha
.30cf	a0 20		ldy #$20			ldy 	#32 						; number of division passes
.30d1					_MInt32UDLoop:
.30d1	16 50		asl $50,x			asl 	esInt0,x					; shift QA left. First Q
.30d3	36 58		rol $58,x			rol 	esInt1,x
.30d5	36 60		rol $60,x			rol 	esInt2,x
.30d7	36 68		rol $68,x			rol 	esInt3,x
.30d9	36 52		rol $52,x			rol 	esInt0+2,x 					; then A.
.30db	36 5a		rol $5a,x			rol 	esInt1+2,x
.30dd	36 62		rol $62,x			rol 	esInt2+2,x
.30df	36 6a		rol $6a,x			rol 	esInt3+2,x
.30e1	38		sec				sec 								; calculate A-M saving result on the stack
.30e2	b5 52		lda $52,x			lda 	esInt0+2,x
.30e4	f5 51		sbc $51,x			sbc 	esInt0+1,x
.30e6	48		pha				pha
.30e7	b5 5a		lda $5a,x			lda 	esInt1+2,x
.30e9	f5 59		sbc $59,x			sbc 	esInt1+1,x
.30eb	48		pha				pha
.30ec	b5 62		lda $62,x			lda 	esInt2+2,x
.30ee	f5 61		sbc $61,x			sbc 	esInt2+1,x
.30f0	48		pha				pha
.30f1	b5 6a		lda $6a,x			lda 	esInt3+2,x
.30f3	f5 69		sbc $69,x			sbc 	esInt3+1,x
.30f5	90 10		bcc $3107			bcc		_MInt32NoSubtract 			; if A < M (e.g. carry clear) then reject this.
.30f7	95 6a		sta $6a,x			sta 	esInt3+2,x 					; write result back to A
.30f9	68		pla				pla
.30fa	95 62		sta $62,x			sta 	esInt2+2,x
.30fc	68		pla				pla
.30fd	95 5a		sta $5a,x			sta 	esInt1+2,x
.30ff	68		pla				pla
.3100	95 52		sta $52,x			sta 	esInt0+2,x
.3102	f6 50		inc $50,x			inc 	esInt0,x 					; sets bit 0 of Q - it was shifted left previously.
.3104	4c 0a 31	jmp $310a			jmp 	_MInt32Next 					; do the next iteration
.3107					_MInt32NoSubtract:
.3107	68		pla				pla
.3108	68		pla				pla
.3109	68		pla				pla
.310a					_MInt32Next:
.310a	88		dey				dey 								; do this 32 times.
.310b	d0 c4		bne $30d1			bne 	_MInt32UDLoop
.310d	68		pla				pla 								; restore Y and exit
.310e	a8		tay				tay
.310f	60		rts				rts
.3110					_MInt32DZero:
.3110	a2 05		ldx #$05			ldx 	#ErrorID_DivZero
.3112	20 18 15	jsr $1518		jsr	errorHandler
.3115					MInt32Modulus:
.3115	20 bc 30	jsr $30bc			jsr 	MInt32UDivide 				; do the division.
.3118	b5 6a		lda $6a,x			lda 	esInt3+2,x 					; copy 2nd on stack (the remainder) to the top.
.311a	95 68		sta $68,x			sta 	esInt3,x
.311c	b5 62		lda $62,x			lda 	esInt2+2,x
.311e	95 60		sta $60,x			sta 	esInt2,x
.3120	b5 5a		lda $5a,x			lda 	esInt1+2,x
.3122	95 58		sta $58,x			sta 	esInt1,x
.3124	b5 52		lda $52,x			lda 	esInt0+2,x
.3126	95 50		sta $50,x			sta 	esInt0,x
.3128	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32fromstr.asm

.0cda					fs32Length:
>0cda							.fill 	1
.3129					LinkInt32FromString:
.3129	aa		tax				tax
.312a	98		tya				tya
.312b	20 30 31	jsr $3130			jsr 	MInt32FromString
.312e	8a		txa				txa
.312f	60		rts				rts
.3130					MInt32FromString:
.3130	85 32		sta $32				sta 	tempShort 					; save base
.3132	98		tya				tya
.3133	48		pha				pha
.3134	a0 00		ldy #$00			ldy 	#0 							; get length of string to convert
.3136	b1 2a		lda ($2a),y			lda 	(temp0),y
.3138	8d da 0c	sta $0cda			sta 	fs32Length
.313b	f0 65		beq $31a2			beq 	_I32FSFail2					; fail if length zero.
.313d	a0 01		ldy #$01			ldy 	#1 							; set index into string being read
.313f	b1 2a		lda ($2a),y			lda 	(temp0),y 					; look at first character
.3141	c9 2d		cmp #$2d			cmp 	#"-"						; is it a - character
.3143	d0 09		bne $314e			bne 	_I32FSNotNegative
.3145	ad da 0c	lda $0cda			lda 	fs32Length 					; get length back.
.3148	c9 01		cmp #$01			cmp 	#1 							; if 1 it is just a - on its own so fail.
.314a	f0 56		beq $31a2			beq 	_I32FSFail2
.314c	a0 02		ldy #$02			ldy 	#2 							; first digit of the number.
.314e					_I32FSNotNegative:
.314e	a5 32		lda $32				lda 	tempShort 					; get the base back.
.3150	c0 02		cpy #$02			cpy 	#2 							; if we read a -ve (e.g. Y == 2)
.3152	d0 02		bne $3156			bne 	_I32FSNN2
.3154	09 80		ora #$80			ora 	#$80						; set bit 7, this indicates a negated result.
.3156					_I32FSNN2:
.3156	48		pha				pha 								; save base + final sign on stack.
.3157	20 c2 32	jsr $32c2			jsr 	MInt32False 				; zero the return value.
.315a					_I32FSMainLoop:
.315a	68		pla				pla 								; get the base back into tempShort
.315b	48		pha				pha
.315c	29 7f		and #$7f			and 	#$7F
.315e	85 32		sta $32				sta 	tempShort
.3160	b1 2a		lda ($2a),y			lda 	(temp0),y 					; look at next character.
.3162	c9 61		cmp #$61			cmp 	#"a" 						; fix up case.
.3164	90 02		bcc $3168			bcc 	_I32FSNotLC
.3166	e9 20		sbc #$20			sbc 	#32
.3168					_I32FSNotLC:
.3168	38		sec				sec 								; subtract 48 (ASCII "0") - ASCII to Hex conversion
.3169	e9 30		sbc #$30			sbc 	#"0"
.316b	90 34		bcc $31a1			bcc 	_I32FSFail 					; nothing more to do.
.316d	c9 0a		cmp #$0a			cmp 	#9+1 						; if it is 0-9 validate vs base.
.316f	90 06		bcc $3177			bcc 	_I32FSValidate
.3171	c9 11		cmp #$11			cmp 	#17 						; is it between 58 and 64 ? if so bad.
.3173	90 2c		bcc $31a1			bcc 	_I32FSFail
.3175	e9 07		sbc #$07			sbc 	#7 							; adjust into range so now character is 0->nnn
.3177					_I32FSValidate:
.3177	c5 32		cmp $32				cmp 	tempShort 					; compare against the base.
.3179	b0 26		bcs $31a1			bcs 	_I32FSFail 					; sorry, too large for this base, so fail.
.317b	48		pha				pha 								; save the new digit value.
.317c	e8		inx				inx 								; put base into next slot up on stack
.317d	a5 32		lda $32				lda 	tempShort
.317f	20 d1 32	jsr $32d1			jsr 	MInt32Set8Bit
.3182	ca		dex				dex
.3183	20 da 31	jsr $31da			jsr 	MInt32Multiply 				; multiply current by the base
.3186	e8		inx				inx
.3187	68		pla				pla  								; put additive into next slot
.3188	20 d1 32	jsr $32d1			jsr 	MInt32Set8Bit
.318b	ca		dex				dex
.318c	20 a6 31	jsr $31a6			jsr 	MInt32Add 					; and add it
.318f	c8		iny				iny 								; bump the character pointer
.3190	cc da 0c	cpy $0cda			cpy 	fs32Length 					; until > length.
.3193	f0 c5		beq $315a			beq 	_I32FSMainLoop
.3195	90 c3		bcc $315a			bcc 	_I32FSMainLoop
.3197					_I32FSDone:
.3197	68		pla				pla 								; get base/final sign back
.3198	10 03		bpl $319d			bpl 	_I32FSNN3
.319a	20 7c 32	jsr $327c			jsr 	MInt32Negate 				; negate the result.
.319d					_I32FSNN3:
.319d	68		pla				pla
.319e	a8		tay				tay
.319f	38		sec				sec
.31a0	60		rts				rts
.31a1					_I32FSFail:
.31a1	68		pla				pla
.31a2					_I32FSFail2:
.31a2	68		pla				pla
.31a3	a8		tay				tay
.31a4	18		clc				clc
.31a5	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32math.asm

.31a6					MInt32Add:
.31a6	18		clc				clc
.31a7	b5 50		lda $50,x			lda 	esInt0,x
.31a9	75 51		adc $51,x			adc 	esInt0+1,x
.31ab	95 50		sta $50,x			sta 	esInt0,x
.31ad	b5 58		lda $58,x			lda 	esInt1,x
.31af	75 59		adc $59,x			adc 	esInt1+1,x
.31b1	95 58		sta $58,x			sta 	esInt1,x
.31b3	b5 60		lda $60,x			lda 	esInt2,x
.31b5	75 61		adc $61,x			adc 	esInt2+1,x
.31b7	95 60		sta $60,x			sta 	esInt2,x
.31b9	b5 68		lda $68,x			lda 	esInt3,x
.31bb	75 69		adc $69,x			adc 	esInt3+1,x
.31bd	95 68		sta $68,x			sta 	esInt3,x
.31bf	60		rts				rts
.31c0					MInt32Sub:
.31c0	38		sec				sec
.31c1	b5 50		lda $50,x			lda 	esInt0,x
.31c3	f5 51		sbc $51,x			sbc 	esInt0+1,x
.31c5	95 50		sta $50,x			sta 	esInt0,x
.31c7	b5 58		lda $58,x			lda 	esInt1,x
.31c9	f5 59		sbc $59,x			sbc 	esInt1+1,x
.31cb	95 58		sta $58,x			sta 	esInt1,x
.31cd	b5 60		lda $60,x			lda 	esInt2,x
.31cf	f5 61		sbc $61,x			sbc 	esInt2+1,x
.31d1	95 60		sta $60,x			sta 	esInt2,x
.31d3	b5 68		lda $68,x			lda 	esInt3,x
.31d5	f5 69		sbc $69,x			sbc 	esInt3+1,x
.31d7	95 68		sta $68,x			sta 	esInt3,x
.31d9	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32multiply.asm

.31da					MInt32Multiply:
.31da	e8		inx				inx 								; copy 2nd -> 3rd
.31db	20 00 32	jsr $3200			jsr 	MInt32CopyUp
.31de	ca		dex				dex
.31df	20 00 32	jsr $3200			jsr 	MInt32CopyUp 				; copy 1st -> 2nd
.31e2	20 c2 32	jsr $32c2			jsr 	MInt32False 				; zero 1st.
.31e5					_I32Loop:
.31e5	b5 52		lda $52,x			lda 	esInt0+2,x 					; get low bit of 3rd
.31e7	29 01		and #$01			and 	#1
.31e9	f0 03		beq $31ee			beq 	_I32NoAdd 					; if set
.31eb	20 a6 31	jsr $31a6			jsr 	MInt32Add 					; add 2nd to 1st.
.31ee					_I32NoAdd:
.31ee	e8		inx				inx 								; shift 2nd left
.31ef	20 d7 32	jsr $32d7			jsr 	MInt32ShiftLeft
.31f2	e8		inx				inx  								; shift 3rd right
.31f3	20 e0 32	jsr $32e0			jsr 	MInt32ShiftRight
.31f6	20 e9 32	jsr $32e9			jsr 	MInt32Zero 					; check if zero.
.31f9	08		php				php 								; save status bits
.31fa	ca		dex				dex 	 							; point back to 1st
.31fb	ca		dex				dex
.31fc	28		plp				plp 								; get status bits
.31fd	d0 e6		bne $31e5			bne 	_I32Loop 					; if non-zero keep going.
.31ff	60		rts				rts
.3200					MInt32CopyUp:
.3200	b5 50		lda $50,x			lda 	esInt0,x
.3202	95 51		sta $51,x			sta 	esInt0+1,x
.3204	b5 58		lda $58,x			lda 	esInt1,x
.3206	95 59		sta $59,x			sta 	esInt1+1,x
.3208	b5 60		lda $60,x			lda 	esInt2,x
.320a	95 61		sta $61,x			sta 	esInt2+1,x
.320c	b5 68		lda $68,x			lda 	esInt3,x
.320e	95 69		sta $69,x			sta 	esInt3+1,x
.3210	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32tostr.asm

>0cdb					MCharCount:	.fill 	1						; count of converted characters
.3211					MLInt32ToString:
.3211	aa		tax				tax									; module passes stack in A, base in Y
.3212	98		tya				tya
.3213	20 18 32	jsr $3218			jsr 	MInt32ToString
.3216	8a		txa				txa
.3217	60		rts				rts
.3218					MInt32ToString:
.3218	48		pha				pha 								; save base
.3219	85 32		sta $32				sta 	tempShort 					; save target base.
.321b	a9 00		lda #$00			lda 	#0
.321d	8d db 0c	sta $0cdb			sta 	MCharCount 					; clear character count to 0
.3220	98		tya				tya
.3221	48		pha				pha
.3222	a5 32		lda $32				lda 	tempShort 					; check if we are signed conversion
.3224	10 10		bpl $3236			bpl 	_I32TSUnsigned
.3226	48		pha				pha 								; save base on stack.
.3227	b5 68		lda $68,x			lda 	esInt3,x 					; is it actually negative
.3229	10 08		bpl $3233			bpl 	_I32TSNoFlip
.322b	a9 2d		lda #$2d			lda 	#"-" 						; write a '-' prefix out.
.322d	20 69 32	jsr $3269			jsr 	MI32WriteCharacter
.3230	20 7c 32	jsr $327c			jsr 	MInt32Negate 				; negate the value, so now it's positive.
.3233					_I32TSNoFlip:
.3233	68		pla				pla 								; get the base back
.3234	29 7f		and #$7f			and 	#$7F 						; clear the sign flag so it's just a base now.
.3236					_I32TSUnsigned:
.3236	20 44 32	jsr $3244			jsr 	MI32DivideWrite 			; recursive code to output string.
.3239	a0 00		ldy #$00			ldy 	#0 							; write charcount to first character.
.323b	ad db 0c	lda $0cdb			lda 	MCharCount
.323e	91 2a		sta ($2a),y			sta 	(temp0),y
.3240	68		pla				pla
.3241	a8		tay				tay
.3242	68		pla				pla
.3243	60		rts				rts
.3244					MI32DivideWrite:
.3244	48		pha				pha 								; save the divisor/base
.3245	e8		inx				inx 								; write in the dividing position.
.3246	20 d1 32	jsr $32d1			jsr 	MInt32Set8Bit
.3249	ca		dex				dex
.324a	20 bc 30	jsr $30bc			jsr 	MInt32UDivide 				; divide number by base.
.324d	68		pla				pla 								; get the base into Y
.324e	a8		tay				tay
.324f	b5 52		lda $52,x			lda 	esInt0+2,x 					; get the remainder and push on the stack.
.3251	48		pha				pha
.3252	20 e9 32	jsr $32e9			jsr 	MInt32Zero 					; is the result zero ?
.3255	f0 04		beq $325b			beq 	_I32NoRecurse 				; if so, don't recurse.
.3257	98		tya				tya 								; put base into A
.3258	20 44 32	jsr $3244			jsr 	MI32DivideWrite 				; and jsr the dividor recursively.
.325b					_I32NoRecurse:
.325b	68		pla				pla 								; get the remainder back
.325c	c9 0a		cmp #$0a			cmp 	#10  						; handle hexadecimals, now converting to ASCII
.325e	90 02		bcc $3262			bcc 	_I32NotHex
.3260	69 06		adc #$06			adc 	#7-1
.3262					_I32NotHex:
.3262	18		clc				clc 								; make it ASCII
.3263	69 30		adc #$30			adc 	#48
.3265	20 69 32	jsr $3269			jsr 	MI32WriteCharacter 			; write the character out
.3268	60		rts				rts 								; and exit.
.3269					MI32WriteCharacter:
.3269	ee db 0c	inc $0cdb			inc 	MCharCount 					; bump count (space for leading count)
.326c	ac db 0c	ldy $0cdb			ldy 	MCharCount 					; get position
.326f	91 2a		sta ($2a),y			sta 	(temp0),y 					; write out with trailing 0
.3271	c8		iny				iny
.3272	a9 00		lda #$00			lda 	#0
.3274	91 2a		sta ($2a),y			sta 	(temp0),y
.3276	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32unary.asm

>0cdc					MSeed32:	.fill 	4							; random number seed.
.3277					MInt32Absolute:
.3277	b5 68		lda $68,x			lda 	esInt3,x 					; use negate code if -ve.
.3279	30 01		bmi $327c			bmi 	MInt32Negate
.327b	60		rts				rts
.327c					MInt32Negate:
.327c	38		sec				sec 								; subtract from zero.
.327d	a9 00		lda #$00			lda 	#0
.327f	f5 50		sbc $50,x			sbc 	esInt0,x
.3281	95 50		sta $50,x			sta 	esInt0,x
.3283	a9 00		lda #$00			lda 	#0
.3285	f5 58		sbc $58,x			sbc 	esInt1,x
.3287	95 58		sta $58,x			sta 	esInt1,x
.3289	a9 00		lda #$00			lda 	#0
.328b	f5 60		sbc $60,x			sbc 	esInt2,x
.328d	95 60		sta $60,x			sta 	esInt2,x
.328f	a9 00		lda #$00			lda 	#0
.3291	f5 68		sbc $68,x			sbc 	esInt3,x
.3293	95 68		sta $68,x			sta 	esInt3,x
.3295	60		rts				rts
.3296					MInt32Not:
.3296	b5 50		lda $50,x			lda 	esInt0,x 					; one's complement all four.
.3298	49 ff		eor #$ff			eor 	#$FF
.329a	95 50		sta $50,x			sta 	esInt0,x
.329c	b5 58		lda $58,x			lda 	esInt1,x
.329e	49 ff		eor #$ff			eor 	#$FF
.32a0	95 58		sta $58,x			sta 	esInt1,x
.32a2	b5 60		lda $60,x			lda 	esInt2,x
.32a4	49 ff		eor #$ff			eor 	#$FF
.32a6	95 60		sta $60,x			sta 	esInt2,x
.32a8	b5 68		lda $68,x			lda 	esInt3,x
.32aa	49 ff		eor #$ff			eor 	#$FF
.32ac	95 68		sta $68,x			sta 	esInt3,x
.32ae	60		rts				rts
.32af					MInt32Sign:
.32af	b5 68		lda $68,x			lda 	esInt3,x					; look at MSB
.32b1	30 0b		bmi $32be			bmi 	MInt32True 					; if set return -1 (true)
.32b3	20 e9 32	jsr $32e9			jsr 	MInt32Zero 					; is it zero ?
.32b6	f0 0a		beq $32c2			beq 	MInt32False 				; if zero return 0 (false)
.32b8	20 c2 32	jsr $32c2			jsr 	MInt32False 				; > 0 return 1, by setting it to zero
.32bb	f6 50		inc $50,x			inc 	esInt0,x  					; and bumping the LSB.
.32bd	60		rts				rts
.32be					MInt32True:
.32be	a9 ff		lda #$ff			lda 	#$FF 						; set to $FFFFFFFF
.32c0	d0 02		bne $32c4			bne 	MInt32WriteAll
.32c2					MInt32False:
.32c2	a9 00		lda #$00			lda 	#0
.32c4					MInt32WriteAll:
.32c4	95 50		sta $50,x			sta 	esInt0,x
.32c6					MInt32Write123:
.32c6	95 58		sta $58,x			sta 	esInt1,x
.32c8	95 60		sta $60,x			sta 	esInt2,x
.32ca	95 68		sta $68,x			sta 	esInt3,x
.32cc	a9 00		lda #$00			lda 	#$00						; and make it an integer
.32ce	95 48		sta $48,x			sta 	esType,x
.32d0	60		rts				rts
.32d1					MInt32Set8Bit:
.32d1	95 50		sta $50,x			sta 	esInt0,x 					; coopt above function to write
.32d3	a9 00		lda #$00			lda 	#0 							; a value 0-255
.32d5	f0 ef		beq $32c6			beq		MInt32Write123
.32d7					MInt32ShiftLeft:
.32d7	16 50		asl $50,x			asl 	esInt0,x
.32d9	36 58		rol $58,x			rol	 	esInt1,x
.32db	36 60		rol $60,x			rol	 	esInt2,x
.32dd	36 68		rol $68,x			rol	 	esInt3,x
.32df	60		rts				rts
.32e0					MInt32ShiftRight:
.32e0	56 68		lsr $68,x			lsr 	esInt3,x
.32e2	76 60		ror $60,x			ror 	esInt2,x
.32e4	76 58		ror $58,x			ror 	esInt1,x
.32e6	76 50		ror $50,x			ror 	esInt0,x
.32e8	60		rts				rts
.32e9					MInt32Zero:
.32e9	b5 50		lda $50,x			lda 	esInt0,x
.32eb	15 58		ora $58,x			ora 	esInt1,x
.32ed	15 60		ora $60,x			ora 	esInt2,x
.32ef	15 68		ora $68,x			ora 	esInt3,x
.32f1	60		rts				rts
.32f2					MInt32Random:
.32f2	98		tya				tya
.32f3	48		pha				pha
.32f4	a0 07		ldy #$07			ldy 	#7 							; do it 7 times
.32f6	ad dc 0c	lda $0cdc			lda 	MSeed32+0 					; check the seed isn't zero
.32f9	d0 03		bne $32fe			bne 	_Random1
.32fb	a8		tay				tay 								; if so do it 256 times
.32fc	a9 aa		lda #$aa			lda		#$AA 						; and use this to seed the seed....
.32fe					_Random1:
.32fe	0a		asl a				asl 	a
.32ff	2e dd 0c	rol $0cdd			rol 	MSeed32+1
.3302	2e de 0c	rol $0cde			rol 	MSeed32+2
.3305	2e df 0c	rol $0cdf			rol 	MSeed32+3
.3308	90 02		bcc $330c			bcc 	_Random2
.330a	49 c5		eor #$c5			eor 	#$C5
.330c					_Random2:
.330c	88		dey				dey
.330d	d0 ef		bne $32fe			bne 	_Random1
.330f	8d dc 0c	sta $0cdc			sta 	MSeed32+0 					; copy the seed in.
.3312	95 50		sta $50,x			sta 	esInt0,x
.3314	ad dd 0c	lda $0cdd			lda 	MSeed32+1
.3317	95 58		sta $58,x			sta 	esInt1,x
.3319	ad de 0c	lda $0cde			lda 	MSeed32+2
.331c	95 60		sta $60,x			sta 	esInt2,x
.331e	ad df 0c	lda $0cdf			lda 	MSeed32+3
.3321	95 68		sta $68,x			sta 	esInt3,x
.3323	68		pla				pla
.3324	a8		tay				tay
.3325	a9 00		lda #$00			lda 	#0
.3327	95 48		sta $48,x			sta 	esType,x
.3329	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/utility/check.asm

.332a					CheckToken:
.332a	d1 28		cmp ($28),y			cmp 	(codePtr),y
.332c	d0 02		bne $3330			bne 	_CTError
.332e	c8		iny				iny
.332f	60		rts				rts
.3330					_CTError:
.3330	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.3332	20 18 15	jsr $1518		jsr	errorHandler
.3335					CheckRightParen:
.3335	b1 28		lda ($28),y			lda 	(codePtr),y
.3337	c8		iny				iny
.3338	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.333a	d0 01		bne $333d			bne 	_CRPError
.333c	60		rts				rts
.333d					_CRPError:
.333d	a2 09		ldx #$09			ldx 	#ErrorID_MissingRP
.333f	20 18 15	jsr $1518		jsr	errorHandler
.3342					CheckComma:
.3342	b1 28		lda ($28),y			lda 	(codePtr),y
.3344	c8		iny				iny
.3345	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.3347	d0 01		bne $334a			bne 	_CCError
.3349	60		rts				rts
.334a					_CCError:
.334a	a2 0a		ldx #$0a			ldx 	#ErrorID_MissingComma
.334c	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/utility/stack.asm

.0037					rsPointer:
>0037							.fill 	2							; to TOS, which is the current top-token.
.334f					RSReset:
.334f	a9 ff		lda #$ff			lda 	#(returnStack+retStackSize-1) & $FF
.3351	85 37		sta $37				sta 	rsPointer
.3353	a9 09		lda #$09			lda 	#(returnStack+retStackSize-1) >> 8
.3355	85 38		sta $38				sta 	1+(rsPointer)
.3357	a9 ff		lda #$ff			lda 	#$FF 						; put a duff marker on TOS, so nothing will pop
.3359	8d ff 09	sta $09ff			sta 	returnStack+retStackSize-1
.335c	60		rts				rts
.335d					RSClaim:
.335d	84 32		sty $32				sty 	tempShort 					; preserve Y
.335f	48		pha				pha 								; save marker on stack.
.3360	8a		txa				txa 								; get bytes required.
.3361	38		sec				sec
.3362	49 ff		eor #$ff			eor 	#$FF 						; add to rsPointer using 2's complement.
.3364	65 37		adc $37				adc 	rsPointer
.3366	85 37		sta $37				sta 	rsPointer
.3368	a5 38		lda $38				lda 	rsPointer+1
.336a	69 ff		adc #$ff			adc 	#$FF
.336c	85 38		sta $38				sta 	rsPointer+1
.336e	c9 08		cmp #$08			cmp 	#returnStack>>8 			; overflow. underflow actually :)
.3370	90 08		bcc $337a			bcc 	_RSCOverflow
.3372	68		pla				pla 								; get marker back
.3373	a0 00		ldy #$00			ldy 	#0 							; write marker out.
.3375	91 37		sta ($37),y			sta 	(rsPointer),y
.3377	a4 32		ldy $32				ldy 	tempShort 					; restore Y and exit
.3379	60		rts				rts
.337a					_RSCOverflow:
.337a	a2 16		ldx #$16			ldx 	#ErrorID_RetStack
.337c	20 18 15	jsr $1518		jsr	errorHandler
.337f					RSFree:
.337f	18		clc				clc
.3380	65 37		adc $37				adc 	rsPointer
.3382	85 37		sta $37				sta 	rsPointer
.3384	90 02		bcc $3388			bcc 	_RSFExit
.3386	e6 38		inc $38				inc 	rsPointer+1
.3388					_RSFExit:
.3388	60		rts				rts
.3389					RSSavePosition:
.3389	84 32		sty $32				sty 	tempShort 					; save Y position
.338b	a8		tay				tay 								; this is where we write it.
.338c	a5 28		lda $28				lda 	codePtr 					; write codePointer out
.338e	91 37		sta ($37),y			sta 	(rsPointer),y
.3390	c8		iny				iny
.3391	a5 29		lda $29				lda 	codePtr+1
.3393	91 37		sta ($37),y			sta 	(rsPointer),y
.3395	c8		iny				iny
.3396	a5 32		lda $32				lda 	tempShort 					; write the Y position out.
.3398	91 37		sta ($37),y			sta 	(rsPointer),y
.339a	a8		tay				tay 								; fix Y back again to original value
.339b	60		rts				rts
.339c					RSLoadPosition:
.339c	a8		tay				tay
.339d	b1 37		lda ($37),y			lda 	(rsPointer),y 				; read codePointer back
.339f	85 28		sta $28				sta 	codePtr
.33a1	c8		iny				iny
.33a2	b1 37		lda ($37),y			lda 	(rsPointer),y
.33a4	85 29		sta $29				sta 	codePtr+1
.33a6	c8		iny				iny
.33a7	b1 37		lda ($37),y			lda 	(rsPointer),y 				; and the offset
.33a9	a8		tay				tay 								; to Y
.33aa	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/utility/warmstart.asm

.33ab					WarmStart:
.33ab	a2 04		ldx #$04		ldx	#4
.33ad	20 16 1d	jsr $1d16		jsr	interactionHandler

;******  Return to file: main/main.asm

.33b0					mainHandler:
.33b0	7c b3 33	jmp ($33b3,x)			jmp 	(mainVectors,x)
.33b3					mainVectors:
>33b3	cf 33					.word _DummyControlHandler ; index 0
>33b5	42 33					.word CheckComma           ; index 2
>33b7	35 33					.word CheckRightParen      ; index 4
>33b9	1e 25					.word XCommandClear        ; index 6
>33bb	45 2c					.word LinkEvaluate         ; index 8
>33bd	51 2c					.word LinkEvaluateInteger  ; index 10
>33bf	5d 2c					.word LinkEvaluateSmallInt ; index 12
>33c1	57 2c					.word LinkEvaluateString   ; index 14
>33c3	4b 2c					.word LinkEvaluateTerm     ; index 16
>33c5	11 32					.word MLInt32ToString      ; index 18
>33c7	ad 26					.word Command_XNew         ; index 20
>33c9	bb 26					.word XCommand_Run         ; index 22
>33cb	c7 26					.word Command_RunFrom      ; index 24
>33cd	29 31					.word LinkInt32FromString  ; index 26
.33cf					_DummyControlHandler:
.33cf	60		rts			rts

;******  Return to file: basic.asm

.33d0					section_end_main:
.33d0					section_start_string:

;******  Processing file: string/string.asm


;******  Processing file: string/functions/chr.asm

.33d0					StringChrs:
.33d0	aa		tax				tax 								; set up stack
.33d1	a9 02		lda #$02			lda 	#2
.33d3	20 93 34	jsr $3493			jsr 	AllocateSoftString
.33d6	98		tya				tya
.33d7	20 b9 34	jsr $34b9			jsr 	WriteSoftString
.33da					StringUpdate:
.33da	20 e8 33	jsr $33e8			jsr 	ReturnSoftString
.33dd	8a		txa				txa
.33de	60		rts				rts
.33df					StringNull:
.33df	aa		tax				tax
.33e0	a9 01		lda #$01			lda 	#1
.33e2	20 93 34	jsr $3493			jsr 	AllocateSoftString
.33e5	4c da 33	jmp $33da			jmp 	StringUpdate
.33e8					ReturnSoftString:
.33e8	a5 39		lda $39				lda 	softMemAlloc 				; copy address
.33ea	95 50		sta $50,x			sta 	esInt0,x
.33ec	a5 3a		lda $3a				lda 	softMemAlloc+1
.33ee	95 58		sta $58,x			sta 	esInt1,x
.33f0	a9 00		lda #$00			lda 	#0 							; zero upper bytes
.33f2	95 60		sta $60,x			sta 	esInt2,x
.33f4	95 68		sta $68,x			sta 	esInt3,x
.33f6	a9 40		lda #$40			lda 	#$40 						; type string.
.33f8	95 48		sta $48,x			sta 	esType,x
.33fa	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/functions/compare.asm

.33fb					STRCompare:
.33fb	48		pha				pha 								; save A
.33fc	aa		tax				tax 								; put stack pos in X
.33fd	98		tya				tya
.33fe	48		pha				pha
.33ff	20 33 34	jsr $3433			jsr 	CopyStringPair 				; copy strings to temp0,temp1
.3402	a0 00		ldy #$00			ldy 	#0 							; get the smaller of the two string sizes.
.3404	b1 2a		lda ($2a),y			lda 	(temp0),y
.3406	d1 2c		cmp ($2c),y			cmp 	(temp1),y
.3408	90 02		bcc $340c			bcc 	_SCNotSmaller
.340a	b1 2c		lda ($2c),y			lda 	(temp1),y
.340c					_SCNotSmaller:
.340c	aa		tax				tax 								; put that in X. We compare this many chars first.
.340d					_SCCompareLoop:
.340d	e0 00		cpx #$00			cpx 	#0 							; if compared all the smaller, then it is the shorter
.340f	f0 0c		beq $341d			beq 	_SCSameToEndShortest 		; one that is the smallest if they are different lengths.
.3411	ca		dex				dex 								; decrement chars to compare.
.3412	c8		iny				iny 								; move to next character
.3413	38		sec				sec 								; calculate s1[y]-s2[y]
.3414	b1 2a		lda ($2a),y			lda 	(temp0),y
.3416	f1 2c		sbc ($2c),y			sbc 	(temp1),y
.3418	d0 0a		bne $3424			bne 	_SCReturnResult 			; if different return sign of A
.341a	4c 0d 34	jmp $340d			jmp 	_SCCompareLoop
.341d					_SCSameToEndShortest
.341d	a0 00		ldy #$00			ldy 	#0 							; compare len(s1) - len(s2)
.341f	38		sec				sec
.3420	b1 2a		lda ($2a),y			lda 	(temp0),y
.3422	f1 2c		sbc ($2c),y			sbc 	(temp1),y
.3424					_SCReturnResult:
.3424	08		php				php 								; set return to zero preserving PSW.
.3425	a2 00		ldx #$00			ldx 	#0
.3427	28		plp				plp
.3428	f0 05		beq $342f			beq 	_SCExit 					; two values equal, then exit
.342a	ca		dex				dex 								; X = $FF
.342b	90 02		bcc $342f			bcc 	_SCExit 					; if 1st < 2nd then -1
.342d	a2 01		ldx #$01			ldx 	#1 							; X = $01 if greater
.342f					_SCExit:
.342f	68		pla				pla
.3430	a8		tay				tay
.3431	68		pla				pla
.3432	60		rts				rts
.3433					CopyStringPair:
.3433	b5 51		lda $51,x			lda 	esInt0+1,x
.3435	85 2c		sta $2c				sta 	temp1
.3437	b5 59		lda $59,x			lda 	esInt1+1,x
.3439	85 2d		sta $2d				sta 	temp1+1
.343b					CopyStringTop:
.343b	b5 50		lda $50,x			lda 	esInt0,x
.343d	85 2a		sta $2a				sta 	temp0
.343f	b5 58		lda $58,x			lda 	esInt1,x
.3441	85 2b		sta $2b				sta 	temp0+1
.3443	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/functions/concat.asm

.3444					StringConcat:
.3444	aa		tax				tax									; stack pos in X
.3445	98		tya				tya
.3446	48		pha				pha
.3447	20 33 34	jsr $3433			jsr 	CopyStringPair 				; temp0 and temp1 point to strings to concat.
.344a	38		sec				sec 								; calculate alloc strings. lengths added + 1 for size.
.344b	a0 00		ldy #$00			ldy 	#0
.344d	b1 2a		lda ($2a),y			lda 	(temp0),y
.344f	71 2c		adc ($2c),y			adc 	(temp1),y
.3451	b0 1c		bcs $346f			bcs 	_SCError 					; just too many characters here.
.3453	c9 fc		cmp #$fc			cmp 	#MaxStringSize
.3455	b0 18		bcs $346f			bcs 	_SCError
.3457	20 93 34	jsr $3493			jsr 	AllocateSoftString 			; allocate soft string memory, set pointer.
.345a	20 8a 34	jsr $348a			jsr 	CopySoftToStack 			; copy that to the stack.
.345d	20 74 34	jsr $3474			jsr 	SCCopyTemp0 				; copy temp0
.3460	a5 2c		lda $2c				lda 	temp1 						; copy temp1 to temp0
.3462	85 2a		sta $2a				sta 	temp0
.3464	a5 2d		lda $2d				lda 	temp1+1
.3466	85 2b		sta $2b				sta 	temp0+1
.3468	20 74 34	jsr $3474			jsr 	SCCopyTemp0 				; copy temp0 e.g. what was temp1.
.346b	68		pla				pla
.346c	a8		tay				tay
.346d	8a		txa				txa 								; and A
.346e	60		rts				rts
.346f					_SCError:
.346f	a2 0d		ldx #$0d			ldx 	#ErrorID_StrLen
.3471	20 18 15	jsr $1518		jsr	errorHandler
.3474					SCCopyTemp0:
.3474	a0 00		ldy #$00			ldy 	#0 							; put count in temp2
.3476	b1 2a		lda ($2a),y			lda 	(temp0),y
.3478	85 2e		sta $2e				sta 	temp2
.347a					_SCCopyLoop:
.347a	a5 2e		lda $2e				lda 	temp2 						; done the lot
.347c	f0 0b		beq $3489			beq 	_SCCopyExit
.347e	c6 2e		dec $2e				dec 	temp2
.3480	c8		iny				iny 								; get next char
.3481	b1 2a		lda ($2a),y			lda 	(temp0),y
.3483	20 b9 34	jsr $34b9			jsr 	WriteSoftString 			; write to soft string.
.3486	4c 7a 34	jmp $347a			jmp 	_SCCopyLoop
.3489					_SCCopyExit:
.3489	60		rts				rts
.348a					CopySoftToStack:
.348a	a5 39		lda $39				lda 	SoftMemAlloc 				; copy the memory allocation pointer to the stack.
.348c	95 50		sta $50,x			sta 	esInt0,x 					; type is already string.
.348e	a5 3a		lda $3a				lda 	SoftMemAlloc+1
.3490	95 58		sta $58,x			sta 	esInt1,x
.3492	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/functions/memory.asm

.0039					softMemAlloc:
>0039							.fill 	2  							; if MSB is zero needs resetting on allocation.
.3493					AllocateSoftString:
.3493	85 32		sta $32				sta 	tempShort 					; save count
.3495	98		tya				tya
.3496	48		pha				pha
.3497	a5 3a		lda $3a				lda 	softMemAlloc+1 				; if the high byte is zero, it needs allocating.
.3499	d0 09		bne $34a4			bne 	_ASSDone
.349b	a5 33		lda $33				lda 	highMemory 					; reset the soft memory alloc pointer.
.349d	85 39		sta $39				sta 	softMemAlloc 				; to speed up slightly, we only reset this when we first need it
.349f	a4 34		ldy $34				ldy 	highMemory+1 				; but it needs to be reset before each command.
.34a1	88		dey				dey 								; it is set to 1/4k below high memory, allowing space
.34a2	84 3a		sty $3a				sty 	softMemAlloc+1 				; for a concreted string.
.34a4					_ASSDone:
.34a4	38		sec				sec 								; allocate downwards enough memory
.34a5	a5 39		lda $39				lda 	softMemAlloc 				; subtract the memory requirements in A from
.34a7	e5 32		sbc $32				sbc 	tempShort 					; the soft memory pointer
.34a9	85 39		sta $39				sta 	softMemAlloc
.34ab	a5 3a		lda $3a				lda 	softMemAlloc+1
.34ad	e9 00		sbc #$00			sbc 	#0
.34af	85 3a		sta $3a				sta 	softMemAlloc+1
.34b1	a9 00		lda #$00			lda 	#0 							; empty that string, set the length = 0.
.34b3	a8		tay				tay
.34b4	91 39		sta ($39),y			sta 	(softMemAlloc),y
.34b6	68		pla				pla
.34b7	a8		tay				tay
.34b8	60		rts				rts
.34b9					WriteSoftString:
.34b9	84 32		sty $32				sty 	tempShort 					; save Y
.34bb	48		pha				pha 								; save character on stack
.34bc	a0 00		ldy #$00			ldy 	#0 							; get and bump length
.34be	b1 39		lda ($39),y			lda 	(softMemAlloc),y
.34c0	18		clc				clc
.34c1	69 01		adc #$01			adc 	#1
.34c3	91 39		sta ($39),y			sta 	(softMemAlloc),y
.34c5	a8		tay				tay 								; offset in Y
.34c6	68		pla				pla 								; get char and write.
.34c7	91 39		sta ($39),y			sta 	(softMemAlloc),y
.34c9	a4 32		ldy $32				ldy 	tempShort 					; restore Y and exit.
.34cb	60		rts				rts
.34cc					StrClone:
.34cc	aa		tax				tax 								; set up stack.
.34cd	98		tya				tya
.34ce	48		pha				pha
.34cf	a0 00		ldy #$00			ldy 	#0 							; get length, add 1 for length
.34d1	b1 2a		lda ($2a),y			lda 	(temp0),y 					; this is the bytes required.
.34d3	18		clc				clc
.34d4	69 01		adc #$01			adc 	#1
.34d6	20 93 34	jsr $3493			jsr 	AllocateSoftString 			; allocate soft memory
.34d9	a5 39		lda $39				lda 	softMemAlloc 				; copy that address to TOS
.34db	95 50		sta $50,x			sta 	esInt0,x
.34dd	a5 3a		lda $3a				lda 	softMemAlloc+1
.34df	95 58		sta $58,x			sta 	esInt1,x
.34e1	a9 00		lda #$00			lda 	#0 							; zero upper 2 bytes
.34e3	95 60		sta $60,x			sta 	esInt2,x
.34e5	95 68		sta $68,x			sta 	esInt3,x
.34e7	a9 40		lda #$40			lda 	#$40 						; set type to string.
.34e9	95 48		sta $48,x			sta 	esType,x
.34eb	20 74 34	jsr $3474			jsr 	SCCopyTemp0 				; copy temp0 string to soft memory copy (concat.asm)
.34ee	68		pla				pla
.34ef	a8		tay				tay
.34f0	8a		txa				txa
.34f1	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/functions/setcase.asm

.34f2					CaseString:
.34f2	48		pha				pha 								; save A and copy to X
.34f3	aa		tax				tax
.34f4	98		tya				tya
.34f5	48		pha				pha
.34f6	20 3b 34	jsr $343b			jsr 	CopyStringTop 				; target string -> temp0
.34f9	a0 00		ldy #$00			ldy 	#0
.34fb	b1 2a		lda ($2a),y			lda 	(temp0),y  					; get length,
.34fd	18		clc				clc
.34fe	69 01		adc #$01			adc 	#1 							; one more for length byte
.3500	20 93 34	jsr $3493			jsr 	AllocateSoftString 			; allocate soft string memory, set pointer.
.3503	20 8a 34	jsr $348a			jsr 	CopySoftToStack 			; copy that to the stack.
.3506	a0 00		ldy #$00			ldy 	#0
.3508	b1 2a		lda ($2a),y			lda 	(temp0),y 					; count to copy in X
.350a	aa		tax				tax
.350b					_CSCopy:
.350b	e0 00		cpx #$00			cpx 	#0 							; finished if 0.
.350d	f0 24		beq $3533			beq 	_CSExit
.350f	ca		dex				dex
.3510	c8		iny				iny
.3511	68		pla				pla 								; check direction
.3512	48		pha				pha
.3513	f0 0c		beq $3521			beq 	_CSUpper
.3515	b1 2a		lda ($2a),y			lda 	(temp0),y 					; lower$() code
.3517	c9 41		cmp #$41			cmp 	#"A"
.3519	90 12		bcc $352d			bcc 	_CSWrite
.351b	c9 5b		cmp #$5b			cmp 	#"Z"+1
.351d	b0 0e		bcs $352d			bcs 	_CSWrite
.351f	90 0a		bcc $352b			bcc 	_CSFlipWrite
.3521					_CSUpper:
.3521	b1 2a		lda ($2a),y			lda 	(temp0),y 					; upper$() code
.3523	c9 61		cmp #$61			cmp 	#"a"
.3525	90 06		bcc $352d			bcc 	_CSWrite
.3527	c9 7b		cmp #$7b			cmp 	#"z"+1
.3529	b0 02		bcs $352d			bcs 	_CSWrite
.352b					_CSFlipWrite:
.352b	49 20		eor #$20			eor 	#"A"^"a" 					; switch case.
.352d					_CSWrite:
.352d	20 b9 34	jsr $34b9			jsr 	WriteSoftString 			; add to soft string.
.3530	4c 0b 35	jmp $350b			jmp 	_CSCopy
.3533					_CSExit:
.3533	68		pla				pla
.3534	a8		tay				tay
.3535	68		pla				pla
.3536	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/functions/substring.asm

.3537					StringSubstring:
.3537	48		pha				pha
.3538	aa		tax				tax 								; access stack.
.3539	98		tya				tya
.353a	48		pha				pha
.353b	20 3b 34	jsr $343b			jsr 	CopyStringTop 				; point temp0 to the string.
.353e	a0 00		ldy #$00			ldy 	#0 							; get length.
.3540	b1 2a		lda ($2a),y			lda 	(temp0),Y
.3542	85 2c		sta $2c				sta 	temp1
.3544	b5 51		lda $51,x			lda 	esInt0+1,x 					; get the initial offset
.3546	c5 2c		cmp $2c				cmp 	temp1 						; return "" if > length.
.3548	f0 02		beq $354c			beq 	_SSBOkay
.354a	b0 2a		bcs $3576			bcs 	_SSBReturnNull
.354c					_SSBOkay:
.354c	a5 2c		lda $2c				lda 	temp1 						; get the total length +1
.354e	18		clc				clc
.354f	69 01		adc #$01			adc 	#1
.3551	38		sec				sec
.3552	f5 51		sbc $51,x			sbc 	esInt0+1,x 					; the anything >= this is bad - max size
.3554	d5 52		cmp $52,x			cmp 	esInt0+2,x  				; check bad >= required
.3556	90 02		bcc $355a			bcc		_SSBTrunc
.3558	b5 52		lda $52,x			lda 	esInt0+2,x
.355a					_SSBTrunc:
.355a	85 2d		sta $2d				sta 	temp1+1 					; characters to copy.
.355c	18		clc				clc
.355d	69 01		adc #$01			adc 	#1 							; add 1
.355f	20 93 34	jsr $3493			jsr 	AllocateSoftString 			; allocate soft string memory, set pointer.
.3562	20 8a 34	jsr $348a			jsr 	CopySoftToStack 			; copy that to the stack.
.3565	b4 51		ldy $51,x			ldy 	esInt0+1,x 					; get initial position of char to copy
.3567					_SSBCopyLoop:
.3567	a5 2d		lda $2d				lda 	temp1+1 					; done them all
.3569	f0 0e		beq $3579			beq 	_SSBExit
.356b	c6 2d		dec $2d				dec 	temp1+1
.356d	b1 2a		lda ($2a),y			lda 	(temp0),y 					; get and write character
.356f	20 b9 34	jsr $34b9			jsr 	WriteSoftString
.3572	c8		iny				iny
.3573	4c 67 35	jmp $3567			jmp 	_SSBCopyLoop
.3576					_SSBReturnNull:
.3576	20 7d 35	jsr $357d			jsr 	ReturnNull
.3579					_SSBExit:
.3579	68		pla				pla
.357a	a8		tay				tay
.357b	68		pla				pla
.357c	60		rts				rts
.357d					ReturnNull:
.357d	a9 00		lda #$00			lda 	#0 							; clear null string
.357f	8d ce 0a	sta $0ace			sta 	NullString
.3582	a9 ce		lda #$ce			lda 	#NullString & $FF 			; set a pointer to it
.3584	95 50		sta $50,x			sta 	esInt0,x
.3586	a9 0a		lda #$0a			lda 	#NullString >> 8
.3588	95 58		sta $58,x			sta 	esInt1,x
.358a	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/functions/write.asm

.0ce0					srcStrLen:
>0ce0							.fill 	1
.358b					StringWrite:
.358b	aa		tax				tax
.358c	48		pha				pha
.358d	98		tya				tya
.358e	48		pha				pha
.358f	20 b6 35	jsr $35b6			jsr 	CheckOverwriteCurrent
.3592	b0 0d		bcs $35a1			bcs		_SWCopyCurrent
.3594	20 f4 35	jsr $35f4			jsr 	RequiresConcretion
.3597	90 0e		bcc $35a7			bcc 	_SWWriteReference
.3599	20 57 36	jsr $3657			jsr 	CheckSpecialConcretion
.359c	b0 09		bcs $35a7			bcs 	_SWWriteReference
.359e	20 08 36	jsr $3608			jsr 	AllocateHardMemory
.35a1					_SWCopyCurrent:
.35a1	20 3b 36	jsr $363b			jsr 	CopyStringToHardMemory
.35a4	4c b2 35	jmp $35b2			jmp 	_SWExit
.35a7					_SWWriteReference
.35a7	a0 00		ldy #$00			ldy 	#0
.35a9	a5 2a		lda $2a				lda 	temp0
.35ab	91 2c		sta ($2c),y			sta 	(temp1),y
.35ad	c8		iny				iny
.35ae	a5 2b		lda $2b				lda 	temp0+1
.35b0	91 2c		sta ($2c),y			sta 	(temp1),y
.35b2					_SWExit:
.35b2	68		pla				pla
.35b3	a8		tay				tay
.35b4	68		pla				pla
.35b5	60		rts				rts
.35b6					CheckOverwriteCurrent:
.35b6	a0 00		ldy #$00			ldy 	#0 						; get address of string being written to temp0
.35b8	b5 59		lda $59,x			lda 	esInt1+1,x
.35ba	85 2b		sta $2b				sta 	temp0+1
.35bc	b5 51		lda $51,x			lda 	esInt0+1,x
.35be	85 2a		sta $2a				sta 	temp0
.35c0	b1 2a		lda ($2a),y			lda 	(temp0),y 				; get length of string being copied and save it.
.35c2	8d e0 0c	sta $0ce0			sta 	srcStrLen
.35c5	b5 50		lda $50,x			lda 	esInt0,x 				; copy where the final address it being written to temp1.
.35c7	85 2c		sta $2c				sta 	temp1 					; e.g. if it is ax$ then temp1 will point to the ax$
.35c9	b5 58		lda $58,x			lda 	esInt1,x 				; data record + 5
.35cb	85 2d		sta $2d				sta 	temp1+1
.35cd	a0 01		ldy #$01			ldy 	#1 						; get the MSB of the address of string currently stored there.
.35cf	b1 2c		lda ($2c),y			lda 	(temp1),y
.35d1	c5 34		cmp $34				cmp 	highMemory+1 			; if < high memory then it cannot be something stored
.35d3	90 1b		bcc $35f0			bcc 	_COCFail 				; in hard memory.
.35d5	a0 00		ldy #$00			ldy 	#0 						; copy target address - 1 into temp2
.35d7	b1 2c		lda ($2c),y			lda 	(temp1),y 				; when allocating hard memory, the overall size is
.35d9	e9 01		sbc #$01			sbc 	#1 						; in the previous byte.
.35db	85 2e		sta $2e				sta 	temp2
.35dd	c8		iny				iny
.35de	b1 2c		lda ($2c),y			lda 	(temp1),y
.35e0	e9 00		sbc #$00			sbc 	#0
.35e2	85 2f		sta $2f				sta 	temp2+1
.35e4	a0 00		ldy #$00			ldy 	#0 						; how large is this physical chunk.
.35e6	b1 2e		lda ($2e),y			lda 	(temp2),y
.35e8	38		sec				sec  							; maximum character capacity.
.35e9	e9 02		sbc #$02			sbc 	#2
.35eb	cd e0 0c	cmp $0ce0			cmp 	srcStrLen 				; if >= the required length
.35ee	b0 02		bcs $35f2			bcs 	_COCCanReuse
.35f0					_COCFail:
.35f0	18		clc				clc
.35f1	60		rts				rts
.35f2					_COCCanReuse:
.35f2	38		sec				sec
.35f3	60		rts				rts
.35f4					RequiresConcretion:
.35f4	a5 2b		lda $2b				lda 	temp0+1 				; get MSB of address of string to be written
.35f6	c5 34		cmp $34				cmp 	highMemory+1 			; if >= high memory it is concreted
.35f8	b0 0a		bcs $3604			bcs 	_RCSucceed 				; so it needs concreting again - duplication.
.35fa	a5 3a		lda $3a				lda 	softMemAlloc+1 			; have we allocated any soft memory yet ?
.35fc	f0 08		beq $3606			beq 	_RCFail 				; if not, this cannot be soft memory.
.35fe	a5 2b		lda $2b				lda 	temp0+1 				; get MSB of address of string to be written
.3600	c5 3a		cmp $3a				cmp 	softMemAlloc+1 			; if >= soft mem alloc it is either soft
.3602	90 02		bcc $3606			bcc 	_RCFail 				; so concreting
.3604					_RCSucceed:
.3604	38		sec				sec
.3605	60		rts				rts
.3606					_RCFail:
.3606	18		clc				clc
.3607	60		rts				rts
.3608					AllocateHardMemory:
.3608	98		tya				tya
.3609	48		pha				pha
.360a	ad e0 0c	lda $0ce0			lda 	srcStrLen 				; characters in string
.360d	69 0a		adc #$0a			adc 	#1+1+8 					; one for hard memory size, one for string size, extra for expansion
.360f	b0 04		bcs $3615			bcs 	_AHMSetMax 				; max out that amount.
.3611	c9 fe		cmp #$fe			cmp 	#MaxStringSize+2
.3613	90 02		bcc $3617			bcc 	_AHMIsOkay
.3615					_AHMSetMax:
.3615	a9 fe		lda #$fe			lda 	#MaxStringSize+2
.3617					_AHMIsOkay:
.3617	48		pha				pha	 							; save size to be allocated
.3618	49 ff		eor #$ff			eor 	#$FF 					; complement and add to high Memory
.361a	38		sec				sec  							; and copy result to TOS as target address.
.361b	65 33		adc $33				adc 	highMemory
.361d	85 33		sta $33				sta 	highMemory
.361f	a5 34		lda $34				lda 	highMemory+1
.3621	69 ff		adc #$ff			adc 	#$FF
.3623	85 34		sta $34				sta 	highMemory+1
.3625	a0 00		ldy #$00			ldy 	#0 						; Y = 0
.3627	68		pla				pla 							; get the total size of the storage block
.3628	91 33		sta ($33),y			sta 	(highMemory),y 			; and set it
.362a	18		clc				clc
.362b	a5 33		lda $33				lda		highMemory 				; point the target address to the byte after this.
.362d	69 01		adc #$01			adc 	#1
.362f	91 2c		sta ($2c),y			sta 	(temp1),y
.3631	a5 34		lda $34				lda 	highMemory+1
.3633	69 00		adc #$00			adc 	#0
.3635	c8		iny				iny
.3636	91 2c		sta ($2c),y			sta 	(temp1),y
.3638	68		pla				pla
.3639	a8		tay				tay
.363a	60		rts				rts
.363b					CopyStringToHardMemory:
.363b	98		tya				tya
.363c	48		pha				pha
.363d	a0 00		ldy #$00			ldy 	#0 						; copy target address to temp2
.363f	b1 2c		lda ($2c),y			lda 	(temp1),y
.3641	85 2e		sta $2e				sta 	temp2
.3643	c8		iny				iny
.3644	b1 2c		lda ($2c),y			lda 	(temp1),y
.3646	85 2f		sta $2f				sta 	temp2+1
.3648	ac e0 0c	ldy $0ce0			ldy 	srcStrLen 				; copy this + 1 characters, (length too) hence $FF compare
.364b					_CSTHMLoop:
.364b	b1 2a		lda ($2a),y			lda 	(temp0),y
.364d	91 2e		sta ($2e),y			sta 	(temp2),y
.364f	88		dey				dey
.3650	c0 ff		cpy #$ff			cpy 	#$FF 					; this does the +1
.3652	d0 f7		bne $364b			bne 	_CSTHMLoop
.3654	68		pla				pla
.3655	a8		tay				tay
.3656	60		rts				rts
.3657					CheckSpecialConcretion:
.3657	ad e0 0c	lda $0ce0			lda 	srcStrLen 				; check string is null e.g. length = 0
.365a	f0 02		beq $365e			beq 	_CSCNullString
.365c	18		clc				clc
.365d	60		rts				rts
.365e					_CSCNullString:
.365e	a9 00		lda #$00			lda 	#0 						; by always returning this address we don't waste
.3660	8d ce 0a	sta $0ace			sta 	NullString		 		; storage on null strings.
.3663	a9 ce		lda #$ce			lda 	#(NullString) & $FF
.3665	85 2a		sta $2a				sta 	temp0
.3667	a9 0a		lda #$0a			lda 	#(NullString) >> 8
.3669	85 2b		sta $2b				sta 	1+(temp0)
.366b	38		sec				sec
.366c	60		rts				rts

;******  Return to file: string/string.asm

.366d					stringHandler:
.366d	7c 70 36	jmp ($3670,x)			jmp 	(stringVectors,x)
.3670					stringVectors:
>3670	82 36					.word _DummyControlHandler ; index 0
>3672	d0 33					.word StringChrs           ; index 2
>3674	cc 34					.word StrClone             ; index 4
>3676	44 34					.word StringConcat         ; index 6
>3678	df 33					.word StringNull           ; index 8
>367a	fb 33					.word STRCompare           ; index 10
>367c	f2 34					.word CaseString           ; index 12
>367e	37 35					.word StringSubstring      ; index 14
>3680	8b 35					.word StringWrite          ; index 16
.3682					_DummyControlHandler:
.3682	60		rts			rts

;******  Return to file: basic.asm

.3683					section_end_string:
.3683					section_start_tokeniser:

;******  Processing file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/detokenise/detokenise.asm

.0ce1					deTokeniseVector:
>0ce1							.fill 	2
.0ce3					lastCharacterClass:
>0ce3							.fill 	1
.0ce4					indent:
>0ce4							.fill 	1
.3683					ListLine:
.3683	48		pha				pha								; enter here to list to console. sets the output vector
.3684	a9 bb		lda #$bb			lda 	#(deTokenPrint) & $FF
.3686	8d e1 0c	sta $0ce1			sta 	deTokeniseVector
.3689	a9 37		lda #$37			lda 	#(deTokenPrint) >> 8
.368b	8d e2 0c	sta $0ce2			sta 	1+(deTokeniseVector)
.368e	68		pla				pla
.368f					Detokenise:
.368f	18		clc				clc 							; space required for line number.
.3690	69 06		adc #$06			adc 	#6
.3692	8d e4 0c	sta $0ce4			sta 	indent
.3695	a9 ff		lda #$ff			lda 	#$FF 					; last thing printed is a dummy value.
.3697	8d e3 0c	sta $0ce3			sta 	lastCharacterClass
.369a	a2 02		ldx #$02			ldx 	#2
.369c	a9 00		lda #$00			lda 	#0 						; clear upper two bytes
.369e	95 60		sta $60,x			sta 	esInt2,x
.36a0	95 68		sta $68,x			sta 	esInt3,x
.36a2	a0 01		ldy #$01			ldy 	#1 						; copy line number to stack,2 (as using stack 0,1 for list range)
.36a4	b1 28		lda ($28),y			lda 	(codePtr),y
.36a6	95 50		sta $50,x			sta 	esInt0,x
.36a8	c8		iny				iny
.36a9	b1 28		lda ($28),y			lda 	(codePtr),y
.36ab	95 58		sta $58,x			sta 	esInt1,x
.36ad	a9 84		lda #$84			lda 	#LTYLineNumber
.36af	20 96 37	jsr $3796			jsr 	ListOutputCharacter
.36b2	a9 0a		lda #$0a			lda 	#10 					; base 10
.36b4	20 5a 37	jsr $375a			jsr 	DTPrintInteger 			; print as integer.
.36b7	a0 00		ldy #$00			ldy 	#0 						; get length
.36b9	b1 2a		lda ($2a),y			lda 	(temp0),y 				; into X
.36bb	aa		tax				tax
.36bc					_DTPadOut:
.36bc	a9 20		lda #$20			lda 	#" " 					; pad out to indent.
.36be	20 96 37	jsr $3796			jsr 	ListOutputCharacter
.36c1	e8		inx				inx
.36c2	ec e4 0c	cpx $0ce4			cpx 	indent
.36c5	d0 f5		bne $36bc			bne 	_DTPadOut
.36c7	a0 03		ldy #$03			ldy 	#3 						; start position.
.36c9					_DTListLoop:
.36c9	b1 28		lda ($28),y			lda 	(codePtr),y
.36cb	c9 85		cmp #$85			cmp 	#TOK_STR 				; Inline string.
.36cd	f0 5e		beq $372d			beq 	_DTIsString
.36cf	c9 84		cmp #$84			cmp 	#TOK_FPC 				; Floating point
.36d1	f0 56		beq $3729			beq 	_DTIsFloat
.36d3	c9 c5		cmp #$c5			cmp 	#TKW_AMP 				; & hex marker
.36d5	f0 16		beq $36ed			beq 	_DTHexConstant
.36d7	c9 80		cmp #$80			cmp 	#TOK_EOL 				; End of Line
.36d9	d0 06		bne $36e1			bne 	_DTNotEnd
.36db	a9 ff		lda #$ff			lda 	#255 					; print CR
.36dd	20 96 37	jsr $3796			jsr 	ListOutputCharacter
.36e0	60		rts				rts
.36e1					_DTNotEnd:
.36e1	c9 00		cmp #$00			cmp 	#0
.36e3	30 38		bmi $371d			bmi 	_DTIsToken
.36e5	c9 40		cmp #$40			cmp 	#$40
.36e7	90 3a		bcc $3723			bcc 	_DTIsIdentifier
.36e9	a9 0a		lda #$0a			lda 	#10 					; this is the base, unsigned decimal
.36eb	d0 0d		bne $36fa			bne 	_DTConstant
.36ed					_DTHexConstant:
.36ed	a9 26		lda #$26			lda 	#"&"
.36ef	20 96 37	jsr $3796			jsr 	ListOutputCharacter
.36f2	c8		iny				iny
.36f3	a9 01		lda #$01			lda 	#1 						; switch to spaces so &xxxx is treated like a number.
.36f5	20 d7 37	jsr $37d7			jsr 	DTSwitchMode
.36f8	a9 10		lda #$10			lda 	#16						; print line unsigned hex
.36fa					_DTConstant:
.36fa	48		pha				pha
.36fb	a9 00		lda #$00			lda 	#0 						; now constant, may need spaces
.36fd	20 d7 37	jsr $37d7			jsr 	DTSwitchMode
.3700	a9 86		lda #$86			lda 	#LTYConstant
.3702	20 96 37	jsr $3796			jsr 	ListOutputCharacter
.3705	a2 02		ldx #$02			ldx 	#2 						; get its value
.3707	8a		txa				txa
.3708	a2 10		ldx #$10		ldx	#16
.370a	20 b0 33	jsr $33b0		jsr	mainHandler
.370d	aa		tax				tax
.370e	68		pla				pla 							; get base back
.370f	85 32		sta $32				sta 	tempShort
.3711	98		tya				tya
.3712	48		pha				pha
.3713	a5 32		lda $32				lda 	tempShort 				; print in base A stck level X
.3715	20 5a 37	jsr $375a			jsr 	DTPrintInteger
.3718	68		pla				pla
.3719	a8		tay				tay
.371a	4c c9 36	jmp $36c9			jmp 	_DTListLoop
.371d					_DTIsToken:
.371d	20 30 38	jsr $3830			jsr 	DTDecodeToken
.3720	4c c9 36	jmp $36c9			jmp 	_DTListLoop
.3723					_DTIsIdentifier:
.3723	20 e9 37	jsr $37e9			jsr 	DTIdentifier
.3726	4c c9 36	jmp $36c9			jmp 	_DTListLoop
.3729					_DTIsFloat:
>3729	db						.byte 	$DB
.372a	4c 29 37	jmp $3729			jmp 	_DTIsFloat
.372d					_DTIsString:
.372d	a9 01		lda #$01			lda 	#1 							; now punctuation, may need spaces
.372f	20 d7 37	jsr $37d7			jsr 	DTSwitchMode
.3732	a9 81		lda #$81			lda 	#LTYString
.3734	20 96 37	jsr $3796			jsr 	ListOutputCharacter
.3737	a9 22		lda #$22			lda 	#'"'						; open quote
.3739	20 96 37	jsr $3796			jsr 	ListOutputCharacter
.373c	a2 02		ldx #$02			ldx 	#2 							; evaluate string to TOS2.
.373e	8a		txa				txa
.373f	a2 10		ldx #$10		ldx	#16
.3741	20 b0 33	jsr $33b0		jsr	mainHandler
.3744	aa		tax				tax
.3745	b5 50		lda $50,x			lda 	esInt0,x 					; copy string address to temp0
.3747	85 2a		sta $2a				sta 	temp0
.3749	b5 58		lda $58,x			lda 	esInt1,x
.374b	85 2b		sta $2b				sta 	temp0+1
.374d	a9 00		lda #$00			lda 	#0 							; don't capitalise.
.374f	20 6c 37	jsr $376c			jsr 	DTPrintLengthPrefix
.3752	a9 22		lda #$22			lda 	#'"'
.3754	20 96 37	jsr $3796			jsr 	ListOutputCharacter
.3757	4c c9 36	jmp $36c9			jmp 	_DTListLoop

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/detokenise/dtprint.asm

.0ce5					tPrintCount:
>0ce5							.fill 	1
.375a					DTPrintInteger:
.375a	48		pha				pha									; save base
.375b	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.375d	85 2a		sta $2a				sta 	temp0
.375f	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.3761	85 2b		sta $2b				sta 	1+(temp0)
.3763	68		pla				pla
.3764	a8		tay				tay
.3765	8a		txa				txa
.3766	a2 12		ldx #$12		ldx	#18
.3768	20 b0 33	jsr $33b0		jsr	mainHandler
.376b	aa		tax				tax 								; then drop through here.
.376c					DTPrintLengthPrefix:
.376c	aa		tax				tax 								; A = 0 = don't case convert.
.376d	98		tya				tya
.376e	48		pha				pha
.376f	a0 00		ldy #$00			ldy 	#0 							; get string length = chars to print.
.3771	b1 2a		lda ($2a),y			lda 	(temp0),y
.3773	8d e5 0c	sta $0ce5			sta 	tPrintCount
.3776	f0 1b		beq $3793			beq 	_DTPLPExit 					; empty string
.3778					_DTPLPLoop:
.3778	c8		iny				iny 								; get next.
.3779	b1 2a		lda ($2a),y			lda 	(temp0),y
.377b	29 7f		and #$7f			and 	#$7F
.377d	e0 00		cpx #$00			cpx 	#0 							; skip if not case converting
.377f	f0 0a		beq $378b			beq 	_DTPLPNoCase
.3781	c9 41		cmp #$41			cmp 	#"A" 						; if converting UC -> LC
.3783	90 06		bcc $378b			bcc 	_DTPLPNoCase
.3785	c9 5b		cmp #$5b			cmp 	#"Z"+1
.3787	b0 02		bcs $378b			bcs 	_DTPLPNoCase
.3789	49 20		eor #$20			eor 	#"A"^"a"
.378b					_DTPLPNoCase
.378b	20 96 37	jsr $3796			jsr 	ListOutputCharacter 		; call handler
.378e	ce e5 0c	dec $0ce5			dec 	tPrintCount 				; do all the characters
.3791	d0 e5		bne $3778			bne 	_DTPLPLoop
.3793					_DTPLPExit:
.3793	68		pla				pla
.3794	a8		tay				tay
.3795	60		rts				rts
.3796					ListOutputCharacter:
.3796	85 32		sta $32				sta 	tempShort
.3798	48		pha				pha
.3799	8a		txa				txa
.379a	48		pha				pha
.379b	98		tya				tya
.379c	48		pha				pha
.379d	a5 32		lda $32				lda 	tempShort 					; convert ASCII 6 bit (0-31) to 7 bit.
.379f	c9 20		cmp #$20			cmp 	#32
.37a1	b0 0c		bcs $37af			bcs		_LOCHiBit
.37a3	09 40		ora #$40			ora 	#64 						; conversion
.37a5	c9 40		cmp #$40			cmp 	#64							; make l/c
.37a7	f0 06		beq $37af			beq 	_LOCHiBit
.37a9	c9 5b		cmp #$5b			cmp 	#65+26
.37ab	b0 02		bcs $37af			bcs 	_LOCHiBit
.37ad	69 20		adc #$20			adc 	#32
.37af					_LOCHiBit:
.37af	20 b8 37	jsr $37b8			jsr 	_LOCCallVector				; call o/p handler routine
.37b2	68		pla				pla
.37b3	a8		tay				tay
.37b4	68		pla				pla
.37b5	aa		tax				tax
.37b6	68		pla				pla
.37b7					_LOCExit:
.37b7	60		rts				rts
.37b8					_LOCCallVector:
.37b8	6c e1 0c	jmp ($0ce1)			jmp 	(deTokeniseVector)
.37bb					deTokenPrint:
.37bb	c9 00		cmp #$00			cmp 	#0 							; if bit 7 sets ink colour
.37bd	30 06		bmi $37c5			bmi 	_dtpInk
.37bf	a2 16		ldx #$16		ldx	#22
.37c1	20 f6 14	jsr $14f6		jsr	deviceHandler
.37c4	60		rts				rts
.37c5	c9 ff		cmp #$ff	_dtpInk:cmp 	#255 						; e.g. herhe, get ink and set it
.37c7	f0 08		beq $37d1			beq 	_dtpCR						; except $FF => CRLF
.37c9	29 07		and #$07			and 	#7
.37cb	a2 08		ldx #$08		ldx	#8
.37cd	20 f6 14	jsr $14f6		jsr	deviceHandler
.37d0	60		rts				rts
.37d1					_dtpCR:
.37d1	a2 06		ldx #$06		ldx	#6
.37d3	20 f6 14	jsr $14f6		jsr	deviceHandler
.37d6	60		rts				rts
.37d7					DTSwitchMode:
.37d7	cd e3 0c	cmp $0ce3			cmp 	LastCharacterClass 			; if changed, update character class
.37da	f0 04		beq $37e0			beq 	_DTSMNoChange
.37dc	8d e3 0c	sta $0ce3			sta 	LastCharacterClass
.37df					_DTSMExit:
.37df	60		rts				rts
.37e0					_DTSMNoChange:
.37e0	c9 01		cmp #$01			cmp 	#1 							; if didn't change to punctuation, two identifiers so we
.37e2	f0 fb		beq $37df			beq 	_DTSMExit 					; need a space.
.37e4	a9 20		lda #$20			lda 	#" "
.37e6	4c 96 37	jmp $3796			jmp 	ListOutputCharacter

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/detokenise/identifier.asm

.37e9					DTIdentifier:
.37e9	a9 00		lda #$00			lda 	#0 							; now text, may need spaces
.37eb	20 d7 37	jsr $37d7			jsr 	DTSwitchMode
.37ee	a9 87		lda #$87			lda 	#LTYIdentifier
.37f0	20 96 37	jsr $3796			jsr 	ListOutputCharacter
.37f3					_DTILoop:
.37f3	b1 28		lda ($28),y			lda 	(codePtr),y 				; output main bit of identifier.
.37f5	c9 2d		cmp #$2d			cmp 	#"-"						; make - back to _
.37f7	d0 02		bne $37fb			bne 	_DTINotUS
.37f9	a9 5f		lda #$5f			lda 	#"_"
.37fb					_DTINotUS:
.37fb	20 96 37	jsr $3796			jsr 	ListOutputCharacter
.37fe	c8		iny				iny
.37ff	b1 28		lda ($28),y			lda 	(codePtr),y 				; until end identifier marker.
.3801	c9 3a		cmp #$3a			cmp 	#$3A
.3803	90 ee		bcc $37f3			bcc 	_DTILoop
.3805	c8		iny				iny
.3806	c9 3a		cmp #$3a			cmp 	#$3A 						; is it integer non array
.3808	f0 25		beq $382f			beq 	_DTIExit 					; no postfix.
.380a	48		pha				pha
.380b	a9 01		lda #$01			lda  	#1 							; it ends in punctuation
.380d	8d e3 0c	sta $0ce3			sta 	LastCharacterClass
.3810	a9 82		lda #$82			lda 	#LTYPunctuation
.3812	20 96 37	jsr $3796			jsr 	ListOutputCharacter
.3815	68		pla				pla
.3816	c9 3b		cmp #$3b			cmp 	#$3B
.3818	f0 10		beq $382a			beq 	_DTIArray
.381a	4a		lsr a				lsr 	a 							; array flag in C
.381b	08		php				php
.381c	49 1e		eor #$1e			eor 	#$3C/2 						; check if $
.381e	f0 02		beq $3822			beq 	_DTIDollar
.3820	a9 07		lda #$07			lda 	#"$"^"#" 					; this if #, 0 if $
.3822					_DTIDollar:
.3822	49 24		eor #$24			eor 	#"$"
.3824	20 96 37	jsr $3796			jsr 	ListOutputCharacter
.3827	28		plp				plp
.3828	90 05		bcc $382f			bcc 	_DTIExit
.382a					_DTIArray:
.382a	a9 28		lda #$28			lda 	#"("
.382c	20 96 37	jsr $3796			jsr 	ListOutputCharacter
.382f					_DTIExit:
.382f	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/detokenise/token.asm

.3830					DTDecodeToken:
.3830	a2 00		ldx #$00			ldx 	#0 							; table number to use
.3832	b1 28		lda ($28),y			lda 	(codePtr),y
.3834	c9 84		cmp #$84			cmp 	#$84
.3836	b0 05		bcs $383d			bcs 	_DTNotShift
.3838	29 03		and #$03			and 	#3 							; get the shift 1..3
.383a	0a		asl a				asl 	a 							; put 2 x in X
.383b	aa		tax				tax
.383c	c8		iny				iny
.383d					_DTNotShift:
.383d	bd 3f 3b	lda $3b3f,x			lda 	TokenTableAddress,x 		; get the token table to use to decode it.
.3840	85 2a		sta $2a				sta 	temp0 						; point into temp0
.3842	bd 40 3b	lda $3b40,x			lda 	TokenTableAddress+1,x
.3845	85 2b		sta $2b				sta 	temp0+1
.3847	b1 28		lda ($28),y			lda 	(codePtr),y 				; get the token value.
.3849	c8		iny				iny 								; consume it.
.384a	aa		tax				tax
.384b	98		tya				tya
.384c	48		pha				pha
.384d					_DTFindText:
.384d	e0 86		cpx #$86			cpx 	#$86 						; finished ?
.384f	f0 11		beq $3862			beq 	_DTFoundText
.3851	ca		dex				dex
.3852	a0 00		ldy #$00			ldy 	#0 							; add length+1 to temp0
.3854	38		sec				sec
.3855	b1 2a		lda ($2a),y			lda 	(temp0),y
.3857	65 2a		adc $2a				adc 	temp0
.3859	85 2a		sta $2a				sta 	temp0
.385b	90 f0		bcc $384d			bcc 	_DTFindText
.385d	e6 2b		inc $2b				inc 	temp0+1
.385f	4c 4d 38	jmp $384d			jmp 	_DTFindText
.3862					_DTFoundText:
.3862	a0 01		ldy #$01			ldy 	#1 							; get first character
.3864	b1 2a		lda ($2a),y			lda 	(temp0),y
.3866	29 7f		and #$7f			and 	#$7F 						; will have bit 7 set.
.3868	c9 41		cmp #$41			cmp 	#"A" 						; check for punctuation.
.386a	90 11		bcc $387d			bcc 	_DTIsPunctuation
.386c	c9 5b		cmp #$5b			cmp 	#"Z"+1
.386e	b0 0d		bcs $387d			bcs 	_DTIsPunctuation
.3870	a9 00		lda #$00			lda 	#0 							; now text, may need spaces
.3872	20 d7 37	jsr $37d7			jsr 	DTSwitchMode
.3875	a9 83		lda #$83			lda 	#LTYKeyword
.3877	20 96 37	jsr $3796			jsr 	ListOutputCharacter
.387a	4c 87 38	jmp $3887			jmp 	_DTPrint
.387d					_DTIsPunctuation:
.387d	a9 01		lda #$01			lda 	#1 							; now punctuation, may need spaces
.387f	20 d7 37	jsr $37d7			jsr 	DTSwitchMode
.3882	a9 82		lda #$82			lda 	#LTYPunctuation
.3884	20 96 37	jsr $3796			jsr 	ListOutputCharacter
.3887					_DTPrint:
.3887	a9 01		lda #$01			lda 	#1 							; fix case.
.3889	20 6c 37	jsr $376c			jsr 	DTPrintLengthPrefix 		; print it out.
.388c	a0 00		ldy #$00			ldy 	#0
.388e	b1 2a		lda ($2a),y			lda 	(temp0),y
.3890	a8		tay				tay
.3891	b1 2a		lda ($2a),y			lda 	(temp0),y
.3893	29 7f		and #$7f			and 	#$7F 						; will have bit 7 set.
.3895	c9 41		cmp #$41			cmp 	#"A" 						; check for punctuation.
.3897	90 04		bcc $389d			bcc 	_DTIsNowPunctuation
.3899	c9 5b		cmp #$5b			cmp 	#"Z"+1
.389b	90 05		bcc $38a2			bcc 	_DTPExit
.389d					_DTIsNowPunctuation:
.389d	a9 01		lda #$01			lda 	#1
.389f	8d e3 0c	sta $0ce3			sta		LastCharacterClass
.38a2					_DTPExit:
.38a2	68		pla				pla
.38a3	a8		tay				tay
.38a4	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/search.asm

.0ce6					currentSet:
>0ce6							.fill 	1
.38a5					TokenSearch:
.38a5	8a		txa				txa
.38a6	48		pha				pha
.38a7	98		tya				tya
.38a8	48		pha				pha
.38a9	a9 00		lda #$00			lda 	#0
.38ab	8d e6 0c	sta $0ce6			sta 	currentSet
.38ae					_TSLoop:
.38ae	ad e6 0c	lda $0ce6			lda 	currentSet 					; 2 x currentset in X
.38b1	0a		asl a				asl 	a
.38b2	aa		tax				tax
.38b3	bd 3f 3b	lda $3b3f,x			lda 	TokenTableAddress,x 		; set temp0 to the table address
.38b6	85 2a		sta $2a				sta 	temp0
.38b8	bd 40 3b	lda $3b40,x			lda 	TokenTableAddress+1,x
.38bb	85 2b		sta $2b				sta 	temp0+1
.38bd	20 e4 38	jsr $38e4			jsr 	TokenSearchOne 				; search one table
.38c0	b0 0d		bcs $38cf			bcs 	_TSFound 					; found a token.
.38c2	ee e6 0c	inc $0ce6			inc 	currentSet 					; next set
.38c5	ad e6 0c	lda $0ce6			lda 	currentSet
.38c8	c9 04		cmp #$04			cmp 	#4
.38ca	d0 e2		bne $38ae			bne 	_TSLoop 					; back if not done all four.
.38cc	18		clc				clc 								; clear carry and exit
.38cd	90 10		bcc $38df			bcc 	_TSExit
.38cf					_TSFound:
.38cf	48		pha				pha 								; save token
.38d0	ad e6 0c	lda $0ce6			lda 	currentSet					; if set zero no shift
.38d3	f0 05		beq $38da			beq 	_TSNoShift
.38d5	09 80		ora #$80			ora 	#$80 						; Write as $81-$83
.38d7	20 95 39	jsr $3995			jsr 	TokenWrite
.38da					_TSNoShift:
.38da	68		pla				pla 								; get token back
.38db	20 95 39	jsr $3995			jsr 	TokenWrite 					; write it
.38de	38		sec				sec 								; carry set indicating success
.38df					_TSExit:
.38df	68		pla				pla
.38e0	a8		tay				tay
.38e1	68		pla				pla
.38e2	aa		tax				tax
.38e3	60		rts				rts
.38e4					TokenSearchOne:
.38e4	a2 86		ldx #$86			ldx 	#$86 						; current token being tested.
.38e6					_TSOLoop:
.38e6	a0 00		ldy #$00			ldy 	#0
.38e8	b1 2a		lda ($2a),y			lda 	(temp0),y 					; get length of token
.38ea	f0 26		beq $3912			beq 	_TSOFail 					; if zero, end of table
.38ec	cd cf 0a	cmp $0acf			cmp 	convertBuffer 				; length is the same, compare the text matches.
.38ef	f0 11		beq $3902			beq 	_TSOCheckText
.38f1					_TSONext:
.38f1	e8		inx				inx 								; bump token
.38f2	a0 00		ldy #$00			ldy 	#0							; get length
.38f4	b1 2a		lda ($2a),y			lda 	(temp0),y
.38f6	38		sec				sec
.38f7	65 2a		adc $2a				adc 	temp0 						; add to temp0 + 1
.38f9	85 2a		sta $2a				sta 	temp0
.38fb	90 e9		bcc $38e6			bcc 	_TSOLoop
.38fd	e6 2b		inc $2b				inc 	temp0+1
.38ff	4c e6 38	jmp $38e6			jmp 	_TSOLoop
.3902					_TSOCheckText:
.3902	a8		tay				tay 								; compare length downto 1.
.3903					_TSOCheckLoop:
.3903	b1 2a		lda ($2a),y			lda 	(temp0),y 					; use EOR to compare
.3905	59 cf 0a	eor $0acf,y			eor 	convertBuffer,y
.3908	29 7f		and #$7f			and 	#$7F 						; ignore bit 7
.390a	d0 e5		bne $38f1			bne 	_TSONext 					; different goto next.
.390c	88		dey				dey 								; do all
.390d	d0 f4		bne $3903			bne 	_TSOCheckLoop
.390f	8a		txa				txa 								; return token in A and carry set
.3910	38		sec				sec
.3911	60		rts				rts
.3912					_TSOFail:
.3912	18		clc				clc
.3913	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/test.asm

.3914					TokTest:
.3914	a2 ff		ldx #$ff				ldx 	#$FF
.3916	9a		txs					txs
.3917	a9 34		lda #$34			lda 	#(TokenText1) & $FF
.3919	85 28		sta $28				sta 	codePtr
.391b	a9 39		lda #$39			lda 	#(TokenText1) >> 8
.391d	85 29		sta $29				sta 	1+(codePtr)
.391f	20 34 39	jsr $3934				jsr 	Tokenise
.3922	a2 00		ldx #$00	TokStop:	ldx 	#0 					; compare vs precalculated result
.3924	bd 34 39	lda $3934,x	_TokCheck:	lda 	TokenBytes1,x
.3927	dd ea 0c	cmp $0cea,x				cmp 	tokenBuffer,x
.392a	d0 fe		bne $392a	_TokFail:	bne 	_TokFail	 		; error.
.392c	e8		inx					inx
.392d	c9 80		cmp #$80				cmp 	#$80
.392f	d0 f3		bne $3924				bne 	_TokCheck
.3931	4c ff ff	jmp $ffff				jmp 	$FFFF 				; successfully tokenised then quit.

;******  Processing file: tokeniser/tokenise/../../generated/toktest.inc

.3934					TokenText1:
.3934					TokenBytes1:

;******  Return to file: tokeniser/tokenise/test.asm


;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokenise.asm

.0ce7					tokenHeader:
>0ce7							.fill 	3
.0cea					tokenBuffer:
>0cea							.fill 	256
.0dea					tokenBufferIndex:
>0dea							.fill 	1
.3934					Tokenise:
.3934	20 ae 39	jsr $39ae			jsr 	TokeniseMakeASCIIZ 			; convert to ASCIIZ string.
.3937					TokeniseASCIIZ:
.3937	20 bf 39	jsr $39bf			jsr 	TokeniseFixCase 			; remove controls and lower case outside quotes.
.393a	a9 00		lda #$00			lda 	#0 							; reset the token buffer index
.393c	8d ea 0d	sta $0dea			sta 	tokenBufferIndex
.393f	a8		tay				tay 								; start pointer
.3940	a9 80		lda #$80			lda 	#$80 						; empty token buffer ($80 ends it)
.3942	8d ea 0c	sta $0cea			sta 	tokenBuffer
.3945					_TokLoop:
.3945	b1 28		lda ($28),y			lda 	(codePtr),y 				; get next character
.3947	f0 46		beq $398f			beq 	_TokExit 					; if zero, then exit.
.3949	c8		iny				iny 								; skip over spaces.
.394a	c9 20		cmp #$20			cmp 	#" "
.394c	f0 f7		beq $3945			beq 	_TokLoop
.394e	88		dey				dey 								; point back to character.
.394f	c9 26		cmp #$26			cmp 	#"&"						; Hexadecimal constant.
.3951	f0 18		beq $396b			beq 	_TokHexConst
.3953	c9 22		cmp #$22			cmp 	#'"'						; Quoted String
.3955	f0 23		beq $397a			beq 	_TokQString
.3957	c9 5b		cmp #$5b			cmp 	#"Z"+1 						; > 'Z' is punctuation
.3959	b0 26		bcs $3981			bcs 	_TokPunctuation
.395b	c9 41		cmp #$41			cmp 	#"A" 						; A..Z identifier
.395d	b0 29		bcs $3988			bcs 	_TokIdentifier
.395f	c9 3a		cmp #$3a			cmp 	#"9"+1
.3961	b0 1e		bcs $3981			bcs 	_TokPunctuation 			; between 9 and A exclusive, punctuation
.3963	c9 30		cmp #$30			cmp 	#"0"
.3965	90 1a		bcc $3981			bcc 	_TokPunctuation 			; < 0, punctuation.
.3967	a9 0a		lda #$0a			lda 	#10  						; 0..9 constant in base 10.
.3969	d0 08		bne $3973			bne 	_TokConst
.396b					_TokHexConst:
.396b	c8		iny				iny									; consume token.
.396c	a9 c5		lda #$c5			lda 	#TKW_AMP 					; Write ampersand token out
.396e	20 95 39	jsr $3995			jsr 	TokenWrite
.3971	a9 10		lda #$10			lda 	#16
.3973					_TokConst:
.3973	20 7d 3a	jsr $3a7d			jsr 	TokeniseInteger
.3976	b0 cd		bcs $3945			bcs 	_TokLoop
.3978	90 18		bcc $3992			bcc 	_TokFail
.397a					_TokQString:
.397a	20 13 3b	jsr $3b13			jsr 	TokeniseString
.397d	b0 c6		bcs $3945			bcs 	_TokLoop
.397f	90 11		bcc $3992			bcc 	_TokFail
.3981					_TokPunctuation:
.3981	20 f2 3a	jsr $3af2			jsr 	TokenisePunctuation
.3984	b0 bf		bcs $3945			bcs 	_TokLoop
.3986	90 0a		bcc $3992			bcc 	_TokFail
.3988					_TokIdentifier:
.3988	20 ee 39	jsr $39ee			jsr 	TokeniseIdentifier
.398b	b0 b8		bcs $3945			bcs 	_TokLoop
.398d	90 03		bcc $3992			bcc 	_TokFail
.398f					_TokExit:
.398f	a9 01		lda #$01			lda 	#1
.3991	60		rts				rts
.3992					_TokFail:
.3992	a9 00		lda #$00			lda 	#0
.3994	60		rts				rts
.3995					TokenWrite:
.3995	85 32		sta $32				sta 	tempShort 					; save XA
.3997	48		pha				pha
.3998	8a		txa				txa
.3999	48		pha				pha
.399a	a5 32		lda $32				lda 	tempShort
.399c	ae ea 0d	ldx $0dea			ldx 	tokenBufferIndex 			; geet index
.399f	9d ea 0c	sta $0cea,x			sta 	tokenBuffer,x 				; write byte to buffer
.39a2	a9 80		lda #$80			lda 	#TOK_EOL 					; pre-emptively write EOL marker after
.39a4	9d eb 0c	sta $0ceb,x			sta 	tokenBuffer+1,x
.39a7	ee ea 0d	inc $0dea			inc 	tokenBufferIndex 			; bump index
.39aa	68		pla				pla
.39ab	aa		tax				tax
.39ac	68		pla				pla
.39ad	60		rts				rts
.39ae					TokeniseMakeASCIIZ:
.39ae	a0 00		ldy #$00			ldy 	#0							; get length of string.
.39b0	b1 28		lda ($28),y			lda 	(codePtr),y
.39b2	a8		tay				tay
.39b3	c8		iny				iny 								; +1, the NULL goes here.
.39b4	a9 00		lda #$00			lda 	#0
.39b6	91 28		sta ($28),y			sta 	(codePtr),y 				; write the trailing NULL.
.39b8	e6 28		inc $28				inc 	codePtr 					; bump the pointer.
.39ba	d0 02		bne $39be			bne 	_TMKAExit
.39bc	e6 29		inc $29				inc 	codePtr+1
.39be					_TMKAExit:
.39be	60		rts				rts
.39bf					TokeniseFixCase:
.39bf	a0 00		ldy #$00			ldy 	#0 							; position in buffer.
.39c1	a2 01		ldx #$01			ldx 	#1 							; bit 0 of this is 'in quotes'
.39c3					_TFCFlipQ:
.39c3	8a		txa				txa
.39c4	49 01		eor #$01			eor 	#1
.39c6	aa		tax				tax
.39c7					_TFCLoop:
.39c7	b1 28		lda ($28),y			lda 	(codePtr),y 				; get character
.39c9	f0 22		beq $39ed			beq 	_TFCExit 					; if zero exit.
.39cb	c9 20		cmp #$20			cmp 	#32 						; if control
.39cd	90 1a		bcc $39e9			bcc 	_TFCControl
.39cf	c8		iny				iny 								; preconsume
.39d0	c9 22		cmp #$22			cmp 	#'"'
.39d2	f0 ef		beq $39c3			beq 	_TFCFlipQ
.39d4	c9 61		cmp #$61			cmp 	#"a"						; check if L/C
.39d6	90 ef		bcc $39c7			bcc 	_TFCLoop
.39d8	c9 7b		cmp #$7b			cmp 	#"z"+1
.39da	b0 eb		bcs $39c7			bcs 	_TFCLoop
.39dc	e0 00		cpx #$00			cpx 	#0 							; in quotes, if so, leave alone.
.39de	d0 e7		bne $39c7			bne 	_TFCLoop
.39e0	88		dey				dey
.39e1	49 20		eor #$20			eor 	#"A"^"a"					; make U/C
.39e3					_TFCWrite:
.39e3	91 28		sta ($28),y			sta 	(codePtr),y
.39e5	c8		iny				iny
.39e6	4c c7 39	jmp $39c7			jmp 	_TFCLoop
.39e9					_TFCControl:
.39e9	a9 20		lda #$20			lda 	#" "
.39eb	d0 f6		bne $39e3			bne 	_TFCWrite
.39ed					_TFCExit:
.39ed	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokident.asm

.39ee					TokeniseIdentifier:
.39ee	a2 00		ldx #$00			ldx 	#0
.39f0					_TICopyID:
.39f0	b1 28		lda ($28),y			lda 	(codePtr),y					; get characters
.39f2	c9 5f		cmp #$5f			cmp 	#"_" 						; underscore converted to minus internally.
.39f4	f0 16		beq $3a0c			beq 	_TICopyUnderscore
.39f6	c9 2e		cmp #$2e			cmp 	#"."
.39f8	f0 14		beq $3a0e			beq 	_TICopyIn
.39fa	c9 30		cmp #$30			cmp 	#"0"
.39fc	90 1b		bcc $3a19			bcc 	_TIEndCopy
.39fe	c9 3a		cmp #$3a			cmp 	#"9"+1
.3a00	90 0c		bcc $3a0e			bcc 	_TICopyIn
.3a02	c9 41		cmp #$41			cmp 	#"A"
.3a04	90 13		bcc $3a19			bcc 	_TIEndCopy
.3a06	c9 5b		cmp #$5b			cmp 	#"Z"+1
.3a08	b0 0f		bcs $3a19			bcs		_TIEndCopy
.3a0a	90 02		bcc $3a0e			bcc 	_TICopyIn
.3a0c					_TICopyUnderScore:
.3a0c	a9 2d		lda #$2d			lda 	#"-"						; _ is mapped to -
.3a0e					_TICopyIn:
.3a0e	e8		inx				inx 								; write into buffer in 7 bit ASCII form
.3a0f	9d cf 0a	sta $0acf,x			sta 	convertBuffer,x
.3a12	8e cf 0a	stx $0acf			stx 	convertBuffer
.3a15	c8		iny				iny 								; next character
.3a16	4c f0 39	jmp $39f0			jmp 	_TICopyID 					; loop round
.3a19					_TIEndCopy:
.3a19	a9 24		lda #$24			lda 	#"$"
.3a1b	20 70 3a	jsr $3a70			jsr 	TIDCheckCopy
.3a1e	a9 23		lda #$23			lda 	#"#"
.3a20	20 70 3a	jsr $3a70			jsr 	TIDCheckCopy
.3a23	a9 28		lda #$28			lda 	#"("
.3a25	20 70 3a	jsr $3a70			jsr 	TIDCheckCopy
.3a28	20 a5 38	jsr $38a5			jsr 	TokenSearch 				; is it a token
.3a2b	b0 41		bcs $3a6e			bcs 	_TIExit 					; if so, then exit.
.3a2d	98		tya				tya
.3a2e	48		pha				pha
.3a2f	a0 3a		ldy #$3a			ldy 	#$3A 						; default type.
.3a31	ae cf 0a	ldx $0acf			ldx 	convertBuffer 				; is last character (
.3a34	bd cf 0a	lda $0acf,x			lda 	convertBuffer,x
.3a37	c9 28		cmp #$28			cmp 	#"("
.3a39	d0 02		bne $3a3d			bne 	_TINotArray
.3a3b	ca		dex				dex 								; yes, remove it and convert to array.
.3a3c	c8		iny				iny
.3a3d					_TINotArray:
.3a3d	bd cf 0a	lda $0acf,x			lda 	convertBuffer,x 			; check for $
.3a40	c9 24		cmp #$24			cmp 	#"$"
.3a42	d0 03		bne $3a47			bne 	_TINotString
.3a44	ca		dex				dex
.3a45	c8		iny				iny
.3a46	c8		iny				iny
.3a47					_TINotString:
.3a47	bd cf 0a	lda $0acf,x			lda 	convertBuffer,x 			; check for #
.3a4a	c9 23		cmp #$23			cmp 	#"#"
.3a4c	d0 05		bne $3a53			bne 	_TINotFloat
.3a4e	ca		dex				dex
.3a4f	c8		iny				iny
.3a50	c8		iny				iny
.3a51	c8		iny				iny
.3a52	c8		iny				iny
.3a53					_TINotFloat:
.3a53	e8		inx				inx 								; write end marker for identifier.
.3a54	98		tya				tya
.3a55	9d cf 0a	sta $0acf,x			sta 	convertBuffer,x
.3a58	8e cf 0a	stx $0acf			stx 	convertBuffer 				; update length.
.3a5b	a2 01		ldx #$01			ldx 	#1
.3a5d					_TIOutput:
.3a5d	bd cf 0a	lda $0acf,x			lda 	convertBuffer,x
.3a60	29 3f		and #$3f			and 	#$3F
.3a62	48		pha				pha
.3a63	20 95 39	jsr $3995			jsr 	TokenWrite
.3a66	e8		inx				inx
.3a67	68		pla				pla
.3a68	c9 3a		cmp #$3a			cmp 	#$3A
.3a6a	90 f1		bcc $3a5d			bcc 	_TIOutput
.3a6c	68		pla				pla
.3a6d	a8		tay				tay
.3a6e					_TIExit:
.3a6e	38		sec				sec 								; this can't fail.
.3a6f	60		rts				rts
.3a70					TIDCheckCopy:
.3a70	d1 28		cmp ($28),y			cmp 	(codePtr),y
.3a72	d0 08		bne $3a7c			bne 	_TIDCCExit
.3a74	e8		inx				inx
.3a75	9d cf 0a	sta $0acf,x			sta 	convertBuffer,x
.3a78	8e cf 0a	stx $0acf			stx 	convertBuffer
.3a7b	c8		iny				iny
.3a7c					_TIDCCExit:
.3a7c	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokinteger.asm

.3a7d					TokeniseInteger:
.3a7d	85 2c		sta $2c				sta 	temp1 						; save base
.3a7f	a2 00		ldx #$00			ldx 	#0							; count of chars so far
.3a81	8e cf 0a	stx $0acf			stx 	convertBuffer
.3a84					_TIGetChars:
.3a84	b1 28		lda ($28),y			lda 	(codePtr),y 				; check character is numeric
.3a86	c9 30		cmp #$30			cmp 	#"0"
.3a88	90 1f		bcc $3aa9			bcc 	_TIEndGet
.3a8a	c9 3a		cmp #$3a			cmp 	#"9"+1
.3a8c	90 10		bcc $3a9e			bcc 	_TIHaveChar
.3a8e	a5 2c		lda $2c				lda 	temp1 						; fail if not hex mode
.3a90	c9 0a		cmp #$0a			cmp 	#10
.3a92	f0 15		beq $3aa9			beq 	_TIEndGet
.3a94	b1 28		lda ($28),y			lda 	(codePtr),y 				; check legitimate hex.
.3a96	c9 41		cmp #$41			cmp 	#"A"
.3a98	90 0f		bcc $3aa9			bcc 	_TIEndGet
.3a9a	c9 5b		cmp #$5b			cmp 	#"Z"+1
.3a9c	b0 0b		bcs $3aa9			bcs 	_TIEndGet
.3a9e					_TIHaveChar:
.3a9e	e8		inx				inx 								; write into buffer.
.3a9f	8e cf 0a	stx $0acf			stx 	convertBuffer
.3aa2	9d cf 0a	sta $0acf,x			sta 	convertBuffer,x
.3aa5	c8		iny				iny 								; next char
.3aa6	4c 84 3a	jmp $3a84			jmp 	_TIGetChars
.3aa9					_TIEndGet:
.3aa9	e0 00		cpx #$00			cpx 	#0 							; no char acquired.
.3aab	f0 1c		beq $3ac9			beq 	_TIFail
.3aad	98		tya				tya
.3aae	48		pha				pha
.3aaf	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.3ab1	85 2a		sta $2a				sta 	temp0
.3ab3	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.3ab5	85 2b		sta $2b				sta 	1+(temp0)
.3ab7	a9 00		lda #$00			lda 	#0 							; stack level 0
.3ab9	a4 2c		ldy $2c				ldy 	temp1 						; base Y
.3abb	a2 1a		ldx #$1a		ldx	#26
.3abd	20 b0 33	jsr $33b0		jsr	mainHandler
.3ac0	68		pla				pla
.3ac1	a8		tay				tay
.3ac2	90 05		bcc $3ac9			bcc 	_TIFail 					; didn't convert.
.3ac4	20 cb 3a	jsr $3acb			jsr 	TIRecursiveOut 				; recursive output ?
.3ac7	38		sec				sec
.3ac8	60		rts				rts
.3ac9					_TIFail:
.3ac9	18		clc				clc
.3aca	60		rts				rts
.3acb					TIRecursiveOut:
.3acb	a5 50		lda $50				lda 	esInt0 						; get value to output after possible recursion
.3acd	29 3f		and #$3f			and 	#$3F
.3acf	09 40		ora #$40			ora 	#$40
.3ad1	48		pha				pha
.3ad2	a5 50		lda $50				lda 	esInt0 						; are we recursing ?
.3ad4	29 c0		and #$c0			and 	#$C0
.3ad6	05 58		ora $58				ora 	esInt1
.3ad8	05 60		ora $60				ora 	esInt2
.3ada	05 68		ora $68				ora 	esInt3
.3adc	f0 10		beq $3aee			beq 	_TIRONoRecursion
.3ade	a2 06		ldx #$06			ldx 	#6 							; shift right x 6
.3ae0					_TIROShift:
.3ae0	46 68		lsr $68				lsr 	esInt3
.3ae2	66 60		ror $60				ror 	esInt2
.3ae4	66 58		ror $58				ror 	esInt1
.3ae6	66 50		ror $50				ror 	esInt0
.3ae8	ca		dex				dex
.3ae9	d0 f5		bne $3ae0			bne 	_TIROShift
.3aeb	20 cb 3a	jsr $3acb			jsr 	TIRecursiveOut 				; call recursively
.3aee					_TIRONoRecursion:
.3aee	68		pla				pla 								; pull the old bit.
.3aef	4c 95 39	jmp $3995			jmp 	TokenWrite

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokpunct.asm

.3af2					TokenisePunctuation:
.3af2	b1 28		lda ($28),y			lda	 	(codePtr),y 				; copy next 2 chars into convertBuffer
.3af4	8d d0 0a	sta $0ad0			sta 	convertBuffer+1
.3af7	c8		iny				iny
.3af8	b1 28		lda ($28),y			lda 	(codePtr),y
.3afa	8d d1 0a	sta $0ad1			sta 	convertBuffer+2
.3afd	c8		iny				iny 								; Y is +2
.3afe	a9 02		lda #$02			lda 	#2 							; 2 character string.
.3b00	8d cf 0a	sta $0acf			sta 	convertBuffer
.3b03	20 a5 38	jsr $38a5			jsr 	TokenSearch 				; search for that token.
.3b06	b0 0a		bcs $3b12			bcs 	_TIFound
.3b08	ce cf 0a	dec $0acf			dec 	convertBuffer 				; make it a 1 character string
.3b0b	88		dey				dey 								; Y is now +1
.3b0c	20 a5 38	jsr $38a5			jsr 	TokenSearch 				; search for that token.
.3b0f	b0 01		bcs $3b12			bcs 	_TIFound
.3b11	88		dey				dey 								; Y is now +0, carry clear indicating failure.
.3b12					_TIFound:
.3b12	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokstring.asm

.3b13					TokeniseString:
.3b13	c8		iny				iny 								; skip opening quote
.3b14	a2 ff		ldx #$ff			ldx 	#255 						; count length of string.
.3b16	84 2a		sty $2a				sty 	temp0 						; save start.
.3b18					_TSGetLength:
.3b18	b1 28		lda ($28),y			lda 	(codePtr),y 				; get next
.3b1a	f0 21		beq $3b3d			beq 	_TSFail						; end of line, fail
.3b1c	c8		iny				iny
.3b1d	e8		inx				inx
.3b1e	c9 22		cmp #$22			cmp 	#'"' 						; until end quote found.
.3b20	d0 f6		bne $3b18			bne 	_TSGetLength
.3b22	a9 85		lda #$85			lda 	#TOK_STR 					; write string token out
.3b24	20 95 39	jsr $3995			jsr 	TokenWrite
.3b27	8a		txa				txa 								; output length
.3b28	20 95 39	jsr $3995			jsr 	TokenWrite
.3b2b	a4 2a		ldy $2a				ldy 	temp0 						; get original position
.3b2d	e0 00		cpx #$00			cpx 	#0 							; check ended
.3b2f	f0 09		beq $3b3a			beq 	_TSExit
.3b31					_TSOutput:
.3b31	b1 28		lda ($28),y			lda 	(codePtr),y					; output character
.3b33	20 95 39	jsr $3995			jsr 	TokenWrite
.3b36	c8		iny				iny
.3b37	ca		dex				dex
.3b38	d0 f7		bne $3b31			bne 	_TSOutput
.3b3a					_TSExit:
.3b3a	c8		iny				iny 								; skip ending quote
.3b3b	38		sec				sec 								; return CS.
.3b3c	60		rts				rts
.3b3d					_TSFail:
.3b3d	18		clc				clc
.3b3e	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokentext.asm

.3b3f					TokenTableAddress:
>3b3f	47 3b						.word 	Group0Text
>3b41	10 3d						.word 	Group1Text
>3b43	5d 3e						.word 	Group2Text
>3b45	84 3e						.word 	Group3Text

;******  Processing file: tokeniser/../generated/tokentext0.inc

.3b47					Group0Text:
>3b47	03 41 4e c4				.byte $03,$41,$4e,$c4                  ; $86 and
>3b4b	02 4f d2				.byte $02,$4f,$d2                      ; $87 or
>3b4e	03 58 4f d2				.byte $03,$58,$4f,$d2                  ; $88 xor
>3b52	02 3e bd				.byte $02,$3e,$bd                      ; $89 >=
>3b55	02 3c bd				.byte $02,$3c,$bd                      ; $8a <=
>3b58	01 be					.byte $01,$be                          ; $8b >
>3b5a	01 bc					.byte $01,$bc                          ; $8c <
>3b5c	01 bd					.byte $01,$bd                          ; $8d =
>3b5e	02 3c be				.byte $02,$3c,$be                      ; $8e <>
>3b61	01 ab					.byte $01,$ab                          ; $8f +
>3b63	01 ad					.byte $01,$ad                          ; $90 -
>3b65	02 3e be				.byte $02,$3e,$be                      ; $91 >>
>3b68	02 3c bc				.byte $02,$3c,$bc                      ; $92 <<
>3b6b	01 aa					.byte $01,$aa                          ; $93 *
>3b6d	01 af					.byte $01,$af                          ; $94 /
>3b6f	03 4d 4f c4				.byte $03,$4d,$4f,$c4                  ; $95 mod
>3b73	01 de					.byte $01,$de                          ; $96 ^
>3b75	01 a1					.byte $01,$a1                          ; $97 !
>3b77	01 bf					.byte $01,$bf                          ; $98 ?
>3b79	06 52 45 50 45 41 d4			.byte $06,$52,$45,$50,$45,$41,$d4      ; $99 repeat
>3b80	05 57 48 49 4c c5			.byte $05,$57,$48,$49,$4c,$c5          ; $9a while
>3b86	03 46 4f d2				.byte $03,$46,$4f,$d2                  ; $9b for
>3b8a	02 49 c6				.byte $02,$49,$c6                      ; $9c if
>3b8d	07 44 45 46 50 52 4f c3			.byte $07,$44,$45,$46,$50,$52,$4f,$c3  ; $9d defproc
>3b95	05 55 4e 54 49 cc			.byte $05,$55,$4e,$54,$49,$cc          ; $9e until
>3b9b	04 57 45 4e c4				.byte $04,$57,$45,$4e,$c4              ; $9f wend
>3ba0	04 4e 45 58 d4				.byte $04,$4e,$45,$58,$d4              ; $a0 next
>3ba5	04 54 48 45 ce				.byte $04,$54,$48,$45,$ce              ; $a1 then
>3baa	05 45 4e 44 49 c6			.byte $05,$45,$4e,$44,$49,$c6          ; $a2 endif
>3bb0	07 45 4e 44 50 52 4f c3			.byte $07,$45,$4e,$44,$50,$52,$4f,$c3  ; $a3 endproc
>3bb8	01 a8					.byte $01,$a8                          ; $a4 (
>3bba	04 4c 45 4e a8				.byte $04,$4c,$45,$4e,$a8              ; $a5 len(
>3bbf	04 53 47 4e a8				.byte $04,$53,$47,$4e,$a8              ; $a6 sgn(
>3bc4	04 41 42 53 a8				.byte $04,$41,$42,$53,$a8              ; $a7 abs(
>3bc9	07 52 41 4e 44 4f 4d a8			.byte $07,$52,$41,$4e,$44,$4f,$4d,$a8  ; $a8 random(
>3bd1	04 50 41 47 c5				.byte $04,$50,$41,$47,$c5              ; $a9 page
>3bd6	04 54 52 55 c5				.byte $04,$54,$52,$55,$c5              ; $aa true
>3bdb	05 46 41 4c 53 c5			.byte $05,$46,$41,$4c,$53,$c5          ; $ab false
>3be1	04 4d 49 4e a8				.byte $04,$4d,$49,$4e,$a8              ; $ac min(
>3be6	04 4d 41 58 a8				.byte $04,$4d,$41,$58,$a8              ; $ad max(
>3beb	04 53 59 53 a8				.byte $04,$53,$59,$53,$a8              ; $ae sys(
>3bf0	06 54 49 4d 45 52 a8			.byte $06,$54,$49,$4d,$45,$52,$a8      ; $af timer(
>3bf7	06 45 56 45 4e 54 a8			.byte $06,$45,$56,$45,$4e,$54,$a8      ; $b0 event(
>3bfe	04 47 45 54 a8				.byte $04,$47,$45,$54,$a8              ; $b1 get(
>3c03	06 49 4e 4b 45 59 a8			.byte $06,$49,$4e,$4b,$45,$59,$a8      ; $b2 inkey(
>3c0a	06 41 4c 4c 4f 43 a8			.byte $06,$41,$4c,$4c,$4f,$43,$a8      ; $b3 alloc(
>3c11	05 43 48 52 24 a8			.byte $05,$43,$48,$52,$24,$a8          ; $b4 chr$(
>3c17	06 4c 45 46 54 24 a8			.byte $06,$4c,$45,$46,$54,$24,$a8      ; $b5 left$(
>3c1e	05 4d 49 44 24 a8			.byte $05,$4d,$49,$44,$24,$a8          ; $b6 mid$(
>3c24	07 52 49 47 48 54 24 a8			.byte $07,$52,$49,$47,$48,$54,$24,$a8  ; $b7 right$(
>3c2c	05 53 54 52 24 a8			.byte $05,$53,$54,$52,$24,$a8          ; $b8 str$(
>3c32	04 56 41 4c a8				.byte $04,$56,$41,$4c,$a8              ; $b9 val(
>3c37	05 50 45 45 4b a8			.byte $05,$50,$45,$45,$4b,$a8          ; $ba peek(
>3c3d	05 44 45 45 4b a8			.byte $05,$44,$45,$45,$4b,$a8          ; $bb deek(
>3c43	05 4c 45 45 4b a8			.byte $05,$4c,$45,$45,$4b,$a8          ; $bc leek(
>3c49	04 41 53 43 a8				.byte $04,$41,$53,$43,$a8              ; $bd asc(
>3c4e	04 49 4e 54 a8				.byte $04,$49,$4e,$54,$a8              ; $be int(
>3c53	06 46 4c 4f 41 54 a8			.byte $06,$46,$4c,$4f,$41,$54,$a8      ; $bf float(
>3c5a	06 49 53 56 41 4c a8			.byte $06,$49,$53,$56,$41,$4c,$a8      ; $c0 isval(
>3c61	07 55 50 50 45 52 24 a8			.byte $07,$55,$50,$50,$45,$52,$24,$a8  ; $c1 upper$(
>3c69	07 4c 4f 57 45 52 24 a8			.byte $07,$4c,$4f,$57,$45,$52,$24,$a8  ; $c2 lower$(
>3c71	01 c0					.byte $01,$c0                          ; $c3 @
>3c73	01 fe					.byte $01,$fe                          ; $c4 ~
>3c75	01 a6					.byte $01,$a6                          ; $c5 &
>3c77	05 47 45 54 24 a8			.byte $05,$47,$45,$54,$24,$a8          ; $c6 get$(
>3c7d	07 49 4e 4b 45 59 24 a8			.byte $07,$49,$4e,$4b,$45,$59,$24,$a8  ; $c7 inkey$(
>3c85	03 4d 45 cd				.byte $03,$4d,$45,$cd                  ; $c8 mem
>3c89	01 a9					.byte $01,$a9                          ; $c9 )
>3c8b	01 ba					.byte $01,$ba                          ; $ca :
>3c8d	01 ac					.byte $01,$ac                          ; $cb ,
>3c8f	01 bb					.byte $01,$bb                          ; $cc ;
>3c91	01 a7					.byte $01,$a7                          ; $cd '
>3c93	02 54 cf				.byte $02,$54,$cf                      ; $ce to
>3c96	04 53 54 45 d0				.byte $04,$53,$54,$45,$d0              ; $cf step
>3c9b	04 50 52 4f c3				.byte $04,$50,$52,$4f,$c3              ; $d0 proc
>3ca0	05 4c 4f 43 41 cc			.byte $05,$4c,$4f,$43,$41,$cc          ; $d1 local
>3ca6	03 44 49 cd				.byte $03,$44,$49,$cd                  ; $d2 dim
>3caa	03 52 45 cd				.byte $03,$52,$45,$cd                  ; $d3 rem
>3cae	03 4c 45 d4				.byte $03,$4c,$45,$d4                  ; $d4 let
>3cb2	05 49 4e 50 55 d4			.byte $05,$49,$4e,$50,$55,$d4          ; $d5 input
>3cb8	04 45 4c 53 c5				.byte $04,$45,$4c,$53,$c5              ; $d6 else
>3cbd	03 56 44 d5				.byte $03,$56,$44,$d5                  ; $d7 vdu
>3cc1	05 50 52 49 4e d4			.byte $05,$50,$52,$49,$4e,$d4          ; $d8 print
>3cc7	04 44 41 54 c1				.byte $04,$44,$41,$54,$c1              ; $d9 data
>3ccc	05 49 4d 41 47 c5			.byte $05,$49,$4d,$41,$47,$c5          ; $da image
>3cd2	02 41 d4				.byte $02,$41,$d4                      ; $db at
>3cd5	04 46 4c 49 d0				.byte $04,$46,$4c,$49,$d0              ; $dc flip
>3cda	06 41 53 53 45 52 d4			.byte $06,$41,$53,$53,$45,$52,$d4      ; $dd assert
>3ce1	04 50 4f 4b c5				.byte $04,$50,$4f,$4b,$c5              ; $de poke
>3ce6	04 44 4f 4b c5				.byte $04,$44,$4f,$4b,$c5              ; $df doke
>3ceb	04 4c 4f 4b c5				.byte $04,$4c,$4f,$4b,$c5              ; $e0 loke
>3cf0	03 49 4e cb				.byte $03,$49,$4e,$cb                  ; $e1 ink
>3cf4	05 50 41 50 45 d2			.byte $05,$50,$41,$50,$45,$d2          ; $e2 paper
>3cfa	03 43 4c d3				.byte $03,$43,$4c,$d3                  ; $e3 cls
>3cfe	06 4c 4f 43 41 54 c5			.byte $06,$4c,$4f,$43,$41,$54,$c5      ; $e4 locate
>3d05	01 ae					.byte $01,$ae                          ; $e5 .
>3d07	01 a3					.byte $01,$a3                          ; $e6 #
>3d09	05 43 4c 45 41 d2			.byte $05,$43,$4c,$45,$41,$d2          ; $e7 clear
>3d0f	00					.byte $00

;******  Return to file: tokeniser/tokentext.asm


;******  Processing file: tokeniser/../generated/tokentext1.inc

.3d10					Group1Text:
>3d10	04 4c 4f 41 c4				.byte $04,$4c,$4f,$41,$c4              ; $86 load
>3d15	04 53 41 56 c5				.byte $04,$53,$41,$56,$c5              ; $87 save
>3d1a	04 4c 49 53 d4				.byte $04,$4c,$49,$53,$d4              ; $88 list
>3d1f	03 4e 45 d7				.byte $03,$4e,$45,$d7                  ; $89 new
>3d23	05 42 52 45 41 cb			.byte $05,$42,$52,$45,$41,$cb          ; $8a break
>3d29	03 52 55 ce				.byte $03,$52,$55,$ce                  ; $8b run
>3d2d	04 52 45 41 c4				.byte $04,$52,$45,$41,$c4              ; $8c read
>3d32	07 52 45 53 54 4f 52 c5			.byte $07,$52,$45,$53,$54,$4f,$52,$c5  ; $8d restore
>3d3a	03 45 4e c4				.byte $03,$45,$4e,$c4                  ; $8e end
>3d3e	04 53 54 4f d0				.byte $04,$53,$54,$4f,$d0              ; $8f stop
>3d43	04 58 45 4d d5				.byte $04,$58,$45,$4d,$d5              ; $90 xemu
>3d48	04 47 4f 54 cf				.byte $04,$47,$4f,$54,$cf              ; $91 goto
>3d4d	05 47 4f 53 55 c2			.byte $05,$47,$4f,$53,$55,$c2          ; $92 gosub
>3d53	06 52 45 54 55 52 ce			.byte $06,$52,$45,$54,$55,$52,$ce      ; $93 return
>3d5a	03 4f 52 c1				.byte $03,$4f,$52,$c1                  ; $94 ora
>3d5e	05 28 41 4e 44 a9			.byte $05,$28,$41,$4e,$44,$a9          ; $95 (and)
>3d64	03 45 4f d2				.byte $03,$45,$4f,$d2                  ; $96 eor
>3d68	03 41 44 c3				.byte $03,$41,$44,$c3                  ; $97 adc
>3d6c	03 53 54 c1				.byte $03,$53,$54,$c1                  ; $98 sta
>3d70	03 4c 44 c1				.byte $03,$4c,$44,$c1                  ; $99 lda
>3d74	03 43 4d d0				.byte $03,$43,$4d,$d0                  ; $9a cmp
>3d78	03 53 42 c3				.byte $03,$53,$42,$c3                  ; $9b sbc
>3d7c	03 41 53 cc				.byte $03,$41,$53,$cc                  ; $9c asl
>3d80	03 52 4f cc				.byte $03,$52,$4f,$cc                  ; $9d rol
>3d84	03 4c 53 d2				.byte $03,$4c,$53,$d2                  ; $9e lsr
>3d88	03 52 4f d2				.byte $03,$52,$4f,$d2                  ; $9f ror
>3d8c	03 53 54 d8				.byte $03,$53,$54,$d8                  ; $a0 stx
>3d90	03 4c 44 d8				.byte $03,$4c,$44,$d8                  ; $a1 ldx
>3d94	03 44 45 c3				.byte $03,$44,$45,$c3                  ; $a2 dec
>3d98	03 49 4e c3				.byte $03,$49,$4e,$c3                  ; $a3 inc
>3d9c	03 53 54 da				.byte $03,$53,$54,$da                  ; $a4 stz
>3da0	03 42 49 d4				.byte $03,$42,$49,$d4                  ; $a5 bit
>3da4	03 53 54 d9				.byte $03,$53,$54,$d9                  ; $a6 sty
>3da8	03 4c 44 d9				.byte $03,$4c,$44,$d9                  ; $a7 ldy
>3dac	03 43 50 d9				.byte $03,$43,$50,$d9                  ; $a8 cpy
>3db0	03 43 50 d8				.byte $03,$43,$50,$d8                  ; $a9 cpx
>3db4	03 54 53 c2				.byte $03,$54,$53,$c2                  ; $aa tsb
>3db8	03 54 52 c2				.byte $03,$54,$52,$c2                  ; $ab trb
>3dbc	03 4a 53 d2				.byte $03,$4a,$53,$d2                  ; $ac jsr
>3dc0	03 4a 4d d0				.byte $03,$4a,$4d,$d0                  ; $ad jmp
>3dc4	03 42 50 cc				.byte $03,$42,$50,$cc                  ; $ae bpl
>3dc8	03 42 4d c9				.byte $03,$42,$4d,$c9                  ; $af bmi
>3dcc	03 42 56 c3				.byte $03,$42,$56,$c3                  ; $b0 bvc
>3dd0	03 42 56 d3				.byte $03,$42,$56,$d3                  ; $b1 bvs
>3dd4	03 42 43 c3				.byte $03,$42,$43,$c3                  ; $b2 bcc
>3dd8	03 42 43 d3				.byte $03,$42,$43,$d3                  ; $b3 bcs
>3ddc	03 42 4e c5				.byte $03,$42,$4e,$c5                  ; $b4 bne
>3de0	03 42 45 d1				.byte $03,$42,$45,$d1                  ; $b5 beq
>3de4	03 42 52 c1				.byte $03,$42,$52,$c1                  ; $b6 bra
>3de8	03 42 52 cb				.byte $03,$42,$52,$cb                  ; $b7 brk
>3dec	03 50 48 d0				.byte $03,$50,$48,$d0                  ; $b8 php
>3df0	03 43 4c c3				.byte $03,$43,$4c,$c3                  ; $b9 clc
>3df4	03 50 4c d0				.byte $03,$50,$4c,$d0                  ; $ba plp
>3df8	03 53 45 c3				.byte $03,$53,$45,$c3                  ; $bb sec
>3dfc	03 52 54 c9				.byte $03,$52,$54,$c9                  ; $bc rti
>3e00	03 50 48 c1				.byte $03,$50,$48,$c1                  ; $bd pha
>3e04	03 43 4c c9				.byte $03,$43,$4c,$c9                  ; $be cli
>3e08	03 50 48 d9				.byte $03,$50,$48,$d9                  ; $bf phy
>3e0c	03 52 54 d3				.byte $03,$52,$54,$d3                  ; $c0 rts
>3e10	03 50 4c c1				.byte $03,$50,$4c,$c1                  ; $c1 pla
>3e14	03 53 45 c9				.byte $03,$53,$45,$c9                  ; $c2 sei
>3e18	03 50 4c d9				.byte $03,$50,$4c,$d9                  ; $c3 ply
>3e1c	03 44 45 d9				.byte $03,$44,$45,$d9                  ; $c4 dey
>3e20	03 54 58 c1				.byte $03,$54,$58,$c1                  ; $c5 txa
>3e24	03 54 59 c1				.byte $03,$54,$59,$c1                  ; $c6 tya
>3e28	03 54 58 d3				.byte $03,$54,$58,$d3                  ; $c7 txs
>3e2c	03 54 41 d9				.byte $03,$54,$41,$d9                  ; $c8 tay
>3e30	03 54 41 d8				.byte $03,$54,$41,$d8                  ; $c9 tax
>3e34	03 43 4c d6				.byte $03,$43,$4c,$d6                  ; $ca clv
>3e38	03 54 53 d8				.byte $03,$54,$53,$d8                  ; $cb tsx
>3e3c	03 49 4e d9				.byte $03,$49,$4e,$d9                  ; $cc iny
>3e40	03 44 45 d8				.byte $03,$44,$45,$d8                  ; $cd dex
>3e44	03 43 4c c4				.byte $03,$43,$4c,$c4                  ; $ce cld
>3e48	03 50 48 d8				.byte $03,$50,$48,$d8                  ; $cf phx
>3e4c	03 49 4e d8				.byte $03,$49,$4e,$d8                  ; $d0 inx
>3e50	03 4e 4f d0				.byte $03,$4e,$4f,$d0                  ; $d1 nop
>3e54	03 53 45 c4				.byte $03,$53,$45,$c4                  ; $d2 sed
>3e58	03 50 4c d8				.byte $03,$50,$4c,$d8                  ; $d3 plx
>3e5c	00					.byte $00

;******  Return to file: tokeniser/tokentext.asm


;******  Processing file: tokeniser/../generated/tokentext2.inc

.3e5d					Group2Text:
>3e5d	05 56 50 4f 4b c5			.byte $05,$56,$50,$4f,$4b,$c5          ; $86 vpoke
>3e63	05 56 44 4f 4b c5			.byte $05,$56,$44,$4f,$4b,$c5          ; $87 vdoke
>3e69	05 56 4c 4f 41 c4			.byte $05,$56,$4c,$4f,$41,$c4          ; $88 vload
>3e6f	04 4d 4f 44 c5				.byte $04,$4d,$4f,$44,$c5              ; $89 mode
>3e74	07 50 41 4c 45 54 54 c5			.byte $07,$50,$41,$4c,$45,$54,$54,$c5  ; $8a palette
>3e7c	06 53 50 52 49 54 c5			.byte $06,$53,$50,$52,$49,$54,$c5      ; $8b sprite
>3e83	00					.byte $00

;******  Return to file: tokeniser/tokentext.asm


;******  Processing file: tokeniser/../generated/tokentext3.inc

.3e84					Group3Text:
>3e84	06 56 50 45 45 4b a8			.byte $06,$56,$50,$45,$45,$4b,$a8      ; $86 vpeek(
>3e8b	06 56 44 45 45 4b a8			.byte $06,$56,$44,$45,$45,$4b,$a8      ; $87 vdeek(
>3e92	00					.byte $00

;******  Return to file: tokeniser/tokentext.asm


;******  Return to file: tokeniser/tokeniser.asm

.3e93					tokeniserHandler:
.3e93	7c 96 3e	jmp ($3e96,x)			jmp 	(tokeniserVectors,x)
.3e96					tokeniserVectors:
>3e96	a2 3e					.word _DummyControlHandler ; index 0
>3e98	8f 36					.word Detokenise           ; index 2
>3e9a	83 36					.word ListLine             ; index 4
>3e9c	14 39					.word TokTest              ; index 6
>3e9e	34 39					.word Tokenise             ; index 8
>3ea0	37 39					.word TokeniseASCIIZ       ; index 10
.3ea2					_DummyControlHandler:
.3ea2	60		rts			rts

;******  Return to file: basic.asm

.3ea3					section_end_tokeniser:
.3ea3					section_start_variable:

;******  Processing file: variable/variable.asm


;******  Processing file: variable/array/access.asm

.3ea3					AccessArray:
.3ea3	8a		txa				txa
.3ea4	48		pha				pha
.3ea5	e8		inx				inx
.3ea6	20 6f 3f	jsr $3f6f			jsr 	GetArrayDimensions 			; get the array dimensions one up from here.
.3ea9	68		pla				pla
.3eaa	aa		tax				tax
.3eab	b5 50		lda $50,x			lda 	esInt0,x 					; restore address to follow in temp0.
.3ead	85 2a		sta $2a				sta 	temp0
.3eaf	b5 58		lda $58,x			lda 	esInt1,x
.3eb1	85 2b		sta $2b				sta 	temp0+1
.3eb3	8a		txa				txa
.3eb4	48		pha				pha
.3eb5	98		tya				tya
.3eb6	48		pha				pha
.3eb7					_AAFollow:
.3eb7	a0 00		ldy #$00			ldy 	#0
.3eb9	b1 2a		lda ($2a),y			lda 	(temp0),y
.3ebb	48		pha				pha
.3ebc	c8		iny				iny
.3ebd	b1 2a		lda ($2a),y			lda 	(temp0),y
.3ebf	85 2b		sta $2b				sta 	temp0+1
.3ec1	68		pla				pla
.3ec2	85 2a		sta $2a				sta 	temp0
.3ec4	e8		inx				inx 								; advance to next stack slot.
.3ec5	a0 00		ldy #$00			ldy 	#0
.3ec7	b1 2a		lda ($2a),y			lda 	(temp0),y 					; compare max index vs required index
.3ec9	d5 50		cmp $50,x			cmp 	esInt0,x
.3ecb	c8		iny				iny
.3ecc	b1 2a		lda ($2a),y			lda 	(temp0),y 					; drop bit 7 of the size, indicates follow.
.3ece	85 2c		sta $2c				sta 	temp1 						; save the size in temp1 for later use.
.3ed0	29 7f		and #$7f			and 	#$7F
.3ed2	f5 58		sbc $58,x			sbc 	esInt1,x
.3ed4	90 50		bcc $3f26			bcc 	_AABadIndex 				; failed on index if max index < required.
.3ed6	18		clc				clc
.3ed7	a5 2a		lda $2a				lda 	temp0
.3ed9	69 02		adc #$02			adc 	#2
.3edb	85 2a		sta $2a				sta 	temp0
.3edd	90 02		bcc $3ee1			bcc 	_AANoCarry
.3edf	e6 2b		inc $2b				inc 	temp0+1
.3ee1					_AANoCarry:
.3ee1	b5 50		lda $50,x			lda 	esInt0,x
.3ee3	85 2e		sta $2e				sta 	temp2
.3ee5	b5 58		lda $58,x			lda 	esInt1,x
.3ee7	85 2f		sta $2f				sta 	temp2+1
.3ee9	ac ed 0d	ldy $0ded			ldy 	varType
.3eec	b9 c9 3f	lda $3fc9,y			lda 	CAActualSize-$3A,y
.3eef	b4 49		ldy $49,x			ldy 	esType+1,x 					; is it top level
.3ef1	30 02		bmi $3ef5			bmi 	_AANotPointer
.3ef3	a9 02		lda #$02			lda 	#2 							; array of pointers is 2.
.3ef5					_AANotPointer:
.3ef5	20 73 40	jsr $4073			jsr 	MultiplyTemp2ByA 			; multiply the index by the data size, in temp2.
.3ef8	18		clc				clc
.3ef9	a5 2a		lda $2a				lda 	temp0
.3efb	65 2e		adc $2e				adc 	temp2
.3efd	85 2a		sta $2a				sta 	temp0
.3eff	a5 2b		lda $2b				lda 	temp0+1
.3f01	65 2f		adc $2f				adc 	temp2+1
.3f03	85 2b		sta $2b				sta 	temp0+1
.3f05	b5 49		lda $49,x			lda 	esType+1,x
.3f07	30 07		bmi $3f10			bmi 	_AAUsedAllIndices
.3f09	a5 2c		lda $2c				lda 	temp1 						; check if this is a pointer array e.g. there are subarrays
.3f0b	10 14		bpl $3f21			bpl 	_AABadDepth 				; no, too many indexes.
.3f0d	4c b7 3e	jmp $3eb7			jmp 	_AAFollow 					; otherwise follow them.
.3f10					_AAUsedAllIndices:
.3f10	a5 2c		lda $2c				lda 	temp1 						; get original high length byte.
.3f12	30 0d		bmi $3f21			bmi 	_AABadDepth 				; if -ve then this is an array of pointers.
.3f14	68		pla				pla
.3f15	a8		tay				tay
.3f16	68		pla				pla
.3f17	aa		tax				tax
.3f18	a5 2a		lda $2a				lda 	temp0 						; copy address of array element to stack,x
.3f1a	95 50		sta $50,x			sta 	esInt0,x
.3f1c	a5 2b		lda $2b				lda 	temp0+1
.3f1e	95 58		sta $58,x			sta 	esInt1,x
.3f20	60		rts				rts
.3f21					_AABadDepth:
.3f21	a2 1c		ldx #$1c			ldx 	#ErrorID_ArrayDepth
.3f23	20 18 15	jsr $1518		jsr	errorHandler
.3f26					_AABadIndex:
.3f26	a2 1b		ldx #$1b			ldx 	#ErrorID_ArrayIndex
.3f28	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: variable/variable.asm


;******  Processing file: variable/array/create.asm

.0deb					elementSize:
>0deb							.fill	 1
.3f2b					CreateArray:
.3f2b	20 02 41	jsr $4102			jsr 	AccessSetup 				; set up the basic stuff.
.3f2e	ad ed 0d	lda $0ded			lda 	varType 					; is the variable type an array
.3f31	4a		lsr a				lsr 	a
.3f32	90 36		bcc $3f6a			bcc 	CANotArray 					; no, cause an error.
.3f34	20 0b 42	jsr $420b			jsr 	FindVariable 				; does the variable exist already
.3f37	b0 2c		bcs $3f65			bcs 	CAFound 					; cannot redefine it.
.3f39	20 3f 41	jsr $413f			jsr 	CreateVariable 				; create the variable entry.
.3f3c	a5 2a		lda $2a				lda 	temp0 						; push address of new variable entry on the stack
.3f3e	48		pha				pha
.3f3f	a5 2b		lda $2b				lda 	temp0+1
.3f41	48		pha				pha
.3f42	a2 00		ldx #$00			ldx 	#0
.3f44	20 6f 3f	jsr $3f6f			jsr 	GetArrayDimensions 			; get the array dimensions
.3f47	a2 00		ldx #$00			ldx 	#0 							; create at level $00
.3f49	20 9f 3f	jsr $3f9f			jsr 	CreateArrayLevel 			; level to YA
.3f4c	aa		tax				tax 								; level now in YX
.3f4d	68		pla				pla 								; get address back to temp0 to write.
.3f4e	85 2b		sta $2b				sta 	temp0+1
.3f50	68		pla				pla
.3f51	85 2a		sta $2a				sta 	temp0
.3f53	98		tya				tya 								; write YX there.
.3f54	a0 06		ldy #$06			ldy 	#6
.3f56	91 2a		sta ($2a),y			sta 	(temp0),y
.3f58	88		dey				dey
.3f59	8a		txa				txa
.3f5a	91 2a		sta ($2a),y			sta 	(temp0),y
.3f5c	ac ee 0d	ldy $0dee			ldy 	varEnd 						; restore Y and exit.
.3f5f	60		rts				rts
.3f60					CASize:
.3f60	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.3f62	20 18 15	jsr $1518		jsr	errorHandler
.3f65					CAFound:
.3f65	a2 19		ldx #$19			ldx 	#ErrorID_DupArray
.3f67	20 18 15	jsr $1518		jsr	errorHandler
.3f6a					CANotArray:
.3f6a	a2 1a		ldx #$1a			ldx 	#ErrorID_NotArray
.3f6c	20 18 15	jsr $1518		jsr	errorHandler
.3f6f					GetArrayDimensions:
.3f6f	ad ed 0d	lda $0ded			lda 	varType 					; push variable type on the stack.
.3f72	48		pha				pha
.3f73	ac ee 0d	ldy $0dee			ldy 	varEnd
.3f76					_CAGetDimensions:
.3f76	8a		txa				txa 								; get the next level
.3f77	a2 0a		ldx #$0a		ldx	#10
.3f79	20 b0 33	jsr $33b0		jsr	mainHandler
.3f7c	aa		tax				tax
.3f7d	b5 58		lda $58,x			lda 	esInt1,x 					; index must be < 8192
.3f7f	29 e0		and #$e0			and 	#$E0
.3f81	15 60		ora $60,x			ora 	esInt2,x
.3f83	15 68		ora $68,x			ora 	esInt3,x
.3f85	d0 d9		bne $3f60			bne 	CASize
.3f87	e8		inx				inx 								; next level.
.3f88	b1 28		lda ($28),y			lda 	(codePtr),y 				; get/consume following character
.3f8a	c8		iny				iny
.3f8b	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; loop back if more dimensions
.3f8d	f0 e7		beq $3f76			beq 	_CAGetDimensions
.3f8f	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN 				; right bracket ?
.3f91	d0 cd		bne $3f60			bne 	CASize
.3f93	a9 ff		lda #$ff			lda 	#$FF 						; set the type past the end to $FF so we know how many
.3f95	95 48		sta $48,x			sta 	esType,x 					; dimensions there are.
.3f97	68		pla				pla 								; restore the variable type ($3A-$3F)
.3f98	8d ed 0d	sta $0ded			sta 	varType
.3f9b	8c ee 0d	sty $0dee			sty 	varEnd 						; save exit Y value, after dimensions
.3f9e	60		rts				rts
.3f9f					CreateArrayLevel:
.3f9f	ac ed 0d	ldy $0ded			ldy 	varType
.3fa2	b9 c9 3f	lda $3fc9,y			lda 	CAActualSize-$3A,y
.3fa5	8d eb 0d	sta $0deb			sta 	elementSize 				; get element size this level.
.3fa8	b4 49		ldy $49,x			ldy 	esType+1,x 					; is it top level
.3faa	30 05		bmi $3fb1			bmi 	_CANotPointer
.3fac	a9 02		lda #$02			lda 	#2 							; array of pointers is 2.
.3fae	8d eb 0d	sta $0deb			sta 	elementSize
.3fb1					_CANotPointer:
.3fb1	a5 35		lda $35				lda 	lowMemory 					; start creating at temp0, saving start on stack.
.3fb3	85 2a		sta $2a				sta 	temp0
.3fb5	48		pha				pha
.3fb6	a5 36		lda $36				lda 	lowMemory+1
.3fb8	85 2b		sta $2b				sta 	temp0+1
.3fba	48		pha				pha
.3fbb	20 3c 40	jsr $403c			jsr 	AllocateArraySpace 			; allocate space for all array stuff at this level.
.3fbe	a0 00		ldy #$00			ldy 	#0
.3fc0	b5 50		lda $50,x			lda 	esInt0,x
.3fc2	91 2a		sta ($2a),y			sta 	(temp0),y
.3fc4	c8		iny				iny
.3fc5	b5 58		lda $58,x			lda 	esInt1,x
.3fc7	91 2a		sta ($2a),y			sta 	(temp0),y
.3fc9	b5 49		lda $49,x			lda 	esType+1,x 					; do we have another level ?
.3fcb	30 06		bmi $3fd3			bmi 	_CALNotLast
.3fcd	b1 2a		lda ($2a),y			lda 	(temp0),y 					; set bit 7, indicates an array of pointers to other levels.
.3fcf	09 80		ora #$80			ora 	#$80
.3fd1	91 2a		sta ($2a),y			sta 	(temp0),y
.3fd3					_CALNotLast:
.3fd3	a9 02		lda #$02			lda 	#2
.3fd5	20 f9 3f	jsr $3ff9			jsr 	_CALAddTemp0
.3fd8	b5 50		lda $50,x			lda 	esInt0,x 					; copy stack:01 to stack:23 so we can use it to
.3fda	95 60		sta $60,x			sta 	esInt2,x 					; count.
.3fdc	b5 58		lda $58,x			lda 	esInt1,x
.3fde	95 68		sta $68,x			sta 	esInt3,x
.3fe0					_CALClear:
.3fe0	20 09 40	jsr $4009			jsr 	EraseOneElement
.3fe3	ad eb 0d	lda $0deb			lda 	elementSize 				; move to next element
.3fe6	20 f9 3f	jsr $3ff9			jsr 	_CALAddTemp0
.3fe9	b5 60		lda $60,x			lda 	esInt2,x 					; decrement counter
.3feb	d0 02		bne $3fef			bne 	_CALNoBorrow
.3fed	d6 68		dec $68,x			dec 	esInt3,x
.3fef					_CALNoBorrow:
.3fef	d6 60		dec $60,x			dec 	esInt2,x
.3ff1	b5 68		lda $68,x			lda 	esInt3,x 					; loop back if >= 0 - we need +1 because indices
.3ff3	10 eb		bpl $3fe0			bpl 	_CALClear 					; start at 0 e.g. x(10) is actually 11 array entries.
.3ff5	68		pla				pla 								; restore the start of this into YA.
.3ff6	a8		tay				tay
.3ff7	68		pla				pla
.3ff8	60		rts				rts
.3ff9					_CALAddTemp0:
.3ff9	18		clc				clc
.3ffa	65 2a		adc $2a				adc 	temp0
.3ffc	85 2a		sta $2a				sta 	temp0
.3ffe	90 02		bcc $4002			bcc 	_CALANoCarry
.4000	e6 2b		inc $2b				inc 	temp0+1
.4002					_CALANoCarry:
.4002	60		rts				rts
.4003					CAActualSize:
>4003	04 04						.byte 	VarISize,VarISize
>4005	02 02						.byte 	VarSSize,VarSSize
>4007	06 06						.byte 	VarFSize,VarFSize
.4009					EraseOneElement:
.4009	b5 49		lda $49,x			lda 	esType+1,x 					; is this a list of sub arrays
.400b	10 09		bpl $4016			bpl 	_EOESubArray
.400d	a0 00		ldy #$00			ldy 	#0 							; write the empty variable value out.
.400f	ad ed 0d	lda $0ded			lda 	varType
.4012	20 a9 41	jsr $41a9			jsr 	ZeroTemp0Y
.4015	60		rts				rts
.4016					_EOESubArray:
.4016	a5 2a		lda $2a				lda 	temp0 						; save temp0, these are effectively locals.
.4018	48		pha				pha
.4019	a5 2b		lda $2b				lda 	temp0+1
.401b	48		pha				pha
.401c	ad eb 0d	lda $0deb			lda 	elementSize 				; save element size
.401f	48		pha				pha
.4020	e8		inx				inx 								; create at next level
.4021	20 9f 3f	jsr $3f9f			jsr 	CreateArrayLevel
.4024	ca		dex				dex
.4025	85 32		sta $32				sta 	tempShort 					; save A
.4027	68		pla				pla  								; restore element size.
.4028	8d eb 0d	sta $0deb			sta 	elementSize
.402b	68		pla				pla 								; restore temp0, which is where this new array level goes.
.402c	85 2b		sta $2b				sta 	temp0+1
.402e	68		pla				pla
.402f	85 2a		sta $2a				sta 	temp0
.4031	98		tya				tya 								; store Y/A there
.4032	a0 01		ldy #$01			ldy 	#1
.4034	91 2a		sta ($2a),y			sta 	(temp0),y
.4036	a5 32		lda $32				lda 	tempShort
.4038	88		dey				dey
.4039	91 2a		sta ($2a),y			sta 	(temp0),y
.403b	60		rts				rts
.403c					AllocateArraySpace:
.403c	18		clc				clc 								; element count + 1 => temp2.
.403d	b5 50		lda $50,x			lda 	esInt0,x
.403f	69 01		adc #$01			adc 	#1
.4041	85 2e		sta $2e				sta 	temp2
.4043	b5 58		lda $58,x			lda 	esInt1,x
.4045	69 00		adc #$00			adc 	#0
.4047	85 2f		sta $2f				sta 	temp2+1
.4049	ad eb 0d	lda $0deb			lda 	elementSize 				; bytes per element
.404c	20 73 40	jsr $4073			jsr 	MultiplyTemp2ByA 			; temp2 = (count + 1) x bytes per element.
.404f	18		clc				clc 								; add 2 for 'max element' byte.
.4050	a5 2e		lda $2e				lda 	temp2
.4052	69 02		adc #$02			adc 	#2
.4054	85 2e		sta $2e				sta 	temp2
.4056	90 02		bcc $405a			bcc 	_AASNoCarry
.4058	e6 2f		inc $2f				inc 	temp2+1
.405a					_AASNoCarry:
.405a	18		clc				clc 								; add to low memory, allocating space.
.405b	a5 35		lda $35				lda 	lowMemory
.405d	65 2e		adc $2e				adc 	temp2
.405f	85 35		sta $35				sta 	lowMemory
.4061	a5 36		lda $36				lda 	lowMemory+1
.4063	65 2f		adc $2f				adc 	temp2+1
.4065	85 36		sta $36				sta 	lowMemory+1
.4067	b0 05		bcs $406e			bcs 	_AASFail 					; out of memory as adding causes wrapround
.4069	c5 34		cmp $34				cmp 	highMemory+1 				; >= high memory pointer.
.406b	b0 01		bcs $406e			bcs 	_AASFail
.406d	60		rts				rts
.406e					_AASFail:
.406e	a2 22		ldx #$22			ldx 	#ErrorID_Memory
.4070	20 18 15	jsr $1518		jsr	errorHandler
.4073					MultiplyTemp2ByA:
.4073	48		pha				pha
.4074	a5 2e		lda $2e				lda 	temp2 						; copy temp2 to temp3.
.4076	85 30		sta $30				sta 	temp3
.4078	a5 2f		lda $2f				lda 	temp2+1
.407a	85 31		sta $31				sta 	temp3+1
.407c	68		pla				pla
.407d	06 2e		asl $2e				asl 	temp2 						; double it.
.407f	26 2f		rol $2f				rol 	temp2+1
.4081	c9 02		cmp #$02			cmp 	#2 							; if x 2 then exit.
.4083	f0 15		beq $409a			beq 	_MTBAExit
.4085	c9 06		cmp #$06			cmp 	#6 							; if x 6 then add temp3 to temp2
.4087	d0 0d		bne $4096			bne 	_MTBANotFloat
.4089	18		clc				clc 								; so this will make it x 3
.408a	a5 2e		lda $2e				lda 	temp2
.408c	65 30		adc $30				adc 	temp3
.408e	85 2e		sta $2e				sta 	temp2
.4090	a5 2f		lda $2f				lda 	temp2+1
.4092	65 31		adc $31				adc 	temp3+1
.4094	85 2f		sta $2f				sta 	temp2+1
.4096					_MTBANotFloat:
.4096	06 2e		asl $2e				asl 	temp2 						; double it.
.4098	26 2f		rol $2f				rol 	temp2+1
.409a					_MTBAExit:
.409a	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/variable/access.asm

.0dec					varHash:
>0dec							.fill	1
.0ded					varType:
>0ded							.fill 	1
.0dee					varEnd:
>0dee							.fill 	1
.003b					hashList:
>003b							.fill 	2
.409b					AccessVariable:
.409b	aa		tax				tax 								; stack in X
.409c	c8		iny				iny									; look at second character
.409d	b1 28		lda ($28),y			lda 	(codePtr),y
.409f	88		dey				dey
.40a0	c9 3a		cmp #$3a			cmp 	#TYPE_INT 					; is it the integer marker ($3A)
.40a2	d0 15		bne $40b9			bne 	_AVLong 					; no, always use the hash tables.
.40a4	b1 28		lda ($28),y			lda 	(codePtr),y 				; this is the 6 bit ASCII of A-Z 1-26
.40a6	38		sec				sec 	 							; make it 0-25
.40a7	e9 01		sbc #$01			sbc 	#1
.40a9	0a		asl a				asl 	a 							; x 4 as 4 bytes / variable.
.40aa	0a		asl a				asl 	a
.40ab	95 50		sta $50,x			sta 	esInt0,x
.40ad	a9 0a		lda #$0a			lda 	#SingleLetterVar >> 8 		; make it an address
.40af	95 58		sta $58,x			sta 	esInt1,x
.40b1	a9 80		lda #$80			lda 	#$80 						; type is an integer reference.
.40b3	95 48		sta $48,x			sta 	esType,x
.40b5	c8		iny				iny 								; skip over the variable reference in the code.
.40b6	c8		iny				iny  								; (1 letter, 1 type)
.40b7	8a		txa				txa 								; stack in A to return.
.40b8	60		rts				rts
.40b9					_AVLong:
.40b9	8a		txa				txa
.40ba	48		pha				pha
.40bb	20 02 41	jsr $4102			jsr 	AccessSetup 				; set up the basic information we need for later
.40be	20 0b 42	jsr $420b			jsr 	FindVariable 				; does the variable exist already ?
.40c1	b0 0e		bcs $40d1			bcs 	_AVFound 					; yes, then its found
.40c3	ad ed 0d	lda $0ded			lda 	varType 					; otherwise, is the variable type an array
.40c6	4a		lsr a				lsr 	a
.40c7	90 05		bcc $40ce			bcc 	_AVCanCreate 				; if not, we can autocreate
.40c9	a2 15		ldx #$15			ldx 	#ErrorID_noauto
.40cb	20 18 15	jsr $1518		jsr	errorHandler
.40ce					_AVCanCreate:
.40ce	20 3f 41	jsr $413f			jsr 	CreateVariable 				; variable does not exist, create it.
.40d1					_AVFound:
.40d1	68		pla				pla
.40d2	aa		tax				tax
.40d3	18		clc				clc 								; copy temp0 (variable record address)
.40d4	a5 2a		lda $2a				lda 	temp0 						; +5 (to point to the data)
.40d6	69 05		adc #$05			adc 	#5 							; (first 5 bytes are link, name, hash)
.40d8	95 50		sta $50,x			sta 	esInt0,x
.40da	a5 2b		lda $2b				lda 	temp0+1
.40dc	69 00		adc #$00			adc 	#0
.40de	95 58		sta $58,x			sta 	esInt1,x
.40e0	a9 00		lda #$00			lda 	#0
.40e2	95 60		sta $60,x			sta 	esInt2,x
.40e4	95 68		sta $68,x			sta 	esInt3,x
.40e6	ac ed 0d	ldy $0ded			ldy 	varType 					; get the type ID from the type.
.40e9	b9 c2 40	lda $40c2,y			lda 	_AVTypeTable-$3A,y 			; e.g. a reference to int/float/string.
.40ec	95 48		sta $48,x			sta 	esType,x
.40ee	ac ee 0d	ldy $0dee			ldy 	varEnd 						; restore Y
.40f1	ad ed 0d	lda $0ded			lda 	VarType 					; get variable type, put LSB into C
.40f4	4a		lsr a				lsr 	a
.40f5	90 03		bcc $40fa			bcc 	_AVNotArray 				; if carry set,it is an array variable.
.40f7	20 a3 3e	jsr $3ea3			jsr 	AccessArray 				; array lookup. if LSB was set.
.40fa					_AVNotArray:
.40fa	8a		txa				txa 								; return stack in A and return
.40fb	60		rts				rts
.40fc					_AVTypeTable:
>40fc	80 80						.byte 	$80,$80						; integer
>40fe	c0 c0						.byte 	$C0,$C0 					; string
>4100	81 81						.byte 	$81,$81 					; float
.4102					AccessSetup:
.4102	a9 00		lda #$00			lda 	#0 							; zero the hash byte.
.4104	8d ec 0d	sta $0dec			sta 	varHash
.4107	98		tya				tya
.4108	48		pha				pha
.4109	b1 28		lda ($28),y	_ASLoop:lda 	(codePtr),y					; get next identifier character
.410b	c9 3a		cmp #$3a			cmp 	#$3A 						; is it 3A-3F which end all identifiers ?
.410d	b0 0b		bcs $411a			bcs 	_ASComplete
.410f	18		clc				clc 								; add to the hash. Might improve this.
.4110	6d ec 0d	adc $0dec			adc 	varHash
.4113	8d ec 0d	sta $0dec			sta 	varHash
.4116	c8		iny				iny 								; next character
.4117	4c 09 41	jmp $4109			jmp 	_ASLoop
.411a					_ASComplete:
.411a	8d ed 0d	sta $0ded			sta 	varType 					; save variable type byte
.411d	c8		iny				iny
.411e	8c ee 0d	sty $0dee			sty 	varEnd 						; save the ending position.
.4121	38		sec				sec 								; convert type byte from $3A-$3F to 0..5
.4122	e9 3a		sbc #$3a			sbc 	#$3A
.4124	0a		asl a				asl 	a 							; multiply by hashTableSize (8 in this case)
.4125	0a		asl a				asl 	a
.4126	0a		asl a				asl 	a
.4127	0a		asl a				asl 	a 							; 2 bytes/word
.4128	85 2a		sta $2a				sta 	temp0 						; this is the offset to the start of the table.
.412a	ad ec 0d	lda $0dec			lda 	varHash 					; get hash
.412d	29 07		and #$07			and 	#(hashTableSize-1)			; force into range (for 8,0..7)
.412f	0a		asl a				asl  	a 							; x 2 (for word) and clear carry
.4130	65 2a		adc $2a				adc 	temp0 						; now offset from the start of the hash table.
.4132	69 68		adc #$68			adc 	#hashTables & $FF 			; add to hash table base address
.4134	85 3b		sta $3b				sta 	hashList 					; making hashLists point to the head of the link list.
.4136	a9 0a		lda #$0a			lda 	#hashTables >> 8
.4138	69 00		adc #$00			adc 	#0
.413a	85 3c		sta $3c				sta 	hashList+1
.413c	68		pla				pla
.413d	a8		tay				tay
.413e	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/variable/create.asm

.413f					CreateVariable:
.413f	98		tya				tya 								; push Y on the stack twice.
.4140	48		pha				pha									; position in code of the new variable.
.4141	48		pha				pha
.4142	ae ed 0d	ldx $0ded			ldx 	varType 					; get var type 0-5 from the var type
.4145	bd 69 41	lda $4169,x			lda		_CVSize-$3A,x 				; the bytes required for this new variable.
.4148	48		pha				pha 								; save length
.4149	a5 35		lda $35				lda 	lowMemory 					; set low Memory ptr to temp0
.414b	85 2a		sta $2a				sta 	temp0 						; (address of the new variable)
.414d	a5 36		lda $36				lda 	lowMemory+1
.414f	85 2b		sta $2b				sta 	temp0+1
.4151	68		pla				pla 								; get length
.4152	18		clc				clc 								; add to low memory.
.4153	65 35		adc $35				adc 	lowMemory
.4155	85 35		sta $35				sta 	lowMemory
.4157	90 08		bcc $4161			bcc 	_CVNoCarry
.4159	e6 36		inc $36				inc 	lowMemory+1
.415b	a5 36		lda $36				lda 	lowMemory+1 				; check out of memory.
.415d	c5 34		cmp $34				cmp 	highMemory+1
.415f	b0 3d		bcs $419e			bcs 	_CVMemory
.4161					_CVNoCarry:
.4161	ad ec 0d	lda $0dec			lda 	varHash 					; store hash at offset 4.
.4164	a0 04		ldy #$04			ldy 	#4
.4166	91 2a		sta ($2a),y			sta 	(temp0),y
.4168	68		pla				pla 								; offset, work out where the variable name is.
.4169	18		clc				clc
.416a	65 28		adc $28				adc 	codePtr
.416c	a0 02		ldy #$02			ldy 	#2 							; copy that into slots 2 + 3.
.416e	91 2a		sta ($2a),y			sta 	(temp0),y
.4170	a5 29		lda $29				lda 	codePtr+1
.4172	69 00		adc #$00			adc 	#0
.4174	c8		iny				iny
.4175	91 2a		sta ($2a),y			sta 	(temp0),y
.4177	cd c9 0a	cmp $0ac9			cmp 	basePage+1 					; compare against the program base.
.417a	b0 03		bcs $417f			bcs 	_CVNotImmediate
.417c	20 e1 41	jsr $41e1			jsr 	CloneVariableName 			; we need to clone the variable name (immediate mode)
.417f					_CVNotImmediate:
.417f	a0 00		ldy #$00			ldy 	#0 							; copy current hash pointer in link
.4181	b1 3b		lda ($3b),y			lda 	(hashList),y 				; so we're inserting it in the front of a linked list
.4183	91 2a		sta ($2a),y			sta 	(temp0),y
.4185	c8		iny				iny
.4186	b1 3b		lda ($3b),y			lda 	(hashList),y
.4188	91 2a		sta ($2a),y			sta 	(temp0),y
.418a	a5 2b		lda $2b				lda 	temp0+1 					; set new link
.418c	91 3b		sta ($3b),y			sta 	(hashList),y
.418e	88		dey				dey
.418f	a5 2a		lda $2a				lda 	temp0
.4191	91 3b		sta ($3b),y			sta 	(hashList),y
.4193	ad ed 0d	lda $0ded			lda 	varType 					; type in A
.4196	a0 05		ldy #$05			ldy 	#5 							; offset in Y
.4198	20 a9 41	jsr $41a9			jsr 	ZeroTemp0Y 					; zero (temp0),y with whatever type.
.419b	68		pla				pla
.419c	a8		tay				tay
.419d	60		rts				rts
.419e					_CVMemory:
.419e	a2 22		ldx #$22			ldx 	#ErrorID_Memory
.41a0	20 18 15	jsr $1518		jsr	errorHandler
>41a3	09 07				_CVSize:.byte 	VarHSize+VarISize,VarHSize+VarASize 					; <storage for integer>
>41a5	07 07						.byte 	VarHSize+VarSSize,VarHSize+VarASize 					; <storage for string>
>41a7	0b 07						.byte 	VarHSize+VarFSize,VarHSize+VarASize 					; <storage for float>
.41a9					ZeroTemp0Y:
.41a9	4a		lsr a				lsr 	a 							; bit 0 in carry
.41aa	0a		asl a				asl 	a
.41ab	b0 19		bcs $41c6			bcs 	_ZTExit 					; we don't initialise arrays.
.41ad	c9 3c		cmp #$3c			cmp 	#$3C 						; check string
.41af	f0 16		beq $41c7			beq 	_ZTWriteNullString 			; write "" string
.41b1	c9 3e		cmp #$3e			cmp 	#$3E 						; check float
.41b3	f0 22		beq $41d7			beq 	_ZTWriteFloat
.41b5	98		tya				tya
.41b6	48		pha				pha
.41b7	a9 00		lda #$00			lda 	#0
.41b9	91 2a		sta ($2a),y			sta 	(temp0),y
.41bb	c8		iny				iny
.41bc	91 2a		sta ($2a),y			sta 	(temp0),y
.41be	c8		iny				iny
.41bf	91 2a		sta ($2a),y			sta 	(temp0),y
.41c1	c8		iny				iny
.41c2	91 2a		sta ($2a),y			sta 	(temp0),y
.41c4	68		pla				pla
.41c5	a8		tay				tay
.41c6					_ZTExit:
.41c6	60		rts				rts
.41c7					_ZTWriteNullString:
.41c7	a9 00		lda #$00			lda 	#0 							; put a reference to null string as the default value.
.41c9	8d ce 0a	sta $0ace			sta 	NullString
.41cc	a9 ce		lda #$ce			lda 	#NullString & $FF
.41ce	91 2a		sta ($2a),y			sta 	(temp0),y
.41d0	a9 0a		lda #$0a			lda 	#NullString >> 8
.41d2	c8		iny				iny
.41d3	91 2a		sta ($2a),y			sta 	(temp0),y
.41d5	88		dey				dey
.41d6	60		rts				rts
.41d7					_ZTWriteFloat:
.41d7	8a		txa				txa
.41d8	48		pha				pha
.41d9	a2 20		ldx #$20		ldx	#32
.41db	20 2a 1b	jsr $1b2a		jsr	floatingpointHandler
.41de	68		pla				pla
.41df	aa		tax				tax
.41e0	60		rts				rts
.41e1					CloneVariableName:
.41e1	a0 02		ldy #$02			ldy 	#2 							; copy vname address to temp2
.41e3	b1 2a		lda ($2a),y			lda 	(temp0),y
.41e5	85 2e		sta $2e				sta 	temp2
.41e7	c8		iny				iny
.41e8	b1 2a		lda ($2a),y			lda 	(temp0),y
.41ea	85 2f		sta $2f				sta 	temp2+1
.41ec	a5 36		lda $36				lda 	lowMemory+1 				; copy lowMemory address to (temp0),2/3
.41ee	91 2a		sta ($2a),y			sta 	(temp0),y
.41f0	88		dey				dey
.41f1	a5 35		lda $35				lda 	lowMemory
.41f3	91 2a		sta ($2a),y			sta 	(temp0),y
.41f5	a0 00		ldy #$00			ldy 	#0 							; copy data from (temp2) to (lowMemory)
.41f7					_CVNCopy:
.41f7	b1 2e		lda ($2e),y			lda		(temp2),y
.41f9	91 35		sta ($35),y			sta 	(lowMemory),y
.41fb	c8		iny				iny
.41fc	c9 3a		cmp #$3a			cmp 	#$3A 						; until the whole name has been copied.
.41fe	90 f7		bcc $41f7			bcc 	_CVNCopy
.4200	98		tya				tya 								; add Y to low memory
.4201	18		clc				clc
.4202	65 35		adc $35				adc 	lowMemory
.4204	85 35		sta $35				sta 	lowMemory
.4206	90 02		bcc $420a			bcc 	_CVNNoCarry
.4208	e6 36		inc $36				inc 	lowMemory+1
.420a					_CVNNoCarry:
.420a	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/variable/find.asm

.420b					FindVariable:
.420b	98		tya				tya
.420c	48		pha				pha
.420d	98		tya				tya 								; point temp2 to the actual name
.420e	18		clc				clc 								; in memory of the variable being created
.420f	65 28		adc $28				adc 	codePtr
.4211	85 2e		sta $2e				sta 	temp2
.4213	a5 29		lda $29				lda 	codePtr+1
.4215	69 00		adc #$00			adc 	#0
.4217	85 2f		sta $2f				sta 	temp2+1
.4219	a0 00		ldy #$00			ldy 	#0
.421b	a5 3b		lda $3b				lda 	hashList 					; copy hashlist to temp0
.421d	85 2a		sta $2a				sta 	temp0
.421f	a5 3c		lda $3c				lda 	hashList+1
.4221	85 2b		sta $2b				sta 	temp0+1
.4223	a0 01		ldy #$01	_FVNext:ldy 	#1 							; get MSB
.4225	b1 2a		lda ($2a),y			lda 	(temp0),y
.4227	f0 2c		beq $4255			beq 	_FVFail
.4229	aa		tax				tax
.422a	88		dey				dey		 							; get LSB
.422b	b1 2a		lda ($2a),y			lda 	(temp0),y
.422d	85 2a		sta $2a				sta 	temp0 						; update pointer.
.422f	86 2b		stx $2b				stx 	temp0+1
.4231	a0 04		ldy #$04			ldy 	#4 							; check hashes match
.4233	b1 2a		lda ($2a),y			lda 	(temp0),y
.4235	cd ec 0d	cmp $0dec			cmp 	varHash
.4238	d0 e9		bne $4223			bne 	_FVNext 					; if not, no point in checking the name.
.423a	88		dey				dey 								; copy name pointer (+2,+3) to temp1.
.423b	b1 2a		lda ($2a),y			lda 	(temp0),y
.423d	85 2d		sta $2d				sta 	temp1+1
.423f	88		dey				dey
.4240	b1 2a		lda ($2a),y			lda 	(temp0),y
.4242	85 2c		sta $2c				sta 	temp1
.4244	a0 00		ldy #$00			ldy 	#0
.4246					_FVCheck:
.4246	b1 2c		lda ($2c),y			lda 	(temp1),y 					; compare names
.4248	d1 2e		cmp ($2e),y			cmp 	(temp2),y
.424a	d0 d7		bne $4223			bne 	_FVNext		 				; fail if different.
.424c	c8		iny				iny
.424d	c9 3a		cmp #$3a			cmp 	#$3A 						; until reached the end marker.
.424f	90 f5		bcc $4246			bcc 	_FVCheck
.4251	68		pla				pla
.4252	a8		tay				tay
.4253	38		sec				sec
.4254	60		rts				rts
.4255					_FVFail:
.4255	68		pla				pla
.4256	a8		tay				tay
.4257	18		clc				clc
.4258	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/variable/reset.asm

.4259					HashTableReset:
.4259	a2 60		ldx #$60			ldx 	#6*2*hashTableSize			; 6 types, 2 bytes per table entry.
.425b	a9 00		lda #$00			lda 	#0
.425d					_HTRClear:
.425d	9d 67 0a	sta $0a67,x			sta 	hashTables-1,x
.4260	ca		dex				dex
.4261	d0 fa		bne $425d			bne 	_HTRClear
.4263	60		rts				rts

;******  Return to file: variable/variable.asm

.4264					variableHandler:
.4264	7c 67 42	jmp ($4267,x)			jmp 	(variableVectors,x)
.4267					variableVectors:
>4267	6f 42					.word _DummyControlHandler ; index 0
>4269	9b 40					.word AccessVariable       ; index 2
>426b	2b 3f					.word CreateArray          ; index 4
>426d	59 42					.word HashTableReset       ; index 6
.426f					_DummyControlHandler:
.426f	60		rts			rts

;******  Return to file: basic.asm

.4270					section_end_variable:
.4270					section_start_footer:

;******  Processing file: footer/footer.asm


;******  Processing file: footer/99end.asm

.003d					endZeroPage:
.0def					endStorage:
>4270							.align 	256
.4300					programMemory:
>42ff	ff						.byte 	$FF

;******  Return to file: footer/footer.asm


;******  Return to file: basic.asm

.4300					section_end_footer:

;******  End of listing
